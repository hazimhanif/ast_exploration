SOURCE_FILE	108:9	9143:0	0	
SIMPLE_DECL	108:9	108:43	1	char [ ] tiffcrop_version_id ; tiffcrop_version_id = "2.4" ;
VAR_DECL	108:9	108:14	2	char [ ] tiffcrop_version_id ; tiffcrop_version_id = "2.4"
TYPE	108:9	108:33	3	char [ ]
TYPE_NAME	108:9	108:9	4	char
LEAF_NODE	108:9	108:9	5	char
TYPE_SUFFIX	108:33	108:34	4	[ ]
LEAF_NODE	108:33	108:33	5	[
LEAF_NODE	108:34	108:34	5	]
NAME	108:14	108:14	3	tiffcrop_version_id
LEAF_NODE	108:14	108:14	4	tiffcrop_version_id
LEAF_NODE	0:0	0:0	3	;
INIT	108:14	108:14	3	tiffcrop_version_id = "2.4"
ASSIGN	108:14	108:38	4	tiffcrop_version_id = "2.4"
LVAL	108:14	108:14	5	tiffcrop_version_id
NAME	108:14	108:14	6	tiffcrop_version_id
LEAF_NODE	108:14	108:14	7	tiffcrop_version_id
ASSIGN_OP	108:36	108:36	5	=
LEAF_NODE	108:36	108:36	6	=
RVAL	108:38	108:38	5	"2.4"
FIELD	108:38	108:38	6	"2.4"
LEAF_NODE	108:38	108:38	7	"2.4"
LEAF_NODE	108:43	108:43	2	;
SIMPLE_DECL	109:9	109:48	1	char [ ] tiffcrop_rev_date ; tiffcrop_rev_date = "12-13-2010" ;
VAR_DECL	109:9	109:14	2	char [ ] tiffcrop_rev_date ; tiffcrop_rev_date = "12-13-2010"
TYPE	109:9	109:31	3	char [ ]
TYPE_NAME	109:9	109:9	4	char
LEAF_NODE	109:9	109:9	5	char
TYPE_SUFFIX	109:31	109:32	4	[ ]
LEAF_NODE	109:31	109:31	5	[
LEAF_NODE	109:32	109:32	5	]
NAME	109:14	109:14	3	tiffcrop_rev_date
LEAF_NODE	109:14	109:14	4	tiffcrop_rev_date
LEAF_NODE	0:0	0:0	3	;
INIT	109:14	109:14	3	tiffcrop_rev_date = "12-13-2010"
ASSIGN	109:14	109:36	4	tiffcrop_rev_date = "12-13-2010"
LVAL	109:14	109:14	5	tiffcrop_rev_date
NAME	109:14	109:14	6	tiffcrop_rev_date
LEAF_NODE	109:14	109:14	7	tiffcrop_rev_date
ASSIGN_OP	109:34	109:34	5	=
LEAF_NODE	109:34	109:34	6	=
RVAL	109:36	109:36	5	"12-13-2010"
FIELD	109:36	109:36	6	"12-13-2010"
LEAF_NODE	109:36	109:36	7	"12-13-2010"
LEAF_NODE	109:48	109:48	2	;
SIMPLE_DECL	216:0	227:1	1	struct offset BASE_CLASSES { uint32 tmargin ; uint32 lmargin ; uint32 bmargin ; uint32 rmargin ; uint32 crop_width ; uint32 crop_length ; uint32 startx ; uint32 endx ; uint32 starty ; uint32 endy ; } ;
CLASS_DEF	216:0	216:0	2	struct offset BASE_CLASSES { uint32 tmargin ; uint32 lmargin ; uint32 bmargin ; uint32 rmargin ; uint32 crop_width ; uint32 crop_length ; uint32 startx ; uint32 endx ; uint32 starty ; uint32 endy ; }
CLASS_DEF	216:0	227:0	3	struct offset BASE_CLASSES { uint32 tmargin ; uint32 lmargin ; uint32 bmargin ; uint32 rmargin ; uint32 crop_width ; uint32 crop_length ; uint32 startx ; uint32 endx ; uint32 starty ; uint32 endy ; }
LEAF_NODE	216:0	216:0	4	struct
CLASS_NAME	216:7	216:7	4	offset
LEAF_NODE	216:7	216:7	5	offset
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	216:14	216:14	4	{
CLASS_CONTENT	217:2	226:2	4	uint32 tmargin ; uint32 lmargin ; uint32 bmargin ; uint32 rmargin ; uint32 crop_width ; uint32 crop_length ; uint32 startx ; uint32 endx ; uint32 starty ; uint32 endy ;
SIMPLE_DECL	217:2	217:17	5	uint32 tmargin ;
VAR_DECL	217:2	217:10	6	uint32 tmargin
TYPE	217:2	217:2	7	uint32
TYPE_NAME	217:2	217:2	8	uint32
LEAF_NODE	217:2	217:2	9	uint32
NAME	217:10	217:10	7	tmargin
LEAF_NODE	217:10	217:10	8	tmargin
LEAF_NODE	217:17	217:17	6	;
SIMPLE_DECL	218:2	218:17	5	uint32 lmargin ;
VAR_DECL	218:2	218:10	6	uint32 lmargin
TYPE	218:2	218:2	7	uint32
TYPE_NAME	218:2	218:2	8	uint32
LEAF_NODE	218:2	218:2	9	uint32
NAME	218:10	218:10	7	lmargin
LEAF_NODE	218:10	218:10	8	lmargin
LEAF_NODE	218:17	218:17	6	;
SIMPLE_DECL	219:2	219:17	5	uint32 bmargin ;
VAR_DECL	219:2	219:10	6	uint32 bmargin
TYPE	219:2	219:2	7	uint32
TYPE_NAME	219:2	219:2	8	uint32
LEAF_NODE	219:2	219:2	9	uint32
NAME	219:10	219:10	7	bmargin
LEAF_NODE	219:10	219:10	8	bmargin
LEAF_NODE	219:17	219:17	6	;
SIMPLE_DECL	220:2	220:17	5	uint32 rmargin ;
VAR_DECL	220:2	220:10	6	uint32 rmargin
TYPE	220:2	220:2	7	uint32
TYPE_NAME	220:2	220:2	8	uint32
LEAF_NODE	220:2	220:2	9	uint32
NAME	220:10	220:10	7	rmargin
LEAF_NODE	220:10	220:10	8	rmargin
LEAF_NODE	220:17	220:17	6	;
SIMPLE_DECL	221:2	221:20	5	uint32 crop_width ;
VAR_DECL	221:2	221:10	6	uint32 crop_width
TYPE	221:2	221:2	7	uint32
TYPE_NAME	221:2	221:2	8	uint32
LEAF_NODE	221:2	221:2	9	uint32
NAME	221:10	221:10	7	crop_width
LEAF_NODE	221:10	221:10	8	crop_width
LEAF_NODE	221:20	221:20	6	;
SIMPLE_DECL	222:2	222:21	5	uint32 crop_length ;
VAR_DECL	222:2	222:10	6	uint32 crop_length
TYPE	222:2	222:2	7	uint32
TYPE_NAME	222:2	222:2	8	uint32
LEAF_NODE	222:2	222:2	9	uint32
NAME	222:10	222:10	7	crop_length
LEAF_NODE	222:10	222:10	8	crop_length
LEAF_NODE	222:21	222:21	6	;
SIMPLE_DECL	223:2	223:16	5	uint32 startx ;
VAR_DECL	223:2	223:10	6	uint32 startx
TYPE	223:2	223:2	7	uint32
TYPE_NAME	223:2	223:2	8	uint32
LEAF_NODE	223:2	223:2	9	uint32
NAME	223:10	223:10	7	startx
LEAF_NODE	223:10	223:10	8	startx
LEAF_NODE	223:16	223:16	6	;
SIMPLE_DECL	224:2	224:14	5	uint32 endx ;
VAR_DECL	224:2	224:10	6	uint32 endx
TYPE	224:2	224:2	7	uint32
TYPE_NAME	224:2	224:2	8	uint32
LEAF_NODE	224:2	224:2	9	uint32
NAME	224:10	224:10	7	endx
LEAF_NODE	224:10	224:10	8	endx
LEAF_NODE	224:14	224:14	6	;
SIMPLE_DECL	225:2	225:16	5	uint32 starty ;
VAR_DECL	225:2	225:10	6	uint32 starty
TYPE	225:2	225:2	7	uint32
TYPE_NAME	225:2	225:2	8	uint32
LEAF_NODE	225:2	225:2	9	uint32
NAME	225:10	225:10	7	starty
LEAF_NODE	225:10	225:10	8	starty
LEAF_NODE	225:16	225:16	6	;
SIMPLE_DECL	226:2	226:14	5	uint32 endy ;
VAR_DECL	226:2	226:10	6	uint32 endy
TYPE	226:2	226:2	7	uint32
TYPE_NAME	226:2	226:2	8	uint32
LEAF_NODE	226:2	226:2	9	uint32
NAME	226:10	226:10	7	endy
LEAF_NODE	226:10	226:10	8	endy
LEAF_NODE	226:14	226:14	6	;
LEAF_NODE	227:0	227:0	4	}
LEAF_NODE	227:1	227:1	2	;
SIMPLE_DECL	235:0	238:1	1	struct buffinfo BASE_CLASSES { uint32 size ; unsigned char * buffer ; } ;
CLASS_DEF	235:0	235:0	2	struct buffinfo BASE_CLASSES { uint32 size ; unsigned char * buffer ; }
CLASS_DEF	235:0	238:0	3	struct buffinfo BASE_CLASSES { uint32 size ; unsigned char * buffer ; }
LEAF_NODE	235:0	235:0	4	struct
CLASS_NAME	235:8	235:8	4	buffinfo
LEAF_NODE	235:8	235:8	5	buffinfo
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	235:17	235:17	4	{
CLASS_CONTENT	236:2	237:2	4	uint32 size ; unsigned char * buffer ;
SIMPLE_DECL	236:2	236:13	5	uint32 size ;
VAR_DECL	236:2	236:9	6	uint32 size
TYPE	236:2	236:2	7	uint32
TYPE_NAME	236:2	236:2	8	uint32
LEAF_NODE	236:2	236:2	9	uint32
NAME	236:9	236:9	7	size
LEAF_NODE	236:9	236:9	8	size
LEAF_NODE	236:13	236:13	6	;
SIMPLE_DECL	237:2	237:23	5	unsigned char * buffer ;
VAR_DECL	237:2	237:17	6	unsigned char * buffer
TYPE	237:2	237:16	7	unsigned char *
TYPE_NAME	237:2	237:11	8	unsigned char
LEAF_NODE	237:2	237:2	9	unsigned
LEAF_NODE	237:11	237:11	9	char
POINTER	237:16	237:16	8	*
LEAF_NODE	237:16	237:16	9	*
NAME	237:17	237:17	7	buffer
LEAF_NODE	237:17	237:17	8	buffer
LEAF_NODE	237:23	237:23	6	;
LEAF_NODE	238:0	238:0	4	}
LEAF_NODE	238:1	238:1	2	;
SIMPLE_DECL	240:0	243:3	1	struct zone BASE_CLASSES { int position ; int total ; } ;
CLASS_DEF	240:0	240:0	2	struct zone BASE_CLASSES { int position ; int total ; }
CLASS_DEF	240:0	243:2	3	struct zone BASE_CLASSES { int position ; int total ; }
LEAF_NODE	240:0	240:0	4	struct
CLASS_NAME	240:8	240:8	4	zone
LEAF_NODE	240:8	240:8	5	zone
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	240:13	240:13	4	{
CLASS_CONTENT	241:2	242:2	4	int position ; int total ;
SIMPLE_DECL	241:2	241:16	5	int position ;
VAR_DECL	241:2	241:8	6	int position
TYPE	241:2	241:2	7	int
TYPE_NAME	241:2	241:2	8	int
LEAF_NODE	241:2	241:2	9	int
NAME	241:8	241:8	7	position
LEAF_NODE	241:8	241:8	8	position
LEAF_NODE	241:16	241:16	6	;
SIMPLE_DECL	242:2	242:13	5	int total ;
VAR_DECL	242:2	242:8	6	int total
TYPE	242:2	242:2	7	int
TYPE_NAME	242:2	242:2	8	int
LEAF_NODE	242:2	242:2	9	int
NAME	242:8	242:8	7	total
LEAF_NODE	242:8	242:8	8	total
LEAF_NODE	242:13	242:13	6	;
LEAF_NODE	243:2	243:2	4	}
LEAF_NODE	243:3	243:3	2	;
SIMPLE_DECL	245:0	253:1	1	struct pageseg BASE_CLASSES { uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; int position ; int total ; uint32 buffsize ; } ;
CLASS_DEF	245:0	245:0	2	struct pageseg BASE_CLASSES { uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; int position ; int total ; uint32 buffsize ; }
CLASS_DEF	245:0	253:0	3	struct pageseg BASE_CLASSES { uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; int position ; int total ; uint32 buffsize ; }
LEAF_NODE	245:0	245:0	4	struct
CLASS_NAME	245:8	245:8	4	pageseg
LEAF_NODE	245:8	245:8	5	pageseg
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	245:16	245:16	4	{
CLASS_CONTENT	246:2	252:2	4	uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; int position ; int total ; uint32 buffsize ;
SIMPLE_DECL	246:2	246:11	5	uint32 x1 ;
VAR_DECL	246:2	246:9	6	uint32 x1
TYPE	246:2	246:2	7	uint32
TYPE_NAME	246:2	246:2	8	uint32
LEAF_NODE	246:2	246:2	9	uint32
NAME	246:9	246:9	7	x1
LEAF_NODE	246:9	246:9	8	x1
LEAF_NODE	246:11	246:11	6	;
SIMPLE_DECL	247:2	247:11	5	uint32 x2 ;
VAR_DECL	247:2	247:9	6	uint32 x2
TYPE	247:2	247:2	7	uint32
TYPE_NAME	247:2	247:2	8	uint32
LEAF_NODE	247:2	247:2	9	uint32
NAME	247:9	247:9	7	x2
LEAF_NODE	247:9	247:9	8	x2
LEAF_NODE	247:11	247:11	6	;
SIMPLE_DECL	248:2	248:11	5	uint32 y1 ;
VAR_DECL	248:2	248:9	6	uint32 y1
TYPE	248:2	248:2	7	uint32
TYPE_NAME	248:2	248:2	8	uint32
LEAF_NODE	248:2	248:2	9	uint32
NAME	248:9	248:9	7	y1
LEAF_NODE	248:9	248:9	8	y1
LEAF_NODE	248:11	248:11	6	;
SIMPLE_DECL	249:2	249:11	5	uint32 y2 ;
VAR_DECL	249:2	249:9	6	uint32 y2
TYPE	249:2	249:2	7	uint32
TYPE_NAME	249:2	249:2	8	uint32
LEAF_NODE	249:2	249:2	9	uint32
NAME	249:9	249:9	7	y2
LEAF_NODE	249:9	249:9	8	y2
LEAF_NODE	249:11	249:11	6	;
SIMPLE_DECL	250:2	250:17	5	int position ;
VAR_DECL	250:2	250:9	6	int position
TYPE	250:2	250:2	7	int
TYPE_NAME	250:2	250:2	8	int
LEAF_NODE	250:2	250:2	9	int
NAME	250:9	250:9	7	position
LEAF_NODE	250:9	250:9	8	position
LEAF_NODE	250:17	250:17	6	;
SIMPLE_DECL	251:2	251:14	5	int total ;
VAR_DECL	251:2	251:9	6	int total
TYPE	251:2	251:2	7	int
TYPE_NAME	251:2	251:2	8	int
LEAF_NODE	251:2	251:2	9	int
NAME	251:9	251:9	7	total
LEAF_NODE	251:9	251:9	8	total
LEAF_NODE	251:14	251:14	6	;
SIMPLE_DECL	252:2	252:17	5	uint32 buffsize ;
VAR_DECL	252:2	252:9	6	uint32 buffsize
TYPE	252:2	252:2	7	uint32
TYPE_NAME	252:2	252:2	8	uint32
LEAF_NODE	252:2	252:2	9	uint32
NAME	252:9	252:9	7	buffsize
LEAF_NODE	252:9	252:9	8	buffsize
LEAF_NODE	252:17	252:17	6	;
LEAF_NODE	253:0	253:0	4	}
LEAF_NODE	253:1	253:1	2	;
SIMPLE_DECL	255:0	260:1	1	struct coordpairs BASE_CLASSES { double X1 ; double X2 ; double Y1 ; double Y2 ; } ;
CLASS_DEF	255:0	255:0	2	struct coordpairs BASE_CLASSES { double X1 ; double X2 ; double Y1 ; double Y2 ; }
CLASS_DEF	255:0	260:0	3	struct coordpairs BASE_CLASSES { double X1 ; double X2 ; double Y1 ; double Y2 ; }
LEAF_NODE	255:0	255:0	4	struct
CLASS_NAME	255:8	255:8	4	coordpairs
LEAF_NODE	255:8	255:8	5	coordpairs
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	255:19	255:19	4	{
CLASS_CONTENT	256:2	259:2	4	double X1 ; double X2 ; double Y1 ; double Y2 ;
SIMPLE_DECL	256:2	256:11	5	double X1 ;
VAR_DECL	256:2	256:9	6	double X1
TYPE	256:2	256:2	7	double
TYPE_NAME	256:2	256:2	8	double
LEAF_NODE	256:2	256:2	9	double
NAME	256:9	256:9	7	X1
LEAF_NODE	256:9	256:9	8	X1
LEAF_NODE	256:11	256:11	6	;
SIMPLE_DECL	257:2	257:11	5	double X2 ;
VAR_DECL	257:2	257:9	6	double X2
TYPE	257:2	257:2	7	double
TYPE_NAME	257:2	257:2	8	double
LEAF_NODE	257:2	257:2	9	double
NAME	257:9	257:9	7	X2
LEAF_NODE	257:9	257:9	8	X2
LEAF_NODE	257:11	257:11	6	;
SIMPLE_DECL	258:2	258:11	5	double Y1 ;
VAR_DECL	258:2	258:9	6	double Y1
TYPE	258:2	258:2	7	double
TYPE_NAME	258:2	258:2	8	double
LEAF_NODE	258:2	258:2	9	double
NAME	258:9	258:9	7	Y1
LEAF_NODE	258:9	258:9	8	Y1
LEAF_NODE	258:11	258:11	6	;
SIMPLE_DECL	259:2	259:11	5	double Y2 ;
VAR_DECL	259:2	259:9	6	double Y2
TYPE	259:2	259:2	7	double
TYPE_NAME	259:2	259:2	8	double
LEAF_NODE	259:2	259:2	9	double
NAME	259:9	259:9	7	Y2
LEAF_NODE	259:9	259:9	8	Y2
LEAF_NODE	259:11	259:11	6	;
LEAF_NODE	260:0	260:0	4	}
LEAF_NODE	260:1	260:1	2	;
SIMPLE_DECL	262:0	271:1	1	struct region BASE_CLASSES { uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; uint32 width ; uint32 length ; uint32 buffsize ; unsigned char * buffptr ; } ;
CLASS_DEF	262:0	262:0	2	struct region BASE_CLASSES { uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; uint32 width ; uint32 length ; uint32 buffsize ; unsigned char * buffptr ; }
CLASS_DEF	262:0	271:0	3	struct region BASE_CLASSES { uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; uint32 width ; uint32 length ; uint32 buffsize ; unsigned char * buffptr ; }
LEAF_NODE	262:0	262:0	4	struct
CLASS_NAME	262:8	262:8	4	region
LEAF_NODE	262:8	262:8	5	region
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	262:15	262:15	4	{
CLASS_CONTENT	263:2	270:2	4	uint32 x1 ; uint32 x2 ; uint32 y1 ; uint32 y2 ; uint32 width ; uint32 length ; uint32 buffsize ; unsigned char * buffptr ;
SIMPLE_DECL	263:2	263:11	5	uint32 x1 ;
VAR_DECL	263:2	263:9	6	uint32 x1
TYPE	263:2	263:2	7	uint32
TYPE_NAME	263:2	263:2	8	uint32
LEAF_NODE	263:2	263:2	9	uint32
NAME	263:9	263:9	7	x1
LEAF_NODE	263:9	263:9	8	x1
LEAF_NODE	263:11	263:11	6	;
SIMPLE_DECL	264:2	264:11	5	uint32 x2 ;
VAR_DECL	264:2	264:9	6	uint32 x2
TYPE	264:2	264:2	7	uint32
TYPE_NAME	264:2	264:2	8	uint32
LEAF_NODE	264:2	264:2	9	uint32
NAME	264:9	264:9	7	x2
LEAF_NODE	264:9	264:9	8	x2
LEAF_NODE	264:11	264:11	6	;
SIMPLE_DECL	265:2	265:11	5	uint32 y1 ;
VAR_DECL	265:2	265:9	6	uint32 y1
TYPE	265:2	265:2	7	uint32
TYPE_NAME	265:2	265:2	8	uint32
LEAF_NODE	265:2	265:2	9	uint32
NAME	265:9	265:9	7	y1
LEAF_NODE	265:9	265:9	8	y1
LEAF_NODE	265:11	265:11	6	;
SIMPLE_DECL	266:2	266:11	5	uint32 y2 ;
VAR_DECL	266:2	266:9	6	uint32 y2
TYPE	266:2	266:2	7	uint32
TYPE_NAME	266:2	266:2	8	uint32
LEAF_NODE	266:2	266:2	9	uint32
NAME	266:9	266:9	7	y2
LEAF_NODE	266:9	266:9	8	y2
LEAF_NODE	266:11	266:11	6	;
SIMPLE_DECL	267:2	267:14	5	uint32 width ;
VAR_DECL	267:2	267:9	6	uint32 width
TYPE	267:2	267:2	7	uint32
TYPE_NAME	267:2	267:2	8	uint32
LEAF_NODE	267:2	267:2	9	uint32
NAME	267:9	267:9	7	width
LEAF_NODE	267:9	267:9	8	width
LEAF_NODE	267:14	267:14	6	;
SIMPLE_DECL	268:2	268:15	5	uint32 length ;
VAR_DECL	268:2	268:9	6	uint32 length
TYPE	268:2	268:2	7	uint32
TYPE_NAME	268:2	268:2	8	uint32
LEAF_NODE	268:2	268:2	9	uint32
NAME	268:9	268:9	7	length
LEAF_NODE	268:9	268:9	8	length
LEAF_NODE	268:15	268:15	6	;
SIMPLE_DECL	269:2	269:17	5	uint32 buffsize ;
VAR_DECL	269:2	269:9	6	uint32 buffsize
TYPE	269:2	269:2	7	uint32
TYPE_NAME	269:2	269:2	8	uint32
LEAF_NODE	269:2	269:2	9	uint32
NAME	269:9	269:9	7	buffsize
LEAF_NODE	269:9	269:9	8	buffsize
LEAF_NODE	269:17	269:17	6	;
SIMPLE_DECL	270:2	270:24	5	unsigned char * buffptr ;
VAR_DECL	270:2	270:17	6	unsigned char * buffptr
TYPE	270:2	270:16	7	unsigned char *
TYPE_NAME	270:2	270:11	8	unsigned char
LEAF_NODE	270:2	270:2	9	unsigned
LEAF_NODE	270:11	270:11	9	char
POINTER	270:16	270:16	8	*
LEAF_NODE	270:16	270:16	9	*
NAME	270:17	270:17	7	buffptr
LEAF_NODE	270:17	270:17	8	buffptr
LEAF_NODE	270:24	270:24	6	;
LEAF_NODE	271:0	271:0	4	}
LEAF_NODE	271:1	271:1	2	;
SIMPLE_DECL	277:0	301:1	1	struct crop_mask BASE_CLASSES { double width ; double length ; double [ 4 ] margins ; float xres ; float yres ; uint32 combined_width ; uint32 combined_length ; uint32 bufftotal ; uint16 img_mode ; uint16 exp_mode ; uint16 crop_mode ; uint16 res_unit ; uint16 edge_ref ; uint16 rotation ; uint16 mirror ; uint16 invert ; uint16 photometric ; uint16 selections ; uint16 regions ; struct region [ MAX_REGIONS ] regionlist ; uint16 zones ; struct zone [ MAX_REGIONS ] zonelist ; struct coordpairs [ MAX_REGIONS ] corners ; } ;
CLASS_DEF	277:0	277:0	2	struct crop_mask BASE_CLASSES { double width ; double length ; double [ 4 ] margins ; float xres ; float yres ; uint32 combined_width ; uint32 combined_length ; uint32 bufftotal ; uint16 img_mode ; uint16 exp_mode ; uint16 crop_mode ; uint16 res_unit ; uint16 edge_ref ; uint16 rotation ; uint16 mirror ; uint16 invert ; uint16 photometric ; uint16 selections ; uint16 regions ; struct region [ MAX_REGIONS ] regionlist ; uint16 zones ; struct zone [ MAX_REGIONS ] zonelist ; struct coordpairs [ MAX_REGIONS ] corners ; }
CLASS_DEF	277:0	301:0	3	struct crop_mask BASE_CLASSES { double width ; double length ; double [ 4 ] margins ; float xres ; float yres ; uint32 combined_width ; uint32 combined_length ; uint32 bufftotal ; uint16 img_mode ; uint16 exp_mode ; uint16 crop_mode ; uint16 res_unit ; uint16 edge_ref ; uint16 rotation ; uint16 mirror ; uint16 invert ; uint16 photometric ; uint16 selections ; uint16 regions ; struct region [ MAX_REGIONS ] regionlist ; uint16 zones ; struct zone [ MAX_REGIONS ] zonelist ; struct coordpairs [ MAX_REGIONS ] corners ; }
LEAF_NODE	277:0	277:0	4	struct
CLASS_NAME	277:7	277:7	4	crop_mask
LEAF_NODE	277:7	277:7	5	crop_mask
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	277:17	277:17	4	{
CLASS_CONTENT	278:2	300:2	4	double width ; double length ; double [ 4 ] margins ; float xres ; float yres ; uint32 combined_width ; uint32 combined_length ; uint32 bufftotal ; uint16 img_mode ; uint16 exp_mode ; uint16 crop_mode ; uint16 res_unit ; uint16 edge_ref ; uint16 rotation ; uint16 mirror ; uint16 invert ; uint16 photometric ; uint16 selections ; uint16 regions ; struct region [ MAX_REGIONS ] regionlist ; uint16 zones ; struct zone [ MAX_REGIONS ] zonelist ; struct coordpairs [ MAX_REGIONS ] corners ;
SIMPLE_DECL	278:2	278:14	5	double width ;
VAR_DECL	278:2	278:9	6	double width
TYPE	278:2	278:2	7	double
TYPE_NAME	278:2	278:2	8	double
LEAF_NODE	278:2	278:2	9	double
NAME	278:9	278:9	7	width
LEAF_NODE	278:9	278:9	8	width
LEAF_NODE	278:14	278:14	6	;
SIMPLE_DECL	279:2	279:15	5	double length ;
VAR_DECL	279:2	279:9	6	double length
TYPE	279:2	279:2	7	double
TYPE_NAME	279:2	279:2	8	double
LEAF_NODE	279:2	279:2	9	double
NAME	279:9	279:9	7	length
LEAF_NODE	279:9	279:9	8	length
LEAF_NODE	279:15	279:15	6	;
SIMPLE_DECL	280:2	280:19	5	double [ 4 ] margins ;
VAR_DECL	280:2	280:9	6	double [ 4 ] margins
TYPE	280:2	280:16	7	double [ 4 ]
TYPE_NAME	280:2	280:2	8	double
LEAF_NODE	280:2	280:2	9	double
TYPE_SUFFIX	280:16	280:18	8	[ 4 ]
LEAF_NODE	280:16	280:16	9	[
FIELD	280:17	280:17	9	4
LEAF_NODE	280:17	280:17	10	4
LEAF_NODE	280:18	280:18	9	]
NAME	280:9	280:9	7	margins
LEAF_NODE	280:9	280:9	8	margins
LEAF_NODE	280:19	280:19	6	;
SIMPLE_DECL	281:2	281:13	5	float xres ;
VAR_DECL	281:2	281:9	6	float xres
TYPE	281:2	281:2	7	float
TYPE_NAME	281:2	281:2	8	float
LEAF_NODE	281:2	281:2	9	float
NAME	281:9	281:9	7	xres
LEAF_NODE	281:9	281:9	8	xres
LEAF_NODE	281:13	281:13	6	;
SIMPLE_DECL	282:2	282:13	5	float yres ;
VAR_DECL	282:2	282:9	6	float yres
TYPE	282:2	282:2	7	float
TYPE_NAME	282:2	282:2	8	float
LEAF_NODE	282:2	282:2	9	float
NAME	282:9	282:9	7	yres
LEAF_NODE	282:9	282:9	8	yres
LEAF_NODE	282:13	282:13	6	;
SIMPLE_DECL	283:2	283:23	5	uint32 combined_width ;
VAR_DECL	283:2	283:9	6	uint32 combined_width
TYPE	283:2	283:2	7	uint32
TYPE_NAME	283:2	283:2	8	uint32
LEAF_NODE	283:2	283:2	9	uint32
NAME	283:9	283:9	7	combined_width
LEAF_NODE	283:9	283:9	8	combined_width
LEAF_NODE	283:23	283:23	6	;
SIMPLE_DECL	284:2	284:24	5	uint32 combined_length ;
VAR_DECL	284:2	284:9	6	uint32 combined_length
TYPE	284:2	284:2	7	uint32
TYPE_NAME	284:2	284:2	8	uint32
LEAF_NODE	284:2	284:2	9	uint32
NAME	284:9	284:9	7	combined_length
LEAF_NODE	284:9	284:9	8	combined_length
LEAF_NODE	284:24	284:24	6	;
SIMPLE_DECL	285:2	285:18	5	uint32 bufftotal ;
VAR_DECL	285:2	285:9	6	uint32 bufftotal
TYPE	285:2	285:2	7	uint32
TYPE_NAME	285:2	285:2	8	uint32
LEAF_NODE	285:2	285:2	9	uint32
NAME	285:9	285:9	7	bufftotal
LEAF_NODE	285:9	285:9	8	bufftotal
LEAF_NODE	285:18	285:18	6	;
SIMPLE_DECL	286:2	286:17	5	uint16 img_mode ;
VAR_DECL	286:2	286:9	6	uint16 img_mode
TYPE	286:2	286:2	7	uint16
TYPE_NAME	286:2	286:2	8	uint16
LEAF_NODE	286:2	286:2	9	uint16
NAME	286:9	286:9	7	img_mode
LEAF_NODE	286:9	286:9	8	img_mode
LEAF_NODE	286:17	286:17	6	;
SIMPLE_DECL	287:2	287:17	5	uint16 exp_mode ;
VAR_DECL	287:2	287:9	6	uint16 exp_mode
TYPE	287:2	287:2	7	uint16
TYPE_NAME	287:2	287:2	8	uint16
LEAF_NODE	287:2	287:2	9	uint16
NAME	287:9	287:9	7	exp_mode
LEAF_NODE	287:9	287:9	8	exp_mode
LEAF_NODE	287:17	287:17	6	;
SIMPLE_DECL	288:2	288:18	5	uint16 crop_mode ;
VAR_DECL	288:2	288:9	6	uint16 crop_mode
TYPE	288:2	288:2	7	uint16
TYPE_NAME	288:2	288:2	8	uint16
LEAF_NODE	288:2	288:2	9	uint16
NAME	288:9	288:9	7	crop_mode
LEAF_NODE	288:9	288:9	8	crop_mode
LEAF_NODE	288:18	288:18	6	;
SIMPLE_DECL	289:2	289:17	5	uint16 res_unit ;
VAR_DECL	289:2	289:9	6	uint16 res_unit
TYPE	289:2	289:2	7	uint16
TYPE_NAME	289:2	289:2	8	uint16
LEAF_NODE	289:2	289:2	9	uint16
NAME	289:9	289:9	7	res_unit
LEAF_NODE	289:9	289:9	8	res_unit
LEAF_NODE	289:17	289:17	6	;
SIMPLE_DECL	290:2	290:17	5	uint16 edge_ref ;
VAR_DECL	290:2	290:9	6	uint16 edge_ref
TYPE	290:2	290:2	7	uint16
TYPE_NAME	290:2	290:2	8	uint16
LEAF_NODE	290:2	290:2	9	uint16
NAME	290:9	290:9	7	edge_ref
LEAF_NODE	290:9	290:9	8	edge_ref
LEAF_NODE	290:17	290:17	6	;
SIMPLE_DECL	291:2	291:17	5	uint16 rotation ;
VAR_DECL	291:2	291:9	6	uint16 rotation
TYPE	291:2	291:2	7	uint16
TYPE_NAME	291:2	291:2	8	uint16
LEAF_NODE	291:2	291:2	9	uint16
NAME	291:9	291:9	7	rotation
LEAF_NODE	291:9	291:9	8	rotation
LEAF_NODE	291:17	291:17	6	;
SIMPLE_DECL	292:2	292:15	5	uint16 mirror ;
VAR_DECL	292:2	292:9	6	uint16 mirror
TYPE	292:2	292:2	7	uint16
TYPE_NAME	292:2	292:2	8	uint16
LEAF_NODE	292:2	292:2	9	uint16
NAME	292:9	292:9	7	mirror
LEAF_NODE	292:9	292:9	8	mirror
LEAF_NODE	292:15	292:15	6	;
SIMPLE_DECL	293:2	293:15	5	uint16 invert ;
VAR_DECL	293:2	293:9	6	uint16 invert
TYPE	293:2	293:2	7	uint16
TYPE_NAME	293:2	293:2	8	uint16
LEAF_NODE	293:2	293:2	9	uint16
NAME	293:9	293:9	7	invert
LEAF_NODE	293:9	293:9	8	invert
LEAF_NODE	293:15	293:15	6	;
SIMPLE_DECL	294:2	294:20	5	uint16 photometric ;
VAR_DECL	294:2	294:9	6	uint16 photometric
TYPE	294:2	294:2	7	uint16
TYPE_NAME	294:2	294:2	8	uint16
LEAF_NODE	294:2	294:2	9	uint16
NAME	294:9	294:9	7	photometric
LEAF_NODE	294:9	294:9	8	photometric
LEAF_NODE	294:20	294:20	6	;
SIMPLE_DECL	295:2	295:19	5	uint16 selections ;
VAR_DECL	295:2	295:9	6	uint16 selections
TYPE	295:2	295:2	7	uint16
TYPE_NAME	295:2	295:2	8	uint16
LEAF_NODE	295:2	295:2	9	uint16
NAME	295:9	295:9	7	selections
LEAF_NODE	295:9	295:9	8	selections
LEAF_NODE	295:19	295:19	6	;
SIMPLE_DECL	296:2	296:16	5	uint16 regions ;
VAR_DECL	296:2	296:9	6	uint16 regions
TYPE	296:2	296:2	7	uint16
TYPE_NAME	296:2	296:2	8	uint16
LEAF_NODE	296:2	296:2	9	uint16
NAME	296:9	296:9	7	regions
LEAF_NODE	296:9	296:9	8	regions
LEAF_NODE	296:16	296:16	6	;
SIMPLE_DECL	297:2	297:39	5	struct region [ MAX_REGIONS ] regionlist ;
VAR_DECL	297:2	297:16	6	struct region [ MAX_REGIONS ] regionlist
TYPE	297:2	297:26	7	struct region [ MAX_REGIONS ]
TYPE_NAME	297:2	297:9	8	struct region
LEAF_NODE	297:2	297:2	9	struct
LEAF_NODE	297:9	297:9	9	region
TYPE_SUFFIX	297:26	297:38	8	[ MAX_REGIONS ]
LEAF_NODE	297:26	297:26	9	[
FIELD	297:27	297:27	9	MAX_REGIONS
LEAF_NODE	297:27	297:27	10	MAX_REGIONS
LEAF_NODE	297:38	297:38	9	]
NAME	297:16	297:16	7	regionlist
LEAF_NODE	297:16	297:16	8	regionlist
LEAF_NODE	297:39	297:39	6	;
SIMPLE_DECL	298:2	298:14	5	uint16 zones ;
VAR_DECL	298:2	298:9	6	uint16 zones
TYPE	298:2	298:2	7	uint16
TYPE_NAME	298:2	298:2	8	uint16
LEAF_NODE	298:2	298:2	9	uint16
NAME	298:9	298:9	7	zones
LEAF_NODE	298:9	298:9	8	zones
LEAF_NODE	298:14	298:14	6	;
SIMPLE_DECL	299:2	299:35	5	struct zone [ MAX_REGIONS ] zonelist ;
VAR_DECL	299:2	299:14	6	struct zone [ MAX_REGIONS ] zonelist
TYPE	299:2	299:22	7	struct zone [ MAX_REGIONS ]
TYPE_NAME	299:2	299:9	8	struct zone
LEAF_NODE	299:2	299:2	9	struct
LEAF_NODE	299:9	299:9	9	zone
TYPE_SUFFIX	299:22	299:34	8	[ MAX_REGIONS ]
LEAF_NODE	299:22	299:22	9	[
FIELD	299:23	299:23	9	MAX_REGIONS
LEAF_NODE	299:23	299:23	10	MAX_REGIONS
LEAF_NODE	299:34	299:34	9	]
NAME	299:14	299:14	7	zonelist
LEAF_NODE	299:14	299:14	8	zonelist
LEAF_NODE	299:35	299:35	6	;
SIMPLE_DECL	300:2	300:40	5	struct coordpairs [ MAX_REGIONS ] corners ;
VAR_DECL	300:2	300:20	6	struct coordpairs [ MAX_REGIONS ] corners
TYPE	300:2	300:27	7	struct coordpairs [ MAX_REGIONS ]
TYPE_NAME	300:2	300:9	8	struct coordpairs
LEAF_NODE	300:2	300:2	9	struct
LEAF_NODE	300:9	300:9	9	coordpairs
TYPE_SUFFIX	300:27	300:39	8	[ MAX_REGIONS ]
LEAF_NODE	300:27	300:27	9	[
FIELD	300:28	300:28	9	MAX_REGIONS
LEAF_NODE	300:28	300:28	10	MAX_REGIONS
LEAF_NODE	300:39	300:39	9	]
NAME	300:20	300:20	7	corners
LEAF_NODE	300:20	300:20	8	corners
LEAF_NODE	300:40	300:40	6	;
LEAF_NODE	301:0	301:0	4	}
LEAF_NODE	301:1	301:1	2	;
SIMPLE_DECL	326:0	331:3	1	struct paperdef BASE_CLASSES { char [ MAX_PAPERNAME_LENGTH ] name ; double width ; double length ; double asratio ; } ;
CLASS_DEF	326:0	326:0	2	struct paperdef BASE_CLASSES { char [ MAX_PAPERNAME_LENGTH ] name ; double width ; double length ; double asratio ; }
CLASS_DEF	326:0	331:2	3	struct paperdef BASE_CLASSES { char [ MAX_PAPERNAME_LENGTH ] name ; double width ; double length ; double asratio ; }
LEAF_NODE	326:0	326:0	4	struct
CLASS_NAME	326:7	326:7	4	paperdef
LEAF_NODE	326:7	326:7	5	paperdef
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	326:16	326:16	4	{
CLASS_CONTENT	327:2	330:2	4	char [ MAX_PAPERNAME_LENGTH ] name ; double width ; double length ; double asratio ;
SIMPLE_DECL	327:2	327:35	5	char [ MAX_PAPERNAME_LENGTH ] name ;
VAR_DECL	327:2	327:9	6	char [ MAX_PAPERNAME_LENGTH ] name
TYPE	327:2	327:13	7	char [ MAX_PAPERNAME_LENGTH ]
TYPE_NAME	327:2	327:2	8	char
LEAF_NODE	327:2	327:2	9	char
TYPE_SUFFIX	327:13	327:34	8	[ MAX_PAPERNAME_LENGTH ]
LEAF_NODE	327:13	327:13	9	[
FIELD	327:14	327:14	9	MAX_PAPERNAME_LENGTH
LEAF_NODE	327:14	327:14	10	MAX_PAPERNAME_LENGTH
LEAF_NODE	327:34	327:34	9	]
NAME	327:9	327:9	7	name
LEAF_NODE	327:9	327:9	8	name
LEAF_NODE	327:35	327:35	6	;
SIMPLE_DECL	328:2	328:14	5	double width ;
VAR_DECL	328:2	328:9	6	double width
TYPE	328:2	328:2	7	double
TYPE_NAME	328:2	328:2	8	double
LEAF_NODE	328:2	328:2	9	double
NAME	328:9	328:9	7	width
LEAF_NODE	328:9	328:9	8	width
LEAF_NODE	328:14	328:14	6	;
SIMPLE_DECL	329:2	329:15	5	double length ;
VAR_DECL	329:2	329:9	6	double length
TYPE	329:2	329:2	7	double
TYPE_NAME	329:2	329:2	8	double
LEAF_NODE	329:2	329:2	9	double
NAME	329:9	329:9	7	length
LEAF_NODE	329:9	329:9	8	length
LEAF_NODE	329:15	329:15	6	;
SIMPLE_DECL	330:2	330:16	5	double asratio ;
VAR_DECL	330:2	330:9	6	double asratio
TYPE	330:2	330:2	7	double
TYPE_NAME	330:2	330:2	8	double
LEAF_NODE	330:2	330:2	9	double
NAME	330:9	330:9	7	asratio
LEAF_NODE	330:9	330:9	8	asratio
LEAF_NODE	330:16	330:16	6	;
LEAF_NODE	331:2	331:2	4	}
LEAF_NODE	331:3	331:3	2	;
SIMPLE_DECL	389:0	402:1	1	struct image_data BASE_CLASSES { float xres ; float yres ; uint32 width ; uint32 length ; uint16 res_unit ; uint16 bps ; uint16 spp ; uint16 planar ; uint16 photometric ; uint16 orientation ; uint16 compression ; uint16 adjustments ; } ;
CLASS_DEF	389:0	389:0	2	struct image_data BASE_CLASSES { float xres ; float yres ; uint32 width ; uint32 length ; uint16 res_unit ; uint16 bps ; uint16 spp ; uint16 planar ; uint16 photometric ; uint16 orientation ; uint16 compression ; uint16 adjustments ; }
CLASS_DEF	389:0	402:0	3	struct image_data BASE_CLASSES { float xres ; float yres ; uint32 width ; uint32 length ; uint16 res_unit ; uint16 bps ; uint16 spp ; uint16 planar ; uint16 photometric ; uint16 orientation ; uint16 compression ; uint16 adjustments ; }
LEAF_NODE	389:0	389:0	4	struct
CLASS_NAME	389:7	389:7	4	image_data
LEAF_NODE	389:7	389:7	5	image_data
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	389:18	389:18	4	{
CLASS_CONTENT	390:2	401:2	4	float xres ; float yres ; uint32 width ; uint32 length ; uint16 res_unit ; uint16 bps ; uint16 spp ; uint16 planar ; uint16 photometric ; uint16 orientation ; uint16 compression ; uint16 adjustments ;
SIMPLE_DECL	390:2	390:13	5	float xres ;
VAR_DECL	390:2	390:9	6	float xres
TYPE	390:2	390:2	7	float
TYPE_NAME	390:2	390:2	8	float
LEAF_NODE	390:2	390:2	9	float
NAME	390:9	390:9	7	xres
LEAF_NODE	390:9	390:9	8	xres
LEAF_NODE	390:13	390:13	6	;
SIMPLE_DECL	391:2	391:13	5	float yres ;
VAR_DECL	391:2	391:9	6	float yres
TYPE	391:2	391:2	7	float
TYPE_NAME	391:2	391:2	8	float
LEAF_NODE	391:2	391:2	9	float
NAME	391:9	391:9	7	yres
LEAF_NODE	391:9	391:9	8	yres
LEAF_NODE	391:13	391:13	6	;
SIMPLE_DECL	392:2	392:14	5	uint32 width ;
VAR_DECL	392:2	392:9	6	uint32 width
TYPE	392:2	392:2	7	uint32
TYPE_NAME	392:2	392:2	8	uint32
LEAF_NODE	392:2	392:2	9	uint32
NAME	392:9	392:9	7	width
LEAF_NODE	392:9	392:9	8	width
LEAF_NODE	392:14	392:14	6	;
SIMPLE_DECL	393:2	393:15	5	uint32 length ;
VAR_DECL	393:2	393:9	6	uint32 length
TYPE	393:2	393:2	7	uint32
TYPE_NAME	393:2	393:2	8	uint32
LEAF_NODE	393:2	393:2	9	uint32
NAME	393:9	393:9	7	length
LEAF_NODE	393:9	393:9	8	length
LEAF_NODE	393:15	393:15	6	;
SIMPLE_DECL	394:2	394:17	5	uint16 res_unit ;
VAR_DECL	394:2	394:9	6	uint16 res_unit
TYPE	394:2	394:2	7	uint16
TYPE_NAME	394:2	394:2	8	uint16
LEAF_NODE	394:2	394:2	9	uint16
NAME	394:9	394:9	7	res_unit
LEAF_NODE	394:9	394:9	8	res_unit
LEAF_NODE	394:17	394:17	6	;
SIMPLE_DECL	395:2	395:12	5	uint16 bps ;
VAR_DECL	395:2	395:9	6	uint16 bps
TYPE	395:2	395:2	7	uint16
TYPE_NAME	395:2	395:2	8	uint16
LEAF_NODE	395:2	395:2	9	uint16
NAME	395:9	395:9	7	bps
LEAF_NODE	395:9	395:9	8	bps
LEAF_NODE	395:12	395:12	6	;
SIMPLE_DECL	396:2	396:12	5	uint16 spp ;
VAR_DECL	396:2	396:9	6	uint16 spp
TYPE	396:2	396:2	7	uint16
TYPE_NAME	396:2	396:2	8	uint16
LEAF_NODE	396:2	396:2	9	uint16
NAME	396:9	396:9	7	spp
LEAF_NODE	396:9	396:9	8	spp
LEAF_NODE	396:12	396:12	6	;
SIMPLE_DECL	397:2	397:15	5	uint16 planar ;
VAR_DECL	397:2	397:9	6	uint16 planar
TYPE	397:2	397:2	7	uint16
TYPE_NAME	397:2	397:2	8	uint16
LEAF_NODE	397:2	397:2	9	uint16
NAME	397:9	397:9	7	planar
LEAF_NODE	397:9	397:9	8	planar
LEAF_NODE	397:15	397:15	6	;
SIMPLE_DECL	398:2	398:20	5	uint16 photometric ;
VAR_DECL	398:2	398:9	6	uint16 photometric
TYPE	398:2	398:2	7	uint16
TYPE_NAME	398:2	398:2	8	uint16
LEAF_NODE	398:2	398:2	9	uint16
NAME	398:9	398:9	7	photometric
LEAF_NODE	398:9	398:9	8	photometric
LEAF_NODE	398:20	398:20	6	;
SIMPLE_DECL	399:2	399:20	5	uint16 orientation ;
VAR_DECL	399:2	399:9	6	uint16 orientation
TYPE	399:2	399:2	7	uint16
TYPE_NAME	399:2	399:2	8	uint16
LEAF_NODE	399:2	399:2	9	uint16
NAME	399:9	399:9	7	orientation
LEAF_NODE	399:9	399:9	8	orientation
LEAF_NODE	399:20	399:20	6	;
SIMPLE_DECL	400:2	400:20	5	uint16 compression ;
VAR_DECL	400:2	400:9	6	uint16 compression
TYPE	400:2	400:2	7	uint16
TYPE_NAME	400:2	400:2	8	uint16
LEAF_NODE	400:2	400:2	9	uint16
NAME	400:9	400:9	7	compression
LEAF_NODE	400:9	400:9	8	compression
LEAF_NODE	400:20	400:20	6	;
SIMPLE_DECL	401:2	401:20	5	uint16 adjustments ;
VAR_DECL	401:2	401:9	6	uint16 adjustments
TYPE	401:2	401:2	7	uint16
TYPE_NAME	401:2	401:2	8	uint16
LEAF_NODE	401:2	401:2	9	uint16
NAME	401:9	401:9	7	adjustments
LEAF_NODE	401:9	401:9	8	adjustments
LEAF_NODE	401:20	401:20	6	;
LEAF_NODE	402:0	402:0	4	}
LEAF_NODE	402:1	402:1	2	;
SIMPLE_DECL	405:0	418:1	1	struct pagedef BASE_CLASSES { char [ 16 ] name ; double width ; double length ; double hmargin ; double vmargin ; double hres ; double vres ; uint32 mode ; uint16 res_unit ; unsigned int rows ; unsigned int cols ; unsigned int orient ; } ;
CLASS_DEF	405:0	405:0	2	struct pagedef BASE_CLASSES { char [ 16 ] name ; double width ; double length ; double hmargin ; double vmargin ; double hres ; double vres ; uint32 mode ; uint16 res_unit ; unsigned int rows ; unsigned int cols ; unsigned int orient ; }
CLASS_DEF	405:0	418:0	3	struct pagedef BASE_CLASSES { char [ 16 ] name ; double width ; double length ; double hmargin ; double vmargin ; double hres ; double vres ; uint32 mode ; uint16 res_unit ; unsigned int rows ; unsigned int cols ; unsigned int orient ; }
LEAF_NODE	405:0	405:0	4	struct
CLASS_NAME	405:7	405:7	4	pagedef
LEAF_NODE	405:7	405:7	5	pagedef
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	405:15	405:15	4	{
CLASS_CONTENT	406:2	417:2	4	char [ 16 ] name ; double width ; double length ; double hmargin ; double vmargin ; double hres ; double vres ; uint32 mode ; uint16 res_unit ; unsigned int rows ; unsigned int cols ; unsigned int orient ;
SIMPLE_DECL	406:2	406:24	5	char [ 16 ] name ;
VAR_DECL	406:2	406:16	6	char [ 16 ] name
TYPE	406:2	406:20	7	char [ 16 ]
TYPE_NAME	406:2	406:2	8	char
LEAF_NODE	406:2	406:2	9	char
TYPE_SUFFIX	406:20	406:23	8	[ 16 ]
LEAF_NODE	406:20	406:20	9	[
FIELD	406:21	406:21	9	16
LEAF_NODE	406:21	406:21	10	16
LEAF_NODE	406:23	406:23	9	]
NAME	406:16	406:16	7	name
LEAF_NODE	406:16	406:16	8	name
LEAF_NODE	406:24	406:24	6	;
SIMPLE_DECL	407:2	407:21	5	double width ;
VAR_DECL	407:2	407:16	6	double width
TYPE	407:2	407:2	7	double
TYPE_NAME	407:2	407:2	8	double
LEAF_NODE	407:2	407:2	9	double
NAME	407:16	407:16	7	width
LEAF_NODE	407:16	407:16	8	width
LEAF_NODE	407:21	407:21	6	;
SIMPLE_DECL	408:2	408:22	5	double length ;
VAR_DECL	408:2	408:16	6	double length
TYPE	408:2	408:2	7	double
TYPE_NAME	408:2	408:2	8	double
LEAF_NODE	408:2	408:2	9	double
NAME	408:16	408:16	7	length
LEAF_NODE	408:16	408:16	8	length
LEAF_NODE	408:22	408:22	6	;
SIMPLE_DECL	409:2	409:23	5	double hmargin ;
VAR_DECL	409:2	409:16	6	double hmargin
TYPE	409:2	409:2	7	double
TYPE_NAME	409:2	409:2	8	double
LEAF_NODE	409:2	409:2	9	double
NAME	409:16	409:16	7	hmargin
LEAF_NODE	409:16	409:16	8	hmargin
LEAF_NODE	409:23	409:23	6	;
SIMPLE_DECL	410:2	410:23	5	double vmargin ;
VAR_DECL	410:2	410:16	6	double vmargin
TYPE	410:2	410:2	7	double
TYPE_NAME	410:2	410:2	8	double
LEAF_NODE	410:2	410:2	9	double
NAME	410:16	410:16	7	vmargin
LEAF_NODE	410:16	410:16	8	vmargin
LEAF_NODE	410:23	410:23	6	;
SIMPLE_DECL	411:2	411:20	5	double hres ;
VAR_DECL	411:2	411:16	6	double hres
TYPE	411:2	411:2	7	double
TYPE_NAME	411:2	411:2	8	double
LEAF_NODE	411:2	411:2	9	double
NAME	411:16	411:16	7	hres
LEAF_NODE	411:16	411:16	8	hres
LEAF_NODE	411:20	411:20	6	;
SIMPLE_DECL	412:2	412:20	5	double vres ;
VAR_DECL	412:2	412:16	6	double vres
TYPE	412:2	412:2	7	double
TYPE_NAME	412:2	412:2	8	double
LEAF_NODE	412:2	412:2	9	double
NAME	412:16	412:16	7	vres
LEAF_NODE	412:16	412:16	8	vres
LEAF_NODE	412:20	412:20	6	;
SIMPLE_DECL	413:2	413:20	5	uint32 mode ;
VAR_DECL	413:2	413:16	6	uint32 mode
TYPE	413:2	413:2	7	uint32
TYPE_NAME	413:2	413:2	8	uint32
LEAF_NODE	413:2	413:2	9	uint32
NAME	413:16	413:16	7	mode
LEAF_NODE	413:16	413:16	8	mode
LEAF_NODE	413:20	413:20	6	;
SIMPLE_DECL	414:2	414:24	5	uint16 res_unit ;
VAR_DECL	414:2	414:16	6	uint16 res_unit
TYPE	414:2	414:2	7	uint16
TYPE_NAME	414:2	414:2	8	uint16
LEAF_NODE	414:2	414:2	9	uint16
NAME	414:16	414:16	7	res_unit
LEAF_NODE	414:16	414:16	8	res_unit
LEAF_NODE	414:24	414:24	6	;
SIMPLE_DECL	415:2	415:20	5	unsigned int rows ;
VAR_DECL	415:2	415:16	6	unsigned int rows
TYPE	415:2	415:2	7	unsigned int
TYPE_NAME	415:2	415:11	8	unsigned int
LEAF_NODE	415:2	415:2	9	unsigned
LEAF_NODE	415:11	415:11	9	int
NAME	415:16	415:16	7	rows
LEAF_NODE	415:16	415:16	8	rows
LEAF_NODE	415:20	415:20	6	;
SIMPLE_DECL	416:2	416:20	5	unsigned int cols ;
VAR_DECL	416:2	416:16	6	unsigned int cols
TYPE	416:2	416:2	7	unsigned int
TYPE_NAME	416:2	416:11	8	unsigned int
LEAF_NODE	416:2	416:2	9	unsigned
LEAF_NODE	416:11	416:11	9	int
NAME	416:16	416:16	7	cols
LEAF_NODE	416:16	416:16	8	cols
LEAF_NODE	416:20	416:20	6	;
SIMPLE_DECL	417:2	417:22	5	unsigned int orient ;
VAR_DECL	417:2	417:16	6	unsigned int orient
TYPE	417:2	417:2	7	unsigned int
TYPE_NAME	417:2	417:11	8	unsigned int
LEAF_NODE	417:2	417:2	9	unsigned
LEAF_NODE	417:11	417:11	9	int
NAME	417:16	417:16	7	orient
LEAF_NODE	417:16	417:16	8	orient
LEAF_NODE	417:22	417:22	6	;
LEAF_NODE	418:0	418:0	4	}
LEAF_NODE	418:1	418:1	2	;
SIMPLE_DECL	420:0	429:3	1	struct dump_opts BASE_CLASSES { int debug ; int format ; int level ; char [ 4 ] mode ; char [ PATH_MAX + 1 ] infilename ; char [ PATH_MAX + 1 ] outfilename ; FILE * infile ; FILE * outfile ; } ;
CLASS_DEF	420:0	420:0	2	struct dump_opts BASE_CLASSES { int debug ; int format ; int level ; char [ 4 ] mode ; char [ PATH_MAX + 1 ] infilename ; char [ PATH_MAX + 1 ] outfilename ; FILE * infile ; FILE * outfile ; }
CLASS_DEF	420:0	429:2	3	struct dump_opts BASE_CLASSES { int debug ; int format ; int level ; char [ 4 ] mode ; char [ PATH_MAX + 1 ] infilename ; char [ PATH_MAX + 1 ] outfilename ; FILE * infile ; FILE * outfile ; }
LEAF_NODE	420:0	420:0	4	struct
CLASS_NAME	420:7	420:7	4	dump_opts
LEAF_NODE	420:7	420:7	5	dump_opts
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	420:17	420:17	4	{
CLASS_CONTENT	421:2	428:2	4	int debug ; int format ; int level ; char [ 4 ] mode ; char [ PATH_MAX + 1 ] infilename ; char [ PATH_MAX + 1 ] outfilename ; FILE * infile ; FILE * outfile ;
SIMPLE_DECL	421:2	421:12	5	int debug ;
VAR_DECL	421:2	421:7	6	int debug
TYPE	421:2	421:2	7	int
TYPE_NAME	421:2	421:2	8	int
LEAF_NODE	421:2	421:2	9	int
NAME	421:7	421:7	7	debug
LEAF_NODE	421:7	421:7	8	debug
LEAF_NODE	421:12	421:12	6	;
SIMPLE_DECL	422:2	422:13	5	int format ;
VAR_DECL	422:2	422:7	6	int format
TYPE	422:2	422:2	7	int
TYPE_NAME	422:2	422:2	8	int
LEAF_NODE	422:2	422:2	9	int
NAME	422:7	422:7	7	format
LEAF_NODE	422:7	422:7	8	format
LEAF_NODE	422:13	422:13	6	;
SIMPLE_DECL	423:2	423:12	5	int level ;
VAR_DECL	423:2	423:7	6	int level
TYPE	423:2	423:2	7	int
TYPE_NAME	423:2	423:2	8	int
LEAF_NODE	423:2	423:2	9	int
NAME	423:7	423:7	7	level
LEAF_NODE	423:7	423:7	8	level
LEAF_NODE	423:12	423:12	6	;
SIMPLE_DECL	424:2	424:14	5	char [ 4 ] mode ;
VAR_DECL	424:2	424:7	6	char [ 4 ] mode
TYPE	424:2	424:11	7	char [ 4 ]
TYPE_NAME	424:2	424:2	8	char
LEAF_NODE	424:2	424:2	9	char
TYPE_SUFFIX	424:11	424:13	8	[ 4 ]
LEAF_NODE	424:11	424:11	9	[
FIELD	424:12	424:12	9	4
LEAF_NODE	424:12	424:12	10	4
LEAF_NODE	424:13	424:13	9	]
NAME	424:7	424:7	7	mode
LEAF_NODE	424:7	424:7	8	mode
LEAF_NODE	424:14	424:14	6	;
SIMPLE_DECL	425:2	425:31	5	char [ PATH_MAX + 1 ] infilename ;
VAR_DECL	425:2	425:7	6	char [ PATH_MAX + 1 ] infilename
TYPE	425:2	425:17	7	char [ PATH_MAX + 1 ]
TYPE_NAME	425:2	425:2	8	char
LEAF_NODE	425:2	425:2	9	char
TYPE_SUFFIX	425:17	425:30	8	[ PATH_MAX + 1 ]
LEAF_NODE	425:17	425:17	9	[
FIELD	425:18	425:18	9	PATH_MAX
LEAF_NODE	425:18	425:18	10	PATH_MAX
LEAF_NODE	425:27	425:27	9	+
FIELD	425:29	425:29	9	1
LEAF_NODE	425:29	425:29	10	1
LEAF_NODE	425:30	425:30	9	]
NAME	425:7	425:7	7	infilename
LEAF_NODE	425:7	425:7	8	infilename
LEAF_NODE	425:31	425:31	6	;
SIMPLE_DECL	426:2	426:32	5	char [ PATH_MAX + 1 ] outfilename ;
VAR_DECL	426:2	426:7	6	char [ PATH_MAX + 1 ] outfilename
TYPE	426:2	426:18	7	char [ PATH_MAX + 1 ]
TYPE_NAME	426:2	426:2	8	char
LEAF_NODE	426:2	426:2	9	char
TYPE_SUFFIX	426:18	426:31	8	[ PATH_MAX + 1 ]
LEAF_NODE	426:18	426:18	9	[
FIELD	426:19	426:19	9	PATH_MAX
LEAF_NODE	426:19	426:19	10	PATH_MAX
LEAF_NODE	426:28	426:28	9	+
FIELD	426:30	426:30	9	1
LEAF_NODE	426:30	426:30	10	1
LEAF_NODE	426:31	426:31	9	]
NAME	426:7	426:7	7	outfilename
LEAF_NODE	426:7	426:7	8	outfilename
LEAF_NODE	426:32	426:32	6	;
SIMPLE_DECL	427:2	427:14	5	FILE * infile ;
VAR_DECL	427:2	427:8	6	FILE * infile
TYPE	427:2	427:7	7	FILE *
TYPE_NAME	427:2	427:2	8	FILE
LEAF_NODE	427:2	427:2	9	FILE
POINTER	427:7	427:7	8	*
LEAF_NODE	427:7	427:7	9	*
NAME	427:8	427:8	7	infile
LEAF_NODE	427:8	427:8	8	infile
LEAF_NODE	427:14	427:14	6	;
SIMPLE_DECL	428:2	428:15	5	FILE * outfile ;
VAR_DECL	428:2	428:8	6	FILE * outfile
TYPE	428:2	428:7	7	FILE *
TYPE_NAME	428:2	428:2	8	FILE
LEAF_NODE	428:2	428:2	9	FILE
POINTER	428:7	428:7	8	*
LEAF_NODE	428:7	428:7	9	*
NAME	428:8	428:8	7	outfile
LEAF_NODE	428:8	428:8	8	outfile
LEAF_NODE	428:15	428:15	6	;
LEAF_NODE	429:2	429:2	4	}
LEAF_NODE	429:3	429:3	2	;
SIMPLE_DECL	432:7	432:27	1	int outtiled ; outtiled = - 1 ;
VAR_DECL	432:7	432:14	2	int outtiled ; outtiled = - 1
TYPE	432:7	432:7	3	int
TYPE_NAME	432:7	432:7	4	int
LEAF_NODE	432:7	432:7	5	int
NAME	432:14	432:14	3	outtiled
LEAF_NODE	432:14	432:14	4	outtiled
LEAF_NODE	0:0	0:0	3	;
INIT	432:14	432:14	3	outtiled = - 1
ASSIGN	432:14	432:25	4	outtiled = - 1
LVAL	432:14	432:14	5	outtiled
NAME	432:14	432:14	6	outtiled
LEAF_NODE	432:14	432:14	7	outtiled
ASSIGN_OP	432:23	432:23	5	=
LEAF_NODE	432:23	432:23	6	=
RVAL	432:25	432:25	5	- 1
UNARY_EXPR	432:25	432:26	6	- 1
UNARY_OPERATOR	432:25	432:25	7	-
LEAF_NODE	432:25	432:25	8	-
FIELD	432:26	432:26	7	1
LEAF_NODE	432:26	432:26	8	1
LEAF_NODE	432:27	432:27	2	;
SIMPLE_DECL	433:7	433:27	1	uint32 tilewidth ; tilewidth = 0 ;
VAR_DECL	433:7	433:14	2	uint32 tilewidth ; tilewidth = 0
TYPE	433:7	433:7	3	uint32
TYPE_NAME	433:7	433:7	4	uint32
LEAF_NODE	433:7	433:7	5	uint32
NAME	433:14	433:14	3	tilewidth
LEAF_NODE	433:14	433:14	4	tilewidth
LEAF_NODE	0:0	0:0	3	;
INIT	433:14	433:14	3	tilewidth = 0
ASSIGN	433:14	433:26	4	tilewidth = 0
LVAL	433:14	433:14	5	tilewidth
NAME	433:14	433:14	6	tilewidth
LEAF_NODE	433:14	433:14	7	tilewidth
ASSIGN_OP	433:24	433:24	5	=
LEAF_NODE	433:24	433:24	6	=
RVAL	433:26	433:26	5	0
FIELD	433:26	433:26	6	0
LEAF_NODE	433:26	433:26	7	0
LEAF_NODE	433:27	433:27	2	;
SIMPLE_DECL	434:7	434:28	1	uint32 tilelength ; tilelength = 0 ;
VAR_DECL	434:7	434:14	2	uint32 tilelength ; tilelength = 0
TYPE	434:7	434:7	3	uint32
TYPE_NAME	434:7	434:7	4	uint32
LEAF_NODE	434:7	434:7	5	uint32
NAME	434:14	434:14	3	tilelength
LEAF_NODE	434:14	434:14	4	tilelength
LEAF_NODE	0:0	0:0	3	;
INIT	434:14	434:14	3	tilelength = 0
ASSIGN	434:14	434:27	4	tilelength = 0
LVAL	434:14	434:14	5	tilelength
NAME	434:14	434:14	6	tilelength
LEAF_NODE	434:14	434:14	7	tilelength
ASSIGN_OP	434:25	434:25	5	=
LEAF_NODE	434:25	434:25	6	=
RVAL	434:27	434:27	5	0
FIELD	434:27	434:27	6	0
LEAF_NODE	434:27	434:27	7	0
LEAF_NODE	434:28	434:28	2	;
SIMPLE_DECL	436:7	436:24	1	uint16 config ; config = 0 ;
VAR_DECL	436:7	436:14	2	uint16 config ; config = 0
TYPE	436:7	436:7	3	uint16
TYPE_NAME	436:7	436:7	4	uint16
LEAF_NODE	436:7	436:7	5	uint16
NAME	436:14	436:14	3	config
LEAF_NODE	436:14	436:14	4	config
LEAF_NODE	0:0	0:0	3	;
INIT	436:14	436:14	3	config = 0
ASSIGN	436:14	436:23	4	config = 0
LVAL	436:14	436:14	5	config
NAME	436:14	436:14	6	config
LEAF_NODE	436:14	436:14	7	config
ASSIGN_OP	436:21	436:21	5	=
LEAF_NODE	436:21	436:21	6	=
RVAL	436:23	436:23	5	0
FIELD	436:23	436:23	6	0
LEAF_NODE	436:23	436:23	7	0
LEAF_NODE	436:24	436:24	2	;
SIMPLE_DECL	437:7	437:29	1	uint16 compression ; compression = 0 ;
VAR_DECL	437:7	437:14	2	uint16 compression ; compression = 0
TYPE	437:7	437:7	3	uint16
TYPE_NAME	437:7	437:7	4	uint16
LEAF_NODE	437:7	437:7	5	uint16
NAME	437:14	437:14	3	compression
LEAF_NODE	437:14	437:14	4	compression
LEAF_NODE	0:0	0:0	3	;
INIT	437:14	437:14	3	compression = 0
ASSIGN	437:14	437:28	4	compression = 0
LVAL	437:14	437:14	5	compression
NAME	437:14	437:14	6	compression
LEAF_NODE	437:14	437:14	7	compression
ASSIGN_OP	437:26	437:26	5	=
LEAF_NODE	437:26	437:26	6	=
RVAL	437:28	437:28	5	0
FIELD	437:28	437:28	6	0
LEAF_NODE	437:28	437:28	7	0
LEAF_NODE	437:29	437:29	2	;
SIMPLE_DECL	438:7	438:27	1	uint16 predictor ; predictor = 0 ;
VAR_DECL	438:7	438:14	2	uint16 predictor ; predictor = 0
TYPE	438:7	438:7	3	uint16
TYPE_NAME	438:7	438:7	4	uint16
LEAF_NODE	438:7	438:7	5	uint16
NAME	438:14	438:14	3	predictor
LEAF_NODE	438:14	438:14	4	predictor
LEAF_NODE	0:0	0:0	3	;
INIT	438:14	438:14	3	predictor = 0
ASSIGN	438:14	438:26	4	predictor = 0
LVAL	438:14	438:14	5	predictor
NAME	438:14	438:14	6	predictor
LEAF_NODE	438:14	438:14	7	predictor
ASSIGN_OP	438:24	438:24	5	=
LEAF_NODE	438:24	438:24	6	=
RVAL	438:26	438:26	5	0
FIELD	438:26	438:26	6	0
LEAF_NODE	438:26	438:26	7	0
LEAF_NODE	438:27	438:27	2	;
SIMPLE_DECL	439:7	439:27	1	uint16 fillorder ; fillorder = 0 ;
VAR_DECL	439:7	439:14	2	uint16 fillorder ; fillorder = 0
TYPE	439:7	439:7	3	uint16
TYPE_NAME	439:7	439:7	4	uint16
LEAF_NODE	439:7	439:7	5	uint16
NAME	439:14	439:14	3	fillorder
LEAF_NODE	439:14	439:14	4	fillorder
LEAF_NODE	0:0	0:0	3	;
INIT	439:14	439:14	3	fillorder = 0
ASSIGN	439:14	439:26	4	fillorder = 0
LVAL	439:14	439:14	5	fillorder
NAME	439:14	439:14	6	fillorder
LEAF_NODE	439:14	439:14	7	fillorder
ASSIGN_OP	439:24	439:24	5	=
LEAF_NODE	439:24	439:24	6	=
RVAL	439:26	439:26	5	0
FIELD	439:26	439:26	6	0
LEAF_NODE	439:26	439:26	7	0
LEAF_NODE	439:27	439:27	2	;
SIMPLE_DECL	440:7	440:30	1	uint32 rowsperstrip ; rowsperstrip = 0 ;
VAR_DECL	440:7	440:14	2	uint32 rowsperstrip ; rowsperstrip = 0
TYPE	440:7	440:7	3	uint32
TYPE_NAME	440:7	440:7	4	uint32
LEAF_NODE	440:7	440:7	5	uint32
NAME	440:14	440:14	3	rowsperstrip
LEAF_NODE	440:14	440:14	4	rowsperstrip
LEAF_NODE	0:0	0:0	3	;
INIT	440:14	440:14	3	rowsperstrip = 0
ASSIGN	440:14	440:29	4	rowsperstrip = 0
LVAL	440:14	440:14	5	rowsperstrip
NAME	440:14	440:14	6	rowsperstrip
LEAF_NODE	440:14	440:14	7	rowsperstrip
ASSIGN_OP	440:27	440:27	5	=
LEAF_NODE	440:27	440:27	6	=
RVAL	440:29	440:29	5	0
FIELD	440:29	440:29	6	0
LEAF_NODE	440:29	440:29	7	0
LEAF_NODE	440:30	440:30	2	;
SIMPLE_DECL	441:7	441:24	1	uint32 g3opts ; g3opts = 0 ;
VAR_DECL	441:7	441:14	2	uint32 g3opts ; g3opts = 0
TYPE	441:7	441:7	3	uint32
TYPE_NAME	441:7	441:7	4	uint32
LEAF_NODE	441:7	441:7	5	uint32
NAME	441:14	441:14	3	g3opts
LEAF_NODE	441:14	441:14	4	g3opts
LEAF_NODE	0:0	0:0	3	;
INIT	441:14	441:14	3	g3opts = 0
ASSIGN	441:14	441:23	4	g3opts = 0
LVAL	441:14	441:14	5	g3opts
NAME	441:14	441:14	6	g3opts
LEAF_NODE	441:14	441:14	7	g3opts
ASSIGN_OP	441:21	441:21	5	=
LEAF_NODE	441:21	441:21	6	=
RVAL	441:23	441:23	5	0
FIELD	441:23	441:23	6	0
LEAF_NODE	441:23	441:23	7	0
LEAF_NODE	441:24	441:24	2	;
SIMPLE_DECL	442:7	442:28	1	int ignore ; ignore = FALSE ;
VAR_DECL	442:7	442:14	2	int ignore ; ignore = FALSE
TYPE	442:7	442:7	3	int
TYPE_NAME	442:7	442:7	4	int
LEAF_NODE	442:7	442:7	5	int
NAME	442:14	442:14	3	ignore
LEAF_NODE	442:14	442:14	4	ignore
LEAF_NODE	0:0	0:0	3	;
INIT	442:14	442:14	3	ignore = FALSE
ASSIGN	442:14	442:23	4	ignore = FALSE
LVAL	442:14	442:14	5	ignore
NAME	442:14	442:14	6	ignore
LEAF_NODE	442:14	442:14	7	ignore
ASSIGN_OP	442:21	442:21	5	=
LEAF_NODE	442:21	442:21	6	=
RVAL	442:23	442:23	5	FALSE
FIELD	442:23	442:23	6	FALSE
LEAF_NODE	442:23	442:23	7	FALSE
LEAF_NODE	442:28	442:28	2	;
SIMPLE_DECL	443:7	443:37	1	uint32 defg3opts ; defg3opts = ( uint32 ) - 1 ;
VAR_DECL	443:7	443:14	2	uint32 defg3opts ; defg3opts = ( uint32 ) - 1
TYPE	443:7	443:7	3	uint32
TYPE_NAME	443:7	443:7	4	uint32
LEAF_NODE	443:7	443:7	5	uint32
NAME	443:14	443:14	3	defg3opts
LEAF_NODE	443:14	443:14	4	defg3opts
LEAF_NODE	0:0	0:0	3	;
INIT	443:14	443:14	3	defg3opts = ( uint32 ) - 1
ASSIGN	443:14	443:26	4	defg3opts = ( uint32 ) - 1
LVAL	443:14	443:14	5	defg3opts
NAME	443:14	443:14	6	defg3opts
LEAF_NODE	443:14	443:14	7	defg3opts
ASSIGN_OP	443:24	443:24	5	=
LEAF_NODE	443:24	443:24	6	=
RVAL	443:26	443:35	5	( uint32 ) - 1
LEAF_NODE	443:26	443:26	6	(
TYPE_NAME	443:27	443:27	6	uint32
LEAF_NODE	443:27	443:27	7	uint32
LEAF_NODE	443:33	443:33	6	)
UNARY_EXPR	443:35	443:36	6	- 1
UNARY_OPERATOR	443:35	443:35	7	-
LEAF_NODE	443:35	443:35	8	-
FIELD	443:36	443:36	7	1
LEAF_NODE	443:36	443:36	8	1
LEAF_NODE	443:37	443:37	2	;
SIMPLE_DECL	444:7	444:27	1	int quality ; quality = 100 ;
VAR_DECL	444:7	444:14	2	int quality ; quality = 100
TYPE	444:7	444:7	3	int
TYPE_NAME	444:7	444:7	4	int
LEAF_NODE	444:7	444:7	5	int
NAME	444:14	444:14	3	quality
LEAF_NODE	444:14	444:14	4	quality
LEAF_NODE	0:0	0:0	3	;
INIT	444:14	444:14	3	quality = 100
ASSIGN	444:14	444:24	4	quality = 100
LVAL	444:14	444:14	5	quality
NAME	444:14	444:14	6	quality
LEAF_NODE	444:14	444:14	7	quality
ASSIGN_OP	444:22	444:22	5	=
LEAF_NODE	444:22	444:22	6	=
RVAL	444:24	444:24	5	100
FIELD	444:24	444:24	6	100
LEAF_NODE	444:24	444:24	7	100
LEAF_NODE	444:27	444:27	2	;
SIMPLE_DECL	446:7	446:47	1	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB ;
VAR_DECL	446:7	446:14	2	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB
TYPE	446:7	446:7	3	int
TYPE_NAME	446:7	446:7	4	int
LEAF_NODE	446:7	446:7	5	int
NAME	446:14	446:14	3	jpegcolormode
LEAF_NODE	446:14	446:14	4	jpegcolormode
LEAF_NODE	0:0	0:0	3	;
INIT	446:14	446:14	3	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	446:14	446:30	4	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	446:14	446:14	5	jpegcolormode
NAME	446:14	446:14	6	jpegcolormode
LEAF_NODE	446:14	446:14	7	jpegcolormode
ASSIGN_OP	446:28	446:28	5	=
LEAF_NODE	446:28	446:28	6	=
RVAL	446:30	446:30	5	JPEGCOLORMODE_RGB
FIELD	446:30	446:30	6	JPEGCOLORMODE_RGB
LEAF_NODE	446:30	446:30	7	JPEGCOLORMODE_RGB
LEAF_NODE	446:47	446:47	2	;
SIMPLE_DECL	447:7	447:42	1	uint16 defcompression ; defcompression = ( uint16 ) - 1 ;
VAR_DECL	447:7	447:14	2	uint16 defcompression ; defcompression = ( uint16 ) - 1
TYPE	447:7	447:7	3	uint16
TYPE_NAME	447:7	447:7	4	uint16
LEAF_NODE	447:7	447:7	5	uint16
NAME	447:14	447:14	3	defcompression
LEAF_NODE	447:14	447:14	4	defcompression
LEAF_NODE	0:0	0:0	3	;
INIT	447:14	447:14	3	defcompression = ( uint16 ) - 1
ASSIGN	447:14	447:31	4	defcompression = ( uint16 ) - 1
LVAL	447:14	447:14	5	defcompression
NAME	447:14	447:14	6	defcompression
LEAF_NODE	447:14	447:14	7	defcompression
ASSIGN_OP	447:29	447:29	5	=
LEAF_NODE	447:29	447:29	6	=
RVAL	447:31	447:40	5	( uint16 ) - 1
LEAF_NODE	447:31	447:31	6	(
TYPE_NAME	447:32	447:32	6	uint16
LEAF_NODE	447:32	447:32	7	uint16
LEAF_NODE	447:38	447:38	6	)
UNARY_EXPR	447:40	447:41	6	- 1
UNARY_OPERATOR	447:40	447:40	7	-
LEAF_NODE	447:40	447:40	8	-
FIELD	447:41	447:41	7	1
LEAF_NODE	447:41	447:41	8	1
LEAF_NODE	447:42	447:42	2	;
SIMPLE_DECL	448:7	448:40	1	uint16 defpredictor ; defpredictor = ( uint16 ) - 1 ;
VAR_DECL	448:7	448:14	2	uint16 defpredictor ; defpredictor = ( uint16 ) - 1
TYPE	448:7	448:7	3	uint16
TYPE_NAME	448:7	448:7	4	uint16
LEAF_NODE	448:7	448:7	5	uint16
NAME	448:14	448:14	3	defpredictor
LEAF_NODE	448:14	448:14	4	defpredictor
LEAF_NODE	0:0	0:0	3	;
INIT	448:14	448:14	3	defpredictor = ( uint16 ) - 1
ASSIGN	448:14	448:29	4	defpredictor = ( uint16 ) - 1
LVAL	448:14	448:14	5	defpredictor
NAME	448:14	448:14	6	defpredictor
LEAF_NODE	448:14	448:14	7	defpredictor
ASSIGN_OP	448:27	448:27	5	=
LEAF_NODE	448:27	448:27	6	=
RVAL	448:29	448:38	5	( uint16 ) - 1
LEAF_NODE	448:29	448:29	6	(
TYPE_NAME	448:30	448:30	6	uint16
LEAF_NODE	448:30	448:30	7	uint16
LEAF_NODE	448:36	448:36	6	)
UNARY_EXPR	448:38	448:39	6	- 1
UNARY_OPERATOR	448:38	448:38	7	-
LEAF_NODE	448:38	448:38	8	-
FIELD	448:39	448:39	7	1
LEAF_NODE	448:39	448:39	8	1
LEAF_NODE	448:40	448:40	2	;
SIMPLE_DECL	449:7	449:25	1	int pageNum ; pageNum = 0 ;
VAR_DECL	449:7	449:14	2	int pageNum ; pageNum = 0
TYPE	449:7	449:7	3	int
TYPE_NAME	449:7	449:7	4	int
LEAF_NODE	449:7	449:7	5	int
NAME	449:14	449:14	3	pageNum
LEAF_NODE	449:14	449:14	4	pageNum
LEAF_NODE	0:0	0:0	3	;
INIT	449:14	449:14	3	pageNum = 0
ASSIGN	449:14	449:24	4	pageNum = 0
LVAL	449:14	449:14	5	pageNum
NAME	449:14	449:14	6	pageNum
LEAF_NODE	449:14	449:14	7	pageNum
ASSIGN_OP	449:22	449:22	5	=
LEAF_NODE	449:22	449:22	6	=
RVAL	449:24	449:24	5	0
FIELD	449:24	449:24	6	0
LEAF_NODE	449:24	449:24	7	0
LEAF_NODE	449:25	449:25	2	;
SIMPLE_DECL	450:7	450:31	1	int little_endian ; little_endian = 1 ;
VAR_DECL	450:7	450:14	2	int little_endian ; little_endian = 1
TYPE	450:7	450:7	3	int
TYPE_NAME	450:7	450:7	4	int
LEAF_NODE	450:7	450:7	5	int
NAME	450:14	450:14	3	little_endian
LEAF_NODE	450:14	450:14	4	little_endian
LEAF_NODE	0:0	0:0	3	;
INIT	450:14	450:14	3	little_endian = 1
ASSIGN	450:14	450:30	4	little_endian = 1
LVAL	450:14	450:14	5	little_endian
NAME	450:14	450:14	6	little_endian
LEAF_NODE	450:14	450:14	7	little_endian
ASSIGN_OP	450:28	450:28	5	=
LEAF_NODE	450:28	450:28	6	=
RVAL	450:30	450:30	5	1
FIELD	450:30	450:30	6	1
LEAF_NODE	450:30	450:30	7	1
LEAF_NODE	450:31	450:31	2	;
SIMPLE_DECL	464:7	464:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	464:7	464:12	2	void usage ; usage usage ( void )
TYPE	464:7	464:7	3	void
TYPE_NAME	464:7	464:7	4	void
LEAF_NODE	464:7	464:7	5	void
NAME	464:12	464:12	3	usage
LEAF_NODE	464:12	464:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	464:12	464:12	3	usage usage ( void )
ASSIGN	464:12	464:17	4	usage usage ( void )
LVAL	464:12	464:12	5	usage
NAME	464:12	464:12	6	usage
LEAF_NODE	464:12	464:12	7	usage
ASSIGN_OP	464:12	464:12	5	usage
NAME	464:12	464:12	6	usage
LEAF_NODE	464:12	464:12	7	usage
RVAL	464:17	464:22	5	( void )
LEAF_NODE	464:17	464:17	6	(
EXPR	464:18	464:18	6	void
FIELD	464:18	464:18	7	void
LEAF_NODE	464:18	464:18	8	void
LEAF_NODE	464:22	464:22	6	)
LEAF_NODE	464:23	464:23	2	;
FUNCTION_DEF	760:0	965:2	1	
RETURN_TYPE	760:0	760:7	2	static int
LEAF_NODE	760:0	760:0	3	static
TYPE_NAME	760:7	760:7	3	int
LEAF_NODE	760:7	760:7	4	int
FUNCTION_NAME	760:11	760:11	2	readContigTilesIntoBuffer
LEAF_NODE	760:11	760:11	3	readContigTilesIntoBuffer
PARAMETER_LIST	760:37	764:63	2	( TIFF * in , uint8 * buf , uint32 imagelength , uint32 imagewidth , uint32 tw , uint32 tl , tsample_t spp , uint16 bps )
LEAF_NODE	760:37	760:37	3	(
PARAMETER_DECL	760:38	760:44	3	TIFF * in
TYPE	760:38	760:42	4	TIFF *
TYPE_NAME	760:38	760:38	5	TIFF
LEAF_NODE	760:38	760:38	6	TIFF
POINTER	760:42	760:42	5	*
LEAF_NODE	760:42	760:42	6	*
NAME	760:44	760:44	4	in
LEAF_NODE	760:44	760:44	5	in
LEAF_NODE	760:46	760:46	3	,
PARAMETER_DECL	760:48	760:55	3	uint8 * buf
TYPE	760:48	760:53	4	uint8 *
TYPE_NAME	760:48	760:48	5	uint8
LEAF_NODE	760:48	760:48	6	uint8
POINTER	760:53	760:53	5	*
LEAF_NODE	760:53	760:53	6	*
NAME	760:55	760:55	4	buf
LEAF_NODE	760:55	760:55	5	buf
LEAF_NODE	760:58	760:58	3	,
PARAMETER_DECL	761:38	761:45	3	uint32 imagelength
TYPE	761:38	761:38	4	uint32
TYPE_NAME	761:38	761:38	5	uint32
LEAF_NODE	761:38	761:38	6	uint32
NAME	761:45	761:45	4	imagelength
LEAF_NODE	761:45	761:45	5	imagelength
LEAF_NODE	761:56	761:56	3	,
PARAMETER_DECL	762:38	762:45	3	uint32 imagewidth
TYPE	762:38	762:38	4	uint32
TYPE_NAME	762:38	762:38	5	uint32
LEAF_NODE	762:38	762:38	6	uint32
NAME	762:45	762:45	4	imagewidth
LEAF_NODE	762:45	762:45	5	imagewidth
LEAF_NODE	762:55	762:55	3	,
PARAMETER_DECL	763:38	763:45	3	uint32 tw
TYPE	763:38	763:38	4	uint32
TYPE_NAME	763:38	763:38	5	uint32
LEAF_NODE	763:38	763:38	6	uint32
NAME	763:45	763:45	4	tw
LEAF_NODE	763:45	763:45	5	tw
LEAF_NODE	763:47	763:47	3	,
PARAMETER_DECL	763:49	763:56	3	uint32 tl
TYPE	763:49	763:49	4	uint32
TYPE_NAME	763:49	763:49	5	uint32
LEAF_NODE	763:49	763:49	6	uint32
NAME	763:56	763:56	4	tl
LEAF_NODE	763:56	763:56	5	tl
LEAF_NODE	763:58	763:58	3	,
PARAMETER_DECL	764:38	764:48	3	tsample_t spp
TYPE	764:38	764:38	4	tsample_t
TYPE_NAME	764:38	764:38	5	tsample_t
LEAF_NODE	764:38	764:38	6	tsample_t
NAME	764:48	764:48	4	spp
LEAF_NODE	764:48	764:48	5	spp
LEAF_NODE	764:51	764:51	3	,
PARAMETER_DECL	764:53	764:60	3	uint16 bps
TYPE	764:53	764:53	4	uint16
TYPE_NAME	764:53	764:53	5	uint16
LEAF_NODE	764:53	764:53	6	uint16
NAME	764:60	764:60	4	bps
LEAF_NODE	764:60	764:60	5	bps
LEAF_NODE	764:63	764:63	3	)
LEAF_NODE	765:2	765:2	2	{
STATEMENTS	766:2	964:2	2	
SIMPLE_DECL	766:2	766:16	3	int status ; status = 1 ;
VAR_DECL	766:2	766:6	4	int status ; status = 1
TYPE	766:2	766:2	5	int
TYPE_NAME	766:2	766:2	6	int
LEAF_NODE	766:2	766:2	7	int
NAME	766:6	766:6	5	status
LEAF_NODE	766:6	766:6	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	766:6	766:6	5	status = 1
ASSIGN	766:6	766:15	6	status = 1
LVAL	766:6	766:6	7	status
NAME	766:6	766:6	8	status
LEAF_NODE	766:6	766:6	9	status
ASSIGN_OP	766:13	766:13	7	=
LEAF_NODE	766:13	766:13	8	=
RVAL	766:15	766:15	7	1
FIELD	766:15	766:15	8	1
LEAF_NODE	766:15	766:15	9	1
LEAF_NODE	766:16	766:16	4	;
SIMPLE_DECL	767:2	767:22	3	tsample_t sample ; sample = 0 ;
VAR_DECL	767:2	767:12	4	tsample_t sample ; sample = 0
TYPE	767:2	767:2	5	tsample_t
TYPE_NAME	767:2	767:2	6	tsample_t
LEAF_NODE	767:2	767:2	7	tsample_t
NAME	767:12	767:12	5	sample
LEAF_NODE	767:12	767:12	6	sample
LEAF_NODE	0:0	0:0	5	;
INIT	767:12	767:12	5	sample = 0
ASSIGN	767:12	767:21	6	sample = 0
LVAL	767:12	767:12	7	sample
NAME	767:12	767:12	8	sample
LEAF_NODE	767:12	767:12	9	sample
ASSIGN_OP	767:19	767:19	7	=
LEAF_NODE	767:19	767:19	8	=
RVAL	767:21	767:21	7	0
FIELD	767:21	767:21	8	0
LEAF_NODE	767:21	767:21	9	0
LEAF_NODE	767:22	767:22	4	;
SIMPLE_DECL	768:2	768:23	3	tsample_t count ; count = spp ;
VAR_DECL	768:2	768:12	4	tsample_t count ; count = spp
TYPE	768:2	768:2	5	tsample_t
TYPE_NAME	768:2	768:2	6	tsample_t
LEAF_NODE	768:2	768:2	7	tsample_t
NAME	768:12	768:12	5	count
LEAF_NODE	768:12	768:12	6	count
LEAF_NODE	0:0	0:0	5	;
INIT	768:12	768:12	5	count = spp
ASSIGN	768:12	768:20	6	count = spp
LVAL	768:12	768:12	7	count
NAME	768:12	768:12	8	count
LEAF_NODE	768:12	768:12	9	count
ASSIGN_OP	768:18	768:18	7	=
LEAF_NODE	768:18	768:18	8	=
RVAL	768:20	768:20	7	spp
FIELD	768:20	768:20	8	spp
LEAF_NODE	768:20	768:20	9	spp
LEAF_NODE	768:23	768:23	4	;
SIMPLE_DECL	769:2	769:23	3	uint32 row , uint32 col , uint32 trow ;
INIT_DECL_LIST	769:2	769:2	4	uint32 row , uint32 col , uint32 trow
VAR_DECL	769:2	769:9	5	uint32 row
TYPE	769:2	769:2	6	uint32
TYPE_NAME	769:2	769:2	7	uint32
LEAF_NODE	769:2	769:2	8	uint32
NAME	769:9	769:9	6	row
LEAF_NODE	769:9	769:9	7	row
LEAF_NODE	769:12	769:12	5	,
INIT_DECL_LIST	769:2	769:2	5	uint32 col , uint32 trow
VAR_DECL	769:2	769:14	6	uint32 col
TYPE	769:2	769:2	7	uint32
TYPE_NAME	769:2	769:2	8	uint32
LEAF_NODE	769:2	769:2	9	uint32
NAME	769:14	769:14	7	col
LEAF_NODE	769:14	769:14	8	col
LEAF_NODE	769:17	769:17	6	,
VAR_DECL	769:2	769:19	6	uint32 trow
TYPE	769:2	769:2	7	uint32
TYPE_NAME	769:2	769:2	8	uint32
LEAF_NODE	769:2	769:2	9	uint32
NAME	769:19	769:19	7	trow
LEAF_NODE	769:19	769:19	8	trow
LEAF_NODE	769:23	769:23	4	;
SIMPLE_DECL	770:2	770:19	3	uint32 nrow , uint32 ncol ;
INIT_DECL_LIST	770:2	770:2	4	uint32 nrow , uint32 ncol
VAR_DECL	770:2	770:9	5	uint32 nrow
TYPE	770:2	770:2	6	uint32
TYPE_NAME	770:2	770:2	7	uint32
LEAF_NODE	770:2	770:2	8	uint32
NAME	770:9	770:9	6	nrow
LEAF_NODE	770:9	770:9	7	nrow
LEAF_NODE	770:13	770:13	5	,
VAR_DECL	770:2	770:15	5	uint32 ncol
TYPE	770:2	770:2	6	uint32
TYPE_NAME	770:2	770:2	7	uint32
LEAF_NODE	770:2	770:2	8	uint32
NAME	770:15	770:15	6	ncol
LEAF_NODE	770:15	770:15	7	ncol
LEAF_NODE	770:19	770:19	4	;
SIMPLE_DECL	771:2	771:33	3	uint32 dst_rowsize , uint32 shift_width ;
INIT_DECL_LIST	771:2	771:2	4	uint32 dst_rowsize , uint32 shift_width
VAR_DECL	771:2	771:9	5	uint32 dst_rowsize
TYPE	771:2	771:2	6	uint32
TYPE_NAME	771:2	771:2	7	uint32
LEAF_NODE	771:2	771:2	8	uint32
NAME	771:9	771:9	6	dst_rowsize
LEAF_NODE	771:9	771:9	7	dst_rowsize
LEAF_NODE	771:20	771:20	5	,
VAR_DECL	771:2	771:22	5	uint32 shift_width
TYPE	771:2	771:2	6	uint32
TYPE_NAME	771:2	771:2	7	uint32
LEAF_NODE	771:2	771:2	8	uint32
NAME	771:22	771:22	6	shift_width
LEAF_NODE	771:22	771:22	7	shift_width
LEAF_NODE	771:33	771:33	4	;
SIMPLE_DECL	772:2	772:42	3	uint32 bytes_per_sample , uint32 bytes_per_pixel ;
INIT_DECL_LIST	772:2	772:2	4	uint32 bytes_per_sample , uint32 bytes_per_pixel
VAR_DECL	772:2	772:9	5	uint32 bytes_per_sample
TYPE	772:2	772:2	6	uint32
TYPE_NAME	772:2	772:2	7	uint32
LEAF_NODE	772:2	772:2	8	uint32
NAME	772:9	772:9	6	bytes_per_sample
LEAF_NODE	772:9	772:9	7	bytes_per_sample
LEAF_NODE	772:25	772:25	5	,
VAR_DECL	772:2	772:27	5	uint32 bytes_per_pixel
TYPE	772:2	772:2	6	uint32
TYPE_NAME	772:2	772:2	7	uint32
LEAF_NODE	772:2	772:2	8	uint32
NAME	772:27	772:27	6	bytes_per_pixel
LEAF_NODE	772:27	772:27	7	bytes_per_pixel
LEAF_NODE	772:42	772:42	4	;
SIMPLE_DECL	773:2	773:42	3	uint32 trailing_bits , uint32 prev_trailing_bits ;
INIT_DECL_LIST	773:2	773:2	4	uint32 trailing_bits , uint32 prev_trailing_bits
VAR_DECL	773:2	773:9	5	uint32 trailing_bits
TYPE	773:2	773:2	6	uint32
TYPE_NAME	773:2	773:2	7	uint32
LEAF_NODE	773:2	773:2	8	uint32
NAME	773:9	773:9	6	trailing_bits
LEAF_NODE	773:9	773:9	7	trailing_bits
LEAF_NODE	773:22	773:22	5	,
VAR_DECL	773:2	773:24	5	uint32 prev_trailing_bits
TYPE	773:2	773:2	6	uint32
TYPE_NAME	773:2	773:2	7	uint32
LEAF_NODE	773:2	773:2	8	uint32
NAME	773:24	773:24	6	prev_trailing_bits
LEAF_NODE	773:24	773:24	7	prev_trailing_bits
LEAF_NODE	773:42	773:42	4	;
SIMPLE_DECL	774:2	774:44	3	uint32 tile_rowsize ; tile_rowsize = TIFFTileRowSize ( in ) ;
VAR_DECL	774:2	774:9	4	uint32 tile_rowsize ; tile_rowsize = TIFFTileRowSize ( in )
TYPE	774:2	774:2	5	uint32
TYPE_NAME	774:2	774:2	6	uint32
LEAF_NODE	774:2	774:2	7	uint32
NAME	774:9	774:9	5	tile_rowsize
LEAF_NODE	774:9	774:9	6	tile_rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	774:9	774:9	5	tile_rowsize = TIFFTileRowSize ( in )
ASSIGN	774:9	774:25	6	tile_rowsize = TIFFTileRowSize ( in )
LVAL	774:9	774:9	7	tile_rowsize
NAME	774:9	774:9	8	tile_rowsize
LEAF_NODE	774:9	774:9	9	tile_rowsize
ASSIGN_OP	774:23	774:23	7	=
LEAF_NODE	774:23	774:23	8	=
RVAL	774:25	774:25	7	TIFFTileRowSize ( in )
FUNCTION_CALL	774:25	774:43	8	TIFFTileRowSize ( in )
CALLEE	774:25	774:25	9	TIFFTileRowSize
LEAF_NODE	774:25	774:25	10	TIFFTileRowSize
LEAF_NODE	774:40	774:40	9	(
ARGUMENT	774:41	774:41	9	in
FIELD	774:41	774:41	10	in
LEAF_NODE	774:41	774:41	11	in
LEAF_NODE	774:43	774:43	9	)
LEAF_NODE	774:44	774:44	4	;
SIMPLE_DECL	775:2	775:31	3	uint32 src_offset , uint32 dst_offset ;
INIT_DECL_LIST	775:2	775:2	4	uint32 src_offset , uint32 dst_offset
VAR_DECL	775:2	775:9	5	uint32 src_offset
TYPE	775:2	775:2	6	uint32
TYPE_NAME	775:2	775:2	7	uint32
LEAF_NODE	775:2	775:2	8	uint32
NAME	775:9	775:9	6	src_offset
LEAF_NODE	775:9	775:9	7	src_offset
LEAF_NODE	775:19	775:19	5	,
VAR_DECL	775:2	775:21	5	uint32 dst_offset
TYPE	775:2	775:2	6	uint32
TYPE_NAME	775:2	775:2	7	uint32
LEAF_NODE	775:2	775:2	8	uint32
NAME	775:21	775:21	6	dst_offset
LEAF_NODE	775:21	775:21	7	dst_offset
LEAF_NODE	775:31	775:31	4	;
SIMPLE_DECL	776:2	776:31	3	uint32 row_offset , uint32 col_offset ;
INIT_DECL_LIST	776:2	776:2	4	uint32 row_offset , uint32 col_offset
VAR_DECL	776:2	776:9	5	uint32 row_offset
TYPE	776:2	776:2	6	uint32
TYPE_NAME	776:2	776:2	7	uint32
LEAF_NODE	776:2	776:2	8	uint32
NAME	776:9	776:9	6	row_offset
LEAF_NODE	776:9	776:9	7	row_offset
LEAF_NODE	776:19	776:19	5	,
VAR_DECL	776:2	776:21	5	uint32 col_offset
TYPE	776:2	776:2	6	uint32
TYPE_NAME	776:2	776:2	7	uint32
LEAF_NODE	776:2	776:2	8	uint32
NAME	776:21	776:21	6	col_offset
LEAF_NODE	776:21	776:21	7	col_offset
LEAF_NODE	776:31	776:31	4	;
SIMPLE_DECL	777:2	777:28	3	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	777:2	777:9	4	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	777:2	777:8	5	uint8 *
TYPE_NAME	777:2	777:2	6	uint8
LEAF_NODE	777:2	777:2	7	uint8
POINTER	777:8	777:8	6	*
LEAF_NODE	777:8	777:8	7	*
NAME	777:9	777:9	5	bufp
LEAF_NODE	777:9	777:9	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	777:9	777:9	5	bufp = ( uint8 * ) buf
ASSIGN	777:9	777:16	6	bufp = ( uint8 * ) buf
LVAL	777:9	777:9	7	bufp
NAME	777:9	777:9	8	bufp
LEAF_NODE	777:9	777:9	9	bufp
ASSIGN_OP	777:14	777:14	7	=
LEAF_NODE	777:14	777:14	8	=
RVAL	777:16	777:25	7	( uint8 * ) buf
LEAF_NODE	777:16	777:16	8	(
TYPE_NAME	777:17	777:17	8	uint8
LEAF_NODE	777:17	777:17	9	uint8
LEAF_NODE	777:22	777:22	8	*
LEAF_NODE	777:23	777:23	8	)
FIELD	777:25	777:25	8	buf
LEAF_NODE	777:25	777:25	9	buf
LEAF_NODE	777:28	777:28	4	;
SIMPLE_DECL	778:2	778:27	3	unsigned char * src ; src = NULL ;
VAR_DECL	778:2	778:17	4	unsigned char * src ; src = NULL
TYPE	778:2	778:16	5	unsigned char *
TYPE_NAME	778:2	778:11	6	unsigned char
LEAF_NODE	778:2	778:2	7	unsigned
LEAF_NODE	778:11	778:11	7	char
POINTER	778:16	778:16	6	*
LEAF_NODE	778:16	778:16	7	*
NAME	778:17	778:17	5	src
LEAF_NODE	778:17	778:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	778:17	778:17	5	src = NULL
ASSIGN	778:17	778:23	6	src = NULL
LVAL	778:17	778:17	7	src
NAME	778:17	778:17	8	src
LEAF_NODE	778:17	778:17	9	src
ASSIGN_OP	778:21	778:21	7	=
LEAF_NODE	778:21	778:21	8	=
RVAL	778:23	778:23	7	NULL
FIELD	778:23	778:23	8	NULL
LEAF_NODE	778:23	778:23	9	NULL
LEAF_NODE	778:27	778:27	4	;
SIMPLE_DECL	779:2	779:27	3	unsigned char * dst ; dst = NULL ;
VAR_DECL	779:2	779:17	4	unsigned char * dst ; dst = NULL
TYPE	779:2	779:16	5	unsigned char *
TYPE_NAME	779:2	779:11	6	unsigned char
LEAF_NODE	779:2	779:2	7	unsigned
LEAF_NODE	779:11	779:11	7	char
POINTER	779:16	779:16	6	*
LEAF_NODE	779:16	779:16	7	*
NAME	779:17	779:17	5	dst
LEAF_NODE	779:17	779:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	779:17	779:17	5	dst = NULL
ASSIGN	779:17	779:23	6	dst = NULL
LVAL	779:17	779:17	7	dst
NAME	779:17	779:17	8	dst
LEAF_NODE	779:17	779:17	9	dst
ASSIGN_OP	779:21	779:21	7	=
LEAF_NODE	779:21	779:21	8	=
RVAL	779:23	779:23	7	NULL
FIELD	779:23	779:23	8	NULL
LEAF_NODE	779:23	779:23	9	NULL
LEAF_NODE	779:27	779:27	4	;
SIMPLE_DECL	780:2	780:39	3	tsize_t tbytes ; tbytes = 0 , tsize_t tile_buffsize ; tile_buffsize = 0 ;
INIT_DECL_LIST	780:2	780:2	4	tsize_t tbytes ; tbytes = 0 , tsize_t tile_buffsize ; tile_buffsize = 0
VAR_DECL	780:2	780:10	5	tsize_t tbytes ; tbytes = 0
TYPE	780:2	780:2	6	tsize_t
TYPE_NAME	780:2	780:2	7	tsize_t
LEAF_NODE	780:2	780:2	8	tsize_t
NAME	780:10	780:10	6	tbytes
LEAF_NODE	780:10	780:10	7	tbytes
LEAF_NODE	0:0	0:0	6	;
INIT	780:10	780:10	6	tbytes = 0
ASSIGN	780:10	780:19	7	tbytes = 0
LVAL	780:10	780:10	8	tbytes
NAME	780:10	780:10	9	tbytes
LEAF_NODE	780:10	780:10	10	tbytes
ASSIGN_OP	780:17	780:17	8	=
LEAF_NODE	780:17	780:17	9	=
RVAL	780:19	780:19	8	0
FIELD	780:19	780:19	9	0
LEAF_NODE	780:19	780:19	10	0
LEAF_NODE	780:20	780:20	5	,
VAR_DECL	780:2	780:22	5	tsize_t tile_buffsize ; tile_buffsize = 0
TYPE	780:2	780:2	6	tsize_t
TYPE_NAME	780:2	780:2	7	tsize_t
LEAF_NODE	780:2	780:2	8	tsize_t
NAME	780:22	780:22	6	tile_buffsize
LEAF_NODE	780:22	780:22	7	tile_buffsize
LEAF_NODE	0:0	0:0	6	;
INIT	780:22	780:22	6	tile_buffsize = 0
ASSIGN	780:22	780:38	7	tile_buffsize = 0
LVAL	780:22	780:22	8	tile_buffsize
NAME	780:22	780:22	9	tile_buffsize
LEAF_NODE	780:22	780:22	10	tile_buffsize
ASSIGN_OP	780:36	780:36	8	=
LEAF_NODE	780:36	780:36	9	=
RVAL	780:38	780:38	8	0
FIELD	780:38	780:38	9	0
LEAF_NODE	780:38	780:38	10	0
LEAF_NODE	780:39	780:39	4	;
SIMPLE_DECL	781:2	781:37	3	tsize_t tilesize ; tilesize = TIFFTileSize ( in ) ;
VAR_DECL	781:2	781:10	4	tsize_t tilesize ; tilesize = TIFFTileSize ( in )
TYPE	781:2	781:2	5	tsize_t
TYPE_NAME	781:2	781:2	6	tsize_t
LEAF_NODE	781:2	781:2	7	tsize_t
NAME	781:10	781:10	5	tilesize
LEAF_NODE	781:10	781:10	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	781:10	781:10	5	tilesize = TIFFTileSize ( in )
ASSIGN	781:10	781:21	6	tilesize = TIFFTileSize ( in )
LVAL	781:10	781:10	7	tilesize
NAME	781:10	781:10	8	tilesize
LEAF_NODE	781:10	781:10	9	tilesize
ASSIGN_OP	781:19	781:19	7	=
LEAF_NODE	781:19	781:19	8	=
RVAL	781:21	781:21	7	TIFFTileSize ( in )
FUNCTION_CALL	781:21	781:36	8	TIFFTileSize ( in )
CALLEE	781:21	781:21	9	TIFFTileSize
LEAF_NODE	781:21	781:21	10	TIFFTileSize
LEAF_NODE	781:33	781:33	9	(
ARGUMENT	781:34	781:34	9	in
FIELD	781:34	781:34	10	in
LEAF_NODE	781:34	781:34	11	in
LEAF_NODE	781:36	781:36	9	)
LEAF_NODE	781:37	781:37	4	;
SIMPLE_DECL	782:2	782:31	3	unsigned char * tilebuf ; tilebuf = NULL ;
VAR_DECL	782:2	782:17	4	unsigned char * tilebuf ; tilebuf = NULL
TYPE	782:2	782:16	5	unsigned char *
TYPE_NAME	782:2	782:11	6	unsigned char
LEAF_NODE	782:2	782:2	7	unsigned
LEAF_NODE	782:11	782:11	7	char
POINTER	782:16	782:16	6	*
LEAF_NODE	782:16	782:16	7	*
NAME	782:17	782:17	5	tilebuf
LEAF_NODE	782:17	782:17	6	tilebuf
LEAF_NODE	0:0	0:0	5	;
INIT	782:17	782:17	5	tilebuf = NULL
ASSIGN	782:17	782:27	6	tilebuf = NULL
LVAL	782:17	782:17	7	tilebuf
NAME	782:17	782:17	8	tilebuf
LEAF_NODE	782:17	782:17	9	tilebuf
ASSIGN_OP	782:25	782:25	7	=
LEAF_NODE	782:25	782:25	8	=
RVAL	782:27	782:27	7	NULL
FIELD	782:27	782:27	8	NULL
LEAF_NODE	782:27	782:27	9	NULL
LEAF_NODE	782:31	782:31	4	;
EXPR_STATEMENT	784:2	784:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	784:2	784:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	784:2	784:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	784:2	784:2	6	bytes_per_sample
FIELD	784:2	784:2	7	bytes_per_sample
LEAF_NODE	784:2	784:2	8	bytes_per_sample
ASSIGN_OP	784:19	784:19	6	=
LEAF_NODE	784:19	784:19	7	=
RVAL	784:21	784:33	6	( bps + 7 ) / 8
LEAF_NODE	784:21	784:21	7	(
FIELD	784:22	784:22	7	bps
LEAF_NODE	784:22	784:22	8	bps
LEAF_NODE	784:26	784:26	7	+
FIELD	784:28	784:28	7	7
LEAF_NODE	784:28	784:28	8	7
LEAF_NODE	784:29	784:29	7	)
LEAF_NODE	784:31	784:31	7	/
FIELD	784:33	784:33	7	8
LEAF_NODE	784:33	784:33	8	8
LEAF_NODE	784:34	784:34	4	;
EXPR_STATEMENT	785:2	785:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	785:2	785:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	785:2	785:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	785:2	785:2	6	bytes_per_pixel
FIELD	785:2	785:2	7	bytes_per_pixel
LEAF_NODE	785:2	785:2	8	bytes_per_pixel
ASSIGN_OP	785:19	785:19	6	=
LEAF_NODE	785:19	785:19	7	=
RVAL	785:21	785:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	785:21	785:21	7	(
LEAF_NODE	785:22	785:22	7	(
FIELD	785:23	785:23	7	bps
LEAF_NODE	785:23	785:23	8	bps
LEAF_NODE	785:27	785:27	7	*
FIELD	785:29	785:29	7	spp
LEAF_NODE	785:29	785:29	8	spp
LEAF_NODE	785:32	785:32	7	)
LEAF_NODE	785:34	785:34	7	+
FIELD	785:36	785:36	7	7
LEAF_NODE	785:36	785:36	8	7
LEAF_NODE	785:37	785:37	7	)
LEAF_NODE	785:39	785:39	7	/
FIELD	785:41	785:41	7	8
LEAF_NODE	785:41	785:41	8	8
LEAF_NODE	785:42	785:42	4	;
SELECTION	787:2	788:4	3	
KEYWORD	787:2	787:2	4	if
LEAF_NODE	787:2	787:2	5	if
LEAF_NODE	787:5	787:5	4	(
CONDITION	787:6	787:6	4	( bps % 8 ) == 0
EXPR	787:6	787:19	5	( bps % 8 ) == 0
LEAF_NODE	787:6	787:6	6	(
FIELD	787:7	787:7	6	bps
LEAF_NODE	787:7	787:7	7	bps
LEAF_NODE	787:11	787:11	6	%
FIELD	787:13	787:13	6	8
LEAF_NODE	787:13	787:13	7	8
LEAF_NODE	787:14	787:14	6	)
EQ_OPERATOR	787:16	787:16	6	==
LEAF_NODE	787:16	787:16	7	==
FIELD	787:19	787:19	6	0
LEAF_NODE	787:19	787:19	7	0
LEAF_NODE	787:20	787:20	4	)
STATEMENTS	788:4	788:4	4	
EXPR_STATEMENT	788:4	788:19	5	shift_width = 0 ;
EXPR	788:4	788:4	6	shift_width = 0
ASSIGN	788:4	788:18	7	shift_width = 0
LVAL	788:4	788:4	8	shift_width
FIELD	788:4	788:4	9	shift_width
LEAF_NODE	788:4	788:4	10	shift_width
ASSIGN_OP	788:16	788:16	8	=
LEAF_NODE	788:16	788:16	9	=
RVAL	788:18	788:18	8	0
FIELD	788:18	788:18	9	0
LEAF_NODE	788:18	788:18	10	0
LEAF_NODE	788:19	788:19	6	;
SELECTION	789:2	790:4	3	
KEYWORD	789:2	789:2	4	else
LEAF_NODE	789:2	789:2	5	else
STATEMENTS	790:4	795:4	4	
LEAF_NODE	790:4	790:4	5	{
STATEMENTS	791:4	793:4	5	
SELECTION	791:4	792:6	6	
KEYWORD	791:4	791:4	7	if
LEAF_NODE	791:4	791:4	8	if
LEAF_NODE	791:7	791:7	7	(
CONDITION	791:8	791:8	7	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	791:8	791:47	8	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	791:8	791:8	9	bytes_per_pixel
LEAF_NODE	791:8	791:8	10	bytes_per_pixel
REL_OPERATOR	791:24	791:24	9	<
LEAF_NODE	791:24	791:24	10	<
LEAF_NODE	791:26	791:26	9	(
FIELD	791:27	791:27	9	bytes_per_sample
LEAF_NODE	791:27	791:27	10	bytes_per_sample
LEAF_NODE	791:44	791:44	9	+
FIELD	791:46	791:46	9	1
LEAF_NODE	791:46	791:46	10	1
LEAF_NODE	791:47	791:47	9	)
LEAF_NODE	791:48	791:48	7	)
STATEMENTS	792:6	792:6	7	
EXPR_STATEMENT	792:6	792:35	8	shift_width = bytes_per_pixel ;
EXPR	792:6	792:6	9	shift_width = bytes_per_pixel
ASSIGN	792:6	792:20	10	shift_width = bytes_per_pixel
LVAL	792:6	792:6	11	shift_width
FIELD	792:6	792:6	12	shift_width
LEAF_NODE	792:6	792:6	13	shift_width
ASSIGN_OP	792:18	792:18	11	=
LEAF_NODE	792:18	792:18	12	=
RVAL	792:20	792:20	11	bytes_per_pixel
FIELD	792:20	792:20	12	bytes_per_pixel
LEAF_NODE	792:20	792:20	13	bytes_per_pixel
LEAF_NODE	792:35	792:35	9	;
SELECTION	793:4	794:6	6	
KEYWORD	793:4	793:4	7	else
LEAF_NODE	793:4	793:4	8	else
STATEMENTS	794:6	794:6	7	
EXPR_STATEMENT	794:6	794:40	8	shift_width = bytes_per_sample + 1 ;
EXPR	794:6	794:6	9	shift_width = bytes_per_sample + 1
ASSIGN	794:6	794:20	10	shift_width = bytes_per_sample + 1
LVAL	794:6	794:6	11	shift_width
FIELD	794:6	794:6	12	shift_width
LEAF_NODE	794:6	794:6	13	shift_width
ASSIGN_OP	794:18	794:18	11	=
LEAF_NODE	794:18	794:18	12	=
RVAL	794:20	794:39	11	bytes_per_sample + 1
FIELD	794:20	794:20	12	bytes_per_sample
LEAF_NODE	794:20	794:20	13	bytes_per_sample
LEAF_NODE	794:37	794:37	12	+
FIELD	794:39	794:39	12	1
LEAF_NODE	794:39	794:39	13	1
LEAF_NODE	794:40	794:40	9	;
LEAF_NODE	795:4	795:4	5	}
EXPR_STATEMENT	797:2	797:26	3	tile_buffsize = tilesize ;
EXPR	797:2	797:2	4	tile_buffsize = tilesize
ASSIGN	797:2	797:18	5	tile_buffsize = tilesize
LVAL	797:2	797:2	6	tile_buffsize
FIELD	797:2	797:2	7	tile_buffsize
LEAF_NODE	797:2	797:2	8	tile_buffsize
ASSIGN_OP	797:16	797:16	6	=
LEAF_NODE	797:16	797:16	7	=
RVAL	797:18	797:18	6	tilesize
FIELD	797:18	797:18	7	tilesize
LEAF_NODE	797:18	797:18	8	tilesize
LEAF_NODE	797:26	797:26	4	;
SELECTION	798:2	799:2	3	
KEYWORD	798:2	798:2	4	if
LEAF_NODE	798:2	798:2	5	if
LEAF_NODE	798:5	798:5	4	(
CONDITION	798:6	798:6	4	tilesize == 0 || tile_rowsize == 0
EXPR	798:6	798:6	5	tilesize == 0 || tile_rowsize == 0
OR	798:6	798:23	6	tilesize == 0 || tile_rowsize == 0
EXPR	798:6	798:18	7	tilesize == 0
FIELD	798:6	798:6	8	tilesize
LEAF_NODE	798:6	798:6	9	tilesize
EQ_OPERATOR	798:15	798:15	8	==
LEAF_NODE	798:15	798:15	9	==
FIELD	798:18	798:18	8	0
LEAF_NODE	798:18	798:18	9	0
LEAF_NODE	798:20	798:20	7	||
EXPR	798:23	798:39	7	tile_rowsize == 0
FIELD	798:23	798:23	8	tile_rowsize
LEAF_NODE	798:23	798:23	9	tile_rowsize
EQ_OPERATOR	798:36	798:36	8	==
LEAF_NODE	798:36	798:36	9	==
FIELD	798:39	798:39	8	0
LEAF_NODE	798:39	798:39	9	0
LEAF_NODE	798:40	798:40	4	)
STATEMENTS	799:2	802:2	4	
LEAF_NODE	799:2	799:2	5	{
STATEMENTS	800:5	801:5	5	
EXPR_STATEMENT	800:5	800:80	6	TIFFError ( "readContigTilesIntoBuffer" , "Tile size or tile rowsize is zero" ) ;
EXPR	800:5	800:5	7	TIFFError ( "readContigTilesIntoBuffer" , "Tile size or tile rowsize is zero" )
FUNCTION_CALL	800:5	800:79	8	TIFFError ( "readContigTilesIntoBuffer" , "Tile size or tile rowsize is zero" )
CALLEE	800:5	800:5	9	TIFFError
LEAF_NODE	800:5	800:5	10	TIFFError
LEAF_NODE	800:14	800:14	9	(
ARGUMENT	800:15	800:15	9	"readContigTilesIntoBuffer"
FIELD	800:15	800:15	10	"readContigTilesIntoBuffer"
LEAF_NODE	800:15	800:15	11	"readContigTilesIntoBuffer"
LEAF_NODE	800:42	800:42	9	,
ARGUMENT	800:44	800:44	9	"Tile size or tile rowsize is zero"
FIELD	800:44	800:44	10	"Tile size or tile rowsize is zero"
LEAF_NODE	800:44	800:44	11	"Tile size or tile rowsize is zero"
LEAF_NODE	800:79	800:79	9	)
LEAF_NODE	800:80	800:80	7	;
EXPR_STATEMENT	801:5	801:13	6	exit ( - 1 ) ;
EXPR	801:5	801:5	7	exit ( - 1 )
FUNCTION_CALL	801:5	801:12	8	exit ( - 1 )
CALLEE	801:5	801:5	9	exit
LEAF_NODE	801:5	801:5	10	exit
LEAF_NODE	801:9	801:9	9	(
ARGUMENT	801:10	801:10	9	- 1
UNARY_EXPR	801:10	801:11	10	- 1
UNARY_OPERATOR	801:10	801:10	11	-
LEAF_NODE	801:10	801:10	12	-
FIELD	801:11	801:11	11	1
LEAF_NODE	801:11	801:11	12	1
LEAF_NODE	801:12	801:12	9	)
LEAF_NODE	801:13	801:13	7	;
LEAF_NODE	802:2	802:2	5	}
SELECTION	804:2	805:4	3	
KEYWORD	804:2	804:2	4	if
LEAF_NODE	804:2	804:2	5	if
LEAF_NODE	804:5	804:5	4	(
CONDITION	804:6	804:6	4	tilesize < ( tsize_t ) ( tl * tile_rowsize )
EXPR	804:6	804:44	5	tilesize < ( tsize_t ) ( tl * tile_rowsize )
FIELD	804:6	804:6	6	tilesize
LEAF_NODE	804:6	804:6	7	tilesize
REL_OPERATOR	804:15	804:15	6	<
LEAF_NODE	804:15	804:15	7	<
LEAF_NODE	804:17	804:17	6	(
TYPE_NAME	804:18	804:18	6	tsize_t
LEAF_NODE	804:18	804:18	7	tsize_t
LEAF_NODE	804:25	804:25	6	)
LEAF_NODE	804:26	804:26	6	(
FIELD	804:27	804:27	6	tl
LEAF_NODE	804:27	804:27	7	tl
LEAF_NODE	804:30	804:30	6	*
FIELD	804:32	804:32	6	tile_rowsize
LEAF_NODE	804:32	804:32	7	tile_rowsize
LEAF_NODE	804:44	804:44	6	)
LEAF_NODE	804:45	804:45	4	)
STATEMENTS	805:4	817:4	4	
LEAF_NODE	805:4	805:4	5	{
STATEMENTS	807:4	812:4	5	
EXPR_STATEMENT	807:4	809:42	6	TIFFError ( "readContigTilesIntoBuffer" , "Tilesize %lu is too small, using alternate calculation %u" , tilesize , tl * tile_rowsize ) ;
EXPR	807:4	807:4	7	TIFFError ( "readContigTilesIntoBuffer" , "Tilesize %lu is too small, using alternate calculation %u" , tilesize , tl * tile_rowsize )
FUNCTION_CALL	807:4	809:41	8	TIFFError ( "readContigTilesIntoBuffer" , "Tilesize %lu is too small, using alternate calculation %u" , tilesize , tl * tile_rowsize )
CALLEE	807:4	807:4	9	TIFFError
LEAF_NODE	807:4	807:4	10	TIFFError
LEAF_NODE	807:13	807:13	9	(
ARGUMENT	807:14	807:14	9	"readContigTilesIntoBuffer"
FIELD	807:14	807:14	10	"readContigTilesIntoBuffer"
LEAF_NODE	807:14	807:14	11	"readContigTilesIntoBuffer"
LEAF_NODE	807:41	807:41	9	,
ARGUMENT	808:7	808:7	9	"Tilesize %lu is too small, using alternate calculation %u"
FIELD	808:7	808:7	10	"Tilesize %lu is too small, using alternate calculation %u"
LEAF_NODE	808:7	808:7	11	"Tilesize %lu is too small, using alternate calculation %u"
LEAF_NODE	808:66	808:66	9	,
ARGUMENT	809:14	809:14	9	tilesize
FIELD	809:14	809:14	10	tilesize
LEAF_NODE	809:14	809:14	11	tilesize
LEAF_NODE	809:22	809:22	9	,
ARGUMENT	809:24	809:29	9	tl * tile_rowsize
FIELD	809:24	809:24	10	tl
LEAF_NODE	809:24	809:24	11	tl
LEAF_NODE	809:27	809:27	10	*
FIELD	809:29	809:29	10	tile_rowsize
LEAF_NODE	809:29	809:29	11	tile_rowsize
LEAF_NODE	809:41	809:41	9	)
LEAF_NODE	809:42	809:42	7	;
EXPR_STATEMENT	811:4	811:37	6	tile_buffsize = tl * tile_rowsize ;
EXPR	811:4	811:4	7	tile_buffsize = tl * tile_rowsize
ASSIGN	811:4	811:20	8	tile_buffsize = tl * tile_rowsize
LVAL	811:4	811:4	9	tile_buffsize
FIELD	811:4	811:4	10	tile_buffsize
LEAF_NODE	811:4	811:4	11	tile_buffsize
ASSIGN_OP	811:18	811:18	9	=
LEAF_NODE	811:18	811:18	10	=
RVAL	811:20	811:25	9	tl * tile_rowsize
FIELD	811:20	811:20	10	tl
LEAF_NODE	811:20	811:20	11	tl
LEAF_NODE	811:23	811:23	10	*
FIELD	811:25	811:25	10	tile_rowsize
LEAF_NODE	811:25	811:25	11	tile_rowsize
LEAF_NODE	811:37	811:37	7	;
SELECTION	812:4	813:4	6	
KEYWORD	812:4	812:4	7	if
LEAF_NODE	812:4	812:4	8	if
LEAF_NODE	812:7	812:7	7	(
CONDITION	812:8	812:8	7	tl != ( tile_buffsize / tile_rowsize )
EXPR	812:8	812:43	8	tl != ( tile_buffsize / tile_rowsize )
FIELD	812:8	812:8	9	tl
LEAF_NODE	812:8	812:8	10	tl
EQ_OPERATOR	812:11	812:11	9	!=
LEAF_NODE	812:11	812:11	10	!=
LEAF_NODE	812:14	812:14	9	(
FIELD	812:15	812:15	9	tile_buffsize
LEAF_NODE	812:15	812:15	10	tile_buffsize
LEAF_NODE	812:29	812:29	9	/
FIELD	812:31	812:31	9	tile_rowsize
LEAF_NODE	812:31	812:31	10	tile_rowsize
LEAF_NODE	812:43	812:43	9	)
LEAF_NODE	812:44	812:44	7	)
STATEMENTS	813:4	816:4	7	
LEAF_NODE	813:4	813:4	8	{
STATEMENTS	814:5	815:8	8	
EXPR_STATEMENT	814:5	814:93	9	TIFFError ( "readContigTilesIntoBuffer" , "Integer overflow when calculating buffer size." ) ;
EXPR	814:5	814:5	10	TIFFError ( "readContigTilesIntoBuffer" , "Integer overflow when calculating buffer size." )
FUNCTION_CALL	814:5	814:92	11	TIFFError ( "readContigTilesIntoBuffer" , "Integer overflow when calculating buffer size." )
CALLEE	814:5	814:5	12	TIFFError
LEAF_NODE	814:5	814:5	13	TIFFError
LEAF_NODE	814:14	814:14	12	(
ARGUMENT	814:15	814:15	12	"readContigTilesIntoBuffer"
FIELD	814:15	814:15	13	"readContigTilesIntoBuffer"
LEAF_NODE	814:15	814:15	14	"readContigTilesIntoBuffer"
LEAF_NODE	814:42	814:42	12	,
ARGUMENT	814:44	814:44	12	"Integer overflow when calculating buffer size."
FIELD	814:44	814:44	13	"Integer overflow when calculating buffer size."
LEAF_NODE	814:44	814:44	14	"Integer overflow when calculating buffer size."
LEAF_NODE	814:92	814:92	12	)
LEAF_NODE	814:93	814:93	10	;
EXPR_STATEMENT	815:8	815:16	9	exit ( - 1 ) ;
EXPR	815:8	815:8	10	exit ( - 1 )
FUNCTION_CALL	815:8	815:15	11	exit ( - 1 )
CALLEE	815:8	815:8	12	exit
LEAF_NODE	815:8	815:8	13	exit
LEAF_NODE	815:12	815:12	12	(
ARGUMENT	815:13	815:13	12	- 1
UNARY_EXPR	815:13	815:14	13	- 1
UNARY_OPERATOR	815:13	815:13	14	-
LEAF_NODE	815:13	815:13	15	-
FIELD	815:14	815:14	14	1
LEAF_NODE	815:14	815:14	15	1
LEAF_NODE	815:15	815:15	12	)
LEAF_NODE	815:16	815:16	10	;
LEAF_NODE	816:4	816:4	8	}
LEAF_NODE	817:4	817:4	5	}
SELECTION	820:2	821:2	3	
KEYWORD	820:2	820:2	4	if
LEAF_NODE	820:2	820:2	5	if
LEAF_NODE	820:4	820:4	4	(
CONDITION	820:6	820:6	4	( size_t ) tile_buffsize > 0xFFFFFFFFU - 3U
EXPR	820:6	820:45	5	( size_t ) tile_buffsize > 0xFFFFFFFFU - 3U
LEAF_NODE	820:6	820:6	6	(
TYPE_NAME	820:7	820:7	6	size_t
LEAF_NODE	820:7	820:7	7	size_t
LEAF_NODE	820:13	820:13	6	)
FIELD	820:15	820:15	6	tile_buffsize
LEAF_NODE	820:15	820:15	7	tile_buffsize
REL_OPERATOR	820:29	820:29	6	>
LEAF_NODE	820:29	820:29	7	>
FIELD	820:31	820:31	6	0xFFFFFFFFU
LEAF_NODE	820:31	820:31	7	0xFFFFFFFFU
LEAF_NODE	820:43	820:43	6	-
FIELD	820:45	820:45	6	3U
LEAF_NODE	820:45	820:45	7	3U
LEAF_NODE	820:48	820:48	4	)
STATEMENTS	821:2	824:2	4	
LEAF_NODE	821:2	821:2	5	{
STATEMENTS	822:6	823:6	5	
EXPR_STATEMENT	822:6	822:94	6	TIFFError ( "readContigTilesIntoBuffer" , "Integer overflow when calculating buffer size." ) ;
EXPR	822:6	822:6	7	TIFFError ( "readContigTilesIntoBuffer" , "Integer overflow when calculating buffer size." )
FUNCTION_CALL	822:6	822:93	8	TIFFError ( "readContigTilesIntoBuffer" , "Integer overflow when calculating buffer size." )
CALLEE	822:6	822:6	9	TIFFError
LEAF_NODE	822:6	822:6	10	TIFFError
LEAF_NODE	822:15	822:15	9	(
ARGUMENT	822:16	822:16	9	"readContigTilesIntoBuffer"
FIELD	822:16	822:16	10	"readContigTilesIntoBuffer"
LEAF_NODE	822:16	822:16	11	"readContigTilesIntoBuffer"
LEAF_NODE	822:43	822:43	9	,
ARGUMENT	822:45	822:45	9	"Integer overflow when calculating buffer size."
FIELD	822:45	822:45	10	"Integer overflow when calculating buffer size."
LEAF_NODE	822:45	822:45	11	"Integer overflow when calculating buffer size."
LEAF_NODE	822:93	822:93	9	)
LEAF_NODE	822:94	822:94	7	;
EXPR_STATEMENT	823:6	823:14	6	exit ( - 1 ) ;
EXPR	823:6	823:6	7	exit ( - 1 )
FUNCTION_CALL	823:6	823:13	8	exit ( - 1 )
CALLEE	823:6	823:6	9	exit
LEAF_NODE	823:6	823:6	10	exit
LEAF_NODE	823:10	823:10	9	(
ARGUMENT	823:11	823:11	9	- 1
UNARY_EXPR	823:11	823:12	10	- 1
UNARY_OPERATOR	823:11	823:11	11	-
LEAF_NODE	823:11	823:11	12	-
FIELD	823:12	823:12	11	1
LEAF_NODE	823:12	823:12	12	1
LEAF_NODE	823:13	823:13	9	)
LEAF_NODE	823:14	823:14	7	;
LEAF_NODE	824:2	824:2	5	}
EXPR_STATEMENT	825:2	825:42	3	tilebuf = _TIFFmalloc ( tile_buffsize + 3 ) ;
EXPR	825:2	825:2	4	tilebuf = _TIFFmalloc ( tile_buffsize + 3 )
ASSIGN	825:2	825:12	5	tilebuf = _TIFFmalloc ( tile_buffsize + 3 )
LVAL	825:2	825:2	6	tilebuf
FIELD	825:2	825:2	7	tilebuf
LEAF_NODE	825:2	825:2	8	tilebuf
ASSIGN_OP	825:10	825:10	6	=
LEAF_NODE	825:10	825:10	7	=
RVAL	825:12	825:12	6	_TIFFmalloc ( tile_buffsize + 3 )
FUNCTION_CALL	825:12	825:41	7	_TIFFmalloc ( tile_buffsize + 3 )
CALLEE	825:12	825:12	8	_TIFFmalloc
LEAF_NODE	825:12	825:12	9	_TIFFmalloc
LEAF_NODE	825:23	825:23	8	(
ARGUMENT	825:24	825:40	8	tile_buffsize + 3
FIELD	825:24	825:24	9	tile_buffsize
LEAF_NODE	825:24	825:24	10	tile_buffsize
LEAF_NODE	825:38	825:38	9	+
FIELD	825:40	825:40	9	3
LEAF_NODE	825:40	825:40	10	3
LEAF_NODE	825:41	825:41	8	)
LEAF_NODE	825:42	825:42	4	;
SELECTION	826:2	827:4	3	
KEYWORD	826:2	826:2	4	if
LEAF_NODE	826:2	826:2	5	if
LEAF_NODE	826:5	826:5	4	(
CONDITION	826:6	826:6	4	tilebuf == 0
EXPR	826:6	826:17	5	tilebuf == 0
FIELD	826:6	826:6	6	tilebuf
LEAF_NODE	826:6	826:6	7	tilebuf
EQ_OPERATOR	826:14	826:14	6	==
LEAF_NODE	826:14	826:14	7	==
FIELD	826:17	826:17	6	0
LEAF_NODE	826:17	826:17	7	0
LEAF_NODE	826:18	826:18	4	)
STATEMENTS	827:4	827:4	4	
JUMP_STATEMENT	827:4	827:12	5	return 0 ;
KEYWORD	827:4	827:4	6	return
LEAF_NODE	827:4	827:4	7	return
DESTINATION	827:11	827:11	6	0
EXPR	827:11	827:11	7	0
FIELD	827:11	827:11	8	0
LEAF_NODE	827:11	827:11	9	0
LEAF_NODE	827:12	827:12	6	;
EXPR_STATEMENT	828:2	828:28	3	tilebuf [ tile_buffsize ] = 0 ;
EXPR	828:2	828:2	4	tilebuf [ tile_buffsize ] = 0
ASSIGN	828:2	828:27	5	tilebuf [ tile_buffsize ] = 0
LVAL	828:2	828:2	6	tilebuf [ tile_buffsize ]
FIELD	828:2	828:23	7	tilebuf [ tile_buffsize ]
LEAF_NODE	828:2	828:2	8	tilebuf
LEAF_NODE	828:9	828:9	8	[
EXPR	828:10	828:10	8	tile_buffsize
FIELD	828:10	828:10	9	tile_buffsize
LEAF_NODE	828:10	828:10	10	tile_buffsize
LEAF_NODE	828:23	828:23	8	]
ASSIGN_OP	828:25	828:25	6	=
LEAF_NODE	828:25	828:25	7	=
RVAL	828:27	828:27	6	0
FIELD	828:27	828:27	7	0
LEAF_NODE	828:27	828:27	8	0
LEAF_NODE	828:28	828:28	4	;
EXPR_STATEMENT	829:2	829:30	3	tilebuf [ tile_buffsize + 1 ] = 0 ;
EXPR	829:2	829:2	4	tilebuf [ tile_buffsize + 1 ] = 0
ASSIGN	829:2	829:29	5	tilebuf [ tile_buffsize + 1 ] = 0
LVAL	829:2	829:2	6	tilebuf [ tile_buffsize + 1 ]
FIELD	829:2	829:25	7	tilebuf [ tile_buffsize + 1 ]
LEAF_NODE	829:2	829:2	8	tilebuf
LEAF_NODE	829:9	829:9	8	[
EXPR	829:10	829:24	8	tile_buffsize + 1
FIELD	829:10	829:10	9	tile_buffsize
LEAF_NODE	829:10	829:10	10	tile_buffsize
LEAF_NODE	829:23	829:23	9	+
FIELD	829:24	829:24	9	1
LEAF_NODE	829:24	829:24	10	1
LEAF_NODE	829:25	829:25	8	]
ASSIGN_OP	829:27	829:27	6	=
LEAF_NODE	829:27	829:27	7	=
RVAL	829:29	829:29	6	0
FIELD	829:29	829:29	7	0
LEAF_NODE	829:29	829:29	8	0
LEAF_NODE	829:30	829:30	4	;
EXPR_STATEMENT	830:2	830:30	3	tilebuf [ tile_buffsize + 2 ] = 0 ;
EXPR	830:2	830:2	4	tilebuf [ tile_buffsize + 2 ] = 0
ASSIGN	830:2	830:29	5	tilebuf [ tile_buffsize + 2 ] = 0
LVAL	830:2	830:2	6	tilebuf [ tile_buffsize + 2 ]
FIELD	830:2	830:25	7	tilebuf [ tile_buffsize + 2 ]
LEAF_NODE	830:2	830:2	8	tilebuf
LEAF_NODE	830:9	830:9	8	[
EXPR	830:10	830:24	8	tile_buffsize + 2
FIELD	830:10	830:10	9	tile_buffsize
LEAF_NODE	830:10	830:10	10	tile_buffsize
LEAF_NODE	830:23	830:23	9	+
FIELD	830:24	830:24	9	2
LEAF_NODE	830:24	830:24	10	2
LEAF_NODE	830:25	830:25	8	]
ASSIGN_OP	830:27	830:27	6	=
LEAF_NODE	830:27	830:27	7	=
RVAL	830:29	830:29	6	0
FIELD	830:29	830:29	7	0
LEAF_NODE	830:29	830:29	8	0
LEAF_NODE	830:30	830:30	4	;
LEAF_NODE	832:2	832:2	3	dst_rowsize
LEAF_NODE	832:14	832:14	3	=
LEAF_NODE	832:16	832:16	3	(
LEAF_NODE	832:17	832:17	3	(
LEAF_NODE	832:18	832:18	3	imagewidth
LEAF_NODE	832:29	832:29	3	*
LEAF_NODE	832:31	832:31	3	bps
LEAF_NODE	832:35	832:35	3	*
LEAF_NODE	832:37	832:37	3	spp
LEAF_NODE	832:40	832:40	3	)
LEAF_NODE	832:42	832:42	3	+
LEAF_NODE	832:44	832:44	3	7
LEAF_NODE	832:45	832:45	3	)
LEAF_NODE	832:47	832:47	3	/
EXPR_STATEMENT	832:49	832:50	3	8 ;
EXPR	832:49	832:49	4	8
FIELD	832:49	832:49	5	8
LEAF_NODE	832:49	832:49	6	8
LEAF_NODE	832:50	832:50	4	;
ITERATION	833:2	834:4	3	
KEYWORD	833:2	833:2	4	for
LEAF_NODE	833:2	833:2	5	for
LEAF_NODE	833:6	833:6	4	(
FOR_INIT	833:7	833:14	4	row = 0 ;
EXPR	833:7	833:7	5	row = 0
ASSIGN	833:7	833:13	6	row = 0
LVAL	833:7	833:7	7	row
FIELD	833:7	833:7	8	row
LEAF_NODE	833:7	833:7	9	row
ASSIGN_OP	833:11	833:11	7	=
LEAF_NODE	833:11	833:11	8	=
RVAL	833:13	833:13	7	0
FIELD	833:13	833:13	8	0
LEAF_NODE	833:13	833:13	9	0
LEAF_NODE	833:14	833:14	5	;
CONDITION	833:16	833:16	4	row < imagelength
EXPR	833:16	833:22	5	row < imagelength
FIELD	833:16	833:16	6	row
LEAF_NODE	833:16	833:16	7	row
REL_OPERATOR	833:20	833:20	6	<
LEAF_NODE	833:20	833:20	7	<
FIELD	833:22	833:22	6	imagelength
LEAF_NODE	833:22	833:22	7	imagelength
LEAF_NODE	833:33	833:33	4	;
FOR_EXPR	833:35	833:35	4	row += tl
EXPR	833:35	833:35	5	row += tl
ASSIGN	833:35	833:42	6	row += tl
LVAL	833:35	833:35	7	row
FIELD	833:35	833:35	8	row
LEAF_NODE	833:35	833:35	9	row
ASSIGN_OP	833:39	833:39	7	+=
LEAF_NODE	833:39	833:39	8	+=
RVAL	833:42	833:42	7	tl
FIELD	833:42	833:42	8	tl
LEAF_NODE	833:42	833:42	9	tl
LEAF_NODE	833:44	833:44	4	)
STATEMENTS	834:4	961:4	4	
LEAF_NODE	834:4	834:4	5	{
STATEMENTS	835:4	836:4	5	
EXPR_STATEMENT	835:4	835:60	6	nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
EXPR	835:4	835:4	7	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	835:4	835:11	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	835:4	835:4	9	nrow
FIELD	835:4	835:4	10	nrow
LEAF_NODE	835:4	835:4	11	nrow
ASSIGN_OP	835:9	835:9	9	=
LEAF_NODE	835:9	835:9	10	=
RVAL	835:11	835:11	9	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	835:11	835:58	10	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	835:11	835:34	11	( row + tl > imagelength )
LEAF_NODE	835:11	835:11	12	(
FIELD	835:12	835:12	12	row
LEAF_NODE	835:12	835:12	13	row
LEAF_NODE	835:16	835:16	12	+
FIELD	835:18	835:18	12	tl
LEAF_NODE	835:18	835:18	13	tl
REL_OPERATOR	835:21	835:21	12	>
LEAF_NODE	835:21	835:21	13	>
FIELD	835:23	835:23	12	imagelength
LEAF_NODE	835:23	835:23	13	imagelength
LEAF_NODE	835:34	835:34	12	)
LEAF_NODE	835:36	835:36	11	?
EXPR	835:38	835:52	11	imagelength - row
FIELD	835:38	835:38	12	imagelength
LEAF_NODE	835:38	835:38	13	imagelength
LEAF_NODE	835:50	835:50	12	-
FIELD	835:52	835:52	12	row
LEAF_NODE	835:52	835:52	13	row
LEAF_NODE	835:56	835:56	11	:
FIELD	835:58	835:58	11	tl
LEAF_NODE	835:58	835:58	12	tl
LEAF_NODE	835:60	835:60	7	;
ITERATION	836:4	837:6	6	
KEYWORD	836:4	836:4	7	for
LEAF_NODE	836:4	836:4	8	for
LEAF_NODE	836:8	836:8	7	(
FOR_INIT	836:9	836:16	7	col = 0 ;
EXPR	836:9	836:9	8	col = 0
ASSIGN	836:9	836:15	9	col = 0
LVAL	836:9	836:9	10	col
FIELD	836:9	836:9	11	col
LEAF_NODE	836:9	836:9	12	col
ASSIGN_OP	836:13	836:13	10	=
LEAF_NODE	836:13	836:13	11	=
RVAL	836:15	836:15	10	0
FIELD	836:15	836:15	11	0
LEAF_NODE	836:15	836:15	12	0
LEAF_NODE	836:16	836:16	8	;
CONDITION	836:18	836:18	7	col < imagewidth
EXPR	836:18	836:24	8	col < imagewidth
FIELD	836:18	836:18	9	col
LEAF_NODE	836:18	836:18	10	col
REL_OPERATOR	836:22	836:22	9	<
LEAF_NODE	836:22	836:22	10	<
FIELD	836:24	836:24	9	imagewidth
LEAF_NODE	836:24	836:24	10	imagewidth
LEAF_NODE	836:34	836:34	7	;
FOR_EXPR	836:36	836:36	7	col += tw
EXPR	836:36	836:36	8	col += tw
ASSIGN	836:36	836:43	9	col += tw
LVAL	836:36	836:36	10	col
FIELD	836:36	836:36	11	col
LEAF_NODE	836:36	836:36	12	col
ASSIGN_OP	836:40	836:40	10	+=
LEAF_NODE	836:40	836:40	11	+=
RVAL	836:43	836:43	10	tw
FIELD	836:43	836:43	11	tw
LEAF_NODE	836:43	836:43	12	tw
LEAF_NODE	836:45	836:45	7	)
STATEMENTS	837:6	960:6	7	
LEAF_NODE	837:6	837:6	8	{
STATEMENTS	838:6	874:6	8	
EXPR_STATEMENT	838:6	838:56	9	tbytes = TIFFReadTile ( in , tilebuf , col , row , 0 , 0 ) ;
EXPR	838:6	838:6	10	tbytes = TIFFReadTile ( in , tilebuf , col , row , 0 , 0 )
ASSIGN	838:6	838:15	11	tbytes = TIFFReadTile ( in , tilebuf , col , row , 0 , 0 )
LVAL	838:6	838:6	12	tbytes
FIELD	838:6	838:6	13	tbytes
LEAF_NODE	838:6	838:6	14	tbytes
ASSIGN_OP	838:13	838:13	12	=
LEAF_NODE	838:13	838:13	13	=
RVAL	838:15	838:15	12	TIFFReadTile ( in , tilebuf , col , row , 0 , 0 )
FUNCTION_CALL	838:15	838:55	13	TIFFReadTile ( in , tilebuf , col , row , 0 , 0 )
CALLEE	838:15	838:15	14	TIFFReadTile
LEAF_NODE	838:15	838:15	15	TIFFReadTile
LEAF_NODE	838:27	838:27	14	(
ARGUMENT	838:28	838:28	14	in
FIELD	838:28	838:28	15	in
LEAF_NODE	838:28	838:28	16	in
LEAF_NODE	838:30	838:30	14	,
ARGUMENT	838:32	838:32	14	tilebuf
FIELD	838:32	838:32	15	tilebuf
LEAF_NODE	838:32	838:32	16	tilebuf
LEAF_NODE	838:39	838:39	14	,
ARGUMENT	838:41	838:41	14	col
FIELD	838:41	838:41	15	col
LEAF_NODE	838:41	838:41	16	col
LEAF_NODE	838:44	838:44	14	,
ARGUMENT	838:46	838:46	14	row
FIELD	838:46	838:46	15	row
LEAF_NODE	838:46	838:46	16	row
LEAF_NODE	838:49	838:49	14	,
ARGUMENT	838:51	838:51	14	0
FIELD	838:51	838:51	15	0
LEAF_NODE	838:51	838:51	16	0
LEAF_NODE	838:52	838:52	14	,
ARGUMENT	838:54	838:54	14	0
FIELD	838:54	838:54	15	0
LEAF_NODE	838:54	838:54	16	0
LEAF_NODE	838:55	838:55	14	)
LEAF_NODE	838:56	838:56	10	;
SELECTION	839:6	840:8	9	
KEYWORD	839:6	839:6	10	if
LEAF_NODE	839:6	839:6	11	if
LEAF_NODE	839:9	839:9	10	(
CONDITION	839:10	839:10	10	tbytes < tilesize && ! ignore
EXPR	839:10	839:10	11	tbytes < tilesize && ! ignore
AND	839:10	839:32	12	tbytes < tilesize && ! ignore
EXPR	839:10	839:19	13	tbytes < tilesize
FIELD	839:10	839:10	14	tbytes
LEAF_NODE	839:10	839:10	15	tbytes
REL_OPERATOR	839:17	839:17	14	<
LEAF_NODE	839:17	839:17	15	<
FIELD	839:19	839:19	14	tilesize
LEAF_NODE	839:19	839:19	15	tilesize
LEAF_NODE	839:29	839:29	13	&&
EXPR	839:32	839:32	13	! ignore
UNARY_EXPR	839:32	839:33	14	! ignore
UNARY_OPERATOR	839:32	839:32	15	!
LEAF_NODE	839:32	839:32	16	!
FIELD	839:33	839:33	15	ignore
LEAF_NODE	839:33	839:33	16	ignore
LEAF_NODE	839:39	839:39	10	)
STATEMENTS	840:8	848:1	10	
LEAF_NODE	840:8	840:8	11	{
STATEMENTS	841:1	847:4	11	
EXPR_STATEMENT	841:1	844:42	12	TIFFError ( TIFFFileName ( in ) , "Error, can't read tile at row %lu col %lu, Read %lu bytes of %lu" , ( unsigned long ) col , ( unsigned long ) row , ( unsigned long ) tbytes , ( unsigned long ) tilesize ) ;
EXPR	841:1	841:1	13	TIFFError ( TIFFFileName ( in ) , "Error, can't read tile at row %lu col %lu, Read %lu bytes of %lu" , ( unsigned long ) col , ( unsigned long ) row , ( unsigned long ) tbytes , ( unsigned long ) tilesize )
FUNCTION_CALL	841:1	844:41	14	TIFFError ( TIFFFileName ( in ) , "Error, can't read tile at row %lu col %lu, Read %lu bytes of %lu" , ( unsigned long ) col , ( unsigned long ) row , ( unsigned long ) tbytes , ( unsigned long ) tilesize )
CALLEE	841:1	841:1	15	TIFFError
LEAF_NODE	841:1	841:1	16	TIFFError
LEAF_NODE	841:10	841:10	15	(
ARGUMENT	841:11	841:11	15	TIFFFileName ( in )
FUNCTION_CALL	841:11	841:26	16	TIFFFileName ( in )
CALLEE	841:11	841:11	17	TIFFFileName
LEAF_NODE	841:11	841:11	18	TIFFFileName
LEAF_NODE	841:23	841:23	17	(
ARGUMENT	841:24	841:24	17	in
FIELD	841:24	841:24	18	in
LEAF_NODE	841:24	841:24	19	in
LEAF_NODE	841:26	841:26	17	)
LEAF_NODE	841:27	841:27	15	,
ARGUMENT	842:4	842:4	15	"Error, can't read tile at row %lu col %lu, Read %lu bytes of %lu"
FIELD	842:4	842:4	16	"Error, can't read tile at row %lu col %lu, Read %lu bytes of %lu"
LEAF_NODE	842:4	842:4	17	"Error, can't read tile at row %lu col %lu, Read %lu bytes of %lu"
LEAF_NODE	842:70	842:70	15	,
ARGUMENT	843:4	843:20	15	( unsigned long ) col
LEAF_NODE	843:4	843:4	16	(
TYPE_NAME	843:5	843:14	16	unsigned long
LEAF_NODE	843:5	843:5	17	unsigned
LEAF_NODE	843:14	843:14	17	long
LEAF_NODE	843:18	843:18	16	)
FIELD	843:20	843:20	16	col
LEAF_NODE	843:20	843:20	17	col
LEAF_NODE	843:23	843:23	15	,
ARGUMENT	843:25	843:41	15	( unsigned long ) row
LEAF_NODE	843:25	843:25	16	(
TYPE_NAME	843:26	843:35	16	unsigned long
LEAF_NODE	843:26	843:26	17	unsigned
LEAF_NODE	843:35	843:35	17	long
LEAF_NODE	843:39	843:39	16	)
FIELD	843:41	843:41	16	row
LEAF_NODE	843:41	843:41	17	row
LEAF_NODE	843:44	843:44	15	,
ARGUMENT	843:46	843:61	15	( unsigned long ) tbytes
LEAF_NODE	843:46	843:46	16	(
TYPE_NAME	843:47	843:56	16	unsigned long
LEAF_NODE	843:47	843:47	17	unsigned
LEAF_NODE	843:56	843:56	17	long
LEAF_NODE	843:60	843:60	16	)
FIELD	843:61	843:61	16	tbytes
LEAF_NODE	843:61	843:61	17	tbytes
LEAF_NODE	843:67	843:67	15	,
ARGUMENT	844:18	844:33	15	( unsigned long ) tilesize
LEAF_NODE	844:18	844:18	16	(
TYPE_NAME	844:19	844:28	16	unsigned long
LEAF_NODE	844:19	844:19	17	unsigned
LEAF_NODE	844:28	844:28	17	long
LEAF_NODE	844:32	844:32	16	)
FIELD	844:33	844:33	16	tilesize
LEAF_NODE	844:33	844:33	17	tilesize
LEAF_NODE	844:41	844:41	15	)
LEAF_NODE	844:42	844:42	13	;
EXPR_STATEMENT	845:4	845:14	12	status = 0 ;
EXPR	845:4	845:4	13	status = 0
ASSIGN	845:4	845:13	14	status = 0
LVAL	845:4	845:4	15	status
FIELD	845:4	845:4	16	status
LEAF_NODE	845:4	845:4	17	status
ASSIGN_OP	845:11	845:11	15	=
LEAF_NODE	845:11	845:11	16	=
RVAL	845:13	845:13	15	0
FIELD	845:13	845:13	16	0
LEAF_NODE	845:13	845:13	17	0
LEAF_NODE	845:14	845:14	13	;
EXPR_STATEMENT	846:18	846:36	12	_TIFFfree ( tilebuf ) ;
EXPR	846:18	846:18	13	_TIFFfree ( tilebuf )
FUNCTION_CALL	846:18	846:35	14	_TIFFfree ( tilebuf )
CALLEE	846:18	846:18	15	_TIFFfree
LEAF_NODE	846:18	846:18	16	_TIFFfree
LEAF_NODE	846:27	846:27	15	(
ARGUMENT	846:28	846:28	15	tilebuf
FIELD	846:28	846:28	16	tilebuf
LEAF_NODE	846:28	846:28	17	tilebuf
LEAF_NODE	846:35	846:35	15	)
LEAF_NODE	846:36	846:36	13	;
JUMP_STATEMENT	847:4	847:17	12	return status ;
KEYWORD	847:4	847:4	13	return
LEAF_NODE	847:4	847:4	14	return
DESTINATION	847:11	847:11	13	status
EXPR	847:11	847:11	14	status
FIELD	847:11	847:11	15	status
LEAF_NODE	847:11	847:11	16	status
LEAF_NODE	847:17	847:17	13	;
LEAF_NODE	848:1	848:1	11	}
EXPR_STATEMENT	850:6	850:36	9	row_offset = row * dst_rowsize ;
EXPR	850:6	850:6	10	row_offset = row * dst_rowsize
ASSIGN	850:6	850:19	11	row_offset = row * dst_rowsize
LVAL	850:6	850:6	12	row_offset
FIELD	850:6	850:6	13	row_offset
LEAF_NODE	850:6	850:6	14	row_offset
ASSIGN_OP	850:17	850:17	12	=
LEAF_NODE	850:17	850:17	13	=
RVAL	850:19	850:25	12	row * dst_rowsize
FIELD	850:19	850:19	13	row
LEAF_NODE	850:19	850:19	14	row
LEAF_NODE	850:23	850:23	13	*
FIELD	850:25	850:25	13	dst_rowsize
LEAF_NODE	850:25	850:25	14	dst_rowsize
LEAF_NODE	850:36	850:36	10	;
LEAF_NODE	851:6	851:6	9	col_offset
LEAF_NODE	851:17	851:17	9	=
LEAF_NODE	851:19	851:19	9	(
LEAF_NODE	851:20	851:20	9	(
LEAF_NODE	851:21	851:21	9	col
LEAF_NODE	851:25	851:25	9	*
LEAF_NODE	851:27	851:27	9	bps
LEAF_NODE	851:31	851:31	9	*
LEAF_NODE	851:33	851:33	9	spp
LEAF_NODE	851:36	851:36	9	)
LEAF_NODE	851:38	851:38	9	+
LEAF_NODE	851:40	851:40	9	7
LEAF_NODE	851:41	851:41	9	)
LEAF_NODE	851:42	851:42	9	/
EXPR_STATEMENT	851:44	851:45	9	8 ;
EXPR	851:44	851:44	10	8
FIELD	851:44	851:44	11	8
LEAF_NODE	851:44	851:44	12	8
LEAF_NODE	851:45	851:45	10	;
EXPR_STATEMENT	852:6	852:42	9	bufp = buf + row_offset + col_offset ;
EXPR	852:6	852:6	10	bufp = buf + row_offset + col_offset
ASSIGN	852:6	852:13	11	bufp = buf + row_offset + col_offset
LVAL	852:6	852:6	12	bufp
FIELD	852:6	852:6	13	bufp
LEAF_NODE	852:6	852:6	14	bufp
ASSIGN_OP	852:11	852:11	12	=
LEAF_NODE	852:11	852:11	13	=
RVAL	852:13	852:32	12	buf + row_offset + col_offset
FIELD	852:13	852:13	13	buf
LEAF_NODE	852:13	852:13	14	buf
LEAF_NODE	852:17	852:17	13	+
FIELD	852:19	852:19	13	row_offset
LEAF_NODE	852:19	852:19	14	row_offset
LEAF_NODE	852:30	852:30	13	+
FIELD	852:32	852:32	13	col_offset
LEAF_NODE	852:32	852:32	14	col_offset
LEAF_NODE	852:42	852:42	10	;
SELECTION	854:6	855:1	9	
KEYWORD	854:6	854:6	10	if
LEAF_NODE	854:6	854:6	11	if
LEAF_NODE	854:9	854:9	10	(
CONDITION	854:10	854:10	10	col + tw > imagewidth
EXPR	854:10	854:21	11	col + tw > imagewidth
FIELD	854:10	854:10	12	col
LEAF_NODE	854:10	854:10	13	col
LEAF_NODE	854:14	854:14	12	+
FIELD	854:16	854:16	12	tw
LEAF_NODE	854:16	854:16	13	tw
REL_OPERATOR	854:19	854:19	12	>
LEAF_NODE	854:19	854:19	13	>
FIELD	854:21	854:21	12	imagewidth
LEAF_NODE	854:21	854:21	13	imagewidth
LEAF_NODE	854:31	854:31	10	)
STATEMENTS	855:1	855:1	10	
EXPR_STATEMENT	855:1	855:24	11	ncol = imagewidth - col ;
EXPR	855:1	855:1	12	ncol = imagewidth - col
ASSIGN	855:1	855:8	13	ncol = imagewidth - col
LVAL	855:1	855:1	14	ncol
FIELD	855:1	855:1	15	ncol
LEAF_NODE	855:1	855:1	16	ncol
ASSIGN_OP	855:6	855:6	14	=
LEAF_NODE	855:6	855:6	15	=
RVAL	855:8	855:21	14	imagewidth - col
FIELD	855:8	855:8	15	imagewidth
LEAF_NODE	855:8	855:8	16	imagewidth
LEAF_NODE	855:19	855:19	15	-
FIELD	855:21	855:21	15	col
LEAF_NODE	855:21	855:21	16	col
LEAF_NODE	855:24	855:24	12	;
SELECTION	856:6	857:8	9	
KEYWORD	856:6	856:6	10	else
LEAF_NODE	856:6	856:6	11	else
STATEMENTS	857:8	857:8	10	
EXPR_STATEMENT	857:8	857:17	11	ncol = tw ;
EXPR	857:8	857:8	12	ncol = tw
ASSIGN	857:8	857:15	13	ncol = tw
LVAL	857:8	857:8	14	ncol
FIELD	857:8	857:8	15	ncol
LEAF_NODE	857:8	857:8	16	ncol
ASSIGN_OP	857:13	857:13	14	=
LEAF_NODE	857:13	857:13	15	=
RVAL	857:15	857:15	14	tw
FIELD	857:15	857:15	15	tw
LEAF_NODE	857:15	857:15	16	tw
LEAF_NODE	857:17	857:17	12	;
SELECTION	865:6	866:8	9	
KEYWORD	865:6	865:6	10	if
LEAF_NODE	865:6	865:6	11	if
LEAF_NODE	865:9	865:9	10	(
CONDITION	865:10	865:10	10	( ( bps % 8 ) == 0 ) && ( count == spp )
EXPR	865:10	865:10	11	( ( bps % 8 ) == 0 ) && ( count == spp )
AND	865:10	865:30	12	( ( bps % 8 ) == 0 ) && ( count == spp )
EXPR	865:10	865:25	13	( ( bps % 8 ) == 0 )
LEAF_NODE	865:10	865:10	14	(
LEAF_NODE	865:11	865:11	14	(
FIELD	865:12	865:12	14	bps
LEAF_NODE	865:12	865:12	15	bps
LEAF_NODE	865:16	865:16	14	%
FIELD	865:18	865:18	14	8
LEAF_NODE	865:18	865:18	15	8
LEAF_NODE	865:19	865:19	14	)
EQ_OPERATOR	865:21	865:21	14	==
LEAF_NODE	865:21	865:21	15	==
FIELD	865:24	865:24	14	0
LEAF_NODE	865:24	865:24	15	0
LEAF_NODE	865:25	865:25	14	)
LEAF_NODE	865:27	865:27	13	&&
EXPR	865:30	865:43	13	( count == spp )
LEAF_NODE	865:30	865:30	14	(
FIELD	865:31	865:31	14	count
LEAF_NODE	865:31	865:31	15	count
EQ_OPERATOR	865:37	865:37	14	==
LEAF_NODE	865:37	865:37	15	==
FIELD	865:40	865:40	14	spp
LEAF_NODE	865:40	865:40	15	spp
LEAF_NODE	865:43	865:43	14	)
LEAF_NODE	865:44	865:44	10	)
STATEMENTS	866:8	873:8	10	
LEAF_NODE	866:8	866:8	11	{
STATEMENTS	867:1	867:1	11	
ITERATION	867:1	868:10	12	
KEYWORD	867:1	867:1	13	for
LEAF_NODE	867:1	867:1	14	for
LEAF_NODE	867:5	867:5	13	(
FOR_INIT	867:6	867:14	13	trow = 0 ;
EXPR	867:6	867:6	14	trow = 0
ASSIGN	867:6	867:13	15	trow = 0
LVAL	867:6	867:6	16	trow
FIELD	867:6	867:6	17	trow
LEAF_NODE	867:6	867:6	18	trow
ASSIGN_OP	867:11	867:11	16	=
LEAF_NODE	867:11	867:11	17	=
RVAL	867:13	867:13	16	0
FIELD	867:13	867:13	17	0
LEAF_NODE	867:13	867:13	18	0
LEAF_NODE	867:14	867:14	14	;
CONDITION	867:16	867:16	13	trow < nrow
EXPR	867:16	867:23	14	trow < nrow
FIELD	867:16	867:16	15	trow
LEAF_NODE	867:16	867:16	16	trow
REL_OPERATOR	867:21	867:21	15	<
LEAF_NODE	867:21	867:21	16	<
FIELD	867:23	867:23	15	nrow
LEAF_NODE	867:23	867:23	16	nrow
LEAF_NODE	867:27	867:27	13	;
FOR_EXPR	867:29	867:29	13	trow ++
EXPR	867:29	867:29	14	trow ++
FIELD	867:29	867:33	15	trow ++
LEAF_NODE	867:29	867:29	16	trow
LEAF_NODE	867:33	867:33	16	++
LEAF_NODE	867:35	867:35	13	)
STATEMENTS	868:10	872:3	13	
LEAF_NODE	868:10	868:10	14	{
STATEMENTS	869:3	871:45	14	
EXPR_STATEMENT	869:3	869:35	15	src_offset = trow * tile_rowsize ;
EXPR	869:3	869:3	16	src_offset = trow * tile_rowsize
ASSIGN	869:3	869:16	17	src_offset = trow * tile_rowsize
LVAL	869:3	869:3	18	src_offset
FIELD	869:3	869:3	19	src_offset
LEAF_NODE	869:3	869:3	20	src_offset
ASSIGN_OP	869:14	869:14	18	=
LEAF_NODE	869:14	869:14	19	=
RVAL	869:16	869:23	18	trow * tile_rowsize
FIELD	869:16	869:16	19	trow
LEAF_NODE	869:16	869:16	20	trow
LEAF_NODE	869:21	869:21	19	*
FIELD	869:23	869:23	19	tile_rowsize
LEAF_NODE	869:23	869:23	20	tile_rowsize
LEAF_NODE	869:35	869:35	16	;
LEAF_NODE	870:3	870:3	15	_TIFFmemcpy
LEAF_NODE	870:15	870:15	15	(
LEAF_NODE	870:16	870:16	15	bufp
LEAF_NODE	870:20	870:20	15	,
LEAF_NODE	870:22	870:22	15	tilebuf
LEAF_NODE	870:30	870:30	15	+
LEAF_NODE	870:32	870:32	15	src_offset
LEAF_NODE	870:42	870:42	15	,
LEAF_NODE	870:44	870:44	15	(
LEAF_NODE	870:45	870:45	15	ncol
LEAF_NODE	870:50	870:50	15	*
LEAF_NODE	870:52	870:52	15	spp
LEAF_NODE	870:56	870:56	15	*
LEAF_NODE	870:58	870:58	15	bps
LEAF_NODE	870:61	870:61	15	)
LEAF_NODE	870:63	870:63	15	/
LEAF_NODE	870:65	870:65	15	8
LEAF_NODE	870:66	870:66	15	)
LEAF_NODE	870:67	870:67	15	;
LEAF_NODE	871:10	871:10	15	bufp
LEAF_NODE	871:15	871:15	15	+=
LEAF_NODE	871:18	871:18	15	(
LEAF_NODE	871:19	871:19	15	imagewidth
LEAF_NODE	871:30	871:30	15	*
LEAF_NODE	871:32	871:32	15	bps
LEAF_NODE	871:36	871:36	15	*
LEAF_NODE	871:38	871:38	15	spp
LEAF_NODE	871:41	871:41	15	)
LEAF_NODE	871:43	871:43	15	/
EXPR_STATEMENT	871:45	871:46	15	8 ;
EXPR	871:45	871:45	16	8
FIELD	871:45	871:45	17	8
LEAF_NODE	871:45	871:45	18	8
LEAF_NODE	871:46	871:46	16	;
LEAF_NODE	872:3	872:3	14	}
LEAF_NODE	873:8	873:8	11	}
SELECTION	874:6	875:8	9	
KEYWORD	874:6	874:6	10	else
LEAF_NODE	874:6	874:6	11	else
STATEMENTS	875:8	959:1	10	
LEAF_NODE	875:8	875:8	11	{
STATEMENTS	877:8	956:8	11	
EXPR_STATEMENT	877:8	877:46	12	prev_trailing_bits = trailing_bits = 0 ;
EXPR	877:8	877:8	13	prev_trailing_bits = trailing_bits = 0
ASSIGN	877:8	877:29	14	prev_trailing_bits = trailing_bits = 0
LVAL	877:8	877:8	15	prev_trailing_bits
FIELD	877:8	877:8	16	prev_trailing_bits
LEAF_NODE	877:8	877:8	17	prev_trailing_bits
ASSIGN_OP	877:27	877:27	15	=
LEAF_NODE	877:27	877:27	16	=
RVAL	877:29	877:29	15	trailing_bits = 0
ASSIGN	877:29	877:45	16	trailing_bits = 0
LVAL	877:29	877:29	17	trailing_bits
FIELD	877:29	877:29	18	trailing_bits
LEAF_NODE	877:29	877:29	19	trailing_bits
ASSIGN_OP	877:43	877:43	17	=
LEAF_NODE	877:43	877:43	18	=
RVAL	877:45	877:45	17	0
FIELD	877:45	877:45	18	0
LEAF_NODE	877:45	877:45	19	0
LEAF_NODE	877:46	877:46	13	;
LEAF_NODE	878:8	878:8	12	trailing_bits
LEAF_NODE	878:22	878:22	12	=
LEAF_NODE	878:24	878:24	12	(
LEAF_NODE	878:25	878:25	12	ncol
LEAF_NODE	878:30	878:30	12	*
LEAF_NODE	878:32	878:32	12	bps
LEAF_NODE	878:36	878:36	12	*
LEAF_NODE	878:38	878:38	12	spp
LEAF_NODE	878:41	878:41	12	)
LEAF_NODE	878:43	878:43	12	%
EXPR_STATEMENT	878:45	878:46	12	8 ;
EXPR	878:45	878:45	13	8
FIELD	878:45	878:45	14	8
LEAF_NODE	878:45	878:45	15	8
LEAF_NODE	878:46	878:46	13	;
ITERATION	881:1	882:10	12	
KEYWORD	881:1	881:1	13	for
LEAF_NODE	881:1	881:1	14	for
LEAF_NODE	881:5	881:5	13	(
FOR_INIT	881:6	881:14	13	trow = 0 ;
EXPR	881:6	881:6	14	trow = 0
ASSIGN	881:6	881:13	15	trow = 0
LVAL	881:6	881:6	16	trow
FIELD	881:6	881:6	17	trow
LEAF_NODE	881:6	881:6	18	trow
ASSIGN_OP	881:11	881:11	16	=
LEAF_NODE	881:11	881:11	17	=
RVAL	881:13	881:13	16	0
FIELD	881:13	881:13	17	0
LEAF_NODE	881:13	881:13	18	0
LEAF_NODE	881:14	881:14	14	;
CONDITION	881:16	881:16	13	trow < nrow
EXPR	881:16	881:23	14	trow < nrow
FIELD	881:16	881:16	15	trow
LEAF_NODE	881:16	881:16	16	trow
REL_OPERATOR	881:21	881:21	15	<
LEAF_NODE	881:21	881:21	16	<
FIELD	881:23	881:23	15	nrow
LEAF_NODE	881:23	881:23	16	nrow
LEAF_NODE	881:27	881:27	13	;
FOR_EXPR	881:29	881:29	13	trow ++
EXPR	881:29	881:29	14	trow ++
FIELD	881:29	881:33	15	trow ++
LEAF_NODE	881:29	881:29	16	trow
LEAF_NODE	881:33	881:33	16	++
LEAF_NODE	881:35	881:35	13	)
STATEMENTS	882:10	955:10	13	
LEAF_NODE	882:10	882:10	14	{
STATEMENTS	883:3	887:10	14	
EXPR_STATEMENT	883:3	883:35	15	src_offset = trow * tile_rowsize ;
EXPR	883:3	883:3	16	src_offset = trow * tile_rowsize
ASSIGN	883:3	883:16	17	src_offset = trow * tile_rowsize
LVAL	883:3	883:3	18	src_offset
FIELD	883:3	883:3	19	src_offset
LEAF_NODE	883:3	883:3	20	src_offset
ASSIGN_OP	883:14	883:14	18	=
LEAF_NODE	883:14	883:14	19	=
RVAL	883:16	883:23	18	trow * tile_rowsize
FIELD	883:16	883:16	19	trow
LEAF_NODE	883:16	883:16	20	trow
LEAF_NODE	883:21	883:21	19	*
FIELD	883:23	883:23	19	tile_rowsize
LEAF_NODE	883:23	883:23	20	tile_rowsize
LEAF_NODE	883:35	883:35	16	;
EXPR_STATEMENT	884:10	884:36	15	src = tilebuf + src_offset ;
EXPR	884:10	884:10	16	src = tilebuf + src_offset
ASSIGN	884:10	884:16	17	src = tilebuf + src_offset
LVAL	884:10	884:10	18	src
FIELD	884:10	884:10	19	src
LEAF_NODE	884:10	884:10	20	src
ASSIGN_OP	884:14	884:14	18	=
LEAF_NODE	884:14	884:14	19	=
RVAL	884:16	884:26	18	tilebuf + src_offset
FIELD	884:16	884:16	19	tilebuf
LEAF_NODE	884:16	884:16	20	tilebuf
LEAF_NODE	884:24	884:24	19	+
FIELD	884:26	884:26	19	src_offset
LEAF_NODE	884:26	884:26	20	src_offset
LEAF_NODE	884:36	884:36	16	;
EXPR_STATEMENT	885:3	885:42	15	dst_offset = ( row + trow ) * dst_rowsize ;
EXPR	885:3	885:3	16	dst_offset = ( row + trow ) * dst_rowsize
ASSIGN	885:3	885:16	17	dst_offset = ( row + trow ) * dst_rowsize
LVAL	885:3	885:3	18	dst_offset
FIELD	885:3	885:3	19	dst_offset
LEAF_NODE	885:3	885:3	20	dst_offset
ASSIGN_OP	885:14	885:14	18	=
LEAF_NODE	885:14	885:14	19	=
RVAL	885:16	885:31	18	( row + trow ) * dst_rowsize
LEAF_NODE	885:16	885:16	19	(
FIELD	885:17	885:17	19	row
LEAF_NODE	885:17	885:17	20	row
LEAF_NODE	885:21	885:21	19	+
FIELD	885:23	885:23	19	trow
LEAF_NODE	885:23	885:23	20	trow
LEAF_NODE	885:27	885:27	19	)
LEAF_NODE	885:29	885:29	19	*
FIELD	885:31	885:31	19	dst_rowsize
LEAF_NODE	885:31	885:31	20	dst_rowsize
LEAF_NODE	885:42	885:42	16	;
EXPR_STATEMENT	886:10	886:45	15	dst = buf + dst_offset + col_offset ;
EXPR	886:10	886:10	16	dst = buf + dst_offset + col_offset
ASSIGN	886:10	886:16	17	dst = buf + dst_offset + col_offset
LVAL	886:10	886:10	18	dst
FIELD	886:10	886:10	19	dst
LEAF_NODE	886:10	886:10	20	dst
ASSIGN_OP	886:14	886:14	18	=
LEAF_NODE	886:14	886:14	19	=
RVAL	886:16	886:35	18	buf + dst_offset + col_offset
FIELD	886:16	886:16	19	buf
LEAF_NODE	886:16	886:16	20	buf
LEAF_NODE	886:20	886:20	19	+
FIELD	886:22	886:22	19	dst_offset
LEAF_NODE	886:22	886:22	20	dst_offset
LEAF_NODE	886:33	886:33	19	+
FIELD	886:35	886:35	19	col_offset
LEAF_NODE	886:35	886:35	20	col_offset
LEAF_NODE	886:45	886:45	16	;
SELECTION	887:10	888:12	15	
KEYWORD	887:10	887:10	16	switch
LEAF_NODE	887:10	887:10	17	switch
LEAF_NODE	887:17	887:17	16	(
CONDITION	887:18	887:18	16	shift_width
EXPR	887:18	887:18	17	shift_width
FIELD	887:18	887:18	18	shift_width
LEAF_NODE	887:18	887:18	19	shift_width
LEAF_NODE	887:29	887:29	16	)
STATEMENTS	888:12	954:5	16	
LEAF_NODE	888:12	888:12	17	{
STATEMENTS	889:12	953:7	17	
LABEL	889:12	889:18	18	case 0 :
LEAF_NODE	889:12	889:12	19	case
LEAF_NODE	889:17	889:17	19	0
LEAF_NODE	889:18	889:18	19	:
SELECTION	889:20	891:22	18	
KEYWORD	889:20	889:20	19	if
LEAF_NODE	889:20	889:20	20	if
LEAF_NODE	889:23	889:23	19	(
CONDITION	889:24	889:24	19	extractContigSamplesBytes ( src , dst , ncol , sample , spp , bps , count , 0 , ncol )
EXPR	889:24	889:24	20	extractContigSamplesBytes ( src , dst , ncol , sample , spp , bps , count , 0 , ncol )
FUNCTION_CALL	889:24	890:75	21	extractContigSamplesBytes ( src , dst , ncol , sample , spp , bps , count , 0 , ncol )
CALLEE	889:24	889:24	22	extractContigSamplesBytes
LEAF_NODE	889:24	889:24	23	extractContigSamplesBytes
LEAF_NODE	889:50	889:50	22	(
ARGUMENT	889:51	889:51	22	src
FIELD	889:51	889:51	23	src
LEAF_NODE	889:51	889:51	24	src
LEAF_NODE	889:54	889:54	22	,
ARGUMENT	889:56	889:56	22	dst
FIELD	889:56	889:56	23	dst
LEAF_NODE	889:56	889:56	24	dst
LEAF_NODE	889:59	889:59	22	,
ARGUMENT	889:61	889:61	22	ncol
FIELD	889:61	889:61	23	ncol
LEAF_NODE	889:61	889:61	24	ncol
LEAF_NODE	889:65	889:65	22	,
ARGUMENT	889:67	889:67	22	sample
FIELD	889:67	889:67	23	sample
LEAF_NODE	889:67	889:67	24	sample
LEAF_NODE	889:73	889:73	22	,
ARGUMENT	890:51	890:51	22	spp
FIELD	890:51	890:51	23	spp
LEAF_NODE	890:51	890:51	24	spp
LEAF_NODE	890:54	890:54	22	,
ARGUMENT	890:56	890:56	22	bps
FIELD	890:56	890:56	23	bps
LEAF_NODE	890:56	890:56	24	bps
LEAF_NODE	890:59	890:59	22	,
ARGUMENT	890:61	890:61	22	count
FIELD	890:61	890:61	23	count
LEAF_NODE	890:61	890:61	24	count
LEAF_NODE	890:66	890:66	22	,
ARGUMENT	890:68	890:68	22	0
FIELD	890:68	890:68	23	0
LEAF_NODE	890:68	890:68	24	0
LEAF_NODE	890:69	890:69	22	,
ARGUMENT	890:71	890:71	22	ncol
FIELD	890:71	890:71	23	ncol
LEAF_NODE	890:71	890:71	24	ncol
LEAF_NODE	890:75	890:75	22	)
LEAF_NODE	890:76	890:76	19	)
STATEMENTS	891:22	896:8	19	
LEAF_NODE	891:22	891:22	20	{
STATEMENTS	892:8	895:8	20	
EXPR_STATEMENT	892:8	894:44	21	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) ) ;
EXPR	892:8	892:8	22	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
FUNCTION_CALL	892:8	894:43	23	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
CALLEE	892:8	892:8	24	TIFFError
LEAF_NODE	892:8	892:8	25	TIFFError
LEAF_NODE	892:17	892:17	24	(
ARGUMENT	892:18	892:18	24	"readContigTilesIntoBuffer"
FIELD	892:18	892:18	25	"readContigTilesIntoBuffer"
LEAF_NODE	892:18	892:18	26	"readContigTilesIntoBuffer"
LEAF_NODE	892:45	892:45	24	,
ARGUMENT	893:32	893:32	24	"Unable to extract row %d from tile %lu"
FIELD	893:32	893:32	25	"Unable to extract row %d from tile %lu"
LEAF_NODE	893:32	893:32	26	"Unable to extract row %d from tile %lu"
LEAF_NODE	893:72	893:72	24	,
ARGUMENT	894:4	894:4	24	row
FIELD	894:4	894:4	25	row
LEAF_NODE	894:4	894:4	26	row
LEAF_NODE	894:7	894:7	24	,
ARGUMENT	894:9	894:24	24	( unsigned long ) TIFFCurrentTile ( in )
LEAF_NODE	894:9	894:9	25	(
TYPE_NAME	894:10	894:19	25	unsigned long
LEAF_NODE	894:10	894:10	26	unsigned
LEAF_NODE	894:19	894:19	26	long
LEAF_NODE	894:23	894:23	25	)
FUNCTION_CALL	894:24	894:42	25	TIFFCurrentTile ( in )
CALLEE	894:24	894:24	26	TIFFCurrentTile
LEAF_NODE	894:24	894:24	27	TIFFCurrentTile
LEAF_NODE	894:39	894:39	26	(
ARGUMENT	894:40	894:40	26	in
FIELD	894:40	894:40	27	in
LEAF_NODE	894:40	894:40	28	in
LEAF_NODE	894:42	894:42	26	)
LEAF_NODE	894:43	894:43	24	)
LEAF_NODE	894:44	894:44	22	;
JUMP_STATEMENT	895:8	895:16	21	return 1 ;
KEYWORD	895:8	895:8	22	return
LEAF_NODE	895:8	895:8	23	return
DESTINATION	895:15	895:15	22	1
EXPR	895:15	895:15	23	1
FIELD	895:15	895:15	24	1
LEAF_NODE	895:15	895:15	25	1
LEAF_NODE	895:16	895:16	22	;
LEAF_NODE	896:8	896:8	20	}
JUMP_STATEMENT	897:6	897:11	18	break DESTINATION ;
KEYWORD	897:6	897:6	19	break
LEAF_NODE	897:6	897:6	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	897:11	897:11	19	;
LABEL	898:12	898:18	18	case 1 :
LEAF_NODE	898:12	898:12	19	case
LEAF_NODE	898:17	898:17	19	1
LEAF_NODE	898:18	898:18	19	:
SELECTION	898:20	899:22	18	
KEYWORD	898:20	898:20	19	if
LEAF_NODE	898:20	898:20	20	if
LEAF_NODE	898:23	898:23	19	(
CONDITION	898:24	898:24	19	bps == 1
EXPR	898:24	898:31	20	bps == 1
FIELD	898:24	898:24	21	bps
LEAF_NODE	898:24	898:24	22	bps
EQ_OPERATOR	898:28	898:28	21	==
LEAF_NODE	898:28	898:28	22	==
FIELD	898:31	898:31	21	1
LEAF_NODE	898:31	898:31	22	1
LEAF_NODE	898:32	898:32	19	)
STATEMENTS	899:22	912:8	19	
LEAF_NODE	899:22	899:22	20	{
STATEMENTS	900:22	911:8	20	
SELECTION	900:22	905:24	21	
KEYWORD	900:22	900:22	22	if
LEAF_NODE	900:22	900:22	23	if
LEAF_NODE	900:25	900:25	22	(
CONDITION	900:26	900:26	22	extractContigSamplesShifted8bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
EXPR	900:26	900:26	23	extractContigSamplesShifted8bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
FUNCTION_CALL	900:26	904:78	24	extractContigSamplesShifted8bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
CALLEE	900:26	900:26	25	extractContigSamplesShifted8bits
LEAF_NODE	900:26	900:26	26	extractContigSamplesShifted8bits
LEAF_NODE	900:59	900:59	25	(
ARGUMENT	900:60	900:60	25	src
FIELD	900:60	900:60	26	src
LEAF_NODE	900:60	900:60	27	src
LEAF_NODE	900:63	900:63	25	,
ARGUMENT	900:65	900:65	25	dst
FIELD	900:65	900:65	26	dst
LEAF_NODE	900:65	900:65	27	dst
LEAF_NODE	900:68	900:68	25	,
ARGUMENT	900:70	900:70	25	ncol
FIELD	900:70	900:70	26	ncol
LEAF_NODE	900:70	900:70	27	ncol
LEAF_NODE	900:74	900:74	25	,
ARGUMENT	901:60	901:60	25	sample
FIELD	901:60	901:60	26	sample
LEAF_NODE	901:60	901:60	27	sample
LEAF_NODE	901:66	901:66	25	,
ARGUMENT	901:68	901:68	25	spp
FIELD	901:68	901:68	26	spp
LEAF_NODE	901:68	901:68	27	spp
LEAF_NODE	901:71	901:71	25	,
ARGUMENT	902:60	902:60	25	bps
FIELD	902:60	902:60	26	bps
LEAF_NODE	902:60	902:60	27	bps
LEAF_NODE	902:63	902:63	25	,
ARGUMENT	902:65	902:65	25	count
FIELD	902:65	902:65	26	count
LEAF_NODE	902:65	902:65	27	count
LEAF_NODE	902:70	902:70	25	,
ARGUMENT	903:60	903:60	25	0
FIELD	903:60	903:60	26	0
LEAF_NODE	903:60	903:60	27	0
LEAF_NODE	903:61	903:61	25	,
ARGUMENT	903:63	903:63	25	ncol
FIELD	903:63	903:63	26	ncol
LEAF_NODE	903:63	903:63	27	ncol
LEAF_NODE	903:67	903:67	25	,
ARGUMENT	904:60	904:60	25	prev_trailing_bits
FIELD	904:60	904:60	26	prev_trailing_bits
LEAF_NODE	904:60	904:60	27	prev_trailing_bits
LEAF_NODE	904:78	904:78	25	)
LEAF_NODE	904:79	904:79	22	)
STATEMENTS	905:24	910:10	22	
LEAF_NODE	905:24	905:24	23	{
STATEMENTS	906:10	909:10	23	
EXPR_STATEMENT	906:10	908:46	24	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) ) ;
EXPR	906:10	906:10	25	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
FUNCTION_CALL	906:10	908:45	26	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
CALLEE	906:10	906:10	27	TIFFError
LEAF_NODE	906:10	906:10	28	TIFFError
LEAF_NODE	906:19	906:19	27	(
ARGUMENT	906:20	906:20	27	"readContigTilesIntoBuffer"
FIELD	906:20	906:20	28	"readContigTilesIntoBuffer"
LEAF_NODE	906:20	906:20	29	"readContigTilesIntoBuffer"
LEAF_NODE	906:47	906:47	27	,
ARGUMENT	907:34	907:34	27	"Unable to extract row %d from tile %lu"
FIELD	907:34	907:34	28	"Unable to extract row %d from tile %lu"
LEAF_NODE	907:34	907:34	29	"Unable to extract row %d from tile %lu"
LEAF_NODE	907:74	907:74	27	,
ARGUMENT	908:6	908:6	27	row
FIELD	908:6	908:6	28	row
LEAF_NODE	908:6	908:6	29	row
LEAF_NODE	908:9	908:9	27	,
ARGUMENT	908:11	908:26	27	( unsigned long ) TIFFCurrentTile ( in )
LEAF_NODE	908:11	908:11	28	(
TYPE_NAME	908:12	908:21	28	unsigned long
LEAF_NODE	908:12	908:12	29	unsigned
LEAF_NODE	908:21	908:21	29	long
LEAF_NODE	908:25	908:25	28	)
FUNCTION_CALL	908:26	908:44	28	TIFFCurrentTile ( in )
CALLEE	908:26	908:26	29	TIFFCurrentTile
LEAF_NODE	908:26	908:26	30	TIFFCurrentTile
LEAF_NODE	908:41	908:41	29	(
ARGUMENT	908:42	908:42	29	in
FIELD	908:42	908:42	30	in
LEAF_NODE	908:42	908:42	31	in
LEAF_NODE	908:44	908:44	29	)
LEAF_NODE	908:45	908:45	27	)
LEAF_NODE	908:46	908:46	25	;
JUMP_STATEMENT	909:10	909:18	24	return 1 ;
KEYWORD	909:10	909:10	25	return
LEAF_NODE	909:10	909:10	26	return
DESTINATION	909:17	909:17	25	1
EXPR	909:17	909:17	26	1
FIELD	909:17	909:17	27	1
LEAF_NODE	909:17	909:17	28	1
LEAF_NODE	909:18	909:18	25	;
LEAF_NODE	910:10	910:10	23	}
JUMP_STATEMENT	911:8	911:13	21	break DESTINATION ;
KEYWORD	911:8	911:8	22	break
LEAF_NODE	911:8	911:8	23	break
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	911:13	911:13	22	;
LEAF_NODE	912:8	912:8	20	}
SELECTION	913:20	914:22	18	
KEYWORD	913:20	913:20	19	else
LEAF_NODE	913:20	913:20	20	else
STATEMENTS	914:22	914:22	19	
SELECTION	914:22	919:24	20	
KEYWORD	914:22	914:22	21	if
LEAF_NODE	914:22	914:22	22	if
LEAF_NODE	914:25	914:25	21	(
CONDITION	914:26	914:26	21	extractContigSamplesShifted16bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
EXPR	914:26	914:26	22	extractContigSamplesShifted16bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
FUNCTION_CALL	914:26	918:79	23	extractContigSamplesShifted16bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
CALLEE	914:26	914:26	24	extractContigSamplesShifted16bits
LEAF_NODE	914:26	914:26	25	extractContigSamplesShifted16bits
LEAF_NODE	914:60	914:60	24	(
ARGUMENT	914:61	914:61	24	src
FIELD	914:61	914:61	25	src
LEAF_NODE	914:61	914:61	26	src
LEAF_NODE	914:64	914:64	24	,
ARGUMENT	914:66	914:66	24	dst
FIELD	914:66	914:66	25	dst
LEAF_NODE	914:66	914:66	26	dst
LEAF_NODE	914:69	914:69	24	,
ARGUMENT	914:71	914:71	24	ncol
FIELD	914:71	914:71	25	ncol
LEAF_NODE	914:71	914:71	26	ncol
LEAF_NODE	914:75	914:75	24	,
ARGUMENT	915:61	915:61	24	sample
FIELD	915:61	915:61	25	sample
LEAF_NODE	915:61	915:61	26	sample
LEAF_NODE	915:67	915:67	24	,
ARGUMENT	915:69	915:69	24	spp
FIELD	915:69	915:69	25	spp
LEAF_NODE	915:69	915:69	26	spp
LEAF_NODE	915:72	915:72	24	,
ARGUMENT	916:61	916:61	24	bps
FIELD	916:61	916:61	25	bps
LEAF_NODE	916:61	916:61	26	bps
LEAF_NODE	916:64	916:64	24	,
ARGUMENT	916:66	916:66	24	count
FIELD	916:66	916:66	25	count
LEAF_NODE	916:66	916:66	26	count
LEAF_NODE	916:71	916:71	24	,
ARGUMENT	917:61	917:61	24	0
FIELD	917:61	917:61	25	0
LEAF_NODE	917:61	917:61	26	0
LEAF_NODE	917:62	917:62	24	,
ARGUMENT	917:64	917:64	24	ncol
FIELD	917:64	917:64	25	ncol
LEAF_NODE	917:64	917:64	26	ncol
LEAF_NODE	917:68	917:68	24	,
ARGUMENT	918:61	918:61	24	prev_trailing_bits
FIELD	918:61	918:61	25	prev_trailing_bits
LEAF_NODE	918:61	918:61	26	prev_trailing_bits
LEAF_NODE	918:79	918:79	24	)
LEAF_NODE	918:80	918:80	21	)
STATEMENTS	919:24	924:10	21	
LEAF_NODE	919:24	919:24	22	{
STATEMENTS	920:10	923:10	22	
EXPR_STATEMENT	920:10	922:48	23	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) ) ;
EXPR	920:10	920:10	24	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
FUNCTION_CALL	920:10	922:47	25	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
CALLEE	920:10	920:10	26	TIFFError
LEAF_NODE	920:10	920:10	27	TIFFError
LEAF_NODE	920:19	920:19	26	(
ARGUMENT	920:20	920:20	26	"readContigTilesIntoBuffer"
FIELD	920:20	920:20	27	"readContigTilesIntoBuffer"
LEAF_NODE	920:20	920:20	28	"readContigTilesIntoBuffer"
LEAF_NODE	920:47	920:47	26	,
ARGUMENT	921:34	921:34	26	"Unable to extract row %d from tile %lu"
FIELD	921:34	921:34	27	"Unable to extract row %d from tile %lu"
LEAF_NODE	921:34	921:34	28	"Unable to extract row %d from tile %lu"
LEAF_NODE	921:74	921:74	26	,
ARGUMENT	922:8	922:8	26	row
FIELD	922:8	922:8	27	row
LEAF_NODE	922:8	922:8	28	row
LEAF_NODE	922:11	922:11	26	,
ARGUMENT	922:13	922:28	26	( unsigned long ) TIFFCurrentTile ( in )
LEAF_NODE	922:13	922:13	27	(
TYPE_NAME	922:14	922:23	27	unsigned long
LEAF_NODE	922:14	922:14	28	unsigned
LEAF_NODE	922:23	922:23	28	long
LEAF_NODE	922:27	922:27	27	)
FUNCTION_CALL	922:28	922:46	27	TIFFCurrentTile ( in )
CALLEE	922:28	922:28	28	TIFFCurrentTile
LEAF_NODE	922:28	922:28	29	TIFFCurrentTile
LEAF_NODE	922:43	922:43	28	(
ARGUMENT	922:44	922:44	28	in
FIELD	922:44	922:44	29	in
LEAF_NODE	922:44	922:44	30	in
LEAF_NODE	922:46	922:46	28	)
LEAF_NODE	922:47	922:47	26	)
LEAF_NODE	922:48	922:48	24	;
JUMP_STATEMENT	923:10	923:18	23	return 1 ;
KEYWORD	923:10	923:10	24	return
LEAF_NODE	923:10	923:10	25	return
DESTINATION	923:17	923:17	24	1
EXPR	923:17	923:17	25	1
FIELD	923:17	923:17	26	1
LEAF_NODE	923:17	923:17	27	1
LEAF_NODE	923:18	923:18	24	;
LEAF_NODE	924:10	924:10	22	}
JUMP_STATEMENT	925:13	925:18	18	break DESTINATION ;
KEYWORD	925:13	925:13	19	break
LEAF_NODE	925:13	925:13	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	925:18	925:18	19	;
LABEL	926:12	926:18	18	case 2 :
LEAF_NODE	926:12	926:12	19	case
LEAF_NODE	926:17	926:17	19	2
LEAF_NODE	926:18	926:18	19	:
SELECTION	926:20	931:22	18	
KEYWORD	926:20	926:20	19	if
LEAF_NODE	926:20	926:20	20	if
LEAF_NODE	926:23	926:23	19	(
CONDITION	926:24	926:24	19	extractContigSamplesShifted24bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
EXPR	926:24	926:24	20	extractContigSamplesShifted24bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
FUNCTION_CALL	926:24	930:77	21	extractContigSamplesShifted24bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
CALLEE	926:24	926:24	22	extractContigSamplesShifted24bits
LEAF_NODE	926:24	926:24	23	extractContigSamplesShifted24bits
LEAF_NODE	926:58	926:58	22	(
ARGUMENT	926:59	926:59	22	src
FIELD	926:59	926:59	23	src
LEAF_NODE	926:59	926:59	24	src
LEAF_NODE	926:62	926:62	22	,
ARGUMENT	926:64	926:64	22	dst
FIELD	926:64	926:64	23	dst
LEAF_NODE	926:64	926:64	24	dst
LEAF_NODE	926:67	926:67	22	,
ARGUMENT	926:69	926:69	22	ncol
FIELD	926:69	926:69	23	ncol
LEAF_NODE	926:69	926:69	24	ncol
LEAF_NODE	926:73	926:73	22	,
ARGUMENT	927:59	927:59	22	sample
FIELD	927:59	927:59	23	sample
LEAF_NODE	927:59	927:59	24	sample
LEAF_NODE	927:65	927:65	22	,
ARGUMENT	927:67	927:67	22	spp
FIELD	927:67	927:67	23	spp
LEAF_NODE	927:67	927:67	24	spp
LEAF_NODE	927:70	927:70	22	,
ARGUMENT	928:59	928:59	22	bps
FIELD	928:59	928:59	23	bps
LEAF_NODE	928:59	928:59	24	bps
LEAF_NODE	928:62	928:62	22	,
ARGUMENT	928:64	928:64	22	count
FIELD	928:64	928:64	23	count
LEAF_NODE	928:64	928:64	24	count
LEAF_NODE	928:69	928:69	22	,
ARGUMENT	929:59	929:59	22	0
FIELD	929:59	929:59	23	0
LEAF_NODE	929:59	929:59	24	0
LEAF_NODE	929:60	929:60	22	,
ARGUMENT	929:62	929:62	22	ncol
FIELD	929:62	929:62	23	ncol
LEAF_NODE	929:62	929:62	24	ncol
LEAF_NODE	929:66	929:66	22	,
ARGUMENT	930:59	930:59	22	prev_trailing_bits
FIELD	930:59	930:59	23	prev_trailing_bits
LEAF_NODE	930:59	930:59	24	prev_trailing_bits
LEAF_NODE	930:77	930:77	22	)
LEAF_NODE	930:78	930:78	19	)
STATEMENTS	931:22	936:8	19	
LEAF_NODE	931:22	931:22	20	{
STATEMENTS	932:8	935:8	20	
EXPR_STATEMENT	932:8	934:53	21	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) ) ;
EXPR	932:8	932:8	22	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
FUNCTION_CALL	932:8	934:52	23	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
CALLEE	932:8	932:8	24	TIFFError
LEAF_NODE	932:8	932:8	25	TIFFError
LEAF_NODE	932:17	932:17	24	(
ARGUMENT	932:18	932:18	24	"readContigTilesIntoBuffer"
FIELD	932:18	932:18	25	"readContigTilesIntoBuffer"
LEAF_NODE	932:18	932:18	26	"readContigTilesIntoBuffer"
LEAF_NODE	932:45	932:45	24	,
ARGUMENT	933:32	933:32	24	"Unable to extract row %d from tile %lu"
FIELD	933:32	933:32	25	"Unable to extract row %d from tile %lu"
LEAF_NODE	933:32	933:32	26	"Unable to extract row %d from tile %lu"
LEAF_NODE	933:72	933:72	24	,
ARGUMENT	934:13	934:13	24	row
FIELD	934:13	934:13	25	row
LEAF_NODE	934:13	934:13	26	row
LEAF_NODE	934:16	934:16	24	,
ARGUMENT	934:18	934:33	24	( unsigned long ) TIFFCurrentTile ( in )
LEAF_NODE	934:18	934:18	25	(
TYPE_NAME	934:19	934:28	25	unsigned long
LEAF_NODE	934:19	934:19	26	unsigned
LEAF_NODE	934:28	934:28	26	long
LEAF_NODE	934:32	934:32	25	)
FUNCTION_CALL	934:33	934:51	25	TIFFCurrentTile ( in )
CALLEE	934:33	934:33	26	TIFFCurrentTile
LEAF_NODE	934:33	934:33	27	TIFFCurrentTile
LEAF_NODE	934:48	934:48	26	(
ARGUMENT	934:49	934:49	26	in
FIELD	934:49	934:49	27	in
LEAF_NODE	934:49	934:49	28	in
LEAF_NODE	934:51	934:51	26	)
LEAF_NODE	934:52	934:52	24	)
LEAF_NODE	934:53	934:53	22	;
JUMP_STATEMENT	935:8	935:16	21	return 1 ;
KEYWORD	935:8	935:8	22	return
LEAF_NODE	935:8	935:8	23	return
DESTINATION	935:15	935:15	22	1
EXPR	935:15	935:15	23	1
FIELD	935:15	935:15	24	1
LEAF_NODE	935:15	935:15	25	1
LEAF_NODE	935:16	935:16	22	;
LEAF_NODE	936:8	936:8	20	}
JUMP_STATEMENT	937:6	937:11	18	break DESTINATION ;
KEYWORD	937:6	937:6	19	break
LEAF_NODE	937:6	937:6	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	937:11	937:11	19	;
LABEL	938:12	938:18	18	case 3 :
LEAF_NODE	938:12	938:12	19	case
LEAF_NODE	938:17	938:17	19	3
LEAF_NODE	938:18	938:18	19	:
LABEL	939:12	939:18	18	case 4 :
LEAF_NODE	939:12	939:12	19	case
LEAF_NODE	939:17	939:17	19	4
LEAF_NODE	939:18	939:18	19	:
LABEL	940:12	940:18	18	case 5 :
LEAF_NODE	940:12	940:12	19	case
LEAF_NODE	940:17	940:17	19	5
LEAF_NODE	940:18	940:18	19	:
SELECTION	940:20	945:22	18	
KEYWORD	940:20	940:20	19	if
LEAF_NODE	940:20	940:20	20	if
LEAF_NODE	940:23	940:23	19	(
CONDITION	940:24	940:24	19	extractContigSamplesShifted32bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
EXPR	940:24	940:24	20	extractContigSamplesShifted32bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
FUNCTION_CALL	940:24	944:77	21	extractContigSamplesShifted32bits ( src , dst , ncol , sample , spp , bps , count , 0 , ncol , prev_trailing_bits )
CALLEE	940:24	940:24	22	extractContigSamplesShifted32bits
LEAF_NODE	940:24	940:24	23	extractContigSamplesShifted32bits
LEAF_NODE	940:58	940:58	22	(
ARGUMENT	940:59	940:59	22	src
FIELD	940:59	940:59	23	src
LEAF_NODE	940:59	940:59	24	src
LEAF_NODE	940:62	940:62	22	,
ARGUMENT	940:64	940:64	22	dst
FIELD	940:64	940:64	23	dst
LEAF_NODE	940:64	940:64	24	dst
LEAF_NODE	940:67	940:67	22	,
ARGUMENT	940:69	940:69	22	ncol
FIELD	940:69	940:69	23	ncol
LEAF_NODE	940:69	940:69	24	ncol
LEAF_NODE	940:73	940:73	22	,
ARGUMENT	941:59	941:59	22	sample
FIELD	941:59	941:59	23	sample
LEAF_NODE	941:59	941:59	24	sample
LEAF_NODE	941:65	941:65	22	,
ARGUMENT	941:67	941:67	22	spp
FIELD	941:67	941:67	23	spp
LEAF_NODE	941:67	941:67	24	spp
LEAF_NODE	941:70	941:70	22	,
ARGUMENT	942:59	942:59	22	bps
FIELD	942:59	942:59	23	bps
LEAF_NODE	942:59	942:59	24	bps
LEAF_NODE	942:62	942:62	22	,
ARGUMENT	942:64	942:64	22	count
FIELD	942:64	942:64	23	count
LEAF_NODE	942:64	942:64	24	count
LEAF_NODE	942:69	942:69	22	,
ARGUMENT	943:59	943:59	22	0
FIELD	943:59	943:59	23	0
LEAF_NODE	943:59	943:59	24	0
LEAF_NODE	943:60	943:60	22	,
ARGUMENT	943:62	943:62	22	ncol
FIELD	943:62	943:62	23	ncol
LEAF_NODE	943:62	943:62	24	ncol
LEAF_NODE	943:66	943:66	22	,
ARGUMENT	944:59	944:59	22	prev_trailing_bits
FIELD	944:59	944:59	23	prev_trailing_bits
LEAF_NODE	944:59	944:59	24	prev_trailing_bits
LEAF_NODE	944:77	944:77	22	)
LEAF_NODE	944:78	944:78	19	)
STATEMENTS	945:22	950:8	19	
LEAF_NODE	945:22	945:22	20	{
STATEMENTS	946:8	949:8	20	
EXPR_STATEMENT	946:8	948:51	21	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) ) ;
EXPR	946:8	946:8	22	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
FUNCTION_CALL	946:8	948:50	23	TIFFError ( "readContigTilesIntoBuffer" , "Unable to extract row %d from tile %lu" , row , ( unsigned long ) TIFFCurrentTile ( in ) )
CALLEE	946:8	946:8	24	TIFFError
LEAF_NODE	946:8	946:8	25	TIFFError
LEAF_NODE	946:17	946:17	24	(
ARGUMENT	946:18	946:18	24	"readContigTilesIntoBuffer"
FIELD	946:18	946:18	25	"readContigTilesIntoBuffer"
LEAF_NODE	946:18	946:18	26	"readContigTilesIntoBuffer"
LEAF_NODE	946:45	946:45	24	,
ARGUMENT	947:32	947:32	24	"Unable to extract row %d from tile %lu"
FIELD	947:32	947:32	25	"Unable to extract row %d from tile %lu"
LEAF_NODE	947:32	947:32	26	"Unable to extract row %d from tile %lu"
LEAF_NODE	947:72	947:72	24	,
ARGUMENT	948:11	948:11	24	row
FIELD	948:11	948:11	25	row
LEAF_NODE	948:11	948:11	26	row
LEAF_NODE	948:14	948:14	24	,
ARGUMENT	948:16	948:31	24	( unsigned long ) TIFFCurrentTile ( in )
LEAF_NODE	948:16	948:16	25	(
TYPE_NAME	948:17	948:26	25	unsigned long
LEAF_NODE	948:17	948:17	26	unsigned
LEAF_NODE	948:26	948:26	26	long
LEAF_NODE	948:30	948:30	25	)
FUNCTION_CALL	948:31	948:49	25	TIFFCurrentTile ( in )
CALLEE	948:31	948:31	26	TIFFCurrentTile
LEAF_NODE	948:31	948:31	27	TIFFCurrentTile
LEAF_NODE	948:46	948:46	26	(
ARGUMENT	948:47	948:47	26	in
FIELD	948:47	948:47	27	in
LEAF_NODE	948:47	948:47	28	in
LEAF_NODE	948:49	948:49	26	)
LEAF_NODE	948:50	948:50	24	)
LEAF_NODE	948:51	948:51	22	;
JUMP_STATEMENT	949:8	949:16	21	return 1 ;
KEYWORD	949:8	949:8	22	return
LEAF_NODE	949:8	949:8	23	return
DESTINATION	949:15	949:15	22	1
EXPR	949:15	949:15	23	1
FIELD	949:15	949:15	24	1
LEAF_NODE	949:15	949:15	25	1
LEAF_NODE	949:16	949:16	22	;
LEAF_NODE	950:8	950:8	20	}
JUMP_STATEMENT	951:6	951:11	18	break DESTINATION ;
KEYWORD	951:6	951:6	19	break
LEAF_NODE	951:6	951:6	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	951:11	951:11	19	;
LABEL	952:12	952:19	18	default :
LEAF_NODE	952:12	952:12	19	default
LEAF_NODE	952:19	952:19	19	:
EXPR_STATEMENT	952:21	952:92	18	TIFFError ( "readContigTilesIntoBuffer" , "Unsupported bit depth %d" , bps ) ;
EXPR	952:21	952:21	19	TIFFError ( "readContigTilesIntoBuffer" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	952:21	952:91	20	TIFFError ( "readContigTilesIntoBuffer" , "Unsupported bit depth %d" , bps )
CALLEE	952:21	952:21	21	TIFFError
LEAF_NODE	952:21	952:21	22	TIFFError
LEAF_NODE	952:30	952:30	21	(
ARGUMENT	952:31	952:31	21	"readContigTilesIntoBuffer"
FIELD	952:31	952:31	22	"readContigTilesIntoBuffer"
LEAF_NODE	952:31	952:31	23	"readContigTilesIntoBuffer"
LEAF_NODE	952:58	952:58	21	,
ARGUMENT	952:60	952:60	21	"Unsupported bit depth %d"
FIELD	952:60	952:60	22	"Unsupported bit depth %d"
LEAF_NODE	952:60	952:60	23	"Unsupported bit depth %d"
LEAF_NODE	952:86	952:86	21	,
ARGUMENT	952:88	952:88	21	bps
FIELD	952:88	952:88	22	bps
LEAF_NODE	952:88	952:88	23	bps
LEAF_NODE	952:91	952:91	21	)
LEAF_NODE	952:92	952:92	19	;
JUMP_STATEMENT	953:7	953:15	18	return 1 ;
KEYWORD	953:7	953:7	19	return
LEAF_NODE	953:7	953:7	20	return
DESTINATION	953:14	953:14	19	1
EXPR	953:14	953:14	20	1
FIELD	953:14	953:14	21	1
LEAF_NODE	953:14	953:14	22	1
LEAF_NODE	953:15	953:15	19	;
LEAF_NODE	954:5	954:5	17	}
LEAF_NODE	955:10	955:10	14	}
EXPR_STATEMENT	956:8	956:43	12	prev_trailing_bits += trailing_bits ;
EXPR	956:8	956:8	13	prev_trailing_bits += trailing_bits
ASSIGN	956:8	956:30	14	prev_trailing_bits += trailing_bits
LVAL	956:8	956:8	15	prev_trailing_bits
FIELD	956:8	956:8	16	prev_trailing_bits
LEAF_NODE	956:8	956:8	17	prev_trailing_bits
ASSIGN_OP	956:27	956:27	15	+=
LEAF_NODE	956:27	956:27	16	+=
RVAL	956:30	956:30	15	trailing_bits
FIELD	956:30	956:30	16	trailing_bits
LEAF_NODE	956:30	956:30	17	trailing_bits
LEAF_NODE	956:43	956:43	13	;
LEAF_NODE	959:1	959:1	11	}
LEAF_NODE	960:6	960:6	8	}
LEAF_NODE	961:4	961:4	5	}
EXPR_STATEMENT	963:2	963:20	3	_TIFFfree ( tilebuf ) ;
EXPR	963:2	963:2	4	_TIFFfree ( tilebuf )
FUNCTION_CALL	963:2	963:19	5	_TIFFfree ( tilebuf )
CALLEE	963:2	963:2	6	_TIFFfree
LEAF_NODE	963:2	963:2	7	_TIFFfree
LEAF_NODE	963:11	963:11	6	(
ARGUMENT	963:12	963:12	6	tilebuf
FIELD	963:12	963:12	7	tilebuf
LEAF_NODE	963:12	963:12	8	tilebuf
LEAF_NODE	963:19	963:19	6	)
LEAF_NODE	963:20	963:20	4	;
JUMP_STATEMENT	964:2	964:15	3	return status ;
KEYWORD	964:2	964:2	4	return
LEAF_NODE	964:2	964:2	5	return
DESTINATION	964:9	964:9	4	status
EXPR	964:9	964:9	5	status
FIELD	964:9	964:9	6	status
LEAF_NODE	964:9	964:9	7	status
LEAF_NODE	964:15	964:15	4	;
LEAF_NODE	965:2	965:2	2	}
FUNCTION_DEF	967:0	1112:2	1	
RETURN_TYPE	967:0	967:7	2	static int
LEAF_NODE	967:0	967:0	3	static
TYPE_NAME	967:7	967:7	3	int
LEAF_NODE	967:7	967:7	4	int
FUNCTION_NAME	967:12	967:12	2	readSeparateTilesIntoBuffer
LEAF_NODE	967:12	967:12	3	readSeparateTilesIntoBuffer
PARAMETER_LIST	967:40	970:63	2	( TIFF * in , uint8 * obuf , uint32 imagelength , uint32 imagewidth , uint32 tw , uint32 tl , uint16 spp , uint16 bps )
LEAF_NODE	967:40	967:40	3	(
PARAMETER_DECL	967:41	967:47	3	TIFF * in
TYPE	967:41	967:45	4	TIFF *
TYPE_NAME	967:41	967:41	5	TIFF
LEAF_NODE	967:41	967:41	6	TIFF
POINTER	967:45	967:45	5	*
LEAF_NODE	967:45	967:45	6	*
NAME	967:47	967:47	4	in
LEAF_NODE	967:47	967:47	5	in
LEAF_NODE	967:49	967:49	3	,
PARAMETER_DECL	967:51	967:58	3	uint8 * obuf
TYPE	967:51	967:57	4	uint8 *
TYPE_NAME	967:51	967:51	5	uint8
LEAF_NODE	967:51	967:51	6	uint8
POINTER	967:57	967:57	5	*
LEAF_NODE	967:57	967:57	6	*
NAME	967:58	967:58	4	obuf
LEAF_NODE	967:58	967:58	5	obuf
LEAF_NODE	967:62	967:62	3	,
PARAMETER_DECL	968:6	968:13	3	uint32 imagelength
TYPE	968:6	968:6	4	uint32
TYPE_NAME	968:6	968:6	5	uint32
LEAF_NODE	968:6	968:6	6	uint32
NAME	968:13	968:13	4	imagelength
LEAF_NODE	968:13	968:13	5	imagelength
LEAF_NODE	968:24	968:24	3	,
PARAMETER_DECL	968:26	968:33	3	uint32 imagewidth
TYPE	968:26	968:26	4	uint32
TYPE_NAME	968:26	968:26	5	uint32
LEAF_NODE	968:26	968:26	6	uint32
NAME	968:33	968:33	4	imagewidth
LEAF_NODE	968:33	968:33	5	imagewidth
LEAF_NODE	968:43	968:43	3	,
PARAMETER_DECL	969:41	969:48	3	uint32 tw
TYPE	969:41	969:41	4	uint32
TYPE_NAME	969:41	969:41	5	uint32
LEAF_NODE	969:41	969:41	6	uint32
NAME	969:48	969:48	4	tw
LEAF_NODE	969:48	969:48	5	tw
LEAF_NODE	969:50	969:50	3	,
PARAMETER_DECL	969:52	969:59	3	uint32 tl
TYPE	969:52	969:52	4	uint32
TYPE_NAME	969:52	969:52	5	uint32
LEAF_NODE	969:52	969:52	6	uint32
NAME	969:59	969:59	4	tl
LEAF_NODE	969:59	969:59	5	tl
LEAF_NODE	969:61	969:61	3	,
PARAMETER_DECL	970:41	970:48	3	uint16 spp
TYPE	970:41	970:41	4	uint16
TYPE_NAME	970:41	970:41	5	uint16
LEAF_NODE	970:41	970:41	6	uint16
NAME	970:48	970:48	4	spp
LEAF_NODE	970:48	970:48	5	spp
LEAF_NODE	970:51	970:51	3	,
PARAMETER_DECL	970:53	970:60	3	uint16 bps
TYPE	970:53	970:53	4	uint16
TYPE_NAME	970:53	970:53	5	uint16
LEAF_NODE	970:53	970:53	6	uint16
NAME	970:60	970:60	4	bps
LEAF_NODE	970:60	970:60	5	bps
LEAF_NODE	970:63	970:63	3	)
LEAF_NODE	971:2	971:2	2	{
STATEMENTS	972:2	1111:2	2	
SIMPLE_DECL	972:2	972:31	3	int i , int status ; status = 1 , int sample ;
INIT_DECL_LIST	972:2	972:2	4	int i , int status ; status = 1 , int sample
VAR_DECL	972:2	972:10	5	int i
TYPE	972:2	972:2	6	int
TYPE_NAME	972:2	972:2	7	int
LEAF_NODE	972:2	972:2	8	int
NAME	972:10	972:10	6	i
LEAF_NODE	972:10	972:10	7	i
LEAF_NODE	972:11	972:11	5	,
INIT_DECL_LIST	972:2	972:2	5	int status ; status = 1 , int sample
VAR_DECL	972:2	972:13	6	int status ; status = 1
TYPE	972:2	972:2	7	int
TYPE_NAME	972:2	972:2	8	int
LEAF_NODE	972:2	972:2	9	int
NAME	972:13	972:13	7	status
LEAF_NODE	972:13	972:13	8	status
LEAF_NODE	0:0	0:0	7	;
INIT	972:13	972:13	7	status = 1
ASSIGN	972:13	972:22	8	status = 1
LVAL	972:13	972:13	9	status
NAME	972:13	972:13	10	status
LEAF_NODE	972:13	972:13	11	status
ASSIGN_OP	972:20	972:20	9	=
LEAF_NODE	972:20	972:20	10	=
RVAL	972:22	972:22	9	1
FIELD	972:22	972:22	10	1
LEAF_NODE	972:22	972:22	11	1
LEAF_NODE	972:23	972:23	6	,
VAR_DECL	972:2	972:25	6	int sample
TYPE	972:2	972:2	7	int
TYPE_NAME	972:2	972:2	8	int
LEAF_NODE	972:2	972:2	9	int
NAME	972:25	972:25	7	sample
LEAF_NODE	972:25	972:25	8	sample
LEAF_NODE	972:31	972:31	4	;
SIMPLE_DECL	973:2	973:38	3	int shift_width , int bytes_per_pixel ;
INIT_DECL_LIST	973:2	973:2	4	int shift_width , int bytes_per_pixel
VAR_DECL	973:2	973:10	5	int shift_width
TYPE	973:2	973:2	6	int
TYPE_NAME	973:2	973:2	7	int
LEAF_NODE	973:2	973:2	8	int
NAME	973:10	973:10	6	shift_width
LEAF_NODE	973:10	973:10	7	shift_width
LEAF_NODE	973:21	973:21	5	,
VAR_DECL	973:2	973:23	5	int bytes_per_pixel
TYPE	973:2	973:2	6	int
TYPE_NAME	973:2	973:2	7	int
LEAF_NODE	973:2	973:2	8	int
NAME	973:23	973:23	6	bytes_per_pixel
LEAF_NODE	973:23	973:23	7	bytes_per_pixel
LEAF_NODE	973:38	973:38	4	;
SIMPLE_DECL	974:2	974:26	3	uint16 bytes_per_sample ;
VAR_DECL	974:2	974:10	4	uint16 bytes_per_sample
TYPE	974:2	974:2	5	uint16
TYPE_NAME	974:2	974:2	6	uint16
LEAF_NODE	974:2	974:2	7	uint16
NAME	974:10	974:10	5	bytes_per_sample
LEAF_NODE	974:10	974:10	6	bytes_per_sample
LEAF_NODE	974:26	974:26	4	;
SIMPLE_DECL	975:2	975:18	3	uint32 row , uint32 col ;
INIT_DECL_LIST	975:2	975:2	4	uint32 row , uint32 col
VAR_DECL	975:2	975:10	5	uint32 row
TYPE	975:2	975:2	6	uint32
TYPE_NAME	975:2	975:2	7	uint32
LEAF_NODE	975:2	975:2	8	uint32
NAME	975:10	975:10	6	row
LEAF_NODE	975:10	975:10	7	row
LEAF_NODE	975:13	975:13	5	,
VAR_DECL	975:2	975:15	5	uint32 col
TYPE	975:2	975:2	6	uint32
TYPE_NAME	975:2	975:2	7	uint32
LEAF_NODE	975:2	975:2	8	uint32
NAME	975:15	975:15	6	col
LEAF_NODE	975:15	975:15	7	col
LEAF_NODE	975:18	975:18	4	;
SIMPLE_DECL	976:2	976:20	3	uint32 nrow , uint32 ncol ;
INIT_DECL_LIST	976:2	976:2	4	uint32 nrow , uint32 ncol
VAR_DECL	976:2	976:10	5	uint32 nrow
TYPE	976:2	976:2	6	uint32
TYPE_NAME	976:2	976:2	7	uint32
LEAF_NODE	976:2	976:2	8	uint32
NAME	976:10	976:10	6	nrow
LEAF_NODE	976:10	976:10	7	nrow
LEAF_NODE	976:14	976:14	5	,
VAR_DECL	976:2	976:16	5	uint32 ncol
TYPE	976:2	976:2	6	uint32
TYPE_NAME	976:2	976:2	7	uint32
LEAF_NODE	976:2	976:2	8	uint32
NAME	976:16	976:16	6	ncol
LEAF_NODE	976:16	976:16	7	ncol
LEAF_NODE	976:20	976:20	4	;
SIMPLE_DECL	977:2	977:32	3	uint32 row_offset , uint32 col_offset ;
INIT_DECL_LIST	977:2	977:2	4	uint32 row_offset , uint32 col_offset
VAR_DECL	977:2	977:10	5	uint32 row_offset
TYPE	977:2	977:2	6	uint32
TYPE_NAME	977:2	977:2	7	uint32
LEAF_NODE	977:2	977:2	8	uint32
NAME	977:10	977:10	6	row_offset
LEAF_NODE	977:10	977:10	7	row_offset
LEAF_NODE	977:20	977:20	5	,
VAR_DECL	977:2	977:22	5	uint32 col_offset
TYPE	977:2	977:2	6	uint32
TYPE_NAME	977:2	977:2	7	uint32
LEAF_NODE	977:2	977:2	8	uint32
NAME	977:22	977:22	6	col_offset
LEAF_NODE	977:22	977:22	7	col_offset
LEAF_NODE	977:32	977:32	4	;
SIMPLE_DECL	978:2	978:49	3	tsize_t tbytes ; tbytes = 0 , tsize_t tilesize ; tilesize = TIFFTileSize ( in ) ;
INIT_DECL_LIST	978:2	978:2	4	tsize_t tbytes ; tbytes = 0 , tsize_t tilesize ; tilesize = TIFFTileSize ( in )
VAR_DECL	978:2	978:10	5	tsize_t tbytes ; tbytes = 0
TYPE	978:2	978:2	6	tsize_t
TYPE_NAME	978:2	978:2	7	tsize_t
LEAF_NODE	978:2	978:2	8	tsize_t
NAME	978:10	978:10	6	tbytes
LEAF_NODE	978:10	978:10	7	tbytes
LEAF_NODE	0:0	0:0	6	;
INIT	978:10	978:10	6	tbytes = 0
ASSIGN	978:10	978:19	7	tbytes = 0
LVAL	978:10	978:10	8	tbytes
NAME	978:10	978:10	9	tbytes
LEAF_NODE	978:10	978:10	10	tbytes
ASSIGN_OP	978:17	978:17	8	=
LEAF_NODE	978:17	978:17	9	=
RVAL	978:19	978:19	8	0
FIELD	978:19	978:19	9	0
LEAF_NODE	978:19	978:19	10	0
LEAF_NODE	978:20	978:20	5	,
VAR_DECL	978:2	978:22	5	tsize_t tilesize ; tilesize = TIFFTileSize ( in )
TYPE	978:2	978:2	6	tsize_t
TYPE_NAME	978:2	978:2	7	tsize_t
LEAF_NODE	978:2	978:2	8	tsize_t
NAME	978:22	978:22	6	tilesize
LEAF_NODE	978:22	978:22	7	tilesize
LEAF_NODE	0:0	0:0	6	;
INIT	978:22	978:22	6	tilesize = TIFFTileSize ( in )
ASSIGN	978:22	978:33	7	tilesize = TIFFTileSize ( in )
LVAL	978:22	978:22	8	tilesize
NAME	978:22	978:22	9	tilesize
LEAF_NODE	978:22	978:22	10	tilesize
ASSIGN_OP	978:31	978:31	8	=
LEAF_NODE	978:31	978:31	9	=
RVAL	978:33	978:33	8	TIFFTileSize ( in )
FUNCTION_CALL	978:33	978:48	9	TIFFTileSize ( in )
CALLEE	978:33	978:33	10	TIFFTileSize
LEAF_NODE	978:33	978:33	11	TIFFTileSize
LEAF_NODE	978:45	978:45	10	(
ARGUMENT	978:46	978:46	10	in
FIELD	978:46	978:46	11	in
LEAF_NODE	978:46	978:46	12	in
LEAF_NODE	978:48	978:48	10	)
LEAF_NODE	978:49	978:49	4	;
SIMPLE_DECL	979:2	979:13	3	tsample_t s ;
VAR_DECL	979:2	979:12	4	tsample_t s
TYPE	979:2	979:2	5	tsample_t
TYPE_NAME	979:2	979:2	6	tsample_t
LEAF_NODE	979:2	979:2	7	tsample_t
NAME	979:12	979:12	5	s
LEAF_NODE	979:12	979:12	6	s
LEAF_NODE	979:13	979:13	4	;
SIMPLE_DECL	980:2	980:29	3	uint8 * bufp ; bufp = ( uint8 * ) obuf ;
VAR_DECL	980:2	980:10	4	uint8 * bufp ; bufp = ( uint8 * ) obuf
TYPE	980:2	980:7	5	uint8 *
TYPE_NAME	980:2	980:2	6	uint8
LEAF_NODE	980:2	980:2	7	uint8
POINTER	980:7	980:7	6	*
LEAF_NODE	980:7	980:7	7	*
NAME	980:10	980:10	5	bufp
LEAF_NODE	980:10	980:10	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	980:10	980:10	5	bufp = ( uint8 * ) obuf
ASSIGN	980:10	980:17	6	bufp = ( uint8 * ) obuf
LVAL	980:10	980:10	7	bufp
NAME	980:10	980:10	8	bufp
LEAF_NODE	980:10	980:10	9	bufp
ASSIGN_OP	980:15	980:15	7	=
LEAF_NODE	980:15	980:15	8	=
RVAL	980:17	980:25	7	( uint8 * ) obuf
LEAF_NODE	980:17	980:17	8	(
TYPE_NAME	980:18	980:18	8	uint8
LEAF_NODE	980:18	980:18	9	uint8
LEAF_NODE	980:23	980:23	8	*
LEAF_NODE	980:24	980:24	8	)
FIELD	980:25	980:25	8	obuf
LEAF_NODE	980:25	980:25	9	obuf
LEAF_NODE	980:29	980:29	4	;
SIMPLE_DECL	981:2	981:38	3	unsigned char * [ MAX_SAMPLES ] srcbuffs ;
VAR_DECL	981:2	981:17	4	unsigned char * [ MAX_SAMPLES ] srcbuffs
TYPE	981:2	981:25	5	unsigned char * [ MAX_SAMPLES ]
TYPE_NAME	981:2	981:11	6	unsigned char
LEAF_NODE	981:2	981:2	7	unsigned
LEAF_NODE	981:11	981:11	7	char
POINTER	981:16	981:16	6	*
LEAF_NODE	981:16	981:16	7	*
TYPE_SUFFIX	981:25	981:37	6	[ MAX_SAMPLES ]
LEAF_NODE	981:25	981:25	7	[
FIELD	981:26	981:26	7	MAX_SAMPLES
LEAF_NODE	981:26	981:26	8	MAX_SAMPLES
LEAF_NODE	981:37	981:37	7	]
NAME	981:17	981:17	5	srcbuffs
LEAF_NODE	981:17	981:17	6	srcbuffs
LEAF_NODE	981:38	981:38	4	;
SIMPLE_DECL	982:2	982:29	3	unsigned char * tbuff ; tbuff = NULL ;
VAR_DECL	982:2	982:17	4	unsigned char * tbuff ; tbuff = NULL
TYPE	982:2	982:16	5	unsigned char *
TYPE_NAME	982:2	982:11	6	unsigned char
LEAF_NODE	982:2	982:2	7	unsigned
LEAF_NODE	982:11	982:11	7	char
POINTER	982:16	982:16	6	*
LEAF_NODE	982:16	982:16	7	*
NAME	982:17	982:17	5	tbuff
LEAF_NODE	982:17	982:17	6	tbuff
LEAF_NODE	0:0	0:0	5	;
INIT	982:17	982:17	5	tbuff = NULL
ASSIGN	982:17	982:25	6	tbuff = NULL
LVAL	982:17	982:17	7	tbuff
NAME	982:17	982:17	8	tbuff
LEAF_NODE	982:17	982:17	9	tbuff
ASSIGN_OP	982:23	982:23	7	=
LEAF_NODE	982:23	982:23	8	=
RVAL	982:25	982:25	7	NULL
FIELD	982:25	982:25	8	NULL
LEAF_NODE	982:25	982:25	9	NULL
LEAF_NODE	982:29	982:29	4	;
EXPR_STATEMENT	984:2	984:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	984:2	984:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	984:2	984:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	984:2	984:2	6	bytes_per_sample
FIELD	984:2	984:2	7	bytes_per_sample
LEAF_NODE	984:2	984:2	8	bytes_per_sample
ASSIGN_OP	984:19	984:19	6	=
LEAF_NODE	984:19	984:19	7	=
RVAL	984:21	984:33	6	( bps + 7 ) / 8
LEAF_NODE	984:21	984:21	7	(
FIELD	984:22	984:22	7	bps
LEAF_NODE	984:22	984:22	8	bps
LEAF_NODE	984:26	984:26	7	+
FIELD	984:28	984:28	7	7
LEAF_NODE	984:28	984:28	8	7
LEAF_NODE	984:29	984:29	7	)
LEAF_NODE	984:31	984:31	7	/
FIELD	984:33	984:33	7	8
LEAF_NODE	984:33	984:33	8	8
LEAF_NODE	984:34	984:34	4	;
ITERATION	986:2	987:4	3	
KEYWORD	986:2	986:2	4	for
LEAF_NODE	986:2	986:2	5	for
LEAF_NODE	986:6	986:6	4	(
FOR_INIT	986:7	986:17	4	sample = 0 ;
EXPR	986:7	986:7	5	sample = 0
ASSIGN	986:7	986:16	6	sample = 0
LVAL	986:7	986:7	7	sample
FIELD	986:7	986:7	8	sample
LEAF_NODE	986:7	986:7	9	sample
ASSIGN_OP	986:14	986:14	7	=
LEAF_NODE	986:14	986:14	8	=
RVAL	986:16	986:16	7	0
FIELD	986:16	986:16	8	0
LEAF_NODE	986:16	986:16	9	0
LEAF_NODE	986:17	986:17	5	;
CONDITION	986:19	986:19	4	( sample < spp ) && ( sample < MAX_SAMPLES )
EXPR	986:19	986:19	5	( sample < spp ) && ( sample < MAX_SAMPLES )
AND	986:19	986:37	6	( sample < spp ) && ( sample < MAX_SAMPLES )
EXPR	986:19	986:32	7	( sample < spp )
LEAF_NODE	986:19	986:19	8	(
FIELD	986:20	986:20	8	sample
LEAF_NODE	986:20	986:20	9	sample
REL_OPERATOR	986:27	986:27	8	<
LEAF_NODE	986:27	986:27	9	<
FIELD	986:29	986:29	8	spp
LEAF_NODE	986:29	986:29	9	spp
LEAF_NODE	986:32	986:32	8	)
LEAF_NODE	986:34	986:34	7	&&
EXPR	986:37	986:58	7	( sample < MAX_SAMPLES )
LEAF_NODE	986:37	986:37	8	(
FIELD	986:38	986:38	8	sample
LEAF_NODE	986:38	986:38	9	sample
REL_OPERATOR	986:45	986:45	8	<
LEAF_NODE	986:45	986:45	9	<
FIELD	986:47	986:47	8	MAX_SAMPLES
LEAF_NODE	986:47	986:47	9	MAX_SAMPLES
LEAF_NODE	986:58	986:58	8	)
LEAF_NODE	986:59	986:59	4	;
FOR_EXPR	986:61	986:61	4	sample ++
EXPR	986:61	986:61	5	sample ++
FIELD	986:61	986:67	6	sample ++
LEAF_NODE	986:61	986:61	7	sample
LEAF_NODE	986:67	986:67	7	++
LEAF_NODE	986:69	986:69	4	)
STATEMENTS	987:4	999:4	4	
LEAF_NODE	987:4	987:4	5	{
STATEMENTS	988:4	998:4	5	
EXPR_STATEMENT	988:4	988:27	6	srcbuffs [ sample ] = NULL ;
EXPR	988:4	988:4	7	srcbuffs [ sample ] = NULL
ASSIGN	988:4	988:23	8	srcbuffs [ sample ] = NULL
LVAL	988:4	988:4	9	srcbuffs [ sample ]
FIELD	988:4	988:19	10	srcbuffs [ sample ]
LEAF_NODE	988:4	988:4	11	srcbuffs
LEAF_NODE	988:12	988:12	11	[
EXPR	988:13	988:13	11	sample
FIELD	988:13	988:13	12	sample
LEAF_NODE	988:13	988:13	13	sample
LEAF_NODE	988:19	988:19	11	]
ASSIGN_OP	988:21	988:21	9	=
LEAF_NODE	988:21	988:21	10	=
RVAL	988:23	988:23	9	NULL
FIELD	988:23	988:23	10	NULL
LEAF_NODE	988:23	988:23	11	NULL
LEAF_NODE	988:27	988:27	7	;
EXPR_STATEMENT	989:4	989:54	6	tbuff = ( unsigned char * ) _TIFFmalloc ( tilesize + 8 ) ;
EXPR	989:4	989:4	7	tbuff = ( unsigned char * ) _TIFFmalloc ( tilesize + 8 )
ASSIGN	989:4	989:12	8	tbuff = ( unsigned char * ) _TIFFmalloc ( tilesize + 8 )
LVAL	989:4	989:4	9	tbuff
FIELD	989:4	989:4	10	tbuff
LEAF_NODE	989:4	989:4	11	tbuff
ASSIGN_OP	989:10	989:10	9	=
LEAF_NODE	989:10	989:10	10	=
RVAL	989:12	989:29	9	( unsigned char * ) _TIFFmalloc ( tilesize + 8 )
LEAF_NODE	989:12	989:12	10	(
TYPE_NAME	989:13	989:22	10	unsigned char
LEAF_NODE	989:13	989:13	11	unsigned
LEAF_NODE	989:22	989:22	11	char
LEAF_NODE	989:27	989:27	10	*
LEAF_NODE	989:28	989:28	10	)
FUNCTION_CALL	989:29	989:53	10	_TIFFmalloc ( tilesize + 8 )
CALLEE	989:29	989:29	11	_TIFFmalloc
LEAF_NODE	989:29	989:29	12	_TIFFmalloc
LEAF_NODE	989:40	989:40	11	(
ARGUMENT	989:41	989:52	11	tilesize + 8
FIELD	989:41	989:41	12	tilesize
LEAF_NODE	989:41	989:41	13	tilesize
LEAF_NODE	989:50	989:50	12	+
FIELD	989:52	989:52	12	8
LEAF_NODE	989:52	989:52	13	8
LEAF_NODE	989:53	989:53	11	)
LEAF_NODE	989:54	989:54	7	;
SELECTION	990:4	991:6	6	
KEYWORD	990:4	990:4	7	if
LEAF_NODE	990:4	990:4	8	if
LEAF_NODE	990:7	990:7	7	(
CONDITION	990:8	990:8	7	! tbuff
EXPR	990:8	990:8	8	! tbuff
UNARY_EXPR	990:8	990:9	9	! tbuff
UNARY_OPERATOR	990:8	990:8	10	!
LEAF_NODE	990:8	990:8	11	!
FIELD	990:9	990:9	10	tbuff
LEAF_NODE	990:9	990:9	11	tbuff
LEAF_NODE	990:14	990:14	7	)
STATEMENTS	991:6	997:6	7	
LEAF_NODE	991:6	991:6	8	{
STATEMENTS	992:6	996:6	8	
EXPR_STATEMENT	992:6	993:77	9	TIFFError ( "readSeparateTilesIntoBuffer" , "Unable to allocate tile read buffer for sample %d" , sample ) ;
EXPR	992:6	992:6	10	TIFFError ( "readSeparateTilesIntoBuffer" , "Unable to allocate tile read buffer for sample %d" , sample )
FUNCTION_CALL	992:6	993:76	11	TIFFError ( "readSeparateTilesIntoBuffer" , "Unable to allocate tile read buffer for sample %d" , sample )
CALLEE	992:6	992:6	12	TIFFError
LEAF_NODE	992:6	992:6	13	TIFFError
LEAF_NODE	992:16	992:16	12	(
ARGUMENT	992:17	992:17	12	"readSeparateTilesIntoBuffer"
FIELD	992:17	992:17	13	"readSeparateTilesIntoBuffer"
LEAF_NODE	992:17	992:17	14	"readSeparateTilesIntoBuffer"
LEAF_NODE	992:46	992:46	12	,
ARGUMENT	993:17	993:17	12	"Unable to allocate tile read buffer for sample %d"
FIELD	993:17	993:17	13	"Unable to allocate tile read buffer for sample %d"
LEAF_NODE	993:17	993:17	14	"Unable to allocate tile read buffer for sample %d"
LEAF_NODE	993:68	993:68	12	,
ARGUMENT	993:70	993:70	12	sample
FIELD	993:70	993:70	13	sample
LEAF_NODE	993:70	993:70	14	sample
LEAF_NODE	993:76	993:76	12	)
LEAF_NODE	993:77	993:77	10	;
ITERATION	994:6	995:8	9	
KEYWORD	994:6	994:6	10	for
LEAF_NODE	994:6	994:6	11	for
LEAF_NODE	994:10	994:10	10	(
FOR_INIT	994:11	994:16	10	i = 0 ;
EXPR	994:11	994:11	11	i = 0
ASSIGN	994:11	994:15	12	i = 0
LVAL	994:11	994:11	13	i
FIELD	994:11	994:11	14	i
LEAF_NODE	994:11	994:11	15	i
ASSIGN_OP	994:13	994:13	13	=
LEAF_NODE	994:13	994:13	14	=
RVAL	994:15	994:15	13	0
FIELD	994:15	994:15	14	0
LEAF_NODE	994:15	994:15	15	0
LEAF_NODE	994:16	994:16	11	;
CONDITION	994:18	994:18	10	i < sample
EXPR	994:18	994:22	11	i < sample
FIELD	994:18	994:18	12	i
LEAF_NODE	994:18	994:18	13	i
REL_OPERATOR	994:20	994:20	12	<
LEAF_NODE	994:20	994:20	13	<
FIELD	994:22	994:22	12	sample
LEAF_NODE	994:22	994:22	13	sample
LEAF_NODE	994:28	994:28	10	;
FOR_EXPR	994:30	994:30	10	i ++
EXPR	994:30	994:30	11	i ++
FIELD	994:30	994:31	12	i ++
LEAF_NODE	994:30	994:30	13	i
LEAF_NODE	994:31	994:31	13	++
LEAF_NODE	994:33	994:33	10	)
STATEMENTS	995:8	995:8	10	
EXPR_STATEMENT	995:8	995:31	11	_TIFFfree ( srcbuffs [ i ] ) ;
EXPR	995:8	995:8	12	_TIFFfree ( srcbuffs [ i ] )
FUNCTION_CALL	995:8	995:30	13	_TIFFfree ( srcbuffs [ i ] )
CALLEE	995:8	995:8	14	_TIFFfree
LEAF_NODE	995:8	995:8	15	_TIFFfree
LEAF_NODE	995:18	995:18	14	(
ARGUMENT	995:19	995:19	14	srcbuffs [ i ]
FIELD	995:19	995:29	15	srcbuffs [ i ]
LEAF_NODE	995:19	995:19	16	srcbuffs
LEAF_NODE	995:27	995:27	16	[
EXPR	995:28	995:28	16	i
FIELD	995:28	995:28	17	i
LEAF_NODE	995:28	995:28	18	i
LEAF_NODE	995:29	995:29	16	]
LEAF_NODE	995:30	995:30	14	)
LEAF_NODE	995:31	995:31	12	;
JUMP_STATEMENT	996:6	996:14	9	return 0 ;
KEYWORD	996:6	996:6	10	return
LEAF_NODE	996:6	996:6	11	return
DESTINATION	996:13	996:13	10	0
EXPR	996:13	996:13	11	0
FIELD	996:13	996:13	12	0
LEAF_NODE	996:13	996:13	13	0
LEAF_NODE	996:14	996:14	10	;
LEAF_NODE	997:6	997:6	8	}
EXPR_STATEMENT	998:4	998:28	6	srcbuffs [ sample ] = tbuff ;
EXPR	998:4	998:4	7	srcbuffs [ sample ] = tbuff
ASSIGN	998:4	998:23	8	srcbuffs [ sample ] = tbuff
LVAL	998:4	998:4	9	srcbuffs [ sample ]
FIELD	998:4	998:19	10	srcbuffs [ sample ]
LEAF_NODE	998:4	998:4	11	srcbuffs
LEAF_NODE	998:12	998:12	11	[
EXPR	998:13	998:13	11	sample
FIELD	998:13	998:13	12	sample
LEAF_NODE	998:13	998:13	13	sample
LEAF_NODE	998:19	998:19	11	]
ASSIGN_OP	998:21	998:21	9	=
LEAF_NODE	998:21	998:21	10	=
RVAL	998:23	998:23	9	tbuff
FIELD	998:23	998:23	10	tbuff
LEAF_NODE	998:23	998:23	11	tbuff
LEAF_NODE	998:28	998:28	7	;
LEAF_NODE	999:4	999:4	5	}
ITERATION	1003:2	1004:4	3	
KEYWORD	1003:2	1003:2	4	for
LEAF_NODE	1003:2	1003:2	5	for
LEAF_NODE	1003:6	1003:6	4	(
FOR_INIT	1003:7	1003:14	4	row = 0 ;
EXPR	1003:7	1003:7	5	row = 0
ASSIGN	1003:7	1003:13	6	row = 0
LVAL	1003:7	1003:7	7	row
FIELD	1003:7	1003:7	8	row
LEAF_NODE	1003:7	1003:7	9	row
ASSIGN_OP	1003:11	1003:11	7	=
LEAF_NODE	1003:11	1003:11	8	=
RVAL	1003:13	1003:13	7	0
FIELD	1003:13	1003:13	8	0
LEAF_NODE	1003:13	1003:13	9	0
LEAF_NODE	1003:14	1003:14	5	;
CONDITION	1003:16	1003:16	4	row < imagelength
EXPR	1003:16	1003:22	5	row < imagelength
FIELD	1003:16	1003:16	6	row
LEAF_NODE	1003:16	1003:16	7	row
REL_OPERATOR	1003:20	1003:20	6	<
LEAF_NODE	1003:20	1003:20	7	<
FIELD	1003:22	1003:22	6	imagelength
LEAF_NODE	1003:22	1003:22	7	imagelength
LEAF_NODE	1003:33	1003:33	4	;
FOR_EXPR	1003:35	1003:35	4	row += tl
EXPR	1003:35	1003:35	5	row += tl
ASSIGN	1003:35	1003:42	6	row += tl
LVAL	1003:35	1003:35	7	row
FIELD	1003:35	1003:35	8	row
LEAF_NODE	1003:35	1003:35	9	row
ASSIGN_OP	1003:39	1003:39	7	+=
LEAF_NODE	1003:39	1003:39	8	+=
RVAL	1003:42	1003:42	7	tl
FIELD	1003:42	1003:42	8	tl
LEAF_NODE	1003:42	1003:42	9	tl
LEAF_NODE	1003:44	1003:44	4	)
STATEMENTS	1004:4	1102:4	4	
LEAF_NODE	1004:4	1004:4	5	{
STATEMENTS	1005:4	1006:4	5	
EXPR_STATEMENT	1005:4	1005:60	6	nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
EXPR	1005:4	1005:4	7	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	1005:4	1005:11	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	1005:4	1005:4	9	nrow
FIELD	1005:4	1005:4	10	nrow
LEAF_NODE	1005:4	1005:4	11	nrow
ASSIGN_OP	1005:9	1005:9	9	=
LEAF_NODE	1005:9	1005:9	10	=
RVAL	1005:11	1005:11	9	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	1005:11	1005:58	10	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	1005:11	1005:34	11	( row + tl > imagelength )
LEAF_NODE	1005:11	1005:11	12	(
FIELD	1005:12	1005:12	12	row
LEAF_NODE	1005:12	1005:12	13	row
LEAF_NODE	1005:16	1005:16	12	+
FIELD	1005:18	1005:18	12	tl
LEAF_NODE	1005:18	1005:18	13	tl
REL_OPERATOR	1005:21	1005:21	12	>
LEAF_NODE	1005:21	1005:21	13	>
FIELD	1005:23	1005:23	12	imagelength
LEAF_NODE	1005:23	1005:23	13	imagelength
LEAF_NODE	1005:34	1005:34	12	)
LEAF_NODE	1005:36	1005:36	11	?
EXPR	1005:38	1005:52	11	imagelength - row
FIELD	1005:38	1005:38	12	imagelength
LEAF_NODE	1005:38	1005:38	13	imagelength
LEAF_NODE	1005:50	1005:50	12	-
FIELD	1005:52	1005:52	12	row
LEAF_NODE	1005:52	1005:52	13	row
LEAF_NODE	1005:56	1005:56	11	:
FIELD	1005:58	1005:58	11	tl
LEAF_NODE	1005:58	1005:58	12	tl
LEAF_NODE	1005:60	1005:60	7	;
ITERATION	1006:4	1007:6	6	
KEYWORD	1006:4	1006:4	7	for
LEAF_NODE	1006:4	1006:4	8	for
LEAF_NODE	1006:8	1006:8	7	(
FOR_INIT	1006:9	1006:16	7	col = 0 ;
EXPR	1006:9	1006:9	8	col = 0
ASSIGN	1006:9	1006:15	9	col = 0
LVAL	1006:9	1006:9	10	col
FIELD	1006:9	1006:9	11	col
LEAF_NODE	1006:9	1006:9	12	col
ASSIGN_OP	1006:13	1006:13	10	=
LEAF_NODE	1006:13	1006:13	11	=
RVAL	1006:15	1006:15	10	0
FIELD	1006:15	1006:15	11	0
LEAF_NODE	1006:15	1006:15	12	0
LEAF_NODE	1006:16	1006:16	8	;
CONDITION	1006:18	1006:18	7	col < imagewidth
EXPR	1006:18	1006:24	8	col < imagewidth
FIELD	1006:18	1006:18	9	col
LEAF_NODE	1006:18	1006:18	10	col
REL_OPERATOR	1006:22	1006:22	9	<
LEAF_NODE	1006:22	1006:22	10	<
FIELD	1006:24	1006:24	9	imagewidth
LEAF_NODE	1006:24	1006:24	10	imagewidth
LEAF_NODE	1006:34	1006:34	7	;
FOR_EXPR	1006:36	1006:36	7	col += tw
EXPR	1006:36	1006:36	8	col += tw
ASSIGN	1006:36	1006:43	9	col += tw
LVAL	1006:36	1006:36	10	col
FIELD	1006:36	1006:36	11	col
LEAF_NODE	1006:36	1006:36	12	col
ASSIGN_OP	1006:40	1006:40	10	+=
LEAF_NODE	1006:40	1006:40	11	+=
RVAL	1006:43	1006:43	10	tw
FIELD	1006:43	1006:43	11	tw
LEAF_NODE	1006:43	1006:43	12	tw
LEAF_NODE	1006:45	1006:45	7	)
STATEMENTS	1007:6	1101:6	7	
LEAF_NODE	1007:6	1007:6	8	{
STATEMENTS	1008:6	1050:6	8	
ITERATION	1008:6	1009:8	9	
KEYWORD	1008:6	1008:6	10	for
LEAF_NODE	1008:6	1008:6	11	for
LEAF_NODE	1008:10	1008:10	10	(
FOR_INIT	1008:11	1008:16	10	s = 0 ;
EXPR	1008:11	1008:11	11	s = 0
ASSIGN	1008:11	1008:15	12	s = 0
LVAL	1008:11	1008:11	13	s
FIELD	1008:11	1008:11	14	s
LEAF_NODE	1008:11	1008:11	15	s
ASSIGN_OP	1008:13	1008:13	13	=
LEAF_NODE	1008:13	1008:13	14	=
RVAL	1008:15	1008:15	13	0
FIELD	1008:15	1008:15	14	0
LEAF_NODE	1008:15	1008:15	15	0
LEAF_NODE	1008:16	1008:16	11	;
CONDITION	1008:18	1008:18	10	s < spp && s < MAX_SAMPLES
EXPR	1008:18	1008:18	11	s < spp && s < MAX_SAMPLES
AND	1008:18	1008:29	12	s < spp && s < MAX_SAMPLES
EXPR	1008:18	1008:22	13	s < spp
FIELD	1008:18	1008:18	14	s
LEAF_NODE	1008:18	1008:18	15	s
REL_OPERATOR	1008:20	1008:20	14	<
LEAF_NODE	1008:20	1008:20	15	<
FIELD	1008:22	1008:22	14	spp
LEAF_NODE	1008:22	1008:22	15	spp
LEAF_NODE	1008:26	1008:26	13	&&
EXPR	1008:29	1008:33	13	s < MAX_SAMPLES
FIELD	1008:29	1008:29	14	s
LEAF_NODE	1008:29	1008:29	15	s
REL_OPERATOR	1008:31	1008:31	14	<
LEAF_NODE	1008:31	1008:31	15	<
FIELD	1008:33	1008:33	14	MAX_SAMPLES
LEAF_NODE	1008:33	1008:33	15	MAX_SAMPLES
LEAF_NODE	1008:44	1008:44	10	;
FOR_EXPR	1008:46	1008:46	10	s ++
EXPR	1008:46	1008:46	11	s ++
FIELD	1008:46	1008:47	12	s ++
LEAF_NODE	1008:46	1008:46	13	s
LEAF_NODE	1008:47	1008:47	13	++
LEAF_NODE	1008:49	1008:49	10	)
STATEMENTS	1009:8	1027:1	10	
LEAF_NODE	1009:8	1009:8	11	{
STATEMENTS	1010:1	1011:8	11	
EXPR_STATEMENT	1010:1	1010:55	12	tbytes = TIFFReadTile ( in , srcbuffs [ s ] , col , row , 0 , s ) ;
EXPR	1010:1	1010:1	13	tbytes = TIFFReadTile ( in , srcbuffs [ s ] , col , row , 0 , s )
ASSIGN	1010:1	1010:10	14	tbytes = TIFFReadTile ( in , srcbuffs [ s ] , col , row , 0 , s )
LVAL	1010:1	1010:1	15	tbytes
FIELD	1010:1	1010:1	16	tbytes
LEAF_NODE	1010:1	1010:1	17	tbytes
ASSIGN_OP	1010:8	1010:8	15	=
LEAF_NODE	1010:8	1010:8	16	=
RVAL	1010:10	1010:10	15	TIFFReadTile ( in , srcbuffs [ s ] , col , row , 0 , s )
FUNCTION_CALL	1010:10	1010:54	16	TIFFReadTile ( in , srcbuffs [ s ] , col , row , 0 , s )
CALLEE	1010:10	1010:10	17	TIFFReadTile
LEAF_NODE	1010:10	1010:10	18	TIFFReadTile
LEAF_NODE	1010:22	1010:22	17	(
ARGUMENT	1010:23	1010:23	17	in
FIELD	1010:23	1010:23	18	in
LEAF_NODE	1010:23	1010:23	19	in
LEAF_NODE	1010:25	1010:25	17	,
ARGUMENT	1010:27	1010:27	17	srcbuffs [ s ]
FIELD	1010:27	1010:37	18	srcbuffs [ s ]
LEAF_NODE	1010:27	1010:27	19	srcbuffs
LEAF_NODE	1010:35	1010:35	19	[
EXPR	1010:36	1010:36	19	s
FIELD	1010:36	1010:36	20	s
LEAF_NODE	1010:36	1010:36	21	s
LEAF_NODE	1010:37	1010:37	19	]
LEAF_NODE	1010:38	1010:38	17	,
ARGUMENT	1010:40	1010:40	17	col
FIELD	1010:40	1010:40	18	col
LEAF_NODE	1010:40	1010:40	19	col
LEAF_NODE	1010:43	1010:43	17	,
ARGUMENT	1010:45	1010:45	17	row
FIELD	1010:45	1010:45	18	row
LEAF_NODE	1010:45	1010:45	19	row
LEAF_NODE	1010:48	1010:48	17	,
ARGUMENT	1010:50	1010:50	17	0
FIELD	1010:50	1010:50	18	0
LEAF_NODE	1010:50	1010:50	19	0
LEAF_NODE	1010:51	1010:51	17	,
ARGUMENT	1010:53	1010:53	17	s
FIELD	1010:53	1010:53	18	s
LEAF_NODE	1010:53	1010:53	19	s
LEAF_NODE	1010:54	1010:54	17	)
LEAF_NODE	1010:55	1010:55	13	;
SELECTION	1011:8	1012:10	12	
KEYWORD	1011:8	1011:8	13	if
LEAF_NODE	1011:8	1011:8	14	if
LEAF_NODE	1011:11	1011:11	13	(
CONDITION	1011:12	1011:12	13	tbytes < 0 && ! ignore
EXPR	1011:12	1011:12	14	tbytes < 0 && ! ignore
AND	1011:12	1011:27	15	tbytes < 0 && ! ignore
EXPR	1011:12	1011:21	16	tbytes < 0
FIELD	1011:12	1011:12	17	tbytes
LEAF_NODE	1011:12	1011:12	18	tbytes
REL_OPERATOR	1011:19	1011:19	17	<
LEAF_NODE	1011:19	1011:19	18	<
FIELD	1011:21	1011:21	17	0
LEAF_NODE	1011:21	1011:21	18	0
LEAF_NODE	1011:24	1011:24	16	&&
EXPR	1011:27	1011:27	16	! ignore
UNARY_EXPR	1011:27	1011:28	17	! ignore
UNARY_OPERATOR	1011:27	1011:27	18	!
LEAF_NODE	1011:27	1011:27	19	!
FIELD	1011:28	1011:28	18	ignore
LEAF_NODE	1011:28	1011:28	19	ignore
LEAF_NODE	1011:34	1011:34	13	)
STATEMENTS	1012:10	1026:3	13	
LEAF_NODE	1012:10	1012:10	14	{
STATEMENTS	1013:3	1025:10	14	
LEAF_NODE	1013:3	1013:3	15	TIFFError
LEAF_NODE	1013:12	1013:12	15	(
LEAF_NODE	1013:13	1013:13	15	TIFFFileName
LEAF_NODE	1013:25	1013:25	15	(
LEAF_NODE	1013:26	1013:26	15	in
LEAF_NODE	1013:28	1013:28	15	)
LEAF_NODE	1013:29	1013:29	15	,
LEAF_NODE	1014:17	1014:17	15	"Error, can't read tile for row %lu col %lu, "
LEAF_NODE	1015:3	1015:3	15	"sample %lu"
LEAF_NODE	1015:15	1015:15	15	,
LEAF_NODE	1016:3	1016:3	15	(
LEAF_NODE	1016:4	1016:4	15	unsigned
LEAF_NODE	1016:13	1016:13	15	long
LEAF_NODE	1016:17	1016:17	15	)
LEAF_NODE	1016:19	1016:19	15	col
LEAF_NODE	1016:22	1016:22	15	,
LEAF_NODE	1016:24	1016:24	15	(
LEAF_NODE	1016:25	1016:25	15	unsigned
LEAF_NODE	1016:34	1016:34	15	long
LEAF_NODE	1016:38	1016:38	15	)
LEAF_NODE	1016:40	1016:40	15	row
LEAF_NODE	1016:43	1016:43	15	,
LEAF_NODE	1017:3	1017:3	15	(
LEAF_NODE	1017:4	1017:4	15	unsigned
LEAF_NODE	1017:13	1017:13	15	long
LEAF_NODE	1017:17	1017:17	15	)
LEAF_NODE	1017:19	1017:19	15	s
LEAF_NODE	1017:20	1017:20	15	)
LEAF_NODE	1017:21	1017:21	15	;
EXPR_STATEMENT	1018:3	1018:13	15	status = 0 ;
EXPR	1018:3	1018:3	16	status = 0
ASSIGN	1018:3	1018:12	17	status = 0
LVAL	1018:3	1018:3	18	status
FIELD	1018:3	1018:3	19	status
LEAF_NODE	1018:3	1018:3	20	status
ASSIGN_OP	1018:10	1018:10	18	=
LEAF_NODE	1018:10	1018:10	19	=
RVAL	1018:12	1018:12	18	0
FIELD	1018:12	1018:12	19	0
LEAF_NODE	1018:12	1018:12	20	0
LEAF_NODE	1018:13	1018:13	16	;
ITERATION	1019:10	1020:12	15	
KEYWORD	1019:10	1019:10	16	for
LEAF_NODE	1019:10	1019:10	17	for
LEAF_NODE	1019:14	1019:14	16	(
FOR_INIT	1019:15	1019:25	16	sample = 0 ;
EXPR	1019:15	1019:15	17	sample = 0
ASSIGN	1019:15	1019:24	18	sample = 0
LVAL	1019:15	1019:15	19	sample
FIELD	1019:15	1019:15	20	sample
LEAF_NODE	1019:15	1019:15	21	sample
ASSIGN_OP	1019:22	1019:22	19	=
LEAF_NODE	1019:22	1019:22	20	=
RVAL	1019:24	1019:24	19	0
FIELD	1019:24	1019:24	20	0
LEAF_NODE	1019:24	1019:24	21	0
LEAF_NODE	1019:25	1019:25	17	;
CONDITION	1019:27	1019:27	16	( sample < spp ) && ( sample < MAX_SAMPLES )
EXPR	1019:27	1019:27	17	( sample < spp ) && ( sample < MAX_SAMPLES )
AND	1019:27	1019:45	18	( sample < spp ) && ( sample < MAX_SAMPLES )
EXPR	1019:27	1019:40	19	( sample < spp )
LEAF_NODE	1019:27	1019:27	20	(
FIELD	1019:28	1019:28	20	sample
LEAF_NODE	1019:28	1019:28	21	sample
REL_OPERATOR	1019:35	1019:35	20	<
LEAF_NODE	1019:35	1019:35	21	<
FIELD	1019:37	1019:37	20	spp
LEAF_NODE	1019:37	1019:37	21	spp
LEAF_NODE	1019:40	1019:40	20	)
LEAF_NODE	1019:42	1019:42	19	&&
EXPR	1019:45	1019:66	19	( sample < MAX_SAMPLES )
LEAF_NODE	1019:45	1019:45	20	(
FIELD	1019:46	1019:46	20	sample
LEAF_NODE	1019:46	1019:46	21	sample
REL_OPERATOR	1019:53	1019:53	20	<
LEAF_NODE	1019:53	1019:53	21	<
FIELD	1019:55	1019:55	20	MAX_SAMPLES
LEAF_NODE	1019:55	1019:55	21	MAX_SAMPLES
LEAF_NODE	1019:66	1019:66	20	)
LEAF_NODE	1019:67	1019:67	16	;
FOR_EXPR	1019:69	1019:69	16	sample ++
EXPR	1019:69	1019:69	17	sample ++
FIELD	1019:69	1019:75	18	sample ++
LEAF_NODE	1019:69	1019:69	19	sample
LEAF_NODE	1019:75	1019:75	19	++
LEAF_NODE	1019:77	1019:77	16	)
STATEMENTS	1020:12	1024:12	16	
LEAF_NODE	1020:12	1020:12	17	{
STATEMENTS	1021:12	1022:12	17	
EXPR_STATEMENT	1021:12	1021:36	18	tbuff = srcbuffs [ sample ] ;
EXPR	1021:12	1021:12	19	tbuff = srcbuffs [ sample ]
ASSIGN	1021:12	1021:20	20	tbuff = srcbuffs [ sample ]
LVAL	1021:12	1021:12	21	tbuff
FIELD	1021:12	1021:12	22	tbuff
LEAF_NODE	1021:12	1021:12	23	tbuff
ASSIGN_OP	1021:18	1021:18	21	=
LEAF_NODE	1021:18	1021:18	22	=
RVAL	1021:20	1021:20	21	srcbuffs [ sample ]
FIELD	1021:20	1021:35	22	srcbuffs [ sample ]
LEAF_NODE	1021:20	1021:20	23	srcbuffs
LEAF_NODE	1021:28	1021:28	23	[
EXPR	1021:29	1021:29	23	sample
FIELD	1021:29	1021:29	24	sample
LEAF_NODE	1021:29	1021:29	25	sample
LEAF_NODE	1021:35	1021:35	23	]
LEAF_NODE	1021:36	1021:36	19	;
SELECTION	1022:12	1023:14	18	
KEYWORD	1022:12	1022:12	19	if
LEAF_NODE	1022:12	1022:12	20	if
LEAF_NODE	1022:15	1022:15	19	(
CONDITION	1022:16	1022:16	19	tbuff != NULL
EXPR	1022:16	1022:25	20	tbuff != NULL
FIELD	1022:16	1022:16	21	tbuff
LEAF_NODE	1022:16	1022:16	22	tbuff
EQ_OPERATOR	1022:22	1022:22	21	!=
LEAF_NODE	1022:22	1022:22	22	!=
FIELD	1022:25	1022:25	21	NULL
LEAF_NODE	1022:25	1022:25	22	NULL
LEAF_NODE	1022:29	1022:29	19	)
STATEMENTS	1023:14	1023:14	19	
EXPR_STATEMENT	1023:14	1023:30	20	_TIFFfree ( tbuff ) ;
EXPR	1023:14	1023:14	21	_TIFFfree ( tbuff )
FUNCTION_CALL	1023:14	1023:29	22	_TIFFfree ( tbuff )
CALLEE	1023:14	1023:14	23	_TIFFfree
LEAF_NODE	1023:14	1023:14	24	_TIFFfree
LEAF_NODE	1023:23	1023:23	23	(
ARGUMENT	1023:24	1023:24	23	tbuff
FIELD	1023:24	1023:24	24	tbuff
LEAF_NODE	1023:24	1023:24	25	tbuff
LEAF_NODE	1023:29	1023:29	23	)
LEAF_NODE	1023:30	1023:30	21	;
LEAF_NODE	1024:12	1024:12	17	}
JUMP_STATEMENT	1025:10	1025:23	15	return status ;
KEYWORD	1025:10	1025:10	16	return
LEAF_NODE	1025:10	1025:10	17	return
DESTINATION	1025:17	1025:17	16	status
EXPR	1025:17	1025:17	17	status
FIELD	1025:17	1025:17	18	status
LEAF_NODE	1025:17	1025:17	19	status
LEAF_NODE	1025:23	1025:23	16	;
LEAF_NODE	1026:3	1026:3	14	}
LEAF_NODE	1027:1	1027:1	11	}
SELECTION	1032:6	1033:8	9	
KEYWORD	1032:6	1032:6	10	if
LEAF_NODE	1032:6	1032:6	11	if
LEAF_NODE	1032:9	1032:9	10	(
CONDITION	1032:10	1032:10	10	col + tw > imagewidth
EXPR	1032:10	1032:21	11	col + tw > imagewidth
FIELD	1032:10	1032:10	12	col
LEAF_NODE	1032:10	1032:10	13	col
LEAF_NODE	1032:14	1032:14	12	+
FIELD	1032:16	1032:16	12	tw
LEAF_NODE	1032:16	1032:16	13	tw
REL_OPERATOR	1032:19	1032:19	12	>
LEAF_NODE	1032:19	1032:19	13	>
FIELD	1032:21	1032:21	12	imagewidth
LEAF_NODE	1032:21	1032:21	13	imagewidth
LEAF_NODE	1032:31	1032:31	10	)
STATEMENTS	1033:8	1033:8	10	
EXPR_STATEMENT	1033:8	1033:31	11	ncol = imagewidth - col ;
EXPR	1033:8	1033:8	12	ncol = imagewidth - col
ASSIGN	1033:8	1033:15	13	ncol = imagewidth - col
LVAL	1033:8	1033:8	14	ncol
FIELD	1033:8	1033:8	15	ncol
LEAF_NODE	1033:8	1033:8	16	ncol
ASSIGN_OP	1033:13	1033:13	14	=
LEAF_NODE	1033:13	1033:13	15	=
RVAL	1033:15	1033:28	14	imagewidth - col
FIELD	1033:15	1033:15	15	imagewidth
LEAF_NODE	1033:15	1033:15	16	imagewidth
LEAF_NODE	1033:26	1033:26	15	-
FIELD	1033:28	1033:28	15	col
LEAF_NODE	1033:28	1033:28	16	col
LEAF_NODE	1033:31	1033:31	12	;
SELECTION	1034:6	1035:8	9	
KEYWORD	1034:6	1034:6	10	else
LEAF_NODE	1034:6	1034:6	11	else
STATEMENTS	1035:8	1035:8	10	
EXPR_STATEMENT	1035:8	1035:17	11	ncol = tw ;
EXPR	1035:8	1035:8	12	ncol = tw
ASSIGN	1035:8	1035:15	13	ncol = tw
LVAL	1035:8	1035:8	14	ncol
FIELD	1035:8	1035:8	15	ncol
LEAF_NODE	1035:8	1035:8	16	ncol
ASSIGN_OP	1035:13	1035:13	14	=
LEAF_NODE	1035:13	1035:13	15	=
RVAL	1035:15	1035:15	14	tw
FIELD	1035:15	1035:15	15	tw
LEAF_NODE	1035:15	1035:15	16	tw
LEAF_NODE	1035:17	1035:17	12	;
LEAF_NODE	1037:6	1037:6	9	row_offset
LEAF_NODE	1037:17	1037:17	9	=
LEAF_NODE	1037:19	1037:19	9	row
LEAF_NODE	1037:23	1037:23	9	*
LEAF_NODE	1037:25	1037:25	9	(
LEAF_NODE	1037:26	1037:26	9	(
LEAF_NODE	1037:27	1037:27	9	(
LEAF_NODE	1037:28	1037:28	9	imagewidth
LEAF_NODE	1037:39	1037:39	9	*
LEAF_NODE	1037:41	1037:41	9	spp
LEAF_NODE	1037:45	1037:45	9	*
LEAF_NODE	1037:47	1037:47	9	bps
LEAF_NODE	1037:50	1037:50	9	)
LEAF_NODE	1037:52	1037:52	9	+
LEAF_NODE	1037:54	1037:54	9	7
LEAF_NODE	1037:55	1037:55	9	)
LEAF_NODE	1037:57	1037:57	9	/
LEAF_NODE	1037:59	1037:59	9	8
LEAF_NODE	1037:60	1037:60	9	)
LEAF_NODE	1037:61	1037:61	9	;
LEAF_NODE	1038:6	1038:6	9	col_offset
LEAF_NODE	1038:17	1038:17	9	=
LEAF_NODE	1038:19	1038:19	9	(
LEAF_NODE	1038:20	1038:20	9	(
LEAF_NODE	1038:21	1038:21	9	col
LEAF_NODE	1038:25	1038:25	9	*
LEAF_NODE	1038:27	1038:27	9	spp
LEAF_NODE	1038:31	1038:31	9	*
LEAF_NODE	1038:33	1038:33	9	bps
LEAF_NODE	1038:36	1038:36	9	)
LEAF_NODE	1038:38	1038:38	9	+
LEAF_NODE	1038:40	1038:40	9	7
LEAF_NODE	1038:41	1038:41	9	)
LEAF_NODE	1038:43	1038:43	9	/
EXPR_STATEMENT	1038:45	1038:46	9	8 ;
EXPR	1038:45	1038:45	10	8
FIELD	1038:45	1038:45	11	8
LEAF_NODE	1038:45	1038:45	12	8
LEAF_NODE	1038:46	1038:46	10	;
EXPR_STATEMENT	1039:6	1039:43	9	bufp = obuf + row_offset + col_offset ;
EXPR	1039:6	1039:6	10	bufp = obuf + row_offset + col_offset
ASSIGN	1039:6	1039:13	11	bufp = obuf + row_offset + col_offset
LVAL	1039:6	1039:6	12	bufp
FIELD	1039:6	1039:6	13	bufp
LEAF_NODE	1039:6	1039:6	14	bufp
ASSIGN_OP	1039:11	1039:11	12	=
LEAF_NODE	1039:11	1039:11	13	=
RVAL	1039:13	1039:33	12	obuf + row_offset + col_offset
FIELD	1039:13	1039:13	13	obuf
LEAF_NODE	1039:13	1039:13	14	obuf
LEAF_NODE	1039:18	1039:18	13	+
FIELD	1039:20	1039:20	13	row_offset
LEAF_NODE	1039:20	1039:20	14	row_offset
LEAF_NODE	1039:31	1039:31	13	+
FIELD	1039:33	1039:33	13	col_offset
LEAF_NODE	1039:33	1039:33	14	col_offset
LEAF_NODE	1039:43	1039:43	10	;
SELECTION	1041:6	1042:8	9	
KEYWORD	1041:6	1041:6	10	if
LEAF_NODE	1041:6	1041:6	11	if
LEAF_NODE	1041:9	1041:9	10	(
CONDITION	1041:10	1041:10	10	( bps % 8 ) == 0
EXPR	1041:10	1041:23	11	( bps % 8 ) == 0
LEAF_NODE	1041:10	1041:10	12	(
FIELD	1041:11	1041:11	12	bps
LEAF_NODE	1041:11	1041:11	13	bps
LEAF_NODE	1041:15	1041:15	12	%
FIELD	1041:17	1041:17	12	8
LEAF_NODE	1041:17	1041:17	13	8
LEAF_NODE	1041:18	1041:18	12	)
EQ_OPERATOR	1041:20	1041:20	12	==
LEAF_NODE	1041:20	1041:20	13	==
FIELD	1041:23	1041:23	12	0
LEAF_NODE	1041:23	1041:23	13	0
LEAF_NODE	1041:24	1041:24	10	)
STATEMENTS	1042:8	1049:1	10	
LEAF_NODE	1042:8	1042:8	11	{
STATEMENTS	1043:8	1043:8	11	
SELECTION	1043:8	1045:3	12	
KEYWORD	1043:8	1043:8	13	if
LEAF_NODE	1043:8	1043:8	14	if
LEAF_NODE	1043:11	1043:11	13	(
CONDITION	1043:12	1043:12	13	combineSeparateTileSamplesBytes ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
EXPR	1043:12	1043:12	14	combineSeparateTileSamplesBytes ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
FUNCTION_CALL	1043:12	1044:33	15	combineSeparateTileSamplesBytes ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
CALLEE	1043:12	1043:12	16	combineSeparateTileSamplesBytes
LEAF_NODE	1043:12	1043:12	17	combineSeparateTileSamplesBytes
LEAF_NODE	1043:43	1043:43	16	(
ARGUMENT	1043:44	1043:44	16	srcbuffs
FIELD	1043:44	1043:44	17	srcbuffs
LEAF_NODE	1043:44	1043:44	18	srcbuffs
LEAF_NODE	1043:52	1043:52	16	,
ARGUMENT	1043:54	1043:54	16	bufp
FIELD	1043:54	1043:54	17	bufp
LEAF_NODE	1043:54	1043:54	18	bufp
LEAF_NODE	1043:58	1043:58	16	,
ARGUMENT	1043:60	1043:60	16	ncol
FIELD	1043:60	1043:60	17	ncol
LEAF_NODE	1043:60	1043:60	18	ncol
LEAF_NODE	1043:64	1043:64	16	,
ARGUMENT	1043:66	1043:66	16	nrow
FIELD	1043:66	1043:66	17	nrow
LEAF_NODE	1043:66	1043:66	18	nrow
LEAF_NODE	1043:70	1043:70	16	,
ARGUMENT	1043:72	1043:72	16	imagewidth
FIELD	1043:72	1043:72	17	imagewidth
LEAF_NODE	1043:72	1043:72	18	imagewidth
LEAF_NODE	1043:82	1043:82	16	,
ARGUMENT	1044:9	1044:9	16	tw
FIELD	1044:9	1044:9	17	tw
LEAF_NODE	1044:9	1044:9	18	tw
LEAF_NODE	1044:11	1044:11	16	,
ARGUMENT	1044:13	1044:13	16	spp
FIELD	1044:13	1044:13	17	spp
LEAF_NODE	1044:13	1044:13	18	spp
LEAF_NODE	1044:16	1044:16	16	,
ARGUMENT	1044:18	1044:18	16	bps
FIELD	1044:18	1044:18	17	bps
LEAF_NODE	1044:18	1044:18	18	bps
LEAF_NODE	1044:21	1044:21	16	,
ARGUMENT	1044:23	1044:23	16	NULL
FIELD	1044:23	1044:23	17	NULL
LEAF_NODE	1044:23	1044:23	18	NULL
LEAF_NODE	1044:27	1044:27	16	,
ARGUMENT	1044:29	1044:29	16	0
FIELD	1044:29	1044:29	17	0
LEAF_NODE	1044:29	1044:29	18	0
LEAF_NODE	1044:30	1044:30	16	,
ARGUMENT	1044:32	1044:32	16	0
FIELD	1044:32	1044:32	17	0
LEAF_NODE	1044:32	1044:32	18	0
LEAF_NODE	1044:33	1044:33	16	)
LEAF_NODE	1044:34	1044:34	13	)
STATEMENTS	1045:3	1048:9	13	
LEAF_NODE	1045:3	1045:3	14	{
STATEMENTS	1046:10	1047:10	14	
EXPR_STATEMENT	1046:10	1046:20	15	status = 0 ;
EXPR	1046:10	1046:10	16	status = 0
ASSIGN	1046:10	1046:19	17	status = 0
LVAL	1046:10	1046:10	18	status
FIELD	1046:10	1046:10	19	status
LEAF_NODE	1046:10	1046:10	20	status
ASSIGN_OP	1046:17	1046:17	18	=
LEAF_NODE	1046:17	1046:17	19	=
RVAL	1046:19	1046:19	18	0
FIELD	1046:19	1046:19	19	0
LEAF_NODE	1046:19	1046:19	20	0
LEAF_NODE	1046:20	1046:20	16	;
JUMP_STATEMENT	1047:10	1047:15	15	break DESTINATION ;
KEYWORD	1047:10	1047:10	16	break
LEAF_NODE	1047:10	1047:10	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1047:15	1047:15	16	;
LEAF_NODE	1048:9	1048:9	14	}
LEAF_NODE	1049:1	1049:1	11	}
SELECTION	1050:6	1051:8	9	
KEYWORD	1050:6	1050:6	10	else
LEAF_NODE	1050:6	1050:6	11	else
STATEMENTS	1051:8	1100:8	10	
LEAF_NODE	1051:8	1051:8	11	{
STATEMENTS	1052:8	1058:8	11	
EXPR_STATEMENT	1052:8	1052:48	12	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	1052:8	1052:8	13	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	1052:8	1052:27	14	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	1052:8	1052:8	15	bytes_per_pixel
FIELD	1052:8	1052:8	16	bytes_per_pixel
LEAF_NODE	1052:8	1052:8	17	bytes_per_pixel
ASSIGN_OP	1052:25	1052:25	15	=
LEAF_NODE	1052:25	1052:25	16	=
RVAL	1052:27	1052:47	15	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	1052:27	1052:27	16	(
LEAF_NODE	1052:28	1052:28	16	(
FIELD	1052:29	1052:29	16	bps
LEAF_NODE	1052:29	1052:29	17	bps
LEAF_NODE	1052:33	1052:33	16	*
FIELD	1052:35	1052:35	16	spp
LEAF_NODE	1052:35	1052:35	17	spp
LEAF_NODE	1052:38	1052:38	16	)
LEAF_NODE	1052:40	1052:40	16	+
FIELD	1052:42	1052:42	16	7
LEAF_NODE	1052:42	1052:42	17	7
LEAF_NODE	1052:43	1052:43	16	)
LEAF_NODE	1052:45	1052:45	16	/
FIELD	1052:47	1052:47	16	8
LEAF_NODE	1052:47	1052:47	17	8
LEAF_NODE	1052:48	1052:48	13	;
SELECTION	1053:8	1054:10	12	
KEYWORD	1053:8	1053:8	13	if
LEAF_NODE	1053:8	1053:8	14	if
LEAF_NODE	1053:11	1053:11	13	(
CONDITION	1053:12	1053:12	13	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	1053:12	1053:51	14	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	1053:12	1053:12	15	bytes_per_pixel
LEAF_NODE	1053:12	1053:12	16	bytes_per_pixel
REL_OPERATOR	1053:28	1053:28	15	<
LEAF_NODE	1053:28	1053:28	16	<
LEAF_NODE	1053:30	1053:30	15	(
FIELD	1053:31	1053:31	15	bytes_per_sample
LEAF_NODE	1053:31	1053:31	16	bytes_per_sample
LEAF_NODE	1053:48	1053:48	15	+
FIELD	1053:50	1053:50	15	1
LEAF_NODE	1053:50	1053:50	16	1
LEAF_NODE	1053:51	1053:51	15	)
LEAF_NODE	1053:52	1053:52	13	)
STATEMENTS	1054:10	1054:10	13	
EXPR_STATEMENT	1054:10	1054:39	14	shift_width = bytes_per_pixel ;
EXPR	1054:10	1054:10	15	shift_width = bytes_per_pixel
ASSIGN	1054:10	1054:24	16	shift_width = bytes_per_pixel
LVAL	1054:10	1054:10	17	shift_width
FIELD	1054:10	1054:10	18	shift_width
LEAF_NODE	1054:10	1054:10	19	shift_width
ASSIGN_OP	1054:22	1054:22	17	=
LEAF_NODE	1054:22	1054:22	18	=
RVAL	1054:24	1054:24	17	bytes_per_pixel
FIELD	1054:24	1054:24	18	bytes_per_pixel
LEAF_NODE	1054:24	1054:24	19	bytes_per_pixel
LEAF_NODE	1054:39	1054:39	15	;
SELECTION	1055:8	1056:10	12	
KEYWORD	1055:8	1055:8	13	else
LEAF_NODE	1055:8	1055:8	14	else
STATEMENTS	1056:10	1056:10	13	
EXPR_STATEMENT	1056:10	1056:44	14	shift_width = bytes_per_sample + 1 ;
EXPR	1056:10	1056:10	15	shift_width = bytes_per_sample + 1
ASSIGN	1056:10	1056:24	16	shift_width = bytes_per_sample + 1
LVAL	1056:10	1056:10	17	shift_width
FIELD	1056:10	1056:10	18	shift_width
LEAF_NODE	1056:10	1056:10	19	shift_width
ASSIGN_OP	1056:22	1056:22	17	=
LEAF_NODE	1056:22	1056:22	18	=
RVAL	1056:24	1056:43	17	bytes_per_sample + 1
FIELD	1056:24	1056:24	18	bytes_per_sample
LEAF_NODE	1056:24	1056:24	19	bytes_per_sample
LEAF_NODE	1056:41	1056:41	18	+
FIELD	1056:43	1056:43	18	1
LEAF_NODE	1056:43	1056:43	19	1
LEAF_NODE	1056:44	1056:44	15	;
SELECTION	1058:8	1059:10	12	
KEYWORD	1058:8	1058:8	13	switch
LEAF_NODE	1058:8	1058:8	14	switch
LEAF_NODE	1058:15	1058:15	13	(
CONDITION	1058:16	1058:16	13	shift_width
EXPR	1058:16	1058:16	14	shift_width
FIELD	1058:16	1058:16	15	shift_width
LEAF_NODE	1058:16	1058:16	16	shift_width
LEAF_NODE	1058:27	1058:27	13	)
STATEMENTS	1059:10	1099:10	13	
LEAF_NODE	1059:10	1059:10	14	{
STATEMENTS	1060:10	1098:18	14	
LABEL	1060:10	1060:16	15	case 1 :
LEAF_NODE	1060:10	1060:10	16	case
LEAF_NODE	1060:15	1060:15	16	1
LEAF_NODE	1060:16	1060:16	16	:
SELECTION	1060:18	1063:13	15	
KEYWORD	1060:18	1060:18	16	if
LEAF_NODE	1060:18	1060:18	17	if
LEAF_NODE	1060:21	1060:21	16	(
CONDITION	1060:22	1060:22	16	combineSeparateTileSamples8bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
EXPR	1060:22	1060:22	17	combineSeparateTileSamples8bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
FUNCTION_CALL	1060:22	1062:23	18	combineSeparateTileSamples8bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
CALLEE	1060:22	1060:22	19	combineSeparateTileSamples8bits
LEAF_NODE	1060:22	1060:22	20	combineSeparateTileSamples8bits
LEAF_NODE	1060:54	1060:54	19	(
ARGUMENT	1060:55	1060:55	19	srcbuffs
FIELD	1060:55	1060:55	20	srcbuffs
LEAF_NODE	1060:55	1060:55	21	srcbuffs
LEAF_NODE	1060:63	1060:63	19	,
ARGUMENT	1060:65	1060:65	19	bufp
FIELD	1060:65	1060:65	20	bufp
LEAF_NODE	1060:65	1060:65	21	bufp
LEAF_NODE	1060:69	1060:69	19	,
ARGUMENT	1060:71	1060:71	19	ncol
FIELD	1060:71	1060:71	20	ncol
LEAF_NODE	1060:71	1060:71	21	ncol
LEAF_NODE	1060:75	1060:75	19	,
ARGUMENT	1060:77	1060:77	19	nrow
FIELD	1060:77	1060:77	20	nrow
LEAF_NODE	1060:77	1060:77	21	nrow
LEAF_NODE	1060:81	1060:81	19	,
ARGUMENT	1061:55	1061:55	19	imagewidth
FIELD	1061:55	1061:55	20	imagewidth
LEAF_NODE	1061:55	1061:55	21	imagewidth
LEAF_NODE	1061:65	1061:65	19	,
ARGUMENT	1061:67	1061:67	19	tw
FIELD	1061:67	1061:67	20	tw
LEAF_NODE	1061:67	1061:67	21	tw
LEAF_NODE	1061:69	1061:69	19	,
ARGUMENT	1061:71	1061:71	19	spp
FIELD	1061:71	1061:71	20	spp
LEAF_NODE	1061:71	1061:71	21	spp
LEAF_NODE	1061:74	1061:74	19	,
ARGUMENT	1061:76	1061:76	19	bps
FIELD	1061:76	1061:76	20	bps
LEAF_NODE	1061:76	1061:76	21	bps
LEAF_NODE	1061:79	1061:79	19	,
ARGUMENT	1062:13	1062:13	19	NULL
FIELD	1062:13	1062:13	20	NULL
LEAF_NODE	1062:13	1062:13	21	NULL
LEAF_NODE	1062:17	1062:17	19	,
ARGUMENT	1062:19	1062:19	19	0
FIELD	1062:19	1062:19	20	0
LEAF_NODE	1062:19	1062:19	21	0
LEAF_NODE	1062:20	1062:20	19	,
ARGUMENT	1062:22	1062:22	19	0
FIELD	1062:22	1062:22	20	0
LEAF_NODE	1062:22	1062:22	21	0
LEAF_NODE	1062:23	1062:23	19	)
LEAF_NODE	1062:24	1062:24	16	)
STATEMENTS	1063:13	1066:19	16	
LEAF_NODE	1063:13	1063:13	17	{
STATEMENTS	1064:20	1065:20	17	
EXPR_STATEMENT	1064:20	1064:30	18	status = 0 ;
EXPR	1064:20	1064:20	19	status = 0
ASSIGN	1064:20	1064:29	20	status = 0
LVAL	1064:20	1064:20	21	status
FIELD	1064:20	1064:20	22	status
LEAF_NODE	1064:20	1064:20	23	status
ASSIGN_OP	1064:27	1064:27	21	=
LEAF_NODE	1064:27	1064:27	22	=
RVAL	1064:29	1064:29	21	0
FIELD	1064:29	1064:29	22	0
LEAF_NODE	1064:29	1064:29	23	0
LEAF_NODE	1064:30	1064:30	19	;
JUMP_STATEMENT	1065:20	1065:25	18	break DESTINATION ;
KEYWORD	1065:20	1065:20	19	break
LEAF_NODE	1065:20	1065:20	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	1065:25	1065:25	19	;
LEAF_NODE	1066:19	1066:19	17	}
JUMP_STATEMENT	1067:11	1067:16	15	break DESTINATION ;
KEYWORD	1067:11	1067:11	16	break
LEAF_NODE	1067:11	1067:11	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1067:16	1067:16	16	;
LABEL	1068:10	1068:16	15	case 2 :
LEAF_NODE	1068:10	1068:10	16	case
LEAF_NODE	1068:15	1068:15	16	2
LEAF_NODE	1068:16	1068:16	16	:
SELECTION	1068:18	1071:13	15	
KEYWORD	1068:18	1068:18	16	if
LEAF_NODE	1068:18	1068:18	17	if
LEAF_NODE	1068:21	1068:21	16	(
CONDITION	1068:22	1068:22	16	combineSeparateTileSamples16bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
EXPR	1068:22	1068:22	17	combineSeparateTileSamples16bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
FUNCTION_CALL	1068:22	1070:23	18	combineSeparateTileSamples16bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
CALLEE	1068:22	1068:22	19	combineSeparateTileSamples16bits
LEAF_NODE	1068:22	1068:22	20	combineSeparateTileSamples16bits
LEAF_NODE	1068:55	1068:55	19	(
ARGUMENT	1068:56	1068:56	19	srcbuffs
FIELD	1068:56	1068:56	20	srcbuffs
LEAF_NODE	1068:56	1068:56	21	srcbuffs
LEAF_NODE	1068:64	1068:64	19	,
ARGUMENT	1068:66	1068:66	19	bufp
FIELD	1068:66	1068:66	20	bufp
LEAF_NODE	1068:66	1068:66	21	bufp
LEAF_NODE	1068:70	1068:70	19	,
ARGUMENT	1068:72	1068:72	19	ncol
FIELD	1068:72	1068:72	20	ncol
LEAF_NODE	1068:72	1068:72	21	ncol
LEAF_NODE	1068:76	1068:76	19	,
ARGUMENT	1068:78	1068:78	19	nrow
FIELD	1068:78	1068:78	20	nrow
LEAF_NODE	1068:78	1068:78	21	nrow
LEAF_NODE	1068:82	1068:82	19	,
ARGUMENT	1069:55	1069:55	19	imagewidth
FIELD	1069:55	1069:55	20	imagewidth
LEAF_NODE	1069:55	1069:55	21	imagewidth
LEAF_NODE	1069:65	1069:65	19	,
ARGUMENT	1069:67	1069:67	19	tw
FIELD	1069:67	1069:67	20	tw
LEAF_NODE	1069:67	1069:67	21	tw
LEAF_NODE	1069:69	1069:69	19	,
ARGUMENT	1069:71	1069:71	19	spp
FIELD	1069:71	1069:71	20	spp
LEAF_NODE	1069:71	1069:71	21	spp
LEAF_NODE	1069:74	1069:74	19	,
ARGUMENT	1069:76	1069:76	19	bps
FIELD	1069:76	1069:76	20	bps
LEAF_NODE	1069:76	1069:76	21	bps
LEAF_NODE	1069:79	1069:79	19	,
ARGUMENT	1070:13	1070:13	19	NULL
FIELD	1070:13	1070:13	20	NULL
LEAF_NODE	1070:13	1070:13	21	NULL
LEAF_NODE	1070:17	1070:17	19	,
ARGUMENT	1070:19	1070:19	19	0
FIELD	1070:19	1070:19	20	0
LEAF_NODE	1070:19	1070:19	21	0
LEAF_NODE	1070:20	1070:20	19	,
ARGUMENT	1070:22	1070:22	19	0
FIELD	1070:22	1070:22	20	0
LEAF_NODE	1070:22	1070:22	21	0
LEAF_NODE	1070:23	1070:23	19	)
LEAF_NODE	1070:24	1070:24	16	)
STATEMENTS	1071:13	1074:6	16	
LEAF_NODE	1071:13	1071:13	17	{
STATEMENTS	1072:20	1073:20	17	
EXPR_STATEMENT	1072:20	1072:30	18	status = 0 ;
EXPR	1072:20	1072:20	19	status = 0
ASSIGN	1072:20	1072:29	20	status = 0
LVAL	1072:20	1072:20	21	status
FIELD	1072:20	1072:20	22	status
LEAF_NODE	1072:20	1072:20	23	status
ASSIGN_OP	1072:27	1072:27	21	=
LEAF_NODE	1072:27	1072:27	22	=
RVAL	1072:29	1072:29	21	0
FIELD	1072:29	1072:29	22	0
LEAF_NODE	1072:29	1072:29	23	0
LEAF_NODE	1072:30	1072:30	19	;
JUMP_STATEMENT	1073:20	1073:25	18	break DESTINATION ;
KEYWORD	1073:20	1073:20	19	break
LEAF_NODE	1073:20	1073:20	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	1073:25	1073:25	19	;
LEAF_NODE	1074:6	1074:6	17	}
JUMP_STATEMENT	1075:11	1075:16	15	break DESTINATION ;
KEYWORD	1075:11	1075:11	16	break
LEAF_NODE	1075:11	1075:11	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1075:16	1075:16	16	;
LABEL	1076:10	1076:16	15	case 3 :
LEAF_NODE	1076:10	1076:10	16	case
LEAF_NODE	1076:15	1076:15	16	3
LEAF_NODE	1076:16	1076:16	16	:
SELECTION	1076:18	1079:13	15	
KEYWORD	1076:18	1076:18	16	if
LEAF_NODE	1076:18	1076:18	17	if
LEAF_NODE	1076:21	1076:21	16	(
CONDITION	1076:22	1076:22	16	combineSeparateTileSamples24bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
EXPR	1076:22	1076:22	17	combineSeparateTileSamples24bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
FUNCTION_CALL	1076:22	1078:23	18	combineSeparateTileSamples24bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
CALLEE	1076:22	1076:22	19	combineSeparateTileSamples24bits
LEAF_NODE	1076:22	1076:22	20	combineSeparateTileSamples24bits
LEAF_NODE	1076:55	1076:55	19	(
ARGUMENT	1076:56	1076:56	19	srcbuffs
FIELD	1076:56	1076:56	20	srcbuffs
LEAF_NODE	1076:56	1076:56	21	srcbuffs
LEAF_NODE	1076:64	1076:64	19	,
ARGUMENT	1076:66	1076:66	19	bufp
FIELD	1076:66	1076:66	20	bufp
LEAF_NODE	1076:66	1076:66	21	bufp
LEAF_NODE	1076:70	1076:70	19	,
ARGUMENT	1076:72	1076:72	19	ncol
FIELD	1076:72	1076:72	20	ncol
LEAF_NODE	1076:72	1076:72	21	ncol
LEAF_NODE	1076:76	1076:76	19	,
ARGUMENT	1076:78	1076:78	19	nrow
FIELD	1076:78	1076:78	20	nrow
LEAF_NODE	1076:78	1076:78	21	nrow
LEAF_NODE	1076:82	1076:82	19	,
ARGUMENT	1077:55	1077:55	19	imagewidth
FIELD	1077:55	1077:55	20	imagewidth
LEAF_NODE	1077:55	1077:55	21	imagewidth
LEAF_NODE	1077:65	1077:65	19	,
ARGUMENT	1077:67	1077:67	19	tw
FIELD	1077:67	1077:67	20	tw
LEAF_NODE	1077:67	1077:67	21	tw
LEAF_NODE	1077:69	1077:69	19	,
ARGUMENT	1077:71	1077:71	19	spp
FIELD	1077:71	1077:71	20	spp
LEAF_NODE	1077:71	1077:71	21	spp
LEAF_NODE	1077:74	1077:74	19	,
ARGUMENT	1077:76	1077:76	19	bps
FIELD	1077:76	1077:76	20	bps
LEAF_NODE	1077:76	1077:76	21	bps
LEAF_NODE	1077:79	1077:79	19	,
ARGUMENT	1078:13	1078:13	19	NULL
FIELD	1078:13	1078:13	20	NULL
LEAF_NODE	1078:13	1078:13	21	NULL
LEAF_NODE	1078:17	1078:17	19	,
ARGUMENT	1078:19	1078:19	19	0
FIELD	1078:19	1078:19	20	0
LEAF_NODE	1078:19	1078:19	21	0
LEAF_NODE	1078:20	1078:20	19	,
ARGUMENT	1078:22	1078:22	19	0
FIELD	1078:22	1078:22	20	0
LEAF_NODE	1078:22	1078:22	21	0
LEAF_NODE	1078:23	1078:23	19	)
LEAF_NODE	1078:24	1078:24	16	)
STATEMENTS	1079:13	1082:20	16	
LEAF_NODE	1079:13	1079:13	17	{
STATEMENTS	1080:20	1081:20	17	
EXPR_STATEMENT	1080:20	1080:30	18	status = 0 ;
EXPR	1080:20	1080:20	19	status = 0
ASSIGN	1080:20	1080:29	20	status = 0
LVAL	1080:20	1080:20	21	status
FIELD	1080:20	1080:20	22	status
LEAF_NODE	1080:20	1080:20	23	status
ASSIGN_OP	1080:27	1080:27	21	=
LEAF_NODE	1080:27	1080:27	22	=
RVAL	1080:29	1080:29	21	0
FIELD	1080:29	1080:29	22	0
LEAF_NODE	1080:29	1080:29	23	0
LEAF_NODE	1080:30	1080:30	19	;
JUMP_STATEMENT	1081:20	1081:25	18	break DESTINATION ;
KEYWORD	1081:20	1081:20	19	break
LEAF_NODE	1081:20	1081:20	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	1081:25	1081:25	19	;
LEAF_NODE	1082:20	1082:20	17	}
JUMP_STATEMENT	1083:18	1083:23	15	break DESTINATION ;
KEYWORD	1083:18	1083:18	16	break
LEAF_NODE	1083:18	1083:18	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1083:23	1083:23	16	;
LABEL	1084:10	1084:16	15	case 4 :
LEAF_NODE	1084:10	1084:10	16	case
LEAF_NODE	1084:15	1084:15	16	4
LEAF_NODE	1084:16	1084:16	16	:
LABEL	1085:10	1085:16	15	case 5 :
LEAF_NODE	1085:10	1085:10	16	case
LEAF_NODE	1085:15	1085:15	16	5
LEAF_NODE	1085:16	1085:16	16	:
LABEL	1086:10	1086:16	15	case 6 :
LEAF_NODE	1086:10	1086:10	16	case
LEAF_NODE	1086:15	1086:15	16	6
LEAF_NODE	1086:16	1086:16	16	:
LABEL	1087:10	1087:16	15	case 7 :
LEAF_NODE	1087:10	1087:10	16	case
LEAF_NODE	1087:15	1087:15	16	7
LEAF_NODE	1087:16	1087:16	16	:
LABEL	1088:10	1088:16	15	case 8 :
LEAF_NODE	1088:10	1088:10	16	case
LEAF_NODE	1088:15	1088:15	16	8
LEAF_NODE	1088:16	1088:16	16	:
SELECTION	1088:18	1091:13	15	
KEYWORD	1088:18	1088:18	16	if
LEAF_NODE	1088:18	1088:18	17	if
LEAF_NODE	1088:21	1088:21	16	(
CONDITION	1088:22	1088:22	16	combineSeparateTileSamples32bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
EXPR	1088:22	1088:22	17	combineSeparateTileSamples32bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
FUNCTION_CALL	1088:22	1090:23	18	combineSeparateTileSamples32bits ( srcbuffs , bufp , ncol , nrow , imagewidth , tw , spp , bps , NULL , 0 , 0 )
CALLEE	1088:22	1088:22	19	combineSeparateTileSamples32bits
LEAF_NODE	1088:22	1088:22	20	combineSeparateTileSamples32bits
LEAF_NODE	1088:55	1088:55	19	(
ARGUMENT	1088:56	1088:56	19	srcbuffs
FIELD	1088:56	1088:56	20	srcbuffs
LEAF_NODE	1088:56	1088:56	21	srcbuffs
LEAF_NODE	1088:64	1088:64	19	,
ARGUMENT	1088:66	1088:66	19	bufp
FIELD	1088:66	1088:66	20	bufp
LEAF_NODE	1088:66	1088:66	21	bufp
LEAF_NODE	1088:70	1088:70	19	,
ARGUMENT	1088:72	1088:72	19	ncol
FIELD	1088:72	1088:72	20	ncol
LEAF_NODE	1088:72	1088:72	21	ncol
LEAF_NODE	1088:76	1088:76	19	,
ARGUMENT	1088:78	1088:78	19	nrow
FIELD	1088:78	1088:78	20	nrow
LEAF_NODE	1088:78	1088:78	21	nrow
LEAF_NODE	1088:82	1088:82	19	,
ARGUMENT	1089:55	1089:55	19	imagewidth
FIELD	1089:55	1089:55	20	imagewidth
LEAF_NODE	1089:55	1089:55	21	imagewidth
LEAF_NODE	1089:65	1089:65	19	,
ARGUMENT	1089:67	1089:67	19	tw
FIELD	1089:67	1089:67	20	tw
LEAF_NODE	1089:67	1089:67	21	tw
LEAF_NODE	1089:69	1089:69	19	,
ARGUMENT	1089:71	1089:71	19	spp
FIELD	1089:71	1089:71	20	spp
LEAF_NODE	1089:71	1089:71	21	spp
LEAF_NODE	1089:74	1089:74	19	,
ARGUMENT	1089:76	1089:76	19	bps
FIELD	1089:76	1089:76	20	bps
LEAF_NODE	1089:76	1089:76	21	bps
LEAF_NODE	1089:79	1089:79	19	,
ARGUMENT	1090:13	1090:13	19	NULL
FIELD	1090:13	1090:13	20	NULL
LEAF_NODE	1090:13	1090:13	21	NULL
LEAF_NODE	1090:17	1090:17	19	,
ARGUMENT	1090:19	1090:19	19	0
FIELD	1090:19	1090:19	20	0
LEAF_NODE	1090:19	1090:19	21	0
LEAF_NODE	1090:20	1090:20	19	,
ARGUMENT	1090:22	1090:22	19	0
FIELD	1090:22	1090:22	20	0
LEAF_NODE	1090:22	1090:22	21	0
LEAF_NODE	1090:23	1090:23	19	)
LEAF_NODE	1090:24	1090:24	16	)
STATEMENTS	1091:13	1094:6	16	
LEAF_NODE	1091:13	1091:13	17	{
STATEMENTS	1092:20	1093:20	17	
EXPR_STATEMENT	1092:20	1092:30	18	status = 0 ;
EXPR	1092:20	1092:20	19	status = 0
ASSIGN	1092:20	1092:29	20	status = 0
LVAL	1092:20	1092:20	21	status
FIELD	1092:20	1092:20	22	status
LEAF_NODE	1092:20	1092:20	23	status
ASSIGN_OP	1092:27	1092:27	21	=
LEAF_NODE	1092:27	1092:27	22	=
RVAL	1092:29	1092:29	21	0
FIELD	1092:29	1092:29	22	0
LEAF_NODE	1092:29	1092:29	23	0
LEAF_NODE	1092:30	1092:30	19	;
JUMP_STATEMENT	1093:20	1093:25	18	break DESTINATION ;
KEYWORD	1093:20	1093:20	19	break
LEAF_NODE	1093:20	1093:20	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	1093:25	1093:25	19	;
LEAF_NODE	1094:6	1094:6	17	}
JUMP_STATEMENT	1095:11	1095:16	15	break DESTINATION ;
KEYWORD	1095:11	1095:11	16	break
LEAF_NODE	1095:11	1095:11	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1095:16	1095:16	16	;
LABEL	1096:10	1096:17	15	default :
LEAF_NODE	1096:10	1096:10	16	default
LEAF_NODE	1096:17	1096:17	16	:
EXPR_STATEMENT	1096:19	1096:94	15	TIFFError ( "readSeparateTilesIntoBuffer" , "Unsupported bit depth: %d" , bps ) ;
EXPR	1096:19	1096:19	16	TIFFError ( "readSeparateTilesIntoBuffer" , "Unsupported bit depth: %d" , bps )
FUNCTION_CALL	1096:19	1096:93	17	TIFFError ( "readSeparateTilesIntoBuffer" , "Unsupported bit depth: %d" , bps )
CALLEE	1096:19	1096:19	18	TIFFError
LEAF_NODE	1096:19	1096:19	19	TIFFError
LEAF_NODE	1096:29	1096:29	18	(
ARGUMENT	1096:30	1096:30	18	"readSeparateTilesIntoBuffer"
FIELD	1096:30	1096:30	19	"readSeparateTilesIntoBuffer"
LEAF_NODE	1096:30	1096:30	20	"readSeparateTilesIntoBuffer"
LEAF_NODE	1096:59	1096:59	18	,
ARGUMENT	1096:61	1096:61	18	"Unsupported bit depth: %d"
FIELD	1096:61	1096:61	19	"Unsupported bit depth: %d"
LEAF_NODE	1096:61	1096:61	20	"Unsupported bit depth: %d"
LEAF_NODE	1096:88	1096:88	18	,
ARGUMENT	1096:90	1096:90	18	bps
FIELD	1096:90	1096:90	19	bps
LEAF_NODE	1096:90	1096:90	20	bps
LEAF_NODE	1096:93	1096:93	18	)
LEAF_NODE	1096:94	1096:94	16	;
EXPR_STATEMENT	1097:18	1097:28	15	status = 0 ;
EXPR	1097:18	1097:18	16	status = 0
ASSIGN	1097:18	1097:27	17	status = 0
LVAL	1097:18	1097:18	18	status
FIELD	1097:18	1097:18	19	status
LEAF_NODE	1097:18	1097:18	20	status
ASSIGN_OP	1097:25	1097:25	18	=
LEAF_NODE	1097:25	1097:25	19	=
RVAL	1097:27	1097:27	18	0
FIELD	1097:27	1097:27	19	0
LEAF_NODE	1097:27	1097:27	20	0
LEAF_NODE	1097:28	1097:28	16	;
JUMP_STATEMENT	1098:18	1098:23	15	break DESTINATION ;
KEYWORD	1098:18	1098:18	16	break
LEAF_NODE	1098:18	1098:18	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1098:23	1098:23	16	;
LEAF_NODE	1099:10	1099:10	14	}
LEAF_NODE	1100:8	1100:8	11	}
LEAF_NODE	1101:6	1101:6	8	}
LEAF_NODE	1102:4	1102:4	5	}
ITERATION	1104:2	1105:4	3	
KEYWORD	1104:2	1104:2	4	for
LEAF_NODE	1104:2	1104:2	5	for
LEAF_NODE	1104:6	1104:6	4	(
FOR_INIT	1104:7	1104:17	4	sample = 0 ;
EXPR	1104:7	1104:7	5	sample = 0
ASSIGN	1104:7	1104:16	6	sample = 0
LVAL	1104:7	1104:7	7	sample
FIELD	1104:7	1104:7	8	sample
LEAF_NODE	1104:7	1104:7	9	sample
ASSIGN_OP	1104:14	1104:14	7	=
LEAF_NODE	1104:14	1104:14	8	=
RVAL	1104:16	1104:16	7	0
FIELD	1104:16	1104:16	8	0
LEAF_NODE	1104:16	1104:16	9	0
LEAF_NODE	1104:17	1104:17	5	;
CONDITION	1104:19	1104:19	4	( sample < spp ) && ( sample < MAX_SAMPLES )
EXPR	1104:19	1104:19	5	( sample < spp ) && ( sample < MAX_SAMPLES )
AND	1104:19	1104:37	6	( sample < spp ) && ( sample < MAX_SAMPLES )
EXPR	1104:19	1104:32	7	( sample < spp )
LEAF_NODE	1104:19	1104:19	8	(
FIELD	1104:20	1104:20	8	sample
LEAF_NODE	1104:20	1104:20	9	sample
REL_OPERATOR	1104:27	1104:27	8	<
LEAF_NODE	1104:27	1104:27	9	<
FIELD	1104:29	1104:29	8	spp
LEAF_NODE	1104:29	1104:29	9	spp
LEAF_NODE	1104:32	1104:32	8	)
LEAF_NODE	1104:34	1104:34	7	&&
EXPR	1104:37	1104:58	7	( sample < MAX_SAMPLES )
LEAF_NODE	1104:37	1104:37	8	(
FIELD	1104:38	1104:38	8	sample
LEAF_NODE	1104:38	1104:38	9	sample
REL_OPERATOR	1104:45	1104:45	8	<
LEAF_NODE	1104:45	1104:45	9	<
FIELD	1104:47	1104:47	8	MAX_SAMPLES
LEAF_NODE	1104:47	1104:47	9	MAX_SAMPLES
LEAF_NODE	1104:58	1104:58	8	)
LEAF_NODE	1104:59	1104:59	4	;
FOR_EXPR	1104:61	1104:61	4	sample ++
EXPR	1104:61	1104:61	5	sample ++
FIELD	1104:61	1104:67	6	sample ++
LEAF_NODE	1104:61	1104:61	7	sample
LEAF_NODE	1104:67	1104:67	7	++
LEAF_NODE	1104:69	1104:69	4	)
STATEMENTS	1105:4	1109:4	4	
LEAF_NODE	1105:4	1105:4	5	{
STATEMENTS	1106:4	1107:4	5	
EXPR_STATEMENT	1106:4	1106:28	6	tbuff = srcbuffs [ sample ] ;
EXPR	1106:4	1106:4	7	tbuff = srcbuffs [ sample ]
ASSIGN	1106:4	1106:12	8	tbuff = srcbuffs [ sample ]
LVAL	1106:4	1106:4	9	tbuff
FIELD	1106:4	1106:4	10	tbuff
LEAF_NODE	1106:4	1106:4	11	tbuff
ASSIGN_OP	1106:10	1106:10	9	=
LEAF_NODE	1106:10	1106:10	10	=
RVAL	1106:12	1106:12	9	srcbuffs [ sample ]
FIELD	1106:12	1106:27	10	srcbuffs [ sample ]
LEAF_NODE	1106:12	1106:12	11	srcbuffs
LEAF_NODE	1106:20	1106:20	11	[
EXPR	1106:21	1106:21	11	sample
FIELD	1106:21	1106:21	12	sample
LEAF_NODE	1106:21	1106:21	13	sample
LEAF_NODE	1106:27	1106:27	11	]
LEAF_NODE	1106:28	1106:28	7	;
SELECTION	1107:4	1108:6	6	
KEYWORD	1107:4	1107:4	7	if
LEAF_NODE	1107:4	1107:4	8	if
LEAF_NODE	1107:7	1107:7	7	(
CONDITION	1107:8	1107:8	7	tbuff != NULL
EXPR	1107:8	1107:17	8	tbuff != NULL
FIELD	1107:8	1107:8	9	tbuff
LEAF_NODE	1107:8	1107:8	10	tbuff
EQ_OPERATOR	1107:14	1107:14	9	!=
LEAF_NODE	1107:14	1107:14	10	!=
FIELD	1107:17	1107:17	9	NULL
LEAF_NODE	1107:17	1107:17	10	NULL
LEAF_NODE	1107:21	1107:21	7	)
STATEMENTS	1108:6	1108:6	7	
EXPR_STATEMENT	1108:6	1108:22	8	_TIFFfree ( tbuff ) ;
EXPR	1108:6	1108:6	9	_TIFFfree ( tbuff )
FUNCTION_CALL	1108:6	1108:21	10	_TIFFfree ( tbuff )
CALLEE	1108:6	1108:6	11	_TIFFfree
LEAF_NODE	1108:6	1108:6	12	_TIFFfree
LEAF_NODE	1108:15	1108:15	11	(
ARGUMENT	1108:16	1108:16	11	tbuff
FIELD	1108:16	1108:16	12	tbuff
LEAF_NODE	1108:16	1108:16	13	tbuff
LEAF_NODE	1108:21	1108:21	11	)
LEAF_NODE	1108:22	1108:22	9	;
LEAF_NODE	1109:4	1109:4	5	}
JUMP_STATEMENT	1111:2	1111:15	3	return status ;
KEYWORD	1111:2	1111:2	4	return
LEAF_NODE	1111:2	1111:2	5	return
DESTINATION	1111:9	1111:9	4	status
EXPR	1111:9	1111:9	5	status
FIELD	1111:9	1111:9	6	status
LEAF_NODE	1111:9	1111:9	7	status
LEAF_NODE	1111:15	1111:15	4	;
LEAF_NODE	1112:2	1112:2	2	}
FUNCTION_DEF	1114:0	1135:2	1	
RETURN_TYPE	1114:0	1114:7	2	static int
LEAF_NODE	1114:0	1114:0	3	static
TYPE_NAME	1114:7	1114:7	3	int
LEAF_NODE	1114:7	1114:7	4	int
FUNCTION_NAME	1114:11	1114:11	2	writeBufferToContigStrips
LEAF_NODE	1114:11	1114:11	3	writeBufferToContigStrips
PARAMETER_LIST	1114:36	1114:78	2	( TIFF * out , uint8 * buf , uint32 imagelength )
LEAF_NODE	1114:36	1114:36	3	(
PARAMETER_DECL	1114:37	1114:43	3	TIFF * out
TYPE	1114:37	1114:41	4	TIFF *
TYPE_NAME	1114:37	1114:37	5	TIFF
LEAF_NODE	1114:37	1114:37	6	TIFF
POINTER	1114:41	1114:41	5	*
LEAF_NODE	1114:41	1114:41	6	*
NAME	1114:43	1114:43	4	out
LEAF_NODE	1114:43	1114:43	5	out
LEAF_NODE	1114:46	1114:46	3	,
PARAMETER_DECL	1114:48	1114:55	3	uint8 * buf
TYPE	1114:48	1114:53	4	uint8 *
TYPE_NAME	1114:48	1114:48	5	uint8
LEAF_NODE	1114:48	1114:48	6	uint8
POINTER	1114:53	1114:53	5	*
LEAF_NODE	1114:53	1114:53	6	*
NAME	1114:55	1114:55	4	buf
LEAF_NODE	1114:55	1114:55	5	buf
LEAF_NODE	1114:58	1114:58	3	,
PARAMETER_DECL	1114:60	1114:67	3	uint32 imagelength
TYPE	1114:60	1114:60	4	uint32
TYPE_NAME	1114:60	1114:60	5	uint32
LEAF_NODE	1114:60	1114:60	6	uint32
NAME	1114:67	1114:67	4	imagelength
LEAF_NODE	1114:67	1114:67	5	imagelength
LEAF_NODE	1114:78	1114:78	3	)
LEAF_NODE	1115:2	1115:2	2	{
STATEMENTS	1116:2	1134:2	2	
SIMPLE_DECL	1116:2	1116:33	3	uint32 row , uint32 nrows , uint32 rowsperstrip ;
INIT_DECL_LIST	1116:2	1116:2	4	uint32 row , uint32 nrows , uint32 rowsperstrip
VAR_DECL	1116:2	1116:9	5	uint32 row
TYPE	1116:2	1116:2	6	uint32
TYPE_NAME	1116:2	1116:2	7	uint32
LEAF_NODE	1116:2	1116:2	8	uint32
NAME	1116:9	1116:9	6	row
LEAF_NODE	1116:9	1116:9	7	row
LEAF_NODE	1116:12	1116:12	5	,
INIT_DECL_LIST	1116:2	1116:2	5	uint32 nrows , uint32 rowsperstrip
VAR_DECL	1116:2	1116:14	6	uint32 nrows
TYPE	1116:2	1116:2	7	uint32
TYPE_NAME	1116:2	1116:2	8	uint32
LEAF_NODE	1116:2	1116:2	9	uint32
NAME	1116:14	1116:14	7	nrows
LEAF_NODE	1116:14	1116:14	8	nrows
LEAF_NODE	1116:19	1116:19	6	,
VAR_DECL	1116:2	1116:21	6	uint32 rowsperstrip
TYPE	1116:2	1116:2	7	uint32
TYPE_NAME	1116:2	1116:2	8	uint32
LEAF_NODE	1116:2	1116:2	9	uint32
NAME	1116:21	1116:21	7	rowsperstrip
LEAF_NODE	1116:21	1116:21	8	rowsperstrip
LEAF_NODE	1116:33	1116:33	4	;
SIMPLE_DECL	1117:2	1117:20	3	tstrip_t strip ; strip = 0 ;
VAR_DECL	1117:2	1117:11	4	tstrip_t strip ; strip = 0
TYPE	1117:2	1117:2	5	tstrip_t
TYPE_NAME	1117:2	1117:2	6	tstrip_t
LEAF_NODE	1117:2	1117:2	7	tstrip_t
NAME	1117:11	1117:11	5	strip
LEAF_NODE	1117:11	1117:11	6	strip
LEAF_NODE	0:0	0:0	5	;
INIT	1117:11	1117:11	5	strip = 0
ASSIGN	1117:11	1117:19	6	strip = 0
LVAL	1117:11	1117:11	7	strip
NAME	1117:11	1117:11	8	strip
LEAF_NODE	1117:11	1117:11	9	strip
ASSIGN_OP	1117:17	1117:17	7	=
LEAF_NODE	1117:17	1117:17	8	=
RVAL	1117:19	1117:19	7	0
FIELD	1117:19	1117:19	8	0
LEAF_NODE	1117:19	1117:19	9	0
LEAF_NODE	1117:20	1117:20	4	;
SIMPLE_DECL	1118:2	1118:19	3	tsize_t stripsize ;
VAR_DECL	1118:2	1118:10	4	tsize_t stripsize
TYPE	1118:2	1118:2	5	tsize_t
TYPE_NAME	1118:2	1118:2	6	tsize_t
LEAF_NODE	1118:2	1118:2	7	tsize_t
NAME	1118:10	1118:10	5	stripsize
LEAF_NODE	1118:10	1118:10	6	stripsize
LEAF_NODE	1118:19	1118:19	4	;
EXPR_STATEMENT	1120:2	1120:65	3	TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	1120:2	1120:2	4	TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	1120:2	1120:64	5	TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	1120:2	1120:2	6	TIFFGetFieldDefaulted
LEAF_NODE	1120:2	1120:2	7	TIFFGetFieldDefaulted
LEAF_NODE	1120:23	1120:23	6	(
ARGUMENT	1120:24	1120:24	6	out
FIELD	1120:24	1120:24	7	out
LEAF_NODE	1120:24	1120:24	8	out
LEAF_NODE	1120:27	1120:27	6	,
ARGUMENT	1120:29	1120:29	6	TIFFTAG_ROWSPERSTRIP
FIELD	1120:29	1120:29	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1120:29	1120:29	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1120:49	1120:49	6	,
ARGUMENT	1120:51	1120:51	6	& rowsperstrip
UNARY_EXPR	1120:51	1120:52	7	& rowsperstrip
UNARY_OPERATOR	1120:51	1120:51	8	&
LEAF_NODE	1120:51	1120:51	9	&
FIELD	1120:52	1120:52	8	rowsperstrip
LEAF_NODE	1120:52	1120:52	9	rowsperstrip
LEAF_NODE	1120:64	1120:64	6	)
LEAF_NODE	1120:65	1120:65	4	;
ITERATION	1121:2	1122:4	3	
KEYWORD	1121:2	1121:2	4	for
LEAF_NODE	1121:2	1121:2	5	for
LEAF_NODE	1121:6	1121:6	4	(
FOR_INIT	1121:7	1121:14	4	row = 0 ;
EXPR	1121:7	1121:7	5	row = 0
ASSIGN	1121:7	1121:13	6	row = 0
LVAL	1121:7	1121:7	7	row
FIELD	1121:7	1121:7	8	row
LEAF_NODE	1121:7	1121:7	9	row
ASSIGN_OP	1121:11	1121:11	7	=
LEAF_NODE	1121:11	1121:11	8	=
RVAL	1121:13	1121:13	7	0
FIELD	1121:13	1121:13	8	0
LEAF_NODE	1121:13	1121:13	9	0
LEAF_NODE	1121:14	1121:14	5	;
CONDITION	1121:16	1121:16	4	row < imagelength
EXPR	1121:16	1121:22	5	row < imagelength
FIELD	1121:16	1121:16	6	row
LEAF_NODE	1121:16	1121:16	7	row
REL_OPERATOR	1121:20	1121:20	6	<
LEAF_NODE	1121:20	1121:20	7	<
FIELD	1121:22	1121:22	6	imagelength
LEAF_NODE	1121:22	1121:22	7	imagelength
LEAF_NODE	1121:33	1121:33	4	;
FOR_EXPR	1121:35	1121:35	4	row += rowsperstrip
EXPR	1121:35	1121:35	5	row += rowsperstrip
ASSIGN	1121:35	1121:42	6	row += rowsperstrip
LVAL	1121:35	1121:35	7	row
FIELD	1121:35	1121:35	8	row
LEAF_NODE	1121:35	1121:35	9	row
ASSIGN_OP	1121:39	1121:39	7	+=
LEAF_NODE	1121:39	1121:39	8	+=
RVAL	1121:42	1121:42	7	rowsperstrip
FIELD	1121:42	1121:42	8	rowsperstrip
LEAF_NODE	1121:42	1121:42	9	rowsperstrip
LEAF_NODE	1121:54	1121:54	4	)
STATEMENTS	1122:4	1132:4	4	
LEAF_NODE	1122:4	1122:4	5	{
STATEMENTS	1123:4	1131:4	5	
EXPR_STATEMENT	1123:4	1124:38	6	nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip ;
EXPR	1123:4	1123:4	7	nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
ASSIGN	1123:4	1123:12	8	nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
LVAL	1123:4	1123:4	9	nrows
FIELD	1123:4	1123:4	10	nrows
LEAF_NODE	1123:4	1123:4	11	nrows
ASSIGN_OP	1123:10	1123:10	9	=
LEAF_NODE	1123:10	1123:10	10	=
RVAL	1123:12	1123:12	9	( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
COND_EXPR	1123:12	1124:26	10	( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
CONDITION	1123:12	1123:45	11	( row + rowsperstrip > imagelength )
LEAF_NODE	1123:12	1123:12	12	(
FIELD	1123:13	1123:13	12	row
LEAF_NODE	1123:13	1123:13	13	row
LEAF_NODE	1123:17	1123:17	12	+
FIELD	1123:19	1123:19	12	rowsperstrip
LEAF_NODE	1123:19	1123:19	13	rowsperstrip
REL_OPERATOR	1123:32	1123:32	12	>
LEAF_NODE	1123:32	1123:32	13	>
FIELD	1123:34	1123:34	12	imagelength
LEAF_NODE	1123:34	1123:34	13	imagelength
LEAF_NODE	1123:45	1123:45	12	)
LEAF_NODE	1123:47	1123:47	11	?
EXPR	1124:6	1124:20	11	imagelength - row
FIELD	1124:6	1124:6	12	imagelength
LEAF_NODE	1124:6	1124:6	13	imagelength
LEAF_NODE	1124:18	1124:18	12	-
FIELD	1124:20	1124:20	12	row
LEAF_NODE	1124:20	1124:20	13	row
LEAF_NODE	1124:24	1124:24	11	:
FIELD	1124:26	1124:26	11	rowsperstrip
LEAF_NODE	1124:26	1124:26	12	rowsperstrip
LEAF_NODE	1124:38	1124:38	7	;
EXPR_STATEMENT	1125:4	1125:42	6	stripsize = TIFFVStripSize ( out , nrows ) ;
EXPR	1125:4	1125:4	7	stripsize = TIFFVStripSize ( out , nrows )
ASSIGN	1125:4	1125:16	8	stripsize = TIFFVStripSize ( out , nrows )
LVAL	1125:4	1125:4	9	stripsize
FIELD	1125:4	1125:4	10	stripsize
LEAF_NODE	1125:4	1125:4	11	stripsize
ASSIGN_OP	1125:14	1125:14	9	=
LEAF_NODE	1125:14	1125:14	10	=
RVAL	1125:16	1125:16	9	TIFFVStripSize ( out , nrows )
FUNCTION_CALL	1125:16	1125:41	10	TIFFVStripSize ( out , nrows )
CALLEE	1125:16	1125:16	11	TIFFVStripSize
LEAF_NODE	1125:16	1125:16	12	TIFFVStripSize
LEAF_NODE	1125:30	1125:30	11	(
ARGUMENT	1125:31	1125:31	11	out
FIELD	1125:31	1125:31	12	out
LEAF_NODE	1125:31	1125:31	13	out
LEAF_NODE	1125:34	1125:34	11	,
ARGUMENT	1125:36	1125:36	11	nrows
FIELD	1125:36	1125:36	12	nrows
LEAF_NODE	1125:36	1125:36	13	nrows
LEAF_NODE	1125:41	1125:41	11	)
LEAF_NODE	1125:42	1125:42	7	;
SELECTION	1126:4	1127:6	6	
KEYWORD	1126:4	1126:4	7	if
LEAF_NODE	1126:4	1126:4	8	if
LEAF_NODE	1126:7	1126:7	7	(
CONDITION	1126:8	1126:8	7	TIFFWriteEncodedStrip ( out , strip ++ , buf , stripsize ) < 0
EXPR	1126:8	1126:62	8	TIFFWriteEncodedStrip ( out , strip ++ , buf , stripsize ) < 0
FUNCTION_CALL	1126:8	1126:58	9	TIFFWriteEncodedStrip ( out , strip ++ , buf , stripsize )
CALLEE	1126:8	1126:8	10	TIFFWriteEncodedStrip
LEAF_NODE	1126:8	1126:8	11	TIFFWriteEncodedStrip
LEAF_NODE	1126:29	1126:29	10	(
ARGUMENT	1126:30	1126:30	10	out
FIELD	1126:30	1126:30	11	out
LEAF_NODE	1126:30	1126:30	12	out
LEAF_NODE	1126:33	1126:33	10	,
ARGUMENT	1126:35	1126:35	10	strip ++
FIELD	1126:35	1126:40	11	strip ++
LEAF_NODE	1126:35	1126:35	12	strip
LEAF_NODE	1126:40	1126:40	12	++
LEAF_NODE	1126:42	1126:42	10	,
ARGUMENT	1126:44	1126:44	10	buf
FIELD	1126:44	1126:44	11	buf
LEAF_NODE	1126:44	1126:44	12	buf
LEAF_NODE	1126:47	1126:47	10	,
ARGUMENT	1126:49	1126:49	10	stripsize
FIELD	1126:49	1126:49	11	stripsize
LEAF_NODE	1126:49	1126:49	12	stripsize
LEAF_NODE	1126:58	1126:58	10	)
REL_OPERATOR	1126:60	1126:60	9	<
LEAF_NODE	1126:60	1126:60	10	<
FIELD	1126:62	1126:62	9	0
LEAF_NODE	1126:62	1126:62	10	0
LEAF_NODE	1126:63	1126:63	7	)
STATEMENTS	1127:6	1130:6	7	
LEAF_NODE	1127:6	1127:6	8	{
STATEMENTS	1128:6	1129:6	8	
EXPR_STATEMENT	1128:6	1128:76	9	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 ) ;
EXPR	1128:6	1128:6	10	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
FUNCTION_CALL	1128:6	1128:75	11	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
CALLEE	1128:6	1128:6	12	TIFFError
LEAF_NODE	1128:6	1128:6	13	TIFFError
LEAF_NODE	1128:15	1128:15	12	(
ARGUMENT	1128:16	1128:16	12	TIFFFileName ( out )
FUNCTION_CALL	1128:16	1128:32	13	TIFFFileName ( out )
CALLEE	1128:16	1128:16	14	TIFFFileName
LEAF_NODE	1128:16	1128:16	15	TIFFFileName
LEAF_NODE	1128:28	1128:28	14	(
ARGUMENT	1128:29	1128:29	14	out
FIELD	1128:29	1128:29	15	out
LEAF_NODE	1128:29	1128:29	16	out
LEAF_NODE	1128:32	1128:32	14	)
LEAF_NODE	1128:33	1128:33	12	,
ARGUMENT	1128:35	1128:35	12	"Error, can't write strip %u"
FIELD	1128:35	1128:35	13	"Error, can't write strip %u"
LEAF_NODE	1128:35	1128:35	14	"Error, can't write strip %u"
LEAF_NODE	1128:64	1128:64	12	,
ARGUMENT	1128:66	1128:74	12	strip - 1
FIELD	1128:66	1128:66	13	strip
LEAF_NODE	1128:66	1128:66	14	strip
LEAF_NODE	1128:72	1128:72	13	-
FIELD	1128:74	1128:74	13	1
LEAF_NODE	1128:74	1128:74	14	1
LEAF_NODE	1128:75	1128:75	12	)
LEAF_NODE	1128:76	1128:76	10	;
JUMP_STATEMENT	1129:6	1129:14	9	return 1 ;
KEYWORD	1129:6	1129:6	10	return
LEAF_NODE	1129:6	1129:6	11	return
DESTINATION	1129:13	1129:13	10	1
EXPR	1129:13	1129:13	11	1
FIELD	1129:13	1129:13	12	1
LEAF_NODE	1129:13	1129:13	13	1
LEAF_NODE	1129:14	1129:14	10	;
LEAF_NODE	1130:6	1130:6	8	}
EXPR_STATEMENT	1131:4	1131:20	6	buf += stripsize ;
EXPR	1131:4	1131:4	7	buf += stripsize
ASSIGN	1131:4	1131:11	8	buf += stripsize
LVAL	1131:4	1131:4	9	buf
FIELD	1131:4	1131:4	10	buf
LEAF_NODE	1131:4	1131:4	11	buf
ASSIGN_OP	1131:8	1131:8	9	+=
LEAF_NODE	1131:8	1131:8	10	+=
RVAL	1131:11	1131:11	9	stripsize
FIELD	1131:11	1131:11	10	stripsize
LEAF_NODE	1131:11	1131:11	11	stripsize
LEAF_NODE	1131:20	1131:20	7	;
LEAF_NODE	1132:4	1132:4	5	}
JUMP_STATEMENT	1134:2	1134:10	3	return 0 ;
KEYWORD	1134:2	1134:2	4	return
LEAF_NODE	1134:2	1134:2	5	return
DESTINATION	1134:9	1134:9	4	0
EXPR	1134:9	1134:9	5	0
FIELD	1134:9	1134:9	6	0
LEAF_NODE	1134:9	1134:9	7	0
LEAF_NODE	1134:10	1134:10	4	;
LEAF_NODE	1135:2	1135:2	2	}
FUNCTION_DEF	1145:0	1222:0	1	
RETURN_TYPE	1145:0	1145:7	2	static int
LEAF_NODE	1145:0	1145:0	3	static
TYPE_NAME	1145:7	1145:7	3	int
LEAF_NODE	1145:7	1145:7	4	int
FUNCTION_NAME	1146:0	1146:0	2	writeBufferToSeparateStrips
LEAF_NODE	1146:0	1146:0	3	writeBufferToSeparateStrips
PARAMETER_LIST	1146:28	1148:30	2	( TIFF * out , uint8 * buf , uint32 length , uint32 width , uint16 spp , struct dump_opts * dump )
LEAF_NODE	1146:28	1146:28	3	(
PARAMETER_DECL	1146:29	1146:35	3	TIFF * out
TYPE	1146:29	1146:33	4	TIFF *
TYPE_NAME	1146:29	1146:29	5	TIFF
LEAF_NODE	1146:29	1146:29	6	TIFF
POINTER	1146:33	1146:33	5	*
LEAF_NODE	1146:33	1146:33	6	*
NAME	1146:35	1146:35	4	out
LEAF_NODE	1146:35	1146:35	5	out
LEAF_NODE	1146:38	1146:38	3	,
PARAMETER_DECL	1146:40	1146:47	3	uint8 * buf
TYPE	1146:40	1146:45	4	uint8 *
TYPE_NAME	1146:40	1146:40	5	uint8
LEAF_NODE	1146:40	1146:40	6	uint8
POINTER	1146:45	1146:45	5	*
LEAF_NODE	1146:45	1146:45	6	*
NAME	1146:47	1146:47	4	buf
LEAF_NODE	1146:47	1146:47	5	buf
LEAF_NODE	1146:50	1146:50	3	,
PARAMETER_DECL	1147:8	1147:15	3	uint32 length
TYPE	1147:8	1147:8	4	uint32
TYPE_NAME	1147:8	1147:8	5	uint32
LEAF_NODE	1147:8	1147:8	6	uint32
NAME	1147:15	1147:15	4	length
LEAF_NODE	1147:15	1147:15	5	length
LEAF_NODE	1147:21	1147:21	3	,
PARAMETER_DECL	1147:23	1147:30	3	uint32 width
TYPE	1147:23	1147:23	4	uint32
TYPE_NAME	1147:23	1147:23	5	uint32
LEAF_NODE	1147:23	1147:23	6	uint32
NAME	1147:30	1147:30	4	width
LEAF_NODE	1147:30	1147:30	5	width
LEAF_NODE	1147:35	1147:35	3	,
PARAMETER_DECL	1147:37	1147:44	3	uint16 spp
TYPE	1147:37	1147:37	4	uint16
TYPE_NAME	1147:37	1147:37	5	uint16
LEAF_NODE	1147:37	1147:37	6	uint16
NAME	1147:44	1147:44	4	spp
LEAF_NODE	1147:44	1147:44	5	spp
LEAF_NODE	1147:47	1147:47	3	,
PARAMETER_DECL	1148:8	1148:26	3	struct dump_opts * dump
TYPE	1148:8	1148:25	4	struct dump_opts *
TYPE_NAME	1148:8	1148:15	5	struct dump_opts
LEAF_NODE	1148:8	1148:8	6	struct
LEAF_NODE	1148:15	1148:15	6	dump_opts
POINTER	1148:25	1148:25	5	*
LEAF_NODE	1148:25	1148:25	6	*
NAME	1148:26	1148:26	4	dump
LEAF_NODE	1148:26	1148:26	5	dump
LEAF_NODE	1148:30	1148:30	3	)
LEAF_NODE	1149:2	1149:2	2	{
STATEMENTS	1150:2	1221:2	2	
SIMPLE_DECL	1150:2	1150:14	3	uint8 * src ;
VAR_DECL	1150:2	1150:11	4	uint8 * src
TYPE	1150:2	1150:10	5	uint8 *
TYPE_NAME	1150:2	1150:2	6	uint8
LEAF_NODE	1150:2	1150:2	7	uint8
POINTER	1150:10	1150:10	6	*
LEAF_NODE	1150:10	1150:10	7	*
NAME	1150:11	1150:11	5	src
LEAF_NODE	1150:11	1150:11	6	src
LEAF_NODE	1150:14	1150:14	4	;
SIMPLE_DECL	1151:2	1151:14	3	uint16 bps ;
VAR_DECL	1151:2	1151:11	4	uint16 bps
TYPE	1151:2	1151:2	5	uint16
TYPE_NAME	1151:2	1151:2	6	uint16
LEAF_NODE	1151:2	1151:2	7	uint16
NAME	1151:11	1151:11	5	bps
LEAF_NODE	1151:11	1151:11	6	bps
LEAF_NODE	1151:14	1151:14	4	;
SIMPLE_DECL	1152:2	1152:44	3	uint32 row , uint32 nrows , uint32 rowsize , uint32 rowsperstrip ;
INIT_DECL_LIST	1152:2	1152:2	4	uint32 row , uint32 nrows , uint32 rowsize , uint32 rowsperstrip
VAR_DECL	1152:2	1152:11	5	uint32 row
TYPE	1152:2	1152:2	6	uint32
TYPE_NAME	1152:2	1152:2	7	uint32
LEAF_NODE	1152:2	1152:2	8	uint32
NAME	1152:11	1152:11	6	row
LEAF_NODE	1152:11	1152:11	7	row
LEAF_NODE	1152:14	1152:14	5	,
INIT_DECL_LIST	1152:2	1152:2	5	uint32 nrows , uint32 rowsize , uint32 rowsperstrip
VAR_DECL	1152:2	1152:16	6	uint32 nrows
TYPE	1152:2	1152:2	7	uint32
TYPE_NAME	1152:2	1152:2	8	uint32
LEAF_NODE	1152:2	1152:2	9	uint32
NAME	1152:16	1152:16	7	nrows
LEAF_NODE	1152:16	1152:16	8	nrows
LEAF_NODE	1152:21	1152:21	6	,
INIT_DECL_LIST	1152:2	1152:2	6	uint32 rowsize , uint32 rowsperstrip
VAR_DECL	1152:2	1152:23	7	uint32 rowsize
TYPE	1152:2	1152:2	8	uint32
TYPE_NAME	1152:2	1152:2	9	uint32
LEAF_NODE	1152:2	1152:2	10	uint32
NAME	1152:23	1152:23	8	rowsize
LEAF_NODE	1152:23	1152:23	9	rowsize
LEAF_NODE	1152:30	1152:30	7	,
VAR_DECL	1152:2	1152:32	7	uint32 rowsperstrip
TYPE	1152:2	1152:2	8	uint32
TYPE_NAME	1152:2	1152:2	9	uint32
LEAF_NODE	1152:2	1152:2	10	uint32
NAME	1152:32	1152:32	8	rowsperstrip
LEAF_NODE	1152:32	1152:32	9	rowsperstrip
LEAF_NODE	1152:44	1152:44	4	;
SIMPLE_DECL	1153:2	1153:27	3	uint32 bytes_per_sample ;
VAR_DECL	1153:2	1153:11	4	uint32 bytes_per_sample
TYPE	1153:2	1153:2	5	uint32
TYPE_NAME	1153:2	1153:2	6	uint32
LEAF_NODE	1153:2	1153:2	7	uint32
NAME	1153:11	1153:11	5	bytes_per_sample
LEAF_NODE	1153:11	1153:11	6	bytes_per_sample
LEAF_NODE	1153:27	1153:27	4	;
SIMPLE_DECL	1154:2	1154:13	3	tsample_t s ;
VAR_DECL	1154:2	1154:12	4	tsample_t s
TYPE	1154:2	1154:2	5	tsample_t
TYPE_NAME	1154:2	1154:2	6	tsample_t
LEAF_NODE	1154:2	1154:2	7	tsample_t
NAME	1154:12	1154:12	5	s
LEAF_NODE	1154:12	1154:12	6	s
LEAF_NODE	1154:13	1154:13	4	;
SIMPLE_DECL	1155:2	1155:20	3	tstrip_t strip ; strip = 0 ;
VAR_DECL	1155:2	1155:11	4	tstrip_t strip ; strip = 0
TYPE	1155:2	1155:2	5	tstrip_t
TYPE_NAME	1155:2	1155:2	6	tstrip_t
LEAF_NODE	1155:2	1155:2	7	tstrip_t
NAME	1155:11	1155:11	5	strip
LEAF_NODE	1155:11	1155:11	6	strip
LEAF_NODE	0:0	0:0	5	;
INIT	1155:11	1155:11	5	strip = 0
ASSIGN	1155:11	1155:19	6	strip = 0
LVAL	1155:11	1155:11	7	strip
NAME	1155:11	1155:11	8	strip
LEAF_NODE	1155:11	1155:11	9	strip
ASSIGN_OP	1155:17	1155:17	7	=
LEAF_NODE	1155:17	1155:17	8	=
RVAL	1155:19	1155:19	7	0
FIELD	1155:19	1155:19	8	0
LEAF_NODE	1155:19	1155:19	9	0
LEAF_NODE	1155:20	1155:20	4	;
SIMPLE_DECL	1156:2	1156:41	3	tsize_t stripsize ; stripsize = TIFFStripSize ( out ) ;
VAR_DECL	1156:2	1156:11	4	tsize_t stripsize ; stripsize = TIFFStripSize ( out )
TYPE	1156:2	1156:2	5	tsize_t
TYPE_NAME	1156:2	1156:2	6	tsize_t
LEAF_NODE	1156:2	1156:2	7	tsize_t
NAME	1156:11	1156:11	5	stripsize
LEAF_NODE	1156:11	1156:11	6	stripsize
LEAF_NODE	0:0	0:0	5	;
INIT	1156:11	1156:11	5	stripsize = TIFFStripSize ( out )
ASSIGN	1156:11	1156:23	6	stripsize = TIFFStripSize ( out )
LVAL	1156:11	1156:11	7	stripsize
NAME	1156:11	1156:11	8	stripsize
LEAF_NODE	1156:11	1156:11	9	stripsize
ASSIGN_OP	1156:21	1156:21	7	=
LEAF_NODE	1156:21	1156:21	8	=
RVAL	1156:23	1156:23	7	TIFFStripSize ( out )
FUNCTION_CALL	1156:23	1156:40	8	TIFFStripSize ( out )
CALLEE	1156:23	1156:23	9	TIFFStripSize
LEAF_NODE	1156:23	1156:23	10	TIFFStripSize
LEAF_NODE	1156:36	1156:36	9	(
ARGUMENT	1156:37	1156:37	9	out
FIELD	1156:37	1156:37	10	out
LEAF_NODE	1156:37	1156:37	11	out
LEAF_NODE	1156:40	1156:40	9	)
LEAF_NODE	1156:41	1156:41	4	;
SIMPLE_DECL	1157:2	1157:62	3	tsize_t rowstripsize , tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( out ) ;
INIT_DECL_LIST	1157:2	1157:2	4	tsize_t rowstripsize , tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( out )
VAR_DECL	1157:2	1157:11	5	tsize_t rowstripsize
TYPE	1157:2	1157:2	6	tsize_t
TYPE_NAME	1157:2	1157:2	7	tsize_t
LEAF_NODE	1157:2	1157:2	8	tsize_t
NAME	1157:11	1157:11	6	rowstripsize
LEAF_NODE	1157:11	1157:11	7	rowstripsize
LEAF_NODE	1157:23	1157:23	5	,
VAR_DECL	1157:2	1157:26	5	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( out )
TYPE	1157:2	1157:2	6	tsize_t
TYPE_NAME	1157:2	1157:2	7	tsize_t
LEAF_NODE	1157:2	1157:2	8	tsize_t
NAME	1157:26	1157:26	6	scanlinesize
LEAF_NODE	1157:26	1157:26	7	scanlinesize
LEAF_NODE	0:0	0:0	6	;
INIT	1157:26	1157:26	6	scanlinesize = TIFFScanlineSize ( out )
ASSIGN	1157:26	1157:41	7	scanlinesize = TIFFScanlineSize ( out )
LVAL	1157:26	1157:26	8	scanlinesize
NAME	1157:26	1157:26	9	scanlinesize
LEAF_NODE	1157:26	1157:26	10	scanlinesize
ASSIGN_OP	1157:39	1157:39	8	=
LEAF_NODE	1157:39	1157:39	9	=
RVAL	1157:41	1157:41	8	TIFFScanlineSize ( out )
FUNCTION_CALL	1157:41	1157:61	9	TIFFScanlineSize ( out )
CALLEE	1157:41	1157:41	10	TIFFScanlineSize
LEAF_NODE	1157:41	1157:41	11	TIFFScanlineSize
LEAF_NODE	1157:57	1157:57	10	(
ARGUMENT	1157:58	1157:58	10	out
FIELD	1157:58	1157:58	11	out
LEAF_NODE	1157:58	1157:58	12	out
LEAF_NODE	1157:61	1157:61	10	)
LEAF_NODE	1157:62	1157:62	4	;
SIMPLE_DECL	1158:2	1158:26	3	tsize_t total_bytes ; total_bytes = 0 ;
VAR_DECL	1158:2	1158:11	4	tsize_t total_bytes ; total_bytes = 0
TYPE	1158:2	1158:2	5	tsize_t
TYPE_NAME	1158:2	1158:2	6	tsize_t
LEAF_NODE	1158:2	1158:2	7	tsize_t
NAME	1158:11	1158:11	5	total_bytes
LEAF_NODE	1158:11	1158:11	6	total_bytes
LEAF_NODE	0:0	0:0	5	;
INIT	1158:11	1158:11	5	total_bytes = 0
ASSIGN	1158:11	1158:25	6	total_bytes = 0
LVAL	1158:11	1158:11	7	total_bytes
NAME	1158:11	1158:11	8	total_bytes
LEAF_NODE	1158:11	1158:11	9	total_bytes
ASSIGN_OP	1158:23	1158:23	7	=
LEAF_NODE	1158:23	1158:23	8	=
RVAL	1158:25	1158:25	7	0
FIELD	1158:25	1158:25	8	0
LEAF_NODE	1158:25	1158:25	9	0
LEAF_NODE	1158:26	1158:26	4	;
SIMPLE_DECL	1159:2	1159:15	3	tdata_t obuf ;
VAR_DECL	1159:2	1159:11	4	tdata_t obuf
TYPE	1159:2	1159:2	5	tdata_t
TYPE_NAME	1159:2	1159:2	6	tdata_t
LEAF_NODE	1159:2	1159:2	7	tdata_t
NAME	1159:11	1159:11	5	obuf
LEAF_NODE	1159:11	1159:11	6	obuf
LEAF_NODE	1159:15	1159:15	4	;
EXPR_STATEMENT	1161:2	1161:72	3	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	1161:2	1161:9	4	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
LEAF_NODE	1161:2	1161:2	5	(
TYPE_NAME	1161:3	1161:3	5	void
LEAF_NODE	1161:3	1161:3	6	void
LEAF_NODE	1161:7	1161:7	5	)
FUNCTION_CALL	1161:9	1161:71	5	TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	1161:9	1161:9	6	TIFFGetFieldDefaulted
LEAF_NODE	1161:9	1161:9	7	TIFFGetFieldDefaulted
LEAF_NODE	1161:30	1161:30	6	(
ARGUMENT	1161:31	1161:31	6	out
FIELD	1161:31	1161:31	7	out
LEAF_NODE	1161:31	1161:31	8	out
LEAF_NODE	1161:34	1161:34	6	,
ARGUMENT	1161:36	1161:36	6	TIFFTAG_ROWSPERSTRIP
FIELD	1161:36	1161:36	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1161:36	1161:36	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1161:56	1161:56	6	,
ARGUMENT	1161:58	1161:58	6	& rowsperstrip
UNARY_EXPR	1161:58	1161:59	7	& rowsperstrip
UNARY_OPERATOR	1161:58	1161:58	8	&
LEAF_NODE	1161:58	1161:58	9	&
FIELD	1161:59	1161:59	8	rowsperstrip
LEAF_NODE	1161:59	1161:59	9	rowsperstrip
LEAF_NODE	1161:71	1161:71	6	)
LEAF_NODE	1161:72	1161:72	4	;
EXPR_STATEMENT	1162:2	1162:64	3	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	1162:2	1162:9	4	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_BITSPERSAMPLE , & bps )
LEAF_NODE	1162:2	1162:2	5	(
TYPE_NAME	1162:3	1162:3	5	void
LEAF_NODE	1162:3	1162:3	6	void
LEAF_NODE	1162:7	1162:7	5	)
FUNCTION_CALL	1162:9	1162:63	5	TIFFGetFieldDefaulted ( out , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	1162:9	1162:9	6	TIFFGetFieldDefaulted
LEAF_NODE	1162:9	1162:9	7	TIFFGetFieldDefaulted
LEAF_NODE	1162:30	1162:30	6	(
ARGUMENT	1162:31	1162:31	6	out
FIELD	1162:31	1162:31	7	out
LEAF_NODE	1162:31	1162:31	8	out
LEAF_NODE	1162:34	1162:34	6	,
ARGUMENT	1162:36	1162:36	6	TIFFTAG_BITSPERSAMPLE
FIELD	1162:36	1162:36	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1162:36	1162:36	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1162:57	1162:57	6	,
ARGUMENT	1162:59	1162:59	6	& bps
UNARY_EXPR	1162:59	1162:60	7	& bps
UNARY_OPERATOR	1162:59	1162:59	8	&
LEAF_NODE	1162:59	1162:59	9	&
FIELD	1162:60	1162:60	8	bps
LEAF_NODE	1162:60	1162:60	9	bps
LEAF_NODE	1162:63	1162:63	6	)
LEAF_NODE	1162:64	1162:64	4	;
EXPR_STATEMENT	1163:2	1163:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	1163:2	1163:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	1163:2	1163:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	1163:2	1163:2	6	bytes_per_sample
FIELD	1163:2	1163:2	7	bytes_per_sample
LEAF_NODE	1163:2	1163:2	8	bytes_per_sample
ASSIGN_OP	1163:19	1163:19	6	=
LEAF_NODE	1163:19	1163:19	7	=
RVAL	1163:21	1163:33	6	( bps + 7 ) / 8
LEAF_NODE	1163:21	1163:21	7	(
FIELD	1163:22	1163:22	7	bps
LEAF_NODE	1163:22	1163:22	8	bps
LEAF_NODE	1163:26	1163:26	7	+
FIELD	1163:28	1163:28	7	7
LEAF_NODE	1163:28	1163:28	8	7
LEAF_NODE	1163:29	1163:29	7	)
LEAF_NODE	1163:31	1163:31	7	/
FIELD	1163:33	1163:33	7	8
LEAF_NODE	1163:33	1163:33	8	8
LEAF_NODE	1163:34	1163:34	4	;
LEAF_NODE	1164:2	1164:2	3	if
LEAF_NODE	1164:4	1164:4	3	(
LEAF_NODE	1164:6	1164:6	3	width
LEAF_NODE	1164:12	1164:12	3	==
LEAF_NODE	1164:15	1164:15	3	0
LEAF_NODE	1164:17	1164:17	3	||
LEAF_NODE	1165:6	1165:6	3	(
LEAF_NODE	1165:7	1165:7	3	uint32
LEAF_NODE	1165:13	1165:13	3	)
LEAF_NODE	1165:14	1165:14	3	bps
LEAF_NODE	1165:18	1165:18	3	*
LEAF_NODE	1165:20	1165:20	3	(
LEAF_NODE	1165:21	1165:21	3	uint32
LEAF_NODE	1165:27	1165:27	3	)
LEAF_NODE	1165:28	1165:28	3	spp
LEAF_NODE	1165:32	1165:32	3	>
LEAF_NODE	1165:34	1165:34	3	TIFF_UINT32_MAX
LEAF_NODE	1165:50	1165:50	3	/
LEAF_NODE	1165:52	1165:52	3	width
LEAF_NODE	1165:58	1165:58	3	||
LEAF_NODE	1166:6	1166:6	3	bps
LEAF_NODE	1166:10	1166:10	3	*
LEAF_NODE	1166:12	1166:12	3	spp
LEAF_NODE	1166:16	1166:16	3	*
LEAF_NODE	1166:18	1166:18	3	width
LEAF_NODE	1166:24	1166:24	3	>
LEAF_NODE	1166:26	1166:26	3	TIFF_UINT32_MAX
LEAF_NODE	1166:42	1166:42	3	-
LEAF_NODE	1166:44	1166:44	3	7U
LEAF_NODE	1166:47	1166:47	3	)
LEAF_NODE	1167:2	1167:2	3	{
STATEMENTS	1168:6	1170:6	3	
EXPR_STATEMENT	1168:6	1169:76	4	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (bps * spp * width) + 7" ) ;
EXPR	1168:6	1168:6	5	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (bps * spp * width) + 7" )
FUNCTION_CALL	1168:6	1169:75	6	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (bps * spp * width) + 7" )
CALLEE	1168:6	1168:6	7	TIFFError
LEAF_NODE	1168:6	1168:6	8	TIFFError
LEAF_NODE	1168:15	1168:15	7	(
ARGUMENT	1168:16	1168:16	7	TIFFFileName ( out )
FUNCTION_CALL	1168:16	1168:32	8	TIFFFileName ( out )
CALLEE	1168:16	1168:16	9	TIFFFileName
LEAF_NODE	1168:16	1168:16	10	TIFFFileName
LEAF_NODE	1168:28	1168:28	9	(
ARGUMENT	1168:29	1168:29	9	out
FIELD	1168:29	1168:29	10	out
LEAF_NODE	1168:29	1168:29	11	out
LEAF_NODE	1168:32	1168:32	9	)
LEAF_NODE	1168:33	1168:33	7	,
ARGUMENT	1169:12	1169:12	7	"Error, uint32 overflow when computing (bps * spp * width) + 7"
FIELD	1169:12	1169:12	8	"Error, uint32 overflow when computing (bps * spp * width) + 7"
LEAF_NODE	1169:12	1169:12	9	"Error, uint32 overflow when computing (bps * spp * width) + 7"
LEAF_NODE	1169:75	1169:75	7	)
LEAF_NODE	1169:76	1169:76	5	;
JUMP_STATEMENT	1170:6	1170:14	4	return 1 ;
KEYWORD	1170:6	1170:6	5	return
LEAF_NODE	1170:6	1170:6	6	return
DESTINATION	1170:13	1170:13	5	1
EXPR	1170:13	1170:13	6	1
FIELD	1170:13	1170:13	7	1
LEAF_NODE	1170:13	1170:13	8	1
LEAF_NODE	1170:14	1170:14	5	;
LEAF_NODE	1171:2	1171:2	3	}
LEAF_NODE	1172:2	1172:2	3	rowsize
LEAF_NODE	1172:10	1172:10	3	=
LEAF_NODE	1172:12	1172:12	3	(
LEAF_NODE	1172:13	1172:13	3	(
LEAF_NODE	1172:14	1172:14	3	bps
LEAF_NODE	1172:18	1172:18	3	*
LEAF_NODE	1172:20	1172:20	3	spp
LEAF_NODE	1172:24	1172:24	3	*
LEAF_NODE	1172:26	1172:26	3	width
LEAF_NODE	1172:31	1172:31	3	)
LEAF_NODE	1172:33	1172:33	3	+
LEAF_NODE	1172:35	1172:35	3	7U
LEAF_NODE	1172:37	1172:37	3	)
LEAF_NODE	1172:39	1172:39	3	/
EXPR_STATEMENT	1172:41	1172:42	3	8 ;
EXPR	1172:41	1172:41	4	8
FIELD	1172:41	1172:41	5	8
LEAF_NODE	1172:41	1172:41	6	8
LEAF_NODE	1172:42	1172:42	4	;
SELECTION	1173:2	1176:2	3	
KEYWORD	1173:2	1173:2	4	if
LEAF_NODE	1173:2	1173:2	5	if
LEAF_NODE	1173:4	1173:4	4	(
CONDITION	1173:6	1173:6	4	bytes_per_sample == 0 || rowsperstrip > TIFF_UINT32_MAX / bytes_per_sample || rowsperstrip * bytes_per_sample > TIFF_UINT32_MAX / ( width + 1 )
EXPR	1173:6	1173:6	5	bytes_per_sample == 0 || rowsperstrip > TIFF_UINT32_MAX / bytes_per_sample || rowsperstrip * bytes_per_sample > TIFF_UINT32_MAX / ( width + 1 )
OR	1173:6	1174:6	6	bytes_per_sample == 0 || rowsperstrip > TIFF_UINT32_MAX / bytes_per_sample || rowsperstrip * bytes_per_sample > TIFF_UINT32_MAX / ( width + 1 )
EXPR	1173:6	1173:26	7	bytes_per_sample == 0
FIELD	1173:6	1173:6	8	bytes_per_sample
LEAF_NODE	1173:6	1173:6	9	bytes_per_sample
EQ_OPERATOR	1173:23	1173:23	8	==
LEAF_NODE	1173:23	1173:23	9	==
FIELD	1173:26	1173:26	8	0
LEAF_NODE	1173:26	1173:26	9	0
LEAF_NODE	1173:28	1173:28	7	||
EXPR	1174:6	1174:6	7	rowsperstrip > TIFF_UINT32_MAX / bytes_per_sample || rowsperstrip * bytes_per_sample > TIFF_UINT32_MAX / ( width + 1 )
OR	1174:6	1175:6	8	rowsperstrip > TIFF_UINT32_MAX / bytes_per_sample || rowsperstrip * bytes_per_sample > TIFF_UINT32_MAX / ( width + 1 )
EXPR	1174:6	1174:39	9	rowsperstrip > TIFF_UINT32_MAX / bytes_per_sample
FIELD	1174:6	1174:6	10	rowsperstrip
LEAF_NODE	1174:6	1174:6	11	rowsperstrip
REL_OPERATOR	1174:19	1174:19	10	>
LEAF_NODE	1174:19	1174:19	11	>
FIELD	1174:21	1174:21	10	TIFF_UINT32_MAX
LEAF_NODE	1174:21	1174:21	11	TIFF_UINT32_MAX
LEAF_NODE	1174:37	1174:37	10	/
FIELD	1174:39	1174:39	10	bytes_per_sample
LEAF_NODE	1174:39	1174:39	11	bytes_per_sample
LEAF_NODE	1174:56	1174:56	9	||
EXPR	1175:6	1175:68	9	rowsperstrip * bytes_per_sample > TIFF_UINT32_MAX / ( width + 1 )
FIELD	1175:6	1175:6	10	rowsperstrip
LEAF_NODE	1175:6	1175:6	11	rowsperstrip
LEAF_NODE	1175:19	1175:19	10	*
FIELD	1175:21	1175:21	10	bytes_per_sample
LEAF_NODE	1175:21	1175:21	11	bytes_per_sample
REL_OPERATOR	1175:38	1175:38	10	>
LEAF_NODE	1175:38	1175:38	11	>
FIELD	1175:40	1175:40	10	TIFF_UINT32_MAX
LEAF_NODE	1175:40	1175:40	11	TIFF_UINT32_MAX
LEAF_NODE	1175:56	1175:56	10	/
LEAF_NODE	1175:58	1175:58	10	(
FIELD	1175:59	1175:59	10	width
LEAF_NODE	1175:59	1175:59	11	width
LEAF_NODE	1175:65	1175:65	10	+
FIELD	1175:67	1175:67	10	1
LEAF_NODE	1175:67	1175:67	11	1
LEAF_NODE	1175:68	1175:68	10	)
LEAF_NODE	1175:70	1175:70	4	)
STATEMENTS	1176:2	1181:2	4	
LEAF_NODE	1176:2	1176:2	5	{
STATEMENTS	1177:6	1180:6	5	
LEAF_NODE	1177:6	1177:6	6	TIFFError
LEAF_NODE	1177:15	1177:15	6	(
LEAF_NODE	1177:16	1177:16	6	TIFFFileName
LEAF_NODE	1177:28	1177:28	6	(
LEAF_NODE	1177:29	1177:29	6	out
LEAF_NODE	1177:32	1177:32	6	)
LEAF_NODE	1177:33	1177:33	6	,
LEAF_NODE	1178:16	1178:16	6	"Error, uint32 overflow when computing rowsperstrip * "
LEAF_NODE	1179:16	1179:16	6	"bytes_per_sample * (width + 1)"
LEAF_NODE	1179:48	1179:48	6	)
LEAF_NODE	1179:49	1179:49	6	;
JUMP_STATEMENT	1180:6	1180:14	6	return 1 ;
KEYWORD	1180:6	1180:6	7	return
LEAF_NODE	1180:6	1180:6	8	return
DESTINATION	1180:13	1180:13	7	1
EXPR	1180:13	1180:13	8	1
FIELD	1180:13	1180:13	9	1
LEAF_NODE	1180:13	1180:13	10	1
LEAF_NODE	1180:14	1180:14	7	;
LEAF_NODE	1181:2	1181:2	5	}
LEAF_NODE	1182:2	1182:2	3	rowstripsize
LEAF_NODE	1182:15	1182:15	3	=
LEAF_NODE	1182:17	1182:17	3	rowsperstrip
EXPR_STATEMENT	1182:30	1182:62	3	* bytes_per_sample * ( width + 1 ) ;
EXPR	1182:30	1182:61	4	* bytes_per_sample * ( width + 1 )
UNARY_EXPR	1182:30	1182:32	5	* bytes_per_sample
UNARY_OPERATOR	1182:30	1182:30	6	*
LEAF_NODE	1182:30	1182:30	7	*
FIELD	1182:32	1182:32	6	bytes_per_sample
LEAF_NODE	1182:32	1182:32	7	bytes_per_sample
LEAF_NODE	1182:49	1182:49	5	*
LEAF_NODE	1182:51	1182:51	5	(
FIELD	1182:52	1182:52	5	width
LEAF_NODE	1182:52	1182:52	6	width
LEAF_NODE	1182:58	1182:58	5	+
FIELD	1182:60	1182:60	5	1
LEAF_NODE	1182:60	1182:60	6	1
LEAF_NODE	1182:61	1182:61	5	)
LEAF_NODE	1182:62	1182:62	4	;
EXPR_STATEMENT	1184:2	1184:35	3	obuf = _TIFFmalloc ( rowstripsize ) ;
EXPR	1184:2	1184:2	4	obuf = _TIFFmalloc ( rowstripsize )
ASSIGN	1184:2	1184:9	5	obuf = _TIFFmalloc ( rowstripsize )
LVAL	1184:2	1184:2	6	obuf
FIELD	1184:2	1184:2	7	obuf
LEAF_NODE	1184:2	1184:2	8	obuf
ASSIGN_OP	1184:7	1184:7	6	=
LEAF_NODE	1184:7	1184:7	7	=
RVAL	1184:9	1184:9	6	_TIFFmalloc ( rowstripsize )
FUNCTION_CALL	1184:9	1184:34	7	_TIFFmalloc ( rowstripsize )
CALLEE	1184:9	1184:9	8	_TIFFmalloc
LEAF_NODE	1184:9	1184:9	9	_TIFFmalloc
LEAF_NODE	1184:21	1184:21	8	(
ARGUMENT	1184:22	1184:22	8	rowstripsize
FIELD	1184:22	1184:22	9	rowstripsize
LEAF_NODE	1184:22	1184:22	10	rowstripsize
LEAF_NODE	1184:34	1184:34	8	)
LEAF_NODE	1184:35	1184:35	4	;
SELECTION	1185:2	1186:4	3	
KEYWORD	1185:2	1185:2	4	if
LEAF_NODE	1185:2	1185:2	5	if
LEAF_NODE	1185:5	1185:5	4	(
CONDITION	1185:6	1185:6	4	obuf == NULL
EXPR	1185:6	1185:14	5	obuf == NULL
FIELD	1185:6	1185:6	6	obuf
LEAF_NODE	1185:6	1185:6	7	obuf
EQ_OPERATOR	1185:11	1185:11	6	==
LEAF_NODE	1185:11	1185:11	7	==
FIELD	1185:14	1185:14	6	NULL
LEAF_NODE	1185:14	1185:14	7	NULL
LEAF_NODE	1185:18	1185:18	4	)
STATEMENTS	1186:4	1186:4	4	
JUMP_STATEMENT	1186:4	1186:12	5	return 1 ;
KEYWORD	1186:4	1186:4	6	return
LEAF_NODE	1186:4	1186:4	7	return
DESTINATION	1186:11	1186:11	6	1
EXPR	1186:11	1186:11	7	1
FIELD	1186:11	1186:11	8	1
LEAF_NODE	1186:11	1186:11	9	1
LEAF_NODE	1186:12	1186:12	6	;
ITERATION	1188:2	1189:4	3	
KEYWORD	1188:2	1188:2	4	for
LEAF_NODE	1188:2	1188:2	5	for
LEAF_NODE	1188:6	1188:6	4	(
FOR_INIT	1188:7	1188:12	4	s = 0 ;
EXPR	1188:7	1188:7	5	s = 0
ASSIGN	1188:7	1188:11	6	s = 0
LVAL	1188:7	1188:7	7	s
FIELD	1188:7	1188:7	8	s
LEAF_NODE	1188:7	1188:7	9	s
ASSIGN_OP	1188:9	1188:9	7	=
LEAF_NODE	1188:9	1188:9	8	=
RVAL	1188:11	1188:11	7	0
FIELD	1188:11	1188:11	8	0
LEAF_NODE	1188:11	1188:11	9	0
LEAF_NODE	1188:12	1188:12	5	;
CONDITION	1188:14	1188:14	4	s < spp
EXPR	1188:14	1188:18	5	s < spp
FIELD	1188:14	1188:14	6	s
LEAF_NODE	1188:14	1188:14	7	s
REL_OPERATOR	1188:16	1188:16	6	<
LEAF_NODE	1188:16	1188:16	7	<
FIELD	1188:18	1188:18	6	spp
LEAF_NODE	1188:18	1188:18	7	spp
LEAF_NODE	1188:21	1188:21	4	;
FOR_EXPR	1188:23	1188:23	4	s ++
EXPR	1188:23	1188:23	5	s ++
FIELD	1188:23	1188:24	6	s ++
LEAF_NODE	1188:23	1188:23	7	s
LEAF_NODE	1188:24	1188:24	7	++
LEAF_NODE	1188:26	1188:26	4	)
STATEMENTS	1189:4	1218:4	4	
LEAF_NODE	1189:4	1189:4	5	{
STATEMENTS	1190:4	1190:4	5	
ITERATION	1190:4	1191:6	6	
KEYWORD	1190:4	1190:4	7	for
LEAF_NODE	1190:4	1190:4	8	for
LEAF_NODE	1190:8	1190:8	7	(
FOR_INIT	1190:9	1190:16	7	row = 0 ;
EXPR	1190:9	1190:9	8	row = 0
ASSIGN	1190:9	1190:15	9	row = 0
LVAL	1190:9	1190:9	10	row
FIELD	1190:9	1190:9	11	row
LEAF_NODE	1190:9	1190:9	12	row
ASSIGN_OP	1190:13	1190:13	10	=
LEAF_NODE	1190:13	1190:13	11	=
RVAL	1190:15	1190:15	10	0
FIELD	1190:15	1190:15	11	0
LEAF_NODE	1190:15	1190:15	12	0
LEAF_NODE	1190:16	1190:16	8	;
CONDITION	1190:18	1190:18	7	row < length
EXPR	1190:18	1190:24	8	row < length
FIELD	1190:18	1190:18	9	row
LEAF_NODE	1190:18	1190:18	10	row
REL_OPERATOR	1190:22	1190:22	9	<
LEAF_NODE	1190:22	1190:22	10	<
FIELD	1190:24	1190:24	9	length
LEAF_NODE	1190:24	1190:24	10	length
LEAF_NODE	1190:30	1190:30	7	;
FOR_EXPR	1190:32	1190:32	7	row += rowsperstrip
EXPR	1190:32	1190:32	8	row += rowsperstrip
ASSIGN	1190:32	1190:39	9	row += rowsperstrip
LVAL	1190:32	1190:32	10	row
FIELD	1190:32	1190:32	11	row
LEAF_NODE	1190:32	1190:32	12	row
ASSIGN_OP	1190:36	1190:36	10	+=
LEAF_NODE	1190:36	1190:36	11	+=
RVAL	1190:39	1190:39	10	rowsperstrip
FIELD	1190:39	1190:39	11	rowsperstrip
LEAF_NODE	1190:39	1190:39	12	rowsperstrip
LEAF_NODE	1190:51	1190:51	7	)
STATEMENTS	1191:6	1217:6	7	
LEAF_NODE	1191:6	1191:6	8	{
STATEMENTS	1192:6	1211:6	8	
EXPR_STATEMENT	1192:6	1192:73	9	nrows = ( row + rowsperstrip > length ) ? length - row : rowsperstrip ;
EXPR	1192:6	1192:6	10	nrows = ( row + rowsperstrip > length ) ? length - row : rowsperstrip
ASSIGN	1192:6	1192:14	11	nrows = ( row + rowsperstrip > length ) ? length - row : rowsperstrip
LVAL	1192:6	1192:6	12	nrows
FIELD	1192:6	1192:6	13	nrows
LEAF_NODE	1192:6	1192:6	14	nrows
ASSIGN_OP	1192:12	1192:12	12	=
LEAF_NODE	1192:12	1192:12	13	=
RVAL	1192:14	1192:14	12	( row + rowsperstrip > length ) ? length - row : rowsperstrip
COND_EXPR	1192:14	1192:61	13	( row + rowsperstrip > length ) ? length - row : rowsperstrip
CONDITION	1192:14	1192:42	14	( row + rowsperstrip > length )
LEAF_NODE	1192:14	1192:14	15	(
FIELD	1192:15	1192:15	15	row
LEAF_NODE	1192:15	1192:15	16	row
LEAF_NODE	1192:19	1192:19	15	+
FIELD	1192:21	1192:21	15	rowsperstrip
LEAF_NODE	1192:21	1192:21	16	rowsperstrip
REL_OPERATOR	1192:34	1192:34	15	>
LEAF_NODE	1192:34	1192:34	16	>
FIELD	1192:36	1192:36	15	length
LEAF_NODE	1192:36	1192:36	16	length
LEAF_NODE	1192:42	1192:42	15	)
LEAF_NODE	1192:44	1192:44	14	?
EXPR	1192:46	1192:55	14	length - row
FIELD	1192:46	1192:46	15	length
LEAF_NODE	1192:46	1192:46	16	length
LEAF_NODE	1192:53	1192:53	15	-
FIELD	1192:55	1192:55	15	row
LEAF_NODE	1192:55	1192:55	16	row
LEAF_NODE	1192:59	1192:59	14	:
FIELD	1192:61	1192:61	14	rowsperstrip
LEAF_NODE	1192:61	1192:61	15	rowsperstrip
LEAF_NODE	1192:73	1192:73	10	;
EXPR_STATEMENT	1194:6	1194:44	9	stripsize = TIFFVStripSize ( out , nrows ) ;
EXPR	1194:6	1194:6	10	stripsize = TIFFVStripSize ( out , nrows )
ASSIGN	1194:6	1194:18	11	stripsize = TIFFVStripSize ( out , nrows )
LVAL	1194:6	1194:6	12	stripsize
FIELD	1194:6	1194:6	13	stripsize
LEAF_NODE	1194:6	1194:6	14	stripsize
ASSIGN_OP	1194:16	1194:16	12	=
LEAF_NODE	1194:16	1194:16	13	=
RVAL	1194:18	1194:18	12	TIFFVStripSize ( out , nrows )
FUNCTION_CALL	1194:18	1194:43	13	TIFFVStripSize ( out , nrows )
CALLEE	1194:18	1194:18	14	TIFFVStripSize
LEAF_NODE	1194:18	1194:18	15	TIFFVStripSize
LEAF_NODE	1194:32	1194:32	14	(
ARGUMENT	1194:33	1194:33	14	out
FIELD	1194:33	1194:33	15	out
LEAF_NODE	1194:33	1194:33	16	out
LEAF_NODE	1194:36	1194:36	14	,
ARGUMENT	1194:38	1194:38	14	nrows
FIELD	1194:38	1194:38	15	nrows
LEAF_NODE	1194:38	1194:38	16	nrows
LEAF_NODE	1194:43	1194:43	14	)
LEAF_NODE	1194:44	1194:44	10	;
EXPR_STATEMENT	1195:6	1195:33	9	src = buf + ( row * rowsize ) ;
EXPR	1195:6	1195:6	10	src = buf + ( row * rowsize )
ASSIGN	1195:6	1195:12	11	src = buf + ( row * rowsize )
LVAL	1195:6	1195:6	12	src
FIELD	1195:6	1195:6	13	src
LEAF_NODE	1195:6	1195:6	14	src
ASSIGN_OP	1195:10	1195:10	12	=
LEAF_NODE	1195:10	1195:10	13	=
RVAL	1195:12	1195:32	12	buf + ( row * rowsize )
FIELD	1195:12	1195:12	13	buf
LEAF_NODE	1195:12	1195:12	14	buf
LEAF_NODE	1195:16	1195:16	13	+
LEAF_NODE	1195:18	1195:18	13	(
FIELD	1195:19	1195:19	13	row
LEAF_NODE	1195:19	1195:19	14	row
LEAF_NODE	1195:23	1195:23	13	*
FIELD	1195:25	1195:25	13	rowsize
LEAF_NODE	1195:25	1195:25	14	rowsize
LEAF_NODE	1195:32	1195:32	13	)
LEAF_NODE	1195:33	1195:33	10	;
EXPR_STATEMENT	1196:6	1196:30	9	total_bytes += stripsize ;
EXPR	1196:6	1196:6	10	total_bytes += stripsize
ASSIGN	1196:6	1196:21	11	total_bytes += stripsize
LVAL	1196:6	1196:6	12	total_bytes
FIELD	1196:6	1196:6	13	total_bytes
LEAF_NODE	1196:6	1196:6	14	total_bytes
ASSIGN_OP	1196:18	1196:18	12	+=
LEAF_NODE	1196:18	1196:18	13	+=
RVAL	1196:21	1196:21	12	stripsize
FIELD	1196:21	1196:21	13	stripsize
LEAF_NODE	1196:21	1196:21	14	stripsize
LEAF_NODE	1196:30	1196:30	10	;
EXPR_STATEMENT	1197:6	1197:39	9	memset ( obuf , '\0' , rowstripsize ) ;
EXPR	1197:6	1197:6	10	memset ( obuf , '\0' , rowstripsize )
FUNCTION_CALL	1197:6	1197:38	11	memset ( obuf , '\0' , rowstripsize )
CALLEE	1197:6	1197:6	12	memset
LEAF_NODE	1197:6	1197:6	13	memset
LEAF_NODE	1197:13	1197:13	12	(
ARGUMENT	1197:14	1197:14	12	obuf
FIELD	1197:14	1197:14	13	obuf
LEAF_NODE	1197:14	1197:14	14	obuf
LEAF_NODE	1197:18	1197:18	12	,
ARGUMENT	1197:20	1197:20	12	'\0'
FIELD	1197:20	1197:20	13	'\0'
LEAF_NODE	1197:20	1197:20	14	'\0'
LEAF_NODE	1197:24	1197:24	12	,
ARGUMENT	1197:26	1197:26	12	rowstripsize
FIELD	1197:26	1197:26	13	rowstripsize
LEAF_NODE	1197:26	1197:26	14	rowstripsize
LEAF_NODE	1197:38	1197:38	12	)
LEAF_NODE	1197:39	1197:39	10	;
SELECTION	1198:6	1199:8	9	
KEYWORD	1198:6	1198:6	10	if
LEAF_NODE	1198:6	1198:6	11	if
LEAF_NODE	1198:9	1198:9	10	(
CONDITION	1198:10	1198:10	10	extractContigSamplesToBuffer ( obuf , src , nrows , width , s , spp , bps , dump )
EXPR	1198:10	1198:10	11	extractContigSamplesToBuffer ( obuf , src , nrows , width , s , spp , bps , dump )
FUNCTION_CALL	1198:10	1198:81	12	extractContigSamplesToBuffer ( obuf , src , nrows , width , s , spp , bps , dump )
CALLEE	1198:10	1198:10	13	extractContigSamplesToBuffer
LEAF_NODE	1198:10	1198:10	14	extractContigSamplesToBuffer
LEAF_NODE	1198:38	1198:38	13	(
ARGUMENT	1198:39	1198:39	13	obuf
FIELD	1198:39	1198:39	14	obuf
LEAF_NODE	1198:39	1198:39	15	obuf
LEAF_NODE	1198:43	1198:43	13	,
ARGUMENT	1198:45	1198:45	13	src
FIELD	1198:45	1198:45	14	src
LEAF_NODE	1198:45	1198:45	15	src
LEAF_NODE	1198:48	1198:48	13	,
ARGUMENT	1198:50	1198:50	13	nrows
FIELD	1198:50	1198:50	14	nrows
LEAF_NODE	1198:50	1198:50	15	nrows
LEAF_NODE	1198:55	1198:55	13	,
ARGUMENT	1198:57	1198:57	13	width
FIELD	1198:57	1198:57	14	width
LEAF_NODE	1198:57	1198:57	15	width
LEAF_NODE	1198:62	1198:62	13	,
ARGUMENT	1198:64	1198:64	13	s
FIELD	1198:64	1198:64	14	s
LEAF_NODE	1198:64	1198:64	15	s
LEAF_NODE	1198:65	1198:65	13	,
ARGUMENT	1198:67	1198:67	13	spp
FIELD	1198:67	1198:67	14	spp
LEAF_NODE	1198:67	1198:67	15	spp
LEAF_NODE	1198:70	1198:70	13	,
ARGUMENT	1198:72	1198:72	13	bps
FIELD	1198:72	1198:72	14	bps
LEAF_NODE	1198:72	1198:72	15	bps
LEAF_NODE	1198:75	1198:75	13	,
ARGUMENT	1198:77	1198:77	13	dump
FIELD	1198:77	1198:77	14	dump
LEAF_NODE	1198:77	1198:77	15	dump
LEAF_NODE	1198:81	1198:81	13	)
LEAF_NODE	1198:82	1198:82	10	)
STATEMENTS	1199:8	1202:1	10	
LEAF_NODE	1199:8	1199:8	11	{
STATEMENTS	1200:8	1201:8	11	
EXPR_STATEMENT	1200:8	1200:23	12	_TIFFfree ( obuf ) ;
EXPR	1200:8	1200:8	13	_TIFFfree ( obuf )
FUNCTION_CALL	1200:8	1200:22	14	_TIFFfree ( obuf )
CALLEE	1200:8	1200:8	15	_TIFFfree
LEAF_NODE	1200:8	1200:8	16	_TIFFfree
LEAF_NODE	1200:17	1200:17	15	(
ARGUMENT	1200:18	1200:18	15	obuf
FIELD	1200:18	1200:18	16	obuf
LEAF_NODE	1200:18	1200:18	17	obuf
LEAF_NODE	1200:22	1200:22	15	)
LEAF_NODE	1200:23	1200:23	13	;
JUMP_STATEMENT	1201:8	1201:16	12	return 1 ;
KEYWORD	1201:8	1201:8	13	return
LEAF_NODE	1201:8	1201:8	14	return
DESTINATION	1201:15	1201:15	13	1
EXPR	1201:15	1201:15	14	1
FIELD	1201:15	1201:15	15	1
LEAF_NODE	1201:15	1201:15	16	1
LEAF_NODE	1201:16	1201:16	13	;
LEAF_NODE	1202:1	1202:1	11	}
SELECTION	1203:6	1204:8	9	
KEYWORD	1203:6	1203:6	10	if
LEAF_NODE	1203:6	1203:6	11	if
LEAF_NODE	1203:9	1203:9	10	(
CONDITION	1203:10	1203:10	10	( dump -> outfile != NULL ) && ( dump -> level == 1 )
EXPR	1203:10	1203:10	11	( dump -> outfile != NULL ) && ( dump -> level == 1 )
AND	1203:10	1203:37	12	( dump -> outfile != NULL ) && ( dump -> level == 1 )
EXPR	1203:10	1203:32	13	( dump -> outfile != NULL )
LEAF_NODE	1203:10	1203:10	14	(
FIELD	1203:11	1203:17	14	dump -> outfile
LEAF_NODE	1203:11	1203:11	15	dump
LEAF_NODE	1203:15	1203:15	15	->
LEAF_NODE	1203:17	1203:17	15	outfile
EQ_OPERATOR	1203:25	1203:25	14	!=
LEAF_NODE	1203:25	1203:25	15	!=
FIELD	1203:28	1203:28	14	NULL
LEAF_NODE	1203:28	1203:28	15	NULL
LEAF_NODE	1203:32	1203:32	14	)
LEAF_NODE	1203:34	1203:34	13	&&
EXPR	1203:37	1203:54	13	( dump -> level == 1 )
LEAF_NODE	1203:37	1203:37	14	(
FIELD	1203:38	1203:44	14	dump -> level
LEAF_NODE	1203:38	1203:38	15	dump
LEAF_NODE	1203:42	1203:42	15	->
LEAF_NODE	1203:44	1203:44	15	level
EQ_OPERATOR	1203:50	1203:50	14	==
LEAF_NODE	1203:50	1203:50	15	==
FIELD	1203:53	1203:53	14	1
LEAF_NODE	1203:53	1203:53	15	1
LEAF_NODE	1203:54	1203:54	14	)
LEAF_NODE	1203:55	1203:55	10	)
STATEMENTS	1204:8	1209:1	10	
LEAF_NODE	1204:8	1204:8	11	{
STATEMENTS	1205:8	1208:8	11	
EXPR_STATEMENT	1205:8	1207:80	12	dump_info ( dump -> outfile , dump -> format , "" , "Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d" , s + 1 , strip + 1 , stripsize , row + 1 , scanlinesize , src - buf ) ;
EXPR	1205:8	1205:8	13	dump_info ( dump -> outfile , dump -> format , "" , "Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d" , s + 1 , strip + 1 , stripsize , row + 1 , scanlinesize , src - buf )
FUNCTION_CALL	1205:8	1207:79	14	dump_info ( dump -> outfile , dump -> format , "" , "Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d" , s + 1 , strip + 1 , stripsize , row + 1 , scanlinesize , src - buf )
CALLEE	1205:8	1205:8	15	dump_info
LEAF_NODE	1205:8	1205:8	16	dump_info
LEAF_NODE	1205:17	1205:17	15	(
ARGUMENT	1205:18	1205:18	15	dump -> outfile
FIELD	1205:18	1205:24	16	dump -> outfile
LEAF_NODE	1205:18	1205:18	17	dump
LEAF_NODE	1205:22	1205:22	17	->
LEAF_NODE	1205:24	1205:24	17	outfile
LEAF_NODE	1205:31	1205:31	15	,
ARGUMENT	1205:33	1205:33	15	dump -> format
FIELD	1205:33	1205:39	16	dump -> format
LEAF_NODE	1205:33	1205:33	17	dump
LEAF_NODE	1205:37	1205:37	17	->
LEAF_NODE	1205:39	1205:39	17	format
LEAF_NODE	1205:45	1205:45	15	,
ARGUMENT	1205:46	1205:46	15	""
FIELD	1205:46	1205:46	16	""
LEAF_NODE	1205:46	1205:46	17	""
LEAF_NODE	1205:48	1205:48	15	,
ARGUMENT	1206:18	1206:18	15	"Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d"
FIELD	1206:18	1206:18	16	"Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d"
LEAF_NODE	1206:18	1206:18	17	"Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d"
LEAF_NODE	1206:94	1206:94	15	,
ARGUMENT	1207:18	1207:22	15	s + 1
FIELD	1207:18	1207:18	16	s
LEAF_NODE	1207:18	1207:18	17	s
LEAF_NODE	1207:20	1207:20	16	+
FIELD	1207:22	1207:22	16	1
LEAF_NODE	1207:22	1207:22	17	1
LEAF_NODE	1207:23	1207:23	15	,
ARGUMENT	1207:25	1207:33	15	strip + 1
FIELD	1207:25	1207:25	16	strip
LEAF_NODE	1207:25	1207:25	17	strip
LEAF_NODE	1207:31	1207:31	16	+
FIELD	1207:33	1207:33	16	1
LEAF_NODE	1207:33	1207:33	17	1
LEAF_NODE	1207:34	1207:34	15	,
ARGUMENT	1207:36	1207:36	15	stripsize
FIELD	1207:36	1207:36	16	stripsize
LEAF_NODE	1207:36	1207:36	17	stripsize
LEAF_NODE	1207:45	1207:45	15	,
ARGUMENT	1207:47	1207:53	15	row + 1
FIELD	1207:47	1207:47	16	row
LEAF_NODE	1207:47	1207:47	17	row
LEAF_NODE	1207:51	1207:51	16	+
FIELD	1207:53	1207:53	16	1
LEAF_NODE	1207:53	1207:53	17	1
LEAF_NODE	1207:54	1207:54	15	,
ARGUMENT	1207:56	1207:56	15	scanlinesize
FIELD	1207:56	1207:56	16	scanlinesize
LEAF_NODE	1207:56	1207:56	17	scanlinesize
LEAF_NODE	1207:68	1207:68	15	,
ARGUMENT	1207:70	1207:76	15	src - buf
FIELD	1207:70	1207:70	16	src
LEAF_NODE	1207:70	1207:70	17	src
LEAF_NODE	1207:74	1207:74	16	-
FIELD	1207:76	1207:76	16	buf
LEAF_NODE	1207:76	1207:76	17	buf
LEAF_NODE	1207:79	1207:79	15	)
LEAF_NODE	1207:80	1207:80	13	;
EXPR_STATEMENT	1208:8	1208:80	12	dump_buffer ( dump -> outfile , dump -> format , nrows , scanlinesize , row , obuf ) ;
EXPR	1208:8	1208:8	13	dump_buffer ( dump -> outfile , dump -> format , nrows , scanlinesize , row , obuf )
FUNCTION_CALL	1208:8	1208:79	14	dump_buffer ( dump -> outfile , dump -> format , nrows , scanlinesize , row , obuf )
CALLEE	1208:8	1208:8	15	dump_buffer
LEAF_NODE	1208:8	1208:8	16	dump_buffer
LEAF_NODE	1208:19	1208:19	15	(
ARGUMENT	1208:20	1208:20	15	dump -> outfile
FIELD	1208:20	1208:26	16	dump -> outfile
LEAF_NODE	1208:20	1208:20	17	dump
LEAF_NODE	1208:24	1208:24	17	->
LEAF_NODE	1208:26	1208:26	17	outfile
LEAF_NODE	1208:33	1208:33	15	,
ARGUMENT	1208:35	1208:35	15	dump -> format
FIELD	1208:35	1208:41	16	dump -> format
LEAF_NODE	1208:35	1208:35	17	dump
LEAF_NODE	1208:39	1208:39	17	->
LEAF_NODE	1208:41	1208:41	17	format
LEAF_NODE	1208:47	1208:47	15	,
ARGUMENT	1208:49	1208:49	15	nrows
FIELD	1208:49	1208:49	16	nrows
LEAF_NODE	1208:49	1208:49	17	nrows
LEAF_NODE	1208:54	1208:54	15	,
ARGUMENT	1208:56	1208:56	15	scanlinesize
FIELD	1208:56	1208:56	16	scanlinesize
LEAF_NODE	1208:56	1208:56	17	scanlinesize
LEAF_NODE	1208:68	1208:68	15	,
ARGUMENT	1208:70	1208:70	15	row
FIELD	1208:70	1208:70	16	row
LEAF_NODE	1208:70	1208:70	17	row
LEAF_NODE	1208:73	1208:73	15	,
ARGUMENT	1208:75	1208:75	15	obuf
FIELD	1208:75	1208:75	16	obuf
LEAF_NODE	1208:75	1208:75	17	obuf
LEAF_NODE	1208:79	1208:79	15	)
LEAF_NODE	1208:80	1208:80	13	;
LEAF_NODE	1209:1	1209:1	11	}
SELECTION	1211:6	1212:8	9	
KEYWORD	1211:6	1211:6	10	if
LEAF_NODE	1211:6	1211:6	11	if
LEAF_NODE	1211:9	1211:9	10	(
CONDITION	1211:10	1211:10	10	TIFFWriteEncodedStrip ( out , strip ++ , obuf , stripsize ) < 0
EXPR	1211:10	1211:65	11	TIFFWriteEncodedStrip ( out , strip ++ , obuf , stripsize ) < 0
FUNCTION_CALL	1211:10	1211:61	12	TIFFWriteEncodedStrip ( out , strip ++ , obuf , stripsize )
CALLEE	1211:10	1211:10	13	TIFFWriteEncodedStrip
LEAF_NODE	1211:10	1211:10	14	TIFFWriteEncodedStrip
LEAF_NODE	1211:31	1211:31	13	(
ARGUMENT	1211:32	1211:32	13	out
FIELD	1211:32	1211:32	14	out
LEAF_NODE	1211:32	1211:32	15	out
LEAF_NODE	1211:35	1211:35	13	,
ARGUMENT	1211:37	1211:37	13	strip ++
FIELD	1211:37	1211:42	14	strip ++
LEAF_NODE	1211:37	1211:37	15	strip
LEAF_NODE	1211:42	1211:42	15	++
LEAF_NODE	1211:44	1211:44	13	,
ARGUMENT	1211:46	1211:46	13	obuf
FIELD	1211:46	1211:46	14	obuf
LEAF_NODE	1211:46	1211:46	15	obuf
LEAF_NODE	1211:50	1211:50	13	,
ARGUMENT	1211:52	1211:52	13	stripsize
FIELD	1211:52	1211:52	14	stripsize
LEAF_NODE	1211:52	1211:52	15	stripsize
LEAF_NODE	1211:61	1211:61	13	)
REL_OPERATOR	1211:63	1211:63	12	<
LEAF_NODE	1211:63	1211:63	13	<
FIELD	1211:65	1211:65	12	0
LEAF_NODE	1211:65	1211:65	13	0
LEAF_NODE	1211:66	1211:66	10	)
STATEMENTS	1212:8	1216:1	10	
LEAF_NODE	1212:8	1212:8	11	{
STATEMENTS	1213:1	1215:1	11	
EXPR_STATEMENT	1213:1	1213:71	12	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 ) ;
EXPR	1213:1	1213:1	13	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
FUNCTION_CALL	1213:1	1213:70	14	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
CALLEE	1213:1	1213:1	15	TIFFError
LEAF_NODE	1213:1	1213:1	16	TIFFError
LEAF_NODE	1213:10	1213:10	15	(
ARGUMENT	1213:11	1213:11	15	TIFFFileName ( out )
FUNCTION_CALL	1213:11	1213:27	16	TIFFFileName ( out )
CALLEE	1213:11	1213:11	17	TIFFFileName
LEAF_NODE	1213:11	1213:11	18	TIFFFileName
LEAF_NODE	1213:23	1213:23	17	(
ARGUMENT	1213:24	1213:24	17	out
FIELD	1213:24	1213:24	18	out
LEAF_NODE	1213:24	1213:24	19	out
LEAF_NODE	1213:27	1213:27	17	)
LEAF_NODE	1213:28	1213:28	15	,
ARGUMENT	1213:30	1213:30	15	"Error, can't write strip %u"
FIELD	1213:30	1213:30	16	"Error, can't write strip %u"
LEAF_NODE	1213:30	1213:30	17	"Error, can't write strip %u"
LEAF_NODE	1213:59	1213:59	15	,
ARGUMENT	1213:61	1213:69	15	strip - 1
FIELD	1213:61	1213:61	16	strip
LEAF_NODE	1213:61	1213:61	17	strip
LEAF_NODE	1213:67	1213:67	16	-
FIELD	1213:69	1213:69	16	1
LEAF_NODE	1213:69	1213:69	17	1
LEAF_NODE	1213:70	1213:70	15	)
LEAF_NODE	1213:71	1213:71	13	;
EXPR_STATEMENT	1214:1	1214:16	12	_TIFFfree ( obuf ) ;
EXPR	1214:1	1214:1	13	_TIFFfree ( obuf )
FUNCTION_CALL	1214:1	1214:15	14	_TIFFfree ( obuf )
CALLEE	1214:1	1214:1	15	_TIFFfree
LEAF_NODE	1214:1	1214:1	16	_TIFFfree
LEAF_NODE	1214:10	1214:10	15	(
ARGUMENT	1214:11	1214:11	15	obuf
FIELD	1214:11	1214:11	16	obuf
LEAF_NODE	1214:11	1214:11	17	obuf
LEAF_NODE	1214:15	1214:15	15	)
LEAF_NODE	1214:16	1214:16	13	;
JUMP_STATEMENT	1215:1	1215:9	12	return 1 ;
KEYWORD	1215:1	1215:1	13	return
LEAF_NODE	1215:1	1215:1	14	return
DESTINATION	1215:8	1215:8	13	1
EXPR	1215:8	1215:8	14	1
FIELD	1215:8	1215:8	15	1
LEAF_NODE	1215:8	1215:8	16	1
LEAF_NODE	1215:9	1215:9	13	;
LEAF_NODE	1216:1	1216:1	11	}
LEAF_NODE	1217:6	1217:6	8	}
LEAF_NODE	1218:4	1218:4	5	}
EXPR_STATEMENT	1220:2	1220:17	3	_TIFFfree ( obuf ) ;
EXPR	1220:2	1220:2	4	_TIFFfree ( obuf )
FUNCTION_CALL	1220:2	1220:16	5	_TIFFfree ( obuf )
CALLEE	1220:2	1220:2	6	_TIFFfree
LEAF_NODE	1220:2	1220:2	7	_TIFFfree
LEAF_NODE	1220:11	1220:11	6	(
ARGUMENT	1220:12	1220:12	6	obuf
FIELD	1220:12	1220:12	7	obuf
LEAF_NODE	1220:12	1220:12	8	obuf
LEAF_NODE	1220:16	1220:16	6	)
LEAF_NODE	1220:17	1220:17	4	;
JUMP_STATEMENT	1221:2	1221:10	3	return 0 ;
KEYWORD	1221:2	1221:2	4	return
LEAF_NODE	1221:2	1221:2	5	return
DESTINATION	1221:9	1221:9	4	0
EXPR	1221:9	1221:9	5	0
FIELD	1221:9	1221:9	6	0
LEAF_NODE	1221:9	1221:9	7	0
LEAF_NODE	1221:10	1221:10	4	;
LEAF_NODE	1222:0	1222:0	2	}
FUNCTION_DEF	1227:0	1317:2	1	
RETURN_TYPE	1227:0	1227:7	2	static int
LEAF_NODE	1227:0	1227:0	3	static
TYPE_NAME	1227:7	1227:7	3	int
LEAF_NODE	1227:7	1227:7	4	int
FUNCTION_NAME	1227:11	1227:11	2	writeBufferToContigTiles
LEAF_NODE	1227:11	1227:11	3	writeBufferToContigTiles
PARAMETER_LIST	1227:36	1229:61	2	( TIFF * out , uint8 * buf , uint32 imagelength , uint32 imagewidth , tsample_t spp , struct dump_opts * dump )
LEAF_NODE	1227:36	1227:36	3	(
PARAMETER_DECL	1227:37	1227:43	3	TIFF * out
TYPE	1227:37	1227:41	4	TIFF *
TYPE_NAME	1227:37	1227:37	5	TIFF
LEAF_NODE	1227:37	1227:37	6	TIFF
POINTER	1227:41	1227:41	5	*
LEAF_NODE	1227:41	1227:41	6	*
NAME	1227:43	1227:43	4	out
LEAF_NODE	1227:43	1227:43	5	out
LEAF_NODE	1227:46	1227:46	3	,
PARAMETER_DECL	1227:48	1227:55	3	uint8 * buf
TYPE	1227:48	1227:53	4	uint8 *
TYPE_NAME	1227:48	1227:48	5	uint8
LEAF_NODE	1227:48	1227:48	6	uint8
POINTER	1227:53	1227:53	5	*
LEAF_NODE	1227:53	1227:53	6	*
NAME	1227:55	1227:55	4	buf
LEAF_NODE	1227:55	1227:55	5	buf
LEAF_NODE	1227:58	1227:58	3	,
PARAMETER_DECL	1227:60	1227:67	3	uint32 imagelength
TYPE	1227:60	1227:60	4	uint32
TYPE_NAME	1227:60	1227:60	5	uint32
LEAF_NODE	1227:60	1227:60	6	uint32
NAME	1227:67	1227:67	4	imagelength
LEAF_NODE	1227:67	1227:67	5	imagelength
LEAF_NODE	1227:78	1227:78	3	,
PARAMETER_DECL	1228:11	1228:18	3	uint32 imagewidth
TYPE	1228:11	1228:11	4	uint32
TYPE_NAME	1228:11	1228:11	5	uint32
LEAF_NODE	1228:11	1228:11	6	uint32
NAME	1228:18	1228:18	4	imagewidth
LEAF_NODE	1228:18	1228:18	5	imagewidth
LEAF_NODE	1228:28	1228:28	3	,
PARAMETER_DECL	1228:30	1228:40	3	tsample_t spp
TYPE	1228:30	1228:30	4	tsample_t
TYPE_NAME	1228:30	1228:30	5	tsample_t
LEAF_NODE	1228:30	1228:30	6	tsample_t
NAME	1228:40	1228:40	4	spp
LEAF_NODE	1228:40	1228:40	5	spp
LEAF_NODE	1228:43	1228:43	3	,
PARAMETER_DECL	1229:39	1229:57	3	struct dump_opts * dump
TYPE	1229:39	1229:55	4	struct dump_opts *
TYPE_NAME	1229:39	1229:46	5	struct dump_opts
LEAF_NODE	1229:39	1229:39	6	struct
LEAF_NODE	1229:46	1229:46	6	dump_opts
POINTER	1229:55	1229:55	5	*
LEAF_NODE	1229:55	1229:55	6	*
NAME	1229:57	1229:57	4	dump
LEAF_NODE	1229:57	1229:57	5	dump
LEAF_NODE	1229:61	1229:61	3	)
LEAF_NODE	1230:2	1230:2	2	{
STATEMENTS	1231:2	1316:2	2	
SIMPLE_DECL	1231:2	1231:12	3	uint16 bps ;
VAR_DECL	1231:2	1231:9	4	uint16 bps
TYPE	1231:2	1231:2	5	uint16
TYPE_NAME	1231:2	1231:2	6	uint16
LEAF_NODE	1231:2	1231:2	7	uint16
NAME	1231:9	1231:9	5	bps
LEAF_NODE	1231:9	1231:9	6	bps
LEAF_NODE	1231:12	1231:12	4	;
SIMPLE_DECL	1232:2	1232:15	3	uint32 tl , uint32 tw ;
INIT_DECL_LIST	1232:2	1232:2	4	uint32 tl , uint32 tw
VAR_DECL	1232:2	1232:9	5	uint32 tl
TYPE	1232:2	1232:2	6	uint32
TYPE_NAME	1232:2	1232:2	7	uint32
LEAF_NODE	1232:2	1232:2	8	uint32
NAME	1232:9	1232:9	6	tl
LEAF_NODE	1232:9	1232:9	7	tl
LEAF_NODE	1232:11	1232:11	5	,
VAR_DECL	1232:2	1232:13	5	uint32 tw
TYPE	1232:2	1232:2	6	uint32
TYPE_NAME	1232:2	1232:2	7	uint32
LEAF_NODE	1232:2	1232:2	8	uint32
NAME	1232:13	1232:13	6	tw
LEAF_NODE	1232:13	1232:13	7	tw
LEAF_NODE	1232:15	1232:15	4	;
SIMPLE_DECL	1233:2	1233:29	3	uint32 row , uint32 col , uint32 nrow , uint32 ncol ;
INIT_DECL_LIST	1233:2	1233:2	4	uint32 row , uint32 col , uint32 nrow , uint32 ncol
VAR_DECL	1233:2	1233:9	5	uint32 row
TYPE	1233:2	1233:2	6	uint32
TYPE_NAME	1233:2	1233:2	7	uint32
LEAF_NODE	1233:2	1233:2	8	uint32
NAME	1233:9	1233:9	6	row
LEAF_NODE	1233:9	1233:9	7	row
LEAF_NODE	1233:12	1233:12	5	,
INIT_DECL_LIST	1233:2	1233:2	5	uint32 col , uint32 nrow , uint32 ncol
VAR_DECL	1233:2	1233:14	6	uint32 col
TYPE	1233:2	1233:2	7	uint32
TYPE_NAME	1233:2	1233:2	8	uint32
LEAF_NODE	1233:2	1233:2	9	uint32
NAME	1233:14	1233:14	7	col
LEAF_NODE	1233:14	1233:14	8	col
LEAF_NODE	1233:17	1233:17	6	,
INIT_DECL_LIST	1233:2	1233:2	6	uint32 nrow , uint32 ncol
VAR_DECL	1233:2	1233:19	7	uint32 nrow
TYPE	1233:2	1233:2	8	uint32
TYPE_NAME	1233:2	1233:2	9	uint32
LEAF_NODE	1233:2	1233:2	10	uint32
NAME	1233:19	1233:19	8	nrow
LEAF_NODE	1233:19	1233:19	9	nrow
LEAF_NODE	1233:23	1233:23	7	,
VAR_DECL	1233:2	1233:25	7	uint32 ncol
TYPE	1233:2	1233:2	8	uint32
TYPE_NAME	1233:2	1233:2	9	uint32
LEAF_NODE	1233:2	1233:2	10	uint32
NAME	1233:25	1233:25	8	ncol
LEAF_NODE	1233:25	1233:25	9	ncol
LEAF_NODE	1233:29	1233:29	4	;
SIMPLE_DECL	1234:2	1234:32	3	uint32 src_rowsize , uint32 col_offset ;
INIT_DECL_LIST	1234:2	1234:2	4	uint32 src_rowsize , uint32 col_offset
VAR_DECL	1234:2	1234:9	5	uint32 src_rowsize
TYPE	1234:2	1234:2	6	uint32
TYPE_NAME	1234:2	1234:2	7	uint32
LEAF_NODE	1234:2	1234:2	8	uint32
NAME	1234:9	1234:9	6	src_rowsize
LEAF_NODE	1234:9	1234:9	7	src_rowsize
LEAF_NODE	1234:20	1234:20	5	,
VAR_DECL	1234:2	1234:22	5	uint32 col_offset
TYPE	1234:2	1234:2	6	uint32
TYPE_NAME	1234:2	1234:2	7	uint32
LEAF_NODE	1234:2	1234:2	8	uint32
NAME	1234:22	1234:22	6	col_offset
LEAF_NODE	1234:22	1234:22	7	col_offset
LEAF_NODE	1234:32	1234:32	4	;
SIMPLE_DECL	1235:2	1235:45	3	uint32 tile_rowsize ; tile_rowsize = TIFFTileRowSize ( out ) ;
VAR_DECL	1235:2	1235:9	4	uint32 tile_rowsize ; tile_rowsize = TIFFTileRowSize ( out )
TYPE	1235:2	1235:2	5	uint32
TYPE_NAME	1235:2	1235:2	6	uint32
LEAF_NODE	1235:2	1235:2	7	uint32
NAME	1235:9	1235:9	5	tile_rowsize
LEAF_NODE	1235:9	1235:9	6	tile_rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	1235:9	1235:9	5	tile_rowsize = TIFFTileRowSize ( out )
ASSIGN	1235:9	1235:25	6	tile_rowsize = TIFFTileRowSize ( out )
LVAL	1235:9	1235:9	7	tile_rowsize
NAME	1235:9	1235:9	8	tile_rowsize
LEAF_NODE	1235:9	1235:9	9	tile_rowsize
ASSIGN_OP	1235:23	1235:23	7	=
LEAF_NODE	1235:23	1235:23	8	=
RVAL	1235:25	1235:25	7	TIFFTileRowSize ( out )
FUNCTION_CALL	1235:25	1235:44	8	TIFFTileRowSize ( out )
CALLEE	1235:25	1235:25	9	TIFFTileRowSize
LEAF_NODE	1235:25	1235:25	10	TIFFTileRowSize
LEAF_NODE	1235:40	1235:40	9	(
ARGUMENT	1235:41	1235:41	9	out
FIELD	1235:41	1235:41	10	out
LEAF_NODE	1235:41	1235:41	11	out
LEAF_NODE	1235:44	1235:44	9	)
LEAF_NODE	1235:45	1235:45	4	;
SIMPLE_DECL	1236:2	1236:28	3	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	1236:2	1236:9	4	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	1236:2	1236:7	5	uint8 *
TYPE_NAME	1236:2	1236:2	6	uint8
LEAF_NODE	1236:2	1236:2	7	uint8
POINTER	1236:7	1236:7	6	*
LEAF_NODE	1236:7	1236:7	7	*
NAME	1236:9	1236:9	5	bufp
LEAF_NODE	1236:9	1236:9	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	1236:9	1236:9	5	bufp = ( uint8 * ) buf
ASSIGN	1236:9	1236:16	6	bufp = ( uint8 * ) buf
LVAL	1236:9	1236:9	7	bufp
NAME	1236:9	1236:9	8	bufp
LEAF_NODE	1236:9	1236:9	9	bufp
ASSIGN_OP	1236:14	1236:14	7	=
LEAF_NODE	1236:14	1236:14	8	=
RVAL	1236:16	1236:25	7	( uint8 * ) buf
LEAF_NODE	1236:16	1236:16	8	(
TYPE_NAME	1236:17	1236:17	8	uint8
LEAF_NODE	1236:17	1236:17	9	uint8
LEAF_NODE	1236:22	1236:22	8	*
LEAF_NODE	1236:23	1236:23	8	)
FIELD	1236:25	1236:25	8	buf
LEAF_NODE	1236:25	1236:25	9	buf
LEAF_NODE	1236:28	1236:28	4	;
SIMPLE_DECL	1237:2	1237:27	3	tsize_t tile_buffsize ; tile_buffsize = 0 ;
VAR_DECL	1237:2	1237:10	4	tsize_t tile_buffsize ; tile_buffsize = 0
TYPE	1237:2	1237:2	5	tsize_t
TYPE_NAME	1237:2	1237:2	6	tsize_t
LEAF_NODE	1237:2	1237:2	7	tsize_t
NAME	1237:10	1237:10	5	tile_buffsize
LEAF_NODE	1237:10	1237:10	6	tile_buffsize
LEAF_NODE	0:0	0:0	5	;
INIT	1237:10	1237:10	5	tile_buffsize = 0
ASSIGN	1237:10	1237:26	6	tile_buffsize = 0
LVAL	1237:10	1237:10	7	tile_buffsize
NAME	1237:10	1237:10	8	tile_buffsize
LEAF_NODE	1237:10	1237:10	9	tile_buffsize
ASSIGN_OP	1237:24	1237:24	7	=
LEAF_NODE	1237:24	1237:24	8	=
RVAL	1237:26	1237:26	7	0
FIELD	1237:26	1237:26	8	0
LEAF_NODE	1237:26	1237:26	9	0
LEAF_NODE	1237:27	1237:27	4	;
SIMPLE_DECL	1238:2	1238:38	3	tsize_t tilesize ; tilesize = TIFFTileSize ( out ) ;
VAR_DECL	1238:2	1238:10	4	tsize_t tilesize ; tilesize = TIFFTileSize ( out )
TYPE	1238:2	1238:2	5	tsize_t
TYPE_NAME	1238:2	1238:2	6	tsize_t
LEAF_NODE	1238:2	1238:2	7	tsize_t
NAME	1238:10	1238:10	5	tilesize
LEAF_NODE	1238:10	1238:10	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	1238:10	1238:10	5	tilesize = TIFFTileSize ( out )
ASSIGN	1238:10	1238:21	6	tilesize = TIFFTileSize ( out )
LVAL	1238:10	1238:10	7	tilesize
NAME	1238:10	1238:10	8	tilesize
LEAF_NODE	1238:10	1238:10	9	tilesize
ASSIGN_OP	1238:19	1238:19	7	=
LEAF_NODE	1238:19	1238:19	8	=
RVAL	1238:21	1238:21	7	TIFFTileSize ( out )
FUNCTION_CALL	1238:21	1238:37	8	TIFFTileSize ( out )
CALLEE	1238:21	1238:21	9	TIFFTileSize
LEAF_NODE	1238:21	1238:21	10	TIFFTileSize
LEAF_NODE	1238:33	1238:33	9	(
ARGUMENT	1238:34	1238:34	9	out
FIELD	1238:34	1238:34	10	out
LEAF_NODE	1238:34	1238:34	11	out
LEAF_NODE	1238:37	1238:37	9	)
LEAF_NODE	1238:38	1238:38	4	;
SIMPLE_DECL	1239:2	1239:31	3	unsigned char * tilebuf ; tilebuf = NULL ;
VAR_DECL	1239:2	1239:17	4	unsigned char * tilebuf ; tilebuf = NULL
TYPE	1239:2	1239:16	5	unsigned char *
TYPE_NAME	1239:2	1239:11	6	unsigned char
LEAF_NODE	1239:2	1239:2	7	unsigned
LEAF_NODE	1239:11	1239:11	7	char
POINTER	1239:16	1239:16	6	*
LEAF_NODE	1239:16	1239:16	7	*
NAME	1239:17	1239:17	5	tilebuf
LEAF_NODE	1239:17	1239:17	6	tilebuf
LEAF_NODE	0:0	0:0	5	;
INIT	1239:17	1239:17	5	tilebuf = NULL
ASSIGN	1239:17	1239:27	6	tilebuf = NULL
LVAL	1239:17	1239:17	7	tilebuf
NAME	1239:17	1239:17	8	tilebuf
LEAF_NODE	1239:17	1239:17	9	tilebuf
ASSIGN_OP	1239:25	1239:25	7	=
LEAF_NODE	1239:25	1239:25	8	=
RVAL	1239:27	1239:27	7	NULL
FIELD	1239:27	1239:27	8	NULL
LEAF_NODE	1239:27	1239:27	9	NULL
LEAF_NODE	1239:31	1239:31	4	;
SELECTION	1241:2	1244:6	3	
KEYWORD	1241:2	1241:2	4	if
LEAF_NODE	1241:2	1241:2	5	if
LEAF_NODE	1241:4	1241:4	4	(
CONDITION	1241:6	1241:6	4	! TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl ) || ! TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) || ! TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
EXPR	1241:6	1241:6	5	! TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl ) || ! TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) || ! TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
OR	1241:6	1242:6	6	! TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl ) || ! TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) || ! TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
EXPR	1241:6	1241:6	7	! TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
UNARY_EXPR	1241:6	1241:7	8	! TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
UNARY_OPERATOR	1241:6	1241:6	9	!
LEAF_NODE	1241:6	1241:6	10	!
FUNCTION_CALL	1241:7	1241:48	9	TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
CALLEE	1241:7	1241:7	10	TIFFGetField
LEAF_NODE	1241:7	1241:7	11	TIFFGetField
LEAF_NODE	1241:19	1241:19	10	(
ARGUMENT	1241:20	1241:20	10	out
FIELD	1241:20	1241:20	11	out
LEAF_NODE	1241:20	1241:20	12	out
LEAF_NODE	1241:23	1241:23	10	,
ARGUMENT	1241:25	1241:25	10	TIFFTAG_TILELENGTH
FIELD	1241:25	1241:25	11	TIFFTAG_TILELENGTH
LEAF_NODE	1241:25	1241:25	12	TIFFTAG_TILELENGTH
LEAF_NODE	1241:43	1241:43	10	,
ARGUMENT	1241:45	1241:45	10	& tl
UNARY_EXPR	1241:45	1241:46	11	& tl
UNARY_OPERATOR	1241:45	1241:45	12	&
LEAF_NODE	1241:45	1241:45	13	&
FIELD	1241:46	1241:46	12	tl
LEAF_NODE	1241:46	1241:46	13	tl
LEAF_NODE	1241:48	1241:48	10	)
LEAF_NODE	1241:50	1241:50	7	||
EXPR	1242:6	1242:6	7	! TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) || ! TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
OR	1242:6	1243:6	8	! TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) || ! TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
EXPR	1242:6	1242:6	9	! TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
UNARY_EXPR	1242:6	1242:7	10	! TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
UNARY_OPERATOR	1242:6	1242:6	11	!
LEAF_NODE	1242:6	1242:6	12	!
FUNCTION_CALL	1242:7	1242:47	11	TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1242:7	1242:7	12	TIFFGetField
LEAF_NODE	1242:7	1242:7	13	TIFFGetField
LEAF_NODE	1242:19	1242:19	12	(
ARGUMENT	1242:20	1242:20	12	out
FIELD	1242:20	1242:20	13	out
LEAF_NODE	1242:20	1242:20	14	out
LEAF_NODE	1242:23	1242:23	12	,
ARGUMENT	1242:25	1242:25	12	TIFFTAG_TILEWIDTH
FIELD	1242:25	1242:25	13	TIFFTAG_TILEWIDTH
LEAF_NODE	1242:25	1242:25	14	TIFFTAG_TILEWIDTH
LEAF_NODE	1242:42	1242:42	12	,
ARGUMENT	1242:44	1242:44	12	& tw
UNARY_EXPR	1242:44	1242:45	13	& tw
UNARY_OPERATOR	1242:44	1242:44	14	&
LEAF_NODE	1242:44	1242:44	15	&
FIELD	1242:45	1242:45	14	tw
LEAF_NODE	1242:45	1242:45	15	tw
LEAF_NODE	1242:47	1242:47	12	)
LEAF_NODE	1242:49	1242:49	9	||
EXPR	1243:6	1243:6	9	! TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
UNARY_EXPR	1243:6	1243:7	10	! TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
UNARY_OPERATOR	1243:6	1243:6	11	!
LEAF_NODE	1243:6	1243:6	12	!
FUNCTION_CALL	1243:7	1243:52	11	TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	1243:7	1243:7	12	TIFFGetField
LEAF_NODE	1243:7	1243:7	13	TIFFGetField
LEAF_NODE	1243:19	1243:19	12	(
ARGUMENT	1243:20	1243:20	12	out
FIELD	1243:20	1243:20	13	out
LEAF_NODE	1243:20	1243:20	14	out
LEAF_NODE	1243:23	1243:23	12	,
ARGUMENT	1243:25	1243:25	12	TIFFTAG_BITSPERSAMPLE
FIELD	1243:25	1243:25	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1243:25	1243:25	14	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1243:46	1243:46	12	,
ARGUMENT	1243:48	1243:48	12	& bps
UNARY_EXPR	1243:48	1243:49	13	& bps
UNARY_OPERATOR	1243:48	1243:48	14	&
LEAF_NODE	1243:48	1243:48	15	&
FIELD	1243:49	1243:49	14	bps
LEAF_NODE	1243:49	1243:49	15	bps
LEAF_NODE	1243:52	1243:52	12	)
LEAF_NODE	1243:54	1243:54	4	)
STATEMENTS	1244:6	1244:6	4	
JUMP_STATEMENT	1244:6	1244:14	5	return 1 ;
KEYWORD	1244:6	1244:6	6	return
LEAF_NODE	1244:6	1244:6	7	return
DESTINATION	1244:13	1244:13	6	1
EXPR	1244:13	1244:13	7	1
FIELD	1244:13	1244:13	8	1
LEAF_NODE	1244:13	1244:13	9	1
LEAF_NODE	1244:14	1244:14	6	;
SELECTION	1246:2	1247:2	3	
KEYWORD	1246:2	1246:2	4	if
LEAF_NODE	1246:2	1246:2	5	if
LEAF_NODE	1246:5	1246:5	4	(
CONDITION	1246:6	1246:6	4	tilesize == 0 || tile_rowsize == 0 || tl == 0 || tw == 0
EXPR	1246:6	1246:6	5	tilesize == 0 || tile_rowsize == 0 || tl == 0 || tw == 0
OR	1246:6	1246:23	6	tilesize == 0 || tile_rowsize == 0 || tl == 0 || tw == 0
EXPR	1246:6	1246:18	7	tilesize == 0
FIELD	1246:6	1246:6	8	tilesize
LEAF_NODE	1246:6	1246:6	9	tilesize
EQ_OPERATOR	1246:15	1246:15	8	==
LEAF_NODE	1246:15	1246:15	9	==
FIELD	1246:18	1246:18	8	0
LEAF_NODE	1246:18	1246:18	9	0
LEAF_NODE	1246:20	1246:20	7	||
EXPR	1246:23	1246:23	7	tile_rowsize == 0 || tl == 0 || tw == 0
OR	1246:23	1246:44	8	tile_rowsize == 0 || tl == 0 || tw == 0
EXPR	1246:23	1246:39	9	tile_rowsize == 0
FIELD	1246:23	1246:23	10	tile_rowsize
LEAF_NODE	1246:23	1246:23	11	tile_rowsize
EQ_OPERATOR	1246:36	1246:36	10	==
LEAF_NODE	1246:36	1246:36	11	==
FIELD	1246:39	1246:39	10	0
LEAF_NODE	1246:39	1246:39	11	0
LEAF_NODE	1246:41	1246:41	9	||
EXPR	1246:44	1246:44	9	tl == 0 || tw == 0
OR	1246:44	1246:55	10	tl == 0 || tw == 0
EXPR	1246:44	1246:50	11	tl == 0
FIELD	1246:44	1246:44	12	tl
LEAF_NODE	1246:44	1246:44	13	tl
EQ_OPERATOR	1246:47	1246:47	12	==
LEAF_NODE	1246:47	1246:47	13	==
FIELD	1246:50	1246:50	12	0
LEAF_NODE	1246:50	1246:50	13	0
LEAF_NODE	1246:52	1246:52	11	||
EXPR	1246:55	1246:61	11	tw == 0
FIELD	1246:55	1246:55	12	tw
LEAF_NODE	1246:55	1246:55	13	tw
EQ_OPERATOR	1246:58	1246:58	12	==
LEAF_NODE	1246:58	1246:58	13	==
FIELD	1246:61	1246:61	12	0
LEAF_NODE	1246:61	1246:61	13	0
LEAF_NODE	1246:62	1246:62	4	)
STATEMENTS	1247:2	1250:2	4	
LEAF_NODE	1247:2	1247:2	5	{
STATEMENTS	1248:4	1249:4	5	
EXPR_STATEMENT	1248:4	1248:105	6	TIFFError ( "writeBufferToContigTiles" , "Tile size, tile row size, tile width, or tile length is zero" ) ;
EXPR	1248:4	1248:4	7	TIFFError ( "writeBufferToContigTiles" , "Tile size, tile row size, tile width, or tile length is zero" )
FUNCTION_CALL	1248:4	1248:104	8	TIFFError ( "writeBufferToContigTiles" , "Tile size, tile row size, tile width, or tile length is zero" )
CALLEE	1248:4	1248:4	9	TIFFError
LEAF_NODE	1248:4	1248:4	10	TIFFError
LEAF_NODE	1248:13	1248:13	9	(
ARGUMENT	1248:14	1248:14	9	"writeBufferToContigTiles"
FIELD	1248:14	1248:14	10	"writeBufferToContigTiles"
LEAF_NODE	1248:14	1248:14	11	"writeBufferToContigTiles"
LEAF_NODE	1248:40	1248:40	9	,
ARGUMENT	1248:42	1248:42	9	"Tile size, tile row size, tile width, or tile length is zero"
FIELD	1248:42	1248:42	10	"Tile size, tile row size, tile width, or tile length is zero"
LEAF_NODE	1248:42	1248:42	11	"Tile size, tile row size, tile width, or tile length is zero"
LEAF_NODE	1248:104	1248:104	9	)
LEAF_NODE	1248:105	1248:105	7	;
EXPR_STATEMENT	1249:4	1249:12	6	exit ( - 1 ) ;
EXPR	1249:4	1249:4	7	exit ( - 1 )
FUNCTION_CALL	1249:4	1249:11	8	exit ( - 1 )
CALLEE	1249:4	1249:4	9	exit
LEAF_NODE	1249:4	1249:4	10	exit
LEAF_NODE	1249:8	1249:8	9	(
ARGUMENT	1249:9	1249:9	9	- 1
UNARY_EXPR	1249:9	1249:10	10	- 1
UNARY_OPERATOR	1249:9	1249:9	11	-
LEAF_NODE	1249:9	1249:9	12	-
FIELD	1249:10	1249:10	11	1
LEAF_NODE	1249:10	1249:10	12	1
LEAF_NODE	1249:11	1249:11	9	)
LEAF_NODE	1249:12	1249:12	7	;
LEAF_NODE	1250:2	1250:2	5	}
EXPR_STATEMENT	1252:2	1252:26	3	tile_buffsize = tilesize ;
EXPR	1252:2	1252:2	4	tile_buffsize = tilesize
ASSIGN	1252:2	1252:18	5	tile_buffsize = tilesize
LVAL	1252:2	1252:2	6	tile_buffsize
FIELD	1252:2	1252:2	7	tile_buffsize
LEAF_NODE	1252:2	1252:2	8	tile_buffsize
ASSIGN_OP	1252:16	1252:16	6	=
LEAF_NODE	1252:16	1252:16	7	=
RVAL	1252:18	1252:18	6	tilesize
FIELD	1252:18	1252:18	7	tilesize
LEAF_NODE	1252:18	1252:18	8	tilesize
LEAF_NODE	1252:26	1252:26	4	;
SELECTION	1253:2	1254:4	3	
KEYWORD	1253:2	1253:2	4	if
LEAF_NODE	1253:2	1253:2	5	if
LEAF_NODE	1253:5	1253:5	4	(
CONDITION	1253:6	1253:6	4	tilesize < ( tsize_t ) ( tl * tile_rowsize )
EXPR	1253:6	1253:44	5	tilesize < ( tsize_t ) ( tl * tile_rowsize )
FIELD	1253:6	1253:6	6	tilesize
LEAF_NODE	1253:6	1253:6	7	tilesize
REL_OPERATOR	1253:15	1253:15	6	<
LEAF_NODE	1253:15	1253:15	7	<
LEAF_NODE	1253:17	1253:17	6	(
TYPE_NAME	1253:18	1253:18	6	tsize_t
LEAF_NODE	1253:18	1253:18	7	tsize_t
LEAF_NODE	1253:25	1253:25	6	)
LEAF_NODE	1253:26	1253:26	6	(
FIELD	1253:27	1253:27	6	tl
LEAF_NODE	1253:27	1253:27	7	tl
LEAF_NODE	1253:30	1253:30	6	*
FIELD	1253:32	1253:32	6	tile_rowsize
LEAF_NODE	1253:32	1253:32	7	tile_rowsize
LEAF_NODE	1253:44	1253:44	6	)
LEAF_NODE	1253:45	1253:45	4	)
STATEMENTS	1254:4	1266:4	4	
LEAF_NODE	1254:4	1254:4	5	{
STATEMENTS	1256:4	1261:4	5	
EXPR_STATEMENT	1256:4	1258:42	6	TIFFError ( "writeBufferToContigTiles" , "Tilesize %lu is too small, using alternate calculation %u" , tilesize , tl * tile_rowsize ) ;
EXPR	1256:4	1256:4	7	TIFFError ( "writeBufferToContigTiles" , "Tilesize %lu is too small, using alternate calculation %u" , tilesize , tl * tile_rowsize )
FUNCTION_CALL	1256:4	1258:41	8	TIFFError ( "writeBufferToContigTiles" , "Tilesize %lu is too small, using alternate calculation %u" , tilesize , tl * tile_rowsize )
CALLEE	1256:4	1256:4	9	TIFFError
LEAF_NODE	1256:4	1256:4	10	TIFFError
LEAF_NODE	1256:13	1256:13	9	(
ARGUMENT	1256:14	1256:14	9	"writeBufferToContigTiles"
FIELD	1256:14	1256:14	10	"writeBufferToContigTiles"
LEAF_NODE	1256:14	1256:14	11	"writeBufferToContigTiles"
LEAF_NODE	1256:40	1256:40	9	,
ARGUMENT	1257:7	1257:7	9	"Tilesize %lu is too small, using alternate calculation %u"
FIELD	1257:7	1257:7	10	"Tilesize %lu is too small, using alternate calculation %u"
LEAF_NODE	1257:7	1257:7	11	"Tilesize %lu is too small, using alternate calculation %u"
LEAF_NODE	1257:66	1257:66	9	,
ARGUMENT	1258:14	1258:14	9	tilesize
FIELD	1258:14	1258:14	10	tilesize
LEAF_NODE	1258:14	1258:14	11	tilesize
LEAF_NODE	1258:22	1258:22	9	,
ARGUMENT	1258:24	1258:29	9	tl * tile_rowsize
FIELD	1258:24	1258:24	10	tl
LEAF_NODE	1258:24	1258:24	11	tl
LEAF_NODE	1258:27	1258:27	10	*
FIELD	1258:29	1258:29	10	tile_rowsize
LEAF_NODE	1258:29	1258:29	11	tile_rowsize
LEAF_NODE	1258:41	1258:41	9	)
LEAF_NODE	1258:42	1258:42	7	;
EXPR_STATEMENT	1260:4	1260:37	6	tile_buffsize = tl * tile_rowsize ;
EXPR	1260:4	1260:4	7	tile_buffsize = tl * tile_rowsize
ASSIGN	1260:4	1260:20	8	tile_buffsize = tl * tile_rowsize
LVAL	1260:4	1260:4	9	tile_buffsize
FIELD	1260:4	1260:4	10	tile_buffsize
LEAF_NODE	1260:4	1260:4	11	tile_buffsize
ASSIGN_OP	1260:18	1260:18	9	=
LEAF_NODE	1260:18	1260:18	10	=
RVAL	1260:20	1260:25	9	tl * tile_rowsize
FIELD	1260:20	1260:20	10	tl
LEAF_NODE	1260:20	1260:20	11	tl
LEAF_NODE	1260:23	1260:23	10	*
FIELD	1260:25	1260:25	10	tile_rowsize
LEAF_NODE	1260:25	1260:25	11	tile_rowsize
LEAF_NODE	1260:37	1260:37	7	;
SELECTION	1261:4	1262:4	6	
KEYWORD	1261:4	1261:4	7	if
LEAF_NODE	1261:4	1261:4	8	if
LEAF_NODE	1261:7	1261:7	7	(
CONDITION	1261:8	1261:8	7	tl != tile_buffsize / tile_rowsize
EXPR	1261:8	1261:30	8	tl != tile_buffsize / tile_rowsize
FIELD	1261:8	1261:8	9	tl
LEAF_NODE	1261:8	1261:8	10	tl
EQ_OPERATOR	1261:11	1261:11	9	!=
LEAF_NODE	1261:11	1261:11	10	!=
FIELD	1261:14	1261:14	9	tile_buffsize
LEAF_NODE	1261:14	1261:14	10	tile_buffsize
LEAF_NODE	1261:28	1261:28	9	/
FIELD	1261:30	1261:30	9	tile_rowsize
LEAF_NODE	1261:30	1261:30	10	tile_rowsize
LEAF_NODE	1261:42	1261:42	7	)
STATEMENTS	1262:4	1265:4	7	
LEAF_NODE	1262:4	1262:4	8	{
STATEMENTS	1263:1	1264:1	8	
EXPR_STATEMENT	1263:1	1263:87	9	TIFFError ( "writeBufferToContigTiles" , "Integer overflow when calculating buffer size" ) ;
EXPR	1263:1	1263:1	10	TIFFError ( "writeBufferToContigTiles" , "Integer overflow when calculating buffer size" )
FUNCTION_CALL	1263:1	1263:86	11	TIFFError ( "writeBufferToContigTiles" , "Integer overflow when calculating buffer size" )
CALLEE	1263:1	1263:1	12	TIFFError
LEAF_NODE	1263:1	1263:1	13	TIFFError
LEAF_NODE	1263:10	1263:10	12	(
ARGUMENT	1263:11	1263:11	12	"writeBufferToContigTiles"
FIELD	1263:11	1263:11	13	"writeBufferToContigTiles"
LEAF_NODE	1263:11	1263:11	14	"writeBufferToContigTiles"
LEAF_NODE	1263:37	1263:37	12	,
ARGUMENT	1263:39	1263:39	12	"Integer overflow when calculating buffer size"
FIELD	1263:39	1263:39	13	"Integer overflow when calculating buffer size"
LEAF_NODE	1263:39	1263:39	14	"Integer overflow when calculating buffer size"
LEAF_NODE	1263:86	1263:86	12	)
LEAF_NODE	1263:87	1263:87	10	;
EXPR_STATEMENT	1264:1	1264:9	9	exit ( - 1 ) ;
EXPR	1264:1	1264:1	10	exit ( - 1 )
FUNCTION_CALL	1264:1	1264:8	11	exit ( - 1 )
CALLEE	1264:1	1264:1	12	exit
LEAF_NODE	1264:1	1264:1	13	exit
LEAF_NODE	1264:5	1264:5	12	(
ARGUMENT	1264:6	1264:6	12	- 1
UNARY_EXPR	1264:6	1264:7	13	- 1
UNARY_OPERATOR	1264:6	1264:6	14	-
LEAF_NODE	1264:6	1264:6	15	-
FIELD	1264:7	1264:7	14	1
LEAF_NODE	1264:7	1264:7	15	1
LEAF_NODE	1264:8	1264:8	12	)
LEAF_NODE	1264:9	1264:9	10	;
LEAF_NODE	1265:4	1265:4	8	}
LEAF_NODE	1266:4	1266:4	5	}
LEAF_NODE	1268:2	1268:2	3	if
LEAF_NODE	1268:4	1268:4	3	(
LEAF_NODE	1268:6	1268:6	3	imagewidth
LEAF_NODE	1268:17	1268:17	3	==
LEAF_NODE	1268:20	1268:20	3	0
LEAF_NODE	1268:22	1268:22	3	||
LEAF_NODE	1269:6	1269:6	3	(
LEAF_NODE	1269:7	1269:7	3	uint32
LEAF_NODE	1269:13	1269:13	3	)
LEAF_NODE	1269:14	1269:14	3	bps
LEAF_NODE	1269:18	1269:18	3	*
LEAF_NODE	1269:20	1269:20	3	(
LEAF_NODE	1269:21	1269:21	3	uint32
LEAF_NODE	1269:27	1269:27	3	)
LEAF_NODE	1269:28	1269:28	3	spp
LEAF_NODE	1269:32	1269:32	3	>
LEAF_NODE	1269:34	1269:34	3	TIFF_UINT32_MAX
LEAF_NODE	1269:50	1269:50	3	/
LEAF_NODE	1269:52	1269:52	3	imagewidth
LEAF_NODE	1269:63	1269:63	3	||
LEAF_NODE	1270:6	1270:6	3	bps
LEAF_NODE	1270:10	1270:10	3	*
LEAF_NODE	1270:12	1270:12	3	spp
LEAF_NODE	1270:16	1270:16	3	*
LEAF_NODE	1270:18	1270:18	3	imagewidth
LEAF_NODE	1270:29	1270:29	3	>
LEAF_NODE	1270:31	1270:31	3	TIFF_UINT32_MAX
LEAF_NODE	1270:47	1270:47	3	-
LEAF_NODE	1270:49	1270:49	3	7U
LEAF_NODE	1270:52	1270:52	3	)
LEAF_NODE	1271:2	1271:2	3	{
STATEMENTS	1272:6	1274:6	3	
EXPR_STATEMENT	1272:6	1273:81	4	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (imagewidth * bps * spp) + 7" ) ;
EXPR	1272:6	1272:6	5	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (imagewidth * bps * spp) + 7" )
FUNCTION_CALL	1272:6	1273:80	6	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (imagewidth * bps * spp) + 7" )
CALLEE	1272:6	1272:6	7	TIFFError
LEAF_NODE	1272:6	1272:6	8	TIFFError
LEAF_NODE	1272:15	1272:15	7	(
ARGUMENT	1272:16	1272:16	7	TIFFFileName ( out )
FUNCTION_CALL	1272:16	1272:32	8	TIFFFileName ( out )
CALLEE	1272:16	1272:16	9	TIFFFileName
LEAF_NODE	1272:16	1272:16	10	TIFFFileName
LEAF_NODE	1272:28	1272:28	9	(
ARGUMENT	1272:29	1272:29	9	out
FIELD	1272:29	1272:29	10	out
LEAF_NODE	1272:29	1272:29	11	out
LEAF_NODE	1272:32	1272:32	9	)
LEAF_NODE	1272:33	1272:33	7	,
ARGUMENT	1273:12	1273:12	7	"Error, uint32 overflow when computing (imagewidth * bps * spp) + 7"
FIELD	1273:12	1273:12	8	"Error, uint32 overflow when computing (imagewidth * bps * spp) + 7"
LEAF_NODE	1273:12	1273:12	9	"Error, uint32 overflow when computing (imagewidth * bps * spp) + 7"
LEAF_NODE	1273:80	1273:80	7	)
LEAF_NODE	1273:81	1273:81	5	;
JUMP_STATEMENT	1274:6	1274:14	4	return 1 ;
KEYWORD	1274:6	1274:6	5	return
LEAF_NODE	1274:6	1274:6	6	return
DESTINATION	1274:13	1274:13	5	1
EXPR	1274:13	1274:13	6	1
FIELD	1274:13	1274:13	7	1
LEAF_NODE	1274:13	1274:13	8	1
LEAF_NODE	1274:14	1274:14	5	;
LEAF_NODE	1275:2	1275:2	3	}
LEAF_NODE	1276:2	1276:2	3	src_rowsize
LEAF_NODE	1276:14	1276:14	3	=
LEAF_NODE	1276:16	1276:16	3	(
LEAF_NODE	1276:17	1276:17	3	(
LEAF_NODE	1276:18	1276:18	3	imagewidth
LEAF_NODE	1276:29	1276:29	3	*
LEAF_NODE	1276:31	1276:31	3	spp
LEAF_NODE	1276:35	1276:35	3	*
LEAF_NODE	1276:37	1276:37	3	bps
LEAF_NODE	1276:40	1276:40	3	)
LEAF_NODE	1276:42	1276:42	3	+
LEAF_NODE	1276:44	1276:44	3	7U
LEAF_NODE	1276:46	1276:46	3	)
LEAF_NODE	1276:48	1276:48	3	/
EXPR_STATEMENT	1276:50	1276:51	3	8 ;
EXPR	1276:50	1276:50	4	8
FIELD	1276:50	1276:50	5	8
LEAF_NODE	1276:50	1276:50	6	8
LEAF_NODE	1276:51	1276:51	4	;
EXPR_STATEMENT	1278:2	1278:38	3	tilebuf = _TIFFmalloc ( tile_buffsize ) ;
EXPR	1278:2	1278:2	4	tilebuf = _TIFFmalloc ( tile_buffsize )
ASSIGN	1278:2	1278:12	5	tilebuf = _TIFFmalloc ( tile_buffsize )
LVAL	1278:2	1278:2	6	tilebuf
FIELD	1278:2	1278:2	7	tilebuf
LEAF_NODE	1278:2	1278:2	8	tilebuf
ASSIGN_OP	1278:10	1278:10	6	=
LEAF_NODE	1278:10	1278:10	7	=
RVAL	1278:12	1278:12	6	_TIFFmalloc ( tile_buffsize )
FUNCTION_CALL	1278:12	1278:37	7	_TIFFmalloc ( tile_buffsize )
CALLEE	1278:12	1278:12	8	_TIFFmalloc
LEAF_NODE	1278:12	1278:12	9	_TIFFmalloc
LEAF_NODE	1278:23	1278:23	8	(
ARGUMENT	1278:24	1278:24	8	tile_buffsize
FIELD	1278:24	1278:24	9	tile_buffsize
LEAF_NODE	1278:24	1278:24	10	tile_buffsize
LEAF_NODE	1278:37	1278:37	8	)
LEAF_NODE	1278:38	1278:38	4	;
SELECTION	1279:2	1280:4	3	
KEYWORD	1279:2	1279:2	4	if
LEAF_NODE	1279:2	1279:2	5	if
LEAF_NODE	1279:5	1279:5	4	(
CONDITION	1279:6	1279:6	4	tilebuf == 0
EXPR	1279:6	1279:17	5	tilebuf == 0
FIELD	1279:6	1279:6	6	tilebuf
LEAF_NODE	1279:6	1279:6	7	tilebuf
EQ_OPERATOR	1279:14	1279:14	6	==
LEAF_NODE	1279:14	1279:14	7	==
FIELD	1279:17	1279:17	6	0
LEAF_NODE	1279:17	1279:17	7	0
LEAF_NODE	1279:18	1279:18	4	)
STATEMENTS	1280:4	1280:4	4	
JUMP_STATEMENT	1280:4	1280:12	5	return 1 ;
KEYWORD	1280:4	1280:4	6	return
LEAF_NODE	1280:4	1280:4	7	return
DESTINATION	1280:11	1280:11	6	1
EXPR	1280:11	1280:11	7	1
FIELD	1280:11	1280:11	8	1
LEAF_NODE	1280:11	1280:11	9	1
LEAF_NODE	1280:12	1280:12	6	;
ITERATION	1281:2	1282:4	3	
KEYWORD	1281:2	1281:2	4	for
LEAF_NODE	1281:2	1281:2	5	for
LEAF_NODE	1281:6	1281:6	4	(
FOR_INIT	1281:7	1281:14	4	row = 0 ;
EXPR	1281:7	1281:7	5	row = 0
ASSIGN	1281:7	1281:13	6	row = 0
LVAL	1281:7	1281:7	7	row
FIELD	1281:7	1281:7	8	row
LEAF_NODE	1281:7	1281:7	9	row
ASSIGN_OP	1281:11	1281:11	7	=
LEAF_NODE	1281:11	1281:11	8	=
RVAL	1281:13	1281:13	7	0
FIELD	1281:13	1281:13	8	0
LEAF_NODE	1281:13	1281:13	9	0
LEAF_NODE	1281:14	1281:14	5	;
CONDITION	1281:16	1281:16	4	row < imagelength
EXPR	1281:16	1281:22	5	row < imagelength
FIELD	1281:16	1281:16	6	row
LEAF_NODE	1281:16	1281:16	7	row
REL_OPERATOR	1281:20	1281:20	6	<
LEAF_NODE	1281:20	1281:20	7	<
FIELD	1281:22	1281:22	6	imagelength
LEAF_NODE	1281:22	1281:22	7	imagelength
LEAF_NODE	1281:33	1281:33	4	;
FOR_EXPR	1281:35	1281:35	4	row += tl
EXPR	1281:35	1281:35	5	row += tl
ASSIGN	1281:35	1281:42	6	row += tl
LVAL	1281:35	1281:35	7	row
FIELD	1281:35	1281:35	8	row
LEAF_NODE	1281:35	1281:35	9	row
ASSIGN_OP	1281:39	1281:39	7	+=
LEAF_NODE	1281:39	1281:39	8	+=
RVAL	1281:42	1281:42	7	tl
FIELD	1281:42	1281:42	8	tl
LEAF_NODE	1281:42	1281:42	9	tl
LEAF_NODE	1281:44	1281:44	4	)
STATEMENTS	1282:4	1313:4	4	
LEAF_NODE	1282:4	1282:4	5	{
STATEMENTS	1283:4	1284:4	5	
EXPR_STATEMENT	1283:4	1283:60	6	nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
EXPR	1283:4	1283:4	7	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	1283:4	1283:11	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	1283:4	1283:4	9	nrow
FIELD	1283:4	1283:4	10	nrow
LEAF_NODE	1283:4	1283:4	11	nrow
ASSIGN_OP	1283:9	1283:9	9	=
LEAF_NODE	1283:9	1283:9	10	=
RVAL	1283:11	1283:11	9	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	1283:11	1283:58	10	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	1283:11	1283:34	11	( row + tl > imagelength )
LEAF_NODE	1283:11	1283:11	12	(
FIELD	1283:12	1283:12	12	row
LEAF_NODE	1283:12	1283:12	13	row
LEAF_NODE	1283:16	1283:16	12	+
FIELD	1283:18	1283:18	12	tl
LEAF_NODE	1283:18	1283:18	13	tl
REL_OPERATOR	1283:21	1283:21	12	>
LEAF_NODE	1283:21	1283:21	13	>
FIELD	1283:23	1283:23	12	imagelength
LEAF_NODE	1283:23	1283:23	13	imagelength
LEAF_NODE	1283:34	1283:34	12	)
LEAF_NODE	1283:36	1283:36	11	?
EXPR	1283:38	1283:52	11	imagelength - row
FIELD	1283:38	1283:38	12	imagelength
LEAF_NODE	1283:38	1283:38	13	imagelength
LEAF_NODE	1283:50	1283:50	12	-
FIELD	1283:52	1283:52	12	row
LEAF_NODE	1283:52	1283:52	13	row
LEAF_NODE	1283:56	1283:56	11	:
FIELD	1283:58	1283:58	11	tl
LEAF_NODE	1283:58	1283:58	12	tl
LEAF_NODE	1283:60	1283:60	7	;
ITERATION	1284:4	1285:6	6	
KEYWORD	1284:4	1284:4	7	for
LEAF_NODE	1284:4	1284:4	8	for
LEAF_NODE	1284:8	1284:8	7	(
FOR_INIT	1284:9	1284:16	7	col = 0 ;
EXPR	1284:9	1284:9	8	col = 0
ASSIGN	1284:9	1284:15	9	col = 0
LVAL	1284:9	1284:9	10	col
FIELD	1284:9	1284:9	11	col
LEAF_NODE	1284:9	1284:9	12	col
ASSIGN_OP	1284:13	1284:13	10	=
LEAF_NODE	1284:13	1284:13	11	=
RVAL	1284:15	1284:15	10	0
FIELD	1284:15	1284:15	11	0
LEAF_NODE	1284:15	1284:15	12	0
LEAF_NODE	1284:16	1284:16	8	;
CONDITION	1284:18	1284:18	7	col < imagewidth
EXPR	1284:18	1284:24	8	col < imagewidth
FIELD	1284:18	1284:18	9	col
LEAF_NODE	1284:18	1284:18	10	col
REL_OPERATOR	1284:22	1284:22	9	<
LEAF_NODE	1284:22	1284:22	10	<
FIELD	1284:24	1284:24	9	imagewidth
LEAF_NODE	1284:24	1284:24	10	imagewidth
LEAF_NODE	1284:34	1284:34	7	;
FOR_EXPR	1284:36	1284:36	7	col += tw
EXPR	1284:36	1284:36	8	col += tw
ASSIGN	1284:36	1284:43	9	col += tw
LVAL	1284:36	1284:36	10	col
FIELD	1284:36	1284:36	11	col
LEAF_NODE	1284:36	1284:36	12	col
ASSIGN_OP	1284:40	1284:40	10	+=
LEAF_NODE	1284:40	1284:40	11	+=
RVAL	1284:43	1284:43	10	tw
FIELD	1284:43	1284:43	11	tw
LEAF_NODE	1284:43	1284:43	12	tw
LEAF_NODE	1284:45	1284:45	7	)
STATEMENTS	1285:6	1312:6	7	
LEAF_NODE	1285:6	1285:6	8	{
STATEMENTS	1287:6	1304:6	8	
SELECTION	1287:6	1288:1	9	
KEYWORD	1287:6	1287:6	10	if
LEAF_NODE	1287:6	1287:6	11	if
LEAF_NODE	1287:9	1287:9	10	(
CONDITION	1287:10	1287:10	10	col + tw > imagewidth
EXPR	1287:10	1287:21	11	col + tw > imagewidth
FIELD	1287:10	1287:10	12	col
LEAF_NODE	1287:10	1287:10	13	col
LEAF_NODE	1287:14	1287:14	12	+
FIELD	1287:16	1287:16	12	tw
LEAF_NODE	1287:16	1287:16	13	tw
REL_OPERATOR	1287:19	1287:19	12	>
LEAF_NODE	1287:19	1287:19	13	>
FIELD	1287:21	1287:21	12	imagewidth
LEAF_NODE	1287:21	1287:21	13	imagewidth
LEAF_NODE	1287:31	1287:31	10	)
STATEMENTS	1288:1	1288:1	10	
EXPR_STATEMENT	1288:1	1288:24	11	ncol = imagewidth - col ;
EXPR	1288:1	1288:1	12	ncol = imagewidth - col
ASSIGN	1288:1	1288:8	13	ncol = imagewidth - col
LVAL	1288:1	1288:1	14	ncol
FIELD	1288:1	1288:1	15	ncol
LEAF_NODE	1288:1	1288:1	16	ncol
ASSIGN_OP	1288:6	1288:6	14	=
LEAF_NODE	1288:6	1288:6	15	=
RVAL	1288:8	1288:21	14	imagewidth - col
FIELD	1288:8	1288:8	15	imagewidth
LEAF_NODE	1288:8	1288:8	16	imagewidth
LEAF_NODE	1288:19	1288:19	15	-
FIELD	1288:21	1288:21	15	col
LEAF_NODE	1288:21	1288:21	16	col
LEAF_NODE	1288:24	1288:24	12	;
SELECTION	1289:6	1290:8	9	
KEYWORD	1289:6	1289:6	10	else
LEAF_NODE	1289:6	1289:6	11	else
STATEMENTS	1290:8	1290:8	10	
EXPR_STATEMENT	1290:8	1290:17	11	ncol = tw ;
EXPR	1290:8	1290:8	12	ncol = tw
ASSIGN	1290:8	1290:15	13	ncol = tw
LVAL	1290:8	1290:8	14	ncol
FIELD	1290:8	1290:8	15	ncol
LEAF_NODE	1290:8	1290:8	16	ncol
ASSIGN_OP	1290:13	1290:13	14	=
LEAF_NODE	1290:13	1290:13	15	=
RVAL	1290:15	1290:15	14	tw
FIELD	1290:15	1290:15	15	tw
LEAF_NODE	1290:15	1290:15	16	tw
LEAF_NODE	1290:17	1290:17	12	;
LEAF_NODE	1292:6	1292:6	9	col_offset
LEAF_NODE	1292:17	1292:17	9	=
LEAF_NODE	1292:19	1292:19	9	(
LEAF_NODE	1292:20	1292:20	9	(
LEAF_NODE	1292:21	1292:21	9	(
LEAF_NODE	1292:22	1292:22	9	col
LEAF_NODE	1292:26	1292:26	9	*
LEAF_NODE	1292:28	1292:28	9	bps
LEAF_NODE	1292:32	1292:32	9	*
LEAF_NODE	1292:34	1292:34	9	spp
LEAF_NODE	1292:37	1292:37	9	)
LEAF_NODE	1292:39	1292:39	9	+
LEAF_NODE	1292:41	1292:41	9	7
LEAF_NODE	1292:42	1292:42	9	)
LEAF_NODE	1292:44	1292:44	9	/
LEAF_NODE	1292:46	1292:46	9	8
LEAF_NODE	1292:47	1292:47	9	)
LEAF_NODE	1292:48	1292:48	9	;
EXPR_STATEMENT	1293:6	1293:51	9	bufp = buf + ( row * src_rowsize ) + col_offset ;
EXPR	1293:6	1293:6	10	bufp = buf + ( row * src_rowsize ) + col_offset
ASSIGN	1293:6	1293:13	11	bufp = buf + ( row * src_rowsize ) + col_offset
LVAL	1293:6	1293:6	12	bufp
FIELD	1293:6	1293:6	13	bufp
LEAF_NODE	1293:6	1293:6	14	bufp
ASSIGN_OP	1293:11	1293:11	12	=
LEAF_NODE	1293:11	1293:11	13	=
RVAL	1293:13	1293:41	12	buf + ( row * src_rowsize ) + col_offset
FIELD	1293:13	1293:13	13	buf
LEAF_NODE	1293:13	1293:13	14	buf
LEAF_NODE	1293:17	1293:17	13	+
LEAF_NODE	1293:19	1293:19	13	(
FIELD	1293:20	1293:20	13	row
LEAF_NODE	1293:20	1293:20	14	row
LEAF_NODE	1293:24	1293:24	13	*
FIELD	1293:26	1293:26	13	src_rowsize
LEAF_NODE	1293:26	1293:26	14	src_rowsize
LEAF_NODE	1293:37	1293:37	13	)
LEAF_NODE	1293:39	1293:39	13	+
FIELD	1293:41	1293:41	13	col_offset
LEAF_NODE	1293:41	1293:41	14	col_offset
LEAF_NODE	1293:51	1293:51	10	;
SELECTION	1294:6	1296:8	9	
KEYWORD	1294:6	1294:6	10	if
LEAF_NODE	1294:6	1294:6	11	if
LEAF_NODE	1294:9	1294:9	10	(
CONDITION	1294:10	1294:10	10	extractContigSamplesToTileBuffer ( tilebuf , bufp , nrow , ncol , imagewidth , tw , 0 , spp , spp , bps , dump ) > 0
EXPR	1294:10	1295:38	11	extractContigSamplesToTileBuffer ( tilebuf , bufp , nrow , ncol , imagewidth , tw , 0 , spp , spp , bps , dump ) > 0
FUNCTION_CALL	1294:10	1295:34	12	extractContigSamplesToTileBuffer ( tilebuf , bufp , nrow , ncol , imagewidth , tw , 0 , spp , spp , bps , dump )
CALLEE	1294:10	1294:10	13	extractContigSamplesToTileBuffer
LEAF_NODE	1294:10	1294:10	14	extractContigSamplesToTileBuffer
LEAF_NODE	1294:42	1294:42	13	(
ARGUMENT	1294:43	1294:43	13	tilebuf
FIELD	1294:43	1294:43	14	tilebuf
LEAF_NODE	1294:43	1294:43	15	tilebuf
LEAF_NODE	1294:50	1294:50	13	,
ARGUMENT	1294:52	1294:52	13	bufp
FIELD	1294:52	1294:52	14	bufp
LEAF_NODE	1294:52	1294:52	15	bufp
LEAF_NODE	1294:56	1294:56	13	,
ARGUMENT	1294:58	1294:58	13	nrow
FIELD	1294:58	1294:58	14	nrow
LEAF_NODE	1294:58	1294:58	15	nrow
LEAF_NODE	1294:62	1294:62	13	,
ARGUMENT	1294:64	1294:64	13	ncol
FIELD	1294:64	1294:64	14	ncol
LEAF_NODE	1294:64	1294:64	15	ncol
LEAF_NODE	1294:68	1294:68	13	,
ARGUMENT	1294:70	1294:70	13	imagewidth
FIELD	1294:70	1294:70	14	imagewidth
LEAF_NODE	1294:70	1294:70	15	imagewidth
LEAF_NODE	1294:80	1294:80	13	,
ARGUMENT	1295:8	1295:8	13	tw
FIELD	1295:8	1295:8	14	tw
LEAF_NODE	1295:8	1295:8	15	tw
LEAF_NODE	1295:10	1295:10	13	,
ARGUMENT	1295:12	1295:12	13	0
FIELD	1295:12	1295:12	14	0
LEAF_NODE	1295:12	1295:12	15	0
LEAF_NODE	1295:13	1295:13	13	,
ARGUMENT	1295:15	1295:15	13	spp
FIELD	1295:15	1295:15	14	spp
LEAF_NODE	1295:15	1295:15	15	spp
LEAF_NODE	1295:18	1295:18	13	,
ARGUMENT	1295:20	1295:20	13	spp
FIELD	1295:20	1295:20	14	spp
LEAF_NODE	1295:20	1295:20	15	spp
LEAF_NODE	1295:23	1295:23	13	,
ARGUMENT	1295:25	1295:25	13	bps
FIELD	1295:25	1295:25	14	bps
LEAF_NODE	1295:25	1295:25	15	bps
LEAF_NODE	1295:28	1295:28	13	,
ARGUMENT	1295:30	1295:30	13	dump
FIELD	1295:30	1295:30	14	dump
LEAF_NODE	1295:30	1295:30	15	dump
LEAF_NODE	1295:34	1295:34	13	)
REL_OPERATOR	1295:36	1295:36	12	>
LEAF_NODE	1295:36	1295:36	13	>
FIELD	1295:38	1295:38	12	0
LEAF_NODE	1295:38	1295:38	13	0
LEAF_NODE	1295:39	1295:39	10	)
STATEMENTS	1296:8	1302:8	10	
LEAF_NODE	1296:8	1296:8	11	{
STATEMENTS	1297:1	1301:1	11	
EXPR_STATEMENT	1297:1	1299:58	12	TIFFError ( "writeBufferToContigTiles" , "Unable to extract data to tile for row %lu, col %lu" , ( unsigned long ) row , ( unsigned long ) col ) ;
EXPR	1297:1	1297:1	13	TIFFError ( "writeBufferToContigTiles" , "Unable to extract data to tile for row %lu, col %lu" , ( unsigned long ) row , ( unsigned long ) col )
FUNCTION_CALL	1297:1	1299:57	14	TIFFError ( "writeBufferToContigTiles" , "Unable to extract data to tile for row %lu, col %lu" , ( unsigned long ) row , ( unsigned long ) col )
CALLEE	1297:1	1297:1	15	TIFFError
LEAF_NODE	1297:1	1297:1	16	TIFFError
LEAF_NODE	1297:10	1297:10	15	(
ARGUMENT	1297:11	1297:11	15	"writeBufferToContigTiles"
FIELD	1297:11	1297:11	16	"writeBufferToContigTiles"
LEAF_NODE	1297:11	1297:11	17	"writeBufferToContigTiles"
LEAF_NODE	1297:37	1297:37	15	,
ARGUMENT	1298:18	1298:18	15	"Unable to extract data to tile for row %lu, col %lu"
FIELD	1298:18	1298:18	16	"Unable to extract data to tile for row %lu, col %lu"
LEAF_NODE	1298:18	1298:18	17	"Unable to extract data to tile for row %lu, col %lu"
LEAF_NODE	1298:71	1298:71	15	,
ARGUMENT	1299:18	1299:34	15	( unsigned long ) row
LEAF_NODE	1299:18	1299:18	16	(
TYPE_NAME	1299:19	1299:28	16	unsigned long
LEAF_NODE	1299:19	1299:19	17	unsigned
LEAF_NODE	1299:28	1299:28	17	long
LEAF_NODE	1299:32	1299:32	16	)
FIELD	1299:34	1299:34	16	row
LEAF_NODE	1299:34	1299:34	17	row
LEAF_NODE	1299:37	1299:37	15	,
ARGUMENT	1299:39	1299:54	15	( unsigned long ) col
LEAF_NODE	1299:39	1299:39	16	(
TYPE_NAME	1299:40	1299:49	16	unsigned long
LEAF_NODE	1299:40	1299:40	17	unsigned
LEAF_NODE	1299:49	1299:49	17	long
LEAF_NODE	1299:53	1299:53	16	)
FIELD	1299:54	1299:54	16	col
LEAF_NODE	1299:54	1299:54	17	col
LEAF_NODE	1299:57	1299:57	15	)
LEAF_NODE	1299:58	1299:58	13	;
EXPR_STATEMENT	1300:1	1300:19	12	_TIFFfree ( tilebuf ) ;
EXPR	1300:1	1300:1	13	_TIFFfree ( tilebuf )
FUNCTION_CALL	1300:1	1300:18	14	_TIFFfree ( tilebuf )
CALLEE	1300:1	1300:1	15	_TIFFfree
LEAF_NODE	1300:1	1300:1	16	_TIFFfree
LEAF_NODE	1300:10	1300:10	15	(
ARGUMENT	1300:11	1300:11	15	tilebuf
FIELD	1300:11	1300:11	16	tilebuf
LEAF_NODE	1300:11	1300:11	17	tilebuf
LEAF_NODE	1300:18	1300:18	15	)
LEAF_NODE	1300:19	1300:19	13	;
JUMP_STATEMENT	1301:1	1301:9	12	return 1 ;
KEYWORD	1301:1	1301:1	13	return
LEAF_NODE	1301:1	1301:1	14	return
DESTINATION	1301:8	1301:8	13	1
EXPR	1301:8	1301:8	14	1
FIELD	1301:8	1301:8	15	1
LEAF_NODE	1301:8	1301:8	16	1
LEAF_NODE	1301:9	1301:9	13	;
LEAF_NODE	1302:8	1302:8	11	}
SELECTION	1304:6	1305:8	9	
KEYWORD	1304:6	1304:6	10	if
LEAF_NODE	1304:6	1304:6	11	if
LEAF_NODE	1304:9	1304:9	10	(
CONDITION	1304:10	1304:10	10	TIFFWriteTile ( out , tilebuf , col , row , 0 , 0 ) < 0
EXPR	1304:10	1304:56	11	TIFFWriteTile ( out , tilebuf , col , row , 0 , 0 ) < 0
FUNCTION_CALL	1304:10	1304:52	12	TIFFWriteTile ( out , tilebuf , col , row , 0 , 0 )
CALLEE	1304:10	1304:10	13	TIFFWriteTile
LEAF_NODE	1304:10	1304:10	14	TIFFWriteTile
LEAF_NODE	1304:23	1304:23	13	(
ARGUMENT	1304:24	1304:24	13	out
FIELD	1304:24	1304:24	14	out
LEAF_NODE	1304:24	1304:24	15	out
LEAF_NODE	1304:27	1304:27	13	,
ARGUMENT	1304:29	1304:29	13	tilebuf
FIELD	1304:29	1304:29	14	tilebuf
LEAF_NODE	1304:29	1304:29	15	tilebuf
LEAF_NODE	1304:36	1304:36	13	,
ARGUMENT	1304:38	1304:38	13	col
FIELD	1304:38	1304:38	14	col
LEAF_NODE	1304:38	1304:38	15	col
LEAF_NODE	1304:41	1304:41	13	,
ARGUMENT	1304:43	1304:43	13	row
FIELD	1304:43	1304:43	14	row
LEAF_NODE	1304:43	1304:43	15	row
LEAF_NODE	1304:46	1304:46	13	,
ARGUMENT	1304:48	1304:48	13	0
FIELD	1304:48	1304:48	14	0
LEAF_NODE	1304:48	1304:48	15	0
LEAF_NODE	1304:49	1304:49	13	,
ARGUMENT	1304:51	1304:51	13	0
FIELD	1304:51	1304:51	14	0
LEAF_NODE	1304:51	1304:51	15	0
LEAF_NODE	1304:52	1304:52	13	)
REL_OPERATOR	1304:54	1304:54	12	<
LEAF_NODE	1304:54	1304:54	13	<
FIELD	1304:56	1304:56	12	0
LEAF_NODE	1304:56	1304:56	13	0
LEAF_NODE	1304:57	1304:57	10	)
STATEMENTS	1305:8	1311:1	10	
LEAF_NODE	1305:8	1305:8	11	{
STATEMENTS	1306:1	1310:1	11	
EXPR_STATEMENT	1306:1	1308:52	12	TIFFError ( "writeBufferToContigTiles" , "Cannot write tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row ) ;
EXPR	1306:1	1306:1	13	TIFFError ( "writeBufferToContigTiles" , "Cannot write tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row )
FUNCTION_CALL	1306:1	1308:51	14	TIFFError ( "writeBufferToContigTiles" , "Cannot write tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row )
CALLEE	1306:1	1306:1	15	TIFFError
LEAF_NODE	1306:1	1306:1	16	TIFFError
LEAF_NODE	1306:10	1306:10	15	(
ARGUMENT	1306:11	1306:11	15	"writeBufferToContigTiles"
FIELD	1306:11	1306:11	16	"writeBufferToContigTiles"
LEAF_NODE	1306:11	1306:11	17	"writeBufferToContigTiles"
LEAF_NODE	1306:37	1306:37	15	,
ARGUMENT	1307:11	1307:11	15	"Cannot write tile at %lu %lu"
FIELD	1307:11	1307:11	16	"Cannot write tile at %lu %lu"
LEAF_NODE	1307:11	1307:11	17	"Cannot write tile at %lu %lu"
LEAF_NODE	1307:41	1307:41	15	,
ARGUMENT	1308:11	1308:27	15	( unsigned long ) col
LEAF_NODE	1308:11	1308:11	16	(
TYPE_NAME	1308:12	1308:21	16	unsigned long
LEAF_NODE	1308:12	1308:12	17	unsigned
LEAF_NODE	1308:21	1308:21	17	long
LEAF_NODE	1308:25	1308:25	16	)
FIELD	1308:27	1308:27	16	col
LEAF_NODE	1308:27	1308:27	17	col
LEAF_NODE	1308:30	1308:30	15	,
ARGUMENT	1308:32	1308:48	15	( unsigned long ) row
LEAF_NODE	1308:32	1308:32	16	(
TYPE_NAME	1308:33	1308:42	16	unsigned long
LEAF_NODE	1308:33	1308:33	17	unsigned
LEAF_NODE	1308:42	1308:42	17	long
LEAF_NODE	1308:46	1308:46	16	)
FIELD	1308:48	1308:48	16	row
LEAF_NODE	1308:48	1308:48	17	row
LEAF_NODE	1308:51	1308:51	15	)
LEAF_NODE	1308:52	1308:52	13	;
EXPR_STATEMENT	1309:2	1309:20	12	_TIFFfree ( tilebuf ) ;
EXPR	1309:2	1309:2	13	_TIFFfree ( tilebuf )
FUNCTION_CALL	1309:2	1309:19	14	_TIFFfree ( tilebuf )
CALLEE	1309:2	1309:2	15	_TIFFfree
LEAF_NODE	1309:2	1309:2	16	_TIFFfree
LEAF_NODE	1309:11	1309:11	15	(
ARGUMENT	1309:12	1309:12	15	tilebuf
FIELD	1309:12	1309:12	16	tilebuf
LEAF_NODE	1309:12	1309:12	17	tilebuf
LEAF_NODE	1309:19	1309:19	15	)
LEAF_NODE	1309:20	1309:20	13	;
JUMP_STATEMENT	1310:1	1310:9	12	return 1 ;
KEYWORD	1310:1	1310:1	13	return
LEAF_NODE	1310:1	1310:1	14	return
DESTINATION	1310:8	1310:8	13	1
EXPR	1310:8	1310:8	14	1
FIELD	1310:8	1310:8	15	1
LEAF_NODE	1310:8	1310:8	16	1
LEAF_NODE	1310:9	1310:9	13	;
LEAF_NODE	1311:1	1311:1	11	}
LEAF_NODE	1312:6	1312:6	8	}
LEAF_NODE	1313:4	1313:4	5	}
EXPR_STATEMENT	1314:2	1314:20	3	_TIFFfree ( tilebuf ) ;
EXPR	1314:2	1314:2	4	_TIFFfree ( tilebuf )
FUNCTION_CALL	1314:2	1314:19	5	_TIFFfree ( tilebuf )
CALLEE	1314:2	1314:2	6	_TIFFfree
LEAF_NODE	1314:2	1314:2	7	_TIFFfree
LEAF_NODE	1314:11	1314:11	6	(
ARGUMENT	1314:12	1314:12	6	tilebuf
FIELD	1314:12	1314:12	7	tilebuf
LEAF_NODE	1314:12	1314:12	8	tilebuf
LEAF_NODE	1314:19	1314:19	6	)
LEAF_NODE	1314:20	1314:20	4	;
JUMP_STATEMENT	1316:2	1316:10	3	return 0 ;
KEYWORD	1316:2	1316:2	4	return
LEAF_NODE	1316:2	1316:2	5	return
DESTINATION	1316:9	1316:9	4	0
EXPR	1316:9	1316:9	5	0
FIELD	1316:9	1316:9	6	0
LEAF_NODE	1316:9	1316:9	7	0
LEAF_NODE	1316:10	1316:10	4	;
LEAF_NODE	1317:2	1317:2	2	}
FUNCTION_DEF	1322:0	1393:2	1	
RETURN_TYPE	1322:0	1322:7	2	static int
LEAF_NODE	1322:0	1322:0	3	static
TYPE_NAME	1322:7	1322:7	3	int
LEAF_NODE	1322:7	1322:7	4	int
FUNCTION_NAME	1322:11	1322:11	2	writeBufferToSeparateTiles
LEAF_NODE	1322:11	1322:11	3	writeBufferToSeparateTiles
PARAMETER_LIST	1322:38	1324:62	2	( TIFF * out , uint8 * buf , uint32 imagelength , uint32 imagewidth , tsample_t spp , struct dump_opts * dump )
LEAF_NODE	1322:38	1322:38	3	(
PARAMETER_DECL	1322:39	1322:45	3	TIFF * out
TYPE	1322:39	1322:43	4	TIFF *
TYPE_NAME	1322:39	1322:39	5	TIFF
LEAF_NODE	1322:39	1322:39	6	TIFF
POINTER	1322:43	1322:43	5	*
LEAF_NODE	1322:43	1322:43	6	*
NAME	1322:45	1322:45	4	out
LEAF_NODE	1322:45	1322:45	5	out
LEAF_NODE	1322:48	1322:48	3	,
PARAMETER_DECL	1322:50	1322:57	3	uint8 * buf
TYPE	1322:50	1322:55	4	uint8 *
TYPE_NAME	1322:50	1322:50	5	uint8
LEAF_NODE	1322:50	1322:50	6	uint8
POINTER	1322:55	1322:55	5	*
LEAF_NODE	1322:55	1322:55	6	*
NAME	1322:57	1322:57	4	buf
LEAF_NODE	1322:57	1322:57	5	buf
LEAF_NODE	1322:60	1322:60	3	,
PARAMETER_DECL	1322:62	1322:69	3	uint32 imagelength
TYPE	1322:62	1322:62	4	uint32
TYPE_NAME	1322:62	1322:62	5	uint32
LEAF_NODE	1322:62	1322:62	6	uint32
NAME	1322:69	1322:69	4	imagelength
LEAF_NODE	1322:69	1322:69	5	imagelength
LEAF_NODE	1322:80	1322:80	3	,
PARAMETER_DECL	1323:11	1323:18	3	uint32 imagewidth
TYPE	1323:11	1323:11	4	uint32
TYPE_NAME	1323:11	1323:11	5	uint32
LEAF_NODE	1323:11	1323:11	6	uint32
NAME	1323:18	1323:18	4	imagewidth
LEAF_NODE	1323:18	1323:18	5	imagewidth
LEAF_NODE	1323:28	1323:28	3	,
PARAMETER_DECL	1323:30	1323:40	3	tsample_t spp
TYPE	1323:30	1323:30	4	tsample_t
TYPE_NAME	1323:30	1323:30	5	tsample_t
LEAF_NODE	1323:30	1323:30	6	tsample_t
NAME	1323:40	1323:40	4	spp
LEAF_NODE	1323:40	1323:40	5	spp
LEAF_NODE	1323:43	1323:43	3	,
PARAMETER_DECL	1324:39	1324:58	3	struct dump_opts * dump
TYPE	1324:39	1324:56	4	struct dump_opts *
TYPE_NAME	1324:39	1324:46	5	struct dump_opts
LEAF_NODE	1324:39	1324:39	6	struct
LEAF_NODE	1324:46	1324:46	6	dump_opts
POINTER	1324:56	1324:56	5	*
LEAF_NODE	1324:56	1324:56	6	*
NAME	1324:58	1324:58	4	dump
LEAF_NODE	1324:58	1324:58	5	dump
LEAF_NODE	1324:62	1324:62	3	)
LEAF_NODE	1325:2	1325:2	2	{
STATEMENTS	1326:2	1392:2	2	
SIMPLE_DECL	1326:2	1326:47	3	tdata_t obuf ; obuf = _TIFFmalloc ( TIFFTileSize ( out ) ) ;
VAR_DECL	1326:2	1326:10	4	tdata_t obuf ; obuf = _TIFFmalloc ( TIFFTileSize ( out ) )
TYPE	1326:2	1326:2	5	tdata_t
TYPE_NAME	1326:2	1326:2	6	tdata_t
LEAF_NODE	1326:2	1326:2	7	tdata_t
NAME	1326:10	1326:10	5	obuf
LEAF_NODE	1326:10	1326:10	6	obuf
LEAF_NODE	0:0	0:0	5	;
INIT	1326:10	1326:10	5	obuf = _TIFFmalloc ( TIFFTileSize ( out ) )
ASSIGN	1326:10	1326:17	6	obuf = _TIFFmalloc ( TIFFTileSize ( out ) )
LVAL	1326:10	1326:10	7	obuf
NAME	1326:10	1326:10	8	obuf
LEAF_NODE	1326:10	1326:10	9	obuf
ASSIGN_OP	1326:15	1326:15	7	=
LEAF_NODE	1326:15	1326:15	8	=
RVAL	1326:17	1326:17	7	_TIFFmalloc ( TIFFTileSize ( out ) )
FUNCTION_CALL	1326:17	1326:46	8	_TIFFmalloc ( TIFFTileSize ( out ) )
CALLEE	1326:17	1326:17	9	_TIFFmalloc
LEAF_NODE	1326:17	1326:17	10	_TIFFmalloc
LEAF_NODE	1326:28	1326:28	9	(
ARGUMENT	1326:29	1326:29	9	TIFFTileSize ( out )
FUNCTION_CALL	1326:29	1326:45	10	TIFFTileSize ( out )
CALLEE	1326:29	1326:29	11	TIFFTileSize
LEAF_NODE	1326:29	1326:29	12	TIFFTileSize
LEAF_NODE	1326:41	1326:41	11	(
ARGUMENT	1326:42	1326:42	11	out
FIELD	1326:42	1326:42	12	out
LEAF_NODE	1326:42	1326:42	13	out
LEAF_NODE	1326:45	1326:45	11	)
LEAF_NODE	1326:46	1326:46	9	)
LEAF_NODE	1326:47	1326:47	4	;
SIMPLE_DECL	1327:2	1327:15	3	uint32 tl , uint32 tw ;
INIT_DECL_LIST	1327:2	1327:2	4	uint32 tl , uint32 tw
VAR_DECL	1327:2	1327:9	5	uint32 tl
TYPE	1327:2	1327:2	6	uint32
TYPE_NAME	1327:2	1327:2	7	uint32
LEAF_NODE	1327:2	1327:2	8	uint32
NAME	1327:9	1327:9	6	tl
LEAF_NODE	1327:9	1327:9	7	tl
LEAF_NODE	1327:11	1327:11	5	,
VAR_DECL	1327:2	1327:13	5	uint32 tw
TYPE	1327:2	1327:2	6	uint32
TYPE_NAME	1327:2	1327:2	7	uint32
LEAF_NODE	1327:2	1327:2	8	uint32
NAME	1327:13	1327:13	6	tw
LEAF_NODE	1327:13	1327:13	7	tw
LEAF_NODE	1327:15	1327:15	4	;
SIMPLE_DECL	1328:2	1328:29	3	uint32 row , uint32 col , uint32 nrow , uint32 ncol ;
INIT_DECL_LIST	1328:2	1328:2	4	uint32 row , uint32 col , uint32 nrow , uint32 ncol
VAR_DECL	1328:2	1328:9	5	uint32 row
TYPE	1328:2	1328:2	6	uint32
TYPE_NAME	1328:2	1328:2	7	uint32
LEAF_NODE	1328:2	1328:2	8	uint32
NAME	1328:9	1328:9	6	row
LEAF_NODE	1328:9	1328:9	7	row
LEAF_NODE	1328:12	1328:12	5	,
INIT_DECL_LIST	1328:2	1328:2	5	uint32 col , uint32 nrow , uint32 ncol
VAR_DECL	1328:2	1328:14	6	uint32 col
TYPE	1328:2	1328:2	7	uint32
TYPE_NAME	1328:2	1328:2	8	uint32
LEAF_NODE	1328:2	1328:2	9	uint32
NAME	1328:14	1328:14	7	col
LEAF_NODE	1328:14	1328:14	8	col
LEAF_NODE	1328:17	1328:17	6	,
INIT_DECL_LIST	1328:2	1328:2	6	uint32 nrow , uint32 ncol
VAR_DECL	1328:2	1328:19	7	uint32 nrow
TYPE	1328:2	1328:2	8	uint32
TYPE_NAME	1328:2	1328:2	9	uint32
LEAF_NODE	1328:2	1328:2	10	uint32
NAME	1328:19	1328:19	8	nrow
LEAF_NODE	1328:19	1328:19	9	nrow
LEAF_NODE	1328:23	1328:23	7	,
VAR_DECL	1328:2	1328:25	7	uint32 ncol
TYPE	1328:2	1328:2	8	uint32
TYPE_NAME	1328:2	1328:2	9	uint32
LEAF_NODE	1328:2	1328:2	10	uint32
NAME	1328:25	1328:25	8	ncol
LEAF_NODE	1328:25	1328:25	9	ncol
LEAF_NODE	1328:29	1328:29	4	;
SIMPLE_DECL	1329:2	1329:32	3	uint32 src_rowsize , uint32 col_offset ;
INIT_DECL_LIST	1329:2	1329:2	4	uint32 src_rowsize , uint32 col_offset
VAR_DECL	1329:2	1329:9	5	uint32 src_rowsize
TYPE	1329:2	1329:2	6	uint32
TYPE_NAME	1329:2	1329:2	7	uint32
LEAF_NODE	1329:2	1329:2	8	uint32
NAME	1329:9	1329:9	6	src_rowsize
LEAF_NODE	1329:9	1329:9	7	src_rowsize
LEAF_NODE	1329:20	1329:20	5	,
VAR_DECL	1329:2	1329:22	5	uint32 col_offset
TYPE	1329:2	1329:2	6	uint32
TYPE_NAME	1329:2	1329:2	7	uint32
LEAF_NODE	1329:2	1329:2	8	uint32
NAME	1329:22	1329:22	6	col_offset
LEAF_NODE	1329:22	1329:22	7	col_offset
LEAF_NODE	1329:32	1329:32	4	;
SIMPLE_DECL	1330:2	1330:12	3	uint16 bps ;
VAR_DECL	1330:2	1330:9	4	uint16 bps
TYPE	1330:2	1330:2	5	uint16
TYPE_NAME	1330:2	1330:2	6	uint16
LEAF_NODE	1330:2	1330:2	7	uint16
NAME	1330:9	1330:9	5	bps
LEAF_NODE	1330:9	1330:9	6	bps
LEAF_NODE	1330:12	1330:12	4	;
SIMPLE_DECL	1331:2	1331:13	3	tsample_t s ;
VAR_DECL	1331:2	1331:12	4	tsample_t s
TYPE	1331:2	1331:2	5	tsample_t
TYPE_NAME	1331:2	1331:2	6	tsample_t
LEAF_NODE	1331:2	1331:2	7	tsample_t
NAME	1331:12	1331:12	5	s
LEAF_NODE	1331:12	1331:12	6	s
LEAF_NODE	1331:13	1331:13	4	;
SIMPLE_DECL	1332:2	1332:28	3	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	1332:2	1332:9	4	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	1332:2	1332:7	5	uint8 *
TYPE_NAME	1332:2	1332:2	6	uint8
LEAF_NODE	1332:2	1332:2	7	uint8
POINTER	1332:7	1332:7	6	*
LEAF_NODE	1332:7	1332:7	7	*
NAME	1332:9	1332:9	5	bufp
LEAF_NODE	1332:9	1332:9	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	1332:9	1332:9	5	bufp = ( uint8 * ) buf
ASSIGN	1332:9	1332:16	6	bufp = ( uint8 * ) buf
LVAL	1332:9	1332:9	7	bufp
NAME	1332:9	1332:9	8	bufp
LEAF_NODE	1332:9	1332:9	9	bufp
ASSIGN_OP	1332:14	1332:14	7	=
LEAF_NODE	1332:14	1332:14	8	=
RVAL	1332:16	1332:25	7	( uint8 * ) buf
LEAF_NODE	1332:16	1332:16	8	(
TYPE_NAME	1332:17	1332:17	8	uint8
LEAF_NODE	1332:17	1332:17	9	uint8
LEAF_NODE	1332:22	1332:22	8	*
LEAF_NODE	1332:23	1332:23	8	)
FIELD	1332:25	1332:25	8	buf
LEAF_NODE	1332:25	1332:25	9	buf
LEAF_NODE	1332:28	1332:28	4	;
SELECTION	1334:2	1335:4	3	
KEYWORD	1334:2	1334:2	4	if
LEAF_NODE	1334:2	1334:2	5	if
LEAF_NODE	1334:5	1334:5	4	(
CONDITION	1334:6	1334:6	4	obuf == NULL
EXPR	1334:6	1334:14	5	obuf == NULL
FIELD	1334:6	1334:6	6	obuf
LEAF_NODE	1334:6	1334:6	7	obuf
EQ_OPERATOR	1334:11	1334:11	6	==
LEAF_NODE	1334:11	1334:11	7	==
FIELD	1334:14	1334:14	6	NULL
LEAF_NODE	1334:14	1334:14	7	NULL
LEAF_NODE	1334:18	1334:18	4	)
STATEMENTS	1335:4	1335:4	4	
JUMP_STATEMENT	1335:4	1335:12	5	return 1 ;
KEYWORD	1335:4	1335:4	6	return
LEAF_NODE	1335:4	1335:4	7	return
DESTINATION	1335:11	1335:11	6	1
EXPR	1335:11	1335:11	7	1
FIELD	1335:11	1335:11	8	1
LEAF_NODE	1335:11	1335:11	9	1
LEAF_NODE	1335:12	1335:12	6	;
EXPR_STATEMENT	1337:2	1337:44	3	TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl ) ;
EXPR	1337:2	1337:2	4	TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
FUNCTION_CALL	1337:2	1337:43	5	TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
CALLEE	1337:2	1337:2	6	TIFFGetField
LEAF_NODE	1337:2	1337:2	7	TIFFGetField
LEAF_NODE	1337:14	1337:14	6	(
ARGUMENT	1337:15	1337:15	6	out
FIELD	1337:15	1337:15	7	out
LEAF_NODE	1337:15	1337:15	8	out
LEAF_NODE	1337:18	1337:18	6	,
ARGUMENT	1337:20	1337:20	6	TIFFTAG_TILELENGTH
FIELD	1337:20	1337:20	7	TIFFTAG_TILELENGTH
LEAF_NODE	1337:20	1337:20	8	TIFFTAG_TILELENGTH
LEAF_NODE	1337:38	1337:38	6	,
ARGUMENT	1337:40	1337:40	6	& tl
UNARY_EXPR	1337:40	1337:41	7	& tl
UNARY_OPERATOR	1337:40	1337:40	8	&
LEAF_NODE	1337:40	1337:40	9	&
FIELD	1337:41	1337:41	8	tl
LEAF_NODE	1337:41	1337:41	9	tl
LEAF_NODE	1337:43	1337:43	6	)
LEAF_NODE	1337:44	1337:44	4	;
EXPR_STATEMENT	1338:2	1338:43	3	TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	1338:2	1338:2	4	TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	1338:2	1338:42	5	TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1338:2	1338:2	6	TIFFGetField
LEAF_NODE	1338:2	1338:2	7	TIFFGetField
LEAF_NODE	1338:14	1338:14	6	(
ARGUMENT	1338:15	1338:15	6	out
FIELD	1338:15	1338:15	7	out
LEAF_NODE	1338:15	1338:15	8	out
LEAF_NODE	1338:18	1338:18	6	,
ARGUMENT	1338:20	1338:20	6	TIFFTAG_TILEWIDTH
FIELD	1338:20	1338:20	7	TIFFTAG_TILEWIDTH
LEAF_NODE	1338:20	1338:20	8	TIFFTAG_TILEWIDTH
LEAF_NODE	1338:37	1338:37	6	,
ARGUMENT	1338:39	1338:39	6	& tw
UNARY_EXPR	1338:39	1338:40	7	& tw
UNARY_OPERATOR	1338:39	1338:39	8	&
LEAF_NODE	1338:39	1338:39	9	&
FIELD	1338:40	1338:40	8	tw
LEAF_NODE	1338:40	1338:40	9	tw
LEAF_NODE	1338:42	1338:42	6	)
LEAF_NODE	1338:43	1338:43	4	;
EXPR_STATEMENT	1339:2	1339:48	3	TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	1339:2	1339:2	4	TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
FUNCTION_CALL	1339:2	1339:47	5	TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	1339:2	1339:2	6	TIFFGetField
LEAF_NODE	1339:2	1339:2	7	TIFFGetField
LEAF_NODE	1339:14	1339:14	6	(
ARGUMENT	1339:15	1339:15	6	out
FIELD	1339:15	1339:15	7	out
LEAF_NODE	1339:15	1339:15	8	out
LEAF_NODE	1339:18	1339:18	6	,
ARGUMENT	1339:20	1339:20	6	TIFFTAG_BITSPERSAMPLE
FIELD	1339:20	1339:20	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1339:20	1339:20	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1339:41	1339:41	6	,
ARGUMENT	1339:43	1339:43	6	& bps
UNARY_EXPR	1339:43	1339:44	7	& bps
UNARY_OPERATOR	1339:43	1339:43	8	&
LEAF_NODE	1339:43	1339:43	9	&
FIELD	1339:44	1339:44	8	bps
LEAF_NODE	1339:44	1339:44	9	bps
LEAF_NODE	1339:47	1339:47	6	)
LEAF_NODE	1339:48	1339:48	4	;
LEAF_NODE	1341:2	1341:2	3	if
LEAF_NODE	1341:4	1341:4	3	(
LEAF_NODE	1341:6	1341:6	3	imagewidth
LEAF_NODE	1341:17	1341:17	3	==
LEAF_NODE	1341:20	1341:20	3	0
LEAF_NODE	1341:22	1341:22	3	||
LEAF_NODE	1342:6	1342:6	3	(
LEAF_NODE	1342:7	1342:7	3	uint32
LEAF_NODE	1342:13	1342:13	3	)
LEAF_NODE	1342:14	1342:14	3	bps
LEAF_NODE	1342:18	1342:18	3	*
LEAF_NODE	1342:20	1342:20	3	(
LEAF_NODE	1342:21	1342:21	3	uint32
LEAF_NODE	1342:27	1342:27	3	)
LEAF_NODE	1342:28	1342:28	3	spp
LEAF_NODE	1342:32	1342:32	3	>
LEAF_NODE	1342:34	1342:34	3	TIFF_UINT32_MAX
LEAF_NODE	1342:50	1342:50	3	/
LEAF_NODE	1342:52	1342:52	3	imagewidth
LEAF_NODE	1342:63	1342:63	3	||
LEAF_NODE	1343:6	1343:6	3	bps
LEAF_NODE	1343:10	1343:10	3	*
LEAF_NODE	1343:12	1343:12	3	spp
LEAF_NODE	1343:16	1343:16	3	*
LEAF_NODE	1343:18	1343:18	3	imagewidth
LEAF_NODE	1343:29	1343:29	3	>
LEAF_NODE	1343:31	1343:31	3	TIFF_UINT32_MAX
LEAF_NODE	1343:47	1343:47	3	-
LEAF_NODE	1343:49	1343:49	3	7
LEAF_NODE	1343:51	1343:51	3	)
LEAF_NODE	1344:2	1344:2	3	{
STATEMENTS	1345:6	1348:6	3	
EXPR_STATEMENT	1345:6	1346:81	4	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (imagewidth * bps * spp) + 7" ) ;
EXPR	1345:6	1345:6	5	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (imagewidth * bps * spp) + 7" )
FUNCTION_CALL	1345:6	1346:80	6	TIFFError ( TIFFFileName ( out ) , "Error, uint32 overflow when computing (imagewidth * bps * spp) + 7" )
CALLEE	1345:6	1345:6	7	TIFFError
LEAF_NODE	1345:6	1345:6	8	TIFFError
LEAF_NODE	1345:15	1345:15	7	(
ARGUMENT	1345:16	1345:16	7	TIFFFileName ( out )
FUNCTION_CALL	1345:16	1345:32	8	TIFFFileName ( out )
CALLEE	1345:16	1345:16	9	TIFFFileName
LEAF_NODE	1345:16	1345:16	10	TIFFFileName
LEAF_NODE	1345:28	1345:28	9	(
ARGUMENT	1345:29	1345:29	9	out
FIELD	1345:29	1345:29	10	out
LEAF_NODE	1345:29	1345:29	11	out
LEAF_NODE	1345:32	1345:32	9	)
LEAF_NODE	1345:33	1345:33	7	,
ARGUMENT	1346:12	1346:12	7	"Error, uint32 overflow when computing (imagewidth * bps * spp) + 7"
FIELD	1346:12	1346:12	8	"Error, uint32 overflow when computing (imagewidth * bps * spp) + 7"
LEAF_NODE	1346:12	1346:12	9	"Error, uint32 overflow when computing (imagewidth * bps * spp) + 7"
LEAF_NODE	1346:80	1346:80	7	)
LEAF_NODE	1346:81	1346:81	5	;
EXPR_STATEMENT	1347:6	1347:21	4	_TIFFfree ( obuf ) ;
EXPR	1347:6	1347:6	5	_TIFFfree ( obuf )
FUNCTION_CALL	1347:6	1347:20	6	_TIFFfree ( obuf )
CALLEE	1347:6	1347:6	7	_TIFFfree
LEAF_NODE	1347:6	1347:6	8	_TIFFfree
LEAF_NODE	1347:15	1347:15	7	(
ARGUMENT	1347:16	1347:16	7	obuf
FIELD	1347:16	1347:16	8	obuf
LEAF_NODE	1347:16	1347:16	9	obuf
LEAF_NODE	1347:20	1347:20	7	)
LEAF_NODE	1347:21	1347:21	5	;
JUMP_STATEMENT	1348:6	1348:14	4	return 1 ;
KEYWORD	1348:6	1348:6	5	return
LEAF_NODE	1348:6	1348:6	6	return
DESTINATION	1348:13	1348:13	5	1
EXPR	1348:13	1348:13	6	1
FIELD	1348:13	1348:13	7	1
LEAF_NODE	1348:13	1348:13	8	1
LEAF_NODE	1348:14	1348:14	5	;
LEAF_NODE	1349:2	1349:2	3	}
LEAF_NODE	1350:2	1350:2	3	src_rowsize
LEAF_NODE	1350:14	1350:14	3	=
LEAF_NODE	1350:16	1350:16	3	(
LEAF_NODE	1350:17	1350:17	3	(
LEAF_NODE	1350:18	1350:18	3	imagewidth
LEAF_NODE	1350:29	1350:29	3	*
LEAF_NODE	1350:31	1350:31	3	spp
LEAF_NODE	1350:35	1350:35	3	*
LEAF_NODE	1350:37	1350:37	3	bps
LEAF_NODE	1350:40	1350:40	3	)
LEAF_NODE	1350:42	1350:42	3	+
LEAF_NODE	1350:44	1350:44	3	7U
LEAF_NODE	1350:46	1350:46	3	)
LEAF_NODE	1350:48	1350:48	3	/
EXPR_STATEMENT	1350:50	1350:51	3	8 ;
EXPR	1350:50	1350:50	4	8
FIELD	1350:50	1350:50	5	8
LEAF_NODE	1350:50	1350:50	6	8
LEAF_NODE	1350:51	1350:51	4	;
ITERATION	1352:2	1353:4	3	
KEYWORD	1352:2	1352:2	4	for
LEAF_NODE	1352:2	1352:2	5	for
LEAF_NODE	1352:6	1352:6	4	(
FOR_INIT	1352:7	1352:14	4	row = 0 ;
EXPR	1352:7	1352:7	5	row = 0
ASSIGN	1352:7	1352:13	6	row = 0
LVAL	1352:7	1352:7	7	row
FIELD	1352:7	1352:7	8	row
LEAF_NODE	1352:7	1352:7	9	row
ASSIGN_OP	1352:11	1352:11	7	=
LEAF_NODE	1352:11	1352:11	8	=
RVAL	1352:13	1352:13	7	0
FIELD	1352:13	1352:13	8	0
LEAF_NODE	1352:13	1352:13	9	0
LEAF_NODE	1352:14	1352:14	5	;
CONDITION	1352:16	1352:16	4	row < imagelength
EXPR	1352:16	1352:22	5	row < imagelength
FIELD	1352:16	1352:16	6	row
LEAF_NODE	1352:16	1352:16	7	row
REL_OPERATOR	1352:20	1352:20	6	<
LEAF_NODE	1352:20	1352:20	7	<
FIELD	1352:22	1352:22	6	imagelength
LEAF_NODE	1352:22	1352:22	7	imagelength
LEAF_NODE	1352:33	1352:33	4	;
FOR_EXPR	1352:35	1352:35	4	row += tl
EXPR	1352:35	1352:35	5	row += tl
ASSIGN	1352:35	1352:42	6	row += tl
LVAL	1352:35	1352:35	7	row
FIELD	1352:35	1352:35	8	row
LEAF_NODE	1352:35	1352:35	9	row
ASSIGN_OP	1352:39	1352:39	7	+=
LEAF_NODE	1352:39	1352:39	8	+=
RVAL	1352:42	1352:42	7	tl
FIELD	1352:42	1352:42	8	tl
LEAF_NODE	1352:42	1352:42	9	tl
LEAF_NODE	1352:44	1352:44	4	)
STATEMENTS	1353:4	1389:4	4	
LEAF_NODE	1353:4	1353:4	5	{
STATEMENTS	1354:4	1355:4	5	
EXPR_STATEMENT	1354:4	1354:60	6	nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
EXPR	1354:4	1354:4	7	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	1354:4	1354:11	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	1354:4	1354:4	9	nrow
FIELD	1354:4	1354:4	10	nrow
LEAF_NODE	1354:4	1354:4	11	nrow
ASSIGN_OP	1354:9	1354:9	9	=
LEAF_NODE	1354:9	1354:9	10	=
RVAL	1354:11	1354:11	9	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	1354:11	1354:58	10	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	1354:11	1354:34	11	( row + tl > imagelength )
LEAF_NODE	1354:11	1354:11	12	(
FIELD	1354:12	1354:12	12	row
LEAF_NODE	1354:12	1354:12	13	row
LEAF_NODE	1354:16	1354:16	12	+
FIELD	1354:18	1354:18	12	tl
LEAF_NODE	1354:18	1354:18	13	tl
REL_OPERATOR	1354:21	1354:21	12	>
LEAF_NODE	1354:21	1354:21	13	>
FIELD	1354:23	1354:23	12	imagelength
LEAF_NODE	1354:23	1354:23	13	imagelength
LEAF_NODE	1354:34	1354:34	12	)
LEAF_NODE	1354:36	1354:36	11	?
EXPR	1354:38	1354:52	11	imagelength - row
FIELD	1354:38	1354:38	12	imagelength
LEAF_NODE	1354:38	1354:38	13	imagelength
LEAF_NODE	1354:50	1354:50	12	-
FIELD	1354:52	1354:52	12	row
LEAF_NODE	1354:52	1354:52	13	row
LEAF_NODE	1354:56	1354:56	11	:
FIELD	1354:58	1354:58	11	tl
LEAF_NODE	1354:58	1354:58	12	tl
LEAF_NODE	1354:60	1354:60	7	;
ITERATION	1355:4	1356:6	6	
KEYWORD	1355:4	1355:4	7	for
LEAF_NODE	1355:4	1355:4	8	for
LEAF_NODE	1355:8	1355:8	7	(
FOR_INIT	1355:9	1355:16	7	col = 0 ;
EXPR	1355:9	1355:9	8	col = 0
ASSIGN	1355:9	1355:15	9	col = 0
LVAL	1355:9	1355:9	10	col
FIELD	1355:9	1355:9	11	col
LEAF_NODE	1355:9	1355:9	12	col
ASSIGN_OP	1355:13	1355:13	10	=
LEAF_NODE	1355:13	1355:13	11	=
RVAL	1355:15	1355:15	10	0
FIELD	1355:15	1355:15	11	0
LEAF_NODE	1355:15	1355:15	12	0
LEAF_NODE	1355:16	1355:16	8	;
CONDITION	1355:18	1355:18	7	col < imagewidth
EXPR	1355:18	1355:24	8	col < imagewidth
FIELD	1355:18	1355:18	9	col
LEAF_NODE	1355:18	1355:18	10	col
REL_OPERATOR	1355:22	1355:22	9	<
LEAF_NODE	1355:22	1355:22	10	<
FIELD	1355:24	1355:24	9	imagewidth
LEAF_NODE	1355:24	1355:24	10	imagewidth
LEAF_NODE	1355:34	1355:34	7	;
FOR_EXPR	1355:36	1355:36	7	col += tw
EXPR	1355:36	1355:36	8	col += tw
ASSIGN	1355:36	1355:43	9	col += tw
LVAL	1355:36	1355:36	10	col
FIELD	1355:36	1355:36	11	col
LEAF_NODE	1355:36	1355:36	12	col
ASSIGN_OP	1355:40	1355:40	10	+=
LEAF_NODE	1355:40	1355:40	11	+=
RVAL	1355:43	1355:43	10	tw
FIELD	1355:43	1355:43	11	tw
LEAF_NODE	1355:43	1355:43	12	tw
LEAF_NODE	1355:45	1355:45	7	)
STATEMENTS	1356:6	1388:6	7	
LEAF_NODE	1356:6	1356:6	8	{
STATEMENTS	1358:6	1366:6	8	
SELECTION	1358:6	1359:1	9	
KEYWORD	1358:6	1358:6	10	if
LEAF_NODE	1358:6	1358:6	11	if
LEAF_NODE	1358:9	1358:9	10	(
CONDITION	1358:10	1358:10	10	col + tw > imagewidth
EXPR	1358:10	1358:21	11	col + tw > imagewidth
FIELD	1358:10	1358:10	12	col
LEAF_NODE	1358:10	1358:10	13	col
LEAF_NODE	1358:14	1358:14	12	+
FIELD	1358:16	1358:16	12	tw
LEAF_NODE	1358:16	1358:16	13	tw
REL_OPERATOR	1358:19	1358:19	12	>
LEAF_NODE	1358:19	1358:19	13	>
FIELD	1358:21	1358:21	12	imagewidth
LEAF_NODE	1358:21	1358:21	13	imagewidth
LEAF_NODE	1358:31	1358:31	10	)
STATEMENTS	1359:1	1359:1	10	
EXPR_STATEMENT	1359:1	1359:24	11	ncol = imagewidth - col ;
EXPR	1359:1	1359:1	12	ncol = imagewidth - col
ASSIGN	1359:1	1359:8	13	ncol = imagewidth - col
LVAL	1359:1	1359:1	14	ncol
FIELD	1359:1	1359:1	15	ncol
LEAF_NODE	1359:1	1359:1	16	ncol
ASSIGN_OP	1359:6	1359:6	14	=
LEAF_NODE	1359:6	1359:6	15	=
RVAL	1359:8	1359:21	14	imagewidth - col
FIELD	1359:8	1359:8	15	imagewidth
LEAF_NODE	1359:8	1359:8	16	imagewidth
LEAF_NODE	1359:19	1359:19	15	-
FIELD	1359:21	1359:21	15	col
LEAF_NODE	1359:21	1359:21	16	col
LEAF_NODE	1359:24	1359:24	12	;
SELECTION	1360:6	1361:8	9	
KEYWORD	1360:6	1360:6	10	else
LEAF_NODE	1360:6	1360:6	11	else
STATEMENTS	1361:8	1361:8	10	
EXPR_STATEMENT	1361:8	1361:17	11	ncol = tw ;
EXPR	1361:8	1361:8	12	ncol = tw
ASSIGN	1361:8	1361:15	13	ncol = tw
LVAL	1361:8	1361:8	14	ncol
FIELD	1361:8	1361:8	15	ncol
LEAF_NODE	1361:8	1361:8	16	ncol
ASSIGN_OP	1361:13	1361:13	14	=
LEAF_NODE	1361:13	1361:13	15	=
RVAL	1361:15	1361:15	14	tw
FIELD	1361:15	1361:15	15	tw
LEAF_NODE	1361:15	1361:15	16	tw
LEAF_NODE	1361:17	1361:17	12	;
LEAF_NODE	1363:6	1363:6	9	col_offset
LEAF_NODE	1363:17	1363:17	9	=
LEAF_NODE	1363:19	1363:19	9	(
LEAF_NODE	1363:20	1363:20	9	(
LEAF_NODE	1363:21	1363:21	9	(
LEAF_NODE	1363:22	1363:22	9	col
LEAF_NODE	1363:26	1363:26	9	*
LEAF_NODE	1363:28	1363:28	9	bps
LEAF_NODE	1363:32	1363:32	9	*
LEAF_NODE	1363:34	1363:34	9	spp
LEAF_NODE	1363:37	1363:37	9	)
LEAF_NODE	1363:39	1363:39	9	+
LEAF_NODE	1363:41	1363:41	9	7
LEAF_NODE	1363:42	1363:42	9	)
LEAF_NODE	1363:44	1363:44	9	/
LEAF_NODE	1363:46	1363:46	9	8
LEAF_NODE	1363:47	1363:47	9	)
LEAF_NODE	1363:48	1363:48	9	;
EXPR_STATEMENT	1364:6	1364:51	9	bufp = buf + ( row * src_rowsize ) + col_offset ;
EXPR	1364:6	1364:6	10	bufp = buf + ( row * src_rowsize ) + col_offset
ASSIGN	1364:6	1364:13	11	bufp = buf + ( row * src_rowsize ) + col_offset
LVAL	1364:6	1364:6	12	bufp
FIELD	1364:6	1364:6	13	bufp
LEAF_NODE	1364:6	1364:6	14	bufp
ASSIGN_OP	1364:11	1364:11	12	=
LEAF_NODE	1364:11	1364:11	13	=
RVAL	1364:13	1364:41	12	buf + ( row * src_rowsize ) + col_offset
FIELD	1364:13	1364:13	13	buf
LEAF_NODE	1364:13	1364:13	14	buf
LEAF_NODE	1364:17	1364:17	13	+
LEAF_NODE	1364:19	1364:19	13	(
FIELD	1364:20	1364:20	13	row
LEAF_NODE	1364:20	1364:20	14	row
LEAF_NODE	1364:24	1364:24	13	*
FIELD	1364:26	1364:26	13	src_rowsize
LEAF_NODE	1364:26	1364:26	14	src_rowsize
LEAF_NODE	1364:37	1364:37	13	)
LEAF_NODE	1364:39	1364:39	13	+
FIELD	1364:41	1364:41	13	col_offset
LEAF_NODE	1364:41	1364:41	14	col_offset
LEAF_NODE	1364:51	1364:51	10	;
ITERATION	1366:6	1367:8	9	
KEYWORD	1366:6	1366:6	10	for
LEAF_NODE	1366:6	1366:6	11	for
LEAF_NODE	1366:10	1366:10	10	(
FOR_INIT	1366:11	1366:16	10	s = 0 ;
EXPR	1366:11	1366:11	11	s = 0
ASSIGN	1366:11	1366:15	12	s = 0
LVAL	1366:11	1366:11	13	s
FIELD	1366:11	1366:11	14	s
LEAF_NODE	1366:11	1366:11	15	s
ASSIGN_OP	1366:13	1366:13	13	=
LEAF_NODE	1366:13	1366:13	14	=
RVAL	1366:15	1366:15	13	0
FIELD	1366:15	1366:15	14	0
LEAF_NODE	1366:15	1366:15	15	0
LEAF_NODE	1366:16	1366:16	11	;
CONDITION	1366:18	1366:18	10	s < spp
EXPR	1366:18	1366:22	11	s < spp
FIELD	1366:18	1366:18	12	s
LEAF_NODE	1366:18	1366:18	13	s
REL_OPERATOR	1366:20	1366:20	12	<
LEAF_NODE	1366:20	1366:20	13	<
FIELD	1366:22	1366:22	12	spp
LEAF_NODE	1366:22	1366:22	13	spp
LEAF_NODE	1366:25	1366:25	10	;
FOR_EXPR	1366:27	1366:27	10	s ++
EXPR	1366:27	1366:27	11	s ++
FIELD	1366:27	1366:28	12	s ++
LEAF_NODE	1366:27	1366:27	13	s
LEAF_NODE	1366:28	1366:28	13	++
LEAF_NODE	1366:30	1366:30	10	)
STATEMENTS	1367:8	1387:1	10	
LEAF_NODE	1367:8	1367:8	11	{
STATEMENTS	1368:1	1378:1	11	
SELECTION	1368:1	1370:10	12	
KEYWORD	1368:1	1368:1	13	if
LEAF_NODE	1368:1	1368:1	14	if
LEAF_NODE	1368:4	1368:4	13	(
CONDITION	1368:5	1368:5	13	extractContigSamplesToTileBuffer ( obuf , bufp , nrow , ncol , imagewidth , tw , s , 1 , spp , bps , dump ) > 0
EXPR	1368:5	1369:38	14	extractContigSamplesToTileBuffer ( obuf , bufp , nrow , ncol , imagewidth , tw , s , 1 , spp , bps , dump ) > 0
FUNCTION_CALL	1368:5	1369:34	15	extractContigSamplesToTileBuffer ( obuf , bufp , nrow , ncol , imagewidth , tw , s , 1 , spp , bps , dump )
CALLEE	1368:5	1368:5	16	extractContigSamplesToTileBuffer
LEAF_NODE	1368:5	1368:5	17	extractContigSamplesToTileBuffer
LEAF_NODE	1368:37	1368:37	16	(
ARGUMENT	1368:38	1368:38	16	obuf
FIELD	1368:38	1368:38	17	obuf
LEAF_NODE	1368:38	1368:38	18	obuf
LEAF_NODE	1368:42	1368:42	16	,
ARGUMENT	1368:44	1368:44	16	bufp
FIELD	1368:44	1368:44	17	bufp
LEAF_NODE	1368:44	1368:44	18	bufp
LEAF_NODE	1368:48	1368:48	16	,
ARGUMENT	1368:50	1368:50	16	nrow
FIELD	1368:50	1368:50	17	nrow
LEAF_NODE	1368:50	1368:50	18	nrow
LEAF_NODE	1368:54	1368:54	16	,
ARGUMENT	1368:56	1368:56	16	ncol
FIELD	1368:56	1368:56	17	ncol
LEAF_NODE	1368:56	1368:56	18	ncol
LEAF_NODE	1368:60	1368:60	16	,
ARGUMENT	1368:62	1368:62	16	imagewidth
FIELD	1368:62	1368:62	17	imagewidth
LEAF_NODE	1368:62	1368:62	18	imagewidth
LEAF_NODE	1368:72	1368:72	16	,
ARGUMENT	1369:10	1369:10	16	tw
FIELD	1369:10	1369:10	17	tw
LEAF_NODE	1369:10	1369:10	18	tw
LEAF_NODE	1369:12	1369:12	16	,
ARGUMENT	1369:14	1369:14	16	s
FIELD	1369:14	1369:14	17	s
LEAF_NODE	1369:14	1369:14	18	s
LEAF_NODE	1369:15	1369:15	16	,
ARGUMENT	1369:17	1369:17	16	1
FIELD	1369:17	1369:17	17	1
LEAF_NODE	1369:17	1369:17	18	1
LEAF_NODE	1369:18	1369:18	16	,
ARGUMENT	1369:20	1369:20	16	spp
FIELD	1369:20	1369:20	17	spp
LEAF_NODE	1369:20	1369:20	18	spp
LEAF_NODE	1369:23	1369:23	16	,
ARGUMENT	1369:25	1369:25	16	bps
FIELD	1369:25	1369:25	17	bps
LEAF_NODE	1369:25	1369:25	18	bps
LEAF_NODE	1369:28	1369:28	16	,
ARGUMENT	1369:30	1369:30	16	dump
FIELD	1369:30	1369:30	17	dump
LEAF_NODE	1369:30	1369:30	18	dump
LEAF_NODE	1369:34	1369:34	16	)
REL_OPERATOR	1369:36	1369:36	15	>
LEAF_NODE	1369:36	1369:36	16	>
FIELD	1369:38	1369:38	15	0
LEAF_NODE	1369:38	1369:38	16	0
LEAF_NODE	1369:39	1369:39	13	)
STATEMENTS	1370:10	1376:10	13	
LEAF_NODE	1370:10	1370:10	14	{
STATEMENTS	1371:3	1375:3	14	
EXPR_STATEMENT	1371:3	1373:68	15	TIFFError ( "writeBufferToSeparateTiles" , "Unable to extract data to tile for row %lu, col %lu sample %d" , ( unsigned long ) row , ( unsigned long ) col , ( int ) s ) ;
EXPR	1371:3	1371:3	16	TIFFError ( "writeBufferToSeparateTiles" , "Unable to extract data to tile for row %lu, col %lu sample %d" , ( unsigned long ) row , ( unsigned long ) col , ( int ) s )
FUNCTION_CALL	1371:3	1373:67	17	TIFFError ( "writeBufferToSeparateTiles" , "Unable to extract data to tile for row %lu, col %lu sample %d" , ( unsigned long ) row , ( unsigned long ) col , ( int ) s )
CALLEE	1371:3	1371:3	18	TIFFError
LEAF_NODE	1371:3	1371:3	19	TIFFError
LEAF_NODE	1371:12	1371:12	18	(
ARGUMENT	1371:13	1371:13	18	"writeBufferToSeparateTiles"
FIELD	1371:13	1371:13	19	"writeBufferToSeparateTiles"
LEAF_NODE	1371:13	1371:13	20	"writeBufferToSeparateTiles"
LEAF_NODE	1371:41	1371:41	18	,
ARGUMENT	1372:20	1372:20	18	"Unable to extract data to tile for row %lu, col %lu sample %d"
FIELD	1372:20	1372:20	19	"Unable to extract data to tile for row %lu, col %lu sample %d"
LEAF_NODE	1372:20	1372:20	20	"Unable to extract data to tile for row %lu, col %lu sample %d"
LEAF_NODE	1372:83	1372:83	18	,
ARGUMENT	1373:20	1373:36	18	( unsigned long ) row
LEAF_NODE	1373:20	1373:20	19	(
TYPE_NAME	1373:21	1373:30	19	unsigned long
LEAF_NODE	1373:21	1373:21	20	unsigned
LEAF_NODE	1373:30	1373:30	20	long
LEAF_NODE	1373:34	1373:34	19	)
FIELD	1373:36	1373:36	19	row
LEAF_NODE	1373:36	1373:36	20	row
LEAF_NODE	1373:39	1373:39	18	,
ARGUMENT	1373:41	1373:56	18	( unsigned long ) col
LEAF_NODE	1373:41	1373:41	19	(
TYPE_NAME	1373:42	1373:51	19	unsigned long
LEAF_NODE	1373:42	1373:42	20	unsigned
LEAF_NODE	1373:51	1373:51	20	long
LEAF_NODE	1373:55	1373:55	19	)
FIELD	1373:56	1373:56	19	col
LEAF_NODE	1373:56	1373:56	20	col
LEAF_NODE	1373:59	1373:59	18	,
ARGUMENT	1373:61	1373:66	18	( int ) s
LEAF_NODE	1373:61	1373:61	19	(
TYPE_NAME	1373:62	1373:62	19	int
LEAF_NODE	1373:62	1373:62	20	int
LEAF_NODE	1373:65	1373:65	19	)
FIELD	1373:66	1373:66	19	s
LEAF_NODE	1373:66	1373:66	20	s
LEAF_NODE	1373:67	1373:67	18	)
LEAF_NODE	1373:68	1373:68	16	;
EXPR_STATEMENT	1374:3	1374:18	15	_TIFFfree ( obuf ) ;
EXPR	1374:3	1374:3	16	_TIFFfree ( obuf )
FUNCTION_CALL	1374:3	1374:17	17	_TIFFfree ( obuf )
CALLEE	1374:3	1374:3	18	_TIFFfree
LEAF_NODE	1374:3	1374:3	19	_TIFFfree
LEAF_NODE	1374:12	1374:12	18	(
ARGUMENT	1374:13	1374:13	18	obuf
FIELD	1374:13	1374:13	19	obuf
LEAF_NODE	1374:13	1374:13	20	obuf
LEAF_NODE	1374:17	1374:17	18	)
LEAF_NODE	1374:18	1374:18	16	;
JUMP_STATEMENT	1375:3	1375:11	15	return 1 ;
KEYWORD	1375:3	1375:3	16	return
LEAF_NODE	1375:3	1375:3	17	return
DESTINATION	1375:10	1375:10	16	1
EXPR	1375:10	1375:10	17	1
FIELD	1375:10	1375:10	18	1
LEAF_NODE	1375:10	1375:10	19	1
LEAF_NODE	1375:11	1375:11	16	;
LEAF_NODE	1376:10	1376:10	14	}
SELECTION	1378:1	1379:10	12	
KEYWORD	1378:1	1378:1	13	if
LEAF_NODE	1378:1	1378:1	14	if
LEAF_NODE	1378:4	1378:4	13	(
CONDITION	1378:5	1378:5	13	TIFFWriteTile ( out , obuf , col , row , 0 , s ) < 0
EXPR	1378:5	1378:48	14	TIFFWriteTile ( out , obuf , col , row , 0 , s ) < 0
FUNCTION_CALL	1378:5	1378:44	15	TIFFWriteTile ( out , obuf , col , row , 0 , s )
CALLEE	1378:5	1378:5	16	TIFFWriteTile
LEAF_NODE	1378:5	1378:5	17	TIFFWriteTile
LEAF_NODE	1378:18	1378:18	16	(
ARGUMENT	1378:19	1378:19	16	out
FIELD	1378:19	1378:19	17	out
LEAF_NODE	1378:19	1378:19	18	out
LEAF_NODE	1378:22	1378:22	16	,
ARGUMENT	1378:24	1378:24	16	obuf
FIELD	1378:24	1378:24	17	obuf
LEAF_NODE	1378:24	1378:24	18	obuf
LEAF_NODE	1378:28	1378:28	16	,
ARGUMENT	1378:30	1378:30	16	col
FIELD	1378:30	1378:30	17	col
LEAF_NODE	1378:30	1378:30	18	col
LEAF_NODE	1378:33	1378:33	16	,
ARGUMENT	1378:35	1378:35	16	row
FIELD	1378:35	1378:35	17	row
LEAF_NODE	1378:35	1378:35	18	row
LEAF_NODE	1378:38	1378:38	16	,
ARGUMENT	1378:40	1378:40	16	0
FIELD	1378:40	1378:40	17	0
LEAF_NODE	1378:40	1378:40	18	0
LEAF_NODE	1378:41	1378:41	16	,
ARGUMENT	1378:43	1378:43	16	s
FIELD	1378:43	1378:43	17	s
LEAF_NODE	1378:43	1378:43	18	s
LEAF_NODE	1378:44	1378:44	16	)
REL_OPERATOR	1378:46	1378:46	15	<
LEAF_NODE	1378:46	1378:46	16	<
FIELD	1378:48	1378:48	15	0
LEAF_NODE	1378:48	1378:48	16	0
LEAF_NODE	1378:49	1378:49	13	)
STATEMENTS	1379:10	1386:3	13	
LEAF_NODE	1379:10	1379:10	14	{
STATEMENTS	1380:4	1385:4	14	
EXPR_STATEMENT	1380:4	1383:32	15	TIFFError ( "writeBufferToseparateTiles" , "Cannot write tile at %lu %lu sample %lu" , ( unsigned long ) col , ( unsigned long ) row , ( unsigned long ) s ) ;
EXPR	1380:4	1380:4	16	TIFFError ( "writeBufferToseparateTiles" , "Cannot write tile at %lu %lu sample %lu" , ( unsigned long ) col , ( unsigned long ) row , ( unsigned long ) s )
FUNCTION_CALL	1380:4	1383:31	17	TIFFError ( "writeBufferToseparateTiles" , "Cannot write tile at %lu %lu sample %lu" , ( unsigned long ) col , ( unsigned long ) row , ( unsigned long ) s )
CALLEE	1380:4	1380:4	18	TIFFError
LEAF_NODE	1380:4	1380:4	19	TIFFError
LEAF_NODE	1380:13	1380:13	18	(
ARGUMENT	1380:14	1380:14	18	"writeBufferToseparateTiles"
FIELD	1380:14	1380:14	19	"writeBufferToseparateTiles"
LEAF_NODE	1380:14	1380:14	20	"writeBufferToseparateTiles"
LEAF_NODE	1380:42	1380:42	18	,
ARGUMENT	1381:14	1381:14	18	"Cannot write tile at %lu %lu sample %lu"
FIELD	1381:14	1381:14	19	"Cannot write tile at %lu %lu sample %lu"
LEAF_NODE	1381:14	1381:14	20	"Cannot write tile at %lu %lu sample %lu"
LEAF_NODE	1381:55	1381:55	18	,
ARGUMENT	1382:14	1382:30	18	( unsigned long ) col
LEAF_NODE	1382:14	1382:14	19	(
TYPE_NAME	1382:15	1382:24	19	unsigned long
LEAF_NODE	1382:15	1382:15	20	unsigned
LEAF_NODE	1382:24	1382:24	20	long
LEAF_NODE	1382:28	1382:28	19	)
FIELD	1382:30	1382:30	19	col
LEAF_NODE	1382:30	1382:30	20	col
LEAF_NODE	1382:33	1382:33	18	,
ARGUMENT	1382:35	1382:51	18	( unsigned long ) row
LEAF_NODE	1382:35	1382:35	19	(
TYPE_NAME	1382:36	1382:45	19	unsigned long
LEAF_NODE	1382:36	1382:36	20	unsigned
LEAF_NODE	1382:45	1382:45	20	long
LEAF_NODE	1382:49	1382:49	19	)
FIELD	1382:51	1382:51	19	row
LEAF_NODE	1382:51	1382:51	20	row
LEAF_NODE	1382:54	1382:54	18	,
ARGUMENT	1383:14	1383:30	18	( unsigned long ) s
LEAF_NODE	1383:14	1383:14	19	(
TYPE_NAME	1383:15	1383:24	19	unsigned long
LEAF_NODE	1383:15	1383:15	20	unsigned
LEAF_NODE	1383:24	1383:24	20	long
LEAF_NODE	1383:28	1383:28	19	)
FIELD	1383:30	1383:30	19	s
LEAF_NODE	1383:30	1383:30	20	s
LEAF_NODE	1383:31	1383:31	18	)
LEAF_NODE	1383:32	1383:32	16	;
EXPR_STATEMENT	1384:4	1384:19	15	_TIFFfree ( obuf ) ;
EXPR	1384:4	1384:4	16	_TIFFfree ( obuf )
FUNCTION_CALL	1384:4	1384:18	17	_TIFFfree ( obuf )
CALLEE	1384:4	1384:4	18	_TIFFfree
LEAF_NODE	1384:4	1384:4	19	_TIFFfree
LEAF_NODE	1384:13	1384:13	18	(
ARGUMENT	1384:14	1384:14	18	obuf
FIELD	1384:14	1384:14	19	obuf
LEAF_NODE	1384:14	1384:14	20	obuf
LEAF_NODE	1384:18	1384:18	18	)
LEAF_NODE	1384:19	1384:19	16	;
JUMP_STATEMENT	1385:4	1385:12	15	return 1 ;
KEYWORD	1385:4	1385:4	16	return
LEAF_NODE	1385:4	1385:4	17	return
DESTINATION	1385:11	1385:11	16	1
EXPR	1385:11	1385:11	17	1
FIELD	1385:11	1385:11	18	1
LEAF_NODE	1385:11	1385:11	19	1
LEAF_NODE	1385:12	1385:12	16	;
LEAF_NODE	1386:3	1386:3	14	}
LEAF_NODE	1387:1	1387:1	11	}
LEAF_NODE	1388:6	1388:6	8	}
LEAF_NODE	1389:4	1389:4	5	}
EXPR_STATEMENT	1390:2	1390:17	3	_TIFFfree ( obuf ) ;
EXPR	1390:2	1390:2	4	_TIFFfree ( obuf )
FUNCTION_CALL	1390:2	1390:16	5	_TIFFfree ( obuf )
CALLEE	1390:2	1390:2	6	_TIFFfree
LEAF_NODE	1390:2	1390:2	7	_TIFFfree
LEAF_NODE	1390:11	1390:11	6	(
ARGUMENT	1390:12	1390:12	6	obuf
FIELD	1390:12	1390:12	7	obuf
LEAF_NODE	1390:12	1390:12	8	obuf
LEAF_NODE	1390:16	1390:16	6	)
LEAF_NODE	1390:17	1390:17	4	;
JUMP_STATEMENT	1392:2	1392:10	3	return 0 ;
KEYWORD	1392:2	1392:2	4	return
LEAF_NODE	1392:2	1392:2	5	return
DESTINATION	1392:9	1392:9	4	0
EXPR	1392:9	1392:9	5	0
FIELD	1392:9	1392:9	6	0
LEAF_NODE	1392:9	1392:9	7	0
LEAF_NODE	1392:10	1392:10	4	;
LEAF_NODE	1393:2	1393:2	2	}
FUNCTION_DEF	1395:0	1413:0	1	
RETURN_TYPE	1395:0	1395:7	2	static void
LEAF_NODE	1395:0	1395:0	3	static
TYPE_NAME	1395:7	1395:7	3	void
LEAF_NODE	1395:7	1395:7	4	void
FUNCTION_NAME	1396:0	1396:0	2	processG3Options
LEAF_NODE	1396:0	1396:0	3	processG3Options
PARAMETER_LIST	1396:16	1396:25	2	( char * cp )
LEAF_NODE	1396:16	1396:16	3	(
PARAMETER_DECL	1396:17	1396:23	3	char * cp
TYPE	1396:17	1396:21	4	char *
TYPE_NAME	1396:17	1396:17	5	char
LEAF_NODE	1396:17	1396:17	6	char
POINTER	1396:21	1396:21	5	*
LEAF_NODE	1396:21	1396:21	6	*
NAME	1396:23	1396:23	4	cp
LEAF_NODE	1396:23	1396:23	5	cp
LEAF_NODE	1396:25	1396:25	3	)
LEAF_NODE	1397:0	1397:0	2	{
STATEMENTS	1398:1	1398:1	2	
SELECTION	1398:1	1398:30	3	
KEYWORD	1398:1	1398:1	4	if
LEAF_NODE	1398:1	1398:1	5	if
LEAF_NODE	1398:3	1398:3	4	(
CONDITION	1398:5	1398:5	4	( cp = strchr ( cp , ':' ) )
EXPR	1398:5	1398:26	5	( cp = strchr ( cp , ':' ) )
LEAF_NODE	1398:5	1398:5	6	(
ASSIGN	1398:6	1398:11	6	cp = strchr ( cp , ':' )
LVAL	1398:6	1398:6	7	cp
FIELD	1398:6	1398:6	8	cp
LEAF_NODE	1398:6	1398:6	9	cp
ASSIGN_OP	1398:9	1398:9	7	=
LEAF_NODE	1398:9	1398:9	8	=
RVAL	1398:11	1398:11	7	strchr ( cp , ':' )
FUNCTION_CALL	1398:11	1398:25	8	strchr ( cp , ':' )
CALLEE	1398:11	1398:11	9	strchr
LEAF_NODE	1398:11	1398:11	10	strchr
LEAF_NODE	1398:17	1398:17	9	(
ARGUMENT	1398:18	1398:18	9	cp
FIELD	1398:18	1398:18	10	cp
LEAF_NODE	1398:18	1398:18	11	cp
LEAF_NODE	1398:20	1398:20	9	,
ARGUMENT	1398:22	1398:22	9	':'
FIELD	1398:22	1398:22	10	':'
LEAF_NODE	1398:22	1398:22	11	':'
LEAF_NODE	1398:25	1398:25	9	)
LEAF_NODE	1398:26	1398:26	6	)
LEAF_NODE	1398:28	1398:28	4	)
STATEMENTS	1398:30	1412:1	4	
LEAF_NODE	1398:30	1398:30	5	{
STATEMENTS	1399:2	1411:35	5	
SELECTION	1399:2	1400:3	6	
KEYWORD	1399:2	1399:2	7	if
LEAF_NODE	1399:2	1399:2	8	if
LEAF_NODE	1399:5	1399:5	7	(
CONDITION	1399:6	1399:6	7	defg3opts == ( uint32 ) - 1
EXPR	1399:6	1399:28	8	defg3opts == ( uint32 ) - 1
FIELD	1399:6	1399:6	9	defg3opts
LEAF_NODE	1399:6	1399:6	10	defg3opts
EQ_OPERATOR	1399:16	1399:16	9	==
LEAF_NODE	1399:16	1399:16	10	==
LEAF_NODE	1399:19	1399:19	9	(
TYPE_NAME	1399:20	1399:20	9	uint32
LEAF_NODE	1399:20	1399:20	10	uint32
LEAF_NODE	1399:26	1399:26	9	)
UNARY_EXPR	1399:28	1399:29	9	- 1
UNARY_OPERATOR	1399:28	1399:28	10	-
LEAF_NODE	1399:28	1399:28	11	-
FIELD	1399:29	1399:29	10	1
LEAF_NODE	1399:29	1399:29	11	1
LEAF_NODE	1399:30	1399:30	7	)
STATEMENTS	1400:3	1400:3	7	
EXPR_STATEMENT	1400:3	1400:16	8	defg3opts = 0 ;
EXPR	1400:3	1400:3	9	defg3opts = 0
ASSIGN	1400:3	1400:15	10	defg3opts = 0
LVAL	1400:3	1400:3	11	defg3opts
FIELD	1400:3	1400:3	12	defg3opts
LEAF_NODE	1400:3	1400:3	13	defg3opts
ASSIGN_OP	1400:13	1400:13	11	=
LEAF_NODE	1400:13	1400:13	12	=
RVAL	1400:15	1400:15	11	0
FIELD	1400:15	1400:15	12	0
LEAF_NODE	1400:15	1400:15	13	0
LEAF_NODE	1400:16	1400:16	9	;
ITERATION	1401:2	1401:5	6	
KEYWORD	1401:2	1401:2	7	do
LEAF_NODE	1401:2	1401:2	8	do
LEAF_NODE	1411:9	1411:9	7	(
CONDITION	1411:11	1411:11	7	( cp = strchr ( cp , ':' ) )
EXPR	1411:11	1411:32	8	( cp = strchr ( cp , ':' ) )
LEAF_NODE	1411:11	1411:11	9	(
ASSIGN	1411:12	1411:17	9	cp = strchr ( cp , ':' )
LVAL	1411:12	1411:12	10	cp
FIELD	1411:12	1411:12	11	cp
LEAF_NODE	1411:12	1411:12	12	cp
ASSIGN_OP	1411:15	1411:15	10	=
LEAF_NODE	1411:15	1411:15	11	=
RVAL	1411:17	1411:17	10	strchr ( cp , ':' )
FUNCTION_CALL	1411:17	1411:31	11	strchr ( cp , ':' )
CALLEE	1411:17	1411:17	12	strchr
LEAF_NODE	1411:17	1411:17	13	strchr
LEAF_NODE	1411:23	1411:23	12	(
ARGUMENT	1411:24	1411:24	12	cp
FIELD	1411:24	1411:24	13	cp
LEAF_NODE	1411:24	1411:24	14	cp
LEAF_NODE	1411:26	1411:26	12	,
ARGUMENT	1411:28	1411:28	12	':'
FIELD	1411:28	1411:28	13	':'
LEAF_NODE	1411:28	1411:28	14	':'
LEAF_NODE	1411:31	1411:31	12	)
LEAF_NODE	1411:32	1411:32	9	)
LEAF_NODE	1411:34	1411:34	7	)
STATEMENTS	1401:5	1411:2	7	
LEAF_NODE	1401:5	1401:5	8	{
STATEMENTS	1402:3	1409:3	8	
EXPR_STATEMENT	1402:3	1402:7	9	cp ++ ;
EXPR	1402:3	1402:3	10	cp ++
FIELD	1402:3	1402:5	11	cp ++
LEAF_NODE	1402:3	1402:3	12	cp
LEAF_NODE	1402:5	1402:5	12	++
LEAF_NODE	1402:7	1402:7	10	;
SELECTION	1403:3	1404:4	9	
KEYWORD	1403:3	1403:3	10	if
LEAF_NODE	1403:3	1403:3	11	if
LEAF_NODE	1403:6	1403:6	10	(
CONDITION	1403:7	1403:7	10	strneq ( cp , "1d" , 2 )
EXPR	1403:7	1403:7	11	strneq ( cp , "1d" , 2 )
FUNCTION_CALL	1403:7	1403:25	12	strneq ( cp , "1d" , 2 )
CALLEE	1403:7	1403:7	13	strneq
LEAF_NODE	1403:7	1403:7	14	strneq
LEAF_NODE	1403:13	1403:13	13	(
ARGUMENT	1403:14	1403:14	13	cp
FIELD	1403:14	1403:14	14	cp
LEAF_NODE	1403:14	1403:14	15	cp
LEAF_NODE	1403:16	1403:16	13	,
ARGUMENT	1403:18	1403:18	13	"1d"
FIELD	1403:18	1403:18	14	"1d"
LEAF_NODE	1403:18	1403:18	15	"1d"
LEAF_NODE	1403:22	1403:22	13	,
ARGUMENT	1403:24	1403:24	13	2
FIELD	1403:24	1403:24	14	2
LEAF_NODE	1403:24	1403:24	15	2
LEAF_NODE	1403:25	1403:25	13	)
LEAF_NODE	1403:26	1403:26	10	)
STATEMENTS	1404:4	1404:4	10	
EXPR_STATEMENT	1404:4	1404:38	11	defg3opts &= ~GROUP3OPT_2DENCODING ;
EXPR	1404:4	1404:4	12	defg3opts &= ~GROUP3OPT_2DENCODING
ASSIGN	1404:4	1404:17	13	defg3opts &= ~GROUP3OPT_2DENCODING
LVAL	1404:4	1404:4	14	defg3opts
FIELD	1404:4	1404:4	15	defg3opts
LEAF_NODE	1404:4	1404:4	16	defg3opts
ASSIGN_OP	1404:14	1404:14	14	&=
LEAF_NODE	1404:14	1404:14	15	&=
RVAL	1404:17	1404:17	14	~GROUP3OPT_2DENCODING
FIELD	1404:17	1404:17	15	~GROUP3OPT_2DENCODING
LEAF_NODE	1404:17	1404:17	16	~GROUP3OPT_2DENCODING
LEAF_NODE	1404:38	1404:38	12	;
SELECTION	1405:3	1405:8	9	
KEYWORD	1405:3	1405:3	10	else
LEAF_NODE	1405:3	1405:3	11	else
STATEMENTS	1405:8	1405:8	10	
SELECTION	1405:8	1406:4	11	
KEYWORD	1405:8	1405:8	12	if
LEAF_NODE	1405:8	1405:8	13	if
LEAF_NODE	1405:11	1405:11	12	(
CONDITION	1405:12	1405:12	12	strneq ( cp , "2d" , 2 )
EXPR	1405:12	1405:12	13	strneq ( cp , "2d" , 2 )
FUNCTION_CALL	1405:12	1405:30	14	strneq ( cp , "2d" , 2 )
CALLEE	1405:12	1405:12	15	strneq
LEAF_NODE	1405:12	1405:12	16	strneq
LEAF_NODE	1405:18	1405:18	15	(
ARGUMENT	1405:19	1405:19	15	cp
FIELD	1405:19	1405:19	16	cp
LEAF_NODE	1405:19	1405:19	17	cp
LEAF_NODE	1405:21	1405:21	15	,
ARGUMENT	1405:23	1405:23	15	"2d"
FIELD	1405:23	1405:23	16	"2d"
LEAF_NODE	1405:23	1405:23	17	"2d"
LEAF_NODE	1405:27	1405:27	15	,
ARGUMENT	1405:29	1405:29	15	2
FIELD	1405:29	1405:29	16	2
LEAF_NODE	1405:29	1405:29	17	2
LEAF_NODE	1405:30	1405:30	15	)
LEAF_NODE	1405:31	1405:31	12	)
STATEMENTS	1406:4	1406:4	12	
EXPR_STATEMENT	1406:4	1406:37	13	defg3opts |= GROUP3OPT_2DENCODING ;
EXPR	1406:4	1406:4	14	defg3opts |= GROUP3OPT_2DENCODING
ASSIGN	1406:4	1406:17	15	defg3opts |= GROUP3OPT_2DENCODING
LVAL	1406:4	1406:4	16	defg3opts
FIELD	1406:4	1406:4	17	defg3opts
LEAF_NODE	1406:4	1406:4	18	defg3opts
ASSIGN_OP	1406:14	1406:14	16	|=
LEAF_NODE	1406:14	1406:14	17	|=
RVAL	1406:17	1406:17	16	GROUP3OPT_2DENCODING
FIELD	1406:17	1406:17	17	GROUP3OPT_2DENCODING
LEAF_NODE	1406:17	1406:17	18	GROUP3OPT_2DENCODING
LEAF_NODE	1406:37	1406:37	14	;
SELECTION	1407:3	1407:8	9	
KEYWORD	1407:3	1407:3	10	else
LEAF_NODE	1407:3	1407:3	11	else
STATEMENTS	1407:8	1407:8	10	
SELECTION	1407:8	1408:4	11	
KEYWORD	1407:8	1407:8	12	if
LEAF_NODE	1407:8	1407:8	13	if
LEAF_NODE	1407:11	1407:11	12	(
CONDITION	1407:12	1407:12	12	strneq ( cp , "fill" , 4 )
EXPR	1407:12	1407:12	13	strneq ( cp , "fill" , 4 )
FUNCTION_CALL	1407:12	1407:32	14	strneq ( cp , "fill" , 4 )
CALLEE	1407:12	1407:12	15	strneq
LEAF_NODE	1407:12	1407:12	16	strneq
LEAF_NODE	1407:18	1407:18	15	(
ARGUMENT	1407:19	1407:19	15	cp
FIELD	1407:19	1407:19	16	cp
LEAF_NODE	1407:19	1407:19	17	cp
LEAF_NODE	1407:21	1407:21	15	,
ARGUMENT	1407:23	1407:23	15	"fill"
FIELD	1407:23	1407:23	16	"fill"
LEAF_NODE	1407:23	1407:23	17	"fill"
LEAF_NODE	1407:29	1407:29	15	,
ARGUMENT	1407:31	1407:31	15	4
FIELD	1407:31	1407:31	16	4
LEAF_NODE	1407:31	1407:31	17	4
LEAF_NODE	1407:32	1407:32	15	)
LEAF_NODE	1407:33	1407:33	12	)
STATEMENTS	1408:4	1408:4	12	
EXPR_STATEMENT	1408:4	1408:35	13	defg3opts |= GROUP3OPT_FILLBITS ;
EXPR	1408:4	1408:4	14	defg3opts |= GROUP3OPT_FILLBITS
ASSIGN	1408:4	1408:17	15	defg3opts |= GROUP3OPT_FILLBITS
LVAL	1408:4	1408:4	16	defg3opts
FIELD	1408:4	1408:4	17	defg3opts
LEAF_NODE	1408:4	1408:4	18	defg3opts
ASSIGN_OP	1408:14	1408:14	16	|=
LEAF_NODE	1408:14	1408:14	17	|=
RVAL	1408:17	1408:17	16	GROUP3OPT_FILLBITS
FIELD	1408:17	1408:17	17	GROUP3OPT_FILLBITS
LEAF_NODE	1408:17	1408:17	18	GROUP3OPT_FILLBITS
LEAF_NODE	1408:35	1408:35	14	;
SELECTION	1409:3	1410:4	9	
KEYWORD	1409:3	1409:3	10	else
LEAF_NODE	1409:3	1409:3	11	else
STATEMENTS	1410:4	1410:4	10	
EXPR_STATEMENT	1410:4	1410:11	11	usage ( ) ;
EXPR	1410:4	1410:4	12	usage ( )
FUNCTION_CALL	1410:4	1410:10	13	usage ( )
CALLEE	1410:4	1410:4	14	usage
LEAF_NODE	1410:4	1410:4	15	usage
LEAF_NODE	1410:9	1410:9	14	(
LEAF_NODE	1410:10	1410:10	14	)
LEAF_NODE	1410:11	1410:11	12	;
LEAF_NODE	1411:2	1411:2	8	}
LEAF_NODE	1411:35	1411:35	6	;
LEAF_NODE	1412:1	1412:1	5	}
LEAF_NODE	1413:0	1413:0	2	}
FUNCTION_DEF	1415:0	1473:2	1	
RETURN_TYPE	1415:0	1415:7	2	static int
LEAF_NODE	1415:0	1415:0	3	static
TYPE_NAME	1415:7	1415:7	3	int
LEAF_NODE	1415:7	1415:7	4	int
FUNCTION_NAME	1416:0	1416:0	2	processCompressOptions
LEAF_NODE	1416:0	1416:0	3	processCompressOptions
PARAMETER_LIST	1416:22	1416:32	2	( char * opt )
LEAF_NODE	1416:22	1416:22	3	(
PARAMETER_DECL	1416:23	1416:29	3	char * opt
TYPE	1416:23	1416:27	4	char *
TYPE_NAME	1416:23	1416:23	5	char
LEAF_NODE	1416:23	1416:23	6	char
POINTER	1416:27	1416:27	5	*
LEAF_NODE	1416:27	1416:27	6	*
NAME	1416:29	1416:29	4	opt
LEAF_NODE	1416:29	1416:29	5	opt
LEAF_NODE	1416:32	1416:32	3	)
LEAF_NODE	1417:2	1417:2	2	{
STATEMENTS	1418:2	1472:2	2	
SIMPLE_DECL	1418:2	1418:17	3	char * cp ; cp = NULL ;
VAR_DECL	1418:2	1418:8	4	char * cp ; cp = NULL
TYPE	1418:2	1418:6	5	char *
TYPE_NAME	1418:2	1418:2	6	char
LEAF_NODE	1418:2	1418:2	7	char
POINTER	1418:6	1418:6	6	*
LEAF_NODE	1418:6	1418:6	7	*
NAME	1418:8	1418:8	5	cp
LEAF_NODE	1418:8	1418:8	6	cp
LEAF_NODE	0:0	0:0	5	;
INIT	1418:8	1418:8	5	cp = NULL
ASSIGN	1418:8	1418:13	6	cp = NULL
LVAL	1418:8	1418:8	7	cp
NAME	1418:8	1418:8	8	cp
LEAF_NODE	1418:8	1418:8	9	cp
ASSIGN_OP	1418:11	1418:11	7	=
LEAF_NODE	1418:11	1418:11	8	=
RVAL	1418:13	1418:13	7	NULL
FIELD	1418:13	1418:13	8	NULL
LEAF_NODE	1418:13	1418:13	9	NULL
LEAF_NODE	1418:17	1418:17	4	;
SELECTION	1420:2	1421:4	3	
KEYWORD	1420:2	1420:2	4	if
LEAF_NODE	1420:2	1420:2	5	if
LEAF_NODE	1420:5	1420:5	4	(
CONDITION	1420:6	1420:6	4	strneq ( opt , "none" , 4 )
EXPR	1420:6	1420:6	5	strneq ( opt , "none" , 4 )
FUNCTION_CALL	1420:6	1420:26	6	strneq ( opt , "none" , 4 )
CALLEE	1420:6	1420:6	7	strneq
LEAF_NODE	1420:6	1420:6	8	strneq
LEAF_NODE	1420:12	1420:12	7	(
ARGUMENT	1420:13	1420:13	7	opt
FIELD	1420:13	1420:13	8	opt
LEAF_NODE	1420:13	1420:13	9	opt
LEAF_NODE	1420:16	1420:16	7	,
ARGUMENT	1420:18	1420:18	7	"none"
FIELD	1420:18	1420:18	8	"none"
LEAF_NODE	1420:18	1420:18	9	"none"
LEAF_NODE	1420:24	1420:24	7	,
ARGUMENT	1420:25	1420:25	7	4
FIELD	1420:25	1420:25	8	4
LEAF_NODE	1420:25	1420:25	9	4
LEAF_NODE	1420:26	1420:26	7	)
LEAF_NODE	1420:27	1420:27	4	)
STATEMENTS	1421:4	1423:4	4	
LEAF_NODE	1421:4	1421:4	5	{
STATEMENTS	1422:4	1422:4	5	
EXPR_STATEMENT	1422:4	1422:37	6	defcompression = COMPRESSION_NONE ;
EXPR	1422:4	1422:4	7	defcompression = COMPRESSION_NONE
ASSIGN	1422:4	1422:21	8	defcompression = COMPRESSION_NONE
LVAL	1422:4	1422:4	9	defcompression
FIELD	1422:4	1422:4	10	defcompression
LEAF_NODE	1422:4	1422:4	11	defcompression
ASSIGN_OP	1422:19	1422:19	9	=
LEAF_NODE	1422:19	1422:19	10	=
RVAL	1422:21	1422:21	9	COMPRESSION_NONE
FIELD	1422:21	1422:21	10	COMPRESSION_NONE
LEAF_NODE	1422:21	1422:21	11	COMPRESSION_NONE
LEAF_NODE	1422:37	1422:37	7	;
LEAF_NODE	1423:4	1423:4	5	}
SELECTION	1424:2	1424:7	3	
KEYWORD	1424:2	1424:2	4	else
LEAF_NODE	1424:2	1424:2	5	else
STATEMENTS	1424:7	1424:7	4	
SELECTION	1424:7	1425:4	5	
KEYWORD	1424:7	1424:7	6	if
LEAF_NODE	1424:7	1424:7	7	if
LEAF_NODE	1424:10	1424:10	6	(
CONDITION	1424:11	1424:11	6	streq ( opt , "packbits" )
EXPR	1424:11	1424:11	7	streq ( opt , "packbits" )
FUNCTION_CALL	1424:11	1424:32	8	streq ( opt , "packbits" )
CALLEE	1424:11	1424:11	9	streq
LEAF_NODE	1424:11	1424:11	10	streq
LEAF_NODE	1424:16	1424:16	9	(
ARGUMENT	1424:17	1424:17	9	opt
FIELD	1424:17	1424:17	10	opt
LEAF_NODE	1424:17	1424:17	11	opt
LEAF_NODE	1424:20	1424:20	9	,
ARGUMENT	1424:22	1424:22	9	"packbits"
FIELD	1424:22	1424:22	10	"packbits"
LEAF_NODE	1424:22	1424:22	11	"packbits"
LEAF_NODE	1424:32	1424:32	9	)
LEAF_NODE	1424:33	1424:33	6	)
STATEMENTS	1425:4	1427:4	6	
LEAF_NODE	1425:4	1425:4	7	{
STATEMENTS	1426:4	1426:4	7	
EXPR_STATEMENT	1426:4	1426:41	8	defcompression = COMPRESSION_PACKBITS ;
EXPR	1426:4	1426:4	9	defcompression = COMPRESSION_PACKBITS
ASSIGN	1426:4	1426:21	10	defcompression = COMPRESSION_PACKBITS
LVAL	1426:4	1426:4	11	defcompression
FIELD	1426:4	1426:4	12	defcompression
LEAF_NODE	1426:4	1426:4	13	defcompression
ASSIGN_OP	1426:19	1426:19	11	=
LEAF_NODE	1426:19	1426:19	12	=
RVAL	1426:21	1426:21	11	COMPRESSION_PACKBITS
FIELD	1426:21	1426:21	12	COMPRESSION_PACKBITS
LEAF_NODE	1426:21	1426:21	13	COMPRESSION_PACKBITS
LEAF_NODE	1426:41	1426:41	9	;
LEAF_NODE	1427:4	1427:4	7	}
SELECTION	1428:2	1428:7	3	
KEYWORD	1428:2	1428:2	4	else
LEAF_NODE	1428:2	1428:2	5	else
STATEMENTS	1428:7	1428:7	4	
SELECTION	1428:7	1429:4	5	
KEYWORD	1428:7	1428:7	6	if
LEAF_NODE	1428:7	1428:7	7	if
LEAF_NODE	1428:10	1428:10	6	(
CONDITION	1428:11	1428:11	6	strneq ( opt , "jpeg" , 4 )
EXPR	1428:11	1428:11	7	strneq ( opt , "jpeg" , 4 )
FUNCTION_CALL	1428:11	1428:32	8	strneq ( opt , "jpeg" , 4 )
CALLEE	1428:11	1428:11	9	strneq
LEAF_NODE	1428:11	1428:11	10	strneq
LEAF_NODE	1428:17	1428:17	9	(
ARGUMENT	1428:18	1428:18	9	opt
FIELD	1428:18	1428:18	10	opt
LEAF_NODE	1428:18	1428:18	11	opt
LEAF_NODE	1428:21	1428:21	9	,
ARGUMENT	1428:23	1428:23	9	"jpeg"
FIELD	1428:23	1428:23	10	"jpeg"
LEAF_NODE	1428:23	1428:23	11	"jpeg"
LEAF_NODE	1428:29	1428:29	9	,
ARGUMENT	1428:31	1428:31	9	4
FIELD	1428:31	1428:31	10	4
LEAF_NODE	1428:31	1428:31	11	4
LEAF_NODE	1428:32	1428:32	9	)
LEAF_NODE	1428:33	1428:33	6	)
STATEMENTS	1429:4	1445:4	6	
LEAF_NODE	1429:4	1429:4	7	{
STATEMENTS	1430:4	1433:4	7	
EXPR_STATEMENT	1430:4	1430:25	8	cp = strchr ( opt , ':' ) ;
EXPR	1430:4	1430:4	9	cp = strchr ( opt , ':' )
ASSIGN	1430:4	1430:9	10	cp = strchr ( opt , ':' )
LVAL	1430:4	1430:4	11	cp
FIELD	1430:4	1430:4	12	cp
LEAF_NODE	1430:4	1430:4	13	cp
ASSIGN_OP	1430:7	1430:7	11	=
LEAF_NODE	1430:7	1430:7	12	=
RVAL	1430:9	1430:9	11	strchr ( opt , ':' )
FUNCTION_CALL	1430:9	1430:24	12	strchr ( opt , ':' )
CALLEE	1430:9	1430:9	13	strchr
LEAF_NODE	1430:9	1430:9	14	strchr
LEAF_NODE	1430:15	1430:15	13	(
ARGUMENT	1430:16	1430:16	13	opt
FIELD	1430:16	1430:16	14	opt
LEAF_NODE	1430:16	1430:16	15	opt
LEAF_NODE	1430:19	1430:19	13	,
ARGUMENT	1430:21	1430:21	13	':'
FIELD	1430:21	1430:21	14	':'
LEAF_NODE	1430:21	1430:21	15	':'
LEAF_NODE	1430:24	1430:24	13	)
LEAF_NODE	1430:25	1430:25	9	;
EXPR_STATEMENT	1431:4	1431:37	8	defcompression = COMPRESSION_JPEG ;
EXPR	1431:4	1431:4	9	defcompression = COMPRESSION_JPEG
ASSIGN	1431:4	1431:21	10	defcompression = COMPRESSION_JPEG
LVAL	1431:4	1431:4	11	defcompression
FIELD	1431:4	1431:4	12	defcompression
LEAF_NODE	1431:4	1431:4	13	defcompression
ASSIGN_OP	1431:19	1431:19	11	=
LEAF_NODE	1431:19	1431:19	12	=
RVAL	1431:21	1431:21	11	COMPRESSION_JPEG
FIELD	1431:21	1431:21	12	COMPRESSION_JPEG
LEAF_NODE	1431:21	1431:21	13	COMPRESSION_JPEG
LEAF_NODE	1431:37	1431:37	9	;
ITERATION	1433:4	1434:6	8	
KEYWORD	1433:4	1433:4	9	while
LEAF_NODE	1433:4	1433:4	10	while
LEAF_NODE	1433:10	1433:10	9	(
CONDITION	1433:11	1433:11	9	cp
EXPR	1433:11	1433:11	10	cp
FIELD	1433:11	1433:11	11	cp
LEAF_NODE	1433:11	1433:11	12	cp
LEAF_NODE	1433:13	1433:13	9	)
STATEMENTS	1434:6	1444:6	9	
LEAF_NODE	1434:6	1434:6	10	{
STATEMENTS	1435:6	1443:6	10	
SELECTION	1435:6	1436:1	11	
KEYWORD	1435:6	1435:6	12	if
LEAF_NODE	1435:6	1435:6	13	if
LEAF_NODE	1435:9	1435:9	12	(
CONDITION	1435:10	1435:10	12	isdigit ( ( int ) cp [ 1 ] )
EXPR	1435:10	1435:10	13	isdigit ( ( int ) cp [ 1 ] )
FUNCTION_CALL	1435:10	1435:28	14	isdigit ( ( int ) cp [ 1 ] )
CALLEE	1435:10	1435:10	15	isdigit
LEAF_NODE	1435:10	1435:10	16	isdigit
LEAF_NODE	1435:17	1435:17	15	(
ARGUMENT	1435:18	1435:23	15	( int ) cp [ 1 ]
LEAF_NODE	1435:18	1435:18	16	(
TYPE_NAME	1435:19	1435:19	16	int
LEAF_NODE	1435:19	1435:19	17	int
LEAF_NODE	1435:22	1435:22	16	)
FIELD	1435:23	1435:27	16	cp [ 1 ]
LEAF_NODE	1435:23	1435:23	17	cp
LEAF_NODE	1435:25	1435:25	17	[
EXPR	1435:26	1435:26	17	1
FIELD	1435:26	1435:26	18	1
LEAF_NODE	1435:26	1435:26	19	1
LEAF_NODE	1435:27	1435:27	17	]
LEAF_NODE	1435:28	1435:28	15	)
LEAF_NODE	1435:29	1435:29	12	)
STATEMENTS	1436:1	1436:1	12	
EXPR_STATEMENT	1436:1	1436:23	13	quality = atoi ( cp + 1 ) ;
EXPR	1436:1	1436:1	14	quality = atoi ( cp + 1 )
ASSIGN	1436:1	1436:11	15	quality = atoi ( cp + 1 )
LVAL	1436:1	1436:1	16	quality
FIELD	1436:1	1436:1	17	quality
LEAF_NODE	1436:1	1436:1	18	quality
ASSIGN_OP	1436:9	1436:9	16	=
LEAF_NODE	1436:9	1436:9	17	=
RVAL	1436:11	1436:11	16	atoi ( cp + 1 )
FUNCTION_CALL	1436:11	1436:22	17	atoi ( cp + 1 )
CALLEE	1436:11	1436:11	18	atoi
LEAF_NODE	1436:11	1436:11	19	atoi
LEAF_NODE	1436:15	1436:15	18	(
ARGUMENT	1436:16	1436:21	18	cp + 1
FIELD	1436:16	1436:16	19	cp
LEAF_NODE	1436:16	1436:16	20	cp
LEAF_NODE	1436:19	1436:19	19	+
FIELD	1436:21	1436:21	19	1
LEAF_NODE	1436:21	1436:21	20	1
LEAF_NODE	1436:22	1436:22	18	)
LEAF_NODE	1436:23	1436:23	14	;
SELECTION	1437:6	1437:11	11	
KEYWORD	1437:6	1437:6	12	else
LEAF_NODE	1437:6	1437:6	13	else
STATEMENTS	1437:11	1437:11	12	
SELECTION	1437:11	1438:1	13	
KEYWORD	1437:11	1437:11	14	if
LEAF_NODE	1437:11	1437:11	15	if
LEAF_NODE	1437:14	1437:14	14	(
CONDITION	1437:15	1437:15	14	strneq ( cp + 1 , "raw" , 3 )
EXPR	1437:15	1437:15	15	strneq ( cp + 1 , "raw" , 3 )
FUNCTION_CALL	1437:15	1437:39	16	strneq ( cp + 1 , "raw" , 3 )
CALLEE	1437:15	1437:15	17	strneq
LEAF_NODE	1437:15	1437:15	18	strneq
LEAF_NODE	1437:21	1437:21	17	(
ARGUMENT	1437:22	1437:27	17	cp + 1
FIELD	1437:22	1437:22	18	cp
LEAF_NODE	1437:22	1437:22	19	cp
LEAF_NODE	1437:25	1437:25	18	+
FIELD	1437:27	1437:27	18	1
LEAF_NODE	1437:27	1437:27	19	1
LEAF_NODE	1437:28	1437:28	17	,
ARGUMENT	1437:30	1437:30	17	"raw"
FIELD	1437:30	1437:30	18	"raw"
LEAF_NODE	1437:30	1437:30	19	"raw"
LEAF_NODE	1437:35	1437:35	17	,
ARGUMENT	1437:37	1437:37	17	3
FIELD	1437:37	1437:37	18	3
LEAF_NODE	1437:37	1437:37	19	3
LEAF_NODE	1437:39	1437:39	17	)
LEAF_NODE	1437:40	1437:40	14	)
STATEMENTS	1438:1	1438:1	14	
EXPR_STATEMENT	1438:1	1438:34	15	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	1438:1	1438:1	16	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	1438:1	1438:17	17	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	1438:1	1438:1	18	jpegcolormode
FIELD	1438:1	1438:1	19	jpegcolormode
LEAF_NODE	1438:1	1438:1	20	jpegcolormode
ASSIGN_OP	1438:15	1438:15	18	=
LEAF_NODE	1438:15	1438:15	19	=
RVAL	1438:17	1438:17	18	JPEGCOLORMODE_RAW
FIELD	1438:17	1438:17	19	JPEGCOLORMODE_RAW
LEAF_NODE	1438:17	1438:17	20	JPEGCOLORMODE_RAW
LEAF_NODE	1438:34	1438:34	16	;
SELECTION	1439:6	1439:11	11	
KEYWORD	1439:6	1439:6	12	else
LEAF_NODE	1439:6	1439:6	13	else
STATEMENTS	1439:11	1439:11	12	
SELECTION	1439:11	1440:1	13	
KEYWORD	1439:11	1439:11	14	if
LEAF_NODE	1439:11	1439:11	15	if
LEAF_NODE	1439:14	1439:14	14	(
CONDITION	1439:15	1439:15	14	strneq ( cp + 1 , "rgb" , 3 )
EXPR	1439:15	1439:15	15	strneq ( cp + 1 , "rgb" , 3 )
FUNCTION_CALL	1439:15	1439:39	16	strneq ( cp + 1 , "rgb" , 3 )
CALLEE	1439:15	1439:15	17	strneq
LEAF_NODE	1439:15	1439:15	18	strneq
LEAF_NODE	1439:21	1439:21	17	(
ARGUMENT	1439:22	1439:27	17	cp + 1
FIELD	1439:22	1439:22	18	cp
LEAF_NODE	1439:22	1439:22	19	cp
LEAF_NODE	1439:25	1439:25	18	+
FIELD	1439:27	1439:27	18	1
LEAF_NODE	1439:27	1439:27	19	1
LEAF_NODE	1439:28	1439:28	17	,
ARGUMENT	1439:30	1439:30	17	"rgb"
FIELD	1439:30	1439:30	18	"rgb"
LEAF_NODE	1439:30	1439:30	19	"rgb"
LEAF_NODE	1439:35	1439:35	17	,
ARGUMENT	1439:37	1439:37	17	3
FIELD	1439:37	1439:37	18	3
LEAF_NODE	1439:37	1439:37	19	3
LEAF_NODE	1439:39	1439:39	17	)
LEAF_NODE	1439:40	1439:40	14	)
STATEMENTS	1440:1	1440:1	14	
EXPR_STATEMENT	1440:1	1440:34	15	jpegcolormode = JPEGCOLORMODE_RGB ;
EXPR	1440:1	1440:1	16	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	1440:1	1440:17	17	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	1440:1	1440:1	18	jpegcolormode
FIELD	1440:1	1440:1	19	jpegcolormode
LEAF_NODE	1440:1	1440:1	20	jpegcolormode
ASSIGN_OP	1440:15	1440:15	18	=
LEAF_NODE	1440:15	1440:15	19	=
RVAL	1440:17	1440:17	18	JPEGCOLORMODE_RGB
FIELD	1440:17	1440:17	19	JPEGCOLORMODE_RGB
LEAF_NODE	1440:17	1440:17	20	JPEGCOLORMODE_RGB
LEAF_NODE	1440:34	1440:34	16	;
SELECTION	1441:6	1442:1	11	
KEYWORD	1441:6	1441:6	12	else
LEAF_NODE	1441:6	1441:6	13	else
STATEMENTS	1442:1	1442:1	12	
EXPR_STATEMENT	1442:1	1442:8	13	usage ( ) ;
EXPR	1442:1	1442:1	14	usage ( )
FUNCTION_CALL	1442:1	1442:7	15	usage ( )
CALLEE	1442:1	1442:1	16	usage
LEAF_NODE	1442:1	1442:1	17	usage
LEAF_NODE	1442:6	1442:6	16	(
LEAF_NODE	1442:7	1442:7	16	)
LEAF_NODE	1442:8	1442:8	14	;
EXPR_STATEMENT	1443:6	1443:30	11	cp = strchr ( cp + 1 , ':' ) ;
EXPR	1443:6	1443:6	12	cp = strchr ( cp + 1 , ':' )
ASSIGN	1443:6	1443:11	13	cp = strchr ( cp + 1 , ':' )
LVAL	1443:6	1443:6	14	cp
FIELD	1443:6	1443:6	15	cp
LEAF_NODE	1443:6	1443:6	16	cp
ASSIGN_OP	1443:9	1443:9	14	=
LEAF_NODE	1443:9	1443:9	15	=
RVAL	1443:11	1443:11	14	strchr ( cp + 1 , ':' )
FUNCTION_CALL	1443:11	1443:29	15	strchr ( cp + 1 , ':' )
CALLEE	1443:11	1443:11	16	strchr
LEAF_NODE	1443:11	1443:11	17	strchr
LEAF_NODE	1443:17	1443:17	16	(
ARGUMENT	1443:18	1443:23	16	cp + 1
FIELD	1443:18	1443:18	17	cp
LEAF_NODE	1443:18	1443:18	18	cp
LEAF_NODE	1443:21	1443:21	17	+
FIELD	1443:23	1443:23	17	1
LEAF_NODE	1443:23	1443:23	18	1
LEAF_NODE	1443:24	1443:24	16	,
ARGUMENT	1443:26	1443:26	16	':'
FIELD	1443:26	1443:26	17	':'
LEAF_NODE	1443:26	1443:26	18	':'
LEAF_NODE	1443:29	1443:29	16	)
LEAF_NODE	1443:30	1443:30	12	;
LEAF_NODE	1444:6	1444:6	10	}
LEAF_NODE	1445:4	1445:4	7	}
SELECTION	1446:2	1446:7	3	
KEYWORD	1446:2	1446:2	4	else
LEAF_NODE	1446:2	1446:2	5	else
STATEMENTS	1446:7	1446:7	4	
SELECTION	1446:7	1447:4	5	
KEYWORD	1446:7	1446:7	6	if
LEAF_NODE	1446:7	1446:7	7	if
LEAF_NODE	1446:10	1446:10	6	(
CONDITION	1446:11	1446:11	6	strneq ( opt , "g3" , 2 )
EXPR	1446:11	1446:11	7	strneq ( opt , "g3" , 2 )
FUNCTION_CALL	1446:11	1446:30	8	strneq ( opt , "g3" , 2 )
CALLEE	1446:11	1446:11	9	strneq
LEAF_NODE	1446:11	1446:11	10	strneq
LEAF_NODE	1446:17	1446:17	9	(
ARGUMENT	1446:18	1446:18	9	opt
FIELD	1446:18	1446:18	10	opt
LEAF_NODE	1446:18	1446:18	11	opt
LEAF_NODE	1446:21	1446:21	9	,
ARGUMENT	1446:23	1446:23	9	"g3"
FIELD	1446:23	1446:23	10	"g3"
LEAF_NODE	1446:23	1446:23	11	"g3"
LEAF_NODE	1446:27	1446:27	9	,
ARGUMENT	1446:29	1446:29	9	2
FIELD	1446:29	1446:29	10	2
LEAF_NODE	1446:29	1446:29	11	2
LEAF_NODE	1446:30	1446:30	9	)
LEAF_NODE	1446:31	1446:31	6	)
STATEMENTS	1447:4	1450:4	6	
LEAF_NODE	1447:4	1447:4	7	{
STATEMENTS	1448:4	1449:4	7	
EXPR_STATEMENT	1448:4	1448:25	8	processG3Options ( opt ) ;
EXPR	1448:4	1448:4	9	processG3Options ( opt )
FUNCTION_CALL	1448:4	1448:24	10	processG3Options ( opt )
CALLEE	1448:4	1448:4	11	processG3Options
LEAF_NODE	1448:4	1448:4	12	processG3Options
LEAF_NODE	1448:20	1448:20	11	(
ARGUMENT	1448:21	1448:21	11	opt
FIELD	1448:21	1448:21	12	opt
LEAF_NODE	1448:21	1448:21	13	opt
LEAF_NODE	1448:24	1448:24	11	)
LEAF_NODE	1448:25	1448:25	9	;
EXPR_STATEMENT	1449:4	1449:42	8	defcompression = COMPRESSION_CCITTFAX3 ;
EXPR	1449:4	1449:4	9	defcompression = COMPRESSION_CCITTFAX3
ASSIGN	1449:4	1449:21	10	defcompression = COMPRESSION_CCITTFAX3
LVAL	1449:4	1449:4	11	defcompression
FIELD	1449:4	1449:4	12	defcompression
LEAF_NODE	1449:4	1449:4	13	defcompression
ASSIGN_OP	1449:19	1449:19	11	=
LEAF_NODE	1449:19	1449:19	12	=
RVAL	1449:21	1449:21	11	COMPRESSION_CCITTFAX3
FIELD	1449:21	1449:21	12	COMPRESSION_CCITTFAX3
LEAF_NODE	1449:21	1449:21	13	COMPRESSION_CCITTFAX3
LEAF_NODE	1449:42	1449:42	9	;
LEAF_NODE	1450:4	1450:4	7	}
SELECTION	1451:2	1451:7	3	
KEYWORD	1451:2	1451:2	4	else
LEAF_NODE	1451:2	1451:2	5	else
STATEMENTS	1451:7	1451:7	4	
SELECTION	1451:7	1452:4	5	
KEYWORD	1451:7	1451:7	6	if
LEAF_NODE	1451:7	1451:7	7	if
LEAF_NODE	1451:10	1451:10	6	(
CONDITION	1451:11	1451:11	6	streq ( opt , "g4" )
EXPR	1451:11	1451:11	7	streq ( opt , "g4" )
FUNCTION_CALL	1451:11	1451:26	8	streq ( opt , "g4" )
CALLEE	1451:11	1451:11	9	streq
LEAF_NODE	1451:11	1451:11	10	streq
LEAF_NODE	1451:16	1451:16	9	(
ARGUMENT	1451:17	1451:17	9	opt
FIELD	1451:17	1451:17	10	opt
LEAF_NODE	1451:17	1451:17	11	opt
LEAF_NODE	1451:20	1451:20	9	,
ARGUMENT	1451:22	1451:22	9	"g4"
FIELD	1451:22	1451:22	10	"g4"
LEAF_NODE	1451:22	1451:22	11	"g4"
LEAF_NODE	1451:26	1451:26	9	)
LEAF_NODE	1451:27	1451:27	6	)
STATEMENTS	1452:4	1454:4	6	
LEAF_NODE	1452:4	1452:4	7	{
STATEMENTS	1453:4	1453:4	7	
EXPR_STATEMENT	1453:4	1453:42	8	defcompression = COMPRESSION_CCITTFAX4 ;
EXPR	1453:4	1453:4	9	defcompression = COMPRESSION_CCITTFAX4
ASSIGN	1453:4	1453:21	10	defcompression = COMPRESSION_CCITTFAX4
LVAL	1453:4	1453:4	11	defcompression
FIELD	1453:4	1453:4	12	defcompression
LEAF_NODE	1453:4	1453:4	13	defcompression
ASSIGN_OP	1453:19	1453:19	11	=
LEAF_NODE	1453:19	1453:19	12	=
RVAL	1453:21	1453:21	11	COMPRESSION_CCITTFAX4
FIELD	1453:21	1453:21	12	COMPRESSION_CCITTFAX4
LEAF_NODE	1453:21	1453:21	13	COMPRESSION_CCITTFAX4
LEAF_NODE	1453:42	1453:42	9	;
LEAF_NODE	1454:4	1454:4	7	}
SELECTION	1455:2	1455:7	3	
KEYWORD	1455:2	1455:2	4	else
LEAF_NODE	1455:2	1455:2	5	else
STATEMENTS	1455:7	1455:7	4	
SELECTION	1455:7	1456:4	5	
KEYWORD	1455:7	1455:7	6	if
LEAF_NODE	1455:7	1455:7	7	if
LEAF_NODE	1455:10	1455:10	6	(
CONDITION	1455:11	1455:11	6	strneq ( opt , "lzw" , 3 )
EXPR	1455:11	1455:11	7	strneq ( opt , "lzw" , 3 )
FUNCTION_CALL	1455:11	1455:31	8	strneq ( opt , "lzw" , 3 )
CALLEE	1455:11	1455:11	9	strneq
LEAF_NODE	1455:11	1455:11	10	strneq
LEAF_NODE	1455:17	1455:17	9	(
ARGUMENT	1455:18	1455:18	9	opt
FIELD	1455:18	1455:18	10	opt
LEAF_NODE	1455:18	1455:18	11	opt
LEAF_NODE	1455:21	1455:21	9	,
ARGUMENT	1455:23	1455:23	9	"lzw"
FIELD	1455:23	1455:23	10	"lzw"
LEAF_NODE	1455:23	1455:23	11	"lzw"
LEAF_NODE	1455:28	1455:28	9	,
ARGUMENT	1455:30	1455:30	9	3
FIELD	1455:30	1455:30	10	3
LEAF_NODE	1455:30	1455:30	11	3
LEAF_NODE	1455:31	1455:31	9	)
LEAF_NODE	1455:32	1455:32	6	)
STATEMENTS	1456:4	1461:4	6	
LEAF_NODE	1456:4	1456:4	7	{
STATEMENTS	1457:4	1460:4	7	
EXPR_STATEMENT	1457:4	1457:25	8	cp = strchr ( opt , ':' ) ;
EXPR	1457:4	1457:4	9	cp = strchr ( opt , ':' )
ASSIGN	1457:4	1457:9	10	cp = strchr ( opt , ':' )
LVAL	1457:4	1457:4	11	cp
FIELD	1457:4	1457:4	12	cp
LEAF_NODE	1457:4	1457:4	13	cp
ASSIGN_OP	1457:7	1457:7	11	=
LEAF_NODE	1457:7	1457:7	12	=
RVAL	1457:9	1457:9	11	strchr ( opt , ':' )
FUNCTION_CALL	1457:9	1457:24	12	strchr ( opt , ':' )
CALLEE	1457:9	1457:9	13	strchr
LEAF_NODE	1457:9	1457:9	14	strchr
LEAF_NODE	1457:15	1457:15	13	(
ARGUMENT	1457:16	1457:16	13	opt
FIELD	1457:16	1457:16	14	opt
LEAF_NODE	1457:16	1457:16	15	opt
LEAF_NODE	1457:19	1457:19	13	,
ARGUMENT	1457:21	1457:21	13	':'
FIELD	1457:21	1457:21	14	':'
LEAF_NODE	1457:21	1457:21	15	':'
LEAF_NODE	1457:24	1457:24	13	)
LEAF_NODE	1457:25	1457:25	9	;
SELECTION	1458:4	1459:6	8	
KEYWORD	1458:4	1458:4	9	if
LEAF_NODE	1458:4	1458:4	10	if
LEAF_NODE	1458:7	1458:7	9	(
CONDITION	1458:8	1458:8	9	cp
EXPR	1458:8	1458:8	10	cp
FIELD	1458:8	1458:8	11	cp
LEAF_NODE	1458:8	1458:8	12	cp
LEAF_NODE	1458:10	1458:10	9	)
STATEMENTS	1459:6	1459:6	9	
EXPR_STATEMENT	1459:6	1459:31	10	defpredictor = atoi ( cp + 1 ) ;
EXPR	1459:6	1459:6	11	defpredictor = atoi ( cp + 1 )
ASSIGN	1459:6	1459:21	12	defpredictor = atoi ( cp + 1 )
LVAL	1459:6	1459:6	13	defpredictor
FIELD	1459:6	1459:6	14	defpredictor
LEAF_NODE	1459:6	1459:6	15	defpredictor
ASSIGN_OP	1459:19	1459:19	13	=
LEAF_NODE	1459:19	1459:19	14	=
RVAL	1459:21	1459:21	13	atoi ( cp + 1 )
FUNCTION_CALL	1459:21	1459:30	14	atoi ( cp + 1 )
CALLEE	1459:21	1459:21	15	atoi
LEAF_NODE	1459:21	1459:21	16	atoi
LEAF_NODE	1459:25	1459:25	15	(
ARGUMENT	1459:26	1459:29	15	cp + 1
FIELD	1459:26	1459:26	16	cp
LEAF_NODE	1459:26	1459:26	17	cp
LEAF_NODE	1459:28	1459:28	16	+
FIELD	1459:29	1459:29	16	1
LEAF_NODE	1459:29	1459:29	17	1
LEAF_NODE	1459:30	1459:30	15	)
LEAF_NODE	1459:31	1459:31	11	;
EXPR_STATEMENT	1460:4	1460:36	8	defcompression = COMPRESSION_LZW ;
EXPR	1460:4	1460:4	9	defcompression = COMPRESSION_LZW
ASSIGN	1460:4	1460:21	10	defcompression = COMPRESSION_LZW
LVAL	1460:4	1460:4	11	defcompression
FIELD	1460:4	1460:4	12	defcompression
LEAF_NODE	1460:4	1460:4	13	defcompression
ASSIGN_OP	1460:19	1460:19	11	=
LEAF_NODE	1460:19	1460:19	12	=
RVAL	1460:21	1460:21	11	COMPRESSION_LZW
FIELD	1460:21	1460:21	12	COMPRESSION_LZW
LEAF_NODE	1460:21	1460:21	13	COMPRESSION_LZW
LEAF_NODE	1460:36	1460:36	9	;
LEAF_NODE	1461:4	1461:4	7	}
SELECTION	1462:2	1462:7	3	
KEYWORD	1462:2	1462:2	4	else
LEAF_NODE	1462:2	1462:2	5	else
STATEMENTS	1462:7	1462:7	4	
SELECTION	1462:7	1463:4	5	
KEYWORD	1462:7	1462:7	6	if
LEAF_NODE	1462:7	1462:7	7	if
LEAF_NODE	1462:10	1462:10	6	(
CONDITION	1462:11	1462:11	6	strneq ( opt , "zip" , 3 )
EXPR	1462:11	1462:11	7	strneq ( opt , "zip" , 3 )
FUNCTION_CALL	1462:11	1462:31	8	strneq ( opt , "zip" , 3 )
CALLEE	1462:11	1462:11	9	strneq
LEAF_NODE	1462:11	1462:11	10	strneq
LEAF_NODE	1462:17	1462:17	9	(
ARGUMENT	1462:18	1462:18	9	opt
FIELD	1462:18	1462:18	10	opt
LEAF_NODE	1462:18	1462:18	11	opt
LEAF_NODE	1462:21	1462:21	9	,
ARGUMENT	1462:23	1462:23	9	"zip"
FIELD	1462:23	1462:23	10	"zip"
LEAF_NODE	1462:23	1462:23	11	"zip"
LEAF_NODE	1462:28	1462:28	9	,
ARGUMENT	1462:30	1462:30	9	3
FIELD	1462:30	1462:30	10	3
LEAF_NODE	1462:30	1462:30	11	3
LEAF_NODE	1462:31	1462:31	9	)
LEAF_NODE	1462:32	1462:32	6	)
STATEMENTS	1463:4	1468:3	6	
LEAF_NODE	1463:4	1463:4	7	{
STATEMENTS	1464:4	1467:4	7	
EXPR_STATEMENT	1464:4	1464:25	8	cp = strchr ( opt , ':' ) ;
EXPR	1464:4	1464:4	9	cp = strchr ( opt , ':' )
ASSIGN	1464:4	1464:9	10	cp = strchr ( opt , ':' )
LVAL	1464:4	1464:4	11	cp
FIELD	1464:4	1464:4	12	cp
LEAF_NODE	1464:4	1464:4	13	cp
ASSIGN_OP	1464:7	1464:7	11	=
LEAF_NODE	1464:7	1464:7	12	=
RVAL	1464:9	1464:9	11	strchr ( opt , ':' )
FUNCTION_CALL	1464:9	1464:24	12	strchr ( opt , ':' )
CALLEE	1464:9	1464:9	13	strchr
LEAF_NODE	1464:9	1464:9	14	strchr
LEAF_NODE	1464:15	1464:15	13	(
ARGUMENT	1464:16	1464:16	13	opt
FIELD	1464:16	1464:16	14	opt
LEAF_NODE	1464:16	1464:16	15	opt
LEAF_NODE	1464:19	1464:19	13	,
ARGUMENT	1464:21	1464:21	13	':'
FIELD	1464:21	1464:21	14	':'
LEAF_NODE	1464:21	1464:21	15	':'
LEAF_NODE	1464:24	1464:24	13	)
LEAF_NODE	1464:25	1464:25	9	;
SELECTION	1465:4	1466:6	8	
KEYWORD	1465:4	1465:4	9	if
LEAF_NODE	1465:4	1465:4	10	if
LEAF_NODE	1465:7	1465:7	9	(
CONDITION	1465:8	1465:8	9	cp
EXPR	1465:8	1465:8	10	cp
FIELD	1465:8	1465:8	11	cp
LEAF_NODE	1465:8	1465:8	12	cp
LEAF_NODE	1465:10	1465:10	9	)
STATEMENTS	1466:6	1466:6	9	
EXPR_STATEMENT	1466:6	1466:31	10	defpredictor = atoi ( cp + 1 ) ;
EXPR	1466:6	1466:6	11	defpredictor = atoi ( cp + 1 )
ASSIGN	1466:6	1466:21	12	defpredictor = atoi ( cp + 1 )
LVAL	1466:6	1466:6	13	defpredictor
FIELD	1466:6	1466:6	14	defpredictor
LEAF_NODE	1466:6	1466:6	15	defpredictor
ASSIGN_OP	1466:19	1466:19	13	=
LEAF_NODE	1466:19	1466:19	14	=
RVAL	1466:21	1466:21	13	atoi ( cp + 1 )
FUNCTION_CALL	1466:21	1466:30	14	atoi ( cp + 1 )
CALLEE	1466:21	1466:21	15	atoi
LEAF_NODE	1466:21	1466:21	16	atoi
LEAF_NODE	1466:25	1466:25	15	(
ARGUMENT	1466:26	1466:29	15	cp + 1
FIELD	1466:26	1466:26	16	cp
LEAF_NODE	1466:26	1466:26	17	cp
LEAF_NODE	1466:28	1466:28	16	+
FIELD	1466:29	1466:29	16	1
LEAF_NODE	1466:29	1466:29	17	1
LEAF_NODE	1466:30	1466:30	15	)
LEAF_NODE	1466:31	1466:31	11	;
EXPR_STATEMENT	1467:4	1467:46	8	defcompression = COMPRESSION_ADOBE_DEFLATE ;
EXPR	1467:4	1467:4	9	defcompression = COMPRESSION_ADOBE_DEFLATE
ASSIGN	1467:4	1467:21	10	defcompression = COMPRESSION_ADOBE_DEFLATE
LVAL	1467:4	1467:4	11	defcompression
FIELD	1467:4	1467:4	12	defcompression
LEAF_NODE	1467:4	1467:4	13	defcompression
ASSIGN_OP	1467:19	1467:19	11	=
LEAF_NODE	1467:19	1467:19	12	=
RVAL	1467:21	1467:21	11	COMPRESSION_ADOBE_DEFLATE
FIELD	1467:21	1467:21	12	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1467:21	1467:21	13	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	1467:46	1467:46	9	;
LEAF_NODE	1468:3	1468:3	7	}
SELECTION	1469:2	1470:4	3	
KEYWORD	1469:2	1469:2	4	else
LEAF_NODE	1469:2	1469:2	5	else
STATEMENTS	1470:4	1470:4	4	
JUMP_STATEMENT	1470:4	1470:14	5	return ( 0 ) ;
KEYWORD	1470:4	1470:4	6	return
LEAF_NODE	1470:4	1470:4	7	return
DESTINATION	1470:11	1470:11	6	( 0 )
EXPR	1470:11	1470:13	7	( 0 )
LEAF_NODE	1470:11	1470:11	8	(
FIELD	1470:12	1470:12	8	0
LEAF_NODE	1470:12	1470:12	9	0
LEAF_NODE	1470:13	1470:13	8	)
LEAF_NODE	1470:14	1470:14	6	;
JUMP_STATEMENT	1472:2	1472:12	3	return ( 1 ) ;
KEYWORD	1472:2	1472:2	4	return
LEAF_NODE	1472:2	1472:2	5	return
DESTINATION	1472:9	1472:9	4	( 1 )
EXPR	1472:9	1472:11	5	( 1 )
LEAF_NODE	1472:9	1472:9	6	(
FIELD	1472:10	1472:10	6	1
LEAF_NODE	1472:10	1472:10	7	1
LEAF_NODE	1472:11	1472:11	6	)
LEAF_NODE	1472:12	1472:12	4	;
LEAF_NODE	1473:2	1473:2	2	}
FUNCTION_DEF	1475:0	1484:2	1	
RETURN_TYPE	1475:0	1475:7	2	static void
LEAF_NODE	1475:0	1475:0	3	static
TYPE_NAME	1475:7	1475:7	3	void
LEAF_NODE	1475:7	1475:7	4	void
FUNCTION_NAME	1476:0	1476:0	2	usage
LEAF_NODE	1476:0	1476:0	3	usage
PARAMETER_LIST	1476:5	1476:10	2	( void )
LEAF_NODE	1476:5	1476:5	3	(
PARAMETER_DECL	1476:6	1476:6	3	void
LEAF_NODE	1476:6	1476:6	4	void
LEAF_NODE	1476:10	1476:10	3	)
LEAF_NODE	1477:2	1477:2	2	{
STATEMENTS	1478:2	1483:2	2	
SIMPLE_DECL	1478:2	1478:7	3	int i ;
VAR_DECL	1478:2	1478:6	4	int i
TYPE	1478:2	1478:2	5	int
TYPE_NAME	1478:2	1478:2	6	int
LEAF_NODE	1478:2	1478:2	7	int
NAME	1478:6	1478:6	5	i
LEAF_NODE	1478:6	1478:6	6	i
LEAF_NODE	1478:7	1478:7	4	;
EXPR_STATEMENT	1480:2	1480:45	3	fprintf ( stderr , "\n%s\n" , TIFFGetVersion ( ) ) ;
EXPR	1480:2	1480:2	4	fprintf ( stderr , "\n%s\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	1480:2	1480:44	5	fprintf ( stderr , "\n%s\n" , TIFFGetVersion ( ) )
CALLEE	1480:2	1480:2	6	fprintf
LEAF_NODE	1480:2	1480:2	7	fprintf
LEAF_NODE	1480:9	1480:9	6	(
ARGUMENT	1480:10	1480:10	6	stderr
FIELD	1480:10	1480:10	7	stderr
LEAF_NODE	1480:10	1480:10	8	stderr
LEAF_NODE	1480:16	1480:16	6	,
ARGUMENT	1480:18	1480:18	6	"\n%s\n"
FIELD	1480:18	1480:18	7	"\n%s\n"
LEAF_NODE	1480:18	1480:18	8	"\n%s\n"
LEAF_NODE	1480:26	1480:26	6	,
ARGUMENT	1480:28	1480:28	6	TIFFGetVersion ( )
FUNCTION_CALL	1480:28	1480:43	7	TIFFGetVersion ( )
CALLEE	1480:28	1480:28	8	TIFFGetVersion
LEAF_NODE	1480:28	1480:28	9	TIFFGetVersion
LEAF_NODE	1480:42	1480:42	8	(
LEAF_NODE	1480:43	1480:43	8	)
LEAF_NODE	1480:44	1480:44	6	)
LEAF_NODE	1480:45	1480:45	4	;
ITERATION	1481:2	1482:4	3	
KEYWORD	1481:2	1481:2	4	for
LEAF_NODE	1481:2	1481:2	5	for
LEAF_NODE	1481:6	1481:6	4	(
FOR_INIT	1481:7	1481:12	4	i = 0 ;
EXPR	1481:7	1481:7	5	i = 0
ASSIGN	1481:7	1481:11	6	i = 0
LVAL	1481:7	1481:7	7	i
FIELD	1481:7	1481:7	8	i
LEAF_NODE	1481:7	1481:7	9	i
ASSIGN_OP	1481:9	1481:9	7	=
LEAF_NODE	1481:9	1481:9	8	=
RVAL	1481:11	1481:11	7	0
FIELD	1481:11	1481:11	8	0
LEAF_NODE	1481:11	1481:11	9	0
LEAF_NODE	1481:12	1481:12	5	;
CONDITION	1481:14	1481:14	4	usage_info [ i ] != NULL
EXPR	1481:14	1481:31	5	usage_info [ i ] != NULL
FIELD	1481:14	1481:26	6	usage_info [ i ]
LEAF_NODE	1481:14	1481:14	7	usage_info
LEAF_NODE	1481:24	1481:24	7	[
EXPR	1481:25	1481:25	7	i
FIELD	1481:25	1481:25	8	i
LEAF_NODE	1481:25	1481:25	9	i
LEAF_NODE	1481:26	1481:26	7	]
EQ_OPERATOR	1481:28	1481:28	6	!=
LEAF_NODE	1481:28	1481:28	7	!=
FIELD	1481:31	1481:31	6	NULL
LEAF_NODE	1481:31	1481:31	7	NULL
LEAF_NODE	1481:35	1481:35	4	;
FOR_EXPR	1481:37	1481:37	4	i ++
EXPR	1481:37	1481:37	5	i ++
FIELD	1481:37	1481:38	6	i ++
LEAF_NODE	1481:37	1481:37	7	i
LEAF_NODE	1481:38	1481:38	7	++
LEAF_NODE	1481:40	1481:40	4	)
STATEMENTS	1482:4	1482:4	4	
EXPR_STATEMENT	1482:4	1482:42	5	fprintf ( stderr , "%s\n" , usage_info [ i ] ) ;
EXPR	1482:4	1482:4	6	fprintf ( stderr , "%s\n" , usage_info [ i ] )
FUNCTION_CALL	1482:4	1482:41	7	fprintf ( stderr , "%s\n" , usage_info [ i ] )
CALLEE	1482:4	1482:4	8	fprintf
LEAF_NODE	1482:4	1482:4	9	fprintf
LEAF_NODE	1482:11	1482:11	8	(
ARGUMENT	1482:12	1482:12	8	stderr
FIELD	1482:12	1482:12	9	stderr
LEAF_NODE	1482:12	1482:12	10	stderr
LEAF_NODE	1482:18	1482:18	8	,
ARGUMENT	1482:20	1482:20	8	"%s\n"
FIELD	1482:20	1482:20	9	"%s\n"
LEAF_NODE	1482:20	1482:20	10	"%s\n"
LEAF_NODE	1482:26	1482:26	8	,
ARGUMENT	1482:28	1482:28	8	usage_info [ i ]
FIELD	1482:28	1482:40	9	usage_info [ i ]
LEAF_NODE	1482:28	1482:28	10	usage_info
LEAF_NODE	1482:38	1482:38	10	[
EXPR	1482:39	1482:39	10	i
FIELD	1482:39	1482:39	11	i
LEAF_NODE	1482:39	1482:39	12	i
LEAF_NODE	1482:40	1482:40	10	]
LEAF_NODE	1482:41	1482:41	8	)
LEAF_NODE	1482:42	1482:42	6	;
EXPR_STATEMENT	1483:2	1483:10	3	exit ( - 1 ) ;
EXPR	1483:2	1483:2	4	exit ( - 1 )
FUNCTION_CALL	1483:2	1483:9	5	exit ( - 1 )
CALLEE	1483:2	1483:2	6	exit
LEAF_NODE	1483:2	1483:2	7	exit
LEAF_NODE	1483:6	1483:6	6	(
ARGUMENT	1483:7	1483:7	6	- 1
UNARY_EXPR	1483:7	1483:8	7	- 1
UNARY_OPERATOR	1483:7	1483:7	8	-
LEAF_NODE	1483:7	1483:7	9	-
FIELD	1483:8	1483:8	8	1
LEAF_NODE	1483:8	1483:8	9	1
LEAF_NODE	1483:9	1483:9	6	)
LEAF_NODE	1483:10	1483:10	4	;
LEAF_NODE	1484:2	1484:2	2	}
FUNCTION_DEF	1495:0	1548:0	1	
RETURN_TYPE	1495:0	1495:7	2	static void
LEAF_NODE	1495:0	1495:0	3	static
TYPE_NAME	1495:7	1495:7	3	void
LEAF_NODE	1495:7	1495:7	4	void
FUNCTION_NAME	1496:0	1496:0	2	cpTag
LEAF_NODE	1496:0	1496:0	3	cpTag
PARAMETER_LIST	1496:5	1496:70	2	( TIFF * in , TIFF * out , uint16 tag , uint16 count , TIFFDataType type )
LEAF_NODE	1496:5	1496:5	3	(
PARAMETER_DECL	1496:6	1496:12	3	TIFF * in
TYPE	1496:6	1496:10	4	TIFF *
TYPE_NAME	1496:6	1496:6	5	TIFF
LEAF_NODE	1496:6	1496:6	6	TIFF
POINTER	1496:10	1496:10	5	*
LEAF_NODE	1496:10	1496:10	6	*
NAME	1496:12	1496:12	4	in
LEAF_NODE	1496:12	1496:12	5	in
LEAF_NODE	1496:14	1496:14	3	,
PARAMETER_DECL	1496:16	1496:22	3	TIFF * out
TYPE	1496:16	1496:20	4	TIFF *
TYPE_NAME	1496:16	1496:16	5	TIFF
LEAF_NODE	1496:16	1496:16	6	TIFF
POINTER	1496:20	1496:20	5	*
LEAF_NODE	1496:20	1496:20	6	*
NAME	1496:22	1496:22	4	out
LEAF_NODE	1496:22	1496:22	5	out
LEAF_NODE	1496:25	1496:25	3	,
PARAMETER_DECL	1496:27	1496:34	3	uint16 tag
TYPE	1496:27	1496:27	4	uint16
TYPE_NAME	1496:27	1496:27	5	uint16
LEAF_NODE	1496:27	1496:27	6	uint16
NAME	1496:34	1496:34	4	tag
LEAF_NODE	1496:34	1496:34	5	tag
LEAF_NODE	1496:37	1496:37	3	,
PARAMETER_DECL	1496:39	1496:46	3	uint16 count
TYPE	1496:39	1496:39	4	uint16
TYPE_NAME	1496:39	1496:39	5	uint16
LEAF_NODE	1496:39	1496:39	6	uint16
NAME	1496:46	1496:46	4	count
LEAF_NODE	1496:46	1496:46	5	count
LEAF_NODE	1496:51	1496:51	3	,
PARAMETER_DECL	1496:53	1496:66	3	TIFFDataType type
TYPE	1496:53	1496:53	4	TIFFDataType
TYPE_NAME	1496:53	1496:53	5	TIFFDataType
LEAF_NODE	1496:53	1496:53	6	TIFFDataType
NAME	1496:66	1496:66	4	type
LEAF_NODE	1496:66	1496:66	5	type
LEAF_NODE	1496:70	1496:70	3	)
LEAF_NODE	1497:0	1497:0	2	{
STATEMENTS	1498:1	1498:1	2	
SELECTION	1498:1	1498:15	3	
KEYWORD	1498:1	1498:1	4	switch
LEAF_NODE	1498:1	1498:1	5	switch
LEAF_NODE	1498:8	1498:8	4	(
CONDITION	1498:9	1498:9	4	type
EXPR	1498:9	1498:9	5	type
FIELD	1498:9	1498:9	6	type
LEAF_NODE	1498:9	1498:9	7	type
LEAF_NODE	1498:13	1498:13	4	)
STATEMENTS	1498:15	1547:1	4	
LEAF_NODE	1498:15	1498:15	5	{
STATEMENTS	1499:1	1544:16	5	
LABEL	1499:1	1499:16	6	case TIFF_SHORT :
LEAF_NODE	1499:1	1499:1	7	case
LEAF_NODE	1499:6	1499:6	7	TIFF_SHORT
LEAF_NODE	1499:16	1499:16	7	:
SELECTION	1500:2	1500:18	6	
KEYWORD	1500:2	1500:2	7	if
LEAF_NODE	1500:2	1500:2	8	if
LEAF_NODE	1500:5	1500:5	7	(
CONDITION	1500:6	1500:6	7	count == 1
EXPR	1500:6	1500:15	8	count == 1
FIELD	1500:6	1500:6	9	count
LEAF_NODE	1500:6	1500:6	10	count
EQ_OPERATOR	1500:12	1500:12	9	==
LEAF_NODE	1500:12	1500:12	10	==
FIELD	1500:15	1500:15	9	1
LEAF_NODE	1500:15	1500:15	10	1
LEAF_NODE	1500:16	1500:16	7	)
STATEMENTS	1500:18	1503:2	7	
LEAF_NODE	1500:18	1500:18	8	{
STATEMENTS	1501:3	1502:3	8	
SIMPLE_DECL	1501:3	1501:16	9	uint16 shortv ;
VAR_DECL	1501:3	1501:10	10	uint16 shortv
TYPE	1501:3	1501:3	11	uint16
TYPE_NAME	1501:3	1501:3	12	uint16
LEAF_NODE	1501:3	1501:3	13	uint16
NAME	1501:10	1501:10	11	shortv
LEAF_NODE	1501:10	1501:10	12	shortv
LEAF_NODE	1501:16	1501:16	10	;
EXPR_STATEMENT	1502:3	1502:25	9	CopyField ( tag , shortv ) ;
EXPR	1502:3	1502:3	10	CopyField ( tag , shortv )
FUNCTION_CALL	1502:3	1502:24	11	CopyField ( tag , shortv )
CALLEE	1502:3	1502:3	12	CopyField
LEAF_NODE	1502:3	1502:3	13	CopyField
LEAF_NODE	1502:12	1502:12	12	(
ARGUMENT	1502:13	1502:13	12	tag
FIELD	1502:13	1502:13	13	tag
LEAF_NODE	1502:13	1502:13	14	tag
LEAF_NODE	1502:16	1502:16	12	,
ARGUMENT	1502:18	1502:18	12	shortv
FIELD	1502:18	1502:18	13	shortv
LEAF_NODE	1502:18	1502:18	14	shortv
LEAF_NODE	1502:24	1502:24	12	)
LEAF_NODE	1502:25	1502:25	10	;
LEAF_NODE	1503:2	1503:2	8	}
SELECTION	1503:4	1503:9	6	
KEYWORD	1503:4	1503:4	7	else
LEAF_NODE	1503:4	1503:4	8	else
STATEMENTS	1503:9	1503:9	7	
SELECTION	1503:9	1503:25	8	
KEYWORD	1503:9	1503:9	9	if
LEAF_NODE	1503:9	1503:9	10	if
LEAF_NODE	1503:12	1503:12	9	(
CONDITION	1503:13	1503:13	9	count == 2
EXPR	1503:13	1503:22	10	count == 2
FIELD	1503:13	1503:13	11	count
LEAF_NODE	1503:13	1503:13	12	count
EQ_OPERATOR	1503:19	1503:19	11	==
LEAF_NODE	1503:19	1503:19	12	==
FIELD	1503:22	1503:22	11	2
LEAF_NODE	1503:22	1503:22	12	2
LEAF_NODE	1503:23	1503:23	9	)
STATEMENTS	1503:25	1506:2	9	
LEAF_NODE	1503:25	1503:25	10	{
STATEMENTS	1504:3	1505:3	10	
SIMPLE_DECL	1504:3	1504:26	11	uint16 shortv1 , uint16 shortv2 ;
INIT_DECL_LIST	1504:3	1504:3	12	uint16 shortv1 , uint16 shortv2
VAR_DECL	1504:3	1504:10	13	uint16 shortv1
TYPE	1504:3	1504:3	14	uint16
TYPE_NAME	1504:3	1504:3	15	uint16
LEAF_NODE	1504:3	1504:3	16	uint16
NAME	1504:10	1504:10	14	shortv1
LEAF_NODE	1504:10	1504:10	15	shortv1
LEAF_NODE	1504:17	1504:17	13	,
VAR_DECL	1504:3	1504:19	13	uint16 shortv2
TYPE	1504:3	1504:3	14	uint16
TYPE_NAME	1504:3	1504:3	15	uint16
LEAF_NODE	1504:3	1504:3	16	uint16
NAME	1504:19	1504:19	14	shortv2
LEAF_NODE	1504:19	1504:19	15	shortv2
LEAF_NODE	1504:26	1504:26	12	;
EXPR_STATEMENT	1505:3	1505:36	11	CopyField2 ( tag , shortv1 , shortv2 ) ;
EXPR	1505:3	1505:3	12	CopyField2 ( tag , shortv1 , shortv2 )
FUNCTION_CALL	1505:3	1505:35	13	CopyField2 ( tag , shortv1 , shortv2 )
CALLEE	1505:3	1505:3	14	CopyField2
LEAF_NODE	1505:3	1505:3	15	CopyField2
LEAF_NODE	1505:13	1505:13	14	(
ARGUMENT	1505:14	1505:14	14	tag
FIELD	1505:14	1505:14	15	tag
LEAF_NODE	1505:14	1505:14	16	tag
LEAF_NODE	1505:17	1505:17	14	,
ARGUMENT	1505:19	1505:19	14	shortv1
FIELD	1505:19	1505:19	15	shortv1
LEAF_NODE	1505:19	1505:19	16	shortv1
LEAF_NODE	1505:26	1505:26	14	,
ARGUMENT	1505:28	1505:28	14	shortv2
FIELD	1505:28	1505:28	15	shortv2
LEAF_NODE	1505:28	1505:28	16	shortv2
LEAF_NODE	1505:35	1505:35	14	)
LEAF_NODE	1505:36	1505:36	12	;
LEAF_NODE	1506:2	1506:2	10	}
SELECTION	1506:4	1506:9	6	
KEYWORD	1506:4	1506:4	7	else
LEAF_NODE	1506:4	1506:4	8	else
STATEMENTS	1506:9	1506:9	7	
SELECTION	1506:9	1506:25	8	
KEYWORD	1506:9	1506:9	9	if
LEAF_NODE	1506:9	1506:9	10	if
LEAF_NODE	1506:12	1506:12	9	(
CONDITION	1506:13	1506:13	9	count == 4
EXPR	1506:13	1506:22	10	count == 4
FIELD	1506:13	1506:13	11	count
LEAF_NODE	1506:13	1506:13	12	count
EQ_OPERATOR	1506:19	1506:19	11	==
LEAF_NODE	1506:19	1506:19	12	==
FIELD	1506:22	1506:22	11	4
LEAF_NODE	1506:22	1506:22	12	4
LEAF_NODE	1506:23	1506:23	9	)
STATEMENTS	1506:25	1509:2	9	
LEAF_NODE	1506:25	1506:25	10	{
STATEMENTS	1507:3	1508:3	10	
SIMPLE_DECL	1507:3	1507:28	11	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta ;
INIT_DECL_LIST	1507:3	1507:3	12	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	1507:3	1507:11	13	uint16 * tr
TYPE	1507:3	1507:10	14	uint16 *
TYPE_NAME	1507:3	1507:3	15	uint16
LEAF_NODE	1507:3	1507:3	16	uint16
POINTER	1507:10	1507:10	15	*
LEAF_NODE	1507:10	1507:10	16	*
NAME	1507:11	1507:11	14	tr
LEAF_NODE	1507:11	1507:11	15	tr
LEAF_NODE	1507:13	1507:13	13	,
INIT_DECL_LIST	1507:3	1507:3	13	uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	1507:3	1507:16	14	uint16 * tg
TYPE	1507:3	1507:15	15	uint16 *
TYPE_NAME	1507:3	1507:3	16	uint16
LEAF_NODE	1507:3	1507:3	17	uint16
POINTER	1507:15	1507:15	16	*
LEAF_NODE	1507:15	1507:15	17	*
NAME	1507:16	1507:16	15	tg
LEAF_NODE	1507:16	1507:16	16	tg
LEAF_NODE	1507:18	1507:18	14	,
INIT_DECL_LIST	1507:3	1507:3	14	uint16 * tb , uint16 * ta
VAR_DECL	1507:3	1507:21	15	uint16 * tb
TYPE	1507:3	1507:20	16	uint16 *
TYPE_NAME	1507:3	1507:3	17	uint16
LEAF_NODE	1507:3	1507:3	18	uint16
POINTER	1507:20	1507:20	17	*
LEAF_NODE	1507:20	1507:20	18	*
NAME	1507:21	1507:21	16	tb
LEAF_NODE	1507:21	1507:21	17	tb
LEAF_NODE	1507:23	1507:23	15	,
VAR_DECL	1507:3	1507:26	15	uint16 * ta
TYPE	1507:3	1507:25	16	uint16 *
TYPE_NAME	1507:3	1507:3	17	uint16
LEAF_NODE	1507:3	1507:3	18	uint16
POINTER	1507:25	1507:25	17	*
LEAF_NODE	1507:25	1507:25	18	*
NAME	1507:26	1507:26	16	ta
LEAF_NODE	1507:26	1507:26	17	ta
LEAF_NODE	1507:28	1507:28	12	;
EXPR_STATEMENT	1508:3	1508:34	11	CopyField4 ( tag , tr , tg , tb , ta ) ;
EXPR	1508:3	1508:3	12	CopyField4 ( tag , tr , tg , tb , ta )
FUNCTION_CALL	1508:3	1508:33	13	CopyField4 ( tag , tr , tg , tb , ta )
CALLEE	1508:3	1508:3	14	CopyField4
LEAF_NODE	1508:3	1508:3	15	CopyField4
LEAF_NODE	1508:13	1508:13	14	(
ARGUMENT	1508:14	1508:14	14	tag
FIELD	1508:14	1508:14	15	tag
LEAF_NODE	1508:14	1508:14	16	tag
LEAF_NODE	1508:17	1508:17	14	,
ARGUMENT	1508:19	1508:19	14	tr
FIELD	1508:19	1508:19	15	tr
LEAF_NODE	1508:19	1508:19	16	tr
LEAF_NODE	1508:21	1508:21	14	,
ARGUMENT	1508:23	1508:23	14	tg
FIELD	1508:23	1508:23	15	tg
LEAF_NODE	1508:23	1508:23	16	tg
LEAF_NODE	1508:25	1508:25	14	,
ARGUMENT	1508:27	1508:27	14	tb
FIELD	1508:27	1508:27	15	tb
LEAF_NODE	1508:27	1508:27	16	tb
LEAF_NODE	1508:29	1508:29	14	,
ARGUMENT	1508:31	1508:31	14	ta
FIELD	1508:31	1508:31	15	ta
LEAF_NODE	1508:31	1508:31	16	ta
LEAF_NODE	1508:33	1508:33	14	)
LEAF_NODE	1508:34	1508:34	12	;
LEAF_NODE	1509:2	1509:2	10	}
SELECTION	1509:4	1509:9	6	
KEYWORD	1509:4	1509:4	7	else
LEAF_NODE	1509:4	1509:4	8	else
STATEMENTS	1509:9	1509:9	7	
SELECTION	1509:9	1509:35	8	
KEYWORD	1509:9	1509:9	9	if
LEAF_NODE	1509:9	1509:9	10	if
LEAF_NODE	1509:12	1509:12	9	(
CONDITION	1509:13	1509:13	9	count == ( uint16 ) - 1
EXPR	1509:13	1509:31	10	count == ( uint16 ) - 1
FIELD	1509:13	1509:13	11	count
LEAF_NODE	1509:13	1509:13	12	count
EQ_OPERATOR	1509:19	1509:19	11	==
LEAF_NODE	1509:19	1509:19	12	==
LEAF_NODE	1509:22	1509:22	11	(
TYPE_NAME	1509:23	1509:23	11	uint16
LEAF_NODE	1509:23	1509:23	12	uint16
LEAF_NODE	1509:29	1509:29	11	)
UNARY_EXPR	1509:31	1509:32	11	- 1
UNARY_OPERATOR	1509:31	1509:31	12	-
LEAF_NODE	1509:31	1509:31	13	-
FIELD	1509:32	1509:32	12	1
LEAF_NODE	1509:32	1509:32	13	1
LEAF_NODE	1509:33	1509:33	9	)
STATEMENTS	1509:35	1513:2	9	
LEAF_NODE	1509:35	1509:35	10	{
STATEMENTS	1510:3	1512:3	10	
SIMPLE_DECL	1510:3	1510:17	11	uint16 shortv1 ;
VAR_DECL	1510:3	1510:10	12	uint16 shortv1
TYPE	1510:3	1510:3	13	uint16
TYPE_NAME	1510:3	1510:3	14	uint16
LEAF_NODE	1510:3	1510:3	15	uint16
NAME	1510:10	1510:10	13	shortv1
LEAF_NODE	1510:10	1510:10	14	shortv1
LEAF_NODE	1510:17	1510:17	12	;
SIMPLE_DECL	1511:3	1511:18	11	uint16 * shortav ;
VAR_DECL	1511:3	1511:11	12	uint16 * shortav
TYPE	1511:3	1511:9	13	uint16 *
TYPE_NAME	1511:3	1511:3	14	uint16
LEAF_NODE	1511:3	1511:3	15	uint16
POINTER	1511:9	1511:9	14	*
LEAF_NODE	1511:9	1511:9	15	*
NAME	1511:11	1511:11	13	shortav
LEAF_NODE	1511:11	1511:11	14	shortav
LEAF_NODE	1511:18	1511:18	12	;
EXPR_STATEMENT	1512:3	1512:36	11	CopyField2 ( tag , shortv1 , shortav ) ;
EXPR	1512:3	1512:3	12	CopyField2 ( tag , shortv1 , shortav )
FUNCTION_CALL	1512:3	1512:35	13	CopyField2 ( tag , shortv1 , shortav )
CALLEE	1512:3	1512:3	14	CopyField2
LEAF_NODE	1512:3	1512:3	15	CopyField2
LEAF_NODE	1512:13	1512:13	14	(
ARGUMENT	1512:14	1512:14	14	tag
FIELD	1512:14	1512:14	15	tag
LEAF_NODE	1512:14	1512:14	16	tag
LEAF_NODE	1512:17	1512:17	14	,
ARGUMENT	1512:19	1512:19	14	shortv1
FIELD	1512:19	1512:19	15	shortv1
LEAF_NODE	1512:19	1512:19	16	shortv1
LEAF_NODE	1512:26	1512:26	14	,
ARGUMENT	1512:28	1512:28	14	shortav
FIELD	1512:28	1512:28	15	shortav
LEAF_NODE	1512:28	1512:28	16	shortav
LEAF_NODE	1512:35	1512:35	14	)
LEAF_NODE	1512:36	1512:36	12	;
LEAF_NODE	1513:2	1513:2	10	}
JUMP_STATEMENT	1514:2	1514:7	6	break DESTINATION ;
KEYWORD	1514:2	1514:2	7	break
LEAF_NODE	1514:2	1514:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1514:7	1514:7	7	;
LABEL	1515:1	1515:15	6	case TIFF_LONG :
LEAF_NODE	1515:1	1515:1	7	case
LEAF_NODE	1515:6	1515:6	7	TIFF_LONG
LEAF_NODE	1515:15	1515:15	7	:
LEAF_NODE	1516:2	1516:2	6	{
STATEMENTS	1516:4	1517:4	6	
SIMPLE_DECL	1516:4	1516:16	7	uint32 longv ;
VAR_DECL	1516:4	1516:11	8	uint32 longv
TYPE	1516:4	1516:4	9	uint32
TYPE_NAME	1516:4	1516:4	10	uint32
LEAF_NODE	1516:4	1516:4	11	uint32
NAME	1516:11	1516:11	9	longv
LEAF_NODE	1516:11	1516:11	10	longv
LEAF_NODE	1516:16	1516:16	8	;
EXPR_STATEMENT	1517:4	1517:25	7	CopyField ( tag , longv ) ;
EXPR	1517:4	1517:4	8	CopyField ( tag , longv )
FUNCTION_CALL	1517:4	1517:24	9	CopyField ( tag , longv )
CALLEE	1517:4	1517:4	10	CopyField
LEAF_NODE	1517:4	1517:4	11	CopyField
LEAF_NODE	1517:13	1517:13	10	(
ARGUMENT	1517:14	1517:14	10	tag
FIELD	1517:14	1517:14	11	tag
LEAF_NODE	1517:14	1517:14	12	tag
LEAF_NODE	1517:17	1517:17	10	,
ARGUMENT	1517:19	1517:19	10	longv
FIELD	1517:19	1517:19	11	longv
LEAF_NODE	1517:19	1517:19	12	longv
LEAF_NODE	1517:24	1517:24	10	)
LEAF_NODE	1517:25	1517:25	8	;
LEAF_NODE	1518:2	1518:2	6	}
JUMP_STATEMENT	1519:2	1519:7	6	break DESTINATION ;
KEYWORD	1519:2	1519:2	7	break
LEAF_NODE	1519:2	1519:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1519:7	1519:7	7	;
LABEL	1520:1	1520:19	6	case TIFF_RATIONAL :
LEAF_NODE	1520:1	1520:1	7	case
LEAF_NODE	1520:6	1520:6	7	TIFF_RATIONAL
LEAF_NODE	1520:19	1520:19	7	:
SELECTION	1521:2	1521:18	6	
KEYWORD	1521:2	1521:2	7	if
LEAF_NODE	1521:2	1521:2	8	if
LEAF_NODE	1521:5	1521:5	7	(
CONDITION	1521:6	1521:6	7	count == 1
EXPR	1521:6	1521:15	8	count == 1
FIELD	1521:6	1521:6	9	count
LEAF_NODE	1521:6	1521:6	10	count
EQ_OPERATOR	1521:12	1521:12	9	==
LEAF_NODE	1521:12	1521:12	10	==
FIELD	1521:15	1521:15	9	1
LEAF_NODE	1521:15	1521:15	10	1
LEAF_NODE	1521:16	1521:16	7	)
STATEMENTS	1521:18	1524:2	7	
LEAF_NODE	1521:18	1521:18	8	{
STATEMENTS	1522:3	1523:3	8	
SIMPLE_DECL	1522:3	1522:15	9	float floatv ;
VAR_DECL	1522:3	1522:9	10	float floatv
TYPE	1522:3	1522:3	11	float
TYPE_NAME	1522:3	1522:3	12	float
LEAF_NODE	1522:3	1522:3	13	float
NAME	1522:9	1522:9	11	floatv
LEAF_NODE	1522:9	1522:9	12	floatv
LEAF_NODE	1522:15	1522:15	10	;
EXPR_STATEMENT	1523:3	1523:25	9	CopyField ( tag , floatv ) ;
EXPR	1523:3	1523:3	10	CopyField ( tag , floatv )
FUNCTION_CALL	1523:3	1523:24	11	CopyField ( tag , floatv )
CALLEE	1523:3	1523:3	12	CopyField
LEAF_NODE	1523:3	1523:3	13	CopyField
LEAF_NODE	1523:12	1523:12	12	(
ARGUMENT	1523:13	1523:13	12	tag
FIELD	1523:13	1523:13	13	tag
LEAF_NODE	1523:13	1523:13	14	tag
LEAF_NODE	1523:16	1523:16	12	,
ARGUMENT	1523:18	1523:18	12	floatv
FIELD	1523:18	1523:18	13	floatv
LEAF_NODE	1523:18	1523:18	14	floatv
LEAF_NODE	1523:24	1523:24	12	)
LEAF_NODE	1523:25	1523:25	10	;
LEAF_NODE	1524:2	1524:2	8	}
SELECTION	1524:4	1524:9	6	
KEYWORD	1524:4	1524:4	7	else
LEAF_NODE	1524:4	1524:4	8	else
STATEMENTS	1524:9	1524:9	7	
SELECTION	1524:9	1524:35	8	
KEYWORD	1524:9	1524:9	9	if
LEAF_NODE	1524:9	1524:9	10	if
LEAF_NODE	1524:12	1524:12	9	(
CONDITION	1524:13	1524:13	9	count == ( uint16 ) - 1
EXPR	1524:13	1524:31	10	count == ( uint16 ) - 1
FIELD	1524:13	1524:13	11	count
LEAF_NODE	1524:13	1524:13	12	count
EQ_OPERATOR	1524:19	1524:19	11	==
LEAF_NODE	1524:19	1524:19	12	==
LEAF_NODE	1524:22	1524:22	11	(
TYPE_NAME	1524:23	1524:23	11	uint16
LEAF_NODE	1524:23	1524:23	12	uint16
LEAF_NODE	1524:29	1524:29	11	)
UNARY_EXPR	1524:31	1524:32	11	- 1
UNARY_OPERATOR	1524:31	1524:31	12	-
LEAF_NODE	1524:31	1524:31	13	-
FIELD	1524:32	1524:32	12	1
LEAF_NODE	1524:32	1524:32	13	1
LEAF_NODE	1524:33	1524:33	9	)
STATEMENTS	1524:35	1527:2	9	
LEAF_NODE	1524:35	1524:35	10	{
STATEMENTS	1525:3	1526:3	10	
SIMPLE_DECL	1525:3	1525:17	11	float * floatav ;
VAR_DECL	1525:3	1525:10	12	float * floatav
TYPE	1525:3	1525:8	13	float *
TYPE_NAME	1525:3	1525:3	14	float
LEAF_NODE	1525:3	1525:3	15	float
POINTER	1525:8	1525:8	14	*
LEAF_NODE	1525:8	1525:8	15	*
NAME	1525:10	1525:10	13	floatav
LEAF_NODE	1525:10	1525:10	14	floatav
LEAF_NODE	1525:17	1525:17	12	;
EXPR_STATEMENT	1526:3	1526:26	11	CopyField ( tag , floatav ) ;
EXPR	1526:3	1526:3	12	CopyField ( tag , floatav )
FUNCTION_CALL	1526:3	1526:25	13	CopyField ( tag , floatav )
CALLEE	1526:3	1526:3	14	CopyField
LEAF_NODE	1526:3	1526:3	15	CopyField
LEAF_NODE	1526:12	1526:12	14	(
ARGUMENT	1526:13	1526:13	14	tag
FIELD	1526:13	1526:13	15	tag
LEAF_NODE	1526:13	1526:13	16	tag
LEAF_NODE	1526:16	1526:16	14	,
ARGUMENT	1526:18	1526:18	14	floatav
FIELD	1526:18	1526:18	15	floatav
LEAF_NODE	1526:18	1526:18	16	floatav
LEAF_NODE	1526:25	1526:25	14	)
LEAF_NODE	1526:26	1526:26	12	;
LEAF_NODE	1527:2	1527:2	10	}
JUMP_STATEMENT	1528:2	1528:7	6	break DESTINATION ;
KEYWORD	1528:2	1528:2	7	break
LEAF_NODE	1528:2	1528:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1528:7	1528:7	7	;
LABEL	1529:1	1529:16	6	case TIFF_ASCII :
LEAF_NODE	1529:1	1529:1	7	case
LEAF_NODE	1529:6	1529:6	7	TIFF_ASCII
LEAF_NODE	1529:16	1529:16	7	:
LEAF_NODE	1530:2	1530:2	6	{
STATEMENTS	1530:4	1531:4	6	
SIMPLE_DECL	1530:4	1530:17	7	char * stringv ;
VAR_DECL	1530:4	1530:10	8	char * stringv
TYPE	1530:4	1530:8	9	char *
TYPE_NAME	1530:4	1530:4	10	char
LEAF_NODE	1530:4	1530:4	11	char
POINTER	1530:8	1530:8	10	*
LEAF_NODE	1530:8	1530:8	11	*
NAME	1530:10	1530:10	9	stringv
LEAF_NODE	1530:10	1530:10	10	stringv
LEAF_NODE	1530:17	1530:17	8	;
EXPR_STATEMENT	1531:4	1531:27	7	CopyField ( tag , stringv ) ;
EXPR	1531:4	1531:4	8	CopyField ( tag , stringv )
FUNCTION_CALL	1531:4	1531:26	9	CopyField ( tag , stringv )
CALLEE	1531:4	1531:4	10	CopyField
LEAF_NODE	1531:4	1531:4	11	CopyField
LEAF_NODE	1531:13	1531:13	10	(
ARGUMENT	1531:14	1531:14	10	tag
FIELD	1531:14	1531:14	11	tag
LEAF_NODE	1531:14	1531:14	12	tag
LEAF_NODE	1531:17	1531:17	10	,
ARGUMENT	1531:19	1531:19	10	stringv
FIELD	1531:19	1531:19	11	stringv
LEAF_NODE	1531:19	1531:19	12	stringv
LEAF_NODE	1531:26	1531:26	10	)
LEAF_NODE	1531:27	1531:27	8	;
LEAF_NODE	1532:2	1532:2	6	}
JUMP_STATEMENT	1533:2	1533:7	6	break DESTINATION ;
KEYWORD	1533:2	1533:2	7	break
LEAF_NODE	1533:2	1533:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1533:7	1533:7	7	;
LABEL	1534:1	1534:17	6	case TIFF_DOUBLE :
LEAF_NODE	1534:1	1534:1	7	case
LEAF_NODE	1534:6	1534:6	7	TIFF_DOUBLE
LEAF_NODE	1534:17	1534:17	7	:
SELECTION	1535:2	1535:18	6	
KEYWORD	1535:2	1535:2	7	if
LEAF_NODE	1535:2	1535:2	8	if
LEAF_NODE	1535:5	1535:5	7	(
CONDITION	1535:6	1535:6	7	count == 1
EXPR	1535:6	1535:15	8	count == 1
FIELD	1535:6	1535:6	9	count
LEAF_NODE	1535:6	1535:6	10	count
EQ_OPERATOR	1535:12	1535:12	9	==
LEAF_NODE	1535:12	1535:12	10	==
FIELD	1535:15	1535:15	9	1
LEAF_NODE	1535:15	1535:15	10	1
LEAF_NODE	1535:16	1535:16	7	)
STATEMENTS	1535:18	1538:2	7	
LEAF_NODE	1535:18	1535:18	8	{
STATEMENTS	1536:3	1537:3	8	
SIMPLE_DECL	1536:3	1536:17	9	double doublev ;
VAR_DECL	1536:3	1536:10	10	double doublev
TYPE	1536:3	1536:3	11	double
TYPE_NAME	1536:3	1536:3	12	double
LEAF_NODE	1536:3	1536:3	13	double
NAME	1536:10	1536:10	11	doublev
LEAF_NODE	1536:10	1536:10	12	doublev
LEAF_NODE	1536:17	1536:17	10	;
EXPR_STATEMENT	1537:3	1537:26	9	CopyField ( tag , doublev ) ;
EXPR	1537:3	1537:3	10	CopyField ( tag , doublev )
FUNCTION_CALL	1537:3	1537:25	11	CopyField ( tag , doublev )
CALLEE	1537:3	1537:3	12	CopyField
LEAF_NODE	1537:3	1537:3	13	CopyField
LEAF_NODE	1537:12	1537:12	12	(
ARGUMENT	1537:13	1537:13	12	tag
FIELD	1537:13	1537:13	13	tag
LEAF_NODE	1537:13	1537:13	14	tag
LEAF_NODE	1537:16	1537:16	12	,
ARGUMENT	1537:18	1537:18	12	doublev
FIELD	1537:18	1537:18	13	doublev
LEAF_NODE	1537:18	1537:18	14	doublev
LEAF_NODE	1537:25	1537:25	12	)
LEAF_NODE	1537:26	1537:26	10	;
LEAF_NODE	1538:2	1538:2	8	}
SELECTION	1538:4	1538:9	6	
KEYWORD	1538:4	1538:4	7	else
LEAF_NODE	1538:4	1538:4	8	else
STATEMENTS	1538:9	1538:9	7	
SELECTION	1538:9	1538:35	8	
KEYWORD	1538:9	1538:9	9	if
LEAF_NODE	1538:9	1538:9	10	if
LEAF_NODE	1538:12	1538:12	9	(
CONDITION	1538:13	1538:13	9	count == ( uint16 ) - 1
EXPR	1538:13	1538:31	10	count == ( uint16 ) - 1
FIELD	1538:13	1538:13	11	count
LEAF_NODE	1538:13	1538:13	12	count
EQ_OPERATOR	1538:19	1538:19	11	==
LEAF_NODE	1538:19	1538:19	12	==
LEAF_NODE	1538:22	1538:22	11	(
TYPE_NAME	1538:23	1538:23	11	uint16
LEAF_NODE	1538:23	1538:23	12	uint16
LEAF_NODE	1538:29	1538:29	11	)
UNARY_EXPR	1538:31	1538:32	11	- 1
UNARY_OPERATOR	1538:31	1538:31	12	-
LEAF_NODE	1538:31	1538:31	13	-
FIELD	1538:32	1538:32	12	1
LEAF_NODE	1538:32	1538:32	13	1
LEAF_NODE	1538:33	1538:33	9	)
STATEMENTS	1538:35	1541:2	9	
LEAF_NODE	1538:35	1538:35	10	{
STATEMENTS	1539:3	1540:3	10	
SIMPLE_DECL	1539:3	1539:19	11	double * doubleav ;
VAR_DECL	1539:3	1539:11	12	double * doubleav
TYPE	1539:3	1539:9	13	double *
TYPE_NAME	1539:3	1539:3	14	double
LEAF_NODE	1539:3	1539:3	15	double
POINTER	1539:9	1539:9	14	*
LEAF_NODE	1539:9	1539:9	15	*
NAME	1539:11	1539:11	13	doubleav
LEAF_NODE	1539:11	1539:11	14	doubleav
LEAF_NODE	1539:19	1539:19	12	;
EXPR_STATEMENT	1540:3	1540:27	11	CopyField ( tag , doubleav ) ;
EXPR	1540:3	1540:3	12	CopyField ( tag , doubleav )
FUNCTION_CALL	1540:3	1540:26	13	CopyField ( tag , doubleav )
CALLEE	1540:3	1540:3	14	CopyField
LEAF_NODE	1540:3	1540:3	15	CopyField
LEAF_NODE	1540:12	1540:12	14	(
ARGUMENT	1540:13	1540:13	14	tag
FIELD	1540:13	1540:13	15	tag
LEAF_NODE	1540:13	1540:13	16	tag
LEAF_NODE	1540:16	1540:16	14	,
ARGUMENT	1540:18	1540:18	14	doubleav
FIELD	1540:18	1540:18	15	doubleav
LEAF_NODE	1540:18	1540:18	16	doubleav
LEAF_NODE	1540:26	1540:26	14	)
LEAF_NODE	1540:27	1540:27	12	;
LEAF_NODE	1541:2	1541:2	10	}
JUMP_STATEMENT	1542:2	1542:7	6	break DESTINATION ;
KEYWORD	1542:2	1542:2	7	break
LEAF_NODE	1542:2	1542:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1542:7	1542:7	7	;
LABEL	1543:10	1543:17	6	default :
LEAF_NODE	1543:10	1543:10	7	default
LEAF_NODE	1543:17	1543:17	7	:
EXPR_STATEMENT	1544:16	1546:36	6	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped" , tag , type ) ;
EXPR	1544:16	1544:16	7	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped" , tag , type )
FUNCTION_CALL	1544:16	1546:35	8	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped" , tag , type )
CALLEE	1544:16	1544:16	9	TIFFError
LEAF_NODE	1544:16	1544:16	10	TIFFError
LEAF_NODE	1544:25	1544:25	9	(
ARGUMENT	1544:26	1544:26	9	TIFFFileName ( in )
FUNCTION_CALL	1544:26	1544:41	10	TIFFFileName ( in )
CALLEE	1544:26	1544:26	11	TIFFFileName
LEAF_NODE	1544:26	1544:26	12	TIFFFileName
LEAF_NODE	1544:38	1544:38	11	(
ARGUMENT	1544:39	1544:39	11	in
FIELD	1544:39	1544:39	12	in
LEAF_NODE	1544:39	1544:39	13	in
LEAF_NODE	1544:41	1544:41	11	)
LEAF_NODE	1544:42	1544:42	9	,
ARGUMENT	1545:26	1545:26	9	"Data type %d is not supported, tag %d skipped"
FIELD	1545:26	1545:26	10	"Data type %d is not supported, tag %d skipped"
LEAF_NODE	1545:26	1545:26	11	"Data type %d is not supported, tag %d skipped"
LEAF_NODE	1545:73	1545:73	9	,
ARGUMENT	1546:26	1546:26	9	tag
FIELD	1546:26	1546:26	10	tag
LEAF_NODE	1546:26	1546:26	11	tag
LEAF_NODE	1546:29	1546:29	9	,
ARGUMENT	1546:31	1546:31	9	type
FIELD	1546:31	1546:31	10	type
LEAF_NODE	1546:31	1546:31	11	type
LEAF_NODE	1546:35	1546:35	9	)
LEAF_NODE	1546:36	1546:36	7	;
LEAF_NODE	1547:1	1547:1	5	}
LEAF_NODE	1548:0	1548:0	2	}
SIMPLE_DECL	1551:1	1551:11	1	uint16 tag ;
VAR_DECL	1551:1	1551:8	2	uint16 tag
TYPE	1551:1	1551:1	3	uint16
TYPE_NAME	1551:1	1551:1	4	uint16
LEAF_NODE	1551:1	1551:1	5	uint16
NAME	1551:8	1551:8	3	tag
LEAF_NODE	1551:8	1551:8	4	tag
LEAF_NODE	1551:11	1551:11	2	;
SIMPLE_DECL	1552:1	1552:13	1	uint16 count ;
VAR_DECL	1552:1	1552:8	2	uint16 count
TYPE	1552:1	1552:1	3	uint16
TYPE_NAME	1552:1	1552:1	4	uint16
LEAF_NODE	1552:1	1552:1	5	uint16
NAME	1552:8	1552:8	3	count
LEAF_NODE	1552:8	1552:8	4	count
LEAF_NODE	1552:13	1552:13	2	;
SIMPLE_DECL	1553:1	1553:18	1	TIFFDataType type ;
VAR_DECL	1553:1	1553:14	2	TIFFDataType type
TYPE	1553:1	1553:1	3	TIFFDataType
TYPE_NAME	1553:1	1553:1	4	TIFFDataType
LEAF_NODE	1553:1	1553:1	5	TIFFDataType
NAME	1553:14	1553:14	3	type
LEAF_NODE	1553:14	1553:14	4	type
LEAF_NODE	1553:18	1553:18	2	;
FUNCTION_DEF	1594:0	2100:2	1	
RETURN_TYPE	1594:0	1594:0	2	void
TYPE_NAME	1594:0	1594:0	3	void
LEAF_NODE	1594:0	1594:0	4	void
FUNCTION_NAME	1594:6	1594:6	2	process_command_opts
LEAF_NODE	1594:6	1594:6	3	process_command_opts
PARAMETER_LIST	1594:27	1599:85	2	( int argc , char * [ ] argv , char * mp , char * mode , uint32 * dirnum , uint16 * defconfig , uint16 * deffillorder , uint32 * deftilewidth , uint32 * deftilelength , uint32 * defrowsperstrip , struct crop_mask * crop_data , struct pagedef * page , struct dump_opts * dump , unsigned int * imagelist , unsigned int * image_count )
LEAF_NODE	1594:27	1594:27	3	(
PARAMETER_DECL	1594:28	1594:32	3	int argc
TYPE	1594:28	1594:28	4	int
TYPE_NAME	1594:28	1594:28	5	int
LEAF_NODE	1594:28	1594:28	6	int
NAME	1594:32	1594:32	4	argc
LEAF_NODE	1594:32	1594:32	5	argc
LEAF_NODE	1594:36	1594:36	3	,
PARAMETER_DECL	1594:38	1594:44	3	char * [ ] argv
TYPE	1594:38	1594:48	4	char * [ ]
TYPE_NAME	1594:38	1594:38	5	char
LEAF_NODE	1594:38	1594:38	6	char
POINTER	1594:43	1594:43	5	*
LEAF_NODE	1594:43	1594:43	6	*
TYPE_SUFFIX	1594:48	1594:49	5	[ ]
LEAF_NODE	1594:48	1594:48	6	[
LEAF_NODE	1594:49	1594:49	6	]
NAME	1594:44	1594:44	4	argv
LEAF_NODE	1594:44	1594:44	5	argv
LEAF_NODE	1594:50	1594:50	3	,
PARAMETER_DECL	1594:52	1594:58	3	char * mp
TYPE	1594:52	1594:57	4	char *
TYPE_NAME	1594:52	1594:52	5	char
LEAF_NODE	1594:52	1594:52	6	char
POINTER	1594:57	1594:57	5	*
LEAF_NODE	1594:57	1594:57	6	*
NAME	1594:58	1594:58	4	mp
LEAF_NODE	1594:58	1594:58	5	mp
LEAF_NODE	1594:60	1594:60	3	,
PARAMETER_DECL	1594:62	1594:68	3	char * mode
TYPE	1594:62	1594:67	4	char *
TYPE_NAME	1594:62	1594:62	5	char
LEAF_NODE	1594:62	1594:62	6	char
POINTER	1594:67	1594:67	5	*
LEAF_NODE	1594:67	1594:67	6	*
NAME	1594:68	1594:68	4	mode
LEAF_NODE	1594:68	1594:68	5	mode
LEAF_NODE	1594:72	1594:72	3	,
PARAMETER_DECL	1594:74	1594:82	3	uint32 * dirnum
TYPE	1594:74	1594:81	4	uint32 *
TYPE_NAME	1594:74	1594:74	5	uint32
LEAF_NODE	1594:74	1594:74	6	uint32
POINTER	1594:81	1594:81	5	*
LEAF_NODE	1594:81	1594:81	6	*
NAME	1594:82	1594:82	4	dirnum
LEAF_NODE	1594:82	1594:82	5	dirnum
LEAF_NODE	1594:88	1594:88	3	,
PARAMETER_DECL	1595:21	1595:29	3	uint16 * defconfig
TYPE	1595:21	1595:28	4	uint16 *
TYPE_NAME	1595:21	1595:21	5	uint16
LEAF_NODE	1595:21	1595:21	6	uint16
POINTER	1595:28	1595:28	5	*
LEAF_NODE	1595:28	1595:28	6	*
NAME	1595:29	1595:29	4	defconfig
LEAF_NODE	1595:29	1595:29	5	defconfig
LEAF_NODE	1595:38	1595:38	3	,
PARAMETER_DECL	1595:40	1595:48	3	uint16 * deffillorder
TYPE	1595:40	1595:47	4	uint16 *
TYPE_NAME	1595:40	1595:40	5	uint16
LEAF_NODE	1595:40	1595:40	6	uint16
POINTER	1595:47	1595:47	5	*
LEAF_NODE	1595:47	1595:47	6	*
NAME	1595:48	1595:48	4	deffillorder
LEAF_NODE	1595:48	1595:48	5	deffillorder
LEAF_NODE	1595:60	1595:60	3	,
PARAMETER_DECL	1595:62	1595:70	3	uint32 * deftilewidth
TYPE	1595:62	1595:69	4	uint32 *
TYPE_NAME	1595:62	1595:62	5	uint32
LEAF_NODE	1595:62	1595:62	6	uint32
POINTER	1595:69	1595:69	5	*
LEAF_NODE	1595:69	1595:69	6	*
NAME	1595:70	1595:70	4	deftilewidth
LEAF_NODE	1595:70	1595:70	5	deftilewidth
LEAF_NODE	1595:82	1595:82	3	,
PARAMETER_DECL	1596:28	1596:36	3	uint32 * deftilelength
TYPE	1596:28	1596:35	4	uint32 *
TYPE_NAME	1596:28	1596:28	5	uint32
LEAF_NODE	1596:28	1596:28	6	uint32
POINTER	1596:35	1596:35	5	*
LEAF_NODE	1596:35	1596:35	6	*
NAME	1596:36	1596:36	4	deftilelength
LEAF_NODE	1596:36	1596:36	5	deftilelength
LEAF_NODE	1596:49	1596:49	3	,
PARAMETER_DECL	1596:51	1596:59	3	uint32 * defrowsperstrip
TYPE	1596:51	1596:58	4	uint32 *
TYPE_NAME	1596:51	1596:51	5	uint32
LEAF_NODE	1596:51	1596:51	6	uint32
POINTER	1596:58	1596:58	5	*
LEAF_NODE	1596:58	1596:58	6	*
NAME	1596:59	1596:59	4	defrowsperstrip
LEAF_NODE	1596:59	1596:59	5	defrowsperstrip
LEAF_NODE	1596:74	1596:74	3	,
PARAMETER_DECL	1597:14	1597:32	3	struct crop_mask * crop_data
TYPE	1597:14	1597:31	4	struct crop_mask *
TYPE_NAME	1597:14	1597:21	5	struct crop_mask
LEAF_NODE	1597:14	1597:14	6	struct
LEAF_NODE	1597:21	1597:21	6	crop_mask
POINTER	1597:31	1597:31	5	*
LEAF_NODE	1597:31	1597:31	6	*
NAME	1597:32	1597:32	4	crop_data
LEAF_NODE	1597:32	1597:32	5	crop_data
LEAF_NODE	1597:41	1597:41	3	,
PARAMETER_DECL	1597:43	1597:59	3	struct pagedef * page
TYPE	1597:43	1597:58	4	struct pagedef *
TYPE_NAME	1597:43	1597:50	5	struct pagedef
LEAF_NODE	1597:43	1597:43	6	struct
LEAF_NODE	1597:50	1597:50	6	pagedef
POINTER	1597:58	1597:58	5	*
LEAF_NODE	1597:58	1597:58	6	*
NAME	1597:59	1597:59	4	page
LEAF_NODE	1597:59	1597:59	5	page
LEAF_NODE	1597:63	1597:63	3	,
PARAMETER_DECL	1598:28	1598:46	3	struct dump_opts * dump
TYPE	1598:28	1598:45	4	struct dump_opts *
TYPE_NAME	1598:28	1598:35	5	struct dump_opts
LEAF_NODE	1598:28	1598:28	6	struct
LEAF_NODE	1598:35	1598:35	6	dump_opts
POINTER	1598:45	1598:45	5	*
LEAF_NODE	1598:45	1598:45	6	*
NAME	1598:46	1598:46	4	dump
LEAF_NODE	1598:46	1598:46	5	dump
LEAF_NODE	1598:50	1598:50	3	,
PARAMETER_DECL	1599:28	1599:46	3	unsigned int * imagelist
TYPE	1599:28	1599:45	4	unsigned int *
TYPE_NAME	1599:28	1599:37	5	unsigned int
LEAF_NODE	1599:28	1599:28	6	unsigned
LEAF_NODE	1599:37	1599:37	6	int
POINTER	1599:45	1599:45	5	*
LEAF_NODE	1599:45	1599:45	6	*
NAME	1599:46	1599:46	4	imagelist
LEAF_NODE	1599:46	1599:46	5	imagelist
LEAF_NODE	1599:55	1599:55	3	,
PARAMETER_DECL	1599:57	1599:73	3	unsigned int * image_count
TYPE	1599:57	1599:72	4	unsigned int *
TYPE_NAME	1599:57	1599:66	5	unsigned int
LEAF_NODE	1599:57	1599:57	6	unsigned
LEAF_NODE	1599:66	1599:66	6	int
POINTER	1599:72	1599:72	5	*
LEAF_NODE	1599:72	1599:72	6	*
NAME	1599:73	1599:73	4	image_count
LEAF_NODE	1599:73	1599:73	5	image_count
LEAF_NODE	1599:85	1599:85	3	)
LEAF_NODE	1600:4	1600:4	2	{
STATEMENTS	1601:4	1613:4	2	
SIMPLE_DECL	1601:4	1601:26	3	int c , int good_args ; good_args = 0 ;
INIT_DECL_LIST	1601:4	1601:4	4	int c , int good_args ; good_args = 0
VAR_DECL	1601:4	1601:10	5	int c
TYPE	1601:4	1601:4	6	int
TYPE_NAME	1601:4	1601:4	7	int
LEAF_NODE	1601:4	1601:4	8	int
NAME	1601:10	1601:10	6	c
LEAF_NODE	1601:10	1601:10	7	c
LEAF_NODE	1601:11	1601:11	5	,
VAR_DECL	1601:4	1601:13	5	int good_args ; good_args = 0
TYPE	1601:4	1601:4	6	int
TYPE_NAME	1601:4	1601:4	7	int
LEAF_NODE	1601:4	1601:4	8	int
NAME	1601:13	1601:13	6	good_args
LEAF_NODE	1601:13	1601:13	7	good_args
LEAF_NODE	0:0	0:0	6	;
INIT	1601:13	1601:13	6	good_args = 0
ASSIGN	1601:13	1601:25	7	good_args = 0
LVAL	1601:13	1601:13	8	good_args
NAME	1601:13	1601:13	9	good_args
LEAF_NODE	1601:13	1601:13	10	good_args
ASSIGN_OP	1601:23	1601:23	8	=
LEAF_NODE	1601:23	1601:23	9	=
RVAL	1601:25	1601:25	8	0
FIELD	1601:25	1601:25	9	0
LEAF_NODE	1601:25	1601:25	10	0
LEAF_NODE	1601:26	1601:26	4	;
SIMPLE_DECL	1602:4	1602:29	3	char * opt_offset ; opt_offset = NULL ;
VAR_DECL	1602:4	1602:10	4	char * opt_offset ; opt_offset = NULL
TYPE	1602:4	1602:9	5	char *
TYPE_NAME	1602:4	1602:4	6	char
LEAF_NODE	1602:4	1602:4	7	char
POINTER	1602:9	1602:9	6	*
LEAF_NODE	1602:9	1602:9	7	*
NAME	1602:10	1602:10	5	opt_offset
LEAF_NODE	1602:10	1602:10	6	opt_offset
LEAF_NODE	0:0	0:0	5	;
INIT	1602:10	1602:10	5	opt_offset = NULL
ASSIGN	1602:10	1602:25	6	opt_offset = NULL
LVAL	1602:10	1602:10	7	opt_offset
NAME	1602:10	1602:10	8	opt_offset
LEAF_NODE	1602:10	1602:10	9	opt_offset
ASSIGN_OP	1602:23	1602:23	7	=
LEAF_NODE	1602:23	1602:23	8	=
RVAL	1602:25	1602:25	7	NULL
FIELD	1602:25	1602:25	8	NULL
LEAF_NODE	1602:25	1602:25	9	NULL
LEAF_NODE	1602:29	1602:29	4	;
SIMPLE_DECL	1603:4	1603:29	3	char * opt_ptr ; opt_ptr = NULL ;
VAR_DECL	1603:4	1603:10	4	char * opt_ptr ; opt_ptr = NULL
TYPE	1603:4	1603:9	5	char *
TYPE_NAME	1603:4	1603:4	6	char
LEAF_NODE	1603:4	1603:4	7	char
POINTER	1603:9	1603:9	6	*
LEAF_NODE	1603:9	1603:9	7	*
NAME	1603:10	1603:10	5	opt_ptr
LEAF_NODE	1603:10	1603:10	6	opt_ptr
LEAF_NODE	0:0	0:0	5	;
INIT	1603:10	1603:10	5	opt_ptr = NULL
ASSIGN	1603:10	1603:25	6	opt_ptr = NULL
LVAL	1603:10	1603:10	7	opt_ptr
NAME	1603:10	1603:10	8	opt_ptr
LEAF_NODE	1603:10	1603:10	9	opt_ptr
ASSIGN_OP	1603:23	1603:23	7	=
LEAF_NODE	1603:23	1603:23	8	=
RVAL	1603:25	1603:25	7	NULL
FIELD	1603:25	1603:25	8	NULL
LEAF_NODE	1603:25	1603:25	9	NULL
LEAF_NODE	1603:29	1603:29	4	;
SIMPLE_DECL	1604:4	1604:29	3	char * sep ; sep = NULL ;
VAR_DECL	1604:4	1604:10	4	char * sep ; sep = NULL
TYPE	1604:4	1604:9	5	char *
TYPE_NAME	1604:4	1604:4	6	char
LEAF_NODE	1604:4	1604:4	7	char
POINTER	1604:9	1604:9	6	*
LEAF_NODE	1604:9	1604:9	7	*
NAME	1604:10	1604:10	5	sep
LEAF_NODE	1604:10	1604:10	6	sep
LEAF_NODE	0:0	0:0	5	;
INIT	1604:10	1604:10	5	sep = NULL
ASSIGN	1604:10	1604:25	6	sep = NULL
LVAL	1604:10	1604:10	7	sep
NAME	1604:10	1604:10	8	sep
LEAF_NODE	1604:10	1604:10	9	sep
ASSIGN_OP	1604:23	1604:23	7	=
LEAF_NODE	1604:23	1604:23	8	=
RVAL	1604:25	1604:25	7	NULL
FIELD	1604:25	1604:25	8	NULL
LEAF_NODE	1604:25	1604:25	9	NULL
LEAF_NODE	1604:29	1604:29	4	;
SIMPLE_DECL	1605:4	1605:34	3	unsigned int i , unsigned int j , unsigned int start , unsigned int end ;
INIT_DECL_LIST	1605:4	1605:4	4	unsigned int i , unsigned int j , unsigned int start , unsigned int end
VAR_DECL	1605:4	1605:18	5	unsigned int i
TYPE	1605:4	1605:4	6	unsigned int
TYPE_NAME	1605:4	1605:13	7	unsigned int
LEAF_NODE	1605:4	1605:4	8	unsigned
LEAF_NODE	1605:13	1605:13	8	int
NAME	1605:18	1605:18	6	i
LEAF_NODE	1605:18	1605:18	7	i
LEAF_NODE	1605:19	1605:19	5	,
INIT_DECL_LIST	1605:4	1605:4	5	unsigned int j , unsigned int start , unsigned int end
VAR_DECL	1605:4	1605:21	6	unsigned int j
TYPE	1605:4	1605:4	7	unsigned int
TYPE_NAME	1605:4	1605:13	8	unsigned int
LEAF_NODE	1605:4	1605:4	9	unsigned
LEAF_NODE	1605:13	1605:13	9	int
NAME	1605:21	1605:21	7	j
LEAF_NODE	1605:21	1605:21	8	j
LEAF_NODE	1605:22	1605:22	6	,
INIT_DECL_LIST	1605:4	1605:4	6	unsigned int start , unsigned int end
VAR_DECL	1605:4	1605:24	7	unsigned int start
TYPE	1605:4	1605:4	8	unsigned int
TYPE_NAME	1605:4	1605:13	9	unsigned int
LEAF_NODE	1605:4	1605:4	10	unsigned
LEAF_NODE	1605:13	1605:13	10	int
NAME	1605:24	1605:24	8	start
LEAF_NODE	1605:24	1605:24	9	start
LEAF_NODE	1605:29	1605:29	7	,
VAR_DECL	1605:4	1605:31	7	unsigned int end
TYPE	1605:4	1605:4	8	unsigned int
TYPE_NAME	1605:4	1605:13	9	unsigned int
LEAF_NODE	1605:4	1605:4	10	unsigned
LEAF_NODE	1605:13	1605:13	10	int
NAME	1605:31	1605:31	8	end
LEAF_NODE	1605:31	1605:31	9	end
LEAF_NODE	1605:34	1605:34	4	;
LEAF_NODE	1607:4	1607:4	3	extern
SIMPLE_DECL	1607:11	1607:23	3	int optind ;
VAR_DECL	1607:11	1607:17	4	int optind
TYPE	1607:11	1607:11	5	int
TYPE_NAME	1607:11	1607:11	6	int
LEAF_NODE	1607:11	1607:11	7	int
NAME	1607:17	1607:17	5	optind
LEAF_NODE	1607:17	1607:17	6	optind
LEAF_NODE	1607:23	1607:23	4	;
LEAF_NODE	1608:4	1608:4	3	extern
SIMPLE_DECL	1608:11	1608:23	3	char * optarg ;
VAR_DECL	1608:11	1608:17	4	char * optarg
TYPE	1608:11	1608:15	5	char *
TYPE_NAME	1608:11	1608:11	6	char
LEAF_NODE	1608:11	1608:11	7	char
POINTER	1608:15	1608:15	6	*
LEAF_NODE	1608:15	1608:15	7	*
NAME	1608:17	1608:17	5	optarg
LEAF_NODE	1608:17	1608:17	6	optarg
LEAF_NODE	1608:23	1608:23	4	;
EXPR_STATEMENT	1611:4	1611:15	3	* mp ++ = 'w' ;
EXPR	1611:4	1611:4	4	* mp ++ = 'w'
ASSIGN	1611:4	1611:12	5	* mp ++ = 'w'
LVAL	1611:4	1611:4	6	* mp ++
UNARY_EXPR	1611:4	1611:5	7	* mp ++
UNARY_OPERATOR	1611:4	1611:4	8	*
LEAF_NODE	1611:4	1611:4	9	*
FIELD	1611:5	1611:7	8	mp ++
LEAF_NODE	1611:5	1611:5	9	mp
LEAF_NODE	1611:7	1611:7	9	++
ASSIGN_OP	1611:10	1611:10	6	=
LEAF_NODE	1611:10	1611:10	7	=
RVAL	1611:12	1611:12	6	'w'
FIELD	1611:12	1611:12	7	'w'
LEAF_NODE	1611:12	1611:12	8	'w'
LEAF_NODE	1611:15	1611:15	4	;
EXPR_STATEMENT	1612:4	1612:14	3	* mp = '\0' ;
EXPR	1612:4	1612:4	4	* mp = '\0'
ASSIGN	1612:4	1612:10	5	* mp = '\0'
LVAL	1612:4	1612:4	6	* mp
UNARY_EXPR	1612:4	1612:5	7	* mp
UNARY_OPERATOR	1612:4	1612:4	8	*
LEAF_NODE	1612:4	1612:4	9	*
FIELD	1612:5	1612:5	8	mp
LEAF_NODE	1612:5	1612:5	9	mp
ASSIGN_OP	1612:8	1612:8	6	=
LEAF_NODE	1612:8	1612:8	7	=
RVAL	1612:10	1612:10	6	'\0'
FIELD	1612:10	1612:10	7	'\0'
LEAF_NODE	1612:10	1612:10	8	'\0'
LEAF_NODE	1612:14	1612:14	4	;
ITERATION	1613:4	1615:6	3	
KEYWORD	1613:4	1613:4	4	while
LEAF_NODE	1613:4	1613:4	5	while
LEAF_NODE	1613:10	1613:10	4	(
CONDITION	1613:11	1613:11	4	( c = getopt ( argc , argv , "ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:" ) ) != - 1
EXPR	1613:11	1614:79	5	( c = getopt ( argc , argv , "ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:" ) ) != - 1
LEAF_NODE	1613:11	1613:11	6	(
ASSIGN	1613:12	1613:16	6	c = getopt ( argc , argv , "ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:" )
LVAL	1613:12	1613:12	7	c
FIELD	1613:12	1613:12	8	c
LEAF_NODE	1613:12	1613:12	9	c
ASSIGN_OP	1613:14	1613:14	7	=
LEAF_NODE	1613:14	1613:14	8	=
RVAL	1613:16	1613:16	7	getopt ( argc , argv , "ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:" )
FUNCTION_CALL	1613:16	1614:73	8	getopt ( argc , argv , "ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:" )
CALLEE	1613:16	1613:16	9	getopt
LEAF_NODE	1613:16	1613:16	10	getopt
LEAF_NODE	1613:22	1613:22	9	(
ARGUMENT	1613:23	1613:23	9	argc
FIELD	1613:23	1613:23	10	argc
LEAF_NODE	1613:23	1613:23	11	argc
LEAF_NODE	1613:27	1613:27	9	,
ARGUMENT	1613:29	1613:29	9	argv
FIELD	1613:29	1613:29	10	argv
LEAF_NODE	1613:29	1613:29	11	argv
LEAF_NODE	1613:33	1613:33	9	,
ARGUMENT	1614:7	1614:7	9	"ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:"
FIELD	1614:7	1614:7	10	"ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:"
LEAF_NODE	1614:7	1614:7	11	"ac:d:e:f:hil:m:p:r:stvw:z:BCD:E:F:H:I:J:K:LMN:O:P:R:S:U:V:X:Y:Z:"
LEAF_NODE	1614:73	1614:73	9	)
LEAF_NODE	1614:74	1614:74	6	)
EQ_OPERATOR	1614:76	1614:76	6	!=
LEAF_NODE	1614:76	1614:76	7	!=
UNARY_EXPR	1614:79	1614:80	6	- 1
UNARY_OPERATOR	1614:79	1614:79	7	-
LEAF_NODE	1614:79	1614:79	8	-
FIELD	1614:80	1614:80	7	1
LEAF_NODE	1614:80	1614:80	8	1
LEAF_NODE	1614:81	1614:81	4	)
STATEMENTS	1615:6	2099:4	4	
LEAF_NODE	1615:6	1615:6	5	{
STATEMENTS	1616:4	1617:4	5	
EXPR_STATEMENT	1616:4	1616:15	6	good_args ++ ;
EXPR	1616:4	1616:4	7	good_args ++
FIELD	1616:4	1616:13	8	good_args ++
LEAF_NODE	1616:4	1616:4	9	good_args
LEAF_NODE	1616:13	1616:13	9	++
LEAF_NODE	1616:15	1616:15	7	;
SELECTION	1617:4	1617:15	6	
KEYWORD	1617:4	1617:4	7	switch
LEAF_NODE	1617:4	1617:4	8	switch
LEAF_NODE	1617:11	1617:11	7	(
CONDITION	1617:12	1617:12	7	c
EXPR	1617:12	1617:12	8	c
FIELD	1617:12	1617:12	9	c
LEAF_NODE	1617:12	1617:12	10	c
LEAF_NODE	1617:13	1617:13	7	)
STATEMENTS	1617:15	2098:6	7	
LEAF_NODE	1617:15	1617:15	8	{
STATEMENTS	1618:6	2096:16	8	
LEAF_NODE	1618:6	1618:6	9	case
LEAF_NODE	1618:11	1618:11	9	'a'
LEAF_NODE	1618:14	1618:14	9	:
EXPR_STATEMENT	1618:16	1618:29	9	mode [ 0 ] = 'a' ;
EXPR	1618:16	1618:16	10	mode [ 0 ] = 'a'
ASSIGN	1618:16	1618:26	11	mode [ 0 ] = 'a'
LVAL	1618:16	1618:16	12	mode [ 0 ]
FIELD	1618:16	1618:22	13	mode [ 0 ]
LEAF_NODE	1618:16	1618:16	14	mode
LEAF_NODE	1618:20	1618:20	14	[
EXPR	1618:21	1618:21	14	0
FIELD	1618:21	1618:21	15	0
LEAF_NODE	1618:21	1618:21	16	0
LEAF_NODE	1618:22	1618:22	14	]
ASSIGN_OP	1618:24	1618:24	12	=
LEAF_NODE	1618:24	1618:24	13	=
RVAL	1618:26	1618:26	12	'a'
FIELD	1618:26	1618:26	13	'a'
LEAF_NODE	1618:26	1618:26	14	'a'
LEAF_NODE	1618:29	1618:29	10	;
JUMP_STATEMENT	1619:2	1619:7	9	break DESTINATION ;
KEYWORD	1619:2	1619:2	10	break
LEAF_NODE	1619:2	1619:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1619:7	1619:7	10	;
LEAF_NODE	1620:6	1620:6	9	case
LEAF_NODE	1620:11	1620:11	9	'c'
LEAF_NODE	1620:14	1620:14	9	:
SELECTION	1620:16	1621:4	9	
KEYWORD	1620:16	1620:16	10	if
LEAF_NODE	1620:16	1620:16	11	if
LEAF_NODE	1620:19	1620:19	10	(
CONDITION	1620:20	1620:20	10	! processCompressOptions ( optarg )
EXPR	1620:20	1620:20	11	! processCompressOptions ( optarg )
UNARY_EXPR	1620:20	1620:21	12	! processCompressOptions ( optarg )
UNARY_OPERATOR	1620:20	1620:20	13	!
LEAF_NODE	1620:20	1620:20	14	!
FUNCTION_CALL	1620:21	1620:50	13	processCompressOptions ( optarg )
CALLEE	1620:21	1620:21	14	processCompressOptions
LEAF_NODE	1620:21	1620:21	15	processCompressOptions
LEAF_NODE	1620:43	1620:43	14	(
ARGUMENT	1620:44	1620:44	14	optarg
FIELD	1620:44	1620:44	15	optarg
LEAF_NODE	1620:44	1620:44	16	optarg
LEAF_NODE	1620:50	1620:50	14	)
LEAF_NODE	1620:51	1620:51	10	)
STATEMENTS	1621:4	1625:18	10	
LEAF_NODE	1621:4	1621:4	11	{
STATEMENTS	1622:4	1624:18	11	
EXPR_STATEMENT	1622:4	1622:58	12	TIFFError ( "Unknown compression option" , "%s" , optarg ) ;
EXPR	1622:4	1622:4	13	TIFFError ( "Unknown compression option" , "%s" , optarg )
FUNCTION_CALL	1622:4	1622:57	14	TIFFError ( "Unknown compression option" , "%s" , optarg )
CALLEE	1622:4	1622:4	15	TIFFError
LEAF_NODE	1622:4	1622:4	16	TIFFError
LEAF_NODE	1622:14	1622:14	15	(
ARGUMENT	1622:15	1622:15	15	"Unknown compression option"
FIELD	1622:15	1622:15	16	"Unknown compression option"
LEAF_NODE	1622:15	1622:15	17	"Unknown compression option"
LEAF_NODE	1622:43	1622:43	15	,
ARGUMENT	1622:45	1622:45	15	"%s"
FIELD	1622:45	1622:45	16	"%s"
LEAF_NODE	1622:45	1622:45	17	"%s"
LEAF_NODE	1622:49	1622:49	15	,
ARGUMENT	1622:51	1622:51	15	optarg
FIELD	1622:51	1622:51	16	optarg
LEAF_NODE	1622:51	1622:51	17	optarg
LEAF_NODE	1622:57	1622:57	15	)
LEAF_NODE	1622:58	1622:58	13	;
EXPR_STATEMENT	1623:18	1623:69	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1623:18	1623:18	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1623:18	1623:68	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1623:18	1623:18	15	TIFFError
LEAF_NODE	1623:18	1623:18	16	TIFFError
LEAF_NODE	1623:28	1623:28	15	(
ARGUMENT	1623:29	1623:29	15	"For valid options type"
FIELD	1623:29	1623:29	16	"For valid options type"
LEAF_NODE	1623:29	1623:29	17	"For valid options type"
LEAF_NODE	1623:53	1623:53	15	,
ARGUMENT	1623:55	1623:55	15	"tiffcrop -h"
FIELD	1623:55	1623:55	16	"tiffcrop -h"
LEAF_NODE	1623:55	1623:55	17	"tiffcrop -h"
LEAF_NODE	1623:68	1623:68	15	)
LEAF_NODE	1623:69	1623:69	13	;
EXPR_STATEMENT	1624:18	1624:27	12	exit ( - 1 ) ;
EXPR	1624:18	1624:18	13	exit ( - 1 )
FUNCTION_CALL	1624:18	1624:26	14	exit ( - 1 )
CALLEE	1624:18	1624:18	15	exit
LEAF_NODE	1624:18	1624:18	16	exit
LEAF_NODE	1624:23	1624:23	15	(
ARGUMENT	1624:24	1624:24	15	- 1
UNARY_EXPR	1624:24	1624:25	16	- 1
UNARY_OPERATOR	1624:24	1624:24	17	-
LEAF_NODE	1624:24	1624:24	18	-
FIELD	1624:25	1624:25	17	1
LEAF_NODE	1624:25	1624:25	18	1
LEAF_NODE	1624:26	1624:26	15	)
LEAF_NODE	1624:27	1624:27	13	;
LEAF_NODE	1625:18	1625:18	11	}
JUMP_STATEMENT	1626:2	1626:7	9	break DESTINATION ;
KEYWORD	1626:2	1626:2	10	break
LEAF_NODE	1626:2	1626:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1626:7	1626:7	10	;
LEAF_NODE	1627:6	1627:6	9	case
LEAF_NODE	1627:11	1627:11	9	'd'
LEAF_NODE	1627:14	1627:14	9	:
EXPR_STATEMENT	1627:16	1627:48	9	start = strtoul ( optarg , NULL , 0 ) ;
EXPR	1627:16	1627:16	10	start = strtoul ( optarg , NULL , 0 )
ASSIGN	1627:16	1627:24	11	start = strtoul ( optarg , NULL , 0 )
LVAL	1627:16	1627:16	12	start
FIELD	1627:16	1627:16	13	start
LEAF_NODE	1627:16	1627:16	14	start
ASSIGN_OP	1627:22	1627:22	12	=
LEAF_NODE	1627:22	1627:22	13	=
RVAL	1627:24	1627:24	12	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	1627:24	1627:47	13	strtoul ( optarg , NULL , 0 )
CALLEE	1627:24	1627:24	14	strtoul
LEAF_NODE	1627:24	1627:24	15	strtoul
LEAF_NODE	1627:31	1627:31	14	(
ARGUMENT	1627:32	1627:32	14	optarg
FIELD	1627:32	1627:32	15	optarg
LEAF_NODE	1627:32	1627:32	16	optarg
LEAF_NODE	1627:38	1627:38	14	,
ARGUMENT	1627:40	1627:40	14	NULL
FIELD	1627:40	1627:40	15	NULL
LEAF_NODE	1627:40	1627:40	16	NULL
LEAF_NODE	1627:44	1627:44	14	,
ARGUMENT	1627:46	1627:46	14	0
FIELD	1627:46	1627:46	15	0
LEAF_NODE	1627:46	1627:46	16	0
LEAF_NODE	1627:47	1627:47	14	)
LEAF_NODE	1627:48	1627:48	10	;
SELECTION	1628:9	1629:18	9	
KEYWORD	1628:9	1628:9	10	if
LEAF_NODE	1628:9	1628:9	11	if
LEAF_NODE	1628:12	1628:12	10	(
CONDITION	1628:13	1628:13	10	start == 0
EXPR	1628:13	1628:22	11	start == 0
FIELD	1628:13	1628:13	12	start
LEAF_NODE	1628:13	1628:13	13	start
EQ_OPERATOR	1628:19	1628:19	12	==
LEAF_NODE	1628:19	1628:19	13	==
FIELD	1628:22	1628:22	12	0
LEAF_NODE	1628:22	1628:22	13	0
LEAF_NODE	1628:23	1628:23	10	)
STATEMENTS	1629:18	1633:4	10	
LEAF_NODE	1629:18	1629:18	11	{
STATEMENTS	1630:4	1632:18	11	
EXPR_STATEMENT	1630:4	1630:63	12	TIFFError ( "" , "Directory offset must be greater than zero" ) ;
EXPR	1630:4	1630:4	13	TIFFError ( "" , "Directory offset must be greater than zero" )
FUNCTION_CALL	1630:4	1630:62	14	TIFFError ( "" , "Directory offset must be greater than zero" )
CALLEE	1630:4	1630:4	15	TIFFError
LEAF_NODE	1630:4	1630:4	16	TIFFError
LEAF_NODE	1630:14	1630:14	15	(
ARGUMENT	1630:15	1630:15	15	""
FIELD	1630:15	1630:15	16	""
LEAF_NODE	1630:15	1630:15	17	""
LEAF_NODE	1630:17	1630:17	15	,
ARGUMENT	1630:18	1630:18	15	"Directory offset must be greater than zero"
FIELD	1630:18	1630:18	16	"Directory offset must be greater than zero"
LEAF_NODE	1630:18	1630:18	17	"Directory offset must be greater than zero"
LEAF_NODE	1630:62	1630:62	15	)
LEAF_NODE	1630:63	1630:63	13	;
EXPR_STATEMENT	1631:4	1631:55	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1631:4	1631:4	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1631:4	1631:54	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1631:4	1631:4	15	TIFFError
LEAF_NODE	1631:4	1631:4	16	TIFFError
LEAF_NODE	1631:14	1631:14	15	(
ARGUMENT	1631:15	1631:15	15	"For valid options type"
FIELD	1631:15	1631:15	16	"For valid options type"
LEAF_NODE	1631:15	1631:15	17	"For valid options type"
LEAF_NODE	1631:39	1631:39	15	,
ARGUMENT	1631:41	1631:41	15	"tiffcrop -h"
FIELD	1631:41	1631:41	16	"tiffcrop -h"
LEAF_NODE	1631:41	1631:41	17	"tiffcrop -h"
LEAF_NODE	1631:54	1631:54	15	)
LEAF_NODE	1631:55	1631:55	13	;
EXPR_STATEMENT	1632:18	1632:27	12	exit ( - 1 ) ;
EXPR	1632:18	1632:18	13	exit ( - 1 )
FUNCTION_CALL	1632:18	1632:26	14	exit ( - 1 )
CALLEE	1632:18	1632:18	15	exit
LEAF_NODE	1632:18	1632:18	16	exit
LEAF_NODE	1632:23	1632:23	15	(
ARGUMENT	1632:24	1632:24	15	- 1
UNARY_EXPR	1632:24	1632:25	16	- 1
UNARY_OPERATOR	1632:24	1632:24	17	-
LEAF_NODE	1632:24	1632:24	18	-
FIELD	1632:25	1632:25	17	1
LEAF_NODE	1632:25	1632:25	18	1
LEAF_NODE	1632:26	1632:26	15	)
LEAF_NODE	1632:27	1632:27	13	;
LEAF_NODE	1633:4	1633:4	11	}
EXPR_STATEMENT	1634:9	1634:28	9	* dirnum = start - 1 ;
EXPR	1634:9	1634:9	10	* dirnum = start - 1
ASSIGN	1634:9	1634:19	11	* dirnum = start - 1
LVAL	1634:9	1634:9	12	* dirnum
UNARY_EXPR	1634:9	1634:10	13	* dirnum
UNARY_OPERATOR	1634:9	1634:9	14	*
LEAF_NODE	1634:9	1634:9	15	*
FIELD	1634:10	1634:10	14	dirnum
LEAF_NODE	1634:10	1634:10	15	dirnum
ASSIGN_OP	1634:17	1634:17	12	=
LEAF_NODE	1634:17	1634:17	13	=
RVAL	1634:19	1634:27	12	start - 1
FIELD	1634:19	1634:19	13	start
LEAF_NODE	1634:19	1634:19	14	start
LEAF_NODE	1634:25	1634:25	13	-
FIELD	1634:27	1634:27	13	1
LEAF_NODE	1634:27	1634:27	14	1
LEAF_NODE	1634:28	1634:28	10	;
JUMP_STATEMENT	1635:2	1635:7	9	break DESTINATION ;
KEYWORD	1635:2	1635:2	10	break
LEAF_NODE	1635:2	1635:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1635:7	1635:7	10	;
LEAF_NODE	1636:6	1636:6	9	case
LEAF_NODE	1636:11	1636:11	9	'e'
LEAF_NODE	1636:14	1636:14	9	:
SELECTION	1636:16	1637:18	9	
KEYWORD	1636:16	1636:16	10	switch
LEAF_NODE	1636:16	1636:16	11	switch
LEAF_NODE	1636:23	1636:23	10	(
CONDITION	1636:24	1636:24	10	tolower ( ( int ) optarg [ 0 ] )
EXPR	1636:24	1636:24	11	tolower ( ( int ) optarg [ 0 ] )
FUNCTION_CALL	1636:24	1636:47	12	tolower ( ( int ) optarg [ 0 ] )
CALLEE	1636:24	1636:24	13	tolower
LEAF_NODE	1636:24	1636:24	14	tolower
LEAF_NODE	1636:31	1636:31	13	(
ARGUMENT	1636:32	1636:38	13	( int ) optarg [ 0 ]
LEAF_NODE	1636:32	1636:32	14	(
TYPE_NAME	1636:33	1636:33	14	int
LEAF_NODE	1636:33	1636:33	15	int
LEAF_NODE	1636:36	1636:36	14	)
FIELD	1636:38	1636:46	14	optarg [ 0 ]
LEAF_NODE	1636:38	1636:38	15	optarg
LEAF_NODE	1636:44	1636:44	15	[
EXPR	1636:45	1636:45	15	0
FIELD	1636:45	1636:45	16	0
LEAF_NODE	1636:45	1636:45	17	0
LEAF_NODE	1636:46	1636:46	15	]
LEAF_NODE	1636:47	1636:47	13	)
LEAF_NODE	1636:48	1636:48	10	)
STATEMENTS	1637:18	1656:18	10	
LEAF_NODE	1637:18	1637:18	11	{
STATEMENTS	1638:4	1655:28	11	
LEAF_NODE	1638:4	1638:4	12	case
LEAF_NODE	1638:9	1638:9	12	'c'
LEAF_NODE	1638:12	1638:12	12	:
EXPR_STATEMENT	1638:14	1638:54	12	crop_data -> exp_mode = ONE_FILE_COMPOSITE ;
EXPR	1638:14	1638:14	13	crop_data -> exp_mode = ONE_FILE_COMPOSITE
ASSIGN	1638:14	1638:36	14	crop_data -> exp_mode = ONE_FILE_COMPOSITE
LVAL	1638:14	1638:14	15	crop_data -> exp_mode
FIELD	1638:14	1638:25	16	crop_data -> exp_mode
LEAF_NODE	1638:14	1638:14	17	crop_data
LEAF_NODE	1638:23	1638:23	17	->
LEAF_NODE	1638:25	1638:25	17	exp_mode
ASSIGN_OP	1638:34	1638:34	15	=
LEAF_NODE	1638:34	1638:34	16	=
RVAL	1638:36	1638:36	15	ONE_FILE_COMPOSITE
FIELD	1638:36	1638:36	16	ONE_FILE_COMPOSITE
LEAF_NODE	1638:36	1638:36	17	ONE_FILE_COMPOSITE
LEAF_NODE	1638:54	1638:54	13	;
EXPR_STATEMENT	1639:15	1639:53	12	crop_data -> img_mode = COMPOSITE_IMAGES ;
EXPR	1639:15	1639:15	13	crop_data -> img_mode = COMPOSITE_IMAGES
ASSIGN	1639:15	1639:37	14	crop_data -> img_mode = COMPOSITE_IMAGES
LVAL	1639:15	1639:15	15	crop_data -> img_mode
FIELD	1639:15	1639:26	16	crop_data -> img_mode
LEAF_NODE	1639:15	1639:15	17	crop_data
LEAF_NODE	1639:24	1639:24	17	->
LEAF_NODE	1639:26	1639:26	17	img_mode
ASSIGN_OP	1639:35	1639:35	15	=
LEAF_NODE	1639:35	1639:35	16	=
RVAL	1639:37	1639:37	15	COMPOSITE_IMAGES
FIELD	1639:37	1639:37	16	COMPOSITE_IMAGES
LEAF_NODE	1639:37	1639:37	17	COMPOSITE_IMAGES
LEAF_NODE	1639:53	1639:53	13	;
JUMP_STATEMENT	1640:14	1640:19	12	break DESTINATION ;
KEYWORD	1640:14	1640:14	13	break
LEAF_NODE	1640:14	1640:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1640:19	1640:19	13	;
LEAF_NODE	1641:4	1641:4	12	case
LEAF_NODE	1641:9	1641:9	12	'd'
LEAF_NODE	1641:12	1641:12	12	:
EXPR_STATEMENT	1641:14	1641:54	12	crop_data -> exp_mode = ONE_FILE_SEPARATED ;
EXPR	1641:14	1641:14	13	crop_data -> exp_mode = ONE_FILE_SEPARATED
ASSIGN	1641:14	1641:36	14	crop_data -> exp_mode = ONE_FILE_SEPARATED
LVAL	1641:14	1641:14	15	crop_data -> exp_mode
FIELD	1641:14	1641:25	16	crop_data -> exp_mode
LEAF_NODE	1641:14	1641:14	17	crop_data
LEAF_NODE	1641:23	1641:23	17	->
LEAF_NODE	1641:25	1641:25	17	exp_mode
ASSIGN_OP	1641:34	1641:34	15	=
LEAF_NODE	1641:34	1641:34	16	=
RVAL	1641:36	1641:36	15	ONE_FILE_SEPARATED
FIELD	1641:36	1641:36	16	ONE_FILE_SEPARATED
LEAF_NODE	1641:36	1641:36	17	ONE_FILE_SEPARATED
LEAF_NODE	1641:54	1641:54	13	;
EXPR_STATEMENT	1642:15	1642:53	12	crop_data -> img_mode = SEPARATED_IMAGES ;
EXPR	1642:15	1642:15	13	crop_data -> img_mode = SEPARATED_IMAGES
ASSIGN	1642:15	1642:37	14	crop_data -> img_mode = SEPARATED_IMAGES
LVAL	1642:15	1642:15	15	crop_data -> img_mode
FIELD	1642:15	1642:26	16	crop_data -> img_mode
LEAF_NODE	1642:15	1642:15	17	crop_data
LEAF_NODE	1642:24	1642:24	17	->
LEAF_NODE	1642:26	1642:26	17	img_mode
ASSIGN_OP	1642:35	1642:35	15	=
LEAF_NODE	1642:35	1642:35	16	=
RVAL	1642:37	1642:37	15	SEPARATED_IMAGES
FIELD	1642:37	1642:37	16	SEPARATED_IMAGES
LEAF_NODE	1642:37	1642:37	17	SEPARATED_IMAGES
LEAF_NODE	1642:53	1642:53	13	;
JUMP_STATEMENT	1643:14	1643:19	12	break DESTINATION ;
KEYWORD	1643:14	1643:14	13	break
LEAF_NODE	1643:14	1643:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1643:19	1643:19	13	;
LEAF_NODE	1644:4	1644:4	12	case
LEAF_NODE	1644:9	1644:9	12	'i'
LEAF_NODE	1644:12	1644:12	12	:
EXPR_STATEMENT	1644:14	1644:60	12	crop_data -> exp_mode = FILE_PER_IMAGE_COMPOSITE ;
EXPR	1644:14	1644:14	13	crop_data -> exp_mode = FILE_PER_IMAGE_COMPOSITE
ASSIGN	1644:14	1644:36	14	crop_data -> exp_mode = FILE_PER_IMAGE_COMPOSITE
LVAL	1644:14	1644:14	15	crop_data -> exp_mode
FIELD	1644:14	1644:25	16	crop_data -> exp_mode
LEAF_NODE	1644:14	1644:14	17	crop_data
LEAF_NODE	1644:23	1644:23	17	->
LEAF_NODE	1644:25	1644:25	17	exp_mode
ASSIGN_OP	1644:34	1644:34	15	=
LEAF_NODE	1644:34	1644:34	16	=
RVAL	1644:36	1644:36	15	FILE_PER_IMAGE_COMPOSITE
FIELD	1644:36	1644:36	16	FILE_PER_IMAGE_COMPOSITE
LEAF_NODE	1644:36	1644:36	17	FILE_PER_IMAGE_COMPOSITE
LEAF_NODE	1644:60	1644:60	13	;
EXPR_STATEMENT	1645:15	1645:53	12	crop_data -> img_mode = COMPOSITE_IMAGES ;
EXPR	1645:15	1645:15	13	crop_data -> img_mode = COMPOSITE_IMAGES
ASSIGN	1645:15	1645:37	14	crop_data -> img_mode = COMPOSITE_IMAGES
LVAL	1645:15	1645:15	15	crop_data -> img_mode
FIELD	1645:15	1645:26	16	crop_data -> img_mode
LEAF_NODE	1645:15	1645:15	17	crop_data
LEAF_NODE	1645:24	1645:24	17	->
LEAF_NODE	1645:26	1645:26	17	img_mode
ASSIGN_OP	1645:35	1645:35	15	=
LEAF_NODE	1645:35	1645:35	16	=
RVAL	1645:37	1645:37	15	COMPOSITE_IMAGES
FIELD	1645:37	1645:37	16	COMPOSITE_IMAGES
LEAF_NODE	1645:37	1645:37	17	COMPOSITE_IMAGES
LEAF_NODE	1645:53	1645:53	13	;
JUMP_STATEMENT	1646:14	1646:19	12	break DESTINATION ;
KEYWORD	1646:14	1646:14	13	break
LEAF_NODE	1646:14	1646:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1646:19	1646:19	13	;
LEAF_NODE	1647:4	1647:4	12	case
LEAF_NODE	1647:9	1647:9	12	'm'
LEAF_NODE	1647:12	1647:12	12	:
EXPR_STATEMENT	1647:14	1647:60	12	crop_data -> exp_mode = FILE_PER_IMAGE_SEPARATED ;
EXPR	1647:14	1647:14	13	crop_data -> exp_mode = FILE_PER_IMAGE_SEPARATED
ASSIGN	1647:14	1647:36	14	crop_data -> exp_mode = FILE_PER_IMAGE_SEPARATED
LVAL	1647:14	1647:14	15	crop_data -> exp_mode
FIELD	1647:14	1647:25	16	crop_data -> exp_mode
LEAF_NODE	1647:14	1647:14	17	crop_data
LEAF_NODE	1647:23	1647:23	17	->
LEAF_NODE	1647:25	1647:25	17	exp_mode
ASSIGN_OP	1647:34	1647:34	15	=
LEAF_NODE	1647:34	1647:34	16	=
RVAL	1647:36	1647:36	15	FILE_PER_IMAGE_SEPARATED
FIELD	1647:36	1647:36	16	FILE_PER_IMAGE_SEPARATED
LEAF_NODE	1647:36	1647:36	17	FILE_PER_IMAGE_SEPARATED
LEAF_NODE	1647:60	1647:60	13	;
EXPR_STATEMENT	1648:15	1648:53	12	crop_data -> img_mode = SEPARATED_IMAGES ;
EXPR	1648:15	1648:15	13	crop_data -> img_mode = SEPARATED_IMAGES
ASSIGN	1648:15	1648:37	14	crop_data -> img_mode = SEPARATED_IMAGES
LVAL	1648:15	1648:15	15	crop_data -> img_mode
FIELD	1648:15	1648:26	16	crop_data -> img_mode
LEAF_NODE	1648:15	1648:15	17	crop_data
LEAF_NODE	1648:24	1648:24	17	->
LEAF_NODE	1648:26	1648:26	17	img_mode
ASSIGN_OP	1648:35	1648:35	15	=
LEAF_NODE	1648:35	1648:35	16	=
RVAL	1648:37	1648:37	15	SEPARATED_IMAGES
FIELD	1648:37	1648:37	16	SEPARATED_IMAGES
LEAF_NODE	1648:37	1648:37	17	SEPARATED_IMAGES
LEAF_NODE	1648:53	1648:53	13	;
JUMP_STATEMENT	1649:14	1649:19	12	break DESTINATION ;
KEYWORD	1649:14	1649:14	13	break
LEAF_NODE	1649:14	1649:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1649:19	1649:19	13	;
LEAF_NODE	1650:4	1650:4	12	case
LEAF_NODE	1650:9	1650:9	12	's'
LEAF_NODE	1650:12	1650:12	12	:
EXPR_STATEMENT	1650:14	1650:54	12	crop_data -> exp_mode = FILE_PER_SELECTION ;
EXPR	1650:14	1650:14	13	crop_data -> exp_mode = FILE_PER_SELECTION
ASSIGN	1650:14	1650:36	14	crop_data -> exp_mode = FILE_PER_SELECTION
LVAL	1650:14	1650:14	15	crop_data -> exp_mode
FIELD	1650:14	1650:25	16	crop_data -> exp_mode
LEAF_NODE	1650:14	1650:14	17	crop_data
LEAF_NODE	1650:23	1650:23	17	->
LEAF_NODE	1650:25	1650:25	17	exp_mode
ASSIGN_OP	1650:34	1650:34	15	=
LEAF_NODE	1650:34	1650:34	16	=
RVAL	1650:36	1650:36	15	FILE_PER_SELECTION
FIELD	1650:36	1650:36	16	FILE_PER_SELECTION
LEAF_NODE	1650:36	1650:36	17	FILE_PER_SELECTION
LEAF_NODE	1650:54	1650:54	13	;
EXPR_STATEMENT	1651:15	1651:53	12	crop_data -> img_mode = SEPARATED_IMAGES ;
EXPR	1651:15	1651:15	13	crop_data -> img_mode = SEPARATED_IMAGES
ASSIGN	1651:15	1651:37	14	crop_data -> img_mode = SEPARATED_IMAGES
LVAL	1651:15	1651:15	15	crop_data -> img_mode
FIELD	1651:15	1651:26	16	crop_data -> img_mode
LEAF_NODE	1651:15	1651:15	17	crop_data
LEAF_NODE	1651:24	1651:24	17	->
LEAF_NODE	1651:26	1651:26	17	img_mode
ASSIGN_OP	1651:35	1651:35	15	=
LEAF_NODE	1651:35	1651:35	16	=
RVAL	1651:37	1651:37	15	SEPARATED_IMAGES
FIELD	1651:37	1651:37	16	SEPARATED_IMAGES
LEAF_NODE	1651:37	1651:37	17	SEPARATED_IMAGES
LEAF_NODE	1651:53	1651:53	13	;
JUMP_STATEMENT	1652:14	1652:19	12	break DESTINATION ;
KEYWORD	1652:14	1652:14	13	break
LEAF_NODE	1652:14	1652:14	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1652:19	1652:19	13	;
LABEL	1653:4	1653:11	12	default :
LEAF_NODE	1653:4	1653:4	13	default
LEAF_NODE	1653:11	1653:11	13	:
EXPR_STATEMENT	1653:14	1653:60	12	TIFFError ( "Unknown export mode" , "%s" , optarg ) ;
EXPR	1653:14	1653:14	13	TIFFError ( "Unknown export mode" , "%s" , optarg )
FUNCTION_CALL	1653:14	1653:59	14	TIFFError ( "Unknown export mode" , "%s" , optarg )
CALLEE	1653:14	1653:14	15	TIFFError
LEAF_NODE	1653:14	1653:14	16	TIFFError
LEAF_NODE	1653:24	1653:24	15	(
ARGUMENT	1653:25	1653:25	15	"Unknown export mode"
FIELD	1653:25	1653:25	16	"Unknown export mode"
LEAF_NODE	1653:25	1653:25	17	"Unknown export mode"
LEAF_NODE	1653:46	1653:46	15	,
ARGUMENT	1653:47	1653:47	15	"%s"
FIELD	1653:47	1653:47	16	"%s"
LEAF_NODE	1653:47	1653:47	17	"%s"
LEAF_NODE	1653:51	1653:51	15	,
ARGUMENT	1653:53	1653:53	15	optarg
FIELD	1653:53	1653:53	16	optarg
LEAF_NODE	1653:53	1653:53	17	optarg
LEAF_NODE	1653:59	1653:59	15	)
LEAF_NODE	1653:60	1653:60	13	;
EXPR_STATEMENT	1654:28	1654:79	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1654:28	1654:28	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1654:28	1654:78	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1654:28	1654:28	15	TIFFError
LEAF_NODE	1654:28	1654:28	16	TIFFError
LEAF_NODE	1654:38	1654:38	15	(
ARGUMENT	1654:39	1654:39	15	"For valid options type"
FIELD	1654:39	1654:39	16	"For valid options type"
LEAF_NODE	1654:39	1654:39	17	"For valid options type"
LEAF_NODE	1654:63	1654:63	15	,
ARGUMENT	1654:65	1654:65	15	"tiffcrop -h"
FIELD	1654:65	1654:65	16	"tiffcrop -h"
LEAF_NODE	1654:65	1654:65	17	"tiffcrop -h"
LEAF_NODE	1654:78	1654:78	15	)
LEAF_NODE	1654:79	1654:79	13	;
EXPR_STATEMENT	1655:28	1655:37	12	exit ( - 1 ) ;
EXPR	1655:28	1655:28	13	exit ( - 1 )
FUNCTION_CALL	1655:28	1655:36	14	exit ( - 1 )
CALLEE	1655:28	1655:28	15	exit
LEAF_NODE	1655:28	1655:28	16	exit
LEAF_NODE	1655:33	1655:33	15	(
ARGUMENT	1655:34	1655:34	15	- 1
UNARY_EXPR	1655:34	1655:35	16	- 1
UNARY_OPERATOR	1655:34	1655:34	17	-
LEAF_NODE	1655:34	1655:34	18	-
FIELD	1655:35	1655:35	17	1
LEAF_NODE	1655:35	1655:35	18	1
LEAF_NODE	1655:36	1655:36	15	)
LEAF_NODE	1655:37	1655:37	13	;
LEAF_NODE	1656:18	1656:18	11	}
JUMP_STATEMENT	1657:9	1657:14	9	break DESTINATION ;
KEYWORD	1657:9	1657:9	10	break
LEAF_NODE	1657:9	1657:9	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1657:14	1657:14	10	;
LEAF_NODE	1658:6	1658:6	9	case
LEAF_NODE	1658:11	1658:11	9	'f'
LEAF_NODE	1658:14	1658:14	9	:
SELECTION	1658:16	1659:4	9	
KEYWORD	1658:16	1658:16	10	if
LEAF_NODE	1658:16	1658:16	11	if
LEAF_NODE	1658:19	1658:19	10	(
CONDITION	1658:20	1658:20	10	streq ( optarg , "lsb2msb" )
EXPR	1658:20	1658:20	11	streq ( optarg , "lsb2msb" )
FUNCTION_CALL	1658:20	1658:43	12	streq ( optarg , "lsb2msb" )
CALLEE	1658:20	1658:20	13	streq
LEAF_NODE	1658:20	1658:20	14	streq
LEAF_NODE	1658:25	1658:25	13	(
ARGUMENT	1658:26	1658:26	13	optarg
FIELD	1658:26	1658:26	14	optarg
LEAF_NODE	1658:26	1658:26	15	optarg
LEAF_NODE	1658:32	1658:32	13	,
ARGUMENT	1658:34	1658:34	13	"lsb2msb"
FIELD	1658:34	1658:34	14	"lsb2msb"
LEAF_NODE	1658:34	1658:34	15	"lsb2msb"
LEAF_NODE	1658:43	1658:43	13	)
LEAF_NODE	1658:44	1658:44	10	)
STATEMENTS	1659:4	1659:4	10	
EXPR_STATEMENT	1659:4	1659:37	11	* deffillorder = FILLORDER_LSB2MSB ;
EXPR	1659:4	1659:4	12	* deffillorder = FILLORDER_LSB2MSB
ASSIGN	1659:4	1659:20	13	* deffillorder = FILLORDER_LSB2MSB
LVAL	1659:4	1659:4	14	* deffillorder
UNARY_EXPR	1659:4	1659:5	15	* deffillorder
UNARY_OPERATOR	1659:4	1659:4	16	*
LEAF_NODE	1659:4	1659:4	17	*
FIELD	1659:5	1659:5	16	deffillorder
LEAF_NODE	1659:5	1659:5	17	deffillorder
ASSIGN_OP	1659:18	1659:18	14	=
LEAF_NODE	1659:18	1659:18	15	=
RVAL	1659:20	1659:20	14	FILLORDER_LSB2MSB
FIELD	1659:20	1659:20	15	FILLORDER_LSB2MSB
LEAF_NODE	1659:20	1659:20	16	FILLORDER_LSB2MSB
LEAF_NODE	1659:37	1659:37	12	;
SELECTION	1660:2	1660:7	9	
KEYWORD	1660:2	1660:2	10	else
LEAF_NODE	1660:2	1660:2	11	else
STATEMENTS	1660:7	1660:7	10	
SELECTION	1660:7	1661:4	11	
KEYWORD	1660:7	1660:7	12	if
LEAF_NODE	1660:7	1660:7	13	if
LEAF_NODE	1660:10	1660:10	12	(
CONDITION	1660:11	1660:11	12	streq ( optarg , "msb2lsb" )
EXPR	1660:11	1660:11	13	streq ( optarg , "msb2lsb" )
FUNCTION_CALL	1660:11	1660:34	14	streq ( optarg , "msb2lsb" )
CALLEE	1660:11	1660:11	15	streq
LEAF_NODE	1660:11	1660:11	16	streq
LEAF_NODE	1660:16	1660:16	15	(
ARGUMENT	1660:17	1660:17	15	optarg
FIELD	1660:17	1660:17	16	optarg
LEAF_NODE	1660:17	1660:17	17	optarg
LEAF_NODE	1660:23	1660:23	15	,
ARGUMENT	1660:25	1660:25	15	"msb2lsb"
FIELD	1660:25	1660:25	16	"msb2lsb"
LEAF_NODE	1660:25	1660:25	17	"msb2lsb"
LEAF_NODE	1660:34	1660:34	15	)
LEAF_NODE	1660:35	1660:35	12	)
STATEMENTS	1661:4	1661:4	12	
EXPR_STATEMENT	1661:4	1661:37	13	* deffillorder = FILLORDER_MSB2LSB ;
EXPR	1661:4	1661:4	14	* deffillorder = FILLORDER_MSB2LSB
ASSIGN	1661:4	1661:20	15	* deffillorder = FILLORDER_MSB2LSB
LVAL	1661:4	1661:4	16	* deffillorder
UNARY_EXPR	1661:4	1661:5	17	* deffillorder
UNARY_OPERATOR	1661:4	1661:4	18	*
LEAF_NODE	1661:4	1661:4	19	*
FIELD	1661:5	1661:5	18	deffillorder
LEAF_NODE	1661:5	1661:5	19	deffillorder
ASSIGN_OP	1661:18	1661:18	16	=
LEAF_NODE	1661:18	1661:18	17	=
RVAL	1661:20	1661:20	16	FILLORDER_MSB2LSB
FIELD	1661:20	1661:20	17	FILLORDER_MSB2LSB
LEAF_NODE	1661:20	1661:20	18	FILLORDER_MSB2LSB
LEAF_NODE	1661:37	1661:37	14	;
SELECTION	1662:2	1663:4	9	
KEYWORD	1662:2	1662:2	10	else
LEAF_NODE	1662:2	1662:2	11	else
STATEMENTS	1663:4	1667:18	10	
LEAF_NODE	1663:4	1663:4	11	{
STATEMENTS	1664:4	1666:18	11	
EXPR_STATEMENT	1664:4	1664:50	12	TIFFError ( "Unknown fill order" , "%s" , optarg ) ;
EXPR	1664:4	1664:4	13	TIFFError ( "Unknown fill order" , "%s" , optarg )
FUNCTION_CALL	1664:4	1664:49	14	TIFFError ( "Unknown fill order" , "%s" , optarg )
CALLEE	1664:4	1664:4	15	TIFFError
LEAF_NODE	1664:4	1664:4	16	TIFFError
LEAF_NODE	1664:14	1664:14	15	(
ARGUMENT	1664:15	1664:15	15	"Unknown fill order"
FIELD	1664:15	1664:15	16	"Unknown fill order"
LEAF_NODE	1664:15	1664:15	17	"Unknown fill order"
LEAF_NODE	1664:35	1664:35	15	,
ARGUMENT	1664:37	1664:37	15	"%s"
FIELD	1664:37	1664:37	16	"%s"
LEAF_NODE	1664:37	1664:37	17	"%s"
LEAF_NODE	1664:41	1664:41	15	,
ARGUMENT	1664:43	1664:43	15	optarg
FIELD	1664:43	1664:43	16	optarg
LEAF_NODE	1664:43	1664:43	17	optarg
LEAF_NODE	1664:49	1664:49	15	)
LEAF_NODE	1664:50	1664:50	13	;
EXPR_STATEMENT	1665:18	1665:69	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1665:18	1665:18	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1665:18	1665:68	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1665:18	1665:18	15	TIFFError
LEAF_NODE	1665:18	1665:18	16	TIFFError
LEAF_NODE	1665:28	1665:28	15	(
ARGUMENT	1665:29	1665:29	15	"For valid options type"
FIELD	1665:29	1665:29	16	"For valid options type"
LEAF_NODE	1665:29	1665:29	17	"For valid options type"
LEAF_NODE	1665:53	1665:53	15	,
ARGUMENT	1665:55	1665:55	15	"tiffcrop -h"
FIELD	1665:55	1665:55	16	"tiffcrop -h"
LEAF_NODE	1665:55	1665:55	17	"tiffcrop -h"
LEAF_NODE	1665:68	1665:68	15	)
LEAF_NODE	1665:69	1665:69	13	;
EXPR_STATEMENT	1666:18	1666:27	12	exit ( - 1 ) ;
EXPR	1666:18	1666:18	13	exit ( - 1 )
FUNCTION_CALL	1666:18	1666:26	14	exit ( - 1 )
CALLEE	1666:18	1666:18	15	exit
LEAF_NODE	1666:18	1666:18	16	exit
LEAF_NODE	1666:23	1666:23	15	(
ARGUMENT	1666:24	1666:24	15	- 1
UNARY_EXPR	1666:24	1666:25	16	- 1
UNARY_OPERATOR	1666:24	1666:24	17	-
LEAF_NODE	1666:24	1666:24	18	-
FIELD	1666:25	1666:25	17	1
LEAF_NODE	1666:25	1666:25	18	1
LEAF_NODE	1666:26	1666:26	15	)
LEAF_NODE	1666:27	1666:27	13	;
LEAF_NODE	1667:18	1667:18	11	}
JUMP_STATEMENT	1668:2	1668:7	9	break DESTINATION ;
KEYWORD	1668:2	1668:2	10	break
LEAF_NODE	1668:2	1668:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1668:7	1668:7	10	;
LEAF_NODE	1669:6	1669:6	9	case
LEAF_NODE	1669:11	1669:11	9	'h'
LEAF_NODE	1669:14	1669:14	9	:
EXPR_STATEMENT	1669:16	1669:23	9	usage ( ) ;
EXPR	1669:16	1669:16	10	usage ( )
FUNCTION_CALL	1669:16	1669:22	11	usage ( )
CALLEE	1669:16	1669:16	12	usage
LEAF_NODE	1669:16	1669:16	13	usage
LEAF_NODE	1669:21	1669:21	12	(
LEAF_NODE	1669:22	1669:22	12	)
LEAF_NODE	1669:23	1669:23	10	;
JUMP_STATEMENT	1670:2	1670:7	9	break DESTINATION ;
KEYWORD	1670:2	1670:2	10	break
LEAF_NODE	1670:2	1670:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1670:7	1670:7	10	;
LEAF_NODE	1671:6	1671:6	9	case
LEAF_NODE	1671:11	1671:11	9	'i'
LEAF_NODE	1671:14	1671:14	9	:
EXPR_STATEMENT	1671:16	1671:29	9	ignore = TRUE ;
EXPR	1671:16	1671:16	10	ignore = TRUE
ASSIGN	1671:16	1671:25	11	ignore = TRUE
LVAL	1671:16	1671:16	12	ignore
FIELD	1671:16	1671:16	13	ignore
LEAF_NODE	1671:16	1671:16	14	ignore
ASSIGN_OP	1671:23	1671:23	12	=
LEAF_NODE	1671:23	1671:23	13	=
RVAL	1671:25	1671:25	12	TRUE
FIELD	1671:25	1671:25	13	TRUE
LEAF_NODE	1671:25	1671:25	14	TRUE
LEAF_NODE	1671:29	1671:29	10	;
JUMP_STATEMENT	1672:2	1672:7	9	break DESTINATION ;
KEYWORD	1672:2	1672:2	10	break
LEAF_NODE	1672:2	1672:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1672:7	1672:7	10	;
LEAF_NODE	1673:6	1673:6	9	case
LEAF_NODE	1673:11	1673:11	9	'l'
LEAF_NODE	1673:14	1673:14	9	:
EXPR_STATEMENT	1673:16	1673:31	9	outtiled = TRUE ;
EXPR	1673:16	1673:16	10	outtiled = TRUE
ASSIGN	1673:16	1673:27	11	outtiled = TRUE
LVAL	1673:16	1673:16	12	outtiled
FIELD	1673:16	1673:16	13	outtiled
LEAF_NODE	1673:16	1673:16	14	outtiled
ASSIGN_OP	1673:25	1673:25	12	=
LEAF_NODE	1673:25	1673:25	13	=
RVAL	1673:27	1673:27	12	TRUE
FIELD	1673:27	1673:27	13	TRUE
LEAF_NODE	1673:27	1673:27	14	TRUE
LEAF_NODE	1673:31	1673:31	10	;
EXPR_STATEMENT	1674:2	1674:31	9	* deftilelength = atoi ( optarg ) ;
EXPR	1674:2	1674:2	10	* deftilelength = atoi ( optarg )
ASSIGN	1674:2	1674:19	11	* deftilelength = atoi ( optarg )
LVAL	1674:2	1674:2	12	* deftilelength
UNARY_EXPR	1674:2	1674:3	13	* deftilelength
UNARY_OPERATOR	1674:2	1674:2	14	*
LEAF_NODE	1674:2	1674:2	15	*
FIELD	1674:3	1674:3	14	deftilelength
LEAF_NODE	1674:3	1674:3	15	deftilelength
ASSIGN_OP	1674:17	1674:17	12	=
LEAF_NODE	1674:17	1674:17	13	=
RVAL	1674:19	1674:19	12	atoi ( optarg )
FUNCTION_CALL	1674:19	1674:30	13	atoi ( optarg )
CALLEE	1674:19	1674:19	14	atoi
LEAF_NODE	1674:19	1674:19	15	atoi
LEAF_NODE	1674:23	1674:23	14	(
ARGUMENT	1674:24	1674:24	14	optarg
FIELD	1674:24	1674:24	15	optarg
LEAF_NODE	1674:24	1674:24	16	optarg
LEAF_NODE	1674:30	1674:30	14	)
LEAF_NODE	1674:31	1674:31	10	;
JUMP_STATEMENT	1675:2	1675:7	9	break DESTINATION ;
KEYWORD	1675:2	1675:2	10	break
LEAF_NODE	1675:2	1675:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1675:7	1675:7	10	;
LEAF_NODE	1676:6	1676:6	9	case
LEAF_NODE	1676:11	1676:11	9	'p'
LEAF_NODE	1676:14	1676:14	9	:
SELECTION	1677:2	1678:4	9	
KEYWORD	1677:2	1677:2	10	if
LEAF_NODE	1677:2	1677:2	11	if
LEAF_NODE	1677:5	1677:5	10	(
CONDITION	1677:6	1677:6	10	streq ( optarg , "separate" )
EXPR	1677:6	1677:6	11	streq ( optarg , "separate" )
FUNCTION_CALL	1677:6	1677:30	12	streq ( optarg , "separate" )
CALLEE	1677:6	1677:6	13	streq
LEAF_NODE	1677:6	1677:6	14	streq
LEAF_NODE	1677:11	1677:11	13	(
ARGUMENT	1677:12	1677:12	13	optarg
FIELD	1677:12	1677:12	14	optarg
LEAF_NODE	1677:12	1677:12	15	optarg
LEAF_NODE	1677:18	1677:18	13	,
ARGUMENT	1677:20	1677:20	13	"separate"
FIELD	1677:20	1677:20	14	"separate"
LEAF_NODE	1677:20	1677:20	15	"separate"
LEAF_NODE	1677:30	1677:30	13	)
LEAF_NODE	1677:31	1677:31	10	)
STATEMENTS	1678:4	1678:4	10	
EXPR_STATEMENT	1678:4	1678:38	11	* defconfig = PLANARCONFIG_SEPARATE ;
EXPR	1678:4	1678:4	12	* defconfig = PLANARCONFIG_SEPARATE
ASSIGN	1678:4	1678:17	13	* defconfig = PLANARCONFIG_SEPARATE
LVAL	1678:4	1678:4	14	* defconfig
UNARY_EXPR	1678:4	1678:5	15	* defconfig
UNARY_OPERATOR	1678:4	1678:4	16	*
LEAF_NODE	1678:4	1678:4	17	*
FIELD	1678:5	1678:5	16	defconfig
LEAF_NODE	1678:5	1678:5	17	defconfig
ASSIGN_OP	1678:15	1678:15	14	=
LEAF_NODE	1678:15	1678:15	15	=
RVAL	1678:17	1678:17	14	PLANARCONFIG_SEPARATE
FIELD	1678:17	1678:17	15	PLANARCONFIG_SEPARATE
LEAF_NODE	1678:17	1678:17	16	PLANARCONFIG_SEPARATE
LEAF_NODE	1678:38	1678:38	12	;
SELECTION	1679:2	1679:7	9	
KEYWORD	1679:2	1679:2	10	else
LEAF_NODE	1679:2	1679:2	11	else
STATEMENTS	1679:7	1679:7	10	
SELECTION	1679:7	1680:4	11	
KEYWORD	1679:7	1679:7	12	if
LEAF_NODE	1679:7	1679:7	13	if
LEAF_NODE	1679:10	1679:10	12	(
CONDITION	1679:11	1679:11	12	streq ( optarg , "contig" )
EXPR	1679:11	1679:11	13	streq ( optarg , "contig" )
FUNCTION_CALL	1679:11	1679:33	14	streq ( optarg , "contig" )
CALLEE	1679:11	1679:11	15	streq
LEAF_NODE	1679:11	1679:11	16	streq
LEAF_NODE	1679:16	1679:16	15	(
ARGUMENT	1679:17	1679:17	15	optarg
FIELD	1679:17	1679:17	16	optarg
LEAF_NODE	1679:17	1679:17	17	optarg
LEAF_NODE	1679:23	1679:23	15	,
ARGUMENT	1679:25	1679:25	15	"contig"
FIELD	1679:25	1679:25	16	"contig"
LEAF_NODE	1679:25	1679:25	17	"contig"
LEAF_NODE	1679:33	1679:33	15	)
LEAF_NODE	1679:34	1679:34	12	)
STATEMENTS	1680:4	1680:4	12	
EXPR_STATEMENT	1680:4	1680:36	13	* defconfig = PLANARCONFIG_CONTIG ;
EXPR	1680:4	1680:4	14	* defconfig = PLANARCONFIG_CONTIG
ASSIGN	1680:4	1680:17	15	* defconfig = PLANARCONFIG_CONTIG
LVAL	1680:4	1680:4	16	* defconfig
UNARY_EXPR	1680:4	1680:5	17	* defconfig
UNARY_OPERATOR	1680:4	1680:4	18	*
LEAF_NODE	1680:4	1680:4	19	*
FIELD	1680:5	1680:5	18	defconfig
LEAF_NODE	1680:5	1680:5	19	defconfig
ASSIGN_OP	1680:15	1680:15	16	=
LEAF_NODE	1680:15	1680:15	17	=
RVAL	1680:17	1680:17	16	PLANARCONFIG_CONTIG
FIELD	1680:17	1680:17	17	PLANARCONFIG_CONTIG
LEAF_NODE	1680:17	1680:17	18	PLANARCONFIG_CONTIG
LEAF_NODE	1680:36	1680:36	14	;
SELECTION	1681:2	1682:4	9	
KEYWORD	1681:2	1681:2	10	else
LEAF_NODE	1681:2	1681:2	11	else
STATEMENTS	1682:4	1686:18	10	
LEAF_NODE	1682:4	1682:4	11	{
STATEMENTS	1683:4	1685:18	11	
EXPR_STATEMENT	1683:4	1683:60	12	TIFFError ( "Unknown planar configuration" , "%s" , optarg ) ;
EXPR	1683:4	1683:4	13	TIFFError ( "Unknown planar configuration" , "%s" , optarg )
FUNCTION_CALL	1683:4	1683:59	14	TIFFError ( "Unknown planar configuration" , "%s" , optarg )
CALLEE	1683:4	1683:4	15	TIFFError
LEAF_NODE	1683:4	1683:4	16	TIFFError
LEAF_NODE	1683:14	1683:14	15	(
ARGUMENT	1683:15	1683:15	15	"Unknown planar configuration"
FIELD	1683:15	1683:15	16	"Unknown planar configuration"
LEAF_NODE	1683:15	1683:15	17	"Unknown planar configuration"
LEAF_NODE	1683:45	1683:45	15	,
ARGUMENT	1683:47	1683:47	15	"%s"
FIELD	1683:47	1683:47	16	"%s"
LEAF_NODE	1683:47	1683:47	17	"%s"
LEAF_NODE	1683:51	1683:51	15	,
ARGUMENT	1683:53	1683:53	15	optarg
FIELD	1683:53	1683:53	16	optarg
LEAF_NODE	1683:53	1683:53	17	optarg
LEAF_NODE	1683:59	1683:59	15	)
LEAF_NODE	1683:60	1683:60	13	;
EXPR_STATEMENT	1684:18	1684:69	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1684:18	1684:18	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1684:18	1684:68	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1684:18	1684:18	15	TIFFError
LEAF_NODE	1684:18	1684:18	16	TIFFError
LEAF_NODE	1684:28	1684:28	15	(
ARGUMENT	1684:29	1684:29	15	"For valid options type"
FIELD	1684:29	1684:29	16	"For valid options type"
LEAF_NODE	1684:29	1684:29	17	"For valid options type"
LEAF_NODE	1684:53	1684:53	15	,
ARGUMENT	1684:55	1684:55	15	"tiffcrop -h"
FIELD	1684:55	1684:55	16	"tiffcrop -h"
LEAF_NODE	1684:55	1684:55	17	"tiffcrop -h"
LEAF_NODE	1684:68	1684:68	15	)
LEAF_NODE	1684:69	1684:69	13	;
EXPR_STATEMENT	1685:18	1685:27	12	exit ( - 1 ) ;
EXPR	1685:18	1685:18	13	exit ( - 1 )
FUNCTION_CALL	1685:18	1685:26	14	exit ( - 1 )
CALLEE	1685:18	1685:18	15	exit
LEAF_NODE	1685:18	1685:18	16	exit
LEAF_NODE	1685:23	1685:23	15	(
ARGUMENT	1685:24	1685:24	15	- 1
UNARY_EXPR	1685:24	1685:25	16	- 1
UNARY_OPERATOR	1685:24	1685:24	17	-
LEAF_NODE	1685:24	1685:24	18	-
FIELD	1685:25	1685:25	17	1
LEAF_NODE	1685:25	1685:25	18	1
LEAF_NODE	1685:26	1685:26	15	)
LEAF_NODE	1685:27	1685:27	13	;
LEAF_NODE	1686:18	1686:18	11	}
JUMP_STATEMENT	1687:2	1687:7	9	break DESTINATION ;
KEYWORD	1687:2	1687:2	10	break
LEAF_NODE	1687:2	1687:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1687:7	1687:7	10	;
LEAF_NODE	1688:6	1688:6	9	case
LEAF_NODE	1688:11	1688:11	9	'r'
LEAF_NODE	1688:14	1688:14	9	:
EXPR_STATEMENT	1689:2	1689:33	9	* defrowsperstrip = atol ( optarg ) ;
EXPR	1689:2	1689:2	10	* defrowsperstrip = atol ( optarg )
ASSIGN	1689:2	1689:21	11	* defrowsperstrip = atol ( optarg )
LVAL	1689:2	1689:2	12	* defrowsperstrip
UNARY_EXPR	1689:2	1689:3	13	* defrowsperstrip
UNARY_OPERATOR	1689:2	1689:2	14	*
LEAF_NODE	1689:2	1689:2	15	*
FIELD	1689:3	1689:3	14	defrowsperstrip
LEAF_NODE	1689:3	1689:3	15	defrowsperstrip
ASSIGN_OP	1689:19	1689:19	12	=
LEAF_NODE	1689:19	1689:19	13	=
RVAL	1689:21	1689:21	12	atol ( optarg )
FUNCTION_CALL	1689:21	1689:32	13	atol ( optarg )
CALLEE	1689:21	1689:21	14	atol
LEAF_NODE	1689:21	1689:21	15	atol
LEAF_NODE	1689:25	1689:25	14	(
ARGUMENT	1689:26	1689:26	14	optarg
FIELD	1689:26	1689:26	15	optarg
LEAF_NODE	1689:26	1689:26	16	optarg
LEAF_NODE	1689:32	1689:32	14	)
LEAF_NODE	1689:33	1689:33	10	;
JUMP_STATEMENT	1690:2	1690:7	9	break DESTINATION ;
KEYWORD	1690:2	1690:2	10	break
LEAF_NODE	1690:2	1690:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1690:7	1690:7	10	;
LEAF_NODE	1691:6	1691:6	9	case
LEAF_NODE	1691:11	1691:11	9	's'
LEAF_NODE	1691:14	1691:14	9	:
EXPR_STATEMENT	1692:2	1692:18	9	outtiled = FALSE ;
EXPR	1692:2	1692:2	10	outtiled = FALSE
ASSIGN	1692:2	1692:13	11	outtiled = FALSE
LVAL	1692:2	1692:2	12	outtiled
FIELD	1692:2	1692:2	13	outtiled
LEAF_NODE	1692:2	1692:2	14	outtiled
ASSIGN_OP	1692:11	1692:11	12	=
LEAF_NODE	1692:11	1692:11	13	=
RVAL	1692:13	1692:13	12	FALSE
FIELD	1692:13	1692:13	13	FALSE
LEAF_NODE	1692:13	1692:13	14	FALSE
LEAF_NODE	1692:18	1692:18	10	;
JUMP_STATEMENT	1693:2	1693:7	9	break DESTINATION ;
KEYWORD	1693:2	1693:2	10	break
LEAF_NODE	1693:2	1693:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1693:7	1693:7	10	;
LEAF_NODE	1694:6	1694:6	9	case
LEAF_NODE	1694:11	1694:11	9	't'
LEAF_NODE	1694:14	1694:14	9	:
EXPR_STATEMENT	1695:2	1695:17	9	outtiled = TRUE ;
EXPR	1695:2	1695:2	10	outtiled = TRUE
ASSIGN	1695:2	1695:13	11	outtiled = TRUE
LVAL	1695:2	1695:2	12	outtiled
FIELD	1695:2	1695:2	13	outtiled
LEAF_NODE	1695:2	1695:2	14	outtiled
ASSIGN_OP	1695:11	1695:11	12	=
LEAF_NODE	1695:11	1695:11	13	=
RVAL	1695:13	1695:13	12	TRUE
FIELD	1695:13	1695:13	13	TRUE
LEAF_NODE	1695:13	1695:13	14	TRUE
LEAF_NODE	1695:17	1695:17	10	;
JUMP_STATEMENT	1696:2	1696:7	9	break DESTINATION ;
KEYWORD	1696:2	1696:2	10	break
LEAF_NODE	1696:2	1696:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1696:7	1696:7	10	;
LEAF_NODE	1697:6	1697:6	9	case
LEAF_NODE	1697:11	1697:11	9	'v'
LEAF_NODE	1697:14	1697:14	9	:
EXPR_STATEMENT	1697:16	1697:68	9	TIFFError ( "Library Release" , "%s" , TIFFGetVersion ( ) ) ;
EXPR	1697:16	1697:16	10	TIFFError ( "Library Release" , "%s" , TIFFGetVersion ( ) )
FUNCTION_CALL	1697:16	1697:67	11	TIFFError ( "Library Release" , "%s" , TIFFGetVersion ( ) )
CALLEE	1697:16	1697:16	12	TIFFError
LEAF_NODE	1697:16	1697:16	13	TIFFError
LEAF_NODE	1697:25	1697:25	12	(
ARGUMENT	1697:26	1697:26	12	"Library Release"
FIELD	1697:26	1697:26	13	"Library Release"
LEAF_NODE	1697:26	1697:26	14	"Library Release"
LEAF_NODE	1697:43	1697:43	12	,
ARGUMENT	1697:45	1697:45	12	"%s"
FIELD	1697:45	1697:45	13	"%s"
LEAF_NODE	1697:45	1697:45	14	"%s"
LEAF_NODE	1697:49	1697:49	12	,
ARGUMENT	1697:51	1697:51	12	TIFFGetVersion ( )
FUNCTION_CALL	1697:51	1697:66	13	TIFFGetVersion ( )
CALLEE	1697:51	1697:51	14	TIFFGetVersion
LEAF_NODE	1697:51	1697:51	15	TIFFGetVersion
LEAF_NODE	1697:65	1697:65	14	(
LEAF_NODE	1697:66	1697:66	14	)
LEAF_NODE	1697:67	1697:67	12	)
LEAF_NODE	1697:68	1697:68	10	;
EXPR_STATEMENT	1698:16	1699:45	9	TIFFError ( "Tiffcrop version" , "%s, last updated: %s" , tiffcrop_version_id , tiffcrop_rev_date ) ;
EXPR	1698:16	1698:16	10	TIFFError ( "Tiffcrop version" , "%s, last updated: %s" , tiffcrop_version_id , tiffcrop_rev_date )
FUNCTION_CALL	1698:16	1699:44	11	TIFFError ( "Tiffcrop version" , "%s, last updated: %s" , tiffcrop_version_id , tiffcrop_rev_date )
CALLEE	1698:16	1698:16	12	TIFFError
LEAF_NODE	1698:16	1698:16	13	TIFFError
LEAF_NODE	1698:26	1698:26	12	(
ARGUMENT	1698:27	1698:27	12	"Tiffcrop version"
FIELD	1698:27	1698:27	13	"Tiffcrop version"
LEAF_NODE	1698:27	1698:27	14	"Tiffcrop version"
LEAF_NODE	1698:45	1698:45	12	,
ARGUMENT	1698:47	1698:47	12	"%s, last updated: %s"
FIELD	1698:47	1698:47	13	"%s, last updated: %s"
LEAF_NODE	1698:47	1698:47	14	"%s, last updated: %s"
LEAF_NODE	1698:69	1698:69	12	,
ARGUMENT	1699:6	1699:6	12	tiffcrop_version_id
FIELD	1699:6	1699:6	13	tiffcrop_version_id
LEAF_NODE	1699:6	1699:6	14	tiffcrop_version_id
LEAF_NODE	1699:25	1699:25	12	,
ARGUMENT	1699:27	1699:27	12	tiffcrop_rev_date
FIELD	1699:27	1699:27	13	tiffcrop_rev_date
LEAF_NODE	1699:27	1699:27	14	tiffcrop_rev_date
LEAF_NODE	1699:44	1699:44	12	)
LEAF_NODE	1699:45	1699:45	10	;
EXPR_STATEMENT	1700:10	1700:74	9	TIFFError ( "Tiffcp code" , "Copyright (c) 1988-1997 Sam Leffler" ) ;
EXPR	1700:10	1700:10	10	TIFFError ( "Tiffcp code" , "Copyright (c) 1988-1997 Sam Leffler" )
FUNCTION_CALL	1700:10	1700:73	11	TIFFError ( "Tiffcp code" , "Copyright (c) 1988-1997 Sam Leffler" )
CALLEE	1700:10	1700:10	12	TIFFError
LEAF_NODE	1700:10	1700:10	13	TIFFError
LEAF_NODE	1700:20	1700:20	12	(
ARGUMENT	1700:21	1700:21	12	"Tiffcp code"
FIELD	1700:21	1700:21	13	"Tiffcp code"
LEAF_NODE	1700:21	1700:21	14	"Tiffcp code"
LEAF_NODE	1700:34	1700:34	12	,
ARGUMENT	1700:36	1700:36	12	"Copyright (c) 1988-1997 Sam Leffler"
FIELD	1700:36	1700:36	13	"Copyright (c) 1988-1997 Sam Leffler"
LEAF_NODE	1700:36	1700:36	14	"Copyright (c) 1988-1997 Sam Leffler"
LEAF_NODE	1700:73	1700:73	12	)
LEAF_NODE	1700:74	1700:74	10	;
EXPR_STATEMENT	1701:2	1701:76	9	TIFFError ( "           " , "Copyright (c) 1991-1997 Silicon Graphics, Inc" ) ;
EXPR	1701:2	1701:2	10	TIFFError ( "           " , "Copyright (c) 1991-1997 Silicon Graphics, Inc" )
FUNCTION_CALL	1701:2	1701:75	11	TIFFError ( "           " , "Copyright (c) 1991-1997 Silicon Graphics, Inc" )
CALLEE	1701:2	1701:2	12	TIFFError
LEAF_NODE	1701:2	1701:2	13	TIFFError
LEAF_NODE	1701:12	1701:12	12	(
ARGUMENT	1701:13	1701:13	12	"           "
FIELD	1701:13	1701:13	13	"           "
LEAF_NODE	1701:13	1701:13	14	"           "
LEAF_NODE	1701:26	1701:26	12	,
ARGUMENT	1701:28	1701:28	12	"Copyright (c) 1991-1997 Silicon Graphics, Inc"
FIELD	1701:28	1701:28	13	"Copyright (c) 1991-1997 Silicon Graphics, Inc"
LEAF_NODE	1701:28	1701:28	14	"Copyright (c) 1991-1997 Silicon Graphics, Inc"
LEAF_NODE	1701:75	1701:75	12	)
LEAF_NODE	1701:76	1701:76	10	;
EXPR_STATEMENT	1702:16	1702:89	9	TIFFError ( "Tiffcrop additions" , "Copyright (c) 2007-2010 Richard Nolde" ) ;
EXPR	1702:16	1702:16	10	TIFFError ( "Tiffcrop additions" , "Copyright (c) 2007-2010 Richard Nolde" )
FUNCTION_CALL	1702:16	1702:88	11	TIFFError ( "Tiffcrop additions" , "Copyright (c) 2007-2010 Richard Nolde" )
CALLEE	1702:16	1702:16	12	TIFFError
LEAF_NODE	1702:16	1702:16	13	TIFFError
LEAF_NODE	1702:26	1702:26	12	(
ARGUMENT	1702:27	1702:27	12	"Tiffcrop additions"
FIELD	1702:27	1702:27	13	"Tiffcrop additions"
LEAF_NODE	1702:27	1702:27	14	"Tiffcrop additions"
LEAF_NODE	1702:47	1702:47	12	,
ARGUMENT	1702:49	1702:49	12	"Copyright (c) 2007-2010 Richard Nolde"
FIELD	1702:49	1702:49	13	"Copyright (c) 2007-2010 Richard Nolde"
LEAF_NODE	1702:49	1702:49	14	"Copyright (c) 2007-2010 Richard Nolde"
LEAF_NODE	1702:88	1702:88	12	)
LEAF_NODE	1702:89	1702:89	10	;
EXPR_STATEMENT	1703:9	1703:17	9	exit ( 0 ) ;
EXPR	1703:9	1703:9	10	exit ( 0 )
FUNCTION_CALL	1703:9	1703:16	11	exit ( 0 )
CALLEE	1703:9	1703:9	12	exit
LEAF_NODE	1703:9	1703:9	13	exit
LEAF_NODE	1703:14	1703:14	12	(
ARGUMENT	1703:15	1703:15	12	0
FIELD	1703:15	1703:15	13	0
LEAF_NODE	1703:15	1703:15	14	0
LEAF_NODE	1703:16	1703:16	12	)
LEAF_NODE	1703:17	1703:17	10	;
JUMP_STATEMENT	1704:2	1704:7	9	break DESTINATION ;
KEYWORD	1704:2	1704:2	10	break
LEAF_NODE	1704:2	1704:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1704:7	1704:7	10	;
LEAF_NODE	1705:6	1705:6	9	case
LEAF_NODE	1705:11	1705:11	9	'w'
LEAF_NODE	1705:14	1705:14	9	:
EXPR_STATEMENT	1706:2	1706:17	9	outtiled = TRUE ;
EXPR	1706:2	1706:2	10	outtiled = TRUE
ASSIGN	1706:2	1706:13	11	outtiled = TRUE
LVAL	1706:2	1706:2	12	outtiled
FIELD	1706:2	1706:2	13	outtiled
LEAF_NODE	1706:2	1706:2	14	outtiled
ASSIGN_OP	1706:11	1706:11	12	=
LEAF_NODE	1706:11	1706:11	13	=
RVAL	1706:13	1706:13	12	TRUE
FIELD	1706:13	1706:13	13	TRUE
LEAF_NODE	1706:13	1706:13	14	TRUE
LEAF_NODE	1706:17	1706:17	10	;
EXPR_STATEMENT	1707:2	1707:30	9	* deftilewidth = atoi ( optarg ) ;
EXPR	1707:2	1707:2	10	* deftilewidth = atoi ( optarg )
ASSIGN	1707:2	1707:18	11	* deftilewidth = atoi ( optarg )
LVAL	1707:2	1707:2	12	* deftilewidth
UNARY_EXPR	1707:2	1707:3	13	* deftilewidth
UNARY_OPERATOR	1707:2	1707:2	14	*
LEAF_NODE	1707:2	1707:2	15	*
FIELD	1707:3	1707:3	14	deftilewidth
LEAF_NODE	1707:3	1707:3	15	deftilewidth
ASSIGN_OP	1707:16	1707:16	12	=
LEAF_NODE	1707:16	1707:16	13	=
RVAL	1707:18	1707:18	12	atoi ( optarg )
FUNCTION_CALL	1707:18	1707:29	13	atoi ( optarg )
CALLEE	1707:18	1707:18	14	atoi
LEAF_NODE	1707:18	1707:18	15	atoi
LEAF_NODE	1707:22	1707:22	14	(
ARGUMENT	1707:23	1707:23	14	optarg
FIELD	1707:23	1707:23	15	optarg
LEAF_NODE	1707:23	1707:23	16	optarg
LEAF_NODE	1707:29	1707:29	14	)
LEAF_NODE	1707:30	1707:30	10	;
JUMP_STATEMENT	1708:2	1708:7	9	break DESTINATION ;
KEYWORD	1708:2	1708:2	10	break
LEAF_NODE	1708:2	1708:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1708:7	1708:7	10	;
LEAF_NODE	1709:6	1709:6	9	case
LEAF_NODE	1709:11	1709:11	9	'z'
LEAF_NODE	1709:14	1709:14	9	:
EXPR_STATEMENT	1710:9	1710:45	9	crop_data -> crop_mode |= CROP_REGIONS ;
EXPR	1710:9	1710:9	10	crop_data -> crop_mode |= CROP_REGIONS
ASSIGN	1710:9	1710:33	11	crop_data -> crop_mode |= CROP_REGIONS
LVAL	1710:9	1710:9	12	crop_data -> crop_mode
FIELD	1710:9	1710:20	13	crop_data -> crop_mode
LEAF_NODE	1710:9	1710:9	14	crop_data
LEAF_NODE	1710:18	1710:18	14	->
LEAF_NODE	1710:20	1710:20	14	crop_mode
ASSIGN_OP	1710:30	1710:30	12	|=
LEAF_NODE	1710:30	1710:30	13	|=
RVAL	1710:33	1710:33	12	CROP_REGIONS
FIELD	1710:33	1710:33	13	CROP_REGIONS
LEAF_NODE	1710:33	1710:33	14	CROP_REGIONS
LEAF_NODE	1710:45	1710:45	10	;
ITERATION	1711:2	1714:20	9	
KEYWORD	1711:2	1711:2	10	for
LEAF_NODE	1711:2	1711:2	11	for
LEAF_NODE	1711:6	1711:6	10	(
FOR_INIT	1711:7	1711:44	10	i = 0 , opt_ptr = strtok ( optarg , ":" ) ;
EXPR	1711:7	1711:14	11	i = 0 , opt_ptr = strtok ( optarg , ":" )
ASSIGN	1711:7	1711:11	12	i = 0
LVAL	1711:7	1711:7	13	i
FIELD	1711:7	1711:7	14	i
LEAF_NODE	1711:7	1711:7	15	i
ASSIGN_OP	1711:9	1711:9	13	=
LEAF_NODE	1711:9	1711:9	14	=
RVAL	1711:11	1711:11	13	0
FIELD	1711:11	1711:11	14	0
LEAF_NODE	1711:11	1711:11	15	0
LEAF_NODE	1711:12	1711:12	12	,
ASSIGN	1711:14	1711:24	12	opt_ptr = strtok ( optarg , ":" )
LVAL	1711:14	1711:14	13	opt_ptr
FIELD	1711:14	1711:14	14	opt_ptr
LEAF_NODE	1711:14	1711:14	15	opt_ptr
ASSIGN_OP	1711:22	1711:22	13	=
LEAF_NODE	1711:22	1711:22	14	=
RVAL	1711:24	1711:24	13	strtok ( optarg , ":" )
FUNCTION_CALL	1711:24	1711:43	14	strtok ( optarg , ":" )
CALLEE	1711:24	1711:24	15	strtok
LEAF_NODE	1711:24	1711:24	16	strtok
LEAF_NODE	1711:31	1711:31	15	(
ARGUMENT	1711:32	1711:32	15	optarg
FIELD	1711:32	1711:32	16	optarg
LEAF_NODE	1711:32	1711:32	17	optarg
LEAF_NODE	1711:38	1711:38	15	,
ARGUMENT	1711:40	1711:40	15	":"
FIELD	1711:40	1711:40	16	":"
LEAF_NODE	1711:40	1711:40	17	":"
LEAF_NODE	1711:43	1711:43	15	)
LEAF_NODE	1711:44	1711:44	11	;
CONDITION	1712:19	1712:19	10	( ( opt_ptr != NULL ) && ( i < MAX_REGIONS ) )
EXPR	1712:19	1712:59	11	( ( opt_ptr != NULL ) && ( i < MAX_REGIONS ) )
LEAF_NODE	1712:19	1712:19	12	(
AND	1712:20	1712:42	12	( opt_ptr != NULL ) && ( i < MAX_REGIONS )
EXPR	1712:20	1712:36	13	( opt_ptr != NULL )
LEAF_NODE	1712:20	1712:20	14	(
FIELD	1712:21	1712:21	14	opt_ptr
LEAF_NODE	1712:21	1712:21	15	opt_ptr
EQ_OPERATOR	1712:29	1712:29	14	!=
LEAF_NODE	1712:29	1712:29	15	!=
FIELD	1712:32	1712:32	14	NULL
LEAF_NODE	1712:32	1712:32	15	NULL
LEAF_NODE	1712:36	1712:36	14	)
LEAF_NODE	1712:38	1712:38	13	&&
EXPR	1712:42	1712:58	13	( i < MAX_REGIONS )
LEAF_NODE	1712:42	1712:42	14	(
FIELD	1712:43	1712:43	14	i
LEAF_NODE	1712:43	1712:43	15	i
REL_OPERATOR	1712:45	1712:45	14	<
LEAF_NODE	1712:45	1712:45	15	<
FIELD	1712:47	1712:47	14	MAX_REGIONS
LEAF_NODE	1712:47	1712:47	15	MAX_REGIONS
LEAF_NODE	1712:58	1712:58	14	)
LEAF_NODE	1712:59	1712:59	12	)
LEAF_NODE	1712:60	1712:60	10	;
FOR_EXPR	1713:20	1713:20	10	( opt_ptr = strtok ( NULL , ":" ) ) , i ++
EXPR	1713:20	1713:52	11	( opt_ptr = strtok ( NULL , ":" ) ) , i ++
LEAF_NODE	1713:20	1713:20	12	(
ASSIGN	1713:21	1713:31	12	opt_ptr = strtok ( NULL , ":" )
LVAL	1713:21	1713:21	13	opt_ptr
FIELD	1713:21	1713:21	14	opt_ptr
LEAF_NODE	1713:21	1713:21	15	opt_ptr
ASSIGN_OP	1713:29	1713:29	13	=
LEAF_NODE	1713:29	1713:29	14	=
RVAL	1713:31	1713:31	13	strtok ( NULL , ":" )
FUNCTION_CALL	1713:31	1713:48	14	strtok ( NULL , ":" )
CALLEE	1713:31	1713:31	15	strtok
LEAF_NODE	1713:31	1713:31	16	strtok
LEAF_NODE	1713:38	1713:38	15	(
ARGUMENT	1713:39	1713:39	15	NULL
FIELD	1713:39	1713:39	16	NULL
LEAF_NODE	1713:39	1713:39	17	NULL
LEAF_NODE	1713:43	1713:43	15	,
ARGUMENT	1713:45	1713:45	15	":"
FIELD	1713:45	1713:45	16	":"
LEAF_NODE	1713:45	1713:45	17	":"
LEAF_NODE	1713:48	1713:48	15	)
LEAF_NODE	1713:49	1713:49	12	)
LEAF_NODE	1713:50	1713:50	12	,
FIELD	1713:52	1713:53	12	i ++
LEAF_NODE	1713:52	1713:52	13	i
LEAF_NODE	1713:53	1713:53	13	++
LEAF_NODE	1713:55	1713:55	10	)
STATEMENTS	1714:20	1724:20	10	
LEAF_NODE	1714:20	1714:20	11	{
STATEMENTS	1715:6	1716:20	11	
EXPR_STATEMENT	1715:6	1715:26	12	crop_data -> regions ++ ;
EXPR	1715:6	1715:6	13	crop_data -> regions ++
FIELD	1715:6	1715:24	14	crop_data -> regions ++
LEAF_NODE	1715:6	1715:6	15	crop_data
LEAF_NODE	1715:15	1715:15	15	->
LEAF_NODE	1715:17	1715:17	15	regions
LEAF_NODE	1715:24	1715:24	15	++
LEAF_NODE	1715:26	1715:26	13	;
SELECTION	1716:20	1719:22	12	
KEYWORD	1716:20	1716:20	13	if
LEAF_NODE	1716:20	1716:20	14	if
LEAF_NODE	1716:23	1716:23	13	(
CONDITION	1716:24	1716:24	13	sscanf ( opt_ptr , "%lf,%lf,%lf,%lf" , & crop_data -> corners [ i ] . X1 , & crop_data -> corners [ i ] . Y1 , & crop_data -> corners [ i ] . X2 , & crop_data -> corners [ i ] . Y2 ) != 4
EXPR	1716:24	1718:67	14	sscanf ( opt_ptr , "%lf,%lf,%lf,%lf" , & crop_data -> corners [ i ] . X1 , & crop_data -> corners [ i ] . Y1 , & crop_data -> corners [ i ] . X2 , & crop_data -> corners [ i ] . Y2 ) != 4
FUNCTION_CALL	1716:24	1718:62	15	sscanf ( opt_ptr , "%lf,%lf,%lf,%lf" , & crop_data -> corners [ i ] . X1 , & crop_data -> corners [ i ] . Y1 , & crop_data -> corners [ i ] . X2 , & crop_data -> corners [ i ] . Y2 )
CALLEE	1716:24	1716:24	16	sscanf
LEAF_NODE	1716:24	1716:24	17	sscanf
LEAF_NODE	1716:30	1716:30	16	(
ARGUMENT	1716:31	1716:31	16	opt_ptr
FIELD	1716:31	1716:31	17	opt_ptr
LEAF_NODE	1716:31	1716:31	18	opt_ptr
LEAF_NODE	1716:38	1716:38	16	,
ARGUMENT	1716:40	1716:40	16	"%lf,%lf,%lf,%lf"
FIELD	1716:40	1716:40	17	"%lf,%lf,%lf,%lf"
LEAF_NODE	1716:40	1716:40	18	"%lf,%lf,%lf,%lf"
LEAF_NODE	1716:57	1716:57	16	,
ARGUMENT	1717:10	1717:10	16	& crop_data -> corners [ i ] . X1
UNARY_EXPR	1717:10	1717:11	17	& crop_data -> corners [ i ] . X1
UNARY_OPERATOR	1717:10	1717:10	18	&
LEAF_NODE	1717:10	1717:10	19	&
FIELD	1717:11	1717:33	18	crop_data -> corners [ i ] . X1
LEAF_NODE	1717:11	1717:11	19	crop_data
LEAF_NODE	1717:20	1717:20	19	->
LEAF_NODE	1717:22	1717:22	19	corners
LEAF_NODE	1717:29	1717:29	19	[
EXPR	1717:30	1717:30	19	i
FIELD	1717:30	1717:30	20	i
LEAF_NODE	1717:30	1717:30	21	i
LEAF_NODE	1717:31	1717:31	19	]
LEAF_NODE	1717:32	1717:32	19	.
LEAF_NODE	1717:33	1717:33	19	X1
LEAF_NODE	1717:35	1717:35	16	,
ARGUMENT	1717:37	1717:37	16	& crop_data -> corners [ i ] . Y1
UNARY_EXPR	1717:37	1717:38	17	& crop_data -> corners [ i ] . Y1
UNARY_OPERATOR	1717:37	1717:37	18	&
LEAF_NODE	1717:37	1717:37	19	&
FIELD	1717:38	1717:60	18	crop_data -> corners [ i ] . Y1
LEAF_NODE	1717:38	1717:38	19	crop_data
LEAF_NODE	1717:47	1717:47	19	->
LEAF_NODE	1717:49	1717:49	19	corners
LEAF_NODE	1717:56	1717:56	19	[
EXPR	1717:57	1717:57	19	i
FIELD	1717:57	1717:57	20	i
LEAF_NODE	1717:57	1717:57	21	i
LEAF_NODE	1717:58	1717:58	19	]
LEAF_NODE	1717:59	1717:59	19	.
LEAF_NODE	1717:60	1717:60	19	Y1
LEAF_NODE	1717:62	1717:62	16	,
ARGUMENT	1718:10	1718:10	16	& crop_data -> corners [ i ] . X2
UNARY_EXPR	1718:10	1718:11	17	& crop_data -> corners [ i ] . X2
UNARY_OPERATOR	1718:10	1718:10	18	&
LEAF_NODE	1718:10	1718:10	19	&
FIELD	1718:11	1718:33	18	crop_data -> corners [ i ] . X2
LEAF_NODE	1718:11	1718:11	19	crop_data
LEAF_NODE	1718:20	1718:20	19	->
LEAF_NODE	1718:22	1718:22	19	corners
LEAF_NODE	1718:29	1718:29	19	[
EXPR	1718:30	1718:30	19	i
FIELD	1718:30	1718:30	20	i
LEAF_NODE	1718:30	1718:30	21	i
LEAF_NODE	1718:31	1718:31	19	]
LEAF_NODE	1718:32	1718:32	19	.
LEAF_NODE	1718:33	1718:33	19	X2
LEAF_NODE	1718:35	1718:35	16	,
ARGUMENT	1718:37	1718:37	16	& crop_data -> corners [ i ] . Y2
UNARY_EXPR	1718:37	1718:38	17	& crop_data -> corners [ i ] . Y2
UNARY_OPERATOR	1718:37	1718:37	18	&
LEAF_NODE	1718:37	1718:37	19	&
FIELD	1718:38	1718:60	18	crop_data -> corners [ i ] . Y2
LEAF_NODE	1718:38	1718:38	19	crop_data
LEAF_NODE	1718:47	1718:47	19	->
LEAF_NODE	1718:49	1718:49	19	corners
LEAF_NODE	1718:56	1718:56	19	[
EXPR	1718:57	1718:57	19	i
FIELD	1718:57	1718:57	20	i
LEAF_NODE	1718:57	1718:57	21	i
LEAF_NODE	1718:58	1718:58	19	]
LEAF_NODE	1718:59	1718:59	19	.
LEAF_NODE	1718:60	1718:60	19	Y2
LEAF_NODE	1718:62	1718:62	16	)
EQ_OPERATOR	1718:64	1718:64	15	!=
LEAF_NODE	1718:64	1718:64	16	!=
FIELD	1718:67	1718:67	15	4
LEAF_NODE	1718:67	1718:67	16	4
LEAF_NODE	1718:68	1718:68	13	)
STATEMENTS	1719:22	1723:8	13	
LEAF_NODE	1719:22	1719:22	14	{
STATEMENTS	1720:22	1722:22	14	
EXPR_STATEMENT	1720:22	1720:94	15	TIFFError ( "Unable to parse coordinates for region" , "%d %s" , i , optarg ) ;
EXPR	1720:22	1720:22	16	TIFFError ( "Unable to parse coordinates for region" , "%d %s" , i , optarg )
FUNCTION_CALL	1720:22	1720:93	17	TIFFError ( "Unable to parse coordinates for region" , "%d %s" , i , optarg )
CALLEE	1720:22	1720:22	18	TIFFError
LEAF_NODE	1720:22	1720:22	19	TIFFError
LEAF_NODE	1720:32	1720:32	18	(
ARGUMENT	1720:33	1720:33	18	"Unable to parse coordinates for region"
FIELD	1720:33	1720:33	19	"Unable to parse coordinates for region"
LEAF_NODE	1720:33	1720:33	20	"Unable to parse coordinates for region"
LEAF_NODE	1720:73	1720:73	18	,
ARGUMENT	1720:75	1720:75	18	"%d %s"
FIELD	1720:75	1720:75	19	"%d %s"
LEAF_NODE	1720:75	1720:75	20	"%d %s"
LEAF_NODE	1720:82	1720:82	18	,
ARGUMENT	1720:84	1720:84	18	i
FIELD	1720:84	1720:84	19	i
LEAF_NODE	1720:84	1720:84	20	i
LEAF_NODE	1720:85	1720:85	18	,
ARGUMENT	1720:87	1720:87	18	optarg
FIELD	1720:87	1720:87	19	optarg
LEAF_NODE	1720:87	1720:87	20	optarg
LEAF_NODE	1720:93	1720:93	18	)
LEAF_NODE	1720:94	1720:94	16	;
EXPR_STATEMENT	1721:8	1721:59	15	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1721:8	1721:8	16	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1721:8	1721:58	17	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1721:8	1721:8	18	TIFFError
LEAF_NODE	1721:8	1721:8	19	TIFFError
LEAF_NODE	1721:18	1721:18	18	(
ARGUMENT	1721:19	1721:19	18	"For valid options type"
FIELD	1721:19	1721:19	19	"For valid options type"
LEAF_NODE	1721:19	1721:19	20	"For valid options type"
LEAF_NODE	1721:43	1721:43	18	,
ARGUMENT	1721:45	1721:45	18	"tiffcrop -h"
FIELD	1721:45	1721:45	19	"tiffcrop -h"
LEAF_NODE	1721:45	1721:45	20	"tiffcrop -h"
LEAF_NODE	1721:58	1721:58	18	)
LEAF_NODE	1721:59	1721:59	16	;
EXPR_STATEMENT	1722:22	1722:31	15	exit ( - 1 ) ;
EXPR	1722:22	1722:22	16	exit ( - 1 )
FUNCTION_CALL	1722:22	1722:30	17	exit ( - 1 )
CALLEE	1722:22	1722:22	18	exit
LEAF_NODE	1722:22	1722:22	19	exit
LEAF_NODE	1722:27	1722:27	18	(
ARGUMENT	1722:28	1722:28	18	- 1
UNARY_EXPR	1722:28	1722:29	19	- 1
UNARY_OPERATOR	1722:28	1722:28	20	-
LEAF_NODE	1722:28	1722:28	21	-
FIELD	1722:29	1722:29	20	1
LEAF_NODE	1722:29	1722:29	21	1
LEAF_NODE	1722:30	1722:30	18	)
LEAF_NODE	1722:31	1722:31	16	;
LEAF_NODE	1723:8	1723:8	14	}
LEAF_NODE	1724:20	1724:20	11	}
SELECTION	1726:16	1727:18	9	
KEYWORD	1726:16	1726:16	10	if
LEAF_NODE	1726:16	1726:16	11	if
LEAF_NODE	1726:19	1726:19	10	(
CONDITION	1726:20	1726:20	10	( opt_ptr != NULL ) && ( i >= MAX_REGIONS )
EXPR	1726:20	1726:20	11	( opt_ptr != NULL ) && ( i >= MAX_REGIONS )
AND	1726:20	1726:41	12	( opt_ptr != NULL ) && ( i >= MAX_REGIONS )
EXPR	1726:20	1726:36	13	( opt_ptr != NULL )
LEAF_NODE	1726:20	1726:20	14	(
FIELD	1726:21	1726:21	14	opt_ptr
LEAF_NODE	1726:21	1726:21	15	opt_ptr
EQ_OPERATOR	1726:29	1726:29	14	!=
LEAF_NODE	1726:29	1726:29	15	!=
FIELD	1726:32	1726:32	14	NULL
LEAF_NODE	1726:32	1726:32	15	NULL
LEAF_NODE	1726:36	1726:36	14	)
LEAF_NODE	1726:38	1726:38	13	&&
EXPR	1726:41	1726:58	13	( i >= MAX_REGIONS )
LEAF_NODE	1726:41	1726:41	14	(
FIELD	1726:42	1726:42	14	i
LEAF_NODE	1726:42	1726:42	15	i
REL_OPERATOR	1726:44	1726:44	14	>=
LEAF_NODE	1726:44	1726:44	15	>=
FIELD	1726:47	1726:47	14	MAX_REGIONS
LEAF_NODE	1726:47	1726:47	15	MAX_REGIONS
LEAF_NODE	1726:58	1726:58	14	)
LEAF_NODE	1726:59	1726:59	10	)
STATEMENTS	1727:18	1731:18	10	
LEAF_NODE	1727:18	1727:18	11	{
STATEMENTS	1728:4	1730:28	11	
EXPR_STATEMENT	1728:4	1728:84	12	TIFFError ( "Region list exceeds limit of" , "%d regions %s" , MAX_REGIONS , optarg ) ;
EXPR	1728:4	1728:4	13	TIFFError ( "Region list exceeds limit of" , "%d regions %s" , MAX_REGIONS , optarg )
FUNCTION_CALL	1728:4	1728:83	14	TIFFError ( "Region list exceeds limit of" , "%d regions %s" , MAX_REGIONS , optarg )
CALLEE	1728:4	1728:4	15	TIFFError
LEAF_NODE	1728:4	1728:4	16	TIFFError
LEAF_NODE	1728:14	1728:14	15	(
ARGUMENT	1728:15	1728:15	15	"Region list exceeds limit of"
FIELD	1728:15	1728:15	16	"Region list exceeds limit of"
LEAF_NODE	1728:15	1728:15	17	"Region list exceeds limit of"
LEAF_NODE	1728:45	1728:45	15	,
ARGUMENT	1728:47	1728:47	15	"%d regions %s"
FIELD	1728:47	1728:47	16	"%d regions %s"
LEAF_NODE	1728:47	1728:47	17	"%d regions %s"
LEAF_NODE	1728:62	1728:62	15	,
ARGUMENT	1728:64	1728:64	15	MAX_REGIONS
FIELD	1728:64	1728:64	16	MAX_REGIONS
LEAF_NODE	1728:64	1728:64	17	MAX_REGIONS
LEAF_NODE	1728:75	1728:75	15	,
ARGUMENT	1728:77	1728:77	15	optarg
FIELD	1728:77	1728:77	16	optarg
LEAF_NODE	1728:77	1728:77	17	optarg
LEAF_NODE	1728:83	1728:83	15	)
LEAF_NODE	1728:84	1728:84	13	;
EXPR_STATEMENT	1729:4	1729:55	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1729:4	1729:4	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1729:4	1729:54	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1729:4	1729:4	15	TIFFError
LEAF_NODE	1729:4	1729:4	16	TIFFError
LEAF_NODE	1729:14	1729:14	15	(
ARGUMENT	1729:15	1729:15	15	"For valid options type"
FIELD	1729:15	1729:15	16	"For valid options type"
LEAF_NODE	1729:15	1729:15	17	"For valid options type"
LEAF_NODE	1729:39	1729:39	15	,
ARGUMENT	1729:41	1729:41	15	"tiffcrop -h"
FIELD	1729:41	1729:41	16	"tiffcrop -h"
LEAF_NODE	1729:41	1729:41	17	"tiffcrop -h"
LEAF_NODE	1729:54	1729:54	15	)
LEAF_NODE	1729:55	1729:55	13	;
EXPR_STATEMENT	1730:18	1730:27	12	exit ( - 1 ) ;
EXPR	1730:18	1730:18	13	exit ( - 1 )
FUNCTION_CALL	1730:18	1730:26	14	exit ( - 1 )
CALLEE	1730:18	1730:18	15	exit
LEAF_NODE	1730:18	1730:18	16	exit
LEAF_NODE	1730:23	1730:23	15	(
ARGUMENT	1730:24	1730:24	15	- 1
UNARY_EXPR	1730:24	1730:25	16	- 1
UNARY_OPERATOR	1730:24	1730:24	17	-
LEAF_NODE	1730:24	1730:24	18	-
FIELD	1730:25	1730:25	17	1
LEAF_NODE	1730:25	1730:25	18	1
LEAF_NODE	1730:26	1730:26	15	)
LEAF_NODE	1730:27	1730:27	13	;
LEAF_NODE	1730:28	1730:28	12	;
LEAF_NODE	1731:18	1731:18	11	}
JUMP_STATEMENT	1732:2	1732:7	9	break DESTINATION ;
KEYWORD	1732:2	1732:2	10	break
LEAF_NODE	1732:2	1732:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1732:7	1732:7	10	;
LEAF_NODE	1734:6	1734:6	9	case
LEAF_NODE	1734:11	1734:11	9	'B'
LEAF_NODE	1734:14	1734:14	9	:
EXPR_STATEMENT	1734:16	1734:27	9	* mp ++ = 'b' ;
EXPR	1734:16	1734:16	10	* mp ++ = 'b'
ASSIGN	1734:16	1734:24	11	* mp ++ = 'b'
LVAL	1734:16	1734:16	12	* mp ++
UNARY_EXPR	1734:16	1734:17	13	* mp ++
UNARY_OPERATOR	1734:16	1734:16	14	*
LEAF_NODE	1734:16	1734:16	15	*
FIELD	1734:17	1734:19	14	mp ++
LEAF_NODE	1734:17	1734:17	15	mp
LEAF_NODE	1734:19	1734:19	15	++
ASSIGN_OP	1734:22	1734:22	12	=
LEAF_NODE	1734:22	1734:22	13	=
RVAL	1734:24	1734:24	12	'b'
FIELD	1734:24	1734:24	13	'b'
LEAF_NODE	1734:24	1734:24	14	'b'
LEAF_NODE	1734:27	1734:27	10	;
EXPR_STATEMENT	1734:29	1734:39	9	* mp = '\0' ;
EXPR	1734:29	1734:29	10	* mp = '\0'
ASSIGN	1734:29	1734:35	11	* mp = '\0'
LVAL	1734:29	1734:29	12	* mp
UNARY_EXPR	1734:29	1734:30	13	* mp
UNARY_OPERATOR	1734:29	1734:29	14	*
LEAF_NODE	1734:29	1734:29	15	*
FIELD	1734:30	1734:30	14	mp
LEAF_NODE	1734:30	1734:30	15	mp
ASSIGN_OP	1734:33	1734:33	12	=
LEAF_NODE	1734:33	1734:33	13	=
RVAL	1734:35	1734:35	12	'\0'
FIELD	1734:35	1734:35	13	'\0'
LEAF_NODE	1734:35	1734:35	14	'\0'
LEAF_NODE	1734:39	1734:39	10	;
JUMP_STATEMENT	1735:2	1735:7	9	break DESTINATION ;
KEYWORD	1735:2	1735:2	10	break
LEAF_NODE	1735:2	1735:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1735:7	1735:7	10	;
LEAF_NODE	1736:6	1736:6	9	case
LEAF_NODE	1736:11	1736:11	9	'L'
LEAF_NODE	1736:14	1736:14	9	:
EXPR_STATEMENT	1736:16	1736:27	9	* mp ++ = 'l' ;
EXPR	1736:16	1736:16	10	* mp ++ = 'l'
ASSIGN	1736:16	1736:24	11	* mp ++ = 'l'
LVAL	1736:16	1736:16	12	* mp ++
UNARY_EXPR	1736:16	1736:17	13	* mp ++
UNARY_OPERATOR	1736:16	1736:16	14	*
LEAF_NODE	1736:16	1736:16	15	*
FIELD	1736:17	1736:19	14	mp ++
LEAF_NODE	1736:17	1736:17	15	mp
LEAF_NODE	1736:19	1736:19	15	++
ASSIGN_OP	1736:22	1736:22	12	=
LEAF_NODE	1736:22	1736:22	13	=
RVAL	1736:24	1736:24	12	'l'
FIELD	1736:24	1736:24	13	'l'
LEAF_NODE	1736:24	1736:24	14	'l'
LEAF_NODE	1736:27	1736:27	10	;
EXPR_STATEMENT	1736:29	1736:39	9	* mp = '\0' ;
EXPR	1736:29	1736:29	10	* mp = '\0'
ASSIGN	1736:29	1736:35	11	* mp = '\0'
LVAL	1736:29	1736:29	12	* mp
UNARY_EXPR	1736:29	1736:30	13	* mp
UNARY_OPERATOR	1736:29	1736:29	14	*
LEAF_NODE	1736:29	1736:29	15	*
FIELD	1736:30	1736:30	14	mp
LEAF_NODE	1736:30	1736:30	15	mp
ASSIGN_OP	1736:33	1736:33	12	=
LEAF_NODE	1736:33	1736:33	13	=
RVAL	1736:35	1736:35	12	'\0'
FIELD	1736:35	1736:35	13	'\0'
LEAF_NODE	1736:35	1736:35	14	'\0'
LEAF_NODE	1736:39	1736:39	10	;
JUMP_STATEMENT	1737:2	1737:7	9	break DESTINATION ;
KEYWORD	1737:2	1737:2	10	break
LEAF_NODE	1737:2	1737:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1737:7	1737:7	10	;
LEAF_NODE	1738:6	1738:6	9	case
LEAF_NODE	1738:11	1738:11	9	'M'
LEAF_NODE	1738:14	1738:14	9	:
EXPR_STATEMENT	1738:16	1738:27	9	* mp ++ = 'm' ;
EXPR	1738:16	1738:16	10	* mp ++ = 'm'
ASSIGN	1738:16	1738:24	11	* mp ++ = 'm'
LVAL	1738:16	1738:16	12	* mp ++
UNARY_EXPR	1738:16	1738:17	13	* mp ++
UNARY_OPERATOR	1738:16	1738:16	14	*
LEAF_NODE	1738:16	1738:16	15	*
FIELD	1738:17	1738:19	14	mp ++
LEAF_NODE	1738:17	1738:17	15	mp
LEAF_NODE	1738:19	1738:19	15	++
ASSIGN_OP	1738:22	1738:22	12	=
LEAF_NODE	1738:22	1738:22	13	=
RVAL	1738:24	1738:24	12	'm'
FIELD	1738:24	1738:24	13	'm'
LEAF_NODE	1738:24	1738:24	14	'm'
LEAF_NODE	1738:27	1738:27	10	;
EXPR_STATEMENT	1738:29	1738:39	9	* mp = '\0' ;
EXPR	1738:29	1738:29	10	* mp = '\0'
ASSIGN	1738:29	1738:35	11	* mp = '\0'
LVAL	1738:29	1738:29	12	* mp
UNARY_EXPR	1738:29	1738:30	13	* mp
UNARY_OPERATOR	1738:29	1738:29	14	*
LEAF_NODE	1738:29	1738:29	15	*
FIELD	1738:30	1738:30	14	mp
LEAF_NODE	1738:30	1738:30	15	mp
ASSIGN_OP	1738:33	1738:33	12	=
LEAF_NODE	1738:33	1738:33	13	=
RVAL	1738:35	1738:35	12	'\0'
FIELD	1738:35	1738:35	13	'\0'
LEAF_NODE	1738:35	1738:35	14	'\0'
LEAF_NODE	1738:39	1738:39	10	;
JUMP_STATEMENT	1739:2	1739:7	9	break DESTINATION ;
KEYWORD	1739:2	1739:2	10	break
LEAF_NODE	1739:2	1739:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1739:7	1739:7	10	;
LEAF_NODE	1740:6	1740:6	9	case
LEAF_NODE	1740:11	1740:11	9	'C'
LEAF_NODE	1740:14	1740:14	9	:
EXPR_STATEMENT	1740:16	1740:27	9	* mp ++ = 'c' ;
EXPR	1740:16	1740:16	10	* mp ++ = 'c'
ASSIGN	1740:16	1740:24	11	* mp ++ = 'c'
LVAL	1740:16	1740:16	12	* mp ++
UNARY_EXPR	1740:16	1740:17	13	* mp ++
UNARY_OPERATOR	1740:16	1740:16	14	*
LEAF_NODE	1740:16	1740:16	15	*
FIELD	1740:17	1740:19	14	mp ++
LEAF_NODE	1740:17	1740:17	15	mp
LEAF_NODE	1740:19	1740:19	15	++
ASSIGN_OP	1740:22	1740:22	12	=
LEAF_NODE	1740:22	1740:22	13	=
RVAL	1740:24	1740:24	12	'c'
FIELD	1740:24	1740:24	13	'c'
LEAF_NODE	1740:24	1740:24	14	'c'
LEAF_NODE	1740:27	1740:27	10	;
EXPR_STATEMENT	1740:29	1740:39	9	* mp = '\0' ;
EXPR	1740:29	1740:29	10	* mp = '\0'
ASSIGN	1740:29	1740:35	11	* mp = '\0'
LVAL	1740:29	1740:29	12	* mp
UNARY_EXPR	1740:29	1740:30	13	* mp
UNARY_OPERATOR	1740:29	1740:29	14	*
LEAF_NODE	1740:29	1740:29	15	*
FIELD	1740:30	1740:30	14	mp
LEAF_NODE	1740:30	1740:30	15	mp
ASSIGN_OP	1740:33	1740:33	12	=
LEAF_NODE	1740:33	1740:33	13	=
RVAL	1740:35	1740:35	12	'\0'
FIELD	1740:35	1740:35	13	'\0'
LEAF_NODE	1740:35	1740:35	14	'\0'
LEAF_NODE	1740:39	1740:39	10	;
JUMP_STATEMENT	1741:2	1741:7	9	break DESTINATION ;
KEYWORD	1741:2	1741:2	10	break
LEAF_NODE	1741:2	1741:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1741:7	1741:7	10	;
LEAF_NODE	1743:6	1743:6	9	case
LEAF_NODE	1743:11	1743:11	9	'D'
LEAF_NODE	1743:14	1743:14	9	:
ITERATION	1743:16	1746:20	9	
KEYWORD	1743:16	1743:16	10	for
LEAF_NODE	1743:16	1743:16	11	for
LEAF_NODE	1743:20	1743:20	10	(
FOR_INIT	1743:21	1743:58	10	i = 0 , opt_ptr = strtok ( optarg , "," ) ;
EXPR	1743:21	1743:28	11	i = 0 , opt_ptr = strtok ( optarg , "," )
ASSIGN	1743:21	1743:25	12	i = 0
LVAL	1743:21	1743:21	13	i
FIELD	1743:21	1743:21	14	i
LEAF_NODE	1743:21	1743:21	15	i
ASSIGN_OP	1743:23	1743:23	13	=
LEAF_NODE	1743:23	1743:23	14	=
RVAL	1743:25	1743:25	13	0
FIELD	1743:25	1743:25	14	0
LEAF_NODE	1743:25	1743:25	15	0
LEAF_NODE	1743:26	1743:26	12	,
ASSIGN	1743:28	1743:38	12	opt_ptr = strtok ( optarg , "," )
LVAL	1743:28	1743:28	13	opt_ptr
FIELD	1743:28	1743:28	14	opt_ptr
LEAF_NODE	1743:28	1743:28	15	opt_ptr
ASSIGN_OP	1743:36	1743:36	13	=
LEAF_NODE	1743:36	1743:36	14	=
RVAL	1743:38	1743:38	13	strtok ( optarg , "," )
FUNCTION_CALL	1743:38	1743:57	14	strtok ( optarg , "," )
CALLEE	1743:38	1743:38	15	strtok
LEAF_NODE	1743:38	1743:38	16	strtok
LEAF_NODE	1743:45	1743:45	15	(
ARGUMENT	1743:46	1743:46	15	optarg
FIELD	1743:46	1743:46	16	optarg
LEAF_NODE	1743:46	1743:46	17	optarg
LEAF_NODE	1743:52	1743:52	15	,
ARGUMENT	1743:54	1743:54	15	","
FIELD	1743:54	1743:54	16	","
LEAF_NODE	1743:54	1743:54	17	","
LEAF_NODE	1743:57	1743:57	15	)
LEAF_NODE	1743:58	1743:58	11	;
CONDITION	1744:20	1744:20	10	( opt_ptr != NULL )
EXPR	1744:20	1744:36	11	( opt_ptr != NULL )
LEAF_NODE	1744:20	1744:20	12	(
FIELD	1744:21	1744:21	12	opt_ptr
LEAF_NODE	1744:21	1744:21	13	opt_ptr
EQ_OPERATOR	1744:29	1744:29	12	!=
LEAF_NODE	1744:29	1744:29	13	!=
FIELD	1744:32	1744:32	12	NULL
LEAF_NODE	1744:32	1744:32	13	NULL
LEAF_NODE	1744:36	1744:36	12	)
LEAF_NODE	1744:37	1744:37	10	;
FOR_EXPR	1745:20	1745:20	10	( opt_ptr = strtok ( NULL , "," ) ) , i ++
EXPR	1745:20	1745:52	11	( opt_ptr = strtok ( NULL , "," ) ) , i ++
LEAF_NODE	1745:20	1745:20	12	(
ASSIGN	1745:21	1745:31	12	opt_ptr = strtok ( NULL , "," )
LVAL	1745:21	1745:21	13	opt_ptr
FIELD	1745:21	1745:21	14	opt_ptr
LEAF_NODE	1745:21	1745:21	15	opt_ptr
ASSIGN_OP	1745:29	1745:29	13	=
LEAF_NODE	1745:29	1745:29	14	=
RVAL	1745:31	1745:31	13	strtok ( NULL , "," )
FUNCTION_CALL	1745:31	1745:48	14	strtok ( NULL , "," )
CALLEE	1745:31	1745:31	15	strtok
LEAF_NODE	1745:31	1745:31	16	strtok
LEAF_NODE	1745:38	1745:38	15	(
ARGUMENT	1745:39	1745:39	15	NULL
FIELD	1745:39	1745:39	16	NULL
LEAF_NODE	1745:39	1745:39	17	NULL
LEAF_NODE	1745:43	1745:43	15	,
ARGUMENT	1745:45	1745:45	15	","
FIELD	1745:45	1745:45	16	","
LEAF_NODE	1745:45	1745:45	17	","
LEAF_NODE	1745:48	1745:48	15	)
LEAF_NODE	1745:49	1745:49	12	)
LEAF_NODE	1745:50	1745:50	12	,
FIELD	1745:52	1745:53	12	i ++
LEAF_NODE	1745:52	1745:52	13	i
LEAF_NODE	1745:53	1745:53	13	++
LEAF_NODE	1745:55	1745:55	10	)
STATEMENTS	1746:20	1807:20	10	
LEAF_NODE	1746:20	1746:20	11	{
STATEMENTS	1747:6	1788:6	11	
EXPR_STATEMENT	1747:6	1747:41	12	opt_offset = strpbrk ( opt_ptr , ":=" ) ;
EXPR	1747:6	1747:6	13	opt_offset = strpbrk ( opt_ptr , ":=" )
ASSIGN	1747:6	1747:19	14	opt_offset = strpbrk ( opt_ptr , ":=" )
LVAL	1747:6	1747:6	15	opt_offset
FIELD	1747:6	1747:6	16	opt_offset
LEAF_NODE	1747:6	1747:6	17	opt_offset
ASSIGN_OP	1747:17	1747:17	15	=
LEAF_NODE	1747:17	1747:17	16	=
RVAL	1747:19	1747:19	15	strpbrk ( opt_ptr , ":=" )
FUNCTION_CALL	1747:19	1747:40	16	strpbrk ( opt_ptr , ":=" )
CALLEE	1747:19	1747:19	17	strpbrk
LEAF_NODE	1747:19	1747:19	18	strpbrk
LEAF_NODE	1747:26	1747:26	17	(
ARGUMENT	1747:27	1747:27	17	opt_ptr
FIELD	1747:27	1747:27	18	opt_ptr
LEAF_NODE	1747:27	1747:27	19	opt_ptr
LEAF_NODE	1747:34	1747:34	17	,
ARGUMENT	1747:36	1747:36	17	":="
FIELD	1747:36	1747:36	18	":="
LEAF_NODE	1747:36	1747:36	19	":="
LEAF_NODE	1747:40	1747:40	17	)
LEAF_NODE	1747:41	1747:41	13	;
SELECTION	1748:20	1749:22	12	
KEYWORD	1748:20	1748:20	13	if
LEAF_NODE	1748:20	1748:20	14	if
LEAF_NODE	1748:23	1748:23	13	(
CONDITION	1748:24	1748:24	13	opt_offset == NULL
EXPR	1748:24	1748:38	14	opt_offset == NULL
FIELD	1748:24	1748:24	15	opt_offset
LEAF_NODE	1748:24	1748:24	16	opt_offset
EQ_OPERATOR	1748:35	1748:35	15	==
LEAF_NODE	1748:35	1748:35	16	==
FIELD	1748:38	1748:38	15	NULL
LEAF_NODE	1748:38	1748:38	16	NULL
LEAF_NODE	1748:42	1748:42	13	)
STATEMENTS	1749:22	1753:8	13	
LEAF_NODE	1749:22	1749:22	14	{
STATEMENTS	1750:22	1752:22	14	
EXPR_STATEMENT	1750:22	1750:68	15	TIFFError ( "Invalid dump option" , "%s" , optarg ) ;
EXPR	1750:22	1750:22	16	TIFFError ( "Invalid dump option" , "%s" , optarg )
FUNCTION_CALL	1750:22	1750:67	17	TIFFError ( "Invalid dump option" , "%s" , optarg )
CALLEE	1750:22	1750:22	18	TIFFError
LEAF_NODE	1750:22	1750:22	19	TIFFError
LEAF_NODE	1750:31	1750:31	18	(
ARGUMENT	1750:32	1750:32	18	"Invalid dump option"
FIELD	1750:32	1750:32	19	"Invalid dump option"
LEAF_NODE	1750:32	1750:32	20	"Invalid dump option"
LEAF_NODE	1750:53	1750:53	18	,
ARGUMENT	1750:55	1750:55	18	"%s"
FIELD	1750:55	1750:55	19	"%s"
LEAF_NODE	1750:55	1750:55	20	"%s"
LEAF_NODE	1750:59	1750:59	18	,
ARGUMENT	1750:61	1750:61	18	optarg
FIELD	1750:61	1750:61	19	optarg
LEAF_NODE	1750:61	1750:61	20	optarg
LEAF_NODE	1750:67	1750:67	18	)
LEAF_NODE	1750:68	1750:68	16	;
EXPR_STATEMENT	1751:22	1751:73	15	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1751:22	1751:22	16	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1751:22	1751:72	17	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1751:22	1751:22	18	TIFFError
LEAF_NODE	1751:22	1751:22	19	TIFFError
LEAF_NODE	1751:32	1751:32	18	(
ARGUMENT	1751:33	1751:33	18	"For valid options type"
FIELD	1751:33	1751:33	19	"For valid options type"
LEAF_NODE	1751:33	1751:33	20	"For valid options type"
LEAF_NODE	1751:57	1751:57	18	,
ARGUMENT	1751:59	1751:59	18	"tiffcrop -h"
FIELD	1751:59	1751:59	19	"tiffcrop -h"
LEAF_NODE	1751:59	1751:59	20	"tiffcrop -h"
LEAF_NODE	1751:72	1751:72	18	)
LEAF_NODE	1751:73	1751:73	16	;
EXPR_STATEMENT	1752:22	1752:31	15	exit ( - 1 ) ;
EXPR	1752:22	1752:22	16	exit ( - 1 )
FUNCTION_CALL	1752:22	1752:30	17	exit ( - 1 )
CALLEE	1752:22	1752:22	18	exit
LEAF_NODE	1752:22	1752:22	19	exit
LEAF_NODE	1752:27	1752:27	18	(
ARGUMENT	1752:28	1752:28	18	- 1
UNARY_EXPR	1752:28	1752:29	19	- 1
UNARY_OPERATOR	1752:28	1752:28	20	-
LEAF_NODE	1752:28	1752:28	21	-
FIELD	1752:29	1752:29	20	1
LEAF_NODE	1752:29	1752:29	21	1
LEAF_NODE	1752:30	1752:30	18	)
LEAF_NODE	1752:31	1752:31	16	;
LEAF_NODE	1753:8	1753:8	14	}
EXPR_STATEMENT	1755:20	1755:38	12	* opt_offset = '\0' ;
EXPR	1755:20	1755:20	13	* opt_offset = '\0'
ASSIGN	1755:20	1755:34	14	* opt_offset = '\0'
LVAL	1755:20	1755:20	15	* opt_offset
UNARY_EXPR	1755:20	1755:21	16	* opt_offset
UNARY_OPERATOR	1755:20	1755:20	17	*
LEAF_NODE	1755:20	1755:20	18	*
FIELD	1755:21	1755:21	17	opt_offset
LEAF_NODE	1755:21	1755:21	18	opt_offset
ASSIGN_OP	1755:32	1755:32	15	=
LEAF_NODE	1755:32	1755:32	16	=
RVAL	1755:34	1755:34	15	'\0'
FIELD	1755:34	1755:34	16	'\0'
LEAF_NODE	1755:34	1755:34	17	'\0'
LEAF_NODE	1755:38	1755:38	13	;
EXPR_STATEMENT	1757:20	1757:42	12	end = strlen ( opt_ptr ) ;
EXPR	1757:20	1757:20	13	end = strlen ( opt_ptr )
ASSIGN	1757:20	1757:26	14	end = strlen ( opt_ptr )
LVAL	1757:20	1757:20	15	end
FIELD	1757:20	1757:20	16	end
LEAF_NODE	1757:20	1757:20	17	end
ASSIGN_OP	1757:24	1757:24	15	=
LEAF_NODE	1757:24	1757:24	16	=
RVAL	1757:26	1757:26	15	strlen ( opt_ptr )
FUNCTION_CALL	1757:26	1757:41	16	strlen ( opt_ptr )
CALLEE	1757:26	1757:26	17	strlen
LEAF_NODE	1757:26	1757:26	18	strlen
LEAF_NODE	1757:33	1757:33	17	(
ARGUMENT	1757:34	1757:34	17	opt_ptr
FIELD	1757:34	1757:34	18	opt_ptr
LEAF_NODE	1757:34	1757:34	19	opt_ptr
LEAF_NODE	1757:41	1757:41	17	)
LEAF_NODE	1757:42	1757:42	13	;
ITERATION	1758:20	1759:22	12	
KEYWORD	1758:20	1758:20	13	for
LEAF_NODE	1758:20	1758:20	14	for
LEAF_NODE	1758:24	1758:24	13	(
FOR_INIT	1758:25	1758:30	13	i = 0 ;
EXPR	1758:25	1758:25	14	i = 0
ASSIGN	1758:25	1758:29	15	i = 0
LVAL	1758:25	1758:25	16	i
FIELD	1758:25	1758:25	17	i
LEAF_NODE	1758:25	1758:25	18	i
ASSIGN_OP	1758:27	1758:27	16	=
LEAF_NODE	1758:27	1758:27	17	=
RVAL	1758:29	1758:29	16	0
FIELD	1758:29	1758:29	17	0
LEAF_NODE	1758:29	1758:29	18	0
LEAF_NODE	1758:30	1758:30	14	;
CONDITION	1758:32	1758:32	13	i < end
EXPR	1758:32	1758:36	14	i < end
FIELD	1758:32	1758:32	15	i
LEAF_NODE	1758:32	1758:32	16	i
REL_OPERATOR	1758:34	1758:34	15	<
LEAF_NODE	1758:34	1758:34	16	<
FIELD	1758:36	1758:36	15	end
LEAF_NODE	1758:36	1758:36	16	end
LEAF_NODE	1758:39	1758:39	13	;
FOR_EXPR	1758:41	1758:41	13	i ++
EXPR	1758:41	1758:41	14	i ++
FIELD	1758:41	1758:42	15	i ++
LEAF_NODE	1758:41	1758:41	16	i
LEAF_NODE	1758:42	1758:42	16	++
LEAF_NODE	1758:44	1758:44	13	)
STATEMENTS	1759:22	1759:22	13	
EXPR_STATEMENT	1759:22	1759:68	14	* ( opt_ptr + i ) = tolower ( ( int ) * ( opt_ptr + i ) ) ;
EXPR	1759:22	1759:22	15	* ( opt_ptr + i ) = tolower ( ( int ) * ( opt_ptr + i ) )
ASSIGN	1759:22	1759:39	16	* ( opt_ptr + i ) = tolower ( ( int ) * ( opt_ptr + i ) )
LVAL	1759:22	1759:22	17	* ( opt_ptr + i )
UNARY_EXPR	1759:22	1759:35	18	* ( opt_ptr + i )
UNARY_OPERATOR	1759:22	1759:22	19	*
LEAF_NODE	1759:22	1759:22	20	*
LEAF_NODE	1759:23	1759:23	19	(
FIELD	1759:24	1759:24	19	opt_ptr
LEAF_NODE	1759:24	1759:24	20	opt_ptr
LEAF_NODE	1759:32	1759:32	19	+
FIELD	1759:34	1759:34	19	i
LEAF_NODE	1759:34	1759:34	20	i
LEAF_NODE	1759:35	1759:35	19	)
ASSIGN_OP	1759:37	1759:37	17	=
LEAF_NODE	1759:37	1759:37	18	=
RVAL	1759:39	1759:39	17	tolower ( ( int ) * ( opt_ptr + i ) )
FUNCTION_CALL	1759:39	1759:67	18	tolower ( ( int ) * ( opt_ptr + i ) )
CALLEE	1759:39	1759:39	19	tolower
LEAF_NODE	1759:39	1759:39	20	tolower
LEAF_NODE	1759:46	1759:46	19	(
ARGUMENT	1759:47	1759:53	19	( int ) * ( opt_ptr + i )
LEAF_NODE	1759:47	1759:47	20	(
TYPE_NAME	1759:48	1759:48	20	int
LEAF_NODE	1759:48	1759:48	21	int
LEAF_NODE	1759:51	1759:51	20	)
UNARY_EXPR	1759:53	1759:66	20	* ( opt_ptr + i )
UNARY_OPERATOR	1759:53	1759:53	21	*
LEAF_NODE	1759:53	1759:53	22	*
LEAF_NODE	1759:54	1759:54	21	(
FIELD	1759:55	1759:55	21	opt_ptr
LEAF_NODE	1759:55	1759:55	22	opt_ptr
LEAF_NODE	1759:63	1759:63	21	+
FIELD	1759:65	1759:65	21	i
LEAF_NODE	1759:65	1759:65	22	i
LEAF_NODE	1759:66	1759:66	21	)
LEAF_NODE	1759:67	1759:67	19	)
LEAF_NODE	1759:68	1759:68	15	;
SELECTION	1761:20	1762:22	12	
KEYWORD	1761:20	1761:20	13	if
LEAF_NODE	1761:20	1761:20	14	if
LEAF_NODE	1761:23	1761:23	13	(
CONDITION	1761:24	1761:24	13	strncmp ( opt_ptr , "for" , 3 ) == 0
EXPR	1761:24	1761:54	14	strncmp ( opt_ptr , "for" , 3 ) == 0
FUNCTION_CALL	1761:24	1761:49	15	strncmp ( opt_ptr , "for" , 3 )
CALLEE	1761:24	1761:24	16	strncmp
LEAF_NODE	1761:24	1761:24	17	strncmp
LEAF_NODE	1761:31	1761:31	16	(
ARGUMENT	1761:32	1761:32	16	opt_ptr
FIELD	1761:32	1761:32	17	opt_ptr
LEAF_NODE	1761:32	1761:32	18	opt_ptr
LEAF_NODE	1761:39	1761:39	16	,
ARGUMENT	1761:41	1761:41	16	"for"
FIELD	1761:41	1761:41	17	"for"
LEAF_NODE	1761:41	1761:41	18	"for"
LEAF_NODE	1761:46	1761:46	16	,
ARGUMENT	1761:48	1761:48	16	3
FIELD	1761:48	1761:48	17	3
LEAF_NODE	1761:48	1761:48	18	3
LEAF_NODE	1761:49	1761:49	16	)
EQ_OPERATOR	1761:51	1761:51	15	==
LEAF_NODE	1761:51	1761:51	16	==
FIELD	1761:54	1761:54	15	0
LEAF_NODE	1761:54	1761:54	16	0
LEAF_NODE	1761:55	1761:55	13	)
STATEMENTS	1762:22	1787:22	13	
LEAF_NODE	1762:22	1762:22	14	{
STATEMENTS	1764:22	1773:22	14	
EXPR_STATEMENT	1764:22	1764:51	15	end = strlen ( opt_offset + 1 ) ;
EXPR	1764:22	1764:22	16	end = strlen ( opt_offset + 1 )
ASSIGN	1764:22	1764:28	17	end = strlen ( opt_offset + 1 )
LVAL	1764:22	1764:22	18	end
FIELD	1764:22	1764:22	19	end
LEAF_NODE	1764:22	1764:22	20	end
ASSIGN_OP	1764:26	1764:26	18	=
LEAF_NODE	1764:26	1764:26	19	=
RVAL	1764:28	1764:28	18	strlen ( opt_offset + 1 )
FUNCTION_CALL	1764:28	1764:50	19	strlen ( opt_offset + 1 )
CALLEE	1764:28	1764:28	20	strlen
LEAF_NODE	1764:28	1764:28	21	strlen
LEAF_NODE	1764:35	1764:35	20	(
ARGUMENT	1764:36	1764:49	20	opt_offset + 1
FIELD	1764:36	1764:36	21	opt_offset
LEAF_NODE	1764:36	1764:36	22	opt_offset
LEAF_NODE	1764:47	1764:47	21	+
FIELD	1764:49	1764:49	21	1
LEAF_NODE	1764:49	1764:49	22	1
LEAF_NODE	1764:50	1764:50	20	)
LEAF_NODE	1764:51	1764:51	16	;
ITERATION	1765:22	1766:24	15	
KEYWORD	1765:22	1765:22	16	for
LEAF_NODE	1765:22	1765:22	17	for
LEAF_NODE	1765:26	1765:26	16	(
FOR_INIT	1765:27	1765:32	16	i = 1 ;
EXPR	1765:27	1765:27	17	i = 1
ASSIGN	1765:27	1765:31	18	i = 1
LVAL	1765:27	1765:27	19	i
FIELD	1765:27	1765:27	20	i
LEAF_NODE	1765:27	1765:27	21	i
ASSIGN_OP	1765:29	1765:29	19	=
LEAF_NODE	1765:29	1765:29	20	=
RVAL	1765:31	1765:31	19	1
FIELD	1765:31	1765:31	20	1
LEAF_NODE	1765:31	1765:31	21	1
LEAF_NODE	1765:32	1765:32	17	;
CONDITION	1765:34	1765:34	16	i <= end
EXPR	1765:34	1765:39	17	i <= end
FIELD	1765:34	1765:34	18	i
LEAF_NODE	1765:34	1765:34	19	i
REL_OPERATOR	1765:36	1765:36	18	<=
LEAF_NODE	1765:36	1765:36	19	<=
FIELD	1765:39	1765:39	18	end
LEAF_NODE	1765:39	1765:39	19	end
LEAF_NODE	1765:42	1765:42	16	;
FOR_EXPR	1765:44	1765:44	16	i ++
EXPR	1765:44	1765:44	17	i ++
FIELD	1765:44	1765:45	18	i ++
LEAF_NODE	1765:44	1765:44	19	i
LEAF_NODE	1765:45	1765:45	19	++
LEAF_NODE	1765:47	1765:47	16	)
STATEMENTS	1766:24	1766:24	16	
EXPR_STATEMENT	1766:24	1766:76	17	* ( opt_offset + i ) = tolower ( ( int ) * ( opt_offset + i ) ) ;
EXPR	1766:24	1766:24	18	* ( opt_offset + i ) = tolower ( ( int ) * ( opt_offset + i ) )
ASSIGN	1766:24	1766:44	19	* ( opt_offset + i ) = tolower ( ( int ) * ( opt_offset + i ) )
LVAL	1766:24	1766:24	20	* ( opt_offset + i )
UNARY_EXPR	1766:24	1766:40	21	* ( opt_offset + i )
UNARY_OPERATOR	1766:24	1766:24	22	*
LEAF_NODE	1766:24	1766:24	23	*
LEAF_NODE	1766:25	1766:25	22	(
FIELD	1766:26	1766:26	22	opt_offset
LEAF_NODE	1766:26	1766:26	23	opt_offset
LEAF_NODE	1766:37	1766:37	22	+
FIELD	1766:39	1766:39	22	i
LEAF_NODE	1766:39	1766:39	23	i
LEAF_NODE	1766:40	1766:40	22	)
ASSIGN_OP	1766:42	1766:42	20	=
LEAF_NODE	1766:42	1766:42	21	=
RVAL	1766:44	1766:44	20	tolower ( ( int ) * ( opt_offset + i ) )
FUNCTION_CALL	1766:44	1766:75	21	tolower ( ( int ) * ( opt_offset + i ) )
CALLEE	1766:44	1766:44	22	tolower
LEAF_NODE	1766:44	1766:44	23	tolower
LEAF_NODE	1766:51	1766:51	22	(
ARGUMENT	1766:52	1766:58	22	( int ) * ( opt_offset + i )
LEAF_NODE	1766:52	1766:52	23	(
TYPE_NAME	1766:53	1766:53	23	int
LEAF_NODE	1766:53	1766:53	24	int
LEAF_NODE	1766:56	1766:56	23	)
UNARY_EXPR	1766:58	1766:74	23	* ( opt_offset + i )
UNARY_OPERATOR	1766:58	1766:58	24	*
LEAF_NODE	1766:58	1766:58	25	*
LEAF_NODE	1766:59	1766:59	24	(
FIELD	1766:60	1766:60	24	opt_offset
LEAF_NODE	1766:60	1766:60	25	opt_offset
LEAF_NODE	1766:71	1766:71	24	+
FIELD	1766:73	1766:73	24	i
LEAF_NODE	1766:73	1766:73	25	i
LEAF_NODE	1766:74	1766:74	24	)
LEAF_NODE	1766:75	1766:75	22	)
LEAF_NODE	1766:76	1766:76	18	;
SELECTION	1768:8	1769:24	15	
KEYWORD	1768:8	1768:8	16	if
LEAF_NODE	1768:8	1768:8	17	if
LEAF_NODE	1768:11	1768:11	16	(
CONDITION	1768:12	1768:12	16	strncmp ( opt_offset + 1 , "txt" , 3 ) == 0
EXPR	1768:12	1768:50	17	strncmp ( opt_offset + 1 , "txt" , 3 ) == 0
FUNCTION_CALL	1768:12	1768:45	18	strncmp ( opt_offset + 1 , "txt" , 3 )
CALLEE	1768:12	1768:12	19	strncmp
LEAF_NODE	1768:12	1768:12	20	strncmp
LEAF_NODE	1768:20	1768:20	19	(
ARGUMENT	1768:21	1768:34	19	opt_offset + 1
FIELD	1768:21	1768:21	20	opt_offset
LEAF_NODE	1768:21	1768:21	21	opt_offset
LEAF_NODE	1768:32	1768:32	20	+
FIELD	1768:34	1768:34	20	1
LEAF_NODE	1768:34	1768:34	21	1
LEAF_NODE	1768:35	1768:35	19	,
ARGUMENT	1768:37	1768:37	19	"txt"
FIELD	1768:37	1768:37	20	"txt"
LEAF_NODE	1768:37	1768:37	21	"txt"
LEAF_NODE	1768:42	1768:42	19	,
ARGUMENT	1768:44	1768:44	19	3
FIELD	1768:44	1768:44	20	3
LEAF_NODE	1768:44	1768:44	21	3
LEAF_NODE	1768:45	1768:45	19	)
EQ_OPERATOR	1768:47	1768:47	18	==
LEAF_NODE	1768:47	1768:47	19	==
FIELD	1768:50	1768:50	18	0
LEAF_NODE	1768:50	1768:50	19	0
LEAF_NODE	1768:51	1768:51	16	)
STATEMENTS	1769:24	1772:24	16	
LEAF_NODE	1769:24	1769:24	17	{
STATEMENTS	1770:24	1771:24	17	
EXPR_STATEMENT	1770:24	1770:48	18	dump -> format = DUMP_TEXT ;
EXPR	1770:24	1770:24	19	dump -> format = DUMP_TEXT
ASSIGN	1770:24	1770:39	20	dump -> format = DUMP_TEXT
LVAL	1770:24	1770:24	21	dump -> format
FIELD	1770:24	1770:30	22	dump -> format
LEAF_NODE	1770:24	1770:24	23	dump
LEAF_NODE	1770:28	1770:28	23	->
LEAF_NODE	1770:30	1770:30	23	format
ASSIGN_OP	1770:37	1770:37	21	=
LEAF_NODE	1770:37	1770:37	22	=
RVAL	1770:39	1770:39	21	DUMP_TEXT
FIELD	1770:39	1770:39	22	DUMP_TEXT
LEAF_NODE	1770:39	1770:39	23	DUMP_TEXT
LEAF_NODE	1770:48	1770:48	19	;
EXPR_STATEMENT	1771:24	1771:48	18	strcpy ( dump -> mode , "w" ) ;
EXPR	1771:24	1771:24	19	strcpy ( dump -> mode , "w" )
FUNCTION_CALL	1771:24	1771:47	20	strcpy ( dump -> mode , "w" )
CALLEE	1771:24	1771:24	21	strcpy
LEAF_NODE	1771:24	1771:24	22	strcpy
LEAF_NODE	1771:31	1771:31	21	(
ARGUMENT	1771:32	1771:32	21	dump -> mode
FIELD	1771:32	1771:38	22	dump -> mode
LEAF_NODE	1771:32	1771:32	23	dump
LEAF_NODE	1771:36	1771:36	23	->
LEAF_NODE	1771:38	1771:38	23	mode
LEAF_NODE	1771:42	1771:42	21	,
ARGUMENT	1771:44	1771:44	21	"w"
FIELD	1771:44	1771:44	22	"w"
LEAF_NODE	1771:44	1771:44	23	"w"
LEAF_NODE	1771:47	1771:47	21	)
LEAF_NODE	1771:48	1771:48	19	;
LEAF_NODE	1772:24	1772:24	17	}
SELECTION	1773:22	1774:24	15	
KEYWORD	1773:22	1773:22	16	else
LEAF_NODE	1773:22	1773:22	17	else
STATEMENTS	1774:24	1786:3	16	
LEAF_NODE	1774:24	1774:24	17	{
STATEMENTS	1775:10	1780:24	17	
SELECTION	1775:10	1776:26	18	
KEYWORD	1775:10	1775:10	19	if
LEAF_NODE	1775:10	1775:10	20	if
LEAF_NODE	1775:13	1775:13	19	(
CONDITION	1775:14	1775:14	19	strncmp ( opt_offset + 1 , "raw" , 3 ) == 0
EXPR	1775:14	1775:51	20	strncmp ( opt_offset + 1 , "raw" , 3 ) == 0
FUNCTION_CALL	1775:14	1775:46	21	strncmp ( opt_offset + 1 , "raw" , 3 )
CALLEE	1775:14	1775:14	22	strncmp
LEAF_NODE	1775:14	1775:14	23	strncmp
LEAF_NODE	1775:21	1775:21	22	(
ARGUMENT	1775:22	1775:35	22	opt_offset + 1
FIELD	1775:22	1775:22	23	opt_offset
LEAF_NODE	1775:22	1775:22	24	opt_offset
LEAF_NODE	1775:33	1775:33	23	+
FIELD	1775:35	1775:35	23	1
LEAF_NODE	1775:35	1775:35	24	1
LEAF_NODE	1775:36	1775:36	22	,
ARGUMENT	1775:38	1775:38	22	"raw"
FIELD	1775:38	1775:38	23	"raw"
LEAF_NODE	1775:38	1775:38	24	"raw"
LEAF_NODE	1775:43	1775:43	22	,
ARGUMENT	1775:45	1775:45	22	3
FIELD	1775:45	1775:45	23	3
LEAF_NODE	1775:45	1775:45	24	3
LEAF_NODE	1775:46	1775:46	22	)
EQ_OPERATOR	1775:48	1775:48	21	==
LEAF_NODE	1775:48	1775:48	22	==
FIELD	1775:51	1775:51	21	0
LEAF_NODE	1775:51	1775:51	22	0
LEAF_NODE	1775:52	1775:52	19	)
STATEMENTS	1776:26	1779:26	19	
LEAF_NODE	1776:26	1776:26	20	{
STATEMENTS	1777:26	1778:26	20	
EXPR_STATEMENT	1777:26	1777:49	21	dump -> format = DUMP_RAW ;
EXPR	1777:26	1777:26	22	dump -> format = DUMP_RAW
ASSIGN	1777:26	1777:41	23	dump -> format = DUMP_RAW
LVAL	1777:26	1777:26	24	dump -> format
FIELD	1777:26	1777:32	25	dump -> format
LEAF_NODE	1777:26	1777:26	26	dump
LEAF_NODE	1777:30	1777:30	26	->
LEAF_NODE	1777:32	1777:32	26	format
ASSIGN_OP	1777:39	1777:39	24	=
LEAF_NODE	1777:39	1777:39	25	=
RVAL	1777:41	1777:41	24	DUMP_RAW
FIELD	1777:41	1777:41	25	DUMP_RAW
LEAF_NODE	1777:41	1777:41	26	DUMP_RAW
LEAF_NODE	1777:49	1777:49	22	;
EXPR_STATEMENT	1778:26	1778:51	21	strcpy ( dump -> mode , "wb" ) ;
EXPR	1778:26	1778:26	22	strcpy ( dump -> mode , "wb" )
FUNCTION_CALL	1778:26	1778:50	23	strcpy ( dump -> mode , "wb" )
CALLEE	1778:26	1778:26	24	strcpy
LEAF_NODE	1778:26	1778:26	25	strcpy
LEAF_NODE	1778:33	1778:33	24	(
ARGUMENT	1778:34	1778:34	24	dump -> mode
FIELD	1778:34	1778:40	25	dump -> mode
LEAF_NODE	1778:34	1778:34	26	dump
LEAF_NODE	1778:38	1778:38	26	->
LEAF_NODE	1778:40	1778:40	26	mode
LEAF_NODE	1778:44	1778:44	24	,
ARGUMENT	1778:46	1778:46	24	"wb"
FIELD	1778:46	1778:46	25	"wb"
LEAF_NODE	1778:46	1778:46	26	"wb"
LEAF_NODE	1778:50	1778:50	24	)
LEAF_NODE	1778:51	1778:51	22	;
LEAF_NODE	1779:26	1779:26	20	}
SELECTION	1780:24	1781:26	18	
KEYWORD	1780:24	1780:24	19	else
LEAF_NODE	1780:24	1780:24	20	else
STATEMENTS	1781:26	1785:12	19	
LEAF_NODE	1781:26	1781:26	20	{
STATEMENTS	1782:26	1784:26	20	
EXPR_STATEMENT	1782:26	1782:99	21	TIFFError ( "parse_command_opts" , "Unknown dump format %s" , opt_offset + 1 ) ;
EXPR	1782:26	1782:26	22	TIFFError ( "parse_command_opts" , "Unknown dump format %s" , opt_offset + 1 )
FUNCTION_CALL	1782:26	1782:98	23	TIFFError ( "parse_command_opts" , "Unknown dump format %s" , opt_offset + 1 )
CALLEE	1782:26	1782:26	24	TIFFError
LEAF_NODE	1782:26	1782:26	25	TIFFError
LEAF_NODE	1782:35	1782:35	24	(
ARGUMENT	1782:36	1782:36	24	"parse_command_opts"
FIELD	1782:36	1782:36	25	"parse_command_opts"
LEAF_NODE	1782:36	1782:36	26	"parse_command_opts"
LEAF_NODE	1782:56	1782:56	24	,
ARGUMENT	1782:58	1782:58	24	"Unknown dump format %s"
FIELD	1782:58	1782:58	25	"Unknown dump format %s"
LEAF_NODE	1782:58	1782:58	26	"Unknown dump format %s"
LEAF_NODE	1782:82	1782:82	24	,
ARGUMENT	1782:84	1782:97	24	opt_offset + 1
FIELD	1782:84	1782:84	25	opt_offset
LEAF_NODE	1782:84	1782:84	26	opt_offset
LEAF_NODE	1782:95	1782:95	25	+
FIELD	1782:97	1782:97	25	1
LEAF_NODE	1782:97	1782:97	26	1
LEAF_NODE	1782:98	1782:98	24	)
LEAF_NODE	1782:99	1782:99	22	;
EXPR_STATEMENT	1783:26	1783:77	21	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1783:26	1783:26	22	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1783:26	1783:76	23	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1783:26	1783:26	24	TIFFError
LEAF_NODE	1783:26	1783:26	25	TIFFError
LEAF_NODE	1783:36	1783:36	24	(
ARGUMENT	1783:37	1783:37	24	"For valid options type"
FIELD	1783:37	1783:37	25	"For valid options type"
LEAF_NODE	1783:37	1783:37	26	"For valid options type"
LEAF_NODE	1783:61	1783:61	24	,
ARGUMENT	1783:63	1783:63	24	"tiffcrop -h"
FIELD	1783:63	1783:63	25	"tiffcrop -h"
LEAF_NODE	1783:63	1783:63	26	"tiffcrop -h"
LEAF_NODE	1783:76	1783:76	24	)
LEAF_NODE	1783:77	1783:77	22	;
EXPR_STATEMENT	1784:26	1784:35	21	exit ( - 1 ) ;
EXPR	1784:26	1784:26	22	exit ( - 1 )
FUNCTION_CALL	1784:26	1784:34	23	exit ( - 1 )
CALLEE	1784:26	1784:26	24	exit
LEAF_NODE	1784:26	1784:26	25	exit
LEAF_NODE	1784:31	1784:31	24	(
ARGUMENT	1784:32	1784:32	24	- 1
UNARY_EXPR	1784:32	1784:33	25	- 1
UNARY_OPERATOR	1784:32	1784:32	26	-
LEAF_NODE	1784:32	1784:32	27	-
FIELD	1784:33	1784:33	26	1
LEAF_NODE	1784:33	1784:33	27	1
LEAF_NODE	1784:34	1784:34	24	)
LEAF_NODE	1784:35	1784:35	22	;
LEAF_NODE	1785:12	1785:12	20	}
LEAF_NODE	1786:3	1786:3	17	}
LEAF_NODE	1787:22	1787:22	14	}
SELECTION	1788:6	1789:22	12	
KEYWORD	1788:6	1788:6	13	else
LEAF_NODE	1788:6	1788:6	14	else
STATEMENTS	1789:22	1806:8	13	
LEAF_NODE	1789:22	1789:22	14	{
STATEMENTS	1790:22	1804:22	14	
SELECTION	1790:22	1791:24	15	
KEYWORD	1790:22	1790:22	16	if
LEAF_NODE	1790:22	1790:22	17	if
LEAF_NODE	1790:25	1790:25	16	(
CONDITION	1790:26	1790:26	16	strncmp ( opt_ptr , "lev" , 3 ) == 0
EXPR	1790:26	1790:57	17	strncmp ( opt_ptr , "lev" , 3 ) == 0
FUNCTION_CALL	1790:26	1790:52	18	strncmp ( opt_ptr , "lev" , 3 )
CALLEE	1790:26	1790:26	19	strncmp
LEAF_NODE	1790:26	1790:26	20	strncmp
LEAF_NODE	1790:34	1790:34	19	(
ARGUMENT	1790:35	1790:35	19	opt_ptr
FIELD	1790:35	1790:35	20	opt_ptr
LEAF_NODE	1790:35	1790:35	21	opt_ptr
LEAF_NODE	1790:42	1790:42	19	,
ARGUMENT	1790:44	1790:44	19	"lev"
FIELD	1790:44	1790:44	20	"lev"
LEAF_NODE	1790:44	1790:44	21	"lev"
LEAF_NODE	1790:49	1790:49	19	,
ARGUMENT	1790:51	1790:51	19	3
FIELD	1790:51	1790:51	20	3
LEAF_NODE	1790:51	1790:51	21	3
LEAF_NODE	1790:52	1790:52	19	)
EQ_OPERATOR	1790:54	1790:54	18	==
LEAF_NODE	1790:54	1790:54	19	==
FIELD	1790:57	1790:57	18	0
LEAF_NODE	1790:57	1790:57	19	0
LEAF_NODE	1790:58	1790:58	16	)
STATEMENTS	1791:24	1791:24	16	
EXPR_STATEMENT	1791:24	1791:58	17	dump -> level = atoi ( opt_offset + 1 ) ;
EXPR	1791:24	1791:24	18	dump -> level = atoi ( opt_offset + 1 )
ASSIGN	1791:24	1791:38	19	dump -> level = atoi ( opt_offset + 1 )
LVAL	1791:24	1791:24	20	dump -> level
FIELD	1791:24	1791:30	21	dump -> level
LEAF_NODE	1791:24	1791:24	22	dump
LEAF_NODE	1791:28	1791:28	22	->
LEAF_NODE	1791:30	1791:30	22	level
ASSIGN_OP	1791:36	1791:36	20	=
LEAF_NODE	1791:36	1791:36	21	=
RVAL	1791:38	1791:38	20	atoi ( opt_offset + 1 )
FUNCTION_CALL	1791:38	1791:57	21	atoi ( opt_offset + 1 )
CALLEE	1791:38	1791:38	22	atoi
LEAF_NODE	1791:38	1791:38	23	atoi
LEAF_NODE	1791:42	1791:42	22	(
ARGUMENT	1791:43	1791:56	22	opt_offset + 1
FIELD	1791:43	1791:43	23	opt_offset
LEAF_NODE	1791:43	1791:43	24	opt_offset
LEAF_NODE	1791:54	1791:54	23	+
FIELD	1791:56	1791:56	23	1
LEAF_NODE	1791:56	1791:56	24	1
LEAF_NODE	1791:57	1791:57	22	)
LEAF_NODE	1791:58	1791:58	18	;
SELECTION	1793:22	1794:10	15	
KEYWORD	1793:22	1793:22	16	if
LEAF_NODE	1793:22	1793:22	17	if
LEAF_NODE	1793:25	1793:25	16	(
CONDITION	1793:26	1793:26	16	strncmp ( opt_ptr , "in" , 2 ) == 0
EXPR	1793:26	1793:56	17	strncmp ( opt_ptr , "in" , 2 ) == 0
FUNCTION_CALL	1793:26	1793:51	18	strncmp ( opt_ptr , "in" , 2 )
CALLEE	1793:26	1793:26	19	strncmp
LEAF_NODE	1793:26	1793:26	20	strncmp
LEAF_NODE	1793:34	1793:34	19	(
ARGUMENT	1793:35	1793:35	19	opt_ptr
FIELD	1793:35	1793:35	20	opt_ptr
LEAF_NODE	1793:35	1793:35	21	opt_ptr
LEAF_NODE	1793:42	1793:42	19	,
ARGUMENT	1793:44	1793:44	19	"in"
FIELD	1793:44	1793:44	20	"in"
LEAF_NODE	1793:44	1793:44	21	"in"
LEAF_NODE	1793:48	1793:48	19	,
ARGUMENT	1793:50	1793:50	19	2
FIELD	1793:50	1793:50	20	2
LEAF_NODE	1793:50	1793:50	21	2
LEAF_NODE	1793:51	1793:51	19	)
EQ_OPERATOR	1793:53	1793:53	18	==
LEAF_NODE	1793:53	1793:53	19	==
FIELD	1793:56	1793:56	18	0
LEAF_NODE	1793:56	1793:56	19	0
LEAF_NODE	1793:57	1793:57	16	)
STATEMENTS	1794:10	1797:24	16	
LEAF_NODE	1794:10	1794:10	17	{
STATEMENTS	1795:24	1796:24	17	
EXPR_STATEMENT	1795:24	1795:81	18	strncpy ( dump -> infilename , opt_offset + 1 , PATH_MAX - 20 ) ;
EXPR	1795:24	1795:24	19	strncpy ( dump -> infilename , opt_offset + 1 , PATH_MAX - 20 )
FUNCTION_CALL	1795:24	1795:80	20	strncpy ( dump -> infilename , opt_offset + 1 , PATH_MAX - 20 )
CALLEE	1795:24	1795:24	21	strncpy
LEAF_NODE	1795:24	1795:24	22	strncpy
LEAF_NODE	1795:32	1795:32	21	(
ARGUMENT	1795:33	1795:33	21	dump -> infilename
FIELD	1795:33	1795:39	22	dump -> infilename
LEAF_NODE	1795:33	1795:33	23	dump
LEAF_NODE	1795:37	1795:37	23	->
LEAF_NODE	1795:39	1795:39	23	infilename
LEAF_NODE	1795:49	1795:49	21	,
ARGUMENT	1795:51	1795:64	21	opt_offset + 1
FIELD	1795:51	1795:51	22	opt_offset
LEAF_NODE	1795:51	1795:51	23	opt_offset
LEAF_NODE	1795:62	1795:62	22	+
FIELD	1795:64	1795:64	22	1
LEAF_NODE	1795:64	1795:64	23	1
LEAF_NODE	1795:65	1795:65	21	,
ARGUMENT	1795:67	1795:78	21	PATH_MAX - 20
FIELD	1795:67	1795:67	22	PATH_MAX
LEAF_NODE	1795:67	1795:67	23	PATH_MAX
LEAF_NODE	1795:76	1795:76	22	-
FIELD	1795:78	1795:78	22	20
LEAF_NODE	1795:78	1795:78	23	20
LEAF_NODE	1795:80	1795:80	21	)
LEAF_NODE	1795:81	1795:81	19	;
EXPR_STATEMENT	1796:24	1796:62	18	dump -> infilename [ PATH_MAX - 20 ] = '\0' ;
EXPR	1796:24	1796:24	19	dump -> infilename [ PATH_MAX - 20 ] = '\0'
ASSIGN	1796:24	1796:58	20	dump -> infilename [ PATH_MAX - 20 ] = '\0'
LVAL	1796:24	1796:24	21	dump -> infilename [ PATH_MAX - 20 ]
FIELD	1796:24	1796:54	22	dump -> infilename [ PATH_MAX - 20 ]
LEAF_NODE	1796:24	1796:24	23	dump
LEAF_NODE	1796:28	1796:28	23	->
LEAF_NODE	1796:30	1796:30	23	infilename
LEAF_NODE	1796:40	1796:40	23	[
EXPR	1796:41	1796:52	23	PATH_MAX - 20
FIELD	1796:41	1796:41	24	PATH_MAX
LEAF_NODE	1796:41	1796:41	25	PATH_MAX
LEAF_NODE	1796:50	1796:50	24	-
FIELD	1796:52	1796:52	24	20
LEAF_NODE	1796:52	1796:52	25	20
LEAF_NODE	1796:54	1796:54	23	]
ASSIGN_OP	1796:56	1796:56	21	=
LEAF_NODE	1796:56	1796:56	22	=
RVAL	1796:58	1796:58	21	'\0'
FIELD	1796:58	1796:58	22	'\0'
LEAF_NODE	1796:58	1796:58	23	'\0'
LEAF_NODE	1796:62	1796:62	19	;
LEAF_NODE	1797:24	1797:24	17	}
SELECTION	1799:22	1800:3	15	
KEYWORD	1799:22	1799:22	16	if
LEAF_NODE	1799:22	1799:22	17	if
LEAF_NODE	1799:25	1799:25	16	(
CONDITION	1799:26	1799:26	16	strncmp ( opt_ptr , "out" , 3 ) == 0
EXPR	1799:26	1799:57	17	strncmp ( opt_ptr , "out" , 3 ) == 0
FUNCTION_CALL	1799:26	1799:52	18	strncmp ( opt_ptr , "out" , 3 )
CALLEE	1799:26	1799:26	19	strncmp
LEAF_NODE	1799:26	1799:26	20	strncmp
LEAF_NODE	1799:34	1799:34	19	(
ARGUMENT	1799:35	1799:35	19	opt_ptr
FIELD	1799:35	1799:35	20	opt_ptr
LEAF_NODE	1799:35	1799:35	21	opt_ptr
LEAF_NODE	1799:42	1799:42	19	,
ARGUMENT	1799:44	1799:44	19	"out"
FIELD	1799:44	1799:44	20	"out"
LEAF_NODE	1799:44	1799:44	21	"out"
LEAF_NODE	1799:49	1799:49	19	,
ARGUMENT	1799:51	1799:51	19	3
FIELD	1799:51	1799:51	20	3
LEAF_NODE	1799:51	1799:51	21	3
LEAF_NODE	1799:52	1799:52	19	)
EQ_OPERATOR	1799:54	1799:54	18	==
LEAF_NODE	1799:54	1799:54	19	==
FIELD	1799:57	1799:57	18	0
LEAF_NODE	1799:57	1799:57	19	0
LEAF_NODE	1799:58	1799:58	16	)
STATEMENTS	1800:3	1803:24	16	
LEAF_NODE	1800:3	1800:3	17	{
STATEMENTS	1801:24	1802:24	17	
EXPR_STATEMENT	1801:24	1801:82	18	strncpy ( dump -> outfilename , opt_offset + 1 , PATH_MAX - 20 ) ;
EXPR	1801:24	1801:24	19	strncpy ( dump -> outfilename , opt_offset + 1 , PATH_MAX - 20 )
FUNCTION_CALL	1801:24	1801:81	20	strncpy ( dump -> outfilename , opt_offset + 1 , PATH_MAX - 20 )
CALLEE	1801:24	1801:24	21	strncpy
LEAF_NODE	1801:24	1801:24	22	strncpy
LEAF_NODE	1801:32	1801:32	21	(
ARGUMENT	1801:33	1801:33	21	dump -> outfilename
FIELD	1801:33	1801:39	22	dump -> outfilename
LEAF_NODE	1801:33	1801:33	23	dump
LEAF_NODE	1801:37	1801:37	23	->
LEAF_NODE	1801:39	1801:39	23	outfilename
LEAF_NODE	1801:50	1801:50	21	,
ARGUMENT	1801:52	1801:65	21	opt_offset + 1
FIELD	1801:52	1801:52	22	opt_offset
LEAF_NODE	1801:52	1801:52	23	opt_offset
LEAF_NODE	1801:63	1801:63	22	+
FIELD	1801:65	1801:65	22	1
LEAF_NODE	1801:65	1801:65	23	1
LEAF_NODE	1801:66	1801:66	21	,
ARGUMENT	1801:68	1801:79	21	PATH_MAX - 20
FIELD	1801:68	1801:68	22	PATH_MAX
LEAF_NODE	1801:68	1801:68	23	PATH_MAX
LEAF_NODE	1801:77	1801:77	22	-
FIELD	1801:79	1801:79	22	20
LEAF_NODE	1801:79	1801:79	23	20
LEAF_NODE	1801:81	1801:81	21	)
LEAF_NODE	1801:82	1801:82	19	;
EXPR_STATEMENT	1802:24	1802:63	18	dump -> outfilename [ PATH_MAX - 20 ] = '\0' ;
EXPR	1802:24	1802:24	19	dump -> outfilename [ PATH_MAX - 20 ] = '\0'
ASSIGN	1802:24	1802:59	20	dump -> outfilename [ PATH_MAX - 20 ] = '\0'
LVAL	1802:24	1802:24	21	dump -> outfilename [ PATH_MAX - 20 ]
FIELD	1802:24	1802:55	22	dump -> outfilename [ PATH_MAX - 20 ]
LEAF_NODE	1802:24	1802:24	23	dump
LEAF_NODE	1802:28	1802:28	23	->
LEAF_NODE	1802:30	1802:30	23	outfilename
LEAF_NODE	1802:41	1802:41	23	[
EXPR	1802:42	1802:53	23	PATH_MAX - 20
FIELD	1802:42	1802:42	24	PATH_MAX
LEAF_NODE	1802:42	1802:42	25	PATH_MAX
LEAF_NODE	1802:51	1802:51	24	-
FIELD	1802:53	1802:53	24	20
LEAF_NODE	1802:53	1802:53	25	20
LEAF_NODE	1802:55	1802:55	23	]
ASSIGN_OP	1802:57	1802:57	21	=
LEAF_NODE	1802:57	1802:57	22	=
RVAL	1802:59	1802:59	21	'\0'
FIELD	1802:59	1802:59	22	'\0'
LEAF_NODE	1802:59	1802:59	23	'\0'
LEAF_NODE	1802:63	1802:63	19	;
LEAF_NODE	1803:24	1803:24	17	}
SELECTION	1804:22	1805:3	15	
KEYWORD	1804:22	1804:22	16	if
LEAF_NODE	1804:22	1804:22	17	if
LEAF_NODE	1804:25	1804:25	16	(
CONDITION	1804:26	1804:26	16	strncmp ( opt_ptr , "deb" , 3 ) == 0
EXPR	1804:26	1804:57	17	strncmp ( opt_ptr , "deb" , 3 ) == 0
FUNCTION_CALL	1804:26	1804:52	18	strncmp ( opt_ptr , "deb" , 3 )
CALLEE	1804:26	1804:26	19	strncmp
LEAF_NODE	1804:26	1804:26	20	strncmp
LEAF_NODE	1804:34	1804:34	19	(
ARGUMENT	1804:35	1804:35	19	opt_ptr
FIELD	1804:35	1804:35	20	opt_ptr
LEAF_NODE	1804:35	1804:35	21	opt_ptr
LEAF_NODE	1804:42	1804:42	19	,
ARGUMENT	1804:44	1804:44	19	"deb"
FIELD	1804:44	1804:44	20	"deb"
LEAF_NODE	1804:44	1804:44	21	"deb"
LEAF_NODE	1804:49	1804:49	19	,
ARGUMENT	1804:51	1804:51	19	3
FIELD	1804:51	1804:51	20	3
LEAF_NODE	1804:51	1804:51	21	3
LEAF_NODE	1804:52	1804:52	19	)
EQ_OPERATOR	1804:54	1804:54	18	==
LEAF_NODE	1804:54	1804:54	19	==
FIELD	1804:57	1804:57	18	0
LEAF_NODE	1804:57	1804:57	19	0
LEAF_NODE	1804:58	1804:58	16	)
STATEMENTS	1805:3	1805:3	16	
EXPR_STATEMENT	1805:3	1805:37	17	dump -> debug = atoi ( opt_offset + 1 ) ;
EXPR	1805:3	1805:3	18	dump -> debug = atoi ( opt_offset + 1 )
ASSIGN	1805:3	1805:17	19	dump -> debug = atoi ( opt_offset + 1 )
LVAL	1805:3	1805:3	20	dump -> debug
FIELD	1805:3	1805:9	21	dump -> debug
LEAF_NODE	1805:3	1805:3	22	dump
LEAF_NODE	1805:7	1805:7	22	->
LEAF_NODE	1805:9	1805:9	22	debug
ASSIGN_OP	1805:15	1805:15	20	=
LEAF_NODE	1805:15	1805:15	21	=
RVAL	1805:17	1805:17	20	atoi ( opt_offset + 1 )
FUNCTION_CALL	1805:17	1805:36	21	atoi ( opt_offset + 1 )
CALLEE	1805:17	1805:17	22	atoi
LEAF_NODE	1805:17	1805:17	23	atoi
LEAF_NODE	1805:21	1805:21	22	(
ARGUMENT	1805:22	1805:35	22	opt_offset + 1
FIELD	1805:22	1805:22	23	opt_offset
LEAF_NODE	1805:22	1805:22	24	opt_offset
LEAF_NODE	1805:33	1805:33	23	+
FIELD	1805:35	1805:35	23	1
LEAF_NODE	1805:35	1805:35	24	1
LEAF_NODE	1805:36	1805:36	22	)
LEAF_NODE	1805:37	1805:37	18	;
LEAF_NODE	1806:8	1806:8	14	}
LEAF_NODE	1807:20	1807:20	11	}
SELECTION	1808:9	1809:18	9	
KEYWORD	1808:9	1808:9	10	if
LEAF_NODE	1808:9	1808:9	11	if
LEAF_NODE	1808:12	1808:12	10	(
CONDITION	1808:13	1808:13	10	( strlen ( dump -> infilename ) ) || ( strlen ( dump -> outfilename ) )
EXPR	1808:13	1808:13	11	( strlen ( dump -> infilename ) ) || ( strlen ( dump -> outfilename ) )
OR	1808:13	1808:43	12	( strlen ( dump -> infilename ) ) || ( strlen ( dump -> outfilename ) )
EXPR	1808:13	1808:38	13	( strlen ( dump -> infilename ) )
LEAF_NODE	1808:13	1808:13	14	(
FUNCTION_CALL	1808:14	1808:37	14	strlen ( dump -> infilename )
CALLEE	1808:14	1808:14	15	strlen
LEAF_NODE	1808:14	1808:14	16	strlen
LEAF_NODE	1808:20	1808:20	15	(
ARGUMENT	1808:21	1808:21	15	dump -> infilename
FIELD	1808:21	1808:27	16	dump -> infilename
LEAF_NODE	1808:21	1808:21	17	dump
LEAF_NODE	1808:25	1808:25	17	->
LEAF_NODE	1808:27	1808:27	17	infilename
LEAF_NODE	1808:37	1808:37	15	)
LEAF_NODE	1808:38	1808:38	14	)
LEAF_NODE	1808:40	1808:40	13	||
EXPR	1808:43	1808:69	13	( strlen ( dump -> outfilename ) )
LEAF_NODE	1808:43	1808:43	14	(
FUNCTION_CALL	1808:44	1808:68	14	strlen ( dump -> outfilename )
CALLEE	1808:44	1808:44	15	strlen
LEAF_NODE	1808:44	1808:44	16	strlen
LEAF_NODE	1808:50	1808:50	15	(
ARGUMENT	1808:51	1808:51	15	dump -> outfilename
FIELD	1808:51	1808:57	16	dump -> outfilename
LEAF_NODE	1808:51	1808:51	17	dump
LEAF_NODE	1808:55	1808:55	17	->
LEAF_NODE	1808:57	1808:57	17	outfilename
LEAF_NODE	1808:68	1808:68	15	)
LEAF_NODE	1808:69	1808:69	14	)
LEAF_NODE	1808:70	1808:70	10	)
STATEMENTS	1809:18	1818:18	10	
LEAF_NODE	1809:18	1809:18	11	{
STATEMENTS	1810:4	1812:11	11	
SELECTION	1810:4	1811:20	12	
KEYWORD	1810:4	1810:4	13	if
LEAF_NODE	1810:4	1810:4	14	if
LEAF_NODE	1810:7	1810:7	13	(
CONDITION	1810:8	1810:8	13	dump -> level == 1
EXPR	1810:8	1810:23	14	dump -> level == 1
FIELD	1810:8	1810:14	15	dump -> level
LEAF_NODE	1810:8	1810:8	16	dump
LEAF_NODE	1810:12	1810:12	16	->
LEAF_NODE	1810:14	1810:14	16	level
EQ_OPERATOR	1810:20	1810:20	15	==
LEAF_NODE	1810:20	1810:20	16	==
FIELD	1810:23	1810:23	15	1
LEAF_NODE	1810:23	1810:23	16	1
LEAF_NODE	1810:24	1810:24	13	)
STATEMENTS	1811:20	1811:20	13	
EXPR_STATEMENT	1811:20	1811:72	14	TIFFError ( "" , "Defaulting to dump level 1, no data." ) ;
EXPR	1811:20	1811:20	15	TIFFError ( "" , "Defaulting to dump level 1, no data." )
FUNCTION_CALL	1811:20	1811:71	16	TIFFError ( "" , "Defaulting to dump level 1, no data." )
CALLEE	1811:20	1811:20	17	TIFFError
LEAF_NODE	1811:20	1811:20	18	TIFFError
LEAF_NODE	1811:29	1811:29	17	(
ARGUMENT	1811:30	1811:30	17	""
FIELD	1811:30	1811:30	18	""
LEAF_NODE	1811:30	1811:30	19	""
LEAF_NODE	1811:32	1811:32	17	,
ARGUMENT	1811:33	1811:33	17	"Defaulting to dump level 1, no data."
FIELD	1811:33	1811:33	18	"Defaulting to dump level 1, no data."
LEAF_NODE	1811:33	1811:33	19	"Defaulting to dump level 1, no data."
LEAF_NODE	1811:71	1811:71	17	)
LEAF_NODE	1811:72	1811:72	15	;
SELECTION	1812:11	1813:20	12	
KEYWORD	1812:11	1812:11	13	if
LEAF_NODE	1812:11	1812:11	14	if
LEAF_NODE	1812:14	1812:14	13	(
CONDITION	1812:15	1812:15	13	dump -> format == DUMP_NONE
EXPR	1812:15	1812:31	14	dump -> format == DUMP_NONE
FIELD	1812:15	1812:21	15	dump -> format
LEAF_NODE	1812:15	1812:15	16	dump
LEAF_NODE	1812:19	1812:19	16	->
LEAF_NODE	1812:21	1812:21	16	format
EQ_OPERATOR	1812:28	1812:28	15	==
LEAF_NODE	1812:28	1812:28	16	==
FIELD	1812:31	1812:31	15	DUMP_NONE
LEAF_NODE	1812:31	1812:31	16	DUMP_NONE
LEAF_NODE	1812:40	1812:40	13	)
STATEMENTS	1813:20	1817:6	13	
LEAF_NODE	1813:20	1813:20	14	{
STATEMENTS	1814:6	1816:6	14	
EXPR_STATEMENT	1814:6	1814:68	15	TIFFError ( "" , "You must specify a dump format for dump files" ) ;
EXPR	1814:6	1814:6	16	TIFFError ( "" , "You must specify a dump format for dump files" )
FUNCTION_CALL	1814:6	1814:67	17	TIFFError ( "" , "You must specify a dump format for dump files" )
CALLEE	1814:6	1814:6	18	TIFFError
LEAF_NODE	1814:6	1814:6	19	TIFFError
LEAF_NODE	1814:15	1814:15	18	(
ARGUMENT	1814:16	1814:16	18	""
FIELD	1814:16	1814:16	19	""
LEAF_NODE	1814:16	1814:16	20	""
LEAF_NODE	1814:18	1814:18	18	,
ARGUMENT	1814:20	1814:20	18	"You must specify a dump format for dump files"
FIELD	1814:20	1814:20	19	"You must specify a dump format for dump files"
LEAF_NODE	1814:20	1814:20	20	"You must specify a dump format for dump files"
LEAF_NODE	1814:67	1814:67	18	)
LEAF_NODE	1814:68	1814:68	16	;
EXPR_STATEMENT	1815:6	1815:57	15	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1815:6	1815:6	16	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1815:6	1815:56	17	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1815:6	1815:6	18	TIFFError
LEAF_NODE	1815:6	1815:6	19	TIFFError
LEAF_NODE	1815:16	1815:16	18	(
ARGUMENT	1815:17	1815:17	18	"For valid options type"
FIELD	1815:17	1815:17	19	"For valid options type"
LEAF_NODE	1815:17	1815:17	20	"For valid options type"
LEAF_NODE	1815:41	1815:41	18	,
ARGUMENT	1815:43	1815:43	18	"tiffcrop -h"
FIELD	1815:43	1815:43	19	"tiffcrop -h"
LEAF_NODE	1815:43	1815:43	20	"tiffcrop -h"
LEAF_NODE	1815:56	1815:56	18	)
LEAF_NODE	1815:57	1815:57	16	;
EXPR_STATEMENT	1816:6	1816:15	15	exit ( - 1 ) ;
EXPR	1816:6	1816:6	16	exit ( - 1 )
FUNCTION_CALL	1816:6	1816:14	17	exit ( - 1 )
CALLEE	1816:6	1816:6	18	exit
LEAF_NODE	1816:6	1816:6	19	exit
LEAF_NODE	1816:11	1816:11	18	(
ARGUMENT	1816:12	1816:12	18	- 1
UNARY_EXPR	1816:12	1816:13	19	- 1
UNARY_OPERATOR	1816:12	1816:12	20	-
LEAF_NODE	1816:12	1816:12	21	-
FIELD	1816:13	1816:13	20	1
LEAF_NODE	1816:13	1816:13	21	1
LEAF_NODE	1816:14	1816:14	18	)
LEAF_NODE	1816:15	1816:15	16	;
LEAF_NODE	1817:6	1817:6	14	}
LEAF_NODE	1818:18	1818:18	11	}
JUMP_STATEMENT	1819:9	1819:14	9	break DESTINATION ;
KEYWORD	1819:9	1819:9	10	break
LEAF_NODE	1819:9	1819:9	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1819:14	1819:14	10	;
LEAF_NODE	1822:6	1822:6	9	case
LEAF_NODE	1822:11	1822:11	9	'm'
LEAF_NODE	1822:14	1822:14	9	:
EXPR_STATEMENT	1824:2	1824:38	9	crop_data -> crop_mode |= CROP_MARGINS ;
EXPR	1824:2	1824:2	10	crop_data -> crop_mode |= CROP_MARGINS
ASSIGN	1824:2	1824:26	11	crop_data -> crop_mode |= CROP_MARGINS
LVAL	1824:2	1824:2	12	crop_data -> crop_mode
FIELD	1824:2	1824:13	13	crop_data -> crop_mode
LEAF_NODE	1824:2	1824:2	14	crop_data
LEAF_NODE	1824:11	1824:11	14	->
LEAF_NODE	1824:13	1824:13	14	crop_mode
ASSIGN_OP	1824:23	1824:23	12	|=
LEAF_NODE	1824:23	1824:23	13	|=
RVAL	1824:26	1824:26	12	CROP_MARGINS
FIELD	1824:26	1824:26	13	CROP_MARGINS
LEAF_NODE	1824:26	1824:26	14	CROP_MARGINS
LEAF_NODE	1824:38	1824:38	10	;
ITERATION	1825:16	1828:20	9	
KEYWORD	1825:16	1825:16	10	for
LEAF_NODE	1825:16	1825:16	11	for
LEAF_NODE	1825:20	1825:20	10	(
FOR_INIT	1825:21	1825:59	10	i = 0 , opt_ptr = strtok ( optarg , ",:" ) ;
EXPR	1825:21	1825:28	11	i = 0 , opt_ptr = strtok ( optarg , ",:" )
ASSIGN	1825:21	1825:25	12	i = 0
LVAL	1825:21	1825:21	13	i
FIELD	1825:21	1825:21	14	i
LEAF_NODE	1825:21	1825:21	15	i
ASSIGN_OP	1825:23	1825:23	13	=
LEAF_NODE	1825:23	1825:23	14	=
RVAL	1825:25	1825:25	13	0
FIELD	1825:25	1825:25	14	0
LEAF_NODE	1825:25	1825:25	15	0
LEAF_NODE	1825:26	1825:26	12	,
ASSIGN	1825:28	1825:38	12	opt_ptr = strtok ( optarg , ",:" )
LVAL	1825:28	1825:28	13	opt_ptr
FIELD	1825:28	1825:28	14	opt_ptr
LEAF_NODE	1825:28	1825:28	15	opt_ptr
ASSIGN_OP	1825:36	1825:36	13	=
LEAF_NODE	1825:36	1825:36	14	=
RVAL	1825:38	1825:38	13	strtok ( optarg , ",:" )
FUNCTION_CALL	1825:38	1825:58	14	strtok ( optarg , ",:" )
CALLEE	1825:38	1825:38	15	strtok
LEAF_NODE	1825:38	1825:38	16	strtok
LEAF_NODE	1825:45	1825:45	15	(
ARGUMENT	1825:46	1825:46	15	optarg
FIELD	1825:46	1825:46	16	optarg
LEAF_NODE	1825:46	1825:46	17	optarg
LEAF_NODE	1825:52	1825:52	15	,
ARGUMENT	1825:54	1825:54	15	",:"
FIELD	1825:54	1825:54	16	",:"
LEAF_NODE	1825:54	1825:54	17	",:"
LEAF_NODE	1825:58	1825:58	15	)
LEAF_NODE	1825:59	1825:59	11	;
CONDITION	1826:20	1826:20	10	( ( opt_ptr != NULL ) && ( i < 4 ) )
EXPR	1826:20	1826:50	11	( ( opt_ptr != NULL ) && ( i < 4 ) )
LEAF_NODE	1826:20	1826:20	12	(
AND	1826:21	1826:43	12	( opt_ptr != NULL ) && ( i < 4 )
EXPR	1826:21	1826:37	13	( opt_ptr != NULL )
LEAF_NODE	1826:21	1826:21	14	(
FIELD	1826:22	1826:22	14	opt_ptr
LEAF_NODE	1826:22	1826:22	15	opt_ptr
EQ_OPERATOR	1826:30	1826:30	14	!=
LEAF_NODE	1826:30	1826:30	15	!=
FIELD	1826:33	1826:33	14	NULL
LEAF_NODE	1826:33	1826:33	15	NULL
LEAF_NODE	1826:37	1826:37	14	)
LEAF_NODE	1826:39	1826:39	13	&&
EXPR	1826:43	1826:49	13	( i < 4 )
LEAF_NODE	1826:43	1826:43	14	(
FIELD	1826:44	1826:44	14	i
LEAF_NODE	1826:44	1826:44	15	i
REL_OPERATOR	1826:46	1826:46	14	<
LEAF_NODE	1826:46	1826:46	15	<
FIELD	1826:48	1826:48	14	4
LEAF_NODE	1826:48	1826:48	15	4
LEAF_NODE	1826:49	1826:49	14	)
LEAF_NODE	1826:50	1826:50	12	)
LEAF_NODE	1826:51	1826:51	10	;
FOR_EXPR	1827:21	1827:21	10	( opt_ptr = strtok ( NULL , ",:" ) ) , i ++
EXPR	1827:21	1827:54	11	( opt_ptr = strtok ( NULL , ",:" ) ) , i ++
LEAF_NODE	1827:21	1827:21	12	(
ASSIGN	1827:22	1827:32	12	opt_ptr = strtok ( NULL , ",:" )
LVAL	1827:22	1827:22	13	opt_ptr
FIELD	1827:22	1827:22	14	opt_ptr
LEAF_NODE	1827:22	1827:22	15	opt_ptr
ASSIGN_OP	1827:30	1827:30	13	=
LEAF_NODE	1827:30	1827:30	14	=
RVAL	1827:32	1827:32	13	strtok ( NULL , ",:" )
FUNCTION_CALL	1827:32	1827:50	14	strtok ( NULL , ",:" )
CALLEE	1827:32	1827:32	15	strtok
LEAF_NODE	1827:32	1827:32	16	strtok
LEAF_NODE	1827:39	1827:39	15	(
ARGUMENT	1827:40	1827:40	15	NULL
FIELD	1827:40	1827:40	16	NULL
LEAF_NODE	1827:40	1827:40	17	NULL
LEAF_NODE	1827:44	1827:44	15	,
ARGUMENT	1827:46	1827:46	15	",:"
FIELD	1827:46	1827:46	16	",:"
LEAF_NODE	1827:46	1827:46	17	",:"
LEAF_NODE	1827:50	1827:50	15	)
LEAF_NODE	1827:51	1827:51	12	)
LEAF_NODE	1827:52	1827:52	12	,
FIELD	1827:54	1827:55	12	i ++
LEAF_NODE	1827:54	1827:54	13	i
LEAF_NODE	1827:55	1827:55	13	++
LEAF_NODE	1827:57	1827:57	10	)
STATEMENTS	1828:20	1830:20	10	
LEAF_NODE	1828:20	1828:20	11	{
STATEMENTS	1829:6	1829:6	11	
EXPR_STATEMENT	1829:6	1829:43	12	crop_data -> margins [ i ] = atof ( opt_ptr ) ;
EXPR	1829:6	1829:6	13	crop_data -> margins [ i ] = atof ( opt_ptr )
ASSIGN	1829:6	1829:30	14	crop_data -> margins [ i ] = atof ( opt_ptr )
LVAL	1829:6	1829:6	15	crop_data -> margins [ i ]
FIELD	1829:6	1829:26	16	crop_data -> margins [ i ]
LEAF_NODE	1829:6	1829:6	17	crop_data
LEAF_NODE	1829:15	1829:15	17	->
LEAF_NODE	1829:17	1829:17	17	margins
LEAF_NODE	1829:24	1829:24	17	[
EXPR	1829:25	1829:25	17	i
FIELD	1829:25	1829:25	18	i
LEAF_NODE	1829:25	1829:25	19	i
LEAF_NODE	1829:26	1829:26	17	]
ASSIGN_OP	1829:28	1829:28	15	=
LEAF_NODE	1829:28	1829:28	16	=
RVAL	1829:30	1829:30	15	atof ( opt_ptr )
FUNCTION_CALL	1829:30	1829:42	16	atof ( opt_ptr )
CALLEE	1829:30	1829:30	17	atof
LEAF_NODE	1829:30	1829:30	18	atof
LEAF_NODE	1829:34	1829:34	17	(
ARGUMENT	1829:35	1829:35	17	opt_ptr
FIELD	1829:35	1829:35	18	opt_ptr
LEAF_NODE	1829:35	1829:35	19	opt_ptr
LEAF_NODE	1829:42	1829:42	17	)
LEAF_NODE	1829:43	1829:43	13	;
LEAF_NODE	1830:20	1830:20	11	}
JUMP_STATEMENT	1831:2	1831:7	9	break DESTINATION ;
KEYWORD	1831:2	1831:2	10	break
LEAF_NODE	1831:2	1831:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1831:7	1831:7	10	;
LEAF_NODE	1832:6	1832:6	9	case
LEAF_NODE	1832:11	1832:11	9	'E'
LEAF_NODE	1832:14	1832:14	9	:
SELECTION	1833:2	1834:18	9	
KEYWORD	1833:2	1833:2	10	switch
LEAF_NODE	1833:2	1833:2	11	switch
LEAF_NODE	1833:9	1833:9	10	(
CONDITION	1833:10	1833:10	10	tolower ( ( int ) optarg [ 0 ] )
EXPR	1833:10	1833:10	11	tolower ( ( int ) optarg [ 0 ] )
FUNCTION_CALL	1833:10	1833:33	12	tolower ( ( int ) optarg [ 0 ] )
CALLEE	1833:10	1833:10	13	tolower
LEAF_NODE	1833:10	1833:10	14	tolower
LEAF_NODE	1833:17	1833:17	13	(
ARGUMENT	1833:18	1833:24	13	( int ) optarg [ 0 ]
LEAF_NODE	1833:18	1833:18	14	(
TYPE_NAME	1833:19	1833:19	14	int
LEAF_NODE	1833:19	1833:19	15	int
LEAF_NODE	1833:22	1833:22	14	)
FIELD	1833:24	1833:32	14	optarg [ 0 ]
LEAF_NODE	1833:24	1833:24	15	optarg
LEAF_NODE	1833:30	1833:30	15	[
EXPR	1833:31	1833:31	15	0
FIELD	1833:31	1833:31	16	0
LEAF_NODE	1833:31	1833:31	17	0
LEAF_NODE	1833:32	1833:32	15	]
LEAF_NODE	1833:33	1833:33	13	)
LEAF_NODE	1833:34	1833:34	10	)
STATEMENTS	1834:18	1846:4	10	
LEAF_NODE	1834:18	1834:18	11	{
STATEMENTS	1835:4	1845:28	11	
LEAF_NODE	1835:4	1835:4	12	case
LEAF_NODE	1835:9	1835:9	12	't'
LEAF_NODE	1835:12	1835:12	12	:
EXPR_STATEMENT	1835:14	1835:44	12	crop_data -> edge_ref = EDGE_TOP ;
EXPR	1835:14	1835:14	13	crop_data -> edge_ref = EDGE_TOP
ASSIGN	1835:14	1835:36	14	crop_data -> edge_ref = EDGE_TOP
LVAL	1835:14	1835:14	15	crop_data -> edge_ref
FIELD	1835:14	1835:25	16	crop_data -> edge_ref
LEAF_NODE	1835:14	1835:14	17	crop_data
LEAF_NODE	1835:23	1835:23	17	->
LEAF_NODE	1835:25	1835:25	17	edge_ref
ASSIGN_OP	1835:34	1835:34	15	=
LEAF_NODE	1835:34	1835:34	16	=
RVAL	1835:36	1835:36	15	EDGE_TOP
FIELD	1835:36	1835:36	16	EDGE_TOP
LEAF_NODE	1835:36	1835:36	17	EDGE_TOP
LEAF_NODE	1835:44	1835:44	13	;
JUMP_STATEMENT	1836:28	1836:33	12	break DESTINATION ;
KEYWORD	1836:28	1836:28	13	break
LEAF_NODE	1836:28	1836:28	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1836:33	1836:33	13	;
LEAF_NODE	1837:18	1837:18	12	case
LEAF_NODE	1837:23	1837:23	12	'b'
LEAF_NODE	1837:26	1837:26	12	:
EXPR_STATEMENT	1837:28	1837:61	12	crop_data -> edge_ref = EDGE_BOTTOM ;
EXPR	1837:28	1837:28	13	crop_data -> edge_ref = EDGE_BOTTOM
ASSIGN	1837:28	1837:50	14	crop_data -> edge_ref = EDGE_BOTTOM
LVAL	1837:28	1837:28	15	crop_data -> edge_ref
FIELD	1837:28	1837:39	16	crop_data -> edge_ref
LEAF_NODE	1837:28	1837:28	17	crop_data
LEAF_NODE	1837:37	1837:37	17	->
LEAF_NODE	1837:39	1837:39	17	edge_ref
ASSIGN_OP	1837:48	1837:48	15	=
LEAF_NODE	1837:48	1837:48	16	=
RVAL	1837:50	1837:50	15	EDGE_BOTTOM
FIELD	1837:50	1837:50	16	EDGE_BOTTOM
LEAF_NODE	1837:50	1837:50	17	EDGE_BOTTOM
LEAF_NODE	1837:61	1837:61	13	;
JUMP_STATEMENT	1838:29	1838:34	12	break DESTINATION ;
KEYWORD	1838:29	1838:29	13	break
LEAF_NODE	1838:29	1838:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1838:34	1838:34	13	;
LEAF_NODE	1839:18	1839:18	12	case
LEAF_NODE	1839:23	1839:23	12	'l'
LEAF_NODE	1839:26	1839:26	12	:
EXPR_STATEMENT	1839:28	1839:59	12	crop_data -> edge_ref = EDGE_LEFT ;
EXPR	1839:28	1839:28	13	crop_data -> edge_ref = EDGE_LEFT
ASSIGN	1839:28	1839:50	14	crop_data -> edge_ref = EDGE_LEFT
LVAL	1839:28	1839:28	15	crop_data -> edge_ref
FIELD	1839:28	1839:39	16	crop_data -> edge_ref
LEAF_NODE	1839:28	1839:28	17	crop_data
LEAF_NODE	1839:37	1839:37	17	->
LEAF_NODE	1839:39	1839:39	17	edge_ref
ASSIGN_OP	1839:48	1839:48	15	=
LEAF_NODE	1839:48	1839:48	16	=
RVAL	1839:50	1839:50	15	EDGE_LEFT
FIELD	1839:50	1839:50	16	EDGE_LEFT
LEAF_NODE	1839:50	1839:50	17	EDGE_LEFT
LEAF_NODE	1839:59	1839:59	13	;
JUMP_STATEMENT	1840:28	1840:33	12	break DESTINATION ;
KEYWORD	1840:28	1840:28	13	break
LEAF_NODE	1840:28	1840:28	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1840:33	1840:33	13	;
LEAF_NODE	1841:18	1841:18	12	case
LEAF_NODE	1841:23	1841:23	12	'r'
LEAF_NODE	1841:26	1841:26	12	:
EXPR_STATEMENT	1841:28	1841:60	12	crop_data -> edge_ref = EDGE_RIGHT ;
EXPR	1841:28	1841:28	13	crop_data -> edge_ref = EDGE_RIGHT
ASSIGN	1841:28	1841:50	14	crop_data -> edge_ref = EDGE_RIGHT
LVAL	1841:28	1841:28	15	crop_data -> edge_ref
FIELD	1841:28	1841:39	16	crop_data -> edge_ref
LEAF_NODE	1841:28	1841:28	17	crop_data
LEAF_NODE	1841:37	1841:37	17	->
LEAF_NODE	1841:39	1841:39	17	edge_ref
ASSIGN_OP	1841:48	1841:48	15	=
LEAF_NODE	1841:48	1841:48	16	=
RVAL	1841:50	1841:50	15	EDGE_RIGHT
FIELD	1841:50	1841:50	16	EDGE_RIGHT
LEAF_NODE	1841:50	1841:50	17	EDGE_RIGHT
LEAF_NODE	1841:60	1841:60	13	;
JUMP_STATEMENT	1842:28	1842:33	12	break DESTINATION ;
KEYWORD	1842:28	1842:28	13	break
LEAF_NODE	1842:28	1842:28	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1842:33	1842:33	13	;
LABEL	1843:4	1843:11	12	default :
LEAF_NODE	1843:4	1843:4	13	default
LEAF_NODE	1843:11	1843:11	13	:
EXPR_STATEMENT	1843:14	1843:92	12	TIFFError ( "Edge reference must be top, bottom, left, or right" , "%s" , optarg ) ;
EXPR	1843:14	1843:14	13	TIFFError ( "Edge reference must be top, bottom, left, or right" , "%s" , optarg )
FUNCTION_CALL	1843:14	1843:91	14	TIFFError ( "Edge reference must be top, bottom, left, or right" , "%s" , optarg )
CALLEE	1843:14	1843:14	15	TIFFError
LEAF_NODE	1843:14	1843:14	16	TIFFError
LEAF_NODE	1843:24	1843:24	15	(
ARGUMENT	1843:25	1843:25	15	"Edge reference must be top, bottom, left, or right"
FIELD	1843:25	1843:25	16	"Edge reference must be top, bottom, left, or right"
LEAF_NODE	1843:25	1843:25	17	"Edge reference must be top, bottom, left, or right"
LEAF_NODE	1843:77	1843:77	15	,
ARGUMENT	1843:79	1843:79	15	"%s"
FIELD	1843:79	1843:79	16	"%s"
LEAF_NODE	1843:79	1843:79	17	"%s"
LEAF_NODE	1843:83	1843:83	15	,
ARGUMENT	1843:85	1843:85	15	optarg
FIELD	1843:85	1843:85	16	optarg
LEAF_NODE	1843:85	1843:85	17	optarg
LEAF_NODE	1843:91	1843:91	15	)
LEAF_NODE	1843:92	1843:92	13	;
EXPR_STATEMENT	1844:7	1844:58	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1844:7	1844:7	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1844:7	1844:57	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1844:7	1844:7	15	TIFFError
LEAF_NODE	1844:7	1844:7	16	TIFFError
LEAF_NODE	1844:17	1844:17	15	(
ARGUMENT	1844:18	1844:18	15	"For valid options type"
FIELD	1844:18	1844:18	16	"For valid options type"
LEAF_NODE	1844:18	1844:18	17	"For valid options type"
LEAF_NODE	1844:42	1844:42	15	,
ARGUMENT	1844:44	1844:44	15	"tiffcrop -h"
FIELD	1844:44	1844:44	16	"tiffcrop -h"
LEAF_NODE	1844:44	1844:44	17	"tiffcrop -h"
LEAF_NODE	1844:57	1844:57	15	)
LEAF_NODE	1844:58	1844:58	13	;
EXPR_STATEMENT	1845:28	1845:37	12	exit ( - 1 ) ;
EXPR	1845:28	1845:28	13	exit ( - 1 )
FUNCTION_CALL	1845:28	1845:36	14	exit ( - 1 )
CALLEE	1845:28	1845:28	15	exit
LEAF_NODE	1845:28	1845:28	16	exit
LEAF_NODE	1845:33	1845:33	15	(
ARGUMENT	1845:34	1845:34	15	- 1
UNARY_EXPR	1845:34	1845:35	16	- 1
UNARY_OPERATOR	1845:34	1845:34	17	-
LEAF_NODE	1845:34	1845:34	18	-
FIELD	1845:35	1845:35	17	1
LEAF_NODE	1845:35	1845:35	18	1
LEAF_NODE	1845:36	1845:36	15	)
LEAF_NODE	1845:37	1845:37	13	;
LEAF_NODE	1846:4	1846:4	11	}
JUMP_STATEMENT	1847:2	1847:7	9	break DESTINATION ;
KEYWORD	1847:2	1847:2	10	break
LEAF_NODE	1847:2	1847:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1847:7	1847:7	10	;
LEAF_NODE	1848:6	1848:6	9	case
LEAF_NODE	1848:11	1848:11	9	'F'
LEAF_NODE	1848:14	1848:14	9	:
EXPR_STATEMENT	1849:2	1849:37	9	crop_data -> crop_mode |= CROP_MIRROR ;
EXPR	1849:2	1849:2	10	crop_data -> crop_mode |= CROP_MIRROR
ASSIGN	1849:2	1849:26	11	crop_data -> crop_mode |= CROP_MIRROR
LVAL	1849:2	1849:2	12	crop_data -> crop_mode
FIELD	1849:2	1849:13	13	crop_data -> crop_mode
LEAF_NODE	1849:2	1849:2	14	crop_data
LEAF_NODE	1849:11	1849:11	14	->
LEAF_NODE	1849:13	1849:13	14	crop_mode
ASSIGN_OP	1849:23	1849:23	12	|=
LEAF_NODE	1849:23	1849:23	13	|=
RVAL	1849:26	1849:26	12	CROP_MIRROR
FIELD	1849:26	1849:26	13	CROP_MIRROR
LEAF_NODE	1849:26	1849:26	14	CROP_MIRROR
LEAF_NODE	1849:37	1849:37	10	;
SELECTION	1850:2	1851:18	9	
KEYWORD	1850:2	1850:2	10	switch
LEAF_NODE	1850:2	1850:2	11	switch
LEAF_NODE	1850:9	1850:9	10	(
CONDITION	1850:10	1850:10	10	tolower ( ( int ) optarg [ 0 ] )
EXPR	1850:10	1850:10	11	tolower ( ( int ) optarg [ 0 ] )
FUNCTION_CALL	1850:10	1850:33	12	tolower ( ( int ) optarg [ 0 ] )
CALLEE	1850:10	1850:10	13	tolower
LEAF_NODE	1850:10	1850:10	14	tolower
LEAF_NODE	1850:17	1850:17	13	(
ARGUMENT	1850:18	1850:24	13	( int ) optarg [ 0 ]
LEAF_NODE	1850:18	1850:18	14	(
TYPE_NAME	1850:19	1850:19	14	int
LEAF_NODE	1850:19	1850:19	15	int
LEAF_NODE	1850:22	1850:22	14	)
FIELD	1850:24	1850:32	14	optarg [ 0 ]
LEAF_NODE	1850:24	1850:24	15	optarg
LEAF_NODE	1850:30	1850:30	15	[
EXPR	1850:31	1850:31	15	0
FIELD	1850:31	1850:31	16	0
LEAF_NODE	1850:31	1850:31	17	0
LEAF_NODE	1850:32	1850:32	15	]
LEAF_NODE	1850:33	1850:33	13	)
LEAF_NODE	1850:34	1850:34	10	)
STATEMENTS	1851:18	1861:4	10	
LEAF_NODE	1851:18	1851:18	11	{
STATEMENTS	1852:4	1860:29	11	
LEAF_NODE	1852:4	1852:4	12	case
LEAF_NODE	1852:10	1852:10	12	'h'
LEAF_NODE	1852:13	1852:13	12	:
EXPR_STATEMENT	1852:15	1852:47	12	crop_data -> mirror = MIRROR_HORIZ ;
EXPR	1852:15	1852:15	13	crop_data -> mirror = MIRROR_HORIZ
ASSIGN	1852:15	1852:35	14	crop_data -> mirror = MIRROR_HORIZ
LVAL	1852:15	1852:15	15	crop_data -> mirror
FIELD	1852:15	1852:26	16	crop_data -> mirror
LEAF_NODE	1852:15	1852:15	17	crop_data
LEAF_NODE	1852:24	1852:24	17	->
LEAF_NODE	1852:26	1852:26	17	mirror
ASSIGN_OP	1852:33	1852:33	15	=
LEAF_NODE	1852:33	1852:33	16	=
RVAL	1852:35	1852:35	15	MIRROR_HORIZ
FIELD	1852:35	1852:35	16	MIRROR_HORIZ
LEAF_NODE	1852:35	1852:35	17	MIRROR_HORIZ
LEAF_NODE	1852:47	1852:47	13	;
JUMP_STATEMENT	1853:29	1853:34	12	break DESTINATION ;
KEYWORD	1853:29	1853:29	13	break
LEAF_NODE	1853:29	1853:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1853:34	1853:34	13	;
LEAF_NODE	1854:18	1854:18	12	case
LEAF_NODE	1854:24	1854:24	12	'v'
LEAF_NODE	1854:27	1854:27	12	:
EXPR_STATEMENT	1854:29	1854:60	12	crop_data -> mirror = MIRROR_VERT ;
EXPR	1854:29	1854:29	13	crop_data -> mirror = MIRROR_VERT
ASSIGN	1854:29	1854:49	14	crop_data -> mirror = MIRROR_VERT
LVAL	1854:29	1854:29	15	crop_data -> mirror
FIELD	1854:29	1854:40	16	crop_data -> mirror
LEAF_NODE	1854:29	1854:29	17	crop_data
LEAF_NODE	1854:38	1854:38	17	->
LEAF_NODE	1854:40	1854:40	17	mirror
ASSIGN_OP	1854:47	1854:47	15	=
LEAF_NODE	1854:47	1854:47	16	=
RVAL	1854:49	1854:49	15	MIRROR_VERT
FIELD	1854:49	1854:49	16	MIRROR_VERT
LEAF_NODE	1854:49	1854:49	17	MIRROR_VERT
LEAF_NODE	1854:60	1854:60	13	;
JUMP_STATEMENT	1855:29	1855:34	12	break DESTINATION ;
KEYWORD	1855:29	1855:29	13	break
LEAF_NODE	1855:29	1855:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1855:34	1855:34	13	;
LEAF_NODE	1856:18	1856:18	12	case
LEAF_NODE	1856:24	1856:24	12	'b'
LEAF_NODE	1856:27	1856:27	12	:
EXPR_STATEMENT	1856:29	1856:60	12	crop_data -> mirror = MIRROR_BOTH ;
EXPR	1856:29	1856:29	13	crop_data -> mirror = MIRROR_BOTH
ASSIGN	1856:29	1856:49	14	crop_data -> mirror = MIRROR_BOTH
LVAL	1856:29	1856:29	15	crop_data -> mirror
FIELD	1856:29	1856:40	16	crop_data -> mirror
LEAF_NODE	1856:29	1856:29	17	crop_data
LEAF_NODE	1856:38	1856:38	17	->
LEAF_NODE	1856:40	1856:40	17	mirror
ASSIGN_OP	1856:47	1856:47	15	=
LEAF_NODE	1856:47	1856:47	16	=
RVAL	1856:49	1856:49	15	MIRROR_BOTH
FIELD	1856:49	1856:49	16	MIRROR_BOTH
LEAF_NODE	1856:49	1856:49	17	MIRROR_BOTH
LEAF_NODE	1856:60	1856:60	13	;
JUMP_STATEMENT	1857:29	1857:34	12	break DESTINATION ;
KEYWORD	1857:29	1857:29	13	break
LEAF_NODE	1857:29	1857:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1857:34	1857:34	13	;
LABEL	1858:4	1858:11	12	default :
LEAF_NODE	1858:4	1858:4	13	default
LEAF_NODE	1858:11	1858:11	13	:
EXPR_STATEMENT	1858:15	1858:81	12	TIFFError ( "Flip mode must be horiz, vert, or both" , "%s" , optarg ) ;
EXPR	1858:15	1858:15	13	TIFFError ( "Flip mode must be horiz, vert, or both" , "%s" , optarg )
FUNCTION_CALL	1858:15	1858:80	14	TIFFError ( "Flip mode must be horiz, vert, or both" , "%s" , optarg )
CALLEE	1858:15	1858:15	15	TIFFError
LEAF_NODE	1858:15	1858:15	16	TIFFError
LEAF_NODE	1858:25	1858:25	15	(
ARGUMENT	1858:26	1858:26	15	"Flip mode must be horiz, vert, or both"
FIELD	1858:26	1858:26	16	"Flip mode must be horiz, vert, or both"
LEAF_NODE	1858:26	1858:26	17	"Flip mode must be horiz, vert, or both"
LEAF_NODE	1858:66	1858:66	15	,
ARGUMENT	1858:68	1858:68	15	"%s"
FIELD	1858:68	1858:68	16	"%s"
LEAF_NODE	1858:68	1858:68	17	"%s"
LEAF_NODE	1858:72	1858:72	15	,
ARGUMENT	1858:74	1858:74	15	optarg
FIELD	1858:74	1858:74	16	optarg
LEAF_NODE	1858:74	1858:74	17	optarg
LEAF_NODE	1858:80	1858:80	15	)
LEAF_NODE	1858:81	1858:81	13	;
EXPR_STATEMENT	1859:8	1859:59	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1859:8	1859:8	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1859:8	1859:58	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1859:8	1859:8	15	TIFFError
LEAF_NODE	1859:8	1859:8	16	TIFFError
LEAF_NODE	1859:18	1859:18	15	(
ARGUMENT	1859:19	1859:19	15	"For valid options type"
FIELD	1859:19	1859:19	16	"For valid options type"
LEAF_NODE	1859:19	1859:19	17	"For valid options type"
LEAF_NODE	1859:43	1859:43	15	,
ARGUMENT	1859:45	1859:45	15	"tiffcrop -h"
FIELD	1859:45	1859:45	16	"tiffcrop -h"
LEAF_NODE	1859:45	1859:45	17	"tiffcrop -h"
LEAF_NODE	1859:58	1859:58	15	)
LEAF_NODE	1859:59	1859:59	13	;
EXPR_STATEMENT	1860:29	1860:38	12	exit ( - 1 ) ;
EXPR	1860:29	1860:29	13	exit ( - 1 )
FUNCTION_CALL	1860:29	1860:37	14	exit ( - 1 )
CALLEE	1860:29	1860:29	15	exit
LEAF_NODE	1860:29	1860:29	16	exit
LEAF_NODE	1860:34	1860:34	15	(
ARGUMENT	1860:35	1860:35	15	- 1
UNARY_EXPR	1860:35	1860:36	16	- 1
UNARY_OPERATOR	1860:35	1860:35	17	-
LEAF_NODE	1860:35	1860:35	18	-
FIELD	1860:36	1860:36	17	1
LEAF_NODE	1860:36	1860:36	18	1
LEAF_NODE	1860:37	1860:37	15	)
LEAF_NODE	1860:38	1860:38	13	;
LEAF_NODE	1861:4	1861:4	11	}
JUMP_STATEMENT	1862:2	1862:7	9	break DESTINATION ;
KEYWORD	1862:2	1862:2	10	break
LEAF_NODE	1862:2	1862:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1862:7	1862:7	10	;
LEAF_NODE	1863:6	1863:6	9	case
LEAF_NODE	1863:11	1863:11	9	'H'
LEAF_NODE	1863:14	1863:14	9	:
EXPR_STATEMENT	1864:2	1864:28	9	page -> hres = atof ( optarg ) ;
EXPR	1864:2	1864:2	10	page -> hres = atof ( optarg )
ASSIGN	1864:2	1864:15	11	page -> hres = atof ( optarg )
LVAL	1864:2	1864:2	12	page -> hres
FIELD	1864:2	1864:8	13	page -> hres
LEAF_NODE	1864:2	1864:2	14	page
LEAF_NODE	1864:6	1864:6	14	->
LEAF_NODE	1864:8	1864:8	14	hres
ASSIGN_OP	1864:13	1864:13	12	=
LEAF_NODE	1864:13	1864:13	13	=
RVAL	1864:15	1864:15	12	atof ( optarg )
FUNCTION_CALL	1864:15	1864:27	13	atof ( optarg )
CALLEE	1864:15	1864:15	14	atof
LEAF_NODE	1864:15	1864:15	15	atof
LEAF_NODE	1864:20	1864:20	14	(
ARGUMENT	1864:21	1864:21	14	optarg
FIELD	1864:21	1864:21	15	optarg
LEAF_NODE	1864:21	1864:21	16	optarg
LEAF_NODE	1864:27	1864:27	14	)
LEAF_NODE	1864:28	1864:28	10	;
EXPR_STATEMENT	1865:16	1865:50	9	page -> mode |= PAGE_MODE_RESOLUTION ;
EXPR	1865:16	1865:16	10	page -> mode |= PAGE_MODE_RESOLUTION
ASSIGN	1865:16	1865:30	11	page -> mode |= PAGE_MODE_RESOLUTION
LVAL	1865:16	1865:16	12	page -> mode
FIELD	1865:16	1865:22	13	page -> mode
LEAF_NODE	1865:16	1865:16	14	page
LEAF_NODE	1865:20	1865:20	14	->
LEAF_NODE	1865:22	1865:22	14	mode
ASSIGN_OP	1865:27	1865:27	12	|=
LEAF_NODE	1865:27	1865:27	13	|=
RVAL	1865:30	1865:30	12	PAGE_MODE_RESOLUTION
FIELD	1865:30	1865:30	13	PAGE_MODE_RESOLUTION
LEAF_NODE	1865:30	1865:30	14	PAGE_MODE_RESOLUTION
LEAF_NODE	1865:50	1865:50	10	;
JUMP_STATEMENT	1866:2	1866:7	9	break DESTINATION ;
KEYWORD	1866:2	1866:2	10	break
LEAF_NODE	1866:2	1866:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1866:7	1866:7	10	;
LEAF_NODE	1867:6	1867:6	9	case
LEAF_NODE	1867:11	1867:11	9	'I'
LEAF_NODE	1867:14	1867:14	9	:
EXPR_STATEMENT	1868:2	1868:37	9	crop_data -> crop_mode |= CROP_INVERT ;
EXPR	1868:2	1868:2	10	crop_data -> crop_mode |= CROP_INVERT
ASSIGN	1868:2	1868:26	11	crop_data -> crop_mode |= CROP_INVERT
LVAL	1868:2	1868:2	12	crop_data -> crop_mode
FIELD	1868:2	1868:13	13	crop_data -> crop_mode
LEAF_NODE	1868:2	1868:2	14	crop_data
LEAF_NODE	1868:11	1868:11	14	->
LEAF_NODE	1868:13	1868:13	14	crop_mode
ASSIGN_OP	1868:23	1868:23	12	|=
LEAF_NODE	1868:23	1868:23	13	|=
RVAL	1868:26	1868:26	12	CROP_INVERT
FIELD	1868:26	1868:26	13	CROP_INVERT
LEAF_NODE	1868:26	1868:26	14	CROP_INVERT
LEAF_NODE	1868:37	1868:37	10	;
SELECTION	1870:16	1871:18	9	
KEYWORD	1870:16	1870:16	10	if
LEAF_NODE	1870:16	1870:16	11	if
LEAF_NODE	1870:19	1870:19	10	(
CONDITION	1870:20	1870:20	10	streq ( optarg , "black" )
EXPR	1870:20	1870:20	11	streq ( optarg , "black" )
FUNCTION_CALL	1870:20	1870:41	12	streq ( optarg , "black" )
CALLEE	1870:20	1870:20	13	streq
LEAF_NODE	1870:20	1870:20	14	streq
LEAF_NODE	1870:25	1870:25	13	(
ARGUMENT	1870:26	1870:26	13	optarg
FIELD	1870:26	1870:26	14	optarg
LEAF_NODE	1870:26	1870:26	15	optarg
LEAF_NODE	1870:32	1870:32	13	,
ARGUMENT	1870:34	1870:34	13	"black"
FIELD	1870:34	1870:34	14	"black"
LEAF_NODE	1870:34	1870:34	15	"black"
LEAF_NODE	1870:41	1870:41	13	)
LEAF_NODE	1870:42	1870:42	10	)
STATEMENTS	1871:18	1874:18	10	
LEAF_NODE	1871:18	1871:18	11	{
STATEMENTS	1872:4	1873:4	11	
EXPR_STATEMENT	1872:4	1872:51	12	crop_data -> photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	1872:4	1872:4	13	crop_data -> photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	1872:4	1872:29	14	crop_data -> photometric = PHOTOMETRIC_MINISBLACK
LVAL	1872:4	1872:4	15	crop_data -> photometric
FIELD	1872:4	1872:15	16	crop_data -> photometric
LEAF_NODE	1872:4	1872:4	17	crop_data
LEAF_NODE	1872:13	1872:13	17	->
LEAF_NODE	1872:15	1872:15	17	photometric
ASSIGN_OP	1872:27	1872:27	15	=
LEAF_NODE	1872:27	1872:27	16	=
RVAL	1872:29	1872:29	15	PHOTOMETRIC_MINISBLACK
FIELD	1872:29	1872:29	16	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1872:29	1872:29	17	PHOTOMETRIC_MINISBLACK
LEAF_NODE	1872:51	1872:51	13	;
JUMP_STATEMENT	1873:4	1873:12	12	continue DESTINATION ;
KEYWORD	1873:4	1873:4	13	continue
LEAF_NODE	1873:4	1873:4	14	continue
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1873:12	1873:12	13	;
LEAF_NODE	1874:18	1874:18	11	}
SELECTION	1875:16	1876:18	9	
KEYWORD	1875:16	1875:16	10	if
LEAF_NODE	1875:16	1875:16	11	if
LEAF_NODE	1875:19	1875:19	10	(
CONDITION	1875:20	1875:20	10	streq ( optarg , "white" )
EXPR	1875:20	1875:20	11	streq ( optarg , "white" )
FUNCTION_CALL	1875:20	1875:41	12	streq ( optarg , "white" )
CALLEE	1875:20	1875:20	13	streq
LEAF_NODE	1875:20	1875:20	14	streq
LEAF_NODE	1875:25	1875:25	13	(
ARGUMENT	1875:26	1875:26	13	optarg
FIELD	1875:26	1875:26	14	optarg
LEAF_NODE	1875:26	1875:26	15	optarg
LEAF_NODE	1875:32	1875:32	13	,
ARGUMENT	1875:34	1875:34	13	"white"
FIELD	1875:34	1875:34	14	"white"
LEAF_NODE	1875:34	1875:34	15	"white"
LEAF_NODE	1875:41	1875:41	13	)
LEAF_NODE	1875:42	1875:42	10	)
STATEMENTS	1876:18	1879:18	10	
LEAF_NODE	1876:18	1876:18	11	{
STATEMENTS	1877:4	1878:18	11	
EXPR_STATEMENT	1877:4	1877:51	12	crop_data -> photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	1877:4	1877:4	13	crop_data -> photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	1877:4	1877:29	14	crop_data -> photometric = PHOTOMETRIC_MINISWHITE
LVAL	1877:4	1877:4	15	crop_data -> photometric
FIELD	1877:4	1877:15	16	crop_data -> photometric
LEAF_NODE	1877:4	1877:4	17	crop_data
LEAF_NODE	1877:13	1877:13	17	->
LEAF_NODE	1877:15	1877:15	17	photometric
ASSIGN_OP	1877:27	1877:27	15	=
LEAF_NODE	1877:27	1877:27	16	=
RVAL	1877:29	1877:29	15	PHOTOMETRIC_MINISWHITE
FIELD	1877:29	1877:29	16	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1877:29	1877:29	17	PHOTOMETRIC_MINISWHITE
LEAF_NODE	1877:51	1877:51	13	;
JUMP_STATEMENT	1878:18	1878:26	12	continue DESTINATION ;
KEYWORD	1878:18	1878:18	13	continue
LEAF_NODE	1878:18	1878:18	14	continue
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1878:26	1878:26	13	;
LEAF_NODE	1879:18	1879:18	11	}
SELECTION	1880:16	1881:18	9	
KEYWORD	1880:16	1880:16	10	if
LEAF_NODE	1880:16	1880:16	11	if
LEAF_NODE	1880:19	1880:19	10	(
CONDITION	1880:20	1880:20	10	streq ( optarg , "data" )
EXPR	1880:20	1880:20	11	streq ( optarg , "data" )
FUNCTION_CALL	1880:20	1880:40	12	streq ( optarg , "data" )
CALLEE	1880:20	1880:20	13	streq
LEAF_NODE	1880:20	1880:20	14	streq
LEAF_NODE	1880:25	1880:25	13	(
ARGUMENT	1880:26	1880:26	13	optarg
FIELD	1880:26	1880:26	14	optarg
LEAF_NODE	1880:26	1880:26	15	optarg
LEAF_NODE	1880:32	1880:32	13	,
ARGUMENT	1880:34	1880:34	13	"data"
FIELD	1880:34	1880:34	14	"data"
LEAF_NODE	1880:34	1880:34	15	"data"
LEAF_NODE	1880:40	1880:40	13	)
LEAF_NODE	1880:41	1880:41	10	)
STATEMENTS	1881:18	1884:18	10	
LEAF_NODE	1881:18	1881:18	11	{
STATEMENTS	1882:4	1883:18	11	
EXPR_STATEMENT	1882:4	1882:45	12	crop_data -> photometric = INVERT_DATA_ONLY ;
EXPR	1882:4	1882:4	13	crop_data -> photometric = INVERT_DATA_ONLY
ASSIGN	1882:4	1882:29	14	crop_data -> photometric = INVERT_DATA_ONLY
LVAL	1882:4	1882:4	15	crop_data -> photometric
FIELD	1882:4	1882:15	16	crop_data -> photometric
LEAF_NODE	1882:4	1882:4	17	crop_data
LEAF_NODE	1882:13	1882:13	17	->
LEAF_NODE	1882:15	1882:15	17	photometric
ASSIGN_OP	1882:27	1882:27	15	=
LEAF_NODE	1882:27	1882:27	16	=
RVAL	1882:29	1882:29	15	INVERT_DATA_ONLY
FIELD	1882:29	1882:29	16	INVERT_DATA_ONLY
LEAF_NODE	1882:29	1882:29	17	INVERT_DATA_ONLY
LEAF_NODE	1882:45	1882:45	13	;
JUMP_STATEMENT	1883:18	1883:26	12	continue DESTINATION ;
KEYWORD	1883:18	1883:18	13	continue
LEAF_NODE	1883:18	1883:18	14	continue
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1883:26	1883:26	13	;
LEAF_NODE	1884:18	1884:18	11	}
SELECTION	1885:16	1886:18	9	
KEYWORD	1885:16	1885:16	10	if
LEAF_NODE	1885:16	1885:16	11	if
LEAF_NODE	1885:19	1885:19	10	(
CONDITION	1885:20	1885:20	10	streq ( optarg , "both" )
EXPR	1885:20	1885:20	11	streq ( optarg , "both" )
FUNCTION_CALL	1885:20	1885:40	12	streq ( optarg , "both" )
CALLEE	1885:20	1885:20	13	streq
LEAF_NODE	1885:20	1885:20	14	streq
LEAF_NODE	1885:25	1885:25	13	(
ARGUMENT	1885:26	1885:26	13	optarg
FIELD	1885:26	1885:26	14	optarg
LEAF_NODE	1885:26	1885:26	15	optarg
LEAF_NODE	1885:32	1885:32	13	,
ARGUMENT	1885:34	1885:34	13	"both"
FIELD	1885:34	1885:34	14	"both"
LEAF_NODE	1885:34	1885:34	15	"both"
LEAF_NODE	1885:40	1885:40	13	)
LEAF_NODE	1885:41	1885:41	10	)
STATEMENTS	1886:18	1889:18	10	
LEAF_NODE	1886:18	1886:18	11	{
STATEMENTS	1887:4	1888:18	11	
EXPR_STATEMENT	1887:4	1887:48	12	crop_data -> photometric = INVERT_DATA_AND_TAG ;
EXPR	1887:4	1887:4	13	crop_data -> photometric = INVERT_DATA_AND_TAG
ASSIGN	1887:4	1887:29	14	crop_data -> photometric = INVERT_DATA_AND_TAG
LVAL	1887:4	1887:4	15	crop_data -> photometric
FIELD	1887:4	1887:15	16	crop_data -> photometric
LEAF_NODE	1887:4	1887:4	17	crop_data
LEAF_NODE	1887:13	1887:13	17	->
LEAF_NODE	1887:15	1887:15	17	photometric
ASSIGN_OP	1887:27	1887:27	15	=
LEAF_NODE	1887:27	1887:27	16	=
RVAL	1887:29	1887:29	15	INVERT_DATA_AND_TAG
FIELD	1887:29	1887:29	16	INVERT_DATA_AND_TAG
LEAF_NODE	1887:29	1887:29	17	INVERT_DATA_AND_TAG
LEAF_NODE	1887:48	1887:48	13	;
JUMP_STATEMENT	1888:18	1888:26	12	continue DESTINATION ;
KEYWORD	1888:18	1888:18	13	continue
LEAF_NODE	1888:18	1888:18	14	continue
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1888:26	1888:26	13	;
LEAF_NODE	1889:18	1889:18	11	}
EXPR_STATEMENT	1891:2	1891:95	9	TIFFError ( "Missing or unknown option for inverting PHOTOMETRIC_INTERPRETATION" , "%s" , optarg ) ;
EXPR	1891:2	1891:2	10	TIFFError ( "Missing or unknown option for inverting PHOTOMETRIC_INTERPRETATION" , "%s" , optarg )
FUNCTION_CALL	1891:2	1891:94	11	TIFFError ( "Missing or unknown option for inverting PHOTOMETRIC_INTERPRETATION" , "%s" , optarg )
CALLEE	1891:2	1891:2	12	TIFFError
LEAF_NODE	1891:2	1891:2	13	TIFFError
LEAF_NODE	1891:11	1891:11	12	(
ARGUMENT	1891:12	1891:12	12	"Missing or unknown option for inverting PHOTOMETRIC_INTERPRETATION"
FIELD	1891:12	1891:12	13	"Missing or unknown option for inverting PHOTOMETRIC_INTERPRETATION"
LEAF_NODE	1891:12	1891:12	14	"Missing or unknown option for inverting PHOTOMETRIC_INTERPRETATION"
LEAF_NODE	1891:80	1891:80	12	,
ARGUMENT	1891:82	1891:82	12	"%s"
FIELD	1891:82	1891:82	13	"%s"
LEAF_NODE	1891:82	1891:82	14	"%s"
LEAF_NODE	1891:86	1891:86	12	,
ARGUMENT	1891:88	1891:88	12	optarg
FIELD	1891:88	1891:88	13	optarg
LEAF_NODE	1891:88	1891:88	14	optarg
LEAF_NODE	1891:94	1891:94	12	)
LEAF_NODE	1891:95	1891:95	10	;
EXPR_STATEMENT	1892:2	1892:53	9	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1892:2	1892:2	10	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1892:2	1892:52	11	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1892:2	1892:2	12	TIFFError
LEAF_NODE	1892:2	1892:2	13	TIFFError
LEAF_NODE	1892:12	1892:12	12	(
ARGUMENT	1892:13	1892:13	12	"For valid options type"
FIELD	1892:13	1892:13	13	"For valid options type"
LEAF_NODE	1892:13	1892:13	14	"For valid options type"
LEAF_NODE	1892:37	1892:37	12	,
ARGUMENT	1892:39	1892:39	12	"tiffcrop -h"
FIELD	1892:39	1892:39	13	"tiffcrop -h"
LEAF_NODE	1892:39	1892:39	14	"tiffcrop -h"
LEAF_NODE	1892:52	1892:52	12	)
LEAF_NODE	1892:53	1892:53	10	;
EXPR_STATEMENT	1893:16	1893:25	9	exit ( - 1 ) ;
EXPR	1893:16	1893:16	10	exit ( - 1 )
FUNCTION_CALL	1893:16	1893:24	11	exit ( - 1 )
CALLEE	1893:16	1893:16	12	exit
LEAF_NODE	1893:16	1893:16	13	exit
LEAF_NODE	1893:21	1893:21	12	(
ARGUMENT	1893:22	1893:22	12	- 1
UNARY_EXPR	1893:22	1893:23	13	- 1
UNARY_OPERATOR	1893:22	1893:22	14	-
LEAF_NODE	1893:22	1893:22	15	-
FIELD	1893:23	1893:23	14	1
LEAF_NODE	1893:23	1893:23	15	1
LEAF_NODE	1893:24	1893:24	12	)
LEAF_NODE	1893:25	1893:25	10	;
JUMP_STATEMENT	1894:2	1894:7	9	break DESTINATION ;
KEYWORD	1894:2	1894:2	10	break
LEAF_NODE	1894:2	1894:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1894:7	1894:7	10	;
LEAF_NODE	1895:6	1895:6	9	case
LEAF_NODE	1895:11	1895:11	9	'J'
LEAF_NODE	1895:14	1895:14	9	:
EXPR_STATEMENT	1896:2	1896:30	9	page -> hmargin = atof ( optarg ) ;
EXPR	1896:2	1896:2	10	page -> hmargin = atof ( optarg )
ASSIGN	1896:2	1896:18	11	page -> hmargin = atof ( optarg )
LVAL	1896:2	1896:2	12	page -> hmargin
FIELD	1896:2	1896:8	13	page -> hmargin
LEAF_NODE	1896:2	1896:2	14	page
LEAF_NODE	1896:6	1896:6	14	->
LEAF_NODE	1896:8	1896:8	14	hmargin
ASSIGN_OP	1896:16	1896:16	12	=
LEAF_NODE	1896:16	1896:16	13	=
RVAL	1896:18	1896:18	12	atof ( optarg )
FUNCTION_CALL	1896:18	1896:29	13	atof ( optarg )
CALLEE	1896:18	1896:18	14	atof
LEAF_NODE	1896:18	1896:18	15	atof
LEAF_NODE	1896:22	1896:22	14	(
ARGUMENT	1896:23	1896:23	14	optarg
FIELD	1896:23	1896:23	15	optarg
LEAF_NODE	1896:23	1896:23	16	optarg
LEAF_NODE	1896:29	1896:29	14	)
LEAF_NODE	1896:30	1896:30	10	;
EXPR_STATEMENT	1897:16	1897:47	9	page -> mode |= PAGE_MODE_MARGINS ;
EXPR	1897:16	1897:16	10	page -> mode |= PAGE_MODE_MARGINS
ASSIGN	1897:16	1897:30	11	page -> mode |= PAGE_MODE_MARGINS
LVAL	1897:16	1897:16	12	page -> mode
FIELD	1897:16	1897:22	13	page -> mode
LEAF_NODE	1897:16	1897:16	14	page
LEAF_NODE	1897:20	1897:20	14	->
LEAF_NODE	1897:22	1897:22	14	mode
ASSIGN_OP	1897:27	1897:27	12	|=
LEAF_NODE	1897:27	1897:27	13	|=
RVAL	1897:30	1897:30	12	PAGE_MODE_MARGINS
FIELD	1897:30	1897:30	13	PAGE_MODE_MARGINS
LEAF_NODE	1897:30	1897:30	14	PAGE_MODE_MARGINS
LEAF_NODE	1897:47	1897:47	10	;
JUMP_STATEMENT	1898:2	1898:7	9	break DESTINATION ;
KEYWORD	1898:2	1898:2	10	break
LEAF_NODE	1898:2	1898:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1898:7	1898:7	10	;
LEAF_NODE	1899:6	1899:6	9	case
LEAF_NODE	1899:11	1899:11	9	'K'
LEAF_NODE	1899:14	1899:14	9	:
EXPR_STATEMENT	1900:16	1900:44	9	page -> vmargin = atof ( optarg ) ;
EXPR	1900:16	1900:16	10	page -> vmargin = atof ( optarg )
ASSIGN	1900:16	1900:32	11	page -> vmargin = atof ( optarg )
LVAL	1900:16	1900:16	12	page -> vmargin
FIELD	1900:16	1900:22	13	page -> vmargin
LEAF_NODE	1900:16	1900:16	14	page
LEAF_NODE	1900:20	1900:20	14	->
LEAF_NODE	1900:22	1900:22	14	vmargin
ASSIGN_OP	1900:30	1900:30	12	=
LEAF_NODE	1900:30	1900:30	13	=
RVAL	1900:32	1900:32	12	atof ( optarg )
FUNCTION_CALL	1900:32	1900:43	13	atof ( optarg )
CALLEE	1900:32	1900:32	14	atof
LEAF_NODE	1900:32	1900:32	15	atof
LEAF_NODE	1900:36	1900:36	14	(
ARGUMENT	1900:37	1900:37	14	optarg
FIELD	1900:37	1900:37	15	optarg
LEAF_NODE	1900:37	1900:37	16	optarg
LEAF_NODE	1900:43	1900:43	14	)
LEAF_NODE	1900:44	1900:44	10	;
EXPR_STATEMENT	1901:16	1901:47	9	page -> mode |= PAGE_MODE_MARGINS ;
EXPR	1901:16	1901:16	10	page -> mode |= PAGE_MODE_MARGINS
ASSIGN	1901:16	1901:30	11	page -> mode |= PAGE_MODE_MARGINS
LVAL	1901:16	1901:16	12	page -> mode
FIELD	1901:16	1901:22	13	page -> mode
LEAF_NODE	1901:16	1901:16	14	page
LEAF_NODE	1901:20	1901:20	14	->
LEAF_NODE	1901:22	1901:22	14	mode
ASSIGN_OP	1901:27	1901:27	12	|=
LEAF_NODE	1901:27	1901:27	13	|=
RVAL	1901:30	1901:30	12	PAGE_MODE_MARGINS
FIELD	1901:30	1901:30	13	PAGE_MODE_MARGINS
LEAF_NODE	1901:30	1901:30	14	PAGE_MODE_MARGINS
LEAF_NODE	1901:47	1901:47	10	;
JUMP_STATEMENT	1902:2	1902:7	9	break DESTINATION ;
KEYWORD	1902:2	1902:2	10	break
LEAF_NODE	1902:2	1902:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1902:7	1902:7	10	;
LEAF_NODE	1903:6	1903:6	9	case
LEAF_NODE	1903:11	1903:11	9	'N'
LEAF_NODE	1903:14	1903:14	9	:
ITERATION	1904:16	1907:21	9	
KEYWORD	1904:16	1904:16	10	for
LEAF_NODE	1904:16	1904:16	11	for
LEAF_NODE	1904:20	1904:20	10	(
FOR_INIT	1904:21	1904:58	10	i = 0 , opt_ptr = strtok ( optarg , "," ) ;
EXPR	1904:21	1904:28	11	i = 0 , opt_ptr = strtok ( optarg , "," )
ASSIGN	1904:21	1904:25	12	i = 0
LVAL	1904:21	1904:21	13	i
FIELD	1904:21	1904:21	14	i
LEAF_NODE	1904:21	1904:21	15	i
ASSIGN_OP	1904:23	1904:23	13	=
LEAF_NODE	1904:23	1904:23	14	=
RVAL	1904:25	1904:25	13	0
FIELD	1904:25	1904:25	14	0
LEAF_NODE	1904:25	1904:25	15	0
LEAF_NODE	1904:26	1904:26	12	,
ASSIGN	1904:28	1904:38	12	opt_ptr = strtok ( optarg , "," )
LVAL	1904:28	1904:28	13	opt_ptr
FIELD	1904:28	1904:28	14	opt_ptr
LEAF_NODE	1904:28	1904:28	15	opt_ptr
ASSIGN_OP	1904:36	1904:36	13	=
LEAF_NODE	1904:36	1904:36	14	=
RVAL	1904:38	1904:38	13	strtok ( optarg , "," )
FUNCTION_CALL	1904:38	1904:57	14	strtok ( optarg , "," )
CALLEE	1904:38	1904:38	15	strtok
LEAF_NODE	1904:38	1904:38	16	strtok
LEAF_NODE	1904:45	1904:45	15	(
ARGUMENT	1904:46	1904:46	15	optarg
FIELD	1904:46	1904:46	16	optarg
LEAF_NODE	1904:46	1904:46	17	optarg
LEAF_NODE	1904:52	1904:52	15	,
ARGUMENT	1904:54	1904:54	15	","
FIELD	1904:54	1904:54	16	","
LEAF_NODE	1904:54	1904:54	17	","
LEAF_NODE	1904:57	1904:57	15	)
LEAF_NODE	1904:58	1904:58	11	;
CONDITION	1905:20	1905:20	10	( ( opt_ptr != NULL ) && ( i < MAX_IMAGES ) )
EXPR	1905:20	1905:59	11	( ( opt_ptr != NULL ) && ( i < MAX_IMAGES ) )
LEAF_NODE	1905:20	1905:20	12	(
AND	1905:21	1905:43	12	( opt_ptr != NULL ) && ( i < MAX_IMAGES )
EXPR	1905:21	1905:37	13	( opt_ptr != NULL )
LEAF_NODE	1905:21	1905:21	14	(
FIELD	1905:22	1905:22	14	opt_ptr
LEAF_NODE	1905:22	1905:22	15	opt_ptr
EQ_OPERATOR	1905:30	1905:30	14	!=
LEAF_NODE	1905:30	1905:30	15	!=
FIELD	1905:33	1905:33	14	NULL
LEAF_NODE	1905:33	1905:33	15	NULL
LEAF_NODE	1905:37	1905:37	14	)
LEAF_NODE	1905:39	1905:39	13	&&
EXPR	1905:43	1905:58	13	( i < MAX_IMAGES )
LEAF_NODE	1905:43	1905:43	14	(
FIELD	1905:44	1905:44	14	i
LEAF_NODE	1905:44	1905:44	15	i
REL_OPERATOR	1905:46	1905:46	14	<
LEAF_NODE	1905:46	1905:46	15	<
FIELD	1905:48	1905:48	14	MAX_IMAGES
LEAF_NODE	1905:48	1905:48	15	MAX_IMAGES
LEAF_NODE	1905:58	1905:58	14	)
LEAF_NODE	1905:59	1905:59	12	)
LEAF_NODE	1905:60	1905:60	10	;
FOR_EXPR	1906:21	1906:21	10	( opt_ptr = strtok ( NULL , "," ) )
EXPR	1906:21	1906:50	11	( opt_ptr = strtok ( NULL , "," ) )
LEAF_NODE	1906:21	1906:21	12	(
ASSIGN	1906:22	1906:32	12	opt_ptr = strtok ( NULL , "," )
LVAL	1906:22	1906:22	13	opt_ptr
FIELD	1906:22	1906:22	14	opt_ptr
LEAF_NODE	1906:22	1906:22	15	opt_ptr
ASSIGN_OP	1906:30	1906:30	13	=
LEAF_NODE	1906:30	1906:30	14	=
RVAL	1906:32	1906:32	13	strtok ( NULL , "," )
FUNCTION_CALL	1906:32	1906:49	14	strtok ( NULL , "," )
CALLEE	1906:32	1906:32	15	strtok
LEAF_NODE	1906:32	1906:32	16	strtok
LEAF_NODE	1906:39	1906:39	15	(
ARGUMENT	1906:40	1906:40	15	NULL
FIELD	1906:40	1906:40	16	NULL
LEAF_NODE	1906:40	1906:40	17	NULL
LEAF_NODE	1906:44	1906:44	15	,
ARGUMENT	1906:46	1906:46	15	","
FIELD	1906:46	1906:46	16	","
LEAF_NODE	1906:46	1906:46	17	","
LEAF_NODE	1906:49	1906:49	15	)
LEAF_NODE	1906:50	1906:50	12	)
LEAF_NODE	1906:51	1906:51	10	)
STATEMENTS	1907:21	1952:6	10	
LEAF_NODE	1907:21	1907:21	11	{
STATEMENTS	1913:7	1920:7	11	
SELECTION	1913:7	1914:23	12	
KEYWORD	1913:7	1913:7	13	if
LEAF_NODE	1913:7	1913:7	14	if
LEAF_NODE	1913:10	1913:10	13	(
CONDITION	1913:11	1913:11	13	streq ( opt_ptr , "odd" )
EXPR	1913:11	1913:11	14	streq ( opt_ptr , "odd" )
FUNCTION_CALL	1913:11	1913:31	15	streq ( opt_ptr , "odd" )
CALLEE	1913:11	1913:11	16	streq
LEAF_NODE	1913:11	1913:11	17	streq
LEAF_NODE	1913:16	1913:16	16	(
ARGUMENT	1913:17	1913:17	16	opt_ptr
FIELD	1913:17	1913:17	17	opt_ptr
LEAF_NODE	1913:17	1913:17	18	opt_ptr
LEAF_NODE	1913:24	1913:24	16	,
ARGUMENT	1913:26	1913:26	16	"odd"
FIELD	1913:26	1913:26	17	"odd"
LEAF_NODE	1913:26	1913:26	18	"odd"
LEAF_NODE	1913:31	1913:31	16	)
LEAF_NODE	1913:32	1913:32	13	)
STATEMENTS	1914:23	1919:9	13	
LEAF_NODE	1914:23	1914:23	14	{
STATEMENTS	1915:9	1918:23	14	
ITERATION	1915:9	1916:4	15	
KEYWORD	1915:9	1915:9	16	for
LEAF_NODE	1915:9	1915:9	17	for
LEAF_NODE	1915:13	1915:13	16	(
FOR_INIT	1915:14	1915:19	16	j = 1 ;
EXPR	1915:14	1915:14	17	j = 1
ASSIGN	1915:14	1915:18	18	j = 1
LVAL	1915:14	1915:14	19	j
FIELD	1915:14	1915:14	20	j
LEAF_NODE	1915:14	1915:14	21	j
ASSIGN_OP	1915:16	1915:16	19	=
LEAF_NODE	1915:16	1915:16	20	=
RVAL	1915:18	1915:18	19	1
FIELD	1915:18	1915:18	20	1
LEAF_NODE	1915:18	1915:18	21	1
LEAF_NODE	1915:19	1915:19	17	;
CONDITION	1915:21	1915:21	16	j <= MAX_IMAGES
EXPR	1915:21	1915:26	17	j <= MAX_IMAGES
FIELD	1915:21	1915:21	18	j
LEAF_NODE	1915:21	1915:21	19	j
REL_OPERATOR	1915:23	1915:23	18	<=
LEAF_NODE	1915:23	1915:23	19	<=
FIELD	1915:26	1915:26	18	MAX_IMAGES
LEAF_NODE	1915:26	1915:26	19	MAX_IMAGES
LEAF_NODE	1915:36	1915:36	16	;
FOR_EXPR	1915:38	1915:38	16	j += 2
EXPR	1915:38	1915:38	17	j += 2
ASSIGN	1915:38	1915:43	18	j += 2
LVAL	1915:38	1915:38	19	j
FIELD	1915:38	1915:38	20	j
LEAF_NODE	1915:38	1915:38	21	j
ASSIGN_OP	1915:40	1915:40	19	+=
LEAF_NODE	1915:40	1915:40	20	+=
RVAL	1915:43	1915:43	19	2
FIELD	1915:43	1915:43	20	2
LEAF_NODE	1915:43	1915:43	21	2
LEAF_NODE	1915:44	1915:44	16	)
STATEMENTS	1916:4	1916:4	16	
EXPR_STATEMENT	1916:4	1916:22	17	imagelist [ i ++ ] = j ;
EXPR	1916:4	1916:4	18	imagelist [ i ++ ] = j
ASSIGN	1916:4	1916:21	19	imagelist [ i ++ ] = j
LVAL	1916:4	1916:4	20	imagelist [ i ++ ]
FIELD	1916:4	1916:17	21	imagelist [ i ++ ]
LEAF_NODE	1916:4	1916:4	22	imagelist
LEAF_NODE	1916:13	1916:13	22	[
EXPR	1916:14	1916:14	22	i ++
FIELD	1916:14	1916:15	23	i ++
LEAF_NODE	1916:14	1916:14	24	i
LEAF_NODE	1916:15	1916:15	24	++
LEAF_NODE	1916:17	1916:17	22	]
ASSIGN_OP	1916:19	1916:19	20	=
LEAF_NODE	1916:19	1916:19	21	=
RVAL	1916:21	1916:21	20	j
FIELD	1916:21	1916:21	21	j
LEAF_NODE	1916:21	1916:21	22	j
LEAF_NODE	1916:22	1916:22	18	;
EXPR_STATEMENT	1917:23	1917:58	15	* image_count = ( MAX_IMAGES - 1 ) / 2 ;
EXPR	1917:23	1917:23	16	* image_count = ( MAX_IMAGES - 1 ) / 2
ASSIGN	1917:23	1917:38	17	* image_count = ( MAX_IMAGES - 1 ) / 2
LVAL	1917:23	1917:23	18	* image_count
UNARY_EXPR	1917:23	1917:24	19	* image_count
UNARY_OPERATOR	1917:23	1917:23	20	*
LEAF_NODE	1917:23	1917:23	21	*
FIELD	1917:24	1917:24	20	image_count
LEAF_NODE	1917:24	1917:24	21	image_count
ASSIGN_OP	1917:36	1917:36	18	=
LEAF_NODE	1917:36	1917:36	19	=
RVAL	1917:38	1917:57	18	( MAX_IMAGES - 1 ) / 2
LEAF_NODE	1917:38	1917:38	19	(
FIELD	1917:39	1917:39	19	MAX_IMAGES
LEAF_NODE	1917:39	1917:39	20	MAX_IMAGES
LEAF_NODE	1917:50	1917:50	19	-
FIELD	1917:52	1917:52	19	1
LEAF_NODE	1917:52	1917:52	20	1
LEAF_NODE	1917:53	1917:53	19	)
LEAF_NODE	1917:55	1917:55	19	/
FIELD	1917:57	1917:57	19	2
LEAF_NODE	1917:57	1917:57	20	2
LEAF_NODE	1917:58	1917:58	16	;
JUMP_STATEMENT	1918:23	1918:28	15	break DESTINATION ;
KEYWORD	1918:23	1918:23	16	break
LEAF_NODE	1918:23	1918:23	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	1918:28	1918:28	16	;
LEAF_NODE	1919:9	1919:9	14	}
SELECTION	1920:7	1921:23	12	
KEYWORD	1920:7	1920:7	13	else
LEAF_NODE	1920:7	1920:7	14	else
STATEMENTS	1921:23	1951:8	13	
LEAF_NODE	1921:23	1921:23	14	{
STATEMENTS	1922:9	1929:9	14	
SELECTION	1922:9	1923:25	15	
KEYWORD	1922:9	1922:9	16	if
LEAF_NODE	1922:9	1922:9	17	if
LEAF_NODE	1922:12	1922:12	16	(
CONDITION	1922:13	1922:13	16	streq ( opt_ptr , "even" )
EXPR	1922:13	1922:13	17	streq ( opt_ptr , "even" )
FUNCTION_CALL	1922:13	1922:34	18	streq ( opt_ptr , "even" )
CALLEE	1922:13	1922:13	19	streq
LEAF_NODE	1922:13	1922:13	20	streq
LEAF_NODE	1922:18	1922:18	19	(
ARGUMENT	1922:19	1922:19	19	opt_ptr
FIELD	1922:19	1922:19	20	opt_ptr
LEAF_NODE	1922:19	1922:19	21	opt_ptr
LEAF_NODE	1922:26	1922:26	19	,
ARGUMENT	1922:28	1922:28	19	"even"
FIELD	1922:28	1922:28	20	"even"
LEAF_NODE	1922:28	1922:28	21	"even"
LEAF_NODE	1922:34	1922:34	19	)
LEAF_NODE	1922:35	1922:35	16	)
STATEMENTS	1923:25	1928:4	16	
LEAF_NODE	1923:25	1923:25	17	{
STATEMENTS	1924:4	1927:25	17	
ITERATION	1924:4	1925:6	18	
KEYWORD	1924:4	1924:4	19	for
LEAF_NODE	1924:4	1924:4	20	for
LEAF_NODE	1924:8	1924:8	19	(
FOR_INIT	1924:9	1924:14	19	j = 2 ;
EXPR	1924:9	1924:9	20	j = 2
ASSIGN	1924:9	1924:13	21	j = 2
LVAL	1924:9	1924:9	22	j
FIELD	1924:9	1924:9	23	j
LEAF_NODE	1924:9	1924:9	24	j
ASSIGN_OP	1924:11	1924:11	22	=
LEAF_NODE	1924:11	1924:11	23	=
RVAL	1924:13	1924:13	22	2
FIELD	1924:13	1924:13	23	2
LEAF_NODE	1924:13	1924:13	24	2
LEAF_NODE	1924:14	1924:14	20	;
CONDITION	1924:16	1924:16	19	j <= MAX_IMAGES
EXPR	1924:16	1924:21	20	j <= MAX_IMAGES
FIELD	1924:16	1924:16	21	j
LEAF_NODE	1924:16	1924:16	22	j
REL_OPERATOR	1924:18	1924:18	21	<=
LEAF_NODE	1924:18	1924:18	22	<=
FIELD	1924:21	1924:21	21	MAX_IMAGES
LEAF_NODE	1924:21	1924:21	22	MAX_IMAGES
LEAF_NODE	1924:31	1924:31	19	;
FOR_EXPR	1924:33	1924:33	19	j += 2
EXPR	1924:33	1924:33	20	j += 2
ASSIGN	1924:33	1924:38	21	j += 2
LVAL	1924:33	1924:33	22	j
FIELD	1924:33	1924:33	23	j
LEAF_NODE	1924:33	1924:33	24	j
ASSIGN_OP	1924:35	1924:35	22	+=
LEAF_NODE	1924:35	1924:35	23	+=
RVAL	1924:38	1924:38	22	2
FIELD	1924:38	1924:38	23	2
LEAF_NODE	1924:38	1924:38	24	2
LEAF_NODE	1924:39	1924:39	19	)
STATEMENTS	1925:6	1925:6	19	
EXPR_STATEMENT	1925:6	1925:24	20	imagelist [ i ++ ] = j ;
EXPR	1925:6	1925:6	21	imagelist [ i ++ ] = j
ASSIGN	1925:6	1925:23	22	imagelist [ i ++ ] = j
LVAL	1925:6	1925:6	23	imagelist [ i ++ ]
FIELD	1925:6	1925:19	24	imagelist [ i ++ ]
LEAF_NODE	1925:6	1925:6	25	imagelist
LEAF_NODE	1925:15	1925:15	25	[
EXPR	1925:16	1925:16	25	i ++
FIELD	1925:16	1925:17	26	i ++
LEAF_NODE	1925:16	1925:16	27	i
LEAF_NODE	1925:17	1925:17	27	++
LEAF_NODE	1925:19	1925:19	25	]
ASSIGN_OP	1925:21	1925:21	23	=
LEAF_NODE	1925:21	1925:21	24	=
RVAL	1925:23	1925:23	23	j
FIELD	1925:23	1925:23	24	j
LEAF_NODE	1925:23	1925:23	25	j
LEAF_NODE	1925:24	1925:24	21	;
EXPR_STATEMENT	1926:25	1926:54	18	* image_count = MAX_IMAGES / 2 ;
EXPR	1926:25	1926:25	19	* image_count = MAX_IMAGES / 2
ASSIGN	1926:25	1926:40	20	* image_count = MAX_IMAGES / 2
LVAL	1926:25	1926:25	21	* image_count
UNARY_EXPR	1926:25	1926:26	22	* image_count
UNARY_OPERATOR	1926:25	1926:25	23	*
LEAF_NODE	1926:25	1926:25	24	*
FIELD	1926:26	1926:26	23	image_count
LEAF_NODE	1926:26	1926:26	24	image_count
ASSIGN_OP	1926:38	1926:38	21	=
LEAF_NODE	1926:38	1926:38	22	=
RVAL	1926:40	1926:53	21	MAX_IMAGES / 2
FIELD	1926:40	1926:40	22	MAX_IMAGES
LEAF_NODE	1926:40	1926:40	23	MAX_IMAGES
LEAF_NODE	1926:51	1926:51	22	/
FIELD	1926:53	1926:53	22	2
LEAF_NODE	1926:53	1926:53	23	2
LEAF_NODE	1926:54	1926:54	19	;
JUMP_STATEMENT	1927:25	1927:30	18	break DESTINATION ;
KEYWORD	1927:25	1927:25	19	break
LEAF_NODE	1927:25	1927:25	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	1927:30	1927:30	19	;
LEAF_NODE	1928:4	1928:4	17	}
SELECTION	1929:9	1930:25	15	
KEYWORD	1929:9	1929:9	16	else
LEAF_NODE	1929:9	1929:9	17	else
STATEMENTS	1930:25	1950:4	16	
LEAF_NODE	1930:25	1930:25	17	{
STATEMENTS	1931:4	1933:4	17	
SELECTION	1931:4	1932:6	18	
KEYWORD	1931:4	1931:4	19	if
LEAF_NODE	1931:4	1931:4	20	if
LEAF_NODE	1931:7	1931:7	19	(
CONDITION	1931:8	1931:8	19	streq ( opt_ptr , "last" )
EXPR	1931:8	1931:8	20	streq ( opt_ptr , "last" )
FUNCTION_CALL	1931:8	1931:29	21	streq ( opt_ptr , "last" )
CALLEE	1931:8	1931:8	22	streq
LEAF_NODE	1931:8	1931:8	23	streq
LEAF_NODE	1931:13	1931:13	22	(
ARGUMENT	1931:14	1931:14	22	opt_ptr
FIELD	1931:14	1931:14	23	opt_ptr
LEAF_NODE	1931:14	1931:14	24	opt_ptr
LEAF_NODE	1931:21	1931:21	22	,
ARGUMENT	1931:23	1931:23	22	"last"
FIELD	1931:23	1931:23	23	"last"
LEAF_NODE	1931:23	1931:23	24	"last"
LEAF_NODE	1931:29	1931:29	22	)
LEAF_NODE	1931:30	1931:30	19	)
STATEMENTS	1932:6	1932:6	19	
EXPR_STATEMENT	1932:6	1932:33	20	imagelist [ i ++ ] = MAX_IMAGES ;
EXPR	1932:6	1932:6	21	imagelist [ i ++ ] = MAX_IMAGES
ASSIGN	1932:6	1932:23	22	imagelist [ i ++ ] = MAX_IMAGES
LVAL	1932:6	1932:6	23	imagelist [ i ++ ]
FIELD	1932:6	1932:19	24	imagelist [ i ++ ]
LEAF_NODE	1932:6	1932:6	25	imagelist
LEAF_NODE	1932:15	1932:15	25	[
EXPR	1932:16	1932:16	25	i ++
FIELD	1932:16	1932:17	26	i ++
LEAF_NODE	1932:16	1932:16	27	i
LEAF_NODE	1932:17	1932:17	27	++
LEAF_NODE	1932:19	1932:19	25	]
ASSIGN_OP	1932:21	1932:21	23	=
LEAF_NODE	1932:21	1932:21	24	=
RVAL	1932:23	1932:23	23	MAX_IMAGES
FIELD	1932:23	1932:23	24	MAX_IMAGES
LEAF_NODE	1932:23	1932:23	25	MAX_IMAGES
LEAF_NODE	1932:33	1932:33	21	;
SELECTION	1933:4	1934:6	18	
KEYWORD	1933:4	1933:4	19	else
LEAF_NODE	1933:4	1933:4	20	else
STATEMENTS	1934:6	1949:6	19	
LEAF_NODE	1934:6	1934:6	20	{
STATEMENTS	1935:6	1938:27	20	
EXPR_STATEMENT	1935:6	1935:34	21	sep = strpbrk ( opt_ptr , ":-" ) ;
EXPR	1935:6	1935:6	22	sep = strpbrk ( opt_ptr , ":-" )
ASSIGN	1935:6	1935:12	23	sep = strpbrk ( opt_ptr , ":-" )
LVAL	1935:6	1935:6	24	sep
FIELD	1935:6	1935:6	25	sep
LEAF_NODE	1935:6	1935:6	26	sep
ASSIGN_OP	1935:10	1935:10	24	=
LEAF_NODE	1935:10	1935:10	25	=
RVAL	1935:12	1935:12	24	strpbrk ( opt_ptr , ":-" )
FUNCTION_CALL	1935:12	1935:33	25	strpbrk ( opt_ptr , ":-" )
CALLEE	1935:12	1935:12	26	strpbrk
LEAF_NODE	1935:12	1935:12	27	strpbrk
LEAF_NODE	1935:19	1935:19	26	(
ARGUMENT	1935:20	1935:20	26	opt_ptr
FIELD	1935:20	1935:20	27	opt_ptr
LEAF_NODE	1935:20	1935:20	28	opt_ptr
LEAF_NODE	1935:27	1935:27	26	,
ARGUMENT	1935:29	1935:29	26	":-"
FIELD	1935:29	1935:29	27	":-"
LEAF_NODE	1935:29	1935:29	28	":-"
LEAF_NODE	1935:33	1935:33	26	)
LEAF_NODE	1935:34	1935:34	22	;
SELECTION	1936:6	1937:8	21	
KEYWORD	1936:6	1936:6	22	if
LEAF_NODE	1936:6	1936:6	23	if
LEAF_NODE	1936:9	1936:9	22	(
CONDITION	1936:10	1936:10	22	! sep
EXPR	1936:10	1936:10	23	! sep
UNARY_EXPR	1936:10	1936:11	24	! sep
UNARY_OPERATOR	1936:10	1936:10	25	!
LEAF_NODE	1936:10	1936:10	26	!
FIELD	1936:11	1936:11	25	sep
LEAF_NODE	1936:11	1936:11	26	sep
LEAF_NODE	1936:14	1936:14	22	)
STATEMENTS	1937:8	1937:8	22	
EXPR_STATEMENT	1937:8	1937:38	23	imagelist [ i ++ ] = atoi ( opt_ptr ) ;
EXPR	1937:8	1937:8	24	imagelist [ i ++ ] = atoi ( opt_ptr )
ASSIGN	1937:8	1937:25	25	imagelist [ i ++ ] = atoi ( opt_ptr )
LVAL	1937:8	1937:8	26	imagelist [ i ++ ]
FIELD	1937:8	1937:21	27	imagelist [ i ++ ]
LEAF_NODE	1937:8	1937:8	28	imagelist
LEAF_NODE	1937:17	1937:17	28	[
EXPR	1937:18	1937:18	28	i ++
FIELD	1937:18	1937:19	29	i ++
LEAF_NODE	1937:18	1937:18	30	i
LEAF_NODE	1937:19	1937:19	30	++
LEAF_NODE	1937:21	1937:21	28	]
ASSIGN_OP	1937:23	1937:23	26	=
LEAF_NODE	1937:23	1937:23	27	=
RVAL	1937:25	1937:25	26	atoi ( opt_ptr )
FUNCTION_CALL	1937:25	1937:37	27	atoi ( opt_ptr )
CALLEE	1937:25	1937:25	28	atoi
LEAF_NODE	1937:25	1937:25	29	atoi
LEAF_NODE	1937:29	1937:29	28	(
ARGUMENT	1937:30	1937:30	28	opt_ptr
FIELD	1937:30	1937:30	29	opt_ptr
LEAF_NODE	1937:30	1937:30	30	opt_ptr
LEAF_NODE	1937:37	1937:37	28	)
LEAF_NODE	1937:38	1937:38	24	;
SELECTION	1938:27	1939:29	21	
KEYWORD	1938:27	1938:27	22	else
LEAF_NODE	1938:27	1938:27	23	else
STATEMENTS	1939:29	1948:8	22	
LEAF_NODE	1939:29	1939:29	23	{
STATEMENTS	1940:8	1946:29	23	
EXPR_STATEMENT	1940:8	1940:19	24	* sep = '\0' ;
EXPR	1940:8	1940:8	25	* sep = '\0'
ASSIGN	1940:8	1940:15	26	* sep = '\0'
LVAL	1940:8	1940:8	27	* sep
UNARY_EXPR	1940:8	1940:9	28	* sep
UNARY_OPERATOR	1940:8	1940:8	29	*
LEAF_NODE	1940:8	1940:8	30	*
FIELD	1940:9	1940:9	29	sep
LEAF_NODE	1940:9	1940:9	30	sep
ASSIGN_OP	1940:13	1940:13	27	=
LEAF_NODE	1940:13	1940:13	28	=
RVAL	1940:15	1940:15	27	'\0'
FIELD	1940:15	1940:15	28	'\0'
LEAF_NODE	1940:15	1940:15	29	'\0'
LEAF_NODE	1940:19	1940:19	25	;
EXPR_STATEMENT	1941:29	1941:51	24	start = atoi ( opt_ptr ) ;
EXPR	1941:29	1941:29	25	start = atoi ( opt_ptr )
ASSIGN	1941:29	1941:37	26	start = atoi ( opt_ptr )
LVAL	1941:29	1941:29	27	start
FIELD	1941:29	1941:29	28	start
LEAF_NODE	1941:29	1941:29	29	start
ASSIGN_OP	1941:35	1941:35	27	=
LEAF_NODE	1941:35	1941:35	28	=
RVAL	1941:37	1941:37	27	atoi ( opt_ptr )
FUNCTION_CALL	1941:37	1941:50	28	atoi ( opt_ptr )
CALLEE	1941:37	1941:37	29	atoi
LEAF_NODE	1941:37	1941:37	30	atoi
LEAF_NODE	1941:42	1941:42	29	(
ARGUMENT	1941:43	1941:43	29	opt_ptr
FIELD	1941:43	1941:43	30	opt_ptr
LEAF_NODE	1941:43	1941:43	31	opt_ptr
LEAF_NODE	1941:50	1941:50	29	)
LEAF_NODE	1941:51	1941:51	25	;
SELECTION	1942:29	1943:10	24	
KEYWORD	1942:29	1942:29	25	if
LEAF_NODE	1942:29	1942:29	26	if
LEAF_NODE	1942:32	1942:32	25	(
CONDITION	1942:33	1942:33	25	! strcmp ( ( sep + 1 ) , "last" )
EXPR	1942:33	1942:33	26	! strcmp ( ( sep + 1 ) , "last" )
UNARY_EXPR	1942:33	1942:34	27	! strcmp ( ( sep + 1 ) , "last" )
UNARY_OPERATOR	1942:33	1942:33	28	!
LEAF_NODE	1942:33	1942:33	29	!
FUNCTION_CALL	1942:34	1942:58	28	strcmp ( ( sep + 1 ) , "last" )
CALLEE	1942:34	1942:34	29	strcmp
LEAF_NODE	1942:34	1942:34	30	strcmp
LEAF_NODE	1942:40	1942:40	29	(
ARGUMENT	1942:41	1942:49	29	( sep + 1 )
LEAF_NODE	1942:41	1942:41	30	(
FIELD	1942:42	1942:42	30	sep
LEAF_NODE	1942:42	1942:42	31	sep
LEAF_NODE	1942:46	1942:46	30	+
FIELD	1942:48	1942:48	30	1
LEAF_NODE	1942:48	1942:48	31	1
LEAF_NODE	1942:49	1942:49	30	)
LEAF_NODE	1942:50	1942:50	29	,
ARGUMENT	1942:52	1942:52	29	"last"
FIELD	1942:52	1942:52	30	"last"
LEAF_NODE	1942:52	1942:52	31	"last"
LEAF_NODE	1942:58	1942:58	29	)
LEAF_NODE	1942:59	1942:59	25	)
STATEMENTS	1943:10	1943:10	25	
EXPR_STATEMENT	1943:10	1943:26	26	end = MAX_IMAGES ;
EXPR	1943:10	1943:10	27	end = MAX_IMAGES
ASSIGN	1943:10	1943:16	28	end = MAX_IMAGES
LVAL	1943:10	1943:10	29	end
FIELD	1943:10	1943:10	30	end
LEAF_NODE	1943:10	1943:10	31	end
ASSIGN_OP	1943:14	1943:14	29	=
LEAF_NODE	1943:14	1943:14	30	=
RVAL	1943:16	1943:16	29	MAX_IMAGES
FIELD	1943:16	1943:16	30	MAX_IMAGES
LEAF_NODE	1943:16	1943:16	31	MAX_IMAGES
LEAF_NODE	1943:26	1943:26	27	;
SELECTION	1944:29	1945:31	24	
KEYWORD	1944:29	1944:29	25	else
LEAF_NODE	1944:29	1944:29	26	else
STATEMENTS	1945:31	1945:31	25	
EXPR_STATEMENT	1945:31	1945:51	26	end = atoi ( sep + 1 ) ;
EXPR	1945:31	1945:31	27	end = atoi ( sep + 1 )
ASSIGN	1945:31	1945:37	28	end = atoi ( sep + 1 )
LVAL	1945:31	1945:31	29	end
FIELD	1945:31	1945:31	30	end
LEAF_NODE	1945:31	1945:31	31	end
ASSIGN_OP	1945:35	1945:35	29	=
LEAF_NODE	1945:35	1945:35	30	=
RVAL	1945:37	1945:37	29	atoi ( sep + 1 )
FUNCTION_CALL	1945:37	1945:50	30	atoi ( sep + 1 )
CALLEE	1945:37	1945:37	31	atoi
LEAF_NODE	1945:37	1945:37	32	atoi
LEAF_NODE	1945:42	1945:42	31	(
ARGUMENT	1945:43	1945:49	31	sep + 1
FIELD	1945:43	1945:43	32	sep
LEAF_NODE	1945:43	1945:43	33	sep
LEAF_NODE	1945:47	1945:47	32	+
FIELD	1945:49	1945:49	32	1
LEAF_NODE	1945:49	1945:49	33	1
LEAF_NODE	1945:50	1945:50	31	)
LEAF_NODE	1945:51	1945:51	27	;
ITERATION	1946:29	1947:10	24	
KEYWORD	1946:29	1946:29	25	for
LEAF_NODE	1946:29	1946:29	26	for
LEAF_NODE	1946:33	1946:33	25	(
FOR_INIT	1946:34	1946:43	25	j = start ;
EXPR	1946:34	1946:34	26	j = start
ASSIGN	1946:34	1946:38	27	j = start
LVAL	1946:34	1946:34	28	j
FIELD	1946:34	1946:34	29	j
LEAF_NODE	1946:34	1946:34	30	j
ASSIGN_OP	1946:36	1946:36	28	=
LEAF_NODE	1946:36	1946:36	29	=
RVAL	1946:38	1946:38	28	start
FIELD	1946:38	1946:38	29	start
LEAF_NODE	1946:38	1946:38	30	start
LEAF_NODE	1946:43	1946:43	26	;
CONDITION	1946:45	1946:45	25	j <= end && j - start + i < MAX_IMAGES
EXPR	1946:45	1946:45	26	j <= end && j - start + i < MAX_IMAGES
AND	1946:45	1946:57	27	j <= end && j - start + i < MAX_IMAGES
EXPR	1946:45	1946:50	28	j <= end
FIELD	1946:45	1946:45	29	j
LEAF_NODE	1946:45	1946:45	30	j
REL_OPERATOR	1946:47	1946:47	29	<=
LEAF_NODE	1946:47	1946:47	30	<=
FIELD	1946:50	1946:50	29	end
LEAF_NODE	1946:50	1946:50	30	end
LEAF_NODE	1946:54	1946:54	28	&&
EXPR	1946:57	1946:73	28	j - start + i < MAX_IMAGES
FIELD	1946:57	1946:57	29	j
LEAF_NODE	1946:57	1946:57	30	j
LEAF_NODE	1946:59	1946:59	29	-
FIELD	1946:61	1946:61	29	start
LEAF_NODE	1946:61	1946:61	30	start
LEAF_NODE	1946:67	1946:67	29	+
FIELD	1946:69	1946:69	29	i
LEAF_NODE	1946:69	1946:69	30	i
REL_OPERATOR	1946:71	1946:71	29	<
LEAF_NODE	1946:71	1946:71	30	<
FIELD	1946:73	1946:73	29	MAX_IMAGES
LEAF_NODE	1946:73	1946:73	30	MAX_IMAGES
LEAF_NODE	1946:83	1946:83	25	;
FOR_EXPR	1946:85	1946:85	25	j ++
EXPR	1946:85	1946:85	26	j ++
FIELD	1946:85	1946:86	27	j ++
LEAF_NODE	1946:85	1946:85	28	j
LEAF_NODE	1946:86	1946:86	28	++
LEAF_NODE	1946:88	1946:88	25	)
STATEMENTS	1947:10	1947:10	25	
EXPR_STATEMENT	1947:10	1947:28	26	imagelist [ i ++ ] = j ;
EXPR	1947:10	1947:10	27	imagelist [ i ++ ] = j
ASSIGN	1947:10	1947:27	28	imagelist [ i ++ ] = j
LVAL	1947:10	1947:10	29	imagelist [ i ++ ]
FIELD	1947:10	1947:23	30	imagelist [ i ++ ]
LEAF_NODE	1947:10	1947:10	31	imagelist
LEAF_NODE	1947:19	1947:19	31	[
EXPR	1947:20	1947:20	31	i ++
FIELD	1947:20	1947:21	32	i ++
LEAF_NODE	1947:20	1947:20	33	i
LEAF_NODE	1947:21	1947:21	33	++
LEAF_NODE	1947:23	1947:23	31	]
ASSIGN_OP	1947:25	1947:25	29	=
LEAF_NODE	1947:25	1947:25	30	=
RVAL	1947:27	1947:27	29	j
FIELD	1947:27	1947:27	30	j
LEAF_NODE	1947:27	1947:27	31	j
LEAF_NODE	1947:28	1947:28	27	;
LEAF_NODE	1948:8	1948:8	23	}
LEAF_NODE	1949:6	1949:6	20	}
LEAF_NODE	1950:4	1950:4	17	}
LEAF_NODE	1951:8	1951:8	14	}
LEAF_NODE	1952:6	1952:6	11	}
EXPR_STATEMENT	1953:16	1953:32	9	* image_count = i ;
EXPR	1953:16	1953:16	10	* image_count = i
ASSIGN	1953:16	1953:31	11	* image_count = i
LVAL	1953:16	1953:16	12	* image_count
UNARY_EXPR	1953:16	1953:17	13	* image_count
UNARY_OPERATOR	1953:16	1953:16	14	*
LEAF_NODE	1953:16	1953:16	15	*
FIELD	1953:17	1953:17	14	image_count
LEAF_NODE	1953:17	1953:17	15	image_count
ASSIGN_OP	1953:29	1953:29	12	=
LEAF_NODE	1953:29	1953:29	13	=
RVAL	1953:31	1953:31	12	i
FIELD	1953:31	1953:31	13	i
LEAF_NODE	1953:31	1953:31	14	i
LEAF_NODE	1953:32	1953:32	10	;
JUMP_STATEMENT	1954:2	1954:7	9	break DESTINATION ;
KEYWORD	1954:2	1954:2	10	break
LEAF_NODE	1954:2	1954:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1954:7	1954:7	10	;
LEAF_NODE	1955:6	1955:6	9	case
LEAF_NODE	1955:11	1955:11	9	'O'
LEAF_NODE	1955:14	1955:14	9	:
SELECTION	1956:2	1957:18	9	
KEYWORD	1956:2	1956:2	10	switch
LEAF_NODE	1956:2	1956:2	11	switch
LEAF_NODE	1956:9	1956:9	10	(
CONDITION	1956:10	1956:10	10	tolower ( ( int ) optarg [ 0 ] )
EXPR	1956:10	1956:10	11	tolower ( ( int ) optarg [ 0 ] )
FUNCTION_CALL	1956:10	1956:33	12	tolower ( ( int ) optarg [ 0 ] )
CALLEE	1956:10	1956:10	13	tolower
LEAF_NODE	1956:10	1956:10	14	tolower
LEAF_NODE	1956:17	1956:17	13	(
ARGUMENT	1956:18	1956:24	13	( int ) optarg [ 0 ]
LEAF_NODE	1956:18	1956:18	14	(
TYPE_NAME	1956:19	1956:19	14	int
LEAF_NODE	1956:19	1956:19	15	int
LEAF_NODE	1956:22	1956:22	14	)
FIELD	1956:24	1956:32	14	optarg [ 0 ]
LEAF_NODE	1956:24	1956:24	15	optarg
LEAF_NODE	1956:30	1956:30	15	[
EXPR	1956:31	1956:31	15	0
FIELD	1956:31	1956:31	16	0
LEAF_NODE	1956:31	1956:31	17	0
LEAF_NODE	1956:32	1956:32	15	]
LEAF_NODE	1956:33	1956:33	13	)
LEAF_NODE	1956:34	1956:34	10	)
STATEMENTS	1957:18	1967:4	10	
LEAF_NODE	1957:18	1957:18	11	{
STATEMENTS	1958:4	1966:28	11	
LEAF_NODE	1958:4	1958:4	12	case
LEAF_NODE	1958:10	1958:10	12	'a'
LEAF_NODE	1958:13	1958:13	12	:
EXPR_STATEMENT	1958:15	1958:46	12	page -> orient = ORIENTATION_AUTO ;
EXPR	1958:15	1958:15	13	page -> orient = ORIENTATION_AUTO
ASSIGN	1958:15	1958:30	14	page -> orient = ORIENTATION_AUTO
LVAL	1958:15	1958:15	15	page -> orient
FIELD	1958:15	1958:21	16	page -> orient
LEAF_NODE	1958:15	1958:15	17	page
LEAF_NODE	1958:19	1958:19	17	->
LEAF_NODE	1958:21	1958:21	17	orient
ASSIGN_OP	1958:28	1958:28	15	=
LEAF_NODE	1958:28	1958:28	16	=
RVAL	1958:30	1958:30	15	ORIENTATION_AUTO
FIELD	1958:30	1958:30	16	ORIENTATION_AUTO
LEAF_NODE	1958:30	1958:30	17	ORIENTATION_AUTO
LEAF_NODE	1958:46	1958:46	13	;
JUMP_STATEMENT	1959:29	1959:34	12	break DESTINATION ;
KEYWORD	1959:29	1959:29	13	break
LEAF_NODE	1959:29	1959:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1959:34	1959:34	13	;
LEAF_NODE	1960:4	1960:4	12	case
LEAF_NODE	1960:10	1960:10	12	'p'
LEAF_NODE	1960:13	1960:13	12	:
EXPR_STATEMENT	1960:15	1960:50	12	page -> orient = ORIENTATION_PORTRAIT ;
EXPR	1960:15	1960:15	13	page -> orient = ORIENTATION_PORTRAIT
ASSIGN	1960:15	1960:30	14	page -> orient = ORIENTATION_PORTRAIT
LVAL	1960:15	1960:15	15	page -> orient
FIELD	1960:15	1960:21	16	page -> orient
LEAF_NODE	1960:15	1960:15	17	page
LEAF_NODE	1960:19	1960:19	17	->
LEAF_NODE	1960:21	1960:21	17	orient
ASSIGN_OP	1960:28	1960:28	15	=
LEAF_NODE	1960:28	1960:28	16	=
RVAL	1960:30	1960:30	15	ORIENTATION_PORTRAIT
FIELD	1960:30	1960:30	16	ORIENTATION_PORTRAIT
LEAF_NODE	1960:30	1960:30	17	ORIENTATION_PORTRAIT
LEAF_NODE	1960:50	1960:50	13	;
JUMP_STATEMENT	1961:29	1961:34	12	break DESTINATION ;
KEYWORD	1961:29	1961:29	13	break
LEAF_NODE	1961:29	1961:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1961:34	1961:34	13	;
LEAF_NODE	1962:4	1962:4	12	case
LEAF_NODE	1962:10	1962:10	12	'l'
LEAF_NODE	1962:13	1962:13	12	:
EXPR_STATEMENT	1962:15	1962:51	12	page -> orient = ORIENTATION_LANDSCAPE ;
EXPR	1962:15	1962:15	13	page -> orient = ORIENTATION_LANDSCAPE
ASSIGN	1962:15	1962:30	14	page -> orient = ORIENTATION_LANDSCAPE
LVAL	1962:15	1962:15	15	page -> orient
FIELD	1962:15	1962:21	16	page -> orient
LEAF_NODE	1962:15	1962:15	17	page
LEAF_NODE	1962:19	1962:19	17	->
LEAF_NODE	1962:21	1962:21	17	orient
ASSIGN_OP	1962:28	1962:28	15	=
LEAF_NODE	1962:28	1962:28	16	=
RVAL	1962:30	1962:30	15	ORIENTATION_LANDSCAPE
FIELD	1962:30	1962:30	16	ORIENTATION_LANDSCAPE
LEAF_NODE	1962:30	1962:30	17	ORIENTATION_LANDSCAPE
LEAF_NODE	1962:51	1962:51	13	;
JUMP_STATEMENT	1963:29	1963:34	12	break DESTINATION ;
KEYWORD	1963:29	1963:29	13	break
LEAF_NODE	1963:29	1963:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1963:34	1963:34	13	;
LABEL	1964:4	1964:11	12	default :
LEAF_NODE	1964:4	1964:4	13	default
LEAF_NODE	1964:11	1964:11	13	:
EXPR_STATEMENT	1964:14	1964:91	12	TIFFError ( "Orientation must be portrait, landscape, or auto." , "%s" , optarg ) ;
EXPR	1964:14	1964:14	13	TIFFError ( "Orientation must be portrait, landscape, or auto." , "%s" , optarg )
FUNCTION_CALL	1964:14	1964:90	14	TIFFError ( "Orientation must be portrait, landscape, or auto." , "%s" , optarg )
CALLEE	1964:14	1964:14	15	TIFFError
LEAF_NODE	1964:14	1964:14	16	TIFFError
LEAF_NODE	1964:24	1964:24	15	(
ARGUMENT	1964:25	1964:25	15	"Orientation must be portrait, landscape, or auto."
FIELD	1964:25	1964:25	16	"Orientation must be portrait, landscape, or auto."
LEAF_NODE	1964:25	1964:25	17	"Orientation must be portrait, landscape, or auto."
LEAF_NODE	1964:76	1964:76	15	,
ARGUMENT	1964:78	1964:78	15	"%s"
FIELD	1964:78	1964:78	16	"%s"
LEAF_NODE	1964:78	1964:78	17	"%s"
LEAF_NODE	1964:82	1964:82	15	,
ARGUMENT	1964:84	1964:84	15	optarg
FIELD	1964:84	1964:84	16	optarg
LEAF_NODE	1964:84	1964:84	17	optarg
LEAF_NODE	1964:90	1964:90	15	)
LEAF_NODE	1964:91	1964:91	13	;
EXPR_STATEMENT	1965:7	1965:58	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	1965:7	1965:7	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	1965:7	1965:57	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	1965:7	1965:7	15	TIFFError
LEAF_NODE	1965:7	1965:7	16	TIFFError
LEAF_NODE	1965:17	1965:17	15	(
ARGUMENT	1965:18	1965:18	15	"For valid options type"
FIELD	1965:18	1965:18	16	"For valid options type"
LEAF_NODE	1965:18	1965:18	17	"For valid options type"
LEAF_NODE	1965:42	1965:42	15	,
ARGUMENT	1965:44	1965:44	15	"tiffcrop -h"
FIELD	1965:44	1965:44	16	"tiffcrop -h"
LEAF_NODE	1965:44	1965:44	17	"tiffcrop -h"
LEAF_NODE	1965:57	1965:57	15	)
LEAF_NODE	1965:58	1965:58	13	;
EXPR_STATEMENT	1966:28	1966:37	12	exit ( - 1 ) ;
EXPR	1966:28	1966:28	13	exit ( - 1 )
FUNCTION_CALL	1966:28	1966:36	14	exit ( - 1 )
CALLEE	1966:28	1966:28	15	exit
LEAF_NODE	1966:28	1966:28	16	exit
LEAF_NODE	1966:33	1966:33	15	(
ARGUMENT	1966:34	1966:34	15	- 1
UNARY_EXPR	1966:34	1966:35	16	- 1
UNARY_OPERATOR	1966:34	1966:34	17	-
LEAF_NODE	1966:34	1966:34	18	-
FIELD	1966:35	1966:35	17	1
LEAF_NODE	1966:35	1966:35	18	1
LEAF_NODE	1966:36	1966:36	15	)
LEAF_NODE	1966:37	1966:37	13	;
LEAF_NODE	1967:4	1967:4	11	}
JUMP_STATEMENT	1968:2	1968:7	9	break DESTINATION ;
KEYWORD	1968:2	1968:2	10	break
LEAF_NODE	1968:2	1968:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1968:7	1968:7	10	;
LEAF_NODE	1969:6	1969:6	9	case
LEAF_NODE	1969:11	1969:11	9	'P'
LEAF_NODE	1969:14	1969:14	9	:
SELECTION	1970:9	1971:18	9	
KEYWORD	1970:9	1970:9	10	if
LEAF_NODE	1970:9	1970:9	11	if
LEAF_NODE	1970:12	1970:12	10	(
CONDITION	1970:13	1970:13	10	sscanf ( optarg , "%lfx%lf" , & page -> width , & page -> length ) == 2
EXPR	1970:13	1970:71	11	sscanf ( optarg , "%lfx%lf" , & page -> width , & page -> length ) == 2
FUNCTION_CALL	1970:13	1970:66	12	sscanf ( optarg , "%lfx%lf" , & page -> width , & page -> length )
CALLEE	1970:13	1970:13	13	sscanf
LEAF_NODE	1970:13	1970:13	14	sscanf
LEAF_NODE	1970:19	1970:19	13	(
ARGUMENT	1970:20	1970:20	13	optarg
FIELD	1970:20	1970:20	14	optarg
LEAF_NODE	1970:20	1970:20	15	optarg
LEAF_NODE	1970:26	1970:26	13	,
ARGUMENT	1970:28	1970:28	13	"%lfx%lf"
FIELD	1970:28	1970:28	14	"%lfx%lf"
LEAF_NODE	1970:28	1970:28	15	"%lfx%lf"
LEAF_NODE	1970:37	1970:37	13	,
ARGUMENT	1970:39	1970:39	13	& page -> width
UNARY_EXPR	1970:39	1970:40	14	& page -> width
UNARY_OPERATOR	1970:39	1970:39	15	&
LEAF_NODE	1970:39	1970:39	16	&
FIELD	1970:40	1970:46	15	page -> width
LEAF_NODE	1970:40	1970:40	16	page
LEAF_NODE	1970:44	1970:44	16	->
LEAF_NODE	1970:46	1970:46	16	width
LEAF_NODE	1970:51	1970:51	13	,
ARGUMENT	1970:53	1970:53	13	& page -> length
UNARY_EXPR	1970:53	1970:54	14	& page -> length
UNARY_OPERATOR	1970:53	1970:53	15	&
LEAF_NODE	1970:53	1970:53	16	&
FIELD	1970:54	1970:60	15	page -> length
LEAF_NODE	1970:54	1970:54	16	page
LEAF_NODE	1970:58	1970:58	16	->
LEAF_NODE	1970:60	1970:60	16	length
LEAF_NODE	1970:66	1970:66	13	)
EQ_OPERATOR	1970:68	1970:68	12	==
LEAF_NODE	1970:68	1970:68	13	==
FIELD	1970:71	1970:71	12	2
LEAF_NODE	1970:71	1970:71	13	2
LEAF_NODE	1970:72	1970:72	10	)
STATEMENTS	1971:18	1975:18	10	
LEAF_NODE	1971:18	1971:18	11	{
STATEMENTS	1972:18	1974:18	11	
EXPR_STATEMENT	1972:18	1972:47	12	strcpy ( page -> name , "Custom" ) ;
EXPR	1972:18	1972:18	13	strcpy ( page -> name , "Custom" )
FUNCTION_CALL	1972:18	1972:46	14	strcpy ( page -> name , "Custom" )
CALLEE	1972:18	1972:18	15	strcpy
LEAF_NODE	1972:18	1972:18	16	strcpy
LEAF_NODE	1972:25	1972:25	15	(
ARGUMENT	1972:26	1972:26	15	page -> name
FIELD	1972:26	1972:32	16	page -> name
LEAF_NODE	1972:26	1972:26	17	page
LEAF_NODE	1972:30	1972:30	17	->
LEAF_NODE	1972:32	1972:32	17	name
LEAF_NODE	1972:36	1972:36	15	,
ARGUMENT	1972:38	1972:38	15	"Custom"
FIELD	1972:38	1972:38	16	"Custom"
LEAF_NODE	1972:38	1972:38	17	"Custom"
LEAF_NODE	1972:46	1972:46	15	)
LEAF_NODE	1972:47	1972:47	13	;
EXPR_STATEMENT	1973:18	1973:51	12	page -> mode |= PAGE_MODE_PAPERSIZE ;
EXPR	1973:18	1973:18	13	page -> mode |= PAGE_MODE_PAPERSIZE
ASSIGN	1973:18	1973:32	14	page -> mode |= PAGE_MODE_PAPERSIZE
LVAL	1973:18	1973:18	15	page -> mode
FIELD	1973:18	1973:24	16	page -> mode
LEAF_NODE	1973:18	1973:18	17	page
LEAF_NODE	1973:22	1973:22	17	->
LEAF_NODE	1973:24	1973:24	17	mode
ASSIGN_OP	1973:29	1973:29	15	|=
LEAF_NODE	1973:29	1973:29	16	|=
RVAL	1973:32	1973:32	15	PAGE_MODE_PAPERSIZE
FIELD	1973:32	1973:32	16	PAGE_MODE_PAPERSIZE
LEAF_NODE	1973:32	1973:32	17	PAGE_MODE_PAPERSIZE
LEAF_NODE	1973:51	1973:51	13	;
JUMP_STATEMENT	1974:18	1974:23	12	break DESTINATION ;
KEYWORD	1974:18	1974:18	13	break
LEAF_NODE	1974:18	1974:18	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1974:23	1974:23	13	;
LEAF_NODE	1975:18	1975:18	11	}
SELECTION	1976:16	1977:18	9	
KEYWORD	1976:16	1976:16	10	if
LEAF_NODE	1976:16	1976:16	11	if
LEAF_NODE	1976:19	1976:19	10	(
CONDITION	1976:20	1976:20	10	get_page_geometry ( optarg , page )
EXPR	1976:20	1976:20	11	get_page_geometry ( optarg , page )
FUNCTION_CALL	1976:20	1976:51	12	get_page_geometry ( optarg , page )
CALLEE	1976:20	1976:20	13	get_page_geometry
LEAF_NODE	1976:20	1976:20	14	get_page_geometry
LEAF_NODE	1976:38	1976:38	13	(
ARGUMENT	1976:39	1976:39	13	optarg
FIELD	1976:39	1976:39	14	optarg
LEAF_NODE	1976:39	1976:39	15	optarg
LEAF_NODE	1976:45	1976:45	13	,
ARGUMENT	1976:47	1976:47	13	page
FIELD	1976:47	1976:47	14	page
LEAF_NODE	1976:47	1976:47	15	page
LEAF_NODE	1976:51	1976:51	13	)
LEAF_NODE	1976:52	1976:52	10	)
STATEMENTS	1977:18	1996:4	10	
LEAF_NODE	1977:18	1977:18	11	{
STATEMENTS	1978:4	1995:4	11	
SELECTION	1978:4	1979:20	12	
KEYWORD	1978:4	1978:4	13	if
LEAF_NODE	1978:4	1978:4	14	if
LEAF_NODE	1978:7	1978:7	13	(
CONDITION	1978:8	1978:8	13	! strcmp ( optarg , "list" )
EXPR	1978:8	1978:8	14	! strcmp ( optarg , "list" )
UNARY_EXPR	1978:8	1978:9	15	! strcmp ( optarg , "list" )
UNARY_OPERATOR	1978:8	1978:8	16	!
LEAF_NODE	1978:8	1978:8	17	!
FUNCTION_CALL	1978:9	1978:30	16	strcmp ( optarg , "list" )
CALLEE	1978:9	1978:9	17	strcmp
LEAF_NODE	1978:9	1978:9	18	strcmp
LEAF_NODE	1978:15	1978:15	17	(
ARGUMENT	1978:16	1978:16	17	optarg
FIELD	1978:16	1978:16	18	optarg
LEAF_NODE	1978:16	1978:16	19	optarg
LEAF_NODE	1978:22	1978:22	17	,
ARGUMENT	1978:24	1978:24	17	"list"
FIELD	1978:24	1978:24	18	"list"
LEAF_NODE	1978:24	1978:24	19	"list"
LEAF_NODE	1978:30	1978:30	17	)
LEAF_NODE	1978:31	1978:31	13	)
STATEMENTS	1979:20	1986:20	13	
LEAF_NODE	1979:20	1979:20	14	{
STATEMENTS	1980:6	1985:6	14	
EXPR_STATEMENT	1980:6	1980:65	15	TIFFError ( "" , "Name            Width   Length (in inches)" ) ;
EXPR	1980:6	1980:6	16	TIFFError ( "" , "Name            Width   Length (in inches)" )
FUNCTION_CALL	1980:6	1980:64	17	TIFFError ( "" , "Name            Width   Length (in inches)" )
CALLEE	1980:6	1980:6	18	TIFFError
LEAF_NODE	1980:6	1980:6	19	TIFFError
LEAF_NODE	1980:15	1980:15	18	(
ARGUMENT	1980:16	1980:16	18	""
FIELD	1980:16	1980:16	19	""
LEAF_NODE	1980:16	1980:16	20	""
LEAF_NODE	1980:18	1980:18	18	,
ARGUMENT	1980:20	1980:20	18	"Name            Width   Length (in inches)"
FIELD	1980:20	1980:20	19	"Name            Width   Length (in inches)"
LEAF_NODE	1980:20	1980:20	20	"Name            Width   Length (in inches)"
LEAF_NODE	1980:64	1980:64	18	)
LEAF_NODE	1980:65	1980:65	16	;
ITERATION	1981:20	1982:22	15	
KEYWORD	1981:20	1981:20	16	for
LEAF_NODE	1981:20	1981:20	17	for
LEAF_NODE	1981:24	1981:24	16	(
FOR_INIT	1981:25	1981:30	16	i = 0 ;
EXPR	1981:25	1981:25	17	i = 0
ASSIGN	1981:25	1981:29	18	i = 0
LVAL	1981:25	1981:25	19	i
FIELD	1981:25	1981:25	20	i
LEAF_NODE	1981:25	1981:25	21	i
ASSIGN_OP	1981:27	1981:27	19	=
LEAF_NODE	1981:27	1981:27	20	=
RVAL	1981:29	1981:29	19	0
FIELD	1981:29	1981:29	20	0
LEAF_NODE	1981:29	1981:29	21	0
LEAF_NODE	1981:30	1981:30	17	;
CONDITION	1981:32	1981:32	16	i < MAX_PAPERNAMES - 1
EXPR	1981:32	1981:53	17	i < MAX_PAPERNAMES - 1
FIELD	1981:32	1981:32	18	i
LEAF_NODE	1981:32	1981:32	19	i
REL_OPERATOR	1981:34	1981:34	18	<
LEAF_NODE	1981:34	1981:34	19	<
FIELD	1981:36	1981:36	18	MAX_PAPERNAMES
LEAF_NODE	1981:36	1981:36	19	MAX_PAPERNAMES
LEAF_NODE	1981:51	1981:51	18	-
FIELD	1981:53	1981:53	18	1
LEAF_NODE	1981:53	1981:53	19	1
LEAF_NODE	1981:54	1981:54	16	;
FOR_EXPR	1981:56	1981:56	16	i ++
EXPR	1981:56	1981:56	17	i ++
FIELD	1981:56	1981:57	18	i ++
LEAF_NODE	1981:56	1981:56	19	i
LEAF_NODE	1981:57	1981:57	19	++
LEAF_NODE	1981:59	1981:59	16	)
STATEMENTS	1982:22	1982:22	16	
EXPR_STATEMENT	1982:22	1984:52	17	TIFFError ( "" , "%-15.15s %5.2f   %5.2f" , PaperTable [ i ] . name , PaperTable [ i ] . width , PaperTable [ i ] . length ) ;
EXPR	1982:22	1982:22	18	TIFFError ( "" , "%-15.15s %5.2f   %5.2f" , PaperTable [ i ] . name , PaperTable [ i ] . width , PaperTable [ i ] . length )
FUNCTION_CALL	1982:22	1984:51	19	TIFFError ( "" , "%-15.15s %5.2f   %5.2f" , PaperTable [ i ] . name , PaperTable [ i ] . width , PaperTable [ i ] . length )
CALLEE	1982:22	1982:22	20	TIFFError
LEAF_NODE	1982:22	1982:22	21	TIFFError
LEAF_NODE	1982:32	1982:32	20	(
ARGUMENT	1982:33	1982:33	20	""
FIELD	1982:33	1982:33	21	""
LEAF_NODE	1982:33	1982:33	22	""
LEAF_NODE	1982:35	1982:35	20	,
ARGUMENT	1982:37	1982:37	20	"%-15.15s %5.2f   %5.2f"
FIELD	1982:37	1982:37	21	"%-15.15s %5.2f   %5.2f"
LEAF_NODE	1982:37	1982:37	22	"%-15.15s %5.2f   %5.2f"
LEAF_NODE	1982:61	1982:61	20	,
ARGUMENT	1983:10	1983:10	20	PaperTable [ i ] . name
FIELD	1983:10	1983:24	21	PaperTable [ i ] . name
LEAF_NODE	1983:10	1983:10	22	PaperTable
LEAF_NODE	1983:20	1983:20	22	[
EXPR	1983:21	1983:21	22	i
FIELD	1983:21	1983:21	23	i
LEAF_NODE	1983:21	1983:21	24	i
LEAF_NODE	1983:22	1983:22	22	]
LEAF_NODE	1983:23	1983:23	22	.
LEAF_NODE	1983:24	1983:24	22	name
LEAF_NODE	1983:28	1983:28	20	,
ARGUMENT	1983:30	1983:30	20	PaperTable [ i ] . width
FIELD	1983:30	1983:44	21	PaperTable [ i ] . width
LEAF_NODE	1983:30	1983:30	22	PaperTable
LEAF_NODE	1983:40	1983:40	22	[
EXPR	1983:41	1983:41	22	i
FIELD	1983:41	1983:41	23	i
LEAF_NODE	1983:41	1983:41	24	i
LEAF_NODE	1983:42	1983:42	22	]
LEAF_NODE	1983:43	1983:43	22	.
LEAF_NODE	1983:44	1983:44	22	width
LEAF_NODE	1983:49	1983:49	20	,
ARGUMENT	1984:31	1984:31	20	PaperTable [ i ] . length
FIELD	1984:31	1984:45	21	PaperTable [ i ] . length
LEAF_NODE	1984:31	1984:31	22	PaperTable
LEAF_NODE	1984:41	1984:41	22	[
EXPR	1984:42	1984:42	22	i
FIELD	1984:42	1984:42	23	i
LEAF_NODE	1984:42	1984:42	24	i
LEAF_NODE	1984:43	1984:43	22	]
LEAF_NODE	1984:44	1984:44	22	.
LEAF_NODE	1984:45	1984:45	22	length
LEAF_NODE	1984:51	1984:51	20	)
LEAF_NODE	1984:52	1984:52	18	;
EXPR_STATEMENT	1985:6	1985:15	15	exit ( - 1 ) ;
EXPR	1985:6	1985:6	16	exit ( - 1 )
FUNCTION_CALL	1985:6	1985:14	17	exit ( - 1 )
CALLEE	1985:6	1985:6	18	exit
LEAF_NODE	1985:6	1985:6	19	exit
LEAF_NODE	1985:11	1985:11	18	(
ARGUMENT	1985:12	1985:12	18	- 1
UNARY_EXPR	1985:12	1985:13	19	- 1
UNARY_OPERATOR	1985:12	1985:12	20	-
LEAF_NODE	1985:12	1985:12	21	-
FIELD	1985:13	1985:13	20	1
LEAF_NODE	1985:13	1985:13	21	1
LEAF_NODE	1985:14	1985:14	18	)
LEAF_NODE	1985:15	1985:15	16	;
LEAF_NODE	1986:20	1986:20	14	}
EXPR_STATEMENT	1988:4	1988:50	12	TIFFError ( "Invalid paper size" , "%s" , optarg ) ;
EXPR	1988:4	1988:4	13	TIFFError ( "Invalid paper size" , "%s" , optarg )
FUNCTION_CALL	1988:4	1988:49	14	TIFFError ( "Invalid paper size" , "%s" , optarg )
CALLEE	1988:4	1988:4	15	TIFFError
LEAF_NODE	1988:4	1988:4	16	TIFFError
LEAF_NODE	1988:14	1988:14	15	(
ARGUMENT	1988:15	1988:15	15	"Invalid paper size"
FIELD	1988:15	1988:15	16	"Invalid paper size"
LEAF_NODE	1988:15	1988:15	17	"Invalid paper size"
LEAF_NODE	1988:35	1988:35	15	,
ARGUMENT	1988:37	1988:37	15	"%s"
FIELD	1988:37	1988:37	16	"%s"
LEAF_NODE	1988:37	1988:37	17	"%s"
LEAF_NODE	1988:41	1988:41	15	,
ARGUMENT	1988:43	1988:43	15	optarg
FIELD	1988:43	1988:43	16	optarg
LEAF_NODE	1988:43	1988:43	17	optarg
LEAF_NODE	1988:49	1988:49	15	)
LEAF_NODE	1988:50	1988:50	13	;
EXPR_STATEMENT	1989:18	1989:50	12	TIFFError ( "" , "Select one of:" ) ;
EXPR	1989:18	1989:18	13	TIFFError ( "" , "Select one of:" )
FUNCTION_CALL	1989:18	1989:49	14	TIFFError ( "" , "Select one of:" )
CALLEE	1989:18	1989:18	15	TIFFError
LEAF_NODE	1989:18	1989:18	16	TIFFError
LEAF_NODE	1989:28	1989:28	15	(
ARGUMENT	1989:29	1989:29	15	""
FIELD	1989:29	1989:29	16	""
LEAF_NODE	1989:29	1989:29	17	""
LEAF_NODE	1989:31	1989:31	15	,
ARGUMENT	1989:33	1989:33	15	"Select one of:"
FIELD	1989:33	1989:33	16	"Select one of:"
LEAF_NODE	1989:33	1989:33	17	"Select one of:"
LEAF_NODE	1989:49	1989:49	15	)
LEAF_NODE	1989:50	1989:50	13	;
EXPR_STATEMENT	1990:4	1990:63	12	TIFFError ( "" , "Name            Width   Length (in inches)" ) ;
EXPR	1990:4	1990:4	13	TIFFError ( "" , "Name            Width   Length (in inches)" )
FUNCTION_CALL	1990:4	1990:62	14	TIFFError ( "" , "Name            Width   Length (in inches)" )
CALLEE	1990:4	1990:4	15	TIFFError
LEAF_NODE	1990:4	1990:4	16	TIFFError
LEAF_NODE	1990:13	1990:13	15	(
ARGUMENT	1990:14	1990:14	15	""
FIELD	1990:14	1990:14	16	""
LEAF_NODE	1990:14	1990:14	17	""
LEAF_NODE	1990:16	1990:16	15	,
ARGUMENT	1990:18	1990:18	15	"Name            Width   Length (in inches)"
FIELD	1990:18	1990:18	16	"Name            Width   Length (in inches)"
LEAF_NODE	1990:18	1990:18	17	"Name            Width   Length (in inches)"
LEAF_NODE	1990:62	1990:62	15	)
LEAF_NODE	1990:63	1990:63	13	;
ITERATION	1991:18	1992:20	12	
KEYWORD	1991:18	1991:18	13	for
LEAF_NODE	1991:18	1991:18	14	for
LEAF_NODE	1991:22	1991:22	13	(
FOR_INIT	1991:23	1991:28	13	i = 0 ;
EXPR	1991:23	1991:23	14	i = 0
ASSIGN	1991:23	1991:27	15	i = 0
LVAL	1991:23	1991:23	16	i
FIELD	1991:23	1991:23	17	i
LEAF_NODE	1991:23	1991:23	18	i
ASSIGN_OP	1991:25	1991:25	16	=
LEAF_NODE	1991:25	1991:25	17	=
RVAL	1991:27	1991:27	16	0
FIELD	1991:27	1991:27	17	0
LEAF_NODE	1991:27	1991:27	18	0
LEAF_NODE	1991:28	1991:28	14	;
CONDITION	1991:30	1991:30	13	i < MAX_PAPERNAMES - 1
EXPR	1991:30	1991:51	14	i < MAX_PAPERNAMES - 1
FIELD	1991:30	1991:30	15	i
LEAF_NODE	1991:30	1991:30	16	i
REL_OPERATOR	1991:32	1991:32	15	<
LEAF_NODE	1991:32	1991:32	16	<
FIELD	1991:34	1991:34	15	MAX_PAPERNAMES
LEAF_NODE	1991:34	1991:34	16	MAX_PAPERNAMES
LEAF_NODE	1991:49	1991:49	15	-
FIELD	1991:51	1991:51	15	1
LEAF_NODE	1991:51	1991:51	16	1
LEAF_NODE	1991:52	1991:52	13	;
FOR_EXPR	1991:54	1991:54	13	i ++
EXPR	1991:54	1991:54	14	i ++
FIELD	1991:54	1991:55	15	i ++
LEAF_NODE	1991:54	1991:54	16	i
LEAF_NODE	1991:55	1991:55	16	++
LEAF_NODE	1991:57	1991:57	13	)
STATEMENTS	1992:20	1992:20	13	
EXPR_STATEMENT	1992:20	1994:52	14	TIFFError ( "" , "%-15.15s %5.2f   %5.2f" , PaperTable [ i ] . name , PaperTable [ i ] . width , PaperTable [ i ] . length ) ;
EXPR	1992:20	1992:20	15	TIFFError ( "" , "%-15.15s %5.2f   %5.2f" , PaperTable [ i ] . name , PaperTable [ i ] . width , PaperTable [ i ] . length )
FUNCTION_CALL	1992:20	1994:51	16	TIFFError ( "" , "%-15.15s %5.2f   %5.2f" , PaperTable [ i ] . name , PaperTable [ i ] . width , PaperTable [ i ] . length )
CALLEE	1992:20	1992:20	17	TIFFError
LEAF_NODE	1992:20	1992:20	18	TIFFError
LEAF_NODE	1992:30	1992:30	17	(
ARGUMENT	1992:31	1992:31	17	""
FIELD	1992:31	1992:31	18	""
LEAF_NODE	1992:31	1992:31	19	""
LEAF_NODE	1992:33	1992:33	17	,
ARGUMENT	1992:35	1992:35	17	"%-15.15s %5.2f   %5.2f"
FIELD	1992:35	1992:35	18	"%-15.15s %5.2f   %5.2f"
LEAF_NODE	1992:35	1992:35	19	"%-15.15s %5.2f   %5.2f"
LEAF_NODE	1992:59	1992:59	17	,
ARGUMENT	1993:10	1993:10	17	PaperTable [ i ] . name
FIELD	1993:10	1993:24	18	PaperTable [ i ] . name
LEAF_NODE	1993:10	1993:10	19	PaperTable
LEAF_NODE	1993:20	1993:20	19	[
EXPR	1993:21	1993:21	19	i
FIELD	1993:21	1993:21	20	i
LEAF_NODE	1993:21	1993:21	21	i
LEAF_NODE	1993:22	1993:22	19	]
LEAF_NODE	1993:23	1993:23	19	.
LEAF_NODE	1993:24	1993:24	19	name
LEAF_NODE	1993:28	1993:28	17	,
ARGUMENT	1993:30	1993:30	17	PaperTable [ i ] . width
FIELD	1993:30	1993:44	18	PaperTable [ i ] . width
LEAF_NODE	1993:30	1993:30	19	PaperTable
LEAF_NODE	1993:40	1993:40	19	[
EXPR	1993:41	1993:41	19	i
FIELD	1993:41	1993:41	20	i
LEAF_NODE	1993:41	1993:41	21	i
LEAF_NODE	1993:42	1993:42	19	]
LEAF_NODE	1993:43	1993:43	19	.
LEAF_NODE	1993:44	1993:44	19	width
LEAF_NODE	1993:49	1993:49	17	,
ARGUMENT	1994:31	1994:31	17	PaperTable [ i ] . length
FIELD	1994:31	1994:45	18	PaperTable [ i ] . length
LEAF_NODE	1994:31	1994:31	19	PaperTable
LEAF_NODE	1994:41	1994:41	19	[
EXPR	1994:42	1994:42	19	i
FIELD	1994:42	1994:42	20	i
LEAF_NODE	1994:42	1994:42	21	i
LEAF_NODE	1994:43	1994:43	19	]
LEAF_NODE	1994:44	1994:44	19	.
LEAF_NODE	1994:45	1994:45	19	length
LEAF_NODE	1994:51	1994:51	17	)
LEAF_NODE	1994:52	1994:52	15	;
EXPR_STATEMENT	1995:4	1995:13	12	exit ( - 1 ) ;
EXPR	1995:4	1995:4	13	exit ( - 1 )
FUNCTION_CALL	1995:4	1995:12	14	exit ( - 1 )
CALLEE	1995:4	1995:4	15	exit
LEAF_NODE	1995:4	1995:4	16	exit
LEAF_NODE	1995:9	1995:9	15	(
ARGUMENT	1995:10	1995:10	15	- 1
UNARY_EXPR	1995:10	1995:11	16	- 1
UNARY_OPERATOR	1995:10	1995:10	17	-
LEAF_NODE	1995:10	1995:10	18	-
FIELD	1995:11	1995:11	17	1
LEAF_NODE	1995:11	1995:11	18	1
LEAF_NODE	1995:12	1995:12	15	)
LEAF_NODE	1995:13	1995:13	13	;
LEAF_NODE	1996:4	1996:4	11	}
SELECTION	1997:2	1998:18	9	
KEYWORD	1997:2	1997:2	10	else
LEAF_NODE	1997:2	1997:2	11	else
STATEMENTS	1998:18	2000:4	10	
LEAF_NODE	1998:18	1998:18	11	{
STATEMENTS	1999:18	1999:18	11	
EXPR_STATEMENT	1999:18	1999:51	12	page -> mode |= PAGE_MODE_PAPERSIZE ;
EXPR	1999:18	1999:18	13	page -> mode |= PAGE_MODE_PAPERSIZE
ASSIGN	1999:18	1999:32	14	page -> mode |= PAGE_MODE_PAPERSIZE
LVAL	1999:18	1999:18	15	page -> mode
FIELD	1999:18	1999:24	16	page -> mode
LEAF_NODE	1999:18	1999:18	17	page
LEAF_NODE	1999:22	1999:22	17	->
LEAF_NODE	1999:24	1999:24	17	mode
ASSIGN_OP	1999:29	1999:29	15	|=
LEAF_NODE	1999:29	1999:29	16	|=
RVAL	1999:32	1999:32	15	PAGE_MODE_PAPERSIZE
FIELD	1999:32	1999:32	16	PAGE_MODE_PAPERSIZE
LEAF_NODE	1999:32	1999:32	17	PAGE_MODE_PAPERSIZE
LEAF_NODE	1999:51	1999:51	13	;
LEAF_NODE	2000:4	2000:4	11	}
JUMP_STATEMENT	2001:2	2001:7	9	break DESTINATION ;
KEYWORD	2001:2	2001:2	10	break
LEAF_NODE	2001:2	2001:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2001:7	2001:7	10	;
LEAF_NODE	2002:6	2002:6	9	case
LEAF_NODE	2002:11	2002:11	9	'R'
LEAF_NODE	2002:14	2002:14	9	:
EXPR_STATEMENT	2003:2	2003:37	9	crop_data -> crop_mode |= CROP_ROTATE ;
EXPR	2003:2	2003:2	10	crop_data -> crop_mode |= CROP_ROTATE
ASSIGN	2003:2	2003:26	11	crop_data -> crop_mode |= CROP_ROTATE
LVAL	2003:2	2003:2	12	crop_data -> crop_mode
FIELD	2003:2	2003:13	13	crop_data -> crop_mode
LEAF_NODE	2003:2	2003:2	14	crop_data
LEAF_NODE	2003:11	2003:11	14	->
LEAF_NODE	2003:13	2003:13	14	crop_mode
ASSIGN_OP	2003:23	2003:23	12	|=
LEAF_NODE	2003:23	2003:23	13	|=
RVAL	2003:26	2003:26	12	CROP_ROTATE
FIELD	2003:26	2003:26	13	CROP_ROTATE
LEAF_NODE	2003:26	2003:26	14	CROP_ROTATE
LEAF_NODE	2003:37	2003:37	10	;
SELECTION	2004:2	2005:18	9	
KEYWORD	2004:2	2004:2	10	switch
LEAF_NODE	2004:2	2004:2	11	switch
LEAF_NODE	2004:9	2004:9	10	(
CONDITION	2004:10	2004:10	10	strtoul ( optarg , NULL , 0 )
EXPR	2004:10	2004:10	11	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	2004:10	2004:33	12	strtoul ( optarg , NULL , 0 )
CALLEE	2004:10	2004:10	13	strtoul
LEAF_NODE	2004:10	2004:10	14	strtoul
LEAF_NODE	2004:17	2004:17	13	(
ARGUMENT	2004:18	2004:18	13	optarg
FIELD	2004:18	2004:18	14	optarg
LEAF_NODE	2004:18	2004:18	15	optarg
LEAF_NODE	2004:24	2004:24	13	,
ARGUMENT	2004:26	2004:26	13	NULL
FIELD	2004:26	2004:26	14	NULL
LEAF_NODE	2004:26	2004:26	15	NULL
LEAF_NODE	2004:30	2004:30	13	,
ARGUMENT	2004:32	2004:32	13	0
FIELD	2004:32	2004:32	14	0
LEAF_NODE	2004:32	2004:32	15	0
LEAF_NODE	2004:33	2004:33	13	)
LEAF_NODE	2004:34	2004:34	10	)
STATEMENTS	2005:18	2015:4	10	
LEAF_NODE	2005:18	2005:18	11	{
STATEMENTS	2006:4	2014:29	11	
LABEL	2006:4	2006:12	12	case 90 :
LEAF_NODE	2006:4	2006:4	13	case
LEAF_NODE	2006:10	2006:10	13	90
LEAF_NODE	2006:12	2006:12	13	:
EXPR_STATEMENT	2006:15	2006:47	12	crop_data -> rotation = ( uint16 ) 90 ;
EXPR	2006:15	2006:15	13	crop_data -> rotation = ( uint16 ) 90
ASSIGN	2006:15	2006:37	14	crop_data -> rotation = ( uint16 ) 90
LVAL	2006:15	2006:15	15	crop_data -> rotation
FIELD	2006:15	2006:26	16	crop_data -> rotation
LEAF_NODE	2006:15	2006:15	17	crop_data
LEAF_NODE	2006:24	2006:24	17	->
LEAF_NODE	2006:26	2006:26	17	rotation
ASSIGN_OP	2006:35	2006:35	15	=
LEAF_NODE	2006:35	2006:35	16	=
RVAL	2006:37	2006:45	15	( uint16 ) 90
LEAF_NODE	2006:37	2006:37	16	(
TYPE_NAME	2006:38	2006:38	16	uint16
LEAF_NODE	2006:38	2006:38	17	uint16
LEAF_NODE	2006:44	2006:44	16	)
FIELD	2006:45	2006:45	16	90
LEAF_NODE	2006:45	2006:45	17	90
LEAF_NODE	2006:47	2006:47	13	;
JUMP_STATEMENT	2007:29	2007:34	12	break DESTINATION ;
KEYWORD	2007:29	2007:29	13	break
LEAF_NODE	2007:29	2007:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2007:34	2007:34	13	;
LABEL	2008:18	2008:27	12	case 180 :
LEAF_NODE	2008:18	2008:18	13	case
LEAF_NODE	2008:24	2008:24	13	180
LEAF_NODE	2008:27	2008:27	13	:
EXPR_STATEMENT	2008:29	2008:62	12	crop_data -> rotation = ( uint16 ) 180 ;
EXPR	2008:29	2008:29	13	crop_data -> rotation = ( uint16 ) 180
ASSIGN	2008:29	2008:51	14	crop_data -> rotation = ( uint16 ) 180
LVAL	2008:29	2008:29	15	crop_data -> rotation
FIELD	2008:29	2008:40	16	crop_data -> rotation
LEAF_NODE	2008:29	2008:29	17	crop_data
LEAF_NODE	2008:38	2008:38	17	->
LEAF_NODE	2008:40	2008:40	17	rotation
ASSIGN_OP	2008:49	2008:49	15	=
LEAF_NODE	2008:49	2008:49	16	=
RVAL	2008:51	2008:59	15	( uint16 ) 180
LEAF_NODE	2008:51	2008:51	16	(
TYPE_NAME	2008:52	2008:52	16	uint16
LEAF_NODE	2008:52	2008:52	17	uint16
LEAF_NODE	2008:58	2008:58	16	)
FIELD	2008:59	2008:59	16	180
LEAF_NODE	2008:59	2008:59	17	180
LEAF_NODE	2008:62	2008:62	13	;
JUMP_STATEMENT	2009:29	2009:34	12	break DESTINATION ;
KEYWORD	2009:29	2009:29	13	break
LEAF_NODE	2009:29	2009:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2009:34	2009:34	13	;
LABEL	2010:18	2010:27	12	case 270 :
LEAF_NODE	2010:18	2010:18	13	case
LEAF_NODE	2010:24	2010:24	13	270
LEAF_NODE	2010:27	2010:27	13	:
EXPR_STATEMENT	2010:29	2010:62	12	crop_data -> rotation = ( uint16 ) 270 ;
EXPR	2010:29	2010:29	13	crop_data -> rotation = ( uint16 ) 270
ASSIGN	2010:29	2010:51	14	crop_data -> rotation = ( uint16 ) 270
LVAL	2010:29	2010:29	15	crop_data -> rotation
FIELD	2010:29	2010:40	16	crop_data -> rotation
LEAF_NODE	2010:29	2010:29	17	crop_data
LEAF_NODE	2010:38	2010:38	17	->
LEAF_NODE	2010:40	2010:40	17	rotation
ASSIGN_OP	2010:49	2010:49	15	=
LEAF_NODE	2010:49	2010:49	16	=
RVAL	2010:51	2010:59	15	( uint16 ) 270
LEAF_NODE	2010:51	2010:51	16	(
TYPE_NAME	2010:52	2010:52	16	uint16
LEAF_NODE	2010:52	2010:52	17	uint16
LEAF_NODE	2010:58	2010:58	16	)
FIELD	2010:59	2010:59	16	270
LEAF_NODE	2010:59	2010:59	17	270
LEAF_NODE	2010:62	2010:62	13	;
JUMP_STATEMENT	2011:29	2011:34	12	break DESTINATION ;
KEYWORD	2011:29	2011:29	13	break
LEAF_NODE	2011:29	2011:29	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2011:34	2011:34	13	;
LABEL	2012:4	2012:11	12	default :
LEAF_NODE	2012:4	2012:4	13	default
LEAF_NODE	2012:11	2012:11	13	:
EXPR_STATEMENT	2012:15	2012:93	12	TIFFError ( "Rotation must be 90, 180, or 270 degrees clockwise" , "%s" , optarg ) ;
EXPR	2012:15	2012:15	13	TIFFError ( "Rotation must be 90, 180, or 270 degrees clockwise" , "%s" , optarg )
FUNCTION_CALL	2012:15	2012:92	14	TIFFError ( "Rotation must be 90, 180, or 270 degrees clockwise" , "%s" , optarg )
CALLEE	2012:15	2012:15	15	TIFFError
LEAF_NODE	2012:15	2012:15	16	TIFFError
LEAF_NODE	2012:25	2012:25	15	(
ARGUMENT	2012:26	2012:26	15	"Rotation must be 90, 180, or 270 degrees clockwise"
FIELD	2012:26	2012:26	16	"Rotation must be 90, 180, or 270 degrees clockwise"
LEAF_NODE	2012:26	2012:26	17	"Rotation must be 90, 180, or 270 degrees clockwise"
LEAF_NODE	2012:78	2012:78	15	,
ARGUMENT	2012:80	2012:80	15	"%s"
FIELD	2012:80	2012:80	16	"%s"
LEAF_NODE	2012:80	2012:80	17	"%s"
LEAF_NODE	2012:84	2012:84	15	,
ARGUMENT	2012:86	2012:86	15	optarg
FIELD	2012:86	2012:86	16	optarg
LEAF_NODE	2012:86	2012:86	17	optarg
LEAF_NODE	2012:92	2012:92	15	)
LEAF_NODE	2012:93	2012:93	13	;
EXPR_STATEMENT	2013:8	2013:59	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	2013:8	2013:8	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	2013:8	2013:58	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	2013:8	2013:8	15	TIFFError
LEAF_NODE	2013:8	2013:8	16	TIFFError
LEAF_NODE	2013:18	2013:18	15	(
ARGUMENT	2013:19	2013:19	15	"For valid options type"
FIELD	2013:19	2013:19	16	"For valid options type"
LEAF_NODE	2013:19	2013:19	17	"For valid options type"
LEAF_NODE	2013:43	2013:43	15	,
ARGUMENT	2013:45	2013:45	15	"tiffcrop -h"
FIELD	2013:45	2013:45	16	"tiffcrop -h"
LEAF_NODE	2013:45	2013:45	17	"tiffcrop -h"
LEAF_NODE	2013:58	2013:58	15	)
LEAF_NODE	2013:59	2013:59	13	;
EXPR_STATEMENT	2014:29	2014:38	12	exit ( - 1 ) ;
EXPR	2014:29	2014:29	13	exit ( - 1 )
FUNCTION_CALL	2014:29	2014:37	14	exit ( - 1 )
CALLEE	2014:29	2014:29	15	exit
LEAF_NODE	2014:29	2014:29	16	exit
LEAF_NODE	2014:34	2014:34	15	(
ARGUMENT	2014:35	2014:35	15	- 1
UNARY_EXPR	2014:35	2014:36	16	- 1
UNARY_OPERATOR	2014:35	2014:35	17	-
LEAF_NODE	2014:35	2014:35	18	-
FIELD	2014:36	2014:36	17	1
LEAF_NODE	2014:36	2014:36	18	1
LEAF_NODE	2014:37	2014:37	15	)
LEAF_NODE	2014:38	2014:38	13	;
LEAF_NODE	2015:4	2015:4	11	}
JUMP_STATEMENT	2016:2	2016:7	9	break DESTINATION ;
KEYWORD	2016:2	2016:2	10	break
LEAF_NODE	2016:2	2016:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2016:7	2016:7	10	;
LEAF_NODE	2017:6	2017:6	9	case
LEAF_NODE	2017:11	2017:11	9	'S'
LEAF_NODE	2017:14	2017:14	9	:
EXPR_STATEMENT	2018:2	2018:29	9	sep = strpbrk ( optarg , ",:" ) ;
EXPR	2018:2	2018:2	10	sep = strpbrk ( optarg , ",:" )
ASSIGN	2018:2	2018:8	11	sep = strpbrk ( optarg , ",:" )
LVAL	2018:2	2018:2	12	sep
FIELD	2018:2	2018:2	13	sep
LEAF_NODE	2018:2	2018:2	14	sep
ASSIGN_OP	2018:6	2018:6	12	=
LEAF_NODE	2018:6	2018:6	13	=
RVAL	2018:8	2018:8	12	strpbrk ( optarg , ",:" )
FUNCTION_CALL	2018:8	2018:28	13	strpbrk ( optarg , ",:" )
CALLEE	2018:8	2018:8	14	strpbrk
LEAF_NODE	2018:8	2018:8	15	strpbrk
LEAF_NODE	2018:15	2018:15	14	(
ARGUMENT	2018:16	2018:16	14	optarg
FIELD	2018:16	2018:16	15	optarg
LEAF_NODE	2018:16	2018:16	16	optarg
LEAF_NODE	2018:22	2018:22	14	,
ARGUMENT	2018:24	2018:24	14	",:"
FIELD	2018:24	2018:24	15	",:"
LEAF_NODE	2018:24	2018:24	16	",:"
LEAF_NODE	2018:28	2018:28	14	)
LEAF_NODE	2018:29	2018:29	10	;
SELECTION	2019:2	2020:18	9	
KEYWORD	2019:2	2019:2	10	if
LEAF_NODE	2019:2	2019:2	11	if
LEAF_NODE	2019:5	2019:5	10	(
CONDITION	2019:6	2019:6	10	sep
EXPR	2019:6	2019:6	11	sep
FIELD	2019:6	2019:6	12	sep
LEAF_NODE	2019:6	2019:6	13	sep
LEAF_NODE	2019:9	2019:9	10	)
STATEMENTS	2020:18	2024:4	10	
LEAF_NODE	2020:18	2020:18	11	{
STATEMENTS	2021:18	2023:18	11	
EXPR_STATEMENT	2021:18	2021:29	12	* sep = '\0' ;
EXPR	2021:18	2021:18	13	* sep = '\0'
ASSIGN	2021:18	2021:25	14	* sep = '\0'
LVAL	2021:18	2021:18	15	* sep
UNARY_EXPR	2021:18	2021:19	16	* sep
UNARY_OPERATOR	2021:18	2021:18	17	*
LEAF_NODE	2021:18	2021:18	18	*
FIELD	2021:19	2021:19	17	sep
LEAF_NODE	2021:19	2021:19	18	sep
ASSIGN_OP	2021:23	2021:23	15	=
LEAF_NODE	2021:23	2021:23	16	=
RVAL	2021:25	2021:25	15	'\0'
FIELD	2021:25	2021:25	16	'\0'
LEAF_NODE	2021:25	2021:25	17	'\0'
LEAF_NODE	2021:29	2021:29	13	;
EXPR_STATEMENT	2022:18	2022:43	12	page -> cols = atoi ( optarg ) ;
EXPR	2022:18	2022:18	13	page -> cols = atoi ( optarg )
ASSIGN	2022:18	2022:31	14	page -> cols = atoi ( optarg )
LVAL	2022:18	2022:18	15	page -> cols
FIELD	2022:18	2022:24	16	page -> cols
LEAF_NODE	2022:18	2022:18	17	page
LEAF_NODE	2022:22	2022:22	17	->
LEAF_NODE	2022:24	2022:24	17	cols
ASSIGN_OP	2022:29	2022:29	15	=
LEAF_NODE	2022:29	2022:29	16	=
RVAL	2022:31	2022:31	15	atoi ( optarg )
FUNCTION_CALL	2022:31	2022:42	16	atoi ( optarg )
CALLEE	2022:31	2022:31	17	atoi
LEAF_NODE	2022:31	2022:31	18	atoi
LEAF_NODE	2022:35	2022:35	17	(
ARGUMENT	2022:36	2022:36	17	optarg
FIELD	2022:36	2022:36	18	optarg
LEAF_NODE	2022:36	2022:36	19	optarg
LEAF_NODE	2022:42	2022:42	17	)
LEAF_NODE	2022:43	2022:43	13	;
EXPR_STATEMENT	2023:18	2023:43	12	page -> rows = atoi ( sep + 1 ) ;
EXPR	2023:18	2023:18	13	page -> rows = atoi ( sep + 1 )
ASSIGN	2023:18	2023:31	14	page -> rows = atoi ( sep + 1 )
LVAL	2023:18	2023:18	15	page -> rows
FIELD	2023:18	2023:24	16	page -> rows
LEAF_NODE	2023:18	2023:18	17	page
LEAF_NODE	2023:22	2023:22	17	->
LEAF_NODE	2023:24	2023:24	17	rows
ASSIGN_OP	2023:29	2023:29	15	=
LEAF_NODE	2023:29	2023:29	16	=
RVAL	2023:31	2023:31	15	atoi ( sep + 1 )
FUNCTION_CALL	2023:31	2023:42	16	atoi ( sep + 1 )
CALLEE	2023:31	2023:31	17	atoi
LEAF_NODE	2023:31	2023:31	18	atoi
LEAF_NODE	2023:35	2023:35	17	(
ARGUMENT	2023:36	2023:41	17	sep + 1
FIELD	2023:36	2023:36	18	sep
LEAF_NODE	2023:36	2023:36	19	sep
LEAF_NODE	2023:40	2023:40	18	+
FIELD	2023:41	2023:41	18	1
LEAF_NODE	2023:41	2023:41	19	1
LEAF_NODE	2023:42	2023:42	17	)
LEAF_NODE	2023:43	2023:43	13	;
LEAF_NODE	2024:4	2024:4	11	}
SELECTION	2025:16	2026:18	9	
KEYWORD	2025:16	2025:16	10	else
LEAF_NODE	2025:16	2025:16	11	else
STATEMENTS	2026:18	2029:4	10	
LEAF_NODE	2026:18	2026:18	11	{
STATEMENTS	2027:18	2028:18	11	
EXPR_STATEMENT	2027:18	2027:43	12	page -> cols = atoi ( optarg ) ;
EXPR	2027:18	2027:18	13	page -> cols = atoi ( optarg )
ASSIGN	2027:18	2027:31	14	page -> cols = atoi ( optarg )
LVAL	2027:18	2027:18	15	page -> cols
FIELD	2027:18	2027:24	16	page -> cols
LEAF_NODE	2027:18	2027:18	17	page
LEAF_NODE	2027:22	2027:22	17	->
LEAF_NODE	2027:24	2027:24	17	cols
ASSIGN_OP	2027:29	2027:29	15	=
LEAF_NODE	2027:29	2027:29	16	=
RVAL	2027:31	2027:31	15	atoi ( optarg )
FUNCTION_CALL	2027:31	2027:42	16	atoi ( optarg )
CALLEE	2027:31	2027:31	17	atoi
LEAF_NODE	2027:31	2027:31	18	atoi
LEAF_NODE	2027:35	2027:35	17	(
ARGUMENT	2027:36	2027:36	17	optarg
FIELD	2027:36	2027:36	18	optarg
LEAF_NODE	2027:36	2027:36	19	optarg
LEAF_NODE	2027:42	2027:42	17	)
LEAF_NODE	2027:43	2027:43	13	;
EXPR_STATEMENT	2028:18	2028:43	12	page -> rows = atoi ( optarg ) ;
EXPR	2028:18	2028:18	13	page -> rows = atoi ( optarg )
ASSIGN	2028:18	2028:31	14	page -> rows = atoi ( optarg )
LVAL	2028:18	2028:18	15	page -> rows
FIELD	2028:18	2028:24	16	page -> rows
LEAF_NODE	2028:18	2028:18	17	page
LEAF_NODE	2028:22	2028:22	17	->
LEAF_NODE	2028:24	2028:24	17	rows
ASSIGN_OP	2028:29	2028:29	15	=
LEAF_NODE	2028:29	2028:29	16	=
RVAL	2028:31	2028:31	15	atoi ( optarg )
FUNCTION_CALL	2028:31	2028:42	16	atoi ( optarg )
CALLEE	2028:31	2028:31	17	atoi
LEAF_NODE	2028:31	2028:31	18	atoi
LEAF_NODE	2028:35	2028:35	17	(
ARGUMENT	2028:36	2028:36	17	optarg
FIELD	2028:36	2028:36	18	optarg
LEAF_NODE	2028:36	2028:36	19	optarg
LEAF_NODE	2028:42	2028:42	17	)
LEAF_NODE	2028:43	2028:43	13	;
LEAF_NODE	2029:4	2029:4	11	}
SELECTION	2030:16	2031:18	9	
KEYWORD	2030:16	2030:16	10	if
LEAF_NODE	2030:16	2030:16	11	if
LEAF_NODE	2030:19	2030:19	10	(
CONDITION	2030:20	2030:20	10	( page -> cols * page -> rows ) > MAX_SECTIONS
EXPR	2030:20	2030:48	11	( page -> cols * page -> rows ) > MAX_SECTIONS
LEAF_NODE	2030:20	2030:20	12	(
FIELD	2030:21	2030:27	12	page -> cols
LEAF_NODE	2030:21	2030:21	13	page
LEAF_NODE	2030:25	2030:25	13	->
LEAF_NODE	2030:27	2030:27	13	cols
LEAF_NODE	2030:32	2030:32	12	*
FIELD	2030:34	2030:40	12	page -> rows
LEAF_NODE	2030:34	2030:34	13	page
LEAF_NODE	2030:38	2030:38	13	->
LEAF_NODE	2030:40	2030:40	13	rows
LEAF_NODE	2030:44	2030:44	12	)
REL_OPERATOR	2030:46	2030:46	12	>
LEAF_NODE	2030:46	2030:46	13	>
FIELD	2030:48	2030:48	12	MAX_SECTIONS
LEAF_NODE	2030:48	2030:48	13	MAX_SECTIONS
LEAF_NODE	2030:60	2030:60	10	)
STATEMENTS	2031:18	2034:18	10	
LEAF_NODE	2031:18	2031:18	11	{
STATEMENTS	2032:4	2033:4	11	
EXPR_STATEMENT	2032:4	2032:89	12	TIFFError ( "Limit for subdivisions, ie rows x columns, exceeded" , "%d" , MAX_SECTIONS ) ;
EXPR	2032:4	2032:4	13	TIFFError ( "Limit for subdivisions, ie rows x columns, exceeded" , "%d" , MAX_SECTIONS )
FUNCTION_CALL	2032:4	2032:88	14	TIFFError ( "Limit for subdivisions, ie rows x columns, exceeded" , "%d" , MAX_SECTIONS )
CALLEE	2032:4	2032:4	15	TIFFError
LEAF_NODE	2032:4	2032:4	16	TIFFError
LEAF_NODE	2032:14	2032:14	15	(
ARGUMENT	2032:15	2032:15	15	"Limit for subdivisions, ie rows x columns, exceeded"
FIELD	2032:15	2032:15	16	"Limit for subdivisions, ie rows x columns, exceeded"
LEAF_NODE	2032:15	2032:15	17	"Limit for subdivisions, ie rows x columns, exceeded"
LEAF_NODE	2032:68	2032:68	15	,
ARGUMENT	2032:70	2032:70	15	"%d"
FIELD	2032:70	2032:70	16	"%d"
LEAF_NODE	2032:70	2032:70	17	"%d"
LEAF_NODE	2032:74	2032:74	15	,
ARGUMENT	2032:76	2032:76	15	MAX_SECTIONS
FIELD	2032:76	2032:76	16	MAX_SECTIONS
LEAF_NODE	2032:76	2032:76	17	MAX_SECTIONS
LEAF_NODE	2032:88	2032:88	15	)
LEAF_NODE	2032:89	2032:89	13	;
EXPR_STATEMENT	2033:4	2033:13	12	exit ( - 1 ) ;
EXPR	2033:4	2033:4	13	exit ( - 1 )
FUNCTION_CALL	2033:4	2033:12	14	exit ( - 1 )
CALLEE	2033:4	2033:4	15	exit
LEAF_NODE	2033:4	2033:4	16	exit
LEAF_NODE	2033:9	2033:9	15	(
ARGUMENT	2033:10	2033:10	15	- 1
UNARY_EXPR	2033:10	2033:11	16	- 1
UNARY_OPERATOR	2033:10	2033:10	17	-
LEAF_NODE	2033:10	2033:10	18	-
FIELD	2033:11	2033:11	17	1
LEAF_NODE	2033:11	2033:11	18	1
LEAF_NODE	2033:12	2033:12	15	)
LEAF_NODE	2033:13	2033:13	13	;
LEAF_NODE	2034:18	2034:18	11	}
EXPR_STATEMENT	2035:16	2035:48	9	page -> mode |= PAGE_MODE_ROWSCOLS ;
EXPR	2035:16	2035:16	10	page -> mode |= PAGE_MODE_ROWSCOLS
ASSIGN	2035:16	2035:30	11	page -> mode |= PAGE_MODE_ROWSCOLS
LVAL	2035:16	2035:16	12	page -> mode
FIELD	2035:16	2035:22	13	page -> mode
LEAF_NODE	2035:16	2035:16	14	page
LEAF_NODE	2035:20	2035:20	14	->
LEAF_NODE	2035:22	2035:22	14	mode
ASSIGN_OP	2035:27	2035:27	12	|=
LEAF_NODE	2035:27	2035:27	13	|=
RVAL	2035:30	2035:30	12	PAGE_MODE_ROWSCOLS
FIELD	2035:30	2035:30	13	PAGE_MODE_ROWSCOLS
LEAF_NODE	2035:30	2035:30	14	PAGE_MODE_ROWSCOLS
LEAF_NODE	2035:48	2035:48	10	;
JUMP_STATEMENT	2036:2	2036:7	9	break DESTINATION ;
KEYWORD	2036:2	2036:2	10	break
LEAF_NODE	2036:2	2036:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2036:7	2036:7	10	;
LEAF_NODE	2037:6	2037:6	9	case
LEAF_NODE	2037:11	2037:11	9	'U'
LEAF_NODE	2037:14	2037:14	9	:
SELECTION	2038:2	2039:18	9	
KEYWORD	2038:2	2038:2	10	if
LEAF_NODE	2038:2	2038:2	11	if
LEAF_NODE	2038:5	2038:5	10	(
CONDITION	2038:6	2038:6	10	streq ( optarg , "in" )
EXPR	2038:6	2038:6	11	streq ( optarg , "in" )
FUNCTION_CALL	2038:6	2038:24	12	streq ( optarg , "in" )
CALLEE	2038:6	2038:6	13	streq
LEAF_NODE	2038:6	2038:6	14	streq
LEAF_NODE	2038:11	2038:11	13	(
ARGUMENT	2038:12	2038:12	13	optarg
FIELD	2038:12	2038:12	14	optarg
LEAF_NODE	2038:12	2038:12	15	optarg
LEAF_NODE	2038:18	2038:18	13	,
ARGUMENT	2038:20	2038:20	13	"in"
FIELD	2038:20	2038:20	14	"in"
LEAF_NODE	2038:20	2038:20	15	"in"
LEAF_NODE	2038:24	2038:24	13	)
LEAF_NODE	2038:25	2038:25	10	)
STATEMENTS	2039:18	2042:4	10	
LEAF_NODE	2039:18	2039:18	11	{
STATEMENTS	2040:4	2041:4	11	
EXPR_STATEMENT	2040:4	2040:38	12	crop_data -> res_unit = RESUNIT_INCH ;
EXPR	2040:4	2040:4	13	crop_data -> res_unit = RESUNIT_INCH
ASSIGN	2040:4	2040:26	14	crop_data -> res_unit = RESUNIT_INCH
LVAL	2040:4	2040:4	15	crop_data -> res_unit
FIELD	2040:4	2040:15	16	crop_data -> res_unit
LEAF_NODE	2040:4	2040:4	17	crop_data
LEAF_NODE	2040:13	2040:13	17	->
LEAF_NODE	2040:15	2040:15	17	res_unit
ASSIGN_OP	2040:24	2040:24	15	=
LEAF_NODE	2040:24	2040:24	16	=
RVAL	2040:26	2040:26	15	RESUNIT_INCH
FIELD	2040:26	2040:26	16	RESUNIT_INCH
LEAF_NODE	2040:26	2040:26	17	RESUNIT_INCH
LEAF_NODE	2040:38	2040:38	13	;
EXPR_STATEMENT	2041:4	2041:33	12	page -> res_unit = RESUNIT_INCH ;
EXPR	2041:4	2041:4	13	page -> res_unit = RESUNIT_INCH
ASSIGN	2041:4	2041:21	14	page -> res_unit = RESUNIT_INCH
LVAL	2041:4	2041:4	15	page -> res_unit
FIELD	2041:4	2041:10	16	page -> res_unit
LEAF_NODE	2041:4	2041:4	17	page
LEAF_NODE	2041:8	2041:8	17	->
LEAF_NODE	2041:10	2041:10	17	res_unit
ASSIGN_OP	2041:19	2041:19	15	=
LEAF_NODE	2041:19	2041:19	16	=
RVAL	2041:21	2041:21	15	RESUNIT_INCH
FIELD	2041:21	2041:21	16	RESUNIT_INCH
LEAF_NODE	2041:21	2041:21	17	RESUNIT_INCH
LEAF_NODE	2041:33	2041:33	13	;
LEAF_NODE	2042:4	2042:4	11	}
SELECTION	2043:2	2043:7	9	
KEYWORD	2043:2	2043:2	10	else
LEAF_NODE	2043:2	2043:2	11	else
STATEMENTS	2043:7	2043:7	10	
SELECTION	2043:7	2044:4	11	
KEYWORD	2043:7	2043:7	12	if
LEAF_NODE	2043:7	2043:7	13	if
LEAF_NODE	2043:10	2043:10	12	(
CONDITION	2043:11	2043:11	12	streq ( optarg , "cm" )
EXPR	2043:11	2043:11	13	streq ( optarg , "cm" )
FUNCTION_CALL	2043:11	2043:29	14	streq ( optarg , "cm" )
CALLEE	2043:11	2043:11	15	streq
LEAF_NODE	2043:11	2043:11	16	streq
LEAF_NODE	2043:16	2043:16	15	(
ARGUMENT	2043:17	2043:17	15	optarg
FIELD	2043:17	2043:17	16	optarg
LEAF_NODE	2043:17	2043:17	17	optarg
LEAF_NODE	2043:23	2043:23	15	,
ARGUMENT	2043:25	2043:25	15	"cm"
FIELD	2043:25	2043:25	16	"cm"
LEAF_NODE	2043:25	2043:25	17	"cm"
LEAF_NODE	2043:29	2043:29	15	)
LEAF_NODE	2043:30	2043:30	12	)
STATEMENTS	2044:4	2047:4	12	
LEAF_NODE	2044:4	2044:4	13	{
STATEMENTS	2045:4	2046:4	13	
EXPR_STATEMENT	2045:4	2045:44	14	crop_data -> res_unit = RESUNIT_CENTIMETER ;
EXPR	2045:4	2045:4	15	crop_data -> res_unit = RESUNIT_CENTIMETER
ASSIGN	2045:4	2045:26	16	crop_data -> res_unit = RESUNIT_CENTIMETER
LVAL	2045:4	2045:4	17	crop_data -> res_unit
FIELD	2045:4	2045:15	18	crop_data -> res_unit
LEAF_NODE	2045:4	2045:4	19	crop_data
LEAF_NODE	2045:13	2045:13	19	->
LEAF_NODE	2045:15	2045:15	19	res_unit
ASSIGN_OP	2045:24	2045:24	17	=
LEAF_NODE	2045:24	2045:24	18	=
RVAL	2045:26	2045:26	17	RESUNIT_CENTIMETER
FIELD	2045:26	2045:26	18	RESUNIT_CENTIMETER
LEAF_NODE	2045:26	2045:26	19	RESUNIT_CENTIMETER
LEAF_NODE	2045:44	2045:44	15	;
EXPR_STATEMENT	2046:4	2046:39	14	page -> res_unit = RESUNIT_CENTIMETER ;
EXPR	2046:4	2046:4	15	page -> res_unit = RESUNIT_CENTIMETER
ASSIGN	2046:4	2046:21	16	page -> res_unit = RESUNIT_CENTIMETER
LVAL	2046:4	2046:4	17	page -> res_unit
FIELD	2046:4	2046:10	18	page -> res_unit
LEAF_NODE	2046:4	2046:4	19	page
LEAF_NODE	2046:8	2046:8	19	->
LEAF_NODE	2046:10	2046:10	19	res_unit
ASSIGN_OP	2046:19	2046:19	17	=
LEAF_NODE	2046:19	2046:19	18	=
RVAL	2046:21	2046:21	17	RESUNIT_CENTIMETER
FIELD	2046:21	2046:21	18	RESUNIT_CENTIMETER
LEAF_NODE	2046:21	2046:21	19	RESUNIT_CENTIMETER
LEAF_NODE	2046:39	2046:39	15	;
LEAF_NODE	2047:4	2047:4	13	}
SELECTION	2048:2	2048:7	9	
KEYWORD	2048:2	2048:2	10	else
LEAF_NODE	2048:2	2048:2	11	else
STATEMENTS	2048:7	2048:7	10	
SELECTION	2048:7	2049:4	11	
KEYWORD	2048:7	2048:7	12	if
LEAF_NODE	2048:7	2048:7	13	if
LEAF_NODE	2048:10	2048:10	12	(
CONDITION	2048:11	2048:11	12	streq ( optarg , "px" )
EXPR	2048:11	2048:11	13	streq ( optarg , "px" )
FUNCTION_CALL	2048:11	2048:29	14	streq ( optarg , "px" )
CALLEE	2048:11	2048:11	15	streq
LEAF_NODE	2048:11	2048:11	16	streq
LEAF_NODE	2048:16	2048:16	15	(
ARGUMENT	2048:17	2048:17	15	optarg
FIELD	2048:17	2048:17	16	optarg
LEAF_NODE	2048:17	2048:17	17	optarg
LEAF_NODE	2048:23	2048:23	15	,
ARGUMENT	2048:25	2048:25	15	"px"
FIELD	2048:25	2048:25	16	"px"
LEAF_NODE	2048:25	2048:25	17	"px"
LEAF_NODE	2048:29	2048:29	15	)
LEAF_NODE	2048:30	2048:30	12	)
STATEMENTS	2049:4	2052:4	12	
LEAF_NODE	2049:4	2049:4	13	{
STATEMENTS	2050:4	2051:4	13	
EXPR_STATEMENT	2050:4	2050:38	14	crop_data -> res_unit = RESUNIT_NONE ;
EXPR	2050:4	2050:4	15	crop_data -> res_unit = RESUNIT_NONE
ASSIGN	2050:4	2050:26	16	crop_data -> res_unit = RESUNIT_NONE
LVAL	2050:4	2050:4	17	crop_data -> res_unit
FIELD	2050:4	2050:15	18	crop_data -> res_unit
LEAF_NODE	2050:4	2050:4	19	crop_data
LEAF_NODE	2050:13	2050:13	19	->
LEAF_NODE	2050:15	2050:15	19	res_unit
ASSIGN_OP	2050:24	2050:24	17	=
LEAF_NODE	2050:24	2050:24	18	=
RVAL	2050:26	2050:26	17	RESUNIT_NONE
FIELD	2050:26	2050:26	18	RESUNIT_NONE
LEAF_NODE	2050:26	2050:26	19	RESUNIT_NONE
LEAF_NODE	2050:38	2050:38	15	;
EXPR_STATEMENT	2051:4	2051:33	14	page -> res_unit = RESUNIT_NONE ;
EXPR	2051:4	2051:4	15	page -> res_unit = RESUNIT_NONE
ASSIGN	2051:4	2051:21	16	page -> res_unit = RESUNIT_NONE
LVAL	2051:4	2051:4	17	page -> res_unit
FIELD	2051:4	2051:10	18	page -> res_unit
LEAF_NODE	2051:4	2051:4	19	page
LEAF_NODE	2051:8	2051:8	19	->
LEAF_NODE	2051:10	2051:10	19	res_unit
ASSIGN_OP	2051:19	2051:19	17	=
LEAF_NODE	2051:19	2051:19	18	=
RVAL	2051:21	2051:21	17	RESUNIT_NONE
FIELD	2051:21	2051:21	18	RESUNIT_NONE
LEAF_NODE	2051:21	2051:21	19	RESUNIT_NONE
LEAF_NODE	2051:33	2051:33	15	;
LEAF_NODE	2052:4	2052:4	13	}
SELECTION	2053:2	2054:18	9	
KEYWORD	2053:2	2053:2	10	else
LEAF_NODE	2053:2	2053:2	11	else
STATEMENTS	2054:18	2058:4	10	
LEAF_NODE	2054:18	2054:18	11	{
STATEMENTS	2055:4	2057:18	11	
EXPR_STATEMENT	2055:4	2055:54	12	TIFFError ( "Illegal unit of measure" , "%s" , optarg ) ;
EXPR	2055:4	2055:4	13	TIFFError ( "Illegal unit of measure" , "%s" , optarg )
FUNCTION_CALL	2055:4	2055:53	14	TIFFError ( "Illegal unit of measure" , "%s" , optarg )
CALLEE	2055:4	2055:4	15	TIFFError
LEAF_NODE	2055:4	2055:4	16	TIFFError
LEAF_NODE	2055:14	2055:14	15	(
ARGUMENT	2055:15	2055:15	15	"Illegal unit of measure"
FIELD	2055:15	2055:15	16	"Illegal unit of measure"
LEAF_NODE	2055:15	2055:15	17	"Illegal unit of measure"
LEAF_NODE	2055:40	2055:40	15	,
ARGUMENT	2055:41	2055:41	15	"%s"
FIELD	2055:41	2055:41	16	"%s"
LEAF_NODE	2055:41	2055:41	17	"%s"
LEAF_NODE	2055:45	2055:45	15	,
ARGUMENT	2055:47	2055:47	15	optarg
FIELD	2055:47	2055:47	16	optarg
LEAF_NODE	2055:47	2055:47	17	optarg
LEAF_NODE	2055:53	2055:53	15	)
LEAF_NODE	2055:54	2055:54	13	;
EXPR_STATEMENT	2056:4	2056:55	12	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	2056:4	2056:4	13	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	2056:4	2056:54	14	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	2056:4	2056:4	15	TIFFError
LEAF_NODE	2056:4	2056:4	16	TIFFError
LEAF_NODE	2056:14	2056:14	15	(
ARGUMENT	2056:15	2056:15	15	"For valid options type"
FIELD	2056:15	2056:15	16	"For valid options type"
LEAF_NODE	2056:15	2056:15	17	"For valid options type"
LEAF_NODE	2056:39	2056:39	15	,
ARGUMENT	2056:41	2056:41	15	"tiffcrop -h"
FIELD	2056:41	2056:41	16	"tiffcrop -h"
LEAF_NODE	2056:41	2056:41	17	"tiffcrop -h"
LEAF_NODE	2056:54	2056:54	15	)
LEAF_NODE	2056:55	2056:55	13	;
EXPR_STATEMENT	2057:18	2057:27	12	exit ( - 1 ) ;
EXPR	2057:18	2057:18	13	exit ( - 1 )
FUNCTION_CALL	2057:18	2057:26	14	exit ( - 1 )
CALLEE	2057:18	2057:18	15	exit
LEAF_NODE	2057:18	2057:18	16	exit
LEAF_NODE	2057:23	2057:23	15	(
ARGUMENT	2057:24	2057:24	15	- 1
UNARY_EXPR	2057:24	2057:25	16	- 1
UNARY_OPERATOR	2057:24	2057:24	17	-
LEAF_NODE	2057:24	2057:24	18	-
FIELD	2057:25	2057:25	17	1
LEAF_NODE	2057:25	2057:25	18	1
LEAF_NODE	2057:26	2057:26	15	)
LEAF_NODE	2057:27	2057:27	13	;
LEAF_NODE	2058:4	2058:4	11	}
JUMP_STATEMENT	2059:2	2059:7	9	break DESTINATION ;
KEYWORD	2059:2	2059:2	10	break
LEAF_NODE	2059:2	2059:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2059:7	2059:7	10	;
LEAF_NODE	2060:6	2060:6	9	case
LEAF_NODE	2060:11	2060:11	9	'V'
LEAF_NODE	2060:14	2060:14	9	:
EXPR_STATEMENT	2061:2	2061:28	9	page -> vres = atof ( optarg ) ;
EXPR	2061:2	2061:2	10	page -> vres = atof ( optarg )
ASSIGN	2061:2	2061:15	11	page -> vres = atof ( optarg )
LVAL	2061:2	2061:2	12	page -> vres
FIELD	2061:2	2061:8	13	page -> vres
LEAF_NODE	2061:2	2061:2	14	page
LEAF_NODE	2061:6	2061:6	14	->
LEAF_NODE	2061:8	2061:8	14	vres
ASSIGN_OP	2061:13	2061:13	12	=
LEAF_NODE	2061:13	2061:13	13	=
RVAL	2061:15	2061:15	12	atof ( optarg )
FUNCTION_CALL	2061:15	2061:27	13	atof ( optarg )
CALLEE	2061:15	2061:15	14	atof
LEAF_NODE	2061:15	2061:15	15	atof
LEAF_NODE	2061:20	2061:20	14	(
ARGUMENT	2061:21	2061:21	14	optarg
FIELD	2061:21	2061:21	15	optarg
LEAF_NODE	2061:21	2061:21	16	optarg
LEAF_NODE	2061:27	2061:27	14	)
LEAF_NODE	2061:28	2061:28	10	;
EXPR_STATEMENT	2062:16	2062:50	9	page -> mode |= PAGE_MODE_RESOLUTION ;
EXPR	2062:16	2062:16	10	page -> mode |= PAGE_MODE_RESOLUTION
ASSIGN	2062:16	2062:30	11	page -> mode |= PAGE_MODE_RESOLUTION
LVAL	2062:16	2062:16	12	page -> mode
FIELD	2062:16	2062:22	13	page -> mode
LEAF_NODE	2062:16	2062:16	14	page
LEAF_NODE	2062:20	2062:20	14	->
LEAF_NODE	2062:22	2062:22	14	mode
ASSIGN_OP	2062:27	2062:27	12	|=
LEAF_NODE	2062:27	2062:27	13	|=
RVAL	2062:30	2062:30	12	PAGE_MODE_RESOLUTION
FIELD	2062:30	2062:30	13	PAGE_MODE_RESOLUTION
LEAF_NODE	2062:30	2062:30	14	PAGE_MODE_RESOLUTION
LEAF_NODE	2062:50	2062:50	10	;
JUMP_STATEMENT	2063:2	2063:7	9	break DESTINATION ;
KEYWORD	2063:2	2063:2	10	break
LEAF_NODE	2063:2	2063:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2063:7	2063:7	10	;
LEAF_NODE	2064:6	2064:6	9	case
LEAF_NODE	2064:11	2064:11	9	'X'
LEAF_NODE	2064:14	2064:14	9	:
EXPR_STATEMENT	2065:2	2065:36	9	crop_data -> crop_mode |= CROP_WIDTH ;
EXPR	2065:2	2065:2	10	crop_data -> crop_mode |= CROP_WIDTH
ASSIGN	2065:2	2065:26	11	crop_data -> crop_mode |= CROP_WIDTH
LVAL	2065:2	2065:2	12	crop_data -> crop_mode
FIELD	2065:2	2065:13	13	crop_data -> crop_mode
LEAF_NODE	2065:2	2065:2	14	crop_data
LEAF_NODE	2065:11	2065:11	14	->
LEAF_NODE	2065:13	2065:13	14	crop_mode
ASSIGN_OP	2065:23	2065:23	12	|=
LEAF_NODE	2065:23	2065:23	13	|=
RVAL	2065:26	2065:26	12	CROP_WIDTH
FIELD	2065:26	2065:26	13	CROP_WIDTH
LEAF_NODE	2065:26	2065:26	14	CROP_WIDTH
LEAF_NODE	2065:36	2065:36	10	;
EXPR_STATEMENT	2066:2	2066:33	9	crop_data -> width = atof ( optarg ) ;
EXPR	2066:2	2066:2	10	crop_data -> width = atof ( optarg )
ASSIGN	2066:2	2066:21	11	crop_data -> width = atof ( optarg )
LVAL	2066:2	2066:2	12	crop_data -> width
FIELD	2066:2	2066:13	13	crop_data -> width
LEAF_NODE	2066:2	2066:2	14	crop_data
LEAF_NODE	2066:11	2066:11	14	->
LEAF_NODE	2066:13	2066:13	14	width
ASSIGN_OP	2066:19	2066:19	12	=
LEAF_NODE	2066:19	2066:19	13	=
RVAL	2066:21	2066:21	12	atof ( optarg )
FUNCTION_CALL	2066:21	2066:32	13	atof ( optarg )
CALLEE	2066:21	2066:21	14	atof
LEAF_NODE	2066:21	2066:21	15	atof
LEAF_NODE	2066:25	2066:25	14	(
ARGUMENT	2066:26	2066:26	14	optarg
FIELD	2066:26	2066:26	15	optarg
LEAF_NODE	2066:26	2066:26	16	optarg
LEAF_NODE	2066:32	2066:32	14	)
LEAF_NODE	2066:33	2066:33	10	;
JUMP_STATEMENT	2067:2	2067:7	9	break DESTINATION ;
KEYWORD	2067:2	2067:2	10	break
LEAF_NODE	2067:2	2067:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2067:7	2067:7	10	;
LEAF_NODE	2068:6	2068:6	9	case
LEAF_NODE	2068:11	2068:11	9	'Y'
LEAF_NODE	2068:14	2068:14	9	:
EXPR_STATEMENT	2069:2	2069:37	9	crop_data -> crop_mode |= CROP_LENGTH ;
EXPR	2069:2	2069:2	10	crop_data -> crop_mode |= CROP_LENGTH
ASSIGN	2069:2	2069:26	11	crop_data -> crop_mode |= CROP_LENGTH
LVAL	2069:2	2069:2	12	crop_data -> crop_mode
FIELD	2069:2	2069:13	13	crop_data -> crop_mode
LEAF_NODE	2069:2	2069:2	14	crop_data
LEAF_NODE	2069:11	2069:11	14	->
LEAF_NODE	2069:13	2069:13	14	crop_mode
ASSIGN_OP	2069:23	2069:23	12	|=
LEAF_NODE	2069:23	2069:23	13	|=
RVAL	2069:26	2069:26	12	CROP_LENGTH
FIELD	2069:26	2069:26	13	CROP_LENGTH
LEAF_NODE	2069:26	2069:26	14	CROP_LENGTH
LEAF_NODE	2069:37	2069:37	10	;
EXPR_STATEMENT	2070:2	2070:34	9	crop_data -> length = atof ( optarg ) ;
EXPR	2070:2	2070:2	10	crop_data -> length = atof ( optarg )
ASSIGN	2070:2	2070:22	11	crop_data -> length = atof ( optarg )
LVAL	2070:2	2070:2	12	crop_data -> length
FIELD	2070:2	2070:13	13	crop_data -> length
LEAF_NODE	2070:2	2070:2	14	crop_data
LEAF_NODE	2070:11	2070:11	14	->
LEAF_NODE	2070:13	2070:13	14	length
ASSIGN_OP	2070:20	2070:20	12	=
LEAF_NODE	2070:20	2070:20	13	=
RVAL	2070:22	2070:22	12	atof ( optarg )
FUNCTION_CALL	2070:22	2070:33	13	atof ( optarg )
CALLEE	2070:22	2070:22	14	atof
LEAF_NODE	2070:22	2070:22	15	atof
LEAF_NODE	2070:26	2070:26	14	(
ARGUMENT	2070:27	2070:27	14	optarg
FIELD	2070:27	2070:27	15	optarg
LEAF_NODE	2070:27	2070:27	16	optarg
LEAF_NODE	2070:33	2070:33	14	)
LEAF_NODE	2070:34	2070:34	10	;
JUMP_STATEMENT	2071:2	2071:7	9	break DESTINATION ;
KEYWORD	2071:2	2071:2	10	break
LEAF_NODE	2071:2	2071:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2071:7	2071:7	10	;
LEAF_NODE	2072:6	2072:6	9	case
LEAF_NODE	2072:11	2072:11	9	'Z'
LEAF_NODE	2072:14	2072:14	9	:
EXPR_STATEMENT	2073:2	2073:36	9	crop_data -> crop_mode |= CROP_ZONES ;
EXPR	2073:2	2073:2	10	crop_data -> crop_mode |= CROP_ZONES
ASSIGN	2073:2	2073:26	11	crop_data -> crop_mode |= CROP_ZONES
LVAL	2073:2	2073:2	12	crop_data -> crop_mode
FIELD	2073:2	2073:13	13	crop_data -> crop_mode
LEAF_NODE	2073:2	2073:2	14	crop_data
LEAF_NODE	2073:11	2073:11	14	->
LEAF_NODE	2073:13	2073:13	14	crop_mode
ASSIGN_OP	2073:23	2073:23	12	|=
LEAF_NODE	2073:23	2073:23	13	|=
RVAL	2073:26	2073:26	12	CROP_ZONES
FIELD	2073:26	2073:26	13	CROP_ZONES
LEAF_NODE	2073:26	2073:26	14	CROP_ZONES
LEAF_NODE	2073:36	2073:36	10	;
ITERATION	2074:2	2077:20	9	
KEYWORD	2074:2	2074:2	10	for
LEAF_NODE	2074:2	2074:2	11	for
LEAF_NODE	2074:6	2074:6	10	(
FOR_INIT	2074:7	2074:44	10	i = 0 , opt_ptr = strtok ( optarg , "," ) ;
EXPR	2074:7	2074:14	11	i = 0 , opt_ptr = strtok ( optarg , "," )
ASSIGN	2074:7	2074:11	12	i = 0
LVAL	2074:7	2074:7	13	i
FIELD	2074:7	2074:7	14	i
LEAF_NODE	2074:7	2074:7	15	i
ASSIGN_OP	2074:9	2074:9	13	=
LEAF_NODE	2074:9	2074:9	14	=
RVAL	2074:11	2074:11	13	0
FIELD	2074:11	2074:11	14	0
LEAF_NODE	2074:11	2074:11	15	0
LEAF_NODE	2074:12	2074:12	12	,
ASSIGN	2074:14	2074:24	12	opt_ptr = strtok ( optarg , "," )
LVAL	2074:14	2074:14	13	opt_ptr
FIELD	2074:14	2074:14	14	opt_ptr
LEAF_NODE	2074:14	2074:14	15	opt_ptr
ASSIGN_OP	2074:22	2074:22	13	=
LEAF_NODE	2074:22	2074:22	14	=
RVAL	2074:24	2074:24	13	strtok ( optarg , "," )
FUNCTION_CALL	2074:24	2074:43	14	strtok ( optarg , "," )
CALLEE	2074:24	2074:24	15	strtok
LEAF_NODE	2074:24	2074:24	16	strtok
LEAF_NODE	2074:31	2074:31	15	(
ARGUMENT	2074:32	2074:32	15	optarg
FIELD	2074:32	2074:32	16	optarg
LEAF_NODE	2074:32	2074:32	17	optarg
LEAF_NODE	2074:38	2074:38	15	,
ARGUMENT	2074:40	2074:40	15	","
FIELD	2074:40	2074:40	16	","
LEAF_NODE	2074:40	2074:40	17	","
LEAF_NODE	2074:43	2074:43	15	)
LEAF_NODE	2074:44	2074:44	11	;
CONDITION	2075:19	2075:19	10	( ( opt_ptr != NULL ) && ( i < MAX_REGIONS ) )
EXPR	2075:19	2075:59	11	( ( opt_ptr != NULL ) && ( i < MAX_REGIONS ) )
LEAF_NODE	2075:19	2075:19	12	(
AND	2075:20	2075:42	12	( opt_ptr != NULL ) && ( i < MAX_REGIONS )
EXPR	2075:20	2075:36	13	( opt_ptr != NULL )
LEAF_NODE	2075:20	2075:20	14	(
FIELD	2075:21	2075:21	14	opt_ptr
LEAF_NODE	2075:21	2075:21	15	opt_ptr
EQ_OPERATOR	2075:29	2075:29	14	!=
LEAF_NODE	2075:29	2075:29	15	!=
FIELD	2075:32	2075:32	14	NULL
LEAF_NODE	2075:32	2075:32	15	NULL
LEAF_NODE	2075:36	2075:36	14	)
LEAF_NODE	2075:38	2075:38	13	&&
EXPR	2075:42	2075:58	13	( i < MAX_REGIONS )
LEAF_NODE	2075:42	2075:42	14	(
FIELD	2075:43	2075:43	14	i
LEAF_NODE	2075:43	2075:43	15	i
REL_OPERATOR	2075:45	2075:45	14	<
LEAF_NODE	2075:45	2075:45	15	<
FIELD	2075:47	2075:47	14	MAX_REGIONS
LEAF_NODE	2075:47	2075:47	15	MAX_REGIONS
LEAF_NODE	2075:58	2075:58	14	)
LEAF_NODE	2075:59	2075:59	12	)
LEAF_NODE	2075:60	2075:60	10	;
FOR_EXPR	2076:20	2076:20	10	( opt_ptr = strtok ( NULL , "," ) ) , i ++
EXPR	2076:20	2076:52	11	( opt_ptr = strtok ( NULL , "," ) ) , i ++
LEAF_NODE	2076:20	2076:20	12	(
ASSIGN	2076:21	2076:31	12	opt_ptr = strtok ( NULL , "," )
LVAL	2076:21	2076:21	13	opt_ptr
FIELD	2076:21	2076:21	14	opt_ptr
LEAF_NODE	2076:21	2076:21	15	opt_ptr
ASSIGN_OP	2076:29	2076:29	13	=
LEAF_NODE	2076:29	2076:29	14	=
RVAL	2076:31	2076:31	13	strtok ( NULL , "," )
FUNCTION_CALL	2076:31	2076:48	14	strtok ( NULL , "," )
CALLEE	2076:31	2076:31	15	strtok
LEAF_NODE	2076:31	2076:31	16	strtok
LEAF_NODE	2076:38	2076:38	15	(
ARGUMENT	2076:39	2076:39	15	NULL
FIELD	2076:39	2076:39	16	NULL
LEAF_NODE	2076:39	2076:39	17	NULL
LEAF_NODE	2076:43	2076:43	15	,
ARGUMENT	2076:45	2076:45	15	","
FIELD	2076:45	2076:45	16	","
LEAF_NODE	2076:45	2076:45	17	","
LEAF_NODE	2076:48	2076:48	15	)
LEAF_NODE	2076:49	2076:49	12	)
LEAF_NODE	2076:50	2076:50	12	,
FIELD	2076:52	2076:53	12	i ++
LEAF_NODE	2076:52	2076:52	13	i
LEAF_NODE	2076:53	2076:53	13	++
LEAF_NODE	2076:55	2076:55	10	)
STATEMENTS	2077:20	2087:20	10	
LEAF_NODE	2077:20	2077:20	11	{
STATEMENTS	2078:6	2086:20	11	
EXPR_STATEMENT	2078:6	2078:24	12	crop_data -> zones ++ ;
EXPR	2078:6	2078:6	13	crop_data -> zones ++
FIELD	2078:6	2078:22	14	crop_data -> zones ++
LEAF_NODE	2078:6	2078:6	15	crop_data
LEAF_NODE	2078:15	2078:15	15	->
LEAF_NODE	2078:17	2078:17	15	zones
LEAF_NODE	2078:22	2078:22	15	++
LEAF_NODE	2078:24	2078:24	13	;
EXPR_STATEMENT	2079:6	2079:39	12	opt_offset = strchr ( opt_ptr , ':' ) ;
EXPR	2079:6	2079:6	13	opt_offset = strchr ( opt_ptr , ':' )
ASSIGN	2079:6	2079:19	14	opt_offset = strchr ( opt_ptr , ':' )
LVAL	2079:6	2079:6	15	opt_offset
FIELD	2079:6	2079:6	16	opt_offset
LEAF_NODE	2079:6	2079:6	17	opt_offset
ASSIGN_OP	2079:17	2079:17	15	=
LEAF_NODE	2079:17	2079:17	16	=
RVAL	2079:19	2079:19	15	strchr ( opt_ptr , ':' )
FUNCTION_CALL	2079:19	2079:38	16	strchr ( opt_ptr , ':' )
CALLEE	2079:19	2079:19	17	strchr
LEAF_NODE	2079:19	2079:19	18	strchr
LEAF_NODE	2079:25	2079:25	17	(
ARGUMENT	2079:26	2079:26	17	opt_ptr
FIELD	2079:26	2079:26	18	opt_ptr
LEAF_NODE	2079:26	2079:26	19	opt_ptr
LEAF_NODE	2079:33	2079:33	17	,
ARGUMENT	2079:35	2079:35	17	':'
FIELD	2079:35	2079:35	18	':'
LEAF_NODE	2079:35	2079:35	19	':'
LEAF_NODE	2079:38	2079:38	17	)
LEAF_NODE	2079:39	2079:39	13	;
SELECTION	2080:6	2080:23	12	
KEYWORD	2080:6	2080:6	13	if
LEAF_NODE	2080:6	2080:6	14	if
LEAF_NODE	2080:9	2080:9	13	(
CONDITION	2080:10	2080:10	13	! opt_offset
EXPR	2080:10	2080:10	14	! opt_offset
UNARY_EXPR	2080:10	2080:11	15	! opt_offset
UNARY_OPERATOR	2080:10	2080:10	16	!
LEAF_NODE	2080:10	2080:10	17	!
FIELD	2080:11	2080:11	16	opt_offset
LEAF_NODE	2080:11	2080:11	17	opt_offset
LEAF_NODE	2080:21	2080:21	13	)
STATEMENTS	2080:23	2083:6	13	
LEAF_NODE	2080:23	2080:23	14	{
STATEMENTS	2081:3	2082:3	14	
EXPR_STATEMENT	2081:3	2081:60	15	TIFFError ( "Wrong parameter syntax for -Z" , "tiffcrop -h" ) ;
EXPR	2081:3	2081:3	16	TIFFError ( "Wrong parameter syntax for -Z" , "tiffcrop -h" )
FUNCTION_CALL	2081:3	2081:59	17	TIFFError ( "Wrong parameter syntax for -Z" , "tiffcrop -h" )
CALLEE	2081:3	2081:3	18	TIFFError
LEAF_NODE	2081:3	2081:3	19	TIFFError
LEAF_NODE	2081:12	2081:12	18	(
ARGUMENT	2081:13	2081:13	18	"Wrong parameter syntax for -Z"
FIELD	2081:13	2081:13	19	"Wrong parameter syntax for -Z"
LEAF_NODE	2081:13	2081:13	20	"Wrong parameter syntax for -Z"
LEAF_NODE	2081:44	2081:44	18	,
ARGUMENT	2081:46	2081:46	18	"tiffcrop -h"
FIELD	2081:46	2081:46	19	"tiffcrop -h"
LEAF_NODE	2081:46	2081:46	20	"tiffcrop -h"
LEAF_NODE	2081:59	2081:59	18	)
LEAF_NODE	2081:60	2081:60	16	;
EXPR_STATEMENT	2082:3	2082:11	15	exit ( - 1 ) ;
EXPR	2082:3	2082:3	16	exit ( - 1 )
FUNCTION_CALL	2082:3	2082:10	17	exit ( - 1 )
CALLEE	2082:3	2082:3	18	exit
LEAF_NODE	2082:3	2082:3	19	exit
LEAF_NODE	2082:7	2082:7	18	(
ARGUMENT	2082:8	2082:8	18	- 1
UNARY_EXPR	2082:8	2082:9	19	- 1
UNARY_OPERATOR	2082:8	2082:8	20	-
LEAF_NODE	2082:8	2082:8	21	-
FIELD	2082:9	2082:9	20	1
LEAF_NODE	2082:9	2082:9	21	1
LEAF_NODE	2082:10	2082:10	18	)
LEAF_NODE	2082:11	2082:11	16	;
LEAF_NODE	2083:6	2083:6	14	}
EXPR_STATEMENT	2084:20	2084:38	12	* opt_offset = '\0' ;
EXPR	2084:20	2084:20	13	* opt_offset = '\0'
ASSIGN	2084:20	2084:34	14	* opt_offset = '\0'
LVAL	2084:20	2084:20	15	* opt_offset
UNARY_EXPR	2084:20	2084:21	16	* opt_offset
UNARY_OPERATOR	2084:20	2084:20	17	*
LEAF_NODE	2084:20	2084:20	18	*
FIELD	2084:21	2084:21	17	opt_offset
LEAF_NODE	2084:21	2084:21	18	opt_offset
ASSIGN_OP	2084:32	2084:32	15	=
LEAF_NODE	2084:32	2084:32	16	=
RVAL	2084:34	2084:34	15	'\0'
FIELD	2084:34	2084:34	16	'\0'
LEAF_NODE	2084:34	2084:34	17	'\0'
LEAF_NODE	2084:38	2084:38	13	;
EXPR_STATEMENT	2085:20	2085:67	12	crop_data -> zonelist [ i ] . position = atoi ( opt_ptr ) ;
EXPR	2085:20	2085:20	13	crop_data -> zonelist [ i ] . position = atoi ( opt_ptr )
ASSIGN	2085:20	2085:54	14	crop_data -> zonelist [ i ] . position = atoi ( opt_ptr )
LVAL	2085:20	2085:20	15	crop_data -> zonelist [ i ] . position
FIELD	2085:20	2085:43	16	crop_data -> zonelist [ i ] . position
LEAF_NODE	2085:20	2085:20	17	crop_data
LEAF_NODE	2085:29	2085:29	17	->
LEAF_NODE	2085:31	2085:31	17	zonelist
LEAF_NODE	2085:39	2085:39	17	[
EXPR	2085:40	2085:40	17	i
FIELD	2085:40	2085:40	18	i
LEAF_NODE	2085:40	2085:40	19	i
LEAF_NODE	2085:41	2085:41	17	]
LEAF_NODE	2085:42	2085:42	17	.
LEAF_NODE	2085:43	2085:43	17	position
ASSIGN_OP	2085:52	2085:52	15	=
LEAF_NODE	2085:52	2085:52	16	=
RVAL	2085:54	2085:54	15	atoi ( opt_ptr )
FUNCTION_CALL	2085:54	2085:66	16	atoi ( opt_ptr )
CALLEE	2085:54	2085:54	17	atoi
LEAF_NODE	2085:54	2085:54	18	atoi
LEAF_NODE	2085:58	2085:58	17	(
ARGUMENT	2085:59	2085:59	17	opt_ptr
FIELD	2085:59	2085:59	18	opt_ptr
LEAF_NODE	2085:59	2085:59	19	opt_ptr
LEAF_NODE	2085:66	2085:66	17	)
LEAF_NODE	2085:67	2085:67	13	;
EXPR_STATEMENT	2086:20	2086:74	12	crop_data -> zonelist [ i ] . total = atoi ( opt_offset + 1 ) ;
EXPR	2086:20	2086:20	13	crop_data -> zonelist [ i ] . total = atoi ( opt_offset + 1 )
ASSIGN	2086:20	2086:54	14	crop_data -> zonelist [ i ] . total = atoi ( opt_offset + 1 )
LVAL	2086:20	2086:20	15	crop_data -> zonelist [ i ] . total
FIELD	2086:20	2086:43	16	crop_data -> zonelist [ i ] . total
LEAF_NODE	2086:20	2086:20	17	crop_data
LEAF_NODE	2086:29	2086:29	17	->
LEAF_NODE	2086:31	2086:31	17	zonelist
LEAF_NODE	2086:39	2086:39	17	[
EXPR	2086:40	2086:40	17	i
FIELD	2086:40	2086:40	18	i
LEAF_NODE	2086:40	2086:40	19	i
LEAF_NODE	2086:41	2086:41	17	]
LEAF_NODE	2086:42	2086:42	17	.
LEAF_NODE	2086:43	2086:43	17	total
ASSIGN_OP	2086:52	2086:52	15	=
LEAF_NODE	2086:52	2086:52	16	=
RVAL	2086:54	2086:54	15	atoi ( opt_offset + 1 )
FUNCTION_CALL	2086:54	2086:73	16	atoi ( opt_offset + 1 )
CALLEE	2086:54	2086:54	17	atoi
LEAF_NODE	2086:54	2086:54	18	atoi
LEAF_NODE	2086:58	2086:58	17	(
ARGUMENT	2086:59	2086:72	17	opt_offset + 1
FIELD	2086:59	2086:59	18	opt_offset
LEAF_NODE	2086:59	2086:59	19	opt_offset
LEAF_NODE	2086:70	2086:70	18	+
FIELD	2086:72	2086:72	18	1
LEAF_NODE	2086:72	2086:72	19	1
LEAF_NODE	2086:73	2086:73	17	)
LEAF_NODE	2086:74	2086:74	13	;
LEAF_NODE	2087:20	2087:20	11	}
SELECTION	2089:16	2090:18	9	
KEYWORD	2089:16	2089:16	10	if
LEAF_NODE	2089:16	2089:16	11	if
LEAF_NODE	2089:19	2089:19	10	(
CONDITION	2089:20	2089:20	10	( opt_ptr != NULL ) && ( i >= MAX_REGIONS )
EXPR	2089:20	2089:20	11	( opt_ptr != NULL ) && ( i >= MAX_REGIONS )
AND	2089:20	2089:41	12	( opt_ptr != NULL ) && ( i >= MAX_REGIONS )
EXPR	2089:20	2089:36	13	( opt_ptr != NULL )
LEAF_NODE	2089:20	2089:20	14	(
FIELD	2089:21	2089:21	14	opt_ptr
LEAF_NODE	2089:21	2089:21	15	opt_ptr
EQ_OPERATOR	2089:29	2089:29	14	!=
LEAF_NODE	2089:29	2089:29	15	!=
FIELD	2089:32	2089:32	14	NULL
LEAF_NODE	2089:32	2089:32	15	NULL
LEAF_NODE	2089:36	2089:36	14	)
LEAF_NODE	2089:38	2089:38	13	&&
EXPR	2089:41	2089:58	13	( i >= MAX_REGIONS )
LEAF_NODE	2089:41	2089:41	14	(
FIELD	2089:42	2089:42	14	i
LEAF_NODE	2089:42	2089:42	15	i
REL_OPERATOR	2089:44	2089:44	14	>=
LEAF_NODE	2089:44	2089:44	15	>=
FIELD	2089:47	2089:47	14	MAX_REGIONS
LEAF_NODE	2089:47	2089:47	15	MAX_REGIONS
LEAF_NODE	2089:58	2089:58	14	)
LEAF_NODE	2089:59	2089:59	10	)
STATEMENTS	2090:18	2093:18	10	
LEAF_NODE	2090:18	2090:18	11	{
STATEMENTS	2091:4	2092:4	11	
EXPR_STATEMENT	2091:4	2091:67	12	TIFFError ( "Zone list exceeds region limit" , "%d" , MAX_REGIONS ) ;
EXPR	2091:4	2091:4	13	TIFFError ( "Zone list exceeds region limit" , "%d" , MAX_REGIONS )
FUNCTION_CALL	2091:4	2091:66	14	TIFFError ( "Zone list exceeds region limit" , "%d" , MAX_REGIONS )
CALLEE	2091:4	2091:4	15	TIFFError
LEAF_NODE	2091:4	2091:4	16	TIFFError
LEAF_NODE	2091:13	2091:13	15	(
ARGUMENT	2091:14	2091:14	15	"Zone list exceeds region limit"
FIELD	2091:14	2091:14	16	"Zone list exceeds region limit"
LEAF_NODE	2091:14	2091:14	17	"Zone list exceeds region limit"
LEAF_NODE	2091:46	2091:46	15	,
ARGUMENT	2091:48	2091:48	15	"%d"
FIELD	2091:48	2091:48	16	"%d"
LEAF_NODE	2091:48	2091:48	17	"%d"
LEAF_NODE	2091:52	2091:52	15	,
ARGUMENT	2091:55	2091:55	15	MAX_REGIONS
FIELD	2091:55	2091:55	16	MAX_REGIONS
LEAF_NODE	2091:55	2091:55	17	MAX_REGIONS
LEAF_NODE	2091:66	2091:66	15	)
LEAF_NODE	2091:67	2091:67	13	;
EXPR_STATEMENT	2092:4	2092:13	12	exit ( - 1 ) ;
EXPR	2092:4	2092:4	13	exit ( - 1 )
FUNCTION_CALL	2092:4	2092:12	14	exit ( - 1 )
CALLEE	2092:4	2092:4	15	exit
LEAF_NODE	2092:4	2092:4	16	exit
LEAF_NODE	2092:9	2092:9	15	(
ARGUMENT	2092:10	2092:10	15	- 1
UNARY_EXPR	2092:10	2092:11	16	- 1
UNARY_OPERATOR	2092:10	2092:10	17	-
LEAF_NODE	2092:10	2092:10	18	-
FIELD	2092:11	2092:11	17	1
LEAF_NODE	2092:11	2092:11	18	1
LEAF_NODE	2092:12	2092:12	15	)
LEAF_NODE	2092:13	2092:13	13	;
LEAF_NODE	2093:18	2093:18	11	}
JUMP_STATEMENT	2094:2	2094:7	9	break DESTINATION ;
KEYWORD	2094:2	2094:2	10	break
LEAF_NODE	2094:2	2094:2	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2094:7	2094:7	10	;
LEAF_NODE	2095:4	2095:4	9	case
LEAF_NODE	2095:9	2095:9	9	'?'
LEAF_NODE	2095:12	2095:12	9	:
EXPR_STATEMENT	2095:14	2095:65	9	TIFFError ( "For valid options type" , "tiffcrop -h" ) ;
EXPR	2095:14	2095:14	10	TIFFError ( "For valid options type" , "tiffcrop -h" )
FUNCTION_CALL	2095:14	2095:64	11	TIFFError ( "For valid options type" , "tiffcrop -h" )
CALLEE	2095:14	2095:14	12	TIFFError
LEAF_NODE	2095:14	2095:14	13	TIFFError
LEAF_NODE	2095:24	2095:24	12	(
ARGUMENT	2095:25	2095:25	12	"For valid options type"
FIELD	2095:25	2095:25	13	"For valid options type"
LEAF_NODE	2095:25	2095:25	14	"For valid options type"
LEAF_NODE	2095:49	2095:49	12	,
ARGUMENT	2095:51	2095:51	12	"tiffcrop -h"
FIELD	2095:51	2095:51	13	"tiffcrop -h"
LEAF_NODE	2095:51	2095:51	14	"tiffcrop -h"
LEAF_NODE	2095:64	2095:64	12	)
LEAF_NODE	2095:65	2095:65	10	;
EXPR_STATEMENT	2096:16	2096:25	9	exit ( - 1 ) ;
EXPR	2096:16	2096:16	10	exit ( - 1 )
FUNCTION_CALL	2096:16	2096:24	11	exit ( - 1 )
CALLEE	2096:16	2096:16	12	exit
LEAF_NODE	2096:16	2096:16	13	exit
LEAF_NODE	2096:21	2096:21	12	(
ARGUMENT	2096:22	2096:22	12	- 1
UNARY_EXPR	2096:22	2096:23	13	- 1
UNARY_OPERATOR	2096:22	2096:22	14	-
LEAF_NODE	2096:22	2096:22	15	-
FIELD	2096:23	2096:23	14	1
LEAF_NODE	2096:23	2096:23	15	1
LEAF_NODE	2096:24	2096:24	12	)
LEAF_NODE	2096:25	2096:25	10	;
LEAF_NODE	2098:6	2098:6	8	}
LEAF_NODE	2099:4	2099:4	5	}
LEAF_NODE	2100:2	2100:2	2	}
FUNCTION_DEF	2106:0	2171:2	1	
RETURN_TYPE	2106:0	2106:7	2	static int
LEAF_NODE	2106:0	2106:0	3	static
TYPE_NAME	2106:7	2106:7	3	int
LEAF_NODE	2106:7	2106:7	4	int
FUNCTION_NAME	2107:0	2107:0	2	update_output_file
LEAF_NODE	2107:0	2107:0	3	update_output_file
PARAMETER_LIST	2107:19	2108:53	2	( TIFF * * tiffout , char * mode , int autoindex , char * outname , unsigned int * page )
LEAF_NODE	2107:19	2107:19	3	(
PARAMETER_DECL	2107:20	2107:27	3	TIFF * * tiffout
TYPE	2107:20	2107:25	4	TIFF * *
TYPE_NAME	2107:20	2107:20	5	TIFF
LEAF_NODE	2107:20	2107:20	6	TIFF
POINTER	2107:25	2107:26	5	* *
LEAF_NODE	2107:25	2107:25	6	*
LEAF_NODE	2107:26	2107:26	6	*
NAME	2107:27	2107:27	4	tiffout
LEAF_NODE	2107:27	2107:27	5	tiffout
LEAF_NODE	2107:34	2107:34	3	,
PARAMETER_DECL	2107:36	2107:42	3	char * mode
TYPE	2107:36	2107:41	4	char *
TYPE_NAME	2107:36	2107:36	5	char
LEAF_NODE	2107:36	2107:36	6	char
POINTER	2107:41	2107:41	5	*
LEAF_NODE	2107:41	2107:41	6	*
NAME	2107:42	2107:42	4	mode
LEAF_NODE	2107:42	2107:42	5	mode
LEAF_NODE	2107:46	2107:46	3	,
PARAMETER_DECL	2107:48	2107:52	3	int autoindex
TYPE	2107:48	2107:48	4	int
TYPE_NAME	2107:48	2107:48	5	int
LEAF_NODE	2107:48	2107:48	6	int
NAME	2107:52	2107:52	4	autoindex
LEAF_NODE	2107:52	2107:52	5	autoindex
LEAF_NODE	2107:61	2107:61	3	,
PARAMETER_DECL	2108:20	2108:26	3	char * outname
TYPE	2108:20	2108:25	4	char *
TYPE_NAME	2108:20	2108:20	5	char
LEAF_NODE	2108:20	2108:20	6	char
POINTER	2108:25	2108:25	5	*
LEAF_NODE	2108:25	2108:25	6	*
NAME	2108:26	2108:26	4	outname
LEAF_NODE	2108:26	2108:26	5	outname
LEAF_NODE	2108:33	2108:33	3	,
PARAMETER_DECL	2108:35	2108:49	3	unsigned int * page
TYPE	2108:35	2108:48	4	unsigned int *
TYPE_NAME	2108:35	2108:44	5	unsigned int
LEAF_NODE	2108:35	2108:35	6	unsigned
LEAF_NODE	2108:44	2108:44	6	int
POINTER	2108:48	2108:48	5	*
LEAF_NODE	2108:48	2108:48	6	*
NAME	2108:49	2108:49	4	page
LEAF_NODE	2108:49	2108:49	5	page
LEAF_NODE	2108:53	2108:53	3	)
LEAF_NODE	2109:2	2109:2	2	{
STATEMENTS	2110:2	2170:2	2	
LEAF_NODE	2110:2	2110:2	3	static
SIMPLE_DECL	2110:9	2110:23	3	int findex ; findex = 0 ;
VAR_DECL	2110:9	2110:13	4	int findex ; findex = 0
TYPE	2110:9	2110:9	5	int
TYPE_NAME	2110:9	2110:9	6	int
LEAF_NODE	2110:9	2110:9	7	int
NAME	2110:13	2110:13	5	findex
LEAF_NODE	2110:13	2110:13	6	findex
LEAF_NODE	0:0	0:0	5	;
INIT	2110:13	2110:13	5	findex = 0
ASSIGN	2110:13	2110:22	6	findex = 0
LVAL	2110:13	2110:13	7	findex
NAME	2110:13	2110:13	8	findex
LEAF_NODE	2110:13	2110:13	9	findex
ASSIGN_OP	2110:20	2110:20	7	=
LEAF_NODE	2110:20	2110:20	8	=
RVAL	2110:22	2110:22	7	0
FIELD	2110:22	2110:22	8	0
LEAF_NODE	2110:22	2110:22	9	0
LEAF_NODE	2110:23	2110:23	4	;
SIMPLE_DECL	2111:2	2111:21	3	size_t basename_len ;
VAR_DECL	2111:2	2111:9	4	size_t basename_len
TYPE	2111:2	2111:2	5	size_t
TYPE_NAME	2111:2	2111:2	6	size_t
LEAF_NODE	2111:2	2111:2	7	size_t
NAME	2111:9	2111:9	5	basename_len
LEAF_NODE	2111:9	2111:9	6	basename_len
LEAF_NODE	2111:21	2111:21	4	;
SIMPLE_DECL	2112:2	2112:12	3	char * sep ;
VAR_DECL	2112:2	2112:9	4	char * sep
TYPE	2112:2	2112:8	5	char *
TYPE_NAME	2112:2	2112:2	6	char
LEAF_NODE	2112:2	2112:2	7	char
POINTER	2112:8	2112:8	6	*
LEAF_NODE	2112:8	2112:8	7	*
NAME	2112:9	2112:9	5	sep
LEAF_NODE	2112:9	2112:9	6	sep
LEAF_NODE	2112:12	2112:12	4	;
SIMPLE_DECL	2113:2	2113:23	3	char [ 16 ] export_ext ;
VAR_DECL	2113:2	2113:9	4	char [ 16 ] export_ext
TYPE	2113:2	2113:19	5	char [ 16 ]
TYPE_NAME	2113:2	2113:2	6	char
LEAF_NODE	2113:2	2113:2	7	char
TYPE_SUFFIX	2113:19	2113:22	6	[ 16 ]
LEAF_NODE	2113:19	2113:19	7	[
FIELD	2113:20	2113:20	7	16
LEAF_NODE	2113:20	2113:20	8	16
LEAF_NODE	2113:22	2113:22	7	]
NAME	2113:9	2113:9	5	export_ext
LEAF_NODE	2113:9	2113:9	6	export_ext
LEAF_NODE	2113:23	2113:23	4	;
SIMPLE_DECL	2114:2	2114:29	3	char [ PATH_MAX ] exportname ;
VAR_DECL	2114:2	2114:9	4	char [ PATH_MAX ] exportname
TYPE	2114:2	2114:19	5	char [ PATH_MAX ]
TYPE_NAME	2114:2	2114:2	6	char
LEAF_NODE	2114:2	2114:2	7	char
TYPE_SUFFIX	2114:19	2114:28	6	[ PATH_MAX ]
LEAF_NODE	2114:19	2114:19	7	[
FIELD	2114:20	2114:20	7	PATH_MAX
LEAF_NODE	2114:20	2114:20	8	PATH_MAX
LEAF_NODE	2114:28	2114:28	7	]
NAME	2114:9	2114:9	5	exportname
LEAF_NODE	2114:9	2114:9	6	exportname
LEAF_NODE	2114:29	2114:29	4	;
SELECTION	2116:2	2117:4	3	
KEYWORD	2116:2	2116:2	4	if
LEAF_NODE	2116:2	2116:2	5	if
LEAF_NODE	2116:5	2116:5	4	(
CONDITION	2116:6	2116:6	4	autoindex && ( * tiffout != NULL )
EXPR	2116:6	2116:6	5	autoindex && ( * tiffout != NULL )
AND	2116:6	2116:19	6	autoindex && ( * tiffout != NULL )
EXPR	2116:6	2116:6	7	autoindex
FIELD	2116:6	2116:6	8	autoindex
LEAF_NODE	2116:6	2116:6	9	autoindex
LEAF_NODE	2116:16	2116:16	7	&&
EXPR	2116:19	2116:36	7	( * tiffout != NULL )
LEAF_NODE	2116:19	2116:19	8	(
UNARY_EXPR	2116:20	2116:21	8	* tiffout
UNARY_OPERATOR	2116:20	2116:20	9	*
LEAF_NODE	2116:20	2116:20	10	*
FIELD	2116:21	2116:21	9	tiffout
LEAF_NODE	2116:21	2116:21	10	tiffout
EQ_OPERATOR	2116:29	2116:29	8	!=
LEAF_NODE	2116:29	2116:29	9	!=
FIELD	2116:32	2116:32	8	NULL
LEAF_NODE	2116:32	2116:32	9	NULL
LEAF_NODE	2116:36	2116:36	8	)
LEAF_NODE	2116:37	2116:37	4	)
STATEMENTS	2117:4	2121:4	4	
LEAF_NODE	2117:4	2117:4	5	{
STATEMENTS	2119:4	2120:4	5	
EXPR_STATEMENT	2119:4	2119:24	6	TIFFClose ( * tiffout ) ;
EXPR	2119:4	2119:4	7	TIFFClose ( * tiffout )
FUNCTION_CALL	2119:4	2119:23	8	TIFFClose ( * tiffout )
CALLEE	2119:4	2119:4	9	TIFFClose
LEAF_NODE	2119:4	2119:4	10	TIFFClose
LEAF_NODE	2119:14	2119:14	9	(
ARGUMENT	2119:15	2119:15	9	* tiffout
UNARY_EXPR	2119:15	2119:16	10	* tiffout
UNARY_OPERATOR	2119:15	2119:15	11	*
LEAF_NODE	2119:15	2119:15	12	*
FIELD	2119:16	2119:16	11	tiffout
LEAF_NODE	2119:16	2119:16	12	tiffout
LEAF_NODE	2119:23	2119:23	9	)
LEAF_NODE	2119:24	2119:24	7	;
EXPR_STATEMENT	2120:4	2120:19	6	* tiffout = NULL ;
EXPR	2120:4	2120:4	7	* tiffout = NULL
ASSIGN	2120:4	2120:15	8	* tiffout = NULL
LVAL	2120:4	2120:4	9	* tiffout
UNARY_EXPR	2120:4	2120:5	10	* tiffout
UNARY_OPERATOR	2120:4	2120:4	11	*
LEAF_NODE	2120:4	2120:4	12	*
FIELD	2120:5	2120:5	11	tiffout
LEAF_NODE	2120:5	2120:5	12	tiffout
ASSIGN_OP	2120:13	2120:13	9	=
LEAF_NODE	2120:13	2120:13	10	=
RVAL	2120:15	2120:15	9	NULL
FIELD	2120:15	2120:15	10	NULL
LEAF_NODE	2120:15	2120:15	11	NULL
LEAF_NODE	2120:19	2120:19	7	;
LEAF_NODE	2121:4	2121:4	5	}
EXPR_STATEMENT	2123:2	2123:33	3	memcpy ( export_ext , ".tiff" , 6 ) ;
EXPR	2123:2	2123:2	4	memcpy ( export_ext , ".tiff" , 6 )
FUNCTION_CALL	2123:2	2123:32	5	memcpy ( export_ext , ".tiff" , 6 )
CALLEE	2123:2	2123:2	6	memcpy
LEAF_NODE	2123:2	2123:2	7	memcpy
LEAF_NODE	2123:9	2123:9	6	(
ARGUMENT	2123:10	2123:10	6	export_ext
FIELD	2123:10	2123:10	7	export_ext
LEAF_NODE	2123:10	2123:10	8	export_ext
LEAF_NODE	2123:20	2123:20	6	,
ARGUMENT	2123:22	2123:22	6	".tiff"
FIELD	2123:22	2123:22	7	".tiff"
LEAF_NODE	2123:22	2123:22	8	".tiff"
LEAF_NODE	2123:29	2123:29	6	,
ARGUMENT	2123:31	2123:31	6	6
FIELD	2123:31	2123:31	7	6
LEAF_NODE	2123:31	2123:31	8	6
LEAF_NODE	2123:32	2123:32	6	)
LEAF_NODE	2123:33	2123:33	4	;
EXPR_STATEMENT	2124:2	2124:47	3	memset ( exportname , '\0' , sizeof ( exportname ) ) ;
EXPR	2124:2	2124:2	4	memset ( exportname , '\0' , sizeof ( exportname ) )
FUNCTION_CALL	2124:2	2124:46	5	memset ( exportname , '\0' , sizeof ( exportname ) )
CALLEE	2124:2	2124:2	6	memset
LEAF_NODE	2124:2	2124:2	7	memset
LEAF_NODE	2124:9	2124:9	6	(
ARGUMENT	2124:10	2124:10	6	exportname
FIELD	2124:10	2124:10	7	exportname
LEAF_NODE	2124:10	2124:10	8	exportname
LEAF_NODE	2124:20	2124:20	6	,
ARGUMENT	2124:22	2124:22	6	'\0'
FIELD	2124:22	2124:22	7	'\0'
LEAF_NODE	2124:22	2124:22	8	'\0'
LEAF_NODE	2124:26	2124:26	6	,
ARGUMENT	2124:28	2124:28	6	sizeof ( exportname )
FUNCTION_CALL	2124:28	2124:45	7	sizeof ( exportname )
CALLEE	2124:28	2124:28	8	sizeof
LEAF_NODE	2124:28	2124:28	9	sizeof
LEAF_NODE	2124:34	2124:34	8	(
ARGUMENT	2124:35	2124:35	8	exportname
FIELD	2124:35	2124:35	9	exportname
LEAF_NODE	2124:35	2124:35	10	exportname
LEAF_NODE	2124:45	2124:45	8	)
LEAF_NODE	2124:46	2124:46	6	)
LEAF_NODE	2124:47	2124:47	4	;
EXPR_STATEMENT	2129:2	2129:72	3	strncpy ( exportname , outname , sizeof ( exportname ) - FILENUM_MAX_LENGTH ) ;
EXPR	2129:2	2129:2	4	strncpy ( exportname , outname , sizeof ( exportname ) - FILENUM_MAX_LENGTH )
FUNCTION_CALL	2129:2	2129:71	5	strncpy ( exportname , outname , sizeof ( exportname ) - FILENUM_MAX_LENGTH )
CALLEE	2129:2	2129:2	6	strncpy
LEAF_NODE	2129:2	2129:2	7	strncpy
LEAF_NODE	2129:10	2129:10	6	(
ARGUMENT	2129:11	2129:11	6	exportname
FIELD	2129:11	2129:11	7	exportname
LEAF_NODE	2129:11	2129:11	8	exportname
LEAF_NODE	2129:21	2129:21	6	,
ARGUMENT	2129:23	2129:23	6	outname
FIELD	2129:23	2129:23	7	outname
LEAF_NODE	2129:23	2129:23	8	outname
LEAF_NODE	2129:30	2129:30	6	,
ARGUMENT	2129:32	2129:53	6	sizeof ( exportname ) - FILENUM_MAX_LENGTH
FUNCTION_CALL	2129:32	2129:49	7	sizeof ( exportname )
CALLEE	2129:32	2129:32	8	sizeof
LEAF_NODE	2129:32	2129:32	9	sizeof
LEAF_NODE	2129:38	2129:38	8	(
ARGUMENT	2129:39	2129:39	8	exportname
FIELD	2129:39	2129:39	9	exportname
LEAF_NODE	2129:39	2129:39	10	exportname
LEAF_NODE	2129:49	2129:49	8	)
LEAF_NODE	2129:51	2129:51	7	-
FIELD	2129:53	2129:53	7	FILENUM_MAX_LENGTH
LEAF_NODE	2129:53	2129:53	8	FILENUM_MAX_LENGTH
LEAF_NODE	2129:71	2129:71	6	)
LEAF_NODE	2129:72	2129:72	4	;
SELECTION	2130:2	2131:4	3	
KEYWORD	2130:2	2130:2	4	if
LEAF_NODE	2130:2	2130:2	5	if
LEAF_NODE	2130:5	2130:5	4	(
CONDITION	2130:6	2130:6	4	* tiffout == NULL
EXPR	2130:6	2130:18	5	* tiffout == NULL
UNARY_EXPR	2130:6	2130:7	6	* tiffout
UNARY_OPERATOR	2130:6	2130:6	7	*
LEAF_NODE	2130:6	2130:6	8	*
FIELD	2130:7	2130:7	7	tiffout
LEAF_NODE	2130:7	2130:7	8	tiffout
EQ_OPERATOR	2130:15	2130:15	6	==
LEAF_NODE	2130:15	2130:15	7	==
FIELD	2130:18	2130:18	6	NULL
LEAF_NODE	2130:18	2130:18	7	NULL
LEAF_NODE	2130:22	2130:22	4	)
STATEMENTS	2131:4	2166:4	4	
LEAF_NODE	2131:4	2131:4	5	{
STATEMENTS	2132:4	2165:4	5	
SELECTION	2132:4	2133:6	6	
KEYWORD	2132:4	2132:4	7	if
LEAF_NODE	2132:4	2132:4	8	if
LEAF_NODE	2132:7	2132:7	7	(
CONDITION	2132:8	2132:8	7	autoindex
EXPR	2132:8	2132:8	8	autoindex
FIELD	2132:8	2132:8	9	autoindex
LEAF_NODE	2132:8	2132:8	10	autoindex
LEAF_NODE	2132:17	2132:17	7	)
STATEMENTS	2133:6	2154:6	7	
LEAF_NODE	2133:6	2133:6	8	{
STATEMENTS	2134:6	2153:6	8	
EXPR_STATEMENT	2134:6	2134:14	9	findex ++ ;
EXPR	2134:6	2134:6	10	findex ++
FIELD	2134:6	2134:12	11	findex ++
LEAF_NODE	2134:6	2134:6	12	findex
LEAF_NODE	2134:12	2134:12	12	++
LEAF_NODE	2134:14	2134:14	10	;
SELECTION	2135:6	2136:8	9	
KEYWORD	2135:6	2135:6	10	if
LEAF_NODE	2135:6	2135:6	11	if
LEAF_NODE	2135:9	2135:9	10	(
CONDITION	2135:10	2135:10	10	( sep = strstr ( exportname , ".tif" ) ) || ( sep = strstr ( exportname , ".TIF" ) )
EXPR	2135:10	2135:10	11	( sep = strstr ( exportname , ".tif" ) ) || ( sep = strstr ( exportname , ".TIF" ) )
OR	2135:10	2135:48	12	( sep = strstr ( exportname , ".tif" ) ) || ( sep = strstr ( exportname , ".TIF" ) )
EXPR	2135:10	2135:43	13	( sep = strstr ( exportname , ".tif" ) )
LEAF_NODE	2135:10	2135:10	14	(
ASSIGN	2135:11	2135:17	14	sep = strstr ( exportname , ".tif" )
LVAL	2135:11	2135:11	15	sep
FIELD	2135:11	2135:11	16	sep
LEAF_NODE	2135:11	2135:11	17	sep
ASSIGN_OP	2135:15	2135:15	15	=
LEAF_NODE	2135:15	2135:15	16	=
RVAL	2135:17	2135:17	15	strstr ( exportname , ".tif" )
FUNCTION_CALL	2135:17	2135:42	16	strstr ( exportname , ".tif" )
CALLEE	2135:17	2135:17	17	strstr
LEAF_NODE	2135:17	2135:17	18	strstr
LEAF_NODE	2135:23	2135:23	17	(
ARGUMENT	2135:24	2135:24	17	exportname
FIELD	2135:24	2135:24	18	exportname
LEAF_NODE	2135:24	2135:24	19	exportname
LEAF_NODE	2135:34	2135:34	17	,
ARGUMENT	2135:36	2135:36	17	".tif"
FIELD	2135:36	2135:36	18	".tif"
LEAF_NODE	2135:36	2135:36	19	".tif"
LEAF_NODE	2135:42	2135:42	17	)
LEAF_NODE	2135:43	2135:43	14	)
LEAF_NODE	2135:45	2135:45	13	||
EXPR	2135:48	2135:81	13	( sep = strstr ( exportname , ".TIF" ) )
LEAF_NODE	2135:48	2135:48	14	(
ASSIGN	2135:49	2135:55	14	sep = strstr ( exportname , ".TIF" )
LVAL	2135:49	2135:49	15	sep
FIELD	2135:49	2135:49	16	sep
LEAF_NODE	2135:49	2135:49	17	sep
ASSIGN_OP	2135:53	2135:53	15	=
LEAF_NODE	2135:53	2135:53	16	=
RVAL	2135:55	2135:55	15	strstr ( exportname , ".TIF" )
FUNCTION_CALL	2135:55	2135:80	16	strstr ( exportname , ".TIF" )
CALLEE	2135:55	2135:55	17	strstr
LEAF_NODE	2135:55	2135:55	18	strstr
LEAF_NODE	2135:61	2135:61	17	(
ARGUMENT	2135:62	2135:62	17	exportname
FIELD	2135:62	2135:62	18	exportname
LEAF_NODE	2135:62	2135:62	19	exportname
LEAF_NODE	2135:72	2135:72	17	,
ARGUMENT	2135:74	2135:74	17	".TIF"
FIELD	2135:74	2135:74	18	".TIF"
LEAF_NODE	2135:74	2135:74	19	".TIF"
LEAF_NODE	2135:80	2135:80	17	)
LEAF_NODE	2135:81	2135:81	14	)
LEAF_NODE	2135:82	2135:82	10	)
STATEMENTS	2136:8	2139:8	10	
LEAF_NODE	2136:8	2136:8	11	{
STATEMENTS	2137:8	2138:8	11	
EXPR_STATEMENT	2137:8	2137:36	12	strncpy ( export_ext , sep , 5 ) ;
EXPR	2137:8	2137:8	13	strncpy ( export_ext , sep , 5 )
FUNCTION_CALL	2137:8	2137:35	14	strncpy ( export_ext , sep , 5 )
CALLEE	2137:8	2137:8	15	strncpy
LEAF_NODE	2137:8	2137:8	16	strncpy
LEAF_NODE	2137:16	2137:16	15	(
ARGUMENT	2137:17	2137:17	15	export_ext
FIELD	2137:17	2137:17	16	export_ext
LEAF_NODE	2137:17	2137:17	17	export_ext
LEAF_NODE	2137:27	2137:27	15	,
ARGUMENT	2137:29	2137:29	15	sep
FIELD	2137:29	2137:29	16	sep
LEAF_NODE	2137:29	2137:29	17	sep
LEAF_NODE	2137:32	2137:32	15	,
ARGUMENT	2137:34	2137:34	15	5
FIELD	2137:34	2137:34	16	5
LEAF_NODE	2137:34	2137:34	17	5
LEAF_NODE	2137:35	2137:35	15	)
LEAF_NODE	2137:36	2137:36	13	;
EXPR_STATEMENT	2138:8	2138:19	12	* sep = '\0' ;
EXPR	2138:8	2138:8	13	* sep = '\0'
ASSIGN	2138:8	2138:15	14	* sep = '\0'
LVAL	2138:8	2138:8	15	* sep
UNARY_EXPR	2138:8	2138:9	16	* sep
UNARY_OPERATOR	2138:8	2138:8	17	*
LEAF_NODE	2138:8	2138:8	18	*
FIELD	2138:9	2138:9	17	sep
LEAF_NODE	2138:9	2138:9	18	sep
ASSIGN_OP	2138:13	2138:13	15	=
LEAF_NODE	2138:13	2138:13	16	=
RVAL	2138:15	2138:15	15	'\0'
FIELD	2138:15	2138:15	16	'\0'
LEAF_NODE	2138:15	2138:15	17	'\0'
LEAF_NODE	2138:19	2138:19	13	;
LEAF_NODE	2139:8	2139:8	11	}
SELECTION	2140:6	2141:8	9	
KEYWORD	2140:6	2140:6	10	else
LEAF_NODE	2140:6	2140:6	11	else
STATEMENTS	2141:8	2141:8	10	
EXPR_STATEMENT	2141:8	2141:39	11	memcpy ( export_ext , ".tiff" , 5 ) ;
EXPR	2141:8	2141:8	12	memcpy ( export_ext , ".tiff" , 5 )
FUNCTION_CALL	2141:8	2141:38	13	memcpy ( export_ext , ".tiff" , 5 )
CALLEE	2141:8	2141:8	14	memcpy
LEAF_NODE	2141:8	2141:8	15	memcpy
LEAF_NODE	2141:15	2141:15	14	(
ARGUMENT	2141:16	2141:16	14	export_ext
FIELD	2141:16	2141:16	15	export_ext
LEAF_NODE	2141:16	2141:16	16	export_ext
LEAF_NODE	2141:26	2141:26	14	,
ARGUMENT	2141:28	2141:28	14	".tiff"
FIELD	2141:28	2141:28	15	".tiff"
LEAF_NODE	2141:28	2141:28	16	".tiff"
LEAF_NODE	2141:35	2141:35	14	,
ARGUMENT	2141:37	2141:37	14	5
FIELD	2141:37	2141:37	15	5
LEAF_NODE	2141:37	2141:37	16	5
LEAF_NODE	2141:38	2141:38	14	)
LEAF_NODE	2141:39	2141:39	12	;
EXPR_STATEMENT	2142:6	2142:26	9	export_ext [ 5 ] = '\0' ;
EXPR	2142:6	2142:6	10	export_ext [ 5 ] = '\0'
ASSIGN	2142:6	2142:22	11	export_ext [ 5 ] = '\0'
LVAL	2142:6	2142:6	12	export_ext [ 5 ]
FIELD	2142:6	2142:18	13	export_ext [ 5 ]
LEAF_NODE	2142:6	2142:6	14	export_ext
LEAF_NODE	2142:16	2142:16	14	[
EXPR	2142:17	2142:17	14	5
FIELD	2142:17	2142:17	15	5
LEAF_NODE	2142:17	2142:17	16	5
LEAF_NODE	2142:18	2142:18	14	]
ASSIGN_OP	2142:20	2142:20	12	=
LEAF_NODE	2142:20	2142:20	13	=
RVAL	2142:22	2142:22	12	'\0'
FIELD	2142:22	2142:22	13	'\0'
LEAF_NODE	2142:22	2142:22	14	'\0'
LEAF_NODE	2142:26	2142:26	10	;
EXPR_STATEMENT	2143:6	2143:39	9	basename_len = strlen ( exportname ) ;
EXPR	2143:6	2143:6	10	basename_len = strlen ( exportname )
ASSIGN	2143:6	2143:21	11	basename_len = strlen ( exportname )
LVAL	2143:6	2143:6	12	basename_len
FIELD	2143:6	2143:6	13	basename_len
LEAF_NODE	2143:6	2143:6	14	basename_len
ASSIGN_OP	2143:19	2143:19	12	=
LEAF_NODE	2143:19	2143:19	13	=
RVAL	2143:21	2143:21	12	strlen ( exportname )
FUNCTION_CALL	2143:21	2143:38	13	strlen ( exportname )
CALLEE	2143:21	2143:21	14	strlen
LEAF_NODE	2143:21	2143:21	15	strlen
LEAF_NODE	2143:27	2143:27	14	(
ARGUMENT	2143:28	2143:28	14	exportname
FIELD	2143:28	2143:28	15	exportname
LEAF_NODE	2143:28	2143:28	16	exportname
LEAF_NODE	2143:38	2143:38	14	)
LEAF_NODE	2143:39	2143:39	10	;
SELECTION	2146:6	2147:8	9	
KEYWORD	2146:6	2146:6	10	if
LEAF_NODE	2146:6	2146:6	11	if
LEAF_NODE	2146:9	2146:9	10	(
CONDITION	2146:10	2146:10	10	findex > MAX_EXPORT_PAGES
EXPR	2146:10	2146:19	11	findex > MAX_EXPORT_PAGES
FIELD	2146:10	2146:10	12	findex
LEAF_NODE	2146:10	2146:10	13	findex
REL_OPERATOR	2146:17	2146:17	12	>
LEAF_NODE	2146:17	2146:17	13	>
FIELD	2146:19	2146:19	12	MAX_EXPORT_PAGES
LEAF_NODE	2146:19	2146:19	13	MAX_EXPORT_PAGES
LEAF_NODE	2146:35	2146:35	10	)
STATEMENTS	2147:8	2150:8	10	
LEAF_NODE	2147:8	2147:8	11	{
STATEMENTS	2148:8	2149:8	11	
EXPR_STATEMENT	2148:8	2148:98	12	TIFFError ( "update_output_file" , "Maximum of %d pages per file exceeded" , MAX_EXPORT_PAGES ) ;
EXPR	2148:8	2148:8	13	TIFFError ( "update_output_file" , "Maximum of %d pages per file exceeded" , MAX_EXPORT_PAGES )
FUNCTION_CALL	2148:8	2148:97	14	TIFFError ( "update_output_file" , "Maximum of %d pages per file exceeded" , MAX_EXPORT_PAGES )
CALLEE	2148:8	2148:8	15	TIFFError
LEAF_NODE	2148:8	2148:8	16	TIFFError
LEAF_NODE	2148:17	2148:17	15	(
ARGUMENT	2148:18	2148:18	15	"update_output_file"
FIELD	2148:18	2148:18	16	"update_output_file"
LEAF_NODE	2148:18	2148:18	17	"update_output_file"
LEAF_NODE	2148:38	2148:38	15	,
ARGUMENT	2148:40	2148:40	15	"Maximum of %d pages per file exceeded"
FIELD	2148:40	2148:40	16	"Maximum of %d pages per file exceeded"
LEAF_NODE	2148:40	2148:40	17	"Maximum of %d pages per file exceeded"
LEAF_NODE	2148:79	2148:79	15	,
ARGUMENT	2148:81	2148:81	15	MAX_EXPORT_PAGES
FIELD	2148:81	2148:81	16	MAX_EXPORT_PAGES
LEAF_NODE	2148:81	2148:81	17	MAX_EXPORT_PAGES
LEAF_NODE	2148:97	2148:97	15	)
LEAF_NODE	2148:98	2148:98	13	;
JUMP_STATEMENT	2149:8	2149:16	12	return 1 ;
KEYWORD	2149:8	2149:8	13	return
LEAF_NODE	2149:8	2149:8	14	return
DESTINATION	2149:15	2149:15	13	1
EXPR	2149:15	2149:15	14	1
FIELD	2149:15	2149:15	15	1
LEAF_NODE	2149:15	2149:15	16	1
LEAF_NODE	2149:16	2149:16	13	;
LEAF_NODE	2150:8	2150:8	11	}
EXPR_STATEMENT	2153:6	2153:109	9	snprintf ( exportname + basename_len , sizeof ( exportname ) - basename_len , "-%03d%.5s" , findex , export_ext ) ;
EXPR	2153:6	2153:6	10	snprintf ( exportname + basename_len , sizeof ( exportname ) - basename_len , "-%03d%.5s" , findex , export_ext )
FUNCTION_CALL	2153:6	2153:108	11	snprintf ( exportname + basename_len , sizeof ( exportname ) - basename_len , "-%03d%.5s" , findex , export_ext )
CALLEE	2153:6	2153:6	12	snprintf
LEAF_NODE	2153:6	2153:6	13	snprintf
LEAF_NODE	2153:14	2153:14	12	(
ARGUMENT	2153:15	2153:28	12	exportname + basename_len
FIELD	2153:15	2153:15	13	exportname
LEAF_NODE	2153:15	2153:15	14	exportname
LEAF_NODE	2153:26	2153:26	13	+
FIELD	2153:28	2153:28	13	basename_len
LEAF_NODE	2153:28	2153:28	14	basename_len
LEAF_NODE	2153:40	2153:40	12	,
ARGUMENT	2153:42	2153:63	12	sizeof ( exportname ) - basename_len
FUNCTION_CALL	2153:42	2153:59	13	sizeof ( exportname )
CALLEE	2153:42	2153:42	14	sizeof
LEAF_NODE	2153:42	2153:42	15	sizeof
LEAF_NODE	2153:48	2153:48	14	(
ARGUMENT	2153:49	2153:49	14	exportname
FIELD	2153:49	2153:49	15	exportname
LEAF_NODE	2153:49	2153:49	16	exportname
LEAF_NODE	2153:59	2153:59	14	)
LEAF_NODE	2153:61	2153:61	13	-
FIELD	2153:63	2153:63	13	basename_len
LEAF_NODE	2153:63	2153:63	14	basename_len
LEAF_NODE	2153:75	2153:75	12	,
ARGUMENT	2153:77	2153:77	12	"-%03d%.5s"
FIELD	2153:77	2153:77	13	"-%03d%.5s"
LEAF_NODE	2153:77	2153:77	14	"-%03d%.5s"
LEAF_NODE	2153:88	2153:88	12	,
ARGUMENT	2153:90	2153:90	12	findex
FIELD	2153:90	2153:90	13	findex
LEAF_NODE	2153:90	2153:90	14	findex
LEAF_NODE	2153:96	2153:96	12	,
ARGUMENT	2153:98	2153:98	12	export_ext
FIELD	2153:98	2153:98	13	export_ext
LEAF_NODE	2153:98	2153:98	14	export_ext
LEAF_NODE	2153:108	2153:108	12	)
LEAF_NODE	2153:109	2153:109	10	;
LEAF_NODE	2154:6	2154:6	8	}
EXPR_STATEMENT	2155:4	2155:45	6	exportname [ sizeof ( exportname ) - 1 ] = '\0' ;
EXPR	2155:4	2155:4	7	exportname [ sizeof ( exportname ) - 1 ] = '\0'
ASSIGN	2155:4	2155:41	8	exportname [ sizeof ( exportname ) - 1 ] = '\0'
LVAL	2155:4	2155:4	9	exportname [ sizeof ( exportname ) - 1 ]
FIELD	2155:4	2155:37	10	exportname [ sizeof ( exportname ) - 1 ]
LEAF_NODE	2155:4	2155:4	11	exportname
LEAF_NODE	2155:14	2155:14	11	[
EXPR	2155:15	2155:36	11	sizeof ( exportname ) - 1
FUNCTION_CALL	2155:15	2155:32	12	sizeof ( exportname )
CALLEE	2155:15	2155:15	13	sizeof
LEAF_NODE	2155:15	2155:15	14	sizeof
LEAF_NODE	2155:21	2155:21	13	(
ARGUMENT	2155:22	2155:22	13	exportname
FIELD	2155:22	2155:22	14	exportname
LEAF_NODE	2155:22	2155:22	15	exportname
LEAF_NODE	2155:32	2155:32	13	)
LEAF_NODE	2155:34	2155:34	12	-
FIELD	2155:36	2155:36	12	1
LEAF_NODE	2155:36	2155:36	13	1
LEAF_NODE	2155:37	2155:37	11	]
ASSIGN_OP	2155:39	2155:39	9	=
LEAF_NODE	2155:39	2155:39	10	=
RVAL	2155:41	2155:41	9	'\0'
FIELD	2155:41	2155:41	10	'\0'
LEAF_NODE	2155:41	2155:41	11	'\0'
LEAF_NODE	2155:45	2155:45	7	;
EXPR_STATEMENT	2157:4	2157:41	6	* tiffout = TIFFOpen ( exportname , mode ) ;
EXPR	2157:4	2157:4	7	* tiffout = TIFFOpen ( exportname , mode )
ASSIGN	2157:4	2157:15	8	* tiffout = TIFFOpen ( exportname , mode )
LVAL	2157:4	2157:4	9	* tiffout
UNARY_EXPR	2157:4	2157:5	10	* tiffout
UNARY_OPERATOR	2157:4	2157:4	11	*
LEAF_NODE	2157:4	2157:4	12	*
FIELD	2157:5	2157:5	11	tiffout
LEAF_NODE	2157:5	2157:5	12	tiffout
ASSIGN_OP	2157:13	2157:13	9	=
LEAF_NODE	2157:13	2157:13	10	=
RVAL	2157:15	2157:15	9	TIFFOpen ( exportname , mode )
FUNCTION_CALL	2157:15	2157:40	10	TIFFOpen ( exportname , mode )
CALLEE	2157:15	2157:15	11	TIFFOpen
LEAF_NODE	2157:15	2157:15	12	TIFFOpen
LEAF_NODE	2157:23	2157:23	11	(
ARGUMENT	2157:24	2157:24	11	exportname
FIELD	2157:24	2157:24	12	exportname
LEAF_NODE	2157:24	2157:24	13	exportname
LEAF_NODE	2157:34	2157:34	11	,
ARGUMENT	2157:36	2157:36	11	mode
FIELD	2157:36	2157:36	12	mode
LEAF_NODE	2157:36	2157:36	13	mode
LEAF_NODE	2157:40	2157:40	11	)
LEAF_NODE	2157:41	2157:41	7	;
SELECTION	2158:4	2159:6	6	
KEYWORD	2158:4	2158:4	7	if
LEAF_NODE	2158:4	2158:4	8	if
LEAF_NODE	2158:7	2158:7	7	(
CONDITION	2158:8	2158:8	7	* tiffout == NULL
EXPR	2158:8	2158:20	8	* tiffout == NULL
UNARY_EXPR	2158:8	2158:9	9	* tiffout
UNARY_OPERATOR	2158:8	2158:8	10	*
LEAF_NODE	2158:8	2158:8	11	*
FIELD	2158:9	2158:9	10	tiffout
LEAF_NODE	2158:9	2158:9	11	tiffout
EQ_OPERATOR	2158:17	2158:17	9	==
LEAF_NODE	2158:17	2158:17	10	==
FIELD	2158:20	2158:20	9	NULL
LEAF_NODE	2158:20	2158:20	10	NULL
LEAF_NODE	2158:24	2158:24	7	)
STATEMENTS	2159:6	2162:6	7	
LEAF_NODE	2159:6	2159:6	8	{
STATEMENTS	2160:6	2161:6	8	
EXPR_STATEMENT	2160:6	2160:82	9	TIFFError ( "update_output_file" , "Unable to open output file %s" , exportname ) ;
EXPR	2160:6	2160:6	10	TIFFError ( "update_output_file" , "Unable to open output file %s" , exportname )
FUNCTION_CALL	2160:6	2160:81	11	TIFFError ( "update_output_file" , "Unable to open output file %s" , exportname )
CALLEE	2160:6	2160:6	12	TIFFError
LEAF_NODE	2160:6	2160:6	13	TIFFError
LEAF_NODE	2160:15	2160:15	12	(
ARGUMENT	2160:16	2160:16	12	"update_output_file"
FIELD	2160:16	2160:16	13	"update_output_file"
LEAF_NODE	2160:16	2160:16	14	"update_output_file"
LEAF_NODE	2160:36	2160:36	12	,
ARGUMENT	2160:38	2160:38	12	"Unable to open output file %s"
FIELD	2160:38	2160:38	13	"Unable to open output file %s"
LEAF_NODE	2160:38	2160:38	14	"Unable to open output file %s"
LEAF_NODE	2160:69	2160:69	12	,
ARGUMENT	2160:71	2160:71	12	exportname
FIELD	2160:71	2160:71	13	exportname
LEAF_NODE	2160:71	2160:71	14	exportname
LEAF_NODE	2160:81	2160:81	12	)
LEAF_NODE	2160:82	2160:82	10	;
JUMP_STATEMENT	2161:6	2161:14	9	return 1 ;
KEYWORD	2161:6	2161:6	10	return
LEAF_NODE	2161:6	2161:6	11	return
DESTINATION	2161:13	2161:13	10	1
EXPR	2161:13	2161:13	11	1
FIELD	2161:13	2161:13	12	1
LEAF_NODE	2161:13	2161:13	13	1
LEAF_NODE	2161:14	2161:14	10	;
LEAF_NODE	2162:6	2162:6	8	}
EXPR_STATEMENT	2163:4	2163:13	6	* page = 0 ;
EXPR	2163:4	2163:4	7	* page = 0
ASSIGN	2163:4	2163:12	8	* page = 0
LVAL	2163:4	2163:4	9	* page
UNARY_EXPR	2163:4	2163:5	10	* page
UNARY_OPERATOR	2163:4	2163:4	11	*
LEAF_NODE	2163:4	2163:4	12	*
FIELD	2163:5	2163:5	11	page
LEAF_NODE	2163:5	2163:5	12	page
ASSIGN_OP	2163:10	2163:10	9	=
LEAF_NODE	2163:10	2163:10	10	=
RVAL	2163:12	2163:12	9	0
FIELD	2163:12	2163:12	10	0
LEAF_NODE	2163:12	2163:12	11	0
LEAF_NODE	2163:13	2163:13	7	;
JUMP_STATEMENT	2165:4	2165:12	6	return 0 ;
KEYWORD	2165:4	2165:4	7	return
LEAF_NODE	2165:4	2165:4	8	return
DESTINATION	2165:11	2165:11	7	0
EXPR	2165:11	2165:11	8	0
FIELD	2165:11	2165:11	9	0
LEAF_NODE	2165:11	2165:11	10	0
LEAF_NODE	2165:12	2165:12	7	;
LEAF_NODE	2166:4	2166:4	5	}
SELECTION	2167:2	2168:4	3	
KEYWORD	2167:2	2167:2	4	else
LEAF_NODE	2167:2	2167:2	5	else
STATEMENTS	2168:4	2168:4	4	
EXPR_STATEMENT	2168:4	2168:13	5	( * page ) ++ ;
EXPR	2168:4	2168:11	6	( * page ) ++
LEAF_NODE	2168:4	2168:4	7	(
UNARY_EXPR	2168:5	2168:6	7	* page
UNARY_OPERATOR	2168:5	2168:5	8	*
LEAF_NODE	2168:5	2168:5	9	*
FIELD	2168:6	2168:6	8	page
LEAF_NODE	2168:6	2168:6	9	page
LEAF_NODE	2168:10	2168:10	7	)
LEAF_NODE	2168:11	2168:11	7	++
LEAF_NODE	2168:13	2168:13	6	;
JUMP_STATEMENT	2170:2	2170:10	3	return 0 ;
KEYWORD	2170:2	2170:2	4	return
LEAF_NODE	2170:2	2170:2	5	return
DESTINATION	2170:9	2170:9	4	0
EXPR	2170:9	2170:9	5	0
FIELD	2170:9	2170:9	6	0
LEAF_NODE	2170:9	2170:9	7	0
LEAF_NODE	2170:10	2170:10	4	;
LEAF_NODE	2171:2	2171:2	2	}
FUNCTION_DEF	2174:0	2482:2	1	
RETURN_TYPE	2174:0	2174:0	2	int
TYPE_NAME	2174:0	2174:0	3	int
LEAF_NODE	2174:0	2174:0	4	int
FUNCTION_NAME	2175:0	2175:0	2	main
LEAF_NODE	2175:0	2175:0	3	main
PARAMETER_LIST	2175:4	2175:27	2	( int argc , char * [ ] argv )
LEAF_NODE	2175:4	2175:4	3	(
PARAMETER_DECL	2175:5	2175:9	3	int argc
TYPE	2175:5	2175:5	4	int
TYPE_NAME	2175:5	2175:5	5	int
LEAF_NODE	2175:5	2175:5	6	int
NAME	2175:9	2175:9	4	argc
LEAF_NODE	2175:9	2175:9	5	argc
LEAF_NODE	2175:13	2175:13	3	,
PARAMETER_DECL	2175:15	2175:21	3	char * [ ] argv
TYPE	2175:15	2175:25	4	char * [ ]
TYPE_NAME	2175:15	2175:15	5	char
LEAF_NODE	2175:15	2175:15	6	char
POINTER	2175:19	2175:19	5	*
LEAF_NODE	2175:19	2175:19	6	*
TYPE_SUFFIX	2175:25	2175:26	5	[ ]
LEAF_NODE	2175:25	2175:25	6	[
LEAF_NODE	2175:26	2175:26	6	]
NAME	2175:21	2175:21	4	argv
LEAF_NODE	2175:21	2175:21	5	argv
LEAF_NODE	2175:27	2175:27	3	)
LEAF_NODE	2176:2	2176:2	2	{
STATEMENTS	2179:2	2481:2	2	
LEAF_NODE	2179:2	2179:2	3	extern
SIMPLE_DECL	2179:9	2179:19	3	int optind ;
VAR_DECL	2179:9	2179:13	4	int optind
TYPE	2179:9	2179:9	5	int
TYPE_NAME	2179:9	2179:9	6	int
LEAF_NODE	2179:9	2179:9	7	int
NAME	2179:13	2179:13	5	optind
LEAF_NODE	2179:13	2179:13	6	optind
LEAF_NODE	2179:19	2179:19	4	;
SIMPLE_DECL	2181:2	2181:32	3	uint16 defconfig ; defconfig = ( uint16 ) - 1 ;
VAR_DECL	2181:2	2181:9	4	uint16 defconfig ; defconfig = ( uint16 ) - 1
TYPE	2181:2	2181:2	5	uint16
TYPE_NAME	2181:2	2181:2	6	uint16
LEAF_NODE	2181:2	2181:2	7	uint16
NAME	2181:9	2181:9	5	defconfig
LEAF_NODE	2181:9	2181:9	6	defconfig
LEAF_NODE	0:0	0:0	5	;
INIT	2181:9	2181:9	5	defconfig = ( uint16 ) - 1
ASSIGN	2181:9	2181:21	6	defconfig = ( uint16 ) - 1
LVAL	2181:9	2181:9	7	defconfig
NAME	2181:9	2181:9	8	defconfig
LEAF_NODE	2181:9	2181:9	9	defconfig
ASSIGN_OP	2181:19	2181:19	7	=
LEAF_NODE	2181:19	2181:19	8	=
RVAL	2181:21	2181:30	7	( uint16 ) - 1
LEAF_NODE	2181:21	2181:21	8	(
TYPE_NAME	2181:22	2181:22	8	uint16
LEAF_NODE	2181:22	2181:22	9	uint16
LEAF_NODE	2181:28	2181:28	8	)
UNARY_EXPR	2181:30	2181:31	8	- 1
UNARY_OPERATOR	2181:30	2181:30	9	-
LEAF_NODE	2181:30	2181:30	10	-
FIELD	2181:31	2181:31	9	1
LEAF_NODE	2181:31	2181:31	10	1
LEAF_NODE	2181:32	2181:32	4	;
SIMPLE_DECL	2182:2	2182:25	3	uint16 deffillorder ; deffillorder = 0 ;
VAR_DECL	2182:2	2182:9	4	uint16 deffillorder ; deffillorder = 0
TYPE	2182:2	2182:2	5	uint16
TYPE_NAME	2182:2	2182:2	6	uint16
LEAF_NODE	2182:2	2182:2	7	uint16
NAME	2182:9	2182:9	5	deffillorder
LEAF_NODE	2182:9	2182:9	6	deffillorder
LEAF_NODE	0:0	0:0	5	;
INIT	2182:9	2182:9	5	deffillorder = 0
ASSIGN	2182:9	2182:24	6	deffillorder = 0
LVAL	2182:9	2182:9	7	deffillorder
NAME	2182:9	2182:9	8	deffillorder
LEAF_NODE	2182:9	2182:9	9	deffillorder
ASSIGN_OP	2182:22	2182:22	7	=
LEAF_NODE	2182:22	2182:22	8	=
RVAL	2182:24	2182:24	7	0
FIELD	2182:24	2182:24	8	0
LEAF_NODE	2182:24	2182:24	9	0
LEAF_NODE	2182:25	2182:25	4	;
SIMPLE_DECL	2183:2	2183:34	3	uint32 deftilewidth ; deftilewidth = ( uint32 ) 0 ;
VAR_DECL	2183:2	2183:9	4	uint32 deftilewidth ; deftilewidth = ( uint32 ) 0
TYPE	2183:2	2183:2	5	uint32
TYPE_NAME	2183:2	2183:2	6	uint32
LEAF_NODE	2183:2	2183:2	7	uint32
NAME	2183:9	2183:9	5	deftilewidth
LEAF_NODE	2183:9	2183:9	6	deftilewidth
LEAF_NODE	0:0	0:0	5	;
INIT	2183:9	2183:9	5	deftilewidth = ( uint32 ) 0
ASSIGN	2183:9	2183:24	6	deftilewidth = ( uint32 ) 0
LVAL	2183:9	2183:9	7	deftilewidth
NAME	2183:9	2183:9	8	deftilewidth
LEAF_NODE	2183:9	2183:9	9	deftilewidth
ASSIGN_OP	2183:22	2183:22	7	=
LEAF_NODE	2183:22	2183:22	8	=
RVAL	2183:24	2183:33	7	( uint32 ) 0
LEAF_NODE	2183:24	2183:24	8	(
TYPE_NAME	2183:25	2183:25	8	uint32
LEAF_NODE	2183:25	2183:25	9	uint32
LEAF_NODE	2183:31	2183:31	8	)
FIELD	2183:33	2183:33	8	0
LEAF_NODE	2183:33	2183:33	9	0
LEAF_NODE	2183:34	2183:34	4	;
SIMPLE_DECL	2184:2	2184:35	3	uint32 deftilelength ; deftilelength = ( uint32 ) 0 ;
VAR_DECL	2184:2	2184:9	4	uint32 deftilelength ; deftilelength = ( uint32 ) 0
TYPE	2184:2	2184:2	5	uint32
TYPE_NAME	2184:2	2184:2	6	uint32
LEAF_NODE	2184:2	2184:2	7	uint32
NAME	2184:9	2184:9	5	deftilelength
LEAF_NODE	2184:9	2184:9	6	deftilelength
LEAF_NODE	0:0	0:0	5	;
INIT	2184:9	2184:9	5	deftilelength = ( uint32 ) 0
ASSIGN	2184:9	2184:25	6	deftilelength = ( uint32 ) 0
LVAL	2184:9	2184:9	7	deftilelength
NAME	2184:9	2184:9	8	deftilelength
LEAF_NODE	2184:9	2184:9	9	deftilelength
ASSIGN_OP	2184:23	2184:23	7	=
LEAF_NODE	2184:23	2184:23	8	=
RVAL	2184:25	2184:34	7	( uint32 ) 0
LEAF_NODE	2184:25	2184:25	8	(
TYPE_NAME	2184:26	2184:26	8	uint32
LEAF_NODE	2184:26	2184:26	9	uint32
LEAF_NODE	2184:32	2184:32	8	)
FIELD	2184:34	2184:34	8	0
LEAF_NODE	2184:34	2184:34	9	0
LEAF_NODE	2184:35	2184:35	4	;
SIMPLE_DECL	2185:2	2185:37	3	uint32 defrowsperstrip ; defrowsperstrip = ( uint32 ) 0 ;
VAR_DECL	2185:2	2185:9	4	uint32 defrowsperstrip ; defrowsperstrip = ( uint32 ) 0
TYPE	2185:2	2185:2	5	uint32
TYPE_NAME	2185:2	2185:2	6	uint32
LEAF_NODE	2185:2	2185:2	7	uint32
NAME	2185:9	2185:9	5	defrowsperstrip
LEAF_NODE	2185:9	2185:9	6	defrowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	2185:9	2185:9	5	defrowsperstrip = ( uint32 ) 0
ASSIGN	2185:9	2185:27	6	defrowsperstrip = ( uint32 ) 0
LVAL	2185:9	2185:9	7	defrowsperstrip
NAME	2185:9	2185:9	8	defrowsperstrip
LEAF_NODE	2185:9	2185:9	9	defrowsperstrip
ASSIGN_OP	2185:25	2185:25	7	=
LEAF_NODE	2185:25	2185:25	8	=
RVAL	2185:27	2185:36	7	( uint32 ) 0
LEAF_NODE	2185:27	2185:27	8	(
TYPE_NAME	2185:28	2185:28	8	uint32
LEAF_NODE	2185:28	2185:28	9	uint32
LEAF_NODE	2185:34	2185:34	8	)
FIELD	2185:36	2185:36	8	0
LEAF_NODE	2185:36	2185:36	9	0
LEAF_NODE	2185:37	2185:37	4	;
SIMPLE_DECL	2186:2	2186:19	3	uint32 dirnum ; dirnum = 0 ;
VAR_DECL	2186:2	2186:9	4	uint32 dirnum ; dirnum = 0
TYPE	2186:2	2186:2	5	uint32
TYPE_NAME	2186:2	2186:2	6	uint32
LEAF_NODE	2186:2	2186:2	7	uint32
NAME	2186:9	2186:9	5	dirnum
LEAF_NODE	2186:9	2186:9	6	dirnum
LEAF_NODE	0:0	0:0	5	;
INIT	2186:9	2186:9	5	dirnum = 0
ASSIGN	2186:9	2186:18	6	dirnum = 0
LVAL	2186:9	2186:9	7	dirnum
NAME	2186:9	2186:9	8	dirnum
LEAF_NODE	2186:9	2186:9	9	dirnum
ASSIGN_OP	2186:16	2186:16	7	=
LEAF_NODE	2186:16	2186:16	8	=
RVAL	2186:18	2186:18	7	0
FIELD	2186:18	2186:18	8	0
LEAF_NODE	2186:18	2186:18	9	0
LEAF_NODE	2186:19	2186:19	4	;
SIMPLE_DECL	2188:2	2188:17	3	TIFF * in ; in = NULL ;
VAR_DECL	2188:2	2188:8	4	TIFF * in ; in = NULL
TYPE	2188:2	2188:7	5	TIFF *
TYPE_NAME	2188:2	2188:2	6	TIFF
LEAF_NODE	2188:2	2188:2	7	TIFF
POINTER	2188:7	2188:7	6	*
LEAF_NODE	2188:7	2188:7	7	*
NAME	2188:8	2188:8	5	in
LEAF_NODE	2188:8	2188:8	6	in
LEAF_NODE	0:0	0:0	5	;
INIT	2188:8	2188:8	5	in = NULL
ASSIGN	2188:8	2188:13	6	in = NULL
LVAL	2188:8	2188:8	7	in
NAME	2188:8	2188:8	8	in
LEAF_NODE	2188:8	2188:8	9	in
ASSIGN_OP	2188:11	2188:11	7	=
LEAF_NODE	2188:11	2188:11	8	=
RVAL	2188:13	2188:13	7	NULL
FIELD	2188:13	2188:13	8	NULL
LEAF_NODE	2188:13	2188:13	9	NULL
LEAF_NODE	2188:17	2188:17	4	;
SIMPLE_DECL	2189:2	2189:18	3	TIFF * out ; out = NULL ;
VAR_DECL	2189:2	2189:8	4	TIFF * out ; out = NULL
TYPE	2189:2	2189:7	5	TIFF *
TYPE_NAME	2189:2	2189:2	6	TIFF
LEAF_NODE	2189:2	2189:2	7	TIFF
POINTER	2189:7	2189:7	6	*
LEAF_NODE	2189:7	2189:7	7	*
NAME	2189:8	2189:8	5	out
LEAF_NODE	2189:8	2189:8	6	out
LEAF_NODE	0:0	0:0	5	;
INIT	2189:8	2189:8	5	out = NULL
ASSIGN	2189:8	2189:14	6	out = NULL
LVAL	2189:8	2189:8	7	out
NAME	2189:8	2189:8	8	out
LEAF_NODE	2189:8	2189:8	9	out
ASSIGN_OP	2189:12	2189:12	7	=
LEAF_NODE	2189:12	2189:12	8	=
RVAL	2189:14	2189:14	7	NULL
FIELD	2189:14	2189:14	8	NULL
LEAF_NODE	2189:14	2189:14	9	NULL
LEAF_NODE	2189:18	2189:18	4	;
SIMPLE_DECL	2190:2	2190:16	3	char [ 10 ] mode ;
VAR_DECL	2190:2	2190:8	4	char [ 10 ] mode
TYPE	2190:2	2190:12	5	char [ 10 ]
TYPE_NAME	2190:2	2190:2	6	char
LEAF_NODE	2190:2	2190:2	7	char
TYPE_SUFFIX	2190:12	2190:15	6	[ 10 ]
LEAF_NODE	2190:12	2190:12	7	[
FIELD	2190:13	2190:13	7	10
LEAF_NODE	2190:13	2190:13	8	10
LEAF_NODE	2190:15	2190:15	7	]
NAME	2190:8	2190:8	5	mode
LEAF_NODE	2190:8	2190:8	6	mode
LEAF_NODE	2190:16	2190:16	4	;
SIMPLE_DECL	2191:2	2191:17	3	char * mp ; mp = mode ;
VAR_DECL	2191:2	2191:8	4	char * mp ; mp = mode
TYPE	2191:2	2191:7	5	char *
TYPE_NAME	2191:2	2191:2	6	char
LEAF_NODE	2191:2	2191:2	7	char
POINTER	2191:7	2191:7	6	*
LEAF_NODE	2191:7	2191:7	7	*
NAME	2191:8	2191:8	5	mp
LEAF_NODE	2191:8	2191:8	6	mp
LEAF_NODE	0:0	0:0	5	;
INIT	2191:8	2191:8	5	mp = mode
ASSIGN	2191:8	2191:13	6	mp = mode
LVAL	2191:8	2191:8	7	mp
NAME	2191:8	2191:8	8	mp
LEAF_NODE	2191:8	2191:8	9	mp
ASSIGN_OP	2191:11	2191:11	7	=
LEAF_NODE	2191:11	2191:11	8	=
RVAL	2191:13	2191:13	7	mode
FIELD	2191:13	2191:13	8	mode
LEAF_NODE	2191:13	2191:13	9	mode
LEAF_NODE	2191:17	2191:17	4	;
SIMPLE_DECL	2194:2	2194:25	3	struct image_data image ;
VAR_DECL	2194:2	2194:20	4	struct image_data image
TYPE	2194:2	2194:2	5	struct image_data
TYPE_NAME	2194:2	2194:9	6	struct image_data
LEAF_NODE	2194:2	2194:2	7	struct
LEAF_NODE	2194:9	2194:9	7	image_data
NAME	2194:20	2194:20	5	image
LEAF_NODE	2194:20	2194:20	6	image
LEAF_NODE	2194:25	2194:25	4	;
SIMPLE_DECL	2195:2	2195:24	3	struct crop_mask crop ;
VAR_DECL	2195:2	2195:20	4	struct crop_mask crop
TYPE	2195:2	2195:2	5	struct crop_mask
TYPE_NAME	2195:2	2195:9	6	struct crop_mask
LEAF_NODE	2195:2	2195:2	7	struct
LEAF_NODE	2195:9	2195:9	7	crop_mask
NAME	2195:20	2195:20	5	crop
LEAF_NODE	2195:20	2195:20	6	crop
LEAF_NODE	2195:24	2195:24	4	;
SIMPLE_DECL	2196:2	2196:24	3	struct pagedef page ;
VAR_DECL	2196:2	2196:20	4	struct pagedef page
TYPE	2196:2	2196:2	5	struct pagedef
TYPE_NAME	2196:2	2196:9	6	struct pagedef
LEAF_NODE	2196:2	2196:2	7	struct
LEAF_NODE	2196:9	2196:9	7	pagedef
NAME	2196:20	2196:20	5	page
LEAF_NODE	2196:20	2196:20	6	page
LEAF_NODE	2196:24	2196:24	4	;
SIMPLE_DECL	2197:2	2197:42	3	struct pageseg [ MAX_SECTIONS ] sections ;
VAR_DECL	2197:2	2197:20	4	struct pageseg [ MAX_SECTIONS ] sections
TYPE	2197:2	2197:28	5	struct pageseg [ MAX_SECTIONS ]
TYPE_NAME	2197:2	2197:9	6	struct pageseg
LEAF_NODE	2197:2	2197:2	7	struct
LEAF_NODE	2197:9	2197:9	7	pageseg
TYPE_SUFFIX	2197:28	2197:41	6	[ MAX_SECTIONS ]
LEAF_NODE	2197:28	2197:28	7	[
FIELD	2197:29	2197:29	7	MAX_SECTIONS
LEAF_NODE	2197:29	2197:29	8	MAX_SECTIONS
LEAF_NODE	2197:41	2197:41	7	]
NAME	2197:20	2197:20	5	sections
LEAF_NODE	2197:20	2197:20	6	sections
LEAF_NODE	2197:42	2197:42	4	;
SIMPLE_DECL	2198:2	2198:43	3	struct buffinfo [ MAX_SECTIONS ] seg_buffs ;
VAR_DECL	2198:2	2198:20	4	struct buffinfo [ MAX_SECTIONS ] seg_buffs
TYPE	2198:2	2198:29	5	struct buffinfo [ MAX_SECTIONS ]
TYPE_NAME	2198:2	2198:9	6	struct buffinfo
LEAF_NODE	2198:2	2198:2	7	struct
LEAF_NODE	2198:9	2198:9	7	buffinfo
TYPE_SUFFIX	2198:29	2198:42	6	[ MAX_SECTIONS ]
LEAF_NODE	2198:29	2198:29	7	[
FIELD	2198:30	2198:30	7	MAX_SECTIONS
LEAF_NODE	2198:30	2198:30	8	MAX_SECTIONS
LEAF_NODE	2198:42	2198:42	7	]
NAME	2198:20	2198:20	5	seg_buffs
LEAF_NODE	2198:20	2198:20	6	seg_buffs
LEAF_NODE	2198:43	2198:43	4	;
SIMPLE_DECL	2199:2	2199:24	3	struct dump_opts dump ;
VAR_DECL	2199:2	2199:20	4	struct dump_opts dump
TYPE	2199:2	2199:2	5	struct dump_opts
TYPE_NAME	2199:2	2199:9	6	struct dump_opts
LEAF_NODE	2199:2	2199:2	7	struct
LEAF_NODE	2199:9	2199:9	7	dump_opts
NAME	2199:20	2199:20	5	dump
LEAF_NODE	2199:20	2199:20	6	dump
LEAF_NODE	2199:24	2199:24	4	;
SIMPLE_DECL	2200:2	2200:36	3	unsigned char * read_buff ; read_buff = NULL ;
VAR_DECL	2200:2	2200:17	4	unsigned char * read_buff ; read_buff = NULL
TYPE	2200:2	2200:16	5	unsigned char *
TYPE_NAME	2200:2	2200:11	6	unsigned char
LEAF_NODE	2200:2	2200:2	7	unsigned
LEAF_NODE	2200:11	2200:11	7	char
POINTER	2200:16	2200:16	6	*
LEAF_NODE	2200:16	2200:16	7	*
NAME	2200:17	2200:17	5	read_buff
LEAF_NODE	2200:17	2200:17	6	read_buff
LEAF_NODE	0:0	0:0	5	;
INIT	2200:17	2200:17	5	read_buff = NULL
ASSIGN	2200:17	2200:32	6	read_buff = NULL
LVAL	2200:17	2200:17	7	read_buff
NAME	2200:17	2200:17	8	read_buff
LEAF_NODE	2200:17	2200:17	9	read_buff
ASSIGN_OP	2200:30	2200:30	7	=
LEAF_NODE	2200:30	2200:30	8	=
RVAL	2200:32	2200:32	7	NULL
FIELD	2200:32	2200:32	8	NULL
LEAF_NODE	2200:32	2200:32	9	NULL
LEAF_NODE	2200:36	2200:36	4	;
SIMPLE_DECL	2201:2	2201:36	3	unsigned char * crop_buff ; crop_buff = NULL ;
VAR_DECL	2201:2	2201:17	4	unsigned char * crop_buff ; crop_buff = NULL
TYPE	2201:2	2201:16	5	unsigned char *
TYPE_NAME	2201:2	2201:11	6	unsigned char
LEAF_NODE	2201:2	2201:2	7	unsigned
LEAF_NODE	2201:11	2201:11	7	char
POINTER	2201:16	2201:16	6	*
LEAF_NODE	2201:16	2201:16	7	*
NAME	2201:17	2201:17	5	crop_buff
LEAF_NODE	2201:17	2201:17	6	crop_buff
LEAF_NODE	0:0	0:0	5	;
INIT	2201:17	2201:17	5	crop_buff = NULL
ASSIGN	2201:17	2201:32	6	crop_buff = NULL
LVAL	2201:17	2201:17	7	crop_buff
NAME	2201:17	2201:17	8	crop_buff
LEAF_NODE	2201:17	2201:17	9	crop_buff
ASSIGN_OP	2201:30	2201:30	7	=
LEAF_NODE	2201:30	2201:30	8	=
RVAL	2201:32	2201:32	7	NULL
FIELD	2201:32	2201:32	8	NULL
LEAF_NODE	2201:32	2201:32	9	NULL
LEAF_NODE	2201:36	2201:36	4	;
SIMPLE_DECL	2202:2	2202:36	3	unsigned char * sect_buff ; sect_buff = NULL ;
VAR_DECL	2202:2	2202:17	4	unsigned char * sect_buff ; sect_buff = NULL
TYPE	2202:2	2202:16	5	unsigned char *
TYPE_NAME	2202:2	2202:11	6	unsigned char
LEAF_NODE	2202:2	2202:2	7	unsigned
LEAF_NODE	2202:11	2202:11	7	char
POINTER	2202:16	2202:16	6	*
LEAF_NODE	2202:16	2202:16	7	*
NAME	2202:17	2202:17	5	sect_buff
LEAF_NODE	2202:17	2202:17	6	sect_buff
LEAF_NODE	0:0	0:0	5	;
INIT	2202:17	2202:17	5	sect_buff = NULL
ASSIGN	2202:17	2202:32	6	sect_buff = NULL
LVAL	2202:17	2202:17	7	sect_buff
NAME	2202:17	2202:17	8	sect_buff
LEAF_NODE	2202:17	2202:17	9	sect_buff
ASSIGN_OP	2202:30	2202:30	7	=
LEAF_NODE	2202:30	2202:30	8	=
RVAL	2202:32	2202:32	7	NULL
FIELD	2202:32	2202:32	8	NULL
LEAF_NODE	2202:32	2202:32	9	NULL
LEAF_NODE	2202:36	2202:36	4	;
SIMPLE_DECL	2203:2	2203:36	3	unsigned char * sect_src ; sect_src = NULL ;
VAR_DECL	2203:2	2203:17	4	unsigned char * sect_src ; sect_src = NULL
TYPE	2203:2	2203:16	5	unsigned char *
TYPE_NAME	2203:2	2203:11	6	unsigned char
LEAF_NODE	2203:2	2203:2	7	unsigned
LEAF_NODE	2203:11	2203:11	7	char
POINTER	2203:16	2203:16	6	*
LEAF_NODE	2203:16	2203:16	7	*
NAME	2203:17	2203:17	5	sect_src
LEAF_NODE	2203:17	2203:17	6	sect_src
LEAF_NODE	0:0	0:0	5	;
INIT	2203:17	2203:17	5	sect_src = NULL
ASSIGN	2203:17	2203:32	6	sect_src = NULL
LVAL	2203:17	2203:17	7	sect_src
NAME	2203:17	2203:17	8	sect_src
LEAF_NODE	2203:17	2203:17	9	sect_src
ASSIGN_OP	2203:30	2203:30	7	=
LEAF_NODE	2203:30	2203:30	8	=
RVAL	2203:32	2203:32	7	NULL
FIELD	2203:32	2203:32	8	NULL
LEAF_NODE	2203:32	2203:32	9	NULL
LEAF_NODE	2203:36	2203:36	4	;
SIMPLE_DECL	2204:2	2204:41	3	unsigned int [ MAX_IMAGES + 1 ] imagelist ;
VAR_DECL	2204:2	2204:16	4	unsigned int [ MAX_IMAGES + 1 ] imagelist
TYPE	2204:2	2204:25	5	unsigned int [ MAX_IMAGES + 1 ]
TYPE_NAME	2204:2	2204:11	6	unsigned int
LEAF_NODE	2204:2	2204:2	7	unsigned
LEAF_NODE	2204:11	2204:11	7	int
TYPE_SUFFIX	2204:25	2204:40	6	[ MAX_IMAGES + 1 ]
LEAF_NODE	2204:25	2204:25	7	[
FIELD	2204:26	2204:26	7	MAX_IMAGES
LEAF_NODE	2204:26	2204:26	8	MAX_IMAGES
LEAF_NODE	2204:37	2204:37	7	+
FIELD	2204:39	2204:39	7	1
LEAF_NODE	2204:39	2204:39	8	1
LEAF_NODE	2204:40	2204:40	7	]
NAME	2204:16	2204:16	5	imagelist
LEAF_NODE	2204:16	2204:16	6	imagelist
LEAF_NODE	2204:41	2204:41	4	;
SIMPLE_DECL	2205:2	2205:32	3	unsigned int image_count ; image_count = 0 ;
VAR_DECL	2205:2	2205:16	4	unsigned int image_count ; image_count = 0
TYPE	2205:2	2205:2	5	unsigned int
TYPE_NAME	2205:2	2205:11	6	unsigned int
LEAF_NODE	2205:2	2205:2	7	unsigned
LEAF_NODE	2205:11	2205:11	7	int
NAME	2205:16	2205:16	5	image_count
LEAF_NODE	2205:16	2205:16	6	image_count
LEAF_NODE	0:0	0:0	5	;
INIT	2205:16	2205:16	5	image_count = 0
ASSIGN	2205:16	2205:31	6	image_count = 0
LVAL	2205:16	2205:16	7	image_count
NAME	2205:16	2205:16	8	image_count
LEAF_NODE	2205:16	2205:16	9	image_count
ASSIGN_OP	2205:29	2205:29	7	=
LEAF_NODE	2205:29	2205:29	8	=
RVAL	2205:31	2205:31	7	0
FIELD	2205:31	2205:31	8	0
LEAF_NODE	2205:31	2205:31	9	0
LEAF_NODE	2205:32	2205:32	4	;
SIMPLE_DECL	2206:2	2206:32	3	unsigned int dump_images ; dump_images = 0 ;
VAR_DECL	2206:2	2206:16	4	unsigned int dump_images ; dump_images = 0
TYPE	2206:2	2206:2	5	unsigned int
TYPE_NAME	2206:2	2206:11	6	unsigned int
LEAF_NODE	2206:2	2206:2	7	unsigned
LEAF_NODE	2206:11	2206:11	7	int
NAME	2206:16	2206:16	5	dump_images
LEAF_NODE	2206:16	2206:16	6	dump_images
LEAF_NODE	0:0	0:0	5	;
INIT	2206:16	2206:16	5	dump_images = 0
ASSIGN	2206:16	2206:31	6	dump_images = 0
LVAL	2206:16	2206:16	7	dump_images
NAME	2206:16	2206:16	8	dump_images
LEAF_NODE	2206:16	2206:16	9	dump_images
ASSIGN_OP	2206:29	2206:29	7	=
LEAF_NODE	2206:29	2206:29	8	=
RVAL	2206:31	2206:31	7	0
FIELD	2206:31	2206:31	8	0
LEAF_NODE	2206:31	2206:31	9	0
LEAF_NODE	2206:32	2206:32	4	;
SIMPLE_DECL	2207:2	2207:32	3	unsigned int next_image ; next_image = 0 ;
VAR_DECL	2207:2	2207:16	4	unsigned int next_image ; next_image = 0
TYPE	2207:2	2207:2	5	unsigned int
TYPE_NAME	2207:2	2207:11	6	unsigned int
LEAF_NODE	2207:2	2207:2	7	unsigned
LEAF_NODE	2207:11	2207:11	7	int
NAME	2207:16	2207:16	5	next_image
LEAF_NODE	2207:16	2207:16	6	next_image
LEAF_NODE	0:0	0:0	5	;
INIT	2207:16	2207:16	5	next_image = 0
ASSIGN	2207:16	2207:31	6	next_image = 0
LVAL	2207:16	2207:16	7	next_image
NAME	2207:16	2207:16	8	next_image
LEAF_NODE	2207:16	2207:16	9	next_image
ASSIGN_OP	2207:29	2207:29	7	=
LEAF_NODE	2207:29	2207:29	8	=
RVAL	2207:31	2207:31	7	0
FIELD	2207:31	2207:31	8	0
LEAF_NODE	2207:31	2207:31	9	0
LEAF_NODE	2207:32	2207:32	4	;
SIMPLE_DECL	2208:2	2208:32	3	unsigned int next_page ; next_page = 0 ;
VAR_DECL	2208:2	2208:16	4	unsigned int next_page ; next_page = 0
TYPE	2208:2	2208:2	5	unsigned int
TYPE_NAME	2208:2	2208:11	6	unsigned int
LEAF_NODE	2208:2	2208:2	7	unsigned
LEAF_NODE	2208:11	2208:11	7	int
NAME	2208:16	2208:16	5	next_page
LEAF_NODE	2208:16	2208:16	6	next_page
LEAF_NODE	0:0	0:0	5	;
INIT	2208:16	2208:16	5	next_page = 0
ASSIGN	2208:16	2208:31	6	next_page = 0
LVAL	2208:16	2208:16	7	next_page
NAME	2208:16	2208:16	8	next_page
LEAF_NODE	2208:16	2208:16	9	next_page
ASSIGN_OP	2208:29	2208:29	7	=
LEAF_NODE	2208:29	2208:29	8	=
RVAL	2208:31	2208:31	7	0
FIELD	2208:31	2208:31	8	0
LEAF_NODE	2208:31	2208:31	9	0
LEAF_NODE	2208:32	2208:32	4	;
SIMPLE_DECL	2209:2	2209:32	3	unsigned int total_pages ; total_pages = 0 ;
VAR_DECL	2209:2	2209:16	4	unsigned int total_pages ; total_pages = 0
TYPE	2209:2	2209:2	5	unsigned int
TYPE_NAME	2209:2	2209:11	6	unsigned int
LEAF_NODE	2209:2	2209:2	7	unsigned
LEAF_NODE	2209:11	2209:11	7	int
NAME	2209:16	2209:16	5	total_pages
LEAF_NODE	2209:16	2209:16	6	total_pages
LEAF_NODE	0:0	0:0	5	;
INIT	2209:16	2209:16	5	total_pages = 0
ASSIGN	2209:16	2209:31	6	total_pages = 0
LVAL	2209:16	2209:16	7	total_pages
NAME	2209:16	2209:16	8	total_pages
LEAF_NODE	2209:16	2209:16	9	total_pages
ASSIGN_OP	2209:29	2209:29	7	=
LEAF_NODE	2209:29	2209:29	8	=
RVAL	2209:31	2209:31	7	0
FIELD	2209:31	2209:31	8	0
LEAF_NODE	2209:31	2209:31	9	0
LEAF_NODE	2209:32	2209:32	4	;
SIMPLE_DECL	2210:2	2210:32	3	unsigned int total_images ; total_images = 0 ;
VAR_DECL	2210:2	2210:16	4	unsigned int total_images ; total_images = 0
TYPE	2210:2	2210:2	5	unsigned int
TYPE_NAME	2210:2	2210:11	6	unsigned int
LEAF_NODE	2210:2	2210:2	7	unsigned
LEAF_NODE	2210:11	2210:11	7	int
NAME	2210:16	2210:16	5	total_images
LEAF_NODE	2210:16	2210:16	6	total_images
LEAF_NODE	0:0	0:0	5	;
INIT	2210:16	2210:16	5	total_images = 0
ASSIGN	2210:16	2210:31	6	total_images = 0
LVAL	2210:16	2210:16	7	total_images
NAME	2210:16	2210:16	8	total_images
LEAF_NODE	2210:16	2210:16	9	total_images
ASSIGN_OP	2210:29	2210:29	7	=
LEAF_NODE	2210:29	2210:29	8	=
RVAL	2210:31	2210:31	7	0
FIELD	2210:31	2210:31	8	0
LEAF_NODE	2210:31	2210:31	9	0
LEAF_NODE	2210:32	2210:32	4	;
SIMPLE_DECL	2211:2	2211:36	3	unsigned int end_of_input ; end_of_input = FALSE ;
VAR_DECL	2211:2	2211:16	4	unsigned int end_of_input ; end_of_input = FALSE
TYPE	2211:2	2211:2	5	unsigned int
TYPE_NAME	2211:2	2211:11	6	unsigned int
LEAF_NODE	2211:2	2211:2	7	unsigned
LEAF_NODE	2211:11	2211:11	7	int
NAME	2211:16	2211:16	5	end_of_input
LEAF_NODE	2211:16	2211:16	6	end_of_input
LEAF_NODE	0:0	0:0	5	;
INIT	2211:16	2211:16	5	end_of_input = FALSE
ASSIGN	2211:16	2211:31	6	end_of_input = FALSE
LVAL	2211:16	2211:16	7	end_of_input
NAME	2211:16	2211:16	8	end_of_input
LEAF_NODE	2211:16	2211:16	9	end_of_input
ASSIGN_OP	2211:29	2211:29	7	=
LEAF_NODE	2211:29	2211:29	8	=
RVAL	2211:31	2211:31	7	FALSE
FIELD	2211:31	2211:31	8	FALSE
LEAF_NODE	2211:31	2211:31	9	FALSE
LEAF_NODE	2211:36	2211:36	4	;
SIMPLE_DECL	2212:2	2212:12	3	int seg ;
VAR_DECL	2212:2	2212:9	4	int seg
TYPE	2212:2	2212:2	5	int
TYPE_NAME	2212:2	2212:2	6	int
LEAF_NODE	2212:2	2212:2	7	int
NAME	2212:9	2212:9	5	seg
LEAF_NODE	2212:9	2212:9	6	seg
LEAF_NODE	2212:12	2212:12	4	;
SIMPLE_DECL	2213:2	2213:15	3	size_t length ;
VAR_DECL	2213:2	2213:9	4	size_t length
TYPE	2213:2	2213:2	5	size_t
TYPE_NAME	2213:2	2213:2	6	size_t
LEAF_NODE	2213:2	2213:2	7	size_t
NAME	2213:9	2213:9	5	length
LEAF_NODE	2213:9	2213:9	6	length
LEAF_NODE	2213:15	2213:15	4	;
SIMPLE_DECL	2214:2	2214:37	3	char [ PATH_MAX + 16 ] temp_filename ;
VAR_DECL	2214:2	2214:9	4	char [ PATH_MAX + 16 ] temp_filename
TYPE	2214:2	2214:22	5	char [ PATH_MAX + 16 ]
TYPE_NAME	2214:2	2214:2	6	char
LEAF_NODE	2214:2	2214:2	7	char
TYPE_SUFFIX	2214:22	2214:36	6	[ PATH_MAX + 16 ]
LEAF_NODE	2214:22	2214:22	7	[
FIELD	2214:23	2214:23	7	PATH_MAX
LEAF_NODE	2214:23	2214:23	8	PATH_MAX
LEAF_NODE	2214:32	2214:32	7	+
FIELD	2214:34	2214:34	7	16
LEAF_NODE	2214:34	2214:34	8	16
LEAF_NODE	2214:36	2214:36	7	]
NAME	2214:9	2214:9	5	temp_filename
LEAF_NODE	2214:9	2214:9	6	temp_filename
LEAF_NODE	2214:37	2214:37	4	;
EXPR_STATEMENT	2216:2	2216:58	3	little_endian = * ( ( unsigned char * ) & little_endian ) & '1' ;
EXPR	2216:2	2216:2	4	little_endian = * ( ( unsigned char * ) & little_endian ) & '1'
ASSIGN	2216:2	2216:18	5	little_endian = * ( ( unsigned char * ) & little_endian ) & '1'
LVAL	2216:2	2216:2	6	little_endian
FIELD	2216:2	2216:2	7	little_endian
LEAF_NODE	2216:2	2216:2	8	little_endian
ASSIGN_OP	2216:16	2216:16	6	=
LEAF_NODE	2216:16	2216:16	7	=
RVAL	2216:18	2216:55	6	* ( ( unsigned char * ) & little_endian ) & '1'
UNARY_EXPR	2216:18	2216:51	7	* ( ( unsigned char * ) & little_endian )
UNARY_OPERATOR	2216:18	2216:18	8	*
LEAF_NODE	2216:18	2216:18	9	*
LEAF_NODE	2216:19	2216:19	8	(
LEAF_NODE	2216:20	2216:20	8	(
TYPE_NAME	2216:21	2216:30	8	unsigned char
LEAF_NODE	2216:21	2216:21	9	unsigned
LEAF_NODE	2216:30	2216:30	9	char
LEAF_NODE	2216:35	2216:35	8	*
LEAF_NODE	2216:36	2216:36	8	)
UNARY_EXPR	2216:37	2216:38	8	& little_endian
UNARY_OPERATOR	2216:37	2216:37	9	&
LEAF_NODE	2216:37	2216:37	10	&
FIELD	2216:38	2216:38	9	little_endian
LEAF_NODE	2216:38	2216:38	10	little_endian
LEAF_NODE	2216:51	2216:51	8	)
LEAF_NODE	2216:53	2216:53	7	&
FIELD	2216:55	2216:55	7	'1'
LEAF_NODE	2216:55	2216:55	8	'1'
LEAF_NODE	2216:58	2216:58	4	;
EXPR_STATEMENT	2218:2	2218:23	3	initImageData ( & image ) ;
EXPR	2218:2	2218:2	4	initImageData ( & image )
FUNCTION_CALL	2218:2	2218:22	5	initImageData ( & image )
CALLEE	2218:2	2218:2	6	initImageData
LEAF_NODE	2218:2	2218:2	7	initImageData
LEAF_NODE	2218:15	2218:15	6	(
ARGUMENT	2218:16	2218:16	6	& image
UNARY_EXPR	2218:16	2218:17	7	& image
UNARY_OPERATOR	2218:16	2218:16	8	&
LEAF_NODE	2218:16	2218:16	9	&
FIELD	2218:17	2218:17	8	image
LEAF_NODE	2218:17	2218:17	9	image
LEAF_NODE	2218:22	2218:22	6	)
LEAF_NODE	2218:23	2218:23	4	;
EXPR_STATEMENT	2219:2	2219:22	3	initCropMasks ( & crop ) ;
EXPR	2219:2	2219:2	4	initCropMasks ( & crop )
FUNCTION_CALL	2219:2	2219:21	5	initCropMasks ( & crop )
CALLEE	2219:2	2219:2	6	initCropMasks
LEAF_NODE	2219:2	2219:2	7	initCropMasks
LEAF_NODE	2219:15	2219:15	6	(
ARGUMENT	2219:16	2219:16	6	& crop
UNARY_EXPR	2219:16	2219:17	7	& crop
UNARY_OPERATOR	2219:16	2219:16	8	&
LEAF_NODE	2219:16	2219:16	9	&
FIELD	2219:17	2219:17	8	crop
LEAF_NODE	2219:17	2219:17	9	crop
LEAF_NODE	2219:21	2219:21	6	)
LEAF_NODE	2219:22	2219:22	4	;
EXPR_STATEMENT	2220:2	2220:43	3	initPageSetup ( & page , sections , seg_buffs ) ;
EXPR	2220:2	2220:2	4	initPageSetup ( & page , sections , seg_buffs )
FUNCTION_CALL	2220:2	2220:42	5	initPageSetup ( & page , sections , seg_buffs )
CALLEE	2220:2	2220:2	6	initPageSetup
LEAF_NODE	2220:2	2220:2	7	initPageSetup
LEAF_NODE	2220:15	2220:15	6	(
ARGUMENT	2220:16	2220:16	6	& page
UNARY_EXPR	2220:16	2220:17	7	& page
UNARY_OPERATOR	2220:16	2220:16	8	&
LEAF_NODE	2220:16	2220:16	9	&
FIELD	2220:17	2220:17	8	page
LEAF_NODE	2220:17	2220:17	9	page
LEAF_NODE	2220:21	2220:21	6	,
ARGUMENT	2220:23	2220:23	6	sections
FIELD	2220:23	2220:23	7	sections
LEAF_NODE	2220:23	2220:23	8	sections
LEAF_NODE	2220:31	2220:31	6	,
ARGUMENT	2220:33	2220:33	6	seg_buffs
FIELD	2220:33	2220:33	7	seg_buffs
LEAF_NODE	2220:33	2220:33	8	seg_buffs
LEAF_NODE	2220:42	2220:42	6	)
LEAF_NODE	2220:43	2220:43	4	;
EXPR_STATEMENT	2221:2	2221:24	3	initDumpOptions ( & dump ) ;
EXPR	2221:2	2221:2	4	initDumpOptions ( & dump )
FUNCTION_CALL	2221:2	2221:23	5	initDumpOptions ( & dump )
CALLEE	2221:2	2221:2	6	initDumpOptions
LEAF_NODE	2221:2	2221:2	7	initDumpOptions
LEAF_NODE	2221:17	2221:17	6	(
ARGUMENT	2221:18	2221:18	6	& dump
UNARY_EXPR	2221:18	2221:19	7	& dump
UNARY_OPERATOR	2221:18	2221:18	8	&
LEAF_NODE	2221:18	2221:18	9	&
FIELD	2221:19	2221:19	8	dump
LEAF_NODE	2221:19	2221:19	9	dump
LEAF_NODE	2221:23	2221:23	6	)
LEAF_NODE	2221:24	2221:24	4	;
EXPR_STATEMENT	2223:2	2225:62	3	process_command_opts ( argc , argv , mp , mode , & dirnum , & defconfig , & deffillorder , & deftilewidth , & deftilelength , & defrowsperstrip , & crop , & page , & dump , imagelist , & image_count ) ;
EXPR	2223:2	2223:2	4	process_command_opts ( argc , argv , mp , mode , & dirnum , & defconfig , & deffillorder , & deftilewidth , & deftilelength , & defrowsperstrip , & crop , & page , & dump , imagelist , & image_count )
FUNCTION_CALL	2223:2	2225:61	5	process_command_opts ( argc , argv , mp , mode , & dirnum , & defconfig , & deffillorder , & deftilewidth , & deftilelength , & defrowsperstrip , & crop , & page , & dump , imagelist , & image_count )
CALLEE	2223:2	2223:2	6	process_command_opts
LEAF_NODE	2223:2	2223:2	7	process_command_opts
LEAF_NODE	2223:23	2223:23	6	(
ARGUMENT	2223:24	2223:24	6	argc
FIELD	2223:24	2223:24	7	argc
LEAF_NODE	2223:24	2223:24	8	argc
LEAF_NODE	2223:28	2223:28	6	,
ARGUMENT	2223:30	2223:30	6	argv
FIELD	2223:30	2223:30	7	argv
LEAF_NODE	2223:30	2223:30	8	argv
LEAF_NODE	2223:34	2223:34	6	,
ARGUMENT	2223:36	2223:36	6	mp
FIELD	2223:36	2223:36	7	mp
LEAF_NODE	2223:36	2223:36	8	mp
LEAF_NODE	2223:38	2223:38	6	,
ARGUMENT	2223:40	2223:40	6	mode
FIELD	2223:40	2223:40	7	mode
LEAF_NODE	2223:40	2223:40	8	mode
LEAF_NODE	2223:44	2223:44	6	,
ARGUMENT	2223:46	2223:46	6	& dirnum
UNARY_EXPR	2223:46	2223:47	7	& dirnum
UNARY_OPERATOR	2223:46	2223:46	8	&
LEAF_NODE	2223:46	2223:46	9	&
FIELD	2223:47	2223:47	8	dirnum
LEAF_NODE	2223:47	2223:47	9	dirnum
LEAF_NODE	2223:53	2223:53	6	,
ARGUMENT	2223:55	2223:55	6	& defconfig
UNARY_EXPR	2223:55	2223:56	7	& defconfig
UNARY_OPERATOR	2223:55	2223:55	8	&
LEAF_NODE	2223:55	2223:55	9	&
FIELD	2223:56	2223:56	8	defconfig
LEAF_NODE	2223:56	2223:56	9	defconfig
LEAF_NODE	2223:65	2223:65	6	,
ARGUMENT	2224:24	2224:24	6	& deffillorder
UNARY_EXPR	2224:24	2224:25	7	& deffillorder
UNARY_OPERATOR	2224:24	2224:24	8	&
LEAF_NODE	2224:24	2224:24	9	&
FIELD	2224:25	2224:25	8	deffillorder
LEAF_NODE	2224:25	2224:25	9	deffillorder
LEAF_NODE	2224:37	2224:37	6	,
ARGUMENT	2224:39	2224:39	6	& deftilewidth
UNARY_EXPR	2224:39	2224:40	7	& deftilewidth
UNARY_OPERATOR	2224:39	2224:39	8	&
LEAF_NODE	2224:39	2224:39	9	&
FIELD	2224:40	2224:40	8	deftilewidth
LEAF_NODE	2224:40	2224:40	9	deftilewidth
LEAF_NODE	2224:52	2224:52	6	,
ARGUMENT	2224:54	2224:54	6	& deftilelength
UNARY_EXPR	2224:54	2224:55	7	& deftilelength
UNARY_OPERATOR	2224:54	2224:54	8	&
LEAF_NODE	2224:54	2224:54	9	&
FIELD	2224:55	2224:55	8	deftilelength
LEAF_NODE	2224:55	2224:55	9	deftilelength
LEAF_NODE	2224:68	2224:68	6	,
ARGUMENT	2224:70	2224:70	6	& defrowsperstrip
UNARY_EXPR	2224:70	2224:71	7	& defrowsperstrip
UNARY_OPERATOR	2224:70	2224:70	8	&
LEAF_NODE	2224:70	2224:70	9	&
FIELD	2224:71	2224:71	8	defrowsperstrip
LEAF_NODE	2224:71	2224:71	9	defrowsperstrip
LEAF_NODE	2224:86	2224:86	6	,
ARGUMENT	2225:17	2225:17	6	& crop
UNARY_EXPR	2225:17	2225:18	7	& crop
UNARY_OPERATOR	2225:17	2225:17	8	&
LEAF_NODE	2225:17	2225:17	9	&
FIELD	2225:18	2225:18	8	crop
LEAF_NODE	2225:18	2225:18	9	crop
LEAF_NODE	2225:22	2225:22	6	,
ARGUMENT	2225:24	2225:24	6	& page
UNARY_EXPR	2225:24	2225:25	7	& page
UNARY_OPERATOR	2225:24	2225:24	8	&
LEAF_NODE	2225:24	2225:24	9	&
FIELD	2225:25	2225:25	8	page
LEAF_NODE	2225:25	2225:25	9	page
LEAF_NODE	2225:29	2225:29	6	,
ARGUMENT	2225:31	2225:31	6	& dump
UNARY_EXPR	2225:31	2225:32	7	& dump
UNARY_OPERATOR	2225:31	2225:31	8	&
LEAF_NODE	2225:31	2225:31	9	&
FIELD	2225:32	2225:32	8	dump
LEAF_NODE	2225:32	2225:32	9	dump
LEAF_NODE	2225:36	2225:36	6	,
ARGUMENT	2225:38	2225:38	6	imagelist
FIELD	2225:38	2225:38	7	imagelist
LEAF_NODE	2225:38	2225:38	8	imagelist
LEAF_NODE	2225:47	2225:47	6	,
ARGUMENT	2225:49	2225:49	6	& image_count
UNARY_EXPR	2225:49	2225:50	7	& image_count
UNARY_OPERATOR	2225:49	2225:49	8	&
LEAF_NODE	2225:49	2225:49	9	&
FIELD	2225:50	2225:50	8	image_count
LEAF_NODE	2225:50	2225:50	9	image_count
LEAF_NODE	2225:61	2225:61	6	)
LEAF_NODE	2225:62	2225:62	4	;
SELECTION	2227:2	2228:4	3	
KEYWORD	2227:2	2227:2	4	if
LEAF_NODE	2227:2	2227:2	5	if
LEAF_NODE	2227:5	2227:5	4	(
CONDITION	2227:6	2227:6	4	argc - optind < 2
EXPR	2227:6	2227:22	5	argc - optind < 2
FIELD	2227:6	2227:6	6	argc
LEAF_NODE	2227:6	2227:6	7	argc
LEAF_NODE	2227:11	2227:11	6	-
FIELD	2227:13	2227:13	6	optind
LEAF_NODE	2227:13	2227:13	7	optind
REL_OPERATOR	2227:20	2227:20	6	<
LEAF_NODE	2227:20	2227:20	7	<
FIELD	2227:22	2227:22	6	2
LEAF_NODE	2227:22	2227:22	7	2
LEAF_NODE	2227:23	2227:23	4	)
STATEMENTS	2228:4	2228:4	4	
EXPR_STATEMENT	2228:4	2228:11	5	usage ( ) ;
EXPR	2228:4	2228:4	6	usage ( )
FUNCTION_CALL	2228:4	2228:10	7	usage ( )
CALLEE	2228:4	2228:4	8	usage
LEAF_NODE	2228:4	2228:4	9	usage
LEAF_NODE	2228:9	2228:9	8	(
LEAF_NODE	2228:10	2228:10	8	)
LEAF_NODE	2228:11	2228:11	6	;
SELECTION	2230:2	2231:4	3	
KEYWORD	2230:2	2230:2	4	if
LEAF_NODE	2230:2	2230:2	5	if
LEAF_NODE	2230:5	2230:5	4	(
CONDITION	2230:6	2230:6	4	( argc - optind ) == 2
EXPR	2230:6	2230:25	5	( argc - optind ) == 2
LEAF_NODE	2230:6	2230:6	6	(
FIELD	2230:7	2230:7	6	argc
LEAF_NODE	2230:7	2230:7	7	argc
LEAF_NODE	2230:12	2230:12	6	-
FIELD	2230:14	2230:14	6	optind
LEAF_NODE	2230:14	2230:14	7	optind
LEAF_NODE	2230:20	2230:20	6	)
EQ_OPERATOR	2230:22	2230:22	6	==
LEAF_NODE	2230:22	2230:22	7	==
FIELD	2230:25	2230:25	6	2
LEAF_NODE	2230:25	2230:25	7	2
LEAF_NODE	2230:26	2230:26	4	)
STATEMENTS	2231:4	2231:4	4	
EXPR_STATEMENT	2231:4	2231:16	5	pageNum = - 1 ;
EXPR	2231:4	2231:4	6	pageNum = - 1
ASSIGN	2231:4	2231:14	7	pageNum = - 1
LVAL	2231:4	2231:4	8	pageNum
FIELD	2231:4	2231:4	9	pageNum
LEAF_NODE	2231:4	2231:4	10	pageNum
ASSIGN_OP	2231:12	2231:12	8	=
LEAF_NODE	2231:12	2231:12	9	=
RVAL	2231:14	2231:14	8	- 1
UNARY_EXPR	2231:14	2231:15	9	- 1
UNARY_OPERATOR	2231:14	2231:14	10	-
LEAF_NODE	2231:14	2231:14	11	-
FIELD	2231:15	2231:15	10	1
LEAF_NODE	2231:15	2231:15	11	1
LEAF_NODE	2231:16	2231:16	6	;
SELECTION	2232:2	2233:4	3	
KEYWORD	2232:2	2232:2	4	else
LEAF_NODE	2232:2	2232:2	5	else
STATEMENTS	2233:4	2233:4	4	
EXPR_STATEMENT	2233:4	2233:20	5	total_images = 0 ;
EXPR	2233:4	2233:4	6	total_images = 0
ASSIGN	2233:4	2233:19	7	total_images = 0
LVAL	2233:4	2233:4	8	total_images
FIELD	2233:4	2233:4	9	total_images
LEAF_NODE	2233:4	2233:4	10	total_images
ASSIGN_OP	2233:17	2233:17	8	=
LEAF_NODE	2233:17	2233:17	9	=
RVAL	2233:19	2233:19	8	0
FIELD	2233:19	2233:19	9	0
LEAF_NODE	2233:19	2233:19	10	0
LEAF_NODE	2233:20	2233:20	6	;
ITERATION	2235:2	2236:4	3	
KEYWORD	2235:2	2235:2	4	while
LEAF_NODE	2235:2	2235:2	5	while
LEAF_NODE	2235:8	2235:8	4	(
CONDITION	2235:9	2235:9	4	optind < argc - 1
EXPR	2235:9	2235:25	5	optind < argc - 1
FIELD	2235:9	2235:9	6	optind
LEAF_NODE	2235:9	2235:9	7	optind
REL_OPERATOR	2235:16	2235:16	6	<
LEAF_NODE	2235:16	2235:16	7	<
FIELD	2235:18	2235:18	6	argc
LEAF_NODE	2235:18	2235:18	7	argc
LEAF_NODE	2235:23	2235:23	6	-
FIELD	2235:25	2235:25	6	1
LEAF_NODE	2235:25	2235:25	7	1
LEAF_NODE	2235:26	2235:26	4	)
STATEMENTS	2236:4	2451:4	4	
LEAF_NODE	2236:4	2236:4	5	{
STATEMENTS	2237:4	2450:4	5	
EXPR_STATEMENT	2237:4	2237:37	6	in = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	2237:4	2237:4	7	in = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	2237:4	2237:9	8	in = TIFFOpen ( argv [ optind ] , "r" )
LVAL	2237:4	2237:4	9	in
FIELD	2237:4	2237:4	10	in
LEAF_NODE	2237:4	2237:4	11	in
ASSIGN_OP	2237:7	2237:7	9	=
LEAF_NODE	2237:7	2237:7	10	=
RVAL	2237:9	2237:9	9	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	2237:9	2237:36	10	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	2237:9	2237:9	11	TIFFOpen
LEAF_NODE	2237:9	2237:9	12	TIFFOpen
LEAF_NODE	2237:18	2237:18	11	(
ARGUMENT	2237:19	2237:19	11	argv [ optind ]
FIELD	2237:19	2237:30	12	argv [ optind ]
LEAF_NODE	2237:19	2237:19	13	argv
LEAF_NODE	2237:23	2237:23	13	[
EXPR	2237:24	2237:24	13	optind
FIELD	2237:24	2237:24	14	optind
LEAF_NODE	2237:24	2237:24	15	optind
LEAF_NODE	2237:30	2237:30	13	]
LEAF_NODE	2237:31	2237:31	11	,
ARGUMENT	2237:33	2237:33	11	"r"
FIELD	2237:33	2237:33	12	"r"
LEAF_NODE	2237:33	2237:33	13	"r"
LEAF_NODE	2237:36	2237:36	11	)
LEAF_NODE	2237:37	2237:37	7	;
SELECTION	2238:4	2239:6	6	
KEYWORD	2238:4	2238:4	7	if
LEAF_NODE	2238:4	2238:4	8	if
LEAF_NODE	2238:7	2238:7	7	(
CONDITION	2238:8	2238:8	7	in == NULL
EXPR	2238:8	2238:14	8	in == NULL
FIELD	2238:8	2238:8	9	in
LEAF_NODE	2238:8	2238:8	10	in
EQ_OPERATOR	2238:11	2238:11	9	==
LEAF_NODE	2238:11	2238:11	10	==
FIELD	2238:14	2238:14	9	NULL
LEAF_NODE	2238:14	2238:14	10	NULL
LEAF_NODE	2238:18	2238:18	7	)
STATEMENTS	2239:6	2239:6	7	
JUMP_STATEMENT	2239:6	2239:17	8	return ( - 3 ) ;
KEYWORD	2239:6	2239:6	9	return
LEAF_NODE	2239:6	2239:6	10	return
DESTINATION	2239:13	2239:13	9	( - 3 )
EXPR	2239:13	2239:16	10	( - 3 )
LEAF_NODE	2239:13	2239:13	11	(
UNARY_EXPR	2239:14	2239:15	11	- 3
UNARY_OPERATOR	2239:14	2239:14	12	-
LEAF_NODE	2239:14	2239:14	13	-
FIELD	2239:15	2239:15	12	3
LEAF_NODE	2239:15	2239:15	13	3
LEAF_NODE	2239:16	2239:16	11	)
LEAF_NODE	2239:17	2239:17	9	;
EXPR_STATEMENT	2242:4	2242:46	6	total_images = TIFFNumberOfDirectories ( in ) ;
EXPR	2242:4	2242:4	7	total_images = TIFFNumberOfDirectories ( in )
ASSIGN	2242:4	2242:19	8	total_images = TIFFNumberOfDirectories ( in )
LVAL	2242:4	2242:4	9	total_images
FIELD	2242:4	2242:4	10	total_images
LEAF_NODE	2242:4	2242:4	11	total_images
ASSIGN_OP	2242:17	2242:17	9	=
LEAF_NODE	2242:17	2242:17	10	=
RVAL	2242:19	2242:19	9	TIFFNumberOfDirectories ( in )
FUNCTION_CALL	2242:19	2242:45	10	TIFFNumberOfDirectories ( in )
CALLEE	2242:19	2242:19	11	TIFFNumberOfDirectories
LEAF_NODE	2242:19	2242:19	12	TIFFNumberOfDirectories
LEAF_NODE	2242:42	2242:42	11	(
ARGUMENT	2242:43	2242:43	11	in
FIELD	2242:43	2242:43	12	in
LEAF_NODE	2242:43	2242:43	13	in
LEAF_NODE	2242:45	2242:45	11	)
LEAF_NODE	2242:46	2242:46	7	;
SELECTION	2243:4	2244:6	6	
KEYWORD	2243:4	2243:4	7	if
LEAF_NODE	2243:4	2243:4	8	if
LEAF_NODE	2243:7	2243:7	7	(
CONDITION	2243:8	2243:8	7	total_images > TIFF_DIR_MAX
EXPR	2243:8	2243:23	8	total_images > TIFF_DIR_MAX
FIELD	2243:8	2243:8	9	total_images
LEAF_NODE	2243:8	2243:8	10	total_images
REL_OPERATOR	2243:21	2243:21	9	>
LEAF_NODE	2243:21	2243:21	10	>
FIELD	2243:23	2243:23	9	TIFF_DIR_MAX
LEAF_NODE	2243:23	2243:23	10	TIFF_DIR_MAX
LEAF_NODE	2243:35	2243:35	7	)
STATEMENTS	2244:6	2249:6	7	
LEAF_NODE	2244:6	2244:6	8	{
STATEMENTS	2245:6	2248:6	8	
EXPR_STATEMENT	2245:6	2245:72	9	TIFFError ( TIFFFileName ( in ) , "File contains too many directories" ) ;
EXPR	2245:6	2245:6	10	TIFFError ( TIFFFileName ( in ) , "File contains too many directories" )
FUNCTION_CALL	2245:6	2245:71	11	TIFFError ( TIFFFileName ( in ) , "File contains too many directories" )
CALLEE	2245:6	2245:6	12	TIFFError
LEAF_NODE	2245:6	2245:6	13	TIFFError
LEAF_NODE	2245:16	2245:16	12	(
ARGUMENT	2245:17	2245:17	12	TIFFFileName ( in )
FUNCTION_CALL	2245:17	2245:32	13	TIFFFileName ( in )
CALLEE	2245:17	2245:17	14	TIFFFileName
LEAF_NODE	2245:17	2245:17	15	TIFFFileName
LEAF_NODE	2245:29	2245:29	14	(
ARGUMENT	2245:30	2245:30	14	in
FIELD	2245:30	2245:30	15	in
LEAF_NODE	2245:30	2245:30	16	in
LEAF_NODE	2245:32	2245:32	14	)
LEAF_NODE	2245:33	2245:33	12	,
ARGUMENT	2245:35	2245:35	12	"File contains too many directories"
FIELD	2245:35	2245:35	13	"File contains too many directories"
LEAF_NODE	2245:35	2245:35	14	"File contains too many directories"
LEAF_NODE	2245:71	2245:71	12	)
LEAF_NODE	2245:72	2245:72	10	;
SELECTION	2246:6	2247:8	9	
KEYWORD	2246:6	2246:6	10	if
LEAF_NODE	2246:6	2246:6	11	if
LEAF_NODE	2246:9	2246:9	10	(
CONDITION	2246:10	2246:10	10	out != NULL
EXPR	2246:10	2246:17	11	out != NULL
FIELD	2246:10	2246:10	12	out
LEAF_NODE	2246:10	2246:10	13	out
EQ_OPERATOR	2246:14	2246:14	12	!=
LEAF_NODE	2246:14	2246:14	13	!=
FIELD	2246:17	2246:17	12	NULL
LEAF_NODE	2246:17	2246:17	13	NULL
LEAF_NODE	2246:21	2246:21	10	)
STATEMENTS	2247:8	2247:8	10	
EXPR_STATEMENT	2247:8	2247:29	11	( void ) TIFFClose ( out ) ;
EXPR	2247:8	2247:15	12	( void ) TIFFClose ( out )
LEAF_NODE	2247:8	2247:8	13	(
TYPE_NAME	2247:9	2247:9	13	void
LEAF_NODE	2247:9	2247:9	14	void
LEAF_NODE	2247:13	2247:13	13	)
FUNCTION_CALL	2247:15	2247:28	13	TIFFClose ( out )
CALLEE	2247:15	2247:15	14	TIFFClose
LEAF_NODE	2247:15	2247:15	15	TIFFClose
LEAF_NODE	2247:24	2247:24	14	(
ARGUMENT	2247:25	2247:25	14	out
FIELD	2247:25	2247:25	15	out
LEAF_NODE	2247:25	2247:25	16	out
LEAF_NODE	2247:28	2247:28	14	)
LEAF_NODE	2247:29	2247:29	12	;
JUMP_STATEMENT	2248:6	2248:16	9	return ( 1 ) ;
KEYWORD	2248:6	2248:6	10	return
LEAF_NODE	2248:6	2248:6	11	return
DESTINATION	2248:13	2248:13	10	( 1 )
EXPR	2248:13	2248:15	11	( 1 )
LEAF_NODE	2248:13	2248:13	12	(
FIELD	2248:14	2248:14	12	1
LEAF_NODE	2248:14	2248:14	13	1
LEAF_NODE	2248:15	2248:15	12	)
LEAF_NODE	2248:16	2248:16	10	;
LEAF_NODE	2249:6	2249:6	8	}
SELECTION	2250:4	2251:6	6	
KEYWORD	2250:4	2250:4	7	if
LEAF_NODE	2250:4	2250:4	8	if
LEAF_NODE	2250:7	2250:7	7	(
CONDITION	2250:8	2250:8	7	image_count == 0
EXPR	2250:8	2250:23	8	image_count == 0
FIELD	2250:8	2250:8	9	image_count
LEAF_NODE	2250:8	2250:8	10	image_count
EQ_OPERATOR	2250:20	2250:20	9	==
LEAF_NODE	2250:20	2250:20	10	==
FIELD	2250:23	2250:23	9	0
LEAF_NODE	2250:23	2250:23	10	0
LEAF_NODE	2250:24	2250:24	7	)
STATEMENTS	2251:6	2254:6	7	
LEAF_NODE	2251:6	2251:6	8	{
STATEMENTS	2252:6	2253:6	8	
EXPR_STATEMENT	2252:6	2252:16	9	dirnum = 0 ;
EXPR	2252:6	2252:6	10	dirnum = 0
ASSIGN	2252:6	2252:15	11	dirnum = 0
LVAL	2252:6	2252:6	12	dirnum
FIELD	2252:6	2252:6	13	dirnum
LEAF_NODE	2252:6	2252:6	14	dirnum
ASSIGN_OP	2252:13	2252:13	12	=
LEAF_NODE	2252:13	2252:13	13	=
RVAL	2252:15	2252:15	12	0
FIELD	2252:15	2252:15	13	0
LEAF_NODE	2252:15	2252:15	14	0
LEAF_NODE	2252:16	2252:16	10	;
EXPR_STATEMENT	2253:6	2253:32	9	total_pages = total_images ;
EXPR	2253:6	2253:6	10	total_pages = total_images
ASSIGN	2253:6	2253:20	11	total_pages = total_images
LVAL	2253:6	2253:6	12	total_pages
FIELD	2253:6	2253:6	13	total_pages
LEAF_NODE	2253:6	2253:6	14	total_pages
ASSIGN_OP	2253:18	2253:18	12	=
LEAF_NODE	2253:18	2253:18	13	=
RVAL	2253:20	2253:20	12	total_images
FIELD	2253:20	2253:20	13	total_images
LEAF_NODE	2253:20	2253:20	14	total_images
LEAF_NODE	2253:32	2253:32	10	;
LEAF_NODE	2254:6	2254:6	8	}
SELECTION	2255:4	2256:6	6	
KEYWORD	2255:4	2255:4	7	else
LEAF_NODE	2255:4	2255:4	8	else
STATEMENTS	2256:6	2267:6	7	
LEAF_NODE	2256:6	2256:6	8	{
STATEMENTS	2257:6	2266:6	8	
EXPR_STATEMENT	2257:6	2257:50	9	dirnum = ( tdir_t ) ( imagelist [ next_image ] - 1 ) ;
EXPR	2257:6	2257:6	10	dirnum = ( tdir_t ) ( imagelist [ next_image ] - 1 )
ASSIGN	2257:6	2257:15	11	dirnum = ( tdir_t ) ( imagelist [ next_image ] - 1 )
LVAL	2257:6	2257:6	12	dirnum
FIELD	2257:6	2257:6	13	dirnum
LEAF_NODE	2257:6	2257:6	14	dirnum
ASSIGN_OP	2257:13	2257:13	12	=
LEAF_NODE	2257:13	2257:13	13	=
RVAL	2257:15	2257:49	12	( tdir_t ) ( imagelist [ next_image ] - 1 )
LEAF_NODE	2257:15	2257:15	13	(
TYPE_NAME	2257:16	2257:16	13	tdir_t
LEAF_NODE	2257:16	2257:16	14	tdir_t
LEAF_NODE	2257:22	2257:22	13	)
LEAF_NODE	2257:23	2257:23	13	(
FIELD	2257:24	2257:44	13	imagelist [ next_image ]
LEAF_NODE	2257:24	2257:24	14	imagelist
LEAF_NODE	2257:33	2257:33	14	[
EXPR	2257:34	2257:34	14	next_image
FIELD	2257:34	2257:34	15	next_image
LEAF_NODE	2257:34	2257:34	16	next_image
LEAF_NODE	2257:44	2257:44	14	]
LEAF_NODE	2257:46	2257:46	13	-
FIELD	2257:48	2257:48	13	1
LEAF_NODE	2257:48	2257:48	14	1
LEAF_NODE	2257:49	2257:49	13	)
LEAF_NODE	2257:50	2257:50	10	;
EXPR_STATEMENT	2258:6	2258:18	9	next_image ++ ;
EXPR	2258:6	2258:6	10	next_image ++
FIELD	2258:6	2258:16	11	next_image ++
LEAF_NODE	2258:6	2258:6	12	next_image
LEAF_NODE	2258:16	2258:16	12	++
LEAF_NODE	2258:18	2258:18	10	;
SELECTION	2263:6	2264:1	9	
KEYWORD	2263:6	2263:6	10	if
LEAF_NODE	2263:6	2263:6	11	if
LEAF_NODE	2263:9	2263:9	10	(
CONDITION	2263:10	2263:10	10	image_count > total_images
EXPR	2263:10	2263:25	11	image_count > total_images
FIELD	2263:10	2263:10	12	image_count
LEAF_NODE	2263:10	2263:10	13	image_count
REL_OPERATOR	2263:22	2263:22	12	>
LEAF_NODE	2263:22	2263:22	13	>
FIELD	2263:25	2263:25	12	total_images
LEAF_NODE	2263:25	2263:25	13	total_images
LEAF_NODE	2263:37	2263:37	10	)
STATEMENTS	2264:1	2264:1	10	
EXPR_STATEMENT	2264:1	2264:27	11	image_count = total_images ;
EXPR	2264:1	2264:1	12	image_count = total_images
ASSIGN	2264:1	2264:15	13	image_count = total_images
LVAL	2264:1	2264:1	14	image_count
FIELD	2264:1	2264:1	15	image_count
LEAF_NODE	2264:1	2264:1	16	image_count
ASSIGN_OP	2264:13	2264:13	14	=
LEAF_NODE	2264:13	2264:13	15	=
RVAL	2264:15	2264:15	14	total_images
FIELD	2264:15	2264:15	15	total_images
LEAF_NODE	2264:15	2264:15	16	total_images
LEAF_NODE	2264:27	2264:27	12	;
EXPR_STATEMENT	2266:6	2266:31	9	total_pages = image_count ;
EXPR	2266:6	2266:6	10	total_pages = image_count
ASSIGN	2266:6	2266:20	11	total_pages = image_count
LVAL	2266:6	2266:6	12	total_pages
FIELD	2266:6	2266:6	13	total_pages
LEAF_NODE	2266:6	2266:6	14	total_pages
ASSIGN_OP	2266:18	2266:18	12	=
LEAF_NODE	2266:18	2266:18	13	=
RVAL	2266:20	2266:20	12	image_count
FIELD	2266:20	2266:20	13	image_count
LEAF_NODE	2266:20	2266:20	14	image_count
LEAF_NODE	2266:31	2266:31	10	;
LEAF_NODE	2267:6	2267:6	8	}
SELECTION	2270:4	2271:6	6	
KEYWORD	2270:4	2270:4	7	if
LEAF_NODE	2270:4	2270:4	8	if
LEAF_NODE	2270:7	2270:7	7	(
CONDITION	2270:8	2270:8	7	dirnum == ( MAX_IMAGES - 1 )
EXPR	2270:8	2270:33	8	dirnum == ( MAX_IMAGES - 1 )
FIELD	2270:8	2270:8	9	dirnum
LEAF_NODE	2270:8	2270:8	10	dirnum
EQ_OPERATOR	2270:15	2270:15	9	==
LEAF_NODE	2270:15	2270:15	10	==
LEAF_NODE	2270:18	2270:18	9	(
FIELD	2270:19	2270:19	9	MAX_IMAGES
LEAF_NODE	2270:19	2270:19	10	MAX_IMAGES
LEAF_NODE	2270:30	2270:30	9	-
FIELD	2270:32	2270:32	9	1
LEAF_NODE	2270:32	2270:32	10	1
LEAF_NODE	2270:33	2270:33	9	)
LEAF_NODE	2270:34	2270:34	7	)
STATEMENTS	2271:6	2271:6	7	
EXPR_STATEMENT	2271:6	2271:31	8	dirnum = total_images - 1 ;
EXPR	2271:6	2271:6	9	dirnum = total_images - 1
ASSIGN	2271:6	2271:15	10	dirnum = total_images - 1
LVAL	2271:6	2271:6	11	dirnum
FIELD	2271:6	2271:6	12	dirnum
LEAF_NODE	2271:6	2271:6	13	dirnum
ASSIGN_OP	2271:13	2271:13	11	=
LEAF_NODE	2271:13	2271:13	12	=
RVAL	2271:15	2271:30	11	total_images - 1
FIELD	2271:15	2271:15	12	total_images
LEAF_NODE	2271:15	2271:15	13	total_images
LEAF_NODE	2271:28	2271:28	12	-
FIELD	2271:30	2271:30	12	1
LEAF_NODE	2271:30	2271:30	13	1
LEAF_NODE	2271:31	2271:31	9	;
LEAF_NODE	2273:4	2273:4	6	if
LEAF_NODE	2273:7	2273:7	6	(
LEAF_NODE	2273:8	2273:8	6	dirnum
LEAF_NODE	2273:15	2273:15	6	>
LEAF_NODE	2273:17	2273:17	6	(
LEAF_NODE	2273:18	2273:18	6	total_images
LEAF_NODE	2273:30	2273:30	6	)
LEAF_NODE	2273:31	2273:31	6	)
LEAF_NODE	2274:6	2274:6	6	{
STATEMENTS	2275:6	2280:6	6	
EXPR_STATEMENT	2275:6	2277:33	7	TIFFError ( TIFFFileName ( in ) , "Invalid image number %d, File contains only %d images" , ( int ) dirnum + 1 , total_images ) ;
EXPR	2275:6	2275:6	8	TIFFError ( TIFFFileName ( in ) , "Invalid image number %d, File contains only %d images" , ( int ) dirnum + 1 , total_images )
FUNCTION_CALL	2275:6	2277:32	9	TIFFError ( TIFFFileName ( in ) , "Invalid image number %d, File contains only %d images" , ( int ) dirnum + 1 , total_images )
CALLEE	2275:6	2275:6	10	TIFFError
LEAF_NODE	2275:6	2275:6	11	TIFFError
LEAF_NODE	2275:16	2275:16	10	(
ARGUMENT	2275:17	2275:17	10	TIFFFileName ( in )
FUNCTION_CALL	2275:17	2275:32	11	TIFFFileName ( in )
CALLEE	2275:17	2275:17	12	TIFFFileName
LEAF_NODE	2275:17	2275:17	13	TIFFFileName
LEAF_NODE	2275:29	2275:29	12	(
ARGUMENT	2275:30	2275:30	12	in
FIELD	2275:30	2275:30	13	in
LEAF_NODE	2275:30	2275:30	14	in
LEAF_NODE	2275:32	2275:32	12	)
LEAF_NODE	2275:33	2275:33	10	,
ARGUMENT	2276:6	2276:6	10	"Invalid image number %d, File contains only %d images"
FIELD	2276:6	2276:6	11	"Invalid image number %d, File contains only %d images"
LEAF_NODE	2276:6	2276:6	12	"Invalid image number %d, File contains only %d images"
LEAF_NODE	2276:61	2276:61	10	,
ARGUMENT	2277:3	2277:17	10	( int ) dirnum + 1
LEAF_NODE	2277:3	2277:3	11	(
TYPE_NAME	2277:4	2277:4	11	int
LEAF_NODE	2277:4	2277:4	12	int
LEAF_NODE	2277:7	2277:7	11	)
FIELD	2277:8	2277:8	11	dirnum
LEAF_NODE	2277:8	2277:8	12	dirnum
LEAF_NODE	2277:15	2277:15	11	+
FIELD	2277:17	2277:17	11	1
LEAF_NODE	2277:17	2277:17	12	1
LEAF_NODE	2277:18	2277:18	10	,
ARGUMENT	2277:20	2277:20	10	total_images
FIELD	2277:20	2277:20	11	total_images
LEAF_NODE	2277:20	2277:20	12	total_images
LEAF_NODE	2277:32	2277:32	10	)
LEAF_NODE	2277:33	2277:33	8	;
SELECTION	2278:6	2279:8	7	
KEYWORD	2278:6	2278:6	8	if
LEAF_NODE	2278:6	2278:6	9	if
LEAF_NODE	2278:9	2278:9	8	(
CONDITION	2278:10	2278:10	8	out != NULL
EXPR	2278:10	2278:17	9	out != NULL
FIELD	2278:10	2278:10	10	out
LEAF_NODE	2278:10	2278:10	11	out
EQ_OPERATOR	2278:14	2278:14	10	!=
LEAF_NODE	2278:14	2278:14	11	!=
FIELD	2278:17	2278:17	10	NULL
LEAF_NODE	2278:17	2278:17	11	NULL
LEAF_NODE	2278:21	2278:21	8	)
STATEMENTS	2279:8	2279:8	8	
EXPR_STATEMENT	2279:8	2279:29	9	( void ) TIFFClose ( out ) ;
EXPR	2279:8	2279:15	10	( void ) TIFFClose ( out )
LEAF_NODE	2279:8	2279:8	11	(
TYPE_NAME	2279:9	2279:9	11	void
LEAF_NODE	2279:9	2279:9	12	void
LEAF_NODE	2279:13	2279:13	11	)
FUNCTION_CALL	2279:15	2279:28	11	TIFFClose ( out )
CALLEE	2279:15	2279:15	12	TIFFClose
LEAF_NODE	2279:15	2279:15	13	TIFFClose
LEAF_NODE	2279:24	2279:24	12	(
ARGUMENT	2279:25	2279:25	12	out
FIELD	2279:25	2279:25	13	out
LEAF_NODE	2279:25	2279:25	14	out
LEAF_NODE	2279:28	2279:28	12	)
LEAF_NODE	2279:29	2279:29	10	;
JUMP_STATEMENT	2280:6	2280:16	7	return ( 1 ) ;
KEYWORD	2280:6	2280:6	8	return
LEAF_NODE	2280:6	2280:6	9	return
DESTINATION	2280:13	2280:13	8	( 1 )
EXPR	2280:13	2280:15	9	( 1 )
LEAF_NODE	2280:13	2280:13	10	(
FIELD	2280:14	2280:14	10	1
LEAF_NODE	2280:14	2280:14	11	1
LEAF_NODE	2280:15	2280:15	10	)
LEAF_NODE	2280:16	2280:16	8	;
LEAF_NODE	2281:6	2281:6	6	}
SELECTION	2283:4	2284:6	6	
KEYWORD	2283:4	2283:4	7	if
LEAF_NODE	2283:4	2283:4	8	if
LEAF_NODE	2283:7	2283:7	7	(
CONDITION	2283:8	2283:8	7	dirnum != 0 && ! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
EXPR	2283:8	2283:8	8	dirnum != 0 && ! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
AND	2283:8	2283:23	9	dirnum != 0 && ! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
EXPR	2283:8	2283:18	10	dirnum != 0
FIELD	2283:8	2283:8	11	dirnum
LEAF_NODE	2283:8	2283:8	12	dirnum
EQ_OPERATOR	2283:15	2283:15	11	!=
LEAF_NODE	2283:15	2283:15	12	!=
FIELD	2283:18	2283:18	11	0
LEAF_NODE	2283:18	2283:18	12	0
LEAF_NODE	2283:20	2283:20	10	&&
EXPR	2283:23	2283:23	10	! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
UNARY_EXPR	2283:23	2283:24	11	! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
UNARY_OPERATOR	2283:23	2283:23	12	!
LEAF_NODE	2283:23	2283:23	13	!
FUNCTION_CALL	2283:24	2283:59	12	TIFFSetDirectory ( in , ( tdir_t ) dirnum )
CALLEE	2283:24	2283:24	13	TIFFSetDirectory
LEAF_NODE	2283:24	2283:24	14	TIFFSetDirectory
LEAF_NODE	2283:40	2283:40	13	(
ARGUMENT	2283:41	2283:41	13	in
FIELD	2283:41	2283:41	14	in
LEAF_NODE	2283:41	2283:41	15	in
LEAF_NODE	2283:43	2283:43	13	,
ARGUMENT	2283:45	2283:53	13	( tdir_t ) dirnum
LEAF_NODE	2283:45	2283:45	14	(
TYPE_NAME	2283:46	2283:46	14	tdir_t
LEAF_NODE	2283:46	2283:46	15	tdir_t
LEAF_NODE	2283:52	2283:52	14	)
FIELD	2283:53	2283:53	14	dirnum
LEAF_NODE	2283:53	2283:53	15	dirnum
LEAF_NODE	2283:59	2283:59	13	)
LEAF_NODE	2283:60	2283:60	7	)
STATEMENTS	2284:6	2289:6	7	
LEAF_NODE	2284:6	2284:6	8	{
STATEMENTS	2285:6	2288:6	8	
EXPR_STATEMENT	2285:6	2285:77	9	TIFFError ( TIFFFileName ( in ) , "Error, setting subdirectory at %d" , dirnum ) ;
EXPR	2285:6	2285:6	10	TIFFError ( TIFFFileName ( in ) , "Error, setting subdirectory at %d" , dirnum )
FUNCTION_CALL	2285:6	2285:76	11	TIFFError ( TIFFFileName ( in ) , "Error, setting subdirectory at %d" , dirnum )
CALLEE	2285:6	2285:6	12	TIFFError
LEAF_NODE	2285:6	2285:6	13	TIFFError
LEAF_NODE	2285:15	2285:15	12	(
ARGUMENT	2285:16	2285:16	12	TIFFFileName ( in )
FUNCTION_CALL	2285:16	2285:31	13	TIFFFileName ( in )
CALLEE	2285:16	2285:16	14	TIFFFileName
LEAF_NODE	2285:16	2285:16	15	TIFFFileName
LEAF_NODE	2285:28	2285:28	14	(
ARGUMENT	2285:29	2285:29	14	in
FIELD	2285:29	2285:29	15	in
LEAF_NODE	2285:29	2285:29	16	in
LEAF_NODE	2285:31	2285:31	14	)
LEAF_NODE	2285:32	2285:32	12	,
ARGUMENT	2285:33	2285:33	12	"Error, setting subdirectory at %d"
FIELD	2285:33	2285:33	13	"Error, setting subdirectory at %d"
LEAF_NODE	2285:33	2285:33	14	"Error, setting subdirectory at %d"
LEAF_NODE	2285:68	2285:68	12	,
ARGUMENT	2285:70	2285:70	12	dirnum
FIELD	2285:70	2285:70	13	dirnum
LEAF_NODE	2285:70	2285:70	14	dirnum
LEAF_NODE	2285:76	2285:76	12	)
LEAF_NODE	2285:77	2285:77	10	;
SELECTION	2286:6	2287:8	9	
KEYWORD	2286:6	2286:6	10	if
LEAF_NODE	2286:6	2286:6	11	if
LEAF_NODE	2286:9	2286:9	10	(
CONDITION	2286:10	2286:10	10	out != NULL
EXPR	2286:10	2286:17	11	out != NULL
FIELD	2286:10	2286:10	12	out
LEAF_NODE	2286:10	2286:10	13	out
EQ_OPERATOR	2286:14	2286:14	12	!=
LEAF_NODE	2286:14	2286:14	13	!=
FIELD	2286:17	2286:17	12	NULL
LEAF_NODE	2286:17	2286:17	13	NULL
LEAF_NODE	2286:21	2286:21	10	)
STATEMENTS	2287:8	2287:8	10	
EXPR_STATEMENT	2287:8	2287:29	11	( void ) TIFFClose ( out ) ;
EXPR	2287:8	2287:15	12	( void ) TIFFClose ( out )
LEAF_NODE	2287:8	2287:8	13	(
TYPE_NAME	2287:9	2287:9	13	void
LEAF_NODE	2287:9	2287:9	14	void
LEAF_NODE	2287:13	2287:13	13	)
FUNCTION_CALL	2287:15	2287:28	13	TIFFClose ( out )
CALLEE	2287:15	2287:15	14	TIFFClose
LEAF_NODE	2287:15	2287:15	15	TIFFClose
LEAF_NODE	2287:24	2287:24	14	(
ARGUMENT	2287:25	2287:25	14	out
FIELD	2287:25	2287:25	15	out
LEAF_NODE	2287:25	2287:25	16	out
LEAF_NODE	2287:28	2287:28	14	)
LEAF_NODE	2287:29	2287:29	12	;
JUMP_STATEMENT	2288:6	2288:16	9	return ( 1 ) ;
KEYWORD	2288:6	2288:6	10	return
LEAF_NODE	2288:6	2288:6	11	return
DESTINATION	2288:13	2288:13	10	( 1 )
EXPR	2288:13	2288:15	11	( 1 )
LEAF_NODE	2288:13	2288:13	12	(
FIELD	2288:14	2288:14	12	1
LEAF_NODE	2288:14	2288:14	13	1
LEAF_NODE	2288:15	2288:15	12	)
LEAF_NODE	2288:16	2288:16	10	;
LEAF_NODE	2289:6	2289:6	8	}
EXPR_STATEMENT	2291:4	2291:24	6	end_of_input = FALSE ;
EXPR	2291:4	2291:4	7	end_of_input = FALSE
ASSIGN	2291:4	2291:19	8	end_of_input = FALSE
LVAL	2291:4	2291:4	9	end_of_input
FIELD	2291:4	2291:4	10	end_of_input
LEAF_NODE	2291:4	2291:4	11	end_of_input
ASSIGN_OP	2291:17	2291:17	9	=
LEAF_NODE	2291:17	2291:17	10	=
RVAL	2291:19	2291:19	9	FALSE
FIELD	2291:19	2291:19	10	FALSE
LEAF_NODE	2291:19	2291:19	11	FALSE
LEAF_NODE	2291:24	2291:24	7	;
ITERATION	2292:4	2293:6	6	
KEYWORD	2292:4	2292:4	7	while
LEAF_NODE	2292:4	2292:4	8	while
LEAF_NODE	2292:10	2292:10	7	(
CONDITION	2292:11	2292:11	7	end_of_input == FALSE
EXPR	2292:11	2292:27	8	end_of_input == FALSE
FIELD	2292:11	2292:11	9	end_of_input
LEAF_NODE	2292:11	2292:11	10	end_of_input
EQ_OPERATOR	2292:24	2292:24	9	==
LEAF_NODE	2292:24	2292:24	10	==
FIELD	2292:27	2292:27	9	FALSE
LEAF_NODE	2292:27	2292:27	10	FALSE
LEAF_NODE	2292:32	2292:32	7	)
STATEMENTS	2293:6	2448:6	7	
LEAF_NODE	2293:6	2293:6	8	{
STATEMENTS	2294:6	2446:6	8	
EXPR_STATEMENT	2294:6	2294:24	9	config = defconfig ;
EXPR	2294:6	2294:6	10	config = defconfig
ASSIGN	2294:6	2294:15	11	config = defconfig
LVAL	2294:6	2294:6	12	config
FIELD	2294:6	2294:6	13	config
LEAF_NODE	2294:6	2294:6	14	config
ASSIGN_OP	2294:13	2294:13	12	=
LEAF_NODE	2294:13	2294:13	13	=
RVAL	2294:15	2294:15	12	defconfig
FIELD	2294:15	2294:15	13	defconfig
LEAF_NODE	2294:15	2294:15	14	defconfig
LEAF_NODE	2294:24	2294:24	10	;
EXPR_STATEMENT	2295:6	2295:34	9	compression = defcompression ;
EXPR	2295:6	2295:6	10	compression = defcompression
ASSIGN	2295:6	2295:20	11	compression = defcompression
LVAL	2295:6	2295:6	12	compression
FIELD	2295:6	2295:6	13	compression
LEAF_NODE	2295:6	2295:6	14	compression
ASSIGN_OP	2295:18	2295:18	12	=
LEAF_NODE	2295:18	2295:18	13	=
RVAL	2295:20	2295:20	12	defcompression
FIELD	2295:20	2295:20	13	defcompression
LEAF_NODE	2295:20	2295:20	14	defcompression
LEAF_NODE	2295:34	2295:34	10	;
EXPR_STATEMENT	2296:6	2296:30	9	predictor = defpredictor ;
EXPR	2296:6	2296:6	10	predictor = defpredictor
ASSIGN	2296:6	2296:18	11	predictor = defpredictor
LVAL	2296:6	2296:6	12	predictor
FIELD	2296:6	2296:6	13	predictor
LEAF_NODE	2296:6	2296:6	14	predictor
ASSIGN_OP	2296:16	2296:16	12	=
LEAF_NODE	2296:16	2296:16	13	=
RVAL	2296:18	2296:18	12	defpredictor
FIELD	2296:18	2296:18	13	defpredictor
LEAF_NODE	2296:18	2296:18	14	defpredictor
LEAF_NODE	2296:30	2296:30	10	;
EXPR_STATEMENT	2297:6	2297:30	9	fillorder = deffillorder ;
EXPR	2297:6	2297:6	10	fillorder = deffillorder
ASSIGN	2297:6	2297:18	11	fillorder = deffillorder
LVAL	2297:6	2297:6	12	fillorder
FIELD	2297:6	2297:6	13	fillorder
LEAF_NODE	2297:6	2297:6	14	fillorder
ASSIGN_OP	2297:16	2297:16	12	=
LEAF_NODE	2297:16	2297:16	13	=
RVAL	2297:18	2297:18	12	deffillorder
FIELD	2297:18	2297:18	13	deffillorder
LEAF_NODE	2297:18	2297:18	14	deffillorder
LEAF_NODE	2297:30	2297:30	10	;
EXPR_STATEMENT	2298:6	2298:36	9	rowsperstrip = defrowsperstrip ;
EXPR	2298:6	2298:6	10	rowsperstrip = defrowsperstrip
ASSIGN	2298:6	2298:21	11	rowsperstrip = defrowsperstrip
LVAL	2298:6	2298:6	12	rowsperstrip
FIELD	2298:6	2298:6	13	rowsperstrip
LEAF_NODE	2298:6	2298:6	14	rowsperstrip
ASSIGN_OP	2298:19	2298:19	12	=
LEAF_NODE	2298:19	2298:19	13	=
RVAL	2298:21	2298:21	12	defrowsperstrip
FIELD	2298:21	2298:21	13	defrowsperstrip
LEAF_NODE	2298:21	2298:21	14	defrowsperstrip
LEAF_NODE	2298:36	2298:36	10	;
EXPR_STATEMENT	2299:6	2299:30	9	tilewidth = deftilewidth ;
EXPR	2299:6	2299:6	10	tilewidth = deftilewidth
ASSIGN	2299:6	2299:18	11	tilewidth = deftilewidth
LVAL	2299:6	2299:6	12	tilewidth
FIELD	2299:6	2299:6	13	tilewidth
LEAF_NODE	2299:6	2299:6	14	tilewidth
ASSIGN_OP	2299:16	2299:16	12	=
LEAF_NODE	2299:16	2299:16	13	=
RVAL	2299:18	2299:18	12	deftilewidth
FIELD	2299:18	2299:18	13	deftilewidth
LEAF_NODE	2299:18	2299:18	14	deftilewidth
LEAF_NODE	2299:30	2299:30	10	;
EXPR_STATEMENT	2300:6	2300:32	9	tilelength = deftilelength ;
EXPR	2300:6	2300:6	10	tilelength = deftilelength
ASSIGN	2300:6	2300:19	11	tilelength = deftilelength
LVAL	2300:6	2300:6	12	tilelength
FIELD	2300:6	2300:6	13	tilelength
LEAF_NODE	2300:6	2300:6	14	tilelength
ASSIGN_OP	2300:17	2300:17	12	=
LEAF_NODE	2300:17	2300:17	13	=
RVAL	2300:19	2300:19	12	deftilelength
FIELD	2300:19	2300:19	13	deftilelength
LEAF_NODE	2300:19	2300:19	14	deftilelength
LEAF_NODE	2300:32	2300:32	10	;
EXPR_STATEMENT	2301:6	2301:24	9	g3opts = defg3opts ;
EXPR	2301:6	2301:6	10	g3opts = defg3opts
ASSIGN	2301:6	2301:15	11	g3opts = defg3opts
LVAL	2301:6	2301:6	12	g3opts
FIELD	2301:6	2301:6	13	g3opts
LEAF_NODE	2301:6	2301:6	14	g3opts
ASSIGN_OP	2301:13	2301:13	12	=
LEAF_NODE	2301:13	2301:13	13	=
RVAL	2301:15	2301:15	12	defg3opts
FIELD	2301:15	2301:15	13	defg3opts
LEAF_NODE	2301:15	2301:15	14	defg3opts
LEAF_NODE	2301:24	2301:24	10	;
SELECTION	2303:6	2304:8	9	
KEYWORD	2303:6	2303:6	10	if
LEAF_NODE	2303:6	2303:6	11	if
LEAF_NODE	2303:9	2303:9	10	(
CONDITION	2303:10	2303:10	10	dump . format != DUMP_NONE
EXPR	2303:10	2303:25	11	dump . format != DUMP_NONE
FIELD	2303:10	2303:15	12	dump . format
LEAF_NODE	2303:10	2303:10	13	dump
LEAF_NODE	2303:14	2303:14	13	.
LEAF_NODE	2303:15	2303:15	13	format
EQ_OPERATOR	2303:22	2303:22	12	!=
LEAF_NODE	2303:22	2303:22	13	!=
FIELD	2303:25	2303:25	12	DUMP_NONE
LEAF_NODE	2303:25	2303:25	13	DUMP_NONE
LEAF_NODE	2303:34	2303:34	10	)
STATEMENTS	2304:8	2345:8	10	
LEAF_NODE	2304:8	2304:8	11	{
STATEMENTS	2306:1	2327:8	11	
EXPR_STATEMENT	2306:1	2306:14	12	dump_images ++ ;
EXPR	2306:1	2306:1	13	dump_images ++
FIELD	2306:1	2306:12	14	dump_images ++
LEAF_NODE	2306:1	2306:1	15	dump_images
LEAF_NODE	2306:12	2306:12	15	++
LEAF_NODE	2306:14	2306:14	13	;
EXPR_STATEMENT	2307:8	2307:40	12	length = strlen ( dump . infilename ) ;
EXPR	2307:8	2307:8	13	length = strlen ( dump . infilename )
ASSIGN	2307:8	2307:17	14	length = strlen ( dump . infilename )
LVAL	2307:8	2307:8	15	length
FIELD	2307:8	2307:8	16	length
LEAF_NODE	2307:8	2307:8	17	length
ASSIGN_OP	2307:15	2307:15	15	=
LEAF_NODE	2307:15	2307:15	16	=
RVAL	2307:17	2307:17	15	strlen ( dump . infilename )
FUNCTION_CALL	2307:17	2307:39	16	strlen ( dump . infilename )
CALLEE	2307:17	2307:17	17	strlen
LEAF_NODE	2307:17	2307:17	18	strlen
LEAF_NODE	2307:23	2307:23	17	(
ARGUMENT	2307:24	2307:24	17	dump . infilename
FIELD	2307:24	2307:29	18	dump . infilename
LEAF_NODE	2307:24	2307:24	19	dump
LEAF_NODE	2307:28	2307:28	19	.
LEAF_NODE	2307:29	2307:29	19	infilename
LEAF_NODE	2307:39	2307:39	17	)
LEAF_NODE	2307:40	2307:40	13	;
SELECTION	2308:8	2309:10	12	
KEYWORD	2308:8	2308:8	13	if
LEAF_NODE	2308:8	2308:8	14	if
LEAF_NODE	2308:11	2308:11	13	(
CONDITION	2308:12	2308:12	13	length > 0
EXPR	2308:12	2308:21	14	length > 0
FIELD	2308:12	2308:12	15	length
LEAF_NODE	2308:12	2308:12	16	length
REL_OPERATOR	2308:19	2308:19	15	>
LEAF_NODE	2308:19	2308:19	16	>
FIELD	2308:21	2308:21	15	0
LEAF_NODE	2308:21	2308:21	16	0
LEAF_NODE	2308:22	2308:22	13	)
STATEMENTS	2309:10	2325:10	13	
LEAF_NODE	2309:10	2309:10	14	{
STATEMENTS	2310:10	2323:10	14	
SELECTION	2310:10	2311:12	15	
KEYWORD	2310:10	2310:10	16	if
LEAF_NODE	2310:10	2310:10	17	if
LEAF_NODE	2310:13	2310:13	16	(
CONDITION	2310:14	2310:14	16	dump . infile != NULL
EXPR	2310:14	2310:29	17	dump . infile != NULL
FIELD	2310:14	2310:19	18	dump . infile
LEAF_NODE	2310:14	2310:14	19	dump
LEAF_NODE	2310:18	2310:18	19	.
LEAF_NODE	2310:19	2310:19	19	infile
EQ_OPERATOR	2310:26	2310:26	18	!=
LEAF_NODE	2310:26	2310:26	19	!=
FIELD	2310:29	2310:29	18	NULL
LEAF_NODE	2310:29	2310:29	19	NULL
LEAF_NODE	2310:33	2310:33	16	)
STATEMENTS	2311:12	2311:12	16	
EXPR_STATEMENT	2311:12	2311:32	17	fclose ( dump . infile ) ;
EXPR	2311:12	2311:12	18	fclose ( dump . infile )
FUNCTION_CALL	2311:12	2311:31	19	fclose ( dump . infile )
CALLEE	2311:12	2311:12	20	fclose
LEAF_NODE	2311:12	2311:12	21	fclose
LEAF_NODE	2311:19	2311:19	20	(
ARGUMENT	2311:20	2311:20	20	dump . infile
FIELD	2311:20	2311:25	21	dump . infile
LEAF_NODE	2311:20	2311:20	22	dump
LEAF_NODE	2311:24	2311:24	22	.
LEAF_NODE	2311:25	2311:25	22	infile
LEAF_NODE	2311:31	2311:31	20	)
LEAF_NODE	2311:32	2311:32	18	;
EXPR_STATEMENT	2315:10	2317:61	15	snprintf ( temp_filename , sizeof ( temp_filename ) , "%s-read-%03d.%s" , dump . infilename , dump_images , ( dump . format == DUMP_TEXT ) ? "txt" : "raw" ) ;
EXPR	2315:10	2315:10	16	snprintf ( temp_filename , sizeof ( temp_filename ) , "%s-read-%03d.%s" , dump . infilename , dump_images , ( dump . format == DUMP_TEXT ) ? "txt" : "raw" )
FUNCTION_CALL	2315:10	2317:60	17	snprintf ( temp_filename , sizeof ( temp_filename ) , "%s-read-%03d.%s" , dump . infilename , dump_images , ( dump . format == DUMP_TEXT ) ? "txt" : "raw" )
CALLEE	2315:10	2315:10	18	snprintf
LEAF_NODE	2315:10	2315:10	19	snprintf
LEAF_NODE	2315:18	2315:18	18	(
ARGUMENT	2315:19	2315:19	18	temp_filename
FIELD	2315:19	2315:19	19	temp_filename
LEAF_NODE	2315:19	2315:19	20	temp_filename
LEAF_NODE	2315:32	2315:32	18	,
ARGUMENT	2315:34	2315:34	18	sizeof ( temp_filename )
FUNCTION_CALL	2315:34	2315:54	19	sizeof ( temp_filename )
CALLEE	2315:34	2315:34	20	sizeof
LEAF_NODE	2315:34	2315:34	21	sizeof
LEAF_NODE	2315:40	2315:40	20	(
ARGUMENT	2315:41	2315:41	20	temp_filename
FIELD	2315:41	2315:41	21	temp_filename
LEAF_NODE	2315:41	2315:41	22	temp_filename
LEAF_NODE	2315:54	2315:54	20	)
LEAF_NODE	2315:55	2315:55	18	,
ARGUMENT	2315:57	2315:57	18	"%s-read-%03d.%s"
FIELD	2315:57	2315:57	19	"%s-read-%03d.%s"
LEAF_NODE	2315:57	2315:57	20	"%s-read-%03d.%s"
LEAF_NODE	2315:74	2315:74	18	,
ARGUMENT	2316:5	2316:5	18	dump . infilename
FIELD	2316:5	2316:10	19	dump . infilename
LEAF_NODE	2316:5	2316:5	20	dump
LEAF_NODE	2316:9	2316:9	20	.
LEAF_NODE	2316:10	2316:10	20	infilename
LEAF_NODE	2316:20	2316:20	18	,
ARGUMENT	2316:22	2316:22	18	dump_images
FIELD	2316:22	2316:22	19	dump_images
LEAF_NODE	2316:22	2316:22	20	dump_images
LEAF_NODE	2316:33	2316:33	18	,
ARGUMENT	2317:18	2317:18	18	( dump . format == DUMP_TEXT ) ? "txt" : "raw"
COND_EXPR	2317:18	2317:55	19	( dump . format == DUMP_TEXT ) ? "txt" : "raw"
CONDITION	2317:18	2317:43	20	( dump . format == DUMP_TEXT )
LEAF_NODE	2317:18	2317:18	21	(
FIELD	2317:19	2317:24	21	dump . format
LEAF_NODE	2317:19	2317:19	22	dump
LEAF_NODE	2317:23	2317:23	22	.
LEAF_NODE	2317:24	2317:24	22	format
EQ_OPERATOR	2317:31	2317:31	21	==
LEAF_NODE	2317:31	2317:31	22	==
FIELD	2317:34	2317:34	21	DUMP_TEXT
LEAF_NODE	2317:34	2317:34	22	DUMP_TEXT
LEAF_NODE	2317:43	2317:43	21	)
LEAF_NODE	2317:45	2317:45	20	?
EXPR	2317:47	2317:47	20	"txt"
FIELD	2317:47	2317:47	21	"txt"
LEAF_NODE	2317:47	2317:47	22	"txt"
LEAF_NODE	2317:53	2317:53	20	:
FIELD	2317:55	2317:55	20	"raw"
LEAF_NODE	2317:55	2317:55	21	"raw"
LEAF_NODE	2317:60	2317:60	18	)
LEAF_NODE	2317:61	2317:61	16	;
SELECTION	2318:10	2319:12	15	
KEYWORD	2318:10	2318:10	16	if
LEAF_NODE	2318:10	2318:10	17	if
LEAF_NODE	2318:13	2318:13	16	(
CONDITION	2318:14	2318:14	16	( dump . infile = fopen ( temp_filename , dump . mode ) ) == NULL
EXPR	2318:14	2318:65	17	( dump . infile = fopen ( temp_filename , dump . mode ) ) == NULL
LEAF_NODE	2318:14	2318:14	18	(
ASSIGN	2318:15	2318:29	18	dump . infile = fopen ( temp_filename , dump . mode )
LVAL	2318:15	2318:15	19	dump . infile
FIELD	2318:15	2318:20	20	dump . infile
LEAF_NODE	2318:15	2318:15	21	dump
LEAF_NODE	2318:19	2318:19	21	.
LEAF_NODE	2318:20	2318:20	21	infile
ASSIGN_OP	2318:27	2318:27	19	=
LEAF_NODE	2318:27	2318:27	20	=
RVAL	2318:29	2318:29	19	fopen ( temp_filename , dump . mode )
FUNCTION_CALL	2318:29	2318:59	20	fopen ( temp_filename , dump . mode )
CALLEE	2318:29	2318:29	21	fopen
LEAF_NODE	2318:29	2318:29	22	fopen
LEAF_NODE	2318:34	2318:34	21	(
ARGUMENT	2318:35	2318:35	21	temp_filename
FIELD	2318:35	2318:35	22	temp_filename
LEAF_NODE	2318:35	2318:35	23	temp_filename
LEAF_NODE	2318:48	2318:48	21	,
ARGUMENT	2318:50	2318:50	21	dump . mode
FIELD	2318:50	2318:55	22	dump . mode
LEAF_NODE	2318:50	2318:50	23	dump
LEAF_NODE	2318:54	2318:54	23	.
LEAF_NODE	2318:55	2318:55	23	mode
LEAF_NODE	2318:59	2318:59	21	)
LEAF_NODE	2318:60	2318:60	18	)
EQ_OPERATOR	2318:62	2318:62	18	==
LEAF_NODE	2318:62	2318:62	19	==
FIELD	2318:65	2318:65	18	NULL
LEAF_NODE	2318:65	2318:65	19	NULL
LEAF_NODE	2318:69	2318:69	16	)
STATEMENTS	2319:12	2322:12	16	
LEAF_NODE	2319:12	2319:12	17	{
STATEMENTS	2320:5	2321:5	17	
EXPR_STATEMENT	2320:5	2320:76	18	TIFFError ( "Unable to open dump file for writing" , "%s" , temp_filename ) ;
EXPR	2320:5	2320:5	19	TIFFError ( "Unable to open dump file for writing" , "%s" , temp_filename )
FUNCTION_CALL	2320:5	2320:75	20	TIFFError ( "Unable to open dump file for writing" , "%s" , temp_filename )
CALLEE	2320:5	2320:5	21	TIFFError
LEAF_NODE	2320:5	2320:5	22	TIFFError
LEAF_NODE	2320:15	2320:15	21	(
ARGUMENT	2320:16	2320:16	21	"Unable to open dump file for writing"
FIELD	2320:16	2320:16	22	"Unable to open dump file for writing"
LEAF_NODE	2320:16	2320:16	23	"Unable to open dump file for writing"
LEAF_NODE	2320:54	2320:54	21	,
ARGUMENT	2320:56	2320:56	21	"%s"
FIELD	2320:56	2320:56	22	"%s"
LEAF_NODE	2320:56	2320:56	23	"%s"
LEAF_NODE	2320:60	2320:60	21	,
ARGUMENT	2320:62	2320:62	21	temp_filename
FIELD	2320:62	2320:62	22	temp_filename
LEAF_NODE	2320:62	2320:62	23	temp_filename
LEAF_NODE	2320:75	2320:75	21	)
LEAF_NODE	2320:76	2320:76	19	;
EXPR_STATEMENT	2321:5	2321:14	18	exit ( - 1 ) ;
EXPR	2321:5	2321:5	19	exit ( - 1 )
FUNCTION_CALL	2321:5	2321:13	20	exit ( - 1 )
CALLEE	2321:5	2321:5	21	exit
LEAF_NODE	2321:5	2321:5	22	exit
LEAF_NODE	2321:10	2321:10	21	(
ARGUMENT	2321:11	2321:11	21	- 1
UNARY_EXPR	2321:11	2321:12	22	- 1
UNARY_OPERATOR	2321:11	2321:11	23	-
LEAF_NODE	2321:11	2321:11	24	-
FIELD	2321:12	2321:12	23	1
LEAF_NODE	2321:12	2321:12	24	1
LEAF_NODE	2321:13	2321:13	21	)
LEAF_NODE	2321:14	2321:14	19	;
LEAF_NODE	2322:12	2322:12	17	}
EXPR_STATEMENT	2323:10	2324:50	15	dump_info ( dump . infile , dump . format , "Reading image" , "%d from %s" , dump_images , TIFFFileName ( in ) ) ;
EXPR	2323:10	2323:10	16	dump_info ( dump . infile , dump . format , "Reading image" , "%d from %s" , dump_images , TIFFFileName ( in ) )
FUNCTION_CALL	2323:10	2324:49	17	dump_info ( dump . infile , dump . format , "Reading image" , "%d from %s" , dump_images , TIFFFileName ( in ) )
CALLEE	2323:10	2323:10	18	dump_info
LEAF_NODE	2323:10	2323:10	19	dump_info
LEAF_NODE	2323:19	2323:19	18	(
ARGUMENT	2323:20	2323:20	18	dump . infile
FIELD	2323:20	2323:25	19	dump . infile
LEAF_NODE	2323:20	2323:20	20	dump
LEAF_NODE	2323:24	2323:24	20	.
LEAF_NODE	2323:25	2323:25	20	infile
LEAF_NODE	2323:31	2323:31	18	,
ARGUMENT	2323:33	2323:33	18	dump . format
FIELD	2323:33	2323:38	19	dump . format
LEAF_NODE	2323:33	2323:33	20	dump
LEAF_NODE	2323:37	2323:37	20	.
LEAF_NODE	2323:38	2323:38	20	format
LEAF_NODE	2323:44	2323:44	18	,
ARGUMENT	2323:46	2323:46	18	"Reading image"
FIELD	2323:46	2323:46	19	"Reading image"
LEAF_NODE	2323:46	2323:46	20	"Reading image"
LEAF_NODE	2323:61	2323:61	18	,
ARGUMENT	2323:62	2323:62	18	"%d from %s"
FIELD	2323:62	2323:62	19	"%d from %s"
LEAF_NODE	2323:62	2323:62	20	"%d from %s"
LEAF_NODE	2323:74	2323:74	18	,
ARGUMENT	2324:20	2324:20	18	dump_images
FIELD	2324:20	2324:20	19	dump_images
LEAF_NODE	2324:20	2324:20	20	dump_images
LEAF_NODE	2324:31	2324:31	18	,
ARGUMENT	2324:33	2324:33	18	TIFFFileName ( in )
FUNCTION_CALL	2324:33	2324:48	19	TIFFFileName ( in )
CALLEE	2324:33	2324:33	20	TIFFFileName
LEAF_NODE	2324:33	2324:33	21	TIFFFileName
LEAF_NODE	2324:45	2324:45	20	(
ARGUMENT	2324:46	2324:46	20	in
FIELD	2324:46	2324:46	21	in
LEAF_NODE	2324:46	2324:46	22	in
LEAF_NODE	2324:48	2324:48	20	)
LEAF_NODE	2324:49	2324:49	18	)
LEAF_NODE	2324:50	2324:50	16	;
LEAF_NODE	2325:10	2325:10	14	}
EXPR_STATEMENT	2326:8	2326:41	12	length = strlen ( dump . outfilename ) ;
EXPR	2326:8	2326:8	13	length = strlen ( dump . outfilename )
ASSIGN	2326:8	2326:17	14	length = strlen ( dump . outfilename )
LVAL	2326:8	2326:8	15	length
FIELD	2326:8	2326:8	16	length
LEAF_NODE	2326:8	2326:8	17	length
ASSIGN_OP	2326:15	2326:15	15	=
LEAF_NODE	2326:15	2326:15	16	=
RVAL	2326:17	2326:17	15	strlen ( dump . outfilename )
FUNCTION_CALL	2326:17	2326:40	16	strlen ( dump . outfilename )
CALLEE	2326:17	2326:17	17	strlen
LEAF_NODE	2326:17	2326:17	18	strlen
LEAF_NODE	2326:23	2326:23	17	(
ARGUMENT	2326:24	2326:24	17	dump . outfilename
FIELD	2326:24	2326:29	18	dump . outfilename
LEAF_NODE	2326:24	2326:24	19	dump
LEAF_NODE	2326:28	2326:28	19	.
LEAF_NODE	2326:29	2326:29	19	outfilename
LEAF_NODE	2326:40	2326:40	17	)
LEAF_NODE	2326:41	2326:41	13	;
SELECTION	2327:8	2328:10	12	
KEYWORD	2327:8	2327:8	13	if
LEAF_NODE	2327:8	2327:8	14	if
LEAF_NODE	2327:11	2327:11	13	(
CONDITION	2327:12	2327:12	13	length > 0
EXPR	2327:12	2327:21	14	length > 0
FIELD	2327:12	2327:12	15	length
LEAF_NODE	2327:12	2327:12	16	length
REL_OPERATOR	2327:19	2327:19	15	>
LEAF_NODE	2327:19	2327:19	16	>
FIELD	2327:21	2327:21	15	0
LEAF_NODE	2327:21	2327:21	16	0
LEAF_NODE	2327:22	2327:22	13	)
STATEMENTS	2328:10	2344:10	13	
LEAF_NODE	2328:10	2328:10	14	{
STATEMENTS	2329:10	2342:10	14	
SELECTION	2329:10	2330:12	15	
KEYWORD	2329:10	2329:10	16	if
LEAF_NODE	2329:10	2329:10	17	if
LEAF_NODE	2329:13	2329:13	16	(
CONDITION	2329:14	2329:14	16	dump . outfile != NULL
EXPR	2329:14	2329:30	17	dump . outfile != NULL
FIELD	2329:14	2329:19	18	dump . outfile
LEAF_NODE	2329:14	2329:14	19	dump
LEAF_NODE	2329:18	2329:18	19	.
LEAF_NODE	2329:19	2329:19	19	outfile
EQ_OPERATOR	2329:27	2329:27	18	!=
LEAF_NODE	2329:27	2329:27	19	!=
FIELD	2329:30	2329:30	18	NULL
LEAF_NODE	2329:30	2329:30	19	NULL
LEAF_NODE	2329:34	2329:34	16	)
STATEMENTS	2330:12	2330:12	16	
EXPR_STATEMENT	2330:12	2330:33	17	fclose ( dump . outfile ) ;
EXPR	2330:12	2330:12	18	fclose ( dump . outfile )
FUNCTION_CALL	2330:12	2330:32	19	fclose ( dump . outfile )
CALLEE	2330:12	2330:12	20	fclose
LEAF_NODE	2330:12	2330:12	21	fclose
LEAF_NODE	2330:19	2330:19	20	(
ARGUMENT	2330:20	2330:20	20	dump . outfile
FIELD	2330:20	2330:25	21	dump . outfile
LEAF_NODE	2330:20	2330:20	22	dump
LEAF_NODE	2330:24	2330:24	22	.
LEAF_NODE	2330:25	2330:25	22	outfile
LEAF_NODE	2330:32	2330:32	20	)
LEAF_NODE	2330:33	2330:33	18	;
EXPR_STATEMENT	2334:10	2336:61	15	snprintf ( temp_filename , sizeof ( temp_filename ) , "%s-write-%03d.%s" , dump . outfilename , dump_images , ( dump . format == DUMP_TEXT ) ? "txt" : "raw" ) ;
EXPR	2334:10	2334:10	16	snprintf ( temp_filename , sizeof ( temp_filename ) , "%s-write-%03d.%s" , dump . outfilename , dump_images , ( dump . format == DUMP_TEXT ) ? "txt" : "raw" )
FUNCTION_CALL	2334:10	2336:60	17	snprintf ( temp_filename , sizeof ( temp_filename ) , "%s-write-%03d.%s" , dump . outfilename , dump_images , ( dump . format == DUMP_TEXT ) ? "txt" : "raw" )
CALLEE	2334:10	2334:10	18	snprintf
LEAF_NODE	2334:10	2334:10	19	snprintf
LEAF_NODE	2334:18	2334:18	18	(
ARGUMENT	2334:19	2334:19	18	temp_filename
FIELD	2334:19	2334:19	19	temp_filename
LEAF_NODE	2334:19	2334:19	20	temp_filename
LEAF_NODE	2334:32	2334:32	18	,
ARGUMENT	2334:34	2334:34	18	sizeof ( temp_filename )
FUNCTION_CALL	2334:34	2334:54	19	sizeof ( temp_filename )
CALLEE	2334:34	2334:34	20	sizeof
LEAF_NODE	2334:34	2334:34	21	sizeof
LEAF_NODE	2334:40	2334:40	20	(
ARGUMENT	2334:41	2334:41	20	temp_filename
FIELD	2334:41	2334:41	21	temp_filename
LEAF_NODE	2334:41	2334:41	22	temp_filename
LEAF_NODE	2334:54	2334:54	20	)
LEAF_NODE	2334:55	2334:55	18	,
ARGUMENT	2334:57	2334:57	18	"%s-write-%03d.%s"
FIELD	2334:57	2334:57	19	"%s-write-%03d.%s"
LEAF_NODE	2334:57	2334:57	20	"%s-write-%03d.%s"
LEAF_NODE	2334:75	2334:75	18	,
ARGUMENT	2335:5	2335:5	18	dump . outfilename
FIELD	2335:5	2335:10	19	dump . outfilename
LEAF_NODE	2335:5	2335:5	20	dump
LEAF_NODE	2335:9	2335:9	20	.
LEAF_NODE	2335:10	2335:10	20	outfilename
LEAF_NODE	2335:21	2335:21	18	,
ARGUMENT	2335:23	2335:23	18	dump_images
FIELD	2335:23	2335:23	19	dump_images
LEAF_NODE	2335:23	2335:23	20	dump_images
LEAF_NODE	2335:34	2335:34	18	,
ARGUMENT	2336:18	2336:18	18	( dump . format == DUMP_TEXT ) ? "txt" : "raw"
COND_EXPR	2336:18	2336:55	19	( dump . format == DUMP_TEXT ) ? "txt" : "raw"
CONDITION	2336:18	2336:43	20	( dump . format == DUMP_TEXT )
LEAF_NODE	2336:18	2336:18	21	(
FIELD	2336:19	2336:24	21	dump . format
LEAF_NODE	2336:19	2336:19	22	dump
LEAF_NODE	2336:23	2336:23	22	.
LEAF_NODE	2336:24	2336:24	22	format
EQ_OPERATOR	2336:31	2336:31	21	==
LEAF_NODE	2336:31	2336:31	22	==
FIELD	2336:34	2336:34	21	DUMP_TEXT
LEAF_NODE	2336:34	2336:34	22	DUMP_TEXT
LEAF_NODE	2336:43	2336:43	21	)
LEAF_NODE	2336:45	2336:45	20	?
EXPR	2336:47	2336:47	20	"txt"
FIELD	2336:47	2336:47	21	"txt"
LEAF_NODE	2336:47	2336:47	22	"txt"
LEAF_NODE	2336:53	2336:53	20	:
FIELD	2336:55	2336:55	20	"raw"
LEAF_NODE	2336:55	2336:55	21	"raw"
LEAF_NODE	2336:60	2336:60	18	)
LEAF_NODE	2336:61	2336:61	16	;
SELECTION	2337:10	2338:12	15	
KEYWORD	2337:10	2337:10	16	if
LEAF_NODE	2337:10	2337:10	17	if
LEAF_NODE	2337:13	2337:13	16	(
CONDITION	2337:14	2337:14	16	( dump . outfile = fopen ( temp_filename , dump . mode ) ) == NULL
EXPR	2337:14	2337:66	17	( dump . outfile = fopen ( temp_filename , dump . mode ) ) == NULL
LEAF_NODE	2337:14	2337:14	18	(
ASSIGN	2337:15	2337:30	18	dump . outfile = fopen ( temp_filename , dump . mode )
LVAL	2337:15	2337:15	19	dump . outfile
FIELD	2337:15	2337:20	20	dump . outfile
LEAF_NODE	2337:15	2337:15	21	dump
LEAF_NODE	2337:19	2337:19	21	.
LEAF_NODE	2337:20	2337:20	21	outfile
ASSIGN_OP	2337:28	2337:28	19	=
LEAF_NODE	2337:28	2337:28	20	=
RVAL	2337:30	2337:30	19	fopen ( temp_filename , dump . mode )
FUNCTION_CALL	2337:30	2337:60	20	fopen ( temp_filename , dump . mode )
CALLEE	2337:30	2337:30	21	fopen
LEAF_NODE	2337:30	2337:30	22	fopen
LEAF_NODE	2337:35	2337:35	21	(
ARGUMENT	2337:36	2337:36	21	temp_filename
FIELD	2337:36	2337:36	22	temp_filename
LEAF_NODE	2337:36	2337:36	23	temp_filename
LEAF_NODE	2337:49	2337:49	21	,
ARGUMENT	2337:51	2337:51	21	dump . mode
FIELD	2337:51	2337:56	22	dump . mode
LEAF_NODE	2337:51	2337:51	23	dump
LEAF_NODE	2337:55	2337:55	23	.
LEAF_NODE	2337:56	2337:56	23	mode
LEAF_NODE	2337:60	2337:60	21	)
LEAF_NODE	2337:61	2337:61	18	)
EQ_OPERATOR	2337:63	2337:63	18	==
LEAF_NODE	2337:63	2337:63	19	==
FIELD	2337:66	2337:66	18	NULL
LEAF_NODE	2337:66	2337:66	19	NULL
LEAF_NODE	2337:70	2337:70	16	)
STATEMENTS	2338:12	2341:12	16	
LEAF_NODE	2338:12	2338:12	17	{
STATEMENTS	2339:7	2340:5	17	
EXPR_STATEMENT	2339:7	2339:78	18	TIFFError ( "Unable to open dump file for writing" , "%s" , temp_filename ) ;
EXPR	2339:7	2339:7	19	TIFFError ( "Unable to open dump file for writing" , "%s" , temp_filename )
FUNCTION_CALL	2339:7	2339:77	20	TIFFError ( "Unable to open dump file for writing" , "%s" , temp_filename )
CALLEE	2339:7	2339:7	21	TIFFError
LEAF_NODE	2339:7	2339:7	22	TIFFError
LEAF_NODE	2339:17	2339:17	21	(
ARGUMENT	2339:18	2339:18	21	"Unable to open dump file for writing"
FIELD	2339:18	2339:18	22	"Unable to open dump file for writing"
LEAF_NODE	2339:18	2339:18	23	"Unable to open dump file for writing"
LEAF_NODE	2339:56	2339:56	21	,
ARGUMENT	2339:58	2339:58	21	"%s"
FIELD	2339:58	2339:58	22	"%s"
LEAF_NODE	2339:58	2339:58	23	"%s"
LEAF_NODE	2339:62	2339:62	21	,
ARGUMENT	2339:64	2339:64	21	temp_filename
FIELD	2339:64	2339:64	22	temp_filename
LEAF_NODE	2339:64	2339:64	23	temp_filename
LEAF_NODE	2339:77	2339:77	21	)
LEAF_NODE	2339:78	2339:78	19	;
EXPR_STATEMENT	2340:5	2340:14	18	exit ( - 1 ) ;
EXPR	2340:5	2340:5	19	exit ( - 1 )
FUNCTION_CALL	2340:5	2340:13	20	exit ( - 1 )
CALLEE	2340:5	2340:5	21	exit
LEAF_NODE	2340:5	2340:5	22	exit
LEAF_NODE	2340:10	2340:10	21	(
ARGUMENT	2340:11	2340:11	21	- 1
UNARY_EXPR	2340:11	2340:12	22	- 1
UNARY_OPERATOR	2340:11	2340:11	23	-
LEAF_NODE	2340:11	2340:11	24	-
FIELD	2340:12	2340:12	23	1
LEAF_NODE	2340:12	2340:12	24	1
LEAF_NODE	2340:13	2340:13	21	)
LEAF_NODE	2340:14	2340:14	19	;
LEAF_NODE	2341:12	2341:12	17	}
EXPR_STATEMENT	2342:10	2343:50	15	dump_info ( dump . outfile , dump . format , "Writing image" , "%d from %s" , dump_images , TIFFFileName ( in ) ) ;
EXPR	2342:10	2342:10	16	dump_info ( dump . outfile , dump . format , "Writing image" , "%d from %s" , dump_images , TIFFFileName ( in ) )
FUNCTION_CALL	2342:10	2343:49	17	dump_info ( dump . outfile , dump . format , "Writing image" , "%d from %s" , dump_images , TIFFFileName ( in ) )
CALLEE	2342:10	2342:10	18	dump_info
LEAF_NODE	2342:10	2342:10	19	dump_info
LEAF_NODE	2342:19	2342:19	18	(
ARGUMENT	2342:20	2342:20	18	dump . outfile
FIELD	2342:20	2342:25	19	dump . outfile
LEAF_NODE	2342:20	2342:20	20	dump
LEAF_NODE	2342:24	2342:24	20	.
LEAF_NODE	2342:25	2342:25	20	outfile
LEAF_NODE	2342:32	2342:32	18	,
ARGUMENT	2342:34	2342:34	18	dump . format
FIELD	2342:34	2342:39	19	dump . format
LEAF_NODE	2342:34	2342:34	20	dump
LEAF_NODE	2342:38	2342:38	20	.
LEAF_NODE	2342:39	2342:39	20	format
LEAF_NODE	2342:45	2342:45	18	,
ARGUMENT	2342:47	2342:47	18	"Writing image"
FIELD	2342:47	2342:47	19	"Writing image"
LEAF_NODE	2342:47	2342:47	20	"Writing image"
LEAF_NODE	2342:62	2342:62	18	,
ARGUMENT	2342:63	2342:63	18	"%d from %s"
FIELD	2342:63	2342:63	19	"%d from %s"
LEAF_NODE	2342:63	2342:63	20	"%d from %s"
LEAF_NODE	2342:75	2342:75	18	,
ARGUMENT	2343:20	2343:20	18	dump_images
FIELD	2343:20	2343:20	19	dump_images
LEAF_NODE	2343:20	2343:20	20	dump_images
LEAF_NODE	2343:31	2343:31	18	,
ARGUMENT	2343:33	2343:33	18	TIFFFileName ( in )
FUNCTION_CALL	2343:33	2343:48	19	TIFFFileName ( in )
CALLEE	2343:33	2343:33	20	TIFFFileName
LEAF_NODE	2343:33	2343:33	21	TIFFFileName
LEAF_NODE	2343:45	2343:45	20	(
ARGUMENT	2343:46	2343:46	20	in
FIELD	2343:46	2343:46	21	in
LEAF_NODE	2343:46	2343:46	22	in
LEAF_NODE	2343:48	2343:48	20	)
LEAF_NODE	2343:49	2343:49	18	)
LEAF_NODE	2343:50	2343:50	16	;
LEAF_NODE	2344:10	2344:10	14	}
LEAF_NODE	2345:8	2345:8	11	}
SELECTION	2347:6	2348:9	9	
KEYWORD	2347:6	2347:6	10	if
LEAF_NODE	2347:6	2347:6	11	if
LEAF_NODE	2347:9	2347:9	10	(
CONDITION	2347:10	2347:10	10	dump . debug
EXPR	2347:10	2347:10	11	dump . debug
FIELD	2347:10	2347:15	12	dump . debug
LEAF_NODE	2347:10	2347:10	13	dump
LEAF_NODE	2347:14	2347:14	13	.
LEAF_NODE	2347:15	2347:15	13	debug
LEAF_NODE	2347:20	2347:20	10	)
STATEMENTS	2348:9	2348:9	10	
EXPR_STATEMENT	2348:9	2348:92	11	TIFFError ( "main" , "Reading image %4d of %4d total pages." , dirnum + 1 , total_pages ) ;
EXPR	2348:9	2348:9	12	TIFFError ( "main" , "Reading image %4d of %4d total pages." , dirnum + 1 , total_pages )
FUNCTION_CALL	2348:9	2348:91	13	TIFFError ( "main" , "Reading image %4d of %4d total pages." , dirnum + 1 , total_pages )
CALLEE	2348:9	2348:9	14	TIFFError
LEAF_NODE	2348:9	2348:9	15	TIFFError
LEAF_NODE	2348:18	2348:18	14	(
ARGUMENT	2348:19	2348:19	14	"main"
FIELD	2348:19	2348:19	15	"main"
LEAF_NODE	2348:19	2348:19	16	"main"
LEAF_NODE	2348:25	2348:25	14	,
ARGUMENT	2348:27	2348:27	14	"Reading image %4d of %4d total pages."
FIELD	2348:27	2348:27	15	"Reading image %4d of %4d total pages."
LEAF_NODE	2348:27	2348:27	16	"Reading image %4d of %4d total pages."
LEAF_NODE	2348:66	2348:66	14	,
ARGUMENT	2348:68	2348:77	14	dirnum + 1
FIELD	2348:68	2348:68	15	dirnum
LEAF_NODE	2348:68	2348:68	16	dirnum
LEAF_NODE	2348:75	2348:75	15	+
FIELD	2348:77	2348:77	15	1
LEAF_NODE	2348:77	2348:77	16	1
LEAF_NODE	2348:78	2348:78	14	,
ARGUMENT	2348:80	2348:80	14	total_pages
FIELD	2348:80	2348:80	15	total_pages
LEAF_NODE	2348:80	2348:80	16	total_pages
LEAF_NODE	2348:91	2348:91	14	)
LEAF_NODE	2348:92	2348:92	12	;
SELECTION	2350:6	2351:8	9	
KEYWORD	2350:6	2350:6	10	if
LEAF_NODE	2350:6	2350:6	11	if
LEAF_NODE	2350:9	2350:9	10	(
CONDITION	2350:10	2350:10	10	loadImage ( in , & image , & dump , & read_buff )
EXPR	2350:10	2350:10	11	loadImage ( in , & image , & dump , & read_buff )
FUNCTION_CALL	2350:10	2350:49	12	loadImage ( in , & image , & dump , & read_buff )
CALLEE	2350:10	2350:10	13	loadImage
LEAF_NODE	2350:10	2350:10	14	loadImage
LEAF_NODE	2350:19	2350:19	13	(
ARGUMENT	2350:20	2350:20	13	in
FIELD	2350:20	2350:20	14	in
LEAF_NODE	2350:20	2350:20	15	in
LEAF_NODE	2350:22	2350:22	13	,
ARGUMENT	2350:24	2350:24	13	& image
UNARY_EXPR	2350:24	2350:25	14	& image
UNARY_OPERATOR	2350:24	2350:24	15	&
LEAF_NODE	2350:24	2350:24	16	&
FIELD	2350:25	2350:25	15	image
LEAF_NODE	2350:25	2350:25	16	image
LEAF_NODE	2350:30	2350:30	13	,
ARGUMENT	2350:32	2350:32	13	& dump
UNARY_EXPR	2350:32	2350:33	14	& dump
UNARY_OPERATOR	2350:32	2350:32	15	&
LEAF_NODE	2350:32	2350:32	16	&
FIELD	2350:33	2350:33	15	dump
LEAF_NODE	2350:33	2350:33	16	dump
LEAF_NODE	2350:37	2350:37	13	,
ARGUMENT	2350:39	2350:39	13	& read_buff
UNARY_EXPR	2350:39	2350:40	14	& read_buff
UNARY_OPERATOR	2350:39	2350:39	15	&
LEAF_NODE	2350:39	2350:39	16	&
FIELD	2350:40	2350:40	15	read_buff
LEAF_NODE	2350:40	2350:40	16	read_buff
LEAF_NODE	2350:49	2350:49	13	)
LEAF_NODE	2350:50	2350:50	10	)
STATEMENTS	2351:8	2354:8	10	
LEAF_NODE	2351:8	2351:8	11	{
STATEMENTS	2352:8	2353:8	11	
EXPR_STATEMENT	2352:8	2352:56	12	TIFFError ( "main" , "Unable to load source image" ) ;
EXPR	2352:8	2352:8	13	TIFFError ( "main" , "Unable to load source image" )
FUNCTION_CALL	2352:8	2352:55	14	TIFFError ( "main" , "Unable to load source image" )
CALLEE	2352:8	2352:8	15	TIFFError
LEAF_NODE	2352:8	2352:8	16	TIFFError
LEAF_NODE	2352:17	2352:17	15	(
ARGUMENT	2352:18	2352:18	15	"main"
FIELD	2352:18	2352:18	16	"main"
LEAF_NODE	2352:18	2352:18	17	"main"
LEAF_NODE	2352:24	2352:24	15	,
ARGUMENT	2352:26	2352:26	15	"Unable to load source image"
FIELD	2352:26	2352:26	16	"Unable to load source image"
LEAF_NODE	2352:26	2352:26	17	"Unable to load source image"
LEAF_NODE	2352:55	2352:55	15	)
LEAF_NODE	2352:56	2352:56	13	;
EXPR_STATEMENT	2353:8	2353:17	12	exit ( - 1 ) ;
EXPR	2353:8	2353:8	13	exit ( - 1 )
FUNCTION_CALL	2353:8	2353:16	14	exit ( - 1 )
CALLEE	2353:8	2353:8	15	exit
LEAF_NODE	2353:8	2353:8	16	exit
LEAF_NODE	2353:13	2353:13	15	(
ARGUMENT	2353:14	2353:14	15	- 1
UNARY_EXPR	2353:14	2353:15	16	- 1
UNARY_OPERATOR	2353:14	2353:14	17	-
LEAF_NODE	2353:14	2353:14	18	-
FIELD	2353:15	2353:15	17	1
LEAF_NODE	2353:15	2353:15	18	1
LEAF_NODE	2353:16	2353:16	15	)
LEAF_NODE	2353:17	2353:17	13	;
LEAF_NODE	2354:8	2354:8	11	}
SELECTION	2358:6	2359:8	9	
KEYWORD	2358:6	2358:6	10	if
LEAF_NODE	2358:6	2358:6	11	if
LEAF_NODE	2358:9	2358:9	10	(
CONDITION	2358:10	2358:10	10	image . adjustments != 0
EXPR	2358:10	2358:31	11	image . adjustments != 0
FIELD	2358:10	2358:16	12	image . adjustments
LEAF_NODE	2358:10	2358:10	13	image
LEAF_NODE	2358:15	2358:15	13	.
LEAF_NODE	2358:16	2358:16	13	adjustments
EQ_OPERATOR	2358:28	2358:28	12	!=
LEAF_NODE	2358:28	2358:28	13	!=
FIELD	2358:31	2358:31	12	0
LEAF_NODE	2358:31	2358:31	13	0
LEAF_NODE	2358:32	2358:32	10	)
STATEMENTS	2359:8	2362:8	10	
LEAF_NODE	2359:8	2359:8	11	{
STATEMENTS	2360:1	2360:1	11	
SELECTION	2360:1	2361:5	12	
KEYWORD	2360:1	2360:1	13	if
LEAF_NODE	2360:1	2360:1	14	if
LEAF_NODE	2360:4	2360:4	13	(
CONDITION	2360:5	2360:5	13	correct_orientation ( & image , & read_buff )
EXPR	2360:5	2360:5	14	correct_orientation ( & image , & read_buff )
FUNCTION_CALL	2360:5	2360:43	15	correct_orientation ( & image , & read_buff )
CALLEE	2360:5	2360:5	16	correct_orientation
LEAF_NODE	2360:5	2360:5	17	correct_orientation
LEAF_NODE	2360:24	2360:24	16	(
ARGUMENT	2360:25	2360:25	16	& image
UNARY_EXPR	2360:25	2360:26	17	& image
UNARY_OPERATOR	2360:25	2360:25	18	&
LEAF_NODE	2360:25	2360:25	19	&
FIELD	2360:26	2360:26	18	image
LEAF_NODE	2360:26	2360:26	19	image
LEAF_NODE	2360:31	2360:31	16	,
ARGUMENT	2360:33	2360:33	16	& read_buff
UNARY_EXPR	2360:33	2360:34	17	& read_buff
UNARY_OPERATOR	2360:33	2360:33	18	&
LEAF_NODE	2360:33	2360:33	19	&
FIELD	2360:34	2360:34	18	read_buff
LEAF_NODE	2360:34	2360:34	19	read_buff
LEAF_NODE	2360:43	2360:43	16	)
LEAF_NODE	2360:44	2360:44	13	)
STATEMENTS	2361:5	2361:5	13	
EXPR_STATEMENT	2361:5	2361:61	14	TIFFError ( "main" , "Unable to correct image orientation" ) ;
EXPR	2361:5	2361:5	15	TIFFError ( "main" , "Unable to correct image orientation" )
FUNCTION_CALL	2361:5	2361:60	16	TIFFError ( "main" , "Unable to correct image orientation" )
CALLEE	2361:5	2361:5	17	TIFFError
LEAF_NODE	2361:5	2361:5	18	TIFFError
LEAF_NODE	2361:14	2361:14	17	(
ARGUMENT	2361:15	2361:15	17	"main"
FIELD	2361:15	2361:15	18	"main"
LEAF_NODE	2361:15	2361:15	19	"main"
LEAF_NODE	2361:21	2361:21	17	,
ARGUMENT	2361:23	2361:23	17	"Unable to correct image orientation"
FIELD	2361:23	2361:23	18	"Unable to correct image orientation"
LEAF_NODE	2361:23	2361:23	19	"Unable to correct image orientation"
LEAF_NODE	2361:60	2361:60	17	)
LEAF_NODE	2361:61	2361:61	15	;
LEAF_NODE	2362:8	2362:8	11	}
SELECTION	2364:6	2365:8	9	
KEYWORD	2364:6	2364:6	10	if
LEAF_NODE	2364:6	2364:6	11	if
LEAF_NODE	2364:9	2364:9	10	(
CONDITION	2364:10	2364:10	10	getCropOffsets ( & image , & crop , & dump )
EXPR	2364:10	2364:10	11	getCropOffsets ( & image , & crop , & dump )
FUNCTION_CALL	2364:10	2364:45	12	getCropOffsets ( & image , & crop , & dump )
CALLEE	2364:10	2364:10	13	getCropOffsets
LEAF_NODE	2364:10	2364:10	14	getCropOffsets
LEAF_NODE	2364:24	2364:24	13	(
ARGUMENT	2364:25	2364:25	13	& image
UNARY_EXPR	2364:25	2364:26	14	& image
UNARY_OPERATOR	2364:25	2364:25	15	&
LEAF_NODE	2364:25	2364:25	16	&
FIELD	2364:26	2364:26	15	image
LEAF_NODE	2364:26	2364:26	16	image
LEAF_NODE	2364:31	2364:31	13	,
ARGUMENT	2364:33	2364:33	13	& crop
UNARY_EXPR	2364:33	2364:34	14	& crop
UNARY_OPERATOR	2364:33	2364:33	15	&
LEAF_NODE	2364:33	2364:33	16	&
FIELD	2364:34	2364:34	15	crop
LEAF_NODE	2364:34	2364:34	16	crop
LEAF_NODE	2364:38	2364:38	13	,
ARGUMENT	2364:40	2364:40	13	& dump
UNARY_EXPR	2364:40	2364:41	14	& dump
UNARY_OPERATOR	2364:40	2364:40	15	&
LEAF_NODE	2364:40	2364:40	16	&
FIELD	2364:41	2364:41	15	dump
LEAF_NODE	2364:41	2364:41	16	dump
LEAF_NODE	2364:45	2364:45	13	)
LEAF_NODE	2364:46	2364:46	10	)
STATEMENTS	2365:8	2368:1	10	
LEAF_NODE	2365:8	2365:8	11	{
STATEMENTS	2366:8	2367:8	11	
EXPR_STATEMENT	2366:8	2366:58	12	TIFFError ( "main" , "Unable to define crop regions" ) ;
EXPR	2366:8	2366:8	13	TIFFError ( "main" , "Unable to define crop regions" )
FUNCTION_CALL	2366:8	2366:57	14	TIFFError ( "main" , "Unable to define crop regions" )
CALLEE	2366:8	2366:8	15	TIFFError
LEAF_NODE	2366:8	2366:8	16	TIFFError
LEAF_NODE	2366:17	2366:17	15	(
ARGUMENT	2366:18	2366:18	15	"main"
FIELD	2366:18	2366:18	16	"main"
LEAF_NODE	2366:18	2366:18	17	"main"
LEAF_NODE	2366:24	2366:24	15	,
ARGUMENT	2366:26	2366:26	15	"Unable to define crop regions"
FIELD	2366:26	2366:26	16	"Unable to define crop regions"
LEAF_NODE	2366:26	2366:26	17	"Unable to define crop regions"
LEAF_NODE	2366:57	2366:57	15	)
LEAF_NODE	2366:58	2366:58	13	;
EXPR_STATEMENT	2367:8	2367:17	12	exit ( - 1 ) ;
EXPR	2367:8	2367:8	13	exit ( - 1 )
FUNCTION_CALL	2367:8	2367:16	14	exit ( - 1 )
CALLEE	2367:8	2367:8	15	exit
LEAF_NODE	2367:8	2367:8	16	exit
LEAF_NODE	2367:13	2367:13	15	(
ARGUMENT	2367:14	2367:14	15	- 1
UNARY_EXPR	2367:14	2367:15	16	- 1
UNARY_OPERATOR	2367:14	2367:14	17	-
LEAF_NODE	2367:14	2367:14	18	-
FIELD	2367:15	2367:15	17	1
LEAF_NODE	2367:15	2367:15	18	1
LEAF_NODE	2367:16	2367:16	15	)
LEAF_NODE	2367:17	2367:17	13	;
LEAF_NODE	2368:1	2368:1	11	}
SELECTION	2370:6	2371:8	9	
KEYWORD	2370:6	2370:6	10	if
LEAF_NODE	2370:6	2370:6	11	if
LEAF_NODE	2370:9	2370:9	10	(
CONDITION	2370:10	2370:10	10	crop . selections > 0
EXPR	2370:10	2370:28	11	crop . selections > 0
FIELD	2370:10	2370:15	12	crop . selections
LEAF_NODE	2370:10	2370:10	13	crop
LEAF_NODE	2370:14	2370:14	13	.
LEAF_NODE	2370:15	2370:15	13	selections
REL_OPERATOR	2370:26	2370:26	12	>
LEAF_NODE	2370:26	2370:26	13	>
FIELD	2370:28	2370:28	12	0
LEAF_NODE	2370:28	2370:28	13	0
LEAF_NODE	2370:29	2370:29	10	)
STATEMENTS	2371:8	2377:1	10	
LEAF_NODE	2371:8	2371:8	11	{
STATEMENTS	2372:8	2372:8	11	
SELECTION	2372:8	2373:10	12	
KEYWORD	2372:8	2372:8	13	if
LEAF_NODE	2372:8	2372:8	14	if
LEAF_NODE	2372:11	2372:11	13	(
CONDITION	2372:12	2372:12	13	processCropSelections ( & image , & crop , & read_buff , seg_buffs )
EXPR	2372:12	2372:12	14	processCropSelections ( & image , & crop , & read_buff , seg_buffs )
FUNCTION_CALL	2372:12	2372:70	15	processCropSelections ( & image , & crop , & read_buff , seg_buffs )
CALLEE	2372:12	2372:12	16	processCropSelections
LEAF_NODE	2372:12	2372:12	17	processCropSelections
LEAF_NODE	2372:33	2372:33	16	(
ARGUMENT	2372:34	2372:34	16	& image
UNARY_EXPR	2372:34	2372:35	17	& image
UNARY_OPERATOR	2372:34	2372:34	18	&
LEAF_NODE	2372:34	2372:34	19	&
FIELD	2372:35	2372:35	18	image
LEAF_NODE	2372:35	2372:35	19	image
LEAF_NODE	2372:40	2372:40	16	,
ARGUMENT	2372:42	2372:42	16	& crop
UNARY_EXPR	2372:42	2372:43	17	& crop
UNARY_OPERATOR	2372:42	2372:42	18	&
LEAF_NODE	2372:42	2372:42	19	&
FIELD	2372:43	2372:43	18	crop
LEAF_NODE	2372:43	2372:43	19	crop
LEAF_NODE	2372:47	2372:47	16	,
ARGUMENT	2372:49	2372:49	16	& read_buff
UNARY_EXPR	2372:49	2372:50	17	& read_buff
UNARY_OPERATOR	2372:49	2372:49	18	&
LEAF_NODE	2372:49	2372:49	19	&
FIELD	2372:50	2372:50	18	read_buff
LEAF_NODE	2372:50	2372:50	19	read_buff
LEAF_NODE	2372:59	2372:59	16	,
ARGUMENT	2372:61	2372:61	16	seg_buffs
FIELD	2372:61	2372:61	17	seg_buffs
LEAF_NODE	2372:61	2372:61	18	seg_buffs
LEAF_NODE	2372:70	2372:70	16	)
LEAF_NODE	2372:71	2372:71	13	)
STATEMENTS	2373:10	2376:3	13	
LEAF_NODE	2373:10	2373:10	14	{
STATEMENTS	2374:10	2375:10	14	
EXPR_STATEMENT	2374:10	2374:65	15	TIFFError ( "main" , "Unable to process image selections" ) ;
EXPR	2374:10	2374:10	16	TIFFError ( "main" , "Unable to process image selections" )
FUNCTION_CALL	2374:10	2374:64	17	TIFFError ( "main" , "Unable to process image selections" )
CALLEE	2374:10	2374:10	18	TIFFError
LEAF_NODE	2374:10	2374:10	19	TIFFError
LEAF_NODE	2374:19	2374:19	18	(
ARGUMENT	2374:20	2374:20	18	"main"
FIELD	2374:20	2374:20	19	"main"
LEAF_NODE	2374:20	2374:20	20	"main"
LEAF_NODE	2374:26	2374:26	18	,
ARGUMENT	2374:28	2374:28	18	"Unable to process image selections"
FIELD	2374:28	2374:28	19	"Unable to process image selections"
LEAF_NODE	2374:28	2374:28	20	"Unable to process image selections"
LEAF_NODE	2374:64	2374:64	18	)
LEAF_NODE	2374:65	2374:65	16	;
EXPR_STATEMENT	2375:10	2375:19	15	exit ( - 1 ) ;
EXPR	2375:10	2375:10	16	exit ( - 1 )
FUNCTION_CALL	2375:10	2375:18	17	exit ( - 1 )
CALLEE	2375:10	2375:10	18	exit
LEAF_NODE	2375:10	2375:10	19	exit
LEAF_NODE	2375:15	2375:15	18	(
ARGUMENT	2375:16	2375:16	18	- 1
UNARY_EXPR	2375:16	2375:17	19	- 1
UNARY_OPERATOR	2375:16	2375:16	20	-
LEAF_NODE	2375:16	2375:16	21	-
FIELD	2375:17	2375:17	20	1
LEAF_NODE	2375:17	2375:17	21	1
LEAF_NODE	2375:18	2375:18	18	)
LEAF_NODE	2375:19	2375:19	16	;
LEAF_NODE	2376:3	2376:3	14	}
LEAF_NODE	2377:1	2377:1	11	}
SELECTION	2378:6	2379:8	9	
KEYWORD	2378:6	2378:6	10	else
LEAF_NODE	2378:6	2378:6	11	else
STATEMENTS	2379:8	2385:1	10	
LEAF_NODE	2379:8	2379:8	11	{
STATEMENTS	2380:8	2380:8	11	
SELECTION	2380:8	2381:10	12	
KEYWORD	2380:8	2380:8	13	if
LEAF_NODE	2380:8	2380:8	14	if
LEAF_NODE	2380:11	2380:11	13	(
CONDITION	2380:12	2380:12	13	createCroppedImage ( & image , & crop , & read_buff , & crop_buff )
EXPR	2380:12	2380:12	14	createCroppedImage ( & image , & crop , & read_buff , & crop_buff )
FUNCTION_CALL	2380:12	2380:68	15	createCroppedImage ( & image , & crop , & read_buff , & crop_buff )
CALLEE	2380:12	2380:12	16	createCroppedImage
LEAF_NODE	2380:12	2380:12	17	createCroppedImage
LEAF_NODE	2380:30	2380:30	16	(
ARGUMENT	2380:31	2380:31	16	& image
UNARY_EXPR	2380:31	2380:32	17	& image
UNARY_OPERATOR	2380:31	2380:31	18	&
LEAF_NODE	2380:31	2380:31	19	&
FIELD	2380:32	2380:32	18	image
LEAF_NODE	2380:32	2380:32	19	image
LEAF_NODE	2380:37	2380:37	16	,
ARGUMENT	2380:39	2380:39	16	& crop
UNARY_EXPR	2380:39	2380:40	17	& crop
UNARY_OPERATOR	2380:39	2380:39	18	&
LEAF_NODE	2380:39	2380:39	19	&
FIELD	2380:40	2380:40	18	crop
LEAF_NODE	2380:40	2380:40	19	crop
LEAF_NODE	2380:44	2380:44	16	,
ARGUMENT	2380:46	2380:46	16	& read_buff
UNARY_EXPR	2380:46	2380:47	17	& read_buff
UNARY_OPERATOR	2380:46	2380:46	18	&
LEAF_NODE	2380:46	2380:46	19	&
FIELD	2380:47	2380:47	18	read_buff
LEAF_NODE	2380:47	2380:47	19	read_buff
LEAF_NODE	2380:56	2380:56	16	,
ARGUMENT	2380:58	2380:58	16	& crop_buff
UNARY_EXPR	2380:58	2380:59	17	& crop_buff
UNARY_OPERATOR	2380:58	2380:58	18	&
LEAF_NODE	2380:58	2380:58	19	&
FIELD	2380:59	2380:59	18	crop_buff
LEAF_NODE	2380:59	2380:59	19	crop_buff
LEAF_NODE	2380:68	2380:68	16	)
LEAF_NODE	2380:69	2380:69	13	)
STATEMENTS	2381:10	2384:3	13	
LEAF_NODE	2381:10	2381:10	14	{
STATEMENTS	2382:10	2383:10	14	
EXPR_STATEMENT	2382:10	2382:60	15	TIFFError ( "main" , "Unable to create output image" ) ;
EXPR	2382:10	2382:10	16	TIFFError ( "main" , "Unable to create output image" )
FUNCTION_CALL	2382:10	2382:59	17	TIFFError ( "main" , "Unable to create output image" )
CALLEE	2382:10	2382:10	18	TIFFError
LEAF_NODE	2382:10	2382:10	19	TIFFError
LEAF_NODE	2382:19	2382:19	18	(
ARGUMENT	2382:20	2382:20	18	"main"
FIELD	2382:20	2382:20	19	"main"
LEAF_NODE	2382:20	2382:20	20	"main"
LEAF_NODE	2382:26	2382:26	18	,
ARGUMENT	2382:28	2382:28	18	"Unable to create output image"
FIELD	2382:28	2382:28	19	"Unable to create output image"
LEAF_NODE	2382:28	2382:28	20	"Unable to create output image"
LEAF_NODE	2382:59	2382:59	18	)
LEAF_NODE	2382:60	2382:60	16	;
EXPR_STATEMENT	2383:10	2383:19	15	exit ( - 1 ) ;
EXPR	2383:10	2383:10	16	exit ( - 1 )
FUNCTION_CALL	2383:10	2383:18	17	exit ( - 1 )
CALLEE	2383:10	2383:10	18	exit
LEAF_NODE	2383:10	2383:10	19	exit
LEAF_NODE	2383:15	2383:15	18	(
ARGUMENT	2383:16	2383:16	18	- 1
UNARY_EXPR	2383:16	2383:17	19	- 1
UNARY_OPERATOR	2383:16	2383:16	20	-
LEAF_NODE	2383:16	2383:16	21	-
FIELD	2383:17	2383:17	20	1
LEAF_NODE	2383:17	2383:17	21	1
LEAF_NODE	2383:18	2383:18	18	)
LEAF_NODE	2383:19	2383:19	16	;
LEAF_NODE	2384:3	2384:3	14	}
LEAF_NODE	2385:1	2385:1	11	}
SELECTION	2386:6	2387:8	9	
KEYWORD	2386:6	2386:6	10	if
LEAF_NODE	2386:6	2386:6	11	if
LEAF_NODE	2386:9	2386:9	10	(
CONDITION	2386:10	2386:10	10	page . mode == PAGE_MODE_NONE
EXPR	2386:10	2386:23	11	page . mode == PAGE_MODE_NONE
FIELD	2386:10	2386:15	12	page . mode
LEAF_NODE	2386:10	2386:10	13	page
LEAF_NODE	2386:14	2386:14	13	.
LEAF_NODE	2386:15	2386:15	13	mode
EQ_OPERATOR	2386:20	2386:20	12	==
LEAF_NODE	2386:20	2386:20	13	==
FIELD	2386:23	2386:23	12	PAGE_MODE_NONE
LEAF_NODE	2386:23	2386:23	13	PAGE_MODE_NONE
LEAF_NODE	2386:37	2386:37	10	)
STATEMENTS	2387:8	2405:1	10	
LEAF_NODE	2387:8	2387:8	11	{
STATEMENTS	2388:8	2393:1	11	
SELECTION	2388:8	2389:10	12	
KEYWORD	2388:8	2388:8	13	if
LEAF_NODE	2388:8	2388:8	14	if
LEAF_NODE	2388:11	2388:11	13	(
CONDITION	2388:12	2388:12	13	crop . selections > 0
EXPR	2388:12	2388:30	14	crop . selections > 0
FIELD	2388:12	2388:17	15	crop . selections
LEAF_NODE	2388:12	2388:12	16	crop
LEAF_NODE	2388:16	2388:16	16	.
LEAF_NODE	2388:17	2388:17	16	selections
REL_OPERATOR	2388:28	2388:28	15	>
LEAF_NODE	2388:28	2388:28	16	>
FIELD	2388:30	2388:30	15	0
LEAF_NODE	2388:30	2388:30	16	0
LEAF_NODE	2388:31	2388:31	13	)
STATEMENTS	2389:10	2392:10	13	
LEAF_NODE	2389:10	2389:10	14	{
STATEMENTS	2390:3	2390:3	14	
EXPR_STATEMENT	2390:3	2391:70	15	writeSelections ( in , & out , & crop , & image , & dump , seg_buffs , mp , argv [ argc - 1 ] , & next_page , total_pages ) ;
EXPR	2390:3	2390:3	16	writeSelections ( in , & out , & crop , & image , & dump , seg_buffs , mp , argv [ argc - 1 ] , & next_page , total_pages )
FUNCTION_CALL	2390:3	2391:69	17	writeSelections ( in , & out , & crop , & image , & dump , seg_buffs , mp , argv [ argc - 1 ] , & next_page , total_pages )
CALLEE	2390:3	2390:3	18	writeSelections
LEAF_NODE	2390:3	2390:3	19	writeSelections
LEAF_NODE	2390:18	2390:18	18	(
ARGUMENT	2390:19	2390:19	18	in
FIELD	2390:19	2390:19	19	in
LEAF_NODE	2390:19	2390:19	20	in
LEAF_NODE	2390:21	2390:21	18	,
ARGUMENT	2390:23	2390:23	18	& out
UNARY_EXPR	2390:23	2390:24	19	& out
UNARY_OPERATOR	2390:23	2390:23	20	&
LEAF_NODE	2390:23	2390:23	21	&
FIELD	2390:24	2390:24	20	out
LEAF_NODE	2390:24	2390:24	21	out
LEAF_NODE	2390:27	2390:27	18	,
ARGUMENT	2390:29	2390:29	18	& crop
UNARY_EXPR	2390:29	2390:30	19	& crop
UNARY_OPERATOR	2390:29	2390:29	20	&
LEAF_NODE	2390:29	2390:29	21	&
FIELD	2390:30	2390:30	20	crop
LEAF_NODE	2390:30	2390:30	21	crop
LEAF_NODE	2390:34	2390:34	18	,
ARGUMENT	2390:36	2390:36	18	& image
UNARY_EXPR	2390:36	2390:37	19	& image
UNARY_OPERATOR	2390:36	2390:36	20	&
LEAF_NODE	2390:36	2390:36	21	&
FIELD	2390:37	2390:37	20	image
LEAF_NODE	2390:37	2390:37	21	image
LEAF_NODE	2390:42	2390:42	18	,
ARGUMENT	2390:44	2390:44	18	& dump
UNARY_EXPR	2390:44	2390:45	19	& dump
UNARY_OPERATOR	2390:44	2390:44	20	&
LEAF_NODE	2390:44	2390:44	21	&
FIELD	2390:45	2390:45	20	dump
LEAF_NODE	2390:45	2390:45	21	dump
LEAF_NODE	2390:49	2390:49	18	,
ARGUMENT	2390:51	2390:51	18	seg_buffs
FIELD	2390:51	2390:51	19	seg_buffs
LEAF_NODE	2390:51	2390:51	20	seg_buffs
LEAF_NODE	2390:60	2390:60	18	,
ARGUMENT	2391:26	2391:26	18	mp
FIELD	2391:26	2391:26	19	mp
LEAF_NODE	2391:26	2391:26	20	mp
LEAF_NODE	2391:28	2391:28	18	,
ARGUMENT	2391:30	2391:30	18	argv [ argc - 1 ]
FIELD	2391:30	2391:43	19	argv [ argc - 1 ]
LEAF_NODE	2391:30	2391:30	20	argv
LEAF_NODE	2391:34	2391:34	20	[
EXPR	2391:35	2391:42	20	argc - 1
FIELD	2391:35	2391:35	21	argc
LEAF_NODE	2391:35	2391:35	22	argc
LEAF_NODE	2391:40	2391:40	21	-
FIELD	2391:42	2391:42	21	1
LEAF_NODE	2391:42	2391:42	22	1
LEAF_NODE	2391:43	2391:43	20	]
LEAF_NODE	2391:44	2391:44	18	,
ARGUMENT	2391:46	2391:46	18	& next_page
UNARY_EXPR	2391:46	2391:47	19	& next_page
UNARY_OPERATOR	2391:46	2391:46	20	&
LEAF_NODE	2391:46	2391:46	21	&
FIELD	2391:47	2391:47	20	next_page
LEAF_NODE	2391:47	2391:47	21	next_page
LEAF_NODE	2391:56	2391:56	18	,
ARGUMENT	2391:58	2391:58	18	total_pages
FIELD	2391:58	2391:58	19	total_pages
LEAF_NODE	2391:58	2391:58	20	total_pages
LEAF_NODE	2391:69	2391:69	18	)
LEAF_NODE	2391:70	2391:70	16	;
LEAF_NODE	2392:10	2392:10	14	}
SELECTION	2393:1	2394:10	12	
KEYWORD	2393:1	2393:1	13	else
LEAF_NODE	2393:1	2393:1	14	else
STATEMENTS	2394:10	2404:10	13	
LEAF_NODE	2394:10	2394:10	14	{
STATEMENTS	2395:3	2398:10	14	
SELECTION	2395:3	2397:13	15	
KEYWORD	2395:3	2395:3	16	if
LEAF_NODE	2395:3	2395:3	17	if
LEAF_NODE	2395:6	2395:6	16	(
CONDITION	2395:7	2395:7	16	update_output_file ( & out , mp , crop . exp_mode , argv [ argc - 1 ] , & next_page )
EXPR	2395:7	2395:7	17	update_output_file ( & out , mp , crop . exp_mode , argv [ argc - 1 ] , & next_page )
FUNCTION_CALL	2395:7	2396:44	18	update_output_file ( & out , mp , crop . exp_mode , argv [ argc - 1 ] , & next_page )
CALLEE	2395:7	2395:7	19	update_output_file
LEAF_NODE	2395:7	2395:7	20	update_output_file
LEAF_NODE	2395:26	2395:26	19	(
ARGUMENT	2395:27	2395:27	19	& out
UNARY_EXPR	2395:27	2395:28	20	& out
UNARY_OPERATOR	2395:27	2395:27	21	&
LEAF_NODE	2395:27	2395:27	22	&
FIELD	2395:28	2395:28	21	out
LEAF_NODE	2395:28	2395:28	22	out
LEAF_NODE	2395:31	2395:31	19	,
ARGUMENT	2395:33	2395:33	19	mp
FIELD	2395:33	2395:33	20	mp
LEAF_NODE	2395:33	2395:33	21	mp
LEAF_NODE	2395:35	2395:35	19	,
ARGUMENT	2395:37	2395:37	19	crop . exp_mode
FIELD	2395:37	2395:42	20	crop . exp_mode
LEAF_NODE	2395:37	2395:37	21	crop
LEAF_NODE	2395:41	2395:41	21	.
LEAF_NODE	2395:42	2395:42	21	exp_mode
LEAF_NODE	2395:50	2395:50	19	,
ARGUMENT	2395:52	2395:52	19	argv [ argc - 1 ]
FIELD	2395:52	2395:65	20	argv [ argc - 1 ]
LEAF_NODE	2395:52	2395:52	21	argv
LEAF_NODE	2395:56	2395:56	21	[
EXPR	2395:57	2395:64	21	argc - 1
FIELD	2395:57	2395:57	22	argc
LEAF_NODE	2395:57	2395:57	23	argc
LEAF_NODE	2395:62	2395:62	22	-
FIELD	2395:64	2395:64	22	1
LEAF_NODE	2395:64	2395:64	23	1
LEAF_NODE	2395:65	2395:65	21	]
LEAF_NODE	2395:66	2395:66	19	,
ARGUMENT	2396:34	2396:34	19	& next_page
UNARY_EXPR	2396:34	2396:35	20	& next_page
UNARY_OPERATOR	2396:34	2396:34	21	&
LEAF_NODE	2396:34	2396:34	22	&
FIELD	2396:35	2396:35	21	next_page
LEAF_NODE	2396:35	2396:35	22	next_page
LEAF_NODE	2396:44	2396:44	19	)
LEAF_NODE	2396:45	2396:45	16	)
STATEMENTS	2397:13	2397:13	16	
EXPR_STATEMENT	2397:13	2397:21	17	exit ( 1 ) ;
EXPR	2397:13	2397:13	18	exit ( 1 )
FUNCTION_CALL	2397:13	2397:20	19	exit ( 1 )
CALLEE	2397:13	2397:13	20	exit
LEAF_NODE	2397:13	2397:13	21	exit
LEAF_NODE	2397:18	2397:18	20	(
ARGUMENT	2397:19	2397:19	20	1
FIELD	2397:19	2397:19	21	1
LEAF_NODE	2397:19	2397:19	22	1
LEAF_NODE	2397:20	2397:20	20	)
LEAF_NODE	2397:21	2397:21	18	;
SELECTION	2398:10	2400:12	15	
KEYWORD	2398:10	2398:10	16	if
LEAF_NODE	2398:10	2398:10	17	if
LEAF_NODE	2398:13	2398:13	16	(
CONDITION	2398:14	2398:14	16	writeCroppedImage ( in , out , & image , & dump , crop . combined_width , crop . combined_length , crop_buff , next_page , total_pages )
EXPR	2398:14	2398:14	17	writeCroppedImage ( in , out , & image , & dump , crop . combined_width , crop . combined_length , crop_buff , next_page , total_pages )
FUNCTION_CALL	2398:14	2399:87	18	writeCroppedImage ( in , out , & image , & dump , crop . combined_width , crop . combined_length , crop_buff , next_page , total_pages )
CALLEE	2398:14	2398:14	19	writeCroppedImage
LEAF_NODE	2398:14	2398:14	20	writeCroppedImage
LEAF_NODE	2398:31	2398:31	19	(
ARGUMENT	2398:32	2398:32	19	in
FIELD	2398:32	2398:32	20	in
LEAF_NODE	2398:32	2398:32	21	in
LEAF_NODE	2398:34	2398:34	19	,
ARGUMENT	2398:36	2398:36	19	out
FIELD	2398:36	2398:36	20	out
LEAF_NODE	2398:36	2398:36	21	out
LEAF_NODE	2398:39	2398:39	19	,
ARGUMENT	2398:41	2398:41	19	& image
UNARY_EXPR	2398:41	2398:42	20	& image
UNARY_OPERATOR	2398:41	2398:41	21	&
LEAF_NODE	2398:41	2398:41	22	&
FIELD	2398:42	2398:42	21	image
LEAF_NODE	2398:42	2398:42	22	image
LEAF_NODE	2398:47	2398:47	19	,
ARGUMENT	2398:49	2398:49	19	& dump
UNARY_EXPR	2398:49	2398:50	20	& dump
UNARY_OPERATOR	2398:49	2398:49	21	&
LEAF_NODE	2398:49	2398:49	22	&
FIELD	2398:50	2398:50	21	dump
LEAF_NODE	2398:50	2398:50	22	dump
LEAF_NODE	2398:54	2398:54	19	,
ARGUMENT	2398:55	2398:55	19	crop . combined_width
FIELD	2398:55	2398:60	20	crop . combined_width
LEAF_NODE	2398:55	2398:55	21	crop
LEAF_NODE	2398:59	2398:59	21	.
LEAF_NODE	2398:60	2398:60	21	combined_width
LEAF_NODE	2398:74	2398:74	19	,
ARGUMENT	2399:32	2399:32	19	crop . combined_length
FIELD	2399:32	2399:37	20	crop . combined_length
LEAF_NODE	2399:32	2399:32	21	crop
LEAF_NODE	2399:36	2399:36	21	.
LEAF_NODE	2399:37	2399:37	21	combined_length
LEAF_NODE	2399:52	2399:52	19	,
ARGUMENT	2399:54	2399:54	19	crop_buff
FIELD	2399:54	2399:54	20	crop_buff
LEAF_NODE	2399:54	2399:54	21	crop_buff
LEAF_NODE	2399:63	2399:63	19	,
ARGUMENT	2399:65	2399:65	19	next_page
FIELD	2399:65	2399:65	20	next_page
LEAF_NODE	2399:65	2399:65	21	next_page
LEAF_NODE	2399:74	2399:74	19	,
ARGUMENT	2399:76	2399:76	19	total_pages
FIELD	2399:76	2399:76	20	total_pages
LEAF_NODE	2399:76	2399:76	21	total_pages
LEAF_NODE	2399:87	2399:87	19	)
LEAF_NODE	2399:88	2399:88	16	)
STATEMENTS	2400:12	2403:5	16	
LEAF_NODE	2400:12	2400:12	17	{
STATEMENTS	2401:13	2402:13	17	
EXPR_STATEMENT	2401:13	2401:59	18	TIFFError ( "main" , "Unable to write new image" ) ;
EXPR	2401:13	2401:13	19	TIFFError ( "main" , "Unable to write new image" )
FUNCTION_CALL	2401:13	2401:58	20	TIFFError ( "main" , "Unable to write new image" )
CALLEE	2401:13	2401:13	21	TIFFError
LEAF_NODE	2401:13	2401:13	22	TIFFError
LEAF_NODE	2401:22	2401:22	21	(
ARGUMENT	2401:23	2401:23	21	"main"
FIELD	2401:23	2401:23	22	"main"
LEAF_NODE	2401:23	2401:23	23	"main"
LEAF_NODE	2401:29	2401:29	21	,
ARGUMENT	2401:31	2401:31	21	"Unable to write new image"
FIELD	2401:31	2401:31	22	"Unable to write new image"
LEAF_NODE	2401:31	2401:31	23	"Unable to write new image"
LEAF_NODE	2401:58	2401:58	21	)
LEAF_NODE	2401:59	2401:59	19	;
EXPR_STATEMENT	2402:13	2402:22	18	exit ( - 1 ) ;
EXPR	2402:13	2402:13	19	exit ( - 1 )
FUNCTION_CALL	2402:13	2402:21	20	exit ( - 1 )
CALLEE	2402:13	2402:13	21	exit
LEAF_NODE	2402:13	2402:13	22	exit
LEAF_NODE	2402:18	2402:18	21	(
ARGUMENT	2402:19	2402:19	21	- 1
UNARY_EXPR	2402:19	2402:20	22	- 1
UNARY_OPERATOR	2402:19	2402:19	23	-
LEAF_NODE	2402:19	2402:19	24	-
FIELD	2402:20	2402:20	23	1
LEAF_NODE	2402:20	2402:20	24	1
LEAF_NODE	2402:21	2402:21	21	)
LEAF_NODE	2402:22	2402:22	19	;
LEAF_NODE	2403:5	2403:5	17	}
LEAF_NODE	2404:10	2404:10	14	}
LEAF_NODE	2405:1	2405:1	11	}
SELECTION	2406:6	2407:8	9	
KEYWORD	2406:6	2406:6	10	else
LEAF_NODE	2406:6	2406:6	11	else
STATEMENTS	2407:8	2432:8	10	
LEAF_NODE	2407:8	2407:8	11	{
STATEMENTS	2411:1	2427:1	11	
SELECTION	2411:1	2412:3	12	
KEYWORD	2411:1	2411:1	13	if
LEAF_NODE	2411:1	2411:1	14	if
LEAF_NODE	2411:4	2411:4	13	(
CONDITION	2411:5	2411:5	13	crop_buff != NULL
EXPR	2411:5	2411:18	14	crop_buff != NULL
FIELD	2411:5	2411:5	15	crop_buff
LEAF_NODE	2411:5	2411:5	16	crop_buff
EQ_OPERATOR	2411:15	2411:15	15	!=
LEAF_NODE	2411:15	2411:15	16	!=
FIELD	2411:18	2411:18	15	NULL
LEAF_NODE	2411:18	2411:18	16	NULL
LEAF_NODE	2411:22	2411:22	13	)
STATEMENTS	2412:3	2412:3	13	
EXPR_STATEMENT	2412:3	2412:23	14	sect_src = crop_buff ;
EXPR	2412:3	2412:3	15	sect_src = crop_buff
ASSIGN	2412:3	2412:14	16	sect_src = crop_buff
LVAL	2412:3	2412:3	17	sect_src
FIELD	2412:3	2412:3	18	sect_src
LEAF_NODE	2412:3	2412:3	19	sect_src
ASSIGN_OP	2412:12	2412:12	17	=
LEAF_NODE	2412:12	2412:12	18	=
RVAL	2412:14	2412:14	17	crop_buff
FIELD	2412:14	2412:14	18	crop_buff
LEAF_NODE	2412:14	2412:14	19	crop_buff
LEAF_NODE	2412:23	2412:23	15	;
SELECTION	2413:8	2414:10	12	
KEYWORD	2413:8	2413:8	13	else
LEAF_NODE	2413:8	2413:8	14	else
STATEMENTS	2414:10	2414:10	13	
EXPR_STATEMENT	2414:10	2414:30	14	sect_src = read_buff ;
EXPR	2414:10	2414:10	15	sect_src = read_buff
ASSIGN	2414:10	2414:21	16	sect_src = read_buff
LVAL	2414:10	2414:10	17	sect_src
FIELD	2414:10	2414:10	18	sect_src
LEAF_NODE	2414:10	2414:10	19	sect_src
ASSIGN_OP	2414:19	2414:19	17	=
LEAF_NODE	2414:19	2414:19	18	=
RVAL	2414:21	2414:21	17	read_buff
FIELD	2414:21	2414:21	18	read_buff
LEAF_NODE	2414:21	2414:21	19	read_buff
LEAF_NODE	2414:30	2414:30	15	;
SELECTION	2416:8	2417:10	12	
KEYWORD	2416:8	2416:8	13	if
LEAF_NODE	2416:8	2416:8	14	if
LEAF_NODE	2416:11	2416:11	13	(
CONDITION	2416:12	2416:12	13	computeOutputPixelOffsets ( & crop , & image , & page , sections , & dump )
EXPR	2416:12	2416:12	14	computeOutputPixelOffsets ( & crop , & image , & page , sections , & dump )
FUNCTION_CALL	2416:12	2416:75	15	computeOutputPixelOffsets ( & crop , & image , & page , sections , & dump )
CALLEE	2416:12	2416:12	16	computeOutputPixelOffsets
LEAF_NODE	2416:12	2416:12	17	computeOutputPixelOffsets
LEAF_NODE	2416:37	2416:37	16	(
ARGUMENT	2416:38	2416:38	16	& crop
UNARY_EXPR	2416:38	2416:39	17	& crop
UNARY_OPERATOR	2416:38	2416:38	18	&
LEAF_NODE	2416:38	2416:38	19	&
FIELD	2416:39	2416:39	18	crop
LEAF_NODE	2416:39	2416:39	19	crop
LEAF_NODE	2416:43	2416:43	16	,
ARGUMENT	2416:45	2416:45	16	& image
UNARY_EXPR	2416:45	2416:46	17	& image
UNARY_OPERATOR	2416:45	2416:45	18	&
LEAF_NODE	2416:45	2416:45	19	&
FIELD	2416:46	2416:46	18	image
LEAF_NODE	2416:46	2416:46	19	image
LEAF_NODE	2416:51	2416:51	16	,
ARGUMENT	2416:53	2416:53	16	& page
UNARY_EXPR	2416:53	2416:54	17	& page
UNARY_OPERATOR	2416:53	2416:53	18	&
LEAF_NODE	2416:53	2416:53	19	&
FIELD	2416:54	2416:54	18	page
LEAF_NODE	2416:54	2416:54	19	page
LEAF_NODE	2416:58	2416:58	16	,
ARGUMENT	2416:60	2416:60	16	sections
FIELD	2416:60	2416:60	17	sections
LEAF_NODE	2416:60	2416:60	18	sections
LEAF_NODE	2416:68	2416:68	16	,
ARGUMENT	2416:70	2416:70	16	& dump
UNARY_EXPR	2416:70	2416:71	17	& dump
UNARY_OPERATOR	2416:70	2416:70	18	&
LEAF_NODE	2416:70	2416:70	19	&
FIELD	2416:71	2416:71	18	dump
LEAF_NODE	2416:71	2416:71	19	dump
LEAF_NODE	2416:75	2416:75	16	)
LEAF_NODE	2416:76	2416:76	13	)
STATEMENTS	2417:10	2420:3	13	
LEAF_NODE	2417:10	2417:10	14	{
STATEMENTS	2418:10	2419:10	14	
EXPR_STATEMENT	2418:10	2418:68	15	TIFFError ( "main" , "Unable to compute output section data" ) ;
EXPR	2418:10	2418:10	16	TIFFError ( "main" , "Unable to compute output section data" )
FUNCTION_CALL	2418:10	2418:67	17	TIFFError ( "main" , "Unable to compute output section data" )
CALLEE	2418:10	2418:10	18	TIFFError
LEAF_NODE	2418:10	2418:10	19	TIFFError
LEAF_NODE	2418:19	2418:19	18	(
ARGUMENT	2418:20	2418:20	18	"main"
FIELD	2418:20	2418:20	19	"main"
LEAF_NODE	2418:20	2418:20	20	"main"
LEAF_NODE	2418:26	2418:26	18	,
ARGUMENT	2418:28	2418:28	18	"Unable to compute output section data"
FIELD	2418:28	2418:28	19	"Unable to compute output section data"
LEAF_NODE	2418:28	2418:28	20	"Unable to compute output section data"
LEAF_NODE	2418:67	2418:67	18	)
LEAF_NODE	2418:68	2418:68	16	;
EXPR_STATEMENT	2419:10	2419:19	15	exit ( - 1 ) ;
EXPR	2419:10	2419:10	16	exit ( - 1 )
FUNCTION_CALL	2419:10	2419:18	17	exit ( - 1 )
CALLEE	2419:10	2419:10	18	exit
LEAF_NODE	2419:10	2419:10	19	exit
LEAF_NODE	2419:15	2419:15	18	(
ARGUMENT	2419:16	2419:16	18	- 1
UNARY_EXPR	2419:16	2419:17	19	- 1
UNARY_OPERATOR	2419:16	2419:16	20	-
LEAF_NODE	2419:16	2419:16	21	-
FIELD	2419:17	2419:17	20	1
LEAF_NODE	2419:17	2419:17	21	1
LEAF_NODE	2419:18	2419:18	18	)
LEAF_NODE	2419:19	2419:19	16	;
LEAF_NODE	2420:3	2420:3	14	}
SELECTION	2424:1	2425:10	12	
KEYWORD	2424:1	2424:1	13	if
LEAF_NODE	2424:1	2424:1	14	if
LEAF_NODE	2424:4	2424:4	13	(
CONDITION	2424:5	2424:5	13	update_output_file ( & out , mp , crop . exp_mode , argv [ argc - 1 ] , & next_page )
EXPR	2424:5	2424:5	14	update_output_file ( & out , mp , crop . exp_mode , argv [ argc - 1 ] , & next_page )
FUNCTION_CALL	2424:5	2424:76	15	update_output_file ( & out , mp , crop . exp_mode , argv [ argc - 1 ] , & next_page )
CALLEE	2424:5	2424:5	16	update_output_file
LEAF_NODE	2424:5	2424:5	17	update_output_file
LEAF_NODE	2424:24	2424:24	16	(
ARGUMENT	2424:25	2424:25	16	& out
UNARY_EXPR	2424:25	2424:26	17	& out
UNARY_OPERATOR	2424:25	2424:25	18	&
LEAF_NODE	2424:25	2424:25	19	&
FIELD	2424:26	2424:26	18	out
LEAF_NODE	2424:26	2424:26	19	out
LEAF_NODE	2424:29	2424:29	16	,
ARGUMENT	2424:31	2424:31	16	mp
FIELD	2424:31	2424:31	17	mp
LEAF_NODE	2424:31	2424:31	18	mp
LEAF_NODE	2424:33	2424:33	16	,
ARGUMENT	2424:35	2424:35	16	crop . exp_mode
FIELD	2424:35	2424:40	17	crop . exp_mode
LEAF_NODE	2424:35	2424:35	18	crop
LEAF_NODE	2424:39	2424:39	18	.
LEAF_NODE	2424:40	2424:40	18	exp_mode
LEAF_NODE	2424:48	2424:48	16	,
ARGUMENT	2424:50	2424:50	16	argv [ argc - 1 ]
FIELD	2424:50	2424:63	17	argv [ argc - 1 ]
LEAF_NODE	2424:50	2424:50	18	argv
LEAF_NODE	2424:54	2424:54	18	[
EXPR	2424:55	2424:62	18	argc - 1
FIELD	2424:55	2424:55	19	argc
LEAF_NODE	2424:55	2424:55	20	argc
LEAF_NODE	2424:60	2424:60	19	-
FIELD	2424:62	2424:62	19	1
LEAF_NODE	2424:62	2424:62	20	1
LEAF_NODE	2424:63	2424:63	18	]
LEAF_NODE	2424:64	2424:64	16	,
ARGUMENT	2424:66	2424:66	16	& next_page
UNARY_EXPR	2424:66	2424:67	17	& next_page
UNARY_OPERATOR	2424:66	2424:66	18	&
LEAF_NODE	2424:66	2424:66	19	&
FIELD	2424:67	2424:67	18	next_page
LEAF_NODE	2424:67	2424:67	19	next_page
LEAF_NODE	2424:76	2424:76	16	)
LEAF_NODE	2424:77	2424:77	13	)
STATEMENTS	2425:10	2425:10	13	
EXPR_STATEMENT	2425:10	2425:18	14	exit ( 1 ) ;
EXPR	2425:10	2425:10	15	exit ( 1 )
FUNCTION_CALL	2425:10	2425:17	16	exit ( 1 )
CALLEE	2425:10	2425:10	17	exit
LEAF_NODE	2425:10	2425:10	18	exit
LEAF_NODE	2425:15	2425:15	17	(
ARGUMENT	2425:16	2425:16	17	1
FIELD	2425:16	2425:16	18	1
LEAF_NODE	2425:16	2425:16	19	1
LEAF_NODE	2425:17	2425:17	17	)
LEAF_NODE	2425:18	2425:18	15	;
SELECTION	2427:1	2428:10	12	
KEYWORD	2427:1	2427:1	13	if
LEAF_NODE	2427:1	2427:1	14	if
LEAF_NODE	2427:4	2427:4	13	(
CONDITION	2427:5	2427:5	13	writeImageSections ( in , out , & image , & page , sections , & dump , sect_src , & sect_buff )
EXPR	2427:5	2427:5	14	writeImageSections ( in , out , & image , & page , sections , & dump , sect_src , & sect_buff )
FUNCTION_CALL	2427:5	2427:85	15	writeImageSections ( in , out , & image , & page , sections , & dump , sect_src , & sect_buff )
CALLEE	2427:5	2427:5	16	writeImageSections
LEAF_NODE	2427:5	2427:5	17	writeImageSections
LEAF_NODE	2427:23	2427:23	16	(
ARGUMENT	2427:24	2427:24	16	in
FIELD	2427:24	2427:24	17	in
LEAF_NODE	2427:24	2427:24	18	in
LEAF_NODE	2427:26	2427:26	16	,
ARGUMENT	2427:28	2427:28	16	out
FIELD	2427:28	2427:28	17	out
LEAF_NODE	2427:28	2427:28	18	out
LEAF_NODE	2427:31	2427:31	16	,
ARGUMENT	2427:33	2427:33	16	& image
UNARY_EXPR	2427:33	2427:34	17	& image
UNARY_OPERATOR	2427:33	2427:33	18	&
LEAF_NODE	2427:33	2427:33	19	&
FIELD	2427:34	2427:34	18	image
LEAF_NODE	2427:34	2427:34	19	image
LEAF_NODE	2427:39	2427:39	16	,
ARGUMENT	2427:41	2427:41	16	& page
UNARY_EXPR	2427:41	2427:42	17	& page
UNARY_OPERATOR	2427:41	2427:41	18	&
LEAF_NODE	2427:41	2427:41	19	&
FIELD	2427:42	2427:42	18	page
LEAF_NODE	2427:42	2427:42	19	page
LEAF_NODE	2427:46	2427:46	16	,
ARGUMENT	2427:48	2427:48	16	sections
FIELD	2427:48	2427:48	17	sections
LEAF_NODE	2427:48	2427:48	18	sections
LEAF_NODE	2427:56	2427:56	16	,
ARGUMENT	2427:58	2427:58	16	& dump
UNARY_EXPR	2427:58	2427:59	17	& dump
UNARY_OPERATOR	2427:58	2427:58	18	&
LEAF_NODE	2427:58	2427:58	19	&
FIELD	2427:59	2427:59	18	dump
LEAF_NODE	2427:59	2427:59	19	dump
LEAF_NODE	2427:63	2427:63	16	,
ARGUMENT	2427:65	2427:65	16	sect_src
FIELD	2427:65	2427:65	17	sect_src
LEAF_NODE	2427:65	2427:65	18	sect_src
LEAF_NODE	2427:73	2427:73	16	,
ARGUMENT	2427:75	2427:75	16	& sect_buff
UNARY_EXPR	2427:75	2427:76	17	& sect_buff
UNARY_OPERATOR	2427:75	2427:75	18	&
LEAF_NODE	2427:75	2427:75	19	&
FIELD	2427:76	2427:76	18	sect_buff
LEAF_NODE	2427:76	2427:76	19	sect_buff
LEAF_NODE	2427:85	2427:85	16	)
LEAF_NODE	2427:86	2427:86	13	)
STATEMENTS	2428:10	2431:3	13	
LEAF_NODE	2428:10	2428:10	14	{
STATEMENTS	2429:10	2430:10	14	
EXPR_STATEMENT	2429:10	2429:61	15	TIFFError ( "main" , "Unable to write image sections" ) ;
EXPR	2429:10	2429:10	16	TIFFError ( "main" , "Unable to write image sections" )
FUNCTION_CALL	2429:10	2429:60	17	TIFFError ( "main" , "Unable to write image sections" )
CALLEE	2429:10	2429:10	18	TIFFError
LEAF_NODE	2429:10	2429:10	19	TIFFError
LEAF_NODE	2429:19	2429:19	18	(
ARGUMENT	2429:20	2429:20	18	"main"
FIELD	2429:20	2429:20	19	"main"
LEAF_NODE	2429:20	2429:20	20	"main"
LEAF_NODE	2429:26	2429:26	18	,
ARGUMENT	2429:28	2429:28	18	"Unable to write image sections"
FIELD	2429:28	2429:28	19	"Unable to write image sections"
LEAF_NODE	2429:28	2429:28	20	"Unable to write image sections"
LEAF_NODE	2429:60	2429:60	18	)
LEAF_NODE	2429:61	2429:61	16	;
EXPR_STATEMENT	2430:10	2430:19	15	exit ( - 1 ) ;
EXPR	2430:10	2430:10	16	exit ( - 1 )
FUNCTION_CALL	2430:10	2430:18	17	exit ( - 1 )
CALLEE	2430:10	2430:10	18	exit
LEAF_NODE	2430:10	2430:10	19	exit
LEAF_NODE	2430:15	2430:15	18	(
ARGUMENT	2430:16	2430:16	18	- 1
UNARY_EXPR	2430:16	2430:17	19	- 1
UNARY_OPERATOR	2430:16	2430:16	20	-
LEAF_NODE	2430:16	2430:16	21	-
FIELD	2430:17	2430:17	20	1
LEAF_NODE	2430:17	2430:17	21	1
LEAF_NODE	2430:18	2430:18	18	)
LEAF_NODE	2430:19	2430:19	16	;
LEAF_NODE	2431:3	2431:3	14	}
LEAF_NODE	2432:8	2432:8	11	}
SELECTION	2435:6	2436:8	9	
KEYWORD	2435:6	2435:6	10	if
LEAF_NODE	2435:6	2435:6	11	if
LEAF_NODE	2435:9	2435:9	10	(
CONDITION	2435:10	2435:10	10	image_count == 0
EXPR	2435:10	2435:25	11	image_count == 0
FIELD	2435:10	2435:10	12	image_count
LEAF_NODE	2435:10	2435:10	13	image_count
EQ_OPERATOR	2435:22	2435:22	12	==
LEAF_NODE	2435:22	2435:22	13	==
FIELD	2435:25	2435:25	12	0
LEAF_NODE	2435:25	2435:25	13	0
LEAF_NODE	2435:26	2435:26	10	)
STATEMENTS	2436:8	2436:8	10	
EXPR_STATEMENT	2436:8	2436:16	11	dirnum ++ ;
EXPR	2436:8	2436:8	12	dirnum ++
FIELD	2436:8	2436:14	13	dirnum ++
LEAF_NODE	2436:8	2436:8	14	dirnum
LEAF_NODE	2436:14	2436:14	14	++
LEAF_NODE	2436:16	2436:16	12	;
SELECTION	2437:6	2438:8	9	
KEYWORD	2437:6	2437:6	10	else
LEAF_NODE	2437:6	2437:6	11	else
STATEMENTS	2438:8	2441:8	10	
LEAF_NODE	2438:8	2438:8	11	{
STATEMENTS	2439:1	2440:8	11	
EXPR_STATEMENT	2439:1	2439:45	12	dirnum = ( tdir_t ) ( imagelist [ next_image ] - 1 ) ;
EXPR	2439:1	2439:1	13	dirnum = ( tdir_t ) ( imagelist [ next_image ] - 1 )
ASSIGN	2439:1	2439:10	14	dirnum = ( tdir_t ) ( imagelist [ next_image ] - 1 )
LVAL	2439:1	2439:1	15	dirnum
FIELD	2439:1	2439:1	16	dirnum
LEAF_NODE	2439:1	2439:1	17	dirnum
ASSIGN_OP	2439:8	2439:8	15	=
LEAF_NODE	2439:8	2439:8	16	=
RVAL	2439:10	2439:44	15	( tdir_t ) ( imagelist [ next_image ] - 1 )
LEAF_NODE	2439:10	2439:10	16	(
TYPE_NAME	2439:11	2439:11	16	tdir_t
LEAF_NODE	2439:11	2439:11	17	tdir_t
LEAF_NODE	2439:17	2439:17	16	)
LEAF_NODE	2439:18	2439:18	16	(
FIELD	2439:19	2439:39	16	imagelist [ next_image ]
LEAF_NODE	2439:19	2439:19	17	imagelist
LEAF_NODE	2439:28	2439:28	17	[
EXPR	2439:29	2439:29	17	next_image
FIELD	2439:29	2439:29	18	next_image
LEAF_NODE	2439:29	2439:29	19	next_image
LEAF_NODE	2439:39	2439:39	17	]
LEAF_NODE	2439:41	2439:41	16	-
FIELD	2439:43	2439:43	16	1
LEAF_NODE	2439:43	2439:43	17	1
LEAF_NODE	2439:44	2439:44	16	)
LEAF_NODE	2439:45	2439:45	13	;
EXPR_STATEMENT	2440:8	2440:20	12	next_image ++ ;
EXPR	2440:8	2440:8	13	next_image ++
FIELD	2440:8	2440:18	14	next_image ++
LEAF_NODE	2440:8	2440:8	15	next_image
LEAF_NODE	2440:18	2440:18	15	++
LEAF_NODE	2440:20	2440:20	13	;
LEAF_NODE	2441:8	2441:8	11	}
SELECTION	2443:6	2444:8	9	
KEYWORD	2443:6	2443:6	10	if
LEAF_NODE	2443:6	2443:6	11	if
LEAF_NODE	2443:9	2443:9	10	(
CONDITION	2443:10	2443:10	10	dirnum == MAX_IMAGES - 1
EXPR	2443:10	2443:33	11	dirnum == MAX_IMAGES - 1
FIELD	2443:10	2443:10	12	dirnum
LEAF_NODE	2443:10	2443:10	13	dirnum
EQ_OPERATOR	2443:17	2443:17	12	==
LEAF_NODE	2443:17	2443:17	13	==
FIELD	2443:20	2443:20	12	MAX_IMAGES
LEAF_NODE	2443:20	2443:20	13	MAX_IMAGES
LEAF_NODE	2443:31	2443:31	12	-
FIELD	2443:33	2443:33	12	1
LEAF_NODE	2443:33	2443:33	13	1
LEAF_NODE	2443:34	2443:34	10	)
STATEMENTS	2444:8	2444:8	10	
EXPR_STATEMENT	2444:8	2444:48	11	dirnum = TIFFNumberOfDirectories ( in ) - 1 ;
EXPR	2444:8	2444:8	12	dirnum = TIFFNumberOfDirectories ( in ) - 1
ASSIGN	2444:8	2444:17	13	dirnum = TIFFNumberOfDirectories ( in ) - 1
LVAL	2444:8	2444:8	14	dirnum
FIELD	2444:8	2444:8	15	dirnum
LEAF_NODE	2444:8	2444:8	16	dirnum
ASSIGN_OP	2444:15	2444:15	14	=
LEAF_NODE	2444:15	2444:15	15	=
RVAL	2444:17	2444:47	14	TIFFNumberOfDirectories ( in ) - 1
FUNCTION_CALL	2444:17	2444:43	15	TIFFNumberOfDirectories ( in )
CALLEE	2444:17	2444:17	16	TIFFNumberOfDirectories
LEAF_NODE	2444:17	2444:17	17	TIFFNumberOfDirectories
LEAF_NODE	2444:40	2444:40	16	(
ARGUMENT	2444:41	2444:41	16	in
FIELD	2444:41	2444:41	17	in
LEAF_NODE	2444:41	2444:41	18	in
LEAF_NODE	2444:43	2444:43	16	)
LEAF_NODE	2444:45	2444:45	15	-
FIELD	2444:47	2444:47	15	1
LEAF_NODE	2444:47	2444:47	16	1
LEAF_NODE	2444:48	2444:48	12	;
SELECTION	2446:6	2447:8	9	
KEYWORD	2446:6	2446:6	10	if
LEAF_NODE	2446:6	2446:6	11	if
LEAF_NODE	2446:9	2446:9	10	(
CONDITION	2446:10	2446:10	10	! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
EXPR	2446:10	2446:10	11	! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
UNARY_EXPR	2446:10	2446:11	12	! TIFFSetDirectory ( in , ( tdir_t ) dirnum )
UNARY_OPERATOR	2446:10	2446:10	13	!
LEAF_NODE	2446:10	2446:10	14	!
FUNCTION_CALL	2446:11	2446:46	13	TIFFSetDirectory ( in , ( tdir_t ) dirnum )
CALLEE	2446:11	2446:11	14	TIFFSetDirectory
LEAF_NODE	2446:11	2446:11	15	TIFFSetDirectory
LEAF_NODE	2446:27	2446:27	14	(
ARGUMENT	2446:28	2446:28	14	in
FIELD	2446:28	2446:28	15	in
LEAF_NODE	2446:28	2446:28	16	in
LEAF_NODE	2446:30	2446:30	14	,
ARGUMENT	2446:32	2446:40	14	( tdir_t ) dirnum
LEAF_NODE	2446:32	2446:32	15	(
TYPE_NAME	2446:33	2446:33	15	tdir_t
LEAF_NODE	2446:33	2446:33	16	tdir_t
LEAF_NODE	2446:39	2446:39	15	)
FIELD	2446:40	2446:40	15	dirnum
LEAF_NODE	2446:40	2446:40	16	dirnum
LEAF_NODE	2446:46	2446:46	14	)
LEAF_NODE	2446:47	2446:47	10	)
STATEMENTS	2447:8	2447:8	10	
EXPR_STATEMENT	2447:8	2447:27	11	end_of_input = TRUE ;
EXPR	2447:8	2447:8	12	end_of_input = TRUE
ASSIGN	2447:8	2447:23	13	end_of_input = TRUE
LVAL	2447:8	2447:8	14	end_of_input
FIELD	2447:8	2447:8	15	end_of_input
LEAF_NODE	2447:8	2447:8	16	end_of_input
ASSIGN_OP	2447:21	2447:21	14	=
LEAF_NODE	2447:21	2447:21	15	=
RVAL	2447:23	2447:23	14	TRUE
FIELD	2447:23	2447:23	15	TRUE
LEAF_NODE	2447:23	2447:23	16	TRUE
LEAF_NODE	2447:27	2447:27	12	;
LEAF_NODE	2448:6	2448:6	8	}
EXPR_STATEMENT	2449:4	2449:17	6	TIFFClose ( in ) ;
EXPR	2449:4	2449:4	7	TIFFClose ( in )
FUNCTION_CALL	2449:4	2449:16	8	TIFFClose ( in )
CALLEE	2449:4	2449:4	9	TIFFClose
LEAF_NODE	2449:4	2449:4	10	TIFFClose
LEAF_NODE	2449:13	2449:13	9	(
ARGUMENT	2449:14	2449:14	9	in
FIELD	2449:14	2449:14	10	in
LEAF_NODE	2449:14	2449:14	11	in
LEAF_NODE	2449:16	2449:16	9	)
LEAF_NODE	2449:17	2449:17	7	;
EXPR_STATEMENT	2450:4	2450:12	6	optind ++ ;
EXPR	2450:4	2450:4	7	optind ++
FIELD	2450:4	2450:10	8	optind ++
LEAF_NODE	2450:4	2450:4	9	optind
LEAF_NODE	2450:10	2450:10	9	++
LEAF_NODE	2450:12	2450:12	7	;
LEAF_NODE	2451:4	2451:4	5	}
SELECTION	2454:2	2455:4	3	
KEYWORD	2454:2	2454:2	4	if
LEAF_NODE	2454:2	2454:2	5	if
LEAF_NODE	2454:5	2454:5	4	(
CONDITION	2454:6	2454:6	4	read_buff
EXPR	2454:6	2454:6	5	read_buff
FIELD	2454:6	2454:6	6	read_buff
LEAF_NODE	2454:6	2454:6	7	read_buff
LEAF_NODE	2454:15	2454:15	4	)
STATEMENTS	2455:4	2455:4	4	
EXPR_STATEMENT	2455:4	2455:24	5	_TIFFfree ( read_buff ) ;
EXPR	2455:4	2455:4	6	_TIFFfree ( read_buff )
FUNCTION_CALL	2455:4	2455:23	7	_TIFFfree ( read_buff )
CALLEE	2455:4	2455:4	8	_TIFFfree
LEAF_NODE	2455:4	2455:4	9	_TIFFfree
LEAF_NODE	2455:13	2455:13	8	(
ARGUMENT	2455:14	2455:14	8	read_buff
FIELD	2455:14	2455:14	9	read_buff
LEAF_NODE	2455:14	2455:14	10	read_buff
LEAF_NODE	2455:23	2455:23	8	)
LEAF_NODE	2455:24	2455:24	6	;
SELECTION	2457:2	2458:4	3	
KEYWORD	2457:2	2457:2	4	if
LEAF_NODE	2457:2	2457:2	5	if
LEAF_NODE	2457:5	2457:5	4	(
CONDITION	2457:6	2457:6	4	crop_buff
EXPR	2457:6	2457:6	5	crop_buff
FIELD	2457:6	2457:6	6	crop_buff
LEAF_NODE	2457:6	2457:6	7	crop_buff
LEAF_NODE	2457:15	2457:15	4	)
STATEMENTS	2458:4	2458:4	4	
EXPR_STATEMENT	2458:4	2458:24	5	_TIFFfree ( crop_buff ) ;
EXPR	2458:4	2458:4	6	_TIFFfree ( crop_buff )
FUNCTION_CALL	2458:4	2458:23	7	_TIFFfree ( crop_buff )
CALLEE	2458:4	2458:4	8	_TIFFfree
LEAF_NODE	2458:4	2458:4	9	_TIFFfree
LEAF_NODE	2458:13	2458:13	8	(
ARGUMENT	2458:14	2458:14	8	crop_buff
FIELD	2458:14	2458:14	9	crop_buff
LEAF_NODE	2458:14	2458:14	10	crop_buff
LEAF_NODE	2458:23	2458:23	8	)
LEAF_NODE	2458:24	2458:24	6	;
SELECTION	2460:2	2461:4	3	
KEYWORD	2460:2	2460:2	4	if
LEAF_NODE	2460:2	2460:2	5	if
LEAF_NODE	2460:5	2460:5	4	(
CONDITION	2460:6	2460:6	4	sect_buff
EXPR	2460:6	2460:6	5	sect_buff
FIELD	2460:6	2460:6	6	sect_buff
LEAF_NODE	2460:6	2460:6	7	sect_buff
LEAF_NODE	2460:15	2460:15	4	)
STATEMENTS	2461:4	2461:4	4	
EXPR_STATEMENT	2461:4	2461:24	5	_TIFFfree ( sect_buff ) ;
EXPR	2461:4	2461:4	6	_TIFFfree ( sect_buff )
FUNCTION_CALL	2461:4	2461:23	7	_TIFFfree ( sect_buff )
CALLEE	2461:4	2461:4	8	_TIFFfree
LEAF_NODE	2461:4	2461:4	9	_TIFFfree
LEAF_NODE	2461:13	2461:13	8	(
ARGUMENT	2461:14	2461:14	8	sect_buff
FIELD	2461:14	2461:14	9	sect_buff
LEAF_NODE	2461:14	2461:14	10	sect_buff
LEAF_NODE	2461:23	2461:23	8	)
LEAF_NODE	2461:24	2461:24	6	;
ITERATION	2464:2	2465:4	3	
KEYWORD	2464:2	2464:2	4	for
LEAF_NODE	2464:2	2464:2	5	for
LEAF_NODE	2464:6	2464:6	4	(
FOR_INIT	2464:7	2464:14	4	seg = 0 ;
EXPR	2464:7	2464:7	5	seg = 0
ASSIGN	2464:7	2464:13	6	seg = 0
LVAL	2464:7	2464:7	7	seg
FIELD	2464:7	2464:7	8	seg
LEAF_NODE	2464:7	2464:7	9	seg
ASSIGN_OP	2464:11	2464:11	7	=
LEAF_NODE	2464:11	2464:11	8	=
RVAL	2464:13	2464:13	7	0
FIELD	2464:13	2464:13	8	0
LEAF_NODE	2464:13	2464:13	9	0
LEAF_NODE	2464:14	2464:14	5	;
CONDITION	2464:16	2464:16	4	seg < crop . selections
EXPR	2464:16	2464:22	5	seg < crop . selections
FIELD	2464:16	2464:16	6	seg
LEAF_NODE	2464:16	2464:16	7	seg
REL_OPERATOR	2464:20	2464:20	6	<
LEAF_NODE	2464:20	2464:20	7	<
FIELD	2464:22	2464:27	6	crop . selections
LEAF_NODE	2464:22	2464:22	7	crop
LEAF_NODE	2464:26	2464:26	7	.
LEAF_NODE	2464:27	2464:27	7	selections
LEAF_NODE	2464:37	2464:37	4	;
FOR_EXPR	2464:39	2464:39	4	seg ++
EXPR	2464:39	2464:39	5	seg ++
FIELD	2464:39	2464:42	6	seg ++
LEAF_NODE	2464:39	2464:39	7	seg
LEAF_NODE	2464:42	2464:42	7	++
LEAF_NODE	2464:44	2464:44	4	)
STATEMENTS	2465:4	2465:4	4	
EXPR_STATEMENT	2465:4	2465:37	5	_TIFFfree ( seg_buffs [ seg ] . buffer ) ;
EXPR	2465:4	2465:4	6	_TIFFfree ( seg_buffs [ seg ] . buffer )
FUNCTION_CALL	2465:4	2465:36	7	_TIFFfree ( seg_buffs [ seg ] . buffer )
CALLEE	2465:4	2465:4	8	_TIFFfree
LEAF_NODE	2465:4	2465:4	9	_TIFFfree
LEAF_NODE	2465:14	2465:14	8	(
ARGUMENT	2465:15	2465:15	8	seg_buffs [ seg ] . buffer
FIELD	2465:15	2465:30	9	seg_buffs [ seg ] . buffer
LEAF_NODE	2465:15	2465:15	10	seg_buffs
LEAF_NODE	2465:24	2465:24	10	[
EXPR	2465:25	2465:25	10	seg
FIELD	2465:25	2465:25	11	seg
LEAF_NODE	2465:25	2465:25	12	seg
LEAF_NODE	2465:28	2465:28	10	]
LEAF_NODE	2465:29	2465:29	10	.
LEAF_NODE	2465:30	2465:30	10	buffer
LEAF_NODE	2465:36	2465:36	8	)
LEAF_NODE	2465:37	2465:37	6	;
SELECTION	2467:2	2468:4	3	
KEYWORD	2467:2	2467:2	4	if
LEAF_NODE	2467:2	2467:2	5	if
LEAF_NODE	2467:5	2467:5	4	(
CONDITION	2467:6	2467:6	4	dump . format != DUMP_NONE
EXPR	2467:6	2467:21	5	dump . format != DUMP_NONE
FIELD	2467:6	2467:11	6	dump . format
LEAF_NODE	2467:6	2467:6	7	dump
LEAF_NODE	2467:10	2467:10	7	.
LEAF_NODE	2467:11	2467:11	7	format
EQ_OPERATOR	2467:18	2467:18	6	!=
LEAF_NODE	2467:18	2467:18	7	!=
FIELD	2467:21	2467:21	6	DUMP_NONE
LEAF_NODE	2467:21	2467:21	7	DUMP_NONE
LEAF_NODE	2467:30	2467:30	4	)
STATEMENTS	2468:4	2477:4	4	
LEAF_NODE	2468:4	2468:4	5	{
STATEMENTS	2469:4	2472:4	5	
SELECTION	2469:4	2470:5	6	
KEYWORD	2469:4	2469:4	7	if
LEAF_NODE	2469:4	2469:4	8	if
LEAF_NODE	2469:7	2469:7	7	(
CONDITION	2469:8	2469:8	7	dump . infile != NULL
EXPR	2469:8	2469:23	8	dump . infile != NULL
FIELD	2469:8	2469:13	9	dump . infile
LEAF_NODE	2469:8	2469:8	10	dump
LEAF_NODE	2469:12	2469:12	10	.
LEAF_NODE	2469:13	2469:13	10	infile
EQ_OPERATOR	2469:20	2469:20	9	!=
LEAF_NODE	2469:20	2469:20	10	!=
FIELD	2469:23	2469:23	9	NULL
LEAF_NODE	2469:23	2469:23	10	NULL
LEAF_NODE	2469:27	2469:27	7	)
STATEMENTS	2470:5	2470:5	7	
EXPR_STATEMENT	2470:5	2470:25	8	fclose ( dump . infile ) ;
EXPR	2470:5	2470:5	9	fclose ( dump . infile )
FUNCTION_CALL	2470:5	2470:24	10	fclose ( dump . infile )
CALLEE	2470:5	2470:5	11	fclose
LEAF_NODE	2470:5	2470:5	12	fclose
LEAF_NODE	2470:12	2470:12	11	(
ARGUMENT	2470:13	2470:13	11	dump . infile
FIELD	2470:13	2470:18	12	dump . infile
LEAF_NODE	2470:13	2470:13	13	dump
LEAF_NODE	2470:17	2470:17	13	.
LEAF_NODE	2470:18	2470:18	13	infile
LEAF_NODE	2470:24	2470:24	11	)
LEAF_NODE	2470:25	2470:25	9	;
SELECTION	2472:4	2473:6	6	
KEYWORD	2472:4	2472:4	7	if
LEAF_NODE	2472:4	2472:4	8	if
LEAF_NODE	2472:7	2472:7	7	(
CONDITION	2472:8	2472:8	7	dump . outfile != NULL
EXPR	2472:8	2472:24	8	dump . outfile != NULL
FIELD	2472:8	2472:13	9	dump . outfile
LEAF_NODE	2472:8	2472:8	10	dump
LEAF_NODE	2472:12	2472:12	10	.
LEAF_NODE	2472:13	2472:13	10	outfile
EQ_OPERATOR	2472:21	2472:21	9	!=
LEAF_NODE	2472:21	2472:21	10	!=
FIELD	2472:24	2472:24	9	NULL
LEAF_NODE	2472:24	2472:24	10	NULL
LEAF_NODE	2472:28	2472:28	7	)
STATEMENTS	2473:6	2476:6	7	
LEAF_NODE	2473:6	2473:6	8	{
STATEMENTS	2474:6	2475:6	8	
EXPR_STATEMENT	2474:6	2474:90	9	dump_info ( dump . outfile , dump . format , "" , "Completed run for %s" , TIFFFileName ( out ) ) ;
EXPR	2474:6	2474:6	10	dump_info ( dump . outfile , dump . format , "" , "Completed run for %s" , TIFFFileName ( out ) )
FUNCTION_CALL	2474:6	2474:89	11	dump_info ( dump . outfile , dump . format , "" , "Completed run for %s" , TIFFFileName ( out ) )
CALLEE	2474:6	2474:6	12	dump_info
LEAF_NODE	2474:6	2474:6	13	dump_info
LEAF_NODE	2474:16	2474:16	12	(
ARGUMENT	2474:17	2474:17	12	dump . outfile
FIELD	2474:17	2474:22	13	dump . outfile
LEAF_NODE	2474:17	2474:17	14	dump
LEAF_NODE	2474:21	2474:21	14	.
LEAF_NODE	2474:22	2474:22	14	outfile
LEAF_NODE	2474:29	2474:29	12	,
ARGUMENT	2474:31	2474:31	12	dump . format
FIELD	2474:31	2474:36	13	dump . format
LEAF_NODE	2474:31	2474:31	14	dump
LEAF_NODE	2474:35	2474:35	14	.
LEAF_NODE	2474:36	2474:36	14	format
LEAF_NODE	2474:42	2474:42	12	,
ARGUMENT	2474:44	2474:44	12	""
FIELD	2474:44	2474:44	13	""
LEAF_NODE	2474:44	2474:44	14	""
LEAF_NODE	2474:46	2474:46	12	,
ARGUMENT	2474:48	2474:48	12	"Completed run for %s"
FIELD	2474:48	2474:48	13	"Completed run for %s"
LEAF_NODE	2474:48	2474:48	14	"Completed run for %s"
LEAF_NODE	2474:70	2474:70	12	,
ARGUMENT	2474:72	2474:72	12	TIFFFileName ( out )
FUNCTION_CALL	2474:72	2474:88	13	TIFFFileName ( out )
CALLEE	2474:72	2474:72	14	TIFFFileName
LEAF_NODE	2474:72	2474:72	15	TIFFFileName
LEAF_NODE	2474:84	2474:84	14	(
ARGUMENT	2474:85	2474:85	14	out
FIELD	2474:85	2474:85	15	out
LEAF_NODE	2474:85	2474:85	16	out
LEAF_NODE	2474:88	2474:88	14	)
LEAF_NODE	2474:89	2474:89	12	)
LEAF_NODE	2474:90	2474:90	10	;
EXPR_STATEMENT	2475:6	2475:27	9	fclose ( dump . outfile ) ;
EXPR	2475:6	2475:6	10	fclose ( dump . outfile )
FUNCTION_CALL	2475:6	2475:26	11	fclose ( dump . outfile )
CALLEE	2475:6	2475:6	12	fclose
LEAF_NODE	2475:6	2475:6	13	fclose
LEAF_NODE	2475:13	2475:13	12	(
ARGUMENT	2475:14	2475:14	12	dump . outfile
FIELD	2475:14	2475:19	13	dump . outfile
LEAF_NODE	2475:14	2475:14	14	dump
LEAF_NODE	2475:18	2475:18	14	.
LEAF_NODE	2475:19	2475:19	14	outfile
LEAF_NODE	2475:26	2475:26	12	)
LEAF_NODE	2475:27	2475:27	10	;
LEAF_NODE	2476:6	2476:6	8	}
LEAF_NODE	2477:4	2477:4	5	}
EXPR_STATEMENT	2479:2	2479:16	3	TIFFClose ( out ) ;
EXPR	2479:2	2479:2	4	TIFFClose ( out )
FUNCTION_CALL	2479:2	2479:15	5	TIFFClose ( out )
CALLEE	2479:2	2479:2	6	TIFFClose
LEAF_NODE	2479:2	2479:2	7	TIFFClose
LEAF_NODE	2479:11	2479:11	6	(
ARGUMENT	2479:12	2479:12	6	out
FIELD	2479:12	2479:12	7	out
LEAF_NODE	2479:12	2479:12	8	out
LEAF_NODE	2479:15	2479:15	6	)
LEAF_NODE	2479:16	2479:16	4	;
JUMP_STATEMENT	2481:2	2481:12	3	return ( 0 ) ;
KEYWORD	2481:2	2481:2	4	return
LEAF_NODE	2481:2	2481:2	5	return
DESTINATION	2481:9	2481:9	4	( 0 )
EXPR	2481:9	2481:11	5	( 0 )
LEAF_NODE	2481:9	2481:9	6	(
FIELD	2481:10	2481:10	6	0
LEAF_NODE	2481:10	2481:10	7	0
LEAF_NODE	2481:11	2481:11	6	)
LEAF_NODE	2481:12	2481:12	4	;
LEAF_NODE	2482:2	2482:2	2	}
FUNCTION_DEF	2486:0	2524:2	1	
RETURN_TYPE	2486:0	2486:7	2	static int
LEAF_NODE	2486:0	2486:0	3	static
TYPE_NAME	2486:7	2486:7	3	int
LEAF_NODE	2486:7	2486:7	4	int
FUNCTION_NAME	2486:11	2486:11	2	dump_data
LEAF_NODE	2486:11	2486:11	3	dump_data
PARAMETER_LIST	2486:21	2486:99	2	( FILE * dumpfile , int format , char * dump_tag , unsigned char * data , uint32 count )
LEAF_NODE	2486:21	2486:21	3	(
PARAMETER_DECL	2486:22	2486:28	3	FILE * dumpfile
TYPE	2486:22	2486:27	4	FILE *
TYPE_NAME	2486:22	2486:22	5	FILE
LEAF_NODE	2486:22	2486:22	6	FILE
POINTER	2486:27	2486:27	5	*
LEAF_NODE	2486:27	2486:27	6	*
NAME	2486:28	2486:28	4	dumpfile
LEAF_NODE	2486:28	2486:28	5	dumpfile
LEAF_NODE	2486:36	2486:36	3	,
PARAMETER_DECL	2486:38	2486:42	3	int format
TYPE	2486:38	2486:38	4	int
TYPE_NAME	2486:38	2486:38	5	int
LEAF_NODE	2486:38	2486:38	6	int
NAME	2486:42	2486:42	4	format
LEAF_NODE	2486:42	2486:42	5	format
LEAF_NODE	2486:48	2486:48	3	,
PARAMETER_DECL	2486:50	2486:56	3	char * dump_tag
TYPE	2486:50	2486:55	4	char *
TYPE_NAME	2486:50	2486:50	5	char
LEAF_NODE	2486:50	2486:50	6	char
POINTER	2486:55	2486:55	5	*
LEAF_NODE	2486:55	2486:55	6	*
NAME	2486:56	2486:56	4	dump_tag
LEAF_NODE	2486:56	2486:56	5	dump_tag
LEAF_NODE	2486:64	2486:64	3	,
PARAMETER_DECL	2486:66	2486:81	3	unsigned char * data
TYPE	2486:66	2486:80	4	unsigned char *
TYPE_NAME	2486:66	2486:75	5	unsigned char
LEAF_NODE	2486:66	2486:66	6	unsigned
LEAF_NODE	2486:75	2486:75	6	char
POINTER	2486:80	2486:80	5	*
LEAF_NODE	2486:80	2486:80	6	*
NAME	2486:81	2486:81	4	data
LEAF_NODE	2486:81	2486:81	5	data
LEAF_NODE	2486:85	2486:85	3	,
PARAMETER_DECL	2486:87	2486:94	3	uint32 count
TYPE	2486:87	2486:87	4	uint32
TYPE_NAME	2486:87	2486:87	5	uint32
LEAF_NODE	2486:87	2486:87	6	uint32
NAME	2486:94	2486:94	4	count
LEAF_NODE	2486:94	2486:94	5	count
LEAF_NODE	2486:99	2486:99	3	)
LEAF_NODE	2487:2	2487:2	2	{
STATEMENTS	2488:2	2523:2	2	
SIMPLE_DECL	2488:2	2488:10	3	int j , int k ;
INIT_DECL_LIST	2488:2	2488:2	4	int j , int k
VAR_DECL	2488:2	2488:6	5	int j
TYPE	2488:2	2488:2	6	int
TYPE_NAME	2488:2	2488:2	7	int
LEAF_NODE	2488:2	2488:2	8	int
NAME	2488:6	2488:6	6	j
LEAF_NODE	2488:6	2488:6	7	j
LEAF_NODE	2488:7	2488:7	5	,
VAR_DECL	2488:2	2488:9	5	int k
TYPE	2488:2	2488:2	6	int
TYPE_NAME	2488:2	2488:2	7	int
LEAF_NODE	2488:2	2488:2	8	int
NAME	2488:9	2488:9	6	k
LEAF_NODE	2488:9	2488:9	7	k
LEAF_NODE	2488:10	2488:10	4	;
SIMPLE_DECL	2489:2	2489:10	3	uint32 i ;
VAR_DECL	2489:2	2489:9	4	uint32 i
TYPE	2489:2	2489:2	5	uint32
TYPE_NAME	2489:2	2489:2	6	uint32
LEAF_NODE	2489:2	2489:2	7	uint32
NAME	2489:9	2489:9	5	i
LEAF_NODE	2489:9	2489:9	6	i
LEAF_NODE	2489:10	2489:10	4	;
SIMPLE_DECL	2490:2	2490:22	3	char [ 10 ] dump_array ;
VAR_DECL	2490:2	2490:8	4	char [ 10 ] dump_array
TYPE	2490:2	2490:18	5	char [ 10 ]
TYPE_NAME	2490:2	2490:2	6	char
LEAF_NODE	2490:2	2490:2	7	char
TYPE_SUFFIX	2490:18	2490:21	6	[ 10 ]
LEAF_NODE	2490:18	2490:18	7	[
FIELD	2490:19	2490:19	7	10
LEAF_NODE	2490:19	2490:19	8	10
LEAF_NODE	2490:21	2490:21	7	]
NAME	2490:8	2490:8	5	dump_array
LEAF_NODE	2490:8	2490:8	6	dump_array
LEAF_NODE	2490:22	2490:22	4	;
SIMPLE_DECL	2491:2	2491:22	3	unsigned char bitset ;
VAR_DECL	2491:2	2491:16	4	unsigned char bitset
TYPE	2491:2	2491:2	5	unsigned char
TYPE_NAME	2491:2	2491:11	6	unsigned char
LEAF_NODE	2491:2	2491:2	7	unsigned
LEAF_NODE	2491:11	2491:11	7	char
NAME	2491:16	2491:16	5	bitset
LEAF_NODE	2491:16	2491:16	6	bitset
LEAF_NODE	2491:22	2491:22	4	;
SELECTION	2493:2	2494:4	3	
KEYWORD	2493:2	2493:2	4	if
LEAF_NODE	2493:2	2493:2	5	if
LEAF_NODE	2493:5	2493:5	4	(
CONDITION	2493:6	2493:6	4	dumpfile == NULL
EXPR	2493:6	2493:18	5	dumpfile == NULL
FIELD	2493:6	2493:6	6	dumpfile
LEAF_NODE	2493:6	2493:6	7	dumpfile
EQ_OPERATOR	2493:15	2493:15	6	==
LEAF_NODE	2493:15	2493:15	7	==
FIELD	2493:18	2493:18	6	NULL
LEAF_NODE	2493:18	2493:18	7	NULL
LEAF_NODE	2493:22	2493:22	4	)
STATEMENTS	2494:4	2497:4	4	
LEAF_NODE	2494:4	2494:4	5	{
STATEMENTS	2495:4	2496:4	5	
EXPR_STATEMENT	2495:4	2495:56	6	TIFFError ( "" , "Invalid FILE pointer for dump file" ) ;
EXPR	2495:4	2495:4	7	TIFFError ( "" , "Invalid FILE pointer for dump file" )
FUNCTION_CALL	2495:4	2495:55	8	TIFFError ( "" , "Invalid FILE pointer for dump file" )
CALLEE	2495:4	2495:4	9	TIFFError
LEAF_NODE	2495:4	2495:4	10	TIFFError
LEAF_NODE	2495:14	2495:14	9	(
ARGUMENT	2495:15	2495:15	9	""
FIELD	2495:15	2495:15	10	""
LEAF_NODE	2495:15	2495:15	11	""
LEAF_NODE	2495:17	2495:17	9	,
ARGUMENT	2495:19	2495:19	9	"Invalid FILE pointer for dump file"
FIELD	2495:19	2495:19	10	"Invalid FILE pointer for dump file"
LEAF_NODE	2495:19	2495:19	11	"Invalid FILE pointer for dump file"
LEAF_NODE	2495:55	2495:55	9	)
LEAF_NODE	2495:56	2495:56	7	;
JUMP_STATEMENT	2496:4	2496:14	6	return ( 1 ) ;
KEYWORD	2496:4	2496:4	7	return
LEAF_NODE	2496:4	2496:4	8	return
DESTINATION	2496:11	2496:11	7	( 1 )
EXPR	2496:11	2496:13	8	( 1 )
LEAF_NODE	2496:11	2496:11	9	(
FIELD	2496:12	2496:12	9	1
LEAF_NODE	2496:12	2496:12	10	1
LEAF_NODE	2496:13	2496:13	9	)
LEAF_NODE	2496:14	2496:14	7	;
LEAF_NODE	2497:4	2497:4	5	}
SELECTION	2499:2	2500:4	3	
KEYWORD	2499:2	2499:2	4	if
LEAF_NODE	2499:2	2499:2	5	if
LEAF_NODE	2499:5	2499:5	4	(
CONDITION	2499:6	2499:6	4	format == DUMP_TEXT
EXPR	2499:6	2499:16	5	format == DUMP_TEXT
FIELD	2499:6	2499:6	6	format
LEAF_NODE	2499:6	2499:6	7	format
EQ_OPERATOR	2499:13	2499:13	6	==
LEAF_NODE	2499:13	2499:13	7	==
FIELD	2499:16	2499:16	6	DUMP_TEXT
LEAF_NODE	2499:16	2499:16	7	DUMP_TEXT
LEAF_NODE	2499:25	2499:25	4	)
STATEMENTS	2500:4	2513:4	4	
LEAF_NODE	2500:4	2500:4	5	{
STATEMENTS	2501:4	2512:4	5	
EXPR_STATEMENT	2501:4	2501:40	6	fprintf ( dumpfile , " %s  " , dump_tag ) ;
EXPR	2501:4	2501:4	7	fprintf ( dumpfile , " %s  " , dump_tag )
FUNCTION_CALL	2501:4	2501:39	8	fprintf ( dumpfile , " %s  " , dump_tag )
CALLEE	2501:4	2501:4	9	fprintf
LEAF_NODE	2501:4	2501:4	10	fprintf
LEAF_NODE	2501:12	2501:12	9	(
ARGUMENT	2501:13	2501:13	9	dumpfile
FIELD	2501:13	2501:13	10	dumpfile
LEAF_NODE	2501:13	2501:13	11	dumpfile
LEAF_NODE	2501:21	2501:21	9	,
ARGUMENT	2501:22	2501:22	9	" %s  "
FIELD	2501:22	2501:22	10	" %s  "
LEAF_NODE	2501:22	2501:22	11	" %s  "
LEAF_NODE	2501:29	2501:29	9	,
ARGUMENT	2501:31	2501:31	9	dump_tag
FIELD	2501:31	2501:31	10	dump_tag
LEAF_NODE	2501:31	2501:31	11	dump_tag
LEAF_NODE	2501:39	2501:39	9	)
LEAF_NODE	2501:40	2501:40	7	;
ITERATION	2502:4	2503:6	6	
KEYWORD	2502:4	2502:4	7	for
LEAF_NODE	2502:4	2502:4	8	for
LEAF_NODE	2502:8	2502:8	7	(
FOR_INIT	2502:9	2502:14	7	i = 0 ;
EXPR	2502:9	2502:9	8	i = 0
ASSIGN	2502:9	2502:13	9	i = 0
LVAL	2502:9	2502:9	10	i
FIELD	2502:9	2502:9	11	i
LEAF_NODE	2502:9	2502:9	12	i
ASSIGN_OP	2502:11	2502:11	10	=
LEAF_NODE	2502:11	2502:11	11	=
RVAL	2502:13	2502:13	10	0
FIELD	2502:13	2502:13	11	0
LEAF_NODE	2502:13	2502:13	12	0
LEAF_NODE	2502:14	2502:14	8	;
CONDITION	2502:16	2502:16	7	i < count
EXPR	2502:16	2502:20	8	i < count
FIELD	2502:16	2502:16	9	i
LEAF_NODE	2502:16	2502:16	10	i
REL_OPERATOR	2502:18	2502:18	9	<
LEAF_NODE	2502:18	2502:18	10	<
FIELD	2502:20	2502:20	9	count
LEAF_NODE	2502:20	2502:20	10	count
LEAF_NODE	2502:25	2502:25	7	;
FOR_EXPR	2502:27	2502:27	7	i ++
EXPR	2502:27	2502:27	8	i ++
FIELD	2502:27	2502:28	9	i ++
LEAF_NODE	2502:27	2502:27	10	i
LEAF_NODE	2502:28	2502:28	10	++
LEAF_NODE	2502:30	2502:30	7	)
STATEMENTS	2503:6	2511:6	7	
LEAF_NODE	2503:6	2503:6	8	{
STATEMENTS	2504:6	2510:6	8	
ITERATION	2504:6	2505:8	9	
KEYWORD	2504:6	2504:6	10	for
LEAF_NODE	2504:6	2504:6	11	for
LEAF_NODE	2504:10	2504:10	10	(
FOR_INIT	2504:11	2504:23	10	j = 0 , k = 7 ;
EXPR	2504:11	2504:18	11	j = 0 , k = 7
ASSIGN	2504:11	2504:15	12	j = 0
LVAL	2504:11	2504:11	13	j
FIELD	2504:11	2504:11	14	j
LEAF_NODE	2504:11	2504:11	15	j
ASSIGN_OP	2504:13	2504:13	13	=
LEAF_NODE	2504:13	2504:13	14	=
RVAL	2504:15	2504:15	13	0
FIELD	2504:15	2504:15	14	0
LEAF_NODE	2504:15	2504:15	15	0
LEAF_NODE	2504:16	2504:16	12	,
ASSIGN	2504:18	2504:22	12	k = 7
LVAL	2504:18	2504:18	13	k
FIELD	2504:18	2504:18	14	k
LEAF_NODE	2504:18	2504:18	15	k
ASSIGN_OP	2504:20	2504:20	13	=
LEAF_NODE	2504:20	2504:20	14	=
RVAL	2504:22	2504:22	13	7
FIELD	2504:22	2504:22	14	7
LEAF_NODE	2504:22	2504:22	15	7
LEAF_NODE	2504:23	2504:23	11	;
CONDITION	2504:25	2504:25	10	j < 8
EXPR	2504:25	2504:29	11	j < 8
FIELD	2504:25	2504:25	12	j
LEAF_NODE	2504:25	2504:25	13	j
REL_OPERATOR	2504:27	2504:27	12	<
LEAF_NODE	2504:27	2504:27	13	<
FIELD	2504:29	2504:29	12	8
LEAF_NODE	2504:29	2504:29	13	8
LEAF_NODE	2504:30	2504:30	10	;
FOR_EXPR	2504:32	2504:32	10	j ++ , k --
EXPR	2504:32	2504:37	11	j ++ , k --
FIELD	2504:32	2504:33	12	j ++
LEAF_NODE	2504:32	2504:32	13	j
LEAF_NODE	2504:33	2504:33	13	++
LEAF_NODE	2504:35	2504:35	12	,
FIELD	2504:37	2504:38	12	k --
LEAF_NODE	2504:37	2504:37	13	k
LEAF_NODE	2504:38	2504:38	13	--
LEAF_NODE	2504:40	2504:40	10	)
STATEMENTS	2505:8	2508:8	10	
LEAF_NODE	2505:8	2505:8	11	{
STATEMENTS	2506:1	2507:53	11	
EXPR_STATEMENT	2506:1	2506:59	12	bitset = ( * ( data + i ) ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	2506:1	2506:1	13	bitset = ( * ( data + i ) ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	2506:1	2506:10	14	bitset = ( * ( data + i ) ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	2506:1	2506:1	15	bitset
FIELD	2506:1	2506:1	16	bitset
LEAF_NODE	2506:1	2506:1	17	bitset
ASSIGN_OP	2506:8	2506:8	15	=
LEAF_NODE	2506:8	2506:8	16	=
RVAL	2506:10	2506:10	15	( * ( data + i ) ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	2506:10	2506:58	16	( * ( data + i ) ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	2506:10	2506:50	17	( * ( data + i ) ) & ( ( ( unsigned char ) 1 << k ) )
LEAF_NODE	2506:10	2506:10	18	(
UNARY_EXPR	2506:11	2506:21	18	* ( data + i )
UNARY_OPERATOR	2506:11	2506:11	19	*
LEAF_NODE	2506:11	2506:11	20	*
LEAF_NODE	2506:12	2506:12	19	(
FIELD	2506:13	2506:13	19	data
LEAF_NODE	2506:13	2506:13	20	data
LEAF_NODE	2506:18	2506:18	19	+
FIELD	2506:20	2506:20	19	i
LEAF_NODE	2506:20	2506:20	20	i
LEAF_NODE	2506:21	2506:21	19	)
LEAF_NODE	2506:22	2506:22	18	)
LEAF_NODE	2506:24	2506:24	18	&
LEAF_NODE	2506:26	2506:26	18	(
LEAF_NODE	2506:27	2506:27	18	(
LEAF_NODE	2506:28	2506:28	18	(
TYPE_NAME	2506:29	2506:38	18	unsigned char
LEAF_NODE	2506:29	2506:29	19	unsigned
LEAF_NODE	2506:38	2506:38	19	char
LEAF_NODE	2506:42	2506:42	18	)
FIELD	2506:43	2506:43	18	1
LEAF_NODE	2506:43	2506:43	19	1
LEAF_NODE	2506:45	2506:45	18	<<
FIELD	2506:48	2506:48	18	k
LEAF_NODE	2506:48	2506:48	19	k
LEAF_NODE	2506:49	2506:49	18	)
LEAF_NODE	2506:50	2506:50	18	)
LEAF_NODE	2506:52	2506:52	17	?
EXPR	2506:54	2506:54	17	1
FIELD	2506:54	2506:54	18	1
LEAF_NODE	2506:54	2506:54	19	1
LEAF_NODE	2506:56	2506:56	17	:
FIELD	2506:58	2506:58	17	0
LEAF_NODE	2506:58	2506:58	18	0
LEAF_NODE	2506:59	2506:59	13	;
LEAF_NODE	2507:8	2507:8	12	sprintf
LEAF_NODE	2507:15	2507:15	12	(
LEAF_NODE	2507:16	2507:16	12	&
LEAF_NODE	2507:17	2507:17	12	dump_array
LEAF_NODE	2507:27	2507:27	12	[
LEAF_NODE	2507:28	2507:28	12	j
LEAF_NODE	2507:29	2507:29	12	]
LEAF_NODE	2507:30	2507:30	12	,
LEAF_NODE	2507:32	2507:32	12	(
LEAF_NODE	2507:33	2507:33	12	bitset
LEAF_NODE	2507:39	2507:39	12	)
LEAF_NODE	2507:41	2507:41	12	?
LEAF_NODE	2507:43	2507:43	12	"1"
LEAF_NODE	2507:47	2507:47	12	:
LEAF_NODE	2507:49	2507:49	12	"0"
LEAF_NODE	2507:52	2507:52	12	)
LEAF_NODE	2507:53	2507:53	12	;
LEAF_NODE	2508:8	2508:8	11	}
EXPR_STATEMENT	2509:6	2509:26	9	dump_array [ 8 ] = '\0' ;
EXPR	2509:6	2509:6	10	dump_array [ 8 ] = '\0'
ASSIGN	2509:6	2509:22	11	dump_array [ 8 ] = '\0'
LVAL	2509:6	2509:6	12	dump_array [ 8 ]
FIELD	2509:6	2509:18	13	dump_array [ 8 ]
LEAF_NODE	2509:6	2509:6	14	dump_array
LEAF_NODE	2509:16	2509:16	14	[
EXPR	2509:17	2509:17	14	8
FIELD	2509:17	2509:17	15	8
LEAF_NODE	2509:17	2509:17	16	8
LEAF_NODE	2509:18	2509:18	14	]
ASSIGN_OP	2509:20	2509:20	12	=
LEAF_NODE	2509:20	2509:20	13	=
RVAL	2509:22	2509:22	12	'\0'
FIELD	2509:22	2509:22	13	'\0'
LEAF_NODE	2509:22	2509:22	14	'\0'
LEAF_NODE	2509:26	2509:26	10	;
EXPR_STATEMENT	2510:6	2510:42	9	fprintf ( dumpfile , " %s" , dump_array ) ;
EXPR	2510:6	2510:6	10	fprintf ( dumpfile , " %s" , dump_array )
FUNCTION_CALL	2510:6	2510:41	11	fprintf ( dumpfile , " %s" , dump_array )
CALLEE	2510:6	2510:6	12	fprintf
LEAF_NODE	2510:6	2510:6	13	fprintf
LEAF_NODE	2510:14	2510:14	12	(
ARGUMENT	2510:15	2510:15	12	dumpfile
FIELD	2510:15	2510:15	13	dumpfile
LEAF_NODE	2510:15	2510:15	14	dumpfile
LEAF_NODE	2510:23	2510:23	12	,
ARGUMENT	2510:24	2510:24	12	" %s"
FIELD	2510:24	2510:24	13	" %s"
LEAF_NODE	2510:24	2510:24	14	" %s"
LEAF_NODE	2510:29	2510:29	12	,
ARGUMENT	2510:31	2510:31	12	dump_array
FIELD	2510:31	2510:31	13	dump_array
LEAF_NODE	2510:31	2510:31	14	dump_array
LEAF_NODE	2510:41	2510:41	12	)
LEAF_NODE	2510:42	2510:42	10	;
LEAF_NODE	2511:6	2511:6	8	}
EXPR_STATEMENT	2512:4	2512:27	6	fprintf ( dumpfile , "\n" ) ;
EXPR	2512:4	2512:4	7	fprintf ( dumpfile , "\n" )
FUNCTION_CALL	2512:4	2512:26	8	fprintf ( dumpfile , "\n" )
CALLEE	2512:4	2512:4	9	fprintf
LEAF_NODE	2512:4	2512:4	10	fprintf
LEAF_NODE	2512:12	2512:12	9	(
ARGUMENT	2512:13	2512:13	9	dumpfile
FIELD	2512:13	2512:13	10	dumpfile
LEAF_NODE	2512:13	2512:13	11	dumpfile
LEAF_NODE	2512:21	2512:21	9	,
ARGUMENT	2512:22	2512:22	9	"\n"
FIELD	2512:22	2512:22	10	"\n"
LEAF_NODE	2512:22	2512:22	11	"\n"
LEAF_NODE	2512:26	2512:26	9	)
LEAF_NODE	2512:27	2512:27	7	;
LEAF_NODE	2513:4	2513:4	5	}
SELECTION	2514:2	2515:4	3	
KEYWORD	2514:2	2514:2	4	else
LEAF_NODE	2514:2	2514:2	5	else
STATEMENTS	2515:4	2521:4	4	
LEAF_NODE	2515:4	2515:4	5	{
STATEMENTS	2516:4	2516:4	5	
SELECTION	2516:4	2517:6	6	
KEYWORD	2516:4	2516:4	7	if
LEAF_NODE	2516:4	2516:4	8	if
LEAF_NODE	2516:7	2516:7	7	(
CONDITION	2516:8	2516:8	7	( fwrite ( data , 1 , count , dumpfile ) ) != count
EXPR	2516:8	2516:47	8	( fwrite ( data , 1 , count , dumpfile ) ) != count
LEAF_NODE	2516:8	2516:8	9	(
FUNCTION_CALL	2516:9	2516:41	9	fwrite ( data , 1 , count , dumpfile )
CALLEE	2516:9	2516:9	10	fwrite
LEAF_NODE	2516:9	2516:9	11	fwrite
LEAF_NODE	2516:16	2516:16	10	(
ARGUMENT	2516:17	2516:17	10	data
FIELD	2516:17	2516:17	11	data
LEAF_NODE	2516:17	2516:17	12	data
LEAF_NODE	2516:21	2516:21	10	,
ARGUMENT	2516:23	2516:23	10	1
FIELD	2516:23	2516:23	11	1
LEAF_NODE	2516:23	2516:23	12	1
LEAF_NODE	2516:24	2516:24	10	,
ARGUMENT	2516:26	2516:26	10	count
FIELD	2516:26	2516:26	11	count
LEAF_NODE	2516:26	2516:26	12	count
LEAF_NODE	2516:31	2516:31	10	,
ARGUMENT	2516:33	2516:33	10	dumpfile
FIELD	2516:33	2516:33	11	dumpfile
LEAF_NODE	2516:33	2516:33	12	dumpfile
LEAF_NODE	2516:41	2516:41	10	)
LEAF_NODE	2516:42	2516:42	9	)
EQ_OPERATOR	2516:44	2516:44	9	!=
LEAF_NODE	2516:44	2516:44	10	!=
FIELD	2516:47	2516:47	9	count
LEAF_NODE	2516:47	2516:47	10	count
LEAF_NODE	2516:52	2516:52	7	)
STATEMENTS	2517:6	2520:6	7	
LEAF_NODE	2517:6	2517:6	8	{
STATEMENTS	2518:6	2519:6	8	
EXPR_STATEMENT	2518:6	2518:64	9	TIFFError ( "" , "Unable to write binary data to dump file" ) ;
EXPR	2518:6	2518:6	10	TIFFError ( "" , "Unable to write binary data to dump file" )
FUNCTION_CALL	2518:6	2518:63	11	TIFFError ( "" , "Unable to write binary data to dump file" )
CALLEE	2518:6	2518:6	12	TIFFError
LEAF_NODE	2518:6	2518:6	13	TIFFError
LEAF_NODE	2518:16	2518:16	12	(
ARGUMENT	2518:17	2518:17	12	""
FIELD	2518:17	2518:17	13	""
LEAF_NODE	2518:17	2518:17	14	""
LEAF_NODE	2518:19	2518:19	12	,
ARGUMENT	2518:21	2518:21	12	"Unable to write binary data to dump file"
FIELD	2518:21	2518:21	13	"Unable to write binary data to dump file"
LEAF_NODE	2518:21	2518:21	14	"Unable to write binary data to dump file"
LEAF_NODE	2518:63	2518:63	12	)
LEAF_NODE	2518:64	2518:64	10	;
JUMP_STATEMENT	2519:6	2519:16	9	return ( 1 ) ;
KEYWORD	2519:6	2519:6	10	return
LEAF_NODE	2519:6	2519:6	11	return
DESTINATION	2519:13	2519:13	10	( 1 )
EXPR	2519:13	2519:15	11	( 1 )
LEAF_NODE	2519:13	2519:13	12	(
FIELD	2519:14	2519:14	12	1
LEAF_NODE	2519:14	2519:14	13	1
LEAF_NODE	2519:15	2519:15	12	)
LEAF_NODE	2519:16	2519:16	10	;
LEAF_NODE	2520:6	2520:6	8	}
LEAF_NODE	2521:4	2521:4	5	}
JUMP_STATEMENT	2523:2	2523:12	3	return ( 0 ) ;
KEYWORD	2523:2	2523:2	4	return
LEAF_NODE	2523:2	2523:2	5	return
DESTINATION	2523:9	2523:9	4	( 0 )
EXPR	2523:9	2523:11	5	( 0 )
LEAF_NODE	2523:9	2523:9	6	(
FIELD	2523:10	2523:10	6	0
LEAF_NODE	2523:10	2523:10	7	0
LEAF_NODE	2523:11	2523:11	6	)
LEAF_NODE	2523:12	2523:12	4	;
LEAF_NODE	2524:2	2524:2	2	}
FUNCTION_DEF	2526:0	2559:2	1	
RETURN_TYPE	2526:0	2526:7	2	static int
LEAF_NODE	2526:0	2526:0	3	static
TYPE_NAME	2526:7	2526:7	3	int
LEAF_NODE	2526:7	2526:7	4	int
FUNCTION_NAME	2526:11	2526:11	2	dump_byte
LEAF_NODE	2526:11	2526:11	3	dump_byte
PARAMETER_LIST	2526:21	2526:84	2	( FILE * dumpfile , int format , char * dump_tag , unsigned char data )
LEAF_NODE	2526:21	2526:21	3	(
PARAMETER_DECL	2526:22	2526:28	3	FILE * dumpfile
TYPE	2526:22	2526:27	4	FILE *
TYPE_NAME	2526:22	2526:22	5	FILE
LEAF_NODE	2526:22	2526:22	6	FILE
POINTER	2526:27	2526:27	5	*
LEAF_NODE	2526:27	2526:27	6	*
NAME	2526:28	2526:28	4	dumpfile
LEAF_NODE	2526:28	2526:28	5	dumpfile
LEAF_NODE	2526:36	2526:36	3	,
PARAMETER_DECL	2526:38	2526:42	3	int format
TYPE	2526:38	2526:38	4	int
TYPE_NAME	2526:38	2526:38	5	int
LEAF_NODE	2526:38	2526:38	6	int
NAME	2526:42	2526:42	4	format
LEAF_NODE	2526:42	2526:42	5	format
LEAF_NODE	2526:48	2526:48	3	,
PARAMETER_DECL	2526:50	2526:56	3	char * dump_tag
TYPE	2526:50	2526:55	4	char *
TYPE_NAME	2526:50	2526:50	5	char
LEAF_NODE	2526:50	2526:50	6	char
POINTER	2526:55	2526:55	5	*
LEAF_NODE	2526:55	2526:55	6	*
NAME	2526:56	2526:56	4	dump_tag
LEAF_NODE	2526:56	2526:56	5	dump_tag
LEAF_NODE	2526:64	2526:64	3	,
PARAMETER_DECL	2526:66	2526:80	3	unsigned char data
TYPE	2526:66	2526:66	4	unsigned char
TYPE_NAME	2526:66	2526:75	5	unsigned char
LEAF_NODE	2526:66	2526:66	6	unsigned
LEAF_NODE	2526:75	2526:75	6	char
NAME	2526:80	2526:80	4	data
LEAF_NODE	2526:80	2526:80	5	data
LEAF_NODE	2526:84	2526:84	3	)
LEAF_NODE	2527:2	2527:2	2	{
STATEMENTS	2528:2	2558:2	2	
SIMPLE_DECL	2528:2	2528:10	3	int j , int k ;
INIT_DECL_LIST	2528:2	2528:2	4	int j , int k
VAR_DECL	2528:2	2528:6	5	int j
TYPE	2528:2	2528:2	6	int
TYPE_NAME	2528:2	2528:2	7	int
LEAF_NODE	2528:2	2528:2	8	int
NAME	2528:6	2528:6	6	j
LEAF_NODE	2528:6	2528:6	7	j
LEAF_NODE	2528:7	2528:7	5	,
VAR_DECL	2528:2	2528:9	5	int k
TYPE	2528:2	2528:2	6	int
TYPE_NAME	2528:2	2528:2	7	int
LEAF_NODE	2528:2	2528:2	8	int
NAME	2528:9	2528:9	6	k
LEAF_NODE	2528:9	2528:9	7	k
LEAF_NODE	2528:10	2528:10	4	;
SIMPLE_DECL	2529:2	2529:22	3	char [ 10 ] dump_array ;
VAR_DECL	2529:2	2529:8	4	char [ 10 ] dump_array
TYPE	2529:2	2529:18	5	char [ 10 ]
TYPE_NAME	2529:2	2529:2	6	char
LEAF_NODE	2529:2	2529:2	7	char
TYPE_SUFFIX	2529:18	2529:21	6	[ 10 ]
LEAF_NODE	2529:18	2529:18	7	[
FIELD	2529:19	2529:19	7	10
LEAF_NODE	2529:19	2529:19	8	10
LEAF_NODE	2529:21	2529:21	7	]
NAME	2529:8	2529:8	5	dump_array
LEAF_NODE	2529:8	2529:8	6	dump_array
LEAF_NODE	2529:22	2529:22	4	;
SIMPLE_DECL	2530:2	2530:22	3	unsigned char bitset ;
VAR_DECL	2530:2	2530:16	4	unsigned char bitset
TYPE	2530:2	2530:2	5	unsigned char
TYPE_NAME	2530:2	2530:11	6	unsigned char
LEAF_NODE	2530:2	2530:2	7	unsigned
LEAF_NODE	2530:11	2530:11	7	char
NAME	2530:16	2530:16	5	bitset
LEAF_NODE	2530:16	2530:16	6	bitset
LEAF_NODE	2530:22	2530:22	4	;
SELECTION	2532:2	2533:4	3	
KEYWORD	2532:2	2532:2	4	if
LEAF_NODE	2532:2	2532:2	5	if
LEAF_NODE	2532:5	2532:5	4	(
CONDITION	2532:6	2532:6	4	dumpfile == NULL
EXPR	2532:6	2532:18	5	dumpfile == NULL
FIELD	2532:6	2532:6	6	dumpfile
LEAF_NODE	2532:6	2532:6	7	dumpfile
EQ_OPERATOR	2532:15	2532:15	6	==
LEAF_NODE	2532:15	2532:15	7	==
FIELD	2532:18	2532:18	6	NULL
LEAF_NODE	2532:18	2532:18	7	NULL
LEAF_NODE	2532:22	2532:22	4	)
STATEMENTS	2533:4	2536:4	4	
LEAF_NODE	2533:4	2533:4	5	{
STATEMENTS	2534:4	2535:4	5	
EXPR_STATEMENT	2534:4	2534:56	6	TIFFError ( "" , "Invalid FILE pointer for dump file" ) ;
EXPR	2534:4	2534:4	7	TIFFError ( "" , "Invalid FILE pointer for dump file" )
FUNCTION_CALL	2534:4	2534:55	8	TIFFError ( "" , "Invalid FILE pointer for dump file" )
CALLEE	2534:4	2534:4	9	TIFFError
LEAF_NODE	2534:4	2534:4	10	TIFFError
LEAF_NODE	2534:14	2534:14	9	(
ARGUMENT	2534:15	2534:15	9	""
FIELD	2534:15	2534:15	10	""
LEAF_NODE	2534:15	2534:15	11	""
LEAF_NODE	2534:17	2534:17	9	,
ARGUMENT	2534:19	2534:19	9	"Invalid FILE pointer for dump file"
FIELD	2534:19	2534:19	10	"Invalid FILE pointer for dump file"
LEAF_NODE	2534:19	2534:19	11	"Invalid FILE pointer for dump file"
LEAF_NODE	2534:55	2534:55	9	)
LEAF_NODE	2534:56	2534:56	7	;
JUMP_STATEMENT	2535:4	2535:14	6	return ( 1 ) ;
KEYWORD	2535:4	2535:4	7	return
LEAF_NODE	2535:4	2535:4	8	return
DESTINATION	2535:11	2535:11	7	( 1 )
EXPR	2535:11	2535:13	8	( 1 )
LEAF_NODE	2535:11	2535:11	9	(
FIELD	2535:12	2535:12	9	1
LEAF_NODE	2535:12	2535:12	10	1
LEAF_NODE	2535:13	2535:13	9	)
LEAF_NODE	2535:14	2535:14	7	;
LEAF_NODE	2536:4	2536:4	5	}
SELECTION	2538:2	2539:4	3	
KEYWORD	2538:2	2538:2	4	if
LEAF_NODE	2538:2	2538:2	5	if
LEAF_NODE	2538:5	2538:5	4	(
CONDITION	2538:6	2538:6	4	format == DUMP_TEXT
EXPR	2538:6	2538:16	5	format == DUMP_TEXT
FIELD	2538:6	2538:6	6	format
LEAF_NODE	2538:6	2538:6	7	format
EQ_OPERATOR	2538:13	2538:13	6	==
LEAF_NODE	2538:13	2538:13	7	==
FIELD	2538:16	2538:16	6	DUMP_TEXT
LEAF_NODE	2538:16	2538:16	7	DUMP_TEXT
LEAF_NODE	2538:25	2538:25	4	)
STATEMENTS	2539:4	2548:4	4	
LEAF_NODE	2539:4	2539:4	5	{
STATEMENTS	2540:4	2547:4	5	
EXPR_STATEMENT	2540:4	2540:40	6	fprintf ( dumpfile , " %s  " , dump_tag ) ;
EXPR	2540:4	2540:4	7	fprintf ( dumpfile , " %s  " , dump_tag )
FUNCTION_CALL	2540:4	2540:39	8	fprintf ( dumpfile , " %s  " , dump_tag )
CALLEE	2540:4	2540:4	9	fprintf
LEAF_NODE	2540:4	2540:4	10	fprintf
LEAF_NODE	2540:12	2540:12	9	(
ARGUMENT	2540:13	2540:13	9	dumpfile
FIELD	2540:13	2540:13	10	dumpfile
LEAF_NODE	2540:13	2540:13	11	dumpfile
LEAF_NODE	2540:21	2540:21	9	,
ARGUMENT	2540:22	2540:22	9	" %s  "
FIELD	2540:22	2540:22	10	" %s  "
LEAF_NODE	2540:22	2540:22	11	" %s  "
LEAF_NODE	2540:29	2540:29	9	,
ARGUMENT	2540:31	2540:31	9	dump_tag
FIELD	2540:31	2540:31	10	dump_tag
LEAF_NODE	2540:31	2540:31	11	dump_tag
LEAF_NODE	2540:39	2540:39	9	)
LEAF_NODE	2540:40	2540:40	7	;
ITERATION	2541:4	2542:6	6	
KEYWORD	2541:4	2541:4	7	for
LEAF_NODE	2541:4	2541:4	8	for
LEAF_NODE	2541:8	2541:8	7	(
FOR_INIT	2541:9	2541:21	7	j = 0 , k = 7 ;
EXPR	2541:9	2541:16	8	j = 0 , k = 7
ASSIGN	2541:9	2541:13	9	j = 0
LVAL	2541:9	2541:9	10	j
FIELD	2541:9	2541:9	11	j
LEAF_NODE	2541:9	2541:9	12	j
ASSIGN_OP	2541:11	2541:11	10	=
LEAF_NODE	2541:11	2541:11	11	=
RVAL	2541:13	2541:13	10	0
FIELD	2541:13	2541:13	11	0
LEAF_NODE	2541:13	2541:13	12	0
LEAF_NODE	2541:14	2541:14	9	,
ASSIGN	2541:16	2541:20	9	k = 7
LVAL	2541:16	2541:16	10	k
FIELD	2541:16	2541:16	11	k
LEAF_NODE	2541:16	2541:16	12	k
ASSIGN_OP	2541:18	2541:18	10	=
LEAF_NODE	2541:18	2541:18	11	=
RVAL	2541:20	2541:20	10	7
FIELD	2541:20	2541:20	11	7
LEAF_NODE	2541:20	2541:20	12	7
LEAF_NODE	2541:21	2541:21	8	;
CONDITION	2541:23	2541:23	7	j < 8
EXPR	2541:23	2541:27	8	j < 8
FIELD	2541:23	2541:23	9	j
LEAF_NODE	2541:23	2541:23	10	j
REL_OPERATOR	2541:25	2541:25	9	<
LEAF_NODE	2541:25	2541:25	10	<
FIELD	2541:27	2541:27	9	8
LEAF_NODE	2541:27	2541:27	10	8
LEAF_NODE	2541:28	2541:28	7	;
FOR_EXPR	2541:30	2541:30	7	j ++ , k --
EXPR	2541:30	2541:35	8	j ++ , k --
FIELD	2541:30	2541:31	9	j ++
LEAF_NODE	2541:30	2541:30	10	j
LEAF_NODE	2541:31	2541:31	10	++
LEAF_NODE	2541:33	2541:33	9	,
FIELD	2541:35	2541:36	9	k --
LEAF_NODE	2541:35	2541:35	10	k
LEAF_NODE	2541:36	2541:36	10	--
LEAF_NODE	2541:38	2541:38	7	)
STATEMENTS	2542:6	2545:6	7	
LEAF_NODE	2542:6	2542:6	8	{
STATEMENTS	2543:6	2544:51	8	
EXPR_STATEMENT	2543:6	2543:55	9	bitset = data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	2543:6	2543:6	10	bitset = data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	2543:6	2543:15	11	bitset = data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	2543:6	2543:6	12	bitset
FIELD	2543:6	2543:6	13	bitset
LEAF_NODE	2543:6	2543:6	14	bitset
ASSIGN_OP	2543:13	2543:13	12	=
LEAF_NODE	2543:13	2543:13	13	=
RVAL	2543:15	2543:15	12	data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	2543:15	2543:54	13	data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	2543:15	2543:46	14	data & ( ( ( unsigned char ) 1 << k ) )
FIELD	2543:15	2543:15	15	data
LEAF_NODE	2543:15	2543:15	16	data
LEAF_NODE	2543:20	2543:20	15	&
LEAF_NODE	2543:22	2543:22	15	(
LEAF_NODE	2543:23	2543:23	15	(
LEAF_NODE	2543:24	2543:24	15	(
TYPE_NAME	2543:25	2543:34	15	unsigned char
LEAF_NODE	2543:25	2543:25	16	unsigned
LEAF_NODE	2543:34	2543:34	16	char
LEAF_NODE	2543:38	2543:38	15	)
FIELD	2543:39	2543:39	15	1
LEAF_NODE	2543:39	2543:39	16	1
LEAF_NODE	2543:41	2543:41	15	<<
FIELD	2543:44	2543:44	15	k
LEAF_NODE	2543:44	2543:44	16	k
LEAF_NODE	2543:45	2543:45	15	)
LEAF_NODE	2543:46	2543:46	15	)
LEAF_NODE	2543:48	2543:48	14	?
EXPR	2543:50	2543:50	14	1
FIELD	2543:50	2543:50	15	1
LEAF_NODE	2543:50	2543:50	16	1
LEAF_NODE	2543:52	2543:52	14	:
FIELD	2543:54	2543:54	14	0
LEAF_NODE	2543:54	2543:54	15	0
LEAF_NODE	2543:55	2543:55	10	;
LEAF_NODE	2544:6	2544:6	9	sprintf
LEAF_NODE	2544:13	2544:13	9	(
LEAF_NODE	2544:14	2544:14	9	&
LEAF_NODE	2544:15	2544:15	9	dump_array
LEAF_NODE	2544:25	2544:25	9	[
LEAF_NODE	2544:26	2544:26	9	j
LEAF_NODE	2544:27	2544:27	9	]
LEAF_NODE	2544:28	2544:28	9	,
LEAF_NODE	2544:30	2544:30	9	(
LEAF_NODE	2544:31	2544:31	9	bitset
LEAF_NODE	2544:37	2544:37	9	)
LEAF_NODE	2544:39	2544:39	9	?
LEAF_NODE	2544:41	2544:41	9	"1"
LEAF_NODE	2544:45	2544:45	9	:
LEAF_NODE	2544:47	2544:47	9	"0"
LEAF_NODE	2544:50	2544:50	9	)
LEAF_NODE	2544:51	2544:51	9	;
LEAF_NODE	2545:6	2545:6	8	}
EXPR_STATEMENT	2546:4	2546:24	6	dump_array [ 8 ] = '\0' ;
EXPR	2546:4	2546:4	7	dump_array [ 8 ] = '\0'
ASSIGN	2546:4	2546:20	8	dump_array [ 8 ] = '\0'
LVAL	2546:4	2546:4	9	dump_array [ 8 ]
FIELD	2546:4	2546:16	10	dump_array [ 8 ]
LEAF_NODE	2546:4	2546:4	11	dump_array
LEAF_NODE	2546:14	2546:14	11	[
EXPR	2546:15	2546:15	11	8
FIELD	2546:15	2546:15	12	8
LEAF_NODE	2546:15	2546:15	13	8
LEAF_NODE	2546:16	2546:16	11	]
ASSIGN_OP	2546:18	2546:18	9	=
LEAF_NODE	2546:18	2546:18	10	=
RVAL	2546:20	2546:20	9	'\0'
FIELD	2546:20	2546:20	10	'\0'
LEAF_NODE	2546:20	2546:20	11	'\0'
LEAF_NODE	2546:24	2546:24	7	;
EXPR_STATEMENT	2547:4	2547:42	6	fprintf ( dumpfile , " %s\n" , dump_array ) ;
EXPR	2547:4	2547:4	7	fprintf ( dumpfile , " %s\n" , dump_array )
FUNCTION_CALL	2547:4	2547:41	8	fprintf ( dumpfile , " %s\n" , dump_array )
CALLEE	2547:4	2547:4	9	fprintf
LEAF_NODE	2547:4	2547:4	10	fprintf
LEAF_NODE	2547:12	2547:12	9	(
ARGUMENT	2547:13	2547:13	9	dumpfile
FIELD	2547:13	2547:13	10	dumpfile
LEAF_NODE	2547:13	2547:13	11	dumpfile
LEAF_NODE	2547:21	2547:21	9	,
ARGUMENT	2547:22	2547:22	9	" %s\n"
FIELD	2547:22	2547:22	10	" %s\n"
LEAF_NODE	2547:22	2547:22	11	" %s\n"
LEAF_NODE	2547:29	2547:29	9	,
ARGUMENT	2547:31	2547:31	9	dump_array
FIELD	2547:31	2547:31	10	dump_array
LEAF_NODE	2547:31	2547:31	11	dump_array
LEAF_NODE	2547:41	2547:41	9	)
LEAF_NODE	2547:42	2547:42	7	;
LEAF_NODE	2548:4	2548:4	5	}
SELECTION	2549:2	2550:4	3	
KEYWORD	2549:2	2549:2	4	else
LEAF_NODE	2549:2	2549:2	5	else
STATEMENTS	2550:4	2556:4	4	
LEAF_NODE	2550:4	2550:4	5	{
STATEMENTS	2551:4	2551:4	5	
SELECTION	2551:4	2552:6	6	
KEYWORD	2551:4	2551:4	7	if
LEAF_NODE	2551:4	2551:4	8	if
LEAF_NODE	2551:7	2551:7	7	(
CONDITION	2551:8	2551:8	7	( fwrite ( & data , 1 , 1 , dumpfile ) ) != 1
EXPR	2551:8	2551:44	8	( fwrite ( & data , 1 , 1 , dumpfile ) ) != 1
LEAF_NODE	2551:8	2551:8	9	(
FUNCTION_CALL	2551:9	2551:38	9	fwrite ( & data , 1 , 1 , dumpfile )
CALLEE	2551:9	2551:9	10	fwrite
LEAF_NODE	2551:9	2551:9	11	fwrite
LEAF_NODE	2551:16	2551:16	10	(
ARGUMENT	2551:17	2551:17	10	& data
UNARY_EXPR	2551:17	2551:18	11	& data
UNARY_OPERATOR	2551:17	2551:17	12	&
LEAF_NODE	2551:17	2551:17	13	&
FIELD	2551:18	2551:18	12	data
LEAF_NODE	2551:18	2551:18	13	data
LEAF_NODE	2551:22	2551:22	10	,
ARGUMENT	2551:24	2551:24	10	1
FIELD	2551:24	2551:24	11	1
LEAF_NODE	2551:24	2551:24	12	1
LEAF_NODE	2551:25	2551:25	10	,
ARGUMENT	2551:27	2551:27	10	1
FIELD	2551:27	2551:27	11	1
LEAF_NODE	2551:27	2551:27	12	1
LEAF_NODE	2551:28	2551:28	10	,
ARGUMENT	2551:30	2551:30	10	dumpfile
FIELD	2551:30	2551:30	11	dumpfile
LEAF_NODE	2551:30	2551:30	12	dumpfile
LEAF_NODE	2551:38	2551:38	10	)
LEAF_NODE	2551:39	2551:39	9	)
EQ_OPERATOR	2551:41	2551:41	9	!=
LEAF_NODE	2551:41	2551:41	10	!=
FIELD	2551:44	2551:44	9	1
LEAF_NODE	2551:44	2551:44	10	1
LEAF_NODE	2551:45	2551:45	7	)
STATEMENTS	2552:6	2555:6	7	
LEAF_NODE	2552:6	2552:6	8	{
STATEMENTS	2553:6	2554:6	8	
EXPR_STATEMENT	2553:6	2553:64	9	TIFFError ( "" , "Unable to write binary data to dump file" ) ;
EXPR	2553:6	2553:6	10	TIFFError ( "" , "Unable to write binary data to dump file" )
FUNCTION_CALL	2553:6	2553:63	11	TIFFError ( "" , "Unable to write binary data to dump file" )
CALLEE	2553:6	2553:6	12	TIFFError
LEAF_NODE	2553:6	2553:6	13	TIFFError
LEAF_NODE	2553:16	2553:16	12	(
ARGUMENT	2553:17	2553:17	12	""
FIELD	2553:17	2553:17	13	""
LEAF_NODE	2553:17	2553:17	14	""
LEAF_NODE	2553:19	2553:19	12	,
ARGUMENT	2553:21	2553:21	12	"Unable to write binary data to dump file"
FIELD	2553:21	2553:21	13	"Unable to write binary data to dump file"
LEAF_NODE	2553:21	2553:21	14	"Unable to write binary data to dump file"
LEAF_NODE	2553:63	2553:63	12	)
LEAF_NODE	2553:64	2553:64	10	;
JUMP_STATEMENT	2554:6	2554:16	9	return ( 1 ) ;
KEYWORD	2554:6	2554:6	10	return
LEAF_NODE	2554:6	2554:6	11	return
DESTINATION	2554:13	2554:13	10	( 1 )
EXPR	2554:13	2554:15	11	( 1 )
LEAF_NODE	2554:13	2554:13	12	(
FIELD	2554:14	2554:14	12	1
LEAF_NODE	2554:14	2554:14	13	1
LEAF_NODE	2554:15	2554:15	12	)
LEAF_NODE	2554:16	2554:16	10	;
LEAF_NODE	2555:6	2555:6	8	}
LEAF_NODE	2556:4	2556:4	5	}
JUMP_STATEMENT	2558:2	2558:12	3	return ( 0 ) ;
KEYWORD	2558:2	2558:2	4	return
LEAF_NODE	2558:2	2558:2	5	return
DESTINATION	2558:9	2558:9	4	( 0 )
EXPR	2558:9	2558:11	5	( 0 )
LEAF_NODE	2558:9	2558:9	6	(
FIELD	2558:10	2558:10	6	0
LEAF_NODE	2558:10	2558:10	7	0
LEAF_NODE	2558:11	2558:11	6	)
LEAF_NODE	2558:12	2558:12	4	;
LEAF_NODE	2559:2	2559:2	2	}
FUNCTION_DEF	2561:0	2596:2	1	
RETURN_TYPE	2561:0	2561:7	2	static int
LEAF_NODE	2561:0	2561:0	3	static
TYPE_NAME	2561:7	2561:7	3	int
LEAF_NODE	2561:7	2561:7	4	int
FUNCTION_NAME	2561:11	2561:11	2	dump_short
LEAF_NODE	2561:11	2561:11	3	dump_short
PARAMETER_LIST	2561:22	2561:78	2	( FILE * dumpfile , int format , char * dump_tag , uint16 data )
LEAF_NODE	2561:22	2561:22	3	(
PARAMETER_DECL	2561:23	2561:29	3	FILE * dumpfile
TYPE	2561:23	2561:28	4	FILE *
TYPE_NAME	2561:23	2561:23	5	FILE
LEAF_NODE	2561:23	2561:23	6	FILE
POINTER	2561:28	2561:28	5	*
LEAF_NODE	2561:28	2561:28	6	*
NAME	2561:29	2561:29	4	dumpfile
LEAF_NODE	2561:29	2561:29	5	dumpfile
LEAF_NODE	2561:37	2561:37	3	,
PARAMETER_DECL	2561:39	2561:43	3	int format
TYPE	2561:39	2561:39	4	int
TYPE_NAME	2561:39	2561:39	5	int
LEAF_NODE	2561:39	2561:39	6	int
NAME	2561:43	2561:43	4	format
LEAF_NODE	2561:43	2561:43	5	format
LEAF_NODE	2561:49	2561:49	3	,
PARAMETER_DECL	2561:51	2561:57	3	char * dump_tag
TYPE	2561:51	2561:56	4	char *
TYPE_NAME	2561:51	2561:51	5	char
LEAF_NODE	2561:51	2561:51	6	char
POINTER	2561:56	2561:56	5	*
LEAF_NODE	2561:56	2561:56	6	*
NAME	2561:57	2561:57	4	dump_tag
LEAF_NODE	2561:57	2561:57	5	dump_tag
LEAF_NODE	2561:65	2561:65	3	,
PARAMETER_DECL	2561:67	2561:74	3	uint16 data
TYPE	2561:67	2561:67	4	uint16
TYPE_NAME	2561:67	2561:67	5	uint16
LEAF_NODE	2561:67	2561:67	6	uint16
NAME	2561:74	2561:74	4	data
LEAF_NODE	2561:74	2561:74	5	data
LEAF_NODE	2561:78	2561:78	3	)
LEAF_NODE	2562:2	2562:2	2	{
STATEMENTS	2563:2	2595:2	2	
SIMPLE_DECL	2563:2	2563:10	3	int j , int k ;
INIT_DECL_LIST	2563:2	2563:2	4	int j , int k
VAR_DECL	2563:2	2563:6	5	int j
TYPE	2563:2	2563:2	6	int
TYPE_NAME	2563:2	2563:2	7	int
LEAF_NODE	2563:2	2563:2	8	int
NAME	2563:6	2563:6	6	j
LEAF_NODE	2563:6	2563:6	7	j
LEAF_NODE	2563:7	2563:7	5	,
VAR_DECL	2563:2	2563:9	5	int k
TYPE	2563:2	2563:2	6	int
TYPE_NAME	2563:2	2563:2	7	int
LEAF_NODE	2563:2	2563:2	8	int
NAME	2563:9	2563:9	6	k
LEAF_NODE	2563:9	2563:9	7	k
LEAF_NODE	2563:10	2563:10	4	;
SIMPLE_DECL	2564:2	2564:22	3	char [ 20 ] dump_array ;
VAR_DECL	2564:2	2564:8	4	char [ 20 ] dump_array
TYPE	2564:2	2564:18	5	char [ 20 ]
TYPE_NAME	2564:2	2564:2	6	char
LEAF_NODE	2564:2	2564:2	7	char
TYPE_SUFFIX	2564:18	2564:21	6	[ 20 ]
LEAF_NODE	2564:18	2564:18	7	[
FIELD	2564:19	2564:19	7	20
LEAF_NODE	2564:19	2564:19	8	20
LEAF_NODE	2564:21	2564:21	7	]
NAME	2564:8	2564:8	5	dump_array
LEAF_NODE	2564:8	2564:8	6	dump_array
LEAF_NODE	2564:22	2564:22	4	;
SIMPLE_DECL	2565:2	2565:22	3	unsigned char bitset ;
VAR_DECL	2565:2	2565:16	4	unsigned char bitset
TYPE	2565:2	2565:2	5	unsigned char
TYPE_NAME	2565:2	2565:11	6	unsigned char
LEAF_NODE	2565:2	2565:2	7	unsigned
LEAF_NODE	2565:11	2565:11	7	char
NAME	2565:16	2565:16	5	bitset
LEAF_NODE	2565:16	2565:16	6	bitset
LEAF_NODE	2565:22	2565:22	4	;
SELECTION	2567:2	2568:4	3	
KEYWORD	2567:2	2567:2	4	if
LEAF_NODE	2567:2	2567:2	5	if
LEAF_NODE	2567:5	2567:5	4	(
CONDITION	2567:6	2567:6	4	dumpfile == NULL
EXPR	2567:6	2567:18	5	dumpfile == NULL
FIELD	2567:6	2567:6	6	dumpfile
LEAF_NODE	2567:6	2567:6	7	dumpfile
EQ_OPERATOR	2567:15	2567:15	6	==
LEAF_NODE	2567:15	2567:15	7	==
FIELD	2567:18	2567:18	6	NULL
LEAF_NODE	2567:18	2567:18	7	NULL
LEAF_NODE	2567:22	2567:22	4	)
STATEMENTS	2568:4	2571:4	4	
LEAF_NODE	2568:4	2568:4	5	{
STATEMENTS	2569:4	2570:4	5	
EXPR_STATEMENT	2569:4	2569:56	6	TIFFError ( "" , "Invalid FILE pointer for dump file" ) ;
EXPR	2569:4	2569:4	7	TIFFError ( "" , "Invalid FILE pointer for dump file" )
FUNCTION_CALL	2569:4	2569:55	8	TIFFError ( "" , "Invalid FILE pointer for dump file" )
CALLEE	2569:4	2569:4	9	TIFFError
LEAF_NODE	2569:4	2569:4	10	TIFFError
LEAF_NODE	2569:14	2569:14	9	(
ARGUMENT	2569:15	2569:15	9	""
FIELD	2569:15	2569:15	10	""
LEAF_NODE	2569:15	2569:15	11	""
LEAF_NODE	2569:17	2569:17	9	,
ARGUMENT	2569:19	2569:19	9	"Invalid FILE pointer for dump file"
FIELD	2569:19	2569:19	10	"Invalid FILE pointer for dump file"
LEAF_NODE	2569:19	2569:19	11	"Invalid FILE pointer for dump file"
LEAF_NODE	2569:55	2569:55	9	)
LEAF_NODE	2569:56	2569:56	7	;
JUMP_STATEMENT	2570:4	2570:14	6	return ( 1 ) ;
KEYWORD	2570:4	2570:4	7	return
LEAF_NODE	2570:4	2570:4	8	return
DESTINATION	2570:11	2570:11	7	( 1 )
EXPR	2570:11	2570:13	8	( 1 )
LEAF_NODE	2570:11	2570:11	9	(
FIELD	2570:12	2570:12	9	1
LEAF_NODE	2570:12	2570:12	10	1
LEAF_NODE	2570:13	2570:13	9	)
LEAF_NODE	2570:14	2570:14	7	;
LEAF_NODE	2571:4	2571:4	5	}
SELECTION	2573:2	2574:4	3	
KEYWORD	2573:2	2573:2	4	if
LEAF_NODE	2573:2	2573:2	5	if
LEAF_NODE	2573:5	2573:5	4	(
CONDITION	2573:6	2573:6	4	format == DUMP_TEXT
EXPR	2573:6	2573:16	5	format == DUMP_TEXT
FIELD	2573:6	2573:6	6	format
LEAF_NODE	2573:6	2573:6	7	format
EQ_OPERATOR	2573:13	2573:13	6	==
LEAF_NODE	2573:13	2573:13	7	==
FIELD	2573:16	2573:16	6	DUMP_TEXT
LEAF_NODE	2573:16	2573:16	7	DUMP_TEXT
LEAF_NODE	2573:25	2573:25	4	)
STATEMENTS	2574:4	2585:4	4	
LEAF_NODE	2574:4	2574:4	5	{
STATEMENTS	2575:4	2584:4	5	
EXPR_STATEMENT	2575:4	2575:40	6	fprintf ( dumpfile , " %s  " , dump_tag ) ;
EXPR	2575:4	2575:4	7	fprintf ( dumpfile , " %s  " , dump_tag )
FUNCTION_CALL	2575:4	2575:39	8	fprintf ( dumpfile , " %s  " , dump_tag )
CALLEE	2575:4	2575:4	9	fprintf
LEAF_NODE	2575:4	2575:4	10	fprintf
LEAF_NODE	2575:12	2575:12	9	(
ARGUMENT	2575:13	2575:13	9	dumpfile
FIELD	2575:13	2575:13	10	dumpfile
LEAF_NODE	2575:13	2575:13	11	dumpfile
LEAF_NODE	2575:21	2575:21	9	,
ARGUMENT	2575:22	2575:22	9	" %s  "
FIELD	2575:22	2575:22	10	" %s  "
LEAF_NODE	2575:22	2575:22	11	" %s  "
LEAF_NODE	2575:29	2575:29	9	,
ARGUMENT	2575:31	2575:31	9	dump_tag
FIELD	2575:31	2575:31	10	dump_tag
LEAF_NODE	2575:31	2575:31	11	dump_tag
LEAF_NODE	2575:39	2575:39	9	)
LEAF_NODE	2575:40	2575:40	7	;
ITERATION	2576:4	2577:6	6	
KEYWORD	2576:4	2576:4	7	for
LEAF_NODE	2576:4	2576:4	8	for
LEAF_NODE	2576:8	2576:8	7	(
FOR_INIT	2576:9	2576:22	7	j = 0 , k = 15 ;
EXPR	2576:9	2576:16	8	j = 0 , k = 15
ASSIGN	2576:9	2576:13	9	j = 0
LVAL	2576:9	2576:9	10	j
FIELD	2576:9	2576:9	11	j
LEAF_NODE	2576:9	2576:9	12	j
ASSIGN_OP	2576:11	2576:11	10	=
LEAF_NODE	2576:11	2576:11	11	=
RVAL	2576:13	2576:13	10	0
FIELD	2576:13	2576:13	11	0
LEAF_NODE	2576:13	2576:13	12	0
LEAF_NODE	2576:14	2576:14	9	,
ASSIGN	2576:16	2576:20	9	k = 15
LVAL	2576:16	2576:16	10	k
FIELD	2576:16	2576:16	11	k
LEAF_NODE	2576:16	2576:16	12	k
ASSIGN_OP	2576:18	2576:18	10	=
LEAF_NODE	2576:18	2576:18	11	=
RVAL	2576:20	2576:20	10	15
FIELD	2576:20	2576:20	11	15
LEAF_NODE	2576:20	2576:20	12	15
LEAF_NODE	2576:22	2576:22	8	;
CONDITION	2576:24	2576:24	7	k >= 0
EXPR	2576:24	2576:29	8	k >= 0
FIELD	2576:24	2576:24	9	k
LEAF_NODE	2576:24	2576:24	10	k
REL_OPERATOR	2576:26	2576:26	9	>=
LEAF_NODE	2576:26	2576:26	10	>=
FIELD	2576:29	2576:29	9	0
LEAF_NODE	2576:29	2576:29	10	0
LEAF_NODE	2576:30	2576:30	7	;
FOR_EXPR	2576:32	2576:32	7	j ++ , k --
EXPR	2576:32	2576:37	8	j ++ , k --
FIELD	2576:32	2576:33	9	j ++
LEAF_NODE	2576:32	2576:32	10	j
LEAF_NODE	2576:33	2576:33	10	++
LEAF_NODE	2576:35	2576:35	9	,
FIELD	2576:37	2576:38	9	k --
LEAF_NODE	2576:37	2576:37	10	k
LEAF_NODE	2576:38	2576:38	10	--
LEAF_NODE	2576:40	2576:40	7	)
STATEMENTS	2577:6	2582:6	7	
LEAF_NODE	2577:6	2577:6	8	{
STATEMENTS	2578:6	2580:6	8	
EXPR_STATEMENT	2578:6	2578:55	9	bitset = data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	2578:6	2578:6	10	bitset = data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	2578:6	2578:15	11	bitset = data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	2578:6	2578:6	12	bitset
FIELD	2578:6	2578:6	13	bitset
LEAF_NODE	2578:6	2578:6	14	bitset
ASSIGN_OP	2578:13	2578:13	12	=
LEAF_NODE	2578:13	2578:13	13	=
RVAL	2578:15	2578:15	12	data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	2578:15	2578:54	13	data & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	2578:15	2578:46	14	data & ( ( ( unsigned char ) 1 << k ) )
FIELD	2578:15	2578:15	15	data
LEAF_NODE	2578:15	2578:15	16	data
LEAF_NODE	2578:20	2578:20	15	&
LEAF_NODE	2578:22	2578:22	15	(
LEAF_NODE	2578:23	2578:23	15	(
LEAF_NODE	2578:24	2578:24	15	(
TYPE_NAME	2578:25	2578:34	15	unsigned char
LEAF_NODE	2578:25	2578:25	16	unsigned
LEAF_NODE	2578:34	2578:34	16	char
LEAF_NODE	2578:38	2578:38	15	)
FIELD	2578:39	2578:39	15	1
LEAF_NODE	2578:39	2578:39	16	1
LEAF_NODE	2578:41	2578:41	15	<<
FIELD	2578:44	2578:44	15	k
LEAF_NODE	2578:44	2578:44	16	k
LEAF_NODE	2578:45	2578:45	15	)
LEAF_NODE	2578:46	2578:46	15	)
LEAF_NODE	2578:48	2578:48	14	?
EXPR	2578:50	2578:50	14	1
FIELD	2578:50	2578:50	15	1
LEAF_NODE	2578:50	2578:50	16	1
LEAF_NODE	2578:52	2578:52	14	:
FIELD	2578:54	2578:54	14	0
LEAF_NODE	2578:54	2578:54	15	0
LEAF_NODE	2578:55	2578:55	10	;
LEAF_NODE	2579:6	2579:6	9	sprintf
LEAF_NODE	2579:13	2579:13	9	(
LEAF_NODE	2579:14	2579:14	9	&
LEAF_NODE	2579:15	2579:15	9	dump_array
LEAF_NODE	2579:25	2579:25	9	[
LEAF_NODE	2579:26	2579:26	9	j
LEAF_NODE	2579:27	2579:27	9	]
LEAF_NODE	2579:28	2579:28	9	,
LEAF_NODE	2579:30	2579:30	9	(
LEAF_NODE	2579:31	2579:31	9	bitset
LEAF_NODE	2579:37	2579:37	9	)
LEAF_NODE	2579:39	2579:39	9	?
LEAF_NODE	2579:41	2579:41	9	"1"
LEAF_NODE	2579:45	2579:45	9	:
LEAF_NODE	2579:47	2579:47	9	"0"
LEAF_NODE	2579:50	2579:50	9	)
LEAF_NODE	2579:51	2579:51	9	;
SELECTION	2580:6	2581:10	9	
KEYWORD	2580:6	2580:6	10	if
LEAF_NODE	2580:6	2580:6	11	if
LEAF_NODE	2580:9	2580:9	10	(
CONDITION	2580:10	2580:10	10	( k % 8 ) == 0
EXPR	2580:10	2580:21	11	( k % 8 ) == 0
LEAF_NODE	2580:10	2580:10	12	(
FIELD	2580:11	2580:11	12	k
LEAF_NODE	2580:11	2580:11	13	k
LEAF_NODE	2580:13	2580:13	12	%
FIELD	2580:15	2580:15	12	8
LEAF_NODE	2580:15	2580:15	13	8
LEAF_NODE	2580:16	2580:16	12	)
EQ_OPERATOR	2580:18	2580:18	12	==
LEAF_NODE	2580:18	2580:18	13	==
FIELD	2580:21	2580:21	12	0
LEAF_NODE	2580:21	2580:21	13	0
LEAF_NODE	2580:22	2580:22	10	)
STATEMENTS	2581:10	2581:10	10	
EXPR_STATEMENT	2581:10	2581:40	11	sprintf ( & dump_array [ ++ j ] , " " ) ;
EXPR	2581:10	2581:10	12	sprintf ( & dump_array [ ++ j ] , " " )
FUNCTION_CALL	2581:10	2581:39	13	sprintf ( & dump_array [ ++ j ] , " " )
CALLEE	2581:10	2581:10	14	sprintf
LEAF_NODE	2581:10	2581:10	15	sprintf
LEAF_NODE	2581:17	2581:17	14	(
ARGUMENT	2581:18	2581:18	14	& dump_array [ ++ j ]
UNARY_EXPR	2581:18	2581:19	15	& dump_array [ ++ j ]
UNARY_OPERATOR	2581:18	2581:18	16	&
LEAF_NODE	2581:18	2581:18	17	&
FIELD	2581:19	2581:33	16	dump_array [ ++ j ]
LEAF_NODE	2581:19	2581:19	17	dump_array
LEAF_NODE	2581:29	2581:29	17	[
EXPR	2581:30	2581:32	17	++ j
LEAF_NODE	2581:30	2581:30	18	++
FIELD	2581:32	2581:32	18	j
LEAF_NODE	2581:32	2581:32	19	j
LEAF_NODE	2581:33	2581:33	17	]
LEAF_NODE	2581:34	2581:34	14	,
ARGUMENT	2581:36	2581:36	14	" "
FIELD	2581:36	2581:36	15	" "
LEAF_NODE	2581:36	2581:36	16	" "
LEAF_NODE	2581:39	2581:39	14	)
LEAF_NODE	2581:40	2581:40	12	;
LEAF_NODE	2582:6	2582:6	8	}
EXPR_STATEMENT	2583:4	2583:25	6	dump_array [ 17 ] = '\0' ;
EXPR	2583:4	2583:4	7	dump_array [ 17 ] = '\0'
ASSIGN	2583:4	2583:21	8	dump_array [ 17 ] = '\0'
LVAL	2583:4	2583:4	9	dump_array [ 17 ]
FIELD	2583:4	2583:17	10	dump_array [ 17 ]
LEAF_NODE	2583:4	2583:4	11	dump_array
LEAF_NODE	2583:14	2583:14	11	[
EXPR	2583:15	2583:15	11	17
FIELD	2583:15	2583:15	12	17
LEAF_NODE	2583:15	2583:15	13	17
LEAF_NODE	2583:17	2583:17	11	]
ASSIGN_OP	2583:19	2583:19	9	=
LEAF_NODE	2583:19	2583:19	10	=
RVAL	2583:21	2583:21	9	'\0'
FIELD	2583:21	2583:21	10	'\0'
LEAF_NODE	2583:21	2583:21	11	'\0'
LEAF_NODE	2583:25	2583:25	7	;
EXPR_STATEMENT	2584:4	2584:42	6	fprintf ( dumpfile , " %s\n" , dump_array ) ;
EXPR	2584:4	2584:4	7	fprintf ( dumpfile , " %s\n" , dump_array )
FUNCTION_CALL	2584:4	2584:41	8	fprintf ( dumpfile , " %s\n" , dump_array )
CALLEE	2584:4	2584:4	9	fprintf
LEAF_NODE	2584:4	2584:4	10	fprintf
LEAF_NODE	2584:12	2584:12	9	(
ARGUMENT	2584:13	2584:13	9	dumpfile
FIELD	2584:13	2584:13	10	dumpfile
LEAF_NODE	2584:13	2584:13	11	dumpfile
LEAF_NODE	2584:21	2584:21	9	,
ARGUMENT	2584:22	2584:22	9	" %s\n"
FIELD	2584:22	2584:22	10	" %s\n"
LEAF_NODE	2584:22	2584:22	11	" %s\n"
LEAF_NODE	2584:29	2584:29	9	,
ARGUMENT	2584:31	2584:31	9	dump_array
FIELD	2584:31	2584:31	10	dump_array
LEAF_NODE	2584:31	2584:31	11	dump_array
LEAF_NODE	2584:41	2584:41	9	)
LEAF_NODE	2584:42	2584:42	7	;
LEAF_NODE	2585:4	2585:4	5	}
SELECTION	2586:2	2587:4	3	
KEYWORD	2586:2	2586:2	4	else
LEAF_NODE	2586:2	2586:2	5	else
STATEMENTS	2587:4	2593:4	4	
LEAF_NODE	2587:4	2587:4	5	{
STATEMENTS	2588:4	2588:4	5	
SELECTION	2588:4	2589:6	6	
KEYWORD	2588:4	2588:4	7	if
LEAF_NODE	2588:4	2588:4	8	if
LEAF_NODE	2588:7	2588:7	7	(
CONDITION	2588:8	2588:8	7	( fwrite ( & data , 2 , 1 , dumpfile ) ) != 2
EXPR	2588:8	2588:44	8	( fwrite ( & data , 2 , 1 , dumpfile ) ) != 2
LEAF_NODE	2588:8	2588:8	9	(
FUNCTION_CALL	2588:9	2588:38	9	fwrite ( & data , 2 , 1 , dumpfile )
CALLEE	2588:9	2588:9	10	fwrite
LEAF_NODE	2588:9	2588:9	11	fwrite
LEAF_NODE	2588:16	2588:16	10	(
ARGUMENT	2588:17	2588:17	10	& data
UNARY_EXPR	2588:17	2588:18	11	& data
UNARY_OPERATOR	2588:17	2588:17	12	&
LEAF_NODE	2588:17	2588:17	13	&
FIELD	2588:18	2588:18	12	data
LEAF_NODE	2588:18	2588:18	13	data
LEAF_NODE	2588:22	2588:22	10	,
ARGUMENT	2588:24	2588:24	10	2
FIELD	2588:24	2588:24	11	2
LEAF_NODE	2588:24	2588:24	12	2
LEAF_NODE	2588:25	2588:25	10	,
ARGUMENT	2588:27	2588:27	10	1
FIELD	2588:27	2588:27	11	1
LEAF_NODE	2588:27	2588:27	12	1
LEAF_NODE	2588:28	2588:28	10	,
ARGUMENT	2588:30	2588:30	10	dumpfile
FIELD	2588:30	2588:30	11	dumpfile
LEAF_NODE	2588:30	2588:30	12	dumpfile
LEAF_NODE	2588:38	2588:38	10	)
LEAF_NODE	2588:39	2588:39	9	)
EQ_OPERATOR	2588:41	2588:41	9	!=
LEAF_NODE	2588:41	2588:41	10	!=
FIELD	2588:44	2588:44	9	2
LEAF_NODE	2588:44	2588:44	10	2
LEAF_NODE	2588:45	2588:45	7	)
STATEMENTS	2589:6	2592:6	7	
LEAF_NODE	2589:6	2589:6	8	{
STATEMENTS	2590:6	2591:6	8	
EXPR_STATEMENT	2590:6	2590:64	9	TIFFError ( "" , "Unable to write binary data to dump file" ) ;
EXPR	2590:6	2590:6	10	TIFFError ( "" , "Unable to write binary data to dump file" )
FUNCTION_CALL	2590:6	2590:63	11	TIFFError ( "" , "Unable to write binary data to dump file" )
CALLEE	2590:6	2590:6	12	TIFFError
LEAF_NODE	2590:6	2590:6	13	TIFFError
LEAF_NODE	2590:16	2590:16	12	(
ARGUMENT	2590:17	2590:17	12	""
FIELD	2590:17	2590:17	13	""
LEAF_NODE	2590:17	2590:17	14	""
LEAF_NODE	2590:19	2590:19	12	,
ARGUMENT	2590:21	2590:21	12	"Unable to write binary data to dump file"
FIELD	2590:21	2590:21	13	"Unable to write binary data to dump file"
LEAF_NODE	2590:21	2590:21	14	"Unable to write binary data to dump file"
LEAF_NODE	2590:63	2590:63	12	)
LEAF_NODE	2590:64	2590:64	10	;
JUMP_STATEMENT	2591:6	2591:16	9	return ( 1 ) ;
KEYWORD	2591:6	2591:6	10	return
LEAF_NODE	2591:6	2591:6	11	return
DESTINATION	2591:13	2591:13	10	( 1 )
EXPR	2591:13	2591:15	11	( 1 )
LEAF_NODE	2591:13	2591:13	12	(
FIELD	2591:14	2591:14	12	1
LEAF_NODE	2591:14	2591:14	13	1
LEAF_NODE	2591:15	2591:15	12	)
LEAF_NODE	2591:16	2591:16	10	;
LEAF_NODE	2592:6	2592:6	8	}
LEAF_NODE	2593:4	2593:4	5	}
JUMP_STATEMENT	2595:2	2595:12	3	return ( 0 ) ;
KEYWORD	2595:2	2595:2	4	return
LEAF_NODE	2595:2	2595:2	5	return
DESTINATION	2595:9	2595:9	4	( 0 )
EXPR	2595:9	2595:11	5	( 0 )
LEAF_NODE	2595:9	2595:9	6	(
FIELD	2595:10	2595:10	6	0
LEAF_NODE	2595:10	2595:10	7	0
LEAF_NODE	2595:11	2595:11	6	)
LEAF_NODE	2595:12	2595:12	4	;
LEAF_NODE	2596:2	2596:2	2	}
FUNCTION_DEF	2598:0	2632:2	1	
RETURN_TYPE	2598:0	2598:7	2	static int
LEAF_NODE	2598:0	2598:0	3	static
TYPE_NAME	2598:7	2598:7	3	int
LEAF_NODE	2598:7	2598:7	4	int
FUNCTION_NAME	2598:11	2598:11	2	dump_long
LEAF_NODE	2598:11	2598:11	3	dump_long
PARAMETER_LIST	2598:21	2598:77	2	( FILE * dumpfile , int format , char * dump_tag , uint32 data )
LEAF_NODE	2598:21	2598:21	3	(
PARAMETER_DECL	2598:22	2598:28	3	FILE * dumpfile
TYPE	2598:22	2598:27	4	FILE *
TYPE_NAME	2598:22	2598:22	5	FILE
LEAF_NODE	2598:22	2598:22	6	FILE
POINTER	2598:27	2598:27	5	*
LEAF_NODE	2598:27	2598:27	6	*
NAME	2598:28	2598:28	4	dumpfile
LEAF_NODE	2598:28	2598:28	5	dumpfile
LEAF_NODE	2598:36	2598:36	3	,
PARAMETER_DECL	2598:38	2598:42	3	int format
TYPE	2598:38	2598:38	4	int
TYPE_NAME	2598:38	2598:38	5	int
LEAF_NODE	2598:38	2598:38	6	int
NAME	2598:42	2598:42	4	format
LEAF_NODE	2598:42	2598:42	5	format
LEAF_NODE	2598:48	2598:48	3	,
PARAMETER_DECL	2598:50	2598:56	3	char * dump_tag
TYPE	2598:50	2598:55	4	char *
TYPE_NAME	2598:50	2598:50	5	char
LEAF_NODE	2598:50	2598:50	6	char
POINTER	2598:55	2598:55	5	*
LEAF_NODE	2598:55	2598:55	6	*
NAME	2598:56	2598:56	4	dump_tag
LEAF_NODE	2598:56	2598:56	5	dump_tag
LEAF_NODE	2598:64	2598:64	3	,
PARAMETER_DECL	2598:66	2598:73	3	uint32 data
TYPE	2598:66	2598:66	4	uint32
TYPE_NAME	2598:66	2598:66	5	uint32
LEAF_NODE	2598:66	2598:66	6	uint32
NAME	2598:73	2598:73	4	data
LEAF_NODE	2598:73	2598:73	5	data
LEAF_NODE	2598:77	2598:77	3	)
LEAF_NODE	2599:2	2599:2	2	{
STATEMENTS	2600:2	2631:2	2	
SIMPLE_DECL	2600:2	2600:10	3	int j , int k ;
INIT_DECL_LIST	2600:2	2600:2	4	int j , int k
VAR_DECL	2600:2	2600:6	5	int j
TYPE	2600:2	2600:2	6	int
TYPE_NAME	2600:2	2600:2	7	int
LEAF_NODE	2600:2	2600:2	8	int
NAME	2600:6	2600:6	6	j
LEAF_NODE	2600:6	2600:6	7	j
LEAF_NODE	2600:7	2600:7	5	,
VAR_DECL	2600:2	2600:9	5	int k
TYPE	2600:2	2600:2	6	int
TYPE_NAME	2600:2	2600:2	7	int
LEAF_NODE	2600:2	2600:2	8	int
NAME	2600:9	2600:9	6	k
LEAF_NODE	2600:9	2600:9	7	k
LEAF_NODE	2600:10	2600:10	4	;
SIMPLE_DECL	2601:2	2601:22	3	char [ 40 ] dump_array ;
VAR_DECL	2601:2	2601:8	4	char [ 40 ] dump_array
TYPE	2601:2	2601:18	5	char [ 40 ]
TYPE_NAME	2601:2	2601:2	6	char
LEAF_NODE	2601:2	2601:2	7	char
TYPE_SUFFIX	2601:18	2601:21	6	[ 40 ]
LEAF_NODE	2601:18	2601:18	7	[
FIELD	2601:19	2601:19	7	40
LEAF_NODE	2601:19	2601:19	8	40
LEAF_NODE	2601:21	2601:21	7	]
NAME	2601:8	2601:8	5	dump_array
LEAF_NODE	2601:8	2601:8	6	dump_array
LEAF_NODE	2601:22	2601:22	4	;
SIMPLE_DECL	2602:2	2602:22	3	unsigned char bitset ;
VAR_DECL	2602:2	2602:16	4	unsigned char bitset
TYPE	2602:2	2602:2	5	unsigned char
TYPE_NAME	2602:2	2602:11	6	unsigned char
LEAF_NODE	2602:2	2602:2	7	unsigned
LEAF_NODE	2602:11	2602:11	7	char
NAME	2602:16	2602:16	5	bitset
LEAF_NODE	2602:16	2602:16	6	bitset
LEAF_NODE	2602:22	2602:22	4	;
SELECTION	2604:2	2605:4	3	
KEYWORD	2604:2	2604:2	4	if
LEAF_NODE	2604:2	2604:2	5	if
LEAF_NODE	2604:5	2604:5	4	(
CONDITION	2604:6	2604:6	4	dumpfile == NULL
EXPR	2604:6	2604:18	5	dumpfile == NULL
FIELD	2604:6	2604:6	6	dumpfile
LEAF_NODE	2604:6	2604:6	7	dumpfile
EQ_OPERATOR	2604:15	2604:15	6	==
LEAF_NODE	2604:15	2604:15	7	==
FIELD	2604:18	2604:18	6	NULL
LEAF_NODE	2604:18	2604:18	7	NULL
LEAF_NODE	2604:22	2604:22	4	)
STATEMENTS	2605:4	2608:4	4	
LEAF_NODE	2605:4	2605:4	5	{
STATEMENTS	2606:4	2607:4	5	
EXPR_STATEMENT	2606:4	2606:56	6	TIFFError ( "" , "Invalid FILE pointer for dump file" ) ;
EXPR	2606:4	2606:4	7	TIFFError ( "" , "Invalid FILE pointer for dump file" )
FUNCTION_CALL	2606:4	2606:55	8	TIFFError ( "" , "Invalid FILE pointer for dump file" )
CALLEE	2606:4	2606:4	9	TIFFError
LEAF_NODE	2606:4	2606:4	10	TIFFError
LEAF_NODE	2606:14	2606:14	9	(
ARGUMENT	2606:15	2606:15	9	""
FIELD	2606:15	2606:15	10	""
LEAF_NODE	2606:15	2606:15	11	""
LEAF_NODE	2606:17	2606:17	9	,
ARGUMENT	2606:19	2606:19	9	"Invalid FILE pointer for dump file"
FIELD	2606:19	2606:19	10	"Invalid FILE pointer for dump file"
LEAF_NODE	2606:19	2606:19	11	"Invalid FILE pointer for dump file"
LEAF_NODE	2606:55	2606:55	9	)
LEAF_NODE	2606:56	2606:56	7	;
JUMP_STATEMENT	2607:4	2607:14	6	return ( 1 ) ;
KEYWORD	2607:4	2607:4	7	return
LEAF_NODE	2607:4	2607:4	8	return
DESTINATION	2607:11	2607:11	7	( 1 )
EXPR	2607:11	2607:13	8	( 1 )
LEAF_NODE	2607:11	2607:11	9	(
FIELD	2607:12	2607:12	9	1
LEAF_NODE	2607:12	2607:12	10	1
LEAF_NODE	2607:13	2607:13	9	)
LEAF_NODE	2607:14	2607:14	7	;
LEAF_NODE	2608:4	2608:4	5	}
SELECTION	2610:2	2611:4	3	
KEYWORD	2610:2	2610:2	4	if
LEAF_NODE	2610:2	2610:2	5	if
LEAF_NODE	2610:5	2610:5	4	(
CONDITION	2610:6	2610:6	4	format == DUMP_TEXT
EXPR	2610:6	2610:16	5	format == DUMP_TEXT
FIELD	2610:6	2610:6	6	format
LEAF_NODE	2610:6	2610:6	7	format
EQ_OPERATOR	2610:13	2610:13	6	==
LEAF_NODE	2610:13	2610:13	7	==
FIELD	2610:16	2610:16	6	DUMP_TEXT
LEAF_NODE	2610:16	2610:16	7	DUMP_TEXT
LEAF_NODE	2610:25	2610:25	4	)
STATEMENTS	2611:4	2622:4	4	
LEAF_NODE	2611:4	2611:4	5	{
STATEMENTS	2612:4	2621:4	5	
EXPR_STATEMENT	2612:4	2612:40	6	fprintf ( dumpfile , " %s  " , dump_tag ) ;
EXPR	2612:4	2612:4	7	fprintf ( dumpfile , " %s  " , dump_tag )
FUNCTION_CALL	2612:4	2612:39	8	fprintf ( dumpfile , " %s  " , dump_tag )
CALLEE	2612:4	2612:4	9	fprintf
LEAF_NODE	2612:4	2612:4	10	fprintf
LEAF_NODE	2612:12	2612:12	9	(
ARGUMENT	2612:13	2612:13	9	dumpfile
FIELD	2612:13	2612:13	10	dumpfile
LEAF_NODE	2612:13	2612:13	11	dumpfile
LEAF_NODE	2612:21	2612:21	9	,
ARGUMENT	2612:22	2612:22	9	" %s  "
FIELD	2612:22	2612:22	10	" %s  "
LEAF_NODE	2612:22	2612:22	11	" %s  "
LEAF_NODE	2612:29	2612:29	9	,
ARGUMENT	2612:31	2612:31	9	dump_tag
FIELD	2612:31	2612:31	10	dump_tag
LEAF_NODE	2612:31	2612:31	11	dump_tag
LEAF_NODE	2612:39	2612:39	9	)
LEAF_NODE	2612:40	2612:40	7	;
ITERATION	2613:4	2614:6	6	
KEYWORD	2613:4	2613:4	7	for
LEAF_NODE	2613:4	2613:4	8	for
LEAF_NODE	2613:8	2613:8	7	(
FOR_INIT	2613:9	2613:22	7	j = 0 , k = 31 ;
EXPR	2613:9	2613:16	8	j = 0 , k = 31
ASSIGN	2613:9	2613:13	9	j = 0
LVAL	2613:9	2613:9	10	j
FIELD	2613:9	2613:9	11	j
LEAF_NODE	2613:9	2613:9	12	j
ASSIGN_OP	2613:11	2613:11	10	=
LEAF_NODE	2613:11	2613:11	11	=
RVAL	2613:13	2613:13	10	0
FIELD	2613:13	2613:13	11	0
LEAF_NODE	2613:13	2613:13	12	0
LEAF_NODE	2613:14	2613:14	9	,
ASSIGN	2613:16	2613:20	9	k = 31
LVAL	2613:16	2613:16	10	k
FIELD	2613:16	2613:16	11	k
LEAF_NODE	2613:16	2613:16	12	k
ASSIGN_OP	2613:18	2613:18	10	=
LEAF_NODE	2613:18	2613:18	11	=
RVAL	2613:20	2613:20	10	31
FIELD	2613:20	2613:20	11	31
LEAF_NODE	2613:20	2613:20	12	31
LEAF_NODE	2613:22	2613:22	8	;
CONDITION	2613:24	2613:24	7	k >= 0
EXPR	2613:24	2613:29	8	k >= 0
FIELD	2613:24	2613:24	9	k
LEAF_NODE	2613:24	2613:24	10	k
REL_OPERATOR	2613:26	2613:26	9	>=
LEAF_NODE	2613:26	2613:26	10	>=
FIELD	2613:29	2613:29	9	0
LEAF_NODE	2613:29	2613:29	10	0
LEAF_NODE	2613:30	2613:30	7	;
FOR_EXPR	2613:32	2613:32	7	j ++ , k --
EXPR	2613:32	2613:37	8	j ++ , k --
FIELD	2613:32	2613:33	9	j ++
LEAF_NODE	2613:32	2613:32	10	j
LEAF_NODE	2613:33	2613:33	10	++
LEAF_NODE	2613:35	2613:35	9	,
FIELD	2613:37	2613:38	9	k --
LEAF_NODE	2613:37	2613:37	10	k
LEAF_NODE	2613:38	2613:38	10	--
LEAF_NODE	2613:40	2613:40	7	)
STATEMENTS	2614:6	2619:6	7	
LEAF_NODE	2614:6	2614:6	8	{
STATEMENTS	2615:6	2617:6	8	
EXPR_STATEMENT	2615:6	2615:48	9	bitset = data & ( ( ( uint32 ) 1 << k ) ) ? 1 : 0 ;
EXPR	2615:6	2615:6	10	bitset = data & ( ( ( uint32 ) 1 << k ) ) ? 1 : 0
ASSIGN	2615:6	2615:15	11	bitset = data & ( ( ( uint32 ) 1 << k ) ) ? 1 : 0
LVAL	2615:6	2615:6	12	bitset
FIELD	2615:6	2615:6	13	bitset
LEAF_NODE	2615:6	2615:6	14	bitset
ASSIGN_OP	2615:13	2615:13	12	=
LEAF_NODE	2615:13	2615:13	13	=
RVAL	2615:15	2615:15	12	data & ( ( ( uint32 ) 1 << k ) ) ? 1 : 0
COND_EXPR	2615:15	2615:47	13	data & ( ( ( uint32 ) 1 << k ) ) ? 1 : 0
CONDITION	2615:15	2615:39	14	data & ( ( ( uint32 ) 1 << k ) )
FIELD	2615:15	2615:15	15	data
LEAF_NODE	2615:15	2615:15	16	data
LEAF_NODE	2615:20	2615:20	15	&
LEAF_NODE	2615:22	2615:22	15	(
LEAF_NODE	2615:23	2615:23	15	(
LEAF_NODE	2615:24	2615:24	15	(
TYPE_NAME	2615:25	2615:25	15	uint32
LEAF_NODE	2615:25	2615:25	16	uint32
LEAF_NODE	2615:31	2615:31	15	)
FIELD	2615:32	2615:32	15	1
LEAF_NODE	2615:32	2615:32	16	1
LEAF_NODE	2615:34	2615:34	15	<<
FIELD	2615:37	2615:37	15	k
LEAF_NODE	2615:37	2615:37	16	k
LEAF_NODE	2615:38	2615:38	15	)
LEAF_NODE	2615:39	2615:39	15	)
LEAF_NODE	2615:41	2615:41	14	?
EXPR	2615:43	2615:43	14	1
FIELD	2615:43	2615:43	15	1
LEAF_NODE	2615:43	2615:43	16	1
LEAF_NODE	2615:45	2615:45	14	:
FIELD	2615:47	2615:47	14	0
LEAF_NODE	2615:47	2615:47	15	0
LEAF_NODE	2615:48	2615:48	10	;
LEAF_NODE	2616:6	2616:6	9	sprintf
LEAF_NODE	2616:13	2616:13	9	(
LEAF_NODE	2616:14	2616:14	9	&
LEAF_NODE	2616:15	2616:15	9	dump_array
LEAF_NODE	2616:25	2616:25	9	[
LEAF_NODE	2616:26	2616:26	9	j
LEAF_NODE	2616:27	2616:27	9	]
LEAF_NODE	2616:28	2616:28	9	,
LEAF_NODE	2616:30	2616:30	9	(
LEAF_NODE	2616:31	2616:31	9	bitset
LEAF_NODE	2616:37	2616:37	9	)
LEAF_NODE	2616:39	2616:39	9	?
LEAF_NODE	2616:41	2616:41	9	"1"
LEAF_NODE	2616:45	2616:45	9	:
LEAF_NODE	2616:47	2616:47	9	"0"
LEAF_NODE	2616:50	2616:50	9	)
LEAF_NODE	2616:51	2616:51	9	;
SELECTION	2617:6	2618:10	9	
KEYWORD	2617:6	2617:6	10	if
LEAF_NODE	2617:6	2617:6	11	if
LEAF_NODE	2617:9	2617:9	10	(
CONDITION	2617:10	2617:10	10	( k % 8 ) == 0
EXPR	2617:10	2617:21	11	( k % 8 ) == 0
LEAF_NODE	2617:10	2617:10	12	(
FIELD	2617:11	2617:11	12	k
LEAF_NODE	2617:11	2617:11	13	k
LEAF_NODE	2617:13	2617:13	12	%
FIELD	2617:15	2617:15	12	8
LEAF_NODE	2617:15	2617:15	13	8
LEAF_NODE	2617:16	2617:16	12	)
EQ_OPERATOR	2617:18	2617:18	12	==
LEAF_NODE	2617:18	2617:18	13	==
FIELD	2617:21	2617:21	12	0
LEAF_NODE	2617:21	2617:21	13	0
LEAF_NODE	2617:22	2617:22	10	)
STATEMENTS	2618:10	2618:10	10	
EXPR_STATEMENT	2618:10	2618:40	11	sprintf ( & dump_array [ ++ j ] , " " ) ;
EXPR	2618:10	2618:10	12	sprintf ( & dump_array [ ++ j ] , " " )
FUNCTION_CALL	2618:10	2618:39	13	sprintf ( & dump_array [ ++ j ] , " " )
CALLEE	2618:10	2618:10	14	sprintf
LEAF_NODE	2618:10	2618:10	15	sprintf
LEAF_NODE	2618:17	2618:17	14	(
ARGUMENT	2618:18	2618:18	14	& dump_array [ ++ j ]
UNARY_EXPR	2618:18	2618:19	15	& dump_array [ ++ j ]
UNARY_OPERATOR	2618:18	2618:18	16	&
LEAF_NODE	2618:18	2618:18	17	&
FIELD	2618:19	2618:33	16	dump_array [ ++ j ]
LEAF_NODE	2618:19	2618:19	17	dump_array
LEAF_NODE	2618:29	2618:29	17	[
EXPR	2618:30	2618:32	17	++ j
LEAF_NODE	2618:30	2618:30	18	++
FIELD	2618:32	2618:32	18	j
LEAF_NODE	2618:32	2618:32	19	j
LEAF_NODE	2618:33	2618:33	17	]
LEAF_NODE	2618:34	2618:34	14	,
ARGUMENT	2618:36	2618:36	14	" "
FIELD	2618:36	2618:36	15	" "
LEAF_NODE	2618:36	2618:36	16	" "
LEAF_NODE	2618:39	2618:39	14	)
LEAF_NODE	2618:40	2618:40	12	;
LEAF_NODE	2619:6	2619:6	8	}
EXPR_STATEMENT	2620:4	2620:25	6	dump_array [ 35 ] = '\0' ;
EXPR	2620:4	2620:4	7	dump_array [ 35 ] = '\0'
ASSIGN	2620:4	2620:21	8	dump_array [ 35 ] = '\0'
LVAL	2620:4	2620:4	9	dump_array [ 35 ]
FIELD	2620:4	2620:17	10	dump_array [ 35 ]
LEAF_NODE	2620:4	2620:4	11	dump_array
LEAF_NODE	2620:14	2620:14	11	[
EXPR	2620:15	2620:15	11	35
FIELD	2620:15	2620:15	12	35
LEAF_NODE	2620:15	2620:15	13	35
LEAF_NODE	2620:17	2620:17	11	]
ASSIGN_OP	2620:19	2620:19	9	=
LEAF_NODE	2620:19	2620:19	10	=
RVAL	2620:21	2620:21	9	'\0'
FIELD	2620:21	2620:21	10	'\0'
LEAF_NODE	2620:21	2620:21	11	'\0'
LEAF_NODE	2620:25	2620:25	7	;
EXPR_STATEMENT	2621:4	2621:42	6	fprintf ( dumpfile , " %s\n" , dump_array ) ;
EXPR	2621:4	2621:4	7	fprintf ( dumpfile , " %s\n" , dump_array )
FUNCTION_CALL	2621:4	2621:41	8	fprintf ( dumpfile , " %s\n" , dump_array )
CALLEE	2621:4	2621:4	9	fprintf
LEAF_NODE	2621:4	2621:4	10	fprintf
LEAF_NODE	2621:12	2621:12	9	(
ARGUMENT	2621:13	2621:13	9	dumpfile
FIELD	2621:13	2621:13	10	dumpfile
LEAF_NODE	2621:13	2621:13	11	dumpfile
LEAF_NODE	2621:21	2621:21	9	,
ARGUMENT	2621:22	2621:22	9	" %s\n"
FIELD	2621:22	2621:22	10	" %s\n"
LEAF_NODE	2621:22	2621:22	11	" %s\n"
LEAF_NODE	2621:29	2621:29	9	,
ARGUMENT	2621:31	2621:31	9	dump_array
FIELD	2621:31	2621:31	10	dump_array
LEAF_NODE	2621:31	2621:31	11	dump_array
LEAF_NODE	2621:41	2621:41	9	)
LEAF_NODE	2621:42	2621:42	7	;
LEAF_NODE	2622:4	2622:4	5	}
SELECTION	2623:2	2624:4	3	
KEYWORD	2623:2	2623:2	4	else
LEAF_NODE	2623:2	2623:2	5	else
STATEMENTS	2624:4	2630:4	4	
LEAF_NODE	2624:4	2624:4	5	{
STATEMENTS	2625:4	2625:4	5	
SELECTION	2625:4	2626:6	6	
KEYWORD	2625:4	2625:4	7	if
LEAF_NODE	2625:4	2625:4	8	if
LEAF_NODE	2625:7	2625:7	7	(
CONDITION	2625:8	2625:8	7	( fwrite ( & data , 4 , 1 , dumpfile ) ) != 4
EXPR	2625:8	2625:44	8	( fwrite ( & data , 4 , 1 , dumpfile ) ) != 4
LEAF_NODE	2625:8	2625:8	9	(
FUNCTION_CALL	2625:9	2625:38	9	fwrite ( & data , 4 , 1 , dumpfile )
CALLEE	2625:9	2625:9	10	fwrite
LEAF_NODE	2625:9	2625:9	11	fwrite
LEAF_NODE	2625:16	2625:16	10	(
ARGUMENT	2625:17	2625:17	10	& data
UNARY_EXPR	2625:17	2625:18	11	& data
UNARY_OPERATOR	2625:17	2625:17	12	&
LEAF_NODE	2625:17	2625:17	13	&
FIELD	2625:18	2625:18	12	data
LEAF_NODE	2625:18	2625:18	13	data
LEAF_NODE	2625:22	2625:22	10	,
ARGUMENT	2625:24	2625:24	10	4
FIELD	2625:24	2625:24	11	4
LEAF_NODE	2625:24	2625:24	12	4
LEAF_NODE	2625:25	2625:25	10	,
ARGUMENT	2625:27	2625:27	10	1
FIELD	2625:27	2625:27	11	1
LEAF_NODE	2625:27	2625:27	12	1
LEAF_NODE	2625:28	2625:28	10	,
ARGUMENT	2625:30	2625:30	10	dumpfile
FIELD	2625:30	2625:30	11	dumpfile
LEAF_NODE	2625:30	2625:30	12	dumpfile
LEAF_NODE	2625:38	2625:38	10	)
LEAF_NODE	2625:39	2625:39	9	)
EQ_OPERATOR	2625:41	2625:41	9	!=
LEAF_NODE	2625:41	2625:41	10	!=
FIELD	2625:44	2625:44	9	4
LEAF_NODE	2625:44	2625:44	10	4
LEAF_NODE	2625:45	2625:45	7	)
STATEMENTS	2626:6	2629:6	7	
LEAF_NODE	2626:6	2626:6	8	{
STATEMENTS	2627:6	2628:6	8	
EXPR_STATEMENT	2627:6	2627:64	9	TIFFError ( "" , "Unable to write binary data to dump file" ) ;
EXPR	2627:6	2627:6	10	TIFFError ( "" , "Unable to write binary data to dump file" )
FUNCTION_CALL	2627:6	2627:63	11	TIFFError ( "" , "Unable to write binary data to dump file" )
CALLEE	2627:6	2627:6	12	TIFFError
LEAF_NODE	2627:6	2627:6	13	TIFFError
LEAF_NODE	2627:16	2627:16	12	(
ARGUMENT	2627:17	2627:17	12	""
FIELD	2627:17	2627:17	13	""
LEAF_NODE	2627:17	2627:17	14	""
LEAF_NODE	2627:19	2627:19	12	,
ARGUMENT	2627:21	2627:21	12	"Unable to write binary data to dump file"
FIELD	2627:21	2627:21	13	"Unable to write binary data to dump file"
LEAF_NODE	2627:21	2627:21	14	"Unable to write binary data to dump file"
LEAF_NODE	2627:63	2627:63	12	)
LEAF_NODE	2627:64	2627:64	10	;
JUMP_STATEMENT	2628:6	2628:16	9	return ( 1 ) ;
KEYWORD	2628:6	2628:6	10	return
LEAF_NODE	2628:6	2628:6	11	return
DESTINATION	2628:13	2628:13	10	( 1 )
EXPR	2628:13	2628:15	11	( 1 )
LEAF_NODE	2628:13	2628:13	12	(
FIELD	2628:14	2628:14	12	1
LEAF_NODE	2628:14	2628:14	13	1
LEAF_NODE	2628:15	2628:15	12	)
LEAF_NODE	2628:16	2628:16	10	;
LEAF_NODE	2629:6	2629:6	8	}
LEAF_NODE	2630:4	2630:4	5	}
JUMP_STATEMENT	2631:2	2631:12	3	return ( 0 ) ;
KEYWORD	2631:2	2631:2	4	return
LEAF_NODE	2631:2	2631:2	5	return
DESTINATION	2631:9	2631:9	4	( 0 )
EXPR	2631:9	2631:11	5	( 0 )
LEAF_NODE	2631:9	2631:9	6	(
FIELD	2631:10	2631:10	6	0
LEAF_NODE	2631:10	2631:10	7	0
LEAF_NODE	2631:11	2631:11	6	)
LEAF_NODE	2631:12	2631:12	4	;
LEAF_NODE	2632:2	2632:2	2	}
FUNCTION_DEF	2634:0	2669:2	1	
RETURN_TYPE	2634:0	2634:7	2	static int
LEAF_NODE	2634:0	2634:0	3	static
TYPE_NAME	2634:7	2634:7	3	int
LEAF_NODE	2634:7	2634:7	4	int
FUNCTION_NAME	2634:11	2634:11	2	dump_wide
LEAF_NODE	2634:11	2634:11	3	dump_wide
PARAMETER_LIST	2634:21	2634:77	2	( FILE * dumpfile , int format , char * dump_tag , uint64 data )
LEAF_NODE	2634:21	2634:21	3	(
PARAMETER_DECL	2634:22	2634:28	3	FILE * dumpfile
TYPE	2634:22	2634:27	4	FILE *
TYPE_NAME	2634:22	2634:22	5	FILE
LEAF_NODE	2634:22	2634:22	6	FILE
POINTER	2634:27	2634:27	5	*
LEAF_NODE	2634:27	2634:27	6	*
NAME	2634:28	2634:28	4	dumpfile
LEAF_NODE	2634:28	2634:28	5	dumpfile
LEAF_NODE	2634:36	2634:36	3	,
PARAMETER_DECL	2634:38	2634:42	3	int format
TYPE	2634:38	2634:38	4	int
TYPE_NAME	2634:38	2634:38	5	int
LEAF_NODE	2634:38	2634:38	6	int
NAME	2634:42	2634:42	4	format
LEAF_NODE	2634:42	2634:42	5	format
LEAF_NODE	2634:48	2634:48	3	,
PARAMETER_DECL	2634:50	2634:56	3	char * dump_tag
TYPE	2634:50	2634:55	4	char *
TYPE_NAME	2634:50	2634:50	5	char
LEAF_NODE	2634:50	2634:50	6	char
POINTER	2634:55	2634:55	5	*
LEAF_NODE	2634:55	2634:55	6	*
NAME	2634:56	2634:56	4	dump_tag
LEAF_NODE	2634:56	2634:56	5	dump_tag
LEAF_NODE	2634:64	2634:64	3	,
PARAMETER_DECL	2634:66	2634:73	3	uint64 data
TYPE	2634:66	2634:66	4	uint64
TYPE_NAME	2634:66	2634:66	5	uint64
LEAF_NODE	2634:66	2634:66	6	uint64
NAME	2634:73	2634:73	4	data
LEAF_NODE	2634:73	2634:73	5	data
LEAF_NODE	2634:77	2634:77	3	)
LEAF_NODE	2635:2	2635:2	2	{
STATEMENTS	2636:2	2668:2	2	
SIMPLE_DECL	2636:2	2636:10	3	int j , int k ;
INIT_DECL_LIST	2636:2	2636:2	4	int j , int k
VAR_DECL	2636:2	2636:6	5	int j
TYPE	2636:2	2636:2	6	int
TYPE_NAME	2636:2	2636:2	7	int
LEAF_NODE	2636:2	2636:2	8	int
NAME	2636:6	2636:6	6	j
LEAF_NODE	2636:6	2636:6	7	j
LEAF_NODE	2636:7	2636:7	5	,
VAR_DECL	2636:2	2636:9	5	int k
TYPE	2636:2	2636:2	6	int
TYPE_NAME	2636:2	2636:2	7	int
LEAF_NODE	2636:2	2636:2	8	int
NAME	2636:9	2636:9	6	k
LEAF_NODE	2636:9	2636:9	7	k
LEAF_NODE	2636:10	2636:10	4	;
SIMPLE_DECL	2637:2	2637:22	3	char [ 80 ] dump_array ;
VAR_DECL	2637:2	2637:8	4	char [ 80 ] dump_array
TYPE	2637:2	2637:18	5	char [ 80 ]
TYPE_NAME	2637:2	2637:2	6	char
LEAF_NODE	2637:2	2637:2	7	char
TYPE_SUFFIX	2637:18	2637:21	6	[ 80 ]
LEAF_NODE	2637:18	2637:18	7	[
FIELD	2637:19	2637:19	7	80
LEAF_NODE	2637:19	2637:19	8	80
LEAF_NODE	2637:21	2637:21	7	]
NAME	2637:8	2637:8	5	dump_array
LEAF_NODE	2637:8	2637:8	6	dump_array
LEAF_NODE	2637:22	2637:22	4	;
SIMPLE_DECL	2638:2	2638:22	3	unsigned char bitset ;
VAR_DECL	2638:2	2638:16	4	unsigned char bitset
TYPE	2638:2	2638:2	5	unsigned char
TYPE_NAME	2638:2	2638:11	6	unsigned char
LEAF_NODE	2638:2	2638:2	7	unsigned
LEAF_NODE	2638:11	2638:11	7	char
NAME	2638:16	2638:16	5	bitset
LEAF_NODE	2638:16	2638:16	6	bitset
LEAF_NODE	2638:22	2638:22	4	;
SELECTION	2640:2	2641:4	3	
KEYWORD	2640:2	2640:2	4	if
LEAF_NODE	2640:2	2640:2	5	if
LEAF_NODE	2640:5	2640:5	4	(
CONDITION	2640:6	2640:6	4	dumpfile == NULL
EXPR	2640:6	2640:18	5	dumpfile == NULL
FIELD	2640:6	2640:6	6	dumpfile
LEAF_NODE	2640:6	2640:6	7	dumpfile
EQ_OPERATOR	2640:15	2640:15	6	==
LEAF_NODE	2640:15	2640:15	7	==
FIELD	2640:18	2640:18	6	NULL
LEAF_NODE	2640:18	2640:18	7	NULL
LEAF_NODE	2640:22	2640:22	4	)
STATEMENTS	2641:4	2644:4	4	
LEAF_NODE	2641:4	2641:4	5	{
STATEMENTS	2642:4	2643:4	5	
EXPR_STATEMENT	2642:4	2642:56	6	TIFFError ( "" , "Invalid FILE pointer for dump file" ) ;
EXPR	2642:4	2642:4	7	TIFFError ( "" , "Invalid FILE pointer for dump file" )
FUNCTION_CALL	2642:4	2642:55	8	TIFFError ( "" , "Invalid FILE pointer for dump file" )
CALLEE	2642:4	2642:4	9	TIFFError
LEAF_NODE	2642:4	2642:4	10	TIFFError
LEAF_NODE	2642:14	2642:14	9	(
ARGUMENT	2642:15	2642:15	9	""
FIELD	2642:15	2642:15	10	""
LEAF_NODE	2642:15	2642:15	11	""
LEAF_NODE	2642:17	2642:17	9	,
ARGUMENT	2642:19	2642:19	9	"Invalid FILE pointer for dump file"
FIELD	2642:19	2642:19	10	"Invalid FILE pointer for dump file"
LEAF_NODE	2642:19	2642:19	11	"Invalid FILE pointer for dump file"
LEAF_NODE	2642:55	2642:55	9	)
LEAF_NODE	2642:56	2642:56	7	;
JUMP_STATEMENT	2643:4	2643:14	6	return ( 1 ) ;
KEYWORD	2643:4	2643:4	7	return
LEAF_NODE	2643:4	2643:4	8	return
DESTINATION	2643:11	2643:11	7	( 1 )
EXPR	2643:11	2643:13	8	( 1 )
LEAF_NODE	2643:11	2643:11	9	(
FIELD	2643:12	2643:12	9	1
LEAF_NODE	2643:12	2643:12	10	1
LEAF_NODE	2643:13	2643:13	9	)
LEAF_NODE	2643:14	2643:14	7	;
LEAF_NODE	2644:4	2644:4	5	}
SELECTION	2646:2	2647:4	3	
KEYWORD	2646:2	2646:2	4	if
LEAF_NODE	2646:2	2646:2	5	if
LEAF_NODE	2646:5	2646:5	4	(
CONDITION	2646:6	2646:6	4	format == DUMP_TEXT
EXPR	2646:6	2646:16	5	format == DUMP_TEXT
FIELD	2646:6	2646:6	6	format
LEAF_NODE	2646:6	2646:6	7	format
EQ_OPERATOR	2646:13	2646:13	6	==
LEAF_NODE	2646:13	2646:13	7	==
FIELD	2646:16	2646:16	6	DUMP_TEXT
LEAF_NODE	2646:16	2646:16	7	DUMP_TEXT
LEAF_NODE	2646:25	2646:25	4	)
STATEMENTS	2647:4	2658:4	4	
LEAF_NODE	2647:4	2647:4	5	{
STATEMENTS	2648:4	2657:4	5	
EXPR_STATEMENT	2648:4	2648:40	6	fprintf ( dumpfile , " %s  " , dump_tag ) ;
EXPR	2648:4	2648:4	7	fprintf ( dumpfile , " %s  " , dump_tag )
FUNCTION_CALL	2648:4	2648:39	8	fprintf ( dumpfile , " %s  " , dump_tag )
CALLEE	2648:4	2648:4	9	fprintf
LEAF_NODE	2648:4	2648:4	10	fprintf
LEAF_NODE	2648:12	2648:12	9	(
ARGUMENT	2648:13	2648:13	9	dumpfile
FIELD	2648:13	2648:13	10	dumpfile
LEAF_NODE	2648:13	2648:13	11	dumpfile
LEAF_NODE	2648:21	2648:21	9	,
ARGUMENT	2648:22	2648:22	9	" %s  "
FIELD	2648:22	2648:22	10	" %s  "
LEAF_NODE	2648:22	2648:22	11	" %s  "
LEAF_NODE	2648:29	2648:29	9	,
ARGUMENT	2648:31	2648:31	9	dump_tag
FIELD	2648:31	2648:31	10	dump_tag
LEAF_NODE	2648:31	2648:31	11	dump_tag
LEAF_NODE	2648:39	2648:39	9	)
LEAF_NODE	2648:40	2648:40	7	;
ITERATION	2649:4	2650:6	6	
KEYWORD	2649:4	2649:4	7	for
LEAF_NODE	2649:4	2649:4	8	for
LEAF_NODE	2649:8	2649:8	7	(
FOR_INIT	2649:9	2649:22	7	j = 0 , k = 63 ;
EXPR	2649:9	2649:16	8	j = 0 , k = 63
ASSIGN	2649:9	2649:13	9	j = 0
LVAL	2649:9	2649:9	10	j
FIELD	2649:9	2649:9	11	j
LEAF_NODE	2649:9	2649:9	12	j
ASSIGN_OP	2649:11	2649:11	10	=
LEAF_NODE	2649:11	2649:11	11	=
RVAL	2649:13	2649:13	10	0
FIELD	2649:13	2649:13	11	0
LEAF_NODE	2649:13	2649:13	12	0
LEAF_NODE	2649:14	2649:14	9	,
ASSIGN	2649:16	2649:20	9	k = 63
LVAL	2649:16	2649:16	10	k
FIELD	2649:16	2649:16	11	k
LEAF_NODE	2649:16	2649:16	12	k
ASSIGN_OP	2649:18	2649:18	10	=
LEAF_NODE	2649:18	2649:18	11	=
RVAL	2649:20	2649:20	10	63
FIELD	2649:20	2649:20	11	63
LEAF_NODE	2649:20	2649:20	12	63
LEAF_NODE	2649:22	2649:22	8	;
CONDITION	2649:24	2649:24	7	k >= 0
EXPR	2649:24	2649:29	8	k >= 0
FIELD	2649:24	2649:24	9	k
LEAF_NODE	2649:24	2649:24	10	k
REL_OPERATOR	2649:26	2649:26	9	>=
LEAF_NODE	2649:26	2649:26	10	>=
FIELD	2649:29	2649:29	9	0
LEAF_NODE	2649:29	2649:29	10	0
LEAF_NODE	2649:30	2649:30	7	;
FOR_EXPR	2649:32	2649:32	7	j ++ , k --
EXPR	2649:32	2649:37	8	j ++ , k --
FIELD	2649:32	2649:33	9	j ++
LEAF_NODE	2649:32	2649:32	10	j
LEAF_NODE	2649:33	2649:33	10	++
LEAF_NODE	2649:35	2649:35	9	,
FIELD	2649:37	2649:38	9	k --
LEAF_NODE	2649:37	2649:37	10	k
LEAF_NODE	2649:38	2649:38	10	--
LEAF_NODE	2649:40	2649:40	7	)
STATEMENTS	2650:6	2655:6	7	
LEAF_NODE	2650:6	2650:6	8	{
STATEMENTS	2651:6	2653:6	8	
EXPR_STATEMENT	2651:6	2651:48	9	bitset = data & ( ( ( uint64 ) 1 << k ) ) ? 1 : 0 ;
EXPR	2651:6	2651:6	10	bitset = data & ( ( ( uint64 ) 1 << k ) ) ? 1 : 0
ASSIGN	2651:6	2651:15	11	bitset = data & ( ( ( uint64 ) 1 << k ) ) ? 1 : 0
LVAL	2651:6	2651:6	12	bitset
FIELD	2651:6	2651:6	13	bitset
LEAF_NODE	2651:6	2651:6	14	bitset
ASSIGN_OP	2651:13	2651:13	12	=
LEAF_NODE	2651:13	2651:13	13	=
RVAL	2651:15	2651:15	12	data & ( ( ( uint64 ) 1 << k ) ) ? 1 : 0
COND_EXPR	2651:15	2651:47	13	data & ( ( ( uint64 ) 1 << k ) ) ? 1 : 0
CONDITION	2651:15	2651:39	14	data & ( ( ( uint64 ) 1 << k ) )
FIELD	2651:15	2651:15	15	data
LEAF_NODE	2651:15	2651:15	16	data
LEAF_NODE	2651:20	2651:20	15	&
LEAF_NODE	2651:22	2651:22	15	(
LEAF_NODE	2651:23	2651:23	15	(
LEAF_NODE	2651:24	2651:24	15	(
TYPE_NAME	2651:25	2651:25	15	uint64
LEAF_NODE	2651:25	2651:25	16	uint64
LEAF_NODE	2651:31	2651:31	15	)
FIELD	2651:32	2651:32	15	1
LEAF_NODE	2651:32	2651:32	16	1
LEAF_NODE	2651:34	2651:34	15	<<
FIELD	2651:37	2651:37	15	k
LEAF_NODE	2651:37	2651:37	16	k
LEAF_NODE	2651:38	2651:38	15	)
LEAF_NODE	2651:39	2651:39	15	)
LEAF_NODE	2651:41	2651:41	14	?
EXPR	2651:43	2651:43	14	1
FIELD	2651:43	2651:43	15	1
LEAF_NODE	2651:43	2651:43	16	1
LEAF_NODE	2651:45	2651:45	14	:
FIELD	2651:47	2651:47	14	0
LEAF_NODE	2651:47	2651:47	15	0
LEAF_NODE	2651:48	2651:48	10	;
LEAF_NODE	2652:6	2652:6	9	sprintf
LEAF_NODE	2652:13	2652:13	9	(
LEAF_NODE	2652:14	2652:14	9	&
LEAF_NODE	2652:15	2652:15	9	dump_array
LEAF_NODE	2652:25	2652:25	9	[
LEAF_NODE	2652:26	2652:26	9	j
LEAF_NODE	2652:27	2652:27	9	]
LEAF_NODE	2652:28	2652:28	9	,
LEAF_NODE	2652:30	2652:30	9	(
LEAF_NODE	2652:31	2652:31	9	bitset
LEAF_NODE	2652:37	2652:37	9	)
LEAF_NODE	2652:39	2652:39	9	?
LEAF_NODE	2652:41	2652:41	9	"1"
LEAF_NODE	2652:45	2652:45	9	:
LEAF_NODE	2652:47	2652:47	9	"0"
LEAF_NODE	2652:50	2652:50	9	)
LEAF_NODE	2652:51	2652:51	9	;
SELECTION	2653:6	2654:10	9	
KEYWORD	2653:6	2653:6	10	if
LEAF_NODE	2653:6	2653:6	11	if
LEAF_NODE	2653:9	2653:9	10	(
CONDITION	2653:10	2653:10	10	( k % 8 ) == 0
EXPR	2653:10	2653:21	11	( k % 8 ) == 0
LEAF_NODE	2653:10	2653:10	12	(
FIELD	2653:11	2653:11	12	k
LEAF_NODE	2653:11	2653:11	13	k
LEAF_NODE	2653:13	2653:13	12	%
FIELD	2653:15	2653:15	12	8
LEAF_NODE	2653:15	2653:15	13	8
LEAF_NODE	2653:16	2653:16	12	)
EQ_OPERATOR	2653:18	2653:18	12	==
LEAF_NODE	2653:18	2653:18	13	==
FIELD	2653:21	2653:21	12	0
LEAF_NODE	2653:21	2653:21	13	0
LEAF_NODE	2653:22	2653:22	10	)
STATEMENTS	2654:10	2654:10	10	
EXPR_STATEMENT	2654:10	2654:40	11	sprintf ( & dump_array [ ++ j ] , " " ) ;
EXPR	2654:10	2654:10	12	sprintf ( & dump_array [ ++ j ] , " " )
FUNCTION_CALL	2654:10	2654:39	13	sprintf ( & dump_array [ ++ j ] , " " )
CALLEE	2654:10	2654:10	14	sprintf
LEAF_NODE	2654:10	2654:10	15	sprintf
LEAF_NODE	2654:17	2654:17	14	(
ARGUMENT	2654:18	2654:18	14	& dump_array [ ++ j ]
UNARY_EXPR	2654:18	2654:19	15	& dump_array [ ++ j ]
UNARY_OPERATOR	2654:18	2654:18	16	&
LEAF_NODE	2654:18	2654:18	17	&
FIELD	2654:19	2654:33	16	dump_array [ ++ j ]
LEAF_NODE	2654:19	2654:19	17	dump_array
LEAF_NODE	2654:29	2654:29	17	[
EXPR	2654:30	2654:32	17	++ j
LEAF_NODE	2654:30	2654:30	18	++
FIELD	2654:32	2654:32	18	j
LEAF_NODE	2654:32	2654:32	19	j
LEAF_NODE	2654:33	2654:33	17	]
LEAF_NODE	2654:34	2654:34	14	,
ARGUMENT	2654:36	2654:36	14	" "
FIELD	2654:36	2654:36	15	" "
LEAF_NODE	2654:36	2654:36	16	" "
LEAF_NODE	2654:39	2654:39	14	)
LEAF_NODE	2654:40	2654:40	12	;
LEAF_NODE	2655:6	2655:6	8	}
EXPR_STATEMENT	2656:4	2656:25	6	dump_array [ 71 ] = '\0' ;
EXPR	2656:4	2656:4	7	dump_array [ 71 ] = '\0'
ASSIGN	2656:4	2656:21	8	dump_array [ 71 ] = '\0'
LVAL	2656:4	2656:4	9	dump_array [ 71 ]
FIELD	2656:4	2656:17	10	dump_array [ 71 ]
LEAF_NODE	2656:4	2656:4	11	dump_array
LEAF_NODE	2656:14	2656:14	11	[
EXPR	2656:15	2656:15	11	71
FIELD	2656:15	2656:15	12	71
LEAF_NODE	2656:15	2656:15	13	71
LEAF_NODE	2656:17	2656:17	11	]
ASSIGN_OP	2656:19	2656:19	9	=
LEAF_NODE	2656:19	2656:19	10	=
RVAL	2656:21	2656:21	9	'\0'
FIELD	2656:21	2656:21	10	'\0'
LEAF_NODE	2656:21	2656:21	11	'\0'
LEAF_NODE	2656:25	2656:25	7	;
EXPR_STATEMENT	2657:4	2657:42	6	fprintf ( dumpfile , " %s\n" , dump_array ) ;
EXPR	2657:4	2657:4	7	fprintf ( dumpfile , " %s\n" , dump_array )
FUNCTION_CALL	2657:4	2657:41	8	fprintf ( dumpfile , " %s\n" , dump_array )
CALLEE	2657:4	2657:4	9	fprintf
LEAF_NODE	2657:4	2657:4	10	fprintf
LEAF_NODE	2657:12	2657:12	9	(
ARGUMENT	2657:13	2657:13	9	dumpfile
FIELD	2657:13	2657:13	10	dumpfile
LEAF_NODE	2657:13	2657:13	11	dumpfile
LEAF_NODE	2657:21	2657:21	9	,
ARGUMENT	2657:22	2657:22	9	" %s\n"
FIELD	2657:22	2657:22	10	" %s\n"
LEAF_NODE	2657:22	2657:22	11	" %s\n"
LEAF_NODE	2657:29	2657:29	9	,
ARGUMENT	2657:31	2657:31	9	dump_array
FIELD	2657:31	2657:31	10	dump_array
LEAF_NODE	2657:31	2657:31	11	dump_array
LEAF_NODE	2657:41	2657:41	9	)
LEAF_NODE	2657:42	2657:42	7	;
LEAF_NODE	2658:4	2658:4	5	}
SELECTION	2659:2	2660:4	3	
KEYWORD	2659:2	2659:2	4	else
LEAF_NODE	2659:2	2659:2	5	else
STATEMENTS	2660:4	2666:4	4	
LEAF_NODE	2660:4	2660:4	5	{
STATEMENTS	2661:4	2661:4	5	
SELECTION	2661:4	2662:6	6	
KEYWORD	2661:4	2661:4	7	if
LEAF_NODE	2661:4	2661:4	8	if
LEAF_NODE	2661:7	2661:7	7	(
CONDITION	2661:8	2661:8	7	( fwrite ( & data , 8 , 1 , dumpfile ) ) != 8
EXPR	2661:8	2661:44	8	( fwrite ( & data , 8 , 1 , dumpfile ) ) != 8
LEAF_NODE	2661:8	2661:8	9	(
FUNCTION_CALL	2661:9	2661:38	9	fwrite ( & data , 8 , 1 , dumpfile )
CALLEE	2661:9	2661:9	10	fwrite
LEAF_NODE	2661:9	2661:9	11	fwrite
LEAF_NODE	2661:16	2661:16	10	(
ARGUMENT	2661:17	2661:17	10	& data
UNARY_EXPR	2661:17	2661:18	11	& data
UNARY_OPERATOR	2661:17	2661:17	12	&
LEAF_NODE	2661:17	2661:17	13	&
FIELD	2661:18	2661:18	12	data
LEAF_NODE	2661:18	2661:18	13	data
LEAF_NODE	2661:22	2661:22	10	,
ARGUMENT	2661:24	2661:24	10	8
FIELD	2661:24	2661:24	11	8
LEAF_NODE	2661:24	2661:24	12	8
LEAF_NODE	2661:25	2661:25	10	,
ARGUMENT	2661:27	2661:27	10	1
FIELD	2661:27	2661:27	11	1
LEAF_NODE	2661:27	2661:27	12	1
LEAF_NODE	2661:28	2661:28	10	,
ARGUMENT	2661:30	2661:30	10	dumpfile
FIELD	2661:30	2661:30	11	dumpfile
LEAF_NODE	2661:30	2661:30	12	dumpfile
LEAF_NODE	2661:38	2661:38	10	)
LEAF_NODE	2661:39	2661:39	9	)
EQ_OPERATOR	2661:41	2661:41	9	!=
LEAF_NODE	2661:41	2661:41	10	!=
FIELD	2661:44	2661:44	9	8
LEAF_NODE	2661:44	2661:44	10	8
LEAF_NODE	2661:45	2661:45	7	)
STATEMENTS	2662:6	2665:6	7	
LEAF_NODE	2662:6	2662:6	8	{
STATEMENTS	2663:6	2664:6	8	
EXPR_STATEMENT	2663:6	2663:64	9	TIFFError ( "" , "Unable to write binary data to dump file" ) ;
EXPR	2663:6	2663:6	10	TIFFError ( "" , "Unable to write binary data to dump file" )
FUNCTION_CALL	2663:6	2663:63	11	TIFFError ( "" , "Unable to write binary data to dump file" )
CALLEE	2663:6	2663:6	12	TIFFError
LEAF_NODE	2663:6	2663:6	13	TIFFError
LEAF_NODE	2663:16	2663:16	12	(
ARGUMENT	2663:17	2663:17	12	""
FIELD	2663:17	2663:17	13	""
LEAF_NODE	2663:17	2663:17	14	""
LEAF_NODE	2663:19	2663:19	12	,
ARGUMENT	2663:21	2663:21	12	"Unable to write binary data to dump file"
FIELD	2663:21	2663:21	13	"Unable to write binary data to dump file"
LEAF_NODE	2663:21	2663:21	14	"Unable to write binary data to dump file"
LEAF_NODE	2663:63	2663:63	12	)
LEAF_NODE	2663:64	2663:64	10	;
JUMP_STATEMENT	2664:6	2664:16	9	return ( 1 ) ;
KEYWORD	2664:6	2664:6	10	return
LEAF_NODE	2664:6	2664:6	11	return
DESTINATION	2664:13	2664:13	10	( 1 )
EXPR	2664:13	2664:15	11	( 1 )
LEAF_NODE	2664:13	2664:13	12	(
FIELD	2664:14	2664:14	12	1
LEAF_NODE	2664:14	2664:14	13	1
LEAF_NODE	2664:15	2664:15	12	)
LEAF_NODE	2664:16	2664:16	10	;
LEAF_NODE	2665:6	2665:6	8	}
LEAF_NODE	2666:4	2666:4	5	}
JUMP_STATEMENT	2668:2	2668:12	3	return ( 0 ) ;
KEYWORD	2668:2	2668:2	4	return
LEAF_NODE	2668:2	2668:2	5	return
DESTINATION	2668:9	2668:9	4	( 0 )
EXPR	2668:9	2668:11	5	( 0 )
LEAF_NODE	2668:9	2668:9	6	(
FIELD	2668:10	2668:10	6	0
LEAF_NODE	2668:10	2668:10	7	0
LEAF_NODE	2668:11	2668:11	6	)
LEAF_NODE	2668:12	2668:12	4	;
LEAF_NODE	2669:2	2669:2	2	}
SIMPLE_DECL	2675:4	2675:14	1	va_list ap ;
VAR_DECL	2675:4	2675:12	2	va_list ap
TYPE	2675:4	2675:4	3	va_list
TYPE_NAME	2675:4	2675:4	4	va_list
LEAF_NODE	2675:4	2675:4	5	va_list
NAME	2675:12	2675:12	3	ap
LEAF_NODE	2675:12	2675:12	4	ap
LEAF_NODE	2675:14	2675:14	2	;
FUNCTION_DEF	2684:0	2711:2	1	
RETURN_TYPE	2684:0	2684:7	2	static int
LEAF_NODE	2684:0	2684:0	3	static
TYPE_NAME	2684:7	2684:7	3	int
LEAF_NODE	2684:7	2684:7	4	int
FUNCTION_NAME	2684:11	2684:11	2	dump_buffer
LEAF_NODE	2684:11	2684:11	3	dump_buffer
PARAMETER_LIST	2684:23	2685:48	2	( FILE * dumpfile , int format , uint32 rows , uint32 width , uint32 row , unsigned char * buff )
LEAF_NODE	2684:23	2684:23	3	(
PARAMETER_DECL	2684:24	2684:30	3	FILE * dumpfile
TYPE	2684:24	2684:28	4	FILE *
TYPE_NAME	2684:24	2684:24	5	FILE
LEAF_NODE	2684:24	2684:24	6	FILE
POINTER	2684:28	2684:28	5	*
LEAF_NODE	2684:28	2684:28	6	*
NAME	2684:30	2684:30	4	dumpfile
LEAF_NODE	2684:30	2684:30	5	dumpfile
LEAF_NODE	2684:38	2684:38	3	,
PARAMETER_DECL	2684:40	2684:44	3	int format
TYPE	2684:40	2684:40	4	int
TYPE_NAME	2684:40	2684:40	5	int
LEAF_NODE	2684:40	2684:40	6	int
NAME	2684:44	2684:44	4	format
LEAF_NODE	2684:44	2684:44	5	format
LEAF_NODE	2684:50	2684:50	3	,
PARAMETER_DECL	2684:52	2684:59	3	uint32 rows
TYPE	2684:52	2684:52	4	uint32
TYPE_NAME	2684:52	2684:52	5	uint32
LEAF_NODE	2684:52	2684:52	6	uint32
NAME	2684:59	2684:59	4	rows
LEAF_NODE	2684:59	2684:59	5	rows
LEAF_NODE	2684:63	2684:63	3	,
PARAMETER_DECL	2684:65	2684:72	3	uint32 width
TYPE	2684:65	2684:65	4	uint32
TYPE_NAME	2684:65	2684:65	5	uint32
LEAF_NODE	2684:65	2684:65	6	uint32
NAME	2684:72	2684:72	4	width
LEAF_NODE	2684:72	2684:72	5	width
LEAF_NODE	2684:77	2684:77	3	,
PARAMETER_DECL	2685:17	2685:24	3	uint32 row
TYPE	2685:17	2685:17	4	uint32
TYPE_NAME	2685:17	2685:17	5	uint32
LEAF_NODE	2685:17	2685:17	6	uint32
NAME	2685:24	2685:24	4	row
LEAF_NODE	2685:24	2685:24	5	row
LEAF_NODE	2685:27	2685:27	3	,
PARAMETER_DECL	2685:29	2685:44	3	unsigned char * buff
TYPE	2685:29	2685:43	4	unsigned char *
TYPE_NAME	2685:29	2685:38	5	unsigned char
LEAF_NODE	2685:29	2685:29	6	unsigned
LEAF_NODE	2685:38	2685:38	6	char
POINTER	2685:43	2685:43	5	*
LEAF_NODE	2685:43	2685:43	6	*
NAME	2685:44	2685:44	4	buff
LEAF_NODE	2685:44	2685:44	5	buff
LEAF_NODE	2685:48	2685:48	3	)
LEAF_NODE	2686:2	2686:2	2	{
STATEMENTS	2687:2	2710:2	2	
SIMPLE_DECL	2687:2	2687:10	3	int j , int k ;
INIT_DECL_LIST	2687:2	2687:2	4	int j , int k
VAR_DECL	2687:2	2687:6	5	int j
TYPE	2687:2	2687:2	6	int
TYPE_NAME	2687:2	2687:2	7	int
LEAF_NODE	2687:2	2687:2	8	int
NAME	2687:6	2687:6	6	j
LEAF_NODE	2687:6	2687:6	7	j
LEAF_NODE	2687:7	2687:7	5	,
VAR_DECL	2687:2	2687:9	5	int k
TYPE	2687:2	2687:2	6	int
TYPE_NAME	2687:2	2687:2	7	int
LEAF_NODE	2687:2	2687:2	8	int
NAME	2687:9	2687:9	6	k
LEAF_NODE	2687:9	2687:9	7	k
LEAF_NODE	2687:10	2687:10	4	;
SIMPLE_DECL	2688:2	2688:10	3	uint32 i ;
VAR_DECL	2688:2	2688:9	4	uint32 i
TYPE	2688:2	2688:2	5	uint32
TYPE_NAME	2688:2	2688:2	6	uint32
LEAF_NODE	2688:2	2688:2	7	uint32
NAME	2688:9	2688:9	5	i
LEAF_NODE	2688:9	2688:9	6	i
LEAF_NODE	2688:10	2688:10	4	;
SIMPLE_DECL	2689:2	2689:26	3	unsigned char * dump_ptr ;
VAR_DECL	2689:2	2689:18	4	unsigned char * dump_ptr
TYPE	2689:2	2689:16	5	unsigned char *
TYPE_NAME	2689:2	2689:11	6	unsigned char
LEAF_NODE	2689:2	2689:2	7	unsigned
LEAF_NODE	2689:11	2689:11	7	char
POINTER	2689:16	2689:16	6	*
LEAF_NODE	2689:16	2689:16	7	*
NAME	2689:18	2689:18	5	dump_ptr
LEAF_NODE	2689:18	2689:18	6	dump_ptr
LEAF_NODE	2689:26	2689:26	4	;
SELECTION	2691:2	2692:4	3	
KEYWORD	2691:2	2691:2	4	if
LEAF_NODE	2691:2	2691:2	5	if
LEAF_NODE	2691:5	2691:5	4	(
CONDITION	2691:6	2691:6	4	dumpfile == NULL
EXPR	2691:6	2691:18	5	dumpfile == NULL
FIELD	2691:6	2691:6	6	dumpfile
LEAF_NODE	2691:6	2691:6	7	dumpfile
EQ_OPERATOR	2691:15	2691:15	6	==
LEAF_NODE	2691:15	2691:15	7	==
FIELD	2691:18	2691:18	6	NULL
LEAF_NODE	2691:18	2691:18	7	NULL
LEAF_NODE	2691:22	2691:22	4	)
STATEMENTS	2692:4	2695:4	4	
LEAF_NODE	2692:4	2692:4	5	{
STATEMENTS	2693:4	2694:4	5	
EXPR_STATEMENT	2693:4	2693:56	6	TIFFError ( "" , "Invalid FILE pointer for dump file" ) ;
EXPR	2693:4	2693:4	7	TIFFError ( "" , "Invalid FILE pointer for dump file" )
FUNCTION_CALL	2693:4	2693:55	8	TIFFError ( "" , "Invalid FILE pointer for dump file" )
CALLEE	2693:4	2693:4	9	TIFFError
LEAF_NODE	2693:4	2693:4	10	TIFFError
LEAF_NODE	2693:14	2693:14	9	(
ARGUMENT	2693:15	2693:15	9	""
FIELD	2693:15	2693:15	10	""
LEAF_NODE	2693:15	2693:15	11	""
LEAF_NODE	2693:17	2693:17	9	,
ARGUMENT	2693:19	2693:19	9	"Invalid FILE pointer for dump file"
FIELD	2693:19	2693:19	10	"Invalid FILE pointer for dump file"
LEAF_NODE	2693:19	2693:19	11	"Invalid FILE pointer for dump file"
LEAF_NODE	2693:55	2693:55	9	)
LEAF_NODE	2693:56	2693:56	7	;
JUMP_STATEMENT	2694:4	2694:14	6	return ( 1 ) ;
KEYWORD	2694:4	2694:4	7	return
LEAF_NODE	2694:4	2694:4	8	return
DESTINATION	2694:11	2694:11	7	( 1 )
EXPR	2694:11	2694:13	8	( 1 )
LEAF_NODE	2694:11	2694:11	9	(
FIELD	2694:12	2694:12	9	1
LEAF_NODE	2694:12	2694:12	10	1
LEAF_NODE	2694:13	2694:13	9	)
LEAF_NODE	2694:14	2694:14	7	;
LEAF_NODE	2695:4	2695:4	5	}
ITERATION	2697:2	2698:4	3	
KEYWORD	2697:2	2697:2	4	for
LEAF_NODE	2697:2	2697:2	5	for
LEAF_NODE	2697:6	2697:6	4	(
FOR_INIT	2697:7	2697:12	4	i = 0 ;
EXPR	2697:7	2697:7	5	i = 0
ASSIGN	2697:7	2697:11	6	i = 0
LVAL	2697:7	2697:7	7	i
FIELD	2697:7	2697:7	8	i
LEAF_NODE	2697:7	2697:7	9	i
ASSIGN_OP	2697:9	2697:9	7	=
LEAF_NODE	2697:9	2697:9	8	=
RVAL	2697:11	2697:11	7	0
FIELD	2697:11	2697:11	8	0
LEAF_NODE	2697:11	2697:11	9	0
LEAF_NODE	2697:12	2697:12	5	;
CONDITION	2697:14	2697:14	4	i < rows
EXPR	2697:14	2697:18	5	i < rows
FIELD	2697:14	2697:14	6	i
LEAF_NODE	2697:14	2697:14	7	i
REL_OPERATOR	2697:16	2697:16	6	<
LEAF_NODE	2697:16	2697:16	7	<
FIELD	2697:18	2697:18	6	rows
LEAF_NODE	2697:18	2697:18	7	rows
LEAF_NODE	2697:22	2697:22	4	;
FOR_EXPR	2697:24	2697:24	4	i ++
EXPR	2697:24	2697:24	5	i ++
FIELD	2697:24	2697:25	6	i ++
LEAF_NODE	2697:24	2697:24	7	i
LEAF_NODE	2697:25	2697:25	7	++
LEAF_NODE	2697:27	2697:27	4	)
STATEMENTS	2698:4	2709:4	4	
LEAF_NODE	2698:4	2698:4	5	{
STATEMENTS	2699:4	2707:4	5	
EXPR_STATEMENT	2699:4	2699:33	6	dump_ptr = buff + ( i * width ) ;
EXPR	2699:4	2699:4	7	dump_ptr = buff + ( i * width )
ASSIGN	2699:4	2699:15	8	dump_ptr = buff + ( i * width )
LVAL	2699:4	2699:4	9	dump_ptr
FIELD	2699:4	2699:4	10	dump_ptr
LEAF_NODE	2699:4	2699:4	11	dump_ptr
ASSIGN_OP	2699:13	2699:13	9	=
LEAF_NODE	2699:13	2699:13	10	=
RVAL	2699:15	2699:32	9	buff + ( i * width )
FIELD	2699:15	2699:15	10	buff
LEAF_NODE	2699:15	2699:15	11	buff
LEAF_NODE	2699:20	2699:20	10	+
LEAF_NODE	2699:22	2699:22	10	(
FIELD	2699:23	2699:23	10	i
LEAF_NODE	2699:23	2699:23	11	i
LEAF_NODE	2699:25	2699:25	10	*
FIELD	2699:27	2699:27	10	width
LEAF_NODE	2699:27	2699:27	11	width
LEAF_NODE	2699:32	2699:32	10	)
LEAF_NODE	2699:33	2699:33	7	;
SELECTION	2700:4	2701:6	6	
KEYWORD	2700:4	2700:4	7	if
LEAF_NODE	2700:4	2700:4	8	if
LEAF_NODE	2700:7	2700:7	7	(
CONDITION	2700:8	2700:8	7	format == DUMP_TEXT
EXPR	2700:8	2700:18	8	format == DUMP_TEXT
FIELD	2700:8	2700:8	9	format
LEAF_NODE	2700:8	2700:8	10	format
EQ_OPERATOR	2700:15	2700:15	9	==
LEAF_NODE	2700:15	2700:15	10	==
FIELD	2700:18	2700:18	9	DUMP_TEXT
LEAF_NODE	2700:18	2700:18	10	DUMP_TEXT
LEAF_NODE	2700:27	2700:27	7	)
STATEMENTS	2701:6	2701:6	7	
EXPR_STATEMENT	2701:6	2703:42	8	dump_info ( dumpfile , format , "" , "Row %4d, %d bytes at offset %d" , row + i + 1 , width , row * width ) ;
EXPR	2701:6	2701:6	9	dump_info ( dumpfile , format , "" , "Row %4d, %d bytes at offset %d" , row + i + 1 , width , row * width )
FUNCTION_CALL	2701:6	2703:41	10	dump_info ( dumpfile , format , "" , "Row %4d, %d bytes at offset %d" , row + i + 1 , width , row * width )
CALLEE	2701:6	2701:6	11	dump_info
LEAF_NODE	2701:6	2701:6	12	dump_info
LEAF_NODE	2701:16	2701:16	11	(
ARGUMENT	2701:17	2701:17	11	dumpfile
FIELD	2701:17	2701:17	12	dumpfile
LEAF_NODE	2701:17	2701:17	13	dumpfile
LEAF_NODE	2701:25	2701:25	11	,
ARGUMENT	2701:27	2701:27	11	format
FIELD	2701:27	2701:27	12	format
LEAF_NODE	2701:27	2701:27	13	format
LEAF_NODE	2701:33	2701:33	11	,
ARGUMENT	2701:35	2701:35	11	""
FIELD	2701:35	2701:35	12	""
LEAF_NODE	2701:35	2701:35	13	""
LEAF_NODE	2701:37	2701:37	11	,
ARGUMENT	2702:17	2702:17	11	"Row %4d, %d bytes at offset %d"
FIELD	2702:17	2702:17	12	"Row %4d, %d bytes at offset %d"
LEAF_NODE	2702:17	2702:17	13	"Row %4d, %d bytes at offset %d"
LEAF_NODE	2702:49	2702:49	11	,
ARGUMENT	2703:10	2703:20	11	row + i + 1
FIELD	2703:10	2703:10	12	row
LEAF_NODE	2703:10	2703:10	13	row
LEAF_NODE	2703:14	2703:14	12	+
FIELD	2703:16	2703:16	12	i
LEAF_NODE	2703:16	2703:16	13	i
LEAF_NODE	2703:18	2703:18	12	+
FIELD	2703:20	2703:20	12	1
LEAF_NODE	2703:20	2703:20	13	1
LEAF_NODE	2703:21	2703:21	11	,
ARGUMENT	2703:23	2703:23	11	width
FIELD	2703:23	2703:23	12	width
LEAF_NODE	2703:23	2703:23	13	width
LEAF_NODE	2703:28	2703:28	11	,
ARGUMENT	2703:30	2703:36	11	row * width
FIELD	2703:30	2703:30	12	row
LEAF_NODE	2703:30	2703:30	13	row
LEAF_NODE	2703:34	2703:34	12	*
FIELD	2703:36	2703:36	12	width
LEAF_NODE	2703:36	2703:36	13	width
LEAF_NODE	2703:41	2703:41	11	)
LEAF_NODE	2703:42	2703:42	9	;
LEAF_NODE	2705:4	2705:4	6	for
LEAF_NODE	2705:8	2705:8	6	(
EXPR_STATEMENT	2705:9	2705:25	6	j = 0 , k = width ;
EXPR	2705:9	2705:16	7	j = 0 , k = width
ASSIGN	2705:9	2705:13	8	j = 0
LVAL	2705:9	2705:9	9	j
FIELD	2705:9	2705:9	10	j
LEAF_NODE	2705:9	2705:9	11	j
ASSIGN_OP	2705:11	2705:11	9	=
LEAF_NODE	2705:11	2705:11	10	=
RVAL	2705:13	2705:13	9	0
FIELD	2705:13	2705:13	10	0
LEAF_NODE	2705:13	2705:13	11	0
LEAF_NODE	2705:14	2705:14	8	,
ASSIGN	2705:16	2705:20	8	k = width
LVAL	2705:16	2705:16	9	k
FIELD	2705:16	2705:16	10	k
LEAF_NODE	2705:16	2705:16	11	k
ASSIGN_OP	2705:18	2705:18	9	=
LEAF_NODE	2705:18	2705:18	10	=
RVAL	2705:20	2705:20	9	width
FIELD	2705:20	2705:20	10	width
LEAF_NODE	2705:20	2705:20	11	width
LEAF_NODE	2705:25	2705:25	7	;
EXPR_STATEMENT	2705:27	2705:34	6	k >= 10 ;
EXPR	2705:27	2705:32	7	k >= 10
FIELD	2705:27	2705:27	8	k
LEAF_NODE	2705:27	2705:27	9	k
REL_OPERATOR	2705:29	2705:29	8	>=
LEAF_NODE	2705:29	2705:29	9	>=
FIELD	2705:32	2705:32	8	10
LEAF_NODE	2705:32	2705:32	9	10
LEAF_NODE	2705:34	2705:34	7	;
LEAF_NODE	2705:36	2705:36	6	j
LEAF_NODE	2705:38	2705:38	6	+=
LEAF_NODE	2705:41	2705:41	6	10
LEAF_NODE	2705:43	2705:43	6	,
LEAF_NODE	2705:45	2705:45	6	k
LEAF_NODE	2705:47	2705:47	6	-=
LEAF_NODE	2705:50	2705:50	6	10
LEAF_NODE	2705:52	2705:52	6	,
LEAF_NODE	2705:54	2705:54	6	dump_ptr
LEAF_NODE	2705:63	2705:63	6	+=
LEAF_NODE	2705:66	2705:66	6	10
LEAF_NODE	2705:68	2705:68	6	)
EXPR_STATEMENT	2706:6	2706:52	6	dump_data ( dumpfile , format , "" , dump_ptr , 10 ) ;
EXPR	2706:6	2706:6	7	dump_data ( dumpfile , format , "" , dump_ptr , 10 )
FUNCTION_CALL	2706:6	2706:51	8	dump_data ( dumpfile , format , "" , dump_ptr , 10 )
CALLEE	2706:6	2706:6	9	dump_data
LEAF_NODE	2706:6	2706:6	10	dump_data
LEAF_NODE	2706:16	2706:16	9	(
ARGUMENT	2706:17	2706:17	9	dumpfile
FIELD	2706:17	2706:17	10	dumpfile
LEAF_NODE	2706:17	2706:17	11	dumpfile
LEAF_NODE	2706:25	2706:25	9	,
ARGUMENT	2706:27	2706:27	9	format
FIELD	2706:27	2706:27	10	format
LEAF_NODE	2706:27	2706:27	11	format
LEAF_NODE	2706:33	2706:33	9	,
ARGUMENT	2706:35	2706:35	9	""
FIELD	2706:35	2706:35	10	""
LEAF_NODE	2706:35	2706:35	11	""
LEAF_NODE	2706:37	2706:37	9	,
ARGUMENT	2706:39	2706:39	9	dump_ptr
FIELD	2706:39	2706:39	10	dump_ptr
LEAF_NODE	2706:39	2706:39	11	dump_ptr
LEAF_NODE	2706:47	2706:47	9	,
ARGUMENT	2706:49	2706:49	9	10
FIELD	2706:49	2706:49	10	10
LEAF_NODE	2706:49	2706:49	11	10
LEAF_NODE	2706:51	2706:51	9	)
LEAF_NODE	2706:52	2706:52	7	;
SELECTION	2707:4	2708:6	6	
KEYWORD	2707:4	2707:4	7	if
LEAF_NODE	2707:4	2707:4	8	if
LEAF_NODE	2707:7	2707:7	7	(
CONDITION	2707:8	2707:8	7	k > 0
EXPR	2707:8	2707:12	8	k > 0
FIELD	2707:8	2707:8	9	k
LEAF_NODE	2707:8	2707:8	10	k
REL_OPERATOR	2707:10	2707:10	9	>
LEAF_NODE	2707:10	2707:10	10	>
FIELD	2707:12	2707:12	9	0
LEAF_NODE	2707:12	2707:12	10	0
LEAF_NODE	2707:13	2707:13	7	)
STATEMENTS	2708:6	2708:6	7	
EXPR_STATEMENT	2708:6	2708:51	8	dump_data ( dumpfile , format , "" , dump_ptr , k ) ;
EXPR	2708:6	2708:6	9	dump_data ( dumpfile , format , "" , dump_ptr , k )
FUNCTION_CALL	2708:6	2708:50	10	dump_data ( dumpfile , format , "" , dump_ptr , k )
CALLEE	2708:6	2708:6	11	dump_data
LEAF_NODE	2708:6	2708:6	12	dump_data
LEAF_NODE	2708:16	2708:16	11	(
ARGUMENT	2708:17	2708:17	11	dumpfile
FIELD	2708:17	2708:17	12	dumpfile
LEAF_NODE	2708:17	2708:17	13	dumpfile
LEAF_NODE	2708:25	2708:25	11	,
ARGUMENT	2708:27	2708:27	11	format
FIELD	2708:27	2708:27	12	format
LEAF_NODE	2708:27	2708:27	13	format
LEAF_NODE	2708:33	2708:33	11	,
ARGUMENT	2708:35	2708:35	11	""
FIELD	2708:35	2708:35	12	""
LEAF_NODE	2708:35	2708:35	13	""
LEAF_NODE	2708:37	2708:37	11	,
ARGUMENT	2708:39	2708:39	11	dump_ptr
FIELD	2708:39	2708:39	12	dump_ptr
LEAF_NODE	2708:39	2708:39	13	dump_ptr
LEAF_NODE	2708:47	2708:47	11	,
ARGUMENT	2708:49	2708:49	11	k
FIELD	2708:49	2708:49	12	k
LEAF_NODE	2708:49	2708:49	13	k
LEAF_NODE	2708:50	2708:50	11	)
LEAF_NODE	2708:51	2708:51	9	;
LEAF_NODE	2709:4	2709:4	5	}
JUMP_STATEMENT	2710:2	2710:12	3	return ( 0 ) ;
KEYWORD	2710:2	2710:2	4	return
LEAF_NODE	2710:2	2710:2	5	return
DESTINATION	2710:9	2710:9	4	( 0 )
EXPR	2710:9	2710:11	5	( 0 )
LEAF_NODE	2710:9	2710:9	6	(
FIELD	2710:10	2710:10	6	0
LEAF_NODE	2710:10	2710:10	7	0
LEAF_NODE	2710:11	2710:11	6	)
LEAF_NODE	2710:12	2710:12	4	;
LEAF_NODE	2711:2	2711:2	2	}
FUNCTION_DEF	2719:0	2783:2	1	
RETURN_TYPE	2719:0	2719:7	2	static int
LEAF_NODE	2719:0	2719:0	3	static
TYPE_NAME	2719:7	2719:7	3	int
LEAF_NODE	2719:7	2719:7	4	int
FUNCTION_NAME	2720:0	2720:0	2	extractContigSamplesBytes
LEAF_NODE	2720:0	2720:0	3	extractContigSamplesBytes
PARAMETER_LIST	2720:26	2722:68	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end )
LEAF_NODE	2720:26	2720:26	3	(
PARAMETER_DECL	2720:27	2720:34	3	uint8 * in
TYPE	2720:27	2720:33	4	uint8 *
TYPE_NAME	2720:27	2720:27	5	uint8
LEAF_NODE	2720:27	2720:27	6	uint8
POINTER	2720:33	2720:33	5	*
LEAF_NODE	2720:33	2720:33	6	*
NAME	2720:34	2720:34	4	in
LEAF_NODE	2720:34	2720:34	5	in
LEAF_NODE	2720:36	2720:36	3	,
PARAMETER_DECL	2720:38	2720:45	3	uint8 * out
TYPE	2720:38	2720:44	4	uint8 *
TYPE_NAME	2720:38	2720:38	5	uint8
LEAF_NODE	2720:38	2720:38	6	uint8
POINTER	2720:44	2720:44	5	*
LEAF_NODE	2720:44	2720:44	6	*
NAME	2720:45	2720:45	4	out
LEAF_NODE	2720:45	2720:45	5	out
LEAF_NODE	2720:48	2720:48	3	,
PARAMETER_DECL	2720:50	2720:57	3	uint32 cols
TYPE	2720:50	2720:50	4	uint32
TYPE_NAME	2720:50	2720:50	5	uint32
LEAF_NODE	2720:50	2720:50	6	uint32
NAME	2720:57	2720:57	4	cols
LEAF_NODE	2720:57	2720:57	5	cols
LEAF_NODE	2720:61	2720:61	3	,
PARAMETER_DECL	2721:27	2721:37	3	tsample_t sample
TYPE	2721:27	2721:27	4	tsample_t
TYPE_NAME	2721:27	2721:27	5	tsample_t
LEAF_NODE	2721:27	2721:27	6	tsample_t
NAME	2721:37	2721:37	4	sample
LEAF_NODE	2721:37	2721:37	5	sample
LEAF_NODE	2721:43	2721:43	3	,
PARAMETER_DECL	2721:45	2721:52	3	uint16 spp
TYPE	2721:45	2721:45	4	uint16
TYPE_NAME	2721:45	2721:45	5	uint16
LEAF_NODE	2721:45	2721:45	6	uint16
NAME	2721:52	2721:52	4	spp
LEAF_NODE	2721:52	2721:52	5	spp
LEAF_NODE	2721:55	2721:55	3	,
PARAMETER_DECL	2721:57	2721:64	3	uint16 bps
TYPE	2721:57	2721:57	4	uint16
TYPE_NAME	2721:57	2721:57	5	uint16
LEAF_NODE	2721:57	2721:57	6	uint16
NAME	2721:64	2721:64	4	bps
LEAF_NODE	2721:64	2721:64	5	bps
LEAF_NODE	2721:67	2721:67	3	,
PARAMETER_DECL	2722:27	2722:37	3	tsample_t count
TYPE	2722:27	2722:27	4	tsample_t
TYPE_NAME	2722:27	2722:27	5	tsample_t
LEAF_NODE	2722:27	2722:27	6	tsample_t
NAME	2722:37	2722:37	4	count
LEAF_NODE	2722:37	2722:37	5	count
LEAF_NODE	2722:42	2722:42	3	,
PARAMETER_DECL	2722:44	2722:51	3	uint32 start
TYPE	2722:44	2722:44	4	uint32
TYPE_NAME	2722:44	2722:44	5	uint32
LEAF_NODE	2722:44	2722:44	6	uint32
NAME	2722:51	2722:51	4	start
LEAF_NODE	2722:51	2722:51	5	start
LEAF_NODE	2722:56	2722:56	3	,
PARAMETER_DECL	2722:58	2722:65	3	uint32 end
TYPE	2722:58	2722:58	4	uint32
TYPE_NAME	2722:58	2722:58	5	uint32
LEAF_NODE	2722:58	2722:58	6	uint32
NAME	2722:65	2722:65	4	end
LEAF_NODE	2722:65	2722:65	5	end
LEAF_NODE	2722:68	2722:68	3	)
LEAF_NODE	2723:2	2723:2	2	{
STATEMENTS	2724:2	2782:2	2	
SIMPLE_DECL	2724:2	2724:33	3	int i , int bytes_per_sample , int sindex ;
INIT_DECL_LIST	2724:2	2724:2	4	int i , int bytes_per_sample , int sindex
VAR_DECL	2724:2	2724:6	5	int i
TYPE	2724:2	2724:2	6	int
TYPE_NAME	2724:2	2724:2	7	int
LEAF_NODE	2724:2	2724:2	8	int
NAME	2724:6	2724:6	6	i
LEAF_NODE	2724:6	2724:6	7	i
LEAF_NODE	2724:7	2724:7	5	,
INIT_DECL_LIST	2724:2	2724:2	5	int bytes_per_sample , int sindex
VAR_DECL	2724:2	2724:9	6	int bytes_per_sample
TYPE	2724:2	2724:2	7	int
TYPE_NAME	2724:2	2724:2	8	int
LEAF_NODE	2724:2	2724:2	9	int
NAME	2724:9	2724:9	7	bytes_per_sample
LEAF_NODE	2724:9	2724:9	8	bytes_per_sample
LEAF_NODE	2724:25	2724:25	6	,
VAR_DECL	2724:2	2724:27	6	int sindex
TYPE	2724:2	2724:2	7	int
TYPE_NAME	2724:2	2724:2	8	int
LEAF_NODE	2724:2	2724:2	9	int
NAME	2724:27	2724:27	7	sindex
LEAF_NODE	2724:27	2724:27	8	sindex
LEAF_NODE	2724:33	2724:33	4	;
SIMPLE_DECL	2725:2	2725:37	3	uint32 col , uint32 dst_rowsize , uint32 bit_offset ;
INIT_DECL_LIST	2725:2	2725:2	4	uint32 col , uint32 dst_rowsize , uint32 bit_offset
VAR_DECL	2725:2	2725:9	5	uint32 col
TYPE	2725:2	2725:2	6	uint32
TYPE_NAME	2725:2	2725:2	7	uint32
LEAF_NODE	2725:2	2725:2	8	uint32
NAME	2725:9	2725:9	6	col
LEAF_NODE	2725:9	2725:9	7	col
LEAF_NODE	2725:12	2725:12	5	,
INIT_DECL_LIST	2725:2	2725:2	5	uint32 dst_rowsize , uint32 bit_offset
VAR_DECL	2725:2	2725:14	6	uint32 dst_rowsize
TYPE	2725:2	2725:2	7	uint32
TYPE_NAME	2725:2	2725:2	8	uint32
LEAF_NODE	2725:2	2725:2	9	uint32
NAME	2725:14	2725:14	7	dst_rowsize
LEAF_NODE	2725:14	2725:14	8	dst_rowsize
LEAF_NODE	2725:25	2725:25	6	,
VAR_DECL	2725:2	2725:27	6	uint32 bit_offset
TYPE	2725:2	2725:2	7	uint32
TYPE_NAME	2725:2	2725:2	8	uint32
LEAF_NODE	2725:2	2725:2	9	uint32
NAME	2725:27	2725:27	7	bit_offset
LEAF_NODE	2725:27	2725:27	8	bit_offset
LEAF_NODE	2725:37	2725:37	4	;
SIMPLE_DECL	2726:2	2726:32	3	uint32 src_byte ;
VAR_DECL	2726:2	2726:9	4	uint32 src_byte
TYPE	2726:2	2726:2	5	uint32
TYPE_NAME	2726:2	2726:2	6	uint32
LEAF_NODE	2726:2	2726:2	7	uint32
NAME	2726:9	2726:9	5	src_byte
LEAF_NODE	2726:9	2726:9	6	src_byte
LEAF_NODE	2726:32	2726:32	4	;
SIMPLE_DECL	2727:2	2727:17	3	uint8 * src ; src = in ;
VAR_DECL	2727:2	2727:9	4	uint8 * src ; src = in
TYPE	2727:2	2727:8	5	uint8 *
TYPE_NAME	2727:2	2727:2	6	uint8
LEAF_NODE	2727:2	2727:2	7	uint8
POINTER	2727:8	2727:8	6	*
LEAF_NODE	2727:8	2727:8	7	*
NAME	2727:9	2727:9	5	src
LEAF_NODE	2727:9	2727:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	2727:9	2727:9	5	src = in
ASSIGN	2727:9	2727:15	6	src = in
LVAL	2727:9	2727:9	7	src
NAME	2727:9	2727:9	8	src
LEAF_NODE	2727:9	2727:9	9	src
ASSIGN_OP	2727:13	2727:13	7	=
LEAF_NODE	2727:13	2727:13	8	=
RVAL	2727:15	2727:15	7	in
FIELD	2727:15	2727:15	8	in
LEAF_NODE	2727:15	2727:15	9	in
LEAF_NODE	2727:17	2727:17	4	;
SIMPLE_DECL	2728:2	2728:18	3	uint8 * dst ; dst = out ;
VAR_DECL	2728:2	2728:9	4	uint8 * dst ; dst = out
TYPE	2728:2	2728:8	5	uint8 *
TYPE_NAME	2728:2	2728:2	6	uint8
LEAF_NODE	2728:2	2728:2	7	uint8
POINTER	2728:8	2728:8	6	*
LEAF_NODE	2728:8	2728:8	7	*
NAME	2728:9	2728:9	5	dst
LEAF_NODE	2728:9	2728:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	2728:9	2728:9	5	dst = out
ASSIGN	2728:9	2728:15	6	dst = out
LVAL	2728:9	2728:9	7	dst
NAME	2728:9	2728:9	8	dst
LEAF_NODE	2728:9	2728:9	9	dst
ASSIGN_OP	2728:13	2728:13	7	=
LEAF_NODE	2728:13	2728:13	8	=
RVAL	2728:15	2728:15	7	out
FIELD	2728:15	2728:15	8	out
LEAF_NODE	2728:15	2728:15	9	out
LEAF_NODE	2728:18	2728:18	4	;
SELECTION	2730:2	2731:4	3	
KEYWORD	2730:2	2730:2	4	if
LEAF_NODE	2730:2	2730:2	5	if
LEAF_NODE	2730:5	2730:5	4	(
CONDITION	2730:6	2730:6	4	( src == NULL ) || ( dst == NULL )
EXPR	2730:6	2730:6	5	( src == NULL ) || ( dst == NULL )
OR	2730:6	2730:23	6	( src == NULL ) || ( dst == NULL )
EXPR	2730:6	2730:18	7	( src == NULL )
LEAF_NODE	2730:6	2730:6	8	(
FIELD	2730:7	2730:7	8	src
LEAF_NODE	2730:7	2730:7	9	src
EQ_OPERATOR	2730:11	2730:11	8	==
LEAF_NODE	2730:11	2730:11	9	==
FIELD	2730:14	2730:14	8	NULL
LEAF_NODE	2730:14	2730:14	9	NULL
LEAF_NODE	2730:18	2730:18	8	)
LEAF_NODE	2730:20	2730:20	7	||
EXPR	2730:23	2730:35	7	( dst == NULL )
LEAF_NODE	2730:23	2730:23	8	(
FIELD	2730:24	2730:24	8	dst
LEAF_NODE	2730:24	2730:24	9	dst
EQ_OPERATOR	2730:28	2730:28	8	==
LEAF_NODE	2730:28	2730:28	9	==
FIELD	2730:31	2730:31	8	NULL
LEAF_NODE	2730:31	2730:31	9	NULL
LEAF_NODE	2730:35	2730:35	8	)
LEAF_NODE	2730:36	2730:36	4	)
STATEMENTS	2731:4	2734:4	4	
LEAF_NODE	2731:4	2731:4	5	{
STATEMENTS	2732:4	2733:4	5	
EXPR_STATEMENT	2732:4	2732:75	6	TIFFError ( "extractContigSamplesBytes" , "Invalid input or output buffer" ) ;
EXPR	2732:4	2732:4	7	TIFFError ( "extractContigSamplesBytes" , "Invalid input or output buffer" )
FUNCTION_CALL	2732:4	2732:74	8	TIFFError ( "extractContigSamplesBytes" , "Invalid input or output buffer" )
CALLEE	2732:4	2732:4	9	TIFFError
LEAF_NODE	2732:4	2732:4	10	TIFFError
LEAF_NODE	2732:13	2732:13	9	(
ARGUMENT	2732:14	2732:14	9	"extractContigSamplesBytes"
FIELD	2732:14	2732:14	10	"extractContigSamplesBytes"
LEAF_NODE	2732:14	2732:14	11	"extractContigSamplesBytes"
LEAF_NODE	2732:41	2732:41	9	,
ARGUMENT	2732:42	2732:42	9	"Invalid input or output buffer"
FIELD	2732:42	2732:42	10	"Invalid input or output buffer"
LEAF_NODE	2732:42	2732:42	11	"Invalid input or output buffer"
LEAF_NODE	2732:74	2732:74	9	)
LEAF_NODE	2732:75	2732:75	7	;
JUMP_STATEMENT	2733:4	2733:14	6	return ( 1 ) ;
KEYWORD	2733:4	2733:4	7	return
LEAF_NODE	2733:4	2733:4	8	return
DESTINATION	2733:11	2733:11	7	( 1 )
EXPR	2733:11	2733:13	8	( 1 )
LEAF_NODE	2733:11	2733:11	9	(
FIELD	2733:12	2733:12	9	1
LEAF_NODE	2733:12	2733:12	10	1
LEAF_NODE	2733:13	2733:13	9	)
LEAF_NODE	2733:14	2733:14	7	;
LEAF_NODE	2734:4	2734:4	5	}
SELECTION	2736:2	2737:4	3	
KEYWORD	2736:2	2736:2	4	if
LEAF_NODE	2736:2	2736:2	5	if
LEAF_NODE	2736:5	2736:5	4	(
CONDITION	2736:6	2736:6	4	( start > end ) || ( start > cols )
EXPR	2736:6	2736:6	5	( start > end ) || ( start > cols )
OR	2736:6	2736:23	6	( start > end ) || ( start > cols )
EXPR	2736:6	2736:18	7	( start > end )
LEAF_NODE	2736:6	2736:6	8	(
FIELD	2736:7	2736:7	8	start
LEAF_NODE	2736:7	2736:7	9	start
REL_OPERATOR	2736:13	2736:13	8	>
LEAF_NODE	2736:13	2736:13	9	>
FIELD	2736:15	2736:15	8	end
LEAF_NODE	2736:15	2736:15	9	end
LEAF_NODE	2736:18	2736:18	8	)
LEAF_NODE	2736:20	2736:20	7	||
EXPR	2736:23	2736:36	7	( start > cols )
LEAF_NODE	2736:23	2736:23	8	(
FIELD	2736:24	2736:24	8	start
LEAF_NODE	2736:24	2736:24	9	start
REL_OPERATOR	2736:30	2736:30	8	>
LEAF_NODE	2736:30	2736:30	9	>
FIELD	2736:32	2736:32	8	cols
LEAF_NODE	2736:32	2736:32	9	cols
LEAF_NODE	2736:36	2736:36	8	)
LEAF_NODE	2736:37	2736:37	4	)
STATEMENTS	2737:4	2741:4	4	
LEAF_NODE	2737:4	2737:4	5	{
STATEMENTS	2738:4	2740:4	5	
EXPR_STATEMENT	2738:4	2739:62	6	TIFFError ( "extractContigSamplesBytes" , "Invalid start column value %d ignored" , start ) ;
EXPR	2738:4	2738:4	7	TIFFError ( "extractContigSamplesBytes" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	2738:4	2739:61	8	TIFFError ( "extractContigSamplesBytes" , "Invalid start column value %d ignored" , start )
CALLEE	2738:4	2738:4	9	TIFFError
LEAF_NODE	2738:4	2738:4	10	TIFFError
LEAF_NODE	2738:14	2738:14	9	(
ARGUMENT	2738:15	2738:15	9	"extractContigSamplesBytes"
FIELD	2738:15	2738:15	10	"extractContigSamplesBytes"
LEAF_NODE	2738:15	2738:15	11	"extractContigSamplesBytes"
LEAF_NODE	2738:42	2738:42	9	,
ARGUMENT	2739:15	2739:15	9	"Invalid start column value %d ignored"
FIELD	2739:15	2739:15	10	"Invalid start column value %d ignored"
LEAF_NODE	2739:15	2739:15	11	"Invalid start column value %d ignored"
LEAF_NODE	2739:54	2739:54	9	,
ARGUMENT	2739:56	2739:56	9	start
FIELD	2739:56	2739:56	10	start
LEAF_NODE	2739:56	2739:56	11	start
LEAF_NODE	2739:61	2739:61	9	)
LEAF_NODE	2739:62	2739:62	7	;
EXPR_STATEMENT	2740:4	2740:13	6	start = 0 ;
EXPR	2740:4	2740:4	7	start = 0
ASSIGN	2740:4	2740:12	8	start = 0
LVAL	2740:4	2740:4	9	start
FIELD	2740:4	2740:4	10	start
LEAF_NODE	2740:4	2740:4	11	start
ASSIGN_OP	2740:10	2740:10	9	=
LEAF_NODE	2740:10	2740:10	10	=
RVAL	2740:12	2740:12	9	0
FIELD	2740:12	2740:12	10	0
LEAF_NODE	2740:12	2740:12	11	0
LEAF_NODE	2740:13	2740:13	7	;
LEAF_NODE	2741:4	2741:4	5	}
SELECTION	2742:2	2743:4	3	
KEYWORD	2742:2	2742:2	4	if
LEAF_NODE	2742:2	2742:2	5	if
LEAF_NODE	2742:5	2742:5	4	(
CONDITION	2742:6	2742:6	4	( end == 0 ) || ( end > cols )
EXPR	2742:6	2742:6	5	( end == 0 ) || ( end > cols )
OR	2742:6	2742:20	6	( end == 0 ) || ( end > cols )
EXPR	2742:6	2742:15	7	( end == 0 )
LEAF_NODE	2742:6	2742:6	8	(
FIELD	2742:7	2742:7	8	end
LEAF_NODE	2742:7	2742:7	9	end
EQ_OPERATOR	2742:11	2742:11	8	==
LEAF_NODE	2742:11	2742:11	9	==
FIELD	2742:14	2742:14	8	0
LEAF_NODE	2742:14	2742:14	9	0
LEAF_NODE	2742:15	2742:15	8	)
LEAF_NODE	2742:17	2742:17	7	||
EXPR	2742:20	2742:31	7	( end > cols )
LEAF_NODE	2742:20	2742:20	8	(
FIELD	2742:21	2742:21	8	end
LEAF_NODE	2742:21	2742:21	9	end
REL_OPERATOR	2742:25	2742:25	8	>
LEAF_NODE	2742:25	2742:25	9	>
FIELD	2742:27	2742:27	8	cols
LEAF_NODE	2742:27	2742:27	9	cols
LEAF_NODE	2742:31	2742:31	8	)
LEAF_NODE	2742:32	2742:32	4	)
STATEMENTS	2743:4	2747:4	4	
LEAF_NODE	2743:4	2743:4	5	{
STATEMENTS	2744:4	2746:4	5	
EXPR_STATEMENT	2744:4	2745:58	6	TIFFError ( "extractContigSamplesBytes" , "Invalid end column value %d ignored" , end ) ;
EXPR	2744:4	2744:4	7	TIFFError ( "extractContigSamplesBytes" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	2744:4	2745:57	8	TIFFError ( "extractContigSamplesBytes" , "Invalid end column value %d ignored" , end )
CALLEE	2744:4	2744:4	9	TIFFError
LEAF_NODE	2744:4	2744:4	10	TIFFError
LEAF_NODE	2744:14	2744:14	9	(
ARGUMENT	2744:15	2744:15	9	"extractContigSamplesBytes"
FIELD	2744:15	2744:15	10	"extractContigSamplesBytes"
LEAF_NODE	2744:15	2744:15	11	"extractContigSamplesBytes"
LEAF_NODE	2744:42	2744:42	9	,
ARGUMENT	2745:15	2745:15	9	"Invalid end column value %d ignored"
FIELD	2745:15	2745:15	10	"Invalid end column value %d ignored"
LEAF_NODE	2745:15	2745:15	11	"Invalid end column value %d ignored"
LEAF_NODE	2745:52	2745:52	9	,
ARGUMENT	2745:54	2745:54	9	end
FIELD	2745:54	2745:54	10	end
LEAF_NODE	2745:54	2745:54	11	end
LEAF_NODE	2745:57	2745:57	9	)
LEAF_NODE	2745:58	2745:58	7	;
EXPR_STATEMENT	2746:4	2746:14	6	end = cols ;
EXPR	2746:4	2746:4	7	end = cols
ASSIGN	2746:4	2746:10	8	end = cols
LVAL	2746:4	2746:4	9	end
FIELD	2746:4	2746:4	10	end
LEAF_NODE	2746:4	2746:4	11	end
ASSIGN_OP	2746:8	2746:8	9	=
LEAF_NODE	2746:8	2746:8	10	=
RVAL	2746:10	2746:10	9	cols
FIELD	2746:10	2746:10	10	cols
LEAF_NODE	2746:10	2746:10	11	cols
LEAF_NODE	2746:14	2746:14	7	;
LEAF_NODE	2747:4	2747:4	5	}
LEAF_NODE	2749:2	2749:2	3	dst_rowsize
LEAF_NODE	2749:14	2749:14	3	=
LEAF_NODE	2749:16	2749:16	3	(
LEAF_NODE	2749:17	2749:17	3	bps
LEAF_NODE	2749:21	2749:21	3	*
LEAF_NODE	2749:23	2749:23	3	(
LEAF_NODE	2749:24	2749:24	3	end
LEAF_NODE	2749:28	2749:28	3	-
LEAF_NODE	2749:30	2749:30	3	start
LEAF_NODE	2749:35	2749:35	3	)
LEAF_NODE	2749:37	2749:37	3	*
LEAF_NODE	2749:39	2749:39	3	count
LEAF_NODE	2749:44	2749:44	3	)
LEAF_NODE	2749:46	2749:46	3	/
EXPR_STATEMENT	2749:48	2749:49	3	8 ;
EXPR	2749:48	2749:48	4	8
FIELD	2749:48	2749:48	5	8
LEAF_NODE	2749:48	2749:48	6	8
LEAF_NODE	2749:49	2749:49	4	;
EXPR_STATEMENT	2751:2	2751:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	2751:2	2751:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	2751:2	2751:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	2751:2	2751:2	6	bytes_per_sample
FIELD	2751:2	2751:2	7	bytes_per_sample
LEAF_NODE	2751:2	2751:2	8	bytes_per_sample
ASSIGN_OP	2751:19	2751:19	6	=
LEAF_NODE	2751:19	2751:19	7	=
RVAL	2751:21	2751:33	6	( bps + 7 ) / 8
LEAF_NODE	2751:21	2751:21	7	(
FIELD	2751:22	2751:22	7	bps
LEAF_NODE	2751:22	2751:22	8	bps
LEAF_NODE	2751:26	2751:26	7	+
FIELD	2751:28	2751:28	7	7
LEAF_NODE	2751:28	2751:28	8	7
LEAF_NODE	2751:29	2751:29	7	)
LEAF_NODE	2751:31	2751:31	7	/
FIELD	2751:33	2751:33	7	8
LEAF_NODE	2751:33	2751:33	8	8
LEAF_NODE	2751:34	2751:34	4	;
SELECTION	2753:2	2754:4	3	
KEYWORD	2753:2	2753:2	4	if
LEAF_NODE	2753:2	2753:2	5	if
LEAF_NODE	2753:5	2753:5	4	(
CONDITION	2753:6	2753:6	4	count == spp
EXPR	2753:6	2753:15	5	count == spp
FIELD	2753:6	2753:6	6	count
LEAF_NODE	2753:6	2753:6	7	count
EQ_OPERATOR	2753:12	2753:12	6	==
LEAF_NODE	2753:12	2753:12	7	==
FIELD	2753:15	2753:15	6	spp
LEAF_NODE	2753:15	2753:15	7	spp
LEAF_NODE	2753:18	2753:18	4	)
STATEMENTS	2754:4	2757:4	4	
LEAF_NODE	2754:4	2754:4	5	{
STATEMENTS	2755:4	2756:4	5	
LEAF_NODE	2755:4	2755:4	6	src
LEAF_NODE	2755:8	2755:8	6	=
LEAF_NODE	2755:10	2755:10	6	in
LEAF_NODE	2755:13	2755:13	6	+
LEAF_NODE	2755:15	2755:15	6	(
LEAF_NODE	2755:16	2755:16	6	start
LEAF_NODE	2755:22	2755:22	6	*
LEAF_NODE	2755:24	2755:24	6	spp
LEAF_NODE	2755:28	2755:28	6	*
LEAF_NODE	2755:30	2755:30	6	bytes_per_sample
LEAF_NODE	2755:46	2755:46	6	)
LEAF_NODE	2755:47	2755:47	6	;
EXPR_STATEMENT	2756:4	2756:39	6	_TIFFmemcpy ( dst , src , dst_rowsize ) ;
EXPR	2756:4	2756:4	7	_TIFFmemcpy ( dst , src , dst_rowsize )
FUNCTION_CALL	2756:4	2756:38	8	_TIFFmemcpy ( dst , src , dst_rowsize )
CALLEE	2756:4	2756:4	9	_TIFFmemcpy
LEAF_NODE	2756:4	2756:4	10	_TIFFmemcpy
LEAF_NODE	2756:16	2756:16	9	(
ARGUMENT	2756:17	2756:17	9	dst
FIELD	2756:17	2756:17	10	dst
LEAF_NODE	2756:17	2756:17	11	dst
LEAF_NODE	2756:20	2756:20	9	,
ARGUMENT	2756:22	2756:22	9	src
FIELD	2756:22	2756:22	10	src
LEAF_NODE	2756:22	2756:22	11	src
LEAF_NODE	2756:25	2756:25	9	,
ARGUMENT	2756:27	2756:27	9	dst_rowsize
FIELD	2756:27	2756:27	10	dst_rowsize
LEAF_NODE	2756:27	2756:27	11	dst_rowsize
LEAF_NODE	2756:38	2756:38	9	)
LEAF_NODE	2756:39	2756:39	7	;
LEAF_NODE	2757:4	2757:4	5	}
SELECTION	2758:2	2759:4	3	
KEYWORD	2758:2	2758:2	4	else
LEAF_NODE	2758:2	2758:2	5	else
STATEMENTS	2759:4	2780:4	4	
LEAF_NODE	2759:4	2759:4	5	{
STATEMENTS	2760:4	2760:4	5	
ITERATION	2760:4	2761:6	6	
KEYWORD	2760:4	2760:4	7	for
LEAF_NODE	2760:4	2760:4	8	for
LEAF_NODE	2760:8	2760:8	7	(
FOR_INIT	2760:9	2760:20	7	col = start ;
EXPR	2760:9	2760:9	8	col = start
ASSIGN	2760:9	2760:15	9	col = start
LVAL	2760:9	2760:9	10	col
FIELD	2760:9	2760:9	11	col
LEAF_NODE	2760:9	2760:9	12	col
ASSIGN_OP	2760:13	2760:13	10	=
LEAF_NODE	2760:13	2760:13	11	=
RVAL	2760:15	2760:15	10	start
FIELD	2760:15	2760:15	11	start
LEAF_NODE	2760:15	2760:15	12	start
LEAF_NODE	2760:20	2760:20	8	;
CONDITION	2760:22	2760:22	7	col < end
EXPR	2760:22	2760:28	8	col < end
FIELD	2760:22	2760:22	9	col
LEAF_NODE	2760:22	2760:22	10	col
REL_OPERATOR	2760:26	2760:26	9	<
LEAF_NODE	2760:26	2760:26	10	<
FIELD	2760:28	2760:28	9	end
LEAF_NODE	2760:28	2760:28	10	end
LEAF_NODE	2760:31	2760:31	7	;
FOR_EXPR	2760:33	2760:33	7	col ++
EXPR	2760:33	2760:33	8	col ++
FIELD	2760:33	2760:36	9	col ++
LEAF_NODE	2760:33	2760:33	10	col
LEAF_NODE	2760:36	2760:36	10	++
LEAF_NODE	2760:38	2760:38	7	)
STATEMENTS	2761:6	2779:6	7	
LEAF_NODE	2761:6	2761:6	8	{
STATEMENTS	2762:6	2762:6	8	
ITERATION	2762:6	2763:8	9	
KEYWORD	2762:6	2762:6	10	for
LEAF_NODE	2762:6	2762:6	11	for
LEAF_NODE	2762:10	2762:10	10	(
FOR_INIT	2762:11	2762:26	10	sindex = sample ;
EXPR	2762:11	2762:11	11	sindex = sample
ASSIGN	2762:11	2762:20	12	sindex = sample
LVAL	2762:11	2762:11	13	sindex
FIELD	2762:11	2762:11	14	sindex
LEAF_NODE	2762:11	2762:11	15	sindex
ASSIGN_OP	2762:18	2762:18	13	=
LEAF_NODE	2762:18	2762:18	14	=
RVAL	2762:20	2762:20	13	sample
FIELD	2762:20	2762:20	14	sample
LEAF_NODE	2762:20	2762:20	15	sample
LEAF_NODE	2762:26	2762:26	11	;
CONDITION	2762:28	2762:28	10	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2762:28	2762:28	11	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	2762:28	2762:46	12	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2762:28	2762:41	13	( sindex < spp )
LEAF_NODE	2762:28	2762:28	14	(
FIELD	2762:29	2762:29	14	sindex
LEAF_NODE	2762:29	2762:29	15	sindex
REL_OPERATOR	2762:36	2762:36	14	<
LEAF_NODE	2762:36	2762:36	15	<
FIELD	2762:38	2762:38	14	spp
LEAF_NODE	2762:38	2762:38	15	spp
LEAF_NODE	2762:41	2762:41	14	)
LEAF_NODE	2762:43	2762:43	13	&&
EXPR	2762:46	2762:72	13	( sindex < ( sample + count ) )
LEAF_NODE	2762:46	2762:46	14	(
FIELD	2762:47	2762:47	14	sindex
LEAF_NODE	2762:47	2762:47	15	sindex
REL_OPERATOR	2762:54	2762:54	14	<
LEAF_NODE	2762:54	2762:54	15	<
LEAF_NODE	2762:56	2762:56	14	(
FIELD	2762:57	2762:57	14	sample
LEAF_NODE	2762:57	2762:57	15	sample
LEAF_NODE	2762:64	2762:64	14	+
FIELD	2762:66	2762:66	14	count
LEAF_NODE	2762:66	2762:66	15	count
LEAF_NODE	2762:71	2762:71	14	)
LEAF_NODE	2762:72	2762:72	14	)
LEAF_NODE	2762:73	2762:73	10	;
FOR_EXPR	2762:75	2762:75	10	sindex ++
EXPR	2762:75	2762:75	11	sindex ++
FIELD	2762:75	2762:81	12	sindex ++
LEAF_NODE	2762:75	2762:75	13	sindex
LEAF_NODE	2762:81	2762:81	13	++
LEAF_NODE	2762:83	2762:83	10	)
STATEMENTS	2763:8	2778:8	10	
LEAF_NODE	2763:8	2763:8	11	{
STATEMENTS	2764:8	2776:8	11	
LEAF_NODE	2764:8	2764:8	12	bit_offset
LEAF_NODE	2764:19	2764:19	12	=
LEAF_NODE	2764:21	2764:21	12	col
EXPR_STATEMENT	2764:25	2764:36	12	* bps * spp ;
EXPR	2764:25	2764:33	13	* bps * spp
UNARY_EXPR	2764:25	2764:27	14	* bps
UNARY_OPERATOR	2764:25	2764:25	15	*
LEAF_NODE	2764:25	2764:25	16	*
FIELD	2764:27	2764:27	15	bps
LEAF_NODE	2764:27	2764:27	16	bps
LEAF_NODE	2764:31	2764:31	14	*
FIELD	2764:33	2764:33	14	spp
LEAF_NODE	2764:33	2764:33	15	spp
LEAF_NODE	2764:36	2764:36	13	;
SELECTION	2765:8	2766:10	12	
KEYWORD	2765:8	2765:8	13	if
LEAF_NODE	2765:8	2765:8	14	if
LEAF_NODE	2765:11	2765:11	13	(
CONDITION	2765:12	2765:12	13	sindex == 0
EXPR	2765:12	2765:22	14	sindex == 0
FIELD	2765:12	2765:12	15	sindex
LEAF_NODE	2765:12	2765:12	16	sindex
EQ_OPERATOR	2765:19	2765:19	15	==
LEAF_NODE	2765:19	2765:19	16	==
FIELD	2765:22	2765:22	15	0
LEAF_NODE	2765:22	2765:22	16	0
LEAF_NODE	2765:23	2765:23	13	)
STATEMENTS	2766:10	2769:10	13	
LEAF_NODE	2766:10	2766:10	14	{
STATEMENTS	2767:10	2767:10	14	
EXPR_STATEMENT	2767:10	2767:35	15	src_byte = bit_offset / 8 ;
EXPR	2767:10	2767:10	16	src_byte = bit_offset / 8
ASSIGN	2767:10	2767:21	17	src_byte = bit_offset / 8
LVAL	2767:10	2767:10	18	src_byte
FIELD	2767:10	2767:10	19	src_byte
LEAF_NODE	2767:10	2767:10	20	src_byte
ASSIGN_OP	2767:19	2767:19	18	=
LEAF_NODE	2767:19	2767:19	19	=
RVAL	2767:21	2767:34	18	bit_offset / 8
FIELD	2767:21	2767:21	19	bit_offset
LEAF_NODE	2767:21	2767:21	20	bit_offset
LEAF_NODE	2767:32	2767:32	19	/
FIELD	2767:34	2767:34	19	8
LEAF_NODE	2767:34	2767:34	20	8
LEAF_NODE	2767:35	2767:35	16	;
LEAF_NODE	2769:10	2769:10	14	}
SELECTION	2770:8	2771:10	12	
KEYWORD	2770:8	2770:8	13	else
LEAF_NODE	2770:8	2770:8	14	else
STATEMENTS	2771:10	2774:10	13	
LEAF_NODE	2771:10	2771:10	14	{
STATEMENTS	2772:10	2772:10	14	
EXPR_STATEMENT	2772:10	2772:54	15	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	2772:10	2772:10	16	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	2772:10	2772:21	17	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	2772:10	2772:10	18	src_byte
FIELD	2772:10	2772:10	19	src_byte
LEAF_NODE	2772:10	2772:10	20	src_byte
ASSIGN_OP	2772:19	2772:19	18	=
LEAF_NODE	2772:19	2772:19	19	=
RVAL	2772:21	2772:53	18	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	2772:21	2772:21	19	(
FIELD	2772:22	2772:22	19	bit_offset
LEAF_NODE	2772:22	2772:22	20	bit_offset
LEAF_NODE	2772:33	2772:33	19	+
LEAF_NODE	2772:35	2772:35	19	(
FIELD	2772:36	2772:36	19	sindex
LEAF_NODE	2772:36	2772:36	20	sindex
LEAF_NODE	2772:43	2772:43	19	*
FIELD	2772:45	2772:45	19	bps
LEAF_NODE	2772:45	2772:45	20	bps
LEAF_NODE	2772:48	2772:48	19	)
LEAF_NODE	2772:49	2772:49	19	)
LEAF_NODE	2772:51	2772:51	19	/
FIELD	2772:53	2772:53	19	8
LEAF_NODE	2772:53	2772:53	20	8
LEAF_NODE	2772:54	2772:54	16	;
LEAF_NODE	2774:10	2774:10	14	}
EXPR_STATEMENT	2775:8	2775:27	12	src = in + src_byte ;
EXPR	2775:8	2775:8	13	src = in + src_byte
ASSIGN	2775:8	2775:14	14	src = in + src_byte
LVAL	2775:8	2775:8	15	src
FIELD	2775:8	2775:8	16	src
LEAF_NODE	2775:8	2775:8	17	src
ASSIGN_OP	2775:12	2775:12	15	=
LEAF_NODE	2775:12	2775:12	16	=
RVAL	2775:14	2775:19	15	in + src_byte
FIELD	2775:14	2775:14	16	in
LEAF_NODE	2775:14	2775:14	17	in
LEAF_NODE	2775:17	2775:17	16	+
FIELD	2775:19	2775:19	16	src_byte
LEAF_NODE	2775:19	2775:19	17	src_byte
LEAF_NODE	2775:27	2775:27	13	;
ITERATION	2776:8	2777:12	12	
KEYWORD	2776:8	2776:8	13	for
LEAF_NODE	2776:8	2776:8	14	for
LEAF_NODE	2776:12	2776:12	13	(
FOR_INIT	2776:13	2776:18	13	i = 0 ;
EXPR	2776:13	2776:13	14	i = 0
ASSIGN	2776:13	2776:17	15	i = 0
LVAL	2776:13	2776:13	16	i
FIELD	2776:13	2776:13	17	i
LEAF_NODE	2776:13	2776:13	18	i
ASSIGN_OP	2776:15	2776:15	16	=
LEAF_NODE	2776:15	2776:15	17	=
RVAL	2776:17	2776:17	16	0
FIELD	2776:17	2776:17	17	0
LEAF_NODE	2776:17	2776:17	18	0
LEAF_NODE	2776:18	2776:18	14	;
CONDITION	2776:20	2776:20	13	i < bytes_per_sample
EXPR	2776:20	2776:24	14	i < bytes_per_sample
FIELD	2776:20	2776:20	15	i
LEAF_NODE	2776:20	2776:20	16	i
REL_OPERATOR	2776:22	2776:22	15	<
LEAF_NODE	2776:22	2776:22	16	<
FIELD	2776:24	2776:24	15	bytes_per_sample
LEAF_NODE	2776:24	2776:24	16	bytes_per_sample
LEAF_NODE	2776:40	2776:40	13	;
FOR_EXPR	2776:42	2776:42	13	i ++
EXPR	2776:42	2776:42	14	i ++
FIELD	2776:42	2776:43	15	i ++
LEAF_NODE	2776:42	2776:42	16	i
LEAF_NODE	2776:43	2776:43	16	++
LEAF_NODE	2776:45	2776:45	13	)
STATEMENTS	2777:12	2777:12	13	
EXPR_STATEMENT	2777:12	2777:27	14	* dst ++ = * src ++ ;
EXPR	2777:12	2777:12	15	* dst ++ = * src ++
ASSIGN	2777:12	2777:21	16	* dst ++ = * src ++
LVAL	2777:12	2777:12	17	* dst ++
UNARY_EXPR	2777:12	2777:13	18	* dst ++
UNARY_OPERATOR	2777:12	2777:12	19	*
LEAF_NODE	2777:12	2777:12	20	*
FIELD	2777:13	2777:16	19	dst ++
LEAF_NODE	2777:13	2777:13	20	dst
LEAF_NODE	2777:16	2777:16	20	++
ASSIGN_OP	2777:19	2777:19	17	=
LEAF_NODE	2777:19	2777:19	18	=
RVAL	2777:21	2777:21	17	* src ++
UNARY_EXPR	2777:21	2777:22	18	* src ++
UNARY_OPERATOR	2777:21	2777:21	19	*
LEAF_NODE	2777:21	2777:21	20	*
FIELD	2777:22	2777:25	19	src ++
LEAF_NODE	2777:22	2777:22	20	src
LEAF_NODE	2777:25	2777:25	20	++
LEAF_NODE	2777:27	2777:27	15	;
LEAF_NODE	2778:8	2778:8	11	}
LEAF_NODE	2779:6	2779:6	8	}
LEAF_NODE	2780:4	2780:4	5	}
JUMP_STATEMENT	2782:2	2782:12	3	return ( 0 ) ;
KEYWORD	2782:2	2782:2	4	return
LEAF_NODE	2782:2	2782:2	5	return
DESTINATION	2782:9	2782:9	4	( 0 )
EXPR	2782:9	2782:11	5	( 0 )
LEAF_NODE	2782:9	2782:9	6	(
FIELD	2782:10	2782:10	6	0
LEAF_NODE	2782:10	2782:10	7	0
LEAF_NODE	2782:11	2782:11	6	)
LEAF_NODE	2782:12	2782:12	4	;
LEAF_NODE	2783:2	2783:2	2	}
FUNCTION_DEF	2785:0	2860:2	1	
RETURN_TYPE	2785:0	2785:7	2	static int
LEAF_NODE	2785:0	2785:0	3	static
TYPE_NAME	2785:7	2785:7	3	int
LEAF_NODE	2785:7	2785:7	4	int
FUNCTION_NAME	2786:0	2786:0	2	extractContigSamples8bits
LEAF_NODE	2786:0	2786:0	3	extractContigSamples8bits
PARAMETER_LIST	2786:26	2788:68	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end )
LEAF_NODE	2786:26	2786:26	3	(
PARAMETER_DECL	2786:27	2786:34	3	uint8 * in
TYPE	2786:27	2786:33	4	uint8 *
TYPE_NAME	2786:27	2786:27	5	uint8
LEAF_NODE	2786:27	2786:27	6	uint8
POINTER	2786:33	2786:33	5	*
LEAF_NODE	2786:33	2786:33	6	*
NAME	2786:34	2786:34	4	in
LEAF_NODE	2786:34	2786:34	5	in
LEAF_NODE	2786:36	2786:36	3	,
PARAMETER_DECL	2786:38	2786:45	3	uint8 * out
TYPE	2786:38	2786:44	4	uint8 *
TYPE_NAME	2786:38	2786:38	5	uint8
LEAF_NODE	2786:38	2786:38	6	uint8
POINTER	2786:44	2786:44	5	*
LEAF_NODE	2786:44	2786:44	6	*
NAME	2786:45	2786:45	4	out
LEAF_NODE	2786:45	2786:45	5	out
LEAF_NODE	2786:48	2786:48	3	,
PARAMETER_DECL	2786:50	2786:57	3	uint32 cols
TYPE	2786:50	2786:50	4	uint32
TYPE_NAME	2786:50	2786:50	5	uint32
LEAF_NODE	2786:50	2786:50	6	uint32
NAME	2786:57	2786:57	4	cols
LEAF_NODE	2786:57	2786:57	5	cols
LEAF_NODE	2786:61	2786:61	3	,
PARAMETER_DECL	2787:27	2787:37	3	tsample_t sample
TYPE	2787:27	2787:27	4	tsample_t
TYPE_NAME	2787:27	2787:27	5	tsample_t
LEAF_NODE	2787:27	2787:27	6	tsample_t
NAME	2787:37	2787:37	4	sample
LEAF_NODE	2787:37	2787:37	5	sample
LEAF_NODE	2787:43	2787:43	3	,
PARAMETER_DECL	2787:45	2787:52	3	uint16 spp
TYPE	2787:45	2787:45	4	uint16
TYPE_NAME	2787:45	2787:45	5	uint16
LEAF_NODE	2787:45	2787:45	6	uint16
NAME	2787:52	2787:52	4	spp
LEAF_NODE	2787:52	2787:52	5	spp
LEAF_NODE	2787:55	2787:55	3	,
PARAMETER_DECL	2787:57	2787:64	3	uint16 bps
TYPE	2787:57	2787:57	4	uint16
TYPE_NAME	2787:57	2787:57	5	uint16
LEAF_NODE	2787:57	2787:57	6	uint16
NAME	2787:64	2787:64	4	bps
LEAF_NODE	2787:64	2787:64	5	bps
LEAF_NODE	2787:67	2787:67	3	,
PARAMETER_DECL	2788:27	2788:37	3	tsample_t count
TYPE	2788:27	2788:27	4	tsample_t
TYPE_NAME	2788:27	2788:27	5	tsample_t
LEAF_NODE	2788:27	2788:27	6	tsample_t
NAME	2788:37	2788:37	4	count
LEAF_NODE	2788:37	2788:37	5	count
LEAF_NODE	2788:42	2788:42	3	,
PARAMETER_DECL	2788:44	2788:51	3	uint32 start
TYPE	2788:44	2788:44	4	uint32
TYPE_NAME	2788:44	2788:44	5	uint32
LEAF_NODE	2788:44	2788:44	6	uint32
NAME	2788:51	2788:51	4	start
LEAF_NODE	2788:51	2788:51	5	start
LEAF_NODE	2788:56	2788:56	3	,
PARAMETER_DECL	2788:58	2788:65	3	uint32 end
TYPE	2788:58	2788:58	4	uint32
TYPE_NAME	2788:58	2788:58	5	uint32
LEAF_NODE	2788:58	2788:58	6	uint32
NAME	2788:65	2788:65	4	end
LEAF_NODE	2788:65	2788:65	5	end
LEAF_NODE	2788:68	2788:68	3	)
LEAF_NODE	2789:2	2789:2	2	{
STATEMENTS	2790:2	2859:2	2	
SIMPLE_DECL	2790:2	2790:35	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	2790:2	2790:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	2790:2	2790:9	5	int ready_bits ; ready_bits = 0
TYPE	2790:2	2790:2	6	int
TYPE_NAME	2790:2	2790:2	7	int
LEAF_NODE	2790:2	2790:2	8	int
NAME	2790:9	2790:9	6	ready_bits
LEAF_NODE	2790:9	2790:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	2790:9	2790:9	6	ready_bits = 0
ASSIGN	2790:9	2790:22	7	ready_bits = 0
LVAL	2790:9	2790:9	8	ready_bits
NAME	2790:9	2790:9	9	ready_bits
LEAF_NODE	2790:9	2790:9	10	ready_bits
ASSIGN_OP	2790:20	2790:20	8	=
LEAF_NODE	2790:20	2790:20	9	=
RVAL	2790:22	2790:22	8	0
FIELD	2790:22	2790:22	9	0
LEAF_NODE	2790:22	2790:22	10	0
LEAF_NODE	2790:23	2790:23	5	,
VAR_DECL	2790:2	2790:25	5	int sindex ; sindex = 0
TYPE	2790:2	2790:2	6	int
TYPE_NAME	2790:2	2790:2	7	int
LEAF_NODE	2790:2	2790:2	8	int
NAME	2790:25	2790:25	6	sindex
LEAF_NODE	2790:25	2790:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	2790:25	2790:25	6	sindex = 0
ASSIGN	2790:25	2790:34	7	sindex = 0
LVAL	2790:25	2790:25	8	sindex
NAME	2790:25	2790:25	9	sindex
LEAF_NODE	2790:25	2790:25	10	sindex
ASSIGN_OP	2790:32	2790:32	8	=
LEAF_NODE	2790:32	2790:32	9	=
RVAL	2790:34	2790:34	8	0
FIELD	2790:34	2790:34	9	0
LEAF_NODE	2790:34	2790:34	10	0
LEAF_NODE	2790:35	2790:35	4	;
SIMPLE_DECL	2791:2	2791:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	2791:2	2791:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	2791:2	2791:9	5	uint32 col
TYPE	2791:2	2791:2	6	uint32
TYPE_NAME	2791:2	2791:2	7	uint32
LEAF_NODE	2791:2	2791:2	8	uint32
NAME	2791:9	2791:9	6	col
LEAF_NODE	2791:9	2791:9	7	col
LEAF_NODE	2791:12	2791:12	5	,
INIT_DECL_LIST	2791:2	2791:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	2791:2	2791:14	6	uint32 src_byte
TYPE	2791:2	2791:2	7	uint32
TYPE_NAME	2791:2	2791:2	8	uint32
LEAF_NODE	2791:2	2791:2	9	uint32
NAME	2791:14	2791:14	7	src_byte
LEAF_NODE	2791:14	2791:14	8	src_byte
LEAF_NODE	2791:22	2791:22	6	,
INIT_DECL_LIST	2791:2	2791:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	2791:2	2791:24	7	uint32 src_bit
TYPE	2791:2	2791:2	8	uint32
TYPE_NAME	2791:2	2791:2	9	uint32
LEAF_NODE	2791:2	2791:2	10	uint32
NAME	2791:24	2791:24	8	src_bit
LEAF_NODE	2791:24	2791:24	9	src_bit
LEAF_NODE	2791:31	2791:31	7	,
VAR_DECL	2791:2	2791:33	7	uint32 bit_offset
TYPE	2791:2	2791:2	8	uint32
TYPE_NAME	2791:2	2791:2	9	uint32
LEAF_NODE	2791:2	2791:2	10	uint32
NAME	2791:33	2791:33	8	bit_offset
LEAF_NODE	2791:33	2791:33	9	bit_offset
LEAF_NODE	2791:43	2791:43	4	;
SIMPLE_DECL	2792:2	2792:36	3	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	2792:2	2792:2	4	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0
VAR_DECL	2792:2	2792:9	5	uint8 maskbits ; maskbits = 0
TYPE	2792:2	2792:2	6	uint8
TYPE_NAME	2792:2	2792:2	7	uint8
LEAF_NODE	2792:2	2792:2	8	uint8
NAME	2792:9	2792:9	6	maskbits
LEAF_NODE	2792:9	2792:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	2792:9	2792:9	6	maskbits = 0
ASSIGN	2792:9	2792:20	7	maskbits = 0
LVAL	2792:9	2792:9	8	maskbits
NAME	2792:9	2792:9	9	maskbits
LEAF_NODE	2792:9	2792:9	10	maskbits
ASSIGN_OP	2792:18	2792:18	8	=
LEAF_NODE	2792:18	2792:18	9	=
RVAL	2792:20	2792:20	8	0
FIELD	2792:20	2792:20	9	0
LEAF_NODE	2792:20	2792:20	10	0
LEAF_NODE	2792:21	2792:21	5	,
VAR_DECL	2792:2	2792:23	5	uint8 matchbits ; matchbits = 0
TYPE	2792:2	2792:2	6	uint8
TYPE_NAME	2792:2	2792:2	7	uint8
LEAF_NODE	2792:2	2792:2	8	uint8
NAME	2792:23	2792:23	6	matchbits
LEAF_NODE	2792:23	2792:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	2792:23	2792:23	6	matchbits = 0
ASSIGN	2792:23	2792:35	7	matchbits = 0
LVAL	2792:23	2792:23	8	matchbits
NAME	2792:23	2792:23	9	matchbits
LEAF_NODE	2792:23	2792:23	10	matchbits
ASSIGN_OP	2792:33	2792:33	8	=
LEAF_NODE	2792:33	2792:33	9	=
RVAL	2792:35	2792:35	8	0
FIELD	2792:35	2792:35	9	0
LEAF_NODE	2792:35	2792:35	10	0
LEAF_NODE	2792:36	2792:36	4	;
SIMPLE_DECL	2793:2	2793:29	3	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	2793:2	2793:2	4	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0
VAR_DECL	2793:2	2793:9	5	uint8 buff1 ; buff1 = 0
TYPE	2793:2	2793:2	6	uint8
TYPE_NAME	2793:2	2793:2	7	uint8
LEAF_NODE	2793:2	2793:2	8	uint8
NAME	2793:9	2793:9	6	buff1
LEAF_NODE	2793:9	2793:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	2793:9	2793:9	6	buff1 = 0
ASSIGN	2793:9	2793:17	7	buff1 = 0
LVAL	2793:9	2793:9	8	buff1
NAME	2793:9	2793:9	9	buff1
LEAF_NODE	2793:9	2793:9	10	buff1
ASSIGN_OP	2793:15	2793:15	8	=
LEAF_NODE	2793:15	2793:15	9	=
RVAL	2793:17	2793:17	8	0
FIELD	2793:17	2793:17	9	0
LEAF_NODE	2793:17	2793:17	10	0
LEAF_NODE	2793:18	2793:18	5	,
VAR_DECL	2793:2	2793:20	5	uint8 buff2 ; buff2 = 0
TYPE	2793:2	2793:2	6	uint8
TYPE_NAME	2793:2	2793:2	7	uint8
LEAF_NODE	2793:2	2793:2	8	uint8
NAME	2793:20	2793:20	6	buff2
LEAF_NODE	2793:20	2793:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	2793:20	2793:20	6	buff2 = 0
ASSIGN	2793:20	2793:28	7	buff2 = 0
LVAL	2793:20	2793:20	8	buff2
NAME	2793:20	2793:20	9	buff2
LEAF_NODE	2793:20	2793:20	10	buff2
ASSIGN_OP	2793:26	2793:26	8	=
LEAF_NODE	2793:26	2793:26	9	=
RVAL	2793:28	2793:28	8	0
FIELD	2793:28	2793:28	9	0
LEAF_NODE	2793:28	2793:28	10	0
LEAF_NODE	2793:29	2793:29	4	;
SIMPLE_DECL	2794:2	2794:17	3	uint8 * src ; src = in ;
VAR_DECL	2794:2	2794:9	4	uint8 * src ; src = in
TYPE	2794:2	2794:8	5	uint8 *
TYPE_NAME	2794:2	2794:2	6	uint8
LEAF_NODE	2794:2	2794:2	7	uint8
POINTER	2794:8	2794:8	6	*
LEAF_NODE	2794:8	2794:8	7	*
NAME	2794:9	2794:9	5	src
LEAF_NODE	2794:9	2794:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	2794:9	2794:9	5	src = in
ASSIGN	2794:9	2794:15	6	src = in
LVAL	2794:9	2794:9	7	src
NAME	2794:9	2794:9	8	src
LEAF_NODE	2794:9	2794:9	9	src
ASSIGN_OP	2794:13	2794:13	7	=
LEAF_NODE	2794:13	2794:13	8	=
RVAL	2794:15	2794:15	7	in
FIELD	2794:15	2794:15	8	in
LEAF_NODE	2794:15	2794:15	9	in
LEAF_NODE	2794:17	2794:17	4	;
SIMPLE_DECL	2795:2	2795:18	3	uint8 * dst ; dst = out ;
VAR_DECL	2795:2	2795:9	4	uint8 * dst ; dst = out
TYPE	2795:2	2795:8	5	uint8 *
TYPE_NAME	2795:2	2795:2	6	uint8
LEAF_NODE	2795:2	2795:2	7	uint8
POINTER	2795:8	2795:8	6	*
LEAF_NODE	2795:8	2795:8	7	*
NAME	2795:9	2795:9	5	dst
LEAF_NODE	2795:9	2795:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	2795:9	2795:9	5	dst = out
ASSIGN	2795:9	2795:15	6	dst = out
LVAL	2795:9	2795:9	7	dst
NAME	2795:9	2795:9	8	dst
LEAF_NODE	2795:9	2795:9	9	dst
ASSIGN_OP	2795:13	2795:13	7	=
LEAF_NODE	2795:13	2795:13	8	=
RVAL	2795:15	2795:15	7	out
FIELD	2795:15	2795:15	8	out
LEAF_NODE	2795:15	2795:15	9	out
LEAF_NODE	2795:18	2795:18	4	;
SELECTION	2797:2	2798:4	3	
KEYWORD	2797:2	2797:2	4	if
LEAF_NODE	2797:2	2797:2	5	if
LEAF_NODE	2797:5	2797:5	4	(
CONDITION	2797:6	2797:6	4	( src == NULL ) || ( dst == NULL )
EXPR	2797:6	2797:6	5	( src == NULL ) || ( dst == NULL )
OR	2797:6	2797:23	6	( src == NULL ) || ( dst == NULL )
EXPR	2797:6	2797:18	7	( src == NULL )
LEAF_NODE	2797:6	2797:6	8	(
FIELD	2797:7	2797:7	8	src
LEAF_NODE	2797:7	2797:7	9	src
EQ_OPERATOR	2797:11	2797:11	8	==
LEAF_NODE	2797:11	2797:11	9	==
FIELD	2797:14	2797:14	8	NULL
LEAF_NODE	2797:14	2797:14	9	NULL
LEAF_NODE	2797:18	2797:18	8	)
LEAF_NODE	2797:20	2797:20	7	||
EXPR	2797:23	2797:35	7	( dst == NULL )
LEAF_NODE	2797:23	2797:23	8	(
FIELD	2797:24	2797:24	8	dst
LEAF_NODE	2797:24	2797:24	9	dst
EQ_OPERATOR	2797:28	2797:28	8	==
LEAF_NODE	2797:28	2797:28	9	==
FIELD	2797:31	2797:31	8	NULL
LEAF_NODE	2797:31	2797:31	9	NULL
LEAF_NODE	2797:35	2797:35	8	)
LEAF_NODE	2797:36	2797:36	4	)
STATEMENTS	2798:4	2801:4	4	
LEAF_NODE	2798:4	2798:4	5	{
STATEMENTS	2799:4	2800:4	5	
EXPR_STATEMENT	2799:4	2799:75	6	TIFFError ( "extractContigSamples8bits" , "Invalid input or output buffer" ) ;
EXPR	2799:4	2799:4	7	TIFFError ( "extractContigSamples8bits" , "Invalid input or output buffer" )
FUNCTION_CALL	2799:4	2799:74	8	TIFFError ( "extractContigSamples8bits" , "Invalid input or output buffer" )
CALLEE	2799:4	2799:4	9	TIFFError
LEAF_NODE	2799:4	2799:4	10	TIFFError
LEAF_NODE	2799:13	2799:13	9	(
ARGUMENT	2799:14	2799:14	9	"extractContigSamples8bits"
FIELD	2799:14	2799:14	10	"extractContigSamples8bits"
LEAF_NODE	2799:14	2799:14	11	"extractContigSamples8bits"
LEAF_NODE	2799:41	2799:41	9	,
ARGUMENT	2799:42	2799:42	9	"Invalid input or output buffer"
FIELD	2799:42	2799:42	10	"Invalid input or output buffer"
LEAF_NODE	2799:42	2799:42	11	"Invalid input or output buffer"
LEAF_NODE	2799:74	2799:74	9	)
LEAF_NODE	2799:75	2799:75	7	;
JUMP_STATEMENT	2800:4	2800:14	6	return ( 1 ) ;
KEYWORD	2800:4	2800:4	7	return
LEAF_NODE	2800:4	2800:4	8	return
DESTINATION	2800:11	2800:11	7	( 1 )
EXPR	2800:11	2800:13	8	( 1 )
LEAF_NODE	2800:11	2800:11	9	(
FIELD	2800:12	2800:12	9	1
LEAF_NODE	2800:12	2800:12	10	1
LEAF_NODE	2800:13	2800:13	9	)
LEAF_NODE	2800:14	2800:14	7	;
LEAF_NODE	2801:4	2801:4	5	}
SELECTION	2803:2	2804:4	3	
KEYWORD	2803:2	2803:2	4	if
LEAF_NODE	2803:2	2803:2	5	if
LEAF_NODE	2803:5	2803:5	4	(
CONDITION	2803:6	2803:6	4	( start > end ) || ( start > cols )
EXPR	2803:6	2803:6	5	( start > end ) || ( start > cols )
OR	2803:6	2803:23	6	( start > end ) || ( start > cols )
EXPR	2803:6	2803:18	7	( start > end )
LEAF_NODE	2803:6	2803:6	8	(
FIELD	2803:7	2803:7	8	start
LEAF_NODE	2803:7	2803:7	9	start
REL_OPERATOR	2803:13	2803:13	8	>
LEAF_NODE	2803:13	2803:13	9	>
FIELD	2803:15	2803:15	8	end
LEAF_NODE	2803:15	2803:15	9	end
LEAF_NODE	2803:18	2803:18	8	)
LEAF_NODE	2803:20	2803:20	7	||
EXPR	2803:23	2803:36	7	( start > cols )
LEAF_NODE	2803:23	2803:23	8	(
FIELD	2803:24	2803:24	8	start
LEAF_NODE	2803:24	2803:24	9	start
REL_OPERATOR	2803:30	2803:30	8	>
LEAF_NODE	2803:30	2803:30	9	>
FIELD	2803:32	2803:32	8	cols
LEAF_NODE	2803:32	2803:32	9	cols
LEAF_NODE	2803:36	2803:36	8	)
LEAF_NODE	2803:37	2803:37	4	)
STATEMENTS	2804:4	2808:4	4	
LEAF_NODE	2804:4	2804:4	5	{
STATEMENTS	2805:4	2807:4	5	
EXPR_STATEMENT	2805:4	2806:62	6	TIFFError ( "extractContigSamples8bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	2805:4	2805:4	7	TIFFError ( "extractContigSamples8bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	2805:4	2806:61	8	TIFFError ( "extractContigSamples8bits" , "Invalid start column value %d ignored" , start )
CALLEE	2805:4	2805:4	9	TIFFError
LEAF_NODE	2805:4	2805:4	10	TIFFError
LEAF_NODE	2805:14	2805:14	9	(
ARGUMENT	2805:15	2805:15	9	"extractContigSamples8bits"
FIELD	2805:15	2805:15	10	"extractContigSamples8bits"
LEAF_NODE	2805:15	2805:15	11	"extractContigSamples8bits"
LEAF_NODE	2805:42	2805:42	9	,
ARGUMENT	2806:15	2806:15	9	"Invalid start column value %d ignored"
FIELD	2806:15	2806:15	10	"Invalid start column value %d ignored"
LEAF_NODE	2806:15	2806:15	11	"Invalid start column value %d ignored"
LEAF_NODE	2806:54	2806:54	9	,
ARGUMENT	2806:56	2806:56	9	start
FIELD	2806:56	2806:56	10	start
LEAF_NODE	2806:56	2806:56	11	start
LEAF_NODE	2806:61	2806:61	9	)
LEAF_NODE	2806:62	2806:62	7	;
EXPR_STATEMENT	2807:4	2807:13	6	start = 0 ;
EXPR	2807:4	2807:4	7	start = 0
ASSIGN	2807:4	2807:12	8	start = 0
LVAL	2807:4	2807:4	9	start
FIELD	2807:4	2807:4	10	start
LEAF_NODE	2807:4	2807:4	11	start
ASSIGN_OP	2807:10	2807:10	9	=
LEAF_NODE	2807:10	2807:10	10	=
RVAL	2807:12	2807:12	9	0
FIELD	2807:12	2807:12	10	0
LEAF_NODE	2807:12	2807:12	11	0
LEAF_NODE	2807:13	2807:13	7	;
LEAF_NODE	2808:4	2808:4	5	}
SELECTION	2809:2	2810:4	3	
KEYWORD	2809:2	2809:2	4	if
LEAF_NODE	2809:2	2809:2	5	if
LEAF_NODE	2809:5	2809:5	4	(
CONDITION	2809:6	2809:6	4	( end == 0 ) || ( end > cols )
EXPR	2809:6	2809:6	5	( end == 0 ) || ( end > cols )
OR	2809:6	2809:20	6	( end == 0 ) || ( end > cols )
EXPR	2809:6	2809:15	7	( end == 0 )
LEAF_NODE	2809:6	2809:6	8	(
FIELD	2809:7	2809:7	8	end
LEAF_NODE	2809:7	2809:7	9	end
EQ_OPERATOR	2809:11	2809:11	8	==
LEAF_NODE	2809:11	2809:11	9	==
FIELD	2809:14	2809:14	8	0
LEAF_NODE	2809:14	2809:14	9	0
LEAF_NODE	2809:15	2809:15	8	)
LEAF_NODE	2809:17	2809:17	7	||
EXPR	2809:20	2809:31	7	( end > cols )
LEAF_NODE	2809:20	2809:20	8	(
FIELD	2809:21	2809:21	8	end
LEAF_NODE	2809:21	2809:21	9	end
REL_OPERATOR	2809:25	2809:25	8	>
LEAF_NODE	2809:25	2809:25	9	>
FIELD	2809:27	2809:27	8	cols
LEAF_NODE	2809:27	2809:27	9	cols
LEAF_NODE	2809:31	2809:31	8	)
LEAF_NODE	2809:32	2809:32	4	)
STATEMENTS	2810:4	2814:4	4	
LEAF_NODE	2810:4	2810:4	5	{
STATEMENTS	2811:4	2813:4	5	
EXPR_STATEMENT	2811:4	2812:58	6	TIFFError ( "extractContigSamples8bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	2811:4	2811:4	7	TIFFError ( "extractContigSamples8bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	2811:4	2812:57	8	TIFFError ( "extractContigSamples8bits" , "Invalid end column value %d ignored" , end )
CALLEE	2811:4	2811:4	9	TIFFError
LEAF_NODE	2811:4	2811:4	10	TIFFError
LEAF_NODE	2811:14	2811:14	9	(
ARGUMENT	2811:15	2811:15	9	"extractContigSamples8bits"
FIELD	2811:15	2811:15	10	"extractContigSamples8bits"
LEAF_NODE	2811:15	2811:15	11	"extractContigSamples8bits"
LEAF_NODE	2811:42	2811:42	9	,
ARGUMENT	2812:15	2812:15	9	"Invalid end column value %d ignored"
FIELD	2812:15	2812:15	10	"Invalid end column value %d ignored"
LEAF_NODE	2812:15	2812:15	11	"Invalid end column value %d ignored"
LEAF_NODE	2812:52	2812:52	9	,
ARGUMENT	2812:54	2812:54	9	end
FIELD	2812:54	2812:54	10	end
LEAF_NODE	2812:54	2812:54	11	end
LEAF_NODE	2812:57	2812:57	9	)
LEAF_NODE	2812:58	2812:58	7	;
EXPR_STATEMENT	2813:4	2813:14	6	end = cols ;
EXPR	2813:4	2813:4	7	end = cols
ASSIGN	2813:4	2813:10	8	end = cols
LVAL	2813:4	2813:4	9	end
FIELD	2813:4	2813:4	10	end
LEAF_NODE	2813:4	2813:4	11	end
ASSIGN_OP	2813:8	2813:8	9	=
LEAF_NODE	2813:8	2813:8	10	=
RVAL	2813:10	2813:10	9	cols
FIELD	2813:10	2813:10	10	cols
LEAF_NODE	2813:10	2813:10	11	cols
LEAF_NODE	2813:14	2813:14	7	;
LEAF_NODE	2814:4	2814:4	5	}
EXPR_STATEMENT	2816:2	2816:16	3	ready_bits = 0 ;
EXPR	2816:2	2816:2	4	ready_bits = 0
ASSIGN	2816:2	2816:15	5	ready_bits = 0
LVAL	2816:2	2816:2	6	ready_bits
FIELD	2816:2	2816:2	7	ready_bits
LEAF_NODE	2816:2	2816:2	8	ready_bits
ASSIGN_OP	2816:13	2816:13	6	=
LEAF_NODE	2816:13	2816:13	7	=
RVAL	2816:15	2816:15	6	0
FIELD	2816:15	2816:15	7	0
LEAF_NODE	2816:15	2816:15	8	0
LEAF_NODE	2816:16	2816:16	4	;
EXPR_STATEMENT	2817:2	2817:37	3	maskbits = ( uint8 ) - 1 >> ( 8 - bps ) ;
EXPR	2817:2	2817:2	4	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
ASSIGN	2817:2	2817:14	5	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
LVAL	2817:2	2817:2	6	maskbits
FIELD	2817:2	2817:2	7	maskbits
LEAF_NODE	2817:2	2817:2	8	maskbits
ASSIGN_OP	2817:11	2817:11	6	=
LEAF_NODE	2817:11	2817:11	7	=
RVAL	2817:14	2817:36	6	( uint8 ) - 1 >> ( 8 - bps )
LEAF_NODE	2817:14	2817:14	7	(
TYPE_NAME	2817:15	2817:15	7	uint8
LEAF_NODE	2817:15	2817:15	8	uint8
LEAF_NODE	2817:20	2817:20	7	)
UNARY_EXPR	2817:21	2817:22	7	- 1
UNARY_OPERATOR	2817:21	2817:21	8	-
LEAF_NODE	2817:21	2817:21	9	-
FIELD	2817:22	2817:22	8	1
LEAF_NODE	2817:22	2817:22	9	1
LEAF_NODE	2817:24	2817:24	7	>>
LEAF_NODE	2817:27	2817:27	7	(
FIELD	2817:29	2817:29	7	8
LEAF_NODE	2817:29	2817:29	8	8
LEAF_NODE	2817:31	2817:31	7	-
FIELD	2817:33	2817:33	7	bps
LEAF_NODE	2817:33	2817:33	8	bps
LEAF_NODE	2817:36	2817:36	7	)
LEAF_NODE	2817:37	2817:37	4	;
EXPR_STATEMENT	2818:2	2818:19	3	buff1 = buff2 = 0 ;
EXPR	2818:2	2818:2	4	buff1 = buff2 = 0
ASSIGN	2818:2	2818:10	5	buff1 = buff2 = 0
LVAL	2818:2	2818:2	6	buff1
FIELD	2818:2	2818:2	7	buff1
LEAF_NODE	2818:2	2818:2	8	buff1
ASSIGN_OP	2818:8	2818:8	6	=
LEAF_NODE	2818:8	2818:8	7	=
RVAL	2818:10	2818:10	6	buff2 = 0
ASSIGN	2818:10	2818:18	7	buff2 = 0
LVAL	2818:10	2818:10	8	buff2
FIELD	2818:10	2818:10	9	buff2
LEAF_NODE	2818:10	2818:10	10	buff2
ASSIGN_OP	2818:16	2818:16	8	=
LEAF_NODE	2818:16	2818:16	9	=
RVAL	2818:18	2818:18	8	0
FIELD	2818:18	2818:18	9	0
LEAF_NODE	2818:18	2818:18	10	0
LEAF_NODE	2818:19	2818:19	4	;
ITERATION	2819:2	2820:4	3	
KEYWORD	2819:2	2819:2	4	for
LEAF_NODE	2819:2	2819:2	5	for
LEAF_NODE	2819:6	2819:6	4	(
FOR_INIT	2819:7	2819:18	4	col = start ;
EXPR	2819:7	2819:7	5	col = start
ASSIGN	2819:7	2819:13	6	col = start
LVAL	2819:7	2819:7	7	col
FIELD	2819:7	2819:7	8	col
LEAF_NODE	2819:7	2819:7	9	col
ASSIGN_OP	2819:11	2819:11	7	=
LEAF_NODE	2819:11	2819:11	8	=
RVAL	2819:13	2819:13	7	start
FIELD	2819:13	2819:13	8	start
LEAF_NODE	2819:13	2819:13	9	start
LEAF_NODE	2819:18	2819:18	5	;
CONDITION	2819:20	2819:20	4	col < end
EXPR	2819:20	2819:26	5	col < end
FIELD	2819:20	2819:20	6	col
LEAF_NODE	2819:20	2819:20	7	col
REL_OPERATOR	2819:24	2819:24	6	<
LEAF_NODE	2819:24	2819:24	7	<
FIELD	2819:26	2819:26	6	end
LEAF_NODE	2819:26	2819:26	7	end
LEAF_NODE	2819:29	2819:29	4	;
FOR_EXPR	2819:31	2819:31	4	col ++
EXPR	2819:31	2819:31	5	col ++
FIELD	2819:31	2819:34	6	col ++
LEAF_NODE	2819:31	2819:31	7	col
LEAF_NODE	2819:34	2819:34	7	++
LEAF_NODE	2819:36	2819:36	4	)
STATEMENTS	2820:4	2850:4	4	
LEAF_NODE	2820:4	2820:4	5	{
STATEMENTS	2821:4	2822:4	5	
LEAF_NODE	2821:4	2821:4	6	bit_offset
LEAF_NODE	2821:15	2821:15	6	=
LEAF_NODE	2821:17	2821:17	6	col
EXPR_STATEMENT	2821:21	2821:32	6	* bps * spp ;
EXPR	2821:21	2821:29	7	* bps * spp
UNARY_EXPR	2821:21	2821:23	8	* bps
UNARY_OPERATOR	2821:21	2821:21	9	*
LEAF_NODE	2821:21	2821:21	10	*
FIELD	2821:23	2821:23	9	bps
LEAF_NODE	2821:23	2821:23	10	bps
LEAF_NODE	2821:27	2821:27	8	*
FIELD	2821:29	2821:29	8	spp
LEAF_NODE	2821:29	2821:29	9	spp
LEAF_NODE	2821:32	2821:32	7	;
ITERATION	2822:4	2823:6	6	
KEYWORD	2822:4	2822:4	7	for
LEAF_NODE	2822:4	2822:4	8	for
LEAF_NODE	2822:8	2822:8	7	(
FOR_INIT	2822:9	2822:24	7	sindex = sample ;
EXPR	2822:9	2822:9	8	sindex = sample
ASSIGN	2822:9	2822:18	9	sindex = sample
LVAL	2822:9	2822:9	10	sindex
FIELD	2822:9	2822:9	11	sindex
LEAF_NODE	2822:9	2822:9	12	sindex
ASSIGN_OP	2822:16	2822:16	10	=
LEAF_NODE	2822:16	2822:16	11	=
RVAL	2822:18	2822:18	10	sample
FIELD	2822:18	2822:18	11	sample
LEAF_NODE	2822:18	2822:18	12	sample
LEAF_NODE	2822:24	2822:24	8	;
CONDITION	2822:26	2822:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2822:26	2822:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	2822:26	2822:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2822:26	2822:39	10	( sindex < spp )
LEAF_NODE	2822:26	2822:26	11	(
FIELD	2822:27	2822:27	11	sindex
LEAF_NODE	2822:27	2822:27	12	sindex
REL_OPERATOR	2822:34	2822:34	11	<
LEAF_NODE	2822:34	2822:34	12	<
FIELD	2822:36	2822:36	11	spp
LEAF_NODE	2822:36	2822:36	12	spp
LEAF_NODE	2822:39	2822:39	11	)
LEAF_NODE	2822:41	2822:41	10	&&
EXPR	2822:44	2822:70	10	( sindex < ( sample + count ) )
LEAF_NODE	2822:44	2822:44	11	(
FIELD	2822:45	2822:45	11	sindex
LEAF_NODE	2822:45	2822:45	12	sindex
REL_OPERATOR	2822:52	2822:52	11	<
LEAF_NODE	2822:52	2822:52	12	<
LEAF_NODE	2822:54	2822:54	11	(
FIELD	2822:55	2822:55	11	sample
LEAF_NODE	2822:55	2822:55	12	sample
LEAF_NODE	2822:62	2822:62	11	+
FIELD	2822:64	2822:64	11	count
LEAF_NODE	2822:64	2822:64	12	count
LEAF_NODE	2822:69	2822:69	11	)
LEAF_NODE	2822:70	2822:70	11	)
LEAF_NODE	2822:71	2822:71	7	;
FOR_EXPR	2822:73	2822:73	7	sindex ++
EXPR	2822:73	2822:73	8	sindex ++
FIELD	2822:73	2822:79	9	sindex ++
LEAF_NODE	2822:73	2822:73	10	sindex
LEAF_NODE	2822:79	2822:79	10	++
LEAF_NODE	2822:81	2822:81	7	)
STATEMENTS	2823:6	2849:6	7	
LEAF_NODE	2823:6	2823:6	8	{
STATEMENTS	2824:6	2848:6	8	
SELECTION	2824:6	2825:8	9	
KEYWORD	2824:6	2824:6	10	if
LEAF_NODE	2824:6	2824:6	11	if
LEAF_NODE	2824:9	2824:9	10	(
CONDITION	2824:10	2824:10	10	sindex == 0
EXPR	2824:10	2824:20	11	sindex == 0
FIELD	2824:10	2824:10	12	sindex
LEAF_NODE	2824:10	2824:10	13	sindex
EQ_OPERATOR	2824:17	2824:17	12	==
LEAF_NODE	2824:17	2824:17	13	==
FIELD	2824:20	2824:20	12	0
LEAF_NODE	2824:20	2824:20	13	0
LEAF_NODE	2824:21	2824:21	10	)
STATEMENTS	2825:8	2828:8	10	
LEAF_NODE	2825:8	2825:8	11	{
STATEMENTS	2826:8	2827:8	11	
EXPR_STATEMENT	2826:8	2826:33	12	src_byte = bit_offset / 8 ;
EXPR	2826:8	2826:8	13	src_byte = bit_offset / 8
ASSIGN	2826:8	2826:19	14	src_byte = bit_offset / 8
LVAL	2826:8	2826:8	15	src_byte
FIELD	2826:8	2826:8	16	src_byte
LEAF_NODE	2826:8	2826:8	17	src_byte
ASSIGN_OP	2826:17	2826:17	15	=
LEAF_NODE	2826:17	2826:17	16	=
RVAL	2826:19	2826:32	15	bit_offset / 8
FIELD	2826:19	2826:19	16	bit_offset
LEAF_NODE	2826:19	2826:19	17	bit_offset
LEAF_NODE	2826:30	2826:30	16	/
FIELD	2826:32	2826:32	16	8
LEAF_NODE	2826:32	2826:32	17	8
LEAF_NODE	2826:33	2826:33	13	;
EXPR_STATEMENT	2827:8	2827:33	12	src_bit = bit_offset % 8 ;
EXPR	2827:8	2827:8	13	src_bit = bit_offset % 8
ASSIGN	2827:8	2827:19	14	src_bit = bit_offset % 8
LVAL	2827:8	2827:8	15	src_bit
FIELD	2827:8	2827:8	16	src_bit
LEAF_NODE	2827:8	2827:8	17	src_bit
ASSIGN_OP	2827:17	2827:17	15	=
LEAF_NODE	2827:17	2827:17	16	=
RVAL	2827:19	2827:32	15	bit_offset % 8
FIELD	2827:19	2827:19	16	bit_offset
LEAF_NODE	2827:19	2827:19	17	bit_offset
LEAF_NODE	2827:30	2827:30	16	%
FIELD	2827:32	2827:32	16	8
LEAF_NODE	2827:32	2827:32	17	8
LEAF_NODE	2827:33	2827:33	13	;
LEAF_NODE	2828:8	2828:8	11	}
SELECTION	2829:6	2830:8	9	
KEYWORD	2829:6	2829:6	10	else
LEAF_NODE	2829:6	2829:6	11	else
STATEMENTS	2830:8	2833:8	10	
LEAF_NODE	2830:8	2830:8	11	{
STATEMENTS	2831:8	2832:8	11	
EXPR_STATEMENT	2831:8	2831:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	2831:8	2831:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	2831:8	2831:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	2831:8	2831:8	15	src_byte
FIELD	2831:8	2831:8	16	src_byte
LEAF_NODE	2831:8	2831:8	17	src_byte
ASSIGN_OP	2831:17	2831:17	15	=
LEAF_NODE	2831:17	2831:17	16	=
RVAL	2831:19	2831:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	2831:19	2831:19	16	(
FIELD	2831:20	2831:20	16	bit_offset
LEAF_NODE	2831:20	2831:20	17	bit_offset
LEAF_NODE	2831:31	2831:31	16	+
LEAF_NODE	2831:33	2831:33	16	(
FIELD	2831:34	2831:34	16	sindex
LEAF_NODE	2831:34	2831:34	17	sindex
LEAF_NODE	2831:41	2831:41	16	*
FIELD	2831:43	2831:43	16	bps
LEAF_NODE	2831:43	2831:43	17	bps
LEAF_NODE	2831:46	2831:46	16	)
LEAF_NODE	2831:47	2831:47	16	)
LEAF_NODE	2831:49	2831:49	16	/
FIELD	2831:51	2831:51	16	8
LEAF_NODE	2831:51	2831:51	17	8
LEAF_NODE	2831:52	2831:52	13	;
EXPR_STATEMENT	2832:8	2832:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	2832:8	2832:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	2832:8	2832:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	2832:8	2832:8	15	src_bit
FIELD	2832:8	2832:8	16	src_bit
LEAF_NODE	2832:8	2832:8	17	src_bit
ASSIGN_OP	2832:17	2832:17	15	=
LEAF_NODE	2832:17	2832:17	16	=
RVAL	2832:19	2832:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	2832:19	2832:19	16	(
FIELD	2832:20	2832:20	16	bit_offset
LEAF_NODE	2832:20	2832:20	17	bit_offset
LEAF_NODE	2832:31	2832:31	16	+
LEAF_NODE	2832:33	2832:33	16	(
FIELD	2832:34	2832:34	16	sindex
LEAF_NODE	2832:34	2832:34	17	sindex
LEAF_NODE	2832:41	2832:41	16	*
FIELD	2832:43	2832:43	16	bps
LEAF_NODE	2832:43	2832:43	17	bps
LEAF_NODE	2832:46	2832:46	16	)
LEAF_NODE	2832:47	2832:47	16	)
LEAF_NODE	2832:49	2832:49	16	%
FIELD	2832:51	2832:51	16	8
LEAF_NODE	2832:51	2832:51	17	8
LEAF_NODE	2832:52	2832:52	13	;
LEAF_NODE	2833:8	2833:8	11	}
EXPR_STATEMENT	2835:6	2835:25	9	src = in + src_byte ;
EXPR	2835:6	2835:6	10	src = in + src_byte
ASSIGN	2835:6	2835:12	11	src = in + src_byte
LVAL	2835:6	2835:6	12	src
FIELD	2835:6	2835:6	13	src
LEAF_NODE	2835:6	2835:6	14	src
ASSIGN_OP	2835:10	2835:10	12	=
LEAF_NODE	2835:10	2835:10	13	=
RVAL	2835:12	2835:17	12	in + src_byte
FIELD	2835:12	2835:12	13	in
LEAF_NODE	2835:12	2835:12	14	in
LEAF_NODE	2835:15	2835:15	13	+
FIELD	2835:17	2835:17	13	src_byte
LEAF_NODE	2835:17	2835:17	14	src_byte
LEAF_NODE	2835:25	2835:25	10	;
EXPR_STATEMENT	2836:6	2836:49	9	matchbits = maskbits << ( 8 - src_bit - bps ) ;
EXPR	2836:6	2836:6	10	matchbits = maskbits << ( 8 - src_bit - bps )
ASSIGN	2836:6	2836:18	11	matchbits = maskbits << ( 8 - src_bit - bps )
LVAL	2836:6	2836:6	12	matchbits
FIELD	2836:6	2836:6	13	matchbits
LEAF_NODE	2836:6	2836:6	14	matchbits
ASSIGN_OP	2836:16	2836:16	12	=
LEAF_NODE	2836:16	2836:16	13	=
RVAL	2836:18	2836:48	12	maskbits << ( 8 - src_bit - bps )
FIELD	2836:18	2836:18	13	maskbits
LEAF_NODE	2836:18	2836:18	14	maskbits
LEAF_NODE	2836:27	2836:27	13	<<
LEAF_NODE	2836:30	2836:30	13	(
FIELD	2836:31	2836:31	13	8
LEAF_NODE	2836:31	2836:31	14	8
LEAF_NODE	2836:33	2836:33	13	-
FIELD	2836:35	2836:35	13	src_bit
LEAF_NODE	2836:35	2836:35	14	src_bit
LEAF_NODE	2836:43	2836:43	13	-
FIELD	2836:45	2836:45	13	bps
LEAF_NODE	2836:45	2836:45	14	bps
LEAF_NODE	2836:48	2836:48	13	)
LEAF_NODE	2836:49	2836:49	10	;
LEAF_NODE	2837:6	2837:6	9	buff1
LEAF_NODE	2837:12	2837:12	9	=
LEAF_NODE	2837:14	2837:14	9	(
LEAF_NODE	2837:15	2837:15	9	(
LEAF_NODE	2837:16	2837:16	9	*
LEAF_NODE	2837:17	2837:17	9	src
LEAF_NODE	2837:20	2837:20	9	)
LEAF_NODE	2837:22	2837:22	9	&
LEAF_NODE	2837:24	2837:24	9	matchbits
LEAF_NODE	2837:33	2837:33	9	)
LEAF_NODE	2837:35	2837:35	9	<<
LEAF_NODE	2837:38	2837:38	9	(
LEAF_NODE	2837:39	2837:39	9	src_bit
LEAF_NODE	2837:46	2837:46	9	)
LEAF_NODE	2837:47	2837:47	9	;
SELECTION	2840:6	2841:8	9	
KEYWORD	2840:6	2840:6	10	if
LEAF_NODE	2840:6	2840:6	11	if
LEAF_NODE	2840:9	2840:9	10	(
CONDITION	2840:10	2840:10	10	ready_bits >= 8
EXPR	2840:10	2840:24	11	ready_bits >= 8
FIELD	2840:10	2840:10	12	ready_bits
LEAF_NODE	2840:10	2840:10	13	ready_bits
REL_OPERATOR	2840:21	2840:21	12	>=
LEAF_NODE	2840:21	2840:21	13	>=
FIELD	2840:24	2840:24	12	8
LEAF_NODE	2840:24	2840:24	13	8
LEAF_NODE	2840:25	2840:25	10	)
STATEMENTS	2841:8	2845:8	10	
LEAF_NODE	2841:8	2841:8	11	{
STATEMENTS	2842:8	2844:8	11	
EXPR_STATEMENT	2842:8	2842:22	12	* dst ++ = buff2 ;
EXPR	2842:8	2842:8	13	* dst ++ = buff2
ASSIGN	2842:8	2842:17	14	* dst ++ = buff2
LVAL	2842:8	2842:8	15	* dst ++
UNARY_EXPR	2842:8	2842:9	16	* dst ++
UNARY_OPERATOR	2842:8	2842:8	17	*
LEAF_NODE	2842:8	2842:8	18	*
FIELD	2842:9	2842:12	17	dst ++
LEAF_NODE	2842:9	2842:9	18	dst
LEAF_NODE	2842:12	2842:12	18	++
ASSIGN_OP	2842:15	2842:15	15	=
LEAF_NODE	2842:15	2842:15	16	=
RVAL	2842:17	2842:17	15	buff2
FIELD	2842:17	2842:17	16	buff2
LEAF_NODE	2842:17	2842:17	17	buff2
LEAF_NODE	2842:22	2842:22	13	;
EXPR_STATEMENT	2843:8	2843:21	12	buff2 = buff1 ;
EXPR	2843:8	2843:8	13	buff2 = buff1
ASSIGN	2843:8	2843:16	14	buff2 = buff1
LVAL	2843:8	2843:8	15	buff2
FIELD	2843:8	2843:8	16	buff2
LEAF_NODE	2843:8	2843:8	17	buff2
ASSIGN_OP	2843:14	2843:14	15	=
LEAF_NODE	2843:14	2843:14	16	=
RVAL	2843:16	2843:16	15	buff1
FIELD	2843:16	2843:16	16	buff1
LEAF_NODE	2843:16	2843:16	17	buff1
LEAF_NODE	2843:21	2843:21	13	;
EXPR_STATEMENT	2844:8	2844:23	12	ready_bits -= 8 ;
EXPR	2844:8	2844:8	13	ready_bits -= 8
ASSIGN	2844:8	2844:22	14	ready_bits -= 8
LVAL	2844:8	2844:8	15	ready_bits
FIELD	2844:8	2844:8	16	ready_bits
LEAF_NODE	2844:8	2844:8	17	ready_bits
ASSIGN_OP	2844:19	2844:19	15	-=
LEAF_NODE	2844:19	2844:19	16	-=
RVAL	2844:22	2844:22	15	8
FIELD	2844:22	2844:22	16	8
LEAF_NODE	2844:22	2844:22	17	8
LEAF_NODE	2844:23	2844:23	13	;
LEAF_NODE	2845:8	2845:8	11	}
SELECTION	2846:6	2847:8	9	
KEYWORD	2846:6	2846:6	10	else
LEAF_NODE	2846:6	2846:6	11	else
STATEMENTS	2847:8	2847:8	10	
EXPR_STATEMENT	2847:8	2847:47	11	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	2847:8	2847:8	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	2847:8	2847:16	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	2847:8	2847:8	14	buff2
FIELD	2847:8	2847:8	15	buff2
LEAF_NODE	2847:8	2847:8	16	buff2
ASSIGN_OP	2847:14	2847:14	14	=
LEAF_NODE	2847:14	2847:14	15	=
RVAL	2847:16	2847:46	14	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	2847:16	2847:16	15	(
BIT_OR	2847:17	2847:25	15	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	2847:17	2847:17	16	buff2
FIELD	2847:17	2847:17	17	buff2
LEAF_NODE	2847:17	2847:17	18	buff2
LEAF_NODE	2847:23	2847:23	16	|
BIT_OR_ELEM	2847:25	2847:45	16	( buff1 >> ready_bits )
LEAF_NODE	2847:25	2847:25	17	(
FIELD	2847:26	2847:26	17	buff1
LEAF_NODE	2847:26	2847:26	18	buff1
LEAF_NODE	2847:32	2847:32	17	>>
FIELD	2847:35	2847:35	17	ready_bits
LEAF_NODE	2847:35	2847:35	18	ready_bits
LEAF_NODE	2847:45	2847:45	17	)
LEAF_NODE	2847:46	2847:46	15	)
LEAF_NODE	2847:47	2847:47	12	;
EXPR_STATEMENT	2848:6	2848:23	9	ready_bits += bps ;
EXPR	2848:6	2848:6	10	ready_bits += bps
ASSIGN	2848:6	2848:20	11	ready_bits += bps
LVAL	2848:6	2848:6	12	ready_bits
FIELD	2848:6	2848:6	13	ready_bits
LEAF_NODE	2848:6	2848:6	14	ready_bits
ASSIGN_OP	2848:17	2848:17	12	+=
LEAF_NODE	2848:17	2848:17	13	+=
RVAL	2848:20	2848:20	12	bps
FIELD	2848:20	2848:20	13	bps
LEAF_NODE	2848:20	2848:20	14	bps
LEAF_NODE	2848:23	2848:23	10	;
LEAF_NODE	2849:6	2849:6	8	}
LEAF_NODE	2850:4	2850:4	5	}
ITERATION	2852:2	2853:4	3	
KEYWORD	2852:2	2852:2	4	while
LEAF_NODE	2852:2	2852:2	5	while
LEAF_NODE	2852:8	2852:8	4	(
CONDITION	2852:9	2852:9	4	ready_bits > 0
EXPR	2852:9	2852:22	5	ready_bits > 0
FIELD	2852:9	2852:9	6	ready_bits
LEAF_NODE	2852:9	2852:9	7	ready_bits
REL_OPERATOR	2852:20	2852:20	6	>
LEAF_NODE	2852:20	2852:20	7	>
FIELD	2852:22	2852:22	6	0
LEAF_NODE	2852:22	2852:22	7	0
LEAF_NODE	2852:23	2852:23	4	)
STATEMENTS	2853:4	2857:4	4	
LEAF_NODE	2853:4	2853:4	5	{
STATEMENTS	2854:4	2856:4	5	
EXPR_STATEMENT	2854:4	2854:61	6	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) ) ;
EXPR	2854:4	2854:4	7	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
ASSIGN	2854:4	2854:12	8	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LVAL	2854:4	2854:4	9	buff1
FIELD	2854:4	2854:4	10	buff1
LEAF_NODE	2854:4	2854:4	11	buff1
ASSIGN_OP	2854:10	2854:10	9	=
LEAF_NODE	2854:10	2854:10	10	=
RVAL	2854:12	2854:60	9	( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LEAF_NODE	2854:12	2854:12	10	(
FIELD	2854:13	2854:13	10	buff2
LEAF_NODE	2854:13	2854:13	11	buff2
LEAF_NODE	2854:19	2854:19	10	&
LEAF_NODE	2854:21	2854:21	10	(
LEAF_NODE	2854:22	2854:22	10	(
TYPE_NAME	2854:23	2854:32	10	unsigned int
LEAF_NODE	2854:23	2854:23	11	unsigned
LEAF_NODE	2854:32	2854:32	11	int
LEAF_NODE	2854:35	2854:35	10	)
FIELD	2854:36	2854:36	10	255
LEAF_NODE	2854:36	2854:36	11	255
LEAF_NODE	2854:40	2854:40	10	<<
LEAF_NODE	2854:43	2854:43	10	(
FIELD	2854:44	2854:44	10	8
LEAF_NODE	2854:44	2854:44	11	8
LEAF_NODE	2854:46	2854:46	10	-
FIELD	2854:48	2854:48	10	ready_bits
LEAF_NODE	2854:48	2854:48	11	ready_bits
LEAF_NODE	2854:58	2854:58	10	)
LEAF_NODE	2854:59	2854:59	10	)
LEAF_NODE	2854:60	2854:60	10	)
LEAF_NODE	2854:61	2854:61	7	;
EXPR_STATEMENT	2855:4	2855:18	6	* dst ++ = buff1 ;
EXPR	2855:4	2855:4	7	* dst ++ = buff1
ASSIGN	2855:4	2855:13	8	* dst ++ = buff1
LVAL	2855:4	2855:4	9	* dst ++
UNARY_EXPR	2855:4	2855:5	10	* dst ++
UNARY_OPERATOR	2855:4	2855:4	11	*
LEAF_NODE	2855:4	2855:4	12	*
FIELD	2855:5	2855:8	11	dst ++
LEAF_NODE	2855:5	2855:5	12	dst
LEAF_NODE	2855:8	2855:8	12	++
ASSIGN_OP	2855:11	2855:11	9	=
LEAF_NODE	2855:11	2855:11	10	=
RVAL	2855:13	2855:13	9	buff1
FIELD	2855:13	2855:13	10	buff1
LEAF_NODE	2855:13	2855:13	11	buff1
LEAF_NODE	2855:18	2855:18	7	;
EXPR_STATEMENT	2856:4	2856:19	6	ready_bits -= 8 ;
EXPR	2856:4	2856:4	7	ready_bits -= 8
ASSIGN	2856:4	2856:18	8	ready_bits -= 8
LVAL	2856:4	2856:4	9	ready_bits
FIELD	2856:4	2856:4	10	ready_bits
LEAF_NODE	2856:4	2856:4	11	ready_bits
ASSIGN_OP	2856:15	2856:15	9	-=
LEAF_NODE	2856:15	2856:15	10	-=
RVAL	2856:18	2856:18	9	8
FIELD	2856:18	2856:18	10	8
LEAF_NODE	2856:18	2856:18	11	8
LEAF_NODE	2856:19	2856:19	7	;
LEAF_NODE	2857:4	2857:4	5	}
JUMP_STATEMENT	2859:2	2859:12	3	return ( 0 ) ;
KEYWORD	2859:2	2859:2	4	return
LEAF_NODE	2859:2	2859:2	5	return
DESTINATION	2859:9	2859:9	4	( 0 )
EXPR	2859:9	2859:11	5	( 0 )
LEAF_NODE	2859:9	2859:9	6	(
FIELD	2859:10	2859:10	6	0
LEAF_NODE	2859:10	2859:10	7	0
LEAF_NODE	2859:11	2859:11	6	)
LEAF_NODE	2859:12	2859:12	4	;
LEAF_NODE	2860:2	2860:2	2	}
FUNCTION_DEF	2862:0	2948:2	1	
RETURN_TYPE	2862:0	2862:7	2	static int
LEAF_NODE	2862:0	2862:0	3	static
TYPE_NAME	2862:7	2862:7	3	int
LEAF_NODE	2862:7	2862:7	4	int
FUNCTION_NAME	2863:0	2863:0	2	extractContigSamples16bits
LEAF_NODE	2863:0	2863:0	3	extractContigSamples16bits
PARAMETER_LIST	2863:27	2865:69	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end )
LEAF_NODE	2863:27	2863:27	3	(
PARAMETER_DECL	2863:28	2863:35	3	uint8 * in
TYPE	2863:28	2863:34	4	uint8 *
TYPE_NAME	2863:28	2863:28	5	uint8
LEAF_NODE	2863:28	2863:28	6	uint8
POINTER	2863:34	2863:34	5	*
LEAF_NODE	2863:34	2863:34	6	*
NAME	2863:35	2863:35	4	in
LEAF_NODE	2863:35	2863:35	5	in
LEAF_NODE	2863:37	2863:37	3	,
PARAMETER_DECL	2863:39	2863:46	3	uint8 * out
TYPE	2863:39	2863:45	4	uint8 *
TYPE_NAME	2863:39	2863:39	5	uint8
LEAF_NODE	2863:39	2863:39	6	uint8
POINTER	2863:45	2863:45	5	*
LEAF_NODE	2863:45	2863:45	6	*
NAME	2863:46	2863:46	4	out
LEAF_NODE	2863:46	2863:46	5	out
LEAF_NODE	2863:49	2863:49	3	,
PARAMETER_DECL	2863:51	2863:58	3	uint32 cols
TYPE	2863:51	2863:51	4	uint32
TYPE_NAME	2863:51	2863:51	5	uint32
LEAF_NODE	2863:51	2863:51	6	uint32
NAME	2863:58	2863:58	4	cols
LEAF_NODE	2863:58	2863:58	5	cols
LEAF_NODE	2863:62	2863:62	3	,
PARAMETER_DECL	2864:28	2864:38	3	tsample_t sample
TYPE	2864:28	2864:28	4	tsample_t
TYPE_NAME	2864:28	2864:28	5	tsample_t
LEAF_NODE	2864:28	2864:28	6	tsample_t
NAME	2864:38	2864:38	4	sample
LEAF_NODE	2864:38	2864:38	5	sample
LEAF_NODE	2864:44	2864:44	3	,
PARAMETER_DECL	2864:46	2864:53	3	uint16 spp
TYPE	2864:46	2864:46	4	uint16
TYPE_NAME	2864:46	2864:46	5	uint16
LEAF_NODE	2864:46	2864:46	6	uint16
NAME	2864:53	2864:53	4	spp
LEAF_NODE	2864:53	2864:53	5	spp
LEAF_NODE	2864:56	2864:56	3	,
PARAMETER_DECL	2864:58	2864:65	3	uint16 bps
TYPE	2864:58	2864:58	4	uint16
TYPE_NAME	2864:58	2864:58	5	uint16
LEAF_NODE	2864:58	2864:58	6	uint16
NAME	2864:65	2864:65	4	bps
LEAF_NODE	2864:65	2864:65	5	bps
LEAF_NODE	2864:68	2864:68	3	,
PARAMETER_DECL	2865:28	2865:38	3	tsample_t count
TYPE	2865:28	2865:28	4	tsample_t
TYPE_NAME	2865:28	2865:28	5	tsample_t
LEAF_NODE	2865:28	2865:28	6	tsample_t
NAME	2865:38	2865:38	4	count
LEAF_NODE	2865:38	2865:38	5	count
LEAF_NODE	2865:43	2865:43	3	,
PARAMETER_DECL	2865:45	2865:52	3	uint32 start
TYPE	2865:45	2865:45	4	uint32
TYPE_NAME	2865:45	2865:45	5	uint32
LEAF_NODE	2865:45	2865:45	6	uint32
NAME	2865:52	2865:52	4	start
LEAF_NODE	2865:52	2865:52	5	start
LEAF_NODE	2865:57	2865:57	3	,
PARAMETER_DECL	2865:59	2865:66	3	uint32 end
TYPE	2865:59	2865:59	4	uint32
TYPE_NAME	2865:59	2865:59	5	uint32
LEAF_NODE	2865:59	2865:59	6	uint32
NAME	2865:66	2865:66	4	end
LEAF_NODE	2865:66	2865:66	5	end
LEAF_NODE	2865:69	2865:69	3	)
LEAF_NODE	2866:2	2866:2	2	{
STATEMENTS	2867:2	2947:2	2	
SIMPLE_DECL	2867:2	2867:35	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	2867:2	2867:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	2867:2	2867:9	5	int ready_bits ; ready_bits = 0
TYPE	2867:2	2867:2	6	int
TYPE_NAME	2867:2	2867:2	7	int
LEAF_NODE	2867:2	2867:2	8	int
NAME	2867:9	2867:9	6	ready_bits
LEAF_NODE	2867:9	2867:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	2867:9	2867:9	6	ready_bits = 0
ASSIGN	2867:9	2867:22	7	ready_bits = 0
LVAL	2867:9	2867:9	8	ready_bits
NAME	2867:9	2867:9	9	ready_bits
LEAF_NODE	2867:9	2867:9	10	ready_bits
ASSIGN_OP	2867:20	2867:20	8	=
LEAF_NODE	2867:20	2867:20	9	=
RVAL	2867:22	2867:22	8	0
FIELD	2867:22	2867:22	9	0
LEAF_NODE	2867:22	2867:22	10	0
LEAF_NODE	2867:23	2867:23	5	,
VAR_DECL	2867:2	2867:25	5	int sindex ; sindex = 0
TYPE	2867:2	2867:2	6	int
TYPE_NAME	2867:2	2867:2	7	int
LEAF_NODE	2867:2	2867:2	8	int
NAME	2867:25	2867:25	6	sindex
LEAF_NODE	2867:25	2867:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	2867:25	2867:25	6	sindex = 0
ASSIGN	2867:25	2867:34	7	sindex = 0
LVAL	2867:25	2867:25	8	sindex
NAME	2867:25	2867:25	9	sindex
LEAF_NODE	2867:25	2867:25	10	sindex
ASSIGN_OP	2867:32	2867:32	8	=
LEAF_NODE	2867:32	2867:32	9	=
RVAL	2867:34	2867:34	8	0
FIELD	2867:34	2867:34	9	0
LEAF_NODE	2867:34	2867:34	10	0
LEAF_NODE	2867:35	2867:35	4	;
SIMPLE_DECL	2868:2	2868:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	2868:2	2868:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	2868:2	2868:9	5	uint32 col
TYPE	2868:2	2868:2	6	uint32
TYPE_NAME	2868:2	2868:2	7	uint32
LEAF_NODE	2868:2	2868:2	8	uint32
NAME	2868:9	2868:9	6	col
LEAF_NODE	2868:9	2868:9	7	col
LEAF_NODE	2868:12	2868:12	5	,
INIT_DECL_LIST	2868:2	2868:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	2868:2	2868:14	6	uint32 src_byte
TYPE	2868:2	2868:2	7	uint32
TYPE_NAME	2868:2	2868:2	8	uint32
LEAF_NODE	2868:2	2868:2	9	uint32
NAME	2868:14	2868:14	7	src_byte
LEAF_NODE	2868:14	2868:14	8	src_byte
LEAF_NODE	2868:22	2868:22	6	,
INIT_DECL_LIST	2868:2	2868:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	2868:2	2868:24	7	uint32 src_bit
TYPE	2868:2	2868:2	8	uint32
TYPE_NAME	2868:2	2868:2	9	uint32
LEAF_NODE	2868:2	2868:2	10	uint32
NAME	2868:24	2868:24	8	src_bit
LEAF_NODE	2868:24	2868:24	9	src_bit
LEAF_NODE	2868:31	2868:31	7	,
VAR_DECL	2868:2	2868:33	7	uint32 bit_offset
TYPE	2868:2	2868:2	8	uint32
TYPE_NAME	2868:2	2868:2	9	uint32
LEAF_NODE	2868:2	2868:2	10	uint32
NAME	2868:33	2868:33	8	bit_offset
LEAF_NODE	2868:33	2868:33	9	bit_offset
LEAF_NODE	2868:43	2868:43	4	;
SIMPLE_DECL	2869:2	2869:36	3	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	2869:2	2869:2	4	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0
VAR_DECL	2869:2	2869:9	5	uint16 maskbits ; maskbits = 0
TYPE	2869:2	2869:2	6	uint16
TYPE_NAME	2869:2	2869:2	7	uint16
LEAF_NODE	2869:2	2869:2	8	uint16
NAME	2869:9	2869:9	6	maskbits
LEAF_NODE	2869:9	2869:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	2869:9	2869:9	6	maskbits = 0
ASSIGN	2869:9	2869:20	7	maskbits = 0
LVAL	2869:9	2869:9	8	maskbits
NAME	2869:9	2869:9	9	maskbits
LEAF_NODE	2869:9	2869:9	10	maskbits
ASSIGN_OP	2869:18	2869:18	8	=
LEAF_NODE	2869:18	2869:18	9	=
RVAL	2869:20	2869:20	8	0
FIELD	2869:20	2869:20	9	0
LEAF_NODE	2869:20	2869:20	10	0
LEAF_NODE	2869:21	2869:21	5	,
VAR_DECL	2869:2	2869:23	5	uint16 matchbits ; matchbits = 0
TYPE	2869:2	2869:2	6	uint16
TYPE_NAME	2869:2	2869:2	7	uint16
LEAF_NODE	2869:2	2869:2	8	uint16
NAME	2869:23	2869:23	6	matchbits
LEAF_NODE	2869:23	2869:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	2869:23	2869:23	6	matchbits = 0
ASSIGN	2869:23	2869:35	7	matchbits = 0
LVAL	2869:23	2869:23	8	matchbits
NAME	2869:23	2869:23	9	matchbits
LEAF_NODE	2869:23	2869:23	10	matchbits
ASSIGN_OP	2869:33	2869:33	8	=
LEAF_NODE	2869:33	2869:33	9	=
RVAL	2869:35	2869:35	8	0
FIELD	2869:35	2869:35	9	0
LEAF_NODE	2869:35	2869:35	10	0
LEAF_NODE	2869:36	2869:36	4	;
SIMPLE_DECL	2870:2	2870:29	3	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	2870:2	2870:2	4	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0
VAR_DECL	2870:2	2870:9	5	uint16 buff1 ; buff1 = 0
TYPE	2870:2	2870:2	6	uint16
TYPE_NAME	2870:2	2870:2	7	uint16
LEAF_NODE	2870:2	2870:2	8	uint16
NAME	2870:9	2870:9	6	buff1
LEAF_NODE	2870:9	2870:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	2870:9	2870:9	6	buff1 = 0
ASSIGN	2870:9	2870:17	7	buff1 = 0
LVAL	2870:9	2870:9	8	buff1
NAME	2870:9	2870:9	9	buff1
LEAF_NODE	2870:9	2870:9	10	buff1
ASSIGN_OP	2870:15	2870:15	8	=
LEAF_NODE	2870:15	2870:15	9	=
RVAL	2870:17	2870:17	8	0
FIELD	2870:17	2870:17	9	0
LEAF_NODE	2870:17	2870:17	10	0
LEAF_NODE	2870:18	2870:18	5	,
VAR_DECL	2870:2	2870:20	5	uint16 buff2 ; buff2 = 0
TYPE	2870:2	2870:2	6	uint16
TYPE_NAME	2870:2	2870:2	7	uint16
LEAF_NODE	2870:2	2870:2	8	uint16
NAME	2870:20	2870:20	6	buff2
LEAF_NODE	2870:20	2870:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	2870:20	2870:20	6	buff2 = 0
ASSIGN	2870:20	2870:28	7	buff2 = 0
LVAL	2870:20	2870:20	8	buff2
NAME	2870:20	2870:20	9	buff2
LEAF_NODE	2870:20	2870:20	10	buff2
ASSIGN_OP	2870:26	2870:26	8	=
LEAF_NODE	2870:26	2870:26	9	=
RVAL	2870:28	2870:28	8	0
FIELD	2870:28	2870:28	9	0
LEAF_NODE	2870:28	2870:28	10	0
LEAF_NODE	2870:29	2870:29	4	;
SIMPLE_DECL	2871:2	2871:21	3	uint8 bytebuff ; bytebuff = 0 ;
VAR_DECL	2871:2	2871:9	4	uint8 bytebuff ; bytebuff = 0
TYPE	2871:2	2871:2	5	uint8
TYPE_NAME	2871:2	2871:2	6	uint8
LEAF_NODE	2871:2	2871:2	7	uint8
NAME	2871:9	2871:9	5	bytebuff
LEAF_NODE	2871:9	2871:9	6	bytebuff
LEAF_NODE	0:0	0:0	5	;
INIT	2871:9	2871:9	5	bytebuff = 0
ASSIGN	2871:9	2871:20	6	bytebuff = 0
LVAL	2871:9	2871:9	7	bytebuff
NAME	2871:9	2871:9	8	bytebuff
LEAF_NODE	2871:9	2871:9	9	bytebuff
ASSIGN_OP	2871:18	2871:18	7	=
LEAF_NODE	2871:18	2871:18	8	=
RVAL	2871:20	2871:20	7	0
FIELD	2871:20	2871:20	8	0
LEAF_NODE	2871:20	2871:20	9	0
LEAF_NODE	2871:21	2871:21	4	;
SIMPLE_DECL	2872:2	2872:17	3	uint8 * src ; src = in ;
VAR_DECL	2872:2	2872:9	4	uint8 * src ; src = in
TYPE	2872:2	2872:8	5	uint8 *
TYPE_NAME	2872:2	2872:2	6	uint8
LEAF_NODE	2872:2	2872:2	7	uint8
POINTER	2872:8	2872:8	6	*
LEAF_NODE	2872:8	2872:8	7	*
NAME	2872:9	2872:9	5	src
LEAF_NODE	2872:9	2872:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	2872:9	2872:9	5	src = in
ASSIGN	2872:9	2872:15	6	src = in
LVAL	2872:9	2872:9	7	src
NAME	2872:9	2872:9	8	src
LEAF_NODE	2872:9	2872:9	9	src
ASSIGN_OP	2872:13	2872:13	7	=
LEAF_NODE	2872:13	2872:13	8	=
RVAL	2872:15	2872:15	7	in
FIELD	2872:15	2872:15	8	in
LEAF_NODE	2872:15	2872:15	9	in
LEAF_NODE	2872:17	2872:17	4	;
SIMPLE_DECL	2873:2	2873:18	3	uint8 * dst ; dst = out ;
VAR_DECL	2873:2	2873:9	4	uint8 * dst ; dst = out
TYPE	2873:2	2873:8	5	uint8 *
TYPE_NAME	2873:2	2873:2	6	uint8
LEAF_NODE	2873:2	2873:2	7	uint8
POINTER	2873:8	2873:8	6	*
LEAF_NODE	2873:8	2873:8	7	*
NAME	2873:9	2873:9	5	dst
LEAF_NODE	2873:9	2873:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	2873:9	2873:9	5	dst = out
ASSIGN	2873:9	2873:15	6	dst = out
LVAL	2873:9	2873:9	7	dst
NAME	2873:9	2873:9	8	dst
LEAF_NODE	2873:9	2873:9	9	dst
ASSIGN_OP	2873:13	2873:13	7	=
LEAF_NODE	2873:13	2873:13	8	=
RVAL	2873:15	2873:15	7	out
FIELD	2873:15	2873:15	8	out
LEAF_NODE	2873:15	2873:15	9	out
LEAF_NODE	2873:18	2873:18	4	;
SELECTION	2875:2	2876:4	3	
KEYWORD	2875:2	2875:2	4	if
LEAF_NODE	2875:2	2875:2	5	if
LEAF_NODE	2875:5	2875:5	4	(
CONDITION	2875:6	2875:6	4	( src == NULL ) || ( dst == NULL )
EXPR	2875:6	2875:6	5	( src == NULL ) || ( dst == NULL )
OR	2875:6	2875:23	6	( src == NULL ) || ( dst == NULL )
EXPR	2875:6	2875:18	7	( src == NULL )
LEAF_NODE	2875:6	2875:6	8	(
FIELD	2875:7	2875:7	8	src
LEAF_NODE	2875:7	2875:7	9	src
EQ_OPERATOR	2875:11	2875:11	8	==
LEAF_NODE	2875:11	2875:11	9	==
FIELD	2875:14	2875:14	8	NULL
LEAF_NODE	2875:14	2875:14	9	NULL
LEAF_NODE	2875:18	2875:18	8	)
LEAF_NODE	2875:20	2875:20	7	||
EXPR	2875:23	2875:35	7	( dst == NULL )
LEAF_NODE	2875:23	2875:23	8	(
FIELD	2875:24	2875:24	8	dst
LEAF_NODE	2875:24	2875:24	9	dst
EQ_OPERATOR	2875:28	2875:28	8	==
LEAF_NODE	2875:28	2875:28	9	==
FIELD	2875:31	2875:31	8	NULL
LEAF_NODE	2875:31	2875:31	9	NULL
LEAF_NODE	2875:35	2875:35	8	)
LEAF_NODE	2875:36	2875:36	4	)
STATEMENTS	2876:4	2879:4	4	
LEAF_NODE	2876:4	2876:4	5	{
STATEMENTS	2877:4	2878:4	5	
EXPR_STATEMENT	2877:4	2877:76	6	TIFFError ( "extractContigSamples16bits" , "Invalid input or output buffer" ) ;
EXPR	2877:4	2877:4	7	TIFFError ( "extractContigSamples16bits" , "Invalid input or output buffer" )
FUNCTION_CALL	2877:4	2877:75	8	TIFFError ( "extractContigSamples16bits" , "Invalid input or output buffer" )
CALLEE	2877:4	2877:4	9	TIFFError
LEAF_NODE	2877:4	2877:4	10	TIFFError
LEAF_NODE	2877:13	2877:13	9	(
ARGUMENT	2877:14	2877:14	9	"extractContigSamples16bits"
FIELD	2877:14	2877:14	10	"extractContigSamples16bits"
LEAF_NODE	2877:14	2877:14	11	"extractContigSamples16bits"
LEAF_NODE	2877:42	2877:42	9	,
ARGUMENT	2877:43	2877:43	9	"Invalid input or output buffer"
FIELD	2877:43	2877:43	10	"Invalid input or output buffer"
LEAF_NODE	2877:43	2877:43	11	"Invalid input or output buffer"
LEAF_NODE	2877:75	2877:75	9	)
LEAF_NODE	2877:76	2877:76	7	;
JUMP_STATEMENT	2878:4	2878:14	6	return ( 1 ) ;
KEYWORD	2878:4	2878:4	7	return
LEAF_NODE	2878:4	2878:4	8	return
DESTINATION	2878:11	2878:11	7	( 1 )
EXPR	2878:11	2878:13	8	( 1 )
LEAF_NODE	2878:11	2878:11	9	(
FIELD	2878:12	2878:12	9	1
LEAF_NODE	2878:12	2878:12	10	1
LEAF_NODE	2878:13	2878:13	9	)
LEAF_NODE	2878:14	2878:14	7	;
LEAF_NODE	2879:4	2879:4	5	}
SELECTION	2881:2	2882:4	3	
KEYWORD	2881:2	2881:2	4	if
LEAF_NODE	2881:2	2881:2	5	if
LEAF_NODE	2881:5	2881:5	4	(
CONDITION	2881:6	2881:6	4	( start > end ) || ( start > cols )
EXPR	2881:6	2881:6	5	( start > end ) || ( start > cols )
OR	2881:6	2881:23	6	( start > end ) || ( start > cols )
EXPR	2881:6	2881:18	7	( start > end )
LEAF_NODE	2881:6	2881:6	8	(
FIELD	2881:7	2881:7	8	start
LEAF_NODE	2881:7	2881:7	9	start
REL_OPERATOR	2881:13	2881:13	8	>
LEAF_NODE	2881:13	2881:13	9	>
FIELD	2881:15	2881:15	8	end
LEAF_NODE	2881:15	2881:15	9	end
LEAF_NODE	2881:18	2881:18	8	)
LEAF_NODE	2881:20	2881:20	7	||
EXPR	2881:23	2881:36	7	( start > cols )
LEAF_NODE	2881:23	2881:23	8	(
FIELD	2881:24	2881:24	8	start
LEAF_NODE	2881:24	2881:24	9	start
REL_OPERATOR	2881:30	2881:30	8	>
LEAF_NODE	2881:30	2881:30	9	>
FIELD	2881:32	2881:32	8	cols
LEAF_NODE	2881:32	2881:32	9	cols
LEAF_NODE	2881:36	2881:36	8	)
LEAF_NODE	2881:37	2881:37	4	)
STATEMENTS	2882:4	2886:4	4	
LEAF_NODE	2882:4	2882:4	5	{
STATEMENTS	2883:4	2885:4	5	
EXPR_STATEMENT	2883:4	2884:62	6	TIFFError ( "extractContigSamples16bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	2883:4	2883:4	7	TIFFError ( "extractContigSamples16bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	2883:4	2884:61	8	TIFFError ( "extractContigSamples16bits" , "Invalid start column value %d ignored" , start )
CALLEE	2883:4	2883:4	9	TIFFError
LEAF_NODE	2883:4	2883:4	10	TIFFError
LEAF_NODE	2883:14	2883:14	9	(
ARGUMENT	2883:15	2883:15	9	"extractContigSamples16bits"
FIELD	2883:15	2883:15	10	"extractContigSamples16bits"
LEAF_NODE	2883:15	2883:15	11	"extractContigSamples16bits"
LEAF_NODE	2883:43	2883:43	9	,
ARGUMENT	2884:15	2884:15	9	"Invalid start column value %d ignored"
FIELD	2884:15	2884:15	10	"Invalid start column value %d ignored"
LEAF_NODE	2884:15	2884:15	11	"Invalid start column value %d ignored"
LEAF_NODE	2884:54	2884:54	9	,
ARGUMENT	2884:56	2884:56	9	start
FIELD	2884:56	2884:56	10	start
LEAF_NODE	2884:56	2884:56	11	start
LEAF_NODE	2884:61	2884:61	9	)
LEAF_NODE	2884:62	2884:62	7	;
EXPR_STATEMENT	2885:4	2885:13	6	start = 0 ;
EXPR	2885:4	2885:4	7	start = 0
ASSIGN	2885:4	2885:12	8	start = 0
LVAL	2885:4	2885:4	9	start
FIELD	2885:4	2885:4	10	start
LEAF_NODE	2885:4	2885:4	11	start
ASSIGN_OP	2885:10	2885:10	9	=
LEAF_NODE	2885:10	2885:10	10	=
RVAL	2885:12	2885:12	9	0
FIELD	2885:12	2885:12	10	0
LEAF_NODE	2885:12	2885:12	11	0
LEAF_NODE	2885:13	2885:13	7	;
LEAF_NODE	2886:4	2886:4	5	}
SELECTION	2887:2	2888:4	3	
KEYWORD	2887:2	2887:2	4	if
LEAF_NODE	2887:2	2887:2	5	if
LEAF_NODE	2887:5	2887:5	4	(
CONDITION	2887:6	2887:6	4	( end == 0 ) || ( end > cols )
EXPR	2887:6	2887:6	5	( end == 0 ) || ( end > cols )
OR	2887:6	2887:20	6	( end == 0 ) || ( end > cols )
EXPR	2887:6	2887:15	7	( end == 0 )
LEAF_NODE	2887:6	2887:6	8	(
FIELD	2887:7	2887:7	8	end
LEAF_NODE	2887:7	2887:7	9	end
EQ_OPERATOR	2887:11	2887:11	8	==
LEAF_NODE	2887:11	2887:11	9	==
FIELD	2887:14	2887:14	8	0
LEAF_NODE	2887:14	2887:14	9	0
LEAF_NODE	2887:15	2887:15	8	)
LEAF_NODE	2887:17	2887:17	7	||
EXPR	2887:20	2887:31	7	( end > cols )
LEAF_NODE	2887:20	2887:20	8	(
FIELD	2887:21	2887:21	8	end
LEAF_NODE	2887:21	2887:21	9	end
REL_OPERATOR	2887:25	2887:25	8	>
LEAF_NODE	2887:25	2887:25	9	>
FIELD	2887:27	2887:27	8	cols
LEAF_NODE	2887:27	2887:27	9	cols
LEAF_NODE	2887:31	2887:31	8	)
LEAF_NODE	2887:32	2887:32	4	)
STATEMENTS	2888:4	2892:4	4	
LEAF_NODE	2888:4	2888:4	5	{
STATEMENTS	2889:4	2891:4	5	
EXPR_STATEMENT	2889:4	2890:58	6	TIFFError ( "extractContigSamples16bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	2889:4	2889:4	7	TIFFError ( "extractContigSamples16bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	2889:4	2890:57	8	TIFFError ( "extractContigSamples16bits" , "Invalid end column value %d ignored" , end )
CALLEE	2889:4	2889:4	9	TIFFError
LEAF_NODE	2889:4	2889:4	10	TIFFError
LEAF_NODE	2889:14	2889:14	9	(
ARGUMENT	2889:15	2889:15	9	"extractContigSamples16bits"
FIELD	2889:15	2889:15	10	"extractContigSamples16bits"
LEAF_NODE	2889:15	2889:15	11	"extractContigSamples16bits"
LEAF_NODE	2889:43	2889:43	9	,
ARGUMENT	2890:15	2890:15	9	"Invalid end column value %d ignored"
FIELD	2890:15	2890:15	10	"Invalid end column value %d ignored"
LEAF_NODE	2890:15	2890:15	11	"Invalid end column value %d ignored"
LEAF_NODE	2890:52	2890:52	9	,
ARGUMENT	2890:54	2890:54	9	end
FIELD	2890:54	2890:54	10	end
LEAF_NODE	2890:54	2890:54	11	end
LEAF_NODE	2890:57	2890:57	9	)
LEAF_NODE	2890:58	2890:58	7	;
EXPR_STATEMENT	2891:4	2891:14	6	end = cols ;
EXPR	2891:4	2891:4	7	end = cols
ASSIGN	2891:4	2891:10	8	end = cols
LVAL	2891:4	2891:4	9	end
FIELD	2891:4	2891:4	10	end
LEAF_NODE	2891:4	2891:4	11	end
ASSIGN_OP	2891:8	2891:8	9	=
LEAF_NODE	2891:8	2891:8	10	=
RVAL	2891:10	2891:10	9	cols
FIELD	2891:10	2891:10	10	cols
LEAF_NODE	2891:10	2891:10	11	cols
LEAF_NODE	2891:14	2891:14	7	;
LEAF_NODE	2892:4	2892:4	5	}
EXPR_STATEMENT	2894:2	2894:16	3	ready_bits = 0 ;
EXPR	2894:2	2894:2	4	ready_bits = 0
ASSIGN	2894:2	2894:15	5	ready_bits = 0
LVAL	2894:2	2894:2	6	ready_bits
FIELD	2894:2	2894:2	7	ready_bits
LEAF_NODE	2894:2	2894:2	8	ready_bits
ASSIGN_OP	2894:13	2894:13	6	=
LEAF_NODE	2894:13	2894:13	7	=
RVAL	2894:15	2894:15	6	0
FIELD	2894:15	2894:15	7	0
LEAF_NODE	2894:15	2894:15	8	0
LEAF_NODE	2894:16	2894:16	4	;
EXPR_STATEMENT	2895:2	2895:37	3	maskbits = ( uint16 ) - 1 >> ( 16 - bps ) ;
EXPR	2895:2	2895:2	4	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
ASSIGN	2895:2	2895:13	5	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
LVAL	2895:2	2895:2	6	maskbits
FIELD	2895:2	2895:2	7	maskbits
LEAF_NODE	2895:2	2895:2	8	maskbits
ASSIGN_OP	2895:11	2895:11	6	=
LEAF_NODE	2895:11	2895:11	7	=
RVAL	2895:13	2895:36	6	( uint16 ) - 1 >> ( 16 - bps )
LEAF_NODE	2895:13	2895:13	7	(
TYPE_NAME	2895:14	2895:14	7	uint16
LEAF_NODE	2895:14	2895:14	8	uint16
LEAF_NODE	2895:20	2895:20	7	)
UNARY_EXPR	2895:21	2895:22	7	- 1
UNARY_OPERATOR	2895:21	2895:21	8	-
LEAF_NODE	2895:21	2895:21	9	-
FIELD	2895:22	2895:22	8	1
LEAF_NODE	2895:22	2895:22	9	1
LEAF_NODE	2895:24	2895:24	7	>>
LEAF_NODE	2895:27	2895:27	7	(
FIELD	2895:28	2895:28	7	16
LEAF_NODE	2895:28	2895:28	8	16
LEAF_NODE	2895:31	2895:31	7	-
FIELD	2895:33	2895:33	7	bps
LEAF_NODE	2895:33	2895:33	8	bps
LEAF_NODE	2895:36	2895:36	7	)
LEAF_NODE	2895:37	2895:37	4	;
ITERATION	2897:2	2898:4	3	
KEYWORD	2897:2	2897:2	4	for
LEAF_NODE	2897:2	2897:2	5	for
LEAF_NODE	2897:6	2897:6	4	(
FOR_INIT	2897:7	2897:18	4	col = start ;
EXPR	2897:7	2897:7	5	col = start
ASSIGN	2897:7	2897:13	6	col = start
LVAL	2897:7	2897:7	7	col
FIELD	2897:7	2897:7	8	col
LEAF_NODE	2897:7	2897:7	9	col
ASSIGN_OP	2897:11	2897:11	7	=
LEAF_NODE	2897:11	2897:11	8	=
RVAL	2897:13	2897:13	7	start
FIELD	2897:13	2897:13	8	start
LEAF_NODE	2897:13	2897:13	9	start
LEAF_NODE	2897:18	2897:18	5	;
CONDITION	2897:20	2897:20	4	col < end
EXPR	2897:20	2897:26	5	col < end
FIELD	2897:20	2897:20	6	col
LEAF_NODE	2897:20	2897:20	7	col
REL_OPERATOR	2897:24	2897:24	6	<
LEAF_NODE	2897:24	2897:24	7	<
FIELD	2897:26	2897:26	6	end
LEAF_NODE	2897:26	2897:26	7	end
LEAF_NODE	2897:29	2897:29	4	;
FOR_EXPR	2897:31	2897:31	4	col ++
EXPR	2897:31	2897:31	5	col ++
FIELD	2897:31	2897:34	6	col ++
LEAF_NODE	2897:31	2897:31	7	col
LEAF_NODE	2897:34	2897:34	7	++
LEAF_NODE	2897:36	2897:36	4	)
STATEMENTS	2898:4	2937:4	4	
LEAF_NODE	2898:4	2898:4	5	{
STATEMENTS	2899:4	2900:4	5	
LEAF_NODE	2899:4	2899:4	6	bit_offset
LEAF_NODE	2899:15	2899:15	6	=
LEAF_NODE	2899:17	2899:17	6	col
EXPR_STATEMENT	2899:21	2899:32	6	* bps * spp ;
EXPR	2899:21	2899:29	7	* bps * spp
UNARY_EXPR	2899:21	2899:23	8	* bps
UNARY_OPERATOR	2899:21	2899:21	9	*
LEAF_NODE	2899:21	2899:21	10	*
FIELD	2899:23	2899:23	9	bps
LEAF_NODE	2899:23	2899:23	10	bps
LEAF_NODE	2899:27	2899:27	8	*
FIELD	2899:29	2899:29	8	spp
LEAF_NODE	2899:29	2899:29	9	spp
LEAF_NODE	2899:32	2899:32	7	;
ITERATION	2900:4	2901:6	6	
KEYWORD	2900:4	2900:4	7	for
LEAF_NODE	2900:4	2900:4	8	for
LEAF_NODE	2900:8	2900:8	7	(
FOR_INIT	2900:9	2900:24	7	sindex = sample ;
EXPR	2900:9	2900:9	8	sindex = sample
ASSIGN	2900:9	2900:18	9	sindex = sample
LVAL	2900:9	2900:9	10	sindex
FIELD	2900:9	2900:9	11	sindex
LEAF_NODE	2900:9	2900:9	12	sindex
ASSIGN_OP	2900:16	2900:16	10	=
LEAF_NODE	2900:16	2900:16	11	=
RVAL	2900:18	2900:18	10	sample
FIELD	2900:18	2900:18	11	sample
LEAF_NODE	2900:18	2900:18	12	sample
LEAF_NODE	2900:24	2900:24	8	;
CONDITION	2900:26	2900:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2900:26	2900:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	2900:26	2900:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2900:26	2900:39	10	( sindex < spp )
LEAF_NODE	2900:26	2900:26	11	(
FIELD	2900:27	2900:27	11	sindex
LEAF_NODE	2900:27	2900:27	12	sindex
REL_OPERATOR	2900:34	2900:34	11	<
LEAF_NODE	2900:34	2900:34	12	<
FIELD	2900:36	2900:36	11	spp
LEAF_NODE	2900:36	2900:36	12	spp
LEAF_NODE	2900:39	2900:39	11	)
LEAF_NODE	2900:41	2900:41	10	&&
EXPR	2900:44	2900:70	10	( sindex < ( sample + count ) )
LEAF_NODE	2900:44	2900:44	11	(
FIELD	2900:45	2900:45	11	sindex
LEAF_NODE	2900:45	2900:45	12	sindex
REL_OPERATOR	2900:52	2900:52	11	<
LEAF_NODE	2900:52	2900:52	12	<
LEAF_NODE	2900:54	2900:54	11	(
FIELD	2900:55	2900:55	11	sample
LEAF_NODE	2900:55	2900:55	12	sample
LEAF_NODE	2900:62	2900:62	11	+
FIELD	2900:64	2900:64	11	count
LEAF_NODE	2900:64	2900:64	12	count
LEAF_NODE	2900:69	2900:69	11	)
LEAF_NODE	2900:70	2900:70	11	)
LEAF_NODE	2900:71	2900:71	7	;
FOR_EXPR	2900:73	2900:73	7	sindex ++
EXPR	2900:73	2900:73	8	sindex ++
FIELD	2900:73	2900:79	9	sindex ++
LEAF_NODE	2900:73	2900:73	10	sindex
LEAF_NODE	2900:79	2900:79	10	++
LEAF_NODE	2900:81	2900:81	7	)
STATEMENTS	2901:6	2936:6	7	
LEAF_NODE	2901:6	2901:6	8	{
STATEMENTS	2902:6	2935:6	8	
SELECTION	2902:6	2903:8	9	
KEYWORD	2902:6	2902:6	10	if
LEAF_NODE	2902:6	2902:6	11	if
LEAF_NODE	2902:9	2902:9	10	(
CONDITION	2902:10	2902:10	10	sindex == 0
EXPR	2902:10	2902:20	11	sindex == 0
FIELD	2902:10	2902:10	12	sindex
LEAF_NODE	2902:10	2902:10	13	sindex
EQ_OPERATOR	2902:17	2902:17	12	==
LEAF_NODE	2902:17	2902:17	13	==
FIELD	2902:20	2902:20	12	0
LEAF_NODE	2902:20	2902:20	13	0
LEAF_NODE	2902:21	2902:21	10	)
STATEMENTS	2903:8	2906:8	10	
LEAF_NODE	2903:8	2903:8	11	{
STATEMENTS	2904:8	2905:8	11	
EXPR_STATEMENT	2904:8	2904:33	12	src_byte = bit_offset / 8 ;
EXPR	2904:8	2904:8	13	src_byte = bit_offset / 8
ASSIGN	2904:8	2904:19	14	src_byte = bit_offset / 8
LVAL	2904:8	2904:8	15	src_byte
FIELD	2904:8	2904:8	16	src_byte
LEAF_NODE	2904:8	2904:8	17	src_byte
ASSIGN_OP	2904:17	2904:17	15	=
LEAF_NODE	2904:17	2904:17	16	=
RVAL	2904:19	2904:32	15	bit_offset / 8
FIELD	2904:19	2904:19	16	bit_offset
LEAF_NODE	2904:19	2904:19	17	bit_offset
LEAF_NODE	2904:30	2904:30	16	/
FIELD	2904:32	2904:32	16	8
LEAF_NODE	2904:32	2904:32	17	8
LEAF_NODE	2904:33	2904:33	13	;
EXPR_STATEMENT	2905:8	2905:33	12	src_bit = bit_offset % 8 ;
EXPR	2905:8	2905:8	13	src_bit = bit_offset % 8
ASSIGN	2905:8	2905:19	14	src_bit = bit_offset % 8
LVAL	2905:8	2905:8	15	src_bit
FIELD	2905:8	2905:8	16	src_bit
LEAF_NODE	2905:8	2905:8	17	src_bit
ASSIGN_OP	2905:17	2905:17	15	=
LEAF_NODE	2905:17	2905:17	16	=
RVAL	2905:19	2905:32	15	bit_offset % 8
FIELD	2905:19	2905:19	16	bit_offset
LEAF_NODE	2905:19	2905:19	17	bit_offset
LEAF_NODE	2905:30	2905:30	16	%
FIELD	2905:32	2905:32	16	8
LEAF_NODE	2905:32	2905:32	17	8
LEAF_NODE	2905:33	2905:33	13	;
LEAF_NODE	2906:8	2906:8	11	}
SELECTION	2907:6	2908:8	9	
KEYWORD	2907:6	2907:6	10	else
LEAF_NODE	2907:6	2907:6	11	else
STATEMENTS	2908:8	2911:8	10	
LEAF_NODE	2908:8	2908:8	11	{
STATEMENTS	2909:8	2910:8	11	
EXPR_STATEMENT	2909:8	2909:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	2909:8	2909:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	2909:8	2909:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	2909:8	2909:8	15	src_byte
FIELD	2909:8	2909:8	16	src_byte
LEAF_NODE	2909:8	2909:8	17	src_byte
ASSIGN_OP	2909:17	2909:17	15	=
LEAF_NODE	2909:17	2909:17	16	=
RVAL	2909:19	2909:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	2909:19	2909:19	16	(
FIELD	2909:20	2909:20	16	bit_offset
LEAF_NODE	2909:20	2909:20	17	bit_offset
LEAF_NODE	2909:31	2909:31	16	+
LEAF_NODE	2909:33	2909:33	16	(
FIELD	2909:34	2909:34	16	sindex
LEAF_NODE	2909:34	2909:34	17	sindex
LEAF_NODE	2909:41	2909:41	16	*
FIELD	2909:43	2909:43	16	bps
LEAF_NODE	2909:43	2909:43	17	bps
LEAF_NODE	2909:46	2909:46	16	)
LEAF_NODE	2909:47	2909:47	16	)
LEAF_NODE	2909:49	2909:49	16	/
FIELD	2909:51	2909:51	16	8
LEAF_NODE	2909:51	2909:51	17	8
LEAF_NODE	2909:52	2909:52	13	;
EXPR_STATEMENT	2910:8	2910:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	2910:8	2910:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	2910:8	2910:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	2910:8	2910:8	15	src_bit
FIELD	2910:8	2910:8	16	src_bit
LEAF_NODE	2910:8	2910:8	17	src_bit
ASSIGN_OP	2910:17	2910:17	15	=
LEAF_NODE	2910:17	2910:17	16	=
RVAL	2910:19	2910:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	2910:19	2910:19	16	(
FIELD	2910:20	2910:20	16	bit_offset
LEAF_NODE	2910:20	2910:20	17	bit_offset
LEAF_NODE	2910:31	2910:31	16	+
LEAF_NODE	2910:33	2910:33	16	(
FIELD	2910:34	2910:34	16	sindex
LEAF_NODE	2910:34	2910:34	17	sindex
LEAF_NODE	2910:41	2910:41	16	*
FIELD	2910:43	2910:43	16	bps
LEAF_NODE	2910:43	2910:43	17	bps
LEAF_NODE	2910:46	2910:46	16	)
LEAF_NODE	2910:47	2910:47	16	)
LEAF_NODE	2910:49	2910:49	16	%
FIELD	2910:51	2910:51	16	8
LEAF_NODE	2910:51	2910:51	17	8
LEAF_NODE	2910:52	2910:52	13	;
LEAF_NODE	2911:8	2911:8	11	}
EXPR_STATEMENT	2913:6	2913:25	9	src = in + src_byte ;
EXPR	2913:6	2913:6	10	src = in + src_byte
ASSIGN	2913:6	2913:12	11	src = in + src_byte
LVAL	2913:6	2913:6	12	src
FIELD	2913:6	2913:6	13	src
LEAF_NODE	2913:6	2913:6	14	src
ASSIGN_OP	2913:10	2913:10	12	=
LEAF_NODE	2913:10	2913:10	13	=
RVAL	2913:12	2913:17	12	in + src_byte
FIELD	2913:12	2913:12	13	in
LEAF_NODE	2913:12	2913:12	14	in
LEAF_NODE	2913:15	2913:15	13	+
FIELD	2913:17	2913:17	13	src_byte
LEAF_NODE	2913:17	2913:17	14	src_byte
LEAF_NODE	2913:25	2913:25	10	;
EXPR_STATEMENT	2914:6	2914:50	9	matchbits = maskbits << ( 16 - src_bit - bps ) ;
EXPR	2914:6	2914:6	10	matchbits = maskbits << ( 16 - src_bit - bps )
ASSIGN	2914:6	2914:18	11	matchbits = maskbits << ( 16 - src_bit - bps )
LVAL	2914:6	2914:6	12	matchbits
FIELD	2914:6	2914:6	13	matchbits
LEAF_NODE	2914:6	2914:6	14	matchbits
ASSIGN_OP	2914:16	2914:16	12	=
LEAF_NODE	2914:16	2914:16	13	=
RVAL	2914:18	2914:49	12	maskbits << ( 16 - src_bit - bps )
FIELD	2914:18	2914:18	13	maskbits
LEAF_NODE	2914:18	2914:18	14	maskbits
LEAF_NODE	2914:27	2914:27	13	<<
LEAF_NODE	2914:30	2914:30	13	(
FIELD	2914:31	2914:31	13	16
LEAF_NODE	2914:31	2914:31	14	16
LEAF_NODE	2914:34	2914:34	13	-
FIELD	2914:36	2914:36	13	src_bit
LEAF_NODE	2914:36	2914:36	14	src_bit
LEAF_NODE	2914:44	2914:44	13	-
FIELD	2914:46	2914:46	13	bps
LEAF_NODE	2914:46	2914:46	14	bps
LEAF_NODE	2914:49	2914:49	13	)
LEAF_NODE	2914:50	2914:50	10	;
SELECTION	2916:6	2917:8	9	
KEYWORD	2916:6	2916:6	10	if
LEAF_NODE	2916:6	2916:6	11	if
LEAF_NODE	2916:9	2916:9	10	(
CONDITION	2916:10	2916:10	10	little_endian
EXPR	2916:10	2916:10	11	little_endian
FIELD	2916:10	2916:10	12	little_endian
LEAF_NODE	2916:10	2916:10	13	little_endian
LEAF_NODE	2916:23	2916:23	10	)
STATEMENTS	2917:8	2917:8	10	
EXPR_STATEMENT	2917:8	2917:38	11	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ] ;
EXPR	2917:8	2917:8	12	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
ASSIGN	2917:8	2917:16	13	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
LVAL	2917:8	2917:8	14	buff1
FIELD	2917:8	2917:8	15	buff1
LEAF_NODE	2917:8	2917:8	16	buff1
ASSIGN_OP	2917:14	2917:14	14	=
LEAF_NODE	2917:14	2917:14	15	=
RVAL	2917:16	2917:16	14	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR	2917:16	2917:32	15	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR_ELEM	2917:16	2917:28	16	( src [ 0 ] << 8 )
LEAF_NODE	2917:16	2917:16	17	(
FIELD	2917:17	2917:22	17	src [ 0 ]
LEAF_NODE	2917:17	2917:17	18	src
LEAF_NODE	2917:20	2917:20	18	[
EXPR	2917:21	2917:21	18	0
FIELD	2917:21	2917:21	19	0
LEAF_NODE	2917:21	2917:21	20	0
LEAF_NODE	2917:22	2917:22	18	]
LEAF_NODE	2917:24	2917:24	17	<<
FIELD	2917:27	2917:27	17	8
LEAF_NODE	2917:27	2917:27	18	8
LEAF_NODE	2917:28	2917:28	17	)
LEAF_NODE	2917:30	2917:30	16	|
BIT_OR_ELEM	2917:32	2917:32	16	src [ 1 ]
FIELD	2917:32	2917:37	17	src [ 1 ]
LEAF_NODE	2917:32	2917:32	18	src
LEAF_NODE	2917:35	2917:35	18	[
EXPR	2917:36	2917:36	18	1
FIELD	2917:36	2917:36	19	1
LEAF_NODE	2917:36	2917:36	20	1
LEAF_NODE	2917:37	2917:37	18	]
LEAF_NODE	2917:38	2917:38	12	;
SELECTION	2918:6	2919:8	9	
KEYWORD	2918:6	2918:6	10	else
LEAF_NODE	2918:6	2918:6	11	else
STATEMENTS	2919:8	2919:8	10	
EXPR_STATEMENT	2919:8	2919:38	11	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	2919:8	2919:8	12	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	2919:8	2919:16	13	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	2919:8	2919:8	14	buff1
FIELD	2919:8	2919:8	15	buff1
LEAF_NODE	2919:8	2919:8	16	buff1
ASSIGN_OP	2919:14	2919:14	14	=
LEAF_NODE	2919:14	2919:14	15	=
RVAL	2919:16	2919:16	14	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	2919:16	2919:32	15	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	2919:16	2919:28	16	( src [ 1 ] << 8 )
LEAF_NODE	2919:16	2919:16	17	(
FIELD	2919:17	2919:22	17	src [ 1 ]
LEAF_NODE	2919:17	2919:17	18	src
LEAF_NODE	2919:20	2919:20	18	[
EXPR	2919:21	2919:21	18	1
FIELD	2919:21	2919:21	19	1
LEAF_NODE	2919:21	2919:21	20	1
LEAF_NODE	2919:22	2919:22	18	]
LEAF_NODE	2919:24	2919:24	17	<<
FIELD	2919:27	2919:27	17	8
LEAF_NODE	2919:27	2919:27	18	8
LEAF_NODE	2919:28	2919:28	17	)
LEAF_NODE	2919:30	2919:30	16	|
BIT_OR_ELEM	2919:32	2919:32	16	src [ 0 ]
FIELD	2919:32	2919:37	17	src [ 0 ]
LEAF_NODE	2919:32	2919:32	18	src
LEAF_NODE	2919:35	2919:35	18	[
EXPR	2919:36	2919:36	18	0
FIELD	2919:36	2919:36	19	0
LEAF_NODE	2919:36	2919:36	20	0
LEAF_NODE	2919:37	2919:37	18	]
LEAF_NODE	2919:38	2919:38	12	;
LEAF_NODE	2921:6	2921:6	9	buff1
LEAF_NODE	2921:12	2921:12	9	=
LEAF_NODE	2921:14	2921:14	9	(
LEAF_NODE	2921:15	2921:15	9	buff1
LEAF_NODE	2921:21	2921:21	9	&
LEAF_NODE	2921:23	2921:23	9	matchbits
LEAF_NODE	2921:32	2921:32	9	)
LEAF_NODE	2921:34	2921:34	9	<<
LEAF_NODE	2921:37	2921:37	9	(
LEAF_NODE	2921:38	2921:38	9	src_bit
LEAF_NODE	2921:45	2921:45	9	)
LEAF_NODE	2921:46	2921:46	9	;
SELECTION	2922:6	2923:8	9	
KEYWORD	2922:6	2922:6	10	if
LEAF_NODE	2922:6	2922:6	11	if
LEAF_NODE	2922:9	2922:9	10	(
CONDITION	2922:10	2922:10	10	ready_bits < 8
EXPR	2922:10	2922:23	11	ready_bits < 8
FIELD	2922:10	2922:10	12	ready_bits
LEAF_NODE	2922:10	2922:10	13	ready_bits
REL_OPERATOR	2922:21	2922:21	12	<
LEAF_NODE	2922:21	2922:21	13	<
FIELD	2922:23	2922:23	12	8
LEAF_NODE	2922:23	2922:23	13	8
LEAF_NODE	2922:24	2922:24	10	)
STATEMENTS	2923:8	2926:8	10	
LEAF_NODE	2923:8	2923:8	11	{
STATEMENTS	2924:8	2925:8	11	
EXPR_STATEMENT	2924:8	2924:20	12	bytebuff = 0 ;
EXPR	2924:8	2924:8	13	bytebuff = 0
ASSIGN	2924:8	2924:19	14	bytebuff = 0
LVAL	2924:8	2924:8	15	bytebuff
FIELD	2924:8	2924:8	16	bytebuff
LEAF_NODE	2924:8	2924:8	17	bytebuff
ASSIGN_OP	2924:17	2924:17	15	=
LEAF_NODE	2924:17	2924:17	16	=
RVAL	2924:19	2924:19	15	0
FIELD	2924:19	2924:19	16	0
LEAF_NODE	2924:19	2924:19	17	0
LEAF_NODE	2924:20	2924:20	13	;
EXPR_STATEMENT	2925:8	2925:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	2925:8	2925:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	2925:8	2925:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	2925:8	2925:8	15	buff2
FIELD	2925:8	2925:8	16	buff2
LEAF_NODE	2925:8	2925:8	17	buff2
ASSIGN_OP	2925:14	2925:14	15	=
LEAF_NODE	2925:14	2925:14	16	=
RVAL	2925:16	2925:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	2925:16	2925:16	16	(
BIT_OR	2925:17	2925:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	2925:17	2925:17	17	buff2
FIELD	2925:17	2925:17	18	buff2
LEAF_NODE	2925:17	2925:17	19	buff2
LEAF_NODE	2925:23	2925:23	17	|
BIT_OR_ELEM	2925:25	2925:45	17	( buff1 >> ready_bits )
LEAF_NODE	2925:25	2925:25	18	(
FIELD	2925:26	2925:26	18	buff1
LEAF_NODE	2925:26	2925:26	19	buff1
LEAF_NODE	2925:32	2925:32	18	>>
FIELD	2925:35	2925:35	18	ready_bits
LEAF_NODE	2925:35	2925:35	19	ready_bits
LEAF_NODE	2925:45	2925:45	18	)
LEAF_NODE	2925:46	2925:46	16	)
LEAF_NODE	2925:47	2925:47	13	;
LEAF_NODE	2926:8	2926:8	11	}
SELECTION	2927:6	2928:8	9	
KEYWORD	2927:6	2927:6	10	else
LEAF_NODE	2927:6	2927:6	11	else
STATEMENTS	2928:8	2934:8	10	
LEAF_NODE	2928:8	2928:8	11	{
STATEMENTS	2929:8	2933:8	11	
EXPR_STATEMENT	2929:8	2929:31	12	bytebuff = ( buff2 >> 8 ) ;
EXPR	2929:8	2929:8	13	bytebuff = ( buff2 >> 8 )
ASSIGN	2929:8	2929:19	14	bytebuff = ( buff2 >> 8 )
LVAL	2929:8	2929:8	15	bytebuff
FIELD	2929:8	2929:8	16	bytebuff
LEAF_NODE	2929:8	2929:8	17	bytebuff
ASSIGN_OP	2929:17	2929:17	15	=
LEAF_NODE	2929:17	2929:17	16	=
RVAL	2929:19	2929:30	15	( buff2 >> 8 )
LEAF_NODE	2929:19	2929:19	16	(
FIELD	2929:20	2929:20	16	buff2
LEAF_NODE	2929:20	2929:20	17	buff2
LEAF_NODE	2929:26	2929:26	16	>>
FIELD	2929:29	2929:29	16	8
LEAF_NODE	2929:29	2929:29	17	8
LEAF_NODE	2929:30	2929:30	16	)
LEAF_NODE	2929:31	2929:31	13	;
EXPR_STATEMENT	2930:8	2930:25	12	* dst ++ = bytebuff ;
EXPR	2930:8	2930:8	13	* dst ++ = bytebuff
ASSIGN	2930:8	2930:17	14	* dst ++ = bytebuff
LVAL	2930:8	2930:8	15	* dst ++
UNARY_EXPR	2930:8	2930:9	16	* dst ++
UNARY_OPERATOR	2930:8	2930:8	17	*
LEAF_NODE	2930:8	2930:8	18	*
FIELD	2930:9	2930:12	17	dst ++
LEAF_NODE	2930:9	2930:9	18	dst
LEAF_NODE	2930:12	2930:12	18	++
ASSIGN_OP	2930:15	2930:15	15	=
LEAF_NODE	2930:15	2930:15	16	=
RVAL	2930:17	2930:17	15	bytebuff
FIELD	2930:17	2930:17	16	bytebuff
LEAF_NODE	2930:17	2930:17	17	bytebuff
LEAF_NODE	2930:25	2930:25	13	;
EXPR_STATEMENT	2931:8	2931:23	12	ready_bits -= 8 ;
EXPR	2931:8	2931:8	13	ready_bits -= 8
ASSIGN	2931:8	2931:22	14	ready_bits -= 8
LVAL	2931:8	2931:8	15	ready_bits
FIELD	2931:8	2931:8	16	ready_bits
LEAF_NODE	2931:8	2931:8	17	ready_bits
ASSIGN_OP	2931:19	2931:19	15	-=
LEAF_NODE	2931:19	2931:19	16	-=
RVAL	2931:22	2931:22	15	8
FIELD	2931:22	2931:22	16	8
LEAF_NODE	2931:22	2931:22	17	8
LEAF_NODE	2931:23	2931:23	13	;
EXPR_STATEMENT	2933:8	2933:54	12	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) ) ;
EXPR	2933:8	2933:8	13	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
ASSIGN	2933:8	2933:16	14	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LVAL	2933:8	2933:8	15	buff2
FIELD	2933:8	2933:8	16	buff2
LEAF_NODE	2933:8	2933:8	17	buff2
ASSIGN_OP	2933:14	2933:14	15	=
LEAF_NODE	2933:14	2933:14	16	=
RVAL	2933:16	2933:53	15	( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	2933:16	2933:16	16	(
BIT_OR	2933:17	2933:32	16	( buff2 << 8 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	2933:17	2933:28	17	( buff2 << 8 )
LEAF_NODE	2933:17	2933:17	18	(
FIELD	2933:18	2933:18	18	buff2
LEAF_NODE	2933:18	2933:18	19	buff2
LEAF_NODE	2933:24	2933:24	18	<<
FIELD	2933:27	2933:27	18	8
LEAF_NODE	2933:27	2933:27	19	8
LEAF_NODE	2933:28	2933:28	18	)
LEAF_NODE	2933:30	2933:30	17	|
BIT_OR_ELEM	2933:32	2933:52	17	( buff1 >> ready_bits )
LEAF_NODE	2933:32	2933:32	18	(
FIELD	2933:33	2933:33	18	buff1
LEAF_NODE	2933:33	2933:33	19	buff1
LEAF_NODE	2933:39	2933:39	18	>>
FIELD	2933:42	2933:42	18	ready_bits
LEAF_NODE	2933:42	2933:42	19	ready_bits
LEAF_NODE	2933:52	2933:52	18	)
LEAF_NODE	2933:53	2933:53	16	)
LEAF_NODE	2933:54	2933:54	13	;
LEAF_NODE	2934:8	2934:8	11	}
EXPR_STATEMENT	2935:6	2935:23	9	ready_bits += bps ;
EXPR	2935:6	2935:6	10	ready_bits += bps
ASSIGN	2935:6	2935:20	11	ready_bits += bps
LVAL	2935:6	2935:6	12	ready_bits
FIELD	2935:6	2935:6	13	ready_bits
LEAF_NODE	2935:6	2935:6	14	ready_bits
ASSIGN_OP	2935:17	2935:17	12	+=
LEAF_NODE	2935:17	2935:17	13	+=
RVAL	2935:20	2935:20	12	bps
FIELD	2935:20	2935:20	13	bps
LEAF_NODE	2935:20	2935:20	14	bps
LEAF_NODE	2935:23	2935:23	10	;
LEAF_NODE	2936:6	2936:6	8	}
LEAF_NODE	2937:4	2937:4	5	}
ITERATION	2940:2	2941:4	3	
KEYWORD	2940:2	2940:2	4	while
LEAF_NODE	2940:2	2940:2	5	while
LEAF_NODE	2940:8	2940:8	4	(
CONDITION	2940:9	2940:9	4	ready_bits > 0
EXPR	2940:9	2940:22	5	ready_bits > 0
FIELD	2940:9	2940:9	6	ready_bits
LEAF_NODE	2940:9	2940:9	7	ready_bits
REL_OPERATOR	2940:20	2940:20	6	>
LEAF_NODE	2940:20	2940:20	7	>
FIELD	2940:22	2940:22	6	0
LEAF_NODE	2940:22	2940:22	7	0
LEAF_NODE	2940:23	2940:23	4	)
STATEMENTS	2941:4	2945:4	4	
LEAF_NODE	2941:4	2941:4	5	{
STATEMENTS	2942:4	2944:4	5	
EXPR_STATEMENT	2942:4	2942:27	6	bytebuff = ( buff2 >> 8 ) ;
EXPR	2942:4	2942:4	7	bytebuff = ( buff2 >> 8 )
ASSIGN	2942:4	2942:15	8	bytebuff = ( buff2 >> 8 )
LVAL	2942:4	2942:4	9	bytebuff
FIELD	2942:4	2942:4	10	bytebuff
LEAF_NODE	2942:4	2942:4	11	bytebuff
ASSIGN_OP	2942:13	2942:13	9	=
LEAF_NODE	2942:13	2942:13	10	=
RVAL	2942:15	2942:26	9	( buff2 >> 8 )
LEAF_NODE	2942:15	2942:15	10	(
FIELD	2942:16	2942:16	10	buff2
LEAF_NODE	2942:16	2942:16	11	buff2
LEAF_NODE	2942:22	2942:22	10	>>
FIELD	2942:25	2942:25	10	8
LEAF_NODE	2942:25	2942:25	11	8
LEAF_NODE	2942:26	2942:26	10	)
LEAF_NODE	2942:27	2942:27	7	;
EXPR_STATEMENT	2943:4	2943:21	6	* dst ++ = bytebuff ;
EXPR	2943:4	2943:4	7	* dst ++ = bytebuff
ASSIGN	2943:4	2943:13	8	* dst ++ = bytebuff
LVAL	2943:4	2943:4	9	* dst ++
UNARY_EXPR	2943:4	2943:5	10	* dst ++
UNARY_OPERATOR	2943:4	2943:4	11	*
LEAF_NODE	2943:4	2943:4	12	*
FIELD	2943:5	2943:8	11	dst ++
LEAF_NODE	2943:5	2943:5	12	dst
LEAF_NODE	2943:8	2943:8	12	++
ASSIGN_OP	2943:11	2943:11	9	=
LEAF_NODE	2943:11	2943:11	10	=
RVAL	2943:13	2943:13	9	bytebuff
FIELD	2943:13	2943:13	10	bytebuff
LEAF_NODE	2943:13	2943:13	11	bytebuff
LEAF_NODE	2943:21	2943:21	7	;
EXPR_STATEMENT	2944:4	2944:19	6	ready_bits -= 8 ;
EXPR	2944:4	2944:4	7	ready_bits -= 8
ASSIGN	2944:4	2944:18	8	ready_bits -= 8
LVAL	2944:4	2944:4	9	ready_bits
FIELD	2944:4	2944:4	10	ready_bits
LEAF_NODE	2944:4	2944:4	11	ready_bits
ASSIGN_OP	2944:15	2944:15	9	-=
LEAF_NODE	2944:15	2944:15	10	-=
RVAL	2944:18	2944:18	9	8
FIELD	2944:18	2944:18	10	8
LEAF_NODE	2944:18	2944:18	11	8
LEAF_NODE	2944:19	2944:19	7	;
LEAF_NODE	2945:4	2945:4	5	}
JUMP_STATEMENT	2947:2	2947:12	3	return ( 0 ) ;
KEYWORD	2947:2	2947:2	4	return
LEAF_NODE	2947:2	2947:2	5	return
DESTINATION	2947:9	2947:9	4	( 0 )
EXPR	2947:9	2947:11	5	( 0 )
LEAF_NODE	2947:9	2947:9	6	(
FIELD	2947:10	2947:10	6	0
LEAF_NODE	2947:10	2947:10	7	0
LEAF_NODE	2947:11	2947:11	6	)
LEAF_NODE	2947:12	2947:12	4	;
LEAF_NODE	2948:2	2948:2	2	}
FUNCTION_DEF	2951:0	3042:2	1	
RETURN_TYPE	2951:0	2951:7	2	static int
LEAF_NODE	2951:0	2951:0	3	static
TYPE_NAME	2951:7	2951:7	3	int
LEAF_NODE	2951:7	2951:7	4	int
FUNCTION_NAME	2952:0	2952:0	2	extractContigSamples24bits
LEAF_NODE	2952:0	2952:0	3	extractContigSamples24bits
PARAMETER_LIST	2952:27	2954:69	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end )
LEAF_NODE	2952:27	2952:27	3	(
PARAMETER_DECL	2952:28	2952:35	3	uint8 * in
TYPE	2952:28	2952:34	4	uint8 *
TYPE_NAME	2952:28	2952:28	5	uint8
LEAF_NODE	2952:28	2952:28	6	uint8
POINTER	2952:34	2952:34	5	*
LEAF_NODE	2952:34	2952:34	6	*
NAME	2952:35	2952:35	4	in
LEAF_NODE	2952:35	2952:35	5	in
LEAF_NODE	2952:37	2952:37	3	,
PARAMETER_DECL	2952:39	2952:46	3	uint8 * out
TYPE	2952:39	2952:45	4	uint8 *
TYPE_NAME	2952:39	2952:39	5	uint8
LEAF_NODE	2952:39	2952:39	6	uint8
POINTER	2952:45	2952:45	5	*
LEAF_NODE	2952:45	2952:45	6	*
NAME	2952:46	2952:46	4	out
LEAF_NODE	2952:46	2952:46	5	out
LEAF_NODE	2952:49	2952:49	3	,
PARAMETER_DECL	2952:51	2952:58	3	uint32 cols
TYPE	2952:51	2952:51	4	uint32
TYPE_NAME	2952:51	2952:51	5	uint32
LEAF_NODE	2952:51	2952:51	6	uint32
NAME	2952:58	2952:58	4	cols
LEAF_NODE	2952:58	2952:58	5	cols
LEAF_NODE	2952:62	2952:62	3	,
PARAMETER_DECL	2953:22	2953:32	3	tsample_t sample
TYPE	2953:22	2953:22	4	tsample_t
TYPE_NAME	2953:22	2953:22	5	tsample_t
LEAF_NODE	2953:22	2953:22	6	tsample_t
NAME	2953:32	2953:32	4	sample
LEAF_NODE	2953:32	2953:32	5	sample
LEAF_NODE	2953:38	2953:38	3	,
PARAMETER_DECL	2953:40	2953:47	3	uint16 spp
TYPE	2953:40	2953:40	4	uint16
TYPE_NAME	2953:40	2953:40	5	uint16
LEAF_NODE	2953:40	2953:40	6	uint16
NAME	2953:47	2953:47	4	spp
LEAF_NODE	2953:47	2953:47	5	spp
LEAF_NODE	2953:50	2953:50	3	,
PARAMETER_DECL	2953:52	2953:59	3	uint16 bps
TYPE	2953:52	2953:52	4	uint16
TYPE_NAME	2953:52	2953:52	5	uint16
LEAF_NODE	2953:52	2953:52	6	uint16
NAME	2953:59	2953:59	4	bps
LEAF_NODE	2953:59	2953:59	5	bps
LEAF_NODE	2953:62	2953:62	3	,
PARAMETER_DECL	2954:28	2954:38	3	tsample_t count
TYPE	2954:28	2954:28	4	tsample_t
TYPE_NAME	2954:28	2954:28	5	tsample_t
LEAF_NODE	2954:28	2954:28	6	tsample_t
NAME	2954:38	2954:38	4	count
LEAF_NODE	2954:38	2954:38	5	count
LEAF_NODE	2954:43	2954:43	3	,
PARAMETER_DECL	2954:45	2954:52	3	uint32 start
TYPE	2954:45	2954:45	4	uint32
TYPE_NAME	2954:45	2954:45	5	uint32
LEAF_NODE	2954:45	2954:45	6	uint32
NAME	2954:52	2954:52	4	start
LEAF_NODE	2954:52	2954:52	5	start
LEAF_NODE	2954:57	2954:57	3	,
PARAMETER_DECL	2954:59	2954:66	3	uint32 end
TYPE	2954:59	2954:59	4	uint32
TYPE_NAME	2954:59	2954:59	5	uint32
LEAF_NODE	2954:59	2954:59	6	uint32
NAME	2954:66	2954:66	4	end
LEAF_NODE	2954:66	2954:66	5	end
LEAF_NODE	2954:69	2954:69	3	)
LEAF_NODE	2955:2	2955:2	2	{
STATEMENTS	2956:2	3041:2	2	
SIMPLE_DECL	2956:2	2956:35	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	2956:2	2956:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	2956:2	2956:9	5	int ready_bits ; ready_bits = 0
TYPE	2956:2	2956:2	6	int
TYPE_NAME	2956:2	2956:2	7	int
LEAF_NODE	2956:2	2956:2	8	int
NAME	2956:9	2956:9	6	ready_bits
LEAF_NODE	2956:9	2956:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	2956:9	2956:9	6	ready_bits = 0
ASSIGN	2956:9	2956:22	7	ready_bits = 0
LVAL	2956:9	2956:9	8	ready_bits
NAME	2956:9	2956:9	9	ready_bits
LEAF_NODE	2956:9	2956:9	10	ready_bits
ASSIGN_OP	2956:20	2956:20	8	=
LEAF_NODE	2956:20	2956:20	9	=
RVAL	2956:22	2956:22	8	0
FIELD	2956:22	2956:22	9	0
LEAF_NODE	2956:22	2956:22	10	0
LEAF_NODE	2956:23	2956:23	5	,
VAR_DECL	2956:2	2956:25	5	int sindex ; sindex = 0
TYPE	2956:2	2956:2	6	int
TYPE_NAME	2956:2	2956:2	7	int
LEAF_NODE	2956:2	2956:2	8	int
NAME	2956:25	2956:25	6	sindex
LEAF_NODE	2956:25	2956:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	2956:25	2956:25	6	sindex = 0
ASSIGN	2956:25	2956:34	7	sindex = 0
LVAL	2956:25	2956:25	8	sindex
NAME	2956:25	2956:25	9	sindex
LEAF_NODE	2956:25	2956:25	10	sindex
ASSIGN_OP	2956:32	2956:32	8	=
LEAF_NODE	2956:32	2956:32	9	=
RVAL	2956:34	2956:34	8	0
FIELD	2956:34	2956:34	9	0
LEAF_NODE	2956:34	2956:34	10	0
LEAF_NODE	2956:35	2956:35	4	;
SIMPLE_DECL	2957:2	2957:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	2957:2	2957:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	2957:2	2957:9	5	uint32 col
TYPE	2957:2	2957:2	6	uint32
TYPE_NAME	2957:2	2957:2	7	uint32
LEAF_NODE	2957:2	2957:2	8	uint32
NAME	2957:9	2957:9	6	col
LEAF_NODE	2957:9	2957:9	7	col
LEAF_NODE	2957:12	2957:12	5	,
INIT_DECL_LIST	2957:2	2957:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	2957:2	2957:14	6	uint32 src_byte
TYPE	2957:2	2957:2	7	uint32
TYPE_NAME	2957:2	2957:2	8	uint32
LEAF_NODE	2957:2	2957:2	9	uint32
NAME	2957:14	2957:14	7	src_byte
LEAF_NODE	2957:14	2957:14	8	src_byte
LEAF_NODE	2957:22	2957:22	6	,
INIT_DECL_LIST	2957:2	2957:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	2957:2	2957:24	7	uint32 src_bit
TYPE	2957:2	2957:2	8	uint32
TYPE_NAME	2957:2	2957:2	9	uint32
LEAF_NODE	2957:2	2957:2	10	uint32
NAME	2957:24	2957:24	8	src_bit
LEAF_NODE	2957:24	2957:24	9	src_bit
LEAF_NODE	2957:31	2957:31	7	,
VAR_DECL	2957:2	2957:33	7	uint32 bit_offset
TYPE	2957:2	2957:2	8	uint32
TYPE_NAME	2957:2	2957:2	9	uint32
LEAF_NODE	2957:2	2957:2	10	uint32
NAME	2957:33	2957:33	8	bit_offset
LEAF_NODE	2957:33	2957:33	9	bit_offset
LEAF_NODE	2957:43	2957:43	4	;
SIMPLE_DECL	2958:2	2958:36	3	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	2958:2	2958:2	4	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0
VAR_DECL	2958:2	2958:9	5	uint32 maskbits ; maskbits = 0
TYPE	2958:2	2958:2	6	uint32
TYPE_NAME	2958:2	2958:2	7	uint32
LEAF_NODE	2958:2	2958:2	8	uint32
NAME	2958:9	2958:9	6	maskbits
LEAF_NODE	2958:9	2958:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	2958:9	2958:9	6	maskbits = 0
ASSIGN	2958:9	2958:20	7	maskbits = 0
LVAL	2958:9	2958:9	8	maskbits
NAME	2958:9	2958:9	9	maskbits
LEAF_NODE	2958:9	2958:9	10	maskbits
ASSIGN_OP	2958:18	2958:18	8	=
LEAF_NODE	2958:18	2958:18	9	=
RVAL	2958:20	2958:20	8	0
FIELD	2958:20	2958:20	9	0
LEAF_NODE	2958:20	2958:20	10	0
LEAF_NODE	2958:21	2958:21	5	,
VAR_DECL	2958:2	2958:23	5	uint32 matchbits ; matchbits = 0
TYPE	2958:2	2958:2	6	uint32
TYPE_NAME	2958:2	2958:2	7	uint32
LEAF_NODE	2958:2	2958:2	8	uint32
NAME	2958:23	2958:23	6	matchbits
LEAF_NODE	2958:23	2958:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	2958:23	2958:23	6	matchbits = 0
ASSIGN	2958:23	2958:35	7	matchbits = 0
LVAL	2958:23	2958:23	8	matchbits
NAME	2958:23	2958:23	9	matchbits
LEAF_NODE	2958:23	2958:23	10	matchbits
ASSIGN_OP	2958:33	2958:33	8	=
LEAF_NODE	2958:33	2958:33	9	=
RVAL	2958:35	2958:35	8	0
FIELD	2958:35	2958:35	9	0
LEAF_NODE	2958:35	2958:35	10	0
LEAF_NODE	2958:36	2958:36	4	;
SIMPLE_DECL	2959:2	2959:29	3	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	2959:2	2959:2	4	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0
VAR_DECL	2959:2	2959:9	5	uint32 buff1 ; buff1 = 0
TYPE	2959:2	2959:2	6	uint32
TYPE_NAME	2959:2	2959:2	7	uint32
LEAF_NODE	2959:2	2959:2	8	uint32
NAME	2959:9	2959:9	6	buff1
LEAF_NODE	2959:9	2959:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	2959:9	2959:9	6	buff1 = 0
ASSIGN	2959:9	2959:17	7	buff1 = 0
LVAL	2959:9	2959:9	8	buff1
NAME	2959:9	2959:9	9	buff1
LEAF_NODE	2959:9	2959:9	10	buff1
ASSIGN_OP	2959:15	2959:15	8	=
LEAF_NODE	2959:15	2959:15	9	=
RVAL	2959:17	2959:17	8	0
FIELD	2959:17	2959:17	9	0
LEAF_NODE	2959:17	2959:17	10	0
LEAF_NODE	2959:18	2959:18	5	,
VAR_DECL	2959:2	2959:20	5	uint32 buff2 ; buff2 = 0
TYPE	2959:2	2959:2	6	uint32
TYPE_NAME	2959:2	2959:2	7	uint32
LEAF_NODE	2959:2	2959:2	8	uint32
NAME	2959:20	2959:20	6	buff2
LEAF_NODE	2959:20	2959:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	2959:20	2959:20	6	buff2 = 0
ASSIGN	2959:20	2959:28	7	buff2 = 0
LVAL	2959:20	2959:20	8	buff2
NAME	2959:20	2959:20	9	buff2
LEAF_NODE	2959:20	2959:20	10	buff2
ASSIGN_OP	2959:26	2959:26	8	=
LEAF_NODE	2959:26	2959:26	9	=
RVAL	2959:28	2959:28	8	0
FIELD	2959:28	2959:28	9	0
LEAF_NODE	2959:28	2959:28	10	0
LEAF_NODE	2959:29	2959:29	4	;
SIMPLE_DECL	2960:2	2960:37	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 ;
INIT_DECL_LIST	2960:2	2960:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0
VAR_DECL	2960:2	2960:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	2960:2	2960:2	6	uint8
TYPE_NAME	2960:2	2960:2	7	uint8
LEAF_NODE	2960:2	2960:2	8	uint8
NAME	2960:9	2960:9	6	bytebuff1
LEAF_NODE	2960:9	2960:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	2960:9	2960:9	6	bytebuff1 = 0
ASSIGN	2960:9	2960:21	7	bytebuff1 = 0
LVAL	2960:9	2960:9	8	bytebuff1
NAME	2960:9	2960:9	9	bytebuff1
LEAF_NODE	2960:9	2960:9	10	bytebuff1
ASSIGN_OP	2960:19	2960:19	8	=
LEAF_NODE	2960:19	2960:19	9	=
RVAL	2960:21	2960:21	8	0
FIELD	2960:21	2960:21	9	0
LEAF_NODE	2960:21	2960:21	10	0
LEAF_NODE	2960:22	2960:22	5	,
VAR_DECL	2960:2	2960:24	5	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	2960:2	2960:2	6	uint8
TYPE_NAME	2960:2	2960:2	7	uint8
LEAF_NODE	2960:2	2960:2	8	uint8
NAME	2960:24	2960:24	6	bytebuff2
LEAF_NODE	2960:24	2960:24	7	bytebuff2
LEAF_NODE	0:0	0:0	6	;
INIT	2960:24	2960:24	6	bytebuff2 = 0
ASSIGN	2960:24	2960:36	7	bytebuff2 = 0
LVAL	2960:24	2960:24	8	bytebuff2
NAME	2960:24	2960:24	9	bytebuff2
LEAF_NODE	2960:24	2960:24	10	bytebuff2
ASSIGN_OP	2960:34	2960:34	8	=
LEAF_NODE	2960:34	2960:34	9	=
RVAL	2960:36	2960:36	8	0
FIELD	2960:36	2960:36	9	0
LEAF_NODE	2960:36	2960:36	10	0
LEAF_NODE	2960:37	2960:37	4	;
SIMPLE_DECL	2961:2	2961:17	3	uint8 * src ; src = in ;
VAR_DECL	2961:2	2961:9	4	uint8 * src ; src = in
TYPE	2961:2	2961:8	5	uint8 *
TYPE_NAME	2961:2	2961:2	6	uint8
LEAF_NODE	2961:2	2961:2	7	uint8
POINTER	2961:8	2961:8	6	*
LEAF_NODE	2961:8	2961:8	7	*
NAME	2961:9	2961:9	5	src
LEAF_NODE	2961:9	2961:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	2961:9	2961:9	5	src = in
ASSIGN	2961:9	2961:15	6	src = in
LVAL	2961:9	2961:9	7	src
NAME	2961:9	2961:9	8	src
LEAF_NODE	2961:9	2961:9	9	src
ASSIGN_OP	2961:13	2961:13	7	=
LEAF_NODE	2961:13	2961:13	8	=
RVAL	2961:15	2961:15	7	in
FIELD	2961:15	2961:15	8	in
LEAF_NODE	2961:15	2961:15	9	in
LEAF_NODE	2961:17	2961:17	4	;
SIMPLE_DECL	2962:2	2962:18	3	uint8 * dst ; dst = out ;
VAR_DECL	2962:2	2962:9	4	uint8 * dst ; dst = out
TYPE	2962:2	2962:8	5	uint8 *
TYPE_NAME	2962:2	2962:2	6	uint8
LEAF_NODE	2962:2	2962:2	7	uint8
POINTER	2962:8	2962:8	6	*
LEAF_NODE	2962:8	2962:8	7	*
NAME	2962:9	2962:9	5	dst
LEAF_NODE	2962:9	2962:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	2962:9	2962:9	5	dst = out
ASSIGN	2962:9	2962:15	6	dst = out
LVAL	2962:9	2962:9	7	dst
NAME	2962:9	2962:9	8	dst
LEAF_NODE	2962:9	2962:9	9	dst
ASSIGN_OP	2962:13	2962:13	7	=
LEAF_NODE	2962:13	2962:13	8	=
RVAL	2962:15	2962:15	7	out
FIELD	2962:15	2962:15	8	out
LEAF_NODE	2962:15	2962:15	9	out
LEAF_NODE	2962:18	2962:18	4	;
SELECTION	2964:2	2965:4	3	
KEYWORD	2964:2	2964:2	4	if
LEAF_NODE	2964:2	2964:2	5	if
LEAF_NODE	2964:5	2964:5	4	(
CONDITION	2964:6	2964:6	4	( in == NULL ) || ( out == NULL )
EXPR	2964:6	2964:6	5	( in == NULL ) || ( out == NULL )
OR	2964:6	2964:22	6	( in == NULL ) || ( out == NULL )
EXPR	2964:6	2964:17	7	( in == NULL )
LEAF_NODE	2964:6	2964:6	8	(
FIELD	2964:7	2964:7	8	in
LEAF_NODE	2964:7	2964:7	9	in
EQ_OPERATOR	2964:10	2964:10	8	==
LEAF_NODE	2964:10	2964:10	9	==
FIELD	2964:13	2964:13	8	NULL
LEAF_NODE	2964:13	2964:13	9	NULL
LEAF_NODE	2964:17	2964:17	8	)
LEAF_NODE	2964:19	2964:19	7	||
EXPR	2964:22	2964:34	7	( out == NULL )
LEAF_NODE	2964:22	2964:22	8	(
FIELD	2964:23	2964:23	8	out
LEAF_NODE	2964:23	2964:23	9	out
EQ_OPERATOR	2964:27	2964:27	8	==
LEAF_NODE	2964:27	2964:27	9	==
FIELD	2964:30	2964:30	8	NULL
LEAF_NODE	2964:30	2964:30	9	NULL
LEAF_NODE	2964:34	2964:34	8	)
LEAF_NODE	2964:35	2964:35	4	)
STATEMENTS	2965:4	2968:4	4	
LEAF_NODE	2965:4	2965:4	5	{
STATEMENTS	2966:4	2967:4	5	
EXPR_STATEMENT	2966:4	2966:76	6	TIFFError ( "extractContigSamples24bits" , "Invalid input or output buffer" ) ;
EXPR	2966:4	2966:4	7	TIFFError ( "extractContigSamples24bits" , "Invalid input or output buffer" )
FUNCTION_CALL	2966:4	2966:75	8	TIFFError ( "extractContigSamples24bits" , "Invalid input or output buffer" )
CALLEE	2966:4	2966:4	9	TIFFError
LEAF_NODE	2966:4	2966:4	10	TIFFError
LEAF_NODE	2966:13	2966:13	9	(
ARGUMENT	2966:14	2966:14	9	"extractContigSamples24bits"
FIELD	2966:14	2966:14	10	"extractContigSamples24bits"
LEAF_NODE	2966:14	2966:14	11	"extractContigSamples24bits"
LEAF_NODE	2966:42	2966:42	9	,
ARGUMENT	2966:43	2966:43	9	"Invalid input or output buffer"
FIELD	2966:43	2966:43	10	"Invalid input or output buffer"
LEAF_NODE	2966:43	2966:43	11	"Invalid input or output buffer"
LEAF_NODE	2966:75	2966:75	9	)
LEAF_NODE	2966:76	2966:76	7	;
JUMP_STATEMENT	2967:4	2967:14	6	return ( 1 ) ;
KEYWORD	2967:4	2967:4	7	return
LEAF_NODE	2967:4	2967:4	8	return
DESTINATION	2967:11	2967:11	7	( 1 )
EXPR	2967:11	2967:13	8	( 1 )
LEAF_NODE	2967:11	2967:11	9	(
FIELD	2967:12	2967:12	9	1
LEAF_NODE	2967:12	2967:12	10	1
LEAF_NODE	2967:13	2967:13	9	)
LEAF_NODE	2967:14	2967:14	7	;
LEAF_NODE	2968:4	2968:4	5	}
SELECTION	2970:2	2971:4	3	
KEYWORD	2970:2	2970:2	4	if
LEAF_NODE	2970:2	2970:2	5	if
LEAF_NODE	2970:5	2970:5	4	(
CONDITION	2970:6	2970:6	4	( start > end ) || ( start > cols )
EXPR	2970:6	2970:6	5	( start > end ) || ( start > cols )
OR	2970:6	2970:23	6	( start > end ) || ( start > cols )
EXPR	2970:6	2970:18	7	( start > end )
LEAF_NODE	2970:6	2970:6	8	(
FIELD	2970:7	2970:7	8	start
LEAF_NODE	2970:7	2970:7	9	start
REL_OPERATOR	2970:13	2970:13	8	>
LEAF_NODE	2970:13	2970:13	9	>
FIELD	2970:15	2970:15	8	end
LEAF_NODE	2970:15	2970:15	9	end
LEAF_NODE	2970:18	2970:18	8	)
LEAF_NODE	2970:20	2970:20	7	||
EXPR	2970:23	2970:36	7	( start > cols )
LEAF_NODE	2970:23	2970:23	8	(
FIELD	2970:24	2970:24	8	start
LEAF_NODE	2970:24	2970:24	9	start
REL_OPERATOR	2970:30	2970:30	8	>
LEAF_NODE	2970:30	2970:30	9	>
FIELD	2970:32	2970:32	8	cols
LEAF_NODE	2970:32	2970:32	9	cols
LEAF_NODE	2970:36	2970:36	8	)
LEAF_NODE	2970:37	2970:37	4	)
STATEMENTS	2971:4	2975:4	4	
LEAF_NODE	2971:4	2971:4	5	{
STATEMENTS	2972:4	2974:4	5	
EXPR_STATEMENT	2972:4	2973:62	6	TIFFError ( "extractContigSamples24bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	2972:4	2972:4	7	TIFFError ( "extractContigSamples24bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	2972:4	2973:61	8	TIFFError ( "extractContigSamples24bits" , "Invalid start column value %d ignored" , start )
CALLEE	2972:4	2972:4	9	TIFFError
LEAF_NODE	2972:4	2972:4	10	TIFFError
LEAF_NODE	2972:14	2972:14	9	(
ARGUMENT	2972:15	2972:15	9	"extractContigSamples24bits"
FIELD	2972:15	2972:15	10	"extractContigSamples24bits"
LEAF_NODE	2972:15	2972:15	11	"extractContigSamples24bits"
LEAF_NODE	2972:43	2972:43	9	,
ARGUMENT	2973:15	2973:15	9	"Invalid start column value %d ignored"
FIELD	2973:15	2973:15	10	"Invalid start column value %d ignored"
LEAF_NODE	2973:15	2973:15	11	"Invalid start column value %d ignored"
LEAF_NODE	2973:54	2973:54	9	,
ARGUMENT	2973:56	2973:56	9	start
FIELD	2973:56	2973:56	10	start
LEAF_NODE	2973:56	2973:56	11	start
LEAF_NODE	2973:61	2973:61	9	)
LEAF_NODE	2973:62	2973:62	7	;
EXPR_STATEMENT	2974:4	2974:13	6	start = 0 ;
EXPR	2974:4	2974:4	7	start = 0
ASSIGN	2974:4	2974:12	8	start = 0
LVAL	2974:4	2974:4	9	start
FIELD	2974:4	2974:4	10	start
LEAF_NODE	2974:4	2974:4	11	start
ASSIGN_OP	2974:10	2974:10	9	=
LEAF_NODE	2974:10	2974:10	10	=
RVAL	2974:12	2974:12	9	0
FIELD	2974:12	2974:12	10	0
LEAF_NODE	2974:12	2974:12	11	0
LEAF_NODE	2974:13	2974:13	7	;
LEAF_NODE	2975:4	2975:4	5	}
SELECTION	2976:2	2977:4	3	
KEYWORD	2976:2	2976:2	4	if
LEAF_NODE	2976:2	2976:2	5	if
LEAF_NODE	2976:5	2976:5	4	(
CONDITION	2976:6	2976:6	4	( end == 0 ) || ( end > cols )
EXPR	2976:6	2976:6	5	( end == 0 ) || ( end > cols )
OR	2976:6	2976:20	6	( end == 0 ) || ( end > cols )
EXPR	2976:6	2976:15	7	( end == 0 )
LEAF_NODE	2976:6	2976:6	8	(
FIELD	2976:7	2976:7	8	end
LEAF_NODE	2976:7	2976:7	9	end
EQ_OPERATOR	2976:11	2976:11	8	==
LEAF_NODE	2976:11	2976:11	9	==
FIELD	2976:14	2976:14	8	0
LEAF_NODE	2976:14	2976:14	9	0
LEAF_NODE	2976:15	2976:15	8	)
LEAF_NODE	2976:17	2976:17	7	||
EXPR	2976:20	2976:31	7	( end > cols )
LEAF_NODE	2976:20	2976:20	8	(
FIELD	2976:21	2976:21	8	end
LEAF_NODE	2976:21	2976:21	9	end
REL_OPERATOR	2976:25	2976:25	8	>
LEAF_NODE	2976:25	2976:25	9	>
FIELD	2976:27	2976:27	8	cols
LEAF_NODE	2976:27	2976:27	9	cols
LEAF_NODE	2976:31	2976:31	8	)
LEAF_NODE	2976:32	2976:32	4	)
STATEMENTS	2977:4	2981:4	4	
LEAF_NODE	2977:4	2977:4	5	{
STATEMENTS	2978:4	2980:4	5	
EXPR_STATEMENT	2978:4	2979:58	6	TIFFError ( "extractContigSamples24bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	2978:4	2978:4	7	TIFFError ( "extractContigSamples24bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	2978:4	2979:57	8	TIFFError ( "extractContigSamples24bits" , "Invalid end column value %d ignored" , end )
CALLEE	2978:4	2978:4	9	TIFFError
LEAF_NODE	2978:4	2978:4	10	TIFFError
LEAF_NODE	2978:14	2978:14	9	(
ARGUMENT	2978:15	2978:15	9	"extractContigSamples24bits"
FIELD	2978:15	2978:15	10	"extractContigSamples24bits"
LEAF_NODE	2978:15	2978:15	11	"extractContigSamples24bits"
LEAF_NODE	2978:43	2978:43	9	,
ARGUMENT	2979:15	2979:15	9	"Invalid end column value %d ignored"
FIELD	2979:15	2979:15	10	"Invalid end column value %d ignored"
LEAF_NODE	2979:15	2979:15	11	"Invalid end column value %d ignored"
LEAF_NODE	2979:52	2979:52	9	,
ARGUMENT	2979:54	2979:54	9	end
FIELD	2979:54	2979:54	10	end
LEAF_NODE	2979:54	2979:54	11	end
LEAF_NODE	2979:57	2979:57	9	)
LEAF_NODE	2979:58	2979:58	7	;
EXPR_STATEMENT	2980:4	2980:14	6	end = cols ;
EXPR	2980:4	2980:4	7	end = cols
ASSIGN	2980:4	2980:10	8	end = cols
LVAL	2980:4	2980:4	9	end
FIELD	2980:4	2980:4	10	end
LEAF_NODE	2980:4	2980:4	11	end
ASSIGN_OP	2980:8	2980:8	9	=
LEAF_NODE	2980:8	2980:8	10	=
RVAL	2980:10	2980:10	9	cols
FIELD	2980:10	2980:10	10	cols
LEAF_NODE	2980:10	2980:10	11	cols
LEAF_NODE	2980:14	2980:14	7	;
LEAF_NODE	2981:4	2981:4	5	}
EXPR_STATEMENT	2983:2	2983:16	3	ready_bits = 0 ;
EXPR	2983:2	2983:2	4	ready_bits = 0
ASSIGN	2983:2	2983:15	5	ready_bits = 0
LVAL	2983:2	2983:2	6	ready_bits
FIELD	2983:2	2983:2	7	ready_bits
LEAF_NODE	2983:2	2983:2	8	ready_bits
ASSIGN_OP	2983:13	2983:13	6	=
LEAF_NODE	2983:13	2983:13	7	=
RVAL	2983:15	2983:15	6	0
FIELD	2983:15	2983:15	7	0
LEAF_NODE	2983:15	2983:15	8	0
LEAF_NODE	2983:16	2983:16	4	;
EXPR_STATEMENT	2984:2	2984:39	3	maskbits = ( uint32 ) - 1 >> ( 32 - bps ) ;
EXPR	2984:2	2984:2	4	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
ASSIGN	2984:2	2984:14	5	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
LVAL	2984:2	2984:2	6	maskbits
FIELD	2984:2	2984:2	7	maskbits
LEAF_NODE	2984:2	2984:2	8	maskbits
ASSIGN_OP	2984:11	2984:11	6	=
LEAF_NODE	2984:11	2984:11	7	=
RVAL	2984:14	2984:38	6	( uint32 ) - 1 >> ( 32 - bps )
LEAF_NODE	2984:14	2984:14	7	(
TYPE_NAME	2984:15	2984:15	7	uint32
LEAF_NODE	2984:15	2984:15	8	uint32
LEAF_NODE	2984:21	2984:21	7	)
UNARY_EXPR	2984:22	2984:23	7	- 1
UNARY_OPERATOR	2984:22	2984:22	8	-
LEAF_NODE	2984:22	2984:22	9	-
FIELD	2984:23	2984:23	8	1
LEAF_NODE	2984:23	2984:23	9	1
LEAF_NODE	2984:25	2984:25	7	>>
LEAF_NODE	2984:28	2984:28	7	(
FIELD	2984:30	2984:30	7	32
LEAF_NODE	2984:30	2984:30	8	32
LEAF_NODE	2984:33	2984:33	7	-
FIELD	2984:35	2984:35	7	bps
LEAF_NODE	2984:35	2984:35	8	bps
LEAF_NODE	2984:38	2984:38	7	)
LEAF_NODE	2984:39	2984:39	4	;
ITERATION	2985:2	2986:4	3	
KEYWORD	2985:2	2985:2	4	for
LEAF_NODE	2985:2	2985:2	5	for
LEAF_NODE	2985:6	2985:6	4	(
FOR_INIT	2985:7	2985:18	4	col = start ;
EXPR	2985:7	2985:7	5	col = start
ASSIGN	2985:7	2985:13	6	col = start
LVAL	2985:7	2985:7	7	col
FIELD	2985:7	2985:7	8	col
LEAF_NODE	2985:7	2985:7	9	col
ASSIGN_OP	2985:11	2985:11	7	=
LEAF_NODE	2985:11	2985:11	8	=
RVAL	2985:13	2985:13	7	start
FIELD	2985:13	2985:13	8	start
LEAF_NODE	2985:13	2985:13	9	start
LEAF_NODE	2985:18	2985:18	5	;
CONDITION	2985:20	2985:20	4	col < end
EXPR	2985:20	2985:26	5	col < end
FIELD	2985:20	2985:20	6	col
LEAF_NODE	2985:20	2985:20	7	col
REL_OPERATOR	2985:24	2985:24	6	<
LEAF_NODE	2985:24	2985:24	7	<
FIELD	2985:26	2985:26	6	end
LEAF_NODE	2985:26	2985:26	7	end
LEAF_NODE	2985:29	2985:29	4	;
FOR_EXPR	2985:31	2985:31	4	col ++
EXPR	2985:31	2985:31	5	col ++
FIELD	2985:31	2985:34	6	col ++
LEAF_NODE	2985:31	2985:31	7	col
LEAF_NODE	2985:34	2985:34	7	++
LEAF_NODE	2985:36	2985:36	4	)
STATEMENTS	2986:4	3028:4	4	
LEAF_NODE	2986:4	2986:4	5	{
STATEMENTS	2988:4	2989:4	5	
LEAF_NODE	2988:4	2988:4	6	bit_offset
LEAF_NODE	2988:15	2988:15	6	=
LEAF_NODE	2988:17	2988:17	6	col
EXPR_STATEMENT	2988:21	2988:32	6	* bps * spp ;
EXPR	2988:21	2988:29	7	* bps * spp
UNARY_EXPR	2988:21	2988:23	8	* bps
UNARY_OPERATOR	2988:21	2988:21	9	*
LEAF_NODE	2988:21	2988:21	10	*
FIELD	2988:23	2988:23	9	bps
LEAF_NODE	2988:23	2988:23	10	bps
LEAF_NODE	2988:27	2988:27	8	*
FIELD	2988:29	2988:29	8	spp
LEAF_NODE	2988:29	2988:29	9	spp
LEAF_NODE	2988:32	2988:32	7	;
ITERATION	2989:4	2990:6	6	
KEYWORD	2989:4	2989:4	7	for
LEAF_NODE	2989:4	2989:4	8	for
LEAF_NODE	2989:8	2989:8	7	(
FOR_INIT	2989:9	2989:24	7	sindex = sample ;
EXPR	2989:9	2989:9	8	sindex = sample
ASSIGN	2989:9	2989:18	9	sindex = sample
LVAL	2989:9	2989:9	10	sindex
FIELD	2989:9	2989:9	11	sindex
LEAF_NODE	2989:9	2989:9	12	sindex
ASSIGN_OP	2989:16	2989:16	10	=
LEAF_NODE	2989:16	2989:16	11	=
RVAL	2989:18	2989:18	10	sample
FIELD	2989:18	2989:18	11	sample
LEAF_NODE	2989:18	2989:18	12	sample
LEAF_NODE	2989:24	2989:24	8	;
CONDITION	2989:26	2989:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2989:26	2989:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	2989:26	2989:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	2989:26	2989:39	10	( sindex < spp )
LEAF_NODE	2989:26	2989:26	11	(
FIELD	2989:27	2989:27	11	sindex
LEAF_NODE	2989:27	2989:27	12	sindex
REL_OPERATOR	2989:34	2989:34	11	<
LEAF_NODE	2989:34	2989:34	12	<
FIELD	2989:36	2989:36	11	spp
LEAF_NODE	2989:36	2989:36	12	spp
LEAF_NODE	2989:39	2989:39	11	)
LEAF_NODE	2989:41	2989:41	10	&&
EXPR	2989:44	2989:70	10	( sindex < ( sample + count ) )
LEAF_NODE	2989:44	2989:44	11	(
FIELD	2989:45	2989:45	11	sindex
LEAF_NODE	2989:45	2989:45	12	sindex
REL_OPERATOR	2989:52	2989:52	11	<
LEAF_NODE	2989:52	2989:52	12	<
LEAF_NODE	2989:54	2989:54	11	(
FIELD	2989:55	2989:55	11	sample
LEAF_NODE	2989:55	2989:55	12	sample
LEAF_NODE	2989:62	2989:62	11	+
FIELD	2989:64	2989:64	11	count
LEAF_NODE	2989:64	2989:64	12	count
LEAF_NODE	2989:69	2989:69	11	)
LEAF_NODE	2989:70	2989:70	11	)
LEAF_NODE	2989:71	2989:71	7	;
FOR_EXPR	2989:73	2989:73	7	sindex ++
EXPR	2989:73	2989:73	8	sindex ++
FIELD	2989:73	2989:79	9	sindex ++
LEAF_NODE	2989:73	2989:73	10	sindex
LEAF_NODE	2989:79	2989:79	10	++
LEAF_NODE	2989:81	2989:81	7	)
STATEMENTS	2990:6	3027:6	7	
LEAF_NODE	2990:6	2990:6	8	{
STATEMENTS	2991:6	3026:6	8	
SELECTION	2991:6	2992:8	9	
KEYWORD	2991:6	2991:6	10	if
LEAF_NODE	2991:6	2991:6	11	if
LEAF_NODE	2991:9	2991:9	10	(
CONDITION	2991:10	2991:10	10	sindex == 0
EXPR	2991:10	2991:20	11	sindex == 0
FIELD	2991:10	2991:10	12	sindex
LEAF_NODE	2991:10	2991:10	13	sindex
EQ_OPERATOR	2991:17	2991:17	12	==
LEAF_NODE	2991:17	2991:17	13	==
FIELD	2991:20	2991:20	12	0
LEAF_NODE	2991:20	2991:20	13	0
LEAF_NODE	2991:21	2991:21	10	)
STATEMENTS	2992:8	2995:8	10	
LEAF_NODE	2992:8	2992:8	11	{
STATEMENTS	2993:8	2994:8	11	
EXPR_STATEMENT	2993:8	2993:33	12	src_byte = bit_offset / 8 ;
EXPR	2993:8	2993:8	13	src_byte = bit_offset / 8
ASSIGN	2993:8	2993:19	14	src_byte = bit_offset / 8
LVAL	2993:8	2993:8	15	src_byte
FIELD	2993:8	2993:8	16	src_byte
LEAF_NODE	2993:8	2993:8	17	src_byte
ASSIGN_OP	2993:17	2993:17	15	=
LEAF_NODE	2993:17	2993:17	16	=
RVAL	2993:19	2993:32	15	bit_offset / 8
FIELD	2993:19	2993:19	16	bit_offset
LEAF_NODE	2993:19	2993:19	17	bit_offset
LEAF_NODE	2993:30	2993:30	16	/
FIELD	2993:32	2993:32	16	8
LEAF_NODE	2993:32	2993:32	17	8
LEAF_NODE	2993:33	2993:33	13	;
EXPR_STATEMENT	2994:8	2994:33	12	src_bit = bit_offset % 8 ;
EXPR	2994:8	2994:8	13	src_bit = bit_offset % 8
ASSIGN	2994:8	2994:19	14	src_bit = bit_offset % 8
LVAL	2994:8	2994:8	15	src_bit
FIELD	2994:8	2994:8	16	src_bit
LEAF_NODE	2994:8	2994:8	17	src_bit
ASSIGN_OP	2994:17	2994:17	15	=
LEAF_NODE	2994:17	2994:17	16	=
RVAL	2994:19	2994:32	15	bit_offset % 8
FIELD	2994:19	2994:19	16	bit_offset
LEAF_NODE	2994:19	2994:19	17	bit_offset
LEAF_NODE	2994:30	2994:30	16	%
FIELD	2994:32	2994:32	16	8
LEAF_NODE	2994:32	2994:32	17	8
LEAF_NODE	2994:33	2994:33	13	;
LEAF_NODE	2995:8	2995:8	11	}
SELECTION	2996:6	2997:8	9	
KEYWORD	2996:6	2996:6	10	else
LEAF_NODE	2996:6	2996:6	11	else
STATEMENTS	2997:8	3000:8	10	
LEAF_NODE	2997:8	2997:8	11	{
STATEMENTS	2998:8	2999:8	11	
EXPR_STATEMENT	2998:8	2998:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	2998:8	2998:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	2998:8	2998:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	2998:8	2998:8	15	src_byte
FIELD	2998:8	2998:8	16	src_byte
LEAF_NODE	2998:8	2998:8	17	src_byte
ASSIGN_OP	2998:17	2998:17	15	=
LEAF_NODE	2998:17	2998:17	16	=
RVAL	2998:19	2998:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	2998:19	2998:19	16	(
FIELD	2998:20	2998:20	16	bit_offset
LEAF_NODE	2998:20	2998:20	17	bit_offset
LEAF_NODE	2998:31	2998:31	16	+
LEAF_NODE	2998:33	2998:33	16	(
FIELD	2998:34	2998:34	16	sindex
LEAF_NODE	2998:34	2998:34	17	sindex
LEAF_NODE	2998:41	2998:41	16	*
FIELD	2998:43	2998:43	16	bps
LEAF_NODE	2998:43	2998:43	17	bps
LEAF_NODE	2998:46	2998:46	16	)
LEAF_NODE	2998:47	2998:47	16	)
LEAF_NODE	2998:49	2998:49	16	/
FIELD	2998:51	2998:51	16	8
LEAF_NODE	2998:51	2998:51	17	8
LEAF_NODE	2998:52	2998:52	13	;
EXPR_STATEMENT	2999:8	2999:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	2999:8	2999:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	2999:8	2999:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	2999:8	2999:8	15	src_bit
FIELD	2999:8	2999:8	16	src_bit
LEAF_NODE	2999:8	2999:8	17	src_bit
ASSIGN_OP	2999:17	2999:17	15	=
LEAF_NODE	2999:17	2999:17	16	=
RVAL	2999:19	2999:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	2999:19	2999:19	16	(
FIELD	2999:20	2999:20	16	bit_offset
LEAF_NODE	2999:20	2999:20	17	bit_offset
LEAF_NODE	2999:31	2999:31	16	+
LEAF_NODE	2999:33	2999:33	16	(
FIELD	2999:34	2999:34	16	sindex
LEAF_NODE	2999:34	2999:34	17	sindex
LEAF_NODE	2999:41	2999:41	16	*
FIELD	2999:43	2999:43	16	bps
LEAF_NODE	2999:43	2999:43	17	bps
LEAF_NODE	2999:46	2999:46	16	)
LEAF_NODE	2999:47	2999:47	16	)
LEAF_NODE	2999:49	2999:49	16	%
FIELD	2999:51	2999:51	16	8
LEAF_NODE	2999:51	2999:51	17	8
LEAF_NODE	2999:52	2999:52	13	;
LEAF_NODE	3000:8	3000:8	11	}
EXPR_STATEMENT	3002:6	3002:25	9	src = in + src_byte ;
EXPR	3002:6	3002:6	10	src = in + src_byte
ASSIGN	3002:6	3002:12	11	src = in + src_byte
LVAL	3002:6	3002:6	12	src
FIELD	3002:6	3002:6	13	src
LEAF_NODE	3002:6	3002:6	14	src
ASSIGN_OP	3002:10	3002:10	12	=
LEAF_NODE	3002:10	3002:10	13	=
RVAL	3002:12	3002:17	12	in + src_byte
FIELD	3002:12	3002:12	13	in
LEAF_NODE	3002:12	3002:12	14	in
LEAF_NODE	3002:15	3002:15	13	+
FIELD	3002:17	3002:17	13	src_byte
LEAF_NODE	3002:17	3002:17	14	src_byte
LEAF_NODE	3002:25	3002:25	10	;
EXPR_STATEMENT	3003:6	3003:50	9	matchbits = maskbits << ( 32 - src_bit - bps ) ;
EXPR	3003:6	3003:6	10	matchbits = maskbits << ( 32 - src_bit - bps )
ASSIGN	3003:6	3003:18	11	matchbits = maskbits << ( 32 - src_bit - bps )
LVAL	3003:6	3003:6	12	matchbits
FIELD	3003:6	3003:6	13	matchbits
LEAF_NODE	3003:6	3003:6	14	matchbits
ASSIGN_OP	3003:16	3003:16	12	=
LEAF_NODE	3003:16	3003:16	13	=
RVAL	3003:18	3003:49	12	maskbits << ( 32 - src_bit - bps )
FIELD	3003:18	3003:18	13	maskbits
LEAF_NODE	3003:18	3003:18	14	maskbits
LEAF_NODE	3003:27	3003:27	13	<<
LEAF_NODE	3003:30	3003:30	13	(
FIELD	3003:31	3003:31	13	32
LEAF_NODE	3003:31	3003:31	14	32
LEAF_NODE	3003:34	3003:34	13	-
FIELD	3003:36	3003:36	13	src_bit
LEAF_NODE	3003:36	3003:36	14	src_bit
LEAF_NODE	3003:44	3003:44	13	-
FIELD	3003:46	3003:46	13	bps
LEAF_NODE	3003:46	3003:46	14	bps
LEAF_NODE	3003:49	3003:49	13	)
LEAF_NODE	3003:50	3003:50	10	;
SELECTION	3004:6	3005:1	9	
KEYWORD	3004:6	3004:6	10	if
LEAF_NODE	3004:6	3004:6	11	if
LEAF_NODE	3004:9	3004:9	10	(
CONDITION	3004:10	3004:10	10	little_endian
EXPR	3004:10	3004:10	11	little_endian
FIELD	3004:10	3004:10	12	little_endian
LEAF_NODE	3004:10	3004:10	13	little_endian
LEAF_NODE	3004:23	3004:23	10	)
STATEMENTS	3005:1	3005:1	10	
EXPR_STATEMENT	3005:1	3005:65	11	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	3005:1	3005:1	12	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	3005:1	3005:9	13	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	3005:1	3005:1	14	buff1
FIELD	3005:1	3005:1	15	buff1
LEAF_NODE	3005:1	3005:1	16	buff1
ASSIGN_OP	3005:7	3005:7	14	=
LEAF_NODE	3005:7	3005:7	15	=
RVAL	3005:9	3005:9	14	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3005:9	3005:26	15	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3005:9	3005:22	16	( src [ 0 ] << 24 )
LEAF_NODE	3005:9	3005:9	17	(
FIELD	3005:10	3005:15	17	src [ 0 ]
LEAF_NODE	3005:10	3005:10	18	src
LEAF_NODE	3005:13	3005:13	18	[
EXPR	3005:14	3005:14	18	0
FIELD	3005:14	3005:14	19	0
LEAF_NODE	3005:14	3005:14	20	0
LEAF_NODE	3005:15	3005:15	18	]
LEAF_NODE	3005:17	3005:17	17	<<
FIELD	3005:20	3005:20	17	24
LEAF_NODE	3005:20	3005:20	18	24
LEAF_NODE	3005:22	3005:22	17	)
LEAF_NODE	3005:24	3005:24	16	|
BIT_OR_ELEM	3005:26	3005:26	16	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3005:26	3005:43	17	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3005:26	3005:39	18	( src [ 1 ] << 16 )
LEAF_NODE	3005:26	3005:26	19	(
FIELD	3005:27	3005:32	19	src [ 1 ]
LEAF_NODE	3005:27	3005:27	20	src
LEAF_NODE	3005:30	3005:30	20	[
EXPR	3005:31	3005:31	20	1
FIELD	3005:31	3005:31	21	1
LEAF_NODE	3005:31	3005:31	22	1
LEAF_NODE	3005:32	3005:32	20	]
LEAF_NODE	3005:34	3005:34	19	<<
FIELD	3005:37	3005:37	19	16
LEAF_NODE	3005:37	3005:37	20	16
LEAF_NODE	3005:39	3005:39	19	)
LEAF_NODE	3005:41	3005:41	18	|
BIT_OR_ELEM	3005:43	3005:43	18	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3005:43	3005:59	19	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3005:43	3005:55	20	( src [ 2 ] << 8 )
LEAF_NODE	3005:43	3005:43	21	(
FIELD	3005:44	3005:49	21	src [ 2 ]
LEAF_NODE	3005:44	3005:44	22	src
LEAF_NODE	3005:47	3005:47	22	[
EXPR	3005:48	3005:48	22	2
FIELD	3005:48	3005:48	23	2
LEAF_NODE	3005:48	3005:48	24	2
LEAF_NODE	3005:49	3005:49	22	]
LEAF_NODE	3005:51	3005:51	21	<<
FIELD	3005:54	3005:54	21	8
LEAF_NODE	3005:54	3005:54	22	8
LEAF_NODE	3005:55	3005:55	21	)
LEAF_NODE	3005:57	3005:57	20	|
BIT_OR_ELEM	3005:59	3005:59	20	src [ 3 ]
FIELD	3005:59	3005:64	21	src [ 3 ]
LEAF_NODE	3005:59	3005:59	22	src
LEAF_NODE	3005:62	3005:62	22	[
EXPR	3005:63	3005:63	22	3
FIELD	3005:63	3005:63	23	3
LEAF_NODE	3005:63	3005:63	24	3
LEAF_NODE	3005:64	3005:64	22	]
LEAF_NODE	3005:65	3005:65	12	;
SELECTION	3006:6	3007:1	9	
KEYWORD	3006:6	3006:6	10	else
LEAF_NODE	3006:6	3006:6	11	else
STATEMENTS	3007:1	3007:1	10	
EXPR_STATEMENT	3007:1	3007:65	11	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	3007:1	3007:1	12	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	3007:1	3007:9	13	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	3007:1	3007:1	14	buff1
FIELD	3007:1	3007:1	15	buff1
LEAF_NODE	3007:1	3007:1	16	buff1
ASSIGN_OP	3007:7	3007:7	14	=
LEAF_NODE	3007:7	3007:7	15	=
RVAL	3007:9	3007:9	14	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3007:9	3007:26	15	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3007:9	3007:22	16	( src [ 3 ] << 24 )
LEAF_NODE	3007:9	3007:9	17	(
FIELD	3007:10	3007:15	17	src [ 3 ]
LEAF_NODE	3007:10	3007:10	18	src
LEAF_NODE	3007:13	3007:13	18	[
EXPR	3007:14	3007:14	18	3
FIELD	3007:14	3007:14	19	3
LEAF_NODE	3007:14	3007:14	20	3
LEAF_NODE	3007:15	3007:15	18	]
LEAF_NODE	3007:17	3007:17	17	<<
FIELD	3007:20	3007:20	17	24
LEAF_NODE	3007:20	3007:20	18	24
LEAF_NODE	3007:22	3007:22	17	)
LEAF_NODE	3007:24	3007:24	16	|
BIT_OR_ELEM	3007:26	3007:26	16	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3007:26	3007:43	17	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3007:26	3007:39	18	( src [ 2 ] << 16 )
LEAF_NODE	3007:26	3007:26	19	(
FIELD	3007:27	3007:32	19	src [ 2 ]
LEAF_NODE	3007:27	3007:27	20	src
LEAF_NODE	3007:30	3007:30	20	[
EXPR	3007:31	3007:31	20	2
FIELD	3007:31	3007:31	21	2
LEAF_NODE	3007:31	3007:31	22	2
LEAF_NODE	3007:32	3007:32	20	]
LEAF_NODE	3007:34	3007:34	19	<<
FIELD	3007:37	3007:37	19	16
LEAF_NODE	3007:37	3007:37	20	16
LEAF_NODE	3007:39	3007:39	19	)
LEAF_NODE	3007:41	3007:41	18	|
BIT_OR_ELEM	3007:43	3007:43	18	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3007:43	3007:59	19	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3007:43	3007:55	20	( src [ 1 ] << 8 )
LEAF_NODE	3007:43	3007:43	21	(
FIELD	3007:44	3007:49	21	src [ 1 ]
LEAF_NODE	3007:44	3007:44	22	src
LEAF_NODE	3007:47	3007:47	22	[
EXPR	3007:48	3007:48	22	1
FIELD	3007:48	3007:48	23	1
LEAF_NODE	3007:48	3007:48	24	1
LEAF_NODE	3007:49	3007:49	22	]
LEAF_NODE	3007:51	3007:51	21	<<
FIELD	3007:54	3007:54	21	8
LEAF_NODE	3007:54	3007:54	22	8
LEAF_NODE	3007:55	3007:55	21	)
LEAF_NODE	3007:57	3007:57	20	|
BIT_OR_ELEM	3007:59	3007:59	20	src [ 0 ]
FIELD	3007:59	3007:64	21	src [ 0 ]
LEAF_NODE	3007:59	3007:59	22	src
LEAF_NODE	3007:62	3007:62	22	[
EXPR	3007:63	3007:63	22	0
FIELD	3007:63	3007:63	23	0
LEAF_NODE	3007:63	3007:63	24	0
LEAF_NODE	3007:64	3007:64	22	]
LEAF_NODE	3007:65	3007:65	12	;
LEAF_NODE	3008:6	3008:6	9	buff1
LEAF_NODE	3008:12	3008:12	9	=
LEAF_NODE	3008:14	3008:14	9	(
LEAF_NODE	3008:15	3008:15	9	buff1
LEAF_NODE	3008:21	3008:21	9	&
LEAF_NODE	3008:23	3008:23	9	matchbits
LEAF_NODE	3008:32	3008:32	9	)
LEAF_NODE	3008:34	3008:34	9	<<
LEAF_NODE	3008:37	3008:37	9	(
LEAF_NODE	3008:38	3008:38	9	src_bit
LEAF_NODE	3008:45	3008:45	9	)
LEAF_NODE	3008:46	3008:46	9	;
SELECTION	3010:6	3011:8	9	
KEYWORD	3010:6	3010:6	10	if
LEAF_NODE	3010:6	3010:6	11	if
LEAF_NODE	3010:9	3010:9	10	(
CONDITION	3010:10	3010:10	10	ready_bits < 16
EXPR	3010:10	3010:23	11	ready_bits < 16
FIELD	3010:10	3010:10	12	ready_bits
LEAF_NODE	3010:10	3010:10	13	ready_bits
REL_OPERATOR	3010:21	3010:21	12	<
LEAF_NODE	3010:21	3010:21	13	<
FIELD	3010:23	3010:23	12	16
LEAF_NODE	3010:23	3010:23	13	16
LEAF_NODE	3010:25	3010:25	10	)
STATEMENTS	3011:8	3014:8	10	
LEAF_NODE	3011:8	3011:8	11	{
STATEMENTS	3012:8	3013:8	11	
EXPR_STATEMENT	3012:8	3012:33	12	bytebuff1 = bytebuff2 = 0 ;
EXPR	3012:8	3012:8	13	bytebuff1 = bytebuff2 = 0
ASSIGN	3012:8	3012:20	14	bytebuff1 = bytebuff2 = 0
LVAL	3012:8	3012:8	15	bytebuff1
FIELD	3012:8	3012:8	16	bytebuff1
LEAF_NODE	3012:8	3012:8	17	bytebuff1
ASSIGN_OP	3012:18	3012:18	15	=
LEAF_NODE	3012:18	3012:18	16	=
RVAL	3012:20	3012:20	15	bytebuff2 = 0
ASSIGN	3012:20	3012:32	16	bytebuff2 = 0
LVAL	3012:20	3012:20	17	bytebuff2
FIELD	3012:20	3012:20	18	bytebuff2
LEAF_NODE	3012:20	3012:20	19	bytebuff2
ASSIGN_OP	3012:30	3012:30	17	=
LEAF_NODE	3012:30	3012:30	18	=
RVAL	3012:32	3012:32	17	0
FIELD	3012:32	3012:32	18	0
LEAF_NODE	3012:32	3012:32	19	0
LEAF_NODE	3012:33	3012:33	13	;
EXPR_STATEMENT	3013:8	3013:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	3013:8	3013:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	3013:8	3013:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	3013:8	3013:8	15	buff2
FIELD	3013:8	3013:8	16	buff2
LEAF_NODE	3013:8	3013:8	17	buff2
ASSIGN_OP	3013:14	3013:14	15	=
LEAF_NODE	3013:14	3013:14	16	=
RVAL	3013:16	3013:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	3013:16	3013:16	16	(
BIT_OR	3013:17	3013:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3013:17	3013:17	17	buff2
FIELD	3013:17	3013:17	18	buff2
LEAF_NODE	3013:17	3013:17	19	buff2
LEAF_NODE	3013:23	3013:23	17	|
BIT_OR_ELEM	3013:25	3013:45	17	( buff1 >> ready_bits )
LEAF_NODE	3013:25	3013:25	18	(
FIELD	3013:26	3013:26	18	buff1
LEAF_NODE	3013:26	3013:26	19	buff1
LEAF_NODE	3013:32	3013:32	18	>>
FIELD	3013:35	3013:35	18	ready_bits
LEAF_NODE	3013:35	3013:35	19	ready_bits
LEAF_NODE	3013:45	3013:45	18	)
LEAF_NODE	3013:46	3013:46	16	)
LEAF_NODE	3013:47	3013:47	13	;
LEAF_NODE	3014:8	3014:8	11	}
SELECTION	3015:6	3016:8	9	
KEYWORD	3015:6	3015:6	10	else
LEAF_NODE	3015:6	3015:6	11	else
STATEMENTS	3016:8	3025:8	10	
LEAF_NODE	3016:8	3016:8	11	{
STATEMENTS	3017:8	3024:8	11	
EXPR_STATEMENT	3017:8	3017:33	12	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	3017:8	3017:8	13	bytebuff1 = ( buff2 >> 24 )
ASSIGN	3017:8	3017:20	14	bytebuff1 = ( buff2 >> 24 )
LVAL	3017:8	3017:8	15	bytebuff1
FIELD	3017:8	3017:8	16	bytebuff1
LEAF_NODE	3017:8	3017:8	17	bytebuff1
ASSIGN_OP	3017:18	3017:18	15	=
LEAF_NODE	3017:18	3017:18	16	=
RVAL	3017:20	3017:32	15	( buff2 >> 24 )
LEAF_NODE	3017:20	3017:20	16	(
FIELD	3017:21	3017:21	16	buff2
LEAF_NODE	3017:21	3017:21	17	buff2
LEAF_NODE	3017:27	3017:27	16	>>
FIELD	3017:30	3017:30	16	24
LEAF_NODE	3017:30	3017:30	17	24
LEAF_NODE	3017:32	3017:32	16	)
LEAF_NODE	3017:33	3017:33	13	;
EXPR_STATEMENT	3018:8	3018:26	12	* dst ++ = bytebuff1 ;
EXPR	3018:8	3018:8	13	* dst ++ = bytebuff1
ASSIGN	3018:8	3018:17	14	* dst ++ = bytebuff1
LVAL	3018:8	3018:8	15	* dst ++
UNARY_EXPR	3018:8	3018:9	16	* dst ++
UNARY_OPERATOR	3018:8	3018:8	17	*
LEAF_NODE	3018:8	3018:8	18	*
FIELD	3018:9	3018:12	17	dst ++
LEAF_NODE	3018:9	3018:9	18	dst
LEAF_NODE	3018:12	3018:12	18	++
ASSIGN_OP	3018:15	3018:15	15	=
LEAF_NODE	3018:15	3018:15	16	=
RVAL	3018:17	3018:17	15	bytebuff1
FIELD	3018:17	3018:17	16	bytebuff1
LEAF_NODE	3018:17	3018:17	17	bytebuff1
LEAF_NODE	3018:26	3018:26	13	;
EXPR_STATEMENT	3019:8	3019:33	12	bytebuff2 = ( buff2 >> 16 ) ;
EXPR	3019:8	3019:8	13	bytebuff2 = ( buff2 >> 16 )
ASSIGN	3019:8	3019:20	14	bytebuff2 = ( buff2 >> 16 )
LVAL	3019:8	3019:8	15	bytebuff2
FIELD	3019:8	3019:8	16	bytebuff2
LEAF_NODE	3019:8	3019:8	17	bytebuff2
ASSIGN_OP	3019:18	3019:18	15	=
LEAF_NODE	3019:18	3019:18	16	=
RVAL	3019:20	3019:32	15	( buff2 >> 16 )
LEAF_NODE	3019:20	3019:20	16	(
FIELD	3019:21	3019:21	16	buff2
LEAF_NODE	3019:21	3019:21	17	buff2
LEAF_NODE	3019:27	3019:27	16	>>
FIELD	3019:30	3019:30	16	16
LEAF_NODE	3019:30	3019:30	17	16
LEAF_NODE	3019:32	3019:32	16	)
LEAF_NODE	3019:33	3019:33	13	;
EXPR_STATEMENT	3020:8	3020:26	12	* dst ++ = bytebuff2 ;
EXPR	3020:8	3020:8	13	* dst ++ = bytebuff2
ASSIGN	3020:8	3020:17	14	* dst ++ = bytebuff2
LVAL	3020:8	3020:8	15	* dst ++
UNARY_EXPR	3020:8	3020:9	16	* dst ++
UNARY_OPERATOR	3020:8	3020:8	17	*
LEAF_NODE	3020:8	3020:8	18	*
FIELD	3020:9	3020:12	17	dst ++
LEAF_NODE	3020:9	3020:9	18	dst
LEAF_NODE	3020:12	3020:12	18	++
ASSIGN_OP	3020:15	3020:15	15	=
LEAF_NODE	3020:15	3020:15	16	=
RVAL	3020:17	3020:17	15	bytebuff2
FIELD	3020:17	3020:17	16	bytebuff2
LEAF_NODE	3020:17	3020:17	17	bytebuff2
LEAF_NODE	3020:26	3020:26	13	;
EXPR_STATEMENT	3021:8	3021:24	12	ready_bits -= 16 ;
EXPR	3021:8	3021:8	13	ready_bits -= 16
ASSIGN	3021:8	3021:22	14	ready_bits -= 16
LVAL	3021:8	3021:8	15	ready_bits
FIELD	3021:8	3021:8	16	ready_bits
LEAF_NODE	3021:8	3021:8	17	ready_bits
ASSIGN_OP	3021:19	3021:19	15	-=
LEAF_NODE	3021:19	3021:19	16	-=
RVAL	3021:22	3021:22	15	16
FIELD	3021:22	3021:22	16	16
LEAF_NODE	3021:22	3021:22	17	16
LEAF_NODE	3021:24	3021:24	13	;
EXPR_STATEMENT	3024:8	3024:55	12	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) ) ;
EXPR	3024:8	3024:8	13	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
ASSIGN	3024:8	3024:16	14	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LVAL	3024:8	3024:8	15	buff2
FIELD	3024:8	3024:8	16	buff2
LEAF_NODE	3024:8	3024:8	17	buff2
ASSIGN_OP	3024:14	3024:14	15	=
LEAF_NODE	3024:14	3024:14	16	=
RVAL	3024:16	3024:54	15	( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	3024:16	3024:16	16	(
BIT_OR	3024:17	3024:33	16	( buff2 << 16 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	3024:17	3024:29	17	( buff2 << 16 )
LEAF_NODE	3024:17	3024:17	18	(
FIELD	3024:18	3024:18	18	buff2
LEAF_NODE	3024:18	3024:18	19	buff2
LEAF_NODE	3024:24	3024:24	18	<<
FIELD	3024:27	3024:27	18	16
LEAF_NODE	3024:27	3024:27	19	16
LEAF_NODE	3024:29	3024:29	18	)
LEAF_NODE	3024:31	3024:31	17	|
BIT_OR_ELEM	3024:33	3024:53	17	( buff1 >> ready_bits )
LEAF_NODE	3024:33	3024:33	18	(
FIELD	3024:34	3024:34	18	buff1
LEAF_NODE	3024:34	3024:34	19	buff1
LEAF_NODE	3024:40	3024:40	18	>>
FIELD	3024:43	3024:43	18	ready_bits
LEAF_NODE	3024:43	3024:43	19	ready_bits
LEAF_NODE	3024:53	3024:53	18	)
LEAF_NODE	3024:54	3024:54	16	)
LEAF_NODE	3024:55	3024:55	13	;
LEAF_NODE	3025:8	3025:8	11	}
EXPR_STATEMENT	3026:6	3026:23	9	ready_bits += bps ;
EXPR	3026:6	3026:6	10	ready_bits += bps
ASSIGN	3026:6	3026:20	11	ready_bits += bps
LVAL	3026:6	3026:6	12	ready_bits
FIELD	3026:6	3026:6	13	ready_bits
LEAF_NODE	3026:6	3026:6	14	ready_bits
ASSIGN_OP	3026:17	3026:17	12	+=
LEAF_NODE	3026:17	3026:17	13	+=
RVAL	3026:20	3026:20	12	bps
FIELD	3026:20	3026:20	13	bps
LEAF_NODE	3026:20	3026:20	14	bps
LEAF_NODE	3026:23	3026:23	10	;
LEAF_NODE	3027:6	3027:6	8	}
LEAF_NODE	3028:4	3028:4	5	}
ITERATION	3031:2	3032:4	3	
KEYWORD	3031:2	3031:2	4	while
LEAF_NODE	3031:2	3031:2	5	while
LEAF_NODE	3031:8	3031:8	4	(
CONDITION	3031:9	3031:9	4	ready_bits > 0
EXPR	3031:9	3031:22	5	ready_bits > 0
FIELD	3031:9	3031:9	6	ready_bits
LEAF_NODE	3031:9	3031:9	7	ready_bits
REL_OPERATOR	3031:20	3031:20	6	>
LEAF_NODE	3031:20	3031:20	7	>
FIELD	3031:22	3031:22	6	0
LEAF_NODE	3031:22	3031:22	7	0
LEAF_NODE	3031:23	3031:23	4	)
STATEMENTS	3032:4	3039:4	4	
LEAF_NODE	3032:4	3032:4	5	{
STATEMENTS	3033:4	3038:4	5	
EXPR_STATEMENT	3033:4	3033:29	6	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	3033:4	3033:4	7	bytebuff1 = ( buff2 >> 24 )
ASSIGN	3033:4	3033:16	8	bytebuff1 = ( buff2 >> 24 )
LVAL	3033:4	3033:4	9	bytebuff1
FIELD	3033:4	3033:4	10	bytebuff1
LEAF_NODE	3033:4	3033:4	11	bytebuff1
ASSIGN_OP	3033:14	3033:14	9	=
LEAF_NODE	3033:14	3033:14	10	=
RVAL	3033:16	3033:28	9	( buff2 >> 24 )
LEAF_NODE	3033:16	3033:16	10	(
FIELD	3033:17	3033:17	10	buff2
LEAF_NODE	3033:17	3033:17	11	buff2
LEAF_NODE	3033:23	3033:23	10	>>
FIELD	3033:26	3033:26	10	24
LEAF_NODE	3033:26	3033:26	11	24
LEAF_NODE	3033:28	3033:28	10	)
LEAF_NODE	3033:29	3033:29	7	;
EXPR_STATEMENT	3034:4	3034:22	6	* dst ++ = bytebuff1 ;
EXPR	3034:4	3034:4	7	* dst ++ = bytebuff1
ASSIGN	3034:4	3034:13	8	* dst ++ = bytebuff1
LVAL	3034:4	3034:4	9	* dst ++
UNARY_EXPR	3034:4	3034:5	10	* dst ++
UNARY_OPERATOR	3034:4	3034:4	11	*
LEAF_NODE	3034:4	3034:4	12	*
FIELD	3034:5	3034:8	11	dst ++
LEAF_NODE	3034:5	3034:5	12	dst
LEAF_NODE	3034:8	3034:8	12	++
ASSIGN_OP	3034:11	3034:11	9	=
LEAF_NODE	3034:11	3034:11	10	=
RVAL	3034:13	3034:13	9	bytebuff1
FIELD	3034:13	3034:13	10	bytebuff1
LEAF_NODE	3034:13	3034:13	11	bytebuff1
LEAF_NODE	3034:22	3034:22	7	;
EXPR_STATEMENT	3036:4	3036:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	3036:4	3036:4	7	buff2 = ( buff2 << 8 )
ASSIGN	3036:4	3036:12	8	buff2 = ( buff2 << 8 )
LVAL	3036:4	3036:4	9	buff2
FIELD	3036:4	3036:4	10	buff2
LEAF_NODE	3036:4	3036:4	11	buff2
ASSIGN_OP	3036:10	3036:10	9	=
LEAF_NODE	3036:10	3036:10	10	=
RVAL	3036:12	3036:23	9	( buff2 << 8 )
LEAF_NODE	3036:12	3036:12	10	(
FIELD	3036:13	3036:13	10	buff2
LEAF_NODE	3036:13	3036:13	11	buff2
LEAF_NODE	3036:19	3036:19	10	<<
FIELD	3036:22	3036:22	10	8
LEAF_NODE	3036:22	3036:22	11	8
LEAF_NODE	3036:23	3036:23	10	)
LEAF_NODE	3036:24	3036:24	7	;
EXPR_STATEMENT	3037:4	3037:25	6	bytebuff2 = bytebuff1 ;
EXPR	3037:4	3037:4	7	bytebuff2 = bytebuff1
ASSIGN	3037:4	3037:16	8	bytebuff2 = bytebuff1
LVAL	3037:4	3037:4	9	bytebuff2
FIELD	3037:4	3037:4	10	bytebuff2
LEAF_NODE	3037:4	3037:4	11	bytebuff2
ASSIGN_OP	3037:14	3037:14	9	=
LEAF_NODE	3037:14	3037:14	10	=
RVAL	3037:16	3037:16	9	bytebuff1
FIELD	3037:16	3037:16	10	bytebuff1
LEAF_NODE	3037:16	3037:16	11	bytebuff1
LEAF_NODE	3037:25	3037:25	7	;
EXPR_STATEMENT	3038:4	3038:19	6	ready_bits -= 8 ;
EXPR	3038:4	3038:4	7	ready_bits -= 8
ASSIGN	3038:4	3038:18	8	ready_bits -= 8
LVAL	3038:4	3038:4	9	ready_bits
FIELD	3038:4	3038:4	10	ready_bits
LEAF_NODE	3038:4	3038:4	11	ready_bits
ASSIGN_OP	3038:15	3038:15	9	-=
LEAF_NODE	3038:15	3038:15	10	-=
RVAL	3038:18	3038:18	9	8
FIELD	3038:18	3038:18	10	8
LEAF_NODE	3038:18	3038:18	11	8
LEAF_NODE	3038:19	3038:19	7	;
LEAF_NODE	3039:4	3039:4	5	}
JUMP_STATEMENT	3041:2	3041:12	3	return ( 0 ) ;
KEYWORD	3041:2	3041:2	4	return
LEAF_NODE	3041:2	3041:2	5	return
DESTINATION	3041:9	3041:9	4	( 0 )
EXPR	3041:9	3041:11	5	( 0 )
LEAF_NODE	3041:9	3041:9	6	(
FIELD	3041:10	3041:10	6	0
LEAF_NODE	3041:10	3041:10	7	0
LEAF_NODE	3041:11	3041:11	6	)
LEAF_NODE	3041:12	3041:12	4	;
LEAF_NODE	3042:2	3042:2	2	}
FUNCTION_DEF	3044:0	3147:2	1	
RETURN_TYPE	3044:0	3044:7	2	static int
LEAF_NODE	3044:0	3044:0	3	static
TYPE_NAME	3044:7	3044:7	3	int
LEAF_NODE	3044:7	3044:7	4	int
FUNCTION_NAME	3045:0	3045:0	2	extractContigSamples32bits
LEAF_NODE	3045:0	3045:0	3	extractContigSamples32bits
PARAMETER_LIST	3045:27	3047:49	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end )
LEAF_NODE	3045:27	3045:27	3	(
PARAMETER_DECL	3045:28	3045:35	3	uint8 * in
TYPE	3045:28	3045:34	4	uint8 *
TYPE_NAME	3045:28	3045:28	5	uint8
LEAF_NODE	3045:28	3045:28	6	uint8
POINTER	3045:34	3045:34	5	*
LEAF_NODE	3045:34	3045:34	6	*
NAME	3045:35	3045:35	4	in
LEAF_NODE	3045:35	3045:35	5	in
LEAF_NODE	3045:37	3045:37	3	,
PARAMETER_DECL	3045:39	3045:46	3	uint8 * out
TYPE	3045:39	3045:45	4	uint8 *
TYPE_NAME	3045:39	3045:39	5	uint8
LEAF_NODE	3045:39	3045:39	6	uint8
POINTER	3045:45	3045:45	5	*
LEAF_NODE	3045:45	3045:45	6	*
NAME	3045:46	3045:46	4	out
LEAF_NODE	3045:46	3045:46	5	out
LEAF_NODE	3045:49	3045:49	3	,
PARAMETER_DECL	3045:51	3045:58	3	uint32 cols
TYPE	3045:51	3045:51	4	uint32
TYPE_NAME	3045:51	3045:51	5	uint32
LEAF_NODE	3045:51	3045:51	6	uint32
NAME	3045:58	3045:58	4	cols
LEAF_NODE	3045:58	3045:58	5	cols
LEAF_NODE	3045:62	3045:62	3	,
PARAMETER_DECL	3046:28	3046:38	3	tsample_t sample
TYPE	3046:28	3046:28	4	tsample_t
TYPE_NAME	3046:28	3046:28	5	tsample_t
LEAF_NODE	3046:28	3046:28	6	tsample_t
NAME	3046:38	3046:38	4	sample
LEAF_NODE	3046:38	3046:38	5	sample
LEAF_NODE	3046:44	3046:44	3	,
PARAMETER_DECL	3046:46	3046:53	3	uint16 spp
TYPE	3046:46	3046:46	4	uint16
TYPE_NAME	3046:46	3046:46	5	uint16
LEAF_NODE	3046:46	3046:46	6	uint16
NAME	3046:53	3046:53	4	spp
LEAF_NODE	3046:53	3046:53	5	spp
LEAF_NODE	3046:56	3046:56	3	,
PARAMETER_DECL	3046:58	3046:65	3	uint16 bps
TYPE	3046:58	3046:58	4	uint16
TYPE_NAME	3046:58	3046:58	5	uint16
LEAF_NODE	3046:58	3046:58	6	uint16
NAME	3046:65	3046:65	4	bps
LEAF_NODE	3046:65	3046:65	5	bps
LEAF_NODE	3046:68	3046:68	3	,
PARAMETER_DECL	3047:8	3047:18	3	tsample_t count
TYPE	3047:8	3047:8	4	tsample_t
TYPE_NAME	3047:8	3047:8	5	tsample_t
LEAF_NODE	3047:8	3047:8	6	tsample_t
NAME	3047:18	3047:18	4	count
LEAF_NODE	3047:18	3047:18	5	count
LEAF_NODE	3047:23	3047:23	3	,
PARAMETER_DECL	3047:25	3047:32	3	uint32 start
TYPE	3047:25	3047:25	4	uint32
TYPE_NAME	3047:25	3047:25	5	uint32
LEAF_NODE	3047:25	3047:25	6	uint32
NAME	3047:32	3047:32	4	start
LEAF_NODE	3047:32	3047:32	5	start
LEAF_NODE	3047:37	3047:37	3	,
PARAMETER_DECL	3047:39	3047:46	3	uint32 end
TYPE	3047:39	3047:39	4	uint32
TYPE_NAME	3047:39	3047:39	5	uint32
LEAF_NODE	3047:39	3047:39	6	uint32
NAME	3047:46	3047:46	4	end
LEAF_NODE	3047:46	3047:46	5	end
LEAF_NODE	3047:49	3047:49	3	)
LEAF_NODE	3048:2	3048:2	2	{
STATEMENTS	3049:2	3146:2	2	
SIMPLE_DECL	3049:2	3049:58	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	3049:2	3049:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	3049:2	3049:9	5	int ready_bits ; ready_bits = 0
TYPE	3049:2	3049:2	6	int
TYPE_NAME	3049:2	3049:2	7	int
LEAF_NODE	3049:2	3049:2	8	int
NAME	3049:9	3049:9	6	ready_bits
LEAF_NODE	3049:9	3049:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	3049:9	3049:9	6	ready_bits = 0
ASSIGN	3049:9	3049:22	7	ready_bits = 0
LVAL	3049:9	3049:9	8	ready_bits
NAME	3049:9	3049:9	9	ready_bits
LEAF_NODE	3049:9	3049:9	10	ready_bits
ASSIGN_OP	3049:20	3049:20	8	=
LEAF_NODE	3049:20	3049:20	9	=
RVAL	3049:22	3049:22	8	0
FIELD	3049:22	3049:22	9	0
LEAF_NODE	3049:22	3049:22	10	0
LEAF_NODE	3049:23	3049:23	5	,
VAR_DECL	3049:2	3049:25	5	int sindex ; sindex = 0
TYPE	3049:2	3049:2	6	int
TYPE_NAME	3049:2	3049:2	7	int
LEAF_NODE	3049:2	3049:2	8	int
NAME	3049:25	3049:25	6	sindex
LEAF_NODE	3049:25	3049:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	3049:25	3049:25	6	sindex = 0
ASSIGN	3049:25	3049:34	7	sindex = 0
LVAL	3049:25	3049:25	8	sindex
NAME	3049:25	3049:25	9	sindex
LEAF_NODE	3049:25	3049:25	10	sindex
ASSIGN_OP	3049:32	3049:32	8	=
LEAF_NODE	3049:32	3049:32	9	=
RVAL	3049:34	3049:34	8	0
FIELD	3049:34	3049:34	9	0
LEAF_NODE	3049:34	3049:34	10	0
LEAF_NODE	3049:58	3049:58	4	;
SIMPLE_DECL	3050:2	3050:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	3050:2	3050:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3050:2	3050:9	5	uint32 col
TYPE	3050:2	3050:2	6	uint32
TYPE_NAME	3050:2	3050:2	7	uint32
LEAF_NODE	3050:2	3050:2	8	uint32
NAME	3050:9	3050:9	6	col
LEAF_NODE	3050:9	3050:9	7	col
LEAF_NODE	3050:12	3050:12	5	,
INIT_DECL_LIST	3050:2	3050:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3050:2	3050:14	6	uint32 src_byte
TYPE	3050:2	3050:2	7	uint32
TYPE_NAME	3050:2	3050:2	8	uint32
LEAF_NODE	3050:2	3050:2	9	uint32
NAME	3050:14	3050:14	7	src_byte
LEAF_NODE	3050:14	3050:14	8	src_byte
LEAF_NODE	3050:22	3050:22	6	,
INIT_DECL_LIST	3050:2	3050:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	3050:2	3050:24	7	uint32 src_bit
TYPE	3050:2	3050:2	8	uint32
TYPE_NAME	3050:2	3050:2	9	uint32
LEAF_NODE	3050:2	3050:2	10	uint32
NAME	3050:24	3050:24	8	src_bit
LEAF_NODE	3050:24	3050:24	9	src_bit
LEAF_NODE	3050:31	3050:31	7	,
VAR_DECL	3050:2	3050:33	7	uint32 bit_offset
TYPE	3050:2	3050:2	8	uint32
TYPE_NAME	3050:2	3050:2	9	uint32
LEAF_NODE	3050:2	3050:2	10	uint32
NAME	3050:33	3050:33	8	bit_offset
LEAF_NODE	3050:33	3050:33	9	bit_offset
LEAF_NODE	3050:43	3050:43	4	;
SIMPLE_DECL	3051:2	3051:37	3	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0 ;
INIT_DECL_LIST	3051:2	3051:2	4	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0
VAR_DECL	3051:2	3051:9	5	uint32 longbuff1 ; longbuff1 = 0
TYPE	3051:2	3051:2	6	uint32
TYPE_NAME	3051:2	3051:2	7	uint32
LEAF_NODE	3051:2	3051:2	8	uint32
NAME	3051:9	3051:9	6	longbuff1
LEAF_NODE	3051:9	3051:9	7	longbuff1
LEAF_NODE	0:0	0:0	6	;
INIT	3051:9	3051:9	6	longbuff1 = 0
ASSIGN	3051:9	3051:21	7	longbuff1 = 0
LVAL	3051:9	3051:9	8	longbuff1
NAME	3051:9	3051:9	9	longbuff1
LEAF_NODE	3051:9	3051:9	10	longbuff1
ASSIGN_OP	3051:19	3051:19	8	=
LEAF_NODE	3051:19	3051:19	9	=
RVAL	3051:21	3051:21	8	0
FIELD	3051:21	3051:21	9	0
LEAF_NODE	3051:21	3051:21	10	0
LEAF_NODE	3051:22	3051:22	5	,
VAR_DECL	3051:2	3051:24	5	uint32 longbuff2 ; longbuff2 = 0
TYPE	3051:2	3051:2	6	uint32
TYPE_NAME	3051:2	3051:2	7	uint32
LEAF_NODE	3051:2	3051:2	8	uint32
NAME	3051:24	3051:24	6	longbuff2
LEAF_NODE	3051:24	3051:24	7	longbuff2
LEAF_NODE	0:0	0:0	6	;
INIT	3051:24	3051:24	6	longbuff2 = 0
ASSIGN	3051:24	3051:36	7	longbuff2 = 0
LVAL	3051:24	3051:24	8	longbuff2
NAME	3051:24	3051:24	9	longbuff2
LEAF_NODE	3051:24	3051:24	10	longbuff2
ASSIGN_OP	3051:34	3051:34	8	=
LEAF_NODE	3051:34	3051:34	9	=
RVAL	3051:36	3051:36	8	0
FIELD	3051:36	3051:36	9	0
LEAF_NODE	3051:36	3051:36	10	0
LEAF_NODE	3051:37	3051:37	4	;
SIMPLE_DECL	3052:2	3052:36	3	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3052:2	3052:2	4	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0
VAR_DECL	3052:2	3052:9	5	uint64 maskbits ; maskbits = 0
TYPE	3052:2	3052:2	6	uint64
TYPE_NAME	3052:2	3052:2	7	uint64
LEAF_NODE	3052:2	3052:2	8	uint64
NAME	3052:9	3052:9	6	maskbits
LEAF_NODE	3052:9	3052:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3052:9	3052:9	6	maskbits = 0
ASSIGN	3052:9	3052:20	7	maskbits = 0
LVAL	3052:9	3052:9	8	maskbits
NAME	3052:9	3052:9	9	maskbits
LEAF_NODE	3052:9	3052:9	10	maskbits
ASSIGN_OP	3052:18	3052:18	8	=
LEAF_NODE	3052:18	3052:18	9	=
RVAL	3052:20	3052:20	8	0
FIELD	3052:20	3052:20	9	0
LEAF_NODE	3052:20	3052:20	10	0
LEAF_NODE	3052:21	3052:21	5	,
VAR_DECL	3052:2	3052:23	5	uint64 matchbits ; matchbits = 0
TYPE	3052:2	3052:2	6	uint64
TYPE_NAME	3052:2	3052:2	7	uint64
LEAF_NODE	3052:2	3052:2	8	uint64
NAME	3052:23	3052:23	6	matchbits
LEAF_NODE	3052:23	3052:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3052:23	3052:23	6	matchbits = 0
ASSIGN	3052:23	3052:35	7	matchbits = 0
LVAL	3052:23	3052:23	8	matchbits
NAME	3052:23	3052:23	9	matchbits
LEAF_NODE	3052:23	3052:23	10	matchbits
ASSIGN_OP	3052:33	3052:33	8	=
LEAF_NODE	3052:33	3052:33	9	=
RVAL	3052:35	3052:35	8	0
FIELD	3052:35	3052:35	9	0
LEAF_NODE	3052:35	3052:35	10	0
LEAF_NODE	3052:36	3052:36	4	;
SIMPLE_DECL	3053:2	3053:40	3	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0 ;
INIT_DECL_LIST	3053:2	3053:2	4	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	3053:2	3053:9	5	uint64 buff1 ; buff1 = 0
TYPE	3053:2	3053:2	6	uint64
TYPE_NAME	3053:2	3053:2	7	uint64
LEAF_NODE	3053:2	3053:2	8	uint64
NAME	3053:9	3053:9	6	buff1
LEAF_NODE	3053:9	3053:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3053:9	3053:9	6	buff1 = 0
ASSIGN	3053:9	3053:17	7	buff1 = 0
LVAL	3053:9	3053:9	8	buff1
NAME	3053:9	3053:9	9	buff1
LEAF_NODE	3053:9	3053:9	10	buff1
ASSIGN_OP	3053:15	3053:15	8	=
LEAF_NODE	3053:15	3053:15	9	=
RVAL	3053:17	3053:17	8	0
FIELD	3053:17	3053:17	9	0
LEAF_NODE	3053:17	3053:17	10	0
LEAF_NODE	3053:18	3053:18	5	,
INIT_DECL_LIST	3053:2	3053:2	5	uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	3053:2	3053:20	6	uint64 buff2 ; buff2 = 0
TYPE	3053:2	3053:2	7	uint64
TYPE_NAME	3053:2	3053:2	8	uint64
LEAF_NODE	3053:2	3053:2	9	uint64
NAME	3053:20	3053:20	7	buff2
LEAF_NODE	3053:20	3053:20	8	buff2
LEAF_NODE	0:0	0:0	7	;
INIT	3053:20	3053:20	7	buff2 = 0
ASSIGN	3053:20	3053:28	8	buff2 = 0
LVAL	3053:20	3053:20	9	buff2
NAME	3053:20	3053:20	10	buff2
LEAF_NODE	3053:20	3053:20	11	buff2
ASSIGN_OP	3053:26	3053:26	9	=
LEAF_NODE	3053:26	3053:26	10	=
RVAL	3053:28	3053:28	9	0
FIELD	3053:28	3053:28	10	0
LEAF_NODE	3053:28	3053:28	11	0
LEAF_NODE	3053:29	3053:29	6	,
VAR_DECL	3053:2	3053:31	6	uint64 buff3 ; buff3 = 0
TYPE	3053:2	3053:2	7	uint64
TYPE_NAME	3053:2	3053:2	8	uint64
LEAF_NODE	3053:2	3053:2	9	uint64
NAME	3053:31	3053:31	7	buff3
LEAF_NODE	3053:31	3053:31	8	buff3
LEAF_NODE	0:0	0:0	7	;
INIT	3053:31	3053:31	7	buff3 = 0
ASSIGN	3053:31	3053:39	8	buff3 = 0
LVAL	3053:31	3053:31	9	buff3
NAME	3053:31	3053:31	10	buff3
LEAF_NODE	3053:31	3053:31	11	buff3
ASSIGN_OP	3053:37	3053:37	9	=
LEAF_NODE	3053:37	3053:37	10	=
RVAL	3053:39	3053:39	9	0
FIELD	3053:39	3053:39	10	0
LEAF_NODE	3053:39	3053:39	11	0
LEAF_NODE	3053:40	3053:40	4	;
SIMPLE_DECL	3054:2	3054:67	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0 ;
INIT_DECL_LIST	3054:2	3054:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	3054:2	3054:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	3054:2	3054:2	6	uint8
TYPE_NAME	3054:2	3054:2	7	uint8
LEAF_NODE	3054:2	3054:2	8	uint8
NAME	3054:9	3054:9	6	bytebuff1
LEAF_NODE	3054:9	3054:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	3054:9	3054:9	6	bytebuff1 = 0
ASSIGN	3054:9	3054:21	7	bytebuff1 = 0
LVAL	3054:9	3054:9	8	bytebuff1
NAME	3054:9	3054:9	9	bytebuff1
LEAF_NODE	3054:9	3054:9	10	bytebuff1
ASSIGN_OP	3054:19	3054:19	8	=
LEAF_NODE	3054:19	3054:19	9	=
RVAL	3054:21	3054:21	8	0
FIELD	3054:21	3054:21	9	0
LEAF_NODE	3054:21	3054:21	10	0
LEAF_NODE	3054:22	3054:22	5	,
INIT_DECL_LIST	3054:2	3054:2	5	uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	3054:2	3054:24	6	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	3054:2	3054:2	7	uint8
TYPE_NAME	3054:2	3054:2	8	uint8
LEAF_NODE	3054:2	3054:2	9	uint8
NAME	3054:24	3054:24	7	bytebuff2
LEAF_NODE	3054:24	3054:24	8	bytebuff2
LEAF_NODE	0:0	0:0	7	;
INIT	3054:24	3054:24	7	bytebuff2 = 0
ASSIGN	3054:24	3054:36	8	bytebuff2 = 0
LVAL	3054:24	3054:24	9	bytebuff2
NAME	3054:24	3054:24	10	bytebuff2
LEAF_NODE	3054:24	3054:24	11	bytebuff2
ASSIGN_OP	3054:34	3054:34	9	=
LEAF_NODE	3054:34	3054:34	10	=
RVAL	3054:36	3054:36	9	0
FIELD	3054:36	3054:36	10	0
LEAF_NODE	3054:36	3054:36	11	0
LEAF_NODE	3054:37	3054:37	6	,
INIT_DECL_LIST	3054:2	3054:2	6	uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	3054:2	3054:39	7	uint8 bytebuff3 ; bytebuff3 = 0
TYPE	3054:2	3054:2	8	uint8
TYPE_NAME	3054:2	3054:2	9	uint8
LEAF_NODE	3054:2	3054:2	10	uint8
NAME	3054:39	3054:39	8	bytebuff3
LEAF_NODE	3054:39	3054:39	9	bytebuff3
LEAF_NODE	0:0	0:0	8	;
INIT	3054:39	3054:39	8	bytebuff3 = 0
ASSIGN	3054:39	3054:51	9	bytebuff3 = 0
LVAL	3054:39	3054:39	10	bytebuff3
NAME	3054:39	3054:39	11	bytebuff3
LEAF_NODE	3054:39	3054:39	12	bytebuff3
ASSIGN_OP	3054:49	3054:49	10	=
LEAF_NODE	3054:49	3054:49	11	=
RVAL	3054:51	3054:51	10	0
FIELD	3054:51	3054:51	11	0
LEAF_NODE	3054:51	3054:51	12	0
LEAF_NODE	3054:52	3054:52	7	,
VAR_DECL	3054:2	3054:54	7	uint8 bytebuff4 ; bytebuff4 = 0
TYPE	3054:2	3054:2	8	uint8
TYPE_NAME	3054:2	3054:2	9	uint8
LEAF_NODE	3054:2	3054:2	10	uint8
NAME	3054:54	3054:54	8	bytebuff4
LEAF_NODE	3054:54	3054:54	9	bytebuff4
LEAF_NODE	0:0	0:0	8	;
INIT	3054:54	3054:54	8	bytebuff4 = 0
ASSIGN	3054:54	3054:66	9	bytebuff4 = 0
LVAL	3054:54	3054:54	10	bytebuff4
NAME	3054:54	3054:54	11	bytebuff4
LEAF_NODE	3054:54	3054:54	12	bytebuff4
ASSIGN_OP	3054:64	3054:64	10	=
LEAF_NODE	3054:64	3054:64	11	=
RVAL	3054:66	3054:66	10	0
FIELD	3054:66	3054:66	11	0
LEAF_NODE	3054:66	3054:66	12	0
LEAF_NODE	3054:67	3054:67	4	;
SIMPLE_DECL	3055:2	3055:17	3	uint8 * src ; src = in ;
VAR_DECL	3055:2	3055:9	4	uint8 * src ; src = in
TYPE	3055:2	3055:8	5	uint8 *
TYPE_NAME	3055:2	3055:2	6	uint8
LEAF_NODE	3055:2	3055:2	7	uint8
POINTER	3055:8	3055:8	6	*
LEAF_NODE	3055:8	3055:8	7	*
NAME	3055:9	3055:9	5	src
LEAF_NODE	3055:9	3055:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3055:9	3055:9	5	src = in
ASSIGN	3055:9	3055:15	6	src = in
LVAL	3055:9	3055:9	7	src
NAME	3055:9	3055:9	8	src
LEAF_NODE	3055:9	3055:9	9	src
ASSIGN_OP	3055:13	3055:13	7	=
LEAF_NODE	3055:13	3055:13	8	=
RVAL	3055:15	3055:15	7	in
FIELD	3055:15	3055:15	8	in
LEAF_NODE	3055:15	3055:15	9	in
LEAF_NODE	3055:17	3055:17	4	;
SIMPLE_DECL	3056:2	3056:18	3	uint8 * dst ; dst = out ;
VAR_DECL	3056:2	3056:9	4	uint8 * dst ; dst = out
TYPE	3056:2	3056:8	5	uint8 *
TYPE_NAME	3056:2	3056:2	6	uint8
LEAF_NODE	3056:2	3056:2	7	uint8
POINTER	3056:8	3056:8	6	*
LEAF_NODE	3056:8	3056:8	7	*
NAME	3056:9	3056:9	5	dst
LEAF_NODE	3056:9	3056:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3056:9	3056:9	5	dst = out
ASSIGN	3056:9	3056:15	6	dst = out
LVAL	3056:9	3056:9	7	dst
NAME	3056:9	3056:9	8	dst
LEAF_NODE	3056:9	3056:9	9	dst
ASSIGN_OP	3056:13	3056:13	7	=
LEAF_NODE	3056:13	3056:13	8	=
RVAL	3056:15	3056:15	7	out
FIELD	3056:15	3056:15	8	out
LEAF_NODE	3056:15	3056:15	9	out
LEAF_NODE	3056:18	3056:18	4	;
SELECTION	3058:2	3059:4	3	
KEYWORD	3058:2	3058:2	4	if
LEAF_NODE	3058:2	3058:2	5	if
LEAF_NODE	3058:5	3058:5	4	(
CONDITION	3058:6	3058:6	4	( in == NULL ) || ( out == NULL )
EXPR	3058:6	3058:6	5	( in == NULL ) || ( out == NULL )
OR	3058:6	3058:22	6	( in == NULL ) || ( out == NULL )
EXPR	3058:6	3058:17	7	( in == NULL )
LEAF_NODE	3058:6	3058:6	8	(
FIELD	3058:7	3058:7	8	in
LEAF_NODE	3058:7	3058:7	9	in
EQ_OPERATOR	3058:10	3058:10	8	==
LEAF_NODE	3058:10	3058:10	9	==
FIELD	3058:13	3058:13	8	NULL
LEAF_NODE	3058:13	3058:13	9	NULL
LEAF_NODE	3058:17	3058:17	8	)
LEAF_NODE	3058:19	3058:19	7	||
EXPR	3058:22	3058:34	7	( out == NULL )
LEAF_NODE	3058:22	3058:22	8	(
FIELD	3058:23	3058:23	8	out
LEAF_NODE	3058:23	3058:23	9	out
EQ_OPERATOR	3058:27	3058:27	8	==
LEAF_NODE	3058:27	3058:27	9	==
FIELD	3058:30	3058:30	8	NULL
LEAF_NODE	3058:30	3058:30	9	NULL
LEAF_NODE	3058:34	3058:34	8	)
LEAF_NODE	3058:35	3058:35	4	)
STATEMENTS	3059:4	3062:4	4	
LEAF_NODE	3059:4	3059:4	5	{
STATEMENTS	3060:4	3061:4	5	
EXPR_STATEMENT	3060:4	3060:76	6	TIFFError ( "extractContigSamples32bits" , "Invalid input or output buffer" ) ;
EXPR	3060:4	3060:4	7	TIFFError ( "extractContigSamples32bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3060:4	3060:75	8	TIFFError ( "extractContigSamples32bits" , "Invalid input or output buffer" )
CALLEE	3060:4	3060:4	9	TIFFError
LEAF_NODE	3060:4	3060:4	10	TIFFError
LEAF_NODE	3060:13	3060:13	9	(
ARGUMENT	3060:14	3060:14	9	"extractContigSamples32bits"
FIELD	3060:14	3060:14	10	"extractContigSamples32bits"
LEAF_NODE	3060:14	3060:14	11	"extractContigSamples32bits"
LEAF_NODE	3060:42	3060:42	9	,
ARGUMENT	3060:43	3060:43	9	"Invalid input or output buffer"
FIELD	3060:43	3060:43	10	"Invalid input or output buffer"
LEAF_NODE	3060:43	3060:43	11	"Invalid input or output buffer"
LEAF_NODE	3060:75	3060:75	9	)
LEAF_NODE	3060:76	3060:76	7	;
JUMP_STATEMENT	3061:4	3061:14	6	return ( 1 ) ;
KEYWORD	3061:4	3061:4	7	return
LEAF_NODE	3061:4	3061:4	8	return
DESTINATION	3061:11	3061:11	7	( 1 )
EXPR	3061:11	3061:13	8	( 1 )
LEAF_NODE	3061:11	3061:11	9	(
FIELD	3061:12	3061:12	9	1
LEAF_NODE	3061:12	3061:12	10	1
LEAF_NODE	3061:13	3061:13	9	)
LEAF_NODE	3061:14	3061:14	7	;
LEAF_NODE	3062:4	3062:4	5	}
SELECTION	3065:2	3066:4	3	
KEYWORD	3065:2	3065:2	4	if
LEAF_NODE	3065:2	3065:2	5	if
LEAF_NODE	3065:5	3065:5	4	(
CONDITION	3065:6	3065:6	4	( start > end ) || ( start > cols )
EXPR	3065:6	3065:6	5	( start > end ) || ( start > cols )
OR	3065:6	3065:23	6	( start > end ) || ( start > cols )
EXPR	3065:6	3065:18	7	( start > end )
LEAF_NODE	3065:6	3065:6	8	(
FIELD	3065:7	3065:7	8	start
LEAF_NODE	3065:7	3065:7	9	start
REL_OPERATOR	3065:13	3065:13	8	>
LEAF_NODE	3065:13	3065:13	9	>
FIELD	3065:15	3065:15	8	end
LEAF_NODE	3065:15	3065:15	9	end
LEAF_NODE	3065:18	3065:18	8	)
LEAF_NODE	3065:20	3065:20	7	||
EXPR	3065:23	3065:36	7	( start > cols )
LEAF_NODE	3065:23	3065:23	8	(
FIELD	3065:24	3065:24	8	start
LEAF_NODE	3065:24	3065:24	9	start
REL_OPERATOR	3065:30	3065:30	8	>
LEAF_NODE	3065:30	3065:30	9	>
FIELD	3065:32	3065:32	8	cols
LEAF_NODE	3065:32	3065:32	9	cols
LEAF_NODE	3065:36	3065:36	8	)
LEAF_NODE	3065:37	3065:37	4	)
STATEMENTS	3066:4	3070:4	4	
LEAF_NODE	3066:4	3066:4	5	{
STATEMENTS	3067:4	3069:4	5	
EXPR_STATEMENT	3067:4	3068:62	6	TIFFError ( "extractContigSamples32bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	3067:4	3067:4	7	TIFFError ( "extractContigSamples32bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	3067:4	3068:61	8	TIFFError ( "extractContigSamples32bits" , "Invalid start column value %d ignored" , start )
CALLEE	3067:4	3067:4	9	TIFFError
LEAF_NODE	3067:4	3067:4	10	TIFFError
LEAF_NODE	3067:14	3067:14	9	(
ARGUMENT	3067:15	3067:15	9	"extractContigSamples32bits"
FIELD	3067:15	3067:15	10	"extractContigSamples32bits"
LEAF_NODE	3067:15	3067:15	11	"extractContigSamples32bits"
LEAF_NODE	3067:43	3067:43	9	,
ARGUMENT	3068:15	3068:15	9	"Invalid start column value %d ignored"
FIELD	3068:15	3068:15	10	"Invalid start column value %d ignored"
LEAF_NODE	3068:15	3068:15	11	"Invalid start column value %d ignored"
LEAF_NODE	3068:54	3068:54	9	,
ARGUMENT	3068:56	3068:56	9	start
FIELD	3068:56	3068:56	10	start
LEAF_NODE	3068:56	3068:56	11	start
LEAF_NODE	3068:61	3068:61	9	)
LEAF_NODE	3068:62	3068:62	7	;
EXPR_STATEMENT	3069:4	3069:13	6	start = 0 ;
EXPR	3069:4	3069:4	7	start = 0
ASSIGN	3069:4	3069:12	8	start = 0
LVAL	3069:4	3069:4	9	start
FIELD	3069:4	3069:4	10	start
LEAF_NODE	3069:4	3069:4	11	start
ASSIGN_OP	3069:10	3069:10	9	=
LEAF_NODE	3069:10	3069:10	10	=
RVAL	3069:12	3069:12	9	0
FIELD	3069:12	3069:12	10	0
LEAF_NODE	3069:12	3069:12	11	0
LEAF_NODE	3069:13	3069:13	7	;
LEAF_NODE	3070:4	3070:4	5	}
SELECTION	3071:2	3072:4	3	
KEYWORD	3071:2	3071:2	4	if
LEAF_NODE	3071:2	3071:2	5	if
LEAF_NODE	3071:5	3071:5	4	(
CONDITION	3071:6	3071:6	4	( end == 0 ) || ( end > cols )
EXPR	3071:6	3071:6	5	( end == 0 ) || ( end > cols )
OR	3071:6	3071:20	6	( end == 0 ) || ( end > cols )
EXPR	3071:6	3071:15	7	( end == 0 )
LEAF_NODE	3071:6	3071:6	8	(
FIELD	3071:7	3071:7	8	end
LEAF_NODE	3071:7	3071:7	9	end
EQ_OPERATOR	3071:11	3071:11	8	==
LEAF_NODE	3071:11	3071:11	9	==
FIELD	3071:14	3071:14	8	0
LEAF_NODE	3071:14	3071:14	9	0
LEAF_NODE	3071:15	3071:15	8	)
LEAF_NODE	3071:17	3071:17	7	||
EXPR	3071:20	3071:31	7	( end > cols )
LEAF_NODE	3071:20	3071:20	8	(
FIELD	3071:21	3071:21	8	end
LEAF_NODE	3071:21	3071:21	9	end
REL_OPERATOR	3071:25	3071:25	8	>
LEAF_NODE	3071:25	3071:25	9	>
FIELD	3071:27	3071:27	8	cols
LEAF_NODE	3071:27	3071:27	9	cols
LEAF_NODE	3071:31	3071:31	8	)
LEAF_NODE	3071:32	3071:32	4	)
STATEMENTS	3072:4	3076:4	4	
LEAF_NODE	3072:4	3072:4	5	{
STATEMENTS	3073:4	3075:4	5	
EXPR_STATEMENT	3073:4	3074:58	6	TIFFError ( "extractContigSamples32bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	3073:4	3073:4	7	TIFFError ( "extractContigSamples32bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	3073:4	3074:57	8	TIFFError ( "extractContigSamples32bits" , "Invalid end column value %d ignored" , end )
CALLEE	3073:4	3073:4	9	TIFFError
LEAF_NODE	3073:4	3073:4	10	TIFFError
LEAF_NODE	3073:14	3073:14	9	(
ARGUMENT	3073:15	3073:15	9	"extractContigSamples32bits"
FIELD	3073:15	3073:15	10	"extractContigSamples32bits"
LEAF_NODE	3073:15	3073:15	11	"extractContigSamples32bits"
LEAF_NODE	3073:43	3073:43	9	,
ARGUMENT	3074:15	3074:15	9	"Invalid end column value %d ignored"
FIELD	3074:15	3074:15	10	"Invalid end column value %d ignored"
LEAF_NODE	3074:15	3074:15	11	"Invalid end column value %d ignored"
LEAF_NODE	3074:52	3074:52	9	,
ARGUMENT	3074:54	3074:54	9	end
FIELD	3074:54	3074:54	10	end
LEAF_NODE	3074:54	3074:54	11	end
LEAF_NODE	3074:57	3074:57	9	)
LEAF_NODE	3074:58	3074:58	7	;
EXPR_STATEMENT	3075:4	3075:14	6	end = cols ;
EXPR	3075:4	3075:4	7	end = cols
ASSIGN	3075:4	3075:10	8	end = cols
LVAL	3075:4	3075:4	9	end
FIELD	3075:4	3075:4	10	end
LEAF_NODE	3075:4	3075:4	11	end
ASSIGN_OP	3075:8	3075:8	9	=
LEAF_NODE	3075:8	3075:8	10	=
RVAL	3075:10	3075:10	9	cols
FIELD	3075:10	3075:10	10	cols
LEAF_NODE	3075:10	3075:10	11	cols
LEAF_NODE	3075:14	3075:14	7	;
LEAF_NODE	3076:4	3076:4	5	}
EXPR_STATEMENT	3079:2	3079:16	3	ready_bits = 0 ;
EXPR	3079:2	3079:2	4	ready_bits = 0
ASSIGN	3079:2	3079:15	5	ready_bits = 0
LVAL	3079:2	3079:2	6	ready_bits
FIELD	3079:2	3079:2	7	ready_bits
LEAF_NODE	3079:2	3079:2	8	ready_bits
ASSIGN_OP	3079:13	3079:13	6	=
LEAF_NODE	3079:13	3079:13	7	=
RVAL	3079:15	3079:15	6	0
FIELD	3079:15	3079:15	7	0
LEAF_NODE	3079:15	3079:15	8	0
LEAF_NODE	3079:16	3079:16	4	;
EXPR_STATEMENT	3080:2	3080:39	3	maskbits = ( uint64 ) - 1 >> ( 64 - bps ) ;
EXPR	3080:2	3080:2	4	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
ASSIGN	3080:2	3080:14	5	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
LVAL	3080:2	3080:2	6	maskbits
FIELD	3080:2	3080:2	7	maskbits
LEAF_NODE	3080:2	3080:2	8	maskbits
ASSIGN_OP	3080:11	3080:11	6	=
LEAF_NODE	3080:11	3080:11	7	=
RVAL	3080:14	3080:38	6	( uint64 ) - 1 >> ( 64 - bps )
LEAF_NODE	3080:14	3080:14	7	(
TYPE_NAME	3080:15	3080:15	7	uint64
LEAF_NODE	3080:15	3080:15	8	uint64
LEAF_NODE	3080:21	3080:21	7	)
UNARY_EXPR	3080:22	3080:23	7	- 1
UNARY_OPERATOR	3080:22	3080:22	8	-
LEAF_NODE	3080:22	3080:22	9	-
FIELD	3080:23	3080:23	8	1
LEAF_NODE	3080:23	3080:23	9	1
LEAF_NODE	3080:25	3080:25	7	>>
LEAF_NODE	3080:28	3080:28	7	(
FIELD	3080:30	3080:30	7	64
LEAF_NODE	3080:30	3080:30	8	64
LEAF_NODE	3080:33	3080:33	7	-
FIELD	3080:35	3080:35	7	bps
LEAF_NODE	3080:35	3080:35	8	bps
LEAF_NODE	3080:38	3080:38	7	)
LEAF_NODE	3080:39	3080:39	4	;
ITERATION	3081:2	3082:4	3	
KEYWORD	3081:2	3081:2	4	for
LEAF_NODE	3081:2	3081:2	5	for
LEAF_NODE	3081:6	3081:6	4	(
FOR_INIT	3081:7	3081:18	4	col = start ;
EXPR	3081:7	3081:7	5	col = start
ASSIGN	3081:7	3081:13	6	col = start
LVAL	3081:7	3081:7	7	col
FIELD	3081:7	3081:7	8	col
LEAF_NODE	3081:7	3081:7	9	col
ASSIGN_OP	3081:11	3081:11	7	=
LEAF_NODE	3081:11	3081:11	8	=
RVAL	3081:13	3081:13	7	start
FIELD	3081:13	3081:13	8	start
LEAF_NODE	3081:13	3081:13	9	start
LEAF_NODE	3081:18	3081:18	5	;
CONDITION	3081:20	3081:20	4	col < end
EXPR	3081:20	3081:26	5	col < end
FIELD	3081:20	3081:20	6	col
LEAF_NODE	3081:20	3081:20	7	col
REL_OPERATOR	3081:24	3081:24	6	<
LEAF_NODE	3081:24	3081:24	7	<
FIELD	3081:26	3081:26	6	end
LEAF_NODE	3081:26	3081:26	7	end
LEAF_NODE	3081:29	3081:29	4	;
FOR_EXPR	3081:31	3081:31	4	col ++
EXPR	3081:31	3081:31	5	col ++
FIELD	3081:31	3081:34	6	col ++
LEAF_NODE	3081:31	3081:31	7	col
LEAF_NODE	3081:34	3081:34	7	++
LEAF_NODE	3081:36	3081:36	4	)
STATEMENTS	3082:4	3137:4	4	
LEAF_NODE	3082:4	3082:4	5	{
STATEMENTS	3084:4	3085:4	5	
LEAF_NODE	3084:4	3084:4	6	bit_offset
LEAF_NODE	3084:15	3084:15	6	=
LEAF_NODE	3084:17	3084:17	6	col
EXPR_STATEMENT	3084:21	3084:32	6	* bps * spp ;
EXPR	3084:21	3084:29	7	* bps * spp
UNARY_EXPR	3084:21	3084:23	8	* bps
UNARY_OPERATOR	3084:21	3084:21	9	*
LEAF_NODE	3084:21	3084:21	10	*
FIELD	3084:23	3084:23	9	bps
LEAF_NODE	3084:23	3084:23	10	bps
LEAF_NODE	3084:27	3084:27	8	*
FIELD	3084:29	3084:29	8	spp
LEAF_NODE	3084:29	3084:29	9	spp
LEAF_NODE	3084:32	3084:32	7	;
ITERATION	3085:4	3086:6	6	
KEYWORD	3085:4	3085:4	7	for
LEAF_NODE	3085:4	3085:4	8	for
LEAF_NODE	3085:8	3085:8	7	(
FOR_INIT	3085:9	3085:24	7	sindex = sample ;
EXPR	3085:9	3085:9	8	sindex = sample
ASSIGN	3085:9	3085:18	9	sindex = sample
LVAL	3085:9	3085:9	10	sindex
FIELD	3085:9	3085:9	11	sindex
LEAF_NODE	3085:9	3085:9	12	sindex
ASSIGN_OP	3085:16	3085:16	10	=
LEAF_NODE	3085:16	3085:16	11	=
RVAL	3085:18	3085:18	10	sample
FIELD	3085:18	3085:18	11	sample
LEAF_NODE	3085:18	3085:18	12	sample
LEAF_NODE	3085:24	3085:24	8	;
CONDITION	3085:26	3085:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3085:26	3085:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	3085:26	3085:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3085:26	3085:39	10	( sindex < spp )
LEAF_NODE	3085:26	3085:26	11	(
FIELD	3085:27	3085:27	11	sindex
LEAF_NODE	3085:27	3085:27	12	sindex
REL_OPERATOR	3085:34	3085:34	11	<
LEAF_NODE	3085:34	3085:34	12	<
FIELD	3085:36	3085:36	11	spp
LEAF_NODE	3085:36	3085:36	12	spp
LEAF_NODE	3085:39	3085:39	11	)
LEAF_NODE	3085:41	3085:41	10	&&
EXPR	3085:44	3085:70	10	( sindex < ( sample + count ) )
LEAF_NODE	3085:44	3085:44	11	(
FIELD	3085:45	3085:45	11	sindex
LEAF_NODE	3085:45	3085:45	12	sindex
REL_OPERATOR	3085:52	3085:52	11	<
LEAF_NODE	3085:52	3085:52	12	<
LEAF_NODE	3085:54	3085:54	11	(
FIELD	3085:55	3085:55	11	sample
LEAF_NODE	3085:55	3085:55	12	sample
LEAF_NODE	3085:62	3085:62	11	+
FIELD	3085:64	3085:64	11	count
LEAF_NODE	3085:64	3085:64	12	count
LEAF_NODE	3085:69	3085:69	11	)
LEAF_NODE	3085:70	3085:70	11	)
LEAF_NODE	3085:71	3085:71	7	;
FOR_EXPR	3085:73	3085:73	7	sindex ++
EXPR	3085:73	3085:73	8	sindex ++
FIELD	3085:73	3085:79	9	sindex ++
LEAF_NODE	3085:73	3085:73	10	sindex
LEAF_NODE	3085:79	3085:79	10	++
LEAF_NODE	3085:81	3085:81	7	)
STATEMENTS	3086:6	3136:6	7	
LEAF_NODE	3086:6	3086:6	8	{
STATEMENTS	3087:6	3135:6	8	
SELECTION	3087:6	3088:8	9	
KEYWORD	3087:6	3087:6	10	if
LEAF_NODE	3087:6	3087:6	11	if
LEAF_NODE	3087:9	3087:9	10	(
CONDITION	3087:10	3087:10	10	sindex == 0
EXPR	3087:10	3087:20	11	sindex == 0
FIELD	3087:10	3087:10	12	sindex
LEAF_NODE	3087:10	3087:10	13	sindex
EQ_OPERATOR	3087:17	3087:17	12	==
LEAF_NODE	3087:17	3087:17	13	==
FIELD	3087:20	3087:20	12	0
LEAF_NODE	3087:20	3087:20	13	0
LEAF_NODE	3087:21	3087:21	10	)
STATEMENTS	3088:8	3091:8	10	
LEAF_NODE	3088:8	3088:8	11	{
STATEMENTS	3089:8	3090:8	11	
EXPR_STATEMENT	3089:8	3089:33	12	src_byte = bit_offset / 8 ;
EXPR	3089:8	3089:8	13	src_byte = bit_offset / 8
ASSIGN	3089:8	3089:19	14	src_byte = bit_offset / 8
LVAL	3089:8	3089:8	15	src_byte
FIELD	3089:8	3089:8	16	src_byte
LEAF_NODE	3089:8	3089:8	17	src_byte
ASSIGN_OP	3089:17	3089:17	15	=
LEAF_NODE	3089:17	3089:17	16	=
RVAL	3089:19	3089:32	15	bit_offset / 8
FIELD	3089:19	3089:19	16	bit_offset
LEAF_NODE	3089:19	3089:19	17	bit_offset
LEAF_NODE	3089:30	3089:30	16	/
FIELD	3089:32	3089:32	16	8
LEAF_NODE	3089:32	3089:32	17	8
LEAF_NODE	3089:33	3089:33	13	;
EXPR_STATEMENT	3090:8	3090:33	12	src_bit = bit_offset % 8 ;
EXPR	3090:8	3090:8	13	src_bit = bit_offset % 8
ASSIGN	3090:8	3090:19	14	src_bit = bit_offset % 8
LVAL	3090:8	3090:8	15	src_bit
FIELD	3090:8	3090:8	16	src_bit
LEAF_NODE	3090:8	3090:8	17	src_bit
ASSIGN_OP	3090:17	3090:17	15	=
LEAF_NODE	3090:17	3090:17	16	=
RVAL	3090:19	3090:32	15	bit_offset % 8
FIELD	3090:19	3090:19	16	bit_offset
LEAF_NODE	3090:19	3090:19	17	bit_offset
LEAF_NODE	3090:30	3090:30	16	%
FIELD	3090:32	3090:32	16	8
LEAF_NODE	3090:32	3090:32	17	8
LEAF_NODE	3090:33	3090:33	13	;
LEAF_NODE	3091:8	3091:8	11	}
SELECTION	3092:6	3093:8	9	
KEYWORD	3092:6	3092:6	10	else
LEAF_NODE	3092:6	3092:6	11	else
STATEMENTS	3093:8	3096:8	10	
LEAF_NODE	3093:8	3093:8	11	{
STATEMENTS	3094:8	3095:8	11	
EXPR_STATEMENT	3094:8	3094:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	3094:8	3094:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	3094:8	3094:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	3094:8	3094:8	15	src_byte
FIELD	3094:8	3094:8	16	src_byte
LEAF_NODE	3094:8	3094:8	17	src_byte
ASSIGN_OP	3094:17	3094:17	15	=
LEAF_NODE	3094:17	3094:17	16	=
RVAL	3094:19	3094:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	3094:19	3094:19	16	(
FIELD	3094:20	3094:20	16	bit_offset
LEAF_NODE	3094:20	3094:20	17	bit_offset
LEAF_NODE	3094:31	3094:31	16	+
LEAF_NODE	3094:33	3094:33	16	(
FIELD	3094:34	3094:34	16	sindex
LEAF_NODE	3094:34	3094:34	17	sindex
LEAF_NODE	3094:41	3094:41	16	*
FIELD	3094:43	3094:43	16	bps
LEAF_NODE	3094:43	3094:43	17	bps
LEAF_NODE	3094:46	3094:46	16	)
LEAF_NODE	3094:47	3094:47	16	)
LEAF_NODE	3094:49	3094:49	16	/
FIELD	3094:51	3094:51	16	8
LEAF_NODE	3094:51	3094:51	17	8
LEAF_NODE	3094:52	3094:52	13	;
EXPR_STATEMENT	3095:8	3095:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	3095:8	3095:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	3095:8	3095:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	3095:8	3095:8	15	src_bit
FIELD	3095:8	3095:8	16	src_bit
LEAF_NODE	3095:8	3095:8	17	src_bit
ASSIGN_OP	3095:17	3095:17	15	=
LEAF_NODE	3095:17	3095:17	16	=
RVAL	3095:19	3095:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	3095:19	3095:19	16	(
FIELD	3095:20	3095:20	16	bit_offset
LEAF_NODE	3095:20	3095:20	17	bit_offset
LEAF_NODE	3095:31	3095:31	16	+
LEAF_NODE	3095:33	3095:33	16	(
FIELD	3095:34	3095:34	16	sindex
LEAF_NODE	3095:34	3095:34	17	sindex
LEAF_NODE	3095:41	3095:41	16	*
FIELD	3095:43	3095:43	16	bps
LEAF_NODE	3095:43	3095:43	17	bps
LEAF_NODE	3095:46	3095:46	16	)
LEAF_NODE	3095:47	3095:47	16	)
LEAF_NODE	3095:49	3095:49	16	%
FIELD	3095:51	3095:51	16	8
LEAF_NODE	3095:51	3095:51	17	8
LEAF_NODE	3095:52	3095:52	13	;
LEAF_NODE	3096:8	3096:8	11	}
EXPR_STATEMENT	3098:6	3098:25	9	src = in + src_byte ;
EXPR	3098:6	3098:6	10	src = in + src_byte
ASSIGN	3098:6	3098:12	11	src = in + src_byte
LVAL	3098:6	3098:6	12	src
FIELD	3098:6	3098:6	13	src
LEAF_NODE	3098:6	3098:6	14	src
ASSIGN_OP	3098:10	3098:10	12	=
LEAF_NODE	3098:10	3098:10	13	=
RVAL	3098:12	3098:17	12	in + src_byte
FIELD	3098:12	3098:12	13	in
LEAF_NODE	3098:12	3098:12	14	in
LEAF_NODE	3098:15	3098:15	13	+
FIELD	3098:17	3098:17	13	src_byte
LEAF_NODE	3098:17	3098:17	14	src_byte
LEAF_NODE	3098:25	3098:25	10	;
EXPR_STATEMENT	3099:6	3099:50	9	matchbits = maskbits << ( 64 - src_bit - bps ) ;
EXPR	3099:6	3099:6	10	matchbits = maskbits << ( 64 - src_bit - bps )
ASSIGN	3099:6	3099:18	11	matchbits = maskbits << ( 64 - src_bit - bps )
LVAL	3099:6	3099:6	12	matchbits
FIELD	3099:6	3099:6	13	matchbits
LEAF_NODE	3099:6	3099:6	14	matchbits
ASSIGN_OP	3099:16	3099:16	12	=
LEAF_NODE	3099:16	3099:16	13	=
RVAL	3099:18	3099:49	12	maskbits << ( 64 - src_bit - bps )
FIELD	3099:18	3099:18	13	maskbits
LEAF_NODE	3099:18	3099:18	14	maskbits
LEAF_NODE	3099:27	3099:27	13	<<
LEAF_NODE	3099:30	3099:30	13	(
FIELD	3099:31	3099:31	13	64
LEAF_NODE	3099:31	3099:31	14	64
LEAF_NODE	3099:34	3099:34	13	-
FIELD	3099:36	3099:36	13	src_bit
LEAF_NODE	3099:36	3099:36	14	src_bit
LEAF_NODE	3099:44	3099:44	13	-
FIELD	3099:46	3099:46	13	bps
LEAF_NODE	3099:46	3099:46	14	bps
LEAF_NODE	3099:49	3099:49	13	)
LEAF_NODE	3099:50	3099:50	10	;
SELECTION	3100:6	3101:8	9	
KEYWORD	3100:6	3100:6	10	if
LEAF_NODE	3100:6	3100:6	11	if
LEAF_NODE	3100:9	3100:9	10	(
CONDITION	3100:10	3100:10	10	little_endian
EXPR	3100:10	3100:10	11	little_endian
FIELD	3100:10	3100:10	12	little_endian
LEAF_NODE	3100:10	3100:10	13	little_endian
LEAF_NODE	3100:23	3100:23	10	)
STATEMENTS	3101:8	3104:8	10	
LEAF_NODE	3101:8	3101:8	11	{
STATEMENTS	3102:1	3103:1	11	
EXPR_STATEMENT	3102:1	3102:70	12	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	3102:1	3102:1	13	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	3102:1	3102:13	14	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	3102:1	3102:1	15	longbuff1
FIELD	3102:1	3102:1	16	longbuff1
LEAF_NODE	3102:1	3102:1	17	longbuff1
ASSIGN_OP	3102:11	3102:11	15	=
LEAF_NODE	3102:11	3102:11	16	=
RVAL	3102:13	3102:13	15	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3102:13	3102:30	16	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3102:13	3102:26	17	( src [ 0 ] << 24 )
LEAF_NODE	3102:13	3102:13	18	(
FIELD	3102:14	3102:19	18	src [ 0 ]
LEAF_NODE	3102:14	3102:14	19	src
LEAF_NODE	3102:17	3102:17	19	[
EXPR	3102:18	3102:18	19	0
FIELD	3102:18	3102:18	20	0
LEAF_NODE	3102:18	3102:18	21	0
LEAF_NODE	3102:19	3102:19	19	]
LEAF_NODE	3102:21	3102:21	18	<<
FIELD	3102:24	3102:24	18	24
LEAF_NODE	3102:24	3102:24	19	24
LEAF_NODE	3102:26	3102:26	18	)
LEAF_NODE	3102:28	3102:28	17	|
BIT_OR_ELEM	3102:30	3102:30	17	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3102:30	3102:48	18	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3102:30	3102:43	19	( src [ 1 ] << 16 )
LEAF_NODE	3102:30	3102:30	20	(
FIELD	3102:31	3102:36	20	src [ 1 ]
LEAF_NODE	3102:31	3102:31	21	src
LEAF_NODE	3102:34	3102:34	21	[
EXPR	3102:35	3102:35	21	1
FIELD	3102:35	3102:35	22	1
LEAF_NODE	3102:35	3102:35	23	1
LEAF_NODE	3102:36	3102:36	21	]
LEAF_NODE	3102:38	3102:38	20	<<
FIELD	3102:41	3102:41	20	16
LEAF_NODE	3102:41	3102:41	21	16
LEAF_NODE	3102:43	3102:43	20	)
LEAF_NODE	3102:46	3102:46	19	|
BIT_OR_ELEM	3102:48	3102:48	19	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3102:48	3102:64	20	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3102:48	3102:60	21	( src [ 2 ] << 8 )
LEAF_NODE	3102:48	3102:48	22	(
FIELD	3102:49	3102:54	22	src [ 2 ]
LEAF_NODE	3102:49	3102:49	23	src
LEAF_NODE	3102:52	3102:52	23	[
EXPR	3102:53	3102:53	23	2
FIELD	3102:53	3102:53	24	2
LEAF_NODE	3102:53	3102:53	25	2
LEAF_NODE	3102:54	3102:54	23	]
LEAF_NODE	3102:56	3102:56	22	<<
FIELD	3102:59	3102:59	22	8
LEAF_NODE	3102:59	3102:59	23	8
LEAF_NODE	3102:60	3102:60	22	)
LEAF_NODE	3102:62	3102:62	21	|
BIT_OR_ELEM	3102:64	3102:64	21	src [ 3 ]
FIELD	3102:64	3102:69	22	src [ 3 ]
LEAF_NODE	3102:64	3102:64	23	src
LEAF_NODE	3102:67	3102:67	23	[
EXPR	3102:68	3102:68	23	3
FIELD	3102:68	3102:68	24	3
LEAF_NODE	3102:68	3102:68	25	3
LEAF_NODE	3102:69	3102:69	23	]
LEAF_NODE	3102:70	3102:70	13	;
EXPR_STATEMENT	3103:1	3103:22	12	longbuff2 = longbuff1 ;
EXPR	3103:1	3103:1	13	longbuff2 = longbuff1
ASSIGN	3103:1	3103:13	14	longbuff2 = longbuff1
LVAL	3103:1	3103:1	15	longbuff2
FIELD	3103:1	3103:1	16	longbuff2
LEAF_NODE	3103:1	3103:1	17	longbuff2
ASSIGN_OP	3103:11	3103:11	15	=
LEAF_NODE	3103:11	3103:11	16	=
RVAL	3103:13	3103:13	15	longbuff1
FIELD	3103:13	3103:13	16	longbuff1
LEAF_NODE	3103:13	3103:13	17	longbuff1
LEAF_NODE	3103:22	3103:22	13	;
LEAF_NODE	3104:8	3104:8	11	}
SELECTION	3105:6	3106:8	9	
KEYWORD	3105:6	3105:6	10	else
LEAF_NODE	3105:6	3105:6	11	else
STATEMENTS	3106:8	3109:1	10	
LEAF_NODE	3106:8	3106:8	11	{
STATEMENTS	3107:1	3108:1	11	
EXPR_STATEMENT	3107:1	3107:69	12	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	3107:1	3107:1	13	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	3107:1	3107:13	14	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	3107:1	3107:1	15	longbuff1
FIELD	3107:1	3107:1	16	longbuff1
LEAF_NODE	3107:1	3107:1	17	longbuff1
ASSIGN_OP	3107:11	3107:11	15	=
LEAF_NODE	3107:11	3107:11	16	=
RVAL	3107:13	3107:13	15	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3107:13	3107:30	16	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3107:13	3107:26	17	( src [ 3 ] << 24 )
LEAF_NODE	3107:13	3107:13	18	(
FIELD	3107:14	3107:19	18	src [ 3 ]
LEAF_NODE	3107:14	3107:14	19	src
LEAF_NODE	3107:17	3107:17	19	[
EXPR	3107:18	3107:18	19	3
FIELD	3107:18	3107:18	20	3
LEAF_NODE	3107:18	3107:18	21	3
LEAF_NODE	3107:19	3107:19	19	]
LEAF_NODE	3107:21	3107:21	18	<<
FIELD	3107:24	3107:24	18	24
LEAF_NODE	3107:24	3107:24	19	24
LEAF_NODE	3107:26	3107:26	18	)
LEAF_NODE	3107:28	3107:28	17	|
BIT_OR_ELEM	3107:30	3107:30	17	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3107:30	3107:47	18	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3107:30	3107:43	19	( src [ 2 ] << 16 )
LEAF_NODE	3107:30	3107:30	20	(
FIELD	3107:31	3107:36	20	src [ 2 ]
LEAF_NODE	3107:31	3107:31	21	src
LEAF_NODE	3107:34	3107:34	21	[
EXPR	3107:35	3107:35	21	2
FIELD	3107:35	3107:35	22	2
LEAF_NODE	3107:35	3107:35	23	2
LEAF_NODE	3107:36	3107:36	21	]
LEAF_NODE	3107:38	3107:38	20	<<
FIELD	3107:41	3107:41	20	16
LEAF_NODE	3107:41	3107:41	21	16
LEAF_NODE	3107:43	3107:43	20	)
LEAF_NODE	3107:45	3107:45	19	|
BIT_OR_ELEM	3107:47	3107:47	19	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3107:47	3107:63	20	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3107:47	3107:59	21	( src [ 1 ] << 8 )
LEAF_NODE	3107:47	3107:47	22	(
FIELD	3107:48	3107:53	22	src [ 1 ]
LEAF_NODE	3107:48	3107:48	23	src
LEAF_NODE	3107:51	3107:51	23	[
EXPR	3107:52	3107:52	23	1
FIELD	3107:52	3107:52	24	1
LEAF_NODE	3107:52	3107:52	25	1
LEAF_NODE	3107:53	3107:53	23	]
LEAF_NODE	3107:55	3107:55	22	<<
FIELD	3107:58	3107:58	22	8
LEAF_NODE	3107:58	3107:58	23	8
LEAF_NODE	3107:59	3107:59	22	)
LEAF_NODE	3107:61	3107:61	21	|
BIT_OR_ELEM	3107:63	3107:63	21	src [ 0 ]
FIELD	3107:63	3107:68	22	src [ 0 ]
LEAF_NODE	3107:63	3107:63	23	src
LEAF_NODE	3107:66	3107:66	23	[
EXPR	3107:67	3107:67	23	0
FIELD	3107:67	3107:67	24	0
LEAF_NODE	3107:67	3107:67	25	0
LEAF_NODE	3107:68	3107:68	23	]
LEAF_NODE	3107:69	3107:69	13	;
EXPR_STATEMENT	3108:1	3108:22	12	longbuff2 = longbuff1 ;
EXPR	3108:1	3108:1	13	longbuff2 = longbuff1
ASSIGN	3108:1	3108:13	14	longbuff2 = longbuff1
LVAL	3108:1	3108:1	15	longbuff2
FIELD	3108:1	3108:1	16	longbuff2
LEAF_NODE	3108:1	3108:1	17	longbuff2
ASSIGN_OP	3108:11	3108:11	15	=
LEAF_NODE	3108:11	3108:11	16	=
RVAL	3108:13	3108:13	15	longbuff1
FIELD	3108:13	3108:13	16	longbuff1
LEAF_NODE	3108:13	3108:13	17	longbuff1
LEAF_NODE	3108:22	3108:22	13	;
LEAF_NODE	3109:1	3109:1	11	}
EXPR_STATEMENT	3111:6	3111:51	9	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2 ;
EXPR	3111:6	3111:6	10	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
ASSIGN	3111:6	3111:14	11	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
LVAL	3111:6	3111:6	12	buff3
FIELD	3111:6	3111:6	13	buff3
LEAF_NODE	3111:6	3111:6	14	buff3
ASSIGN_OP	3111:12	3111:12	12	=
LEAF_NODE	3111:12	3111:12	13	=
RVAL	3111:14	3111:14	12	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR	3111:14	3111:42	13	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR_ELEM	3111:14	3111:38	14	( ( uint64 ) longbuff1 << 32 )
LEAF_NODE	3111:14	3111:14	15	(
LEAF_NODE	3111:15	3111:15	15	(
TYPE_NAME	3111:16	3111:16	15	uint64
LEAF_NODE	3111:16	3111:16	16	uint64
LEAF_NODE	3111:22	3111:22	15	)
FIELD	3111:23	3111:23	15	longbuff1
LEAF_NODE	3111:23	3111:23	16	longbuff1
LEAF_NODE	3111:33	3111:33	15	<<
FIELD	3111:36	3111:36	15	32
LEAF_NODE	3111:36	3111:36	16	32
LEAF_NODE	3111:38	3111:38	15	)
LEAF_NODE	3111:40	3111:40	14	|
BIT_OR_ELEM	3111:42	3111:42	14	longbuff2
FIELD	3111:42	3111:42	15	longbuff2
LEAF_NODE	3111:42	3111:42	16	longbuff2
LEAF_NODE	3111:51	3111:51	10	;
LEAF_NODE	3112:6	3112:6	9	buff1
LEAF_NODE	3112:12	3112:12	9	=
LEAF_NODE	3112:14	3112:14	9	(
LEAF_NODE	3112:15	3112:15	9	buff3
LEAF_NODE	3112:21	3112:21	9	&
LEAF_NODE	3112:23	3112:23	9	matchbits
LEAF_NODE	3112:32	3112:32	9	)
LEAF_NODE	3112:34	3112:34	9	<<
LEAF_NODE	3112:37	3112:37	9	(
LEAF_NODE	3112:38	3112:38	9	src_bit
LEAF_NODE	3112:45	3112:45	9	)
LEAF_NODE	3112:46	3112:46	9	;
SELECTION	3115:6	3116:8	9	
KEYWORD	3115:6	3115:6	10	if
LEAF_NODE	3115:6	3115:6	11	if
LEAF_NODE	3115:9	3115:9	10	(
CONDITION	3115:10	3115:10	10	ready_bits >= 32
EXPR	3115:10	3115:24	11	ready_bits >= 32
FIELD	3115:10	3115:10	12	ready_bits
LEAF_NODE	3115:10	3115:10	13	ready_bits
REL_OPERATOR	3115:21	3115:21	12	>=
LEAF_NODE	3115:21	3115:21	13	>=
FIELD	3115:24	3115:24	12	32
LEAF_NODE	3115:24	3115:24	13	32
LEAF_NODE	3115:26	3115:26	10	)
STATEMENTS	3116:8	3129:8	10	
LEAF_NODE	3116:8	3116:8	11	{
STATEMENTS	3117:8	3128:8	11	
EXPR_STATEMENT	3117:8	3117:33	12	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	3117:8	3117:8	13	bytebuff1 = ( buff2 >> 56 )
ASSIGN	3117:8	3117:20	14	bytebuff1 = ( buff2 >> 56 )
LVAL	3117:8	3117:8	15	bytebuff1
FIELD	3117:8	3117:8	16	bytebuff1
LEAF_NODE	3117:8	3117:8	17	bytebuff1
ASSIGN_OP	3117:18	3117:18	15	=
LEAF_NODE	3117:18	3117:18	16	=
RVAL	3117:20	3117:32	15	( buff2 >> 56 )
LEAF_NODE	3117:20	3117:20	16	(
FIELD	3117:21	3117:21	16	buff2
LEAF_NODE	3117:21	3117:21	17	buff2
LEAF_NODE	3117:27	3117:27	16	>>
FIELD	3117:30	3117:30	16	56
LEAF_NODE	3117:30	3117:30	17	56
LEAF_NODE	3117:32	3117:32	16	)
LEAF_NODE	3117:33	3117:33	13	;
EXPR_STATEMENT	3118:8	3118:26	12	* dst ++ = bytebuff1 ;
EXPR	3118:8	3118:8	13	* dst ++ = bytebuff1
ASSIGN	3118:8	3118:17	14	* dst ++ = bytebuff1
LVAL	3118:8	3118:8	15	* dst ++
UNARY_EXPR	3118:8	3118:9	16	* dst ++
UNARY_OPERATOR	3118:8	3118:8	17	*
LEAF_NODE	3118:8	3118:8	18	*
FIELD	3118:9	3118:12	17	dst ++
LEAF_NODE	3118:9	3118:9	18	dst
LEAF_NODE	3118:12	3118:12	18	++
ASSIGN_OP	3118:15	3118:15	15	=
LEAF_NODE	3118:15	3118:15	16	=
RVAL	3118:17	3118:17	15	bytebuff1
FIELD	3118:17	3118:17	16	bytebuff1
LEAF_NODE	3118:17	3118:17	17	bytebuff1
LEAF_NODE	3118:26	3118:26	13	;
EXPR_STATEMENT	3119:8	3119:33	12	bytebuff2 = ( buff2 >> 48 ) ;
EXPR	3119:8	3119:8	13	bytebuff2 = ( buff2 >> 48 )
ASSIGN	3119:8	3119:20	14	bytebuff2 = ( buff2 >> 48 )
LVAL	3119:8	3119:8	15	bytebuff2
FIELD	3119:8	3119:8	16	bytebuff2
LEAF_NODE	3119:8	3119:8	17	bytebuff2
ASSIGN_OP	3119:18	3119:18	15	=
LEAF_NODE	3119:18	3119:18	16	=
RVAL	3119:20	3119:32	15	( buff2 >> 48 )
LEAF_NODE	3119:20	3119:20	16	(
FIELD	3119:21	3119:21	16	buff2
LEAF_NODE	3119:21	3119:21	17	buff2
LEAF_NODE	3119:27	3119:27	16	>>
FIELD	3119:30	3119:30	16	48
LEAF_NODE	3119:30	3119:30	17	48
LEAF_NODE	3119:32	3119:32	16	)
LEAF_NODE	3119:33	3119:33	13	;
EXPR_STATEMENT	3120:8	3120:26	12	* dst ++ = bytebuff2 ;
EXPR	3120:8	3120:8	13	* dst ++ = bytebuff2
ASSIGN	3120:8	3120:17	14	* dst ++ = bytebuff2
LVAL	3120:8	3120:8	15	* dst ++
UNARY_EXPR	3120:8	3120:9	16	* dst ++
UNARY_OPERATOR	3120:8	3120:8	17	*
LEAF_NODE	3120:8	3120:8	18	*
FIELD	3120:9	3120:12	17	dst ++
LEAF_NODE	3120:9	3120:9	18	dst
LEAF_NODE	3120:12	3120:12	18	++
ASSIGN_OP	3120:15	3120:15	15	=
LEAF_NODE	3120:15	3120:15	16	=
RVAL	3120:17	3120:17	15	bytebuff2
FIELD	3120:17	3120:17	16	bytebuff2
LEAF_NODE	3120:17	3120:17	17	bytebuff2
LEAF_NODE	3120:26	3120:26	13	;
EXPR_STATEMENT	3121:8	3121:33	12	bytebuff3 = ( buff2 >> 40 ) ;
EXPR	3121:8	3121:8	13	bytebuff3 = ( buff2 >> 40 )
ASSIGN	3121:8	3121:20	14	bytebuff3 = ( buff2 >> 40 )
LVAL	3121:8	3121:8	15	bytebuff3
FIELD	3121:8	3121:8	16	bytebuff3
LEAF_NODE	3121:8	3121:8	17	bytebuff3
ASSIGN_OP	3121:18	3121:18	15	=
LEAF_NODE	3121:18	3121:18	16	=
RVAL	3121:20	3121:32	15	( buff2 >> 40 )
LEAF_NODE	3121:20	3121:20	16	(
FIELD	3121:21	3121:21	16	buff2
LEAF_NODE	3121:21	3121:21	17	buff2
LEAF_NODE	3121:27	3121:27	16	>>
FIELD	3121:30	3121:30	16	40
LEAF_NODE	3121:30	3121:30	17	40
LEAF_NODE	3121:32	3121:32	16	)
LEAF_NODE	3121:33	3121:33	13	;
EXPR_STATEMENT	3122:8	3122:26	12	* dst ++ = bytebuff3 ;
EXPR	3122:8	3122:8	13	* dst ++ = bytebuff3
ASSIGN	3122:8	3122:17	14	* dst ++ = bytebuff3
LVAL	3122:8	3122:8	15	* dst ++
UNARY_EXPR	3122:8	3122:9	16	* dst ++
UNARY_OPERATOR	3122:8	3122:8	17	*
LEAF_NODE	3122:8	3122:8	18	*
FIELD	3122:9	3122:12	17	dst ++
LEAF_NODE	3122:9	3122:9	18	dst
LEAF_NODE	3122:12	3122:12	18	++
ASSIGN_OP	3122:15	3122:15	15	=
LEAF_NODE	3122:15	3122:15	16	=
RVAL	3122:17	3122:17	15	bytebuff3
FIELD	3122:17	3122:17	16	bytebuff3
LEAF_NODE	3122:17	3122:17	17	bytebuff3
LEAF_NODE	3122:26	3122:26	13	;
EXPR_STATEMENT	3123:8	3123:33	12	bytebuff4 = ( buff2 >> 32 ) ;
EXPR	3123:8	3123:8	13	bytebuff4 = ( buff2 >> 32 )
ASSIGN	3123:8	3123:20	14	bytebuff4 = ( buff2 >> 32 )
LVAL	3123:8	3123:8	15	bytebuff4
FIELD	3123:8	3123:8	16	bytebuff4
LEAF_NODE	3123:8	3123:8	17	bytebuff4
ASSIGN_OP	3123:18	3123:18	15	=
LEAF_NODE	3123:18	3123:18	16	=
RVAL	3123:20	3123:32	15	( buff2 >> 32 )
LEAF_NODE	3123:20	3123:20	16	(
FIELD	3123:21	3123:21	16	buff2
LEAF_NODE	3123:21	3123:21	17	buff2
LEAF_NODE	3123:27	3123:27	16	>>
FIELD	3123:30	3123:30	16	32
LEAF_NODE	3123:30	3123:30	17	32
LEAF_NODE	3123:32	3123:32	16	)
LEAF_NODE	3123:33	3123:33	13	;
EXPR_STATEMENT	3124:8	3124:26	12	* dst ++ = bytebuff4 ;
EXPR	3124:8	3124:8	13	* dst ++ = bytebuff4
ASSIGN	3124:8	3124:17	14	* dst ++ = bytebuff4
LVAL	3124:8	3124:8	15	* dst ++
UNARY_EXPR	3124:8	3124:9	16	* dst ++
UNARY_OPERATOR	3124:8	3124:8	17	*
LEAF_NODE	3124:8	3124:8	18	*
FIELD	3124:9	3124:12	17	dst ++
LEAF_NODE	3124:9	3124:9	18	dst
LEAF_NODE	3124:12	3124:12	18	++
ASSIGN_OP	3124:15	3124:15	15	=
LEAF_NODE	3124:15	3124:15	16	=
RVAL	3124:17	3124:17	15	bytebuff4
FIELD	3124:17	3124:17	16	bytebuff4
LEAF_NODE	3124:17	3124:17	17	bytebuff4
LEAF_NODE	3124:26	3124:26	13	;
EXPR_STATEMENT	3125:8	3125:24	12	ready_bits -= 32 ;
EXPR	3125:8	3125:8	13	ready_bits -= 32
ASSIGN	3125:8	3125:22	14	ready_bits -= 32
LVAL	3125:8	3125:8	15	ready_bits
FIELD	3125:8	3125:8	16	ready_bits
LEAF_NODE	3125:8	3125:8	17	ready_bits
ASSIGN_OP	3125:19	3125:19	15	-=
LEAF_NODE	3125:19	3125:19	16	-=
RVAL	3125:22	3125:22	15	32
FIELD	3125:22	3125:22	16	32
LEAF_NODE	3125:22	3125:22	17	32
LEAF_NODE	3125:24	3125:24	13	;
EXPR_STATEMENT	3128:8	3128:55	12	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) ) ;
EXPR	3128:8	3128:8	13	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
ASSIGN	3128:8	3128:16	14	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LVAL	3128:8	3128:8	15	buff2
FIELD	3128:8	3128:8	16	buff2
LEAF_NODE	3128:8	3128:8	17	buff2
ASSIGN_OP	3128:14	3128:14	15	=
LEAF_NODE	3128:14	3128:14	16	=
RVAL	3128:16	3128:54	15	( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	3128:16	3128:16	16	(
BIT_OR	3128:17	3128:33	16	( buff2 << 32 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	3128:17	3128:29	17	( buff2 << 32 )
LEAF_NODE	3128:17	3128:17	18	(
FIELD	3128:18	3128:18	18	buff2
LEAF_NODE	3128:18	3128:18	19	buff2
LEAF_NODE	3128:24	3128:24	18	<<
FIELD	3128:27	3128:27	18	32
LEAF_NODE	3128:27	3128:27	19	32
LEAF_NODE	3128:29	3128:29	18	)
LEAF_NODE	3128:31	3128:31	17	|
BIT_OR_ELEM	3128:33	3128:53	17	( buff1 >> ready_bits )
LEAF_NODE	3128:33	3128:33	18	(
FIELD	3128:34	3128:34	18	buff1
LEAF_NODE	3128:34	3128:34	19	buff1
LEAF_NODE	3128:40	3128:40	18	>>
FIELD	3128:43	3128:43	18	ready_bits
LEAF_NODE	3128:43	3128:43	19	ready_bits
LEAF_NODE	3128:53	3128:53	18	)
LEAF_NODE	3128:54	3128:54	16	)
LEAF_NODE	3128:55	3128:55	13	;
LEAF_NODE	3129:8	3129:8	11	}
SELECTION	3130:6	3131:8	9	
KEYWORD	3130:6	3130:6	10	else
LEAF_NODE	3130:6	3130:6	11	else
STATEMENTS	3131:8	3134:8	10	
LEAF_NODE	3131:8	3131:8	11	{
STATEMENTS	3132:8	3133:8	11	
EXPR_STATEMENT	3132:8	3132:57	12	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0 ;
EXPR	3132:8	3132:8	13	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	3132:8	3132:20	14	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	3132:8	3132:8	15	bytebuff1
FIELD	3132:8	3132:8	16	bytebuff1
LEAF_NODE	3132:8	3132:8	17	bytebuff1
ASSIGN_OP	3132:18	3132:18	15	=
LEAF_NODE	3132:18	3132:18	16	=
RVAL	3132:20	3132:20	15	bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	3132:20	3132:32	16	bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	3132:20	3132:20	17	bytebuff2
FIELD	3132:20	3132:20	18	bytebuff2
LEAF_NODE	3132:20	3132:20	19	bytebuff2
ASSIGN_OP	3132:30	3132:30	17	=
LEAF_NODE	3132:30	3132:30	18	=
RVAL	3132:32	3132:32	17	bytebuff3 = bytebuff4 = 0
ASSIGN	3132:32	3132:44	18	bytebuff3 = bytebuff4 = 0
LVAL	3132:32	3132:32	19	bytebuff3
FIELD	3132:32	3132:32	20	bytebuff3
LEAF_NODE	3132:32	3132:32	21	bytebuff3
ASSIGN_OP	3132:42	3132:42	19	=
LEAF_NODE	3132:42	3132:42	20	=
RVAL	3132:44	3132:44	19	bytebuff4 = 0
ASSIGN	3132:44	3132:56	20	bytebuff4 = 0
LVAL	3132:44	3132:44	21	bytebuff4
FIELD	3132:44	3132:44	22	bytebuff4
LEAF_NODE	3132:44	3132:44	23	bytebuff4
ASSIGN_OP	3132:54	3132:54	21	=
LEAF_NODE	3132:54	3132:54	22	=
RVAL	3132:56	3132:56	21	0
FIELD	3132:56	3132:56	22	0
LEAF_NODE	3132:56	3132:56	23	0
LEAF_NODE	3132:57	3132:57	13	;
EXPR_STATEMENT	3133:8	3133:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	3133:8	3133:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	3133:8	3133:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	3133:8	3133:8	15	buff2
FIELD	3133:8	3133:8	16	buff2
LEAF_NODE	3133:8	3133:8	17	buff2
ASSIGN_OP	3133:14	3133:14	15	=
LEAF_NODE	3133:14	3133:14	16	=
RVAL	3133:16	3133:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	3133:16	3133:16	16	(
BIT_OR	3133:17	3133:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3133:17	3133:17	17	buff2
FIELD	3133:17	3133:17	18	buff2
LEAF_NODE	3133:17	3133:17	19	buff2
LEAF_NODE	3133:23	3133:23	17	|
BIT_OR_ELEM	3133:25	3133:45	17	( buff1 >> ready_bits )
LEAF_NODE	3133:25	3133:25	18	(
FIELD	3133:26	3133:26	18	buff1
LEAF_NODE	3133:26	3133:26	19	buff1
LEAF_NODE	3133:32	3133:32	18	>>
FIELD	3133:35	3133:35	18	ready_bits
LEAF_NODE	3133:35	3133:35	19	ready_bits
LEAF_NODE	3133:45	3133:45	18	)
LEAF_NODE	3133:46	3133:46	16	)
LEAF_NODE	3133:47	3133:47	13	;
LEAF_NODE	3134:8	3134:8	11	}
EXPR_STATEMENT	3135:6	3135:23	9	ready_bits += bps ;
EXPR	3135:6	3135:6	10	ready_bits += bps
ASSIGN	3135:6	3135:20	11	ready_bits += bps
LVAL	3135:6	3135:6	12	ready_bits
FIELD	3135:6	3135:6	13	ready_bits
LEAF_NODE	3135:6	3135:6	14	ready_bits
ASSIGN_OP	3135:17	3135:17	12	+=
LEAF_NODE	3135:17	3135:17	13	+=
RVAL	3135:20	3135:20	12	bps
FIELD	3135:20	3135:20	13	bps
LEAF_NODE	3135:20	3135:20	14	bps
LEAF_NODE	3135:23	3135:23	10	;
LEAF_NODE	3136:6	3136:6	8	}
LEAF_NODE	3137:4	3137:4	5	}
ITERATION	3138:2	3139:4	3	
KEYWORD	3138:2	3138:2	4	while
LEAF_NODE	3138:2	3138:2	5	while
LEAF_NODE	3138:8	3138:8	4	(
CONDITION	3138:9	3138:9	4	ready_bits > 0
EXPR	3138:9	3138:22	5	ready_bits > 0
FIELD	3138:9	3138:9	6	ready_bits
LEAF_NODE	3138:9	3138:9	7	ready_bits
REL_OPERATOR	3138:20	3138:20	6	>
LEAF_NODE	3138:20	3138:20	7	>
FIELD	3138:22	3138:22	6	0
LEAF_NODE	3138:22	3138:22	7	0
LEAF_NODE	3138:23	3138:23	4	)
STATEMENTS	3139:4	3144:4	4	
LEAF_NODE	3139:4	3139:4	5	{
STATEMENTS	3140:4	3143:4	5	
EXPR_STATEMENT	3140:4	3140:29	6	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	3140:4	3140:4	7	bytebuff1 = ( buff2 >> 56 )
ASSIGN	3140:4	3140:16	8	bytebuff1 = ( buff2 >> 56 )
LVAL	3140:4	3140:4	9	bytebuff1
FIELD	3140:4	3140:4	10	bytebuff1
LEAF_NODE	3140:4	3140:4	11	bytebuff1
ASSIGN_OP	3140:14	3140:14	9	=
LEAF_NODE	3140:14	3140:14	10	=
RVAL	3140:16	3140:28	9	( buff2 >> 56 )
LEAF_NODE	3140:16	3140:16	10	(
FIELD	3140:17	3140:17	10	buff2
LEAF_NODE	3140:17	3140:17	11	buff2
LEAF_NODE	3140:23	3140:23	10	>>
FIELD	3140:26	3140:26	10	56
LEAF_NODE	3140:26	3140:26	11	56
LEAF_NODE	3140:28	3140:28	10	)
LEAF_NODE	3140:29	3140:29	7	;
EXPR_STATEMENT	3141:4	3141:22	6	* dst ++ = bytebuff1 ;
EXPR	3141:4	3141:4	7	* dst ++ = bytebuff1
ASSIGN	3141:4	3141:13	8	* dst ++ = bytebuff1
LVAL	3141:4	3141:4	9	* dst ++
UNARY_EXPR	3141:4	3141:5	10	* dst ++
UNARY_OPERATOR	3141:4	3141:4	11	*
LEAF_NODE	3141:4	3141:4	12	*
FIELD	3141:5	3141:8	11	dst ++
LEAF_NODE	3141:5	3141:5	12	dst
LEAF_NODE	3141:8	3141:8	12	++
ASSIGN_OP	3141:11	3141:11	9	=
LEAF_NODE	3141:11	3141:11	10	=
RVAL	3141:13	3141:13	9	bytebuff1
FIELD	3141:13	3141:13	10	bytebuff1
LEAF_NODE	3141:13	3141:13	11	bytebuff1
LEAF_NODE	3141:22	3141:22	7	;
EXPR_STATEMENT	3142:4	3142:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	3142:4	3142:4	7	buff2 = ( buff2 << 8 )
ASSIGN	3142:4	3142:12	8	buff2 = ( buff2 << 8 )
LVAL	3142:4	3142:4	9	buff2
FIELD	3142:4	3142:4	10	buff2
LEAF_NODE	3142:4	3142:4	11	buff2
ASSIGN_OP	3142:10	3142:10	9	=
LEAF_NODE	3142:10	3142:10	10	=
RVAL	3142:12	3142:23	9	( buff2 << 8 )
LEAF_NODE	3142:12	3142:12	10	(
FIELD	3142:13	3142:13	10	buff2
LEAF_NODE	3142:13	3142:13	11	buff2
LEAF_NODE	3142:19	3142:19	10	<<
FIELD	3142:22	3142:22	10	8
LEAF_NODE	3142:22	3142:22	11	8
LEAF_NODE	3142:23	3142:23	10	)
LEAF_NODE	3142:24	3142:24	7	;
EXPR_STATEMENT	3143:4	3143:19	6	ready_bits -= 8 ;
EXPR	3143:4	3143:4	7	ready_bits -= 8
ASSIGN	3143:4	3143:18	8	ready_bits -= 8
LVAL	3143:4	3143:4	9	ready_bits
FIELD	3143:4	3143:4	10	ready_bits
LEAF_NODE	3143:4	3143:4	11	ready_bits
ASSIGN_OP	3143:15	3143:15	9	-=
LEAF_NODE	3143:15	3143:15	10	-=
RVAL	3143:18	3143:18	9	8
FIELD	3143:18	3143:18	10	8
LEAF_NODE	3143:18	3143:18	11	8
LEAF_NODE	3143:19	3143:19	7	;
LEAF_NODE	3144:4	3144:4	5	}
JUMP_STATEMENT	3146:2	3146:12	3	return ( 0 ) ;
KEYWORD	3146:2	3146:2	4	return
LEAF_NODE	3146:2	3146:2	5	return
DESTINATION	3146:9	3146:9	4	( 0 )
EXPR	3146:9	3146:11	5	( 0 )
LEAF_NODE	3146:9	3146:9	6	(
FIELD	3146:10	3146:10	6	0
LEAF_NODE	3146:10	3146:10	7	0
LEAF_NODE	3146:11	3146:11	6	)
LEAF_NODE	3146:12	3146:12	4	;
LEAF_NODE	3147:2	3147:2	2	}
FUNCTION_DEF	3149:0	3227:2	1	
RETURN_TYPE	3149:0	3149:7	2	static int
LEAF_NODE	3149:0	3149:0	3	static
TYPE_NAME	3149:7	3149:7	3	int
LEAF_NODE	3149:7	3149:7	4	int
FUNCTION_NAME	3150:0	3150:0	2	extractContigSamplesShifted8bits
LEAF_NODE	3150:0	3150:0	3	extractContigSamplesShifted8bits
PARAMETER_LIST	3150:33	3153:37	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end , int shift )
LEAF_NODE	3150:33	3150:33	3	(
PARAMETER_DECL	3150:34	3150:41	3	uint8 * in
TYPE	3150:34	3150:40	4	uint8 *
TYPE_NAME	3150:34	3150:34	5	uint8
LEAF_NODE	3150:34	3150:34	6	uint8
POINTER	3150:40	3150:40	5	*
LEAF_NODE	3150:40	3150:40	6	*
NAME	3150:41	3150:41	4	in
LEAF_NODE	3150:41	3150:41	5	in
LEAF_NODE	3150:43	3150:43	3	,
PARAMETER_DECL	3150:45	3150:52	3	uint8 * out
TYPE	3150:45	3150:51	4	uint8 *
TYPE_NAME	3150:45	3150:45	5	uint8
LEAF_NODE	3150:45	3150:45	6	uint8
POINTER	3150:51	3150:51	5	*
LEAF_NODE	3150:51	3150:51	6	*
NAME	3150:52	3150:52	4	out
LEAF_NODE	3150:52	3150:52	5	out
LEAF_NODE	3150:55	3150:55	3	,
PARAMETER_DECL	3150:57	3150:64	3	uint32 cols
TYPE	3150:57	3150:57	4	uint32
TYPE_NAME	3150:57	3150:57	5	uint32
LEAF_NODE	3150:57	3150:57	6	uint32
NAME	3150:64	3150:64	4	cols
LEAF_NODE	3150:64	3150:64	5	cols
LEAF_NODE	3150:68	3150:68	3	,
PARAMETER_DECL	3151:34	3151:44	3	tsample_t sample
TYPE	3151:34	3151:34	4	tsample_t
TYPE_NAME	3151:34	3151:34	5	tsample_t
LEAF_NODE	3151:34	3151:34	6	tsample_t
NAME	3151:44	3151:44	4	sample
LEAF_NODE	3151:44	3151:44	5	sample
LEAF_NODE	3151:50	3151:50	3	,
PARAMETER_DECL	3151:52	3151:59	3	uint16 spp
TYPE	3151:52	3151:52	4	uint16
TYPE_NAME	3151:52	3151:52	5	uint16
LEAF_NODE	3151:52	3151:52	6	uint16
NAME	3151:59	3151:59	4	spp
LEAF_NODE	3151:59	3151:59	5	spp
LEAF_NODE	3151:62	3151:62	3	,
PARAMETER_DECL	3151:64	3151:71	3	uint16 bps
TYPE	3151:64	3151:64	4	uint16
TYPE_NAME	3151:64	3151:64	5	uint16
LEAF_NODE	3151:64	3151:64	6	uint16
NAME	3151:71	3151:71	4	bps
LEAF_NODE	3151:71	3151:71	5	bps
LEAF_NODE	3151:74	3151:74	3	,
PARAMETER_DECL	3152:13	3152:23	3	tsample_t count
TYPE	3152:13	3152:13	4	tsample_t
TYPE_NAME	3152:13	3152:13	5	tsample_t
LEAF_NODE	3152:13	3152:13	6	tsample_t
NAME	3152:23	3152:23	4	count
LEAF_NODE	3152:23	3152:23	5	count
LEAF_NODE	3152:28	3152:28	3	,
PARAMETER_DECL	3152:30	3152:37	3	uint32 start
TYPE	3152:30	3152:30	4	uint32
TYPE_NAME	3152:30	3152:30	5	uint32
LEAF_NODE	3152:30	3152:30	6	uint32
NAME	3152:37	3152:37	4	start
LEAF_NODE	3152:37	3152:37	5	start
LEAF_NODE	3152:42	3152:42	3	,
PARAMETER_DECL	3152:44	3152:51	3	uint32 end
TYPE	3152:44	3152:44	4	uint32
TYPE_NAME	3152:44	3152:44	5	uint32
LEAF_NODE	3152:44	3152:44	6	uint32
NAME	3152:51	3152:51	4	end
LEAF_NODE	3152:51	3152:51	5	end
LEAF_NODE	3152:54	3152:54	3	,
PARAMETER_DECL	3153:28	3153:32	3	int shift
TYPE	3153:28	3153:28	4	int
TYPE_NAME	3153:28	3153:28	5	int
LEAF_NODE	3153:28	3153:28	6	int
NAME	3153:32	3153:32	4	shift
LEAF_NODE	3153:32	3153:32	5	shift
LEAF_NODE	3153:37	3153:37	3	)
LEAF_NODE	3154:2	3154:2	2	{
STATEMENTS	3155:2	3226:2	2	
SIMPLE_DECL	3155:2	3155:35	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	3155:2	3155:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	3155:2	3155:9	5	int ready_bits ; ready_bits = 0
TYPE	3155:2	3155:2	6	int
TYPE_NAME	3155:2	3155:2	7	int
LEAF_NODE	3155:2	3155:2	8	int
NAME	3155:9	3155:9	6	ready_bits
LEAF_NODE	3155:9	3155:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	3155:9	3155:9	6	ready_bits = 0
ASSIGN	3155:9	3155:22	7	ready_bits = 0
LVAL	3155:9	3155:9	8	ready_bits
NAME	3155:9	3155:9	9	ready_bits
LEAF_NODE	3155:9	3155:9	10	ready_bits
ASSIGN_OP	3155:20	3155:20	8	=
LEAF_NODE	3155:20	3155:20	9	=
RVAL	3155:22	3155:22	8	0
FIELD	3155:22	3155:22	9	0
LEAF_NODE	3155:22	3155:22	10	0
LEAF_NODE	3155:23	3155:23	5	,
VAR_DECL	3155:2	3155:25	5	int sindex ; sindex = 0
TYPE	3155:2	3155:2	6	int
TYPE_NAME	3155:2	3155:2	7	int
LEAF_NODE	3155:2	3155:2	8	int
NAME	3155:25	3155:25	6	sindex
LEAF_NODE	3155:25	3155:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	3155:25	3155:25	6	sindex = 0
ASSIGN	3155:25	3155:34	7	sindex = 0
LVAL	3155:25	3155:25	8	sindex
NAME	3155:25	3155:25	9	sindex
LEAF_NODE	3155:25	3155:25	10	sindex
ASSIGN_OP	3155:32	3155:32	8	=
LEAF_NODE	3155:32	3155:32	9	=
RVAL	3155:34	3155:34	8	0
FIELD	3155:34	3155:34	9	0
LEAF_NODE	3155:34	3155:34	10	0
LEAF_NODE	3155:35	3155:35	4	;
SIMPLE_DECL	3156:2	3156:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	3156:2	3156:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3156:2	3156:9	5	uint32 col
TYPE	3156:2	3156:2	6	uint32
TYPE_NAME	3156:2	3156:2	7	uint32
LEAF_NODE	3156:2	3156:2	8	uint32
NAME	3156:9	3156:9	6	col
LEAF_NODE	3156:9	3156:9	7	col
LEAF_NODE	3156:12	3156:12	5	,
INIT_DECL_LIST	3156:2	3156:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3156:2	3156:14	6	uint32 src_byte
TYPE	3156:2	3156:2	7	uint32
TYPE_NAME	3156:2	3156:2	8	uint32
LEAF_NODE	3156:2	3156:2	9	uint32
NAME	3156:14	3156:14	7	src_byte
LEAF_NODE	3156:14	3156:14	8	src_byte
LEAF_NODE	3156:22	3156:22	6	,
INIT_DECL_LIST	3156:2	3156:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	3156:2	3156:24	7	uint32 src_bit
TYPE	3156:2	3156:2	8	uint32
TYPE_NAME	3156:2	3156:2	9	uint32
LEAF_NODE	3156:2	3156:2	10	uint32
NAME	3156:24	3156:24	8	src_bit
LEAF_NODE	3156:24	3156:24	9	src_bit
LEAF_NODE	3156:31	3156:31	7	,
VAR_DECL	3156:2	3156:33	7	uint32 bit_offset
TYPE	3156:2	3156:2	8	uint32
TYPE_NAME	3156:2	3156:2	9	uint32
LEAF_NODE	3156:2	3156:2	10	uint32
NAME	3156:33	3156:33	8	bit_offset
LEAF_NODE	3156:33	3156:33	9	bit_offset
LEAF_NODE	3156:43	3156:43	4	;
SIMPLE_DECL	3157:2	3157:36	3	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3157:2	3157:2	4	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0
VAR_DECL	3157:2	3157:9	5	uint8 maskbits ; maskbits = 0
TYPE	3157:2	3157:2	6	uint8
TYPE_NAME	3157:2	3157:2	7	uint8
LEAF_NODE	3157:2	3157:2	8	uint8
NAME	3157:9	3157:9	6	maskbits
LEAF_NODE	3157:9	3157:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3157:9	3157:9	6	maskbits = 0
ASSIGN	3157:9	3157:20	7	maskbits = 0
LVAL	3157:9	3157:9	8	maskbits
NAME	3157:9	3157:9	9	maskbits
LEAF_NODE	3157:9	3157:9	10	maskbits
ASSIGN_OP	3157:18	3157:18	8	=
LEAF_NODE	3157:18	3157:18	9	=
RVAL	3157:20	3157:20	8	0
FIELD	3157:20	3157:20	9	0
LEAF_NODE	3157:20	3157:20	10	0
LEAF_NODE	3157:21	3157:21	5	,
VAR_DECL	3157:2	3157:23	5	uint8 matchbits ; matchbits = 0
TYPE	3157:2	3157:2	6	uint8
TYPE_NAME	3157:2	3157:2	7	uint8
LEAF_NODE	3157:2	3157:2	8	uint8
NAME	3157:23	3157:23	6	matchbits
LEAF_NODE	3157:23	3157:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3157:23	3157:23	6	matchbits = 0
ASSIGN	3157:23	3157:35	7	matchbits = 0
LVAL	3157:23	3157:23	8	matchbits
NAME	3157:23	3157:23	9	matchbits
LEAF_NODE	3157:23	3157:23	10	matchbits
ASSIGN_OP	3157:33	3157:33	8	=
LEAF_NODE	3157:33	3157:33	9	=
RVAL	3157:35	3157:35	8	0
FIELD	3157:35	3157:35	9	0
LEAF_NODE	3157:35	3157:35	10	0
LEAF_NODE	3157:36	3157:36	4	;
SIMPLE_DECL	3158:2	3158:29	3	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	3158:2	3158:2	4	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0
VAR_DECL	3158:2	3158:9	5	uint8 buff1 ; buff1 = 0
TYPE	3158:2	3158:2	6	uint8
TYPE_NAME	3158:2	3158:2	7	uint8
LEAF_NODE	3158:2	3158:2	8	uint8
NAME	3158:9	3158:9	6	buff1
LEAF_NODE	3158:9	3158:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3158:9	3158:9	6	buff1 = 0
ASSIGN	3158:9	3158:17	7	buff1 = 0
LVAL	3158:9	3158:9	8	buff1
NAME	3158:9	3158:9	9	buff1
LEAF_NODE	3158:9	3158:9	10	buff1
ASSIGN_OP	3158:15	3158:15	8	=
LEAF_NODE	3158:15	3158:15	9	=
RVAL	3158:17	3158:17	8	0
FIELD	3158:17	3158:17	9	0
LEAF_NODE	3158:17	3158:17	10	0
LEAF_NODE	3158:18	3158:18	5	,
VAR_DECL	3158:2	3158:20	5	uint8 buff2 ; buff2 = 0
TYPE	3158:2	3158:2	6	uint8
TYPE_NAME	3158:2	3158:2	7	uint8
LEAF_NODE	3158:2	3158:2	8	uint8
NAME	3158:20	3158:20	6	buff2
LEAF_NODE	3158:20	3158:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	3158:20	3158:20	6	buff2 = 0
ASSIGN	3158:20	3158:28	7	buff2 = 0
LVAL	3158:20	3158:20	8	buff2
NAME	3158:20	3158:20	9	buff2
LEAF_NODE	3158:20	3158:20	10	buff2
ASSIGN_OP	3158:26	3158:26	8	=
LEAF_NODE	3158:26	3158:26	9	=
RVAL	3158:28	3158:28	8	0
FIELD	3158:28	3158:28	9	0
LEAF_NODE	3158:28	3158:28	10	0
LEAF_NODE	3158:29	3158:29	4	;
SIMPLE_DECL	3159:2	3159:17	3	uint8 * src ; src = in ;
VAR_DECL	3159:2	3159:9	4	uint8 * src ; src = in
TYPE	3159:2	3159:8	5	uint8 *
TYPE_NAME	3159:2	3159:2	6	uint8
LEAF_NODE	3159:2	3159:2	7	uint8
POINTER	3159:8	3159:8	6	*
LEAF_NODE	3159:8	3159:8	7	*
NAME	3159:9	3159:9	5	src
LEAF_NODE	3159:9	3159:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3159:9	3159:9	5	src = in
ASSIGN	3159:9	3159:15	6	src = in
LVAL	3159:9	3159:9	7	src
NAME	3159:9	3159:9	8	src
LEAF_NODE	3159:9	3159:9	9	src
ASSIGN_OP	3159:13	3159:13	7	=
LEAF_NODE	3159:13	3159:13	8	=
RVAL	3159:15	3159:15	7	in
FIELD	3159:15	3159:15	8	in
LEAF_NODE	3159:15	3159:15	9	in
LEAF_NODE	3159:17	3159:17	4	;
SIMPLE_DECL	3160:2	3160:18	3	uint8 * dst ; dst = out ;
VAR_DECL	3160:2	3160:9	4	uint8 * dst ; dst = out
TYPE	3160:2	3160:8	5	uint8 *
TYPE_NAME	3160:2	3160:2	6	uint8
LEAF_NODE	3160:2	3160:2	7	uint8
POINTER	3160:8	3160:8	6	*
LEAF_NODE	3160:8	3160:8	7	*
NAME	3160:9	3160:9	5	dst
LEAF_NODE	3160:9	3160:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3160:9	3160:9	5	dst = out
ASSIGN	3160:9	3160:15	6	dst = out
LVAL	3160:9	3160:9	7	dst
NAME	3160:9	3160:9	8	dst
LEAF_NODE	3160:9	3160:9	9	dst
ASSIGN_OP	3160:13	3160:13	7	=
LEAF_NODE	3160:13	3160:13	8	=
RVAL	3160:15	3160:15	7	out
FIELD	3160:15	3160:15	8	out
LEAF_NODE	3160:15	3160:15	9	out
LEAF_NODE	3160:18	3160:18	4	;
SELECTION	3162:2	3163:4	3	
KEYWORD	3162:2	3162:2	4	if
LEAF_NODE	3162:2	3162:2	5	if
LEAF_NODE	3162:5	3162:5	4	(
CONDITION	3162:6	3162:6	4	( src == NULL ) || ( dst == NULL )
EXPR	3162:6	3162:6	5	( src == NULL ) || ( dst == NULL )
OR	3162:6	3162:23	6	( src == NULL ) || ( dst == NULL )
EXPR	3162:6	3162:18	7	( src == NULL )
LEAF_NODE	3162:6	3162:6	8	(
FIELD	3162:7	3162:7	8	src
LEAF_NODE	3162:7	3162:7	9	src
EQ_OPERATOR	3162:11	3162:11	8	==
LEAF_NODE	3162:11	3162:11	9	==
FIELD	3162:14	3162:14	8	NULL
LEAF_NODE	3162:14	3162:14	9	NULL
LEAF_NODE	3162:18	3162:18	8	)
LEAF_NODE	3162:20	3162:20	7	||
EXPR	3162:23	3162:35	7	( dst == NULL )
LEAF_NODE	3162:23	3162:23	8	(
FIELD	3162:24	3162:24	8	dst
LEAF_NODE	3162:24	3162:24	9	dst
EQ_OPERATOR	3162:28	3162:28	8	==
LEAF_NODE	3162:28	3162:28	9	==
FIELD	3162:31	3162:31	8	NULL
LEAF_NODE	3162:31	3162:31	9	NULL
LEAF_NODE	3162:35	3162:35	8	)
LEAF_NODE	3162:36	3162:36	4	)
STATEMENTS	3163:4	3166:4	4	
LEAF_NODE	3163:4	3163:4	5	{
STATEMENTS	3164:4	3165:4	5	
EXPR_STATEMENT	3164:4	3164:82	6	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid input or output buffer" ) ;
EXPR	3164:4	3164:4	7	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3164:4	3164:81	8	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid input or output buffer" )
CALLEE	3164:4	3164:4	9	TIFFError
LEAF_NODE	3164:4	3164:4	10	TIFFError
LEAF_NODE	3164:13	3164:13	9	(
ARGUMENT	3164:14	3164:14	9	"extractContigSamplesShifted8bits"
FIELD	3164:14	3164:14	10	"extractContigSamplesShifted8bits"
LEAF_NODE	3164:14	3164:14	11	"extractContigSamplesShifted8bits"
LEAF_NODE	3164:48	3164:48	9	,
ARGUMENT	3164:49	3164:49	9	"Invalid input or output buffer"
FIELD	3164:49	3164:49	10	"Invalid input or output buffer"
LEAF_NODE	3164:49	3164:49	11	"Invalid input or output buffer"
LEAF_NODE	3164:81	3164:81	9	)
LEAF_NODE	3164:82	3164:82	7	;
JUMP_STATEMENT	3165:4	3165:14	6	return ( 1 ) ;
KEYWORD	3165:4	3165:4	7	return
LEAF_NODE	3165:4	3165:4	8	return
DESTINATION	3165:11	3165:11	7	( 1 )
EXPR	3165:11	3165:13	8	( 1 )
LEAF_NODE	3165:11	3165:11	9	(
FIELD	3165:12	3165:12	9	1
LEAF_NODE	3165:12	3165:12	10	1
LEAF_NODE	3165:13	3165:13	9	)
LEAF_NODE	3165:14	3165:14	7	;
LEAF_NODE	3166:4	3166:4	5	}
SELECTION	3168:2	3169:4	3	
KEYWORD	3168:2	3168:2	4	if
LEAF_NODE	3168:2	3168:2	5	if
LEAF_NODE	3168:5	3168:5	4	(
CONDITION	3168:6	3168:6	4	( start > end ) || ( start > cols )
EXPR	3168:6	3168:6	5	( start > end ) || ( start > cols )
OR	3168:6	3168:23	6	( start > end ) || ( start > cols )
EXPR	3168:6	3168:18	7	( start > end )
LEAF_NODE	3168:6	3168:6	8	(
FIELD	3168:7	3168:7	8	start
LEAF_NODE	3168:7	3168:7	9	start
REL_OPERATOR	3168:13	3168:13	8	>
LEAF_NODE	3168:13	3168:13	9	>
FIELD	3168:15	3168:15	8	end
LEAF_NODE	3168:15	3168:15	9	end
LEAF_NODE	3168:18	3168:18	8	)
LEAF_NODE	3168:20	3168:20	7	||
EXPR	3168:23	3168:36	7	( start > cols )
LEAF_NODE	3168:23	3168:23	8	(
FIELD	3168:24	3168:24	8	start
LEAF_NODE	3168:24	3168:24	9	start
REL_OPERATOR	3168:30	3168:30	8	>
LEAF_NODE	3168:30	3168:30	9	>
FIELD	3168:32	3168:32	8	cols
LEAF_NODE	3168:32	3168:32	9	cols
LEAF_NODE	3168:36	3168:36	8	)
LEAF_NODE	3168:37	3168:37	4	)
STATEMENTS	3169:4	3173:4	4	
LEAF_NODE	3169:4	3169:4	5	{
STATEMENTS	3170:4	3172:4	5	
EXPR_STATEMENT	3170:4	3171:62	6	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	3170:4	3170:4	7	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	3170:4	3171:61	8	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid start column value %d ignored" , start )
CALLEE	3170:4	3170:4	9	TIFFError
LEAF_NODE	3170:4	3170:4	10	TIFFError
LEAF_NODE	3170:14	3170:14	9	(
ARGUMENT	3170:15	3170:15	9	"extractContigSamplesShifted8bits"
FIELD	3170:15	3170:15	10	"extractContigSamplesShifted8bits"
LEAF_NODE	3170:15	3170:15	11	"extractContigSamplesShifted8bits"
LEAF_NODE	3170:49	3170:49	9	,
ARGUMENT	3171:15	3171:15	9	"Invalid start column value %d ignored"
FIELD	3171:15	3171:15	10	"Invalid start column value %d ignored"
LEAF_NODE	3171:15	3171:15	11	"Invalid start column value %d ignored"
LEAF_NODE	3171:54	3171:54	9	,
ARGUMENT	3171:56	3171:56	9	start
FIELD	3171:56	3171:56	10	start
LEAF_NODE	3171:56	3171:56	11	start
LEAF_NODE	3171:61	3171:61	9	)
LEAF_NODE	3171:62	3171:62	7	;
EXPR_STATEMENT	3172:4	3172:13	6	start = 0 ;
EXPR	3172:4	3172:4	7	start = 0
ASSIGN	3172:4	3172:12	8	start = 0
LVAL	3172:4	3172:4	9	start
FIELD	3172:4	3172:4	10	start
LEAF_NODE	3172:4	3172:4	11	start
ASSIGN_OP	3172:10	3172:10	9	=
LEAF_NODE	3172:10	3172:10	10	=
RVAL	3172:12	3172:12	9	0
FIELD	3172:12	3172:12	10	0
LEAF_NODE	3172:12	3172:12	11	0
LEAF_NODE	3172:13	3172:13	7	;
LEAF_NODE	3173:4	3173:4	5	}
SELECTION	3174:2	3175:4	3	
KEYWORD	3174:2	3174:2	4	if
LEAF_NODE	3174:2	3174:2	5	if
LEAF_NODE	3174:5	3174:5	4	(
CONDITION	3174:6	3174:6	4	( end == 0 ) || ( end > cols )
EXPR	3174:6	3174:6	5	( end == 0 ) || ( end > cols )
OR	3174:6	3174:20	6	( end == 0 ) || ( end > cols )
EXPR	3174:6	3174:15	7	( end == 0 )
LEAF_NODE	3174:6	3174:6	8	(
FIELD	3174:7	3174:7	8	end
LEAF_NODE	3174:7	3174:7	9	end
EQ_OPERATOR	3174:11	3174:11	8	==
LEAF_NODE	3174:11	3174:11	9	==
FIELD	3174:14	3174:14	8	0
LEAF_NODE	3174:14	3174:14	9	0
LEAF_NODE	3174:15	3174:15	8	)
LEAF_NODE	3174:17	3174:17	7	||
EXPR	3174:20	3174:31	7	( end > cols )
LEAF_NODE	3174:20	3174:20	8	(
FIELD	3174:21	3174:21	8	end
LEAF_NODE	3174:21	3174:21	9	end
REL_OPERATOR	3174:25	3174:25	8	>
LEAF_NODE	3174:25	3174:25	9	>
FIELD	3174:27	3174:27	8	cols
LEAF_NODE	3174:27	3174:27	9	cols
LEAF_NODE	3174:31	3174:31	8	)
LEAF_NODE	3174:32	3174:32	4	)
STATEMENTS	3175:4	3179:4	4	
LEAF_NODE	3175:4	3175:4	5	{
STATEMENTS	3176:4	3178:4	5	
EXPR_STATEMENT	3176:4	3177:58	6	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	3176:4	3176:4	7	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	3176:4	3177:57	8	TIFFError ( "extractContigSamplesShifted8bits" , "Invalid end column value %d ignored" , end )
CALLEE	3176:4	3176:4	9	TIFFError
LEAF_NODE	3176:4	3176:4	10	TIFFError
LEAF_NODE	3176:14	3176:14	9	(
ARGUMENT	3176:15	3176:15	9	"extractContigSamplesShifted8bits"
FIELD	3176:15	3176:15	10	"extractContigSamplesShifted8bits"
LEAF_NODE	3176:15	3176:15	11	"extractContigSamplesShifted8bits"
LEAF_NODE	3176:49	3176:49	9	,
ARGUMENT	3177:15	3177:15	9	"Invalid end column value %d ignored"
FIELD	3177:15	3177:15	10	"Invalid end column value %d ignored"
LEAF_NODE	3177:15	3177:15	11	"Invalid end column value %d ignored"
LEAF_NODE	3177:52	3177:52	9	,
ARGUMENT	3177:54	3177:54	9	end
FIELD	3177:54	3177:54	10	end
LEAF_NODE	3177:54	3177:54	11	end
LEAF_NODE	3177:57	3177:57	9	)
LEAF_NODE	3177:58	3177:58	7	;
EXPR_STATEMENT	3178:4	3178:14	6	end = cols ;
EXPR	3178:4	3178:4	7	end = cols
ASSIGN	3178:4	3178:10	8	end = cols
LVAL	3178:4	3178:4	9	end
FIELD	3178:4	3178:4	10	end
LEAF_NODE	3178:4	3178:4	11	end
ASSIGN_OP	3178:8	3178:8	9	=
LEAF_NODE	3178:8	3178:8	10	=
RVAL	3178:10	3178:10	9	cols
FIELD	3178:10	3178:10	10	cols
LEAF_NODE	3178:10	3178:10	11	cols
LEAF_NODE	3178:14	3178:14	7	;
LEAF_NODE	3179:4	3179:4	5	}
EXPR_STATEMENT	3181:2	3181:20	3	ready_bits = shift ;
EXPR	3181:2	3181:2	4	ready_bits = shift
ASSIGN	3181:2	3181:15	5	ready_bits = shift
LVAL	3181:2	3181:2	6	ready_bits
FIELD	3181:2	3181:2	7	ready_bits
LEAF_NODE	3181:2	3181:2	8	ready_bits
ASSIGN_OP	3181:13	3181:13	6	=
LEAF_NODE	3181:13	3181:13	7	=
RVAL	3181:15	3181:15	6	shift
FIELD	3181:15	3181:15	7	shift
LEAF_NODE	3181:15	3181:15	8	shift
LEAF_NODE	3181:20	3181:20	4	;
EXPR_STATEMENT	3182:2	3182:37	3	maskbits = ( uint8 ) - 1 >> ( 8 - bps ) ;
EXPR	3182:2	3182:2	4	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
ASSIGN	3182:2	3182:14	5	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
LVAL	3182:2	3182:2	6	maskbits
FIELD	3182:2	3182:2	7	maskbits
LEAF_NODE	3182:2	3182:2	8	maskbits
ASSIGN_OP	3182:11	3182:11	6	=
LEAF_NODE	3182:11	3182:11	7	=
RVAL	3182:14	3182:36	6	( uint8 ) - 1 >> ( 8 - bps )
LEAF_NODE	3182:14	3182:14	7	(
TYPE_NAME	3182:15	3182:15	7	uint8
LEAF_NODE	3182:15	3182:15	8	uint8
LEAF_NODE	3182:20	3182:20	7	)
UNARY_EXPR	3182:21	3182:22	7	- 1
UNARY_OPERATOR	3182:21	3182:21	8	-
LEAF_NODE	3182:21	3182:21	9	-
FIELD	3182:22	3182:22	8	1
LEAF_NODE	3182:22	3182:22	9	1
LEAF_NODE	3182:24	3182:24	7	>>
LEAF_NODE	3182:27	3182:27	7	(
FIELD	3182:29	3182:29	7	8
LEAF_NODE	3182:29	3182:29	8	8
LEAF_NODE	3182:31	3182:31	7	-
FIELD	3182:33	3182:33	7	bps
LEAF_NODE	3182:33	3182:33	8	bps
LEAF_NODE	3182:36	3182:36	7	)
LEAF_NODE	3182:37	3182:37	4	;
EXPR_STATEMENT	3183:2	3183:19	3	buff1 = buff2 = 0 ;
EXPR	3183:2	3183:2	4	buff1 = buff2 = 0
ASSIGN	3183:2	3183:10	5	buff1 = buff2 = 0
LVAL	3183:2	3183:2	6	buff1
FIELD	3183:2	3183:2	7	buff1
LEAF_NODE	3183:2	3183:2	8	buff1
ASSIGN_OP	3183:8	3183:8	6	=
LEAF_NODE	3183:8	3183:8	7	=
RVAL	3183:10	3183:10	6	buff2 = 0
ASSIGN	3183:10	3183:18	7	buff2 = 0
LVAL	3183:10	3183:10	8	buff2
FIELD	3183:10	3183:10	9	buff2
LEAF_NODE	3183:10	3183:10	10	buff2
ASSIGN_OP	3183:16	3183:16	8	=
LEAF_NODE	3183:16	3183:16	9	=
RVAL	3183:18	3183:18	8	0
FIELD	3183:18	3183:18	9	0
LEAF_NODE	3183:18	3183:18	10	0
LEAF_NODE	3183:19	3183:19	4	;
ITERATION	3184:2	3185:4	3	
KEYWORD	3184:2	3184:2	4	for
LEAF_NODE	3184:2	3184:2	5	for
LEAF_NODE	3184:6	3184:6	4	(
FOR_INIT	3184:7	3184:18	4	col = start ;
EXPR	3184:7	3184:7	5	col = start
ASSIGN	3184:7	3184:13	6	col = start
LVAL	3184:7	3184:7	7	col
FIELD	3184:7	3184:7	8	col
LEAF_NODE	3184:7	3184:7	9	col
ASSIGN_OP	3184:11	3184:11	7	=
LEAF_NODE	3184:11	3184:11	8	=
RVAL	3184:13	3184:13	7	start
FIELD	3184:13	3184:13	8	start
LEAF_NODE	3184:13	3184:13	9	start
LEAF_NODE	3184:18	3184:18	5	;
CONDITION	3184:20	3184:20	4	col < end
EXPR	3184:20	3184:26	5	col < end
FIELD	3184:20	3184:20	6	col
LEAF_NODE	3184:20	3184:20	7	col
REL_OPERATOR	3184:24	3184:24	6	<
LEAF_NODE	3184:24	3184:24	7	<
FIELD	3184:26	3184:26	6	end
LEAF_NODE	3184:26	3184:26	7	end
LEAF_NODE	3184:29	3184:29	4	;
FOR_EXPR	3184:31	3184:31	4	col ++
EXPR	3184:31	3184:31	5	col ++
FIELD	3184:31	3184:34	6	col ++
LEAF_NODE	3184:31	3184:31	7	col
LEAF_NODE	3184:34	3184:34	7	++
LEAF_NODE	3184:36	3184:36	4	)
STATEMENTS	3185:4	3217:4	4	
LEAF_NODE	3185:4	3185:4	5	{
STATEMENTS	3186:4	3187:4	5	
LEAF_NODE	3186:4	3186:4	6	bit_offset
LEAF_NODE	3186:15	3186:15	6	=
LEAF_NODE	3186:17	3186:17	6	col
EXPR_STATEMENT	3186:21	3186:32	6	* bps * spp ;
EXPR	3186:21	3186:29	7	* bps * spp
UNARY_EXPR	3186:21	3186:23	8	* bps
UNARY_OPERATOR	3186:21	3186:21	9	*
LEAF_NODE	3186:21	3186:21	10	*
FIELD	3186:23	3186:23	9	bps
LEAF_NODE	3186:23	3186:23	10	bps
LEAF_NODE	3186:27	3186:27	8	*
FIELD	3186:29	3186:29	8	spp
LEAF_NODE	3186:29	3186:29	9	spp
LEAF_NODE	3186:32	3186:32	7	;
ITERATION	3187:4	3188:6	6	
KEYWORD	3187:4	3187:4	7	for
LEAF_NODE	3187:4	3187:4	8	for
LEAF_NODE	3187:8	3187:8	7	(
FOR_INIT	3187:9	3187:24	7	sindex = sample ;
EXPR	3187:9	3187:9	8	sindex = sample
ASSIGN	3187:9	3187:18	9	sindex = sample
LVAL	3187:9	3187:9	10	sindex
FIELD	3187:9	3187:9	11	sindex
LEAF_NODE	3187:9	3187:9	12	sindex
ASSIGN_OP	3187:16	3187:16	10	=
LEAF_NODE	3187:16	3187:16	11	=
RVAL	3187:18	3187:18	10	sample
FIELD	3187:18	3187:18	11	sample
LEAF_NODE	3187:18	3187:18	12	sample
LEAF_NODE	3187:24	3187:24	8	;
CONDITION	3187:26	3187:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3187:26	3187:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	3187:26	3187:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3187:26	3187:39	10	( sindex < spp )
LEAF_NODE	3187:26	3187:26	11	(
FIELD	3187:27	3187:27	11	sindex
LEAF_NODE	3187:27	3187:27	12	sindex
REL_OPERATOR	3187:34	3187:34	11	<
LEAF_NODE	3187:34	3187:34	12	<
FIELD	3187:36	3187:36	11	spp
LEAF_NODE	3187:36	3187:36	12	spp
LEAF_NODE	3187:39	3187:39	11	)
LEAF_NODE	3187:41	3187:41	10	&&
EXPR	3187:44	3187:70	10	( sindex < ( sample + count ) )
LEAF_NODE	3187:44	3187:44	11	(
FIELD	3187:45	3187:45	11	sindex
LEAF_NODE	3187:45	3187:45	12	sindex
REL_OPERATOR	3187:52	3187:52	11	<
LEAF_NODE	3187:52	3187:52	12	<
LEAF_NODE	3187:54	3187:54	11	(
FIELD	3187:55	3187:55	11	sample
LEAF_NODE	3187:55	3187:55	12	sample
LEAF_NODE	3187:62	3187:62	11	+
FIELD	3187:64	3187:64	11	count
LEAF_NODE	3187:64	3187:64	12	count
LEAF_NODE	3187:69	3187:69	11	)
LEAF_NODE	3187:70	3187:70	11	)
LEAF_NODE	3187:71	3187:71	7	;
FOR_EXPR	3187:73	3187:73	7	sindex ++
EXPR	3187:73	3187:73	8	sindex ++
FIELD	3187:73	3187:79	9	sindex ++
LEAF_NODE	3187:73	3187:73	10	sindex
LEAF_NODE	3187:79	3187:79	10	++
LEAF_NODE	3187:81	3187:81	7	)
STATEMENTS	3188:6	3216:6	7	
LEAF_NODE	3188:6	3188:6	8	{
STATEMENTS	3189:6	3215:6	8	
SELECTION	3189:6	3190:8	9	
KEYWORD	3189:6	3189:6	10	if
LEAF_NODE	3189:6	3189:6	11	if
LEAF_NODE	3189:9	3189:9	10	(
CONDITION	3189:10	3189:10	10	sindex == 0
EXPR	3189:10	3189:20	11	sindex == 0
FIELD	3189:10	3189:10	12	sindex
LEAF_NODE	3189:10	3189:10	13	sindex
EQ_OPERATOR	3189:17	3189:17	12	==
LEAF_NODE	3189:17	3189:17	13	==
FIELD	3189:20	3189:20	12	0
LEAF_NODE	3189:20	3189:20	13	0
LEAF_NODE	3189:21	3189:21	10	)
STATEMENTS	3190:8	3193:8	10	
LEAF_NODE	3190:8	3190:8	11	{
STATEMENTS	3191:8	3192:8	11	
EXPR_STATEMENT	3191:8	3191:33	12	src_byte = bit_offset / 8 ;
EXPR	3191:8	3191:8	13	src_byte = bit_offset / 8
ASSIGN	3191:8	3191:19	14	src_byte = bit_offset / 8
LVAL	3191:8	3191:8	15	src_byte
FIELD	3191:8	3191:8	16	src_byte
LEAF_NODE	3191:8	3191:8	17	src_byte
ASSIGN_OP	3191:17	3191:17	15	=
LEAF_NODE	3191:17	3191:17	16	=
RVAL	3191:19	3191:32	15	bit_offset / 8
FIELD	3191:19	3191:19	16	bit_offset
LEAF_NODE	3191:19	3191:19	17	bit_offset
LEAF_NODE	3191:30	3191:30	16	/
FIELD	3191:32	3191:32	16	8
LEAF_NODE	3191:32	3191:32	17	8
LEAF_NODE	3191:33	3191:33	13	;
EXPR_STATEMENT	3192:8	3192:33	12	src_bit = bit_offset % 8 ;
EXPR	3192:8	3192:8	13	src_bit = bit_offset % 8
ASSIGN	3192:8	3192:19	14	src_bit = bit_offset % 8
LVAL	3192:8	3192:8	15	src_bit
FIELD	3192:8	3192:8	16	src_bit
LEAF_NODE	3192:8	3192:8	17	src_bit
ASSIGN_OP	3192:17	3192:17	15	=
LEAF_NODE	3192:17	3192:17	16	=
RVAL	3192:19	3192:32	15	bit_offset % 8
FIELD	3192:19	3192:19	16	bit_offset
LEAF_NODE	3192:19	3192:19	17	bit_offset
LEAF_NODE	3192:30	3192:30	16	%
FIELD	3192:32	3192:32	16	8
LEAF_NODE	3192:32	3192:32	17	8
LEAF_NODE	3192:33	3192:33	13	;
LEAF_NODE	3193:8	3193:8	11	}
SELECTION	3194:6	3195:8	9	
KEYWORD	3194:6	3194:6	10	else
LEAF_NODE	3194:6	3194:6	11	else
STATEMENTS	3195:8	3198:8	10	
LEAF_NODE	3195:8	3195:8	11	{
STATEMENTS	3196:8	3197:8	11	
EXPR_STATEMENT	3196:8	3196:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	3196:8	3196:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	3196:8	3196:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	3196:8	3196:8	15	src_byte
FIELD	3196:8	3196:8	16	src_byte
LEAF_NODE	3196:8	3196:8	17	src_byte
ASSIGN_OP	3196:17	3196:17	15	=
LEAF_NODE	3196:17	3196:17	16	=
RVAL	3196:19	3196:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	3196:19	3196:19	16	(
FIELD	3196:20	3196:20	16	bit_offset
LEAF_NODE	3196:20	3196:20	17	bit_offset
LEAF_NODE	3196:31	3196:31	16	+
LEAF_NODE	3196:33	3196:33	16	(
FIELD	3196:34	3196:34	16	sindex
LEAF_NODE	3196:34	3196:34	17	sindex
LEAF_NODE	3196:41	3196:41	16	*
FIELD	3196:43	3196:43	16	bps
LEAF_NODE	3196:43	3196:43	17	bps
LEAF_NODE	3196:46	3196:46	16	)
LEAF_NODE	3196:47	3196:47	16	)
LEAF_NODE	3196:49	3196:49	16	/
FIELD	3196:51	3196:51	16	8
LEAF_NODE	3196:51	3196:51	17	8
LEAF_NODE	3196:52	3196:52	13	;
EXPR_STATEMENT	3197:8	3197:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	3197:8	3197:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	3197:8	3197:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	3197:8	3197:8	15	src_bit
FIELD	3197:8	3197:8	16	src_bit
LEAF_NODE	3197:8	3197:8	17	src_bit
ASSIGN_OP	3197:17	3197:17	15	=
LEAF_NODE	3197:17	3197:17	16	=
RVAL	3197:19	3197:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	3197:19	3197:19	16	(
FIELD	3197:20	3197:20	16	bit_offset
LEAF_NODE	3197:20	3197:20	17	bit_offset
LEAF_NODE	3197:31	3197:31	16	+
LEAF_NODE	3197:33	3197:33	16	(
FIELD	3197:34	3197:34	16	sindex
LEAF_NODE	3197:34	3197:34	17	sindex
LEAF_NODE	3197:41	3197:41	16	*
FIELD	3197:43	3197:43	16	bps
LEAF_NODE	3197:43	3197:43	17	bps
LEAF_NODE	3197:46	3197:46	16	)
LEAF_NODE	3197:47	3197:47	16	)
LEAF_NODE	3197:49	3197:49	16	%
FIELD	3197:51	3197:51	16	8
LEAF_NODE	3197:51	3197:51	17	8
LEAF_NODE	3197:52	3197:52	13	;
LEAF_NODE	3198:8	3198:8	11	}
EXPR_STATEMENT	3200:6	3200:25	9	src = in + src_byte ;
EXPR	3200:6	3200:6	10	src = in + src_byte
ASSIGN	3200:6	3200:12	11	src = in + src_byte
LVAL	3200:6	3200:6	12	src
FIELD	3200:6	3200:6	13	src
LEAF_NODE	3200:6	3200:6	14	src
ASSIGN_OP	3200:10	3200:10	12	=
LEAF_NODE	3200:10	3200:10	13	=
RVAL	3200:12	3200:17	12	in + src_byte
FIELD	3200:12	3200:12	13	in
LEAF_NODE	3200:12	3200:12	14	in
LEAF_NODE	3200:15	3200:15	13	+
FIELD	3200:17	3200:17	13	src_byte
LEAF_NODE	3200:17	3200:17	14	src_byte
LEAF_NODE	3200:25	3200:25	10	;
EXPR_STATEMENT	3201:6	3201:49	9	matchbits = maskbits << ( 8 - src_bit - bps ) ;
EXPR	3201:6	3201:6	10	matchbits = maskbits << ( 8 - src_bit - bps )
ASSIGN	3201:6	3201:18	11	matchbits = maskbits << ( 8 - src_bit - bps )
LVAL	3201:6	3201:6	12	matchbits
FIELD	3201:6	3201:6	13	matchbits
LEAF_NODE	3201:6	3201:6	14	matchbits
ASSIGN_OP	3201:16	3201:16	12	=
LEAF_NODE	3201:16	3201:16	13	=
RVAL	3201:18	3201:48	12	maskbits << ( 8 - src_bit - bps )
FIELD	3201:18	3201:18	13	maskbits
LEAF_NODE	3201:18	3201:18	14	maskbits
LEAF_NODE	3201:27	3201:27	13	<<
LEAF_NODE	3201:30	3201:30	13	(
FIELD	3201:31	3201:31	13	8
LEAF_NODE	3201:31	3201:31	14	8
LEAF_NODE	3201:33	3201:33	13	-
FIELD	3201:35	3201:35	13	src_bit
LEAF_NODE	3201:35	3201:35	14	src_bit
LEAF_NODE	3201:43	3201:43	13	-
FIELD	3201:45	3201:45	13	bps
LEAF_NODE	3201:45	3201:45	14	bps
LEAF_NODE	3201:48	3201:48	13	)
LEAF_NODE	3201:49	3201:49	10	;
LEAF_NODE	3202:6	3202:6	9	buff1
LEAF_NODE	3202:12	3202:12	9	=
LEAF_NODE	3202:14	3202:14	9	(
LEAF_NODE	3202:15	3202:15	9	(
LEAF_NODE	3202:16	3202:16	9	*
LEAF_NODE	3202:17	3202:17	9	src
LEAF_NODE	3202:20	3202:20	9	)
LEAF_NODE	3202:22	3202:22	9	&
LEAF_NODE	3202:24	3202:24	9	matchbits
LEAF_NODE	3202:33	3202:33	9	)
LEAF_NODE	3202:35	3202:35	9	<<
LEAF_NODE	3202:38	3202:38	9	(
LEAF_NODE	3202:39	3202:39	9	src_bit
LEAF_NODE	3202:46	3202:46	9	)
LEAF_NODE	3202:47	3202:47	9	;
SELECTION	3203:6	3204:8	9	
KEYWORD	3203:6	3203:6	10	if
LEAF_NODE	3203:6	3203:6	11	if
LEAF_NODE	3203:9	3203:9	10	(
CONDITION	3203:10	3203:10	10	( col == start ) && ( sindex == sample )
EXPR	3203:10	3203:10	11	( col == start ) && ( sindex == sample )
AND	3203:10	3203:28	12	( col == start ) && ( sindex == sample )
EXPR	3203:10	3203:23	13	( col == start )
LEAF_NODE	3203:10	3203:10	14	(
FIELD	3203:11	3203:11	14	col
LEAF_NODE	3203:11	3203:11	15	col
EQ_OPERATOR	3203:15	3203:15	14	==
LEAF_NODE	3203:15	3203:15	15	==
FIELD	3203:18	3203:18	14	start
LEAF_NODE	3203:18	3203:18	15	start
LEAF_NODE	3203:23	3203:23	14	)
LEAF_NODE	3203:25	3203:25	13	&&
EXPR	3203:28	3203:45	13	( sindex == sample )
LEAF_NODE	3203:28	3203:28	14	(
FIELD	3203:29	3203:29	14	sindex
LEAF_NODE	3203:29	3203:29	15	sindex
EQ_OPERATOR	3203:36	3203:36	14	==
LEAF_NODE	3203:36	3203:36	15	==
FIELD	3203:39	3203:39	14	sample
LEAF_NODE	3203:39	3203:39	15	sample
LEAF_NODE	3203:45	3203:45	14	)
LEAF_NODE	3203:46	3203:46	10	)
STATEMENTS	3204:8	3204:8	10	
LEAF_NODE	3204:8	3204:8	11	buff2
LEAF_NODE	3204:14	3204:14	9	=
LEAF_NODE	3204:16	3204:16	9	*
LEAF_NODE	3204:17	3204:17	9	src
LEAF_NODE	3204:21	3204:21	9	&
LEAF_NODE	3204:23	3204:23	9	(
LEAF_NODE	3204:24	3204:24	9	(
LEAF_NODE	3204:25	3204:25	9	uint8
LEAF_NODE	3204:30	3204:30	9	)
LEAF_NODE	3204:31	3204:31	9	-
LEAF_NODE	3204:32	3204:32	9	1
LEAF_NODE	3204:33	3204:33	9	)
LEAF_NODE	3204:35	3204:35	9	<<
LEAF_NODE	3204:38	3204:38	9	(
LEAF_NODE	3204:39	3204:39	9	shift
LEAF_NODE	3204:44	3204:44	9	)
LEAF_NODE	3204:45	3204:45	9	;
SELECTION	3207:6	3208:8	9	
KEYWORD	3207:6	3207:6	10	if
LEAF_NODE	3207:6	3207:6	11	if
LEAF_NODE	3207:9	3207:9	10	(
CONDITION	3207:10	3207:10	10	ready_bits >= 8
EXPR	3207:10	3207:24	11	ready_bits >= 8
FIELD	3207:10	3207:10	12	ready_bits
LEAF_NODE	3207:10	3207:10	13	ready_bits
REL_OPERATOR	3207:21	3207:21	12	>=
LEAF_NODE	3207:21	3207:21	13	>=
FIELD	3207:24	3207:24	12	8
LEAF_NODE	3207:24	3207:24	13	8
LEAF_NODE	3207:25	3207:25	10	)
STATEMENTS	3208:8	3212:8	10	
LEAF_NODE	3208:8	3208:8	11	{
STATEMENTS	3209:8	3211:8	11	
EXPR_STATEMENT	3209:8	3209:23	12	* dst ++ |= buff2 ;
EXPR	3209:8	3209:8	13	* dst ++ |= buff2
ASSIGN	3209:8	3209:18	14	* dst ++ |= buff2
LVAL	3209:8	3209:8	15	* dst ++
UNARY_EXPR	3209:8	3209:9	16	* dst ++
UNARY_OPERATOR	3209:8	3209:8	17	*
LEAF_NODE	3209:8	3209:8	18	*
FIELD	3209:9	3209:12	17	dst ++
LEAF_NODE	3209:9	3209:9	18	dst
LEAF_NODE	3209:12	3209:12	18	++
ASSIGN_OP	3209:15	3209:15	15	|=
LEAF_NODE	3209:15	3209:15	16	|=
RVAL	3209:18	3209:18	15	buff2
FIELD	3209:18	3209:18	16	buff2
LEAF_NODE	3209:18	3209:18	17	buff2
LEAF_NODE	3209:23	3209:23	13	;
EXPR_STATEMENT	3210:8	3210:21	12	buff2 = buff1 ;
EXPR	3210:8	3210:8	13	buff2 = buff1
ASSIGN	3210:8	3210:16	14	buff2 = buff1
LVAL	3210:8	3210:8	15	buff2
FIELD	3210:8	3210:8	16	buff2
LEAF_NODE	3210:8	3210:8	17	buff2
ASSIGN_OP	3210:14	3210:14	15	=
LEAF_NODE	3210:14	3210:14	16	=
RVAL	3210:16	3210:16	15	buff1
FIELD	3210:16	3210:16	16	buff1
LEAF_NODE	3210:16	3210:16	17	buff1
LEAF_NODE	3210:21	3210:21	13	;
EXPR_STATEMENT	3211:8	3211:23	12	ready_bits -= 8 ;
EXPR	3211:8	3211:8	13	ready_bits -= 8
ASSIGN	3211:8	3211:22	14	ready_bits -= 8
LVAL	3211:8	3211:8	15	ready_bits
FIELD	3211:8	3211:8	16	ready_bits
LEAF_NODE	3211:8	3211:8	17	ready_bits
ASSIGN_OP	3211:19	3211:19	15	-=
LEAF_NODE	3211:19	3211:19	16	-=
RVAL	3211:22	3211:22	15	8
FIELD	3211:22	3211:22	16	8
LEAF_NODE	3211:22	3211:22	17	8
LEAF_NODE	3211:23	3211:23	13	;
LEAF_NODE	3212:8	3212:8	11	}
SELECTION	3213:6	3214:1	9	
KEYWORD	3213:6	3213:6	10	else
LEAF_NODE	3213:6	3213:6	11	else
STATEMENTS	3214:1	3214:1	10	
EXPR_STATEMENT	3214:1	3214:38	11	buff2 = buff2 | ( buff1 >> ready_bits ) ;
EXPR	3214:1	3214:1	12	buff2 = buff2 | ( buff1 >> ready_bits )
ASSIGN	3214:1	3214:9	13	buff2 = buff2 | ( buff1 >> ready_bits )
LVAL	3214:1	3214:1	14	buff2
FIELD	3214:1	3214:1	15	buff2
LEAF_NODE	3214:1	3214:1	16	buff2
ASSIGN_OP	3214:7	3214:7	14	=
LEAF_NODE	3214:7	3214:7	15	=
RVAL	3214:9	3214:9	14	buff2 | ( buff1 >> ready_bits )
BIT_OR	3214:9	3214:17	15	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3214:9	3214:9	16	buff2
FIELD	3214:9	3214:9	17	buff2
LEAF_NODE	3214:9	3214:9	18	buff2
LEAF_NODE	3214:15	3214:15	16	|
BIT_OR_ELEM	3214:17	3214:37	16	( buff1 >> ready_bits )
LEAF_NODE	3214:17	3214:17	17	(
FIELD	3214:18	3214:18	17	buff1
LEAF_NODE	3214:18	3214:18	18	buff1
LEAF_NODE	3214:24	3214:24	17	>>
FIELD	3214:27	3214:27	17	ready_bits
LEAF_NODE	3214:27	3214:27	18	ready_bits
LEAF_NODE	3214:37	3214:37	17	)
LEAF_NODE	3214:38	3214:38	12	;
EXPR_STATEMENT	3215:6	3215:23	9	ready_bits += bps ;
EXPR	3215:6	3215:6	10	ready_bits += bps
ASSIGN	3215:6	3215:20	11	ready_bits += bps
LVAL	3215:6	3215:6	12	ready_bits
FIELD	3215:6	3215:6	13	ready_bits
LEAF_NODE	3215:6	3215:6	14	ready_bits
ASSIGN_OP	3215:17	3215:17	12	+=
LEAF_NODE	3215:17	3215:17	13	+=
RVAL	3215:20	3215:20	12	bps
FIELD	3215:20	3215:20	13	bps
LEAF_NODE	3215:20	3215:20	14	bps
LEAF_NODE	3215:23	3215:23	10	;
LEAF_NODE	3216:6	3216:6	8	}
LEAF_NODE	3217:4	3217:4	5	}
ITERATION	3219:2	3220:4	3	
KEYWORD	3219:2	3219:2	4	while
LEAF_NODE	3219:2	3219:2	5	while
LEAF_NODE	3219:8	3219:8	4	(
CONDITION	3219:9	3219:9	4	ready_bits > 0
EXPR	3219:9	3219:22	5	ready_bits > 0
FIELD	3219:9	3219:9	6	ready_bits
LEAF_NODE	3219:9	3219:9	7	ready_bits
REL_OPERATOR	3219:20	3219:20	6	>
LEAF_NODE	3219:20	3219:20	7	>
FIELD	3219:22	3219:22	6	0
LEAF_NODE	3219:22	3219:22	7	0
LEAF_NODE	3219:23	3219:23	4	)
STATEMENTS	3220:4	3224:4	4	
LEAF_NODE	3220:4	3220:4	5	{
STATEMENTS	3221:4	3223:4	5	
EXPR_STATEMENT	3221:4	3221:61	6	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) ) ;
EXPR	3221:4	3221:4	7	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
ASSIGN	3221:4	3221:12	8	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LVAL	3221:4	3221:4	9	buff1
FIELD	3221:4	3221:4	10	buff1
LEAF_NODE	3221:4	3221:4	11	buff1
ASSIGN_OP	3221:10	3221:10	9	=
LEAF_NODE	3221:10	3221:10	10	=
RVAL	3221:12	3221:60	9	( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LEAF_NODE	3221:12	3221:12	10	(
FIELD	3221:13	3221:13	10	buff2
LEAF_NODE	3221:13	3221:13	11	buff2
LEAF_NODE	3221:19	3221:19	10	&
LEAF_NODE	3221:21	3221:21	10	(
LEAF_NODE	3221:22	3221:22	10	(
TYPE_NAME	3221:23	3221:32	10	unsigned int
LEAF_NODE	3221:23	3221:23	11	unsigned
LEAF_NODE	3221:32	3221:32	11	int
LEAF_NODE	3221:35	3221:35	10	)
FIELD	3221:36	3221:36	10	255
LEAF_NODE	3221:36	3221:36	11	255
LEAF_NODE	3221:40	3221:40	10	<<
LEAF_NODE	3221:43	3221:43	10	(
FIELD	3221:44	3221:44	10	8
LEAF_NODE	3221:44	3221:44	11	8
LEAF_NODE	3221:46	3221:46	10	-
FIELD	3221:48	3221:48	10	ready_bits
LEAF_NODE	3221:48	3221:48	11	ready_bits
LEAF_NODE	3221:58	3221:58	10	)
LEAF_NODE	3221:59	3221:59	10	)
LEAF_NODE	3221:60	3221:60	10	)
LEAF_NODE	3221:61	3221:61	7	;
EXPR_STATEMENT	3222:4	3222:18	6	* dst ++ = buff1 ;
EXPR	3222:4	3222:4	7	* dst ++ = buff1
ASSIGN	3222:4	3222:13	8	* dst ++ = buff1
LVAL	3222:4	3222:4	9	* dst ++
UNARY_EXPR	3222:4	3222:5	10	* dst ++
UNARY_OPERATOR	3222:4	3222:4	11	*
LEAF_NODE	3222:4	3222:4	12	*
FIELD	3222:5	3222:8	11	dst ++
LEAF_NODE	3222:5	3222:5	12	dst
LEAF_NODE	3222:8	3222:8	12	++
ASSIGN_OP	3222:11	3222:11	9	=
LEAF_NODE	3222:11	3222:11	10	=
RVAL	3222:13	3222:13	9	buff1
FIELD	3222:13	3222:13	10	buff1
LEAF_NODE	3222:13	3222:13	11	buff1
LEAF_NODE	3222:18	3222:18	7	;
EXPR_STATEMENT	3223:4	3223:19	6	ready_bits -= 8 ;
EXPR	3223:4	3223:4	7	ready_bits -= 8
ASSIGN	3223:4	3223:18	8	ready_bits -= 8
LVAL	3223:4	3223:4	9	ready_bits
FIELD	3223:4	3223:4	10	ready_bits
LEAF_NODE	3223:4	3223:4	11	ready_bits
ASSIGN_OP	3223:15	3223:15	9	-=
LEAF_NODE	3223:15	3223:15	10	-=
RVAL	3223:18	3223:18	9	8
FIELD	3223:18	3223:18	10	8
LEAF_NODE	3223:18	3223:18	11	8
LEAF_NODE	3223:19	3223:19	7	;
LEAF_NODE	3224:4	3224:4	5	}
JUMP_STATEMENT	3226:2	3226:12	3	return ( 0 ) ;
KEYWORD	3226:2	3226:2	4	return
LEAF_NODE	3226:2	3226:2	5	return
DESTINATION	3226:9	3226:9	4	( 0 )
EXPR	3226:9	3226:11	5	( 0 )
LEAF_NODE	3226:9	3226:9	6	(
FIELD	3226:10	3226:10	6	0
LEAF_NODE	3226:10	3226:10	7	0
LEAF_NODE	3226:11	3226:11	6	)
LEAF_NODE	3226:12	3226:12	4	;
LEAF_NODE	3227:2	3227:2	2	}
FUNCTION_DEF	3229:0	3316:2	1	
RETURN_TYPE	3229:0	3229:7	2	static int
LEAF_NODE	3229:0	3229:0	3	static
TYPE_NAME	3229:7	3229:7	3	int
LEAF_NODE	3229:7	3229:7	4	int
FUNCTION_NAME	3230:0	3230:0	2	extractContigSamplesShifted16bits
LEAF_NODE	3230:0	3230:0	3	extractContigSamplesShifted16bits
PARAMETER_LIST	3230:34	3233:38	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end , int shift )
LEAF_NODE	3230:34	3230:34	3	(
PARAMETER_DECL	3230:35	3230:42	3	uint8 * in
TYPE	3230:35	3230:41	4	uint8 *
TYPE_NAME	3230:35	3230:35	5	uint8
LEAF_NODE	3230:35	3230:35	6	uint8
POINTER	3230:41	3230:41	5	*
LEAF_NODE	3230:41	3230:41	6	*
NAME	3230:42	3230:42	4	in
LEAF_NODE	3230:42	3230:42	5	in
LEAF_NODE	3230:44	3230:44	3	,
PARAMETER_DECL	3230:46	3230:53	3	uint8 * out
TYPE	3230:46	3230:52	4	uint8 *
TYPE_NAME	3230:46	3230:46	5	uint8
LEAF_NODE	3230:46	3230:46	6	uint8
POINTER	3230:52	3230:52	5	*
LEAF_NODE	3230:52	3230:52	6	*
NAME	3230:53	3230:53	4	out
LEAF_NODE	3230:53	3230:53	5	out
LEAF_NODE	3230:56	3230:56	3	,
PARAMETER_DECL	3230:58	3230:65	3	uint32 cols
TYPE	3230:58	3230:58	4	uint32
TYPE_NAME	3230:58	3230:58	5	uint32
LEAF_NODE	3230:58	3230:58	6	uint32
NAME	3230:65	3230:65	4	cols
LEAF_NODE	3230:65	3230:65	5	cols
LEAF_NODE	3230:69	3230:69	3	,
PARAMETER_DECL	3231:35	3231:45	3	tsample_t sample
TYPE	3231:35	3231:35	4	tsample_t
TYPE_NAME	3231:35	3231:35	5	tsample_t
LEAF_NODE	3231:35	3231:35	6	tsample_t
NAME	3231:45	3231:45	4	sample
LEAF_NODE	3231:45	3231:45	5	sample
LEAF_NODE	3231:51	3231:51	3	,
PARAMETER_DECL	3231:53	3231:60	3	uint16 spp
TYPE	3231:53	3231:53	4	uint16
TYPE_NAME	3231:53	3231:53	5	uint16
LEAF_NODE	3231:53	3231:53	6	uint16
NAME	3231:60	3231:60	4	spp
LEAF_NODE	3231:60	3231:60	5	spp
LEAF_NODE	3231:63	3231:63	3	,
PARAMETER_DECL	3231:65	3231:72	3	uint16 bps
TYPE	3231:65	3231:65	4	uint16
TYPE_NAME	3231:65	3231:65	5	uint16
LEAF_NODE	3231:65	3231:65	6	uint16
NAME	3231:72	3231:72	4	bps
LEAF_NODE	3231:72	3231:72	5	bps
LEAF_NODE	3231:75	3231:75	3	,
PARAMETER_DECL	3232:16	3232:26	3	tsample_t count
TYPE	3232:16	3232:16	4	tsample_t
TYPE_NAME	3232:16	3232:16	5	tsample_t
LEAF_NODE	3232:16	3232:16	6	tsample_t
NAME	3232:26	3232:26	4	count
LEAF_NODE	3232:26	3232:26	5	count
LEAF_NODE	3232:31	3232:31	3	,
PARAMETER_DECL	3232:33	3232:40	3	uint32 start
TYPE	3232:33	3232:33	4	uint32
TYPE_NAME	3232:33	3232:33	5	uint32
LEAF_NODE	3232:33	3232:33	6	uint32
NAME	3232:40	3232:40	4	start
LEAF_NODE	3232:40	3232:40	5	start
LEAF_NODE	3232:45	3232:45	3	,
PARAMETER_DECL	3232:47	3232:54	3	uint32 end
TYPE	3232:47	3232:47	4	uint32
TYPE_NAME	3232:47	3232:47	5	uint32
LEAF_NODE	3232:47	3232:47	6	uint32
NAME	3232:54	3232:54	4	end
LEAF_NODE	3232:54	3232:54	5	end
LEAF_NODE	3232:57	3232:57	3	,
PARAMETER_DECL	3233:29	3233:33	3	int shift
TYPE	3233:29	3233:29	4	int
TYPE_NAME	3233:29	3233:29	5	int
LEAF_NODE	3233:29	3233:29	6	int
NAME	3233:33	3233:33	4	shift
LEAF_NODE	3233:33	3233:33	5	shift
LEAF_NODE	3233:38	3233:38	3	)
LEAF_NODE	3234:2	3234:2	2	{
STATEMENTS	3235:2	3315:2	2	
SIMPLE_DECL	3235:2	3235:35	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	3235:2	3235:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	3235:2	3235:9	5	int ready_bits ; ready_bits = 0
TYPE	3235:2	3235:2	6	int
TYPE_NAME	3235:2	3235:2	7	int
LEAF_NODE	3235:2	3235:2	8	int
NAME	3235:9	3235:9	6	ready_bits
LEAF_NODE	3235:9	3235:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	3235:9	3235:9	6	ready_bits = 0
ASSIGN	3235:9	3235:22	7	ready_bits = 0
LVAL	3235:9	3235:9	8	ready_bits
NAME	3235:9	3235:9	9	ready_bits
LEAF_NODE	3235:9	3235:9	10	ready_bits
ASSIGN_OP	3235:20	3235:20	8	=
LEAF_NODE	3235:20	3235:20	9	=
RVAL	3235:22	3235:22	8	0
FIELD	3235:22	3235:22	9	0
LEAF_NODE	3235:22	3235:22	10	0
LEAF_NODE	3235:23	3235:23	5	,
VAR_DECL	3235:2	3235:25	5	int sindex ; sindex = 0
TYPE	3235:2	3235:2	6	int
TYPE_NAME	3235:2	3235:2	7	int
LEAF_NODE	3235:2	3235:2	8	int
NAME	3235:25	3235:25	6	sindex
LEAF_NODE	3235:25	3235:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	3235:25	3235:25	6	sindex = 0
ASSIGN	3235:25	3235:34	7	sindex = 0
LVAL	3235:25	3235:25	8	sindex
NAME	3235:25	3235:25	9	sindex
LEAF_NODE	3235:25	3235:25	10	sindex
ASSIGN_OP	3235:32	3235:32	8	=
LEAF_NODE	3235:32	3235:32	9	=
RVAL	3235:34	3235:34	8	0
FIELD	3235:34	3235:34	9	0
LEAF_NODE	3235:34	3235:34	10	0
LEAF_NODE	3235:35	3235:35	4	;
SIMPLE_DECL	3236:2	3236:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	3236:2	3236:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3236:2	3236:9	5	uint32 col
TYPE	3236:2	3236:2	6	uint32
TYPE_NAME	3236:2	3236:2	7	uint32
LEAF_NODE	3236:2	3236:2	8	uint32
NAME	3236:9	3236:9	6	col
LEAF_NODE	3236:9	3236:9	7	col
LEAF_NODE	3236:12	3236:12	5	,
INIT_DECL_LIST	3236:2	3236:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3236:2	3236:14	6	uint32 src_byte
TYPE	3236:2	3236:2	7	uint32
TYPE_NAME	3236:2	3236:2	8	uint32
LEAF_NODE	3236:2	3236:2	9	uint32
NAME	3236:14	3236:14	7	src_byte
LEAF_NODE	3236:14	3236:14	8	src_byte
LEAF_NODE	3236:22	3236:22	6	,
INIT_DECL_LIST	3236:2	3236:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	3236:2	3236:24	7	uint32 src_bit
TYPE	3236:2	3236:2	8	uint32
TYPE_NAME	3236:2	3236:2	9	uint32
LEAF_NODE	3236:2	3236:2	10	uint32
NAME	3236:24	3236:24	8	src_bit
LEAF_NODE	3236:24	3236:24	9	src_bit
LEAF_NODE	3236:31	3236:31	7	,
VAR_DECL	3236:2	3236:33	7	uint32 bit_offset
TYPE	3236:2	3236:2	8	uint32
TYPE_NAME	3236:2	3236:2	9	uint32
LEAF_NODE	3236:2	3236:2	10	uint32
NAME	3236:33	3236:33	8	bit_offset
LEAF_NODE	3236:33	3236:33	9	bit_offset
LEAF_NODE	3236:43	3236:43	4	;
SIMPLE_DECL	3237:2	3237:36	3	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3237:2	3237:2	4	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0
VAR_DECL	3237:2	3237:9	5	uint16 maskbits ; maskbits = 0
TYPE	3237:2	3237:2	6	uint16
TYPE_NAME	3237:2	3237:2	7	uint16
LEAF_NODE	3237:2	3237:2	8	uint16
NAME	3237:9	3237:9	6	maskbits
LEAF_NODE	3237:9	3237:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3237:9	3237:9	6	maskbits = 0
ASSIGN	3237:9	3237:20	7	maskbits = 0
LVAL	3237:9	3237:9	8	maskbits
NAME	3237:9	3237:9	9	maskbits
LEAF_NODE	3237:9	3237:9	10	maskbits
ASSIGN_OP	3237:18	3237:18	8	=
LEAF_NODE	3237:18	3237:18	9	=
RVAL	3237:20	3237:20	8	0
FIELD	3237:20	3237:20	9	0
LEAF_NODE	3237:20	3237:20	10	0
LEAF_NODE	3237:21	3237:21	5	,
VAR_DECL	3237:2	3237:23	5	uint16 matchbits ; matchbits = 0
TYPE	3237:2	3237:2	6	uint16
TYPE_NAME	3237:2	3237:2	7	uint16
LEAF_NODE	3237:2	3237:2	8	uint16
NAME	3237:23	3237:23	6	matchbits
LEAF_NODE	3237:23	3237:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3237:23	3237:23	6	matchbits = 0
ASSIGN	3237:23	3237:35	7	matchbits = 0
LVAL	3237:23	3237:23	8	matchbits
NAME	3237:23	3237:23	9	matchbits
LEAF_NODE	3237:23	3237:23	10	matchbits
ASSIGN_OP	3237:33	3237:33	8	=
LEAF_NODE	3237:33	3237:33	9	=
RVAL	3237:35	3237:35	8	0
FIELD	3237:35	3237:35	9	0
LEAF_NODE	3237:35	3237:35	10	0
LEAF_NODE	3237:36	3237:36	4	;
SIMPLE_DECL	3238:2	3238:29	3	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	3238:2	3238:2	4	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0
VAR_DECL	3238:2	3238:9	5	uint16 buff1 ; buff1 = 0
TYPE	3238:2	3238:2	6	uint16
TYPE_NAME	3238:2	3238:2	7	uint16
LEAF_NODE	3238:2	3238:2	8	uint16
NAME	3238:9	3238:9	6	buff1
LEAF_NODE	3238:9	3238:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3238:9	3238:9	6	buff1 = 0
ASSIGN	3238:9	3238:17	7	buff1 = 0
LVAL	3238:9	3238:9	8	buff1
NAME	3238:9	3238:9	9	buff1
LEAF_NODE	3238:9	3238:9	10	buff1
ASSIGN_OP	3238:15	3238:15	8	=
LEAF_NODE	3238:15	3238:15	9	=
RVAL	3238:17	3238:17	8	0
FIELD	3238:17	3238:17	9	0
LEAF_NODE	3238:17	3238:17	10	0
LEAF_NODE	3238:18	3238:18	5	,
VAR_DECL	3238:2	3238:20	5	uint16 buff2 ; buff2 = 0
TYPE	3238:2	3238:2	6	uint16
TYPE_NAME	3238:2	3238:2	7	uint16
LEAF_NODE	3238:2	3238:2	8	uint16
NAME	3238:20	3238:20	6	buff2
LEAF_NODE	3238:20	3238:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	3238:20	3238:20	6	buff2 = 0
ASSIGN	3238:20	3238:28	7	buff2 = 0
LVAL	3238:20	3238:20	8	buff2
NAME	3238:20	3238:20	9	buff2
LEAF_NODE	3238:20	3238:20	10	buff2
ASSIGN_OP	3238:26	3238:26	8	=
LEAF_NODE	3238:26	3238:26	9	=
RVAL	3238:28	3238:28	8	0
FIELD	3238:28	3238:28	9	0
LEAF_NODE	3238:28	3238:28	10	0
LEAF_NODE	3238:29	3238:29	4	;
SIMPLE_DECL	3239:2	3239:21	3	uint8 bytebuff ; bytebuff = 0 ;
VAR_DECL	3239:2	3239:9	4	uint8 bytebuff ; bytebuff = 0
TYPE	3239:2	3239:2	5	uint8
TYPE_NAME	3239:2	3239:2	6	uint8
LEAF_NODE	3239:2	3239:2	7	uint8
NAME	3239:9	3239:9	5	bytebuff
LEAF_NODE	3239:9	3239:9	6	bytebuff
LEAF_NODE	0:0	0:0	5	;
INIT	3239:9	3239:9	5	bytebuff = 0
ASSIGN	3239:9	3239:20	6	bytebuff = 0
LVAL	3239:9	3239:9	7	bytebuff
NAME	3239:9	3239:9	8	bytebuff
LEAF_NODE	3239:9	3239:9	9	bytebuff
ASSIGN_OP	3239:18	3239:18	7	=
LEAF_NODE	3239:18	3239:18	8	=
RVAL	3239:20	3239:20	7	0
FIELD	3239:20	3239:20	8	0
LEAF_NODE	3239:20	3239:20	9	0
LEAF_NODE	3239:21	3239:21	4	;
SIMPLE_DECL	3240:2	3240:17	3	uint8 * src ; src = in ;
VAR_DECL	3240:2	3240:9	4	uint8 * src ; src = in
TYPE	3240:2	3240:8	5	uint8 *
TYPE_NAME	3240:2	3240:2	6	uint8
LEAF_NODE	3240:2	3240:2	7	uint8
POINTER	3240:8	3240:8	6	*
LEAF_NODE	3240:8	3240:8	7	*
NAME	3240:9	3240:9	5	src
LEAF_NODE	3240:9	3240:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3240:9	3240:9	5	src = in
ASSIGN	3240:9	3240:15	6	src = in
LVAL	3240:9	3240:9	7	src
NAME	3240:9	3240:9	8	src
LEAF_NODE	3240:9	3240:9	9	src
ASSIGN_OP	3240:13	3240:13	7	=
LEAF_NODE	3240:13	3240:13	8	=
RVAL	3240:15	3240:15	7	in
FIELD	3240:15	3240:15	8	in
LEAF_NODE	3240:15	3240:15	9	in
LEAF_NODE	3240:17	3240:17	4	;
SIMPLE_DECL	3241:2	3241:18	3	uint8 * dst ; dst = out ;
VAR_DECL	3241:2	3241:9	4	uint8 * dst ; dst = out
TYPE	3241:2	3241:8	5	uint8 *
TYPE_NAME	3241:2	3241:2	6	uint8
LEAF_NODE	3241:2	3241:2	7	uint8
POINTER	3241:8	3241:8	6	*
LEAF_NODE	3241:8	3241:8	7	*
NAME	3241:9	3241:9	5	dst
LEAF_NODE	3241:9	3241:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3241:9	3241:9	5	dst = out
ASSIGN	3241:9	3241:15	6	dst = out
LVAL	3241:9	3241:9	7	dst
NAME	3241:9	3241:9	8	dst
LEAF_NODE	3241:9	3241:9	9	dst
ASSIGN_OP	3241:13	3241:13	7	=
LEAF_NODE	3241:13	3241:13	8	=
RVAL	3241:15	3241:15	7	out
FIELD	3241:15	3241:15	8	out
LEAF_NODE	3241:15	3241:15	9	out
LEAF_NODE	3241:18	3241:18	4	;
SELECTION	3243:2	3244:4	3	
KEYWORD	3243:2	3243:2	4	if
LEAF_NODE	3243:2	3243:2	5	if
LEAF_NODE	3243:5	3243:5	4	(
CONDITION	3243:6	3243:6	4	( src == NULL ) || ( dst == NULL )
EXPR	3243:6	3243:6	5	( src == NULL ) || ( dst == NULL )
OR	3243:6	3243:23	6	( src == NULL ) || ( dst == NULL )
EXPR	3243:6	3243:18	7	( src == NULL )
LEAF_NODE	3243:6	3243:6	8	(
FIELD	3243:7	3243:7	8	src
LEAF_NODE	3243:7	3243:7	9	src
EQ_OPERATOR	3243:11	3243:11	8	==
LEAF_NODE	3243:11	3243:11	9	==
FIELD	3243:14	3243:14	8	NULL
LEAF_NODE	3243:14	3243:14	9	NULL
LEAF_NODE	3243:18	3243:18	8	)
LEAF_NODE	3243:20	3243:20	7	||
EXPR	3243:23	3243:35	7	( dst == NULL )
LEAF_NODE	3243:23	3243:23	8	(
FIELD	3243:24	3243:24	8	dst
LEAF_NODE	3243:24	3243:24	9	dst
EQ_OPERATOR	3243:28	3243:28	8	==
LEAF_NODE	3243:28	3243:28	9	==
FIELD	3243:31	3243:31	8	NULL
LEAF_NODE	3243:31	3243:31	9	NULL
LEAF_NODE	3243:35	3243:35	8	)
LEAF_NODE	3243:36	3243:36	4	)
STATEMENTS	3244:4	3247:4	4	
LEAF_NODE	3244:4	3244:4	5	{
STATEMENTS	3245:4	3246:4	5	
EXPR_STATEMENT	3245:4	3245:83	6	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid input or output buffer" ) ;
EXPR	3245:4	3245:4	7	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3245:4	3245:82	8	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid input or output buffer" )
CALLEE	3245:4	3245:4	9	TIFFError
LEAF_NODE	3245:4	3245:4	10	TIFFError
LEAF_NODE	3245:13	3245:13	9	(
ARGUMENT	3245:14	3245:14	9	"extractContigSamplesShifted16bits"
FIELD	3245:14	3245:14	10	"extractContigSamplesShifted16bits"
LEAF_NODE	3245:14	3245:14	11	"extractContigSamplesShifted16bits"
LEAF_NODE	3245:49	3245:49	9	,
ARGUMENT	3245:50	3245:50	9	"Invalid input or output buffer"
FIELD	3245:50	3245:50	10	"Invalid input or output buffer"
LEAF_NODE	3245:50	3245:50	11	"Invalid input or output buffer"
LEAF_NODE	3245:82	3245:82	9	)
LEAF_NODE	3245:83	3245:83	7	;
JUMP_STATEMENT	3246:4	3246:14	6	return ( 1 ) ;
KEYWORD	3246:4	3246:4	7	return
LEAF_NODE	3246:4	3246:4	8	return
DESTINATION	3246:11	3246:11	7	( 1 )
EXPR	3246:11	3246:13	8	( 1 )
LEAF_NODE	3246:11	3246:11	9	(
FIELD	3246:12	3246:12	9	1
LEAF_NODE	3246:12	3246:12	10	1
LEAF_NODE	3246:13	3246:13	9	)
LEAF_NODE	3246:14	3246:14	7	;
LEAF_NODE	3247:4	3247:4	5	}
SELECTION	3249:2	3250:4	3	
KEYWORD	3249:2	3249:2	4	if
LEAF_NODE	3249:2	3249:2	5	if
LEAF_NODE	3249:5	3249:5	4	(
CONDITION	3249:6	3249:6	4	( start > end ) || ( start > cols )
EXPR	3249:6	3249:6	5	( start > end ) || ( start > cols )
OR	3249:6	3249:23	6	( start > end ) || ( start > cols )
EXPR	3249:6	3249:18	7	( start > end )
LEAF_NODE	3249:6	3249:6	8	(
FIELD	3249:7	3249:7	8	start
LEAF_NODE	3249:7	3249:7	9	start
REL_OPERATOR	3249:13	3249:13	8	>
LEAF_NODE	3249:13	3249:13	9	>
FIELD	3249:15	3249:15	8	end
LEAF_NODE	3249:15	3249:15	9	end
LEAF_NODE	3249:18	3249:18	8	)
LEAF_NODE	3249:20	3249:20	7	||
EXPR	3249:23	3249:36	7	( start > cols )
LEAF_NODE	3249:23	3249:23	8	(
FIELD	3249:24	3249:24	8	start
LEAF_NODE	3249:24	3249:24	9	start
REL_OPERATOR	3249:30	3249:30	8	>
LEAF_NODE	3249:30	3249:30	9	>
FIELD	3249:32	3249:32	8	cols
LEAF_NODE	3249:32	3249:32	9	cols
LEAF_NODE	3249:36	3249:36	8	)
LEAF_NODE	3249:37	3249:37	4	)
STATEMENTS	3250:4	3254:4	4	
LEAF_NODE	3250:4	3250:4	5	{
STATEMENTS	3251:4	3253:4	5	
EXPR_STATEMENT	3251:4	3252:62	6	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	3251:4	3251:4	7	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	3251:4	3252:61	8	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid start column value %d ignored" , start )
CALLEE	3251:4	3251:4	9	TIFFError
LEAF_NODE	3251:4	3251:4	10	TIFFError
LEAF_NODE	3251:14	3251:14	9	(
ARGUMENT	3251:15	3251:15	9	"extractContigSamplesShifted16bits"
FIELD	3251:15	3251:15	10	"extractContigSamplesShifted16bits"
LEAF_NODE	3251:15	3251:15	11	"extractContigSamplesShifted16bits"
LEAF_NODE	3251:50	3251:50	9	,
ARGUMENT	3252:15	3252:15	9	"Invalid start column value %d ignored"
FIELD	3252:15	3252:15	10	"Invalid start column value %d ignored"
LEAF_NODE	3252:15	3252:15	11	"Invalid start column value %d ignored"
LEAF_NODE	3252:54	3252:54	9	,
ARGUMENT	3252:56	3252:56	9	start
FIELD	3252:56	3252:56	10	start
LEAF_NODE	3252:56	3252:56	11	start
LEAF_NODE	3252:61	3252:61	9	)
LEAF_NODE	3252:62	3252:62	7	;
EXPR_STATEMENT	3253:4	3253:13	6	start = 0 ;
EXPR	3253:4	3253:4	7	start = 0
ASSIGN	3253:4	3253:12	8	start = 0
LVAL	3253:4	3253:4	9	start
FIELD	3253:4	3253:4	10	start
LEAF_NODE	3253:4	3253:4	11	start
ASSIGN_OP	3253:10	3253:10	9	=
LEAF_NODE	3253:10	3253:10	10	=
RVAL	3253:12	3253:12	9	0
FIELD	3253:12	3253:12	10	0
LEAF_NODE	3253:12	3253:12	11	0
LEAF_NODE	3253:13	3253:13	7	;
LEAF_NODE	3254:4	3254:4	5	}
SELECTION	3255:2	3256:4	3	
KEYWORD	3255:2	3255:2	4	if
LEAF_NODE	3255:2	3255:2	5	if
LEAF_NODE	3255:5	3255:5	4	(
CONDITION	3255:6	3255:6	4	( end == 0 ) || ( end > cols )
EXPR	3255:6	3255:6	5	( end == 0 ) || ( end > cols )
OR	3255:6	3255:20	6	( end == 0 ) || ( end > cols )
EXPR	3255:6	3255:15	7	( end == 0 )
LEAF_NODE	3255:6	3255:6	8	(
FIELD	3255:7	3255:7	8	end
LEAF_NODE	3255:7	3255:7	9	end
EQ_OPERATOR	3255:11	3255:11	8	==
LEAF_NODE	3255:11	3255:11	9	==
FIELD	3255:14	3255:14	8	0
LEAF_NODE	3255:14	3255:14	9	0
LEAF_NODE	3255:15	3255:15	8	)
LEAF_NODE	3255:17	3255:17	7	||
EXPR	3255:20	3255:31	7	( end > cols )
LEAF_NODE	3255:20	3255:20	8	(
FIELD	3255:21	3255:21	8	end
LEAF_NODE	3255:21	3255:21	9	end
REL_OPERATOR	3255:25	3255:25	8	>
LEAF_NODE	3255:25	3255:25	9	>
FIELD	3255:27	3255:27	8	cols
LEAF_NODE	3255:27	3255:27	9	cols
LEAF_NODE	3255:31	3255:31	8	)
LEAF_NODE	3255:32	3255:32	4	)
STATEMENTS	3256:4	3260:4	4	
LEAF_NODE	3256:4	3256:4	5	{
STATEMENTS	3257:4	3259:4	5	
EXPR_STATEMENT	3257:4	3258:58	6	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	3257:4	3257:4	7	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	3257:4	3258:57	8	TIFFError ( "extractContigSamplesShifted16bits" , "Invalid end column value %d ignored" , end )
CALLEE	3257:4	3257:4	9	TIFFError
LEAF_NODE	3257:4	3257:4	10	TIFFError
LEAF_NODE	3257:14	3257:14	9	(
ARGUMENT	3257:15	3257:15	9	"extractContigSamplesShifted16bits"
FIELD	3257:15	3257:15	10	"extractContigSamplesShifted16bits"
LEAF_NODE	3257:15	3257:15	11	"extractContigSamplesShifted16bits"
LEAF_NODE	3257:50	3257:50	9	,
ARGUMENT	3258:15	3258:15	9	"Invalid end column value %d ignored"
FIELD	3258:15	3258:15	10	"Invalid end column value %d ignored"
LEAF_NODE	3258:15	3258:15	11	"Invalid end column value %d ignored"
LEAF_NODE	3258:52	3258:52	9	,
ARGUMENT	3258:54	3258:54	9	end
FIELD	3258:54	3258:54	10	end
LEAF_NODE	3258:54	3258:54	11	end
LEAF_NODE	3258:57	3258:57	9	)
LEAF_NODE	3258:58	3258:58	7	;
EXPR_STATEMENT	3259:4	3259:14	6	end = cols ;
EXPR	3259:4	3259:4	7	end = cols
ASSIGN	3259:4	3259:10	8	end = cols
LVAL	3259:4	3259:4	9	end
FIELD	3259:4	3259:4	10	end
LEAF_NODE	3259:4	3259:4	11	end
ASSIGN_OP	3259:8	3259:8	9	=
LEAF_NODE	3259:8	3259:8	10	=
RVAL	3259:10	3259:10	9	cols
FIELD	3259:10	3259:10	10	cols
LEAF_NODE	3259:10	3259:10	11	cols
LEAF_NODE	3259:14	3259:14	7	;
LEAF_NODE	3260:4	3260:4	5	}
EXPR_STATEMENT	3262:2	3262:20	3	ready_bits = shift ;
EXPR	3262:2	3262:2	4	ready_bits = shift
ASSIGN	3262:2	3262:15	5	ready_bits = shift
LVAL	3262:2	3262:2	6	ready_bits
FIELD	3262:2	3262:2	7	ready_bits
LEAF_NODE	3262:2	3262:2	8	ready_bits
ASSIGN_OP	3262:13	3262:13	6	=
LEAF_NODE	3262:13	3262:13	7	=
RVAL	3262:15	3262:15	6	shift
FIELD	3262:15	3262:15	7	shift
LEAF_NODE	3262:15	3262:15	8	shift
LEAF_NODE	3262:20	3262:20	4	;
EXPR_STATEMENT	3263:2	3263:37	3	maskbits = ( uint16 ) - 1 >> ( 16 - bps ) ;
EXPR	3263:2	3263:2	4	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
ASSIGN	3263:2	3263:13	5	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
LVAL	3263:2	3263:2	6	maskbits
FIELD	3263:2	3263:2	7	maskbits
LEAF_NODE	3263:2	3263:2	8	maskbits
ASSIGN_OP	3263:11	3263:11	6	=
LEAF_NODE	3263:11	3263:11	7	=
RVAL	3263:13	3263:36	6	( uint16 ) - 1 >> ( 16 - bps )
LEAF_NODE	3263:13	3263:13	7	(
TYPE_NAME	3263:14	3263:14	7	uint16
LEAF_NODE	3263:14	3263:14	8	uint16
LEAF_NODE	3263:20	3263:20	7	)
UNARY_EXPR	3263:21	3263:22	7	- 1
UNARY_OPERATOR	3263:21	3263:21	8	-
LEAF_NODE	3263:21	3263:21	9	-
FIELD	3263:22	3263:22	8	1
LEAF_NODE	3263:22	3263:22	9	1
LEAF_NODE	3263:24	3263:24	7	>>
LEAF_NODE	3263:27	3263:27	7	(
FIELD	3263:28	3263:28	7	16
LEAF_NODE	3263:28	3263:28	8	16
LEAF_NODE	3263:31	3263:31	7	-
FIELD	3263:33	3263:33	7	bps
LEAF_NODE	3263:33	3263:33	8	bps
LEAF_NODE	3263:36	3263:36	7	)
LEAF_NODE	3263:37	3263:37	4	;
ITERATION	3264:2	3265:4	3	
KEYWORD	3264:2	3264:2	4	for
LEAF_NODE	3264:2	3264:2	5	for
LEAF_NODE	3264:6	3264:6	4	(
FOR_INIT	3264:7	3264:18	4	col = start ;
EXPR	3264:7	3264:7	5	col = start
ASSIGN	3264:7	3264:13	6	col = start
LVAL	3264:7	3264:7	7	col
FIELD	3264:7	3264:7	8	col
LEAF_NODE	3264:7	3264:7	9	col
ASSIGN_OP	3264:11	3264:11	7	=
LEAF_NODE	3264:11	3264:11	8	=
RVAL	3264:13	3264:13	7	start
FIELD	3264:13	3264:13	8	start
LEAF_NODE	3264:13	3264:13	9	start
LEAF_NODE	3264:18	3264:18	5	;
CONDITION	3264:20	3264:20	4	col < end
EXPR	3264:20	3264:26	5	col < end
FIELD	3264:20	3264:20	6	col
LEAF_NODE	3264:20	3264:20	7	col
REL_OPERATOR	3264:24	3264:24	6	<
LEAF_NODE	3264:24	3264:24	7	<
FIELD	3264:26	3264:26	6	end
LEAF_NODE	3264:26	3264:26	7	end
LEAF_NODE	3264:29	3264:29	4	;
FOR_EXPR	3264:31	3264:31	4	col ++
EXPR	3264:31	3264:31	5	col ++
FIELD	3264:31	3264:34	6	col ++
LEAF_NODE	3264:31	3264:31	7	col
LEAF_NODE	3264:34	3264:34	7	++
LEAF_NODE	3264:36	3264:36	4	)
STATEMENTS	3265:4	3305:4	4	
LEAF_NODE	3265:4	3265:4	5	{
STATEMENTS	3266:4	3267:4	5	
LEAF_NODE	3266:4	3266:4	6	bit_offset
LEAF_NODE	3266:15	3266:15	6	=
LEAF_NODE	3266:17	3266:17	6	col
EXPR_STATEMENT	3266:21	3266:32	6	* bps * spp ;
EXPR	3266:21	3266:29	7	* bps * spp
UNARY_EXPR	3266:21	3266:23	8	* bps
UNARY_OPERATOR	3266:21	3266:21	9	*
LEAF_NODE	3266:21	3266:21	10	*
FIELD	3266:23	3266:23	9	bps
LEAF_NODE	3266:23	3266:23	10	bps
LEAF_NODE	3266:27	3266:27	8	*
FIELD	3266:29	3266:29	8	spp
LEAF_NODE	3266:29	3266:29	9	spp
LEAF_NODE	3266:32	3266:32	7	;
ITERATION	3267:4	3268:6	6	
KEYWORD	3267:4	3267:4	7	for
LEAF_NODE	3267:4	3267:4	8	for
LEAF_NODE	3267:8	3267:8	7	(
FOR_INIT	3267:9	3267:24	7	sindex = sample ;
EXPR	3267:9	3267:9	8	sindex = sample
ASSIGN	3267:9	3267:18	9	sindex = sample
LVAL	3267:9	3267:9	10	sindex
FIELD	3267:9	3267:9	11	sindex
LEAF_NODE	3267:9	3267:9	12	sindex
ASSIGN_OP	3267:16	3267:16	10	=
LEAF_NODE	3267:16	3267:16	11	=
RVAL	3267:18	3267:18	10	sample
FIELD	3267:18	3267:18	11	sample
LEAF_NODE	3267:18	3267:18	12	sample
LEAF_NODE	3267:24	3267:24	8	;
CONDITION	3267:26	3267:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3267:26	3267:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	3267:26	3267:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3267:26	3267:39	10	( sindex < spp )
LEAF_NODE	3267:26	3267:26	11	(
FIELD	3267:27	3267:27	11	sindex
LEAF_NODE	3267:27	3267:27	12	sindex
REL_OPERATOR	3267:34	3267:34	11	<
LEAF_NODE	3267:34	3267:34	12	<
FIELD	3267:36	3267:36	11	spp
LEAF_NODE	3267:36	3267:36	12	spp
LEAF_NODE	3267:39	3267:39	11	)
LEAF_NODE	3267:41	3267:41	10	&&
EXPR	3267:44	3267:70	10	( sindex < ( sample + count ) )
LEAF_NODE	3267:44	3267:44	11	(
FIELD	3267:45	3267:45	11	sindex
LEAF_NODE	3267:45	3267:45	12	sindex
REL_OPERATOR	3267:52	3267:52	11	<
LEAF_NODE	3267:52	3267:52	12	<
LEAF_NODE	3267:54	3267:54	11	(
FIELD	3267:55	3267:55	11	sample
LEAF_NODE	3267:55	3267:55	12	sample
LEAF_NODE	3267:62	3267:62	11	+
FIELD	3267:64	3267:64	11	count
LEAF_NODE	3267:64	3267:64	12	count
LEAF_NODE	3267:69	3267:69	11	)
LEAF_NODE	3267:70	3267:70	11	)
LEAF_NODE	3267:71	3267:71	7	;
FOR_EXPR	3267:73	3267:73	7	sindex ++
EXPR	3267:73	3267:73	8	sindex ++
FIELD	3267:73	3267:79	9	sindex ++
LEAF_NODE	3267:73	3267:73	10	sindex
LEAF_NODE	3267:79	3267:79	10	++
LEAF_NODE	3267:81	3267:81	7	)
STATEMENTS	3268:6	3304:6	7	
LEAF_NODE	3268:6	3268:6	8	{
STATEMENTS	3269:6	3303:6	8	
SELECTION	3269:6	3270:8	9	
KEYWORD	3269:6	3269:6	10	if
LEAF_NODE	3269:6	3269:6	11	if
LEAF_NODE	3269:9	3269:9	10	(
CONDITION	3269:10	3269:10	10	sindex == 0
EXPR	3269:10	3269:20	11	sindex == 0
FIELD	3269:10	3269:10	12	sindex
LEAF_NODE	3269:10	3269:10	13	sindex
EQ_OPERATOR	3269:17	3269:17	12	==
LEAF_NODE	3269:17	3269:17	13	==
FIELD	3269:20	3269:20	12	0
LEAF_NODE	3269:20	3269:20	13	0
LEAF_NODE	3269:21	3269:21	10	)
STATEMENTS	3270:8	3273:8	10	
LEAF_NODE	3270:8	3270:8	11	{
STATEMENTS	3271:8	3272:8	11	
EXPR_STATEMENT	3271:8	3271:33	12	src_byte = bit_offset / 8 ;
EXPR	3271:8	3271:8	13	src_byte = bit_offset / 8
ASSIGN	3271:8	3271:19	14	src_byte = bit_offset / 8
LVAL	3271:8	3271:8	15	src_byte
FIELD	3271:8	3271:8	16	src_byte
LEAF_NODE	3271:8	3271:8	17	src_byte
ASSIGN_OP	3271:17	3271:17	15	=
LEAF_NODE	3271:17	3271:17	16	=
RVAL	3271:19	3271:32	15	bit_offset / 8
FIELD	3271:19	3271:19	16	bit_offset
LEAF_NODE	3271:19	3271:19	17	bit_offset
LEAF_NODE	3271:30	3271:30	16	/
FIELD	3271:32	3271:32	16	8
LEAF_NODE	3271:32	3271:32	17	8
LEAF_NODE	3271:33	3271:33	13	;
EXPR_STATEMENT	3272:8	3272:33	12	src_bit = bit_offset % 8 ;
EXPR	3272:8	3272:8	13	src_bit = bit_offset % 8
ASSIGN	3272:8	3272:19	14	src_bit = bit_offset % 8
LVAL	3272:8	3272:8	15	src_bit
FIELD	3272:8	3272:8	16	src_bit
LEAF_NODE	3272:8	3272:8	17	src_bit
ASSIGN_OP	3272:17	3272:17	15	=
LEAF_NODE	3272:17	3272:17	16	=
RVAL	3272:19	3272:32	15	bit_offset % 8
FIELD	3272:19	3272:19	16	bit_offset
LEAF_NODE	3272:19	3272:19	17	bit_offset
LEAF_NODE	3272:30	3272:30	16	%
FIELD	3272:32	3272:32	16	8
LEAF_NODE	3272:32	3272:32	17	8
LEAF_NODE	3272:33	3272:33	13	;
LEAF_NODE	3273:8	3273:8	11	}
SELECTION	3274:6	3275:8	9	
KEYWORD	3274:6	3274:6	10	else
LEAF_NODE	3274:6	3274:6	11	else
STATEMENTS	3275:8	3278:8	10	
LEAF_NODE	3275:8	3275:8	11	{
STATEMENTS	3276:8	3277:8	11	
EXPR_STATEMENT	3276:8	3276:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	3276:8	3276:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	3276:8	3276:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	3276:8	3276:8	15	src_byte
FIELD	3276:8	3276:8	16	src_byte
LEAF_NODE	3276:8	3276:8	17	src_byte
ASSIGN_OP	3276:17	3276:17	15	=
LEAF_NODE	3276:17	3276:17	16	=
RVAL	3276:19	3276:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	3276:19	3276:19	16	(
FIELD	3276:20	3276:20	16	bit_offset
LEAF_NODE	3276:20	3276:20	17	bit_offset
LEAF_NODE	3276:31	3276:31	16	+
LEAF_NODE	3276:33	3276:33	16	(
FIELD	3276:34	3276:34	16	sindex
LEAF_NODE	3276:34	3276:34	17	sindex
LEAF_NODE	3276:41	3276:41	16	*
FIELD	3276:43	3276:43	16	bps
LEAF_NODE	3276:43	3276:43	17	bps
LEAF_NODE	3276:46	3276:46	16	)
LEAF_NODE	3276:47	3276:47	16	)
LEAF_NODE	3276:49	3276:49	16	/
FIELD	3276:51	3276:51	16	8
LEAF_NODE	3276:51	3276:51	17	8
LEAF_NODE	3276:52	3276:52	13	;
EXPR_STATEMENT	3277:8	3277:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	3277:8	3277:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	3277:8	3277:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	3277:8	3277:8	15	src_bit
FIELD	3277:8	3277:8	16	src_bit
LEAF_NODE	3277:8	3277:8	17	src_bit
ASSIGN_OP	3277:17	3277:17	15	=
LEAF_NODE	3277:17	3277:17	16	=
RVAL	3277:19	3277:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	3277:19	3277:19	16	(
FIELD	3277:20	3277:20	16	bit_offset
LEAF_NODE	3277:20	3277:20	17	bit_offset
LEAF_NODE	3277:31	3277:31	16	+
LEAF_NODE	3277:33	3277:33	16	(
FIELD	3277:34	3277:34	16	sindex
LEAF_NODE	3277:34	3277:34	17	sindex
LEAF_NODE	3277:41	3277:41	16	*
FIELD	3277:43	3277:43	16	bps
LEAF_NODE	3277:43	3277:43	17	bps
LEAF_NODE	3277:46	3277:46	16	)
LEAF_NODE	3277:47	3277:47	16	)
LEAF_NODE	3277:49	3277:49	16	%
FIELD	3277:51	3277:51	16	8
LEAF_NODE	3277:51	3277:51	17	8
LEAF_NODE	3277:52	3277:52	13	;
LEAF_NODE	3278:8	3278:8	11	}
EXPR_STATEMENT	3280:6	3280:25	9	src = in + src_byte ;
EXPR	3280:6	3280:6	10	src = in + src_byte
ASSIGN	3280:6	3280:12	11	src = in + src_byte
LVAL	3280:6	3280:6	12	src
FIELD	3280:6	3280:6	13	src
LEAF_NODE	3280:6	3280:6	14	src
ASSIGN_OP	3280:10	3280:10	12	=
LEAF_NODE	3280:10	3280:10	13	=
RVAL	3280:12	3280:17	12	in + src_byte
FIELD	3280:12	3280:12	13	in
LEAF_NODE	3280:12	3280:12	14	in
LEAF_NODE	3280:15	3280:15	13	+
FIELD	3280:17	3280:17	13	src_byte
LEAF_NODE	3280:17	3280:17	14	src_byte
LEAF_NODE	3280:25	3280:25	10	;
EXPR_STATEMENT	3281:6	3281:50	9	matchbits = maskbits << ( 16 - src_bit - bps ) ;
EXPR	3281:6	3281:6	10	matchbits = maskbits << ( 16 - src_bit - bps )
ASSIGN	3281:6	3281:18	11	matchbits = maskbits << ( 16 - src_bit - bps )
LVAL	3281:6	3281:6	12	matchbits
FIELD	3281:6	3281:6	13	matchbits
LEAF_NODE	3281:6	3281:6	14	matchbits
ASSIGN_OP	3281:16	3281:16	12	=
LEAF_NODE	3281:16	3281:16	13	=
RVAL	3281:18	3281:49	12	maskbits << ( 16 - src_bit - bps )
FIELD	3281:18	3281:18	13	maskbits
LEAF_NODE	3281:18	3281:18	14	maskbits
LEAF_NODE	3281:27	3281:27	13	<<
LEAF_NODE	3281:30	3281:30	13	(
FIELD	3281:31	3281:31	13	16
LEAF_NODE	3281:31	3281:31	14	16
LEAF_NODE	3281:34	3281:34	13	-
FIELD	3281:36	3281:36	13	src_bit
LEAF_NODE	3281:36	3281:36	14	src_bit
LEAF_NODE	3281:44	3281:44	13	-
FIELD	3281:46	3281:46	13	bps
LEAF_NODE	3281:46	3281:46	14	bps
LEAF_NODE	3281:49	3281:49	13	)
LEAF_NODE	3281:50	3281:50	10	;
SELECTION	3282:6	3283:8	9	
KEYWORD	3282:6	3282:6	10	if
LEAF_NODE	3282:6	3282:6	11	if
LEAF_NODE	3282:9	3282:9	10	(
CONDITION	3282:10	3282:10	10	little_endian
EXPR	3282:10	3282:10	11	little_endian
FIELD	3282:10	3282:10	12	little_endian
LEAF_NODE	3282:10	3282:10	13	little_endian
LEAF_NODE	3282:23	3282:23	10	)
STATEMENTS	3283:8	3283:8	10	
EXPR_STATEMENT	3283:8	3283:38	11	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ] ;
EXPR	3283:8	3283:8	12	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
ASSIGN	3283:8	3283:16	13	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
LVAL	3283:8	3283:8	14	buff1
FIELD	3283:8	3283:8	15	buff1
LEAF_NODE	3283:8	3283:8	16	buff1
ASSIGN_OP	3283:14	3283:14	14	=
LEAF_NODE	3283:14	3283:14	15	=
RVAL	3283:16	3283:16	14	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR	3283:16	3283:32	15	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR_ELEM	3283:16	3283:28	16	( src [ 0 ] << 8 )
LEAF_NODE	3283:16	3283:16	17	(
FIELD	3283:17	3283:22	17	src [ 0 ]
LEAF_NODE	3283:17	3283:17	18	src
LEAF_NODE	3283:20	3283:20	18	[
EXPR	3283:21	3283:21	18	0
FIELD	3283:21	3283:21	19	0
LEAF_NODE	3283:21	3283:21	20	0
LEAF_NODE	3283:22	3283:22	18	]
LEAF_NODE	3283:24	3283:24	17	<<
FIELD	3283:27	3283:27	17	8
LEAF_NODE	3283:27	3283:27	18	8
LEAF_NODE	3283:28	3283:28	17	)
LEAF_NODE	3283:30	3283:30	16	|
BIT_OR_ELEM	3283:32	3283:32	16	src [ 1 ]
FIELD	3283:32	3283:37	17	src [ 1 ]
LEAF_NODE	3283:32	3283:32	18	src
LEAF_NODE	3283:35	3283:35	18	[
EXPR	3283:36	3283:36	18	1
FIELD	3283:36	3283:36	19	1
LEAF_NODE	3283:36	3283:36	20	1
LEAF_NODE	3283:37	3283:37	18	]
LEAF_NODE	3283:38	3283:38	12	;
SELECTION	3284:6	3285:8	9	
KEYWORD	3284:6	3284:6	10	else
LEAF_NODE	3284:6	3284:6	11	else
STATEMENTS	3285:8	3285:8	10	
EXPR_STATEMENT	3285:8	3285:38	11	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	3285:8	3285:8	12	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	3285:8	3285:16	13	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	3285:8	3285:8	14	buff1
FIELD	3285:8	3285:8	15	buff1
LEAF_NODE	3285:8	3285:8	16	buff1
ASSIGN_OP	3285:14	3285:14	14	=
LEAF_NODE	3285:14	3285:14	15	=
RVAL	3285:16	3285:16	14	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3285:16	3285:32	15	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3285:16	3285:28	16	( src [ 1 ] << 8 )
LEAF_NODE	3285:16	3285:16	17	(
FIELD	3285:17	3285:22	17	src [ 1 ]
LEAF_NODE	3285:17	3285:17	18	src
LEAF_NODE	3285:20	3285:20	18	[
EXPR	3285:21	3285:21	18	1
FIELD	3285:21	3285:21	19	1
LEAF_NODE	3285:21	3285:21	20	1
LEAF_NODE	3285:22	3285:22	18	]
LEAF_NODE	3285:24	3285:24	17	<<
FIELD	3285:27	3285:27	17	8
LEAF_NODE	3285:27	3285:27	18	8
LEAF_NODE	3285:28	3285:28	17	)
LEAF_NODE	3285:30	3285:30	16	|
BIT_OR_ELEM	3285:32	3285:32	16	src [ 0 ]
FIELD	3285:32	3285:37	17	src [ 0 ]
LEAF_NODE	3285:32	3285:32	18	src
LEAF_NODE	3285:35	3285:35	18	[
EXPR	3285:36	3285:36	18	0
FIELD	3285:36	3285:36	19	0
LEAF_NODE	3285:36	3285:36	20	0
LEAF_NODE	3285:37	3285:37	18	]
LEAF_NODE	3285:38	3285:38	12	;
SELECTION	3287:6	3288:8	9	
KEYWORD	3287:6	3287:6	10	if
LEAF_NODE	3287:6	3287:6	11	if
LEAF_NODE	3287:9	3287:9	10	(
CONDITION	3287:10	3287:10	10	( col == start ) && ( sindex == sample )
EXPR	3287:10	3287:10	11	( col == start ) && ( sindex == sample )
AND	3287:10	3287:28	12	( col == start ) && ( sindex == sample )
EXPR	3287:10	3287:23	13	( col == start )
LEAF_NODE	3287:10	3287:10	14	(
FIELD	3287:11	3287:11	14	col
LEAF_NODE	3287:11	3287:11	15	col
EQ_OPERATOR	3287:15	3287:15	14	==
LEAF_NODE	3287:15	3287:15	15	==
FIELD	3287:18	3287:18	14	start
LEAF_NODE	3287:18	3287:18	15	start
LEAF_NODE	3287:23	3287:23	14	)
LEAF_NODE	3287:25	3287:25	13	&&
EXPR	3287:28	3287:45	13	( sindex == sample )
LEAF_NODE	3287:28	3287:28	14	(
FIELD	3287:29	3287:29	14	sindex
LEAF_NODE	3287:29	3287:29	15	sindex
EQ_OPERATOR	3287:36	3287:36	14	==
LEAF_NODE	3287:36	3287:36	15	==
FIELD	3287:39	3287:39	14	sample
LEAF_NODE	3287:39	3287:39	15	sample
LEAF_NODE	3287:45	3287:45	14	)
LEAF_NODE	3287:46	3287:46	10	)
STATEMENTS	3288:8	3288:8	10	
EXPR_STATEMENT	3288:8	3288:51	11	buff2 = buff1 & ( ( uint16 ) - 1 ) << ( 8 - shift ) ;
EXPR	3288:8	3288:8	12	buff2 = buff1 & ( ( uint16 ) - 1 ) << ( 8 - shift )
ASSIGN	3288:8	3288:16	13	buff2 = buff1 & ( ( uint16 ) - 1 ) << ( 8 - shift )
LVAL	3288:8	3288:8	14	buff2
FIELD	3288:8	3288:8	15	buff2
LEAF_NODE	3288:8	3288:8	16	buff2
ASSIGN_OP	3288:14	3288:14	14	=
LEAF_NODE	3288:14	3288:14	15	=
RVAL	3288:16	3288:50	14	buff1 & ( ( uint16 ) - 1 ) << ( 8 - shift )
FIELD	3288:16	3288:16	15	buff1
LEAF_NODE	3288:16	3288:16	16	buff1
LEAF_NODE	3288:22	3288:22	15	&
LEAF_NODE	3288:24	3288:24	15	(
LEAF_NODE	3288:25	3288:25	15	(
TYPE_NAME	3288:26	3288:26	15	uint16
LEAF_NODE	3288:26	3288:26	16	uint16
LEAF_NODE	3288:32	3288:32	15	)
UNARY_EXPR	3288:33	3288:34	15	- 1
UNARY_OPERATOR	3288:33	3288:33	16	-
LEAF_NODE	3288:33	3288:33	17	-
FIELD	3288:34	3288:34	16	1
LEAF_NODE	3288:34	3288:34	17	1
LEAF_NODE	3288:35	3288:35	15	)
LEAF_NODE	3288:37	3288:37	15	<<
LEAF_NODE	3288:40	3288:40	15	(
FIELD	3288:41	3288:41	15	8
LEAF_NODE	3288:41	3288:41	16	8
LEAF_NODE	3288:43	3288:43	15	-
FIELD	3288:45	3288:45	15	shift
LEAF_NODE	3288:45	3288:45	16	shift
LEAF_NODE	3288:50	3288:50	15	)
LEAF_NODE	3288:51	3288:51	12	;
LEAF_NODE	3290:6	3290:6	9	buff1
LEAF_NODE	3290:12	3290:12	9	=
LEAF_NODE	3290:14	3290:14	9	(
LEAF_NODE	3290:15	3290:15	9	buff1
LEAF_NODE	3290:21	3290:21	9	&
LEAF_NODE	3290:23	3290:23	9	matchbits
LEAF_NODE	3290:32	3290:32	9	)
LEAF_NODE	3290:34	3290:34	9	<<
LEAF_NODE	3290:37	3290:37	9	(
LEAF_NODE	3290:38	3290:38	9	src_bit
LEAF_NODE	3290:45	3290:45	9	)
LEAF_NODE	3290:46	3290:46	9	;
SELECTION	3292:6	3293:8	9	
KEYWORD	3292:6	3292:6	10	if
LEAF_NODE	3292:6	3292:6	11	if
LEAF_NODE	3292:9	3292:9	10	(
CONDITION	3292:10	3292:10	10	ready_bits < 8
EXPR	3292:10	3292:23	11	ready_bits < 8
FIELD	3292:10	3292:10	12	ready_bits
LEAF_NODE	3292:10	3292:10	13	ready_bits
REL_OPERATOR	3292:21	3292:21	12	<
LEAF_NODE	3292:21	3292:21	13	<
FIELD	3292:23	3292:23	12	8
LEAF_NODE	3292:23	3292:23	13	8
LEAF_NODE	3292:24	3292:24	10	)
STATEMENTS	3293:8	3293:8	10	
EXPR_STATEMENT	3293:8	3293:45	11	buff2 = buff2 | ( buff1 >> ready_bits ) ;
EXPR	3293:8	3293:8	12	buff2 = buff2 | ( buff1 >> ready_bits )
ASSIGN	3293:8	3293:16	13	buff2 = buff2 | ( buff1 >> ready_bits )
LVAL	3293:8	3293:8	14	buff2
FIELD	3293:8	3293:8	15	buff2
LEAF_NODE	3293:8	3293:8	16	buff2
ASSIGN_OP	3293:14	3293:14	14	=
LEAF_NODE	3293:14	3293:14	15	=
RVAL	3293:16	3293:16	14	buff2 | ( buff1 >> ready_bits )
BIT_OR	3293:16	3293:24	15	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3293:16	3293:16	16	buff2
FIELD	3293:16	3293:16	17	buff2
LEAF_NODE	3293:16	3293:16	18	buff2
LEAF_NODE	3293:22	3293:22	16	|
BIT_OR_ELEM	3293:24	3293:44	16	( buff1 >> ready_bits )
LEAF_NODE	3293:24	3293:24	17	(
FIELD	3293:25	3293:25	17	buff1
LEAF_NODE	3293:25	3293:25	18	buff1
LEAF_NODE	3293:31	3293:31	17	>>
FIELD	3293:34	3293:34	17	ready_bits
LEAF_NODE	3293:34	3293:34	18	ready_bits
LEAF_NODE	3293:44	3293:44	17	)
LEAF_NODE	3293:45	3293:45	12	;
SELECTION	3294:6	3295:8	9	
KEYWORD	3294:6	3294:6	10	else
LEAF_NODE	3294:6	3294:6	11	else
STATEMENTS	3295:8	3301:8	10	
LEAF_NODE	3295:8	3295:8	11	{
STATEMENTS	3296:8	3300:8	11	
EXPR_STATEMENT	3296:8	3296:31	12	bytebuff = ( buff2 >> 8 ) ;
EXPR	3296:8	3296:8	13	bytebuff = ( buff2 >> 8 )
ASSIGN	3296:8	3296:19	14	bytebuff = ( buff2 >> 8 )
LVAL	3296:8	3296:8	15	bytebuff
FIELD	3296:8	3296:8	16	bytebuff
LEAF_NODE	3296:8	3296:8	17	bytebuff
ASSIGN_OP	3296:17	3296:17	15	=
LEAF_NODE	3296:17	3296:17	16	=
RVAL	3296:19	3296:30	15	( buff2 >> 8 )
LEAF_NODE	3296:19	3296:19	16	(
FIELD	3296:20	3296:20	16	buff2
LEAF_NODE	3296:20	3296:20	17	buff2
LEAF_NODE	3296:26	3296:26	16	>>
FIELD	3296:29	3296:29	16	8
LEAF_NODE	3296:29	3296:29	17	8
LEAF_NODE	3296:30	3296:30	16	)
LEAF_NODE	3296:31	3296:31	13	;
EXPR_STATEMENT	3297:8	3297:25	12	* dst ++ = bytebuff ;
EXPR	3297:8	3297:8	13	* dst ++ = bytebuff
ASSIGN	3297:8	3297:17	14	* dst ++ = bytebuff
LVAL	3297:8	3297:8	15	* dst ++
UNARY_EXPR	3297:8	3297:9	16	* dst ++
UNARY_OPERATOR	3297:8	3297:8	17	*
LEAF_NODE	3297:8	3297:8	18	*
FIELD	3297:9	3297:12	17	dst ++
LEAF_NODE	3297:9	3297:9	18	dst
LEAF_NODE	3297:12	3297:12	18	++
ASSIGN_OP	3297:15	3297:15	15	=
LEAF_NODE	3297:15	3297:15	16	=
RVAL	3297:17	3297:17	15	bytebuff
FIELD	3297:17	3297:17	16	bytebuff
LEAF_NODE	3297:17	3297:17	17	bytebuff
LEAF_NODE	3297:25	3297:25	13	;
EXPR_STATEMENT	3298:8	3298:23	12	ready_bits -= 8 ;
EXPR	3298:8	3298:8	13	ready_bits -= 8
ASSIGN	3298:8	3298:22	14	ready_bits -= 8
LVAL	3298:8	3298:8	15	ready_bits
FIELD	3298:8	3298:8	16	ready_bits
LEAF_NODE	3298:8	3298:8	17	ready_bits
ASSIGN_OP	3298:19	3298:19	15	-=
LEAF_NODE	3298:19	3298:19	16	-=
RVAL	3298:22	3298:22	15	8
FIELD	3298:22	3298:22	16	8
LEAF_NODE	3298:22	3298:22	17	8
LEAF_NODE	3298:23	3298:23	13	;
EXPR_STATEMENT	3300:8	3300:54	12	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) ) ;
EXPR	3300:8	3300:8	13	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
ASSIGN	3300:8	3300:16	14	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LVAL	3300:8	3300:8	15	buff2
FIELD	3300:8	3300:8	16	buff2
LEAF_NODE	3300:8	3300:8	17	buff2
ASSIGN_OP	3300:14	3300:14	15	=
LEAF_NODE	3300:14	3300:14	16	=
RVAL	3300:16	3300:53	15	( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	3300:16	3300:16	16	(
BIT_OR	3300:17	3300:32	16	( buff2 << 8 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	3300:17	3300:28	17	( buff2 << 8 )
LEAF_NODE	3300:17	3300:17	18	(
FIELD	3300:18	3300:18	18	buff2
LEAF_NODE	3300:18	3300:18	19	buff2
LEAF_NODE	3300:24	3300:24	18	<<
FIELD	3300:27	3300:27	18	8
LEAF_NODE	3300:27	3300:27	19	8
LEAF_NODE	3300:28	3300:28	18	)
LEAF_NODE	3300:30	3300:30	17	|
BIT_OR_ELEM	3300:32	3300:52	17	( buff1 >> ready_bits )
LEAF_NODE	3300:32	3300:32	18	(
FIELD	3300:33	3300:33	18	buff1
LEAF_NODE	3300:33	3300:33	19	buff1
LEAF_NODE	3300:39	3300:39	18	>>
FIELD	3300:42	3300:42	18	ready_bits
LEAF_NODE	3300:42	3300:42	19	ready_bits
LEAF_NODE	3300:52	3300:52	18	)
LEAF_NODE	3300:53	3300:53	16	)
LEAF_NODE	3300:54	3300:54	13	;
LEAF_NODE	3301:8	3301:8	11	}
EXPR_STATEMENT	3303:6	3303:23	9	ready_bits += bps ;
EXPR	3303:6	3303:6	10	ready_bits += bps
ASSIGN	3303:6	3303:20	11	ready_bits += bps
LVAL	3303:6	3303:6	12	ready_bits
FIELD	3303:6	3303:6	13	ready_bits
LEAF_NODE	3303:6	3303:6	14	ready_bits
ASSIGN_OP	3303:17	3303:17	12	+=
LEAF_NODE	3303:17	3303:17	13	+=
RVAL	3303:20	3303:20	12	bps
FIELD	3303:20	3303:20	13	bps
LEAF_NODE	3303:20	3303:20	14	bps
LEAF_NODE	3303:23	3303:23	10	;
LEAF_NODE	3304:6	3304:6	8	}
LEAF_NODE	3305:4	3305:4	5	}
ITERATION	3308:2	3309:4	3	
KEYWORD	3308:2	3308:2	4	while
LEAF_NODE	3308:2	3308:2	5	while
LEAF_NODE	3308:8	3308:8	4	(
CONDITION	3308:9	3308:9	4	ready_bits > 0
EXPR	3308:9	3308:22	5	ready_bits > 0
FIELD	3308:9	3308:9	6	ready_bits
LEAF_NODE	3308:9	3308:9	7	ready_bits
REL_OPERATOR	3308:20	3308:20	6	>
LEAF_NODE	3308:20	3308:20	7	>
FIELD	3308:22	3308:22	6	0
LEAF_NODE	3308:22	3308:22	7	0
LEAF_NODE	3308:23	3308:23	4	)
STATEMENTS	3309:4	3313:4	4	
LEAF_NODE	3309:4	3309:4	5	{
STATEMENTS	3310:4	3312:4	5	
EXPR_STATEMENT	3310:4	3310:27	6	bytebuff = ( buff2 >> 8 ) ;
EXPR	3310:4	3310:4	7	bytebuff = ( buff2 >> 8 )
ASSIGN	3310:4	3310:15	8	bytebuff = ( buff2 >> 8 )
LVAL	3310:4	3310:4	9	bytebuff
FIELD	3310:4	3310:4	10	bytebuff
LEAF_NODE	3310:4	3310:4	11	bytebuff
ASSIGN_OP	3310:13	3310:13	9	=
LEAF_NODE	3310:13	3310:13	10	=
RVAL	3310:15	3310:26	9	( buff2 >> 8 )
LEAF_NODE	3310:15	3310:15	10	(
FIELD	3310:16	3310:16	10	buff2
LEAF_NODE	3310:16	3310:16	11	buff2
LEAF_NODE	3310:22	3310:22	10	>>
FIELD	3310:25	3310:25	10	8
LEAF_NODE	3310:25	3310:25	11	8
LEAF_NODE	3310:26	3310:26	10	)
LEAF_NODE	3310:27	3310:27	7	;
EXPR_STATEMENT	3311:4	3311:21	6	* dst ++ = bytebuff ;
EXPR	3311:4	3311:4	7	* dst ++ = bytebuff
ASSIGN	3311:4	3311:13	8	* dst ++ = bytebuff
LVAL	3311:4	3311:4	9	* dst ++
UNARY_EXPR	3311:4	3311:5	10	* dst ++
UNARY_OPERATOR	3311:4	3311:4	11	*
LEAF_NODE	3311:4	3311:4	12	*
FIELD	3311:5	3311:8	11	dst ++
LEAF_NODE	3311:5	3311:5	12	dst
LEAF_NODE	3311:8	3311:8	12	++
ASSIGN_OP	3311:11	3311:11	9	=
LEAF_NODE	3311:11	3311:11	10	=
RVAL	3311:13	3311:13	9	bytebuff
FIELD	3311:13	3311:13	10	bytebuff
LEAF_NODE	3311:13	3311:13	11	bytebuff
LEAF_NODE	3311:21	3311:21	7	;
EXPR_STATEMENT	3312:4	3312:19	6	ready_bits -= 8 ;
EXPR	3312:4	3312:4	7	ready_bits -= 8
ASSIGN	3312:4	3312:18	8	ready_bits -= 8
LVAL	3312:4	3312:4	9	ready_bits
FIELD	3312:4	3312:4	10	ready_bits
LEAF_NODE	3312:4	3312:4	11	ready_bits
ASSIGN_OP	3312:15	3312:15	9	-=
LEAF_NODE	3312:15	3312:15	10	-=
RVAL	3312:18	3312:18	9	8
FIELD	3312:18	3312:18	10	8
LEAF_NODE	3312:18	3312:18	11	8
LEAF_NODE	3312:19	3312:19	7	;
LEAF_NODE	3313:4	3313:4	5	}
JUMP_STATEMENT	3315:2	3315:12	3	return ( 0 ) ;
KEYWORD	3315:2	3315:2	4	return
LEAF_NODE	3315:2	3315:2	5	return
DESTINATION	3315:9	3315:9	4	( 0 )
EXPR	3315:9	3315:11	5	( 0 )
LEAF_NODE	3315:9	3315:9	6	(
FIELD	3315:10	3315:10	6	0
LEAF_NODE	3315:10	3315:10	7	0
LEAF_NODE	3315:11	3315:11	6	)
LEAF_NODE	3315:12	3315:12	4	;
LEAF_NODE	3316:2	3316:2	2	}
FUNCTION_DEF	3319:0	3415:2	1	
RETURN_TYPE	3319:0	3319:7	2	static int
LEAF_NODE	3319:0	3319:0	3	static
TYPE_NAME	3319:7	3319:7	3	int
LEAF_NODE	3319:7	3319:7	4	int
FUNCTION_NAME	3320:0	3320:0	2	extractContigSamplesShifted24bits
LEAF_NODE	3320:0	3320:0	3	extractContigSamplesShifted24bits
PARAMETER_LIST	3320:34	3323:37	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end , int shift )
LEAF_NODE	3320:34	3320:34	3	(
PARAMETER_DECL	3320:35	3320:42	3	uint8 * in
TYPE	3320:35	3320:41	4	uint8 *
TYPE_NAME	3320:35	3320:35	5	uint8
LEAF_NODE	3320:35	3320:35	6	uint8
POINTER	3320:41	3320:41	5	*
LEAF_NODE	3320:41	3320:41	6	*
NAME	3320:42	3320:42	4	in
LEAF_NODE	3320:42	3320:42	5	in
LEAF_NODE	3320:44	3320:44	3	,
PARAMETER_DECL	3320:46	3320:53	3	uint8 * out
TYPE	3320:46	3320:52	4	uint8 *
TYPE_NAME	3320:46	3320:46	5	uint8
LEAF_NODE	3320:46	3320:46	6	uint8
POINTER	3320:52	3320:52	5	*
LEAF_NODE	3320:52	3320:52	6	*
NAME	3320:53	3320:53	4	out
LEAF_NODE	3320:53	3320:53	5	out
LEAF_NODE	3320:56	3320:56	3	,
PARAMETER_DECL	3320:58	3320:65	3	uint32 cols
TYPE	3320:58	3320:58	4	uint32
TYPE_NAME	3320:58	3320:58	5	uint32
LEAF_NODE	3320:58	3320:58	6	uint32
NAME	3320:65	3320:65	4	cols
LEAF_NODE	3320:65	3320:65	5	cols
LEAF_NODE	3320:69	3320:69	3	,
PARAMETER_DECL	3321:29	3321:39	3	tsample_t sample
TYPE	3321:29	3321:29	4	tsample_t
TYPE_NAME	3321:29	3321:29	5	tsample_t
LEAF_NODE	3321:29	3321:29	6	tsample_t
NAME	3321:39	3321:39	4	sample
LEAF_NODE	3321:39	3321:39	5	sample
LEAF_NODE	3321:45	3321:45	3	,
PARAMETER_DECL	3321:47	3321:54	3	uint16 spp
TYPE	3321:47	3321:47	4	uint16
TYPE_NAME	3321:47	3321:47	5	uint16
LEAF_NODE	3321:47	3321:47	6	uint16
NAME	3321:54	3321:54	4	spp
LEAF_NODE	3321:54	3321:54	5	spp
LEAF_NODE	3321:57	3321:57	3	,
PARAMETER_DECL	3321:59	3321:66	3	uint16 bps
TYPE	3321:59	3321:59	4	uint16
TYPE_NAME	3321:59	3321:59	5	uint16
LEAF_NODE	3321:59	3321:59	6	uint16
NAME	3321:66	3321:66	4	bps
LEAF_NODE	3321:66	3321:66	5	bps
LEAF_NODE	3321:69	3321:69	3	,
PARAMETER_DECL	3322:35	3322:45	3	tsample_t count
TYPE	3322:35	3322:35	4	tsample_t
TYPE_NAME	3322:35	3322:35	5	tsample_t
LEAF_NODE	3322:35	3322:35	6	tsample_t
NAME	3322:45	3322:45	4	count
LEAF_NODE	3322:45	3322:45	5	count
LEAF_NODE	3322:50	3322:50	3	,
PARAMETER_DECL	3322:52	3322:59	3	uint32 start
TYPE	3322:52	3322:52	4	uint32
TYPE_NAME	3322:52	3322:52	5	uint32
LEAF_NODE	3322:52	3322:52	6	uint32
NAME	3322:59	3322:59	4	start
LEAF_NODE	3322:59	3322:59	5	start
LEAF_NODE	3322:64	3322:64	3	,
PARAMETER_DECL	3322:66	3322:73	3	uint32 end
TYPE	3322:66	3322:66	4	uint32
TYPE_NAME	3322:66	3322:66	5	uint32
LEAF_NODE	3322:66	3322:66	6	uint32
NAME	3322:73	3322:73	4	end
LEAF_NODE	3322:73	3322:73	5	end
LEAF_NODE	3322:76	3322:76	3	,
PARAMETER_DECL	3323:28	3323:32	3	int shift
TYPE	3323:28	3323:28	4	int
TYPE_NAME	3323:28	3323:28	5	int
LEAF_NODE	3323:28	3323:28	6	int
NAME	3323:32	3323:32	4	shift
LEAF_NODE	3323:32	3323:32	5	shift
LEAF_NODE	3323:37	3323:37	3	)
LEAF_NODE	3324:2	3324:2	2	{
STATEMENTS	3325:2	3414:2	2	
SIMPLE_DECL	3325:2	3325:35	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	3325:2	3325:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	3325:2	3325:9	5	int ready_bits ; ready_bits = 0
TYPE	3325:2	3325:2	6	int
TYPE_NAME	3325:2	3325:2	7	int
LEAF_NODE	3325:2	3325:2	8	int
NAME	3325:9	3325:9	6	ready_bits
LEAF_NODE	3325:9	3325:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	3325:9	3325:9	6	ready_bits = 0
ASSIGN	3325:9	3325:22	7	ready_bits = 0
LVAL	3325:9	3325:9	8	ready_bits
NAME	3325:9	3325:9	9	ready_bits
LEAF_NODE	3325:9	3325:9	10	ready_bits
ASSIGN_OP	3325:20	3325:20	8	=
LEAF_NODE	3325:20	3325:20	9	=
RVAL	3325:22	3325:22	8	0
FIELD	3325:22	3325:22	9	0
LEAF_NODE	3325:22	3325:22	10	0
LEAF_NODE	3325:23	3325:23	5	,
VAR_DECL	3325:2	3325:25	5	int sindex ; sindex = 0
TYPE	3325:2	3325:2	6	int
TYPE_NAME	3325:2	3325:2	7	int
LEAF_NODE	3325:2	3325:2	8	int
NAME	3325:25	3325:25	6	sindex
LEAF_NODE	3325:25	3325:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	3325:25	3325:25	6	sindex = 0
ASSIGN	3325:25	3325:34	7	sindex = 0
LVAL	3325:25	3325:25	8	sindex
NAME	3325:25	3325:25	9	sindex
LEAF_NODE	3325:25	3325:25	10	sindex
ASSIGN_OP	3325:32	3325:32	8	=
LEAF_NODE	3325:32	3325:32	9	=
RVAL	3325:34	3325:34	8	0
FIELD	3325:34	3325:34	9	0
LEAF_NODE	3325:34	3325:34	10	0
LEAF_NODE	3325:35	3325:35	4	;
SIMPLE_DECL	3326:2	3326:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	3326:2	3326:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3326:2	3326:9	5	uint32 col
TYPE	3326:2	3326:2	6	uint32
TYPE_NAME	3326:2	3326:2	7	uint32
LEAF_NODE	3326:2	3326:2	8	uint32
NAME	3326:9	3326:9	6	col
LEAF_NODE	3326:9	3326:9	7	col
LEAF_NODE	3326:12	3326:12	5	,
INIT_DECL_LIST	3326:2	3326:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3326:2	3326:14	6	uint32 src_byte
TYPE	3326:2	3326:2	7	uint32
TYPE_NAME	3326:2	3326:2	8	uint32
LEAF_NODE	3326:2	3326:2	9	uint32
NAME	3326:14	3326:14	7	src_byte
LEAF_NODE	3326:14	3326:14	8	src_byte
LEAF_NODE	3326:22	3326:22	6	,
INIT_DECL_LIST	3326:2	3326:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	3326:2	3326:24	7	uint32 src_bit
TYPE	3326:2	3326:2	8	uint32
TYPE_NAME	3326:2	3326:2	9	uint32
LEAF_NODE	3326:2	3326:2	10	uint32
NAME	3326:24	3326:24	8	src_bit
LEAF_NODE	3326:24	3326:24	9	src_bit
LEAF_NODE	3326:31	3326:31	7	,
VAR_DECL	3326:2	3326:33	7	uint32 bit_offset
TYPE	3326:2	3326:2	8	uint32
TYPE_NAME	3326:2	3326:2	9	uint32
LEAF_NODE	3326:2	3326:2	10	uint32
NAME	3326:33	3326:33	8	bit_offset
LEAF_NODE	3326:33	3326:33	9	bit_offset
LEAF_NODE	3326:43	3326:43	4	;
SIMPLE_DECL	3327:2	3327:36	3	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3327:2	3327:2	4	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0
VAR_DECL	3327:2	3327:9	5	uint32 maskbits ; maskbits = 0
TYPE	3327:2	3327:2	6	uint32
TYPE_NAME	3327:2	3327:2	7	uint32
LEAF_NODE	3327:2	3327:2	8	uint32
NAME	3327:9	3327:9	6	maskbits
LEAF_NODE	3327:9	3327:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3327:9	3327:9	6	maskbits = 0
ASSIGN	3327:9	3327:20	7	maskbits = 0
LVAL	3327:9	3327:9	8	maskbits
NAME	3327:9	3327:9	9	maskbits
LEAF_NODE	3327:9	3327:9	10	maskbits
ASSIGN_OP	3327:18	3327:18	8	=
LEAF_NODE	3327:18	3327:18	9	=
RVAL	3327:20	3327:20	8	0
FIELD	3327:20	3327:20	9	0
LEAF_NODE	3327:20	3327:20	10	0
LEAF_NODE	3327:21	3327:21	5	,
VAR_DECL	3327:2	3327:23	5	uint32 matchbits ; matchbits = 0
TYPE	3327:2	3327:2	6	uint32
TYPE_NAME	3327:2	3327:2	7	uint32
LEAF_NODE	3327:2	3327:2	8	uint32
NAME	3327:23	3327:23	6	matchbits
LEAF_NODE	3327:23	3327:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3327:23	3327:23	6	matchbits = 0
ASSIGN	3327:23	3327:35	7	matchbits = 0
LVAL	3327:23	3327:23	8	matchbits
NAME	3327:23	3327:23	9	matchbits
LEAF_NODE	3327:23	3327:23	10	matchbits
ASSIGN_OP	3327:33	3327:33	8	=
LEAF_NODE	3327:33	3327:33	9	=
RVAL	3327:35	3327:35	8	0
FIELD	3327:35	3327:35	9	0
LEAF_NODE	3327:35	3327:35	10	0
LEAF_NODE	3327:36	3327:36	4	;
SIMPLE_DECL	3328:2	3328:29	3	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	3328:2	3328:2	4	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0
VAR_DECL	3328:2	3328:9	5	uint32 buff1 ; buff1 = 0
TYPE	3328:2	3328:2	6	uint32
TYPE_NAME	3328:2	3328:2	7	uint32
LEAF_NODE	3328:2	3328:2	8	uint32
NAME	3328:9	3328:9	6	buff1
LEAF_NODE	3328:9	3328:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3328:9	3328:9	6	buff1 = 0
ASSIGN	3328:9	3328:17	7	buff1 = 0
LVAL	3328:9	3328:9	8	buff1
NAME	3328:9	3328:9	9	buff1
LEAF_NODE	3328:9	3328:9	10	buff1
ASSIGN_OP	3328:15	3328:15	8	=
LEAF_NODE	3328:15	3328:15	9	=
RVAL	3328:17	3328:17	8	0
FIELD	3328:17	3328:17	9	0
LEAF_NODE	3328:17	3328:17	10	0
LEAF_NODE	3328:18	3328:18	5	,
VAR_DECL	3328:2	3328:20	5	uint32 buff2 ; buff2 = 0
TYPE	3328:2	3328:2	6	uint32
TYPE_NAME	3328:2	3328:2	7	uint32
LEAF_NODE	3328:2	3328:2	8	uint32
NAME	3328:20	3328:20	6	buff2
LEAF_NODE	3328:20	3328:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	3328:20	3328:20	6	buff2 = 0
ASSIGN	3328:20	3328:28	7	buff2 = 0
LVAL	3328:20	3328:20	8	buff2
NAME	3328:20	3328:20	9	buff2
LEAF_NODE	3328:20	3328:20	10	buff2
ASSIGN_OP	3328:26	3328:26	8	=
LEAF_NODE	3328:26	3328:26	9	=
RVAL	3328:28	3328:28	8	0
FIELD	3328:28	3328:28	9	0
LEAF_NODE	3328:28	3328:28	10	0
LEAF_NODE	3328:29	3328:29	4	;
SIMPLE_DECL	3329:2	3329:37	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 ;
INIT_DECL_LIST	3329:2	3329:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0
VAR_DECL	3329:2	3329:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	3329:2	3329:2	6	uint8
TYPE_NAME	3329:2	3329:2	7	uint8
LEAF_NODE	3329:2	3329:2	8	uint8
NAME	3329:9	3329:9	6	bytebuff1
LEAF_NODE	3329:9	3329:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	3329:9	3329:9	6	bytebuff1 = 0
ASSIGN	3329:9	3329:21	7	bytebuff1 = 0
LVAL	3329:9	3329:9	8	bytebuff1
NAME	3329:9	3329:9	9	bytebuff1
LEAF_NODE	3329:9	3329:9	10	bytebuff1
ASSIGN_OP	3329:19	3329:19	8	=
LEAF_NODE	3329:19	3329:19	9	=
RVAL	3329:21	3329:21	8	0
FIELD	3329:21	3329:21	9	0
LEAF_NODE	3329:21	3329:21	10	0
LEAF_NODE	3329:22	3329:22	5	,
VAR_DECL	3329:2	3329:24	5	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	3329:2	3329:2	6	uint8
TYPE_NAME	3329:2	3329:2	7	uint8
LEAF_NODE	3329:2	3329:2	8	uint8
NAME	3329:24	3329:24	6	bytebuff2
LEAF_NODE	3329:24	3329:24	7	bytebuff2
LEAF_NODE	0:0	0:0	6	;
INIT	3329:24	3329:24	6	bytebuff2 = 0
ASSIGN	3329:24	3329:36	7	bytebuff2 = 0
LVAL	3329:24	3329:24	8	bytebuff2
NAME	3329:24	3329:24	9	bytebuff2
LEAF_NODE	3329:24	3329:24	10	bytebuff2
ASSIGN_OP	3329:34	3329:34	8	=
LEAF_NODE	3329:34	3329:34	9	=
RVAL	3329:36	3329:36	8	0
FIELD	3329:36	3329:36	9	0
LEAF_NODE	3329:36	3329:36	10	0
LEAF_NODE	3329:37	3329:37	4	;
SIMPLE_DECL	3330:2	3330:17	3	uint8 * src ; src = in ;
VAR_DECL	3330:2	3330:9	4	uint8 * src ; src = in
TYPE	3330:2	3330:8	5	uint8 *
TYPE_NAME	3330:2	3330:2	6	uint8
LEAF_NODE	3330:2	3330:2	7	uint8
POINTER	3330:8	3330:8	6	*
LEAF_NODE	3330:8	3330:8	7	*
NAME	3330:9	3330:9	5	src
LEAF_NODE	3330:9	3330:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3330:9	3330:9	5	src = in
ASSIGN	3330:9	3330:15	6	src = in
LVAL	3330:9	3330:9	7	src
NAME	3330:9	3330:9	8	src
LEAF_NODE	3330:9	3330:9	9	src
ASSIGN_OP	3330:13	3330:13	7	=
LEAF_NODE	3330:13	3330:13	8	=
RVAL	3330:15	3330:15	7	in
FIELD	3330:15	3330:15	8	in
LEAF_NODE	3330:15	3330:15	9	in
LEAF_NODE	3330:17	3330:17	4	;
SIMPLE_DECL	3331:2	3331:18	3	uint8 * dst ; dst = out ;
VAR_DECL	3331:2	3331:9	4	uint8 * dst ; dst = out
TYPE	3331:2	3331:8	5	uint8 *
TYPE_NAME	3331:2	3331:2	6	uint8
LEAF_NODE	3331:2	3331:2	7	uint8
POINTER	3331:8	3331:8	6	*
LEAF_NODE	3331:8	3331:8	7	*
NAME	3331:9	3331:9	5	dst
LEAF_NODE	3331:9	3331:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3331:9	3331:9	5	dst = out
ASSIGN	3331:9	3331:15	6	dst = out
LVAL	3331:9	3331:9	7	dst
NAME	3331:9	3331:9	8	dst
LEAF_NODE	3331:9	3331:9	9	dst
ASSIGN_OP	3331:13	3331:13	7	=
LEAF_NODE	3331:13	3331:13	8	=
RVAL	3331:15	3331:15	7	out
FIELD	3331:15	3331:15	8	out
LEAF_NODE	3331:15	3331:15	9	out
LEAF_NODE	3331:18	3331:18	4	;
SELECTION	3333:2	3334:4	3	
KEYWORD	3333:2	3333:2	4	if
LEAF_NODE	3333:2	3333:2	5	if
LEAF_NODE	3333:5	3333:5	4	(
CONDITION	3333:6	3333:6	4	( in == NULL ) || ( out == NULL )
EXPR	3333:6	3333:6	5	( in == NULL ) || ( out == NULL )
OR	3333:6	3333:22	6	( in == NULL ) || ( out == NULL )
EXPR	3333:6	3333:17	7	( in == NULL )
LEAF_NODE	3333:6	3333:6	8	(
FIELD	3333:7	3333:7	8	in
LEAF_NODE	3333:7	3333:7	9	in
EQ_OPERATOR	3333:10	3333:10	8	==
LEAF_NODE	3333:10	3333:10	9	==
FIELD	3333:13	3333:13	8	NULL
LEAF_NODE	3333:13	3333:13	9	NULL
LEAF_NODE	3333:17	3333:17	8	)
LEAF_NODE	3333:19	3333:19	7	||
EXPR	3333:22	3333:34	7	( out == NULL )
LEAF_NODE	3333:22	3333:22	8	(
FIELD	3333:23	3333:23	8	out
LEAF_NODE	3333:23	3333:23	9	out
EQ_OPERATOR	3333:27	3333:27	8	==
LEAF_NODE	3333:27	3333:27	9	==
FIELD	3333:30	3333:30	8	NULL
LEAF_NODE	3333:30	3333:30	9	NULL
LEAF_NODE	3333:34	3333:34	8	)
LEAF_NODE	3333:35	3333:35	4	)
STATEMENTS	3334:4	3337:4	4	
LEAF_NODE	3334:4	3334:4	5	{
STATEMENTS	3335:4	3336:4	5	
EXPR_STATEMENT	3335:4	3335:83	6	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid input or output buffer" ) ;
EXPR	3335:4	3335:4	7	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3335:4	3335:82	8	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid input or output buffer" )
CALLEE	3335:4	3335:4	9	TIFFError
LEAF_NODE	3335:4	3335:4	10	TIFFError
LEAF_NODE	3335:13	3335:13	9	(
ARGUMENT	3335:14	3335:14	9	"extractContigSamplesShifted24bits"
FIELD	3335:14	3335:14	10	"extractContigSamplesShifted24bits"
LEAF_NODE	3335:14	3335:14	11	"extractContigSamplesShifted24bits"
LEAF_NODE	3335:49	3335:49	9	,
ARGUMENT	3335:50	3335:50	9	"Invalid input or output buffer"
FIELD	3335:50	3335:50	10	"Invalid input or output buffer"
LEAF_NODE	3335:50	3335:50	11	"Invalid input or output buffer"
LEAF_NODE	3335:82	3335:82	9	)
LEAF_NODE	3335:83	3335:83	7	;
JUMP_STATEMENT	3336:4	3336:14	6	return ( 1 ) ;
KEYWORD	3336:4	3336:4	7	return
LEAF_NODE	3336:4	3336:4	8	return
DESTINATION	3336:11	3336:11	7	( 1 )
EXPR	3336:11	3336:13	8	( 1 )
LEAF_NODE	3336:11	3336:11	9	(
FIELD	3336:12	3336:12	9	1
LEAF_NODE	3336:12	3336:12	10	1
LEAF_NODE	3336:13	3336:13	9	)
LEAF_NODE	3336:14	3336:14	7	;
LEAF_NODE	3337:4	3337:4	5	}
SELECTION	3339:2	3340:4	3	
KEYWORD	3339:2	3339:2	4	if
LEAF_NODE	3339:2	3339:2	5	if
LEAF_NODE	3339:5	3339:5	4	(
CONDITION	3339:6	3339:6	4	( start > end ) || ( start > cols )
EXPR	3339:6	3339:6	5	( start > end ) || ( start > cols )
OR	3339:6	3339:23	6	( start > end ) || ( start > cols )
EXPR	3339:6	3339:18	7	( start > end )
LEAF_NODE	3339:6	3339:6	8	(
FIELD	3339:7	3339:7	8	start
LEAF_NODE	3339:7	3339:7	9	start
REL_OPERATOR	3339:13	3339:13	8	>
LEAF_NODE	3339:13	3339:13	9	>
FIELD	3339:15	3339:15	8	end
LEAF_NODE	3339:15	3339:15	9	end
LEAF_NODE	3339:18	3339:18	8	)
LEAF_NODE	3339:20	3339:20	7	||
EXPR	3339:23	3339:36	7	( start > cols )
LEAF_NODE	3339:23	3339:23	8	(
FIELD	3339:24	3339:24	8	start
LEAF_NODE	3339:24	3339:24	9	start
REL_OPERATOR	3339:30	3339:30	8	>
LEAF_NODE	3339:30	3339:30	9	>
FIELD	3339:32	3339:32	8	cols
LEAF_NODE	3339:32	3339:32	9	cols
LEAF_NODE	3339:36	3339:36	8	)
LEAF_NODE	3339:37	3339:37	4	)
STATEMENTS	3340:4	3344:4	4	
LEAF_NODE	3340:4	3340:4	5	{
STATEMENTS	3341:4	3343:4	5	
EXPR_STATEMENT	3341:4	3342:62	6	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	3341:4	3341:4	7	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	3341:4	3342:61	8	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid start column value %d ignored" , start )
CALLEE	3341:4	3341:4	9	TIFFError
LEAF_NODE	3341:4	3341:4	10	TIFFError
LEAF_NODE	3341:14	3341:14	9	(
ARGUMENT	3341:15	3341:15	9	"extractContigSamplesShifted24bits"
FIELD	3341:15	3341:15	10	"extractContigSamplesShifted24bits"
LEAF_NODE	3341:15	3341:15	11	"extractContigSamplesShifted24bits"
LEAF_NODE	3341:50	3341:50	9	,
ARGUMENT	3342:15	3342:15	9	"Invalid start column value %d ignored"
FIELD	3342:15	3342:15	10	"Invalid start column value %d ignored"
LEAF_NODE	3342:15	3342:15	11	"Invalid start column value %d ignored"
LEAF_NODE	3342:54	3342:54	9	,
ARGUMENT	3342:56	3342:56	9	start
FIELD	3342:56	3342:56	10	start
LEAF_NODE	3342:56	3342:56	11	start
LEAF_NODE	3342:61	3342:61	9	)
LEAF_NODE	3342:62	3342:62	7	;
EXPR_STATEMENT	3343:4	3343:13	6	start = 0 ;
EXPR	3343:4	3343:4	7	start = 0
ASSIGN	3343:4	3343:12	8	start = 0
LVAL	3343:4	3343:4	9	start
FIELD	3343:4	3343:4	10	start
LEAF_NODE	3343:4	3343:4	11	start
ASSIGN_OP	3343:10	3343:10	9	=
LEAF_NODE	3343:10	3343:10	10	=
RVAL	3343:12	3343:12	9	0
FIELD	3343:12	3343:12	10	0
LEAF_NODE	3343:12	3343:12	11	0
LEAF_NODE	3343:13	3343:13	7	;
LEAF_NODE	3344:4	3344:4	5	}
SELECTION	3345:2	3346:4	3	
KEYWORD	3345:2	3345:2	4	if
LEAF_NODE	3345:2	3345:2	5	if
LEAF_NODE	3345:5	3345:5	4	(
CONDITION	3345:6	3345:6	4	( end == 0 ) || ( end > cols )
EXPR	3345:6	3345:6	5	( end == 0 ) || ( end > cols )
OR	3345:6	3345:20	6	( end == 0 ) || ( end > cols )
EXPR	3345:6	3345:15	7	( end == 0 )
LEAF_NODE	3345:6	3345:6	8	(
FIELD	3345:7	3345:7	8	end
LEAF_NODE	3345:7	3345:7	9	end
EQ_OPERATOR	3345:11	3345:11	8	==
LEAF_NODE	3345:11	3345:11	9	==
FIELD	3345:14	3345:14	8	0
LEAF_NODE	3345:14	3345:14	9	0
LEAF_NODE	3345:15	3345:15	8	)
LEAF_NODE	3345:17	3345:17	7	||
EXPR	3345:20	3345:31	7	( end > cols )
LEAF_NODE	3345:20	3345:20	8	(
FIELD	3345:21	3345:21	8	end
LEAF_NODE	3345:21	3345:21	9	end
REL_OPERATOR	3345:25	3345:25	8	>
LEAF_NODE	3345:25	3345:25	9	>
FIELD	3345:27	3345:27	8	cols
LEAF_NODE	3345:27	3345:27	9	cols
LEAF_NODE	3345:31	3345:31	8	)
LEAF_NODE	3345:32	3345:32	4	)
STATEMENTS	3346:4	3350:4	4	
LEAF_NODE	3346:4	3346:4	5	{
STATEMENTS	3347:4	3349:4	5	
EXPR_STATEMENT	3347:4	3348:58	6	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	3347:4	3347:4	7	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	3347:4	3348:57	8	TIFFError ( "extractContigSamplesShifted24bits" , "Invalid end column value %d ignored" , end )
CALLEE	3347:4	3347:4	9	TIFFError
LEAF_NODE	3347:4	3347:4	10	TIFFError
LEAF_NODE	3347:14	3347:14	9	(
ARGUMENT	3347:15	3347:15	9	"extractContigSamplesShifted24bits"
FIELD	3347:15	3347:15	10	"extractContigSamplesShifted24bits"
LEAF_NODE	3347:15	3347:15	11	"extractContigSamplesShifted24bits"
LEAF_NODE	3347:50	3347:50	9	,
ARGUMENT	3348:15	3348:15	9	"Invalid end column value %d ignored"
FIELD	3348:15	3348:15	10	"Invalid end column value %d ignored"
LEAF_NODE	3348:15	3348:15	11	"Invalid end column value %d ignored"
LEAF_NODE	3348:52	3348:52	9	,
ARGUMENT	3348:54	3348:54	9	end
FIELD	3348:54	3348:54	10	end
LEAF_NODE	3348:54	3348:54	11	end
LEAF_NODE	3348:57	3348:57	9	)
LEAF_NODE	3348:58	3348:58	7	;
EXPR_STATEMENT	3349:4	3349:14	6	end = cols ;
EXPR	3349:4	3349:4	7	end = cols
ASSIGN	3349:4	3349:10	8	end = cols
LVAL	3349:4	3349:4	9	end
FIELD	3349:4	3349:4	10	end
LEAF_NODE	3349:4	3349:4	11	end
ASSIGN_OP	3349:8	3349:8	9	=
LEAF_NODE	3349:8	3349:8	10	=
RVAL	3349:10	3349:10	9	cols
FIELD	3349:10	3349:10	10	cols
LEAF_NODE	3349:10	3349:10	11	cols
LEAF_NODE	3349:14	3349:14	7	;
LEAF_NODE	3350:4	3350:4	5	}
EXPR_STATEMENT	3352:2	3352:20	3	ready_bits = shift ;
EXPR	3352:2	3352:2	4	ready_bits = shift
ASSIGN	3352:2	3352:15	5	ready_bits = shift
LVAL	3352:2	3352:2	6	ready_bits
FIELD	3352:2	3352:2	7	ready_bits
LEAF_NODE	3352:2	3352:2	8	ready_bits
ASSIGN_OP	3352:13	3352:13	6	=
LEAF_NODE	3352:13	3352:13	7	=
RVAL	3352:15	3352:15	6	shift
FIELD	3352:15	3352:15	7	shift
LEAF_NODE	3352:15	3352:15	8	shift
LEAF_NODE	3352:20	3352:20	4	;
EXPR_STATEMENT	3353:2	3353:39	3	maskbits = ( uint32 ) - 1 >> ( 32 - bps ) ;
EXPR	3353:2	3353:2	4	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
ASSIGN	3353:2	3353:14	5	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
LVAL	3353:2	3353:2	6	maskbits
FIELD	3353:2	3353:2	7	maskbits
LEAF_NODE	3353:2	3353:2	8	maskbits
ASSIGN_OP	3353:11	3353:11	6	=
LEAF_NODE	3353:11	3353:11	7	=
RVAL	3353:14	3353:38	6	( uint32 ) - 1 >> ( 32 - bps )
LEAF_NODE	3353:14	3353:14	7	(
TYPE_NAME	3353:15	3353:15	7	uint32
LEAF_NODE	3353:15	3353:15	8	uint32
LEAF_NODE	3353:21	3353:21	7	)
UNARY_EXPR	3353:22	3353:23	7	- 1
UNARY_OPERATOR	3353:22	3353:22	8	-
LEAF_NODE	3353:22	3353:22	9	-
FIELD	3353:23	3353:23	8	1
LEAF_NODE	3353:23	3353:23	9	1
LEAF_NODE	3353:25	3353:25	7	>>
LEAF_NODE	3353:28	3353:28	7	(
FIELD	3353:30	3353:30	7	32
LEAF_NODE	3353:30	3353:30	8	32
LEAF_NODE	3353:33	3353:33	7	-
FIELD	3353:35	3353:35	7	bps
LEAF_NODE	3353:35	3353:35	8	bps
LEAF_NODE	3353:38	3353:38	7	)
LEAF_NODE	3353:39	3353:39	4	;
ITERATION	3354:2	3355:4	3	
KEYWORD	3354:2	3354:2	4	for
LEAF_NODE	3354:2	3354:2	5	for
LEAF_NODE	3354:6	3354:6	4	(
FOR_INIT	3354:7	3354:18	4	col = start ;
EXPR	3354:7	3354:7	5	col = start
ASSIGN	3354:7	3354:13	6	col = start
LVAL	3354:7	3354:7	7	col
FIELD	3354:7	3354:7	8	col
LEAF_NODE	3354:7	3354:7	9	col
ASSIGN_OP	3354:11	3354:11	7	=
LEAF_NODE	3354:11	3354:11	8	=
RVAL	3354:13	3354:13	7	start
FIELD	3354:13	3354:13	8	start
LEAF_NODE	3354:13	3354:13	9	start
LEAF_NODE	3354:18	3354:18	5	;
CONDITION	3354:20	3354:20	4	col < end
EXPR	3354:20	3354:26	5	col < end
FIELD	3354:20	3354:20	6	col
LEAF_NODE	3354:20	3354:20	7	col
REL_OPERATOR	3354:24	3354:24	6	<
LEAF_NODE	3354:24	3354:24	7	<
FIELD	3354:26	3354:26	6	end
LEAF_NODE	3354:26	3354:26	7	end
LEAF_NODE	3354:29	3354:29	4	;
FOR_EXPR	3354:31	3354:31	4	col ++
EXPR	3354:31	3354:31	5	col ++
FIELD	3354:31	3354:34	6	col ++
LEAF_NODE	3354:31	3354:31	7	col
LEAF_NODE	3354:34	3354:34	7	++
LEAF_NODE	3354:36	3354:36	4	)
STATEMENTS	3355:4	3401:4	4	
LEAF_NODE	3355:4	3355:4	5	{
STATEMENTS	3357:4	3358:4	5	
LEAF_NODE	3357:4	3357:4	6	bit_offset
LEAF_NODE	3357:15	3357:15	6	=
LEAF_NODE	3357:17	3357:17	6	col
EXPR_STATEMENT	3357:21	3357:32	6	* bps * spp ;
EXPR	3357:21	3357:29	7	* bps * spp
UNARY_EXPR	3357:21	3357:23	8	* bps
UNARY_OPERATOR	3357:21	3357:21	9	*
LEAF_NODE	3357:21	3357:21	10	*
FIELD	3357:23	3357:23	9	bps
LEAF_NODE	3357:23	3357:23	10	bps
LEAF_NODE	3357:27	3357:27	8	*
FIELD	3357:29	3357:29	8	spp
LEAF_NODE	3357:29	3357:29	9	spp
LEAF_NODE	3357:32	3357:32	7	;
ITERATION	3358:4	3359:6	6	
KEYWORD	3358:4	3358:4	7	for
LEAF_NODE	3358:4	3358:4	8	for
LEAF_NODE	3358:8	3358:8	7	(
FOR_INIT	3358:9	3358:24	7	sindex = sample ;
EXPR	3358:9	3358:9	8	sindex = sample
ASSIGN	3358:9	3358:18	9	sindex = sample
LVAL	3358:9	3358:9	10	sindex
FIELD	3358:9	3358:9	11	sindex
LEAF_NODE	3358:9	3358:9	12	sindex
ASSIGN_OP	3358:16	3358:16	10	=
LEAF_NODE	3358:16	3358:16	11	=
RVAL	3358:18	3358:18	10	sample
FIELD	3358:18	3358:18	11	sample
LEAF_NODE	3358:18	3358:18	12	sample
LEAF_NODE	3358:24	3358:24	8	;
CONDITION	3358:26	3358:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3358:26	3358:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	3358:26	3358:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3358:26	3358:39	10	( sindex < spp )
LEAF_NODE	3358:26	3358:26	11	(
FIELD	3358:27	3358:27	11	sindex
LEAF_NODE	3358:27	3358:27	12	sindex
REL_OPERATOR	3358:34	3358:34	11	<
LEAF_NODE	3358:34	3358:34	12	<
FIELD	3358:36	3358:36	11	spp
LEAF_NODE	3358:36	3358:36	12	spp
LEAF_NODE	3358:39	3358:39	11	)
LEAF_NODE	3358:41	3358:41	10	&&
EXPR	3358:44	3358:70	10	( sindex < ( sample + count ) )
LEAF_NODE	3358:44	3358:44	11	(
FIELD	3358:45	3358:45	11	sindex
LEAF_NODE	3358:45	3358:45	12	sindex
REL_OPERATOR	3358:52	3358:52	11	<
LEAF_NODE	3358:52	3358:52	12	<
LEAF_NODE	3358:54	3358:54	11	(
FIELD	3358:55	3358:55	11	sample
LEAF_NODE	3358:55	3358:55	12	sample
LEAF_NODE	3358:62	3358:62	11	+
FIELD	3358:64	3358:64	11	count
LEAF_NODE	3358:64	3358:64	12	count
LEAF_NODE	3358:69	3358:69	11	)
LEAF_NODE	3358:70	3358:70	11	)
LEAF_NODE	3358:71	3358:71	7	;
FOR_EXPR	3358:73	3358:73	7	sindex ++
EXPR	3358:73	3358:73	8	sindex ++
FIELD	3358:73	3358:79	9	sindex ++
LEAF_NODE	3358:73	3358:73	10	sindex
LEAF_NODE	3358:79	3358:79	10	++
LEAF_NODE	3358:81	3358:81	7	)
STATEMENTS	3359:6	3400:6	7	
LEAF_NODE	3359:6	3359:6	8	{
STATEMENTS	3360:6	3399:6	8	
SELECTION	3360:6	3361:8	9	
KEYWORD	3360:6	3360:6	10	if
LEAF_NODE	3360:6	3360:6	11	if
LEAF_NODE	3360:9	3360:9	10	(
CONDITION	3360:10	3360:10	10	sindex == 0
EXPR	3360:10	3360:20	11	sindex == 0
FIELD	3360:10	3360:10	12	sindex
LEAF_NODE	3360:10	3360:10	13	sindex
EQ_OPERATOR	3360:17	3360:17	12	==
LEAF_NODE	3360:17	3360:17	13	==
FIELD	3360:20	3360:20	12	0
LEAF_NODE	3360:20	3360:20	13	0
LEAF_NODE	3360:21	3360:21	10	)
STATEMENTS	3361:8	3364:8	10	
LEAF_NODE	3361:8	3361:8	11	{
STATEMENTS	3362:8	3363:8	11	
EXPR_STATEMENT	3362:8	3362:33	12	src_byte = bit_offset / 8 ;
EXPR	3362:8	3362:8	13	src_byte = bit_offset / 8
ASSIGN	3362:8	3362:19	14	src_byte = bit_offset / 8
LVAL	3362:8	3362:8	15	src_byte
FIELD	3362:8	3362:8	16	src_byte
LEAF_NODE	3362:8	3362:8	17	src_byte
ASSIGN_OP	3362:17	3362:17	15	=
LEAF_NODE	3362:17	3362:17	16	=
RVAL	3362:19	3362:32	15	bit_offset / 8
FIELD	3362:19	3362:19	16	bit_offset
LEAF_NODE	3362:19	3362:19	17	bit_offset
LEAF_NODE	3362:30	3362:30	16	/
FIELD	3362:32	3362:32	16	8
LEAF_NODE	3362:32	3362:32	17	8
LEAF_NODE	3362:33	3362:33	13	;
EXPR_STATEMENT	3363:8	3363:33	12	src_bit = bit_offset % 8 ;
EXPR	3363:8	3363:8	13	src_bit = bit_offset % 8
ASSIGN	3363:8	3363:19	14	src_bit = bit_offset % 8
LVAL	3363:8	3363:8	15	src_bit
FIELD	3363:8	3363:8	16	src_bit
LEAF_NODE	3363:8	3363:8	17	src_bit
ASSIGN_OP	3363:17	3363:17	15	=
LEAF_NODE	3363:17	3363:17	16	=
RVAL	3363:19	3363:32	15	bit_offset % 8
FIELD	3363:19	3363:19	16	bit_offset
LEAF_NODE	3363:19	3363:19	17	bit_offset
LEAF_NODE	3363:30	3363:30	16	%
FIELD	3363:32	3363:32	16	8
LEAF_NODE	3363:32	3363:32	17	8
LEAF_NODE	3363:33	3363:33	13	;
LEAF_NODE	3364:8	3364:8	11	}
SELECTION	3365:6	3366:8	9	
KEYWORD	3365:6	3365:6	10	else
LEAF_NODE	3365:6	3365:6	11	else
STATEMENTS	3366:8	3369:8	10	
LEAF_NODE	3366:8	3366:8	11	{
STATEMENTS	3367:8	3368:8	11	
EXPR_STATEMENT	3367:8	3367:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	3367:8	3367:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	3367:8	3367:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	3367:8	3367:8	15	src_byte
FIELD	3367:8	3367:8	16	src_byte
LEAF_NODE	3367:8	3367:8	17	src_byte
ASSIGN_OP	3367:17	3367:17	15	=
LEAF_NODE	3367:17	3367:17	16	=
RVAL	3367:19	3367:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	3367:19	3367:19	16	(
FIELD	3367:20	3367:20	16	bit_offset
LEAF_NODE	3367:20	3367:20	17	bit_offset
LEAF_NODE	3367:31	3367:31	16	+
LEAF_NODE	3367:33	3367:33	16	(
FIELD	3367:34	3367:34	16	sindex
LEAF_NODE	3367:34	3367:34	17	sindex
LEAF_NODE	3367:41	3367:41	16	*
FIELD	3367:43	3367:43	16	bps
LEAF_NODE	3367:43	3367:43	17	bps
LEAF_NODE	3367:46	3367:46	16	)
LEAF_NODE	3367:47	3367:47	16	)
LEAF_NODE	3367:49	3367:49	16	/
FIELD	3367:51	3367:51	16	8
LEAF_NODE	3367:51	3367:51	17	8
LEAF_NODE	3367:52	3367:52	13	;
EXPR_STATEMENT	3368:8	3368:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	3368:8	3368:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	3368:8	3368:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	3368:8	3368:8	15	src_bit
FIELD	3368:8	3368:8	16	src_bit
LEAF_NODE	3368:8	3368:8	17	src_bit
ASSIGN_OP	3368:17	3368:17	15	=
LEAF_NODE	3368:17	3368:17	16	=
RVAL	3368:19	3368:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	3368:19	3368:19	16	(
FIELD	3368:20	3368:20	16	bit_offset
LEAF_NODE	3368:20	3368:20	17	bit_offset
LEAF_NODE	3368:31	3368:31	16	+
LEAF_NODE	3368:33	3368:33	16	(
FIELD	3368:34	3368:34	16	sindex
LEAF_NODE	3368:34	3368:34	17	sindex
LEAF_NODE	3368:41	3368:41	16	*
FIELD	3368:43	3368:43	16	bps
LEAF_NODE	3368:43	3368:43	17	bps
LEAF_NODE	3368:46	3368:46	16	)
LEAF_NODE	3368:47	3368:47	16	)
LEAF_NODE	3368:49	3368:49	16	%
FIELD	3368:51	3368:51	16	8
LEAF_NODE	3368:51	3368:51	17	8
LEAF_NODE	3368:52	3368:52	13	;
LEAF_NODE	3369:8	3369:8	11	}
EXPR_STATEMENT	3371:6	3371:25	9	src = in + src_byte ;
EXPR	3371:6	3371:6	10	src = in + src_byte
ASSIGN	3371:6	3371:12	11	src = in + src_byte
LVAL	3371:6	3371:6	12	src
FIELD	3371:6	3371:6	13	src
LEAF_NODE	3371:6	3371:6	14	src
ASSIGN_OP	3371:10	3371:10	12	=
LEAF_NODE	3371:10	3371:10	13	=
RVAL	3371:12	3371:17	12	in + src_byte
FIELD	3371:12	3371:12	13	in
LEAF_NODE	3371:12	3371:12	14	in
LEAF_NODE	3371:15	3371:15	13	+
FIELD	3371:17	3371:17	13	src_byte
LEAF_NODE	3371:17	3371:17	14	src_byte
LEAF_NODE	3371:25	3371:25	10	;
EXPR_STATEMENT	3372:6	3372:50	9	matchbits = maskbits << ( 32 - src_bit - bps ) ;
EXPR	3372:6	3372:6	10	matchbits = maskbits << ( 32 - src_bit - bps )
ASSIGN	3372:6	3372:18	11	matchbits = maskbits << ( 32 - src_bit - bps )
LVAL	3372:6	3372:6	12	matchbits
FIELD	3372:6	3372:6	13	matchbits
LEAF_NODE	3372:6	3372:6	14	matchbits
ASSIGN_OP	3372:16	3372:16	12	=
LEAF_NODE	3372:16	3372:16	13	=
RVAL	3372:18	3372:49	12	maskbits << ( 32 - src_bit - bps )
FIELD	3372:18	3372:18	13	maskbits
LEAF_NODE	3372:18	3372:18	14	maskbits
LEAF_NODE	3372:27	3372:27	13	<<
LEAF_NODE	3372:30	3372:30	13	(
FIELD	3372:31	3372:31	13	32
LEAF_NODE	3372:31	3372:31	14	32
LEAF_NODE	3372:34	3372:34	13	-
FIELD	3372:36	3372:36	13	src_bit
LEAF_NODE	3372:36	3372:36	14	src_bit
LEAF_NODE	3372:44	3372:44	13	-
FIELD	3372:46	3372:46	13	bps
LEAF_NODE	3372:46	3372:46	14	bps
LEAF_NODE	3372:49	3372:49	13	)
LEAF_NODE	3372:50	3372:50	10	;
SELECTION	3373:6	3374:1	9	
KEYWORD	3373:6	3373:6	10	if
LEAF_NODE	3373:6	3373:6	11	if
LEAF_NODE	3373:9	3373:9	10	(
CONDITION	3373:10	3373:10	10	little_endian
EXPR	3373:10	3373:10	11	little_endian
FIELD	3373:10	3373:10	12	little_endian
LEAF_NODE	3373:10	3373:10	13	little_endian
LEAF_NODE	3373:23	3373:23	10	)
STATEMENTS	3374:1	3374:1	10	
EXPR_STATEMENT	3374:1	3374:65	11	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	3374:1	3374:1	12	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	3374:1	3374:9	13	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	3374:1	3374:1	14	buff1
FIELD	3374:1	3374:1	15	buff1
LEAF_NODE	3374:1	3374:1	16	buff1
ASSIGN_OP	3374:7	3374:7	14	=
LEAF_NODE	3374:7	3374:7	15	=
RVAL	3374:9	3374:9	14	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3374:9	3374:26	15	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3374:9	3374:22	16	( src [ 0 ] << 24 )
LEAF_NODE	3374:9	3374:9	17	(
FIELD	3374:10	3374:15	17	src [ 0 ]
LEAF_NODE	3374:10	3374:10	18	src
LEAF_NODE	3374:13	3374:13	18	[
EXPR	3374:14	3374:14	18	0
FIELD	3374:14	3374:14	19	0
LEAF_NODE	3374:14	3374:14	20	0
LEAF_NODE	3374:15	3374:15	18	]
LEAF_NODE	3374:17	3374:17	17	<<
FIELD	3374:20	3374:20	17	24
LEAF_NODE	3374:20	3374:20	18	24
LEAF_NODE	3374:22	3374:22	17	)
LEAF_NODE	3374:24	3374:24	16	|
BIT_OR_ELEM	3374:26	3374:26	16	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3374:26	3374:43	17	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3374:26	3374:39	18	( src [ 1 ] << 16 )
LEAF_NODE	3374:26	3374:26	19	(
FIELD	3374:27	3374:32	19	src [ 1 ]
LEAF_NODE	3374:27	3374:27	20	src
LEAF_NODE	3374:30	3374:30	20	[
EXPR	3374:31	3374:31	20	1
FIELD	3374:31	3374:31	21	1
LEAF_NODE	3374:31	3374:31	22	1
LEAF_NODE	3374:32	3374:32	20	]
LEAF_NODE	3374:34	3374:34	19	<<
FIELD	3374:37	3374:37	19	16
LEAF_NODE	3374:37	3374:37	20	16
LEAF_NODE	3374:39	3374:39	19	)
LEAF_NODE	3374:41	3374:41	18	|
BIT_OR_ELEM	3374:43	3374:43	18	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3374:43	3374:59	19	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3374:43	3374:55	20	( src [ 2 ] << 8 )
LEAF_NODE	3374:43	3374:43	21	(
FIELD	3374:44	3374:49	21	src [ 2 ]
LEAF_NODE	3374:44	3374:44	22	src
LEAF_NODE	3374:47	3374:47	22	[
EXPR	3374:48	3374:48	22	2
FIELD	3374:48	3374:48	23	2
LEAF_NODE	3374:48	3374:48	24	2
LEAF_NODE	3374:49	3374:49	22	]
LEAF_NODE	3374:51	3374:51	21	<<
FIELD	3374:54	3374:54	21	8
LEAF_NODE	3374:54	3374:54	22	8
LEAF_NODE	3374:55	3374:55	21	)
LEAF_NODE	3374:57	3374:57	20	|
BIT_OR_ELEM	3374:59	3374:59	20	src [ 3 ]
FIELD	3374:59	3374:64	21	src [ 3 ]
LEAF_NODE	3374:59	3374:59	22	src
LEAF_NODE	3374:62	3374:62	22	[
EXPR	3374:63	3374:63	22	3
FIELD	3374:63	3374:63	23	3
LEAF_NODE	3374:63	3374:63	24	3
LEAF_NODE	3374:64	3374:64	22	]
LEAF_NODE	3374:65	3374:65	12	;
SELECTION	3375:6	3376:1	9	
KEYWORD	3375:6	3375:6	10	else
LEAF_NODE	3375:6	3375:6	11	else
STATEMENTS	3376:1	3376:1	10	
EXPR_STATEMENT	3376:1	3376:65	11	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	3376:1	3376:1	12	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	3376:1	3376:9	13	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	3376:1	3376:1	14	buff1
FIELD	3376:1	3376:1	15	buff1
LEAF_NODE	3376:1	3376:1	16	buff1
ASSIGN_OP	3376:7	3376:7	14	=
LEAF_NODE	3376:7	3376:7	15	=
RVAL	3376:9	3376:9	14	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3376:9	3376:26	15	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3376:9	3376:22	16	( src [ 3 ] << 24 )
LEAF_NODE	3376:9	3376:9	17	(
FIELD	3376:10	3376:15	17	src [ 3 ]
LEAF_NODE	3376:10	3376:10	18	src
LEAF_NODE	3376:13	3376:13	18	[
EXPR	3376:14	3376:14	18	3
FIELD	3376:14	3376:14	19	3
LEAF_NODE	3376:14	3376:14	20	3
LEAF_NODE	3376:15	3376:15	18	]
LEAF_NODE	3376:17	3376:17	17	<<
FIELD	3376:20	3376:20	17	24
LEAF_NODE	3376:20	3376:20	18	24
LEAF_NODE	3376:22	3376:22	17	)
LEAF_NODE	3376:24	3376:24	16	|
BIT_OR_ELEM	3376:26	3376:26	16	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3376:26	3376:43	17	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3376:26	3376:39	18	( src [ 2 ] << 16 )
LEAF_NODE	3376:26	3376:26	19	(
FIELD	3376:27	3376:32	19	src [ 2 ]
LEAF_NODE	3376:27	3376:27	20	src
LEAF_NODE	3376:30	3376:30	20	[
EXPR	3376:31	3376:31	20	2
FIELD	3376:31	3376:31	21	2
LEAF_NODE	3376:31	3376:31	22	2
LEAF_NODE	3376:32	3376:32	20	]
LEAF_NODE	3376:34	3376:34	19	<<
FIELD	3376:37	3376:37	19	16
LEAF_NODE	3376:37	3376:37	20	16
LEAF_NODE	3376:39	3376:39	19	)
LEAF_NODE	3376:41	3376:41	18	|
BIT_OR_ELEM	3376:43	3376:43	18	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3376:43	3376:59	19	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3376:43	3376:55	20	( src [ 1 ] << 8 )
LEAF_NODE	3376:43	3376:43	21	(
FIELD	3376:44	3376:49	21	src [ 1 ]
LEAF_NODE	3376:44	3376:44	22	src
LEAF_NODE	3376:47	3376:47	22	[
EXPR	3376:48	3376:48	22	1
FIELD	3376:48	3376:48	23	1
LEAF_NODE	3376:48	3376:48	24	1
LEAF_NODE	3376:49	3376:49	22	]
LEAF_NODE	3376:51	3376:51	21	<<
FIELD	3376:54	3376:54	21	8
LEAF_NODE	3376:54	3376:54	22	8
LEAF_NODE	3376:55	3376:55	21	)
LEAF_NODE	3376:57	3376:57	20	|
BIT_OR_ELEM	3376:59	3376:59	20	src [ 0 ]
FIELD	3376:59	3376:64	21	src [ 0 ]
LEAF_NODE	3376:59	3376:59	22	src
LEAF_NODE	3376:62	3376:62	22	[
EXPR	3376:63	3376:63	22	0
FIELD	3376:63	3376:63	23	0
LEAF_NODE	3376:63	3376:63	24	0
LEAF_NODE	3376:64	3376:64	22	]
LEAF_NODE	3376:65	3376:65	12	;
SELECTION	3378:6	3379:8	9	
KEYWORD	3378:6	3378:6	10	if
LEAF_NODE	3378:6	3378:6	11	if
LEAF_NODE	3378:9	3378:9	10	(
CONDITION	3378:10	3378:10	10	( col == start ) && ( sindex == sample )
EXPR	3378:10	3378:10	11	( col == start ) && ( sindex == sample )
AND	3378:10	3378:28	12	( col == start ) && ( sindex == sample )
EXPR	3378:10	3378:23	13	( col == start )
LEAF_NODE	3378:10	3378:10	14	(
FIELD	3378:11	3378:11	14	col
LEAF_NODE	3378:11	3378:11	15	col
EQ_OPERATOR	3378:15	3378:15	14	==
LEAF_NODE	3378:15	3378:15	15	==
FIELD	3378:18	3378:18	14	start
LEAF_NODE	3378:18	3378:18	15	start
LEAF_NODE	3378:23	3378:23	14	)
LEAF_NODE	3378:25	3378:25	13	&&
EXPR	3378:28	3378:45	13	( sindex == sample )
LEAF_NODE	3378:28	3378:28	14	(
FIELD	3378:29	3378:29	14	sindex
LEAF_NODE	3378:29	3378:29	15	sindex
EQ_OPERATOR	3378:36	3378:36	14	==
LEAF_NODE	3378:36	3378:36	15	==
FIELD	3378:39	3378:39	14	sample
LEAF_NODE	3378:39	3378:39	15	sample
LEAF_NODE	3378:45	3378:45	14	)
LEAF_NODE	3378:46	3378:46	10	)
STATEMENTS	3379:8	3379:8	10	
EXPR_STATEMENT	3379:8	3379:52	11	buff2 = buff1 & ( ( uint32 ) - 1 ) << ( 16 - shift ) ;
EXPR	3379:8	3379:8	12	buff2 = buff1 & ( ( uint32 ) - 1 ) << ( 16 - shift )
ASSIGN	3379:8	3379:16	13	buff2 = buff1 & ( ( uint32 ) - 1 ) << ( 16 - shift )
LVAL	3379:8	3379:8	14	buff2
FIELD	3379:8	3379:8	15	buff2
LEAF_NODE	3379:8	3379:8	16	buff2
ASSIGN_OP	3379:14	3379:14	14	=
LEAF_NODE	3379:14	3379:14	15	=
RVAL	3379:16	3379:51	14	buff1 & ( ( uint32 ) - 1 ) << ( 16 - shift )
FIELD	3379:16	3379:16	15	buff1
LEAF_NODE	3379:16	3379:16	16	buff1
LEAF_NODE	3379:22	3379:22	15	&
LEAF_NODE	3379:24	3379:24	15	(
LEAF_NODE	3379:25	3379:25	15	(
TYPE_NAME	3379:26	3379:26	15	uint32
LEAF_NODE	3379:26	3379:26	16	uint32
LEAF_NODE	3379:32	3379:32	15	)
UNARY_EXPR	3379:33	3379:34	15	- 1
UNARY_OPERATOR	3379:33	3379:33	16	-
LEAF_NODE	3379:33	3379:33	17	-
FIELD	3379:34	3379:34	16	1
LEAF_NODE	3379:34	3379:34	17	1
LEAF_NODE	3379:35	3379:35	15	)
LEAF_NODE	3379:37	3379:37	15	<<
LEAF_NODE	3379:40	3379:40	15	(
FIELD	3379:41	3379:41	15	16
LEAF_NODE	3379:41	3379:41	16	16
LEAF_NODE	3379:44	3379:44	15	-
FIELD	3379:46	3379:46	15	shift
LEAF_NODE	3379:46	3379:46	16	shift
LEAF_NODE	3379:51	3379:51	15	)
LEAF_NODE	3379:52	3379:52	12	;
LEAF_NODE	3381:6	3381:6	9	buff1
LEAF_NODE	3381:12	3381:12	9	=
LEAF_NODE	3381:14	3381:14	9	(
LEAF_NODE	3381:15	3381:15	9	buff1
LEAF_NODE	3381:21	3381:21	9	&
LEAF_NODE	3381:23	3381:23	9	matchbits
LEAF_NODE	3381:32	3381:32	9	)
LEAF_NODE	3381:34	3381:34	9	<<
LEAF_NODE	3381:37	3381:37	9	(
LEAF_NODE	3381:38	3381:38	9	src_bit
LEAF_NODE	3381:45	3381:45	9	)
LEAF_NODE	3381:46	3381:46	9	;
SELECTION	3383:6	3384:8	9	
KEYWORD	3383:6	3383:6	10	if
LEAF_NODE	3383:6	3383:6	11	if
LEAF_NODE	3383:9	3383:9	10	(
CONDITION	3383:10	3383:10	10	ready_bits < 16
EXPR	3383:10	3383:23	11	ready_bits < 16
FIELD	3383:10	3383:10	12	ready_bits
LEAF_NODE	3383:10	3383:10	13	ready_bits
REL_OPERATOR	3383:21	3383:21	12	<
LEAF_NODE	3383:21	3383:21	13	<
FIELD	3383:23	3383:23	12	16
LEAF_NODE	3383:23	3383:23	13	16
LEAF_NODE	3383:25	3383:25	10	)
STATEMENTS	3384:8	3387:8	10	
LEAF_NODE	3384:8	3384:8	11	{
STATEMENTS	3385:8	3386:8	11	
EXPR_STATEMENT	3385:8	3385:33	12	bytebuff1 = bytebuff2 = 0 ;
EXPR	3385:8	3385:8	13	bytebuff1 = bytebuff2 = 0
ASSIGN	3385:8	3385:20	14	bytebuff1 = bytebuff2 = 0
LVAL	3385:8	3385:8	15	bytebuff1
FIELD	3385:8	3385:8	16	bytebuff1
LEAF_NODE	3385:8	3385:8	17	bytebuff1
ASSIGN_OP	3385:18	3385:18	15	=
LEAF_NODE	3385:18	3385:18	16	=
RVAL	3385:20	3385:20	15	bytebuff2 = 0
ASSIGN	3385:20	3385:32	16	bytebuff2 = 0
LVAL	3385:20	3385:20	17	bytebuff2
FIELD	3385:20	3385:20	18	bytebuff2
LEAF_NODE	3385:20	3385:20	19	bytebuff2
ASSIGN_OP	3385:30	3385:30	17	=
LEAF_NODE	3385:30	3385:30	18	=
RVAL	3385:32	3385:32	17	0
FIELD	3385:32	3385:32	18	0
LEAF_NODE	3385:32	3385:32	19	0
LEAF_NODE	3385:33	3385:33	13	;
EXPR_STATEMENT	3386:8	3386:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	3386:8	3386:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	3386:8	3386:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	3386:8	3386:8	15	buff2
FIELD	3386:8	3386:8	16	buff2
LEAF_NODE	3386:8	3386:8	17	buff2
ASSIGN_OP	3386:14	3386:14	15	=
LEAF_NODE	3386:14	3386:14	16	=
RVAL	3386:16	3386:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	3386:16	3386:16	16	(
BIT_OR	3386:17	3386:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3386:17	3386:17	17	buff2
FIELD	3386:17	3386:17	18	buff2
LEAF_NODE	3386:17	3386:17	19	buff2
LEAF_NODE	3386:23	3386:23	17	|
BIT_OR_ELEM	3386:25	3386:45	17	( buff1 >> ready_bits )
LEAF_NODE	3386:25	3386:25	18	(
FIELD	3386:26	3386:26	18	buff1
LEAF_NODE	3386:26	3386:26	19	buff1
LEAF_NODE	3386:32	3386:32	18	>>
FIELD	3386:35	3386:35	18	ready_bits
LEAF_NODE	3386:35	3386:35	19	ready_bits
LEAF_NODE	3386:45	3386:45	18	)
LEAF_NODE	3386:46	3386:46	16	)
LEAF_NODE	3386:47	3386:47	13	;
LEAF_NODE	3387:8	3387:8	11	}
SELECTION	3388:6	3389:8	9	
KEYWORD	3388:6	3388:6	10	else
LEAF_NODE	3388:6	3388:6	11	else
STATEMENTS	3389:8	3398:8	10	
LEAF_NODE	3389:8	3389:8	11	{
STATEMENTS	3390:8	3397:8	11	
EXPR_STATEMENT	3390:8	3390:33	12	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	3390:8	3390:8	13	bytebuff1 = ( buff2 >> 24 )
ASSIGN	3390:8	3390:20	14	bytebuff1 = ( buff2 >> 24 )
LVAL	3390:8	3390:8	15	bytebuff1
FIELD	3390:8	3390:8	16	bytebuff1
LEAF_NODE	3390:8	3390:8	17	bytebuff1
ASSIGN_OP	3390:18	3390:18	15	=
LEAF_NODE	3390:18	3390:18	16	=
RVAL	3390:20	3390:32	15	( buff2 >> 24 )
LEAF_NODE	3390:20	3390:20	16	(
FIELD	3390:21	3390:21	16	buff2
LEAF_NODE	3390:21	3390:21	17	buff2
LEAF_NODE	3390:27	3390:27	16	>>
FIELD	3390:30	3390:30	16	24
LEAF_NODE	3390:30	3390:30	17	24
LEAF_NODE	3390:32	3390:32	16	)
LEAF_NODE	3390:33	3390:33	13	;
EXPR_STATEMENT	3391:8	3391:26	12	* dst ++ = bytebuff1 ;
EXPR	3391:8	3391:8	13	* dst ++ = bytebuff1
ASSIGN	3391:8	3391:17	14	* dst ++ = bytebuff1
LVAL	3391:8	3391:8	15	* dst ++
UNARY_EXPR	3391:8	3391:9	16	* dst ++
UNARY_OPERATOR	3391:8	3391:8	17	*
LEAF_NODE	3391:8	3391:8	18	*
FIELD	3391:9	3391:12	17	dst ++
LEAF_NODE	3391:9	3391:9	18	dst
LEAF_NODE	3391:12	3391:12	18	++
ASSIGN_OP	3391:15	3391:15	15	=
LEAF_NODE	3391:15	3391:15	16	=
RVAL	3391:17	3391:17	15	bytebuff1
FIELD	3391:17	3391:17	16	bytebuff1
LEAF_NODE	3391:17	3391:17	17	bytebuff1
LEAF_NODE	3391:26	3391:26	13	;
EXPR_STATEMENT	3392:8	3392:33	12	bytebuff2 = ( buff2 >> 16 ) ;
EXPR	3392:8	3392:8	13	bytebuff2 = ( buff2 >> 16 )
ASSIGN	3392:8	3392:20	14	bytebuff2 = ( buff2 >> 16 )
LVAL	3392:8	3392:8	15	bytebuff2
FIELD	3392:8	3392:8	16	bytebuff2
LEAF_NODE	3392:8	3392:8	17	bytebuff2
ASSIGN_OP	3392:18	3392:18	15	=
LEAF_NODE	3392:18	3392:18	16	=
RVAL	3392:20	3392:32	15	( buff2 >> 16 )
LEAF_NODE	3392:20	3392:20	16	(
FIELD	3392:21	3392:21	16	buff2
LEAF_NODE	3392:21	3392:21	17	buff2
LEAF_NODE	3392:27	3392:27	16	>>
FIELD	3392:30	3392:30	16	16
LEAF_NODE	3392:30	3392:30	17	16
LEAF_NODE	3392:32	3392:32	16	)
LEAF_NODE	3392:33	3392:33	13	;
EXPR_STATEMENT	3393:8	3393:26	12	* dst ++ = bytebuff2 ;
EXPR	3393:8	3393:8	13	* dst ++ = bytebuff2
ASSIGN	3393:8	3393:17	14	* dst ++ = bytebuff2
LVAL	3393:8	3393:8	15	* dst ++
UNARY_EXPR	3393:8	3393:9	16	* dst ++
UNARY_OPERATOR	3393:8	3393:8	17	*
LEAF_NODE	3393:8	3393:8	18	*
FIELD	3393:9	3393:12	17	dst ++
LEAF_NODE	3393:9	3393:9	18	dst
LEAF_NODE	3393:12	3393:12	18	++
ASSIGN_OP	3393:15	3393:15	15	=
LEAF_NODE	3393:15	3393:15	16	=
RVAL	3393:17	3393:17	15	bytebuff2
FIELD	3393:17	3393:17	16	bytebuff2
LEAF_NODE	3393:17	3393:17	17	bytebuff2
LEAF_NODE	3393:26	3393:26	13	;
EXPR_STATEMENT	3394:8	3394:24	12	ready_bits -= 16 ;
EXPR	3394:8	3394:8	13	ready_bits -= 16
ASSIGN	3394:8	3394:22	14	ready_bits -= 16
LVAL	3394:8	3394:8	15	ready_bits
FIELD	3394:8	3394:8	16	ready_bits
LEAF_NODE	3394:8	3394:8	17	ready_bits
ASSIGN_OP	3394:19	3394:19	15	-=
LEAF_NODE	3394:19	3394:19	16	-=
RVAL	3394:22	3394:22	15	16
FIELD	3394:22	3394:22	16	16
LEAF_NODE	3394:22	3394:22	17	16
LEAF_NODE	3394:24	3394:24	13	;
EXPR_STATEMENT	3397:8	3397:55	12	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) ) ;
EXPR	3397:8	3397:8	13	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
ASSIGN	3397:8	3397:16	14	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LVAL	3397:8	3397:8	15	buff2
FIELD	3397:8	3397:8	16	buff2
LEAF_NODE	3397:8	3397:8	17	buff2
ASSIGN_OP	3397:14	3397:14	15	=
LEAF_NODE	3397:14	3397:14	16	=
RVAL	3397:16	3397:54	15	( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	3397:16	3397:16	16	(
BIT_OR	3397:17	3397:33	16	( buff2 << 16 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	3397:17	3397:29	17	( buff2 << 16 )
LEAF_NODE	3397:17	3397:17	18	(
FIELD	3397:18	3397:18	18	buff2
LEAF_NODE	3397:18	3397:18	19	buff2
LEAF_NODE	3397:24	3397:24	18	<<
FIELD	3397:27	3397:27	18	16
LEAF_NODE	3397:27	3397:27	19	16
LEAF_NODE	3397:29	3397:29	18	)
LEAF_NODE	3397:31	3397:31	17	|
BIT_OR_ELEM	3397:33	3397:53	17	( buff1 >> ready_bits )
LEAF_NODE	3397:33	3397:33	18	(
FIELD	3397:34	3397:34	18	buff1
LEAF_NODE	3397:34	3397:34	19	buff1
LEAF_NODE	3397:40	3397:40	18	>>
FIELD	3397:43	3397:43	18	ready_bits
LEAF_NODE	3397:43	3397:43	19	ready_bits
LEAF_NODE	3397:53	3397:53	18	)
LEAF_NODE	3397:54	3397:54	16	)
LEAF_NODE	3397:55	3397:55	13	;
LEAF_NODE	3398:8	3398:8	11	}
EXPR_STATEMENT	3399:6	3399:23	9	ready_bits += bps ;
EXPR	3399:6	3399:6	10	ready_bits += bps
ASSIGN	3399:6	3399:20	11	ready_bits += bps
LVAL	3399:6	3399:6	12	ready_bits
FIELD	3399:6	3399:6	13	ready_bits
LEAF_NODE	3399:6	3399:6	14	ready_bits
ASSIGN_OP	3399:17	3399:17	12	+=
LEAF_NODE	3399:17	3399:17	13	+=
RVAL	3399:20	3399:20	12	bps
FIELD	3399:20	3399:20	13	bps
LEAF_NODE	3399:20	3399:20	14	bps
LEAF_NODE	3399:23	3399:23	10	;
LEAF_NODE	3400:6	3400:6	8	}
LEAF_NODE	3401:4	3401:4	5	}
ITERATION	3404:2	3405:4	3	
KEYWORD	3404:2	3404:2	4	while
LEAF_NODE	3404:2	3404:2	5	while
LEAF_NODE	3404:8	3404:8	4	(
CONDITION	3404:9	3404:9	4	ready_bits > 0
EXPR	3404:9	3404:22	5	ready_bits > 0
FIELD	3404:9	3404:9	6	ready_bits
LEAF_NODE	3404:9	3404:9	7	ready_bits
REL_OPERATOR	3404:20	3404:20	6	>
LEAF_NODE	3404:20	3404:20	7	>
FIELD	3404:22	3404:22	6	0
LEAF_NODE	3404:22	3404:22	7	0
LEAF_NODE	3404:23	3404:23	4	)
STATEMENTS	3405:4	3412:4	4	
LEAF_NODE	3405:4	3405:4	5	{
STATEMENTS	3406:4	3411:4	5	
EXPR_STATEMENT	3406:4	3406:29	6	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	3406:4	3406:4	7	bytebuff1 = ( buff2 >> 24 )
ASSIGN	3406:4	3406:16	8	bytebuff1 = ( buff2 >> 24 )
LVAL	3406:4	3406:4	9	bytebuff1
FIELD	3406:4	3406:4	10	bytebuff1
LEAF_NODE	3406:4	3406:4	11	bytebuff1
ASSIGN_OP	3406:14	3406:14	9	=
LEAF_NODE	3406:14	3406:14	10	=
RVAL	3406:16	3406:28	9	( buff2 >> 24 )
LEAF_NODE	3406:16	3406:16	10	(
FIELD	3406:17	3406:17	10	buff2
LEAF_NODE	3406:17	3406:17	11	buff2
LEAF_NODE	3406:23	3406:23	10	>>
FIELD	3406:26	3406:26	10	24
LEAF_NODE	3406:26	3406:26	11	24
LEAF_NODE	3406:28	3406:28	10	)
LEAF_NODE	3406:29	3406:29	7	;
EXPR_STATEMENT	3407:4	3407:22	6	* dst ++ = bytebuff1 ;
EXPR	3407:4	3407:4	7	* dst ++ = bytebuff1
ASSIGN	3407:4	3407:13	8	* dst ++ = bytebuff1
LVAL	3407:4	3407:4	9	* dst ++
UNARY_EXPR	3407:4	3407:5	10	* dst ++
UNARY_OPERATOR	3407:4	3407:4	11	*
LEAF_NODE	3407:4	3407:4	12	*
FIELD	3407:5	3407:8	11	dst ++
LEAF_NODE	3407:5	3407:5	12	dst
LEAF_NODE	3407:8	3407:8	12	++
ASSIGN_OP	3407:11	3407:11	9	=
LEAF_NODE	3407:11	3407:11	10	=
RVAL	3407:13	3407:13	9	bytebuff1
FIELD	3407:13	3407:13	10	bytebuff1
LEAF_NODE	3407:13	3407:13	11	bytebuff1
LEAF_NODE	3407:22	3407:22	7	;
EXPR_STATEMENT	3409:4	3409:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	3409:4	3409:4	7	buff2 = ( buff2 << 8 )
ASSIGN	3409:4	3409:12	8	buff2 = ( buff2 << 8 )
LVAL	3409:4	3409:4	9	buff2
FIELD	3409:4	3409:4	10	buff2
LEAF_NODE	3409:4	3409:4	11	buff2
ASSIGN_OP	3409:10	3409:10	9	=
LEAF_NODE	3409:10	3409:10	10	=
RVAL	3409:12	3409:23	9	( buff2 << 8 )
LEAF_NODE	3409:12	3409:12	10	(
FIELD	3409:13	3409:13	10	buff2
LEAF_NODE	3409:13	3409:13	11	buff2
LEAF_NODE	3409:19	3409:19	10	<<
FIELD	3409:22	3409:22	10	8
LEAF_NODE	3409:22	3409:22	11	8
LEAF_NODE	3409:23	3409:23	10	)
LEAF_NODE	3409:24	3409:24	7	;
EXPR_STATEMENT	3410:4	3410:25	6	bytebuff2 = bytebuff1 ;
EXPR	3410:4	3410:4	7	bytebuff2 = bytebuff1
ASSIGN	3410:4	3410:16	8	bytebuff2 = bytebuff1
LVAL	3410:4	3410:4	9	bytebuff2
FIELD	3410:4	3410:4	10	bytebuff2
LEAF_NODE	3410:4	3410:4	11	bytebuff2
ASSIGN_OP	3410:14	3410:14	9	=
LEAF_NODE	3410:14	3410:14	10	=
RVAL	3410:16	3410:16	9	bytebuff1
FIELD	3410:16	3410:16	10	bytebuff1
LEAF_NODE	3410:16	3410:16	11	bytebuff1
LEAF_NODE	3410:25	3410:25	7	;
EXPR_STATEMENT	3411:4	3411:19	6	ready_bits -= 8 ;
EXPR	3411:4	3411:4	7	ready_bits -= 8
ASSIGN	3411:4	3411:18	8	ready_bits -= 8
LVAL	3411:4	3411:4	9	ready_bits
FIELD	3411:4	3411:4	10	ready_bits
LEAF_NODE	3411:4	3411:4	11	ready_bits
ASSIGN_OP	3411:15	3411:15	9	-=
LEAF_NODE	3411:15	3411:15	10	-=
RVAL	3411:18	3411:18	9	8
FIELD	3411:18	3411:18	10	8
LEAF_NODE	3411:18	3411:18	11	8
LEAF_NODE	3411:19	3411:19	7	;
LEAF_NODE	3412:4	3412:4	5	}
JUMP_STATEMENT	3414:2	3414:12	3	return ( 0 ) ;
KEYWORD	3414:2	3414:2	4	return
LEAF_NODE	3414:2	3414:2	5	return
DESTINATION	3414:9	3414:9	4	( 0 )
EXPR	3414:9	3414:11	5	( 0 )
LEAF_NODE	3414:9	3414:9	6	(
FIELD	3414:10	3414:10	6	0
LEAF_NODE	3414:10	3414:10	7	0
LEAF_NODE	3414:11	3414:11	6	)
LEAF_NODE	3414:12	3414:12	4	;
LEAF_NODE	3415:2	3415:2	2	}
FUNCTION_DEF	3417:0	3523:2	1	
RETURN_TYPE	3417:0	3417:7	2	static int
LEAF_NODE	3417:0	3417:0	3	static
TYPE_NAME	3417:7	3417:7	3	int
LEAF_NODE	3417:7	3417:7	4	int
FUNCTION_NAME	3418:0	3418:0	2	extractContigSamplesShifted32bits
LEAF_NODE	3418:0	3418:0	3	extractContigSamplesShifted32bits
PARAMETER_LIST	3418:34	3421:37	2	( uint8 * in , uint8 * out , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , tsample_t count , uint32 start , uint32 end , int shift )
LEAF_NODE	3418:34	3418:34	3	(
PARAMETER_DECL	3418:35	3418:42	3	uint8 * in
TYPE	3418:35	3418:41	4	uint8 *
TYPE_NAME	3418:35	3418:35	5	uint8
LEAF_NODE	3418:35	3418:35	6	uint8
POINTER	3418:41	3418:41	5	*
LEAF_NODE	3418:41	3418:41	6	*
NAME	3418:42	3418:42	4	in
LEAF_NODE	3418:42	3418:42	5	in
LEAF_NODE	3418:44	3418:44	3	,
PARAMETER_DECL	3418:46	3418:53	3	uint8 * out
TYPE	3418:46	3418:52	4	uint8 *
TYPE_NAME	3418:46	3418:46	5	uint8
LEAF_NODE	3418:46	3418:46	6	uint8
POINTER	3418:52	3418:52	5	*
LEAF_NODE	3418:52	3418:52	6	*
NAME	3418:53	3418:53	4	out
LEAF_NODE	3418:53	3418:53	5	out
LEAF_NODE	3418:56	3418:56	3	,
PARAMETER_DECL	3418:58	3418:65	3	uint32 cols
TYPE	3418:58	3418:58	4	uint32
TYPE_NAME	3418:58	3418:58	5	uint32
LEAF_NODE	3418:58	3418:58	6	uint32
NAME	3418:65	3418:65	4	cols
LEAF_NODE	3418:65	3418:65	5	cols
LEAF_NODE	3418:69	3418:69	3	,
PARAMETER_DECL	3419:35	3419:45	3	tsample_t sample
TYPE	3419:35	3419:35	4	tsample_t
TYPE_NAME	3419:35	3419:35	5	tsample_t
LEAF_NODE	3419:35	3419:35	6	tsample_t
NAME	3419:45	3419:45	4	sample
LEAF_NODE	3419:45	3419:45	5	sample
LEAF_NODE	3419:51	3419:51	3	,
PARAMETER_DECL	3419:53	3419:60	3	uint16 spp
TYPE	3419:53	3419:53	4	uint16
TYPE_NAME	3419:53	3419:53	5	uint16
LEAF_NODE	3419:53	3419:53	6	uint16
NAME	3419:60	3419:60	4	spp
LEAF_NODE	3419:60	3419:60	5	spp
LEAF_NODE	3419:63	3419:63	3	,
PARAMETER_DECL	3419:65	3419:72	3	uint16 bps
TYPE	3419:65	3419:65	4	uint16
TYPE_NAME	3419:65	3419:65	5	uint16
LEAF_NODE	3419:65	3419:65	6	uint16
NAME	3419:72	3419:72	4	bps
LEAF_NODE	3419:72	3419:72	5	bps
LEAF_NODE	3419:75	3419:75	3	,
PARAMETER_DECL	3420:15	3420:25	3	tsample_t count
TYPE	3420:15	3420:15	4	tsample_t
TYPE_NAME	3420:15	3420:15	5	tsample_t
LEAF_NODE	3420:15	3420:15	6	tsample_t
NAME	3420:25	3420:25	4	count
LEAF_NODE	3420:25	3420:25	5	count
LEAF_NODE	3420:30	3420:30	3	,
PARAMETER_DECL	3420:32	3420:39	3	uint32 start
TYPE	3420:32	3420:32	4	uint32
TYPE_NAME	3420:32	3420:32	5	uint32
LEAF_NODE	3420:32	3420:32	6	uint32
NAME	3420:39	3420:39	4	start
LEAF_NODE	3420:39	3420:39	5	start
LEAF_NODE	3420:44	3420:44	3	,
PARAMETER_DECL	3420:46	3420:53	3	uint32 end
TYPE	3420:46	3420:46	4	uint32
TYPE_NAME	3420:46	3420:46	5	uint32
LEAF_NODE	3420:46	3420:46	6	uint32
NAME	3420:53	3420:53	4	end
LEAF_NODE	3420:53	3420:53	5	end
LEAF_NODE	3420:56	3420:56	3	,
PARAMETER_DECL	3421:28	3421:32	3	int shift
TYPE	3421:28	3421:28	4	int
TYPE_NAME	3421:28	3421:28	5	int
LEAF_NODE	3421:28	3421:28	6	int
NAME	3421:32	3421:32	4	shift
LEAF_NODE	3421:32	3421:32	5	shift
LEAF_NODE	3421:37	3421:37	3	)
LEAF_NODE	3422:2	3422:2	2	{
STATEMENTS	3423:2	3522:2	2	
SIMPLE_DECL	3423:2	3423:58	3	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0 ;
INIT_DECL_LIST	3423:2	3423:2	4	int ready_bits ; ready_bits = 0 , int sindex ; sindex = 0
VAR_DECL	3423:2	3423:9	5	int ready_bits ; ready_bits = 0
TYPE	3423:2	3423:2	6	int
TYPE_NAME	3423:2	3423:2	7	int
LEAF_NODE	3423:2	3423:2	8	int
NAME	3423:9	3423:9	6	ready_bits
LEAF_NODE	3423:9	3423:9	7	ready_bits
LEAF_NODE	0:0	0:0	6	;
INIT	3423:9	3423:9	6	ready_bits = 0
ASSIGN	3423:9	3423:22	7	ready_bits = 0
LVAL	3423:9	3423:9	8	ready_bits
NAME	3423:9	3423:9	9	ready_bits
LEAF_NODE	3423:9	3423:9	10	ready_bits
ASSIGN_OP	3423:20	3423:20	8	=
LEAF_NODE	3423:20	3423:20	9	=
RVAL	3423:22	3423:22	8	0
FIELD	3423:22	3423:22	9	0
LEAF_NODE	3423:22	3423:22	10	0
LEAF_NODE	3423:23	3423:23	5	,
VAR_DECL	3423:2	3423:25	5	int sindex ; sindex = 0
TYPE	3423:2	3423:2	6	int
TYPE_NAME	3423:2	3423:2	7	int
LEAF_NODE	3423:2	3423:2	8	int
NAME	3423:25	3423:25	6	sindex
LEAF_NODE	3423:25	3423:25	7	sindex
LEAF_NODE	0:0	0:0	6	;
INIT	3423:25	3423:25	6	sindex = 0
ASSIGN	3423:25	3423:34	7	sindex = 0
LVAL	3423:25	3423:25	8	sindex
NAME	3423:25	3423:25	9	sindex
LEAF_NODE	3423:25	3423:25	10	sindex
ASSIGN_OP	3423:32	3423:32	8	=
LEAF_NODE	3423:32	3423:32	9	=
RVAL	3423:34	3423:34	8	0
FIELD	3423:34	3423:34	9	0
LEAF_NODE	3423:34	3423:34	10	0
LEAF_NODE	3423:58	3423:58	4	;
SIMPLE_DECL	3424:2	3424:43	3	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset ;
INIT_DECL_LIST	3424:2	3424:2	4	uint32 col , uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3424:2	3424:9	5	uint32 col
TYPE	3424:2	3424:2	6	uint32
TYPE_NAME	3424:2	3424:2	7	uint32
LEAF_NODE	3424:2	3424:2	8	uint32
NAME	3424:9	3424:9	6	col
LEAF_NODE	3424:9	3424:9	7	col
LEAF_NODE	3424:12	3424:12	5	,
INIT_DECL_LIST	3424:2	3424:2	5	uint32 src_byte , uint32 src_bit , uint32 bit_offset
VAR_DECL	3424:2	3424:14	6	uint32 src_byte
TYPE	3424:2	3424:2	7	uint32
TYPE_NAME	3424:2	3424:2	8	uint32
LEAF_NODE	3424:2	3424:2	9	uint32
NAME	3424:14	3424:14	7	src_byte
LEAF_NODE	3424:14	3424:14	8	src_byte
LEAF_NODE	3424:22	3424:22	6	,
INIT_DECL_LIST	3424:2	3424:2	6	uint32 src_bit , uint32 bit_offset
VAR_DECL	3424:2	3424:24	7	uint32 src_bit
TYPE	3424:2	3424:2	8	uint32
TYPE_NAME	3424:2	3424:2	9	uint32
LEAF_NODE	3424:2	3424:2	10	uint32
NAME	3424:24	3424:24	8	src_bit
LEAF_NODE	3424:24	3424:24	9	src_bit
LEAF_NODE	3424:31	3424:31	7	,
VAR_DECL	3424:2	3424:33	7	uint32 bit_offset
TYPE	3424:2	3424:2	8	uint32
TYPE_NAME	3424:2	3424:2	9	uint32
LEAF_NODE	3424:2	3424:2	10	uint32
NAME	3424:33	3424:33	8	bit_offset
LEAF_NODE	3424:33	3424:33	9	bit_offset
LEAF_NODE	3424:43	3424:43	4	;
SIMPLE_DECL	3425:2	3425:37	3	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0 ;
INIT_DECL_LIST	3425:2	3425:2	4	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0
VAR_DECL	3425:2	3425:9	5	uint32 longbuff1 ; longbuff1 = 0
TYPE	3425:2	3425:2	6	uint32
TYPE_NAME	3425:2	3425:2	7	uint32
LEAF_NODE	3425:2	3425:2	8	uint32
NAME	3425:9	3425:9	6	longbuff1
LEAF_NODE	3425:9	3425:9	7	longbuff1
LEAF_NODE	0:0	0:0	6	;
INIT	3425:9	3425:9	6	longbuff1 = 0
ASSIGN	3425:9	3425:21	7	longbuff1 = 0
LVAL	3425:9	3425:9	8	longbuff1
NAME	3425:9	3425:9	9	longbuff1
LEAF_NODE	3425:9	3425:9	10	longbuff1
ASSIGN_OP	3425:19	3425:19	8	=
LEAF_NODE	3425:19	3425:19	9	=
RVAL	3425:21	3425:21	8	0
FIELD	3425:21	3425:21	9	0
LEAF_NODE	3425:21	3425:21	10	0
LEAF_NODE	3425:22	3425:22	5	,
VAR_DECL	3425:2	3425:24	5	uint32 longbuff2 ; longbuff2 = 0
TYPE	3425:2	3425:2	6	uint32
TYPE_NAME	3425:2	3425:2	7	uint32
LEAF_NODE	3425:2	3425:2	8	uint32
NAME	3425:24	3425:24	6	longbuff2
LEAF_NODE	3425:24	3425:24	7	longbuff2
LEAF_NODE	0:0	0:0	6	;
INIT	3425:24	3425:24	6	longbuff2 = 0
ASSIGN	3425:24	3425:36	7	longbuff2 = 0
LVAL	3425:24	3425:24	8	longbuff2
NAME	3425:24	3425:24	9	longbuff2
LEAF_NODE	3425:24	3425:24	10	longbuff2
ASSIGN_OP	3425:34	3425:34	8	=
LEAF_NODE	3425:34	3425:34	9	=
RVAL	3425:36	3425:36	8	0
FIELD	3425:36	3425:36	9	0
LEAF_NODE	3425:36	3425:36	10	0
LEAF_NODE	3425:37	3425:37	4	;
SIMPLE_DECL	3426:2	3426:36	3	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3426:2	3426:2	4	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0
VAR_DECL	3426:2	3426:9	5	uint64 maskbits ; maskbits = 0
TYPE	3426:2	3426:2	6	uint64
TYPE_NAME	3426:2	3426:2	7	uint64
LEAF_NODE	3426:2	3426:2	8	uint64
NAME	3426:9	3426:9	6	maskbits
LEAF_NODE	3426:9	3426:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3426:9	3426:9	6	maskbits = 0
ASSIGN	3426:9	3426:20	7	maskbits = 0
LVAL	3426:9	3426:9	8	maskbits
NAME	3426:9	3426:9	9	maskbits
LEAF_NODE	3426:9	3426:9	10	maskbits
ASSIGN_OP	3426:18	3426:18	8	=
LEAF_NODE	3426:18	3426:18	9	=
RVAL	3426:20	3426:20	8	0
FIELD	3426:20	3426:20	9	0
LEAF_NODE	3426:20	3426:20	10	0
LEAF_NODE	3426:21	3426:21	5	,
VAR_DECL	3426:2	3426:23	5	uint64 matchbits ; matchbits = 0
TYPE	3426:2	3426:2	6	uint64
TYPE_NAME	3426:2	3426:2	7	uint64
LEAF_NODE	3426:2	3426:2	8	uint64
NAME	3426:23	3426:23	6	matchbits
LEAF_NODE	3426:23	3426:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3426:23	3426:23	6	matchbits = 0
ASSIGN	3426:23	3426:35	7	matchbits = 0
LVAL	3426:23	3426:23	8	matchbits
NAME	3426:23	3426:23	9	matchbits
LEAF_NODE	3426:23	3426:23	10	matchbits
ASSIGN_OP	3426:33	3426:33	8	=
LEAF_NODE	3426:33	3426:33	9	=
RVAL	3426:35	3426:35	8	0
FIELD	3426:35	3426:35	9	0
LEAF_NODE	3426:35	3426:35	10	0
LEAF_NODE	3426:36	3426:36	4	;
SIMPLE_DECL	3427:2	3427:40	3	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0 ;
INIT_DECL_LIST	3427:2	3427:2	4	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	3427:2	3427:9	5	uint64 buff1 ; buff1 = 0
TYPE	3427:2	3427:2	6	uint64
TYPE_NAME	3427:2	3427:2	7	uint64
LEAF_NODE	3427:2	3427:2	8	uint64
NAME	3427:9	3427:9	6	buff1
LEAF_NODE	3427:9	3427:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3427:9	3427:9	6	buff1 = 0
ASSIGN	3427:9	3427:17	7	buff1 = 0
LVAL	3427:9	3427:9	8	buff1
NAME	3427:9	3427:9	9	buff1
LEAF_NODE	3427:9	3427:9	10	buff1
ASSIGN_OP	3427:15	3427:15	8	=
LEAF_NODE	3427:15	3427:15	9	=
RVAL	3427:17	3427:17	8	0
FIELD	3427:17	3427:17	9	0
LEAF_NODE	3427:17	3427:17	10	0
LEAF_NODE	3427:18	3427:18	5	,
INIT_DECL_LIST	3427:2	3427:2	5	uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	3427:2	3427:20	6	uint64 buff2 ; buff2 = 0
TYPE	3427:2	3427:2	7	uint64
TYPE_NAME	3427:2	3427:2	8	uint64
LEAF_NODE	3427:2	3427:2	9	uint64
NAME	3427:20	3427:20	7	buff2
LEAF_NODE	3427:20	3427:20	8	buff2
LEAF_NODE	0:0	0:0	7	;
INIT	3427:20	3427:20	7	buff2 = 0
ASSIGN	3427:20	3427:28	8	buff2 = 0
LVAL	3427:20	3427:20	9	buff2
NAME	3427:20	3427:20	10	buff2
LEAF_NODE	3427:20	3427:20	11	buff2
ASSIGN_OP	3427:26	3427:26	9	=
LEAF_NODE	3427:26	3427:26	10	=
RVAL	3427:28	3427:28	9	0
FIELD	3427:28	3427:28	10	0
LEAF_NODE	3427:28	3427:28	11	0
LEAF_NODE	3427:29	3427:29	6	,
VAR_DECL	3427:2	3427:31	6	uint64 buff3 ; buff3 = 0
TYPE	3427:2	3427:2	7	uint64
TYPE_NAME	3427:2	3427:2	8	uint64
LEAF_NODE	3427:2	3427:2	9	uint64
NAME	3427:31	3427:31	7	buff3
LEAF_NODE	3427:31	3427:31	8	buff3
LEAF_NODE	0:0	0:0	7	;
INIT	3427:31	3427:31	7	buff3 = 0
ASSIGN	3427:31	3427:39	8	buff3 = 0
LVAL	3427:31	3427:31	9	buff3
NAME	3427:31	3427:31	10	buff3
LEAF_NODE	3427:31	3427:31	11	buff3
ASSIGN_OP	3427:37	3427:37	9	=
LEAF_NODE	3427:37	3427:37	10	=
RVAL	3427:39	3427:39	9	0
FIELD	3427:39	3427:39	10	0
LEAF_NODE	3427:39	3427:39	11	0
LEAF_NODE	3427:40	3427:40	4	;
SIMPLE_DECL	3428:2	3428:67	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0 ;
INIT_DECL_LIST	3428:2	3428:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	3428:2	3428:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	3428:2	3428:2	6	uint8
TYPE_NAME	3428:2	3428:2	7	uint8
LEAF_NODE	3428:2	3428:2	8	uint8
NAME	3428:9	3428:9	6	bytebuff1
LEAF_NODE	3428:9	3428:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	3428:9	3428:9	6	bytebuff1 = 0
ASSIGN	3428:9	3428:21	7	bytebuff1 = 0
LVAL	3428:9	3428:9	8	bytebuff1
NAME	3428:9	3428:9	9	bytebuff1
LEAF_NODE	3428:9	3428:9	10	bytebuff1
ASSIGN_OP	3428:19	3428:19	8	=
LEAF_NODE	3428:19	3428:19	9	=
RVAL	3428:21	3428:21	8	0
FIELD	3428:21	3428:21	9	0
LEAF_NODE	3428:21	3428:21	10	0
LEAF_NODE	3428:22	3428:22	5	,
INIT_DECL_LIST	3428:2	3428:2	5	uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	3428:2	3428:24	6	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	3428:2	3428:2	7	uint8
TYPE_NAME	3428:2	3428:2	8	uint8
LEAF_NODE	3428:2	3428:2	9	uint8
NAME	3428:24	3428:24	7	bytebuff2
LEAF_NODE	3428:24	3428:24	8	bytebuff2
LEAF_NODE	0:0	0:0	7	;
INIT	3428:24	3428:24	7	bytebuff2 = 0
ASSIGN	3428:24	3428:36	8	bytebuff2 = 0
LVAL	3428:24	3428:24	9	bytebuff2
NAME	3428:24	3428:24	10	bytebuff2
LEAF_NODE	3428:24	3428:24	11	bytebuff2
ASSIGN_OP	3428:34	3428:34	9	=
LEAF_NODE	3428:34	3428:34	10	=
RVAL	3428:36	3428:36	9	0
FIELD	3428:36	3428:36	10	0
LEAF_NODE	3428:36	3428:36	11	0
LEAF_NODE	3428:37	3428:37	6	,
INIT_DECL_LIST	3428:2	3428:2	6	uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	3428:2	3428:39	7	uint8 bytebuff3 ; bytebuff3 = 0
TYPE	3428:2	3428:2	8	uint8
TYPE_NAME	3428:2	3428:2	9	uint8
LEAF_NODE	3428:2	3428:2	10	uint8
NAME	3428:39	3428:39	8	bytebuff3
LEAF_NODE	3428:39	3428:39	9	bytebuff3
LEAF_NODE	0:0	0:0	8	;
INIT	3428:39	3428:39	8	bytebuff3 = 0
ASSIGN	3428:39	3428:51	9	bytebuff3 = 0
LVAL	3428:39	3428:39	10	bytebuff3
NAME	3428:39	3428:39	11	bytebuff3
LEAF_NODE	3428:39	3428:39	12	bytebuff3
ASSIGN_OP	3428:49	3428:49	10	=
LEAF_NODE	3428:49	3428:49	11	=
RVAL	3428:51	3428:51	10	0
FIELD	3428:51	3428:51	11	0
LEAF_NODE	3428:51	3428:51	12	0
LEAF_NODE	3428:52	3428:52	7	,
VAR_DECL	3428:2	3428:54	7	uint8 bytebuff4 ; bytebuff4 = 0
TYPE	3428:2	3428:2	8	uint8
TYPE_NAME	3428:2	3428:2	9	uint8
LEAF_NODE	3428:2	3428:2	10	uint8
NAME	3428:54	3428:54	8	bytebuff4
LEAF_NODE	3428:54	3428:54	9	bytebuff4
LEAF_NODE	0:0	0:0	8	;
INIT	3428:54	3428:54	8	bytebuff4 = 0
ASSIGN	3428:54	3428:66	9	bytebuff4 = 0
LVAL	3428:54	3428:54	10	bytebuff4
NAME	3428:54	3428:54	11	bytebuff4
LEAF_NODE	3428:54	3428:54	12	bytebuff4
ASSIGN_OP	3428:64	3428:64	10	=
LEAF_NODE	3428:64	3428:64	11	=
RVAL	3428:66	3428:66	10	0
FIELD	3428:66	3428:66	11	0
LEAF_NODE	3428:66	3428:66	12	0
LEAF_NODE	3428:67	3428:67	4	;
SIMPLE_DECL	3429:2	3429:17	3	uint8 * src ; src = in ;
VAR_DECL	3429:2	3429:9	4	uint8 * src ; src = in
TYPE	3429:2	3429:8	5	uint8 *
TYPE_NAME	3429:2	3429:2	6	uint8
LEAF_NODE	3429:2	3429:2	7	uint8
POINTER	3429:8	3429:8	6	*
LEAF_NODE	3429:8	3429:8	7	*
NAME	3429:9	3429:9	5	src
LEAF_NODE	3429:9	3429:9	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3429:9	3429:9	5	src = in
ASSIGN	3429:9	3429:15	6	src = in
LVAL	3429:9	3429:9	7	src
NAME	3429:9	3429:9	8	src
LEAF_NODE	3429:9	3429:9	9	src
ASSIGN_OP	3429:13	3429:13	7	=
LEAF_NODE	3429:13	3429:13	8	=
RVAL	3429:15	3429:15	7	in
FIELD	3429:15	3429:15	8	in
LEAF_NODE	3429:15	3429:15	9	in
LEAF_NODE	3429:17	3429:17	4	;
SIMPLE_DECL	3430:2	3430:18	3	uint8 * dst ; dst = out ;
VAR_DECL	3430:2	3430:9	4	uint8 * dst ; dst = out
TYPE	3430:2	3430:8	5	uint8 *
TYPE_NAME	3430:2	3430:2	6	uint8
LEAF_NODE	3430:2	3430:2	7	uint8
POINTER	3430:8	3430:8	6	*
LEAF_NODE	3430:8	3430:8	7	*
NAME	3430:9	3430:9	5	dst
LEAF_NODE	3430:9	3430:9	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3430:9	3430:9	5	dst = out
ASSIGN	3430:9	3430:15	6	dst = out
LVAL	3430:9	3430:9	7	dst
NAME	3430:9	3430:9	8	dst
LEAF_NODE	3430:9	3430:9	9	dst
ASSIGN_OP	3430:13	3430:13	7	=
LEAF_NODE	3430:13	3430:13	8	=
RVAL	3430:15	3430:15	7	out
FIELD	3430:15	3430:15	8	out
LEAF_NODE	3430:15	3430:15	9	out
LEAF_NODE	3430:18	3430:18	4	;
SELECTION	3432:2	3433:4	3	
KEYWORD	3432:2	3432:2	4	if
LEAF_NODE	3432:2	3432:2	5	if
LEAF_NODE	3432:5	3432:5	4	(
CONDITION	3432:6	3432:6	4	( in == NULL ) || ( out == NULL )
EXPR	3432:6	3432:6	5	( in == NULL ) || ( out == NULL )
OR	3432:6	3432:22	6	( in == NULL ) || ( out == NULL )
EXPR	3432:6	3432:17	7	( in == NULL )
LEAF_NODE	3432:6	3432:6	8	(
FIELD	3432:7	3432:7	8	in
LEAF_NODE	3432:7	3432:7	9	in
EQ_OPERATOR	3432:10	3432:10	8	==
LEAF_NODE	3432:10	3432:10	9	==
FIELD	3432:13	3432:13	8	NULL
LEAF_NODE	3432:13	3432:13	9	NULL
LEAF_NODE	3432:17	3432:17	8	)
LEAF_NODE	3432:19	3432:19	7	||
EXPR	3432:22	3432:34	7	( out == NULL )
LEAF_NODE	3432:22	3432:22	8	(
FIELD	3432:23	3432:23	8	out
LEAF_NODE	3432:23	3432:23	9	out
EQ_OPERATOR	3432:27	3432:27	8	==
LEAF_NODE	3432:27	3432:27	9	==
FIELD	3432:30	3432:30	8	NULL
LEAF_NODE	3432:30	3432:30	9	NULL
LEAF_NODE	3432:34	3432:34	8	)
LEAF_NODE	3432:35	3432:35	4	)
STATEMENTS	3433:4	3436:4	4	
LEAF_NODE	3433:4	3433:4	5	{
STATEMENTS	3434:4	3435:4	5	
EXPR_STATEMENT	3434:4	3434:83	6	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid input or output buffer" ) ;
EXPR	3434:4	3434:4	7	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3434:4	3434:82	8	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid input or output buffer" )
CALLEE	3434:4	3434:4	9	TIFFError
LEAF_NODE	3434:4	3434:4	10	TIFFError
LEAF_NODE	3434:13	3434:13	9	(
ARGUMENT	3434:14	3434:14	9	"extractContigSamplesShifted32bits"
FIELD	3434:14	3434:14	10	"extractContigSamplesShifted32bits"
LEAF_NODE	3434:14	3434:14	11	"extractContigSamplesShifted32bits"
LEAF_NODE	3434:49	3434:49	9	,
ARGUMENT	3434:50	3434:50	9	"Invalid input or output buffer"
FIELD	3434:50	3434:50	10	"Invalid input or output buffer"
LEAF_NODE	3434:50	3434:50	11	"Invalid input or output buffer"
LEAF_NODE	3434:82	3434:82	9	)
LEAF_NODE	3434:83	3434:83	7	;
JUMP_STATEMENT	3435:4	3435:14	6	return ( 1 ) ;
KEYWORD	3435:4	3435:4	7	return
LEAF_NODE	3435:4	3435:4	8	return
DESTINATION	3435:11	3435:11	7	( 1 )
EXPR	3435:11	3435:13	8	( 1 )
LEAF_NODE	3435:11	3435:11	9	(
FIELD	3435:12	3435:12	9	1
LEAF_NODE	3435:12	3435:12	10	1
LEAF_NODE	3435:13	3435:13	9	)
LEAF_NODE	3435:14	3435:14	7	;
LEAF_NODE	3436:4	3436:4	5	}
SELECTION	3439:2	3440:4	3	
KEYWORD	3439:2	3439:2	4	if
LEAF_NODE	3439:2	3439:2	5	if
LEAF_NODE	3439:5	3439:5	4	(
CONDITION	3439:6	3439:6	4	( start > end ) || ( start > cols )
EXPR	3439:6	3439:6	5	( start > end ) || ( start > cols )
OR	3439:6	3439:23	6	( start > end ) || ( start > cols )
EXPR	3439:6	3439:18	7	( start > end )
LEAF_NODE	3439:6	3439:6	8	(
FIELD	3439:7	3439:7	8	start
LEAF_NODE	3439:7	3439:7	9	start
REL_OPERATOR	3439:13	3439:13	8	>
LEAF_NODE	3439:13	3439:13	9	>
FIELD	3439:15	3439:15	8	end
LEAF_NODE	3439:15	3439:15	9	end
LEAF_NODE	3439:18	3439:18	8	)
LEAF_NODE	3439:20	3439:20	7	||
EXPR	3439:23	3439:36	7	( start > cols )
LEAF_NODE	3439:23	3439:23	8	(
FIELD	3439:24	3439:24	8	start
LEAF_NODE	3439:24	3439:24	9	start
REL_OPERATOR	3439:30	3439:30	8	>
LEAF_NODE	3439:30	3439:30	9	>
FIELD	3439:32	3439:32	8	cols
LEAF_NODE	3439:32	3439:32	9	cols
LEAF_NODE	3439:36	3439:36	8	)
LEAF_NODE	3439:37	3439:37	4	)
STATEMENTS	3440:4	3444:4	4	
LEAF_NODE	3440:4	3440:4	5	{
STATEMENTS	3441:4	3443:4	5	
EXPR_STATEMENT	3441:4	3442:62	6	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid start column value %d ignored" , start ) ;
EXPR	3441:4	3441:4	7	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid start column value %d ignored" , start )
FUNCTION_CALL	3441:4	3442:61	8	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid start column value %d ignored" , start )
CALLEE	3441:4	3441:4	9	TIFFError
LEAF_NODE	3441:4	3441:4	10	TIFFError
LEAF_NODE	3441:14	3441:14	9	(
ARGUMENT	3441:15	3441:15	9	"extractContigSamplesShifted32bits"
FIELD	3441:15	3441:15	10	"extractContigSamplesShifted32bits"
LEAF_NODE	3441:15	3441:15	11	"extractContigSamplesShifted32bits"
LEAF_NODE	3441:50	3441:50	9	,
ARGUMENT	3442:15	3442:15	9	"Invalid start column value %d ignored"
FIELD	3442:15	3442:15	10	"Invalid start column value %d ignored"
LEAF_NODE	3442:15	3442:15	11	"Invalid start column value %d ignored"
LEAF_NODE	3442:54	3442:54	9	,
ARGUMENT	3442:56	3442:56	9	start
FIELD	3442:56	3442:56	10	start
LEAF_NODE	3442:56	3442:56	11	start
LEAF_NODE	3442:61	3442:61	9	)
LEAF_NODE	3442:62	3442:62	7	;
EXPR_STATEMENT	3443:4	3443:13	6	start = 0 ;
EXPR	3443:4	3443:4	7	start = 0
ASSIGN	3443:4	3443:12	8	start = 0
LVAL	3443:4	3443:4	9	start
FIELD	3443:4	3443:4	10	start
LEAF_NODE	3443:4	3443:4	11	start
ASSIGN_OP	3443:10	3443:10	9	=
LEAF_NODE	3443:10	3443:10	10	=
RVAL	3443:12	3443:12	9	0
FIELD	3443:12	3443:12	10	0
LEAF_NODE	3443:12	3443:12	11	0
LEAF_NODE	3443:13	3443:13	7	;
LEAF_NODE	3444:4	3444:4	5	}
SELECTION	3445:2	3446:4	3	
KEYWORD	3445:2	3445:2	4	if
LEAF_NODE	3445:2	3445:2	5	if
LEAF_NODE	3445:5	3445:5	4	(
CONDITION	3445:6	3445:6	4	( end == 0 ) || ( end > cols )
EXPR	3445:6	3445:6	5	( end == 0 ) || ( end > cols )
OR	3445:6	3445:20	6	( end == 0 ) || ( end > cols )
EXPR	3445:6	3445:15	7	( end == 0 )
LEAF_NODE	3445:6	3445:6	8	(
FIELD	3445:7	3445:7	8	end
LEAF_NODE	3445:7	3445:7	9	end
EQ_OPERATOR	3445:11	3445:11	8	==
LEAF_NODE	3445:11	3445:11	9	==
FIELD	3445:14	3445:14	8	0
LEAF_NODE	3445:14	3445:14	9	0
LEAF_NODE	3445:15	3445:15	8	)
LEAF_NODE	3445:17	3445:17	7	||
EXPR	3445:20	3445:31	7	( end > cols )
LEAF_NODE	3445:20	3445:20	8	(
FIELD	3445:21	3445:21	8	end
LEAF_NODE	3445:21	3445:21	9	end
REL_OPERATOR	3445:25	3445:25	8	>
LEAF_NODE	3445:25	3445:25	9	>
FIELD	3445:27	3445:27	8	cols
LEAF_NODE	3445:27	3445:27	9	cols
LEAF_NODE	3445:31	3445:31	8	)
LEAF_NODE	3445:32	3445:32	4	)
STATEMENTS	3446:4	3450:4	4	
LEAF_NODE	3446:4	3446:4	5	{
STATEMENTS	3447:4	3449:4	5	
EXPR_STATEMENT	3447:4	3448:58	6	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid end column value %d ignored" , end ) ;
EXPR	3447:4	3447:4	7	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid end column value %d ignored" , end )
FUNCTION_CALL	3447:4	3448:57	8	TIFFError ( "extractContigSamplesShifted32bits" , "Invalid end column value %d ignored" , end )
CALLEE	3447:4	3447:4	9	TIFFError
LEAF_NODE	3447:4	3447:4	10	TIFFError
LEAF_NODE	3447:14	3447:14	9	(
ARGUMENT	3447:15	3447:15	9	"extractContigSamplesShifted32bits"
FIELD	3447:15	3447:15	10	"extractContigSamplesShifted32bits"
LEAF_NODE	3447:15	3447:15	11	"extractContigSamplesShifted32bits"
LEAF_NODE	3447:50	3447:50	9	,
ARGUMENT	3448:15	3448:15	9	"Invalid end column value %d ignored"
FIELD	3448:15	3448:15	10	"Invalid end column value %d ignored"
LEAF_NODE	3448:15	3448:15	11	"Invalid end column value %d ignored"
LEAF_NODE	3448:52	3448:52	9	,
ARGUMENT	3448:54	3448:54	9	end
FIELD	3448:54	3448:54	10	end
LEAF_NODE	3448:54	3448:54	11	end
LEAF_NODE	3448:57	3448:57	9	)
LEAF_NODE	3448:58	3448:58	7	;
EXPR_STATEMENT	3449:4	3449:14	6	end = cols ;
EXPR	3449:4	3449:4	7	end = cols
ASSIGN	3449:4	3449:10	8	end = cols
LVAL	3449:4	3449:4	9	end
FIELD	3449:4	3449:4	10	end
LEAF_NODE	3449:4	3449:4	11	end
ASSIGN_OP	3449:8	3449:8	9	=
LEAF_NODE	3449:8	3449:8	10	=
RVAL	3449:10	3449:10	9	cols
FIELD	3449:10	3449:10	10	cols
LEAF_NODE	3449:10	3449:10	11	cols
LEAF_NODE	3449:14	3449:14	7	;
LEAF_NODE	3450:4	3450:4	5	}
EXPR_STATEMENT	3453:2	3453:20	3	ready_bits = shift ;
EXPR	3453:2	3453:2	4	ready_bits = shift
ASSIGN	3453:2	3453:15	5	ready_bits = shift
LVAL	3453:2	3453:2	6	ready_bits
FIELD	3453:2	3453:2	7	ready_bits
LEAF_NODE	3453:2	3453:2	8	ready_bits
ASSIGN_OP	3453:13	3453:13	6	=
LEAF_NODE	3453:13	3453:13	7	=
RVAL	3453:15	3453:15	6	shift
FIELD	3453:15	3453:15	7	shift
LEAF_NODE	3453:15	3453:15	8	shift
LEAF_NODE	3453:20	3453:20	4	;
EXPR_STATEMENT	3454:2	3454:39	3	maskbits = ( uint64 ) - 1 >> ( 64 - bps ) ;
EXPR	3454:2	3454:2	4	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
ASSIGN	3454:2	3454:14	5	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
LVAL	3454:2	3454:2	6	maskbits
FIELD	3454:2	3454:2	7	maskbits
LEAF_NODE	3454:2	3454:2	8	maskbits
ASSIGN_OP	3454:11	3454:11	6	=
LEAF_NODE	3454:11	3454:11	7	=
RVAL	3454:14	3454:38	6	( uint64 ) - 1 >> ( 64 - bps )
LEAF_NODE	3454:14	3454:14	7	(
TYPE_NAME	3454:15	3454:15	7	uint64
LEAF_NODE	3454:15	3454:15	8	uint64
LEAF_NODE	3454:21	3454:21	7	)
UNARY_EXPR	3454:22	3454:23	7	- 1
UNARY_OPERATOR	3454:22	3454:22	8	-
LEAF_NODE	3454:22	3454:22	9	-
FIELD	3454:23	3454:23	8	1
LEAF_NODE	3454:23	3454:23	9	1
LEAF_NODE	3454:25	3454:25	7	>>
LEAF_NODE	3454:28	3454:28	7	(
FIELD	3454:30	3454:30	7	64
LEAF_NODE	3454:30	3454:30	8	64
LEAF_NODE	3454:33	3454:33	7	-
FIELD	3454:35	3454:35	7	bps
LEAF_NODE	3454:35	3454:35	8	bps
LEAF_NODE	3454:38	3454:38	7	)
LEAF_NODE	3454:39	3454:39	4	;
ITERATION	3455:2	3456:4	3	
KEYWORD	3455:2	3455:2	4	for
LEAF_NODE	3455:2	3455:2	5	for
LEAF_NODE	3455:6	3455:6	4	(
FOR_INIT	3455:7	3455:18	4	col = start ;
EXPR	3455:7	3455:7	5	col = start
ASSIGN	3455:7	3455:13	6	col = start
LVAL	3455:7	3455:7	7	col
FIELD	3455:7	3455:7	8	col
LEAF_NODE	3455:7	3455:7	9	col
ASSIGN_OP	3455:11	3455:11	7	=
LEAF_NODE	3455:11	3455:11	8	=
RVAL	3455:13	3455:13	7	start
FIELD	3455:13	3455:13	8	start
LEAF_NODE	3455:13	3455:13	9	start
LEAF_NODE	3455:18	3455:18	5	;
CONDITION	3455:20	3455:20	4	col < end
EXPR	3455:20	3455:26	5	col < end
FIELD	3455:20	3455:20	6	col
LEAF_NODE	3455:20	3455:20	7	col
REL_OPERATOR	3455:24	3455:24	6	<
LEAF_NODE	3455:24	3455:24	7	<
FIELD	3455:26	3455:26	6	end
LEAF_NODE	3455:26	3455:26	7	end
LEAF_NODE	3455:29	3455:29	4	;
FOR_EXPR	3455:31	3455:31	4	col ++
EXPR	3455:31	3455:31	5	col ++
FIELD	3455:31	3455:34	6	col ++
LEAF_NODE	3455:31	3455:31	7	col
LEAF_NODE	3455:34	3455:34	7	++
LEAF_NODE	3455:36	3455:36	4	)
STATEMENTS	3456:4	3513:4	4	
LEAF_NODE	3456:4	3456:4	5	{
STATEMENTS	3458:4	3459:4	5	
LEAF_NODE	3458:4	3458:4	6	bit_offset
LEAF_NODE	3458:15	3458:15	6	=
LEAF_NODE	3458:17	3458:17	6	col
EXPR_STATEMENT	3458:21	3458:32	6	* bps * spp ;
EXPR	3458:21	3458:29	7	* bps * spp
UNARY_EXPR	3458:21	3458:23	8	* bps
UNARY_OPERATOR	3458:21	3458:21	9	*
LEAF_NODE	3458:21	3458:21	10	*
FIELD	3458:23	3458:23	9	bps
LEAF_NODE	3458:23	3458:23	10	bps
LEAF_NODE	3458:27	3458:27	8	*
FIELD	3458:29	3458:29	8	spp
LEAF_NODE	3458:29	3458:29	9	spp
LEAF_NODE	3458:32	3458:32	7	;
ITERATION	3459:4	3460:6	6	
KEYWORD	3459:4	3459:4	7	for
LEAF_NODE	3459:4	3459:4	8	for
LEAF_NODE	3459:8	3459:8	7	(
FOR_INIT	3459:9	3459:24	7	sindex = sample ;
EXPR	3459:9	3459:9	8	sindex = sample
ASSIGN	3459:9	3459:18	9	sindex = sample
LVAL	3459:9	3459:9	10	sindex
FIELD	3459:9	3459:9	11	sindex
LEAF_NODE	3459:9	3459:9	12	sindex
ASSIGN_OP	3459:16	3459:16	10	=
LEAF_NODE	3459:16	3459:16	11	=
RVAL	3459:18	3459:18	10	sample
FIELD	3459:18	3459:18	11	sample
LEAF_NODE	3459:18	3459:18	12	sample
LEAF_NODE	3459:24	3459:24	8	;
CONDITION	3459:26	3459:26	7	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3459:26	3459:26	8	( sindex < spp ) && ( sindex < ( sample + count ) )
AND	3459:26	3459:44	9	( sindex < spp ) && ( sindex < ( sample + count ) )
EXPR	3459:26	3459:39	10	( sindex < spp )
LEAF_NODE	3459:26	3459:26	11	(
FIELD	3459:27	3459:27	11	sindex
LEAF_NODE	3459:27	3459:27	12	sindex
REL_OPERATOR	3459:34	3459:34	11	<
LEAF_NODE	3459:34	3459:34	12	<
FIELD	3459:36	3459:36	11	spp
LEAF_NODE	3459:36	3459:36	12	spp
LEAF_NODE	3459:39	3459:39	11	)
LEAF_NODE	3459:41	3459:41	10	&&
EXPR	3459:44	3459:70	10	( sindex < ( sample + count ) )
LEAF_NODE	3459:44	3459:44	11	(
FIELD	3459:45	3459:45	11	sindex
LEAF_NODE	3459:45	3459:45	12	sindex
REL_OPERATOR	3459:52	3459:52	11	<
LEAF_NODE	3459:52	3459:52	12	<
LEAF_NODE	3459:54	3459:54	11	(
FIELD	3459:55	3459:55	11	sample
LEAF_NODE	3459:55	3459:55	12	sample
LEAF_NODE	3459:62	3459:62	11	+
FIELD	3459:64	3459:64	11	count
LEAF_NODE	3459:64	3459:64	12	count
LEAF_NODE	3459:69	3459:69	11	)
LEAF_NODE	3459:70	3459:70	11	)
LEAF_NODE	3459:71	3459:71	7	;
FOR_EXPR	3459:73	3459:73	7	sindex ++
EXPR	3459:73	3459:73	8	sindex ++
FIELD	3459:73	3459:79	9	sindex ++
LEAF_NODE	3459:73	3459:73	10	sindex
LEAF_NODE	3459:79	3459:79	10	++
LEAF_NODE	3459:81	3459:81	7	)
STATEMENTS	3460:6	3512:6	7	
LEAF_NODE	3460:6	3460:6	8	{
STATEMENTS	3461:6	3511:6	8	
SELECTION	3461:6	3462:8	9	
KEYWORD	3461:6	3461:6	10	if
LEAF_NODE	3461:6	3461:6	11	if
LEAF_NODE	3461:9	3461:9	10	(
CONDITION	3461:10	3461:10	10	sindex == 0
EXPR	3461:10	3461:20	11	sindex == 0
FIELD	3461:10	3461:10	12	sindex
LEAF_NODE	3461:10	3461:10	13	sindex
EQ_OPERATOR	3461:17	3461:17	12	==
LEAF_NODE	3461:17	3461:17	13	==
FIELD	3461:20	3461:20	12	0
LEAF_NODE	3461:20	3461:20	13	0
LEAF_NODE	3461:21	3461:21	10	)
STATEMENTS	3462:8	3465:8	10	
LEAF_NODE	3462:8	3462:8	11	{
STATEMENTS	3463:8	3464:8	11	
EXPR_STATEMENT	3463:8	3463:33	12	src_byte = bit_offset / 8 ;
EXPR	3463:8	3463:8	13	src_byte = bit_offset / 8
ASSIGN	3463:8	3463:19	14	src_byte = bit_offset / 8
LVAL	3463:8	3463:8	15	src_byte
FIELD	3463:8	3463:8	16	src_byte
LEAF_NODE	3463:8	3463:8	17	src_byte
ASSIGN_OP	3463:17	3463:17	15	=
LEAF_NODE	3463:17	3463:17	16	=
RVAL	3463:19	3463:32	15	bit_offset / 8
FIELD	3463:19	3463:19	16	bit_offset
LEAF_NODE	3463:19	3463:19	17	bit_offset
LEAF_NODE	3463:30	3463:30	16	/
FIELD	3463:32	3463:32	16	8
LEAF_NODE	3463:32	3463:32	17	8
LEAF_NODE	3463:33	3463:33	13	;
EXPR_STATEMENT	3464:8	3464:33	12	src_bit = bit_offset % 8 ;
EXPR	3464:8	3464:8	13	src_bit = bit_offset % 8
ASSIGN	3464:8	3464:19	14	src_bit = bit_offset % 8
LVAL	3464:8	3464:8	15	src_bit
FIELD	3464:8	3464:8	16	src_bit
LEAF_NODE	3464:8	3464:8	17	src_bit
ASSIGN_OP	3464:17	3464:17	15	=
LEAF_NODE	3464:17	3464:17	16	=
RVAL	3464:19	3464:32	15	bit_offset % 8
FIELD	3464:19	3464:19	16	bit_offset
LEAF_NODE	3464:19	3464:19	17	bit_offset
LEAF_NODE	3464:30	3464:30	16	%
FIELD	3464:32	3464:32	16	8
LEAF_NODE	3464:32	3464:32	17	8
LEAF_NODE	3464:33	3464:33	13	;
LEAF_NODE	3465:8	3465:8	11	}
SELECTION	3466:6	3467:8	9	
KEYWORD	3466:6	3466:6	10	else
LEAF_NODE	3466:6	3466:6	11	else
STATEMENTS	3467:8	3470:8	10	
LEAF_NODE	3467:8	3467:8	11	{
STATEMENTS	3468:8	3469:8	11	
EXPR_STATEMENT	3468:8	3468:52	12	src_byte = ( bit_offset + ( sindex * bps ) ) / 8 ;
EXPR	3468:8	3468:8	13	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
ASSIGN	3468:8	3468:19	14	src_byte = ( bit_offset + ( sindex * bps ) ) / 8
LVAL	3468:8	3468:8	15	src_byte
FIELD	3468:8	3468:8	16	src_byte
LEAF_NODE	3468:8	3468:8	17	src_byte
ASSIGN_OP	3468:17	3468:17	15	=
LEAF_NODE	3468:17	3468:17	16	=
RVAL	3468:19	3468:51	15	( bit_offset + ( sindex * bps ) ) / 8
LEAF_NODE	3468:19	3468:19	16	(
FIELD	3468:20	3468:20	16	bit_offset
LEAF_NODE	3468:20	3468:20	17	bit_offset
LEAF_NODE	3468:31	3468:31	16	+
LEAF_NODE	3468:33	3468:33	16	(
FIELD	3468:34	3468:34	16	sindex
LEAF_NODE	3468:34	3468:34	17	sindex
LEAF_NODE	3468:41	3468:41	16	*
FIELD	3468:43	3468:43	16	bps
LEAF_NODE	3468:43	3468:43	17	bps
LEAF_NODE	3468:46	3468:46	16	)
LEAF_NODE	3468:47	3468:47	16	)
LEAF_NODE	3468:49	3468:49	16	/
FIELD	3468:51	3468:51	16	8
LEAF_NODE	3468:51	3468:51	17	8
LEAF_NODE	3468:52	3468:52	13	;
EXPR_STATEMENT	3469:8	3469:52	12	src_bit = ( bit_offset + ( sindex * bps ) ) % 8 ;
EXPR	3469:8	3469:8	13	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
ASSIGN	3469:8	3469:19	14	src_bit = ( bit_offset + ( sindex * bps ) ) % 8
LVAL	3469:8	3469:8	15	src_bit
FIELD	3469:8	3469:8	16	src_bit
LEAF_NODE	3469:8	3469:8	17	src_bit
ASSIGN_OP	3469:17	3469:17	15	=
LEAF_NODE	3469:17	3469:17	16	=
RVAL	3469:19	3469:51	15	( bit_offset + ( sindex * bps ) ) % 8
LEAF_NODE	3469:19	3469:19	16	(
FIELD	3469:20	3469:20	16	bit_offset
LEAF_NODE	3469:20	3469:20	17	bit_offset
LEAF_NODE	3469:31	3469:31	16	+
LEAF_NODE	3469:33	3469:33	16	(
FIELD	3469:34	3469:34	16	sindex
LEAF_NODE	3469:34	3469:34	17	sindex
LEAF_NODE	3469:41	3469:41	16	*
FIELD	3469:43	3469:43	16	bps
LEAF_NODE	3469:43	3469:43	17	bps
LEAF_NODE	3469:46	3469:46	16	)
LEAF_NODE	3469:47	3469:47	16	)
LEAF_NODE	3469:49	3469:49	16	%
FIELD	3469:51	3469:51	16	8
LEAF_NODE	3469:51	3469:51	17	8
LEAF_NODE	3469:52	3469:52	13	;
LEAF_NODE	3470:8	3470:8	11	}
EXPR_STATEMENT	3472:6	3472:25	9	src = in + src_byte ;
EXPR	3472:6	3472:6	10	src = in + src_byte
ASSIGN	3472:6	3472:12	11	src = in + src_byte
LVAL	3472:6	3472:6	12	src
FIELD	3472:6	3472:6	13	src
LEAF_NODE	3472:6	3472:6	14	src
ASSIGN_OP	3472:10	3472:10	12	=
LEAF_NODE	3472:10	3472:10	13	=
RVAL	3472:12	3472:17	12	in + src_byte
FIELD	3472:12	3472:12	13	in
LEAF_NODE	3472:12	3472:12	14	in
LEAF_NODE	3472:15	3472:15	13	+
FIELD	3472:17	3472:17	13	src_byte
LEAF_NODE	3472:17	3472:17	14	src_byte
LEAF_NODE	3472:25	3472:25	10	;
EXPR_STATEMENT	3473:6	3473:50	9	matchbits = maskbits << ( 64 - src_bit - bps ) ;
EXPR	3473:6	3473:6	10	matchbits = maskbits << ( 64 - src_bit - bps )
ASSIGN	3473:6	3473:18	11	matchbits = maskbits << ( 64 - src_bit - bps )
LVAL	3473:6	3473:6	12	matchbits
FIELD	3473:6	3473:6	13	matchbits
LEAF_NODE	3473:6	3473:6	14	matchbits
ASSIGN_OP	3473:16	3473:16	12	=
LEAF_NODE	3473:16	3473:16	13	=
RVAL	3473:18	3473:49	12	maskbits << ( 64 - src_bit - bps )
FIELD	3473:18	3473:18	13	maskbits
LEAF_NODE	3473:18	3473:18	14	maskbits
LEAF_NODE	3473:27	3473:27	13	<<
LEAF_NODE	3473:30	3473:30	13	(
FIELD	3473:31	3473:31	13	64
LEAF_NODE	3473:31	3473:31	14	64
LEAF_NODE	3473:34	3473:34	13	-
FIELD	3473:36	3473:36	13	src_bit
LEAF_NODE	3473:36	3473:36	14	src_bit
LEAF_NODE	3473:44	3473:44	13	-
FIELD	3473:46	3473:46	13	bps
LEAF_NODE	3473:46	3473:46	14	bps
LEAF_NODE	3473:49	3473:49	13	)
LEAF_NODE	3473:50	3473:50	10	;
SELECTION	3474:6	3475:8	9	
KEYWORD	3474:6	3474:6	10	if
LEAF_NODE	3474:6	3474:6	11	if
LEAF_NODE	3474:9	3474:9	10	(
CONDITION	3474:10	3474:10	10	little_endian
EXPR	3474:10	3474:10	11	little_endian
FIELD	3474:10	3474:10	12	little_endian
LEAF_NODE	3474:10	3474:10	13	little_endian
LEAF_NODE	3474:23	3474:23	10	)
STATEMENTS	3475:8	3478:8	10	
LEAF_NODE	3475:8	3475:8	11	{
STATEMENTS	3476:1	3477:1	11	
EXPR_STATEMENT	3476:1	3476:69	12	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	3476:1	3476:1	13	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	3476:1	3476:13	14	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	3476:1	3476:1	15	longbuff1
FIELD	3476:1	3476:1	16	longbuff1
LEAF_NODE	3476:1	3476:1	17	longbuff1
ASSIGN_OP	3476:11	3476:11	15	=
LEAF_NODE	3476:11	3476:11	16	=
RVAL	3476:13	3476:13	15	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3476:13	3476:30	16	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3476:13	3476:26	17	( src [ 0 ] << 24 )
LEAF_NODE	3476:13	3476:13	18	(
FIELD	3476:14	3476:19	18	src [ 0 ]
LEAF_NODE	3476:14	3476:14	19	src
LEAF_NODE	3476:17	3476:17	19	[
EXPR	3476:18	3476:18	19	0
FIELD	3476:18	3476:18	20	0
LEAF_NODE	3476:18	3476:18	21	0
LEAF_NODE	3476:19	3476:19	19	]
LEAF_NODE	3476:21	3476:21	18	<<
FIELD	3476:24	3476:24	18	24
LEAF_NODE	3476:24	3476:24	19	24
LEAF_NODE	3476:26	3476:26	18	)
LEAF_NODE	3476:28	3476:28	17	|
BIT_OR_ELEM	3476:30	3476:30	17	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3476:30	3476:47	18	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3476:30	3476:43	19	( src [ 1 ] << 16 )
LEAF_NODE	3476:30	3476:30	20	(
FIELD	3476:31	3476:36	20	src [ 1 ]
LEAF_NODE	3476:31	3476:31	21	src
LEAF_NODE	3476:34	3476:34	21	[
EXPR	3476:35	3476:35	21	1
FIELD	3476:35	3476:35	22	1
LEAF_NODE	3476:35	3476:35	23	1
LEAF_NODE	3476:36	3476:36	21	]
LEAF_NODE	3476:38	3476:38	20	<<
FIELD	3476:41	3476:41	20	16
LEAF_NODE	3476:41	3476:41	21	16
LEAF_NODE	3476:43	3476:43	20	)
LEAF_NODE	3476:45	3476:45	19	|
BIT_OR_ELEM	3476:47	3476:47	19	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	3476:47	3476:63	20	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	3476:47	3476:59	21	( src [ 2 ] << 8 )
LEAF_NODE	3476:47	3476:47	22	(
FIELD	3476:48	3476:53	22	src [ 2 ]
LEAF_NODE	3476:48	3476:48	23	src
LEAF_NODE	3476:51	3476:51	23	[
EXPR	3476:52	3476:52	23	2
FIELD	3476:52	3476:52	24	2
LEAF_NODE	3476:52	3476:52	25	2
LEAF_NODE	3476:53	3476:53	23	]
LEAF_NODE	3476:55	3476:55	22	<<
FIELD	3476:58	3476:58	22	8
LEAF_NODE	3476:58	3476:58	23	8
LEAF_NODE	3476:59	3476:59	22	)
LEAF_NODE	3476:61	3476:61	21	|
BIT_OR_ELEM	3476:63	3476:63	21	src [ 3 ]
FIELD	3476:63	3476:68	22	src [ 3 ]
LEAF_NODE	3476:63	3476:63	23	src
LEAF_NODE	3476:66	3476:66	23	[
EXPR	3476:67	3476:67	23	3
FIELD	3476:67	3476:67	24	3
LEAF_NODE	3476:67	3476:67	25	3
LEAF_NODE	3476:68	3476:68	23	]
LEAF_NODE	3476:69	3476:69	13	;
EXPR_STATEMENT	3477:1	3477:22	12	longbuff2 = longbuff1 ;
EXPR	3477:1	3477:1	13	longbuff2 = longbuff1
ASSIGN	3477:1	3477:13	14	longbuff2 = longbuff1
LVAL	3477:1	3477:1	15	longbuff2
FIELD	3477:1	3477:1	16	longbuff2
LEAF_NODE	3477:1	3477:1	17	longbuff2
ASSIGN_OP	3477:11	3477:11	15	=
LEAF_NODE	3477:11	3477:11	16	=
RVAL	3477:13	3477:13	15	longbuff1
FIELD	3477:13	3477:13	16	longbuff1
LEAF_NODE	3477:13	3477:13	17	longbuff1
LEAF_NODE	3477:22	3477:22	13	;
LEAF_NODE	3478:8	3478:8	11	}
SELECTION	3479:6	3480:8	9	
KEYWORD	3479:6	3479:6	10	else
LEAF_NODE	3479:6	3479:6	11	else
STATEMENTS	3480:8	3483:1	10	
LEAF_NODE	3480:8	3480:8	11	{
STATEMENTS	3481:1	3482:1	11	
EXPR_STATEMENT	3481:1	3481:69	12	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	3481:1	3481:1	13	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	3481:1	3481:13	14	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	3481:1	3481:1	15	longbuff1
FIELD	3481:1	3481:1	16	longbuff1
LEAF_NODE	3481:1	3481:1	17	longbuff1
ASSIGN_OP	3481:11	3481:11	15	=
LEAF_NODE	3481:11	3481:11	16	=
RVAL	3481:13	3481:13	15	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3481:13	3481:30	16	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3481:13	3481:26	17	( src [ 3 ] << 24 )
LEAF_NODE	3481:13	3481:13	18	(
FIELD	3481:14	3481:19	18	src [ 3 ]
LEAF_NODE	3481:14	3481:14	19	src
LEAF_NODE	3481:17	3481:17	19	[
EXPR	3481:18	3481:18	19	3
FIELD	3481:18	3481:18	20	3
LEAF_NODE	3481:18	3481:18	21	3
LEAF_NODE	3481:19	3481:19	19	]
LEAF_NODE	3481:21	3481:21	18	<<
FIELD	3481:24	3481:24	18	24
LEAF_NODE	3481:24	3481:24	19	24
LEAF_NODE	3481:26	3481:26	18	)
LEAF_NODE	3481:28	3481:28	17	|
BIT_OR_ELEM	3481:30	3481:30	17	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3481:30	3481:47	18	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3481:30	3481:43	19	( src [ 2 ] << 16 )
LEAF_NODE	3481:30	3481:30	20	(
FIELD	3481:31	3481:36	20	src [ 2 ]
LEAF_NODE	3481:31	3481:31	21	src
LEAF_NODE	3481:34	3481:34	21	[
EXPR	3481:35	3481:35	21	2
FIELD	3481:35	3481:35	22	2
LEAF_NODE	3481:35	3481:35	23	2
LEAF_NODE	3481:36	3481:36	21	]
LEAF_NODE	3481:38	3481:38	20	<<
FIELD	3481:41	3481:41	20	16
LEAF_NODE	3481:41	3481:41	21	16
LEAF_NODE	3481:43	3481:43	20	)
LEAF_NODE	3481:45	3481:45	19	|
BIT_OR_ELEM	3481:47	3481:47	19	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3481:47	3481:63	20	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3481:47	3481:59	21	( src [ 1 ] << 8 )
LEAF_NODE	3481:47	3481:47	22	(
FIELD	3481:48	3481:53	22	src [ 1 ]
LEAF_NODE	3481:48	3481:48	23	src
LEAF_NODE	3481:51	3481:51	23	[
EXPR	3481:52	3481:52	23	1
FIELD	3481:52	3481:52	24	1
LEAF_NODE	3481:52	3481:52	25	1
LEAF_NODE	3481:53	3481:53	23	]
LEAF_NODE	3481:55	3481:55	22	<<
FIELD	3481:58	3481:58	22	8
LEAF_NODE	3481:58	3481:58	23	8
LEAF_NODE	3481:59	3481:59	22	)
LEAF_NODE	3481:61	3481:61	21	|
BIT_OR_ELEM	3481:63	3481:63	21	src [ 0 ]
FIELD	3481:63	3481:68	22	src [ 0 ]
LEAF_NODE	3481:63	3481:63	23	src
LEAF_NODE	3481:66	3481:66	23	[
EXPR	3481:67	3481:67	23	0
FIELD	3481:67	3481:67	24	0
LEAF_NODE	3481:67	3481:67	25	0
LEAF_NODE	3481:68	3481:68	23	]
LEAF_NODE	3481:69	3481:69	13	;
EXPR_STATEMENT	3482:1	3482:22	12	longbuff2 = longbuff1 ;
EXPR	3482:1	3482:1	13	longbuff2 = longbuff1
ASSIGN	3482:1	3482:13	14	longbuff2 = longbuff1
LVAL	3482:1	3482:1	15	longbuff2
FIELD	3482:1	3482:1	16	longbuff2
LEAF_NODE	3482:1	3482:1	17	longbuff2
ASSIGN_OP	3482:11	3482:11	15	=
LEAF_NODE	3482:11	3482:11	16	=
RVAL	3482:13	3482:13	15	longbuff1
FIELD	3482:13	3482:13	16	longbuff1
LEAF_NODE	3482:13	3482:13	17	longbuff1
LEAF_NODE	3482:22	3482:22	13	;
LEAF_NODE	3483:1	3483:1	11	}
EXPR_STATEMENT	3485:6	3485:51	9	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2 ;
EXPR	3485:6	3485:6	10	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
ASSIGN	3485:6	3485:14	11	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
LVAL	3485:6	3485:6	12	buff3
FIELD	3485:6	3485:6	13	buff3
LEAF_NODE	3485:6	3485:6	14	buff3
ASSIGN_OP	3485:12	3485:12	12	=
LEAF_NODE	3485:12	3485:12	13	=
RVAL	3485:14	3485:14	12	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR	3485:14	3485:42	13	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR_ELEM	3485:14	3485:38	14	( ( uint64 ) longbuff1 << 32 )
LEAF_NODE	3485:14	3485:14	15	(
LEAF_NODE	3485:15	3485:15	15	(
TYPE_NAME	3485:16	3485:16	15	uint64
LEAF_NODE	3485:16	3485:16	16	uint64
LEAF_NODE	3485:22	3485:22	15	)
FIELD	3485:23	3485:23	15	longbuff1
LEAF_NODE	3485:23	3485:23	16	longbuff1
LEAF_NODE	3485:33	3485:33	15	<<
FIELD	3485:36	3485:36	15	32
LEAF_NODE	3485:36	3485:36	16	32
LEAF_NODE	3485:38	3485:38	15	)
LEAF_NODE	3485:40	3485:40	14	|
BIT_OR_ELEM	3485:42	3485:42	14	longbuff2
FIELD	3485:42	3485:42	15	longbuff2
LEAF_NODE	3485:42	3485:42	16	longbuff2
LEAF_NODE	3485:51	3485:51	10	;
SELECTION	3486:6	3487:8	9	
KEYWORD	3486:6	3486:6	10	if
LEAF_NODE	3486:6	3486:6	11	if
LEAF_NODE	3486:9	3486:9	10	(
CONDITION	3486:10	3486:10	10	( col == start ) && ( sindex == sample )
EXPR	3486:10	3486:10	11	( col == start ) && ( sindex == sample )
AND	3486:10	3486:28	12	( col == start ) && ( sindex == sample )
EXPR	3486:10	3486:23	13	( col == start )
LEAF_NODE	3486:10	3486:10	14	(
FIELD	3486:11	3486:11	14	col
LEAF_NODE	3486:11	3486:11	15	col
EQ_OPERATOR	3486:15	3486:15	14	==
LEAF_NODE	3486:15	3486:15	15	==
FIELD	3486:18	3486:18	14	start
LEAF_NODE	3486:18	3486:18	15	start
LEAF_NODE	3486:23	3486:23	14	)
LEAF_NODE	3486:25	3486:25	13	&&
EXPR	3486:28	3486:45	13	( sindex == sample )
LEAF_NODE	3486:28	3486:28	14	(
FIELD	3486:29	3486:29	14	sindex
LEAF_NODE	3486:29	3486:29	15	sindex
EQ_OPERATOR	3486:36	3486:36	14	==
LEAF_NODE	3486:36	3486:36	15	==
FIELD	3486:39	3486:39	14	sample
LEAF_NODE	3486:39	3486:39	15	sample
LEAF_NODE	3486:45	3486:45	14	)
LEAF_NODE	3486:46	3486:46	10	)
STATEMENTS	3487:8	3487:8	10	
EXPR_STATEMENT	3487:8	3487:52	11	buff2 = buff3 & ( ( uint64 ) - 1 ) << ( 32 - shift ) ;
EXPR	3487:8	3487:8	12	buff2 = buff3 & ( ( uint64 ) - 1 ) << ( 32 - shift )
ASSIGN	3487:8	3487:16	13	buff2 = buff3 & ( ( uint64 ) - 1 ) << ( 32 - shift )
LVAL	3487:8	3487:8	14	buff2
FIELD	3487:8	3487:8	15	buff2
LEAF_NODE	3487:8	3487:8	16	buff2
ASSIGN_OP	3487:14	3487:14	14	=
LEAF_NODE	3487:14	3487:14	15	=
RVAL	3487:16	3487:51	14	buff3 & ( ( uint64 ) - 1 ) << ( 32 - shift )
FIELD	3487:16	3487:16	15	buff3
LEAF_NODE	3487:16	3487:16	16	buff3
LEAF_NODE	3487:22	3487:22	15	&
LEAF_NODE	3487:24	3487:24	15	(
LEAF_NODE	3487:25	3487:25	15	(
TYPE_NAME	3487:26	3487:26	15	uint64
LEAF_NODE	3487:26	3487:26	16	uint64
LEAF_NODE	3487:32	3487:32	15	)
UNARY_EXPR	3487:33	3487:34	15	- 1
UNARY_OPERATOR	3487:33	3487:33	16	-
LEAF_NODE	3487:33	3487:33	17	-
FIELD	3487:34	3487:34	16	1
LEAF_NODE	3487:34	3487:34	17	1
LEAF_NODE	3487:35	3487:35	15	)
LEAF_NODE	3487:37	3487:37	15	<<
LEAF_NODE	3487:40	3487:40	15	(
FIELD	3487:41	3487:41	15	32
LEAF_NODE	3487:41	3487:41	16	32
LEAF_NODE	3487:44	3487:44	15	-
FIELD	3487:46	3487:46	15	shift
LEAF_NODE	3487:46	3487:46	16	shift
LEAF_NODE	3487:51	3487:51	15	)
LEAF_NODE	3487:52	3487:52	12	;
LEAF_NODE	3489:6	3489:6	9	buff1
LEAF_NODE	3489:12	3489:12	9	=
LEAF_NODE	3489:14	3489:14	9	(
LEAF_NODE	3489:15	3489:15	9	buff3
LEAF_NODE	3489:21	3489:21	9	&
LEAF_NODE	3489:23	3489:23	9	matchbits
LEAF_NODE	3489:32	3489:32	9	)
LEAF_NODE	3489:34	3489:34	9	<<
LEAF_NODE	3489:37	3489:37	9	(
LEAF_NODE	3489:38	3489:38	9	src_bit
LEAF_NODE	3489:45	3489:45	9	)
LEAF_NODE	3489:46	3489:46	9	;
SELECTION	3491:6	3492:8	9	
KEYWORD	3491:6	3491:6	10	if
LEAF_NODE	3491:6	3491:6	11	if
LEAF_NODE	3491:9	3491:9	10	(
CONDITION	3491:10	3491:10	10	ready_bits < 32
EXPR	3491:10	3491:23	11	ready_bits < 32
FIELD	3491:10	3491:10	12	ready_bits
LEAF_NODE	3491:10	3491:10	13	ready_bits
REL_OPERATOR	3491:21	3491:21	12	<
LEAF_NODE	3491:21	3491:21	13	<
FIELD	3491:23	3491:23	12	32
LEAF_NODE	3491:23	3491:23	13	32
LEAF_NODE	3491:25	3491:25	10	)
STATEMENTS	3492:8	3495:8	10	
LEAF_NODE	3492:8	3492:8	11	{
STATEMENTS	3493:8	3494:8	11	
EXPR_STATEMENT	3493:8	3493:57	12	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0 ;
EXPR	3493:8	3493:8	13	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	3493:8	3493:20	14	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	3493:8	3493:8	15	bytebuff1
FIELD	3493:8	3493:8	16	bytebuff1
LEAF_NODE	3493:8	3493:8	17	bytebuff1
ASSIGN_OP	3493:18	3493:18	15	=
LEAF_NODE	3493:18	3493:18	16	=
RVAL	3493:20	3493:20	15	bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	3493:20	3493:32	16	bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	3493:20	3493:20	17	bytebuff2
FIELD	3493:20	3493:20	18	bytebuff2
LEAF_NODE	3493:20	3493:20	19	bytebuff2
ASSIGN_OP	3493:30	3493:30	17	=
LEAF_NODE	3493:30	3493:30	18	=
RVAL	3493:32	3493:32	17	bytebuff3 = bytebuff4 = 0
ASSIGN	3493:32	3493:44	18	bytebuff3 = bytebuff4 = 0
LVAL	3493:32	3493:32	19	bytebuff3
FIELD	3493:32	3493:32	20	bytebuff3
LEAF_NODE	3493:32	3493:32	21	bytebuff3
ASSIGN_OP	3493:42	3493:42	19	=
LEAF_NODE	3493:42	3493:42	20	=
RVAL	3493:44	3493:44	19	bytebuff4 = 0
ASSIGN	3493:44	3493:56	20	bytebuff4 = 0
LVAL	3493:44	3493:44	21	bytebuff4
FIELD	3493:44	3493:44	22	bytebuff4
LEAF_NODE	3493:44	3493:44	23	bytebuff4
ASSIGN_OP	3493:54	3493:54	21	=
LEAF_NODE	3493:54	3493:54	22	=
RVAL	3493:56	3493:56	21	0
FIELD	3493:56	3493:56	22	0
LEAF_NODE	3493:56	3493:56	23	0
LEAF_NODE	3493:57	3493:57	13	;
EXPR_STATEMENT	3494:8	3494:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	3494:8	3494:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	3494:8	3494:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	3494:8	3494:8	15	buff2
FIELD	3494:8	3494:8	16	buff2
LEAF_NODE	3494:8	3494:8	17	buff2
ASSIGN_OP	3494:14	3494:14	15	=
LEAF_NODE	3494:14	3494:14	16	=
RVAL	3494:16	3494:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	3494:16	3494:16	16	(
BIT_OR	3494:17	3494:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3494:17	3494:17	17	buff2
FIELD	3494:17	3494:17	18	buff2
LEAF_NODE	3494:17	3494:17	19	buff2
LEAF_NODE	3494:23	3494:23	17	|
BIT_OR_ELEM	3494:25	3494:45	17	( buff1 >> ready_bits )
LEAF_NODE	3494:25	3494:25	18	(
FIELD	3494:26	3494:26	18	buff1
LEAF_NODE	3494:26	3494:26	19	buff1
LEAF_NODE	3494:32	3494:32	18	>>
FIELD	3494:35	3494:35	18	ready_bits
LEAF_NODE	3494:35	3494:35	19	ready_bits
LEAF_NODE	3494:45	3494:45	18	)
LEAF_NODE	3494:46	3494:46	16	)
LEAF_NODE	3494:47	3494:47	13	;
LEAF_NODE	3495:8	3495:8	11	}
SELECTION	3496:6	3497:8	9	
KEYWORD	3496:6	3496:6	10	else
LEAF_NODE	3496:6	3496:6	11	else
STATEMENTS	3497:8	3510:8	10	
LEAF_NODE	3497:8	3497:8	11	{
STATEMENTS	3498:8	3509:8	11	
EXPR_STATEMENT	3498:8	3498:33	12	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	3498:8	3498:8	13	bytebuff1 = ( buff2 >> 56 )
ASSIGN	3498:8	3498:20	14	bytebuff1 = ( buff2 >> 56 )
LVAL	3498:8	3498:8	15	bytebuff1
FIELD	3498:8	3498:8	16	bytebuff1
LEAF_NODE	3498:8	3498:8	17	bytebuff1
ASSIGN_OP	3498:18	3498:18	15	=
LEAF_NODE	3498:18	3498:18	16	=
RVAL	3498:20	3498:32	15	( buff2 >> 56 )
LEAF_NODE	3498:20	3498:20	16	(
FIELD	3498:21	3498:21	16	buff2
LEAF_NODE	3498:21	3498:21	17	buff2
LEAF_NODE	3498:27	3498:27	16	>>
FIELD	3498:30	3498:30	16	56
LEAF_NODE	3498:30	3498:30	17	56
LEAF_NODE	3498:32	3498:32	16	)
LEAF_NODE	3498:33	3498:33	13	;
EXPR_STATEMENT	3499:8	3499:26	12	* dst ++ = bytebuff1 ;
EXPR	3499:8	3499:8	13	* dst ++ = bytebuff1
ASSIGN	3499:8	3499:17	14	* dst ++ = bytebuff1
LVAL	3499:8	3499:8	15	* dst ++
UNARY_EXPR	3499:8	3499:9	16	* dst ++
UNARY_OPERATOR	3499:8	3499:8	17	*
LEAF_NODE	3499:8	3499:8	18	*
FIELD	3499:9	3499:12	17	dst ++
LEAF_NODE	3499:9	3499:9	18	dst
LEAF_NODE	3499:12	3499:12	18	++
ASSIGN_OP	3499:15	3499:15	15	=
LEAF_NODE	3499:15	3499:15	16	=
RVAL	3499:17	3499:17	15	bytebuff1
FIELD	3499:17	3499:17	16	bytebuff1
LEAF_NODE	3499:17	3499:17	17	bytebuff1
LEAF_NODE	3499:26	3499:26	13	;
EXPR_STATEMENT	3500:8	3500:33	12	bytebuff2 = ( buff2 >> 48 ) ;
EXPR	3500:8	3500:8	13	bytebuff2 = ( buff2 >> 48 )
ASSIGN	3500:8	3500:20	14	bytebuff2 = ( buff2 >> 48 )
LVAL	3500:8	3500:8	15	bytebuff2
FIELD	3500:8	3500:8	16	bytebuff2
LEAF_NODE	3500:8	3500:8	17	bytebuff2
ASSIGN_OP	3500:18	3500:18	15	=
LEAF_NODE	3500:18	3500:18	16	=
RVAL	3500:20	3500:32	15	( buff2 >> 48 )
LEAF_NODE	3500:20	3500:20	16	(
FIELD	3500:21	3500:21	16	buff2
LEAF_NODE	3500:21	3500:21	17	buff2
LEAF_NODE	3500:27	3500:27	16	>>
FIELD	3500:30	3500:30	16	48
LEAF_NODE	3500:30	3500:30	17	48
LEAF_NODE	3500:32	3500:32	16	)
LEAF_NODE	3500:33	3500:33	13	;
EXPR_STATEMENT	3501:8	3501:26	12	* dst ++ = bytebuff2 ;
EXPR	3501:8	3501:8	13	* dst ++ = bytebuff2
ASSIGN	3501:8	3501:17	14	* dst ++ = bytebuff2
LVAL	3501:8	3501:8	15	* dst ++
UNARY_EXPR	3501:8	3501:9	16	* dst ++
UNARY_OPERATOR	3501:8	3501:8	17	*
LEAF_NODE	3501:8	3501:8	18	*
FIELD	3501:9	3501:12	17	dst ++
LEAF_NODE	3501:9	3501:9	18	dst
LEAF_NODE	3501:12	3501:12	18	++
ASSIGN_OP	3501:15	3501:15	15	=
LEAF_NODE	3501:15	3501:15	16	=
RVAL	3501:17	3501:17	15	bytebuff2
FIELD	3501:17	3501:17	16	bytebuff2
LEAF_NODE	3501:17	3501:17	17	bytebuff2
LEAF_NODE	3501:26	3501:26	13	;
EXPR_STATEMENT	3502:8	3502:33	12	bytebuff3 = ( buff2 >> 40 ) ;
EXPR	3502:8	3502:8	13	bytebuff3 = ( buff2 >> 40 )
ASSIGN	3502:8	3502:20	14	bytebuff3 = ( buff2 >> 40 )
LVAL	3502:8	3502:8	15	bytebuff3
FIELD	3502:8	3502:8	16	bytebuff3
LEAF_NODE	3502:8	3502:8	17	bytebuff3
ASSIGN_OP	3502:18	3502:18	15	=
LEAF_NODE	3502:18	3502:18	16	=
RVAL	3502:20	3502:32	15	( buff2 >> 40 )
LEAF_NODE	3502:20	3502:20	16	(
FIELD	3502:21	3502:21	16	buff2
LEAF_NODE	3502:21	3502:21	17	buff2
LEAF_NODE	3502:27	3502:27	16	>>
FIELD	3502:30	3502:30	16	40
LEAF_NODE	3502:30	3502:30	17	40
LEAF_NODE	3502:32	3502:32	16	)
LEAF_NODE	3502:33	3502:33	13	;
EXPR_STATEMENT	3503:8	3503:26	12	* dst ++ = bytebuff3 ;
EXPR	3503:8	3503:8	13	* dst ++ = bytebuff3
ASSIGN	3503:8	3503:17	14	* dst ++ = bytebuff3
LVAL	3503:8	3503:8	15	* dst ++
UNARY_EXPR	3503:8	3503:9	16	* dst ++
UNARY_OPERATOR	3503:8	3503:8	17	*
LEAF_NODE	3503:8	3503:8	18	*
FIELD	3503:9	3503:12	17	dst ++
LEAF_NODE	3503:9	3503:9	18	dst
LEAF_NODE	3503:12	3503:12	18	++
ASSIGN_OP	3503:15	3503:15	15	=
LEAF_NODE	3503:15	3503:15	16	=
RVAL	3503:17	3503:17	15	bytebuff3
FIELD	3503:17	3503:17	16	bytebuff3
LEAF_NODE	3503:17	3503:17	17	bytebuff3
LEAF_NODE	3503:26	3503:26	13	;
EXPR_STATEMENT	3504:8	3504:33	12	bytebuff4 = ( buff2 >> 32 ) ;
EXPR	3504:8	3504:8	13	bytebuff4 = ( buff2 >> 32 )
ASSIGN	3504:8	3504:20	14	bytebuff4 = ( buff2 >> 32 )
LVAL	3504:8	3504:8	15	bytebuff4
FIELD	3504:8	3504:8	16	bytebuff4
LEAF_NODE	3504:8	3504:8	17	bytebuff4
ASSIGN_OP	3504:18	3504:18	15	=
LEAF_NODE	3504:18	3504:18	16	=
RVAL	3504:20	3504:32	15	( buff2 >> 32 )
LEAF_NODE	3504:20	3504:20	16	(
FIELD	3504:21	3504:21	16	buff2
LEAF_NODE	3504:21	3504:21	17	buff2
LEAF_NODE	3504:27	3504:27	16	>>
FIELD	3504:30	3504:30	16	32
LEAF_NODE	3504:30	3504:30	17	32
LEAF_NODE	3504:32	3504:32	16	)
LEAF_NODE	3504:33	3504:33	13	;
EXPR_STATEMENT	3505:8	3505:26	12	* dst ++ = bytebuff4 ;
EXPR	3505:8	3505:8	13	* dst ++ = bytebuff4
ASSIGN	3505:8	3505:17	14	* dst ++ = bytebuff4
LVAL	3505:8	3505:8	15	* dst ++
UNARY_EXPR	3505:8	3505:9	16	* dst ++
UNARY_OPERATOR	3505:8	3505:8	17	*
LEAF_NODE	3505:8	3505:8	18	*
FIELD	3505:9	3505:12	17	dst ++
LEAF_NODE	3505:9	3505:9	18	dst
LEAF_NODE	3505:12	3505:12	18	++
ASSIGN_OP	3505:15	3505:15	15	=
LEAF_NODE	3505:15	3505:15	16	=
RVAL	3505:17	3505:17	15	bytebuff4
FIELD	3505:17	3505:17	16	bytebuff4
LEAF_NODE	3505:17	3505:17	17	bytebuff4
LEAF_NODE	3505:26	3505:26	13	;
EXPR_STATEMENT	3506:8	3506:24	12	ready_bits -= 32 ;
EXPR	3506:8	3506:8	13	ready_bits -= 32
ASSIGN	3506:8	3506:22	14	ready_bits -= 32
LVAL	3506:8	3506:8	15	ready_bits
FIELD	3506:8	3506:8	16	ready_bits
LEAF_NODE	3506:8	3506:8	17	ready_bits
ASSIGN_OP	3506:19	3506:19	15	-=
LEAF_NODE	3506:19	3506:19	16	-=
RVAL	3506:22	3506:22	15	32
FIELD	3506:22	3506:22	16	32
LEAF_NODE	3506:22	3506:22	17	32
LEAF_NODE	3506:24	3506:24	13	;
EXPR_STATEMENT	3509:8	3509:55	12	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) ) ;
EXPR	3509:8	3509:8	13	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
ASSIGN	3509:8	3509:16	14	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LVAL	3509:8	3509:8	15	buff2
FIELD	3509:8	3509:8	16	buff2
LEAF_NODE	3509:8	3509:8	17	buff2
ASSIGN_OP	3509:14	3509:14	15	=
LEAF_NODE	3509:14	3509:14	16	=
RVAL	3509:16	3509:54	15	( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	3509:16	3509:16	16	(
BIT_OR	3509:17	3509:33	16	( buff2 << 32 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	3509:17	3509:29	17	( buff2 << 32 )
LEAF_NODE	3509:17	3509:17	18	(
FIELD	3509:18	3509:18	18	buff2
LEAF_NODE	3509:18	3509:18	19	buff2
LEAF_NODE	3509:24	3509:24	18	<<
FIELD	3509:27	3509:27	18	32
LEAF_NODE	3509:27	3509:27	19	32
LEAF_NODE	3509:29	3509:29	18	)
LEAF_NODE	3509:31	3509:31	17	|
BIT_OR_ELEM	3509:33	3509:53	17	( buff1 >> ready_bits )
LEAF_NODE	3509:33	3509:33	18	(
FIELD	3509:34	3509:34	18	buff1
LEAF_NODE	3509:34	3509:34	19	buff1
LEAF_NODE	3509:40	3509:40	18	>>
FIELD	3509:43	3509:43	18	ready_bits
LEAF_NODE	3509:43	3509:43	19	ready_bits
LEAF_NODE	3509:53	3509:53	18	)
LEAF_NODE	3509:54	3509:54	16	)
LEAF_NODE	3509:55	3509:55	13	;
LEAF_NODE	3510:8	3510:8	11	}
EXPR_STATEMENT	3511:6	3511:23	9	ready_bits += bps ;
EXPR	3511:6	3511:6	10	ready_bits += bps
ASSIGN	3511:6	3511:20	11	ready_bits += bps
LVAL	3511:6	3511:6	12	ready_bits
FIELD	3511:6	3511:6	13	ready_bits
LEAF_NODE	3511:6	3511:6	14	ready_bits
ASSIGN_OP	3511:17	3511:17	12	+=
LEAF_NODE	3511:17	3511:17	13	+=
RVAL	3511:20	3511:20	12	bps
FIELD	3511:20	3511:20	13	bps
LEAF_NODE	3511:20	3511:20	14	bps
LEAF_NODE	3511:23	3511:23	10	;
LEAF_NODE	3512:6	3512:6	8	}
LEAF_NODE	3513:4	3513:4	5	}
ITERATION	3514:2	3515:4	3	
KEYWORD	3514:2	3514:2	4	while
LEAF_NODE	3514:2	3514:2	5	while
LEAF_NODE	3514:8	3514:8	4	(
CONDITION	3514:9	3514:9	4	ready_bits > 0
EXPR	3514:9	3514:22	5	ready_bits > 0
FIELD	3514:9	3514:9	6	ready_bits
LEAF_NODE	3514:9	3514:9	7	ready_bits
REL_OPERATOR	3514:20	3514:20	6	>
LEAF_NODE	3514:20	3514:20	7	>
FIELD	3514:22	3514:22	6	0
LEAF_NODE	3514:22	3514:22	7	0
LEAF_NODE	3514:23	3514:23	4	)
STATEMENTS	3515:4	3520:4	4	
LEAF_NODE	3515:4	3515:4	5	{
STATEMENTS	3516:4	3519:4	5	
EXPR_STATEMENT	3516:4	3516:29	6	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	3516:4	3516:4	7	bytebuff1 = ( buff2 >> 56 )
ASSIGN	3516:4	3516:16	8	bytebuff1 = ( buff2 >> 56 )
LVAL	3516:4	3516:4	9	bytebuff1
FIELD	3516:4	3516:4	10	bytebuff1
LEAF_NODE	3516:4	3516:4	11	bytebuff1
ASSIGN_OP	3516:14	3516:14	9	=
LEAF_NODE	3516:14	3516:14	10	=
RVAL	3516:16	3516:28	9	( buff2 >> 56 )
LEAF_NODE	3516:16	3516:16	10	(
FIELD	3516:17	3516:17	10	buff2
LEAF_NODE	3516:17	3516:17	11	buff2
LEAF_NODE	3516:23	3516:23	10	>>
FIELD	3516:26	3516:26	10	56
LEAF_NODE	3516:26	3516:26	11	56
LEAF_NODE	3516:28	3516:28	10	)
LEAF_NODE	3516:29	3516:29	7	;
EXPR_STATEMENT	3517:4	3517:22	6	* dst ++ = bytebuff1 ;
EXPR	3517:4	3517:4	7	* dst ++ = bytebuff1
ASSIGN	3517:4	3517:13	8	* dst ++ = bytebuff1
LVAL	3517:4	3517:4	9	* dst ++
UNARY_EXPR	3517:4	3517:5	10	* dst ++
UNARY_OPERATOR	3517:4	3517:4	11	*
LEAF_NODE	3517:4	3517:4	12	*
FIELD	3517:5	3517:8	11	dst ++
LEAF_NODE	3517:5	3517:5	12	dst
LEAF_NODE	3517:8	3517:8	12	++
ASSIGN_OP	3517:11	3517:11	9	=
LEAF_NODE	3517:11	3517:11	10	=
RVAL	3517:13	3517:13	9	bytebuff1
FIELD	3517:13	3517:13	10	bytebuff1
LEAF_NODE	3517:13	3517:13	11	bytebuff1
LEAF_NODE	3517:22	3517:22	7	;
EXPR_STATEMENT	3518:4	3518:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	3518:4	3518:4	7	buff2 = ( buff2 << 8 )
ASSIGN	3518:4	3518:12	8	buff2 = ( buff2 << 8 )
LVAL	3518:4	3518:4	9	buff2
FIELD	3518:4	3518:4	10	buff2
LEAF_NODE	3518:4	3518:4	11	buff2
ASSIGN_OP	3518:10	3518:10	9	=
LEAF_NODE	3518:10	3518:10	10	=
RVAL	3518:12	3518:23	9	( buff2 << 8 )
LEAF_NODE	3518:12	3518:12	10	(
FIELD	3518:13	3518:13	10	buff2
LEAF_NODE	3518:13	3518:13	11	buff2
LEAF_NODE	3518:19	3518:19	10	<<
FIELD	3518:22	3518:22	10	8
LEAF_NODE	3518:22	3518:22	11	8
LEAF_NODE	3518:23	3518:23	10	)
LEAF_NODE	3518:24	3518:24	7	;
EXPR_STATEMENT	3519:4	3519:19	6	ready_bits -= 8 ;
EXPR	3519:4	3519:4	7	ready_bits -= 8
ASSIGN	3519:4	3519:18	8	ready_bits -= 8
LVAL	3519:4	3519:4	9	ready_bits
FIELD	3519:4	3519:4	10	ready_bits
LEAF_NODE	3519:4	3519:4	11	ready_bits
ASSIGN_OP	3519:15	3519:15	9	-=
LEAF_NODE	3519:15	3519:15	10	-=
RVAL	3519:18	3519:18	9	8
FIELD	3519:18	3519:18	10	8
LEAF_NODE	3519:18	3519:18	11	8
LEAF_NODE	3519:19	3519:19	7	;
LEAF_NODE	3520:4	3520:4	5	}
JUMP_STATEMENT	3522:2	3522:12	3	return ( 0 ) ;
KEYWORD	3522:2	3522:2	4	return
LEAF_NODE	3522:2	3522:2	5	return
DESTINATION	3522:9	3522:9	4	( 0 )
EXPR	3522:9	3522:11	5	( 0 )
LEAF_NODE	3522:9	3522:9	6	(
FIELD	3522:10	3522:10	6	0
LEAF_NODE	3522:10	3522:10	7	0
LEAF_NODE	3522:11	3522:11	6	)
LEAF_NODE	3522:12	3522:12	4	;
LEAF_NODE	3523:2	3523:2	2	}
FUNCTION_DEF	3525:0	3599:2	1	
RETURN_TYPE	3525:0	3525:7	2	static int
LEAF_NODE	3525:0	3525:0	3	static
TYPE_NAME	3525:7	3525:7	3	int
LEAF_NODE	3525:7	3525:7	4	int
FUNCTION_NAME	3526:0	3526:0	2	extractContigSamplesToBuffer
LEAF_NODE	3526:0	3526:0	3	extractContigSamplesToBuffer
PARAMETER_LIST	3526:28	3528:51	2	( uint8 * out , uint8 * in , uint32 rows , uint32 cols , tsample_t sample , uint16 spp , uint16 bps , struct dump_opts * dump )
LEAF_NODE	3526:28	3526:28	3	(
PARAMETER_DECL	3526:29	3526:36	3	uint8 * out
TYPE	3526:29	3526:35	4	uint8 *
TYPE_NAME	3526:29	3526:29	5	uint8
LEAF_NODE	3526:29	3526:29	6	uint8
POINTER	3526:35	3526:35	5	*
LEAF_NODE	3526:35	3526:35	6	*
NAME	3526:36	3526:36	4	out
LEAF_NODE	3526:36	3526:36	5	out
LEAF_NODE	3526:39	3526:39	3	,
PARAMETER_DECL	3526:41	3526:48	3	uint8 * in
TYPE	3526:41	3526:47	4	uint8 *
TYPE_NAME	3526:41	3526:41	5	uint8
LEAF_NODE	3526:41	3526:41	6	uint8
POINTER	3526:47	3526:47	5	*
LEAF_NODE	3526:47	3526:47	6	*
NAME	3526:48	3526:48	4	in
LEAF_NODE	3526:48	3526:48	5	in
LEAF_NODE	3526:50	3526:50	3	,
PARAMETER_DECL	3526:52	3526:59	3	uint32 rows
TYPE	3526:52	3526:52	4	uint32
TYPE_NAME	3526:52	3526:52	5	uint32
LEAF_NODE	3526:52	3526:52	6	uint32
NAME	3526:59	3526:59	4	rows
LEAF_NODE	3526:59	3526:59	5	rows
LEAF_NODE	3526:63	3526:63	3	,
PARAMETER_DECL	3526:65	3526:72	3	uint32 cols
TYPE	3526:65	3526:65	4	uint32
TYPE_NAME	3526:65	3526:65	5	uint32
LEAF_NODE	3526:65	3526:65	6	uint32
NAME	3526:72	3526:72	4	cols
LEAF_NODE	3526:72	3526:72	5	cols
LEAF_NODE	3526:76	3526:76	3	,
PARAMETER_DECL	3527:24	3527:34	3	tsample_t sample
TYPE	3527:24	3527:24	4	tsample_t
TYPE_NAME	3527:24	3527:24	5	tsample_t
LEAF_NODE	3527:24	3527:24	6	tsample_t
NAME	3527:34	3527:34	4	sample
LEAF_NODE	3527:34	3527:34	5	sample
LEAF_NODE	3527:40	3527:40	3	,
PARAMETER_DECL	3527:42	3527:49	3	uint16 spp
TYPE	3527:42	3527:42	4	uint16
TYPE_NAME	3527:42	3527:42	5	uint16
LEAF_NODE	3527:42	3527:42	6	uint16
NAME	3527:49	3527:49	4	spp
LEAF_NODE	3527:49	3527:49	5	spp
LEAF_NODE	3527:52	3527:52	3	,
PARAMETER_DECL	3527:54	3527:61	3	uint16 bps
TYPE	3527:54	3527:54	4	uint16
TYPE_NAME	3527:54	3527:54	5	uint16
LEAF_NODE	3527:54	3527:54	6	uint16
NAME	3527:61	3527:61	4	bps
LEAF_NODE	3527:61	3527:61	5	bps
LEAF_NODE	3527:64	3527:64	3	,
PARAMETER_DECL	3528:29	3528:47	3	struct dump_opts * dump
TYPE	3528:29	3528:46	4	struct dump_opts *
TYPE_NAME	3528:29	3528:36	5	struct dump_opts
LEAF_NODE	3528:29	3528:29	6	struct
LEAF_NODE	3528:36	3528:36	6	dump_opts
POINTER	3528:46	3528:46	5	*
LEAF_NODE	3528:46	3528:46	6	*
NAME	3528:47	3528:47	4	dump
LEAF_NODE	3528:47	3528:47	5	dump
LEAF_NODE	3528:51	3528:51	3	)
LEAF_NODE	3529:2	3529:2	2	{
STATEMENTS	3530:2	3598:2	2	
SIMPLE_DECL	3530:2	3530:55	3	int shift_width , int bytes_per_sample , int bytes_per_pixel ;
INIT_DECL_LIST	3530:2	3530:2	4	int shift_width , int bytes_per_sample , int bytes_per_pixel
VAR_DECL	3530:2	3530:9	5	int shift_width
TYPE	3530:2	3530:2	6	int
TYPE_NAME	3530:2	3530:2	7	int
LEAF_NODE	3530:2	3530:2	8	int
NAME	3530:9	3530:9	6	shift_width
LEAF_NODE	3530:9	3530:9	7	shift_width
LEAF_NODE	3530:20	3530:20	5	,
INIT_DECL_LIST	3530:2	3530:2	5	int bytes_per_sample , int bytes_per_pixel
VAR_DECL	3530:2	3530:22	6	int bytes_per_sample
TYPE	3530:2	3530:2	7	int
TYPE_NAME	3530:2	3530:2	8	int
LEAF_NODE	3530:2	3530:2	9	int
NAME	3530:22	3530:22	7	bytes_per_sample
LEAF_NODE	3530:22	3530:22	8	bytes_per_sample
LEAF_NODE	3530:38	3530:38	6	,
VAR_DECL	3530:2	3530:40	6	int bytes_per_pixel
TYPE	3530:2	3530:2	7	int
TYPE_NAME	3530:2	3530:2	8	int
LEAF_NODE	3530:2	3530:2	9	int
NAME	3530:40	3530:40	7	bytes_per_pixel
LEAF_NODE	3530:40	3530:40	8	bytes_per_pixel
LEAF_NODE	3530:55	3530:55	4	;
SIMPLE_DECL	3531:2	3531:52	3	uint32 src_rowsize , uint32 src_offset , uint32 row , uint32 first_col ; first_col = 0 ;
INIT_DECL_LIST	3531:2	3531:2	4	uint32 src_rowsize , uint32 src_offset , uint32 row , uint32 first_col ; first_col = 0
VAR_DECL	3531:2	3531:9	5	uint32 src_rowsize
TYPE	3531:2	3531:2	6	uint32
TYPE_NAME	3531:2	3531:2	7	uint32
LEAF_NODE	3531:2	3531:2	8	uint32
NAME	3531:9	3531:9	6	src_rowsize
LEAF_NODE	3531:9	3531:9	7	src_rowsize
LEAF_NODE	3531:20	3531:20	5	,
INIT_DECL_LIST	3531:2	3531:2	5	uint32 src_offset , uint32 row , uint32 first_col ; first_col = 0
VAR_DECL	3531:2	3531:22	6	uint32 src_offset
TYPE	3531:2	3531:2	7	uint32
TYPE_NAME	3531:2	3531:2	8	uint32
LEAF_NODE	3531:2	3531:2	9	uint32
NAME	3531:22	3531:22	7	src_offset
LEAF_NODE	3531:22	3531:22	8	src_offset
LEAF_NODE	3531:32	3531:32	6	,
INIT_DECL_LIST	3531:2	3531:2	6	uint32 row , uint32 first_col ; first_col = 0
VAR_DECL	3531:2	3531:34	7	uint32 row
TYPE	3531:2	3531:2	8	uint32
TYPE_NAME	3531:2	3531:2	9	uint32
LEAF_NODE	3531:2	3531:2	10	uint32
NAME	3531:34	3531:34	8	row
LEAF_NODE	3531:34	3531:34	9	row
LEAF_NODE	3531:37	3531:37	7	,
VAR_DECL	3531:2	3531:39	7	uint32 first_col ; first_col = 0
TYPE	3531:2	3531:2	8	uint32
TYPE_NAME	3531:2	3531:2	9	uint32
LEAF_NODE	3531:2	3531:2	10	uint32
NAME	3531:39	3531:39	8	first_col
LEAF_NODE	3531:39	3531:39	9	first_col
LEAF_NODE	0:0	0:0	8	;
INIT	3531:39	3531:39	8	first_col = 0
ASSIGN	3531:39	3531:51	9	first_col = 0
LVAL	3531:39	3531:39	10	first_col
NAME	3531:39	3531:39	11	first_col
LEAF_NODE	3531:39	3531:39	12	first_col
ASSIGN_OP	3531:49	3531:49	10	=
LEAF_NODE	3531:49	3531:49	11	=
RVAL	3531:51	3531:51	10	0
FIELD	3531:51	3531:51	11	0
LEAF_NODE	3531:51	3531:51	12	0
LEAF_NODE	3531:52	3531:52	4	;
SIMPLE_DECL	3532:2	3532:32	3	uint32 dst_rowsize , uint32 dst_offset ;
INIT_DECL_LIST	3532:2	3532:2	4	uint32 dst_rowsize , uint32 dst_offset
VAR_DECL	3532:2	3532:9	5	uint32 dst_rowsize
TYPE	3532:2	3532:2	6	uint32
TYPE_NAME	3532:2	3532:2	7	uint32
LEAF_NODE	3532:2	3532:2	8	uint32
NAME	3532:9	3532:9	6	dst_rowsize
LEAF_NODE	3532:9	3532:9	7	dst_rowsize
LEAF_NODE	3532:20	3532:20	5	,
VAR_DECL	3532:2	3532:22	5	uint32 dst_offset
TYPE	3532:2	3532:2	6	uint32
TYPE_NAME	3532:2	3532:2	7	uint32
LEAF_NODE	3532:2	3532:2	8	uint32
NAME	3532:22	3532:22	6	dst_offset
LEAF_NODE	3532:22	3532:22	7	dst_offset
LEAF_NODE	3532:32	3532:32	4	;
SIMPLE_DECL	3533:2	3533:21	3	tsample_t count ; count = 1 ;
VAR_DECL	3533:2	3533:12	4	tsample_t count ; count = 1
TYPE	3533:2	3533:2	5	tsample_t
TYPE_NAME	3533:2	3533:2	6	tsample_t
LEAF_NODE	3533:2	3533:2	7	tsample_t
NAME	3533:12	3533:12	5	count
LEAF_NODE	3533:12	3533:12	6	count
LEAF_NODE	0:0	0:0	5	;
INIT	3533:12	3533:12	5	count = 1
ASSIGN	3533:12	3533:20	6	count = 1
LVAL	3533:12	3533:12	7	count
NAME	3533:12	3533:12	8	count
LEAF_NODE	3533:12	3533:12	9	count
ASSIGN_OP	3533:18	3533:18	7	=
LEAF_NODE	3533:18	3533:18	8	=
RVAL	3533:20	3533:20	7	1
FIELD	3533:20	3533:20	8	1
LEAF_NODE	3533:20	3533:20	9	1
LEAF_NODE	3533:21	3533:21	4	;
SIMPLE_DECL	3534:2	3534:18	3	uint8 * src , uint8 * dst ;
INIT_DECL_LIST	3534:2	3534:2	4	uint8 * src , uint8 * dst
VAR_DECL	3534:2	3534:9	5	uint8 * src
TYPE	3534:2	3534:8	6	uint8 *
TYPE_NAME	3534:2	3534:2	7	uint8
LEAF_NODE	3534:2	3534:2	8	uint8
POINTER	3534:8	3534:8	7	*
LEAF_NODE	3534:8	3534:8	8	*
NAME	3534:9	3534:9	6	src
LEAF_NODE	3534:9	3534:9	7	src
LEAF_NODE	3534:12	3534:12	5	,
VAR_DECL	3534:2	3534:15	5	uint8 * dst
TYPE	3534:2	3534:14	6	uint8 *
TYPE_NAME	3534:2	3534:2	7	uint8
LEAF_NODE	3534:2	3534:2	8	uint8
POINTER	3534:14	3534:14	7	*
LEAF_NODE	3534:14	3534:14	8	*
NAME	3534:15	3534:15	6	dst
LEAF_NODE	3534:15	3534:15	7	dst
LEAF_NODE	3534:18	3534:18	4	;
EXPR_STATEMENT	3536:2	3536:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	3536:2	3536:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	3536:2	3536:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	3536:2	3536:2	6	bytes_per_sample
FIELD	3536:2	3536:2	7	bytes_per_sample
LEAF_NODE	3536:2	3536:2	8	bytes_per_sample
ASSIGN_OP	3536:19	3536:19	6	=
LEAF_NODE	3536:19	3536:19	7	=
RVAL	3536:21	3536:33	6	( bps + 7 ) / 8
LEAF_NODE	3536:21	3536:21	7	(
FIELD	3536:22	3536:22	7	bps
LEAF_NODE	3536:22	3536:22	8	bps
LEAF_NODE	3536:26	3536:26	7	+
FIELD	3536:28	3536:28	7	7
LEAF_NODE	3536:28	3536:28	8	7
LEAF_NODE	3536:29	3536:29	7	)
LEAF_NODE	3536:31	3536:31	7	/
FIELD	3536:33	3536:33	7	8
LEAF_NODE	3536:33	3536:33	8	8
LEAF_NODE	3536:34	3536:34	4	;
EXPR_STATEMENT	3537:2	3537:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	3537:2	3537:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	3537:2	3537:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	3537:2	3537:2	6	bytes_per_pixel
FIELD	3537:2	3537:2	7	bytes_per_pixel
LEAF_NODE	3537:2	3537:2	8	bytes_per_pixel
ASSIGN_OP	3537:19	3537:19	6	=
LEAF_NODE	3537:19	3537:19	7	=
RVAL	3537:21	3537:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	3537:21	3537:21	7	(
LEAF_NODE	3537:22	3537:22	7	(
FIELD	3537:23	3537:23	7	bps
LEAF_NODE	3537:23	3537:23	8	bps
LEAF_NODE	3537:27	3537:27	7	*
FIELD	3537:29	3537:29	7	spp
LEAF_NODE	3537:29	3537:29	8	spp
LEAF_NODE	3537:32	3537:32	7	)
LEAF_NODE	3537:34	3537:34	7	+
FIELD	3537:36	3537:36	7	7
LEAF_NODE	3537:36	3537:36	8	7
LEAF_NODE	3537:37	3537:37	7	)
LEAF_NODE	3537:39	3537:39	7	/
FIELD	3537:41	3537:41	7	8
LEAF_NODE	3537:41	3537:41	8	8
LEAF_NODE	3537:42	3537:42	4	;
SELECTION	3538:2	3539:4	3	
KEYWORD	3538:2	3538:2	4	if
LEAF_NODE	3538:2	3538:2	5	if
LEAF_NODE	3538:5	3538:5	4	(
CONDITION	3538:6	3538:6	4	( bps % 8 ) == 0
EXPR	3538:6	3538:19	5	( bps % 8 ) == 0
LEAF_NODE	3538:6	3538:6	6	(
FIELD	3538:7	3538:7	6	bps
LEAF_NODE	3538:7	3538:7	7	bps
LEAF_NODE	3538:11	3538:11	6	%
FIELD	3538:13	3538:13	6	8
LEAF_NODE	3538:13	3538:13	7	8
LEAF_NODE	3538:14	3538:14	6	)
EQ_OPERATOR	3538:16	3538:16	6	==
LEAF_NODE	3538:16	3538:16	7	==
FIELD	3538:19	3538:19	6	0
LEAF_NODE	3538:19	3538:19	7	0
LEAF_NODE	3538:20	3538:20	4	)
STATEMENTS	3539:4	3539:4	4	
EXPR_STATEMENT	3539:4	3539:19	5	shift_width = 0 ;
EXPR	3539:4	3539:4	6	shift_width = 0
ASSIGN	3539:4	3539:18	7	shift_width = 0
LVAL	3539:4	3539:4	8	shift_width
FIELD	3539:4	3539:4	9	shift_width
LEAF_NODE	3539:4	3539:4	10	shift_width
ASSIGN_OP	3539:16	3539:16	8	=
LEAF_NODE	3539:16	3539:16	9	=
RVAL	3539:18	3539:18	8	0
FIELD	3539:18	3539:18	9	0
LEAF_NODE	3539:18	3539:18	10	0
LEAF_NODE	3539:19	3539:19	6	;
SELECTION	3540:2	3541:4	3	
KEYWORD	3540:2	3540:2	4	else
LEAF_NODE	3540:2	3540:2	5	else
STATEMENTS	3541:4	3546:4	4	
LEAF_NODE	3541:4	3541:4	5	{
STATEMENTS	3542:4	3544:4	5	
SELECTION	3542:4	3543:6	6	
KEYWORD	3542:4	3542:4	7	if
LEAF_NODE	3542:4	3542:4	8	if
LEAF_NODE	3542:7	3542:7	7	(
CONDITION	3542:8	3542:8	7	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	3542:8	3542:47	8	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	3542:8	3542:8	9	bytes_per_pixel
LEAF_NODE	3542:8	3542:8	10	bytes_per_pixel
REL_OPERATOR	3542:24	3542:24	9	<
LEAF_NODE	3542:24	3542:24	10	<
LEAF_NODE	3542:26	3542:26	9	(
FIELD	3542:27	3542:27	9	bytes_per_sample
LEAF_NODE	3542:27	3542:27	10	bytes_per_sample
LEAF_NODE	3542:44	3542:44	9	+
FIELD	3542:46	3542:46	9	1
LEAF_NODE	3542:46	3542:46	10	1
LEAF_NODE	3542:47	3542:47	9	)
LEAF_NODE	3542:48	3542:48	7	)
STATEMENTS	3543:6	3543:6	7	
EXPR_STATEMENT	3543:6	3543:35	8	shift_width = bytes_per_pixel ;
EXPR	3543:6	3543:6	9	shift_width = bytes_per_pixel
ASSIGN	3543:6	3543:20	10	shift_width = bytes_per_pixel
LVAL	3543:6	3543:6	11	shift_width
FIELD	3543:6	3543:6	12	shift_width
LEAF_NODE	3543:6	3543:6	13	shift_width
ASSIGN_OP	3543:18	3543:18	11	=
LEAF_NODE	3543:18	3543:18	12	=
RVAL	3543:20	3543:20	11	bytes_per_pixel
FIELD	3543:20	3543:20	12	bytes_per_pixel
LEAF_NODE	3543:20	3543:20	13	bytes_per_pixel
LEAF_NODE	3543:35	3543:35	9	;
SELECTION	3544:4	3545:6	6	
KEYWORD	3544:4	3544:4	7	else
LEAF_NODE	3544:4	3544:4	8	else
STATEMENTS	3545:6	3545:6	7	
EXPR_STATEMENT	3545:6	3545:40	8	shift_width = bytes_per_sample + 1 ;
EXPR	3545:6	3545:6	9	shift_width = bytes_per_sample + 1
ASSIGN	3545:6	3545:20	10	shift_width = bytes_per_sample + 1
LVAL	3545:6	3545:6	11	shift_width
FIELD	3545:6	3545:6	12	shift_width
LEAF_NODE	3545:6	3545:6	13	shift_width
ASSIGN_OP	3545:18	3545:18	11	=
LEAF_NODE	3545:18	3545:18	12	=
RVAL	3545:20	3545:39	11	bytes_per_sample + 1
FIELD	3545:20	3545:20	12	bytes_per_sample
LEAF_NODE	3545:20	3545:20	13	bytes_per_sample
LEAF_NODE	3545:37	3545:37	12	+
FIELD	3545:39	3545:39	12	1
LEAF_NODE	3545:39	3545:39	13	1
LEAF_NODE	3545:40	3545:40	9	;
LEAF_NODE	3546:4	3546:4	5	}
LEAF_NODE	3547:2	3547:2	3	src_rowsize
LEAF_NODE	3547:14	3547:14	3	=
LEAF_NODE	3547:16	3547:16	3	(
LEAF_NODE	3547:17	3547:17	3	(
LEAF_NODE	3547:18	3547:18	3	bps
LEAF_NODE	3547:22	3547:22	3	*
LEAF_NODE	3547:24	3547:24	3	spp
LEAF_NODE	3547:28	3547:28	3	*
LEAF_NODE	3547:30	3547:30	3	cols
LEAF_NODE	3547:34	3547:34	3	)
LEAF_NODE	3547:36	3547:36	3	+
LEAF_NODE	3547:38	3547:38	3	7
LEAF_NODE	3547:39	3547:39	3	)
LEAF_NODE	3547:41	3547:41	3	/
EXPR_STATEMENT	3547:43	3547:44	3	8 ;
EXPR	3547:43	3547:43	4	8
FIELD	3547:43	3547:43	5	8
LEAF_NODE	3547:43	3547:43	6	8
LEAF_NODE	3547:44	3547:44	4	;
EXPR_STATEMENT	3548:2	3548:38	3	dst_rowsize = ( ( bps * cols ) + 7 ) / 8 ;
EXPR	3548:2	3548:2	4	dst_rowsize = ( ( bps * cols ) + 7 ) / 8
ASSIGN	3548:2	3548:16	5	dst_rowsize = ( ( bps * cols ) + 7 ) / 8
LVAL	3548:2	3548:2	6	dst_rowsize
FIELD	3548:2	3548:2	7	dst_rowsize
LEAF_NODE	3548:2	3548:2	8	dst_rowsize
ASSIGN_OP	3548:14	3548:14	6	=
LEAF_NODE	3548:14	3548:14	7	=
RVAL	3548:16	3548:37	6	( ( bps * cols ) + 7 ) / 8
LEAF_NODE	3548:16	3548:16	7	(
LEAF_NODE	3548:17	3548:17	7	(
FIELD	3548:18	3548:18	7	bps
LEAF_NODE	3548:18	3548:18	8	bps
LEAF_NODE	3548:22	3548:22	7	*
FIELD	3548:24	3548:24	7	cols
LEAF_NODE	3548:24	3548:24	8	cols
LEAF_NODE	3548:28	3548:28	7	)
LEAF_NODE	3548:30	3548:30	7	+
FIELD	3548:32	3548:32	7	7
LEAF_NODE	3548:32	3548:32	8	7
LEAF_NODE	3548:33	3548:33	7	)
LEAF_NODE	3548:35	3548:35	7	/
FIELD	3548:37	3548:37	7	8
LEAF_NODE	3548:37	3548:37	8	8
LEAF_NODE	3548:38	3548:38	4	;
SELECTION	3550:2	3551:4	3	
KEYWORD	3550:2	3550:2	4	if
LEAF_NODE	3550:2	3550:2	5	if
LEAF_NODE	3550:5	3550:5	4	(
CONDITION	3550:6	3550:6	4	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3550:6	3550:6	5	( dump -> outfile != NULL ) && ( dump -> level == 4 )
AND	3550:6	3550:33	6	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3550:6	3550:28	7	( dump -> outfile != NULL )
LEAF_NODE	3550:6	3550:6	8	(
FIELD	3550:7	3550:13	8	dump -> outfile
LEAF_NODE	3550:7	3550:7	9	dump
LEAF_NODE	3550:11	3550:11	9	->
LEAF_NODE	3550:13	3550:13	9	outfile
EQ_OPERATOR	3550:21	3550:21	8	!=
LEAF_NODE	3550:21	3550:21	9	!=
FIELD	3550:24	3550:24	8	NULL
LEAF_NODE	3550:24	3550:24	9	NULL
LEAF_NODE	3550:28	3550:28	8	)
LEAF_NODE	3550:30	3550:30	7	&&
EXPR	3550:33	3550:50	7	( dump -> level == 4 )
LEAF_NODE	3550:33	3550:33	8	(
FIELD	3550:34	3550:40	8	dump -> level
LEAF_NODE	3550:34	3550:34	9	dump
LEAF_NODE	3550:38	3550:38	9	->
LEAF_NODE	3550:40	3550:40	9	level
EQ_OPERATOR	3550:46	3550:46	8	==
LEAF_NODE	3550:46	3550:46	9	==
FIELD	3550:49	3550:49	8	4
LEAF_NODE	3550:49	3550:49	9	4
LEAF_NODE	3550:50	3550:50	8	)
LEAF_NODE	3550:51	3550:51	4	)
STATEMENTS	3551:4	3554:4	4	
LEAF_NODE	3551:4	3551:4	5	{
STATEMENTS	3552:4	3552:4	5	
EXPR_STATEMENT	3552:4	3553:59	6	dump_info ( dump -> outfile , dump -> format , "extractContigSamplesToBuffer" , "Sample %d, %d rows" , sample + 1 , rows + 1 ) ;
EXPR	3552:4	3552:4	7	dump_info ( dump -> outfile , dump -> format , "extractContigSamplesToBuffer" , "Sample %d, %d rows" , sample + 1 , rows + 1 )
FUNCTION_CALL	3552:4	3553:58	8	dump_info ( dump -> outfile , dump -> format , "extractContigSamplesToBuffer" , "Sample %d, %d rows" , sample + 1 , rows + 1 )
CALLEE	3552:4	3552:4	9	dump_info
LEAF_NODE	3552:4	3552:4	10	dump_info
LEAF_NODE	3552:15	3552:15	9	(
ARGUMENT	3552:16	3552:16	9	dump -> outfile
FIELD	3552:16	3552:22	10	dump -> outfile
LEAF_NODE	3552:16	3552:16	11	dump
LEAF_NODE	3552:20	3552:20	11	->
LEAF_NODE	3552:22	3552:22	11	outfile
LEAF_NODE	3552:29	3552:29	9	,
ARGUMENT	3552:31	3552:31	9	dump -> format
FIELD	3552:31	3552:37	10	dump -> format
LEAF_NODE	3552:31	3552:31	11	dump
LEAF_NODE	3552:35	3552:35	11	->
LEAF_NODE	3552:37	3552:37	11	format
LEAF_NODE	3552:43	3552:43	9	,
ARGUMENT	3552:45	3552:45	9	"extractContigSamplesToBuffer"
FIELD	3552:45	3552:45	10	"extractContigSamplesToBuffer"
LEAF_NODE	3552:45	3552:45	11	"extractContigSamplesToBuffer"
LEAF_NODE	3552:75	3552:75	9	,
ARGUMENT	3553:16	3553:16	9	"Sample %d, %d rows"
FIELD	3553:16	3553:16	10	"Sample %d, %d rows"
LEAF_NODE	3553:16	3553:16	11	"Sample %d, %d rows"
LEAF_NODE	3553:36	3553:36	9	,
ARGUMENT	3553:38	3553:47	9	sample + 1
FIELD	3553:38	3553:38	10	sample
LEAF_NODE	3553:38	3553:38	11	sample
LEAF_NODE	3553:45	3553:45	10	+
FIELD	3553:47	3553:47	10	1
LEAF_NODE	3553:47	3553:47	11	1
LEAF_NODE	3553:48	3553:48	9	,
ARGUMENT	3553:50	3553:57	9	rows + 1
FIELD	3553:50	3553:50	10	rows
LEAF_NODE	3553:50	3553:50	11	rows
LEAF_NODE	3553:55	3553:55	10	+
FIELD	3553:57	3553:57	10	1
LEAF_NODE	3553:57	3553:57	11	1
LEAF_NODE	3553:58	3553:58	9	)
LEAF_NODE	3553:59	3553:59	7	;
LEAF_NODE	3554:4	3554:4	5	}
ITERATION	3555:2	3556:4	3	
KEYWORD	3555:2	3555:2	4	for
LEAF_NODE	3555:2	3555:2	5	for
LEAF_NODE	3555:6	3555:6	4	(
FOR_INIT	3555:7	3555:14	4	row = 0 ;
EXPR	3555:7	3555:7	5	row = 0
ASSIGN	3555:7	3555:13	6	row = 0
LVAL	3555:7	3555:7	7	row
FIELD	3555:7	3555:7	8	row
LEAF_NODE	3555:7	3555:7	9	row
ASSIGN_OP	3555:11	3555:11	7	=
LEAF_NODE	3555:11	3555:11	8	=
RVAL	3555:13	3555:13	7	0
FIELD	3555:13	3555:13	8	0
LEAF_NODE	3555:13	3555:13	9	0
LEAF_NODE	3555:14	3555:14	5	;
CONDITION	3555:16	3555:16	4	row < rows
EXPR	3555:16	3555:22	5	row < rows
FIELD	3555:16	3555:16	6	row
LEAF_NODE	3555:16	3555:16	7	row
REL_OPERATOR	3555:20	3555:20	6	<
LEAF_NODE	3555:20	3555:20	7	<
FIELD	3555:22	3555:22	6	rows
LEAF_NODE	3555:22	3555:22	7	rows
LEAF_NODE	3555:26	3555:26	4	;
FOR_EXPR	3555:28	3555:28	4	row ++
EXPR	3555:28	3555:28	5	row ++
FIELD	3555:28	3555:31	6	row ++
LEAF_NODE	3555:28	3555:28	7	row
LEAF_NODE	3555:31	3555:31	7	++
LEAF_NODE	3555:33	3555:33	4	)
STATEMENTS	3556:4	3596:4	4	
LEAF_NODE	3556:4	3556:4	5	{
STATEMENTS	3557:4	3594:4	5	
EXPR_STATEMENT	3557:4	3557:34	6	src_offset = row * src_rowsize ;
EXPR	3557:4	3557:4	7	src_offset = row * src_rowsize
ASSIGN	3557:4	3557:17	8	src_offset = row * src_rowsize
LVAL	3557:4	3557:4	9	src_offset
FIELD	3557:4	3557:4	10	src_offset
LEAF_NODE	3557:4	3557:4	11	src_offset
ASSIGN_OP	3557:15	3557:15	9	=
LEAF_NODE	3557:15	3557:15	10	=
RVAL	3557:17	3557:23	9	row * src_rowsize
FIELD	3557:17	3557:17	10	row
LEAF_NODE	3557:17	3557:17	11	row
LEAF_NODE	3557:21	3557:21	10	*
FIELD	3557:23	3557:23	10	src_rowsize
LEAF_NODE	3557:23	3557:23	11	src_rowsize
LEAF_NODE	3557:34	3557:34	7	;
EXPR_STATEMENT	3558:4	3558:34	6	dst_offset = row * dst_rowsize ;
EXPR	3558:4	3558:4	7	dst_offset = row * dst_rowsize
ASSIGN	3558:4	3558:17	8	dst_offset = row * dst_rowsize
LVAL	3558:4	3558:4	9	dst_offset
FIELD	3558:4	3558:4	10	dst_offset
LEAF_NODE	3558:4	3558:4	11	dst_offset
ASSIGN_OP	3558:15	3558:15	9	=
LEAF_NODE	3558:15	3558:15	10	=
RVAL	3558:17	3558:23	9	row * dst_rowsize
FIELD	3558:17	3558:17	10	row
LEAF_NODE	3558:17	3558:17	11	row
LEAF_NODE	3558:21	3558:21	10	*
FIELD	3558:23	3558:23	10	dst_rowsize
LEAF_NODE	3558:23	3558:23	11	dst_rowsize
LEAF_NODE	3558:34	3558:34	7	;
EXPR_STATEMENT	3559:4	3559:25	6	src = in + src_offset ;
EXPR	3559:4	3559:4	7	src = in + src_offset
ASSIGN	3559:4	3559:10	8	src = in + src_offset
LVAL	3559:4	3559:4	9	src
FIELD	3559:4	3559:4	10	src
LEAF_NODE	3559:4	3559:4	11	src
ASSIGN_OP	3559:8	3559:8	9	=
LEAF_NODE	3559:8	3559:8	10	=
RVAL	3559:10	3559:15	9	in + src_offset
FIELD	3559:10	3559:10	10	in
LEAF_NODE	3559:10	3559:10	11	in
LEAF_NODE	3559:13	3559:13	10	+
FIELD	3559:15	3559:15	10	src_offset
LEAF_NODE	3559:15	3559:15	11	src_offset
LEAF_NODE	3559:25	3559:25	7	;
EXPR_STATEMENT	3560:4	3560:26	6	dst = out + dst_offset ;
EXPR	3560:4	3560:4	7	dst = out + dst_offset
ASSIGN	3560:4	3560:10	8	dst = out + dst_offset
LVAL	3560:4	3560:4	9	dst
FIELD	3560:4	3560:4	10	dst
LEAF_NODE	3560:4	3560:4	11	dst
ASSIGN_OP	3560:8	3560:8	9	=
LEAF_NODE	3560:8	3560:8	10	=
RVAL	3560:10	3560:16	9	out + dst_offset
FIELD	3560:10	3560:10	10	out
LEAF_NODE	3560:10	3560:10	11	out
LEAF_NODE	3560:14	3560:14	10	+
FIELD	3560:16	3560:16	10	dst_offset
LEAF_NODE	3560:16	3560:16	11	dst_offset
LEAF_NODE	3560:26	3560:26	7	;
SELECTION	3563:4	3564:6	6	
KEYWORD	3563:4	3563:4	7	switch
LEAF_NODE	3563:4	3563:4	8	switch
LEAF_NODE	3563:11	3563:11	7	(
CONDITION	3563:12	3563:12	7	shift_width
EXPR	3563:12	3563:12	8	shift_width
FIELD	3563:12	3563:12	9	shift_width
LEAF_NODE	3563:12	3563:12	10	shift_width
LEAF_NODE	3563:23	3563:23	7	)
STATEMENTS	3564:6	3593:6	7	
LEAF_NODE	3564:6	3564:6	8	{
STATEMENTS	3565:6	3592:8	8	
LABEL	3565:6	3565:12	9	case 0 :
LEAF_NODE	3565:6	3565:6	10	case
LEAF_NODE	3565:11	3565:11	10	0
LEAF_NODE	3565:12	3565:12	10	:
SELECTION	3565:14	3567:16	9	
KEYWORD	3565:14	3565:14	10	if
LEAF_NODE	3565:14	3565:14	11	if
LEAF_NODE	3565:17	3565:17	10	(
CONDITION	3565:18	3565:18	10	extractContigSamplesBytes ( src , dst , cols , sample , spp , bps , count , first_col , cols )
EXPR	3565:18	3565:18	11	extractContigSamplesBytes ( src , dst , cols , sample , spp , bps , count , first_col , cols )
FUNCTION_CALL	3565:18	3566:78	12	extractContigSamplesBytes ( src , dst , cols , sample , spp , bps , count , first_col , cols )
CALLEE	3565:18	3565:18	13	extractContigSamplesBytes
LEAF_NODE	3565:18	3565:18	14	extractContigSamplesBytes
LEAF_NODE	3565:44	3565:44	13	(
ARGUMENT	3565:45	3565:45	13	src
FIELD	3565:45	3565:45	14	src
LEAF_NODE	3565:45	3565:45	15	src
LEAF_NODE	3565:48	3565:48	13	,
ARGUMENT	3565:50	3565:50	13	dst
FIELD	3565:50	3565:50	14	dst
LEAF_NODE	3565:50	3565:50	15	dst
LEAF_NODE	3565:53	3565:53	13	,
ARGUMENT	3565:55	3565:55	13	cols
FIELD	3565:55	3565:55	14	cols
LEAF_NODE	3565:55	3565:55	15	cols
LEAF_NODE	3565:59	3565:59	13	,
ARGUMENT	3565:61	3565:61	13	sample
FIELD	3565:61	3565:61	14	sample
LEAF_NODE	3565:61	3565:61	15	sample
LEAF_NODE	3565:67	3565:67	13	,
ARGUMENT	3566:45	3566:45	13	spp
FIELD	3566:45	3566:45	14	spp
LEAF_NODE	3566:45	3566:45	15	spp
LEAF_NODE	3566:48	3566:48	13	,
ARGUMENT	3566:50	3566:50	13	bps
FIELD	3566:50	3566:50	14	bps
LEAF_NODE	3566:50	3566:50	15	bps
LEAF_NODE	3566:53	3566:53	13	,
ARGUMENT	3566:56	3566:56	13	count
FIELD	3566:56	3566:56	14	count
LEAF_NODE	3566:56	3566:56	15	count
LEAF_NODE	3566:61	3566:61	13	,
ARGUMENT	3566:63	3566:63	13	first_col
FIELD	3566:63	3566:63	14	first_col
LEAF_NODE	3566:63	3566:63	15	first_col
LEAF_NODE	3566:72	3566:72	13	,
ARGUMENT	3566:74	3566:74	13	cols
FIELD	3566:74	3566:74	14	cols
LEAF_NODE	3566:74	3566:74	15	cols
LEAF_NODE	3566:78	3566:78	13	)
LEAF_NODE	3566:79	3566:79	10	)
STATEMENTS	3567:16	3567:16	10	
JUMP_STATEMENT	3567:16	3567:26	11	return ( 1 ) ;
KEYWORD	3567:16	3567:16	12	return
LEAF_NODE	3567:16	3567:16	13	return
DESTINATION	3567:23	3567:23	12	( 1 )
EXPR	3567:23	3567:25	13	( 1 )
LEAF_NODE	3567:23	3567:23	14	(
FIELD	3567:24	3567:24	14	1
LEAF_NODE	3567:24	3567:24	15	1
LEAF_NODE	3567:25	3567:25	14	)
LEAF_NODE	3567:26	3567:26	12	;
JUMP_STATEMENT	3568:8	3568:13	9	break DESTINATION ;
KEYWORD	3568:8	3568:8	10	break
LEAF_NODE	3568:8	3568:8	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3568:13	3568:13	10	;
LABEL	3569:6	3569:12	9	case 1 :
LEAF_NODE	3569:6	3569:6	10	case
LEAF_NODE	3569:11	3569:11	10	1
LEAF_NODE	3569:12	3569:12	10	:
SELECTION	3569:14	3570:16	9	
KEYWORD	3569:14	3569:14	10	if
LEAF_NODE	3569:14	3569:14	11	if
LEAF_NODE	3569:17	3569:17	10	(
CONDITION	3569:18	3569:18	10	bps == 1
EXPR	3569:18	3569:25	11	bps == 1
FIELD	3569:18	3569:18	12	bps
LEAF_NODE	3569:18	3569:18	13	bps
EQ_OPERATOR	3569:22	3569:22	12	==
LEAF_NODE	3569:22	3569:22	13	==
FIELD	3569:25	3569:25	12	1
LEAF_NODE	3569:25	3569:25	13	1
LEAF_NODE	3569:26	3569:26	10	)
STATEMENTS	3570:16	3575:2	10	
LEAF_NODE	3570:16	3570:16	11	{
STATEMENTS	3571:16	3574:9	11	
SELECTION	3571:16	3573:11	12	
KEYWORD	3571:16	3571:16	13	if
LEAF_NODE	3571:16	3571:16	14	if
LEAF_NODE	3571:19	3571:19	13	(
CONDITION	3571:20	3571:20	13	extractContigSamples8bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
EXPR	3571:20	3571:20	14	extractContigSamples8bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
FUNCTION_CALL	3571:20	3572:79	15	extractContigSamples8bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
CALLEE	3571:20	3571:20	16	extractContigSamples8bits
LEAF_NODE	3571:20	3571:20	17	extractContigSamples8bits
LEAF_NODE	3571:46	3571:46	16	(
ARGUMENT	3571:47	3571:47	16	src
FIELD	3571:47	3571:47	17	src
LEAF_NODE	3571:47	3571:47	18	src
LEAF_NODE	3571:50	3571:50	16	,
ARGUMENT	3571:52	3571:52	16	dst
FIELD	3571:52	3571:52	17	dst
LEAF_NODE	3571:52	3571:52	18	dst
LEAF_NODE	3571:55	3571:55	16	,
ARGUMENT	3571:57	3571:57	16	cols
FIELD	3571:57	3571:57	17	cols
LEAF_NODE	3571:57	3571:57	18	cols
LEAF_NODE	3571:61	3571:61	16	,
ARGUMENT	3571:63	3571:63	16	sample
FIELD	3571:63	3571:63	17	sample
LEAF_NODE	3571:63	3571:63	18	sample
LEAF_NODE	3571:69	3571:69	16	,
ARGUMENT	3572:47	3572:47	16	spp
FIELD	3572:47	3572:47	17	spp
LEAF_NODE	3572:47	3572:47	18	spp
LEAF_NODE	3572:50	3572:50	16	,
ARGUMENT	3572:52	3572:52	16	bps
FIELD	3572:52	3572:52	17	bps
LEAF_NODE	3572:52	3572:52	18	bps
LEAF_NODE	3572:55	3572:55	16	,
ARGUMENT	3572:57	3572:57	16	count
FIELD	3572:57	3572:57	17	count
LEAF_NODE	3572:57	3572:57	18	count
LEAF_NODE	3572:62	3572:62	16	,
ARGUMENT	3572:64	3572:64	16	first_col
FIELD	3572:64	3572:64	17	first_col
LEAF_NODE	3572:64	3572:64	18	first_col
LEAF_NODE	3572:73	3572:73	16	,
ARGUMENT	3572:75	3572:75	16	cols
FIELD	3572:75	3572:75	17	cols
LEAF_NODE	3572:75	3572:75	18	cols
LEAF_NODE	3572:79	3572:79	16	)
LEAF_NODE	3572:80	3572:80	13	)
STATEMENTS	3573:11	3573:11	13	
JUMP_STATEMENT	3573:11	3573:21	14	return ( 1 ) ;
KEYWORD	3573:11	3573:11	15	return
LEAF_NODE	3573:11	3573:11	16	return
DESTINATION	3573:18	3573:18	15	( 1 )
EXPR	3573:18	3573:20	16	( 1 )
LEAF_NODE	3573:18	3573:18	17	(
FIELD	3573:19	3573:19	17	1
LEAF_NODE	3573:19	3573:19	18	1
LEAF_NODE	3573:20	3573:20	17	)
LEAF_NODE	3573:21	3573:21	15	;
JUMP_STATEMENT	3574:9	3574:14	12	break DESTINATION ;
KEYWORD	3574:9	3574:9	13	break
LEAF_NODE	3574:9	3574:9	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3574:14	3574:14	13	;
LEAF_NODE	3575:2	3575:2	11	}
SELECTION	3576:7	3577:17	9	
KEYWORD	3576:7	3576:7	10	else
LEAF_NODE	3576:7	3576:7	11	else
STATEMENTS	3577:17	3577:17	10	
SELECTION	3577:17	3579:10	11	
KEYWORD	3577:17	3577:17	12	if
LEAF_NODE	3577:17	3577:17	13	if
LEAF_NODE	3577:20	3577:20	12	(
CONDITION	3577:21	3577:21	12	extractContigSamples16bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
EXPR	3577:21	3577:21	13	extractContigSamples16bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
FUNCTION_CALL	3577:21	3578:81	14	extractContigSamples16bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
CALLEE	3577:21	3577:21	15	extractContigSamples16bits
LEAF_NODE	3577:21	3577:21	16	extractContigSamples16bits
LEAF_NODE	3577:48	3577:48	15	(
ARGUMENT	3577:49	3577:49	15	src
FIELD	3577:49	3577:49	16	src
LEAF_NODE	3577:49	3577:49	17	src
LEAF_NODE	3577:52	3577:52	15	,
ARGUMENT	3577:54	3577:54	15	dst
FIELD	3577:54	3577:54	16	dst
LEAF_NODE	3577:54	3577:54	17	dst
LEAF_NODE	3577:57	3577:57	15	,
ARGUMENT	3577:59	3577:59	15	cols
FIELD	3577:59	3577:59	16	cols
LEAF_NODE	3577:59	3577:59	17	cols
LEAF_NODE	3577:63	3577:63	15	,
ARGUMENT	3577:65	3577:65	15	sample
FIELD	3577:65	3577:65	16	sample
LEAF_NODE	3577:65	3577:65	17	sample
LEAF_NODE	3577:71	3577:71	15	,
ARGUMENT	3578:49	3578:49	15	spp
FIELD	3578:49	3578:49	16	spp
LEAF_NODE	3578:49	3578:49	17	spp
LEAF_NODE	3578:52	3578:52	15	,
ARGUMENT	3578:54	3578:54	15	bps
FIELD	3578:54	3578:54	16	bps
LEAF_NODE	3578:54	3578:54	17	bps
LEAF_NODE	3578:57	3578:57	15	,
ARGUMENT	3578:59	3578:59	15	count
FIELD	3578:59	3578:59	16	count
LEAF_NODE	3578:59	3578:59	17	count
LEAF_NODE	3578:64	3578:64	15	,
ARGUMENT	3578:66	3578:66	15	first_col
FIELD	3578:66	3578:66	16	first_col
LEAF_NODE	3578:66	3578:66	17	first_col
LEAF_NODE	3578:75	3578:75	15	,
ARGUMENT	3578:77	3578:77	15	cols
FIELD	3578:77	3578:77	16	cols
LEAF_NODE	3578:77	3578:77	17	cols
LEAF_NODE	3578:81	3578:81	15	)
LEAF_NODE	3578:82	3578:82	12	)
STATEMENTS	3579:10	3579:10	12	
JUMP_STATEMENT	3579:10	3579:20	13	return ( 1 ) ;
KEYWORD	3579:10	3579:10	14	return
LEAF_NODE	3579:10	3579:10	15	return
DESTINATION	3579:17	3579:17	14	( 1 )
EXPR	3579:17	3579:19	15	( 1 )
LEAF_NODE	3579:17	3579:17	16	(
FIELD	3579:18	3579:18	16	1
LEAF_NODE	3579:18	3579:18	17	1
LEAF_NODE	3579:19	3579:19	16	)
LEAF_NODE	3579:20	3579:20	14	;
JUMP_STATEMENT	3580:7	3580:12	9	break DESTINATION ;
KEYWORD	3580:7	3580:7	10	break
LEAF_NODE	3580:7	3580:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3580:12	3580:12	10	;
LABEL	3581:6	3581:12	9	case 2 :
LEAF_NODE	3581:6	3581:6	10	case
LEAF_NODE	3581:11	3581:11	10	2
LEAF_NODE	3581:12	3581:12	10	:
SELECTION	3581:14	3583:10	9	
KEYWORD	3581:14	3581:14	10	if
LEAF_NODE	3581:14	3581:14	11	if
LEAF_NODE	3581:17	3581:17	10	(
CONDITION	3581:18	3581:18	10	extractContigSamples24bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
EXPR	3581:18	3581:18	11	extractContigSamples24bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
FUNCTION_CALL	3581:18	3582:79	12	extractContigSamples24bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
CALLEE	3581:18	3581:18	13	extractContigSamples24bits
LEAF_NODE	3581:18	3581:18	14	extractContigSamples24bits
LEAF_NODE	3581:45	3581:45	13	(
ARGUMENT	3581:46	3581:46	13	src
FIELD	3581:46	3581:46	14	src
LEAF_NODE	3581:46	3581:46	15	src
LEAF_NODE	3581:49	3581:49	13	,
ARGUMENT	3581:51	3581:51	13	dst
FIELD	3581:51	3581:51	14	dst
LEAF_NODE	3581:51	3581:51	15	dst
LEAF_NODE	3581:54	3581:54	13	,
ARGUMENT	3581:56	3581:56	13	cols
FIELD	3581:56	3581:56	14	cols
LEAF_NODE	3581:56	3581:56	15	cols
LEAF_NODE	3581:60	3581:60	13	,
ARGUMENT	3581:62	3581:62	13	sample
FIELD	3581:62	3581:62	14	sample
LEAF_NODE	3581:62	3581:62	15	sample
LEAF_NODE	3581:68	3581:68	13	,
ARGUMENT	3582:46	3582:46	13	spp
FIELD	3582:46	3582:46	14	spp
LEAF_NODE	3582:46	3582:46	15	spp
LEAF_NODE	3582:49	3582:49	13	,
ARGUMENT	3582:51	3582:51	13	bps
FIELD	3582:51	3582:51	14	bps
LEAF_NODE	3582:51	3582:51	15	bps
LEAF_NODE	3582:54	3582:54	13	,
ARGUMENT	3582:57	3582:57	13	count
FIELD	3582:57	3582:57	14	count
LEAF_NODE	3582:57	3582:57	15	count
LEAF_NODE	3582:62	3582:62	13	,
ARGUMENT	3582:64	3582:64	13	first_col
FIELD	3582:64	3582:64	14	first_col
LEAF_NODE	3582:64	3582:64	15	first_col
LEAF_NODE	3582:73	3582:73	13	,
ARGUMENT	3582:75	3582:75	13	cols
FIELD	3582:75	3582:75	14	cols
LEAF_NODE	3582:75	3582:75	15	cols
LEAF_NODE	3582:79	3582:79	13	)
LEAF_NODE	3582:80	3582:80	10	)
STATEMENTS	3583:10	3583:10	10	
JUMP_STATEMENT	3583:10	3583:20	11	return ( 1 ) ;
KEYWORD	3583:10	3583:10	12	return
LEAF_NODE	3583:10	3583:10	13	return
DESTINATION	3583:17	3583:17	12	( 1 )
EXPR	3583:17	3583:19	13	( 1 )
LEAF_NODE	3583:17	3583:17	14	(
FIELD	3583:18	3583:18	14	1
LEAF_NODE	3583:18	3583:18	15	1
LEAF_NODE	3583:19	3583:19	14	)
LEAF_NODE	3583:20	3583:20	12	;
JUMP_STATEMENT	3584:7	3584:12	9	break DESTINATION ;
KEYWORD	3584:7	3584:7	10	break
LEAF_NODE	3584:7	3584:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3584:12	3584:12	10	;
LABEL	3585:6	3585:12	9	case 3 :
LEAF_NODE	3585:6	3585:6	10	case
LEAF_NODE	3585:11	3585:11	10	3
LEAF_NODE	3585:12	3585:12	10	:
LABEL	3586:6	3586:12	9	case 4 :
LEAF_NODE	3586:6	3586:6	10	case
LEAF_NODE	3586:11	3586:11	10	4
LEAF_NODE	3586:12	3586:12	10	:
LABEL	3587:6	3587:12	9	case 5 :
LEAF_NODE	3587:6	3587:6	10	case
LEAF_NODE	3587:11	3587:11	10	5
LEAF_NODE	3587:12	3587:12	10	:
SELECTION	3587:14	3589:10	9	
KEYWORD	3587:14	3587:14	10	if
LEAF_NODE	3587:14	3587:14	11	if
LEAF_NODE	3587:17	3587:17	10	(
CONDITION	3587:18	3587:18	10	extractContigSamples32bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
EXPR	3587:18	3587:18	11	extractContigSamples32bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
FUNCTION_CALL	3587:18	3588:79	12	extractContigSamples32bits ( src , dst , cols , sample , spp , bps , count , first_col , cols )
CALLEE	3587:18	3587:18	13	extractContigSamples32bits
LEAF_NODE	3587:18	3587:18	14	extractContigSamples32bits
LEAF_NODE	3587:45	3587:45	13	(
ARGUMENT	3587:46	3587:46	13	src
FIELD	3587:46	3587:46	14	src
LEAF_NODE	3587:46	3587:46	15	src
LEAF_NODE	3587:49	3587:49	13	,
ARGUMENT	3587:51	3587:51	13	dst
FIELD	3587:51	3587:51	14	dst
LEAF_NODE	3587:51	3587:51	15	dst
LEAF_NODE	3587:54	3587:54	13	,
ARGUMENT	3587:56	3587:56	13	cols
FIELD	3587:56	3587:56	14	cols
LEAF_NODE	3587:56	3587:56	15	cols
LEAF_NODE	3587:60	3587:60	13	,
ARGUMENT	3587:62	3587:62	13	sample
FIELD	3587:62	3587:62	14	sample
LEAF_NODE	3587:62	3587:62	15	sample
LEAF_NODE	3587:68	3587:68	13	,
ARGUMENT	3588:46	3588:46	13	spp
FIELD	3588:46	3588:46	14	spp
LEAF_NODE	3588:46	3588:46	15	spp
LEAF_NODE	3588:49	3588:49	13	,
ARGUMENT	3588:51	3588:51	13	bps
FIELD	3588:51	3588:51	14	bps
LEAF_NODE	3588:51	3588:51	15	bps
LEAF_NODE	3588:54	3588:54	13	,
ARGUMENT	3588:57	3588:57	13	count
FIELD	3588:57	3588:57	14	count
LEAF_NODE	3588:57	3588:57	15	count
LEAF_NODE	3588:62	3588:62	13	,
ARGUMENT	3588:64	3588:64	13	first_col
FIELD	3588:64	3588:64	14	first_col
LEAF_NODE	3588:64	3588:64	15	first_col
LEAF_NODE	3588:73	3588:73	13	,
ARGUMENT	3588:75	3588:75	13	cols
FIELD	3588:75	3588:75	14	cols
LEAF_NODE	3588:75	3588:75	15	cols
LEAF_NODE	3588:79	3588:79	13	)
LEAF_NODE	3588:80	3588:80	10	)
STATEMENTS	3589:10	3589:10	10	
JUMP_STATEMENT	3589:10	3589:20	11	return ( 1 ) ;
KEYWORD	3589:10	3589:10	12	return
LEAF_NODE	3589:10	3589:10	13	return
DESTINATION	3589:17	3589:17	12	( 1 )
EXPR	3589:17	3589:19	13	( 1 )
LEAF_NODE	3589:17	3589:17	14	(
FIELD	3589:18	3589:18	14	1
LEAF_NODE	3589:18	3589:18	15	1
LEAF_NODE	3589:19	3589:19	14	)
LEAF_NODE	3589:20	3589:20	12	;
JUMP_STATEMENT	3590:7	3590:12	9	break DESTINATION ;
KEYWORD	3590:7	3590:7	10	break
LEAF_NODE	3590:7	3590:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3590:12	3590:12	10	;
LABEL	3591:6	3591:13	9	default :
LEAF_NODE	3591:6	3591:6	10	default
LEAF_NODE	3591:13	3591:13	10	:
EXPR_STATEMENT	3591:15	3591:91	9	TIFFError ( "extractContigSamplesToBuffer" , "Unsupported bit depth: %d" , bps ) ;
EXPR	3591:15	3591:15	10	TIFFError ( "extractContigSamplesToBuffer" , "Unsupported bit depth: %d" , bps )
FUNCTION_CALL	3591:15	3591:90	11	TIFFError ( "extractContigSamplesToBuffer" , "Unsupported bit depth: %d" , bps )
CALLEE	3591:15	3591:15	12	TIFFError
LEAF_NODE	3591:15	3591:15	13	TIFFError
LEAF_NODE	3591:25	3591:25	12	(
ARGUMENT	3591:26	3591:26	12	"extractContigSamplesToBuffer"
FIELD	3591:26	3591:26	13	"extractContigSamplesToBuffer"
LEAF_NODE	3591:26	3591:26	14	"extractContigSamplesToBuffer"
LEAF_NODE	3591:56	3591:56	12	,
ARGUMENT	3591:58	3591:58	12	"Unsupported bit depth: %d"
FIELD	3591:58	3591:58	13	"Unsupported bit depth: %d"
LEAF_NODE	3591:58	3591:58	14	"Unsupported bit depth: %d"
LEAF_NODE	3591:85	3591:85	12	,
ARGUMENT	3591:87	3591:87	12	bps
FIELD	3591:87	3591:87	13	bps
LEAF_NODE	3591:87	3591:87	14	bps
LEAF_NODE	3591:90	3591:90	12	)
LEAF_NODE	3591:91	3591:91	10	;
JUMP_STATEMENT	3592:8	3592:18	9	return ( 1 ) ;
KEYWORD	3592:8	3592:8	10	return
LEAF_NODE	3592:8	3592:8	11	return
DESTINATION	3592:15	3592:15	10	( 1 )
EXPR	3592:15	3592:17	11	( 1 )
LEAF_NODE	3592:15	3592:15	12	(
FIELD	3592:16	3592:16	12	1
LEAF_NODE	3592:16	3592:16	13	1
LEAF_NODE	3592:17	3592:17	12	)
LEAF_NODE	3592:18	3592:18	10	;
LEAF_NODE	3593:6	3593:6	8	}
SELECTION	3594:4	3595:6	6	
KEYWORD	3594:4	3594:4	7	if
LEAF_NODE	3594:4	3594:4	8	if
LEAF_NODE	3594:7	3594:7	7	(
CONDITION	3594:8	3594:8	7	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3594:8	3594:8	8	( dump -> outfile != NULL ) && ( dump -> level == 4 )
AND	3594:8	3594:35	9	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3594:8	3594:30	10	( dump -> outfile != NULL )
LEAF_NODE	3594:8	3594:8	11	(
FIELD	3594:9	3594:15	11	dump -> outfile
LEAF_NODE	3594:9	3594:9	12	dump
LEAF_NODE	3594:13	3594:13	12	->
LEAF_NODE	3594:15	3594:15	12	outfile
EQ_OPERATOR	3594:23	3594:23	11	!=
LEAF_NODE	3594:23	3594:23	12	!=
FIELD	3594:26	3594:26	11	NULL
LEAF_NODE	3594:26	3594:26	12	NULL
LEAF_NODE	3594:30	3594:30	11	)
LEAF_NODE	3594:32	3594:32	10	&&
EXPR	3594:35	3594:52	10	( dump -> level == 4 )
LEAF_NODE	3594:35	3594:35	11	(
FIELD	3594:36	3594:42	11	dump -> level
LEAF_NODE	3594:36	3594:36	12	dump
LEAF_NODE	3594:40	3594:40	12	->
LEAF_NODE	3594:42	3594:42	12	level
EQ_OPERATOR	3594:48	3594:48	11	==
LEAF_NODE	3594:48	3594:48	12	==
FIELD	3594:51	3594:51	11	4
LEAF_NODE	3594:51	3594:51	12	4
LEAF_NODE	3594:52	3594:52	11	)
LEAF_NODE	3594:53	3594:53	7	)
STATEMENTS	3595:6	3595:6	7	
EXPR_STATEMENT	3595:6	3595:72	8	dump_buffer ( dump -> outfile , dump -> format , 1 , dst_rowsize , row , dst ) ;
EXPR	3595:6	3595:6	9	dump_buffer ( dump -> outfile , dump -> format , 1 , dst_rowsize , row , dst )
FUNCTION_CALL	3595:6	3595:71	10	dump_buffer ( dump -> outfile , dump -> format , 1 , dst_rowsize , row , dst )
CALLEE	3595:6	3595:6	11	dump_buffer
LEAF_NODE	3595:6	3595:6	12	dump_buffer
LEAF_NODE	3595:17	3595:17	11	(
ARGUMENT	3595:18	3595:18	11	dump -> outfile
FIELD	3595:18	3595:24	12	dump -> outfile
LEAF_NODE	3595:18	3595:18	13	dump
LEAF_NODE	3595:22	3595:22	13	->
LEAF_NODE	3595:24	3595:24	13	outfile
LEAF_NODE	3595:31	3595:31	11	,
ARGUMENT	3595:33	3595:33	11	dump -> format
FIELD	3595:33	3595:39	12	dump -> format
LEAF_NODE	3595:33	3595:33	13	dump
LEAF_NODE	3595:37	3595:37	13	->
LEAF_NODE	3595:39	3595:39	13	format
LEAF_NODE	3595:45	3595:45	11	,
ARGUMENT	3595:47	3595:47	11	1
FIELD	3595:47	3595:47	12	1
LEAF_NODE	3595:47	3595:47	13	1
LEAF_NODE	3595:48	3595:48	11	,
ARGUMENT	3595:50	3595:50	11	dst_rowsize
FIELD	3595:50	3595:50	12	dst_rowsize
LEAF_NODE	3595:50	3595:50	13	dst_rowsize
LEAF_NODE	3595:61	3595:61	11	,
ARGUMENT	3595:63	3595:63	11	row
FIELD	3595:63	3595:63	12	row
LEAF_NODE	3595:63	3595:63	13	row
LEAF_NODE	3595:66	3595:66	11	,
ARGUMENT	3595:68	3595:68	11	dst
FIELD	3595:68	3595:68	12	dst
LEAF_NODE	3595:68	3595:68	13	dst
LEAF_NODE	3595:71	3595:71	11	)
LEAF_NODE	3595:72	3595:72	9	;
LEAF_NODE	3596:4	3596:4	5	}
JUMP_STATEMENT	3598:2	3598:12	3	return ( 0 ) ;
KEYWORD	3598:2	3598:2	4	return
LEAF_NODE	3598:2	3598:2	5	return
DESTINATION	3598:9	3598:9	4	( 0 )
EXPR	3598:9	3598:11	5	( 0 )
LEAF_NODE	3598:9	3598:9	6	(
FIELD	3598:10	3598:10	6	0
LEAF_NODE	3598:10	3598:10	7	0
LEAF_NODE	3598:11	3598:11	6	)
LEAF_NODE	3598:12	3598:12	4	;
LEAF_NODE	3599:2	3599:2	2	}
FUNCTION_DEF	3601:0	3676:2	1	
RETURN_TYPE	3601:0	3601:7	2	static int
LEAF_NODE	3601:0	3601:0	3	static
TYPE_NAME	3601:7	3601:7	3	int
LEAF_NODE	3601:7	3601:7	4	int
FUNCTION_NAME	3602:0	3602:0	2	extractContigSamplesToTileBuffer
LEAF_NODE	3602:0	3602:0	3	extractContigSamplesToTileBuffer
PARAMETER_LIST	3602:32	3604:65	2	( uint8 * out , uint8 * in , uint32 rows , uint32 cols , uint32 imagewidth , uint32 tilewidth , tsample_t sample , uint16 count , uint16 spp , uint16 bps , struct dump_opts * dump )
LEAF_NODE	3602:32	3602:32	3	(
PARAMETER_DECL	3602:33	3602:40	3	uint8 * out
TYPE	3602:33	3602:39	4	uint8 *
TYPE_NAME	3602:33	3602:33	5	uint8
LEAF_NODE	3602:33	3602:33	6	uint8
POINTER	3602:39	3602:39	5	*
LEAF_NODE	3602:39	3602:39	6	*
NAME	3602:40	3602:40	4	out
LEAF_NODE	3602:40	3602:40	5	out
LEAF_NODE	3602:43	3602:43	3	,
PARAMETER_DECL	3602:45	3602:52	3	uint8 * in
TYPE	3602:45	3602:51	4	uint8 *
TYPE_NAME	3602:45	3602:45	5	uint8
LEAF_NODE	3602:45	3602:45	6	uint8
POINTER	3602:51	3602:51	5	*
LEAF_NODE	3602:51	3602:51	6	*
NAME	3602:52	3602:52	4	in
LEAF_NODE	3602:52	3602:52	5	in
LEAF_NODE	3602:54	3602:54	3	,
PARAMETER_DECL	3602:56	3602:63	3	uint32 rows
TYPE	3602:56	3602:56	4	uint32
TYPE_NAME	3602:56	3602:56	5	uint32
LEAF_NODE	3602:56	3602:56	6	uint32
NAME	3602:63	3602:63	4	rows
LEAF_NODE	3602:63	3602:63	5	rows
LEAF_NODE	3602:67	3602:67	3	,
PARAMETER_DECL	3602:69	3602:76	3	uint32 cols
TYPE	3602:69	3602:69	4	uint32
TYPE_NAME	3602:69	3602:69	5	uint32
LEAF_NODE	3602:69	3602:69	6	uint32
NAME	3602:76	3602:76	4	cols
LEAF_NODE	3602:76	3602:76	5	cols
LEAF_NODE	3602:80	3602:80	3	,
PARAMETER_DECL	3603:28	3603:35	3	uint32 imagewidth
TYPE	3603:28	3603:28	4	uint32
TYPE_NAME	3603:28	3603:28	5	uint32
LEAF_NODE	3603:28	3603:28	6	uint32
NAME	3603:35	3603:35	4	imagewidth
LEAF_NODE	3603:35	3603:35	5	imagewidth
LEAF_NODE	3603:45	3603:45	3	,
PARAMETER_DECL	3603:47	3603:54	3	uint32 tilewidth
TYPE	3603:47	3603:47	4	uint32
TYPE_NAME	3603:47	3603:47	5	uint32
LEAF_NODE	3603:47	3603:47	6	uint32
NAME	3603:54	3603:54	4	tilewidth
LEAF_NODE	3603:54	3603:54	5	tilewidth
LEAF_NODE	3603:63	3603:63	3	,
PARAMETER_DECL	3603:65	3603:75	3	tsample_t sample
TYPE	3603:65	3603:65	4	tsample_t
TYPE_NAME	3603:65	3603:65	5	tsample_t
LEAF_NODE	3603:65	3603:65	6	tsample_t
NAME	3603:75	3603:75	4	sample
LEAF_NODE	3603:75	3603:75	5	sample
LEAF_NODE	3603:81	3603:81	3	,
PARAMETER_DECL	3604:5	3604:12	3	uint16 count
TYPE	3604:5	3604:5	4	uint16
TYPE_NAME	3604:5	3604:5	5	uint16
LEAF_NODE	3604:5	3604:5	6	uint16
NAME	3604:12	3604:12	4	count
LEAF_NODE	3604:12	3604:12	5	count
LEAF_NODE	3604:17	3604:17	3	,
PARAMETER_DECL	3604:19	3604:26	3	uint16 spp
TYPE	3604:19	3604:19	4	uint16
TYPE_NAME	3604:19	3604:19	5	uint16
LEAF_NODE	3604:19	3604:19	6	uint16
NAME	3604:26	3604:26	4	spp
LEAF_NODE	3604:26	3604:26	5	spp
LEAF_NODE	3604:29	3604:29	3	,
PARAMETER_DECL	3604:31	3604:38	3	uint16 bps
TYPE	3604:31	3604:31	4	uint16
TYPE_NAME	3604:31	3604:31	5	uint16
LEAF_NODE	3604:31	3604:31	6	uint16
NAME	3604:38	3604:38	4	bps
LEAF_NODE	3604:38	3604:38	5	bps
LEAF_NODE	3604:41	3604:41	3	,
PARAMETER_DECL	3604:43	3604:61	3	struct dump_opts * dump
TYPE	3604:43	3604:60	4	struct dump_opts *
TYPE_NAME	3604:43	3604:50	5	struct dump_opts
LEAF_NODE	3604:43	3604:43	6	struct
LEAF_NODE	3604:50	3604:50	6	dump_opts
POINTER	3604:60	3604:60	5	*
LEAF_NODE	3604:60	3604:60	6	*
NAME	3604:61	3604:61	4	dump
LEAF_NODE	3604:61	3604:61	5	dump
LEAF_NODE	3604:65	3604:65	3	)
LEAF_NODE	3605:2	3605:2	2	{
STATEMENTS	3606:2	3675:2	2	
SIMPLE_DECL	3606:2	3606:55	3	int shift_width , int bytes_per_sample , int bytes_per_pixel ;
INIT_DECL_LIST	3606:2	3606:2	4	int shift_width , int bytes_per_sample , int bytes_per_pixel
VAR_DECL	3606:2	3606:9	5	int shift_width
TYPE	3606:2	3606:2	6	int
TYPE_NAME	3606:2	3606:2	7	int
LEAF_NODE	3606:2	3606:2	8	int
NAME	3606:9	3606:9	6	shift_width
LEAF_NODE	3606:9	3606:9	7	shift_width
LEAF_NODE	3606:20	3606:20	5	,
INIT_DECL_LIST	3606:2	3606:2	5	int bytes_per_sample , int bytes_per_pixel
VAR_DECL	3606:2	3606:22	6	int bytes_per_sample
TYPE	3606:2	3606:2	7	int
TYPE_NAME	3606:2	3606:2	8	int
LEAF_NODE	3606:2	3606:2	9	int
NAME	3606:22	3606:22	7	bytes_per_sample
LEAF_NODE	3606:22	3606:22	8	bytes_per_sample
LEAF_NODE	3606:38	3606:38	6	,
VAR_DECL	3606:2	3606:40	6	int bytes_per_pixel
TYPE	3606:2	3606:2	7	int
TYPE_NAME	3606:2	3606:2	8	int
LEAF_NODE	3606:2	3606:2	9	int
NAME	3606:40	3606:40	7	bytes_per_pixel
LEAF_NODE	3606:40	3606:40	8	bytes_per_pixel
LEAF_NODE	3606:55	3606:55	4	;
SIMPLE_DECL	3607:2	3607:37	3	uint32 src_rowsize , uint32 src_offset , uint32 row ;
INIT_DECL_LIST	3607:2	3607:2	4	uint32 src_rowsize , uint32 src_offset , uint32 row
VAR_DECL	3607:2	3607:9	5	uint32 src_rowsize
TYPE	3607:2	3607:2	6	uint32
TYPE_NAME	3607:2	3607:2	7	uint32
LEAF_NODE	3607:2	3607:2	8	uint32
NAME	3607:9	3607:9	6	src_rowsize
LEAF_NODE	3607:9	3607:9	7	src_rowsize
LEAF_NODE	3607:20	3607:20	5	,
INIT_DECL_LIST	3607:2	3607:2	5	uint32 src_offset , uint32 row
VAR_DECL	3607:2	3607:22	6	uint32 src_offset
TYPE	3607:2	3607:2	7	uint32
TYPE_NAME	3607:2	3607:2	8	uint32
LEAF_NODE	3607:2	3607:2	9	uint32
NAME	3607:22	3607:22	7	src_offset
LEAF_NODE	3607:22	3607:22	8	src_offset
LEAF_NODE	3607:32	3607:32	6	,
VAR_DECL	3607:2	3607:34	6	uint32 row
TYPE	3607:2	3607:2	7	uint32
TYPE_NAME	3607:2	3607:2	8	uint32
LEAF_NODE	3607:2	3607:2	9	uint32
NAME	3607:34	3607:34	7	row
LEAF_NODE	3607:34	3607:34	8	row
LEAF_NODE	3607:37	3607:37	4	;
SIMPLE_DECL	3608:2	3608:32	3	uint32 dst_rowsize , uint32 dst_offset ;
INIT_DECL_LIST	3608:2	3608:2	4	uint32 dst_rowsize , uint32 dst_offset
VAR_DECL	3608:2	3608:9	5	uint32 dst_rowsize
TYPE	3608:2	3608:2	6	uint32
TYPE_NAME	3608:2	3608:2	7	uint32
LEAF_NODE	3608:2	3608:2	8	uint32
NAME	3608:9	3608:9	6	dst_rowsize
LEAF_NODE	3608:9	3608:9	7	dst_rowsize
LEAF_NODE	3608:20	3608:20	5	,
VAR_DECL	3608:2	3608:22	5	uint32 dst_offset
TYPE	3608:2	3608:2	6	uint32
TYPE_NAME	3608:2	3608:2	7	uint32
LEAF_NODE	3608:2	3608:2	8	uint32
NAME	3608:22	3608:22	6	dst_offset
LEAF_NODE	3608:22	3608:22	7	dst_offset
LEAF_NODE	3608:32	3608:32	4	;
SIMPLE_DECL	3609:2	3609:18	3	uint8 * src , uint8 * dst ;
INIT_DECL_LIST	3609:2	3609:2	4	uint8 * src , uint8 * dst
VAR_DECL	3609:2	3609:9	5	uint8 * src
TYPE	3609:2	3609:8	6	uint8 *
TYPE_NAME	3609:2	3609:2	7	uint8
LEAF_NODE	3609:2	3609:2	8	uint8
POINTER	3609:8	3609:8	7	*
LEAF_NODE	3609:8	3609:8	8	*
NAME	3609:9	3609:9	6	src
LEAF_NODE	3609:9	3609:9	7	src
LEAF_NODE	3609:12	3609:12	5	,
VAR_DECL	3609:2	3609:15	5	uint8 * dst
TYPE	3609:2	3609:14	6	uint8 *
TYPE_NAME	3609:2	3609:2	7	uint8
LEAF_NODE	3609:2	3609:2	8	uint8
POINTER	3609:14	3609:14	7	*
LEAF_NODE	3609:14	3609:14	8	*
NAME	3609:15	3609:15	6	dst
LEAF_NODE	3609:15	3609:15	7	dst
LEAF_NODE	3609:18	3609:18	4	;
EXPR_STATEMENT	3611:2	3611:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	3611:2	3611:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	3611:2	3611:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	3611:2	3611:2	6	bytes_per_sample
FIELD	3611:2	3611:2	7	bytes_per_sample
LEAF_NODE	3611:2	3611:2	8	bytes_per_sample
ASSIGN_OP	3611:19	3611:19	6	=
LEAF_NODE	3611:19	3611:19	7	=
RVAL	3611:21	3611:33	6	( bps + 7 ) / 8
LEAF_NODE	3611:21	3611:21	7	(
FIELD	3611:22	3611:22	7	bps
LEAF_NODE	3611:22	3611:22	8	bps
LEAF_NODE	3611:26	3611:26	7	+
FIELD	3611:28	3611:28	7	7
LEAF_NODE	3611:28	3611:28	8	7
LEAF_NODE	3611:29	3611:29	7	)
LEAF_NODE	3611:31	3611:31	7	/
FIELD	3611:33	3611:33	7	8
LEAF_NODE	3611:33	3611:33	8	8
LEAF_NODE	3611:34	3611:34	4	;
EXPR_STATEMENT	3612:2	3612:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	3612:2	3612:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	3612:2	3612:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	3612:2	3612:2	6	bytes_per_pixel
FIELD	3612:2	3612:2	7	bytes_per_pixel
LEAF_NODE	3612:2	3612:2	8	bytes_per_pixel
ASSIGN_OP	3612:19	3612:19	6	=
LEAF_NODE	3612:19	3612:19	7	=
RVAL	3612:21	3612:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	3612:21	3612:21	7	(
LEAF_NODE	3612:22	3612:22	7	(
FIELD	3612:23	3612:23	7	bps
LEAF_NODE	3612:23	3612:23	8	bps
LEAF_NODE	3612:27	3612:27	7	*
FIELD	3612:29	3612:29	7	spp
LEAF_NODE	3612:29	3612:29	8	spp
LEAF_NODE	3612:32	3612:32	7	)
LEAF_NODE	3612:34	3612:34	7	+
FIELD	3612:36	3612:36	7	7
LEAF_NODE	3612:36	3612:36	8	7
LEAF_NODE	3612:37	3612:37	7	)
LEAF_NODE	3612:39	3612:39	7	/
FIELD	3612:41	3612:41	7	8
LEAF_NODE	3612:41	3612:41	8	8
LEAF_NODE	3612:42	3612:42	4	;
SELECTION	3613:2	3614:4	3	
KEYWORD	3613:2	3613:2	4	if
LEAF_NODE	3613:2	3613:2	5	if
LEAF_NODE	3613:5	3613:5	4	(
CONDITION	3613:6	3613:6	4	( bps % 8 ) == 0
EXPR	3613:6	3613:19	5	( bps % 8 ) == 0
LEAF_NODE	3613:6	3613:6	6	(
FIELD	3613:7	3613:7	6	bps
LEAF_NODE	3613:7	3613:7	7	bps
LEAF_NODE	3613:11	3613:11	6	%
FIELD	3613:13	3613:13	6	8
LEAF_NODE	3613:13	3613:13	7	8
LEAF_NODE	3613:14	3613:14	6	)
EQ_OPERATOR	3613:16	3613:16	6	==
LEAF_NODE	3613:16	3613:16	7	==
FIELD	3613:19	3613:19	6	0
LEAF_NODE	3613:19	3613:19	7	0
LEAF_NODE	3613:20	3613:20	4	)
STATEMENTS	3614:4	3614:4	4	
EXPR_STATEMENT	3614:4	3614:19	5	shift_width = 0 ;
EXPR	3614:4	3614:4	6	shift_width = 0
ASSIGN	3614:4	3614:18	7	shift_width = 0
LVAL	3614:4	3614:4	8	shift_width
FIELD	3614:4	3614:4	9	shift_width
LEAF_NODE	3614:4	3614:4	10	shift_width
ASSIGN_OP	3614:16	3614:16	8	=
LEAF_NODE	3614:16	3614:16	9	=
RVAL	3614:18	3614:18	8	0
FIELD	3614:18	3614:18	9	0
LEAF_NODE	3614:18	3614:18	10	0
LEAF_NODE	3614:19	3614:19	6	;
SELECTION	3615:2	3616:4	3	
KEYWORD	3615:2	3615:2	4	else
LEAF_NODE	3615:2	3615:2	5	else
STATEMENTS	3616:4	3621:4	4	
LEAF_NODE	3616:4	3616:4	5	{
STATEMENTS	3617:4	3619:4	5	
SELECTION	3617:4	3618:6	6	
KEYWORD	3617:4	3617:4	7	if
LEAF_NODE	3617:4	3617:4	8	if
LEAF_NODE	3617:7	3617:7	7	(
CONDITION	3617:8	3617:8	7	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	3617:8	3617:47	8	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	3617:8	3617:8	9	bytes_per_pixel
LEAF_NODE	3617:8	3617:8	10	bytes_per_pixel
REL_OPERATOR	3617:24	3617:24	9	<
LEAF_NODE	3617:24	3617:24	10	<
LEAF_NODE	3617:26	3617:26	9	(
FIELD	3617:27	3617:27	9	bytes_per_sample
LEAF_NODE	3617:27	3617:27	10	bytes_per_sample
LEAF_NODE	3617:44	3617:44	9	+
FIELD	3617:46	3617:46	9	1
LEAF_NODE	3617:46	3617:46	10	1
LEAF_NODE	3617:47	3617:47	9	)
LEAF_NODE	3617:48	3617:48	7	)
STATEMENTS	3618:6	3618:6	7	
EXPR_STATEMENT	3618:6	3618:35	8	shift_width = bytes_per_pixel ;
EXPR	3618:6	3618:6	9	shift_width = bytes_per_pixel
ASSIGN	3618:6	3618:20	10	shift_width = bytes_per_pixel
LVAL	3618:6	3618:6	11	shift_width
FIELD	3618:6	3618:6	12	shift_width
LEAF_NODE	3618:6	3618:6	13	shift_width
ASSIGN_OP	3618:18	3618:18	11	=
LEAF_NODE	3618:18	3618:18	12	=
RVAL	3618:20	3618:20	11	bytes_per_pixel
FIELD	3618:20	3618:20	12	bytes_per_pixel
LEAF_NODE	3618:20	3618:20	13	bytes_per_pixel
LEAF_NODE	3618:35	3618:35	9	;
SELECTION	3619:4	3620:6	6	
KEYWORD	3619:4	3619:4	7	else
LEAF_NODE	3619:4	3619:4	8	else
STATEMENTS	3620:6	3620:6	7	
EXPR_STATEMENT	3620:6	3620:40	8	shift_width = bytes_per_sample + 1 ;
EXPR	3620:6	3620:6	9	shift_width = bytes_per_sample + 1
ASSIGN	3620:6	3620:20	10	shift_width = bytes_per_sample + 1
LVAL	3620:6	3620:6	11	shift_width
FIELD	3620:6	3620:6	12	shift_width
LEAF_NODE	3620:6	3620:6	13	shift_width
ASSIGN_OP	3620:18	3620:18	11	=
LEAF_NODE	3620:18	3620:18	12	=
RVAL	3620:20	3620:39	11	bytes_per_sample + 1
FIELD	3620:20	3620:20	12	bytes_per_sample
LEAF_NODE	3620:20	3620:20	13	bytes_per_sample
LEAF_NODE	3620:37	3620:37	12	+
FIELD	3620:39	3620:39	12	1
LEAF_NODE	3620:39	3620:39	13	1
LEAF_NODE	3620:40	3620:40	9	;
LEAF_NODE	3621:4	3621:4	5	}
SELECTION	3623:2	3624:4	3	
KEYWORD	3623:2	3623:2	4	if
LEAF_NODE	3623:2	3623:2	5	if
LEAF_NODE	3623:5	3623:5	4	(
CONDITION	3623:6	3623:6	4	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3623:6	3623:6	5	( dump -> outfile != NULL ) && ( dump -> level == 4 )
AND	3623:6	3623:33	6	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3623:6	3623:28	7	( dump -> outfile != NULL )
LEAF_NODE	3623:6	3623:6	8	(
FIELD	3623:7	3623:13	8	dump -> outfile
LEAF_NODE	3623:7	3623:7	9	dump
LEAF_NODE	3623:11	3623:11	9	->
LEAF_NODE	3623:13	3623:13	9	outfile
EQ_OPERATOR	3623:21	3623:21	8	!=
LEAF_NODE	3623:21	3623:21	9	!=
FIELD	3623:24	3623:24	8	NULL
LEAF_NODE	3623:24	3623:24	9	NULL
LEAF_NODE	3623:28	3623:28	8	)
LEAF_NODE	3623:30	3623:30	7	&&
EXPR	3623:33	3623:50	7	( dump -> level == 4 )
LEAF_NODE	3623:33	3623:33	8	(
FIELD	3623:34	3623:40	8	dump -> level
LEAF_NODE	3623:34	3623:34	9	dump
LEAF_NODE	3623:38	3623:38	9	->
LEAF_NODE	3623:40	3623:40	9	level
EQ_OPERATOR	3623:46	3623:46	8	==
LEAF_NODE	3623:46	3623:46	9	==
FIELD	3623:49	3623:49	8	4
LEAF_NODE	3623:49	3623:49	9	4
LEAF_NODE	3623:50	3623:50	8	)
LEAF_NODE	3623:51	3623:51	4	)
STATEMENTS	3624:4	3627:4	4	
LEAF_NODE	3624:4	3624:4	5	{
STATEMENTS	3625:4	3625:4	5	
EXPR_STATEMENT	3625:4	3626:59	6	dump_info ( dump -> outfile , dump -> format , "extractContigSamplesToTileBuffer" , "Sample %d, %d rows" , sample + 1 , rows + 1 ) ;
EXPR	3625:4	3625:4	7	dump_info ( dump -> outfile , dump -> format , "extractContigSamplesToTileBuffer" , "Sample %d, %d rows" , sample + 1 , rows + 1 )
FUNCTION_CALL	3625:4	3626:58	8	dump_info ( dump -> outfile , dump -> format , "extractContigSamplesToTileBuffer" , "Sample %d, %d rows" , sample + 1 , rows + 1 )
CALLEE	3625:4	3625:4	9	dump_info
LEAF_NODE	3625:4	3625:4	10	dump_info
LEAF_NODE	3625:15	3625:15	9	(
ARGUMENT	3625:16	3625:16	9	dump -> outfile
FIELD	3625:16	3625:22	10	dump -> outfile
LEAF_NODE	3625:16	3625:16	11	dump
LEAF_NODE	3625:20	3625:20	11	->
LEAF_NODE	3625:22	3625:22	11	outfile
LEAF_NODE	3625:29	3625:29	9	,
ARGUMENT	3625:31	3625:31	9	dump -> format
FIELD	3625:31	3625:37	10	dump -> format
LEAF_NODE	3625:31	3625:31	11	dump
LEAF_NODE	3625:35	3625:35	11	->
LEAF_NODE	3625:37	3625:37	11	format
LEAF_NODE	3625:43	3625:43	9	,
ARGUMENT	3625:45	3625:45	9	"extractContigSamplesToTileBuffer"
FIELD	3625:45	3625:45	10	"extractContigSamplesToTileBuffer"
LEAF_NODE	3625:45	3625:45	11	"extractContigSamplesToTileBuffer"
LEAF_NODE	3625:79	3625:79	9	,
ARGUMENT	3626:16	3626:16	9	"Sample %d, %d rows"
FIELD	3626:16	3626:16	10	"Sample %d, %d rows"
LEAF_NODE	3626:16	3626:16	11	"Sample %d, %d rows"
LEAF_NODE	3626:36	3626:36	9	,
ARGUMENT	3626:38	3626:47	9	sample + 1
FIELD	3626:38	3626:38	10	sample
LEAF_NODE	3626:38	3626:38	11	sample
LEAF_NODE	3626:45	3626:45	10	+
FIELD	3626:47	3626:47	10	1
LEAF_NODE	3626:47	3626:47	11	1
LEAF_NODE	3626:48	3626:48	9	,
ARGUMENT	3626:50	3626:57	9	rows + 1
FIELD	3626:50	3626:50	10	rows
LEAF_NODE	3626:50	3626:50	11	rows
LEAF_NODE	3626:55	3626:55	10	+
FIELD	3626:57	3626:57	10	1
LEAF_NODE	3626:57	3626:57	11	1
LEAF_NODE	3626:58	3626:58	9	)
LEAF_NODE	3626:59	3626:59	7	;
LEAF_NODE	3627:4	3627:4	5	}
LEAF_NODE	3629:2	3629:2	3	src_rowsize
LEAF_NODE	3629:14	3629:14	3	=
LEAF_NODE	3629:16	3629:16	3	(
LEAF_NODE	3629:17	3629:17	3	(
LEAF_NODE	3629:18	3629:18	3	bps
LEAF_NODE	3629:22	3629:22	3	*
LEAF_NODE	3629:24	3629:24	3	spp
LEAF_NODE	3629:28	3629:28	3	*
LEAF_NODE	3629:30	3629:30	3	imagewidth
LEAF_NODE	3629:40	3629:40	3	)
LEAF_NODE	3629:42	3629:42	3	+
LEAF_NODE	3629:44	3629:44	3	7
LEAF_NODE	3629:45	3629:45	3	)
LEAF_NODE	3629:47	3629:47	3	/
EXPR_STATEMENT	3629:49	3629:50	3	8 ;
EXPR	3629:49	3629:49	4	8
FIELD	3629:49	3629:49	5	8
LEAF_NODE	3629:49	3629:49	6	8
LEAF_NODE	3629:50	3629:50	4	;
LEAF_NODE	3630:2	3630:2	3	dst_rowsize
LEAF_NODE	3630:14	3630:14	3	=
LEAF_NODE	3630:16	3630:16	3	(
LEAF_NODE	3630:17	3630:17	3	(
LEAF_NODE	3630:18	3630:18	3	bps
LEAF_NODE	3630:22	3630:22	3	*
LEAF_NODE	3630:24	3630:24	3	tilewidth
LEAF_NODE	3630:34	3630:34	3	*
LEAF_NODE	3630:36	3630:36	3	count
LEAF_NODE	3630:41	3630:41	3	)
LEAF_NODE	3630:43	3630:43	3	+
LEAF_NODE	3630:45	3630:45	3	7
LEAF_NODE	3630:46	3630:46	3	)
LEAF_NODE	3630:48	3630:48	3	/
EXPR_STATEMENT	3630:50	3630:51	3	8 ;
EXPR	3630:50	3630:50	4	8
FIELD	3630:50	3630:50	5	8
LEAF_NODE	3630:50	3630:50	6	8
LEAF_NODE	3630:51	3630:51	4	;
ITERATION	3632:2	3633:4	3	
KEYWORD	3632:2	3632:2	4	for
LEAF_NODE	3632:2	3632:2	5	for
LEAF_NODE	3632:6	3632:6	4	(
FOR_INIT	3632:7	3632:14	4	row = 0 ;
EXPR	3632:7	3632:7	5	row = 0
ASSIGN	3632:7	3632:13	6	row = 0
LVAL	3632:7	3632:7	7	row
FIELD	3632:7	3632:7	8	row
LEAF_NODE	3632:7	3632:7	9	row
ASSIGN_OP	3632:11	3632:11	7	=
LEAF_NODE	3632:11	3632:11	8	=
RVAL	3632:13	3632:13	7	0
FIELD	3632:13	3632:13	8	0
LEAF_NODE	3632:13	3632:13	9	0
LEAF_NODE	3632:14	3632:14	5	;
CONDITION	3632:16	3632:16	4	row < rows
EXPR	3632:16	3632:22	5	row < rows
FIELD	3632:16	3632:16	6	row
LEAF_NODE	3632:16	3632:16	7	row
REL_OPERATOR	3632:20	3632:20	6	<
LEAF_NODE	3632:20	3632:20	7	<
FIELD	3632:22	3632:22	6	rows
LEAF_NODE	3632:22	3632:22	7	rows
LEAF_NODE	3632:26	3632:26	4	;
FOR_EXPR	3632:28	3632:28	4	row ++
EXPR	3632:28	3632:28	5	row ++
FIELD	3632:28	3632:31	6	row ++
LEAF_NODE	3632:28	3632:28	7	row
LEAF_NODE	3632:31	3632:31	7	++
LEAF_NODE	3632:33	3632:33	4	)
STATEMENTS	3633:4	3673:4	4	
LEAF_NODE	3633:4	3633:4	5	{
STATEMENTS	3634:4	3671:4	5	
EXPR_STATEMENT	3634:4	3634:34	6	src_offset = row * src_rowsize ;
EXPR	3634:4	3634:4	7	src_offset = row * src_rowsize
ASSIGN	3634:4	3634:17	8	src_offset = row * src_rowsize
LVAL	3634:4	3634:4	9	src_offset
FIELD	3634:4	3634:4	10	src_offset
LEAF_NODE	3634:4	3634:4	11	src_offset
ASSIGN_OP	3634:15	3634:15	9	=
LEAF_NODE	3634:15	3634:15	10	=
RVAL	3634:17	3634:23	9	row * src_rowsize
FIELD	3634:17	3634:17	10	row
LEAF_NODE	3634:17	3634:17	11	row
LEAF_NODE	3634:21	3634:21	10	*
FIELD	3634:23	3634:23	10	src_rowsize
LEAF_NODE	3634:23	3634:23	11	src_rowsize
LEAF_NODE	3634:34	3634:34	7	;
EXPR_STATEMENT	3635:4	3635:34	6	dst_offset = row * dst_rowsize ;
EXPR	3635:4	3635:4	7	dst_offset = row * dst_rowsize
ASSIGN	3635:4	3635:17	8	dst_offset = row * dst_rowsize
LVAL	3635:4	3635:4	9	dst_offset
FIELD	3635:4	3635:4	10	dst_offset
LEAF_NODE	3635:4	3635:4	11	dst_offset
ASSIGN_OP	3635:15	3635:15	9	=
LEAF_NODE	3635:15	3635:15	10	=
RVAL	3635:17	3635:23	9	row * dst_rowsize
FIELD	3635:17	3635:17	10	row
LEAF_NODE	3635:17	3635:17	11	row
LEAF_NODE	3635:21	3635:21	10	*
FIELD	3635:23	3635:23	10	dst_rowsize
LEAF_NODE	3635:23	3635:23	11	dst_rowsize
LEAF_NODE	3635:34	3635:34	7	;
EXPR_STATEMENT	3636:4	3636:25	6	src = in + src_offset ;
EXPR	3636:4	3636:4	7	src = in + src_offset
ASSIGN	3636:4	3636:10	8	src = in + src_offset
LVAL	3636:4	3636:4	9	src
FIELD	3636:4	3636:4	10	src
LEAF_NODE	3636:4	3636:4	11	src
ASSIGN_OP	3636:8	3636:8	9	=
LEAF_NODE	3636:8	3636:8	10	=
RVAL	3636:10	3636:15	9	in + src_offset
FIELD	3636:10	3636:10	10	in
LEAF_NODE	3636:10	3636:10	11	in
LEAF_NODE	3636:13	3636:13	10	+
FIELD	3636:15	3636:15	10	src_offset
LEAF_NODE	3636:15	3636:15	11	src_offset
LEAF_NODE	3636:25	3636:25	7	;
EXPR_STATEMENT	3637:4	3637:26	6	dst = out + dst_offset ;
EXPR	3637:4	3637:4	7	dst = out + dst_offset
ASSIGN	3637:4	3637:10	8	dst = out + dst_offset
LVAL	3637:4	3637:4	9	dst
FIELD	3637:4	3637:4	10	dst
LEAF_NODE	3637:4	3637:4	11	dst
ASSIGN_OP	3637:8	3637:8	9	=
LEAF_NODE	3637:8	3637:8	10	=
RVAL	3637:10	3637:16	9	out + dst_offset
FIELD	3637:10	3637:10	10	out
LEAF_NODE	3637:10	3637:10	11	out
LEAF_NODE	3637:14	3637:14	10	+
FIELD	3637:16	3637:16	10	dst_offset
LEAF_NODE	3637:16	3637:16	11	dst_offset
LEAF_NODE	3637:26	3637:26	7	;
SELECTION	3640:4	3641:6	6	
KEYWORD	3640:4	3640:4	7	switch
LEAF_NODE	3640:4	3640:4	8	switch
LEAF_NODE	3640:11	3640:11	7	(
CONDITION	3640:12	3640:12	7	shift_width
EXPR	3640:12	3640:12	8	shift_width
FIELD	3640:12	3640:12	9	shift_width
LEAF_NODE	3640:12	3640:12	10	shift_width
LEAF_NODE	3640:23	3640:23	7	)
STATEMENTS	3641:6	3670:6	7	
LEAF_NODE	3641:6	3641:6	8	{
STATEMENTS	3642:6	3669:8	8	
LABEL	3642:6	3642:12	9	case 0 :
LEAF_NODE	3642:6	3642:6	10	case
LEAF_NODE	3642:11	3642:11	10	0
LEAF_NODE	3642:12	3642:12	10	:
SELECTION	3642:14	3644:16	9	
KEYWORD	3642:14	3642:14	10	if
LEAF_NODE	3642:14	3642:14	11	if
LEAF_NODE	3642:17	3642:17	10	(
CONDITION	3642:18	3642:18	10	extractContigSamplesBytes ( src , dst , cols , sample , spp , bps , count , 0 , cols )
EXPR	3642:18	3642:18	11	extractContigSamplesBytes ( src , dst , cols , sample , spp , bps , count , 0 , cols )
FUNCTION_CALL	3642:18	3643:70	12	extractContigSamplesBytes ( src , dst , cols , sample , spp , bps , count , 0 , cols )
CALLEE	3642:18	3642:18	13	extractContigSamplesBytes
LEAF_NODE	3642:18	3642:18	14	extractContigSamplesBytes
LEAF_NODE	3642:44	3642:44	13	(
ARGUMENT	3642:45	3642:45	13	src
FIELD	3642:45	3642:45	14	src
LEAF_NODE	3642:45	3642:45	15	src
LEAF_NODE	3642:48	3642:48	13	,
ARGUMENT	3642:50	3642:50	13	dst
FIELD	3642:50	3642:50	14	dst
LEAF_NODE	3642:50	3642:50	15	dst
LEAF_NODE	3642:53	3642:53	13	,
ARGUMENT	3642:55	3642:55	13	cols
FIELD	3642:55	3642:55	14	cols
LEAF_NODE	3642:55	3642:55	15	cols
LEAF_NODE	3642:59	3642:59	13	,
ARGUMENT	3642:61	3642:61	13	sample
FIELD	3642:61	3642:61	14	sample
LEAF_NODE	3642:61	3642:61	15	sample
LEAF_NODE	3642:67	3642:67	13	,
ARGUMENT	3643:45	3643:45	13	spp
FIELD	3643:45	3643:45	14	spp
LEAF_NODE	3643:45	3643:45	15	spp
LEAF_NODE	3643:48	3643:48	13	,
ARGUMENT	3643:50	3643:50	13	bps
FIELD	3643:50	3643:50	14	bps
LEAF_NODE	3643:50	3643:50	15	bps
LEAF_NODE	3643:53	3643:53	13	,
ARGUMENT	3643:56	3643:56	13	count
FIELD	3643:56	3643:56	14	count
LEAF_NODE	3643:56	3643:56	15	count
LEAF_NODE	3643:61	3643:61	13	,
ARGUMENT	3643:63	3643:63	13	0
FIELD	3643:63	3643:63	14	0
LEAF_NODE	3643:63	3643:63	15	0
LEAF_NODE	3643:64	3643:64	13	,
ARGUMENT	3643:66	3643:66	13	cols
FIELD	3643:66	3643:66	14	cols
LEAF_NODE	3643:66	3643:66	15	cols
LEAF_NODE	3643:70	3643:70	13	)
LEAF_NODE	3643:71	3643:71	10	)
STATEMENTS	3644:16	3644:16	10	
JUMP_STATEMENT	3644:16	3644:26	11	return ( 1 ) ;
KEYWORD	3644:16	3644:16	12	return
LEAF_NODE	3644:16	3644:16	13	return
DESTINATION	3644:23	3644:23	12	( 1 )
EXPR	3644:23	3644:25	13	( 1 )
LEAF_NODE	3644:23	3644:23	14	(
FIELD	3644:24	3644:24	14	1
LEAF_NODE	3644:24	3644:24	15	1
LEAF_NODE	3644:25	3644:25	14	)
LEAF_NODE	3644:26	3644:26	12	;
JUMP_STATEMENT	3645:8	3645:13	9	break DESTINATION ;
KEYWORD	3645:8	3645:8	10	break
LEAF_NODE	3645:8	3645:8	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3645:13	3645:13	10	;
LABEL	3646:6	3646:12	9	case 1 :
LEAF_NODE	3646:6	3646:6	10	case
LEAF_NODE	3646:11	3646:11	10	1
LEAF_NODE	3646:12	3646:12	10	:
SELECTION	3646:14	3647:16	9	
KEYWORD	3646:14	3646:14	10	if
LEAF_NODE	3646:14	3646:14	11	if
LEAF_NODE	3646:17	3646:17	10	(
CONDITION	3646:18	3646:18	10	bps == 1
EXPR	3646:18	3646:25	11	bps == 1
FIELD	3646:18	3646:18	12	bps
LEAF_NODE	3646:18	3646:18	13	bps
EQ_OPERATOR	3646:22	3646:22	12	==
LEAF_NODE	3646:22	3646:22	13	==
FIELD	3646:25	3646:25	12	1
LEAF_NODE	3646:25	3646:25	13	1
LEAF_NODE	3646:26	3646:26	10	)
STATEMENTS	3647:16	3652:2	10	
LEAF_NODE	3647:16	3647:16	11	{
STATEMENTS	3648:16	3651:9	11	
SELECTION	3648:16	3650:11	12	
KEYWORD	3648:16	3648:16	13	if
LEAF_NODE	3648:16	3648:16	14	if
LEAF_NODE	3648:19	3648:19	13	(
CONDITION	3648:20	3648:20	13	extractContigSamples8bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
EXPR	3648:20	3648:20	14	extractContigSamples8bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
FUNCTION_CALL	3648:20	3649:71	15	extractContigSamples8bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
CALLEE	3648:20	3648:20	16	extractContigSamples8bits
LEAF_NODE	3648:20	3648:20	17	extractContigSamples8bits
LEAF_NODE	3648:46	3648:46	16	(
ARGUMENT	3648:47	3648:47	16	src
FIELD	3648:47	3648:47	17	src
LEAF_NODE	3648:47	3648:47	18	src
LEAF_NODE	3648:50	3648:50	16	,
ARGUMENT	3648:52	3648:52	16	dst
FIELD	3648:52	3648:52	17	dst
LEAF_NODE	3648:52	3648:52	18	dst
LEAF_NODE	3648:55	3648:55	16	,
ARGUMENT	3648:57	3648:57	16	cols
FIELD	3648:57	3648:57	17	cols
LEAF_NODE	3648:57	3648:57	18	cols
LEAF_NODE	3648:61	3648:61	16	,
ARGUMENT	3648:63	3648:63	16	sample
FIELD	3648:63	3648:63	17	sample
LEAF_NODE	3648:63	3648:63	18	sample
LEAF_NODE	3648:69	3648:69	16	,
ARGUMENT	3649:47	3649:47	16	spp
FIELD	3649:47	3649:47	17	spp
LEAF_NODE	3649:47	3649:47	18	spp
LEAF_NODE	3649:50	3649:50	16	,
ARGUMENT	3649:52	3649:52	16	bps
FIELD	3649:52	3649:52	17	bps
LEAF_NODE	3649:52	3649:52	18	bps
LEAF_NODE	3649:55	3649:55	16	,
ARGUMENT	3649:57	3649:57	16	count
FIELD	3649:57	3649:57	17	count
LEAF_NODE	3649:57	3649:57	18	count
LEAF_NODE	3649:62	3649:62	16	,
ARGUMENT	3649:64	3649:64	16	0
FIELD	3649:64	3649:64	17	0
LEAF_NODE	3649:64	3649:64	18	0
LEAF_NODE	3649:65	3649:65	16	,
ARGUMENT	3649:67	3649:67	16	cols
FIELD	3649:67	3649:67	17	cols
LEAF_NODE	3649:67	3649:67	18	cols
LEAF_NODE	3649:71	3649:71	16	)
LEAF_NODE	3649:72	3649:72	13	)
STATEMENTS	3650:11	3650:11	13	
JUMP_STATEMENT	3650:11	3650:21	14	return ( 1 ) ;
KEYWORD	3650:11	3650:11	15	return
LEAF_NODE	3650:11	3650:11	16	return
DESTINATION	3650:18	3650:18	15	( 1 )
EXPR	3650:18	3650:20	16	( 1 )
LEAF_NODE	3650:18	3650:18	17	(
FIELD	3650:19	3650:19	17	1
LEAF_NODE	3650:19	3650:19	18	1
LEAF_NODE	3650:20	3650:20	17	)
LEAF_NODE	3650:21	3650:21	15	;
JUMP_STATEMENT	3651:9	3651:14	12	break DESTINATION ;
KEYWORD	3651:9	3651:9	13	break
LEAF_NODE	3651:9	3651:9	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3651:14	3651:14	13	;
LEAF_NODE	3652:2	3652:2	11	}
SELECTION	3653:7	3654:17	9	
KEYWORD	3653:7	3653:7	10	else
LEAF_NODE	3653:7	3653:7	11	else
STATEMENTS	3654:17	3654:17	10	
SELECTION	3654:17	3656:10	11	
KEYWORD	3654:17	3654:17	12	if
LEAF_NODE	3654:17	3654:17	13	if
LEAF_NODE	3654:20	3654:20	12	(
CONDITION	3654:21	3654:21	12	extractContigSamples16bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
EXPR	3654:21	3654:21	13	extractContigSamples16bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
FUNCTION_CALL	3654:21	3655:73	14	extractContigSamples16bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
CALLEE	3654:21	3654:21	15	extractContigSamples16bits
LEAF_NODE	3654:21	3654:21	16	extractContigSamples16bits
LEAF_NODE	3654:48	3654:48	15	(
ARGUMENT	3654:49	3654:49	15	src
FIELD	3654:49	3654:49	16	src
LEAF_NODE	3654:49	3654:49	17	src
LEAF_NODE	3654:52	3654:52	15	,
ARGUMENT	3654:54	3654:54	15	dst
FIELD	3654:54	3654:54	16	dst
LEAF_NODE	3654:54	3654:54	17	dst
LEAF_NODE	3654:57	3654:57	15	,
ARGUMENT	3654:59	3654:59	15	cols
FIELD	3654:59	3654:59	16	cols
LEAF_NODE	3654:59	3654:59	17	cols
LEAF_NODE	3654:63	3654:63	15	,
ARGUMENT	3654:65	3654:65	15	sample
FIELD	3654:65	3654:65	16	sample
LEAF_NODE	3654:65	3654:65	17	sample
LEAF_NODE	3654:71	3654:71	15	,
ARGUMENT	3655:49	3655:49	15	spp
FIELD	3655:49	3655:49	16	spp
LEAF_NODE	3655:49	3655:49	17	spp
LEAF_NODE	3655:52	3655:52	15	,
ARGUMENT	3655:54	3655:54	15	bps
FIELD	3655:54	3655:54	16	bps
LEAF_NODE	3655:54	3655:54	17	bps
LEAF_NODE	3655:57	3655:57	15	,
ARGUMENT	3655:59	3655:59	15	count
FIELD	3655:59	3655:59	16	count
LEAF_NODE	3655:59	3655:59	17	count
LEAF_NODE	3655:64	3655:64	15	,
ARGUMENT	3655:66	3655:66	15	0
FIELD	3655:66	3655:66	16	0
LEAF_NODE	3655:66	3655:66	17	0
LEAF_NODE	3655:67	3655:67	15	,
ARGUMENT	3655:69	3655:69	15	cols
FIELD	3655:69	3655:69	16	cols
LEAF_NODE	3655:69	3655:69	17	cols
LEAF_NODE	3655:73	3655:73	15	)
LEAF_NODE	3655:74	3655:74	12	)
STATEMENTS	3656:10	3656:10	12	
JUMP_STATEMENT	3656:10	3656:20	13	return ( 1 ) ;
KEYWORD	3656:10	3656:10	14	return
LEAF_NODE	3656:10	3656:10	15	return
DESTINATION	3656:17	3656:17	14	( 1 )
EXPR	3656:17	3656:19	15	( 1 )
LEAF_NODE	3656:17	3656:17	16	(
FIELD	3656:18	3656:18	16	1
LEAF_NODE	3656:18	3656:18	17	1
LEAF_NODE	3656:19	3656:19	16	)
LEAF_NODE	3656:20	3656:20	14	;
JUMP_STATEMENT	3657:7	3657:12	9	break DESTINATION ;
KEYWORD	3657:7	3657:7	10	break
LEAF_NODE	3657:7	3657:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3657:12	3657:12	10	;
LABEL	3658:6	3658:12	9	case 2 :
LEAF_NODE	3658:6	3658:6	10	case
LEAF_NODE	3658:11	3658:11	10	2
LEAF_NODE	3658:12	3658:12	10	:
SELECTION	3658:14	3660:10	9	
KEYWORD	3658:14	3658:14	10	if
LEAF_NODE	3658:14	3658:14	11	if
LEAF_NODE	3658:17	3658:17	10	(
CONDITION	3658:18	3658:18	10	extractContigSamples24bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
EXPR	3658:18	3658:18	11	extractContigSamples24bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
FUNCTION_CALL	3658:18	3659:71	12	extractContigSamples24bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
CALLEE	3658:18	3658:18	13	extractContigSamples24bits
LEAF_NODE	3658:18	3658:18	14	extractContigSamples24bits
LEAF_NODE	3658:45	3658:45	13	(
ARGUMENT	3658:46	3658:46	13	src
FIELD	3658:46	3658:46	14	src
LEAF_NODE	3658:46	3658:46	15	src
LEAF_NODE	3658:49	3658:49	13	,
ARGUMENT	3658:51	3658:51	13	dst
FIELD	3658:51	3658:51	14	dst
LEAF_NODE	3658:51	3658:51	15	dst
LEAF_NODE	3658:54	3658:54	13	,
ARGUMENT	3658:56	3658:56	13	cols
FIELD	3658:56	3658:56	14	cols
LEAF_NODE	3658:56	3658:56	15	cols
LEAF_NODE	3658:60	3658:60	13	,
ARGUMENT	3658:62	3658:62	13	sample
FIELD	3658:62	3658:62	14	sample
LEAF_NODE	3658:62	3658:62	15	sample
LEAF_NODE	3658:68	3658:68	13	,
ARGUMENT	3659:46	3659:46	13	spp
FIELD	3659:46	3659:46	14	spp
LEAF_NODE	3659:46	3659:46	15	spp
LEAF_NODE	3659:49	3659:49	13	,
ARGUMENT	3659:51	3659:51	13	bps
FIELD	3659:51	3659:51	14	bps
LEAF_NODE	3659:51	3659:51	15	bps
LEAF_NODE	3659:54	3659:54	13	,
ARGUMENT	3659:57	3659:57	13	count
FIELD	3659:57	3659:57	14	count
LEAF_NODE	3659:57	3659:57	15	count
LEAF_NODE	3659:62	3659:62	13	,
ARGUMENT	3659:64	3659:64	13	0
FIELD	3659:64	3659:64	14	0
LEAF_NODE	3659:64	3659:64	15	0
LEAF_NODE	3659:65	3659:65	13	,
ARGUMENT	3659:67	3659:67	13	cols
FIELD	3659:67	3659:67	14	cols
LEAF_NODE	3659:67	3659:67	15	cols
LEAF_NODE	3659:71	3659:71	13	)
LEAF_NODE	3659:72	3659:72	10	)
STATEMENTS	3660:10	3660:10	10	
JUMP_STATEMENT	3660:10	3660:20	11	return ( 1 ) ;
KEYWORD	3660:10	3660:10	12	return
LEAF_NODE	3660:10	3660:10	13	return
DESTINATION	3660:17	3660:17	12	( 1 )
EXPR	3660:17	3660:19	13	( 1 )
LEAF_NODE	3660:17	3660:17	14	(
FIELD	3660:18	3660:18	14	1
LEAF_NODE	3660:18	3660:18	15	1
LEAF_NODE	3660:19	3660:19	14	)
LEAF_NODE	3660:20	3660:20	12	;
JUMP_STATEMENT	3661:7	3661:12	9	break DESTINATION ;
KEYWORD	3661:7	3661:7	10	break
LEAF_NODE	3661:7	3661:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3661:12	3661:12	10	;
LABEL	3662:6	3662:12	9	case 3 :
LEAF_NODE	3662:6	3662:6	10	case
LEAF_NODE	3662:11	3662:11	10	3
LEAF_NODE	3662:12	3662:12	10	:
LABEL	3663:6	3663:12	9	case 4 :
LEAF_NODE	3663:6	3663:6	10	case
LEAF_NODE	3663:11	3663:11	10	4
LEAF_NODE	3663:12	3663:12	10	:
LABEL	3664:6	3664:12	9	case 5 :
LEAF_NODE	3664:6	3664:6	10	case
LEAF_NODE	3664:11	3664:11	10	5
LEAF_NODE	3664:12	3664:12	10	:
SELECTION	3664:14	3666:10	9	
KEYWORD	3664:14	3664:14	10	if
LEAF_NODE	3664:14	3664:14	11	if
LEAF_NODE	3664:17	3664:17	10	(
CONDITION	3664:18	3664:18	10	extractContigSamples32bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
EXPR	3664:18	3664:18	11	extractContigSamples32bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
FUNCTION_CALL	3664:18	3665:71	12	extractContigSamples32bits ( src , dst , cols , sample , spp , bps , count , 0 , cols )
CALLEE	3664:18	3664:18	13	extractContigSamples32bits
LEAF_NODE	3664:18	3664:18	14	extractContigSamples32bits
LEAF_NODE	3664:45	3664:45	13	(
ARGUMENT	3664:46	3664:46	13	src
FIELD	3664:46	3664:46	14	src
LEAF_NODE	3664:46	3664:46	15	src
LEAF_NODE	3664:49	3664:49	13	,
ARGUMENT	3664:51	3664:51	13	dst
FIELD	3664:51	3664:51	14	dst
LEAF_NODE	3664:51	3664:51	15	dst
LEAF_NODE	3664:54	3664:54	13	,
ARGUMENT	3664:56	3664:56	13	cols
FIELD	3664:56	3664:56	14	cols
LEAF_NODE	3664:56	3664:56	15	cols
LEAF_NODE	3664:60	3664:60	13	,
ARGUMENT	3664:62	3664:62	13	sample
FIELD	3664:62	3664:62	14	sample
LEAF_NODE	3664:62	3664:62	15	sample
LEAF_NODE	3664:68	3664:68	13	,
ARGUMENT	3665:46	3665:46	13	spp
FIELD	3665:46	3665:46	14	spp
LEAF_NODE	3665:46	3665:46	15	spp
LEAF_NODE	3665:49	3665:49	13	,
ARGUMENT	3665:51	3665:51	13	bps
FIELD	3665:51	3665:51	14	bps
LEAF_NODE	3665:51	3665:51	15	bps
LEAF_NODE	3665:54	3665:54	13	,
ARGUMENT	3665:57	3665:57	13	count
FIELD	3665:57	3665:57	14	count
LEAF_NODE	3665:57	3665:57	15	count
LEAF_NODE	3665:62	3665:62	13	,
ARGUMENT	3665:64	3665:64	13	0
FIELD	3665:64	3665:64	14	0
LEAF_NODE	3665:64	3665:64	15	0
LEAF_NODE	3665:65	3665:65	13	,
ARGUMENT	3665:67	3665:67	13	cols
FIELD	3665:67	3665:67	14	cols
LEAF_NODE	3665:67	3665:67	15	cols
LEAF_NODE	3665:71	3665:71	13	)
LEAF_NODE	3665:72	3665:72	10	)
STATEMENTS	3666:10	3666:10	10	
JUMP_STATEMENT	3666:10	3666:20	11	return ( 1 ) ;
KEYWORD	3666:10	3666:10	12	return
LEAF_NODE	3666:10	3666:10	13	return
DESTINATION	3666:17	3666:17	12	( 1 )
EXPR	3666:17	3666:19	13	( 1 )
LEAF_NODE	3666:17	3666:17	14	(
FIELD	3666:18	3666:18	14	1
LEAF_NODE	3666:18	3666:18	15	1
LEAF_NODE	3666:19	3666:19	14	)
LEAF_NODE	3666:20	3666:20	12	;
JUMP_STATEMENT	3667:7	3667:12	9	break DESTINATION ;
KEYWORD	3667:7	3667:7	10	break
LEAF_NODE	3667:7	3667:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3667:12	3667:12	10	;
LABEL	3668:6	3668:13	9	default :
LEAF_NODE	3668:6	3668:6	10	default
LEAF_NODE	3668:13	3668:13	10	:
EXPR_STATEMENT	3668:15	3668:95	9	TIFFError ( "extractContigSamplesToTileBuffer" , "Unsupported bit depth: %d" , bps ) ;
EXPR	3668:15	3668:15	10	TIFFError ( "extractContigSamplesToTileBuffer" , "Unsupported bit depth: %d" , bps )
FUNCTION_CALL	3668:15	3668:94	11	TIFFError ( "extractContigSamplesToTileBuffer" , "Unsupported bit depth: %d" , bps )
CALLEE	3668:15	3668:15	12	TIFFError
LEAF_NODE	3668:15	3668:15	13	TIFFError
LEAF_NODE	3668:25	3668:25	12	(
ARGUMENT	3668:26	3668:26	12	"extractContigSamplesToTileBuffer"
FIELD	3668:26	3668:26	13	"extractContigSamplesToTileBuffer"
LEAF_NODE	3668:26	3668:26	14	"extractContigSamplesToTileBuffer"
LEAF_NODE	3668:60	3668:60	12	,
ARGUMENT	3668:62	3668:62	12	"Unsupported bit depth: %d"
FIELD	3668:62	3668:62	13	"Unsupported bit depth: %d"
LEAF_NODE	3668:62	3668:62	14	"Unsupported bit depth: %d"
LEAF_NODE	3668:89	3668:89	12	,
ARGUMENT	3668:91	3668:91	12	bps
FIELD	3668:91	3668:91	13	bps
LEAF_NODE	3668:91	3668:91	14	bps
LEAF_NODE	3668:94	3668:94	12	)
LEAF_NODE	3668:95	3668:95	10	;
JUMP_STATEMENT	3669:8	3669:18	9	return ( 1 ) ;
KEYWORD	3669:8	3669:8	10	return
LEAF_NODE	3669:8	3669:8	11	return
DESTINATION	3669:15	3669:15	10	( 1 )
EXPR	3669:15	3669:17	11	( 1 )
LEAF_NODE	3669:15	3669:15	12	(
FIELD	3669:16	3669:16	12	1
LEAF_NODE	3669:16	3669:16	13	1
LEAF_NODE	3669:17	3669:17	12	)
LEAF_NODE	3669:18	3669:18	10	;
LEAF_NODE	3670:6	3670:6	8	}
SELECTION	3671:4	3672:6	6	
KEYWORD	3671:4	3671:4	7	if
LEAF_NODE	3671:4	3671:4	8	if
LEAF_NODE	3671:7	3671:7	7	(
CONDITION	3671:8	3671:8	7	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3671:8	3671:8	8	( dump -> outfile != NULL ) && ( dump -> level == 4 )
AND	3671:8	3671:35	9	( dump -> outfile != NULL ) && ( dump -> level == 4 )
EXPR	3671:8	3671:30	10	( dump -> outfile != NULL )
LEAF_NODE	3671:8	3671:8	11	(
FIELD	3671:9	3671:15	11	dump -> outfile
LEAF_NODE	3671:9	3671:9	12	dump
LEAF_NODE	3671:13	3671:13	12	->
LEAF_NODE	3671:15	3671:15	12	outfile
EQ_OPERATOR	3671:23	3671:23	11	!=
LEAF_NODE	3671:23	3671:23	12	!=
FIELD	3671:26	3671:26	11	NULL
LEAF_NODE	3671:26	3671:26	12	NULL
LEAF_NODE	3671:30	3671:30	11	)
LEAF_NODE	3671:32	3671:32	10	&&
EXPR	3671:35	3671:52	10	( dump -> level == 4 )
LEAF_NODE	3671:35	3671:35	11	(
FIELD	3671:36	3671:42	11	dump -> level
LEAF_NODE	3671:36	3671:36	12	dump
LEAF_NODE	3671:40	3671:40	12	->
LEAF_NODE	3671:42	3671:42	12	level
EQ_OPERATOR	3671:48	3671:48	11	==
LEAF_NODE	3671:48	3671:48	12	==
FIELD	3671:51	3671:51	11	4
LEAF_NODE	3671:51	3671:51	12	4
LEAF_NODE	3671:52	3671:52	11	)
LEAF_NODE	3671:53	3671:53	7	)
STATEMENTS	3672:6	3672:6	7	
EXPR_STATEMENT	3672:6	3672:72	8	dump_buffer ( dump -> outfile , dump -> format , 1 , dst_rowsize , row , dst ) ;
EXPR	3672:6	3672:6	9	dump_buffer ( dump -> outfile , dump -> format , 1 , dst_rowsize , row , dst )
FUNCTION_CALL	3672:6	3672:71	10	dump_buffer ( dump -> outfile , dump -> format , 1 , dst_rowsize , row , dst )
CALLEE	3672:6	3672:6	11	dump_buffer
LEAF_NODE	3672:6	3672:6	12	dump_buffer
LEAF_NODE	3672:17	3672:17	11	(
ARGUMENT	3672:18	3672:18	11	dump -> outfile
FIELD	3672:18	3672:24	12	dump -> outfile
LEAF_NODE	3672:18	3672:18	13	dump
LEAF_NODE	3672:22	3672:22	13	->
LEAF_NODE	3672:24	3672:24	13	outfile
LEAF_NODE	3672:31	3672:31	11	,
ARGUMENT	3672:33	3672:33	11	dump -> format
FIELD	3672:33	3672:39	12	dump -> format
LEAF_NODE	3672:33	3672:33	13	dump
LEAF_NODE	3672:37	3672:37	13	->
LEAF_NODE	3672:39	3672:39	13	format
LEAF_NODE	3672:45	3672:45	11	,
ARGUMENT	3672:47	3672:47	11	1
FIELD	3672:47	3672:47	12	1
LEAF_NODE	3672:47	3672:47	13	1
LEAF_NODE	3672:48	3672:48	11	,
ARGUMENT	3672:50	3672:50	11	dst_rowsize
FIELD	3672:50	3672:50	12	dst_rowsize
LEAF_NODE	3672:50	3672:50	13	dst_rowsize
LEAF_NODE	3672:61	3672:61	11	,
ARGUMENT	3672:63	3672:63	11	row
FIELD	3672:63	3672:63	12	row
LEAF_NODE	3672:63	3672:63	13	row
LEAF_NODE	3672:66	3672:66	11	,
ARGUMENT	3672:68	3672:68	11	dst
FIELD	3672:68	3672:68	12	dst
LEAF_NODE	3672:68	3672:68	13	dst
LEAF_NODE	3672:71	3672:71	11	)
LEAF_NODE	3672:72	3672:72	9	;
LEAF_NODE	3673:4	3673:4	5	}
JUMP_STATEMENT	3675:2	3675:12	3	return ( 0 ) ;
KEYWORD	3675:2	3675:2	4	return
LEAF_NODE	3675:2	3675:2	5	return
DESTINATION	3675:9	3675:9	4	( 0 )
EXPR	3675:9	3675:11	5	( 0 )
LEAF_NODE	3675:9	3675:9	6	(
FIELD	3675:10	3675:10	6	0
LEAF_NODE	3675:10	3675:10	7	0
LEAF_NODE	3675:11	3675:11	6	)
LEAF_NODE	3675:12	3675:12	4	;
LEAF_NODE	3676:2	3676:2	2	}
FUNCTION_DEF	3678:0	3710:0	1	
RETURN_TYPE	3678:0	3678:7	2	static int
LEAF_NODE	3678:0	3678:0	3	static
TYPE_NAME	3678:7	3678:7	3	int
LEAF_NODE	3678:7	3678:7	4	int
FUNCTION_NAME	3678:11	3678:11	2	readContigStripsIntoBuffer
LEAF_NODE	3678:11	3678:11	3	readContigStripsIntoBuffer
PARAMETER_LIST	3678:38	3678:59	2	( TIFF * in , uint8 * buf )
LEAF_NODE	3678:38	3678:38	3	(
PARAMETER_DECL	3678:39	3678:45	3	TIFF * in
TYPE	3678:39	3678:43	4	TIFF *
TYPE_NAME	3678:39	3678:39	5	TIFF
LEAF_NODE	3678:39	3678:39	6	TIFF
POINTER	3678:43	3678:43	5	*
LEAF_NODE	3678:43	3678:43	6	*
NAME	3678:45	3678:45	4	in
LEAF_NODE	3678:45	3678:45	5	in
LEAF_NODE	3678:47	3678:47	3	,
PARAMETER_DECL	3678:49	3678:56	3	uint8 * buf
TYPE	3678:49	3678:54	4	uint8 *
TYPE_NAME	3678:49	3678:49	5	uint8
LEAF_NODE	3678:49	3678:49	6	uint8
POINTER	3678:54	3678:54	5	*
LEAF_NODE	3678:54	3678:54	6	*
NAME	3678:56	3678:56	4	buf
LEAF_NODE	3678:56	3678:56	5	buf
LEAF_NODE	3678:59	3678:59	3	)
LEAF_NODE	3679:0	3679:0	2	{
STATEMENTS	3680:8	3709:8	2	
SIMPLE_DECL	3680:8	3680:25	3	uint8 * bufp ; bufp = buf ;
VAR_DECL	3680:8	3680:15	4	uint8 * bufp ; bufp = buf
TYPE	3680:8	3680:13	5	uint8 *
TYPE_NAME	3680:8	3680:8	6	uint8
LEAF_NODE	3680:8	3680:8	7	uint8
POINTER	3680:13	3680:13	6	*
LEAF_NODE	3680:13	3680:13	7	*
NAME	3680:15	3680:15	5	bufp
LEAF_NODE	3680:15	3680:15	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	3680:15	3680:15	5	bufp = buf
ASSIGN	3680:15	3680:22	6	bufp = buf
LVAL	3680:15	3680:15	7	bufp
NAME	3680:15	3680:15	8	bufp
LEAF_NODE	3680:15	3680:15	9	bufp
ASSIGN_OP	3680:20	3680:20	7	=
LEAF_NODE	3680:20	3680:20	8	=
RVAL	3680:22	3680:22	7	buf
FIELD	3680:22	3680:22	8	buf
LEAF_NODE	3680:22	3680:22	9	buf
LEAF_NODE	3680:25	3680:25	4	;
SIMPLE_DECL	3681:8	3681:29	3	int32 bytes_read ; bytes_read = 0 ;
VAR_DECL	3681:8	3681:15	4	int32 bytes_read ; bytes_read = 0
TYPE	3681:8	3681:8	5	int32
TYPE_NAME	3681:8	3681:8	6	int32
LEAF_NODE	3681:8	3681:8	7	int32
NAME	3681:15	3681:15	5	bytes_read
LEAF_NODE	3681:15	3681:15	6	bytes_read
LEAF_NODE	0:0	0:0	5	;
INIT	3681:15	3681:15	5	bytes_read = 0
ASSIGN	3681:15	3681:28	6	bytes_read = 0
LVAL	3681:15	3681:15	7	bytes_read
NAME	3681:15	3681:15	8	bytes_read
LEAF_NODE	3681:15	3681:15	9	bytes_read
ASSIGN_OP	3681:26	3681:26	7	=
LEAF_NODE	3681:26	3681:26	8	=
RVAL	3681:28	3681:28	7	0
FIELD	3681:28	3681:28	8	0
LEAF_NODE	3681:28	3681:28	9	0
LEAF_NODE	3681:29	3681:29	4	;
SIMPLE_DECL	3682:8	3682:56	3	uint32 strip , uint32 nstrips ; nstrips = TIFFNumberOfStrips ( in ) ;
INIT_DECL_LIST	3682:8	3682:8	4	uint32 strip , uint32 nstrips ; nstrips = TIFFNumberOfStrips ( in )
VAR_DECL	3682:8	3682:15	5	uint32 strip
TYPE	3682:8	3682:8	6	uint32
TYPE_NAME	3682:8	3682:8	7	uint32
LEAF_NODE	3682:8	3682:8	8	uint32
NAME	3682:15	3682:15	6	strip
LEAF_NODE	3682:15	3682:15	7	strip
LEAF_NODE	3682:20	3682:20	5	,
VAR_DECL	3682:8	3682:22	5	uint32 nstrips ; nstrips = TIFFNumberOfStrips ( in )
TYPE	3682:8	3682:8	6	uint32
TYPE_NAME	3682:8	3682:8	7	uint32
LEAF_NODE	3682:8	3682:8	8	uint32
NAME	3682:22	3682:22	6	nstrips
LEAF_NODE	3682:22	3682:22	7	nstrips
LEAF_NODE	0:0	0:0	6	;
INIT	3682:22	3682:22	6	nstrips = TIFFNumberOfStrips ( in )
ASSIGN	3682:22	3682:34	7	nstrips = TIFFNumberOfStrips ( in )
LVAL	3682:22	3682:22	8	nstrips
NAME	3682:22	3682:22	9	nstrips
LEAF_NODE	3682:22	3682:22	10	nstrips
ASSIGN_OP	3682:32	3682:32	8	=
LEAF_NODE	3682:32	3682:32	9	=
RVAL	3682:34	3682:34	8	TIFFNumberOfStrips ( in )
FUNCTION_CALL	3682:34	3682:55	9	TIFFNumberOfStrips ( in )
CALLEE	3682:34	3682:34	10	TIFFNumberOfStrips
LEAF_NODE	3682:34	3682:34	11	TIFFNumberOfStrips
LEAF_NODE	3682:52	3682:52	10	(
ARGUMENT	3682:53	3682:53	10	in
FIELD	3682:53	3682:53	11	in
LEAF_NODE	3682:53	3682:53	12	in
LEAF_NODE	3682:55	3682:55	10	)
LEAF_NODE	3682:56	3682:56	4	;
SIMPLE_DECL	3683:8	3683:44	3	uint32 stripsize ; stripsize = TIFFStripSize ( in ) ;
VAR_DECL	3683:8	3683:15	4	uint32 stripsize ; stripsize = TIFFStripSize ( in )
TYPE	3683:8	3683:8	5	uint32
TYPE_NAME	3683:8	3683:8	6	uint32
LEAF_NODE	3683:8	3683:8	7	uint32
NAME	3683:15	3683:15	5	stripsize
LEAF_NODE	3683:15	3683:15	6	stripsize
LEAF_NODE	0:0	0:0	5	;
INIT	3683:15	3683:15	5	stripsize = TIFFStripSize ( in )
ASSIGN	3683:15	3683:27	6	stripsize = TIFFStripSize ( in )
LVAL	3683:15	3683:15	7	stripsize
NAME	3683:15	3683:15	8	stripsize
LEAF_NODE	3683:15	3683:15	9	stripsize
ASSIGN_OP	3683:25	3683:25	7	=
LEAF_NODE	3683:25	3683:25	8	=
RVAL	3683:27	3683:27	7	TIFFStripSize ( in )
FUNCTION_CALL	3683:27	3683:43	8	TIFFStripSize ( in )
CALLEE	3683:27	3683:27	9	TIFFStripSize
LEAF_NODE	3683:27	3683:27	10	TIFFStripSize
LEAF_NODE	3683:40	3683:40	9	(
ARGUMENT	3683:41	3683:41	9	in
FIELD	3683:41	3683:41	10	in
LEAF_NODE	3683:41	3683:41	11	in
LEAF_NODE	3683:43	3683:43	9	)
LEAF_NODE	3683:44	3683:44	4	;
SIMPLE_DECL	3684:8	3684:23	3	uint32 rows ; rows = 0 ;
VAR_DECL	3684:8	3684:15	4	uint32 rows ; rows = 0
TYPE	3684:8	3684:8	5	uint32
TYPE_NAME	3684:8	3684:8	6	uint32
LEAF_NODE	3684:8	3684:8	7	uint32
NAME	3684:15	3684:15	5	rows
LEAF_NODE	3684:15	3684:15	6	rows
LEAF_NODE	0:0	0:0	5	;
INIT	3684:15	3684:15	5	rows = 0
ASSIGN	3684:15	3684:22	6	rows = 0
LVAL	3684:15	3684:15	7	rows
NAME	3684:15	3684:15	8	rows
LEAF_NODE	3684:15	3684:15	9	rows
ASSIGN_OP	3684:20	3684:20	7	=
LEAF_NODE	3684:20	3684:20	8	=
RVAL	3684:22	3684:22	7	0
FIELD	3684:22	3684:22	8	0
LEAF_NODE	3684:22	3684:22	9	0
LEAF_NODE	3684:23	3684:23	4	;
SIMPLE_DECL	3685:8	3685:74	3	uint32 rps ; rps = TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps ) ;
VAR_DECL	3685:8	3685:15	4	uint32 rps ; rps = TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
TYPE	3685:8	3685:8	5	uint32
TYPE_NAME	3685:8	3685:8	6	uint32
LEAF_NODE	3685:8	3685:8	7	uint32
NAME	3685:15	3685:15	5	rps
LEAF_NODE	3685:15	3685:15	6	rps
LEAF_NODE	0:0	0:0	5	;
INIT	3685:15	3685:15	5	rps = TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
ASSIGN	3685:15	3685:21	6	rps = TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
LVAL	3685:15	3685:15	7	rps
NAME	3685:15	3685:15	8	rps
LEAF_NODE	3685:15	3685:15	9	rps
ASSIGN_OP	3685:19	3685:19	7	=
LEAF_NODE	3685:19	3685:19	8	=
RVAL	3685:21	3685:21	7	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
FUNCTION_CALL	3685:21	3685:73	8	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
CALLEE	3685:21	3685:21	9	TIFFGetFieldDefaulted
LEAF_NODE	3685:21	3685:21	10	TIFFGetFieldDefaulted
LEAF_NODE	3685:42	3685:42	9	(
ARGUMENT	3685:43	3685:43	9	in
FIELD	3685:43	3685:43	10	in
LEAF_NODE	3685:43	3685:43	11	in
LEAF_NODE	3685:45	3685:45	9	,
ARGUMENT	3685:47	3685:47	9	TIFFTAG_ROWSPERSTRIP
FIELD	3685:47	3685:47	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3685:47	3685:47	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3685:67	3685:67	9	,
ARGUMENT	3685:69	3685:69	9	& rps
UNARY_EXPR	3685:69	3685:70	10	& rps
UNARY_OPERATOR	3685:69	3685:69	11	&
LEAF_NODE	3685:69	3685:69	12	&
FIELD	3685:70	3685:70	11	rps
LEAF_NODE	3685:70	3685:70	12	rps
LEAF_NODE	3685:73	3685:73	9	)
LEAF_NODE	3685:74	3685:74	4	;
SIMPLE_DECL	3686:8	3686:52	3	tsize_t scanline_size ; scanline_size = TIFFScanlineSize ( in ) ;
VAR_DECL	3686:8	3686:16	4	tsize_t scanline_size ; scanline_size = TIFFScanlineSize ( in )
TYPE	3686:8	3686:8	5	tsize_t
TYPE_NAME	3686:8	3686:8	6	tsize_t
LEAF_NODE	3686:8	3686:8	7	tsize_t
NAME	3686:16	3686:16	5	scanline_size
LEAF_NODE	3686:16	3686:16	6	scanline_size
LEAF_NODE	0:0	0:0	5	;
INIT	3686:16	3686:16	5	scanline_size = TIFFScanlineSize ( in )
ASSIGN	3686:16	3686:32	6	scanline_size = TIFFScanlineSize ( in )
LVAL	3686:16	3686:16	7	scanline_size
NAME	3686:16	3686:16	8	scanline_size
LEAF_NODE	3686:16	3686:16	9	scanline_size
ASSIGN_OP	3686:30	3686:30	7	=
LEAF_NODE	3686:30	3686:30	8	=
RVAL	3686:32	3686:32	7	TIFFScanlineSize ( in )
FUNCTION_CALL	3686:32	3686:51	8	TIFFScanlineSize ( in )
CALLEE	3686:32	3686:32	9	TIFFScanlineSize
LEAF_NODE	3686:32	3686:32	10	TIFFScanlineSize
LEAF_NODE	3686:48	3686:48	9	(
ARGUMENT	3686:49	3686:49	9	in
FIELD	3686:49	3686:49	10	in
LEAF_NODE	3686:49	3686:49	11	in
LEAF_NODE	3686:51	3686:51	9	)
LEAF_NODE	3686:52	3686:52	4	;
SELECTION	3688:8	3688:32	3	
KEYWORD	3688:8	3688:8	4	if
LEAF_NODE	3688:8	3688:8	5	if
LEAF_NODE	3688:11	3688:11	4	(
CONDITION	3688:12	3688:12	4	scanline_size == 0
EXPR	3688:12	3688:29	5	scanline_size == 0
FIELD	3688:12	3688:12	6	scanline_size
LEAF_NODE	3688:12	3688:12	7	scanline_size
EQ_OPERATOR	3688:26	3688:26	6	==
LEAF_NODE	3688:26	3688:26	7	==
FIELD	3688:29	3688:29	6	0
LEAF_NODE	3688:29	3688:29	7	0
LEAF_NODE	3688:30	3688:30	4	)
STATEMENTS	3688:32	3691:8	4	
LEAF_NODE	3688:32	3688:32	5	{
STATEMENTS	3689:16	3690:16	5	
EXPR_STATEMENT	3689:16	3689:60	6	TIFFError ( "" , "TIFF scanline size is zero!" ) ;
EXPR	3689:16	3689:16	7	TIFFError ( "" , "TIFF scanline size is zero!" )
FUNCTION_CALL	3689:16	3689:59	8	TIFFError ( "" , "TIFF scanline size is zero!" )
CALLEE	3689:16	3689:16	9	TIFFError
LEAF_NODE	3689:16	3689:16	10	TIFFError
LEAF_NODE	3689:25	3689:25	9	(
ARGUMENT	3689:26	3689:26	9	""
FIELD	3689:26	3689:26	10	""
LEAF_NODE	3689:26	3689:26	11	""
LEAF_NODE	3689:28	3689:28	9	,
ARGUMENT	3689:30	3689:30	9	"TIFF scanline size is zero!"
FIELD	3689:30	3689:30	10	"TIFF scanline size is zero!"
LEAF_NODE	3689:30	3689:30	11	"TIFF scanline size is zero!"
LEAF_NODE	3689:59	3689:59	9	)
LEAF_NODE	3689:60	3689:60	7	;
JUMP_STATEMENT	3690:16	3690:24	6	return 0 ;
KEYWORD	3690:16	3690:16	7	return
LEAF_NODE	3690:16	3690:16	8	return
DESTINATION	3690:23	3690:23	7	0
EXPR	3690:23	3690:23	8	0
FIELD	3690:23	3690:23	9	0
LEAF_NODE	3690:23	3690:23	10	0
LEAF_NODE	3690:24	3690:24	7	;
LEAF_NODE	3691:8	3691:8	5	}
ITERATION	3693:8	3693:50	3	
KEYWORD	3693:8	3693:8	4	for
LEAF_NODE	3693:8	3693:8	5	for
LEAF_NODE	3693:12	3693:12	4	(
FOR_INIT	3693:13	3693:22	4	strip = 0 ;
EXPR	3693:13	3693:13	5	strip = 0
ASSIGN	3693:13	3693:21	6	strip = 0
LVAL	3693:13	3693:13	7	strip
FIELD	3693:13	3693:13	8	strip
LEAF_NODE	3693:13	3693:13	9	strip
ASSIGN_OP	3693:19	3693:19	7	=
LEAF_NODE	3693:19	3693:19	8	=
RVAL	3693:21	3693:21	7	0
FIELD	3693:21	3693:21	8	0
LEAF_NODE	3693:21	3693:21	9	0
LEAF_NODE	3693:22	3693:22	5	;
CONDITION	3693:24	3693:24	4	strip < nstrips
EXPR	3693:24	3693:32	5	strip < nstrips
FIELD	3693:24	3693:24	6	strip
LEAF_NODE	3693:24	3693:24	7	strip
REL_OPERATOR	3693:30	3693:30	6	<
LEAF_NODE	3693:30	3693:30	7	<
FIELD	3693:32	3693:32	6	nstrips
LEAF_NODE	3693:32	3693:32	7	nstrips
LEAF_NODE	3693:39	3693:39	4	;
FOR_EXPR	3693:41	3693:41	4	strip ++
EXPR	3693:41	3693:41	5	strip ++
FIELD	3693:41	3693:46	6	strip ++
LEAF_NODE	3693:41	3693:41	7	strip
LEAF_NODE	3693:46	3693:46	7	++
LEAF_NODE	3693:48	3693:48	4	)
STATEMENTS	3693:50	3707:8	4	
LEAF_NODE	3693:50	3693:50	5	{
STATEMENTS	3694:16	3706:16	5	
EXPR_STATEMENT	3694:16	3694:71	6	bytes_read = TIFFReadEncodedStrip ( in , strip , bufp , - 1 ) ;
EXPR	3694:16	3694:16	7	bytes_read = TIFFReadEncodedStrip ( in , strip , bufp , - 1 )
ASSIGN	3694:16	3694:29	8	bytes_read = TIFFReadEncodedStrip ( in , strip , bufp , - 1 )
LVAL	3694:16	3694:16	9	bytes_read
FIELD	3694:16	3694:16	10	bytes_read
LEAF_NODE	3694:16	3694:16	11	bytes_read
ASSIGN_OP	3694:27	3694:27	9	=
LEAF_NODE	3694:27	3694:27	10	=
RVAL	3694:29	3694:29	9	TIFFReadEncodedStrip ( in , strip , bufp , - 1 )
FUNCTION_CALL	3694:29	3694:70	10	TIFFReadEncodedStrip ( in , strip , bufp , - 1 )
CALLEE	3694:29	3694:29	11	TIFFReadEncodedStrip
LEAF_NODE	3694:29	3694:29	12	TIFFReadEncodedStrip
LEAF_NODE	3694:50	3694:50	11	(
ARGUMENT	3694:51	3694:51	11	in
FIELD	3694:51	3694:51	12	in
LEAF_NODE	3694:51	3694:51	13	in
LEAF_NODE	3694:53	3694:53	11	,
ARGUMENT	3694:55	3694:55	11	strip
FIELD	3694:55	3694:55	12	strip
LEAF_NODE	3694:55	3694:55	13	strip
LEAF_NODE	3694:60	3694:60	11	,
ARGUMENT	3694:62	3694:62	11	bufp
FIELD	3694:62	3694:62	12	bufp
LEAF_NODE	3694:62	3694:62	13	bufp
LEAF_NODE	3694:66	3694:66	11	,
ARGUMENT	3694:68	3694:68	11	- 1
UNARY_EXPR	3694:68	3694:69	12	- 1
UNARY_OPERATOR	3694:68	3694:68	13	-
LEAF_NODE	3694:68	3694:68	14	-
FIELD	3694:69	3694:69	13	1
LEAF_NODE	3694:69	3694:69	14	1
LEAF_NODE	3694:70	3694:70	11	)
LEAF_NODE	3694:71	3694:71	7	;
EXPR_STATEMENT	3695:16	3695:49	6	rows = bytes_read / scanline_size ;
EXPR	3695:16	3695:16	7	rows = bytes_read / scanline_size
ASSIGN	3695:16	3695:23	8	rows = bytes_read / scanline_size
LVAL	3695:16	3695:16	9	rows
FIELD	3695:16	3695:16	10	rows
LEAF_NODE	3695:16	3695:16	11	rows
ASSIGN_OP	3695:21	3695:21	9	=
LEAF_NODE	3695:21	3695:21	10	=
RVAL	3695:23	3695:36	9	bytes_read / scanline_size
FIELD	3695:23	3695:23	10	bytes_read
LEAF_NODE	3695:23	3695:23	11	bytes_read
LEAF_NODE	3695:34	3695:34	10	/
FIELD	3695:36	3695:36	10	scanline_size
LEAF_NODE	3695:36	3695:36	11	scanline_size
LEAF_NODE	3695:49	3695:49	7	;
SELECTION	3696:16	3697:24	6	
KEYWORD	3696:16	3696:16	7	if
LEAF_NODE	3696:16	3696:16	8	if
LEAF_NODE	3696:19	3696:19	7	(
CONDITION	3696:20	3696:20	7	( strip < ( nstrips - 1 ) ) && ( bytes_read != ( int32 ) stripsize )
EXPR	3696:20	3696:20	8	( strip < ( nstrips - 1 ) ) && ( bytes_read != ( int32 ) stripsize )
AND	3696:20	3696:47	9	( strip < ( nstrips - 1 ) ) && ( bytes_read != ( int32 ) stripsize )
EXPR	3696:20	3696:42	10	( strip < ( nstrips - 1 ) )
LEAF_NODE	3696:20	3696:20	11	(
FIELD	3696:21	3696:21	11	strip
LEAF_NODE	3696:21	3696:21	12	strip
REL_OPERATOR	3696:27	3696:27	11	<
LEAF_NODE	3696:27	3696:27	12	<
LEAF_NODE	3696:29	3696:29	11	(
FIELD	3696:30	3696:30	11	nstrips
LEAF_NODE	3696:30	3696:30	12	nstrips
LEAF_NODE	3696:38	3696:38	11	-
FIELD	3696:40	3696:40	11	1
LEAF_NODE	3696:40	3696:40	12	1
LEAF_NODE	3696:41	3696:41	11	)
LEAF_NODE	3696:42	3696:42	11	)
LEAF_NODE	3696:44	3696:44	10	&&
EXPR	3696:47	3696:78	10	( bytes_read != ( int32 ) stripsize )
LEAF_NODE	3696:47	3696:47	11	(
FIELD	3696:48	3696:48	11	bytes_read
LEAF_NODE	3696:48	3696:48	12	bytes_read
EQ_OPERATOR	3696:59	3696:59	11	!=
LEAF_NODE	3696:59	3696:59	12	!=
LEAF_NODE	3696:62	3696:62	11	(
TYPE_NAME	3696:63	3696:63	11	int32
LEAF_NODE	3696:63	3696:63	12	int32
LEAF_NODE	3696:68	3696:68	11	)
FIELD	3696:69	3696:69	11	stripsize
LEAF_NODE	3696:69	3696:69	12	stripsize
LEAF_NODE	3696:78	3696:78	11	)
LEAF_NODE	3696:79	3696:79	7	)
STATEMENTS	3697:24	3697:24	7	
EXPR_STATEMENT	3697:24	3699:59	8	TIFFError ( "" , "Strip %d: read %lu bytes, strip size %lu" , ( int ) strip + 1 , ( unsigned long ) bytes_read , ( unsigned long ) stripsize ) ;
EXPR	3697:24	3697:24	9	TIFFError ( "" , "Strip %d: read %lu bytes, strip size %lu" , ( int ) strip + 1 , ( unsigned long ) bytes_read , ( unsigned long ) stripsize )
FUNCTION_CALL	3697:24	3699:58	10	TIFFError ( "" , "Strip %d: read %lu bytes, strip size %lu" , ( int ) strip + 1 , ( unsigned long ) bytes_read , ( unsigned long ) stripsize )
CALLEE	3697:24	3697:24	11	TIFFError
LEAF_NODE	3697:24	3697:24	12	TIFFError
LEAF_NODE	3697:33	3697:33	11	(
ARGUMENT	3697:34	3697:34	11	""
FIELD	3697:34	3697:34	12	""
LEAF_NODE	3697:34	3697:34	13	""
LEAF_NODE	3697:36	3697:36	11	,
ARGUMENT	3697:38	3697:38	11	"Strip %d: read %lu bytes, strip size %lu"
FIELD	3697:38	3697:38	12	"Strip %d: read %lu bytes, strip size %lu"
LEAF_NODE	3697:38	3697:38	13	"Strip %d: read %lu bytes, strip size %lu"
LEAF_NODE	3697:80	3697:80	11	,
ARGUMENT	3698:34	3698:47	11	( int ) strip + 1
LEAF_NODE	3698:34	3698:34	12	(
TYPE_NAME	3698:35	3698:35	12	int
LEAF_NODE	3698:35	3698:35	13	int
LEAF_NODE	3698:38	3698:38	12	)
FIELD	3698:39	3698:39	12	strip
LEAF_NODE	3698:39	3698:39	13	strip
LEAF_NODE	3698:45	3698:45	12	+
FIELD	3698:47	3698:47	12	1
LEAF_NODE	3698:47	3698:47	13	1
LEAF_NODE	3698:48	3698:48	11	,
ARGUMENT	3698:50	3698:66	11	( unsigned long ) bytes_read
LEAF_NODE	3698:50	3698:50	12	(
TYPE_NAME	3698:51	3698:60	12	unsigned long
LEAF_NODE	3698:51	3698:51	13	unsigned
LEAF_NODE	3698:60	3698:60	13	long
LEAF_NODE	3698:64	3698:64	12	)
FIELD	3698:66	3698:66	12	bytes_read
LEAF_NODE	3698:66	3698:66	13	bytes_read
LEAF_NODE	3698:76	3698:76	11	,
ARGUMENT	3699:34	3699:49	11	( unsigned long ) stripsize
LEAF_NODE	3699:34	3699:34	12	(
TYPE_NAME	3699:35	3699:44	12	unsigned long
LEAF_NODE	3699:35	3699:35	13	unsigned
LEAF_NODE	3699:44	3699:44	13	long
LEAF_NODE	3699:48	3699:48	12	)
FIELD	3699:49	3699:49	12	stripsize
LEAF_NODE	3699:49	3699:49	13	stripsize
LEAF_NODE	3699:58	3699:58	11	)
LEAF_NODE	3699:59	3699:59	9	;
SELECTION	3701:16	3701:47	6	
KEYWORD	3701:16	3701:16	7	if
LEAF_NODE	3701:16	3701:16	8	if
LEAF_NODE	3701:19	3701:19	7	(
CONDITION	3701:20	3701:20	7	bytes_read < 0 && ! ignore
EXPR	3701:20	3701:20	8	bytes_read < 0 && ! ignore
AND	3701:20	3701:38	9	bytes_read < 0 && ! ignore
EXPR	3701:20	3701:33	10	bytes_read < 0
FIELD	3701:20	3701:20	11	bytes_read
LEAF_NODE	3701:20	3701:20	12	bytes_read
REL_OPERATOR	3701:31	3701:31	11	<
LEAF_NODE	3701:31	3701:31	12	<
FIELD	3701:33	3701:33	11	0
LEAF_NODE	3701:33	3701:33	12	0
LEAF_NODE	3701:35	3701:35	10	&&
EXPR	3701:38	3701:38	10	! ignore
UNARY_EXPR	3701:38	3701:39	11	! ignore
UNARY_OPERATOR	3701:38	3701:38	12	!
LEAF_NODE	3701:38	3701:38	13	!
FIELD	3701:39	3701:39	12	ignore
LEAF_NODE	3701:39	3701:39	13	ignore
LEAF_NODE	3701:45	3701:45	7	)
STATEMENTS	3701:47	3705:16	7	
LEAF_NODE	3701:47	3701:47	8	{
STATEMENTS	3702:24	3704:24	8	
EXPR_STATEMENT	3702:24	3703:77	9	TIFFError ( "" , "Error reading strip %lu after %lu rows" , ( unsigned long ) strip , ( unsigned long ) rows ) ;
EXPR	3702:24	3702:24	10	TIFFError ( "" , "Error reading strip %lu after %lu rows" , ( unsigned long ) strip , ( unsigned long ) rows )
FUNCTION_CALL	3702:24	3703:76	11	TIFFError ( "" , "Error reading strip %lu after %lu rows" , ( unsigned long ) strip , ( unsigned long ) rows )
CALLEE	3702:24	3702:24	12	TIFFError
LEAF_NODE	3702:24	3702:24	13	TIFFError
LEAF_NODE	3702:33	3702:33	12	(
ARGUMENT	3702:34	3702:34	12	""
FIELD	3702:34	3702:34	13	""
LEAF_NODE	3702:34	3702:34	14	""
LEAF_NODE	3702:36	3702:36	12	,
ARGUMENT	3702:38	3702:38	12	"Error reading strip %lu after %lu rows"
FIELD	3702:38	3702:38	13	"Error reading strip %lu after %lu rows"
LEAF_NODE	3702:38	3702:38	14	"Error reading strip %lu after %lu rows"
LEAF_NODE	3702:78	3702:78	12	,
ARGUMENT	3703:34	3703:50	12	( unsigned long ) strip
LEAF_NODE	3703:34	3703:34	13	(
TYPE_NAME	3703:35	3703:44	13	unsigned long
LEAF_NODE	3703:35	3703:35	14	unsigned
LEAF_NODE	3703:44	3703:44	14	long
LEAF_NODE	3703:48	3703:48	13	)
FIELD	3703:50	3703:50	13	strip
LEAF_NODE	3703:50	3703:50	14	strip
LEAF_NODE	3703:55	3703:55	12	,
ARGUMENT	3703:57	3703:72	12	( unsigned long ) rows
LEAF_NODE	3703:57	3703:57	13	(
TYPE_NAME	3703:58	3703:67	13	unsigned long
LEAF_NODE	3703:58	3703:58	14	unsigned
LEAF_NODE	3703:67	3703:67	14	long
LEAF_NODE	3703:71	3703:71	13	)
FIELD	3703:72	3703:72	13	rows
LEAF_NODE	3703:72	3703:72	14	rows
LEAF_NODE	3703:76	3703:76	12	)
LEAF_NODE	3703:77	3703:77	10	;
JUMP_STATEMENT	3704:24	3704:32	9	return 0 ;
KEYWORD	3704:24	3704:24	10	return
LEAF_NODE	3704:24	3704:24	11	return
DESTINATION	3704:31	3704:31	10	0
EXPR	3704:31	3704:31	11	0
FIELD	3704:31	3704:31	12	0
LEAF_NODE	3704:31	3704:31	13	0
LEAF_NODE	3704:32	3704:32	10	;
LEAF_NODE	3705:16	3705:16	8	}
EXPR_STATEMENT	3706:16	3706:33	6	bufp += stripsize ;
EXPR	3706:16	3706:16	7	bufp += stripsize
ASSIGN	3706:16	3706:24	8	bufp += stripsize
LVAL	3706:16	3706:16	9	bufp
FIELD	3706:16	3706:16	10	bufp
LEAF_NODE	3706:16	3706:16	11	bufp
ASSIGN_OP	3706:21	3706:21	9	+=
LEAF_NODE	3706:21	3706:21	10	+=
RVAL	3706:24	3706:24	9	stripsize
FIELD	3706:24	3706:24	10	stripsize
LEAF_NODE	3706:24	3706:24	11	stripsize
LEAF_NODE	3706:33	3706:33	7	;
LEAF_NODE	3707:8	3707:8	5	}
JUMP_STATEMENT	3709:8	3709:16	3	return 1 ;
KEYWORD	3709:8	3709:8	4	return
LEAF_NODE	3709:8	3709:8	5	return
DESTINATION	3709:15	3709:15	4	1
EXPR	3709:15	3709:15	5	1
FIELD	3709:15	3709:15	6	1
LEAF_NODE	3709:15	3709:15	7	1
LEAF_NODE	3709:16	3709:16	4	;
LEAF_NODE	3710:0	3710:0	2	}
FUNCTION_DEF	3712:0	3768:2	1	
RETURN_TYPE	3712:0	3712:7	2	static int
LEAF_NODE	3712:0	3712:0	3	static
TYPE_NAME	3712:7	3712:7	3	int
LEAF_NODE	3712:7	3712:7	4	int
FUNCTION_NAME	3713:0	3713:0	2	combineSeparateSamplesBytes
LEAF_NODE	3713:0	3713:0	3	combineSeparateSamplesBytes
PARAMETER_LIST	3713:28	3715:66	2	( unsigned char * [ ] srcbuffs , unsigned char * out , uint32 cols , uint32 rows , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	3713:28	3713:28	3	(
PARAMETER_DECL	3713:29	3713:44	3	unsigned char * [ ] srcbuffs
TYPE	3713:29	3713:52	4	unsigned char * [ ]
TYPE_NAME	3713:29	3713:38	5	unsigned char
LEAF_NODE	3713:29	3713:29	6	unsigned
LEAF_NODE	3713:38	3713:38	6	char
POINTER	3713:43	3713:43	5	*
LEAF_NODE	3713:43	3713:43	6	*
TYPE_SUFFIX	3713:52	3713:53	5	[ ]
LEAF_NODE	3713:52	3713:52	6	[
LEAF_NODE	3713:53	3713:53	6	]
NAME	3713:44	3713:44	4	srcbuffs
LEAF_NODE	3713:44	3713:44	5	srcbuffs
LEAF_NODE	3713:54	3713:54	3	,
PARAMETER_DECL	3713:56	3713:71	3	unsigned char * out
TYPE	3713:56	3713:70	4	unsigned char *
TYPE_NAME	3713:56	3713:65	5	unsigned char
LEAF_NODE	3713:56	3713:56	6	unsigned
LEAF_NODE	3713:65	3713:65	6	char
POINTER	3713:70	3713:70	5	*
LEAF_NODE	3713:70	3713:70	6	*
NAME	3713:71	3713:71	4	out
LEAF_NODE	3713:71	3713:71	5	out
LEAF_NODE	3713:74	3713:74	3	,
PARAMETER_DECL	3714:29	3714:36	3	uint32 cols
TYPE	3714:29	3714:29	4	uint32
TYPE_NAME	3714:29	3714:29	5	uint32
LEAF_NODE	3714:29	3714:29	6	uint32
NAME	3714:36	3714:36	4	cols
LEAF_NODE	3714:36	3714:36	5	cols
LEAF_NODE	3714:40	3714:40	3	,
PARAMETER_DECL	3714:42	3714:49	3	uint32 rows
TYPE	3714:42	3714:42	4	uint32
TYPE_NAME	3714:42	3714:42	5	uint32
LEAF_NODE	3714:42	3714:42	6	uint32
NAME	3714:49	3714:49	4	rows
LEAF_NODE	3714:49	3714:49	5	rows
LEAF_NODE	3714:53	3714:53	3	,
PARAMETER_DECL	3714:55	3714:62	3	uint16 spp
TYPE	3714:55	3714:55	4	uint16
TYPE_NAME	3714:55	3714:55	5	uint16
LEAF_NODE	3714:55	3714:55	6	uint16
NAME	3714:62	3714:62	4	spp
LEAF_NODE	3714:62	3714:62	5	spp
LEAF_NODE	3714:65	3714:65	3	,
PARAMETER_DECL	3714:67	3714:74	3	uint16 bps
TYPE	3714:67	3714:67	4	uint16
TYPE_NAME	3714:67	3714:67	5	uint16
LEAF_NODE	3714:67	3714:67	6	uint16
NAME	3714:74	3714:74	4	bps
LEAF_NODE	3714:74	3714:74	5	bps
LEAF_NODE	3714:77	3714:77	3	,
PARAMETER_DECL	3715:29	3715:35	3	FILE * dumpfile
TYPE	3715:29	3715:34	4	FILE *
TYPE_NAME	3715:29	3715:29	5	FILE
LEAF_NODE	3715:29	3715:29	6	FILE
POINTER	3715:34	3715:34	5	*
LEAF_NODE	3715:34	3715:34	6	*
NAME	3715:35	3715:35	4	dumpfile
LEAF_NODE	3715:35	3715:35	5	dumpfile
LEAF_NODE	3715:43	3715:43	3	,
PARAMETER_DECL	3715:45	3715:49	3	int format
TYPE	3715:45	3715:45	4	int
TYPE_NAME	3715:45	3715:45	5	int
LEAF_NODE	3715:45	3715:45	6	int
NAME	3715:49	3715:49	4	format
LEAF_NODE	3715:49	3715:49	5	format
LEAF_NODE	3715:55	3715:55	3	,
PARAMETER_DECL	3715:57	3715:61	3	int level
TYPE	3715:57	3715:57	4	int
TYPE_NAME	3715:57	3715:57	5	int
LEAF_NODE	3715:57	3715:57	6	int
NAME	3715:61	3715:61	4	level
LEAF_NODE	3715:61	3715:61	5	level
LEAF_NODE	3715:66	3715:66	3	)
LEAF_NODE	3716:2	3716:2	2	{
STATEMENTS	3717:2	3767:2	2	
SIMPLE_DECL	3717:2	3717:25	3	int i , int bytes_per_sample ;
INIT_DECL_LIST	3717:2	3717:2	4	int i , int bytes_per_sample
VAR_DECL	3717:2	3717:6	5	int i
TYPE	3717:2	3717:2	6	int
TYPE_NAME	3717:2	3717:2	7	int
LEAF_NODE	3717:2	3717:2	8	int
NAME	3717:6	3717:6	6	i
LEAF_NODE	3717:6	3717:6	7	i
LEAF_NODE	3717:7	3717:7	5	,
VAR_DECL	3717:2	3717:9	5	int bytes_per_sample
TYPE	3717:2	3717:2	6	int
TYPE_NAME	3717:2	3717:2	7	int
LEAF_NODE	3717:2	3717:2	8	int
NAME	3717:9	3717:9	6	bytes_per_sample
LEAF_NODE	3717:9	3717:9	7	bytes_per_sample
LEAF_NODE	3717:25	3717:25	4	;
SIMPLE_DECL	3718:2	3718:67	3	uint32 row , uint32 col , uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 row_offset ;
INIT_DECL_LIST	3718:2	3718:2	4	uint32 row , uint32 col , uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 row_offset
VAR_DECL	3718:2	3718:9	5	uint32 row
TYPE	3718:2	3718:2	6	uint32
TYPE_NAME	3718:2	3718:2	7	uint32
LEAF_NODE	3718:2	3718:2	8	uint32
NAME	3718:9	3718:9	6	row
LEAF_NODE	3718:9	3718:9	7	row
LEAF_NODE	3718:12	3718:12	5	,
INIT_DECL_LIST	3718:2	3718:2	5	uint32 col , uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 row_offset
VAR_DECL	3718:2	3718:14	6	uint32 col
TYPE	3718:2	3718:2	7	uint32
TYPE_NAME	3718:2	3718:2	8	uint32
LEAF_NODE	3718:2	3718:2	9	uint32
NAME	3718:14	3718:14	7	col
LEAF_NODE	3718:14	3718:14	8	col
LEAF_NODE	3718:17	3718:17	6	,
INIT_DECL_LIST	3718:2	3718:2	6	uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 row_offset
VAR_DECL	3718:2	3718:19	7	uint32 col_offset
TYPE	3718:2	3718:2	8	uint32
TYPE_NAME	3718:2	3718:2	9	uint32
LEAF_NODE	3718:2	3718:2	10	uint32
NAME	3718:19	3718:19	8	col_offset
LEAF_NODE	3718:19	3718:19	9	col_offset
LEAF_NODE	3718:29	3718:29	7	,
INIT_DECL_LIST	3718:2	3718:2	7	uint32 src_rowsize , uint32 dst_rowsize , uint32 row_offset
VAR_DECL	3718:2	3718:31	8	uint32 src_rowsize
TYPE	3718:2	3718:2	9	uint32
TYPE_NAME	3718:2	3718:2	10	uint32
LEAF_NODE	3718:2	3718:2	11	uint32
NAME	3718:31	3718:31	9	src_rowsize
LEAF_NODE	3718:31	3718:31	10	src_rowsize
LEAF_NODE	3718:42	3718:42	8	,
INIT_DECL_LIST	3718:2	3718:2	8	uint32 dst_rowsize , uint32 row_offset
VAR_DECL	3718:2	3718:44	9	uint32 dst_rowsize
TYPE	3718:2	3718:2	10	uint32
TYPE_NAME	3718:2	3718:2	11	uint32
LEAF_NODE	3718:2	3718:2	12	uint32
NAME	3718:44	3718:44	10	dst_rowsize
LEAF_NODE	3718:44	3718:44	11	dst_rowsize
LEAF_NODE	3718:55	3718:55	9	,
VAR_DECL	3718:2	3718:57	9	uint32 row_offset
TYPE	3718:2	3718:2	10	uint32
TYPE_NAME	3718:2	3718:2	11	uint32
LEAF_NODE	3718:2	3718:2	12	uint32
NAME	3718:57	3718:57	10	row_offset
LEAF_NODE	3718:57	3718:57	11	row_offset
LEAF_NODE	3718:67	3718:67	4	;
SIMPLE_DECL	3719:2	3719:20	3	unsigned char * src ;
VAR_DECL	3719:2	3719:17	4	unsigned char * src
TYPE	3719:2	3719:16	5	unsigned char *
TYPE_NAME	3719:2	3719:11	6	unsigned char
LEAF_NODE	3719:2	3719:2	7	unsigned
LEAF_NODE	3719:11	3719:11	7	char
POINTER	3719:16	3719:16	6	*
LEAF_NODE	3719:16	3719:16	7	*
NAME	3719:17	3719:17	5	src
LEAF_NODE	3719:17	3719:17	6	src
LEAF_NODE	3719:20	3719:20	4	;
SIMPLE_DECL	3720:2	3720:20	3	unsigned char * dst ;
VAR_DECL	3720:2	3720:17	4	unsigned char * dst
TYPE	3720:2	3720:16	5	unsigned char *
TYPE_NAME	3720:2	3720:11	6	unsigned char
LEAF_NODE	3720:2	3720:2	7	unsigned
LEAF_NODE	3720:11	3720:11	7	char
POINTER	3720:16	3720:16	6	*
LEAF_NODE	3720:16	3720:16	7	*
NAME	3720:17	3720:17	5	dst
LEAF_NODE	3720:17	3720:17	6	dst
LEAF_NODE	3720:20	3720:20	4	;
SIMPLE_DECL	3721:2	3721:13	3	tsample_t s ;
VAR_DECL	3721:2	3721:12	4	tsample_t s
TYPE	3721:2	3721:2	5	tsample_t
TYPE_NAME	3721:2	3721:2	6	tsample_t
LEAF_NODE	3721:2	3721:2	7	tsample_t
NAME	3721:12	3721:12	5	s
LEAF_NODE	3721:12	3721:12	6	s
LEAF_NODE	3721:13	3721:13	4	;
EXPR_STATEMENT	3723:2	3723:19	3	src = srcbuffs [ 0 ] ;
EXPR	3723:2	3723:2	4	src = srcbuffs [ 0 ]
ASSIGN	3723:2	3723:8	5	src = srcbuffs [ 0 ]
LVAL	3723:2	3723:2	6	src
FIELD	3723:2	3723:2	7	src
LEAF_NODE	3723:2	3723:2	8	src
ASSIGN_OP	3723:6	3723:6	6	=
LEAF_NODE	3723:6	3723:6	7	=
RVAL	3723:8	3723:8	6	srcbuffs [ 0 ]
FIELD	3723:8	3723:18	7	srcbuffs [ 0 ]
LEAF_NODE	3723:8	3723:8	8	srcbuffs
LEAF_NODE	3723:16	3723:16	8	[
EXPR	3723:17	3723:17	8	0
FIELD	3723:17	3723:17	9	0
LEAF_NODE	3723:17	3723:17	10	0
LEAF_NODE	3723:18	3723:18	8	]
LEAF_NODE	3723:19	3723:19	4	;
EXPR_STATEMENT	3724:2	3724:11	3	dst = out ;
EXPR	3724:2	3724:2	4	dst = out
ASSIGN	3724:2	3724:8	5	dst = out
LVAL	3724:2	3724:2	6	dst
FIELD	3724:2	3724:2	7	dst
LEAF_NODE	3724:2	3724:2	8	dst
ASSIGN_OP	3724:6	3724:6	6	=
LEAF_NODE	3724:6	3724:6	7	=
RVAL	3724:8	3724:8	6	out
FIELD	3724:8	3724:8	7	out
LEAF_NODE	3724:8	3724:8	8	out
LEAF_NODE	3724:11	3724:11	4	;
SELECTION	3725:2	3726:4	3	
KEYWORD	3725:2	3725:2	4	if
LEAF_NODE	3725:2	3725:2	5	if
LEAF_NODE	3725:5	3725:5	4	(
CONDITION	3725:6	3725:6	4	( src == NULL ) || ( dst == NULL )
EXPR	3725:6	3725:6	5	( src == NULL ) || ( dst == NULL )
OR	3725:6	3725:23	6	( src == NULL ) || ( dst == NULL )
EXPR	3725:6	3725:18	7	( src == NULL )
LEAF_NODE	3725:6	3725:6	8	(
FIELD	3725:7	3725:7	8	src
LEAF_NODE	3725:7	3725:7	9	src
EQ_OPERATOR	3725:11	3725:11	8	==
LEAF_NODE	3725:11	3725:11	9	==
FIELD	3725:14	3725:14	8	NULL
LEAF_NODE	3725:14	3725:14	9	NULL
LEAF_NODE	3725:18	3725:18	8	)
LEAF_NODE	3725:20	3725:20	7	||
EXPR	3725:23	3725:35	7	( dst == NULL )
LEAF_NODE	3725:23	3725:23	8	(
FIELD	3725:24	3725:24	8	dst
LEAF_NODE	3725:24	3725:24	9	dst
EQ_OPERATOR	3725:28	3725:28	8	==
LEAF_NODE	3725:28	3725:28	9	==
FIELD	3725:31	3725:31	8	NULL
LEAF_NODE	3725:31	3725:31	9	NULL
LEAF_NODE	3725:35	3725:35	8	)
LEAF_NODE	3725:36	3725:36	4	)
STATEMENTS	3726:4	3729:4	4	
LEAF_NODE	3726:4	3726:4	5	{
STATEMENTS	3727:4	3728:4	5	
EXPR_STATEMENT	3727:4	3727:69	6	TIFFError ( "combineSeparateSamplesBytes" , "Invalid buffer address" ) ;
EXPR	3727:4	3727:4	7	TIFFError ( "combineSeparateSamplesBytes" , "Invalid buffer address" )
FUNCTION_CALL	3727:4	3727:68	8	TIFFError ( "combineSeparateSamplesBytes" , "Invalid buffer address" )
CALLEE	3727:4	3727:4	9	TIFFError
LEAF_NODE	3727:4	3727:4	10	TIFFError
LEAF_NODE	3727:13	3727:13	9	(
ARGUMENT	3727:14	3727:14	9	"combineSeparateSamplesBytes"
FIELD	3727:14	3727:14	10	"combineSeparateSamplesBytes"
LEAF_NODE	3727:14	3727:14	11	"combineSeparateSamplesBytes"
LEAF_NODE	3727:43	3727:43	9	,
ARGUMENT	3727:44	3727:44	9	"Invalid buffer address"
FIELD	3727:44	3727:44	10	"Invalid buffer address"
LEAF_NODE	3727:44	3727:44	11	"Invalid buffer address"
LEAF_NODE	3727:68	3727:68	9	)
LEAF_NODE	3727:69	3727:69	7	;
JUMP_STATEMENT	3728:4	3728:14	6	return ( 1 ) ;
KEYWORD	3728:4	3728:4	7	return
LEAF_NODE	3728:4	3728:4	8	return
DESTINATION	3728:11	3728:11	7	( 1 )
EXPR	3728:11	3728:13	8	( 1 )
LEAF_NODE	3728:11	3728:11	9	(
FIELD	3728:12	3728:12	9	1
LEAF_NODE	3728:12	3728:12	10	1
LEAF_NODE	3728:13	3728:13	9	)
LEAF_NODE	3728:14	3728:14	7	;
LEAF_NODE	3729:4	3729:4	5	}
EXPR_STATEMENT	3731:2	3731:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	3731:2	3731:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	3731:2	3731:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	3731:2	3731:2	6	bytes_per_sample
FIELD	3731:2	3731:2	7	bytes_per_sample
LEAF_NODE	3731:2	3731:2	8	bytes_per_sample
ASSIGN_OP	3731:19	3731:19	6	=
LEAF_NODE	3731:19	3731:19	7	=
RVAL	3731:21	3731:33	6	( bps + 7 ) / 8
LEAF_NODE	3731:21	3731:21	7	(
FIELD	3731:22	3731:22	7	bps
LEAF_NODE	3731:22	3731:22	8	bps
LEAF_NODE	3731:26	3731:26	7	+
FIELD	3731:28	3731:28	7	7
LEAF_NODE	3731:28	3731:28	8	7
LEAF_NODE	3731:29	3731:29	7	)
LEAF_NODE	3731:31	3731:31	7	/
FIELD	3731:33	3731:33	7	8
LEAF_NODE	3731:33	3731:33	8	8
LEAF_NODE	3731:34	3731:34	4	;
EXPR_STATEMENT	3733:2	3733:38	3	src_rowsize = ( ( bps * cols ) + 7 ) / 8 ;
EXPR	3733:2	3733:2	4	src_rowsize = ( ( bps * cols ) + 7 ) / 8
ASSIGN	3733:2	3733:16	5	src_rowsize = ( ( bps * cols ) + 7 ) / 8
LVAL	3733:2	3733:2	6	src_rowsize
FIELD	3733:2	3733:2	7	src_rowsize
LEAF_NODE	3733:2	3733:2	8	src_rowsize
ASSIGN_OP	3733:14	3733:14	6	=
LEAF_NODE	3733:14	3733:14	7	=
RVAL	3733:16	3733:37	6	( ( bps * cols ) + 7 ) / 8
LEAF_NODE	3733:16	3733:16	7	(
LEAF_NODE	3733:17	3733:17	7	(
FIELD	3733:18	3733:18	7	bps
LEAF_NODE	3733:18	3733:18	8	bps
LEAF_NODE	3733:22	3733:22	7	*
FIELD	3733:24	3733:24	7	cols
LEAF_NODE	3733:24	3733:24	8	cols
LEAF_NODE	3733:28	3733:28	7	)
LEAF_NODE	3733:30	3733:30	7	+
FIELD	3733:32	3733:32	7	7
LEAF_NODE	3733:32	3733:32	8	7
LEAF_NODE	3733:33	3733:33	7	)
LEAF_NODE	3733:35	3733:35	7	/
FIELD	3733:37	3733:37	7	8
LEAF_NODE	3733:37	3733:37	8	8
LEAF_NODE	3733:38	3733:38	4	;
LEAF_NODE	3734:2	3734:2	3	dst_rowsize
LEAF_NODE	3734:14	3734:14	3	=
LEAF_NODE	3734:16	3734:16	3	(
LEAF_NODE	3734:17	3734:17	3	(
LEAF_NODE	3734:18	3734:18	3	bps
LEAF_NODE	3734:22	3734:22	3	*
LEAF_NODE	3734:24	3734:24	3	spp
LEAF_NODE	3734:28	3734:28	3	*
LEAF_NODE	3734:30	3734:30	3	cols
LEAF_NODE	3734:34	3734:34	3	)
LEAF_NODE	3734:36	3734:36	3	+
LEAF_NODE	3734:38	3734:38	3	7
LEAF_NODE	3734:39	3734:39	3	)
LEAF_NODE	3734:41	3734:41	3	/
EXPR_STATEMENT	3734:43	3734:44	3	8 ;
EXPR	3734:43	3734:43	4	8
FIELD	3734:43	3734:43	5	8
LEAF_NODE	3734:43	3734:43	6	8
LEAF_NODE	3734:44	3734:44	4	;
ITERATION	3735:2	3736:4	3	
KEYWORD	3735:2	3735:2	4	for
LEAF_NODE	3735:2	3735:2	5	for
LEAF_NODE	3735:6	3735:6	4	(
FOR_INIT	3735:7	3735:14	4	row = 0 ;
EXPR	3735:7	3735:7	5	row = 0
ASSIGN	3735:7	3735:13	6	row = 0
LVAL	3735:7	3735:7	7	row
FIELD	3735:7	3735:7	8	row
LEAF_NODE	3735:7	3735:7	9	row
ASSIGN_OP	3735:11	3735:11	7	=
LEAF_NODE	3735:11	3735:11	8	=
RVAL	3735:13	3735:13	7	0
FIELD	3735:13	3735:13	8	0
LEAF_NODE	3735:13	3735:13	9	0
LEAF_NODE	3735:14	3735:14	5	;
CONDITION	3735:16	3735:16	4	row < rows
EXPR	3735:16	3735:22	5	row < rows
FIELD	3735:16	3735:16	6	row
LEAF_NODE	3735:16	3735:16	7	row
REL_OPERATOR	3735:20	3735:20	6	<
LEAF_NODE	3735:20	3735:20	7	<
FIELD	3735:22	3735:22	6	rows
LEAF_NODE	3735:22	3735:22	7	rows
LEAF_NODE	3735:26	3735:26	4	;
FOR_EXPR	3735:28	3735:28	4	row ++
EXPR	3735:28	3735:28	5	row ++
FIELD	3735:28	3735:31	6	row ++
LEAF_NODE	3735:28	3735:28	7	row
LEAF_NODE	3735:31	3735:31	7	++
LEAF_NODE	3735:33	3735:33	4	)
STATEMENTS	3736:4	3765:4	4	
LEAF_NODE	3736:4	3736:4	5	{
STATEMENTS	3737:4	3760:4	5	
SELECTION	3737:4	3738:6	6	
KEYWORD	3737:4	3737:4	7	if
LEAF_NODE	3737:4	3737:4	8	if
LEAF_NODE	3737:7	3737:7	7	(
CONDITION	3737:8	3737:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	3737:8	3737:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	3737:8	3737:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	3737:8	3737:25	10	( dumpfile != NULL )
LEAF_NODE	3737:8	3737:8	11	(
FIELD	3737:9	3737:9	11	dumpfile
LEAF_NODE	3737:9	3737:9	12	dumpfile
EQ_OPERATOR	3737:18	3737:18	11	!=
LEAF_NODE	3737:18	3737:18	12	!=
FIELD	3737:21	3737:21	11	NULL
LEAF_NODE	3737:21	3737:21	12	NULL
LEAF_NODE	3737:25	3737:25	11	)
LEAF_NODE	3737:27	3737:27	10	&&
EXPR	3737:30	3737:41	10	( level == 2 )
LEAF_NODE	3737:30	3737:30	11	(
FIELD	3737:31	3737:31	11	level
LEAF_NODE	3737:31	3737:31	12	level
EQ_OPERATOR	3737:37	3737:37	11	==
LEAF_NODE	3737:37	3737:37	12	==
FIELD	3737:40	3737:40	11	2
LEAF_NODE	3737:40	3737:40	12	2
LEAF_NODE	3737:41	3737:41	11	)
LEAF_NODE	3737:42	3737:42	7	)
STATEMENTS	3738:6	3744:6	7	
LEAF_NODE	3738:6	3738:6	8	{
STATEMENTS	3739:6	3739:6	8	
ITERATION	3739:6	3740:8	9	
KEYWORD	3739:6	3739:6	10	for
LEAF_NODE	3739:6	3739:6	11	for
LEAF_NODE	3739:10	3739:10	10	(
FOR_INIT	3739:11	3739:16	10	s = 0 ;
EXPR	3739:11	3739:11	11	s = 0
ASSIGN	3739:11	3739:15	12	s = 0
LVAL	3739:11	3739:11	13	s
FIELD	3739:11	3739:11	14	s
LEAF_NODE	3739:11	3739:11	15	s
ASSIGN_OP	3739:13	3739:13	13	=
LEAF_NODE	3739:13	3739:13	14	=
RVAL	3739:15	3739:15	13	0
FIELD	3739:15	3739:15	14	0
LEAF_NODE	3739:15	3739:15	15	0
LEAF_NODE	3739:16	3739:16	11	;
CONDITION	3739:18	3739:18	10	s < spp
EXPR	3739:18	3739:22	11	s < spp
FIELD	3739:18	3739:18	12	s
LEAF_NODE	3739:18	3739:18	13	s
REL_OPERATOR	3739:20	3739:20	12	<
LEAF_NODE	3739:20	3739:20	13	<
FIELD	3739:22	3739:22	12	spp
LEAF_NODE	3739:22	3739:22	13	spp
LEAF_NODE	3739:25	3739:25	10	;
FOR_EXPR	3739:27	3739:27	10	s ++
EXPR	3739:27	3739:27	11	s ++
FIELD	3739:27	3739:28	12	s ++
LEAF_NODE	3739:27	3739:27	13	s
LEAF_NODE	3739:28	3739:28	13	++
LEAF_NODE	3739:30	3739:30	10	)
STATEMENTS	3740:8	3743:8	10	
LEAF_NODE	3740:8	3740:8	11	{
STATEMENTS	3741:8	3742:8	11	
EXPR_STATEMENT	3741:8	3741:94	12	dump_info ( dumpfile , format , "combineSeparateSamplesBytes" , "Input data, Sample %d" , s ) ;
EXPR	3741:8	3741:8	13	dump_info ( dumpfile , format , "combineSeparateSamplesBytes" , "Input data, Sample %d" , s )
FUNCTION_CALL	3741:8	3741:93	14	dump_info ( dumpfile , format , "combineSeparateSamplesBytes" , "Input data, Sample %d" , s )
CALLEE	3741:8	3741:8	15	dump_info
LEAF_NODE	3741:8	3741:8	16	dump_info
LEAF_NODE	3741:18	3741:18	15	(
ARGUMENT	3741:19	3741:19	15	dumpfile
FIELD	3741:19	3741:19	16	dumpfile
LEAF_NODE	3741:19	3741:19	17	dumpfile
LEAF_NODE	3741:27	3741:27	15	,
ARGUMENT	3741:29	3741:29	15	format
FIELD	3741:29	3741:29	16	format
LEAF_NODE	3741:29	3741:29	17	format
LEAF_NODE	3741:35	3741:35	15	,
ARGUMENT	3741:37	3741:37	15	"combineSeparateSamplesBytes"
FIELD	3741:37	3741:37	16	"combineSeparateSamplesBytes"
LEAF_NODE	3741:37	3741:37	17	"combineSeparateSamplesBytes"
LEAF_NODE	3741:66	3741:66	15	,
ARGUMENT	3741:67	3741:67	15	"Input data, Sample %d"
FIELD	3741:67	3741:67	16	"Input data, Sample %d"
LEAF_NODE	3741:67	3741:67	17	"Input data, Sample %d"
LEAF_NODE	3741:90	3741:90	15	,
ARGUMENT	3741:92	3741:92	15	s
FIELD	3741:92	3741:92	16	s
LEAF_NODE	3741:92	3741:92	17	s
LEAF_NODE	3741:93	3741:93	15	)
LEAF_NODE	3741:94	3741:94	13	;
EXPR_STATEMENT	3742:8	3742:86	12	dump_buffer ( dumpfile , format , 1 , cols , row , srcbuffs [ s ] + ( row * src_rowsize ) ) ;
EXPR	3742:8	3742:8	13	dump_buffer ( dumpfile , format , 1 , cols , row , srcbuffs [ s ] + ( row * src_rowsize ) )
FUNCTION_CALL	3742:8	3742:85	14	dump_buffer ( dumpfile , format , 1 , cols , row , srcbuffs [ s ] + ( row * src_rowsize ) )
CALLEE	3742:8	3742:8	15	dump_buffer
LEAF_NODE	3742:8	3742:8	16	dump_buffer
LEAF_NODE	3742:19	3742:19	15	(
ARGUMENT	3742:20	3742:20	15	dumpfile
FIELD	3742:20	3742:20	16	dumpfile
LEAF_NODE	3742:20	3742:20	17	dumpfile
LEAF_NODE	3742:28	3742:28	15	,
ARGUMENT	3742:30	3742:30	15	format
FIELD	3742:30	3742:30	16	format
LEAF_NODE	3742:30	3742:30	17	format
LEAF_NODE	3742:36	3742:36	15	,
ARGUMENT	3742:38	3742:38	15	1
FIELD	3742:38	3742:38	16	1
LEAF_NODE	3742:38	3742:38	17	1
LEAF_NODE	3742:39	3742:39	15	,
ARGUMENT	3742:41	3742:41	15	cols
FIELD	3742:41	3742:41	16	cols
LEAF_NODE	3742:41	3742:41	17	cols
LEAF_NODE	3742:45	3742:45	15	,
ARGUMENT	3742:47	3742:47	15	row
FIELD	3742:47	3742:47	16	row
LEAF_NODE	3742:47	3742:47	17	row
LEAF_NODE	3742:50	3742:50	15	,
ARGUMENT	3742:52	3742:84	15	srcbuffs [ s ] + ( row * src_rowsize )
FIELD	3742:52	3742:62	16	srcbuffs [ s ]
LEAF_NODE	3742:52	3742:52	17	srcbuffs
LEAF_NODE	3742:60	3742:60	17	[
EXPR	3742:61	3742:61	17	s
FIELD	3742:61	3742:61	18	s
LEAF_NODE	3742:61	3742:61	19	s
LEAF_NODE	3742:62	3742:62	17	]
LEAF_NODE	3742:64	3742:64	16	+
LEAF_NODE	3742:66	3742:66	16	(
FIELD	3742:67	3742:67	16	row
LEAF_NODE	3742:67	3742:67	17	row
LEAF_NODE	3742:71	3742:71	16	*
FIELD	3742:73	3742:73	16	src_rowsize
LEAF_NODE	3742:73	3742:73	17	src_rowsize
LEAF_NODE	3742:84	3742:84	16	)
LEAF_NODE	3742:85	3742:85	15	)
LEAF_NODE	3742:86	3742:86	13	;
LEAF_NODE	3743:8	3743:8	11	}
LEAF_NODE	3744:6	3744:6	8	}
EXPR_STATEMENT	3745:4	3745:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	3745:4	3745:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	3745:4	3745:10	8	dst = out + ( row * dst_rowsize )
LVAL	3745:4	3745:4	9	dst
FIELD	3745:4	3745:4	10	dst
LEAF_NODE	3745:4	3745:4	11	dst
ASSIGN_OP	3745:8	3745:8	9	=
LEAF_NODE	3745:8	3745:8	10	=
RVAL	3745:10	3745:34	9	out + ( row * dst_rowsize )
FIELD	3745:10	3745:10	10	out
LEAF_NODE	3745:10	3745:10	11	out
LEAF_NODE	3745:14	3745:14	10	+
LEAF_NODE	3745:16	3745:16	10	(
FIELD	3745:17	3745:17	10	row
LEAF_NODE	3745:17	3745:17	11	row
LEAF_NODE	3745:21	3745:21	10	*
FIELD	3745:23	3745:23	10	dst_rowsize
LEAF_NODE	3745:23	3745:23	11	dst_rowsize
LEAF_NODE	3745:34	3745:34	10	)
LEAF_NODE	3745:35	3745:35	7	;
EXPR_STATEMENT	3746:4	3746:34	6	row_offset = row * src_rowsize ;
EXPR	3746:4	3746:4	7	row_offset = row * src_rowsize
ASSIGN	3746:4	3746:17	8	row_offset = row * src_rowsize
LVAL	3746:4	3746:4	9	row_offset
FIELD	3746:4	3746:4	10	row_offset
LEAF_NODE	3746:4	3746:4	11	row_offset
ASSIGN_OP	3746:15	3746:15	9	=
LEAF_NODE	3746:15	3746:15	10	=
RVAL	3746:17	3746:23	9	row * src_rowsize
FIELD	3746:17	3746:17	10	row
LEAF_NODE	3746:17	3746:17	11	row
LEAF_NODE	3746:21	3746:21	10	*
FIELD	3746:23	3746:23	10	src_rowsize
LEAF_NODE	3746:23	3746:23	11	src_rowsize
LEAF_NODE	3746:34	3746:34	7	;
ITERATION	3747:4	3748:6	6	
KEYWORD	3747:4	3747:4	7	for
LEAF_NODE	3747:4	3747:4	8	for
LEAF_NODE	3747:8	3747:8	7	(
FOR_INIT	3747:9	3747:16	7	col = 0 ;
EXPR	3747:9	3747:9	8	col = 0
ASSIGN	3747:9	3747:15	9	col = 0
LVAL	3747:9	3747:9	10	col
FIELD	3747:9	3747:9	11	col
LEAF_NODE	3747:9	3747:9	12	col
ASSIGN_OP	3747:13	3747:13	10	=
LEAF_NODE	3747:13	3747:13	11	=
RVAL	3747:15	3747:15	10	0
FIELD	3747:15	3747:15	11	0
LEAF_NODE	3747:15	3747:15	12	0
LEAF_NODE	3747:16	3747:16	8	;
CONDITION	3747:18	3747:18	7	col < cols
EXPR	3747:18	3747:24	8	col < cols
FIELD	3747:18	3747:18	9	col
LEAF_NODE	3747:18	3747:18	10	col
REL_OPERATOR	3747:22	3747:22	9	<
LEAF_NODE	3747:22	3747:22	10	<
FIELD	3747:24	3747:24	9	cols
LEAF_NODE	3747:24	3747:24	10	cols
LEAF_NODE	3747:28	3747:28	7	;
FOR_EXPR	3747:30	3747:30	7	col ++
EXPR	3747:30	3747:30	8	col ++
FIELD	3747:30	3747:33	9	col ++
LEAF_NODE	3747:30	3747:30	10	col
LEAF_NODE	3747:33	3747:33	10	++
LEAF_NODE	3747:35	3747:35	7	)
STATEMENTS	3748:6	3758:6	7	
LEAF_NODE	3748:6	3748:6	8	{
STATEMENTS	3749:6	3750:6	8	
EXPR_STATEMENT	3749:6	3749:49	9	col_offset = row_offset + ( col * ( bps / 8 ) ) ;
EXPR	3749:6	3749:6	10	col_offset = row_offset + ( col * ( bps / 8 ) )
ASSIGN	3749:6	3749:19	11	col_offset = row_offset + ( col * ( bps / 8 ) )
LVAL	3749:6	3749:6	12	col_offset
FIELD	3749:6	3749:6	13	col_offset
LEAF_NODE	3749:6	3749:6	14	col_offset
ASSIGN_OP	3749:17	3749:17	12	=
LEAF_NODE	3749:17	3749:17	13	=
RVAL	3749:19	3749:48	12	row_offset + ( col * ( bps / 8 ) )
FIELD	3749:19	3749:19	13	row_offset
LEAF_NODE	3749:19	3749:19	14	row_offset
LEAF_NODE	3749:30	3749:30	13	+
LEAF_NODE	3749:32	3749:32	13	(
FIELD	3749:33	3749:33	13	col
LEAF_NODE	3749:33	3749:33	14	col
LEAF_NODE	3749:37	3749:37	13	*
LEAF_NODE	3749:39	3749:39	13	(
FIELD	3749:40	3749:40	13	bps
LEAF_NODE	3749:40	3749:40	14	bps
LEAF_NODE	3749:44	3749:44	13	/
FIELD	3749:46	3749:46	13	8
LEAF_NODE	3749:46	3749:46	14	8
LEAF_NODE	3749:47	3749:47	13	)
LEAF_NODE	3749:48	3749:48	13	)
LEAF_NODE	3749:49	3749:49	10	;
ITERATION	3750:6	3751:8	9	
KEYWORD	3750:6	3750:6	10	for
LEAF_NODE	3750:6	3750:6	11	for
LEAF_NODE	3750:10	3750:10	10	(
FOR_INIT	3750:11	3750:16	10	s = 0 ;
EXPR	3750:11	3750:11	11	s = 0
ASSIGN	3750:11	3750:15	12	s = 0
LVAL	3750:11	3750:11	13	s
FIELD	3750:11	3750:11	14	s
LEAF_NODE	3750:11	3750:11	15	s
ASSIGN_OP	3750:13	3750:13	13	=
LEAF_NODE	3750:13	3750:13	14	=
RVAL	3750:15	3750:15	13	0
FIELD	3750:15	3750:15	14	0
LEAF_NODE	3750:15	3750:15	15	0
LEAF_NODE	3750:16	3750:16	11	;
CONDITION	3750:18	3750:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	3750:18	3750:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	3750:18	3750:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	3750:18	3750:26	13	( s < spp )
LEAF_NODE	3750:18	3750:18	14	(
FIELD	3750:19	3750:19	14	s
LEAF_NODE	3750:19	3750:19	15	s
REL_OPERATOR	3750:21	3750:21	14	<
LEAF_NODE	3750:21	3750:21	15	<
FIELD	3750:23	3750:23	14	spp
LEAF_NODE	3750:23	3750:23	15	spp
LEAF_NODE	3750:26	3750:26	14	)
LEAF_NODE	3750:28	3750:28	13	&&
EXPR	3750:31	3750:47	13	( s < MAX_SAMPLES )
LEAF_NODE	3750:31	3750:31	14	(
FIELD	3750:32	3750:32	14	s
LEAF_NODE	3750:32	3750:32	15	s
REL_OPERATOR	3750:34	3750:34	14	<
LEAF_NODE	3750:34	3750:34	15	<
FIELD	3750:36	3750:36	14	MAX_SAMPLES
LEAF_NODE	3750:36	3750:36	15	MAX_SAMPLES
LEAF_NODE	3750:47	3750:47	14	)
LEAF_NODE	3750:48	3750:48	10	;
FOR_EXPR	3750:50	3750:50	10	s ++
EXPR	3750:50	3750:50	11	s ++
FIELD	3750:50	3750:51	12	s ++
LEAF_NODE	3750:50	3750:50	13	s
LEAF_NODE	3750:51	3750:51	13	++
LEAF_NODE	3750:53	3750:53	10	)
STATEMENTS	3751:8	3757:8	10	
LEAF_NODE	3751:8	3751:8	11	{
STATEMENTS	3752:8	3756:8	11	
EXPR_STATEMENT	3752:8	3752:38	12	src = srcbuffs [ s ] + col_offset ;
EXPR	3752:8	3752:8	13	src = srcbuffs [ s ] + col_offset
ASSIGN	3752:8	3752:14	14	src = srcbuffs [ s ] + col_offset
LVAL	3752:8	3752:8	15	src
FIELD	3752:8	3752:8	16	src
LEAF_NODE	3752:8	3752:8	17	src
ASSIGN_OP	3752:12	3752:12	15	=
LEAF_NODE	3752:12	3752:12	16	=
RVAL	3752:14	3752:28	15	srcbuffs [ s ] + col_offset
FIELD	3752:14	3752:24	16	srcbuffs [ s ]
LEAF_NODE	3752:14	3752:14	17	srcbuffs
LEAF_NODE	3752:22	3752:22	17	[
EXPR	3752:23	3752:23	17	s
FIELD	3752:23	3752:23	18	s
LEAF_NODE	3752:23	3752:23	19	s
LEAF_NODE	3752:24	3752:24	17	]
LEAF_NODE	3752:26	3752:26	16	+
FIELD	3752:28	3752:28	16	col_offset
LEAF_NODE	3752:28	3752:28	17	col_offset
LEAF_NODE	3752:38	3752:38	13	;
ITERATION	3753:8	3754:10	12	
KEYWORD	3753:8	3753:8	13	for
LEAF_NODE	3753:8	3753:8	14	for
LEAF_NODE	3753:12	3753:12	13	(
FOR_INIT	3753:13	3753:18	13	i = 0 ;
EXPR	3753:13	3753:13	14	i = 0
ASSIGN	3753:13	3753:17	15	i = 0
LVAL	3753:13	3753:13	16	i
FIELD	3753:13	3753:13	17	i
LEAF_NODE	3753:13	3753:13	18	i
ASSIGN_OP	3753:15	3753:15	16	=
LEAF_NODE	3753:15	3753:15	17	=
RVAL	3753:17	3753:17	16	0
FIELD	3753:17	3753:17	17	0
LEAF_NODE	3753:17	3753:17	18	0
LEAF_NODE	3753:18	3753:18	14	;
CONDITION	3753:20	3753:20	13	i < bytes_per_sample
EXPR	3753:20	3753:24	14	i < bytes_per_sample
FIELD	3753:20	3753:20	15	i
LEAF_NODE	3753:20	3753:20	16	i
REL_OPERATOR	3753:22	3753:22	15	<
LEAF_NODE	3753:22	3753:22	16	<
FIELD	3753:24	3753:24	15	bytes_per_sample
LEAF_NODE	3753:24	3753:24	16	bytes_per_sample
LEAF_NODE	3753:40	3753:40	13	;
FOR_EXPR	3753:42	3753:42	13	i ++
EXPR	3753:42	3753:42	14	i ++
FIELD	3753:42	3753:43	15	i ++
LEAF_NODE	3753:42	3753:42	16	i
LEAF_NODE	3753:43	3753:43	16	++
LEAF_NODE	3753:45	3753:45	13	)
STATEMENTS	3754:10	3754:10	13	
EXPR_STATEMENT	3754:10	3754:33	14	* ( dst + i ) = * ( src + i ) ;
EXPR	3754:10	3754:10	15	* ( dst + i ) = * ( src + i )
ASSIGN	3754:10	3754:23	16	* ( dst + i ) = * ( src + i )
LVAL	3754:10	3754:10	17	* ( dst + i )
UNARY_EXPR	3754:10	3754:19	18	* ( dst + i )
UNARY_OPERATOR	3754:10	3754:10	19	*
LEAF_NODE	3754:10	3754:10	20	*
LEAF_NODE	3754:11	3754:11	19	(
FIELD	3754:12	3754:12	19	dst
LEAF_NODE	3754:12	3754:12	20	dst
LEAF_NODE	3754:16	3754:16	19	+
FIELD	3754:18	3754:18	19	i
LEAF_NODE	3754:18	3754:18	20	i
LEAF_NODE	3754:19	3754:19	19	)
ASSIGN_OP	3754:21	3754:21	17	=
LEAF_NODE	3754:21	3754:21	18	=
RVAL	3754:23	3754:23	17	* ( src + i )
UNARY_EXPR	3754:23	3754:32	18	* ( src + i )
UNARY_OPERATOR	3754:23	3754:23	19	*
LEAF_NODE	3754:23	3754:23	20	*
LEAF_NODE	3754:24	3754:24	19	(
FIELD	3754:25	3754:25	19	src
LEAF_NODE	3754:25	3754:25	20	src
LEAF_NODE	3754:29	3754:29	19	+
FIELD	3754:31	3754:31	19	i
LEAF_NODE	3754:31	3754:31	20	i
LEAF_NODE	3754:32	3754:32	19	)
LEAF_NODE	3754:33	3754:33	15	;
EXPR_STATEMENT	3755:8	3755:31	12	src += bytes_per_sample ;
EXPR	3755:8	3755:8	13	src += bytes_per_sample
ASSIGN	3755:8	3755:15	14	src += bytes_per_sample
LVAL	3755:8	3755:8	15	src
FIELD	3755:8	3755:8	16	src
LEAF_NODE	3755:8	3755:8	17	src
ASSIGN_OP	3755:12	3755:12	15	+=
LEAF_NODE	3755:12	3755:12	16	+=
RVAL	3755:15	3755:15	15	bytes_per_sample
FIELD	3755:15	3755:15	16	bytes_per_sample
LEAF_NODE	3755:15	3755:15	17	bytes_per_sample
LEAF_NODE	3755:31	3755:31	13	;
EXPR_STATEMENT	3756:8	3756:31	12	dst += bytes_per_sample ;
EXPR	3756:8	3756:8	13	dst += bytes_per_sample
ASSIGN	3756:8	3756:15	14	dst += bytes_per_sample
LVAL	3756:8	3756:8	15	dst
FIELD	3756:8	3756:8	16	dst
LEAF_NODE	3756:8	3756:8	17	dst
ASSIGN_OP	3756:12	3756:12	15	+=
LEAF_NODE	3756:12	3756:12	16	+=
RVAL	3756:15	3756:15	15	bytes_per_sample
FIELD	3756:15	3756:15	16	bytes_per_sample
LEAF_NODE	3756:15	3756:15	17	bytes_per_sample
LEAF_NODE	3756:31	3756:31	13	;
LEAF_NODE	3757:8	3757:8	11	}
LEAF_NODE	3758:6	3758:6	8	}
SELECTION	3760:4	3761:6	6	
KEYWORD	3760:4	3760:4	7	if
LEAF_NODE	3760:4	3760:4	8	if
LEAF_NODE	3760:7	3760:7	7	(
CONDITION	3760:8	3760:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	3760:8	3760:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	3760:8	3760:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	3760:8	3760:25	10	( dumpfile != NULL )
LEAF_NODE	3760:8	3760:8	11	(
FIELD	3760:9	3760:9	11	dumpfile
LEAF_NODE	3760:9	3760:9	12	dumpfile
EQ_OPERATOR	3760:18	3760:18	11	!=
LEAF_NODE	3760:18	3760:18	12	!=
FIELD	3760:21	3760:21	11	NULL
LEAF_NODE	3760:21	3760:21	12	NULL
LEAF_NODE	3760:25	3760:25	11	)
LEAF_NODE	3760:27	3760:27	10	&&
EXPR	3760:30	3760:41	10	( level == 2 )
LEAF_NODE	3760:30	3760:30	11	(
FIELD	3760:31	3760:31	11	level
LEAF_NODE	3760:31	3760:31	12	level
EQ_OPERATOR	3760:37	3760:37	11	==
LEAF_NODE	3760:37	3760:37	12	==
FIELD	3760:40	3760:40	11	2
LEAF_NODE	3760:40	3760:40	12	2
LEAF_NODE	3760:41	3760:41	11	)
LEAF_NODE	3760:42	3760:42	7	)
STATEMENTS	3761:6	3764:6	7	
LEAF_NODE	3761:6	3761:6	8	{
STATEMENTS	3762:6	3763:6	8	
EXPR_STATEMENT	3762:6	3762:97	9	dump_info ( dumpfile , format , "combineSeparateSamplesBytes" , "Output data, combined samples" ) ;
EXPR	3762:6	3762:6	10	dump_info ( dumpfile , format , "combineSeparateSamplesBytes" , "Output data, combined samples" )
FUNCTION_CALL	3762:6	3762:96	11	dump_info ( dumpfile , format , "combineSeparateSamplesBytes" , "Output data, combined samples" )
CALLEE	3762:6	3762:6	12	dump_info
LEAF_NODE	3762:6	3762:6	13	dump_info
LEAF_NODE	3762:16	3762:16	12	(
ARGUMENT	3762:17	3762:17	12	dumpfile
FIELD	3762:17	3762:17	13	dumpfile
LEAF_NODE	3762:17	3762:17	14	dumpfile
LEAF_NODE	3762:25	3762:25	12	,
ARGUMENT	3762:27	3762:27	12	format
FIELD	3762:27	3762:27	13	format
LEAF_NODE	3762:27	3762:27	14	format
LEAF_NODE	3762:33	3762:33	12	,
ARGUMENT	3762:35	3762:35	12	"combineSeparateSamplesBytes"
FIELD	3762:35	3762:35	13	"combineSeparateSamplesBytes"
LEAF_NODE	3762:35	3762:35	14	"combineSeparateSamplesBytes"
LEAF_NODE	3762:64	3762:64	12	,
ARGUMENT	3762:65	3762:65	12	"Output data, combined samples"
FIELD	3762:65	3762:65	13	"Output data, combined samples"
LEAF_NODE	3762:65	3762:65	14	"Output data, combined samples"
LEAF_NODE	3762:96	3762:96	12	)
LEAF_NODE	3762:97	3762:97	10	;
EXPR_STATEMENT	3763:6	3763:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	3763:6	3763:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	3763:6	3763:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	3763:6	3763:6	12	dump_buffer
LEAF_NODE	3763:6	3763:6	13	dump_buffer
LEAF_NODE	3763:17	3763:17	12	(
ARGUMENT	3763:18	3763:18	12	dumpfile
FIELD	3763:18	3763:18	13	dumpfile
LEAF_NODE	3763:18	3763:18	14	dumpfile
LEAF_NODE	3763:26	3763:26	12	,
ARGUMENT	3763:28	3763:28	12	format
FIELD	3763:28	3763:28	13	format
LEAF_NODE	3763:28	3763:28	14	format
LEAF_NODE	3763:34	3763:34	12	,
ARGUMENT	3763:36	3763:36	12	1
FIELD	3763:36	3763:36	13	1
LEAF_NODE	3763:36	3763:36	14	1
LEAF_NODE	3763:37	3763:37	12	,
ARGUMENT	3763:39	3763:39	12	dst_rowsize
FIELD	3763:39	3763:39	13	dst_rowsize
LEAF_NODE	3763:39	3763:39	14	dst_rowsize
LEAF_NODE	3763:50	3763:50	12	,
ARGUMENT	3763:52	3763:52	12	row
FIELD	3763:52	3763:52	13	row
LEAF_NODE	3763:52	3763:52	14	row
LEAF_NODE	3763:55	3763:55	12	,
ARGUMENT	3763:57	3763:81	12	out + ( row * dst_rowsize )
FIELD	3763:57	3763:57	13	out
LEAF_NODE	3763:57	3763:57	14	out
LEAF_NODE	3763:61	3763:61	13	+
LEAF_NODE	3763:63	3763:63	13	(
FIELD	3763:64	3763:64	13	row
LEAF_NODE	3763:64	3763:64	14	row
LEAF_NODE	3763:68	3763:68	13	*
FIELD	3763:70	3763:70	13	dst_rowsize
LEAF_NODE	3763:70	3763:70	14	dst_rowsize
LEAF_NODE	3763:81	3763:81	13	)
LEAF_NODE	3763:82	3763:82	12	)
LEAF_NODE	3763:83	3763:83	10	;
LEAF_NODE	3764:6	3764:6	8	}
LEAF_NODE	3765:4	3765:4	5	}
JUMP_STATEMENT	3767:2	3767:12	3	return ( 0 ) ;
KEYWORD	3767:2	3767:2	4	return
LEAF_NODE	3767:2	3767:2	5	return
DESTINATION	3767:9	3767:9	4	( 0 )
EXPR	3767:9	3767:11	5	( 0 )
LEAF_NODE	3767:9	3767:9	6	(
FIELD	3767:10	3767:10	6	0
LEAF_NODE	3767:10	3767:10	7	0
LEAF_NODE	3767:11	3767:11	6	)
LEAF_NODE	3767:12	3767:12	4	;
LEAF_NODE	3768:2	3768:2	2	}
FUNCTION_DEF	3770:0	3868:2	1	
RETURN_TYPE	3770:0	3770:7	2	static int
LEAF_NODE	3770:0	3770:0	3	static
TYPE_NAME	3770:7	3770:7	3	int
LEAF_NODE	3770:7	3770:7	4	int
FUNCTION_NAME	3771:0	3771:0	2	combineSeparateSamples8bits
LEAF_NODE	3771:0	3771:0	3	combineSeparateSamples8bits
PARAMETER_LIST	3771:28	3773:59	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	3771:28	3771:28	3	(
PARAMETER_DECL	3771:29	3771:36	3	uint8 * [ ] in
TYPE	3771:29	3771:38	4	uint8 * [ ]
TYPE_NAME	3771:29	3771:29	5	uint8
LEAF_NODE	3771:29	3771:29	6	uint8
POINTER	3771:35	3771:35	5	*
LEAF_NODE	3771:35	3771:35	6	*
TYPE_SUFFIX	3771:38	3771:39	5	[ ]
LEAF_NODE	3771:38	3771:38	6	[
LEAF_NODE	3771:39	3771:39	6	]
NAME	3771:36	3771:36	4	in
LEAF_NODE	3771:36	3771:36	5	in
LEAF_NODE	3771:40	3771:40	3	,
PARAMETER_DECL	3771:42	3771:49	3	uint8 * out
TYPE	3771:42	3771:48	4	uint8 *
TYPE_NAME	3771:42	3771:42	5	uint8
LEAF_NODE	3771:42	3771:42	6	uint8
POINTER	3771:48	3771:48	5	*
LEAF_NODE	3771:48	3771:48	6	*
NAME	3771:49	3771:49	4	out
LEAF_NODE	3771:49	3771:49	5	out
LEAF_NODE	3771:52	3771:52	3	,
PARAMETER_DECL	3771:54	3771:61	3	uint32 cols
TYPE	3771:54	3771:54	4	uint32
TYPE_NAME	3771:54	3771:54	5	uint32
LEAF_NODE	3771:54	3771:54	6	uint32
NAME	3771:61	3771:61	4	cols
LEAF_NODE	3771:61	3771:61	5	cols
LEAF_NODE	3771:65	3771:65	3	,
PARAMETER_DECL	3772:28	3772:35	3	uint32 rows
TYPE	3772:28	3772:28	4	uint32
TYPE_NAME	3772:28	3772:28	5	uint32
LEAF_NODE	3772:28	3772:28	6	uint32
NAME	3772:35	3772:35	4	rows
LEAF_NODE	3772:35	3772:35	5	rows
LEAF_NODE	3772:39	3772:39	3	,
PARAMETER_DECL	3772:41	3772:48	3	uint16 spp
TYPE	3772:41	3772:41	4	uint16
TYPE_NAME	3772:41	3772:41	5	uint16
LEAF_NODE	3772:41	3772:41	6	uint16
NAME	3772:48	3772:48	4	spp
LEAF_NODE	3772:48	3772:48	5	spp
LEAF_NODE	3772:51	3772:51	3	,
PARAMETER_DECL	3772:53	3772:60	3	uint16 bps
TYPE	3772:53	3772:53	4	uint16
TYPE_NAME	3772:53	3772:53	5	uint16
LEAF_NODE	3772:53	3772:53	6	uint16
NAME	3772:60	3772:60	4	bps
LEAF_NODE	3772:60	3772:60	5	bps
LEAF_NODE	3772:63	3772:63	3	,
PARAMETER_DECL	3773:22	3773:28	3	FILE * dumpfile
TYPE	3773:22	3773:27	4	FILE *
TYPE_NAME	3773:22	3773:22	5	FILE
LEAF_NODE	3773:22	3773:22	6	FILE
POINTER	3773:27	3773:27	5	*
LEAF_NODE	3773:27	3773:27	6	*
NAME	3773:28	3773:28	4	dumpfile
LEAF_NODE	3773:28	3773:28	5	dumpfile
LEAF_NODE	3773:36	3773:36	3	,
PARAMETER_DECL	3773:38	3773:42	3	int format
TYPE	3773:38	3773:38	4	int
TYPE_NAME	3773:38	3773:38	5	int
LEAF_NODE	3773:38	3773:38	6	int
NAME	3773:42	3773:42	4	format
LEAF_NODE	3773:42	3773:42	5	format
LEAF_NODE	3773:48	3773:48	3	,
PARAMETER_DECL	3773:50	3773:54	3	int level
TYPE	3773:50	3773:50	4	int
TYPE_NAME	3773:50	3773:50	5	int
LEAF_NODE	3773:50	3773:50	6	int
NAME	3773:54	3773:54	4	level
LEAF_NODE	3773:54	3773:54	5	level
LEAF_NODE	3773:59	3773:59	3	)
LEAF_NODE	3774:2	3774:2	2	{
STATEMENTS	3775:2	3867:2	2	
SIMPLE_DECL	3775:2	3775:23	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	3775:2	3775:9	4	int ready_bits ; ready_bits = 0
TYPE	3775:2	3775:2	5	int
TYPE_NAME	3775:2	3775:2	6	int
LEAF_NODE	3775:2	3775:2	7	int
NAME	3775:9	3775:9	5	ready_bits
LEAF_NODE	3775:9	3775:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	3775:9	3775:9	5	ready_bits = 0
ASSIGN	3775:9	3775:22	6	ready_bits = 0
LVAL	3775:9	3775:9	7	ready_bits
NAME	3775:9	3775:9	8	ready_bits
LEAF_NODE	3775:9	3775:9	9	ready_bits
ASSIGN_OP	3775:20	3775:20	7	=
LEAF_NODE	3775:20	3775:20	8	=
RVAL	3775:22	3775:22	7	0
FIELD	3775:22	3775:22	8	0
LEAF_NODE	3775:22	3775:22	9	0
LEAF_NODE	3775:23	3775:23	4	;
SIMPLE_DECL	3777:2	3777:45	3	uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset ;
INIT_DECL_LIST	3777:2	3777:2	4	uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset
VAR_DECL	3777:2	3777:9	5	uint32 src_rowsize
TYPE	3777:2	3777:2	6	uint32
TYPE_NAME	3777:2	3777:2	7	uint32
LEAF_NODE	3777:2	3777:2	8	uint32
NAME	3777:9	3777:9	6	src_rowsize
LEAF_NODE	3777:9	3777:9	7	src_rowsize
LEAF_NODE	3777:20	3777:20	5	,
INIT_DECL_LIST	3777:2	3777:2	5	uint32 dst_rowsize , uint32 src_offset
VAR_DECL	3777:2	3777:22	6	uint32 dst_rowsize
TYPE	3777:2	3777:2	7	uint32
TYPE_NAME	3777:2	3777:2	8	uint32
LEAF_NODE	3777:2	3777:2	9	uint32
NAME	3777:22	3777:22	7	dst_rowsize
LEAF_NODE	3777:22	3777:22	8	dst_rowsize
LEAF_NODE	3777:33	3777:33	6	,
VAR_DECL	3777:2	3777:35	6	uint32 src_offset
TYPE	3777:2	3777:2	7	uint32
TYPE_NAME	3777:2	3777:2	8	uint32
LEAF_NODE	3777:2	3777:2	9	uint32
NAME	3777:35	3777:35	7	src_offset
LEAF_NODE	3777:35	3777:35	8	src_offset
LEAF_NODE	3777:45	3777:45	4	;
SIMPLE_DECL	3778:2	3778:19	3	uint32 bit_offset ;
VAR_DECL	3778:2	3778:9	4	uint32 bit_offset
TYPE	3778:2	3778:2	5	uint32
TYPE_NAME	3778:2	3778:2	6	uint32
LEAF_NODE	3778:2	3778:2	7	uint32
NAME	3778:9	3778:9	5	bit_offset
LEAF_NODE	3778:9	3778:9	6	bit_offset
LEAF_NODE	3778:19	3778:19	4	;
SIMPLE_DECL	3779:2	3779:44	3	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	3779:2	3779:2	4	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3779:2	3779:9	5	uint32 row
TYPE	3779:2	3779:2	6	uint32
TYPE_NAME	3779:2	3779:2	7	uint32
LEAF_NODE	3779:2	3779:2	8	uint32
NAME	3779:9	3779:9	6	row
LEAF_NODE	3779:9	3779:9	7	row
LEAF_NODE	3779:12	3779:12	5	,
INIT_DECL_LIST	3779:2	3779:2	5	uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3779:2	3779:14	6	uint32 col
TYPE	3779:2	3779:2	7	uint32
TYPE_NAME	3779:2	3779:2	8	uint32
LEAF_NODE	3779:2	3779:2	9	uint32
NAME	3779:14	3779:14	7	col
LEAF_NODE	3779:14	3779:14	8	col
LEAF_NODE	3779:17	3779:17	6	,
INIT_DECL_LIST	3779:2	3779:2	6	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3779:2	3779:19	7	uint32 src_byte ; src_byte = 0
TYPE	3779:2	3779:2	8	uint32
TYPE_NAME	3779:2	3779:2	9	uint32
LEAF_NODE	3779:2	3779:2	10	uint32
NAME	3779:19	3779:19	8	src_byte
LEAF_NODE	3779:19	3779:19	9	src_byte
LEAF_NODE	0:0	0:0	8	;
INIT	3779:19	3779:19	8	src_byte = 0
ASSIGN	3779:19	3779:30	9	src_byte = 0
LVAL	3779:19	3779:19	10	src_byte
NAME	3779:19	3779:19	11	src_byte
LEAF_NODE	3779:19	3779:19	12	src_byte
ASSIGN_OP	3779:28	3779:28	10	=
LEAF_NODE	3779:28	3779:28	11	=
RVAL	3779:30	3779:30	10	0
FIELD	3779:30	3779:30	11	0
LEAF_NODE	3779:30	3779:30	12	0
LEAF_NODE	3779:31	3779:31	7	,
VAR_DECL	3779:2	3779:33	7	uint32 src_bit ; src_bit = 0
TYPE	3779:2	3779:2	8	uint32
TYPE_NAME	3779:2	3779:2	9	uint32
LEAF_NODE	3779:2	3779:2	10	uint32
NAME	3779:33	3779:33	8	src_bit
LEAF_NODE	3779:33	3779:33	9	src_bit
LEAF_NODE	0:0	0:0	8	;
INIT	3779:33	3779:33	8	src_bit = 0
ASSIGN	3779:33	3779:43	9	src_bit = 0
LVAL	3779:33	3779:33	10	src_bit
NAME	3779:33	3779:33	11	src_bit
LEAF_NODE	3779:33	3779:33	12	src_bit
ASSIGN_OP	3779:41	3779:41	10	=
LEAF_NODE	3779:41	3779:41	11	=
RVAL	3779:43	3779:43	10	0
FIELD	3779:43	3779:43	11	0
LEAF_NODE	3779:43	3779:43	12	0
LEAF_NODE	3779:44	3779:44	4	;
SIMPLE_DECL	3780:2	3780:36	3	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3780:2	3780:2	4	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0
VAR_DECL	3780:2	3780:9	5	uint8 maskbits ; maskbits = 0
TYPE	3780:2	3780:2	6	uint8
TYPE_NAME	3780:2	3780:2	7	uint8
LEAF_NODE	3780:2	3780:2	8	uint8
NAME	3780:9	3780:9	6	maskbits
LEAF_NODE	3780:9	3780:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3780:9	3780:9	6	maskbits = 0
ASSIGN	3780:9	3780:20	7	maskbits = 0
LVAL	3780:9	3780:9	8	maskbits
NAME	3780:9	3780:9	9	maskbits
LEAF_NODE	3780:9	3780:9	10	maskbits
ASSIGN_OP	3780:18	3780:18	8	=
LEAF_NODE	3780:18	3780:18	9	=
RVAL	3780:20	3780:20	8	0
FIELD	3780:20	3780:20	9	0
LEAF_NODE	3780:20	3780:20	10	0
LEAF_NODE	3780:21	3780:21	5	,
VAR_DECL	3780:2	3780:23	5	uint8 matchbits ; matchbits = 0
TYPE	3780:2	3780:2	6	uint8
TYPE_NAME	3780:2	3780:2	7	uint8
LEAF_NODE	3780:2	3780:2	8	uint8
NAME	3780:23	3780:23	6	matchbits
LEAF_NODE	3780:23	3780:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3780:23	3780:23	6	matchbits = 0
ASSIGN	3780:23	3780:35	7	matchbits = 0
LVAL	3780:23	3780:23	8	matchbits
NAME	3780:23	3780:23	9	matchbits
LEAF_NODE	3780:23	3780:23	10	matchbits
ASSIGN_OP	3780:33	3780:33	8	=
LEAF_NODE	3780:33	3780:33	9	=
RVAL	3780:35	3780:35	8	0
FIELD	3780:35	3780:35	9	0
LEAF_NODE	3780:35	3780:35	10	0
LEAF_NODE	3780:36	3780:36	4	;
SIMPLE_DECL	3781:2	3781:29	3	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	3781:2	3781:2	4	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0
VAR_DECL	3781:2	3781:9	5	uint8 buff1 ; buff1 = 0
TYPE	3781:2	3781:2	6	uint8
TYPE_NAME	3781:2	3781:2	7	uint8
LEAF_NODE	3781:2	3781:2	8	uint8
NAME	3781:9	3781:9	6	buff1
LEAF_NODE	3781:9	3781:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3781:9	3781:9	6	buff1 = 0
ASSIGN	3781:9	3781:17	7	buff1 = 0
LVAL	3781:9	3781:9	8	buff1
NAME	3781:9	3781:9	9	buff1
LEAF_NODE	3781:9	3781:9	10	buff1
ASSIGN_OP	3781:15	3781:15	8	=
LEAF_NODE	3781:15	3781:15	9	=
RVAL	3781:17	3781:17	8	0
FIELD	3781:17	3781:17	9	0
LEAF_NODE	3781:17	3781:17	10	0
LEAF_NODE	3781:18	3781:18	5	,
VAR_DECL	3781:2	3781:20	5	uint8 buff2 ; buff2 = 0
TYPE	3781:2	3781:2	6	uint8
TYPE_NAME	3781:2	3781:2	7	uint8
LEAF_NODE	3781:2	3781:2	8	uint8
NAME	3781:20	3781:20	6	buff2
LEAF_NODE	3781:20	3781:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	3781:20	3781:20	6	buff2 = 0
ASSIGN	3781:20	3781:28	7	buff2 = 0
LVAL	3781:20	3781:20	8	buff2
NAME	3781:20	3781:20	9	buff2
LEAF_NODE	3781:20	3781:20	10	buff2
ASSIGN_OP	3781:26	3781:26	8	=
LEAF_NODE	3781:26	3781:26	9	=
RVAL	3781:28	3781:28	8	0
FIELD	3781:28	3781:28	9	0
LEAF_NODE	3781:28	3781:28	10	0
LEAF_NODE	3781:29	3781:29	4	;
SIMPLE_DECL	3782:2	3782:13	3	tsample_t s ;
VAR_DECL	3782:2	3782:12	4	tsample_t s
TYPE	3782:2	3782:2	5	tsample_t
TYPE_NAME	3782:2	3782:2	6	tsample_t
LEAF_NODE	3782:2	3782:2	7	tsample_t
NAME	3782:12	3782:12	5	s
LEAF_NODE	3782:12	3782:12	6	s
LEAF_NODE	3782:13	3782:13	4	;
SIMPLE_DECL	3783:2	3783:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	3783:2	3783:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	3783:2	3783:16	5	unsigned char *
TYPE_NAME	3783:2	3783:11	6	unsigned char
LEAF_NODE	3783:2	3783:2	7	unsigned
LEAF_NODE	3783:11	3783:11	7	char
POINTER	3783:16	3783:16	6	*
LEAF_NODE	3783:16	3783:16	7	*
NAME	3783:17	3783:17	5	src
LEAF_NODE	3783:17	3783:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3783:17	3783:17	5	src = in [ 0 ]
ASSIGN	3783:17	3783:23	6	src = in [ 0 ]
LVAL	3783:17	3783:17	7	src
NAME	3783:17	3783:17	8	src
LEAF_NODE	3783:17	3783:17	9	src
ASSIGN_OP	3783:21	3783:21	7	=
LEAF_NODE	3783:21	3783:21	8	=
RVAL	3783:23	3783:23	7	in [ 0 ]
FIELD	3783:23	3783:27	8	in [ 0 ]
LEAF_NODE	3783:23	3783:23	9	in
LEAF_NODE	3783:25	3783:25	9	[
EXPR	3783:26	3783:26	9	0
FIELD	3783:26	3783:26	10	0
LEAF_NODE	3783:26	3783:26	11	0
LEAF_NODE	3783:27	3783:27	9	]
LEAF_NODE	3783:28	3783:28	4	;
SIMPLE_DECL	3784:2	3784:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	3784:2	3784:17	4	unsigned char * dst ; dst = out
TYPE	3784:2	3784:16	5	unsigned char *
TYPE_NAME	3784:2	3784:11	6	unsigned char
LEAF_NODE	3784:2	3784:2	7	unsigned
LEAF_NODE	3784:11	3784:11	7	char
POINTER	3784:16	3784:16	6	*
LEAF_NODE	3784:16	3784:16	7	*
NAME	3784:17	3784:17	5	dst
LEAF_NODE	3784:17	3784:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3784:17	3784:17	5	dst = out
ASSIGN	3784:17	3784:23	6	dst = out
LVAL	3784:17	3784:17	7	dst
NAME	3784:17	3784:17	8	dst
LEAF_NODE	3784:17	3784:17	9	dst
ASSIGN_OP	3784:21	3784:21	7	=
LEAF_NODE	3784:21	3784:21	8	=
RVAL	3784:23	3784:23	7	out
FIELD	3784:23	3784:23	8	out
LEAF_NODE	3784:23	3784:23	9	out
LEAF_NODE	3784:26	3784:26	4	;
SIMPLE_DECL	3785:2	3785:27	3	char [ 32 ] action ;
VAR_DECL	3785:2	3785:17	4	char [ 32 ] action
TYPE	3785:2	3785:23	5	char [ 32 ]
TYPE_NAME	3785:2	3785:2	6	char
LEAF_NODE	3785:2	3785:2	7	char
TYPE_SUFFIX	3785:23	3785:26	6	[ 32 ]
LEAF_NODE	3785:23	3785:23	7	[
FIELD	3785:24	3785:24	7	32
LEAF_NODE	3785:24	3785:24	8	32
LEAF_NODE	3785:26	3785:26	7	]
NAME	3785:17	3785:17	5	action
LEAF_NODE	3785:17	3785:17	6	action
LEAF_NODE	3785:27	3785:27	4	;
SELECTION	3787:2	3788:4	3	
KEYWORD	3787:2	3787:2	4	if
LEAF_NODE	3787:2	3787:2	5	if
LEAF_NODE	3787:5	3787:5	4	(
CONDITION	3787:6	3787:6	4	( src == NULL ) || ( dst == NULL )
EXPR	3787:6	3787:6	5	( src == NULL ) || ( dst == NULL )
OR	3787:6	3787:23	6	( src == NULL ) || ( dst == NULL )
EXPR	3787:6	3787:18	7	( src == NULL )
LEAF_NODE	3787:6	3787:6	8	(
FIELD	3787:7	3787:7	8	src
LEAF_NODE	3787:7	3787:7	9	src
EQ_OPERATOR	3787:11	3787:11	8	==
LEAF_NODE	3787:11	3787:11	9	==
FIELD	3787:14	3787:14	8	NULL
LEAF_NODE	3787:14	3787:14	9	NULL
LEAF_NODE	3787:18	3787:18	8	)
LEAF_NODE	3787:20	3787:20	7	||
EXPR	3787:23	3787:35	7	( dst == NULL )
LEAF_NODE	3787:23	3787:23	8	(
FIELD	3787:24	3787:24	8	dst
LEAF_NODE	3787:24	3787:24	9	dst
EQ_OPERATOR	3787:28	3787:28	8	==
LEAF_NODE	3787:28	3787:28	9	==
FIELD	3787:31	3787:31	8	NULL
LEAF_NODE	3787:31	3787:31	9	NULL
LEAF_NODE	3787:35	3787:35	8	)
LEAF_NODE	3787:36	3787:36	4	)
STATEMENTS	3788:4	3791:4	4	
LEAF_NODE	3788:4	3788:4	5	{
STATEMENTS	3789:4	3790:4	5	
EXPR_STATEMENT	3789:4	3789:77	6	TIFFError ( "combineSeparateSamples8bits" , "Invalid input or output buffer" ) ;
EXPR	3789:4	3789:4	7	TIFFError ( "combineSeparateSamples8bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3789:4	3789:76	8	TIFFError ( "combineSeparateSamples8bits" , "Invalid input or output buffer" )
CALLEE	3789:4	3789:4	9	TIFFError
LEAF_NODE	3789:4	3789:4	10	TIFFError
LEAF_NODE	3789:13	3789:13	9	(
ARGUMENT	3789:14	3789:14	9	"combineSeparateSamples8bits"
FIELD	3789:14	3789:14	10	"combineSeparateSamples8bits"
LEAF_NODE	3789:14	3789:14	11	"combineSeparateSamples8bits"
LEAF_NODE	3789:43	3789:43	9	,
ARGUMENT	3789:44	3789:44	9	"Invalid input or output buffer"
FIELD	3789:44	3789:44	10	"Invalid input or output buffer"
LEAF_NODE	3789:44	3789:44	11	"Invalid input or output buffer"
LEAF_NODE	3789:76	3789:76	9	)
LEAF_NODE	3789:77	3789:77	7	;
JUMP_STATEMENT	3790:4	3790:14	6	return ( 1 ) ;
KEYWORD	3790:4	3790:4	7	return
LEAF_NODE	3790:4	3790:4	8	return
DESTINATION	3790:11	3790:11	7	( 1 )
EXPR	3790:11	3790:13	8	( 1 )
LEAF_NODE	3790:11	3790:11	9	(
FIELD	3790:12	3790:12	9	1
LEAF_NODE	3790:12	3790:12	10	1
LEAF_NODE	3790:13	3790:13	9	)
LEAF_NODE	3790:14	3790:14	7	;
LEAF_NODE	3791:4	3791:4	5	}
EXPR_STATEMENT	3794:2	3794:38	3	src_rowsize = ( ( bps * cols ) + 7 ) / 8 ;
EXPR	3794:2	3794:2	4	src_rowsize = ( ( bps * cols ) + 7 ) / 8
ASSIGN	3794:2	3794:16	5	src_rowsize = ( ( bps * cols ) + 7 ) / 8
LVAL	3794:2	3794:2	6	src_rowsize
FIELD	3794:2	3794:2	7	src_rowsize
LEAF_NODE	3794:2	3794:2	8	src_rowsize
ASSIGN_OP	3794:14	3794:14	6	=
LEAF_NODE	3794:14	3794:14	7	=
RVAL	3794:16	3794:37	6	( ( bps * cols ) + 7 ) / 8
LEAF_NODE	3794:16	3794:16	7	(
LEAF_NODE	3794:17	3794:17	7	(
FIELD	3794:18	3794:18	7	bps
LEAF_NODE	3794:18	3794:18	8	bps
LEAF_NODE	3794:22	3794:22	7	*
FIELD	3794:24	3794:24	7	cols
LEAF_NODE	3794:24	3794:24	8	cols
LEAF_NODE	3794:28	3794:28	7	)
LEAF_NODE	3794:30	3794:30	7	+
FIELD	3794:32	3794:32	7	7
LEAF_NODE	3794:32	3794:32	8	7
LEAF_NODE	3794:33	3794:33	7	)
LEAF_NODE	3794:35	3794:35	7	/
FIELD	3794:37	3794:37	7	8
LEAF_NODE	3794:37	3794:37	8	8
LEAF_NODE	3794:38	3794:38	4	;
LEAF_NODE	3795:2	3795:2	3	dst_rowsize
LEAF_NODE	3795:14	3795:14	3	=
LEAF_NODE	3795:16	3795:16	3	(
LEAF_NODE	3795:17	3795:17	3	(
LEAF_NODE	3795:18	3795:18	3	bps
LEAF_NODE	3795:22	3795:22	3	*
LEAF_NODE	3795:24	3795:24	3	cols
LEAF_NODE	3795:29	3795:29	3	*
LEAF_NODE	3795:31	3795:31	3	spp
LEAF_NODE	3795:34	3795:34	3	)
LEAF_NODE	3795:36	3795:36	3	+
LEAF_NODE	3795:38	3795:38	3	7
LEAF_NODE	3795:39	3795:39	3	)
LEAF_NODE	3795:41	3795:41	3	/
EXPR_STATEMENT	3795:43	3795:44	3	8 ;
EXPR	3795:43	3795:43	4	8
FIELD	3795:43	3795:43	5	8
LEAF_NODE	3795:43	3795:43	6	8
LEAF_NODE	3795:44	3795:44	4	;
EXPR_STATEMENT	3796:2	3796:37	3	maskbits = ( uint8 ) - 1 >> ( 8 - bps ) ;
EXPR	3796:2	3796:2	4	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
ASSIGN	3796:2	3796:14	5	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
LVAL	3796:2	3796:2	6	maskbits
FIELD	3796:2	3796:2	7	maskbits
LEAF_NODE	3796:2	3796:2	8	maskbits
ASSIGN_OP	3796:11	3796:11	6	=
LEAF_NODE	3796:11	3796:11	7	=
RVAL	3796:14	3796:36	6	( uint8 ) - 1 >> ( 8 - bps )
LEAF_NODE	3796:14	3796:14	7	(
TYPE_NAME	3796:15	3796:15	7	uint8
LEAF_NODE	3796:15	3796:15	8	uint8
LEAF_NODE	3796:20	3796:20	7	)
UNARY_EXPR	3796:21	3796:22	7	- 1
UNARY_OPERATOR	3796:21	3796:21	8	-
LEAF_NODE	3796:21	3796:21	9	-
FIELD	3796:22	3796:22	8	1
LEAF_NODE	3796:22	3796:22	9	1
LEAF_NODE	3796:24	3796:24	7	>>
LEAF_NODE	3796:27	3796:27	7	(
FIELD	3796:29	3796:29	7	8
LEAF_NODE	3796:29	3796:29	8	8
LEAF_NODE	3796:31	3796:31	7	-
FIELD	3796:33	3796:33	7	bps
LEAF_NODE	3796:33	3796:33	8	bps
LEAF_NODE	3796:36	3796:36	7	)
LEAF_NODE	3796:37	3796:37	4	;
ITERATION	3798:2	3799:4	3	
KEYWORD	3798:2	3798:2	4	for
LEAF_NODE	3798:2	3798:2	5	for
LEAF_NODE	3798:6	3798:6	4	(
FOR_INIT	3798:7	3798:14	4	row = 0 ;
EXPR	3798:7	3798:7	5	row = 0
ASSIGN	3798:7	3798:13	6	row = 0
LVAL	3798:7	3798:7	7	row
FIELD	3798:7	3798:7	8	row
LEAF_NODE	3798:7	3798:7	9	row
ASSIGN_OP	3798:11	3798:11	7	=
LEAF_NODE	3798:11	3798:11	8	=
RVAL	3798:13	3798:13	7	0
FIELD	3798:13	3798:13	8	0
LEAF_NODE	3798:13	3798:13	9	0
LEAF_NODE	3798:14	3798:14	5	;
CONDITION	3798:16	3798:16	4	row < rows
EXPR	3798:16	3798:22	5	row < rows
FIELD	3798:16	3798:16	6	row
LEAF_NODE	3798:16	3798:16	7	row
REL_OPERATOR	3798:20	3798:20	6	<
LEAF_NODE	3798:20	3798:20	7	<
FIELD	3798:22	3798:22	6	rows
LEAF_NODE	3798:22	3798:22	7	rows
LEAF_NODE	3798:26	3798:26	4	;
FOR_EXPR	3798:28	3798:28	4	row ++
EXPR	3798:28	3798:28	5	row ++
FIELD	3798:28	3798:31	6	row ++
LEAF_NODE	3798:28	3798:28	7	row
LEAF_NODE	3798:31	3798:31	7	++
LEAF_NODE	3798:33	3798:33	4	)
STATEMENTS	3799:4	3865:4	4	
LEAF_NODE	3799:4	3799:4	5	{
STATEMENTS	3800:4	3860:4	5	
EXPR_STATEMENT	3800:4	3800:18	6	ready_bits = 0 ;
EXPR	3800:4	3800:4	7	ready_bits = 0
ASSIGN	3800:4	3800:17	8	ready_bits = 0
LVAL	3800:4	3800:4	9	ready_bits
FIELD	3800:4	3800:4	10	ready_bits
LEAF_NODE	3800:4	3800:4	11	ready_bits
ASSIGN_OP	3800:15	3800:15	9	=
LEAF_NODE	3800:15	3800:15	10	=
RVAL	3800:17	3800:17	9	0
FIELD	3800:17	3800:17	10	0
LEAF_NODE	3800:17	3800:17	11	0
LEAF_NODE	3800:18	3800:18	7	;
EXPR_STATEMENT	3801:4	3801:21	6	buff1 = buff2 = 0 ;
EXPR	3801:4	3801:4	7	buff1 = buff2 = 0
ASSIGN	3801:4	3801:12	8	buff1 = buff2 = 0
LVAL	3801:4	3801:4	9	buff1
FIELD	3801:4	3801:4	10	buff1
LEAF_NODE	3801:4	3801:4	11	buff1
ASSIGN_OP	3801:10	3801:10	9	=
LEAF_NODE	3801:10	3801:10	10	=
RVAL	3801:12	3801:12	9	buff2 = 0
ASSIGN	3801:12	3801:20	10	buff2 = 0
LVAL	3801:12	3801:12	11	buff2
FIELD	3801:12	3801:12	12	buff2
LEAF_NODE	3801:12	3801:12	13	buff2
ASSIGN_OP	3801:18	3801:18	11	=
LEAF_NODE	3801:18	3801:18	12	=
RVAL	3801:20	3801:20	11	0
FIELD	3801:20	3801:20	12	0
LEAF_NODE	3801:20	3801:20	13	0
LEAF_NODE	3801:21	3801:21	7	;
EXPR_STATEMENT	3802:4	3802:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	3802:4	3802:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	3802:4	3802:10	8	dst = out + ( row * dst_rowsize )
LVAL	3802:4	3802:4	9	dst
FIELD	3802:4	3802:4	10	dst
LEAF_NODE	3802:4	3802:4	11	dst
ASSIGN_OP	3802:8	3802:8	9	=
LEAF_NODE	3802:8	3802:8	10	=
RVAL	3802:10	3802:34	9	out + ( row * dst_rowsize )
FIELD	3802:10	3802:10	10	out
LEAF_NODE	3802:10	3802:10	11	out
LEAF_NODE	3802:14	3802:14	10	+
LEAF_NODE	3802:16	3802:16	10	(
FIELD	3802:17	3802:17	10	row
LEAF_NODE	3802:17	3802:17	11	row
LEAF_NODE	3802:21	3802:21	10	*
FIELD	3802:23	3802:23	10	dst_rowsize
LEAF_NODE	3802:23	3802:23	11	dst_rowsize
LEAF_NODE	3802:34	3802:34	10	)
LEAF_NODE	3802:35	3802:35	7	;
EXPR_STATEMENT	3803:4	3803:34	6	src_offset = row * src_rowsize ;
EXPR	3803:4	3803:4	7	src_offset = row * src_rowsize
ASSIGN	3803:4	3803:17	8	src_offset = row * src_rowsize
LVAL	3803:4	3803:4	9	src_offset
FIELD	3803:4	3803:4	10	src_offset
LEAF_NODE	3803:4	3803:4	11	src_offset
ASSIGN_OP	3803:15	3803:15	9	=
LEAF_NODE	3803:15	3803:15	10	=
RVAL	3803:17	3803:23	9	row * src_rowsize
FIELD	3803:17	3803:17	10	row
LEAF_NODE	3803:17	3803:17	11	row
LEAF_NODE	3803:21	3803:21	10	*
FIELD	3803:23	3803:23	10	src_rowsize
LEAF_NODE	3803:23	3803:23	11	src_rowsize
LEAF_NODE	3803:34	3803:34	7	;
ITERATION	3804:4	3805:6	6	
KEYWORD	3804:4	3804:4	7	for
LEAF_NODE	3804:4	3804:4	8	for
LEAF_NODE	3804:8	3804:8	7	(
FOR_INIT	3804:9	3804:16	7	col = 0 ;
EXPR	3804:9	3804:9	8	col = 0
ASSIGN	3804:9	3804:15	9	col = 0
LVAL	3804:9	3804:9	10	col
FIELD	3804:9	3804:9	11	col
LEAF_NODE	3804:9	3804:9	12	col
ASSIGN_OP	3804:13	3804:13	10	=
LEAF_NODE	3804:13	3804:13	11	=
RVAL	3804:15	3804:15	10	0
FIELD	3804:15	3804:15	11	0
LEAF_NODE	3804:15	3804:15	12	0
LEAF_NODE	3804:16	3804:16	8	;
CONDITION	3804:18	3804:18	7	col < cols
EXPR	3804:18	3804:24	8	col < cols
FIELD	3804:18	3804:18	9	col
LEAF_NODE	3804:18	3804:18	10	col
REL_OPERATOR	3804:22	3804:22	9	<
LEAF_NODE	3804:22	3804:22	10	<
FIELD	3804:24	3804:24	9	cols
LEAF_NODE	3804:24	3804:24	10	cols
LEAF_NODE	3804:28	3804:28	7	;
FOR_EXPR	3804:30	3804:30	7	col ++
EXPR	3804:30	3804:30	8	col ++
FIELD	3804:30	3804:33	9	col ++
LEAF_NODE	3804:30	3804:30	10	col
LEAF_NODE	3804:33	3804:33	10	++
LEAF_NODE	3804:35	3804:35	7	)
STATEMENTS	3805:6	3845:6	7	
LEAF_NODE	3805:6	3805:6	8	{
STATEMENTS	3807:6	3813:6	8	
EXPR_STATEMENT	3807:6	3807:28	9	bit_offset = col * bps ;
EXPR	3807:6	3807:6	10	bit_offset = col * bps
ASSIGN	3807:6	3807:19	11	bit_offset = col * bps
LVAL	3807:6	3807:6	12	bit_offset
FIELD	3807:6	3807:6	13	bit_offset
LEAF_NODE	3807:6	3807:6	14	bit_offset
ASSIGN_OP	3807:17	3807:17	12	=
LEAF_NODE	3807:17	3807:17	13	=
RVAL	3807:19	3807:25	12	col * bps
FIELD	3807:19	3807:19	13	col
LEAF_NODE	3807:19	3807:19	14	col
LEAF_NODE	3807:23	3807:23	13	*
FIELD	3807:25	3807:25	13	bps
LEAF_NODE	3807:25	3807:25	14	bps
LEAF_NODE	3807:28	3807:28	10	;
EXPR_STATEMENT	3808:6	3808:31	9	src_byte = bit_offset / 8 ;
EXPR	3808:6	3808:6	10	src_byte = bit_offset / 8
ASSIGN	3808:6	3808:17	11	src_byte = bit_offset / 8
LVAL	3808:6	3808:6	12	src_byte
FIELD	3808:6	3808:6	13	src_byte
LEAF_NODE	3808:6	3808:6	14	src_byte
ASSIGN_OP	3808:15	3808:15	12	=
LEAF_NODE	3808:15	3808:15	13	=
RVAL	3808:17	3808:30	12	bit_offset / 8
FIELD	3808:17	3808:17	13	bit_offset
LEAF_NODE	3808:17	3808:17	14	bit_offset
LEAF_NODE	3808:28	3808:28	13	/
FIELD	3808:30	3808:30	13	8
LEAF_NODE	3808:30	3808:30	14	8
LEAF_NODE	3808:31	3808:31	10	;
EXPR_STATEMENT	3809:6	3809:31	9	src_bit = bit_offset % 8 ;
EXPR	3809:6	3809:6	10	src_bit = bit_offset % 8
ASSIGN	3809:6	3809:17	11	src_bit = bit_offset % 8
LVAL	3809:6	3809:6	12	src_bit
FIELD	3809:6	3809:6	13	src_bit
LEAF_NODE	3809:6	3809:6	14	src_bit
ASSIGN_OP	3809:15	3809:15	12	=
LEAF_NODE	3809:15	3809:15	13	=
RVAL	3809:17	3809:30	12	bit_offset % 8
FIELD	3809:17	3809:17	13	bit_offset
LEAF_NODE	3809:17	3809:17	14	bit_offset
LEAF_NODE	3809:28	3809:28	13	%
FIELD	3809:30	3809:30	13	8
LEAF_NODE	3809:30	3809:30	14	8
LEAF_NODE	3809:31	3809:31	10	;
EXPR_STATEMENT	3811:6	3811:49	9	matchbits = maskbits << ( 8 - src_bit - bps ) ;
EXPR	3811:6	3811:6	10	matchbits = maskbits << ( 8 - src_bit - bps )
ASSIGN	3811:6	3811:18	11	matchbits = maskbits << ( 8 - src_bit - bps )
LVAL	3811:6	3811:6	12	matchbits
FIELD	3811:6	3811:6	13	matchbits
LEAF_NODE	3811:6	3811:6	14	matchbits
ASSIGN_OP	3811:16	3811:16	12	=
LEAF_NODE	3811:16	3811:16	13	=
RVAL	3811:18	3811:48	12	maskbits << ( 8 - src_bit - bps )
FIELD	3811:18	3811:18	13	maskbits
LEAF_NODE	3811:18	3811:18	14	maskbits
LEAF_NODE	3811:27	3811:27	13	<<
LEAF_NODE	3811:30	3811:30	13	(
FIELD	3811:31	3811:31	13	8
LEAF_NODE	3811:31	3811:31	14	8
LEAF_NODE	3811:33	3811:33	13	-
FIELD	3811:35	3811:35	13	src_bit
LEAF_NODE	3811:35	3811:35	14	src_bit
LEAF_NODE	3811:43	3811:43	13	-
FIELD	3811:45	3811:45	13	bps
LEAF_NODE	3811:45	3811:45	14	bps
LEAF_NODE	3811:48	3811:48	13	)
LEAF_NODE	3811:49	3811:49	10	;
ITERATION	3813:6	3814:8	9	
KEYWORD	3813:6	3813:6	10	for
LEAF_NODE	3813:6	3813:6	11	for
LEAF_NODE	3813:10	3813:10	10	(
FOR_INIT	3813:11	3813:16	10	s = 0 ;
EXPR	3813:11	3813:11	11	s = 0
ASSIGN	3813:11	3813:15	12	s = 0
LVAL	3813:11	3813:11	13	s
FIELD	3813:11	3813:11	14	s
LEAF_NODE	3813:11	3813:11	15	s
ASSIGN_OP	3813:13	3813:13	13	=
LEAF_NODE	3813:13	3813:13	14	=
RVAL	3813:15	3813:15	13	0
FIELD	3813:15	3813:15	14	0
LEAF_NODE	3813:15	3813:15	15	0
LEAF_NODE	3813:16	3813:16	11	;
CONDITION	3813:18	3813:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	3813:18	3813:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	3813:18	3813:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	3813:18	3813:26	13	( s < spp )
LEAF_NODE	3813:18	3813:18	14	(
FIELD	3813:19	3813:19	14	s
LEAF_NODE	3813:19	3813:19	15	s
REL_OPERATOR	3813:21	3813:21	14	<
LEAF_NODE	3813:21	3813:21	15	<
FIELD	3813:23	3813:23	14	spp
LEAF_NODE	3813:23	3813:23	15	spp
LEAF_NODE	3813:26	3813:26	14	)
LEAF_NODE	3813:28	3813:28	13	&&
EXPR	3813:31	3813:47	13	( s < MAX_SAMPLES )
LEAF_NODE	3813:31	3813:31	14	(
FIELD	3813:32	3813:32	14	s
LEAF_NODE	3813:32	3813:32	15	s
REL_OPERATOR	3813:34	3813:34	14	<
LEAF_NODE	3813:34	3813:34	15	<
FIELD	3813:36	3813:36	14	MAX_SAMPLES
LEAF_NODE	3813:36	3813:36	15	MAX_SAMPLES
LEAF_NODE	3813:47	3813:47	14	)
LEAF_NODE	3813:48	3813:48	10	;
FOR_EXPR	3813:50	3813:50	10	s ++
EXPR	3813:50	3813:50	11	s ++
FIELD	3813:50	3813:51	12	s ++
LEAF_NODE	3813:50	3813:50	13	s
LEAF_NODE	3813:51	3813:51	13	++
LEAF_NODE	3813:53	3813:53	10	)
STATEMENTS	3814:8	3844:8	10	
LEAF_NODE	3814:8	3814:8	11	{
STATEMENTS	3815:1	3833:8	11	
EXPR_STATEMENT	3815:1	3815:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	3815:1	3815:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	3815:1	3815:7	14	src = in [ s ] + src_offset + src_byte
LVAL	3815:1	3815:1	15	src
FIELD	3815:1	3815:1	16	src
LEAF_NODE	3815:1	3815:1	17	src
ASSIGN_OP	3815:5	3815:5	15	=
LEAF_NODE	3815:5	3815:5	16	=
RVAL	3815:7	3815:28	15	in [ s ] + src_offset + src_byte
FIELD	3815:7	3815:11	16	in [ s ]
LEAF_NODE	3815:7	3815:7	17	in
LEAF_NODE	3815:9	3815:9	17	[
EXPR	3815:10	3815:10	17	s
FIELD	3815:10	3815:10	18	s
LEAF_NODE	3815:10	3815:10	19	s
LEAF_NODE	3815:11	3815:11	17	]
LEAF_NODE	3815:13	3815:13	16	+
FIELD	3815:15	3815:15	16	src_offset
LEAF_NODE	3815:15	3815:15	17	src_offset
LEAF_NODE	3815:26	3815:26	16	+
FIELD	3815:28	3815:28	16	src_byte
LEAF_NODE	3815:28	3815:28	17	src_byte
LEAF_NODE	3815:36	3815:36	13	;
LEAF_NODE	3816:8	3816:8	12	buff1
LEAF_NODE	3816:14	3816:14	12	=
LEAF_NODE	3816:16	3816:16	12	(
LEAF_NODE	3816:17	3816:17	12	(
LEAF_NODE	3816:18	3816:18	12	*
LEAF_NODE	3816:19	3816:19	12	src
LEAF_NODE	3816:22	3816:22	12	)
LEAF_NODE	3816:24	3816:24	12	&
LEAF_NODE	3816:26	3816:26	12	matchbits
LEAF_NODE	3816:35	3816:35	12	)
LEAF_NODE	3816:37	3816:37	12	<<
LEAF_NODE	3816:40	3816:40	12	(
LEAF_NODE	3816:41	3816:41	12	src_bit
LEAF_NODE	3816:48	3816:48	12	)
LEAF_NODE	3816:49	3816:49	12	;
SELECTION	3819:8	3820:10	12	
KEYWORD	3819:8	3819:8	13	if
LEAF_NODE	3819:8	3819:8	14	if
LEAF_NODE	3819:11	3819:11	13	(
CONDITION	3819:12	3819:12	13	ready_bits >= 8
EXPR	3819:12	3819:26	14	ready_bits >= 8
FIELD	3819:12	3819:12	15	ready_bits
LEAF_NODE	3819:12	3819:12	16	ready_bits
REL_OPERATOR	3819:23	3819:23	15	>=
LEAF_NODE	3819:23	3819:23	16	>=
FIELD	3819:26	3819:26	15	8
LEAF_NODE	3819:26	3819:26	16	8
LEAF_NODE	3819:27	3819:27	13	)
STATEMENTS	3820:10	3825:10	13	
LEAF_NODE	3820:10	3820:10	14	{
STATEMENTS	3821:10	3824:10	14	
EXPR_STATEMENT	3821:10	3821:24	15	* dst ++ = buff2 ;
EXPR	3821:10	3821:10	16	* dst ++ = buff2
ASSIGN	3821:10	3821:19	17	* dst ++ = buff2
LVAL	3821:10	3821:10	18	* dst ++
UNARY_EXPR	3821:10	3821:11	19	* dst ++
UNARY_OPERATOR	3821:10	3821:10	20	*
LEAF_NODE	3821:10	3821:10	21	*
FIELD	3821:11	3821:14	20	dst ++
LEAF_NODE	3821:11	3821:11	21	dst
LEAF_NODE	3821:14	3821:14	21	++
ASSIGN_OP	3821:17	3821:17	18	=
LEAF_NODE	3821:17	3821:17	19	=
RVAL	3821:19	3821:19	18	buff2
FIELD	3821:19	3821:19	19	buff2
LEAF_NODE	3821:19	3821:19	20	buff2
LEAF_NODE	3821:24	3821:24	16	;
EXPR_STATEMENT	3822:10	3822:23	15	buff2 = buff1 ;
EXPR	3822:10	3822:10	16	buff2 = buff1
ASSIGN	3822:10	3822:18	17	buff2 = buff1
LVAL	3822:10	3822:10	18	buff2
FIELD	3822:10	3822:10	19	buff2
LEAF_NODE	3822:10	3822:10	20	buff2
ASSIGN_OP	3822:16	3822:16	18	=
LEAF_NODE	3822:16	3822:16	19	=
RVAL	3822:18	3822:18	18	buff1
FIELD	3822:18	3822:18	19	buff1
LEAF_NODE	3822:18	3822:18	20	buff1
LEAF_NODE	3822:23	3822:23	16	;
EXPR_STATEMENT	3823:10	3823:25	15	ready_bits -= 8 ;
EXPR	3823:10	3823:10	16	ready_bits -= 8
ASSIGN	3823:10	3823:24	17	ready_bits -= 8
LVAL	3823:10	3823:10	18	ready_bits
FIELD	3823:10	3823:10	19	ready_bits
LEAF_NODE	3823:10	3823:10	20	ready_bits
ASSIGN_OP	3823:21	3823:21	18	-=
LEAF_NODE	3823:21	3823:21	19	-=
RVAL	3823:24	3823:24	18	8
FIELD	3823:24	3823:24	19	8
LEAF_NODE	3823:24	3823:24	20	8
LEAF_NODE	3823:25	3823:25	16	;
EXPR_STATEMENT	3824:10	3824:34	15	strcpy ( action , "Flush" ) ;
EXPR	3824:10	3824:10	16	strcpy ( action , "Flush" )
FUNCTION_CALL	3824:10	3824:33	17	strcpy ( action , "Flush" )
CALLEE	3824:10	3824:10	18	strcpy
LEAF_NODE	3824:10	3824:10	19	strcpy
LEAF_NODE	3824:17	3824:17	18	(
ARGUMENT	3824:18	3824:18	18	action
FIELD	3824:18	3824:18	19	action
LEAF_NODE	3824:18	3824:18	20	action
LEAF_NODE	3824:24	3824:24	18	,
ARGUMENT	3824:26	3824:26	18	"Flush"
FIELD	3824:26	3824:26	19	"Flush"
LEAF_NODE	3824:26	3824:26	20	"Flush"
LEAF_NODE	3824:33	3824:33	18	)
LEAF_NODE	3824:34	3824:34	16	;
LEAF_NODE	3825:10	3825:10	14	}
SELECTION	3826:8	3827:10	12	
KEYWORD	3826:8	3826:8	13	else
LEAF_NODE	3826:8	3826:8	14	else
STATEMENTS	3827:10	3830:10	13	
LEAF_NODE	3827:10	3827:10	14	{
STATEMENTS	3828:10	3829:10	14	
EXPR_STATEMENT	3828:10	3828:49	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	3828:10	3828:10	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	3828:10	3828:18	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	3828:10	3828:10	18	buff2
FIELD	3828:10	3828:10	19	buff2
LEAF_NODE	3828:10	3828:10	20	buff2
ASSIGN_OP	3828:16	3828:16	18	=
LEAF_NODE	3828:16	3828:16	19	=
RVAL	3828:18	3828:48	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	3828:18	3828:18	19	(
BIT_OR	3828:19	3828:27	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3828:19	3828:19	20	buff2
FIELD	3828:19	3828:19	21	buff2
LEAF_NODE	3828:19	3828:19	22	buff2
LEAF_NODE	3828:25	3828:25	20	|
BIT_OR_ELEM	3828:27	3828:47	20	( buff1 >> ready_bits )
LEAF_NODE	3828:27	3828:27	21	(
FIELD	3828:28	3828:28	21	buff1
LEAF_NODE	3828:28	3828:28	22	buff1
LEAF_NODE	3828:34	3828:34	21	>>
FIELD	3828:37	3828:37	21	ready_bits
LEAF_NODE	3828:37	3828:37	22	ready_bits
LEAF_NODE	3828:47	3828:47	21	)
LEAF_NODE	3828:48	3828:48	19	)
LEAF_NODE	3828:49	3828:49	16	;
EXPR_STATEMENT	3829:10	3829:35	15	strcpy ( action , "Update" ) ;
EXPR	3829:10	3829:10	16	strcpy ( action , "Update" )
FUNCTION_CALL	3829:10	3829:34	17	strcpy ( action , "Update" )
CALLEE	3829:10	3829:10	18	strcpy
LEAF_NODE	3829:10	3829:10	19	strcpy
LEAF_NODE	3829:17	3829:17	18	(
ARGUMENT	3829:18	3829:18	18	action
FIELD	3829:18	3829:18	19	action
LEAF_NODE	3829:18	3829:18	20	action
LEAF_NODE	3829:24	3829:24	18	,
ARGUMENT	3829:26	3829:26	18	"Update"
FIELD	3829:26	3829:26	19	"Update"
LEAF_NODE	3829:26	3829:26	20	"Update"
LEAF_NODE	3829:34	3829:34	18	)
LEAF_NODE	3829:35	3829:35	16	;
LEAF_NODE	3830:10	3830:10	14	}
EXPR_STATEMENT	3831:8	3831:25	12	ready_bits += bps ;
EXPR	3831:8	3831:8	13	ready_bits += bps
ASSIGN	3831:8	3831:22	14	ready_bits += bps
LVAL	3831:8	3831:8	15	ready_bits
FIELD	3831:8	3831:8	16	ready_bits
LEAF_NODE	3831:8	3831:8	17	ready_bits
ASSIGN_OP	3831:19	3831:19	15	+=
LEAF_NODE	3831:19	3831:19	16	+=
RVAL	3831:22	3831:22	15	bps
FIELD	3831:22	3831:22	16	bps
LEAF_NODE	3831:22	3831:22	17	bps
LEAF_NODE	3831:25	3831:25	13	;
SELECTION	3833:8	3834:10	12	
KEYWORD	3833:8	3833:8	13	if
LEAF_NODE	3833:8	3833:8	14	if
LEAF_NODE	3833:11	3833:11	13	(
CONDITION	3833:12	3833:12	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	3833:12	3833:12	14	( dumpfile != NULL ) && ( level == 3 )
AND	3833:12	3833:34	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	3833:12	3833:29	16	( dumpfile != NULL )
LEAF_NODE	3833:12	3833:12	17	(
FIELD	3833:13	3833:13	17	dumpfile
LEAF_NODE	3833:13	3833:13	18	dumpfile
EQ_OPERATOR	3833:22	3833:22	17	!=
LEAF_NODE	3833:22	3833:22	18	!=
FIELD	3833:25	3833:25	17	NULL
LEAF_NODE	3833:25	3833:25	18	NULL
LEAF_NODE	3833:29	3833:29	17	)
LEAF_NODE	3833:31	3833:31	16	&&
EXPR	3833:34	3833:45	16	( level == 3 )
LEAF_NODE	3833:34	3833:34	17	(
FIELD	3833:35	3833:35	17	level
LEAF_NODE	3833:35	3833:35	18	level
EQ_OPERATOR	3833:41	3833:41	17	==
LEAF_NODE	3833:41	3833:41	18	==
FIELD	3833:44	3833:44	17	3
LEAF_NODE	3833:44	3833:44	18	3
LEAF_NODE	3833:45	3833:45	17	)
LEAF_NODE	3833:46	3833:46	13	)
STATEMENTS	3834:10	3843:3	13	
LEAF_NODE	3834:10	3834:10	14	{
STATEMENTS	3835:10	3842:10	14	
EXPR_STATEMENT	3835:10	3837:55	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	3835:10	3835:10	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	3835:10	3837:54	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	3835:10	3835:10	18	dump_info
LEAF_NODE	3835:10	3835:10	19	dump_info
LEAF_NODE	3835:20	3835:20	18	(
ARGUMENT	3835:21	3835:21	18	dumpfile
FIELD	3835:21	3835:21	19	dumpfile
LEAF_NODE	3835:21	3835:21	20	dumpfile
LEAF_NODE	3835:29	3835:29	18	,
ARGUMENT	3835:31	3835:31	18	format
FIELD	3835:31	3835:31	19	format
LEAF_NODE	3835:31	3835:31	20	format
LEAF_NODE	3835:37	3835:37	18	,
ARGUMENT	3835:39	3835:39	18	""
FIELD	3835:39	3835:39	19	""
LEAF_NODE	3835:39	3835:39	20	""
LEAF_NODE	3835:41	3835:41	18	,
ARGUMENT	3836:19	3836:19	18	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	3836:19	3836:19	19	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3836:19	3836:19	20	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3836:102	3836:102	18	,
ARGUMENT	3837:5	3837:11	18	row + 1
FIELD	3837:5	3837:5	19	row
LEAF_NODE	3837:5	3837:5	20	row
LEAF_NODE	3837:9	3837:9	19	+
FIELD	3837:11	3837:11	19	1
LEAF_NODE	3837:11	3837:11	20	1
LEAF_NODE	3837:12	3837:12	18	,
ARGUMENT	3837:14	3837:20	18	col + 1
FIELD	3837:14	3837:14	19	col
LEAF_NODE	3837:14	3837:14	20	col
LEAF_NODE	3837:18	3837:18	19	+
FIELD	3837:20	3837:20	19	1
LEAF_NODE	3837:20	3837:20	20	1
LEAF_NODE	3837:21	3837:21	18	,
ARGUMENT	3837:23	3837:23	18	s
FIELD	3837:23	3837:23	19	s
LEAF_NODE	3837:23	3837:23	20	s
LEAF_NODE	3837:24	3837:24	18	,
ARGUMENT	3837:26	3837:26	18	src_byte
FIELD	3837:26	3837:26	19	src_byte
LEAF_NODE	3837:26	3837:26	20	src_byte
LEAF_NODE	3837:34	3837:34	18	,
ARGUMENT	3837:36	3837:36	18	src_bit
FIELD	3837:36	3837:36	19	src_bit
LEAF_NODE	3837:36	3837:36	20	src_bit
LEAF_NODE	3837:43	3837:43	18	,
ARGUMENT	3837:45	3837:51	18	dst - out
FIELD	3837:45	3837:45	19	dst
LEAF_NODE	3837:45	3837:45	20	dst
LEAF_NODE	3837:49	3837:49	19	-
FIELD	3837:51	3837:51	19	out
LEAF_NODE	3837:51	3837:51	20	out
LEAF_NODE	3837:54	3837:54	18	)
LEAF_NODE	3837:55	3837:55	16	;
EXPR_STATEMENT	3838:10	3838:63	15	dump_byte ( dumpfile , format , "Match bits" , matchbits ) ;
EXPR	3838:10	3838:10	16	dump_byte ( dumpfile , format , "Match bits" , matchbits )
FUNCTION_CALL	3838:10	3838:62	17	dump_byte ( dumpfile , format , "Match bits" , matchbits )
CALLEE	3838:10	3838:10	18	dump_byte
LEAF_NODE	3838:10	3838:10	19	dump_byte
LEAF_NODE	3838:20	3838:20	18	(
ARGUMENT	3838:21	3838:21	18	dumpfile
FIELD	3838:21	3838:21	19	dumpfile
LEAF_NODE	3838:21	3838:21	20	dumpfile
LEAF_NODE	3838:29	3838:29	18	,
ARGUMENT	3838:31	3838:31	18	format
FIELD	3838:31	3838:31	19	format
LEAF_NODE	3838:31	3838:31	20	format
LEAF_NODE	3838:37	3838:37	18	,
ARGUMENT	3838:39	3838:39	18	"Match bits"
FIELD	3838:39	3838:39	19	"Match bits"
LEAF_NODE	3838:39	3838:39	20	"Match bits"
LEAF_NODE	3838:51	3838:51	18	,
ARGUMENT	3838:53	3838:53	18	matchbits
FIELD	3838:53	3838:53	19	matchbits
LEAF_NODE	3838:53	3838:53	20	matchbits
LEAF_NODE	3838:62	3838:62	18	)
LEAF_NODE	3838:63	3838:63	16	;
EXPR_STATEMENT	3839:10	3839:58	15	dump_byte ( dumpfile , format , "Src   bits" , * src ) ;
EXPR	3839:10	3839:10	16	dump_byte ( dumpfile , format , "Src   bits" , * src )
FUNCTION_CALL	3839:10	3839:57	17	dump_byte ( dumpfile , format , "Src   bits" , * src )
CALLEE	3839:10	3839:10	18	dump_byte
LEAF_NODE	3839:10	3839:10	19	dump_byte
LEAF_NODE	3839:20	3839:20	18	(
ARGUMENT	3839:21	3839:21	18	dumpfile
FIELD	3839:21	3839:21	19	dumpfile
LEAF_NODE	3839:21	3839:21	20	dumpfile
LEAF_NODE	3839:29	3839:29	18	,
ARGUMENT	3839:31	3839:31	18	format
FIELD	3839:31	3839:31	19	format
LEAF_NODE	3839:31	3839:31	20	format
LEAF_NODE	3839:37	3839:37	18	,
ARGUMENT	3839:39	3839:39	18	"Src   bits"
FIELD	3839:39	3839:39	19	"Src   bits"
LEAF_NODE	3839:39	3839:39	20	"Src   bits"
LEAF_NODE	3839:51	3839:51	18	,
ARGUMENT	3839:53	3839:53	18	* src
UNARY_EXPR	3839:53	3839:54	19	* src
UNARY_OPERATOR	3839:53	3839:53	20	*
LEAF_NODE	3839:53	3839:53	21	*
FIELD	3839:54	3839:54	20	src
LEAF_NODE	3839:54	3839:54	21	src
LEAF_NODE	3839:57	3839:57	18	)
LEAF_NODE	3839:58	3839:58	16	;
EXPR_STATEMENT	3840:10	3840:59	15	dump_byte ( dumpfile , format , "Buff1 bits" , buff1 ) ;
EXPR	3840:10	3840:10	16	dump_byte ( dumpfile , format , "Buff1 bits" , buff1 )
FUNCTION_CALL	3840:10	3840:58	17	dump_byte ( dumpfile , format , "Buff1 bits" , buff1 )
CALLEE	3840:10	3840:10	18	dump_byte
LEAF_NODE	3840:10	3840:10	19	dump_byte
LEAF_NODE	3840:20	3840:20	18	(
ARGUMENT	3840:21	3840:21	18	dumpfile
FIELD	3840:21	3840:21	19	dumpfile
LEAF_NODE	3840:21	3840:21	20	dumpfile
LEAF_NODE	3840:29	3840:29	18	,
ARGUMENT	3840:31	3840:31	18	format
FIELD	3840:31	3840:31	19	format
LEAF_NODE	3840:31	3840:31	20	format
LEAF_NODE	3840:37	3840:37	18	,
ARGUMENT	3840:39	3840:39	18	"Buff1 bits"
FIELD	3840:39	3840:39	19	"Buff1 bits"
LEAF_NODE	3840:39	3840:39	20	"Buff1 bits"
LEAF_NODE	3840:51	3840:51	18	,
ARGUMENT	3840:53	3840:53	18	buff1
FIELD	3840:53	3840:53	19	buff1
LEAF_NODE	3840:53	3840:53	20	buff1
LEAF_NODE	3840:58	3840:58	18	)
LEAF_NODE	3840:59	3840:59	16	;
EXPR_STATEMENT	3841:10	3841:59	15	dump_byte ( dumpfile , format , "Buff2 bits" , buff2 ) ;
EXPR	3841:10	3841:10	16	dump_byte ( dumpfile , format , "Buff2 bits" , buff2 )
FUNCTION_CALL	3841:10	3841:58	17	dump_byte ( dumpfile , format , "Buff2 bits" , buff2 )
CALLEE	3841:10	3841:10	18	dump_byte
LEAF_NODE	3841:10	3841:10	19	dump_byte
LEAF_NODE	3841:20	3841:20	18	(
ARGUMENT	3841:21	3841:21	18	dumpfile
FIELD	3841:21	3841:21	19	dumpfile
LEAF_NODE	3841:21	3841:21	20	dumpfile
LEAF_NODE	3841:29	3841:29	18	,
ARGUMENT	3841:31	3841:31	18	format
FIELD	3841:31	3841:31	19	format
LEAF_NODE	3841:31	3841:31	20	format
LEAF_NODE	3841:37	3841:37	18	,
ARGUMENT	3841:39	3841:39	18	"Buff2 bits"
FIELD	3841:39	3841:39	19	"Buff2 bits"
LEAF_NODE	3841:39	3841:39	20	"Buff2 bits"
LEAF_NODE	3841:51	3841:51	18	,
ARGUMENT	3841:53	3841:53	18	buff2
FIELD	3841:53	3841:53	19	buff2
LEAF_NODE	3841:53	3841:53	20	buff2
LEAF_NODE	3841:58	3841:58	18	)
LEAF_NODE	3841:59	3841:59	16	;
EXPR_STATEMENT	3842:10	3842:55	15	dump_info ( dumpfile , format , "" , "%s" , action ) ;
EXPR	3842:10	3842:10	16	dump_info ( dumpfile , format , "" , "%s" , action )
FUNCTION_CALL	3842:10	3842:54	17	dump_info ( dumpfile , format , "" , "%s" , action )
CALLEE	3842:10	3842:10	18	dump_info
LEAF_NODE	3842:10	3842:10	19	dump_info
LEAF_NODE	3842:20	3842:20	18	(
ARGUMENT	3842:21	3842:21	18	dumpfile
FIELD	3842:21	3842:21	19	dumpfile
LEAF_NODE	3842:21	3842:21	20	dumpfile
LEAF_NODE	3842:29	3842:29	18	,
ARGUMENT	3842:31	3842:31	18	format
FIELD	3842:31	3842:31	19	format
LEAF_NODE	3842:31	3842:31	20	format
LEAF_NODE	3842:37	3842:37	18	,
ARGUMENT	3842:39	3842:39	18	""
FIELD	3842:39	3842:39	19	""
LEAF_NODE	3842:39	3842:39	20	""
LEAF_NODE	3842:41	3842:41	18	,
ARGUMENT	3842:42	3842:42	18	"%s"
FIELD	3842:42	3842:42	19	"%s"
LEAF_NODE	3842:42	3842:42	20	"%s"
LEAF_NODE	3842:46	3842:46	18	,
ARGUMENT	3842:48	3842:48	18	action
FIELD	3842:48	3842:48	19	action
LEAF_NODE	3842:48	3842:48	20	action
LEAF_NODE	3842:54	3842:54	18	)
LEAF_NODE	3842:55	3842:55	16	;
LEAF_NODE	3843:3	3843:3	14	}
LEAF_NODE	3844:8	3844:8	11	}
LEAF_NODE	3845:6	3845:6	8	}
SELECTION	3847:4	3848:6	6	
KEYWORD	3847:4	3847:4	7	if
LEAF_NODE	3847:4	3847:4	8	if
LEAF_NODE	3847:7	3847:7	7	(
CONDITION	3847:8	3847:8	7	ready_bits > 0
EXPR	3847:8	3847:21	8	ready_bits > 0
FIELD	3847:8	3847:8	9	ready_bits
LEAF_NODE	3847:8	3847:8	10	ready_bits
REL_OPERATOR	3847:19	3847:19	9	>
LEAF_NODE	3847:19	3847:19	10	>
FIELD	3847:21	3847:21	9	0
LEAF_NODE	3847:21	3847:21	10	0
LEAF_NODE	3847:22	3847:22	7	)
STATEMENTS	3848:6	3858:6	7	
LEAF_NODE	3848:6	3848:6	8	{
STATEMENTS	3849:6	3851:6	8	
EXPR_STATEMENT	3849:6	3849:63	9	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) ) ;
EXPR	3849:6	3849:6	10	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
ASSIGN	3849:6	3849:14	11	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LVAL	3849:6	3849:6	12	buff1
FIELD	3849:6	3849:6	13	buff1
LEAF_NODE	3849:6	3849:6	14	buff1
ASSIGN_OP	3849:12	3849:12	12	=
LEAF_NODE	3849:12	3849:12	13	=
RVAL	3849:14	3849:62	12	( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LEAF_NODE	3849:14	3849:14	13	(
FIELD	3849:15	3849:15	13	buff2
LEAF_NODE	3849:15	3849:15	14	buff2
LEAF_NODE	3849:21	3849:21	13	&
LEAF_NODE	3849:23	3849:23	13	(
LEAF_NODE	3849:24	3849:24	13	(
TYPE_NAME	3849:25	3849:34	13	unsigned int
LEAF_NODE	3849:25	3849:25	14	unsigned
LEAF_NODE	3849:34	3849:34	14	int
LEAF_NODE	3849:37	3849:37	13	)
FIELD	3849:38	3849:38	13	255
LEAF_NODE	3849:38	3849:38	14	255
LEAF_NODE	3849:42	3849:42	13	<<
LEAF_NODE	3849:45	3849:45	13	(
FIELD	3849:46	3849:46	13	8
LEAF_NODE	3849:46	3849:46	14	8
LEAF_NODE	3849:48	3849:48	13	-
FIELD	3849:50	3849:50	13	ready_bits
LEAF_NODE	3849:50	3849:50	14	ready_bits
LEAF_NODE	3849:60	3849:60	13	)
LEAF_NODE	3849:61	3849:61	13	)
LEAF_NODE	3849:62	3849:62	13	)
LEAF_NODE	3849:63	3849:63	10	;
EXPR_STATEMENT	3850:6	3850:20	9	* dst ++ = buff1 ;
EXPR	3850:6	3850:6	10	* dst ++ = buff1
ASSIGN	3850:6	3850:15	11	* dst ++ = buff1
LVAL	3850:6	3850:6	12	* dst ++
UNARY_EXPR	3850:6	3850:7	13	* dst ++
UNARY_OPERATOR	3850:6	3850:6	14	*
LEAF_NODE	3850:6	3850:6	15	*
FIELD	3850:7	3850:10	14	dst ++
LEAF_NODE	3850:7	3850:7	15	dst
LEAF_NODE	3850:10	3850:10	15	++
ASSIGN_OP	3850:13	3850:13	12	=
LEAF_NODE	3850:13	3850:13	13	=
RVAL	3850:15	3850:15	12	buff1
FIELD	3850:15	3850:15	13	buff1
LEAF_NODE	3850:15	3850:15	14	buff1
LEAF_NODE	3850:20	3850:20	10	;
SELECTION	3851:6	3852:8	9	
KEYWORD	3851:6	3851:6	10	if
LEAF_NODE	3851:6	3851:6	11	if
LEAF_NODE	3851:9	3851:9	10	(
CONDITION	3851:10	3851:10	10	( dumpfile != NULL ) && ( level == 3 )
EXPR	3851:10	3851:10	11	( dumpfile != NULL ) && ( level == 3 )
AND	3851:10	3851:32	12	( dumpfile != NULL ) && ( level == 3 )
EXPR	3851:10	3851:27	13	( dumpfile != NULL )
LEAF_NODE	3851:10	3851:10	14	(
FIELD	3851:11	3851:11	14	dumpfile
LEAF_NODE	3851:11	3851:11	15	dumpfile
EQ_OPERATOR	3851:20	3851:20	14	!=
LEAF_NODE	3851:20	3851:20	15	!=
FIELD	3851:23	3851:23	14	NULL
LEAF_NODE	3851:23	3851:23	15	NULL
LEAF_NODE	3851:27	3851:27	14	)
LEAF_NODE	3851:29	3851:29	13	&&
EXPR	3851:32	3851:43	13	( level == 3 )
LEAF_NODE	3851:32	3851:32	14	(
FIELD	3851:33	3851:33	14	level
LEAF_NODE	3851:33	3851:33	15	level
EQ_OPERATOR	3851:39	3851:39	14	==
LEAF_NODE	3851:39	3851:39	15	==
FIELD	3851:42	3851:42	14	3
LEAF_NODE	3851:42	3851:42	15	3
LEAF_NODE	3851:43	3851:43	14	)
LEAF_NODE	3851:44	3851:44	10	)
STATEMENTS	3852:8	3857:8	10	
LEAF_NODE	3852:8	3852:8	11	{
STATEMENTS	3853:8	3856:17	11	
EXPR_STATEMENT	3853:8	3855:57	12	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	3853:8	3853:8	13	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	3853:8	3855:56	14	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	3853:8	3853:8	15	dump_info
LEAF_NODE	3853:8	3853:8	16	dump_info
LEAF_NODE	3853:18	3853:18	15	(
ARGUMENT	3853:19	3853:19	15	dumpfile
FIELD	3853:19	3853:19	16	dumpfile
LEAF_NODE	3853:19	3853:19	17	dumpfile
LEAF_NODE	3853:27	3853:27	15	,
ARGUMENT	3853:29	3853:29	15	format
FIELD	3853:29	3853:29	16	format
LEAF_NODE	3853:29	3853:29	17	format
LEAF_NODE	3853:35	3853:35	15	,
ARGUMENT	3853:37	3853:37	15	""
FIELD	3853:37	3853:37	16	""
LEAF_NODE	3853:37	3853:37	17	""
LEAF_NODE	3853:39	3853:39	15	,
ARGUMENT	3854:10	3854:10	15	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	3854:10	3854:10	16	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3854:10	3854:10	17	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3854:81	3854:81	15	,
ARGUMENT	3855:10	3855:16	15	row + 1
FIELD	3855:10	3855:10	16	row
LEAF_NODE	3855:10	3855:10	17	row
LEAF_NODE	3855:14	3855:14	16	+
FIELD	3855:16	3855:16	16	1
LEAF_NODE	3855:16	3855:16	17	1
LEAF_NODE	3855:17	3855:17	15	,
ARGUMENT	3855:19	3855:25	15	col + 1
FIELD	3855:19	3855:19	16	col
LEAF_NODE	3855:19	3855:19	17	col
LEAF_NODE	3855:23	3855:23	16	+
FIELD	3855:25	3855:25	16	1
LEAF_NODE	3855:25	3855:25	17	1
LEAF_NODE	3855:26	3855:26	15	,
ARGUMENT	3855:28	3855:28	15	src_byte
FIELD	3855:28	3855:28	16	src_byte
LEAF_NODE	3855:28	3855:28	17	src_byte
LEAF_NODE	3855:36	3855:36	15	,
ARGUMENT	3855:38	3855:38	15	src_bit
FIELD	3855:38	3855:38	16	src_bit
LEAF_NODE	3855:38	3855:38	17	src_bit
LEAF_NODE	3855:45	3855:45	15	,
ARGUMENT	3855:47	3855:53	15	dst - out
FIELD	3855:47	3855:47	16	dst
LEAF_NODE	3855:47	3855:47	17	dst
LEAF_NODE	3855:51	3855:51	16	-
FIELD	3855:53	3855:53	16	out
LEAF_NODE	3855:53	3855:53	17	out
LEAF_NODE	3855:56	3855:56	15	)
LEAF_NODE	3855:57	3855:57	13	;
EXPR_STATEMENT	3856:17	3856:66	12	dump_byte ( dumpfile , format , "Final bits" , buff1 ) ;
EXPR	3856:17	3856:17	13	dump_byte ( dumpfile , format , "Final bits" , buff1 )
FUNCTION_CALL	3856:17	3856:65	14	dump_byte ( dumpfile , format , "Final bits" , buff1 )
CALLEE	3856:17	3856:17	15	dump_byte
LEAF_NODE	3856:17	3856:17	16	dump_byte
LEAF_NODE	3856:27	3856:27	15	(
ARGUMENT	3856:28	3856:28	15	dumpfile
FIELD	3856:28	3856:28	16	dumpfile
LEAF_NODE	3856:28	3856:28	17	dumpfile
LEAF_NODE	3856:36	3856:36	15	,
ARGUMENT	3856:38	3856:38	15	format
FIELD	3856:38	3856:38	16	format
LEAF_NODE	3856:38	3856:38	17	format
LEAF_NODE	3856:44	3856:44	15	,
ARGUMENT	3856:46	3856:46	15	"Final bits"
FIELD	3856:46	3856:46	16	"Final bits"
LEAF_NODE	3856:46	3856:46	17	"Final bits"
LEAF_NODE	3856:58	3856:58	15	,
ARGUMENT	3856:60	3856:60	15	buff1
FIELD	3856:60	3856:60	16	buff1
LEAF_NODE	3856:60	3856:60	17	buff1
LEAF_NODE	3856:65	3856:65	15	)
LEAF_NODE	3856:66	3856:66	13	;
LEAF_NODE	3857:8	3857:8	11	}
LEAF_NODE	3858:6	3858:6	8	}
SELECTION	3860:4	3861:6	6	
KEYWORD	3860:4	3860:4	7	if
LEAF_NODE	3860:4	3860:4	8	if
LEAF_NODE	3860:7	3860:7	7	(
CONDITION	3860:8	3860:8	7	( dumpfile != NULL ) && ( level >= 2 )
EXPR	3860:8	3860:8	8	( dumpfile != NULL ) && ( level >= 2 )
AND	3860:8	3860:30	9	( dumpfile != NULL ) && ( level >= 2 )
EXPR	3860:8	3860:25	10	( dumpfile != NULL )
LEAF_NODE	3860:8	3860:8	11	(
FIELD	3860:9	3860:9	11	dumpfile
LEAF_NODE	3860:9	3860:9	12	dumpfile
EQ_OPERATOR	3860:18	3860:18	11	!=
LEAF_NODE	3860:18	3860:18	12	!=
FIELD	3860:21	3860:21	11	NULL
LEAF_NODE	3860:21	3860:21	12	NULL
LEAF_NODE	3860:25	3860:25	11	)
LEAF_NODE	3860:27	3860:27	10	&&
EXPR	3860:30	3860:41	10	( level >= 2 )
LEAF_NODE	3860:30	3860:30	11	(
FIELD	3860:31	3860:31	11	level
LEAF_NODE	3860:31	3860:31	12	level
REL_OPERATOR	3860:37	3860:37	11	>=
LEAF_NODE	3860:37	3860:37	12	>=
FIELD	3860:40	3860:40	11	2
LEAF_NODE	3860:40	3860:40	12	2
LEAF_NODE	3860:41	3860:41	11	)
LEAF_NODE	3860:42	3860:42	7	)
STATEMENTS	3861:6	3864:6	7	
LEAF_NODE	3861:6	3861:6	8	{
STATEMENTS	3862:6	3863:6	8	
EXPR_STATEMENT	3862:6	3862:79	9	dump_info ( dumpfile , format , "combineSeparateSamples8bits" , "Output data" ) ;
EXPR	3862:6	3862:6	10	dump_info ( dumpfile , format , "combineSeparateSamples8bits" , "Output data" )
FUNCTION_CALL	3862:6	3862:78	11	dump_info ( dumpfile , format , "combineSeparateSamples8bits" , "Output data" )
CALLEE	3862:6	3862:6	12	dump_info
LEAF_NODE	3862:6	3862:6	13	dump_info
LEAF_NODE	3862:16	3862:16	12	(
ARGUMENT	3862:17	3862:17	12	dumpfile
FIELD	3862:17	3862:17	13	dumpfile
LEAF_NODE	3862:17	3862:17	14	dumpfile
LEAF_NODE	3862:25	3862:25	12	,
ARGUMENT	3862:27	3862:27	12	format
FIELD	3862:27	3862:27	13	format
LEAF_NODE	3862:27	3862:27	14	format
LEAF_NODE	3862:33	3862:33	12	,
ARGUMENT	3862:35	3862:35	12	"combineSeparateSamples8bits"
FIELD	3862:35	3862:35	13	"combineSeparateSamples8bits"
LEAF_NODE	3862:35	3862:35	14	"combineSeparateSamples8bits"
LEAF_NODE	3862:64	3862:64	12	,
ARGUMENT	3862:65	3862:65	12	"Output data"
FIELD	3862:65	3862:65	13	"Output data"
LEAF_NODE	3862:65	3862:65	14	"Output data"
LEAF_NODE	3862:78	3862:78	12	)
LEAF_NODE	3862:79	3862:79	10	;
EXPR_STATEMENT	3863:6	3863:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	3863:6	3863:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	3863:6	3863:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	3863:6	3863:6	12	dump_buffer
LEAF_NODE	3863:6	3863:6	13	dump_buffer
LEAF_NODE	3863:17	3863:17	12	(
ARGUMENT	3863:18	3863:18	12	dumpfile
FIELD	3863:18	3863:18	13	dumpfile
LEAF_NODE	3863:18	3863:18	14	dumpfile
LEAF_NODE	3863:26	3863:26	12	,
ARGUMENT	3863:28	3863:28	12	format
FIELD	3863:28	3863:28	13	format
LEAF_NODE	3863:28	3863:28	14	format
LEAF_NODE	3863:34	3863:34	12	,
ARGUMENT	3863:36	3863:36	12	1
FIELD	3863:36	3863:36	13	1
LEAF_NODE	3863:36	3863:36	14	1
LEAF_NODE	3863:37	3863:37	12	,
ARGUMENT	3863:39	3863:39	12	dst_rowsize
FIELD	3863:39	3863:39	13	dst_rowsize
LEAF_NODE	3863:39	3863:39	14	dst_rowsize
LEAF_NODE	3863:50	3863:50	12	,
ARGUMENT	3863:52	3863:52	12	row
FIELD	3863:52	3863:52	13	row
LEAF_NODE	3863:52	3863:52	14	row
LEAF_NODE	3863:55	3863:55	12	,
ARGUMENT	3863:57	3863:81	12	out + ( row * dst_rowsize )
FIELD	3863:57	3863:57	13	out
LEAF_NODE	3863:57	3863:57	14	out
LEAF_NODE	3863:61	3863:61	13	+
LEAF_NODE	3863:63	3863:63	13	(
FIELD	3863:64	3863:64	13	row
LEAF_NODE	3863:64	3863:64	14	row
LEAF_NODE	3863:68	3863:68	13	*
FIELD	3863:70	3863:70	13	dst_rowsize
LEAF_NODE	3863:70	3863:70	14	dst_rowsize
LEAF_NODE	3863:81	3863:81	13	)
LEAF_NODE	3863:82	3863:82	12	)
LEAF_NODE	3863:83	3863:83	10	;
LEAF_NODE	3864:6	3864:6	8	}
LEAF_NODE	3865:4	3865:4	5	}
JUMP_STATEMENT	3867:2	3867:12	3	return ( 0 ) ;
KEYWORD	3867:2	3867:2	4	return
LEAF_NODE	3867:2	3867:2	5	return
DESTINATION	3867:9	3867:9	4	( 0 )
EXPR	3867:9	3867:11	5	( 0 )
LEAF_NODE	3867:9	3867:9	6	(
FIELD	3867:10	3867:10	6	0
LEAF_NODE	3867:10	3867:10	7	0
LEAF_NODE	3867:11	3867:11	6	)
LEAF_NODE	3867:12	3867:12	4	;
LEAF_NODE	3868:2	3868:2	2	}
FUNCTION_DEF	3870:0	3978:2	1	
RETURN_TYPE	3870:0	3870:7	2	static int
LEAF_NODE	3870:0	3870:0	3	static
TYPE_NAME	3870:7	3870:7	3	int
LEAF_NODE	3870:7	3870:7	4	int
FUNCTION_NAME	3871:0	3871:0	2	combineSeparateSamples16bits
LEAF_NODE	3871:0	3871:0	3	combineSeparateSamples16bits
PARAMETER_LIST	3871:29	3873:61	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	3871:29	3871:29	3	(
PARAMETER_DECL	3871:30	3871:37	3	uint8 * [ ] in
TYPE	3871:30	3871:39	4	uint8 * [ ]
TYPE_NAME	3871:30	3871:30	5	uint8
LEAF_NODE	3871:30	3871:30	6	uint8
POINTER	3871:36	3871:36	5	*
LEAF_NODE	3871:36	3871:36	6	*
TYPE_SUFFIX	3871:39	3871:40	5	[ ]
LEAF_NODE	3871:39	3871:39	6	[
LEAF_NODE	3871:40	3871:40	6	]
NAME	3871:37	3871:37	4	in
LEAF_NODE	3871:37	3871:37	5	in
LEAF_NODE	3871:41	3871:41	3	,
PARAMETER_DECL	3871:43	3871:50	3	uint8 * out
TYPE	3871:43	3871:49	4	uint8 *
TYPE_NAME	3871:43	3871:43	5	uint8
LEAF_NODE	3871:43	3871:43	6	uint8
POINTER	3871:49	3871:49	5	*
LEAF_NODE	3871:49	3871:49	6	*
NAME	3871:50	3871:50	4	out
LEAF_NODE	3871:50	3871:50	5	out
LEAF_NODE	3871:53	3871:53	3	,
PARAMETER_DECL	3871:55	3871:62	3	uint32 cols
TYPE	3871:55	3871:55	4	uint32
TYPE_NAME	3871:55	3871:55	5	uint32
LEAF_NODE	3871:55	3871:55	6	uint32
NAME	3871:62	3871:62	4	cols
LEAF_NODE	3871:62	3871:62	5	cols
LEAF_NODE	3871:66	3871:66	3	,
PARAMETER_DECL	3872:30	3872:37	3	uint32 rows
TYPE	3872:30	3872:30	4	uint32
TYPE_NAME	3872:30	3872:30	5	uint32
LEAF_NODE	3872:30	3872:30	6	uint32
NAME	3872:37	3872:37	4	rows
LEAF_NODE	3872:37	3872:37	5	rows
LEAF_NODE	3872:41	3872:41	3	,
PARAMETER_DECL	3872:43	3872:50	3	uint16 spp
TYPE	3872:43	3872:43	4	uint16
TYPE_NAME	3872:43	3872:43	5	uint16
LEAF_NODE	3872:43	3872:43	6	uint16
NAME	3872:50	3872:50	4	spp
LEAF_NODE	3872:50	3872:50	5	spp
LEAF_NODE	3872:53	3872:53	3	,
PARAMETER_DECL	3872:55	3872:62	3	uint16 bps
TYPE	3872:55	3872:55	4	uint16
TYPE_NAME	3872:55	3872:55	5	uint16
LEAF_NODE	3872:55	3872:55	6	uint16
NAME	3872:62	3872:62	4	bps
LEAF_NODE	3872:62	3872:62	5	bps
LEAF_NODE	3872:65	3872:65	3	,
PARAMETER_DECL	3873:24	3873:30	3	FILE * dumpfile
TYPE	3873:24	3873:29	4	FILE *
TYPE_NAME	3873:24	3873:24	5	FILE
LEAF_NODE	3873:24	3873:24	6	FILE
POINTER	3873:29	3873:29	5	*
LEAF_NODE	3873:29	3873:29	6	*
NAME	3873:30	3873:30	4	dumpfile
LEAF_NODE	3873:30	3873:30	5	dumpfile
LEAF_NODE	3873:38	3873:38	3	,
PARAMETER_DECL	3873:40	3873:44	3	int format
TYPE	3873:40	3873:40	4	int
TYPE_NAME	3873:40	3873:40	5	int
LEAF_NODE	3873:40	3873:40	6	int
NAME	3873:44	3873:44	4	format
LEAF_NODE	3873:44	3873:44	5	format
LEAF_NODE	3873:50	3873:50	3	,
PARAMETER_DECL	3873:52	3873:56	3	int level
TYPE	3873:52	3873:52	4	int
TYPE_NAME	3873:52	3873:52	5	int
LEAF_NODE	3873:52	3873:52	6	int
NAME	3873:56	3873:56	4	level
LEAF_NODE	3873:56	3873:56	5	level
LEAF_NODE	3873:61	3873:61	3	)
LEAF_NODE	3874:2	3874:2	2	{
STATEMENTS	3875:2	3977:2	2	
SIMPLE_DECL	3875:2	3875:51	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	3875:2	3875:9	4	int ready_bits ; ready_bits = 0
TYPE	3875:2	3875:2	5	int
TYPE_NAME	3875:2	3875:2	6	int
LEAF_NODE	3875:2	3875:2	7	int
NAME	3875:9	3875:9	5	ready_bits
LEAF_NODE	3875:9	3875:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	3875:9	3875:9	5	ready_bits = 0
ASSIGN	3875:9	3875:22	6	ready_bits = 0
LVAL	3875:9	3875:9	7	ready_bits
NAME	3875:9	3875:9	8	ready_bits
LEAF_NODE	3875:9	3875:9	9	ready_bits
ASSIGN_OP	3875:20	3875:20	7	=
LEAF_NODE	3875:20	3875:20	8	=
RVAL	3875:22	3875:22	7	0
FIELD	3875:22	3875:22	8	0
LEAF_NODE	3875:22	3875:22	9	0
LEAF_NODE	3875:51	3875:51	4	;
SIMPLE_DECL	3876:2	3876:33	3	uint32 src_rowsize , uint32 dst_rowsize ;
INIT_DECL_LIST	3876:2	3876:2	4	uint32 src_rowsize , uint32 dst_rowsize
VAR_DECL	3876:2	3876:9	5	uint32 src_rowsize
TYPE	3876:2	3876:2	6	uint32
TYPE_NAME	3876:2	3876:2	7	uint32
LEAF_NODE	3876:2	3876:2	8	uint32
NAME	3876:9	3876:9	6	src_rowsize
LEAF_NODE	3876:9	3876:9	7	src_rowsize
LEAF_NODE	3876:20	3876:20	5	,
VAR_DECL	3876:2	3876:22	5	uint32 dst_rowsize
TYPE	3876:2	3876:2	6	uint32
TYPE_NAME	3876:2	3876:2	7	uint32
LEAF_NODE	3876:2	3876:2	8	uint32
NAME	3876:22	3876:22	6	dst_rowsize
LEAF_NODE	3876:22	3876:22	7	dst_rowsize
LEAF_NODE	3876:33	3876:33	4	;
SIMPLE_DECL	3877:2	3877:31	3	uint32 bit_offset , uint32 src_offset ;
INIT_DECL_LIST	3877:2	3877:2	4	uint32 bit_offset , uint32 src_offset
VAR_DECL	3877:2	3877:9	5	uint32 bit_offset
TYPE	3877:2	3877:2	6	uint32
TYPE_NAME	3877:2	3877:2	7	uint32
LEAF_NODE	3877:2	3877:2	8	uint32
NAME	3877:9	3877:9	6	bit_offset
LEAF_NODE	3877:9	3877:9	7	bit_offset
LEAF_NODE	3877:19	3877:19	5	,
VAR_DECL	3877:2	3877:21	5	uint32 src_offset
TYPE	3877:2	3877:2	6	uint32
TYPE_NAME	3877:2	3877:2	7	uint32
LEAF_NODE	3877:2	3877:2	8	uint32
NAME	3877:21	3877:21	6	src_offset
LEAF_NODE	3877:21	3877:21	7	src_offset
LEAF_NODE	3877:31	3877:31	4	;
SIMPLE_DECL	3878:2	3878:44	3	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	3878:2	3878:2	4	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3878:2	3878:9	5	uint32 row
TYPE	3878:2	3878:2	6	uint32
TYPE_NAME	3878:2	3878:2	7	uint32
LEAF_NODE	3878:2	3878:2	8	uint32
NAME	3878:9	3878:9	6	row
LEAF_NODE	3878:9	3878:9	7	row
LEAF_NODE	3878:12	3878:12	5	,
INIT_DECL_LIST	3878:2	3878:2	5	uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3878:2	3878:14	6	uint32 col
TYPE	3878:2	3878:2	7	uint32
TYPE_NAME	3878:2	3878:2	8	uint32
LEAF_NODE	3878:2	3878:2	9	uint32
NAME	3878:14	3878:14	7	col
LEAF_NODE	3878:14	3878:14	8	col
LEAF_NODE	3878:17	3878:17	6	,
INIT_DECL_LIST	3878:2	3878:2	6	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3878:2	3878:19	7	uint32 src_byte ; src_byte = 0
TYPE	3878:2	3878:2	8	uint32
TYPE_NAME	3878:2	3878:2	9	uint32
LEAF_NODE	3878:2	3878:2	10	uint32
NAME	3878:19	3878:19	8	src_byte
LEAF_NODE	3878:19	3878:19	9	src_byte
LEAF_NODE	0:0	0:0	8	;
INIT	3878:19	3878:19	8	src_byte = 0
ASSIGN	3878:19	3878:30	9	src_byte = 0
LVAL	3878:19	3878:19	10	src_byte
NAME	3878:19	3878:19	11	src_byte
LEAF_NODE	3878:19	3878:19	12	src_byte
ASSIGN_OP	3878:28	3878:28	10	=
LEAF_NODE	3878:28	3878:28	11	=
RVAL	3878:30	3878:30	10	0
FIELD	3878:30	3878:30	11	0
LEAF_NODE	3878:30	3878:30	12	0
LEAF_NODE	3878:31	3878:31	7	,
VAR_DECL	3878:2	3878:33	7	uint32 src_bit ; src_bit = 0
TYPE	3878:2	3878:2	8	uint32
TYPE_NAME	3878:2	3878:2	9	uint32
LEAF_NODE	3878:2	3878:2	10	uint32
NAME	3878:33	3878:33	8	src_bit
LEAF_NODE	3878:33	3878:33	9	src_bit
LEAF_NODE	0:0	0:0	8	;
INIT	3878:33	3878:33	8	src_bit = 0
ASSIGN	3878:33	3878:43	9	src_bit = 0
LVAL	3878:33	3878:33	10	src_bit
NAME	3878:33	3878:33	11	src_bit
LEAF_NODE	3878:33	3878:33	12	src_bit
ASSIGN_OP	3878:41	3878:41	10	=
LEAF_NODE	3878:41	3878:41	11	=
RVAL	3878:43	3878:43	10	0
FIELD	3878:43	3878:43	11	0
LEAF_NODE	3878:43	3878:43	12	0
LEAF_NODE	3878:44	3878:44	4	;
SIMPLE_DECL	3879:2	3879:36	3	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3879:2	3879:2	4	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0
VAR_DECL	3879:2	3879:9	5	uint16 maskbits ; maskbits = 0
TYPE	3879:2	3879:2	6	uint16
TYPE_NAME	3879:2	3879:2	7	uint16
LEAF_NODE	3879:2	3879:2	8	uint16
NAME	3879:9	3879:9	6	maskbits
LEAF_NODE	3879:9	3879:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3879:9	3879:9	6	maskbits = 0
ASSIGN	3879:9	3879:20	7	maskbits = 0
LVAL	3879:9	3879:9	8	maskbits
NAME	3879:9	3879:9	9	maskbits
LEAF_NODE	3879:9	3879:9	10	maskbits
ASSIGN_OP	3879:18	3879:18	8	=
LEAF_NODE	3879:18	3879:18	9	=
RVAL	3879:20	3879:20	8	0
FIELD	3879:20	3879:20	9	0
LEAF_NODE	3879:20	3879:20	10	0
LEAF_NODE	3879:21	3879:21	5	,
VAR_DECL	3879:2	3879:23	5	uint16 matchbits ; matchbits = 0
TYPE	3879:2	3879:2	6	uint16
TYPE_NAME	3879:2	3879:2	7	uint16
LEAF_NODE	3879:2	3879:2	8	uint16
NAME	3879:23	3879:23	6	matchbits
LEAF_NODE	3879:23	3879:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3879:23	3879:23	6	matchbits = 0
ASSIGN	3879:23	3879:35	7	matchbits = 0
LVAL	3879:23	3879:23	8	matchbits
NAME	3879:23	3879:23	9	matchbits
LEAF_NODE	3879:23	3879:23	10	matchbits
ASSIGN_OP	3879:33	3879:33	8	=
LEAF_NODE	3879:33	3879:33	9	=
RVAL	3879:35	3879:35	8	0
FIELD	3879:35	3879:35	9	0
LEAF_NODE	3879:35	3879:35	10	0
LEAF_NODE	3879:36	3879:36	4	;
SIMPLE_DECL	3880:2	3880:29	3	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	3880:2	3880:2	4	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0
VAR_DECL	3880:2	3880:9	5	uint16 buff1 ; buff1 = 0
TYPE	3880:2	3880:2	6	uint16
TYPE_NAME	3880:2	3880:2	7	uint16
LEAF_NODE	3880:2	3880:2	8	uint16
NAME	3880:9	3880:9	6	buff1
LEAF_NODE	3880:9	3880:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3880:9	3880:9	6	buff1 = 0
ASSIGN	3880:9	3880:17	7	buff1 = 0
LVAL	3880:9	3880:9	8	buff1
NAME	3880:9	3880:9	9	buff1
LEAF_NODE	3880:9	3880:9	10	buff1
ASSIGN_OP	3880:15	3880:15	8	=
LEAF_NODE	3880:15	3880:15	9	=
RVAL	3880:17	3880:17	8	0
FIELD	3880:17	3880:17	9	0
LEAF_NODE	3880:17	3880:17	10	0
LEAF_NODE	3880:18	3880:18	5	,
VAR_DECL	3880:2	3880:20	5	uint16 buff2 ; buff2 = 0
TYPE	3880:2	3880:2	6	uint16
TYPE_NAME	3880:2	3880:2	7	uint16
LEAF_NODE	3880:2	3880:2	8	uint16
NAME	3880:20	3880:20	6	buff2
LEAF_NODE	3880:20	3880:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	3880:20	3880:20	6	buff2 = 0
ASSIGN	3880:20	3880:28	7	buff2 = 0
LVAL	3880:20	3880:20	8	buff2
NAME	3880:20	3880:20	9	buff2
LEAF_NODE	3880:20	3880:20	10	buff2
ASSIGN_OP	3880:26	3880:26	8	=
LEAF_NODE	3880:26	3880:26	9	=
RVAL	3880:28	3880:28	8	0
FIELD	3880:28	3880:28	9	0
LEAF_NODE	3880:28	3880:28	10	0
LEAF_NODE	3880:29	3880:29	4	;
SIMPLE_DECL	3881:2	3881:21	3	uint8 bytebuff ; bytebuff = 0 ;
VAR_DECL	3881:2	3881:9	4	uint8 bytebuff ; bytebuff = 0
TYPE	3881:2	3881:2	5	uint8
TYPE_NAME	3881:2	3881:2	6	uint8
LEAF_NODE	3881:2	3881:2	7	uint8
NAME	3881:9	3881:9	5	bytebuff
LEAF_NODE	3881:9	3881:9	6	bytebuff
LEAF_NODE	0:0	0:0	5	;
INIT	3881:9	3881:9	5	bytebuff = 0
ASSIGN	3881:9	3881:20	6	bytebuff = 0
LVAL	3881:9	3881:9	7	bytebuff
NAME	3881:9	3881:9	8	bytebuff
LEAF_NODE	3881:9	3881:9	9	bytebuff
ASSIGN_OP	3881:18	3881:18	7	=
LEAF_NODE	3881:18	3881:18	8	=
RVAL	3881:20	3881:20	7	0
FIELD	3881:20	3881:20	8	0
LEAF_NODE	3881:20	3881:20	9	0
LEAF_NODE	3881:21	3881:21	4	;
SIMPLE_DECL	3882:2	3882:13	3	tsample_t s ;
VAR_DECL	3882:2	3882:12	4	tsample_t s
TYPE	3882:2	3882:2	5	tsample_t
TYPE_NAME	3882:2	3882:2	6	tsample_t
LEAF_NODE	3882:2	3882:2	7	tsample_t
NAME	3882:12	3882:12	5	s
LEAF_NODE	3882:12	3882:12	6	s
LEAF_NODE	3882:13	3882:13	4	;
SIMPLE_DECL	3883:2	3883:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	3883:2	3883:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	3883:2	3883:16	5	unsigned char *
TYPE_NAME	3883:2	3883:11	6	unsigned char
LEAF_NODE	3883:2	3883:2	7	unsigned
LEAF_NODE	3883:11	3883:11	7	char
POINTER	3883:16	3883:16	6	*
LEAF_NODE	3883:16	3883:16	7	*
NAME	3883:17	3883:17	5	src
LEAF_NODE	3883:17	3883:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3883:17	3883:17	5	src = in [ 0 ]
ASSIGN	3883:17	3883:23	6	src = in [ 0 ]
LVAL	3883:17	3883:17	7	src
NAME	3883:17	3883:17	8	src
LEAF_NODE	3883:17	3883:17	9	src
ASSIGN_OP	3883:21	3883:21	7	=
LEAF_NODE	3883:21	3883:21	8	=
RVAL	3883:23	3883:23	7	in [ 0 ]
FIELD	3883:23	3883:27	8	in [ 0 ]
LEAF_NODE	3883:23	3883:23	9	in
LEAF_NODE	3883:25	3883:25	9	[
EXPR	3883:26	3883:26	9	0
FIELD	3883:26	3883:26	10	0
LEAF_NODE	3883:26	3883:26	11	0
LEAF_NODE	3883:27	3883:27	9	]
LEAF_NODE	3883:28	3883:28	4	;
SIMPLE_DECL	3884:2	3884:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	3884:2	3884:17	4	unsigned char * dst ; dst = out
TYPE	3884:2	3884:16	5	unsigned char *
TYPE_NAME	3884:2	3884:11	6	unsigned char
LEAF_NODE	3884:2	3884:2	7	unsigned
LEAF_NODE	3884:11	3884:11	7	char
POINTER	3884:16	3884:16	6	*
LEAF_NODE	3884:16	3884:16	7	*
NAME	3884:17	3884:17	5	dst
LEAF_NODE	3884:17	3884:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3884:17	3884:17	5	dst = out
ASSIGN	3884:17	3884:23	6	dst = out
LVAL	3884:17	3884:17	7	dst
NAME	3884:17	3884:17	8	dst
LEAF_NODE	3884:17	3884:17	9	dst
ASSIGN_OP	3884:21	3884:21	7	=
LEAF_NODE	3884:21	3884:21	8	=
RVAL	3884:23	3884:23	7	out
FIELD	3884:23	3884:23	8	out
LEAF_NODE	3884:23	3884:23	9	out
LEAF_NODE	3884:26	3884:26	4	;
SIMPLE_DECL	3885:2	3885:26	3	char [ 8 ] action ;
VAR_DECL	3885:2	3885:17	4	char [ 8 ] action
TYPE	3885:2	3885:23	5	char [ 8 ]
TYPE_NAME	3885:2	3885:2	6	char
LEAF_NODE	3885:2	3885:2	7	char
TYPE_SUFFIX	3885:23	3885:25	6	[ 8 ]
LEAF_NODE	3885:23	3885:23	7	[
FIELD	3885:24	3885:24	7	8
LEAF_NODE	3885:24	3885:24	8	8
LEAF_NODE	3885:25	3885:25	7	]
NAME	3885:17	3885:17	5	action
LEAF_NODE	3885:17	3885:17	6	action
LEAF_NODE	3885:26	3885:26	4	;
SELECTION	3887:2	3888:4	3	
KEYWORD	3887:2	3887:2	4	if
LEAF_NODE	3887:2	3887:2	5	if
LEAF_NODE	3887:5	3887:5	4	(
CONDITION	3887:6	3887:6	4	( src == NULL ) || ( dst == NULL )
EXPR	3887:6	3887:6	5	( src == NULL ) || ( dst == NULL )
OR	3887:6	3887:23	6	( src == NULL ) || ( dst == NULL )
EXPR	3887:6	3887:18	7	( src == NULL )
LEAF_NODE	3887:6	3887:6	8	(
FIELD	3887:7	3887:7	8	src
LEAF_NODE	3887:7	3887:7	9	src
EQ_OPERATOR	3887:11	3887:11	8	==
LEAF_NODE	3887:11	3887:11	9	==
FIELD	3887:14	3887:14	8	NULL
LEAF_NODE	3887:14	3887:14	9	NULL
LEAF_NODE	3887:18	3887:18	8	)
LEAF_NODE	3887:20	3887:20	7	||
EXPR	3887:23	3887:35	7	( dst == NULL )
LEAF_NODE	3887:23	3887:23	8	(
FIELD	3887:24	3887:24	8	dst
LEAF_NODE	3887:24	3887:24	9	dst
EQ_OPERATOR	3887:28	3887:28	8	==
LEAF_NODE	3887:28	3887:28	9	==
FIELD	3887:31	3887:31	8	NULL
LEAF_NODE	3887:31	3887:31	9	NULL
LEAF_NODE	3887:35	3887:35	8	)
LEAF_NODE	3887:36	3887:36	4	)
STATEMENTS	3888:4	3891:4	4	
LEAF_NODE	3888:4	3888:4	5	{
STATEMENTS	3889:4	3890:4	5	
EXPR_STATEMENT	3889:4	3889:78	6	TIFFError ( "combineSeparateSamples16bits" , "Invalid input or output buffer" ) ;
EXPR	3889:4	3889:4	7	TIFFError ( "combineSeparateSamples16bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3889:4	3889:77	8	TIFFError ( "combineSeparateSamples16bits" , "Invalid input or output buffer" )
CALLEE	3889:4	3889:4	9	TIFFError
LEAF_NODE	3889:4	3889:4	10	TIFFError
LEAF_NODE	3889:13	3889:13	9	(
ARGUMENT	3889:14	3889:14	9	"combineSeparateSamples16bits"
FIELD	3889:14	3889:14	10	"combineSeparateSamples16bits"
LEAF_NODE	3889:14	3889:14	11	"combineSeparateSamples16bits"
LEAF_NODE	3889:44	3889:44	9	,
ARGUMENT	3889:45	3889:45	9	"Invalid input or output buffer"
FIELD	3889:45	3889:45	10	"Invalid input or output buffer"
LEAF_NODE	3889:45	3889:45	11	"Invalid input or output buffer"
LEAF_NODE	3889:77	3889:77	9	)
LEAF_NODE	3889:78	3889:78	7	;
JUMP_STATEMENT	3890:4	3890:14	6	return ( 1 ) ;
KEYWORD	3890:4	3890:4	7	return
LEAF_NODE	3890:4	3890:4	8	return
DESTINATION	3890:11	3890:11	7	( 1 )
EXPR	3890:11	3890:13	8	( 1 )
LEAF_NODE	3890:11	3890:11	9	(
FIELD	3890:12	3890:12	9	1
LEAF_NODE	3890:12	3890:12	10	1
LEAF_NODE	3890:13	3890:13	9	)
LEAF_NODE	3890:14	3890:14	7	;
LEAF_NODE	3891:4	3891:4	5	}
EXPR_STATEMENT	3894:2	3894:38	3	src_rowsize = ( ( bps * cols ) + 7 ) / 8 ;
EXPR	3894:2	3894:2	4	src_rowsize = ( ( bps * cols ) + 7 ) / 8
ASSIGN	3894:2	3894:16	5	src_rowsize = ( ( bps * cols ) + 7 ) / 8
LVAL	3894:2	3894:2	6	src_rowsize
FIELD	3894:2	3894:2	7	src_rowsize
LEAF_NODE	3894:2	3894:2	8	src_rowsize
ASSIGN_OP	3894:14	3894:14	6	=
LEAF_NODE	3894:14	3894:14	7	=
RVAL	3894:16	3894:37	6	( ( bps * cols ) + 7 ) / 8
LEAF_NODE	3894:16	3894:16	7	(
LEAF_NODE	3894:17	3894:17	7	(
FIELD	3894:18	3894:18	7	bps
LEAF_NODE	3894:18	3894:18	8	bps
LEAF_NODE	3894:22	3894:22	7	*
FIELD	3894:24	3894:24	7	cols
LEAF_NODE	3894:24	3894:24	8	cols
LEAF_NODE	3894:28	3894:28	7	)
LEAF_NODE	3894:30	3894:30	7	+
FIELD	3894:32	3894:32	7	7
LEAF_NODE	3894:32	3894:32	8	7
LEAF_NODE	3894:33	3894:33	7	)
LEAF_NODE	3894:35	3894:35	7	/
FIELD	3894:37	3894:37	7	8
LEAF_NODE	3894:37	3894:37	8	8
LEAF_NODE	3894:38	3894:38	4	;
LEAF_NODE	3895:2	3895:2	3	dst_rowsize
LEAF_NODE	3895:14	3895:14	3	=
LEAF_NODE	3895:16	3895:16	3	(
LEAF_NODE	3895:17	3895:17	3	(
LEAF_NODE	3895:18	3895:18	3	bps
LEAF_NODE	3895:22	3895:22	3	*
LEAF_NODE	3895:24	3895:24	3	cols
LEAF_NODE	3895:29	3895:29	3	*
LEAF_NODE	3895:31	3895:31	3	spp
LEAF_NODE	3895:34	3895:34	3	)
LEAF_NODE	3895:36	3895:36	3	+
LEAF_NODE	3895:38	3895:38	3	7
LEAF_NODE	3895:39	3895:39	3	)
LEAF_NODE	3895:41	3895:41	3	/
EXPR_STATEMENT	3895:43	3895:44	3	8 ;
EXPR	3895:43	3895:43	4	8
FIELD	3895:43	3895:43	5	8
LEAF_NODE	3895:43	3895:43	6	8
LEAF_NODE	3895:44	3895:44	4	;
EXPR_STATEMENT	3896:2	3896:37	3	maskbits = ( uint16 ) - 1 >> ( 16 - bps ) ;
EXPR	3896:2	3896:2	4	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
ASSIGN	3896:2	3896:13	5	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
LVAL	3896:2	3896:2	6	maskbits
FIELD	3896:2	3896:2	7	maskbits
LEAF_NODE	3896:2	3896:2	8	maskbits
ASSIGN_OP	3896:11	3896:11	6	=
LEAF_NODE	3896:11	3896:11	7	=
RVAL	3896:13	3896:36	6	( uint16 ) - 1 >> ( 16 - bps )
LEAF_NODE	3896:13	3896:13	7	(
TYPE_NAME	3896:14	3896:14	7	uint16
LEAF_NODE	3896:14	3896:14	8	uint16
LEAF_NODE	3896:20	3896:20	7	)
UNARY_EXPR	3896:21	3896:22	7	- 1
UNARY_OPERATOR	3896:21	3896:21	8	-
LEAF_NODE	3896:21	3896:21	9	-
FIELD	3896:22	3896:22	8	1
LEAF_NODE	3896:22	3896:22	9	1
LEAF_NODE	3896:24	3896:24	7	>>
LEAF_NODE	3896:27	3896:27	7	(
FIELD	3896:28	3896:28	7	16
LEAF_NODE	3896:28	3896:28	8	16
LEAF_NODE	3896:31	3896:31	7	-
FIELD	3896:33	3896:33	7	bps
LEAF_NODE	3896:33	3896:33	8	bps
LEAF_NODE	3896:36	3896:36	7	)
LEAF_NODE	3896:37	3896:37	4	;
ITERATION	3898:2	3899:4	3	
KEYWORD	3898:2	3898:2	4	for
LEAF_NODE	3898:2	3898:2	5	for
LEAF_NODE	3898:6	3898:6	4	(
FOR_INIT	3898:7	3898:14	4	row = 0 ;
EXPR	3898:7	3898:7	5	row = 0
ASSIGN	3898:7	3898:13	6	row = 0
LVAL	3898:7	3898:7	7	row
FIELD	3898:7	3898:7	8	row
LEAF_NODE	3898:7	3898:7	9	row
ASSIGN_OP	3898:11	3898:11	7	=
LEAF_NODE	3898:11	3898:11	8	=
RVAL	3898:13	3898:13	7	0
FIELD	3898:13	3898:13	8	0
LEAF_NODE	3898:13	3898:13	9	0
LEAF_NODE	3898:14	3898:14	5	;
CONDITION	3898:16	3898:16	4	row < rows
EXPR	3898:16	3898:22	5	row < rows
FIELD	3898:16	3898:16	6	row
LEAF_NODE	3898:16	3898:16	7	row
REL_OPERATOR	3898:20	3898:20	6	<
LEAF_NODE	3898:20	3898:20	7	<
FIELD	3898:22	3898:22	6	rows
LEAF_NODE	3898:22	3898:22	7	rows
LEAF_NODE	3898:26	3898:26	4	;
FOR_EXPR	3898:28	3898:28	4	row ++
EXPR	3898:28	3898:28	5	row ++
FIELD	3898:28	3898:31	6	row ++
LEAF_NODE	3898:28	3898:28	7	row
LEAF_NODE	3898:31	3898:31	7	++
LEAF_NODE	3898:33	3898:33	4	)
STATEMENTS	3899:4	3975:4	4	
LEAF_NODE	3899:4	3899:4	5	{
STATEMENTS	3900:4	3970:4	5	
EXPR_STATEMENT	3900:4	3900:18	6	ready_bits = 0 ;
EXPR	3900:4	3900:4	7	ready_bits = 0
ASSIGN	3900:4	3900:17	8	ready_bits = 0
LVAL	3900:4	3900:4	9	ready_bits
FIELD	3900:4	3900:4	10	ready_bits
LEAF_NODE	3900:4	3900:4	11	ready_bits
ASSIGN_OP	3900:15	3900:15	9	=
LEAF_NODE	3900:15	3900:15	10	=
RVAL	3900:17	3900:17	9	0
FIELD	3900:17	3900:17	10	0
LEAF_NODE	3900:17	3900:17	11	0
LEAF_NODE	3900:18	3900:18	7	;
EXPR_STATEMENT	3901:4	3901:21	6	buff1 = buff2 = 0 ;
EXPR	3901:4	3901:4	7	buff1 = buff2 = 0
ASSIGN	3901:4	3901:12	8	buff1 = buff2 = 0
LVAL	3901:4	3901:4	9	buff1
FIELD	3901:4	3901:4	10	buff1
LEAF_NODE	3901:4	3901:4	11	buff1
ASSIGN_OP	3901:10	3901:10	9	=
LEAF_NODE	3901:10	3901:10	10	=
RVAL	3901:12	3901:12	9	buff2 = 0
ASSIGN	3901:12	3901:20	10	buff2 = 0
LVAL	3901:12	3901:12	11	buff2
FIELD	3901:12	3901:12	12	buff2
LEAF_NODE	3901:12	3901:12	13	buff2
ASSIGN_OP	3901:18	3901:18	11	=
LEAF_NODE	3901:18	3901:18	12	=
RVAL	3901:20	3901:20	11	0
FIELD	3901:20	3901:20	12	0
LEAF_NODE	3901:20	3901:20	13	0
LEAF_NODE	3901:21	3901:21	7	;
EXPR_STATEMENT	3902:4	3902:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	3902:4	3902:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	3902:4	3902:10	8	dst = out + ( row * dst_rowsize )
LVAL	3902:4	3902:4	9	dst
FIELD	3902:4	3902:4	10	dst
LEAF_NODE	3902:4	3902:4	11	dst
ASSIGN_OP	3902:8	3902:8	9	=
LEAF_NODE	3902:8	3902:8	10	=
RVAL	3902:10	3902:34	9	out + ( row * dst_rowsize )
FIELD	3902:10	3902:10	10	out
LEAF_NODE	3902:10	3902:10	11	out
LEAF_NODE	3902:14	3902:14	10	+
LEAF_NODE	3902:16	3902:16	10	(
FIELD	3902:17	3902:17	10	row
LEAF_NODE	3902:17	3902:17	11	row
LEAF_NODE	3902:21	3902:21	10	*
FIELD	3902:23	3902:23	10	dst_rowsize
LEAF_NODE	3902:23	3902:23	11	dst_rowsize
LEAF_NODE	3902:34	3902:34	10	)
LEAF_NODE	3902:35	3902:35	7	;
EXPR_STATEMENT	3903:4	3903:34	6	src_offset = row * src_rowsize ;
EXPR	3903:4	3903:4	7	src_offset = row * src_rowsize
ASSIGN	3903:4	3903:17	8	src_offset = row * src_rowsize
LVAL	3903:4	3903:4	9	src_offset
FIELD	3903:4	3903:4	10	src_offset
LEAF_NODE	3903:4	3903:4	11	src_offset
ASSIGN_OP	3903:15	3903:15	9	=
LEAF_NODE	3903:15	3903:15	10	=
RVAL	3903:17	3903:23	9	row * src_rowsize
FIELD	3903:17	3903:17	10	row
LEAF_NODE	3903:17	3903:17	11	row
LEAF_NODE	3903:21	3903:21	10	*
FIELD	3903:23	3903:23	10	src_rowsize
LEAF_NODE	3903:23	3903:23	11	src_rowsize
LEAF_NODE	3903:34	3903:34	7	;
ITERATION	3904:4	3905:6	6	
KEYWORD	3904:4	3904:4	7	for
LEAF_NODE	3904:4	3904:4	8	for
LEAF_NODE	3904:8	3904:8	7	(
FOR_INIT	3904:9	3904:16	7	col = 0 ;
EXPR	3904:9	3904:9	8	col = 0
ASSIGN	3904:9	3904:15	9	col = 0
LVAL	3904:9	3904:9	10	col
FIELD	3904:9	3904:9	11	col
LEAF_NODE	3904:9	3904:9	12	col
ASSIGN_OP	3904:13	3904:13	10	=
LEAF_NODE	3904:13	3904:13	11	=
RVAL	3904:15	3904:15	10	0
FIELD	3904:15	3904:15	11	0
LEAF_NODE	3904:15	3904:15	12	0
LEAF_NODE	3904:16	3904:16	8	;
CONDITION	3904:18	3904:18	7	col < cols
EXPR	3904:18	3904:24	8	col < cols
FIELD	3904:18	3904:18	9	col
LEAF_NODE	3904:18	3904:18	10	col
REL_OPERATOR	3904:22	3904:22	9	<
LEAF_NODE	3904:22	3904:22	10	<
FIELD	3904:24	3904:24	9	cols
LEAF_NODE	3904:24	3904:24	10	cols
LEAF_NODE	3904:28	3904:28	7	;
FOR_EXPR	3904:30	3904:30	7	col ++
EXPR	3904:30	3904:30	8	col ++
FIELD	3904:30	3904:33	9	col ++
LEAF_NODE	3904:30	3904:30	10	col
LEAF_NODE	3904:33	3904:33	10	++
LEAF_NODE	3904:35	3904:35	7	)
STATEMENTS	3905:6	3954:6	7	
LEAF_NODE	3905:6	3905:6	8	{
STATEMENTS	3907:6	3912:6	8	
EXPR_STATEMENT	3907:6	3907:28	9	bit_offset = col * bps ;
EXPR	3907:6	3907:6	10	bit_offset = col * bps
ASSIGN	3907:6	3907:19	11	bit_offset = col * bps
LVAL	3907:6	3907:6	12	bit_offset
FIELD	3907:6	3907:6	13	bit_offset
LEAF_NODE	3907:6	3907:6	14	bit_offset
ASSIGN_OP	3907:17	3907:17	12	=
LEAF_NODE	3907:17	3907:17	13	=
RVAL	3907:19	3907:25	12	col * bps
FIELD	3907:19	3907:19	13	col
LEAF_NODE	3907:19	3907:19	14	col
LEAF_NODE	3907:23	3907:23	13	*
FIELD	3907:25	3907:25	13	bps
LEAF_NODE	3907:25	3907:25	14	bps
LEAF_NODE	3907:28	3907:28	10	;
EXPR_STATEMENT	3908:6	3908:31	9	src_byte = bit_offset / 8 ;
EXPR	3908:6	3908:6	10	src_byte = bit_offset / 8
ASSIGN	3908:6	3908:17	11	src_byte = bit_offset / 8
LVAL	3908:6	3908:6	12	src_byte
FIELD	3908:6	3908:6	13	src_byte
LEAF_NODE	3908:6	3908:6	14	src_byte
ASSIGN_OP	3908:15	3908:15	12	=
LEAF_NODE	3908:15	3908:15	13	=
RVAL	3908:17	3908:30	12	bit_offset / 8
FIELD	3908:17	3908:17	13	bit_offset
LEAF_NODE	3908:17	3908:17	14	bit_offset
LEAF_NODE	3908:28	3908:28	13	/
FIELD	3908:30	3908:30	13	8
LEAF_NODE	3908:30	3908:30	14	8
LEAF_NODE	3908:31	3908:31	10	;
EXPR_STATEMENT	3909:6	3909:31	9	src_bit = bit_offset % 8 ;
EXPR	3909:6	3909:6	10	src_bit = bit_offset % 8
ASSIGN	3909:6	3909:17	11	src_bit = bit_offset % 8
LVAL	3909:6	3909:6	12	src_bit
FIELD	3909:6	3909:6	13	src_bit
LEAF_NODE	3909:6	3909:6	14	src_bit
ASSIGN_OP	3909:15	3909:15	12	=
LEAF_NODE	3909:15	3909:15	13	=
RVAL	3909:17	3909:30	12	bit_offset % 8
FIELD	3909:17	3909:17	13	bit_offset
LEAF_NODE	3909:17	3909:17	14	bit_offset
LEAF_NODE	3909:28	3909:28	13	%
FIELD	3909:30	3909:30	13	8
LEAF_NODE	3909:30	3909:30	14	8
LEAF_NODE	3909:31	3909:31	10	;
EXPR_STATEMENT	3911:6	3911:50	9	matchbits = maskbits << ( 16 - src_bit - bps ) ;
EXPR	3911:6	3911:6	10	matchbits = maskbits << ( 16 - src_bit - bps )
ASSIGN	3911:6	3911:18	11	matchbits = maskbits << ( 16 - src_bit - bps )
LVAL	3911:6	3911:6	12	matchbits
FIELD	3911:6	3911:6	13	matchbits
LEAF_NODE	3911:6	3911:6	14	matchbits
ASSIGN_OP	3911:16	3911:16	12	=
LEAF_NODE	3911:16	3911:16	13	=
RVAL	3911:18	3911:49	12	maskbits << ( 16 - src_bit - bps )
FIELD	3911:18	3911:18	13	maskbits
LEAF_NODE	3911:18	3911:18	14	maskbits
LEAF_NODE	3911:27	3911:27	13	<<
LEAF_NODE	3911:30	3911:30	13	(
FIELD	3911:31	3911:31	13	16
LEAF_NODE	3911:31	3911:31	14	16
LEAF_NODE	3911:34	3911:34	13	-
FIELD	3911:36	3911:36	13	src_bit
LEAF_NODE	3911:36	3911:36	14	src_bit
LEAF_NODE	3911:44	3911:44	13	-
FIELD	3911:46	3911:46	13	bps
LEAF_NODE	3911:46	3911:46	14	bps
LEAF_NODE	3911:49	3911:49	13	)
LEAF_NODE	3911:50	3911:50	10	;
ITERATION	3912:6	3913:8	9	
KEYWORD	3912:6	3912:6	10	for
LEAF_NODE	3912:6	3912:6	11	for
LEAF_NODE	3912:10	3912:10	10	(
FOR_INIT	3912:11	3912:16	10	s = 0 ;
EXPR	3912:11	3912:11	11	s = 0
ASSIGN	3912:11	3912:15	12	s = 0
LVAL	3912:11	3912:11	13	s
FIELD	3912:11	3912:11	14	s
LEAF_NODE	3912:11	3912:11	15	s
ASSIGN_OP	3912:13	3912:13	13	=
LEAF_NODE	3912:13	3912:13	14	=
RVAL	3912:15	3912:15	13	0
FIELD	3912:15	3912:15	14	0
LEAF_NODE	3912:15	3912:15	15	0
LEAF_NODE	3912:16	3912:16	11	;
CONDITION	3912:18	3912:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	3912:18	3912:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	3912:18	3912:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	3912:18	3912:26	13	( s < spp )
LEAF_NODE	3912:18	3912:18	14	(
FIELD	3912:19	3912:19	14	s
LEAF_NODE	3912:19	3912:19	15	s
REL_OPERATOR	3912:21	3912:21	14	<
LEAF_NODE	3912:21	3912:21	15	<
FIELD	3912:23	3912:23	14	spp
LEAF_NODE	3912:23	3912:23	15	spp
LEAF_NODE	3912:26	3912:26	14	)
LEAF_NODE	3912:28	3912:28	13	&&
EXPR	3912:31	3912:47	13	( s < MAX_SAMPLES )
LEAF_NODE	3912:31	3912:31	14	(
FIELD	3912:32	3912:32	14	s
LEAF_NODE	3912:32	3912:32	15	s
REL_OPERATOR	3912:34	3912:34	14	<
LEAF_NODE	3912:34	3912:34	15	<
FIELD	3912:36	3912:36	14	MAX_SAMPLES
LEAF_NODE	3912:36	3912:36	15	MAX_SAMPLES
LEAF_NODE	3912:47	3912:47	14	)
LEAF_NODE	3912:48	3912:48	10	;
FOR_EXPR	3912:50	3912:50	10	s ++
EXPR	3912:50	3912:50	11	s ++
FIELD	3912:50	3912:51	12	s ++
LEAF_NODE	3912:50	3912:50	13	s
LEAF_NODE	3912:51	3912:51	13	++
LEAF_NODE	3912:53	3912:53	10	)
STATEMENTS	3913:8	3953:1	10	
LEAF_NODE	3913:8	3913:8	11	{
STATEMENTS	3914:1	3940:1	11	
EXPR_STATEMENT	3914:1	3914:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	3914:1	3914:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	3914:1	3914:7	14	src = in [ s ] + src_offset + src_byte
LVAL	3914:1	3914:1	15	src
FIELD	3914:1	3914:1	16	src
LEAF_NODE	3914:1	3914:1	17	src
ASSIGN_OP	3914:5	3914:5	15	=
LEAF_NODE	3914:5	3914:5	16	=
RVAL	3914:7	3914:28	15	in [ s ] + src_offset + src_byte
FIELD	3914:7	3914:11	16	in [ s ]
LEAF_NODE	3914:7	3914:7	17	in
LEAF_NODE	3914:9	3914:9	17	[
EXPR	3914:10	3914:10	17	s
FIELD	3914:10	3914:10	18	s
LEAF_NODE	3914:10	3914:10	19	s
LEAF_NODE	3914:11	3914:11	17	]
LEAF_NODE	3914:13	3914:13	16	+
FIELD	3914:15	3914:15	16	src_offset
LEAF_NODE	3914:15	3914:15	17	src_offset
LEAF_NODE	3914:26	3914:26	16	+
FIELD	3914:28	3914:28	16	src_byte
LEAF_NODE	3914:28	3914:28	17	src_byte
LEAF_NODE	3914:36	3914:36	13	;
SELECTION	3915:8	3916:10	12	
KEYWORD	3915:8	3915:8	13	if
LEAF_NODE	3915:8	3915:8	14	if
LEAF_NODE	3915:11	3915:11	13	(
CONDITION	3915:12	3915:12	13	little_endian
EXPR	3915:12	3915:12	14	little_endian
FIELD	3915:12	3915:12	15	little_endian
LEAF_NODE	3915:12	3915:12	16	little_endian
LEAF_NODE	3915:25	3915:25	13	)
STATEMENTS	3916:10	3916:10	13	
EXPR_STATEMENT	3916:10	3916:40	14	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ] ;
EXPR	3916:10	3916:10	15	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
ASSIGN	3916:10	3916:18	16	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
LVAL	3916:10	3916:10	17	buff1
FIELD	3916:10	3916:10	18	buff1
LEAF_NODE	3916:10	3916:10	19	buff1
ASSIGN_OP	3916:16	3916:16	17	=
LEAF_NODE	3916:16	3916:16	18	=
RVAL	3916:18	3916:18	17	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR	3916:18	3916:34	18	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR_ELEM	3916:18	3916:30	19	( src [ 0 ] << 8 )
LEAF_NODE	3916:18	3916:18	20	(
FIELD	3916:19	3916:24	20	src [ 0 ]
LEAF_NODE	3916:19	3916:19	21	src
LEAF_NODE	3916:22	3916:22	21	[
EXPR	3916:23	3916:23	21	0
FIELD	3916:23	3916:23	22	0
LEAF_NODE	3916:23	3916:23	23	0
LEAF_NODE	3916:24	3916:24	21	]
LEAF_NODE	3916:26	3916:26	20	<<
FIELD	3916:29	3916:29	20	8
LEAF_NODE	3916:29	3916:29	21	8
LEAF_NODE	3916:30	3916:30	20	)
LEAF_NODE	3916:32	3916:32	19	|
BIT_OR_ELEM	3916:34	3916:34	19	src [ 1 ]
FIELD	3916:34	3916:39	20	src [ 1 ]
LEAF_NODE	3916:34	3916:34	21	src
LEAF_NODE	3916:37	3916:37	21	[
EXPR	3916:38	3916:38	21	1
FIELD	3916:38	3916:38	22	1
LEAF_NODE	3916:38	3916:38	23	1
LEAF_NODE	3916:39	3916:39	21	]
LEAF_NODE	3916:40	3916:40	15	;
SELECTION	3917:8	3918:10	12	
KEYWORD	3917:8	3917:8	13	else
LEAF_NODE	3917:8	3917:8	14	else
STATEMENTS	3918:10	3918:10	13	
EXPR_STATEMENT	3918:10	3918:40	14	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	3918:10	3918:10	15	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	3918:10	3918:18	16	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	3918:10	3918:10	17	buff1
FIELD	3918:10	3918:10	18	buff1
LEAF_NODE	3918:10	3918:10	19	buff1
ASSIGN_OP	3918:16	3918:16	17	=
LEAF_NODE	3918:16	3918:16	18	=
RVAL	3918:18	3918:18	17	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	3918:18	3918:34	18	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	3918:18	3918:30	19	( src [ 1 ] << 8 )
LEAF_NODE	3918:18	3918:18	20	(
FIELD	3918:19	3918:24	20	src [ 1 ]
LEAF_NODE	3918:19	3918:19	21	src
LEAF_NODE	3918:22	3918:22	21	[
EXPR	3918:23	3918:23	21	1
FIELD	3918:23	3918:23	22	1
LEAF_NODE	3918:23	3918:23	23	1
LEAF_NODE	3918:24	3918:24	21	]
LEAF_NODE	3918:26	3918:26	20	<<
FIELD	3918:29	3918:29	20	8
LEAF_NODE	3918:29	3918:29	21	8
LEAF_NODE	3918:30	3918:30	20	)
LEAF_NODE	3918:32	3918:32	19	|
BIT_OR_ELEM	3918:34	3918:34	19	src [ 0 ]
FIELD	3918:34	3918:39	20	src [ 0 ]
LEAF_NODE	3918:34	3918:34	21	src
LEAF_NODE	3918:37	3918:37	21	[
EXPR	3918:38	3918:38	21	0
FIELD	3918:38	3918:38	22	0
LEAF_NODE	3918:38	3918:38	23	0
LEAF_NODE	3918:39	3918:39	21	]
LEAF_NODE	3918:40	3918:40	15	;
LEAF_NODE	3920:1	3920:1	12	buff1
LEAF_NODE	3920:7	3920:7	12	=
LEAF_NODE	3920:9	3920:9	12	(
LEAF_NODE	3920:10	3920:10	12	buff1
LEAF_NODE	3920:16	3920:16	12	&
LEAF_NODE	3920:18	3920:18	12	matchbits
LEAF_NODE	3920:27	3920:27	12	)
LEAF_NODE	3920:29	3920:29	12	<<
LEAF_NODE	3920:32	3920:32	12	(
LEAF_NODE	3920:33	3920:33	12	src_bit
LEAF_NODE	3920:40	3920:40	12	)
LEAF_NODE	3920:41	3920:41	12	;
SELECTION	3923:1	3924:3	12	
KEYWORD	3923:1	3923:1	13	if
LEAF_NODE	3923:1	3923:1	14	if
LEAF_NODE	3923:4	3923:4	13	(
CONDITION	3923:5	3923:5	13	ready_bits >= 8
EXPR	3923:5	3923:19	14	ready_bits >= 8
FIELD	3923:5	3923:5	15	ready_bits
LEAF_NODE	3923:5	3923:5	16	ready_bits
REL_OPERATOR	3923:16	3923:16	15	>=
LEAF_NODE	3923:16	3923:16	16	>=
FIELD	3923:19	3923:19	15	8
LEAF_NODE	3923:19	3923:19	16	8
LEAF_NODE	3923:20	3923:20	13	)
STATEMENTS	3924:3	3931:3	13	
LEAF_NODE	3924:3	3924:3	14	{
STATEMENTS	3925:5	3930:5	14	
EXPR_STATEMENT	3925:5	3925:28	15	bytebuff = ( buff2 >> 8 ) ;
EXPR	3925:5	3925:5	16	bytebuff = ( buff2 >> 8 )
ASSIGN	3925:5	3925:16	17	bytebuff = ( buff2 >> 8 )
LVAL	3925:5	3925:5	18	bytebuff
FIELD	3925:5	3925:5	19	bytebuff
LEAF_NODE	3925:5	3925:5	20	bytebuff
ASSIGN_OP	3925:14	3925:14	18	=
LEAF_NODE	3925:14	3925:14	19	=
RVAL	3925:16	3925:27	18	( buff2 >> 8 )
LEAF_NODE	3925:16	3925:16	19	(
FIELD	3925:17	3925:17	19	buff2
LEAF_NODE	3925:17	3925:17	20	buff2
LEAF_NODE	3925:23	3925:23	19	>>
FIELD	3925:26	3925:26	19	8
LEAF_NODE	3925:26	3925:26	20	8
LEAF_NODE	3925:27	3925:27	19	)
LEAF_NODE	3925:28	3925:28	16	;
EXPR_STATEMENT	3926:5	3926:22	15	* dst ++ = bytebuff ;
EXPR	3926:5	3926:5	16	* dst ++ = bytebuff
ASSIGN	3926:5	3926:14	17	* dst ++ = bytebuff
LVAL	3926:5	3926:5	18	* dst ++
UNARY_EXPR	3926:5	3926:6	19	* dst ++
UNARY_OPERATOR	3926:5	3926:5	20	*
LEAF_NODE	3926:5	3926:5	21	*
FIELD	3926:6	3926:9	20	dst ++
LEAF_NODE	3926:6	3926:6	21	dst
LEAF_NODE	3926:9	3926:9	21	++
ASSIGN_OP	3926:12	3926:12	18	=
LEAF_NODE	3926:12	3926:12	19	=
RVAL	3926:14	3926:14	18	bytebuff
FIELD	3926:14	3926:14	19	bytebuff
LEAF_NODE	3926:14	3926:14	20	bytebuff
LEAF_NODE	3926:22	3926:22	16	;
EXPR_STATEMENT	3927:5	3927:20	15	ready_bits -= 8 ;
EXPR	3927:5	3927:5	16	ready_bits -= 8
ASSIGN	3927:5	3927:19	17	ready_bits -= 8
LVAL	3927:5	3927:5	18	ready_bits
FIELD	3927:5	3927:5	19	ready_bits
LEAF_NODE	3927:5	3927:5	20	ready_bits
ASSIGN_OP	3927:16	3927:16	18	-=
LEAF_NODE	3927:16	3927:16	19	-=
RVAL	3927:19	3927:19	18	8
FIELD	3927:19	3927:19	19	8
LEAF_NODE	3927:19	3927:19	20	8
LEAF_NODE	3927:20	3927:20	16	;
EXPR_STATEMENT	3929:5	3929:51	15	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) ) ;
EXPR	3929:5	3929:5	16	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
ASSIGN	3929:5	3929:13	17	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LVAL	3929:5	3929:5	18	buff2
FIELD	3929:5	3929:5	19	buff2
LEAF_NODE	3929:5	3929:5	20	buff2
ASSIGN_OP	3929:11	3929:11	18	=
LEAF_NODE	3929:11	3929:11	19	=
RVAL	3929:13	3929:50	18	( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	3929:13	3929:13	19	(
BIT_OR	3929:14	3929:29	19	( buff2 << 8 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	3929:14	3929:25	20	( buff2 << 8 )
LEAF_NODE	3929:14	3929:14	21	(
FIELD	3929:15	3929:15	21	buff2
LEAF_NODE	3929:15	3929:15	22	buff2
LEAF_NODE	3929:21	3929:21	21	<<
FIELD	3929:24	3929:24	21	8
LEAF_NODE	3929:24	3929:24	22	8
LEAF_NODE	3929:25	3929:25	21	)
LEAF_NODE	3929:27	3929:27	20	|
BIT_OR_ELEM	3929:29	3929:49	20	( buff1 >> ready_bits )
LEAF_NODE	3929:29	3929:29	21	(
FIELD	3929:30	3929:30	21	buff1
LEAF_NODE	3929:30	3929:30	22	buff1
LEAF_NODE	3929:36	3929:36	21	>>
FIELD	3929:39	3929:39	21	ready_bits
LEAF_NODE	3929:39	3929:39	22	ready_bits
LEAF_NODE	3929:49	3929:49	21	)
LEAF_NODE	3929:50	3929:50	19	)
LEAF_NODE	3929:51	3929:51	16	;
EXPR_STATEMENT	3930:5	3930:29	15	strcpy ( action , "Flush" ) ;
EXPR	3930:5	3930:5	16	strcpy ( action , "Flush" )
FUNCTION_CALL	3930:5	3930:28	17	strcpy ( action , "Flush" )
CALLEE	3930:5	3930:5	18	strcpy
LEAF_NODE	3930:5	3930:5	19	strcpy
LEAF_NODE	3930:12	3930:12	18	(
ARGUMENT	3930:13	3930:13	18	action
FIELD	3930:13	3930:13	19	action
LEAF_NODE	3930:13	3930:13	20	action
LEAF_NODE	3930:19	3930:19	18	,
ARGUMENT	3930:21	3930:21	18	"Flush"
FIELD	3930:21	3930:21	19	"Flush"
LEAF_NODE	3930:21	3930:21	20	"Flush"
LEAF_NODE	3930:28	3930:28	18	)
LEAF_NODE	3930:29	3930:29	16	;
LEAF_NODE	3931:3	3931:3	14	}
SELECTION	3932:1	3933:3	12	
KEYWORD	3932:1	3932:1	13	else
LEAF_NODE	3932:1	3932:1	14	else
STATEMENTS	3933:3	3937:3	13	
LEAF_NODE	3933:3	3933:3	14	{
STATEMENTS	3934:5	3936:5	14	
EXPR_STATEMENT	3934:5	3934:17	15	bytebuff = 0 ;
EXPR	3934:5	3934:5	16	bytebuff = 0
ASSIGN	3934:5	3934:16	17	bytebuff = 0
LVAL	3934:5	3934:5	18	bytebuff
FIELD	3934:5	3934:5	19	bytebuff
LEAF_NODE	3934:5	3934:5	20	bytebuff
ASSIGN_OP	3934:14	3934:14	18	=
LEAF_NODE	3934:14	3934:14	19	=
RVAL	3934:16	3934:16	18	0
FIELD	3934:16	3934:16	19	0
LEAF_NODE	3934:16	3934:16	20	0
LEAF_NODE	3934:17	3934:17	16	;
EXPR_STATEMENT	3935:5	3935:44	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	3935:5	3935:5	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	3935:5	3935:13	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	3935:5	3935:5	18	buff2
FIELD	3935:5	3935:5	19	buff2
LEAF_NODE	3935:5	3935:5	20	buff2
ASSIGN_OP	3935:11	3935:11	18	=
LEAF_NODE	3935:11	3935:11	19	=
RVAL	3935:13	3935:43	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	3935:13	3935:13	19	(
BIT_OR	3935:14	3935:22	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	3935:14	3935:14	20	buff2
FIELD	3935:14	3935:14	21	buff2
LEAF_NODE	3935:14	3935:14	22	buff2
LEAF_NODE	3935:20	3935:20	20	|
BIT_OR_ELEM	3935:22	3935:42	20	( buff1 >> ready_bits )
LEAF_NODE	3935:22	3935:22	21	(
FIELD	3935:23	3935:23	21	buff1
LEAF_NODE	3935:23	3935:23	22	buff1
LEAF_NODE	3935:29	3935:29	21	>>
FIELD	3935:32	3935:32	21	ready_bits
LEAF_NODE	3935:32	3935:32	22	ready_bits
LEAF_NODE	3935:42	3935:42	21	)
LEAF_NODE	3935:43	3935:43	19	)
LEAF_NODE	3935:44	3935:44	16	;
EXPR_STATEMENT	3936:5	3936:30	15	strcpy ( action , "Update" ) ;
EXPR	3936:5	3936:5	16	strcpy ( action , "Update" )
FUNCTION_CALL	3936:5	3936:29	17	strcpy ( action , "Update" )
CALLEE	3936:5	3936:5	18	strcpy
LEAF_NODE	3936:5	3936:5	19	strcpy
LEAF_NODE	3936:12	3936:12	18	(
ARGUMENT	3936:13	3936:13	18	action
FIELD	3936:13	3936:13	19	action
LEAF_NODE	3936:13	3936:13	20	action
LEAF_NODE	3936:19	3936:19	18	,
ARGUMENT	3936:21	3936:21	18	"Update"
FIELD	3936:21	3936:21	19	"Update"
LEAF_NODE	3936:21	3936:21	20	"Update"
LEAF_NODE	3936:29	3936:29	18	)
LEAF_NODE	3936:30	3936:30	16	;
LEAF_NODE	3937:3	3937:3	14	}
EXPR_STATEMENT	3938:1	3938:18	12	ready_bits += bps ;
EXPR	3938:1	3938:1	13	ready_bits += bps
ASSIGN	3938:1	3938:15	14	ready_bits += bps
LVAL	3938:1	3938:1	15	ready_bits
FIELD	3938:1	3938:1	16	ready_bits
LEAF_NODE	3938:1	3938:1	17	ready_bits
ASSIGN_OP	3938:12	3938:12	15	+=
LEAF_NODE	3938:12	3938:12	16	+=
RVAL	3938:15	3938:15	15	bps
FIELD	3938:15	3938:15	16	bps
LEAF_NODE	3938:15	3938:15	17	bps
LEAF_NODE	3938:18	3938:18	13	;
SELECTION	3940:1	3941:3	12	
KEYWORD	3940:1	3940:1	13	if
LEAF_NODE	3940:1	3940:1	14	if
LEAF_NODE	3940:4	3940:4	13	(
CONDITION	3940:5	3940:5	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	3940:5	3940:5	14	( dumpfile != NULL ) && ( level == 3 )
AND	3940:5	3940:27	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	3940:5	3940:22	16	( dumpfile != NULL )
LEAF_NODE	3940:5	3940:5	17	(
FIELD	3940:6	3940:6	17	dumpfile
LEAF_NODE	3940:6	3940:6	18	dumpfile
EQ_OPERATOR	3940:15	3940:15	17	!=
LEAF_NODE	3940:15	3940:15	18	!=
FIELD	3940:18	3940:18	17	NULL
LEAF_NODE	3940:18	3940:18	18	NULL
LEAF_NODE	3940:22	3940:22	17	)
LEAF_NODE	3940:24	3940:24	16	&&
EXPR	3940:27	3940:38	16	( level == 3 )
LEAF_NODE	3940:27	3940:27	17	(
FIELD	3940:28	3940:28	17	level
LEAF_NODE	3940:28	3940:28	18	level
EQ_OPERATOR	3940:34	3940:34	17	==
LEAF_NODE	3940:34	3940:34	18	==
FIELD	3940:37	3940:37	17	3
LEAF_NODE	3940:37	3940:37	18	3
LEAF_NODE	3940:38	3940:38	17	)
LEAF_NODE	3940:39	3940:39	13	)
STATEMENTS	3941:3	3952:3	13	
LEAF_NODE	3941:3	3941:3	14	{
STATEMENTS	3942:3	3951:3	14	
EXPR_STATEMENT	3942:3	3944:59	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	3942:3	3942:3	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	3942:3	3944:58	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	3942:3	3942:3	18	dump_info
LEAF_NODE	3942:3	3942:3	19	dump_info
LEAF_NODE	3942:13	3942:13	18	(
ARGUMENT	3942:14	3942:14	18	dumpfile
FIELD	3942:14	3942:14	19	dumpfile
LEAF_NODE	3942:14	3942:14	20	dumpfile
LEAF_NODE	3942:22	3942:22	18	,
ARGUMENT	3942:24	3942:24	18	format
FIELD	3942:24	3942:24	19	format
LEAF_NODE	3942:24	3942:24	20	format
LEAF_NODE	3942:30	3942:30	18	,
ARGUMENT	3942:32	3942:32	18	""
FIELD	3942:32	3942:32	19	""
LEAF_NODE	3942:32	3942:32	20	""
LEAF_NODE	3942:34	3942:34	18	,
ARGUMENT	3943:9	3943:9	18	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	3943:9	3943:9	19	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3943:9	3943:9	20	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3943:92	3943:92	18	,
ARGUMENT	3944:9	3944:15	18	row + 1
FIELD	3944:9	3944:9	19	row
LEAF_NODE	3944:9	3944:9	20	row
LEAF_NODE	3944:13	3944:13	19	+
FIELD	3944:15	3944:15	19	1
LEAF_NODE	3944:15	3944:15	20	1
LEAF_NODE	3944:16	3944:16	18	,
ARGUMENT	3944:18	3944:24	18	col + 1
FIELD	3944:18	3944:18	19	col
LEAF_NODE	3944:18	3944:18	20	col
LEAF_NODE	3944:22	3944:22	19	+
FIELD	3944:24	3944:24	19	1
LEAF_NODE	3944:24	3944:24	20	1
LEAF_NODE	3944:25	3944:25	18	,
ARGUMENT	3944:27	3944:27	18	s
FIELD	3944:27	3944:27	19	s
LEAF_NODE	3944:27	3944:27	20	s
LEAF_NODE	3944:28	3944:28	18	,
ARGUMENT	3944:30	3944:30	18	src_byte
FIELD	3944:30	3944:30	19	src_byte
LEAF_NODE	3944:30	3944:30	20	src_byte
LEAF_NODE	3944:38	3944:38	18	,
ARGUMENT	3944:40	3944:40	18	src_bit
FIELD	3944:40	3944:40	19	src_bit
LEAF_NODE	3944:40	3944:40	20	src_bit
LEAF_NODE	3944:47	3944:47	18	,
ARGUMENT	3944:49	3944:55	18	dst - out
FIELD	3944:49	3944:49	19	dst
LEAF_NODE	3944:49	3944:49	20	dst
LEAF_NODE	3944:53	3944:53	19	-
FIELD	3944:55	3944:55	19	out
LEAF_NODE	3944:55	3944:55	20	out
LEAF_NODE	3944:58	3944:58	18	)
LEAF_NODE	3944:59	3944:59	16	;
EXPR_STATEMENT	3946:3	3946:57	15	dump_short ( dumpfile , format , "Match bits" , matchbits ) ;
EXPR	3946:3	3946:3	16	dump_short ( dumpfile , format , "Match bits" , matchbits )
FUNCTION_CALL	3946:3	3946:56	17	dump_short ( dumpfile , format , "Match bits" , matchbits )
CALLEE	3946:3	3946:3	18	dump_short
LEAF_NODE	3946:3	3946:3	19	dump_short
LEAF_NODE	3946:14	3946:14	18	(
ARGUMENT	3946:15	3946:15	18	dumpfile
FIELD	3946:15	3946:15	19	dumpfile
LEAF_NODE	3946:15	3946:15	20	dumpfile
LEAF_NODE	3946:23	3946:23	18	,
ARGUMENT	3946:25	3946:25	18	format
FIELD	3946:25	3946:25	19	format
LEAF_NODE	3946:25	3946:25	20	format
LEAF_NODE	3946:31	3946:31	18	,
ARGUMENT	3946:33	3946:33	18	"Match bits"
FIELD	3946:33	3946:33	19	"Match bits"
LEAF_NODE	3946:33	3946:33	20	"Match bits"
LEAF_NODE	3946:45	3946:45	18	,
ARGUMENT	3946:47	3946:47	18	matchbits
FIELD	3946:47	3946:47	19	matchbits
LEAF_NODE	3946:47	3946:47	20	matchbits
LEAF_NODE	3946:56	3946:56	18	)
LEAF_NODE	3946:57	3946:57	16	;
EXPR_STATEMENT	3947:3	3947:54	15	dump_data ( dumpfile , format , "Src   bits" , src , 2 ) ;
EXPR	3947:3	3947:3	16	dump_data ( dumpfile , format , "Src   bits" , src , 2 )
FUNCTION_CALL	3947:3	3947:53	17	dump_data ( dumpfile , format , "Src   bits" , src , 2 )
CALLEE	3947:3	3947:3	18	dump_data
LEAF_NODE	3947:3	3947:3	19	dump_data
LEAF_NODE	3947:14	3947:14	18	(
ARGUMENT	3947:15	3947:15	18	dumpfile
FIELD	3947:15	3947:15	19	dumpfile
LEAF_NODE	3947:15	3947:15	20	dumpfile
LEAF_NODE	3947:23	3947:23	18	,
ARGUMENT	3947:25	3947:25	18	format
FIELD	3947:25	3947:25	19	format
LEAF_NODE	3947:25	3947:25	20	format
LEAF_NODE	3947:31	3947:31	18	,
ARGUMENT	3947:33	3947:33	18	"Src   bits"
FIELD	3947:33	3947:33	19	"Src   bits"
LEAF_NODE	3947:33	3947:33	20	"Src   bits"
LEAF_NODE	3947:45	3947:45	18	,
ARGUMENT	3947:47	3947:47	18	src
FIELD	3947:47	3947:47	19	src
LEAF_NODE	3947:47	3947:47	20	src
LEAF_NODE	3947:50	3947:50	18	,
ARGUMENT	3947:52	3947:52	18	2
FIELD	3947:52	3947:52	19	2
LEAF_NODE	3947:52	3947:52	20	2
LEAF_NODE	3947:53	3947:53	18	)
LEAF_NODE	3947:54	3947:54	16	;
EXPR_STATEMENT	3948:3	3948:53	15	dump_short ( dumpfile , format , "Buff1 bits" , buff1 ) ;
EXPR	3948:3	3948:3	16	dump_short ( dumpfile , format , "Buff1 bits" , buff1 )
FUNCTION_CALL	3948:3	3948:52	17	dump_short ( dumpfile , format , "Buff1 bits" , buff1 )
CALLEE	3948:3	3948:3	18	dump_short
LEAF_NODE	3948:3	3948:3	19	dump_short
LEAF_NODE	3948:14	3948:14	18	(
ARGUMENT	3948:15	3948:15	18	dumpfile
FIELD	3948:15	3948:15	19	dumpfile
LEAF_NODE	3948:15	3948:15	20	dumpfile
LEAF_NODE	3948:23	3948:23	18	,
ARGUMENT	3948:25	3948:25	18	format
FIELD	3948:25	3948:25	19	format
LEAF_NODE	3948:25	3948:25	20	format
LEAF_NODE	3948:31	3948:31	18	,
ARGUMENT	3948:33	3948:33	18	"Buff1 bits"
FIELD	3948:33	3948:33	19	"Buff1 bits"
LEAF_NODE	3948:33	3948:33	20	"Buff1 bits"
LEAF_NODE	3948:45	3948:45	18	,
ARGUMENT	3948:47	3948:47	18	buff1
FIELD	3948:47	3948:47	19	buff1
LEAF_NODE	3948:47	3948:47	20	buff1
LEAF_NODE	3948:52	3948:52	18	)
LEAF_NODE	3948:53	3948:53	16	;
EXPR_STATEMENT	3949:3	3949:53	15	dump_short ( dumpfile , format , "Buff2 bits" , buff2 ) ;
EXPR	3949:3	3949:3	16	dump_short ( dumpfile , format , "Buff2 bits" , buff2 )
FUNCTION_CALL	3949:3	3949:52	17	dump_short ( dumpfile , format , "Buff2 bits" , buff2 )
CALLEE	3949:3	3949:3	18	dump_short
LEAF_NODE	3949:3	3949:3	19	dump_short
LEAF_NODE	3949:14	3949:14	18	(
ARGUMENT	3949:15	3949:15	18	dumpfile
FIELD	3949:15	3949:15	19	dumpfile
LEAF_NODE	3949:15	3949:15	20	dumpfile
LEAF_NODE	3949:23	3949:23	18	,
ARGUMENT	3949:25	3949:25	18	format
FIELD	3949:25	3949:25	19	format
LEAF_NODE	3949:25	3949:25	20	format
LEAF_NODE	3949:31	3949:31	18	,
ARGUMENT	3949:33	3949:33	18	"Buff2 bits"
FIELD	3949:33	3949:33	19	"Buff2 bits"
LEAF_NODE	3949:33	3949:33	20	"Buff2 bits"
LEAF_NODE	3949:45	3949:45	18	,
ARGUMENT	3949:47	3949:47	18	buff2
FIELD	3949:47	3949:47	19	buff2
LEAF_NODE	3949:47	3949:47	20	buff2
LEAF_NODE	3949:52	3949:52	18	)
LEAF_NODE	3949:53	3949:53	16	;
EXPR_STATEMENT	3950:3	3950:56	15	dump_byte ( dumpfile , format , "Write byte" , bytebuff ) ;
EXPR	3950:3	3950:3	16	dump_byte ( dumpfile , format , "Write byte" , bytebuff )
FUNCTION_CALL	3950:3	3950:55	17	dump_byte ( dumpfile , format , "Write byte" , bytebuff )
CALLEE	3950:3	3950:3	18	dump_byte
LEAF_NODE	3950:3	3950:3	19	dump_byte
LEAF_NODE	3950:14	3950:14	18	(
ARGUMENT	3950:15	3950:15	18	dumpfile
FIELD	3950:15	3950:15	19	dumpfile
LEAF_NODE	3950:15	3950:15	20	dumpfile
LEAF_NODE	3950:23	3950:23	18	,
ARGUMENT	3950:25	3950:25	18	format
FIELD	3950:25	3950:25	19	format
LEAF_NODE	3950:25	3950:25	20	format
LEAF_NODE	3950:31	3950:31	18	,
ARGUMENT	3950:33	3950:33	18	"Write byte"
FIELD	3950:33	3950:33	19	"Write byte"
LEAF_NODE	3950:33	3950:33	20	"Write byte"
LEAF_NODE	3950:45	3950:45	18	,
ARGUMENT	3950:47	3950:47	18	bytebuff
FIELD	3950:47	3950:47	19	bytebuff
LEAF_NODE	3950:47	3950:47	20	bytebuff
LEAF_NODE	3950:55	3950:55	18	)
LEAF_NODE	3950:56	3950:56	16	;
EXPR_STATEMENT	3951:3	3951:78	15	dump_info ( dumpfile , format , "" , "Ready bits:  %d, %s" , ready_bits , action ) ;
EXPR	3951:3	3951:3	16	dump_info ( dumpfile , format , "" , "Ready bits:  %d, %s" , ready_bits , action )
FUNCTION_CALL	3951:3	3951:77	17	dump_info ( dumpfile , format , "" , "Ready bits:  %d, %s" , ready_bits , action )
CALLEE	3951:3	3951:3	18	dump_info
LEAF_NODE	3951:3	3951:3	19	dump_info
LEAF_NODE	3951:14	3951:14	18	(
ARGUMENT	3951:15	3951:15	18	dumpfile
FIELD	3951:15	3951:15	19	dumpfile
LEAF_NODE	3951:15	3951:15	20	dumpfile
LEAF_NODE	3951:23	3951:23	18	,
ARGUMENT	3951:25	3951:25	18	format
FIELD	3951:25	3951:25	19	format
LEAF_NODE	3951:25	3951:25	20	format
LEAF_NODE	3951:31	3951:31	18	,
ARGUMENT	3951:33	3951:33	18	""
FIELD	3951:33	3951:33	19	""
LEAF_NODE	3951:33	3951:33	20	""
LEAF_NODE	3951:35	3951:35	18	,
ARGUMENT	3951:36	3951:36	18	"Ready bits:  %d, %s"
FIELD	3951:36	3951:36	19	"Ready bits:  %d, %s"
LEAF_NODE	3951:36	3951:36	20	"Ready bits:  %d, %s"
LEAF_NODE	3951:57	3951:57	18	,
ARGUMENT	3951:59	3951:59	18	ready_bits
FIELD	3951:59	3951:59	19	ready_bits
LEAF_NODE	3951:59	3951:59	20	ready_bits
LEAF_NODE	3951:69	3951:69	18	,
ARGUMENT	3951:71	3951:71	18	action
FIELD	3951:71	3951:71	19	action
LEAF_NODE	3951:71	3951:71	20	action
LEAF_NODE	3951:77	3951:77	18	)
LEAF_NODE	3951:78	3951:78	16	;
LEAF_NODE	3952:3	3952:3	14	}
LEAF_NODE	3953:1	3953:1	11	}
LEAF_NODE	3954:6	3954:6	8	}
SELECTION	3957:4	3958:6	6	
KEYWORD	3957:4	3957:4	7	if
LEAF_NODE	3957:4	3957:4	8	if
LEAF_NODE	3957:7	3957:7	7	(
CONDITION	3957:8	3957:8	7	ready_bits > 0
EXPR	3957:8	3957:21	8	ready_bits > 0
FIELD	3957:8	3957:8	9	ready_bits
LEAF_NODE	3957:8	3957:8	10	ready_bits
REL_OPERATOR	3957:19	3957:19	9	>
LEAF_NODE	3957:19	3957:19	10	>
FIELD	3957:21	3957:21	9	0
LEAF_NODE	3957:21	3957:21	10	0
LEAF_NODE	3957:22	3957:22	7	)
STATEMENTS	3958:6	3968:6	7	
LEAF_NODE	3958:6	3958:6	8	{
STATEMENTS	3959:6	3961:6	8	
EXPR_STATEMENT	3959:6	3959:29	9	bytebuff = ( buff2 >> 8 ) ;
EXPR	3959:6	3959:6	10	bytebuff = ( buff2 >> 8 )
ASSIGN	3959:6	3959:17	11	bytebuff = ( buff2 >> 8 )
LVAL	3959:6	3959:6	12	bytebuff
FIELD	3959:6	3959:6	13	bytebuff
LEAF_NODE	3959:6	3959:6	14	bytebuff
ASSIGN_OP	3959:15	3959:15	12	=
LEAF_NODE	3959:15	3959:15	13	=
RVAL	3959:17	3959:28	12	( buff2 >> 8 )
LEAF_NODE	3959:17	3959:17	13	(
FIELD	3959:18	3959:18	13	buff2
LEAF_NODE	3959:18	3959:18	14	buff2
LEAF_NODE	3959:24	3959:24	13	>>
FIELD	3959:27	3959:27	13	8
LEAF_NODE	3959:27	3959:27	14	8
LEAF_NODE	3959:28	3959:28	13	)
LEAF_NODE	3959:29	3959:29	10	;
EXPR_STATEMENT	3960:6	3960:23	9	* dst ++ = bytebuff ;
EXPR	3960:6	3960:6	10	* dst ++ = bytebuff
ASSIGN	3960:6	3960:15	11	* dst ++ = bytebuff
LVAL	3960:6	3960:6	12	* dst ++
UNARY_EXPR	3960:6	3960:7	13	* dst ++
UNARY_OPERATOR	3960:6	3960:6	14	*
LEAF_NODE	3960:6	3960:6	15	*
FIELD	3960:7	3960:10	14	dst ++
LEAF_NODE	3960:7	3960:7	15	dst
LEAF_NODE	3960:10	3960:10	15	++
ASSIGN_OP	3960:13	3960:13	12	=
LEAF_NODE	3960:13	3960:13	13	=
RVAL	3960:15	3960:15	12	bytebuff
FIELD	3960:15	3960:15	13	bytebuff
LEAF_NODE	3960:15	3960:15	14	bytebuff
LEAF_NODE	3960:23	3960:23	10	;
SELECTION	3961:6	3962:1	9	
KEYWORD	3961:6	3961:6	10	if
LEAF_NODE	3961:6	3961:6	11	if
LEAF_NODE	3961:9	3961:9	10	(
CONDITION	3961:10	3961:10	10	( dumpfile != NULL ) && ( level == 3 )
EXPR	3961:10	3961:10	11	( dumpfile != NULL ) && ( level == 3 )
AND	3961:10	3961:32	12	( dumpfile != NULL ) && ( level == 3 )
EXPR	3961:10	3961:27	13	( dumpfile != NULL )
LEAF_NODE	3961:10	3961:10	14	(
FIELD	3961:11	3961:11	14	dumpfile
LEAF_NODE	3961:11	3961:11	15	dumpfile
EQ_OPERATOR	3961:20	3961:20	14	!=
LEAF_NODE	3961:20	3961:20	15	!=
FIELD	3961:23	3961:23	14	NULL
LEAF_NODE	3961:23	3961:23	15	NULL
LEAF_NODE	3961:27	3961:27	14	)
LEAF_NODE	3961:29	3961:29	13	&&
EXPR	3961:32	3961:43	13	( level == 3 )
LEAF_NODE	3961:32	3961:32	14	(
FIELD	3961:33	3961:33	14	level
LEAF_NODE	3961:33	3961:33	15	level
EQ_OPERATOR	3961:39	3961:39	14	==
LEAF_NODE	3961:39	3961:39	15	==
FIELD	3961:42	3961:42	14	3
LEAF_NODE	3961:42	3961:42	15	3
LEAF_NODE	3961:43	3961:43	14	)
LEAF_NODE	3961:44	3961:44	10	)
STATEMENTS	3962:1	3967:1	10	
LEAF_NODE	3962:1	3962:1	11	{
STATEMENTS	3963:1	3966:1	11	
EXPR_STATEMENT	3963:1	3965:56	12	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	3963:1	3963:1	13	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	3963:1	3965:55	14	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	3963:1	3963:1	15	dump_info
LEAF_NODE	3963:1	3963:1	16	dump_info
LEAF_NODE	3963:11	3963:11	15	(
ARGUMENT	3963:12	3963:12	15	dumpfile
FIELD	3963:12	3963:12	16	dumpfile
LEAF_NODE	3963:12	3963:12	17	dumpfile
LEAF_NODE	3963:20	3963:20	15	,
ARGUMENT	3963:22	3963:22	15	format
FIELD	3963:22	3963:22	16	format
LEAF_NODE	3963:22	3963:22	17	format
LEAF_NODE	3963:28	3963:28	15	,
ARGUMENT	3963:30	3963:30	15	""
FIELD	3963:30	3963:30	16	""
LEAF_NODE	3963:30	3963:30	17	""
LEAF_NODE	3963:32	3963:32	15	,
ARGUMENT	3964:9	3964:9	15	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	3964:9	3964:9	16	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3964:9	3964:9	17	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	3964:80	3964:80	15	,
ARGUMENT	3965:9	3965:15	15	row + 1
FIELD	3965:9	3965:9	16	row
LEAF_NODE	3965:9	3965:9	17	row
LEAF_NODE	3965:13	3965:13	16	+
FIELD	3965:15	3965:15	16	1
LEAF_NODE	3965:15	3965:15	17	1
LEAF_NODE	3965:16	3965:16	15	,
ARGUMENT	3965:18	3965:24	15	col + 1
FIELD	3965:18	3965:18	16	col
LEAF_NODE	3965:18	3965:18	17	col
LEAF_NODE	3965:22	3965:22	16	+
FIELD	3965:24	3965:24	16	1
LEAF_NODE	3965:24	3965:24	17	1
LEAF_NODE	3965:25	3965:25	15	,
ARGUMENT	3965:27	3965:27	15	src_byte
FIELD	3965:27	3965:27	16	src_byte
LEAF_NODE	3965:27	3965:27	17	src_byte
LEAF_NODE	3965:35	3965:35	15	,
ARGUMENT	3965:37	3965:37	15	src_bit
FIELD	3965:37	3965:37	16	src_bit
LEAF_NODE	3965:37	3965:37	17	src_bit
LEAF_NODE	3965:44	3965:44	15	,
ARGUMENT	3965:46	3965:52	15	dst - out
FIELD	3965:46	3965:46	16	dst
LEAF_NODE	3965:46	3965:46	17	dst
LEAF_NODE	3965:50	3965:50	16	-
FIELD	3965:52	3965:52	16	out
LEAF_NODE	3965:52	3965:52	17	out
LEAF_NODE	3965:55	3965:55	15	)
LEAF_NODE	3965:56	3965:56	13	;
EXPR_STATEMENT	3966:1	3966:53	12	dump_byte ( dumpfile , format , "Final bits" , bytebuff ) ;
EXPR	3966:1	3966:1	13	dump_byte ( dumpfile , format , "Final bits" , bytebuff )
FUNCTION_CALL	3966:1	3966:52	14	dump_byte ( dumpfile , format , "Final bits" , bytebuff )
CALLEE	3966:1	3966:1	15	dump_byte
LEAF_NODE	3966:1	3966:1	16	dump_byte
LEAF_NODE	3966:11	3966:11	15	(
ARGUMENT	3966:12	3966:12	15	dumpfile
FIELD	3966:12	3966:12	16	dumpfile
LEAF_NODE	3966:12	3966:12	17	dumpfile
LEAF_NODE	3966:20	3966:20	15	,
ARGUMENT	3966:22	3966:22	15	format
FIELD	3966:22	3966:22	16	format
LEAF_NODE	3966:22	3966:22	17	format
LEAF_NODE	3966:28	3966:28	15	,
ARGUMENT	3966:30	3966:30	15	"Final bits"
FIELD	3966:30	3966:30	16	"Final bits"
LEAF_NODE	3966:30	3966:30	17	"Final bits"
LEAF_NODE	3966:42	3966:42	15	,
ARGUMENT	3966:44	3966:44	15	bytebuff
FIELD	3966:44	3966:44	16	bytebuff
LEAF_NODE	3966:44	3966:44	17	bytebuff
LEAF_NODE	3966:52	3966:52	15	)
LEAF_NODE	3966:53	3966:53	13	;
LEAF_NODE	3967:1	3967:1	11	}
LEAF_NODE	3968:6	3968:6	8	}
SELECTION	3970:4	3971:6	6	
KEYWORD	3970:4	3970:4	7	if
LEAF_NODE	3970:4	3970:4	8	if
LEAF_NODE	3970:7	3970:7	7	(
CONDITION	3970:8	3970:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	3970:8	3970:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	3970:8	3970:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	3970:8	3970:25	10	( dumpfile != NULL )
LEAF_NODE	3970:8	3970:8	11	(
FIELD	3970:9	3970:9	11	dumpfile
LEAF_NODE	3970:9	3970:9	12	dumpfile
EQ_OPERATOR	3970:18	3970:18	11	!=
LEAF_NODE	3970:18	3970:18	12	!=
FIELD	3970:21	3970:21	11	NULL
LEAF_NODE	3970:21	3970:21	12	NULL
LEAF_NODE	3970:25	3970:25	11	)
LEAF_NODE	3970:27	3970:27	10	&&
EXPR	3970:30	3970:41	10	( level == 2 )
LEAF_NODE	3970:30	3970:30	11	(
FIELD	3970:31	3970:31	11	level
LEAF_NODE	3970:31	3970:31	12	level
EQ_OPERATOR	3970:37	3970:37	11	==
LEAF_NODE	3970:37	3970:37	12	==
FIELD	3970:40	3970:40	11	2
LEAF_NODE	3970:40	3970:40	12	2
LEAF_NODE	3970:41	3970:41	11	)
LEAF_NODE	3970:42	3970:42	7	)
STATEMENTS	3971:6	3974:6	7	
LEAF_NODE	3971:6	3971:6	8	{
STATEMENTS	3972:6	3973:6	8	
EXPR_STATEMENT	3972:6	3972:80	9	dump_info ( dumpfile , format , "combineSeparateSamples16bits" , "Output data" ) ;
EXPR	3972:6	3972:6	10	dump_info ( dumpfile , format , "combineSeparateSamples16bits" , "Output data" )
FUNCTION_CALL	3972:6	3972:79	11	dump_info ( dumpfile , format , "combineSeparateSamples16bits" , "Output data" )
CALLEE	3972:6	3972:6	12	dump_info
LEAF_NODE	3972:6	3972:6	13	dump_info
LEAF_NODE	3972:16	3972:16	12	(
ARGUMENT	3972:17	3972:17	12	dumpfile
FIELD	3972:17	3972:17	13	dumpfile
LEAF_NODE	3972:17	3972:17	14	dumpfile
LEAF_NODE	3972:25	3972:25	12	,
ARGUMENT	3972:27	3972:27	12	format
FIELD	3972:27	3972:27	13	format
LEAF_NODE	3972:27	3972:27	14	format
LEAF_NODE	3972:33	3972:33	12	,
ARGUMENT	3972:35	3972:35	12	"combineSeparateSamples16bits"
FIELD	3972:35	3972:35	13	"combineSeparateSamples16bits"
LEAF_NODE	3972:35	3972:35	14	"combineSeparateSamples16bits"
LEAF_NODE	3972:65	3972:65	12	,
ARGUMENT	3972:66	3972:66	12	"Output data"
FIELD	3972:66	3972:66	13	"Output data"
LEAF_NODE	3972:66	3972:66	14	"Output data"
LEAF_NODE	3972:79	3972:79	12	)
LEAF_NODE	3972:80	3972:80	10	;
EXPR_STATEMENT	3973:6	3973:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	3973:6	3973:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	3973:6	3973:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	3973:6	3973:6	12	dump_buffer
LEAF_NODE	3973:6	3973:6	13	dump_buffer
LEAF_NODE	3973:17	3973:17	12	(
ARGUMENT	3973:18	3973:18	12	dumpfile
FIELD	3973:18	3973:18	13	dumpfile
LEAF_NODE	3973:18	3973:18	14	dumpfile
LEAF_NODE	3973:26	3973:26	12	,
ARGUMENT	3973:28	3973:28	12	format
FIELD	3973:28	3973:28	13	format
LEAF_NODE	3973:28	3973:28	14	format
LEAF_NODE	3973:34	3973:34	12	,
ARGUMENT	3973:36	3973:36	12	1
FIELD	3973:36	3973:36	13	1
LEAF_NODE	3973:36	3973:36	14	1
LEAF_NODE	3973:37	3973:37	12	,
ARGUMENT	3973:39	3973:39	12	dst_rowsize
FIELD	3973:39	3973:39	13	dst_rowsize
LEAF_NODE	3973:39	3973:39	14	dst_rowsize
LEAF_NODE	3973:50	3973:50	12	,
ARGUMENT	3973:52	3973:52	12	row
FIELD	3973:52	3973:52	13	row
LEAF_NODE	3973:52	3973:52	14	row
LEAF_NODE	3973:55	3973:55	12	,
ARGUMENT	3973:57	3973:81	12	out + ( row * dst_rowsize )
FIELD	3973:57	3973:57	13	out
LEAF_NODE	3973:57	3973:57	14	out
LEAF_NODE	3973:61	3973:61	13	+
LEAF_NODE	3973:63	3973:63	13	(
FIELD	3973:64	3973:64	13	row
LEAF_NODE	3973:64	3973:64	14	row
LEAF_NODE	3973:68	3973:68	13	*
FIELD	3973:70	3973:70	13	dst_rowsize
LEAF_NODE	3973:70	3973:70	14	dst_rowsize
LEAF_NODE	3973:81	3973:81	13	)
LEAF_NODE	3973:82	3973:82	12	)
LEAF_NODE	3973:83	3973:83	10	;
LEAF_NODE	3974:6	3974:6	8	}
LEAF_NODE	3975:4	3975:4	5	}
JUMP_STATEMENT	3977:2	3977:12	3	return ( 0 ) ;
KEYWORD	3977:2	3977:2	4	return
LEAF_NODE	3977:2	3977:2	5	return
DESTINATION	3977:9	3977:9	4	( 0 )
EXPR	3977:9	3977:11	5	( 0 )
LEAF_NODE	3977:9	3977:9	6	(
FIELD	3977:10	3977:10	6	0
LEAF_NODE	3977:10	3977:10	7	0
LEAF_NODE	3977:11	3977:11	6	)
LEAF_NODE	3977:12	3977:12	4	;
LEAF_NODE	3978:2	3978:2	2	}
FUNCTION_DEF	3980:0	4102:2	1	
RETURN_TYPE	3980:0	3980:7	2	static int
LEAF_NODE	3980:0	3980:0	3	static
TYPE_NAME	3980:7	3980:7	3	int
LEAF_NODE	3980:7	3980:7	4	int
FUNCTION_NAME	3981:0	3981:0	2	combineSeparateSamples24bits
LEAF_NODE	3981:0	3981:0	3	combineSeparateSamples24bits
PARAMETER_LIST	3981:29	3983:60	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	3981:29	3981:29	3	(
PARAMETER_DECL	3981:30	3981:37	3	uint8 * [ ] in
TYPE	3981:30	3981:39	4	uint8 * [ ]
TYPE_NAME	3981:30	3981:30	5	uint8
LEAF_NODE	3981:30	3981:30	6	uint8
POINTER	3981:36	3981:36	5	*
LEAF_NODE	3981:36	3981:36	6	*
TYPE_SUFFIX	3981:39	3981:40	5	[ ]
LEAF_NODE	3981:39	3981:39	6	[
LEAF_NODE	3981:40	3981:40	6	]
NAME	3981:37	3981:37	4	in
LEAF_NODE	3981:37	3981:37	5	in
LEAF_NODE	3981:41	3981:41	3	,
PARAMETER_DECL	3981:43	3981:50	3	uint8 * out
TYPE	3981:43	3981:49	4	uint8 *
TYPE_NAME	3981:43	3981:43	5	uint8
LEAF_NODE	3981:43	3981:43	6	uint8
POINTER	3981:49	3981:49	5	*
LEAF_NODE	3981:49	3981:49	6	*
NAME	3981:50	3981:50	4	out
LEAF_NODE	3981:50	3981:50	5	out
LEAF_NODE	3981:53	3981:53	3	,
PARAMETER_DECL	3981:55	3981:62	3	uint32 cols
TYPE	3981:55	3981:55	4	uint32
TYPE_NAME	3981:55	3981:55	5	uint32
LEAF_NODE	3981:55	3981:55	6	uint32
NAME	3981:62	3981:62	4	cols
LEAF_NODE	3981:62	3981:62	5	cols
LEAF_NODE	3981:66	3981:66	3	,
PARAMETER_DECL	3982:30	3982:37	3	uint32 rows
TYPE	3982:30	3982:30	4	uint32
TYPE_NAME	3982:30	3982:30	5	uint32
LEAF_NODE	3982:30	3982:30	6	uint32
NAME	3982:37	3982:37	4	rows
LEAF_NODE	3982:37	3982:37	5	rows
LEAF_NODE	3982:41	3982:41	3	,
PARAMETER_DECL	3982:43	3982:50	3	uint16 spp
TYPE	3982:43	3982:43	4	uint16
TYPE_NAME	3982:43	3982:43	5	uint16
LEAF_NODE	3982:43	3982:43	6	uint16
NAME	3982:50	3982:50	4	spp
LEAF_NODE	3982:50	3982:50	5	spp
LEAF_NODE	3982:53	3982:53	3	,
PARAMETER_DECL	3982:55	3982:62	3	uint16 bps
TYPE	3982:55	3982:55	4	uint16
TYPE_NAME	3982:55	3982:55	5	uint16
LEAF_NODE	3982:55	3982:55	6	uint16
NAME	3982:62	3982:62	4	bps
LEAF_NODE	3982:62	3982:62	5	bps
LEAF_NODE	3982:65	3982:65	3	,
PARAMETER_DECL	3983:23	3983:29	3	FILE * dumpfile
TYPE	3983:23	3983:28	4	FILE *
TYPE_NAME	3983:23	3983:23	5	FILE
LEAF_NODE	3983:23	3983:23	6	FILE
POINTER	3983:28	3983:28	5	*
LEAF_NODE	3983:28	3983:28	6	*
NAME	3983:29	3983:29	4	dumpfile
LEAF_NODE	3983:29	3983:29	5	dumpfile
LEAF_NODE	3983:37	3983:37	3	,
PARAMETER_DECL	3983:39	3983:43	3	int format
TYPE	3983:39	3983:39	4	int
TYPE_NAME	3983:39	3983:39	5	int
LEAF_NODE	3983:39	3983:39	6	int
NAME	3983:43	3983:43	4	format
LEAF_NODE	3983:43	3983:43	5	format
LEAF_NODE	3983:49	3983:49	3	,
PARAMETER_DECL	3983:51	3983:55	3	int level
TYPE	3983:51	3983:51	4	int
TYPE_NAME	3983:51	3983:51	5	int
LEAF_NODE	3983:51	3983:51	6	int
NAME	3983:55	3983:55	4	level
LEAF_NODE	3983:55	3983:55	5	level
LEAF_NODE	3983:60	3983:60	3	)
LEAF_NODE	3984:2	3984:2	2	{
STATEMENTS	3985:2	4101:2	2	
SIMPLE_DECL	3985:2	3985:51	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	3985:2	3985:9	4	int ready_bits ; ready_bits = 0
TYPE	3985:2	3985:2	5	int
TYPE_NAME	3985:2	3985:2	6	int
LEAF_NODE	3985:2	3985:2	7	int
NAME	3985:9	3985:9	5	ready_bits
LEAF_NODE	3985:9	3985:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	3985:9	3985:9	5	ready_bits = 0
ASSIGN	3985:9	3985:22	6	ready_bits = 0
LVAL	3985:9	3985:9	7	ready_bits
NAME	3985:9	3985:9	8	ready_bits
LEAF_NODE	3985:9	3985:9	9	ready_bits
ASSIGN_OP	3985:20	3985:20	7	=
LEAF_NODE	3985:20	3985:20	8	=
RVAL	3985:22	3985:22	7	0
FIELD	3985:22	3985:22	8	0
LEAF_NODE	3985:22	3985:22	9	0
LEAF_NODE	3985:51	3985:51	4	;
SIMPLE_DECL	3986:2	3986:33	3	uint32 src_rowsize , uint32 dst_rowsize ;
INIT_DECL_LIST	3986:2	3986:2	4	uint32 src_rowsize , uint32 dst_rowsize
VAR_DECL	3986:2	3986:9	5	uint32 src_rowsize
TYPE	3986:2	3986:2	6	uint32
TYPE_NAME	3986:2	3986:2	7	uint32
LEAF_NODE	3986:2	3986:2	8	uint32
NAME	3986:9	3986:9	6	src_rowsize
LEAF_NODE	3986:9	3986:9	7	src_rowsize
LEAF_NODE	3986:20	3986:20	5	,
VAR_DECL	3986:2	3986:22	5	uint32 dst_rowsize
TYPE	3986:2	3986:2	6	uint32
TYPE_NAME	3986:2	3986:2	7	uint32
LEAF_NODE	3986:2	3986:2	8	uint32
NAME	3986:22	3986:22	6	dst_rowsize
LEAF_NODE	3986:22	3986:22	7	dst_rowsize
LEAF_NODE	3986:33	3986:33	4	;
SIMPLE_DECL	3987:2	3987:31	3	uint32 bit_offset , uint32 src_offset ;
INIT_DECL_LIST	3987:2	3987:2	4	uint32 bit_offset , uint32 src_offset
VAR_DECL	3987:2	3987:9	5	uint32 bit_offset
TYPE	3987:2	3987:2	6	uint32
TYPE_NAME	3987:2	3987:2	7	uint32
LEAF_NODE	3987:2	3987:2	8	uint32
NAME	3987:9	3987:9	6	bit_offset
LEAF_NODE	3987:9	3987:9	7	bit_offset
LEAF_NODE	3987:19	3987:19	5	,
VAR_DECL	3987:2	3987:21	5	uint32 src_offset
TYPE	3987:2	3987:2	6	uint32
TYPE_NAME	3987:2	3987:2	7	uint32
LEAF_NODE	3987:2	3987:2	8	uint32
NAME	3987:21	3987:21	6	src_offset
LEAF_NODE	3987:21	3987:21	7	src_offset
LEAF_NODE	3987:31	3987:31	4	;
SIMPLE_DECL	3988:2	3988:44	3	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	3988:2	3988:2	4	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3988:2	3988:9	5	uint32 row
TYPE	3988:2	3988:2	6	uint32
TYPE_NAME	3988:2	3988:2	7	uint32
LEAF_NODE	3988:2	3988:2	8	uint32
NAME	3988:9	3988:9	6	row
LEAF_NODE	3988:9	3988:9	7	row
LEAF_NODE	3988:12	3988:12	5	,
INIT_DECL_LIST	3988:2	3988:2	5	uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3988:2	3988:14	6	uint32 col
TYPE	3988:2	3988:2	7	uint32
TYPE_NAME	3988:2	3988:2	8	uint32
LEAF_NODE	3988:2	3988:2	9	uint32
NAME	3988:14	3988:14	7	col
LEAF_NODE	3988:14	3988:14	8	col
LEAF_NODE	3988:17	3988:17	6	,
INIT_DECL_LIST	3988:2	3988:2	6	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	3988:2	3988:19	7	uint32 src_byte ; src_byte = 0
TYPE	3988:2	3988:2	8	uint32
TYPE_NAME	3988:2	3988:2	9	uint32
LEAF_NODE	3988:2	3988:2	10	uint32
NAME	3988:19	3988:19	8	src_byte
LEAF_NODE	3988:19	3988:19	9	src_byte
LEAF_NODE	0:0	0:0	8	;
INIT	3988:19	3988:19	8	src_byte = 0
ASSIGN	3988:19	3988:30	9	src_byte = 0
LVAL	3988:19	3988:19	10	src_byte
NAME	3988:19	3988:19	11	src_byte
LEAF_NODE	3988:19	3988:19	12	src_byte
ASSIGN_OP	3988:28	3988:28	10	=
LEAF_NODE	3988:28	3988:28	11	=
RVAL	3988:30	3988:30	10	0
FIELD	3988:30	3988:30	11	0
LEAF_NODE	3988:30	3988:30	12	0
LEAF_NODE	3988:31	3988:31	7	,
VAR_DECL	3988:2	3988:33	7	uint32 src_bit ; src_bit = 0
TYPE	3988:2	3988:2	8	uint32
TYPE_NAME	3988:2	3988:2	9	uint32
LEAF_NODE	3988:2	3988:2	10	uint32
NAME	3988:33	3988:33	8	src_bit
LEAF_NODE	3988:33	3988:33	9	src_bit
LEAF_NODE	0:0	0:0	8	;
INIT	3988:33	3988:33	8	src_bit = 0
ASSIGN	3988:33	3988:43	9	src_bit = 0
LVAL	3988:33	3988:33	10	src_bit
NAME	3988:33	3988:33	11	src_bit
LEAF_NODE	3988:33	3988:33	12	src_bit
ASSIGN_OP	3988:41	3988:41	10	=
LEAF_NODE	3988:41	3988:41	11	=
RVAL	3988:43	3988:43	10	0
FIELD	3988:43	3988:43	11	0
LEAF_NODE	3988:43	3988:43	12	0
LEAF_NODE	3988:44	3988:44	4	;
SIMPLE_DECL	3989:2	3989:36	3	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	3989:2	3989:2	4	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0
VAR_DECL	3989:2	3989:9	5	uint32 maskbits ; maskbits = 0
TYPE	3989:2	3989:2	6	uint32
TYPE_NAME	3989:2	3989:2	7	uint32
LEAF_NODE	3989:2	3989:2	8	uint32
NAME	3989:9	3989:9	6	maskbits
LEAF_NODE	3989:9	3989:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	3989:9	3989:9	6	maskbits = 0
ASSIGN	3989:9	3989:20	7	maskbits = 0
LVAL	3989:9	3989:9	8	maskbits
NAME	3989:9	3989:9	9	maskbits
LEAF_NODE	3989:9	3989:9	10	maskbits
ASSIGN_OP	3989:18	3989:18	8	=
LEAF_NODE	3989:18	3989:18	9	=
RVAL	3989:20	3989:20	8	0
FIELD	3989:20	3989:20	9	0
LEAF_NODE	3989:20	3989:20	10	0
LEAF_NODE	3989:21	3989:21	5	,
VAR_DECL	3989:2	3989:23	5	uint32 matchbits ; matchbits = 0
TYPE	3989:2	3989:2	6	uint32
TYPE_NAME	3989:2	3989:2	7	uint32
LEAF_NODE	3989:2	3989:2	8	uint32
NAME	3989:23	3989:23	6	matchbits
LEAF_NODE	3989:23	3989:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	3989:23	3989:23	6	matchbits = 0
ASSIGN	3989:23	3989:35	7	matchbits = 0
LVAL	3989:23	3989:23	8	matchbits
NAME	3989:23	3989:23	9	matchbits
LEAF_NODE	3989:23	3989:23	10	matchbits
ASSIGN_OP	3989:33	3989:33	8	=
LEAF_NODE	3989:33	3989:33	9	=
RVAL	3989:35	3989:35	8	0
FIELD	3989:35	3989:35	9	0
LEAF_NODE	3989:35	3989:35	10	0
LEAF_NODE	3989:36	3989:36	4	;
SIMPLE_DECL	3990:2	3990:29	3	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	3990:2	3990:2	4	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0
VAR_DECL	3990:2	3990:9	5	uint32 buff1 ; buff1 = 0
TYPE	3990:2	3990:2	6	uint32
TYPE_NAME	3990:2	3990:2	7	uint32
LEAF_NODE	3990:2	3990:2	8	uint32
NAME	3990:9	3990:9	6	buff1
LEAF_NODE	3990:9	3990:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	3990:9	3990:9	6	buff1 = 0
ASSIGN	3990:9	3990:17	7	buff1 = 0
LVAL	3990:9	3990:9	8	buff1
NAME	3990:9	3990:9	9	buff1
LEAF_NODE	3990:9	3990:9	10	buff1
ASSIGN_OP	3990:15	3990:15	8	=
LEAF_NODE	3990:15	3990:15	9	=
RVAL	3990:17	3990:17	8	0
FIELD	3990:17	3990:17	9	0
LEAF_NODE	3990:17	3990:17	10	0
LEAF_NODE	3990:18	3990:18	5	,
VAR_DECL	3990:2	3990:20	5	uint32 buff2 ; buff2 = 0
TYPE	3990:2	3990:2	6	uint32
TYPE_NAME	3990:2	3990:2	7	uint32
LEAF_NODE	3990:2	3990:2	8	uint32
NAME	3990:20	3990:20	6	buff2
LEAF_NODE	3990:20	3990:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	3990:20	3990:20	6	buff2 = 0
ASSIGN	3990:20	3990:28	7	buff2 = 0
LVAL	3990:20	3990:20	8	buff2
NAME	3990:20	3990:20	9	buff2
LEAF_NODE	3990:20	3990:20	10	buff2
ASSIGN_OP	3990:26	3990:26	8	=
LEAF_NODE	3990:26	3990:26	9	=
RVAL	3990:28	3990:28	8	0
FIELD	3990:28	3990:28	9	0
LEAF_NODE	3990:28	3990:28	10	0
LEAF_NODE	3990:29	3990:29	4	;
SIMPLE_DECL	3991:2	3991:37	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 ;
INIT_DECL_LIST	3991:2	3991:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0
VAR_DECL	3991:2	3991:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	3991:2	3991:2	6	uint8
TYPE_NAME	3991:2	3991:2	7	uint8
LEAF_NODE	3991:2	3991:2	8	uint8
NAME	3991:9	3991:9	6	bytebuff1
LEAF_NODE	3991:9	3991:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	3991:9	3991:9	6	bytebuff1 = 0
ASSIGN	3991:9	3991:21	7	bytebuff1 = 0
LVAL	3991:9	3991:9	8	bytebuff1
NAME	3991:9	3991:9	9	bytebuff1
LEAF_NODE	3991:9	3991:9	10	bytebuff1
ASSIGN_OP	3991:19	3991:19	8	=
LEAF_NODE	3991:19	3991:19	9	=
RVAL	3991:21	3991:21	8	0
FIELD	3991:21	3991:21	9	0
LEAF_NODE	3991:21	3991:21	10	0
LEAF_NODE	3991:22	3991:22	5	,
VAR_DECL	3991:2	3991:24	5	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	3991:2	3991:2	6	uint8
TYPE_NAME	3991:2	3991:2	7	uint8
LEAF_NODE	3991:2	3991:2	8	uint8
NAME	3991:24	3991:24	6	bytebuff2
LEAF_NODE	3991:24	3991:24	7	bytebuff2
LEAF_NODE	0:0	0:0	6	;
INIT	3991:24	3991:24	6	bytebuff2 = 0
ASSIGN	3991:24	3991:36	7	bytebuff2 = 0
LVAL	3991:24	3991:24	8	bytebuff2
NAME	3991:24	3991:24	9	bytebuff2
LEAF_NODE	3991:24	3991:24	10	bytebuff2
ASSIGN_OP	3991:34	3991:34	8	=
LEAF_NODE	3991:34	3991:34	9	=
RVAL	3991:36	3991:36	8	0
FIELD	3991:36	3991:36	9	0
LEAF_NODE	3991:36	3991:36	10	0
LEAF_NODE	3991:37	3991:37	4	;
SIMPLE_DECL	3992:2	3992:13	3	tsample_t s ;
VAR_DECL	3992:2	3992:12	4	tsample_t s
TYPE	3992:2	3992:2	5	tsample_t
TYPE_NAME	3992:2	3992:2	6	tsample_t
LEAF_NODE	3992:2	3992:2	7	tsample_t
NAME	3992:12	3992:12	5	s
LEAF_NODE	3992:12	3992:12	6	s
LEAF_NODE	3992:13	3992:13	4	;
SIMPLE_DECL	3993:2	3993:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	3993:2	3993:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	3993:2	3993:16	5	unsigned char *
TYPE_NAME	3993:2	3993:11	6	unsigned char
LEAF_NODE	3993:2	3993:2	7	unsigned
LEAF_NODE	3993:11	3993:11	7	char
POINTER	3993:16	3993:16	6	*
LEAF_NODE	3993:16	3993:16	7	*
NAME	3993:17	3993:17	5	src
LEAF_NODE	3993:17	3993:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	3993:17	3993:17	5	src = in [ 0 ]
ASSIGN	3993:17	3993:23	6	src = in [ 0 ]
LVAL	3993:17	3993:17	7	src
NAME	3993:17	3993:17	8	src
LEAF_NODE	3993:17	3993:17	9	src
ASSIGN_OP	3993:21	3993:21	7	=
LEAF_NODE	3993:21	3993:21	8	=
RVAL	3993:23	3993:23	7	in [ 0 ]
FIELD	3993:23	3993:27	8	in [ 0 ]
LEAF_NODE	3993:23	3993:23	9	in
LEAF_NODE	3993:25	3993:25	9	[
EXPR	3993:26	3993:26	9	0
FIELD	3993:26	3993:26	10	0
LEAF_NODE	3993:26	3993:26	11	0
LEAF_NODE	3993:27	3993:27	9	]
LEAF_NODE	3993:28	3993:28	4	;
SIMPLE_DECL	3994:2	3994:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	3994:2	3994:17	4	unsigned char * dst ; dst = out
TYPE	3994:2	3994:16	5	unsigned char *
TYPE_NAME	3994:2	3994:11	6	unsigned char
LEAF_NODE	3994:2	3994:2	7	unsigned
LEAF_NODE	3994:11	3994:11	7	char
POINTER	3994:16	3994:16	6	*
LEAF_NODE	3994:16	3994:16	7	*
NAME	3994:17	3994:17	5	dst
LEAF_NODE	3994:17	3994:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	3994:17	3994:17	5	dst = out
ASSIGN	3994:17	3994:23	6	dst = out
LVAL	3994:17	3994:17	7	dst
NAME	3994:17	3994:17	8	dst
LEAF_NODE	3994:17	3994:17	9	dst
ASSIGN_OP	3994:21	3994:21	7	=
LEAF_NODE	3994:21	3994:21	8	=
RVAL	3994:23	3994:23	7	out
FIELD	3994:23	3994:23	8	out
LEAF_NODE	3994:23	3994:23	9	out
LEAF_NODE	3994:26	3994:26	4	;
SIMPLE_DECL	3995:2	3995:26	3	char [ 8 ] action ;
VAR_DECL	3995:2	3995:17	4	char [ 8 ] action
TYPE	3995:2	3995:23	5	char [ 8 ]
TYPE_NAME	3995:2	3995:2	6	char
LEAF_NODE	3995:2	3995:2	7	char
TYPE_SUFFIX	3995:23	3995:25	6	[ 8 ]
LEAF_NODE	3995:23	3995:23	7	[
FIELD	3995:24	3995:24	7	8
LEAF_NODE	3995:24	3995:24	8	8
LEAF_NODE	3995:25	3995:25	7	]
NAME	3995:17	3995:17	5	action
LEAF_NODE	3995:17	3995:17	6	action
LEAF_NODE	3995:26	3995:26	4	;
SELECTION	3997:2	3998:4	3	
KEYWORD	3997:2	3997:2	4	if
LEAF_NODE	3997:2	3997:2	5	if
LEAF_NODE	3997:5	3997:5	4	(
CONDITION	3997:6	3997:6	4	( src == NULL ) || ( dst == NULL )
EXPR	3997:6	3997:6	5	( src == NULL ) || ( dst == NULL )
OR	3997:6	3997:23	6	( src == NULL ) || ( dst == NULL )
EXPR	3997:6	3997:18	7	( src == NULL )
LEAF_NODE	3997:6	3997:6	8	(
FIELD	3997:7	3997:7	8	src
LEAF_NODE	3997:7	3997:7	9	src
EQ_OPERATOR	3997:11	3997:11	8	==
LEAF_NODE	3997:11	3997:11	9	==
FIELD	3997:14	3997:14	8	NULL
LEAF_NODE	3997:14	3997:14	9	NULL
LEAF_NODE	3997:18	3997:18	8	)
LEAF_NODE	3997:20	3997:20	7	||
EXPR	3997:23	3997:35	7	( dst == NULL )
LEAF_NODE	3997:23	3997:23	8	(
FIELD	3997:24	3997:24	8	dst
LEAF_NODE	3997:24	3997:24	9	dst
EQ_OPERATOR	3997:28	3997:28	8	==
LEAF_NODE	3997:28	3997:28	9	==
FIELD	3997:31	3997:31	8	NULL
LEAF_NODE	3997:31	3997:31	9	NULL
LEAF_NODE	3997:35	3997:35	8	)
LEAF_NODE	3997:36	3997:36	4	)
STATEMENTS	3998:4	4001:4	4	
LEAF_NODE	3998:4	3998:4	5	{
STATEMENTS	3999:4	4000:4	5	
EXPR_STATEMENT	3999:4	3999:78	6	TIFFError ( "combineSeparateSamples24bits" , "Invalid input or output buffer" ) ;
EXPR	3999:4	3999:4	7	TIFFError ( "combineSeparateSamples24bits" , "Invalid input or output buffer" )
FUNCTION_CALL	3999:4	3999:77	8	TIFFError ( "combineSeparateSamples24bits" , "Invalid input or output buffer" )
CALLEE	3999:4	3999:4	9	TIFFError
LEAF_NODE	3999:4	3999:4	10	TIFFError
LEAF_NODE	3999:13	3999:13	9	(
ARGUMENT	3999:14	3999:14	9	"combineSeparateSamples24bits"
FIELD	3999:14	3999:14	10	"combineSeparateSamples24bits"
LEAF_NODE	3999:14	3999:14	11	"combineSeparateSamples24bits"
LEAF_NODE	3999:44	3999:44	9	,
ARGUMENT	3999:45	3999:45	9	"Invalid input or output buffer"
FIELD	3999:45	3999:45	10	"Invalid input or output buffer"
LEAF_NODE	3999:45	3999:45	11	"Invalid input or output buffer"
LEAF_NODE	3999:77	3999:77	9	)
LEAF_NODE	3999:78	3999:78	7	;
JUMP_STATEMENT	4000:4	4000:14	6	return ( 1 ) ;
KEYWORD	4000:4	4000:4	7	return
LEAF_NODE	4000:4	4000:4	8	return
DESTINATION	4000:11	4000:11	7	( 1 )
EXPR	4000:11	4000:13	8	( 1 )
LEAF_NODE	4000:11	4000:11	9	(
FIELD	4000:12	4000:12	9	1
LEAF_NODE	4000:12	4000:12	10	1
LEAF_NODE	4000:13	4000:13	9	)
LEAF_NODE	4000:14	4000:14	7	;
LEAF_NODE	4001:4	4001:4	5	}
EXPR_STATEMENT	4004:2	4004:38	3	src_rowsize = ( ( bps * cols ) + 7 ) / 8 ;
EXPR	4004:2	4004:2	4	src_rowsize = ( ( bps * cols ) + 7 ) / 8
ASSIGN	4004:2	4004:16	5	src_rowsize = ( ( bps * cols ) + 7 ) / 8
LVAL	4004:2	4004:2	6	src_rowsize
FIELD	4004:2	4004:2	7	src_rowsize
LEAF_NODE	4004:2	4004:2	8	src_rowsize
ASSIGN_OP	4004:14	4004:14	6	=
LEAF_NODE	4004:14	4004:14	7	=
RVAL	4004:16	4004:37	6	( ( bps * cols ) + 7 ) / 8
LEAF_NODE	4004:16	4004:16	7	(
LEAF_NODE	4004:17	4004:17	7	(
FIELD	4004:18	4004:18	7	bps
LEAF_NODE	4004:18	4004:18	8	bps
LEAF_NODE	4004:22	4004:22	7	*
FIELD	4004:24	4004:24	7	cols
LEAF_NODE	4004:24	4004:24	8	cols
LEAF_NODE	4004:28	4004:28	7	)
LEAF_NODE	4004:30	4004:30	7	+
FIELD	4004:32	4004:32	7	7
LEAF_NODE	4004:32	4004:32	8	7
LEAF_NODE	4004:33	4004:33	7	)
LEAF_NODE	4004:35	4004:35	7	/
FIELD	4004:37	4004:37	7	8
LEAF_NODE	4004:37	4004:37	8	8
LEAF_NODE	4004:38	4004:38	4	;
LEAF_NODE	4005:2	4005:2	3	dst_rowsize
LEAF_NODE	4005:14	4005:14	3	=
LEAF_NODE	4005:16	4005:16	3	(
LEAF_NODE	4005:17	4005:17	3	(
LEAF_NODE	4005:18	4005:18	3	bps
LEAF_NODE	4005:22	4005:22	3	*
LEAF_NODE	4005:24	4005:24	3	cols
LEAF_NODE	4005:29	4005:29	3	*
LEAF_NODE	4005:31	4005:31	3	spp
LEAF_NODE	4005:34	4005:34	3	)
LEAF_NODE	4005:36	4005:36	3	+
LEAF_NODE	4005:38	4005:38	3	7
LEAF_NODE	4005:39	4005:39	3	)
LEAF_NODE	4005:41	4005:41	3	/
EXPR_STATEMENT	4005:43	4005:44	3	8 ;
EXPR	4005:43	4005:43	4	8
FIELD	4005:43	4005:43	5	8
LEAF_NODE	4005:43	4005:43	6	8
LEAF_NODE	4005:44	4005:44	4	;
EXPR_STATEMENT	4006:2	4006:39	3	maskbits = ( uint32 ) - 1 >> ( 32 - bps ) ;
EXPR	4006:2	4006:2	4	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
ASSIGN	4006:2	4006:14	5	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
LVAL	4006:2	4006:2	6	maskbits
FIELD	4006:2	4006:2	7	maskbits
LEAF_NODE	4006:2	4006:2	8	maskbits
ASSIGN_OP	4006:11	4006:11	6	=
LEAF_NODE	4006:11	4006:11	7	=
RVAL	4006:14	4006:38	6	( uint32 ) - 1 >> ( 32 - bps )
LEAF_NODE	4006:14	4006:14	7	(
TYPE_NAME	4006:15	4006:15	7	uint32
LEAF_NODE	4006:15	4006:15	8	uint32
LEAF_NODE	4006:21	4006:21	7	)
UNARY_EXPR	4006:22	4006:23	7	- 1
UNARY_OPERATOR	4006:22	4006:22	8	-
LEAF_NODE	4006:22	4006:22	9	-
FIELD	4006:23	4006:23	8	1
LEAF_NODE	4006:23	4006:23	9	1
LEAF_NODE	4006:25	4006:25	7	>>
LEAF_NODE	4006:28	4006:28	7	(
FIELD	4006:30	4006:30	7	32
LEAF_NODE	4006:30	4006:30	8	32
LEAF_NODE	4006:33	4006:33	7	-
FIELD	4006:35	4006:35	7	bps
LEAF_NODE	4006:35	4006:35	8	bps
LEAF_NODE	4006:38	4006:38	7	)
LEAF_NODE	4006:39	4006:39	4	;
ITERATION	4008:2	4009:4	3	
KEYWORD	4008:2	4008:2	4	for
LEAF_NODE	4008:2	4008:2	5	for
LEAF_NODE	4008:6	4008:6	4	(
FOR_INIT	4008:7	4008:14	4	row = 0 ;
EXPR	4008:7	4008:7	5	row = 0
ASSIGN	4008:7	4008:13	6	row = 0
LVAL	4008:7	4008:7	7	row
FIELD	4008:7	4008:7	8	row
LEAF_NODE	4008:7	4008:7	9	row
ASSIGN_OP	4008:11	4008:11	7	=
LEAF_NODE	4008:11	4008:11	8	=
RVAL	4008:13	4008:13	7	0
FIELD	4008:13	4008:13	8	0
LEAF_NODE	4008:13	4008:13	9	0
LEAF_NODE	4008:14	4008:14	5	;
CONDITION	4008:16	4008:16	4	row < rows
EXPR	4008:16	4008:22	5	row < rows
FIELD	4008:16	4008:16	6	row
LEAF_NODE	4008:16	4008:16	7	row
REL_OPERATOR	4008:20	4008:20	6	<
LEAF_NODE	4008:20	4008:20	7	<
FIELD	4008:22	4008:22	6	rows
LEAF_NODE	4008:22	4008:22	7	rows
LEAF_NODE	4008:26	4008:26	4	;
FOR_EXPR	4008:28	4008:28	4	row ++
EXPR	4008:28	4008:28	5	row ++
FIELD	4008:28	4008:31	6	row ++
LEAF_NODE	4008:28	4008:28	7	row
LEAF_NODE	4008:31	4008:31	7	++
LEAF_NODE	4008:33	4008:33	4	)
STATEMENTS	4009:4	4099:4	4	
LEAF_NODE	4009:4	4009:4	5	{
STATEMENTS	4010:4	4094:4	5	
EXPR_STATEMENT	4010:4	4010:18	6	ready_bits = 0 ;
EXPR	4010:4	4010:4	7	ready_bits = 0
ASSIGN	4010:4	4010:17	8	ready_bits = 0
LVAL	4010:4	4010:4	9	ready_bits
FIELD	4010:4	4010:4	10	ready_bits
LEAF_NODE	4010:4	4010:4	11	ready_bits
ASSIGN_OP	4010:15	4010:15	9	=
LEAF_NODE	4010:15	4010:15	10	=
RVAL	4010:17	4010:17	9	0
FIELD	4010:17	4010:17	10	0
LEAF_NODE	4010:17	4010:17	11	0
LEAF_NODE	4010:18	4010:18	7	;
EXPR_STATEMENT	4011:4	4011:21	6	buff1 = buff2 = 0 ;
EXPR	4011:4	4011:4	7	buff1 = buff2 = 0
ASSIGN	4011:4	4011:12	8	buff1 = buff2 = 0
LVAL	4011:4	4011:4	9	buff1
FIELD	4011:4	4011:4	10	buff1
LEAF_NODE	4011:4	4011:4	11	buff1
ASSIGN_OP	4011:10	4011:10	9	=
LEAF_NODE	4011:10	4011:10	10	=
RVAL	4011:12	4011:12	9	buff2 = 0
ASSIGN	4011:12	4011:20	10	buff2 = 0
LVAL	4011:12	4011:12	11	buff2
FIELD	4011:12	4011:12	12	buff2
LEAF_NODE	4011:12	4011:12	13	buff2
ASSIGN_OP	4011:18	4011:18	11	=
LEAF_NODE	4011:18	4011:18	12	=
RVAL	4011:20	4011:20	11	0
FIELD	4011:20	4011:20	12	0
LEAF_NODE	4011:20	4011:20	13	0
LEAF_NODE	4011:21	4011:21	7	;
EXPR_STATEMENT	4012:4	4012:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	4012:4	4012:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	4012:4	4012:10	8	dst = out + ( row * dst_rowsize )
LVAL	4012:4	4012:4	9	dst
FIELD	4012:4	4012:4	10	dst
LEAF_NODE	4012:4	4012:4	11	dst
ASSIGN_OP	4012:8	4012:8	9	=
LEAF_NODE	4012:8	4012:8	10	=
RVAL	4012:10	4012:34	9	out + ( row * dst_rowsize )
FIELD	4012:10	4012:10	10	out
LEAF_NODE	4012:10	4012:10	11	out
LEAF_NODE	4012:14	4012:14	10	+
LEAF_NODE	4012:16	4012:16	10	(
FIELD	4012:17	4012:17	10	row
LEAF_NODE	4012:17	4012:17	11	row
LEAF_NODE	4012:21	4012:21	10	*
FIELD	4012:23	4012:23	10	dst_rowsize
LEAF_NODE	4012:23	4012:23	11	dst_rowsize
LEAF_NODE	4012:34	4012:34	10	)
LEAF_NODE	4012:35	4012:35	7	;
EXPR_STATEMENT	4013:4	4013:34	6	src_offset = row * src_rowsize ;
EXPR	4013:4	4013:4	7	src_offset = row * src_rowsize
ASSIGN	4013:4	4013:17	8	src_offset = row * src_rowsize
LVAL	4013:4	4013:4	9	src_offset
FIELD	4013:4	4013:4	10	src_offset
LEAF_NODE	4013:4	4013:4	11	src_offset
ASSIGN_OP	4013:15	4013:15	9	=
LEAF_NODE	4013:15	4013:15	10	=
RVAL	4013:17	4013:23	9	row * src_rowsize
FIELD	4013:17	4013:17	10	row
LEAF_NODE	4013:17	4013:17	11	row
LEAF_NODE	4013:21	4013:21	10	*
FIELD	4013:23	4013:23	10	src_rowsize
LEAF_NODE	4013:23	4013:23	11	src_rowsize
LEAF_NODE	4013:34	4013:34	7	;
ITERATION	4014:4	4015:6	6	
KEYWORD	4014:4	4014:4	7	for
LEAF_NODE	4014:4	4014:4	8	for
LEAF_NODE	4014:8	4014:8	7	(
FOR_INIT	4014:9	4014:16	7	col = 0 ;
EXPR	4014:9	4014:9	8	col = 0
ASSIGN	4014:9	4014:15	9	col = 0
LVAL	4014:9	4014:9	10	col
FIELD	4014:9	4014:9	11	col
LEAF_NODE	4014:9	4014:9	12	col
ASSIGN_OP	4014:13	4014:13	10	=
LEAF_NODE	4014:13	4014:13	11	=
RVAL	4014:15	4014:15	10	0
FIELD	4014:15	4014:15	11	0
LEAF_NODE	4014:15	4014:15	12	0
LEAF_NODE	4014:16	4014:16	8	;
CONDITION	4014:18	4014:18	7	col < cols
EXPR	4014:18	4014:24	8	col < cols
FIELD	4014:18	4014:18	9	col
LEAF_NODE	4014:18	4014:18	10	col
REL_OPERATOR	4014:22	4014:22	9	<
LEAF_NODE	4014:22	4014:22	10	<
FIELD	4014:24	4014:24	9	cols
LEAF_NODE	4014:24	4014:24	10	cols
LEAF_NODE	4014:28	4014:28	7	;
FOR_EXPR	4014:30	4014:30	7	col ++
EXPR	4014:30	4014:30	8	col ++
FIELD	4014:30	4014:33	9	col ++
LEAF_NODE	4014:30	4014:30	10	col
LEAF_NODE	4014:33	4014:33	10	++
LEAF_NODE	4014:35	4014:35	7	)
STATEMENTS	4015:6	4066:6	7	
LEAF_NODE	4015:6	4015:6	8	{
STATEMENTS	4017:6	4022:6	8	
EXPR_STATEMENT	4017:6	4017:28	9	bit_offset = col * bps ;
EXPR	4017:6	4017:6	10	bit_offset = col * bps
ASSIGN	4017:6	4017:19	11	bit_offset = col * bps
LVAL	4017:6	4017:6	12	bit_offset
FIELD	4017:6	4017:6	13	bit_offset
LEAF_NODE	4017:6	4017:6	14	bit_offset
ASSIGN_OP	4017:17	4017:17	12	=
LEAF_NODE	4017:17	4017:17	13	=
RVAL	4017:19	4017:25	12	col * bps
FIELD	4017:19	4017:19	13	col
LEAF_NODE	4017:19	4017:19	14	col
LEAF_NODE	4017:23	4017:23	13	*
FIELD	4017:25	4017:25	13	bps
LEAF_NODE	4017:25	4017:25	14	bps
LEAF_NODE	4017:28	4017:28	10	;
EXPR_STATEMENT	4018:6	4018:31	9	src_byte = bit_offset / 8 ;
EXPR	4018:6	4018:6	10	src_byte = bit_offset / 8
ASSIGN	4018:6	4018:17	11	src_byte = bit_offset / 8
LVAL	4018:6	4018:6	12	src_byte
FIELD	4018:6	4018:6	13	src_byte
LEAF_NODE	4018:6	4018:6	14	src_byte
ASSIGN_OP	4018:15	4018:15	12	=
LEAF_NODE	4018:15	4018:15	13	=
RVAL	4018:17	4018:30	12	bit_offset / 8
FIELD	4018:17	4018:17	13	bit_offset
LEAF_NODE	4018:17	4018:17	14	bit_offset
LEAF_NODE	4018:28	4018:28	13	/
FIELD	4018:30	4018:30	13	8
LEAF_NODE	4018:30	4018:30	14	8
LEAF_NODE	4018:31	4018:31	10	;
EXPR_STATEMENT	4019:6	4019:31	9	src_bit = bit_offset % 8 ;
EXPR	4019:6	4019:6	10	src_bit = bit_offset % 8
ASSIGN	4019:6	4019:17	11	src_bit = bit_offset % 8
LVAL	4019:6	4019:6	12	src_bit
FIELD	4019:6	4019:6	13	src_bit
LEAF_NODE	4019:6	4019:6	14	src_bit
ASSIGN_OP	4019:15	4019:15	12	=
LEAF_NODE	4019:15	4019:15	13	=
RVAL	4019:17	4019:30	12	bit_offset % 8
FIELD	4019:17	4019:17	13	bit_offset
LEAF_NODE	4019:17	4019:17	14	bit_offset
LEAF_NODE	4019:28	4019:28	13	%
FIELD	4019:30	4019:30	13	8
LEAF_NODE	4019:30	4019:30	14	8
LEAF_NODE	4019:31	4019:31	10	;
EXPR_STATEMENT	4021:6	4021:50	9	matchbits = maskbits << ( 32 - src_bit - bps ) ;
EXPR	4021:6	4021:6	10	matchbits = maskbits << ( 32 - src_bit - bps )
ASSIGN	4021:6	4021:18	11	matchbits = maskbits << ( 32 - src_bit - bps )
LVAL	4021:6	4021:6	12	matchbits
FIELD	4021:6	4021:6	13	matchbits
LEAF_NODE	4021:6	4021:6	14	matchbits
ASSIGN_OP	4021:16	4021:16	12	=
LEAF_NODE	4021:16	4021:16	13	=
RVAL	4021:18	4021:49	12	maskbits << ( 32 - src_bit - bps )
FIELD	4021:18	4021:18	13	maskbits
LEAF_NODE	4021:18	4021:18	14	maskbits
LEAF_NODE	4021:27	4021:27	13	<<
LEAF_NODE	4021:30	4021:30	13	(
FIELD	4021:31	4021:31	13	32
LEAF_NODE	4021:31	4021:31	14	32
LEAF_NODE	4021:34	4021:34	13	-
FIELD	4021:36	4021:36	13	src_bit
LEAF_NODE	4021:36	4021:36	14	src_bit
LEAF_NODE	4021:44	4021:44	13	-
FIELD	4021:46	4021:46	13	bps
LEAF_NODE	4021:46	4021:46	14	bps
LEAF_NODE	4021:49	4021:49	13	)
LEAF_NODE	4021:50	4021:50	10	;
ITERATION	4022:6	4023:8	9	
KEYWORD	4022:6	4022:6	10	for
LEAF_NODE	4022:6	4022:6	11	for
LEAF_NODE	4022:10	4022:10	10	(
FOR_INIT	4022:11	4022:16	10	s = 0 ;
EXPR	4022:11	4022:11	11	s = 0
ASSIGN	4022:11	4022:15	12	s = 0
LVAL	4022:11	4022:11	13	s
FIELD	4022:11	4022:11	14	s
LEAF_NODE	4022:11	4022:11	15	s
ASSIGN_OP	4022:13	4022:13	13	=
LEAF_NODE	4022:13	4022:13	14	=
RVAL	4022:15	4022:15	13	0
FIELD	4022:15	4022:15	14	0
LEAF_NODE	4022:15	4022:15	15	0
LEAF_NODE	4022:16	4022:16	11	;
CONDITION	4022:18	4022:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4022:18	4022:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	4022:18	4022:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4022:18	4022:26	13	( s < spp )
LEAF_NODE	4022:18	4022:18	14	(
FIELD	4022:19	4022:19	14	s
LEAF_NODE	4022:19	4022:19	15	s
REL_OPERATOR	4022:21	4022:21	14	<
LEAF_NODE	4022:21	4022:21	15	<
FIELD	4022:23	4022:23	14	spp
LEAF_NODE	4022:23	4022:23	15	spp
LEAF_NODE	4022:26	4022:26	14	)
LEAF_NODE	4022:28	4022:28	13	&&
EXPR	4022:31	4022:47	13	( s < MAX_SAMPLES )
LEAF_NODE	4022:31	4022:31	14	(
FIELD	4022:32	4022:32	14	s
LEAF_NODE	4022:32	4022:32	15	s
REL_OPERATOR	4022:34	4022:34	14	<
LEAF_NODE	4022:34	4022:34	15	<
FIELD	4022:36	4022:36	14	MAX_SAMPLES
LEAF_NODE	4022:36	4022:36	15	MAX_SAMPLES
LEAF_NODE	4022:47	4022:47	14	)
LEAF_NODE	4022:48	4022:48	10	;
FOR_EXPR	4022:50	4022:50	10	s ++
EXPR	4022:50	4022:50	11	s ++
FIELD	4022:50	4022:51	12	s ++
LEAF_NODE	4022:50	4022:50	13	s
LEAF_NODE	4022:51	4022:51	13	++
LEAF_NODE	4022:53	4022:53	10	)
STATEMENTS	4023:8	4065:1	10	
LEAF_NODE	4023:8	4023:8	11	{
STATEMENTS	4024:1	4052:1	11	
EXPR_STATEMENT	4024:1	4024:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	4024:1	4024:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	4024:1	4024:7	14	src = in [ s ] + src_offset + src_byte
LVAL	4024:1	4024:1	15	src
FIELD	4024:1	4024:1	16	src
LEAF_NODE	4024:1	4024:1	17	src
ASSIGN_OP	4024:5	4024:5	15	=
LEAF_NODE	4024:5	4024:5	16	=
RVAL	4024:7	4024:28	15	in [ s ] + src_offset + src_byte
FIELD	4024:7	4024:11	16	in [ s ]
LEAF_NODE	4024:7	4024:7	17	in
LEAF_NODE	4024:9	4024:9	17	[
EXPR	4024:10	4024:10	17	s
FIELD	4024:10	4024:10	18	s
LEAF_NODE	4024:10	4024:10	19	s
LEAF_NODE	4024:11	4024:11	17	]
LEAF_NODE	4024:13	4024:13	16	+
FIELD	4024:15	4024:15	16	src_offset
LEAF_NODE	4024:15	4024:15	17	src_offset
LEAF_NODE	4024:26	4024:26	16	+
FIELD	4024:28	4024:28	16	src_byte
LEAF_NODE	4024:28	4024:28	17	src_byte
LEAF_NODE	4024:36	4024:36	13	;
SELECTION	4025:8	4026:3	12	
KEYWORD	4025:8	4025:8	13	if
LEAF_NODE	4025:8	4025:8	14	if
LEAF_NODE	4025:11	4025:11	13	(
CONDITION	4025:12	4025:12	13	little_endian
EXPR	4025:12	4025:12	14	little_endian
FIELD	4025:12	4025:12	15	little_endian
LEAF_NODE	4025:12	4025:12	16	little_endian
LEAF_NODE	4025:25	4025:25	13	)
STATEMENTS	4026:3	4026:3	13	
EXPR_STATEMENT	4026:3	4026:67	14	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	4026:3	4026:3	15	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	4026:3	4026:11	16	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	4026:3	4026:3	17	buff1
FIELD	4026:3	4026:3	18	buff1
LEAF_NODE	4026:3	4026:3	19	buff1
ASSIGN_OP	4026:9	4026:9	17	=
LEAF_NODE	4026:9	4026:9	18	=
RVAL	4026:11	4026:11	17	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4026:11	4026:28	18	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4026:11	4026:24	19	( src [ 0 ] << 24 )
LEAF_NODE	4026:11	4026:11	20	(
FIELD	4026:12	4026:17	20	src [ 0 ]
LEAF_NODE	4026:12	4026:12	21	src
LEAF_NODE	4026:15	4026:15	21	[
EXPR	4026:16	4026:16	21	0
FIELD	4026:16	4026:16	22	0
LEAF_NODE	4026:16	4026:16	23	0
LEAF_NODE	4026:17	4026:17	21	]
LEAF_NODE	4026:19	4026:19	20	<<
FIELD	4026:22	4026:22	20	24
LEAF_NODE	4026:22	4026:22	21	24
LEAF_NODE	4026:24	4026:24	20	)
LEAF_NODE	4026:26	4026:26	19	|
BIT_OR_ELEM	4026:28	4026:28	19	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4026:28	4026:45	20	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4026:28	4026:41	21	( src [ 1 ] << 16 )
LEAF_NODE	4026:28	4026:28	22	(
FIELD	4026:29	4026:34	22	src [ 1 ]
LEAF_NODE	4026:29	4026:29	23	src
LEAF_NODE	4026:32	4026:32	23	[
EXPR	4026:33	4026:33	23	1
FIELD	4026:33	4026:33	24	1
LEAF_NODE	4026:33	4026:33	25	1
LEAF_NODE	4026:34	4026:34	23	]
LEAF_NODE	4026:36	4026:36	22	<<
FIELD	4026:39	4026:39	22	16
LEAF_NODE	4026:39	4026:39	23	16
LEAF_NODE	4026:41	4026:41	22	)
LEAF_NODE	4026:43	4026:43	21	|
BIT_OR_ELEM	4026:45	4026:45	21	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4026:45	4026:61	22	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4026:45	4026:57	23	( src [ 2 ] << 8 )
LEAF_NODE	4026:45	4026:45	24	(
FIELD	4026:46	4026:51	24	src [ 2 ]
LEAF_NODE	4026:46	4026:46	25	src
LEAF_NODE	4026:49	4026:49	25	[
EXPR	4026:50	4026:50	25	2
FIELD	4026:50	4026:50	26	2
LEAF_NODE	4026:50	4026:50	27	2
LEAF_NODE	4026:51	4026:51	25	]
LEAF_NODE	4026:53	4026:53	24	<<
FIELD	4026:56	4026:56	24	8
LEAF_NODE	4026:56	4026:56	25	8
LEAF_NODE	4026:57	4026:57	24	)
LEAF_NODE	4026:59	4026:59	23	|
BIT_OR_ELEM	4026:61	4026:61	23	src [ 3 ]
FIELD	4026:61	4026:66	24	src [ 3 ]
LEAF_NODE	4026:61	4026:61	25	src
LEAF_NODE	4026:64	4026:64	25	[
EXPR	4026:65	4026:65	25	3
FIELD	4026:65	4026:65	26	3
LEAF_NODE	4026:65	4026:65	27	3
LEAF_NODE	4026:66	4026:66	25	]
LEAF_NODE	4026:67	4026:67	15	;
SELECTION	4027:8	4028:3	12	
KEYWORD	4027:8	4027:8	13	else
LEAF_NODE	4027:8	4027:8	14	else
STATEMENTS	4028:3	4028:3	13	
EXPR_STATEMENT	4028:3	4028:67	14	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	4028:3	4028:3	15	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	4028:3	4028:11	16	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	4028:3	4028:3	17	buff1
FIELD	4028:3	4028:3	18	buff1
LEAF_NODE	4028:3	4028:3	19	buff1
ASSIGN_OP	4028:9	4028:9	17	=
LEAF_NODE	4028:9	4028:9	18	=
RVAL	4028:11	4028:11	17	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4028:11	4028:28	18	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4028:11	4028:24	19	( src [ 3 ] << 24 )
LEAF_NODE	4028:11	4028:11	20	(
FIELD	4028:12	4028:17	20	src [ 3 ]
LEAF_NODE	4028:12	4028:12	21	src
LEAF_NODE	4028:15	4028:15	21	[
EXPR	4028:16	4028:16	21	3
FIELD	4028:16	4028:16	22	3
LEAF_NODE	4028:16	4028:16	23	3
LEAF_NODE	4028:17	4028:17	21	]
LEAF_NODE	4028:19	4028:19	20	<<
FIELD	4028:22	4028:22	20	24
LEAF_NODE	4028:22	4028:22	21	24
LEAF_NODE	4028:24	4028:24	20	)
LEAF_NODE	4028:26	4028:26	19	|
BIT_OR_ELEM	4028:28	4028:28	19	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4028:28	4028:45	20	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4028:28	4028:41	21	( src [ 2 ] << 16 )
LEAF_NODE	4028:28	4028:28	22	(
FIELD	4028:29	4028:34	22	src [ 2 ]
LEAF_NODE	4028:29	4028:29	23	src
LEAF_NODE	4028:32	4028:32	23	[
EXPR	4028:33	4028:33	23	2
FIELD	4028:33	4028:33	24	2
LEAF_NODE	4028:33	4028:33	25	2
LEAF_NODE	4028:34	4028:34	23	]
LEAF_NODE	4028:36	4028:36	22	<<
FIELD	4028:39	4028:39	22	16
LEAF_NODE	4028:39	4028:39	23	16
LEAF_NODE	4028:41	4028:41	22	)
LEAF_NODE	4028:43	4028:43	21	|
BIT_OR_ELEM	4028:45	4028:45	21	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4028:45	4028:61	22	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4028:45	4028:57	23	( src [ 1 ] << 8 )
LEAF_NODE	4028:45	4028:45	24	(
FIELD	4028:46	4028:51	24	src [ 1 ]
LEAF_NODE	4028:46	4028:46	25	src
LEAF_NODE	4028:49	4028:49	25	[
EXPR	4028:50	4028:50	25	1
FIELD	4028:50	4028:50	26	1
LEAF_NODE	4028:50	4028:50	27	1
LEAF_NODE	4028:51	4028:51	25	]
LEAF_NODE	4028:53	4028:53	24	<<
FIELD	4028:56	4028:56	24	8
LEAF_NODE	4028:56	4028:56	25	8
LEAF_NODE	4028:57	4028:57	24	)
LEAF_NODE	4028:59	4028:59	23	|
BIT_OR_ELEM	4028:61	4028:61	23	src [ 0 ]
FIELD	4028:61	4028:66	24	src [ 0 ]
LEAF_NODE	4028:61	4028:61	25	src
LEAF_NODE	4028:64	4028:64	25	[
EXPR	4028:65	4028:65	25	0
FIELD	4028:65	4028:65	26	0
LEAF_NODE	4028:65	4028:65	27	0
LEAF_NODE	4028:66	4028:66	25	]
LEAF_NODE	4028:67	4028:67	15	;
LEAF_NODE	4029:1	4029:1	12	buff1
LEAF_NODE	4029:7	4029:7	12	=
LEAF_NODE	4029:9	4029:9	12	(
LEAF_NODE	4029:10	4029:10	12	buff1
LEAF_NODE	4029:16	4029:16	12	&
LEAF_NODE	4029:18	4029:18	12	matchbits
LEAF_NODE	4029:27	4029:27	12	)
LEAF_NODE	4029:29	4029:29	12	<<
LEAF_NODE	4029:32	4029:32	12	(
LEAF_NODE	4029:33	4029:33	12	src_bit
LEAF_NODE	4029:40	4029:40	12	)
LEAF_NODE	4029:41	4029:41	12	;
SELECTION	4032:1	4033:3	12	
KEYWORD	4032:1	4032:1	13	if
LEAF_NODE	4032:1	4032:1	14	if
LEAF_NODE	4032:4	4032:4	13	(
CONDITION	4032:5	4032:5	13	ready_bits >= 16
EXPR	4032:5	4032:19	14	ready_bits >= 16
FIELD	4032:5	4032:5	15	ready_bits
LEAF_NODE	4032:5	4032:5	16	ready_bits
REL_OPERATOR	4032:16	4032:16	15	>=
LEAF_NODE	4032:16	4032:16	16	>=
FIELD	4032:19	4032:19	15	16
LEAF_NODE	4032:19	4032:19	16	16
LEAF_NODE	4032:21	4032:21	13	)
STATEMENTS	4033:3	4043:3	13	
LEAF_NODE	4033:3	4033:3	14	{
STATEMENTS	4034:5	4042:5	14	
EXPR_STATEMENT	4034:5	4034:30	15	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	4034:5	4034:5	16	bytebuff1 = ( buff2 >> 24 )
ASSIGN	4034:5	4034:17	17	bytebuff1 = ( buff2 >> 24 )
LVAL	4034:5	4034:5	18	bytebuff1
FIELD	4034:5	4034:5	19	bytebuff1
LEAF_NODE	4034:5	4034:5	20	bytebuff1
ASSIGN_OP	4034:15	4034:15	18	=
LEAF_NODE	4034:15	4034:15	19	=
RVAL	4034:17	4034:29	18	( buff2 >> 24 )
LEAF_NODE	4034:17	4034:17	19	(
FIELD	4034:18	4034:18	19	buff2
LEAF_NODE	4034:18	4034:18	20	buff2
LEAF_NODE	4034:24	4034:24	19	>>
FIELD	4034:27	4034:27	19	24
LEAF_NODE	4034:27	4034:27	20	24
LEAF_NODE	4034:29	4034:29	19	)
LEAF_NODE	4034:30	4034:30	16	;
EXPR_STATEMENT	4035:5	4035:23	15	* dst ++ = bytebuff1 ;
EXPR	4035:5	4035:5	16	* dst ++ = bytebuff1
ASSIGN	4035:5	4035:14	17	* dst ++ = bytebuff1
LVAL	4035:5	4035:5	18	* dst ++
UNARY_EXPR	4035:5	4035:6	19	* dst ++
UNARY_OPERATOR	4035:5	4035:5	20	*
LEAF_NODE	4035:5	4035:5	21	*
FIELD	4035:6	4035:9	20	dst ++
LEAF_NODE	4035:6	4035:6	21	dst
LEAF_NODE	4035:9	4035:9	21	++
ASSIGN_OP	4035:12	4035:12	18	=
LEAF_NODE	4035:12	4035:12	19	=
RVAL	4035:14	4035:14	18	bytebuff1
FIELD	4035:14	4035:14	19	bytebuff1
LEAF_NODE	4035:14	4035:14	20	bytebuff1
LEAF_NODE	4035:23	4035:23	16	;
EXPR_STATEMENT	4036:5	4036:30	15	bytebuff2 = ( buff2 >> 16 ) ;
EXPR	4036:5	4036:5	16	bytebuff2 = ( buff2 >> 16 )
ASSIGN	4036:5	4036:17	17	bytebuff2 = ( buff2 >> 16 )
LVAL	4036:5	4036:5	18	bytebuff2
FIELD	4036:5	4036:5	19	bytebuff2
LEAF_NODE	4036:5	4036:5	20	bytebuff2
ASSIGN_OP	4036:15	4036:15	18	=
LEAF_NODE	4036:15	4036:15	19	=
RVAL	4036:17	4036:29	18	( buff2 >> 16 )
LEAF_NODE	4036:17	4036:17	19	(
FIELD	4036:18	4036:18	19	buff2
LEAF_NODE	4036:18	4036:18	20	buff2
LEAF_NODE	4036:24	4036:24	19	>>
FIELD	4036:27	4036:27	19	16
LEAF_NODE	4036:27	4036:27	20	16
LEAF_NODE	4036:29	4036:29	19	)
LEAF_NODE	4036:30	4036:30	16	;
EXPR_STATEMENT	4037:5	4037:23	15	* dst ++ = bytebuff2 ;
EXPR	4037:5	4037:5	16	* dst ++ = bytebuff2
ASSIGN	4037:5	4037:14	17	* dst ++ = bytebuff2
LVAL	4037:5	4037:5	18	* dst ++
UNARY_EXPR	4037:5	4037:6	19	* dst ++
UNARY_OPERATOR	4037:5	4037:5	20	*
LEAF_NODE	4037:5	4037:5	21	*
FIELD	4037:6	4037:9	20	dst ++
LEAF_NODE	4037:6	4037:6	21	dst
LEAF_NODE	4037:9	4037:9	21	++
ASSIGN_OP	4037:12	4037:12	18	=
LEAF_NODE	4037:12	4037:12	19	=
RVAL	4037:14	4037:14	18	bytebuff2
FIELD	4037:14	4037:14	19	bytebuff2
LEAF_NODE	4037:14	4037:14	20	bytebuff2
LEAF_NODE	4037:23	4037:23	16	;
EXPR_STATEMENT	4038:5	4038:21	15	ready_bits -= 16 ;
EXPR	4038:5	4038:5	16	ready_bits -= 16
ASSIGN	4038:5	4038:19	17	ready_bits -= 16
LVAL	4038:5	4038:5	18	ready_bits
FIELD	4038:5	4038:5	19	ready_bits
LEAF_NODE	4038:5	4038:5	20	ready_bits
ASSIGN_OP	4038:16	4038:16	18	-=
LEAF_NODE	4038:16	4038:16	19	-=
RVAL	4038:19	4038:19	18	16
FIELD	4038:19	4038:19	19	16
LEAF_NODE	4038:19	4038:19	20	16
LEAF_NODE	4038:21	4038:21	16	;
EXPR_STATEMENT	4041:5	4041:52	15	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) ) ;
EXPR	4041:5	4041:5	16	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
ASSIGN	4041:5	4041:13	17	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LVAL	4041:5	4041:5	18	buff2
FIELD	4041:5	4041:5	19	buff2
LEAF_NODE	4041:5	4041:5	20	buff2
ASSIGN_OP	4041:11	4041:11	18	=
LEAF_NODE	4041:11	4041:11	19	=
RVAL	4041:13	4041:51	18	( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	4041:13	4041:13	19	(
BIT_OR	4041:14	4041:30	19	( buff2 << 16 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	4041:14	4041:26	20	( buff2 << 16 )
LEAF_NODE	4041:14	4041:14	21	(
FIELD	4041:15	4041:15	21	buff2
LEAF_NODE	4041:15	4041:15	22	buff2
LEAF_NODE	4041:21	4041:21	21	<<
FIELD	4041:24	4041:24	21	16
LEAF_NODE	4041:24	4041:24	22	16
LEAF_NODE	4041:26	4041:26	21	)
LEAF_NODE	4041:28	4041:28	20	|
BIT_OR_ELEM	4041:30	4041:50	20	( buff1 >> ready_bits )
LEAF_NODE	4041:30	4041:30	21	(
FIELD	4041:31	4041:31	21	buff1
LEAF_NODE	4041:31	4041:31	22	buff1
LEAF_NODE	4041:37	4041:37	21	>>
FIELD	4041:40	4041:40	21	ready_bits
LEAF_NODE	4041:40	4041:40	22	ready_bits
LEAF_NODE	4041:50	4041:50	21	)
LEAF_NODE	4041:51	4041:51	19	)
LEAF_NODE	4041:52	4041:52	16	;
EXPR_STATEMENT	4042:5	4042:29	15	strcpy ( action , "Flush" ) ;
EXPR	4042:5	4042:5	16	strcpy ( action , "Flush" )
FUNCTION_CALL	4042:5	4042:28	17	strcpy ( action , "Flush" )
CALLEE	4042:5	4042:5	18	strcpy
LEAF_NODE	4042:5	4042:5	19	strcpy
LEAF_NODE	4042:12	4042:12	18	(
ARGUMENT	4042:13	4042:13	18	action
FIELD	4042:13	4042:13	19	action
LEAF_NODE	4042:13	4042:13	20	action
LEAF_NODE	4042:19	4042:19	18	,
ARGUMENT	4042:21	4042:21	18	"Flush"
FIELD	4042:21	4042:21	19	"Flush"
LEAF_NODE	4042:21	4042:21	20	"Flush"
LEAF_NODE	4042:28	4042:28	18	)
LEAF_NODE	4042:29	4042:29	16	;
LEAF_NODE	4043:3	4043:3	14	}
SELECTION	4044:1	4045:3	12	
KEYWORD	4044:1	4044:1	13	else
LEAF_NODE	4044:1	4044:1	14	else
STATEMENTS	4045:3	4049:3	13	
LEAF_NODE	4045:3	4045:3	14	{
STATEMENTS	4046:5	4048:5	14	
EXPR_STATEMENT	4046:5	4046:30	15	bytebuff1 = bytebuff2 = 0 ;
EXPR	4046:5	4046:5	16	bytebuff1 = bytebuff2 = 0
ASSIGN	4046:5	4046:17	17	bytebuff1 = bytebuff2 = 0
LVAL	4046:5	4046:5	18	bytebuff1
FIELD	4046:5	4046:5	19	bytebuff1
LEAF_NODE	4046:5	4046:5	20	bytebuff1
ASSIGN_OP	4046:15	4046:15	18	=
LEAF_NODE	4046:15	4046:15	19	=
RVAL	4046:17	4046:17	18	bytebuff2 = 0
ASSIGN	4046:17	4046:29	19	bytebuff2 = 0
LVAL	4046:17	4046:17	20	bytebuff2
FIELD	4046:17	4046:17	21	bytebuff2
LEAF_NODE	4046:17	4046:17	22	bytebuff2
ASSIGN_OP	4046:27	4046:27	20	=
LEAF_NODE	4046:27	4046:27	21	=
RVAL	4046:29	4046:29	20	0
FIELD	4046:29	4046:29	21	0
LEAF_NODE	4046:29	4046:29	22	0
LEAF_NODE	4046:30	4046:30	16	;
EXPR_STATEMENT	4047:5	4047:44	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	4047:5	4047:5	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	4047:5	4047:13	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	4047:5	4047:5	18	buff2
FIELD	4047:5	4047:5	19	buff2
LEAF_NODE	4047:5	4047:5	20	buff2
ASSIGN_OP	4047:11	4047:11	18	=
LEAF_NODE	4047:11	4047:11	19	=
RVAL	4047:13	4047:43	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	4047:13	4047:13	19	(
BIT_OR	4047:14	4047:22	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	4047:14	4047:14	20	buff2
FIELD	4047:14	4047:14	21	buff2
LEAF_NODE	4047:14	4047:14	22	buff2
LEAF_NODE	4047:20	4047:20	20	|
BIT_OR_ELEM	4047:22	4047:42	20	( buff1 >> ready_bits )
LEAF_NODE	4047:22	4047:22	21	(
FIELD	4047:23	4047:23	21	buff1
LEAF_NODE	4047:23	4047:23	22	buff1
LEAF_NODE	4047:29	4047:29	21	>>
FIELD	4047:32	4047:32	21	ready_bits
LEAF_NODE	4047:32	4047:32	22	ready_bits
LEAF_NODE	4047:42	4047:42	21	)
LEAF_NODE	4047:43	4047:43	19	)
LEAF_NODE	4047:44	4047:44	16	;
EXPR_STATEMENT	4048:5	4048:30	15	strcpy ( action , "Update" ) ;
EXPR	4048:5	4048:5	16	strcpy ( action , "Update" )
FUNCTION_CALL	4048:5	4048:29	17	strcpy ( action , "Update" )
CALLEE	4048:5	4048:5	18	strcpy
LEAF_NODE	4048:5	4048:5	19	strcpy
LEAF_NODE	4048:12	4048:12	18	(
ARGUMENT	4048:13	4048:13	18	action
FIELD	4048:13	4048:13	19	action
LEAF_NODE	4048:13	4048:13	20	action
LEAF_NODE	4048:19	4048:19	18	,
ARGUMENT	4048:21	4048:21	18	"Update"
FIELD	4048:21	4048:21	19	"Update"
LEAF_NODE	4048:21	4048:21	20	"Update"
LEAF_NODE	4048:29	4048:29	18	)
LEAF_NODE	4048:30	4048:30	16	;
LEAF_NODE	4049:3	4049:3	14	}
EXPR_STATEMENT	4050:1	4050:18	12	ready_bits += bps ;
EXPR	4050:1	4050:1	13	ready_bits += bps
ASSIGN	4050:1	4050:15	14	ready_bits += bps
LVAL	4050:1	4050:1	15	ready_bits
FIELD	4050:1	4050:1	16	ready_bits
LEAF_NODE	4050:1	4050:1	17	ready_bits
ASSIGN_OP	4050:12	4050:12	15	+=
LEAF_NODE	4050:12	4050:12	16	+=
RVAL	4050:15	4050:15	15	bps
FIELD	4050:15	4050:15	16	bps
LEAF_NODE	4050:15	4050:15	17	bps
LEAF_NODE	4050:18	4050:18	13	;
SELECTION	4052:1	4053:3	12	
KEYWORD	4052:1	4052:1	13	if
LEAF_NODE	4052:1	4052:1	14	if
LEAF_NODE	4052:4	4052:4	13	(
CONDITION	4052:5	4052:5	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	4052:5	4052:5	14	( dumpfile != NULL ) && ( level == 3 )
AND	4052:5	4052:27	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	4052:5	4052:22	16	( dumpfile != NULL )
LEAF_NODE	4052:5	4052:5	17	(
FIELD	4052:6	4052:6	17	dumpfile
LEAF_NODE	4052:6	4052:6	18	dumpfile
EQ_OPERATOR	4052:15	4052:15	17	!=
LEAF_NODE	4052:15	4052:15	18	!=
FIELD	4052:18	4052:18	17	NULL
LEAF_NODE	4052:18	4052:18	18	NULL
LEAF_NODE	4052:22	4052:22	17	)
LEAF_NODE	4052:24	4052:24	16	&&
EXPR	4052:27	4052:38	16	( level == 3 )
LEAF_NODE	4052:27	4052:27	17	(
FIELD	4052:28	4052:28	17	level
LEAF_NODE	4052:28	4052:28	18	level
EQ_OPERATOR	4052:34	4052:34	17	==
LEAF_NODE	4052:34	4052:34	18	==
FIELD	4052:37	4052:37	17	3
LEAF_NODE	4052:37	4052:37	18	3
LEAF_NODE	4052:38	4052:38	17	)
LEAF_NODE	4052:39	4052:39	13	)
STATEMENTS	4053:3	4064:3	13	
LEAF_NODE	4053:3	4053:3	14	{
STATEMENTS	4054:3	4063:3	14	
EXPR_STATEMENT	4054:3	4056:59	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	4054:3	4054:3	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	4054:3	4056:58	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	4054:3	4054:3	18	dump_info
LEAF_NODE	4054:3	4054:3	19	dump_info
LEAF_NODE	4054:13	4054:13	18	(
ARGUMENT	4054:14	4054:14	18	dumpfile
FIELD	4054:14	4054:14	19	dumpfile
LEAF_NODE	4054:14	4054:14	20	dumpfile
LEAF_NODE	4054:22	4054:22	18	,
ARGUMENT	4054:24	4054:24	18	format
FIELD	4054:24	4054:24	19	format
LEAF_NODE	4054:24	4054:24	20	format
LEAF_NODE	4054:30	4054:30	18	,
ARGUMENT	4054:32	4054:32	18	""
FIELD	4054:32	4054:32	19	""
LEAF_NODE	4054:32	4054:32	20	""
LEAF_NODE	4054:34	4054:34	18	,
ARGUMENT	4055:9	4055:9	18	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4055:9	4055:9	19	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4055:9	4055:9	20	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4055:92	4055:92	18	,
ARGUMENT	4056:9	4056:15	18	row + 1
FIELD	4056:9	4056:9	19	row
LEAF_NODE	4056:9	4056:9	20	row
LEAF_NODE	4056:13	4056:13	19	+
FIELD	4056:15	4056:15	19	1
LEAF_NODE	4056:15	4056:15	20	1
LEAF_NODE	4056:16	4056:16	18	,
ARGUMENT	4056:18	4056:24	18	col + 1
FIELD	4056:18	4056:18	19	col
LEAF_NODE	4056:18	4056:18	20	col
LEAF_NODE	4056:22	4056:22	19	+
FIELD	4056:24	4056:24	19	1
LEAF_NODE	4056:24	4056:24	20	1
LEAF_NODE	4056:25	4056:25	18	,
ARGUMENT	4056:27	4056:27	18	s
FIELD	4056:27	4056:27	19	s
LEAF_NODE	4056:27	4056:27	20	s
LEAF_NODE	4056:28	4056:28	18	,
ARGUMENT	4056:30	4056:30	18	src_byte
FIELD	4056:30	4056:30	19	src_byte
LEAF_NODE	4056:30	4056:30	20	src_byte
LEAF_NODE	4056:38	4056:38	18	,
ARGUMENT	4056:40	4056:40	18	src_bit
FIELD	4056:40	4056:40	19	src_bit
LEAF_NODE	4056:40	4056:40	20	src_bit
LEAF_NODE	4056:47	4056:47	18	,
ARGUMENT	4056:49	4056:55	18	dst - out
FIELD	4056:49	4056:49	19	dst
LEAF_NODE	4056:49	4056:49	20	dst
LEAF_NODE	4056:53	4056:53	19	-
FIELD	4056:55	4056:55	19	out
LEAF_NODE	4056:55	4056:55	20	out
LEAF_NODE	4056:58	4056:58	18	)
LEAF_NODE	4056:59	4056:59	16	;
EXPR_STATEMENT	4057:3	4057:57	15	dump_long ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4057:3	4057:3	16	dump_long ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4057:3	4057:56	17	dump_long ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4057:3	4057:3	18	dump_long
LEAF_NODE	4057:3	4057:3	19	dump_long
LEAF_NODE	4057:13	4057:13	18	(
ARGUMENT	4057:14	4057:14	18	dumpfile
FIELD	4057:14	4057:14	19	dumpfile
LEAF_NODE	4057:14	4057:14	20	dumpfile
LEAF_NODE	4057:22	4057:22	18	,
ARGUMENT	4057:24	4057:24	18	format
FIELD	4057:24	4057:24	19	format
LEAF_NODE	4057:24	4057:24	20	format
LEAF_NODE	4057:30	4057:30	18	,
ARGUMENT	4057:32	4057:32	18	"Match bits "
FIELD	4057:32	4057:32	19	"Match bits "
LEAF_NODE	4057:32	4057:32	20	"Match bits "
LEAF_NODE	4057:45	4057:45	18	,
ARGUMENT	4057:47	4057:47	18	matchbits
FIELD	4057:47	4057:47	19	matchbits
LEAF_NODE	4057:47	4057:47	20	matchbits
LEAF_NODE	4057:56	4057:56	18	)
LEAF_NODE	4057:57	4057:57	16	;
EXPR_STATEMENT	4058:3	4058:54	15	dump_data ( dumpfile , format , "Src   bits " , src , 4 ) ;
EXPR	4058:3	4058:3	16	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
FUNCTION_CALL	4058:3	4058:53	17	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
CALLEE	4058:3	4058:3	18	dump_data
LEAF_NODE	4058:3	4058:3	19	dump_data
LEAF_NODE	4058:13	4058:13	18	(
ARGUMENT	4058:14	4058:14	18	dumpfile
FIELD	4058:14	4058:14	19	dumpfile
LEAF_NODE	4058:14	4058:14	20	dumpfile
LEAF_NODE	4058:22	4058:22	18	,
ARGUMENT	4058:24	4058:24	18	format
FIELD	4058:24	4058:24	19	format
LEAF_NODE	4058:24	4058:24	20	format
LEAF_NODE	4058:30	4058:30	18	,
ARGUMENT	4058:32	4058:32	18	"Src   bits "
FIELD	4058:32	4058:32	19	"Src   bits "
LEAF_NODE	4058:32	4058:32	20	"Src   bits "
LEAF_NODE	4058:45	4058:45	18	,
ARGUMENT	4058:47	4058:47	18	src
FIELD	4058:47	4058:47	19	src
LEAF_NODE	4058:47	4058:47	20	src
LEAF_NODE	4058:50	4058:50	18	,
ARGUMENT	4058:52	4058:52	18	4
FIELD	4058:52	4058:52	19	4
LEAF_NODE	4058:52	4058:52	20	4
LEAF_NODE	4058:53	4058:53	18	)
LEAF_NODE	4058:54	4058:54	16	;
EXPR_STATEMENT	4059:3	4059:53	15	dump_long ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4059:3	4059:3	16	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4059:3	4059:52	17	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4059:3	4059:3	18	dump_long
LEAF_NODE	4059:3	4059:3	19	dump_long
LEAF_NODE	4059:13	4059:13	18	(
ARGUMENT	4059:14	4059:14	18	dumpfile
FIELD	4059:14	4059:14	19	dumpfile
LEAF_NODE	4059:14	4059:14	20	dumpfile
LEAF_NODE	4059:22	4059:22	18	,
ARGUMENT	4059:24	4059:24	18	format
FIELD	4059:24	4059:24	19	format
LEAF_NODE	4059:24	4059:24	20	format
LEAF_NODE	4059:30	4059:30	18	,
ARGUMENT	4059:32	4059:32	18	"Buff1 bits "
FIELD	4059:32	4059:32	19	"Buff1 bits "
LEAF_NODE	4059:32	4059:32	20	"Buff1 bits "
LEAF_NODE	4059:45	4059:45	18	,
ARGUMENT	4059:47	4059:47	18	buff1
FIELD	4059:47	4059:47	19	buff1
LEAF_NODE	4059:47	4059:47	20	buff1
LEAF_NODE	4059:52	4059:52	18	)
LEAF_NODE	4059:53	4059:53	16	;
EXPR_STATEMENT	4060:3	4060:53	15	dump_long ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4060:3	4060:3	16	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4060:3	4060:52	17	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4060:3	4060:3	18	dump_long
LEAF_NODE	4060:3	4060:3	19	dump_long
LEAF_NODE	4060:13	4060:13	18	(
ARGUMENT	4060:14	4060:14	18	dumpfile
FIELD	4060:14	4060:14	19	dumpfile
LEAF_NODE	4060:14	4060:14	20	dumpfile
LEAF_NODE	4060:22	4060:22	18	,
ARGUMENT	4060:24	4060:24	18	format
FIELD	4060:24	4060:24	19	format
LEAF_NODE	4060:24	4060:24	20	format
LEAF_NODE	4060:30	4060:30	18	,
ARGUMENT	4060:32	4060:32	18	"Buff2 bits "
FIELD	4060:32	4060:32	19	"Buff2 bits "
LEAF_NODE	4060:32	4060:32	20	"Buff2 bits "
LEAF_NODE	4060:45	4060:45	18	,
ARGUMENT	4060:47	4060:47	18	buff2
FIELD	4060:47	4060:47	19	buff2
LEAF_NODE	4060:47	4060:47	20	buff2
LEAF_NODE	4060:52	4060:52	18	)
LEAF_NODE	4060:53	4060:53	16	;
EXPR_STATEMENT	4061:3	4061:57	15	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 ) ;
EXPR	4061:3	4061:3	16	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
FUNCTION_CALL	4061:3	4061:56	17	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
CALLEE	4061:3	4061:3	18	dump_byte
LEAF_NODE	4061:3	4061:3	19	dump_byte
LEAF_NODE	4061:13	4061:13	18	(
ARGUMENT	4061:14	4061:14	18	dumpfile
FIELD	4061:14	4061:14	19	dumpfile
LEAF_NODE	4061:14	4061:14	20	dumpfile
LEAF_NODE	4061:22	4061:22	18	,
ARGUMENT	4061:24	4061:24	18	format
FIELD	4061:24	4061:24	19	format
LEAF_NODE	4061:24	4061:24	20	format
LEAF_NODE	4061:30	4061:30	18	,
ARGUMENT	4061:32	4061:32	18	"Write bits1"
FIELD	4061:32	4061:32	19	"Write bits1"
LEAF_NODE	4061:32	4061:32	20	"Write bits1"
LEAF_NODE	4061:45	4061:45	18	,
ARGUMENT	4061:47	4061:47	18	bytebuff1
FIELD	4061:47	4061:47	19	bytebuff1
LEAF_NODE	4061:47	4061:47	20	bytebuff1
LEAF_NODE	4061:56	4061:56	18	)
LEAF_NODE	4061:57	4061:57	16	;
EXPR_STATEMENT	4062:3	4062:57	15	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 ) ;
EXPR	4062:3	4062:3	16	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
FUNCTION_CALL	4062:3	4062:56	17	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
CALLEE	4062:3	4062:3	18	dump_byte
LEAF_NODE	4062:3	4062:3	19	dump_byte
LEAF_NODE	4062:13	4062:13	18	(
ARGUMENT	4062:14	4062:14	18	dumpfile
FIELD	4062:14	4062:14	19	dumpfile
LEAF_NODE	4062:14	4062:14	20	dumpfile
LEAF_NODE	4062:22	4062:22	18	,
ARGUMENT	4062:24	4062:24	18	format
FIELD	4062:24	4062:24	19	format
LEAF_NODE	4062:24	4062:24	20	format
LEAF_NODE	4062:30	4062:30	18	,
ARGUMENT	4062:32	4062:32	18	"Write bits2"
FIELD	4062:32	4062:32	19	"Write bits2"
LEAF_NODE	4062:32	4062:32	20	"Write bits2"
LEAF_NODE	4062:45	4062:45	18	,
ARGUMENT	4062:47	4062:47	18	bytebuff2
FIELD	4062:47	4062:47	19	bytebuff2
LEAF_NODE	4062:47	4062:47	20	bytebuff2
LEAF_NODE	4062:56	4062:56	18	)
LEAF_NODE	4062:57	4062:57	16	;
EXPR_STATEMENT	4063:3	4063:78	15	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action ) ;
EXPR	4063:3	4063:3	16	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
FUNCTION_CALL	4063:3	4063:77	17	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
CALLEE	4063:3	4063:3	18	dump_info
LEAF_NODE	4063:3	4063:3	19	dump_info
LEAF_NODE	4063:13	4063:13	18	(
ARGUMENT	4063:14	4063:14	18	dumpfile
FIELD	4063:14	4063:14	19	dumpfile
LEAF_NODE	4063:14	4063:14	20	dumpfile
LEAF_NODE	4063:22	4063:22	18	,
ARGUMENT	4063:24	4063:24	18	format
FIELD	4063:24	4063:24	19	format
LEAF_NODE	4063:24	4063:24	20	format
LEAF_NODE	4063:30	4063:30	18	,
ARGUMENT	4063:32	4063:32	18	""
FIELD	4063:32	4063:32	19	""
LEAF_NODE	4063:32	4063:32	20	""
LEAF_NODE	4063:34	4063:34	18	,
ARGUMENT	4063:35	4063:35	18	"Ready bits:   %d, %s"
FIELD	4063:35	4063:35	19	"Ready bits:   %d, %s"
LEAF_NODE	4063:35	4063:35	20	"Ready bits:   %d, %s"
LEAF_NODE	4063:57	4063:57	18	,
ARGUMENT	4063:59	4063:59	18	ready_bits
FIELD	4063:59	4063:59	19	ready_bits
LEAF_NODE	4063:59	4063:59	20	ready_bits
LEAF_NODE	4063:69	4063:69	18	,
ARGUMENT	4063:71	4063:71	18	action
FIELD	4063:71	4063:71	19	action
LEAF_NODE	4063:71	4063:71	20	action
LEAF_NODE	4063:77	4063:77	18	)
LEAF_NODE	4063:78	4063:78	16	;
LEAF_NODE	4064:3	4064:3	14	}
LEAF_NODE	4065:1	4065:1	11	}
LEAF_NODE	4066:6	4066:6	8	}
ITERATION	4069:4	4070:6	6	
KEYWORD	4069:4	4069:4	7	while
LEAF_NODE	4069:4	4069:4	8	while
LEAF_NODE	4069:10	4069:10	7	(
CONDITION	4069:11	4069:11	7	ready_bits > 0
EXPR	4069:11	4069:24	8	ready_bits > 0
FIELD	4069:11	4069:11	9	ready_bits
LEAF_NODE	4069:11	4069:11	10	ready_bits
REL_OPERATOR	4069:22	4069:22	9	>
LEAF_NODE	4069:22	4069:22	10	>
FIELD	4069:24	4069:24	9	0
LEAF_NODE	4069:24	4069:24	10	0
LEAF_NODE	4069:25	4069:25	7	)
STATEMENTS	4070:6	4077:6	7	
LEAF_NODE	4070:6	4070:6	8	{
STATEMENTS	4071:1	4076:1	8	
EXPR_STATEMENT	4071:1	4071:26	9	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	4071:1	4071:1	10	bytebuff1 = ( buff2 >> 24 )
ASSIGN	4071:1	4071:13	11	bytebuff1 = ( buff2 >> 24 )
LVAL	4071:1	4071:1	12	bytebuff1
FIELD	4071:1	4071:1	13	bytebuff1
LEAF_NODE	4071:1	4071:1	14	bytebuff1
ASSIGN_OP	4071:11	4071:11	12	=
LEAF_NODE	4071:11	4071:11	13	=
RVAL	4071:13	4071:25	12	( buff2 >> 24 )
LEAF_NODE	4071:13	4071:13	13	(
FIELD	4071:14	4071:14	13	buff2
LEAF_NODE	4071:14	4071:14	14	buff2
LEAF_NODE	4071:20	4071:20	13	>>
FIELD	4071:23	4071:23	13	24
LEAF_NODE	4071:23	4071:23	14	24
LEAF_NODE	4071:25	4071:25	13	)
LEAF_NODE	4071:26	4071:26	10	;
EXPR_STATEMENT	4072:1	4072:19	9	* dst ++ = bytebuff1 ;
EXPR	4072:1	4072:1	10	* dst ++ = bytebuff1
ASSIGN	4072:1	4072:10	11	* dst ++ = bytebuff1
LVAL	4072:1	4072:1	12	* dst ++
UNARY_EXPR	4072:1	4072:2	13	* dst ++
UNARY_OPERATOR	4072:1	4072:1	14	*
LEAF_NODE	4072:1	4072:1	15	*
FIELD	4072:2	4072:5	14	dst ++
LEAF_NODE	4072:2	4072:2	15	dst
LEAF_NODE	4072:5	4072:5	15	++
ASSIGN_OP	4072:8	4072:8	12	=
LEAF_NODE	4072:8	4072:8	13	=
RVAL	4072:10	4072:10	12	bytebuff1
FIELD	4072:10	4072:10	13	bytebuff1
LEAF_NODE	4072:10	4072:10	14	bytebuff1
LEAF_NODE	4072:19	4072:19	10	;
EXPR_STATEMENT	4074:1	4074:21	9	buff2 = ( buff2 << 8 ) ;
EXPR	4074:1	4074:1	10	buff2 = ( buff2 << 8 )
ASSIGN	4074:1	4074:9	11	buff2 = ( buff2 << 8 )
LVAL	4074:1	4074:1	12	buff2
FIELD	4074:1	4074:1	13	buff2
LEAF_NODE	4074:1	4074:1	14	buff2
ASSIGN_OP	4074:7	4074:7	12	=
LEAF_NODE	4074:7	4074:7	13	=
RVAL	4074:9	4074:20	12	( buff2 << 8 )
LEAF_NODE	4074:9	4074:9	13	(
FIELD	4074:10	4074:10	13	buff2
LEAF_NODE	4074:10	4074:10	14	buff2
LEAF_NODE	4074:16	4074:16	13	<<
FIELD	4074:19	4074:19	13	8
LEAF_NODE	4074:19	4074:19	14	8
LEAF_NODE	4074:20	4074:20	13	)
LEAF_NODE	4074:21	4074:21	10	;
EXPR_STATEMENT	4075:1	4075:22	9	bytebuff2 = bytebuff1 ;
EXPR	4075:1	4075:1	10	bytebuff2 = bytebuff1
ASSIGN	4075:1	4075:13	11	bytebuff2 = bytebuff1
LVAL	4075:1	4075:1	12	bytebuff2
FIELD	4075:1	4075:1	13	bytebuff2
LEAF_NODE	4075:1	4075:1	14	bytebuff2
ASSIGN_OP	4075:11	4075:11	12	=
LEAF_NODE	4075:11	4075:11	13	=
RVAL	4075:13	4075:13	12	bytebuff1
FIELD	4075:13	4075:13	13	bytebuff1
LEAF_NODE	4075:13	4075:13	14	bytebuff1
LEAF_NODE	4075:22	4075:22	10	;
EXPR_STATEMENT	4076:1	4076:16	9	ready_bits -= 8 ;
EXPR	4076:1	4076:1	10	ready_bits -= 8
ASSIGN	4076:1	4076:15	11	ready_bits -= 8
LVAL	4076:1	4076:1	12	ready_bits
FIELD	4076:1	4076:1	13	ready_bits
LEAF_NODE	4076:1	4076:1	14	ready_bits
ASSIGN_OP	4076:12	4076:12	12	-=
LEAF_NODE	4076:12	4076:12	13	-=
RVAL	4076:15	4076:15	12	8
FIELD	4076:15	4076:15	13	8
LEAF_NODE	4076:15	4076:15	14	8
LEAF_NODE	4076:16	4076:16	10	;
LEAF_NODE	4077:6	4077:6	8	}
SELECTION	4079:4	4080:6	6	
KEYWORD	4079:4	4079:4	7	if
LEAF_NODE	4079:4	4079:4	8	if
LEAF_NODE	4079:7	4079:7	7	(
CONDITION	4079:8	4079:8	7	( dumpfile != NULL ) && ( level == 3 )
EXPR	4079:8	4079:8	8	( dumpfile != NULL ) && ( level == 3 )
AND	4079:8	4079:30	9	( dumpfile != NULL ) && ( level == 3 )
EXPR	4079:8	4079:25	10	( dumpfile != NULL )
LEAF_NODE	4079:8	4079:8	11	(
FIELD	4079:9	4079:9	11	dumpfile
LEAF_NODE	4079:9	4079:9	12	dumpfile
EQ_OPERATOR	4079:18	4079:18	11	!=
LEAF_NODE	4079:18	4079:18	12	!=
FIELD	4079:21	4079:21	11	NULL
LEAF_NODE	4079:21	4079:21	12	NULL
LEAF_NODE	4079:25	4079:25	11	)
LEAF_NODE	4079:27	4079:27	10	&&
EXPR	4079:30	4079:41	10	( level == 3 )
LEAF_NODE	4079:30	4079:30	11	(
FIELD	4079:31	4079:31	11	level
LEAF_NODE	4079:31	4079:31	12	level
EQ_OPERATOR	4079:37	4079:37	11	==
LEAF_NODE	4079:37	4079:37	12	==
FIELD	4079:40	4079:40	11	3
LEAF_NODE	4079:40	4079:40	12	3
LEAF_NODE	4079:41	4079:41	11	)
LEAF_NODE	4079:42	4079:42	7	)
STATEMENTS	4080:6	4092:6	7	
LEAF_NODE	4080:6	4080:6	8	{
STATEMENTS	4081:6	4091:6	8	
EXPR_STATEMENT	4081:6	4083:52	9	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	4081:6	4081:6	10	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	4081:6	4083:51	11	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	4081:6	4081:6	12	dump_info
LEAF_NODE	4081:6	4081:6	13	dump_info
LEAF_NODE	4081:16	4081:16	12	(
ARGUMENT	4081:17	4081:17	12	dumpfile
FIELD	4081:17	4081:17	13	dumpfile
LEAF_NODE	4081:17	4081:17	14	dumpfile
LEAF_NODE	4081:25	4081:25	12	,
ARGUMENT	4081:27	4081:27	12	format
FIELD	4081:27	4081:27	13	format
LEAF_NODE	4081:27	4081:27	14	format
LEAF_NODE	4081:33	4081:33	12	,
ARGUMENT	4081:35	4081:35	12	""
FIELD	4081:35	4081:35	13	""
LEAF_NODE	4081:35	4081:35	14	""
LEAF_NODE	4081:37	4081:37	12	,
ARGUMENT	4082:5	4082:5	12	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4082:5	4082:5	13	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4082:5	4082:5	14	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4082:76	4082:76	12	,
ARGUMENT	4083:5	4083:11	12	row + 1
FIELD	4083:5	4083:5	13	row
LEAF_NODE	4083:5	4083:5	14	row
LEAF_NODE	4083:9	4083:9	13	+
FIELD	4083:11	4083:11	13	1
LEAF_NODE	4083:11	4083:11	14	1
LEAF_NODE	4083:12	4083:12	12	,
ARGUMENT	4083:14	4083:20	12	col + 1
FIELD	4083:14	4083:14	13	col
LEAF_NODE	4083:14	4083:14	14	col
LEAF_NODE	4083:18	4083:18	13	+
FIELD	4083:20	4083:20	13	1
LEAF_NODE	4083:20	4083:20	14	1
LEAF_NODE	4083:21	4083:21	12	,
ARGUMENT	4083:23	4083:23	12	src_byte
FIELD	4083:23	4083:23	13	src_byte
LEAF_NODE	4083:23	4083:23	14	src_byte
LEAF_NODE	4083:31	4083:31	12	,
ARGUMENT	4083:33	4083:33	12	src_bit
FIELD	4083:33	4083:33	13	src_bit
LEAF_NODE	4083:33	4083:33	14	src_bit
LEAF_NODE	4083:40	4083:40	12	,
ARGUMENT	4083:42	4083:48	12	dst - out
FIELD	4083:42	4083:42	13	dst
LEAF_NODE	4083:42	4083:42	14	dst
LEAF_NODE	4083:46	4083:46	13	-
FIELD	4083:48	4083:48	13	out
LEAF_NODE	4083:48	4083:48	14	out
LEAF_NODE	4083:51	4083:51	12	)
LEAF_NODE	4083:52	4083:52	10	;
EXPR_STATEMENT	4085:6	4085:60	9	dump_long ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4085:6	4085:6	10	dump_long ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4085:6	4085:59	11	dump_long ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4085:6	4085:6	12	dump_long
LEAF_NODE	4085:6	4085:6	13	dump_long
LEAF_NODE	4085:16	4085:16	12	(
ARGUMENT	4085:17	4085:17	12	dumpfile
FIELD	4085:17	4085:17	13	dumpfile
LEAF_NODE	4085:17	4085:17	14	dumpfile
LEAF_NODE	4085:25	4085:25	12	,
ARGUMENT	4085:27	4085:27	12	format
FIELD	4085:27	4085:27	13	format
LEAF_NODE	4085:27	4085:27	14	format
LEAF_NODE	4085:33	4085:33	12	,
ARGUMENT	4085:35	4085:35	12	"Match bits "
FIELD	4085:35	4085:35	13	"Match bits "
LEAF_NODE	4085:35	4085:35	14	"Match bits "
LEAF_NODE	4085:48	4085:48	12	,
ARGUMENT	4085:50	4085:50	12	matchbits
FIELD	4085:50	4085:50	13	matchbits
LEAF_NODE	4085:50	4085:50	14	matchbits
LEAF_NODE	4085:59	4085:59	12	)
LEAF_NODE	4085:60	4085:60	10	;
EXPR_STATEMENT	4086:6	4086:57	9	dump_data ( dumpfile , format , "Src   bits " , src , 4 ) ;
EXPR	4086:6	4086:6	10	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
FUNCTION_CALL	4086:6	4086:56	11	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
CALLEE	4086:6	4086:6	12	dump_data
LEAF_NODE	4086:6	4086:6	13	dump_data
LEAF_NODE	4086:16	4086:16	12	(
ARGUMENT	4086:17	4086:17	12	dumpfile
FIELD	4086:17	4086:17	13	dumpfile
LEAF_NODE	4086:17	4086:17	14	dumpfile
LEAF_NODE	4086:25	4086:25	12	,
ARGUMENT	4086:27	4086:27	12	format
FIELD	4086:27	4086:27	13	format
LEAF_NODE	4086:27	4086:27	14	format
LEAF_NODE	4086:33	4086:33	12	,
ARGUMENT	4086:35	4086:35	12	"Src   bits "
FIELD	4086:35	4086:35	13	"Src   bits "
LEAF_NODE	4086:35	4086:35	14	"Src   bits "
LEAF_NODE	4086:48	4086:48	12	,
ARGUMENT	4086:50	4086:50	12	src
FIELD	4086:50	4086:50	13	src
LEAF_NODE	4086:50	4086:50	14	src
LEAF_NODE	4086:53	4086:53	12	,
ARGUMENT	4086:55	4086:55	12	4
FIELD	4086:55	4086:55	13	4
LEAF_NODE	4086:55	4086:55	14	4
LEAF_NODE	4086:56	4086:56	12	)
LEAF_NODE	4086:57	4086:57	10	;
EXPR_STATEMENT	4087:6	4087:56	9	dump_long ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4087:6	4087:6	10	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4087:6	4087:55	11	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4087:6	4087:6	12	dump_long
LEAF_NODE	4087:6	4087:6	13	dump_long
LEAF_NODE	4087:16	4087:16	12	(
ARGUMENT	4087:17	4087:17	12	dumpfile
FIELD	4087:17	4087:17	13	dumpfile
LEAF_NODE	4087:17	4087:17	14	dumpfile
LEAF_NODE	4087:25	4087:25	12	,
ARGUMENT	4087:27	4087:27	12	format
FIELD	4087:27	4087:27	13	format
LEAF_NODE	4087:27	4087:27	14	format
LEAF_NODE	4087:33	4087:33	12	,
ARGUMENT	4087:35	4087:35	12	"Buff1 bits "
FIELD	4087:35	4087:35	13	"Buff1 bits "
LEAF_NODE	4087:35	4087:35	14	"Buff1 bits "
LEAF_NODE	4087:48	4087:48	12	,
ARGUMENT	4087:50	4087:50	12	buff1
FIELD	4087:50	4087:50	13	buff1
LEAF_NODE	4087:50	4087:50	14	buff1
LEAF_NODE	4087:55	4087:55	12	)
LEAF_NODE	4087:56	4087:56	10	;
EXPR_STATEMENT	4088:6	4088:56	9	dump_long ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4088:6	4088:6	10	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4088:6	4088:55	11	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4088:6	4088:6	12	dump_long
LEAF_NODE	4088:6	4088:6	13	dump_long
LEAF_NODE	4088:16	4088:16	12	(
ARGUMENT	4088:17	4088:17	12	dumpfile
FIELD	4088:17	4088:17	13	dumpfile
LEAF_NODE	4088:17	4088:17	14	dumpfile
LEAF_NODE	4088:25	4088:25	12	,
ARGUMENT	4088:27	4088:27	12	format
FIELD	4088:27	4088:27	13	format
LEAF_NODE	4088:27	4088:27	14	format
LEAF_NODE	4088:33	4088:33	12	,
ARGUMENT	4088:35	4088:35	12	"Buff2 bits "
FIELD	4088:35	4088:35	13	"Buff2 bits "
LEAF_NODE	4088:35	4088:35	14	"Buff2 bits "
LEAF_NODE	4088:48	4088:48	12	,
ARGUMENT	4088:50	4088:50	12	buff2
FIELD	4088:50	4088:50	13	buff2
LEAF_NODE	4088:50	4088:50	14	buff2
LEAF_NODE	4088:55	4088:55	12	)
LEAF_NODE	4088:56	4088:56	10	;
EXPR_STATEMENT	4089:6	4089:60	9	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 ) ;
EXPR	4089:6	4089:6	10	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
FUNCTION_CALL	4089:6	4089:59	11	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
CALLEE	4089:6	4089:6	12	dump_byte
LEAF_NODE	4089:6	4089:6	13	dump_byte
LEAF_NODE	4089:16	4089:16	12	(
ARGUMENT	4089:17	4089:17	12	dumpfile
FIELD	4089:17	4089:17	13	dumpfile
LEAF_NODE	4089:17	4089:17	14	dumpfile
LEAF_NODE	4089:25	4089:25	12	,
ARGUMENT	4089:27	4089:27	12	format
FIELD	4089:27	4089:27	13	format
LEAF_NODE	4089:27	4089:27	14	format
LEAF_NODE	4089:33	4089:33	12	,
ARGUMENT	4089:35	4089:35	12	"Write bits1"
FIELD	4089:35	4089:35	13	"Write bits1"
LEAF_NODE	4089:35	4089:35	14	"Write bits1"
LEAF_NODE	4089:48	4089:48	12	,
ARGUMENT	4089:50	4089:50	12	bytebuff1
FIELD	4089:50	4089:50	13	bytebuff1
LEAF_NODE	4089:50	4089:50	14	bytebuff1
LEAF_NODE	4089:59	4089:59	12	)
LEAF_NODE	4089:60	4089:60	10	;
EXPR_STATEMENT	4090:6	4090:60	9	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 ) ;
EXPR	4090:6	4090:6	10	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
FUNCTION_CALL	4090:6	4090:59	11	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
CALLEE	4090:6	4090:6	12	dump_byte
LEAF_NODE	4090:6	4090:6	13	dump_byte
LEAF_NODE	4090:16	4090:16	12	(
ARGUMENT	4090:17	4090:17	12	dumpfile
FIELD	4090:17	4090:17	13	dumpfile
LEAF_NODE	4090:17	4090:17	14	dumpfile
LEAF_NODE	4090:25	4090:25	12	,
ARGUMENT	4090:27	4090:27	12	format
FIELD	4090:27	4090:27	13	format
LEAF_NODE	4090:27	4090:27	14	format
LEAF_NODE	4090:33	4090:33	12	,
ARGUMENT	4090:35	4090:35	12	"Write bits2"
FIELD	4090:35	4090:35	13	"Write bits2"
LEAF_NODE	4090:35	4090:35	14	"Write bits2"
LEAF_NODE	4090:48	4090:48	12	,
ARGUMENT	4090:50	4090:50	12	bytebuff2
FIELD	4090:50	4090:50	13	bytebuff2
LEAF_NODE	4090:50	4090:50	14	bytebuff2
LEAF_NODE	4090:59	4090:59	12	)
LEAF_NODE	4090:60	4090:60	10	;
EXPR_STATEMENT	4091:6	4091:70	9	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits ) ;
EXPR	4091:6	4091:6	10	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
FUNCTION_CALL	4091:6	4091:69	11	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
CALLEE	4091:6	4091:6	12	dump_info
LEAF_NODE	4091:6	4091:6	13	dump_info
LEAF_NODE	4091:16	4091:16	12	(
ARGUMENT	4091:17	4091:17	12	dumpfile
FIELD	4091:17	4091:17	13	dumpfile
LEAF_NODE	4091:17	4091:17	14	dumpfile
LEAF_NODE	4091:25	4091:25	12	,
ARGUMENT	4091:27	4091:27	12	format
FIELD	4091:27	4091:27	13	format
LEAF_NODE	4091:27	4091:27	14	format
LEAF_NODE	4091:33	4091:33	12	,
ARGUMENT	4091:35	4091:35	12	""
FIELD	4091:35	4091:35	13	""
LEAF_NODE	4091:35	4091:35	14	""
LEAF_NODE	4091:37	4091:37	12	,
ARGUMENT	4091:39	4091:39	12	"Ready bits:  %2d"
FIELD	4091:39	4091:39	13	"Ready bits:  %2d"
LEAF_NODE	4091:39	4091:39	14	"Ready bits:  %2d"
LEAF_NODE	4091:57	4091:57	12	,
ARGUMENT	4091:59	4091:59	12	ready_bits
FIELD	4091:59	4091:59	13	ready_bits
LEAF_NODE	4091:59	4091:59	14	ready_bits
LEAF_NODE	4091:69	4091:69	12	)
LEAF_NODE	4091:70	4091:70	10	;
LEAF_NODE	4092:6	4092:6	8	}
SELECTION	4094:4	4095:6	6	
KEYWORD	4094:4	4094:4	7	if
LEAF_NODE	4094:4	4094:4	8	if
LEAF_NODE	4094:7	4094:7	7	(
CONDITION	4094:8	4094:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	4094:8	4094:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	4094:8	4094:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	4094:8	4094:25	10	( dumpfile != NULL )
LEAF_NODE	4094:8	4094:8	11	(
FIELD	4094:9	4094:9	11	dumpfile
LEAF_NODE	4094:9	4094:9	12	dumpfile
EQ_OPERATOR	4094:18	4094:18	11	!=
LEAF_NODE	4094:18	4094:18	12	!=
FIELD	4094:21	4094:21	11	NULL
LEAF_NODE	4094:21	4094:21	12	NULL
LEAF_NODE	4094:25	4094:25	11	)
LEAF_NODE	4094:27	4094:27	10	&&
EXPR	4094:30	4094:41	10	( level == 2 )
LEAF_NODE	4094:30	4094:30	11	(
FIELD	4094:31	4094:31	11	level
LEAF_NODE	4094:31	4094:31	12	level
EQ_OPERATOR	4094:37	4094:37	11	==
LEAF_NODE	4094:37	4094:37	12	==
FIELD	4094:40	4094:40	11	2
LEAF_NODE	4094:40	4094:40	12	2
LEAF_NODE	4094:41	4094:41	11	)
LEAF_NODE	4094:42	4094:42	7	)
STATEMENTS	4095:6	4098:6	7	
LEAF_NODE	4095:6	4095:6	8	{
STATEMENTS	4096:6	4097:6	8	
EXPR_STATEMENT	4096:6	4096:80	9	dump_info ( dumpfile , format , "combineSeparateSamples24bits" , "Output data" ) ;
EXPR	4096:6	4096:6	10	dump_info ( dumpfile , format , "combineSeparateSamples24bits" , "Output data" )
FUNCTION_CALL	4096:6	4096:79	11	dump_info ( dumpfile , format , "combineSeparateSamples24bits" , "Output data" )
CALLEE	4096:6	4096:6	12	dump_info
LEAF_NODE	4096:6	4096:6	13	dump_info
LEAF_NODE	4096:16	4096:16	12	(
ARGUMENT	4096:17	4096:17	12	dumpfile
FIELD	4096:17	4096:17	13	dumpfile
LEAF_NODE	4096:17	4096:17	14	dumpfile
LEAF_NODE	4096:25	4096:25	12	,
ARGUMENT	4096:27	4096:27	12	format
FIELD	4096:27	4096:27	13	format
LEAF_NODE	4096:27	4096:27	14	format
LEAF_NODE	4096:33	4096:33	12	,
ARGUMENT	4096:35	4096:35	12	"combineSeparateSamples24bits"
FIELD	4096:35	4096:35	13	"combineSeparateSamples24bits"
LEAF_NODE	4096:35	4096:35	14	"combineSeparateSamples24bits"
LEAF_NODE	4096:65	4096:65	12	,
ARGUMENT	4096:66	4096:66	12	"Output data"
FIELD	4096:66	4096:66	13	"Output data"
LEAF_NODE	4096:66	4096:66	14	"Output data"
LEAF_NODE	4096:79	4096:79	12	)
LEAF_NODE	4096:80	4096:80	10	;
EXPR_STATEMENT	4097:6	4097:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	4097:6	4097:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	4097:6	4097:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	4097:6	4097:6	12	dump_buffer
LEAF_NODE	4097:6	4097:6	13	dump_buffer
LEAF_NODE	4097:17	4097:17	12	(
ARGUMENT	4097:18	4097:18	12	dumpfile
FIELD	4097:18	4097:18	13	dumpfile
LEAF_NODE	4097:18	4097:18	14	dumpfile
LEAF_NODE	4097:26	4097:26	12	,
ARGUMENT	4097:28	4097:28	12	format
FIELD	4097:28	4097:28	13	format
LEAF_NODE	4097:28	4097:28	14	format
LEAF_NODE	4097:34	4097:34	12	,
ARGUMENT	4097:36	4097:36	12	1
FIELD	4097:36	4097:36	13	1
LEAF_NODE	4097:36	4097:36	14	1
LEAF_NODE	4097:37	4097:37	12	,
ARGUMENT	4097:39	4097:39	12	dst_rowsize
FIELD	4097:39	4097:39	13	dst_rowsize
LEAF_NODE	4097:39	4097:39	14	dst_rowsize
LEAF_NODE	4097:50	4097:50	12	,
ARGUMENT	4097:52	4097:52	12	row
FIELD	4097:52	4097:52	13	row
LEAF_NODE	4097:52	4097:52	14	row
LEAF_NODE	4097:55	4097:55	12	,
ARGUMENT	4097:57	4097:81	12	out + ( row * dst_rowsize )
FIELD	4097:57	4097:57	13	out
LEAF_NODE	4097:57	4097:57	14	out
LEAF_NODE	4097:61	4097:61	13	+
LEAF_NODE	4097:63	4097:63	13	(
FIELD	4097:64	4097:64	13	row
LEAF_NODE	4097:64	4097:64	14	row
LEAF_NODE	4097:68	4097:68	13	*
FIELD	4097:70	4097:70	13	dst_rowsize
LEAF_NODE	4097:70	4097:70	14	dst_rowsize
LEAF_NODE	4097:81	4097:81	13	)
LEAF_NODE	4097:82	4097:82	12	)
LEAF_NODE	4097:83	4097:83	10	;
LEAF_NODE	4098:6	4098:6	8	}
LEAF_NODE	4099:4	4099:4	5	}
JUMP_STATEMENT	4101:2	4101:12	3	return ( 0 ) ;
KEYWORD	4101:2	4101:2	4	return
LEAF_NODE	4101:2	4101:2	5	return
DESTINATION	4101:9	4101:9	4	( 0 )
EXPR	4101:9	4101:11	5	( 0 )
LEAF_NODE	4101:9	4101:9	6	(
FIELD	4101:10	4101:10	6	0
LEAF_NODE	4101:10	4101:10	7	0
LEAF_NODE	4101:11	4101:11	6	)
LEAF_NODE	4101:12	4101:12	4	;
LEAF_NODE	4102:2	4102:2	2	}
FUNCTION_DEF	4104:0	4233:2	1	
RETURN_TYPE	4104:0	4104:7	2	static int
LEAF_NODE	4104:0	4104:0	3	static
TYPE_NAME	4104:7	4104:7	3	int
LEAF_NODE	4104:7	4104:7	4	int
FUNCTION_NAME	4105:0	4105:0	2	combineSeparateSamples32bits
LEAF_NODE	4105:0	4105:0	3	combineSeparateSamples32bits
PARAMETER_LIST	4105:29	4107:60	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	4105:29	4105:29	3	(
PARAMETER_DECL	4105:30	4105:37	3	uint8 * [ ] in
TYPE	4105:30	4105:39	4	uint8 * [ ]
TYPE_NAME	4105:30	4105:30	5	uint8
LEAF_NODE	4105:30	4105:30	6	uint8
POINTER	4105:36	4105:36	5	*
LEAF_NODE	4105:36	4105:36	6	*
TYPE_SUFFIX	4105:39	4105:40	5	[ ]
LEAF_NODE	4105:39	4105:39	6	[
LEAF_NODE	4105:40	4105:40	6	]
NAME	4105:37	4105:37	4	in
LEAF_NODE	4105:37	4105:37	5	in
LEAF_NODE	4105:41	4105:41	3	,
PARAMETER_DECL	4105:43	4105:50	3	uint8 * out
TYPE	4105:43	4105:49	4	uint8 *
TYPE_NAME	4105:43	4105:43	5	uint8
LEAF_NODE	4105:43	4105:43	6	uint8
POINTER	4105:49	4105:49	5	*
LEAF_NODE	4105:49	4105:49	6	*
NAME	4105:50	4105:50	4	out
LEAF_NODE	4105:50	4105:50	5	out
LEAF_NODE	4105:53	4105:53	3	,
PARAMETER_DECL	4105:55	4105:62	3	uint32 cols
TYPE	4105:55	4105:55	4	uint32
TYPE_NAME	4105:55	4105:55	5	uint32
LEAF_NODE	4105:55	4105:55	6	uint32
NAME	4105:62	4105:62	4	cols
LEAF_NODE	4105:62	4105:62	5	cols
LEAF_NODE	4105:66	4105:66	3	,
PARAMETER_DECL	4106:30	4106:37	3	uint32 rows
TYPE	4106:30	4106:30	4	uint32
TYPE_NAME	4106:30	4106:30	5	uint32
LEAF_NODE	4106:30	4106:30	6	uint32
NAME	4106:37	4106:37	4	rows
LEAF_NODE	4106:37	4106:37	5	rows
LEAF_NODE	4106:41	4106:41	3	,
PARAMETER_DECL	4106:43	4106:50	3	uint16 spp
TYPE	4106:43	4106:43	4	uint16
TYPE_NAME	4106:43	4106:43	5	uint16
LEAF_NODE	4106:43	4106:43	6	uint16
NAME	4106:50	4106:50	4	spp
LEAF_NODE	4106:50	4106:50	5	spp
LEAF_NODE	4106:53	4106:53	3	,
PARAMETER_DECL	4106:55	4106:62	3	uint16 bps
TYPE	4106:55	4106:55	4	uint16
TYPE_NAME	4106:55	4106:55	5	uint16
LEAF_NODE	4106:55	4106:55	6	uint16
NAME	4106:62	4106:62	4	bps
LEAF_NODE	4106:62	4106:62	5	bps
LEAF_NODE	4106:65	4106:65	3	,
PARAMETER_DECL	4107:23	4107:29	3	FILE * dumpfile
TYPE	4107:23	4107:28	4	FILE *
TYPE_NAME	4107:23	4107:23	5	FILE
LEAF_NODE	4107:23	4107:23	6	FILE
POINTER	4107:28	4107:28	5	*
LEAF_NODE	4107:28	4107:28	6	*
NAME	4107:29	4107:29	4	dumpfile
LEAF_NODE	4107:29	4107:29	5	dumpfile
LEAF_NODE	4107:37	4107:37	3	,
PARAMETER_DECL	4107:39	4107:43	3	int format
TYPE	4107:39	4107:39	4	int
TYPE_NAME	4107:39	4107:39	5	int
LEAF_NODE	4107:39	4107:39	6	int
NAME	4107:43	4107:43	4	format
LEAF_NODE	4107:43	4107:43	5	format
LEAF_NODE	4107:49	4107:49	3	,
PARAMETER_DECL	4107:51	4107:55	3	int level
TYPE	4107:51	4107:51	4	int
TYPE_NAME	4107:51	4107:51	5	int
LEAF_NODE	4107:51	4107:51	6	int
NAME	4107:55	4107:55	4	level
LEAF_NODE	4107:55	4107:55	5	level
LEAF_NODE	4107:60	4107:60	3	)
LEAF_NODE	4108:2	4108:2	2	{
STATEMENTS	4109:2	4232:2	2	
SIMPLE_DECL	4109:2	4109:68	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	4109:2	4109:9	4	int ready_bits ; ready_bits = 0
TYPE	4109:2	4109:2	5	int
TYPE_NAME	4109:2	4109:2	6	int
LEAF_NODE	4109:2	4109:2	7	int
NAME	4109:9	4109:9	5	ready_bits
LEAF_NODE	4109:9	4109:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	4109:9	4109:9	5	ready_bits = 0
ASSIGN	4109:9	4109:22	6	ready_bits = 0
LVAL	4109:9	4109:9	7	ready_bits
NAME	4109:9	4109:9	8	ready_bits
LEAF_NODE	4109:9	4109:9	9	ready_bits
ASSIGN_OP	4109:20	4109:20	7	=
LEAF_NODE	4109:20	4109:20	8	=
RVAL	4109:22	4109:22	7	0
FIELD	4109:22	4109:22	8	0
LEAF_NODE	4109:22	4109:22	9	0
LEAF_NODE	4109:68	4109:68	4	;
SIMPLE_DECL	4110:2	4110:57	3	uint32 src_rowsize , uint32 dst_rowsize , uint32 bit_offset , uint32 src_offset ;
INIT_DECL_LIST	4110:2	4110:2	4	uint32 src_rowsize , uint32 dst_rowsize , uint32 bit_offset , uint32 src_offset
VAR_DECL	4110:2	4110:9	5	uint32 src_rowsize
TYPE	4110:2	4110:2	6	uint32
TYPE_NAME	4110:2	4110:2	7	uint32
LEAF_NODE	4110:2	4110:2	8	uint32
NAME	4110:9	4110:9	6	src_rowsize
LEAF_NODE	4110:9	4110:9	7	src_rowsize
LEAF_NODE	4110:20	4110:20	5	,
INIT_DECL_LIST	4110:2	4110:2	5	uint32 dst_rowsize , uint32 bit_offset , uint32 src_offset
VAR_DECL	4110:2	4110:22	6	uint32 dst_rowsize
TYPE	4110:2	4110:2	7	uint32
TYPE_NAME	4110:2	4110:2	8	uint32
LEAF_NODE	4110:2	4110:2	9	uint32
NAME	4110:22	4110:22	7	dst_rowsize
LEAF_NODE	4110:22	4110:22	8	dst_rowsize
LEAF_NODE	4110:33	4110:33	6	,
INIT_DECL_LIST	4110:2	4110:2	6	uint32 bit_offset , uint32 src_offset
VAR_DECL	4110:2	4110:35	7	uint32 bit_offset
TYPE	4110:2	4110:2	8	uint32
TYPE_NAME	4110:2	4110:2	9	uint32
LEAF_NODE	4110:2	4110:2	10	uint32
NAME	4110:35	4110:35	8	bit_offset
LEAF_NODE	4110:35	4110:35	9	bit_offset
LEAF_NODE	4110:45	4110:45	7	,
VAR_DECL	4110:2	4110:47	7	uint32 src_offset
TYPE	4110:2	4110:2	8	uint32
TYPE_NAME	4110:2	4110:2	9	uint32
LEAF_NODE	4110:2	4110:2	10	uint32
NAME	4110:47	4110:47	8	src_offset
LEAF_NODE	4110:47	4110:47	9	src_offset
LEAF_NODE	4110:57	4110:57	4	;
SIMPLE_DECL	4111:2	4111:34	3	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	4111:2	4111:2	4	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4111:2	4111:9	5	uint32 src_byte ; src_byte = 0
TYPE	4111:2	4111:2	6	uint32
TYPE_NAME	4111:2	4111:2	7	uint32
LEAF_NODE	4111:2	4111:2	8	uint32
NAME	4111:9	4111:9	6	src_byte
LEAF_NODE	4111:9	4111:9	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	4111:9	4111:9	6	src_byte = 0
ASSIGN	4111:9	4111:20	7	src_byte = 0
LVAL	4111:9	4111:9	8	src_byte
NAME	4111:9	4111:9	9	src_byte
LEAF_NODE	4111:9	4111:9	10	src_byte
ASSIGN_OP	4111:18	4111:18	8	=
LEAF_NODE	4111:18	4111:18	9	=
RVAL	4111:20	4111:20	8	0
FIELD	4111:20	4111:20	9	0
LEAF_NODE	4111:20	4111:20	10	0
LEAF_NODE	4111:21	4111:21	5	,
VAR_DECL	4111:2	4111:23	5	uint32 src_bit ; src_bit = 0
TYPE	4111:2	4111:2	6	uint32
TYPE_NAME	4111:2	4111:2	7	uint32
LEAF_NODE	4111:2	4111:2	8	uint32
NAME	4111:23	4111:23	6	src_bit
LEAF_NODE	4111:23	4111:23	7	src_bit
LEAF_NODE	0:0	0:0	6	;
INIT	4111:23	4111:23	6	src_bit = 0
ASSIGN	4111:23	4111:33	7	src_bit = 0
LVAL	4111:23	4111:23	8	src_bit
NAME	4111:23	4111:23	9	src_bit
LEAF_NODE	4111:23	4111:23	10	src_bit
ASSIGN_OP	4111:31	4111:31	8	=
LEAF_NODE	4111:31	4111:31	9	=
RVAL	4111:33	4111:33	8	0
FIELD	4111:33	4111:33	9	0
LEAF_NODE	4111:33	4111:33	10	0
LEAF_NODE	4111:34	4111:34	4	;
SIMPLE_DECL	4112:2	4112:17	3	uint32 row , uint32 col ;
INIT_DECL_LIST	4112:2	4112:2	4	uint32 row , uint32 col
VAR_DECL	4112:2	4112:9	5	uint32 row
TYPE	4112:2	4112:2	6	uint32
TYPE_NAME	4112:2	4112:2	7	uint32
LEAF_NODE	4112:2	4112:2	8	uint32
NAME	4112:9	4112:9	6	row
LEAF_NODE	4112:9	4112:9	7	row
LEAF_NODE	4112:12	4112:12	5	,
VAR_DECL	4112:2	4112:14	5	uint32 col
TYPE	4112:2	4112:2	6	uint32
TYPE_NAME	4112:2	4112:2	7	uint32
LEAF_NODE	4112:2	4112:2	8	uint32
NAME	4112:14	4112:14	6	col
LEAF_NODE	4112:14	4112:14	7	col
LEAF_NODE	4112:17	4112:17	4	;
SIMPLE_DECL	4113:2	4113:37	3	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0 ;
INIT_DECL_LIST	4113:2	4113:2	4	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0
VAR_DECL	4113:2	4113:9	5	uint32 longbuff1 ; longbuff1 = 0
TYPE	4113:2	4113:2	6	uint32
TYPE_NAME	4113:2	4113:2	7	uint32
LEAF_NODE	4113:2	4113:2	8	uint32
NAME	4113:9	4113:9	6	longbuff1
LEAF_NODE	4113:9	4113:9	7	longbuff1
LEAF_NODE	0:0	0:0	6	;
INIT	4113:9	4113:9	6	longbuff1 = 0
ASSIGN	4113:9	4113:21	7	longbuff1 = 0
LVAL	4113:9	4113:9	8	longbuff1
NAME	4113:9	4113:9	9	longbuff1
LEAF_NODE	4113:9	4113:9	10	longbuff1
ASSIGN_OP	4113:19	4113:19	8	=
LEAF_NODE	4113:19	4113:19	9	=
RVAL	4113:21	4113:21	8	0
FIELD	4113:21	4113:21	9	0
LEAF_NODE	4113:21	4113:21	10	0
LEAF_NODE	4113:22	4113:22	5	,
VAR_DECL	4113:2	4113:24	5	uint32 longbuff2 ; longbuff2 = 0
TYPE	4113:2	4113:2	6	uint32
TYPE_NAME	4113:2	4113:2	7	uint32
LEAF_NODE	4113:2	4113:2	8	uint32
NAME	4113:24	4113:24	6	longbuff2
LEAF_NODE	4113:24	4113:24	7	longbuff2
LEAF_NODE	0:0	0:0	6	;
INIT	4113:24	4113:24	6	longbuff2 = 0
ASSIGN	4113:24	4113:36	7	longbuff2 = 0
LVAL	4113:24	4113:24	8	longbuff2
NAME	4113:24	4113:24	9	longbuff2
LEAF_NODE	4113:24	4113:24	10	longbuff2
ASSIGN_OP	4113:34	4113:34	8	=
LEAF_NODE	4113:34	4113:34	9	=
RVAL	4113:36	4113:36	8	0
FIELD	4113:36	4113:36	9	0
LEAF_NODE	4113:36	4113:36	10	0
LEAF_NODE	4113:37	4113:37	4	;
SIMPLE_DECL	4114:2	4114:36	3	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	4114:2	4114:2	4	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0
VAR_DECL	4114:2	4114:9	5	uint64 maskbits ; maskbits = 0
TYPE	4114:2	4114:2	6	uint64
TYPE_NAME	4114:2	4114:2	7	uint64
LEAF_NODE	4114:2	4114:2	8	uint64
NAME	4114:9	4114:9	6	maskbits
LEAF_NODE	4114:9	4114:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	4114:9	4114:9	6	maskbits = 0
ASSIGN	4114:9	4114:20	7	maskbits = 0
LVAL	4114:9	4114:9	8	maskbits
NAME	4114:9	4114:9	9	maskbits
LEAF_NODE	4114:9	4114:9	10	maskbits
ASSIGN_OP	4114:18	4114:18	8	=
LEAF_NODE	4114:18	4114:18	9	=
RVAL	4114:20	4114:20	8	0
FIELD	4114:20	4114:20	9	0
LEAF_NODE	4114:20	4114:20	10	0
LEAF_NODE	4114:21	4114:21	5	,
VAR_DECL	4114:2	4114:23	5	uint64 matchbits ; matchbits = 0
TYPE	4114:2	4114:2	6	uint64
TYPE_NAME	4114:2	4114:2	7	uint64
LEAF_NODE	4114:2	4114:2	8	uint64
NAME	4114:23	4114:23	6	matchbits
LEAF_NODE	4114:23	4114:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	4114:23	4114:23	6	matchbits = 0
ASSIGN	4114:23	4114:35	7	matchbits = 0
LVAL	4114:23	4114:23	8	matchbits
NAME	4114:23	4114:23	9	matchbits
LEAF_NODE	4114:23	4114:23	10	matchbits
ASSIGN_OP	4114:33	4114:33	8	=
LEAF_NODE	4114:33	4114:33	9	=
RVAL	4114:35	4114:35	8	0
FIELD	4114:35	4114:35	9	0
LEAF_NODE	4114:35	4114:35	10	0
LEAF_NODE	4114:36	4114:36	4	;
SIMPLE_DECL	4115:2	4115:40	3	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0 ;
INIT_DECL_LIST	4115:2	4115:2	4	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	4115:2	4115:9	5	uint64 buff1 ; buff1 = 0
TYPE	4115:2	4115:2	6	uint64
TYPE_NAME	4115:2	4115:2	7	uint64
LEAF_NODE	4115:2	4115:2	8	uint64
NAME	4115:9	4115:9	6	buff1
LEAF_NODE	4115:9	4115:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	4115:9	4115:9	6	buff1 = 0
ASSIGN	4115:9	4115:17	7	buff1 = 0
LVAL	4115:9	4115:9	8	buff1
NAME	4115:9	4115:9	9	buff1
LEAF_NODE	4115:9	4115:9	10	buff1
ASSIGN_OP	4115:15	4115:15	8	=
LEAF_NODE	4115:15	4115:15	9	=
RVAL	4115:17	4115:17	8	0
FIELD	4115:17	4115:17	9	0
LEAF_NODE	4115:17	4115:17	10	0
LEAF_NODE	4115:18	4115:18	5	,
INIT_DECL_LIST	4115:2	4115:2	5	uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	4115:2	4115:20	6	uint64 buff2 ; buff2 = 0
TYPE	4115:2	4115:2	7	uint64
TYPE_NAME	4115:2	4115:2	8	uint64
LEAF_NODE	4115:2	4115:2	9	uint64
NAME	4115:20	4115:20	7	buff2
LEAF_NODE	4115:20	4115:20	8	buff2
LEAF_NODE	0:0	0:0	7	;
INIT	4115:20	4115:20	7	buff2 = 0
ASSIGN	4115:20	4115:28	8	buff2 = 0
LVAL	4115:20	4115:20	9	buff2
NAME	4115:20	4115:20	10	buff2
LEAF_NODE	4115:20	4115:20	11	buff2
ASSIGN_OP	4115:26	4115:26	9	=
LEAF_NODE	4115:26	4115:26	10	=
RVAL	4115:28	4115:28	9	0
FIELD	4115:28	4115:28	10	0
LEAF_NODE	4115:28	4115:28	11	0
LEAF_NODE	4115:29	4115:29	6	,
VAR_DECL	4115:2	4115:31	6	uint64 buff3 ; buff3 = 0
TYPE	4115:2	4115:2	7	uint64
TYPE_NAME	4115:2	4115:2	8	uint64
LEAF_NODE	4115:2	4115:2	9	uint64
NAME	4115:31	4115:31	7	buff3
LEAF_NODE	4115:31	4115:31	8	buff3
LEAF_NODE	0:0	0:0	7	;
INIT	4115:31	4115:31	7	buff3 = 0
ASSIGN	4115:31	4115:39	8	buff3 = 0
LVAL	4115:31	4115:31	9	buff3
NAME	4115:31	4115:31	10	buff3
LEAF_NODE	4115:31	4115:31	11	buff3
ASSIGN_OP	4115:37	4115:37	9	=
LEAF_NODE	4115:37	4115:37	10	=
RVAL	4115:39	4115:39	9	0
FIELD	4115:39	4115:39	10	0
LEAF_NODE	4115:39	4115:39	11	0
LEAF_NODE	4115:40	4115:40	4	;
SIMPLE_DECL	4116:2	4116:67	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0 ;
INIT_DECL_LIST	4116:2	4116:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	4116:2	4116:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	4116:2	4116:2	6	uint8
TYPE_NAME	4116:2	4116:2	7	uint8
LEAF_NODE	4116:2	4116:2	8	uint8
NAME	4116:9	4116:9	6	bytebuff1
LEAF_NODE	4116:9	4116:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	4116:9	4116:9	6	bytebuff1 = 0
ASSIGN	4116:9	4116:21	7	bytebuff1 = 0
LVAL	4116:9	4116:9	8	bytebuff1
NAME	4116:9	4116:9	9	bytebuff1
LEAF_NODE	4116:9	4116:9	10	bytebuff1
ASSIGN_OP	4116:19	4116:19	8	=
LEAF_NODE	4116:19	4116:19	9	=
RVAL	4116:21	4116:21	8	0
FIELD	4116:21	4116:21	9	0
LEAF_NODE	4116:21	4116:21	10	0
LEAF_NODE	4116:22	4116:22	5	,
INIT_DECL_LIST	4116:2	4116:2	5	uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	4116:2	4116:24	6	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	4116:2	4116:2	7	uint8
TYPE_NAME	4116:2	4116:2	8	uint8
LEAF_NODE	4116:2	4116:2	9	uint8
NAME	4116:24	4116:24	7	bytebuff2
LEAF_NODE	4116:24	4116:24	8	bytebuff2
LEAF_NODE	0:0	0:0	7	;
INIT	4116:24	4116:24	7	bytebuff2 = 0
ASSIGN	4116:24	4116:36	8	bytebuff2 = 0
LVAL	4116:24	4116:24	9	bytebuff2
NAME	4116:24	4116:24	10	bytebuff2
LEAF_NODE	4116:24	4116:24	11	bytebuff2
ASSIGN_OP	4116:34	4116:34	9	=
LEAF_NODE	4116:34	4116:34	10	=
RVAL	4116:36	4116:36	9	0
FIELD	4116:36	4116:36	10	0
LEAF_NODE	4116:36	4116:36	11	0
LEAF_NODE	4116:37	4116:37	6	,
INIT_DECL_LIST	4116:2	4116:2	6	uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	4116:2	4116:39	7	uint8 bytebuff3 ; bytebuff3 = 0
TYPE	4116:2	4116:2	8	uint8
TYPE_NAME	4116:2	4116:2	9	uint8
LEAF_NODE	4116:2	4116:2	10	uint8
NAME	4116:39	4116:39	8	bytebuff3
LEAF_NODE	4116:39	4116:39	9	bytebuff3
LEAF_NODE	0:0	0:0	8	;
INIT	4116:39	4116:39	8	bytebuff3 = 0
ASSIGN	4116:39	4116:51	9	bytebuff3 = 0
LVAL	4116:39	4116:39	10	bytebuff3
NAME	4116:39	4116:39	11	bytebuff3
LEAF_NODE	4116:39	4116:39	12	bytebuff3
ASSIGN_OP	4116:49	4116:49	10	=
LEAF_NODE	4116:49	4116:49	11	=
RVAL	4116:51	4116:51	10	0
FIELD	4116:51	4116:51	11	0
LEAF_NODE	4116:51	4116:51	12	0
LEAF_NODE	4116:52	4116:52	7	,
VAR_DECL	4116:2	4116:54	7	uint8 bytebuff4 ; bytebuff4 = 0
TYPE	4116:2	4116:2	8	uint8
TYPE_NAME	4116:2	4116:2	9	uint8
LEAF_NODE	4116:2	4116:2	10	uint8
NAME	4116:54	4116:54	8	bytebuff4
LEAF_NODE	4116:54	4116:54	9	bytebuff4
LEAF_NODE	0:0	0:0	8	;
INIT	4116:54	4116:54	8	bytebuff4 = 0
ASSIGN	4116:54	4116:66	9	bytebuff4 = 0
LVAL	4116:54	4116:54	10	bytebuff4
NAME	4116:54	4116:54	11	bytebuff4
LEAF_NODE	4116:54	4116:54	12	bytebuff4
ASSIGN_OP	4116:64	4116:64	10	=
LEAF_NODE	4116:64	4116:64	11	=
RVAL	4116:66	4116:66	10	0
FIELD	4116:66	4116:66	11	0
LEAF_NODE	4116:66	4116:66	12	0
LEAF_NODE	4116:67	4116:67	4	;
SIMPLE_DECL	4117:2	4117:13	3	tsample_t s ;
VAR_DECL	4117:2	4117:12	4	tsample_t s
TYPE	4117:2	4117:2	5	tsample_t
TYPE_NAME	4117:2	4117:2	6	tsample_t
LEAF_NODE	4117:2	4117:2	7	tsample_t
NAME	4117:12	4117:12	5	s
LEAF_NODE	4117:12	4117:12	6	s
LEAF_NODE	4117:13	4117:13	4	;
SIMPLE_DECL	4118:2	4118:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	4118:2	4118:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	4118:2	4118:16	5	unsigned char *
TYPE_NAME	4118:2	4118:11	6	unsigned char
LEAF_NODE	4118:2	4118:2	7	unsigned
LEAF_NODE	4118:11	4118:11	7	char
POINTER	4118:16	4118:16	6	*
LEAF_NODE	4118:16	4118:16	7	*
NAME	4118:17	4118:17	5	src
LEAF_NODE	4118:17	4118:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	4118:17	4118:17	5	src = in [ 0 ]
ASSIGN	4118:17	4118:23	6	src = in [ 0 ]
LVAL	4118:17	4118:17	7	src
NAME	4118:17	4118:17	8	src
LEAF_NODE	4118:17	4118:17	9	src
ASSIGN_OP	4118:21	4118:21	7	=
LEAF_NODE	4118:21	4118:21	8	=
RVAL	4118:23	4118:23	7	in [ 0 ]
FIELD	4118:23	4118:27	8	in [ 0 ]
LEAF_NODE	4118:23	4118:23	9	in
LEAF_NODE	4118:25	4118:25	9	[
EXPR	4118:26	4118:26	9	0
FIELD	4118:26	4118:26	10	0
LEAF_NODE	4118:26	4118:26	11	0
LEAF_NODE	4118:27	4118:27	9	]
LEAF_NODE	4118:28	4118:28	4	;
SIMPLE_DECL	4119:2	4119:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	4119:2	4119:17	4	unsigned char * dst ; dst = out
TYPE	4119:2	4119:16	5	unsigned char *
TYPE_NAME	4119:2	4119:11	6	unsigned char
LEAF_NODE	4119:2	4119:2	7	unsigned
LEAF_NODE	4119:11	4119:11	7	char
POINTER	4119:16	4119:16	6	*
LEAF_NODE	4119:16	4119:16	7	*
NAME	4119:17	4119:17	5	dst
LEAF_NODE	4119:17	4119:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	4119:17	4119:17	5	dst = out
ASSIGN	4119:17	4119:23	6	dst = out
LVAL	4119:17	4119:17	7	dst
NAME	4119:17	4119:17	8	dst
LEAF_NODE	4119:17	4119:17	9	dst
ASSIGN_OP	4119:21	4119:21	7	=
LEAF_NODE	4119:21	4119:21	8	=
RVAL	4119:23	4119:23	7	out
FIELD	4119:23	4119:23	8	out
LEAF_NODE	4119:23	4119:23	9	out
LEAF_NODE	4119:26	4119:26	4	;
SIMPLE_DECL	4120:2	4120:26	3	char [ 8 ] action ;
VAR_DECL	4120:2	4120:17	4	char [ 8 ] action
TYPE	4120:2	4120:23	5	char [ 8 ]
TYPE_NAME	4120:2	4120:2	6	char
LEAF_NODE	4120:2	4120:2	7	char
TYPE_SUFFIX	4120:23	4120:25	6	[ 8 ]
LEAF_NODE	4120:23	4120:23	7	[
FIELD	4120:24	4120:24	7	8
LEAF_NODE	4120:24	4120:24	8	8
LEAF_NODE	4120:25	4120:25	7	]
NAME	4120:17	4120:17	5	action
LEAF_NODE	4120:17	4120:17	6	action
LEAF_NODE	4120:26	4120:26	4	;
SELECTION	4122:2	4123:4	3	
KEYWORD	4122:2	4122:2	4	if
LEAF_NODE	4122:2	4122:2	5	if
LEAF_NODE	4122:5	4122:5	4	(
CONDITION	4122:6	4122:6	4	( src == NULL ) || ( dst == NULL )
EXPR	4122:6	4122:6	5	( src == NULL ) || ( dst == NULL )
OR	4122:6	4122:23	6	( src == NULL ) || ( dst == NULL )
EXPR	4122:6	4122:18	7	( src == NULL )
LEAF_NODE	4122:6	4122:6	8	(
FIELD	4122:7	4122:7	8	src
LEAF_NODE	4122:7	4122:7	9	src
EQ_OPERATOR	4122:11	4122:11	8	==
LEAF_NODE	4122:11	4122:11	9	==
FIELD	4122:14	4122:14	8	NULL
LEAF_NODE	4122:14	4122:14	9	NULL
LEAF_NODE	4122:18	4122:18	8	)
LEAF_NODE	4122:20	4122:20	7	||
EXPR	4122:23	4122:35	7	( dst == NULL )
LEAF_NODE	4122:23	4122:23	8	(
FIELD	4122:24	4122:24	8	dst
LEAF_NODE	4122:24	4122:24	9	dst
EQ_OPERATOR	4122:28	4122:28	8	==
LEAF_NODE	4122:28	4122:28	9	==
FIELD	4122:31	4122:31	8	NULL
LEAF_NODE	4122:31	4122:31	9	NULL
LEAF_NODE	4122:35	4122:35	8	)
LEAF_NODE	4122:36	4122:36	4	)
STATEMENTS	4123:4	4126:4	4	
LEAF_NODE	4123:4	4123:4	5	{
STATEMENTS	4124:4	4125:4	5	
EXPR_STATEMENT	4124:4	4124:78	6	TIFFError ( "combineSeparateSamples32bits" , "Invalid input or output buffer" ) ;
EXPR	4124:4	4124:4	7	TIFFError ( "combineSeparateSamples32bits" , "Invalid input or output buffer" )
FUNCTION_CALL	4124:4	4124:77	8	TIFFError ( "combineSeparateSamples32bits" , "Invalid input or output buffer" )
CALLEE	4124:4	4124:4	9	TIFFError
LEAF_NODE	4124:4	4124:4	10	TIFFError
LEAF_NODE	4124:13	4124:13	9	(
ARGUMENT	4124:14	4124:14	9	"combineSeparateSamples32bits"
FIELD	4124:14	4124:14	10	"combineSeparateSamples32bits"
LEAF_NODE	4124:14	4124:14	11	"combineSeparateSamples32bits"
LEAF_NODE	4124:44	4124:44	9	,
ARGUMENT	4124:45	4124:45	9	"Invalid input or output buffer"
FIELD	4124:45	4124:45	10	"Invalid input or output buffer"
LEAF_NODE	4124:45	4124:45	11	"Invalid input or output buffer"
LEAF_NODE	4124:77	4124:77	9	)
LEAF_NODE	4124:78	4124:78	7	;
JUMP_STATEMENT	4125:4	4125:14	6	return ( 1 ) ;
KEYWORD	4125:4	4125:4	7	return
LEAF_NODE	4125:4	4125:4	8	return
DESTINATION	4125:11	4125:11	7	( 1 )
EXPR	4125:11	4125:13	8	( 1 )
LEAF_NODE	4125:11	4125:11	9	(
FIELD	4125:12	4125:12	9	1
LEAF_NODE	4125:12	4125:12	10	1
LEAF_NODE	4125:13	4125:13	9	)
LEAF_NODE	4125:14	4125:14	7	;
LEAF_NODE	4126:4	4126:4	5	}
EXPR_STATEMENT	4129:2	4129:38	3	src_rowsize = ( ( bps * cols ) + 7 ) / 8 ;
EXPR	4129:2	4129:2	4	src_rowsize = ( ( bps * cols ) + 7 ) / 8
ASSIGN	4129:2	4129:16	5	src_rowsize = ( ( bps * cols ) + 7 ) / 8
LVAL	4129:2	4129:2	6	src_rowsize
FIELD	4129:2	4129:2	7	src_rowsize
LEAF_NODE	4129:2	4129:2	8	src_rowsize
ASSIGN_OP	4129:14	4129:14	6	=
LEAF_NODE	4129:14	4129:14	7	=
RVAL	4129:16	4129:37	6	( ( bps * cols ) + 7 ) / 8
LEAF_NODE	4129:16	4129:16	7	(
LEAF_NODE	4129:17	4129:17	7	(
FIELD	4129:18	4129:18	7	bps
LEAF_NODE	4129:18	4129:18	8	bps
LEAF_NODE	4129:22	4129:22	7	*
FIELD	4129:24	4129:24	7	cols
LEAF_NODE	4129:24	4129:24	8	cols
LEAF_NODE	4129:28	4129:28	7	)
LEAF_NODE	4129:30	4129:30	7	+
FIELD	4129:32	4129:32	7	7
LEAF_NODE	4129:32	4129:32	8	7
LEAF_NODE	4129:33	4129:33	7	)
LEAF_NODE	4129:35	4129:35	7	/
FIELD	4129:37	4129:37	7	8
LEAF_NODE	4129:37	4129:37	8	8
LEAF_NODE	4129:38	4129:38	4	;
LEAF_NODE	4130:2	4130:2	3	dst_rowsize
LEAF_NODE	4130:14	4130:14	3	=
LEAF_NODE	4130:16	4130:16	3	(
LEAF_NODE	4130:17	4130:17	3	(
LEAF_NODE	4130:18	4130:18	3	bps
LEAF_NODE	4130:22	4130:22	3	*
LEAF_NODE	4130:24	4130:24	3	cols
LEAF_NODE	4130:29	4130:29	3	*
LEAF_NODE	4130:31	4130:31	3	spp
LEAF_NODE	4130:34	4130:34	3	)
LEAF_NODE	4130:36	4130:36	3	+
LEAF_NODE	4130:38	4130:38	3	7
LEAF_NODE	4130:39	4130:39	3	)
LEAF_NODE	4130:41	4130:41	3	/
EXPR_STATEMENT	4130:43	4130:44	3	8 ;
EXPR	4130:43	4130:43	4	8
FIELD	4130:43	4130:43	5	8
LEAF_NODE	4130:43	4130:43	6	8
LEAF_NODE	4130:44	4130:44	4	;
EXPR_STATEMENT	4131:2	4131:39	3	maskbits = ( uint64 ) - 1 >> ( 64 - bps ) ;
EXPR	4131:2	4131:2	4	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
ASSIGN	4131:2	4131:14	5	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
LVAL	4131:2	4131:2	6	maskbits
FIELD	4131:2	4131:2	7	maskbits
LEAF_NODE	4131:2	4131:2	8	maskbits
ASSIGN_OP	4131:11	4131:11	6	=
LEAF_NODE	4131:11	4131:11	7	=
RVAL	4131:14	4131:38	6	( uint64 ) - 1 >> ( 64 - bps )
LEAF_NODE	4131:14	4131:14	7	(
TYPE_NAME	4131:15	4131:15	7	uint64
LEAF_NODE	4131:15	4131:15	8	uint64
LEAF_NODE	4131:21	4131:21	7	)
UNARY_EXPR	4131:22	4131:23	7	- 1
UNARY_OPERATOR	4131:22	4131:22	8	-
LEAF_NODE	4131:22	4131:22	9	-
FIELD	4131:23	4131:23	8	1
LEAF_NODE	4131:23	4131:23	9	1
LEAF_NODE	4131:25	4131:25	7	>>
LEAF_NODE	4131:28	4131:28	7	(
FIELD	4131:30	4131:30	7	64
LEAF_NODE	4131:30	4131:30	8	64
LEAF_NODE	4131:33	4131:33	7	-
FIELD	4131:35	4131:35	7	bps
LEAF_NODE	4131:35	4131:35	8	bps
LEAF_NODE	4131:38	4131:38	7	)
LEAF_NODE	4131:39	4131:39	4	;
ITERATION	4134:2	4135:4	3	
KEYWORD	4134:2	4134:2	4	for
LEAF_NODE	4134:2	4134:2	5	for
LEAF_NODE	4134:6	4134:6	4	(
FOR_INIT	4134:7	4134:14	4	row = 0 ;
EXPR	4134:7	4134:7	5	row = 0
ASSIGN	4134:7	4134:13	6	row = 0
LVAL	4134:7	4134:7	7	row
FIELD	4134:7	4134:7	8	row
LEAF_NODE	4134:7	4134:7	9	row
ASSIGN_OP	4134:11	4134:11	7	=
LEAF_NODE	4134:11	4134:11	8	=
RVAL	4134:13	4134:13	7	0
FIELD	4134:13	4134:13	8	0
LEAF_NODE	4134:13	4134:13	9	0
LEAF_NODE	4134:14	4134:14	5	;
CONDITION	4134:16	4134:16	4	row < rows
EXPR	4134:16	4134:22	5	row < rows
FIELD	4134:16	4134:16	6	row
LEAF_NODE	4134:16	4134:16	7	row
REL_OPERATOR	4134:20	4134:20	6	<
LEAF_NODE	4134:20	4134:20	7	<
FIELD	4134:22	4134:22	6	rows
LEAF_NODE	4134:22	4134:22	7	rows
LEAF_NODE	4134:26	4134:26	4	;
FOR_EXPR	4134:28	4134:28	4	row ++
EXPR	4134:28	4134:28	5	row ++
FIELD	4134:28	4134:31	6	row ++
LEAF_NODE	4134:28	4134:28	7	row
LEAF_NODE	4134:31	4134:31	7	++
LEAF_NODE	4134:33	4134:33	4	)
STATEMENTS	4135:4	4230:4	4	
LEAF_NODE	4135:4	4135:4	5	{
STATEMENTS	4136:4	4225:4	5	
EXPR_STATEMENT	4136:4	4136:18	6	ready_bits = 0 ;
EXPR	4136:4	4136:4	7	ready_bits = 0
ASSIGN	4136:4	4136:17	8	ready_bits = 0
LVAL	4136:4	4136:4	9	ready_bits
FIELD	4136:4	4136:4	10	ready_bits
LEAF_NODE	4136:4	4136:4	11	ready_bits
ASSIGN_OP	4136:15	4136:15	9	=
LEAF_NODE	4136:15	4136:15	10	=
RVAL	4136:17	4136:17	9	0
FIELD	4136:17	4136:17	10	0
LEAF_NODE	4136:17	4136:17	11	0
LEAF_NODE	4136:18	4136:18	7	;
EXPR_STATEMENT	4137:4	4137:21	6	buff1 = buff2 = 0 ;
EXPR	4137:4	4137:4	7	buff1 = buff2 = 0
ASSIGN	4137:4	4137:12	8	buff1 = buff2 = 0
LVAL	4137:4	4137:4	9	buff1
FIELD	4137:4	4137:4	10	buff1
LEAF_NODE	4137:4	4137:4	11	buff1
ASSIGN_OP	4137:10	4137:10	9	=
LEAF_NODE	4137:10	4137:10	10	=
RVAL	4137:12	4137:12	9	buff2 = 0
ASSIGN	4137:12	4137:20	10	buff2 = 0
LVAL	4137:12	4137:12	11	buff2
FIELD	4137:12	4137:12	12	buff2
LEAF_NODE	4137:12	4137:12	13	buff2
ASSIGN_OP	4137:18	4137:18	11	=
LEAF_NODE	4137:18	4137:18	12	=
RVAL	4137:20	4137:20	11	0
FIELD	4137:20	4137:20	12	0
LEAF_NODE	4137:20	4137:20	13	0
LEAF_NODE	4137:21	4137:21	7	;
EXPR_STATEMENT	4138:4	4138:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	4138:4	4138:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	4138:4	4138:10	8	dst = out + ( row * dst_rowsize )
LVAL	4138:4	4138:4	9	dst
FIELD	4138:4	4138:4	10	dst
LEAF_NODE	4138:4	4138:4	11	dst
ASSIGN_OP	4138:8	4138:8	9	=
LEAF_NODE	4138:8	4138:8	10	=
RVAL	4138:10	4138:34	9	out + ( row * dst_rowsize )
FIELD	4138:10	4138:10	10	out
LEAF_NODE	4138:10	4138:10	11	out
LEAF_NODE	4138:14	4138:14	10	+
LEAF_NODE	4138:16	4138:16	10	(
FIELD	4138:17	4138:17	10	row
LEAF_NODE	4138:17	4138:17	11	row
LEAF_NODE	4138:21	4138:21	10	*
FIELD	4138:23	4138:23	10	dst_rowsize
LEAF_NODE	4138:23	4138:23	11	dst_rowsize
LEAF_NODE	4138:34	4138:34	10	)
LEAF_NODE	4138:35	4138:35	7	;
EXPR_STATEMENT	4139:4	4139:34	6	src_offset = row * src_rowsize ;
EXPR	4139:4	4139:4	7	src_offset = row * src_rowsize
ASSIGN	4139:4	4139:17	8	src_offset = row * src_rowsize
LVAL	4139:4	4139:4	9	src_offset
FIELD	4139:4	4139:4	10	src_offset
LEAF_NODE	4139:4	4139:4	11	src_offset
ASSIGN_OP	4139:15	4139:15	9	=
LEAF_NODE	4139:15	4139:15	10	=
RVAL	4139:17	4139:23	9	row * src_rowsize
FIELD	4139:17	4139:17	10	row
LEAF_NODE	4139:17	4139:17	11	row
LEAF_NODE	4139:21	4139:21	10	*
FIELD	4139:23	4139:23	10	src_rowsize
LEAF_NODE	4139:23	4139:23	11	src_rowsize
LEAF_NODE	4139:34	4139:34	7	;
ITERATION	4140:4	4141:6	6	
KEYWORD	4140:4	4140:4	7	for
LEAF_NODE	4140:4	4140:4	8	for
LEAF_NODE	4140:8	4140:8	7	(
FOR_INIT	4140:9	4140:16	7	col = 0 ;
EXPR	4140:9	4140:9	8	col = 0
ASSIGN	4140:9	4140:15	9	col = 0
LVAL	4140:9	4140:9	10	col
FIELD	4140:9	4140:9	11	col
LEAF_NODE	4140:9	4140:9	12	col
ASSIGN_OP	4140:13	4140:13	10	=
LEAF_NODE	4140:13	4140:13	11	=
RVAL	4140:15	4140:15	10	0
FIELD	4140:15	4140:15	11	0
LEAF_NODE	4140:15	4140:15	12	0
LEAF_NODE	4140:16	4140:16	8	;
CONDITION	4140:18	4140:18	7	col < cols
EXPR	4140:18	4140:24	8	col < cols
FIELD	4140:18	4140:18	9	col
LEAF_NODE	4140:18	4140:18	10	col
REL_OPERATOR	4140:22	4140:22	9	<
LEAF_NODE	4140:22	4140:22	10	<
FIELD	4140:24	4140:24	9	cols
LEAF_NODE	4140:24	4140:24	10	cols
LEAF_NODE	4140:28	4140:28	7	;
FOR_EXPR	4140:30	4140:30	7	col ++
EXPR	4140:30	4140:30	8	col ++
FIELD	4140:30	4140:33	9	col ++
LEAF_NODE	4140:30	4140:30	10	col
LEAF_NODE	4140:33	4140:33	10	++
LEAF_NODE	4140:35	4140:35	7	)
STATEMENTS	4141:6	4201:6	7	
LEAF_NODE	4141:6	4141:6	8	{
STATEMENTS	4143:6	4148:6	8	
EXPR_STATEMENT	4143:6	4143:28	9	bit_offset = col * bps ;
EXPR	4143:6	4143:6	10	bit_offset = col * bps
ASSIGN	4143:6	4143:19	11	bit_offset = col * bps
LVAL	4143:6	4143:6	12	bit_offset
FIELD	4143:6	4143:6	13	bit_offset
LEAF_NODE	4143:6	4143:6	14	bit_offset
ASSIGN_OP	4143:17	4143:17	12	=
LEAF_NODE	4143:17	4143:17	13	=
RVAL	4143:19	4143:25	12	col * bps
FIELD	4143:19	4143:19	13	col
LEAF_NODE	4143:19	4143:19	14	col
LEAF_NODE	4143:23	4143:23	13	*
FIELD	4143:25	4143:25	13	bps
LEAF_NODE	4143:25	4143:25	14	bps
LEAF_NODE	4143:28	4143:28	10	;
EXPR_STATEMENT	4144:6	4144:31	9	src_byte = bit_offset / 8 ;
EXPR	4144:6	4144:6	10	src_byte = bit_offset / 8
ASSIGN	4144:6	4144:17	11	src_byte = bit_offset / 8
LVAL	4144:6	4144:6	12	src_byte
FIELD	4144:6	4144:6	13	src_byte
LEAF_NODE	4144:6	4144:6	14	src_byte
ASSIGN_OP	4144:15	4144:15	12	=
LEAF_NODE	4144:15	4144:15	13	=
RVAL	4144:17	4144:30	12	bit_offset / 8
FIELD	4144:17	4144:17	13	bit_offset
LEAF_NODE	4144:17	4144:17	14	bit_offset
LEAF_NODE	4144:28	4144:28	13	/
FIELD	4144:30	4144:30	13	8
LEAF_NODE	4144:30	4144:30	14	8
LEAF_NODE	4144:31	4144:31	10	;
EXPR_STATEMENT	4145:6	4145:31	9	src_bit = bit_offset % 8 ;
EXPR	4145:6	4145:6	10	src_bit = bit_offset % 8
ASSIGN	4145:6	4145:17	11	src_bit = bit_offset % 8
LVAL	4145:6	4145:6	12	src_bit
FIELD	4145:6	4145:6	13	src_bit
LEAF_NODE	4145:6	4145:6	14	src_bit
ASSIGN_OP	4145:15	4145:15	12	=
LEAF_NODE	4145:15	4145:15	13	=
RVAL	4145:17	4145:30	12	bit_offset % 8
FIELD	4145:17	4145:17	13	bit_offset
LEAF_NODE	4145:17	4145:17	14	bit_offset
LEAF_NODE	4145:28	4145:28	13	%
FIELD	4145:30	4145:30	13	8
LEAF_NODE	4145:30	4145:30	14	8
LEAF_NODE	4145:31	4145:31	10	;
EXPR_STATEMENT	4147:6	4147:50	9	matchbits = maskbits << ( 64 - src_bit - bps ) ;
EXPR	4147:6	4147:6	10	matchbits = maskbits << ( 64 - src_bit - bps )
ASSIGN	4147:6	4147:18	11	matchbits = maskbits << ( 64 - src_bit - bps )
LVAL	4147:6	4147:6	12	matchbits
FIELD	4147:6	4147:6	13	matchbits
LEAF_NODE	4147:6	4147:6	14	matchbits
ASSIGN_OP	4147:16	4147:16	12	=
LEAF_NODE	4147:16	4147:16	13	=
RVAL	4147:18	4147:49	12	maskbits << ( 64 - src_bit - bps )
FIELD	4147:18	4147:18	13	maskbits
LEAF_NODE	4147:18	4147:18	14	maskbits
LEAF_NODE	4147:27	4147:27	13	<<
LEAF_NODE	4147:30	4147:30	13	(
FIELD	4147:31	4147:31	13	64
LEAF_NODE	4147:31	4147:31	14	64
LEAF_NODE	4147:34	4147:34	13	-
FIELD	4147:36	4147:36	13	src_bit
LEAF_NODE	4147:36	4147:36	14	src_bit
LEAF_NODE	4147:44	4147:44	13	-
FIELD	4147:46	4147:46	13	bps
LEAF_NODE	4147:46	4147:46	14	bps
LEAF_NODE	4147:49	4147:49	13	)
LEAF_NODE	4147:50	4147:50	10	;
ITERATION	4148:6	4149:1	9	
KEYWORD	4148:6	4148:6	10	for
LEAF_NODE	4148:6	4148:6	11	for
LEAF_NODE	4148:10	4148:10	10	(
FOR_INIT	4148:11	4148:16	10	s = 0 ;
EXPR	4148:11	4148:11	11	s = 0
ASSIGN	4148:11	4148:15	12	s = 0
LVAL	4148:11	4148:11	13	s
FIELD	4148:11	4148:11	14	s
LEAF_NODE	4148:11	4148:11	15	s
ASSIGN_OP	4148:13	4148:13	13	=
LEAF_NODE	4148:13	4148:13	14	=
RVAL	4148:15	4148:15	13	0
FIELD	4148:15	4148:15	14	0
LEAF_NODE	4148:15	4148:15	15	0
LEAF_NODE	4148:16	4148:16	11	;
CONDITION	4148:18	4148:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4148:18	4148:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	4148:18	4148:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4148:18	4148:26	13	( s < spp )
LEAF_NODE	4148:18	4148:18	14	(
FIELD	4148:19	4148:19	14	s
LEAF_NODE	4148:19	4148:19	15	s
REL_OPERATOR	4148:21	4148:21	14	<
LEAF_NODE	4148:21	4148:21	15	<
FIELD	4148:23	4148:23	14	spp
LEAF_NODE	4148:23	4148:23	15	spp
LEAF_NODE	4148:26	4148:26	14	)
LEAF_NODE	4148:28	4148:28	13	&&
EXPR	4148:31	4148:47	13	( s < MAX_SAMPLES )
LEAF_NODE	4148:31	4148:31	14	(
FIELD	4148:32	4148:32	14	s
LEAF_NODE	4148:32	4148:32	15	s
REL_OPERATOR	4148:34	4148:34	14	<
LEAF_NODE	4148:34	4148:34	15	<
FIELD	4148:36	4148:36	14	MAX_SAMPLES
LEAF_NODE	4148:36	4148:36	15	MAX_SAMPLES
LEAF_NODE	4148:47	4148:47	14	)
LEAF_NODE	4148:48	4148:48	10	;
FOR_EXPR	4148:50	4148:50	10	s ++
EXPR	4148:50	4148:50	11	s ++
FIELD	4148:50	4148:51	12	s ++
LEAF_NODE	4148:50	4148:50	13	s
LEAF_NODE	4148:51	4148:51	13	++
LEAF_NODE	4148:53	4148:53	10	)
STATEMENTS	4149:1	4200:1	10	
LEAF_NODE	4149:1	4149:1	11	{
STATEMENTS	4150:1	4189:1	11	
EXPR_STATEMENT	4150:1	4150:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	4150:1	4150:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	4150:1	4150:7	14	src = in [ s ] + src_offset + src_byte
LVAL	4150:1	4150:1	15	src
FIELD	4150:1	4150:1	16	src
LEAF_NODE	4150:1	4150:1	17	src
ASSIGN_OP	4150:5	4150:5	15	=
LEAF_NODE	4150:5	4150:5	16	=
RVAL	4150:7	4150:28	15	in [ s ] + src_offset + src_byte
FIELD	4150:7	4150:11	16	in [ s ]
LEAF_NODE	4150:7	4150:7	17	in
LEAF_NODE	4150:9	4150:9	17	[
EXPR	4150:10	4150:10	17	s
FIELD	4150:10	4150:10	18	s
LEAF_NODE	4150:10	4150:10	19	s
LEAF_NODE	4150:11	4150:11	17	]
LEAF_NODE	4150:13	4150:13	16	+
FIELD	4150:15	4150:15	16	src_offset
LEAF_NODE	4150:15	4150:15	17	src_offset
LEAF_NODE	4150:26	4150:26	16	+
FIELD	4150:28	4150:28	16	src_byte
LEAF_NODE	4150:28	4150:28	17	src_byte
LEAF_NODE	4150:36	4150:36	13	;
SELECTION	4151:1	4152:3	12	
KEYWORD	4151:1	4151:1	13	if
LEAF_NODE	4151:1	4151:1	14	if
LEAF_NODE	4151:4	4151:4	13	(
CONDITION	4151:5	4151:5	13	little_endian
EXPR	4151:5	4151:5	14	little_endian
FIELD	4151:5	4151:5	15	little_endian
LEAF_NODE	4151:5	4151:5	16	little_endian
LEAF_NODE	4151:18	4151:18	13	)
STATEMENTS	4152:3	4155:3	13	
LEAF_NODE	4152:3	4152:3	14	{
STATEMENTS	4153:3	4154:10	14	
EXPR_STATEMENT	4153:3	4153:71	15	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	4153:3	4153:3	16	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	4153:3	4153:15	17	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	4153:3	4153:3	18	longbuff1
FIELD	4153:3	4153:3	19	longbuff1
LEAF_NODE	4153:3	4153:3	20	longbuff1
ASSIGN_OP	4153:13	4153:13	18	=
LEAF_NODE	4153:13	4153:13	19	=
RVAL	4153:15	4153:15	18	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4153:15	4153:32	19	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4153:15	4153:28	20	( src [ 0 ] << 24 )
LEAF_NODE	4153:15	4153:15	21	(
FIELD	4153:16	4153:21	21	src [ 0 ]
LEAF_NODE	4153:16	4153:16	22	src
LEAF_NODE	4153:19	4153:19	22	[
EXPR	4153:20	4153:20	22	0
FIELD	4153:20	4153:20	23	0
LEAF_NODE	4153:20	4153:20	24	0
LEAF_NODE	4153:21	4153:21	22	]
LEAF_NODE	4153:23	4153:23	21	<<
FIELD	4153:26	4153:26	21	24
LEAF_NODE	4153:26	4153:26	22	24
LEAF_NODE	4153:28	4153:28	21	)
LEAF_NODE	4153:30	4153:30	20	|
BIT_OR_ELEM	4153:32	4153:32	20	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4153:32	4153:49	21	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4153:32	4153:45	22	( src [ 1 ] << 16 )
LEAF_NODE	4153:32	4153:32	23	(
FIELD	4153:33	4153:38	23	src [ 1 ]
LEAF_NODE	4153:33	4153:33	24	src
LEAF_NODE	4153:36	4153:36	24	[
EXPR	4153:37	4153:37	24	1
FIELD	4153:37	4153:37	25	1
LEAF_NODE	4153:37	4153:37	26	1
LEAF_NODE	4153:38	4153:38	24	]
LEAF_NODE	4153:40	4153:40	23	<<
FIELD	4153:43	4153:43	23	16
LEAF_NODE	4153:43	4153:43	24	16
LEAF_NODE	4153:45	4153:45	23	)
LEAF_NODE	4153:47	4153:47	22	|
BIT_OR_ELEM	4153:49	4153:49	22	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4153:49	4153:65	23	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4153:49	4153:61	24	( src [ 2 ] << 8 )
LEAF_NODE	4153:49	4153:49	25	(
FIELD	4153:50	4153:55	25	src [ 2 ]
LEAF_NODE	4153:50	4153:50	26	src
LEAF_NODE	4153:53	4153:53	26	[
EXPR	4153:54	4153:54	26	2
FIELD	4153:54	4153:54	27	2
LEAF_NODE	4153:54	4153:54	28	2
LEAF_NODE	4153:55	4153:55	26	]
LEAF_NODE	4153:57	4153:57	25	<<
FIELD	4153:60	4153:60	25	8
LEAF_NODE	4153:60	4153:60	26	8
LEAF_NODE	4153:61	4153:61	25	)
LEAF_NODE	4153:63	4153:63	24	|
BIT_OR_ELEM	4153:65	4153:65	24	src [ 3 ]
FIELD	4153:65	4153:70	25	src [ 3 ]
LEAF_NODE	4153:65	4153:65	26	src
LEAF_NODE	4153:68	4153:68	26	[
EXPR	4153:69	4153:69	26	3
FIELD	4153:69	4153:69	27	3
LEAF_NODE	4153:69	4153:69	28	3
LEAF_NODE	4153:70	4153:70	26	]
LEAF_NODE	4153:71	4153:71	16	;
EXPR_STATEMENT	4154:10	4154:31	15	longbuff2 = longbuff1 ;
EXPR	4154:10	4154:10	16	longbuff2 = longbuff1
ASSIGN	4154:10	4154:22	17	longbuff2 = longbuff1
LVAL	4154:10	4154:10	18	longbuff2
FIELD	4154:10	4154:10	19	longbuff2
LEAF_NODE	4154:10	4154:10	20	longbuff2
ASSIGN_OP	4154:20	4154:20	18	=
LEAF_NODE	4154:20	4154:20	19	=
RVAL	4154:22	4154:22	18	longbuff1
FIELD	4154:22	4154:22	19	longbuff1
LEAF_NODE	4154:22	4154:22	20	longbuff1
LEAF_NODE	4154:31	4154:31	16	;
LEAF_NODE	4155:3	4155:3	14	}
SELECTION	4156:1	4157:3	12	
KEYWORD	4156:1	4156:1	13	else
LEAF_NODE	4156:1	4156:1	14	else
STATEMENTS	4157:3	4160:3	13	
LEAF_NODE	4157:3	4157:3	14	{
STATEMENTS	4158:3	4159:10	14	
EXPR_STATEMENT	4158:3	4158:71	15	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	4158:3	4158:3	16	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	4158:3	4158:15	17	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	4158:3	4158:3	18	longbuff1
FIELD	4158:3	4158:3	19	longbuff1
LEAF_NODE	4158:3	4158:3	20	longbuff1
ASSIGN_OP	4158:13	4158:13	18	=
LEAF_NODE	4158:13	4158:13	19	=
RVAL	4158:15	4158:15	18	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4158:15	4158:32	19	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4158:15	4158:28	20	( src [ 3 ] << 24 )
LEAF_NODE	4158:15	4158:15	21	(
FIELD	4158:16	4158:21	21	src [ 3 ]
LEAF_NODE	4158:16	4158:16	22	src
LEAF_NODE	4158:19	4158:19	22	[
EXPR	4158:20	4158:20	22	3
FIELD	4158:20	4158:20	23	3
LEAF_NODE	4158:20	4158:20	24	3
LEAF_NODE	4158:21	4158:21	22	]
LEAF_NODE	4158:23	4158:23	21	<<
FIELD	4158:26	4158:26	21	24
LEAF_NODE	4158:26	4158:26	22	24
LEAF_NODE	4158:28	4158:28	21	)
LEAF_NODE	4158:30	4158:30	20	|
BIT_OR_ELEM	4158:32	4158:32	20	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4158:32	4158:49	21	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4158:32	4158:45	22	( src [ 2 ] << 16 )
LEAF_NODE	4158:32	4158:32	23	(
FIELD	4158:33	4158:38	23	src [ 2 ]
LEAF_NODE	4158:33	4158:33	24	src
LEAF_NODE	4158:36	4158:36	24	[
EXPR	4158:37	4158:37	24	2
FIELD	4158:37	4158:37	25	2
LEAF_NODE	4158:37	4158:37	26	2
LEAF_NODE	4158:38	4158:38	24	]
LEAF_NODE	4158:40	4158:40	23	<<
FIELD	4158:43	4158:43	23	16
LEAF_NODE	4158:43	4158:43	24	16
LEAF_NODE	4158:45	4158:45	23	)
LEAF_NODE	4158:47	4158:47	22	|
BIT_OR_ELEM	4158:49	4158:49	22	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4158:49	4158:65	23	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4158:49	4158:61	24	( src [ 1 ] << 8 )
LEAF_NODE	4158:49	4158:49	25	(
FIELD	4158:50	4158:55	25	src [ 1 ]
LEAF_NODE	4158:50	4158:50	26	src
LEAF_NODE	4158:53	4158:53	26	[
EXPR	4158:54	4158:54	26	1
FIELD	4158:54	4158:54	27	1
LEAF_NODE	4158:54	4158:54	28	1
LEAF_NODE	4158:55	4158:55	26	]
LEAF_NODE	4158:57	4158:57	25	<<
FIELD	4158:60	4158:60	25	8
LEAF_NODE	4158:60	4158:60	26	8
LEAF_NODE	4158:61	4158:61	25	)
LEAF_NODE	4158:63	4158:63	24	|
BIT_OR_ELEM	4158:65	4158:65	24	src [ 0 ]
FIELD	4158:65	4158:70	25	src [ 0 ]
LEAF_NODE	4158:65	4158:65	26	src
LEAF_NODE	4158:68	4158:68	26	[
EXPR	4158:69	4158:69	26	0
FIELD	4158:69	4158:69	27	0
LEAF_NODE	4158:69	4158:69	28	0
LEAF_NODE	4158:70	4158:70	26	]
LEAF_NODE	4158:71	4158:71	16	;
EXPR_STATEMENT	4159:10	4159:31	15	longbuff2 = longbuff1 ;
EXPR	4159:10	4159:10	16	longbuff2 = longbuff1
ASSIGN	4159:10	4159:22	17	longbuff2 = longbuff1
LVAL	4159:10	4159:10	18	longbuff2
FIELD	4159:10	4159:10	19	longbuff2
LEAF_NODE	4159:10	4159:10	20	longbuff2
ASSIGN_OP	4159:20	4159:20	18	=
LEAF_NODE	4159:20	4159:20	19	=
RVAL	4159:22	4159:22	18	longbuff1
FIELD	4159:22	4159:22	19	longbuff1
LEAF_NODE	4159:22	4159:22	20	longbuff1
LEAF_NODE	4159:31	4159:31	16	;
LEAF_NODE	4160:3	4160:3	14	}
EXPR_STATEMENT	4161:1	4161:46	12	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2 ;
EXPR	4161:1	4161:1	13	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
ASSIGN	4161:1	4161:9	14	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
LVAL	4161:1	4161:1	15	buff3
FIELD	4161:1	4161:1	16	buff3
LEAF_NODE	4161:1	4161:1	17	buff3
ASSIGN_OP	4161:7	4161:7	15	=
LEAF_NODE	4161:7	4161:7	16	=
RVAL	4161:9	4161:9	15	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR	4161:9	4161:37	16	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR_ELEM	4161:9	4161:33	17	( ( uint64 ) longbuff1 << 32 )
LEAF_NODE	4161:9	4161:9	18	(
LEAF_NODE	4161:10	4161:10	18	(
TYPE_NAME	4161:11	4161:11	18	uint64
LEAF_NODE	4161:11	4161:11	19	uint64
LEAF_NODE	4161:17	4161:17	18	)
FIELD	4161:18	4161:18	18	longbuff1
LEAF_NODE	4161:18	4161:18	19	longbuff1
LEAF_NODE	4161:28	4161:28	18	<<
FIELD	4161:31	4161:31	18	32
LEAF_NODE	4161:31	4161:31	19	32
LEAF_NODE	4161:33	4161:33	18	)
LEAF_NODE	4161:35	4161:35	17	|
BIT_OR_ELEM	4161:37	4161:37	17	longbuff2
FIELD	4161:37	4161:37	18	longbuff2
LEAF_NODE	4161:37	4161:37	19	longbuff2
LEAF_NODE	4161:46	4161:46	13	;
LEAF_NODE	4162:1	4162:1	12	buff1
LEAF_NODE	4162:7	4162:7	12	=
LEAF_NODE	4162:9	4162:9	12	(
LEAF_NODE	4162:10	4162:10	12	buff3
LEAF_NODE	4162:16	4162:16	12	&
LEAF_NODE	4162:18	4162:18	12	matchbits
LEAF_NODE	4162:27	4162:27	12	)
LEAF_NODE	4162:29	4162:29	12	<<
LEAF_NODE	4162:32	4162:32	12	(
LEAF_NODE	4162:33	4162:33	12	src_bit
LEAF_NODE	4162:40	4162:40	12	)
LEAF_NODE	4162:41	4162:41	12	;
SELECTION	4165:1	4166:3	12	
KEYWORD	4165:1	4165:1	13	if
LEAF_NODE	4165:1	4165:1	14	if
LEAF_NODE	4165:4	4165:4	13	(
CONDITION	4165:5	4165:5	13	ready_bits >= 32
EXPR	4165:5	4165:19	14	ready_bits >= 32
FIELD	4165:5	4165:5	15	ready_bits
LEAF_NODE	4165:5	4165:5	16	ready_bits
REL_OPERATOR	4165:16	4165:16	15	>=
LEAF_NODE	4165:16	4165:16	16	>=
FIELD	4165:19	4165:19	15	32
LEAF_NODE	4165:19	4165:19	16	32
LEAF_NODE	4165:21	4165:21	13	)
STATEMENTS	4166:3	4180:3	13	
LEAF_NODE	4166:3	4166:3	14	{
STATEMENTS	4167:3	4179:3	14	
EXPR_STATEMENT	4167:3	4167:28	15	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	4167:3	4167:3	16	bytebuff1 = ( buff2 >> 56 )
ASSIGN	4167:3	4167:15	17	bytebuff1 = ( buff2 >> 56 )
LVAL	4167:3	4167:3	18	bytebuff1
FIELD	4167:3	4167:3	19	bytebuff1
LEAF_NODE	4167:3	4167:3	20	bytebuff1
ASSIGN_OP	4167:13	4167:13	18	=
LEAF_NODE	4167:13	4167:13	19	=
RVAL	4167:15	4167:27	18	( buff2 >> 56 )
LEAF_NODE	4167:15	4167:15	19	(
FIELD	4167:16	4167:16	19	buff2
LEAF_NODE	4167:16	4167:16	20	buff2
LEAF_NODE	4167:22	4167:22	19	>>
FIELD	4167:25	4167:25	19	56
LEAF_NODE	4167:25	4167:25	20	56
LEAF_NODE	4167:27	4167:27	19	)
LEAF_NODE	4167:28	4167:28	16	;
EXPR_STATEMENT	4168:3	4168:21	15	* dst ++ = bytebuff1 ;
EXPR	4168:3	4168:3	16	* dst ++ = bytebuff1
ASSIGN	4168:3	4168:12	17	* dst ++ = bytebuff1
LVAL	4168:3	4168:3	18	* dst ++
UNARY_EXPR	4168:3	4168:4	19	* dst ++
UNARY_OPERATOR	4168:3	4168:3	20	*
LEAF_NODE	4168:3	4168:3	21	*
FIELD	4168:4	4168:7	20	dst ++
LEAF_NODE	4168:4	4168:4	21	dst
LEAF_NODE	4168:7	4168:7	21	++
ASSIGN_OP	4168:10	4168:10	18	=
LEAF_NODE	4168:10	4168:10	19	=
RVAL	4168:12	4168:12	18	bytebuff1
FIELD	4168:12	4168:12	19	bytebuff1
LEAF_NODE	4168:12	4168:12	20	bytebuff1
LEAF_NODE	4168:21	4168:21	16	;
EXPR_STATEMENT	4169:3	4169:28	15	bytebuff2 = ( buff2 >> 48 ) ;
EXPR	4169:3	4169:3	16	bytebuff2 = ( buff2 >> 48 )
ASSIGN	4169:3	4169:15	17	bytebuff2 = ( buff2 >> 48 )
LVAL	4169:3	4169:3	18	bytebuff2
FIELD	4169:3	4169:3	19	bytebuff2
LEAF_NODE	4169:3	4169:3	20	bytebuff2
ASSIGN_OP	4169:13	4169:13	18	=
LEAF_NODE	4169:13	4169:13	19	=
RVAL	4169:15	4169:27	18	( buff2 >> 48 )
LEAF_NODE	4169:15	4169:15	19	(
FIELD	4169:16	4169:16	19	buff2
LEAF_NODE	4169:16	4169:16	20	buff2
LEAF_NODE	4169:22	4169:22	19	>>
FIELD	4169:25	4169:25	19	48
LEAF_NODE	4169:25	4169:25	20	48
LEAF_NODE	4169:27	4169:27	19	)
LEAF_NODE	4169:28	4169:28	16	;
EXPR_STATEMENT	4170:3	4170:21	15	* dst ++ = bytebuff2 ;
EXPR	4170:3	4170:3	16	* dst ++ = bytebuff2
ASSIGN	4170:3	4170:12	17	* dst ++ = bytebuff2
LVAL	4170:3	4170:3	18	* dst ++
UNARY_EXPR	4170:3	4170:4	19	* dst ++
UNARY_OPERATOR	4170:3	4170:3	20	*
LEAF_NODE	4170:3	4170:3	21	*
FIELD	4170:4	4170:7	20	dst ++
LEAF_NODE	4170:4	4170:4	21	dst
LEAF_NODE	4170:7	4170:7	21	++
ASSIGN_OP	4170:10	4170:10	18	=
LEAF_NODE	4170:10	4170:10	19	=
RVAL	4170:12	4170:12	18	bytebuff2
FIELD	4170:12	4170:12	19	bytebuff2
LEAF_NODE	4170:12	4170:12	20	bytebuff2
LEAF_NODE	4170:21	4170:21	16	;
EXPR_STATEMENT	4171:3	4171:28	15	bytebuff3 = ( buff2 >> 40 ) ;
EXPR	4171:3	4171:3	16	bytebuff3 = ( buff2 >> 40 )
ASSIGN	4171:3	4171:15	17	bytebuff3 = ( buff2 >> 40 )
LVAL	4171:3	4171:3	18	bytebuff3
FIELD	4171:3	4171:3	19	bytebuff3
LEAF_NODE	4171:3	4171:3	20	bytebuff3
ASSIGN_OP	4171:13	4171:13	18	=
LEAF_NODE	4171:13	4171:13	19	=
RVAL	4171:15	4171:27	18	( buff2 >> 40 )
LEAF_NODE	4171:15	4171:15	19	(
FIELD	4171:16	4171:16	19	buff2
LEAF_NODE	4171:16	4171:16	20	buff2
LEAF_NODE	4171:22	4171:22	19	>>
FIELD	4171:25	4171:25	19	40
LEAF_NODE	4171:25	4171:25	20	40
LEAF_NODE	4171:27	4171:27	19	)
LEAF_NODE	4171:28	4171:28	16	;
EXPR_STATEMENT	4172:3	4172:21	15	* dst ++ = bytebuff3 ;
EXPR	4172:3	4172:3	16	* dst ++ = bytebuff3
ASSIGN	4172:3	4172:12	17	* dst ++ = bytebuff3
LVAL	4172:3	4172:3	18	* dst ++
UNARY_EXPR	4172:3	4172:4	19	* dst ++
UNARY_OPERATOR	4172:3	4172:3	20	*
LEAF_NODE	4172:3	4172:3	21	*
FIELD	4172:4	4172:7	20	dst ++
LEAF_NODE	4172:4	4172:4	21	dst
LEAF_NODE	4172:7	4172:7	21	++
ASSIGN_OP	4172:10	4172:10	18	=
LEAF_NODE	4172:10	4172:10	19	=
RVAL	4172:12	4172:12	18	bytebuff3
FIELD	4172:12	4172:12	19	bytebuff3
LEAF_NODE	4172:12	4172:12	20	bytebuff3
LEAF_NODE	4172:21	4172:21	16	;
EXPR_STATEMENT	4173:3	4173:28	15	bytebuff4 = ( buff2 >> 32 ) ;
EXPR	4173:3	4173:3	16	bytebuff4 = ( buff2 >> 32 )
ASSIGN	4173:3	4173:15	17	bytebuff4 = ( buff2 >> 32 )
LVAL	4173:3	4173:3	18	bytebuff4
FIELD	4173:3	4173:3	19	bytebuff4
LEAF_NODE	4173:3	4173:3	20	bytebuff4
ASSIGN_OP	4173:13	4173:13	18	=
LEAF_NODE	4173:13	4173:13	19	=
RVAL	4173:15	4173:27	18	( buff2 >> 32 )
LEAF_NODE	4173:15	4173:15	19	(
FIELD	4173:16	4173:16	19	buff2
LEAF_NODE	4173:16	4173:16	20	buff2
LEAF_NODE	4173:22	4173:22	19	>>
FIELD	4173:25	4173:25	19	32
LEAF_NODE	4173:25	4173:25	20	32
LEAF_NODE	4173:27	4173:27	19	)
LEAF_NODE	4173:28	4173:28	16	;
EXPR_STATEMENT	4174:3	4174:21	15	* dst ++ = bytebuff4 ;
EXPR	4174:3	4174:3	16	* dst ++ = bytebuff4
ASSIGN	4174:3	4174:12	17	* dst ++ = bytebuff4
LVAL	4174:3	4174:3	18	* dst ++
UNARY_EXPR	4174:3	4174:4	19	* dst ++
UNARY_OPERATOR	4174:3	4174:3	20	*
LEAF_NODE	4174:3	4174:3	21	*
FIELD	4174:4	4174:7	20	dst ++
LEAF_NODE	4174:4	4174:4	21	dst
LEAF_NODE	4174:7	4174:7	21	++
ASSIGN_OP	4174:10	4174:10	18	=
LEAF_NODE	4174:10	4174:10	19	=
RVAL	4174:12	4174:12	18	bytebuff4
FIELD	4174:12	4174:12	19	bytebuff4
LEAF_NODE	4174:12	4174:12	20	bytebuff4
LEAF_NODE	4174:21	4174:21	16	;
EXPR_STATEMENT	4175:3	4175:19	15	ready_bits -= 32 ;
EXPR	4175:3	4175:3	16	ready_bits -= 32
ASSIGN	4175:3	4175:17	17	ready_bits -= 32
LVAL	4175:3	4175:3	18	ready_bits
FIELD	4175:3	4175:3	19	ready_bits
LEAF_NODE	4175:3	4175:3	20	ready_bits
ASSIGN_OP	4175:14	4175:14	18	-=
LEAF_NODE	4175:14	4175:14	19	-=
RVAL	4175:17	4175:17	18	32
FIELD	4175:17	4175:17	19	32
LEAF_NODE	4175:17	4175:17	20	32
LEAF_NODE	4175:19	4175:19	16	;
EXPR_STATEMENT	4178:3	4178:50	15	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) ) ;
EXPR	4178:3	4178:3	16	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
ASSIGN	4178:3	4178:11	17	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LVAL	4178:3	4178:3	18	buff2
FIELD	4178:3	4178:3	19	buff2
LEAF_NODE	4178:3	4178:3	20	buff2
ASSIGN_OP	4178:9	4178:9	18	=
LEAF_NODE	4178:9	4178:9	19	=
RVAL	4178:11	4178:49	18	( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	4178:11	4178:11	19	(
BIT_OR	4178:12	4178:28	19	( buff2 << 32 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	4178:12	4178:24	20	( buff2 << 32 )
LEAF_NODE	4178:12	4178:12	21	(
FIELD	4178:13	4178:13	21	buff2
LEAF_NODE	4178:13	4178:13	22	buff2
LEAF_NODE	4178:19	4178:19	21	<<
FIELD	4178:22	4178:22	21	32
LEAF_NODE	4178:22	4178:22	22	32
LEAF_NODE	4178:24	4178:24	21	)
LEAF_NODE	4178:26	4178:26	20	|
BIT_OR_ELEM	4178:28	4178:48	20	( buff1 >> ready_bits )
LEAF_NODE	4178:28	4178:28	21	(
FIELD	4178:29	4178:29	21	buff1
LEAF_NODE	4178:29	4178:29	22	buff1
LEAF_NODE	4178:35	4178:35	21	>>
FIELD	4178:38	4178:38	21	ready_bits
LEAF_NODE	4178:38	4178:38	22	ready_bits
LEAF_NODE	4178:48	4178:48	21	)
LEAF_NODE	4178:49	4178:49	19	)
LEAF_NODE	4178:50	4178:50	16	;
EXPR_STATEMENT	4179:3	4179:27	15	strcpy ( action , "Flush" ) ;
EXPR	4179:3	4179:3	16	strcpy ( action , "Flush" )
FUNCTION_CALL	4179:3	4179:26	17	strcpy ( action , "Flush" )
CALLEE	4179:3	4179:3	18	strcpy
LEAF_NODE	4179:3	4179:3	19	strcpy
LEAF_NODE	4179:10	4179:10	18	(
ARGUMENT	4179:11	4179:11	18	action
FIELD	4179:11	4179:11	19	action
LEAF_NODE	4179:11	4179:11	20	action
LEAF_NODE	4179:17	4179:17	18	,
ARGUMENT	4179:19	4179:19	18	"Flush"
FIELD	4179:19	4179:19	19	"Flush"
LEAF_NODE	4179:19	4179:19	20	"Flush"
LEAF_NODE	4179:26	4179:26	18	)
LEAF_NODE	4179:27	4179:27	16	;
LEAF_NODE	4180:3	4180:3	14	}
SELECTION	4181:1	4182:3	12	
KEYWORD	4181:1	4181:1	13	else
LEAF_NODE	4181:1	4181:1	14	else
STATEMENTS	4182:3	4186:3	13	
LEAF_NODE	4182:3	4182:3	14	{
STATEMENTS	4183:3	4185:3	14	
EXPR_STATEMENT	4183:3	4183:52	15	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0 ;
EXPR	4183:3	4183:3	16	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	4183:3	4183:15	17	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	4183:3	4183:3	18	bytebuff1
FIELD	4183:3	4183:3	19	bytebuff1
LEAF_NODE	4183:3	4183:3	20	bytebuff1
ASSIGN_OP	4183:13	4183:13	18	=
LEAF_NODE	4183:13	4183:13	19	=
RVAL	4183:15	4183:15	18	bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	4183:15	4183:27	19	bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	4183:15	4183:15	20	bytebuff2
FIELD	4183:15	4183:15	21	bytebuff2
LEAF_NODE	4183:15	4183:15	22	bytebuff2
ASSIGN_OP	4183:25	4183:25	20	=
LEAF_NODE	4183:25	4183:25	21	=
RVAL	4183:27	4183:27	20	bytebuff3 = bytebuff4 = 0
ASSIGN	4183:27	4183:39	21	bytebuff3 = bytebuff4 = 0
LVAL	4183:27	4183:27	22	bytebuff3
FIELD	4183:27	4183:27	23	bytebuff3
LEAF_NODE	4183:27	4183:27	24	bytebuff3
ASSIGN_OP	4183:37	4183:37	22	=
LEAF_NODE	4183:37	4183:37	23	=
RVAL	4183:39	4183:39	22	bytebuff4 = 0
ASSIGN	4183:39	4183:51	23	bytebuff4 = 0
LVAL	4183:39	4183:39	24	bytebuff4
FIELD	4183:39	4183:39	25	bytebuff4
LEAF_NODE	4183:39	4183:39	26	bytebuff4
ASSIGN_OP	4183:49	4183:49	24	=
LEAF_NODE	4183:49	4183:49	25	=
RVAL	4183:51	4183:51	24	0
FIELD	4183:51	4183:51	25	0
LEAF_NODE	4183:51	4183:51	26	0
LEAF_NODE	4183:52	4183:52	16	;
EXPR_STATEMENT	4184:3	4184:42	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	4184:3	4184:3	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	4184:3	4184:11	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	4184:3	4184:3	18	buff2
FIELD	4184:3	4184:3	19	buff2
LEAF_NODE	4184:3	4184:3	20	buff2
ASSIGN_OP	4184:9	4184:9	18	=
LEAF_NODE	4184:9	4184:9	19	=
RVAL	4184:11	4184:41	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	4184:11	4184:11	19	(
BIT_OR	4184:12	4184:20	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	4184:12	4184:12	20	buff2
FIELD	4184:12	4184:12	21	buff2
LEAF_NODE	4184:12	4184:12	22	buff2
LEAF_NODE	4184:18	4184:18	20	|
BIT_OR_ELEM	4184:20	4184:40	20	( buff1 >> ready_bits )
LEAF_NODE	4184:20	4184:20	21	(
FIELD	4184:21	4184:21	21	buff1
LEAF_NODE	4184:21	4184:21	22	buff1
LEAF_NODE	4184:27	4184:27	21	>>
FIELD	4184:30	4184:30	21	ready_bits
LEAF_NODE	4184:30	4184:30	22	ready_bits
LEAF_NODE	4184:40	4184:40	21	)
LEAF_NODE	4184:41	4184:41	19	)
LEAF_NODE	4184:42	4184:42	16	;
EXPR_STATEMENT	4185:3	4185:28	15	strcpy ( action , "Update" ) ;
EXPR	4185:3	4185:3	16	strcpy ( action , "Update" )
FUNCTION_CALL	4185:3	4185:27	17	strcpy ( action , "Update" )
CALLEE	4185:3	4185:3	18	strcpy
LEAF_NODE	4185:3	4185:3	19	strcpy
LEAF_NODE	4185:10	4185:10	18	(
ARGUMENT	4185:11	4185:11	18	action
FIELD	4185:11	4185:11	19	action
LEAF_NODE	4185:11	4185:11	20	action
LEAF_NODE	4185:17	4185:17	18	,
ARGUMENT	4185:19	4185:19	18	"Update"
FIELD	4185:19	4185:19	19	"Update"
LEAF_NODE	4185:19	4185:19	20	"Update"
LEAF_NODE	4185:27	4185:27	18	)
LEAF_NODE	4185:28	4185:28	16	;
LEAF_NODE	4186:3	4186:3	14	}
EXPR_STATEMENT	4187:1	4187:18	12	ready_bits += bps ;
EXPR	4187:1	4187:1	13	ready_bits += bps
ASSIGN	4187:1	4187:15	14	ready_bits += bps
LVAL	4187:1	4187:1	15	ready_bits
FIELD	4187:1	4187:1	16	ready_bits
LEAF_NODE	4187:1	4187:1	17	ready_bits
ASSIGN_OP	4187:12	4187:12	15	+=
LEAF_NODE	4187:12	4187:12	16	+=
RVAL	4187:15	4187:15	15	bps
FIELD	4187:15	4187:15	16	bps
LEAF_NODE	4187:15	4187:15	17	bps
LEAF_NODE	4187:18	4187:18	13	;
SELECTION	4189:1	4190:3	12	
KEYWORD	4189:1	4189:1	13	if
LEAF_NODE	4189:1	4189:1	14	if
LEAF_NODE	4189:4	4189:4	13	(
CONDITION	4189:5	4189:5	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	4189:5	4189:5	14	( dumpfile != NULL ) && ( level == 3 )
AND	4189:5	4189:27	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	4189:5	4189:22	16	( dumpfile != NULL )
LEAF_NODE	4189:5	4189:5	17	(
FIELD	4189:6	4189:6	17	dumpfile
LEAF_NODE	4189:6	4189:6	18	dumpfile
EQ_OPERATOR	4189:15	4189:15	17	!=
LEAF_NODE	4189:15	4189:15	18	!=
FIELD	4189:18	4189:18	17	NULL
LEAF_NODE	4189:18	4189:18	18	NULL
LEAF_NODE	4189:22	4189:22	17	)
LEAF_NODE	4189:24	4189:24	16	&&
EXPR	4189:27	4189:38	16	( level == 3 )
LEAF_NODE	4189:27	4189:27	17	(
FIELD	4189:28	4189:28	17	level
LEAF_NODE	4189:28	4189:28	18	level
EQ_OPERATOR	4189:34	4189:34	17	==
LEAF_NODE	4189:34	4189:34	18	==
FIELD	4189:37	4189:37	17	3
LEAF_NODE	4189:37	4189:37	18	3
LEAF_NODE	4189:38	4189:38	17	)
LEAF_NODE	4189:39	4189:39	13	)
STATEMENTS	4190:3	4199:3	13	
LEAF_NODE	4190:3	4190:3	14	{
STATEMENTS	4191:3	4198:3	14	
EXPR_STATEMENT	4191:3	4193:57	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	4191:3	4191:3	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	4191:3	4193:56	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	4191:3	4191:3	18	dump_info
LEAF_NODE	4191:3	4191:3	19	dump_info
LEAF_NODE	4191:13	4191:13	18	(
ARGUMENT	4191:14	4191:14	18	dumpfile
FIELD	4191:14	4191:14	19	dumpfile
LEAF_NODE	4191:14	4191:14	20	dumpfile
LEAF_NODE	4191:22	4191:22	18	,
ARGUMENT	4191:24	4191:24	18	format
FIELD	4191:24	4191:24	19	format
LEAF_NODE	4191:24	4191:24	20	format
LEAF_NODE	4191:30	4191:30	18	,
ARGUMENT	4191:32	4191:32	18	""
FIELD	4191:32	4191:32	19	""
LEAF_NODE	4191:32	4191:32	20	""
LEAF_NODE	4191:34	4191:34	18	,
ARGUMENT	4192:7	4192:7	18	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4192:7	4192:7	19	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4192:7	4192:7	20	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4192:89	4192:89	18	,
ARGUMENT	4193:7	4193:13	18	row + 1
FIELD	4193:7	4193:7	19	row
LEAF_NODE	4193:7	4193:7	20	row
LEAF_NODE	4193:11	4193:11	19	+
FIELD	4193:13	4193:13	19	1
LEAF_NODE	4193:13	4193:13	20	1
LEAF_NODE	4193:14	4193:14	18	,
ARGUMENT	4193:16	4193:22	18	col + 1
FIELD	4193:16	4193:16	19	col
LEAF_NODE	4193:16	4193:16	20	col
LEAF_NODE	4193:20	4193:20	19	+
FIELD	4193:22	4193:22	19	1
LEAF_NODE	4193:22	4193:22	20	1
LEAF_NODE	4193:23	4193:23	18	,
ARGUMENT	4193:25	4193:25	18	s
FIELD	4193:25	4193:25	19	s
LEAF_NODE	4193:25	4193:25	20	s
LEAF_NODE	4193:26	4193:26	18	,
ARGUMENT	4193:28	4193:28	18	src_byte
FIELD	4193:28	4193:28	19	src_byte
LEAF_NODE	4193:28	4193:28	20	src_byte
LEAF_NODE	4193:36	4193:36	18	,
ARGUMENT	4193:38	4193:38	18	src_bit
FIELD	4193:38	4193:38	19	src_bit
LEAF_NODE	4193:38	4193:38	20	src_bit
LEAF_NODE	4193:45	4193:45	18	,
ARGUMENT	4193:47	4193:53	18	dst - out
FIELD	4193:47	4193:47	19	dst
LEAF_NODE	4193:47	4193:47	20	dst
LEAF_NODE	4193:51	4193:51	19	-
FIELD	4193:53	4193:53	19	out
LEAF_NODE	4193:53	4193:53	20	out
LEAF_NODE	4193:56	4193:56	18	)
LEAF_NODE	4193:57	4193:57	16	;
EXPR_STATEMENT	4194:3	4194:57	15	dump_wide ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4194:3	4194:3	16	dump_wide ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4194:3	4194:56	17	dump_wide ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4194:3	4194:3	18	dump_wide
LEAF_NODE	4194:3	4194:3	19	dump_wide
LEAF_NODE	4194:13	4194:13	18	(
ARGUMENT	4194:14	4194:14	18	dumpfile
FIELD	4194:14	4194:14	19	dumpfile
LEAF_NODE	4194:14	4194:14	20	dumpfile
LEAF_NODE	4194:22	4194:22	18	,
ARGUMENT	4194:24	4194:24	18	format
FIELD	4194:24	4194:24	19	format
LEAF_NODE	4194:24	4194:24	20	format
LEAF_NODE	4194:30	4194:30	18	,
ARGUMENT	4194:32	4194:32	18	"Match bits "
FIELD	4194:32	4194:32	19	"Match bits "
LEAF_NODE	4194:32	4194:32	20	"Match bits "
LEAF_NODE	4194:45	4194:45	18	,
ARGUMENT	4194:47	4194:47	18	matchbits
FIELD	4194:47	4194:47	19	matchbits
LEAF_NODE	4194:47	4194:47	20	matchbits
LEAF_NODE	4194:56	4194:56	18	)
LEAF_NODE	4194:57	4194:57	16	;
EXPR_STATEMENT	4195:3	4195:54	15	dump_data ( dumpfile , format , "Src   bits " , src , 8 ) ;
EXPR	4195:3	4195:3	16	dump_data ( dumpfile , format , "Src   bits " , src , 8 )
FUNCTION_CALL	4195:3	4195:53	17	dump_data ( dumpfile , format , "Src   bits " , src , 8 )
CALLEE	4195:3	4195:3	18	dump_data
LEAF_NODE	4195:3	4195:3	19	dump_data
LEAF_NODE	4195:13	4195:13	18	(
ARGUMENT	4195:14	4195:14	18	dumpfile
FIELD	4195:14	4195:14	19	dumpfile
LEAF_NODE	4195:14	4195:14	20	dumpfile
LEAF_NODE	4195:22	4195:22	18	,
ARGUMENT	4195:24	4195:24	18	format
FIELD	4195:24	4195:24	19	format
LEAF_NODE	4195:24	4195:24	20	format
LEAF_NODE	4195:30	4195:30	18	,
ARGUMENT	4195:32	4195:32	18	"Src   bits "
FIELD	4195:32	4195:32	19	"Src   bits "
LEAF_NODE	4195:32	4195:32	20	"Src   bits "
LEAF_NODE	4195:45	4195:45	18	,
ARGUMENT	4195:47	4195:47	18	src
FIELD	4195:47	4195:47	19	src
LEAF_NODE	4195:47	4195:47	20	src
LEAF_NODE	4195:50	4195:50	18	,
ARGUMENT	4195:52	4195:52	18	8
FIELD	4195:52	4195:52	19	8
LEAF_NODE	4195:52	4195:52	20	8
LEAF_NODE	4195:53	4195:53	18	)
LEAF_NODE	4195:54	4195:54	16	;
EXPR_STATEMENT	4196:3	4196:53	15	dump_wide ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4196:3	4196:3	16	dump_wide ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4196:3	4196:52	17	dump_wide ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4196:3	4196:3	18	dump_wide
LEAF_NODE	4196:3	4196:3	19	dump_wide
LEAF_NODE	4196:13	4196:13	18	(
ARGUMENT	4196:14	4196:14	18	dumpfile
FIELD	4196:14	4196:14	19	dumpfile
LEAF_NODE	4196:14	4196:14	20	dumpfile
LEAF_NODE	4196:22	4196:22	18	,
ARGUMENT	4196:24	4196:24	18	format
FIELD	4196:24	4196:24	19	format
LEAF_NODE	4196:24	4196:24	20	format
LEAF_NODE	4196:30	4196:30	18	,
ARGUMENT	4196:32	4196:32	18	"Buff1 bits "
FIELD	4196:32	4196:32	19	"Buff1 bits "
LEAF_NODE	4196:32	4196:32	20	"Buff1 bits "
LEAF_NODE	4196:45	4196:45	18	,
ARGUMENT	4196:47	4196:47	18	buff1
FIELD	4196:47	4196:47	19	buff1
LEAF_NODE	4196:47	4196:47	20	buff1
LEAF_NODE	4196:52	4196:52	18	)
LEAF_NODE	4196:53	4196:53	16	;
EXPR_STATEMENT	4197:3	4197:53	15	dump_wide ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4197:3	4197:3	16	dump_wide ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4197:3	4197:52	17	dump_wide ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4197:3	4197:3	18	dump_wide
LEAF_NODE	4197:3	4197:3	19	dump_wide
LEAF_NODE	4197:13	4197:13	18	(
ARGUMENT	4197:14	4197:14	18	dumpfile
FIELD	4197:14	4197:14	19	dumpfile
LEAF_NODE	4197:14	4197:14	20	dumpfile
LEAF_NODE	4197:22	4197:22	18	,
ARGUMENT	4197:24	4197:24	18	format
FIELD	4197:24	4197:24	19	format
LEAF_NODE	4197:24	4197:24	20	format
LEAF_NODE	4197:30	4197:30	18	,
ARGUMENT	4197:32	4197:32	18	"Buff2 bits "
FIELD	4197:32	4197:32	19	"Buff2 bits "
LEAF_NODE	4197:32	4197:32	20	"Buff2 bits "
LEAF_NODE	4197:45	4197:45	18	,
ARGUMENT	4197:47	4197:47	18	buff2
FIELD	4197:47	4197:47	19	buff2
LEAF_NODE	4197:47	4197:47	20	buff2
LEAF_NODE	4197:52	4197:52	18	)
LEAF_NODE	4197:53	4197:53	16	;
EXPR_STATEMENT	4198:3	4198:79	15	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action ) ;
EXPR	4198:3	4198:3	16	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
FUNCTION_CALL	4198:3	4198:78	17	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
CALLEE	4198:3	4198:3	18	dump_info
LEAF_NODE	4198:3	4198:3	19	dump_info
LEAF_NODE	4198:13	4198:13	18	(
ARGUMENT	4198:14	4198:14	18	dumpfile
FIELD	4198:14	4198:14	19	dumpfile
LEAF_NODE	4198:14	4198:14	20	dumpfile
LEAF_NODE	4198:22	4198:22	18	,
ARGUMENT	4198:24	4198:24	18	format
FIELD	4198:24	4198:24	19	format
LEAF_NODE	4198:24	4198:24	20	format
LEAF_NODE	4198:30	4198:30	18	,
ARGUMENT	4198:32	4198:32	18	""
FIELD	4198:32	4198:32	19	""
LEAF_NODE	4198:32	4198:32	20	""
LEAF_NODE	4198:34	4198:34	18	,
ARGUMENT	4198:36	4198:36	18	"Ready bits:   %d, %s"
FIELD	4198:36	4198:36	19	"Ready bits:   %d, %s"
LEAF_NODE	4198:36	4198:36	20	"Ready bits:   %d, %s"
LEAF_NODE	4198:58	4198:58	18	,
ARGUMENT	4198:60	4198:60	18	ready_bits
FIELD	4198:60	4198:60	19	ready_bits
LEAF_NODE	4198:60	4198:60	20	ready_bits
LEAF_NODE	4198:70	4198:70	18	,
ARGUMENT	4198:72	4198:72	18	action
FIELD	4198:72	4198:72	19	action
LEAF_NODE	4198:72	4198:72	20	action
LEAF_NODE	4198:78	4198:78	18	)
LEAF_NODE	4198:79	4198:79	16	;
LEAF_NODE	4199:3	4199:3	14	}
LEAF_NODE	4200:1	4200:1	11	}
LEAF_NODE	4201:6	4201:6	8	}
ITERATION	4202:4	4203:6	6	
KEYWORD	4202:4	4202:4	7	while
LEAF_NODE	4202:4	4202:4	8	while
LEAF_NODE	4202:10	4202:10	7	(
CONDITION	4202:11	4202:11	7	ready_bits > 0
EXPR	4202:11	4202:24	8	ready_bits > 0
FIELD	4202:11	4202:11	9	ready_bits
LEAF_NODE	4202:11	4202:11	10	ready_bits
REL_OPERATOR	4202:22	4202:22	9	>
LEAF_NODE	4202:22	4202:22	10	>
FIELD	4202:24	4202:24	9	0
LEAF_NODE	4202:24	4202:24	10	0
LEAF_NODE	4202:25	4202:25	7	)
STATEMENTS	4203:6	4208:6	7	
LEAF_NODE	4203:6	4203:6	8	{
STATEMENTS	4204:6	4207:6	8	
EXPR_STATEMENT	4204:6	4204:31	9	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	4204:6	4204:6	10	bytebuff1 = ( buff2 >> 56 )
ASSIGN	4204:6	4204:18	11	bytebuff1 = ( buff2 >> 56 )
LVAL	4204:6	4204:6	12	bytebuff1
FIELD	4204:6	4204:6	13	bytebuff1
LEAF_NODE	4204:6	4204:6	14	bytebuff1
ASSIGN_OP	4204:16	4204:16	12	=
LEAF_NODE	4204:16	4204:16	13	=
RVAL	4204:18	4204:30	12	( buff2 >> 56 )
LEAF_NODE	4204:18	4204:18	13	(
FIELD	4204:19	4204:19	13	buff2
LEAF_NODE	4204:19	4204:19	14	buff2
LEAF_NODE	4204:25	4204:25	13	>>
FIELD	4204:28	4204:28	13	56
LEAF_NODE	4204:28	4204:28	14	56
LEAF_NODE	4204:30	4204:30	13	)
LEAF_NODE	4204:31	4204:31	10	;
EXPR_STATEMENT	4205:6	4205:24	9	* dst ++ = bytebuff1 ;
EXPR	4205:6	4205:6	10	* dst ++ = bytebuff1
ASSIGN	4205:6	4205:15	11	* dst ++ = bytebuff1
LVAL	4205:6	4205:6	12	* dst ++
UNARY_EXPR	4205:6	4205:7	13	* dst ++
UNARY_OPERATOR	4205:6	4205:6	14	*
LEAF_NODE	4205:6	4205:6	15	*
FIELD	4205:7	4205:10	14	dst ++
LEAF_NODE	4205:7	4205:7	15	dst
LEAF_NODE	4205:10	4205:10	15	++
ASSIGN_OP	4205:13	4205:13	12	=
LEAF_NODE	4205:13	4205:13	13	=
RVAL	4205:15	4205:15	12	bytebuff1
FIELD	4205:15	4205:15	13	bytebuff1
LEAF_NODE	4205:15	4205:15	14	bytebuff1
LEAF_NODE	4205:24	4205:24	10	;
EXPR_STATEMENT	4206:6	4206:26	9	buff2 = ( buff2 << 8 ) ;
EXPR	4206:6	4206:6	10	buff2 = ( buff2 << 8 )
ASSIGN	4206:6	4206:14	11	buff2 = ( buff2 << 8 )
LVAL	4206:6	4206:6	12	buff2
FIELD	4206:6	4206:6	13	buff2
LEAF_NODE	4206:6	4206:6	14	buff2
ASSIGN_OP	4206:12	4206:12	12	=
LEAF_NODE	4206:12	4206:12	13	=
RVAL	4206:14	4206:25	12	( buff2 << 8 )
LEAF_NODE	4206:14	4206:14	13	(
FIELD	4206:15	4206:15	13	buff2
LEAF_NODE	4206:15	4206:15	14	buff2
LEAF_NODE	4206:21	4206:21	13	<<
FIELD	4206:24	4206:24	13	8
LEAF_NODE	4206:24	4206:24	14	8
LEAF_NODE	4206:25	4206:25	13	)
LEAF_NODE	4206:26	4206:26	10	;
EXPR_STATEMENT	4207:6	4207:21	9	ready_bits -= 8 ;
EXPR	4207:6	4207:6	10	ready_bits -= 8
ASSIGN	4207:6	4207:20	11	ready_bits -= 8
LVAL	4207:6	4207:6	12	ready_bits
FIELD	4207:6	4207:6	13	ready_bits
LEAF_NODE	4207:6	4207:6	14	ready_bits
ASSIGN_OP	4207:17	4207:17	12	-=
LEAF_NODE	4207:17	4207:17	13	-=
RVAL	4207:20	4207:20	12	8
FIELD	4207:20	4207:20	13	8
LEAF_NODE	4207:20	4207:20	14	8
LEAF_NODE	4207:21	4207:21	10	;
LEAF_NODE	4208:6	4208:6	8	}
SELECTION	4210:4	4211:6	6	
KEYWORD	4210:4	4210:4	7	if
LEAF_NODE	4210:4	4210:4	8	if
LEAF_NODE	4210:7	4210:7	7	(
CONDITION	4210:8	4210:8	7	( dumpfile != NULL ) && ( level == 3 )
EXPR	4210:8	4210:8	8	( dumpfile != NULL ) && ( level == 3 )
AND	4210:8	4210:30	9	( dumpfile != NULL ) && ( level == 3 )
EXPR	4210:8	4210:25	10	( dumpfile != NULL )
LEAF_NODE	4210:8	4210:8	11	(
FIELD	4210:9	4210:9	11	dumpfile
LEAF_NODE	4210:9	4210:9	12	dumpfile
EQ_OPERATOR	4210:18	4210:18	11	!=
LEAF_NODE	4210:18	4210:18	12	!=
FIELD	4210:21	4210:21	11	NULL
LEAF_NODE	4210:21	4210:21	12	NULL
LEAF_NODE	4210:25	4210:25	11	)
LEAF_NODE	4210:27	4210:27	10	&&
EXPR	4210:30	4210:41	10	( level == 3 )
LEAF_NODE	4210:30	4210:30	11	(
FIELD	4210:31	4210:31	11	level
LEAF_NODE	4210:31	4210:31	12	level
EQ_OPERATOR	4210:37	4210:37	11	==
LEAF_NODE	4210:37	4210:37	12	==
FIELD	4210:40	4210:40	11	3
LEAF_NODE	4210:40	4210:40	12	3
LEAF_NODE	4210:41	4210:41	11	)
LEAF_NODE	4210:42	4210:42	7	)
STATEMENTS	4211:6	4223:6	7	
LEAF_NODE	4211:6	4211:6	8	{
STATEMENTS	4212:6	4222:6	8	
EXPR_STATEMENT	4212:6	4214:50	9	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	4212:6	4212:6	10	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	4212:6	4214:49	11	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	4212:6	4212:6	12	dump_info
LEAF_NODE	4212:6	4212:6	13	dump_info
LEAF_NODE	4212:16	4212:16	12	(
ARGUMENT	4212:17	4212:17	12	dumpfile
FIELD	4212:17	4212:17	13	dumpfile
LEAF_NODE	4212:17	4212:17	14	dumpfile
LEAF_NODE	4212:25	4212:25	12	,
ARGUMENT	4212:27	4212:27	12	format
FIELD	4212:27	4212:27	13	format
LEAF_NODE	4212:27	4212:27	14	format
LEAF_NODE	4212:33	4212:33	12	,
ARGUMENT	4212:35	4212:35	12	""
FIELD	4212:35	4212:35	13	""
LEAF_NODE	4212:35	4212:35	14	""
LEAF_NODE	4212:37	4212:37	12	,
ARGUMENT	4213:10	4213:10	12	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4213:10	4213:10	13	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4213:10	4213:10	14	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4213:81	4213:81	12	,
ARGUMENT	4214:3	4214:9	12	row + 1
FIELD	4214:3	4214:3	13	row
LEAF_NODE	4214:3	4214:3	14	row
LEAF_NODE	4214:7	4214:7	13	+
FIELD	4214:9	4214:9	13	1
LEAF_NODE	4214:9	4214:9	14	1
LEAF_NODE	4214:10	4214:10	12	,
ARGUMENT	4214:12	4214:18	12	col + 1
FIELD	4214:12	4214:12	13	col
LEAF_NODE	4214:12	4214:12	14	col
LEAF_NODE	4214:16	4214:16	13	+
FIELD	4214:18	4214:18	13	1
LEAF_NODE	4214:18	4214:18	14	1
LEAF_NODE	4214:19	4214:19	12	,
ARGUMENT	4214:21	4214:21	12	src_byte
FIELD	4214:21	4214:21	13	src_byte
LEAF_NODE	4214:21	4214:21	14	src_byte
LEAF_NODE	4214:29	4214:29	12	,
ARGUMENT	4214:31	4214:31	12	src_bit
FIELD	4214:31	4214:31	13	src_bit
LEAF_NODE	4214:31	4214:31	14	src_bit
LEAF_NODE	4214:38	4214:38	12	,
ARGUMENT	4214:40	4214:46	12	dst - out
FIELD	4214:40	4214:40	13	dst
LEAF_NODE	4214:40	4214:40	14	dst
LEAF_NODE	4214:44	4214:44	13	-
FIELD	4214:46	4214:46	13	out
LEAF_NODE	4214:46	4214:46	14	out
LEAF_NODE	4214:49	4214:49	12	)
LEAF_NODE	4214:50	4214:50	10	;
EXPR_STATEMENT	4216:6	4216:60	9	dump_long ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4216:6	4216:6	10	dump_long ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4216:6	4216:59	11	dump_long ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4216:6	4216:6	12	dump_long
LEAF_NODE	4216:6	4216:6	13	dump_long
LEAF_NODE	4216:16	4216:16	12	(
ARGUMENT	4216:17	4216:17	12	dumpfile
FIELD	4216:17	4216:17	13	dumpfile
LEAF_NODE	4216:17	4216:17	14	dumpfile
LEAF_NODE	4216:25	4216:25	12	,
ARGUMENT	4216:27	4216:27	12	format
FIELD	4216:27	4216:27	13	format
LEAF_NODE	4216:27	4216:27	14	format
LEAF_NODE	4216:33	4216:33	12	,
ARGUMENT	4216:35	4216:35	12	"Match bits "
FIELD	4216:35	4216:35	13	"Match bits "
LEAF_NODE	4216:35	4216:35	14	"Match bits "
LEAF_NODE	4216:48	4216:48	12	,
ARGUMENT	4216:50	4216:50	12	matchbits
FIELD	4216:50	4216:50	13	matchbits
LEAF_NODE	4216:50	4216:50	14	matchbits
LEAF_NODE	4216:59	4216:59	12	)
LEAF_NODE	4216:60	4216:60	10	;
EXPR_STATEMENT	4217:6	4217:57	9	dump_data ( dumpfile , format , "Src   bits " , src , 4 ) ;
EXPR	4217:6	4217:6	10	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
FUNCTION_CALL	4217:6	4217:56	11	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
CALLEE	4217:6	4217:6	12	dump_data
LEAF_NODE	4217:6	4217:6	13	dump_data
LEAF_NODE	4217:16	4217:16	12	(
ARGUMENT	4217:17	4217:17	12	dumpfile
FIELD	4217:17	4217:17	13	dumpfile
LEAF_NODE	4217:17	4217:17	14	dumpfile
LEAF_NODE	4217:25	4217:25	12	,
ARGUMENT	4217:27	4217:27	12	format
FIELD	4217:27	4217:27	13	format
LEAF_NODE	4217:27	4217:27	14	format
LEAF_NODE	4217:33	4217:33	12	,
ARGUMENT	4217:35	4217:35	12	"Src   bits "
FIELD	4217:35	4217:35	13	"Src   bits "
LEAF_NODE	4217:35	4217:35	14	"Src   bits "
LEAF_NODE	4217:48	4217:48	12	,
ARGUMENT	4217:50	4217:50	12	src
FIELD	4217:50	4217:50	13	src
LEAF_NODE	4217:50	4217:50	14	src
LEAF_NODE	4217:53	4217:53	12	,
ARGUMENT	4217:55	4217:55	12	4
FIELD	4217:55	4217:55	13	4
LEAF_NODE	4217:55	4217:55	14	4
LEAF_NODE	4217:56	4217:56	12	)
LEAF_NODE	4217:57	4217:57	10	;
EXPR_STATEMENT	4218:6	4218:56	9	dump_long ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4218:6	4218:6	10	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4218:6	4218:55	11	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4218:6	4218:6	12	dump_long
LEAF_NODE	4218:6	4218:6	13	dump_long
LEAF_NODE	4218:16	4218:16	12	(
ARGUMENT	4218:17	4218:17	12	dumpfile
FIELD	4218:17	4218:17	13	dumpfile
LEAF_NODE	4218:17	4218:17	14	dumpfile
LEAF_NODE	4218:25	4218:25	12	,
ARGUMENT	4218:27	4218:27	12	format
FIELD	4218:27	4218:27	13	format
LEAF_NODE	4218:27	4218:27	14	format
LEAF_NODE	4218:33	4218:33	12	,
ARGUMENT	4218:35	4218:35	12	"Buff1 bits "
FIELD	4218:35	4218:35	13	"Buff1 bits "
LEAF_NODE	4218:35	4218:35	14	"Buff1 bits "
LEAF_NODE	4218:48	4218:48	12	,
ARGUMENT	4218:50	4218:50	12	buff1
FIELD	4218:50	4218:50	13	buff1
LEAF_NODE	4218:50	4218:50	14	buff1
LEAF_NODE	4218:55	4218:55	12	)
LEAF_NODE	4218:56	4218:56	10	;
EXPR_STATEMENT	4219:6	4219:56	9	dump_long ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4219:6	4219:6	10	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4219:6	4219:55	11	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4219:6	4219:6	12	dump_long
LEAF_NODE	4219:6	4219:6	13	dump_long
LEAF_NODE	4219:16	4219:16	12	(
ARGUMENT	4219:17	4219:17	12	dumpfile
FIELD	4219:17	4219:17	13	dumpfile
LEAF_NODE	4219:17	4219:17	14	dumpfile
LEAF_NODE	4219:25	4219:25	12	,
ARGUMENT	4219:27	4219:27	12	format
FIELD	4219:27	4219:27	13	format
LEAF_NODE	4219:27	4219:27	14	format
LEAF_NODE	4219:33	4219:33	12	,
ARGUMENT	4219:35	4219:35	12	"Buff2 bits "
FIELD	4219:35	4219:35	13	"Buff2 bits "
LEAF_NODE	4219:35	4219:35	14	"Buff2 bits "
LEAF_NODE	4219:48	4219:48	12	,
ARGUMENT	4219:50	4219:50	12	buff2
FIELD	4219:50	4219:50	13	buff2
LEAF_NODE	4219:50	4219:50	14	buff2
LEAF_NODE	4219:55	4219:55	12	)
LEAF_NODE	4219:56	4219:56	10	;
EXPR_STATEMENT	4220:6	4220:60	9	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 ) ;
EXPR	4220:6	4220:6	10	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
FUNCTION_CALL	4220:6	4220:59	11	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
CALLEE	4220:6	4220:6	12	dump_byte
LEAF_NODE	4220:6	4220:6	13	dump_byte
LEAF_NODE	4220:16	4220:16	12	(
ARGUMENT	4220:17	4220:17	12	dumpfile
FIELD	4220:17	4220:17	13	dumpfile
LEAF_NODE	4220:17	4220:17	14	dumpfile
LEAF_NODE	4220:25	4220:25	12	,
ARGUMENT	4220:27	4220:27	12	format
FIELD	4220:27	4220:27	13	format
LEAF_NODE	4220:27	4220:27	14	format
LEAF_NODE	4220:33	4220:33	12	,
ARGUMENT	4220:35	4220:35	12	"Write bits1"
FIELD	4220:35	4220:35	13	"Write bits1"
LEAF_NODE	4220:35	4220:35	14	"Write bits1"
LEAF_NODE	4220:48	4220:48	12	,
ARGUMENT	4220:50	4220:50	12	bytebuff1
FIELD	4220:50	4220:50	13	bytebuff1
LEAF_NODE	4220:50	4220:50	14	bytebuff1
LEAF_NODE	4220:59	4220:59	12	)
LEAF_NODE	4220:60	4220:60	10	;
EXPR_STATEMENT	4221:6	4221:60	9	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 ) ;
EXPR	4221:6	4221:6	10	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
FUNCTION_CALL	4221:6	4221:59	11	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
CALLEE	4221:6	4221:6	12	dump_byte
LEAF_NODE	4221:6	4221:6	13	dump_byte
LEAF_NODE	4221:16	4221:16	12	(
ARGUMENT	4221:17	4221:17	12	dumpfile
FIELD	4221:17	4221:17	13	dumpfile
LEAF_NODE	4221:17	4221:17	14	dumpfile
LEAF_NODE	4221:25	4221:25	12	,
ARGUMENT	4221:27	4221:27	12	format
FIELD	4221:27	4221:27	13	format
LEAF_NODE	4221:27	4221:27	14	format
LEAF_NODE	4221:33	4221:33	12	,
ARGUMENT	4221:35	4221:35	12	"Write bits2"
FIELD	4221:35	4221:35	13	"Write bits2"
LEAF_NODE	4221:35	4221:35	14	"Write bits2"
LEAF_NODE	4221:48	4221:48	12	,
ARGUMENT	4221:50	4221:50	12	bytebuff2
FIELD	4221:50	4221:50	13	bytebuff2
LEAF_NODE	4221:50	4221:50	14	bytebuff2
LEAF_NODE	4221:59	4221:59	12	)
LEAF_NODE	4221:60	4221:60	10	;
EXPR_STATEMENT	4222:6	4222:70	9	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits ) ;
EXPR	4222:6	4222:6	10	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
FUNCTION_CALL	4222:6	4222:69	11	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
CALLEE	4222:6	4222:6	12	dump_info
LEAF_NODE	4222:6	4222:6	13	dump_info
LEAF_NODE	4222:16	4222:16	12	(
ARGUMENT	4222:17	4222:17	12	dumpfile
FIELD	4222:17	4222:17	13	dumpfile
LEAF_NODE	4222:17	4222:17	14	dumpfile
LEAF_NODE	4222:25	4222:25	12	,
ARGUMENT	4222:27	4222:27	12	format
FIELD	4222:27	4222:27	13	format
LEAF_NODE	4222:27	4222:27	14	format
LEAF_NODE	4222:33	4222:33	12	,
ARGUMENT	4222:35	4222:35	12	""
FIELD	4222:35	4222:35	13	""
LEAF_NODE	4222:35	4222:35	14	""
LEAF_NODE	4222:37	4222:37	12	,
ARGUMENT	4222:39	4222:39	12	"Ready bits:  %2d"
FIELD	4222:39	4222:39	13	"Ready bits:  %2d"
LEAF_NODE	4222:39	4222:39	14	"Ready bits:  %2d"
LEAF_NODE	4222:57	4222:57	12	,
ARGUMENT	4222:59	4222:59	12	ready_bits
FIELD	4222:59	4222:59	13	ready_bits
LEAF_NODE	4222:59	4222:59	14	ready_bits
LEAF_NODE	4222:69	4222:69	12	)
LEAF_NODE	4222:70	4222:70	10	;
LEAF_NODE	4223:6	4223:6	8	}
SELECTION	4225:4	4226:6	6	
KEYWORD	4225:4	4225:4	7	if
LEAF_NODE	4225:4	4225:4	8	if
LEAF_NODE	4225:7	4225:7	7	(
CONDITION	4225:8	4225:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	4225:8	4225:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	4225:8	4225:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	4225:8	4225:25	10	( dumpfile != NULL )
LEAF_NODE	4225:8	4225:8	11	(
FIELD	4225:9	4225:9	11	dumpfile
LEAF_NODE	4225:9	4225:9	12	dumpfile
EQ_OPERATOR	4225:18	4225:18	11	!=
LEAF_NODE	4225:18	4225:18	12	!=
FIELD	4225:21	4225:21	11	NULL
LEAF_NODE	4225:21	4225:21	12	NULL
LEAF_NODE	4225:25	4225:25	11	)
LEAF_NODE	4225:27	4225:27	10	&&
EXPR	4225:30	4225:41	10	( level == 2 )
LEAF_NODE	4225:30	4225:30	11	(
FIELD	4225:31	4225:31	11	level
LEAF_NODE	4225:31	4225:31	12	level
EQ_OPERATOR	4225:37	4225:37	11	==
LEAF_NODE	4225:37	4225:37	12	==
FIELD	4225:40	4225:40	11	2
LEAF_NODE	4225:40	4225:40	12	2
LEAF_NODE	4225:41	4225:41	11	)
LEAF_NODE	4225:42	4225:42	7	)
STATEMENTS	4226:6	4229:6	7	
LEAF_NODE	4226:6	4226:6	8	{
STATEMENTS	4227:6	4228:6	8	
EXPR_STATEMENT	4227:6	4227:80	9	dump_info ( dumpfile , format , "combineSeparateSamples32bits" , "Output data" ) ;
EXPR	4227:6	4227:6	10	dump_info ( dumpfile , format , "combineSeparateSamples32bits" , "Output data" )
FUNCTION_CALL	4227:6	4227:79	11	dump_info ( dumpfile , format , "combineSeparateSamples32bits" , "Output data" )
CALLEE	4227:6	4227:6	12	dump_info
LEAF_NODE	4227:6	4227:6	13	dump_info
LEAF_NODE	4227:16	4227:16	12	(
ARGUMENT	4227:17	4227:17	12	dumpfile
FIELD	4227:17	4227:17	13	dumpfile
LEAF_NODE	4227:17	4227:17	14	dumpfile
LEAF_NODE	4227:25	4227:25	12	,
ARGUMENT	4227:27	4227:27	12	format
FIELD	4227:27	4227:27	13	format
LEAF_NODE	4227:27	4227:27	14	format
LEAF_NODE	4227:33	4227:33	12	,
ARGUMENT	4227:35	4227:35	12	"combineSeparateSamples32bits"
FIELD	4227:35	4227:35	13	"combineSeparateSamples32bits"
LEAF_NODE	4227:35	4227:35	14	"combineSeparateSamples32bits"
LEAF_NODE	4227:65	4227:65	12	,
ARGUMENT	4227:66	4227:66	12	"Output data"
FIELD	4227:66	4227:66	13	"Output data"
LEAF_NODE	4227:66	4227:66	14	"Output data"
LEAF_NODE	4227:79	4227:79	12	)
LEAF_NODE	4227:80	4227:80	10	;
EXPR_STATEMENT	4228:6	4228:61	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out ) ;
EXPR	4228:6	4228:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out )
FUNCTION_CALL	4228:6	4228:60	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out )
CALLEE	4228:6	4228:6	12	dump_buffer
LEAF_NODE	4228:6	4228:6	13	dump_buffer
LEAF_NODE	4228:17	4228:17	12	(
ARGUMENT	4228:18	4228:18	12	dumpfile
FIELD	4228:18	4228:18	13	dumpfile
LEAF_NODE	4228:18	4228:18	14	dumpfile
LEAF_NODE	4228:26	4228:26	12	,
ARGUMENT	4228:28	4228:28	12	format
FIELD	4228:28	4228:28	13	format
LEAF_NODE	4228:28	4228:28	14	format
LEAF_NODE	4228:34	4228:34	12	,
ARGUMENT	4228:36	4228:36	12	1
FIELD	4228:36	4228:36	13	1
LEAF_NODE	4228:36	4228:36	14	1
LEAF_NODE	4228:37	4228:37	12	,
ARGUMENT	4228:39	4228:39	12	dst_rowsize
FIELD	4228:39	4228:39	13	dst_rowsize
LEAF_NODE	4228:39	4228:39	14	dst_rowsize
LEAF_NODE	4228:50	4228:50	12	,
ARGUMENT	4228:52	4228:52	12	row
FIELD	4228:52	4228:52	13	row
LEAF_NODE	4228:52	4228:52	14	row
LEAF_NODE	4228:55	4228:55	12	,
ARGUMENT	4228:57	4228:57	12	out
FIELD	4228:57	4228:57	13	out
LEAF_NODE	4228:57	4228:57	14	out
LEAF_NODE	4228:60	4228:60	12	)
LEAF_NODE	4228:61	4228:61	10	;
LEAF_NODE	4229:6	4229:6	8	}
LEAF_NODE	4230:4	4230:4	5	}
JUMP_STATEMENT	4232:2	4232:12	3	return ( 0 ) ;
KEYWORD	4232:2	4232:2	4	return
LEAF_NODE	4232:2	4232:2	5	return
DESTINATION	4232:9	4232:9	4	( 0 )
EXPR	4232:9	4232:11	5	( 0 )
LEAF_NODE	4232:9	4232:9	6	(
FIELD	4232:10	4232:10	6	0
LEAF_NODE	4232:10	4232:10	7	0
LEAF_NODE	4232:11	4232:11	6	)
LEAF_NODE	4232:12	4232:12	4	;
LEAF_NODE	4233:2	4233:2	2	}
FUNCTION_DEF	4235:0	4294:2	1	
RETURN_TYPE	4235:0	4235:7	2	static int
LEAF_NODE	4235:0	4235:0	3	static
TYPE_NAME	4235:7	4235:7	3	int
LEAF_NODE	4235:7	4235:7	4	int
FUNCTION_NAME	4236:0	4236:0	2	combineSeparateTileSamplesBytes
LEAF_NODE	4236:0	4236:0	3	combineSeparateTileSamplesBytes
PARAMETER_LIST	4236:32	4239:70	2	( unsigned char * [ ] srcbuffs , unsigned char * out , uint32 cols , uint32 rows , uint32 imagewidth , uint32 tw , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	4236:32	4236:32	3	(
PARAMETER_DECL	4236:33	4236:48	3	unsigned char * [ ] srcbuffs
TYPE	4236:33	4236:56	4	unsigned char * [ ]
TYPE_NAME	4236:33	4236:42	5	unsigned char
LEAF_NODE	4236:33	4236:33	6	unsigned
LEAF_NODE	4236:42	4236:42	6	char
POINTER	4236:47	4236:47	5	*
LEAF_NODE	4236:47	4236:47	6	*
TYPE_SUFFIX	4236:56	4236:57	5	[ ]
LEAF_NODE	4236:56	4236:56	6	[
LEAF_NODE	4236:57	4236:57	6	]
NAME	4236:48	4236:48	4	srcbuffs
LEAF_NODE	4236:48	4236:48	5	srcbuffs
LEAF_NODE	4236:58	4236:58	3	,
PARAMETER_DECL	4236:60	4236:75	3	unsigned char * out
TYPE	4236:60	4236:74	4	unsigned char *
TYPE_NAME	4236:60	4236:69	5	unsigned char
LEAF_NODE	4236:60	4236:60	6	unsigned
LEAF_NODE	4236:69	4236:69	6	char
POINTER	4236:74	4236:74	5	*
LEAF_NODE	4236:74	4236:74	6	*
NAME	4236:75	4236:75	4	out
LEAF_NODE	4236:75	4236:75	5	out
LEAF_NODE	4236:78	4236:78	3	,
PARAMETER_DECL	4237:33	4237:40	3	uint32 cols
TYPE	4237:33	4237:33	4	uint32
TYPE_NAME	4237:33	4237:33	5	uint32
LEAF_NODE	4237:33	4237:33	6	uint32
NAME	4237:40	4237:40	4	cols
LEAF_NODE	4237:40	4237:40	5	cols
LEAF_NODE	4237:44	4237:44	3	,
PARAMETER_DECL	4237:46	4237:53	3	uint32 rows
TYPE	4237:46	4237:46	4	uint32
TYPE_NAME	4237:46	4237:46	5	uint32
LEAF_NODE	4237:46	4237:46	6	uint32
NAME	4237:53	4237:53	4	rows
LEAF_NODE	4237:53	4237:53	5	rows
LEAF_NODE	4237:57	4237:57	3	,
PARAMETER_DECL	4237:59	4237:66	3	uint32 imagewidth
TYPE	4237:59	4237:59	4	uint32
TYPE_NAME	4237:59	4237:59	5	uint32
LEAF_NODE	4237:59	4237:59	6	uint32
NAME	4237:66	4237:66	4	imagewidth
LEAF_NODE	4237:66	4237:66	5	imagewidth
LEAF_NODE	4237:76	4237:76	3	,
PARAMETER_DECL	4238:33	4238:40	3	uint32 tw
TYPE	4238:33	4238:33	4	uint32
TYPE_NAME	4238:33	4238:33	5	uint32
LEAF_NODE	4238:33	4238:33	6	uint32
NAME	4238:40	4238:40	4	tw
LEAF_NODE	4238:40	4238:40	5	tw
LEAF_NODE	4238:42	4238:42	3	,
PARAMETER_DECL	4238:44	4238:51	3	uint16 spp
TYPE	4238:44	4238:44	4	uint16
TYPE_NAME	4238:44	4238:44	5	uint16
LEAF_NODE	4238:44	4238:44	6	uint16
NAME	4238:51	4238:51	4	spp
LEAF_NODE	4238:51	4238:51	5	spp
LEAF_NODE	4238:54	4238:54	3	,
PARAMETER_DECL	4238:56	4238:63	3	uint16 bps
TYPE	4238:56	4238:56	4	uint16
TYPE_NAME	4238:56	4238:56	5	uint16
LEAF_NODE	4238:56	4238:56	6	uint16
NAME	4238:63	4238:63	4	bps
LEAF_NODE	4238:63	4238:63	5	bps
LEAF_NODE	4238:66	4238:66	3	,
PARAMETER_DECL	4239:33	4239:39	3	FILE * dumpfile
TYPE	4239:33	4239:38	4	FILE *
TYPE_NAME	4239:33	4239:33	5	FILE
LEAF_NODE	4239:33	4239:33	6	FILE
POINTER	4239:38	4239:38	5	*
LEAF_NODE	4239:38	4239:38	6	*
NAME	4239:39	4239:39	4	dumpfile
LEAF_NODE	4239:39	4239:39	5	dumpfile
LEAF_NODE	4239:47	4239:47	3	,
PARAMETER_DECL	4239:49	4239:53	3	int format
TYPE	4239:49	4239:49	4	int
TYPE_NAME	4239:49	4239:49	5	int
LEAF_NODE	4239:49	4239:49	6	int
NAME	4239:53	4239:53	4	format
LEAF_NODE	4239:53	4239:53	5	format
LEAF_NODE	4239:59	4239:59	3	,
PARAMETER_DECL	4239:61	4239:65	3	int level
TYPE	4239:61	4239:61	4	int
TYPE_NAME	4239:61	4239:61	5	int
LEAF_NODE	4239:61	4239:61	6	int
NAME	4239:65	4239:65	4	level
LEAF_NODE	4239:65	4239:65	5	level
LEAF_NODE	4239:70	4239:70	3	)
LEAF_NODE	4240:2	4240:2	2	{
STATEMENTS	4241:2	4293:2	2	
SIMPLE_DECL	4241:2	4241:25	3	int i , int bytes_per_sample ;
INIT_DECL_LIST	4241:2	4241:2	4	int i , int bytes_per_sample
VAR_DECL	4241:2	4241:6	5	int i
TYPE	4241:2	4241:2	6	int
TYPE_NAME	4241:2	4241:2	7	int
LEAF_NODE	4241:2	4241:2	8	int
NAME	4241:6	4241:6	6	i
LEAF_NODE	4241:6	4241:6	7	i
LEAF_NODE	4241:7	4241:7	5	,
VAR_DECL	4241:2	4241:9	5	int bytes_per_sample
TYPE	4241:2	4241:2	6	int
TYPE_NAME	4241:2	4241:2	7	int
LEAF_NODE	4241:2	4241:2	8	int
NAME	4241:9	4241:9	6	bytes_per_sample
LEAF_NODE	4241:9	4241:9	7	bytes_per_sample
LEAF_NODE	4241:25	4241:25	4	;
SIMPLE_DECL	4242:2	4242:67	3	uint32 row , uint32 col , uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset ;
INIT_DECL_LIST	4242:2	4242:2	4	uint32 row , uint32 col , uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset
VAR_DECL	4242:2	4242:9	5	uint32 row
TYPE	4242:2	4242:2	6	uint32
TYPE_NAME	4242:2	4242:2	7	uint32
LEAF_NODE	4242:2	4242:2	8	uint32
NAME	4242:9	4242:9	6	row
LEAF_NODE	4242:9	4242:9	7	row
LEAF_NODE	4242:12	4242:12	5	,
INIT_DECL_LIST	4242:2	4242:2	5	uint32 col , uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset
VAR_DECL	4242:2	4242:14	6	uint32 col
TYPE	4242:2	4242:2	7	uint32
TYPE_NAME	4242:2	4242:2	8	uint32
LEAF_NODE	4242:2	4242:2	9	uint32
NAME	4242:14	4242:14	7	col
LEAF_NODE	4242:14	4242:14	8	col
LEAF_NODE	4242:17	4242:17	6	,
INIT_DECL_LIST	4242:2	4242:2	6	uint32 col_offset , uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset
VAR_DECL	4242:2	4242:19	7	uint32 col_offset
TYPE	4242:2	4242:2	8	uint32
TYPE_NAME	4242:2	4242:2	9	uint32
LEAF_NODE	4242:2	4242:2	10	uint32
NAME	4242:19	4242:19	8	col_offset
LEAF_NODE	4242:19	4242:19	9	col_offset
LEAF_NODE	4242:29	4242:29	7	,
INIT_DECL_LIST	4242:2	4242:2	7	uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset
VAR_DECL	4242:2	4242:31	8	uint32 src_rowsize
TYPE	4242:2	4242:2	9	uint32
TYPE_NAME	4242:2	4242:2	10	uint32
LEAF_NODE	4242:2	4242:2	11	uint32
NAME	4242:31	4242:31	9	src_rowsize
LEAF_NODE	4242:31	4242:31	10	src_rowsize
LEAF_NODE	4242:42	4242:42	8	,
INIT_DECL_LIST	4242:2	4242:2	8	uint32 dst_rowsize , uint32 src_offset
VAR_DECL	4242:2	4242:44	9	uint32 dst_rowsize
TYPE	4242:2	4242:2	10	uint32
TYPE_NAME	4242:2	4242:2	11	uint32
LEAF_NODE	4242:2	4242:2	12	uint32
NAME	4242:44	4242:44	10	dst_rowsize
LEAF_NODE	4242:44	4242:44	11	dst_rowsize
LEAF_NODE	4242:55	4242:55	9	,
VAR_DECL	4242:2	4242:57	9	uint32 src_offset
TYPE	4242:2	4242:2	10	uint32
TYPE_NAME	4242:2	4242:2	11	uint32
LEAF_NODE	4242:2	4242:2	12	uint32
NAME	4242:57	4242:57	10	src_offset
LEAF_NODE	4242:57	4242:57	11	src_offset
LEAF_NODE	4242:67	4242:67	4	;
SIMPLE_DECL	4243:2	4243:20	3	unsigned char * src ;
VAR_DECL	4243:2	4243:17	4	unsigned char * src
TYPE	4243:2	4243:16	5	unsigned char *
TYPE_NAME	4243:2	4243:11	6	unsigned char
LEAF_NODE	4243:2	4243:2	7	unsigned
LEAF_NODE	4243:11	4243:11	7	char
POINTER	4243:16	4243:16	6	*
LEAF_NODE	4243:16	4243:16	7	*
NAME	4243:17	4243:17	5	src
LEAF_NODE	4243:17	4243:17	6	src
LEAF_NODE	4243:20	4243:20	4	;
SIMPLE_DECL	4244:2	4244:20	3	unsigned char * dst ;
VAR_DECL	4244:2	4244:17	4	unsigned char * dst
TYPE	4244:2	4244:16	5	unsigned char *
TYPE_NAME	4244:2	4244:11	6	unsigned char
LEAF_NODE	4244:2	4244:2	7	unsigned
LEAF_NODE	4244:11	4244:11	7	char
POINTER	4244:16	4244:16	6	*
LEAF_NODE	4244:16	4244:16	7	*
NAME	4244:17	4244:17	5	dst
LEAF_NODE	4244:17	4244:17	6	dst
LEAF_NODE	4244:20	4244:20	4	;
SIMPLE_DECL	4245:2	4245:13	3	tsample_t s ;
VAR_DECL	4245:2	4245:12	4	tsample_t s
TYPE	4245:2	4245:2	5	tsample_t
TYPE_NAME	4245:2	4245:2	6	tsample_t
LEAF_NODE	4245:2	4245:2	7	tsample_t
NAME	4245:12	4245:12	5	s
LEAF_NODE	4245:12	4245:12	6	s
LEAF_NODE	4245:13	4245:13	4	;
EXPR_STATEMENT	4247:2	4247:19	3	src = srcbuffs [ 0 ] ;
EXPR	4247:2	4247:2	4	src = srcbuffs [ 0 ]
ASSIGN	4247:2	4247:8	5	src = srcbuffs [ 0 ]
LVAL	4247:2	4247:2	6	src
FIELD	4247:2	4247:2	7	src
LEAF_NODE	4247:2	4247:2	8	src
ASSIGN_OP	4247:6	4247:6	6	=
LEAF_NODE	4247:6	4247:6	7	=
RVAL	4247:8	4247:8	6	srcbuffs [ 0 ]
FIELD	4247:8	4247:18	7	srcbuffs [ 0 ]
LEAF_NODE	4247:8	4247:8	8	srcbuffs
LEAF_NODE	4247:16	4247:16	8	[
EXPR	4247:17	4247:17	8	0
FIELD	4247:17	4247:17	9	0
LEAF_NODE	4247:17	4247:17	10	0
LEAF_NODE	4247:18	4247:18	8	]
LEAF_NODE	4247:19	4247:19	4	;
EXPR_STATEMENT	4248:2	4248:11	3	dst = out ;
EXPR	4248:2	4248:2	4	dst = out
ASSIGN	4248:2	4248:8	5	dst = out
LVAL	4248:2	4248:2	6	dst
FIELD	4248:2	4248:2	7	dst
LEAF_NODE	4248:2	4248:2	8	dst
ASSIGN_OP	4248:6	4248:6	6	=
LEAF_NODE	4248:6	4248:6	7	=
RVAL	4248:8	4248:8	6	out
FIELD	4248:8	4248:8	7	out
LEAF_NODE	4248:8	4248:8	8	out
LEAF_NODE	4248:11	4248:11	4	;
SELECTION	4249:2	4250:4	3	
KEYWORD	4249:2	4249:2	4	if
LEAF_NODE	4249:2	4249:2	5	if
LEAF_NODE	4249:5	4249:5	4	(
CONDITION	4249:6	4249:6	4	( src == NULL ) || ( dst == NULL )
EXPR	4249:6	4249:6	5	( src == NULL ) || ( dst == NULL )
OR	4249:6	4249:23	6	( src == NULL ) || ( dst == NULL )
EXPR	4249:6	4249:18	7	( src == NULL )
LEAF_NODE	4249:6	4249:6	8	(
FIELD	4249:7	4249:7	8	src
LEAF_NODE	4249:7	4249:7	9	src
EQ_OPERATOR	4249:11	4249:11	8	==
LEAF_NODE	4249:11	4249:11	9	==
FIELD	4249:14	4249:14	8	NULL
LEAF_NODE	4249:14	4249:14	9	NULL
LEAF_NODE	4249:18	4249:18	8	)
LEAF_NODE	4249:20	4249:20	7	||
EXPR	4249:23	4249:35	7	( dst == NULL )
LEAF_NODE	4249:23	4249:23	8	(
FIELD	4249:24	4249:24	8	dst
LEAF_NODE	4249:24	4249:24	9	dst
EQ_OPERATOR	4249:28	4249:28	8	==
LEAF_NODE	4249:28	4249:28	9	==
FIELD	4249:31	4249:31	8	NULL
LEAF_NODE	4249:31	4249:31	9	NULL
LEAF_NODE	4249:35	4249:35	8	)
LEAF_NODE	4249:36	4249:36	4	)
STATEMENTS	4250:4	4253:4	4	
LEAF_NODE	4250:4	4250:4	5	{
STATEMENTS	4251:4	4252:4	5	
EXPR_STATEMENT	4251:4	4251:73	6	TIFFError ( "combineSeparateTileSamplesBytes" , "Invalid buffer address" ) ;
EXPR	4251:4	4251:4	7	TIFFError ( "combineSeparateTileSamplesBytes" , "Invalid buffer address" )
FUNCTION_CALL	4251:4	4251:72	8	TIFFError ( "combineSeparateTileSamplesBytes" , "Invalid buffer address" )
CALLEE	4251:4	4251:4	9	TIFFError
LEAF_NODE	4251:4	4251:4	10	TIFFError
LEAF_NODE	4251:13	4251:13	9	(
ARGUMENT	4251:14	4251:14	9	"combineSeparateTileSamplesBytes"
FIELD	4251:14	4251:14	10	"combineSeparateTileSamplesBytes"
LEAF_NODE	4251:14	4251:14	11	"combineSeparateTileSamplesBytes"
LEAF_NODE	4251:47	4251:47	9	,
ARGUMENT	4251:48	4251:48	9	"Invalid buffer address"
FIELD	4251:48	4251:48	10	"Invalid buffer address"
LEAF_NODE	4251:48	4251:48	11	"Invalid buffer address"
LEAF_NODE	4251:72	4251:72	9	)
LEAF_NODE	4251:73	4251:73	7	;
JUMP_STATEMENT	4252:4	4252:14	6	return ( 1 ) ;
KEYWORD	4252:4	4252:4	7	return
LEAF_NODE	4252:4	4252:4	8	return
DESTINATION	4252:11	4252:11	7	( 1 )
EXPR	4252:11	4252:13	8	( 1 )
LEAF_NODE	4252:11	4252:11	9	(
FIELD	4252:12	4252:12	9	1
LEAF_NODE	4252:12	4252:12	10	1
LEAF_NODE	4252:13	4252:13	9	)
LEAF_NODE	4252:14	4252:14	7	;
LEAF_NODE	4253:4	4253:4	5	}
EXPR_STATEMENT	4255:2	4255:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	4255:2	4255:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	4255:2	4255:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	4255:2	4255:2	6	bytes_per_sample
FIELD	4255:2	4255:2	7	bytes_per_sample
LEAF_NODE	4255:2	4255:2	8	bytes_per_sample
ASSIGN_OP	4255:19	4255:19	6	=
LEAF_NODE	4255:19	4255:19	7	=
RVAL	4255:21	4255:33	6	( bps + 7 ) / 8
LEAF_NODE	4255:21	4255:21	7	(
FIELD	4255:22	4255:22	7	bps
LEAF_NODE	4255:22	4255:22	8	bps
LEAF_NODE	4255:26	4255:26	7	+
FIELD	4255:28	4255:28	7	7
LEAF_NODE	4255:28	4255:28	8	7
LEAF_NODE	4255:29	4255:29	7	)
LEAF_NODE	4255:31	4255:31	7	/
FIELD	4255:33	4255:33	7	8
LEAF_NODE	4255:33	4255:33	8	8
LEAF_NODE	4255:34	4255:34	4	;
EXPR_STATEMENT	4256:2	4256:36	3	src_rowsize = ( ( bps * tw ) + 7 ) / 8 ;
EXPR	4256:2	4256:2	4	src_rowsize = ( ( bps * tw ) + 7 ) / 8
ASSIGN	4256:2	4256:16	5	src_rowsize = ( ( bps * tw ) + 7 ) / 8
LVAL	4256:2	4256:2	6	src_rowsize
FIELD	4256:2	4256:2	7	src_rowsize
LEAF_NODE	4256:2	4256:2	8	src_rowsize
ASSIGN_OP	4256:14	4256:14	6	=
LEAF_NODE	4256:14	4256:14	7	=
RVAL	4256:16	4256:35	6	( ( bps * tw ) + 7 ) / 8
LEAF_NODE	4256:16	4256:16	7	(
LEAF_NODE	4256:17	4256:17	7	(
FIELD	4256:18	4256:18	7	bps
LEAF_NODE	4256:18	4256:18	8	bps
LEAF_NODE	4256:22	4256:22	7	*
FIELD	4256:24	4256:24	7	tw
LEAF_NODE	4256:24	4256:24	8	tw
LEAF_NODE	4256:26	4256:26	7	)
LEAF_NODE	4256:28	4256:28	7	+
FIELD	4256:30	4256:30	7	7
LEAF_NODE	4256:30	4256:30	8	7
LEAF_NODE	4256:31	4256:31	7	)
LEAF_NODE	4256:33	4256:33	7	/
FIELD	4256:35	4256:35	7	8
LEAF_NODE	4256:35	4256:35	8	8
LEAF_NODE	4256:36	4256:36	4	;
LEAF_NODE	4257:2	4257:2	3	dst_rowsize
LEAF_NODE	4257:14	4257:14	3	=
LEAF_NODE	4257:16	4257:16	3	imagewidth
EXPR_STATEMENT	4257:27	4257:51	3	* bytes_per_sample * spp ;
EXPR	4257:27	4257:48	4	* bytes_per_sample * spp
UNARY_EXPR	4257:27	4257:29	5	* bytes_per_sample
UNARY_OPERATOR	4257:27	4257:27	6	*
LEAF_NODE	4257:27	4257:27	7	*
FIELD	4257:29	4257:29	6	bytes_per_sample
LEAF_NODE	4257:29	4257:29	7	bytes_per_sample
LEAF_NODE	4257:46	4257:46	5	*
FIELD	4257:48	4257:48	5	spp
LEAF_NODE	4257:48	4257:48	6	spp
LEAF_NODE	4257:51	4257:51	4	;
ITERATION	4258:2	4259:4	3	
KEYWORD	4258:2	4258:2	4	for
LEAF_NODE	4258:2	4258:2	5	for
LEAF_NODE	4258:6	4258:6	4	(
FOR_INIT	4258:7	4258:14	4	row = 0 ;
EXPR	4258:7	4258:7	5	row = 0
ASSIGN	4258:7	4258:13	6	row = 0
LVAL	4258:7	4258:7	7	row
FIELD	4258:7	4258:7	8	row
LEAF_NODE	4258:7	4258:7	9	row
ASSIGN_OP	4258:11	4258:11	7	=
LEAF_NODE	4258:11	4258:11	8	=
RVAL	4258:13	4258:13	7	0
FIELD	4258:13	4258:13	8	0
LEAF_NODE	4258:13	4258:13	9	0
LEAF_NODE	4258:14	4258:14	5	;
CONDITION	4258:16	4258:16	4	row < rows
EXPR	4258:16	4258:22	5	row < rows
FIELD	4258:16	4258:16	6	row
LEAF_NODE	4258:16	4258:16	7	row
REL_OPERATOR	4258:20	4258:20	6	<
LEAF_NODE	4258:20	4258:20	7	<
FIELD	4258:22	4258:22	6	rows
LEAF_NODE	4258:22	4258:22	7	rows
LEAF_NODE	4258:26	4258:26	4	;
FOR_EXPR	4258:28	4258:28	4	row ++
EXPR	4258:28	4258:28	5	row ++
FIELD	4258:28	4258:31	6	row ++
LEAF_NODE	4258:28	4258:28	7	row
LEAF_NODE	4258:31	4258:31	7	++
LEAF_NODE	4258:33	4258:33	4	)
STATEMENTS	4259:4	4291:4	4	
LEAF_NODE	4259:4	4259:4	5	{
STATEMENTS	4260:4	4286:4	5	
SELECTION	4260:4	4261:6	6	
KEYWORD	4260:4	4260:4	7	if
LEAF_NODE	4260:4	4260:4	8	if
LEAF_NODE	4260:7	4260:7	7	(
CONDITION	4260:8	4260:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	4260:8	4260:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	4260:8	4260:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	4260:8	4260:25	10	( dumpfile != NULL )
LEAF_NODE	4260:8	4260:8	11	(
FIELD	4260:9	4260:9	11	dumpfile
LEAF_NODE	4260:9	4260:9	12	dumpfile
EQ_OPERATOR	4260:18	4260:18	11	!=
LEAF_NODE	4260:18	4260:18	12	!=
FIELD	4260:21	4260:21	11	NULL
LEAF_NODE	4260:21	4260:21	12	NULL
LEAF_NODE	4260:25	4260:25	11	)
LEAF_NODE	4260:27	4260:27	10	&&
EXPR	4260:30	4260:41	10	( level == 2 )
LEAF_NODE	4260:30	4260:30	11	(
FIELD	4260:31	4260:31	11	level
LEAF_NODE	4260:31	4260:31	12	level
EQ_OPERATOR	4260:37	4260:37	11	==
LEAF_NODE	4260:37	4260:37	12	==
FIELD	4260:40	4260:40	11	2
LEAF_NODE	4260:40	4260:40	12	2
LEAF_NODE	4260:41	4260:41	11	)
LEAF_NODE	4260:42	4260:42	7	)
STATEMENTS	4261:6	4267:6	7	
LEAF_NODE	4261:6	4261:6	8	{
STATEMENTS	4262:6	4262:6	8	
ITERATION	4262:6	4263:8	9	
KEYWORD	4262:6	4262:6	10	for
LEAF_NODE	4262:6	4262:6	11	for
LEAF_NODE	4262:10	4262:10	10	(
FOR_INIT	4262:11	4262:16	10	s = 0 ;
EXPR	4262:11	4262:11	11	s = 0
ASSIGN	4262:11	4262:15	12	s = 0
LVAL	4262:11	4262:11	13	s
FIELD	4262:11	4262:11	14	s
LEAF_NODE	4262:11	4262:11	15	s
ASSIGN_OP	4262:13	4262:13	13	=
LEAF_NODE	4262:13	4262:13	14	=
RVAL	4262:15	4262:15	13	0
FIELD	4262:15	4262:15	14	0
LEAF_NODE	4262:15	4262:15	15	0
LEAF_NODE	4262:16	4262:16	11	;
CONDITION	4262:18	4262:18	10	s < spp
EXPR	4262:18	4262:22	11	s < spp
FIELD	4262:18	4262:18	12	s
LEAF_NODE	4262:18	4262:18	13	s
REL_OPERATOR	4262:20	4262:20	12	<
LEAF_NODE	4262:20	4262:20	13	<
FIELD	4262:22	4262:22	12	spp
LEAF_NODE	4262:22	4262:22	13	spp
LEAF_NODE	4262:25	4262:25	10	;
FOR_EXPR	4262:27	4262:27	10	s ++
EXPR	4262:27	4262:27	11	s ++
FIELD	4262:27	4262:28	12	s ++
LEAF_NODE	4262:27	4262:27	13	s
LEAF_NODE	4262:28	4262:28	13	++
LEAF_NODE	4262:30	4262:30	10	)
STATEMENTS	4263:8	4266:8	10	
LEAF_NODE	4263:8	4263:8	11	{
STATEMENTS	4264:8	4265:8	11	
EXPR_STATEMENT	4264:8	4264:98	12	dump_info ( dumpfile , format , "combineSeparateTileSamplesBytes" , "Input data, Sample %d" , s ) ;
EXPR	4264:8	4264:8	13	dump_info ( dumpfile , format , "combineSeparateTileSamplesBytes" , "Input data, Sample %d" , s )
FUNCTION_CALL	4264:8	4264:97	14	dump_info ( dumpfile , format , "combineSeparateTileSamplesBytes" , "Input data, Sample %d" , s )
CALLEE	4264:8	4264:8	15	dump_info
LEAF_NODE	4264:8	4264:8	16	dump_info
LEAF_NODE	4264:18	4264:18	15	(
ARGUMENT	4264:19	4264:19	15	dumpfile
FIELD	4264:19	4264:19	16	dumpfile
LEAF_NODE	4264:19	4264:19	17	dumpfile
LEAF_NODE	4264:27	4264:27	15	,
ARGUMENT	4264:29	4264:29	15	format
FIELD	4264:29	4264:29	16	format
LEAF_NODE	4264:29	4264:29	17	format
LEAF_NODE	4264:35	4264:35	15	,
ARGUMENT	4264:37	4264:37	15	"combineSeparateTileSamplesBytes"
FIELD	4264:37	4264:37	16	"combineSeparateTileSamplesBytes"
LEAF_NODE	4264:37	4264:37	17	"combineSeparateTileSamplesBytes"
LEAF_NODE	4264:70	4264:70	15	,
ARGUMENT	4264:71	4264:71	15	"Input data, Sample %d"
FIELD	4264:71	4264:71	16	"Input data, Sample %d"
LEAF_NODE	4264:71	4264:71	17	"Input data, Sample %d"
LEAF_NODE	4264:94	4264:94	15	,
ARGUMENT	4264:96	4264:96	15	s
FIELD	4264:96	4264:96	16	s
LEAF_NODE	4264:96	4264:96	17	s
LEAF_NODE	4264:97	4264:97	15	)
LEAF_NODE	4264:98	4264:98	13	;
EXPR_STATEMENT	4265:8	4265:86	12	dump_buffer ( dumpfile , format , 1 , cols , row , srcbuffs [ s ] + ( row * src_rowsize ) ) ;
EXPR	4265:8	4265:8	13	dump_buffer ( dumpfile , format , 1 , cols , row , srcbuffs [ s ] + ( row * src_rowsize ) )
FUNCTION_CALL	4265:8	4265:85	14	dump_buffer ( dumpfile , format , 1 , cols , row , srcbuffs [ s ] + ( row * src_rowsize ) )
CALLEE	4265:8	4265:8	15	dump_buffer
LEAF_NODE	4265:8	4265:8	16	dump_buffer
LEAF_NODE	4265:19	4265:19	15	(
ARGUMENT	4265:20	4265:20	15	dumpfile
FIELD	4265:20	4265:20	16	dumpfile
LEAF_NODE	4265:20	4265:20	17	dumpfile
LEAF_NODE	4265:28	4265:28	15	,
ARGUMENT	4265:30	4265:30	15	format
FIELD	4265:30	4265:30	16	format
LEAF_NODE	4265:30	4265:30	17	format
LEAF_NODE	4265:36	4265:36	15	,
ARGUMENT	4265:38	4265:38	15	1
FIELD	4265:38	4265:38	16	1
LEAF_NODE	4265:38	4265:38	17	1
LEAF_NODE	4265:39	4265:39	15	,
ARGUMENT	4265:41	4265:41	15	cols
FIELD	4265:41	4265:41	16	cols
LEAF_NODE	4265:41	4265:41	17	cols
LEAF_NODE	4265:45	4265:45	15	,
ARGUMENT	4265:47	4265:47	15	row
FIELD	4265:47	4265:47	16	row
LEAF_NODE	4265:47	4265:47	17	row
LEAF_NODE	4265:50	4265:50	15	,
ARGUMENT	4265:52	4265:84	15	srcbuffs [ s ] + ( row * src_rowsize )
FIELD	4265:52	4265:62	16	srcbuffs [ s ]
LEAF_NODE	4265:52	4265:52	17	srcbuffs
LEAF_NODE	4265:60	4265:60	17	[
EXPR	4265:61	4265:61	17	s
FIELD	4265:61	4265:61	18	s
LEAF_NODE	4265:61	4265:61	19	s
LEAF_NODE	4265:62	4265:62	17	]
LEAF_NODE	4265:64	4265:64	16	+
LEAF_NODE	4265:66	4265:66	16	(
FIELD	4265:67	4265:67	16	row
LEAF_NODE	4265:67	4265:67	17	row
LEAF_NODE	4265:71	4265:71	16	*
FIELD	4265:73	4265:73	16	src_rowsize
LEAF_NODE	4265:73	4265:73	17	src_rowsize
LEAF_NODE	4265:84	4265:84	16	)
LEAF_NODE	4265:85	4265:85	15	)
LEAF_NODE	4265:86	4265:86	13	;
LEAF_NODE	4266:8	4266:8	11	}
LEAF_NODE	4267:6	4267:6	8	}
EXPR_STATEMENT	4268:4	4268:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	4268:4	4268:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	4268:4	4268:10	8	dst = out + ( row * dst_rowsize )
LVAL	4268:4	4268:4	9	dst
FIELD	4268:4	4268:4	10	dst
LEAF_NODE	4268:4	4268:4	11	dst
ASSIGN_OP	4268:8	4268:8	9	=
LEAF_NODE	4268:8	4268:8	10	=
RVAL	4268:10	4268:34	9	out + ( row * dst_rowsize )
FIELD	4268:10	4268:10	10	out
LEAF_NODE	4268:10	4268:10	11	out
LEAF_NODE	4268:14	4268:14	10	+
LEAF_NODE	4268:16	4268:16	10	(
FIELD	4268:17	4268:17	10	row
LEAF_NODE	4268:17	4268:17	11	row
LEAF_NODE	4268:21	4268:21	10	*
FIELD	4268:23	4268:23	10	dst_rowsize
LEAF_NODE	4268:23	4268:23	11	dst_rowsize
LEAF_NODE	4268:34	4268:34	10	)
LEAF_NODE	4268:35	4268:35	7	;
EXPR_STATEMENT	4269:4	4269:34	6	src_offset = row * src_rowsize ;
EXPR	4269:4	4269:4	7	src_offset = row * src_rowsize
ASSIGN	4269:4	4269:17	8	src_offset = row * src_rowsize
LVAL	4269:4	4269:4	9	src_offset
FIELD	4269:4	4269:4	10	src_offset
LEAF_NODE	4269:4	4269:4	11	src_offset
ASSIGN_OP	4269:15	4269:15	9	=
LEAF_NODE	4269:15	4269:15	10	=
RVAL	4269:17	4269:23	9	row * src_rowsize
FIELD	4269:17	4269:17	10	row
LEAF_NODE	4269:17	4269:17	11	row
LEAF_NODE	4269:21	4269:21	10	*
FIELD	4269:23	4269:23	10	src_rowsize
LEAF_NODE	4269:23	4269:23	11	src_rowsize
LEAF_NODE	4269:34	4269:34	7	;
EXPR_STATEMENT	4271:4	4272:41	6	TIFFError ( "" , "Tile row %4d, Src offset %6d   Dst offset %6d" , row , src_offset , dst - out ) ;
EXPR	4271:4	4271:4	7	TIFFError ( "" , "Tile row %4d, Src offset %6d   Dst offset %6d" , row , src_offset , dst - out )
FUNCTION_CALL	4271:4	4272:40	8	TIFFError ( "" , "Tile row %4d, Src offset %6d   Dst offset %6d" , row , src_offset , dst - out )
CALLEE	4271:4	4271:4	9	TIFFError
LEAF_NODE	4271:4	4271:4	10	TIFFError
LEAF_NODE	4271:13	4271:13	9	(
ARGUMENT	4271:14	4271:14	9	""
FIELD	4271:14	4271:14	10	""
LEAF_NODE	4271:14	4271:14	11	""
LEAF_NODE	4271:16	4271:16	9	,
ARGUMENT	4271:17	4271:17	9	"Tile row %4d, Src offset %6d   Dst offset %6d"
FIELD	4271:17	4271:17	10	"Tile row %4d, Src offset %6d   Dst offset %6d"
LEAF_NODE	4271:17	4271:17	11	"Tile row %4d, Src offset %6d   Dst offset %6d"
LEAF_NODE	4271:64	4271:64	9	,
ARGUMENT	4272:14	4272:14	9	row
FIELD	4272:14	4272:14	10	row
LEAF_NODE	4272:14	4272:14	11	row
LEAF_NODE	4272:17	4272:17	9	,
ARGUMENT	4272:19	4272:19	9	src_offset
FIELD	4272:19	4272:19	10	src_offset
LEAF_NODE	4272:19	4272:19	11	src_offset
LEAF_NODE	4272:29	4272:29	9	,
ARGUMENT	4272:31	4272:37	9	dst - out
FIELD	4272:31	4272:31	10	dst
LEAF_NODE	4272:31	4272:31	11	dst
LEAF_NODE	4272:35	4272:35	10	-
FIELD	4272:37	4272:37	10	out
LEAF_NODE	4272:37	4272:37	11	out
LEAF_NODE	4272:40	4272:40	9	)
LEAF_NODE	4272:41	4272:41	7	;
ITERATION	4274:4	4275:6	6	
KEYWORD	4274:4	4274:4	7	for
LEAF_NODE	4274:4	4274:4	8	for
LEAF_NODE	4274:8	4274:8	7	(
FOR_INIT	4274:9	4274:16	7	col = 0 ;
EXPR	4274:9	4274:9	8	col = 0
ASSIGN	4274:9	4274:15	9	col = 0
LVAL	4274:9	4274:9	10	col
FIELD	4274:9	4274:9	11	col
LEAF_NODE	4274:9	4274:9	12	col
ASSIGN_OP	4274:13	4274:13	10	=
LEAF_NODE	4274:13	4274:13	11	=
RVAL	4274:15	4274:15	10	0
FIELD	4274:15	4274:15	11	0
LEAF_NODE	4274:15	4274:15	12	0
LEAF_NODE	4274:16	4274:16	8	;
CONDITION	4274:18	4274:18	7	col < cols
EXPR	4274:18	4274:24	8	col < cols
FIELD	4274:18	4274:18	9	col
LEAF_NODE	4274:18	4274:18	10	col
REL_OPERATOR	4274:22	4274:22	9	<
LEAF_NODE	4274:22	4274:22	10	<
FIELD	4274:24	4274:24	9	cols
LEAF_NODE	4274:24	4274:24	10	cols
LEAF_NODE	4274:28	4274:28	7	;
FOR_EXPR	4274:30	4274:30	7	col ++
EXPR	4274:30	4274:30	8	col ++
FIELD	4274:30	4274:33	9	col ++
LEAF_NODE	4274:30	4274:30	10	col
LEAF_NODE	4274:33	4274:33	10	++
LEAF_NODE	4274:35	4274:35	7	)
STATEMENTS	4275:6	4284:6	7	
LEAF_NODE	4275:6	4275:6	8	{
STATEMENTS	4276:6	4277:6	8	
EXPR_STATEMENT	4276:6	4276:49	9	col_offset = src_offset + ( col * ( bps / 8 ) ) ;
EXPR	4276:6	4276:6	10	col_offset = src_offset + ( col * ( bps / 8 ) )
ASSIGN	4276:6	4276:19	11	col_offset = src_offset + ( col * ( bps / 8 ) )
LVAL	4276:6	4276:6	12	col_offset
FIELD	4276:6	4276:6	13	col_offset
LEAF_NODE	4276:6	4276:6	14	col_offset
ASSIGN_OP	4276:17	4276:17	12	=
LEAF_NODE	4276:17	4276:17	13	=
RVAL	4276:19	4276:48	12	src_offset + ( col * ( bps / 8 ) )
FIELD	4276:19	4276:19	13	src_offset
LEAF_NODE	4276:19	4276:19	14	src_offset
LEAF_NODE	4276:30	4276:30	13	+
LEAF_NODE	4276:32	4276:32	13	(
FIELD	4276:33	4276:33	13	col
LEAF_NODE	4276:33	4276:33	14	col
LEAF_NODE	4276:37	4276:37	13	*
LEAF_NODE	4276:39	4276:39	13	(
FIELD	4276:40	4276:40	13	bps
LEAF_NODE	4276:40	4276:40	14	bps
LEAF_NODE	4276:44	4276:44	13	/
FIELD	4276:46	4276:46	13	8
LEAF_NODE	4276:46	4276:46	14	8
LEAF_NODE	4276:47	4276:47	13	)
LEAF_NODE	4276:48	4276:48	13	)
LEAF_NODE	4276:49	4276:49	10	;
ITERATION	4277:6	4278:8	9	
KEYWORD	4277:6	4277:6	10	for
LEAF_NODE	4277:6	4277:6	11	for
LEAF_NODE	4277:10	4277:10	10	(
FOR_INIT	4277:11	4277:16	10	s = 0 ;
EXPR	4277:11	4277:11	11	s = 0
ASSIGN	4277:11	4277:15	12	s = 0
LVAL	4277:11	4277:11	13	s
FIELD	4277:11	4277:11	14	s
LEAF_NODE	4277:11	4277:11	15	s
ASSIGN_OP	4277:13	4277:13	13	=
LEAF_NODE	4277:13	4277:13	14	=
RVAL	4277:15	4277:15	13	0
FIELD	4277:15	4277:15	14	0
LEAF_NODE	4277:15	4277:15	15	0
LEAF_NODE	4277:16	4277:16	11	;
CONDITION	4277:18	4277:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4277:18	4277:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	4277:18	4277:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4277:18	4277:26	13	( s < spp )
LEAF_NODE	4277:18	4277:18	14	(
FIELD	4277:19	4277:19	14	s
LEAF_NODE	4277:19	4277:19	15	s
REL_OPERATOR	4277:21	4277:21	14	<
LEAF_NODE	4277:21	4277:21	15	<
FIELD	4277:23	4277:23	14	spp
LEAF_NODE	4277:23	4277:23	15	spp
LEAF_NODE	4277:26	4277:26	14	)
LEAF_NODE	4277:28	4277:28	13	&&
EXPR	4277:31	4277:47	13	( s < MAX_SAMPLES )
LEAF_NODE	4277:31	4277:31	14	(
FIELD	4277:32	4277:32	14	s
LEAF_NODE	4277:32	4277:32	15	s
REL_OPERATOR	4277:34	4277:34	14	<
LEAF_NODE	4277:34	4277:34	15	<
FIELD	4277:36	4277:36	14	MAX_SAMPLES
LEAF_NODE	4277:36	4277:36	15	MAX_SAMPLES
LEAF_NODE	4277:47	4277:47	14	)
LEAF_NODE	4277:48	4277:48	10	;
FOR_EXPR	4277:50	4277:50	10	s ++
EXPR	4277:50	4277:50	11	s ++
FIELD	4277:50	4277:51	12	s ++
LEAF_NODE	4277:50	4277:50	13	s
LEAF_NODE	4277:51	4277:51	13	++
LEAF_NODE	4277:53	4277:53	10	)
STATEMENTS	4278:8	4283:8	10	
LEAF_NODE	4278:8	4278:8	11	{
STATEMENTS	4279:8	4282:8	11	
EXPR_STATEMENT	4279:8	4279:38	12	src = srcbuffs [ s ] + col_offset ;
EXPR	4279:8	4279:8	13	src = srcbuffs [ s ] + col_offset
ASSIGN	4279:8	4279:14	14	src = srcbuffs [ s ] + col_offset
LVAL	4279:8	4279:8	15	src
FIELD	4279:8	4279:8	16	src
LEAF_NODE	4279:8	4279:8	17	src
ASSIGN_OP	4279:12	4279:12	15	=
LEAF_NODE	4279:12	4279:12	16	=
RVAL	4279:14	4279:28	15	srcbuffs [ s ] + col_offset
FIELD	4279:14	4279:24	16	srcbuffs [ s ]
LEAF_NODE	4279:14	4279:14	17	srcbuffs
LEAF_NODE	4279:22	4279:22	17	[
EXPR	4279:23	4279:23	17	s
FIELD	4279:23	4279:23	18	s
LEAF_NODE	4279:23	4279:23	19	s
LEAF_NODE	4279:24	4279:24	17	]
LEAF_NODE	4279:26	4279:26	16	+
FIELD	4279:28	4279:28	16	col_offset
LEAF_NODE	4279:28	4279:28	17	col_offset
LEAF_NODE	4279:38	4279:38	13	;
ITERATION	4280:8	4281:10	12	
KEYWORD	4280:8	4280:8	13	for
LEAF_NODE	4280:8	4280:8	14	for
LEAF_NODE	4280:12	4280:12	13	(
FOR_INIT	4280:13	4280:18	13	i = 0 ;
EXPR	4280:13	4280:13	14	i = 0
ASSIGN	4280:13	4280:17	15	i = 0
LVAL	4280:13	4280:13	16	i
FIELD	4280:13	4280:13	17	i
LEAF_NODE	4280:13	4280:13	18	i
ASSIGN_OP	4280:15	4280:15	16	=
LEAF_NODE	4280:15	4280:15	17	=
RVAL	4280:17	4280:17	16	0
FIELD	4280:17	4280:17	17	0
LEAF_NODE	4280:17	4280:17	18	0
LEAF_NODE	4280:18	4280:18	14	;
CONDITION	4280:20	4280:20	13	i < bytes_per_sample
EXPR	4280:20	4280:24	14	i < bytes_per_sample
FIELD	4280:20	4280:20	15	i
LEAF_NODE	4280:20	4280:20	16	i
REL_OPERATOR	4280:22	4280:22	15	<
LEAF_NODE	4280:22	4280:22	16	<
FIELD	4280:24	4280:24	15	bytes_per_sample
LEAF_NODE	4280:24	4280:24	16	bytes_per_sample
LEAF_NODE	4280:40	4280:40	13	;
FOR_EXPR	4280:42	4280:42	13	i ++
EXPR	4280:42	4280:42	14	i ++
FIELD	4280:42	4280:43	15	i ++
LEAF_NODE	4280:42	4280:42	16	i
LEAF_NODE	4280:43	4280:43	16	++
LEAF_NODE	4280:45	4280:45	13	)
STATEMENTS	4281:10	4281:10	13	
EXPR_STATEMENT	4281:10	4281:33	14	* ( dst + i ) = * ( src + i ) ;
EXPR	4281:10	4281:10	15	* ( dst + i ) = * ( src + i )
ASSIGN	4281:10	4281:23	16	* ( dst + i ) = * ( src + i )
LVAL	4281:10	4281:10	17	* ( dst + i )
UNARY_EXPR	4281:10	4281:19	18	* ( dst + i )
UNARY_OPERATOR	4281:10	4281:10	19	*
LEAF_NODE	4281:10	4281:10	20	*
LEAF_NODE	4281:11	4281:11	19	(
FIELD	4281:12	4281:12	19	dst
LEAF_NODE	4281:12	4281:12	20	dst
LEAF_NODE	4281:16	4281:16	19	+
FIELD	4281:18	4281:18	19	i
LEAF_NODE	4281:18	4281:18	20	i
LEAF_NODE	4281:19	4281:19	19	)
ASSIGN_OP	4281:21	4281:21	17	=
LEAF_NODE	4281:21	4281:21	18	=
RVAL	4281:23	4281:23	17	* ( src + i )
UNARY_EXPR	4281:23	4281:32	18	* ( src + i )
UNARY_OPERATOR	4281:23	4281:23	19	*
LEAF_NODE	4281:23	4281:23	20	*
LEAF_NODE	4281:24	4281:24	19	(
FIELD	4281:25	4281:25	19	src
LEAF_NODE	4281:25	4281:25	20	src
LEAF_NODE	4281:29	4281:29	19	+
FIELD	4281:31	4281:31	19	i
LEAF_NODE	4281:31	4281:31	20	i
LEAF_NODE	4281:32	4281:32	19	)
LEAF_NODE	4281:33	4281:33	15	;
EXPR_STATEMENT	4282:8	4282:31	12	dst += bytes_per_sample ;
EXPR	4282:8	4282:8	13	dst += bytes_per_sample
ASSIGN	4282:8	4282:15	14	dst += bytes_per_sample
LVAL	4282:8	4282:8	15	dst
FIELD	4282:8	4282:8	16	dst
LEAF_NODE	4282:8	4282:8	17	dst
ASSIGN_OP	4282:12	4282:12	15	+=
LEAF_NODE	4282:12	4282:12	16	+=
RVAL	4282:15	4282:15	15	bytes_per_sample
FIELD	4282:15	4282:15	16	bytes_per_sample
LEAF_NODE	4282:15	4282:15	17	bytes_per_sample
LEAF_NODE	4282:31	4282:31	13	;
LEAF_NODE	4283:8	4283:8	11	}
LEAF_NODE	4284:6	4284:6	8	}
SELECTION	4286:4	4287:6	6	
KEYWORD	4286:4	4286:4	7	if
LEAF_NODE	4286:4	4286:4	8	if
LEAF_NODE	4286:7	4286:7	7	(
CONDITION	4286:8	4286:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	4286:8	4286:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	4286:8	4286:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	4286:8	4286:25	10	( dumpfile != NULL )
LEAF_NODE	4286:8	4286:8	11	(
FIELD	4286:9	4286:9	11	dumpfile
LEAF_NODE	4286:9	4286:9	12	dumpfile
EQ_OPERATOR	4286:18	4286:18	11	!=
LEAF_NODE	4286:18	4286:18	12	!=
FIELD	4286:21	4286:21	11	NULL
LEAF_NODE	4286:21	4286:21	12	NULL
LEAF_NODE	4286:25	4286:25	11	)
LEAF_NODE	4286:27	4286:27	10	&&
EXPR	4286:30	4286:41	10	( level == 2 )
LEAF_NODE	4286:30	4286:30	11	(
FIELD	4286:31	4286:31	11	level
LEAF_NODE	4286:31	4286:31	12	level
EQ_OPERATOR	4286:37	4286:37	11	==
LEAF_NODE	4286:37	4286:37	12	==
FIELD	4286:40	4286:40	11	2
LEAF_NODE	4286:40	4286:40	12	2
LEAF_NODE	4286:41	4286:41	11	)
LEAF_NODE	4286:42	4286:42	7	)
STATEMENTS	4287:6	4290:6	7	
LEAF_NODE	4287:6	4287:6	8	{
STATEMENTS	4288:6	4289:6	8	
EXPR_STATEMENT	4288:6	4288:101	9	dump_info ( dumpfile , format , "combineSeparateTileSamplesBytes" , "Output data, combined samples" ) ;
EXPR	4288:6	4288:6	10	dump_info ( dumpfile , format , "combineSeparateTileSamplesBytes" , "Output data, combined samples" )
FUNCTION_CALL	4288:6	4288:100	11	dump_info ( dumpfile , format , "combineSeparateTileSamplesBytes" , "Output data, combined samples" )
CALLEE	4288:6	4288:6	12	dump_info
LEAF_NODE	4288:6	4288:6	13	dump_info
LEAF_NODE	4288:16	4288:16	12	(
ARGUMENT	4288:17	4288:17	12	dumpfile
FIELD	4288:17	4288:17	13	dumpfile
LEAF_NODE	4288:17	4288:17	14	dumpfile
LEAF_NODE	4288:25	4288:25	12	,
ARGUMENT	4288:27	4288:27	12	format
FIELD	4288:27	4288:27	13	format
LEAF_NODE	4288:27	4288:27	14	format
LEAF_NODE	4288:33	4288:33	12	,
ARGUMENT	4288:35	4288:35	12	"combineSeparateTileSamplesBytes"
FIELD	4288:35	4288:35	13	"combineSeparateTileSamplesBytes"
LEAF_NODE	4288:35	4288:35	14	"combineSeparateTileSamplesBytes"
LEAF_NODE	4288:68	4288:68	12	,
ARGUMENT	4288:69	4288:69	12	"Output data, combined samples"
FIELD	4288:69	4288:69	13	"Output data, combined samples"
LEAF_NODE	4288:69	4288:69	14	"Output data, combined samples"
LEAF_NODE	4288:100	4288:100	12	)
LEAF_NODE	4288:101	4288:101	10	;
EXPR_STATEMENT	4289:6	4289:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	4289:6	4289:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	4289:6	4289:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	4289:6	4289:6	12	dump_buffer
LEAF_NODE	4289:6	4289:6	13	dump_buffer
LEAF_NODE	4289:17	4289:17	12	(
ARGUMENT	4289:18	4289:18	12	dumpfile
FIELD	4289:18	4289:18	13	dumpfile
LEAF_NODE	4289:18	4289:18	14	dumpfile
LEAF_NODE	4289:26	4289:26	12	,
ARGUMENT	4289:28	4289:28	12	format
FIELD	4289:28	4289:28	13	format
LEAF_NODE	4289:28	4289:28	14	format
LEAF_NODE	4289:34	4289:34	12	,
ARGUMENT	4289:36	4289:36	12	1
FIELD	4289:36	4289:36	13	1
LEAF_NODE	4289:36	4289:36	14	1
LEAF_NODE	4289:37	4289:37	12	,
ARGUMENT	4289:39	4289:39	12	dst_rowsize
FIELD	4289:39	4289:39	13	dst_rowsize
LEAF_NODE	4289:39	4289:39	14	dst_rowsize
LEAF_NODE	4289:50	4289:50	12	,
ARGUMENT	4289:52	4289:52	12	row
FIELD	4289:52	4289:52	13	row
LEAF_NODE	4289:52	4289:52	14	row
LEAF_NODE	4289:55	4289:55	12	,
ARGUMENT	4289:57	4289:81	12	out + ( row * dst_rowsize )
FIELD	4289:57	4289:57	13	out
LEAF_NODE	4289:57	4289:57	14	out
LEAF_NODE	4289:61	4289:61	13	+
LEAF_NODE	4289:63	4289:63	13	(
FIELD	4289:64	4289:64	13	row
LEAF_NODE	4289:64	4289:64	14	row
LEAF_NODE	4289:68	4289:68	13	*
FIELD	4289:70	4289:70	13	dst_rowsize
LEAF_NODE	4289:70	4289:70	14	dst_rowsize
LEAF_NODE	4289:81	4289:81	13	)
LEAF_NODE	4289:82	4289:82	12	)
LEAF_NODE	4289:83	4289:83	10	;
LEAF_NODE	4290:6	4290:6	8	}
LEAF_NODE	4291:4	4291:4	5	}
JUMP_STATEMENT	4293:2	4293:12	3	return ( 0 ) ;
KEYWORD	4293:2	4293:2	4	return
LEAF_NODE	4293:2	4293:2	5	return
DESTINATION	4293:9	4293:9	4	( 0 )
EXPR	4293:9	4293:11	5	( 0 )
LEAF_NODE	4293:9	4293:9	6	(
FIELD	4293:10	4293:10	6	0
LEAF_NODE	4293:10	4293:10	7	0
LEAF_NODE	4293:11	4293:11	6	)
LEAF_NODE	4293:12	4293:12	4	;
LEAF_NODE	4294:2	4294:2	2	}
FUNCTION_DEF	4296:0	4393:2	1	
RETURN_TYPE	4296:0	4296:7	2	static int
LEAF_NODE	4296:0	4296:0	3	static
TYPE_NAME	4296:7	4296:7	3	int
LEAF_NODE	4296:7	4296:7	4	int
FUNCTION_NAME	4297:0	4297:0	2	combineSeparateTileSamples8bits
LEAF_NODE	4297:0	4297:0	3	combineSeparateTileSamples8bits
PARAMETER_LIST	4297:32	4300:64	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint32 imagewidth , uint32 tw , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	4297:32	4297:32	3	(
PARAMETER_DECL	4297:33	4297:40	3	uint8 * [ ] in
TYPE	4297:33	4297:42	4	uint8 * [ ]
TYPE_NAME	4297:33	4297:33	5	uint8
LEAF_NODE	4297:33	4297:33	6	uint8
POINTER	4297:39	4297:39	5	*
LEAF_NODE	4297:39	4297:39	6	*
TYPE_SUFFIX	4297:42	4297:43	5	[ ]
LEAF_NODE	4297:42	4297:42	6	[
LEAF_NODE	4297:43	4297:43	6	]
NAME	4297:40	4297:40	4	in
LEAF_NODE	4297:40	4297:40	5	in
LEAF_NODE	4297:44	4297:44	3	,
PARAMETER_DECL	4297:46	4297:53	3	uint8 * out
TYPE	4297:46	4297:52	4	uint8 *
TYPE_NAME	4297:46	4297:46	5	uint8
LEAF_NODE	4297:46	4297:46	6	uint8
POINTER	4297:52	4297:52	5	*
LEAF_NODE	4297:52	4297:52	6	*
NAME	4297:53	4297:53	4	out
LEAF_NODE	4297:53	4297:53	5	out
LEAF_NODE	4297:56	4297:56	3	,
PARAMETER_DECL	4297:58	4297:65	3	uint32 cols
TYPE	4297:58	4297:58	4	uint32
TYPE_NAME	4297:58	4297:58	5	uint32
LEAF_NODE	4297:58	4297:58	6	uint32
NAME	4297:65	4297:65	4	cols
LEAF_NODE	4297:65	4297:65	5	cols
LEAF_NODE	4297:69	4297:69	3	,
PARAMETER_DECL	4298:33	4298:40	3	uint32 rows
TYPE	4298:33	4298:33	4	uint32
TYPE_NAME	4298:33	4298:33	5	uint32
LEAF_NODE	4298:33	4298:33	6	uint32
NAME	4298:40	4298:40	4	rows
LEAF_NODE	4298:40	4298:40	5	rows
LEAF_NODE	4298:44	4298:44	3	,
PARAMETER_DECL	4298:46	4298:53	3	uint32 imagewidth
TYPE	4298:46	4298:46	4	uint32
TYPE_NAME	4298:46	4298:46	5	uint32
LEAF_NODE	4298:46	4298:46	6	uint32
NAME	4298:53	4298:53	4	imagewidth
LEAF_NODE	4298:53	4298:53	5	imagewidth
LEAF_NODE	4298:63	4298:63	3	,
PARAMETER_DECL	4299:33	4299:40	3	uint32 tw
TYPE	4299:33	4299:33	4	uint32
TYPE_NAME	4299:33	4299:33	5	uint32
LEAF_NODE	4299:33	4299:33	6	uint32
NAME	4299:40	4299:40	4	tw
LEAF_NODE	4299:40	4299:40	5	tw
LEAF_NODE	4299:42	4299:42	3	,
PARAMETER_DECL	4299:44	4299:51	3	uint16 spp
TYPE	4299:44	4299:44	4	uint16
TYPE_NAME	4299:44	4299:44	5	uint16
LEAF_NODE	4299:44	4299:44	6	uint16
NAME	4299:51	4299:51	4	spp
LEAF_NODE	4299:51	4299:51	5	spp
LEAF_NODE	4299:54	4299:54	3	,
PARAMETER_DECL	4299:56	4299:63	3	uint16 bps
TYPE	4299:56	4299:56	4	uint16
TYPE_NAME	4299:56	4299:56	5	uint16
LEAF_NODE	4299:56	4299:56	6	uint16
NAME	4299:63	4299:63	4	bps
LEAF_NODE	4299:63	4299:63	5	bps
LEAF_NODE	4299:66	4299:66	3	,
PARAMETER_DECL	4300:27	4300:33	3	FILE * dumpfile
TYPE	4300:27	4300:32	4	FILE *
TYPE_NAME	4300:27	4300:27	5	FILE
LEAF_NODE	4300:27	4300:27	6	FILE
POINTER	4300:32	4300:32	5	*
LEAF_NODE	4300:32	4300:32	6	*
NAME	4300:33	4300:33	4	dumpfile
LEAF_NODE	4300:33	4300:33	5	dumpfile
LEAF_NODE	4300:41	4300:41	3	,
PARAMETER_DECL	4300:43	4300:47	3	int format
TYPE	4300:43	4300:43	4	int
TYPE_NAME	4300:43	4300:43	5	int
LEAF_NODE	4300:43	4300:43	6	int
NAME	4300:47	4300:47	4	format
LEAF_NODE	4300:47	4300:47	5	format
LEAF_NODE	4300:53	4300:53	3	,
PARAMETER_DECL	4300:55	4300:59	3	int level
TYPE	4300:55	4300:55	4	int
TYPE_NAME	4300:55	4300:55	5	int
LEAF_NODE	4300:55	4300:55	6	int
NAME	4300:59	4300:59	4	level
LEAF_NODE	4300:59	4300:59	5	level
LEAF_NODE	4300:64	4300:64	3	)
LEAF_NODE	4301:2	4301:2	2	{
STATEMENTS	4302:2	4392:2	2	
SIMPLE_DECL	4302:2	4302:23	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	4302:2	4302:9	4	int ready_bits ; ready_bits = 0
TYPE	4302:2	4302:2	5	int
TYPE_NAME	4302:2	4302:2	6	int
LEAF_NODE	4302:2	4302:2	7	int
NAME	4302:9	4302:9	5	ready_bits
LEAF_NODE	4302:9	4302:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	4302:9	4302:9	5	ready_bits = 0
ASSIGN	4302:9	4302:22	6	ready_bits = 0
LVAL	4302:9	4302:9	7	ready_bits
NAME	4302:9	4302:9	8	ready_bits
LEAF_NODE	4302:9	4302:9	9	ready_bits
ASSIGN_OP	4302:20	4302:20	7	=
LEAF_NODE	4302:20	4302:20	8	=
RVAL	4302:22	4302:22	7	0
FIELD	4302:22	4302:22	8	0
LEAF_NODE	4302:22	4302:22	9	0
LEAF_NODE	4302:23	4302:23	4	;
SIMPLE_DECL	4303:2	4303:45	3	uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset ;
INIT_DECL_LIST	4303:2	4303:2	4	uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset
VAR_DECL	4303:2	4303:9	5	uint32 src_rowsize
TYPE	4303:2	4303:2	6	uint32
TYPE_NAME	4303:2	4303:2	7	uint32
LEAF_NODE	4303:2	4303:2	8	uint32
NAME	4303:9	4303:9	6	src_rowsize
LEAF_NODE	4303:9	4303:9	7	src_rowsize
LEAF_NODE	4303:20	4303:20	5	,
INIT_DECL_LIST	4303:2	4303:2	5	uint32 dst_rowsize , uint32 src_offset
VAR_DECL	4303:2	4303:22	6	uint32 dst_rowsize
TYPE	4303:2	4303:2	7	uint32
TYPE_NAME	4303:2	4303:2	8	uint32
LEAF_NODE	4303:2	4303:2	9	uint32
NAME	4303:22	4303:22	7	dst_rowsize
LEAF_NODE	4303:22	4303:22	8	dst_rowsize
LEAF_NODE	4303:33	4303:33	6	,
VAR_DECL	4303:2	4303:35	6	uint32 src_offset
TYPE	4303:2	4303:2	7	uint32
TYPE_NAME	4303:2	4303:2	8	uint32
LEAF_NODE	4303:2	4303:2	9	uint32
NAME	4303:35	4303:35	7	src_offset
LEAF_NODE	4303:35	4303:35	8	src_offset
LEAF_NODE	4303:45	4303:45	4	;
SIMPLE_DECL	4304:2	4304:19	3	uint32 bit_offset ;
VAR_DECL	4304:2	4304:9	4	uint32 bit_offset
TYPE	4304:2	4304:2	5	uint32
TYPE_NAME	4304:2	4304:2	6	uint32
LEAF_NODE	4304:2	4304:2	7	uint32
NAME	4304:9	4304:9	5	bit_offset
LEAF_NODE	4304:9	4304:9	6	bit_offset
LEAF_NODE	4304:19	4304:19	4	;
SIMPLE_DECL	4305:2	4305:44	3	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	4305:2	4305:2	4	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4305:2	4305:9	5	uint32 row
TYPE	4305:2	4305:2	6	uint32
TYPE_NAME	4305:2	4305:2	7	uint32
LEAF_NODE	4305:2	4305:2	8	uint32
NAME	4305:9	4305:9	6	row
LEAF_NODE	4305:9	4305:9	7	row
LEAF_NODE	4305:12	4305:12	5	,
INIT_DECL_LIST	4305:2	4305:2	5	uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4305:2	4305:14	6	uint32 col
TYPE	4305:2	4305:2	7	uint32
TYPE_NAME	4305:2	4305:2	8	uint32
LEAF_NODE	4305:2	4305:2	9	uint32
NAME	4305:14	4305:14	7	col
LEAF_NODE	4305:14	4305:14	8	col
LEAF_NODE	4305:17	4305:17	6	,
INIT_DECL_LIST	4305:2	4305:2	6	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4305:2	4305:19	7	uint32 src_byte ; src_byte = 0
TYPE	4305:2	4305:2	8	uint32
TYPE_NAME	4305:2	4305:2	9	uint32
LEAF_NODE	4305:2	4305:2	10	uint32
NAME	4305:19	4305:19	8	src_byte
LEAF_NODE	4305:19	4305:19	9	src_byte
LEAF_NODE	0:0	0:0	8	;
INIT	4305:19	4305:19	8	src_byte = 0
ASSIGN	4305:19	4305:30	9	src_byte = 0
LVAL	4305:19	4305:19	10	src_byte
NAME	4305:19	4305:19	11	src_byte
LEAF_NODE	4305:19	4305:19	12	src_byte
ASSIGN_OP	4305:28	4305:28	10	=
LEAF_NODE	4305:28	4305:28	11	=
RVAL	4305:30	4305:30	10	0
FIELD	4305:30	4305:30	11	0
LEAF_NODE	4305:30	4305:30	12	0
LEAF_NODE	4305:31	4305:31	7	,
VAR_DECL	4305:2	4305:33	7	uint32 src_bit ; src_bit = 0
TYPE	4305:2	4305:2	8	uint32
TYPE_NAME	4305:2	4305:2	9	uint32
LEAF_NODE	4305:2	4305:2	10	uint32
NAME	4305:33	4305:33	8	src_bit
LEAF_NODE	4305:33	4305:33	9	src_bit
LEAF_NODE	0:0	0:0	8	;
INIT	4305:33	4305:33	8	src_bit = 0
ASSIGN	4305:33	4305:43	9	src_bit = 0
LVAL	4305:33	4305:33	10	src_bit
NAME	4305:33	4305:33	11	src_bit
LEAF_NODE	4305:33	4305:33	12	src_bit
ASSIGN_OP	4305:41	4305:41	10	=
LEAF_NODE	4305:41	4305:41	11	=
RVAL	4305:43	4305:43	10	0
FIELD	4305:43	4305:43	11	0
LEAF_NODE	4305:43	4305:43	12	0
LEAF_NODE	4305:44	4305:44	4	;
SIMPLE_DECL	4306:2	4306:36	3	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	4306:2	4306:2	4	uint8 maskbits ; maskbits = 0 , uint8 matchbits ; matchbits = 0
VAR_DECL	4306:2	4306:9	5	uint8 maskbits ; maskbits = 0
TYPE	4306:2	4306:2	6	uint8
TYPE_NAME	4306:2	4306:2	7	uint8
LEAF_NODE	4306:2	4306:2	8	uint8
NAME	4306:9	4306:9	6	maskbits
LEAF_NODE	4306:9	4306:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	4306:9	4306:9	6	maskbits = 0
ASSIGN	4306:9	4306:20	7	maskbits = 0
LVAL	4306:9	4306:9	8	maskbits
NAME	4306:9	4306:9	9	maskbits
LEAF_NODE	4306:9	4306:9	10	maskbits
ASSIGN_OP	4306:18	4306:18	8	=
LEAF_NODE	4306:18	4306:18	9	=
RVAL	4306:20	4306:20	8	0
FIELD	4306:20	4306:20	9	0
LEAF_NODE	4306:20	4306:20	10	0
LEAF_NODE	4306:21	4306:21	5	,
VAR_DECL	4306:2	4306:23	5	uint8 matchbits ; matchbits = 0
TYPE	4306:2	4306:2	6	uint8
TYPE_NAME	4306:2	4306:2	7	uint8
LEAF_NODE	4306:2	4306:2	8	uint8
NAME	4306:23	4306:23	6	matchbits
LEAF_NODE	4306:23	4306:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	4306:23	4306:23	6	matchbits = 0
ASSIGN	4306:23	4306:35	7	matchbits = 0
LVAL	4306:23	4306:23	8	matchbits
NAME	4306:23	4306:23	9	matchbits
LEAF_NODE	4306:23	4306:23	10	matchbits
ASSIGN_OP	4306:33	4306:33	8	=
LEAF_NODE	4306:33	4306:33	9	=
RVAL	4306:35	4306:35	8	0
FIELD	4306:35	4306:35	9	0
LEAF_NODE	4306:35	4306:35	10	0
LEAF_NODE	4306:36	4306:36	4	;
SIMPLE_DECL	4307:2	4307:29	3	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	4307:2	4307:2	4	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0
VAR_DECL	4307:2	4307:9	5	uint8 buff1 ; buff1 = 0
TYPE	4307:2	4307:2	6	uint8
TYPE_NAME	4307:2	4307:2	7	uint8
LEAF_NODE	4307:2	4307:2	8	uint8
NAME	4307:9	4307:9	6	buff1
LEAF_NODE	4307:9	4307:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	4307:9	4307:9	6	buff1 = 0
ASSIGN	4307:9	4307:17	7	buff1 = 0
LVAL	4307:9	4307:9	8	buff1
NAME	4307:9	4307:9	9	buff1
LEAF_NODE	4307:9	4307:9	10	buff1
ASSIGN_OP	4307:15	4307:15	8	=
LEAF_NODE	4307:15	4307:15	9	=
RVAL	4307:17	4307:17	8	0
FIELD	4307:17	4307:17	9	0
LEAF_NODE	4307:17	4307:17	10	0
LEAF_NODE	4307:18	4307:18	5	,
VAR_DECL	4307:2	4307:20	5	uint8 buff2 ; buff2 = 0
TYPE	4307:2	4307:2	6	uint8
TYPE_NAME	4307:2	4307:2	7	uint8
LEAF_NODE	4307:2	4307:2	8	uint8
NAME	4307:20	4307:20	6	buff2
LEAF_NODE	4307:20	4307:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	4307:20	4307:20	6	buff2 = 0
ASSIGN	4307:20	4307:28	7	buff2 = 0
LVAL	4307:20	4307:20	8	buff2
NAME	4307:20	4307:20	9	buff2
LEAF_NODE	4307:20	4307:20	10	buff2
ASSIGN_OP	4307:26	4307:26	8	=
LEAF_NODE	4307:26	4307:26	9	=
RVAL	4307:28	4307:28	8	0
FIELD	4307:28	4307:28	9	0
LEAF_NODE	4307:28	4307:28	10	0
LEAF_NODE	4307:29	4307:29	4	;
SIMPLE_DECL	4308:2	4308:13	3	tsample_t s ;
VAR_DECL	4308:2	4308:12	4	tsample_t s
TYPE	4308:2	4308:2	5	tsample_t
TYPE_NAME	4308:2	4308:2	6	tsample_t
LEAF_NODE	4308:2	4308:2	7	tsample_t
NAME	4308:12	4308:12	5	s
LEAF_NODE	4308:12	4308:12	6	s
LEAF_NODE	4308:13	4308:13	4	;
SIMPLE_DECL	4309:2	4309:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	4309:2	4309:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	4309:2	4309:16	5	unsigned char *
TYPE_NAME	4309:2	4309:11	6	unsigned char
LEAF_NODE	4309:2	4309:2	7	unsigned
LEAF_NODE	4309:11	4309:11	7	char
POINTER	4309:16	4309:16	6	*
LEAF_NODE	4309:16	4309:16	7	*
NAME	4309:17	4309:17	5	src
LEAF_NODE	4309:17	4309:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	4309:17	4309:17	5	src = in [ 0 ]
ASSIGN	4309:17	4309:23	6	src = in [ 0 ]
LVAL	4309:17	4309:17	7	src
NAME	4309:17	4309:17	8	src
LEAF_NODE	4309:17	4309:17	9	src
ASSIGN_OP	4309:21	4309:21	7	=
LEAF_NODE	4309:21	4309:21	8	=
RVAL	4309:23	4309:23	7	in [ 0 ]
FIELD	4309:23	4309:27	8	in [ 0 ]
LEAF_NODE	4309:23	4309:23	9	in
LEAF_NODE	4309:25	4309:25	9	[
EXPR	4309:26	4309:26	9	0
FIELD	4309:26	4309:26	10	0
LEAF_NODE	4309:26	4309:26	11	0
LEAF_NODE	4309:27	4309:27	9	]
LEAF_NODE	4309:28	4309:28	4	;
SIMPLE_DECL	4310:2	4310:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	4310:2	4310:17	4	unsigned char * dst ; dst = out
TYPE	4310:2	4310:16	5	unsigned char *
TYPE_NAME	4310:2	4310:11	6	unsigned char
LEAF_NODE	4310:2	4310:2	7	unsigned
LEAF_NODE	4310:11	4310:11	7	char
POINTER	4310:16	4310:16	6	*
LEAF_NODE	4310:16	4310:16	7	*
NAME	4310:17	4310:17	5	dst
LEAF_NODE	4310:17	4310:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	4310:17	4310:17	5	dst = out
ASSIGN	4310:17	4310:23	6	dst = out
LVAL	4310:17	4310:17	7	dst
NAME	4310:17	4310:17	8	dst
LEAF_NODE	4310:17	4310:17	9	dst
ASSIGN_OP	4310:21	4310:21	7	=
LEAF_NODE	4310:21	4310:21	8	=
RVAL	4310:23	4310:23	7	out
FIELD	4310:23	4310:23	8	out
LEAF_NODE	4310:23	4310:23	9	out
LEAF_NODE	4310:26	4310:26	4	;
SIMPLE_DECL	4311:2	4311:27	3	char [ 32 ] action ;
VAR_DECL	4311:2	4311:17	4	char [ 32 ] action
TYPE	4311:2	4311:23	5	char [ 32 ]
TYPE_NAME	4311:2	4311:2	6	char
LEAF_NODE	4311:2	4311:2	7	char
TYPE_SUFFIX	4311:23	4311:26	6	[ 32 ]
LEAF_NODE	4311:23	4311:23	7	[
FIELD	4311:24	4311:24	7	32
LEAF_NODE	4311:24	4311:24	8	32
LEAF_NODE	4311:26	4311:26	7	]
NAME	4311:17	4311:17	5	action
LEAF_NODE	4311:17	4311:17	6	action
LEAF_NODE	4311:27	4311:27	4	;
SELECTION	4313:2	4314:4	3	
KEYWORD	4313:2	4313:2	4	if
LEAF_NODE	4313:2	4313:2	5	if
LEAF_NODE	4313:5	4313:5	4	(
CONDITION	4313:6	4313:6	4	( src == NULL ) || ( dst == NULL )
EXPR	4313:6	4313:6	5	( src == NULL ) || ( dst == NULL )
OR	4313:6	4313:23	6	( src == NULL ) || ( dst == NULL )
EXPR	4313:6	4313:18	7	( src == NULL )
LEAF_NODE	4313:6	4313:6	8	(
FIELD	4313:7	4313:7	8	src
LEAF_NODE	4313:7	4313:7	9	src
EQ_OPERATOR	4313:11	4313:11	8	==
LEAF_NODE	4313:11	4313:11	9	==
FIELD	4313:14	4313:14	8	NULL
LEAF_NODE	4313:14	4313:14	9	NULL
LEAF_NODE	4313:18	4313:18	8	)
LEAF_NODE	4313:20	4313:20	7	||
EXPR	4313:23	4313:35	7	( dst == NULL )
LEAF_NODE	4313:23	4313:23	8	(
FIELD	4313:24	4313:24	8	dst
LEAF_NODE	4313:24	4313:24	9	dst
EQ_OPERATOR	4313:28	4313:28	8	==
LEAF_NODE	4313:28	4313:28	9	==
FIELD	4313:31	4313:31	8	NULL
LEAF_NODE	4313:31	4313:31	9	NULL
LEAF_NODE	4313:35	4313:35	8	)
LEAF_NODE	4313:36	4313:36	4	)
STATEMENTS	4314:4	4317:4	4	
LEAF_NODE	4314:4	4314:4	5	{
STATEMENTS	4315:4	4316:4	5	
EXPR_STATEMENT	4315:4	4315:81	6	TIFFError ( "combineSeparateTileSamples8bits" , "Invalid input or output buffer" ) ;
EXPR	4315:4	4315:4	7	TIFFError ( "combineSeparateTileSamples8bits" , "Invalid input or output buffer" )
FUNCTION_CALL	4315:4	4315:80	8	TIFFError ( "combineSeparateTileSamples8bits" , "Invalid input or output buffer" )
CALLEE	4315:4	4315:4	9	TIFFError
LEAF_NODE	4315:4	4315:4	10	TIFFError
LEAF_NODE	4315:13	4315:13	9	(
ARGUMENT	4315:14	4315:14	9	"combineSeparateTileSamples8bits"
FIELD	4315:14	4315:14	10	"combineSeparateTileSamples8bits"
LEAF_NODE	4315:14	4315:14	11	"combineSeparateTileSamples8bits"
LEAF_NODE	4315:47	4315:47	9	,
ARGUMENT	4315:48	4315:48	9	"Invalid input or output buffer"
FIELD	4315:48	4315:48	10	"Invalid input or output buffer"
LEAF_NODE	4315:48	4315:48	11	"Invalid input or output buffer"
LEAF_NODE	4315:80	4315:80	9	)
LEAF_NODE	4315:81	4315:81	7	;
JUMP_STATEMENT	4316:4	4316:14	6	return ( 1 ) ;
KEYWORD	4316:4	4316:4	7	return
LEAF_NODE	4316:4	4316:4	8	return
DESTINATION	4316:11	4316:11	7	( 1 )
EXPR	4316:11	4316:13	8	( 1 )
LEAF_NODE	4316:11	4316:11	9	(
FIELD	4316:12	4316:12	9	1
LEAF_NODE	4316:12	4316:12	10	1
LEAF_NODE	4316:13	4316:13	9	)
LEAF_NODE	4316:14	4316:14	7	;
LEAF_NODE	4317:4	4317:4	5	}
EXPR_STATEMENT	4319:2	4319:36	3	src_rowsize = ( ( bps * tw ) + 7 ) / 8 ;
EXPR	4319:2	4319:2	4	src_rowsize = ( ( bps * tw ) + 7 ) / 8
ASSIGN	4319:2	4319:16	5	src_rowsize = ( ( bps * tw ) + 7 ) / 8
LVAL	4319:2	4319:2	6	src_rowsize
FIELD	4319:2	4319:2	7	src_rowsize
LEAF_NODE	4319:2	4319:2	8	src_rowsize
ASSIGN_OP	4319:14	4319:14	6	=
LEAF_NODE	4319:14	4319:14	7	=
RVAL	4319:16	4319:35	6	( ( bps * tw ) + 7 ) / 8
LEAF_NODE	4319:16	4319:16	7	(
LEAF_NODE	4319:17	4319:17	7	(
FIELD	4319:18	4319:18	7	bps
LEAF_NODE	4319:18	4319:18	8	bps
LEAF_NODE	4319:22	4319:22	7	*
FIELD	4319:24	4319:24	7	tw
LEAF_NODE	4319:24	4319:24	8	tw
LEAF_NODE	4319:26	4319:26	7	)
LEAF_NODE	4319:28	4319:28	7	+
FIELD	4319:30	4319:30	7	7
LEAF_NODE	4319:30	4319:30	8	7
LEAF_NODE	4319:31	4319:31	7	)
LEAF_NODE	4319:33	4319:33	7	/
FIELD	4319:35	4319:35	7	8
LEAF_NODE	4319:35	4319:35	8	8
LEAF_NODE	4319:36	4319:36	4	;
LEAF_NODE	4320:2	4320:2	3	dst_rowsize
LEAF_NODE	4320:14	4320:14	3	=
LEAF_NODE	4320:16	4320:16	3	(
LEAF_NODE	4320:17	4320:17	3	(
LEAF_NODE	4320:18	4320:18	3	imagewidth
LEAF_NODE	4320:29	4320:29	3	*
LEAF_NODE	4320:31	4320:31	3	bps
LEAF_NODE	4320:35	4320:35	3	*
LEAF_NODE	4320:37	4320:37	3	spp
LEAF_NODE	4320:40	4320:40	3	)
LEAF_NODE	4320:42	4320:42	3	+
LEAF_NODE	4320:44	4320:44	3	7
LEAF_NODE	4320:45	4320:45	3	)
LEAF_NODE	4320:47	4320:47	3	/
EXPR_STATEMENT	4320:49	4320:50	3	8 ;
EXPR	4320:49	4320:49	4	8
FIELD	4320:49	4320:49	5	8
LEAF_NODE	4320:49	4320:49	6	8
LEAF_NODE	4320:50	4320:50	4	;
EXPR_STATEMENT	4321:2	4321:37	3	maskbits = ( uint8 ) - 1 >> ( 8 - bps ) ;
EXPR	4321:2	4321:2	4	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
ASSIGN	4321:2	4321:14	5	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
LVAL	4321:2	4321:2	6	maskbits
FIELD	4321:2	4321:2	7	maskbits
LEAF_NODE	4321:2	4321:2	8	maskbits
ASSIGN_OP	4321:11	4321:11	6	=
LEAF_NODE	4321:11	4321:11	7	=
RVAL	4321:14	4321:36	6	( uint8 ) - 1 >> ( 8 - bps )
LEAF_NODE	4321:14	4321:14	7	(
TYPE_NAME	4321:15	4321:15	7	uint8
LEAF_NODE	4321:15	4321:15	8	uint8
LEAF_NODE	4321:20	4321:20	7	)
UNARY_EXPR	4321:21	4321:22	7	- 1
UNARY_OPERATOR	4321:21	4321:21	8	-
LEAF_NODE	4321:21	4321:21	9	-
FIELD	4321:22	4321:22	8	1
LEAF_NODE	4321:22	4321:22	9	1
LEAF_NODE	4321:24	4321:24	7	>>
LEAF_NODE	4321:27	4321:27	7	(
FIELD	4321:29	4321:29	7	8
LEAF_NODE	4321:29	4321:29	8	8
LEAF_NODE	4321:31	4321:31	7	-
FIELD	4321:33	4321:33	7	bps
LEAF_NODE	4321:33	4321:33	8	bps
LEAF_NODE	4321:36	4321:36	7	)
LEAF_NODE	4321:37	4321:37	4	;
ITERATION	4323:2	4324:4	3	
KEYWORD	4323:2	4323:2	4	for
LEAF_NODE	4323:2	4323:2	5	for
LEAF_NODE	4323:6	4323:6	4	(
FOR_INIT	4323:7	4323:14	4	row = 0 ;
EXPR	4323:7	4323:7	5	row = 0
ASSIGN	4323:7	4323:13	6	row = 0
LVAL	4323:7	4323:7	7	row
FIELD	4323:7	4323:7	8	row
LEAF_NODE	4323:7	4323:7	9	row
ASSIGN_OP	4323:11	4323:11	7	=
LEAF_NODE	4323:11	4323:11	8	=
RVAL	4323:13	4323:13	7	0
FIELD	4323:13	4323:13	8	0
LEAF_NODE	4323:13	4323:13	9	0
LEAF_NODE	4323:14	4323:14	5	;
CONDITION	4323:16	4323:16	4	row < rows
EXPR	4323:16	4323:22	5	row < rows
FIELD	4323:16	4323:16	6	row
LEAF_NODE	4323:16	4323:16	7	row
REL_OPERATOR	4323:20	4323:20	6	<
LEAF_NODE	4323:20	4323:20	7	<
FIELD	4323:22	4323:22	6	rows
LEAF_NODE	4323:22	4323:22	7	rows
LEAF_NODE	4323:26	4323:26	4	;
FOR_EXPR	4323:28	4323:28	4	row ++
EXPR	4323:28	4323:28	5	row ++
FIELD	4323:28	4323:31	6	row ++
LEAF_NODE	4323:28	4323:28	7	row
LEAF_NODE	4323:31	4323:31	7	++
LEAF_NODE	4323:33	4323:33	4	)
STATEMENTS	4324:4	4390:4	4	
LEAF_NODE	4324:4	4324:4	5	{
STATEMENTS	4325:4	4385:4	5	
EXPR_STATEMENT	4325:4	4325:18	6	ready_bits = 0 ;
EXPR	4325:4	4325:4	7	ready_bits = 0
ASSIGN	4325:4	4325:17	8	ready_bits = 0
LVAL	4325:4	4325:4	9	ready_bits
FIELD	4325:4	4325:4	10	ready_bits
LEAF_NODE	4325:4	4325:4	11	ready_bits
ASSIGN_OP	4325:15	4325:15	9	=
LEAF_NODE	4325:15	4325:15	10	=
RVAL	4325:17	4325:17	9	0
FIELD	4325:17	4325:17	10	0
LEAF_NODE	4325:17	4325:17	11	0
LEAF_NODE	4325:18	4325:18	7	;
EXPR_STATEMENT	4326:4	4326:21	6	buff1 = buff2 = 0 ;
EXPR	4326:4	4326:4	7	buff1 = buff2 = 0
ASSIGN	4326:4	4326:12	8	buff1 = buff2 = 0
LVAL	4326:4	4326:4	9	buff1
FIELD	4326:4	4326:4	10	buff1
LEAF_NODE	4326:4	4326:4	11	buff1
ASSIGN_OP	4326:10	4326:10	9	=
LEAF_NODE	4326:10	4326:10	10	=
RVAL	4326:12	4326:12	9	buff2 = 0
ASSIGN	4326:12	4326:20	10	buff2 = 0
LVAL	4326:12	4326:12	11	buff2
FIELD	4326:12	4326:12	12	buff2
LEAF_NODE	4326:12	4326:12	13	buff2
ASSIGN_OP	4326:18	4326:18	11	=
LEAF_NODE	4326:18	4326:18	12	=
RVAL	4326:20	4326:20	11	0
FIELD	4326:20	4326:20	12	0
LEAF_NODE	4326:20	4326:20	13	0
LEAF_NODE	4326:21	4326:21	7	;
EXPR_STATEMENT	4327:4	4327:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	4327:4	4327:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	4327:4	4327:10	8	dst = out + ( row * dst_rowsize )
LVAL	4327:4	4327:4	9	dst
FIELD	4327:4	4327:4	10	dst
LEAF_NODE	4327:4	4327:4	11	dst
ASSIGN_OP	4327:8	4327:8	9	=
LEAF_NODE	4327:8	4327:8	10	=
RVAL	4327:10	4327:34	9	out + ( row * dst_rowsize )
FIELD	4327:10	4327:10	10	out
LEAF_NODE	4327:10	4327:10	11	out
LEAF_NODE	4327:14	4327:14	10	+
LEAF_NODE	4327:16	4327:16	10	(
FIELD	4327:17	4327:17	10	row
LEAF_NODE	4327:17	4327:17	11	row
LEAF_NODE	4327:21	4327:21	10	*
FIELD	4327:23	4327:23	10	dst_rowsize
LEAF_NODE	4327:23	4327:23	11	dst_rowsize
LEAF_NODE	4327:34	4327:34	10	)
LEAF_NODE	4327:35	4327:35	7	;
EXPR_STATEMENT	4328:4	4328:34	6	src_offset = row * src_rowsize ;
EXPR	4328:4	4328:4	7	src_offset = row * src_rowsize
ASSIGN	4328:4	4328:17	8	src_offset = row * src_rowsize
LVAL	4328:4	4328:4	9	src_offset
FIELD	4328:4	4328:4	10	src_offset
LEAF_NODE	4328:4	4328:4	11	src_offset
ASSIGN_OP	4328:15	4328:15	9	=
LEAF_NODE	4328:15	4328:15	10	=
RVAL	4328:17	4328:23	9	row * src_rowsize
FIELD	4328:17	4328:17	10	row
LEAF_NODE	4328:17	4328:17	11	row
LEAF_NODE	4328:21	4328:21	10	*
FIELD	4328:23	4328:23	10	src_rowsize
LEAF_NODE	4328:23	4328:23	11	src_rowsize
LEAF_NODE	4328:34	4328:34	7	;
ITERATION	4329:4	4330:6	6	
KEYWORD	4329:4	4329:4	7	for
LEAF_NODE	4329:4	4329:4	8	for
LEAF_NODE	4329:8	4329:8	7	(
FOR_INIT	4329:9	4329:16	7	col = 0 ;
EXPR	4329:9	4329:9	8	col = 0
ASSIGN	4329:9	4329:15	9	col = 0
LVAL	4329:9	4329:9	10	col
FIELD	4329:9	4329:9	11	col
LEAF_NODE	4329:9	4329:9	12	col
ASSIGN_OP	4329:13	4329:13	10	=
LEAF_NODE	4329:13	4329:13	11	=
RVAL	4329:15	4329:15	10	0
FIELD	4329:15	4329:15	11	0
LEAF_NODE	4329:15	4329:15	12	0
LEAF_NODE	4329:16	4329:16	8	;
CONDITION	4329:18	4329:18	7	col < cols
EXPR	4329:18	4329:24	8	col < cols
FIELD	4329:18	4329:18	9	col
LEAF_NODE	4329:18	4329:18	10	col
REL_OPERATOR	4329:22	4329:22	9	<
LEAF_NODE	4329:22	4329:22	10	<
FIELD	4329:24	4329:24	9	cols
LEAF_NODE	4329:24	4329:24	10	cols
LEAF_NODE	4329:28	4329:28	7	;
FOR_EXPR	4329:30	4329:30	7	col ++
EXPR	4329:30	4329:30	8	col ++
FIELD	4329:30	4329:33	9	col ++
LEAF_NODE	4329:30	4329:30	10	col
LEAF_NODE	4329:33	4329:33	10	++
LEAF_NODE	4329:35	4329:35	7	)
STATEMENTS	4330:6	4370:6	7	
LEAF_NODE	4330:6	4330:6	8	{
STATEMENTS	4332:6	4338:6	8	
EXPR_STATEMENT	4332:6	4332:28	9	bit_offset = col * bps ;
EXPR	4332:6	4332:6	10	bit_offset = col * bps
ASSIGN	4332:6	4332:19	11	bit_offset = col * bps
LVAL	4332:6	4332:6	12	bit_offset
FIELD	4332:6	4332:6	13	bit_offset
LEAF_NODE	4332:6	4332:6	14	bit_offset
ASSIGN_OP	4332:17	4332:17	12	=
LEAF_NODE	4332:17	4332:17	13	=
RVAL	4332:19	4332:25	12	col * bps
FIELD	4332:19	4332:19	13	col
LEAF_NODE	4332:19	4332:19	14	col
LEAF_NODE	4332:23	4332:23	13	*
FIELD	4332:25	4332:25	13	bps
LEAF_NODE	4332:25	4332:25	14	bps
LEAF_NODE	4332:28	4332:28	10	;
EXPR_STATEMENT	4333:6	4333:31	9	src_byte = bit_offset / 8 ;
EXPR	4333:6	4333:6	10	src_byte = bit_offset / 8
ASSIGN	4333:6	4333:17	11	src_byte = bit_offset / 8
LVAL	4333:6	4333:6	12	src_byte
FIELD	4333:6	4333:6	13	src_byte
LEAF_NODE	4333:6	4333:6	14	src_byte
ASSIGN_OP	4333:15	4333:15	12	=
LEAF_NODE	4333:15	4333:15	13	=
RVAL	4333:17	4333:30	12	bit_offset / 8
FIELD	4333:17	4333:17	13	bit_offset
LEAF_NODE	4333:17	4333:17	14	bit_offset
LEAF_NODE	4333:28	4333:28	13	/
FIELD	4333:30	4333:30	13	8
LEAF_NODE	4333:30	4333:30	14	8
LEAF_NODE	4333:31	4333:31	10	;
EXPR_STATEMENT	4334:6	4334:31	9	src_bit = bit_offset % 8 ;
EXPR	4334:6	4334:6	10	src_bit = bit_offset % 8
ASSIGN	4334:6	4334:17	11	src_bit = bit_offset % 8
LVAL	4334:6	4334:6	12	src_bit
FIELD	4334:6	4334:6	13	src_bit
LEAF_NODE	4334:6	4334:6	14	src_bit
ASSIGN_OP	4334:15	4334:15	12	=
LEAF_NODE	4334:15	4334:15	13	=
RVAL	4334:17	4334:30	12	bit_offset % 8
FIELD	4334:17	4334:17	13	bit_offset
LEAF_NODE	4334:17	4334:17	14	bit_offset
LEAF_NODE	4334:28	4334:28	13	%
FIELD	4334:30	4334:30	13	8
LEAF_NODE	4334:30	4334:30	14	8
LEAF_NODE	4334:31	4334:31	10	;
EXPR_STATEMENT	4336:6	4336:49	9	matchbits = maskbits << ( 8 - src_bit - bps ) ;
EXPR	4336:6	4336:6	10	matchbits = maskbits << ( 8 - src_bit - bps )
ASSIGN	4336:6	4336:18	11	matchbits = maskbits << ( 8 - src_bit - bps )
LVAL	4336:6	4336:6	12	matchbits
FIELD	4336:6	4336:6	13	matchbits
LEAF_NODE	4336:6	4336:6	14	matchbits
ASSIGN_OP	4336:16	4336:16	12	=
LEAF_NODE	4336:16	4336:16	13	=
RVAL	4336:18	4336:48	12	maskbits << ( 8 - src_bit - bps )
FIELD	4336:18	4336:18	13	maskbits
LEAF_NODE	4336:18	4336:18	14	maskbits
LEAF_NODE	4336:27	4336:27	13	<<
LEAF_NODE	4336:30	4336:30	13	(
FIELD	4336:31	4336:31	13	8
LEAF_NODE	4336:31	4336:31	14	8
LEAF_NODE	4336:33	4336:33	13	-
FIELD	4336:35	4336:35	13	src_bit
LEAF_NODE	4336:35	4336:35	14	src_bit
LEAF_NODE	4336:43	4336:43	13	-
FIELD	4336:45	4336:45	13	bps
LEAF_NODE	4336:45	4336:45	14	bps
LEAF_NODE	4336:48	4336:48	13	)
LEAF_NODE	4336:49	4336:49	10	;
ITERATION	4338:6	4339:8	9	
KEYWORD	4338:6	4338:6	10	for
LEAF_NODE	4338:6	4338:6	11	for
LEAF_NODE	4338:10	4338:10	10	(
FOR_INIT	4338:11	4338:16	10	s = 0 ;
EXPR	4338:11	4338:11	11	s = 0
ASSIGN	4338:11	4338:15	12	s = 0
LVAL	4338:11	4338:11	13	s
FIELD	4338:11	4338:11	14	s
LEAF_NODE	4338:11	4338:11	15	s
ASSIGN_OP	4338:13	4338:13	13	=
LEAF_NODE	4338:13	4338:13	14	=
RVAL	4338:15	4338:15	13	0
FIELD	4338:15	4338:15	14	0
LEAF_NODE	4338:15	4338:15	15	0
LEAF_NODE	4338:16	4338:16	11	;
CONDITION	4338:18	4338:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4338:18	4338:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	4338:18	4338:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4338:18	4338:26	13	( s < spp )
LEAF_NODE	4338:18	4338:18	14	(
FIELD	4338:19	4338:19	14	s
LEAF_NODE	4338:19	4338:19	15	s
REL_OPERATOR	4338:21	4338:21	14	<
LEAF_NODE	4338:21	4338:21	15	<
FIELD	4338:23	4338:23	14	spp
LEAF_NODE	4338:23	4338:23	15	spp
LEAF_NODE	4338:26	4338:26	14	)
LEAF_NODE	4338:28	4338:28	13	&&
EXPR	4338:31	4338:47	13	( s < MAX_SAMPLES )
LEAF_NODE	4338:31	4338:31	14	(
FIELD	4338:32	4338:32	14	s
LEAF_NODE	4338:32	4338:32	15	s
REL_OPERATOR	4338:34	4338:34	14	<
LEAF_NODE	4338:34	4338:34	15	<
FIELD	4338:36	4338:36	14	MAX_SAMPLES
LEAF_NODE	4338:36	4338:36	15	MAX_SAMPLES
LEAF_NODE	4338:47	4338:47	14	)
LEAF_NODE	4338:48	4338:48	10	;
FOR_EXPR	4338:50	4338:50	10	s ++
EXPR	4338:50	4338:50	11	s ++
FIELD	4338:50	4338:51	12	s ++
LEAF_NODE	4338:50	4338:50	13	s
LEAF_NODE	4338:51	4338:51	13	++
LEAF_NODE	4338:53	4338:53	10	)
STATEMENTS	4339:8	4369:8	10	
LEAF_NODE	4339:8	4339:8	11	{
STATEMENTS	4340:1	4358:8	11	
EXPR_STATEMENT	4340:1	4340:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	4340:1	4340:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	4340:1	4340:7	14	src = in [ s ] + src_offset + src_byte
LVAL	4340:1	4340:1	15	src
FIELD	4340:1	4340:1	16	src
LEAF_NODE	4340:1	4340:1	17	src
ASSIGN_OP	4340:5	4340:5	15	=
LEAF_NODE	4340:5	4340:5	16	=
RVAL	4340:7	4340:28	15	in [ s ] + src_offset + src_byte
FIELD	4340:7	4340:11	16	in [ s ]
LEAF_NODE	4340:7	4340:7	17	in
LEAF_NODE	4340:9	4340:9	17	[
EXPR	4340:10	4340:10	17	s
FIELD	4340:10	4340:10	18	s
LEAF_NODE	4340:10	4340:10	19	s
LEAF_NODE	4340:11	4340:11	17	]
LEAF_NODE	4340:13	4340:13	16	+
FIELD	4340:15	4340:15	16	src_offset
LEAF_NODE	4340:15	4340:15	17	src_offset
LEAF_NODE	4340:26	4340:26	16	+
FIELD	4340:28	4340:28	16	src_byte
LEAF_NODE	4340:28	4340:28	17	src_byte
LEAF_NODE	4340:36	4340:36	13	;
LEAF_NODE	4341:8	4341:8	12	buff1
LEAF_NODE	4341:14	4341:14	12	=
LEAF_NODE	4341:16	4341:16	12	(
LEAF_NODE	4341:17	4341:17	12	(
LEAF_NODE	4341:18	4341:18	12	*
LEAF_NODE	4341:19	4341:19	12	src
LEAF_NODE	4341:22	4341:22	12	)
LEAF_NODE	4341:24	4341:24	12	&
LEAF_NODE	4341:26	4341:26	12	matchbits
LEAF_NODE	4341:35	4341:35	12	)
LEAF_NODE	4341:37	4341:37	12	<<
LEAF_NODE	4341:40	4341:40	12	(
LEAF_NODE	4341:41	4341:41	12	src_bit
LEAF_NODE	4341:48	4341:48	12	)
LEAF_NODE	4341:49	4341:49	12	;
SELECTION	4344:8	4345:10	12	
KEYWORD	4344:8	4344:8	13	if
LEAF_NODE	4344:8	4344:8	14	if
LEAF_NODE	4344:11	4344:11	13	(
CONDITION	4344:12	4344:12	13	ready_bits >= 8
EXPR	4344:12	4344:26	14	ready_bits >= 8
FIELD	4344:12	4344:12	15	ready_bits
LEAF_NODE	4344:12	4344:12	16	ready_bits
REL_OPERATOR	4344:23	4344:23	15	>=
LEAF_NODE	4344:23	4344:23	16	>=
FIELD	4344:26	4344:26	15	8
LEAF_NODE	4344:26	4344:26	16	8
LEAF_NODE	4344:27	4344:27	13	)
STATEMENTS	4345:10	4350:10	13	
LEAF_NODE	4345:10	4345:10	14	{
STATEMENTS	4346:10	4349:10	14	
EXPR_STATEMENT	4346:10	4346:24	15	* dst ++ = buff2 ;
EXPR	4346:10	4346:10	16	* dst ++ = buff2
ASSIGN	4346:10	4346:19	17	* dst ++ = buff2
LVAL	4346:10	4346:10	18	* dst ++
UNARY_EXPR	4346:10	4346:11	19	* dst ++
UNARY_OPERATOR	4346:10	4346:10	20	*
LEAF_NODE	4346:10	4346:10	21	*
FIELD	4346:11	4346:14	20	dst ++
LEAF_NODE	4346:11	4346:11	21	dst
LEAF_NODE	4346:14	4346:14	21	++
ASSIGN_OP	4346:17	4346:17	18	=
LEAF_NODE	4346:17	4346:17	19	=
RVAL	4346:19	4346:19	18	buff2
FIELD	4346:19	4346:19	19	buff2
LEAF_NODE	4346:19	4346:19	20	buff2
LEAF_NODE	4346:24	4346:24	16	;
EXPR_STATEMENT	4347:10	4347:23	15	buff2 = buff1 ;
EXPR	4347:10	4347:10	16	buff2 = buff1
ASSIGN	4347:10	4347:18	17	buff2 = buff1
LVAL	4347:10	4347:10	18	buff2
FIELD	4347:10	4347:10	19	buff2
LEAF_NODE	4347:10	4347:10	20	buff2
ASSIGN_OP	4347:16	4347:16	18	=
LEAF_NODE	4347:16	4347:16	19	=
RVAL	4347:18	4347:18	18	buff1
FIELD	4347:18	4347:18	19	buff1
LEAF_NODE	4347:18	4347:18	20	buff1
LEAF_NODE	4347:23	4347:23	16	;
EXPR_STATEMENT	4348:10	4348:25	15	ready_bits -= 8 ;
EXPR	4348:10	4348:10	16	ready_bits -= 8
ASSIGN	4348:10	4348:24	17	ready_bits -= 8
LVAL	4348:10	4348:10	18	ready_bits
FIELD	4348:10	4348:10	19	ready_bits
LEAF_NODE	4348:10	4348:10	20	ready_bits
ASSIGN_OP	4348:21	4348:21	18	-=
LEAF_NODE	4348:21	4348:21	19	-=
RVAL	4348:24	4348:24	18	8
FIELD	4348:24	4348:24	19	8
LEAF_NODE	4348:24	4348:24	20	8
LEAF_NODE	4348:25	4348:25	16	;
EXPR_STATEMENT	4349:10	4349:34	15	strcpy ( action , "Flush" ) ;
EXPR	4349:10	4349:10	16	strcpy ( action , "Flush" )
FUNCTION_CALL	4349:10	4349:33	17	strcpy ( action , "Flush" )
CALLEE	4349:10	4349:10	18	strcpy
LEAF_NODE	4349:10	4349:10	19	strcpy
LEAF_NODE	4349:17	4349:17	18	(
ARGUMENT	4349:18	4349:18	18	action
FIELD	4349:18	4349:18	19	action
LEAF_NODE	4349:18	4349:18	20	action
LEAF_NODE	4349:24	4349:24	18	,
ARGUMENT	4349:26	4349:26	18	"Flush"
FIELD	4349:26	4349:26	19	"Flush"
LEAF_NODE	4349:26	4349:26	20	"Flush"
LEAF_NODE	4349:33	4349:33	18	)
LEAF_NODE	4349:34	4349:34	16	;
LEAF_NODE	4350:10	4350:10	14	}
SELECTION	4351:8	4352:10	12	
KEYWORD	4351:8	4351:8	13	else
LEAF_NODE	4351:8	4351:8	14	else
STATEMENTS	4352:10	4355:10	13	
LEAF_NODE	4352:10	4352:10	14	{
STATEMENTS	4353:10	4354:10	14	
EXPR_STATEMENT	4353:10	4353:49	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	4353:10	4353:10	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	4353:10	4353:18	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	4353:10	4353:10	18	buff2
FIELD	4353:10	4353:10	19	buff2
LEAF_NODE	4353:10	4353:10	20	buff2
ASSIGN_OP	4353:16	4353:16	18	=
LEAF_NODE	4353:16	4353:16	19	=
RVAL	4353:18	4353:48	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	4353:18	4353:18	19	(
BIT_OR	4353:19	4353:27	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	4353:19	4353:19	20	buff2
FIELD	4353:19	4353:19	21	buff2
LEAF_NODE	4353:19	4353:19	22	buff2
LEAF_NODE	4353:25	4353:25	20	|
BIT_OR_ELEM	4353:27	4353:47	20	( buff1 >> ready_bits )
LEAF_NODE	4353:27	4353:27	21	(
FIELD	4353:28	4353:28	21	buff1
LEAF_NODE	4353:28	4353:28	22	buff1
LEAF_NODE	4353:34	4353:34	21	>>
FIELD	4353:37	4353:37	21	ready_bits
LEAF_NODE	4353:37	4353:37	22	ready_bits
LEAF_NODE	4353:47	4353:47	21	)
LEAF_NODE	4353:48	4353:48	19	)
LEAF_NODE	4353:49	4353:49	16	;
EXPR_STATEMENT	4354:10	4354:35	15	strcpy ( action , "Update" ) ;
EXPR	4354:10	4354:10	16	strcpy ( action , "Update" )
FUNCTION_CALL	4354:10	4354:34	17	strcpy ( action , "Update" )
CALLEE	4354:10	4354:10	18	strcpy
LEAF_NODE	4354:10	4354:10	19	strcpy
LEAF_NODE	4354:17	4354:17	18	(
ARGUMENT	4354:18	4354:18	18	action
FIELD	4354:18	4354:18	19	action
LEAF_NODE	4354:18	4354:18	20	action
LEAF_NODE	4354:24	4354:24	18	,
ARGUMENT	4354:26	4354:26	18	"Update"
FIELD	4354:26	4354:26	19	"Update"
LEAF_NODE	4354:26	4354:26	20	"Update"
LEAF_NODE	4354:34	4354:34	18	)
LEAF_NODE	4354:35	4354:35	16	;
LEAF_NODE	4355:10	4355:10	14	}
EXPR_STATEMENT	4356:8	4356:25	12	ready_bits += bps ;
EXPR	4356:8	4356:8	13	ready_bits += bps
ASSIGN	4356:8	4356:22	14	ready_bits += bps
LVAL	4356:8	4356:8	15	ready_bits
FIELD	4356:8	4356:8	16	ready_bits
LEAF_NODE	4356:8	4356:8	17	ready_bits
ASSIGN_OP	4356:19	4356:19	15	+=
LEAF_NODE	4356:19	4356:19	16	+=
RVAL	4356:22	4356:22	15	bps
FIELD	4356:22	4356:22	16	bps
LEAF_NODE	4356:22	4356:22	17	bps
LEAF_NODE	4356:25	4356:25	13	;
SELECTION	4358:8	4359:10	12	
KEYWORD	4358:8	4358:8	13	if
LEAF_NODE	4358:8	4358:8	14	if
LEAF_NODE	4358:11	4358:11	13	(
CONDITION	4358:12	4358:12	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	4358:12	4358:12	14	( dumpfile != NULL ) && ( level == 3 )
AND	4358:12	4358:34	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	4358:12	4358:29	16	( dumpfile != NULL )
LEAF_NODE	4358:12	4358:12	17	(
FIELD	4358:13	4358:13	17	dumpfile
LEAF_NODE	4358:13	4358:13	18	dumpfile
EQ_OPERATOR	4358:22	4358:22	17	!=
LEAF_NODE	4358:22	4358:22	18	!=
FIELD	4358:25	4358:25	17	NULL
LEAF_NODE	4358:25	4358:25	18	NULL
LEAF_NODE	4358:29	4358:29	17	)
LEAF_NODE	4358:31	4358:31	16	&&
EXPR	4358:34	4358:45	16	( level == 3 )
LEAF_NODE	4358:34	4358:34	17	(
FIELD	4358:35	4358:35	17	level
LEAF_NODE	4358:35	4358:35	18	level
EQ_OPERATOR	4358:41	4358:41	17	==
LEAF_NODE	4358:41	4358:41	18	==
FIELD	4358:44	4358:44	17	3
LEAF_NODE	4358:44	4358:44	18	3
LEAF_NODE	4358:45	4358:45	17	)
LEAF_NODE	4358:46	4358:46	13	)
STATEMENTS	4359:10	4368:3	13	
LEAF_NODE	4359:10	4359:10	14	{
STATEMENTS	4360:10	4367:10	14	
EXPR_STATEMENT	4360:10	4362:55	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	4360:10	4360:10	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	4360:10	4362:54	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	4360:10	4360:10	18	dump_info
LEAF_NODE	4360:10	4360:10	19	dump_info
LEAF_NODE	4360:20	4360:20	18	(
ARGUMENT	4360:21	4360:21	18	dumpfile
FIELD	4360:21	4360:21	19	dumpfile
LEAF_NODE	4360:21	4360:21	20	dumpfile
LEAF_NODE	4360:29	4360:29	18	,
ARGUMENT	4360:31	4360:31	18	format
FIELD	4360:31	4360:31	19	format
LEAF_NODE	4360:31	4360:31	20	format
LEAF_NODE	4360:37	4360:37	18	,
ARGUMENT	4360:39	4360:39	18	""
FIELD	4360:39	4360:39	19	""
LEAF_NODE	4360:39	4360:39	20	""
LEAF_NODE	4360:41	4360:41	18	,
ARGUMENT	4361:19	4361:19	18	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4361:19	4361:19	19	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4361:19	4361:19	20	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4361:102	4361:102	18	,
ARGUMENT	4362:5	4362:11	18	row + 1
FIELD	4362:5	4362:5	19	row
LEAF_NODE	4362:5	4362:5	20	row
LEAF_NODE	4362:9	4362:9	19	+
FIELD	4362:11	4362:11	19	1
LEAF_NODE	4362:11	4362:11	20	1
LEAF_NODE	4362:12	4362:12	18	,
ARGUMENT	4362:14	4362:20	18	col + 1
FIELD	4362:14	4362:14	19	col
LEAF_NODE	4362:14	4362:14	20	col
LEAF_NODE	4362:18	4362:18	19	+
FIELD	4362:20	4362:20	19	1
LEAF_NODE	4362:20	4362:20	20	1
LEAF_NODE	4362:21	4362:21	18	,
ARGUMENT	4362:23	4362:23	18	s
FIELD	4362:23	4362:23	19	s
LEAF_NODE	4362:23	4362:23	20	s
LEAF_NODE	4362:24	4362:24	18	,
ARGUMENT	4362:26	4362:26	18	src_byte
FIELD	4362:26	4362:26	19	src_byte
LEAF_NODE	4362:26	4362:26	20	src_byte
LEAF_NODE	4362:34	4362:34	18	,
ARGUMENT	4362:36	4362:36	18	src_bit
FIELD	4362:36	4362:36	19	src_bit
LEAF_NODE	4362:36	4362:36	20	src_bit
LEAF_NODE	4362:43	4362:43	18	,
ARGUMENT	4362:45	4362:51	18	dst - out
FIELD	4362:45	4362:45	19	dst
LEAF_NODE	4362:45	4362:45	20	dst
LEAF_NODE	4362:49	4362:49	19	-
FIELD	4362:51	4362:51	19	out
LEAF_NODE	4362:51	4362:51	20	out
LEAF_NODE	4362:54	4362:54	18	)
LEAF_NODE	4362:55	4362:55	16	;
EXPR_STATEMENT	4363:10	4363:63	15	dump_byte ( dumpfile , format , "Match bits" , matchbits ) ;
EXPR	4363:10	4363:10	16	dump_byte ( dumpfile , format , "Match bits" , matchbits )
FUNCTION_CALL	4363:10	4363:62	17	dump_byte ( dumpfile , format , "Match bits" , matchbits )
CALLEE	4363:10	4363:10	18	dump_byte
LEAF_NODE	4363:10	4363:10	19	dump_byte
LEAF_NODE	4363:20	4363:20	18	(
ARGUMENT	4363:21	4363:21	18	dumpfile
FIELD	4363:21	4363:21	19	dumpfile
LEAF_NODE	4363:21	4363:21	20	dumpfile
LEAF_NODE	4363:29	4363:29	18	,
ARGUMENT	4363:31	4363:31	18	format
FIELD	4363:31	4363:31	19	format
LEAF_NODE	4363:31	4363:31	20	format
LEAF_NODE	4363:37	4363:37	18	,
ARGUMENT	4363:39	4363:39	18	"Match bits"
FIELD	4363:39	4363:39	19	"Match bits"
LEAF_NODE	4363:39	4363:39	20	"Match bits"
LEAF_NODE	4363:51	4363:51	18	,
ARGUMENT	4363:53	4363:53	18	matchbits
FIELD	4363:53	4363:53	19	matchbits
LEAF_NODE	4363:53	4363:53	20	matchbits
LEAF_NODE	4363:62	4363:62	18	)
LEAF_NODE	4363:63	4363:63	16	;
EXPR_STATEMENT	4364:10	4364:58	15	dump_byte ( dumpfile , format , "Src   bits" , * src ) ;
EXPR	4364:10	4364:10	16	dump_byte ( dumpfile , format , "Src   bits" , * src )
FUNCTION_CALL	4364:10	4364:57	17	dump_byte ( dumpfile , format , "Src   bits" , * src )
CALLEE	4364:10	4364:10	18	dump_byte
LEAF_NODE	4364:10	4364:10	19	dump_byte
LEAF_NODE	4364:20	4364:20	18	(
ARGUMENT	4364:21	4364:21	18	dumpfile
FIELD	4364:21	4364:21	19	dumpfile
LEAF_NODE	4364:21	4364:21	20	dumpfile
LEAF_NODE	4364:29	4364:29	18	,
ARGUMENT	4364:31	4364:31	18	format
FIELD	4364:31	4364:31	19	format
LEAF_NODE	4364:31	4364:31	20	format
LEAF_NODE	4364:37	4364:37	18	,
ARGUMENT	4364:39	4364:39	18	"Src   bits"
FIELD	4364:39	4364:39	19	"Src   bits"
LEAF_NODE	4364:39	4364:39	20	"Src   bits"
LEAF_NODE	4364:51	4364:51	18	,
ARGUMENT	4364:53	4364:53	18	* src
UNARY_EXPR	4364:53	4364:54	19	* src
UNARY_OPERATOR	4364:53	4364:53	20	*
LEAF_NODE	4364:53	4364:53	21	*
FIELD	4364:54	4364:54	20	src
LEAF_NODE	4364:54	4364:54	21	src
LEAF_NODE	4364:57	4364:57	18	)
LEAF_NODE	4364:58	4364:58	16	;
EXPR_STATEMENT	4365:10	4365:59	15	dump_byte ( dumpfile , format , "Buff1 bits" , buff1 ) ;
EXPR	4365:10	4365:10	16	dump_byte ( dumpfile , format , "Buff1 bits" , buff1 )
FUNCTION_CALL	4365:10	4365:58	17	dump_byte ( dumpfile , format , "Buff1 bits" , buff1 )
CALLEE	4365:10	4365:10	18	dump_byte
LEAF_NODE	4365:10	4365:10	19	dump_byte
LEAF_NODE	4365:20	4365:20	18	(
ARGUMENT	4365:21	4365:21	18	dumpfile
FIELD	4365:21	4365:21	19	dumpfile
LEAF_NODE	4365:21	4365:21	20	dumpfile
LEAF_NODE	4365:29	4365:29	18	,
ARGUMENT	4365:31	4365:31	18	format
FIELD	4365:31	4365:31	19	format
LEAF_NODE	4365:31	4365:31	20	format
LEAF_NODE	4365:37	4365:37	18	,
ARGUMENT	4365:39	4365:39	18	"Buff1 bits"
FIELD	4365:39	4365:39	19	"Buff1 bits"
LEAF_NODE	4365:39	4365:39	20	"Buff1 bits"
LEAF_NODE	4365:51	4365:51	18	,
ARGUMENT	4365:53	4365:53	18	buff1
FIELD	4365:53	4365:53	19	buff1
LEAF_NODE	4365:53	4365:53	20	buff1
LEAF_NODE	4365:58	4365:58	18	)
LEAF_NODE	4365:59	4365:59	16	;
EXPR_STATEMENT	4366:10	4366:59	15	dump_byte ( dumpfile , format , "Buff2 bits" , buff2 ) ;
EXPR	4366:10	4366:10	16	dump_byte ( dumpfile , format , "Buff2 bits" , buff2 )
FUNCTION_CALL	4366:10	4366:58	17	dump_byte ( dumpfile , format , "Buff2 bits" , buff2 )
CALLEE	4366:10	4366:10	18	dump_byte
LEAF_NODE	4366:10	4366:10	19	dump_byte
LEAF_NODE	4366:20	4366:20	18	(
ARGUMENT	4366:21	4366:21	18	dumpfile
FIELD	4366:21	4366:21	19	dumpfile
LEAF_NODE	4366:21	4366:21	20	dumpfile
LEAF_NODE	4366:29	4366:29	18	,
ARGUMENT	4366:31	4366:31	18	format
FIELD	4366:31	4366:31	19	format
LEAF_NODE	4366:31	4366:31	20	format
LEAF_NODE	4366:37	4366:37	18	,
ARGUMENT	4366:39	4366:39	18	"Buff2 bits"
FIELD	4366:39	4366:39	19	"Buff2 bits"
LEAF_NODE	4366:39	4366:39	20	"Buff2 bits"
LEAF_NODE	4366:51	4366:51	18	,
ARGUMENT	4366:53	4366:53	18	buff2
FIELD	4366:53	4366:53	19	buff2
LEAF_NODE	4366:53	4366:53	20	buff2
LEAF_NODE	4366:58	4366:58	18	)
LEAF_NODE	4366:59	4366:59	16	;
EXPR_STATEMENT	4367:10	4367:55	15	dump_info ( dumpfile , format , "" , "%s" , action ) ;
EXPR	4367:10	4367:10	16	dump_info ( dumpfile , format , "" , "%s" , action )
FUNCTION_CALL	4367:10	4367:54	17	dump_info ( dumpfile , format , "" , "%s" , action )
CALLEE	4367:10	4367:10	18	dump_info
LEAF_NODE	4367:10	4367:10	19	dump_info
LEAF_NODE	4367:20	4367:20	18	(
ARGUMENT	4367:21	4367:21	18	dumpfile
FIELD	4367:21	4367:21	19	dumpfile
LEAF_NODE	4367:21	4367:21	20	dumpfile
LEAF_NODE	4367:29	4367:29	18	,
ARGUMENT	4367:31	4367:31	18	format
FIELD	4367:31	4367:31	19	format
LEAF_NODE	4367:31	4367:31	20	format
LEAF_NODE	4367:37	4367:37	18	,
ARGUMENT	4367:39	4367:39	18	""
FIELD	4367:39	4367:39	19	""
LEAF_NODE	4367:39	4367:39	20	""
LEAF_NODE	4367:41	4367:41	18	,
ARGUMENT	4367:42	4367:42	18	"%s"
FIELD	4367:42	4367:42	19	"%s"
LEAF_NODE	4367:42	4367:42	20	"%s"
LEAF_NODE	4367:46	4367:46	18	,
ARGUMENT	4367:48	4367:48	18	action
FIELD	4367:48	4367:48	19	action
LEAF_NODE	4367:48	4367:48	20	action
LEAF_NODE	4367:54	4367:54	18	)
LEAF_NODE	4367:55	4367:55	16	;
LEAF_NODE	4368:3	4368:3	14	}
LEAF_NODE	4369:8	4369:8	11	}
LEAF_NODE	4370:6	4370:6	8	}
SELECTION	4372:4	4373:6	6	
KEYWORD	4372:4	4372:4	7	if
LEAF_NODE	4372:4	4372:4	8	if
LEAF_NODE	4372:7	4372:7	7	(
CONDITION	4372:8	4372:8	7	ready_bits > 0
EXPR	4372:8	4372:21	8	ready_bits > 0
FIELD	4372:8	4372:8	9	ready_bits
LEAF_NODE	4372:8	4372:8	10	ready_bits
REL_OPERATOR	4372:19	4372:19	9	>
LEAF_NODE	4372:19	4372:19	10	>
FIELD	4372:21	4372:21	9	0
LEAF_NODE	4372:21	4372:21	10	0
LEAF_NODE	4372:22	4372:22	7	)
STATEMENTS	4373:6	4383:6	7	
LEAF_NODE	4373:6	4373:6	8	{
STATEMENTS	4374:6	4376:6	8	
EXPR_STATEMENT	4374:6	4374:63	9	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) ) ;
EXPR	4374:6	4374:6	10	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
ASSIGN	4374:6	4374:14	11	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LVAL	4374:6	4374:6	12	buff1
FIELD	4374:6	4374:6	13	buff1
LEAF_NODE	4374:6	4374:6	14	buff1
ASSIGN_OP	4374:12	4374:12	12	=
LEAF_NODE	4374:12	4374:12	13	=
RVAL	4374:14	4374:62	12	( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LEAF_NODE	4374:14	4374:14	13	(
FIELD	4374:15	4374:15	13	buff2
LEAF_NODE	4374:15	4374:15	14	buff2
LEAF_NODE	4374:21	4374:21	13	&
LEAF_NODE	4374:23	4374:23	13	(
LEAF_NODE	4374:24	4374:24	13	(
TYPE_NAME	4374:25	4374:34	13	unsigned int
LEAF_NODE	4374:25	4374:25	14	unsigned
LEAF_NODE	4374:34	4374:34	14	int
LEAF_NODE	4374:37	4374:37	13	)
FIELD	4374:38	4374:38	13	255
LEAF_NODE	4374:38	4374:38	14	255
LEAF_NODE	4374:42	4374:42	13	<<
LEAF_NODE	4374:45	4374:45	13	(
FIELD	4374:46	4374:46	13	8
LEAF_NODE	4374:46	4374:46	14	8
LEAF_NODE	4374:48	4374:48	13	-
FIELD	4374:50	4374:50	13	ready_bits
LEAF_NODE	4374:50	4374:50	14	ready_bits
LEAF_NODE	4374:60	4374:60	13	)
LEAF_NODE	4374:61	4374:61	13	)
LEAF_NODE	4374:62	4374:62	13	)
LEAF_NODE	4374:63	4374:63	10	;
EXPR_STATEMENT	4375:6	4375:20	9	* dst ++ = buff1 ;
EXPR	4375:6	4375:6	10	* dst ++ = buff1
ASSIGN	4375:6	4375:15	11	* dst ++ = buff1
LVAL	4375:6	4375:6	12	* dst ++
UNARY_EXPR	4375:6	4375:7	13	* dst ++
UNARY_OPERATOR	4375:6	4375:6	14	*
LEAF_NODE	4375:6	4375:6	15	*
FIELD	4375:7	4375:10	14	dst ++
LEAF_NODE	4375:7	4375:7	15	dst
LEAF_NODE	4375:10	4375:10	15	++
ASSIGN_OP	4375:13	4375:13	12	=
LEAF_NODE	4375:13	4375:13	13	=
RVAL	4375:15	4375:15	12	buff1
FIELD	4375:15	4375:15	13	buff1
LEAF_NODE	4375:15	4375:15	14	buff1
LEAF_NODE	4375:20	4375:20	10	;
SELECTION	4376:6	4377:8	9	
KEYWORD	4376:6	4376:6	10	if
LEAF_NODE	4376:6	4376:6	11	if
LEAF_NODE	4376:9	4376:9	10	(
CONDITION	4376:10	4376:10	10	( dumpfile != NULL ) && ( level == 3 )
EXPR	4376:10	4376:10	11	( dumpfile != NULL ) && ( level == 3 )
AND	4376:10	4376:32	12	( dumpfile != NULL ) && ( level == 3 )
EXPR	4376:10	4376:27	13	( dumpfile != NULL )
LEAF_NODE	4376:10	4376:10	14	(
FIELD	4376:11	4376:11	14	dumpfile
LEAF_NODE	4376:11	4376:11	15	dumpfile
EQ_OPERATOR	4376:20	4376:20	14	!=
LEAF_NODE	4376:20	4376:20	15	!=
FIELD	4376:23	4376:23	14	NULL
LEAF_NODE	4376:23	4376:23	15	NULL
LEAF_NODE	4376:27	4376:27	14	)
LEAF_NODE	4376:29	4376:29	13	&&
EXPR	4376:32	4376:43	13	( level == 3 )
LEAF_NODE	4376:32	4376:32	14	(
FIELD	4376:33	4376:33	14	level
LEAF_NODE	4376:33	4376:33	15	level
EQ_OPERATOR	4376:39	4376:39	14	==
LEAF_NODE	4376:39	4376:39	15	==
FIELD	4376:42	4376:42	14	3
LEAF_NODE	4376:42	4376:42	15	3
LEAF_NODE	4376:43	4376:43	14	)
LEAF_NODE	4376:44	4376:44	10	)
STATEMENTS	4377:8	4382:8	10	
LEAF_NODE	4377:8	4377:8	11	{
STATEMENTS	4378:8	4381:17	11	
EXPR_STATEMENT	4378:8	4380:57	12	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	4378:8	4378:8	13	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	4378:8	4380:56	14	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	4378:8	4378:8	15	dump_info
LEAF_NODE	4378:8	4378:8	16	dump_info
LEAF_NODE	4378:18	4378:18	15	(
ARGUMENT	4378:19	4378:19	15	dumpfile
FIELD	4378:19	4378:19	16	dumpfile
LEAF_NODE	4378:19	4378:19	17	dumpfile
LEAF_NODE	4378:27	4378:27	15	,
ARGUMENT	4378:29	4378:29	15	format
FIELD	4378:29	4378:29	16	format
LEAF_NODE	4378:29	4378:29	17	format
LEAF_NODE	4378:35	4378:35	15	,
ARGUMENT	4378:37	4378:37	15	""
FIELD	4378:37	4378:37	16	""
LEAF_NODE	4378:37	4378:37	17	""
LEAF_NODE	4378:39	4378:39	15	,
ARGUMENT	4379:10	4379:10	15	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4379:10	4379:10	16	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4379:10	4379:10	17	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4379:81	4379:81	15	,
ARGUMENT	4380:10	4380:16	15	row + 1
FIELD	4380:10	4380:10	16	row
LEAF_NODE	4380:10	4380:10	17	row
LEAF_NODE	4380:14	4380:14	16	+
FIELD	4380:16	4380:16	16	1
LEAF_NODE	4380:16	4380:16	17	1
LEAF_NODE	4380:17	4380:17	15	,
ARGUMENT	4380:19	4380:25	15	col + 1
FIELD	4380:19	4380:19	16	col
LEAF_NODE	4380:19	4380:19	17	col
LEAF_NODE	4380:23	4380:23	16	+
FIELD	4380:25	4380:25	16	1
LEAF_NODE	4380:25	4380:25	17	1
LEAF_NODE	4380:26	4380:26	15	,
ARGUMENT	4380:28	4380:28	15	src_byte
FIELD	4380:28	4380:28	16	src_byte
LEAF_NODE	4380:28	4380:28	17	src_byte
LEAF_NODE	4380:36	4380:36	15	,
ARGUMENT	4380:38	4380:38	15	src_bit
FIELD	4380:38	4380:38	16	src_bit
LEAF_NODE	4380:38	4380:38	17	src_bit
LEAF_NODE	4380:45	4380:45	15	,
ARGUMENT	4380:47	4380:53	15	dst - out
FIELD	4380:47	4380:47	16	dst
LEAF_NODE	4380:47	4380:47	17	dst
LEAF_NODE	4380:51	4380:51	16	-
FIELD	4380:53	4380:53	16	out
LEAF_NODE	4380:53	4380:53	17	out
LEAF_NODE	4380:56	4380:56	15	)
LEAF_NODE	4380:57	4380:57	13	;
EXPR_STATEMENT	4381:17	4381:66	12	dump_byte ( dumpfile , format , "Final bits" , buff1 ) ;
EXPR	4381:17	4381:17	13	dump_byte ( dumpfile , format , "Final bits" , buff1 )
FUNCTION_CALL	4381:17	4381:65	14	dump_byte ( dumpfile , format , "Final bits" , buff1 )
CALLEE	4381:17	4381:17	15	dump_byte
LEAF_NODE	4381:17	4381:17	16	dump_byte
LEAF_NODE	4381:27	4381:27	15	(
ARGUMENT	4381:28	4381:28	15	dumpfile
FIELD	4381:28	4381:28	16	dumpfile
LEAF_NODE	4381:28	4381:28	17	dumpfile
LEAF_NODE	4381:36	4381:36	15	,
ARGUMENT	4381:38	4381:38	15	format
FIELD	4381:38	4381:38	16	format
LEAF_NODE	4381:38	4381:38	17	format
LEAF_NODE	4381:44	4381:44	15	,
ARGUMENT	4381:46	4381:46	15	"Final bits"
FIELD	4381:46	4381:46	16	"Final bits"
LEAF_NODE	4381:46	4381:46	17	"Final bits"
LEAF_NODE	4381:58	4381:58	15	,
ARGUMENT	4381:60	4381:60	15	buff1
FIELD	4381:60	4381:60	16	buff1
LEAF_NODE	4381:60	4381:60	17	buff1
LEAF_NODE	4381:65	4381:65	15	)
LEAF_NODE	4381:66	4381:66	13	;
LEAF_NODE	4382:8	4382:8	11	}
LEAF_NODE	4383:6	4383:6	8	}
SELECTION	4385:4	4386:6	6	
KEYWORD	4385:4	4385:4	7	if
LEAF_NODE	4385:4	4385:4	8	if
LEAF_NODE	4385:7	4385:7	7	(
CONDITION	4385:8	4385:8	7	( dumpfile != NULL ) && ( level >= 2 )
EXPR	4385:8	4385:8	8	( dumpfile != NULL ) && ( level >= 2 )
AND	4385:8	4385:30	9	( dumpfile != NULL ) && ( level >= 2 )
EXPR	4385:8	4385:25	10	( dumpfile != NULL )
LEAF_NODE	4385:8	4385:8	11	(
FIELD	4385:9	4385:9	11	dumpfile
LEAF_NODE	4385:9	4385:9	12	dumpfile
EQ_OPERATOR	4385:18	4385:18	11	!=
LEAF_NODE	4385:18	4385:18	12	!=
FIELD	4385:21	4385:21	11	NULL
LEAF_NODE	4385:21	4385:21	12	NULL
LEAF_NODE	4385:25	4385:25	11	)
LEAF_NODE	4385:27	4385:27	10	&&
EXPR	4385:30	4385:41	10	( level >= 2 )
LEAF_NODE	4385:30	4385:30	11	(
FIELD	4385:31	4385:31	11	level
LEAF_NODE	4385:31	4385:31	12	level
REL_OPERATOR	4385:37	4385:37	11	>=
LEAF_NODE	4385:37	4385:37	12	>=
FIELD	4385:40	4385:40	11	2
LEAF_NODE	4385:40	4385:40	12	2
LEAF_NODE	4385:41	4385:41	11	)
LEAF_NODE	4385:42	4385:42	7	)
STATEMENTS	4386:6	4389:6	7	
LEAF_NODE	4386:6	4386:6	8	{
STATEMENTS	4387:6	4388:6	8	
EXPR_STATEMENT	4387:6	4387:83	9	dump_info ( dumpfile , format , "combineSeparateTileSamples8bits" , "Output data" ) ;
EXPR	4387:6	4387:6	10	dump_info ( dumpfile , format , "combineSeparateTileSamples8bits" , "Output data" )
FUNCTION_CALL	4387:6	4387:82	11	dump_info ( dumpfile , format , "combineSeparateTileSamples8bits" , "Output data" )
CALLEE	4387:6	4387:6	12	dump_info
LEAF_NODE	4387:6	4387:6	13	dump_info
LEAF_NODE	4387:16	4387:16	12	(
ARGUMENT	4387:17	4387:17	12	dumpfile
FIELD	4387:17	4387:17	13	dumpfile
LEAF_NODE	4387:17	4387:17	14	dumpfile
LEAF_NODE	4387:25	4387:25	12	,
ARGUMENT	4387:27	4387:27	12	format
FIELD	4387:27	4387:27	13	format
LEAF_NODE	4387:27	4387:27	14	format
LEAF_NODE	4387:33	4387:33	12	,
ARGUMENT	4387:35	4387:35	12	"combineSeparateTileSamples8bits"
FIELD	4387:35	4387:35	13	"combineSeparateTileSamples8bits"
LEAF_NODE	4387:35	4387:35	14	"combineSeparateTileSamples8bits"
LEAF_NODE	4387:68	4387:68	12	,
ARGUMENT	4387:69	4387:69	12	"Output data"
FIELD	4387:69	4387:69	13	"Output data"
LEAF_NODE	4387:69	4387:69	14	"Output data"
LEAF_NODE	4387:82	4387:82	12	)
LEAF_NODE	4387:83	4387:83	10	;
EXPR_STATEMENT	4388:6	4388:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	4388:6	4388:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	4388:6	4388:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	4388:6	4388:6	12	dump_buffer
LEAF_NODE	4388:6	4388:6	13	dump_buffer
LEAF_NODE	4388:17	4388:17	12	(
ARGUMENT	4388:18	4388:18	12	dumpfile
FIELD	4388:18	4388:18	13	dumpfile
LEAF_NODE	4388:18	4388:18	14	dumpfile
LEAF_NODE	4388:26	4388:26	12	,
ARGUMENT	4388:28	4388:28	12	format
FIELD	4388:28	4388:28	13	format
LEAF_NODE	4388:28	4388:28	14	format
LEAF_NODE	4388:34	4388:34	12	,
ARGUMENT	4388:36	4388:36	12	1
FIELD	4388:36	4388:36	13	1
LEAF_NODE	4388:36	4388:36	14	1
LEAF_NODE	4388:37	4388:37	12	,
ARGUMENT	4388:39	4388:39	12	dst_rowsize
FIELD	4388:39	4388:39	13	dst_rowsize
LEAF_NODE	4388:39	4388:39	14	dst_rowsize
LEAF_NODE	4388:50	4388:50	12	,
ARGUMENT	4388:52	4388:52	12	row
FIELD	4388:52	4388:52	13	row
LEAF_NODE	4388:52	4388:52	14	row
LEAF_NODE	4388:55	4388:55	12	,
ARGUMENT	4388:57	4388:81	12	out + ( row * dst_rowsize )
FIELD	4388:57	4388:57	13	out
LEAF_NODE	4388:57	4388:57	14	out
LEAF_NODE	4388:61	4388:61	13	+
LEAF_NODE	4388:63	4388:63	13	(
FIELD	4388:64	4388:64	13	row
LEAF_NODE	4388:64	4388:64	14	row
LEAF_NODE	4388:68	4388:68	13	*
FIELD	4388:70	4388:70	13	dst_rowsize
LEAF_NODE	4388:70	4388:70	14	dst_rowsize
LEAF_NODE	4388:81	4388:81	13	)
LEAF_NODE	4388:82	4388:82	12	)
LEAF_NODE	4388:83	4388:83	10	;
LEAF_NODE	4389:6	4389:6	8	}
LEAF_NODE	4390:4	4390:4	5	}
JUMP_STATEMENT	4392:2	4392:12	3	return ( 0 ) ;
KEYWORD	4392:2	4392:2	4	return
LEAF_NODE	4392:2	4392:2	5	return
DESTINATION	4392:9	4392:9	4	( 0 )
EXPR	4392:9	4392:11	5	( 0 )
LEAF_NODE	4392:9	4392:9	6	(
FIELD	4392:10	4392:10	6	0
LEAF_NODE	4392:10	4392:10	7	0
LEAF_NODE	4392:11	4392:11	6	)
LEAF_NODE	4392:12	4392:12	4	;
LEAF_NODE	4393:2	4393:2	2	}
FUNCTION_DEF	4395:0	4502:2	1	
RETURN_TYPE	4395:0	4395:7	2	static int
LEAF_NODE	4395:0	4395:0	3	static
TYPE_NAME	4395:7	4395:7	3	int
LEAF_NODE	4395:7	4395:7	4	int
FUNCTION_NAME	4396:0	4396:0	2	combineSeparateTileSamples16bits
LEAF_NODE	4396:0	4396:0	3	combineSeparateTileSamples16bits
PARAMETER_LIST	4396:33	4399:65	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint32 imagewidth , uint32 tw , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	4396:33	4396:33	3	(
PARAMETER_DECL	4396:34	4396:41	3	uint8 * [ ] in
TYPE	4396:34	4396:43	4	uint8 * [ ]
TYPE_NAME	4396:34	4396:34	5	uint8
LEAF_NODE	4396:34	4396:34	6	uint8
POINTER	4396:40	4396:40	5	*
LEAF_NODE	4396:40	4396:40	6	*
TYPE_SUFFIX	4396:43	4396:44	5	[ ]
LEAF_NODE	4396:43	4396:43	6	[
LEAF_NODE	4396:44	4396:44	6	]
NAME	4396:41	4396:41	4	in
LEAF_NODE	4396:41	4396:41	5	in
LEAF_NODE	4396:45	4396:45	3	,
PARAMETER_DECL	4396:47	4396:54	3	uint8 * out
TYPE	4396:47	4396:53	4	uint8 *
TYPE_NAME	4396:47	4396:47	5	uint8
LEAF_NODE	4396:47	4396:47	6	uint8
POINTER	4396:53	4396:53	5	*
LEAF_NODE	4396:53	4396:53	6	*
NAME	4396:54	4396:54	4	out
LEAF_NODE	4396:54	4396:54	5	out
LEAF_NODE	4396:57	4396:57	3	,
PARAMETER_DECL	4396:59	4396:66	3	uint32 cols
TYPE	4396:59	4396:59	4	uint32
TYPE_NAME	4396:59	4396:59	5	uint32
LEAF_NODE	4396:59	4396:59	6	uint32
NAME	4396:66	4396:66	4	cols
LEAF_NODE	4396:66	4396:66	5	cols
LEAF_NODE	4396:70	4396:70	3	,
PARAMETER_DECL	4397:34	4397:41	3	uint32 rows
TYPE	4397:34	4397:34	4	uint32
TYPE_NAME	4397:34	4397:34	5	uint32
LEAF_NODE	4397:34	4397:34	6	uint32
NAME	4397:41	4397:41	4	rows
LEAF_NODE	4397:41	4397:41	5	rows
LEAF_NODE	4397:45	4397:45	3	,
PARAMETER_DECL	4397:47	4397:54	3	uint32 imagewidth
TYPE	4397:47	4397:47	4	uint32
TYPE_NAME	4397:47	4397:47	5	uint32
LEAF_NODE	4397:47	4397:47	6	uint32
NAME	4397:54	4397:54	4	imagewidth
LEAF_NODE	4397:54	4397:54	5	imagewidth
LEAF_NODE	4397:64	4397:64	3	,
PARAMETER_DECL	4398:34	4398:41	3	uint32 tw
TYPE	4398:34	4398:34	4	uint32
TYPE_NAME	4398:34	4398:34	5	uint32
LEAF_NODE	4398:34	4398:34	6	uint32
NAME	4398:41	4398:41	4	tw
LEAF_NODE	4398:41	4398:41	5	tw
LEAF_NODE	4398:43	4398:43	3	,
PARAMETER_DECL	4398:45	4398:52	3	uint16 spp
TYPE	4398:45	4398:45	4	uint16
TYPE_NAME	4398:45	4398:45	5	uint16
LEAF_NODE	4398:45	4398:45	6	uint16
NAME	4398:52	4398:52	4	spp
LEAF_NODE	4398:52	4398:52	5	spp
LEAF_NODE	4398:55	4398:55	3	,
PARAMETER_DECL	4398:57	4398:64	3	uint16 bps
TYPE	4398:57	4398:57	4	uint16
TYPE_NAME	4398:57	4398:57	5	uint16
LEAF_NODE	4398:57	4398:57	6	uint16
NAME	4398:64	4398:64	4	bps
LEAF_NODE	4398:64	4398:64	5	bps
LEAF_NODE	4398:67	4398:67	3	,
PARAMETER_DECL	4399:28	4399:34	3	FILE * dumpfile
TYPE	4399:28	4399:33	4	FILE *
TYPE_NAME	4399:28	4399:28	5	FILE
LEAF_NODE	4399:28	4399:28	6	FILE
POINTER	4399:33	4399:33	5	*
LEAF_NODE	4399:33	4399:33	6	*
NAME	4399:34	4399:34	4	dumpfile
LEAF_NODE	4399:34	4399:34	5	dumpfile
LEAF_NODE	4399:42	4399:42	3	,
PARAMETER_DECL	4399:44	4399:48	3	int format
TYPE	4399:44	4399:44	4	int
TYPE_NAME	4399:44	4399:44	5	int
LEAF_NODE	4399:44	4399:44	6	int
NAME	4399:48	4399:48	4	format
LEAF_NODE	4399:48	4399:48	5	format
LEAF_NODE	4399:54	4399:54	3	,
PARAMETER_DECL	4399:56	4399:60	3	int level
TYPE	4399:56	4399:56	4	int
TYPE_NAME	4399:56	4399:56	5	int
LEAF_NODE	4399:56	4399:56	6	int
NAME	4399:60	4399:60	4	level
LEAF_NODE	4399:60	4399:60	5	level
LEAF_NODE	4399:65	4399:65	3	)
LEAF_NODE	4400:2	4400:2	2	{
STATEMENTS	4401:2	4501:2	2	
SIMPLE_DECL	4401:2	4401:23	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	4401:2	4401:9	4	int ready_bits ; ready_bits = 0
TYPE	4401:2	4401:2	5	int
TYPE_NAME	4401:2	4401:2	6	int
LEAF_NODE	4401:2	4401:2	7	int
NAME	4401:9	4401:9	5	ready_bits
LEAF_NODE	4401:9	4401:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	4401:9	4401:9	5	ready_bits = 0
ASSIGN	4401:9	4401:22	6	ready_bits = 0
LVAL	4401:9	4401:9	7	ready_bits
NAME	4401:9	4401:9	8	ready_bits
LEAF_NODE	4401:9	4401:9	9	ready_bits
ASSIGN_OP	4401:20	4401:20	7	=
LEAF_NODE	4401:20	4401:20	8	=
RVAL	4401:22	4401:22	7	0
FIELD	4401:22	4401:22	8	0
LEAF_NODE	4401:22	4401:22	9	0
LEAF_NODE	4401:23	4401:23	4	;
SIMPLE_DECL	4402:2	4402:33	3	uint32 src_rowsize , uint32 dst_rowsize ;
INIT_DECL_LIST	4402:2	4402:2	4	uint32 src_rowsize , uint32 dst_rowsize
VAR_DECL	4402:2	4402:9	5	uint32 src_rowsize
TYPE	4402:2	4402:2	6	uint32
TYPE_NAME	4402:2	4402:2	7	uint32
LEAF_NODE	4402:2	4402:2	8	uint32
NAME	4402:9	4402:9	6	src_rowsize
LEAF_NODE	4402:9	4402:9	7	src_rowsize
LEAF_NODE	4402:20	4402:20	5	,
VAR_DECL	4402:2	4402:22	5	uint32 dst_rowsize
TYPE	4402:2	4402:2	6	uint32
TYPE_NAME	4402:2	4402:2	7	uint32
LEAF_NODE	4402:2	4402:2	8	uint32
NAME	4402:22	4402:22	6	dst_rowsize
LEAF_NODE	4402:22	4402:22	7	dst_rowsize
LEAF_NODE	4402:33	4402:33	4	;
SIMPLE_DECL	4403:2	4403:31	3	uint32 bit_offset , uint32 src_offset ;
INIT_DECL_LIST	4403:2	4403:2	4	uint32 bit_offset , uint32 src_offset
VAR_DECL	4403:2	4403:9	5	uint32 bit_offset
TYPE	4403:2	4403:2	6	uint32
TYPE_NAME	4403:2	4403:2	7	uint32
LEAF_NODE	4403:2	4403:2	8	uint32
NAME	4403:9	4403:9	6	bit_offset
LEAF_NODE	4403:9	4403:9	7	bit_offset
LEAF_NODE	4403:19	4403:19	5	,
VAR_DECL	4403:2	4403:21	5	uint32 src_offset
TYPE	4403:2	4403:2	6	uint32
TYPE_NAME	4403:2	4403:2	7	uint32
LEAF_NODE	4403:2	4403:2	8	uint32
NAME	4403:21	4403:21	6	src_offset
LEAF_NODE	4403:21	4403:21	7	src_offset
LEAF_NODE	4403:31	4403:31	4	;
SIMPLE_DECL	4404:2	4404:44	3	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	4404:2	4404:2	4	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4404:2	4404:9	5	uint32 row
TYPE	4404:2	4404:2	6	uint32
TYPE_NAME	4404:2	4404:2	7	uint32
LEAF_NODE	4404:2	4404:2	8	uint32
NAME	4404:9	4404:9	6	row
LEAF_NODE	4404:9	4404:9	7	row
LEAF_NODE	4404:12	4404:12	5	,
INIT_DECL_LIST	4404:2	4404:2	5	uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4404:2	4404:14	6	uint32 col
TYPE	4404:2	4404:2	7	uint32
TYPE_NAME	4404:2	4404:2	8	uint32
LEAF_NODE	4404:2	4404:2	9	uint32
NAME	4404:14	4404:14	7	col
LEAF_NODE	4404:14	4404:14	8	col
LEAF_NODE	4404:17	4404:17	6	,
INIT_DECL_LIST	4404:2	4404:2	6	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4404:2	4404:19	7	uint32 src_byte ; src_byte = 0
TYPE	4404:2	4404:2	8	uint32
TYPE_NAME	4404:2	4404:2	9	uint32
LEAF_NODE	4404:2	4404:2	10	uint32
NAME	4404:19	4404:19	8	src_byte
LEAF_NODE	4404:19	4404:19	9	src_byte
LEAF_NODE	0:0	0:0	8	;
INIT	4404:19	4404:19	8	src_byte = 0
ASSIGN	4404:19	4404:30	9	src_byte = 0
LVAL	4404:19	4404:19	10	src_byte
NAME	4404:19	4404:19	11	src_byte
LEAF_NODE	4404:19	4404:19	12	src_byte
ASSIGN_OP	4404:28	4404:28	10	=
LEAF_NODE	4404:28	4404:28	11	=
RVAL	4404:30	4404:30	10	0
FIELD	4404:30	4404:30	11	0
LEAF_NODE	4404:30	4404:30	12	0
LEAF_NODE	4404:31	4404:31	7	,
VAR_DECL	4404:2	4404:33	7	uint32 src_bit ; src_bit = 0
TYPE	4404:2	4404:2	8	uint32
TYPE_NAME	4404:2	4404:2	9	uint32
LEAF_NODE	4404:2	4404:2	10	uint32
NAME	4404:33	4404:33	8	src_bit
LEAF_NODE	4404:33	4404:33	9	src_bit
LEAF_NODE	0:0	0:0	8	;
INIT	4404:33	4404:33	8	src_bit = 0
ASSIGN	4404:33	4404:43	9	src_bit = 0
LVAL	4404:33	4404:33	10	src_bit
NAME	4404:33	4404:33	11	src_bit
LEAF_NODE	4404:33	4404:33	12	src_bit
ASSIGN_OP	4404:41	4404:41	10	=
LEAF_NODE	4404:41	4404:41	11	=
RVAL	4404:43	4404:43	10	0
FIELD	4404:43	4404:43	11	0
LEAF_NODE	4404:43	4404:43	12	0
LEAF_NODE	4404:44	4404:44	4	;
SIMPLE_DECL	4405:2	4405:36	3	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	4405:2	4405:2	4	uint16 maskbits ; maskbits = 0 , uint16 matchbits ; matchbits = 0
VAR_DECL	4405:2	4405:9	5	uint16 maskbits ; maskbits = 0
TYPE	4405:2	4405:2	6	uint16
TYPE_NAME	4405:2	4405:2	7	uint16
LEAF_NODE	4405:2	4405:2	8	uint16
NAME	4405:9	4405:9	6	maskbits
LEAF_NODE	4405:9	4405:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	4405:9	4405:9	6	maskbits = 0
ASSIGN	4405:9	4405:20	7	maskbits = 0
LVAL	4405:9	4405:9	8	maskbits
NAME	4405:9	4405:9	9	maskbits
LEAF_NODE	4405:9	4405:9	10	maskbits
ASSIGN_OP	4405:18	4405:18	8	=
LEAF_NODE	4405:18	4405:18	9	=
RVAL	4405:20	4405:20	8	0
FIELD	4405:20	4405:20	9	0
LEAF_NODE	4405:20	4405:20	10	0
LEAF_NODE	4405:21	4405:21	5	,
VAR_DECL	4405:2	4405:23	5	uint16 matchbits ; matchbits = 0
TYPE	4405:2	4405:2	6	uint16
TYPE_NAME	4405:2	4405:2	7	uint16
LEAF_NODE	4405:2	4405:2	8	uint16
NAME	4405:23	4405:23	6	matchbits
LEAF_NODE	4405:23	4405:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	4405:23	4405:23	6	matchbits = 0
ASSIGN	4405:23	4405:35	7	matchbits = 0
LVAL	4405:23	4405:23	8	matchbits
NAME	4405:23	4405:23	9	matchbits
LEAF_NODE	4405:23	4405:23	10	matchbits
ASSIGN_OP	4405:33	4405:33	8	=
LEAF_NODE	4405:33	4405:33	9	=
RVAL	4405:35	4405:35	8	0
FIELD	4405:35	4405:35	9	0
LEAF_NODE	4405:35	4405:35	10	0
LEAF_NODE	4405:36	4405:36	4	;
SIMPLE_DECL	4406:2	4406:29	3	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	4406:2	4406:2	4	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0
VAR_DECL	4406:2	4406:9	5	uint16 buff1 ; buff1 = 0
TYPE	4406:2	4406:2	6	uint16
TYPE_NAME	4406:2	4406:2	7	uint16
LEAF_NODE	4406:2	4406:2	8	uint16
NAME	4406:9	4406:9	6	buff1
LEAF_NODE	4406:9	4406:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	4406:9	4406:9	6	buff1 = 0
ASSIGN	4406:9	4406:17	7	buff1 = 0
LVAL	4406:9	4406:9	8	buff1
NAME	4406:9	4406:9	9	buff1
LEAF_NODE	4406:9	4406:9	10	buff1
ASSIGN_OP	4406:15	4406:15	8	=
LEAF_NODE	4406:15	4406:15	9	=
RVAL	4406:17	4406:17	8	0
FIELD	4406:17	4406:17	9	0
LEAF_NODE	4406:17	4406:17	10	0
LEAF_NODE	4406:18	4406:18	5	,
VAR_DECL	4406:2	4406:20	5	uint16 buff2 ; buff2 = 0
TYPE	4406:2	4406:2	6	uint16
TYPE_NAME	4406:2	4406:2	7	uint16
LEAF_NODE	4406:2	4406:2	8	uint16
NAME	4406:20	4406:20	6	buff2
LEAF_NODE	4406:20	4406:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	4406:20	4406:20	6	buff2 = 0
ASSIGN	4406:20	4406:28	7	buff2 = 0
LVAL	4406:20	4406:20	8	buff2
NAME	4406:20	4406:20	9	buff2
LEAF_NODE	4406:20	4406:20	10	buff2
ASSIGN_OP	4406:26	4406:26	8	=
LEAF_NODE	4406:26	4406:26	9	=
RVAL	4406:28	4406:28	8	0
FIELD	4406:28	4406:28	9	0
LEAF_NODE	4406:28	4406:28	10	0
LEAF_NODE	4406:29	4406:29	4	;
SIMPLE_DECL	4407:2	4407:21	3	uint8 bytebuff ; bytebuff = 0 ;
VAR_DECL	4407:2	4407:9	4	uint8 bytebuff ; bytebuff = 0
TYPE	4407:2	4407:2	5	uint8
TYPE_NAME	4407:2	4407:2	6	uint8
LEAF_NODE	4407:2	4407:2	7	uint8
NAME	4407:9	4407:9	5	bytebuff
LEAF_NODE	4407:9	4407:9	6	bytebuff
LEAF_NODE	0:0	0:0	5	;
INIT	4407:9	4407:9	5	bytebuff = 0
ASSIGN	4407:9	4407:20	6	bytebuff = 0
LVAL	4407:9	4407:9	7	bytebuff
NAME	4407:9	4407:9	8	bytebuff
LEAF_NODE	4407:9	4407:9	9	bytebuff
ASSIGN_OP	4407:18	4407:18	7	=
LEAF_NODE	4407:18	4407:18	8	=
RVAL	4407:20	4407:20	7	0
FIELD	4407:20	4407:20	8	0
LEAF_NODE	4407:20	4407:20	9	0
LEAF_NODE	4407:21	4407:21	4	;
SIMPLE_DECL	4408:2	4408:13	3	tsample_t s ;
VAR_DECL	4408:2	4408:12	4	tsample_t s
TYPE	4408:2	4408:2	5	tsample_t
TYPE_NAME	4408:2	4408:2	6	tsample_t
LEAF_NODE	4408:2	4408:2	7	tsample_t
NAME	4408:12	4408:12	5	s
LEAF_NODE	4408:12	4408:12	6	s
LEAF_NODE	4408:13	4408:13	4	;
SIMPLE_DECL	4409:2	4409:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	4409:2	4409:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	4409:2	4409:16	5	unsigned char *
TYPE_NAME	4409:2	4409:11	6	unsigned char
LEAF_NODE	4409:2	4409:2	7	unsigned
LEAF_NODE	4409:11	4409:11	7	char
POINTER	4409:16	4409:16	6	*
LEAF_NODE	4409:16	4409:16	7	*
NAME	4409:17	4409:17	5	src
LEAF_NODE	4409:17	4409:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	4409:17	4409:17	5	src = in [ 0 ]
ASSIGN	4409:17	4409:23	6	src = in [ 0 ]
LVAL	4409:17	4409:17	7	src
NAME	4409:17	4409:17	8	src
LEAF_NODE	4409:17	4409:17	9	src
ASSIGN_OP	4409:21	4409:21	7	=
LEAF_NODE	4409:21	4409:21	8	=
RVAL	4409:23	4409:23	7	in [ 0 ]
FIELD	4409:23	4409:27	8	in [ 0 ]
LEAF_NODE	4409:23	4409:23	9	in
LEAF_NODE	4409:25	4409:25	9	[
EXPR	4409:26	4409:26	9	0
FIELD	4409:26	4409:26	10	0
LEAF_NODE	4409:26	4409:26	11	0
LEAF_NODE	4409:27	4409:27	9	]
LEAF_NODE	4409:28	4409:28	4	;
SIMPLE_DECL	4410:2	4410:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	4410:2	4410:17	4	unsigned char * dst ; dst = out
TYPE	4410:2	4410:16	5	unsigned char *
TYPE_NAME	4410:2	4410:11	6	unsigned char
LEAF_NODE	4410:2	4410:2	7	unsigned
LEAF_NODE	4410:11	4410:11	7	char
POINTER	4410:16	4410:16	6	*
LEAF_NODE	4410:16	4410:16	7	*
NAME	4410:17	4410:17	5	dst
LEAF_NODE	4410:17	4410:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	4410:17	4410:17	5	dst = out
ASSIGN	4410:17	4410:23	6	dst = out
LVAL	4410:17	4410:17	7	dst
NAME	4410:17	4410:17	8	dst
LEAF_NODE	4410:17	4410:17	9	dst
ASSIGN_OP	4410:21	4410:21	7	=
LEAF_NODE	4410:21	4410:21	8	=
RVAL	4410:23	4410:23	7	out
FIELD	4410:23	4410:23	8	out
LEAF_NODE	4410:23	4410:23	9	out
LEAF_NODE	4410:26	4410:26	4	;
SIMPLE_DECL	4411:2	4411:26	3	char [ 8 ] action ;
VAR_DECL	4411:2	4411:17	4	char [ 8 ] action
TYPE	4411:2	4411:23	5	char [ 8 ]
TYPE_NAME	4411:2	4411:2	6	char
LEAF_NODE	4411:2	4411:2	7	char
TYPE_SUFFIX	4411:23	4411:25	6	[ 8 ]
LEAF_NODE	4411:23	4411:23	7	[
FIELD	4411:24	4411:24	7	8
LEAF_NODE	4411:24	4411:24	8	8
LEAF_NODE	4411:25	4411:25	7	]
NAME	4411:17	4411:17	5	action
LEAF_NODE	4411:17	4411:17	6	action
LEAF_NODE	4411:26	4411:26	4	;
SELECTION	4413:2	4414:4	3	
KEYWORD	4413:2	4413:2	4	if
LEAF_NODE	4413:2	4413:2	5	if
LEAF_NODE	4413:5	4413:5	4	(
CONDITION	4413:6	4413:6	4	( src == NULL ) || ( dst == NULL )
EXPR	4413:6	4413:6	5	( src == NULL ) || ( dst == NULL )
OR	4413:6	4413:23	6	( src == NULL ) || ( dst == NULL )
EXPR	4413:6	4413:18	7	( src == NULL )
LEAF_NODE	4413:6	4413:6	8	(
FIELD	4413:7	4413:7	8	src
LEAF_NODE	4413:7	4413:7	9	src
EQ_OPERATOR	4413:11	4413:11	8	==
LEAF_NODE	4413:11	4413:11	9	==
FIELD	4413:14	4413:14	8	NULL
LEAF_NODE	4413:14	4413:14	9	NULL
LEAF_NODE	4413:18	4413:18	8	)
LEAF_NODE	4413:20	4413:20	7	||
EXPR	4413:23	4413:35	7	( dst == NULL )
LEAF_NODE	4413:23	4413:23	8	(
FIELD	4413:24	4413:24	8	dst
LEAF_NODE	4413:24	4413:24	9	dst
EQ_OPERATOR	4413:28	4413:28	8	==
LEAF_NODE	4413:28	4413:28	9	==
FIELD	4413:31	4413:31	8	NULL
LEAF_NODE	4413:31	4413:31	9	NULL
LEAF_NODE	4413:35	4413:35	8	)
LEAF_NODE	4413:36	4413:36	4	)
STATEMENTS	4414:4	4417:4	4	
LEAF_NODE	4414:4	4414:4	5	{
STATEMENTS	4415:4	4416:4	5	
EXPR_STATEMENT	4415:4	4415:82	6	TIFFError ( "combineSeparateTileSamples16bits" , "Invalid input or output buffer" ) ;
EXPR	4415:4	4415:4	7	TIFFError ( "combineSeparateTileSamples16bits" , "Invalid input or output buffer" )
FUNCTION_CALL	4415:4	4415:81	8	TIFFError ( "combineSeparateTileSamples16bits" , "Invalid input or output buffer" )
CALLEE	4415:4	4415:4	9	TIFFError
LEAF_NODE	4415:4	4415:4	10	TIFFError
LEAF_NODE	4415:13	4415:13	9	(
ARGUMENT	4415:14	4415:14	9	"combineSeparateTileSamples16bits"
FIELD	4415:14	4415:14	10	"combineSeparateTileSamples16bits"
LEAF_NODE	4415:14	4415:14	11	"combineSeparateTileSamples16bits"
LEAF_NODE	4415:48	4415:48	9	,
ARGUMENT	4415:49	4415:49	9	"Invalid input or output buffer"
FIELD	4415:49	4415:49	10	"Invalid input or output buffer"
LEAF_NODE	4415:49	4415:49	11	"Invalid input or output buffer"
LEAF_NODE	4415:81	4415:81	9	)
LEAF_NODE	4415:82	4415:82	7	;
JUMP_STATEMENT	4416:4	4416:14	6	return ( 1 ) ;
KEYWORD	4416:4	4416:4	7	return
LEAF_NODE	4416:4	4416:4	8	return
DESTINATION	4416:11	4416:11	7	( 1 )
EXPR	4416:11	4416:13	8	( 1 )
LEAF_NODE	4416:11	4416:11	9	(
FIELD	4416:12	4416:12	9	1
LEAF_NODE	4416:12	4416:12	10	1
LEAF_NODE	4416:13	4416:13	9	)
LEAF_NODE	4416:14	4416:14	7	;
LEAF_NODE	4417:4	4417:4	5	}
EXPR_STATEMENT	4419:2	4419:36	3	src_rowsize = ( ( bps * tw ) + 7 ) / 8 ;
EXPR	4419:2	4419:2	4	src_rowsize = ( ( bps * tw ) + 7 ) / 8
ASSIGN	4419:2	4419:16	5	src_rowsize = ( ( bps * tw ) + 7 ) / 8
LVAL	4419:2	4419:2	6	src_rowsize
FIELD	4419:2	4419:2	7	src_rowsize
LEAF_NODE	4419:2	4419:2	8	src_rowsize
ASSIGN_OP	4419:14	4419:14	6	=
LEAF_NODE	4419:14	4419:14	7	=
RVAL	4419:16	4419:35	6	( ( bps * tw ) + 7 ) / 8
LEAF_NODE	4419:16	4419:16	7	(
LEAF_NODE	4419:17	4419:17	7	(
FIELD	4419:18	4419:18	7	bps
LEAF_NODE	4419:18	4419:18	8	bps
LEAF_NODE	4419:22	4419:22	7	*
FIELD	4419:24	4419:24	7	tw
LEAF_NODE	4419:24	4419:24	8	tw
LEAF_NODE	4419:26	4419:26	7	)
LEAF_NODE	4419:28	4419:28	7	+
FIELD	4419:30	4419:30	7	7
LEAF_NODE	4419:30	4419:30	8	7
LEAF_NODE	4419:31	4419:31	7	)
LEAF_NODE	4419:33	4419:33	7	/
FIELD	4419:35	4419:35	7	8
LEAF_NODE	4419:35	4419:35	8	8
LEAF_NODE	4419:36	4419:36	4	;
LEAF_NODE	4420:2	4420:2	3	dst_rowsize
LEAF_NODE	4420:14	4420:14	3	=
LEAF_NODE	4420:16	4420:16	3	(
LEAF_NODE	4420:17	4420:17	3	(
LEAF_NODE	4420:18	4420:18	3	imagewidth
LEAF_NODE	4420:29	4420:29	3	*
LEAF_NODE	4420:31	4420:31	3	bps
LEAF_NODE	4420:35	4420:35	3	*
LEAF_NODE	4420:37	4420:37	3	spp
LEAF_NODE	4420:40	4420:40	3	)
LEAF_NODE	4420:42	4420:42	3	+
LEAF_NODE	4420:44	4420:44	3	7
LEAF_NODE	4420:45	4420:45	3	)
LEAF_NODE	4420:47	4420:47	3	/
EXPR_STATEMENT	4420:49	4420:50	3	8 ;
EXPR	4420:49	4420:49	4	8
FIELD	4420:49	4420:49	5	8
LEAF_NODE	4420:49	4420:49	6	8
LEAF_NODE	4420:50	4420:50	4	;
EXPR_STATEMENT	4421:2	4421:37	3	maskbits = ( uint16 ) - 1 >> ( 16 - bps ) ;
EXPR	4421:2	4421:2	4	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
ASSIGN	4421:2	4421:13	5	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
LVAL	4421:2	4421:2	6	maskbits
FIELD	4421:2	4421:2	7	maskbits
LEAF_NODE	4421:2	4421:2	8	maskbits
ASSIGN_OP	4421:11	4421:11	6	=
LEAF_NODE	4421:11	4421:11	7	=
RVAL	4421:13	4421:36	6	( uint16 ) - 1 >> ( 16 - bps )
LEAF_NODE	4421:13	4421:13	7	(
TYPE_NAME	4421:14	4421:14	7	uint16
LEAF_NODE	4421:14	4421:14	8	uint16
LEAF_NODE	4421:20	4421:20	7	)
UNARY_EXPR	4421:21	4421:22	7	- 1
UNARY_OPERATOR	4421:21	4421:21	8	-
LEAF_NODE	4421:21	4421:21	9	-
FIELD	4421:22	4421:22	8	1
LEAF_NODE	4421:22	4421:22	9	1
LEAF_NODE	4421:24	4421:24	7	>>
LEAF_NODE	4421:27	4421:27	7	(
FIELD	4421:28	4421:28	7	16
LEAF_NODE	4421:28	4421:28	8	16
LEAF_NODE	4421:31	4421:31	7	-
FIELD	4421:33	4421:33	7	bps
LEAF_NODE	4421:33	4421:33	8	bps
LEAF_NODE	4421:36	4421:36	7	)
LEAF_NODE	4421:37	4421:37	4	;
ITERATION	4423:2	4424:4	3	
KEYWORD	4423:2	4423:2	4	for
LEAF_NODE	4423:2	4423:2	5	for
LEAF_NODE	4423:6	4423:6	4	(
FOR_INIT	4423:7	4423:14	4	row = 0 ;
EXPR	4423:7	4423:7	5	row = 0
ASSIGN	4423:7	4423:13	6	row = 0
LVAL	4423:7	4423:7	7	row
FIELD	4423:7	4423:7	8	row
LEAF_NODE	4423:7	4423:7	9	row
ASSIGN_OP	4423:11	4423:11	7	=
LEAF_NODE	4423:11	4423:11	8	=
RVAL	4423:13	4423:13	7	0
FIELD	4423:13	4423:13	8	0
LEAF_NODE	4423:13	4423:13	9	0
LEAF_NODE	4423:14	4423:14	5	;
CONDITION	4423:16	4423:16	4	row < rows
EXPR	4423:16	4423:22	5	row < rows
FIELD	4423:16	4423:16	6	row
LEAF_NODE	4423:16	4423:16	7	row
REL_OPERATOR	4423:20	4423:20	6	<
LEAF_NODE	4423:20	4423:20	7	<
FIELD	4423:22	4423:22	6	rows
LEAF_NODE	4423:22	4423:22	7	rows
LEAF_NODE	4423:26	4423:26	4	;
FOR_EXPR	4423:28	4423:28	4	row ++
EXPR	4423:28	4423:28	5	row ++
FIELD	4423:28	4423:31	6	row ++
LEAF_NODE	4423:28	4423:28	7	row
LEAF_NODE	4423:31	4423:31	7	++
LEAF_NODE	4423:33	4423:33	4	)
STATEMENTS	4424:4	4499:4	4	
LEAF_NODE	4424:4	4424:4	5	{
STATEMENTS	4425:4	4494:4	5	
EXPR_STATEMENT	4425:4	4425:18	6	ready_bits = 0 ;
EXPR	4425:4	4425:4	7	ready_bits = 0
ASSIGN	4425:4	4425:17	8	ready_bits = 0
LVAL	4425:4	4425:4	9	ready_bits
FIELD	4425:4	4425:4	10	ready_bits
LEAF_NODE	4425:4	4425:4	11	ready_bits
ASSIGN_OP	4425:15	4425:15	9	=
LEAF_NODE	4425:15	4425:15	10	=
RVAL	4425:17	4425:17	9	0
FIELD	4425:17	4425:17	10	0
LEAF_NODE	4425:17	4425:17	11	0
LEAF_NODE	4425:18	4425:18	7	;
EXPR_STATEMENT	4426:4	4426:21	6	buff1 = buff2 = 0 ;
EXPR	4426:4	4426:4	7	buff1 = buff2 = 0
ASSIGN	4426:4	4426:12	8	buff1 = buff2 = 0
LVAL	4426:4	4426:4	9	buff1
FIELD	4426:4	4426:4	10	buff1
LEAF_NODE	4426:4	4426:4	11	buff1
ASSIGN_OP	4426:10	4426:10	9	=
LEAF_NODE	4426:10	4426:10	10	=
RVAL	4426:12	4426:12	9	buff2 = 0
ASSIGN	4426:12	4426:20	10	buff2 = 0
LVAL	4426:12	4426:12	11	buff2
FIELD	4426:12	4426:12	12	buff2
LEAF_NODE	4426:12	4426:12	13	buff2
ASSIGN_OP	4426:18	4426:18	11	=
LEAF_NODE	4426:18	4426:18	12	=
RVAL	4426:20	4426:20	11	0
FIELD	4426:20	4426:20	12	0
LEAF_NODE	4426:20	4426:20	13	0
LEAF_NODE	4426:21	4426:21	7	;
EXPR_STATEMENT	4427:4	4427:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	4427:4	4427:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	4427:4	4427:10	8	dst = out + ( row * dst_rowsize )
LVAL	4427:4	4427:4	9	dst
FIELD	4427:4	4427:4	10	dst
LEAF_NODE	4427:4	4427:4	11	dst
ASSIGN_OP	4427:8	4427:8	9	=
LEAF_NODE	4427:8	4427:8	10	=
RVAL	4427:10	4427:34	9	out + ( row * dst_rowsize )
FIELD	4427:10	4427:10	10	out
LEAF_NODE	4427:10	4427:10	11	out
LEAF_NODE	4427:14	4427:14	10	+
LEAF_NODE	4427:16	4427:16	10	(
FIELD	4427:17	4427:17	10	row
LEAF_NODE	4427:17	4427:17	11	row
LEAF_NODE	4427:21	4427:21	10	*
FIELD	4427:23	4427:23	10	dst_rowsize
LEAF_NODE	4427:23	4427:23	11	dst_rowsize
LEAF_NODE	4427:34	4427:34	10	)
LEAF_NODE	4427:35	4427:35	7	;
EXPR_STATEMENT	4428:4	4428:34	6	src_offset = row * src_rowsize ;
EXPR	4428:4	4428:4	7	src_offset = row * src_rowsize
ASSIGN	4428:4	4428:17	8	src_offset = row * src_rowsize
LVAL	4428:4	4428:4	9	src_offset
FIELD	4428:4	4428:4	10	src_offset
LEAF_NODE	4428:4	4428:4	11	src_offset
ASSIGN_OP	4428:15	4428:15	9	=
LEAF_NODE	4428:15	4428:15	10	=
RVAL	4428:17	4428:23	9	row * src_rowsize
FIELD	4428:17	4428:17	10	row
LEAF_NODE	4428:17	4428:17	11	row
LEAF_NODE	4428:21	4428:21	10	*
FIELD	4428:23	4428:23	10	src_rowsize
LEAF_NODE	4428:23	4428:23	11	src_rowsize
LEAF_NODE	4428:34	4428:34	7	;
ITERATION	4429:4	4430:6	6	
KEYWORD	4429:4	4429:4	7	for
LEAF_NODE	4429:4	4429:4	8	for
LEAF_NODE	4429:8	4429:8	7	(
FOR_INIT	4429:9	4429:16	7	col = 0 ;
EXPR	4429:9	4429:9	8	col = 0
ASSIGN	4429:9	4429:15	9	col = 0
LVAL	4429:9	4429:9	10	col
FIELD	4429:9	4429:9	11	col
LEAF_NODE	4429:9	4429:9	12	col
ASSIGN_OP	4429:13	4429:13	10	=
LEAF_NODE	4429:13	4429:13	11	=
RVAL	4429:15	4429:15	10	0
FIELD	4429:15	4429:15	11	0
LEAF_NODE	4429:15	4429:15	12	0
LEAF_NODE	4429:16	4429:16	8	;
CONDITION	4429:18	4429:18	7	col < cols
EXPR	4429:18	4429:24	8	col < cols
FIELD	4429:18	4429:18	9	col
LEAF_NODE	4429:18	4429:18	10	col
REL_OPERATOR	4429:22	4429:22	9	<
LEAF_NODE	4429:22	4429:22	10	<
FIELD	4429:24	4429:24	9	cols
LEAF_NODE	4429:24	4429:24	10	cols
LEAF_NODE	4429:28	4429:28	7	;
FOR_EXPR	4429:30	4429:30	7	col ++
EXPR	4429:30	4429:30	8	col ++
FIELD	4429:30	4429:33	9	col ++
LEAF_NODE	4429:30	4429:30	10	col
LEAF_NODE	4429:33	4429:33	10	++
LEAF_NODE	4429:35	4429:35	7	)
STATEMENTS	4430:6	4478:6	7	
LEAF_NODE	4430:6	4430:6	8	{
STATEMENTS	4432:6	4437:6	8	
EXPR_STATEMENT	4432:6	4432:28	9	bit_offset = col * bps ;
EXPR	4432:6	4432:6	10	bit_offset = col * bps
ASSIGN	4432:6	4432:19	11	bit_offset = col * bps
LVAL	4432:6	4432:6	12	bit_offset
FIELD	4432:6	4432:6	13	bit_offset
LEAF_NODE	4432:6	4432:6	14	bit_offset
ASSIGN_OP	4432:17	4432:17	12	=
LEAF_NODE	4432:17	4432:17	13	=
RVAL	4432:19	4432:25	12	col * bps
FIELD	4432:19	4432:19	13	col
LEAF_NODE	4432:19	4432:19	14	col
LEAF_NODE	4432:23	4432:23	13	*
FIELD	4432:25	4432:25	13	bps
LEAF_NODE	4432:25	4432:25	14	bps
LEAF_NODE	4432:28	4432:28	10	;
EXPR_STATEMENT	4433:6	4433:31	9	src_byte = bit_offset / 8 ;
EXPR	4433:6	4433:6	10	src_byte = bit_offset / 8
ASSIGN	4433:6	4433:17	11	src_byte = bit_offset / 8
LVAL	4433:6	4433:6	12	src_byte
FIELD	4433:6	4433:6	13	src_byte
LEAF_NODE	4433:6	4433:6	14	src_byte
ASSIGN_OP	4433:15	4433:15	12	=
LEAF_NODE	4433:15	4433:15	13	=
RVAL	4433:17	4433:30	12	bit_offset / 8
FIELD	4433:17	4433:17	13	bit_offset
LEAF_NODE	4433:17	4433:17	14	bit_offset
LEAF_NODE	4433:28	4433:28	13	/
FIELD	4433:30	4433:30	13	8
LEAF_NODE	4433:30	4433:30	14	8
LEAF_NODE	4433:31	4433:31	10	;
EXPR_STATEMENT	4434:6	4434:31	9	src_bit = bit_offset % 8 ;
EXPR	4434:6	4434:6	10	src_bit = bit_offset % 8
ASSIGN	4434:6	4434:17	11	src_bit = bit_offset % 8
LVAL	4434:6	4434:6	12	src_bit
FIELD	4434:6	4434:6	13	src_bit
LEAF_NODE	4434:6	4434:6	14	src_bit
ASSIGN_OP	4434:15	4434:15	12	=
LEAF_NODE	4434:15	4434:15	13	=
RVAL	4434:17	4434:30	12	bit_offset % 8
FIELD	4434:17	4434:17	13	bit_offset
LEAF_NODE	4434:17	4434:17	14	bit_offset
LEAF_NODE	4434:28	4434:28	13	%
FIELD	4434:30	4434:30	13	8
LEAF_NODE	4434:30	4434:30	14	8
LEAF_NODE	4434:31	4434:31	10	;
EXPR_STATEMENT	4436:6	4436:50	9	matchbits = maskbits << ( 16 - src_bit - bps ) ;
EXPR	4436:6	4436:6	10	matchbits = maskbits << ( 16 - src_bit - bps )
ASSIGN	4436:6	4436:18	11	matchbits = maskbits << ( 16 - src_bit - bps )
LVAL	4436:6	4436:6	12	matchbits
FIELD	4436:6	4436:6	13	matchbits
LEAF_NODE	4436:6	4436:6	14	matchbits
ASSIGN_OP	4436:16	4436:16	12	=
LEAF_NODE	4436:16	4436:16	13	=
RVAL	4436:18	4436:49	12	maskbits << ( 16 - src_bit - bps )
FIELD	4436:18	4436:18	13	maskbits
LEAF_NODE	4436:18	4436:18	14	maskbits
LEAF_NODE	4436:27	4436:27	13	<<
LEAF_NODE	4436:30	4436:30	13	(
FIELD	4436:31	4436:31	13	16
LEAF_NODE	4436:31	4436:31	14	16
LEAF_NODE	4436:34	4436:34	13	-
FIELD	4436:36	4436:36	13	src_bit
LEAF_NODE	4436:36	4436:36	14	src_bit
LEAF_NODE	4436:44	4436:44	13	-
FIELD	4436:46	4436:46	13	bps
LEAF_NODE	4436:46	4436:46	14	bps
LEAF_NODE	4436:49	4436:49	13	)
LEAF_NODE	4436:50	4436:50	10	;
ITERATION	4437:6	4438:8	9	
KEYWORD	4437:6	4437:6	10	for
LEAF_NODE	4437:6	4437:6	11	for
LEAF_NODE	4437:10	4437:10	10	(
FOR_INIT	4437:11	4437:16	10	s = 0 ;
EXPR	4437:11	4437:11	11	s = 0
ASSIGN	4437:11	4437:15	12	s = 0
LVAL	4437:11	4437:11	13	s
FIELD	4437:11	4437:11	14	s
LEAF_NODE	4437:11	4437:11	15	s
ASSIGN_OP	4437:13	4437:13	13	=
LEAF_NODE	4437:13	4437:13	14	=
RVAL	4437:15	4437:15	13	0
FIELD	4437:15	4437:15	14	0
LEAF_NODE	4437:15	4437:15	15	0
LEAF_NODE	4437:16	4437:16	11	;
CONDITION	4437:18	4437:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4437:18	4437:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	4437:18	4437:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4437:18	4437:26	13	( s < spp )
LEAF_NODE	4437:18	4437:18	14	(
FIELD	4437:19	4437:19	14	s
LEAF_NODE	4437:19	4437:19	15	s
REL_OPERATOR	4437:21	4437:21	14	<
LEAF_NODE	4437:21	4437:21	15	<
FIELD	4437:23	4437:23	14	spp
LEAF_NODE	4437:23	4437:23	15	spp
LEAF_NODE	4437:26	4437:26	14	)
LEAF_NODE	4437:28	4437:28	13	&&
EXPR	4437:31	4437:47	13	( s < MAX_SAMPLES )
LEAF_NODE	4437:31	4437:31	14	(
FIELD	4437:32	4437:32	14	s
LEAF_NODE	4437:32	4437:32	15	s
REL_OPERATOR	4437:34	4437:34	14	<
LEAF_NODE	4437:34	4437:34	15	<
FIELD	4437:36	4437:36	14	MAX_SAMPLES
LEAF_NODE	4437:36	4437:36	15	MAX_SAMPLES
LEAF_NODE	4437:47	4437:47	14	)
LEAF_NODE	4437:48	4437:48	10	;
FOR_EXPR	4437:50	4437:50	10	s ++
EXPR	4437:50	4437:50	11	s ++
FIELD	4437:50	4437:51	12	s ++
LEAF_NODE	4437:50	4437:50	13	s
LEAF_NODE	4437:51	4437:51	13	++
LEAF_NODE	4437:53	4437:53	10	)
STATEMENTS	4438:8	4477:1	10	
LEAF_NODE	4438:8	4438:8	11	{
STATEMENTS	4439:1	4464:1	11	
EXPR_STATEMENT	4439:1	4439:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	4439:1	4439:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	4439:1	4439:7	14	src = in [ s ] + src_offset + src_byte
LVAL	4439:1	4439:1	15	src
FIELD	4439:1	4439:1	16	src
LEAF_NODE	4439:1	4439:1	17	src
ASSIGN_OP	4439:5	4439:5	15	=
LEAF_NODE	4439:5	4439:5	16	=
RVAL	4439:7	4439:28	15	in [ s ] + src_offset + src_byte
FIELD	4439:7	4439:11	16	in [ s ]
LEAF_NODE	4439:7	4439:7	17	in
LEAF_NODE	4439:9	4439:9	17	[
EXPR	4439:10	4439:10	17	s
FIELD	4439:10	4439:10	18	s
LEAF_NODE	4439:10	4439:10	19	s
LEAF_NODE	4439:11	4439:11	17	]
LEAF_NODE	4439:13	4439:13	16	+
FIELD	4439:15	4439:15	16	src_offset
LEAF_NODE	4439:15	4439:15	17	src_offset
LEAF_NODE	4439:26	4439:26	16	+
FIELD	4439:28	4439:28	16	src_byte
LEAF_NODE	4439:28	4439:28	17	src_byte
LEAF_NODE	4439:36	4439:36	13	;
SELECTION	4440:8	4441:10	12	
KEYWORD	4440:8	4440:8	13	if
LEAF_NODE	4440:8	4440:8	14	if
LEAF_NODE	4440:11	4440:11	13	(
CONDITION	4440:12	4440:12	13	little_endian
EXPR	4440:12	4440:12	14	little_endian
FIELD	4440:12	4440:12	15	little_endian
LEAF_NODE	4440:12	4440:12	16	little_endian
LEAF_NODE	4440:25	4440:25	13	)
STATEMENTS	4441:10	4441:10	13	
EXPR_STATEMENT	4441:10	4441:40	14	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ] ;
EXPR	4441:10	4441:10	15	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
ASSIGN	4441:10	4441:18	16	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
LVAL	4441:10	4441:10	17	buff1
FIELD	4441:10	4441:10	18	buff1
LEAF_NODE	4441:10	4441:10	19	buff1
ASSIGN_OP	4441:16	4441:16	17	=
LEAF_NODE	4441:16	4441:16	18	=
RVAL	4441:18	4441:18	17	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR	4441:18	4441:34	18	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR_ELEM	4441:18	4441:30	19	( src [ 0 ] << 8 )
LEAF_NODE	4441:18	4441:18	20	(
FIELD	4441:19	4441:24	20	src [ 0 ]
LEAF_NODE	4441:19	4441:19	21	src
LEAF_NODE	4441:22	4441:22	21	[
EXPR	4441:23	4441:23	21	0
FIELD	4441:23	4441:23	22	0
LEAF_NODE	4441:23	4441:23	23	0
LEAF_NODE	4441:24	4441:24	21	]
LEAF_NODE	4441:26	4441:26	20	<<
FIELD	4441:29	4441:29	20	8
LEAF_NODE	4441:29	4441:29	21	8
LEAF_NODE	4441:30	4441:30	20	)
LEAF_NODE	4441:32	4441:32	19	|
BIT_OR_ELEM	4441:34	4441:34	19	src [ 1 ]
FIELD	4441:34	4441:39	20	src [ 1 ]
LEAF_NODE	4441:34	4441:34	21	src
LEAF_NODE	4441:37	4441:37	21	[
EXPR	4441:38	4441:38	21	1
FIELD	4441:38	4441:38	22	1
LEAF_NODE	4441:38	4441:38	23	1
LEAF_NODE	4441:39	4441:39	21	]
LEAF_NODE	4441:40	4441:40	15	;
SELECTION	4442:8	4443:10	12	
KEYWORD	4442:8	4442:8	13	else
LEAF_NODE	4442:8	4442:8	14	else
STATEMENTS	4443:10	4443:10	13	
EXPR_STATEMENT	4443:10	4443:40	14	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	4443:10	4443:10	15	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	4443:10	4443:18	16	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	4443:10	4443:10	17	buff1
FIELD	4443:10	4443:10	18	buff1
LEAF_NODE	4443:10	4443:10	19	buff1
ASSIGN_OP	4443:16	4443:16	17	=
LEAF_NODE	4443:16	4443:16	18	=
RVAL	4443:18	4443:18	17	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4443:18	4443:34	18	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4443:18	4443:30	19	( src [ 1 ] << 8 )
LEAF_NODE	4443:18	4443:18	20	(
FIELD	4443:19	4443:24	20	src [ 1 ]
LEAF_NODE	4443:19	4443:19	21	src
LEAF_NODE	4443:22	4443:22	21	[
EXPR	4443:23	4443:23	21	1
FIELD	4443:23	4443:23	22	1
LEAF_NODE	4443:23	4443:23	23	1
LEAF_NODE	4443:24	4443:24	21	]
LEAF_NODE	4443:26	4443:26	20	<<
FIELD	4443:29	4443:29	20	8
LEAF_NODE	4443:29	4443:29	21	8
LEAF_NODE	4443:30	4443:30	20	)
LEAF_NODE	4443:32	4443:32	19	|
BIT_OR_ELEM	4443:34	4443:34	19	src [ 0 ]
FIELD	4443:34	4443:39	20	src [ 0 ]
LEAF_NODE	4443:34	4443:34	21	src
LEAF_NODE	4443:37	4443:37	21	[
EXPR	4443:38	4443:38	21	0
FIELD	4443:38	4443:38	22	0
LEAF_NODE	4443:38	4443:38	23	0
LEAF_NODE	4443:39	4443:39	21	]
LEAF_NODE	4443:40	4443:40	15	;
LEAF_NODE	4444:1	4444:1	12	buff1
LEAF_NODE	4444:7	4444:7	12	=
LEAF_NODE	4444:9	4444:9	12	(
LEAF_NODE	4444:10	4444:10	12	buff1
LEAF_NODE	4444:16	4444:16	12	&
LEAF_NODE	4444:18	4444:18	12	matchbits
LEAF_NODE	4444:27	4444:27	12	)
LEAF_NODE	4444:29	4444:29	12	<<
LEAF_NODE	4444:32	4444:32	12	(
LEAF_NODE	4444:33	4444:33	12	src_bit
LEAF_NODE	4444:40	4444:40	12	)
LEAF_NODE	4444:41	4444:41	12	;
SELECTION	4447:1	4448:3	12	
KEYWORD	4447:1	4447:1	13	if
LEAF_NODE	4447:1	4447:1	14	if
LEAF_NODE	4447:4	4447:4	13	(
CONDITION	4447:5	4447:5	13	ready_bits >= 8
EXPR	4447:5	4447:19	14	ready_bits >= 8
FIELD	4447:5	4447:5	15	ready_bits
LEAF_NODE	4447:5	4447:5	16	ready_bits
REL_OPERATOR	4447:16	4447:16	15	>=
LEAF_NODE	4447:16	4447:16	16	>=
FIELD	4447:19	4447:19	15	8
LEAF_NODE	4447:19	4447:19	16	8
LEAF_NODE	4447:20	4447:20	13	)
STATEMENTS	4448:3	4455:3	13	
LEAF_NODE	4448:3	4448:3	14	{
STATEMENTS	4449:5	4454:5	14	
EXPR_STATEMENT	4449:5	4449:28	15	bytebuff = ( buff2 >> 8 ) ;
EXPR	4449:5	4449:5	16	bytebuff = ( buff2 >> 8 )
ASSIGN	4449:5	4449:16	17	bytebuff = ( buff2 >> 8 )
LVAL	4449:5	4449:5	18	bytebuff
FIELD	4449:5	4449:5	19	bytebuff
LEAF_NODE	4449:5	4449:5	20	bytebuff
ASSIGN_OP	4449:14	4449:14	18	=
LEAF_NODE	4449:14	4449:14	19	=
RVAL	4449:16	4449:27	18	( buff2 >> 8 )
LEAF_NODE	4449:16	4449:16	19	(
FIELD	4449:17	4449:17	19	buff2
LEAF_NODE	4449:17	4449:17	20	buff2
LEAF_NODE	4449:23	4449:23	19	>>
FIELD	4449:26	4449:26	19	8
LEAF_NODE	4449:26	4449:26	20	8
LEAF_NODE	4449:27	4449:27	19	)
LEAF_NODE	4449:28	4449:28	16	;
EXPR_STATEMENT	4450:5	4450:22	15	* dst ++ = bytebuff ;
EXPR	4450:5	4450:5	16	* dst ++ = bytebuff
ASSIGN	4450:5	4450:14	17	* dst ++ = bytebuff
LVAL	4450:5	4450:5	18	* dst ++
UNARY_EXPR	4450:5	4450:6	19	* dst ++
UNARY_OPERATOR	4450:5	4450:5	20	*
LEAF_NODE	4450:5	4450:5	21	*
FIELD	4450:6	4450:9	20	dst ++
LEAF_NODE	4450:6	4450:6	21	dst
LEAF_NODE	4450:9	4450:9	21	++
ASSIGN_OP	4450:12	4450:12	18	=
LEAF_NODE	4450:12	4450:12	19	=
RVAL	4450:14	4450:14	18	bytebuff
FIELD	4450:14	4450:14	19	bytebuff
LEAF_NODE	4450:14	4450:14	20	bytebuff
LEAF_NODE	4450:22	4450:22	16	;
EXPR_STATEMENT	4451:5	4451:20	15	ready_bits -= 8 ;
EXPR	4451:5	4451:5	16	ready_bits -= 8
ASSIGN	4451:5	4451:19	17	ready_bits -= 8
LVAL	4451:5	4451:5	18	ready_bits
FIELD	4451:5	4451:5	19	ready_bits
LEAF_NODE	4451:5	4451:5	20	ready_bits
ASSIGN_OP	4451:16	4451:16	18	-=
LEAF_NODE	4451:16	4451:16	19	-=
RVAL	4451:19	4451:19	18	8
FIELD	4451:19	4451:19	19	8
LEAF_NODE	4451:19	4451:19	20	8
LEAF_NODE	4451:20	4451:20	16	;
EXPR_STATEMENT	4453:5	4453:51	15	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) ) ;
EXPR	4453:5	4453:5	16	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
ASSIGN	4453:5	4453:13	17	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LVAL	4453:5	4453:5	18	buff2
FIELD	4453:5	4453:5	19	buff2
LEAF_NODE	4453:5	4453:5	20	buff2
ASSIGN_OP	4453:11	4453:11	18	=
LEAF_NODE	4453:11	4453:11	19	=
RVAL	4453:13	4453:50	18	( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	4453:13	4453:13	19	(
BIT_OR	4453:14	4453:29	19	( buff2 << 8 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	4453:14	4453:25	20	( buff2 << 8 )
LEAF_NODE	4453:14	4453:14	21	(
FIELD	4453:15	4453:15	21	buff2
LEAF_NODE	4453:15	4453:15	22	buff2
LEAF_NODE	4453:21	4453:21	21	<<
FIELD	4453:24	4453:24	21	8
LEAF_NODE	4453:24	4453:24	22	8
LEAF_NODE	4453:25	4453:25	21	)
LEAF_NODE	4453:27	4453:27	20	|
BIT_OR_ELEM	4453:29	4453:49	20	( buff1 >> ready_bits )
LEAF_NODE	4453:29	4453:29	21	(
FIELD	4453:30	4453:30	21	buff1
LEAF_NODE	4453:30	4453:30	22	buff1
LEAF_NODE	4453:36	4453:36	21	>>
FIELD	4453:39	4453:39	21	ready_bits
LEAF_NODE	4453:39	4453:39	22	ready_bits
LEAF_NODE	4453:49	4453:49	21	)
LEAF_NODE	4453:50	4453:50	19	)
LEAF_NODE	4453:51	4453:51	16	;
EXPR_STATEMENT	4454:5	4454:29	15	strcpy ( action , "Flush" ) ;
EXPR	4454:5	4454:5	16	strcpy ( action , "Flush" )
FUNCTION_CALL	4454:5	4454:28	17	strcpy ( action , "Flush" )
CALLEE	4454:5	4454:5	18	strcpy
LEAF_NODE	4454:5	4454:5	19	strcpy
LEAF_NODE	4454:12	4454:12	18	(
ARGUMENT	4454:13	4454:13	18	action
FIELD	4454:13	4454:13	19	action
LEAF_NODE	4454:13	4454:13	20	action
LEAF_NODE	4454:19	4454:19	18	,
ARGUMENT	4454:21	4454:21	18	"Flush"
FIELD	4454:21	4454:21	19	"Flush"
LEAF_NODE	4454:21	4454:21	20	"Flush"
LEAF_NODE	4454:28	4454:28	18	)
LEAF_NODE	4454:29	4454:29	16	;
LEAF_NODE	4455:3	4455:3	14	}
SELECTION	4456:1	4457:3	12	
KEYWORD	4456:1	4456:1	13	else
LEAF_NODE	4456:1	4456:1	14	else
STATEMENTS	4457:3	4461:3	13	
LEAF_NODE	4457:3	4457:3	14	{
STATEMENTS	4458:5	4460:5	14	
EXPR_STATEMENT	4458:5	4458:17	15	bytebuff = 0 ;
EXPR	4458:5	4458:5	16	bytebuff = 0
ASSIGN	4458:5	4458:16	17	bytebuff = 0
LVAL	4458:5	4458:5	18	bytebuff
FIELD	4458:5	4458:5	19	bytebuff
LEAF_NODE	4458:5	4458:5	20	bytebuff
ASSIGN_OP	4458:14	4458:14	18	=
LEAF_NODE	4458:14	4458:14	19	=
RVAL	4458:16	4458:16	18	0
FIELD	4458:16	4458:16	19	0
LEAF_NODE	4458:16	4458:16	20	0
LEAF_NODE	4458:17	4458:17	16	;
EXPR_STATEMENT	4459:5	4459:44	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	4459:5	4459:5	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	4459:5	4459:13	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	4459:5	4459:5	18	buff2
FIELD	4459:5	4459:5	19	buff2
LEAF_NODE	4459:5	4459:5	20	buff2
ASSIGN_OP	4459:11	4459:11	18	=
LEAF_NODE	4459:11	4459:11	19	=
RVAL	4459:13	4459:43	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	4459:13	4459:13	19	(
BIT_OR	4459:14	4459:22	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	4459:14	4459:14	20	buff2
FIELD	4459:14	4459:14	21	buff2
LEAF_NODE	4459:14	4459:14	22	buff2
LEAF_NODE	4459:20	4459:20	20	|
BIT_OR_ELEM	4459:22	4459:42	20	( buff1 >> ready_bits )
LEAF_NODE	4459:22	4459:22	21	(
FIELD	4459:23	4459:23	21	buff1
LEAF_NODE	4459:23	4459:23	22	buff1
LEAF_NODE	4459:29	4459:29	21	>>
FIELD	4459:32	4459:32	21	ready_bits
LEAF_NODE	4459:32	4459:32	22	ready_bits
LEAF_NODE	4459:42	4459:42	21	)
LEAF_NODE	4459:43	4459:43	19	)
LEAF_NODE	4459:44	4459:44	16	;
EXPR_STATEMENT	4460:5	4460:30	15	strcpy ( action , "Update" ) ;
EXPR	4460:5	4460:5	16	strcpy ( action , "Update" )
FUNCTION_CALL	4460:5	4460:29	17	strcpy ( action , "Update" )
CALLEE	4460:5	4460:5	18	strcpy
LEAF_NODE	4460:5	4460:5	19	strcpy
LEAF_NODE	4460:12	4460:12	18	(
ARGUMENT	4460:13	4460:13	18	action
FIELD	4460:13	4460:13	19	action
LEAF_NODE	4460:13	4460:13	20	action
LEAF_NODE	4460:19	4460:19	18	,
ARGUMENT	4460:21	4460:21	18	"Update"
FIELD	4460:21	4460:21	19	"Update"
LEAF_NODE	4460:21	4460:21	20	"Update"
LEAF_NODE	4460:29	4460:29	18	)
LEAF_NODE	4460:30	4460:30	16	;
LEAF_NODE	4461:3	4461:3	14	}
EXPR_STATEMENT	4462:1	4462:18	12	ready_bits += bps ;
EXPR	4462:1	4462:1	13	ready_bits += bps
ASSIGN	4462:1	4462:15	14	ready_bits += bps
LVAL	4462:1	4462:1	15	ready_bits
FIELD	4462:1	4462:1	16	ready_bits
LEAF_NODE	4462:1	4462:1	17	ready_bits
ASSIGN_OP	4462:12	4462:12	15	+=
LEAF_NODE	4462:12	4462:12	16	+=
RVAL	4462:15	4462:15	15	bps
FIELD	4462:15	4462:15	16	bps
LEAF_NODE	4462:15	4462:15	17	bps
LEAF_NODE	4462:18	4462:18	13	;
SELECTION	4464:1	4465:3	12	
KEYWORD	4464:1	4464:1	13	if
LEAF_NODE	4464:1	4464:1	14	if
LEAF_NODE	4464:4	4464:4	13	(
CONDITION	4464:5	4464:5	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	4464:5	4464:5	14	( dumpfile != NULL ) && ( level == 3 )
AND	4464:5	4464:27	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	4464:5	4464:22	16	( dumpfile != NULL )
LEAF_NODE	4464:5	4464:5	17	(
FIELD	4464:6	4464:6	17	dumpfile
LEAF_NODE	4464:6	4464:6	18	dumpfile
EQ_OPERATOR	4464:15	4464:15	17	!=
LEAF_NODE	4464:15	4464:15	18	!=
FIELD	4464:18	4464:18	17	NULL
LEAF_NODE	4464:18	4464:18	18	NULL
LEAF_NODE	4464:22	4464:22	17	)
LEAF_NODE	4464:24	4464:24	16	&&
EXPR	4464:27	4464:38	16	( level == 3 )
LEAF_NODE	4464:27	4464:27	17	(
FIELD	4464:28	4464:28	17	level
LEAF_NODE	4464:28	4464:28	18	level
EQ_OPERATOR	4464:34	4464:34	17	==
LEAF_NODE	4464:34	4464:34	18	==
FIELD	4464:37	4464:37	17	3
LEAF_NODE	4464:37	4464:37	18	3
LEAF_NODE	4464:38	4464:38	17	)
LEAF_NODE	4464:39	4464:39	13	)
STATEMENTS	4465:3	4476:3	13	
LEAF_NODE	4465:3	4465:3	14	{
STATEMENTS	4466:3	4475:3	14	
EXPR_STATEMENT	4466:3	4468:59	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	4466:3	4466:3	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	4466:3	4468:58	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	4466:3	4466:3	18	dump_info
LEAF_NODE	4466:3	4466:3	19	dump_info
LEAF_NODE	4466:13	4466:13	18	(
ARGUMENT	4466:14	4466:14	18	dumpfile
FIELD	4466:14	4466:14	19	dumpfile
LEAF_NODE	4466:14	4466:14	20	dumpfile
LEAF_NODE	4466:22	4466:22	18	,
ARGUMENT	4466:24	4466:24	18	format
FIELD	4466:24	4466:24	19	format
LEAF_NODE	4466:24	4466:24	20	format
LEAF_NODE	4466:30	4466:30	18	,
ARGUMENT	4466:32	4466:32	18	""
FIELD	4466:32	4466:32	19	""
LEAF_NODE	4466:32	4466:32	20	""
LEAF_NODE	4466:34	4466:34	18	,
ARGUMENT	4467:9	4467:9	18	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4467:9	4467:9	19	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4467:9	4467:9	20	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4467:92	4467:92	18	,
ARGUMENT	4468:9	4468:15	18	row + 1
FIELD	4468:9	4468:9	19	row
LEAF_NODE	4468:9	4468:9	20	row
LEAF_NODE	4468:13	4468:13	19	+
FIELD	4468:15	4468:15	19	1
LEAF_NODE	4468:15	4468:15	20	1
LEAF_NODE	4468:16	4468:16	18	,
ARGUMENT	4468:18	4468:24	18	col + 1
FIELD	4468:18	4468:18	19	col
LEAF_NODE	4468:18	4468:18	20	col
LEAF_NODE	4468:22	4468:22	19	+
FIELD	4468:24	4468:24	19	1
LEAF_NODE	4468:24	4468:24	20	1
LEAF_NODE	4468:25	4468:25	18	,
ARGUMENT	4468:27	4468:27	18	s
FIELD	4468:27	4468:27	19	s
LEAF_NODE	4468:27	4468:27	20	s
LEAF_NODE	4468:28	4468:28	18	,
ARGUMENT	4468:30	4468:30	18	src_byte
FIELD	4468:30	4468:30	19	src_byte
LEAF_NODE	4468:30	4468:30	20	src_byte
LEAF_NODE	4468:38	4468:38	18	,
ARGUMENT	4468:40	4468:40	18	src_bit
FIELD	4468:40	4468:40	19	src_bit
LEAF_NODE	4468:40	4468:40	20	src_bit
LEAF_NODE	4468:47	4468:47	18	,
ARGUMENT	4468:49	4468:55	18	dst - out
FIELD	4468:49	4468:49	19	dst
LEAF_NODE	4468:49	4468:49	20	dst
LEAF_NODE	4468:53	4468:53	19	-
FIELD	4468:55	4468:55	19	out
LEAF_NODE	4468:55	4468:55	20	out
LEAF_NODE	4468:58	4468:58	18	)
LEAF_NODE	4468:59	4468:59	16	;
EXPR_STATEMENT	4470:3	4470:57	15	dump_short ( dumpfile , format , "Match bits" , matchbits ) ;
EXPR	4470:3	4470:3	16	dump_short ( dumpfile , format , "Match bits" , matchbits )
FUNCTION_CALL	4470:3	4470:56	17	dump_short ( dumpfile , format , "Match bits" , matchbits )
CALLEE	4470:3	4470:3	18	dump_short
LEAF_NODE	4470:3	4470:3	19	dump_short
LEAF_NODE	4470:14	4470:14	18	(
ARGUMENT	4470:15	4470:15	18	dumpfile
FIELD	4470:15	4470:15	19	dumpfile
LEAF_NODE	4470:15	4470:15	20	dumpfile
LEAF_NODE	4470:23	4470:23	18	,
ARGUMENT	4470:25	4470:25	18	format
FIELD	4470:25	4470:25	19	format
LEAF_NODE	4470:25	4470:25	20	format
LEAF_NODE	4470:31	4470:31	18	,
ARGUMENT	4470:33	4470:33	18	"Match bits"
FIELD	4470:33	4470:33	19	"Match bits"
LEAF_NODE	4470:33	4470:33	20	"Match bits"
LEAF_NODE	4470:45	4470:45	18	,
ARGUMENT	4470:47	4470:47	18	matchbits
FIELD	4470:47	4470:47	19	matchbits
LEAF_NODE	4470:47	4470:47	20	matchbits
LEAF_NODE	4470:56	4470:56	18	)
LEAF_NODE	4470:57	4470:57	16	;
EXPR_STATEMENT	4471:3	4471:54	15	dump_data ( dumpfile , format , "Src   bits" , src , 2 ) ;
EXPR	4471:3	4471:3	16	dump_data ( dumpfile , format , "Src   bits" , src , 2 )
FUNCTION_CALL	4471:3	4471:53	17	dump_data ( dumpfile , format , "Src   bits" , src , 2 )
CALLEE	4471:3	4471:3	18	dump_data
LEAF_NODE	4471:3	4471:3	19	dump_data
LEAF_NODE	4471:14	4471:14	18	(
ARGUMENT	4471:15	4471:15	18	dumpfile
FIELD	4471:15	4471:15	19	dumpfile
LEAF_NODE	4471:15	4471:15	20	dumpfile
LEAF_NODE	4471:23	4471:23	18	,
ARGUMENT	4471:25	4471:25	18	format
FIELD	4471:25	4471:25	19	format
LEAF_NODE	4471:25	4471:25	20	format
LEAF_NODE	4471:31	4471:31	18	,
ARGUMENT	4471:33	4471:33	18	"Src   bits"
FIELD	4471:33	4471:33	19	"Src   bits"
LEAF_NODE	4471:33	4471:33	20	"Src   bits"
LEAF_NODE	4471:45	4471:45	18	,
ARGUMENT	4471:47	4471:47	18	src
FIELD	4471:47	4471:47	19	src
LEAF_NODE	4471:47	4471:47	20	src
LEAF_NODE	4471:50	4471:50	18	,
ARGUMENT	4471:52	4471:52	18	2
FIELD	4471:52	4471:52	19	2
LEAF_NODE	4471:52	4471:52	20	2
LEAF_NODE	4471:53	4471:53	18	)
LEAF_NODE	4471:54	4471:54	16	;
EXPR_STATEMENT	4472:3	4472:53	15	dump_short ( dumpfile , format , "Buff1 bits" , buff1 ) ;
EXPR	4472:3	4472:3	16	dump_short ( dumpfile , format , "Buff1 bits" , buff1 )
FUNCTION_CALL	4472:3	4472:52	17	dump_short ( dumpfile , format , "Buff1 bits" , buff1 )
CALLEE	4472:3	4472:3	18	dump_short
LEAF_NODE	4472:3	4472:3	19	dump_short
LEAF_NODE	4472:14	4472:14	18	(
ARGUMENT	4472:15	4472:15	18	dumpfile
FIELD	4472:15	4472:15	19	dumpfile
LEAF_NODE	4472:15	4472:15	20	dumpfile
LEAF_NODE	4472:23	4472:23	18	,
ARGUMENT	4472:25	4472:25	18	format
FIELD	4472:25	4472:25	19	format
LEAF_NODE	4472:25	4472:25	20	format
LEAF_NODE	4472:31	4472:31	18	,
ARGUMENT	4472:33	4472:33	18	"Buff1 bits"
FIELD	4472:33	4472:33	19	"Buff1 bits"
LEAF_NODE	4472:33	4472:33	20	"Buff1 bits"
LEAF_NODE	4472:45	4472:45	18	,
ARGUMENT	4472:47	4472:47	18	buff1
FIELD	4472:47	4472:47	19	buff1
LEAF_NODE	4472:47	4472:47	20	buff1
LEAF_NODE	4472:52	4472:52	18	)
LEAF_NODE	4472:53	4472:53	16	;
EXPR_STATEMENT	4473:3	4473:53	15	dump_short ( dumpfile , format , "Buff2 bits" , buff2 ) ;
EXPR	4473:3	4473:3	16	dump_short ( dumpfile , format , "Buff2 bits" , buff2 )
FUNCTION_CALL	4473:3	4473:52	17	dump_short ( dumpfile , format , "Buff2 bits" , buff2 )
CALLEE	4473:3	4473:3	18	dump_short
LEAF_NODE	4473:3	4473:3	19	dump_short
LEAF_NODE	4473:14	4473:14	18	(
ARGUMENT	4473:15	4473:15	18	dumpfile
FIELD	4473:15	4473:15	19	dumpfile
LEAF_NODE	4473:15	4473:15	20	dumpfile
LEAF_NODE	4473:23	4473:23	18	,
ARGUMENT	4473:25	4473:25	18	format
FIELD	4473:25	4473:25	19	format
LEAF_NODE	4473:25	4473:25	20	format
LEAF_NODE	4473:31	4473:31	18	,
ARGUMENT	4473:33	4473:33	18	"Buff2 bits"
FIELD	4473:33	4473:33	19	"Buff2 bits"
LEAF_NODE	4473:33	4473:33	20	"Buff2 bits"
LEAF_NODE	4473:45	4473:45	18	,
ARGUMENT	4473:47	4473:47	18	buff2
FIELD	4473:47	4473:47	19	buff2
LEAF_NODE	4473:47	4473:47	20	buff2
LEAF_NODE	4473:52	4473:52	18	)
LEAF_NODE	4473:53	4473:53	16	;
EXPR_STATEMENT	4474:3	4474:56	15	dump_byte ( dumpfile , format , "Write byte" , bytebuff ) ;
EXPR	4474:3	4474:3	16	dump_byte ( dumpfile , format , "Write byte" , bytebuff )
FUNCTION_CALL	4474:3	4474:55	17	dump_byte ( dumpfile , format , "Write byte" , bytebuff )
CALLEE	4474:3	4474:3	18	dump_byte
LEAF_NODE	4474:3	4474:3	19	dump_byte
LEAF_NODE	4474:14	4474:14	18	(
ARGUMENT	4474:15	4474:15	18	dumpfile
FIELD	4474:15	4474:15	19	dumpfile
LEAF_NODE	4474:15	4474:15	20	dumpfile
LEAF_NODE	4474:23	4474:23	18	,
ARGUMENT	4474:25	4474:25	18	format
FIELD	4474:25	4474:25	19	format
LEAF_NODE	4474:25	4474:25	20	format
LEAF_NODE	4474:31	4474:31	18	,
ARGUMENT	4474:33	4474:33	18	"Write byte"
FIELD	4474:33	4474:33	19	"Write byte"
LEAF_NODE	4474:33	4474:33	20	"Write byte"
LEAF_NODE	4474:45	4474:45	18	,
ARGUMENT	4474:47	4474:47	18	bytebuff
FIELD	4474:47	4474:47	19	bytebuff
LEAF_NODE	4474:47	4474:47	20	bytebuff
LEAF_NODE	4474:55	4474:55	18	)
LEAF_NODE	4474:56	4474:56	16	;
EXPR_STATEMENT	4475:3	4475:78	15	dump_info ( dumpfile , format , "" , "Ready bits:  %d, %s" , ready_bits , action ) ;
EXPR	4475:3	4475:3	16	dump_info ( dumpfile , format , "" , "Ready bits:  %d, %s" , ready_bits , action )
FUNCTION_CALL	4475:3	4475:77	17	dump_info ( dumpfile , format , "" , "Ready bits:  %d, %s" , ready_bits , action )
CALLEE	4475:3	4475:3	18	dump_info
LEAF_NODE	4475:3	4475:3	19	dump_info
LEAF_NODE	4475:14	4475:14	18	(
ARGUMENT	4475:15	4475:15	18	dumpfile
FIELD	4475:15	4475:15	19	dumpfile
LEAF_NODE	4475:15	4475:15	20	dumpfile
LEAF_NODE	4475:23	4475:23	18	,
ARGUMENT	4475:25	4475:25	18	format
FIELD	4475:25	4475:25	19	format
LEAF_NODE	4475:25	4475:25	20	format
LEAF_NODE	4475:31	4475:31	18	,
ARGUMENT	4475:33	4475:33	18	""
FIELD	4475:33	4475:33	19	""
LEAF_NODE	4475:33	4475:33	20	""
LEAF_NODE	4475:35	4475:35	18	,
ARGUMENT	4475:36	4475:36	18	"Ready bits:  %d, %s"
FIELD	4475:36	4475:36	19	"Ready bits:  %d, %s"
LEAF_NODE	4475:36	4475:36	20	"Ready bits:  %d, %s"
LEAF_NODE	4475:57	4475:57	18	,
ARGUMENT	4475:59	4475:59	18	ready_bits
FIELD	4475:59	4475:59	19	ready_bits
LEAF_NODE	4475:59	4475:59	20	ready_bits
LEAF_NODE	4475:69	4475:69	18	,
ARGUMENT	4475:71	4475:71	18	action
FIELD	4475:71	4475:71	19	action
LEAF_NODE	4475:71	4475:71	20	action
LEAF_NODE	4475:77	4475:77	18	)
LEAF_NODE	4475:78	4475:78	16	;
LEAF_NODE	4476:3	4476:3	14	}
LEAF_NODE	4477:1	4477:1	11	}
LEAF_NODE	4478:6	4478:6	8	}
SELECTION	4481:4	4482:6	6	
KEYWORD	4481:4	4481:4	7	if
LEAF_NODE	4481:4	4481:4	8	if
LEAF_NODE	4481:7	4481:7	7	(
CONDITION	4481:8	4481:8	7	ready_bits > 0
EXPR	4481:8	4481:21	8	ready_bits > 0
FIELD	4481:8	4481:8	9	ready_bits
LEAF_NODE	4481:8	4481:8	10	ready_bits
REL_OPERATOR	4481:19	4481:19	9	>
LEAF_NODE	4481:19	4481:19	10	>
FIELD	4481:21	4481:21	9	0
LEAF_NODE	4481:21	4481:21	10	0
LEAF_NODE	4481:22	4481:22	7	)
STATEMENTS	4482:6	4492:6	7	
LEAF_NODE	4482:6	4482:6	8	{
STATEMENTS	4483:6	4485:6	8	
EXPR_STATEMENT	4483:6	4483:29	9	bytebuff = ( buff2 >> 8 ) ;
EXPR	4483:6	4483:6	10	bytebuff = ( buff2 >> 8 )
ASSIGN	4483:6	4483:17	11	bytebuff = ( buff2 >> 8 )
LVAL	4483:6	4483:6	12	bytebuff
FIELD	4483:6	4483:6	13	bytebuff
LEAF_NODE	4483:6	4483:6	14	bytebuff
ASSIGN_OP	4483:15	4483:15	12	=
LEAF_NODE	4483:15	4483:15	13	=
RVAL	4483:17	4483:28	12	( buff2 >> 8 )
LEAF_NODE	4483:17	4483:17	13	(
FIELD	4483:18	4483:18	13	buff2
LEAF_NODE	4483:18	4483:18	14	buff2
LEAF_NODE	4483:24	4483:24	13	>>
FIELD	4483:27	4483:27	13	8
LEAF_NODE	4483:27	4483:27	14	8
LEAF_NODE	4483:28	4483:28	13	)
LEAF_NODE	4483:29	4483:29	10	;
EXPR_STATEMENT	4484:6	4484:23	9	* dst ++ = bytebuff ;
EXPR	4484:6	4484:6	10	* dst ++ = bytebuff
ASSIGN	4484:6	4484:15	11	* dst ++ = bytebuff
LVAL	4484:6	4484:6	12	* dst ++
UNARY_EXPR	4484:6	4484:7	13	* dst ++
UNARY_OPERATOR	4484:6	4484:6	14	*
LEAF_NODE	4484:6	4484:6	15	*
FIELD	4484:7	4484:10	14	dst ++
LEAF_NODE	4484:7	4484:7	15	dst
LEAF_NODE	4484:10	4484:10	15	++
ASSIGN_OP	4484:13	4484:13	12	=
LEAF_NODE	4484:13	4484:13	13	=
RVAL	4484:15	4484:15	12	bytebuff
FIELD	4484:15	4484:15	13	bytebuff
LEAF_NODE	4484:15	4484:15	14	bytebuff
LEAF_NODE	4484:23	4484:23	10	;
SELECTION	4485:6	4486:1	9	
KEYWORD	4485:6	4485:6	10	if
LEAF_NODE	4485:6	4485:6	11	if
LEAF_NODE	4485:9	4485:9	10	(
CONDITION	4485:10	4485:10	10	( dumpfile != NULL ) && ( level == 3 )
EXPR	4485:10	4485:10	11	( dumpfile != NULL ) && ( level == 3 )
AND	4485:10	4485:32	12	( dumpfile != NULL ) && ( level == 3 )
EXPR	4485:10	4485:27	13	( dumpfile != NULL )
LEAF_NODE	4485:10	4485:10	14	(
FIELD	4485:11	4485:11	14	dumpfile
LEAF_NODE	4485:11	4485:11	15	dumpfile
EQ_OPERATOR	4485:20	4485:20	14	!=
LEAF_NODE	4485:20	4485:20	15	!=
FIELD	4485:23	4485:23	14	NULL
LEAF_NODE	4485:23	4485:23	15	NULL
LEAF_NODE	4485:27	4485:27	14	)
LEAF_NODE	4485:29	4485:29	13	&&
EXPR	4485:32	4485:43	13	( level == 3 )
LEAF_NODE	4485:32	4485:32	14	(
FIELD	4485:33	4485:33	14	level
LEAF_NODE	4485:33	4485:33	15	level
EQ_OPERATOR	4485:39	4485:39	14	==
LEAF_NODE	4485:39	4485:39	15	==
FIELD	4485:42	4485:42	14	3
LEAF_NODE	4485:42	4485:42	15	3
LEAF_NODE	4485:43	4485:43	14	)
LEAF_NODE	4485:44	4485:44	10	)
STATEMENTS	4486:1	4491:1	10	
LEAF_NODE	4486:1	4486:1	11	{
STATEMENTS	4487:1	4490:1	11	
EXPR_STATEMENT	4487:1	4489:56	12	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	4487:1	4487:1	13	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	4487:1	4489:55	14	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	4487:1	4487:1	15	dump_info
LEAF_NODE	4487:1	4487:1	16	dump_info
LEAF_NODE	4487:11	4487:11	15	(
ARGUMENT	4487:12	4487:12	15	dumpfile
FIELD	4487:12	4487:12	16	dumpfile
LEAF_NODE	4487:12	4487:12	17	dumpfile
LEAF_NODE	4487:20	4487:20	15	,
ARGUMENT	4487:22	4487:22	15	format
FIELD	4487:22	4487:22	16	format
LEAF_NODE	4487:22	4487:22	17	format
LEAF_NODE	4487:28	4487:28	15	,
ARGUMENT	4487:30	4487:30	15	""
FIELD	4487:30	4487:30	16	""
LEAF_NODE	4487:30	4487:30	17	""
LEAF_NODE	4487:32	4487:32	15	,
ARGUMENT	4488:9	4488:9	15	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4488:9	4488:9	16	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4488:9	4488:9	17	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4488:80	4488:80	15	,
ARGUMENT	4489:9	4489:15	15	row + 1
FIELD	4489:9	4489:9	16	row
LEAF_NODE	4489:9	4489:9	17	row
LEAF_NODE	4489:13	4489:13	16	+
FIELD	4489:15	4489:15	16	1
LEAF_NODE	4489:15	4489:15	17	1
LEAF_NODE	4489:16	4489:16	15	,
ARGUMENT	4489:18	4489:24	15	col + 1
FIELD	4489:18	4489:18	16	col
LEAF_NODE	4489:18	4489:18	17	col
LEAF_NODE	4489:22	4489:22	16	+
FIELD	4489:24	4489:24	16	1
LEAF_NODE	4489:24	4489:24	17	1
LEAF_NODE	4489:25	4489:25	15	,
ARGUMENT	4489:27	4489:27	15	src_byte
FIELD	4489:27	4489:27	16	src_byte
LEAF_NODE	4489:27	4489:27	17	src_byte
LEAF_NODE	4489:35	4489:35	15	,
ARGUMENT	4489:37	4489:37	15	src_bit
FIELD	4489:37	4489:37	16	src_bit
LEAF_NODE	4489:37	4489:37	17	src_bit
LEAF_NODE	4489:44	4489:44	15	,
ARGUMENT	4489:46	4489:52	15	dst - out
FIELD	4489:46	4489:46	16	dst
LEAF_NODE	4489:46	4489:46	17	dst
LEAF_NODE	4489:50	4489:50	16	-
FIELD	4489:52	4489:52	16	out
LEAF_NODE	4489:52	4489:52	17	out
LEAF_NODE	4489:55	4489:55	15	)
LEAF_NODE	4489:56	4489:56	13	;
EXPR_STATEMENT	4490:1	4490:53	12	dump_byte ( dumpfile , format , "Final bits" , bytebuff ) ;
EXPR	4490:1	4490:1	13	dump_byte ( dumpfile , format , "Final bits" , bytebuff )
FUNCTION_CALL	4490:1	4490:52	14	dump_byte ( dumpfile , format , "Final bits" , bytebuff )
CALLEE	4490:1	4490:1	15	dump_byte
LEAF_NODE	4490:1	4490:1	16	dump_byte
LEAF_NODE	4490:11	4490:11	15	(
ARGUMENT	4490:12	4490:12	15	dumpfile
FIELD	4490:12	4490:12	16	dumpfile
LEAF_NODE	4490:12	4490:12	17	dumpfile
LEAF_NODE	4490:20	4490:20	15	,
ARGUMENT	4490:22	4490:22	15	format
FIELD	4490:22	4490:22	16	format
LEAF_NODE	4490:22	4490:22	17	format
LEAF_NODE	4490:28	4490:28	15	,
ARGUMENT	4490:30	4490:30	15	"Final bits"
FIELD	4490:30	4490:30	16	"Final bits"
LEAF_NODE	4490:30	4490:30	17	"Final bits"
LEAF_NODE	4490:42	4490:42	15	,
ARGUMENT	4490:44	4490:44	15	bytebuff
FIELD	4490:44	4490:44	16	bytebuff
LEAF_NODE	4490:44	4490:44	17	bytebuff
LEAF_NODE	4490:52	4490:52	15	)
LEAF_NODE	4490:53	4490:53	13	;
LEAF_NODE	4491:1	4491:1	11	}
LEAF_NODE	4492:6	4492:6	8	}
SELECTION	4494:4	4495:6	6	
KEYWORD	4494:4	4494:4	7	if
LEAF_NODE	4494:4	4494:4	8	if
LEAF_NODE	4494:7	4494:7	7	(
CONDITION	4494:8	4494:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	4494:8	4494:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	4494:8	4494:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	4494:8	4494:25	10	( dumpfile != NULL )
LEAF_NODE	4494:8	4494:8	11	(
FIELD	4494:9	4494:9	11	dumpfile
LEAF_NODE	4494:9	4494:9	12	dumpfile
EQ_OPERATOR	4494:18	4494:18	11	!=
LEAF_NODE	4494:18	4494:18	12	!=
FIELD	4494:21	4494:21	11	NULL
LEAF_NODE	4494:21	4494:21	12	NULL
LEAF_NODE	4494:25	4494:25	11	)
LEAF_NODE	4494:27	4494:27	10	&&
EXPR	4494:30	4494:41	10	( level == 2 )
LEAF_NODE	4494:30	4494:30	11	(
FIELD	4494:31	4494:31	11	level
LEAF_NODE	4494:31	4494:31	12	level
EQ_OPERATOR	4494:37	4494:37	11	==
LEAF_NODE	4494:37	4494:37	12	==
FIELD	4494:40	4494:40	11	2
LEAF_NODE	4494:40	4494:40	12	2
LEAF_NODE	4494:41	4494:41	11	)
LEAF_NODE	4494:42	4494:42	7	)
STATEMENTS	4495:6	4498:6	7	
LEAF_NODE	4495:6	4495:6	8	{
STATEMENTS	4496:6	4497:6	8	
EXPR_STATEMENT	4496:6	4496:84	9	dump_info ( dumpfile , format , "combineSeparateTileSamples16bits" , "Output data" ) ;
EXPR	4496:6	4496:6	10	dump_info ( dumpfile , format , "combineSeparateTileSamples16bits" , "Output data" )
FUNCTION_CALL	4496:6	4496:83	11	dump_info ( dumpfile , format , "combineSeparateTileSamples16bits" , "Output data" )
CALLEE	4496:6	4496:6	12	dump_info
LEAF_NODE	4496:6	4496:6	13	dump_info
LEAF_NODE	4496:16	4496:16	12	(
ARGUMENT	4496:17	4496:17	12	dumpfile
FIELD	4496:17	4496:17	13	dumpfile
LEAF_NODE	4496:17	4496:17	14	dumpfile
LEAF_NODE	4496:25	4496:25	12	,
ARGUMENT	4496:27	4496:27	12	format
FIELD	4496:27	4496:27	13	format
LEAF_NODE	4496:27	4496:27	14	format
LEAF_NODE	4496:33	4496:33	12	,
ARGUMENT	4496:35	4496:35	12	"combineSeparateTileSamples16bits"
FIELD	4496:35	4496:35	13	"combineSeparateTileSamples16bits"
LEAF_NODE	4496:35	4496:35	14	"combineSeparateTileSamples16bits"
LEAF_NODE	4496:69	4496:69	12	,
ARGUMENT	4496:70	4496:70	12	"Output data"
FIELD	4496:70	4496:70	13	"Output data"
LEAF_NODE	4496:70	4496:70	14	"Output data"
LEAF_NODE	4496:83	4496:83	12	)
LEAF_NODE	4496:84	4496:84	10	;
EXPR_STATEMENT	4497:6	4497:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	4497:6	4497:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	4497:6	4497:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	4497:6	4497:6	12	dump_buffer
LEAF_NODE	4497:6	4497:6	13	dump_buffer
LEAF_NODE	4497:17	4497:17	12	(
ARGUMENT	4497:18	4497:18	12	dumpfile
FIELD	4497:18	4497:18	13	dumpfile
LEAF_NODE	4497:18	4497:18	14	dumpfile
LEAF_NODE	4497:26	4497:26	12	,
ARGUMENT	4497:28	4497:28	12	format
FIELD	4497:28	4497:28	13	format
LEAF_NODE	4497:28	4497:28	14	format
LEAF_NODE	4497:34	4497:34	12	,
ARGUMENT	4497:36	4497:36	12	1
FIELD	4497:36	4497:36	13	1
LEAF_NODE	4497:36	4497:36	14	1
LEAF_NODE	4497:37	4497:37	12	,
ARGUMENT	4497:39	4497:39	12	dst_rowsize
FIELD	4497:39	4497:39	13	dst_rowsize
LEAF_NODE	4497:39	4497:39	14	dst_rowsize
LEAF_NODE	4497:50	4497:50	12	,
ARGUMENT	4497:52	4497:52	12	row
FIELD	4497:52	4497:52	13	row
LEAF_NODE	4497:52	4497:52	14	row
LEAF_NODE	4497:55	4497:55	12	,
ARGUMENT	4497:57	4497:81	12	out + ( row * dst_rowsize )
FIELD	4497:57	4497:57	13	out
LEAF_NODE	4497:57	4497:57	14	out
LEAF_NODE	4497:61	4497:61	13	+
LEAF_NODE	4497:63	4497:63	13	(
FIELD	4497:64	4497:64	13	row
LEAF_NODE	4497:64	4497:64	14	row
LEAF_NODE	4497:68	4497:68	13	*
FIELD	4497:70	4497:70	13	dst_rowsize
LEAF_NODE	4497:70	4497:70	14	dst_rowsize
LEAF_NODE	4497:81	4497:81	13	)
LEAF_NODE	4497:82	4497:82	12	)
LEAF_NODE	4497:83	4497:83	10	;
LEAF_NODE	4498:6	4498:6	8	}
LEAF_NODE	4499:4	4499:4	5	}
JUMP_STATEMENT	4501:2	4501:12	3	return ( 0 ) ;
KEYWORD	4501:2	4501:2	4	return
LEAF_NODE	4501:2	4501:2	5	return
DESTINATION	4501:9	4501:9	4	( 0 )
EXPR	4501:9	4501:11	5	( 0 )
LEAF_NODE	4501:9	4501:9	6	(
FIELD	4501:10	4501:10	6	0
LEAF_NODE	4501:10	4501:10	7	0
LEAF_NODE	4501:11	4501:11	6	)
LEAF_NODE	4501:12	4501:12	4	;
LEAF_NODE	4502:2	4502:2	2	}
FUNCTION_DEF	4504:0	4626:2	1	
RETURN_TYPE	4504:0	4504:7	2	static int
LEAF_NODE	4504:0	4504:0	3	static
TYPE_NAME	4504:7	4504:7	3	int
LEAF_NODE	4504:7	4504:7	4	int
FUNCTION_NAME	4505:0	4505:0	2	combineSeparateTileSamples24bits
LEAF_NODE	4505:0	4505:0	3	combineSeparateTileSamples24bits
PARAMETER_LIST	4505:33	4508:65	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint32 imagewidth , uint32 tw , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	4505:33	4505:33	3	(
PARAMETER_DECL	4505:34	4505:41	3	uint8 * [ ] in
TYPE	4505:34	4505:43	4	uint8 * [ ]
TYPE_NAME	4505:34	4505:34	5	uint8
LEAF_NODE	4505:34	4505:34	6	uint8
POINTER	4505:40	4505:40	5	*
LEAF_NODE	4505:40	4505:40	6	*
TYPE_SUFFIX	4505:43	4505:44	5	[ ]
LEAF_NODE	4505:43	4505:43	6	[
LEAF_NODE	4505:44	4505:44	6	]
NAME	4505:41	4505:41	4	in
LEAF_NODE	4505:41	4505:41	5	in
LEAF_NODE	4505:45	4505:45	3	,
PARAMETER_DECL	4505:47	4505:54	3	uint8 * out
TYPE	4505:47	4505:53	4	uint8 *
TYPE_NAME	4505:47	4505:47	5	uint8
LEAF_NODE	4505:47	4505:47	6	uint8
POINTER	4505:53	4505:53	5	*
LEAF_NODE	4505:53	4505:53	6	*
NAME	4505:54	4505:54	4	out
LEAF_NODE	4505:54	4505:54	5	out
LEAF_NODE	4505:57	4505:57	3	,
PARAMETER_DECL	4505:59	4505:66	3	uint32 cols
TYPE	4505:59	4505:59	4	uint32
TYPE_NAME	4505:59	4505:59	5	uint32
LEAF_NODE	4505:59	4505:59	6	uint32
NAME	4505:66	4505:66	4	cols
LEAF_NODE	4505:66	4505:66	5	cols
LEAF_NODE	4505:70	4505:70	3	,
PARAMETER_DECL	4506:34	4506:41	3	uint32 rows
TYPE	4506:34	4506:34	4	uint32
TYPE_NAME	4506:34	4506:34	5	uint32
LEAF_NODE	4506:34	4506:34	6	uint32
NAME	4506:41	4506:41	4	rows
LEAF_NODE	4506:41	4506:41	5	rows
LEAF_NODE	4506:45	4506:45	3	,
PARAMETER_DECL	4506:47	4506:54	3	uint32 imagewidth
TYPE	4506:47	4506:47	4	uint32
TYPE_NAME	4506:47	4506:47	5	uint32
LEAF_NODE	4506:47	4506:47	6	uint32
NAME	4506:54	4506:54	4	imagewidth
LEAF_NODE	4506:54	4506:54	5	imagewidth
LEAF_NODE	4506:64	4506:64	3	,
PARAMETER_DECL	4507:34	4507:41	3	uint32 tw
TYPE	4507:34	4507:34	4	uint32
TYPE_NAME	4507:34	4507:34	5	uint32
LEAF_NODE	4507:34	4507:34	6	uint32
NAME	4507:41	4507:41	4	tw
LEAF_NODE	4507:41	4507:41	5	tw
LEAF_NODE	4507:43	4507:43	3	,
PARAMETER_DECL	4507:45	4507:52	3	uint16 spp
TYPE	4507:45	4507:45	4	uint16
TYPE_NAME	4507:45	4507:45	5	uint16
LEAF_NODE	4507:45	4507:45	6	uint16
NAME	4507:52	4507:52	4	spp
LEAF_NODE	4507:52	4507:52	5	spp
LEAF_NODE	4507:55	4507:55	3	,
PARAMETER_DECL	4507:57	4507:64	3	uint16 bps
TYPE	4507:57	4507:57	4	uint16
TYPE_NAME	4507:57	4507:57	5	uint16
LEAF_NODE	4507:57	4507:57	6	uint16
NAME	4507:64	4507:64	4	bps
LEAF_NODE	4507:64	4507:64	5	bps
LEAF_NODE	4507:67	4507:67	3	,
PARAMETER_DECL	4508:28	4508:34	3	FILE * dumpfile
TYPE	4508:28	4508:33	4	FILE *
TYPE_NAME	4508:28	4508:28	5	FILE
LEAF_NODE	4508:28	4508:28	6	FILE
POINTER	4508:33	4508:33	5	*
LEAF_NODE	4508:33	4508:33	6	*
NAME	4508:34	4508:34	4	dumpfile
LEAF_NODE	4508:34	4508:34	5	dumpfile
LEAF_NODE	4508:42	4508:42	3	,
PARAMETER_DECL	4508:44	4508:48	3	int format
TYPE	4508:44	4508:44	4	int
TYPE_NAME	4508:44	4508:44	5	int
LEAF_NODE	4508:44	4508:44	6	int
NAME	4508:48	4508:48	4	format
LEAF_NODE	4508:48	4508:48	5	format
LEAF_NODE	4508:54	4508:54	3	,
PARAMETER_DECL	4508:56	4508:60	3	int level
TYPE	4508:56	4508:56	4	int
TYPE_NAME	4508:56	4508:56	5	int
LEAF_NODE	4508:56	4508:56	6	int
NAME	4508:60	4508:60	4	level
LEAF_NODE	4508:60	4508:60	5	level
LEAF_NODE	4508:65	4508:65	3	)
LEAF_NODE	4509:2	4509:2	2	{
STATEMENTS	4510:2	4625:2	2	
SIMPLE_DECL	4510:2	4510:23	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	4510:2	4510:9	4	int ready_bits ; ready_bits = 0
TYPE	4510:2	4510:2	5	int
TYPE_NAME	4510:2	4510:2	6	int
LEAF_NODE	4510:2	4510:2	7	int
NAME	4510:9	4510:9	5	ready_bits
LEAF_NODE	4510:9	4510:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	4510:9	4510:9	5	ready_bits = 0
ASSIGN	4510:9	4510:22	6	ready_bits = 0
LVAL	4510:9	4510:9	7	ready_bits
NAME	4510:9	4510:9	8	ready_bits
LEAF_NODE	4510:9	4510:9	9	ready_bits
ASSIGN_OP	4510:20	4510:20	7	=
LEAF_NODE	4510:20	4510:20	8	=
RVAL	4510:22	4510:22	7	0
FIELD	4510:22	4510:22	8	0
LEAF_NODE	4510:22	4510:22	9	0
LEAF_NODE	4510:23	4510:23	4	;
SIMPLE_DECL	4511:2	4511:33	3	uint32 src_rowsize , uint32 dst_rowsize ;
INIT_DECL_LIST	4511:2	4511:2	4	uint32 src_rowsize , uint32 dst_rowsize
VAR_DECL	4511:2	4511:9	5	uint32 src_rowsize
TYPE	4511:2	4511:2	6	uint32
TYPE_NAME	4511:2	4511:2	7	uint32
LEAF_NODE	4511:2	4511:2	8	uint32
NAME	4511:9	4511:9	6	src_rowsize
LEAF_NODE	4511:9	4511:9	7	src_rowsize
LEAF_NODE	4511:20	4511:20	5	,
VAR_DECL	4511:2	4511:22	5	uint32 dst_rowsize
TYPE	4511:2	4511:2	6	uint32
TYPE_NAME	4511:2	4511:2	7	uint32
LEAF_NODE	4511:2	4511:2	8	uint32
NAME	4511:22	4511:22	6	dst_rowsize
LEAF_NODE	4511:22	4511:22	7	dst_rowsize
LEAF_NODE	4511:33	4511:33	4	;
SIMPLE_DECL	4512:2	4512:31	3	uint32 bit_offset , uint32 src_offset ;
INIT_DECL_LIST	4512:2	4512:2	4	uint32 bit_offset , uint32 src_offset
VAR_DECL	4512:2	4512:9	5	uint32 bit_offset
TYPE	4512:2	4512:2	6	uint32
TYPE_NAME	4512:2	4512:2	7	uint32
LEAF_NODE	4512:2	4512:2	8	uint32
NAME	4512:9	4512:9	6	bit_offset
LEAF_NODE	4512:9	4512:9	7	bit_offset
LEAF_NODE	4512:19	4512:19	5	,
VAR_DECL	4512:2	4512:21	5	uint32 src_offset
TYPE	4512:2	4512:2	6	uint32
TYPE_NAME	4512:2	4512:2	7	uint32
LEAF_NODE	4512:2	4512:2	8	uint32
NAME	4512:21	4512:21	6	src_offset
LEAF_NODE	4512:21	4512:21	7	src_offset
LEAF_NODE	4512:31	4512:31	4	;
SIMPLE_DECL	4513:2	4513:44	3	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	4513:2	4513:2	4	uint32 row , uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4513:2	4513:9	5	uint32 row
TYPE	4513:2	4513:2	6	uint32
TYPE_NAME	4513:2	4513:2	7	uint32
LEAF_NODE	4513:2	4513:2	8	uint32
NAME	4513:9	4513:9	6	row
LEAF_NODE	4513:9	4513:9	7	row
LEAF_NODE	4513:12	4513:12	5	,
INIT_DECL_LIST	4513:2	4513:2	5	uint32 col , uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4513:2	4513:14	6	uint32 col
TYPE	4513:2	4513:2	7	uint32
TYPE_NAME	4513:2	4513:2	8	uint32
LEAF_NODE	4513:2	4513:2	9	uint32
NAME	4513:14	4513:14	7	col
LEAF_NODE	4513:14	4513:14	8	col
LEAF_NODE	4513:17	4513:17	6	,
INIT_DECL_LIST	4513:2	4513:2	6	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4513:2	4513:19	7	uint32 src_byte ; src_byte = 0
TYPE	4513:2	4513:2	8	uint32
TYPE_NAME	4513:2	4513:2	9	uint32
LEAF_NODE	4513:2	4513:2	10	uint32
NAME	4513:19	4513:19	8	src_byte
LEAF_NODE	4513:19	4513:19	9	src_byte
LEAF_NODE	0:0	0:0	8	;
INIT	4513:19	4513:19	8	src_byte = 0
ASSIGN	4513:19	4513:30	9	src_byte = 0
LVAL	4513:19	4513:19	10	src_byte
NAME	4513:19	4513:19	11	src_byte
LEAF_NODE	4513:19	4513:19	12	src_byte
ASSIGN_OP	4513:28	4513:28	10	=
LEAF_NODE	4513:28	4513:28	11	=
RVAL	4513:30	4513:30	10	0
FIELD	4513:30	4513:30	11	0
LEAF_NODE	4513:30	4513:30	12	0
LEAF_NODE	4513:31	4513:31	7	,
VAR_DECL	4513:2	4513:33	7	uint32 src_bit ; src_bit = 0
TYPE	4513:2	4513:2	8	uint32
TYPE_NAME	4513:2	4513:2	9	uint32
LEAF_NODE	4513:2	4513:2	10	uint32
NAME	4513:33	4513:33	8	src_bit
LEAF_NODE	4513:33	4513:33	9	src_bit
LEAF_NODE	0:0	0:0	8	;
INIT	4513:33	4513:33	8	src_bit = 0
ASSIGN	4513:33	4513:43	9	src_bit = 0
LVAL	4513:33	4513:33	10	src_bit
NAME	4513:33	4513:33	11	src_bit
LEAF_NODE	4513:33	4513:33	12	src_bit
ASSIGN_OP	4513:41	4513:41	10	=
LEAF_NODE	4513:41	4513:41	11	=
RVAL	4513:43	4513:43	10	0
FIELD	4513:43	4513:43	11	0
LEAF_NODE	4513:43	4513:43	12	0
LEAF_NODE	4513:44	4513:44	4	;
SIMPLE_DECL	4514:2	4514:36	3	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	4514:2	4514:2	4	uint32 maskbits ; maskbits = 0 , uint32 matchbits ; matchbits = 0
VAR_DECL	4514:2	4514:9	5	uint32 maskbits ; maskbits = 0
TYPE	4514:2	4514:2	6	uint32
TYPE_NAME	4514:2	4514:2	7	uint32
LEAF_NODE	4514:2	4514:2	8	uint32
NAME	4514:9	4514:9	6	maskbits
LEAF_NODE	4514:9	4514:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	4514:9	4514:9	6	maskbits = 0
ASSIGN	4514:9	4514:20	7	maskbits = 0
LVAL	4514:9	4514:9	8	maskbits
NAME	4514:9	4514:9	9	maskbits
LEAF_NODE	4514:9	4514:9	10	maskbits
ASSIGN_OP	4514:18	4514:18	8	=
LEAF_NODE	4514:18	4514:18	9	=
RVAL	4514:20	4514:20	8	0
FIELD	4514:20	4514:20	9	0
LEAF_NODE	4514:20	4514:20	10	0
LEAF_NODE	4514:21	4514:21	5	,
VAR_DECL	4514:2	4514:23	5	uint32 matchbits ; matchbits = 0
TYPE	4514:2	4514:2	6	uint32
TYPE_NAME	4514:2	4514:2	7	uint32
LEAF_NODE	4514:2	4514:2	8	uint32
NAME	4514:23	4514:23	6	matchbits
LEAF_NODE	4514:23	4514:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	4514:23	4514:23	6	matchbits = 0
ASSIGN	4514:23	4514:35	7	matchbits = 0
LVAL	4514:23	4514:23	8	matchbits
NAME	4514:23	4514:23	9	matchbits
LEAF_NODE	4514:23	4514:23	10	matchbits
ASSIGN_OP	4514:33	4514:33	8	=
LEAF_NODE	4514:33	4514:33	9	=
RVAL	4514:35	4514:35	8	0
FIELD	4514:35	4514:35	9	0
LEAF_NODE	4514:35	4514:35	10	0
LEAF_NODE	4514:36	4514:36	4	;
SIMPLE_DECL	4515:2	4515:29	3	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	4515:2	4515:2	4	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0
VAR_DECL	4515:2	4515:9	5	uint32 buff1 ; buff1 = 0
TYPE	4515:2	4515:2	6	uint32
TYPE_NAME	4515:2	4515:2	7	uint32
LEAF_NODE	4515:2	4515:2	8	uint32
NAME	4515:9	4515:9	6	buff1
LEAF_NODE	4515:9	4515:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	4515:9	4515:9	6	buff1 = 0
ASSIGN	4515:9	4515:17	7	buff1 = 0
LVAL	4515:9	4515:9	8	buff1
NAME	4515:9	4515:9	9	buff1
LEAF_NODE	4515:9	4515:9	10	buff1
ASSIGN_OP	4515:15	4515:15	8	=
LEAF_NODE	4515:15	4515:15	9	=
RVAL	4515:17	4515:17	8	0
FIELD	4515:17	4515:17	9	0
LEAF_NODE	4515:17	4515:17	10	0
LEAF_NODE	4515:18	4515:18	5	,
VAR_DECL	4515:2	4515:20	5	uint32 buff2 ; buff2 = 0
TYPE	4515:2	4515:2	6	uint32
TYPE_NAME	4515:2	4515:2	7	uint32
LEAF_NODE	4515:2	4515:2	8	uint32
NAME	4515:20	4515:20	6	buff2
LEAF_NODE	4515:20	4515:20	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	4515:20	4515:20	6	buff2 = 0
ASSIGN	4515:20	4515:28	7	buff2 = 0
LVAL	4515:20	4515:20	8	buff2
NAME	4515:20	4515:20	9	buff2
LEAF_NODE	4515:20	4515:20	10	buff2
ASSIGN_OP	4515:26	4515:26	8	=
LEAF_NODE	4515:26	4515:26	9	=
RVAL	4515:28	4515:28	8	0
FIELD	4515:28	4515:28	9	0
LEAF_NODE	4515:28	4515:28	10	0
LEAF_NODE	4515:29	4515:29	4	;
SIMPLE_DECL	4516:2	4516:37	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 ;
INIT_DECL_LIST	4516:2	4516:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0
VAR_DECL	4516:2	4516:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	4516:2	4516:2	6	uint8
TYPE_NAME	4516:2	4516:2	7	uint8
LEAF_NODE	4516:2	4516:2	8	uint8
NAME	4516:9	4516:9	6	bytebuff1
LEAF_NODE	4516:9	4516:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	4516:9	4516:9	6	bytebuff1 = 0
ASSIGN	4516:9	4516:21	7	bytebuff1 = 0
LVAL	4516:9	4516:9	8	bytebuff1
NAME	4516:9	4516:9	9	bytebuff1
LEAF_NODE	4516:9	4516:9	10	bytebuff1
ASSIGN_OP	4516:19	4516:19	8	=
LEAF_NODE	4516:19	4516:19	9	=
RVAL	4516:21	4516:21	8	0
FIELD	4516:21	4516:21	9	0
LEAF_NODE	4516:21	4516:21	10	0
LEAF_NODE	4516:22	4516:22	5	,
VAR_DECL	4516:2	4516:24	5	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	4516:2	4516:2	6	uint8
TYPE_NAME	4516:2	4516:2	7	uint8
LEAF_NODE	4516:2	4516:2	8	uint8
NAME	4516:24	4516:24	6	bytebuff2
LEAF_NODE	4516:24	4516:24	7	bytebuff2
LEAF_NODE	0:0	0:0	6	;
INIT	4516:24	4516:24	6	bytebuff2 = 0
ASSIGN	4516:24	4516:36	7	bytebuff2 = 0
LVAL	4516:24	4516:24	8	bytebuff2
NAME	4516:24	4516:24	9	bytebuff2
LEAF_NODE	4516:24	4516:24	10	bytebuff2
ASSIGN_OP	4516:34	4516:34	8	=
LEAF_NODE	4516:34	4516:34	9	=
RVAL	4516:36	4516:36	8	0
FIELD	4516:36	4516:36	9	0
LEAF_NODE	4516:36	4516:36	10	0
LEAF_NODE	4516:37	4516:37	4	;
SIMPLE_DECL	4517:2	4517:13	3	tsample_t s ;
VAR_DECL	4517:2	4517:12	4	tsample_t s
TYPE	4517:2	4517:2	5	tsample_t
TYPE_NAME	4517:2	4517:2	6	tsample_t
LEAF_NODE	4517:2	4517:2	7	tsample_t
NAME	4517:12	4517:12	5	s
LEAF_NODE	4517:12	4517:12	6	s
LEAF_NODE	4517:13	4517:13	4	;
SIMPLE_DECL	4518:2	4518:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	4518:2	4518:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	4518:2	4518:16	5	unsigned char *
TYPE_NAME	4518:2	4518:11	6	unsigned char
LEAF_NODE	4518:2	4518:2	7	unsigned
LEAF_NODE	4518:11	4518:11	7	char
POINTER	4518:16	4518:16	6	*
LEAF_NODE	4518:16	4518:16	7	*
NAME	4518:17	4518:17	5	src
LEAF_NODE	4518:17	4518:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	4518:17	4518:17	5	src = in [ 0 ]
ASSIGN	4518:17	4518:23	6	src = in [ 0 ]
LVAL	4518:17	4518:17	7	src
NAME	4518:17	4518:17	8	src
LEAF_NODE	4518:17	4518:17	9	src
ASSIGN_OP	4518:21	4518:21	7	=
LEAF_NODE	4518:21	4518:21	8	=
RVAL	4518:23	4518:23	7	in [ 0 ]
FIELD	4518:23	4518:27	8	in [ 0 ]
LEAF_NODE	4518:23	4518:23	9	in
LEAF_NODE	4518:25	4518:25	9	[
EXPR	4518:26	4518:26	9	0
FIELD	4518:26	4518:26	10	0
LEAF_NODE	4518:26	4518:26	11	0
LEAF_NODE	4518:27	4518:27	9	]
LEAF_NODE	4518:28	4518:28	4	;
SIMPLE_DECL	4519:2	4519:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	4519:2	4519:17	4	unsigned char * dst ; dst = out
TYPE	4519:2	4519:16	5	unsigned char *
TYPE_NAME	4519:2	4519:11	6	unsigned char
LEAF_NODE	4519:2	4519:2	7	unsigned
LEAF_NODE	4519:11	4519:11	7	char
POINTER	4519:16	4519:16	6	*
LEAF_NODE	4519:16	4519:16	7	*
NAME	4519:17	4519:17	5	dst
LEAF_NODE	4519:17	4519:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	4519:17	4519:17	5	dst = out
ASSIGN	4519:17	4519:23	6	dst = out
LVAL	4519:17	4519:17	7	dst
NAME	4519:17	4519:17	8	dst
LEAF_NODE	4519:17	4519:17	9	dst
ASSIGN_OP	4519:21	4519:21	7	=
LEAF_NODE	4519:21	4519:21	8	=
RVAL	4519:23	4519:23	7	out
FIELD	4519:23	4519:23	8	out
LEAF_NODE	4519:23	4519:23	9	out
LEAF_NODE	4519:26	4519:26	4	;
SIMPLE_DECL	4520:2	4520:26	3	char [ 8 ] action ;
VAR_DECL	4520:2	4520:17	4	char [ 8 ] action
TYPE	4520:2	4520:23	5	char [ 8 ]
TYPE_NAME	4520:2	4520:2	6	char
LEAF_NODE	4520:2	4520:2	7	char
TYPE_SUFFIX	4520:23	4520:25	6	[ 8 ]
LEAF_NODE	4520:23	4520:23	7	[
FIELD	4520:24	4520:24	7	8
LEAF_NODE	4520:24	4520:24	8	8
LEAF_NODE	4520:25	4520:25	7	]
NAME	4520:17	4520:17	5	action
LEAF_NODE	4520:17	4520:17	6	action
LEAF_NODE	4520:26	4520:26	4	;
SELECTION	4522:2	4523:4	3	
KEYWORD	4522:2	4522:2	4	if
LEAF_NODE	4522:2	4522:2	5	if
LEAF_NODE	4522:5	4522:5	4	(
CONDITION	4522:6	4522:6	4	( src == NULL ) || ( dst == NULL )
EXPR	4522:6	4522:6	5	( src == NULL ) || ( dst == NULL )
OR	4522:6	4522:23	6	( src == NULL ) || ( dst == NULL )
EXPR	4522:6	4522:18	7	( src == NULL )
LEAF_NODE	4522:6	4522:6	8	(
FIELD	4522:7	4522:7	8	src
LEAF_NODE	4522:7	4522:7	9	src
EQ_OPERATOR	4522:11	4522:11	8	==
LEAF_NODE	4522:11	4522:11	9	==
FIELD	4522:14	4522:14	8	NULL
LEAF_NODE	4522:14	4522:14	9	NULL
LEAF_NODE	4522:18	4522:18	8	)
LEAF_NODE	4522:20	4522:20	7	||
EXPR	4522:23	4522:35	7	( dst == NULL )
LEAF_NODE	4522:23	4522:23	8	(
FIELD	4522:24	4522:24	8	dst
LEAF_NODE	4522:24	4522:24	9	dst
EQ_OPERATOR	4522:28	4522:28	8	==
LEAF_NODE	4522:28	4522:28	9	==
FIELD	4522:31	4522:31	8	NULL
LEAF_NODE	4522:31	4522:31	9	NULL
LEAF_NODE	4522:35	4522:35	8	)
LEAF_NODE	4522:36	4522:36	4	)
STATEMENTS	4523:4	4526:4	4	
LEAF_NODE	4523:4	4523:4	5	{
STATEMENTS	4524:4	4525:4	5	
EXPR_STATEMENT	4524:4	4524:82	6	TIFFError ( "combineSeparateTileSamples24bits" , "Invalid input or output buffer" ) ;
EXPR	4524:4	4524:4	7	TIFFError ( "combineSeparateTileSamples24bits" , "Invalid input or output buffer" )
FUNCTION_CALL	4524:4	4524:81	8	TIFFError ( "combineSeparateTileSamples24bits" , "Invalid input or output buffer" )
CALLEE	4524:4	4524:4	9	TIFFError
LEAF_NODE	4524:4	4524:4	10	TIFFError
LEAF_NODE	4524:13	4524:13	9	(
ARGUMENT	4524:14	4524:14	9	"combineSeparateTileSamples24bits"
FIELD	4524:14	4524:14	10	"combineSeparateTileSamples24bits"
LEAF_NODE	4524:14	4524:14	11	"combineSeparateTileSamples24bits"
LEAF_NODE	4524:48	4524:48	9	,
ARGUMENT	4524:49	4524:49	9	"Invalid input or output buffer"
FIELD	4524:49	4524:49	10	"Invalid input or output buffer"
LEAF_NODE	4524:49	4524:49	11	"Invalid input or output buffer"
LEAF_NODE	4524:81	4524:81	9	)
LEAF_NODE	4524:82	4524:82	7	;
JUMP_STATEMENT	4525:4	4525:14	6	return ( 1 ) ;
KEYWORD	4525:4	4525:4	7	return
LEAF_NODE	4525:4	4525:4	8	return
DESTINATION	4525:11	4525:11	7	( 1 )
EXPR	4525:11	4525:13	8	( 1 )
LEAF_NODE	4525:11	4525:11	9	(
FIELD	4525:12	4525:12	9	1
LEAF_NODE	4525:12	4525:12	10	1
LEAF_NODE	4525:13	4525:13	9	)
LEAF_NODE	4525:14	4525:14	7	;
LEAF_NODE	4526:4	4526:4	5	}
EXPR_STATEMENT	4528:2	4528:36	3	src_rowsize = ( ( bps * tw ) + 7 ) / 8 ;
EXPR	4528:2	4528:2	4	src_rowsize = ( ( bps * tw ) + 7 ) / 8
ASSIGN	4528:2	4528:16	5	src_rowsize = ( ( bps * tw ) + 7 ) / 8
LVAL	4528:2	4528:2	6	src_rowsize
FIELD	4528:2	4528:2	7	src_rowsize
LEAF_NODE	4528:2	4528:2	8	src_rowsize
ASSIGN_OP	4528:14	4528:14	6	=
LEAF_NODE	4528:14	4528:14	7	=
RVAL	4528:16	4528:35	6	( ( bps * tw ) + 7 ) / 8
LEAF_NODE	4528:16	4528:16	7	(
LEAF_NODE	4528:17	4528:17	7	(
FIELD	4528:18	4528:18	7	bps
LEAF_NODE	4528:18	4528:18	8	bps
LEAF_NODE	4528:22	4528:22	7	*
FIELD	4528:24	4528:24	7	tw
LEAF_NODE	4528:24	4528:24	8	tw
LEAF_NODE	4528:26	4528:26	7	)
LEAF_NODE	4528:28	4528:28	7	+
FIELD	4528:30	4528:30	7	7
LEAF_NODE	4528:30	4528:30	8	7
LEAF_NODE	4528:31	4528:31	7	)
LEAF_NODE	4528:33	4528:33	7	/
FIELD	4528:35	4528:35	7	8
LEAF_NODE	4528:35	4528:35	8	8
LEAF_NODE	4528:36	4528:36	4	;
LEAF_NODE	4529:2	4529:2	3	dst_rowsize
LEAF_NODE	4529:14	4529:14	3	=
LEAF_NODE	4529:16	4529:16	3	(
LEAF_NODE	4529:17	4529:17	3	(
LEAF_NODE	4529:18	4529:18	3	imagewidth
LEAF_NODE	4529:29	4529:29	3	*
LEAF_NODE	4529:31	4529:31	3	bps
LEAF_NODE	4529:35	4529:35	3	*
LEAF_NODE	4529:37	4529:37	3	spp
LEAF_NODE	4529:40	4529:40	3	)
LEAF_NODE	4529:42	4529:42	3	+
LEAF_NODE	4529:44	4529:44	3	7
LEAF_NODE	4529:45	4529:45	3	)
LEAF_NODE	4529:47	4529:47	3	/
EXPR_STATEMENT	4529:49	4529:50	3	8 ;
EXPR	4529:49	4529:49	4	8
FIELD	4529:49	4529:49	5	8
LEAF_NODE	4529:49	4529:49	6	8
LEAF_NODE	4529:50	4529:50	4	;
EXPR_STATEMENT	4530:2	4530:39	3	maskbits = ( uint32 ) - 1 >> ( 32 - bps ) ;
EXPR	4530:2	4530:2	4	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
ASSIGN	4530:2	4530:14	5	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
LVAL	4530:2	4530:2	6	maskbits
FIELD	4530:2	4530:2	7	maskbits
LEAF_NODE	4530:2	4530:2	8	maskbits
ASSIGN_OP	4530:11	4530:11	6	=
LEAF_NODE	4530:11	4530:11	7	=
RVAL	4530:14	4530:38	6	( uint32 ) - 1 >> ( 32 - bps )
LEAF_NODE	4530:14	4530:14	7	(
TYPE_NAME	4530:15	4530:15	7	uint32
LEAF_NODE	4530:15	4530:15	8	uint32
LEAF_NODE	4530:21	4530:21	7	)
UNARY_EXPR	4530:22	4530:23	7	- 1
UNARY_OPERATOR	4530:22	4530:22	8	-
LEAF_NODE	4530:22	4530:22	9	-
FIELD	4530:23	4530:23	8	1
LEAF_NODE	4530:23	4530:23	9	1
LEAF_NODE	4530:25	4530:25	7	>>
LEAF_NODE	4530:28	4530:28	7	(
FIELD	4530:30	4530:30	7	32
LEAF_NODE	4530:30	4530:30	8	32
LEAF_NODE	4530:33	4530:33	7	-
FIELD	4530:35	4530:35	7	bps
LEAF_NODE	4530:35	4530:35	8	bps
LEAF_NODE	4530:38	4530:38	7	)
LEAF_NODE	4530:39	4530:39	4	;
ITERATION	4532:2	4533:4	3	
KEYWORD	4532:2	4532:2	4	for
LEAF_NODE	4532:2	4532:2	5	for
LEAF_NODE	4532:6	4532:6	4	(
FOR_INIT	4532:7	4532:14	4	row = 0 ;
EXPR	4532:7	4532:7	5	row = 0
ASSIGN	4532:7	4532:13	6	row = 0
LVAL	4532:7	4532:7	7	row
FIELD	4532:7	4532:7	8	row
LEAF_NODE	4532:7	4532:7	9	row
ASSIGN_OP	4532:11	4532:11	7	=
LEAF_NODE	4532:11	4532:11	8	=
RVAL	4532:13	4532:13	7	0
FIELD	4532:13	4532:13	8	0
LEAF_NODE	4532:13	4532:13	9	0
LEAF_NODE	4532:14	4532:14	5	;
CONDITION	4532:16	4532:16	4	row < rows
EXPR	4532:16	4532:22	5	row < rows
FIELD	4532:16	4532:16	6	row
LEAF_NODE	4532:16	4532:16	7	row
REL_OPERATOR	4532:20	4532:20	6	<
LEAF_NODE	4532:20	4532:20	7	<
FIELD	4532:22	4532:22	6	rows
LEAF_NODE	4532:22	4532:22	7	rows
LEAF_NODE	4532:26	4532:26	4	;
FOR_EXPR	4532:28	4532:28	4	row ++
EXPR	4532:28	4532:28	5	row ++
FIELD	4532:28	4532:31	6	row ++
LEAF_NODE	4532:28	4532:28	7	row
LEAF_NODE	4532:31	4532:31	7	++
LEAF_NODE	4532:33	4532:33	4	)
STATEMENTS	4533:4	4623:4	4	
LEAF_NODE	4533:4	4533:4	5	{
STATEMENTS	4534:4	4618:4	5	
EXPR_STATEMENT	4534:4	4534:18	6	ready_bits = 0 ;
EXPR	4534:4	4534:4	7	ready_bits = 0
ASSIGN	4534:4	4534:17	8	ready_bits = 0
LVAL	4534:4	4534:4	9	ready_bits
FIELD	4534:4	4534:4	10	ready_bits
LEAF_NODE	4534:4	4534:4	11	ready_bits
ASSIGN_OP	4534:15	4534:15	9	=
LEAF_NODE	4534:15	4534:15	10	=
RVAL	4534:17	4534:17	9	0
FIELD	4534:17	4534:17	10	0
LEAF_NODE	4534:17	4534:17	11	0
LEAF_NODE	4534:18	4534:18	7	;
EXPR_STATEMENT	4535:4	4535:21	6	buff1 = buff2 = 0 ;
EXPR	4535:4	4535:4	7	buff1 = buff2 = 0
ASSIGN	4535:4	4535:12	8	buff1 = buff2 = 0
LVAL	4535:4	4535:4	9	buff1
FIELD	4535:4	4535:4	10	buff1
LEAF_NODE	4535:4	4535:4	11	buff1
ASSIGN_OP	4535:10	4535:10	9	=
LEAF_NODE	4535:10	4535:10	10	=
RVAL	4535:12	4535:12	9	buff2 = 0
ASSIGN	4535:12	4535:20	10	buff2 = 0
LVAL	4535:12	4535:12	11	buff2
FIELD	4535:12	4535:12	12	buff2
LEAF_NODE	4535:12	4535:12	13	buff2
ASSIGN_OP	4535:18	4535:18	11	=
LEAF_NODE	4535:18	4535:18	12	=
RVAL	4535:20	4535:20	11	0
FIELD	4535:20	4535:20	12	0
LEAF_NODE	4535:20	4535:20	13	0
LEAF_NODE	4535:21	4535:21	7	;
EXPR_STATEMENT	4536:4	4536:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	4536:4	4536:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	4536:4	4536:10	8	dst = out + ( row * dst_rowsize )
LVAL	4536:4	4536:4	9	dst
FIELD	4536:4	4536:4	10	dst
LEAF_NODE	4536:4	4536:4	11	dst
ASSIGN_OP	4536:8	4536:8	9	=
LEAF_NODE	4536:8	4536:8	10	=
RVAL	4536:10	4536:34	9	out + ( row * dst_rowsize )
FIELD	4536:10	4536:10	10	out
LEAF_NODE	4536:10	4536:10	11	out
LEAF_NODE	4536:14	4536:14	10	+
LEAF_NODE	4536:16	4536:16	10	(
FIELD	4536:17	4536:17	10	row
LEAF_NODE	4536:17	4536:17	11	row
LEAF_NODE	4536:21	4536:21	10	*
FIELD	4536:23	4536:23	10	dst_rowsize
LEAF_NODE	4536:23	4536:23	11	dst_rowsize
LEAF_NODE	4536:34	4536:34	10	)
LEAF_NODE	4536:35	4536:35	7	;
EXPR_STATEMENT	4537:4	4537:34	6	src_offset = row * src_rowsize ;
EXPR	4537:4	4537:4	7	src_offset = row * src_rowsize
ASSIGN	4537:4	4537:17	8	src_offset = row * src_rowsize
LVAL	4537:4	4537:4	9	src_offset
FIELD	4537:4	4537:4	10	src_offset
LEAF_NODE	4537:4	4537:4	11	src_offset
ASSIGN_OP	4537:15	4537:15	9	=
LEAF_NODE	4537:15	4537:15	10	=
RVAL	4537:17	4537:23	9	row * src_rowsize
FIELD	4537:17	4537:17	10	row
LEAF_NODE	4537:17	4537:17	11	row
LEAF_NODE	4537:21	4537:21	10	*
FIELD	4537:23	4537:23	10	src_rowsize
LEAF_NODE	4537:23	4537:23	11	src_rowsize
LEAF_NODE	4537:34	4537:34	7	;
ITERATION	4538:4	4539:6	6	
KEYWORD	4538:4	4538:4	7	for
LEAF_NODE	4538:4	4538:4	8	for
LEAF_NODE	4538:8	4538:8	7	(
FOR_INIT	4538:9	4538:16	7	col = 0 ;
EXPR	4538:9	4538:9	8	col = 0
ASSIGN	4538:9	4538:15	9	col = 0
LVAL	4538:9	4538:9	10	col
FIELD	4538:9	4538:9	11	col
LEAF_NODE	4538:9	4538:9	12	col
ASSIGN_OP	4538:13	4538:13	10	=
LEAF_NODE	4538:13	4538:13	11	=
RVAL	4538:15	4538:15	10	0
FIELD	4538:15	4538:15	11	0
LEAF_NODE	4538:15	4538:15	12	0
LEAF_NODE	4538:16	4538:16	8	;
CONDITION	4538:18	4538:18	7	col < cols
EXPR	4538:18	4538:24	8	col < cols
FIELD	4538:18	4538:18	9	col
LEAF_NODE	4538:18	4538:18	10	col
REL_OPERATOR	4538:22	4538:22	9	<
LEAF_NODE	4538:22	4538:22	10	<
FIELD	4538:24	4538:24	9	cols
LEAF_NODE	4538:24	4538:24	10	cols
LEAF_NODE	4538:28	4538:28	7	;
FOR_EXPR	4538:30	4538:30	7	col ++
EXPR	4538:30	4538:30	8	col ++
FIELD	4538:30	4538:33	9	col ++
LEAF_NODE	4538:30	4538:30	10	col
LEAF_NODE	4538:33	4538:33	10	++
LEAF_NODE	4538:35	4538:35	7	)
STATEMENTS	4539:6	4590:6	7	
LEAF_NODE	4539:6	4539:6	8	{
STATEMENTS	4541:6	4546:6	8	
EXPR_STATEMENT	4541:6	4541:28	9	bit_offset = col * bps ;
EXPR	4541:6	4541:6	10	bit_offset = col * bps
ASSIGN	4541:6	4541:19	11	bit_offset = col * bps
LVAL	4541:6	4541:6	12	bit_offset
FIELD	4541:6	4541:6	13	bit_offset
LEAF_NODE	4541:6	4541:6	14	bit_offset
ASSIGN_OP	4541:17	4541:17	12	=
LEAF_NODE	4541:17	4541:17	13	=
RVAL	4541:19	4541:25	12	col * bps
FIELD	4541:19	4541:19	13	col
LEAF_NODE	4541:19	4541:19	14	col
LEAF_NODE	4541:23	4541:23	13	*
FIELD	4541:25	4541:25	13	bps
LEAF_NODE	4541:25	4541:25	14	bps
LEAF_NODE	4541:28	4541:28	10	;
EXPR_STATEMENT	4542:6	4542:31	9	src_byte = bit_offset / 8 ;
EXPR	4542:6	4542:6	10	src_byte = bit_offset / 8
ASSIGN	4542:6	4542:17	11	src_byte = bit_offset / 8
LVAL	4542:6	4542:6	12	src_byte
FIELD	4542:6	4542:6	13	src_byte
LEAF_NODE	4542:6	4542:6	14	src_byte
ASSIGN_OP	4542:15	4542:15	12	=
LEAF_NODE	4542:15	4542:15	13	=
RVAL	4542:17	4542:30	12	bit_offset / 8
FIELD	4542:17	4542:17	13	bit_offset
LEAF_NODE	4542:17	4542:17	14	bit_offset
LEAF_NODE	4542:28	4542:28	13	/
FIELD	4542:30	4542:30	13	8
LEAF_NODE	4542:30	4542:30	14	8
LEAF_NODE	4542:31	4542:31	10	;
EXPR_STATEMENT	4543:6	4543:31	9	src_bit = bit_offset % 8 ;
EXPR	4543:6	4543:6	10	src_bit = bit_offset % 8
ASSIGN	4543:6	4543:17	11	src_bit = bit_offset % 8
LVAL	4543:6	4543:6	12	src_bit
FIELD	4543:6	4543:6	13	src_bit
LEAF_NODE	4543:6	4543:6	14	src_bit
ASSIGN_OP	4543:15	4543:15	12	=
LEAF_NODE	4543:15	4543:15	13	=
RVAL	4543:17	4543:30	12	bit_offset % 8
FIELD	4543:17	4543:17	13	bit_offset
LEAF_NODE	4543:17	4543:17	14	bit_offset
LEAF_NODE	4543:28	4543:28	13	%
FIELD	4543:30	4543:30	13	8
LEAF_NODE	4543:30	4543:30	14	8
LEAF_NODE	4543:31	4543:31	10	;
EXPR_STATEMENT	4545:6	4545:50	9	matchbits = maskbits << ( 32 - src_bit - bps ) ;
EXPR	4545:6	4545:6	10	matchbits = maskbits << ( 32 - src_bit - bps )
ASSIGN	4545:6	4545:18	11	matchbits = maskbits << ( 32 - src_bit - bps )
LVAL	4545:6	4545:6	12	matchbits
FIELD	4545:6	4545:6	13	matchbits
LEAF_NODE	4545:6	4545:6	14	matchbits
ASSIGN_OP	4545:16	4545:16	12	=
LEAF_NODE	4545:16	4545:16	13	=
RVAL	4545:18	4545:49	12	maskbits << ( 32 - src_bit - bps )
FIELD	4545:18	4545:18	13	maskbits
LEAF_NODE	4545:18	4545:18	14	maskbits
LEAF_NODE	4545:27	4545:27	13	<<
LEAF_NODE	4545:30	4545:30	13	(
FIELD	4545:31	4545:31	13	32
LEAF_NODE	4545:31	4545:31	14	32
LEAF_NODE	4545:34	4545:34	13	-
FIELD	4545:36	4545:36	13	src_bit
LEAF_NODE	4545:36	4545:36	14	src_bit
LEAF_NODE	4545:44	4545:44	13	-
FIELD	4545:46	4545:46	13	bps
LEAF_NODE	4545:46	4545:46	14	bps
LEAF_NODE	4545:49	4545:49	13	)
LEAF_NODE	4545:50	4545:50	10	;
ITERATION	4546:6	4547:8	9	
KEYWORD	4546:6	4546:6	10	for
LEAF_NODE	4546:6	4546:6	11	for
LEAF_NODE	4546:10	4546:10	10	(
FOR_INIT	4546:11	4546:16	10	s = 0 ;
EXPR	4546:11	4546:11	11	s = 0
ASSIGN	4546:11	4546:15	12	s = 0
LVAL	4546:11	4546:11	13	s
FIELD	4546:11	4546:11	14	s
LEAF_NODE	4546:11	4546:11	15	s
ASSIGN_OP	4546:13	4546:13	13	=
LEAF_NODE	4546:13	4546:13	14	=
RVAL	4546:15	4546:15	13	0
FIELD	4546:15	4546:15	14	0
LEAF_NODE	4546:15	4546:15	15	0
LEAF_NODE	4546:16	4546:16	11	;
CONDITION	4546:18	4546:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4546:18	4546:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	4546:18	4546:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4546:18	4546:26	13	( s < spp )
LEAF_NODE	4546:18	4546:18	14	(
FIELD	4546:19	4546:19	14	s
LEAF_NODE	4546:19	4546:19	15	s
REL_OPERATOR	4546:21	4546:21	14	<
LEAF_NODE	4546:21	4546:21	15	<
FIELD	4546:23	4546:23	14	spp
LEAF_NODE	4546:23	4546:23	15	spp
LEAF_NODE	4546:26	4546:26	14	)
LEAF_NODE	4546:28	4546:28	13	&&
EXPR	4546:31	4546:47	13	( s < MAX_SAMPLES )
LEAF_NODE	4546:31	4546:31	14	(
FIELD	4546:32	4546:32	14	s
LEAF_NODE	4546:32	4546:32	15	s
REL_OPERATOR	4546:34	4546:34	14	<
LEAF_NODE	4546:34	4546:34	15	<
FIELD	4546:36	4546:36	14	MAX_SAMPLES
LEAF_NODE	4546:36	4546:36	15	MAX_SAMPLES
LEAF_NODE	4546:47	4546:47	14	)
LEAF_NODE	4546:48	4546:48	10	;
FOR_EXPR	4546:50	4546:50	10	s ++
EXPR	4546:50	4546:50	11	s ++
FIELD	4546:50	4546:51	12	s ++
LEAF_NODE	4546:50	4546:50	13	s
LEAF_NODE	4546:51	4546:51	13	++
LEAF_NODE	4546:53	4546:53	10	)
STATEMENTS	4547:8	4589:1	10	
LEAF_NODE	4547:8	4547:8	11	{
STATEMENTS	4548:1	4576:1	11	
EXPR_STATEMENT	4548:1	4548:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	4548:1	4548:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	4548:1	4548:7	14	src = in [ s ] + src_offset + src_byte
LVAL	4548:1	4548:1	15	src
FIELD	4548:1	4548:1	16	src
LEAF_NODE	4548:1	4548:1	17	src
ASSIGN_OP	4548:5	4548:5	15	=
LEAF_NODE	4548:5	4548:5	16	=
RVAL	4548:7	4548:28	15	in [ s ] + src_offset + src_byte
FIELD	4548:7	4548:11	16	in [ s ]
LEAF_NODE	4548:7	4548:7	17	in
LEAF_NODE	4548:9	4548:9	17	[
EXPR	4548:10	4548:10	17	s
FIELD	4548:10	4548:10	18	s
LEAF_NODE	4548:10	4548:10	19	s
LEAF_NODE	4548:11	4548:11	17	]
LEAF_NODE	4548:13	4548:13	16	+
FIELD	4548:15	4548:15	16	src_offset
LEAF_NODE	4548:15	4548:15	17	src_offset
LEAF_NODE	4548:26	4548:26	16	+
FIELD	4548:28	4548:28	16	src_byte
LEAF_NODE	4548:28	4548:28	17	src_byte
LEAF_NODE	4548:36	4548:36	13	;
SELECTION	4549:8	4550:3	12	
KEYWORD	4549:8	4549:8	13	if
LEAF_NODE	4549:8	4549:8	14	if
LEAF_NODE	4549:11	4549:11	13	(
CONDITION	4549:12	4549:12	13	little_endian
EXPR	4549:12	4549:12	14	little_endian
FIELD	4549:12	4549:12	15	little_endian
LEAF_NODE	4549:12	4549:12	16	little_endian
LEAF_NODE	4549:25	4549:25	13	)
STATEMENTS	4550:3	4550:3	13	
EXPR_STATEMENT	4550:3	4550:67	14	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	4550:3	4550:3	15	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	4550:3	4550:11	16	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	4550:3	4550:3	17	buff1
FIELD	4550:3	4550:3	18	buff1
LEAF_NODE	4550:3	4550:3	19	buff1
ASSIGN_OP	4550:9	4550:9	17	=
LEAF_NODE	4550:9	4550:9	18	=
RVAL	4550:11	4550:11	17	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4550:11	4550:28	18	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4550:11	4550:24	19	( src [ 0 ] << 24 )
LEAF_NODE	4550:11	4550:11	20	(
FIELD	4550:12	4550:17	20	src [ 0 ]
LEAF_NODE	4550:12	4550:12	21	src
LEAF_NODE	4550:15	4550:15	21	[
EXPR	4550:16	4550:16	21	0
FIELD	4550:16	4550:16	22	0
LEAF_NODE	4550:16	4550:16	23	0
LEAF_NODE	4550:17	4550:17	21	]
LEAF_NODE	4550:19	4550:19	20	<<
FIELD	4550:22	4550:22	20	24
LEAF_NODE	4550:22	4550:22	21	24
LEAF_NODE	4550:24	4550:24	20	)
LEAF_NODE	4550:26	4550:26	19	|
BIT_OR_ELEM	4550:28	4550:28	19	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4550:28	4550:45	20	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4550:28	4550:41	21	( src [ 1 ] << 16 )
LEAF_NODE	4550:28	4550:28	22	(
FIELD	4550:29	4550:34	22	src [ 1 ]
LEAF_NODE	4550:29	4550:29	23	src
LEAF_NODE	4550:32	4550:32	23	[
EXPR	4550:33	4550:33	23	1
FIELD	4550:33	4550:33	24	1
LEAF_NODE	4550:33	4550:33	25	1
LEAF_NODE	4550:34	4550:34	23	]
LEAF_NODE	4550:36	4550:36	22	<<
FIELD	4550:39	4550:39	22	16
LEAF_NODE	4550:39	4550:39	23	16
LEAF_NODE	4550:41	4550:41	22	)
LEAF_NODE	4550:43	4550:43	21	|
BIT_OR_ELEM	4550:45	4550:45	21	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4550:45	4550:61	22	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4550:45	4550:57	23	( src [ 2 ] << 8 )
LEAF_NODE	4550:45	4550:45	24	(
FIELD	4550:46	4550:51	24	src [ 2 ]
LEAF_NODE	4550:46	4550:46	25	src
LEAF_NODE	4550:49	4550:49	25	[
EXPR	4550:50	4550:50	25	2
FIELD	4550:50	4550:50	26	2
LEAF_NODE	4550:50	4550:50	27	2
LEAF_NODE	4550:51	4550:51	25	]
LEAF_NODE	4550:53	4550:53	24	<<
FIELD	4550:56	4550:56	24	8
LEAF_NODE	4550:56	4550:56	25	8
LEAF_NODE	4550:57	4550:57	24	)
LEAF_NODE	4550:59	4550:59	23	|
BIT_OR_ELEM	4550:61	4550:61	23	src [ 3 ]
FIELD	4550:61	4550:66	24	src [ 3 ]
LEAF_NODE	4550:61	4550:61	25	src
LEAF_NODE	4550:64	4550:64	25	[
EXPR	4550:65	4550:65	25	3
FIELD	4550:65	4550:65	26	3
LEAF_NODE	4550:65	4550:65	27	3
LEAF_NODE	4550:66	4550:66	25	]
LEAF_NODE	4550:67	4550:67	15	;
SELECTION	4551:8	4552:3	12	
KEYWORD	4551:8	4551:8	13	else
LEAF_NODE	4551:8	4551:8	14	else
STATEMENTS	4552:3	4552:3	13	
EXPR_STATEMENT	4552:3	4552:67	14	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	4552:3	4552:3	15	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	4552:3	4552:11	16	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	4552:3	4552:3	17	buff1
FIELD	4552:3	4552:3	18	buff1
LEAF_NODE	4552:3	4552:3	19	buff1
ASSIGN_OP	4552:9	4552:9	17	=
LEAF_NODE	4552:9	4552:9	18	=
RVAL	4552:11	4552:11	17	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4552:11	4552:28	18	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4552:11	4552:24	19	( src [ 3 ] << 24 )
LEAF_NODE	4552:11	4552:11	20	(
FIELD	4552:12	4552:17	20	src [ 3 ]
LEAF_NODE	4552:12	4552:12	21	src
LEAF_NODE	4552:15	4552:15	21	[
EXPR	4552:16	4552:16	21	3
FIELD	4552:16	4552:16	22	3
LEAF_NODE	4552:16	4552:16	23	3
LEAF_NODE	4552:17	4552:17	21	]
LEAF_NODE	4552:19	4552:19	20	<<
FIELD	4552:22	4552:22	20	24
LEAF_NODE	4552:22	4552:22	21	24
LEAF_NODE	4552:24	4552:24	20	)
LEAF_NODE	4552:26	4552:26	19	|
BIT_OR_ELEM	4552:28	4552:28	19	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4552:28	4552:45	20	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4552:28	4552:41	21	( src [ 2 ] << 16 )
LEAF_NODE	4552:28	4552:28	22	(
FIELD	4552:29	4552:34	22	src [ 2 ]
LEAF_NODE	4552:29	4552:29	23	src
LEAF_NODE	4552:32	4552:32	23	[
EXPR	4552:33	4552:33	23	2
FIELD	4552:33	4552:33	24	2
LEAF_NODE	4552:33	4552:33	25	2
LEAF_NODE	4552:34	4552:34	23	]
LEAF_NODE	4552:36	4552:36	22	<<
FIELD	4552:39	4552:39	22	16
LEAF_NODE	4552:39	4552:39	23	16
LEAF_NODE	4552:41	4552:41	22	)
LEAF_NODE	4552:43	4552:43	21	|
BIT_OR_ELEM	4552:45	4552:45	21	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4552:45	4552:61	22	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4552:45	4552:57	23	( src [ 1 ] << 8 )
LEAF_NODE	4552:45	4552:45	24	(
FIELD	4552:46	4552:51	24	src [ 1 ]
LEAF_NODE	4552:46	4552:46	25	src
LEAF_NODE	4552:49	4552:49	25	[
EXPR	4552:50	4552:50	25	1
FIELD	4552:50	4552:50	26	1
LEAF_NODE	4552:50	4552:50	27	1
LEAF_NODE	4552:51	4552:51	25	]
LEAF_NODE	4552:53	4552:53	24	<<
FIELD	4552:56	4552:56	24	8
LEAF_NODE	4552:56	4552:56	25	8
LEAF_NODE	4552:57	4552:57	24	)
LEAF_NODE	4552:59	4552:59	23	|
BIT_OR_ELEM	4552:61	4552:61	23	src [ 0 ]
FIELD	4552:61	4552:66	24	src [ 0 ]
LEAF_NODE	4552:61	4552:61	25	src
LEAF_NODE	4552:64	4552:64	25	[
EXPR	4552:65	4552:65	25	0
FIELD	4552:65	4552:65	26	0
LEAF_NODE	4552:65	4552:65	27	0
LEAF_NODE	4552:66	4552:66	25	]
LEAF_NODE	4552:67	4552:67	15	;
LEAF_NODE	4553:1	4553:1	12	buff1
LEAF_NODE	4553:7	4553:7	12	=
LEAF_NODE	4553:9	4553:9	12	(
LEAF_NODE	4553:10	4553:10	12	buff1
LEAF_NODE	4553:16	4553:16	12	&
LEAF_NODE	4553:18	4553:18	12	matchbits
LEAF_NODE	4553:27	4553:27	12	)
LEAF_NODE	4553:29	4553:29	12	<<
LEAF_NODE	4553:32	4553:32	12	(
LEAF_NODE	4553:33	4553:33	12	src_bit
LEAF_NODE	4553:40	4553:40	12	)
LEAF_NODE	4553:41	4553:41	12	;
SELECTION	4556:1	4557:3	12	
KEYWORD	4556:1	4556:1	13	if
LEAF_NODE	4556:1	4556:1	14	if
LEAF_NODE	4556:4	4556:4	13	(
CONDITION	4556:5	4556:5	13	ready_bits >= 16
EXPR	4556:5	4556:19	14	ready_bits >= 16
FIELD	4556:5	4556:5	15	ready_bits
LEAF_NODE	4556:5	4556:5	16	ready_bits
REL_OPERATOR	4556:16	4556:16	15	>=
LEAF_NODE	4556:16	4556:16	16	>=
FIELD	4556:19	4556:19	15	16
LEAF_NODE	4556:19	4556:19	16	16
LEAF_NODE	4556:21	4556:21	13	)
STATEMENTS	4557:3	4567:3	13	
LEAF_NODE	4557:3	4557:3	14	{
STATEMENTS	4558:5	4566:5	14	
EXPR_STATEMENT	4558:5	4558:30	15	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	4558:5	4558:5	16	bytebuff1 = ( buff2 >> 24 )
ASSIGN	4558:5	4558:17	17	bytebuff1 = ( buff2 >> 24 )
LVAL	4558:5	4558:5	18	bytebuff1
FIELD	4558:5	4558:5	19	bytebuff1
LEAF_NODE	4558:5	4558:5	20	bytebuff1
ASSIGN_OP	4558:15	4558:15	18	=
LEAF_NODE	4558:15	4558:15	19	=
RVAL	4558:17	4558:29	18	( buff2 >> 24 )
LEAF_NODE	4558:17	4558:17	19	(
FIELD	4558:18	4558:18	19	buff2
LEAF_NODE	4558:18	4558:18	20	buff2
LEAF_NODE	4558:24	4558:24	19	>>
FIELD	4558:27	4558:27	19	24
LEAF_NODE	4558:27	4558:27	20	24
LEAF_NODE	4558:29	4558:29	19	)
LEAF_NODE	4558:30	4558:30	16	;
EXPR_STATEMENT	4559:5	4559:23	15	* dst ++ = bytebuff1 ;
EXPR	4559:5	4559:5	16	* dst ++ = bytebuff1
ASSIGN	4559:5	4559:14	17	* dst ++ = bytebuff1
LVAL	4559:5	4559:5	18	* dst ++
UNARY_EXPR	4559:5	4559:6	19	* dst ++
UNARY_OPERATOR	4559:5	4559:5	20	*
LEAF_NODE	4559:5	4559:5	21	*
FIELD	4559:6	4559:9	20	dst ++
LEAF_NODE	4559:6	4559:6	21	dst
LEAF_NODE	4559:9	4559:9	21	++
ASSIGN_OP	4559:12	4559:12	18	=
LEAF_NODE	4559:12	4559:12	19	=
RVAL	4559:14	4559:14	18	bytebuff1
FIELD	4559:14	4559:14	19	bytebuff1
LEAF_NODE	4559:14	4559:14	20	bytebuff1
LEAF_NODE	4559:23	4559:23	16	;
EXPR_STATEMENT	4560:5	4560:30	15	bytebuff2 = ( buff2 >> 16 ) ;
EXPR	4560:5	4560:5	16	bytebuff2 = ( buff2 >> 16 )
ASSIGN	4560:5	4560:17	17	bytebuff2 = ( buff2 >> 16 )
LVAL	4560:5	4560:5	18	bytebuff2
FIELD	4560:5	4560:5	19	bytebuff2
LEAF_NODE	4560:5	4560:5	20	bytebuff2
ASSIGN_OP	4560:15	4560:15	18	=
LEAF_NODE	4560:15	4560:15	19	=
RVAL	4560:17	4560:29	18	( buff2 >> 16 )
LEAF_NODE	4560:17	4560:17	19	(
FIELD	4560:18	4560:18	19	buff2
LEAF_NODE	4560:18	4560:18	20	buff2
LEAF_NODE	4560:24	4560:24	19	>>
FIELD	4560:27	4560:27	19	16
LEAF_NODE	4560:27	4560:27	20	16
LEAF_NODE	4560:29	4560:29	19	)
LEAF_NODE	4560:30	4560:30	16	;
EXPR_STATEMENT	4561:5	4561:23	15	* dst ++ = bytebuff2 ;
EXPR	4561:5	4561:5	16	* dst ++ = bytebuff2
ASSIGN	4561:5	4561:14	17	* dst ++ = bytebuff2
LVAL	4561:5	4561:5	18	* dst ++
UNARY_EXPR	4561:5	4561:6	19	* dst ++
UNARY_OPERATOR	4561:5	4561:5	20	*
LEAF_NODE	4561:5	4561:5	21	*
FIELD	4561:6	4561:9	20	dst ++
LEAF_NODE	4561:6	4561:6	21	dst
LEAF_NODE	4561:9	4561:9	21	++
ASSIGN_OP	4561:12	4561:12	18	=
LEAF_NODE	4561:12	4561:12	19	=
RVAL	4561:14	4561:14	18	bytebuff2
FIELD	4561:14	4561:14	19	bytebuff2
LEAF_NODE	4561:14	4561:14	20	bytebuff2
LEAF_NODE	4561:23	4561:23	16	;
EXPR_STATEMENT	4562:5	4562:21	15	ready_bits -= 16 ;
EXPR	4562:5	4562:5	16	ready_bits -= 16
ASSIGN	4562:5	4562:19	17	ready_bits -= 16
LVAL	4562:5	4562:5	18	ready_bits
FIELD	4562:5	4562:5	19	ready_bits
LEAF_NODE	4562:5	4562:5	20	ready_bits
ASSIGN_OP	4562:16	4562:16	18	-=
LEAF_NODE	4562:16	4562:16	19	-=
RVAL	4562:19	4562:19	18	16
FIELD	4562:19	4562:19	19	16
LEAF_NODE	4562:19	4562:19	20	16
LEAF_NODE	4562:21	4562:21	16	;
EXPR_STATEMENT	4565:5	4565:52	15	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) ) ;
EXPR	4565:5	4565:5	16	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
ASSIGN	4565:5	4565:13	17	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LVAL	4565:5	4565:5	18	buff2
FIELD	4565:5	4565:5	19	buff2
LEAF_NODE	4565:5	4565:5	20	buff2
ASSIGN_OP	4565:11	4565:11	18	=
LEAF_NODE	4565:11	4565:11	19	=
RVAL	4565:13	4565:51	18	( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	4565:13	4565:13	19	(
BIT_OR	4565:14	4565:30	19	( buff2 << 16 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	4565:14	4565:26	20	( buff2 << 16 )
LEAF_NODE	4565:14	4565:14	21	(
FIELD	4565:15	4565:15	21	buff2
LEAF_NODE	4565:15	4565:15	22	buff2
LEAF_NODE	4565:21	4565:21	21	<<
FIELD	4565:24	4565:24	21	16
LEAF_NODE	4565:24	4565:24	22	16
LEAF_NODE	4565:26	4565:26	21	)
LEAF_NODE	4565:28	4565:28	20	|
BIT_OR_ELEM	4565:30	4565:50	20	( buff1 >> ready_bits )
LEAF_NODE	4565:30	4565:30	21	(
FIELD	4565:31	4565:31	21	buff1
LEAF_NODE	4565:31	4565:31	22	buff1
LEAF_NODE	4565:37	4565:37	21	>>
FIELD	4565:40	4565:40	21	ready_bits
LEAF_NODE	4565:40	4565:40	22	ready_bits
LEAF_NODE	4565:50	4565:50	21	)
LEAF_NODE	4565:51	4565:51	19	)
LEAF_NODE	4565:52	4565:52	16	;
EXPR_STATEMENT	4566:5	4566:29	15	strcpy ( action , "Flush" ) ;
EXPR	4566:5	4566:5	16	strcpy ( action , "Flush" )
FUNCTION_CALL	4566:5	4566:28	17	strcpy ( action , "Flush" )
CALLEE	4566:5	4566:5	18	strcpy
LEAF_NODE	4566:5	4566:5	19	strcpy
LEAF_NODE	4566:12	4566:12	18	(
ARGUMENT	4566:13	4566:13	18	action
FIELD	4566:13	4566:13	19	action
LEAF_NODE	4566:13	4566:13	20	action
LEAF_NODE	4566:19	4566:19	18	,
ARGUMENT	4566:21	4566:21	18	"Flush"
FIELD	4566:21	4566:21	19	"Flush"
LEAF_NODE	4566:21	4566:21	20	"Flush"
LEAF_NODE	4566:28	4566:28	18	)
LEAF_NODE	4566:29	4566:29	16	;
LEAF_NODE	4567:3	4567:3	14	}
SELECTION	4568:1	4569:3	12	
KEYWORD	4568:1	4568:1	13	else
LEAF_NODE	4568:1	4568:1	14	else
STATEMENTS	4569:3	4573:3	13	
LEAF_NODE	4569:3	4569:3	14	{
STATEMENTS	4570:5	4572:5	14	
EXPR_STATEMENT	4570:5	4570:30	15	bytebuff1 = bytebuff2 = 0 ;
EXPR	4570:5	4570:5	16	bytebuff1 = bytebuff2 = 0
ASSIGN	4570:5	4570:17	17	bytebuff1 = bytebuff2 = 0
LVAL	4570:5	4570:5	18	bytebuff1
FIELD	4570:5	4570:5	19	bytebuff1
LEAF_NODE	4570:5	4570:5	20	bytebuff1
ASSIGN_OP	4570:15	4570:15	18	=
LEAF_NODE	4570:15	4570:15	19	=
RVAL	4570:17	4570:17	18	bytebuff2 = 0
ASSIGN	4570:17	4570:29	19	bytebuff2 = 0
LVAL	4570:17	4570:17	20	bytebuff2
FIELD	4570:17	4570:17	21	bytebuff2
LEAF_NODE	4570:17	4570:17	22	bytebuff2
ASSIGN_OP	4570:27	4570:27	20	=
LEAF_NODE	4570:27	4570:27	21	=
RVAL	4570:29	4570:29	20	0
FIELD	4570:29	4570:29	21	0
LEAF_NODE	4570:29	4570:29	22	0
LEAF_NODE	4570:30	4570:30	16	;
EXPR_STATEMENT	4571:5	4571:44	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	4571:5	4571:5	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	4571:5	4571:13	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	4571:5	4571:5	18	buff2
FIELD	4571:5	4571:5	19	buff2
LEAF_NODE	4571:5	4571:5	20	buff2
ASSIGN_OP	4571:11	4571:11	18	=
LEAF_NODE	4571:11	4571:11	19	=
RVAL	4571:13	4571:43	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	4571:13	4571:13	19	(
BIT_OR	4571:14	4571:22	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	4571:14	4571:14	20	buff2
FIELD	4571:14	4571:14	21	buff2
LEAF_NODE	4571:14	4571:14	22	buff2
LEAF_NODE	4571:20	4571:20	20	|
BIT_OR_ELEM	4571:22	4571:42	20	( buff1 >> ready_bits )
LEAF_NODE	4571:22	4571:22	21	(
FIELD	4571:23	4571:23	21	buff1
LEAF_NODE	4571:23	4571:23	22	buff1
LEAF_NODE	4571:29	4571:29	21	>>
FIELD	4571:32	4571:32	21	ready_bits
LEAF_NODE	4571:32	4571:32	22	ready_bits
LEAF_NODE	4571:42	4571:42	21	)
LEAF_NODE	4571:43	4571:43	19	)
LEAF_NODE	4571:44	4571:44	16	;
EXPR_STATEMENT	4572:5	4572:30	15	strcpy ( action , "Update" ) ;
EXPR	4572:5	4572:5	16	strcpy ( action , "Update" )
FUNCTION_CALL	4572:5	4572:29	17	strcpy ( action , "Update" )
CALLEE	4572:5	4572:5	18	strcpy
LEAF_NODE	4572:5	4572:5	19	strcpy
LEAF_NODE	4572:12	4572:12	18	(
ARGUMENT	4572:13	4572:13	18	action
FIELD	4572:13	4572:13	19	action
LEAF_NODE	4572:13	4572:13	20	action
LEAF_NODE	4572:19	4572:19	18	,
ARGUMENT	4572:21	4572:21	18	"Update"
FIELD	4572:21	4572:21	19	"Update"
LEAF_NODE	4572:21	4572:21	20	"Update"
LEAF_NODE	4572:29	4572:29	18	)
LEAF_NODE	4572:30	4572:30	16	;
LEAF_NODE	4573:3	4573:3	14	}
EXPR_STATEMENT	4574:1	4574:18	12	ready_bits += bps ;
EXPR	4574:1	4574:1	13	ready_bits += bps
ASSIGN	4574:1	4574:15	14	ready_bits += bps
LVAL	4574:1	4574:1	15	ready_bits
FIELD	4574:1	4574:1	16	ready_bits
LEAF_NODE	4574:1	4574:1	17	ready_bits
ASSIGN_OP	4574:12	4574:12	15	+=
LEAF_NODE	4574:12	4574:12	16	+=
RVAL	4574:15	4574:15	15	bps
FIELD	4574:15	4574:15	16	bps
LEAF_NODE	4574:15	4574:15	17	bps
LEAF_NODE	4574:18	4574:18	13	;
SELECTION	4576:1	4577:3	12	
KEYWORD	4576:1	4576:1	13	if
LEAF_NODE	4576:1	4576:1	14	if
LEAF_NODE	4576:4	4576:4	13	(
CONDITION	4576:5	4576:5	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	4576:5	4576:5	14	( dumpfile != NULL ) && ( level == 3 )
AND	4576:5	4576:27	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	4576:5	4576:22	16	( dumpfile != NULL )
LEAF_NODE	4576:5	4576:5	17	(
FIELD	4576:6	4576:6	17	dumpfile
LEAF_NODE	4576:6	4576:6	18	dumpfile
EQ_OPERATOR	4576:15	4576:15	17	!=
LEAF_NODE	4576:15	4576:15	18	!=
FIELD	4576:18	4576:18	17	NULL
LEAF_NODE	4576:18	4576:18	18	NULL
LEAF_NODE	4576:22	4576:22	17	)
LEAF_NODE	4576:24	4576:24	16	&&
EXPR	4576:27	4576:38	16	( level == 3 )
LEAF_NODE	4576:27	4576:27	17	(
FIELD	4576:28	4576:28	17	level
LEAF_NODE	4576:28	4576:28	18	level
EQ_OPERATOR	4576:34	4576:34	17	==
LEAF_NODE	4576:34	4576:34	18	==
FIELD	4576:37	4576:37	17	3
LEAF_NODE	4576:37	4576:37	18	3
LEAF_NODE	4576:38	4576:38	17	)
LEAF_NODE	4576:39	4576:39	13	)
STATEMENTS	4577:3	4588:3	13	
LEAF_NODE	4577:3	4577:3	14	{
STATEMENTS	4578:3	4587:3	14	
EXPR_STATEMENT	4578:3	4580:59	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	4578:3	4578:3	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	4578:3	4580:58	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	4578:3	4578:3	18	dump_info
LEAF_NODE	4578:3	4578:3	19	dump_info
LEAF_NODE	4578:13	4578:13	18	(
ARGUMENT	4578:14	4578:14	18	dumpfile
FIELD	4578:14	4578:14	19	dumpfile
LEAF_NODE	4578:14	4578:14	20	dumpfile
LEAF_NODE	4578:22	4578:22	18	,
ARGUMENT	4578:24	4578:24	18	format
FIELD	4578:24	4578:24	19	format
LEAF_NODE	4578:24	4578:24	20	format
LEAF_NODE	4578:30	4578:30	18	,
ARGUMENT	4578:32	4578:32	18	""
FIELD	4578:32	4578:32	19	""
LEAF_NODE	4578:32	4578:32	20	""
LEAF_NODE	4578:34	4578:34	18	,
ARGUMENT	4579:9	4579:9	18	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4579:9	4579:9	19	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4579:9	4579:9	20	"Row %3d, Col %3d, Samples %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4579:92	4579:92	18	,
ARGUMENT	4580:9	4580:15	18	row + 1
FIELD	4580:9	4580:9	19	row
LEAF_NODE	4580:9	4580:9	20	row
LEAF_NODE	4580:13	4580:13	19	+
FIELD	4580:15	4580:15	19	1
LEAF_NODE	4580:15	4580:15	20	1
LEAF_NODE	4580:16	4580:16	18	,
ARGUMENT	4580:18	4580:24	18	col + 1
FIELD	4580:18	4580:18	19	col
LEAF_NODE	4580:18	4580:18	20	col
LEAF_NODE	4580:22	4580:22	19	+
FIELD	4580:24	4580:24	19	1
LEAF_NODE	4580:24	4580:24	20	1
LEAF_NODE	4580:25	4580:25	18	,
ARGUMENT	4580:27	4580:27	18	s
FIELD	4580:27	4580:27	19	s
LEAF_NODE	4580:27	4580:27	20	s
LEAF_NODE	4580:28	4580:28	18	,
ARGUMENT	4580:30	4580:30	18	src_byte
FIELD	4580:30	4580:30	19	src_byte
LEAF_NODE	4580:30	4580:30	20	src_byte
LEAF_NODE	4580:38	4580:38	18	,
ARGUMENT	4580:40	4580:40	18	src_bit
FIELD	4580:40	4580:40	19	src_bit
LEAF_NODE	4580:40	4580:40	20	src_bit
LEAF_NODE	4580:47	4580:47	18	,
ARGUMENT	4580:49	4580:55	18	dst - out
FIELD	4580:49	4580:49	19	dst
LEAF_NODE	4580:49	4580:49	20	dst
LEAF_NODE	4580:53	4580:53	19	-
FIELD	4580:55	4580:55	19	out
LEAF_NODE	4580:55	4580:55	20	out
LEAF_NODE	4580:58	4580:58	18	)
LEAF_NODE	4580:59	4580:59	16	;
EXPR_STATEMENT	4581:3	4581:57	15	dump_long ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4581:3	4581:3	16	dump_long ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4581:3	4581:56	17	dump_long ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4581:3	4581:3	18	dump_long
LEAF_NODE	4581:3	4581:3	19	dump_long
LEAF_NODE	4581:13	4581:13	18	(
ARGUMENT	4581:14	4581:14	18	dumpfile
FIELD	4581:14	4581:14	19	dumpfile
LEAF_NODE	4581:14	4581:14	20	dumpfile
LEAF_NODE	4581:22	4581:22	18	,
ARGUMENT	4581:24	4581:24	18	format
FIELD	4581:24	4581:24	19	format
LEAF_NODE	4581:24	4581:24	20	format
LEAF_NODE	4581:30	4581:30	18	,
ARGUMENT	4581:32	4581:32	18	"Match bits "
FIELD	4581:32	4581:32	19	"Match bits "
LEAF_NODE	4581:32	4581:32	20	"Match bits "
LEAF_NODE	4581:45	4581:45	18	,
ARGUMENT	4581:47	4581:47	18	matchbits
FIELD	4581:47	4581:47	19	matchbits
LEAF_NODE	4581:47	4581:47	20	matchbits
LEAF_NODE	4581:56	4581:56	18	)
LEAF_NODE	4581:57	4581:57	16	;
EXPR_STATEMENT	4582:3	4582:54	15	dump_data ( dumpfile , format , "Src   bits " , src , 4 ) ;
EXPR	4582:3	4582:3	16	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
FUNCTION_CALL	4582:3	4582:53	17	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
CALLEE	4582:3	4582:3	18	dump_data
LEAF_NODE	4582:3	4582:3	19	dump_data
LEAF_NODE	4582:13	4582:13	18	(
ARGUMENT	4582:14	4582:14	18	dumpfile
FIELD	4582:14	4582:14	19	dumpfile
LEAF_NODE	4582:14	4582:14	20	dumpfile
LEAF_NODE	4582:22	4582:22	18	,
ARGUMENT	4582:24	4582:24	18	format
FIELD	4582:24	4582:24	19	format
LEAF_NODE	4582:24	4582:24	20	format
LEAF_NODE	4582:30	4582:30	18	,
ARGUMENT	4582:32	4582:32	18	"Src   bits "
FIELD	4582:32	4582:32	19	"Src   bits "
LEAF_NODE	4582:32	4582:32	20	"Src   bits "
LEAF_NODE	4582:45	4582:45	18	,
ARGUMENT	4582:47	4582:47	18	src
FIELD	4582:47	4582:47	19	src
LEAF_NODE	4582:47	4582:47	20	src
LEAF_NODE	4582:50	4582:50	18	,
ARGUMENT	4582:52	4582:52	18	4
FIELD	4582:52	4582:52	19	4
LEAF_NODE	4582:52	4582:52	20	4
LEAF_NODE	4582:53	4582:53	18	)
LEAF_NODE	4582:54	4582:54	16	;
EXPR_STATEMENT	4583:3	4583:53	15	dump_long ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4583:3	4583:3	16	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4583:3	4583:52	17	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4583:3	4583:3	18	dump_long
LEAF_NODE	4583:3	4583:3	19	dump_long
LEAF_NODE	4583:13	4583:13	18	(
ARGUMENT	4583:14	4583:14	18	dumpfile
FIELD	4583:14	4583:14	19	dumpfile
LEAF_NODE	4583:14	4583:14	20	dumpfile
LEAF_NODE	4583:22	4583:22	18	,
ARGUMENT	4583:24	4583:24	18	format
FIELD	4583:24	4583:24	19	format
LEAF_NODE	4583:24	4583:24	20	format
LEAF_NODE	4583:30	4583:30	18	,
ARGUMENT	4583:32	4583:32	18	"Buff1 bits "
FIELD	4583:32	4583:32	19	"Buff1 bits "
LEAF_NODE	4583:32	4583:32	20	"Buff1 bits "
LEAF_NODE	4583:45	4583:45	18	,
ARGUMENT	4583:47	4583:47	18	buff1
FIELD	4583:47	4583:47	19	buff1
LEAF_NODE	4583:47	4583:47	20	buff1
LEAF_NODE	4583:52	4583:52	18	)
LEAF_NODE	4583:53	4583:53	16	;
EXPR_STATEMENT	4584:3	4584:53	15	dump_long ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4584:3	4584:3	16	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4584:3	4584:52	17	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4584:3	4584:3	18	dump_long
LEAF_NODE	4584:3	4584:3	19	dump_long
LEAF_NODE	4584:13	4584:13	18	(
ARGUMENT	4584:14	4584:14	18	dumpfile
FIELD	4584:14	4584:14	19	dumpfile
LEAF_NODE	4584:14	4584:14	20	dumpfile
LEAF_NODE	4584:22	4584:22	18	,
ARGUMENT	4584:24	4584:24	18	format
FIELD	4584:24	4584:24	19	format
LEAF_NODE	4584:24	4584:24	20	format
LEAF_NODE	4584:30	4584:30	18	,
ARGUMENT	4584:32	4584:32	18	"Buff2 bits "
FIELD	4584:32	4584:32	19	"Buff2 bits "
LEAF_NODE	4584:32	4584:32	20	"Buff2 bits "
LEAF_NODE	4584:45	4584:45	18	,
ARGUMENT	4584:47	4584:47	18	buff2
FIELD	4584:47	4584:47	19	buff2
LEAF_NODE	4584:47	4584:47	20	buff2
LEAF_NODE	4584:52	4584:52	18	)
LEAF_NODE	4584:53	4584:53	16	;
EXPR_STATEMENT	4585:3	4585:57	15	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 ) ;
EXPR	4585:3	4585:3	16	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
FUNCTION_CALL	4585:3	4585:56	17	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
CALLEE	4585:3	4585:3	18	dump_byte
LEAF_NODE	4585:3	4585:3	19	dump_byte
LEAF_NODE	4585:13	4585:13	18	(
ARGUMENT	4585:14	4585:14	18	dumpfile
FIELD	4585:14	4585:14	19	dumpfile
LEAF_NODE	4585:14	4585:14	20	dumpfile
LEAF_NODE	4585:22	4585:22	18	,
ARGUMENT	4585:24	4585:24	18	format
FIELD	4585:24	4585:24	19	format
LEAF_NODE	4585:24	4585:24	20	format
LEAF_NODE	4585:30	4585:30	18	,
ARGUMENT	4585:32	4585:32	18	"Write bits1"
FIELD	4585:32	4585:32	19	"Write bits1"
LEAF_NODE	4585:32	4585:32	20	"Write bits1"
LEAF_NODE	4585:45	4585:45	18	,
ARGUMENT	4585:47	4585:47	18	bytebuff1
FIELD	4585:47	4585:47	19	bytebuff1
LEAF_NODE	4585:47	4585:47	20	bytebuff1
LEAF_NODE	4585:56	4585:56	18	)
LEAF_NODE	4585:57	4585:57	16	;
EXPR_STATEMENT	4586:3	4586:57	15	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 ) ;
EXPR	4586:3	4586:3	16	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
FUNCTION_CALL	4586:3	4586:56	17	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
CALLEE	4586:3	4586:3	18	dump_byte
LEAF_NODE	4586:3	4586:3	19	dump_byte
LEAF_NODE	4586:13	4586:13	18	(
ARGUMENT	4586:14	4586:14	18	dumpfile
FIELD	4586:14	4586:14	19	dumpfile
LEAF_NODE	4586:14	4586:14	20	dumpfile
LEAF_NODE	4586:22	4586:22	18	,
ARGUMENT	4586:24	4586:24	18	format
FIELD	4586:24	4586:24	19	format
LEAF_NODE	4586:24	4586:24	20	format
LEAF_NODE	4586:30	4586:30	18	,
ARGUMENT	4586:32	4586:32	18	"Write bits2"
FIELD	4586:32	4586:32	19	"Write bits2"
LEAF_NODE	4586:32	4586:32	20	"Write bits2"
LEAF_NODE	4586:45	4586:45	18	,
ARGUMENT	4586:47	4586:47	18	bytebuff2
FIELD	4586:47	4586:47	19	bytebuff2
LEAF_NODE	4586:47	4586:47	20	bytebuff2
LEAF_NODE	4586:56	4586:56	18	)
LEAF_NODE	4586:57	4586:57	16	;
EXPR_STATEMENT	4587:3	4587:78	15	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action ) ;
EXPR	4587:3	4587:3	16	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
FUNCTION_CALL	4587:3	4587:77	17	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
CALLEE	4587:3	4587:3	18	dump_info
LEAF_NODE	4587:3	4587:3	19	dump_info
LEAF_NODE	4587:13	4587:13	18	(
ARGUMENT	4587:14	4587:14	18	dumpfile
FIELD	4587:14	4587:14	19	dumpfile
LEAF_NODE	4587:14	4587:14	20	dumpfile
LEAF_NODE	4587:22	4587:22	18	,
ARGUMENT	4587:24	4587:24	18	format
FIELD	4587:24	4587:24	19	format
LEAF_NODE	4587:24	4587:24	20	format
LEAF_NODE	4587:30	4587:30	18	,
ARGUMENT	4587:32	4587:32	18	""
FIELD	4587:32	4587:32	19	""
LEAF_NODE	4587:32	4587:32	20	""
LEAF_NODE	4587:34	4587:34	18	,
ARGUMENT	4587:35	4587:35	18	"Ready bits:   %d, %s"
FIELD	4587:35	4587:35	19	"Ready bits:   %d, %s"
LEAF_NODE	4587:35	4587:35	20	"Ready bits:   %d, %s"
LEAF_NODE	4587:57	4587:57	18	,
ARGUMENT	4587:59	4587:59	18	ready_bits
FIELD	4587:59	4587:59	19	ready_bits
LEAF_NODE	4587:59	4587:59	20	ready_bits
LEAF_NODE	4587:69	4587:69	18	,
ARGUMENT	4587:71	4587:71	18	action
FIELD	4587:71	4587:71	19	action
LEAF_NODE	4587:71	4587:71	20	action
LEAF_NODE	4587:77	4587:77	18	)
LEAF_NODE	4587:78	4587:78	16	;
LEAF_NODE	4588:3	4588:3	14	}
LEAF_NODE	4589:1	4589:1	11	}
LEAF_NODE	4590:6	4590:6	8	}
ITERATION	4593:4	4594:6	6	
KEYWORD	4593:4	4593:4	7	while
LEAF_NODE	4593:4	4593:4	8	while
LEAF_NODE	4593:10	4593:10	7	(
CONDITION	4593:11	4593:11	7	ready_bits > 0
EXPR	4593:11	4593:24	8	ready_bits > 0
FIELD	4593:11	4593:11	9	ready_bits
LEAF_NODE	4593:11	4593:11	10	ready_bits
REL_OPERATOR	4593:22	4593:22	9	>
LEAF_NODE	4593:22	4593:22	10	>
FIELD	4593:24	4593:24	9	0
LEAF_NODE	4593:24	4593:24	10	0
LEAF_NODE	4593:25	4593:25	7	)
STATEMENTS	4594:6	4601:6	7	
LEAF_NODE	4594:6	4594:6	8	{
STATEMENTS	4595:1	4600:1	8	
EXPR_STATEMENT	4595:1	4595:26	9	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	4595:1	4595:1	10	bytebuff1 = ( buff2 >> 24 )
ASSIGN	4595:1	4595:13	11	bytebuff1 = ( buff2 >> 24 )
LVAL	4595:1	4595:1	12	bytebuff1
FIELD	4595:1	4595:1	13	bytebuff1
LEAF_NODE	4595:1	4595:1	14	bytebuff1
ASSIGN_OP	4595:11	4595:11	12	=
LEAF_NODE	4595:11	4595:11	13	=
RVAL	4595:13	4595:25	12	( buff2 >> 24 )
LEAF_NODE	4595:13	4595:13	13	(
FIELD	4595:14	4595:14	13	buff2
LEAF_NODE	4595:14	4595:14	14	buff2
LEAF_NODE	4595:20	4595:20	13	>>
FIELD	4595:23	4595:23	13	24
LEAF_NODE	4595:23	4595:23	14	24
LEAF_NODE	4595:25	4595:25	13	)
LEAF_NODE	4595:26	4595:26	10	;
EXPR_STATEMENT	4596:1	4596:19	9	* dst ++ = bytebuff1 ;
EXPR	4596:1	4596:1	10	* dst ++ = bytebuff1
ASSIGN	4596:1	4596:10	11	* dst ++ = bytebuff1
LVAL	4596:1	4596:1	12	* dst ++
UNARY_EXPR	4596:1	4596:2	13	* dst ++
UNARY_OPERATOR	4596:1	4596:1	14	*
LEAF_NODE	4596:1	4596:1	15	*
FIELD	4596:2	4596:5	14	dst ++
LEAF_NODE	4596:2	4596:2	15	dst
LEAF_NODE	4596:5	4596:5	15	++
ASSIGN_OP	4596:8	4596:8	12	=
LEAF_NODE	4596:8	4596:8	13	=
RVAL	4596:10	4596:10	12	bytebuff1
FIELD	4596:10	4596:10	13	bytebuff1
LEAF_NODE	4596:10	4596:10	14	bytebuff1
LEAF_NODE	4596:19	4596:19	10	;
EXPR_STATEMENT	4598:1	4598:21	9	buff2 = ( buff2 << 8 ) ;
EXPR	4598:1	4598:1	10	buff2 = ( buff2 << 8 )
ASSIGN	4598:1	4598:9	11	buff2 = ( buff2 << 8 )
LVAL	4598:1	4598:1	12	buff2
FIELD	4598:1	4598:1	13	buff2
LEAF_NODE	4598:1	4598:1	14	buff2
ASSIGN_OP	4598:7	4598:7	12	=
LEAF_NODE	4598:7	4598:7	13	=
RVAL	4598:9	4598:20	12	( buff2 << 8 )
LEAF_NODE	4598:9	4598:9	13	(
FIELD	4598:10	4598:10	13	buff2
LEAF_NODE	4598:10	4598:10	14	buff2
LEAF_NODE	4598:16	4598:16	13	<<
FIELD	4598:19	4598:19	13	8
LEAF_NODE	4598:19	4598:19	14	8
LEAF_NODE	4598:20	4598:20	13	)
LEAF_NODE	4598:21	4598:21	10	;
EXPR_STATEMENT	4599:1	4599:22	9	bytebuff2 = bytebuff1 ;
EXPR	4599:1	4599:1	10	bytebuff2 = bytebuff1
ASSIGN	4599:1	4599:13	11	bytebuff2 = bytebuff1
LVAL	4599:1	4599:1	12	bytebuff2
FIELD	4599:1	4599:1	13	bytebuff2
LEAF_NODE	4599:1	4599:1	14	bytebuff2
ASSIGN_OP	4599:11	4599:11	12	=
LEAF_NODE	4599:11	4599:11	13	=
RVAL	4599:13	4599:13	12	bytebuff1
FIELD	4599:13	4599:13	13	bytebuff1
LEAF_NODE	4599:13	4599:13	14	bytebuff1
LEAF_NODE	4599:22	4599:22	10	;
EXPR_STATEMENT	4600:1	4600:16	9	ready_bits -= 8 ;
EXPR	4600:1	4600:1	10	ready_bits -= 8
ASSIGN	4600:1	4600:15	11	ready_bits -= 8
LVAL	4600:1	4600:1	12	ready_bits
FIELD	4600:1	4600:1	13	ready_bits
LEAF_NODE	4600:1	4600:1	14	ready_bits
ASSIGN_OP	4600:12	4600:12	12	-=
LEAF_NODE	4600:12	4600:12	13	-=
RVAL	4600:15	4600:15	12	8
FIELD	4600:15	4600:15	13	8
LEAF_NODE	4600:15	4600:15	14	8
LEAF_NODE	4600:16	4600:16	10	;
LEAF_NODE	4601:6	4601:6	8	}
SELECTION	4603:4	4604:6	6	
KEYWORD	4603:4	4603:4	7	if
LEAF_NODE	4603:4	4603:4	8	if
LEAF_NODE	4603:7	4603:7	7	(
CONDITION	4603:8	4603:8	7	( dumpfile != NULL ) && ( level == 3 )
EXPR	4603:8	4603:8	8	( dumpfile != NULL ) && ( level == 3 )
AND	4603:8	4603:30	9	( dumpfile != NULL ) && ( level == 3 )
EXPR	4603:8	4603:25	10	( dumpfile != NULL )
LEAF_NODE	4603:8	4603:8	11	(
FIELD	4603:9	4603:9	11	dumpfile
LEAF_NODE	4603:9	4603:9	12	dumpfile
EQ_OPERATOR	4603:18	4603:18	11	!=
LEAF_NODE	4603:18	4603:18	12	!=
FIELD	4603:21	4603:21	11	NULL
LEAF_NODE	4603:21	4603:21	12	NULL
LEAF_NODE	4603:25	4603:25	11	)
LEAF_NODE	4603:27	4603:27	10	&&
EXPR	4603:30	4603:41	10	( level == 3 )
LEAF_NODE	4603:30	4603:30	11	(
FIELD	4603:31	4603:31	11	level
LEAF_NODE	4603:31	4603:31	12	level
EQ_OPERATOR	4603:37	4603:37	11	==
LEAF_NODE	4603:37	4603:37	12	==
FIELD	4603:40	4603:40	11	3
LEAF_NODE	4603:40	4603:40	12	3
LEAF_NODE	4603:41	4603:41	11	)
LEAF_NODE	4603:42	4603:42	7	)
STATEMENTS	4604:6	4616:6	7	
LEAF_NODE	4604:6	4604:6	8	{
STATEMENTS	4605:6	4615:6	8	
EXPR_STATEMENT	4605:6	4607:52	9	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	4605:6	4605:6	10	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	4605:6	4607:51	11	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	4605:6	4605:6	12	dump_info
LEAF_NODE	4605:6	4605:6	13	dump_info
LEAF_NODE	4605:16	4605:16	12	(
ARGUMENT	4605:17	4605:17	12	dumpfile
FIELD	4605:17	4605:17	13	dumpfile
LEAF_NODE	4605:17	4605:17	14	dumpfile
LEAF_NODE	4605:25	4605:25	12	,
ARGUMENT	4605:27	4605:27	12	format
FIELD	4605:27	4605:27	13	format
LEAF_NODE	4605:27	4605:27	14	format
LEAF_NODE	4605:33	4605:33	12	,
ARGUMENT	4605:35	4605:35	12	""
FIELD	4605:35	4605:35	13	""
LEAF_NODE	4605:35	4605:35	14	""
LEAF_NODE	4605:37	4605:37	12	,
ARGUMENT	4606:5	4606:5	12	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4606:5	4606:5	13	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4606:5	4606:5	14	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4606:76	4606:76	12	,
ARGUMENT	4607:5	4607:11	12	row + 1
FIELD	4607:5	4607:5	13	row
LEAF_NODE	4607:5	4607:5	14	row
LEAF_NODE	4607:9	4607:9	13	+
FIELD	4607:11	4607:11	13	1
LEAF_NODE	4607:11	4607:11	14	1
LEAF_NODE	4607:12	4607:12	12	,
ARGUMENT	4607:14	4607:20	12	col + 1
FIELD	4607:14	4607:14	13	col
LEAF_NODE	4607:14	4607:14	14	col
LEAF_NODE	4607:18	4607:18	13	+
FIELD	4607:20	4607:20	13	1
LEAF_NODE	4607:20	4607:20	14	1
LEAF_NODE	4607:21	4607:21	12	,
ARGUMENT	4607:23	4607:23	12	src_byte
FIELD	4607:23	4607:23	13	src_byte
LEAF_NODE	4607:23	4607:23	14	src_byte
LEAF_NODE	4607:31	4607:31	12	,
ARGUMENT	4607:33	4607:33	12	src_bit
FIELD	4607:33	4607:33	13	src_bit
LEAF_NODE	4607:33	4607:33	14	src_bit
LEAF_NODE	4607:40	4607:40	12	,
ARGUMENT	4607:42	4607:48	12	dst - out
FIELD	4607:42	4607:42	13	dst
LEAF_NODE	4607:42	4607:42	14	dst
LEAF_NODE	4607:46	4607:46	13	-
FIELD	4607:48	4607:48	13	out
LEAF_NODE	4607:48	4607:48	14	out
LEAF_NODE	4607:51	4607:51	12	)
LEAF_NODE	4607:52	4607:52	10	;
EXPR_STATEMENT	4609:6	4609:60	9	dump_long ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4609:6	4609:6	10	dump_long ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4609:6	4609:59	11	dump_long ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4609:6	4609:6	12	dump_long
LEAF_NODE	4609:6	4609:6	13	dump_long
LEAF_NODE	4609:16	4609:16	12	(
ARGUMENT	4609:17	4609:17	12	dumpfile
FIELD	4609:17	4609:17	13	dumpfile
LEAF_NODE	4609:17	4609:17	14	dumpfile
LEAF_NODE	4609:25	4609:25	12	,
ARGUMENT	4609:27	4609:27	12	format
FIELD	4609:27	4609:27	13	format
LEAF_NODE	4609:27	4609:27	14	format
LEAF_NODE	4609:33	4609:33	12	,
ARGUMENT	4609:35	4609:35	12	"Match bits "
FIELD	4609:35	4609:35	13	"Match bits "
LEAF_NODE	4609:35	4609:35	14	"Match bits "
LEAF_NODE	4609:48	4609:48	12	,
ARGUMENT	4609:50	4609:50	12	matchbits
FIELD	4609:50	4609:50	13	matchbits
LEAF_NODE	4609:50	4609:50	14	matchbits
LEAF_NODE	4609:59	4609:59	12	)
LEAF_NODE	4609:60	4609:60	10	;
EXPR_STATEMENT	4610:6	4610:57	9	dump_data ( dumpfile , format , "Src   bits " , src , 4 ) ;
EXPR	4610:6	4610:6	10	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
FUNCTION_CALL	4610:6	4610:56	11	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
CALLEE	4610:6	4610:6	12	dump_data
LEAF_NODE	4610:6	4610:6	13	dump_data
LEAF_NODE	4610:16	4610:16	12	(
ARGUMENT	4610:17	4610:17	12	dumpfile
FIELD	4610:17	4610:17	13	dumpfile
LEAF_NODE	4610:17	4610:17	14	dumpfile
LEAF_NODE	4610:25	4610:25	12	,
ARGUMENT	4610:27	4610:27	12	format
FIELD	4610:27	4610:27	13	format
LEAF_NODE	4610:27	4610:27	14	format
LEAF_NODE	4610:33	4610:33	12	,
ARGUMENT	4610:35	4610:35	12	"Src   bits "
FIELD	4610:35	4610:35	13	"Src   bits "
LEAF_NODE	4610:35	4610:35	14	"Src   bits "
LEAF_NODE	4610:48	4610:48	12	,
ARGUMENT	4610:50	4610:50	12	src
FIELD	4610:50	4610:50	13	src
LEAF_NODE	4610:50	4610:50	14	src
LEAF_NODE	4610:53	4610:53	12	,
ARGUMENT	4610:55	4610:55	12	4
FIELD	4610:55	4610:55	13	4
LEAF_NODE	4610:55	4610:55	14	4
LEAF_NODE	4610:56	4610:56	12	)
LEAF_NODE	4610:57	4610:57	10	;
EXPR_STATEMENT	4611:6	4611:56	9	dump_long ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4611:6	4611:6	10	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4611:6	4611:55	11	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4611:6	4611:6	12	dump_long
LEAF_NODE	4611:6	4611:6	13	dump_long
LEAF_NODE	4611:16	4611:16	12	(
ARGUMENT	4611:17	4611:17	12	dumpfile
FIELD	4611:17	4611:17	13	dumpfile
LEAF_NODE	4611:17	4611:17	14	dumpfile
LEAF_NODE	4611:25	4611:25	12	,
ARGUMENT	4611:27	4611:27	12	format
FIELD	4611:27	4611:27	13	format
LEAF_NODE	4611:27	4611:27	14	format
LEAF_NODE	4611:33	4611:33	12	,
ARGUMENT	4611:35	4611:35	12	"Buff1 bits "
FIELD	4611:35	4611:35	13	"Buff1 bits "
LEAF_NODE	4611:35	4611:35	14	"Buff1 bits "
LEAF_NODE	4611:48	4611:48	12	,
ARGUMENT	4611:50	4611:50	12	buff1
FIELD	4611:50	4611:50	13	buff1
LEAF_NODE	4611:50	4611:50	14	buff1
LEAF_NODE	4611:55	4611:55	12	)
LEAF_NODE	4611:56	4611:56	10	;
EXPR_STATEMENT	4612:6	4612:56	9	dump_long ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4612:6	4612:6	10	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4612:6	4612:55	11	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4612:6	4612:6	12	dump_long
LEAF_NODE	4612:6	4612:6	13	dump_long
LEAF_NODE	4612:16	4612:16	12	(
ARGUMENT	4612:17	4612:17	12	dumpfile
FIELD	4612:17	4612:17	13	dumpfile
LEAF_NODE	4612:17	4612:17	14	dumpfile
LEAF_NODE	4612:25	4612:25	12	,
ARGUMENT	4612:27	4612:27	12	format
FIELD	4612:27	4612:27	13	format
LEAF_NODE	4612:27	4612:27	14	format
LEAF_NODE	4612:33	4612:33	12	,
ARGUMENT	4612:35	4612:35	12	"Buff2 bits "
FIELD	4612:35	4612:35	13	"Buff2 bits "
LEAF_NODE	4612:35	4612:35	14	"Buff2 bits "
LEAF_NODE	4612:48	4612:48	12	,
ARGUMENT	4612:50	4612:50	12	buff2
FIELD	4612:50	4612:50	13	buff2
LEAF_NODE	4612:50	4612:50	14	buff2
LEAF_NODE	4612:55	4612:55	12	)
LEAF_NODE	4612:56	4612:56	10	;
EXPR_STATEMENT	4613:6	4613:60	9	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 ) ;
EXPR	4613:6	4613:6	10	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
FUNCTION_CALL	4613:6	4613:59	11	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
CALLEE	4613:6	4613:6	12	dump_byte
LEAF_NODE	4613:6	4613:6	13	dump_byte
LEAF_NODE	4613:16	4613:16	12	(
ARGUMENT	4613:17	4613:17	12	dumpfile
FIELD	4613:17	4613:17	13	dumpfile
LEAF_NODE	4613:17	4613:17	14	dumpfile
LEAF_NODE	4613:25	4613:25	12	,
ARGUMENT	4613:27	4613:27	12	format
FIELD	4613:27	4613:27	13	format
LEAF_NODE	4613:27	4613:27	14	format
LEAF_NODE	4613:33	4613:33	12	,
ARGUMENT	4613:35	4613:35	12	"Write bits1"
FIELD	4613:35	4613:35	13	"Write bits1"
LEAF_NODE	4613:35	4613:35	14	"Write bits1"
LEAF_NODE	4613:48	4613:48	12	,
ARGUMENT	4613:50	4613:50	12	bytebuff1
FIELD	4613:50	4613:50	13	bytebuff1
LEAF_NODE	4613:50	4613:50	14	bytebuff1
LEAF_NODE	4613:59	4613:59	12	)
LEAF_NODE	4613:60	4613:60	10	;
EXPR_STATEMENT	4614:6	4614:60	9	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 ) ;
EXPR	4614:6	4614:6	10	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
FUNCTION_CALL	4614:6	4614:59	11	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
CALLEE	4614:6	4614:6	12	dump_byte
LEAF_NODE	4614:6	4614:6	13	dump_byte
LEAF_NODE	4614:16	4614:16	12	(
ARGUMENT	4614:17	4614:17	12	dumpfile
FIELD	4614:17	4614:17	13	dumpfile
LEAF_NODE	4614:17	4614:17	14	dumpfile
LEAF_NODE	4614:25	4614:25	12	,
ARGUMENT	4614:27	4614:27	12	format
FIELD	4614:27	4614:27	13	format
LEAF_NODE	4614:27	4614:27	14	format
LEAF_NODE	4614:33	4614:33	12	,
ARGUMENT	4614:35	4614:35	12	"Write bits2"
FIELD	4614:35	4614:35	13	"Write bits2"
LEAF_NODE	4614:35	4614:35	14	"Write bits2"
LEAF_NODE	4614:48	4614:48	12	,
ARGUMENT	4614:50	4614:50	12	bytebuff2
FIELD	4614:50	4614:50	13	bytebuff2
LEAF_NODE	4614:50	4614:50	14	bytebuff2
LEAF_NODE	4614:59	4614:59	12	)
LEAF_NODE	4614:60	4614:60	10	;
EXPR_STATEMENT	4615:6	4615:70	9	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits ) ;
EXPR	4615:6	4615:6	10	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
FUNCTION_CALL	4615:6	4615:69	11	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
CALLEE	4615:6	4615:6	12	dump_info
LEAF_NODE	4615:6	4615:6	13	dump_info
LEAF_NODE	4615:16	4615:16	12	(
ARGUMENT	4615:17	4615:17	12	dumpfile
FIELD	4615:17	4615:17	13	dumpfile
LEAF_NODE	4615:17	4615:17	14	dumpfile
LEAF_NODE	4615:25	4615:25	12	,
ARGUMENT	4615:27	4615:27	12	format
FIELD	4615:27	4615:27	13	format
LEAF_NODE	4615:27	4615:27	14	format
LEAF_NODE	4615:33	4615:33	12	,
ARGUMENT	4615:35	4615:35	12	""
FIELD	4615:35	4615:35	13	""
LEAF_NODE	4615:35	4615:35	14	""
LEAF_NODE	4615:37	4615:37	12	,
ARGUMENT	4615:39	4615:39	12	"Ready bits:  %2d"
FIELD	4615:39	4615:39	13	"Ready bits:  %2d"
LEAF_NODE	4615:39	4615:39	14	"Ready bits:  %2d"
LEAF_NODE	4615:57	4615:57	12	,
ARGUMENT	4615:59	4615:59	12	ready_bits
FIELD	4615:59	4615:59	13	ready_bits
LEAF_NODE	4615:59	4615:59	14	ready_bits
LEAF_NODE	4615:69	4615:69	12	)
LEAF_NODE	4615:70	4615:70	10	;
LEAF_NODE	4616:6	4616:6	8	}
SELECTION	4618:4	4619:6	6	
KEYWORD	4618:4	4618:4	7	if
LEAF_NODE	4618:4	4618:4	8	if
LEAF_NODE	4618:7	4618:7	7	(
CONDITION	4618:8	4618:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	4618:8	4618:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	4618:8	4618:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	4618:8	4618:25	10	( dumpfile != NULL )
LEAF_NODE	4618:8	4618:8	11	(
FIELD	4618:9	4618:9	11	dumpfile
LEAF_NODE	4618:9	4618:9	12	dumpfile
EQ_OPERATOR	4618:18	4618:18	11	!=
LEAF_NODE	4618:18	4618:18	12	!=
FIELD	4618:21	4618:21	11	NULL
LEAF_NODE	4618:21	4618:21	12	NULL
LEAF_NODE	4618:25	4618:25	11	)
LEAF_NODE	4618:27	4618:27	10	&&
EXPR	4618:30	4618:41	10	( level == 2 )
LEAF_NODE	4618:30	4618:30	11	(
FIELD	4618:31	4618:31	11	level
LEAF_NODE	4618:31	4618:31	12	level
EQ_OPERATOR	4618:37	4618:37	11	==
LEAF_NODE	4618:37	4618:37	12	==
FIELD	4618:40	4618:40	11	2
LEAF_NODE	4618:40	4618:40	12	2
LEAF_NODE	4618:41	4618:41	11	)
LEAF_NODE	4618:42	4618:42	7	)
STATEMENTS	4619:6	4622:6	7	
LEAF_NODE	4619:6	4619:6	8	{
STATEMENTS	4620:6	4621:6	8	
EXPR_STATEMENT	4620:6	4620:84	9	dump_info ( dumpfile , format , "combineSeparateTileSamples24bits" , "Output data" ) ;
EXPR	4620:6	4620:6	10	dump_info ( dumpfile , format , "combineSeparateTileSamples24bits" , "Output data" )
FUNCTION_CALL	4620:6	4620:83	11	dump_info ( dumpfile , format , "combineSeparateTileSamples24bits" , "Output data" )
CALLEE	4620:6	4620:6	12	dump_info
LEAF_NODE	4620:6	4620:6	13	dump_info
LEAF_NODE	4620:16	4620:16	12	(
ARGUMENT	4620:17	4620:17	12	dumpfile
FIELD	4620:17	4620:17	13	dumpfile
LEAF_NODE	4620:17	4620:17	14	dumpfile
LEAF_NODE	4620:25	4620:25	12	,
ARGUMENT	4620:27	4620:27	12	format
FIELD	4620:27	4620:27	13	format
LEAF_NODE	4620:27	4620:27	14	format
LEAF_NODE	4620:33	4620:33	12	,
ARGUMENT	4620:35	4620:35	12	"combineSeparateTileSamples24bits"
FIELD	4620:35	4620:35	13	"combineSeparateTileSamples24bits"
LEAF_NODE	4620:35	4620:35	14	"combineSeparateTileSamples24bits"
LEAF_NODE	4620:69	4620:69	12	,
ARGUMENT	4620:70	4620:70	12	"Output data"
FIELD	4620:70	4620:70	13	"Output data"
LEAF_NODE	4620:70	4620:70	14	"Output data"
LEAF_NODE	4620:83	4620:83	12	)
LEAF_NODE	4620:84	4620:84	10	;
EXPR_STATEMENT	4621:6	4621:83	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) ) ;
EXPR	4621:6	4621:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
FUNCTION_CALL	4621:6	4621:82	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out + ( row * dst_rowsize ) )
CALLEE	4621:6	4621:6	12	dump_buffer
LEAF_NODE	4621:6	4621:6	13	dump_buffer
LEAF_NODE	4621:17	4621:17	12	(
ARGUMENT	4621:18	4621:18	12	dumpfile
FIELD	4621:18	4621:18	13	dumpfile
LEAF_NODE	4621:18	4621:18	14	dumpfile
LEAF_NODE	4621:26	4621:26	12	,
ARGUMENT	4621:28	4621:28	12	format
FIELD	4621:28	4621:28	13	format
LEAF_NODE	4621:28	4621:28	14	format
LEAF_NODE	4621:34	4621:34	12	,
ARGUMENT	4621:36	4621:36	12	1
FIELD	4621:36	4621:36	13	1
LEAF_NODE	4621:36	4621:36	14	1
LEAF_NODE	4621:37	4621:37	12	,
ARGUMENT	4621:39	4621:39	12	dst_rowsize
FIELD	4621:39	4621:39	13	dst_rowsize
LEAF_NODE	4621:39	4621:39	14	dst_rowsize
LEAF_NODE	4621:50	4621:50	12	,
ARGUMENT	4621:52	4621:52	12	row
FIELD	4621:52	4621:52	13	row
LEAF_NODE	4621:52	4621:52	14	row
LEAF_NODE	4621:55	4621:55	12	,
ARGUMENT	4621:57	4621:81	12	out + ( row * dst_rowsize )
FIELD	4621:57	4621:57	13	out
LEAF_NODE	4621:57	4621:57	14	out
LEAF_NODE	4621:61	4621:61	13	+
LEAF_NODE	4621:63	4621:63	13	(
FIELD	4621:64	4621:64	13	row
LEAF_NODE	4621:64	4621:64	14	row
LEAF_NODE	4621:68	4621:68	13	*
FIELD	4621:70	4621:70	13	dst_rowsize
LEAF_NODE	4621:70	4621:70	14	dst_rowsize
LEAF_NODE	4621:81	4621:81	13	)
LEAF_NODE	4621:82	4621:82	12	)
LEAF_NODE	4621:83	4621:83	10	;
LEAF_NODE	4622:6	4622:6	8	}
LEAF_NODE	4623:4	4623:4	5	}
JUMP_STATEMENT	4625:2	4625:12	3	return ( 0 ) ;
KEYWORD	4625:2	4625:2	4	return
LEAF_NODE	4625:2	4625:2	5	return
DESTINATION	4625:9	4625:9	4	( 0 )
EXPR	4625:9	4625:11	5	( 0 )
LEAF_NODE	4625:9	4625:9	6	(
FIELD	4625:10	4625:10	6	0
LEAF_NODE	4625:10	4625:10	7	0
LEAF_NODE	4625:11	4625:11	6	)
LEAF_NODE	4625:12	4625:12	4	;
LEAF_NODE	4626:2	4626:2	2	}
FUNCTION_DEF	4628:0	4758:2	1	
RETURN_TYPE	4628:0	4628:7	2	static int
LEAF_NODE	4628:0	4628:0	3	static
TYPE_NAME	4628:7	4628:7	3	int
LEAF_NODE	4628:7	4628:7	4	int
FUNCTION_NAME	4629:0	4629:0	2	combineSeparateTileSamples32bits
LEAF_NODE	4629:0	4629:0	3	combineSeparateTileSamples32bits
PARAMETER_LIST	4629:33	4632:65	2	( uint8 * [ ] in , uint8 * out , uint32 cols , uint32 rows , uint32 imagewidth , uint32 tw , uint16 spp , uint16 bps , FILE * dumpfile , int format , int level )
LEAF_NODE	4629:33	4629:33	3	(
PARAMETER_DECL	4629:34	4629:41	3	uint8 * [ ] in
TYPE	4629:34	4629:43	4	uint8 * [ ]
TYPE_NAME	4629:34	4629:34	5	uint8
LEAF_NODE	4629:34	4629:34	6	uint8
POINTER	4629:40	4629:40	5	*
LEAF_NODE	4629:40	4629:40	6	*
TYPE_SUFFIX	4629:43	4629:44	5	[ ]
LEAF_NODE	4629:43	4629:43	6	[
LEAF_NODE	4629:44	4629:44	6	]
NAME	4629:41	4629:41	4	in
LEAF_NODE	4629:41	4629:41	5	in
LEAF_NODE	4629:45	4629:45	3	,
PARAMETER_DECL	4629:47	4629:54	3	uint8 * out
TYPE	4629:47	4629:53	4	uint8 *
TYPE_NAME	4629:47	4629:47	5	uint8
LEAF_NODE	4629:47	4629:47	6	uint8
POINTER	4629:53	4629:53	5	*
LEAF_NODE	4629:53	4629:53	6	*
NAME	4629:54	4629:54	4	out
LEAF_NODE	4629:54	4629:54	5	out
LEAF_NODE	4629:57	4629:57	3	,
PARAMETER_DECL	4629:59	4629:66	3	uint32 cols
TYPE	4629:59	4629:59	4	uint32
TYPE_NAME	4629:59	4629:59	5	uint32
LEAF_NODE	4629:59	4629:59	6	uint32
NAME	4629:66	4629:66	4	cols
LEAF_NODE	4629:66	4629:66	5	cols
LEAF_NODE	4629:70	4629:70	3	,
PARAMETER_DECL	4630:34	4630:41	3	uint32 rows
TYPE	4630:34	4630:34	4	uint32
TYPE_NAME	4630:34	4630:34	5	uint32
LEAF_NODE	4630:34	4630:34	6	uint32
NAME	4630:41	4630:41	4	rows
LEAF_NODE	4630:41	4630:41	5	rows
LEAF_NODE	4630:45	4630:45	3	,
PARAMETER_DECL	4630:47	4630:54	3	uint32 imagewidth
TYPE	4630:47	4630:47	4	uint32
TYPE_NAME	4630:47	4630:47	5	uint32
LEAF_NODE	4630:47	4630:47	6	uint32
NAME	4630:54	4630:54	4	imagewidth
LEAF_NODE	4630:54	4630:54	5	imagewidth
LEAF_NODE	4630:64	4630:64	3	,
PARAMETER_DECL	4631:34	4631:41	3	uint32 tw
TYPE	4631:34	4631:34	4	uint32
TYPE_NAME	4631:34	4631:34	5	uint32
LEAF_NODE	4631:34	4631:34	6	uint32
NAME	4631:41	4631:41	4	tw
LEAF_NODE	4631:41	4631:41	5	tw
LEAF_NODE	4631:43	4631:43	3	,
PARAMETER_DECL	4631:45	4631:52	3	uint16 spp
TYPE	4631:45	4631:45	4	uint16
TYPE_NAME	4631:45	4631:45	5	uint16
LEAF_NODE	4631:45	4631:45	6	uint16
NAME	4631:52	4631:52	4	spp
LEAF_NODE	4631:52	4631:52	5	spp
LEAF_NODE	4631:55	4631:55	3	,
PARAMETER_DECL	4631:57	4631:64	3	uint16 bps
TYPE	4631:57	4631:57	4	uint16
TYPE_NAME	4631:57	4631:57	5	uint16
LEAF_NODE	4631:57	4631:57	6	uint16
NAME	4631:64	4631:64	4	bps
LEAF_NODE	4631:64	4631:64	5	bps
LEAF_NODE	4631:67	4631:67	3	,
PARAMETER_DECL	4632:28	4632:34	3	FILE * dumpfile
TYPE	4632:28	4632:33	4	FILE *
TYPE_NAME	4632:28	4632:28	5	FILE
LEAF_NODE	4632:28	4632:28	6	FILE
POINTER	4632:33	4632:33	5	*
LEAF_NODE	4632:33	4632:33	6	*
NAME	4632:34	4632:34	4	dumpfile
LEAF_NODE	4632:34	4632:34	5	dumpfile
LEAF_NODE	4632:42	4632:42	3	,
PARAMETER_DECL	4632:44	4632:48	3	int format
TYPE	4632:44	4632:44	4	int
TYPE_NAME	4632:44	4632:44	5	int
LEAF_NODE	4632:44	4632:44	6	int
NAME	4632:48	4632:48	4	format
LEAF_NODE	4632:48	4632:48	5	format
LEAF_NODE	4632:54	4632:54	3	,
PARAMETER_DECL	4632:56	4632:60	3	int level
TYPE	4632:56	4632:56	4	int
TYPE_NAME	4632:56	4632:56	5	int
LEAF_NODE	4632:56	4632:56	6	int
NAME	4632:60	4632:60	4	level
LEAF_NODE	4632:60	4632:60	5	level
LEAF_NODE	4632:65	4632:65	3	)
LEAF_NODE	4633:2	4633:2	2	{
STATEMENTS	4634:2	4757:2	2	
SIMPLE_DECL	4634:2	4634:46	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	4634:2	4634:9	4	int ready_bits ; ready_bits = 0
TYPE	4634:2	4634:2	5	int
TYPE_NAME	4634:2	4634:2	6	int
LEAF_NODE	4634:2	4634:2	7	int
NAME	4634:9	4634:9	5	ready_bits
LEAF_NODE	4634:9	4634:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	4634:9	4634:9	5	ready_bits = 0
ASSIGN	4634:9	4634:22	6	ready_bits = 0
LVAL	4634:9	4634:9	7	ready_bits
NAME	4634:9	4634:9	8	ready_bits
LEAF_NODE	4634:9	4634:9	9	ready_bits
ASSIGN_OP	4634:20	4634:20	7	=
LEAF_NODE	4634:20	4634:20	8	=
RVAL	4634:22	4634:22	7	0
FIELD	4634:22	4634:22	8	0
LEAF_NODE	4634:22	4634:22	9	0
LEAF_NODE	4634:46	4634:46	4	;
SIMPLE_DECL	4635:2	4635:57	3	uint32 src_rowsize , uint32 dst_rowsize , uint32 bit_offset , uint32 src_offset ;
INIT_DECL_LIST	4635:2	4635:2	4	uint32 src_rowsize , uint32 dst_rowsize , uint32 bit_offset , uint32 src_offset
VAR_DECL	4635:2	4635:9	5	uint32 src_rowsize
TYPE	4635:2	4635:2	6	uint32
TYPE_NAME	4635:2	4635:2	7	uint32
LEAF_NODE	4635:2	4635:2	8	uint32
NAME	4635:9	4635:9	6	src_rowsize
LEAF_NODE	4635:9	4635:9	7	src_rowsize
LEAF_NODE	4635:20	4635:20	5	,
INIT_DECL_LIST	4635:2	4635:2	5	uint32 dst_rowsize , uint32 bit_offset , uint32 src_offset
VAR_DECL	4635:2	4635:22	6	uint32 dst_rowsize
TYPE	4635:2	4635:2	7	uint32
TYPE_NAME	4635:2	4635:2	8	uint32
LEAF_NODE	4635:2	4635:2	9	uint32
NAME	4635:22	4635:22	7	dst_rowsize
LEAF_NODE	4635:22	4635:22	8	dst_rowsize
LEAF_NODE	4635:33	4635:33	6	,
INIT_DECL_LIST	4635:2	4635:2	6	uint32 bit_offset , uint32 src_offset
VAR_DECL	4635:2	4635:35	7	uint32 bit_offset
TYPE	4635:2	4635:2	8	uint32
TYPE_NAME	4635:2	4635:2	9	uint32
LEAF_NODE	4635:2	4635:2	10	uint32
NAME	4635:35	4635:35	8	bit_offset
LEAF_NODE	4635:35	4635:35	9	bit_offset
LEAF_NODE	4635:45	4635:45	7	,
VAR_DECL	4635:2	4635:47	7	uint32 src_offset
TYPE	4635:2	4635:2	8	uint32
TYPE_NAME	4635:2	4635:2	9	uint32
LEAF_NODE	4635:2	4635:2	10	uint32
NAME	4635:47	4635:47	8	src_offset
LEAF_NODE	4635:47	4635:47	9	src_offset
LEAF_NODE	4635:57	4635:57	4	;
SIMPLE_DECL	4636:2	4636:34	3	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	4636:2	4636:2	4	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	4636:2	4636:9	5	uint32 src_byte ; src_byte = 0
TYPE	4636:2	4636:2	6	uint32
TYPE_NAME	4636:2	4636:2	7	uint32
LEAF_NODE	4636:2	4636:2	8	uint32
NAME	4636:9	4636:9	6	src_byte
LEAF_NODE	4636:9	4636:9	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	4636:9	4636:9	6	src_byte = 0
ASSIGN	4636:9	4636:20	7	src_byte = 0
LVAL	4636:9	4636:9	8	src_byte
NAME	4636:9	4636:9	9	src_byte
LEAF_NODE	4636:9	4636:9	10	src_byte
ASSIGN_OP	4636:18	4636:18	8	=
LEAF_NODE	4636:18	4636:18	9	=
RVAL	4636:20	4636:20	8	0
FIELD	4636:20	4636:20	9	0
LEAF_NODE	4636:20	4636:20	10	0
LEAF_NODE	4636:21	4636:21	5	,
VAR_DECL	4636:2	4636:23	5	uint32 src_bit ; src_bit = 0
TYPE	4636:2	4636:2	6	uint32
TYPE_NAME	4636:2	4636:2	7	uint32
LEAF_NODE	4636:2	4636:2	8	uint32
NAME	4636:23	4636:23	6	src_bit
LEAF_NODE	4636:23	4636:23	7	src_bit
LEAF_NODE	0:0	0:0	6	;
INIT	4636:23	4636:23	6	src_bit = 0
ASSIGN	4636:23	4636:33	7	src_bit = 0
LVAL	4636:23	4636:23	8	src_bit
NAME	4636:23	4636:23	9	src_bit
LEAF_NODE	4636:23	4636:23	10	src_bit
ASSIGN_OP	4636:31	4636:31	8	=
LEAF_NODE	4636:31	4636:31	9	=
RVAL	4636:33	4636:33	8	0
FIELD	4636:33	4636:33	9	0
LEAF_NODE	4636:33	4636:33	10	0
LEAF_NODE	4636:34	4636:34	4	;
SIMPLE_DECL	4637:2	4637:17	3	uint32 row , uint32 col ;
INIT_DECL_LIST	4637:2	4637:2	4	uint32 row , uint32 col
VAR_DECL	4637:2	4637:9	5	uint32 row
TYPE	4637:2	4637:2	6	uint32
TYPE_NAME	4637:2	4637:2	7	uint32
LEAF_NODE	4637:2	4637:2	8	uint32
NAME	4637:9	4637:9	6	row
LEAF_NODE	4637:9	4637:9	7	row
LEAF_NODE	4637:12	4637:12	5	,
VAR_DECL	4637:2	4637:14	5	uint32 col
TYPE	4637:2	4637:2	6	uint32
TYPE_NAME	4637:2	4637:2	7	uint32
LEAF_NODE	4637:2	4637:2	8	uint32
NAME	4637:14	4637:14	6	col
LEAF_NODE	4637:14	4637:14	7	col
LEAF_NODE	4637:17	4637:17	4	;
SIMPLE_DECL	4638:2	4638:37	3	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0 ;
INIT_DECL_LIST	4638:2	4638:2	4	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0
VAR_DECL	4638:2	4638:9	5	uint32 longbuff1 ; longbuff1 = 0
TYPE	4638:2	4638:2	6	uint32
TYPE_NAME	4638:2	4638:2	7	uint32
LEAF_NODE	4638:2	4638:2	8	uint32
NAME	4638:9	4638:9	6	longbuff1
LEAF_NODE	4638:9	4638:9	7	longbuff1
LEAF_NODE	0:0	0:0	6	;
INIT	4638:9	4638:9	6	longbuff1 = 0
ASSIGN	4638:9	4638:21	7	longbuff1 = 0
LVAL	4638:9	4638:9	8	longbuff1
NAME	4638:9	4638:9	9	longbuff1
LEAF_NODE	4638:9	4638:9	10	longbuff1
ASSIGN_OP	4638:19	4638:19	8	=
LEAF_NODE	4638:19	4638:19	9	=
RVAL	4638:21	4638:21	8	0
FIELD	4638:21	4638:21	9	0
LEAF_NODE	4638:21	4638:21	10	0
LEAF_NODE	4638:22	4638:22	5	,
VAR_DECL	4638:2	4638:24	5	uint32 longbuff2 ; longbuff2 = 0
TYPE	4638:2	4638:2	6	uint32
TYPE_NAME	4638:2	4638:2	7	uint32
LEAF_NODE	4638:2	4638:2	8	uint32
NAME	4638:24	4638:24	6	longbuff2
LEAF_NODE	4638:24	4638:24	7	longbuff2
LEAF_NODE	0:0	0:0	6	;
INIT	4638:24	4638:24	6	longbuff2 = 0
ASSIGN	4638:24	4638:36	7	longbuff2 = 0
LVAL	4638:24	4638:24	8	longbuff2
NAME	4638:24	4638:24	9	longbuff2
LEAF_NODE	4638:24	4638:24	10	longbuff2
ASSIGN_OP	4638:34	4638:34	8	=
LEAF_NODE	4638:34	4638:34	9	=
RVAL	4638:36	4638:36	8	0
FIELD	4638:36	4638:36	9	0
LEAF_NODE	4638:36	4638:36	10	0
LEAF_NODE	4638:37	4638:37	4	;
SIMPLE_DECL	4639:2	4639:36	3	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	4639:2	4639:2	4	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0
VAR_DECL	4639:2	4639:9	5	uint64 maskbits ; maskbits = 0
TYPE	4639:2	4639:2	6	uint64
TYPE_NAME	4639:2	4639:2	7	uint64
LEAF_NODE	4639:2	4639:2	8	uint64
NAME	4639:9	4639:9	6	maskbits
LEAF_NODE	4639:9	4639:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	4639:9	4639:9	6	maskbits = 0
ASSIGN	4639:9	4639:20	7	maskbits = 0
LVAL	4639:9	4639:9	8	maskbits
NAME	4639:9	4639:9	9	maskbits
LEAF_NODE	4639:9	4639:9	10	maskbits
ASSIGN_OP	4639:18	4639:18	8	=
LEAF_NODE	4639:18	4639:18	9	=
RVAL	4639:20	4639:20	8	0
FIELD	4639:20	4639:20	9	0
LEAF_NODE	4639:20	4639:20	10	0
LEAF_NODE	4639:21	4639:21	5	,
VAR_DECL	4639:2	4639:23	5	uint64 matchbits ; matchbits = 0
TYPE	4639:2	4639:2	6	uint64
TYPE_NAME	4639:2	4639:2	7	uint64
LEAF_NODE	4639:2	4639:2	8	uint64
NAME	4639:23	4639:23	6	matchbits
LEAF_NODE	4639:23	4639:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	4639:23	4639:23	6	matchbits = 0
ASSIGN	4639:23	4639:35	7	matchbits = 0
LVAL	4639:23	4639:23	8	matchbits
NAME	4639:23	4639:23	9	matchbits
LEAF_NODE	4639:23	4639:23	10	matchbits
ASSIGN_OP	4639:33	4639:33	8	=
LEAF_NODE	4639:33	4639:33	9	=
RVAL	4639:35	4639:35	8	0
FIELD	4639:35	4639:35	9	0
LEAF_NODE	4639:35	4639:35	10	0
LEAF_NODE	4639:36	4639:36	4	;
SIMPLE_DECL	4640:2	4640:40	3	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0 ;
INIT_DECL_LIST	4640:2	4640:2	4	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	4640:2	4640:9	5	uint64 buff1 ; buff1 = 0
TYPE	4640:2	4640:2	6	uint64
TYPE_NAME	4640:2	4640:2	7	uint64
LEAF_NODE	4640:2	4640:2	8	uint64
NAME	4640:9	4640:9	6	buff1
LEAF_NODE	4640:9	4640:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	4640:9	4640:9	6	buff1 = 0
ASSIGN	4640:9	4640:17	7	buff1 = 0
LVAL	4640:9	4640:9	8	buff1
NAME	4640:9	4640:9	9	buff1
LEAF_NODE	4640:9	4640:9	10	buff1
ASSIGN_OP	4640:15	4640:15	8	=
LEAF_NODE	4640:15	4640:15	9	=
RVAL	4640:17	4640:17	8	0
FIELD	4640:17	4640:17	9	0
LEAF_NODE	4640:17	4640:17	10	0
LEAF_NODE	4640:18	4640:18	5	,
INIT_DECL_LIST	4640:2	4640:2	5	uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	4640:2	4640:20	6	uint64 buff2 ; buff2 = 0
TYPE	4640:2	4640:2	7	uint64
TYPE_NAME	4640:2	4640:2	8	uint64
LEAF_NODE	4640:2	4640:2	9	uint64
NAME	4640:20	4640:20	7	buff2
LEAF_NODE	4640:20	4640:20	8	buff2
LEAF_NODE	0:0	0:0	7	;
INIT	4640:20	4640:20	7	buff2 = 0
ASSIGN	4640:20	4640:28	8	buff2 = 0
LVAL	4640:20	4640:20	9	buff2
NAME	4640:20	4640:20	10	buff2
LEAF_NODE	4640:20	4640:20	11	buff2
ASSIGN_OP	4640:26	4640:26	9	=
LEAF_NODE	4640:26	4640:26	10	=
RVAL	4640:28	4640:28	9	0
FIELD	4640:28	4640:28	10	0
LEAF_NODE	4640:28	4640:28	11	0
LEAF_NODE	4640:29	4640:29	6	,
VAR_DECL	4640:2	4640:31	6	uint64 buff3 ; buff3 = 0
TYPE	4640:2	4640:2	7	uint64
TYPE_NAME	4640:2	4640:2	8	uint64
LEAF_NODE	4640:2	4640:2	9	uint64
NAME	4640:31	4640:31	7	buff3
LEAF_NODE	4640:31	4640:31	8	buff3
LEAF_NODE	0:0	0:0	7	;
INIT	4640:31	4640:31	7	buff3 = 0
ASSIGN	4640:31	4640:39	8	buff3 = 0
LVAL	4640:31	4640:31	9	buff3
NAME	4640:31	4640:31	10	buff3
LEAF_NODE	4640:31	4640:31	11	buff3
ASSIGN_OP	4640:37	4640:37	9	=
LEAF_NODE	4640:37	4640:37	10	=
RVAL	4640:39	4640:39	9	0
FIELD	4640:39	4640:39	10	0
LEAF_NODE	4640:39	4640:39	11	0
LEAF_NODE	4640:40	4640:40	4	;
SIMPLE_DECL	4641:2	4641:67	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0 ;
INIT_DECL_LIST	4641:2	4641:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	4641:2	4641:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	4641:2	4641:2	6	uint8
TYPE_NAME	4641:2	4641:2	7	uint8
LEAF_NODE	4641:2	4641:2	8	uint8
NAME	4641:9	4641:9	6	bytebuff1
LEAF_NODE	4641:9	4641:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	4641:9	4641:9	6	bytebuff1 = 0
ASSIGN	4641:9	4641:21	7	bytebuff1 = 0
LVAL	4641:9	4641:9	8	bytebuff1
NAME	4641:9	4641:9	9	bytebuff1
LEAF_NODE	4641:9	4641:9	10	bytebuff1
ASSIGN_OP	4641:19	4641:19	8	=
LEAF_NODE	4641:19	4641:19	9	=
RVAL	4641:21	4641:21	8	0
FIELD	4641:21	4641:21	9	0
LEAF_NODE	4641:21	4641:21	10	0
LEAF_NODE	4641:22	4641:22	5	,
INIT_DECL_LIST	4641:2	4641:2	5	uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	4641:2	4641:24	6	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	4641:2	4641:2	7	uint8
TYPE_NAME	4641:2	4641:2	8	uint8
LEAF_NODE	4641:2	4641:2	9	uint8
NAME	4641:24	4641:24	7	bytebuff2
LEAF_NODE	4641:24	4641:24	8	bytebuff2
LEAF_NODE	0:0	0:0	7	;
INIT	4641:24	4641:24	7	bytebuff2 = 0
ASSIGN	4641:24	4641:36	8	bytebuff2 = 0
LVAL	4641:24	4641:24	9	bytebuff2
NAME	4641:24	4641:24	10	bytebuff2
LEAF_NODE	4641:24	4641:24	11	bytebuff2
ASSIGN_OP	4641:34	4641:34	9	=
LEAF_NODE	4641:34	4641:34	10	=
RVAL	4641:36	4641:36	9	0
FIELD	4641:36	4641:36	10	0
LEAF_NODE	4641:36	4641:36	11	0
LEAF_NODE	4641:37	4641:37	6	,
INIT_DECL_LIST	4641:2	4641:2	6	uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	4641:2	4641:39	7	uint8 bytebuff3 ; bytebuff3 = 0
TYPE	4641:2	4641:2	8	uint8
TYPE_NAME	4641:2	4641:2	9	uint8
LEAF_NODE	4641:2	4641:2	10	uint8
NAME	4641:39	4641:39	8	bytebuff3
LEAF_NODE	4641:39	4641:39	9	bytebuff3
LEAF_NODE	0:0	0:0	8	;
INIT	4641:39	4641:39	8	bytebuff3 = 0
ASSIGN	4641:39	4641:51	9	bytebuff3 = 0
LVAL	4641:39	4641:39	10	bytebuff3
NAME	4641:39	4641:39	11	bytebuff3
LEAF_NODE	4641:39	4641:39	12	bytebuff3
ASSIGN_OP	4641:49	4641:49	10	=
LEAF_NODE	4641:49	4641:49	11	=
RVAL	4641:51	4641:51	10	0
FIELD	4641:51	4641:51	11	0
LEAF_NODE	4641:51	4641:51	12	0
LEAF_NODE	4641:52	4641:52	7	,
VAR_DECL	4641:2	4641:54	7	uint8 bytebuff4 ; bytebuff4 = 0
TYPE	4641:2	4641:2	8	uint8
TYPE_NAME	4641:2	4641:2	9	uint8
LEAF_NODE	4641:2	4641:2	10	uint8
NAME	4641:54	4641:54	8	bytebuff4
LEAF_NODE	4641:54	4641:54	9	bytebuff4
LEAF_NODE	0:0	0:0	8	;
INIT	4641:54	4641:54	8	bytebuff4 = 0
ASSIGN	4641:54	4641:66	9	bytebuff4 = 0
LVAL	4641:54	4641:54	10	bytebuff4
NAME	4641:54	4641:54	11	bytebuff4
LEAF_NODE	4641:54	4641:54	12	bytebuff4
ASSIGN_OP	4641:64	4641:64	10	=
LEAF_NODE	4641:64	4641:64	11	=
RVAL	4641:66	4641:66	10	0
FIELD	4641:66	4641:66	11	0
LEAF_NODE	4641:66	4641:66	12	0
LEAF_NODE	4641:67	4641:67	4	;
SIMPLE_DECL	4642:2	4642:13	3	tsample_t s ;
VAR_DECL	4642:2	4642:12	4	tsample_t s
TYPE	4642:2	4642:2	5	tsample_t
TYPE_NAME	4642:2	4642:2	6	tsample_t
LEAF_NODE	4642:2	4642:2	7	tsample_t
NAME	4642:12	4642:12	5	s
LEAF_NODE	4642:12	4642:12	6	s
LEAF_NODE	4642:13	4642:13	4	;
SIMPLE_DECL	4643:2	4643:28	3	unsigned char * src ; src = in [ 0 ] ;
VAR_DECL	4643:2	4643:17	4	unsigned char * src ; src = in [ 0 ]
TYPE	4643:2	4643:16	5	unsigned char *
TYPE_NAME	4643:2	4643:11	6	unsigned char
LEAF_NODE	4643:2	4643:2	7	unsigned
LEAF_NODE	4643:11	4643:11	7	char
POINTER	4643:16	4643:16	6	*
LEAF_NODE	4643:16	4643:16	7	*
NAME	4643:17	4643:17	5	src
LEAF_NODE	4643:17	4643:17	6	src
LEAF_NODE	0:0	0:0	5	;
INIT	4643:17	4643:17	5	src = in [ 0 ]
ASSIGN	4643:17	4643:23	6	src = in [ 0 ]
LVAL	4643:17	4643:17	7	src
NAME	4643:17	4643:17	8	src
LEAF_NODE	4643:17	4643:17	9	src
ASSIGN_OP	4643:21	4643:21	7	=
LEAF_NODE	4643:21	4643:21	8	=
RVAL	4643:23	4643:23	7	in [ 0 ]
FIELD	4643:23	4643:27	8	in [ 0 ]
LEAF_NODE	4643:23	4643:23	9	in
LEAF_NODE	4643:25	4643:25	9	[
EXPR	4643:26	4643:26	9	0
FIELD	4643:26	4643:26	10	0
LEAF_NODE	4643:26	4643:26	11	0
LEAF_NODE	4643:27	4643:27	9	]
LEAF_NODE	4643:28	4643:28	4	;
SIMPLE_DECL	4644:2	4644:26	3	unsigned char * dst ; dst = out ;
VAR_DECL	4644:2	4644:17	4	unsigned char * dst ; dst = out
TYPE	4644:2	4644:16	5	unsigned char *
TYPE_NAME	4644:2	4644:11	6	unsigned char
LEAF_NODE	4644:2	4644:2	7	unsigned
LEAF_NODE	4644:11	4644:11	7	char
POINTER	4644:16	4644:16	6	*
LEAF_NODE	4644:16	4644:16	7	*
NAME	4644:17	4644:17	5	dst
LEAF_NODE	4644:17	4644:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	4644:17	4644:17	5	dst = out
ASSIGN	4644:17	4644:23	6	dst = out
LVAL	4644:17	4644:17	7	dst
NAME	4644:17	4644:17	8	dst
LEAF_NODE	4644:17	4644:17	9	dst
ASSIGN_OP	4644:21	4644:21	7	=
LEAF_NODE	4644:21	4644:21	8	=
RVAL	4644:23	4644:23	7	out
FIELD	4644:23	4644:23	8	out
LEAF_NODE	4644:23	4644:23	9	out
LEAF_NODE	4644:26	4644:26	4	;
SIMPLE_DECL	4645:2	4645:26	3	char [ 8 ] action ;
VAR_DECL	4645:2	4645:17	4	char [ 8 ] action
TYPE	4645:2	4645:23	5	char [ 8 ]
TYPE_NAME	4645:2	4645:2	6	char
LEAF_NODE	4645:2	4645:2	7	char
TYPE_SUFFIX	4645:23	4645:25	6	[ 8 ]
LEAF_NODE	4645:23	4645:23	7	[
FIELD	4645:24	4645:24	7	8
LEAF_NODE	4645:24	4645:24	8	8
LEAF_NODE	4645:25	4645:25	7	]
NAME	4645:17	4645:17	5	action
LEAF_NODE	4645:17	4645:17	6	action
LEAF_NODE	4645:26	4645:26	4	;
SELECTION	4647:2	4648:4	3	
KEYWORD	4647:2	4647:2	4	if
LEAF_NODE	4647:2	4647:2	5	if
LEAF_NODE	4647:5	4647:5	4	(
CONDITION	4647:6	4647:6	4	( src == NULL ) || ( dst == NULL )
EXPR	4647:6	4647:6	5	( src == NULL ) || ( dst == NULL )
OR	4647:6	4647:23	6	( src == NULL ) || ( dst == NULL )
EXPR	4647:6	4647:18	7	( src == NULL )
LEAF_NODE	4647:6	4647:6	8	(
FIELD	4647:7	4647:7	8	src
LEAF_NODE	4647:7	4647:7	9	src
EQ_OPERATOR	4647:11	4647:11	8	==
LEAF_NODE	4647:11	4647:11	9	==
FIELD	4647:14	4647:14	8	NULL
LEAF_NODE	4647:14	4647:14	9	NULL
LEAF_NODE	4647:18	4647:18	8	)
LEAF_NODE	4647:20	4647:20	7	||
EXPR	4647:23	4647:35	7	( dst == NULL )
LEAF_NODE	4647:23	4647:23	8	(
FIELD	4647:24	4647:24	8	dst
LEAF_NODE	4647:24	4647:24	9	dst
EQ_OPERATOR	4647:28	4647:28	8	==
LEAF_NODE	4647:28	4647:28	9	==
FIELD	4647:31	4647:31	8	NULL
LEAF_NODE	4647:31	4647:31	9	NULL
LEAF_NODE	4647:35	4647:35	8	)
LEAF_NODE	4647:36	4647:36	4	)
STATEMENTS	4648:4	4651:4	4	
LEAF_NODE	4648:4	4648:4	5	{
STATEMENTS	4649:4	4650:4	5	
EXPR_STATEMENT	4649:4	4649:82	6	TIFFError ( "combineSeparateTileSamples32bits" , "Invalid input or output buffer" ) ;
EXPR	4649:4	4649:4	7	TIFFError ( "combineSeparateTileSamples32bits" , "Invalid input or output buffer" )
FUNCTION_CALL	4649:4	4649:81	8	TIFFError ( "combineSeparateTileSamples32bits" , "Invalid input or output buffer" )
CALLEE	4649:4	4649:4	9	TIFFError
LEAF_NODE	4649:4	4649:4	10	TIFFError
LEAF_NODE	4649:13	4649:13	9	(
ARGUMENT	4649:14	4649:14	9	"combineSeparateTileSamples32bits"
FIELD	4649:14	4649:14	10	"combineSeparateTileSamples32bits"
LEAF_NODE	4649:14	4649:14	11	"combineSeparateTileSamples32bits"
LEAF_NODE	4649:48	4649:48	9	,
ARGUMENT	4649:49	4649:49	9	"Invalid input or output buffer"
FIELD	4649:49	4649:49	10	"Invalid input or output buffer"
LEAF_NODE	4649:49	4649:49	11	"Invalid input or output buffer"
LEAF_NODE	4649:81	4649:81	9	)
LEAF_NODE	4649:82	4649:82	7	;
JUMP_STATEMENT	4650:4	4650:14	6	return ( 1 ) ;
KEYWORD	4650:4	4650:4	7	return
LEAF_NODE	4650:4	4650:4	8	return
DESTINATION	4650:11	4650:11	7	( 1 )
EXPR	4650:11	4650:13	8	( 1 )
LEAF_NODE	4650:11	4650:11	9	(
FIELD	4650:12	4650:12	9	1
LEAF_NODE	4650:12	4650:12	10	1
LEAF_NODE	4650:13	4650:13	9	)
LEAF_NODE	4650:14	4650:14	7	;
LEAF_NODE	4651:4	4651:4	5	}
EXPR_STATEMENT	4653:2	4653:36	3	src_rowsize = ( ( bps * tw ) + 7 ) / 8 ;
EXPR	4653:2	4653:2	4	src_rowsize = ( ( bps * tw ) + 7 ) / 8
ASSIGN	4653:2	4653:16	5	src_rowsize = ( ( bps * tw ) + 7 ) / 8
LVAL	4653:2	4653:2	6	src_rowsize
FIELD	4653:2	4653:2	7	src_rowsize
LEAF_NODE	4653:2	4653:2	8	src_rowsize
ASSIGN_OP	4653:14	4653:14	6	=
LEAF_NODE	4653:14	4653:14	7	=
RVAL	4653:16	4653:35	6	( ( bps * tw ) + 7 ) / 8
LEAF_NODE	4653:16	4653:16	7	(
LEAF_NODE	4653:17	4653:17	7	(
FIELD	4653:18	4653:18	7	bps
LEAF_NODE	4653:18	4653:18	8	bps
LEAF_NODE	4653:22	4653:22	7	*
FIELD	4653:24	4653:24	7	tw
LEAF_NODE	4653:24	4653:24	8	tw
LEAF_NODE	4653:26	4653:26	7	)
LEAF_NODE	4653:28	4653:28	7	+
FIELD	4653:30	4653:30	7	7
LEAF_NODE	4653:30	4653:30	8	7
LEAF_NODE	4653:31	4653:31	7	)
LEAF_NODE	4653:33	4653:33	7	/
FIELD	4653:35	4653:35	7	8
LEAF_NODE	4653:35	4653:35	8	8
LEAF_NODE	4653:36	4653:36	4	;
LEAF_NODE	4654:2	4654:2	3	dst_rowsize
LEAF_NODE	4654:14	4654:14	3	=
LEAF_NODE	4654:16	4654:16	3	(
LEAF_NODE	4654:17	4654:17	3	(
LEAF_NODE	4654:18	4654:18	3	imagewidth
LEAF_NODE	4654:29	4654:29	3	*
LEAF_NODE	4654:31	4654:31	3	bps
LEAF_NODE	4654:35	4654:35	3	*
LEAF_NODE	4654:37	4654:37	3	spp
LEAF_NODE	4654:40	4654:40	3	)
LEAF_NODE	4654:42	4654:42	3	+
LEAF_NODE	4654:44	4654:44	3	7
LEAF_NODE	4654:45	4654:45	3	)
LEAF_NODE	4654:47	4654:47	3	/
EXPR_STATEMENT	4654:49	4654:50	3	8 ;
EXPR	4654:49	4654:49	4	8
FIELD	4654:49	4654:49	5	8
LEAF_NODE	4654:49	4654:49	6	8
LEAF_NODE	4654:50	4654:50	4	;
EXPR_STATEMENT	4655:2	4655:39	3	maskbits = ( uint64 ) - 1 >> ( 64 - bps ) ;
EXPR	4655:2	4655:2	4	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
ASSIGN	4655:2	4655:14	5	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
LVAL	4655:2	4655:2	6	maskbits
FIELD	4655:2	4655:2	7	maskbits
LEAF_NODE	4655:2	4655:2	8	maskbits
ASSIGN_OP	4655:11	4655:11	6	=
LEAF_NODE	4655:11	4655:11	7	=
RVAL	4655:14	4655:38	6	( uint64 ) - 1 >> ( 64 - bps )
LEAF_NODE	4655:14	4655:14	7	(
TYPE_NAME	4655:15	4655:15	7	uint64
LEAF_NODE	4655:15	4655:15	8	uint64
LEAF_NODE	4655:21	4655:21	7	)
UNARY_EXPR	4655:22	4655:23	7	- 1
UNARY_OPERATOR	4655:22	4655:22	8	-
LEAF_NODE	4655:22	4655:22	9	-
FIELD	4655:23	4655:23	8	1
LEAF_NODE	4655:23	4655:23	9	1
LEAF_NODE	4655:25	4655:25	7	>>
LEAF_NODE	4655:28	4655:28	7	(
FIELD	4655:30	4655:30	7	64
LEAF_NODE	4655:30	4655:30	8	64
LEAF_NODE	4655:33	4655:33	7	-
FIELD	4655:35	4655:35	7	bps
LEAF_NODE	4655:35	4655:35	8	bps
LEAF_NODE	4655:38	4655:38	7	)
LEAF_NODE	4655:39	4655:39	4	;
ITERATION	4658:2	4659:4	3	
KEYWORD	4658:2	4658:2	4	for
LEAF_NODE	4658:2	4658:2	5	for
LEAF_NODE	4658:6	4658:6	4	(
FOR_INIT	4658:7	4658:14	4	row = 0 ;
EXPR	4658:7	4658:7	5	row = 0
ASSIGN	4658:7	4658:13	6	row = 0
LVAL	4658:7	4658:7	7	row
FIELD	4658:7	4658:7	8	row
LEAF_NODE	4658:7	4658:7	9	row
ASSIGN_OP	4658:11	4658:11	7	=
LEAF_NODE	4658:11	4658:11	8	=
RVAL	4658:13	4658:13	7	0
FIELD	4658:13	4658:13	8	0
LEAF_NODE	4658:13	4658:13	9	0
LEAF_NODE	4658:14	4658:14	5	;
CONDITION	4658:16	4658:16	4	row < rows
EXPR	4658:16	4658:22	5	row < rows
FIELD	4658:16	4658:16	6	row
LEAF_NODE	4658:16	4658:16	7	row
REL_OPERATOR	4658:20	4658:20	6	<
LEAF_NODE	4658:20	4658:20	7	<
FIELD	4658:22	4658:22	6	rows
LEAF_NODE	4658:22	4658:22	7	rows
LEAF_NODE	4658:26	4658:26	4	;
FOR_EXPR	4658:28	4658:28	4	row ++
EXPR	4658:28	4658:28	5	row ++
FIELD	4658:28	4658:31	6	row ++
LEAF_NODE	4658:28	4658:28	7	row
LEAF_NODE	4658:31	4658:31	7	++
LEAF_NODE	4658:33	4658:33	4	)
STATEMENTS	4659:4	4755:4	4	
LEAF_NODE	4659:4	4659:4	5	{
STATEMENTS	4660:4	4750:4	5	
EXPR_STATEMENT	4660:4	4660:18	6	ready_bits = 0 ;
EXPR	4660:4	4660:4	7	ready_bits = 0
ASSIGN	4660:4	4660:17	8	ready_bits = 0
LVAL	4660:4	4660:4	9	ready_bits
FIELD	4660:4	4660:4	10	ready_bits
LEAF_NODE	4660:4	4660:4	11	ready_bits
ASSIGN_OP	4660:15	4660:15	9	=
LEAF_NODE	4660:15	4660:15	10	=
RVAL	4660:17	4660:17	9	0
FIELD	4660:17	4660:17	10	0
LEAF_NODE	4660:17	4660:17	11	0
LEAF_NODE	4660:18	4660:18	7	;
EXPR_STATEMENT	4661:4	4661:21	6	buff1 = buff2 = 0 ;
EXPR	4661:4	4661:4	7	buff1 = buff2 = 0
ASSIGN	4661:4	4661:12	8	buff1 = buff2 = 0
LVAL	4661:4	4661:4	9	buff1
FIELD	4661:4	4661:4	10	buff1
LEAF_NODE	4661:4	4661:4	11	buff1
ASSIGN_OP	4661:10	4661:10	9	=
LEAF_NODE	4661:10	4661:10	10	=
RVAL	4661:12	4661:12	9	buff2 = 0
ASSIGN	4661:12	4661:20	10	buff2 = 0
LVAL	4661:12	4661:12	11	buff2
FIELD	4661:12	4661:12	12	buff2
LEAF_NODE	4661:12	4661:12	13	buff2
ASSIGN_OP	4661:18	4661:18	11	=
LEAF_NODE	4661:18	4661:18	12	=
RVAL	4661:20	4661:20	11	0
FIELD	4661:20	4661:20	12	0
LEAF_NODE	4661:20	4661:20	13	0
LEAF_NODE	4661:21	4661:21	7	;
EXPR_STATEMENT	4662:4	4662:35	6	dst = out + ( row * dst_rowsize ) ;
EXPR	4662:4	4662:4	7	dst = out + ( row * dst_rowsize )
ASSIGN	4662:4	4662:10	8	dst = out + ( row * dst_rowsize )
LVAL	4662:4	4662:4	9	dst
FIELD	4662:4	4662:4	10	dst
LEAF_NODE	4662:4	4662:4	11	dst
ASSIGN_OP	4662:8	4662:8	9	=
LEAF_NODE	4662:8	4662:8	10	=
RVAL	4662:10	4662:34	9	out + ( row * dst_rowsize )
FIELD	4662:10	4662:10	10	out
LEAF_NODE	4662:10	4662:10	11	out
LEAF_NODE	4662:14	4662:14	10	+
LEAF_NODE	4662:16	4662:16	10	(
FIELD	4662:17	4662:17	10	row
LEAF_NODE	4662:17	4662:17	11	row
LEAF_NODE	4662:21	4662:21	10	*
FIELD	4662:23	4662:23	10	dst_rowsize
LEAF_NODE	4662:23	4662:23	11	dst_rowsize
LEAF_NODE	4662:34	4662:34	10	)
LEAF_NODE	4662:35	4662:35	7	;
EXPR_STATEMENT	4663:4	4663:34	6	src_offset = row * src_rowsize ;
EXPR	4663:4	4663:4	7	src_offset = row * src_rowsize
ASSIGN	4663:4	4663:17	8	src_offset = row * src_rowsize
LVAL	4663:4	4663:4	9	src_offset
FIELD	4663:4	4663:4	10	src_offset
LEAF_NODE	4663:4	4663:4	11	src_offset
ASSIGN_OP	4663:15	4663:15	9	=
LEAF_NODE	4663:15	4663:15	10	=
RVAL	4663:17	4663:23	9	row * src_rowsize
FIELD	4663:17	4663:17	10	row
LEAF_NODE	4663:17	4663:17	11	row
LEAF_NODE	4663:21	4663:21	10	*
FIELD	4663:23	4663:23	10	src_rowsize
LEAF_NODE	4663:23	4663:23	11	src_rowsize
LEAF_NODE	4663:34	4663:34	7	;
ITERATION	4664:4	4665:6	6	
KEYWORD	4664:4	4664:4	7	for
LEAF_NODE	4664:4	4664:4	8	for
LEAF_NODE	4664:8	4664:8	7	(
FOR_INIT	4664:9	4664:16	7	col = 0 ;
EXPR	4664:9	4664:9	8	col = 0
ASSIGN	4664:9	4664:15	9	col = 0
LVAL	4664:9	4664:9	10	col
FIELD	4664:9	4664:9	11	col
LEAF_NODE	4664:9	4664:9	12	col
ASSIGN_OP	4664:13	4664:13	10	=
LEAF_NODE	4664:13	4664:13	11	=
RVAL	4664:15	4664:15	10	0
FIELD	4664:15	4664:15	11	0
LEAF_NODE	4664:15	4664:15	12	0
LEAF_NODE	4664:16	4664:16	8	;
CONDITION	4664:18	4664:18	7	col < cols
EXPR	4664:18	4664:24	8	col < cols
FIELD	4664:18	4664:18	9	col
LEAF_NODE	4664:18	4664:18	10	col
REL_OPERATOR	4664:22	4664:22	9	<
LEAF_NODE	4664:22	4664:22	10	<
FIELD	4664:24	4664:24	9	cols
LEAF_NODE	4664:24	4664:24	10	cols
LEAF_NODE	4664:28	4664:28	7	;
FOR_EXPR	4664:30	4664:30	7	col ++
EXPR	4664:30	4664:30	8	col ++
FIELD	4664:30	4664:33	9	col ++
LEAF_NODE	4664:30	4664:30	10	col
LEAF_NODE	4664:33	4664:33	10	++
LEAF_NODE	4664:35	4664:35	7	)
STATEMENTS	4665:6	4726:6	7	
LEAF_NODE	4665:6	4665:6	8	{
STATEMENTS	4667:6	4672:6	8	
EXPR_STATEMENT	4667:6	4667:28	9	bit_offset = col * bps ;
EXPR	4667:6	4667:6	10	bit_offset = col * bps
ASSIGN	4667:6	4667:19	11	bit_offset = col * bps
LVAL	4667:6	4667:6	12	bit_offset
FIELD	4667:6	4667:6	13	bit_offset
LEAF_NODE	4667:6	4667:6	14	bit_offset
ASSIGN_OP	4667:17	4667:17	12	=
LEAF_NODE	4667:17	4667:17	13	=
RVAL	4667:19	4667:25	12	col * bps
FIELD	4667:19	4667:19	13	col
LEAF_NODE	4667:19	4667:19	14	col
LEAF_NODE	4667:23	4667:23	13	*
FIELD	4667:25	4667:25	13	bps
LEAF_NODE	4667:25	4667:25	14	bps
LEAF_NODE	4667:28	4667:28	10	;
EXPR_STATEMENT	4668:6	4668:31	9	src_byte = bit_offset / 8 ;
EXPR	4668:6	4668:6	10	src_byte = bit_offset / 8
ASSIGN	4668:6	4668:17	11	src_byte = bit_offset / 8
LVAL	4668:6	4668:6	12	src_byte
FIELD	4668:6	4668:6	13	src_byte
LEAF_NODE	4668:6	4668:6	14	src_byte
ASSIGN_OP	4668:15	4668:15	12	=
LEAF_NODE	4668:15	4668:15	13	=
RVAL	4668:17	4668:30	12	bit_offset / 8
FIELD	4668:17	4668:17	13	bit_offset
LEAF_NODE	4668:17	4668:17	14	bit_offset
LEAF_NODE	4668:28	4668:28	13	/
FIELD	4668:30	4668:30	13	8
LEAF_NODE	4668:30	4668:30	14	8
LEAF_NODE	4668:31	4668:31	10	;
EXPR_STATEMENT	4669:6	4669:31	9	src_bit = bit_offset % 8 ;
EXPR	4669:6	4669:6	10	src_bit = bit_offset % 8
ASSIGN	4669:6	4669:17	11	src_bit = bit_offset % 8
LVAL	4669:6	4669:6	12	src_bit
FIELD	4669:6	4669:6	13	src_bit
LEAF_NODE	4669:6	4669:6	14	src_bit
ASSIGN_OP	4669:15	4669:15	12	=
LEAF_NODE	4669:15	4669:15	13	=
RVAL	4669:17	4669:30	12	bit_offset % 8
FIELD	4669:17	4669:17	13	bit_offset
LEAF_NODE	4669:17	4669:17	14	bit_offset
LEAF_NODE	4669:28	4669:28	13	%
FIELD	4669:30	4669:30	13	8
LEAF_NODE	4669:30	4669:30	14	8
LEAF_NODE	4669:31	4669:31	10	;
EXPR_STATEMENT	4671:6	4671:50	9	matchbits = maskbits << ( 64 - src_bit - bps ) ;
EXPR	4671:6	4671:6	10	matchbits = maskbits << ( 64 - src_bit - bps )
ASSIGN	4671:6	4671:18	11	matchbits = maskbits << ( 64 - src_bit - bps )
LVAL	4671:6	4671:6	12	matchbits
FIELD	4671:6	4671:6	13	matchbits
LEAF_NODE	4671:6	4671:6	14	matchbits
ASSIGN_OP	4671:16	4671:16	12	=
LEAF_NODE	4671:16	4671:16	13	=
RVAL	4671:18	4671:49	12	maskbits << ( 64 - src_bit - bps )
FIELD	4671:18	4671:18	13	maskbits
LEAF_NODE	4671:18	4671:18	14	maskbits
LEAF_NODE	4671:27	4671:27	13	<<
LEAF_NODE	4671:30	4671:30	13	(
FIELD	4671:31	4671:31	13	64
LEAF_NODE	4671:31	4671:31	14	64
LEAF_NODE	4671:34	4671:34	13	-
FIELD	4671:36	4671:36	13	src_bit
LEAF_NODE	4671:36	4671:36	14	src_bit
LEAF_NODE	4671:44	4671:44	13	-
FIELD	4671:46	4671:46	13	bps
LEAF_NODE	4671:46	4671:46	14	bps
LEAF_NODE	4671:49	4671:49	13	)
LEAF_NODE	4671:50	4671:50	10	;
ITERATION	4672:6	4673:1	9	
KEYWORD	4672:6	4672:6	10	for
LEAF_NODE	4672:6	4672:6	11	for
LEAF_NODE	4672:10	4672:10	10	(
FOR_INIT	4672:11	4672:16	10	s = 0 ;
EXPR	4672:11	4672:11	11	s = 0
ASSIGN	4672:11	4672:15	12	s = 0
LVAL	4672:11	4672:11	13	s
FIELD	4672:11	4672:11	14	s
LEAF_NODE	4672:11	4672:11	15	s
ASSIGN_OP	4672:13	4672:13	13	=
LEAF_NODE	4672:13	4672:13	14	=
RVAL	4672:15	4672:15	13	0
FIELD	4672:15	4672:15	14	0
LEAF_NODE	4672:15	4672:15	15	0
LEAF_NODE	4672:16	4672:16	11	;
CONDITION	4672:18	4672:18	10	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4672:18	4672:18	11	( s < spp ) && ( s < MAX_SAMPLES )
AND	4672:18	4672:31	12	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4672:18	4672:26	13	( s < spp )
LEAF_NODE	4672:18	4672:18	14	(
FIELD	4672:19	4672:19	14	s
LEAF_NODE	4672:19	4672:19	15	s
REL_OPERATOR	4672:21	4672:21	14	<
LEAF_NODE	4672:21	4672:21	15	<
FIELD	4672:23	4672:23	14	spp
LEAF_NODE	4672:23	4672:23	15	spp
LEAF_NODE	4672:26	4672:26	14	)
LEAF_NODE	4672:28	4672:28	13	&&
EXPR	4672:31	4672:47	13	( s < MAX_SAMPLES )
LEAF_NODE	4672:31	4672:31	14	(
FIELD	4672:32	4672:32	14	s
LEAF_NODE	4672:32	4672:32	15	s
REL_OPERATOR	4672:34	4672:34	14	<
LEAF_NODE	4672:34	4672:34	15	<
FIELD	4672:36	4672:36	14	MAX_SAMPLES
LEAF_NODE	4672:36	4672:36	15	MAX_SAMPLES
LEAF_NODE	4672:47	4672:47	14	)
LEAF_NODE	4672:48	4672:48	10	;
FOR_EXPR	4672:50	4672:50	10	s ++
EXPR	4672:50	4672:50	11	s ++
FIELD	4672:50	4672:51	12	s ++
LEAF_NODE	4672:50	4672:50	13	s
LEAF_NODE	4672:51	4672:51	13	++
LEAF_NODE	4672:53	4672:53	10	)
STATEMENTS	4673:1	4725:1	10	
LEAF_NODE	4673:1	4673:1	11	{
STATEMENTS	4674:1	4714:1	11	
EXPR_STATEMENT	4674:1	4674:36	12	src = in [ s ] + src_offset + src_byte ;
EXPR	4674:1	4674:1	13	src = in [ s ] + src_offset + src_byte
ASSIGN	4674:1	4674:7	14	src = in [ s ] + src_offset + src_byte
LVAL	4674:1	4674:1	15	src
FIELD	4674:1	4674:1	16	src
LEAF_NODE	4674:1	4674:1	17	src
ASSIGN_OP	4674:5	4674:5	15	=
LEAF_NODE	4674:5	4674:5	16	=
RVAL	4674:7	4674:28	15	in [ s ] + src_offset + src_byte
FIELD	4674:7	4674:11	16	in [ s ]
LEAF_NODE	4674:7	4674:7	17	in
LEAF_NODE	4674:9	4674:9	17	[
EXPR	4674:10	4674:10	17	s
FIELD	4674:10	4674:10	18	s
LEAF_NODE	4674:10	4674:10	19	s
LEAF_NODE	4674:11	4674:11	17	]
LEAF_NODE	4674:13	4674:13	16	+
FIELD	4674:15	4674:15	16	src_offset
LEAF_NODE	4674:15	4674:15	17	src_offset
LEAF_NODE	4674:26	4674:26	16	+
FIELD	4674:28	4674:28	16	src_byte
LEAF_NODE	4674:28	4674:28	17	src_byte
LEAF_NODE	4674:36	4674:36	13	;
SELECTION	4675:1	4676:3	12	
KEYWORD	4675:1	4675:1	13	if
LEAF_NODE	4675:1	4675:1	14	if
LEAF_NODE	4675:4	4675:4	13	(
CONDITION	4675:5	4675:5	13	little_endian
EXPR	4675:5	4675:5	14	little_endian
FIELD	4675:5	4675:5	15	little_endian
LEAF_NODE	4675:5	4675:5	16	little_endian
LEAF_NODE	4675:18	4675:18	13	)
STATEMENTS	4676:3	4679:3	13	
LEAF_NODE	4676:3	4676:3	14	{
STATEMENTS	4677:3	4678:3	14	
EXPR_STATEMENT	4677:3	4677:71	15	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	4677:3	4677:3	16	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	4677:3	4677:15	17	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	4677:3	4677:3	18	longbuff1
FIELD	4677:3	4677:3	19	longbuff1
LEAF_NODE	4677:3	4677:3	20	longbuff1
ASSIGN_OP	4677:13	4677:13	18	=
LEAF_NODE	4677:13	4677:13	19	=
RVAL	4677:15	4677:15	18	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4677:15	4677:32	19	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4677:15	4677:28	20	( src [ 0 ] << 24 )
LEAF_NODE	4677:15	4677:15	21	(
FIELD	4677:16	4677:21	21	src [ 0 ]
LEAF_NODE	4677:16	4677:16	22	src
LEAF_NODE	4677:19	4677:19	22	[
EXPR	4677:20	4677:20	22	0
FIELD	4677:20	4677:20	23	0
LEAF_NODE	4677:20	4677:20	24	0
LEAF_NODE	4677:21	4677:21	22	]
LEAF_NODE	4677:23	4677:23	21	<<
FIELD	4677:26	4677:26	21	24
LEAF_NODE	4677:26	4677:26	22	24
LEAF_NODE	4677:28	4677:28	21	)
LEAF_NODE	4677:30	4677:30	20	|
BIT_OR_ELEM	4677:32	4677:32	20	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4677:32	4677:49	21	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4677:32	4677:45	22	( src [ 1 ] << 16 )
LEAF_NODE	4677:32	4677:32	23	(
FIELD	4677:33	4677:38	23	src [ 1 ]
LEAF_NODE	4677:33	4677:33	24	src
LEAF_NODE	4677:36	4677:36	24	[
EXPR	4677:37	4677:37	24	1
FIELD	4677:37	4677:37	25	1
LEAF_NODE	4677:37	4677:37	26	1
LEAF_NODE	4677:38	4677:38	24	]
LEAF_NODE	4677:40	4677:40	23	<<
FIELD	4677:43	4677:43	23	16
LEAF_NODE	4677:43	4677:43	24	16
LEAF_NODE	4677:45	4677:45	23	)
LEAF_NODE	4677:47	4677:47	22	|
BIT_OR_ELEM	4677:49	4677:49	22	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	4677:49	4677:65	23	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	4677:49	4677:61	24	( src [ 2 ] << 8 )
LEAF_NODE	4677:49	4677:49	25	(
FIELD	4677:50	4677:55	25	src [ 2 ]
LEAF_NODE	4677:50	4677:50	26	src
LEAF_NODE	4677:53	4677:53	26	[
EXPR	4677:54	4677:54	26	2
FIELD	4677:54	4677:54	27	2
LEAF_NODE	4677:54	4677:54	28	2
LEAF_NODE	4677:55	4677:55	26	]
LEAF_NODE	4677:57	4677:57	25	<<
FIELD	4677:60	4677:60	25	8
LEAF_NODE	4677:60	4677:60	26	8
LEAF_NODE	4677:61	4677:61	25	)
LEAF_NODE	4677:63	4677:63	24	|
BIT_OR_ELEM	4677:65	4677:65	24	src [ 3 ]
FIELD	4677:65	4677:70	25	src [ 3 ]
LEAF_NODE	4677:65	4677:65	26	src
LEAF_NODE	4677:68	4677:68	26	[
EXPR	4677:69	4677:69	26	3
FIELD	4677:69	4677:69	27	3
LEAF_NODE	4677:69	4677:69	28	3
LEAF_NODE	4677:70	4677:70	26	]
LEAF_NODE	4677:71	4677:71	16	;
EXPR_STATEMENT	4678:3	4678:24	15	longbuff2 = longbuff1 ;
EXPR	4678:3	4678:3	16	longbuff2 = longbuff1
ASSIGN	4678:3	4678:15	17	longbuff2 = longbuff1
LVAL	4678:3	4678:3	18	longbuff2
FIELD	4678:3	4678:3	19	longbuff2
LEAF_NODE	4678:3	4678:3	20	longbuff2
ASSIGN_OP	4678:13	4678:13	18	=
LEAF_NODE	4678:13	4678:13	19	=
RVAL	4678:15	4678:15	18	longbuff1
FIELD	4678:15	4678:15	19	longbuff1
LEAF_NODE	4678:15	4678:15	20	longbuff1
LEAF_NODE	4678:24	4678:24	16	;
LEAF_NODE	4679:3	4679:3	14	}
SELECTION	4680:1	4681:3	12	
KEYWORD	4680:1	4680:1	13	else
LEAF_NODE	4680:1	4680:1	14	else
STATEMENTS	4681:3	4684:3	13	
LEAF_NODE	4681:3	4681:3	14	{
STATEMENTS	4682:3	4683:10	14	
EXPR_STATEMENT	4682:3	4682:71	15	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	4682:3	4682:3	16	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	4682:3	4682:15	17	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	4682:3	4682:3	18	longbuff1
FIELD	4682:3	4682:3	19	longbuff1
LEAF_NODE	4682:3	4682:3	20	longbuff1
ASSIGN_OP	4682:13	4682:13	18	=
LEAF_NODE	4682:13	4682:13	19	=
RVAL	4682:15	4682:15	18	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4682:15	4682:32	19	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4682:15	4682:28	20	( src [ 3 ] << 24 )
LEAF_NODE	4682:15	4682:15	21	(
FIELD	4682:16	4682:21	21	src [ 3 ]
LEAF_NODE	4682:16	4682:16	22	src
LEAF_NODE	4682:19	4682:19	22	[
EXPR	4682:20	4682:20	22	3
FIELD	4682:20	4682:20	23	3
LEAF_NODE	4682:20	4682:20	24	3
LEAF_NODE	4682:21	4682:21	22	]
LEAF_NODE	4682:23	4682:23	21	<<
FIELD	4682:26	4682:26	21	24
LEAF_NODE	4682:26	4682:26	22	24
LEAF_NODE	4682:28	4682:28	21	)
LEAF_NODE	4682:30	4682:30	20	|
BIT_OR_ELEM	4682:32	4682:32	20	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4682:32	4682:49	21	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4682:32	4682:45	22	( src [ 2 ] << 16 )
LEAF_NODE	4682:32	4682:32	23	(
FIELD	4682:33	4682:38	23	src [ 2 ]
LEAF_NODE	4682:33	4682:33	24	src
LEAF_NODE	4682:36	4682:36	24	[
EXPR	4682:37	4682:37	24	2
FIELD	4682:37	4682:37	25	2
LEAF_NODE	4682:37	4682:37	26	2
LEAF_NODE	4682:38	4682:38	24	]
LEAF_NODE	4682:40	4682:40	23	<<
FIELD	4682:43	4682:43	23	16
LEAF_NODE	4682:43	4682:43	24	16
LEAF_NODE	4682:45	4682:45	23	)
LEAF_NODE	4682:47	4682:47	22	|
BIT_OR_ELEM	4682:49	4682:49	22	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	4682:49	4682:65	23	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	4682:49	4682:61	24	( src [ 1 ] << 8 )
LEAF_NODE	4682:49	4682:49	25	(
FIELD	4682:50	4682:55	25	src [ 1 ]
LEAF_NODE	4682:50	4682:50	26	src
LEAF_NODE	4682:53	4682:53	26	[
EXPR	4682:54	4682:54	26	1
FIELD	4682:54	4682:54	27	1
LEAF_NODE	4682:54	4682:54	28	1
LEAF_NODE	4682:55	4682:55	26	]
LEAF_NODE	4682:57	4682:57	25	<<
FIELD	4682:60	4682:60	25	8
LEAF_NODE	4682:60	4682:60	26	8
LEAF_NODE	4682:61	4682:61	25	)
LEAF_NODE	4682:63	4682:63	24	|
BIT_OR_ELEM	4682:65	4682:65	24	src [ 0 ]
FIELD	4682:65	4682:70	25	src [ 0 ]
LEAF_NODE	4682:65	4682:65	26	src
LEAF_NODE	4682:68	4682:68	26	[
EXPR	4682:69	4682:69	26	0
FIELD	4682:69	4682:69	27	0
LEAF_NODE	4682:69	4682:69	28	0
LEAF_NODE	4682:70	4682:70	26	]
LEAF_NODE	4682:71	4682:71	16	;
EXPR_STATEMENT	4683:10	4683:31	15	longbuff2 = longbuff1 ;
EXPR	4683:10	4683:10	16	longbuff2 = longbuff1
ASSIGN	4683:10	4683:22	17	longbuff2 = longbuff1
LVAL	4683:10	4683:10	18	longbuff2
FIELD	4683:10	4683:10	19	longbuff2
LEAF_NODE	4683:10	4683:10	20	longbuff2
ASSIGN_OP	4683:20	4683:20	18	=
LEAF_NODE	4683:20	4683:20	19	=
RVAL	4683:22	4683:22	18	longbuff1
FIELD	4683:22	4683:22	19	longbuff1
LEAF_NODE	4683:22	4683:22	20	longbuff1
LEAF_NODE	4683:31	4683:31	16	;
LEAF_NODE	4684:3	4684:3	14	}
EXPR_STATEMENT	4686:1	4686:46	12	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2 ;
EXPR	4686:1	4686:1	13	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
ASSIGN	4686:1	4686:9	14	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
LVAL	4686:1	4686:1	15	buff3
FIELD	4686:1	4686:1	16	buff3
LEAF_NODE	4686:1	4686:1	17	buff3
ASSIGN_OP	4686:7	4686:7	15	=
LEAF_NODE	4686:7	4686:7	16	=
RVAL	4686:9	4686:9	15	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR	4686:9	4686:37	16	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR_ELEM	4686:9	4686:33	17	( ( uint64 ) longbuff1 << 32 )
LEAF_NODE	4686:9	4686:9	18	(
LEAF_NODE	4686:10	4686:10	18	(
TYPE_NAME	4686:11	4686:11	18	uint64
LEAF_NODE	4686:11	4686:11	19	uint64
LEAF_NODE	4686:17	4686:17	18	)
FIELD	4686:18	4686:18	18	longbuff1
LEAF_NODE	4686:18	4686:18	19	longbuff1
LEAF_NODE	4686:28	4686:28	18	<<
FIELD	4686:31	4686:31	18	32
LEAF_NODE	4686:31	4686:31	19	32
LEAF_NODE	4686:33	4686:33	18	)
LEAF_NODE	4686:35	4686:35	17	|
BIT_OR_ELEM	4686:37	4686:37	17	longbuff2
FIELD	4686:37	4686:37	18	longbuff2
LEAF_NODE	4686:37	4686:37	19	longbuff2
LEAF_NODE	4686:46	4686:46	13	;
LEAF_NODE	4687:1	4687:1	12	buff1
LEAF_NODE	4687:7	4687:7	12	=
LEAF_NODE	4687:9	4687:9	12	(
LEAF_NODE	4687:10	4687:10	12	buff3
LEAF_NODE	4687:16	4687:16	12	&
LEAF_NODE	4687:18	4687:18	12	matchbits
LEAF_NODE	4687:27	4687:27	12	)
LEAF_NODE	4687:29	4687:29	12	<<
LEAF_NODE	4687:32	4687:32	12	(
LEAF_NODE	4687:33	4687:33	12	src_bit
LEAF_NODE	4687:40	4687:40	12	)
LEAF_NODE	4687:41	4687:41	12	;
SELECTION	4690:1	4691:3	12	
KEYWORD	4690:1	4690:1	13	if
LEAF_NODE	4690:1	4690:1	14	if
LEAF_NODE	4690:4	4690:4	13	(
CONDITION	4690:5	4690:5	13	ready_bits >= 32
EXPR	4690:5	4690:19	14	ready_bits >= 32
FIELD	4690:5	4690:5	15	ready_bits
LEAF_NODE	4690:5	4690:5	16	ready_bits
REL_OPERATOR	4690:16	4690:16	15	>=
LEAF_NODE	4690:16	4690:16	16	>=
FIELD	4690:19	4690:19	15	32
LEAF_NODE	4690:19	4690:19	16	32
LEAF_NODE	4690:21	4690:21	13	)
STATEMENTS	4691:3	4705:3	13	
LEAF_NODE	4691:3	4691:3	14	{
STATEMENTS	4692:3	4704:3	14	
EXPR_STATEMENT	4692:3	4692:28	15	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	4692:3	4692:3	16	bytebuff1 = ( buff2 >> 56 )
ASSIGN	4692:3	4692:15	17	bytebuff1 = ( buff2 >> 56 )
LVAL	4692:3	4692:3	18	bytebuff1
FIELD	4692:3	4692:3	19	bytebuff1
LEAF_NODE	4692:3	4692:3	20	bytebuff1
ASSIGN_OP	4692:13	4692:13	18	=
LEAF_NODE	4692:13	4692:13	19	=
RVAL	4692:15	4692:27	18	( buff2 >> 56 )
LEAF_NODE	4692:15	4692:15	19	(
FIELD	4692:16	4692:16	19	buff2
LEAF_NODE	4692:16	4692:16	20	buff2
LEAF_NODE	4692:22	4692:22	19	>>
FIELD	4692:25	4692:25	19	56
LEAF_NODE	4692:25	4692:25	20	56
LEAF_NODE	4692:27	4692:27	19	)
LEAF_NODE	4692:28	4692:28	16	;
EXPR_STATEMENT	4693:3	4693:21	15	* dst ++ = bytebuff1 ;
EXPR	4693:3	4693:3	16	* dst ++ = bytebuff1
ASSIGN	4693:3	4693:12	17	* dst ++ = bytebuff1
LVAL	4693:3	4693:3	18	* dst ++
UNARY_EXPR	4693:3	4693:4	19	* dst ++
UNARY_OPERATOR	4693:3	4693:3	20	*
LEAF_NODE	4693:3	4693:3	21	*
FIELD	4693:4	4693:7	20	dst ++
LEAF_NODE	4693:4	4693:4	21	dst
LEAF_NODE	4693:7	4693:7	21	++
ASSIGN_OP	4693:10	4693:10	18	=
LEAF_NODE	4693:10	4693:10	19	=
RVAL	4693:12	4693:12	18	bytebuff1
FIELD	4693:12	4693:12	19	bytebuff1
LEAF_NODE	4693:12	4693:12	20	bytebuff1
LEAF_NODE	4693:21	4693:21	16	;
EXPR_STATEMENT	4694:3	4694:28	15	bytebuff2 = ( buff2 >> 48 ) ;
EXPR	4694:3	4694:3	16	bytebuff2 = ( buff2 >> 48 )
ASSIGN	4694:3	4694:15	17	bytebuff2 = ( buff2 >> 48 )
LVAL	4694:3	4694:3	18	bytebuff2
FIELD	4694:3	4694:3	19	bytebuff2
LEAF_NODE	4694:3	4694:3	20	bytebuff2
ASSIGN_OP	4694:13	4694:13	18	=
LEAF_NODE	4694:13	4694:13	19	=
RVAL	4694:15	4694:27	18	( buff2 >> 48 )
LEAF_NODE	4694:15	4694:15	19	(
FIELD	4694:16	4694:16	19	buff2
LEAF_NODE	4694:16	4694:16	20	buff2
LEAF_NODE	4694:22	4694:22	19	>>
FIELD	4694:25	4694:25	19	48
LEAF_NODE	4694:25	4694:25	20	48
LEAF_NODE	4694:27	4694:27	19	)
LEAF_NODE	4694:28	4694:28	16	;
EXPR_STATEMENT	4695:3	4695:21	15	* dst ++ = bytebuff2 ;
EXPR	4695:3	4695:3	16	* dst ++ = bytebuff2
ASSIGN	4695:3	4695:12	17	* dst ++ = bytebuff2
LVAL	4695:3	4695:3	18	* dst ++
UNARY_EXPR	4695:3	4695:4	19	* dst ++
UNARY_OPERATOR	4695:3	4695:3	20	*
LEAF_NODE	4695:3	4695:3	21	*
FIELD	4695:4	4695:7	20	dst ++
LEAF_NODE	4695:4	4695:4	21	dst
LEAF_NODE	4695:7	4695:7	21	++
ASSIGN_OP	4695:10	4695:10	18	=
LEAF_NODE	4695:10	4695:10	19	=
RVAL	4695:12	4695:12	18	bytebuff2
FIELD	4695:12	4695:12	19	bytebuff2
LEAF_NODE	4695:12	4695:12	20	bytebuff2
LEAF_NODE	4695:21	4695:21	16	;
EXPR_STATEMENT	4696:3	4696:28	15	bytebuff3 = ( buff2 >> 40 ) ;
EXPR	4696:3	4696:3	16	bytebuff3 = ( buff2 >> 40 )
ASSIGN	4696:3	4696:15	17	bytebuff3 = ( buff2 >> 40 )
LVAL	4696:3	4696:3	18	bytebuff3
FIELD	4696:3	4696:3	19	bytebuff3
LEAF_NODE	4696:3	4696:3	20	bytebuff3
ASSIGN_OP	4696:13	4696:13	18	=
LEAF_NODE	4696:13	4696:13	19	=
RVAL	4696:15	4696:27	18	( buff2 >> 40 )
LEAF_NODE	4696:15	4696:15	19	(
FIELD	4696:16	4696:16	19	buff2
LEAF_NODE	4696:16	4696:16	20	buff2
LEAF_NODE	4696:22	4696:22	19	>>
FIELD	4696:25	4696:25	19	40
LEAF_NODE	4696:25	4696:25	20	40
LEAF_NODE	4696:27	4696:27	19	)
LEAF_NODE	4696:28	4696:28	16	;
EXPR_STATEMENT	4697:3	4697:21	15	* dst ++ = bytebuff3 ;
EXPR	4697:3	4697:3	16	* dst ++ = bytebuff3
ASSIGN	4697:3	4697:12	17	* dst ++ = bytebuff3
LVAL	4697:3	4697:3	18	* dst ++
UNARY_EXPR	4697:3	4697:4	19	* dst ++
UNARY_OPERATOR	4697:3	4697:3	20	*
LEAF_NODE	4697:3	4697:3	21	*
FIELD	4697:4	4697:7	20	dst ++
LEAF_NODE	4697:4	4697:4	21	dst
LEAF_NODE	4697:7	4697:7	21	++
ASSIGN_OP	4697:10	4697:10	18	=
LEAF_NODE	4697:10	4697:10	19	=
RVAL	4697:12	4697:12	18	bytebuff3
FIELD	4697:12	4697:12	19	bytebuff3
LEAF_NODE	4697:12	4697:12	20	bytebuff3
LEAF_NODE	4697:21	4697:21	16	;
EXPR_STATEMENT	4698:3	4698:28	15	bytebuff4 = ( buff2 >> 32 ) ;
EXPR	4698:3	4698:3	16	bytebuff4 = ( buff2 >> 32 )
ASSIGN	4698:3	4698:15	17	bytebuff4 = ( buff2 >> 32 )
LVAL	4698:3	4698:3	18	bytebuff4
FIELD	4698:3	4698:3	19	bytebuff4
LEAF_NODE	4698:3	4698:3	20	bytebuff4
ASSIGN_OP	4698:13	4698:13	18	=
LEAF_NODE	4698:13	4698:13	19	=
RVAL	4698:15	4698:27	18	( buff2 >> 32 )
LEAF_NODE	4698:15	4698:15	19	(
FIELD	4698:16	4698:16	19	buff2
LEAF_NODE	4698:16	4698:16	20	buff2
LEAF_NODE	4698:22	4698:22	19	>>
FIELD	4698:25	4698:25	19	32
LEAF_NODE	4698:25	4698:25	20	32
LEAF_NODE	4698:27	4698:27	19	)
LEAF_NODE	4698:28	4698:28	16	;
EXPR_STATEMENT	4699:3	4699:21	15	* dst ++ = bytebuff4 ;
EXPR	4699:3	4699:3	16	* dst ++ = bytebuff4
ASSIGN	4699:3	4699:12	17	* dst ++ = bytebuff4
LVAL	4699:3	4699:3	18	* dst ++
UNARY_EXPR	4699:3	4699:4	19	* dst ++
UNARY_OPERATOR	4699:3	4699:3	20	*
LEAF_NODE	4699:3	4699:3	21	*
FIELD	4699:4	4699:7	20	dst ++
LEAF_NODE	4699:4	4699:4	21	dst
LEAF_NODE	4699:7	4699:7	21	++
ASSIGN_OP	4699:10	4699:10	18	=
LEAF_NODE	4699:10	4699:10	19	=
RVAL	4699:12	4699:12	18	bytebuff4
FIELD	4699:12	4699:12	19	bytebuff4
LEAF_NODE	4699:12	4699:12	20	bytebuff4
LEAF_NODE	4699:21	4699:21	16	;
EXPR_STATEMENT	4700:3	4700:19	15	ready_bits -= 32 ;
EXPR	4700:3	4700:3	16	ready_bits -= 32
ASSIGN	4700:3	4700:17	17	ready_bits -= 32
LVAL	4700:3	4700:3	18	ready_bits
FIELD	4700:3	4700:3	19	ready_bits
LEAF_NODE	4700:3	4700:3	20	ready_bits
ASSIGN_OP	4700:14	4700:14	18	-=
LEAF_NODE	4700:14	4700:14	19	-=
RVAL	4700:17	4700:17	18	32
FIELD	4700:17	4700:17	19	32
LEAF_NODE	4700:17	4700:17	20	32
LEAF_NODE	4700:19	4700:19	16	;
EXPR_STATEMENT	4703:3	4703:50	15	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) ) ;
EXPR	4703:3	4703:3	16	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
ASSIGN	4703:3	4703:11	17	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LVAL	4703:3	4703:3	18	buff2
FIELD	4703:3	4703:3	19	buff2
LEAF_NODE	4703:3	4703:3	20	buff2
ASSIGN_OP	4703:9	4703:9	18	=
LEAF_NODE	4703:9	4703:9	19	=
RVAL	4703:11	4703:49	18	( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	4703:11	4703:11	19	(
BIT_OR	4703:12	4703:28	19	( buff2 << 32 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	4703:12	4703:24	20	( buff2 << 32 )
LEAF_NODE	4703:12	4703:12	21	(
FIELD	4703:13	4703:13	21	buff2
LEAF_NODE	4703:13	4703:13	22	buff2
LEAF_NODE	4703:19	4703:19	21	<<
FIELD	4703:22	4703:22	21	32
LEAF_NODE	4703:22	4703:22	22	32
LEAF_NODE	4703:24	4703:24	21	)
LEAF_NODE	4703:26	4703:26	20	|
BIT_OR_ELEM	4703:28	4703:48	20	( buff1 >> ready_bits )
LEAF_NODE	4703:28	4703:28	21	(
FIELD	4703:29	4703:29	21	buff1
LEAF_NODE	4703:29	4703:29	22	buff1
LEAF_NODE	4703:35	4703:35	21	>>
FIELD	4703:38	4703:38	21	ready_bits
LEAF_NODE	4703:38	4703:38	22	ready_bits
LEAF_NODE	4703:48	4703:48	21	)
LEAF_NODE	4703:49	4703:49	19	)
LEAF_NODE	4703:50	4703:50	16	;
EXPR_STATEMENT	4704:3	4704:27	15	strcpy ( action , "Flush" ) ;
EXPR	4704:3	4704:3	16	strcpy ( action , "Flush" )
FUNCTION_CALL	4704:3	4704:26	17	strcpy ( action , "Flush" )
CALLEE	4704:3	4704:3	18	strcpy
LEAF_NODE	4704:3	4704:3	19	strcpy
LEAF_NODE	4704:10	4704:10	18	(
ARGUMENT	4704:11	4704:11	18	action
FIELD	4704:11	4704:11	19	action
LEAF_NODE	4704:11	4704:11	20	action
LEAF_NODE	4704:17	4704:17	18	,
ARGUMENT	4704:19	4704:19	18	"Flush"
FIELD	4704:19	4704:19	19	"Flush"
LEAF_NODE	4704:19	4704:19	20	"Flush"
LEAF_NODE	4704:26	4704:26	18	)
LEAF_NODE	4704:27	4704:27	16	;
LEAF_NODE	4705:3	4705:3	14	}
SELECTION	4706:1	4707:3	12	
KEYWORD	4706:1	4706:1	13	else
LEAF_NODE	4706:1	4706:1	14	else
STATEMENTS	4707:3	4711:3	13	
LEAF_NODE	4707:3	4707:3	14	{
STATEMENTS	4708:3	4710:3	14	
EXPR_STATEMENT	4708:3	4708:52	15	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0 ;
EXPR	4708:3	4708:3	16	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	4708:3	4708:15	17	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	4708:3	4708:3	18	bytebuff1
FIELD	4708:3	4708:3	19	bytebuff1
LEAF_NODE	4708:3	4708:3	20	bytebuff1
ASSIGN_OP	4708:13	4708:13	18	=
LEAF_NODE	4708:13	4708:13	19	=
RVAL	4708:15	4708:15	18	bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	4708:15	4708:27	19	bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	4708:15	4708:15	20	bytebuff2
FIELD	4708:15	4708:15	21	bytebuff2
LEAF_NODE	4708:15	4708:15	22	bytebuff2
ASSIGN_OP	4708:25	4708:25	20	=
LEAF_NODE	4708:25	4708:25	21	=
RVAL	4708:27	4708:27	20	bytebuff3 = bytebuff4 = 0
ASSIGN	4708:27	4708:39	21	bytebuff3 = bytebuff4 = 0
LVAL	4708:27	4708:27	22	bytebuff3
FIELD	4708:27	4708:27	23	bytebuff3
LEAF_NODE	4708:27	4708:27	24	bytebuff3
ASSIGN_OP	4708:37	4708:37	22	=
LEAF_NODE	4708:37	4708:37	23	=
RVAL	4708:39	4708:39	22	bytebuff4 = 0
ASSIGN	4708:39	4708:51	23	bytebuff4 = 0
LVAL	4708:39	4708:39	24	bytebuff4
FIELD	4708:39	4708:39	25	bytebuff4
LEAF_NODE	4708:39	4708:39	26	bytebuff4
ASSIGN_OP	4708:49	4708:49	24	=
LEAF_NODE	4708:49	4708:49	25	=
RVAL	4708:51	4708:51	24	0
FIELD	4708:51	4708:51	25	0
LEAF_NODE	4708:51	4708:51	26	0
LEAF_NODE	4708:52	4708:52	16	;
EXPR_STATEMENT	4709:3	4709:42	15	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	4709:3	4709:3	16	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	4709:3	4709:11	17	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	4709:3	4709:3	18	buff2
FIELD	4709:3	4709:3	19	buff2
LEAF_NODE	4709:3	4709:3	20	buff2
ASSIGN_OP	4709:9	4709:9	18	=
LEAF_NODE	4709:9	4709:9	19	=
RVAL	4709:11	4709:41	18	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	4709:11	4709:11	19	(
BIT_OR	4709:12	4709:20	19	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	4709:12	4709:12	20	buff2
FIELD	4709:12	4709:12	21	buff2
LEAF_NODE	4709:12	4709:12	22	buff2
LEAF_NODE	4709:18	4709:18	20	|
BIT_OR_ELEM	4709:20	4709:40	20	( buff1 >> ready_bits )
LEAF_NODE	4709:20	4709:20	21	(
FIELD	4709:21	4709:21	21	buff1
LEAF_NODE	4709:21	4709:21	22	buff1
LEAF_NODE	4709:27	4709:27	21	>>
FIELD	4709:30	4709:30	21	ready_bits
LEAF_NODE	4709:30	4709:30	22	ready_bits
LEAF_NODE	4709:40	4709:40	21	)
LEAF_NODE	4709:41	4709:41	19	)
LEAF_NODE	4709:42	4709:42	16	;
EXPR_STATEMENT	4710:3	4710:28	15	strcpy ( action , "Update" ) ;
EXPR	4710:3	4710:3	16	strcpy ( action , "Update" )
FUNCTION_CALL	4710:3	4710:27	17	strcpy ( action , "Update" )
CALLEE	4710:3	4710:3	18	strcpy
LEAF_NODE	4710:3	4710:3	19	strcpy
LEAF_NODE	4710:10	4710:10	18	(
ARGUMENT	4710:11	4710:11	18	action
FIELD	4710:11	4710:11	19	action
LEAF_NODE	4710:11	4710:11	20	action
LEAF_NODE	4710:17	4710:17	18	,
ARGUMENT	4710:19	4710:19	18	"Update"
FIELD	4710:19	4710:19	19	"Update"
LEAF_NODE	4710:19	4710:19	20	"Update"
LEAF_NODE	4710:27	4710:27	18	)
LEAF_NODE	4710:28	4710:28	16	;
LEAF_NODE	4711:3	4711:3	14	}
EXPR_STATEMENT	4712:1	4712:18	12	ready_bits += bps ;
EXPR	4712:1	4712:1	13	ready_bits += bps
ASSIGN	4712:1	4712:15	14	ready_bits += bps
LVAL	4712:1	4712:1	15	ready_bits
FIELD	4712:1	4712:1	16	ready_bits
LEAF_NODE	4712:1	4712:1	17	ready_bits
ASSIGN_OP	4712:12	4712:12	15	+=
LEAF_NODE	4712:12	4712:12	16	+=
RVAL	4712:15	4712:15	15	bps
FIELD	4712:15	4712:15	16	bps
LEAF_NODE	4712:15	4712:15	17	bps
LEAF_NODE	4712:18	4712:18	13	;
SELECTION	4714:1	4715:3	12	
KEYWORD	4714:1	4714:1	13	if
LEAF_NODE	4714:1	4714:1	14	if
LEAF_NODE	4714:4	4714:4	13	(
CONDITION	4714:5	4714:5	13	( dumpfile != NULL ) && ( level == 3 )
EXPR	4714:5	4714:5	14	( dumpfile != NULL ) && ( level == 3 )
AND	4714:5	4714:27	15	( dumpfile != NULL ) && ( level == 3 )
EXPR	4714:5	4714:22	16	( dumpfile != NULL )
LEAF_NODE	4714:5	4714:5	17	(
FIELD	4714:6	4714:6	17	dumpfile
LEAF_NODE	4714:6	4714:6	18	dumpfile
EQ_OPERATOR	4714:15	4714:15	17	!=
LEAF_NODE	4714:15	4714:15	18	!=
FIELD	4714:18	4714:18	17	NULL
LEAF_NODE	4714:18	4714:18	18	NULL
LEAF_NODE	4714:22	4714:22	17	)
LEAF_NODE	4714:24	4714:24	16	&&
EXPR	4714:27	4714:38	16	( level == 3 )
LEAF_NODE	4714:27	4714:27	17	(
FIELD	4714:28	4714:28	17	level
LEAF_NODE	4714:28	4714:28	18	level
EQ_OPERATOR	4714:34	4714:34	17	==
LEAF_NODE	4714:34	4714:34	18	==
FIELD	4714:37	4714:37	17	3
LEAF_NODE	4714:37	4714:37	18	3
LEAF_NODE	4714:38	4714:38	17	)
LEAF_NODE	4714:39	4714:39	13	)
STATEMENTS	4715:3	4724:3	13	
LEAF_NODE	4715:3	4715:3	14	{
STATEMENTS	4716:3	4723:3	14	
EXPR_STATEMENT	4716:3	4718:57	15	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out ) ;
EXPR	4716:3	4716:3	16	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
FUNCTION_CALL	4716:3	4718:56	17	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , s , src_byte , src_bit , dst - out )
CALLEE	4716:3	4716:3	18	dump_info
LEAF_NODE	4716:3	4716:3	19	dump_info
LEAF_NODE	4716:13	4716:13	18	(
ARGUMENT	4716:14	4716:14	18	dumpfile
FIELD	4716:14	4716:14	19	dumpfile
LEAF_NODE	4716:14	4716:14	20	dumpfile
LEAF_NODE	4716:22	4716:22	18	,
ARGUMENT	4716:24	4716:24	18	format
FIELD	4716:24	4716:24	19	format
LEAF_NODE	4716:24	4716:24	20	format
LEAF_NODE	4716:30	4716:30	18	,
ARGUMENT	4716:32	4716:32	18	""
FIELD	4716:32	4716:32	19	""
LEAF_NODE	4716:32	4716:32	20	""
LEAF_NODE	4716:34	4716:34	18	,
ARGUMENT	4717:7	4717:7	18	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4717:7	4717:7	19	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4717:7	4717:7	20	"Row %3d, Col %3d, Sample %d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4717:89	4717:89	18	,
ARGUMENT	4718:7	4718:13	18	row + 1
FIELD	4718:7	4718:7	19	row
LEAF_NODE	4718:7	4718:7	20	row
LEAF_NODE	4718:11	4718:11	19	+
FIELD	4718:13	4718:13	19	1
LEAF_NODE	4718:13	4718:13	20	1
LEAF_NODE	4718:14	4718:14	18	,
ARGUMENT	4718:16	4718:22	18	col + 1
FIELD	4718:16	4718:16	19	col
LEAF_NODE	4718:16	4718:16	20	col
LEAF_NODE	4718:20	4718:20	19	+
FIELD	4718:22	4718:22	19	1
LEAF_NODE	4718:22	4718:22	20	1
LEAF_NODE	4718:23	4718:23	18	,
ARGUMENT	4718:25	4718:25	18	s
FIELD	4718:25	4718:25	19	s
LEAF_NODE	4718:25	4718:25	20	s
LEAF_NODE	4718:26	4718:26	18	,
ARGUMENT	4718:28	4718:28	18	src_byte
FIELD	4718:28	4718:28	19	src_byte
LEAF_NODE	4718:28	4718:28	20	src_byte
LEAF_NODE	4718:36	4718:36	18	,
ARGUMENT	4718:38	4718:38	18	src_bit
FIELD	4718:38	4718:38	19	src_bit
LEAF_NODE	4718:38	4718:38	20	src_bit
LEAF_NODE	4718:45	4718:45	18	,
ARGUMENT	4718:47	4718:53	18	dst - out
FIELD	4718:47	4718:47	19	dst
LEAF_NODE	4718:47	4718:47	20	dst
LEAF_NODE	4718:51	4718:51	19	-
FIELD	4718:53	4718:53	19	out
LEAF_NODE	4718:53	4718:53	20	out
LEAF_NODE	4718:56	4718:56	18	)
LEAF_NODE	4718:57	4718:57	16	;
EXPR_STATEMENT	4719:3	4719:57	15	dump_wide ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4719:3	4719:3	16	dump_wide ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4719:3	4719:56	17	dump_wide ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4719:3	4719:3	18	dump_wide
LEAF_NODE	4719:3	4719:3	19	dump_wide
LEAF_NODE	4719:13	4719:13	18	(
ARGUMENT	4719:14	4719:14	18	dumpfile
FIELD	4719:14	4719:14	19	dumpfile
LEAF_NODE	4719:14	4719:14	20	dumpfile
LEAF_NODE	4719:22	4719:22	18	,
ARGUMENT	4719:24	4719:24	18	format
FIELD	4719:24	4719:24	19	format
LEAF_NODE	4719:24	4719:24	20	format
LEAF_NODE	4719:30	4719:30	18	,
ARGUMENT	4719:32	4719:32	18	"Match bits "
FIELD	4719:32	4719:32	19	"Match bits "
LEAF_NODE	4719:32	4719:32	20	"Match bits "
LEAF_NODE	4719:45	4719:45	18	,
ARGUMENT	4719:47	4719:47	18	matchbits
FIELD	4719:47	4719:47	19	matchbits
LEAF_NODE	4719:47	4719:47	20	matchbits
LEAF_NODE	4719:56	4719:56	18	)
LEAF_NODE	4719:57	4719:57	16	;
EXPR_STATEMENT	4720:3	4720:54	15	dump_data ( dumpfile , format , "Src   bits " , src , 8 ) ;
EXPR	4720:3	4720:3	16	dump_data ( dumpfile , format , "Src   bits " , src , 8 )
FUNCTION_CALL	4720:3	4720:53	17	dump_data ( dumpfile , format , "Src   bits " , src , 8 )
CALLEE	4720:3	4720:3	18	dump_data
LEAF_NODE	4720:3	4720:3	19	dump_data
LEAF_NODE	4720:13	4720:13	18	(
ARGUMENT	4720:14	4720:14	18	dumpfile
FIELD	4720:14	4720:14	19	dumpfile
LEAF_NODE	4720:14	4720:14	20	dumpfile
LEAF_NODE	4720:22	4720:22	18	,
ARGUMENT	4720:24	4720:24	18	format
FIELD	4720:24	4720:24	19	format
LEAF_NODE	4720:24	4720:24	20	format
LEAF_NODE	4720:30	4720:30	18	,
ARGUMENT	4720:32	4720:32	18	"Src   bits "
FIELD	4720:32	4720:32	19	"Src   bits "
LEAF_NODE	4720:32	4720:32	20	"Src   bits "
LEAF_NODE	4720:45	4720:45	18	,
ARGUMENT	4720:47	4720:47	18	src
FIELD	4720:47	4720:47	19	src
LEAF_NODE	4720:47	4720:47	20	src
LEAF_NODE	4720:50	4720:50	18	,
ARGUMENT	4720:52	4720:52	18	8
FIELD	4720:52	4720:52	19	8
LEAF_NODE	4720:52	4720:52	20	8
LEAF_NODE	4720:53	4720:53	18	)
LEAF_NODE	4720:54	4720:54	16	;
EXPR_STATEMENT	4721:3	4721:53	15	dump_wide ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4721:3	4721:3	16	dump_wide ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4721:3	4721:52	17	dump_wide ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4721:3	4721:3	18	dump_wide
LEAF_NODE	4721:3	4721:3	19	dump_wide
LEAF_NODE	4721:13	4721:13	18	(
ARGUMENT	4721:14	4721:14	18	dumpfile
FIELD	4721:14	4721:14	19	dumpfile
LEAF_NODE	4721:14	4721:14	20	dumpfile
LEAF_NODE	4721:22	4721:22	18	,
ARGUMENT	4721:24	4721:24	18	format
FIELD	4721:24	4721:24	19	format
LEAF_NODE	4721:24	4721:24	20	format
LEAF_NODE	4721:30	4721:30	18	,
ARGUMENT	4721:32	4721:32	18	"Buff1 bits "
FIELD	4721:32	4721:32	19	"Buff1 bits "
LEAF_NODE	4721:32	4721:32	20	"Buff1 bits "
LEAF_NODE	4721:45	4721:45	18	,
ARGUMENT	4721:47	4721:47	18	buff1
FIELD	4721:47	4721:47	19	buff1
LEAF_NODE	4721:47	4721:47	20	buff1
LEAF_NODE	4721:52	4721:52	18	)
LEAF_NODE	4721:53	4721:53	16	;
EXPR_STATEMENT	4722:3	4722:53	15	dump_wide ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4722:3	4722:3	16	dump_wide ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4722:3	4722:52	17	dump_wide ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4722:3	4722:3	18	dump_wide
LEAF_NODE	4722:3	4722:3	19	dump_wide
LEAF_NODE	4722:13	4722:13	18	(
ARGUMENT	4722:14	4722:14	18	dumpfile
FIELD	4722:14	4722:14	19	dumpfile
LEAF_NODE	4722:14	4722:14	20	dumpfile
LEAF_NODE	4722:22	4722:22	18	,
ARGUMENT	4722:24	4722:24	18	format
FIELD	4722:24	4722:24	19	format
LEAF_NODE	4722:24	4722:24	20	format
LEAF_NODE	4722:30	4722:30	18	,
ARGUMENT	4722:32	4722:32	18	"Buff2 bits "
FIELD	4722:32	4722:32	19	"Buff2 bits "
LEAF_NODE	4722:32	4722:32	20	"Buff2 bits "
LEAF_NODE	4722:45	4722:45	18	,
ARGUMENT	4722:47	4722:47	18	buff2
FIELD	4722:47	4722:47	19	buff2
LEAF_NODE	4722:47	4722:47	20	buff2
LEAF_NODE	4722:52	4722:52	18	)
LEAF_NODE	4722:53	4722:53	16	;
EXPR_STATEMENT	4723:3	4723:79	15	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action ) ;
EXPR	4723:3	4723:3	16	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
FUNCTION_CALL	4723:3	4723:78	17	dump_info ( dumpfile , format , "" , "Ready bits:   %d, %s" , ready_bits , action )
CALLEE	4723:3	4723:3	18	dump_info
LEAF_NODE	4723:3	4723:3	19	dump_info
LEAF_NODE	4723:13	4723:13	18	(
ARGUMENT	4723:14	4723:14	18	dumpfile
FIELD	4723:14	4723:14	19	dumpfile
LEAF_NODE	4723:14	4723:14	20	dumpfile
LEAF_NODE	4723:22	4723:22	18	,
ARGUMENT	4723:24	4723:24	18	format
FIELD	4723:24	4723:24	19	format
LEAF_NODE	4723:24	4723:24	20	format
LEAF_NODE	4723:30	4723:30	18	,
ARGUMENT	4723:32	4723:32	18	""
FIELD	4723:32	4723:32	19	""
LEAF_NODE	4723:32	4723:32	20	""
LEAF_NODE	4723:34	4723:34	18	,
ARGUMENT	4723:36	4723:36	18	"Ready bits:   %d, %s"
FIELD	4723:36	4723:36	19	"Ready bits:   %d, %s"
LEAF_NODE	4723:36	4723:36	20	"Ready bits:   %d, %s"
LEAF_NODE	4723:58	4723:58	18	,
ARGUMENT	4723:60	4723:60	18	ready_bits
FIELD	4723:60	4723:60	19	ready_bits
LEAF_NODE	4723:60	4723:60	20	ready_bits
LEAF_NODE	4723:70	4723:70	18	,
ARGUMENT	4723:72	4723:72	18	action
FIELD	4723:72	4723:72	19	action
LEAF_NODE	4723:72	4723:72	20	action
LEAF_NODE	4723:78	4723:78	18	)
LEAF_NODE	4723:79	4723:79	16	;
LEAF_NODE	4724:3	4724:3	14	}
LEAF_NODE	4725:1	4725:1	11	}
LEAF_NODE	4726:6	4726:6	8	}
ITERATION	4727:4	4728:6	6	
KEYWORD	4727:4	4727:4	7	while
LEAF_NODE	4727:4	4727:4	8	while
LEAF_NODE	4727:10	4727:10	7	(
CONDITION	4727:11	4727:11	7	ready_bits > 0
EXPR	4727:11	4727:24	8	ready_bits > 0
FIELD	4727:11	4727:11	9	ready_bits
LEAF_NODE	4727:11	4727:11	10	ready_bits
REL_OPERATOR	4727:22	4727:22	9	>
LEAF_NODE	4727:22	4727:22	10	>
FIELD	4727:24	4727:24	9	0
LEAF_NODE	4727:24	4727:24	10	0
LEAF_NODE	4727:25	4727:25	7	)
STATEMENTS	4728:6	4733:6	7	
LEAF_NODE	4728:6	4728:6	8	{
STATEMENTS	4729:6	4732:6	8	
EXPR_STATEMENT	4729:6	4729:31	9	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	4729:6	4729:6	10	bytebuff1 = ( buff2 >> 56 )
ASSIGN	4729:6	4729:18	11	bytebuff1 = ( buff2 >> 56 )
LVAL	4729:6	4729:6	12	bytebuff1
FIELD	4729:6	4729:6	13	bytebuff1
LEAF_NODE	4729:6	4729:6	14	bytebuff1
ASSIGN_OP	4729:16	4729:16	12	=
LEAF_NODE	4729:16	4729:16	13	=
RVAL	4729:18	4729:30	12	( buff2 >> 56 )
LEAF_NODE	4729:18	4729:18	13	(
FIELD	4729:19	4729:19	13	buff2
LEAF_NODE	4729:19	4729:19	14	buff2
LEAF_NODE	4729:25	4729:25	13	>>
FIELD	4729:28	4729:28	13	56
LEAF_NODE	4729:28	4729:28	14	56
LEAF_NODE	4729:30	4729:30	13	)
LEAF_NODE	4729:31	4729:31	10	;
EXPR_STATEMENT	4730:6	4730:24	9	* dst ++ = bytebuff1 ;
EXPR	4730:6	4730:6	10	* dst ++ = bytebuff1
ASSIGN	4730:6	4730:15	11	* dst ++ = bytebuff1
LVAL	4730:6	4730:6	12	* dst ++
UNARY_EXPR	4730:6	4730:7	13	* dst ++
UNARY_OPERATOR	4730:6	4730:6	14	*
LEAF_NODE	4730:6	4730:6	15	*
FIELD	4730:7	4730:10	14	dst ++
LEAF_NODE	4730:7	4730:7	15	dst
LEAF_NODE	4730:10	4730:10	15	++
ASSIGN_OP	4730:13	4730:13	12	=
LEAF_NODE	4730:13	4730:13	13	=
RVAL	4730:15	4730:15	12	bytebuff1
FIELD	4730:15	4730:15	13	bytebuff1
LEAF_NODE	4730:15	4730:15	14	bytebuff1
LEAF_NODE	4730:24	4730:24	10	;
EXPR_STATEMENT	4731:6	4731:26	9	buff2 = ( buff2 << 8 ) ;
EXPR	4731:6	4731:6	10	buff2 = ( buff2 << 8 )
ASSIGN	4731:6	4731:14	11	buff2 = ( buff2 << 8 )
LVAL	4731:6	4731:6	12	buff2
FIELD	4731:6	4731:6	13	buff2
LEAF_NODE	4731:6	4731:6	14	buff2
ASSIGN_OP	4731:12	4731:12	12	=
LEAF_NODE	4731:12	4731:12	13	=
RVAL	4731:14	4731:25	12	( buff2 << 8 )
LEAF_NODE	4731:14	4731:14	13	(
FIELD	4731:15	4731:15	13	buff2
LEAF_NODE	4731:15	4731:15	14	buff2
LEAF_NODE	4731:21	4731:21	13	<<
FIELD	4731:24	4731:24	13	8
LEAF_NODE	4731:24	4731:24	14	8
LEAF_NODE	4731:25	4731:25	13	)
LEAF_NODE	4731:26	4731:26	10	;
EXPR_STATEMENT	4732:6	4732:21	9	ready_bits -= 8 ;
EXPR	4732:6	4732:6	10	ready_bits -= 8
ASSIGN	4732:6	4732:20	11	ready_bits -= 8
LVAL	4732:6	4732:6	12	ready_bits
FIELD	4732:6	4732:6	13	ready_bits
LEAF_NODE	4732:6	4732:6	14	ready_bits
ASSIGN_OP	4732:17	4732:17	12	-=
LEAF_NODE	4732:17	4732:17	13	-=
RVAL	4732:20	4732:20	12	8
FIELD	4732:20	4732:20	13	8
LEAF_NODE	4732:20	4732:20	14	8
LEAF_NODE	4732:21	4732:21	10	;
LEAF_NODE	4733:6	4733:6	8	}
SELECTION	4735:4	4736:6	6	
KEYWORD	4735:4	4735:4	7	if
LEAF_NODE	4735:4	4735:4	8	if
LEAF_NODE	4735:7	4735:7	7	(
CONDITION	4735:8	4735:8	7	( dumpfile != NULL ) && ( level == 3 )
EXPR	4735:8	4735:8	8	( dumpfile != NULL ) && ( level == 3 )
AND	4735:8	4735:30	9	( dumpfile != NULL ) && ( level == 3 )
EXPR	4735:8	4735:25	10	( dumpfile != NULL )
LEAF_NODE	4735:8	4735:8	11	(
FIELD	4735:9	4735:9	11	dumpfile
LEAF_NODE	4735:9	4735:9	12	dumpfile
EQ_OPERATOR	4735:18	4735:18	11	!=
LEAF_NODE	4735:18	4735:18	12	!=
FIELD	4735:21	4735:21	11	NULL
LEAF_NODE	4735:21	4735:21	12	NULL
LEAF_NODE	4735:25	4735:25	11	)
LEAF_NODE	4735:27	4735:27	10	&&
EXPR	4735:30	4735:41	10	( level == 3 )
LEAF_NODE	4735:30	4735:30	11	(
FIELD	4735:31	4735:31	11	level
LEAF_NODE	4735:31	4735:31	12	level
EQ_OPERATOR	4735:37	4735:37	11	==
LEAF_NODE	4735:37	4735:37	12	==
FIELD	4735:40	4735:40	11	3
LEAF_NODE	4735:40	4735:40	12	3
LEAF_NODE	4735:41	4735:41	11	)
LEAF_NODE	4735:42	4735:42	7	)
STATEMENTS	4736:6	4748:6	7	
LEAF_NODE	4736:6	4736:6	8	{
STATEMENTS	4737:6	4747:6	8	
EXPR_STATEMENT	4737:6	4739:50	9	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out ) ;
EXPR	4737:6	4737:6	10	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
FUNCTION_CALL	4737:6	4739:49	11	dump_info ( dumpfile , format , "" , "Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d" , row + 1 , col + 1 , src_byte , src_bit , dst - out )
CALLEE	4737:6	4737:6	12	dump_info
LEAF_NODE	4737:6	4737:6	13	dump_info
LEAF_NODE	4737:16	4737:16	12	(
ARGUMENT	4737:17	4737:17	12	dumpfile
FIELD	4737:17	4737:17	13	dumpfile
LEAF_NODE	4737:17	4737:17	14	dumpfile
LEAF_NODE	4737:25	4737:25	12	,
ARGUMENT	4737:27	4737:27	12	format
FIELD	4737:27	4737:27	13	format
LEAF_NODE	4737:27	4737:27	14	format
LEAF_NODE	4737:33	4737:33	12	,
ARGUMENT	4737:35	4737:35	12	""
FIELD	4737:35	4737:35	13	""
LEAF_NODE	4737:35	4737:35	14	""
LEAF_NODE	4737:37	4737:37	12	,
ARGUMENT	4738:10	4738:10	12	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
FIELD	4738:10	4738:10	13	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4738:10	4738:10	14	"Row %3d, Col %3d, Src byte offset %3d  bit offset %2d  Dst offset %3d"
LEAF_NODE	4738:81	4738:81	12	,
ARGUMENT	4739:3	4739:9	12	row + 1
FIELD	4739:3	4739:3	13	row
LEAF_NODE	4739:3	4739:3	14	row
LEAF_NODE	4739:7	4739:7	13	+
FIELD	4739:9	4739:9	13	1
LEAF_NODE	4739:9	4739:9	14	1
LEAF_NODE	4739:10	4739:10	12	,
ARGUMENT	4739:12	4739:18	12	col + 1
FIELD	4739:12	4739:12	13	col
LEAF_NODE	4739:12	4739:12	14	col
LEAF_NODE	4739:16	4739:16	13	+
FIELD	4739:18	4739:18	13	1
LEAF_NODE	4739:18	4739:18	14	1
LEAF_NODE	4739:19	4739:19	12	,
ARGUMENT	4739:21	4739:21	12	src_byte
FIELD	4739:21	4739:21	13	src_byte
LEAF_NODE	4739:21	4739:21	14	src_byte
LEAF_NODE	4739:29	4739:29	12	,
ARGUMENT	4739:31	4739:31	12	src_bit
FIELD	4739:31	4739:31	13	src_bit
LEAF_NODE	4739:31	4739:31	14	src_bit
LEAF_NODE	4739:38	4739:38	12	,
ARGUMENT	4739:40	4739:46	12	dst - out
FIELD	4739:40	4739:40	13	dst
LEAF_NODE	4739:40	4739:40	14	dst
LEAF_NODE	4739:44	4739:44	13	-
FIELD	4739:46	4739:46	13	out
LEAF_NODE	4739:46	4739:46	14	out
LEAF_NODE	4739:49	4739:49	12	)
LEAF_NODE	4739:50	4739:50	10	;
EXPR_STATEMENT	4741:6	4741:60	9	dump_long ( dumpfile , format , "Match bits " , matchbits ) ;
EXPR	4741:6	4741:6	10	dump_long ( dumpfile , format , "Match bits " , matchbits )
FUNCTION_CALL	4741:6	4741:59	11	dump_long ( dumpfile , format , "Match bits " , matchbits )
CALLEE	4741:6	4741:6	12	dump_long
LEAF_NODE	4741:6	4741:6	13	dump_long
LEAF_NODE	4741:16	4741:16	12	(
ARGUMENT	4741:17	4741:17	12	dumpfile
FIELD	4741:17	4741:17	13	dumpfile
LEAF_NODE	4741:17	4741:17	14	dumpfile
LEAF_NODE	4741:25	4741:25	12	,
ARGUMENT	4741:27	4741:27	12	format
FIELD	4741:27	4741:27	13	format
LEAF_NODE	4741:27	4741:27	14	format
LEAF_NODE	4741:33	4741:33	12	,
ARGUMENT	4741:35	4741:35	12	"Match bits "
FIELD	4741:35	4741:35	13	"Match bits "
LEAF_NODE	4741:35	4741:35	14	"Match bits "
LEAF_NODE	4741:48	4741:48	12	,
ARGUMENT	4741:50	4741:50	12	matchbits
FIELD	4741:50	4741:50	13	matchbits
LEAF_NODE	4741:50	4741:50	14	matchbits
LEAF_NODE	4741:59	4741:59	12	)
LEAF_NODE	4741:60	4741:60	10	;
EXPR_STATEMENT	4742:6	4742:57	9	dump_data ( dumpfile , format , "Src   bits " , src , 4 ) ;
EXPR	4742:6	4742:6	10	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
FUNCTION_CALL	4742:6	4742:56	11	dump_data ( dumpfile , format , "Src   bits " , src , 4 )
CALLEE	4742:6	4742:6	12	dump_data
LEAF_NODE	4742:6	4742:6	13	dump_data
LEAF_NODE	4742:16	4742:16	12	(
ARGUMENT	4742:17	4742:17	12	dumpfile
FIELD	4742:17	4742:17	13	dumpfile
LEAF_NODE	4742:17	4742:17	14	dumpfile
LEAF_NODE	4742:25	4742:25	12	,
ARGUMENT	4742:27	4742:27	12	format
FIELD	4742:27	4742:27	13	format
LEAF_NODE	4742:27	4742:27	14	format
LEAF_NODE	4742:33	4742:33	12	,
ARGUMENT	4742:35	4742:35	12	"Src   bits "
FIELD	4742:35	4742:35	13	"Src   bits "
LEAF_NODE	4742:35	4742:35	14	"Src   bits "
LEAF_NODE	4742:48	4742:48	12	,
ARGUMENT	4742:50	4742:50	12	src
FIELD	4742:50	4742:50	13	src
LEAF_NODE	4742:50	4742:50	14	src
LEAF_NODE	4742:53	4742:53	12	,
ARGUMENT	4742:55	4742:55	12	4
FIELD	4742:55	4742:55	13	4
LEAF_NODE	4742:55	4742:55	14	4
LEAF_NODE	4742:56	4742:56	12	)
LEAF_NODE	4742:57	4742:57	10	;
EXPR_STATEMENT	4743:6	4743:56	9	dump_long ( dumpfile , format , "Buff1 bits " , buff1 ) ;
EXPR	4743:6	4743:6	10	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
FUNCTION_CALL	4743:6	4743:55	11	dump_long ( dumpfile , format , "Buff1 bits " , buff1 )
CALLEE	4743:6	4743:6	12	dump_long
LEAF_NODE	4743:6	4743:6	13	dump_long
LEAF_NODE	4743:16	4743:16	12	(
ARGUMENT	4743:17	4743:17	12	dumpfile
FIELD	4743:17	4743:17	13	dumpfile
LEAF_NODE	4743:17	4743:17	14	dumpfile
LEAF_NODE	4743:25	4743:25	12	,
ARGUMENT	4743:27	4743:27	12	format
FIELD	4743:27	4743:27	13	format
LEAF_NODE	4743:27	4743:27	14	format
LEAF_NODE	4743:33	4743:33	12	,
ARGUMENT	4743:35	4743:35	12	"Buff1 bits "
FIELD	4743:35	4743:35	13	"Buff1 bits "
LEAF_NODE	4743:35	4743:35	14	"Buff1 bits "
LEAF_NODE	4743:48	4743:48	12	,
ARGUMENT	4743:50	4743:50	12	buff1
FIELD	4743:50	4743:50	13	buff1
LEAF_NODE	4743:50	4743:50	14	buff1
LEAF_NODE	4743:55	4743:55	12	)
LEAF_NODE	4743:56	4743:56	10	;
EXPR_STATEMENT	4744:6	4744:56	9	dump_long ( dumpfile , format , "Buff2 bits " , buff2 ) ;
EXPR	4744:6	4744:6	10	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
FUNCTION_CALL	4744:6	4744:55	11	dump_long ( dumpfile , format , "Buff2 bits " , buff2 )
CALLEE	4744:6	4744:6	12	dump_long
LEAF_NODE	4744:6	4744:6	13	dump_long
LEAF_NODE	4744:16	4744:16	12	(
ARGUMENT	4744:17	4744:17	12	dumpfile
FIELD	4744:17	4744:17	13	dumpfile
LEAF_NODE	4744:17	4744:17	14	dumpfile
LEAF_NODE	4744:25	4744:25	12	,
ARGUMENT	4744:27	4744:27	12	format
FIELD	4744:27	4744:27	13	format
LEAF_NODE	4744:27	4744:27	14	format
LEAF_NODE	4744:33	4744:33	12	,
ARGUMENT	4744:35	4744:35	12	"Buff2 bits "
FIELD	4744:35	4744:35	13	"Buff2 bits "
LEAF_NODE	4744:35	4744:35	14	"Buff2 bits "
LEAF_NODE	4744:48	4744:48	12	,
ARGUMENT	4744:50	4744:50	12	buff2
FIELD	4744:50	4744:50	13	buff2
LEAF_NODE	4744:50	4744:50	14	buff2
LEAF_NODE	4744:55	4744:55	12	)
LEAF_NODE	4744:56	4744:56	10	;
EXPR_STATEMENT	4745:6	4745:60	9	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 ) ;
EXPR	4745:6	4745:6	10	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
FUNCTION_CALL	4745:6	4745:59	11	dump_byte ( dumpfile , format , "Write bits1" , bytebuff1 )
CALLEE	4745:6	4745:6	12	dump_byte
LEAF_NODE	4745:6	4745:6	13	dump_byte
LEAF_NODE	4745:16	4745:16	12	(
ARGUMENT	4745:17	4745:17	12	dumpfile
FIELD	4745:17	4745:17	13	dumpfile
LEAF_NODE	4745:17	4745:17	14	dumpfile
LEAF_NODE	4745:25	4745:25	12	,
ARGUMENT	4745:27	4745:27	12	format
FIELD	4745:27	4745:27	13	format
LEAF_NODE	4745:27	4745:27	14	format
LEAF_NODE	4745:33	4745:33	12	,
ARGUMENT	4745:35	4745:35	12	"Write bits1"
FIELD	4745:35	4745:35	13	"Write bits1"
LEAF_NODE	4745:35	4745:35	14	"Write bits1"
LEAF_NODE	4745:48	4745:48	12	,
ARGUMENT	4745:50	4745:50	12	bytebuff1
FIELD	4745:50	4745:50	13	bytebuff1
LEAF_NODE	4745:50	4745:50	14	bytebuff1
LEAF_NODE	4745:59	4745:59	12	)
LEAF_NODE	4745:60	4745:60	10	;
EXPR_STATEMENT	4746:6	4746:60	9	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 ) ;
EXPR	4746:6	4746:6	10	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
FUNCTION_CALL	4746:6	4746:59	11	dump_byte ( dumpfile , format , "Write bits2" , bytebuff2 )
CALLEE	4746:6	4746:6	12	dump_byte
LEAF_NODE	4746:6	4746:6	13	dump_byte
LEAF_NODE	4746:16	4746:16	12	(
ARGUMENT	4746:17	4746:17	12	dumpfile
FIELD	4746:17	4746:17	13	dumpfile
LEAF_NODE	4746:17	4746:17	14	dumpfile
LEAF_NODE	4746:25	4746:25	12	,
ARGUMENT	4746:27	4746:27	12	format
FIELD	4746:27	4746:27	13	format
LEAF_NODE	4746:27	4746:27	14	format
LEAF_NODE	4746:33	4746:33	12	,
ARGUMENT	4746:35	4746:35	12	"Write bits2"
FIELD	4746:35	4746:35	13	"Write bits2"
LEAF_NODE	4746:35	4746:35	14	"Write bits2"
LEAF_NODE	4746:48	4746:48	12	,
ARGUMENT	4746:50	4746:50	12	bytebuff2
FIELD	4746:50	4746:50	13	bytebuff2
LEAF_NODE	4746:50	4746:50	14	bytebuff2
LEAF_NODE	4746:59	4746:59	12	)
LEAF_NODE	4746:60	4746:60	10	;
EXPR_STATEMENT	4747:6	4747:70	9	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits ) ;
EXPR	4747:6	4747:6	10	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
FUNCTION_CALL	4747:6	4747:69	11	dump_info ( dumpfile , format , "" , "Ready bits:  %2d" , ready_bits )
CALLEE	4747:6	4747:6	12	dump_info
LEAF_NODE	4747:6	4747:6	13	dump_info
LEAF_NODE	4747:16	4747:16	12	(
ARGUMENT	4747:17	4747:17	12	dumpfile
FIELD	4747:17	4747:17	13	dumpfile
LEAF_NODE	4747:17	4747:17	14	dumpfile
LEAF_NODE	4747:25	4747:25	12	,
ARGUMENT	4747:27	4747:27	12	format
FIELD	4747:27	4747:27	13	format
LEAF_NODE	4747:27	4747:27	14	format
LEAF_NODE	4747:33	4747:33	12	,
ARGUMENT	4747:35	4747:35	12	""
FIELD	4747:35	4747:35	13	""
LEAF_NODE	4747:35	4747:35	14	""
LEAF_NODE	4747:37	4747:37	12	,
ARGUMENT	4747:39	4747:39	12	"Ready bits:  %2d"
FIELD	4747:39	4747:39	13	"Ready bits:  %2d"
LEAF_NODE	4747:39	4747:39	14	"Ready bits:  %2d"
LEAF_NODE	4747:57	4747:57	12	,
ARGUMENT	4747:59	4747:59	12	ready_bits
FIELD	4747:59	4747:59	13	ready_bits
LEAF_NODE	4747:59	4747:59	14	ready_bits
LEAF_NODE	4747:69	4747:69	12	)
LEAF_NODE	4747:70	4747:70	10	;
LEAF_NODE	4748:6	4748:6	8	}
SELECTION	4750:4	4751:6	6	
KEYWORD	4750:4	4750:4	7	if
LEAF_NODE	4750:4	4750:4	8	if
LEAF_NODE	4750:7	4750:7	7	(
CONDITION	4750:8	4750:8	7	( dumpfile != NULL ) && ( level == 2 )
EXPR	4750:8	4750:8	8	( dumpfile != NULL ) && ( level == 2 )
AND	4750:8	4750:30	9	( dumpfile != NULL ) && ( level == 2 )
EXPR	4750:8	4750:25	10	( dumpfile != NULL )
LEAF_NODE	4750:8	4750:8	11	(
FIELD	4750:9	4750:9	11	dumpfile
LEAF_NODE	4750:9	4750:9	12	dumpfile
EQ_OPERATOR	4750:18	4750:18	11	!=
LEAF_NODE	4750:18	4750:18	12	!=
FIELD	4750:21	4750:21	11	NULL
LEAF_NODE	4750:21	4750:21	12	NULL
LEAF_NODE	4750:25	4750:25	11	)
LEAF_NODE	4750:27	4750:27	10	&&
EXPR	4750:30	4750:41	10	( level == 2 )
LEAF_NODE	4750:30	4750:30	11	(
FIELD	4750:31	4750:31	11	level
LEAF_NODE	4750:31	4750:31	12	level
EQ_OPERATOR	4750:37	4750:37	11	==
LEAF_NODE	4750:37	4750:37	12	==
FIELD	4750:40	4750:40	11	2
LEAF_NODE	4750:40	4750:40	12	2
LEAF_NODE	4750:41	4750:41	11	)
LEAF_NODE	4750:42	4750:42	7	)
STATEMENTS	4751:6	4754:6	7	
LEAF_NODE	4751:6	4751:6	8	{
STATEMENTS	4752:6	4753:6	8	
EXPR_STATEMENT	4752:6	4752:84	9	dump_info ( dumpfile , format , "combineSeparateTileSamples32bits" , "Output data" ) ;
EXPR	4752:6	4752:6	10	dump_info ( dumpfile , format , "combineSeparateTileSamples32bits" , "Output data" )
FUNCTION_CALL	4752:6	4752:83	11	dump_info ( dumpfile , format , "combineSeparateTileSamples32bits" , "Output data" )
CALLEE	4752:6	4752:6	12	dump_info
LEAF_NODE	4752:6	4752:6	13	dump_info
LEAF_NODE	4752:16	4752:16	12	(
ARGUMENT	4752:17	4752:17	12	dumpfile
FIELD	4752:17	4752:17	13	dumpfile
LEAF_NODE	4752:17	4752:17	14	dumpfile
LEAF_NODE	4752:25	4752:25	12	,
ARGUMENT	4752:27	4752:27	12	format
FIELD	4752:27	4752:27	13	format
LEAF_NODE	4752:27	4752:27	14	format
LEAF_NODE	4752:33	4752:33	12	,
ARGUMENT	4752:35	4752:35	12	"combineSeparateTileSamples32bits"
FIELD	4752:35	4752:35	13	"combineSeparateTileSamples32bits"
LEAF_NODE	4752:35	4752:35	14	"combineSeparateTileSamples32bits"
LEAF_NODE	4752:69	4752:69	12	,
ARGUMENT	4752:70	4752:70	12	"Output data"
FIELD	4752:70	4752:70	13	"Output data"
LEAF_NODE	4752:70	4752:70	14	"Output data"
LEAF_NODE	4752:83	4752:83	12	)
LEAF_NODE	4752:84	4752:84	10	;
EXPR_STATEMENT	4753:6	4753:61	9	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out ) ;
EXPR	4753:6	4753:6	10	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out )
FUNCTION_CALL	4753:6	4753:60	11	dump_buffer ( dumpfile , format , 1 , dst_rowsize , row , out )
CALLEE	4753:6	4753:6	12	dump_buffer
LEAF_NODE	4753:6	4753:6	13	dump_buffer
LEAF_NODE	4753:17	4753:17	12	(
ARGUMENT	4753:18	4753:18	12	dumpfile
FIELD	4753:18	4753:18	13	dumpfile
LEAF_NODE	4753:18	4753:18	14	dumpfile
LEAF_NODE	4753:26	4753:26	12	,
ARGUMENT	4753:28	4753:28	12	format
FIELD	4753:28	4753:28	13	format
LEAF_NODE	4753:28	4753:28	14	format
LEAF_NODE	4753:34	4753:34	12	,
ARGUMENT	4753:36	4753:36	12	1
FIELD	4753:36	4753:36	13	1
LEAF_NODE	4753:36	4753:36	14	1
LEAF_NODE	4753:37	4753:37	12	,
ARGUMENT	4753:39	4753:39	12	dst_rowsize
FIELD	4753:39	4753:39	13	dst_rowsize
LEAF_NODE	4753:39	4753:39	14	dst_rowsize
LEAF_NODE	4753:50	4753:50	12	,
ARGUMENT	4753:52	4753:52	12	row
FIELD	4753:52	4753:52	13	row
LEAF_NODE	4753:52	4753:52	14	row
LEAF_NODE	4753:55	4753:55	12	,
ARGUMENT	4753:57	4753:57	12	out
FIELD	4753:57	4753:57	13	out
LEAF_NODE	4753:57	4753:57	14	out
LEAF_NODE	4753:60	4753:60	12	)
LEAF_NODE	4753:61	4753:61	10	;
LEAF_NODE	4754:6	4754:6	8	}
LEAF_NODE	4755:4	4755:4	5	}
JUMP_STATEMENT	4757:2	4757:12	3	return ( 0 ) ;
KEYWORD	4757:2	4757:2	4	return
LEAF_NODE	4757:2	4757:2	5	return
DESTINATION	4757:9	4757:9	4	( 0 )
EXPR	4757:9	4757:11	5	( 0 )
LEAF_NODE	4757:9	4757:9	6	(
FIELD	4757:10	4757:10	6	0
LEAF_NODE	4757:10	4757:10	7	0
LEAF_NODE	4757:11	4757:11	6	)
LEAF_NODE	4757:12	4757:12	4	;
LEAF_NODE	4758:2	4758:2	2	}
FUNCTION_DEF	4761:0	4950:2	1	
RETURN_TYPE	4761:0	4761:7	2	static int
LEAF_NODE	4761:0	4761:0	3	static
TYPE_NAME	4761:7	4761:7	3	int
LEAF_NODE	4761:7	4761:7	4	int
FUNCTION_NAME	4761:11	4761:11	2	readSeparateStripsIntoBuffer
LEAF_NODE	4761:11	4761:11	3	readSeparateStripsIntoBuffer
PARAMETER_LIST	4761:40	4763:63	2	( TIFF * in , uint8 * obuf , uint32 length , uint32 width , uint16 spp , struct dump_opts * dump )
LEAF_NODE	4761:40	4761:40	3	(
PARAMETER_DECL	4761:41	4761:47	3	TIFF * in
TYPE	4761:41	4761:46	4	TIFF *
TYPE_NAME	4761:41	4761:41	5	TIFF
LEAF_NODE	4761:41	4761:41	6	TIFF
POINTER	4761:46	4761:46	5	*
LEAF_NODE	4761:46	4761:46	6	*
NAME	4761:47	4761:47	4	in
LEAF_NODE	4761:47	4761:47	5	in
LEAF_NODE	4761:49	4761:49	3	,
PARAMETER_DECL	4761:51	4761:58	3	uint8 * obuf
TYPE	4761:51	4761:57	4	uint8 *
TYPE_NAME	4761:51	4761:51	5	uint8
LEAF_NODE	4761:51	4761:51	6	uint8
POINTER	4761:57	4761:57	5	*
LEAF_NODE	4761:57	4761:57	6	*
NAME	4761:58	4761:58	4	obuf
LEAF_NODE	4761:58	4761:58	5	obuf
LEAF_NODE	4761:62	4761:62	3	,
PARAMETER_DECL	4761:64	4761:71	3	uint32 length
TYPE	4761:64	4761:64	4	uint32
TYPE_NAME	4761:64	4761:64	5	uint32
LEAF_NODE	4761:64	4761:64	6	uint32
NAME	4761:71	4761:71	4	length
LEAF_NODE	4761:71	4761:71	5	length
LEAF_NODE	4761:77	4761:77	3	,
PARAMETER_DECL	4762:41	4762:48	3	uint32 width
TYPE	4762:41	4762:41	4	uint32
TYPE_NAME	4762:41	4762:41	5	uint32
LEAF_NODE	4762:41	4762:41	6	uint32
NAME	4762:48	4762:48	4	width
LEAF_NODE	4762:48	4762:48	5	width
LEAF_NODE	4762:53	4762:53	3	,
PARAMETER_DECL	4762:55	4762:62	3	uint16 spp
TYPE	4762:55	4762:55	4	uint16
TYPE_NAME	4762:55	4762:55	5	uint16
LEAF_NODE	4762:55	4762:55	6	uint16
NAME	4762:62	4762:62	4	spp
LEAF_NODE	4762:62	4762:62	5	spp
LEAF_NODE	4762:65	4762:65	3	,
PARAMETER_DECL	4763:41	4763:59	3	struct dump_opts * dump
TYPE	4763:41	4763:58	4	struct dump_opts *
TYPE_NAME	4763:41	4763:48	5	struct dump_opts
LEAF_NODE	4763:41	4763:41	6	struct
LEAF_NODE	4763:48	4763:48	6	dump_opts
POINTER	4763:58	4763:58	5	*
LEAF_NODE	4763:58	4763:58	6	*
NAME	4763:59	4763:59	4	dump
LEAF_NODE	4763:59	4763:59	5	dump
LEAF_NODE	4763:63	4763:63	3	)
LEAF_NODE	4764:2	4764:2	2	{
STATEMENTS	4765:2	4949:17	2	
SIMPLE_DECL	4765:2	4765:67	3	int i , int bytes_per_sample , int bytes_per_pixel , int shift_width , int result ; result = 1 ;
INIT_DECL_LIST	4765:2	4765:2	4	int i , int bytes_per_sample , int bytes_per_pixel , int shift_width , int result ; result = 1
VAR_DECL	4765:2	4765:6	5	int i
TYPE	4765:2	4765:2	6	int
TYPE_NAME	4765:2	4765:2	7	int
LEAF_NODE	4765:2	4765:2	8	int
NAME	4765:6	4765:6	6	i
LEAF_NODE	4765:6	4765:6	7	i
LEAF_NODE	4765:7	4765:7	5	,
INIT_DECL_LIST	4765:2	4765:2	5	int bytes_per_sample , int bytes_per_pixel , int shift_width , int result ; result = 1
VAR_DECL	4765:2	4765:9	6	int bytes_per_sample
TYPE	4765:2	4765:2	7	int
TYPE_NAME	4765:2	4765:2	8	int
LEAF_NODE	4765:2	4765:2	9	int
NAME	4765:9	4765:9	7	bytes_per_sample
LEAF_NODE	4765:9	4765:9	8	bytes_per_sample
LEAF_NODE	4765:25	4765:25	6	,
INIT_DECL_LIST	4765:2	4765:2	6	int bytes_per_pixel , int shift_width , int result ; result = 1
VAR_DECL	4765:2	4765:27	7	int bytes_per_pixel
TYPE	4765:2	4765:2	8	int
TYPE_NAME	4765:2	4765:2	9	int
LEAF_NODE	4765:2	4765:2	10	int
NAME	4765:27	4765:27	8	bytes_per_pixel
LEAF_NODE	4765:27	4765:27	9	bytes_per_pixel
LEAF_NODE	4765:42	4765:42	7	,
INIT_DECL_LIST	4765:2	4765:2	7	int shift_width , int result ; result = 1
VAR_DECL	4765:2	4765:44	8	int shift_width
TYPE	4765:2	4765:2	9	int
TYPE_NAME	4765:2	4765:2	10	int
LEAF_NODE	4765:2	4765:2	11	int
NAME	4765:44	4765:44	9	shift_width
LEAF_NODE	4765:44	4765:44	10	shift_width
LEAF_NODE	4765:55	4765:55	8	,
VAR_DECL	4765:2	4765:57	8	int result ; result = 1
TYPE	4765:2	4765:2	9	int
TYPE_NAME	4765:2	4765:2	10	int
LEAF_NODE	4765:2	4765:2	11	int
NAME	4765:57	4765:57	9	result
LEAF_NODE	4765:57	4765:57	10	result
LEAF_NODE	0:0	0:0	9	;
INIT	4765:57	4765:57	9	result = 1
ASSIGN	4765:57	4765:66	10	result = 1
LVAL	4765:57	4765:57	11	result
NAME	4765:57	4765:57	12	result
LEAF_NODE	4765:57	4765:57	13	result
ASSIGN_OP	4765:64	4765:64	11	=
LEAF_NODE	4765:64	4765:64	12	=
RVAL	4765:66	4765:66	11	1
FIELD	4765:66	4765:66	12	1
LEAF_NODE	4765:66	4765:66	13	1
LEAF_NODE	4765:67	4765:67	4	;
SIMPLE_DECL	4766:2	4766:10	3	uint32 j ;
VAR_DECL	4766:2	4766:9	4	uint32 j
TYPE	4766:2	4766:2	5	uint32
TYPE_NAME	4766:2	4766:2	6	uint32
LEAF_NODE	4766:2	4766:2	7	uint32
NAME	4766:9	4766:9	5	j
LEAF_NODE	4766:9	4766:9	6	j
LEAF_NODE	4766:10	4766:10	4	;
SIMPLE_DECL	4767:2	4767:23	3	int32 bytes_read ; bytes_read = 0 ;
VAR_DECL	4767:2	4767:9	4	int32 bytes_read ; bytes_read = 0
TYPE	4767:2	4767:2	5	int32
TYPE_NAME	4767:2	4767:2	6	int32
LEAF_NODE	4767:2	4767:2	7	int32
NAME	4767:9	4767:9	5	bytes_read
LEAF_NODE	4767:9	4767:9	6	bytes_read
LEAF_NODE	0:0	0:0	5	;
INIT	4767:9	4767:9	5	bytes_read = 0
ASSIGN	4767:9	4767:22	6	bytes_read = 0
LVAL	4767:9	4767:9	7	bytes_read
NAME	4767:9	4767:9	8	bytes_read
LEAF_NODE	4767:9	4767:9	9	bytes_read
ASSIGN_OP	4767:20	4767:20	7	=
LEAF_NODE	4767:20	4767:20	8	=
RVAL	4767:22	4767:22	7	0
FIELD	4767:22	4767:22	8	0
LEAF_NODE	4767:22	4767:22	9	0
LEAF_NODE	4767:23	4767:23	4	;
SIMPLE_DECL	4768:2	4768:24	3	uint16 bps ; bps = 0 , uint16 planar ;
INIT_DECL_LIST	4768:2	4768:2	4	uint16 bps ; bps = 0 , uint16 planar
VAR_DECL	4768:2	4768:9	5	uint16 bps ; bps = 0
TYPE	4768:2	4768:2	6	uint16
TYPE_NAME	4768:2	4768:2	7	uint16
LEAF_NODE	4768:2	4768:2	8	uint16
NAME	4768:9	4768:9	6	bps
LEAF_NODE	4768:9	4768:9	7	bps
LEAF_NODE	0:0	0:0	6	;
INIT	4768:9	4768:9	6	bps = 0
ASSIGN	4768:9	4768:15	7	bps = 0
LVAL	4768:9	4768:9	8	bps
NAME	4768:9	4768:9	9	bps
LEAF_NODE	4768:9	4768:9	10	bps
ASSIGN_OP	4768:13	4768:13	8	=
LEAF_NODE	4768:13	4768:13	9	=
RVAL	4768:15	4768:15	8	0
FIELD	4768:15	4768:15	9	0
LEAF_NODE	4768:15	4768:15	10	0
LEAF_NODE	4768:16	4768:16	5	,
VAR_DECL	4768:2	4768:18	5	uint16 planar
TYPE	4768:2	4768:2	6	uint16
TYPE_NAME	4768:2	4768:2	7	uint16
LEAF_NODE	4768:2	4768:2	8	uint16
NAME	4768:18	4768:18	6	planar
LEAF_NODE	4768:18	4768:18	7	planar
LEAF_NODE	4768:24	4768:24	4	;
SIMPLE_DECL	4769:2	4769:16	3	uint32 nstrips ;
VAR_DECL	4769:2	4769:9	4	uint32 nstrips
TYPE	4769:2	4769:2	5	uint32
TYPE_NAME	4769:2	4769:2	6	uint32
LEAF_NODE	4769:2	4769:2	7	uint32
NAME	4769:9	4769:9	5	nstrips
LEAF_NODE	4769:9	4769:9	6	nstrips
LEAF_NODE	4769:16	4769:16	4	;
SIMPLE_DECL	4770:2	4770:26	3	uint32 strips_per_sample ;
VAR_DECL	4770:2	4770:9	4	uint32 strips_per_sample
TYPE	4770:2	4770:2	5	uint32
TYPE_NAME	4770:2	4770:2	6	uint32
LEAF_NODE	4770:2	4770:2	7	uint32
NAME	4770:9	4770:9	5	strips_per_sample
LEAF_NODE	4770:9	4770:9	6	strips_per_sample
LEAF_NODE	4770:26	4770:26	4	;
SIMPLE_DECL	4771:2	4771:54	3	uint32 src_rowsize , uint32 dst_rowsize , uint32 rows_processed , uint32 rps ;
INIT_DECL_LIST	4771:2	4771:2	4	uint32 src_rowsize , uint32 dst_rowsize , uint32 rows_processed , uint32 rps
VAR_DECL	4771:2	4771:9	5	uint32 src_rowsize
TYPE	4771:2	4771:2	6	uint32
TYPE_NAME	4771:2	4771:2	7	uint32
LEAF_NODE	4771:2	4771:2	8	uint32
NAME	4771:9	4771:9	6	src_rowsize
LEAF_NODE	4771:9	4771:9	7	src_rowsize
LEAF_NODE	4771:20	4771:20	5	,
INIT_DECL_LIST	4771:2	4771:2	5	uint32 dst_rowsize , uint32 rows_processed , uint32 rps
VAR_DECL	4771:2	4771:22	6	uint32 dst_rowsize
TYPE	4771:2	4771:2	7	uint32
TYPE_NAME	4771:2	4771:2	8	uint32
LEAF_NODE	4771:2	4771:2	9	uint32
NAME	4771:22	4771:22	7	dst_rowsize
LEAF_NODE	4771:22	4771:22	8	dst_rowsize
LEAF_NODE	4771:33	4771:33	6	,
INIT_DECL_LIST	4771:2	4771:2	6	uint32 rows_processed , uint32 rps
VAR_DECL	4771:2	4771:35	7	uint32 rows_processed
TYPE	4771:2	4771:2	8	uint32
TYPE_NAME	4771:2	4771:2	9	uint32
LEAF_NODE	4771:2	4771:2	10	uint32
NAME	4771:35	4771:35	8	rows_processed
LEAF_NODE	4771:35	4771:35	9	rows_processed
LEAF_NODE	4771:49	4771:49	7	,
VAR_DECL	4771:2	4771:51	7	uint32 rps
TYPE	4771:2	4771:2	8	uint32
TYPE_NAME	4771:2	4771:2	9	uint32
LEAF_NODE	4771:2	4771:2	10	uint32
NAME	4771:51	4771:51	8	rps
LEAF_NODE	4771:51	4771:51	9	rps
LEAF_NODE	4771:54	4771:54	4	;
SIMPLE_DECL	4772:2	4772:28	3	uint32 rows_this_strip ; rows_this_strip = 0 ;
VAR_DECL	4772:2	4772:9	4	uint32 rows_this_strip ; rows_this_strip = 0
TYPE	4772:2	4772:2	5	uint32
TYPE_NAME	4772:2	4772:2	6	uint32
LEAF_NODE	4772:2	4772:2	7	uint32
NAME	4772:9	4772:9	5	rows_this_strip
LEAF_NODE	4772:9	4772:9	6	rows_this_strip
LEAF_NODE	0:0	0:0	5	;
INIT	4772:9	4772:9	5	rows_this_strip = 0
ASSIGN	4772:9	4772:27	6	rows_this_strip = 0
LVAL	4772:9	4772:9	7	rows_this_strip
NAME	4772:9	4772:9	8	rows_this_strip
LEAF_NODE	4772:9	4772:9	9	rows_this_strip
ASSIGN_OP	4772:25	4772:25	7	=
LEAF_NODE	4772:25	4772:25	8	=
RVAL	4772:27	4772:27	7	0
FIELD	4772:27	4772:27	8	0
LEAF_NODE	4772:27	4772:27	9	0
LEAF_NODE	4772:28	4772:28	4	;
SIMPLE_DECL	4773:2	4773:13	3	tsample_t s ;
VAR_DECL	4773:2	4773:12	4	tsample_t s
TYPE	4773:2	4773:2	5	tsample_t
TYPE_NAME	4773:2	4773:2	6	tsample_t
LEAF_NODE	4773:2	4773:2	7	tsample_t
NAME	4773:12	4773:12	5	s
LEAF_NODE	4773:12	4773:12	6	s
LEAF_NODE	4773:13	4773:13	4	;
SIMPLE_DECL	4774:2	4774:17	3	tstrip_t strip ;
VAR_DECL	4774:2	4774:12	4	tstrip_t strip
TYPE	4774:2	4774:2	5	tstrip_t
TYPE_NAME	4774:2	4774:2	6	tstrip_t
LEAF_NODE	4774:2	4774:2	7	tstrip_t
NAME	4774:12	4774:12	5	strip
LEAF_NODE	4774:12	4774:12	6	strip
LEAF_NODE	4774:17	4774:17	4	;
SIMPLE_DECL	4775:2	4775:45	3	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in ) ;
VAR_DECL	4775:2	4775:10	4	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in )
TYPE	4775:2	4775:2	5	tsize_t
TYPE_NAME	4775:2	4775:2	6	tsize_t
LEAF_NODE	4775:2	4775:2	7	tsize_t
NAME	4775:10	4775:10	5	scanlinesize
LEAF_NODE	4775:10	4775:10	6	scanlinesize
LEAF_NODE	0:0	0:0	5	;
INIT	4775:10	4775:10	5	scanlinesize = TIFFScanlineSize ( in )
ASSIGN	4775:10	4775:25	6	scanlinesize = TIFFScanlineSize ( in )
LVAL	4775:10	4775:10	7	scanlinesize
NAME	4775:10	4775:10	8	scanlinesize
LEAF_NODE	4775:10	4775:10	9	scanlinesize
ASSIGN_OP	4775:23	4775:23	7	=
LEAF_NODE	4775:23	4775:23	8	=
RVAL	4775:25	4775:25	7	TIFFScanlineSize ( in )
FUNCTION_CALL	4775:25	4775:44	8	TIFFScanlineSize ( in )
CALLEE	4775:25	4775:25	9	TIFFScanlineSize
LEAF_NODE	4775:25	4775:25	10	TIFFScanlineSize
LEAF_NODE	4775:41	4775:41	9	(
ARGUMENT	4775:42	4775:42	9	in
FIELD	4775:42	4775:42	10	in
LEAF_NODE	4775:42	4775:42	11	in
LEAF_NODE	4775:44	4775:44	9	)
LEAF_NODE	4775:45	4775:45	4	;
SIMPLE_DECL	4776:2	4776:42	3	tsize_t stripsize ; stripsize = TIFFStripSize ( in ) ;
VAR_DECL	4776:2	4776:10	4	tsize_t stripsize ; stripsize = TIFFStripSize ( in )
TYPE	4776:2	4776:2	5	tsize_t
TYPE_NAME	4776:2	4776:2	6	tsize_t
LEAF_NODE	4776:2	4776:2	7	tsize_t
NAME	4776:10	4776:10	5	stripsize
LEAF_NODE	4776:10	4776:10	6	stripsize
LEAF_NODE	0:0	0:0	5	;
INIT	4776:10	4776:10	5	stripsize = TIFFStripSize ( in )
ASSIGN	4776:10	4776:25	6	stripsize = TIFFStripSize ( in )
LVAL	4776:10	4776:10	7	stripsize
NAME	4776:10	4776:10	8	stripsize
LEAF_NODE	4776:10	4776:10	9	stripsize
ASSIGN_OP	4776:23	4776:23	7	=
LEAF_NODE	4776:23	4776:23	8	=
RVAL	4776:25	4776:25	7	TIFFStripSize ( in )
FUNCTION_CALL	4776:25	4776:41	8	TIFFStripSize ( in )
CALLEE	4776:25	4776:25	9	TIFFStripSize
LEAF_NODE	4776:25	4776:25	10	TIFFStripSize
LEAF_NODE	4776:38	4776:38	9	(
ARGUMENT	4776:39	4776:39	9	in
FIELD	4776:39	4776:39	10	in
LEAF_NODE	4776:39	4776:39	11	in
LEAF_NODE	4776:41	4776:41	9	)
LEAF_NODE	4776:42	4776:42	4	;
SIMPLE_DECL	4777:2	4777:38	3	unsigned char * [ MAX_SAMPLES ] srcbuffs ;
VAR_DECL	4777:2	4777:17	4	unsigned char * [ MAX_SAMPLES ] srcbuffs
TYPE	4777:2	4777:25	5	unsigned char * [ MAX_SAMPLES ]
TYPE_NAME	4777:2	4777:11	6	unsigned char
LEAF_NODE	4777:2	4777:2	7	unsigned
LEAF_NODE	4777:11	4777:11	7	char
POINTER	4777:16	4777:16	6	*
LEAF_NODE	4777:16	4777:16	7	*
TYPE_SUFFIX	4777:25	4777:37	6	[ MAX_SAMPLES ]
LEAF_NODE	4777:25	4777:25	7	[
FIELD	4777:26	4777:26	7	MAX_SAMPLES
LEAF_NODE	4777:26	4777:26	8	MAX_SAMPLES
LEAF_NODE	4777:37	4777:37	7	]
NAME	4777:17	4777:17	5	srcbuffs
LEAF_NODE	4777:17	4777:17	6	srcbuffs
LEAF_NODE	4777:38	4777:38	4	;
SIMPLE_DECL	4778:2	4778:28	3	unsigned char * buff ; buff = NULL ;
VAR_DECL	4778:2	4778:17	4	unsigned char * buff ; buff = NULL
TYPE	4778:2	4778:16	5	unsigned char *
TYPE_NAME	4778:2	4778:11	6	unsigned char
LEAF_NODE	4778:2	4778:2	7	unsigned
LEAF_NODE	4778:11	4778:11	7	char
POINTER	4778:16	4778:16	6	*
LEAF_NODE	4778:16	4778:16	7	*
NAME	4778:17	4778:17	5	buff
LEAF_NODE	4778:17	4778:17	6	buff
LEAF_NODE	0:0	0:0	5	;
INIT	4778:17	4778:17	5	buff = NULL
ASSIGN	4778:17	4778:24	6	buff = NULL
LVAL	4778:17	4778:17	7	buff
NAME	4778:17	4778:17	8	buff
LEAF_NODE	4778:17	4778:17	9	buff
ASSIGN_OP	4778:22	4778:22	7	=
LEAF_NODE	4778:22	4778:22	8	=
RVAL	4778:24	4778:24	7	NULL
FIELD	4778:24	4778:24	8	NULL
LEAF_NODE	4778:24	4778:24	9	NULL
LEAF_NODE	4778:28	4778:28	4	;
SIMPLE_DECL	4779:2	4779:27	3	unsigned char * dst ; dst = NULL ;
VAR_DECL	4779:2	4779:17	4	unsigned char * dst ; dst = NULL
TYPE	4779:2	4779:16	5	unsigned char *
TYPE_NAME	4779:2	4779:11	6	unsigned char
LEAF_NODE	4779:2	4779:2	7	unsigned
LEAF_NODE	4779:11	4779:11	7	char
POINTER	4779:16	4779:16	6	*
LEAF_NODE	4779:16	4779:16	7	*
NAME	4779:17	4779:17	5	dst
LEAF_NODE	4779:17	4779:17	6	dst
LEAF_NODE	0:0	0:0	5	;
INIT	4779:17	4779:17	5	dst = NULL
ASSIGN	4779:17	4779:23	6	dst = NULL
LVAL	4779:17	4779:17	7	dst
NAME	4779:17	4779:17	8	dst
LEAF_NODE	4779:17	4779:17	9	dst
ASSIGN_OP	4779:21	4779:21	7	=
LEAF_NODE	4779:21	4779:21	8	=
RVAL	4779:23	4779:23	7	NULL
FIELD	4779:23	4779:23	8	NULL
LEAF_NODE	4779:23	4779:23	9	NULL
LEAF_NODE	4779:27	4779:27	4	;
SELECTION	4781:2	4782:4	3	
KEYWORD	4781:2	4781:2	4	if
LEAF_NODE	4781:2	4781:2	5	if
LEAF_NODE	4781:5	4781:5	4	(
CONDITION	4781:6	4781:6	4	obuf == NULL
EXPR	4781:6	4781:14	5	obuf == NULL
FIELD	4781:6	4781:6	6	obuf
LEAF_NODE	4781:6	4781:6	7	obuf
EQ_OPERATOR	4781:11	4781:11	6	==
LEAF_NODE	4781:11	4781:11	7	==
FIELD	4781:14	4781:14	6	NULL
LEAF_NODE	4781:14	4781:14	7	NULL
LEAF_NODE	4781:18	4781:18	4	)
STATEMENTS	4782:4	4785:4	4	
LEAF_NODE	4782:4	4782:4	5	{
STATEMENTS	4783:4	4784:4	5	
EXPR_STATEMENT	4783:4	4783:71	6	TIFFError ( "readSeparateStripsIntoBuffer" , "Invalid buffer argument" ) ;
EXPR	4783:4	4783:4	7	TIFFError ( "readSeparateStripsIntoBuffer" , "Invalid buffer argument" )
FUNCTION_CALL	4783:4	4783:70	8	TIFFError ( "readSeparateStripsIntoBuffer" , "Invalid buffer argument" )
CALLEE	4783:4	4783:4	9	TIFFError
LEAF_NODE	4783:4	4783:4	10	TIFFError
LEAF_NODE	4783:13	4783:13	9	(
ARGUMENT	4783:14	4783:14	9	"readSeparateStripsIntoBuffer"
FIELD	4783:14	4783:14	10	"readSeparateStripsIntoBuffer"
LEAF_NODE	4783:14	4783:14	11	"readSeparateStripsIntoBuffer"
LEAF_NODE	4783:44	4783:44	9	,
ARGUMENT	4783:45	4783:45	9	"Invalid buffer argument"
FIELD	4783:45	4783:45	10	"Invalid buffer argument"
LEAF_NODE	4783:45	4783:45	11	"Invalid buffer argument"
LEAF_NODE	4783:70	4783:70	9	)
LEAF_NODE	4783:71	4783:71	7	;
JUMP_STATEMENT	4784:4	4784:14	6	return ( 0 ) ;
KEYWORD	4784:4	4784:4	7	return
LEAF_NODE	4784:4	4784:4	8	return
DESTINATION	4784:11	4784:11	7	( 0 )
EXPR	4784:11	4784:13	8	( 0 )
LEAF_NODE	4784:11	4784:11	9	(
FIELD	4784:12	4784:12	9	0
LEAF_NODE	4784:12	4784:12	10	0
LEAF_NODE	4784:13	4784:13	9	)
LEAF_NODE	4784:14	4784:14	7	;
LEAF_NODE	4785:4	4785:4	5	}
EXPR_STATEMENT	4787:2	4787:43	3	memset ( srcbuffs , '\0' , sizeof ( srcbuffs ) ) ;
EXPR	4787:2	4787:2	4	memset ( srcbuffs , '\0' , sizeof ( srcbuffs ) )
FUNCTION_CALL	4787:2	4787:42	5	memset ( srcbuffs , '\0' , sizeof ( srcbuffs ) )
CALLEE	4787:2	4787:2	6	memset
LEAF_NODE	4787:2	4787:2	7	memset
LEAF_NODE	4787:9	4787:9	6	(
ARGUMENT	4787:10	4787:10	6	srcbuffs
FIELD	4787:10	4787:10	7	srcbuffs
LEAF_NODE	4787:10	4787:10	8	srcbuffs
LEAF_NODE	4787:18	4787:18	6	,
ARGUMENT	4787:20	4787:20	6	'\0'
FIELD	4787:20	4787:20	7	'\0'
LEAF_NODE	4787:20	4787:20	8	'\0'
LEAF_NODE	4787:24	4787:24	6	,
ARGUMENT	4787:26	4787:26	6	sizeof ( srcbuffs )
FUNCTION_CALL	4787:26	4787:41	7	sizeof ( srcbuffs )
CALLEE	4787:26	4787:26	8	sizeof
LEAF_NODE	4787:26	4787:26	9	sizeof
LEAF_NODE	4787:32	4787:32	8	(
ARGUMENT	4787:33	4787:33	8	srcbuffs
FIELD	4787:33	4787:33	9	srcbuffs
LEAF_NODE	4787:33	4787:33	10	srcbuffs
LEAF_NODE	4787:41	4787:41	8	)
LEAF_NODE	4787:42	4787:42	6	)
LEAF_NODE	4787:43	4787:43	4	;
EXPR_STATEMENT	4788:2	4788:56	3	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	4788:2	4788:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps )
FUNCTION_CALL	4788:2	4788:55	5	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	4788:2	4788:2	6	TIFFGetFieldDefaulted
LEAF_NODE	4788:2	4788:2	7	TIFFGetFieldDefaulted
LEAF_NODE	4788:23	4788:23	6	(
ARGUMENT	4788:24	4788:24	6	in
FIELD	4788:24	4788:24	7	in
LEAF_NODE	4788:24	4788:24	8	in
LEAF_NODE	4788:26	4788:26	6	,
ARGUMENT	4788:28	4788:28	6	TIFFTAG_BITSPERSAMPLE
FIELD	4788:28	4788:28	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	4788:28	4788:28	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	4788:49	4788:49	6	,
ARGUMENT	4788:51	4788:51	6	& bps
UNARY_EXPR	4788:51	4788:52	7	& bps
UNARY_OPERATOR	4788:51	4788:51	8	&
LEAF_NODE	4788:51	4788:51	9	&
FIELD	4788:52	4788:52	8	bps
LEAF_NODE	4788:52	4788:52	9	bps
LEAF_NODE	4788:55	4788:55	6	)
LEAF_NODE	4788:56	4788:56	4	;
EXPR_STATEMENT	4789:2	4789:58	3	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & planar ) ;
EXPR	4789:2	4789:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & planar )
FUNCTION_CALL	4789:2	4789:57	5	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & planar )
CALLEE	4789:2	4789:2	6	TIFFGetFieldDefaulted
LEAF_NODE	4789:2	4789:2	7	TIFFGetFieldDefaulted
LEAF_NODE	4789:23	4789:23	6	(
ARGUMENT	4789:24	4789:24	6	in
FIELD	4789:24	4789:24	7	in
LEAF_NODE	4789:24	4789:24	8	in
LEAF_NODE	4789:26	4789:26	6	,
ARGUMENT	4789:28	4789:28	6	TIFFTAG_PLANARCONFIG
FIELD	4789:28	4789:28	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	4789:28	4789:28	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	4789:48	4789:48	6	,
ARGUMENT	4789:50	4789:50	6	& planar
UNARY_EXPR	4789:50	4789:51	7	& planar
UNARY_OPERATOR	4789:50	4789:50	8	&
LEAF_NODE	4789:50	4789:50	9	&
FIELD	4789:51	4789:51	8	planar
LEAF_NODE	4789:51	4789:51	9	planar
LEAF_NODE	4789:57	4789:57	6	)
LEAF_NODE	4789:58	4789:58	4	;
EXPR_STATEMENT	4790:2	4790:55	3	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps ) ;
EXPR	4790:2	4790:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
FUNCTION_CALL	4790:2	4790:54	5	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rps )
CALLEE	4790:2	4790:2	6	TIFFGetFieldDefaulted
LEAF_NODE	4790:2	4790:2	7	TIFFGetFieldDefaulted
LEAF_NODE	4790:23	4790:23	6	(
ARGUMENT	4790:24	4790:24	6	in
FIELD	4790:24	4790:24	7	in
LEAF_NODE	4790:24	4790:24	8	in
LEAF_NODE	4790:26	4790:26	6	,
ARGUMENT	4790:28	4790:28	6	TIFFTAG_ROWSPERSTRIP
FIELD	4790:28	4790:28	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	4790:28	4790:28	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	4790:48	4790:48	6	,
ARGUMENT	4790:50	4790:50	6	& rps
UNARY_EXPR	4790:50	4790:51	7	& rps
UNARY_OPERATOR	4790:50	4790:50	8	&
LEAF_NODE	4790:50	4790:50	9	&
FIELD	4790:51	4790:51	8	rps
LEAF_NODE	4790:51	4790:51	9	rps
LEAF_NODE	4790:54	4790:54	6	)
LEAF_NODE	4790:55	4790:55	4	;
SELECTION	4791:2	4792:4	3	
KEYWORD	4791:2	4791:2	4	if
LEAF_NODE	4791:2	4791:2	5	if
LEAF_NODE	4791:5	4791:5	4	(
CONDITION	4791:6	4791:6	4	rps > length
EXPR	4791:6	4791:12	5	rps > length
FIELD	4791:6	4791:6	6	rps
LEAF_NODE	4791:6	4791:6	7	rps
REL_OPERATOR	4791:10	4791:10	6	>
LEAF_NODE	4791:10	4791:10	7	>
FIELD	4791:12	4791:12	6	length
LEAF_NODE	4791:12	4791:12	7	length
LEAF_NODE	4791:18	4791:18	4	)
STATEMENTS	4792:4	4792:4	4	
EXPR_STATEMENT	4792:4	4792:16	5	rps = length ;
EXPR	4792:4	4792:4	6	rps = length
ASSIGN	4792:4	4792:10	7	rps = length
LVAL	4792:4	4792:4	8	rps
FIELD	4792:4	4792:4	9	rps
LEAF_NODE	4792:4	4792:4	10	rps
ASSIGN_OP	4792:8	4792:8	8	=
LEAF_NODE	4792:8	4792:8	9	=
RVAL	4792:10	4792:10	8	length
FIELD	4792:10	4792:10	9	length
LEAF_NODE	4792:10	4792:10	10	length
LEAF_NODE	4792:16	4792:16	6	;
EXPR_STATEMENT	4794:2	4794:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	4794:2	4794:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	4794:2	4794:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	4794:2	4794:2	6	bytes_per_sample
FIELD	4794:2	4794:2	7	bytes_per_sample
LEAF_NODE	4794:2	4794:2	8	bytes_per_sample
ASSIGN_OP	4794:19	4794:19	6	=
LEAF_NODE	4794:19	4794:19	7	=
RVAL	4794:21	4794:33	6	( bps + 7 ) / 8
LEAF_NODE	4794:21	4794:21	7	(
FIELD	4794:22	4794:22	7	bps
LEAF_NODE	4794:22	4794:22	8	bps
LEAF_NODE	4794:26	4794:26	7	+
FIELD	4794:28	4794:28	7	7
LEAF_NODE	4794:28	4794:28	8	7
LEAF_NODE	4794:29	4794:29	7	)
LEAF_NODE	4794:31	4794:31	7	/
FIELD	4794:33	4794:33	7	8
LEAF_NODE	4794:33	4794:33	8	8
LEAF_NODE	4794:34	4794:34	4	;
EXPR_STATEMENT	4795:2	4795:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	4795:2	4795:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	4795:2	4795:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	4795:2	4795:2	6	bytes_per_pixel
FIELD	4795:2	4795:2	7	bytes_per_pixel
LEAF_NODE	4795:2	4795:2	8	bytes_per_pixel
ASSIGN_OP	4795:19	4795:19	6	=
LEAF_NODE	4795:19	4795:19	7	=
RVAL	4795:21	4795:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	4795:21	4795:21	7	(
LEAF_NODE	4795:22	4795:22	7	(
FIELD	4795:23	4795:23	7	bps
LEAF_NODE	4795:23	4795:23	8	bps
LEAF_NODE	4795:27	4795:27	7	*
FIELD	4795:29	4795:29	7	spp
LEAF_NODE	4795:29	4795:29	8	spp
LEAF_NODE	4795:32	4795:32	7	)
LEAF_NODE	4795:34	4795:34	7	+
FIELD	4795:36	4795:36	7	7
LEAF_NODE	4795:36	4795:36	8	7
LEAF_NODE	4795:37	4795:37	7	)
LEAF_NODE	4795:39	4795:39	7	/
FIELD	4795:41	4795:41	7	8
LEAF_NODE	4795:41	4795:41	8	8
LEAF_NODE	4795:42	4795:42	4	;
SELECTION	4796:2	4797:4	3	
KEYWORD	4796:2	4796:2	4	if
LEAF_NODE	4796:2	4796:2	5	if
LEAF_NODE	4796:5	4796:5	4	(
CONDITION	4796:6	4796:6	4	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	4796:6	4796:45	5	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	4796:6	4796:6	6	bytes_per_pixel
LEAF_NODE	4796:6	4796:6	7	bytes_per_pixel
REL_OPERATOR	4796:22	4796:22	6	<
LEAF_NODE	4796:22	4796:22	7	<
LEAF_NODE	4796:24	4796:24	6	(
FIELD	4796:25	4796:25	6	bytes_per_sample
LEAF_NODE	4796:25	4796:25	7	bytes_per_sample
LEAF_NODE	4796:42	4796:42	6	+
FIELD	4796:44	4796:44	6	1
LEAF_NODE	4796:44	4796:44	7	1
LEAF_NODE	4796:45	4796:45	6	)
LEAF_NODE	4796:46	4796:46	4	)
STATEMENTS	4797:4	4797:4	4	
EXPR_STATEMENT	4797:4	4797:33	5	shift_width = bytes_per_pixel ;
EXPR	4797:4	4797:4	6	shift_width = bytes_per_pixel
ASSIGN	4797:4	4797:18	7	shift_width = bytes_per_pixel
LVAL	4797:4	4797:4	8	shift_width
FIELD	4797:4	4797:4	9	shift_width
LEAF_NODE	4797:4	4797:4	10	shift_width
ASSIGN_OP	4797:16	4797:16	8	=
LEAF_NODE	4797:16	4797:16	9	=
RVAL	4797:18	4797:18	8	bytes_per_pixel
FIELD	4797:18	4797:18	9	bytes_per_pixel
LEAF_NODE	4797:18	4797:18	10	bytes_per_pixel
LEAF_NODE	4797:33	4797:33	6	;
SELECTION	4798:2	4799:4	3	
KEYWORD	4798:2	4798:2	4	else
LEAF_NODE	4798:2	4798:2	5	else
STATEMENTS	4799:4	4799:4	4	
EXPR_STATEMENT	4799:4	4799:38	5	shift_width = bytes_per_sample + 1 ;
EXPR	4799:4	4799:4	6	shift_width = bytes_per_sample + 1
ASSIGN	4799:4	4799:18	7	shift_width = bytes_per_sample + 1
LVAL	4799:4	4799:4	8	shift_width
FIELD	4799:4	4799:4	9	shift_width
LEAF_NODE	4799:4	4799:4	10	shift_width
ASSIGN_OP	4799:16	4799:16	8	=
LEAF_NODE	4799:16	4799:16	9	=
RVAL	4799:18	4799:37	8	bytes_per_sample + 1
FIELD	4799:18	4799:18	9	bytes_per_sample
LEAF_NODE	4799:18	4799:18	10	bytes_per_sample
LEAF_NODE	4799:35	4799:35	9	+
FIELD	4799:37	4799:37	9	1
LEAF_NODE	4799:37	4799:37	10	1
LEAF_NODE	4799:38	4799:38	6	;
EXPR_STATEMENT	4801:2	4801:39	3	src_rowsize = ( ( bps * width ) + 7 ) / 8 ;
EXPR	4801:2	4801:2	4	src_rowsize = ( ( bps * width ) + 7 ) / 8
ASSIGN	4801:2	4801:16	5	src_rowsize = ( ( bps * width ) + 7 ) / 8
LVAL	4801:2	4801:2	6	src_rowsize
FIELD	4801:2	4801:2	7	src_rowsize
LEAF_NODE	4801:2	4801:2	8	src_rowsize
ASSIGN_OP	4801:14	4801:14	6	=
LEAF_NODE	4801:14	4801:14	7	=
RVAL	4801:16	4801:38	6	( ( bps * width ) + 7 ) / 8
LEAF_NODE	4801:16	4801:16	7	(
LEAF_NODE	4801:17	4801:17	7	(
FIELD	4801:18	4801:18	7	bps
LEAF_NODE	4801:18	4801:18	8	bps
LEAF_NODE	4801:22	4801:22	7	*
FIELD	4801:24	4801:24	7	width
LEAF_NODE	4801:24	4801:24	8	width
LEAF_NODE	4801:29	4801:29	7	)
LEAF_NODE	4801:31	4801:31	7	+
FIELD	4801:33	4801:33	7	7
LEAF_NODE	4801:33	4801:33	8	7
LEAF_NODE	4801:34	4801:34	7	)
LEAF_NODE	4801:36	4801:36	7	/
FIELD	4801:38	4801:38	7	8
LEAF_NODE	4801:38	4801:38	8	8
LEAF_NODE	4801:39	4801:39	4	;
LEAF_NODE	4802:2	4802:2	3	dst_rowsize
LEAF_NODE	4802:14	4802:14	3	=
LEAF_NODE	4802:16	4802:16	3	(
LEAF_NODE	4802:17	4802:17	3	(
LEAF_NODE	4802:18	4802:18	3	bps
LEAF_NODE	4802:22	4802:22	3	*
LEAF_NODE	4802:24	4802:24	3	width
LEAF_NODE	4802:30	4802:30	3	*
LEAF_NODE	4802:32	4802:32	3	spp
LEAF_NODE	4802:35	4802:35	3	)
LEAF_NODE	4802:37	4802:37	3	+
LEAF_NODE	4802:39	4802:39	3	7
LEAF_NODE	4802:40	4802:40	3	)
LEAF_NODE	4802:42	4802:42	3	/
EXPR_STATEMENT	4802:44	4802:45	3	8 ;
EXPR	4802:44	4802:44	4	8
FIELD	4802:44	4802:44	5	8
LEAF_NODE	4802:44	4802:44	6	8
LEAF_NODE	4802:45	4802:45	4	;
EXPR_STATEMENT	4803:2	4803:12	3	dst = obuf ;
EXPR	4803:2	4803:2	4	dst = obuf
ASSIGN	4803:2	4803:8	5	dst = obuf
LVAL	4803:2	4803:2	6	dst
FIELD	4803:2	4803:2	7	dst
LEAF_NODE	4803:2	4803:2	8	dst
ASSIGN_OP	4803:6	4803:6	6	=
LEAF_NODE	4803:6	4803:6	7	=
RVAL	4803:8	4803:8	6	obuf
FIELD	4803:8	4803:8	7	obuf
LEAF_NODE	4803:8	4803:8	8	obuf
LEAF_NODE	4803:12	4803:12	4	;
SELECTION	4805:2	4806:4	3	
KEYWORD	4805:2	4805:2	4	if
LEAF_NODE	4805:2	4805:2	5	if
LEAF_NODE	4805:5	4805:5	4	(
CONDITION	4805:6	4805:6	4	( dump -> infile != NULL ) && ( dump -> level == 3 )
EXPR	4805:6	4805:6	5	( dump -> infile != NULL ) && ( dump -> level == 3 )
AND	4805:6	4805:32	6	( dump -> infile != NULL ) && ( dump -> level == 3 )
EXPR	4805:6	4805:27	7	( dump -> infile != NULL )
LEAF_NODE	4805:6	4805:6	8	(
FIELD	4805:7	4805:13	8	dump -> infile
LEAF_NODE	4805:7	4805:7	9	dump
LEAF_NODE	4805:11	4805:11	9	->
LEAF_NODE	4805:13	4805:13	9	infile
EQ_OPERATOR	4805:20	4805:20	8	!=
LEAF_NODE	4805:20	4805:20	9	!=
FIELD	4805:23	4805:23	8	NULL
LEAF_NODE	4805:23	4805:23	9	NULL
LEAF_NODE	4805:27	4805:27	8	)
LEAF_NODE	4805:29	4805:29	7	&&
EXPR	4805:32	4805:49	7	( dump -> level == 3 )
LEAF_NODE	4805:32	4805:32	8	(
FIELD	4805:33	4805:39	8	dump -> level
LEAF_NODE	4805:33	4805:33	9	dump
LEAF_NODE	4805:37	4805:37	9	->
LEAF_NODE	4805:39	4805:39	9	level
EQ_OPERATOR	4805:45	4805:45	8	==
LEAF_NODE	4805:45	4805:45	9	==
FIELD	4805:48	4805:48	8	3
LEAF_NODE	4805:48	4805:48	9	3
LEAF_NODE	4805:49	4805:49	8	)
LEAF_NODE	4805:50	4805:50	4	)
STATEMENTS	4806:4	4813:4	4	
LEAF_NODE	4806:4	4806:4	5	{
STATEMENTS	4807:4	4810:4	5	
EXPR_STATEMENT	4807:4	4809:45	6	dump_info ( dump -> infile , dump -> format , "" , "Image width %d, length %d, Scanline size, %4d bytes" , width , length , scanlinesize ) ;
EXPR	4807:4	4807:4	7	dump_info ( dump -> infile , dump -> format , "" , "Image width %d, length %d, Scanline size, %4d bytes" , width , length , scanlinesize )
FUNCTION_CALL	4807:4	4809:44	8	dump_info ( dump -> infile , dump -> format , "" , "Image width %d, length %d, Scanline size, %4d bytes" , width , length , scanlinesize )
CALLEE	4807:4	4807:4	9	dump_info
LEAF_NODE	4807:4	4807:4	10	dump_info
LEAF_NODE	4807:15	4807:15	9	(
ARGUMENT	4807:16	4807:16	9	dump -> infile
FIELD	4807:16	4807:22	10	dump -> infile
LEAF_NODE	4807:16	4807:16	11	dump
LEAF_NODE	4807:20	4807:20	11	->
LEAF_NODE	4807:22	4807:22	11	infile
LEAF_NODE	4807:28	4807:28	9	,
ARGUMENT	4807:30	4807:30	9	dump -> format
FIELD	4807:30	4807:36	10	dump -> format
LEAF_NODE	4807:30	4807:30	11	dump
LEAF_NODE	4807:34	4807:34	11	->
LEAF_NODE	4807:36	4807:36	11	format
LEAF_NODE	4807:42	4807:42	9	,
ARGUMENT	4807:44	4807:44	9	""
FIELD	4807:44	4807:44	10	""
LEAF_NODE	4807:44	4807:44	11	""
LEAF_NODE	4807:46	4807:46	9	,
ARGUMENT	4808:16	4808:16	9	"Image width %d, length %d, Scanline size, %4d bytes"
FIELD	4808:16	4808:16	10	"Image width %d, length %d, Scanline size, %4d bytes"
LEAF_NODE	4808:16	4808:16	11	"Image width %d, length %d, Scanline size, %4d bytes"
LEAF_NODE	4808:69	4808:69	9	,
ARGUMENT	4809:16	4809:16	9	width
FIELD	4809:16	4809:16	10	width
LEAF_NODE	4809:16	4809:16	11	width
LEAF_NODE	4809:21	4809:21	9	,
ARGUMENT	4809:23	4809:23	9	length
FIELD	4809:23	4809:23	10	length
LEAF_NODE	4809:23	4809:23	11	length
LEAF_NODE	4809:29	4809:29	9	,
ARGUMENT	4809:32	4809:32	9	scanlinesize
FIELD	4809:32	4809:32	10	scanlinesize
LEAF_NODE	4809:32	4809:32	11	scanlinesize
LEAF_NODE	4809:44	4809:44	9	)
LEAF_NODE	4809:45	4809:45	7	;
EXPR_STATEMENT	4810:4	4812:24	6	dump_info ( dump -> infile , dump -> format , "" , "Bits per sample %d, Samples per pixel %d, Shift width %d" , bps , spp , shift_width ) ;
EXPR	4810:4	4810:4	7	dump_info ( dump -> infile , dump -> format , "" , "Bits per sample %d, Samples per pixel %d, Shift width %d" , bps , spp , shift_width )
FUNCTION_CALL	4810:4	4812:23	8	dump_info ( dump -> infile , dump -> format , "" , "Bits per sample %d, Samples per pixel %d, Shift width %d" , bps , spp , shift_width )
CALLEE	4810:4	4810:4	9	dump_info
LEAF_NODE	4810:4	4810:4	10	dump_info
LEAF_NODE	4810:15	4810:15	9	(
ARGUMENT	4810:16	4810:16	9	dump -> infile
FIELD	4810:16	4810:22	10	dump -> infile
LEAF_NODE	4810:16	4810:16	11	dump
LEAF_NODE	4810:20	4810:20	11	->
LEAF_NODE	4810:22	4810:22	11	infile
LEAF_NODE	4810:28	4810:28	9	,
ARGUMENT	4810:30	4810:30	9	dump -> format
FIELD	4810:30	4810:36	10	dump -> format
LEAF_NODE	4810:30	4810:30	11	dump
LEAF_NODE	4810:34	4810:34	11	->
LEAF_NODE	4810:36	4810:36	11	format
LEAF_NODE	4810:42	4810:42	9	,
ARGUMENT	4810:44	4810:44	9	""
FIELD	4810:44	4810:44	10	""
LEAF_NODE	4810:44	4810:44	11	""
LEAF_NODE	4810:46	4810:46	9	,
ARGUMENT	4811:16	4811:16	9	"Bits per sample %d, Samples per pixel %d, Shift width %d"
FIELD	4811:16	4811:16	10	"Bits per sample %d, Samples per pixel %d, Shift width %d"
LEAF_NODE	4811:16	4811:16	11	"Bits per sample %d, Samples per pixel %d, Shift width %d"
LEAF_NODE	4811:74	4811:74	9	,
ARGUMENT	4812:2	4812:2	9	bps
FIELD	4812:2	4812:2	10	bps
LEAF_NODE	4812:2	4812:2	11	bps
LEAF_NODE	4812:5	4812:5	9	,
ARGUMENT	4812:7	4812:7	9	spp
FIELD	4812:7	4812:7	10	spp
LEAF_NODE	4812:7	4812:7	11	spp
LEAF_NODE	4812:10	4812:10	9	,
ARGUMENT	4812:12	4812:12	9	shift_width
FIELD	4812:12	4812:12	10	shift_width
LEAF_NODE	4812:12	4812:12	11	shift_width
LEAF_NODE	4812:23	4812:23	9	)
LEAF_NODE	4812:24	4812:24	7	;
LEAF_NODE	4813:4	4813:4	5	}
EXPR_STATEMENT	4820:2	4820:34	3	nstrips = TIFFNumberOfStrips ( in ) ;
EXPR	4820:2	4820:2	4	nstrips = TIFFNumberOfStrips ( in )
ASSIGN	4820:2	4820:12	5	nstrips = TIFFNumberOfStrips ( in )
LVAL	4820:2	4820:2	6	nstrips
FIELD	4820:2	4820:2	7	nstrips
LEAF_NODE	4820:2	4820:2	8	nstrips
ASSIGN_OP	4820:10	4820:10	6	=
LEAF_NODE	4820:10	4820:10	7	=
RVAL	4820:12	4820:12	6	TIFFNumberOfStrips ( in )
FUNCTION_CALL	4820:12	4820:33	7	TIFFNumberOfStrips ( in )
CALLEE	4820:12	4820:12	8	TIFFNumberOfStrips
LEAF_NODE	4820:12	4820:12	9	TIFFNumberOfStrips
LEAF_NODE	4820:30	4820:30	8	(
ARGUMENT	4820:31	4820:31	8	in
FIELD	4820:31	4820:31	9	in
LEAF_NODE	4820:31	4820:31	10	in
LEAF_NODE	4820:33	4820:33	8	)
LEAF_NODE	4820:34	4820:34	4	;
EXPR_STATEMENT	4821:2	4821:34	3	strips_per_sample = nstrips / spp ;
EXPR	4821:2	4821:2	4	strips_per_sample = nstrips / spp
ASSIGN	4821:2	4821:22	5	strips_per_sample = nstrips / spp
LVAL	4821:2	4821:2	6	strips_per_sample
FIELD	4821:2	4821:2	7	strips_per_sample
LEAF_NODE	4821:2	4821:2	8	strips_per_sample
ASSIGN_OP	4821:20	4821:20	6	=
LEAF_NODE	4821:20	4821:20	7	=
RVAL	4821:22	4821:31	6	nstrips / spp
FIELD	4821:22	4821:22	7	nstrips
LEAF_NODE	4821:22	4821:22	8	nstrips
LEAF_NODE	4821:30	4821:30	7	/
FIELD	4821:31	4821:31	7	spp
LEAF_NODE	4821:31	4821:31	8	spp
LEAF_NODE	4821:34	4821:34	4	;
SELECTION	4824:2	4825:2	3	
KEYWORD	4824:2	4824:2	4	if
LEAF_NODE	4824:2	4824:2	5	if
LEAF_NODE	4824:4	4824:4	4	(
CONDITION	4824:6	4824:6	4	( size_t ) stripsize > 0xFFFFFFFFU - 3U
EXPR	4824:6	4824:41	5	( size_t ) stripsize > 0xFFFFFFFFU - 3U
LEAF_NODE	4824:6	4824:6	6	(
TYPE_NAME	4824:7	4824:7	6	size_t
LEAF_NODE	4824:7	4824:7	7	size_t
LEAF_NODE	4824:13	4824:13	6	)
FIELD	4824:15	4824:15	6	stripsize
LEAF_NODE	4824:15	4824:15	7	stripsize
REL_OPERATOR	4824:25	4824:25	6	>
LEAF_NODE	4824:25	4824:25	7	>
FIELD	4824:27	4824:27	6	0xFFFFFFFFU
LEAF_NODE	4824:27	4824:27	7	0xFFFFFFFFU
LEAF_NODE	4824:39	4824:39	6	-
FIELD	4824:41	4824:41	6	3U
LEAF_NODE	4824:41	4824:41	7	3U
LEAF_NODE	4824:44	4824:44	4	)
STATEMENTS	4825:2	4828:2	4	
LEAF_NODE	4825:2	4825:2	5	{
STATEMENTS	4826:6	4827:6	5	
EXPR_STATEMENT	4826:6	4826:97	6	TIFFError ( "readSeparateStripsIntoBuffer" , "Integer overflow when calculating buffer size." ) ;
EXPR	4826:6	4826:6	7	TIFFError ( "readSeparateStripsIntoBuffer" , "Integer overflow when calculating buffer size." )
FUNCTION_CALL	4826:6	4826:96	8	TIFFError ( "readSeparateStripsIntoBuffer" , "Integer overflow when calculating buffer size." )
CALLEE	4826:6	4826:6	9	TIFFError
LEAF_NODE	4826:6	4826:6	10	TIFFError
LEAF_NODE	4826:15	4826:15	9	(
ARGUMENT	4826:16	4826:16	9	"readSeparateStripsIntoBuffer"
FIELD	4826:16	4826:16	10	"readSeparateStripsIntoBuffer"
LEAF_NODE	4826:16	4826:16	11	"readSeparateStripsIntoBuffer"
LEAF_NODE	4826:46	4826:46	9	,
ARGUMENT	4826:48	4826:48	9	"Integer overflow when calculating buffer size."
FIELD	4826:48	4826:48	10	"Integer overflow when calculating buffer size."
LEAF_NODE	4826:48	4826:48	11	"Integer overflow when calculating buffer size."
LEAF_NODE	4826:96	4826:96	9	)
LEAF_NODE	4826:97	4826:97	7	;
EXPR_STATEMENT	4827:6	4827:14	6	exit ( - 1 ) ;
EXPR	4827:6	4827:6	7	exit ( - 1 )
FUNCTION_CALL	4827:6	4827:13	8	exit ( - 1 )
CALLEE	4827:6	4827:6	9	exit
LEAF_NODE	4827:6	4827:6	10	exit
LEAF_NODE	4827:10	4827:10	9	(
ARGUMENT	4827:11	4827:11	9	- 1
UNARY_EXPR	4827:11	4827:12	10	- 1
UNARY_OPERATOR	4827:11	4827:11	11	-
LEAF_NODE	4827:11	4827:11	12	-
FIELD	4827:12	4827:12	11	1
LEAF_NODE	4827:12	4827:12	12	1
LEAF_NODE	4827:13	4827:13	9	)
LEAF_NODE	4827:14	4827:14	7	;
LEAF_NODE	4828:2	4828:2	5	}
ITERATION	4830:2	4831:4	3	
KEYWORD	4830:2	4830:2	4	for
LEAF_NODE	4830:2	4830:2	5	for
LEAF_NODE	4830:6	4830:6	4	(
FOR_INIT	4830:7	4830:12	4	s = 0 ;
EXPR	4830:7	4830:7	5	s = 0
ASSIGN	4830:7	4830:11	6	s = 0
LVAL	4830:7	4830:7	7	s
FIELD	4830:7	4830:7	8	s
LEAF_NODE	4830:7	4830:7	9	s
ASSIGN_OP	4830:9	4830:9	7	=
LEAF_NODE	4830:9	4830:9	8	=
RVAL	4830:11	4830:11	7	0
FIELD	4830:11	4830:11	8	0
LEAF_NODE	4830:11	4830:11	9	0
LEAF_NODE	4830:12	4830:12	5	;
CONDITION	4830:14	4830:14	4	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4830:14	4830:14	5	( s < spp ) && ( s < MAX_SAMPLES )
AND	4830:14	4830:27	6	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4830:14	4830:22	7	( s < spp )
LEAF_NODE	4830:14	4830:14	8	(
FIELD	4830:15	4830:15	8	s
LEAF_NODE	4830:15	4830:15	9	s
REL_OPERATOR	4830:17	4830:17	8	<
LEAF_NODE	4830:17	4830:17	9	<
FIELD	4830:19	4830:19	8	spp
LEAF_NODE	4830:19	4830:19	9	spp
LEAF_NODE	4830:22	4830:22	8	)
LEAF_NODE	4830:24	4830:24	7	&&
EXPR	4830:27	4830:43	7	( s < MAX_SAMPLES )
LEAF_NODE	4830:27	4830:27	8	(
FIELD	4830:28	4830:28	8	s
LEAF_NODE	4830:28	4830:28	9	s
REL_OPERATOR	4830:30	4830:30	8	<
LEAF_NODE	4830:30	4830:30	9	<
FIELD	4830:32	4830:32	8	MAX_SAMPLES
LEAF_NODE	4830:32	4830:32	9	MAX_SAMPLES
LEAF_NODE	4830:43	4830:43	8	)
LEAF_NODE	4830:44	4830:44	4	;
FOR_EXPR	4830:46	4830:46	4	s ++
EXPR	4830:46	4830:46	5	s ++
FIELD	4830:46	4830:47	6	s ++
LEAF_NODE	4830:46	4830:46	7	s
LEAF_NODE	4830:47	4830:47	7	++
LEAF_NODE	4830:49	4830:49	4	)
STATEMENTS	4831:4	4846:4	4	
LEAF_NODE	4831:4	4831:4	5	{
STATEMENTS	4832:4	4845:4	5	
EXPR_STATEMENT	4832:4	4832:22	6	srcbuffs [ s ] = NULL ;
EXPR	4832:4	4832:4	7	srcbuffs [ s ] = NULL
ASSIGN	4832:4	4832:18	8	srcbuffs [ s ] = NULL
LVAL	4832:4	4832:4	9	srcbuffs [ s ]
FIELD	4832:4	4832:14	10	srcbuffs [ s ]
LEAF_NODE	4832:4	4832:4	11	srcbuffs
LEAF_NODE	4832:12	4832:12	11	[
EXPR	4832:13	4832:13	11	s
FIELD	4832:13	4832:13	12	s
LEAF_NODE	4832:13	4832:13	13	s
LEAF_NODE	4832:14	4832:14	11	]
ASSIGN_OP	4832:16	4832:16	9	=
LEAF_NODE	4832:16	4832:16	10	=
RVAL	4832:18	4832:18	9	NULL
FIELD	4832:18	4832:18	10	NULL
LEAF_NODE	4832:18	4832:18	11	NULL
LEAF_NODE	4832:22	4832:22	7	;
EXPR_STATEMENT	4833:4	4833:37	6	buff = _TIFFmalloc ( stripsize + 3 ) ;
EXPR	4833:4	4833:4	7	buff = _TIFFmalloc ( stripsize + 3 )
ASSIGN	4833:4	4833:11	8	buff = _TIFFmalloc ( stripsize + 3 )
LVAL	4833:4	4833:4	9	buff
FIELD	4833:4	4833:4	10	buff
LEAF_NODE	4833:4	4833:4	11	buff
ASSIGN_OP	4833:9	4833:9	9	=
LEAF_NODE	4833:9	4833:9	10	=
RVAL	4833:11	4833:11	9	_TIFFmalloc ( stripsize + 3 )
FUNCTION_CALL	4833:11	4833:36	10	_TIFFmalloc ( stripsize + 3 )
CALLEE	4833:11	4833:11	11	_TIFFmalloc
LEAF_NODE	4833:11	4833:11	12	_TIFFmalloc
LEAF_NODE	4833:22	4833:22	11	(
ARGUMENT	4833:23	4833:35	11	stripsize + 3
FIELD	4833:23	4833:23	12	stripsize
LEAF_NODE	4833:23	4833:23	13	stripsize
LEAF_NODE	4833:33	4833:33	12	+
FIELD	4833:35	4833:35	12	3
LEAF_NODE	4833:35	4833:35	13	3
LEAF_NODE	4833:36	4833:36	11	)
LEAF_NODE	4833:37	4833:37	7	;
SELECTION	4834:4	4835:6	6	
KEYWORD	4834:4	4834:4	7	if
LEAF_NODE	4834:4	4834:4	8	if
LEAF_NODE	4834:7	4834:7	7	(
CONDITION	4834:8	4834:8	7	! buff
EXPR	4834:8	4834:8	8	! buff
UNARY_EXPR	4834:8	4834:9	9	! buff
UNARY_OPERATOR	4834:8	4834:8	10	!
LEAF_NODE	4834:8	4834:8	11	!
FIELD	4834:9	4834:9	10	buff
LEAF_NODE	4834:9	4834:9	11	buff
LEAF_NODE	4834:13	4834:13	7	)
STATEMENTS	4835:6	4841:6	7	
LEAF_NODE	4835:6	4835:6	8	{
STATEMENTS	4836:6	4840:6	8	
EXPR_STATEMENT	4836:6	4837:73	9	TIFFError ( "readSeparateStripsIntoBuffer" , "Unable to allocate strip read buffer for sample %d" , s ) ;
EXPR	4836:6	4836:6	10	TIFFError ( "readSeparateStripsIntoBuffer" , "Unable to allocate strip read buffer for sample %d" , s )
FUNCTION_CALL	4836:6	4837:72	11	TIFFError ( "readSeparateStripsIntoBuffer" , "Unable to allocate strip read buffer for sample %d" , s )
CALLEE	4836:6	4836:6	12	TIFFError
LEAF_NODE	4836:6	4836:6	13	TIFFError
LEAF_NODE	4836:16	4836:16	12	(
ARGUMENT	4836:17	4836:17	12	"readSeparateStripsIntoBuffer"
FIELD	4836:17	4836:17	13	"readSeparateStripsIntoBuffer"
LEAF_NODE	4836:17	4836:17	14	"readSeparateStripsIntoBuffer"
LEAF_NODE	4836:47	4836:47	12	,
ARGUMENT	4837:17	4837:17	12	"Unable to allocate strip read buffer for sample %d"
FIELD	4837:17	4837:17	13	"Unable to allocate strip read buffer for sample %d"
LEAF_NODE	4837:17	4837:17	14	"Unable to allocate strip read buffer for sample %d"
LEAF_NODE	4837:69	4837:69	12	,
ARGUMENT	4837:71	4837:71	12	s
FIELD	4837:71	4837:71	13	s
LEAF_NODE	4837:71	4837:71	14	s
LEAF_NODE	4837:72	4837:72	12	)
LEAF_NODE	4837:73	4837:73	10	;
ITERATION	4838:6	4839:8	9	
KEYWORD	4838:6	4838:6	10	for
LEAF_NODE	4838:6	4838:6	11	for
LEAF_NODE	4838:10	4838:10	10	(
FOR_INIT	4838:11	4838:16	10	i = 0 ;
EXPR	4838:11	4838:11	11	i = 0
ASSIGN	4838:11	4838:15	12	i = 0
LVAL	4838:11	4838:11	13	i
FIELD	4838:11	4838:11	14	i
LEAF_NODE	4838:11	4838:11	15	i
ASSIGN_OP	4838:13	4838:13	13	=
LEAF_NODE	4838:13	4838:13	14	=
RVAL	4838:15	4838:15	13	0
FIELD	4838:15	4838:15	14	0
LEAF_NODE	4838:15	4838:15	15	0
LEAF_NODE	4838:16	4838:16	11	;
CONDITION	4838:18	4838:18	10	i < s
EXPR	4838:18	4838:22	11	i < s
FIELD	4838:18	4838:18	12	i
LEAF_NODE	4838:18	4838:18	13	i
REL_OPERATOR	4838:20	4838:20	12	<
LEAF_NODE	4838:20	4838:20	13	<
FIELD	4838:22	4838:22	12	s
LEAF_NODE	4838:22	4838:22	13	s
LEAF_NODE	4838:23	4838:23	10	;
FOR_EXPR	4838:25	4838:25	10	i ++
EXPR	4838:25	4838:25	11	i ++
FIELD	4838:25	4838:26	12	i ++
LEAF_NODE	4838:25	4838:25	13	i
LEAF_NODE	4838:26	4838:26	13	++
LEAF_NODE	4838:28	4838:28	10	)
STATEMENTS	4839:8	4839:8	10	
EXPR_STATEMENT	4839:8	4839:31	11	_TIFFfree ( srcbuffs [ i ] ) ;
EXPR	4839:8	4839:8	12	_TIFFfree ( srcbuffs [ i ] )
FUNCTION_CALL	4839:8	4839:30	13	_TIFFfree ( srcbuffs [ i ] )
CALLEE	4839:8	4839:8	14	_TIFFfree
LEAF_NODE	4839:8	4839:8	15	_TIFFfree
LEAF_NODE	4839:18	4839:18	14	(
ARGUMENT	4839:19	4839:19	14	srcbuffs [ i ]
FIELD	4839:19	4839:29	15	srcbuffs [ i ]
LEAF_NODE	4839:19	4839:19	16	srcbuffs
LEAF_NODE	4839:27	4839:27	16	[
EXPR	4839:28	4839:28	16	i
FIELD	4839:28	4839:28	17	i
LEAF_NODE	4839:28	4839:28	18	i
LEAF_NODE	4839:29	4839:29	16	]
LEAF_NODE	4839:30	4839:30	14	)
LEAF_NODE	4839:31	4839:31	12	;
JUMP_STATEMENT	4840:6	4840:14	9	return 0 ;
KEYWORD	4840:6	4840:6	10	return
LEAF_NODE	4840:6	4840:6	11	return
DESTINATION	4840:13	4840:13	10	0
EXPR	4840:13	4840:13	11	0
FIELD	4840:13	4840:13	12	0
LEAF_NODE	4840:13	4840:13	13	0
LEAF_NODE	4840:14	4840:14	10	;
LEAF_NODE	4841:6	4841:6	8	}
EXPR_STATEMENT	4842:4	4842:23	6	buff [ stripsize ] = 0 ;
EXPR	4842:4	4842:4	7	buff [ stripsize ] = 0
ASSIGN	4842:4	4842:22	8	buff [ stripsize ] = 0
LVAL	4842:4	4842:4	9	buff [ stripsize ]
FIELD	4842:4	4842:18	10	buff [ stripsize ]
LEAF_NODE	4842:4	4842:4	11	buff
LEAF_NODE	4842:8	4842:8	11	[
EXPR	4842:9	4842:9	11	stripsize
FIELD	4842:9	4842:9	12	stripsize
LEAF_NODE	4842:9	4842:9	13	stripsize
LEAF_NODE	4842:18	4842:18	11	]
ASSIGN_OP	4842:20	4842:20	9	=
LEAF_NODE	4842:20	4842:20	10	=
RVAL	4842:22	4842:22	9	0
FIELD	4842:22	4842:22	10	0
LEAF_NODE	4842:22	4842:22	11	0
LEAF_NODE	4842:23	4842:23	7	;
EXPR_STATEMENT	4843:4	4843:25	6	buff [ stripsize + 1 ] = 0 ;
EXPR	4843:4	4843:4	7	buff [ stripsize + 1 ] = 0
ASSIGN	4843:4	4843:24	8	buff [ stripsize + 1 ] = 0
LVAL	4843:4	4843:4	9	buff [ stripsize + 1 ]
FIELD	4843:4	4843:20	10	buff [ stripsize + 1 ]
LEAF_NODE	4843:4	4843:4	11	buff
LEAF_NODE	4843:8	4843:8	11	[
EXPR	4843:9	4843:19	11	stripsize + 1
FIELD	4843:9	4843:9	12	stripsize
LEAF_NODE	4843:9	4843:9	13	stripsize
LEAF_NODE	4843:18	4843:18	12	+
FIELD	4843:19	4843:19	12	1
LEAF_NODE	4843:19	4843:19	13	1
LEAF_NODE	4843:20	4843:20	11	]
ASSIGN_OP	4843:22	4843:22	9	=
LEAF_NODE	4843:22	4843:22	10	=
RVAL	4843:24	4843:24	9	0
FIELD	4843:24	4843:24	10	0
LEAF_NODE	4843:24	4843:24	11	0
LEAF_NODE	4843:25	4843:25	7	;
EXPR_STATEMENT	4844:4	4844:25	6	buff [ stripsize + 2 ] = 0 ;
EXPR	4844:4	4844:4	7	buff [ stripsize + 2 ] = 0
ASSIGN	4844:4	4844:24	8	buff [ stripsize + 2 ] = 0
LVAL	4844:4	4844:4	9	buff [ stripsize + 2 ]
FIELD	4844:4	4844:20	10	buff [ stripsize + 2 ]
LEAF_NODE	4844:4	4844:4	11	buff
LEAF_NODE	4844:8	4844:8	11	[
EXPR	4844:9	4844:19	11	stripsize + 2
FIELD	4844:9	4844:9	12	stripsize
LEAF_NODE	4844:9	4844:9	13	stripsize
LEAF_NODE	4844:18	4844:18	12	+
FIELD	4844:19	4844:19	12	2
LEAF_NODE	4844:19	4844:19	13	2
LEAF_NODE	4844:20	4844:20	11	]
ASSIGN_OP	4844:22	4844:22	9	=
LEAF_NODE	4844:22	4844:22	10	=
RVAL	4844:24	4844:24	9	0
FIELD	4844:24	4844:24	10	0
LEAF_NODE	4844:24	4844:24	11	0
LEAF_NODE	4844:25	4844:25	7	;
EXPR_STATEMENT	4845:4	4845:22	6	srcbuffs [ s ] = buff ;
EXPR	4845:4	4845:4	7	srcbuffs [ s ] = buff
ASSIGN	4845:4	4845:18	8	srcbuffs [ s ] = buff
LVAL	4845:4	4845:4	9	srcbuffs [ s ]
FIELD	4845:4	4845:14	10	srcbuffs [ s ]
LEAF_NODE	4845:4	4845:4	11	srcbuffs
LEAF_NODE	4845:12	4845:12	11	[
EXPR	4845:13	4845:13	11	s
FIELD	4845:13	4845:13	12	s
LEAF_NODE	4845:13	4845:13	13	s
LEAF_NODE	4845:14	4845:14	11	]
ASSIGN_OP	4845:16	4845:16	9	=
LEAF_NODE	4845:16	4845:16	10	=
RVAL	4845:18	4845:18	9	buff
FIELD	4845:18	4845:18	10	buff
LEAF_NODE	4845:18	4845:18	11	buff
LEAF_NODE	4845:22	4845:22	7	;
LEAF_NODE	4846:4	4846:4	5	}
EXPR_STATEMENT	4848:2	4848:20	3	rows_processed = 0 ;
EXPR	4848:2	4848:2	4	rows_processed = 0
ASSIGN	4848:2	4848:19	5	rows_processed = 0
LVAL	4848:2	4848:2	6	rows_processed
FIELD	4848:2	4848:2	7	rows_processed
LEAF_NODE	4848:2	4848:2	8	rows_processed
ASSIGN_OP	4848:17	4848:17	6	=
LEAF_NODE	4848:17	4848:17	7	=
RVAL	4848:19	4848:19	6	0
FIELD	4848:19	4848:19	7	0
LEAF_NODE	4848:19	4848:19	8	0
LEAF_NODE	4848:20	4848:20	4	;
ITERATION	4849:2	4850:4	3	
KEYWORD	4849:2	4849:2	4	for
LEAF_NODE	4849:2	4849:2	5	for
LEAF_NODE	4849:6	4849:6	4	(
FOR_INIT	4849:7	4849:12	4	j = 0 ;
EXPR	4849:7	4849:7	5	j = 0
ASSIGN	4849:7	4849:11	6	j = 0
LVAL	4849:7	4849:7	7	j
FIELD	4849:7	4849:7	8	j
LEAF_NODE	4849:7	4849:7	9	j
ASSIGN_OP	4849:9	4849:9	7	=
LEAF_NODE	4849:9	4849:9	8	=
RVAL	4849:11	4849:11	7	0
FIELD	4849:11	4849:11	8	0
LEAF_NODE	4849:11	4849:11	9	0
LEAF_NODE	4849:12	4849:12	5	;
CONDITION	4849:14	4849:14	4	( j < strips_per_sample ) && ( result == 1 )
EXPR	4849:14	4849:14	5	( j < strips_per_sample ) && ( result == 1 )
AND	4849:14	4849:41	6	( j < strips_per_sample ) && ( result == 1 )
EXPR	4849:14	4849:36	7	( j < strips_per_sample )
LEAF_NODE	4849:14	4849:14	8	(
FIELD	4849:15	4849:15	8	j
LEAF_NODE	4849:15	4849:15	9	j
REL_OPERATOR	4849:17	4849:17	8	<
LEAF_NODE	4849:17	4849:17	9	<
FIELD	4849:19	4849:19	8	strips_per_sample
LEAF_NODE	4849:19	4849:19	9	strips_per_sample
LEAF_NODE	4849:36	4849:36	8	)
LEAF_NODE	4849:38	4849:38	7	&&
EXPR	4849:41	4849:53	7	( result == 1 )
LEAF_NODE	4849:41	4849:41	8	(
FIELD	4849:42	4849:42	8	result
LEAF_NODE	4849:42	4849:42	9	result
EQ_OPERATOR	4849:49	4849:49	8	==
LEAF_NODE	4849:49	4849:49	9	==
FIELD	4849:52	4849:52	8	1
LEAF_NODE	4849:52	4849:52	9	1
LEAF_NODE	4849:53	4849:53	8	)
LEAF_NODE	4849:54	4849:54	4	;
FOR_EXPR	4849:56	4849:56	4	j ++
EXPR	4849:56	4849:56	5	j ++
FIELD	4849:56	4849:57	6	j ++
LEAF_NODE	4849:56	4849:56	7	j
LEAF_NODE	4849:57	4849:57	7	++
LEAF_NODE	4849:59	4849:59	4	)
STATEMENTS	4850:4	4937:4	4	
LEAF_NODE	4850:4	4850:4	5	{
STATEMENTS	4851:4	4935:4	5	
ITERATION	4851:4	4852:6	6	
KEYWORD	4851:4	4851:4	7	for
LEAF_NODE	4851:4	4851:4	8	for
LEAF_NODE	4851:8	4851:8	7	(
FOR_INIT	4851:9	4851:14	7	s = 0 ;
EXPR	4851:9	4851:9	8	s = 0
ASSIGN	4851:9	4851:13	9	s = 0
LVAL	4851:9	4851:9	10	s
FIELD	4851:9	4851:9	11	s
LEAF_NODE	4851:9	4851:9	12	s
ASSIGN_OP	4851:11	4851:11	10	=
LEAF_NODE	4851:11	4851:11	11	=
RVAL	4851:13	4851:13	10	0
FIELD	4851:13	4851:13	11	0
LEAF_NODE	4851:13	4851:13	12	0
LEAF_NODE	4851:14	4851:14	8	;
CONDITION	4851:16	4851:16	7	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4851:16	4851:16	8	( s < spp ) && ( s < MAX_SAMPLES )
AND	4851:16	4851:29	9	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4851:16	4851:24	10	( s < spp )
LEAF_NODE	4851:16	4851:16	11	(
FIELD	4851:17	4851:17	11	s
LEAF_NODE	4851:17	4851:17	12	s
REL_OPERATOR	4851:19	4851:19	11	<
LEAF_NODE	4851:19	4851:19	12	<
FIELD	4851:21	4851:21	11	spp
LEAF_NODE	4851:21	4851:21	12	spp
LEAF_NODE	4851:24	4851:24	11	)
LEAF_NODE	4851:26	4851:26	10	&&
EXPR	4851:29	4851:45	10	( s < MAX_SAMPLES )
LEAF_NODE	4851:29	4851:29	11	(
FIELD	4851:30	4851:30	11	s
LEAF_NODE	4851:30	4851:30	12	s
REL_OPERATOR	4851:32	4851:32	11	<
LEAF_NODE	4851:32	4851:32	12	<
FIELD	4851:34	4851:34	11	MAX_SAMPLES
LEAF_NODE	4851:34	4851:34	12	MAX_SAMPLES
LEAF_NODE	4851:45	4851:45	11	)
LEAF_NODE	4851:46	4851:46	7	;
FOR_EXPR	4851:48	4851:48	7	s ++
EXPR	4851:48	4851:48	8	s ++
FIELD	4851:48	4851:49	9	s ++
LEAF_NODE	4851:48	4851:48	10	s
LEAF_NODE	4851:49	4851:49	10	++
LEAF_NODE	4851:51	4851:51	7	)
STATEMENTS	4852:6	4869:6	7	
LEAF_NODE	4852:6	4852:6	8	{
STATEMENTS	4853:6	4866:6	8	
EXPR_STATEMENT	4853:6	4853:24	9	buff = srcbuffs [ s ] ;
EXPR	4853:6	4853:6	10	buff = srcbuffs [ s ]
ASSIGN	4853:6	4853:13	11	buff = srcbuffs [ s ]
LVAL	4853:6	4853:6	12	buff
FIELD	4853:6	4853:6	13	buff
LEAF_NODE	4853:6	4853:6	14	buff
ASSIGN_OP	4853:11	4853:11	12	=
LEAF_NODE	4853:11	4853:11	13	=
RVAL	4853:13	4853:13	12	srcbuffs [ s ]
FIELD	4853:13	4853:23	13	srcbuffs [ s ]
LEAF_NODE	4853:13	4853:13	14	srcbuffs
LEAF_NODE	4853:21	4853:21	14	[
EXPR	4853:22	4853:22	14	s
FIELD	4853:22	4853:22	15	s
LEAF_NODE	4853:22	4853:22	16	s
LEAF_NODE	4853:23	4853:23	14	]
LEAF_NODE	4853:24	4853:24	10	;
EXPR_STATEMENT	4854:6	4854:41	9	strip = ( s * strips_per_sample ) + j ;
EXPR	4854:6	4854:6	10	strip = ( s * strips_per_sample ) + j
ASSIGN	4854:6	4854:14	11	strip = ( s * strips_per_sample ) + j
LVAL	4854:6	4854:6	12	strip
FIELD	4854:6	4854:6	13	strip
LEAF_NODE	4854:6	4854:6	14	strip
ASSIGN_OP	4854:12	4854:12	12	=
LEAF_NODE	4854:12	4854:12	13	=
RVAL	4854:14	4854:40	12	( s * strips_per_sample ) + j
LEAF_NODE	4854:14	4854:14	13	(
FIELD	4854:15	4854:15	13	s
LEAF_NODE	4854:15	4854:15	14	s
LEAF_NODE	4854:17	4854:17	13	*
FIELD	4854:19	4854:19	13	strips_per_sample
LEAF_NODE	4854:19	4854:19	14	strips_per_sample
LEAF_NODE	4854:36	4854:36	13	)
LEAF_NODE	4854:38	4854:38	13	+
FIELD	4854:40	4854:40	13	j
LEAF_NODE	4854:40	4854:40	14	j
LEAF_NODE	4854:41	4854:41	10	;
EXPR_STATEMENT	4855:6	4855:68	9	bytes_read = TIFFReadEncodedStrip ( in , strip , buff , stripsize ) ;
EXPR	4855:6	4855:6	10	bytes_read = TIFFReadEncodedStrip ( in , strip , buff , stripsize )
ASSIGN	4855:6	4855:19	11	bytes_read = TIFFReadEncodedStrip ( in , strip , buff , stripsize )
LVAL	4855:6	4855:6	12	bytes_read
FIELD	4855:6	4855:6	13	bytes_read
LEAF_NODE	4855:6	4855:6	14	bytes_read
ASSIGN_OP	4855:17	4855:17	12	=
LEAF_NODE	4855:17	4855:17	13	=
RVAL	4855:19	4855:19	12	TIFFReadEncodedStrip ( in , strip , buff , stripsize )
FUNCTION_CALL	4855:19	4855:67	13	TIFFReadEncodedStrip ( in , strip , buff , stripsize )
CALLEE	4855:19	4855:19	14	TIFFReadEncodedStrip
LEAF_NODE	4855:19	4855:19	15	TIFFReadEncodedStrip
LEAF_NODE	4855:40	4855:40	14	(
ARGUMENT	4855:41	4855:41	14	in
FIELD	4855:41	4855:41	15	in
LEAF_NODE	4855:41	4855:41	16	in
LEAF_NODE	4855:43	4855:43	14	,
ARGUMENT	4855:45	4855:45	14	strip
FIELD	4855:45	4855:45	15	strip
LEAF_NODE	4855:45	4855:45	16	strip
LEAF_NODE	4855:50	4855:50	14	,
ARGUMENT	4855:52	4855:52	14	buff
FIELD	4855:52	4855:52	15	buff
LEAF_NODE	4855:52	4855:52	16	buff
LEAF_NODE	4855:56	4855:56	14	,
ARGUMENT	4855:58	4855:58	14	stripsize
FIELD	4855:58	4855:58	15	stripsize
LEAF_NODE	4855:58	4855:58	16	stripsize
LEAF_NODE	4855:67	4855:67	14	)
LEAF_NODE	4855:68	4855:68	10	;
EXPR_STATEMENT	4856:6	4856:48	9	rows_this_strip = bytes_read / src_rowsize ;
EXPR	4856:6	4856:6	10	rows_this_strip = bytes_read / src_rowsize
ASSIGN	4856:6	4856:24	11	rows_this_strip = bytes_read / src_rowsize
LVAL	4856:6	4856:6	12	rows_this_strip
FIELD	4856:6	4856:6	13	rows_this_strip
LEAF_NODE	4856:6	4856:6	14	rows_this_strip
ASSIGN_OP	4856:22	4856:22	12	=
LEAF_NODE	4856:22	4856:22	13	=
RVAL	4856:24	4856:37	12	bytes_read / src_rowsize
FIELD	4856:24	4856:24	13	bytes_read
LEAF_NODE	4856:24	4856:24	14	bytes_read
LEAF_NODE	4856:35	4856:35	13	/
FIELD	4856:37	4856:37	13	src_rowsize
LEAF_NODE	4856:37	4856:37	14	src_rowsize
LEAF_NODE	4856:48	4856:48	10	;
SELECTION	4857:6	4858:8	9	
KEYWORD	4857:6	4857:6	10	if
LEAF_NODE	4857:6	4857:6	11	if
LEAF_NODE	4857:9	4857:9	10	(
CONDITION	4857:10	4857:10	10	bytes_read < 0 && ! ignore
EXPR	4857:10	4857:10	11	bytes_read < 0 && ! ignore
AND	4857:10	4857:28	12	bytes_read < 0 && ! ignore
EXPR	4857:10	4857:23	13	bytes_read < 0
FIELD	4857:10	4857:10	14	bytes_read
LEAF_NODE	4857:10	4857:10	15	bytes_read
REL_OPERATOR	4857:21	4857:21	14	<
LEAF_NODE	4857:21	4857:21	15	<
FIELD	4857:23	4857:23	14	0
LEAF_NODE	4857:23	4857:23	15	0
LEAF_NODE	4857:25	4857:25	13	&&
EXPR	4857:28	4857:28	13	! ignore
UNARY_EXPR	4857:28	4857:29	14	! ignore
UNARY_OPERATOR	4857:28	4857:28	15	!
LEAF_NODE	4857:28	4857:28	16	!
FIELD	4857:29	4857:29	15	ignore
LEAF_NODE	4857:29	4857:29	16	ignore
LEAF_NODE	4857:35	4857:35	10	)
STATEMENTS	4858:8	4864:8	10	
LEAF_NODE	4858:8	4858:8	11	{
STATEMENTS	4859:8	4863:8	11	
EXPR_STATEMENT	4859:8	4861:42	12	TIFFError ( TIFFFileName ( in ) , "Error, can't read strip %lu for sample %d" , ( unsigned long ) strip , s + 1 ) ;
EXPR	4859:8	4859:8	13	TIFFError ( TIFFFileName ( in ) , "Error, can't read strip %lu for sample %d" , ( unsigned long ) strip , s + 1 )
FUNCTION_CALL	4859:8	4861:41	14	TIFFError ( TIFFFileName ( in ) , "Error, can't read strip %lu for sample %d" , ( unsigned long ) strip , s + 1 )
CALLEE	4859:8	4859:8	15	TIFFError
LEAF_NODE	4859:8	4859:8	16	TIFFError
LEAF_NODE	4859:17	4859:17	15	(
ARGUMENT	4859:18	4859:18	15	TIFFFileName ( in )
FUNCTION_CALL	4859:18	4859:33	16	TIFFFileName ( in )
CALLEE	4859:18	4859:18	17	TIFFFileName
LEAF_NODE	4859:18	4859:18	18	TIFFFileName
LEAF_NODE	4859:30	4859:30	17	(
ARGUMENT	4859:31	4859:31	17	in
FIELD	4859:31	4859:31	18	in
LEAF_NODE	4859:31	4859:31	19	in
LEAF_NODE	4859:33	4859:33	17	)
LEAF_NODE	4859:34	4859:34	15	,
ARGUMENT	4860:11	4860:11	15	"Error, can't read strip %lu for sample %d"
FIELD	4860:11	4860:11	16	"Error, can't read strip %lu for sample %d"
LEAF_NODE	4860:11	4860:11	17	"Error, can't read strip %lu for sample %d"
LEAF_NODE	4860:54	4860:54	15	,
ARGUMENT	4861:13	4861:29	15	( unsigned long ) strip
LEAF_NODE	4861:13	4861:13	16	(
TYPE_NAME	4861:14	4861:23	16	unsigned long
LEAF_NODE	4861:14	4861:14	17	unsigned
LEAF_NODE	4861:23	4861:23	17	long
LEAF_NODE	4861:27	4861:27	16	)
FIELD	4861:29	4861:29	16	strip
LEAF_NODE	4861:29	4861:29	17	strip
LEAF_NODE	4861:34	4861:34	15	,
ARGUMENT	4861:36	4861:40	15	s + 1
FIELD	4861:36	4861:36	16	s
LEAF_NODE	4861:36	4861:36	17	s
LEAF_NODE	4861:38	4861:38	16	+
FIELD	4861:40	4861:40	16	1
LEAF_NODE	4861:40	4861:40	17	1
LEAF_NODE	4861:41	4861:41	15	)
LEAF_NODE	4861:42	4861:42	13	;
EXPR_STATEMENT	4862:8	4862:18	12	result = 0 ;
EXPR	4862:8	4862:8	13	result = 0
ASSIGN	4862:8	4862:17	14	result = 0
LVAL	4862:8	4862:8	15	result
FIELD	4862:8	4862:8	16	result
LEAF_NODE	4862:8	4862:8	17	result
ASSIGN_OP	4862:15	4862:15	15	=
LEAF_NODE	4862:15	4862:15	16	=
RVAL	4862:17	4862:17	15	0
FIELD	4862:17	4862:17	16	0
LEAF_NODE	4862:17	4862:17	17	0
LEAF_NODE	4862:18	4862:18	13	;
JUMP_STATEMENT	4863:8	4863:13	12	break DESTINATION ;
KEYWORD	4863:8	4863:8	13	break
LEAF_NODE	4863:8	4863:8	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4863:13	4863:13	13	;
LEAF_NODE	4864:8	4864:8	11	}
EXPR_STATEMENT	4866:6	4867:50	9	TIFFError ( "" , "Strip %2d, read %5d bytes for %4d scanlines, shift width %d" , strip , bytes_read , rows_this_strip , shift_width ) ;
EXPR	4866:6	4866:6	10	TIFFError ( "" , "Strip %2d, read %5d bytes for %4d scanlines, shift width %d" , strip , bytes_read , rows_this_strip , shift_width )
FUNCTION_CALL	4866:6	4867:49	11	TIFFError ( "" , "Strip %2d, read %5d bytes for %4d scanlines, shift width %d" , strip , bytes_read , rows_this_strip , shift_width )
CALLEE	4866:6	4866:6	12	TIFFError
LEAF_NODE	4866:6	4866:6	13	TIFFError
LEAF_NODE	4866:15	4866:15	12	(
ARGUMENT	4866:16	4866:16	12	""
FIELD	4866:16	4866:16	13	""
LEAF_NODE	4866:16	4866:16	14	""
LEAF_NODE	4866:18	4866:18	12	,
ARGUMENT	4866:20	4866:20	12	"Strip %2d, read %5d bytes for %4d scanlines, shift width %d"
FIELD	4866:20	4866:20	13	"Strip %2d, read %5d bytes for %4d scanlines, shift width %d"
LEAF_NODE	4866:20	4866:20	14	"Strip %2d, read %5d bytes for %4d scanlines, shift width %d"
LEAF_NODE	4866:81	4866:81	12	,
ARGUMENT	4867:2	4867:2	12	strip
FIELD	4867:2	4867:2	13	strip
LEAF_NODE	4867:2	4867:2	14	strip
LEAF_NODE	4867:7	4867:7	12	,
ARGUMENT	4867:9	4867:9	12	bytes_read
FIELD	4867:9	4867:9	13	bytes_read
LEAF_NODE	4867:9	4867:9	14	bytes_read
LEAF_NODE	4867:19	4867:19	12	,
ARGUMENT	4867:21	4867:21	12	rows_this_strip
FIELD	4867:21	4867:21	13	rows_this_strip
LEAF_NODE	4867:21	4867:21	14	rows_this_strip
LEAF_NODE	4867:36	4867:36	12	,
ARGUMENT	4867:38	4867:38	12	shift_width
FIELD	4867:38	4867:38	13	shift_width
LEAF_NODE	4867:38	4867:38	14	shift_width
LEAF_NODE	4867:49	4867:49	12	)
LEAF_NODE	4867:50	4867:50	10	;
LEAF_NODE	4869:6	4869:6	8	}
SELECTION	4871:4	4872:6	6	
KEYWORD	4871:4	4871:4	7	if
LEAF_NODE	4871:4	4871:4	8	if
LEAF_NODE	4871:7	4871:7	7	(
CONDITION	4871:8	4871:8	7	rps > rows_this_strip
EXPR	4871:8	4871:14	8	rps > rows_this_strip
FIELD	4871:8	4871:8	9	rps
LEAF_NODE	4871:8	4871:8	10	rps
REL_OPERATOR	4871:12	4871:12	9	>
LEAF_NODE	4871:12	4871:12	10	>
FIELD	4871:14	4871:14	9	rows_this_strip
LEAF_NODE	4871:14	4871:14	10	rows_this_strip
LEAF_NODE	4871:29	4871:29	7	)
STATEMENTS	4872:6	4872:6	7	
EXPR_STATEMENT	4872:6	4872:27	8	rps = rows_this_strip ;
EXPR	4872:6	4872:6	9	rps = rows_this_strip
ASSIGN	4872:6	4872:12	10	rps = rows_this_strip
LVAL	4872:6	4872:6	11	rps
FIELD	4872:6	4872:6	12	rps
LEAF_NODE	4872:6	4872:6	13	rps
ASSIGN_OP	4872:10	4872:10	11	=
LEAF_NODE	4872:10	4872:10	12	=
RVAL	4872:12	4872:12	11	rows_this_strip
FIELD	4872:12	4872:12	12	rows_this_strip
LEAF_NODE	4872:12	4872:12	13	rows_this_strip
LEAF_NODE	4872:27	4872:27	9	;
EXPR_STATEMENT	4873:4	4873:47	6	dst = obuf + ( dst_rowsize * rows_processed ) ;
EXPR	4873:4	4873:4	7	dst = obuf + ( dst_rowsize * rows_processed )
ASSIGN	4873:4	4873:10	8	dst = obuf + ( dst_rowsize * rows_processed )
LVAL	4873:4	4873:4	9	dst
FIELD	4873:4	4873:4	10	dst
LEAF_NODE	4873:4	4873:4	11	dst
ASSIGN_OP	4873:8	4873:8	9	=
LEAF_NODE	4873:8	4873:8	10	=
RVAL	4873:10	4873:46	9	obuf + ( dst_rowsize * rows_processed )
FIELD	4873:10	4873:10	10	obuf
LEAF_NODE	4873:10	4873:10	11	obuf
LEAF_NODE	4873:15	4873:15	10	+
LEAF_NODE	4873:17	4873:17	10	(
FIELD	4873:18	4873:18	10	dst_rowsize
LEAF_NODE	4873:18	4873:18	11	dst_rowsize
LEAF_NODE	4873:30	4873:30	10	*
FIELD	4873:32	4873:32	10	rows_processed
LEAF_NODE	4873:32	4873:32	11	rows_processed
LEAF_NODE	4873:46	4873:46	10	)
LEAF_NODE	4873:47	4873:47	7	;
SELECTION	4874:4	4875:6	6	
KEYWORD	4874:4	4874:4	7	if
LEAF_NODE	4874:4	4874:4	8	if
LEAF_NODE	4874:7	4874:7	7	(
CONDITION	4874:8	4874:8	7	( bps % 8 ) == 0
EXPR	4874:8	4874:21	8	( bps % 8 ) == 0
LEAF_NODE	4874:8	4874:8	9	(
FIELD	4874:9	4874:9	9	bps
LEAF_NODE	4874:9	4874:9	10	bps
LEAF_NODE	4874:13	4874:13	9	%
FIELD	4874:15	4874:15	9	8
LEAF_NODE	4874:15	4874:15	10	8
LEAF_NODE	4874:16	4874:16	9	)
EQ_OPERATOR	4874:18	4874:18	9	==
LEAF_NODE	4874:18	4874:18	10	==
FIELD	4874:21	4874:21	9	0
LEAF_NODE	4874:21	4874:21	10	0
LEAF_NODE	4874:22	4874:22	7	)
STATEMENTS	4875:6	4883:6	7	
LEAF_NODE	4875:6	4875:6	8	{
STATEMENTS	4876:6	4876:6	8	
SELECTION	4876:6	4879:8	9	
KEYWORD	4876:6	4876:6	10	if
LEAF_NODE	4876:6	4876:6	11	if
LEAF_NODE	4876:9	4876:9	10	(
CONDITION	4876:10	4876:10	10	combineSeparateSamplesBytes ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
EXPR	4876:10	4876:10	11	combineSeparateSamplesBytes ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
FUNCTION_CALL	4876:10	4878:64	12	combineSeparateSamplesBytes ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
CALLEE	4876:10	4876:10	13	combineSeparateSamplesBytes
LEAF_NODE	4876:10	4876:10	14	combineSeparateSamplesBytes
LEAF_NODE	4876:38	4876:38	13	(
ARGUMENT	4876:39	4876:39	13	srcbuffs
FIELD	4876:39	4876:39	14	srcbuffs
LEAF_NODE	4876:39	4876:39	15	srcbuffs
LEAF_NODE	4876:47	4876:47	13	,
ARGUMENT	4876:49	4876:49	13	dst
FIELD	4876:49	4876:49	14	dst
LEAF_NODE	4876:49	4876:49	15	dst
LEAF_NODE	4876:52	4876:52	13	,
ARGUMENT	4876:54	4876:54	13	width
FIELD	4876:54	4876:54	14	width
LEAF_NODE	4876:54	4876:54	15	width
LEAF_NODE	4876:59	4876:59	13	,
ARGUMENT	4876:61	4876:61	13	rps
FIELD	4876:61	4876:61	14	rps
LEAF_NODE	4876:61	4876:61	15	rps
LEAF_NODE	4876:64	4876:64	13	,
ARGUMENT	4877:39	4877:39	13	spp
FIELD	4877:39	4877:39	14	spp
LEAF_NODE	4877:39	4877:39	15	spp
LEAF_NODE	4877:42	4877:42	13	,
ARGUMENT	4877:44	4877:44	13	bps
FIELD	4877:44	4877:44	14	bps
LEAF_NODE	4877:44	4877:44	15	bps
LEAF_NODE	4877:47	4877:47	13	,
ARGUMENT	4877:49	4877:49	13	dump -> infile
FIELD	4877:49	4877:55	14	dump -> infile
LEAF_NODE	4877:49	4877:49	15	dump
LEAF_NODE	4877:53	4877:53	15	->
LEAF_NODE	4877:55	4877:55	15	infile
LEAF_NODE	4877:61	4877:61	13	,
ARGUMENT	4878:39	4878:39	13	dump -> format
FIELD	4878:39	4878:45	14	dump -> format
LEAF_NODE	4878:39	4878:39	15	dump
LEAF_NODE	4878:43	4878:43	15	->
LEAF_NODE	4878:45	4878:45	15	format
LEAF_NODE	4878:51	4878:51	13	,
ARGUMENT	4878:53	4878:53	13	dump -> level
FIELD	4878:53	4878:59	14	dump -> level
LEAF_NODE	4878:53	4878:53	15	dump
LEAF_NODE	4878:57	4878:57	15	->
LEAF_NODE	4878:59	4878:59	15	level
LEAF_NODE	4878:64	4878:64	13	)
LEAF_NODE	4878:65	4878:65	10	)
STATEMENTS	4879:8	4882:1	10	
LEAF_NODE	4879:8	4879:8	11	{
STATEMENTS	4880:8	4881:8	11	
EXPR_STATEMENT	4880:8	4880:18	12	result = 0 ;
EXPR	4880:8	4880:8	13	result = 0
ASSIGN	4880:8	4880:17	14	result = 0
LVAL	4880:8	4880:8	15	result
FIELD	4880:8	4880:8	16	result
LEAF_NODE	4880:8	4880:8	17	result
ASSIGN_OP	4880:15	4880:15	15	=
LEAF_NODE	4880:15	4880:15	16	=
RVAL	4880:17	4880:17	15	0
FIELD	4880:17	4880:17	16	0
LEAF_NODE	4880:17	4880:17	17	0
LEAF_NODE	4880:18	4880:18	13	;
JUMP_STATEMENT	4881:8	4881:13	12	break DESTINATION ;
KEYWORD	4881:8	4881:8	13	break
LEAF_NODE	4881:8	4881:8	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4881:13	4881:13	13	;
LEAF_NODE	4882:1	4882:1	11	}
LEAF_NODE	4883:6	4883:6	8	}
SELECTION	4884:4	4885:6	6	
KEYWORD	4884:4	4884:4	7	else
LEAF_NODE	4884:4	4884:4	8	else
STATEMENTS	4885:6	4928:6	7	
LEAF_NODE	4885:6	4885:6	8	{
STATEMENTS	4886:6	4886:6	8	
SELECTION	4886:6	4887:8	9	
KEYWORD	4886:6	4886:6	10	switch
LEAF_NODE	4886:6	4886:6	11	switch
LEAF_NODE	4886:13	4886:13	10	(
CONDITION	4886:14	4886:14	10	shift_width
EXPR	4886:14	4886:14	11	shift_width
FIELD	4886:14	4886:14	12	shift_width
LEAF_NODE	4886:14	4886:14	13	shift_width
LEAF_NODE	4886:25	4886:25	10	)
STATEMENTS	4887:8	4927:8	10	
LEAF_NODE	4887:8	4887:8	11	{
STATEMENTS	4888:8	4926:18	11	
LABEL	4888:8	4888:14	12	case 1 :
LEAF_NODE	4888:8	4888:8	13	case
LEAF_NODE	4888:13	4888:13	13	1
LEAF_NODE	4888:14	4888:14	13	:
SELECTION	4888:16	4891:11	12	
KEYWORD	4888:16	4888:16	13	if
LEAF_NODE	4888:16	4888:16	14	if
LEAF_NODE	4888:19	4888:19	13	(
CONDITION	4888:20	4888:20	13	combineSeparateSamples8bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
EXPR	4888:20	4888:20	14	combineSeparateSamples8bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
FUNCTION_CALL	4888:20	4890:74	15	combineSeparateSamples8bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
CALLEE	4888:20	4888:20	16	combineSeparateSamples8bits
LEAF_NODE	4888:20	4888:20	17	combineSeparateSamples8bits
LEAF_NODE	4888:48	4888:48	16	(
ARGUMENT	4888:49	4888:49	16	srcbuffs
FIELD	4888:49	4888:49	17	srcbuffs
LEAF_NODE	4888:49	4888:49	18	srcbuffs
LEAF_NODE	4888:57	4888:57	16	,
ARGUMENT	4888:59	4888:59	16	dst
FIELD	4888:59	4888:59	17	dst
LEAF_NODE	4888:59	4888:59	18	dst
LEAF_NODE	4888:62	4888:62	16	,
ARGUMENT	4888:64	4888:64	16	width
FIELD	4888:64	4888:64	17	width
LEAF_NODE	4888:64	4888:64	18	width
LEAF_NODE	4888:69	4888:69	16	,
ARGUMENT	4888:71	4888:71	16	rps
FIELD	4888:71	4888:71	17	rps
LEAF_NODE	4888:71	4888:71	18	rps
LEAF_NODE	4888:74	4888:74	16	,
ARGUMENT	4889:49	4889:49	16	spp
FIELD	4889:49	4889:49	17	spp
LEAF_NODE	4889:49	4889:49	18	spp
LEAF_NODE	4889:52	4889:52	16	,
ARGUMENT	4889:54	4889:54	16	bps
FIELD	4889:54	4889:54	17	bps
LEAF_NODE	4889:54	4889:54	18	bps
LEAF_NODE	4889:57	4889:57	16	,
ARGUMENT	4889:59	4889:59	16	dump -> infile
FIELD	4889:59	4889:65	17	dump -> infile
LEAF_NODE	4889:59	4889:59	18	dump
LEAF_NODE	4889:63	4889:63	18	->
LEAF_NODE	4889:65	4889:65	18	infile
LEAF_NODE	4889:71	4889:71	16	,
ARGUMENT	4890:49	4890:49	16	dump -> format
FIELD	4890:49	4890:55	17	dump -> format
LEAF_NODE	4890:49	4890:49	18	dump
LEAF_NODE	4890:53	4890:53	18	->
LEAF_NODE	4890:55	4890:55	18	format
LEAF_NODE	4890:61	4890:61	16	,
ARGUMENT	4890:63	4890:63	16	dump -> level
FIELD	4890:63	4890:69	17	dump -> level
LEAF_NODE	4890:63	4890:63	18	dump
LEAF_NODE	4890:67	4890:67	18	->
LEAF_NODE	4890:69	4890:69	18	level
LEAF_NODE	4890:74	4890:74	16	)
LEAF_NODE	4890:75	4890:75	13	)
STATEMENTS	4891:11	4894:17	13	
LEAF_NODE	4891:11	4891:11	14	{
STATEMENTS	4892:18	4893:18	14	
EXPR_STATEMENT	4892:18	4892:28	15	result = 0 ;
EXPR	4892:18	4892:18	16	result = 0
ASSIGN	4892:18	4892:27	17	result = 0
LVAL	4892:18	4892:18	18	result
FIELD	4892:18	4892:18	19	result
LEAF_NODE	4892:18	4892:18	20	result
ASSIGN_OP	4892:25	4892:25	18	=
LEAF_NODE	4892:25	4892:25	19	=
RVAL	4892:27	4892:27	18	0
FIELD	4892:27	4892:27	19	0
LEAF_NODE	4892:27	4892:27	20	0
LEAF_NODE	4892:28	4892:28	16	;
JUMP_STATEMENT	4893:18	4893:23	15	break DESTINATION ;
KEYWORD	4893:18	4893:18	16	break
LEAF_NODE	4893:18	4893:18	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	4893:23	4893:23	16	;
LEAF_NODE	4894:17	4894:17	14	}
JUMP_STATEMENT	4895:9	4895:14	12	break DESTINATION ;
KEYWORD	4895:9	4895:9	13	break
LEAF_NODE	4895:9	4895:9	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4895:14	4895:14	13	;
LABEL	4896:8	4896:14	12	case 2 :
LEAF_NODE	4896:8	4896:8	13	case
LEAF_NODE	4896:13	4896:13	13	2
LEAF_NODE	4896:14	4896:14	13	:
SELECTION	4896:16	4899:11	12	
KEYWORD	4896:16	4896:16	13	if
LEAF_NODE	4896:16	4896:16	14	if
LEAF_NODE	4896:19	4896:19	13	(
CONDITION	4896:20	4896:20	13	combineSeparateSamples16bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
EXPR	4896:20	4896:20	14	combineSeparateSamples16bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
FUNCTION_CALL	4896:20	4898:75	15	combineSeparateSamples16bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
CALLEE	4896:20	4896:20	16	combineSeparateSamples16bits
LEAF_NODE	4896:20	4896:20	17	combineSeparateSamples16bits
LEAF_NODE	4896:49	4896:49	16	(
ARGUMENT	4896:50	4896:50	16	srcbuffs
FIELD	4896:50	4896:50	17	srcbuffs
LEAF_NODE	4896:50	4896:50	18	srcbuffs
LEAF_NODE	4896:58	4896:58	16	,
ARGUMENT	4896:60	4896:60	16	dst
FIELD	4896:60	4896:60	17	dst
LEAF_NODE	4896:60	4896:60	18	dst
LEAF_NODE	4896:63	4896:63	16	,
ARGUMENT	4896:65	4896:65	16	width
FIELD	4896:65	4896:65	17	width
LEAF_NODE	4896:65	4896:65	18	width
LEAF_NODE	4896:70	4896:70	16	,
ARGUMENT	4896:72	4896:72	16	rps
FIELD	4896:72	4896:72	17	rps
LEAF_NODE	4896:72	4896:72	18	rps
LEAF_NODE	4896:75	4896:75	16	,
ARGUMENT	4897:50	4897:50	16	spp
FIELD	4897:50	4897:50	17	spp
LEAF_NODE	4897:50	4897:50	18	spp
LEAF_NODE	4897:53	4897:53	16	,
ARGUMENT	4897:55	4897:55	16	bps
FIELD	4897:55	4897:55	17	bps
LEAF_NODE	4897:55	4897:55	18	bps
LEAF_NODE	4897:58	4897:58	16	,
ARGUMENT	4897:60	4897:60	16	dump -> infile
FIELD	4897:60	4897:66	17	dump -> infile
LEAF_NODE	4897:60	4897:60	18	dump
LEAF_NODE	4897:64	4897:64	18	->
LEAF_NODE	4897:66	4897:66	18	infile
LEAF_NODE	4897:72	4897:72	16	,
ARGUMENT	4898:50	4898:50	16	dump -> format
FIELD	4898:50	4898:56	17	dump -> format
LEAF_NODE	4898:50	4898:50	18	dump
LEAF_NODE	4898:54	4898:54	18	->
LEAF_NODE	4898:56	4898:56	18	format
LEAF_NODE	4898:62	4898:62	16	,
ARGUMENT	4898:64	4898:64	16	dump -> level
FIELD	4898:64	4898:70	17	dump -> level
LEAF_NODE	4898:64	4898:64	18	dump
LEAF_NODE	4898:68	4898:68	18	->
LEAF_NODE	4898:70	4898:70	18	level
LEAF_NODE	4898:75	4898:75	16	)
LEAF_NODE	4898:76	4898:76	13	)
STATEMENTS	4899:11	4902:4	13	
LEAF_NODE	4899:11	4899:11	14	{
STATEMENTS	4900:18	4901:18	14	
EXPR_STATEMENT	4900:18	4900:28	15	result = 0 ;
EXPR	4900:18	4900:18	16	result = 0
ASSIGN	4900:18	4900:27	17	result = 0
LVAL	4900:18	4900:18	18	result
FIELD	4900:18	4900:18	19	result
LEAF_NODE	4900:18	4900:18	20	result
ASSIGN_OP	4900:25	4900:25	18	=
LEAF_NODE	4900:25	4900:25	19	=
RVAL	4900:27	4900:27	18	0
FIELD	4900:27	4900:27	19	0
LEAF_NODE	4900:27	4900:27	20	0
LEAF_NODE	4900:28	4900:28	16	;
JUMP_STATEMENT	4901:18	4901:23	15	break DESTINATION ;
KEYWORD	4901:18	4901:18	16	break
LEAF_NODE	4901:18	4901:18	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	4901:23	4901:23	16	;
LEAF_NODE	4902:4	4902:4	14	}
JUMP_STATEMENT	4903:9	4903:14	12	break DESTINATION ;
KEYWORD	4903:9	4903:9	13	break
LEAF_NODE	4903:9	4903:9	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4903:14	4903:14	13	;
LABEL	4904:8	4904:14	12	case 3 :
LEAF_NODE	4904:8	4904:8	13	case
LEAF_NODE	4904:13	4904:13	13	3
LEAF_NODE	4904:14	4904:14	13	:
SELECTION	4904:16	4907:11	12	
KEYWORD	4904:16	4904:16	13	if
LEAF_NODE	4904:16	4904:16	14	if
LEAF_NODE	4904:19	4904:19	13	(
CONDITION	4904:20	4904:20	13	combineSeparateSamples24bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
EXPR	4904:20	4904:20	14	combineSeparateSamples24bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
FUNCTION_CALL	4904:20	4906:75	15	combineSeparateSamples24bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
CALLEE	4904:20	4904:20	16	combineSeparateSamples24bits
LEAF_NODE	4904:20	4904:20	17	combineSeparateSamples24bits
LEAF_NODE	4904:49	4904:49	16	(
ARGUMENT	4904:50	4904:50	16	srcbuffs
FIELD	4904:50	4904:50	17	srcbuffs
LEAF_NODE	4904:50	4904:50	18	srcbuffs
LEAF_NODE	4904:58	4904:58	16	,
ARGUMENT	4904:60	4904:60	16	dst
FIELD	4904:60	4904:60	17	dst
LEAF_NODE	4904:60	4904:60	18	dst
LEAF_NODE	4904:63	4904:63	16	,
ARGUMENT	4904:65	4904:65	16	width
FIELD	4904:65	4904:65	17	width
LEAF_NODE	4904:65	4904:65	18	width
LEAF_NODE	4904:70	4904:70	16	,
ARGUMENT	4904:72	4904:72	16	rps
FIELD	4904:72	4904:72	17	rps
LEAF_NODE	4904:72	4904:72	18	rps
LEAF_NODE	4904:75	4904:75	16	,
ARGUMENT	4905:50	4905:50	16	spp
FIELD	4905:50	4905:50	17	spp
LEAF_NODE	4905:50	4905:50	18	spp
LEAF_NODE	4905:53	4905:53	16	,
ARGUMENT	4905:55	4905:55	16	bps
FIELD	4905:55	4905:55	17	bps
LEAF_NODE	4905:55	4905:55	18	bps
LEAF_NODE	4905:58	4905:58	16	,
ARGUMENT	4905:60	4905:60	16	dump -> infile
FIELD	4905:60	4905:66	17	dump -> infile
LEAF_NODE	4905:60	4905:60	18	dump
LEAF_NODE	4905:64	4905:64	18	->
LEAF_NODE	4905:66	4905:66	18	infile
LEAF_NODE	4905:72	4905:72	16	,
ARGUMENT	4906:50	4906:50	16	dump -> format
FIELD	4906:50	4906:56	17	dump -> format
LEAF_NODE	4906:50	4906:50	18	dump
LEAF_NODE	4906:54	4906:54	18	->
LEAF_NODE	4906:56	4906:56	18	format
LEAF_NODE	4906:62	4906:62	16	,
ARGUMENT	4906:64	4906:64	16	dump -> level
FIELD	4906:64	4906:70	17	dump -> level
LEAF_NODE	4906:64	4906:64	18	dump
LEAF_NODE	4906:68	4906:68	18	->
LEAF_NODE	4906:70	4906:70	18	level
LEAF_NODE	4906:75	4906:75	16	)
LEAF_NODE	4906:76	4906:76	13	)
STATEMENTS	4907:11	4910:18	13	
LEAF_NODE	4907:11	4907:11	14	{
STATEMENTS	4908:18	4909:18	14	
EXPR_STATEMENT	4908:18	4908:28	15	result = 0 ;
EXPR	4908:18	4908:18	16	result = 0
ASSIGN	4908:18	4908:27	17	result = 0
LVAL	4908:18	4908:18	18	result
FIELD	4908:18	4908:18	19	result
LEAF_NODE	4908:18	4908:18	20	result
ASSIGN_OP	4908:25	4908:25	18	=
LEAF_NODE	4908:25	4908:25	19	=
RVAL	4908:27	4908:27	18	0
FIELD	4908:27	4908:27	19	0
LEAF_NODE	4908:27	4908:27	20	0
LEAF_NODE	4908:28	4908:28	16	;
JUMP_STATEMENT	4909:18	4909:23	15	break DESTINATION ;
KEYWORD	4909:18	4909:18	16	break
LEAF_NODE	4909:18	4909:18	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	4909:23	4909:23	16	;
LEAF_NODE	4910:18	4910:18	14	}
JUMP_STATEMENT	4911:16	4911:21	12	break DESTINATION ;
KEYWORD	4911:16	4911:16	13	break
LEAF_NODE	4911:16	4911:16	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4911:21	4911:21	13	;
LABEL	4912:8	4912:14	12	case 4 :
LEAF_NODE	4912:8	4912:8	13	case
LEAF_NODE	4912:13	4912:13	13	4
LEAF_NODE	4912:14	4912:14	13	:
LABEL	4913:8	4913:14	12	case 5 :
LEAF_NODE	4913:8	4913:8	13	case
LEAF_NODE	4913:13	4913:13	13	5
LEAF_NODE	4913:14	4913:14	13	:
LABEL	4914:8	4914:14	12	case 6 :
LEAF_NODE	4914:8	4914:8	13	case
LEAF_NODE	4914:13	4914:13	13	6
LEAF_NODE	4914:14	4914:14	13	:
LABEL	4915:8	4915:14	12	case 7 :
LEAF_NODE	4915:8	4915:8	13	case
LEAF_NODE	4915:13	4915:13	13	7
LEAF_NODE	4915:14	4915:14	13	:
LABEL	4916:8	4916:14	12	case 8 :
LEAF_NODE	4916:8	4916:8	13	case
LEAF_NODE	4916:13	4916:13	13	8
LEAF_NODE	4916:14	4916:14	13	:
SELECTION	4916:16	4919:11	12	
KEYWORD	4916:16	4916:16	13	if
LEAF_NODE	4916:16	4916:16	14	if
LEAF_NODE	4916:19	4916:19	13	(
CONDITION	4916:20	4916:20	13	combineSeparateSamples32bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
EXPR	4916:20	4916:20	14	combineSeparateSamples32bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
FUNCTION_CALL	4916:20	4918:75	15	combineSeparateSamples32bits ( srcbuffs , dst , width , rps , spp , bps , dump -> infile , dump -> format , dump -> level )
CALLEE	4916:20	4916:20	16	combineSeparateSamples32bits
LEAF_NODE	4916:20	4916:20	17	combineSeparateSamples32bits
LEAF_NODE	4916:49	4916:49	16	(
ARGUMENT	4916:50	4916:50	16	srcbuffs
FIELD	4916:50	4916:50	17	srcbuffs
LEAF_NODE	4916:50	4916:50	18	srcbuffs
LEAF_NODE	4916:58	4916:58	16	,
ARGUMENT	4916:60	4916:60	16	dst
FIELD	4916:60	4916:60	17	dst
LEAF_NODE	4916:60	4916:60	18	dst
LEAF_NODE	4916:63	4916:63	16	,
ARGUMENT	4916:65	4916:65	16	width
FIELD	4916:65	4916:65	17	width
LEAF_NODE	4916:65	4916:65	18	width
LEAF_NODE	4916:70	4916:70	16	,
ARGUMENT	4916:72	4916:72	16	rps
FIELD	4916:72	4916:72	17	rps
LEAF_NODE	4916:72	4916:72	18	rps
LEAF_NODE	4916:75	4916:75	16	,
ARGUMENT	4917:50	4917:50	16	spp
FIELD	4917:50	4917:50	17	spp
LEAF_NODE	4917:50	4917:50	18	spp
LEAF_NODE	4917:53	4917:53	16	,
ARGUMENT	4917:55	4917:55	16	bps
FIELD	4917:55	4917:55	17	bps
LEAF_NODE	4917:55	4917:55	18	bps
LEAF_NODE	4917:58	4917:58	16	,
ARGUMENT	4917:60	4917:60	16	dump -> infile
FIELD	4917:60	4917:66	17	dump -> infile
LEAF_NODE	4917:60	4917:60	18	dump
LEAF_NODE	4917:64	4917:64	18	->
LEAF_NODE	4917:66	4917:66	18	infile
LEAF_NODE	4917:72	4917:72	16	,
ARGUMENT	4918:50	4918:50	16	dump -> format
FIELD	4918:50	4918:56	17	dump -> format
LEAF_NODE	4918:50	4918:50	18	dump
LEAF_NODE	4918:54	4918:54	18	->
LEAF_NODE	4918:56	4918:56	18	format
LEAF_NODE	4918:62	4918:62	16	,
ARGUMENT	4918:64	4918:64	16	dump -> level
FIELD	4918:64	4918:70	17	dump -> level
LEAF_NODE	4918:64	4918:64	18	dump
LEAF_NODE	4918:68	4918:68	18	->
LEAF_NODE	4918:70	4918:70	18	level
LEAF_NODE	4918:75	4918:75	16	)
LEAF_NODE	4918:76	4918:76	13	)
STATEMENTS	4919:11	4922:4	13	
LEAF_NODE	4919:11	4919:11	14	{
STATEMENTS	4920:18	4921:18	14	
EXPR_STATEMENT	4920:18	4920:28	15	result = 0 ;
EXPR	4920:18	4920:18	16	result = 0
ASSIGN	4920:18	4920:27	17	result = 0
LVAL	4920:18	4920:18	18	result
FIELD	4920:18	4920:18	19	result
LEAF_NODE	4920:18	4920:18	20	result
ASSIGN_OP	4920:25	4920:25	18	=
LEAF_NODE	4920:25	4920:25	19	=
RVAL	4920:27	4920:27	18	0
FIELD	4920:27	4920:27	19	0
LEAF_NODE	4920:27	4920:27	20	0
LEAF_NODE	4920:28	4920:28	16	;
JUMP_STATEMENT	4921:18	4921:23	15	break DESTINATION ;
KEYWORD	4921:18	4921:18	16	break
LEAF_NODE	4921:18	4921:18	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	4921:23	4921:23	16	;
LEAF_NODE	4922:4	4922:4	14	}
JUMP_STATEMENT	4923:9	4923:14	12	break DESTINATION ;
KEYWORD	4923:9	4923:9	13	break
LEAF_NODE	4923:9	4923:9	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4923:14	4923:14	13	;
LABEL	4924:8	4924:15	12	default :
LEAF_NODE	4924:8	4924:8	13	default
LEAF_NODE	4924:15	4924:15	13	:
EXPR_STATEMENT	4924:17	4924:93	12	TIFFError ( "readSeparateStripsIntoBuffer" , "Unsupported bit depth: %d" , bps ) ;
EXPR	4924:17	4924:17	13	TIFFError ( "readSeparateStripsIntoBuffer" , "Unsupported bit depth: %d" , bps )
FUNCTION_CALL	4924:17	4924:92	14	TIFFError ( "readSeparateStripsIntoBuffer" , "Unsupported bit depth: %d" , bps )
CALLEE	4924:17	4924:17	15	TIFFError
LEAF_NODE	4924:17	4924:17	16	TIFFError
LEAF_NODE	4924:27	4924:27	15	(
ARGUMENT	4924:28	4924:28	15	"readSeparateStripsIntoBuffer"
FIELD	4924:28	4924:28	16	"readSeparateStripsIntoBuffer"
LEAF_NODE	4924:28	4924:28	17	"readSeparateStripsIntoBuffer"
LEAF_NODE	4924:58	4924:58	15	,
ARGUMENT	4924:60	4924:60	15	"Unsupported bit depth: %d"
FIELD	4924:60	4924:60	16	"Unsupported bit depth: %d"
LEAF_NODE	4924:60	4924:60	17	"Unsupported bit depth: %d"
LEAF_NODE	4924:87	4924:87	15	,
ARGUMENT	4924:89	4924:89	15	bps
FIELD	4924:89	4924:89	16	bps
LEAF_NODE	4924:89	4924:89	17	bps
LEAF_NODE	4924:92	4924:92	15	)
LEAF_NODE	4924:93	4924:93	13	;
EXPR_STATEMENT	4925:18	4925:28	12	result = 0 ;
EXPR	4925:18	4925:18	13	result = 0
ASSIGN	4925:18	4925:27	14	result = 0
LVAL	4925:18	4925:18	15	result
FIELD	4925:18	4925:18	16	result
LEAF_NODE	4925:18	4925:18	17	result
ASSIGN_OP	4925:25	4925:25	15	=
LEAF_NODE	4925:25	4925:25	16	=
RVAL	4925:27	4925:27	15	0
FIELD	4925:27	4925:27	16	0
LEAF_NODE	4925:27	4925:27	17	0
LEAF_NODE	4925:28	4925:28	13	;
JUMP_STATEMENT	4926:18	4926:23	12	break DESTINATION ;
KEYWORD	4926:18	4926:18	13	break
LEAF_NODE	4926:18	4926:18	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4926:23	4926:23	13	;
LEAF_NODE	4927:8	4927:8	11	}
LEAF_NODE	4928:6	4928:6	8	}
SELECTION	4930:4	4931:6	6	
KEYWORD	4930:4	4930:4	7	if
LEAF_NODE	4930:4	4930:4	8	if
LEAF_NODE	4930:7	4930:7	7	(
CONDITION	4930:8	4930:8	7	( rows_processed + rps ) > length
EXPR	4930:8	4930:33	8	( rows_processed + rps ) > length
LEAF_NODE	4930:8	4930:8	9	(
FIELD	4930:9	4930:9	9	rows_processed
LEAF_NODE	4930:9	4930:9	10	rows_processed
LEAF_NODE	4930:24	4930:24	9	+
FIELD	4930:26	4930:26	9	rps
LEAF_NODE	4930:26	4930:26	10	rps
LEAF_NODE	4930:29	4930:29	9	)
REL_OPERATOR	4930:31	4930:31	9	>
LEAF_NODE	4930:31	4930:31	10	>
FIELD	4930:33	4930:33	9	length
LEAF_NODE	4930:33	4930:33	10	length
LEAF_NODE	4930:39	4930:39	7	)
STATEMENTS	4931:6	4934:6	7	
LEAF_NODE	4931:6	4931:6	8	{
STATEMENTS	4932:6	4933:6	8	
EXPR_STATEMENT	4932:6	4932:29	9	rows_processed = length ;
EXPR	4932:6	4932:6	10	rows_processed = length
ASSIGN	4932:6	4932:23	11	rows_processed = length
LVAL	4932:6	4932:6	12	rows_processed
FIELD	4932:6	4932:6	13	rows_processed
LEAF_NODE	4932:6	4932:6	14	rows_processed
ASSIGN_OP	4932:21	4932:21	12	=
LEAF_NODE	4932:21	4932:21	13	=
RVAL	4932:23	4932:23	12	length
FIELD	4932:23	4932:23	13	length
LEAF_NODE	4932:23	4932:23	14	length
LEAF_NODE	4932:29	4932:29	10	;
EXPR_STATEMENT	4933:6	4933:35	9	rps = length - rows_processed ;
EXPR	4933:6	4933:6	10	rps = length - rows_processed
ASSIGN	4933:6	4933:12	11	rps = length - rows_processed
LVAL	4933:6	4933:6	12	rps
FIELD	4933:6	4933:6	13	rps
LEAF_NODE	4933:6	4933:6	14	rps
ASSIGN_OP	4933:10	4933:10	12	=
LEAF_NODE	4933:10	4933:10	13	=
RVAL	4933:12	4933:21	12	length - rows_processed
FIELD	4933:12	4933:12	13	length
LEAF_NODE	4933:12	4933:12	14	length
LEAF_NODE	4933:19	4933:19	13	-
FIELD	4933:21	4933:21	13	rows_processed
LEAF_NODE	4933:21	4933:21	14	rows_processed
LEAF_NODE	4933:35	4933:35	10	;
LEAF_NODE	4934:6	4934:6	8	}
SELECTION	4935:4	4936:6	6	
KEYWORD	4935:4	4935:4	7	else
LEAF_NODE	4935:4	4935:4	8	else
STATEMENTS	4936:6	4936:6	7	
EXPR_STATEMENT	4936:6	4936:27	8	rows_processed += rps ;
EXPR	4936:6	4936:6	9	rows_processed += rps
ASSIGN	4936:6	4936:24	10	rows_processed += rps
LVAL	4936:6	4936:6	11	rows_processed
FIELD	4936:6	4936:6	12	rows_processed
LEAF_NODE	4936:6	4936:6	13	rows_processed
ASSIGN_OP	4936:21	4936:21	11	+=
LEAF_NODE	4936:21	4936:21	12	+=
RVAL	4936:24	4936:24	11	rps
FIELD	4936:24	4936:24	12	rps
LEAF_NODE	4936:24	4936:24	13	rps
LEAF_NODE	4936:27	4936:27	9	;
LEAF_NODE	4937:4	4937:4	5	}
ITERATION	4942:2	4943:4	3	
KEYWORD	4942:2	4942:2	4	for
LEAF_NODE	4942:2	4942:2	5	for
LEAF_NODE	4942:6	4942:6	4	(
FOR_INIT	4942:7	4942:12	4	s = 0 ;
EXPR	4942:7	4942:7	5	s = 0
ASSIGN	4942:7	4942:11	6	s = 0
LVAL	4942:7	4942:7	7	s
FIELD	4942:7	4942:7	8	s
LEAF_NODE	4942:7	4942:7	9	s
ASSIGN_OP	4942:9	4942:9	7	=
LEAF_NODE	4942:9	4942:9	8	=
RVAL	4942:11	4942:11	7	0
FIELD	4942:11	4942:11	8	0
LEAF_NODE	4942:11	4942:11	9	0
LEAF_NODE	4942:12	4942:12	5	;
CONDITION	4942:14	4942:14	4	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4942:14	4942:14	5	( s < spp ) && ( s < MAX_SAMPLES )
AND	4942:14	4942:27	6	( s < spp ) && ( s < MAX_SAMPLES )
EXPR	4942:14	4942:22	7	( s < spp )
LEAF_NODE	4942:14	4942:14	8	(
FIELD	4942:15	4942:15	8	s
LEAF_NODE	4942:15	4942:15	9	s
REL_OPERATOR	4942:17	4942:17	8	<
LEAF_NODE	4942:17	4942:17	9	<
FIELD	4942:19	4942:19	8	spp
LEAF_NODE	4942:19	4942:19	9	spp
LEAF_NODE	4942:22	4942:22	8	)
LEAF_NODE	4942:24	4942:24	7	&&
EXPR	4942:27	4942:43	7	( s < MAX_SAMPLES )
LEAF_NODE	4942:27	4942:27	8	(
FIELD	4942:28	4942:28	8	s
LEAF_NODE	4942:28	4942:28	9	s
REL_OPERATOR	4942:30	4942:30	8	<
LEAF_NODE	4942:30	4942:30	9	<
FIELD	4942:32	4942:32	8	MAX_SAMPLES
LEAF_NODE	4942:32	4942:32	9	MAX_SAMPLES
LEAF_NODE	4942:43	4942:43	8	)
LEAF_NODE	4942:44	4942:44	4	;
FOR_EXPR	4942:46	4942:46	4	s ++
EXPR	4942:46	4942:46	5	s ++
FIELD	4942:46	4942:47	6	s ++
LEAF_NODE	4942:46	4942:46	7	s
LEAF_NODE	4942:47	4942:47	7	++
LEAF_NODE	4942:49	4942:49	4	)
STATEMENTS	4943:4	4947:4	4	
LEAF_NODE	4943:4	4943:4	5	{
STATEMENTS	4944:4	4945:4	5	
EXPR_STATEMENT	4944:4	4944:22	6	buff = srcbuffs [ s ] ;
EXPR	4944:4	4944:4	7	buff = srcbuffs [ s ]
ASSIGN	4944:4	4944:11	8	buff = srcbuffs [ s ]
LVAL	4944:4	4944:4	9	buff
FIELD	4944:4	4944:4	10	buff
LEAF_NODE	4944:4	4944:4	11	buff
ASSIGN_OP	4944:9	4944:9	9	=
LEAF_NODE	4944:9	4944:9	10	=
RVAL	4944:11	4944:11	9	srcbuffs [ s ]
FIELD	4944:11	4944:21	10	srcbuffs [ s ]
LEAF_NODE	4944:11	4944:11	11	srcbuffs
LEAF_NODE	4944:19	4944:19	11	[
EXPR	4944:20	4944:20	11	s
FIELD	4944:20	4944:20	12	s
LEAF_NODE	4944:20	4944:20	13	s
LEAF_NODE	4944:21	4944:21	11	]
LEAF_NODE	4944:22	4944:22	7	;
SELECTION	4945:4	4946:6	6	
KEYWORD	4945:4	4945:4	7	if
LEAF_NODE	4945:4	4945:4	8	if
LEAF_NODE	4945:7	4945:7	7	(
CONDITION	4945:8	4945:8	7	buff != NULL
EXPR	4945:8	4945:16	8	buff != NULL
FIELD	4945:8	4945:8	9	buff
LEAF_NODE	4945:8	4945:8	10	buff
EQ_OPERATOR	4945:13	4945:13	9	!=
LEAF_NODE	4945:13	4945:13	10	!=
FIELD	4945:16	4945:16	9	NULL
LEAF_NODE	4945:16	4945:16	10	NULL
LEAF_NODE	4945:20	4945:20	7	)
STATEMENTS	4946:6	4946:6	7	
EXPR_STATEMENT	4946:6	4946:21	8	_TIFFfree ( buff ) ;
EXPR	4946:6	4946:6	9	_TIFFfree ( buff )
FUNCTION_CALL	4946:6	4946:20	10	_TIFFfree ( buff )
CALLEE	4946:6	4946:6	11	_TIFFfree
LEAF_NODE	4946:6	4946:6	12	_TIFFfree
LEAF_NODE	4946:15	4946:15	11	(
ARGUMENT	4946:16	4946:16	11	buff
FIELD	4946:16	4946:16	12	buff
LEAF_NODE	4946:16	4946:16	13	buff
LEAF_NODE	4946:20	4946:20	11	)
LEAF_NODE	4946:21	4946:21	9	;
LEAF_NODE	4947:4	4947:4	5	}
LEAF_NODE	4949:2	4949:2	3	return
LEAF_NODE	4949:9	4949:9	3	(
LEAF_NODE	4949:10	4949:10	3	result
LEAF_NODE	4949:16	4949:16	3	)
LEAF_NODE	4949:17	4949:17	3	;
LEAF_NODE	4950:2	4950:2	2	}
FUNCTION_DEF	4952:0	4974:2	1	
RETURN_TYPE	4952:0	4952:7	2	static int
LEAF_NODE	4952:0	4952:0	3	static
TYPE_NAME	4952:7	4952:7	3	int
LEAF_NODE	4952:7	4952:7	4	int
FUNCTION_NAME	4953:0	4953:0	2	get_page_geometry
LEAF_NODE	4953:0	4953:0	3	get_page_geometry
PARAMETER_LIST	4953:18	4953:51	2	( char * name , struct pagedef * page )
LEAF_NODE	4953:18	4953:18	3	(
PARAMETER_DECL	4953:19	4953:25	3	char * name
TYPE	4953:19	4953:24	4	char *
TYPE_NAME	4953:19	4953:19	5	char
LEAF_NODE	4953:19	4953:19	6	char
POINTER	4953:24	4953:24	5	*
LEAF_NODE	4953:24	4953:24	6	*
NAME	4953:25	4953:25	4	name
LEAF_NODE	4953:25	4953:25	5	name
LEAF_NODE	4953:29	4953:29	3	,
PARAMETER_DECL	4953:31	4953:47	3	struct pagedef * page
TYPE	4953:31	4953:46	4	struct pagedef *
TYPE_NAME	4953:31	4953:38	5	struct pagedef
LEAF_NODE	4953:31	4953:31	6	struct
LEAF_NODE	4953:38	4953:38	6	pagedef
POINTER	4953:46	4953:46	5	*
LEAF_NODE	4953:46	4953:46	6	*
NAME	4953:47	4953:47	4	page
LEAF_NODE	4953:47	4953:47	5	page
LEAF_NODE	4953:51	4953:51	3	)
LEAF_NODE	4954:4	4954:4	2	{
STATEMENTS	4955:4	4973:2	2	
SIMPLE_DECL	4955:4	4955:13	3	char * ptr ;
VAR_DECL	4955:4	4955:10	4	char * ptr
TYPE	4955:4	4955:9	5	char *
TYPE_NAME	4955:4	4955:4	6	char
LEAF_NODE	4955:4	4955:4	7	char
POINTER	4955:9	4955:9	6	*
LEAF_NODE	4955:9	4955:9	7	*
NAME	4955:10	4955:10	5	ptr
LEAF_NODE	4955:10	4955:10	6	ptr
LEAF_NODE	4955:13	4955:13	4	;
SIMPLE_DECL	4956:4	4956:9	3	int n ;
VAR_DECL	4956:4	4956:8	4	int n
TYPE	4956:4	4956:4	5	int
TYPE_NAME	4956:4	4956:4	6	int
LEAF_NODE	4956:4	4956:4	7	int
NAME	4956:8	4956:8	5	n
LEAF_NODE	4956:8	4956:8	6	n
LEAF_NODE	4956:9	4956:9	4	;
ITERATION	4958:4	4959:6	3	
KEYWORD	4958:4	4958:4	4	for
LEAF_NODE	4958:4	4958:4	5	for
LEAF_NODE	4958:8	4958:8	4	(
FOR_INIT	4958:9	4958:19	4	ptr = name ;
EXPR	4958:9	4958:9	5	ptr = name
ASSIGN	4958:9	4958:15	6	ptr = name
LVAL	4958:9	4958:9	7	ptr
FIELD	4958:9	4958:9	8	ptr
LEAF_NODE	4958:9	4958:9	9	ptr
ASSIGN_OP	4958:13	4958:13	7	=
LEAF_NODE	4958:13	4958:13	8	=
RVAL	4958:15	4958:15	7	name
FIELD	4958:15	4958:15	8	name
LEAF_NODE	4958:15	4958:15	9	name
LEAF_NODE	4958:19	4958:19	5	;
CONDITION	4958:21	4958:21	4	* ptr
EXPR	4958:21	4958:21	5	* ptr
UNARY_EXPR	4958:21	4958:22	6	* ptr
UNARY_OPERATOR	4958:21	4958:21	7	*
LEAF_NODE	4958:21	4958:21	8	*
FIELD	4958:22	4958:22	7	ptr
LEAF_NODE	4958:22	4958:22	8	ptr
LEAF_NODE	4958:25	4958:25	4	;
FOR_EXPR	4958:27	4958:27	4	ptr ++
EXPR	4958:27	4958:27	5	ptr ++
FIELD	4958:27	4958:30	6	ptr ++
LEAF_NODE	4958:27	4958:27	7	ptr
LEAF_NODE	4958:30	4958:30	7	++
LEAF_NODE	4958:32	4958:32	4	)
STATEMENTS	4959:6	4959:6	4	
EXPR_STATEMENT	4959:6	4959:37	5	* ptr = ( char ) tolower ( ( int ) * ptr ) ;
EXPR	4959:6	4959:6	6	* ptr = ( char ) tolower ( ( int ) * ptr )
ASSIGN	4959:6	4959:13	7	* ptr = ( char ) tolower ( ( int ) * ptr )
LVAL	4959:6	4959:6	8	* ptr
UNARY_EXPR	4959:6	4959:7	9	* ptr
UNARY_OPERATOR	4959:6	4959:6	10	*
LEAF_NODE	4959:6	4959:6	11	*
FIELD	4959:7	4959:7	10	ptr
LEAF_NODE	4959:7	4959:7	11	ptr
ASSIGN_OP	4959:11	4959:11	8	=
LEAF_NODE	4959:11	4959:11	9	=
RVAL	4959:13	4959:19	8	( char ) tolower ( ( int ) * ptr )
LEAF_NODE	4959:13	4959:13	9	(
TYPE_NAME	4959:14	4959:14	9	char
LEAF_NODE	4959:14	4959:14	10	char
LEAF_NODE	4959:18	4959:18	9	)
FUNCTION_CALL	4959:19	4959:36	9	tolower ( ( int ) * ptr )
CALLEE	4959:19	4959:19	10	tolower
LEAF_NODE	4959:19	4959:19	11	tolower
LEAF_NODE	4959:26	4959:26	10	(
ARGUMENT	4959:27	4959:32	10	( int ) * ptr
LEAF_NODE	4959:27	4959:27	11	(
TYPE_NAME	4959:28	4959:28	11	int
LEAF_NODE	4959:28	4959:28	12	int
LEAF_NODE	4959:31	4959:31	11	)
UNARY_EXPR	4959:32	4959:33	11	* ptr
UNARY_OPERATOR	4959:32	4959:32	12	*
LEAF_NODE	4959:32	4959:32	13	*
FIELD	4959:33	4959:33	12	ptr
LEAF_NODE	4959:33	4959:33	13	ptr
LEAF_NODE	4959:36	4959:36	10	)
LEAF_NODE	4959:37	4959:37	6	;
ITERATION	4961:4	4962:6	3	
KEYWORD	4961:4	4961:4	4	for
LEAF_NODE	4961:4	4961:4	5	for
LEAF_NODE	4961:8	4961:8	4	(
FOR_INIT	4961:9	4961:14	4	n = 0 ;
EXPR	4961:9	4961:9	5	n = 0
ASSIGN	4961:9	4961:13	6	n = 0
LVAL	4961:9	4961:9	7	n
FIELD	4961:9	4961:9	8	n
LEAF_NODE	4961:9	4961:9	9	n
ASSIGN_OP	4961:11	4961:11	7	=
LEAF_NODE	4961:11	4961:11	8	=
RVAL	4961:13	4961:13	7	0
FIELD	4961:13	4961:13	8	0
LEAF_NODE	4961:13	4961:13	9	0
LEAF_NODE	4961:14	4961:14	5	;
CONDITION	4961:16	4961:16	4	n < MAX_PAPERNAMES
EXPR	4961:16	4961:20	5	n < MAX_PAPERNAMES
FIELD	4961:16	4961:16	6	n
LEAF_NODE	4961:16	4961:16	7	n
REL_OPERATOR	4961:18	4961:18	6	<
LEAF_NODE	4961:18	4961:18	7	<
FIELD	4961:20	4961:20	6	MAX_PAPERNAMES
LEAF_NODE	4961:20	4961:20	7	MAX_PAPERNAMES
LEAF_NODE	4961:34	4961:34	4	;
FOR_EXPR	4961:36	4961:36	4	n ++
EXPR	4961:36	4961:36	5	n ++
FIELD	4961:36	4961:37	6	n ++
LEAF_NODE	4961:36	4961:36	7	n
LEAF_NODE	4961:37	4961:37	7	++
LEAF_NODE	4961:39	4961:39	4	)
STATEMENTS	4962:6	4971:6	4	
LEAF_NODE	4962:6	4962:6	5	{
STATEMENTS	4963:6	4963:6	5	
SELECTION	4963:6	4964:8	6	
KEYWORD	4963:6	4963:6	7	if
LEAF_NODE	4963:6	4963:6	8	if
LEAF_NODE	4963:9	4963:9	7	(
CONDITION	4963:10	4963:10	7	strcmp ( name , PaperTable [ n ] . name ) == 0
EXPR	4963:10	4963:46	8	strcmp ( name , PaperTable [ n ] . name ) == 0
FUNCTION_CALL	4963:10	4963:41	9	strcmp ( name , PaperTable [ n ] . name )
CALLEE	4963:10	4963:10	10	strcmp
LEAF_NODE	4963:10	4963:10	11	strcmp
LEAF_NODE	4963:16	4963:16	10	(
ARGUMENT	4963:17	4963:17	10	name
FIELD	4963:17	4963:17	11	name
LEAF_NODE	4963:17	4963:17	12	name
LEAF_NODE	4963:21	4963:21	10	,
ARGUMENT	4963:23	4963:23	10	PaperTable [ n ] . name
FIELD	4963:23	4963:37	11	PaperTable [ n ] . name
LEAF_NODE	4963:23	4963:23	12	PaperTable
LEAF_NODE	4963:33	4963:33	12	[
EXPR	4963:34	4963:34	12	n
FIELD	4963:34	4963:34	13	n
LEAF_NODE	4963:34	4963:34	14	n
LEAF_NODE	4963:35	4963:35	12	]
LEAF_NODE	4963:36	4963:36	12	.
LEAF_NODE	4963:37	4963:37	12	name
LEAF_NODE	4963:41	4963:41	10	)
EQ_OPERATOR	4963:43	4963:43	9	==
LEAF_NODE	4963:43	4963:43	10	==
FIELD	4963:46	4963:46	9	0
LEAF_NODE	4963:46	4963:46	10	0
LEAF_NODE	4963:47	4963:47	7	)
STATEMENTS	4964:8	4970:8	7	
LEAF_NODE	4964:8	4964:8	8	{
STATEMENTS	4965:1	4969:8	8	
EXPR_STATEMENT	4965:1	4965:34	9	page -> width = PaperTable [ n ] . width ;
EXPR	4965:1	4965:1	10	page -> width = PaperTable [ n ] . width
ASSIGN	4965:1	4965:15	11	page -> width = PaperTable [ n ] . width
LVAL	4965:1	4965:1	12	page -> width
FIELD	4965:1	4965:7	13	page -> width
LEAF_NODE	4965:1	4965:1	14	page
LEAF_NODE	4965:5	4965:5	14	->
LEAF_NODE	4965:7	4965:7	14	width
ASSIGN_OP	4965:13	4965:13	12	=
LEAF_NODE	4965:13	4965:13	13	=
RVAL	4965:15	4965:15	12	PaperTable [ n ] . width
FIELD	4965:15	4965:29	13	PaperTable [ n ] . width
LEAF_NODE	4965:15	4965:15	14	PaperTable
LEAF_NODE	4965:25	4965:25	14	[
EXPR	4965:26	4965:26	14	n
FIELD	4965:26	4965:26	15	n
LEAF_NODE	4965:26	4965:26	16	n
LEAF_NODE	4965:27	4965:27	14	]
LEAF_NODE	4965:28	4965:28	14	.
LEAF_NODE	4965:29	4965:29	14	width
LEAF_NODE	4965:34	4965:34	10	;
EXPR_STATEMENT	4966:1	4966:36	9	page -> length = PaperTable [ n ] . length ;
EXPR	4966:1	4966:1	10	page -> length = PaperTable [ n ] . length
ASSIGN	4966:1	4966:16	11	page -> length = PaperTable [ n ] . length
LVAL	4966:1	4966:1	12	page -> length
FIELD	4966:1	4966:7	13	page -> length
LEAF_NODE	4966:1	4966:1	14	page
LEAF_NODE	4966:5	4966:5	14	->
LEAF_NODE	4966:7	4966:7	14	length
ASSIGN_OP	4966:14	4966:14	12	=
LEAF_NODE	4966:14	4966:14	13	=
RVAL	4966:16	4966:16	12	PaperTable [ n ] . length
FIELD	4966:16	4966:30	13	PaperTable [ n ] . length
LEAF_NODE	4966:16	4966:16	14	PaperTable
LEAF_NODE	4966:26	4966:26	14	[
EXPR	4966:27	4966:27	14	n
FIELD	4966:27	4966:27	15	n
LEAF_NODE	4966:27	4966:27	16	n
LEAF_NODE	4966:28	4966:28	14	]
LEAF_NODE	4966:29	4966:29	14	.
LEAF_NODE	4966:30	4966:30	14	length
LEAF_NODE	4966:36	4966:36	10	;
EXPR_STATEMENT	4967:8	4967:52	9	strncpy ( page -> name , PaperTable [ n ] . name , 15 ) ;
EXPR	4967:8	4967:8	10	strncpy ( page -> name , PaperTable [ n ] . name , 15 )
FUNCTION_CALL	4967:8	4967:51	11	strncpy ( page -> name , PaperTable [ n ] . name , 15 )
CALLEE	4967:8	4967:8	12	strncpy
LEAF_NODE	4967:8	4967:8	13	strncpy
LEAF_NODE	4967:16	4967:16	12	(
ARGUMENT	4967:17	4967:17	12	page -> name
FIELD	4967:17	4967:23	13	page -> name
LEAF_NODE	4967:17	4967:17	14	page
LEAF_NODE	4967:21	4967:21	14	->
LEAF_NODE	4967:23	4967:23	14	name
LEAF_NODE	4967:27	4967:27	12	,
ARGUMENT	4967:29	4967:29	12	PaperTable [ n ] . name
FIELD	4967:29	4967:43	13	PaperTable [ n ] . name
LEAF_NODE	4967:29	4967:29	14	PaperTable
LEAF_NODE	4967:39	4967:39	14	[
EXPR	4967:40	4967:40	14	n
FIELD	4967:40	4967:40	15	n
LEAF_NODE	4967:40	4967:40	16	n
LEAF_NODE	4967:41	4967:41	14	]
LEAF_NODE	4967:42	4967:42	14	.
LEAF_NODE	4967:43	4967:43	14	name
LEAF_NODE	4967:47	4967:47	12	,
ARGUMENT	4967:49	4967:49	12	15
FIELD	4967:49	4967:49	13	15
LEAF_NODE	4967:49	4967:49	14	15
LEAF_NODE	4967:51	4967:51	12	)
LEAF_NODE	4967:52	4967:52	10	;
EXPR_STATEMENT	4968:8	4968:29	9	page -> name [ 15 ] = '\0' ;
EXPR	4968:8	4968:8	10	page -> name [ 15 ] = '\0'
ASSIGN	4968:8	4968:25	11	page -> name [ 15 ] = '\0'
LVAL	4968:8	4968:8	12	page -> name [ 15 ]
FIELD	4968:8	4968:21	13	page -> name [ 15 ]
LEAF_NODE	4968:8	4968:8	14	page
LEAF_NODE	4968:12	4968:12	14	->
LEAF_NODE	4968:14	4968:14	14	name
LEAF_NODE	4968:18	4968:18	14	[
EXPR	4968:19	4968:19	14	15
FIELD	4968:19	4968:19	15	15
LEAF_NODE	4968:19	4968:19	16	15
LEAF_NODE	4968:21	4968:21	14	]
ASSIGN_OP	4968:23	4968:23	12	=
LEAF_NODE	4968:23	4968:23	13	=
RVAL	4968:25	4968:25	12	'\0'
FIELD	4968:25	4968:25	13	'\0'
LEAF_NODE	4968:25	4968:25	14	'\0'
LEAF_NODE	4968:29	4968:29	10	;
JUMP_STATEMENT	4969:8	4969:18	9	return ( 0 ) ;
KEYWORD	4969:8	4969:8	10	return
LEAF_NODE	4969:8	4969:8	11	return
DESTINATION	4969:15	4969:15	10	( 0 )
EXPR	4969:15	4969:17	11	( 0 )
LEAF_NODE	4969:15	4969:15	12	(
FIELD	4969:16	4969:16	12	0
LEAF_NODE	4969:16	4969:16	13	0
LEAF_NODE	4969:17	4969:17	12	)
LEAF_NODE	4969:18	4969:18	10	;
LEAF_NODE	4970:8	4970:8	8	}
LEAF_NODE	4971:6	4971:6	5	}
JUMP_STATEMENT	4973:2	4973:12	3	return ( 1 ) ;
KEYWORD	4973:2	4973:2	4	return
LEAF_NODE	4973:2	4973:2	5	return
DESTINATION	4973:9	4973:9	4	( 1 )
EXPR	4973:9	4973:11	5	( 1 )
LEAF_NODE	4973:9	4973:9	6	(
FIELD	4973:10	4973:10	6	1
LEAF_NODE	4973:10	4973:10	7	1
LEAF_NODE	4973:11	4973:11	6	)
LEAF_NODE	4973:12	4973:12	4	;
LEAF_NODE	4974:2	4974:2	2	}
FUNCTION_DEF	4977:0	5012:3	1	
RETURN_TYPE	4977:0	4977:7	2	static void
LEAF_NODE	4977:0	4977:0	3	static
TYPE_NAME	4977:7	4977:7	3	void
LEAF_NODE	4977:7	4977:7	4	void
FUNCTION_NAME	4978:0	4978:0	2	initPageSetup
LEAF_NODE	4978:0	4978:0	3	initPageSetup
PARAMETER_LIST	4978:14	4979:42	2	( struct pagedef * page , struct pageseg * pagelist , struct buffinfo [ ] seg_buffs )
LEAF_NODE	4978:14	4978:14	3	(
PARAMETER_DECL	4978:15	4978:31	3	struct pagedef * page
TYPE	4978:15	4978:30	4	struct pagedef *
TYPE_NAME	4978:15	4978:22	5	struct pagedef
LEAF_NODE	4978:15	4978:15	6	struct
LEAF_NODE	4978:22	4978:22	6	pagedef
POINTER	4978:30	4978:30	5	*
LEAF_NODE	4978:30	4978:30	6	*
NAME	4978:31	4978:31	4	page
LEAF_NODE	4978:31	4978:31	5	page
LEAF_NODE	4978:35	4978:35	3	,
PARAMETER_DECL	4978:37	4978:53	3	struct pageseg * pagelist
TYPE	4978:37	4978:52	4	struct pageseg *
TYPE_NAME	4978:37	4978:44	5	struct pageseg
LEAF_NODE	4978:37	4978:37	6	struct
LEAF_NODE	4978:44	4978:44	6	pageseg
POINTER	4978:52	4978:52	5	*
LEAF_NODE	4978:52	4978:52	6	*
NAME	4978:53	4978:53	4	pagelist
LEAF_NODE	4978:53	4978:53	5	pagelist
LEAF_NODE	4978:61	4978:61	3	,
PARAMETER_DECL	4979:15	4979:31	3	struct buffinfo [ ] seg_buffs
TYPE	4979:15	4979:40	4	struct buffinfo [ ]
TYPE_NAME	4979:15	4979:22	5	struct buffinfo
LEAF_NODE	4979:15	4979:15	6	struct
LEAF_NODE	4979:22	4979:22	6	buffinfo
TYPE_SUFFIX	4979:40	4979:41	5	[ ]
LEAF_NODE	4979:40	4979:40	6	[
LEAF_NODE	4979:41	4979:41	6	]
NAME	4979:31	4979:31	4	seg_buffs
LEAF_NODE	4979:31	4979:31	5	seg_buffs
LEAF_NODE	4979:42	4979:42	3	)
LEAF_NODE	4980:3	4980:3	2	{
STATEMENTS	4981:3	5007:3	2	
SIMPLE_DECL	4981:3	4981:8	3	int i ;
VAR_DECL	4981:3	4981:7	4	int i
TYPE	4981:3	4981:3	5	int
TYPE_NAME	4981:3	4981:3	6	int
LEAF_NODE	4981:3	4981:3	7	int
NAME	4981:7	4981:7	5	i
LEAF_NODE	4981:7	4981:7	6	i
LEAF_NODE	4981:8	4981:8	4	;
EXPR_STATEMENT	4983:3	4983:26	3	strcpy ( page -> name , "" ) ;
EXPR	4983:3	4983:3	4	strcpy ( page -> name , "" )
FUNCTION_CALL	4983:3	4983:25	5	strcpy ( page -> name , "" )
CALLEE	4983:3	4983:3	6	strcpy
LEAF_NODE	4983:3	4983:3	7	strcpy
LEAF_NODE	4983:10	4983:10	6	(
ARGUMENT	4983:11	4983:11	6	page -> name
FIELD	4983:11	4983:17	7	page -> name
LEAF_NODE	4983:11	4983:11	8	page
LEAF_NODE	4983:15	4983:15	8	->
LEAF_NODE	4983:17	4983:17	8	name
LEAF_NODE	4983:21	4983:21	6	,
ARGUMENT	4983:23	4983:23	6	""
FIELD	4983:23	4983:23	7	""
LEAF_NODE	4983:23	4983:23	8	""
LEAF_NODE	4983:25	4983:25	6	)
LEAF_NODE	4983:26	4983:26	4	;
EXPR_STATEMENT	4984:3	4984:30	3	page -> mode = PAGE_MODE_NONE ;
EXPR	4984:3	4984:3	4	page -> mode = PAGE_MODE_NONE
ASSIGN	4984:3	4984:16	5	page -> mode = PAGE_MODE_NONE
LVAL	4984:3	4984:3	6	page -> mode
FIELD	4984:3	4984:9	7	page -> mode
LEAF_NODE	4984:3	4984:3	8	page
LEAF_NODE	4984:7	4984:7	8	->
LEAF_NODE	4984:9	4984:9	8	mode
ASSIGN_OP	4984:14	4984:14	6	=
LEAF_NODE	4984:14	4984:14	7	=
RVAL	4984:16	4984:16	6	PAGE_MODE_NONE
FIELD	4984:16	4984:16	7	PAGE_MODE_NONE
LEAF_NODE	4984:16	4984:16	8	PAGE_MODE_NONE
LEAF_NODE	4984:30	4984:30	4	;
EXPR_STATEMENT	4985:3	4985:32	3	page -> res_unit = RESUNIT_NONE ;
EXPR	4985:3	4985:3	4	page -> res_unit = RESUNIT_NONE
ASSIGN	4985:3	4985:20	5	page -> res_unit = RESUNIT_NONE
LVAL	4985:3	4985:3	6	page -> res_unit
FIELD	4985:3	4985:9	7	page -> res_unit
LEAF_NODE	4985:3	4985:3	8	page
LEAF_NODE	4985:7	4985:7	8	->
LEAF_NODE	4985:9	4985:9	8	res_unit
ASSIGN_OP	4985:18	4985:18	6	=
LEAF_NODE	4985:18	4985:18	7	=
RVAL	4985:20	4985:20	6	RESUNIT_NONE
FIELD	4985:20	4985:20	7	RESUNIT_NONE
LEAF_NODE	4985:20	4985:20	8	RESUNIT_NONE
LEAF_NODE	4985:32	4985:32	4	;
EXPR_STATEMENT	4986:3	4986:19	3	page -> hres = 0.0 ;
EXPR	4986:3	4986:3	4	page -> hres = 0.0
ASSIGN	4986:3	4986:16	5	page -> hres = 0.0
LVAL	4986:3	4986:3	6	page -> hres
FIELD	4986:3	4986:9	7	page -> hres
LEAF_NODE	4986:3	4986:3	8	page
LEAF_NODE	4986:7	4986:7	8	->
LEAF_NODE	4986:9	4986:9	8	hres
ASSIGN_OP	4986:14	4986:14	6	=
LEAF_NODE	4986:14	4986:14	7	=
RVAL	4986:16	4986:16	6	0.0
FIELD	4986:16	4986:16	7	0.0
LEAF_NODE	4986:16	4986:16	8	0.0
LEAF_NODE	4986:19	4986:19	4	;
EXPR_STATEMENT	4987:3	4987:19	3	page -> vres = 0.0 ;
EXPR	4987:3	4987:3	4	page -> vres = 0.0
ASSIGN	4987:3	4987:16	5	page -> vres = 0.0
LVAL	4987:3	4987:3	6	page -> vres
FIELD	4987:3	4987:9	7	page -> vres
LEAF_NODE	4987:3	4987:3	8	page
LEAF_NODE	4987:7	4987:7	8	->
LEAF_NODE	4987:9	4987:9	8	vres
ASSIGN_OP	4987:14	4987:14	6	=
LEAF_NODE	4987:14	4987:14	7	=
RVAL	4987:16	4987:16	6	0.0
FIELD	4987:16	4987:16	7	0.0
LEAF_NODE	4987:16	4987:16	8	0.0
LEAF_NODE	4987:19	4987:19	4	;
EXPR_STATEMENT	4988:3	4988:20	3	page -> width = 0.0 ;
EXPR	4988:3	4988:3	4	page -> width = 0.0
ASSIGN	4988:3	4988:17	5	page -> width = 0.0
LVAL	4988:3	4988:3	6	page -> width
FIELD	4988:3	4988:9	7	page -> width
LEAF_NODE	4988:3	4988:3	8	page
LEAF_NODE	4988:7	4988:7	8	->
LEAF_NODE	4988:9	4988:9	8	width
ASSIGN_OP	4988:15	4988:15	6	=
LEAF_NODE	4988:15	4988:15	7	=
RVAL	4988:17	4988:17	6	0.0
FIELD	4988:17	4988:17	7	0.0
LEAF_NODE	4988:17	4988:17	8	0.0
LEAF_NODE	4988:20	4988:20	4	;
EXPR_STATEMENT	4989:3	4989:21	3	page -> length = 0.0 ;
EXPR	4989:3	4989:3	4	page -> length = 0.0
ASSIGN	4989:3	4989:18	5	page -> length = 0.0
LVAL	4989:3	4989:3	6	page -> length
FIELD	4989:3	4989:9	7	page -> length
LEAF_NODE	4989:3	4989:3	8	page
LEAF_NODE	4989:7	4989:7	8	->
LEAF_NODE	4989:9	4989:9	8	length
ASSIGN_OP	4989:16	4989:16	6	=
LEAF_NODE	4989:16	4989:16	7	=
RVAL	4989:18	4989:18	6	0.0
FIELD	4989:18	4989:18	7	0.0
LEAF_NODE	4989:18	4989:18	8	0.0
LEAF_NODE	4989:21	4989:21	4	;
EXPR_STATEMENT	4990:3	4990:22	3	page -> hmargin = 0.0 ;
EXPR	4990:3	4990:3	4	page -> hmargin = 0.0
ASSIGN	4990:3	4990:19	5	page -> hmargin = 0.0
LVAL	4990:3	4990:3	6	page -> hmargin
FIELD	4990:3	4990:9	7	page -> hmargin
LEAF_NODE	4990:3	4990:3	8	page
LEAF_NODE	4990:7	4990:7	8	->
LEAF_NODE	4990:9	4990:9	8	hmargin
ASSIGN_OP	4990:17	4990:17	6	=
LEAF_NODE	4990:17	4990:17	7	=
RVAL	4990:19	4990:19	6	0.0
FIELD	4990:19	4990:19	7	0.0
LEAF_NODE	4990:19	4990:19	8	0.0
LEAF_NODE	4990:22	4990:22	4	;
EXPR_STATEMENT	4991:3	4991:22	3	page -> vmargin = 0.0 ;
EXPR	4991:3	4991:3	4	page -> vmargin = 0.0
ASSIGN	4991:3	4991:19	5	page -> vmargin = 0.0
LVAL	4991:3	4991:3	6	page -> vmargin
FIELD	4991:3	4991:9	7	page -> vmargin
LEAF_NODE	4991:3	4991:3	8	page
LEAF_NODE	4991:7	4991:7	8	->
LEAF_NODE	4991:9	4991:9	8	vmargin
ASSIGN_OP	4991:17	4991:17	6	=
LEAF_NODE	4991:17	4991:17	7	=
RVAL	4991:19	4991:19	6	0.0
FIELD	4991:19	4991:19	7	0.0
LEAF_NODE	4991:19	4991:19	8	0.0
LEAF_NODE	4991:22	4991:22	4	;
EXPR_STATEMENT	4992:3	4992:17	3	page -> rows = 0 ;
EXPR	4992:3	4992:3	4	page -> rows = 0
ASSIGN	4992:3	4992:16	5	page -> rows = 0
LVAL	4992:3	4992:3	6	page -> rows
FIELD	4992:3	4992:9	7	page -> rows
LEAF_NODE	4992:3	4992:3	8	page
LEAF_NODE	4992:7	4992:7	8	->
LEAF_NODE	4992:9	4992:9	8	rows
ASSIGN_OP	4992:14	4992:14	6	=
LEAF_NODE	4992:14	4992:14	7	=
RVAL	4992:16	4992:16	6	0
FIELD	4992:16	4992:16	7	0
LEAF_NODE	4992:16	4992:16	8	0
LEAF_NODE	4992:17	4992:17	4	;
EXPR_STATEMENT	4993:3	4993:17	3	page -> cols = 0 ;
EXPR	4993:3	4993:3	4	page -> cols = 0
ASSIGN	4993:3	4993:16	5	page -> cols = 0
LVAL	4993:3	4993:3	6	page -> cols
FIELD	4993:3	4993:9	7	page -> cols
LEAF_NODE	4993:3	4993:3	8	page
LEAF_NODE	4993:7	4993:7	8	->
LEAF_NODE	4993:9	4993:9	8	cols
ASSIGN_OP	4993:14	4993:14	6	=
LEAF_NODE	4993:14	4993:14	7	=
RVAL	4993:16	4993:16	6	0
FIELD	4993:16	4993:16	7	0
LEAF_NODE	4993:16	4993:16	8	0
LEAF_NODE	4993:17	4993:17	4	;
EXPR_STATEMENT	4994:3	4994:34	3	page -> orient = ORIENTATION_NONE ;
EXPR	4994:3	4994:3	4	page -> orient = ORIENTATION_NONE
ASSIGN	4994:3	4994:18	5	page -> orient = ORIENTATION_NONE
LVAL	4994:3	4994:3	6	page -> orient
FIELD	4994:3	4994:9	7	page -> orient
LEAF_NODE	4994:3	4994:3	8	page
LEAF_NODE	4994:7	4994:7	8	->
LEAF_NODE	4994:9	4994:9	8	orient
ASSIGN_OP	4994:16	4994:16	6	=
LEAF_NODE	4994:16	4994:16	7	=
RVAL	4994:18	4994:18	6	ORIENTATION_NONE
FIELD	4994:18	4994:18	7	ORIENTATION_NONE
LEAF_NODE	4994:18	4994:18	8	ORIENTATION_NONE
LEAF_NODE	4994:34	4994:34	4	;
ITERATION	4996:3	4997:5	3	
KEYWORD	4996:3	4996:3	4	for
LEAF_NODE	4996:3	4996:3	5	for
LEAF_NODE	4996:7	4996:7	4	(
FOR_INIT	4996:8	4996:13	4	i = 0 ;
EXPR	4996:8	4996:8	5	i = 0
ASSIGN	4996:8	4996:12	6	i = 0
LVAL	4996:8	4996:8	7	i
FIELD	4996:8	4996:8	8	i
LEAF_NODE	4996:8	4996:8	9	i
ASSIGN_OP	4996:10	4996:10	7	=
LEAF_NODE	4996:10	4996:10	8	=
RVAL	4996:12	4996:12	7	0
FIELD	4996:12	4996:12	8	0
LEAF_NODE	4996:12	4996:12	9	0
LEAF_NODE	4996:13	4996:13	5	;
CONDITION	4996:15	4996:15	4	i < MAX_SECTIONS
EXPR	4996:15	4996:19	5	i < MAX_SECTIONS
FIELD	4996:15	4996:15	6	i
LEAF_NODE	4996:15	4996:15	7	i
REL_OPERATOR	4996:17	4996:17	6	<
LEAF_NODE	4996:17	4996:17	7	<
FIELD	4996:19	4996:19	6	MAX_SECTIONS
LEAF_NODE	4996:19	4996:19	7	MAX_SECTIONS
LEAF_NODE	4996:31	4996:31	4	;
FOR_EXPR	4996:33	4996:33	4	i ++
EXPR	4996:33	4996:33	5	i ++
FIELD	4996:33	4996:34	6	i ++
LEAF_NODE	4996:33	4996:33	7	i
LEAF_NODE	4996:34	4996:34	7	++
LEAF_NODE	4996:36	4996:36	4	)
STATEMENTS	4997:5	5005:5	4	
LEAF_NODE	4997:5	4997:5	5	{
STATEMENTS	4998:5	5004:5	5	
EXPR_STATEMENT	4998:5	4998:31	6	pagelist [ i ] . x1 = ( uint32 ) 0 ;
EXPR	4998:5	4998:5	7	pagelist [ i ] . x1 = ( uint32 ) 0
ASSIGN	4998:5	4998:22	8	pagelist [ i ] . x1 = ( uint32 ) 0
LVAL	4998:5	4998:5	9	pagelist [ i ] . x1
FIELD	4998:5	4998:17	10	pagelist [ i ] . x1
LEAF_NODE	4998:5	4998:5	11	pagelist
LEAF_NODE	4998:13	4998:13	11	[
EXPR	4998:14	4998:14	11	i
FIELD	4998:14	4998:14	12	i
LEAF_NODE	4998:14	4998:14	13	i
LEAF_NODE	4998:15	4998:15	11	]
LEAF_NODE	4998:16	4998:16	11	.
LEAF_NODE	4998:17	4998:17	11	x1
ASSIGN_OP	4998:20	4998:20	9	=
LEAF_NODE	4998:20	4998:20	10	=
RVAL	4998:22	4998:30	9	( uint32 ) 0
LEAF_NODE	4998:22	4998:22	10	(
TYPE_NAME	4998:23	4998:23	10	uint32
LEAF_NODE	4998:23	4998:23	11	uint32
LEAF_NODE	4998:29	4998:29	10	)
FIELD	4998:30	4998:30	10	0
LEAF_NODE	4998:30	4998:30	11	0
LEAF_NODE	4998:31	4998:31	7	;
EXPR_STATEMENT	4999:5	4999:31	6	pagelist [ i ] . x2 = ( uint32 ) 0 ;
EXPR	4999:5	4999:5	7	pagelist [ i ] . x2 = ( uint32 ) 0
ASSIGN	4999:5	4999:22	8	pagelist [ i ] . x2 = ( uint32 ) 0
LVAL	4999:5	4999:5	9	pagelist [ i ] . x2
FIELD	4999:5	4999:17	10	pagelist [ i ] . x2
LEAF_NODE	4999:5	4999:5	11	pagelist
LEAF_NODE	4999:13	4999:13	11	[
EXPR	4999:14	4999:14	11	i
FIELD	4999:14	4999:14	12	i
LEAF_NODE	4999:14	4999:14	13	i
LEAF_NODE	4999:15	4999:15	11	]
LEAF_NODE	4999:16	4999:16	11	.
LEAF_NODE	4999:17	4999:17	11	x2
ASSIGN_OP	4999:20	4999:20	9	=
LEAF_NODE	4999:20	4999:20	10	=
RVAL	4999:22	4999:30	9	( uint32 ) 0
LEAF_NODE	4999:22	4999:22	10	(
TYPE_NAME	4999:23	4999:23	10	uint32
LEAF_NODE	4999:23	4999:23	11	uint32
LEAF_NODE	4999:29	4999:29	10	)
FIELD	4999:30	4999:30	10	0
LEAF_NODE	4999:30	4999:30	11	0
LEAF_NODE	4999:31	4999:31	7	;
EXPR_STATEMENT	5000:5	5000:31	6	pagelist [ i ] . y1 = ( uint32 ) 0 ;
EXPR	5000:5	5000:5	7	pagelist [ i ] . y1 = ( uint32 ) 0
ASSIGN	5000:5	5000:22	8	pagelist [ i ] . y1 = ( uint32 ) 0
LVAL	5000:5	5000:5	9	pagelist [ i ] . y1
FIELD	5000:5	5000:17	10	pagelist [ i ] . y1
LEAF_NODE	5000:5	5000:5	11	pagelist
LEAF_NODE	5000:13	5000:13	11	[
EXPR	5000:14	5000:14	11	i
FIELD	5000:14	5000:14	12	i
LEAF_NODE	5000:14	5000:14	13	i
LEAF_NODE	5000:15	5000:15	11	]
LEAF_NODE	5000:16	5000:16	11	.
LEAF_NODE	5000:17	5000:17	11	y1
ASSIGN_OP	5000:20	5000:20	9	=
LEAF_NODE	5000:20	5000:20	10	=
RVAL	5000:22	5000:30	9	( uint32 ) 0
LEAF_NODE	5000:22	5000:22	10	(
TYPE_NAME	5000:23	5000:23	10	uint32
LEAF_NODE	5000:23	5000:23	11	uint32
LEAF_NODE	5000:29	5000:29	10	)
FIELD	5000:30	5000:30	10	0
LEAF_NODE	5000:30	5000:30	11	0
LEAF_NODE	5000:31	5000:31	7	;
EXPR_STATEMENT	5001:5	5001:31	6	pagelist [ i ] . y2 = ( uint32 ) 0 ;
EXPR	5001:5	5001:5	7	pagelist [ i ] . y2 = ( uint32 ) 0
ASSIGN	5001:5	5001:22	8	pagelist [ i ] . y2 = ( uint32 ) 0
LVAL	5001:5	5001:5	9	pagelist [ i ] . y2
FIELD	5001:5	5001:17	10	pagelist [ i ] . y2
LEAF_NODE	5001:5	5001:5	11	pagelist
LEAF_NODE	5001:13	5001:13	11	[
EXPR	5001:14	5001:14	11	i
FIELD	5001:14	5001:14	12	i
LEAF_NODE	5001:14	5001:14	13	i
LEAF_NODE	5001:15	5001:15	11	]
LEAF_NODE	5001:16	5001:16	11	.
LEAF_NODE	5001:17	5001:17	11	y2
ASSIGN_OP	5001:20	5001:20	9	=
LEAF_NODE	5001:20	5001:20	10	=
RVAL	5001:22	5001:30	9	( uint32 ) 0
LEAF_NODE	5001:22	5001:22	10	(
TYPE_NAME	5001:23	5001:23	10	uint32
LEAF_NODE	5001:23	5001:23	11	uint32
LEAF_NODE	5001:29	5001:29	10	)
FIELD	5001:30	5001:30	10	0
LEAF_NODE	5001:30	5001:30	11	0
LEAF_NODE	5001:31	5001:31	7	;
EXPR_STATEMENT	5002:5	5002:37	6	pagelist [ i ] . buffsize = ( uint32 ) 0 ;
EXPR	5002:5	5002:5	7	pagelist [ i ] . buffsize = ( uint32 ) 0
ASSIGN	5002:5	5002:28	8	pagelist [ i ] . buffsize = ( uint32 ) 0
LVAL	5002:5	5002:5	9	pagelist [ i ] . buffsize
FIELD	5002:5	5002:17	10	pagelist [ i ] . buffsize
LEAF_NODE	5002:5	5002:5	11	pagelist
LEAF_NODE	5002:13	5002:13	11	[
EXPR	5002:14	5002:14	11	i
FIELD	5002:14	5002:14	12	i
LEAF_NODE	5002:14	5002:14	13	i
LEAF_NODE	5002:15	5002:15	11	]
LEAF_NODE	5002:16	5002:16	11	.
LEAF_NODE	5002:17	5002:17	11	buffsize
ASSIGN_OP	5002:26	5002:26	9	=
LEAF_NODE	5002:26	5002:26	10	=
RVAL	5002:28	5002:36	9	( uint32 ) 0
LEAF_NODE	5002:28	5002:28	10	(
TYPE_NAME	5002:29	5002:29	10	uint32
LEAF_NODE	5002:29	5002:29	11	uint32
LEAF_NODE	5002:35	5002:35	10	)
FIELD	5002:36	5002:36	10	0
LEAF_NODE	5002:36	5002:36	11	0
LEAF_NODE	5002:37	5002:37	7	;
EXPR_STATEMENT	5003:5	5003:29	6	pagelist [ i ] . position = 0 ;
EXPR	5003:5	5003:5	7	pagelist [ i ] . position = 0
ASSIGN	5003:5	5003:28	8	pagelist [ i ] . position = 0
LVAL	5003:5	5003:5	9	pagelist [ i ] . position
FIELD	5003:5	5003:17	10	pagelist [ i ] . position
LEAF_NODE	5003:5	5003:5	11	pagelist
LEAF_NODE	5003:13	5003:13	11	[
EXPR	5003:14	5003:14	11	i
FIELD	5003:14	5003:14	12	i
LEAF_NODE	5003:14	5003:14	13	i
LEAF_NODE	5003:15	5003:15	11	]
LEAF_NODE	5003:16	5003:16	11	.
LEAF_NODE	5003:17	5003:17	11	position
ASSIGN_OP	5003:26	5003:26	9	=
LEAF_NODE	5003:26	5003:26	10	=
RVAL	5003:28	5003:28	9	0
FIELD	5003:28	5003:28	10	0
LEAF_NODE	5003:28	5003:28	11	0
LEAF_NODE	5003:29	5003:29	7	;
EXPR_STATEMENT	5004:5	5004:26	6	pagelist [ i ] . total = 0 ;
EXPR	5004:5	5004:5	7	pagelist [ i ] . total = 0
ASSIGN	5004:5	5004:25	8	pagelist [ i ] . total = 0
LVAL	5004:5	5004:5	9	pagelist [ i ] . total
FIELD	5004:5	5004:17	10	pagelist [ i ] . total
LEAF_NODE	5004:5	5004:5	11	pagelist
LEAF_NODE	5004:13	5004:13	11	[
EXPR	5004:14	5004:14	11	i
FIELD	5004:14	5004:14	12	i
LEAF_NODE	5004:14	5004:14	13	i
LEAF_NODE	5004:15	5004:15	11	]
LEAF_NODE	5004:16	5004:16	11	.
LEAF_NODE	5004:17	5004:17	11	total
ASSIGN_OP	5004:23	5004:23	9	=
LEAF_NODE	5004:23	5004:23	10	=
RVAL	5004:25	5004:25	9	0
FIELD	5004:25	5004:25	10	0
LEAF_NODE	5004:25	5004:25	11	0
LEAF_NODE	5004:26	5004:26	7	;
LEAF_NODE	5005:5	5005:5	5	}
ITERATION	5007:3	5008:5	3	
KEYWORD	5007:3	5007:3	4	for
LEAF_NODE	5007:3	5007:3	5	for
LEAF_NODE	5007:7	5007:7	4	(
FOR_INIT	5007:8	5007:13	4	i = 0 ;
EXPR	5007:8	5007:8	5	i = 0
ASSIGN	5007:8	5007:12	6	i = 0
LVAL	5007:8	5007:8	7	i
FIELD	5007:8	5007:8	8	i
LEAF_NODE	5007:8	5007:8	9	i
ASSIGN_OP	5007:10	5007:10	7	=
LEAF_NODE	5007:10	5007:10	8	=
RVAL	5007:12	5007:12	7	0
FIELD	5007:12	5007:12	8	0
LEAF_NODE	5007:12	5007:12	9	0
LEAF_NODE	5007:13	5007:13	5	;
CONDITION	5007:15	5007:15	4	i < MAX_OUTBUFFS
EXPR	5007:15	5007:19	5	i < MAX_OUTBUFFS
FIELD	5007:15	5007:15	6	i
LEAF_NODE	5007:15	5007:15	7	i
REL_OPERATOR	5007:17	5007:17	6	<
LEAF_NODE	5007:17	5007:17	7	<
FIELD	5007:19	5007:19	6	MAX_OUTBUFFS
LEAF_NODE	5007:19	5007:19	7	MAX_OUTBUFFS
LEAF_NODE	5007:31	5007:31	4	;
FOR_EXPR	5007:33	5007:33	4	i ++
EXPR	5007:33	5007:33	5	i ++
FIELD	5007:33	5007:34	6	i ++
LEAF_NODE	5007:33	5007:33	7	i
LEAF_NODE	5007:34	5007:34	7	++
LEAF_NODE	5007:36	5007:36	4	)
STATEMENTS	5008:5	5011:5	4	
LEAF_NODE	5008:5	5008:5	5	{
STATEMENTS	5009:5	5010:5	5	
EXPR_STATEMENT	5009:5	5009:26	6	seg_buffs [ i ] . size = 0 ;
EXPR	5009:5	5009:5	7	seg_buffs [ i ] . size = 0
ASSIGN	5009:5	5009:25	8	seg_buffs [ i ] . size = 0
LVAL	5009:5	5009:5	9	seg_buffs [ i ] . size
FIELD	5009:5	5009:18	10	seg_buffs [ i ] . size
LEAF_NODE	5009:5	5009:5	11	seg_buffs
LEAF_NODE	5009:14	5009:14	11	[
EXPR	5009:15	5009:15	11	i
FIELD	5009:15	5009:15	12	i
LEAF_NODE	5009:15	5009:15	13	i
LEAF_NODE	5009:16	5009:16	11	]
LEAF_NODE	5009:17	5009:17	11	.
LEAF_NODE	5009:18	5009:18	11	size
ASSIGN_OP	5009:23	5009:23	9	=
LEAF_NODE	5009:23	5009:23	10	=
RVAL	5009:25	5009:25	9	0
FIELD	5009:25	5009:25	10	0
LEAF_NODE	5009:25	5009:25	11	0
LEAF_NODE	5009:26	5009:26	7	;
EXPR_STATEMENT	5010:5	5010:31	6	seg_buffs [ i ] . buffer = NULL ;
EXPR	5010:5	5010:5	7	seg_buffs [ i ] . buffer = NULL
ASSIGN	5010:5	5010:27	8	seg_buffs [ i ] . buffer = NULL
LVAL	5010:5	5010:5	9	seg_buffs [ i ] . buffer
FIELD	5010:5	5010:18	10	seg_buffs [ i ] . buffer
LEAF_NODE	5010:5	5010:5	11	seg_buffs
LEAF_NODE	5010:14	5010:14	11	[
EXPR	5010:15	5010:15	11	i
FIELD	5010:15	5010:15	12	i
LEAF_NODE	5010:15	5010:15	13	i
LEAF_NODE	5010:16	5010:16	11	]
LEAF_NODE	5010:17	5010:17	11	.
LEAF_NODE	5010:18	5010:18	11	buffer
ASSIGN_OP	5010:25	5010:25	9	=
LEAF_NODE	5010:25	5010:25	10	=
RVAL	5010:27	5010:27	9	NULL
FIELD	5010:27	5010:27	10	NULL
LEAF_NODE	5010:27	5010:27	11	NULL
LEAF_NODE	5010:31	5010:31	7	;
LEAF_NODE	5011:5	5011:5	5	}
LEAF_NODE	5012:3	5012:3	2	}
FUNCTION_DEF	5014:0	5029:2	1	
RETURN_TYPE	5014:0	5014:7	2	static void
LEAF_NODE	5014:0	5014:0	3	static
TYPE_NAME	5014:7	5014:7	3	void
LEAF_NODE	5014:7	5014:7	4	void
FUNCTION_NAME	5015:0	5015:0	2	initImageData
LEAF_NODE	5015:0	5015:0	3	initImageData
PARAMETER_LIST	5015:14	5015:39	2	( struct image_data * image )
LEAF_NODE	5015:14	5015:14	3	(
PARAMETER_DECL	5015:15	5015:34	3	struct image_data * image
TYPE	5015:15	5015:33	4	struct image_data *
TYPE_NAME	5015:15	5015:22	5	struct image_data
LEAF_NODE	5015:15	5015:15	6	struct
LEAF_NODE	5015:22	5015:22	6	image_data
POINTER	5015:33	5015:33	5	*
LEAF_NODE	5015:33	5015:33	6	*
NAME	5015:34	5015:34	4	image
LEAF_NODE	5015:34	5015:34	5	image
LEAF_NODE	5015:39	5015:39	3	)
LEAF_NODE	5016:2	5016:2	2	{
STATEMENTS	5017:2	5028:2	2	
EXPR_STATEMENT	5017:2	5017:19	3	image -> xres = 0.0 ;
EXPR	5017:2	5017:2	4	image -> xres = 0.0
ASSIGN	5017:2	5017:16	5	image -> xres = 0.0
LVAL	5017:2	5017:2	6	image -> xres
FIELD	5017:2	5017:9	7	image -> xres
LEAF_NODE	5017:2	5017:2	8	image
LEAF_NODE	5017:7	5017:7	8	->
LEAF_NODE	5017:9	5017:9	8	xres
ASSIGN_OP	5017:14	5017:14	6	=
LEAF_NODE	5017:14	5017:14	7	=
RVAL	5017:16	5017:16	6	0.0
FIELD	5017:16	5017:16	7	0.0
LEAF_NODE	5017:16	5017:16	8	0.0
LEAF_NODE	5017:19	5017:19	4	;
EXPR_STATEMENT	5018:2	5018:19	3	image -> yres = 0.0 ;
EXPR	5018:2	5018:2	4	image -> yres = 0.0
ASSIGN	5018:2	5018:16	5	image -> yres = 0.0
LVAL	5018:2	5018:2	6	image -> yres
FIELD	5018:2	5018:9	7	image -> yres
LEAF_NODE	5018:2	5018:2	8	image
LEAF_NODE	5018:7	5018:7	8	->
LEAF_NODE	5018:9	5018:9	8	yres
ASSIGN_OP	5018:14	5018:14	6	=
LEAF_NODE	5018:14	5018:14	7	=
RVAL	5018:16	5018:16	6	0.0
FIELD	5018:16	5018:16	7	0.0
LEAF_NODE	5018:16	5018:16	8	0.0
LEAF_NODE	5018:19	5018:19	4	;
EXPR_STATEMENT	5019:2	5019:18	3	image -> width = 0 ;
EXPR	5019:2	5019:2	4	image -> width = 0
ASSIGN	5019:2	5019:17	5	image -> width = 0
LVAL	5019:2	5019:2	6	image -> width
FIELD	5019:2	5019:9	7	image -> width
LEAF_NODE	5019:2	5019:2	8	image
LEAF_NODE	5019:7	5019:7	8	->
LEAF_NODE	5019:9	5019:9	8	width
ASSIGN_OP	5019:15	5019:15	6	=
LEAF_NODE	5019:15	5019:15	7	=
RVAL	5019:17	5019:17	6	0
FIELD	5019:17	5019:17	7	0
LEAF_NODE	5019:17	5019:17	8	0
LEAF_NODE	5019:18	5019:18	4	;
EXPR_STATEMENT	5020:2	5020:19	3	image -> length = 0 ;
EXPR	5020:2	5020:2	4	image -> length = 0
ASSIGN	5020:2	5020:18	5	image -> length = 0
LVAL	5020:2	5020:2	6	image -> length
FIELD	5020:2	5020:9	7	image -> length
LEAF_NODE	5020:2	5020:2	8	image
LEAF_NODE	5020:7	5020:7	8	->
LEAF_NODE	5020:9	5020:9	8	length
ASSIGN_OP	5020:16	5020:16	6	=
LEAF_NODE	5020:16	5020:16	7	=
RVAL	5020:18	5020:18	6	0
FIELD	5020:18	5020:18	7	0
LEAF_NODE	5020:18	5020:18	8	0
LEAF_NODE	5020:19	5020:19	4	;
EXPR_STATEMENT	5021:2	5021:32	3	image -> res_unit = RESUNIT_NONE ;
EXPR	5021:2	5021:2	4	image -> res_unit = RESUNIT_NONE
ASSIGN	5021:2	5021:20	5	image -> res_unit = RESUNIT_NONE
LVAL	5021:2	5021:2	6	image -> res_unit
FIELD	5021:2	5021:9	7	image -> res_unit
LEAF_NODE	5021:2	5021:2	8	image
LEAF_NODE	5021:7	5021:7	8	->
LEAF_NODE	5021:9	5021:9	8	res_unit
ASSIGN_OP	5021:18	5021:18	6	=
LEAF_NODE	5021:18	5021:18	7	=
RVAL	5021:20	5021:20	6	RESUNIT_NONE
FIELD	5021:20	5021:20	7	RESUNIT_NONE
LEAF_NODE	5021:20	5021:20	8	RESUNIT_NONE
LEAF_NODE	5021:32	5021:32	4	;
EXPR_STATEMENT	5022:2	5022:16	3	image -> bps = 0 ;
EXPR	5022:2	5022:2	4	image -> bps = 0
ASSIGN	5022:2	5022:15	5	image -> bps = 0
LVAL	5022:2	5022:2	6	image -> bps
FIELD	5022:2	5022:9	7	image -> bps
LEAF_NODE	5022:2	5022:2	8	image
LEAF_NODE	5022:7	5022:7	8	->
LEAF_NODE	5022:9	5022:9	8	bps
ASSIGN_OP	5022:13	5022:13	6	=
LEAF_NODE	5022:13	5022:13	7	=
RVAL	5022:15	5022:15	6	0
FIELD	5022:15	5022:15	7	0
LEAF_NODE	5022:15	5022:15	8	0
LEAF_NODE	5022:16	5022:16	4	;
EXPR_STATEMENT	5023:2	5023:16	3	image -> spp = 0 ;
EXPR	5023:2	5023:2	4	image -> spp = 0
ASSIGN	5023:2	5023:15	5	image -> spp = 0
LVAL	5023:2	5023:2	6	image -> spp
FIELD	5023:2	5023:9	7	image -> spp
LEAF_NODE	5023:2	5023:2	8	image
LEAF_NODE	5023:7	5023:7	8	->
LEAF_NODE	5023:9	5023:9	8	spp
ASSIGN_OP	5023:13	5023:13	6	=
LEAF_NODE	5023:13	5023:13	7	=
RVAL	5023:15	5023:15	6	0
FIELD	5023:15	5023:15	7	0
LEAF_NODE	5023:15	5023:15	8	0
LEAF_NODE	5023:16	5023:16	4	;
EXPR_STATEMENT	5024:2	5024:19	3	image -> planar = 0 ;
EXPR	5024:2	5024:2	4	image -> planar = 0
ASSIGN	5024:2	5024:18	5	image -> planar = 0
LVAL	5024:2	5024:2	6	image -> planar
FIELD	5024:2	5024:9	7	image -> planar
LEAF_NODE	5024:2	5024:2	8	image
LEAF_NODE	5024:7	5024:7	8	->
LEAF_NODE	5024:9	5024:9	8	planar
ASSIGN_OP	5024:16	5024:16	6	=
LEAF_NODE	5024:16	5024:16	7	=
RVAL	5024:18	5024:18	6	0
FIELD	5024:18	5024:18	7	0
LEAF_NODE	5024:18	5024:18	8	0
LEAF_NODE	5024:19	5024:19	4	;
EXPR_STATEMENT	5025:2	5025:24	3	image -> photometric = 0 ;
EXPR	5025:2	5025:2	4	image -> photometric = 0
ASSIGN	5025:2	5025:23	5	image -> photometric = 0
LVAL	5025:2	5025:2	6	image -> photometric
FIELD	5025:2	5025:9	7	image -> photometric
LEAF_NODE	5025:2	5025:2	8	image
LEAF_NODE	5025:7	5025:7	8	->
LEAF_NODE	5025:9	5025:9	8	photometric
ASSIGN_OP	5025:21	5025:21	6	=
LEAF_NODE	5025:21	5025:21	7	=
RVAL	5025:23	5025:23	6	0
FIELD	5025:23	5025:23	7	0
LEAF_NODE	5025:23	5025:23	8	0
LEAF_NODE	5025:24	5025:24	4	;
EXPR_STATEMENT	5026:2	5026:24	3	image -> orientation = 0 ;
EXPR	5026:2	5026:2	4	image -> orientation = 0
ASSIGN	5026:2	5026:23	5	image -> orientation = 0
LVAL	5026:2	5026:2	6	image -> orientation
FIELD	5026:2	5026:9	7	image -> orientation
LEAF_NODE	5026:2	5026:2	8	image
LEAF_NODE	5026:7	5026:7	8	->
LEAF_NODE	5026:9	5026:9	8	orientation
ASSIGN_OP	5026:21	5026:21	6	=
LEAF_NODE	5026:21	5026:21	7	=
RVAL	5026:23	5026:23	6	0
FIELD	5026:23	5026:23	7	0
LEAF_NODE	5026:23	5026:23	8	0
LEAF_NODE	5026:24	5026:24	4	;
EXPR_STATEMENT	5027:2	5027:39	3	image -> compression = COMPRESSION_NONE ;
EXPR	5027:2	5027:2	4	image -> compression = COMPRESSION_NONE
ASSIGN	5027:2	5027:23	5	image -> compression = COMPRESSION_NONE
LVAL	5027:2	5027:2	6	image -> compression
FIELD	5027:2	5027:9	7	image -> compression
LEAF_NODE	5027:2	5027:2	8	image
LEAF_NODE	5027:7	5027:7	8	->
LEAF_NODE	5027:9	5027:9	8	compression
ASSIGN_OP	5027:21	5027:21	6	=
LEAF_NODE	5027:21	5027:21	7	=
RVAL	5027:23	5027:23	6	COMPRESSION_NONE
FIELD	5027:23	5027:23	7	COMPRESSION_NONE
LEAF_NODE	5027:23	5027:23	8	COMPRESSION_NONE
LEAF_NODE	5027:39	5027:39	4	;
EXPR_STATEMENT	5028:2	5028:24	3	image -> adjustments = 0 ;
EXPR	5028:2	5028:2	4	image -> adjustments = 0
ASSIGN	5028:2	5028:23	5	image -> adjustments = 0
LVAL	5028:2	5028:2	6	image -> adjustments
FIELD	5028:2	5028:9	7	image -> adjustments
LEAF_NODE	5028:2	5028:2	8	image
LEAF_NODE	5028:7	5028:7	8	->
LEAF_NODE	5028:9	5028:9	8	adjustments
ASSIGN_OP	5028:21	5028:21	6	=
LEAF_NODE	5028:21	5028:21	7	=
RVAL	5028:23	5028:23	6	0
FIELD	5028:23	5028:23	7	0
LEAF_NODE	5028:23	5028:23	8	0
LEAF_NODE	5028:24	5028:24	4	;
LEAF_NODE	5029:2	5029:2	2	}
FUNCTION_DEF	5031:0	5071:3	1	
RETURN_TYPE	5031:0	5031:7	2	static void
LEAF_NODE	5031:0	5031:0	3	static
TYPE_NAME	5031:7	5031:7	3	void
LEAF_NODE	5031:7	5031:7	4	void
FUNCTION_NAME	5032:0	5032:0	2	initCropMasks
LEAF_NODE	5032:0	5032:0	3	initCropMasks
PARAMETER_LIST	5032:14	5032:36	2	( struct crop_mask * cps )
LEAF_NODE	5032:14	5032:14	3	(
PARAMETER_DECL	5032:15	5032:33	3	struct crop_mask * cps
TYPE	5032:15	5032:32	4	struct crop_mask *
TYPE_NAME	5032:15	5032:22	5	struct crop_mask
LEAF_NODE	5032:15	5032:15	6	struct
LEAF_NODE	5032:22	5032:22	6	crop_mask
POINTER	5032:32	5032:32	5	*
LEAF_NODE	5032:32	5032:32	6	*
NAME	5032:33	5032:33	4	cps
LEAF_NODE	5032:33	5032:33	5	cps
LEAF_NODE	5032:36	5032:36	3	)
LEAF_NODE	5033:3	5033:3	2	{
STATEMENTS	5034:3	5070:3	2	
SIMPLE_DECL	5034:3	5034:8	3	int i ;
VAR_DECL	5034:3	5034:7	4	int i
TYPE	5034:3	5034:3	5	int
TYPE_NAME	5034:3	5034:3	6	int
LEAF_NODE	5034:3	5034:3	7	int
NAME	5034:7	5034:7	5	i
LEAF_NODE	5034:7	5034:7	6	i
LEAF_NODE	5034:8	5034:8	4	;
EXPR_STATEMENT	5036:3	5036:29	3	cps -> crop_mode = CROP_NONE ;
EXPR	5036:3	5036:3	4	cps -> crop_mode = CROP_NONE
ASSIGN	5036:3	5036:20	5	cps -> crop_mode = CROP_NONE
LVAL	5036:3	5036:3	6	cps -> crop_mode
FIELD	5036:3	5036:8	7	cps -> crop_mode
LEAF_NODE	5036:3	5036:3	8	cps
LEAF_NODE	5036:6	5036:6	8	->
LEAF_NODE	5036:8	5036:8	8	crop_mode
ASSIGN_OP	5036:18	5036:18	6	=
LEAF_NODE	5036:18	5036:18	7	=
RVAL	5036:20	5036:20	6	CROP_NONE
FIELD	5036:20	5036:20	7	CROP_NONE
LEAF_NODE	5036:20	5036:20	8	CROP_NONE
LEAF_NODE	5036:29	5036:29	4	;
EXPR_STATEMENT	5037:3	5037:32	3	cps -> res_unit = RESUNIT_NONE ;
EXPR	5037:3	5037:3	4	cps -> res_unit = RESUNIT_NONE
ASSIGN	5037:3	5037:20	5	cps -> res_unit = RESUNIT_NONE
LVAL	5037:3	5037:3	6	cps -> res_unit
FIELD	5037:3	5037:8	7	cps -> res_unit
LEAF_NODE	5037:3	5037:3	8	cps
LEAF_NODE	5037:6	5037:6	8	->
LEAF_NODE	5037:8	5037:8	8	res_unit
ASSIGN_OP	5037:18	5037:18	6	=
LEAF_NODE	5037:18	5037:18	7	=
RVAL	5037:20	5037:20	6	RESUNIT_NONE
FIELD	5037:20	5037:20	7	RESUNIT_NONE
LEAF_NODE	5037:20	5037:20	8	RESUNIT_NONE
LEAF_NODE	5037:32	5037:32	4	;
EXPR_STATEMENT	5038:3	5038:28	3	cps -> edge_ref = EDGE_TOP ;
EXPR	5038:3	5038:3	4	cps -> edge_ref = EDGE_TOP
ASSIGN	5038:3	5038:20	5	cps -> edge_ref = EDGE_TOP
LVAL	5038:3	5038:3	6	cps -> edge_ref
FIELD	5038:3	5038:8	7	cps -> edge_ref
LEAF_NODE	5038:3	5038:3	8	cps
LEAF_NODE	5038:6	5038:6	8	->
LEAF_NODE	5038:8	5038:8	8	edge_ref
ASSIGN_OP	5038:18	5038:18	6	=
LEAF_NODE	5038:18	5038:18	7	=
RVAL	5038:20	5038:20	6	EDGE_TOP
FIELD	5038:20	5038:20	7	EDGE_TOP
LEAF_NODE	5038:20	5038:20	8	EDGE_TOP
LEAF_NODE	5038:28	5038:28	4	;
EXPR_STATEMENT	5039:3	5039:17	3	cps -> width = 0 ;
EXPR	5039:3	5039:3	4	cps -> width = 0
ASSIGN	5039:3	5039:16	5	cps -> width = 0
LVAL	5039:3	5039:3	6	cps -> width
FIELD	5039:3	5039:8	7	cps -> width
LEAF_NODE	5039:3	5039:3	8	cps
LEAF_NODE	5039:6	5039:6	8	->
LEAF_NODE	5039:8	5039:8	8	width
ASSIGN_OP	5039:14	5039:14	6	=
LEAF_NODE	5039:14	5039:14	7	=
RVAL	5039:16	5039:16	6	0
FIELD	5039:16	5039:16	7	0
LEAF_NODE	5039:16	5039:16	8	0
LEAF_NODE	5039:17	5039:17	4	;
EXPR_STATEMENT	5040:3	5040:18	3	cps -> length = 0 ;
EXPR	5040:3	5040:3	4	cps -> length = 0
ASSIGN	5040:3	5040:17	5	cps -> length = 0
LVAL	5040:3	5040:3	6	cps -> length
FIELD	5040:3	5040:8	7	cps -> length
LEAF_NODE	5040:3	5040:3	8	cps
LEAF_NODE	5040:6	5040:6	8	->
LEAF_NODE	5040:8	5040:8	8	length
ASSIGN_OP	5040:15	5040:15	6	=
LEAF_NODE	5040:15	5040:15	7	=
RVAL	5040:17	5040:17	6	0
FIELD	5040:17	5040:17	7	0
LEAF_NODE	5040:17	5040:17	8	0
LEAF_NODE	5040:18	5040:18	4	;
ITERATION	5041:3	5042:5	3	
KEYWORD	5041:3	5041:3	4	for
LEAF_NODE	5041:3	5041:3	5	for
LEAF_NODE	5041:7	5041:7	4	(
FOR_INIT	5041:8	5041:13	4	i = 0 ;
EXPR	5041:8	5041:8	5	i = 0
ASSIGN	5041:8	5041:12	6	i = 0
LVAL	5041:8	5041:8	7	i
FIELD	5041:8	5041:8	8	i
LEAF_NODE	5041:8	5041:8	9	i
ASSIGN_OP	5041:10	5041:10	7	=
LEAF_NODE	5041:10	5041:10	8	=
RVAL	5041:12	5041:12	7	0
FIELD	5041:12	5041:12	8	0
LEAF_NODE	5041:12	5041:12	9	0
LEAF_NODE	5041:13	5041:13	5	;
CONDITION	5041:15	5041:15	4	i < 4
EXPR	5041:15	5041:19	5	i < 4
FIELD	5041:15	5041:15	6	i
LEAF_NODE	5041:15	5041:15	7	i
REL_OPERATOR	5041:17	5041:17	6	<
LEAF_NODE	5041:17	5041:17	7	<
FIELD	5041:19	5041:19	6	4
LEAF_NODE	5041:19	5041:19	7	4
LEAF_NODE	5041:20	5041:20	4	;
FOR_EXPR	5041:22	5041:22	4	i ++
EXPR	5041:22	5041:22	5	i ++
FIELD	5041:22	5041:23	6	i ++
LEAF_NODE	5041:22	5041:22	7	i
LEAF_NODE	5041:23	5041:23	7	++
LEAF_NODE	5041:25	5041:25	4	)
STATEMENTS	5042:5	5042:5	4	
EXPR_STATEMENT	5042:5	5042:26	5	cps -> margins [ i ] = 0.0 ;
EXPR	5042:5	5042:5	6	cps -> margins [ i ] = 0.0
ASSIGN	5042:5	5042:23	7	cps -> margins [ i ] = 0.0
LVAL	5042:5	5042:5	8	cps -> margins [ i ]
FIELD	5042:5	5042:19	9	cps -> margins [ i ]
LEAF_NODE	5042:5	5042:5	10	cps
LEAF_NODE	5042:8	5042:8	10	->
LEAF_NODE	5042:10	5042:10	10	margins
LEAF_NODE	5042:17	5042:17	10	[
EXPR	5042:18	5042:18	10	i
FIELD	5042:18	5042:18	11	i
LEAF_NODE	5042:18	5042:18	12	i
LEAF_NODE	5042:19	5042:19	10	]
ASSIGN_OP	5042:21	5042:21	8	=
LEAF_NODE	5042:21	5042:21	9	=
RVAL	5042:23	5042:23	8	0.0
FIELD	5042:23	5042:23	9	0.0
LEAF_NODE	5042:23	5042:23	10	0.0
LEAF_NODE	5042:26	5042:26	6	;
EXPR_STATEMENT	5043:3	5043:29	3	cps -> bufftotal = ( uint32 ) 0 ;
EXPR	5043:3	5043:3	4	cps -> bufftotal = ( uint32 ) 0
ASSIGN	5043:3	5043:20	5	cps -> bufftotal = ( uint32 ) 0
LVAL	5043:3	5043:3	6	cps -> bufftotal
FIELD	5043:3	5043:8	7	cps -> bufftotal
LEAF_NODE	5043:3	5043:3	8	cps
LEAF_NODE	5043:6	5043:6	8	->
LEAF_NODE	5043:8	5043:8	8	bufftotal
ASSIGN_OP	5043:18	5043:18	6	=
LEAF_NODE	5043:18	5043:18	7	=
RVAL	5043:20	5043:28	6	( uint32 ) 0
LEAF_NODE	5043:20	5043:20	7	(
TYPE_NAME	5043:21	5043:21	7	uint32
LEAF_NODE	5043:21	5043:21	8	uint32
LEAF_NODE	5043:27	5043:27	7	)
FIELD	5043:28	5043:28	7	0
LEAF_NODE	5043:28	5043:28	8	0
LEAF_NODE	5043:29	5043:29	4	;
EXPR_STATEMENT	5044:3	5044:34	3	cps -> combined_width = ( uint32 ) 0 ;
EXPR	5044:3	5044:3	4	cps -> combined_width = ( uint32 ) 0
ASSIGN	5044:3	5044:25	5	cps -> combined_width = ( uint32 ) 0
LVAL	5044:3	5044:3	6	cps -> combined_width
FIELD	5044:3	5044:8	7	cps -> combined_width
LEAF_NODE	5044:3	5044:3	8	cps
LEAF_NODE	5044:6	5044:6	8	->
LEAF_NODE	5044:8	5044:8	8	combined_width
ASSIGN_OP	5044:23	5044:23	6	=
LEAF_NODE	5044:23	5044:23	7	=
RVAL	5044:25	5044:33	6	( uint32 ) 0
LEAF_NODE	5044:25	5044:25	7	(
TYPE_NAME	5044:26	5044:26	7	uint32
LEAF_NODE	5044:26	5044:26	8	uint32
LEAF_NODE	5044:32	5044:32	7	)
FIELD	5044:33	5044:33	7	0
LEAF_NODE	5044:33	5044:33	8	0
LEAF_NODE	5044:34	5044:34	4	;
EXPR_STATEMENT	5045:3	5045:35	3	cps -> combined_length = ( uint32 ) 0 ;
EXPR	5045:3	5045:3	4	cps -> combined_length = ( uint32 ) 0
ASSIGN	5045:3	5045:26	5	cps -> combined_length = ( uint32 ) 0
LVAL	5045:3	5045:3	6	cps -> combined_length
FIELD	5045:3	5045:8	7	cps -> combined_length
LEAF_NODE	5045:3	5045:3	8	cps
LEAF_NODE	5045:6	5045:6	8	->
LEAF_NODE	5045:8	5045:8	8	combined_length
ASSIGN_OP	5045:24	5045:24	6	=
LEAF_NODE	5045:24	5045:24	7	=
RVAL	5045:26	5045:34	6	( uint32 ) 0
LEAF_NODE	5045:26	5045:26	7	(
TYPE_NAME	5045:27	5045:27	7	uint32
LEAF_NODE	5045:27	5045:27	8	uint32
LEAF_NODE	5045:33	5045:33	7	)
FIELD	5045:34	5045:34	7	0
LEAF_NODE	5045:34	5045:34	8	0
LEAF_NODE	5045:35	5045:35	4	;
EXPR_STATEMENT	5046:3	5046:28	3	cps -> rotation = ( uint16 ) 0 ;
EXPR	5046:3	5046:3	4	cps -> rotation = ( uint16 ) 0
ASSIGN	5046:3	5046:19	5	cps -> rotation = ( uint16 ) 0
LVAL	5046:3	5046:3	6	cps -> rotation
FIELD	5046:3	5046:8	7	cps -> rotation
LEAF_NODE	5046:3	5046:3	8	cps
LEAF_NODE	5046:6	5046:6	8	->
LEAF_NODE	5046:8	5046:8	8	rotation
ASSIGN_OP	5046:17	5046:17	6	=
LEAF_NODE	5046:17	5046:17	7	=
RVAL	5046:19	5046:27	6	( uint16 ) 0
LEAF_NODE	5046:19	5046:19	7	(
TYPE_NAME	5046:20	5046:20	7	uint16
LEAF_NODE	5046:20	5046:20	8	uint16
LEAF_NODE	5046:26	5046:26	7	)
FIELD	5046:27	5046:27	7	0
LEAF_NODE	5046:27	5046:27	8	0
LEAF_NODE	5046:28	5046:28	4	;
EXPR_STATEMENT	5047:3	5047:41	3	cps -> photometric = INVERT_DATA_AND_TAG ;
EXPR	5047:3	5047:3	4	cps -> photometric = INVERT_DATA_AND_TAG
ASSIGN	5047:3	5047:22	5	cps -> photometric = INVERT_DATA_AND_TAG
LVAL	5047:3	5047:3	6	cps -> photometric
FIELD	5047:3	5047:8	7	cps -> photometric
LEAF_NODE	5047:3	5047:3	8	cps
LEAF_NODE	5047:6	5047:6	8	->
LEAF_NODE	5047:8	5047:8	8	photometric
ASSIGN_OP	5047:20	5047:20	6	=
LEAF_NODE	5047:20	5047:20	7	=
RVAL	5047:22	5047:22	6	INVERT_DATA_AND_TAG
FIELD	5047:22	5047:22	7	INVERT_DATA_AND_TAG
LEAF_NODE	5047:22	5047:22	8	INVERT_DATA_AND_TAG
LEAF_NODE	5047:41	5047:41	4	;
EXPR_STATEMENT	5048:3	5048:28	3	cps -> mirror = ( uint16 ) 0 ;
EXPR	5048:3	5048:3	4	cps -> mirror = ( uint16 ) 0
ASSIGN	5048:3	5048:19	5	cps -> mirror = ( uint16 ) 0
LVAL	5048:3	5048:3	6	cps -> mirror
FIELD	5048:3	5048:8	7	cps -> mirror
LEAF_NODE	5048:3	5048:3	8	cps
LEAF_NODE	5048:6	5048:6	8	->
LEAF_NODE	5048:8	5048:8	8	mirror
ASSIGN_OP	5048:17	5048:17	6	=
LEAF_NODE	5048:17	5048:17	7	=
RVAL	5048:19	5048:27	6	( uint16 ) 0
LEAF_NODE	5048:19	5048:19	7	(
TYPE_NAME	5048:20	5048:20	7	uint16
LEAF_NODE	5048:20	5048:20	8	uint16
LEAF_NODE	5048:26	5048:26	7	)
FIELD	5048:27	5048:27	7	0
LEAF_NODE	5048:27	5048:27	8	0
LEAF_NODE	5048:28	5048:28	4	;
EXPR_STATEMENT	5049:3	5049:28	3	cps -> invert = ( uint16 ) 0 ;
EXPR	5049:3	5049:3	4	cps -> invert = ( uint16 ) 0
ASSIGN	5049:3	5049:19	5	cps -> invert = ( uint16 ) 0
LVAL	5049:3	5049:3	6	cps -> invert
FIELD	5049:3	5049:8	7	cps -> invert
LEAF_NODE	5049:3	5049:3	8	cps
LEAF_NODE	5049:6	5049:6	8	->
LEAF_NODE	5049:8	5049:8	8	invert
ASSIGN_OP	5049:17	5049:17	6	=
LEAF_NODE	5049:17	5049:17	7	=
RVAL	5049:19	5049:27	6	( uint16 ) 0
LEAF_NODE	5049:19	5049:19	7	(
TYPE_NAME	5049:20	5049:20	7	uint16
LEAF_NODE	5049:20	5049:20	8	uint16
LEAF_NODE	5049:26	5049:26	7	)
FIELD	5049:27	5049:27	7	0
LEAF_NODE	5049:27	5049:27	8	0
LEAF_NODE	5049:28	5049:28	4	;
EXPR_STATEMENT	5050:3	5050:28	3	cps -> zones = ( uint32 ) 0 ;
EXPR	5050:3	5050:3	4	cps -> zones = ( uint32 ) 0
ASSIGN	5050:3	5050:19	5	cps -> zones = ( uint32 ) 0
LVAL	5050:3	5050:3	6	cps -> zones
FIELD	5050:3	5050:8	7	cps -> zones
LEAF_NODE	5050:3	5050:3	8	cps
LEAF_NODE	5050:6	5050:6	8	->
LEAF_NODE	5050:8	5050:8	8	zones
ASSIGN_OP	5050:17	5050:17	6	=
LEAF_NODE	5050:17	5050:17	7	=
RVAL	5050:19	5050:27	6	( uint32 ) 0
LEAF_NODE	5050:19	5050:19	7	(
TYPE_NAME	5050:20	5050:20	7	uint32
LEAF_NODE	5050:20	5050:20	8	uint32
LEAF_NODE	5050:26	5050:26	7	)
FIELD	5050:27	5050:27	7	0
LEAF_NODE	5050:27	5050:27	8	0
LEAF_NODE	5050:28	5050:28	4	;
EXPR_STATEMENT	5051:3	5051:28	3	cps -> regions = ( uint32 ) 0 ;
EXPR	5051:3	5051:3	4	cps -> regions = ( uint32 ) 0
ASSIGN	5051:3	5051:19	5	cps -> regions = ( uint32 ) 0
LVAL	5051:3	5051:3	6	cps -> regions
FIELD	5051:3	5051:8	7	cps -> regions
LEAF_NODE	5051:3	5051:3	8	cps
LEAF_NODE	5051:6	5051:6	8	->
LEAF_NODE	5051:8	5051:8	8	regions
ASSIGN_OP	5051:17	5051:17	6	=
LEAF_NODE	5051:17	5051:17	7	=
RVAL	5051:19	5051:27	6	( uint32 ) 0
LEAF_NODE	5051:19	5051:19	7	(
TYPE_NAME	5051:20	5051:20	7	uint32
LEAF_NODE	5051:20	5051:20	8	uint32
LEAF_NODE	5051:26	5051:26	7	)
FIELD	5051:27	5051:27	7	0
LEAF_NODE	5051:27	5051:27	8	0
LEAF_NODE	5051:28	5051:28	4	;
ITERATION	5052:3	5053:5	3	
KEYWORD	5052:3	5052:3	4	for
LEAF_NODE	5052:3	5052:3	5	for
LEAF_NODE	5052:7	5052:7	4	(
FOR_INIT	5052:8	5052:13	4	i = 0 ;
EXPR	5052:8	5052:8	5	i = 0
ASSIGN	5052:8	5052:12	6	i = 0
LVAL	5052:8	5052:8	7	i
FIELD	5052:8	5052:8	8	i
LEAF_NODE	5052:8	5052:8	9	i
ASSIGN_OP	5052:10	5052:10	7	=
LEAF_NODE	5052:10	5052:10	8	=
RVAL	5052:12	5052:12	7	0
FIELD	5052:12	5052:12	8	0
LEAF_NODE	5052:12	5052:12	9	0
LEAF_NODE	5052:13	5052:13	5	;
CONDITION	5052:15	5052:15	4	i < MAX_REGIONS
EXPR	5052:15	5052:19	5	i < MAX_REGIONS
FIELD	5052:15	5052:15	6	i
LEAF_NODE	5052:15	5052:15	7	i
REL_OPERATOR	5052:17	5052:17	6	<
LEAF_NODE	5052:17	5052:17	7	<
FIELD	5052:19	5052:19	6	MAX_REGIONS
LEAF_NODE	5052:19	5052:19	7	MAX_REGIONS
LEAF_NODE	5052:30	5052:30	4	;
FOR_EXPR	5052:32	5052:32	4	i ++
EXPR	5052:32	5052:32	5	i ++
FIELD	5052:32	5052:33	6	i ++
LEAF_NODE	5052:32	5052:32	7	i
LEAF_NODE	5052:33	5052:33	7	++
LEAF_NODE	5052:35	5052:35	4	)
STATEMENTS	5053:5	5068:5	4	
LEAF_NODE	5053:5	5053:5	5	{
STATEMENTS	5054:5	5067:5	5	
EXPR_STATEMENT	5054:5	5054:29	6	cps -> corners [ i ] . X1 = 0.0 ;
EXPR	5054:5	5054:5	7	cps -> corners [ i ] . X1 = 0.0
ASSIGN	5054:5	5054:26	8	cps -> corners [ i ] . X1 = 0.0
LVAL	5054:5	5054:5	9	cps -> corners [ i ] . X1
FIELD	5054:5	5054:21	10	cps -> corners [ i ] . X1
LEAF_NODE	5054:5	5054:5	11	cps
LEAF_NODE	5054:8	5054:8	11	->
LEAF_NODE	5054:10	5054:10	11	corners
LEAF_NODE	5054:17	5054:17	11	[
EXPR	5054:18	5054:18	11	i
FIELD	5054:18	5054:18	12	i
LEAF_NODE	5054:18	5054:18	13	i
LEAF_NODE	5054:19	5054:19	11	]
LEAF_NODE	5054:20	5054:20	11	.
LEAF_NODE	5054:21	5054:21	11	X1
ASSIGN_OP	5054:24	5054:24	9	=
LEAF_NODE	5054:24	5054:24	10	=
RVAL	5054:26	5054:26	9	0.0
FIELD	5054:26	5054:26	10	0.0
LEAF_NODE	5054:26	5054:26	11	0.0
LEAF_NODE	5054:29	5054:29	7	;
EXPR_STATEMENT	5055:5	5055:29	6	cps -> corners [ i ] . X2 = 0.0 ;
EXPR	5055:5	5055:5	7	cps -> corners [ i ] . X2 = 0.0
ASSIGN	5055:5	5055:26	8	cps -> corners [ i ] . X2 = 0.0
LVAL	5055:5	5055:5	9	cps -> corners [ i ] . X2
FIELD	5055:5	5055:21	10	cps -> corners [ i ] . X2
LEAF_NODE	5055:5	5055:5	11	cps
LEAF_NODE	5055:8	5055:8	11	->
LEAF_NODE	5055:10	5055:10	11	corners
LEAF_NODE	5055:17	5055:17	11	[
EXPR	5055:18	5055:18	11	i
FIELD	5055:18	5055:18	12	i
LEAF_NODE	5055:18	5055:18	13	i
LEAF_NODE	5055:19	5055:19	11	]
LEAF_NODE	5055:20	5055:20	11	.
LEAF_NODE	5055:21	5055:21	11	X2
ASSIGN_OP	5055:24	5055:24	9	=
LEAF_NODE	5055:24	5055:24	10	=
RVAL	5055:26	5055:26	9	0.0
FIELD	5055:26	5055:26	10	0.0
LEAF_NODE	5055:26	5055:26	11	0.0
LEAF_NODE	5055:29	5055:29	7	;
EXPR_STATEMENT	5056:5	5056:29	6	cps -> corners [ i ] . Y1 = 0.0 ;
EXPR	5056:5	5056:5	7	cps -> corners [ i ] . Y1 = 0.0
ASSIGN	5056:5	5056:26	8	cps -> corners [ i ] . Y1 = 0.0
LVAL	5056:5	5056:5	9	cps -> corners [ i ] . Y1
FIELD	5056:5	5056:21	10	cps -> corners [ i ] . Y1
LEAF_NODE	5056:5	5056:5	11	cps
LEAF_NODE	5056:8	5056:8	11	->
LEAF_NODE	5056:10	5056:10	11	corners
LEAF_NODE	5056:17	5056:17	11	[
EXPR	5056:18	5056:18	11	i
FIELD	5056:18	5056:18	12	i
LEAF_NODE	5056:18	5056:18	13	i
LEAF_NODE	5056:19	5056:19	11	]
LEAF_NODE	5056:20	5056:20	11	.
LEAF_NODE	5056:21	5056:21	11	Y1
ASSIGN_OP	5056:24	5056:24	9	=
LEAF_NODE	5056:24	5056:24	10	=
RVAL	5056:26	5056:26	9	0.0
FIELD	5056:26	5056:26	10	0.0
LEAF_NODE	5056:26	5056:26	11	0.0
LEAF_NODE	5056:29	5056:29	7	;
EXPR_STATEMENT	5057:5	5057:29	6	cps -> corners [ i ] . Y2 = 0.0 ;
EXPR	5057:5	5057:5	7	cps -> corners [ i ] . Y2 = 0.0
ASSIGN	5057:5	5057:26	8	cps -> corners [ i ] . Y2 = 0.0
LVAL	5057:5	5057:5	9	cps -> corners [ i ] . Y2
FIELD	5057:5	5057:21	10	cps -> corners [ i ] . Y2
LEAF_NODE	5057:5	5057:5	11	cps
LEAF_NODE	5057:8	5057:8	11	->
LEAF_NODE	5057:10	5057:10	11	corners
LEAF_NODE	5057:17	5057:17	11	[
EXPR	5057:18	5057:18	11	i
FIELD	5057:18	5057:18	12	i
LEAF_NODE	5057:18	5057:18	13	i
LEAF_NODE	5057:19	5057:19	11	]
LEAF_NODE	5057:20	5057:20	11	.
LEAF_NODE	5057:21	5057:21	11	Y2
ASSIGN_OP	5057:24	5057:24	9	=
LEAF_NODE	5057:24	5057:24	10	=
RVAL	5057:26	5057:26	9	0.0
FIELD	5057:26	5057:26	10	0.0
LEAF_NODE	5057:26	5057:26	11	0.0
LEAF_NODE	5057:29	5057:29	7	;
EXPR_STATEMENT	5058:5	5058:30	6	cps -> regionlist [ i ] . x1 = 0 ;
EXPR	5058:5	5058:5	7	cps -> regionlist [ i ] . x1 = 0
ASSIGN	5058:5	5058:29	8	cps -> regionlist [ i ] . x1 = 0
LVAL	5058:5	5058:5	9	cps -> regionlist [ i ] . x1
FIELD	5058:5	5058:24	10	cps -> regionlist [ i ] . x1
LEAF_NODE	5058:5	5058:5	11	cps
LEAF_NODE	5058:8	5058:8	11	->
LEAF_NODE	5058:10	5058:10	11	regionlist
LEAF_NODE	5058:20	5058:20	11	[
EXPR	5058:21	5058:21	11	i
FIELD	5058:21	5058:21	12	i
LEAF_NODE	5058:21	5058:21	13	i
LEAF_NODE	5058:22	5058:22	11	]
LEAF_NODE	5058:23	5058:23	11	.
LEAF_NODE	5058:24	5058:24	11	x1
ASSIGN_OP	5058:27	5058:27	9	=
LEAF_NODE	5058:27	5058:27	10	=
RVAL	5058:29	5058:29	9	0
FIELD	5058:29	5058:29	10	0
LEAF_NODE	5058:29	5058:29	11	0
LEAF_NODE	5058:30	5058:30	7	;
EXPR_STATEMENT	5059:5	5059:30	6	cps -> regionlist [ i ] . x2 = 0 ;
EXPR	5059:5	5059:5	7	cps -> regionlist [ i ] . x2 = 0
ASSIGN	5059:5	5059:29	8	cps -> regionlist [ i ] . x2 = 0
LVAL	5059:5	5059:5	9	cps -> regionlist [ i ] . x2
FIELD	5059:5	5059:24	10	cps -> regionlist [ i ] . x2
LEAF_NODE	5059:5	5059:5	11	cps
LEAF_NODE	5059:8	5059:8	11	->
LEAF_NODE	5059:10	5059:10	11	regionlist
LEAF_NODE	5059:20	5059:20	11	[
EXPR	5059:21	5059:21	11	i
FIELD	5059:21	5059:21	12	i
LEAF_NODE	5059:21	5059:21	13	i
LEAF_NODE	5059:22	5059:22	11	]
LEAF_NODE	5059:23	5059:23	11	.
LEAF_NODE	5059:24	5059:24	11	x2
ASSIGN_OP	5059:27	5059:27	9	=
LEAF_NODE	5059:27	5059:27	10	=
RVAL	5059:29	5059:29	9	0
FIELD	5059:29	5059:29	10	0
LEAF_NODE	5059:29	5059:29	11	0
LEAF_NODE	5059:30	5059:30	7	;
EXPR_STATEMENT	5060:5	5060:30	6	cps -> regionlist [ i ] . y1 = 0 ;
EXPR	5060:5	5060:5	7	cps -> regionlist [ i ] . y1 = 0
ASSIGN	5060:5	5060:29	8	cps -> regionlist [ i ] . y1 = 0
LVAL	5060:5	5060:5	9	cps -> regionlist [ i ] . y1
FIELD	5060:5	5060:24	10	cps -> regionlist [ i ] . y1
LEAF_NODE	5060:5	5060:5	11	cps
LEAF_NODE	5060:8	5060:8	11	->
LEAF_NODE	5060:10	5060:10	11	regionlist
LEAF_NODE	5060:20	5060:20	11	[
EXPR	5060:21	5060:21	11	i
FIELD	5060:21	5060:21	12	i
LEAF_NODE	5060:21	5060:21	13	i
LEAF_NODE	5060:22	5060:22	11	]
LEAF_NODE	5060:23	5060:23	11	.
LEAF_NODE	5060:24	5060:24	11	y1
ASSIGN_OP	5060:27	5060:27	9	=
LEAF_NODE	5060:27	5060:27	10	=
RVAL	5060:29	5060:29	9	0
FIELD	5060:29	5060:29	10	0
LEAF_NODE	5060:29	5060:29	11	0
LEAF_NODE	5060:30	5060:30	7	;
EXPR_STATEMENT	5061:5	5061:30	6	cps -> regionlist [ i ] . y2 = 0 ;
EXPR	5061:5	5061:5	7	cps -> regionlist [ i ] . y2 = 0
ASSIGN	5061:5	5061:29	8	cps -> regionlist [ i ] . y2 = 0
LVAL	5061:5	5061:5	9	cps -> regionlist [ i ] . y2
FIELD	5061:5	5061:24	10	cps -> regionlist [ i ] . y2
LEAF_NODE	5061:5	5061:5	11	cps
LEAF_NODE	5061:8	5061:8	11	->
LEAF_NODE	5061:10	5061:10	11	regionlist
LEAF_NODE	5061:20	5061:20	11	[
EXPR	5061:21	5061:21	11	i
FIELD	5061:21	5061:21	12	i
LEAF_NODE	5061:21	5061:21	13	i
LEAF_NODE	5061:22	5061:22	11	]
LEAF_NODE	5061:23	5061:23	11	.
LEAF_NODE	5061:24	5061:24	11	y2
ASSIGN_OP	5061:27	5061:27	9	=
LEAF_NODE	5061:27	5061:27	10	=
RVAL	5061:29	5061:29	9	0
FIELD	5061:29	5061:29	10	0
LEAF_NODE	5061:29	5061:29	11	0
LEAF_NODE	5061:30	5061:30	7	;
EXPR_STATEMENT	5062:5	5062:33	6	cps -> regionlist [ i ] . width = 0 ;
EXPR	5062:5	5062:5	7	cps -> regionlist [ i ] . width = 0
ASSIGN	5062:5	5062:32	8	cps -> regionlist [ i ] . width = 0
LVAL	5062:5	5062:5	9	cps -> regionlist [ i ] . width
FIELD	5062:5	5062:24	10	cps -> regionlist [ i ] . width
LEAF_NODE	5062:5	5062:5	11	cps
LEAF_NODE	5062:8	5062:8	11	->
LEAF_NODE	5062:10	5062:10	11	regionlist
LEAF_NODE	5062:20	5062:20	11	[
EXPR	5062:21	5062:21	11	i
FIELD	5062:21	5062:21	12	i
LEAF_NODE	5062:21	5062:21	13	i
LEAF_NODE	5062:22	5062:22	11	]
LEAF_NODE	5062:23	5062:23	11	.
LEAF_NODE	5062:24	5062:24	11	width
ASSIGN_OP	5062:30	5062:30	9	=
LEAF_NODE	5062:30	5062:30	10	=
RVAL	5062:32	5062:32	9	0
FIELD	5062:32	5062:32	10	0
LEAF_NODE	5062:32	5062:32	11	0
LEAF_NODE	5062:33	5062:33	7	;
EXPR_STATEMENT	5063:5	5063:34	6	cps -> regionlist [ i ] . length = 0 ;
EXPR	5063:5	5063:5	7	cps -> regionlist [ i ] . length = 0
ASSIGN	5063:5	5063:33	8	cps -> regionlist [ i ] . length = 0
LVAL	5063:5	5063:5	9	cps -> regionlist [ i ] . length
FIELD	5063:5	5063:24	10	cps -> regionlist [ i ] . length
LEAF_NODE	5063:5	5063:5	11	cps
LEAF_NODE	5063:8	5063:8	11	->
LEAF_NODE	5063:10	5063:10	11	regionlist
LEAF_NODE	5063:20	5063:20	11	[
EXPR	5063:21	5063:21	11	i
FIELD	5063:21	5063:21	12	i
LEAF_NODE	5063:21	5063:21	13	i
LEAF_NODE	5063:22	5063:22	11	]
LEAF_NODE	5063:23	5063:23	11	.
LEAF_NODE	5063:24	5063:24	11	length
ASSIGN_OP	5063:31	5063:31	9	=
LEAF_NODE	5063:31	5063:31	10	=
RVAL	5063:33	5063:33	9	0
FIELD	5063:33	5063:33	10	0
LEAF_NODE	5063:33	5063:33	11	0
LEAF_NODE	5063:34	5063:34	7	;
EXPR_STATEMENT	5064:5	5064:36	6	cps -> regionlist [ i ] . buffsize = 0 ;
EXPR	5064:5	5064:5	7	cps -> regionlist [ i ] . buffsize = 0
ASSIGN	5064:5	5064:35	8	cps -> regionlist [ i ] . buffsize = 0
LVAL	5064:5	5064:5	9	cps -> regionlist [ i ] . buffsize
FIELD	5064:5	5064:24	10	cps -> regionlist [ i ] . buffsize
LEAF_NODE	5064:5	5064:5	11	cps
LEAF_NODE	5064:8	5064:8	11	->
LEAF_NODE	5064:10	5064:10	11	regionlist
LEAF_NODE	5064:20	5064:20	11	[
EXPR	5064:21	5064:21	11	i
FIELD	5064:21	5064:21	12	i
LEAF_NODE	5064:21	5064:21	13	i
LEAF_NODE	5064:22	5064:22	11	]
LEAF_NODE	5064:23	5064:23	11	.
LEAF_NODE	5064:24	5064:24	11	buffsize
ASSIGN_OP	5064:33	5064:33	9	=
LEAF_NODE	5064:33	5064:33	10	=
RVAL	5064:35	5064:35	9	0
FIELD	5064:35	5064:35	10	0
LEAF_NODE	5064:35	5064:35	11	0
LEAF_NODE	5064:36	5064:36	7	;
EXPR_STATEMENT	5065:5	5065:38	6	cps -> regionlist [ i ] . buffptr = NULL ;
EXPR	5065:5	5065:5	7	cps -> regionlist [ i ] . buffptr = NULL
ASSIGN	5065:5	5065:34	8	cps -> regionlist [ i ] . buffptr = NULL
LVAL	5065:5	5065:5	9	cps -> regionlist [ i ] . buffptr
FIELD	5065:5	5065:24	10	cps -> regionlist [ i ] . buffptr
LEAF_NODE	5065:5	5065:5	11	cps
LEAF_NODE	5065:8	5065:8	11	->
LEAF_NODE	5065:10	5065:10	11	regionlist
LEAF_NODE	5065:20	5065:20	11	[
EXPR	5065:21	5065:21	11	i
FIELD	5065:21	5065:21	12	i
LEAF_NODE	5065:21	5065:21	13	i
LEAF_NODE	5065:22	5065:22	11	]
LEAF_NODE	5065:23	5065:23	11	.
LEAF_NODE	5065:24	5065:24	11	buffptr
ASSIGN_OP	5065:32	5065:32	9	=
LEAF_NODE	5065:32	5065:32	10	=
RVAL	5065:34	5065:34	9	NULL
FIELD	5065:34	5065:34	10	NULL
LEAF_NODE	5065:34	5065:34	11	NULL
LEAF_NODE	5065:38	5065:38	7	;
EXPR_STATEMENT	5066:5	5066:34	6	cps -> zonelist [ i ] . position = 0 ;
EXPR	5066:5	5066:5	7	cps -> zonelist [ i ] . position = 0
ASSIGN	5066:5	5066:33	8	cps -> zonelist [ i ] . position = 0
LVAL	5066:5	5066:5	9	cps -> zonelist [ i ] . position
FIELD	5066:5	5066:22	10	cps -> zonelist [ i ] . position
LEAF_NODE	5066:5	5066:5	11	cps
LEAF_NODE	5066:8	5066:8	11	->
LEAF_NODE	5066:10	5066:10	11	zonelist
LEAF_NODE	5066:18	5066:18	11	[
EXPR	5066:19	5066:19	11	i
FIELD	5066:19	5066:19	12	i
LEAF_NODE	5066:19	5066:19	13	i
LEAF_NODE	5066:20	5066:20	11	]
LEAF_NODE	5066:21	5066:21	11	.
LEAF_NODE	5066:22	5066:22	11	position
ASSIGN_OP	5066:31	5066:31	9	=
LEAF_NODE	5066:31	5066:31	10	=
RVAL	5066:33	5066:33	9	0
FIELD	5066:33	5066:33	10	0
LEAF_NODE	5066:33	5066:33	11	0
LEAF_NODE	5066:34	5066:34	7	;
EXPR_STATEMENT	5067:5	5067:31	6	cps -> zonelist [ i ] . total = 0 ;
EXPR	5067:5	5067:5	7	cps -> zonelist [ i ] . total = 0
ASSIGN	5067:5	5067:30	8	cps -> zonelist [ i ] . total = 0
LVAL	5067:5	5067:5	9	cps -> zonelist [ i ] . total
FIELD	5067:5	5067:22	10	cps -> zonelist [ i ] . total
LEAF_NODE	5067:5	5067:5	11	cps
LEAF_NODE	5067:8	5067:8	11	->
LEAF_NODE	5067:10	5067:10	11	zonelist
LEAF_NODE	5067:18	5067:18	11	[
EXPR	5067:19	5067:19	11	i
FIELD	5067:19	5067:19	12	i
LEAF_NODE	5067:19	5067:19	13	i
LEAF_NODE	5067:20	5067:20	11	]
LEAF_NODE	5067:21	5067:21	11	.
LEAF_NODE	5067:22	5067:22	11	total
ASSIGN_OP	5067:28	5067:28	9	=
LEAF_NODE	5067:28	5067:28	10	=
RVAL	5067:30	5067:30	9	0
FIELD	5067:30	5067:30	10	0
LEAF_NODE	5067:30	5067:30	11	0
LEAF_NODE	5067:31	5067:31	7	;
LEAF_NODE	5068:5	5068:5	5	}
EXPR_STATEMENT	5069:3	5069:37	3	cps -> exp_mode = ONE_FILE_COMPOSITE ;
EXPR	5069:3	5069:3	4	cps -> exp_mode = ONE_FILE_COMPOSITE
ASSIGN	5069:3	5069:19	5	cps -> exp_mode = ONE_FILE_COMPOSITE
LVAL	5069:3	5069:3	6	cps -> exp_mode
FIELD	5069:3	5069:8	7	cps -> exp_mode
LEAF_NODE	5069:3	5069:3	8	cps
LEAF_NODE	5069:6	5069:6	8	->
LEAF_NODE	5069:8	5069:8	8	exp_mode
ASSIGN_OP	5069:17	5069:17	6	=
LEAF_NODE	5069:17	5069:17	7	=
RVAL	5069:19	5069:19	6	ONE_FILE_COMPOSITE
FIELD	5069:19	5069:19	7	ONE_FILE_COMPOSITE
LEAF_NODE	5069:19	5069:19	8	ONE_FILE_COMPOSITE
LEAF_NODE	5069:37	5069:37	4	;
EXPR_STATEMENT	5070:3	5070:35	3	cps -> img_mode = COMPOSITE_IMAGES ;
EXPR	5070:3	5070:3	4	cps -> img_mode = COMPOSITE_IMAGES
ASSIGN	5070:3	5070:19	5	cps -> img_mode = COMPOSITE_IMAGES
LVAL	5070:3	5070:3	6	cps -> img_mode
FIELD	5070:3	5070:8	7	cps -> img_mode
LEAF_NODE	5070:3	5070:3	8	cps
LEAF_NODE	5070:6	5070:6	8	->
LEAF_NODE	5070:8	5070:8	8	img_mode
ASSIGN_OP	5070:17	5070:17	6	=
LEAF_NODE	5070:17	5070:17	7	=
RVAL	5070:19	5070:19	6	COMPOSITE_IMAGES
FIELD	5070:19	5070:19	7	COMPOSITE_IMAGES
LEAF_NODE	5070:19	5070:19	8	COMPOSITE_IMAGES
LEAF_NODE	5070:35	5070:35	4	;
LEAF_NODE	5071:3	5071:3	2	}
FUNCTION_DEF	5073:0	5083:2	1	
RETURN_TYPE	5073:0	5073:7	2	static void
LEAF_NODE	5073:0	5073:0	3	static
TYPE_NAME	5073:7	5073:7	3	void
LEAF_NODE	5073:7	5073:7	4	void
FUNCTION_NAME	5073:12	5073:12	2	initDumpOptions
LEAF_NODE	5073:12	5073:12	3	initDumpOptions
PARAMETER_LIST	5073:27	5073:50	2	( struct dump_opts * dump )
LEAF_NODE	5073:27	5073:27	3	(
PARAMETER_DECL	5073:28	5073:46	3	struct dump_opts * dump
TYPE	5073:28	5073:45	4	struct dump_opts *
TYPE_NAME	5073:28	5073:35	5	struct dump_opts
LEAF_NODE	5073:28	5073:28	6	struct
LEAF_NODE	5073:35	5073:35	6	dump_opts
POINTER	5073:45	5073:45	5	*
LEAF_NODE	5073:45	5073:45	6	*
NAME	5073:46	5073:46	4	dump
LEAF_NODE	5073:46	5073:46	5	dump
LEAF_NODE	5073:50	5073:50	3	)
LEAF_NODE	5074:2	5074:2	2	{
STATEMENTS	5075:2	5082:2	2	
EXPR_STATEMENT	5075:2	5075:18	3	dump -> debug = 0 ;
EXPR	5075:2	5075:2	4	dump -> debug = 0
ASSIGN	5075:2	5075:17	5	dump -> debug = 0
LVAL	5075:2	5075:2	6	dump -> debug
FIELD	5075:2	5075:8	7	dump -> debug
LEAF_NODE	5075:2	5075:2	8	dump
LEAF_NODE	5075:6	5075:6	8	->
LEAF_NODE	5075:8	5075:8	8	debug
ASSIGN_OP	5075:15	5075:15	6	=
LEAF_NODE	5075:15	5075:15	7	=
RVAL	5075:17	5075:17	6	0
FIELD	5075:17	5075:17	7	0
LEAF_NODE	5075:17	5075:17	8	0
LEAF_NODE	5075:18	5075:18	4	;
EXPR_STATEMENT	5076:2	5076:26	3	dump -> format = DUMP_NONE ;
EXPR	5076:2	5076:2	4	dump -> format = DUMP_NONE
ASSIGN	5076:2	5076:17	5	dump -> format = DUMP_NONE
LVAL	5076:2	5076:2	6	dump -> format
FIELD	5076:2	5076:8	7	dump -> format
LEAF_NODE	5076:2	5076:2	8	dump
LEAF_NODE	5076:6	5076:6	8	->
LEAF_NODE	5076:8	5076:8	8	format
ASSIGN_OP	5076:15	5076:15	6	=
LEAF_NODE	5076:15	5076:15	7	=
RVAL	5076:17	5076:17	6	DUMP_NONE
FIELD	5076:17	5076:17	7	DUMP_NONE
LEAF_NODE	5076:17	5076:17	8	DUMP_NONE
LEAF_NODE	5076:26	5076:26	4	;
EXPR_STATEMENT	5077:2	5077:18	3	dump -> level = 1 ;
EXPR	5077:2	5077:2	4	dump -> level = 1
ASSIGN	5077:2	5077:17	5	dump -> level = 1
LVAL	5077:2	5077:2	6	dump -> level
FIELD	5077:2	5077:8	7	dump -> level
LEAF_NODE	5077:2	5077:2	8	dump
LEAF_NODE	5077:6	5077:6	8	->
LEAF_NODE	5077:8	5077:8	8	level
ASSIGN_OP	5077:15	5077:15	6	=
LEAF_NODE	5077:15	5077:15	7	=
RVAL	5077:17	5077:17	6	1
FIELD	5077:17	5077:17	7	1
LEAF_NODE	5077:17	5077:17	8	1
LEAF_NODE	5077:18	5077:18	4	;
EXPR_STATEMENT	5078:2	5078:27	3	sprintf ( dump -> mode , "w" ) ;
EXPR	5078:2	5078:2	4	sprintf ( dump -> mode , "w" )
FUNCTION_CALL	5078:2	5078:26	5	sprintf ( dump -> mode , "w" )
CALLEE	5078:2	5078:2	6	sprintf
LEAF_NODE	5078:2	5078:2	7	sprintf
LEAF_NODE	5078:10	5078:10	6	(
ARGUMENT	5078:11	5078:11	6	dump -> mode
FIELD	5078:11	5078:17	7	dump -> mode
LEAF_NODE	5078:11	5078:11	8	dump
LEAF_NODE	5078:15	5078:15	8	->
LEAF_NODE	5078:17	5078:17	8	mode
LEAF_NODE	5078:21	5078:21	6	,
ARGUMENT	5078:23	5078:23	6	"w"
FIELD	5078:23	5078:23	7	"w"
LEAF_NODE	5078:23	5078:23	8	"w"
LEAF_NODE	5078:26	5078:26	6	)
LEAF_NODE	5078:27	5078:27	4	;
EXPR_STATEMENT	5079:2	5079:47	3	memset ( dump -> infilename , '\0' , PATH_MAX + 1 ) ;
EXPR	5079:2	5079:2	4	memset ( dump -> infilename , '\0' , PATH_MAX + 1 )
FUNCTION_CALL	5079:2	5079:46	5	memset ( dump -> infilename , '\0' , PATH_MAX + 1 )
CALLEE	5079:2	5079:2	6	memset
LEAF_NODE	5079:2	5079:2	7	memset
LEAF_NODE	5079:9	5079:9	6	(
ARGUMENT	5079:10	5079:10	6	dump -> infilename
FIELD	5079:10	5079:16	7	dump -> infilename
LEAF_NODE	5079:10	5079:10	8	dump
LEAF_NODE	5079:14	5079:14	8	->
LEAF_NODE	5079:16	5079:16	8	infilename
LEAF_NODE	5079:26	5079:26	6	,
ARGUMENT	5079:28	5079:28	6	'\0'
FIELD	5079:28	5079:28	7	'\0'
LEAF_NODE	5079:28	5079:28	8	'\0'
LEAF_NODE	5079:32	5079:32	6	,
ARGUMENT	5079:34	5079:45	6	PATH_MAX + 1
FIELD	5079:34	5079:34	7	PATH_MAX
LEAF_NODE	5079:34	5079:34	8	PATH_MAX
LEAF_NODE	5079:43	5079:43	7	+
FIELD	5079:45	5079:45	7	1
LEAF_NODE	5079:45	5079:45	8	1
LEAF_NODE	5079:46	5079:46	6	)
LEAF_NODE	5079:47	5079:47	4	;
EXPR_STATEMENT	5080:2	5080:47	3	memset ( dump -> outfilename , '\0' , PATH_MAX + 1 ) ;
EXPR	5080:2	5080:2	4	memset ( dump -> outfilename , '\0' , PATH_MAX + 1 )
FUNCTION_CALL	5080:2	5080:46	5	memset ( dump -> outfilename , '\0' , PATH_MAX + 1 )
CALLEE	5080:2	5080:2	6	memset
LEAF_NODE	5080:2	5080:2	7	memset
LEAF_NODE	5080:9	5080:9	6	(
ARGUMENT	5080:10	5080:10	6	dump -> outfilename
FIELD	5080:10	5080:16	7	dump -> outfilename
LEAF_NODE	5080:10	5080:10	8	dump
LEAF_NODE	5080:14	5080:14	8	->
LEAF_NODE	5080:16	5080:16	8	outfilename
LEAF_NODE	5080:27	5080:27	6	,
ARGUMENT	5080:29	5080:29	6	'\0'
FIELD	5080:29	5080:29	7	'\0'
LEAF_NODE	5080:29	5080:29	8	'\0'
LEAF_NODE	5080:33	5080:33	6	,
ARGUMENT	5080:34	5080:45	6	PATH_MAX + 1
FIELD	5080:34	5080:34	7	PATH_MAX
LEAF_NODE	5080:34	5080:34	8	PATH_MAX
LEAF_NODE	5080:43	5080:43	7	+
FIELD	5080:45	5080:45	7	1
LEAF_NODE	5080:45	5080:45	8	1
LEAF_NODE	5080:46	5080:46	6	)
LEAF_NODE	5080:47	5080:47	4	;
EXPR_STATEMENT	5081:2	5081:21	3	dump -> infile = NULL ;
EXPR	5081:2	5081:2	4	dump -> infile = NULL
ASSIGN	5081:2	5081:17	5	dump -> infile = NULL
LVAL	5081:2	5081:2	6	dump -> infile
FIELD	5081:2	5081:8	7	dump -> infile
LEAF_NODE	5081:2	5081:2	8	dump
LEAF_NODE	5081:6	5081:6	8	->
LEAF_NODE	5081:8	5081:8	8	infile
ASSIGN_OP	5081:15	5081:15	6	=
LEAF_NODE	5081:15	5081:15	7	=
RVAL	5081:17	5081:17	6	NULL
FIELD	5081:17	5081:17	7	NULL
LEAF_NODE	5081:17	5081:17	8	NULL
LEAF_NODE	5081:21	5081:21	4	;
EXPR_STATEMENT	5082:2	5082:22	3	dump -> outfile = NULL ;
EXPR	5082:2	5082:2	4	dump -> outfile = NULL
ASSIGN	5082:2	5082:18	5	dump -> outfile = NULL
LVAL	5082:2	5082:2	6	dump -> outfile
FIELD	5082:2	5082:8	7	dump -> outfile
LEAF_NODE	5082:2	5082:2	8	dump
LEAF_NODE	5082:6	5082:6	8	->
LEAF_NODE	5082:8	5082:8	8	outfile
ASSIGN_OP	5082:16	5082:16	6	=
LEAF_NODE	5082:16	5082:16	7	=
RVAL	5082:18	5082:18	6	NULL
FIELD	5082:18	5082:18	7	NULL
LEAF_NODE	5082:18	5082:18	8	NULL
LEAF_NODE	5082:22	5082:22	4	;
LEAF_NODE	5083:2	5083:2	2	}
FUNCTION_DEF	5086:0	5360:2	1	
RETURN_TYPE	5086:0	5086:7	2	static int
LEAF_NODE	5086:0	5086:0	3	static
TYPE_NAME	5086:7	5086:7	3	int
LEAF_NODE	5086:7	5086:7	4	int
FUNCTION_NAME	5087:0	5087:0	2	computeInputPixelOffsets
LEAF_NODE	5087:0	5087:0	3	computeInputPixelOffsets
PARAMETER_LIST	5087:24	5088:43	2	( struct crop_mask * crop , struct image_data * image , struct offset * off )
LEAF_NODE	5087:24	5087:24	3	(
PARAMETER_DECL	5087:25	5087:43	3	struct crop_mask * crop
TYPE	5087:25	5087:42	4	struct crop_mask *
TYPE_NAME	5087:25	5087:32	5	struct crop_mask
LEAF_NODE	5087:25	5087:25	6	struct
LEAF_NODE	5087:32	5087:32	6	crop_mask
POINTER	5087:42	5087:42	5	*
LEAF_NODE	5087:42	5087:42	6	*
NAME	5087:43	5087:43	4	crop
LEAF_NODE	5087:43	5087:43	5	crop
LEAF_NODE	5087:47	5087:47	3	,
PARAMETER_DECL	5087:49	5087:68	3	struct image_data * image
TYPE	5087:49	5087:67	4	struct image_data *
TYPE_NAME	5087:49	5087:56	5	struct image_data
LEAF_NODE	5087:49	5087:49	6	struct
LEAF_NODE	5087:56	5087:56	6	image_data
POINTER	5087:67	5087:67	5	*
LEAF_NODE	5087:67	5087:67	6	*
NAME	5087:68	5087:68	4	image
LEAF_NODE	5087:68	5087:68	5	image
LEAF_NODE	5087:73	5087:73	3	,
PARAMETER_DECL	5088:25	5088:40	3	struct offset * off
TYPE	5088:25	5088:39	4	struct offset *
TYPE_NAME	5088:25	5088:32	5	struct offset
LEAF_NODE	5088:25	5088:25	6	struct
LEAF_NODE	5088:32	5088:32	6	offset
POINTER	5088:39	5088:39	5	*
LEAF_NODE	5088:39	5088:39	6	*
NAME	5088:40	5088:40	4	off
LEAF_NODE	5088:40	5088:40	5	off
LEAF_NODE	5088:43	5088:43	3	)
LEAF_NODE	5089:2	5089:2	2	{
STATEMENTS	5090:2	5359:2	2	
SIMPLE_DECL	5090:2	5090:14	3	double scale ;
VAR_DECL	5090:2	5090:9	4	double scale
TYPE	5090:2	5090:2	5	double
TYPE_NAME	5090:2	5090:2	6	double
LEAF_NODE	5090:2	5090:2	7	double
NAME	5090:9	5090:9	5	scale
LEAF_NODE	5090:9	5090:9	6	scale
LEAF_NODE	5090:14	5090:14	4	;
SIMPLE_DECL	5091:2	5091:18	3	float xres , float yres ;
INIT_DECL_LIST	5091:2	5091:2	4	float xres , float yres
VAR_DECL	5091:2	5091:8	5	float xres
TYPE	5091:2	5091:2	6	float
TYPE_NAME	5091:2	5091:2	7	float
LEAF_NODE	5091:2	5091:2	8	float
NAME	5091:8	5091:8	6	xres
LEAF_NODE	5091:8	5091:8	7	xres
LEAF_NODE	5091:12	5091:12	5	,
VAR_DECL	5091:2	5091:14	5	float yres
TYPE	5091:2	5091:2	6	float
TYPE_NAME	5091:2	5091:2	7	float
LEAF_NODE	5091:2	5091:2	8	float
NAME	5091:14	5091:14	6	yres
LEAF_NODE	5091:14	5091:14	7	yres
LEAF_NODE	5091:18	5091:18	4	;
SIMPLE_DECL	5094:2	5094:43	3	uint32 tmargin , uint32 bmargin , uint32 lmargin , uint32 rmargin ;
INIT_DECL_LIST	5094:2	5094:2	4	uint32 tmargin , uint32 bmargin , uint32 lmargin , uint32 rmargin
VAR_DECL	5094:2	5094:9	5	uint32 tmargin
TYPE	5094:2	5094:2	6	uint32
TYPE_NAME	5094:2	5094:2	7	uint32
LEAF_NODE	5094:2	5094:2	8	uint32
NAME	5094:9	5094:9	6	tmargin
LEAF_NODE	5094:9	5094:9	7	tmargin
LEAF_NODE	5094:16	5094:16	5	,
INIT_DECL_LIST	5094:2	5094:2	5	uint32 bmargin , uint32 lmargin , uint32 rmargin
VAR_DECL	5094:2	5094:18	6	uint32 bmargin
TYPE	5094:2	5094:2	7	uint32
TYPE_NAME	5094:2	5094:2	8	uint32
LEAF_NODE	5094:2	5094:2	9	uint32
NAME	5094:18	5094:18	7	bmargin
LEAF_NODE	5094:18	5094:18	8	bmargin
LEAF_NODE	5094:25	5094:25	6	,
INIT_DECL_LIST	5094:2	5094:2	6	uint32 lmargin , uint32 rmargin
VAR_DECL	5094:2	5094:27	7	uint32 lmargin
TYPE	5094:2	5094:2	8	uint32
TYPE_NAME	5094:2	5094:2	9	uint32
LEAF_NODE	5094:2	5094:2	10	uint32
NAME	5094:27	5094:27	8	lmargin
LEAF_NODE	5094:27	5094:27	9	lmargin
LEAF_NODE	5094:34	5094:34	7	,
VAR_DECL	5094:2	5094:36	7	uint32 rmargin
TYPE	5094:2	5094:2	8	uint32
TYPE_NAME	5094:2	5094:2	9	uint32
LEAF_NODE	5094:2	5094:2	10	uint32
NAME	5094:36	5094:36	8	rmargin
LEAF_NODE	5094:36	5094:36	9	rmargin
LEAF_NODE	5094:43	5094:43	4	;
SIMPLE_DECL	5095:2	5095:21	3	uint32 startx , uint32 endx ;
INIT_DECL_LIST	5095:2	5095:2	4	uint32 startx , uint32 endx
VAR_DECL	5095:2	5095:9	5	uint32 startx
TYPE	5095:2	5095:2	6	uint32
TYPE_NAME	5095:2	5095:2	7	uint32
LEAF_NODE	5095:2	5095:2	8	uint32
NAME	5095:9	5095:9	6	startx
LEAF_NODE	5095:9	5095:9	7	startx
LEAF_NODE	5095:15	5095:15	5	,
VAR_DECL	5095:2	5095:17	5	uint32 endx
TYPE	5095:2	5095:2	6	uint32
TYPE_NAME	5095:2	5095:2	7	uint32
LEAF_NODE	5095:2	5095:2	8	uint32
NAME	5095:17	5095:17	6	endx
LEAF_NODE	5095:17	5095:17	7	endx
LEAF_NODE	5095:21	5095:21	4	;
SIMPLE_DECL	5096:2	5096:21	3	uint32 starty , uint32 endy ;
INIT_DECL_LIST	5096:2	5096:2	4	uint32 starty , uint32 endy
VAR_DECL	5096:2	5096:9	5	uint32 starty
TYPE	5096:2	5096:2	6	uint32
TYPE_NAME	5096:2	5096:2	7	uint32
LEAF_NODE	5096:2	5096:2	8	uint32
NAME	5096:9	5096:9	6	starty
LEAF_NODE	5096:9	5096:9	7	starty
LEAF_NODE	5096:15	5096:15	5	,
VAR_DECL	5096:2	5096:17	5	uint32 endy
TYPE	5096:2	5096:2	6	uint32
TYPE_NAME	5096:2	5096:2	7	uint32
LEAF_NODE	5096:2	5096:2	8	uint32
NAME	5096:17	5096:17	6	endy
LEAF_NODE	5096:17	5096:17	7	endy
LEAF_NODE	5096:21	5096:21	4	;
SIMPLE_DECL	5097:2	5097:47	3	uint32 width , uint32 length , uint32 crop_width , uint32 crop_length ;
INIT_DECL_LIST	5097:2	5097:2	4	uint32 width , uint32 length , uint32 crop_width , uint32 crop_length
VAR_DECL	5097:2	5097:9	5	uint32 width
TYPE	5097:2	5097:2	6	uint32
TYPE_NAME	5097:2	5097:2	7	uint32
LEAF_NODE	5097:2	5097:2	8	uint32
NAME	5097:9	5097:9	6	width
LEAF_NODE	5097:9	5097:9	7	width
LEAF_NODE	5097:14	5097:14	5	,
INIT_DECL_LIST	5097:2	5097:2	5	uint32 length , uint32 crop_width , uint32 crop_length
VAR_DECL	5097:2	5097:16	6	uint32 length
TYPE	5097:2	5097:2	7	uint32
TYPE_NAME	5097:2	5097:2	8	uint32
LEAF_NODE	5097:2	5097:2	9	uint32
NAME	5097:16	5097:16	7	length
LEAF_NODE	5097:16	5097:16	8	length
LEAF_NODE	5097:22	5097:22	6	,
INIT_DECL_LIST	5097:2	5097:2	6	uint32 crop_width , uint32 crop_length
VAR_DECL	5097:2	5097:24	7	uint32 crop_width
TYPE	5097:2	5097:2	8	uint32
TYPE_NAME	5097:2	5097:2	9	uint32
LEAF_NODE	5097:2	5097:2	10	uint32
NAME	5097:24	5097:24	8	crop_width
LEAF_NODE	5097:24	5097:24	9	crop_width
LEAF_NODE	5097:34	5097:34	7	,
VAR_DECL	5097:2	5097:36	7	uint32 crop_length
TYPE	5097:2	5097:2	8	uint32
TYPE_NAME	5097:2	5097:2	9	uint32
LEAF_NODE	5097:2	5097:2	10	uint32
NAME	5097:36	5097:36	8	crop_length
LEAF_NODE	5097:36	5097:36	9	crop_length
LEAF_NODE	5097:47	5097:47	4	;
SIMPLE_DECL	5098:2	5098:60	3	uint32 i , uint32 max_width , uint32 max_length , uint32 zwidth , uint32 zlength , uint32 buffsize ;
INIT_DECL_LIST	5098:2	5098:2	4	uint32 i , uint32 max_width , uint32 max_length , uint32 zwidth , uint32 zlength , uint32 buffsize
VAR_DECL	5098:2	5098:9	5	uint32 i
TYPE	5098:2	5098:2	6	uint32
TYPE_NAME	5098:2	5098:2	7	uint32
LEAF_NODE	5098:2	5098:2	8	uint32
NAME	5098:9	5098:9	6	i
LEAF_NODE	5098:9	5098:9	7	i
LEAF_NODE	5098:10	5098:10	5	,
INIT_DECL_LIST	5098:2	5098:2	5	uint32 max_width , uint32 max_length , uint32 zwidth , uint32 zlength , uint32 buffsize
VAR_DECL	5098:2	5098:12	6	uint32 max_width
TYPE	5098:2	5098:2	7	uint32
TYPE_NAME	5098:2	5098:2	8	uint32
LEAF_NODE	5098:2	5098:2	9	uint32
NAME	5098:12	5098:12	7	max_width
LEAF_NODE	5098:12	5098:12	8	max_width
LEAF_NODE	5098:21	5098:21	6	,
INIT_DECL_LIST	5098:2	5098:2	6	uint32 max_length , uint32 zwidth , uint32 zlength , uint32 buffsize
VAR_DECL	5098:2	5098:23	7	uint32 max_length
TYPE	5098:2	5098:2	8	uint32
TYPE_NAME	5098:2	5098:2	9	uint32
LEAF_NODE	5098:2	5098:2	10	uint32
NAME	5098:23	5098:23	8	max_length
LEAF_NODE	5098:23	5098:23	9	max_length
LEAF_NODE	5098:33	5098:33	7	,
INIT_DECL_LIST	5098:2	5098:2	7	uint32 zwidth , uint32 zlength , uint32 buffsize
VAR_DECL	5098:2	5098:35	8	uint32 zwidth
TYPE	5098:2	5098:2	9	uint32
TYPE_NAME	5098:2	5098:2	10	uint32
LEAF_NODE	5098:2	5098:2	11	uint32
NAME	5098:35	5098:35	9	zwidth
LEAF_NODE	5098:35	5098:35	10	zwidth
LEAF_NODE	5098:41	5098:41	8	,
INIT_DECL_LIST	5098:2	5098:2	8	uint32 zlength , uint32 buffsize
VAR_DECL	5098:2	5098:43	9	uint32 zlength
TYPE	5098:2	5098:2	10	uint32
TYPE_NAME	5098:2	5098:2	11	uint32
LEAF_NODE	5098:2	5098:2	12	uint32
NAME	5098:43	5098:43	10	zlength
LEAF_NODE	5098:43	5098:43	11	zlength
LEAF_NODE	5098:50	5098:50	9	,
VAR_DECL	5098:2	5098:52	9	uint32 buffsize
TYPE	5098:2	5098:2	10	uint32
TYPE_NAME	5098:2	5098:2	11	uint32
LEAF_NODE	5098:2	5098:2	12	uint32
NAME	5098:52	5098:52	10	buffsize
LEAF_NODE	5098:52	5098:52	11	buffsize
LEAF_NODE	5098:60	5098:60	4	;
SIMPLE_DECL	5099:2	5099:23	3	uint32 x1 , uint32 x2 , uint32 y1 , uint32 y2 ;
INIT_DECL_LIST	5099:2	5099:2	4	uint32 x1 , uint32 x2 , uint32 y1 , uint32 y2
VAR_DECL	5099:2	5099:9	5	uint32 x1
TYPE	5099:2	5099:2	6	uint32
TYPE_NAME	5099:2	5099:2	7	uint32
LEAF_NODE	5099:2	5099:2	8	uint32
NAME	5099:9	5099:9	6	x1
LEAF_NODE	5099:9	5099:9	7	x1
LEAF_NODE	5099:11	5099:11	5	,
INIT_DECL_LIST	5099:2	5099:2	5	uint32 x2 , uint32 y1 , uint32 y2
VAR_DECL	5099:2	5099:13	6	uint32 x2
TYPE	5099:2	5099:2	7	uint32
TYPE_NAME	5099:2	5099:2	8	uint32
LEAF_NODE	5099:2	5099:2	9	uint32
NAME	5099:13	5099:13	7	x2
LEAF_NODE	5099:13	5099:13	8	x2
LEAF_NODE	5099:15	5099:15	6	,
INIT_DECL_LIST	5099:2	5099:2	6	uint32 y1 , uint32 y2
VAR_DECL	5099:2	5099:17	7	uint32 y1
TYPE	5099:2	5099:2	8	uint32
TYPE_NAME	5099:2	5099:2	9	uint32
LEAF_NODE	5099:2	5099:2	10	uint32
NAME	5099:17	5099:17	8	y1
LEAF_NODE	5099:17	5099:17	9	y1
LEAF_NODE	5099:19	5099:19	7	,
VAR_DECL	5099:2	5099:21	7	uint32 y2
TYPE	5099:2	5099:2	8	uint32
TYPE_NAME	5099:2	5099:2	9	uint32
LEAF_NODE	5099:2	5099:2	10	uint32
NAME	5099:21	5099:21	8	y2
LEAF_NODE	5099:21	5099:21	9	y2
LEAF_NODE	5099:23	5099:23	4	;
SELECTION	5101:2	5102:4	3	
KEYWORD	5101:2	5101:2	4	if
LEAF_NODE	5101:2	5101:2	5	if
LEAF_NODE	5101:5	5101:5	4	(
CONDITION	5101:6	5101:6	4	image -> res_unit != RESUNIT_INCH && image -> res_unit != RESUNIT_CENTIMETER
EXPR	5101:6	5101:6	5	image -> res_unit != RESUNIT_INCH && image -> res_unit != RESUNIT_CENTIMETER
AND	5101:6	5101:41	6	image -> res_unit != RESUNIT_INCH && image -> res_unit != RESUNIT_CENTIMETER
EXPR	5101:6	5101:25	7	image -> res_unit != RESUNIT_INCH
FIELD	5101:6	5101:13	8	image -> res_unit
LEAF_NODE	5101:6	5101:6	9	image
LEAF_NODE	5101:11	5101:11	9	->
LEAF_NODE	5101:13	5101:13	9	res_unit
EQ_OPERATOR	5101:22	5101:22	8	!=
LEAF_NODE	5101:22	5101:22	9	!=
FIELD	5101:25	5101:25	8	RESUNIT_INCH
LEAF_NODE	5101:25	5101:25	9	RESUNIT_INCH
LEAF_NODE	5101:38	5101:38	7	&&
EXPR	5101:41	5101:60	7	image -> res_unit != RESUNIT_CENTIMETER
FIELD	5101:41	5101:48	8	image -> res_unit
LEAF_NODE	5101:41	5101:41	9	image
LEAF_NODE	5101:46	5101:46	9	->
LEAF_NODE	5101:48	5101:48	9	res_unit
EQ_OPERATOR	5101:57	5101:57	8	!=
LEAF_NODE	5101:57	5101:57	9	!=
FIELD	5101:60	5101:60	8	RESUNIT_CENTIMETER
LEAF_NODE	5101:60	5101:60	9	RESUNIT_CENTIMETER
LEAF_NODE	5101:78	5101:78	4	)
STATEMENTS	5102:4	5105:4	4	
LEAF_NODE	5102:4	5102:4	5	{
STATEMENTS	5103:4	5104:4	5	
EXPR_STATEMENT	5103:4	5103:14	6	xres = 1.0 ;
EXPR	5103:4	5103:4	7	xres = 1.0
ASSIGN	5103:4	5103:11	8	xres = 1.0
LVAL	5103:4	5103:4	9	xres
FIELD	5103:4	5103:4	10	xres
LEAF_NODE	5103:4	5103:4	11	xres
ASSIGN_OP	5103:9	5103:9	9	=
LEAF_NODE	5103:9	5103:9	10	=
RVAL	5103:11	5103:11	9	1.0
FIELD	5103:11	5103:11	10	1.0
LEAF_NODE	5103:11	5103:11	11	1.0
LEAF_NODE	5103:14	5103:14	7	;
EXPR_STATEMENT	5104:4	5104:14	6	yres = 1.0 ;
EXPR	5104:4	5104:4	7	yres = 1.0
ASSIGN	5104:4	5104:11	8	yres = 1.0
LVAL	5104:4	5104:4	9	yres
FIELD	5104:4	5104:4	10	yres
LEAF_NODE	5104:4	5104:4	11	yres
ASSIGN_OP	5104:9	5104:9	9	=
LEAF_NODE	5104:9	5104:9	10	=
RVAL	5104:11	5104:11	9	1.0
FIELD	5104:11	5104:11	10	1.0
LEAF_NODE	5104:11	5104:11	11	1.0
LEAF_NODE	5104:14	5104:14	7	;
LEAF_NODE	5105:4	5105:4	5	}
SELECTION	5106:2	5107:4	3	
KEYWORD	5106:2	5106:2	4	else
LEAF_NODE	5106:2	5106:2	5	else
STATEMENTS	5107:4	5119:4	4	
LEAF_NODE	5107:4	5107:4	5	{
STATEMENTS	5108:4	5118:4	5	
SELECTION	5108:4	5112:6	6	
KEYWORD	5108:4	5108:4	7	if
LEAF_NODE	5108:4	5108:4	8	if
LEAF_NODE	5108:7	5108:7	7	(
CONDITION	5108:8	5108:8	7	( ( image -> xres == 0 ) || ( image -> yres == 0 ) ) && ( crop -> res_unit != RESUNIT_NONE ) && ( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) )
EXPR	5108:8	5108:8	8	( ( image -> xres == 0 ) || ( image -> yres == 0 ) ) && ( crop -> res_unit != RESUNIT_NONE ) && ( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) )
AND	5108:8	5109:9	9	( ( image -> xres == 0 ) || ( image -> yres == 0 ) ) && ( crop -> res_unit != RESUNIT_NONE ) && ( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) )
EXPR	5108:8	5108:49	10	( ( image -> xres == 0 ) || ( image -> yres == 0 ) )
LEAF_NODE	5108:8	5108:8	11	(
OR	5108:9	5108:31	11	( image -> xres == 0 ) || ( image -> yres == 0 )
EXPR	5108:9	5108:26	12	( image -> xres == 0 )
LEAF_NODE	5108:9	5108:9	13	(
FIELD	5108:10	5108:17	13	image -> xres
LEAF_NODE	5108:10	5108:10	14	image
LEAF_NODE	5108:15	5108:15	14	->
LEAF_NODE	5108:17	5108:17	14	xres
EQ_OPERATOR	5108:22	5108:22	13	==
LEAF_NODE	5108:22	5108:22	14	==
FIELD	5108:25	5108:25	13	0
LEAF_NODE	5108:25	5108:25	14	0
LEAF_NODE	5108:26	5108:26	13	)
LEAF_NODE	5108:28	5108:28	12	||
EXPR	5108:31	5108:48	12	( image -> yres == 0 )
LEAF_NODE	5108:31	5108:31	13	(
FIELD	5108:32	5108:39	13	image -> yres
LEAF_NODE	5108:32	5108:32	14	image
LEAF_NODE	5108:37	5108:37	14	->
LEAF_NODE	5108:39	5108:39	14	yres
EQ_OPERATOR	5108:44	5108:44	13	==
LEAF_NODE	5108:44	5108:44	14	==
FIELD	5108:47	5108:47	13	0
LEAF_NODE	5108:47	5108:47	14	0
LEAF_NODE	5108:48	5108:48	13	)
LEAF_NODE	5108:49	5108:49	11	)
LEAF_NODE	5108:51	5108:51	10	&&
EXPR	5109:9	5109:9	10	( crop -> res_unit != RESUNIT_NONE ) && ( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) )
AND	5109:9	5110:1	11	( crop -> res_unit != RESUNIT_NONE ) && ( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) )
EXPR	5109:9	5109:40	12	( crop -> res_unit != RESUNIT_NONE )
LEAF_NODE	5109:9	5109:9	13	(
FIELD	5109:10	5109:16	13	crop -> res_unit
LEAF_NODE	5109:10	5109:10	14	crop
LEAF_NODE	5109:14	5109:14	14	->
LEAF_NODE	5109:16	5109:16	14	res_unit
EQ_OPERATOR	5109:25	5109:25	13	!=
LEAF_NODE	5109:25	5109:25	14	!=
FIELD	5109:28	5109:28	13	RESUNIT_NONE
LEAF_NODE	5109:28	5109:28	14	RESUNIT_NONE
LEAF_NODE	5109:40	5109:40	13	)
LEAF_NODE	5109:42	5109:42	12	&&
EXPR	5110:1	5111:69	12	( ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH ) )
LEAF_NODE	5110:1	5110:1	13	(
OR	5110:2	5110:38	13	( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
EXPR	5110:2	5110:33	14	( crop -> crop_mode & CROP_REGIONS )
LEAF_NODE	5110:2	5110:2	15	(
FIELD	5110:3	5110:9	15	crop -> crop_mode
LEAF_NODE	5110:3	5110:3	16	crop
LEAF_NODE	5110:7	5110:7	16	->
LEAF_NODE	5110:9	5110:9	16	crop_mode
LEAF_NODE	5110:19	5110:19	15	&
FIELD	5110:21	5110:21	15	CROP_REGIONS
LEAF_NODE	5110:21	5110:21	16	CROP_REGIONS
LEAF_NODE	5110:33	5110:33	15	)
LEAF_NODE	5110:35	5110:35	14	||
EXPR	5110:38	5110:38	14	( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
OR	5110:38	5111:3	15	( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
EXPR	5110:38	5110:69	16	( crop -> crop_mode & CROP_MARGINS )
LEAF_NODE	5110:38	5110:38	17	(
FIELD	5110:39	5110:45	17	crop -> crop_mode
LEAF_NODE	5110:39	5110:39	18	crop
LEAF_NODE	5110:43	5110:43	18	->
LEAF_NODE	5110:45	5110:45	18	crop_mode
LEAF_NODE	5110:55	5110:55	17	&
FIELD	5110:57	5110:57	17	CROP_MARGINS
LEAF_NODE	5110:57	5110:57	18	CROP_MARGINS
LEAF_NODE	5110:69	5110:69	17	)
LEAF_NODE	5110:71	5110:71	16	||
EXPR	5111:3	5111:3	16	( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
OR	5111:3	5111:39	17	( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
EXPR	5111:3	5111:33	18	( crop -> crop_mode & CROP_LENGTH )
LEAF_NODE	5111:3	5111:3	19	(
FIELD	5111:4	5111:10	19	crop -> crop_mode
LEAF_NODE	5111:4	5111:4	20	crop
LEAF_NODE	5111:8	5111:8	20	->
LEAF_NODE	5111:10	5111:10	20	crop_mode
LEAF_NODE	5111:20	5111:20	19	&
FIELD	5111:22	5111:22	19	CROP_LENGTH
LEAF_NODE	5111:22	5111:22	20	CROP_LENGTH
LEAF_NODE	5111:33	5111:33	19	)
LEAF_NODE	5111:36	5111:36	18	||
EXPR	5111:39	5111:68	18	( crop -> crop_mode & CROP_WIDTH )
LEAF_NODE	5111:39	5111:39	19	(
FIELD	5111:40	5111:46	19	crop -> crop_mode
LEAF_NODE	5111:40	5111:40	20	crop
LEAF_NODE	5111:44	5111:44	20	->
LEAF_NODE	5111:46	5111:46	20	crop_mode
LEAF_NODE	5111:56	5111:56	19	&
FIELD	5111:58	5111:58	19	CROP_WIDTH
LEAF_NODE	5111:58	5111:58	20	CROP_WIDTH
LEAF_NODE	5111:68	5111:68	19	)
LEAF_NODE	5111:69	5111:69	13	)
LEAF_NODE	5111:70	5111:70	7	)
STATEMENTS	5112:6	5116:6	7	
LEAF_NODE	5112:6	5112:6	8	{
STATEMENTS	5113:6	5115:6	8	
EXPR_STATEMENT	5113:6	5113:117	9	TIFFError ( "computeInputPixelOffsets" , "Cannot compute margins or fixed size sections without image resolution" ) ;
EXPR	5113:6	5113:6	10	TIFFError ( "computeInputPixelOffsets" , "Cannot compute margins or fixed size sections without image resolution" )
FUNCTION_CALL	5113:6	5113:116	11	TIFFError ( "computeInputPixelOffsets" , "Cannot compute margins or fixed size sections without image resolution" )
CALLEE	5113:6	5113:6	12	TIFFError
LEAF_NODE	5113:6	5113:6	13	TIFFError
LEAF_NODE	5113:15	5113:15	12	(
ARGUMENT	5113:16	5113:16	12	"computeInputPixelOffsets"
FIELD	5113:16	5113:16	13	"computeInputPixelOffsets"
LEAF_NODE	5113:16	5113:16	14	"computeInputPixelOffsets"
LEAF_NODE	5113:42	5113:42	12	,
ARGUMENT	5113:44	5113:44	12	"Cannot compute margins or fixed size sections without image resolution"
FIELD	5113:44	5113:44	13	"Cannot compute margins or fixed size sections without image resolution"
LEAF_NODE	5113:44	5113:44	14	"Cannot compute margins or fixed size sections without image resolution"
LEAF_NODE	5113:116	5113:116	12	)
LEAF_NODE	5113:117	5113:117	10	;
EXPR_STATEMENT	5114:6	5114:84	9	TIFFError ( "computeInputPixelOffsets" , "Specify units in pixels and try again" ) ;
EXPR	5114:6	5114:6	10	TIFFError ( "computeInputPixelOffsets" , "Specify units in pixels and try again" )
FUNCTION_CALL	5114:6	5114:83	11	TIFFError ( "computeInputPixelOffsets" , "Specify units in pixels and try again" )
CALLEE	5114:6	5114:6	12	TIFFError
LEAF_NODE	5114:6	5114:6	13	TIFFError
LEAF_NODE	5114:15	5114:15	12	(
ARGUMENT	5114:16	5114:16	12	"computeInputPixelOffsets"
FIELD	5114:16	5114:16	13	"computeInputPixelOffsets"
LEAF_NODE	5114:16	5114:16	14	"computeInputPixelOffsets"
LEAF_NODE	5114:42	5114:42	12	,
ARGUMENT	5114:44	5114:44	12	"Specify units in pixels and try again"
FIELD	5114:44	5114:44	13	"Specify units in pixels and try again"
LEAF_NODE	5114:44	5114:44	14	"Specify units in pixels and try again"
LEAF_NODE	5114:83	5114:83	12	)
LEAF_NODE	5114:84	5114:84	10	;
JUMP_STATEMENT	5115:6	5115:17	9	return ( - 1 ) ;
KEYWORD	5115:6	5115:6	10	return
LEAF_NODE	5115:6	5115:6	11	return
DESTINATION	5115:13	5115:13	10	( - 1 )
EXPR	5115:13	5115:16	11	( - 1 )
LEAF_NODE	5115:13	5115:13	12	(
UNARY_EXPR	5115:14	5115:15	12	- 1
UNARY_OPERATOR	5115:14	5115:14	13	-
LEAF_NODE	5115:14	5115:14	14	-
FIELD	5115:15	5115:15	13	1
LEAF_NODE	5115:15	5115:15	14	1
LEAF_NODE	5115:16	5115:16	12	)
LEAF_NODE	5115:17	5115:17	10	;
LEAF_NODE	5116:6	5116:6	8	}
EXPR_STATEMENT	5117:4	5117:22	6	xres = image -> xres ;
EXPR	5117:4	5117:4	7	xres = image -> xres
ASSIGN	5117:4	5117:11	8	xres = image -> xres
LVAL	5117:4	5117:4	9	xres
FIELD	5117:4	5117:4	10	xres
LEAF_NODE	5117:4	5117:4	11	xres
ASSIGN_OP	5117:9	5117:9	9	=
LEAF_NODE	5117:9	5117:9	10	=
RVAL	5117:11	5117:11	9	image -> xres
FIELD	5117:11	5117:18	10	image -> xres
LEAF_NODE	5117:11	5117:11	11	image
LEAF_NODE	5117:16	5117:16	11	->
LEAF_NODE	5117:18	5117:18	11	xres
LEAF_NODE	5117:22	5117:22	7	;
EXPR_STATEMENT	5118:4	5118:22	6	yres = image -> yres ;
EXPR	5118:4	5118:4	7	yres = image -> yres
ASSIGN	5118:4	5118:11	8	yres = image -> yres
LVAL	5118:4	5118:4	9	yres
FIELD	5118:4	5118:4	10	yres
LEAF_NODE	5118:4	5118:4	11	yres
ASSIGN_OP	5118:9	5118:9	9	=
LEAF_NODE	5118:9	5118:9	10	=
RVAL	5118:11	5118:11	9	image -> yres
FIELD	5118:11	5118:18	10	image -> yres
LEAF_NODE	5118:11	5118:11	11	image
LEAF_NODE	5118:16	5118:16	11	->
LEAF_NODE	5118:18	5118:18	11	yres
LEAF_NODE	5118:22	5118:22	7	;
LEAF_NODE	5119:4	5119:4	5	}
EXPR_STATEMENT	5122:2	5122:13	3	scale = 1.0 ;
EXPR	5122:2	5122:2	4	scale = 1.0
ASSIGN	5122:2	5122:10	5	scale = 1.0
LVAL	5122:2	5122:2	6	scale
FIELD	5122:2	5122:2	7	scale
LEAF_NODE	5122:2	5122:2	8	scale
ASSIGN_OP	5122:8	5122:8	6	=
LEAF_NODE	5122:8	5122:8	7	=
RVAL	5122:10	5122:10	6	1.0
FIELD	5122:10	5122:10	7	1.0
LEAF_NODE	5122:10	5122:10	8	1.0
LEAF_NODE	5122:13	5122:13	4	;
SELECTION	5123:2	5123:26	3	
KEYWORD	5123:2	5123:2	4	switch
LEAF_NODE	5123:2	5123:2	5	switch
LEAF_NODE	5123:9	5123:9	4	(
CONDITION	5123:10	5123:10	4	crop -> res_unit
EXPR	5123:10	5123:10	5	crop -> res_unit
FIELD	5123:10	5123:16	6	crop -> res_unit
LEAF_NODE	5123:10	5123:10	7	crop
LEAF_NODE	5123:14	5123:14	7	->
LEAF_NODE	5123:16	5123:16	7	res_unit
LEAF_NODE	5123:24	5123:24	4	)
STATEMENTS	5123:26	5135:4	4	
LEAF_NODE	5123:26	5123:26	5	{
STATEMENTS	5124:4	5134:4	5	
LABEL	5124:4	5124:27	6	case RESUNIT_CENTIMETER :
LEAF_NODE	5124:4	5124:4	7	case
LEAF_NODE	5124:9	5124:9	7	RESUNIT_CENTIMETER
LEAF_NODE	5124:27	5124:27	7	:
SELECTION	5125:9	5126:4	6	
KEYWORD	5125:9	5125:9	7	if
LEAF_NODE	5125:9	5125:9	8	if
LEAF_NODE	5125:12	5125:12	7	(
CONDITION	5125:13	5125:13	7	image -> res_unit == RESUNIT_INCH
EXPR	5125:13	5125:32	8	image -> res_unit == RESUNIT_INCH
FIELD	5125:13	5125:20	9	image -> res_unit
LEAF_NODE	5125:13	5125:13	10	image
LEAF_NODE	5125:18	5125:18	10	->
LEAF_NODE	5125:20	5125:20	10	res_unit
EQ_OPERATOR	5125:29	5125:29	9	==
LEAF_NODE	5125:29	5125:29	10	==
FIELD	5125:32	5125:32	9	RESUNIT_INCH
LEAF_NODE	5125:32	5125:32	10	RESUNIT_INCH
LEAF_NODE	5125:44	5125:44	7	)
STATEMENTS	5126:4	5126:4	7	
EXPR_STATEMENT	5126:4	5126:20	8	scale = 1.0 / 2.54 ;
EXPR	5126:4	5126:4	9	scale = 1.0 / 2.54
ASSIGN	5126:4	5126:12	10	scale = 1.0 / 2.54
LVAL	5126:4	5126:4	11	scale
FIELD	5126:4	5126:4	12	scale
LEAF_NODE	5126:4	5126:4	13	scale
ASSIGN_OP	5126:10	5126:10	11	=
LEAF_NODE	5126:10	5126:10	12	=
RVAL	5126:12	5126:16	11	1.0 / 2.54
FIELD	5126:12	5126:12	12	1.0
LEAF_NODE	5126:12	5126:12	13	1.0
LEAF_NODE	5126:15	5126:15	12	/
FIELD	5126:16	5126:16	12	2.54
LEAF_NODE	5126:16	5126:16	13	2.54
LEAF_NODE	5126:20	5126:20	9	;
JUMP_STATEMENT	5127:2	5127:7	6	break DESTINATION ;
KEYWORD	5127:2	5127:2	7	break
LEAF_NODE	5127:2	5127:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5127:7	5127:7	7	;
LABEL	5128:4	5128:21	6	case RESUNIT_INCH :
LEAF_NODE	5128:4	5128:4	7	case
LEAF_NODE	5128:9	5128:9	7	RESUNIT_INCH
LEAF_NODE	5128:21	5128:21	7	:
SELECTION	5129:2	5130:6	6	
KEYWORD	5129:2	5129:2	7	if
LEAF_NODE	5129:2	5129:2	8	if
LEAF_NODE	5129:5	5129:5	7	(
CONDITION	5129:6	5129:6	7	image -> res_unit == RESUNIT_CENTIMETER
EXPR	5129:6	5129:25	8	image -> res_unit == RESUNIT_CENTIMETER
FIELD	5129:6	5129:13	9	image -> res_unit
LEAF_NODE	5129:6	5129:6	10	image
LEAF_NODE	5129:11	5129:11	10	->
LEAF_NODE	5129:13	5129:13	10	res_unit
EQ_OPERATOR	5129:22	5129:22	9	==
LEAF_NODE	5129:22	5129:22	10	==
FIELD	5129:25	5129:25	9	RESUNIT_CENTIMETER
LEAF_NODE	5129:25	5129:25	10	RESUNIT_CENTIMETER
LEAF_NODE	5129:43	5129:43	7	)
STATEMENTS	5130:6	5130:6	7	
EXPR_STATEMENT	5130:6	5130:18	8	scale = 2.54 ;
EXPR	5130:6	5130:6	9	scale = 2.54
ASSIGN	5130:6	5130:14	10	scale = 2.54
LVAL	5130:6	5130:6	11	scale
FIELD	5130:6	5130:6	12	scale
LEAF_NODE	5130:6	5130:6	13	scale
ASSIGN_OP	5130:12	5130:12	11	=
LEAF_NODE	5130:12	5130:12	12	=
RVAL	5130:14	5130:14	11	2.54
FIELD	5130:14	5130:14	12	2.54
LEAF_NODE	5130:14	5130:14	13	2.54
LEAF_NODE	5130:18	5130:18	9	;
JUMP_STATEMENT	5131:2	5131:7	6	break DESTINATION ;
KEYWORD	5131:2	5131:2	7	break
LEAF_NODE	5131:2	5131:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5131:7	5131:7	7	;
LABEL	5132:4	5132:21	6	case RESUNIT_NONE :
LEAF_NODE	5132:4	5132:4	7	case
LEAF_NODE	5132:9	5132:9	7	RESUNIT_NONE
LEAF_NODE	5132:21	5132:21	7	:
LABEL	5133:4	5133:11	6	default :
LEAF_NODE	5133:4	5133:4	7	default
LEAF_NODE	5133:11	5133:11	7	:
JUMP_STATEMENT	5134:4	5134:9	6	break DESTINATION ;
KEYWORD	5134:4	5134:4	7	break
LEAF_NODE	5134:4	5134:4	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5134:9	5134:9	7	;
LEAF_NODE	5135:4	5135:4	5	}
SELECTION	5137:2	5138:4	3	
KEYWORD	5137:2	5137:2	4	if
LEAF_NODE	5137:2	5137:2	5	if
LEAF_NODE	5137:5	5137:5	4	(
CONDITION	5137:6	5137:6	4	crop -> crop_mode & CROP_REGIONS
EXPR	5137:6	5137:24	5	crop -> crop_mode & CROP_REGIONS
FIELD	5137:6	5137:12	6	crop -> crop_mode
LEAF_NODE	5137:6	5137:6	7	crop
LEAF_NODE	5137:10	5137:10	7	->
LEAF_NODE	5137:12	5137:12	7	crop_mode
LEAF_NODE	5137:22	5137:22	6	&
FIELD	5137:24	5137:24	6	CROP_REGIONS
LEAF_NODE	5137:24	5137:24	7	CROP_REGIONS
LEAF_NODE	5137:36	5137:36	4	)
STATEMENTS	5138:4	5208:4	4	
LEAF_NODE	5138:4	5138:4	5	{
STATEMENTS	5139:4	5207:4	5	
EXPR_STATEMENT	5139:4	5139:30	6	max_width = max_length = 0 ;
EXPR	5139:4	5139:4	7	max_width = max_length = 0
ASSIGN	5139:4	5139:16	8	max_width = max_length = 0
LVAL	5139:4	5139:4	9	max_width
FIELD	5139:4	5139:4	10	max_width
LEAF_NODE	5139:4	5139:4	11	max_width
ASSIGN_OP	5139:14	5139:14	9	=
LEAF_NODE	5139:14	5139:14	10	=
RVAL	5139:16	5139:16	9	max_length = 0
ASSIGN	5139:16	5139:29	10	max_length = 0
LVAL	5139:16	5139:16	11	max_length
FIELD	5139:16	5139:16	12	max_length
LEAF_NODE	5139:16	5139:16	13	max_length
ASSIGN_OP	5139:27	5139:27	11	=
LEAF_NODE	5139:27	5139:27	12	=
RVAL	5139:29	5139:29	11	0
FIELD	5139:29	5139:29	12	0
LEAF_NODE	5139:29	5139:29	13	0
LEAF_NODE	5139:30	5139:30	7	;
ITERATION	5140:4	5141:6	6	
KEYWORD	5140:4	5140:4	7	for
LEAF_NODE	5140:4	5140:4	8	for
LEAF_NODE	5140:8	5140:8	7	(
FOR_INIT	5140:9	5140:14	7	i = 0 ;
EXPR	5140:9	5140:9	8	i = 0
ASSIGN	5140:9	5140:13	9	i = 0
LVAL	5140:9	5140:9	10	i
FIELD	5140:9	5140:9	11	i
LEAF_NODE	5140:9	5140:9	12	i
ASSIGN_OP	5140:11	5140:11	10	=
LEAF_NODE	5140:11	5140:11	11	=
RVAL	5140:13	5140:13	10	0
FIELD	5140:13	5140:13	11	0
LEAF_NODE	5140:13	5140:13	12	0
LEAF_NODE	5140:14	5140:14	8	;
CONDITION	5140:16	5140:16	7	i < crop -> regions
EXPR	5140:16	5140:20	8	i < crop -> regions
FIELD	5140:16	5140:16	9	i
LEAF_NODE	5140:16	5140:16	10	i
REL_OPERATOR	5140:18	5140:18	9	<
LEAF_NODE	5140:18	5140:18	10	<
FIELD	5140:20	5140:26	9	crop -> regions
LEAF_NODE	5140:20	5140:20	10	crop
LEAF_NODE	5140:24	5140:24	10	->
LEAF_NODE	5140:26	5140:26	10	regions
LEAF_NODE	5140:33	5140:33	7	;
FOR_EXPR	5140:35	5140:35	7	i ++
EXPR	5140:35	5140:35	8	i ++
FIELD	5140:35	5140:36	9	i ++
LEAF_NODE	5140:35	5140:35	10	i
LEAF_NODE	5140:36	5140:36	10	++
LEAF_NODE	5140:38	5140:38	7	)
STATEMENTS	5141:6	5206:6	7	
LEAF_NODE	5141:6	5141:6	8	{
STATEMENTS	5142:6	5189:6	8	
SELECTION	5142:6	5143:8	9	
KEYWORD	5142:6	5142:6	10	if
LEAF_NODE	5142:6	5142:6	11	if
LEAF_NODE	5142:9	5142:9	10	(
CONDITION	5142:10	5142:10	10	( crop -> res_unit == RESUNIT_INCH ) || ( crop -> res_unit == RESUNIT_CENTIMETER )
EXPR	5142:10	5142:10	11	( crop -> res_unit == RESUNIT_INCH ) || ( crop -> res_unit == RESUNIT_CENTIMETER )
OR	5142:10	5142:46	12	( crop -> res_unit == RESUNIT_INCH ) || ( crop -> res_unit == RESUNIT_CENTIMETER )
EXPR	5142:10	5142:41	13	( crop -> res_unit == RESUNIT_INCH )
LEAF_NODE	5142:10	5142:10	14	(
FIELD	5142:11	5142:17	14	crop -> res_unit
LEAF_NODE	5142:11	5142:11	15	crop
LEAF_NODE	5142:15	5142:15	15	->
LEAF_NODE	5142:17	5142:17	15	res_unit
EQ_OPERATOR	5142:26	5142:26	14	==
LEAF_NODE	5142:26	5142:26	15	==
FIELD	5142:29	5142:29	14	RESUNIT_INCH
LEAF_NODE	5142:29	5142:29	15	RESUNIT_INCH
LEAF_NODE	5142:41	5142:41	14	)
LEAF_NODE	5142:43	5142:43	13	||
EXPR	5142:46	5142:83	13	( crop -> res_unit == RESUNIT_CENTIMETER )
LEAF_NODE	5142:46	5142:46	14	(
FIELD	5142:47	5142:53	14	crop -> res_unit
LEAF_NODE	5142:47	5142:47	15	crop
LEAF_NODE	5142:51	5142:51	15	->
LEAF_NODE	5142:53	5142:53	15	res_unit
EQ_OPERATOR	5142:62	5142:62	14	==
LEAF_NODE	5142:62	5142:62	15	==
FIELD	5142:65	5142:65	14	RESUNIT_CENTIMETER
LEAF_NODE	5142:65	5142:65	15	RESUNIT_CENTIMETER
LEAF_NODE	5142:83	5142:83	14	)
LEAF_NODE	5142:84	5142:84	10	)
STATEMENTS	5143:8	5148:8	10	
LEAF_NODE	5143:8	5143:8	11	{
STATEMENTS	5144:1	5147:51	11	
LEAF_NODE	5144:1	5144:1	12	x1
LEAF_NODE	5144:4	5144:4	12	=
LEAF_NODE	5144:6	5144:6	12	(
LEAF_NODE	5144:7	5144:7	12	uint32
LEAF_NODE	5144:13	5144:13	12	)
LEAF_NODE	5144:15	5144:15	12	(
LEAF_NODE	5144:16	5144:16	12	crop
LEAF_NODE	5144:20	5144:20	12	->
LEAF_NODE	5144:22	5144:22	12	corners
LEAF_NODE	5144:29	5144:29	12	[
LEAF_NODE	5144:30	5144:30	12	i
LEAF_NODE	5144:31	5144:31	12	]
LEAF_NODE	5144:32	5144:32	12	.
LEAF_NODE	5144:33	5144:33	12	X1
LEAF_NODE	5144:36	5144:36	12	*
LEAF_NODE	5144:38	5144:38	12	scale
LEAF_NODE	5144:44	5144:44	12	*
LEAF_NODE	5144:46	5144:46	12	xres
LEAF_NODE	5144:50	5144:50	12	)
LEAF_NODE	5144:51	5144:51	12	;
LEAF_NODE	5145:1	5145:1	12	x2
LEAF_NODE	5145:4	5145:4	12	=
LEAF_NODE	5145:6	5145:6	12	(
LEAF_NODE	5145:7	5145:7	12	uint32
LEAF_NODE	5145:13	5145:13	12	)
LEAF_NODE	5145:15	5145:15	12	(
LEAF_NODE	5145:16	5145:16	12	crop
LEAF_NODE	5145:20	5145:20	12	->
LEAF_NODE	5145:22	5145:22	12	corners
LEAF_NODE	5145:29	5145:29	12	[
LEAF_NODE	5145:30	5145:30	12	i
LEAF_NODE	5145:31	5145:31	12	]
LEAF_NODE	5145:32	5145:32	12	.
LEAF_NODE	5145:33	5145:33	12	X2
LEAF_NODE	5145:36	5145:36	12	*
LEAF_NODE	5145:38	5145:38	12	scale
LEAF_NODE	5145:44	5145:44	12	*
LEAF_NODE	5145:46	5145:46	12	xres
LEAF_NODE	5145:50	5145:50	12	)
LEAF_NODE	5145:51	5145:51	12	;
LEAF_NODE	5146:1	5146:1	12	y1
LEAF_NODE	5146:4	5146:4	12	=
LEAF_NODE	5146:6	5146:6	12	(
LEAF_NODE	5146:7	5146:7	12	uint32
LEAF_NODE	5146:13	5146:13	12	)
LEAF_NODE	5146:15	5146:15	12	(
LEAF_NODE	5146:16	5146:16	12	crop
LEAF_NODE	5146:20	5146:20	12	->
LEAF_NODE	5146:22	5146:22	12	corners
LEAF_NODE	5146:29	5146:29	12	[
LEAF_NODE	5146:30	5146:30	12	i
LEAF_NODE	5146:31	5146:31	12	]
LEAF_NODE	5146:32	5146:32	12	.
LEAF_NODE	5146:33	5146:33	12	Y1
LEAF_NODE	5146:36	5146:36	12	*
LEAF_NODE	5146:38	5146:38	12	scale
LEAF_NODE	5146:44	5146:44	12	*
LEAF_NODE	5146:46	5146:46	12	yres
LEAF_NODE	5146:50	5146:50	12	)
LEAF_NODE	5146:51	5146:51	12	;
LEAF_NODE	5147:1	5147:1	12	y2
LEAF_NODE	5147:4	5147:4	12	=
LEAF_NODE	5147:6	5147:6	12	(
LEAF_NODE	5147:7	5147:7	12	uint32
LEAF_NODE	5147:13	5147:13	12	)
LEAF_NODE	5147:15	5147:15	12	(
LEAF_NODE	5147:16	5147:16	12	crop
LEAF_NODE	5147:20	5147:20	12	->
LEAF_NODE	5147:22	5147:22	12	corners
LEAF_NODE	5147:29	5147:29	12	[
LEAF_NODE	5147:30	5147:30	12	i
LEAF_NODE	5147:31	5147:31	12	]
LEAF_NODE	5147:32	5147:32	12	.
LEAF_NODE	5147:33	5147:33	12	Y2
LEAF_NODE	5147:36	5147:36	12	*
LEAF_NODE	5147:38	5147:38	12	scale
LEAF_NODE	5147:44	5147:44	12	*
LEAF_NODE	5147:46	5147:46	12	yres
LEAF_NODE	5147:50	5147:50	12	)
LEAF_NODE	5147:51	5147:51	12	;
LEAF_NODE	5148:8	5148:8	11	}
SELECTION	5149:6	5150:8	9	
KEYWORD	5149:6	5149:6	10	else
LEAF_NODE	5149:6	5149:6	11	else
STATEMENTS	5150:8	5155:1	10	
LEAF_NODE	5150:8	5150:8	11	{
STATEMENTS	5151:1	5154:1	11	
EXPR_STATEMENT	5151:1	5151:36	12	x1 = ( uint32 ) ( crop -> corners [ i ] . X1 ) ;
EXPR	5151:1	5151:1	13	x1 = ( uint32 ) ( crop -> corners [ i ] . X1 )
ASSIGN	5151:1	5151:6	14	x1 = ( uint32 ) ( crop -> corners [ i ] . X1 )
LVAL	5151:1	5151:1	15	x1
FIELD	5151:1	5151:1	16	x1
LEAF_NODE	5151:1	5151:1	17	x1
ASSIGN_OP	5151:4	5151:4	15	=
LEAF_NODE	5151:4	5151:4	16	=
RVAL	5151:6	5151:35	15	( uint32 ) ( crop -> corners [ i ] . X1 )
LEAF_NODE	5151:6	5151:6	16	(
TYPE_NAME	5151:7	5151:7	16	uint32
LEAF_NODE	5151:7	5151:7	17	uint32
LEAF_NODE	5151:13	5151:13	16	)
LEAF_NODE	5151:15	5151:15	16	(
FIELD	5151:16	5151:33	16	crop -> corners [ i ] . X1
LEAF_NODE	5151:16	5151:16	17	crop
LEAF_NODE	5151:20	5151:20	17	->
LEAF_NODE	5151:22	5151:22	17	corners
LEAF_NODE	5151:29	5151:29	17	[
EXPR	5151:30	5151:30	17	i
FIELD	5151:30	5151:30	18	i
LEAF_NODE	5151:30	5151:30	19	i
LEAF_NODE	5151:31	5151:31	17	]
LEAF_NODE	5151:32	5151:32	17	.
LEAF_NODE	5151:33	5151:33	17	X1
LEAF_NODE	5151:35	5151:35	16	)
LEAF_NODE	5151:36	5151:36	13	;
EXPR_STATEMENT	5152:1	5152:36	12	x2 = ( uint32 ) ( crop -> corners [ i ] . X2 ) ;
EXPR	5152:1	5152:1	13	x2 = ( uint32 ) ( crop -> corners [ i ] . X2 )
ASSIGN	5152:1	5152:6	14	x2 = ( uint32 ) ( crop -> corners [ i ] . X2 )
LVAL	5152:1	5152:1	15	x2
FIELD	5152:1	5152:1	16	x2
LEAF_NODE	5152:1	5152:1	17	x2
ASSIGN_OP	5152:4	5152:4	15	=
LEAF_NODE	5152:4	5152:4	16	=
RVAL	5152:6	5152:35	15	( uint32 ) ( crop -> corners [ i ] . X2 )
LEAF_NODE	5152:6	5152:6	16	(
TYPE_NAME	5152:7	5152:7	16	uint32
LEAF_NODE	5152:7	5152:7	17	uint32
LEAF_NODE	5152:13	5152:13	16	)
LEAF_NODE	5152:15	5152:15	16	(
FIELD	5152:16	5152:33	16	crop -> corners [ i ] . X2
LEAF_NODE	5152:16	5152:16	17	crop
LEAF_NODE	5152:20	5152:20	17	->
LEAF_NODE	5152:22	5152:22	17	corners
LEAF_NODE	5152:29	5152:29	17	[
EXPR	5152:30	5152:30	17	i
FIELD	5152:30	5152:30	18	i
LEAF_NODE	5152:30	5152:30	19	i
LEAF_NODE	5152:31	5152:31	17	]
LEAF_NODE	5152:32	5152:32	17	.
LEAF_NODE	5152:33	5152:33	17	X2
LEAF_NODE	5152:35	5152:35	16	)
LEAF_NODE	5152:36	5152:36	13	;
EXPR_STATEMENT	5153:1	5153:36	12	y1 = ( uint32 ) ( crop -> corners [ i ] . Y1 ) ;
EXPR	5153:1	5153:1	13	y1 = ( uint32 ) ( crop -> corners [ i ] . Y1 )
ASSIGN	5153:1	5153:6	14	y1 = ( uint32 ) ( crop -> corners [ i ] . Y1 )
LVAL	5153:1	5153:1	15	y1
FIELD	5153:1	5153:1	16	y1
LEAF_NODE	5153:1	5153:1	17	y1
ASSIGN_OP	5153:4	5153:4	15	=
LEAF_NODE	5153:4	5153:4	16	=
RVAL	5153:6	5153:35	15	( uint32 ) ( crop -> corners [ i ] . Y1 )
LEAF_NODE	5153:6	5153:6	16	(
TYPE_NAME	5153:7	5153:7	16	uint32
LEAF_NODE	5153:7	5153:7	17	uint32
LEAF_NODE	5153:13	5153:13	16	)
LEAF_NODE	5153:15	5153:15	16	(
FIELD	5153:16	5153:33	16	crop -> corners [ i ] . Y1
LEAF_NODE	5153:16	5153:16	17	crop
LEAF_NODE	5153:20	5153:20	17	->
LEAF_NODE	5153:22	5153:22	17	corners
LEAF_NODE	5153:29	5153:29	17	[
EXPR	5153:30	5153:30	17	i
FIELD	5153:30	5153:30	18	i
LEAF_NODE	5153:30	5153:30	19	i
LEAF_NODE	5153:31	5153:31	17	]
LEAF_NODE	5153:32	5153:32	17	.
LEAF_NODE	5153:33	5153:33	17	Y1
LEAF_NODE	5153:35	5153:35	16	)
LEAF_NODE	5153:36	5153:36	13	;
EXPR_STATEMENT	5154:1	5154:36	12	y2 = ( uint32 ) ( crop -> corners [ i ] . Y2 ) ;
EXPR	5154:1	5154:1	13	y2 = ( uint32 ) ( crop -> corners [ i ] . Y2 )
ASSIGN	5154:1	5154:6	14	y2 = ( uint32 ) ( crop -> corners [ i ] . Y2 )
LVAL	5154:1	5154:1	15	y2
FIELD	5154:1	5154:1	16	y2
LEAF_NODE	5154:1	5154:1	17	y2
ASSIGN_OP	5154:4	5154:4	15	=
LEAF_NODE	5154:4	5154:4	16	=
RVAL	5154:6	5154:35	15	( uint32 ) ( crop -> corners [ i ] . Y2 )
LEAF_NODE	5154:6	5154:6	16	(
TYPE_NAME	5154:7	5154:7	16	uint32
LEAF_NODE	5154:7	5154:7	17	uint32
LEAF_NODE	5154:13	5154:13	16	)
LEAF_NODE	5154:15	5154:15	16	(
FIELD	5154:16	5154:33	16	crop -> corners [ i ] . Y2
LEAF_NODE	5154:16	5154:16	17	crop
LEAF_NODE	5154:20	5154:20	17	->
LEAF_NODE	5154:22	5154:22	17	corners
LEAF_NODE	5154:29	5154:29	17	[
EXPR	5154:30	5154:30	17	i
FIELD	5154:30	5154:30	18	i
LEAF_NODE	5154:30	5154:30	19	i
LEAF_NODE	5154:31	5154:31	17	]
LEAF_NODE	5154:32	5154:32	17	.
LEAF_NODE	5154:33	5154:33	17	Y2
LEAF_NODE	5154:35	5154:35	16	)
LEAF_NODE	5154:36	5154:36	13	;
LEAF_NODE	5155:1	5155:1	11	}
SELECTION	5156:6	5157:8	9	
KEYWORD	5156:6	5156:6	10	if
LEAF_NODE	5156:6	5156:6	11	if
LEAF_NODE	5156:9	5156:9	10	(
CONDITION	5156:10	5156:10	10	x1 < 1
EXPR	5156:10	5156:15	11	x1 < 1
FIELD	5156:10	5156:10	12	x1
LEAF_NODE	5156:10	5156:10	13	x1
REL_OPERATOR	5156:13	5156:13	12	<
LEAF_NODE	5156:13	5156:13	13	<
FIELD	5156:15	5156:15	12	1
LEAF_NODE	5156:15	5156:15	13	1
LEAF_NODE	5156:16	5156:16	10	)
STATEMENTS	5157:8	5157:8	10	
EXPR_STATEMENT	5157:8	5157:34	11	crop -> regionlist [ i ] . x1 = 0 ;
EXPR	5157:8	5157:8	12	crop -> regionlist [ i ] . x1 = 0
ASSIGN	5157:8	5157:33	13	crop -> regionlist [ i ] . x1 = 0
LVAL	5157:8	5157:8	14	crop -> regionlist [ i ] . x1
FIELD	5157:8	5157:28	15	crop -> regionlist [ i ] . x1
LEAF_NODE	5157:8	5157:8	16	crop
LEAF_NODE	5157:12	5157:12	16	->
LEAF_NODE	5157:14	5157:14	16	regionlist
LEAF_NODE	5157:24	5157:24	16	[
EXPR	5157:25	5157:25	16	i
FIELD	5157:25	5157:25	17	i
LEAF_NODE	5157:25	5157:25	18	i
LEAF_NODE	5157:26	5157:26	16	]
LEAF_NODE	5157:27	5157:27	16	.
LEAF_NODE	5157:28	5157:28	16	x1
ASSIGN_OP	5157:31	5157:31	14	=
LEAF_NODE	5157:31	5157:31	15	=
RVAL	5157:33	5157:33	14	0
FIELD	5157:33	5157:33	15	0
LEAF_NODE	5157:33	5157:33	16	0
LEAF_NODE	5157:34	5157:34	12	;
SELECTION	5158:6	5159:8	9	
KEYWORD	5158:6	5158:6	10	else
LEAF_NODE	5158:6	5158:6	11	else
STATEMENTS	5159:8	5159:8	10	
EXPR_STATEMENT	5159:8	5159:50	11	crop -> regionlist [ i ] . x1 = ( uint32 ) ( x1 - 1 ) ;
EXPR	5159:8	5159:8	12	crop -> regionlist [ i ] . x1 = ( uint32 ) ( x1 - 1 )
ASSIGN	5159:8	5159:33	13	crop -> regionlist [ i ] . x1 = ( uint32 ) ( x1 - 1 )
LVAL	5159:8	5159:8	14	crop -> regionlist [ i ] . x1
FIELD	5159:8	5159:28	15	crop -> regionlist [ i ] . x1
LEAF_NODE	5159:8	5159:8	16	crop
LEAF_NODE	5159:12	5159:12	16	->
LEAF_NODE	5159:14	5159:14	16	regionlist
LEAF_NODE	5159:24	5159:24	16	[
EXPR	5159:25	5159:25	16	i
FIELD	5159:25	5159:25	17	i
LEAF_NODE	5159:25	5159:25	18	i
LEAF_NODE	5159:26	5159:26	16	]
LEAF_NODE	5159:27	5159:27	16	.
LEAF_NODE	5159:28	5159:28	16	x1
ASSIGN_OP	5159:31	5159:31	14	=
LEAF_NODE	5159:31	5159:31	15	=
RVAL	5159:33	5159:49	14	( uint32 ) ( x1 - 1 )
LEAF_NODE	5159:33	5159:33	15	(
TYPE_NAME	5159:34	5159:34	15	uint32
LEAF_NODE	5159:34	5159:34	16	uint32
LEAF_NODE	5159:40	5159:40	15	)
LEAF_NODE	5159:42	5159:42	15	(
FIELD	5159:43	5159:43	15	x1
LEAF_NODE	5159:43	5159:43	16	x1
LEAF_NODE	5159:46	5159:46	15	-
FIELD	5159:48	5159:48	15	1
LEAF_NODE	5159:48	5159:48	16	1
LEAF_NODE	5159:49	5159:49	15	)
LEAF_NODE	5159:50	5159:50	12	;
SELECTION	5161:6	5162:8	9	
KEYWORD	5161:6	5161:6	10	if
LEAF_NODE	5161:6	5161:6	11	if
LEAF_NODE	5161:9	5161:9	10	(
CONDITION	5161:10	5161:10	10	x2 > image -> width - 1
EXPR	5161:10	5161:30	11	x2 > image -> width - 1
FIELD	5161:10	5161:10	12	x2
LEAF_NODE	5161:10	5161:10	13	x2
REL_OPERATOR	5161:13	5161:13	12	>
LEAF_NODE	5161:13	5161:13	13	>
FIELD	5161:15	5161:22	12	image -> width
LEAF_NODE	5161:15	5161:15	13	image
LEAF_NODE	5161:20	5161:20	13	->
LEAF_NODE	5161:22	5161:22	13	width
LEAF_NODE	5161:28	5161:28	12	-
FIELD	5161:30	5161:30	12	1
LEAF_NODE	5161:30	5161:30	13	1
LEAF_NODE	5161:31	5161:31	10	)
STATEMENTS	5162:8	5162:8	10	
EXPR_STATEMENT	5162:8	5162:49	11	crop -> regionlist [ i ] . x2 = image -> width - 1 ;
EXPR	5162:8	5162:8	12	crop -> regionlist [ i ] . x2 = image -> width - 1
ASSIGN	5162:8	5162:33	13	crop -> regionlist [ i ] . x2 = image -> width - 1
LVAL	5162:8	5162:8	14	crop -> regionlist [ i ] . x2
FIELD	5162:8	5162:28	15	crop -> regionlist [ i ] . x2
LEAF_NODE	5162:8	5162:8	16	crop
LEAF_NODE	5162:12	5162:12	16	->
LEAF_NODE	5162:14	5162:14	16	regionlist
LEAF_NODE	5162:24	5162:24	16	[
EXPR	5162:25	5162:25	16	i
FIELD	5162:25	5162:25	17	i
LEAF_NODE	5162:25	5162:25	18	i
LEAF_NODE	5162:26	5162:26	16	]
LEAF_NODE	5162:27	5162:27	16	.
LEAF_NODE	5162:28	5162:28	16	x2
ASSIGN_OP	5162:31	5162:31	14	=
LEAF_NODE	5162:31	5162:31	15	=
RVAL	5162:33	5162:48	14	image -> width - 1
FIELD	5162:33	5162:40	15	image -> width
LEAF_NODE	5162:33	5162:33	16	image
LEAF_NODE	5162:38	5162:38	16	->
LEAF_NODE	5162:40	5162:40	16	width
LEAF_NODE	5162:46	5162:46	15	-
FIELD	5162:48	5162:48	15	1
LEAF_NODE	5162:48	5162:48	16	1
LEAF_NODE	5162:49	5162:49	12	;
SELECTION	5163:6	5164:8	9	
KEYWORD	5163:6	5163:6	10	else
LEAF_NODE	5163:6	5163:6	11	else
STATEMENTS	5164:8	5164:8	10	
EXPR_STATEMENT	5164:8	5164:50	11	crop -> regionlist [ i ] . x2 = ( uint32 ) ( x2 - 1 ) ;
EXPR	5164:8	5164:8	12	crop -> regionlist [ i ] . x2 = ( uint32 ) ( x2 - 1 )
ASSIGN	5164:8	5164:33	13	crop -> regionlist [ i ] . x2 = ( uint32 ) ( x2 - 1 )
LVAL	5164:8	5164:8	14	crop -> regionlist [ i ] . x2
FIELD	5164:8	5164:28	15	crop -> regionlist [ i ] . x2
LEAF_NODE	5164:8	5164:8	16	crop
LEAF_NODE	5164:12	5164:12	16	->
LEAF_NODE	5164:14	5164:14	16	regionlist
LEAF_NODE	5164:24	5164:24	16	[
EXPR	5164:25	5164:25	16	i
FIELD	5164:25	5164:25	17	i
LEAF_NODE	5164:25	5164:25	18	i
LEAF_NODE	5164:26	5164:26	16	]
LEAF_NODE	5164:27	5164:27	16	.
LEAF_NODE	5164:28	5164:28	16	x2
ASSIGN_OP	5164:31	5164:31	14	=
LEAF_NODE	5164:31	5164:31	15	=
RVAL	5164:33	5164:49	14	( uint32 ) ( x2 - 1 )
LEAF_NODE	5164:33	5164:33	15	(
TYPE_NAME	5164:34	5164:34	15	uint32
LEAF_NODE	5164:34	5164:34	16	uint32
LEAF_NODE	5164:40	5164:40	15	)
LEAF_NODE	5164:42	5164:42	15	(
FIELD	5164:43	5164:43	15	x2
LEAF_NODE	5164:43	5164:43	16	x2
LEAF_NODE	5164:46	5164:46	15	-
FIELD	5164:48	5164:48	15	1
LEAF_NODE	5164:48	5164:48	16	1
LEAF_NODE	5164:49	5164:49	15	)
LEAF_NODE	5164:50	5164:50	12	;
EXPR_STATEMENT	5165:6	5165:67	9	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1 ;
EXPR	5165:6	5165:6	10	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
ASSIGN	5165:6	5165:16	11	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
LVAL	5165:6	5165:6	12	zwidth
FIELD	5165:6	5165:6	13	zwidth
LEAF_NODE	5165:6	5165:6	14	zwidth
ASSIGN_OP	5165:14	5165:14	12	=
LEAF_NODE	5165:14	5165:14	13	=
RVAL	5165:16	5165:66	12	crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
FIELD	5165:16	5165:36	13	crop -> regionlist [ i ] . x2
LEAF_NODE	5165:16	5165:16	14	crop
LEAF_NODE	5165:20	5165:20	14	->
LEAF_NODE	5165:22	5165:22	14	regionlist
LEAF_NODE	5165:32	5165:32	14	[
EXPR	5165:33	5165:33	14	i
FIELD	5165:33	5165:33	15	i
LEAF_NODE	5165:33	5165:33	16	i
LEAF_NODE	5165:34	5165:34	14	]
LEAF_NODE	5165:35	5165:35	14	.
LEAF_NODE	5165:36	5165:36	14	x2
LEAF_NODE	5165:39	5165:39	13	-
FIELD	5165:41	5165:61	13	crop -> regionlist [ i ] . x1
LEAF_NODE	5165:41	5165:41	14	crop
LEAF_NODE	5165:45	5165:45	14	->
LEAF_NODE	5165:47	5165:47	14	regionlist
LEAF_NODE	5165:57	5165:57	14	[
EXPR	5165:58	5165:58	14	i
FIELD	5165:58	5165:58	15	i
LEAF_NODE	5165:58	5165:58	16	i
LEAF_NODE	5165:59	5165:59	14	]
LEAF_NODE	5165:60	5165:60	14	.
LEAF_NODE	5165:61	5165:61	14	x1
LEAF_NODE	5165:64	5165:64	13	+
FIELD	5165:66	5165:66	13	1
LEAF_NODE	5165:66	5165:66	14	1
LEAF_NODE	5165:67	5165:67	10	;
SELECTION	5167:6	5168:8	9	
KEYWORD	5167:6	5167:6	10	if
LEAF_NODE	5167:6	5167:6	11	if
LEAF_NODE	5167:9	5167:9	10	(
CONDITION	5167:10	5167:10	10	y1 < 1
EXPR	5167:10	5167:15	11	y1 < 1
FIELD	5167:10	5167:10	12	y1
LEAF_NODE	5167:10	5167:10	13	y1
REL_OPERATOR	5167:13	5167:13	12	<
LEAF_NODE	5167:13	5167:13	13	<
FIELD	5167:15	5167:15	12	1
LEAF_NODE	5167:15	5167:15	13	1
LEAF_NODE	5167:16	5167:16	10	)
STATEMENTS	5168:8	5168:8	10	
EXPR_STATEMENT	5168:8	5168:34	11	crop -> regionlist [ i ] . y1 = 0 ;
EXPR	5168:8	5168:8	12	crop -> regionlist [ i ] . y1 = 0
ASSIGN	5168:8	5168:33	13	crop -> regionlist [ i ] . y1 = 0
LVAL	5168:8	5168:8	14	crop -> regionlist [ i ] . y1
FIELD	5168:8	5168:28	15	crop -> regionlist [ i ] . y1
LEAF_NODE	5168:8	5168:8	16	crop
LEAF_NODE	5168:12	5168:12	16	->
LEAF_NODE	5168:14	5168:14	16	regionlist
LEAF_NODE	5168:24	5168:24	16	[
EXPR	5168:25	5168:25	16	i
FIELD	5168:25	5168:25	17	i
LEAF_NODE	5168:25	5168:25	18	i
LEAF_NODE	5168:26	5168:26	16	]
LEAF_NODE	5168:27	5168:27	16	.
LEAF_NODE	5168:28	5168:28	16	y1
ASSIGN_OP	5168:31	5168:31	14	=
LEAF_NODE	5168:31	5168:31	15	=
RVAL	5168:33	5168:33	14	0
FIELD	5168:33	5168:33	15	0
LEAF_NODE	5168:33	5168:33	16	0
LEAF_NODE	5168:34	5168:34	12	;
SELECTION	5169:6	5170:8	9	
KEYWORD	5169:6	5169:6	10	else
LEAF_NODE	5169:6	5169:6	11	else
STATEMENTS	5170:8	5170:8	10	
EXPR_STATEMENT	5170:8	5170:50	11	crop -> regionlist [ i ] . y1 = ( uint32 ) ( y1 - 1 ) ;
EXPR	5170:8	5170:8	12	crop -> regionlist [ i ] . y1 = ( uint32 ) ( y1 - 1 )
ASSIGN	5170:8	5170:33	13	crop -> regionlist [ i ] . y1 = ( uint32 ) ( y1 - 1 )
LVAL	5170:8	5170:8	14	crop -> regionlist [ i ] . y1
FIELD	5170:8	5170:28	15	crop -> regionlist [ i ] . y1
LEAF_NODE	5170:8	5170:8	16	crop
LEAF_NODE	5170:12	5170:12	16	->
LEAF_NODE	5170:14	5170:14	16	regionlist
LEAF_NODE	5170:24	5170:24	16	[
EXPR	5170:25	5170:25	16	i
FIELD	5170:25	5170:25	17	i
LEAF_NODE	5170:25	5170:25	18	i
LEAF_NODE	5170:26	5170:26	16	]
LEAF_NODE	5170:27	5170:27	16	.
LEAF_NODE	5170:28	5170:28	16	y1
ASSIGN_OP	5170:31	5170:31	14	=
LEAF_NODE	5170:31	5170:31	15	=
RVAL	5170:33	5170:49	14	( uint32 ) ( y1 - 1 )
LEAF_NODE	5170:33	5170:33	15	(
TYPE_NAME	5170:34	5170:34	15	uint32
LEAF_NODE	5170:34	5170:34	16	uint32
LEAF_NODE	5170:40	5170:40	15	)
LEAF_NODE	5170:42	5170:42	15	(
FIELD	5170:43	5170:43	15	y1
LEAF_NODE	5170:43	5170:43	16	y1
LEAF_NODE	5170:46	5170:46	15	-
FIELD	5170:48	5170:48	15	1
LEAF_NODE	5170:48	5170:48	16	1
LEAF_NODE	5170:49	5170:49	15	)
LEAF_NODE	5170:50	5170:50	12	;
SELECTION	5172:6	5173:8	9	
KEYWORD	5172:6	5172:6	10	if
LEAF_NODE	5172:6	5172:6	11	if
LEAF_NODE	5172:9	5172:9	10	(
CONDITION	5172:10	5172:10	10	y2 > image -> length - 1
EXPR	5172:10	5172:31	11	y2 > image -> length - 1
FIELD	5172:10	5172:10	12	y2
LEAF_NODE	5172:10	5172:10	13	y2
REL_OPERATOR	5172:13	5172:13	12	>
LEAF_NODE	5172:13	5172:13	13	>
FIELD	5172:15	5172:22	12	image -> length
LEAF_NODE	5172:15	5172:15	13	image
LEAF_NODE	5172:20	5172:20	13	->
LEAF_NODE	5172:22	5172:22	13	length
LEAF_NODE	5172:29	5172:29	12	-
FIELD	5172:31	5172:31	12	1
LEAF_NODE	5172:31	5172:31	13	1
LEAF_NODE	5172:32	5172:32	10	)
STATEMENTS	5173:8	5173:8	10	
EXPR_STATEMENT	5173:8	5173:50	11	crop -> regionlist [ i ] . y2 = image -> length - 1 ;
EXPR	5173:8	5173:8	12	crop -> regionlist [ i ] . y2 = image -> length - 1
ASSIGN	5173:8	5173:33	13	crop -> regionlist [ i ] . y2 = image -> length - 1
LVAL	5173:8	5173:8	14	crop -> regionlist [ i ] . y2
FIELD	5173:8	5173:28	15	crop -> regionlist [ i ] . y2
LEAF_NODE	5173:8	5173:8	16	crop
LEAF_NODE	5173:12	5173:12	16	->
LEAF_NODE	5173:14	5173:14	16	regionlist
LEAF_NODE	5173:24	5173:24	16	[
EXPR	5173:25	5173:25	16	i
FIELD	5173:25	5173:25	17	i
LEAF_NODE	5173:25	5173:25	18	i
LEAF_NODE	5173:26	5173:26	16	]
LEAF_NODE	5173:27	5173:27	16	.
LEAF_NODE	5173:28	5173:28	16	y2
ASSIGN_OP	5173:31	5173:31	14	=
LEAF_NODE	5173:31	5173:31	15	=
RVAL	5173:33	5173:49	14	image -> length - 1
FIELD	5173:33	5173:40	15	image -> length
LEAF_NODE	5173:33	5173:33	16	image
LEAF_NODE	5173:38	5173:38	16	->
LEAF_NODE	5173:40	5173:40	16	length
LEAF_NODE	5173:47	5173:47	15	-
FIELD	5173:49	5173:49	15	1
LEAF_NODE	5173:49	5173:49	16	1
LEAF_NODE	5173:50	5173:50	12	;
SELECTION	5174:6	5175:8	9	
KEYWORD	5174:6	5174:6	10	else
LEAF_NODE	5174:6	5174:6	11	else
STATEMENTS	5175:8	5175:8	10	
EXPR_STATEMENT	5175:8	5175:50	11	crop -> regionlist [ i ] . y2 = ( uint32 ) ( y2 - 1 ) ;
EXPR	5175:8	5175:8	12	crop -> regionlist [ i ] . y2 = ( uint32 ) ( y2 - 1 )
ASSIGN	5175:8	5175:33	13	crop -> regionlist [ i ] . y2 = ( uint32 ) ( y2 - 1 )
LVAL	5175:8	5175:8	14	crop -> regionlist [ i ] . y2
FIELD	5175:8	5175:28	15	crop -> regionlist [ i ] . y2
LEAF_NODE	5175:8	5175:8	16	crop
LEAF_NODE	5175:12	5175:12	16	->
LEAF_NODE	5175:14	5175:14	16	regionlist
LEAF_NODE	5175:24	5175:24	16	[
EXPR	5175:25	5175:25	16	i
FIELD	5175:25	5175:25	17	i
LEAF_NODE	5175:25	5175:25	18	i
LEAF_NODE	5175:26	5175:26	16	]
LEAF_NODE	5175:27	5175:27	16	.
LEAF_NODE	5175:28	5175:28	16	y2
ASSIGN_OP	5175:31	5175:31	14	=
LEAF_NODE	5175:31	5175:31	15	=
RVAL	5175:33	5175:49	14	( uint32 ) ( y2 - 1 )
LEAF_NODE	5175:33	5175:33	15	(
TYPE_NAME	5175:34	5175:34	15	uint32
LEAF_NODE	5175:34	5175:34	16	uint32
LEAF_NODE	5175:40	5175:40	15	)
LEAF_NODE	5175:42	5175:42	15	(
FIELD	5175:43	5175:43	15	y2
LEAF_NODE	5175:43	5175:43	16	y2
LEAF_NODE	5175:46	5175:46	15	-
FIELD	5175:48	5175:48	15	1
LEAF_NODE	5175:48	5175:48	16	1
LEAF_NODE	5175:49	5175:49	15	)
LEAF_NODE	5175:50	5175:50	12	;
EXPR_STATEMENT	5177:6	5177:67	9	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1 ;
EXPR	5177:6	5177:6	10	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
ASSIGN	5177:6	5177:16	11	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
LVAL	5177:6	5177:6	12	zlength
FIELD	5177:6	5177:6	13	zlength
LEAF_NODE	5177:6	5177:6	14	zlength
ASSIGN_OP	5177:14	5177:14	12	=
LEAF_NODE	5177:14	5177:14	13	=
RVAL	5177:16	5177:66	12	crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
FIELD	5177:16	5177:36	13	crop -> regionlist [ i ] . y2
LEAF_NODE	5177:16	5177:16	14	crop
LEAF_NODE	5177:20	5177:20	14	->
LEAF_NODE	5177:22	5177:22	14	regionlist
LEAF_NODE	5177:32	5177:32	14	[
EXPR	5177:33	5177:33	14	i
FIELD	5177:33	5177:33	15	i
LEAF_NODE	5177:33	5177:33	16	i
LEAF_NODE	5177:34	5177:34	14	]
LEAF_NODE	5177:35	5177:35	14	.
LEAF_NODE	5177:36	5177:36	14	y2
LEAF_NODE	5177:39	5177:39	13	-
FIELD	5177:41	5177:61	13	crop -> regionlist [ i ] . y1
LEAF_NODE	5177:41	5177:41	14	crop
LEAF_NODE	5177:45	5177:45	14	->
LEAF_NODE	5177:47	5177:47	14	regionlist
LEAF_NODE	5177:57	5177:57	14	[
EXPR	5177:58	5177:58	14	i
FIELD	5177:58	5177:58	15	i
LEAF_NODE	5177:58	5177:58	16	i
LEAF_NODE	5177:59	5177:59	14	]
LEAF_NODE	5177:60	5177:60	14	.
LEAF_NODE	5177:61	5177:61	14	y1
LEAF_NODE	5177:64	5177:64	13	+
FIELD	5177:66	5177:66	13	1
LEAF_NODE	5177:66	5177:66	14	1
LEAF_NODE	5177:67	5177:67	10	;
SELECTION	5179:6	5180:8	9	
KEYWORD	5179:6	5179:6	10	if
LEAF_NODE	5179:6	5179:6	11	if
LEAF_NODE	5179:9	5179:9	10	(
CONDITION	5179:10	5179:10	10	zwidth > max_width
EXPR	5179:10	5179:19	11	zwidth > max_width
FIELD	5179:10	5179:10	12	zwidth
LEAF_NODE	5179:10	5179:10	13	zwidth
REL_OPERATOR	5179:17	5179:17	12	>
LEAF_NODE	5179:17	5179:17	13	>
FIELD	5179:19	5179:19	12	max_width
LEAF_NODE	5179:19	5179:19	13	max_width
LEAF_NODE	5179:28	5179:28	10	)
STATEMENTS	5180:8	5180:8	10	
EXPR_STATEMENT	5180:8	5180:26	11	max_width = zwidth ;
EXPR	5180:8	5180:8	12	max_width = zwidth
ASSIGN	5180:8	5180:20	13	max_width = zwidth
LVAL	5180:8	5180:8	14	max_width
FIELD	5180:8	5180:8	15	max_width
LEAF_NODE	5180:8	5180:8	16	max_width
ASSIGN_OP	5180:18	5180:18	14	=
LEAF_NODE	5180:18	5180:18	15	=
RVAL	5180:20	5180:20	14	zwidth
FIELD	5180:20	5180:20	15	zwidth
LEAF_NODE	5180:20	5180:20	16	zwidth
LEAF_NODE	5180:26	5180:26	12	;
SELECTION	5181:6	5182:8	9	
KEYWORD	5181:6	5181:6	10	if
LEAF_NODE	5181:6	5181:6	11	if
LEAF_NODE	5181:9	5181:9	10	(
CONDITION	5181:10	5181:10	10	zlength > max_length
EXPR	5181:10	5181:20	11	zlength > max_length
FIELD	5181:10	5181:10	12	zlength
LEAF_NODE	5181:10	5181:10	13	zlength
REL_OPERATOR	5181:18	5181:18	12	>
LEAF_NODE	5181:18	5181:18	13	>
FIELD	5181:20	5181:20	12	max_length
LEAF_NODE	5181:20	5181:20	13	max_length
LEAF_NODE	5181:30	5181:30	10	)
STATEMENTS	5182:8	5182:8	10	
EXPR_STATEMENT	5182:8	5182:28	11	max_length = zlength ;
EXPR	5182:8	5182:8	12	max_length = zlength
ASSIGN	5182:8	5182:21	13	max_length = zlength
LVAL	5182:8	5182:8	14	max_length
FIELD	5182:8	5182:8	15	max_length
LEAF_NODE	5182:8	5182:8	16	max_length
ASSIGN_OP	5182:19	5182:19	14	=
LEAF_NODE	5182:19	5182:19	15	=
RVAL	5182:21	5182:21	14	zlength
FIELD	5182:21	5182:21	15	zlength
LEAF_NODE	5182:21	5182:21	16	zlength
LEAF_NODE	5182:28	5182:28	12	;
LEAF_NODE	5184:6	5184:6	9	buffsize
LEAF_NODE	5184:15	5184:15	9	=
LEAF_NODE	5184:17	5184:17	9	(
LEAF_NODE	5184:18	5184:18	9	uint32
LEAF_NODE	5184:24	5184:24	9	)
LEAF_NODE	5185:10	5185:10	9	(
LEAF_NODE	5185:11	5185:11	9	(
LEAF_NODE	5185:12	5185:12	9	(
LEAF_NODE	5185:13	5185:13	9	zwidth
LEAF_NODE	5185:20	5185:20	9	*
LEAF_NODE	5185:22	5185:22	9	image
LEAF_NODE	5185:27	5185:27	9	->
LEAF_NODE	5185:29	5185:29	9	bps
LEAF_NODE	5185:33	5185:33	9	*
LEAF_NODE	5185:35	5185:35	9	image
LEAF_NODE	5185:40	5185:40	9	->
LEAF_NODE	5185:42	5185:42	9	spp
LEAF_NODE	5185:46	5185:46	9	+
LEAF_NODE	5185:48	5185:48	9	7
LEAF_NODE	5185:50	5185:50	9	)
LEAF_NODE	5185:52	5185:52	9	/
LEAF_NODE	5185:54	5185:54	9	8
LEAF_NODE	5185:55	5185:55	9	)
LEAF_NODE	5185:57	5185:57	9	*
LEAF_NODE	5185:59	5185:59	9	(
LEAF_NODE	5185:60	5185:60	9	zlength
LEAF_NODE	5185:68	5185:68	9	+
LEAF_NODE	5185:70	5185:70	9	1
LEAF_NODE	5185:71	5185:71	9	)
LEAF_NODE	5185:72	5185:72	9	)
LEAF_NODE	5185:73	5185:73	9	;
EXPR_STATEMENT	5187:6	5187:45	9	crop -> regionlist [ i ] . buffsize = buffsize ;
EXPR	5187:6	5187:6	10	crop -> regionlist [ i ] . buffsize = buffsize
ASSIGN	5187:6	5187:37	11	crop -> regionlist [ i ] . buffsize = buffsize
LVAL	5187:6	5187:6	12	crop -> regionlist [ i ] . buffsize
FIELD	5187:6	5187:26	13	crop -> regionlist [ i ] . buffsize
LEAF_NODE	5187:6	5187:6	14	crop
LEAF_NODE	5187:10	5187:10	14	->
LEAF_NODE	5187:12	5187:12	14	regionlist
LEAF_NODE	5187:22	5187:22	14	[
EXPR	5187:23	5187:23	14	i
FIELD	5187:23	5187:23	15	i
LEAF_NODE	5187:23	5187:23	16	i
LEAF_NODE	5187:24	5187:24	14	]
LEAF_NODE	5187:25	5187:25	14	.
LEAF_NODE	5187:26	5187:26	14	buffsize
ASSIGN_OP	5187:35	5187:35	12	=
LEAF_NODE	5187:35	5187:35	13	=
RVAL	5187:37	5187:37	12	buffsize
FIELD	5187:37	5187:37	13	buffsize
LEAF_NODE	5187:37	5187:37	14	buffsize
LEAF_NODE	5187:45	5187:45	10	;
EXPR_STATEMENT	5188:6	5188:33	9	crop -> bufftotal += buffsize ;
EXPR	5188:6	5188:6	10	crop -> bufftotal += buffsize
ASSIGN	5188:6	5188:25	11	crop -> bufftotal += buffsize
LVAL	5188:6	5188:6	12	crop -> bufftotal
FIELD	5188:6	5188:12	13	crop -> bufftotal
LEAF_NODE	5188:6	5188:6	14	crop
LEAF_NODE	5188:10	5188:10	14	->
LEAF_NODE	5188:12	5188:12	14	bufftotal
ASSIGN_OP	5188:22	5188:22	12	+=
LEAF_NODE	5188:22	5188:22	13	+=
RVAL	5188:25	5188:25	12	buffsize
FIELD	5188:25	5188:25	13	buffsize
LEAF_NODE	5188:25	5188:25	14	buffsize
LEAF_NODE	5188:33	5188:33	10	;
SELECTION	5189:6	5190:8	9	
KEYWORD	5189:6	5189:6	10	if
LEAF_NODE	5189:6	5189:6	11	if
LEAF_NODE	5189:9	5189:9	10	(
CONDITION	5189:10	5189:10	10	crop -> img_mode == COMPOSITE_IMAGES
EXPR	5189:10	5189:28	11	crop -> img_mode == COMPOSITE_IMAGES
FIELD	5189:10	5189:16	12	crop -> img_mode
LEAF_NODE	5189:10	5189:10	13	crop
LEAF_NODE	5189:14	5189:14	13	->
LEAF_NODE	5189:16	5189:16	13	img_mode
EQ_OPERATOR	5189:25	5189:25	12	==
LEAF_NODE	5189:25	5189:25	13	==
FIELD	5189:28	5189:28	12	COMPOSITE_IMAGES
LEAF_NODE	5189:28	5189:28	13	COMPOSITE_IMAGES
LEAF_NODE	5189:44	5189:44	10	)
STATEMENTS	5190:8	5205:1	10	
LEAF_NODE	5190:8	5190:8	11	{
STATEMENTS	5191:8	5191:8	11	
SELECTION	5191:8	5192:10	12	
KEYWORD	5191:8	5191:8	13	switch
LEAF_NODE	5191:8	5191:8	14	switch
LEAF_NODE	5191:15	5191:15	13	(
CONDITION	5191:16	5191:16	13	crop -> edge_ref
EXPR	5191:16	5191:16	14	crop -> edge_ref
FIELD	5191:16	5191:22	15	crop -> edge_ref
LEAF_NODE	5191:16	5191:16	16	crop
LEAF_NODE	5191:20	5191:20	16	->
LEAF_NODE	5191:22	5191:22	16	edge_ref
LEAF_NODE	5191:30	5191:30	13	)
STATEMENTS	5192:10	5204:10	13	
LEAF_NODE	5192:10	5192:10	14	{
STATEMENTS	5193:10	5203:8	14	
LABEL	5193:10	5193:24	15	case EDGE_LEFT :
LEAF_NODE	5193:10	5193:10	16	case
LEAF_NODE	5193:15	5193:15	16	EDGE_LEFT
LEAF_NODE	5193:24	5193:24	16	:
LABEL	5194:10	5194:25	15	case EDGE_RIGHT :
LEAF_NODE	5194:10	5194:10	16	case
LEAF_NODE	5194:15	5194:15	16	EDGE_RIGHT
LEAF_NODE	5194:25	5194:25	16	:
EXPR_STATEMENT	5195:15	5195:46	15	crop -> combined_length = zlength ;
EXPR	5195:15	5195:15	16	crop -> combined_length = zlength
ASSIGN	5195:15	5195:39	17	crop -> combined_length = zlength
LVAL	5195:15	5195:15	18	crop -> combined_length
FIELD	5195:15	5195:21	19	crop -> combined_length
LEAF_NODE	5195:15	5195:15	20	crop
LEAF_NODE	5195:19	5195:19	20	->
LEAF_NODE	5195:21	5195:21	20	combined_length
ASSIGN_OP	5195:37	5195:37	18	=
LEAF_NODE	5195:37	5195:37	19	=
RVAL	5195:39	5195:39	18	zlength
FIELD	5195:39	5195:39	19	zlength
LEAF_NODE	5195:39	5195:39	20	zlength
LEAF_NODE	5195:46	5195:46	16	;
EXPR_STATEMENT	5196:15	5196:45	15	crop -> combined_width += zwidth ;
EXPR	5196:15	5196:15	16	crop -> combined_width += zwidth
ASSIGN	5196:15	5196:39	17	crop -> combined_width += zwidth
LVAL	5196:15	5196:15	18	crop -> combined_width
FIELD	5196:15	5196:21	19	crop -> combined_width
LEAF_NODE	5196:15	5196:15	20	crop
LEAF_NODE	5196:19	5196:19	20	->
LEAF_NODE	5196:21	5196:21	20	combined_width
ASSIGN_OP	5196:36	5196:36	18	+=
LEAF_NODE	5196:36	5196:36	19	+=
RVAL	5196:39	5196:39	18	zwidth
FIELD	5196:39	5196:39	19	zwidth
LEAF_NODE	5196:39	5196:39	20	zwidth
LEAF_NODE	5196:45	5196:45	16	;
JUMP_STATEMENT	5197:15	5197:20	15	break DESTINATION ;
KEYWORD	5197:15	5197:15	16	break
LEAF_NODE	5197:15	5197:15	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	5197:20	5197:20	16	;
LABEL	5198:10	5198:26	15	case EDGE_BOTTOM :
LEAF_NODE	5198:10	5198:10	16	case
LEAF_NODE	5198:15	5198:15	16	EDGE_BOTTOM
LEAF_NODE	5198:26	5198:26	16	:
LABEL	5199:10	5199:23	15	case EDGE_TOP :
LEAF_NODE	5199:10	5199:10	16	case
LEAF_NODE	5199:15	5199:15	16	EDGE_TOP
LEAF_NODE	5199:23	5199:23	16	:
LABEL	5200:10	5200:17	15	default :
LEAF_NODE	5200:10	5200:10	16	default
LEAF_NODE	5200:17	5200:17	16	:
EXPR_STATEMENT	5201:15	5201:44	15	crop -> combined_width = zwidth ;
EXPR	5201:15	5201:15	16	crop -> combined_width = zwidth
ASSIGN	5201:15	5201:38	17	crop -> combined_width = zwidth
LVAL	5201:15	5201:15	18	crop -> combined_width
FIELD	5201:15	5201:21	19	crop -> combined_width
LEAF_NODE	5201:15	5201:15	20	crop
LEAF_NODE	5201:19	5201:19	20	->
LEAF_NODE	5201:21	5201:21	20	combined_width
ASSIGN_OP	5201:36	5201:36	18	=
LEAF_NODE	5201:36	5201:36	19	=
RVAL	5201:38	5201:38	18	zwidth
FIELD	5201:38	5201:38	19	zwidth
LEAF_NODE	5201:38	5201:38	20	zwidth
LEAF_NODE	5201:44	5201:44	16	;
EXPR_STATEMENT	5202:15	5202:47	15	crop -> combined_length += zlength ;
EXPR	5202:15	5202:15	16	crop -> combined_length += zlength
ASSIGN	5202:15	5202:40	17	crop -> combined_length += zlength
LVAL	5202:15	5202:15	18	crop -> combined_length
FIELD	5202:15	5202:21	19	crop -> combined_length
LEAF_NODE	5202:15	5202:15	20	crop
LEAF_NODE	5202:19	5202:19	20	->
LEAF_NODE	5202:21	5202:21	20	combined_length
ASSIGN_OP	5202:37	5202:37	18	+=
LEAF_NODE	5202:37	5202:37	19	+=
RVAL	5202:40	5202:40	18	zlength
FIELD	5202:40	5202:40	19	zlength
LEAF_NODE	5202:40	5202:40	20	zlength
LEAF_NODE	5202:47	5202:47	16	;
JUMP_STATEMENT	5203:8	5203:13	15	break DESTINATION ;
KEYWORD	5203:8	5203:8	16	break
LEAF_NODE	5203:8	5203:8	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	5203:13	5203:13	16	;
LEAF_NODE	5204:10	5204:10	14	}
LEAF_NODE	5205:1	5205:1	11	}
LEAF_NODE	5206:6	5206:6	8	}
JUMP_STATEMENT	5207:4	5207:14	6	return ( 0 ) ;
KEYWORD	5207:4	5207:4	7	return
LEAF_NODE	5207:4	5207:4	8	return
DESTINATION	5207:11	5207:11	7	( 0 )
EXPR	5207:11	5207:13	8	( 0 )
LEAF_NODE	5207:11	5207:11	9	(
FIELD	5207:12	5207:12	9	0
LEAF_NODE	5207:12	5207:12	10	0
LEAF_NODE	5207:13	5207:13	9	)
LEAF_NODE	5207:14	5207:14	7	;
LEAF_NODE	5208:4	5208:4	5	}
SELECTION	5213:2	5214:4	3	
KEYWORD	5213:2	5213:2	4	if
LEAF_NODE	5213:2	5213:2	5	if
LEAF_NODE	5213:5	5213:5	4	(
CONDITION	5213:6	5213:6	4	crop -> crop_mode & CROP_MARGINS
EXPR	5213:6	5213:24	5	crop -> crop_mode & CROP_MARGINS
FIELD	5213:6	5213:12	6	crop -> crop_mode
LEAF_NODE	5213:6	5213:6	7	crop
LEAF_NODE	5213:10	5213:10	7	->
LEAF_NODE	5213:12	5213:12	7	crop_mode
LEAF_NODE	5213:22	5213:22	6	&
FIELD	5213:24	5213:24	6	CROP_MARGINS
LEAF_NODE	5213:24	5213:24	7	CROP_MARGINS
LEAF_NODE	5213:36	5213:36	4	)
STATEMENTS	5214:4	5244:4	4	
LEAF_NODE	5214:4	5214:4	5	{
STATEMENTS	5215:4	5237:4	5	
SELECTION	5215:4	5216:6	6	
KEYWORD	5215:4	5215:4	7	if
LEAF_NODE	5215:4	5215:4	8	if
LEAF_NODE	5215:7	5215:7	7	(
CONDITION	5215:8	5215:8	7	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
EXPR	5215:8	5215:8	8	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
AND	5215:8	5215:42	9	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
EXPR	5215:8	5215:26	10	crop -> res_unit != RESUNIT_INCH
FIELD	5215:8	5215:14	11	crop -> res_unit
LEAF_NODE	5215:8	5215:8	12	crop
LEAF_NODE	5215:12	5215:12	12	->
LEAF_NODE	5215:14	5215:14	12	res_unit
EQ_OPERATOR	5215:23	5215:23	11	!=
LEAF_NODE	5215:23	5215:23	12	!=
FIELD	5215:26	5215:26	11	RESUNIT_INCH
LEAF_NODE	5215:26	5215:26	12	RESUNIT_INCH
LEAF_NODE	5215:39	5215:39	10	&&
EXPR	5215:42	5215:60	10	crop -> res_unit != RESUNIT_CENTIMETER
FIELD	5215:42	5215:48	11	crop -> res_unit
LEAF_NODE	5215:42	5215:42	12	crop
LEAF_NODE	5215:46	5215:46	12	->
LEAF_NODE	5215:48	5215:48	12	res_unit
EQ_OPERATOR	5215:57	5215:57	11	!=
LEAF_NODE	5215:57	5215:57	12	!=
FIELD	5215:60	5215:60	11	RESUNIT_CENTIMETER
LEAF_NODE	5215:60	5215:60	12	RESUNIT_CENTIMETER
LEAF_NODE	5215:78	5215:78	7	)
STATEMENTS	5216:6	5221:6	7	
LEAF_NODE	5216:6	5216:6	8	{
STATEMENTS	5217:6	5220:6	8	
EXPR_STATEMENT	5217:6	5217:42	9	tmargin = ( uint32 ) ( crop -> margins [ 0 ] ) ;
EXPR	5217:6	5217:6	10	tmargin = ( uint32 ) ( crop -> margins [ 0 ] )
ASSIGN	5217:6	5217:16	11	tmargin = ( uint32 ) ( crop -> margins [ 0 ] )
LVAL	5217:6	5217:6	12	tmargin
FIELD	5217:6	5217:6	13	tmargin
LEAF_NODE	5217:6	5217:6	14	tmargin
ASSIGN_OP	5217:14	5217:14	12	=
LEAF_NODE	5217:14	5217:14	13	=
RVAL	5217:16	5217:41	12	( uint32 ) ( crop -> margins [ 0 ] )
LEAF_NODE	5217:16	5217:16	13	(
TYPE_NAME	5217:17	5217:17	13	uint32
LEAF_NODE	5217:17	5217:17	14	uint32
LEAF_NODE	5217:23	5217:23	13	)
LEAF_NODE	5217:24	5217:24	13	(
FIELD	5217:25	5217:40	13	crop -> margins [ 0 ]
LEAF_NODE	5217:25	5217:25	14	crop
LEAF_NODE	5217:29	5217:29	14	->
LEAF_NODE	5217:31	5217:31	14	margins
LEAF_NODE	5217:38	5217:38	14	[
EXPR	5217:39	5217:39	14	0
FIELD	5217:39	5217:39	15	0
LEAF_NODE	5217:39	5217:39	16	0
LEAF_NODE	5217:40	5217:40	14	]
LEAF_NODE	5217:41	5217:41	13	)
LEAF_NODE	5217:42	5217:42	10	;
EXPR_STATEMENT	5218:6	5218:42	9	lmargin = ( uint32 ) ( crop -> margins [ 1 ] ) ;
EXPR	5218:6	5218:6	10	lmargin = ( uint32 ) ( crop -> margins [ 1 ] )
ASSIGN	5218:6	5218:16	11	lmargin = ( uint32 ) ( crop -> margins [ 1 ] )
LVAL	5218:6	5218:6	12	lmargin
FIELD	5218:6	5218:6	13	lmargin
LEAF_NODE	5218:6	5218:6	14	lmargin
ASSIGN_OP	5218:14	5218:14	12	=
LEAF_NODE	5218:14	5218:14	13	=
RVAL	5218:16	5218:41	12	( uint32 ) ( crop -> margins [ 1 ] )
LEAF_NODE	5218:16	5218:16	13	(
TYPE_NAME	5218:17	5218:17	13	uint32
LEAF_NODE	5218:17	5218:17	14	uint32
LEAF_NODE	5218:23	5218:23	13	)
LEAF_NODE	5218:24	5218:24	13	(
FIELD	5218:25	5218:40	13	crop -> margins [ 1 ]
LEAF_NODE	5218:25	5218:25	14	crop
LEAF_NODE	5218:29	5218:29	14	->
LEAF_NODE	5218:31	5218:31	14	margins
LEAF_NODE	5218:38	5218:38	14	[
EXPR	5218:39	5218:39	14	1
FIELD	5218:39	5218:39	15	1
LEAF_NODE	5218:39	5218:39	16	1
LEAF_NODE	5218:40	5218:40	14	]
LEAF_NODE	5218:41	5218:41	13	)
LEAF_NODE	5218:42	5218:42	10	;
EXPR_STATEMENT	5219:6	5219:42	9	bmargin = ( uint32 ) ( crop -> margins [ 2 ] ) ;
EXPR	5219:6	5219:6	10	bmargin = ( uint32 ) ( crop -> margins [ 2 ] )
ASSIGN	5219:6	5219:16	11	bmargin = ( uint32 ) ( crop -> margins [ 2 ] )
LVAL	5219:6	5219:6	12	bmargin
FIELD	5219:6	5219:6	13	bmargin
LEAF_NODE	5219:6	5219:6	14	bmargin
ASSIGN_OP	5219:14	5219:14	12	=
LEAF_NODE	5219:14	5219:14	13	=
RVAL	5219:16	5219:41	12	( uint32 ) ( crop -> margins [ 2 ] )
LEAF_NODE	5219:16	5219:16	13	(
TYPE_NAME	5219:17	5219:17	13	uint32
LEAF_NODE	5219:17	5219:17	14	uint32
LEAF_NODE	5219:23	5219:23	13	)
LEAF_NODE	5219:24	5219:24	13	(
FIELD	5219:25	5219:40	13	crop -> margins [ 2 ]
LEAF_NODE	5219:25	5219:25	14	crop
LEAF_NODE	5219:29	5219:29	14	->
LEAF_NODE	5219:31	5219:31	14	margins
LEAF_NODE	5219:38	5219:38	14	[
EXPR	5219:39	5219:39	14	2
FIELD	5219:39	5219:39	15	2
LEAF_NODE	5219:39	5219:39	16	2
LEAF_NODE	5219:40	5219:40	14	]
LEAF_NODE	5219:41	5219:41	13	)
LEAF_NODE	5219:42	5219:42	10	;
EXPR_STATEMENT	5220:6	5220:42	9	rmargin = ( uint32 ) ( crop -> margins [ 3 ] ) ;
EXPR	5220:6	5220:6	10	rmargin = ( uint32 ) ( crop -> margins [ 3 ] )
ASSIGN	5220:6	5220:16	11	rmargin = ( uint32 ) ( crop -> margins [ 3 ] )
LVAL	5220:6	5220:6	12	rmargin
FIELD	5220:6	5220:6	13	rmargin
LEAF_NODE	5220:6	5220:6	14	rmargin
ASSIGN_OP	5220:14	5220:14	12	=
LEAF_NODE	5220:14	5220:14	13	=
RVAL	5220:16	5220:41	12	( uint32 ) ( crop -> margins [ 3 ] )
LEAF_NODE	5220:16	5220:16	13	(
TYPE_NAME	5220:17	5220:17	13	uint32
LEAF_NODE	5220:17	5220:17	14	uint32
LEAF_NODE	5220:23	5220:23	13	)
LEAF_NODE	5220:24	5220:24	13	(
FIELD	5220:25	5220:40	13	crop -> margins [ 3 ]
LEAF_NODE	5220:25	5220:25	14	crop
LEAF_NODE	5220:29	5220:29	14	->
LEAF_NODE	5220:31	5220:31	14	margins
LEAF_NODE	5220:38	5220:38	14	[
EXPR	5220:39	5220:39	14	3
FIELD	5220:39	5220:39	15	3
LEAF_NODE	5220:39	5220:39	16	3
LEAF_NODE	5220:40	5220:40	14	]
LEAF_NODE	5220:41	5220:41	13	)
LEAF_NODE	5220:42	5220:42	10	;
LEAF_NODE	5221:6	5221:6	8	}
SELECTION	5222:4	5223:6	6	
KEYWORD	5222:4	5222:4	7	else
LEAF_NODE	5222:4	5222:4	8	else
STATEMENTS	5223:6	5228:6	7	
LEAF_NODE	5223:6	5223:6	8	{
STATEMENTS	5224:6	5227:57	8	
LEAF_NODE	5224:6	5224:6	9	tmargin
LEAF_NODE	5224:14	5224:14	9	=
LEAF_NODE	5224:16	5224:16	9	(
LEAF_NODE	5224:17	5224:17	9	uint32
LEAF_NODE	5224:23	5224:23	9	)
LEAF_NODE	5224:24	5224:24	9	(
LEAF_NODE	5224:25	5224:25	9	crop
LEAF_NODE	5224:29	5224:29	9	->
LEAF_NODE	5224:31	5224:31	9	margins
LEAF_NODE	5224:38	5224:38	9	[
LEAF_NODE	5224:39	5224:39	9	0
LEAF_NODE	5224:40	5224:40	9	]
LEAF_NODE	5224:42	5224:42	9	*
LEAF_NODE	5224:44	5224:44	9	scale
LEAF_NODE	5224:50	5224:50	9	*
LEAF_NODE	5224:52	5224:52	9	yres
LEAF_NODE	5224:56	5224:56	9	)
LEAF_NODE	5224:57	5224:57	9	;
LEAF_NODE	5225:6	5225:6	9	lmargin
LEAF_NODE	5225:14	5225:14	9	=
LEAF_NODE	5225:16	5225:16	9	(
LEAF_NODE	5225:17	5225:17	9	uint32
LEAF_NODE	5225:23	5225:23	9	)
LEAF_NODE	5225:24	5225:24	9	(
LEAF_NODE	5225:25	5225:25	9	crop
LEAF_NODE	5225:29	5225:29	9	->
LEAF_NODE	5225:31	5225:31	9	margins
LEAF_NODE	5225:38	5225:38	9	[
LEAF_NODE	5225:39	5225:39	9	1
LEAF_NODE	5225:40	5225:40	9	]
LEAF_NODE	5225:42	5225:42	9	*
LEAF_NODE	5225:44	5225:44	9	scale
LEAF_NODE	5225:50	5225:50	9	*
LEAF_NODE	5225:52	5225:52	9	xres
LEAF_NODE	5225:56	5225:56	9	)
LEAF_NODE	5225:57	5225:57	9	;
LEAF_NODE	5226:6	5226:6	9	bmargin
LEAF_NODE	5226:14	5226:14	9	=
LEAF_NODE	5226:16	5226:16	9	(
LEAF_NODE	5226:17	5226:17	9	uint32
LEAF_NODE	5226:23	5226:23	9	)
LEAF_NODE	5226:24	5226:24	9	(
LEAF_NODE	5226:25	5226:25	9	crop
LEAF_NODE	5226:29	5226:29	9	->
LEAF_NODE	5226:31	5226:31	9	margins
LEAF_NODE	5226:38	5226:38	9	[
LEAF_NODE	5226:39	5226:39	9	2
LEAF_NODE	5226:40	5226:40	9	]
LEAF_NODE	5226:42	5226:42	9	*
LEAF_NODE	5226:44	5226:44	9	scale
LEAF_NODE	5226:50	5226:50	9	*
LEAF_NODE	5226:52	5226:52	9	yres
LEAF_NODE	5226:56	5226:56	9	)
LEAF_NODE	5226:57	5226:57	9	;
LEAF_NODE	5227:6	5227:6	9	rmargin
LEAF_NODE	5227:14	5227:14	9	=
LEAF_NODE	5227:16	5227:16	9	(
LEAF_NODE	5227:17	5227:17	9	uint32
LEAF_NODE	5227:23	5227:23	9	)
LEAF_NODE	5227:24	5227:24	9	(
LEAF_NODE	5227:25	5227:25	9	crop
LEAF_NODE	5227:29	5227:29	9	->
LEAF_NODE	5227:31	5227:31	9	margins
LEAF_NODE	5227:38	5227:38	9	[
LEAF_NODE	5227:39	5227:39	9	3
LEAF_NODE	5227:40	5227:40	9	]
LEAF_NODE	5227:42	5227:42	9	*
LEAF_NODE	5227:44	5227:44	9	scale
LEAF_NODE	5227:50	5227:50	9	*
LEAF_NODE	5227:52	5227:52	9	xres
LEAF_NODE	5227:56	5227:56	9	)
LEAF_NODE	5227:57	5227:57	9	;
LEAF_NODE	5228:6	5228:6	8	}
SELECTION	5230:4	5231:6	6	
KEYWORD	5230:4	5230:4	7	if
LEAF_NODE	5230:4	5230:4	8	if
LEAF_NODE	5230:7	5230:7	7	(
CONDITION	5230:8	5230:8	7	( lmargin + rmargin ) > image -> width
EXPR	5230:8	5230:30	8	( lmargin + rmargin ) > image -> width
LEAF_NODE	5230:8	5230:8	9	(
FIELD	5230:9	5230:9	9	lmargin
LEAF_NODE	5230:9	5230:9	10	lmargin
LEAF_NODE	5230:17	5230:17	9	+
FIELD	5230:19	5230:19	9	rmargin
LEAF_NODE	5230:19	5230:19	10	rmargin
LEAF_NODE	5230:26	5230:26	9	)
REL_OPERATOR	5230:28	5230:28	9	>
LEAF_NODE	5230:28	5230:28	10	>
FIELD	5230:30	5230:37	9	image -> width
LEAF_NODE	5230:30	5230:30	10	image
LEAF_NODE	5230:35	5230:35	10	->
LEAF_NODE	5230:37	5230:37	10	width
LEAF_NODE	5230:42	5230:42	7	)
STATEMENTS	5231:6	5236:6	7	
LEAF_NODE	5231:6	5231:6	8	{
STATEMENTS	5232:6	5235:6	8	
EXPR_STATEMENT	5232:6	5232:97	9	TIFFError ( "computeInputPixelOffsets" , "Combined left and right margins exceed image width" ) ;
EXPR	5232:6	5232:6	10	TIFFError ( "computeInputPixelOffsets" , "Combined left and right margins exceed image width" )
FUNCTION_CALL	5232:6	5232:96	11	TIFFError ( "computeInputPixelOffsets" , "Combined left and right margins exceed image width" )
CALLEE	5232:6	5232:6	12	TIFFError
LEAF_NODE	5232:6	5232:6	13	TIFFError
LEAF_NODE	5232:15	5232:15	12	(
ARGUMENT	5232:16	5232:16	12	"computeInputPixelOffsets"
FIELD	5232:16	5232:16	13	"computeInputPixelOffsets"
LEAF_NODE	5232:16	5232:16	14	"computeInputPixelOffsets"
LEAF_NODE	5232:42	5232:42	12	,
ARGUMENT	5232:44	5232:44	12	"Combined left and right margins exceed image width"
FIELD	5232:44	5232:44	13	"Combined left and right margins exceed image width"
LEAF_NODE	5232:44	5232:44	14	"Combined left and right margins exceed image width"
LEAF_NODE	5232:96	5232:96	12	)
LEAF_NODE	5232:97	5232:97	10	;
EXPR_STATEMENT	5233:6	5233:26	9	lmargin = ( uint32 ) 0 ;
EXPR	5233:6	5233:6	10	lmargin = ( uint32 ) 0
ASSIGN	5233:6	5233:16	11	lmargin = ( uint32 ) 0
LVAL	5233:6	5233:6	12	lmargin
FIELD	5233:6	5233:6	13	lmargin
LEAF_NODE	5233:6	5233:6	14	lmargin
ASSIGN_OP	5233:14	5233:14	12	=
LEAF_NODE	5233:14	5233:14	13	=
RVAL	5233:16	5233:25	12	( uint32 ) 0
LEAF_NODE	5233:16	5233:16	13	(
TYPE_NAME	5233:17	5233:17	13	uint32
LEAF_NODE	5233:17	5233:17	14	uint32
LEAF_NODE	5233:23	5233:23	13	)
FIELD	5233:25	5233:25	13	0
LEAF_NODE	5233:25	5233:25	14	0
LEAF_NODE	5233:26	5233:26	10	;
EXPR_STATEMENT	5234:6	5234:26	9	rmargin = ( uint32 ) 0 ;
EXPR	5234:6	5234:6	10	rmargin = ( uint32 ) 0
ASSIGN	5234:6	5234:16	11	rmargin = ( uint32 ) 0
LVAL	5234:6	5234:6	12	rmargin
FIELD	5234:6	5234:6	13	rmargin
LEAF_NODE	5234:6	5234:6	14	rmargin
ASSIGN_OP	5234:14	5234:14	12	=
LEAF_NODE	5234:14	5234:14	13	=
RVAL	5234:16	5234:25	12	( uint32 ) 0
LEAF_NODE	5234:16	5234:16	13	(
TYPE_NAME	5234:17	5234:17	13	uint32
LEAF_NODE	5234:17	5234:17	14	uint32
LEAF_NODE	5234:23	5234:23	13	)
FIELD	5234:25	5234:25	13	0
LEAF_NODE	5234:25	5234:25	14	0
LEAF_NODE	5234:26	5234:26	10	;
JUMP_STATEMENT	5235:6	5235:17	9	return ( - 1 ) ;
KEYWORD	5235:6	5235:6	10	return
LEAF_NODE	5235:6	5235:6	11	return
DESTINATION	5235:13	5235:13	10	( - 1 )
EXPR	5235:13	5235:16	11	( - 1 )
LEAF_NODE	5235:13	5235:13	12	(
UNARY_EXPR	5235:14	5235:15	12	- 1
UNARY_OPERATOR	5235:14	5235:14	13	-
LEAF_NODE	5235:14	5235:14	14	-
FIELD	5235:15	5235:15	13	1
LEAF_NODE	5235:15	5235:15	14	1
LEAF_NODE	5235:16	5235:16	12	)
LEAF_NODE	5235:17	5235:17	10	;
LEAF_NODE	5236:6	5236:6	8	}
SELECTION	5237:4	5238:6	6	
KEYWORD	5237:4	5237:4	7	if
LEAF_NODE	5237:4	5237:4	8	if
LEAF_NODE	5237:7	5237:7	7	(
CONDITION	5237:8	5237:8	7	( tmargin + bmargin ) > image -> length
EXPR	5237:8	5237:30	8	( tmargin + bmargin ) > image -> length
LEAF_NODE	5237:8	5237:8	9	(
FIELD	5237:9	5237:9	9	tmargin
LEAF_NODE	5237:9	5237:9	10	tmargin
LEAF_NODE	5237:17	5237:17	9	+
FIELD	5237:19	5237:19	9	bmargin
LEAF_NODE	5237:19	5237:19	10	bmargin
LEAF_NODE	5237:26	5237:26	9	)
REL_OPERATOR	5237:28	5237:28	9	>
LEAF_NODE	5237:28	5237:28	10	>
FIELD	5237:30	5237:37	9	image -> length
LEAF_NODE	5237:30	5237:30	10	image
LEAF_NODE	5237:35	5237:35	10	->
LEAF_NODE	5237:37	5237:37	10	length
LEAF_NODE	5237:43	5237:43	7	)
STATEMENTS	5238:6	5243:6	7	
LEAF_NODE	5238:6	5238:6	8	{
STATEMENTS	5239:6	5242:6	8	
EXPR_STATEMENT	5239:6	5239:98	9	TIFFError ( "computeInputPixelOffsets" , "Combined top and bottom margins exceed image length" ) ;
EXPR	5239:6	5239:6	10	TIFFError ( "computeInputPixelOffsets" , "Combined top and bottom margins exceed image length" )
FUNCTION_CALL	5239:6	5239:97	11	TIFFError ( "computeInputPixelOffsets" , "Combined top and bottom margins exceed image length" )
CALLEE	5239:6	5239:6	12	TIFFError
LEAF_NODE	5239:6	5239:6	13	TIFFError
LEAF_NODE	5239:15	5239:15	12	(
ARGUMENT	5239:16	5239:16	12	"computeInputPixelOffsets"
FIELD	5239:16	5239:16	13	"computeInputPixelOffsets"
LEAF_NODE	5239:16	5239:16	14	"computeInputPixelOffsets"
LEAF_NODE	5239:42	5239:42	12	,
ARGUMENT	5239:44	5239:44	12	"Combined top and bottom margins exceed image length"
FIELD	5239:44	5239:44	13	"Combined top and bottom margins exceed image length"
LEAF_NODE	5239:44	5239:44	14	"Combined top and bottom margins exceed image length"
LEAF_NODE	5239:97	5239:97	12	)
LEAF_NODE	5239:98	5239:98	10	;
EXPR_STATEMENT	5240:6	5240:26	9	tmargin = ( uint32 ) 0 ;
EXPR	5240:6	5240:6	10	tmargin = ( uint32 ) 0
ASSIGN	5240:6	5240:16	11	tmargin = ( uint32 ) 0
LVAL	5240:6	5240:6	12	tmargin
FIELD	5240:6	5240:6	13	tmargin
LEAF_NODE	5240:6	5240:6	14	tmargin
ASSIGN_OP	5240:14	5240:14	12	=
LEAF_NODE	5240:14	5240:14	13	=
RVAL	5240:16	5240:25	12	( uint32 ) 0
LEAF_NODE	5240:16	5240:16	13	(
TYPE_NAME	5240:17	5240:17	13	uint32
LEAF_NODE	5240:17	5240:17	14	uint32
LEAF_NODE	5240:23	5240:23	13	)
FIELD	5240:25	5240:25	13	0
LEAF_NODE	5240:25	5240:25	14	0
LEAF_NODE	5240:26	5240:26	10	;
EXPR_STATEMENT	5241:6	5241:26	9	bmargin = ( uint32 ) 0 ;
EXPR	5241:6	5241:6	10	bmargin = ( uint32 ) 0
ASSIGN	5241:6	5241:16	11	bmargin = ( uint32 ) 0
LVAL	5241:6	5241:6	12	bmargin
FIELD	5241:6	5241:6	13	bmargin
LEAF_NODE	5241:6	5241:6	14	bmargin
ASSIGN_OP	5241:14	5241:14	12	=
LEAF_NODE	5241:14	5241:14	13	=
RVAL	5241:16	5241:25	12	( uint32 ) 0
LEAF_NODE	5241:16	5241:16	13	(
TYPE_NAME	5241:17	5241:17	13	uint32
LEAF_NODE	5241:17	5241:17	14	uint32
LEAF_NODE	5241:23	5241:23	13	)
FIELD	5241:25	5241:25	13	0
LEAF_NODE	5241:25	5241:25	14	0
LEAF_NODE	5241:26	5241:26	10	;
JUMP_STATEMENT	5242:6	5242:17	9	return ( - 1 ) ;
KEYWORD	5242:6	5242:6	10	return
LEAF_NODE	5242:6	5242:6	11	return
DESTINATION	5242:13	5242:13	10	( - 1 )
EXPR	5242:13	5242:16	11	( - 1 )
LEAF_NODE	5242:13	5242:13	12	(
UNARY_EXPR	5242:14	5242:15	12	- 1
UNARY_OPERATOR	5242:14	5242:14	13	-
LEAF_NODE	5242:14	5242:14	14	-
FIELD	5242:15	5242:15	13	1
LEAF_NODE	5242:15	5242:15	14	1
LEAF_NODE	5242:16	5242:16	12	)
LEAF_NODE	5242:17	5242:17	10	;
LEAF_NODE	5243:6	5243:6	8	}
LEAF_NODE	5244:4	5244:4	5	}
SELECTION	5245:2	5246:4	3	
KEYWORD	5245:2	5245:2	4	else
LEAF_NODE	5245:2	5245:2	5	else
STATEMENTS	5246:4	5251:4	4	
LEAF_NODE	5246:4	5246:4	5	{
STATEMENTS	5247:4	5250:4	5	
EXPR_STATEMENT	5247:4	5247:24	6	tmargin = ( uint32 ) 0 ;
EXPR	5247:4	5247:4	7	tmargin = ( uint32 ) 0
ASSIGN	5247:4	5247:14	8	tmargin = ( uint32 ) 0
LVAL	5247:4	5247:4	9	tmargin
FIELD	5247:4	5247:4	10	tmargin
LEAF_NODE	5247:4	5247:4	11	tmargin
ASSIGN_OP	5247:12	5247:12	9	=
LEAF_NODE	5247:12	5247:12	10	=
RVAL	5247:14	5247:23	9	( uint32 ) 0
LEAF_NODE	5247:14	5247:14	10	(
TYPE_NAME	5247:15	5247:15	10	uint32
LEAF_NODE	5247:15	5247:15	11	uint32
LEAF_NODE	5247:21	5247:21	10	)
FIELD	5247:23	5247:23	10	0
LEAF_NODE	5247:23	5247:23	11	0
LEAF_NODE	5247:24	5247:24	7	;
EXPR_STATEMENT	5248:4	5248:24	6	lmargin = ( uint32 ) 0 ;
EXPR	5248:4	5248:4	7	lmargin = ( uint32 ) 0
ASSIGN	5248:4	5248:14	8	lmargin = ( uint32 ) 0
LVAL	5248:4	5248:4	9	lmargin
FIELD	5248:4	5248:4	10	lmargin
LEAF_NODE	5248:4	5248:4	11	lmargin
ASSIGN_OP	5248:12	5248:12	9	=
LEAF_NODE	5248:12	5248:12	10	=
RVAL	5248:14	5248:23	9	( uint32 ) 0
LEAF_NODE	5248:14	5248:14	10	(
TYPE_NAME	5248:15	5248:15	10	uint32
LEAF_NODE	5248:15	5248:15	11	uint32
LEAF_NODE	5248:21	5248:21	10	)
FIELD	5248:23	5248:23	10	0
LEAF_NODE	5248:23	5248:23	11	0
LEAF_NODE	5248:24	5248:24	7	;
EXPR_STATEMENT	5249:4	5249:24	6	bmargin = ( uint32 ) 0 ;
EXPR	5249:4	5249:4	7	bmargin = ( uint32 ) 0
ASSIGN	5249:4	5249:14	8	bmargin = ( uint32 ) 0
LVAL	5249:4	5249:4	9	bmargin
FIELD	5249:4	5249:4	10	bmargin
LEAF_NODE	5249:4	5249:4	11	bmargin
ASSIGN_OP	5249:12	5249:12	9	=
LEAF_NODE	5249:12	5249:12	10	=
RVAL	5249:14	5249:23	9	( uint32 ) 0
LEAF_NODE	5249:14	5249:14	10	(
TYPE_NAME	5249:15	5249:15	10	uint32
LEAF_NODE	5249:15	5249:15	11	uint32
LEAF_NODE	5249:21	5249:21	10	)
FIELD	5249:23	5249:23	10	0
LEAF_NODE	5249:23	5249:23	11	0
LEAF_NODE	5249:24	5249:24	7	;
EXPR_STATEMENT	5250:4	5250:24	6	rmargin = ( uint32 ) 0 ;
EXPR	5250:4	5250:4	7	rmargin = ( uint32 ) 0
ASSIGN	5250:4	5250:14	8	rmargin = ( uint32 ) 0
LVAL	5250:4	5250:4	9	rmargin
FIELD	5250:4	5250:4	10	rmargin
LEAF_NODE	5250:4	5250:4	11	rmargin
ASSIGN_OP	5250:12	5250:12	9	=
LEAF_NODE	5250:12	5250:12	10	=
RVAL	5250:14	5250:23	9	( uint32 ) 0
LEAF_NODE	5250:14	5250:14	10	(
TYPE_NAME	5250:15	5250:15	10	uint32
LEAF_NODE	5250:15	5250:15	11	uint32
LEAF_NODE	5250:21	5250:21	10	)
FIELD	5250:23	5250:23	10	0
LEAF_NODE	5250:23	5250:23	11	0
LEAF_NODE	5250:24	5250:24	7	;
LEAF_NODE	5251:4	5251:4	5	}
SELECTION	5254:2	5255:4	3	
KEYWORD	5254:2	5254:2	4	if
LEAF_NODE	5254:2	5254:2	5	if
LEAF_NODE	5254:5	5254:5	4	(
CONDITION	5254:6	5254:6	4	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
EXPR	5254:6	5254:6	5	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
AND	5254:6	5254:40	6	crop -> res_unit != RESUNIT_INCH && crop -> res_unit != RESUNIT_CENTIMETER
EXPR	5254:6	5254:24	7	crop -> res_unit != RESUNIT_INCH
FIELD	5254:6	5254:12	8	crop -> res_unit
LEAF_NODE	5254:6	5254:6	9	crop
LEAF_NODE	5254:10	5254:10	9	->
LEAF_NODE	5254:12	5254:12	9	res_unit
EQ_OPERATOR	5254:21	5254:21	8	!=
LEAF_NODE	5254:21	5254:21	9	!=
FIELD	5254:24	5254:24	8	RESUNIT_INCH
LEAF_NODE	5254:24	5254:24	9	RESUNIT_INCH
LEAF_NODE	5254:37	5254:37	7	&&
EXPR	5254:40	5254:58	7	crop -> res_unit != RESUNIT_CENTIMETER
FIELD	5254:40	5254:46	8	crop -> res_unit
LEAF_NODE	5254:40	5254:40	9	crop
LEAF_NODE	5254:44	5254:44	9	->
LEAF_NODE	5254:46	5254:46	9	res_unit
EQ_OPERATOR	5254:55	5254:55	8	!=
LEAF_NODE	5254:55	5254:55	9	!=
FIELD	5254:58	5254:58	8	RESUNIT_CENTIMETER
LEAF_NODE	5254:58	5254:58	9	RESUNIT_CENTIMETER
LEAF_NODE	5254:76	5254:76	4	)
STATEMENTS	5255:4	5265:4	4	
LEAF_NODE	5255:4	5255:4	5	{
STATEMENTS	5256:4	5263:4	5	
SELECTION	5256:4	5257:6	6	
KEYWORD	5256:4	5256:4	7	if
LEAF_NODE	5256:4	5256:4	8	if
LEAF_NODE	5256:7	5256:7	7	(
CONDITION	5256:8	5256:8	7	crop -> crop_mode & CROP_WIDTH
EXPR	5256:8	5256:26	8	crop -> crop_mode & CROP_WIDTH
FIELD	5256:8	5256:14	9	crop -> crop_mode
LEAF_NODE	5256:8	5256:8	10	crop
LEAF_NODE	5256:12	5256:12	10	->
LEAF_NODE	5256:14	5256:14	10	crop_mode
LEAF_NODE	5256:24	5256:24	9	&
FIELD	5256:26	5256:26	9	CROP_WIDTH
LEAF_NODE	5256:26	5256:26	10	CROP_WIDTH
LEAF_NODE	5256:36	5256:36	7	)
STATEMENTS	5257:6	5257:6	7	
EXPR_STATEMENT	5257:6	5257:33	8	width = ( uint32 ) crop -> width ;
EXPR	5257:6	5257:6	9	width = ( uint32 ) crop -> width
ASSIGN	5257:6	5257:14	10	width = ( uint32 ) crop -> width
LVAL	5257:6	5257:6	11	width
FIELD	5257:6	5257:6	12	width
LEAF_NODE	5257:6	5257:6	13	width
ASSIGN_OP	5257:12	5257:12	11	=
LEAF_NODE	5257:12	5257:12	12	=
RVAL	5257:14	5257:22	11	( uint32 ) crop -> width
LEAF_NODE	5257:14	5257:14	12	(
TYPE_NAME	5257:15	5257:15	12	uint32
LEAF_NODE	5257:15	5257:15	13	uint32
LEAF_NODE	5257:21	5257:21	12	)
FIELD	5257:22	5257:28	12	crop -> width
LEAF_NODE	5257:22	5257:22	13	crop
LEAF_NODE	5257:26	5257:26	13	->
LEAF_NODE	5257:28	5257:28	13	width
LEAF_NODE	5257:33	5257:33	9	;
SELECTION	5258:4	5259:6	6	
KEYWORD	5258:4	5258:4	7	else
LEAF_NODE	5258:4	5258:4	8	else
STATEMENTS	5259:6	5259:6	7	
EXPR_STATEMENT	5259:6	5259:46	8	width = image -> width - lmargin - rmargin ;
EXPR	5259:6	5259:6	9	width = image -> width - lmargin - rmargin
ASSIGN	5259:6	5259:14	10	width = image -> width - lmargin - rmargin
LVAL	5259:6	5259:6	11	width
FIELD	5259:6	5259:6	12	width
LEAF_NODE	5259:6	5259:6	13	width
ASSIGN_OP	5259:12	5259:12	11	=
LEAF_NODE	5259:12	5259:12	12	=
RVAL	5259:14	5259:39	11	image -> width - lmargin - rmargin
FIELD	5259:14	5259:21	12	image -> width
LEAF_NODE	5259:14	5259:14	13	image
LEAF_NODE	5259:19	5259:19	13	->
LEAF_NODE	5259:21	5259:21	13	width
LEAF_NODE	5259:27	5259:27	12	-
FIELD	5259:29	5259:29	12	lmargin
LEAF_NODE	5259:29	5259:29	13	lmargin
LEAF_NODE	5259:37	5259:37	12	-
FIELD	5259:39	5259:39	12	rmargin
LEAF_NODE	5259:39	5259:39	13	rmargin
LEAF_NODE	5259:46	5259:46	9	;
SELECTION	5261:4	5262:6	6	
KEYWORD	5261:4	5261:4	7	if
LEAF_NODE	5261:4	5261:4	8	if
LEAF_NODE	5261:7	5261:7	7	(
CONDITION	5261:8	5261:8	7	crop -> crop_mode & CROP_LENGTH
EXPR	5261:8	5261:26	8	crop -> crop_mode & CROP_LENGTH
FIELD	5261:8	5261:14	9	crop -> crop_mode
LEAF_NODE	5261:8	5261:8	10	crop
LEAF_NODE	5261:12	5261:12	10	->
LEAF_NODE	5261:14	5261:14	10	crop_mode
LEAF_NODE	5261:24	5261:24	9	&
FIELD	5261:26	5261:26	9	CROP_LENGTH
LEAF_NODE	5261:26	5261:26	10	CROP_LENGTH
LEAF_NODE	5261:37	5261:37	7	)
STATEMENTS	5262:6	5262:6	7	
EXPR_STATEMENT	5262:6	5262:36	8	length = ( uint32 ) crop -> length ;
EXPR	5262:6	5262:6	9	length = ( uint32 ) crop -> length
ASSIGN	5262:6	5262:16	10	length = ( uint32 ) crop -> length
LVAL	5262:6	5262:6	11	length
FIELD	5262:6	5262:6	12	length
LEAF_NODE	5262:6	5262:6	13	length
ASSIGN_OP	5262:14	5262:14	11	=
LEAF_NODE	5262:14	5262:14	12	=
RVAL	5262:16	5262:24	11	( uint32 ) crop -> length
LEAF_NODE	5262:16	5262:16	12	(
TYPE_NAME	5262:17	5262:17	12	uint32
LEAF_NODE	5262:17	5262:17	13	uint32
LEAF_NODE	5262:23	5262:23	12	)
FIELD	5262:24	5262:30	12	crop -> length
LEAF_NODE	5262:24	5262:24	13	crop
LEAF_NODE	5262:28	5262:28	13	->
LEAF_NODE	5262:30	5262:30	13	length
LEAF_NODE	5262:36	5262:36	9	;
SELECTION	5263:4	5264:6	6	
KEYWORD	5263:4	5263:4	7	else
LEAF_NODE	5263:4	5263:4	8	else
STATEMENTS	5264:6	5264:6	7	
EXPR_STATEMENT	5264:6	5264:48	8	length = image -> length - tmargin - bmargin ;
EXPR	5264:6	5264:6	9	length = image -> length - tmargin - bmargin
ASSIGN	5264:6	5264:15	10	length = image -> length - tmargin - bmargin
LVAL	5264:6	5264:6	11	length
FIELD	5264:6	5264:6	12	length
LEAF_NODE	5264:6	5264:6	13	length
ASSIGN_OP	5264:13	5264:13	11	=
LEAF_NODE	5264:13	5264:13	12	=
RVAL	5264:15	5264:41	11	image -> length - tmargin - bmargin
FIELD	5264:15	5264:22	12	image -> length
LEAF_NODE	5264:15	5264:15	13	image
LEAF_NODE	5264:20	5264:20	13	->
LEAF_NODE	5264:22	5264:22	13	length
LEAF_NODE	5264:29	5264:29	12	-
FIELD	5264:31	5264:31	12	tmargin
LEAF_NODE	5264:31	5264:31	13	tmargin
LEAF_NODE	5264:39	5264:39	12	-
FIELD	5264:41	5264:41	12	bmargin
LEAF_NODE	5264:41	5264:41	13	bmargin
LEAF_NODE	5264:48	5264:48	9	;
LEAF_NODE	5265:4	5265:4	5	}
SELECTION	5266:2	5267:4	3	
KEYWORD	5266:2	5266:2	4	else
LEAF_NODE	5266:2	5266:2	5	else
STATEMENTS	5267:4	5277:4	4	
LEAF_NODE	5267:4	5267:4	5	{
STATEMENTS	5268:4	5275:4	5	
SELECTION	5268:4	5269:6	6	
KEYWORD	5268:4	5268:4	7	if
LEAF_NODE	5268:4	5268:4	8	if
LEAF_NODE	5268:7	5268:7	7	(
CONDITION	5268:8	5268:8	7	crop -> crop_mode & CROP_WIDTH
EXPR	5268:8	5268:26	8	crop -> crop_mode & CROP_WIDTH
FIELD	5268:8	5268:14	9	crop -> crop_mode
LEAF_NODE	5268:8	5268:8	10	crop
LEAF_NODE	5268:12	5268:12	10	->
LEAF_NODE	5268:14	5268:14	10	crop_mode
LEAF_NODE	5268:24	5268:24	9	&
FIELD	5268:26	5268:26	9	CROP_WIDTH
LEAF_NODE	5268:26	5268:26	10	CROP_WIDTH
LEAF_NODE	5268:36	5268:36	7	)
STATEMENTS	5269:6	5269:6	7	
LEAF_NODE	5269:6	5269:6	8	width
LEAF_NODE	5269:12	5269:12	6	=
LEAF_NODE	5269:14	5269:14	6	(
LEAF_NODE	5269:15	5269:15	6	uint32
LEAF_NODE	5269:21	5269:21	6	)
LEAF_NODE	5269:22	5269:22	6	(
LEAF_NODE	5269:23	5269:23	6	crop
LEAF_NODE	5269:27	5269:27	6	->
LEAF_NODE	5269:29	5269:29	6	width
LEAF_NODE	5269:35	5269:35	6	*
LEAF_NODE	5269:37	5269:37	6	scale
LEAF_NODE	5269:43	5269:43	6	*
LEAF_NODE	5269:45	5269:45	6	image
LEAF_NODE	5269:50	5269:50	6	->
LEAF_NODE	5269:52	5269:52	6	xres
LEAF_NODE	5269:56	5269:56	6	)
LEAF_NODE	5269:57	5269:57	6	;
SELECTION	5270:4	5271:6	6	
KEYWORD	5270:4	5270:4	7	else
LEAF_NODE	5270:4	5270:4	8	else
STATEMENTS	5271:6	5271:6	7	
EXPR_STATEMENT	5271:6	5271:46	8	width = image -> width - lmargin - rmargin ;
EXPR	5271:6	5271:6	9	width = image -> width - lmargin - rmargin
ASSIGN	5271:6	5271:14	10	width = image -> width - lmargin - rmargin
LVAL	5271:6	5271:6	11	width
FIELD	5271:6	5271:6	12	width
LEAF_NODE	5271:6	5271:6	13	width
ASSIGN_OP	5271:12	5271:12	11	=
LEAF_NODE	5271:12	5271:12	12	=
RVAL	5271:14	5271:39	11	image -> width - lmargin - rmargin
FIELD	5271:14	5271:21	12	image -> width
LEAF_NODE	5271:14	5271:14	13	image
LEAF_NODE	5271:19	5271:19	13	->
LEAF_NODE	5271:21	5271:21	13	width
LEAF_NODE	5271:27	5271:27	12	-
FIELD	5271:29	5271:29	12	lmargin
LEAF_NODE	5271:29	5271:29	13	lmargin
LEAF_NODE	5271:37	5271:37	12	-
FIELD	5271:39	5271:39	12	rmargin
LEAF_NODE	5271:39	5271:39	13	rmargin
LEAF_NODE	5271:46	5271:46	9	;
SELECTION	5273:4	5274:6	6	
KEYWORD	5273:4	5273:4	7	if
LEAF_NODE	5273:4	5273:4	8	if
LEAF_NODE	5273:7	5273:7	7	(
CONDITION	5273:8	5273:8	7	crop -> crop_mode & CROP_LENGTH
EXPR	5273:8	5273:26	8	crop -> crop_mode & CROP_LENGTH
FIELD	5273:8	5273:14	9	crop -> crop_mode
LEAF_NODE	5273:8	5273:8	10	crop
LEAF_NODE	5273:12	5273:12	10	->
LEAF_NODE	5273:14	5273:14	10	crop_mode
LEAF_NODE	5273:24	5273:24	9	&
FIELD	5273:26	5273:26	9	CROP_LENGTH
LEAF_NODE	5273:26	5273:26	10	CROP_LENGTH
LEAF_NODE	5273:37	5273:37	7	)
STATEMENTS	5274:6	5274:6	7	
LEAF_NODE	5274:6	5274:6	8	length
LEAF_NODE	5274:14	5274:14	6	=
LEAF_NODE	5274:16	5274:16	6	(
LEAF_NODE	5274:17	5274:17	6	uint32
LEAF_NODE	5274:23	5274:23	6	)
LEAF_NODE	5274:24	5274:24	6	(
LEAF_NODE	5274:25	5274:25	6	crop
LEAF_NODE	5274:29	5274:29	6	->
LEAF_NODE	5274:31	5274:31	6	length
LEAF_NODE	5274:38	5274:38	6	*
LEAF_NODE	5274:40	5274:40	6	scale
LEAF_NODE	5274:46	5274:46	6	*
LEAF_NODE	5274:48	5274:48	6	image
LEAF_NODE	5274:53	5274:53	6	->
LEAF_NODE	5274:55	5274:55	6	yres
LEAF_NODE	5274:59	5274:59	6	)
LEAF_NODE	5274:60	5274:60	6	;
SELECTION	5275:4	5276:6	6	
KEYWORD	5275:4	5275:4	7	else
LEAF_NODE	5275:4	5275:4	8	else
STATEMENTS	5276:6	5276:6	7	
EXPR_STATEMENT	5276:6	5276:48	8	length = image -> length - tmargin - bmargin ;
EXPR	5276:6	5276:6	9	length = image -> length - tmargin - bmargin
ASSIGN	5276:6	5276:15	10	length = image -> length - tmargin - bmargin
LVAL	5276:6	5276:6	11	length
FIELD	5276:6	5276:6	12	length
LEAF_NODE	5276:6	5276:6	13	length
ASSIGN_OP	5276:13	5276:13	11	=
LEAF_NODE	5276:13	5276:13	12	=
RVAL	5276:15	5276:41	11	image -> length - tmargin - bmargin
FIELD	5276:15	5276:22	12	image -> length
LEAF_NODE	5276:15	5276:15	13	image
LEAF_NODE	5276:20	5276:20	13	->
LEAF_NODE	5276:22	5276:22	13	length
LEAF_NODE	5276:29	5276:29	12	-
FIELD	5276:31	5276:31	12	tmargin
LEAF_NODE	5276:31	5276:31	13	tmargin
LEAF_NODE	5276:39	5276:39	12	-
FIELD	5276:41	5276:41	12	bmargin
LEAF_NODE	5276:41	5276:41	13	bmargin
LEAF_NODE	5276:48	5276:48	9	;
LEAF_NODE	5277:4	5277:4	5	}
EXPR_STATEMENT	5279:2	5279:24	3	off -> tmargin = tmargin ;
EXPR	5279:2	5279:2	4	off -> tmargin = tmargin
ASSIGN	5279:2	5279:17	5	off -> tmargin = tmargin
LVAL	5279:2	5279:2	6	off -> tmargin
FIELD	5279:2	5279:7	7	off -> tmargin
LEAF_NODE	5279:2	5279:2	8	off
LEAF_NODE	5279:5	5279:5	8	->
LEAF_NODE	5279:7	5279:7	8	tmargin
ASSIGN_OP	5279:15	5279:15	6	=
LEAF_NODE	5279:15	5279:15	7	=
RVAL	5279:17	5279:17	6	tmargin
FIELD	5279:17	5279:17	7	tmargin
LEAF_NODE	5279:17	5279:17	8	tmargin
LEAF_NODE	5279:24	5279:24	4	;
EXPR_STATEMENT	5280:2	5280:24	3	off -> bmargin = bmargin ;
EXPR	5280:2	5280:2	4	off -> bmargin = bmargin
ASSIGN	5280:2	5280:17	5	off -> bmargin = bmargin
LVAL	5280:2	5280:2	6	off -> bmargin
FIELD	5280:2	5280:7	7	off -> bmargin
LEAF_NODE	5280:2	5280:2	8	off
LEAF_NODE	5280:5	5280:5	8	->
LEAF_NODE	5280:7	5280:7	8	bmargin
ASSIGN_OP	5280:15	5280:15	6	=
LEAF_NODE	5280:15	5280:15	7	=
RVAL	5280:17	5280:17	6	bmargin
FIELD	5280:17	5280:17	7	bmargin
LEAF_NODE	5280:17	5280:17	8	bmargin
LEAF_NODE	5280:24	5280:24	4	;
EXPR_STATEMENT	5281:2	5281:24	3	off -> lmargin = lmargin ;
EXPR	5281:2	5281:2	4	off -> lmargin = lmargin
ASSIGN	5281:2	5281:17	5	off -> lmargin = lmargin
LVAL	5281:2	5281:2	6	off -> lmargin
FIELD	5281:2	5281:7	7	off -> lmargin
LEAF_NODE	5281:2	5281:2	8	off
LEAF_NODE	5281:5	5281:5	8	->
LEAF_NODE	5281:7	5281:7	8	lmargin
ASSIGN_OP	5281:15	5281:15	6	=
LEAF_NODE	5281:15	5281:15	7	=
RVAL	5281:17	5281:17	6	lmargin
FIELD	5281:17	5281:17	7	lmargin
LEAF_NODE	5281:17	5281:17	8	lmargin
LEAF_NODE	5281:24	5281:24	4	;
EXPR_STATEMENT	5282:2	5282:24	3	off -> rmargin = rmargin ;
EXPR	5282:2	5282:2	4	off -> rmargin = rmargin
ASSIGN	5282:2	5282:17	5	off -> rmargin = rmargin
LVAL	5282:2	5282:2	6	off -> rmargin
FIELD	5282:2	5282:7	7	off -> rmargin
LEAF_NODE	5282:2	5282:2	8	off
LEAF_NODE	5282:5	5282:5	8	->
LEAF_NODE	5282:7	5282:7	8	rmargin
ASSIGN_OP	5282:15	5282:15	6	=
LEAF_NODE	5282:15	5282:15	7	=
RVAL	5282:17	5282:17	6	rmargin
FIELD	5282:17	5282:17	7	rmargin
LEAF_NODE	5282:17	5282:17	8	rmargin
LEAF_NODE	5282:24	5282:24	4	;
SELECTION	5287:2	5287:26	3	
KEYWORD	5287:2	5287:2	4	switch
LEAF_NODE	5287:2	5287:2	5	switch
LEAF_NODE	5287:9	5287:9	4	(
CONDITION	5287:10	5287:10	4	crop -> edge_ref
EXPR	5287:10	5287:10	5	crop -> edge_ref
FIELD	5287:10	5287:16	6	crop -> edge_ref
LEAF_NODE	5287:10	5287:10	7	crop
LEAF_NODE	5287:14	5287:14	7	->
LEAF_NODE	5287:16	5287:16	7	edge_ref
LEAF_NODE	5287:24	5287:24	4	)
STATEMENTS	5287:26	5329:4	4	
LEAF_NODE	5287:26	5287:26	5	{
STATEMENTS	5288:4	5328:9	5	
LABEL	5288:4	5288:20	6	case EDGE_BOTTOM :
LEAF_NODE	5288:4	5288:4	7	case
LEAF_NODE	5288:9	5288:9	7	EDGE_BOTTOM
LEAF_NODE	5288:20	5288:20	7	:
EXPR_STATEMENT	5289:9	5289:25	6	startx = lmargin ;
EXPR	5289:9	5289:9	7	startx = lmargin
ASSIGN	5289:9	5289:18	8	startx = lmargin
LVAL	5289:9	5289:9	9	startx
FIELD	5289:9	5289:9	10	startx
LEAF_NODE	5289:9	5289:9	11	startx
ASSIGN_OP	5289:16	5289:16	9	=
LEAF_NODE	5289:16	5289:16	10	=
RVAL	5289:18	5289:18	9	lmargin
FIELD	5289:18	5289:18	10	lmargin
LEAF_NODE	5289:18	5289:18	11	lmargin
LEAF_NODE	5289:25	5289:25	7	;
SELECTION	5290:9	5291:11	6	
KEYWORD	5290:9	5290:9	7	if
LEAF_NODE	5290:9	5290:9	8	if
LEAF_NODE	5290:12	5290:12	7	(
CONDITION	5290:13	5290:13	7	( startx + width ) >= ( image -> width - rmargin )
EXPR	5290:13	5290:56	8	( startx + width ) >= ( image -> width - rmargin )
LEAF_NODE	5290:13	5290:13	9	(
FIELD	5290:14	5290:14	9	startx
LEAF_NODE	5290:14	5290:14	10	startx
LEAF_NODE	5290:21	5290:21	9	+
FIELD	5290:23	5290:23	9	width
LEAF_NODE	5290:23	5290:23	10	width
LEAF_NODE	5290:28	5290:28	9	)
REL_OPERATOR	5290:30	5290:30	9	>=
LEAF_NODE	5290:30	5290:30	10	>=
LEAF_NODE	5290:33	5290:33	9	(
FIELD	5290:34	5290:41	9	image -> width
LEAF_NODE	5290:34	5290:34	10	image
LEAF_NODE	5290:39	5290:39	10	->
LEAF_NODE	5290:41	5290:41	10	width
LEAF_NODE	5290:47	5290:47	9	-
FIELD	5290:49	5290:49	9	rmargin
LEAF_NODE	5290:49	5290:49	10	rmargin
LEAF_NODE	5290:56	5290:56	9	)
LEAF_NODE	5290:57	5290:57	7	)
STATEMENTS	5291:11	5291:11	7	
EXPR_STATEMENT	5291:11	5291:44	8	endx = image -> width - rmargin - 1 ;
EXPR	5291:11	5291:11	9	endx = image -> width - rmargin - 1
ASSIGN	5291:11	5291:18	10	endx = image -> width - rmargin - 1
LVAL	5291:11	5291:11	11	endx
FIELD	5291:11	5291:11	12	endx
LEAF_NODE	5291:11	5291:11	13	endx
ASSIGN_OP	5291:16	5291:16	11	=
LEAF_NODE	5291:16	5291:16	12	=
RVAL	5291:18	5291:43	11	image -> width - rmargin - 1
FIELD	5291:18	5291:25	12	image -> width
LEAF_NODE	5291:18	5291:18	13	image
LEAF_NODE	5291:23	5291:23	13	->
LEAF_NODE	5291:25	5291:25	13	width
LEAF_NODE	5291:31	5291:31	12	-
FIELD	5291:33	5291:33	12	rmargin
LEAF_NODE	5291:33	5291:33	13	rmargin
LEAF_NODE	5291:41	5291:41	12	-
FIELD	5291:43	5291:43	12	1
LEAF_NODE	5291:43	5291:43	13	1
LEAF_NODE	5291:44	5291:44	9	;
SELECTION	5292:9	5293:11	6	
KEYWORD	5292:9	5292:9	7	else
LEAF_NODE	5292:9	5292:9	8	else
STATEMENTS	5293:11	5293:11	7	
EXPR_STATEMENT	5293:11	5293:36	8	endx = startx + width - 1 ;
EXPR	5293:11	5293:11	9	endx = startx + width - 1
ASSIGN	5293:11	5293:18	10	endx = startx + width - 1
LVAL	5293:11	5293:11	11	endx
FIELD	5293:11	5293:11	12	endx
LEAF_NODE	5293:11	5293:11	13	endx
ASSIGN_OP	5293:16	5293:16	11	=
LEAF_NODE	5293:16	5293:16	12	=
RVAL	5293:18	5293:35	11	startx + width - 1
FIELD	5293:18	5293:18	12	startx
LEAF_NODE	5293:18	5293:18	13	startx
LEAF_NODE	5293:25	5293:25	12	+
FIELD	5293:27	5293:27	12	width
LEAF_NODE	5293:27	5293:27	13	width
LEAF_NODE	5293:33	5293:33	12	-
FIELD	5293:35	5293:35	12	1
LEAF_NODE	5293:35	5293:35	13	1
LEAF_NODE	5293:36	5293:36	9	;
EXPR_STATEMENT	5295:9	5295:43	6	endy = image -> length - bmargin - 1 ;
EXPR	5295:9	5295:9	7	endy = image -> length - bmargin - 1
ASSIGN	5295:9	5295:16	8	endy = image -> length - bmargin - 1
LVAL	5295:9	5295:9	9	endy
FIELD	5295:9	5295:9	10	endy
LEAF_NODE	5295:9	5295:9	11	endy
ASSIGN_OP	5295:14	5295:14	9	=
LEAF_NODE	5295:14	5295:14	10	=
RVAL	5295:16	5295:42	9	image -> length - bmargin - 1
FIELD	5295:16	5295:23	10	image -> length
LEAF_NODE	5295:16	5295:16	11	image
LEAF_NODE	5295:21	5295:21	11	->
LEAF_NODE	5295:23	5295:23	11	length
LEAF_NODE	5295:30	5295:30	10	-
FIELD	5295:32	5295:32	10	bmargin
LEAF_NODE	5295:32	5295:32	11	bmargin
LEAF_NODE	5295:40	5295:40	10	-
FIELD	5295:42	5295:42	10	1
LEAF_NODE	5295:42	5295:42	11	1
LEAF_NODE	5295:43	5295:43	7	;
SELECTION	5296:9	5297:11	6	
KEYWORD	5296:9	5296:9	7	if
LEAF_NODE	5296:9	5296:9	8	if
LEAF_NODE	5296:12	5296:12	7	(
CONDITION	5296:13	5296:13	7	( endy - length ) <= tmargin
EXPR	5296:13	5296:32	8	( endy - length ) <= tmargin
LEAF_NODE	5296:13	5296:13	9	(
FIELD	5296:14	5296:14	9	endy
LEAF_NODE	5296:14	5296:14	10	endy
LEAF_NODE	5296:19	5296:19	9	-
FIELD	5296:21	5296:21	9	length
LEAF_NODE	5296:21	5296:21	10	length
LEAF_NODE	5296:27	5296:27	9	)
REL_OPERATOR	5296:29	5296:29	9	<=
LEAF_NODE	5296:29	5296:29	10	<=
FIELD	5296:32	5296:32	9	tmargin
LEAF_NODE	5296:32	5296:32	10	tmargin
LEAF_NODE	5296:39	5296:39	7	)
STATEMENTS	5297:11	5297:11	7	
EXPR_STATEMENT	5297:11	5297:27	8	starty = tmargin ;
EXPR	5297:11	5297:11	9	starty = tmargin
ASSIGN	5297:11	5297:20	10	starty = tmargin
LVAL	5297:11	5297:11	11	starty
FIELD	5297:11	5297:11	12	starty
LEAF_NODE	5297:11	5297:11	13	starty
ASSIGN_OP	5297:18	5297:18	11	=
LEAF_NODE	5297:18	5297:18	12	=
RVAL	5297:20	5297:20	11	tmargin
FIELD	5297:20	5297:20	12	tmargin
LEAF_NODE	5297:20	5297:20	13	tmargin
LEAF_NODE	5297:27	5297:27	9	;
SELECTION	5298:9	5299:11	6	
KEYWORD	5298:9	5298:9	7	else
LEAF_NODE	5298:9	5298:9	8	else
STATEMENTS	5299:11	5299:11	7	
EXPR_STATEMENT	5299:11	5299:37	8	starty = endy - length + 1 ;
EXPR	5299:11	5299:11	9	starty = endy - length + 1
ASSIGN	5299:11	5299:20	10	starty = endy - length + 1
LVAL	5299:11	5299:11	11	starty
FIELD	5299:11	5299:11	12	starty
LEAF_NODE	5299:11	5299:11	13	starty
ASSIGN_OP	5299:18	5299:18	11	=
LEAF_NODE	5299:18	5299:18	12	=
RVAL	5299:20	5299:36	11	endy - length + 1
FIELD	5299:20	5299:20	12	endy
LEAF_NODE	5299:20	5299:20	13	endy
LEAF_NODE	5299:25	5299:25	12	-
FIELD	5299:27	5299:27	12	length
LEAF_NODE	5299:27	5299:27	13	length
LEAF_NODE	5299:34	5299:34	12	+
FIELD	5299:36	5299:36	12	1
LEAF_NODE	5299:36	5299:36	13	1
LEAF_NODE	5299:37	5299:37	9	;
JUMP_STATEMENT	5300:9	5300:14	6	break DESTINATION ;
KEYWORD	5300:9	5300:9	7	break
LEAF_NODE	5300:9	5300:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5300:14	5300:14	7	;
LABEL	5301:4	5301:19	6	case EDGE_RIGHT :
LEAF_NODE	5301:4	5301:4	7	case
LEAF_NODE	5301:9	5301:9	7	EDGE_RIGHT
LEAF_NODE	5301:19	5301:19	7	:
EXPR_STATEMENT	5302:9	5302:42	6	endx = image -> width - rmargin - 1 ;
EXPR	5302:9	5302:9	7	endx = image -> width - rmargin - 1
ASSIGN	5302:9	5302:16	8	endx = image -> width - rmargin - 1
LVAL	5302:9	5302:9	9	endx
FIELD	5302:9	5302:9	10	endx
LEAF_NODE	5302:9	5302:9	11	endx
ASSIGN_OP	5302:14	5302:14	9	=
LEAF_NODE	5302:14	5302:14	10	=
RVAL	5302:16	5302:41	9	image -> width - rmargin - 1
FIELD	5302:16	5302:23	10	image -> width
LEAF_NODE	5302:16	5302:16	11	image
LEAF_NODE	5302:21	5302:21	11	->
LEAF_NODE	5302:23	5302:23	11	width
LEAF_NODE	5302:29	5302:29	10	-
FIELD	5302:31	5302:31	10	rmargin
LEAF_NODE	5302:31	5302:31	11	rmargin
LEAF_NODE	5302:39	5302:39	10	-
FIELD	5302:41	5302:41	10	1
LEAF_NODE	5302:41	5302:41	11	1
LEAF_NODE	5302:42	5302:42	7	;
SELECTION	5303:9	5304:11	6	
KEYWORD	5303:9	5303:9	7	if
LEAF_NODE	5303:9	5303:9	8	if
LEAF_NODE	5303:12	5303:12	7	(
CONDITION	5303:13	5303:13	7	( endx - width ) <= lmargin
EXPR	5303:13	5303:31	8	( endx - width ) <= lmargin
LEAF_NODE	5303:13	5303:13	9	(
FIELD	5303:14	5303:14	9	endx
LEAF_NODE	5303:14	5303:14	10	endx
LEAF_NODE	5303:19	5303:19	9	-
FIELD	5303:21	5303:21	9	width
LEAF_NODE	5303:21	5303:21	10	width
LEAF_NODE	5303:26	5303:26	9	)
REL_OPERATOR	5303:28	5303:28	9	<=
LEAF_NODE	5303:28	5303:28	10	<=
FIELD	5303:31	5303:31	9	lmargin
LEAF_NODE	5303:31	5303:31	10	lmargin
LEAF_NODE	5303:38	5303:38	7	)
STATEMENTS	5304:11	5304:11	7	
EXPR_STATEMENT	5304:11	5304:27	8	startx = lmargin ;
EXPR	5304:11	5304:11	9	startx = lmargin
ASSIGN	5304:11	5304:20	10	startx = lmargin
LVAL	5304:11	5304:11	11	startx
FIELD	5304:11	5304:11	12	startx
LEAF_NODE	5304:11	5304:11	13	startx
ASSIGN_OP	5304:18	5304:18	11	=
LEAF_NODE	5304:18	5304:18	12	=
RVAL	5304:20	5304:20	11	lmargin
FIELD	5304:20	5304:20	12	lmargin
LEAF_NODE	5304:20	5304:20	13	lmargin
LEAF_NODE	5304:27	5304:27	9	;
SELECTION	5305:9	5306:11	6	
KEYWORD	5305:9	5305:9	7	else
LEAF_NODE	5305:9	5305:9	8	else
STATEMENTS	5306:11	5306:11	7	
EXPR_STATEMENT	5306:11	5306:36	8	startx = endx - width + 1 ;
EXPR	5306:11	5306:11	9	startx = endx - width + 1
ASSIGN	5306:11	5306:20	10	startx = endx - width + 1
LVAL	5306:11	5306:11	11	startx
FIELD	5306:11	5306:11	12	startx
LEAF_NODE	5306:11	5306:11	13	startx
ASSIGN_OP	5306:18	5306:18	11	=
LEAF_NODE	5306:18	5306:18	12	=
RVAL	5306:20	5306:35	11	endx - width + 1
FIELD	5306:20	5306:20	12	endx
LEAF_NODE	5306:20	5306:20	13	endx
LEAF_NODE	5306:25	5306:25	12	-
FIELD	5306:27	5306:27	12	width
LEAF_NODE	5306:27	5306:27	13	width
LEAF_NODE	5306:33	5306:33	12	+
FIELD	5306:35	5306:35	12	1
LEAF_NODE	5306:35	5306:35	13	1
LEAF_NODE	5306:36	5306:36	9	;
EXPR_STATEMENT	5308:9	5308:25	6	starty = tmargin ;
EXPR	5308:9	5308:9	7	starty = tmargin
ASSIGN	5308:9	5308:18	8	starty = tmargin
LVAL	5308:9	5308:9	9	starty
FIELD	5308:9	5308:9	10	starty
LEAF_NODE	5308:9	5308:9	11	starty
ASSIGN_OP	5308:16	5308:16	9	=
LEAF_NODE	5308:16	5308:16	10	=
RVAL	5308:18	5308:18	9	tmargin
FIELD	5308:18	5308:18	10	tmargin
LEAF_NODE	5308:18	5308:18	11	tmargin
LEAF_NODE	5308:25	5308:25	7	;
SELECTION	5309:9	5310:11	6	
KEYWORD	5309:9	5309:9	7	if
LEAF_NODE	5309:9	5309:9	8	if
LEAF_NODE	5309:12	5309:12	7	(
CONDITION	5309:13	5309:13	7	( starty + length ) >= ( image -> length - bmargin )
EXPR	5309:13	5309:58	8	( starty + length ) >= ( image -> length - bmargin )
LEAF_NODE	5309:13	5309:13	9	(
FIELD	5309:14	5309:14	9	starty
LEAF_NODE	5309:14	5309:14	10	starty
LEAF_NODE	5309:21	5309:21	9	+
FIELD	5309:23	5309:23	9	length
LEAF_NODE	5309:23	5309:23	10	length
LEAF_NODE	5309:29	5309:29	9	)
REL_OPERATOR	5309:31	5309:31	9	>=
LEAF_NODE	5309:31	5309:31	10	>=
LEAF_NODE	5309:34	5309:34	9	(
FIELD	5309:35	5309:42	9	image -> length
LEAF_NODE	5309:35	5309:35	10	image
LEAF_NODE	5309:40	5309:40	10	->
LEAF_NODE	5309:42	5309:42	10	length
LEAF_NODE	5309:49	5309:49	9	-
FIELD	5309:51	5309:51	9	bmargin
LEAF_NODE	5309:51	5309:51	10	bmargin
LEAF_NODE	5309:58	5309:58	9	)
LEAF_NODE	5309:59	5309:59	7	)
STATEMENTS	5310:11	5310:11	7	
EXPR_STATEMENT	5310:11	5310:45	8	endy = image -> length - bmargin - 1 ;
EXPR	5310:11	5310:11	9	endy = image -> length - bmargin - 1
ASSIGN	5310:11	5310:18	10	endy = image -> length - bmargin - 1
LVAL	5310:11	5310:11	11	endy
FIELD	5310:11	5310:11	12	endy
LEAF_NODE	5310:11	5310:11	13	endy
ASSIGN_OP	5310:16	5310:16	11	=
LEAF_NODE	5310:16	5310:16	12	=
RVAL	5310:18	5310:44	11	image -> length - bmargin - 1
FIELD	5310:18	5310:25	12	image -> length
LEAF_NODE	5310:18	5310:18	13	image
LEAF_NODE	5310:23	5310:23	13	->
LEAF_NODE	5310:25	5310:25	13	length
LEAF_NODE	5310:32	5310:32	12	-
FIELD	5310:34	5310:34	12	bmargin
LEAF_NODE	5310:34	5310:34	13	bmargin
LEAF_NODE	5310:42	5310:42	12	-
FIELD	5310:44	5310:44	12	1
LEAF_NODE	5310:44	5310:44	13	1
LEAF_NODE	5310:45	5310:45	9	;
SELECTION	5311:9	5312:11	6	
KEYWORD	5311:9	5311:9	7	else
LEAF_NODE	5311:9	5311:9	8	else
STATEMENTS	5312:11	5312:11	7	
EXPR_STATEMENT	5312:11	5312:37	8	endy = starty + length - 1 ;
EXPR	5312:11	5312:11	9	endy = starty + length - 1
ASSIGN	5312:11	5312:18	10	endy = starty + length - 1
LVAL	5312:11	5312:11	11	endy
FIELD	5312:11	5312:11	12	endy
LEAF_NODE	5312:11	5312:11	13	endy
ASSIGN_OP	5312:16	5312:16	11	=
LEAF_NODE	5312:16	5312:16	12	=
RVAL	5312:18	5312:36	11	starty + length - 1
FIELD	5312:18	5312:18	12	starty
LEAF_NODE	5312:18	5312:18	13	starty
LEAF_NODE	5312:25	5312:25	12	+
FIELD	5312:27	5312:27	12	length
LEAF_NODE	5312:27	5312:27	13	length
LEAF_NODE	5312:34	5312:34	12	-
FIELD	5312:36	5312:36	12	1
LEAF_NODE	5312:36	5312:36	13	1
LEAF_NODE	5312:37	5312:37	9	;
JUMP_STATEMENT	5313:9	5313:14	6	break DESTINATION ;
KEYWORD	5313:9	5313:9	7	break
LEAF_NODE	5313:9	5313:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5313:14	5313:14	7	;
LABEL	5314:4	5314:17	6	case EDGE_TOP :
LEAF_NODE	5314:4	5314:4	7	case
LEAF_NODE	5314:9	5314:9	7	EDGE_TOP
LEAF_NODE	5314:17	5314:17	7	:
LABEL	5315:4	5315:18	6	case EDGE_LEFT :
LEAF_NODE	5315:4	5315:4	7	case
LEAF_NODE	5315:9	5315:9	7	EDGE_LEFT
LEAF_NODE	5315:18	5315:18	7	:
LABEL	5316:4	5316:11	6	default :
LEAF_NODE	5316:4	5316:4	7	default
LEAF_NODE	5316:11	5316:11	7	:
EXPR_STATEMENT	5317:9	5317:25	6	startx = lmargin ;
EXPR	5317:9	5317:9	7	startx = lmargin
ASSIGN	5317:9	5317:18	8	startx = lmargin
LVAL	5317:9	5317:9	9	startx
FIELD	5317:9	5317:9	10	startx
LEAF_NODE	5317:9	5317:9	11	startx
ASSIGN_OP	5317:16	5317:16	9	=
LEAF_NODE	5317:16	5317:16	10	=
RVAL	5317:18	5317:18	9	lmargin
FIELD	5317:18	5317:18	10	lmargin
LEAF_NODE	5317:18	5317:18	11	lmargin
LEAF_NODE	5317:25	5317:25	7	;
SELECTION	5318:9	5319:11	6	
KEYWORD	5318:9	5318:9	7	if
LEAF_NODE	5318:9	5318:9	8	if
LEAF_NODE	5318:12	5318:12	7	(
CONDITION	5318:13	5318:13	7	( startx + width ) >= ( image -> width - rmargin )
EXPR	5318:13	5318:56	8	( startx + width ) >= ( image -> width - rmargin )
LEAF_NODE	5318:13	5318:13	9	(
FIELD	5318:14	5318:14	9	startx
LEAF_NODE	5318:14	5318:14	10	startx
LEAF_NODE	5318:21	5318:21	9	+
FIELD	5318:23	5318:23	9	width
LEAF_NODE	5318:23	5318:23	10	width
LEAF_NODE	5318:28	5318:28	9	)
REL_OPERATOR	5318:30	5318:30	9	>=
LEAF_NODE	5318:30	5318:30	10	>=
LEAF_NODE	5318:33	5318:33	9	(
FIELD	5318:34	5318:41	9	image -> width
LEAF_NODE	5318:34	5318:34	10	image
LEAF_NODE	5318:39	5318:39	10	->
LEAF_NODE	5318:41	5318:41	10	width
LEAF_NODE	5318:47	5318:47	9	-
FIELD	5318:49	5318:49	9	rmargin
LEAF_NODE	5318:49	5318:49	10	rmargin
LEAF_NODE	5318:56	5318:56	9	)
LEAF_NODE	5318:57	5318:57	7	)
STATEMENTS	5319:11	5319:11	7	
EXPR_STATEMENT	5319:11	5319:44	8	endx = image -> width - rmargin - 1 ;
EXPR	5319:11	5319:11	9	endx = image -> width - rmargin - 1
ASSIGN	5319:11	5319:18	10	endx = image -> width - rmargin - 1
LVAL	5319:11	5319:11	11	endx
FIELD	5319:11	5319:11	12	endx
LEAF_NODE	5319:11	5319:11	13	endx
ASSIGN_OP	5319:16	5319:16	11	=
LEAF_NODE	5319:16	5319:16	12	=
RVAL	5319:18	5319:43	11	image -> width - rmargin - 1
FIELD	5319:18	5319:25	12	image -> width
LEAF_NODE	5319:18	5319:18	13	image
LEAF_NODE	5319:23	5319:23	13	->
LEAF_NODE	5319:25	5319:25	13	width
LEAF_NODE	5319:31	5319:31	12	-
FIELD	5319:33	5319:33	12	rmargin
LEAF_NODE	5319:33	5319:33	13	rmargin
LEAF_NODE	5319:41	5319:41	12	-
FIELD	5319:43	5319:43	12	1
LEAF_NODE	5319:43	5319:43	13	1
LEAF_NODE	5319:44	5319:44	9	;
SELECTION	5320:9	5321:11	6	
KEYWORD	5320:9	5320:9	7	else
LEAF_NODE	5320:9	5320:9	8	else
STATEMENTS	5321:11	5321:11	7	
EXPR_STATEMENT	5321:11	5321:36	8	endx = startx + width - 1 ;
EXPR	5321:11	5321:11	9	endx = startx + width - 1
ASSIGN	5321:11	5321:18	10	endx = startx + width - 1
LVAL	5321:11	5321:11	11	endx
FIELD	5321:11	5321:11	12	endx
LEAF_NODE	5321:11	5321:11	13	endx
ASSIGN_OP	5321:16	5321:16	11	=
LEAF_NODE	5321:16	5321:16	12	=
RVAL	5321:18	5321:35	11	startx + width - 1
FIELD	5321:18	5321:18	12	startx
LEAF_NODE	5321:18	5321:18	13	startx
LEAF_NODE	5321:25	5321:25	12	+
FIELD	5321:27	5321:27	12	width
LEAF_NODE	5321:27	5321:27	13	width
LEAF_NODE	5321:33	5321:33	12	-
FIELD	5321:35	5321:35	12	1
LEAF_NODE	5321:35	5321:35	13	1
LEAF_NODE	5321:36	5321:36	9	;
EXPR_STATEMENT	5323:9	5323:25	6	starty = tmargin ;
EXPR	5323:9	5323:9	7	starty = tmargin
ASSIGN	5323:9	5323:18	8	starty = tmargin
LVAL	5323:9	5323:9	9	starty
FIELD	5323:9	5323:9	10	starty
LEAF_NODE	5323:9	5323:9	11	starty
ASSIGN_OP	5323:16	5323:16	9	=
LEAF_NODE	5323:16	5323:16	10	=
RVAL	5323:18	5323:18	9	tmargin
FIELD	5323:18	5323:18	10	tmargin
LEAF_NODE	5323:18	5323:18	11	tmargin
LEAF_NODE	5323:25	5323:25	7	;
SELECTION	5324:9	5325:11	6	
KEYWORD	5324:9	5324:9	7	if
LEAF_NODE	5324:9	5324:9	8	if
LEAF_NODE	5324:12	5324:12	7	(
CONDITION	5324:13	5324:13	7	( starty + length ) >= ( image -> length - bmargin )
EXPR	5324:13	5324:58	8	( starty + length ) >= ( image -> length - bmargin )
LEAF_NODE	5324:13	5324:13	9	(
FIELD	5324:14	5324:14	9	starty
LEAF_NODE	5324:14	5324:14	10	starty
LEAF_NODE	5324:21	5324:21	9	+
FIELD	5324:23	5324:23	9	length
LEAF_NODE	5324:23	5324:23	10	length
LEAF_NODE	5324:29	5324:29	9	)
REL_OPERATOR	5324:31	5324:31	9	>=
LEAF_NODE	5324:31	5324:31	10	>=
LEAF_NODE	5324:34	5324:34	9	(
FIELD	5324:35	5324:42	9	image -> length
LEAF_NODE	5324:35	5324:35	10	image
LEAF_NODE	5324:40	5324:40	10	->
LEAF_NODE	5324:42	5324:42	10	length
LEAF_NODE	5324:49	5324:49	9	-
FIELD	5324:51	5324:51	9	bmargin
LEAF_NODE	5324:51	5324:51	10	bmargin
LEAF_NODE	5324:58	5324:58	9	)
LEAF_NODE	5324:59	5324:59	7	)
STATEMENTS	5325:11	5325:11	7	
EXPR_STATEMENT	5325:11	5325:45	8	endy = image -> length - bmargin - 1 ;
EXPR	5325:11	5325:11	9	endy = image -> length - bmargin - 1
ASSIGN	5325:11	5325:18	10	endy = image -> length - bmargin - 1
LVAL	5325:11	5325:11	11	endy
FIELD	5325:11	5325:11	12	endy
LEAF_NODE	5325:11	5325:11	13	endy
ASSIGN_OP	5325:16	5325:16	11	=
LEAF_NODE	5325:16	5325:16	12	=
RVAL	5325:18	5325:44	11	image -> length - bmargin - 1
FIELD	5325:18	5325:25	12	image -> length
LEAF_NODE	5325:18	5325:18	13	image
LEAF_NODE	5325:23	5325:23	13	->
LEAF_NODE	5325:25	5325:25	13	length
LEAF_NODE	5325:32	5325:32	12	-
FIELD	5325:34	5325:34	12	bmargin
LEAF_NODE	5325:34	5325:34	13	bmargin
LEAF_NODE	5325:42	5325:42	12	-
FIELD	5325:44	5325:44	12	1
LEAF_NODE	5325:44	5325:44	13	1
LEAF_NODE	5325:45	5325:45	9	;
SELECTION	5326:9	5327:11	6	
KEYWORD	5326:9	5326:9	7	else
LEAF_NODE	5326:9	5326:9	8	else
STATEMENTS	5327:11	5327:11	7	
EXPR_STATEMENT	5327:11	5327:37	8	endy = starty + length - 1 ;
EXPR	5327:11	5327:11	9	endy = starty + length - 1
ASSIGN	5327:11	5327:18	10	endy = starty + length - 1
LVAL	5327:11	5327:11	11	endy
FIELD	5327:11	5327:11	12	endy
LEAF_NODE	5327:11	5327:11	13	endy
ASSIGN_OP	5327:16	5327:16	11	=
LEAF_NODE	5327:16	5327:16	12	=
RVAL	5327:18	5327:36	11	starty + length - 1
FIELD	5327:18	5327:18	12	starty
LEAF_NODE	5327:18	5327:18	13	starty
LEAF_NODE	5327:25	5327:25	12	+
FIELD	5327:27	5327:27	12	length
LEAF_NODE	5327:27	5327:27	13	length
LEAF_NODE	5327:34	5327:34	12	-
FIELD	5327:36	5327:36	12	1
LEAF_NODE	5327:36	5327:36	13	1
LEAF_NODE	5327:37	5327:37	9	;
JUMP_STATEMENT	5328:9	5328:14	6	break DESTINATION ;
KEYWORD	5328:9	5328:9	7	break
LEAF_NODE	5328:9	5328:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5328:14	5328:14	7	;
LEAF_NODE	5329:4	5329:4	5	}
EXPR_STATEMENT	5330:2	5330:22	3	off -> startx = startx ;
EXPR	5330:2	5330:2	4	off -> startx = startx
ASSIGN	5330:2	5330:16	5	off -> startx = startx
LVAL	5330:2	5330:2	6	off -> startx
FIELD	5330:2	5330:7	7	off -> startx
LEAF_NODE	5330:2	5330:2	8	off
LEAF_NODE	5330:5	5330:5	8	->
LEAF_NODE	5330:7	5330:7	8	startx
ASSIGN_OP	5330:14	5330:14	6	=
LEAF_NODE	5330:14	5330:14	7	=
RVAL	5330:16	5330:16	6	startx
FIELD	5330:16	5330:16	7	startx
LEAF_NODE	5330:16	5330:16	8	startx
LEAF_NODE	5330:22	5330:22	4	;
EXPR_STATEMENT	5331:2	5331:22	3	off -> starty = starty ;
EXPR	5331:2	5331:2	4	off -> starty = starty
ASSIGN	5331:2	5331:16	5	off -> starty = starty
LVAL	5331:2	5331:2	6	off -> starty
FIELD	5331:2	5331:7	7	off -> starty
LEAF_NODE	5331:2	5331:2	8	off
LEAF_NODE	5331:5	5331:5	8	->
LEAF_NODE	5331:7	5331:7	8	starty
ASSIGN_OP	5331:14	5331:14	6	=
LEAF_NODE	5331:14	5331:14	7	=
RVAL	5331:16	5331:16	6	starty
FIELD	5331:16	5331:16	7	starty
LEAF_NODE	5331:16	5331:16	8	starty
LEAF_NODE	5331:22	5331:22	4	;
EXPR_STATEMENT	5332:2	5332:20	3	off -> endx = endx ;
EXPR	5332:2	5332:2	4	off -> endx = endx
ASSIGN	5332:2	5332:16	5	off -> endx = endx
LVAL	5332:2	5332:2	6	off -> endx
FIELD	5332:2	5332:7	7	off -> endx
LEAF_NODE	5332:2	5332:2	8	off
LEAF_NODE	5332:5	5332:5	8	->
LEAF_NODE	5332:7	5332:7	8	endx
ASSIGN_OP	5332:14	5332:14	6	=
LEAF_NODE	5332:14	5332:14	7	=
RVAL	5332:16	5332:16	6	endx
FIELD	5332:16	5332:16	7	endx
LEAF_NODE	5332:16	5332:16	8	endx
LEAF_NODE	5332:20	5332:20	4	;
EXPR_STATEMENT	5333:2	5333:20	3	off -> endy = endy ;
EXPR	5333:2	5333:2	4	off -> endy = endy
ASSIGN	5333:2	5333:16	5	off -> endy = endy
LVAL	5333:2	5333:2	6	off -> endy
FIELD	5333:2	5333:7	7	off -> endy
LEAF_NODE	5333:2	5333:2	8	off
LEAF_NODE	5333:5	5333:5	8	->
LEAF_NODE	5333:7	5333:7	8	endy
ASSIGN_OP	5333:14	5333:14	6	=
LEAF_NODE	5333:14	5333:14	7	=
RVAL	5333:16	5333:16	6	endy
FIELD	5333:16	5333:16	7	endy
LEAF_NODE	5333:16	5333:16	8	endy
LEAF_NODE	5333:20	5333:20	4	;
EXPR_STATEMENT	5335:2	5335:33	3	crop_width = endx - startx + 1 ;
EXPR	5335:2	5335:2	4	crop_width = endx - startx + 1
ASSIGN	5335:2	5335:16	5	crop_width = endx - startx + 1
LVAL	5335:2	5335:2	6	crop_width
FIELD	5335:2	5335:2	7	crop_width
LEAF_NODE	5335:2	5335:2	8	crop_width
ASSIGN_OP	5335:14	5335:14	6	=
LEAF_NODE	5335:14	5335:14	7	=
RVAL	5335:16	5335:32	6	endx - startx + 1
FIELD	5335:16	5335:16	7	endx
LEAF_NODE	5335:16	5335:16	8	endx
LEAF_NODE	5335:21	5335:21	7	-
FIELD	5335:23	5335:23	7	startx
LEAF_NODE	5335:23	5335:23	8	startx
LEAF_NODE	5335:30	5335:30	7	+
FIELD	5335:32	5335:32	7	1
LEAF_NODE	5335:32	5335:32	8	1
LEAF_NODE	5335:33	5335:33	4	;
EXPR_STATEMENT	5336:2	5336:33	3	crop_length = endy - starty + 1 ;
EXPR	5336:2	5336:2	4	crop_length = endy - starty + 1
ASSIGN	5336:2	5336:16	5	crop_length = endy - starty + 1
LVAL	5336:2	5336:2	6	crop_length
FIELD	5336:2	5336:2	7	crop_length
LEAF_NODE	5336:2	5336:2	8	crop_length
ASSIGN_OP	5336:14	5336:14	6	=
LEAF_NODE	5336:14	5336:14	7	=
RVAL	5336:16	5336:32	6	endy - starty + 1
FIELD	5336:16	5336:16	7	endy
LEAF_NODE	5336:16	5336:16	8	endy
LEAF_NODE	5336:21	5336:21	7	-
FIELD	5336:23	5336:23	7	starty
LEAF_NODE	5336:23	5336:23	8	starty
LEAF_NODE	5336:30	5336:30	7	+
FIELD	5336:32	5336:32	7	1
LEAF_NODE	5336:32	5336:32	8	1
LEAF_NODE	5336:33	5336:33	4	;
SELECTION	5338:2	5339:4	3	
KEYWORD	5338:2	5338:2	4	if
LEAF_NODE	5338:2	5338:2	5	if
LEAF_NODE	5338:5	5338:5	4	(
CONDITION	5338:6	5338:6	4	crop_width <= 0
EXPR	5338:6	5338:20	5	crop_width <= 0
FIELD	5338:6	5338:6	6	crop_width
LEAF_NODE	5338:6	5338:6	7	crop_width
REL_OPERATOR	5338:17	5338:17	6	<=
LEAF_NODE	5338:17	5338:17	7	<=
FIELD	5338:20	5338:20	6	0
LEAF_NODE	5338:20	5338:20	7	0
LEAF_NODE	5338:21	5338:21	4	)
STATEMENTS	5339:4	5343:4	4	
LEAF_NODE	5339:4	5339:4	5	{
STATEMENTS	5340:4	5342:4	5	
EXPR_STATEMENT	5340:4	5341:79	6	TIFFError ( "computeInputPixelOffsets" , "Invalid left/right margins and /or image crop width requested" ) ;
EXPR	5340:4	5340:4	7	TIFFError ( "computeInputPixelOffsets" , "Invalid left/right margins and /or image crop width requested" )
FUNCTION_CALL	5340:4	5341:78	8	TIFFError ( "computeInputPixelOffsets" , "Invalid left/right margins and /or image crop width requested" )
CALLEE	5340:4	5340:4	9	TIFFError
LEAF_NODE	5340:4	5340:4	10	TIFFError
LEAF_NODE	5340:13	5340:13	9	(
ARGUMENT	5340:14	5340:14	9	"computeInputPixelOffsets"
FIELD	5340:14	5340:14	10	"computeInputPixelOffsets"
LEAF_NODE	5340:14	5340:14	11	"computeInputPixelOffsets"
LEAF_NODE	5340:40	5340:40	9	,
ARGUMENT	5341:15	5341:15	9	"Invalid left/right margins and /or image crop width requested"
FIELD	5341:15	5341:15	10	"Invalid left/right margins and /or image crop width requested"
LEAF_NODE	5341:15	5341:15	11	"Invalid left/right margins and /or image crop width requested"
LEAF_NODE	5341:78	5341:78	9	)
LEAF_NODE	5341:79	5341:79	7	;
JUMP_STATEMENT	5342:4	5342:15	6	return ( - 1 ) ;
KEYWORD	5342:4	5342:4	7	return
LEAF_NODE	5342:4	5342:4	8	return
DESTINATION	5342:11	5342:11	7	( - 1 )
EXPR	5342:11	5342:14	8	( - 1 )
LEAF_NODE	5342:11	5342:11	9	(
UNARY_EXPR	5342:12	5342:13	9	- 1
UNARY_OPERATOR	5342:12	5342:12	10	-
LEAF_NODE	5342:12	5342:12	11	-
FIELD	5342:13	5342:13	10	1
LEAF_NODE	5342:13	5342:13	11	1
LEAF_NODE	5342:14	5342:14	9	)
LEAF_NODE	5342:15	5342:15	7	;
LEAF_NODE	5343:4	5343:4	5	}
SELECTION	5344:2	5345:4	3	
KEYWORD	5344:2	5344:2	4	if
LEAF_NODE	5344:2	5344:2	5	if
LEAF_NODE	5344:5	5344:5	4	(
CONDITION	5344:6	5344:6	4	crop_width > image -> width
EXPR	5344:6	5344:19	5	crop_width > image -> width
FIELD	5344:6	5344:6	6	crop_width
LEAF_NODE	5344:6	5344:6	7	crop_width
REL_OPERATOR	5344:17	5344:17	6	>
LEAF_NODE	5344:17	5344:17	7	>
FIELD	5344:19	5344:26	6	image -> width
LEAF_NODE	5344:19	5344:19	7	image
LEAF_NODE	5344:24	5344:24	7	->
LEAF_NODE	5344:26	5344:26	7	width
LEAF_NODE	5344:31	5344:31	4	)
STATEMENTS	5345:4	5345:4	4	
EXPR_STATEMENT	5345:4	5345:29	5	crop_width = image -> width ;
EXPR	5345:4	5345:4	6	crop_width = image -> width
ASSIGN	5345:4	5345:17	7	crop_width = image -> width
LVAL	5345:4	5345:4	8	crop_width
FIELD	5345:4	5345:4	9	crop_width
LEAF_NODE	5345:4	5345:4	10	crop_width
ASSIGN_OP	5345:15	5345:15	8	=
LEAF_NODE	5345:15	5345:15	9	=
RVAL	5345:17	5345:17	8	image -> width
FIELD	5345:17	5345:24	9	image -> width
LEAF_NODE	5345:17	5345:17	10	image
LEAF_NODE	5345:22	5345:22	10	->
LEAF_NODE	5345:24	5345:24	10	width
LEAF_NODE	5345:29	5345:29	6	;
SELECTION	5347:2	5348:4	3	
KEYWORD	5347:2	5347:2	4	if
LEAF_NODE	5347:2	5347:2	5	if
LEAF_NODE	5347:5	5347:5	4	(
CONDITION	5347:6	5347:6	4	crop_length <= 0
EXPR	5347:6	5347:21	5	crop_length <= 0
FIELD	5347:6	5347:6	6	crop_length
LEAF_NODE	5347:6	5347:6	7	crop_length
REL_OPERATOR	5347:18	5347:18	6	<=
LEAF_NODE	5347:18	5347:18	7	<=
FIELD	5347:21	5347:21	6	0
LEAF_NODE	5347:21	5347:21	7	0
LEAF_NODE	5347:22	5347:22	4	)
STATEMENTS	5348:4	5352:4	4	
LEAF_NODE	5348:4	5348:4	5	{
STATEMENTS	5349:4	5351:4	5	
EXPR_STATEMENT	5349:4	5350:79	6	TIFFError ( "computeInputPixelOffsets" , "Invalid top/bottom margins and /or image crop length requested" ) ;
EXPR	5349:4	5349:4	7	TIFFError ( "computeInputPixelOffsets" , "Invalid top/bottom margins and /or image crop length requested" )
FUNCTION_CALL	5349:4	5350:78	8	TIFFError ( "computeInputPixelOffsets" , "Invalid top/bottom margins and /or image crop length requested" )
CALLEE	5349:4	5349:4	9	TIFFError
LEAF_NODE	5349:4	5349:4	10	TIFFError
LEAF_NODE	5349:13	5349:13	9	(
ARGUMENT	5349:14	5349:14	9	"computeInputPixelOffsets"
FIELD	5349:14	5349:14	10	"computeInputPixelOffsets"
LEAF_NODE	5349:14	5349:14	11	"computeInputPixelOffsets"
LEAF_NODE	5349:40	5349:40	9	,
ARGUMENT	5350:14	5350:14	9	"Invalid top/bottom margins and /or image crop length requested"
FIELD	5350:14	5350:14	10	"Invalid top/bottom margins and /or image crop length requested"
LEAF_NODE	5350:14	5350:14	11	"Invalid top/bottom margins and /or image crop length requested"
LEAF_NODE	5350:78	5350:78	9	)
LEAF_NODE	5350:79	5350:79	7	;
JUMP_STATEMENT	5351:4	5351:15	6	return ( - 1 ) ;
KEYWORD	5351:4	5351:4	7	return
LEAF_NODE	5351:4	5351:4	8	return
DESTINATION	5351:11	5351:11	7	( - 1 )
EXPR	5351:11	5351:14	8	( - 1 )
LEAF_NODE	5351:11	5351:11	9	(
UNARY_EXPR	5351:12	5351:13	9	- 1
UNARY_OPERATOR	5351:12	5351:12	10	-
LEAF_NODE	5351:12	5351:12	11	-
FIELD	5351:13	5351:13	10	1
LEAF_NODE	5351:13	5351:13	11	1
LEAF_NODE	5351:14	5351:14	9	)
LEAF_NODE	5351:15	5351:15	7	;
LEAF_NODE	5352:4	5352:4	5	}
SELECTION	5353:2	5354:4	3	
KEYWORD	5353:2	5353:2	4	if
LEAF_NODE	5353:2	5353:2	5	if
LEAF_NODE	5353:5	5353:5	4	(
CONDITION	5353:6	5353:6	4	crop_length > image -> length
EXPR	5353:6	5353:20	5	crop_length > image -> length
FIELD	5353:6	5353:6	6	crop_length
LEAF_NODE	5353:6	5353:6	7	crop_length
REL_OPERATOR	5353:18	5353:18	6	>
LEAF_NODE	5353:18	5353:18	7	>
FIELD	5353:20	5353:27	6	image -> length
LEAF_NODE	5353:20	5353:20	7	image
LEAF_NODE	5353:25	5353:25	7	->
LEAF_NODE	5353:27	5353:27	7	length
LEAF_NODE	5353:33	5353:33	4	)
STATEMENTS	5354:4	5354:4	4	
EXPR_STATEMENT	5354:4	5354:31	5	crop_length = image -> length ;
EXPR	5354:4	5354:4	6	crop_length = image -> length
ASSIGN	5354:4	5354:18	7	crop_length = image -> length
LVAL	5354:4	5354:4	8	crop_length
FIELD	5354:4	5354:4	9	crop_length
LEAF_NODE	5354:4	5354:4	10	crop_length
ASSIGN_OP	5354:16	5354:16	8	=
LEAF_NODE	5354:16	5354:16	9	=
RVAL	5354:18	5354:18	8	image -> length
FIELD	5354:18	5354:25	9	image -> length
LEAF_NODE	5354:18	5354:18	10	image
LEAF_NODE	5354:23	5354:23	10	->
LEAF_NODE	5354:25	5354:25	10	length
LEAF_NODE	5354:31	5354:31	6	;
EXPR_STATEMENT	5356:2	5356:30	3	off -> crop_width = crop_width ;
EXPR	5356:2	5356:2	4	off -> crop_width = crop_width
ASSIGN	5356:2	5356:20	5	off -> crop_width = crop_width
LVAL	5356:2	5356:2	6	off -> crop_width
FIELD	5356:2	5356:7	7	off -> crop_width
LEAF_NODE	5356:2	5356:2	8	off
LEAF_NODE	5356:5	5356:5	8	->
LEAF_NODE	5356:7	5356:7	8	crop_width
ASSIGN_OP	5356:18	5356:18	6	=
LEAF_NODE	5356:18	5356:18	7	=
RVAL	5356:20	5356:20	6	crop_width
FIELD	5356:20	5356:20	7	crop_width
LEAF_NODE	5356:20	5356:20	8	crop_width
LEAF_NODE	5356:30	5356:30	4	;
EXPR_STATEMENT	5357:2	5357:32	3	off -> crop_length = crop_length ;
EXPR	5357:2	5357:2	4	off -> crop_length = crop_length
ASSIGN	5357:2	5357:21	5	off -> crop_length = crop_length
LVAL	5357:2	5357:2	6	off -> crop_length
FIELD	5357:2	5357:7	7	off -> crop_length
LEAF_NODE	5357:2	5357:2	8	off
LEAF_NODE	5357:5	5357:5	8	->
LEAF_NODE	5357:7	5357:7	8	crop_length
ASSIGN_OP	5357:19	5357:19	6	=
LEAF_NODE	5357:19	5357:19	7	=
RVAL	5357:21	5357:21	6	crop_length
FIELD	5357:21	5357:21	7	crop_length
LEAF_NODE	5357:21	5357:21	8	crop_length
LEAF_NODE	5357:32	5357:32	4	;
JUMP_STATEMENT	5359:2	5359:12	3	return ( 0 ) ;
KEYWORD	5359:2	5359:2	4	return
LEAF_NODE	5359:2	5359:2	5	return
DESTINATION	5359:9	5359:9	4	( 0 )
EXPR	5359:9	5359:11	5	( 0 )
LEAF_NODE	5359:9	5359:9	6	(
FIELD	5359:10	5359:10	6	0
LEAF_NODE	5359:10	5359:10	7	0
LEAF_NODE	5359:11	5359:11	6	)
LEAF_NODE	5359:12	5359:12	4	;
LEAF_NODE	5360:2	5360:2	2	}
FUNCTION_DEF	5373:0	5587:2	1	
RETURN_TYPE	5373:0	5373:7	2	static int
LEAF_NODE	5373:0	5373:0	3	static
TYPE_NAME	5373:7	5373:7	3	int
LEAF_NODE	5373:7	5373:7	4	int
FUNCTION_NAME	5374:0	5374:0	2	getCropOffsets
LEAF_NODE	5374:0	5374:0	3	getCropOffsets
PARAMETER_LIST	5374:14	5374:87	2	( struct image_data * image , struct crop_mask * crop , struct dump_opts * dump )
LEAF_NODE	5374:14	5374:14	3	(
PARAMETER_DECL	5374:15	5374:34	3	struct image_data * image
TYPE	5374:15	5374:33	4	struct image_data *
TYPE_NAME	5374:15	5374:22	5	struct image_data
LEAF_NODE	5374:15	5374:15	6	struct
LEAF_NODE	5374:22	5374:22	6	image_data
POINTER	5374:33	5374:33	5	*
LEAF_NODE	5374:33	5374:33	6	*
NAME	5374:34	5374:34	4	image
LEAF_NODE	5374:34	5374:34	5	image
LEAF_NODE	5374:39	5374:39	3	,
PARAMETER_DECL	5374:41	5374:59	3	struct crop_mask * crop
TYPE	5374:41	5374:58	4	struct crop_mask *
TYPE_NAME	5374:41	5374:48	5	struct crop_mask
LEAF_NODE	5374:41	5374:41	6	struct
LEAF_NODE	5374:48	5374:48	6	crop_mask
POINTER	5374:58	5374:58	5	*
LEAF_NODE	5374:58	5374:58	6	*
NAME	5374:59	5374:59	4	crop
LEAF_NODE	5374:59	5374:59	5	crop
LEAF_NODE	5374:63	5374:63	3	,
PARAMETER_DECL	5374:65	5374:83	3	struct dump_opts * dump
TYPE	5374:65	5374:82	4	struct dump_opts *
TYPE_NAME	5374:65	5374:72	5	struct dump_opts
LEAF_NODE	5374:65	5374:65	6	struct
LEAF_NODE	5374:72	5374:72	6	dump_opts
POINTER	5374:82	5374:82	5	*
LEAF_NODE	5374:82	5374:82	6	*
NAME	5374:83	5374:83	4	dump
LEAF_NODE	5374:83	5374:83	5	dump
LEAF_NODE	5374:87	5374:87	3	)
LEAF_NODE	5375:2	5375:2	2	{
STATEMENTS	5376:2	5586:2	2	
SIMPLE_DECL	5376:2	5376:23	3	struct offset offsets ;
VAR_DECL	5376:2	5376:16	4	struct offset offsets
TYPE	5376:2	5376:2	5	struct offset
TYPE_NAME	5376:2	5376:9	6	struct offset
LEAF_NODE	5376:2	5376:2	7	struct
LEAF_NODE	5376:9	5376:9	7	offset
NAME	5376:16	5376:16	5	offsets
LEAF_NODE	5376:16	5376:16	6	offsets
LEAF_NODE	5376:23	5376:23	4	;
SIMPLE_DECL	5377:2	5377:10	3	int i ;
VAR_DECL	5377:2	5377:9	4	int i
TYPE	5377:2	5377:2	5	int
TYPE_NAME	5377:2	5377:2	6	int
LEAF_NODE	5377:2	5377:2	7	int
NAME	5377:9	5377:9	5	i
LEAF_NODE	5377:9	5377:9	6	i
LEAF_NODE	5377:10	5377:10	4	;
SIMPLE_DECL	5378:2	5378:13	3	int32 test ;
VAR_DECL	5378:2	5378:9	4	int32 test
TYPE	5378:2	5378:2	5	int32
TYPE_NAME	5378:2	5378:2	6	int32
LEAF_NODE	5378:2	5378:2	7	int32
NAME	5378:9	5378:9	5	test
LEAF_NODE	5378:9	5378:9	6	test
LEAF_NODE	5378:13	5378:13	4	;
SIMPLE_DECL	5379:2	5379:34	3	uint32 seg , uint32 total , uint32 need_buff ; need_buff = 0 ;
INIT_DECL_LIST	5379:2	5379:2	4	uint32 seg , uint32 total , uint32 need_buff ; need_buff = 0
VAR_DECL	5379:2	5379:9	5	uint32 seg
TYPE	5379:2	5379:2	6	uint32
TYPE_NAME	5379:2	5379:2	7	uint32
LEAF_NODE	5379:2	5379:2	8	uint32
NAME	5379:9	5379:9	6	seg
LEAF_NODE	5379:9	5379:9	7	seg
LEAF_NODE	5379:12	5379:12	5	,
INIT_DECL_LIST	5379:2	5379:2	5	uint32 total , uint32 need_buff ; need_buff = 0
VAR_DECL	5379:2	5379:14	6	uint32 total
TYPE	5379:2	5379:2	7	uint32
TYPE_NAME	5379:2	5379:2	8	uint32
LEAF_NODE	5379:2	5379:2	9	uint32
NAME	5379:14	5379:14	7	total
LEAF_NODE	5379:14	5379:14	8	total
LEAF_NODE	5379:19	5379:19	6	,
VAR_DECL	5379:2	5379:21	6	uint32 need_buff ; need_buff = 0
TYPE	5379:2	5379:2	7	uint32
TYPE_NAME	5379:2	5379:2	8	uint32
LEAF_NODE	5379:2	5379:2	9	uint32
NAME	5379:21	5379:21	7	need_buff
LEAF_NODE	5379:21	5379:21	8	need_buff
LEAF_NODE	0:0	0:0	7	;
INIT	5379:21	5379:21	7	need_buff = 0
ASSIGN	5379:21	5379:33	8	need_buff = 0
LVAL	5379:21	5379:21	9	need_buff
NAME	5379:21	5379:21	10	need_buff
LEAF_NODE	5379:21	5379:21	11	need_buff
ASSIGN_OP	5379:31	5379:31	9	=
LEAF_NODE	5379:31	5379:31	10	=
RVAL	5379:33	5379:33	9	0
FIELD	5379:33	5379:33	10	0
LEAF_NODE	5379:33	5379:33	11	0
LEAF_NODE	5379:34	5379:34	4	;
SIMPLE_DECL	5380:2	5380:17	3	uint32 buffsize ;
VAR_DECL	5380:2	5380:9	4	uint32 buffsize
TYPE	5380:2	5380:2	5	uint32
TYPE_NAME	5380:2	5380:2	6	uint32
LEAF_NODE	5380:2	5380:2	7	uint32
NAME	5380:9	5380:9	5	buffsize
LEAF_NODE	5380:9	5380:9	6	buffsize
LEAF_NODE	5380:17	5380:17	4	;
SIMPLE_DECL	5381:2	5381:24	3	uint32 zwidth , uint32 zlength ;
INIT_DECL_LIST	5381:2	5381:2	4	uint32 zwidth , uint32 zlength
VAR_DECL	5381:2	5381:9	5	uint32 zwidth
TYPE	5381:2	5381:2	6	uint32
TYPE_NAME	5381:2	5381:2	7	uint32
LEAF_NODE	5381:2	5381:2	8	uint32
NAME	5381:9	5381:9	6	zwidth
LEAF_NODE	5381:9	5381:9	7	zwidth
LEAF_NODE	5381:15	5381:15	5	,
VAR_DECL	5381:2	5381:17	5	uint32 zlength
TYPE	5381:2	5381:2	6	uint32
TYPE_NAME	5381:2	5381:2	7	uint32
LEAF_NODE	5381:2	5381:2	8	uint32
NAME	5381:17	5381:17	6	zlength
LEAF_NODE	5381:17	5381:17	7	zlength
LEAF_NODE	5381:24	5381:24	4	;
LEAF_NODE	5383:2	5383:2	3	memset
LEAF_NODE	5383:8	5383:8	3	(
LEAF_NODE	5383:9	5383:9	3	&
LEAF_NODE	5383:10	5383:10	3	offsets
LEAF_NODE	5383:17	5383:17	3	,
LEAF_NODE	5383:19	5383:19	3	'\0'
LEAF_NODE	5383:23	5383:23	3	,
LEAF_NODE	5383:25	5383:25	3	sizeof
LEAF_NODE	5383:31	5383:31	3	(
LEAF_NODE	5383:32	5383:32	3	struct
LEAF_NODE	5383:39	5383:39	3	offset
LEAF_NODE	5383:45	5383:45	3	)
LEAF_NODE	5383:46	5383:46	3	)
LEAF_NODE	5383:47	5383:47	3	;
EXPR_STATEMENT	5384:2	5384:21	3	crop -> bufftotal = 0 ;
EXPR	5384:2	5384:2	4	crop -> bufftotal = 0
ASSIGN	5384:2	5384:20	5	crop -> bufftotal = 0
LVAL	5384:2	5384:2	6	crop -> bufftotal
FIELD	5384:2	5384:8	7	crop -> bufftotal
LEAF_NODE	5384:2	5384:2	8	crop
LEAF_NODE	5384:6	5384:6	8	->
LEAF_NODE	5384:8	5384:8	8	bufftotal
ASSIGN_OP	5384:18	5384:18	6	=
LEAF_NODE	5384:18	5384:18	7	=
RVAL	5384:20	5384:20	6	0
FIELD	5384:20	5384:20	7	0
LEAF_NODE	5384:20	5384:20	8	0
LEAF_NODE	5384:21	5384:21	4	;
EXPR_STATEMENT	5385:2	5385:35	3	crop -> combined_width = ( uint32 ) 0 ;
EXPR	5385:2	5385:2	4	crop -> combined_width = ( uint32 ) 0
ASSIGN	5385:2	5385:26	5	crop -> combined_width = ( uint32 ) 0
LVAL	5385:2	5385:2	6	crop -> combined_width
FIELD	5385:2	5385:8	7	crop -> combined_width
LEAF_NODE	5385:2	5385:2	8	crop
LEAF_NODE	5385:6	5385:6	8	->
LEAF_NODE	5385:8	5385:8	8	combined_width
ASSIGN_OP	5385:24	5385:24	6	=
LEAF_NODE	5385:24	5385:24	7	=
RVAL	5385:26	5385:34	6	( uint32 ) 0
LEAF_NODE	5385:26	5385:26	7	(
TYPE_NAME	5385:27	5385:27	7	uint32
LEAF_NODE	5385:27	5385:27	8	uint32
LEAF_NODE	5385:33	5385:33	7	)
FIELD	5385:34	5385:34	7	0
LEAF_NODE	5385:34	5385:34	8	0
LEAF_NODE	5385:35	5385:35	4	;
EXPR_STATEMENT	5386:2	5386:35	3	crop -> combined_length = ( uint32 ) 0 ;
EXPR	5386:2	5386:2	4	crop -> combined_length = ( uint32 ) 0
ASSIGN	5386:2	5386:26	5	crop -> combined_length = ( uint32 ) 0
LVAL	5386:2	5386:2	6	crop -> combined_length
FIELD	5386:2	5386:8	7	crop -> combined_length
LEAF_NODE	5386:2	5386:2	8	crop
LEAF_NODE	5386:6	5386:6	8	->
LEAF_NODE	5386:8	5386:8	8	combined_length
ASSIGN_OP	5386:24	5386:24	6	=
LEAF_NODE	5386:24	5386:24	7	=
RVAL	5386:26	5386:34	6	( uint32 ) 0
LEAF_NODE	5386:26	5386:26	7	(
TYPE_NAME	5386:27	5386:27	7	uint32
LEAF_NODE	5386:27	5386:27	8	uint32
LEAF_NODE	5386:33	5386:33	7	)
FIELD	5386:34	5386:34	7	0
LEAF_NODE	5386:34	5386:34	8	0
LEAF_NODE	5386:35	5386:35	4	;
EXPR_STATEMENT	5387:2	5387:22	3	crop -> selections = 0 ;
EXPR	5387:2	5387:2	4	crop -> selections = 0
ASSIGN	5387:2	5387:21	5	crop -> selections = 0
LVAL	5387:2	5387:2	6	crop -> selections
FIELD	5387:2	5387:8	7	crop -> selections
LEAF_NODE	5387:2	5387:2	8	crop
LEAF_NODE	5387:6	5387:6	8	->
LEAF_NODE	5387:8	5387:8	8	selections
ASSIGN_OP	5387:19	5387:19	6	=
LEAF_NODE	5387:19	5387:19	7	=
RVAL	5387:21	5387:21	6	0
FIELD	5387:21	5387:21	7	0
LEAF_NODE	5387:21	5387:21	8	0
LEAF_NODE	5387:22	5387:22	4	;
SELECTION	5390:2	5394:4	3	
KEYWORD	5390:2	5390:2	4	if
LEAF_NODE	5390:2	5390:2	5	if
LEAF_NODE	5390:5	5390:5	4	(
CONDITION	5390:6	5390:6	4	( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
EXPR	5390:6	5390:6	5	( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
OR	5390:6	5391:6	6	( crop -> crop_mode & CROP_MARGINS ) || ( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
EXPR	5390:6	5390:37	7	( crop -> crop_mode & CROP_MARGINS )
LEAF_NODE	5390:6	5390:6	8	(
FIELD	5390:7	5390:13	8	crop -> crop_mode
LEAF_NODE	5390:7	5390:7	9	crop
LEAF_NODE	5390:11	5390:11	9	->
LEAF_NODE	5390:13	5390:13	9	crop_mode
LEAF_NODE	5390:23	5390:23	8	&
FIELD	5390:25	5390:25	8	CROP_MARGINS
LEAF_NODE	5390:25	5390:25	9	CROP_MARGINS
LEAF_NODE	5390:37	5390:37	8	)
LEAF_NODE	5390:39	5390:39	7	||
EXPR	5391:6	5391:6	7	( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
OR	5391:6	5392:6	8	( crop -> crop_mode & CROP_REGIONS ) || ( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
EXPR	5391:6	5391:37	9	( crop -> crop_mode & CROP_REGIONS )
LEAF_NODE	5391:6	5391:6	10	(
FIELD	5391:7	5391:13	10	crop -> crop_mode
LEAF_NODE	5391:7	5391:7	11	crop
LEAF_NODE	5391:11	5391:11	11	->
LEAF_NODE	5391:13	5391:13	11	crop_mode
LEAF_NODE	5391:23	5391:23	10	&
FIELD	5391:25	5391:25	10	CROP_REGIONS
LEAF_NODE	5391:25	5391:25	11	CROP_REGIONS
LEAF_NODE	5391:37	5391:37	10	)
LEAF_NODE	5391:39	5391:39	9	||
EXPR	5392:6	5392:6	9	( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
OR	5392:6	5393:6	10	( crop -> crop_mode & CROP_LENGTH ) || ( crop -> crop_mode & CROP_WIDTH )
EXPR	5392:6	5392:36	11	( crop -> crop_mode & CROP_LENGTH )
LEAF_NODE	5392:6	5392:6	12	(
FIELD	5392:7	5392:13	12	crop -> crop_mode
LEAF_NODE	5392:7	5392:7	13	crop
LEAF_NODE	5392:11	5392:11	13	->
LEAF_NODE	5392:13	5392:13	13	crop_mode
LEAF_NODE	5392:23	5392:23	12	&
FIELD	5392:25	5392:25	12	CROP_LENGTH
LEAF_NODE	5392:25	5392:25	13	CROP_LENGTH
LEAF_NODE	5392:36	5392:36	12	)
LEAF_NODE	5392:39	5392:39	11	||
EXPR	5393:6	5393:35	11	( crop -> crop_mode & CROP_WIDTH )
LEAF_NODE	5393:6	5393:6	12	(
FIELD	5393:7	5393:13	12	crop -> crop_mode
LEAF_NODE	5393:7	5393:7	13	crop
LEAF_NODE	5393:11	5393:11	13	->
LEAF_NODE	5393:13	5393:13	13	crop_mode
LEAF_NODE	5393:23	5393:23	12	&
FIELD	5393:25	5393:25	12	CROP_WIDTH
LEAF_NODE	5393:25	5393:25	13	CROP_WIDTH
LEAF_NODE	5393:35	5393:35	12	)
LEAF_NODE	5393:36	5393:36	4	)
STATEMENTS	5394:4	5405:4	4	
LEAF_NODE	5394:4	5394:4	5	{
STATEMENTS	5395:4	5403:4	5	
SELECTION	5395:4	5396:6	6	
KEYWORD	5395:4	5395:4	7	if
LEAF_NODE	5395:4	5395:4	8	if
LEAF_NODE	5395:7	5395:7	7	(
CONDITION	5395:8	5395:8	7	computeInputPixelOffsets ( crop , image , & offsets )
EXPR	5395:8	5395:8	8	computeInputPixelOffsets ( crop , image , & offsets )
FUNCTION_CALL	5395:8	5395:54	9	computeInputPixelOffsets ( crop , image , & offsets )
CALLEE	5395:8	5395:8	10	computeInputPixelOffsets
LEAF_NODE	5395:8	5395:8	11	computeInputPixelOffsets
LEAF_NODE	5395:32	5395:32	10	(
ARGUMENT	5395:33	5395:33	10	crop
FIELD	5395:33	5395:33	11	crop
LEAF_NODE	5395:33	5395:33	12	crop
LEAF_NODE	5395:37	5395:37	10	,
ARGUMENT	5395:39	5395:39	10	image
FIELD	5395:39	5395:39	11	image
LEAF_NODE	5395:39	5395:39	12	image
LEAF_NODE	5395:44	5395:44	10	,
ARGUMENT	5395:46	5395:46	10	& offsets
UNARY_EXPR	5395:46	5395:47	11	& offsets
UNARY_OPERATOR	5395:46	5395:46	12	&
LEAF_NODE	5395:46	5395:46	13	&
FIELD	5395:47	5395:47	12	offsets
LEAF_NODE	5395:47	5395:47	13	offsets
LEAF_NODE	5395:54	5395:54	10	)
LEAF_NODE	5395:55	5395:55	7	)
STATEMENTS	5396:6	5399:6	7	
LEAF_NODE	5396:6	5396:6	8	{
STATEMENTS	5397:6	5398:6	8	
EXPR_STATEMENT	5397:6	5397:68	9	TIFFError ( "getCropOffsets" , "Unable to compute crop margins" ) ;
EXPR	5397:6	5397:6	10	TIFFError ( "getCropOffsets" , "Unable to compute crop margins" )
FUNCTION_CALL	5397:6	5397:67	11	TIFFError ( "getCropOffsets" , "Unable to compute crop margins" )
CALLEE	5397:6	5397:6	12	TIFFError
LEAF_NODE	5397:6	5397:6	13	TIFFError
LEAF_NODE	5397:16	5397:16	12	(
ARGUMENT	5397:17	5397:17	12	"getCropOffsets"
FIELD	5397:17	5397:17	13	"getCropOffsets"
LEAF_NODE	5397:17	5397:17	14	"getCropOffsets"
LEAF_NODE	5397:33	5397:33	12	,
ARGUMENT	5397:35	5397:35	12	"Unable to compute crop margins"
FIELD	5397:35	5397:35	13	"Unable to compute crop margins"
LEAF_NODE	5397:35	5397:35	14	"Unable to compute crop margins"
LEAF_NODE	5397:67	5397:67	12	)
LEAF_NODE	5397:68	5397:68	10	;
JUMP_STATEMENT	5398:6	5398:17	9	return ( - 1 ) ;
KEYWORD	5398:6	5398:6	10	return
LEAF_NODE	5398:6	5398:6	11	return
DESTINATION	5398:13	5398:13	10	( - 1 )
EXPR	5398:13	5398:16	11	( - 1 )
LEAF_NODE	5398:13	5398:13	12	(
UNARY_EXPR	5398:14	5398:15	12	- 1
UNARY_OPERATOR	5398:14	5398:14	13	-
LEAF_NODE	5398:14	5398:14	14	-
FIELD	5398:15	5398:15	13	1
LEAF_NODE	5398:15	5398:15	14	1
LEAF_NODE	5398:16	5398:16	12	)
LEAF_NODE	5398:17	5398:17	10	;
LEAF_NODE	5399:6	5399:6	8	}
EXPR_STATEMENT	5400:4	5400:20	6	need_buff = TRUE ;
EXPR	5400:4	5400:4	7	need_buff = TRUE
ASSIGN	5400:4	5400:16	8	need_buff = TRUE
LVAL	5400:4	5400:4	9	need_buff
FIELD	5400:4	5400:4	10	need_buff
LEAF_NODE	5400:4	5400:4	11	need_buff
ASSIGN_OP	5400:14	5400:14	9	=
LEAF_NODE	5400:14	5400:14	10	=
RVAL	5400:16	5400:16	9	TRUE
FIELD	5400:16	5400:16	10	TRUE
LEAF_NODE	5400:16	5400:16	11	TRUE
LEAF_NODE	5400:20	5400:20	7	;
EXPR_STATEMENT	5401:4	5401:36	6	crop -> selections = crop -> regions ;
EXPR	5401:4	5401:4	7	crop -> selections = crop -> regions
ASSIGN	5401:4	5401:23	8	crop -> selections = crop -> regions
LVAL	5401:4	5401:4	9	crop -> selections
FIELD	5401:4	5401:10	10	crop -> selections
LEAF_NODE	5401:4	5401:4	11	crop
LEAF_NODE	5401:8	5401:8	11	->
LEAF_NODE	5401:10	5401:10	11	selections
ASSIGN_OP	5401:21	5401:21	9	=
LEAF_NODE	5401:21	5401:21	10	=
RVAL	5401:23	5401:23	9	crop -> regions
FIELD	5401:23	5401:29	10	crop -> regions
LEAF_NODE	5401:23	5401:23	11	crop
LEAF_NODE	5401:27	5401:27	11	->
LEAF_NODE	5401:29	5401:29	11	regions
LEAF_NODE	5401:36	5401:36	7	;
SELECTION	5403:4	5404:6	6	
KEYWORD	5403:4	5403:4	7	if
LEAF_NODE	5403:4	5403:4	8	if
LEAF_NODE	5403:7	5403:7	7	(
CONDITION	5403:8	5403:8	7	crop -> crop_mode & CROP_REGIONS
EXPR	5403:8	5403:26	8	crop -> crop_mode & CROP_REGIONS
FIELD	5403:8	5403:14	9	crop -> crop_mode
LEAF_NODE	5403:8	5403:8	10	crop
LEAF_NODE	5403:12	5403:12	10	->
LEAF_NODE	5403:14	5403:14	10	crop_mode
LEAF_NODE	5403:24	5403:24	9	&
FIELD	5403:26	5403:26	9	CROP_REGIONS
LEAF_NODE	5403:26	5403:26	10	CROP_REGIONS
LEAF_NODE	5403:38	5403:38	7	)
STATEMENTS	5404:6	5404:6	7	
JUMP_STATEMENT	5404:6	5404:16	8	return ( 0 ) ;
KEYWORD	5404:6	5404:6	9	return
LEAF_NODE	5404:6	5404:6	10	return
DESTINATION	5404:13	5404:13	9	( 0 )
EXPR	5404:13	5404:15	10	( 0 )
LEAF_NODE	5404:13	5404:13	11	(
FIELD	5404:14	5404:14	11	0
LEAF_NODE	5404:14	5404:14	12	0
LEAF_NODE	5404:15	5404:15	11	)
LEAF_NODE	5404:16	5404:16	9	;
LEAF_NODE	5405:4	5405:4	5	}
SELECTION	5406:2	5407:4	3	
KEYWORD	5406:2	5406:2	4	else
LEAF_NODE	5406:2	5406:2	5	else
STATEMENTS	5407:4	5419:4	4	
LEAF_NODE	5407:4	5407:4	5	{
STATEMENTS	5408:4	5418:4	5	
EXPR_STATEMENT	5408:4	5408:23	6	offsets . tmargin = 0 ;
EXPR	5408:4	5408:4	7	offsets . tmargin = 0
ASSIGN	5408:4	5408:22	8	offsets . tmargin = 0
LVAL	5408:4	5408:4	9	offsets . tmargin
FIELD	5408:4	5408:12	10	offsets . tmargin
LEAF_NODE	5408:4	5408:4	11	offsets
LEAF_NODE	5408:11	5408:11	11	.
LEAF_NODE	5408:12	5408:12	11	tmargin
ASSIGN_OP	5408:20	5408:20	9	=
LEAF_NODE	5408:20	5408:20	10	=
RVAL	5408:22	5408:22	9	0
FIELD	5408:22	5408:22	10	0
LEAF_NODE	5408:22	5408:22	11	0
LEAF_NODE	5408:23	5408:23	7	;
EXPR_STATEMENT	5409:4	5409:23	6	offsets . lmargin = 0 ;
EXPR	5409:4	5409:4	7	offsets . lmargin = 0
ASSIGN	5409:4	5409:22	8	offsets . lmargin = 0
LVAL	5409:4	5409:4	9	offsets . lmargin
FIELD	5409:4	5409:12	10	offsets . lmargin
LEAF_NODE	5409:4	5409:4	11	offsets
LEAF_NODE	5409:11	5409:11	11	.
LEAF_NODE	5409:12	5409:12	11	lmargin
ASSIGN_OP	5409:20	5409:20	9	=
LEAF_NODE	5409:20	5409:20	10	=
RVAL	5409:22	5409:22	9	0
FIELD	5409:22	5409:22	10	0
LEAF_NODE	5409:22	5409:22	11	0
LEAF_NODE	5409:23	5409:23	7	;
EXPR_STATEMENT	5410:4	5410:23	6	offsets . bmargin = 0 ;
EXPR	5410:4	5410:4	7	offsets . bmargin = 0
ASSIGN	5410:4	5410:22	8	offsets . bmargin = 0
LVAL	5410:4	5410:4	9	offsets . bmargin
FIELD	5410:4	5410:12	10	offsets . bmargin
LEAF_NODE	5410:4	5410:4	11	offsets
LEAF_NODE	5410:11	5410:11	11	.
LEAF_NODE	5410:12	5410:12	11	bmargin
ASSIGN_OP	5410:20	5410:20	9	=
LEAF_NODE	5410:20	5410:20	10	=
RVAL	5410:22	5410:22	9	0
FIELD	5410:22	5410:22	10	0
LEAF_NODE	5410:22	5410:22	11	0
LEAF_NODE	5410:23	5410:23	7	;
EXPR_STATEMENT	5411:4	5411:23	6	offsets . rmargin = 0 ;
EXPR	5411:4	5411:4	7	offsets . rmargin = 0
ASSIGN	5411:4	5411:22	8	offsets . rmargin = 0
LVAL	5411:4	5411:4	9	offsets . rmargin
FIELD	5411:4	5411:12	10	offsets . rmargin
LEAF_NODE	5411:4	5411:4	11	offsets
LEAF_NODE	5411:11	5411:11	11	.
LEAF_NODE	5411:12	5411:12	11	rmargin
ASSIGN_OP	5411:20	5411:20	9	=
LEAF_NODE	5411:20	5411:20	10	=
RVAL	5411:22	5411:22	9	0
FIELD	5411:22	5411:22	10	0
LEAF_NODE	5411:22	5411:22	11	0
LEAF_NODE	5411:23	5411:23	7	;
EXPR_STATEMENT	5412:4	5412:37	6	offsets . crop_width = image -> width ;
EXPR	5412:4	5412:4	7	offsets . crop_width = image -> width
ASSIGN	5412:4	5412:25	8	offsets . crop_width = image -> width
LVAL	5412:4	5412:4	9	offsets . crop_width
FIELD	5412:4	5412:12	10	offsets . crop_width
LEAF_NODE	5412:4	5412:4	11	offsets
LEAF_NODE	5412:11	5412:11	11	.
LEAF_NODE	5412:12	5412:12	11	crop_width
ASSIGN_OP	5412:23	5412:23	9	=
LEAF_NODE	5412:23	5412:23	10	=
RVAL	5412:25	5412:25	9	image -> width
FIELD	5412:25	5412:32	10	image -> width
LEAF_NODE	5412:25	5412:25	11	image
LEAF_NODE	5412:30	5412:30	11	->
LEAF_NODE	5412:32	5412:32	11	width
LEAF_NODE	5412:37	5412:37	7	;
EXPR_STATEMENT	5413:4	5413:39	6	offsets . crop_length = image -> length ;
EXPR	5413:4	5413:4	7	offsets . crop_length = image -> length
ASSIGN	5413:4	5413:26	8	offsets . crop_length = image -> length
LVAL	5413:4	5413:4	9	offsets . crop_length
FIELD	5413:4	5413:12	10	offsets . crop_length
LEAF_NODE	5413:4	5413:4	11	offsets
LEAF_NODE	5413:11	5413:11	11	.
LEAF_NODE	5413:12	5413:12	11	crop_length
ASSIGN_OP	5413:24	5413:24	9	=
LEAF_NODE	5413:24	5413:24	10	=
RVAL	5413:26	5413:26	9	image -> length
FIELD	5413:26	5413:33	10	image -> length
LEAF_NODE	5413:26	5413:26	11	image
LEAF_NODE	5413:31	5413:31	11	->
LEAF_NODE	5413:33	5413:33	11	length
LEAF_NODE	5413:39	5413:39	7	;
EXPR_STATEMENT	5414:4	5414:22	6	offsets . startx = 0 ;
EXPR	5414:4	5414:4	7	offsets . startx = 0
ASSIGN	5414:4	5414:21	8	offsets . startx = 0
LVAL	5414:4	5414:4	9	offsets . startx
FIELD	5414:4	5414:12	10	offsets . startx
LEAF_NODE	5414:4	5414:4	11	offsets
LEAF_NODE	5414:11	5414:11	11	.
LEAF_NODE	5414:12	5414:12	11	startx
ASSIGN_OP	5414:19	5414:19	9	=
LEAF_NODE	5414:19	5414:19	10	=
RVAL	5414:21	5414:21	9	0
FIELD	5414:21	5414:21	10	0
LEAF_NODE	5414:21	5414:21	11	0
LEAF_NODE	5414:22	5414:22	7	;
EXPR_STATEMENT	5415:4	5415:35	6	offsets . endx = image -> width - 1 ;
EXPR	5415:4	5415:4	7	offsets . endx = image -> width - 1
ASSIGN	5415:4	5415:19	8	offsets . endx = image -> width - 1
LVAL	5415:4	5415:4	9	offsets . endx
FIELD	5415:4	5415:12	10	offsets . endx
LEAF_NODE	5415:4	5415:4	11	offsets
LEAF_NODE	5415:11	5415:11	11	.
LEAF_NODE	5415:12	5415:12	11	endx
ASSIGN_OP	5415:17	5415:17	9	=
LEAF_NODE	5415:17	5415:17	10	=
RVAL	5415:19	5415:34	9	image -> width - 1
FIELD	5415:19	5415:26	10	image -> width
LEAF_NODE	5415:19	5415:19	11	image
LEAF_NODE	5415:24	5415:24	11	->
LEAF_NODE	5415:26	5415:26	11	width
LEAF_NODE	5415:32	5415:32	10	-
FIELD	5415:34	5415:34	10	1
LEAF_NODE	5415:34	5415:34	11	1
LEAF_NODE	5415:35	5415:35	7	;
EXPR_STATEMENT	5416:4	5416:22	6	offsets . starty = 0 ;
EXPR	5416:4	5416:4	7	offsets . starty = 0
ASSIGN	5416:4	5416:21	8	offsets . starty = 0
LVAL	5416:4	5416:4	9	offsets . starty
FIELD	5416:4	5416:12	10	offsets . starty
LEAF_NODE	5416:4	5416:4	11	offsets
LEAF_NODE	5416:11	5416:11	11	.
LEAF_NODE	5416:12	5416:12	11	starty
ASSIGN_OP	5416:19	5416:19	9	=
LEAF_NODE	5416:19	5416:19	10	=
RVAL	5416:21	5416:21	9	0
FIELD	5416:21	5416:21	10	0
LEAF_NODE	5416:21	5416:21	11	0
LEAF_NODE	5416:22	5416:22	7	;
EXPR_STATEMENT	5417:4	5417:36	6	offsets . endy = image -> length - 1 ;
EXPR	5417:4	5417:4	7	offsets . endy = image -> length - 1
ASSIGN	5417:4	5417:19	8	offsets . endy = image -> length - 1
LVAL	5417:4	5417:4	9	offsets . endy
FIELD	5417:4	5417:12	10	offsets . endy
LEAF_NODE	5417:4	5417:4	11	offsets
LEAF_NODE	5417:11	5417:11	11	.
LEAF_NODE	5417:12	5417:12	11	endy
ASSIGN_OP	5417:17	5417:17	9	=
LEAF_NODE	5417:17	5417:17	10	=
RVAL	5417:19	5417:35	9	image -> length - 1
FIELD	5417:19	5417:26	10	image -> length
LEAF_NODE	5417:19	5417:19	11	image
LEAF_NODE	5417:24	5417:24	11	->
LEAF_NODE	5417:26	5417:26	11	length
LEAF_NODE	5417:33	5417:33	10	-
FIELD	5417:35	5417:35	10	1
LEAF_NODE	5417:35	5417:35	11	1
LEAF_NODE	5417:36	5417:36	7	;
EXPR_STATEMENT	5418:4	5418:21	6	need_buff = FALSE ;
EXPR	5418:4	5418:4	7	need_buff = FALSE
ASSIGN	5418:4	5418:16	8	need_buff = FALSE
LVAL	5418:4	5418:4	9	need_buff
FIELD	5418:4	5418:4	10	need_buff
LEAF_NODE	5418:4	5418:4	11	need_buff
ASSIGN_OP	5418:14	5418:14	9	=
LEAF_NODE	5418:14	5418:14	10	=
RVAL	5418:16	5418:16	9	FALSE
FIELD	5418:16	5418:16	10	FALSE
LEAF_NODE	5418:16	5418:16	11	FALSE
LEAF_NODE	5418:21	5418:21	7	;
LEAF_NODE	5419:4	5419:4	5	}
SELECTION	5421:2	5422:4	3	
KEYWORD	5421:2	5421:2	4	if
LEAF_NODE	5421:2	5421:2	5	if
LEAF_NODE	5421:5	5421:5	4	(
CONDITION	5421:6	5421:6	4	dump -> outfile != NULL
EXPR	5421:6	5421:23	5	dump -> outfile != NULL
FIELD	5421:6	5421:12	6	dump -> outfile
LEAF_NODE	5421:6	5421:6	7	dump
LEAF_NODE	5421:10	5421:10	7	->
LEAF_NODE	5421:12	5421:12	7	outfile
EQ_OPERATOR	5421:20	5421:20	6	!=
LEAF_NODE	5421:20	5421:20	7	!=
FIELD	5421:23	5421:23	6	NULL
LEAF_NODE	5421:23	5421:23	7	NULL
LEAF_NODE	5421:27	5421:27	4	)
STATEMENTS	5422:4	5427:4	4	
LEAF_NODE	5422:4	5422:4	5	{
STATEMENTS	5423:4	5425:4	5	
EXPR_STATEMENT	5423:4	5424:78	6	dump_info ( dump -> outfile , dump -> format , "" , "Margins: Top: %d  Left: %d  Bottom: %d  Right: %d" , offsets . tmargin , offsets . lmargin , offsets . bmargin , offsets . rmargin ) ;
EXPR	5423:4	5423:4	7	dump_info ( dump -> outfile , dump -> format , "" , "Margins: Top: %d  Left: %d  Bottom: %d  Right: %d" , offsets . tmargin , offsets . lmargin , offsets . bmargin , offsets . rmargin )
FUNCTION_CALL	5423:4	5424:77	8	dump_info ( dump -> outfile , dump -> format , "" , "Margins: Top: %d  Left: %d  Bottom: %d  Right: %d" , offsets . tmargin , offsets . lmargin , offsets . bmargin , offsets . rmargin )
CALLEE	5423:4	5423:4	9	dump_info
LEAF_NODE	5423:4	5423:4	10	dump_info
LEAF_NODE	5423:14	5423:14	9	(
ARGUMENT	5423:15	5423:15	9	dump -> outfile
FIELD	5423:15	5423:21	10	dump -> outfile
LEAF_NODE	5423:15	5423:15	11	dump
LEAF_NODE	5423:19	5423:19	11	->
LEAF_NODE	5423:21	5423:21	11	outfile
LEAF_NODE	5423:28	5423:28	9	,
ARGUMENT	5423:30	5423:30	9	dump -> format
FIELD	5423:30	5423:36	10	dump -> format
LEAF_NODE	5423:30	5423:30	11	dump
LEAF_NODE	5423:34	5423:34	11	->
LEAF_NODE	5423:36	5423:36	11	format
LEAF_NODE	5423:42	5423:42	9	,
ARGUMENT	5423:44	5423:44	9	""
FIELD	5423:44	5423:44	10	""
LEAF_NODE	5423:44	5423:44	11	""
LEAF_NODE	5423:46	5423:46	9	,
ARGUMENT	5423:48	5423:48	9	"Margins: Top: %d  Left: %d  Bottom: %d  Right: %d"
FIELD	5423:48	5423:48	10	"Margins: Top: %d  Left: %d  Bottom: %d  Right: %d"
LEAF_NODE	5423:48	5423:48	11	"Margins: Top: %d  Left: %d  Bottom: %d  Right: %d"
LEAF_NODE	5423:99	5423:99	9	,
ARGUMENT	5424:11	5424:11	9	offsets . tmargin
FIELD	5424:11	5424:19	10	offsets . tmargin
LEAF_NODE	5424:11	5424:11	11	offsets
LEAF_NODE	5424:18	5424:18	11	.
LEAF_NODE	5424:19	5424:19	11	tmargin
LEAF_NODE	5424:26	5424:26	9	,
ARGUMENT	5424:28	5424:28	9	offsets . lmargin
FIELD	5424:28	5424:36	10	offsets . lmargin
LEAF_NODE	5424:28	5424:28	11	offsets
LEAF_NODE	5424:35	5424:35	11	.
LEAF_NODE	5424:36	5424:36	11	lmargin
LEAF_NODE	5424:43	5424:43	9	,
ARGUMENT	5424:45	5424:45	9	offsets . bmargin
FIELD	5424:45	5424:53	10	offsets . bmargin
LEAF_NODE	5424:45	5424:45	11	offsets
LEAF_NODE	5424:52	5424:52	11	.
LEAF_NODE	5424:53	5424:53	11	bmargin
LEAF_NODE	5424:60	5424:60	9	,
ARGUMENT	5424:62	5424:62	9	offsets . rmargin
FIELD	5424:62	5424:70	10	offsets . rmargin
LEAF_NODE	5424:62	5424:62	11	offsets
LEAF_NODE	5424:69	5424:69	11	.
LEAF_NODE	5424:70	5424:70	11	rmargin
LEAF_NODE	5424:77	5424:77	9	)
LEAF_NODE	5424:78	5424:78	7	;
EXPR_STATEMENT	5425:4	5426:51	6	dump_info ( dump -> outfile , dump -> format , "" , "Crop region within margins: Adjusted Width:  %6d  Length: %6d" , offsets . crop_width , offsets . crop_length ) ;
EXPR	5425:4	5425:4	7	dump_info ( dump -> outfile , dump -> format , "" , "Crop region within margins: Adjusted Width:  %6d  Length: %6d" , offsets . crop_width , offsets . crop_length )
FUNCTION_CALL	5425:4	5426:50	8	dump_info ( dump -> outfile , dump -> format , "" , "Crop region within margins: Adjusted Width:  %6d  Length: %6d" , offsets . crop_width , offsets . crop_length )
CALLEE	5425:4	5425:4	9	dump_info
LEAF_NODE	5425:4	5425:4	10	dump_info
LEAF_NODE	5425:14	5425:14	9	(
ARGUMENT	5425:15	5425:15	9	dump -> outfile
FIELD	5425:15	5425:21	10	dump -> outfile
LEAF_NODE	5425:15	5425:15	11	dump
LEAF_NODE	5425:19	5425:19	11	->
LEAF_NODE	5425:21	5425:21	11	outfile
LEAF_NODE	5425:28	5425:28	9	,
ARGUMENT	5425:30	5425:30	9	dump -> format
FIELD	5425:30	5425:36	10	dump -> format
LEAF_NODE	5425:30	5425:30	11	dump
LEAF_NODE	5425:34	5425:34	11	->
LEAF_NODE	5425:36	5425:36	11	format
LEAF_NODE	5425:42	5425:42	9	,
ARGUMENT	5425:44	5425:44	9	""
FIELD	5425:44	5425:44	10	""
LEAF_NODE	5425:44	5425:44	11	""
LEAF_NODE	5425:46	5425:46	9	,
ARGUMENT	5425:48	5425:48	9	"Crop region within margins: Adjusted Width:  %6d  Length: %6d"
FIELD	5425:48	5425:48	10	"Crop region within margins: Adjusted Width:  %6d  Length: %6d"
LEAF_NODE	5425:48	5425:48	11	"Crop region within margins: Adjusted Width:  %6d  Length: %6d"
LEAF_NODE	5425:111	5425:111	9	,
ARGUMENT	5426:11	5426:11	9	offsets . crop_width
FIELD	5426:11	5426:19	10	offsets . crop_width
LEAF_NODE	5426:11	5426:11	11	offsets
LEAF_NODE	5426:18	5426:18	11	.
LEAF_NODE	5426:19	5426:19	11	crop_width
LEAF_NODE	5426:29	5426:29	9	,
ARGUMENT	5426:31	5426:31	9	offsets . crop_length
FIELD	5426:31	5426:39	10	offsets . crop_length
LEAF_NODE	5426:31	5426:31	11	offsets
LEAF_NODE	5426:38	5426:38	11	.
LEAF_NODE	5426:39	5426:39	11	crop_length
LEAF_NODE	5426:50	5426:50	9	)
LEAF_NODE	5426:51	5426:51	7	;
LEAF_NODE	5427:4	5427:4	5	}
SELECTION	5429:2	5430:4	3	
KEYWORD	5429:2	5429:2	4	if
LEAF_NODE	5429:2	5429:2	5	if
LEAF_NODE	5429:5	5429:5	4	(
CONDITION	5429:6	5429:6	4	! ( crop -> crop_mode & CROP_ZONES )
EXPR	5429:6	5429:6	5	! ( crop -> crop_mode & CROP_ZONES )
UNARY_EXPR	5429:6	5429:36	6	! ( crop -> crop_mode & CROP_ZONES )
UNARY_OPERATOR	5429:6	5429:6	7	!
LEAF_NODE	5429:6	5429:6	8	!
LEAF_NODE	5429:7	5429:7	7	(
FIELD	5429:8	5429:14	7	crop -> crop_mode
LEAF_NODE	5429:8	5429:8	8	crop
LEAF_NODE	5429:12	5429:12	8	->
LEAF_NODE	5429:14	5429:14	8	crop_mode
LEAF_NODE	5429:24	5429:24	7	&
FIELD	5429:26	5429:26	7	CROP_ZONES
LEAF_NODE	5429:26	5429:26	8	CROP_ZONES
LEAF_NODE	5429:36	5429:36	7	)
LEAF_NODE	5429:37	5429:37	4	)
STATEMENTS	5430:4	5448:4	4	
LEAF_NODE	5430:4	5430:4	5	{
STATEMENTS	5431:4	5438:4	5	
SELECTION	5431:4	5432:6	6	
KEYWORD	5431:4	5431:4	7	if
LEAF_NODE	5431:4	5431:4	8	if
LEAF_NODE	5431:7	5431:7	7	(
CONDITION	5431:8	5431:8	7	need_buff == FALSE
EXPR	5431:8	5431:21	8	need_buff == FALSE
FIELD	5431:8	5431:8	9	need_buff
LEAF_NODE	5431:8	5431:8	10	need_buff
EQ_OPERATOR	5431:18	5431:18	9	==
LEAF_NODE	5431:18	5431:18	10	==
FIELD	5431:21	5431:21	9	FALSE
LEAF_NODE	5431:21	5431:21	10	FALSE
LEAF_NODE	5431:26	5431:26	7	)
STATEMENTS	5432:6	5437:6	7	
LEAF_NODE	5432:6	5432:6	8	{
STATEMENTS	5433:6	5436:6	8	
EXPR_STATEMENT	5433:6	5433:26	9	crop -> selections = 0 ;
EXPR	5433:6	5433:6	10	crop -> selections = 0
ASSIGN	5433:6	5433:25	11	crop -> selections = 0
LVAL	5433:6	5433:6	12	crop -> selections
FIELD	5433:6	5433:12	13	crop -> selections
LEAF_NODE	5433:6	5433:6	14	crop
LEAF_NODE	5433:10	5433:10	14	->
LEAF_NODE	5433:12	5433:12	14	selections
ASSIGN_OP	5433:23	5433:23	12	=
LEAF_NODE	5433:23	5433:23	13	=
RVAL	5433:25	5433:25	12	0
FIELD	5433:25	5433:25	13	0
LEAF_NODE	5433:25	5433:25	14	0
LEAF_NODE	5433:26	5433:26	10	;
EXPR_STATEMENT	5434:6	5434:42	9	crop -> combined_width = image -> width ;
EXPR	5434:6	5434:6	10	crop -> combined_width = image -> width
ASSIGN	5434:6	5434:30	11	crop -> combined_width = image -> width
LVAL	5434:6	5434:6	12	crop -> combined_width
FIELD	5434:6	5434:12	13	crop -> combined_width
LEAF_NODE	5434:6	5434:6	14	crop
LEAF_NODE	5434:10	5434:10	14	->
LEAF_NODE	5434:12	5434:12	14	combined_width
ASSIGN_OP	5434:28	5434:28	12	=
LEAF_NODE	5434:28	5434:28	13	=
RVAL	5434:30	5434:30	12	image -> width
FIELD	5434:30	5434:37	13	image -> width
LEAF_NODE	5434:30	5434:30	14	image
LEAF_NODE	5434:35	5434:35	14	->
LEAF_NODE	5434:37	5434:37	14	width
LEAF_NODE	5434:42	5434:42	10	;
EXPR_STATEMENT	5435:6	5435:43	9	crop -> combined_length = image -> length ;
EXPR	5435:6	5435:6	10	crop -> combined_length = image -> length
ASSIGN	5435:6	5435:30	11	crop -> combined_length = image -> length
LVAL	5435:6	5435:6	12	crop -> combined_length
FIELD	5435:6	5435:12	13	crop -> combined_length
LEAF_NODE	5435:6	5435:6	14	crop
LEAF_NODE	5435:10	5435:10	14	->
LEAF_NODE	5435:12	5435:12	14	combined_length
ASSIGN_OP	5435:28	5435:28	12	=
LEAF_NODE	5435:28	5435:28	13	=
RVAL	5435:30	5435:30	12	image -> length
FIELD	5435:30	5435:37	13	image -> length
LEAF_NODE	5435:30	5435:30	14	image
LEAF_NODE	5435:35	5435:35	14	->
LEAF_NODE	5435:37	5435:37	14	length
LEAF_NODE	5435:43	5435:43	10	;
JUMP_STATEMENT	5436:6	5436:16	9	return ( 0 ) ;
KEYWORD	5436:6	5436:6	10	return
LEAF_NODE	5436:6	5436:6	11	return
DESTINATION	5436:13	5436:13	10	( 0 )
EXPR	5436:13	5436:15	11	( 0 )
LEAF_NODE	5436:13	5436:13	12	(
FIELD	5436:14	5436:14	12	0
LEAF_NODE	5436:14	5436:14	13	0
LEAF_NODE	5436:15	5436:15	12	)
LEAF_NODE	5436:16	5436:16	10	;
LEAF_NODE	5437:6	5437:6	8	}
SELECTION	5438:4	5439:6	6	
KEYWORD	5438:4	5438:4	7	else
LEAF_NODE	5438:4	5438:4	8	else
STATEMENTS	5439:6	5447:6	7	
LEAF_NODE	5439:6	5439:6	8	{
STATEMENTS	5443:6	5446:6	8	
EXPR_STATEMENT	5443:6	5443:26	9	crop -> selections = 1 ;
EXPR	5443:6	5443:6	10	crop -> selections = 1
ASSIGN	5443:6	5443:25	11	crop -> selections = 1
LVAL	5443:6	5443:6	12	crop -> selections
FIELD	5443:6	5443:12	13	crop -> selections
LEAF_NODE	5443:6	5443:6	14	crop
LEAF_NODE	5443:10	5443:10	14	->
LEAF_NODE	5443:12	5443:12	14	selections
ASSIGN_OP	5443:23	5443:23	12	=
LEAF_NODE	5443:23	5443:23	13	=
RVAL	5443:25	5443:25	12	1
FIELD	5443:25	5443:25	13	1
LEAF_NODE	5443:25	5443:25	14	1
LEAF_NODE	5443:26	5443:26	10	;
EXPR_STATEMENT	5444:6	5444:21	9	crop -> zones = 1 ;
EXPR	5444:6	5444:6	10	crop -> zones = 1
ASSIGN	5444:6	5444:20	11	crop -> zones = 1
LVAL	5444:6	5444:6	12	crop -> zones
FIELD	5444:6	5444:12	13	crop -> zones
LEAF_NODE	5444:6	5444:6	14	crop
LEAF_NODE	5444:10	5444:10	14	->
LEAF_NODE	5444:12	5444:12	14	zones
ASSIGN_OP	5444:18	5444:18	12	=
LEAF_NODE	5444:18	5444:18	13	=
RVAL	5444:20	5444:20	12	1
FIELD	5444:20	5444:20	13	1
LEAF_NODE	5444:20	5444:20	14	1
LEAF_NODE	5444:21	5444:21	10	;
EXPR_STATEMENT	5445:6	5445:33	9	crop -> zonelist [ 0 ] . total = 1 ;
EXPR	5445:6	5445:6	10	crop -> zonelist [ 0 ] . total = 1
ASSIGN	5445:6	5445:32	11	crop -> zonelist [ 0 ] . total = 1
LVAL	5445:6	5445:6	12	crop -> zonelist [ 0 ] . total
FIELD	5445:6	5445:24	13	crop -> zonelist [ 0 ] . total
LEAF_NODE	5445:6	5445:6	14	crop
LEAF_NODE	5445:10	5445:10	14	->
LEAF_NODE	5445:12	5445:12	14	zonelist
LEAF_NODE	5445:20	5445:20	14	[
EXPR	5445:21	5445:21	14	0
FIELD	5445:21	5445:21	15	0
LEAF_NODE	5445:21	5445:21	16	0
LEAF_NODE	5445:22	5445:22	14	]
LEAF_NODE	5445:23	5445:23	14	.
LEAF_NODE	5445:24	5445:24	14	total
ASSIGN_OP	5445:30	5445:30	12	=
LEAF_NODE	5445:30	5445:30	13	=
RVAL	5445:32	5445:32	12	1
FIELD	5445:32	5445:32	13	1
LEAF_NODE	5445:32	5445:32	14	1
LEAF_NODE	5445:33	5445:33	10	;
EXPR_STATEMENT	5446:6	5446:36	9	crop -> zonelist [ 0 ] . position = 1 ;
EXPR	5446:6	5446:6	10	crop -> zonelist [ 0 ] . position = 1
ASSIGN	5446:6	5446:35	11	crop -> zonelist [ 0 ] . position = 1
LVAL	5446:6	5446:6	12	crop -> zonelist [ 0 ] . position
FIELD	5446:6	5446:24	13	crop -> zonelist [ 0 ] . position
LEAF_NODE	5446:6	5446:6	14	crop
LEAF_NODE	5446:10	5446:10	14	->
LEAF_NODE	5446:12	5446:12	14	zonelist
LEAF_NODE	5446:20	5446:20	14	[
EXPR	5446:21	5446:21	14	0
FIELD	5446:21	5446:21	15	0
LEAF_NODE	5446:21	5446:21	16	0
LEAF_NODE	5446:22	5446:22	14	]
LEAF_NODE	5446:23	5446:23	14	.
LEAF_NODE	5446:24	5446:24	14	position
ASSIGN_OP	5446:33	5446:33	12	=
LEAF_NODE	5446:33	5446:33	13	=
RVAL	5446:35	5446:35	12	1
FIELD	5446:35	5446:35	13	1
LEAF_NODE	5446:35	5446:35	14	1
LEAF_NODE	5446:36	5446:36	10	;
LEAF_NODE	5447:6	5447:6	8	}
LEAF_NODE	5448:4	5448:4	5	}
SELECTION	5449:2	5450:4	3	
KEYWORD	5449:2	5449:2	4	else
LEAF_NODE	5449:2	5449:2	5	else
STATEMENTS	5450:4	5450:4	4	
EXPR_STATEMENT	5450:4	5450:34	5	crop -> selections = crop -> zones ;
EXPR	5450:4	5450:4	6	crop -> selections = crop -> zones
ASSIGN	5450:4	5450:23	7	crop -> selections = crop -> zones
LVAL	5450:4	5450:4	8	crop -> selections
FIELD	5450:4	5450:10	9	crop -> selections
LEAF_NODE	5450:4	5450:4	10	crop
LEAF_NODE	5450:8	5450:8	10	->
LEAF_NODE	5450:10	5450:10	10	selections
ASSIGN_OP	5450:21	5450:21	8	=
LEAF_NODE	5450:21	5450:21	9	=
RVAL	5450:23	5450:23	8	crop -> zones
FIELD	5450:23	5450:29	9	crop -> zones
LEAF_NODE	5450:23	5450:23	10	crop
LEAF_NODE	5450:27	5450:27	10	->
LEAF_NODE	5450:29	5450:29	10	zones
LEAF_NODE	5450:34	5450:34	6	;
ITERATION	5452:2	5453:4	3	
KEYWORD	5452:2	5452:2	4	for
LEAF_NODE	5452:2	5452:2	5	for
LEAF_NODE	5452:6	5452:6	4	(
FOR_INIT	5452:7	5452:12	4	i = 0 ;
EXPR	5452:7	5452:7	5	i = 0
ASSIGN	5452:7	5452:11	6	i = 0
LVAL	5452:7	5452:7	7	i
FIELD	5452:7	5452:7	8	i
LEAF_NODE	5452:7	5452:7	9	i
ASSIGN_OP	5452:9	5452:9	7	=
LEAF_NODE	5452:9	5452:9	8	=
RVAL	5452:11	5452:11	7	0
FIELD	5452:11	5452:11	8	0
LEAF_NODE	5452:11	5452:11	9	0
LEAF_NODE	5452:12	5452:12	5	;
CONDITION	5452:14	5452:14	4	i < crop -> zones
EXPR	5452:14	5452:18	5	i < crop -> zones
FIELD	5452:14	5452:14	6	i
LEAF_NODE	5452:14	5452:14	7	i
REL_OPERATOR	5452:16	5452:16	6	<
LEAF_NODE	5452:16	5452:16	7	<
FIELD	5452:18	5452:24	6	crop -> zones
LEAF_NODE	5452:18	5452:18	7	crop
LEAF_NODE	5452:22	5452:22	7	->
LEAF_NODE	5452:24	5452:24	7	zones
LEAF_NODE	5452:29	5452:29	4	;
FOR_EXPR	5452:31	5452:31	4	i ++
EXPR	5452:31	5452:31	5	i ++
FIELD	5452:31	5452:32	6	i ++
LEAF_NODE	5452:31	5452:31	7	i
LEAF_NODE	5452:32	5452:32	7	++
LEAF_NODE	5452:34	5452:34	4	)
STATEMENTS	5453:4	5584:4	4	
LEAF_NODE	5453:4	5453:4	5	{
STATEMENTS	5454:4	5579:2	5	
EXPR_STATEMENT	5454:4	5454:36	6	seg = crop -> zonelist [ i ] . position ;
EXPR	5454:4	5454:4	7	seg = crop -> zonelist [ i ] . position
ASSIGN	5454:4	5454:10	8	seg = crop -> zonelist [ i ] . position
LVAL	5454:4	5454:4	9	seg
FIELD	5454:4	5454:4	10	seg
LEAF_NODE	5454:4	5454:4	11	seg
ASSIGN_OP	5454:8	5454:8	9	=
LEAF_NODE	5454:8	5454:8	10	=
RVAL	5454:10	5454:10	9	crop -> zonelist [ i ] . position
FIELD	5454:10	5454:28	10	crop -> zonelist [ i ] . position
LEAF_NODE	5454:10	5454:10	11	crop
LEAF_NODE	5454:14	5454:14	11	->
LEAF_NODE	5454:16	5454:16	11	zonelist
LEAF_NODE	5454:24	5454:24	11	[
EXPR	5454:25	5454:25	11	i
FIELD	5454:25	5454:25	12	i
LEAF_NODE	5454:25	5454:25	13	i
LEAF_NODE	5454:26	5454:26	11	]
LEAF_NODE	5454:27	5454:27	11	.
LEAF_NODE	5454:28	5454:28	11	position
LEAF_NODE	5454:36	5454:36	7	;
EXPR_STATEMENT	5455:4	5455:35	6	total = crop -> zonelist [ i ] . total ;
EXPR	5455:4	5455:4	7	total = crop -> zonelist [ i ] . total
ASSIGN	5455:4	5455:12	8	total = crop -> zonelist [ i ] . total
LVAL	5455:4	5455:4	9	total
FIELD	5455:4	5455:4	10	total
LEAF_NODE	5455:4	5455:4	11	total
ASSIGN_OP	5455:10	5455:10	9	=
LEAF_NODE	5455:10	5455:10	10	=
RVAL	5455:12	5455:12	9	crop -> zonelist [ i ] . total
FIELD	5455:12	5455:30	10	crop -> zonelist [ i ] . total
LEAF_NODE	5455:12	5455:12	11	crop
LEAF_NODE	5455:16	5455:16	11	->
LEAF_NODE	5455:18	5455:18	11	zonelist
LEAF_NODE	5455:26	5455:26	11	[
EXPR	5455:27	5455:27	11	i
FIELD	5455:27	5455:27	12	i
LEAF_NODE	5455:27	5455:27	13	i
LEAF_NODE	5455:28	5455:28	11	]
LEAF_NODE	5455:29	5455:29	11	.
LEAF_NODE	5455:30	5455:30	11	total
LEAF_NODE	5455:35	5455:35	7	;
SELECTION	5457:4	5458:6	6	
KEYWORD	5457:4	5457:4	7	switch
LEAF_NODE	5457:4	5457:4	8	switch
LEAF_NODE	5457:11	5457:11	7	(
CONDITION	5457:12	5457:12	7	crop -> edge_ref
EXPR	5457:12	5457:12	8	crop -> edge_ref
FIELD	5457:12	5457:18	9	crop -> edge_ref
LEAF_NODE	5457:12	5457:12	10	crop
LEAF_NODE	5457:16	5457:16	10	->
LEAF_NODE	5457:18	5457:18	10	edge_ref
LEAF_NODE	5457:26	5457:26	7	)
STATEMENTS	5458:6	5569:6	7	
LEAF_NODE	5458:6	5458:6	8	{
STATEMENTS	5459:6	5568:11	8	
LABEL	5459:6	5459:20	9	case EDGE_LEFT :
LEAF_NODE	5459:6	5459:6	10	case
LEAF_NODE	5459:11	5459:11	10	EDGE_LEFT
LEAF_NODE	5459:20	5459:20	10	:
EXPR_STATEMENT	5460:11	5460:40	9	zlength = offsets . crop_length ;
EXPR	5460:11	5460:11	10	zlength = offsets . crop_length
ASSIGN	5460:11	5460:21	11	zlength = offsets . crop_length
LVAL	5460:11	5460:11	12	zlength
FIELD	5460:11	5460:11	13	zlength
LEAF_NODE	5460:11	5460:11	14	zlength
ASSIGN_OP	5460:19	5460:19	12	=
LEAF_NODE	5460:19	5460:19	13	=
RVAL	5460:21	5460:21	12	offsets . crop_length
FIELD	5460:21	5460:29	13	offsets . crop_length
LEAF_NODE	5460:21	5460:21	14	offsets
LEAF_NODE	5460:28	5460:28	14	.
LEAF_NODE	5460:29	5460:29	14	crop_length
LEAF_NODE	5460:40	5460:40	10	;
EXPR_STATEMENT	5461:4	5461:43	9	crop -> regionlist [ i ] . y1 = offsets . starty ;
EXPR	5461:4	5461:4	10	crop -> regionlist [ i ] . y1 = offsets . starty
ASSIGN	5461:4	5461:29	11	crop -> regionlist [ i ] . y1 = offsets . starty
LVAL	5461:4	5461:4	12	crop -> regionlist [ i ] . y1
FIELD	5461:4	5461:24	13	crop -> regionlist [ i ] . y1
LEAF_NODE	5461:4	5461:4	14	crop
LEAF_NODE	5461:8	5461:8	14	->
LEAF_NODE	5461:10	5461:10	14	regionlist
LEAF_NODE	5461:20	5461:20	14	[
EXPR	5461:21	5461:21	14	i
FIELD	5461:21	5461:21	15	i
LEAF_NODE	5461:21	5461:21	16	i
LEAF_NODE	5461:22	5461:22	14	]
LEAF_NODE	5461:23	5461:23	14	.
LEAF_NODE	5461:24	5461:24	14	y1
ASSIGN_OP	5461:27	5461:27	12	=
LEAF_NODE	5461:27	5461:27	13	=
RVAL	5461:29	5461:29	12	offsets . starty
FIELD	5461:29	5461:37	13	offsets . starty
LEAF_NODE	5461:29	5461:29	14	offsets
LEAF_NODE	5461:36	5461:36	14	.
LEAF_NODE	5461:37	5461:37	14	starty
LEAF_NODE	5461:43	5461:43	10	;
EXPR_STATEMENT	5462:11	5462:48	9	crop -> regionlist [ i ] . y2 = offsets . endy ;
EXPR	5462:11	5462:11	10	crop -> regionlist [ i ] . y2 = offsets . endy
ASSIGN	5462:11	5462:36	11	crop -> regionlist [ i ] . y2 = offsets . endy
LVAL	5462:11	5462:11	12	crop -> regionlist [ i ] . y2
FIELD	5462:11	5462:31	13	crop -> regionlist [ i ] . y2
LEAF_NODE	5462:11	5462:11	14	crop
LEAF_NODE	5462:15	5462:15	14	->
LEAF_NODE	5462:17	5462:17	14	regionlist
LEAF_NODE	5462:27	5462:27	14	[
EXPR	5462:28	5462:28	14	i
FIELD	5462:28	5462:28	15	i
LEAF_NODE	5462:28	5462:28	16	i
LEAF_NODE	5462:29	5462:29	14	]
LEAF_NODE	5462:30	5462:30	14	.
LEAF_NODE	5462:31	5462:31	14	y2
ASSIGN_OP	5462:34	5462:34	12	=
LEAF_NODE	5462:34	5462:34	13	=
RVAL	5462:36	5462:36	12	offsets . endy
FIELD	5462:36	5462:44	13	offsets . endy
LEAF_NODE	5462:36	5462:36	14	offsets
LEAF_NODE	5462:43	5462:43	14	.
LEAF_NODE	5462:44	5462:44	14	endy
LEAF_NODE	5462:48	5462:48	10	;
LEAF_NODE	5464:11	5464:11	9	crop
LEAF_NODE	5464:15	5464:15	9	->
LEAF_NODE	5464:17	5464:17	9	regionlist
LEAF_NODE	5464:27	5464:27	9	[
LEAF_NODE	5464:28	5464:28	9	i
LEAF_NODE	5464:29	5464:29	9	]
LEAF_NODE	5464:30	5464:30	9	.
LEAF_NODE	5464:31	5464:31	9	x1
LEAF_NODE	5464:34	5464:34	9	=
LEAF_NODE	5464:36	5464:36	9	offsets
LEAF_NODE	5464:43	5464:43	9	.
LEAF_NODE	5464:44	5464:44	9	startx
LEAF_NODE	5464:51	5464:51	9	+
LEAF_NODE	5465:34	5465:34	9	(
LEAF_NODE	5465:35	5465:35	9	uint32
LEAF_NODE	5465:41	5465:41	9	)
LEAF_NODE	5465:42	5465:42	9	(
LEAF_NODE	5465:43	5465:43	9	offsets
LEAF_NODE	5465:50	5465:50	9	.
LEAF_NODE	5465:51	5465:51	9	crop_width
LEAF_NODE	5465:62	5465:62	9	*
LEAF_NODE	5465:64	5465:64	9	1.0
LEAF_NODE	5465:68	5465:68	9	*
LEAF_NODE	5465:70	5465:70	9	(
LEAF_NODE	5465:71	5465:71	9	seg
LEAF_NODE	5465:75	5465:75	9	-
LEAF_NODE	5465:77	5465:77	9	1
LEAF_NODE	5465:78	5465:78	9	)
LEAF_NODE	5465:80	5465:80	9	/
LEAF_NODE	5465:82	5465:82	9	total
LEAF_NODE	5465:87	5465:87	9	)
LEAF_NODE	5465:88	5465:88	9	;
LEAF_NODE	5466:11	5466:11	9	test
LEAF_NODE	5466:16	5466:16	9	=
LEAF_NODE	5466:18	5466:18	9	(
LEAF_NODE	5466:19	5466:19	9	int32
LEAF_NODE	5466:24	5466:24	9	)
LEAF_NODE	5466:25	5466:25	9	offsets
LEAF_NODE	5466:32	5466:32	9	.
LEAF_NODE	5466:33	5466:33	9	startx
LEAF_NODE	5466:40	5466:40	9	+
LEAF_NODE	5467:18	5467:18	9	(
LEAF_NODE	5467:19	5467:19	9	int32
LEAF_NODE	5467:24	5467:24	9	)
LEAF_NODE	5467:25	5467:25	9	(
LEAF_NODE	5467:26	5467:26	9	offsets
LEAF_NODE	5467:33	5467:33	9	.
LEAF_NODE	5467:34	5467:34	9	crop_width
LEAF_NODE	5467:45	5467:45	9	*
LEAF_NODE	5467:47	5467:47	9	1.0
LEAF_NODE	5467:51	5467:51	9	*
LEAF_NODE	5467:53	5467:53	9	seg
LEAF_NODE	5467:57	5467:57	9	/
LEAF_NODE	5467:59	5467:59	9	total
LEAF_NODE	5467:64	5467:64	9	)
LEAF_NODE	5467:65	5467:65	9	;
SELECTION	5468:11	5469:13	9	
KEYWORD	5468:11	5468:11	10	if
LEAF_NODE	5468:11	5468:11	11	if
LEAF_NODE	5468:14	5468:14	10	(
CONDITION	5468:15	5468:15	10	test < 1
EXPR	5468:15	5468:22	11	test < 1
FIELD	5468:15	5468:15	12	test
LEAF_NODE	5468:15	5468:15	13	test
REL_OPERATOR	5468:20	5468:20	12	<
LEAF_NODE	5468:20	5468:20	13	<
FIELD	5468:22	5468:22	12	1
LEAF_NODE	5468:22	5468:22	13	1
LEAF_NODE	5468:24	5468:24	10	)
STATEMENTS	5469:13	5469:13	10	
EXPR_STATEMENT	5469:13	5469:39	11	crop -> regionlist [ i ] . x2 = 0 ;
EXPR	5469:13	5469:13	12	crop -> regionlist [ i ] . x2 = 0
ASSIGN	5469:13	5469:38	13	crop -> regionlist [ i ] . x2 = 0
LVAL	5469:13	5469:13	14	crop -> regionlist [ i ] . x2
FIELD	5469:13	5469:33	15	crop -> regionlist [ i ] . x2
LEAF_NODE	5469:13	5469:13	16	crop
LEAF_NODE	5469:17	5469:17	16	->
LEAF_NODE	5469:19	5469:19	16	regionlist
LEAF_NODE	5469:29	5469:29	16	[
EXPR	5469:30	5469:30	16	i
FIELD	5469:30	5469:30	17	i
LEAF_NODE	5469:30	5469:30	18	i
LEAF_NODE	5469:31	5469:31	16	]
LEAF_NODE	5469:32	5469:32	16	.
LEAF_NODE	5469:33	5469:33	16	x2
ASSIGN_OP	5469:36	5469:36	14	=
LEAF_NODE	5469:36	5469:36	15	=
RVAL	5469:38	5469:38	14	0
FIELD	5469:38	5469:38	15	0
LEAF_NODE	5469:38	5469:38	16	0
LEAF_NODE	5469:39	5469:39	12	;
SELECTION	5470:11	5471:6	9	
KEYWORD	5470:11	5470:11	10	else
LEAF_NODE	5470:11	5470:11	11	else
STATEMENTS	5471:6	5476:13	10	
LEAF_NODE	5471:6	5471:6	11	{
STATEMENTS	5472:6	5474:13	11	
SELECTION	5472:6	5473:15	12	
KEYWORD	5472:6	5472:6	13	if
LEAF_NODE	5472:6	5472:6	14	if
LEAF_NODE	5472:9	5472:9	13	(
CONDITION	5472:10	5472:10	13	test > ( int32 ) ( image -> width - 1 )
EXPR	5472:10	5472:41	14	test > ( int32 ) ( image -> width - 1 )
FIELD	5472:10	5472:10	15	test
LEAF_NODE	5472:10	5472:10	16	test
REL_OPERATOR	5472:15	5472:15	15	>
LEAF_NODE	5472:15	5472:15	16	>
LEAF_NODE	5472:17	5472:17	15	(
TYPE_NAME	5472:18	5472:18	15	int32
LEAF_NODE	5472:18	5472:18	16	int32
LEAF_NODE	5472:23	5472:23	15	)
LEAF_NODE	5472:24	5472:24	15	(
FIELD	5472:25	5472:32	15	image -> width
LEAF_NODE	5472:25	5472:25	16	image
LEAF_NODE	5472:30	5472:30	16	->
LEAF_NODE	5472:32	5472:32	16	width
LEAF_NODE	5472:38	5472:38	15	-
FIELD	5472:40	5472:40	15	1
LEAF_NODE	5472:40	5472:40	16	1
LEAF_NODE	5472:41	5472:41	15	)
LEAF_NODE	5472:42	5472:42	13	)
STATEMENTS	5473:15	5473:15	13	
EXPR_STATEMENT	5473:15	5473:56	14	crop -> regionlist [ i ] . x2 = image -> width - 1 ;
EXPR	5473:15	5473:15	15	crop -> regionlist [ i ] . x2 = image -> width - 1
ASSIGN	5473:15	5473:40	16	crop -> regionlist [ i ] . x2 = image -> width - 1
LVAL	5473:15	5473:15	17	crop -> regionlist [ i ] . x2
FIELD	5473:15	5473:35	18	crop -> regionlist [ i ] . x2
LEAF_NODE	5473:15	5473:15	19	crop
LEAF_NODE	5473:19	5473:19	19	->
LEAF_NODE	5473:21	5473:21	19	regionlist
LEAF_NODE	5473:31	5473:31	19	[
EXPR	5473:32	5473:32	19	i
FIELD	5473:32	5473:32	20	i
LEAF_NODE	5473:32	5473:32	21	i
LEAF_NODE	5473:33	5473:33	19	]
LEAF_NODE	5473:34	5473:34	19	.
LEAF_NODE	5473:35	5473:35	19	x2
ASSIGN_OP	5473:38	5473:38	17	=
LEAF_NODE	5473:38	5473:38	18	=
RVAL	5473:40	5473:55	17	image -> width - 1
FIELD	5473:40	5473:47	18	image -> width
LEAF_NODE	5473:40	5473:40	19	image
LEAF_NODE	5473:45	5473:45	19	->
LEAF_NODE	5473:47	5473:47	19	width
LEAF_NODE	5473:53	5473:53	18	-
FIELD	5473:55	5473:55	18	1
LEAF_NODE	5473:55	5473:55	19	1
LEAF_NODE	5473:56	5473:56	15	;
SELECTION	5474:13	5475:8	12	
KEYWORD	5474:13	5474:13	13	else
LEAF_NODE	5474:13	5474:13	14	else
STATEMENTS	5475:8	5475:8	13	
EXPR_STATEMENT	5475:8	5475:41	14	crop -> regionlist [ i ] . x2 = test - 1 ;
EXPR	5475:8	5475:8	15	crop -> regionlist [ i ] . x2 = test - 1
ASSIGN	5475:8	5475:33	16	crop -> regionlist [ i ] . x2 = test - 1
LVAL	5475:8	5475:8	17	crop -> regionlist [ i ] . x2
FIELD	5475:8	5475:28	18	crop -> regionlist [ i ] . x2
LEAF_NODE	5475:8	5475:8	19	crop
LEAF_NODE	5475:12	5475:12	19	->
LEAF_NODE	5475:14	5475:14	19	regionlist
LEAF_NODE	5475:24	5475:24	19	[
EXPR	5475:25	5475:25	19	i
FIELD	5475:25	5475:25	20	i
LEAF_NODE	5475:25	5475:25	21	i
LEAF_NODE	5475:26	5475:26	19	]
LEAF_NODE	5475:27	5475:27	19	.
LEAF_NODE	5475:28	5475:28	19	x2
ASSIGN_OP	5475:31	5475:31	17	=
LEAF_NODE	5475:31	5475:31	18	=
RVAL	5475:33	5475:40	17	test - 1
FIELD	5475:33	5475:33	18	test
LEAF_NODE	5475:33	5475:33	19	test
LEAF_NODE	5475:38	5475:38	18	-
FIELD	5475:40	5475:40	18	1
LEAF_NODE	5475:40	5475:40	19	1
LEAF_NODE	5475:41	5475:41	15	;
LEAF_NODE	5476:13	5476:13	11	}
EXPR_STATEMENT	5477:11	5477:72	9	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1 ;
EXPR	5477:11	5477:11	10	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
ASSIGN	5477:11	5477:20	11	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
LVAL	5477:11	5477:11	12	zwidth
FIELD	5477:11	5477:11	13	zwidth
LEAF_NODE	5477:11	5477:11	14	zwidth
ASSIGN_OP	5477:18	5477:18	12	=
LEAF_NODE	5477:18	5477:18	13	=
RVAL	5477:20	5477:71	12	crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
FIELD	5477:20	5477:40	13	crop -> regionlist [ i ] . x2
LEAF_NODE	5477:20	5477:20	14	crop
LEAF_NODE	5477:24	5477:24	14	->
LEAF_NODE	5477:26	5477:26	14	regionlist
LEAF_NODE	5477:36	5477:36	14	[
EXPR	5477:37	5477:37	14	i
FIELD	5477:37	5477:37	15	i
LEAF_NODE	5477:37	5477:37	16	i
LEAF_NODE	5477:38	5477:38	14	]
LEAF_NODE	5477:39	5477:39	14	.
LEAF_NODE	5477:40	5477:40	14	x2
LEAF_NODE	5477:43	5477:43	13	-
FIELD	5477:45	5477:65	13	crop -> regionlist [ i ] . x1
LEAF_NODE	5477:45	5477:45	14	crop
LEAF_NODE	5477:49	5477:49	14	->
LEAF_NODE	5477:51	5477:51	14	regionlist
LEAF_NODE	5477:61	5477:61	14	[
EXPR	5477:62	5477:62	14	i
FIELD	5477:62	5477:62	15	i
LEAF_NODE	5477:62	5477:62	16	i
LEAF_NODE	5477:63	5477:63	14	]
LEAF_NODE	5477:64	5477:64	14	.
LEAF_NODE	5477:65	5477:65	14	x1
LEAF_NODE	5477:69	5477:69	13	+
FIELD	5477:71	5477:71	13	1
LEAF_NODE	5477:71	5477:71	14	1
LEAF_NODE	5477:72	5477:72	10	;
EXPR_STATEMENT	5480:11	5480:50	9	crop -> combined_length = ( uint32 ) zlength ;
EXPR	5480:11	5480:11	10	crop -> combined_length = ( uint32 ) zlength
ASSIGN	5480:11	5480:35	11	crop -> combined_length = ( uint32 ) zlength
LVAL	5480:11	5480:11	12	crop -> combined_length
FIELD	5480:11	5480:17	13	crop -> combined_length
LEAF_NODE	5480:11	5480:11	14	crop
LEAF_NODE	5480:15	5480:15	14	->
LEAF_NODE	5480:17	5480:17	14	combined_length
ASSIGN_OP	5480:33	5480:33	12	=
LEAF_NODE	5480:33	5480:33	13	=
RVAL	5480:35	5480:43	12	( uint32 ) zlength
LEAF_NODE	5480:35	5480:35	13	(
TYPE_NAME	5480:36	5480:36	13	uint32
LEAF_NODE	5480:36	5480:36	14	uint32
LEAF_NODE	5480:42	5480:42	13	)
FIELD	5480:43	5480:43	13	zlength
LEAF_NODE	5480:43	5480:43	14	zlength
LEAF_NODE	5480:50	5480:50	10	;
SELECTION	5481:11	5482:13	9	
KEYWORD	5481:11	5481:11	10	if
LEAF_NODE	5481:11	5481:11	11	if
LEAF_NODE	5481:14	5481:14	10	(
CONDITION	5481:15	5481:15	10	crop -> exp_mode == COMPOSITE_IMAGES
EXPR	5481:15	5481:33	11	crop -> exp_mode == COMPOSITE_IMAGES
FIELD	5481:15	5481:21	12	crop -> exp_mode
LEAF_NODE	5481:15	5481:15	13	crop
LEAF_NODE	5481:19	5481:19	13	->
LEAF_NODE	5481:21	5481:21	13	exp_mode
EQ_OPERATOR	5481:30	5481:30	12	==
LEAF_NODE	5481:30	5481:30	13	==
FIELD	5481:33	5481:33	12	COMPOSITE_IMAGES
LEAF_NODE	5481:33	5481:33	13	COMPOSITE_IMAGES
LEAF_NODE	5481:49	5481:49	10	)
STATEMENTS	5482:13	5482:13	10	
EXPR_STATEMENT	5482:13	5482:51	11	crop -> combined_width += ( uint32 ) zwidth ;
EXPR	5482:13	5482:13	12	crop -> combined_width += ( uint32 ) zwidth
ASSIGN	5482:13	5482:37	13	crop -> combined_width += ( uint32 ) zwidth
LVAL	5482:13	5482:13	14	crop -> combined_width
FIELD	5482:13	5482:19	15	crop -> combined_width
LEAF_NODE	5482:13	5482:13	16	crop
LEAF_NODE	5482:17	5482:17	16	->
LEAF_NODE	5482:19	5482:19	16	combined_width
ASSIGN_OP	5482:34	5482:34	14	+=
LEAF_NODE	5482:34	5482:34	15	+=
RVAL	5482:37	5482:45	14	( uint32 ) zwidth
LEAF_NODE	5482:37	5482:37	15	(
TYPE_NAME	5482:38	5482:38	15	uint32
LEAF_NODE	5482:38	5482:38	16	uint32
LEAF_NODE	5482:44	5482:44	15	)
FIELD	5482:45	5482:45	15	zwidth
LEAF_NODE	5482:45	5482:45	16	zwidth
LEAF_NODE	5482:51	5482:51	12	;
SELECTION	5483:11	5484:13	9	
KEYWORD	5483:11	5483:11	10	else
LEAF_NODE	5483:11	5483:11	11	else
STATEMENTS	5484:13	5484:13	10	
EXPR_STATEMENT	5484:13	5484:50	11	crop -> combined_width = ( uint32 ) zwidth ;
EXPR	5484:13	5484:13	12	crop -> combined_width = ( uint32 ) zwidth
ASSIGN	5484:13	5484:36	13	crop -> combined_width = ( uint32 ) zwidth
LVAL	5484:13	5484:13	14	crop -> combined_width
FIELD	5484:13	5484:19	15	crop -> combined_width
LEAF_NODE	5484:13	5484:13	16	crop
LEAF_NODE	5484:17	5484:17	16	->
LEAF_NODE	5484:19	5484:19	16	combined_width
ASSIGN_OP	5484:34	5484:34	14	=
LEAF_NODE	5484:34	5484:34	15	=
RVAL	5484:36	5484:44	14	( uint32 ) zwidth
LEAF_NODE	5484:36	5484:36	15	(
TYPE_NAME	5484:37	5484:37	15	uint32
LEAF_NODE	5484:37	5484:37	16	uint32
LEAF_NODE	5484:43	5484:43	15	)
FIELD	5484:44	5484:44	15	zwidth
LEAF_NODE	5484:44	5484:44	16	zwidth
LEAF_NODE	5484:50	5484:50	12	;
JUMP_STATEMENT	5485:11	5485:16	9	break DESTINATION ;
KEYWORD	5485:11	5485:11	10	break
LEAF_NODE	5485:11	5485:11	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	5485:16	5485:16	10	;
LABEL	5486:6	5486:22	9	case EDGE_BOTTOM :
LEAF_NODE	5486:6	5486:6	10	case
LEAF_NODE	5486:11	5486:11	10	EDGE_BOTTOM
LEAF_NODE	5486:22	5486:22	10	:
EXPR_STATEMENT	5487:11	5487:38	9	zwidth = offsets . crop_width ;
EXPR	5487:11	5487:11	10	zwidth = offsets . crop_width
ASSIGN	5487:11	5487:20	11	zwidth = offsets . crop_width
LVAL	5487:11	5487:11	12	zwidth
FIELD	5487:11	5487:11	13	zwidth
LEAF_NODE	5487:11	5487:11	14	zwidth
ASSIGN_OP	5487:18	5487:18	12	=
LEAF_NODE	5487:18	5487:18	13	=
RVAL	5487:20	5487:20	12	offsets . crop_width
FIELD	5487:20	5487:28	13	offsets . crop_width
LEAF_NODE	5487:20	5487:20	14	offsets
LEAF_NODE	5487:27	5487:27	14	.
LEAF_NODE	5487:28	5487:28	14	crop_width
LEAF_NODE	5487:38	5487:38	10	;
EXPR_STATEMENT	5488:4	5488:43	9	crop -> regionlist [ i ] . x1 = offsets . startx ;
EXPR	5488:4	5488:4	10	crop -> regionlist [ i ] . x1 = offsets . startx
ASSIGN	5488:4	5488:29	11	crop -> regionlist [ i ] . x1 = offsets . startx
LVAL	5488:4	5488:4	12	crop -> regionlist [ i ] . x1
FIELD	5488:4	5488:24	13	crop -> regionlist [ i ] . x1
LEAF_NODE	5488:4	5488:4	14	crop
LEAF_NODE	5488:8	5488:8	14	->
LEAF_NODE	5488:10	5488:10	14	regionlist
LEAF_NODE	5488:20	5488:20	14	[
EXPR	5488:21	5488:21	14	i
FIELD	5488:21	5488:21	15	i
LEAF_NODE	5488:21	5488:21	16	i
LEAF_NODE	5488:22	5488:22	14	]
LEAF_NODE	5488:23	5488:23	14	.
LEAF_NODE	5488:24	5488:24	14	x1
ASSIGN_OP	5488:27	5488:27	12	=
LEAF_NODE	5488:27	5488:27	13	=
RVAL	5488:29	5488:29	12	offsets . startx
FIELD	5488:29	5488:37	13	offsets . startx
LEAF_NODE	5488:29	5488:29	14	offsets
LEAF_NODE	5488:36	5488:36	14	.
LEAF_NODE	5488:37	5488:37	14	startx
LEAF_NODE	5488:43	5488:43	10	;
EXPR_STATEMENT	5489:11	5489:48	9	crop -> regionlist [ i ] . x2 = offsets . endx ;
EXPR	5489:11	5489:11	10	crop -> regionlist [ i ] . x2 = offsets . endx
ASSIGN	5489:11	5489:36	11	crop -> regionlist [ i ] . x2 = offsets . endx
LVAL	5489:11	5489:11	12	crop -> regionlist [ i ] . x2
FIELD	5489:11	5489:31	13	crop -> regionlist [ i ] . x2
LEAF_NODE	5489:11	5489:11	14	crop
LEAF_NODE	5489:15	5489:15	14	->
LEAF_NODE	5489:17	5489:17	14	regionlist
LEAF_NODE	5489:27	5489:27	14	[
EXPR	5489:28	5489:28	14	i
FIELD	5489:28	5489:28	15	i
LEAF_NODE	5489:28	5489:28	16	i
LEAF_NODE	5489:29	5489:29	14	]
LEAF_NODE	5489:30	5489:30	14	.
LEAF_NODE	5489:31	5489:31	14	x2
ASSIGN_OP	5489:34	5489:34	12	=
LEAF_NODE	5489:34	5489:34	13	=
RVAL	5489:36	5489:36	12	offsets . endx
FIELD	5489:36	5489:44	13	offsets . endx
LEAF_NODE	5489:36	5489:36	14	offsets
LEAF_NODE	5489:43	5489:43	14	.
LEAF_NODE	5489:44	5489:44	14	endx
LEAF_NODE	5489:48	5489:48	10	;
LEAF_NODE	5491:11	5491:11	9	test
LEAF_NODE	5491:16	5491:16	9	=
LEAF_NODE	5491:18	5491:18	9	offsets
LEAF_NODE	5491:25	5491:25	9	.
LEAF_NODE	5491:26	5491:26	9	endy
LEAF_NODE	5491:31	5491:31	9	-
LEAF_NODE	5491:33	5491:33	9	(
LEAF_NODE	5491:34	5491:34	9	uint32
LEAF_NODE	5491:40	5491:40	9	)
LEAF_NODE	5491:41	5491:41	9	(
LEAF_NODE	5491:42	5491:42	9	offsets
LEAF_NODE	5491:49	5491:49	9	.
LEAF_NODE	5491:50	5491:50	9	crop_length
LEAF_NODE	5491:62	5491:62	9	*
LEAF_NODE	5491:64	5491:64	9	1.0
LEAF_NODE	5491:68	5491:68	9	*
LEAF_NODE	5491:70	5491:70	9	seg
LEAF_NODE	5491:74	5491:74	9	/
LEAF_NODE	5491:76	5491:76	9	total
LEAF_NODE	5491:81	5491:81	9	)
LEAF_NODE	5491:82	5491:82	9	;
SELECTION	5492:11	5493:6	9	
KEYWORD	5492:11	5492:11	10	if
LEAF_NODE	5492:11	5492:11	11	if
LEAF_NODE	5492:14	5492:14	10	(
CONDITION	5492:15	5492:15	10	test < 1
EXPR	5492:15	5492:22	11	test < 1
FIELD	5492:15	5492:15	12	test
LEAF_NODE	5492:15	5492:15	13	test
REL_OPERATOR	5492:20	5492:20	12	<
LEAF_NODE	5492:20	5492:20	13	<
FIELD	5492:22	5492:22	12	1
LEAF_NODE	5492:22	5492:22	13	1
LEAF_NODE	5492:24	5492:24	10	)
STATEMENTS	5493:6	5493:6	10	
EXPR_STATEMENT	5493:6	5493:32	11	crop -> regionlist [ i ] . y1 = 0 ;
EXPR	5493:6	5493:6	12	crop -> regionlist [ i ] . y1 = 0
ASSIGN	5493:6	5493:31	13	crop -> regionlist [ i ] . y1 = 0
LVAL	5493:6	5493:6	14	crop -> regionlist [ i ] . y1
FIELD	5493:6	5493:26	15	crop -> regionlist [ i ] . y1
LEAF_NODE	5493:6	5493:6	16	crop
LEAF_NODE	5493:10	5493:10	16	->
LEAF_NODE	5493:12	5493:12	16	regionlist
LEAF_NODE	5493:22	5493:22	16	[
EXPR	5493:23	5493:23	16	i
FIELD	5493:23	5493:23	17	i
LEAF_NODE	5493:23	5493:23	18	i
LEAF_NODE	5493:24	5493:24	16	]
LEAF_NODE	5493:25	5493:25	16	.
LEAF_NODE	5493:26	5493:26	16	y1
ASSIGN_OP	5493:29	5493:29	14	=
LEAF_NODE	5493:29	5493:29	15	=
RVAL	5493:31	5493:31	14	0
FIELD	5493:31	5493:31	15	0
LEAF_NODE	5493:31	5493:31	16	0
LEAF_NODE	5493:32	5493:32	12	;
SELECTION	5494:11	5495:6	9	
KEYWORD	5494:11	5494:11	10	else
LEAF_NODE	5494:11	5494:11	11	else
STATEMENTS	5495:6	5495:6	10	
EXPR_STATEMENT	5495:6	5495:39	11	crop -> regionlist [ i ] . y1 = test + 1 ;
EXPR	5495:6	5495:6	12	crop -> regionlist [ i ] . y1 = test + 1
ASSIGN	5495:6	5495:31	13	crop -> regionlist [ i ] . y1 = test + 1
LVAL	5495:6	5495:6	14	crop -> regionlist [ i ] . y1
FIELD	5495:6	5495:26	15	crop -> regionlist [ i ] . y1
LEAF_NODE	5495:6	5495:6	16	crop
LEAF_NODE	5495:10	5495:10	16	->
LEAF_NODE	5495:12	5495:12	16	regionlist
LEAF_NODE	5495:22	5495:22	16	[
EXPR	5495:23	5495:23	16	i
FIELD	5495:23	5495:23	17	i
LEAF_NODE	5495:23	5495:23	18	i
LEAF_NODE	5495:24	5495:24	16	]
LEAF_NODE	5495:25	5495:25	16	.
LEAF_NODE	5495:26	5495:26	16	y1
ASSIGN_OP	5495:29	5495:29	14	=
LEAF_NODE	5495:29	5495:29	15	=
RVAL	5495:31	5495:38	14	test + 1
FIELD	5495:31	5495:31	15	test
LEAF_NODE	5495:31	5495:31	16	test
LEAF_NODE	5495:36	5495:36	15	+
FIELD	5495:38	5495:38	15	1
LEAF_NODE	5495:38	5495:38	16	1
LEAF_NODE	5495:39	5495:39	12	;
LEAF_NODE	5497:11	5497:11	9	test
LEAF_NODE	5497:16	5497:16	9	=
LEAF_NODE	5497:18	5497:18	9	offsets
LEAF_NODE	5497:25	5497:25	9	.
LEAF_NODE	5497:26	5497:26	9	endy
LEAF_NODE	5497:31	5497:31	9	-
LEAF_NODE	5497:33	5497:33	9	(
LEAF_NODE	5497:34	5497:34	9	offsets
LEAF_NODE	5497:41	5497:41	9	.
LEAF_NODE	5497:42	5497:42	9	crop_length
LEAF_NODE	5497:54	5497:54	9	*
LEAF_NODE	5497:56	5497:56	9	1.0
LEAF_NODE	5497:60	5497:60	9	*
LEAF_NODE	5497:62	5497:62	9	(
LEAF_NODE	5497:63	5497:63	9	seg
LEAF_NODE	5497:67	5497:67	9	-
LEAF_NODE	5497:69	5497:69	9	1
LEAF_NODE	5497:70	5497:70	9	)
LEAF_NODE	5497:72	5497:72	9	/
LEAF_NODE	5497:74	5497:74	9	total
LEAF_NODE	5497:79	5497:79	9	)
LEAF_NODE	5497:80	5497:80	9	;
SELECTION	5498:11	5499:13	9	
KEYWORD	5498:11	5498:11	10	if
LEAF_NODE	5498:11	5498:11	11	if
LEAF_NODE	5498:14	5498:14	10	(
CONDITION	5498:15	5498:15	10	test < 1
EXPR	5498:15	5498:22	11	test < 1
FIELD	5498:15	5498:15	12	test
LEAF_NODE	5498:15	5498:15	13	test
REL_OPERATOR	5498:20	5498:20	12	<
LEAF_NODE	5498:20	5498:20	13	<
FIELD	5498:22	5498:22	12	1
LEAF_NODE	5498:22	5498:22	13	1
LEAF_NODE	5498:24	5498:24	10	)
STATEMENTS	5499:13	5499:13	10	
EXPR_STATEMENT	5499:13	5499:39	11	crop -> regionlist [ i ] . y2 = 0 ;
EXPR	5499:13	5499:13	12	crop -> regionlist [ i ] . y2 = 0
ASSIGN	5499:13	5499:38	13	crop -> regionlist [ i ] . y2 = 0
LVAL	5499:13	5499:13	14	crop -> regionlist [ i ] . y2
FIELD	5499:13	5499:33	15	crop -> regionlist [ i ] . y2
LEAF_NODE	5499:13	5499:13	16	crop
LEAF_NODE	5499:17	5499:17	16	->
LEAF_NODE	5499:19	5499:19	16	regionlist
LEAF_NODE	5499:29	5499:29	16	[
EXPR	5499:30	5499:30	16	i
FIELD	5499:30	5499:30	17	i
LEAF_NODE	5499:30	5499:30	18	i
LEAF_NODE	5499:31	5499:31	16	]
LEAF_NODE	5499:32	5499:32	16	.
LEAF_NODE	5499:33	5499:33	16	y2
ASSIGN_OP	5499:36	5499:36	14	=
LEAF_NODE	5499:36	5499:36	15	=
RVAL	5499:38	5499:38	14	0
FIELD	5499:38	5499:38	15	0
LEAF_NODE	5499:38	5499:38	16	0
LEAF_NODE	5499:39	5499:39	12	;
SELECTION	5500:11	5501:6	9	
KEYWORD	5500:11	5500:11	10	else
LEAF_NODE	5500:11	5500:11	11	else
STATEMENTS	5501:6	5506:6	10	
LEAF_NODE	5501:6	5501:6	11	{
STATEMENTS	5502:13	5504:13	11	
SELECTION	5502:13	5503:15	12	
KEYWORD	5502:13	5502:13	13	if
LEAF_NODE	5502:13	5502:13	14	if
LEAF_NODE	5502:16	5502:16	13	(
CONDITION	5502:17	5502:17	13	test > ( int32 ) ( image -> length - 1 )
EXPR	5502:17	5502:49	14	test > ( int32 ) ( image -> length - 1 )
FIELD	5502:17	5502:17	15	test
LEAF_NODE	5502:17	5502:17	16	test
REL_OPERATOR	5502:22	5502:22	15	>
LEAF_NODE	5502:22	5502:22	16	>
LEAF_NODE	5502:24	5502:24	15	(
TYPE_NAME	5502:25	5502:25	15	int32
LEAF_NODE	5502:25	5502:25	16	int32
LEAF_NODE	5502:30	5502:30	15	)
LEAF_NODE	5502:31	5502:31	15	(
FIELD	5502:32	5502:39	15	image -> length
LEAF_NODE	5502:32	5502:32	16	image
LEAF_NODE	5502:37	5502:37	16	->
LEAF_NODE	5502:39	5502:39	16	length
LEAF_NODE	5502:46	5502:46	15	-
FIELD	5502:48	5502:48	15	1
LEAF_NODE	5502:48	5502:48	16	1
LEAF_NODE	5502:49	5502:49	15	)
LEAF_NODE	5502:50	5502:50	13	)
STATEMENTS	5503:15	5503:15	13	
EXPR_STATEMENT	5503:15	5503:57	14	crop -> regionlist [ i ] . y2 = image -> length - 1 ;
EXPR	5503:15	5503:15	15	crop -> regionlist [ i ] . y2 = image -> length - 1
ASSIGN	5503:15	5503:40	16	crop -> regionlist [ i ] . y2 = image -> length - 1
LVAL	5503:15	5503:15	17	crop -> regionlist [ i ] . y2
FIELD	5503:15	5503:35	18	crop -> regionlist [ i ] . y2
LEAF_NODE	5503:15	5503:15	19	crop
LEAF_NODE	5503:19	5503:19	19	->
LEAF_NODE	5503:21	5503:21	19	regionlist
LEAF_NODE	5503:31	5503:31	19	[
EXPR	5503:32	5503:32	19	i
FIELD	5503:32	5503:32	20	i
LEAF_NODE	5503:32	5503:32	21	i
LEAF_NODE	5503:33	5503:33	19	]
LEAF_NODE	5503:34	5503:34	19	.
LEAF_NODE	5503:35	5503:35	19	y2
ASSIGN_OP	5503:38	5503:38	17	=
LEAF_NODE	5503:38	5503:38	18	=
RVAL	5503:40	5503:56	17	image -> length - 1
FIELD	5503:40	5503:47	18	image -> length
LEAF_NODE	5503:40	5503:40	19	image
LEAF_NODE	5503:45	5503:45	19	->
LEAF_NODE	5503:47	5503:47	19	length
LEAF_NODE	5503:54	5503:54	18	-
FIELD	5503:56	5503:56	18	1
LEAF_NODE	5503:56	5503:56	19	1
LEAF_NODE	5503:57	5503:57	15	;
SELECTION	5504:13	5505:15	12	
KEYWORD	5504:13	5504:13	13	else
LEAF_NODE	5504:13	5504:13	14	else
STATEMENTS	5505:15	5505:15	13	
EXPR_STATEMENT	5505:15	5505:44	14	crop -> regionlist [ i ] . y2 = test ;
EXPR	5505:15	5505:15	15	crop -> regionlist [ i ] . y2 = test
ASSIGN	5505:15	5505:40	16	crop -> regionlist [ i ] . y2 = test
LVAL	5505:15	5505:15	17	crop -> regionlist [ i ] . y2
FIELD	5505:15	5505:35	18	crop -> regionlist [ i ] . y2
LEAF_NODE	5505:15	5505:15	19	crop
LEAF_NODE	5505:19	5505:19	19	->
LEAF_NODE	5505:21	5505:21	19	regionlist
LEAF_NODE	5505:31	5505:31	19	[
EXPR	5505:32	5505:32	19	i
FIELD	5505:32	5505:32	20	i
LEAF_NODE	5505:32	5505:32	21	i
LEAF_NODE	5505:33	5505:33	19	]
LEAF_NODE	5505:34	5505:34	19	.
LEAF_NODE	5505:35	5505:35	19	y2
ASSIGN_OP	5505:38	5505:38	17	=
LEAF_NODE	5505:38	5505:38	18	=
RVAL	5505:40	5505:40	17	test
FIELD	5505:40	5505:40	18	test
LEAF_NODE	5505:40	5505:40	19	test
LEAF_NODE	5505:44	5505:44	15	;
LEAF_NODE	5506:6	5506:6	11	}
EXPR_STATEMENT	5507:11	5507:72	9	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1 ;
EXPR	5507:11	5507:11	10	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
ASSIGN	5507:11	5507:21	11	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
LVAL	5507:11	5507:11	12	zlength
FIELD	5507:11	5507:11	13	zlength
LEAF_NODE	5507:11	5507:11	14	zlength
ASSIGN_OP	5507:19	5507:19	12	=
LEAF_NODE	5507:19	5507:19	13	=
RVAL	5507:21	5507:71	12	crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
FIELD	5507:21	5507:41	13	crop -> regionlist [ i ] . y2
LEAF_NODE	5507:21	5507:21	14	crop
LEAF_NODE	5507:25	5507:25	14	->
LEAF_NODE	5507:27	5507:27	14	regionlist
LEAF_NODE	5507:37	5507:37	14	[
EXPR	5507:38	5507:38	14	i
FIELD	5507:38	5507:38	15	i
LEAF_NODE	5507:38	5507:38	16	i
LEAF_NODE	5507:39	5507:39	14	]
LEAF_NODE	5507:40	5507:40	14	.
LEAF_NODE	5507:41	5507:41	14	y2
LEAF_NODE	5507:44	5507:44	13	-
FIELD	5507:46	5507:66	13	crop -> regionlist [ i ] . y1
LEAF_NODE	5507:46	5507:46	14	crop
LEAF_NODE	5507:50	5507:50	14	->
LEAF_NODE	5507:52	5507:52	14	regionlist
LEAF_NODE	5507:62	5507:62	14	[
EXPR	5507:63	5507:63	14	i
FIELD	5507:63	5507:63	15	i
LEAF_NODE	5507:63	5507:63	16	i
LEAF_NODE	5507:64	5507:64	14	]
LEAF_NODE	5507:65	5507:65	14	.
LEAF_NODE	5507:66	5507:66	14	y1
LEAF_NODE	5507:69	5507:69	13	+
FIELD	5507:71	5507:71	13	1
LEAF_NODE	5507:71	5507:71	14	1
LEAF_NODE	5507:72	5507:72	10	;
SELECTION	5510:11	5511:13	9	
KEYWORD	5510:11	5510:11	10	if
LEAF_NODE	5510:11	5510:11	11	if
LEAF_NODE	5510:14	5510:14	10	(
CONDITION	5510:15	5510:15	10	crop -> exp_mode == COMPOSITE_IMAGES
EXPR	5510:15	5510:33	11	crop -> exp_mode == COMPOSITE_IMAGES
FIELD	5510:15	5510:21	12	crop -> exp_mode
LEAF_NODE	5510:15	5510:15	13	crop
LEAF_NODE	5510:19	5510:19	13	->
LEAF_NODE	5510:21	5510:21	13	exp_mode
EQ_OPERATOR	5510:30	5510:30	12	==
LEAF_NODE	5510:30	5510:30	13	==
FIELD	5510:33	5510:33	12	COMPOSITE_IMAGES
LEAF_NODE	5510:33	5510:33	13	COMPOSITE_IMAGES
LEAF_NODE	5510:49	5510:49	10	)
STATEMENTS	5511:13	5511:13	10	
EXPR_STATEMENT	5511:13	5511:53	11	crop -> combined_length += ( uint32 ) zlength ;
EXPR	5511:13	5511:13	12	crop -> combined_length += ( uint32 ) zlength
ASSIGN	5511:13	5511:38	13	crop -> combined_length += ( uint32 ) zlength
LVAL	5511:13	5511:13	14	crop -> combined_length
FIELD	5511:13	5511:19	15	crop -> combined_length
LEAF_NODE	5511:13	5511:13	16	crop
LEAF_NODE	5511:17	5511:17	16	->
LEAF_NODE	5511:19	5511:19	16	combined_length
ASSIGN_OP	5511:35	5511:35	14	+=
LEAF_NODE	5511:35	5511:35	15	+=
RVAL	5511:38	5511:46	14	( uint32 ) zlength
LEAF_NODE	5511:38	5511:38	15	(
TYPE_NAME	5511:39	5511:39	15	uint32
LEAF_NODE	5511:39	5511:39	16	uint32
LEAF_NODE	5511:45	5511:45	15	)
FIELD	5511:46	5511:46	15	zlength
LEAF_NODE	5511:46	5511:46	16	zlength
LEAF_NODE	5511:53	5511:53	12	;
SELECTION	5512:11	5513:13	9	
KEYWORD	5512:11	5512:11	10	else
LEAF_NODE	5512:11	5512:11	11	else
STATEMENTS	5513:13	5513:13	10	
EXPR_STATEMENT	5513:13	5513:52	11	crop -> combined_length = ( uint32 ) zlength ;
EXPR	5513:13	5513:13	12	crop -> combined_length = ( uint32 ) zlength
ASSIGN	5513:13	5513:37	13	crop -> combined_length = ( uint32 ) zlength
LVAL	5513:13	5513:13	14	crop -> combined_length
FIELD	5513:13	5513:19	15	crop -> combined_length
LEAF_NODE	5513:13	5513:13	16	crop
LEAF_NODE	5513:17	5513:17	16	->
LEAF_NODE	5513:19	5513:19	16	combined_length
ASSIGN_OP	5513:35	5513:35	14	=
LEAF_NODE	5513:35	5513:35	15	=
RVAL	5513:37	5513:45	14	( uint32 ) zlength
LEAF_NODE	5513:37	5513:37	15	(
TYPE_NAME	5513:38	5513:38	15	uint32
LEAF_NODE	5513:38	5513:38	16	uint32
LEAF_NODE	5513:44	5513:44	15	)
FIELD	5513:45	5513:45	15	zlength
LEAF_NODE	5513:45	5513:45	16	zlength
LEAF_NODE	5513:52	5513:52	12	;
EXPR_STATEMENT	5514:11	5514:48	9	crop -> combined_width = ( uint32 ) zwidth ;
EXPR	5514:11	5514:11	10	crop -> combined_width = ( uint32 ) zwidth
ASSIGN	5514:11	5514:34	11	crop -> combined_width = ( uint32 ) zwidth
LVAL	5514:11	5514:11	12	crop -> combined_width
FIELD	5514:11	5514:17	13	crop -> combined_width
LEAF_NODE	5514:11	5514:11	14	crop
LEAF_NODE	5514:15	5514:15	14	->
LEAF_NODE	5514:17	5514:17	14	combined_width
ASSIGN_OP	5514:32	5514:32	12	=
LEAF_NODE	5514:32	5514:32	13	=
RVAL	5514:34	5514:42	12	( uint32 ) zwidth
LEAF_NODE	5514:34	5514:34	13	(
TYPE_NAME	5514:35	5514:35	13	uint32
LEAF_NODE	5514:35	5514:35	14	uint32
LEAF_NODE	5514:41	5514:41	13	)
FIELD	5514:42	5514:42	13	zwidth
LEAF_NODE	5514:42	5514:42	14	zwidth
LEAF_NODE	5514:48	5514:48	10	;
JUMP_STATEMENT	5515:11	5515:16	9	break DESTINATION ;
KEYWORD	5515:11	5515:11	10	break
LEAF_NODE	5515:11	5515:11	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	5515:16	5515:16	10	;
LABEL	5516:6	5516:21	9	case EDGE_RIGHT :
LEAF_NODE	5516:6	5516:6	10	case
LEAF_NODE	5516:11	5516:11	10	EDGE_RIGHT
LEAF_NODE	5516:21	5516:21	10	:
EXPR_STATEMENT	5517:11	5517:40	9	zlength = offsets . crop_length ;
EXPR	5517:11	5517:11	10	zlength = offsets . crop_length
ASSIGN	5517:11	5517:21	11	zlength = offsets . crop_length
LVAL	5517:11	5517:11	12	zlength
FIELD	5517:11	5517:11	13	zlength
LEAF_NODE	5517:11	5517:11	14	zlength
ASSIGN_OP	5517:19	5517:19	12	=
LEAF_NODE	5517:19	5517:19	13	=
RVAL	5517:21	5517:21	12	offsets . crop_length
FIELD	5517:21	5517:29	13	offsets . crop_length
LEAF_NODE	5517:21	5517:21	14	offsets
LEAF_NODE	5517:28	5517:28	14	.
LEAF_NODE	5517:29	5517:29	14	crop_length
LEAF_NODE	5517:40	5517:40	10	;
EXPR_STATEMENT	5518:4	5518:43	9	crop -> regionlist [ i ] . y1 = offsets . starty ;
EXPR	5518:4	5518:4	10	crop -> regionlist [ i ] . y1 = offsets . starty
ASSIGN	5518:4	5518:29	11	crop -> regionlist [ i ] . y1 = offsets . starty
LVAL	5518:4	5518:4	12	crop -> regionlist [ i ] . y1
FIELD	5518:4	5518:24	13	crop -> regionlist [ i ] . y1
LEAF_NODE	5518:4	5518:4	14	crop
LEAF_NODE	5518:8	5518:8	14	->
LEAF_NODE	5518:10	5518:10	14	regionlist
LEAF_NODE	5518:20	5518:20	14	[
EXPR	5518:21	5518:21	14	i
FIELD	5518:21	5518:21	15	i
LEAF_NODE	5518:21	5518:21	16	i
LEAF_NODE	5518:22	5518:22	14	]
LEAF_NODE	5518:23	5518:23	14	.
LEAF_NODE	5518:24	5518:24	14	y1
ASSIGN_OP	5518:27	5518:27	12	=
LEAF_NODE	5518:27	5518:27	13	=
RVAL	5518:29	5518:29	12	offsets . starty
FIELD	5518:29	5518:37	13	offsets . starty
LEAF_NODE	5518:29	5518:29	14	offsets
LEAF_NODE	5518:36	5518:36	14	.
LEAF_NODE	5518:37	5518:37	14	starty
LEAF_NODE	5518:43	5518:43	10	;
EXPR_STATEMENT	5519:11	5519:48	9	crop -> regionlist [ i ] . y2 = offsets . endy ;
EXPR	5519:11	5519:11	10	crop -> regionlist [ i ] . y2 = offsets . endy
ASSIGN	5519:11	5519:36	11	crop -> regionlist [ i ] . y2 = offsets . endy
LVAL	5519:11	5519:11	12	crop -> regionlist [ i ] . y2
FIELD	5519:11	5519:31	13	crop -> regionlist [ i ] . y2
LEAF_NODE	5519:11	5519:11	14	crop
LEAF_NODE	5519:15	5519:15	14	->
LEAF_NODE	5519:17	5519:17	14	regionlist
LEAF_NODE	5519:27	5519:27	14	[
EXPR	5519:28	5519:28	14	i
FIELD	5519:28	5519:28	15	i
LEAF_NODE	5519:28	5519:28	16	i
LEAF_NODE	5519:29	5519:29	14	]
LEAF_NODE	5519:30	5519:30	14	.
LEAF_NODE	5519:31	5519:31	14	y2
ASSIGN_OP	5519:34	5519:34	12	=
LEAF_NODE	5519:34	5519:34	13	=
RVAL	5519:36	5519:36	12	offsets . endy
FIELD	5519:36	5519:44	13	offsets . endy
LEAF_NODE	5519:36	5519:36	14	offsets
LEAF_NODE	5519:43	5519:43	14	.
LEAF_NODE	5519:44	5519:44	14	endy
LEAF_NODE	5519:48	5519:48	10	;
LEAF_NODE	5521:11	5521:11	9	crop
LEAF_NODE	5521:15	5521:15	9	->
LEAF_NODE	5521:17	5521:17	9	regionlist
LEAF_NODE	5521:27	5521:27	9	[
LEAF_NODE	5521:28	5521:28	9	i
LEAF_NODE	5521:29	5521:29	9	]
LEAF_NODE	5521:30	5521:30	9	.
LEAF_NODE	5521:31	5521:31	9	x1
LEAF_NODE	5521:34	5521:34	9	=
LEAF_NODE	5521:36	5521:36	9	offsets
LEAF_NODE	5521:43	5521:43	9	.
LEAF_NODE	5521:44	5521:44	9	startx
LEAF_NODE	5521:51	5521:51	9	+
LEAF_NODE	5522:34	5522:34	9	(
LEAF_NODE	5522:35	5522:35	9	uint32
LEAF_NODE	5522:41	5522:41	9	)
LEAF_NODE	5522:42	5522:42	9	(
LEAF_NODE	5522:43	5522:43	9	offsets
LEAF_NODE	5522:50	5522:50	9	.
LEAF_NODE	5522:51	5522:51	9	crop_width
LEAF_NODE	5522:63	5522:63	9	*
LEAF_NODE	5522:65	5522:65	9	(
LEAF_NODE	5522:66	5522:66	9	total
LEAF_NODE	5522:72	5522:72	9	-
LEAF_NODE	5522:74	5522:74	9	seg
LEAF_NODE	5522:77	5522:77	9	)
LEAF_NODE	5522:79	5522:79	9	*
LEAF_NODE	5522:81	5522:81	9	1.0
LEAF_NODE	5522:85	5522:85	9	/
LEAF_NODE	5522:87	5522:87	9	total
LEAF_NODE	5522:92	5522:92	9	)
LEAF_NODE	5522:93	5522:93	9	;
LEAF_NODE	5523:11	5523:11	9	test
LEAF_NODE	5523:16	5523:16	9	=
LEAF_NODE	5523:18	5523:18	9	offsets
LEAF_NODE	5523:25	5523:25	9	.
LEAF_NODE	5523:26	5523:26	9	startx
LEAF_NODE	5523:33	5523:33	9	+
LEAF_NODE	5524:11	5524:11	9	(
LEAF_NODE	5524:12	5524:12	9	offsets
LEAF_NODE	5524:19	5524:19	9	.
LEAF_NODE	5524:20	5524:20	9	crop_width
LEAF_NODE	5524:31	5524:31	9	*
LEAF_NODE	5524:33	5524:33	9	(
LEAF_NODE	5524:34	5524:34	9	total
LEAF_NODE	5524:40	5524:40	9	-
LEAF_NODE	5524:42	5524:42	9	seg
LEAF_NODE	5524:46	5524:46	9	+
LEAF_NODE	5524:48	5524:48	9	1
LEAF_NODE	5524:49	5524:49	9	)
LEAF_NODE	5524:51	5524:51	9	*
LEAF_NODE	5524:53	5524:53	9	1.0
LEAF_NODE	5524:57	5524:57	9	/
LEAF_NODE	5524:59	5524:59	9	total
LEAF_NODE	5524:64	5524:64	9	)
LEAF_NODE	5524:65	5524:65	9	;
SELECTION	5525:11	5526:13	9	
KEYWORD	5525:11	5525:11	10	if
LEAF_NODE	5525:11	5525:11	11	if
LEAF_NODE	5525:14	5525:14	10	(
CONDITION	5525:15	5525:15	10	test < 1
EXPR	5525:15	5525:22	11	test < 1
FIELD	5525:15	5525:15	12	test
LEAF_NODE	5525:15	5525:15	13	test
REL_OPERATOR	5525:20	5525:20	12	<
LEAF_NODE	5525:20	5525:20	13	<
FIELD	5525:22	5525:22	12	1
LEAF_NODE	5525:22	5525:22	13	1
LEAF_NODE	5525:24	5525:24	10	)
STATEMENTS	5526:13	5526:13	10	
EXPR_STATEMENT	5526:13	5526:39	11	crop -> regionlist [ i ] . x2 = 0 ;
EXPR	5526:13	5526:13	12	crop -> regionlist [ i ] . x2 = 0
ASSIGN	5526:13	5526:38	13	crop -> regionlist [ i ] . x2 = 0
LVAL	5526:13	5526:13	14	crop -> regionlist [ i ] . x2
FIELD	5526:13	5526:33	15	crop -> regionlist [ i ] . x2
LEAF_NODE	5526:13	5526:13	16	crop
LEAF_NODE	5526:17	5526:17	16	->
LEAF_NODE	5526:19	5526:19	16	regionlist
LEAF_NODE	5526:29	5526:29	16	[
EXPR	5526:30	5526:30	16	i
FIELD	5526:30	5526:30	17	i
LEAF_NODE	5526:30	5526:30	18	i
LEAF_NODE	5526:31	5526:31	16	]
LEAF_NODE	5526:32	5526:32	16	.
LEAF_NODE	5526:33	5526:33	16	x2
ASSIGN_OP	5526:36	5526:36	14	=
LEAF_NODE	5526:36	5526:36	15	=
RVAL	5526:38	5526:38	14	0
FIELD	5526:38	5526:38	15	0
LEAF_NODE	5526:38	5526:38	16	0
LEAF_NODE	5526:39	5526:39	12	;
SELECTION	5527:11	5528:6	9	
KEYWORD	5527:11	5527:11	10	else
LEAF_NODE	5527:11	5527:11	11	else
STATEMENTS	5528:6	5533:13	10	
LEAF_NODE	5528:6	5528:6	11	{
STATEMENTS	5529:6	5531:13	11	
SELECTION	5529:6	5530:15	12	
KEYWORD	5529:6	5529:6	13	if
LEAF_NODE	5529:6	5529:6	14	if
LEAF_NODE	5529:9	5529:9	13	(
CONDITION	5529:10	5529:10	13	test > ( int32 ) ( image -> width - 1 )
EXPR	5529:10	5529:41	14	test > ( int32 ) ( image -> width - 1 )
FIELD	5529:10	5529:10	15	test
LEAF_NODE	5529:10	5529:10	16	test
REL_OPERATOR	5529:15	5529:15	15	>
LEAF_NODE	5529:15	5529:15	16	>
LEAF_NODE	5529:17	5529:17	15	(
TYPE_NAME	5529:18	5529:18	15	int32
LEAF_NODE	5529:18	5529:18	16	int32
LEAF_NODE	5529:23	5529:23	15	)
LEAF_NODE	5529:24	5529:24	15	(
FIELD	5529:25	5529:32	15	image -> width
LEAF_NODE	5529:25	5529:25	16	image
LEAF_NODE	5529:30	5529:30	16	->
LEAF_NODE	5529:32	5529:32	16	width
LEAF_NODE	5529:38	5529:38	15	-
FIELD	5529:40	5529:40	15	1
LEAF_NODE	5529:40	5529:40	16	1
LEAF_NODE	5529:41	5529:41	15	)
LEAF_NODE	5529:42	5529:42	13	)
STATEMENTS	5530:15	5530:15	13	
EXPR_STATEMENT	5530:15	5530:56	14	crop -> regionlist [ i ] . x2 = image -> width - 1 ;
EXPR	5530:15	5530:15	15	crop -> regionlist [ i ] . x2 = image -> width - 1
ASSIGN	5530:15	5530:40	16	crop -> regionlist [ i ] . x2 = image -> width - 1
LVAL	5530:15	5530:15	17	crop -> regionlist [ i ] . x2
FIELD	5530:15	5530:35	18	crop -> regionlist [ i ] . x2
LEAF_NODE	5530:15	5530:15	19	crop
LEAF_NODE	5530:19	5530:19	19	->
LEAF_NODE	5530:21	5530:21	19	regionlist
LEAF_NODE	5530:31	5530:31	19	[
EXPR	5530:32	5530:32	19	i
FIELD	5530:32	5530:32	20	i
LEAF_NODE	5530:32	5530:32	21	i
LEAF_NODE	5530:33	5530:33	19	]
LEAF_NODE	5530:34	5530:34	19	.
LEAF_NODE	5530:35	5530:35	19	x2
ASSIGN_OP	5530:38	5530:38	17	=
LEAF_NODE	5530:38	5530:38	18	=
RVAL	5530:40	5530:55	17	image -> width - 1
FIELD	5530:40	5530:47	18	image -> width
LEAF_NODE	5530:40	5530:40	19	image
LEAF_NODE	5530:45	5530:45	19	->
LEAF_NODE	5530:47	5530:47	19	width
LEAF_NODE	5530:53	5530:53	18	-
FIELD	5530:55	5530:55	18	1
LEAF_NODE	5530:55	5530:55	19	1
LEAF_NODE	5530:56	5530:56	15	;
SELECTION	5531:13	5532:15	12	
KEYWORD	5531:13	5531:13	13	else
LEAF_NODE	5531:13	5531:13	14	else
STATEMENTS	5532:15	5532:15	13	
EXPR_STATEMENT	5532:15	5532:48	14	crop -> regionlist [ i ] . x2 = test - 1 ;
EXPR	5532:15	5532:15	15	crop -> regionlist [ i ] . x2 = test - 1
ASSIGN	5532:15	5532:40	16	crop -> regionlist [ i ] . x2 = test - 1
LVAL	5532:15	5532:15	17	crop -> regionlist [ i ] . x2
FIELD	5532:15	5532:35	18	crop -> regionlist [ i ] . x2
LEAF_NODE	5532:15	5532:15	19	crop
LEAF_NODE	5532:19	5532:19	19	->
LEAF_NODE	5532:21	5532:21	19	regionlist
LEAF_NODE	5532:31	5532:31	19	[
EXPR	5532:32	5532:32	19	i
FIELD	5532:32	5532:32	20	i
LEAF_NODE	5532:32	5532:32	21	i
LEAF_NODE	5532:33	5532:33	19	]
LEAF_NODE	5532:34	5532:34	19	.
LEAF_NODE	5532:35	5532:35	19	x2
ASSIGN_OP	5532:38	5532:38	17	=
LEAF_NODE	5532:38	5532:38	18	=
RVAL	5532:40	5532:47	17	test - 1
FIELD	5532:40	5532:40	18	test
LEAF_NODE	5532:40	5532:40	19	test
LEAF_NODE	5532:45	5532:45	18	-
FIELD	5532:47	5532:47	18	1
LEAF_NODE	5532:47	5532:47	19	1
LEAF_NODE	5532:48	5532:48	15	;
LEAF_NODE	5533:13	5533:13	11	}
EXPR_STATEMENT	5534:11	5534:72	9	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1 ;
EXPR	5534:11	5534:11	10	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
ASSIGN	5534:11	5534:20	11	zwidth = crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
LVAL	5534:11	5534:11	12	zwidth
FIELD	5534:11	5534:11	13	zwidth
LEAF_NODE	5534:11	5534:11	14	zwidth
ASSIGN_OP	5534:18	5534:18	12	=
LEAF_NODE	5534:18	5534:18	13	=
RVAL	5534:20	5534:71	12	crop -> regionlist [ i ] . x2 - crop -> regionlist [ i ] . x1 + 1
FIELD	5534:20	5534:40	13	crop -> regionlist [ i ] . x2
LEAF_NODE	5534:20	5534:20	14	crop
LEAF_NODE	5534:24	5534:24	14	->
LEAF_NODE	5534:26	5534:26	14	regionlist
LEAF_NODE	5534:36	5534:36	14	[
EXPR	5534:37	5534:37	14	i
FIELD	5534:37	5534:37	15	i
LEAF_NODE	5534:37	5534:37	16	i
LEAF_NODE	5534:38	5534:38	14	]
LEAF_NODE	5534:39	5534:39	14	.
LEAF_NODE	5534:40	5534:40	14	x2
LEAF_NODE	5534:43	5534:43	13	-
FIELD	5534:45	5534:65	13	crop -> regionlist [ i ] . x1
LEAF_NODE	5534:45	5534:45	14	crop
LEAF_NODE	5534:49	5534:49	14	->
LEAF_NODE	5534:51	5534:51	14	regionlist
LEAF_NODE	5534:61	5534:61	14	[
EXPR	5534:62	5534:62	14	i
FIELD	5534:62	5534:62	15	i
LEAF_NODE	5534:62	5534:62	16	i
LEAF_NODE	5534:63	5534:63	14	]
LEAF_NODE	5534:64	5534:64	14	.
LEAF_NODE	5534:65	5534:65	14	x1
LEAF_NODE	5534:69	5534:69	13	+
FIELD	5534:71	5534:71	13	1
LEAF_NODE	5534:71	5534:71	14	1
LEAF_NODE	5534:72	5534:72	10	;
EXPR_STATEMENT	5537:11	5537:50	9	crop -> combined_length = ( uint32 ) zlength ;
EXPR	5537:11	5537:11	10	crop -> combined_length = ( uint32 ) zlength
ASSIGN	5537:11	5537:35	11	crop -> combined_length = ( uint32 ) zlength
LVAL	5537:11	5537:11	12	crop -> combined_length
FIELD	5537:11	5537:17	13	crop -> combined_length
LEAF_NODE	5537:11	5537:11	14	crop
LEAF_NODE	5537:15	5537:15	14	->
LEAF_NODE	5537:17	5537:17	14	combined_length
ASSIGN_OP	5537:33	5537:33	12	=
LEAF_NODE	5537:33	5537:33	13	=
RVAL	5537:35	5537:43	12	( uint32 ) zlength
LEAF_NODE	5537:35	5537:35	13	(
TYPE_NAME	5537:36	5537:36	13	uint32
LEAF_NODE	5537:36	5537:36	14	uint32
LEAF_NODE	5537:42	5537:42	13	)
FIELD	5537:43	5537:43	13	zlength
LEAF_NODE	5537:43	5537:43	14	zlength
LEAF_NODE	5537:50	5537:50	10	;
SELECTION	5538:11	5539:13	9	
KEYWORD	5538:11	5538:11	10	if
LEAF_NODE	5538:11	5538:11	11	if
LEAF_NODE	5538:14	5538:14	10	(
CONDITION	5538:15	5538:15	10	crop -> exp_mode == COMPOSITE_IMAGES
EXPR	5538:15	5538:33	11	crop -> exp_mode == COMPOSITE_IMAGES
FIELD	5538:15	5538:21	12	crop -> exp_mode
LEAF_NODE	5538:15	5538:15	13	crop
LEAF_NODE	5538:19	5538:19	13	->
LEAF_NODE	5538:21	5538:21	13	exp_mode
EQ_OPERATOR	5538:30	5538:30	12	==
LEAF_NODE	5538:30	5538:30	13	==
FIELD	5538:33	5538:33	12	COMPOSITE_IMAGES
LEAF_NODE	5538:33	5538:33	13	COMPOSITE_IMAGES
LEAF_NODE	5538:49	5538:49	10	)
STATEMENTS	5539:13	5539:13	10	
EXPR_STATEMENT	5539:13	5539:51	11	crop -> combined_width += ( uint32 ) zwidth ;
EXPR	5539:13	5539:13	12	crop -> combined_width += ( uint32 ) zwidth
ASSIGN	5539:13	5539:37	13	crop -> combined_width += ( uint32 ) zwidth
LVAL	5539:13	5539:13	14	crop -> combined_width
FIELD	5539:13	5539:19	15	crop -> combined_width
LEAF_NODE	5539:13	5539:13	16	crop
LEAF_NODE	5539:17	5539:17	16	->
LEAF_NODE	5539:19	5539:19	16	combined_width
ASSIGN_OP	5539:34	5539:34	14	+=
LEAF_NODE	5539:34	5539:34	15	+=
RVAL	5539:37	5539:45	14	( uint32 ) zwidth
LEAF_NODE	5539:37	5539:37	15	(
TYPE_NAME	5539:38	5539:38	15	uint32
LEAF_NODE	5539:38	5539:38	16	uint32
LEAF_NODE	5539:44	5539:44	15	)
FIELD	5539:45	5539:45	15	zwidth
LEAF_NODE	5539:45	5539:45	16	zwidth
LEAF_NODE	5539:51	5539:51	12	;
SELECTION	5540:11	5541:13	9	
KEYWORD	5540:11	5540:11	10	else
LEAF_NODE	5540:11	5540:11	11	else
STATEMENTS	5541:13	5541:13	10	
EXPR_STATEMENT	5541:13	5541:50	11	crop -> combined_width = ( uint32 ) zwidth ;
EXPR	5541:13	5541:13	12	crop -> combined_width = ( uint32 ) zwidth
ASSIGN	5541:13	5541:36	13	crop -> combined_width = ( uint32 ) zwidth
LVAL	5541:13	5541:13	14	crop -> combined_width
FIELD	5541:13	5541:19	15	crop -> combined_width
LEAF_NODE	5541:13	5541:13	16	crop
LEAF_NODE	5541:17	5541:17	16	->
LEAF_NODE	5541:19	5541:19	16	combined_width
ASSIGN_OP	5541:34	5541:34	14	=
LEAF_NODE	5541:34	5541:34	15	=
RVAL	5541:36	5541:44	14	( uint32 ) zwidth
LEAF_NODE	5541:36	5541:36	15	(
TYPE_NAME	5541:37	5541:37	15	uint32
LEAF_NODE	5541:37	5541:37	16	uint32
LEAF_NODE	5541:43	5541:43	15	)
FIELD	5541:44	5541:44	15	zwidth
LEAF_NODE	5541:44	5541:44	16	zwidth
LEAF_NODE	5541:50	5541:50	12	;
JUMP_STATEMENT	5542:11	5542:16	9	break DESTINATION ;
KEYWORD	5542:11	5542:11	10	break
LEAF_NODE	5542:11	5542:11	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	5542:16	5542:16	10	;
LABEL	5543:6	5543:19	9	case EDGE_TOP :
LEAF_NODE	5543:6	5543:6	10	case
LEAF_NODE	5543:11	5543:11	10	EDGE_TOP
LEAF_NODE	5543:19	5543:19	10	:
LABEL	5544:6	5544:13	9	default :
LEAF_NODE	5544:6	5544:6	10	default
LEAF_NODE	5544:13	5544:13	10	:
EXPR_STATEMENT	5545:11	5545:38	9	zwidth = offsets . crop_width ;
EXPR	5545:11	5545:11	10	zwidth = offsets . crop_width
ASSIGN	5545:11	5545:20	11	zwidth = offsets . crop_width
LVAL	5545:11	5545:11	12	zwidth
FIELD	5545:11	5545:11	13	zwidth
LEAF_NODE	5545:11	5545:11	14	zwidth
ASSIGN_OP	5545:18	5545:18	12	=
LEAF_NODE	5545:18	5545:18	13	=
RVAL	5545:20	5545:20	12	offsets . crop_width
FIELD	5545:20	5545:28	13	offsets . crop_width
LEAF_NODE	5545:20	5545:20	14	offsets
LEAF_NODE	5545:27	5545:27	14	.
LEAF_NODE	5545:28	5545:28	14	crop_width
LEAF_NODE	5545:38	5545:38	10	;
EXPR_STATEMENT	5546:4	5546:43	9	crop -> regionlist [ i ] . x1 = offsets . startx ;
EXPR	5546:4	5546:4	10	crop -> regionlist [ i ] . x1 = offsets . startx
ASSIGN	5546:4	5546:29	11	crop -> regionlist [ i ] . x1 = offsets . startx
LVAL	5546:4	5546:4	12	crop -> regionlist [ i ] . x1
FIELD	5546:4	5546:24	13	crop -> regionlist [ i ] . x1
LEAF_NODE	5546:4	5546:4	14	crop
LEAF_NODE	5546:8	5546:8	14	->
LEAF_NODE	5546:10	5546:10	14	regionlist
LEAF_NODE	5546:20	5546:20	14	[
EXPR	5546:21	5546:21	14	i
FIELD	5546:21	5546:21	15	i
LEAF_NODE	5546:21	5546:21	16	i
LEAF_NODE	5546:22	5546:22	14	]
LEAF_NODE	5546:23	5546:23	14	.
LEAF_NODE	5546:24	5546:24	14	x1
ASSIGN_OP	5546:27	5546:27	12	=
LEAF_NODE	5546:27	5546:27	13	=
RVAL	5546:29	5546:29	12	offsets . startx
FIELD	5546:29	5546:37	13	offsets . startx
LEAF_NODE	5546:29	5546:29	14	offsets
LEAF_NODE	5546:36	5546:36	14	.
LEAF_NODE	5546:37	5546:37	14	startx
LEAF_NODE	5546:43	5546:43	10	;
EXPR_STATEMENT	5547:11	5547:48	9	crop -> regionlist [ i ] . x2 = offsets . endx ;
EXPR	5547:11	5547:11	10	crop -> regionlist [ i ] . x2 = offsets . endx
ASSIGN	5547:11	5547:36	11	crop -> regionlist [ i ] . x2 = offsets . endx
LVAL	5547:11	5547:11	12	crop -> regionlist [ i ] . x2
FIELD	5547:11	5547:31	13	crop -> regionlist [ i ] . x2
LEAF_NODE	5547:11	5547:11	14	crop
LEAF_NODE	5547:15	5547:15	14	->
LEAF_NODE	5547:17	5547:17	14	regionlist
LEAF_NODE	5547:27	5547:27	14	[
EXPR	5547:28	5547:28	14	i
FIELD	5547:28	5547:28	15	i
LEAF_NODE	5547:28	5547:28	16	i
LEAF_NODE	5547:29	5547:29	14	]
LEAF_NODE	5547:30	5547:30	14	.
LEAF_NODE	5547:31	5547:31	14	x2
ASSIGN_OP	5547:34	5547:34	12	=
LEAF_NODE	5547:34	5547:34	13	=
RVAL	5547:36	5547:36	12	offsets . endx
FIELD	5547:36	5547:44	13	offsets . endx
LEAF_NODE	5547:36	5547:36	14	offsets
LEAF_NODE	5547:43	5547:43	14	.
LEAF_NODE	5547:44	5547:44	14	endx
LEAF_NODE	5547:48	5547:48	10	;
LEAF_NODE	5549:11	5549:11	9	crop
LEAF_NODE	5549:15	5549:15	9	->
LEAF_NODE	5549:17	5549:17	9	regionlist
LEAF_NODE	5549:27	5549:27	9	[
LEAF_NODE	5549:28	5549:28	9	i
LEAF_NODE	5549:29	5549:29	9	]
LEAF_NODE	5549:30	5549:30	9	.
LEAF_NODE	5549:31	5549:31	9	y1
LEAF_NODE	5549:34	5549:34	9	=
LEAF_NODE	5549:36	5549:36	9	offsets
LEAF_NODE	5549:43	5549:43	9	.
LEAF_NODE	5549:44	5549:44	9	starty
LEAF_NODE	5549:51	5549:51	9	+
LEAF_NODE	5549:53	5549:53	9	(
LEAF_NODE	5549:54	5549:54	9	uint32
LEAF_NODE	5549:60	5549:60	9	)
LEAF_NODE	5549:61	5549:61	9	(
LEAF_NODE	5549:62	5549:62	9	offsets
LEAF_NODE	5549:69	5549:69	9	.
LEAF_NODE	5549:70	5549:70	9	crop_length
LEAF_NODE	5549:82	5549:82	9	*
LEAF_NODE	5549:84	5549:84	9	1.0
LEAF_NODE	5549:88	5549:88	9	*
LEAF_NODE	5549:90	5549:90	9	(
LEAF_NODE	5549:91	5549:91	9	seg
LEAF_NODE	5549:95	5549:95	9	-
LEAF_NODE	5549:97	5549:97	9	1
LEAF_NODE	5549:98	5549:98	9	)
LEAF_NODE	5549:100	5549:100	9	/
LEAF_NODE	5549:102	5549:102	9	total
LEAF_NODE	5549:107	5549:107	9	)
LEAF_NODE	5549:108	5549:108	9	;
LEAF_NODE	5550:11	5550:11	9	test
LEAF_NODE	5550:16	5550:16	9	=
LEAF_NODE	5550:18	5550:18	9	offsets
LEAF_NODE	5550:25	5550:25	9	.
LEAF_NODE	5550:26	5550:26	9	starty
LEAF_NODE	5550:33	5550:33	9	+
LEAF_NODE	5550:35	5550:35	9	(
LEAF_NODE	5550:36	5550:36	9	uint32
LEAF_NODE	5550:42	5550:42	9	)
LEAF_NODE	5550:43	5550:43	9	(
LEAF_NODE	5550:44	5550:44	9	offsets
LEAF_NODE	5550:51	5550:51	9	.
LEAF_NODE	5550:52	5550:52	9	crop_length
LEAF_NODE	5550:64	5550:64	9	*
LEAF_NODE	5550:66	5550:66	9	1.0
LEAF_NODE	5550:70	5550:70	9	*
LEAF_NODE	5550:72	5550:72	9	seg
LEAF_NODE	5550:76	5550:76	9	/
LEAF_NODE	5550:78	5550:78	9	total
LEAF_NODE	5550:83	5550:83	9	)
LEAF_NODE	5550:84	5550:84	9	;
SELECTION	5551:11	5552:13	9	
KEYWORD	5551:11	5551:11	10	if
LEAF_NODE	5551:11	5551:11	11	if
LEAF_NODE	5551:14	5551:14	10	(
CONDITION	5551:15	5551:15	10	test < 1
EXPR	5551:15	5551:22	11	test < 1
FIELD	5551:15	5551:15	12	test
LEAF_NODE	5551:15	5551:15	13	test
REL_OPERATOR	5551:20	5551:20	12	<
LEAF_NODE	5551:20	5551:20	13	<
FIELD	5551:22	5551:22	12	1
LEAF_NODE	5551:22	5551:22	13	1
LEAF_NODE	5551:24	5551:24	10	)
STATEMENTS	5552:13	5552:13	10	
EXPR_STATEMENT	5552:13	5552:39	11	crop -> regionlist [ i ] . y2 = 0 ;
EXPR	5552:13	5552:13	12	crop -> regionlist [ i ] . y2 = 0
ASSIGN	5552:13	5552:38	13	crop -> regionlist [ i ] . y2 = 0
LVAL	5552:13	5552:13	14	crop -> regionlist [ i ] . y2
FIELD	5552:13	5552:33	15	crop -> regionlist [ i ] . y2
LEAF_NODE	5552:13	5552:13	16	crop
LEAF_NODE	5552:17	5552:17	16	->
LEAF_NODE	5552:19	5552:19	16	regionlist
LEAF_NODE	5552:29	5552:29	16	[
EXPR	5552:30	5552:30	16	i
FIELD	5552:30	5552:30	17	i
LEAF_NODE	5552:30	5552:30	18	i
LEAF_NODE	5552:31	5552:31	16	]
LEAF_NODE	5552:32	5552:32	16	.
LEAF_NODE	5552:33	5552:33	16	y2
ASSIGN_OP	5552:36	5552:36	14	=
LEAF_NODE	5552:36	5552:36	15	=
RVAL	5552:38	5552:38	14	0
FIELD	5552:38	5552:38	15	0
LEAF_NODE	5552:38	5552:38	16	0
LEAF_NODE	5552:39	5552:39	12	;
SELECTION	5553:11	5554:6	9	
KEYWORD	5553:11	5553:11	10	else
LEAF_NODE	5553:11	5553:11	11	else
STATEMENTS	5554:6	5559:6	10	
LEAF_NODE	5554:6	5554:6	11	{
STATEMENTS	5555:6	5557:13	11	
SELECTION	5555:6	5556:8	12	
KEYWORD	5555:6	5555:6	13	if
LEAF_NODE	5555:6	5555:6	14	if
LEAF_NODE	5555:9	5555:9	13	(
CONDITION	5555:10	5555:10	13	test > ( int32 ) ( image -> length - 1 )
EXPR	5555:10	5555:42	14	test > ( int32 ) ( image -> length - 1 )
FIELD	5555:10	5555:10	15	test
LEAF_NODE	5555:10	5555:10	16	test
REL_OPERATOR	5555:15	5555:15	15	>
LEAF_NODE	5555:15	5555:15	16	>
LEAF_NODE	5555:17	5555:17	15	(
TYPE_NAME	5555:18	5555:18	15	int32
LEAF_NODE	5555:18	5555:18	16	int32
LEAF_NODE	5555:23	5555:23	15	)
LEAF_NODE	5555:24	5555:24	15	(
FIELD	5555:25	5555:32	15	image -> length
LEAF_NODE	5555:25	5555:25	16	image
LEAF_NODE	5555:30	5555:30	16	->
LEAF_NODE	5555:32	5555:32	16	length
LEAF_NODE	5555:39	5555:39	15	-
FIELD	5555:41	5555:41	15	1
LEAF_NODE	5555:41	5555:41	16	1
LEAF_NODE	5555:42	5555:42	15	)
LEAF_NODE	5555:43	5555:43	13	)
STATEMENTS	5556:8	5556:8	13	
EXPR_STATEMENT	5556:8	5556:50	14	crop -> regionlist [ i ] . y2 = image -> length - 1 ;
EXPR	5556:8	5556:8	15	crop -> regionlist [ i ] . y2 = image -> length - 1
ASSIGN	5556:8	5556:33	16	crop -> regionlist [ i ] . y2 = image -> length - 1
LVAL	5556:8	5556:8	17	crop -> regionlist [ i ] . y2
FIELD	5556:8	5556:28	18	crop -> regionlist [ i ] . y2
LEAF_NODE	5556:8	5556:8	19	crop
LEAF_NODE	5556:12	5556:12	19	->
LEAF_NODE	5556:14	5556:14	19	regionlist
LEAF_NODE	5556:24	5556:24	19	[
EXPR	5556:25	5556:25	19	i
FIELD	5556:25	5556:25	20	i
LEAF_NODE	5556:25	5556:25	21	i
LEAF_NODE	5556:26	5556:26	19	]
LEAF_NODE	5556:27	5556:27	19	.
LEAF_NODE	5556:28	5556:28	19	y2
ASSIGN_OP	5556:31	5556:31	17	=
LEAF_NODE	5556:31	5556:31	18	=
RVAL	5556:33	5556:49	17	image -> length - 1
FIELD	5556:33	5556:40	18	image -> length
LEAF_NODE	5556:33	5556:33	19	image
LEAF_NODE	5556:38	5556:38	19	->
LEAF_NODE	5556:40	5556:40	19	length
LEAF_NODE	5556:47	5556:47	18	-
FIELD	5556:49	5556:49	18	1
LEAF_NODE	5556:49	5556:49	19	1
LEAF_NODE	5556:50	5556:50	15	;
SELECTION	5557:13	5558:8	12	
KEYWORD	5557:13	5557:13	13	else
LEAF_NODE	5557:13	5557:13	14	else
STATEMENTS	5558:8	5558:8	13	
EXPR_STATEMENT	5558:8	5558:41	14	crop -> regionlist [ i ] . y2 = test - 1 ;
EXPR	5558:8	5558:8	15	crop -> regionlist [ i ] . y2 = test - 1
ASSIGN	5558:8	5558:33	16	crop -> regionlist [ i ] . y2 = test - 1
LVAL	5558:8	5558:8	17	crop -> regionlist [ i ] . y2
FIELD	5558:8	5558:28	18	crop -> regionlist [ i ] . y2
LEAF_NODE	5558:8	5558:8	19	crop
LEAF_NODE	5558:12	5558:12	19	->
LEAF_NODE	5558:14	5558:14	19	regionlist
LEAF_NODE	5558:24	5558:24	19	[
EXPR	5558:25	5558:25	19	i
FIELD	5558:25	5558:25	20	i
LEAF_NODE	5558:25	5558:25	21	i
LEAF_NODE	5558:26	5558:26	19	]
LEAF_NODE	5558:27	5558:27	19	.
LEAF_NODE	5558:28	5558:28	19	y2
ASSIGN_OP	5558:31	5558:31	17	=
LEAF_NODE	5558:31	5558:31	18	=
RVAL	5558:33	5558:40	17	test - 1
FIELD	5558:33	5558:33	18	test
LEAF_NODE	5558:33	5558:33	19	test
LEAF_NODE	5558:38	5558:38	18	-
FIELD	5558:40	5558:40	18	1
LEAF_NODE	5558:40	5558:40	19	1
LEAF_NODE	5558:41	5558:41	15	;
LEAF_NODE	5559:6	5559:6	11	}
EXPR_STATEMENT	5560:11	5560:72	9	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1 ;
EXPR	5560:11	5560:11	10	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
ASSIGN	5560:11	5560:21	11	zlength = crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
LVAL	5560:11	5560:11	12	zlength
FIELD	5560:11	5560:11	13	zlength
LEAF_NODE	5560:11	5560:11	14	zlength
ASSIGN_OP	5560:19	5560:19	12	=
LEAF_NODE	5560:19	5560:19	13	=
RVAL	5560:21	5560:71	12	crop -> regionlist [ i ] . y2 - crop -> regionlist [ i ] . y1 + 1
FIELD	5560:21	5560:41	13	crop -> regionlist [ i ] . y2
LEAF_NODE	5560:21	5560:21	14	crop
LEAF_NODE	5560:25	5560:25	14	->
LEAF_NODE	5560:27	5560:27	14	regionlist
LEAF_NODE	5560:37	5560:37	14	[
EXPR	5560:38	5560:38	14	i
FIELD	5560:38	5560:38	15	i
LEAF_NODE	5560:38	5560:38	16	i
LEAF_NODE	5560:39	5560:39	14	]
LEAF_NODE	5560:40	5560:40	14	.
LEAF_NODE	5560:41	5560:41	14	y2
LEAF_NODE	5560:44	5560:44	13	-
FIELD	5560:46	5560:66	13	crop -> regionlist [ i ] . y1
LEAF_NODE	5560:46	5560:46	14	crop
LEAF_NODE	5560:50	5560:50	14	->
LEAF_NODE	5560:52	5560:52	14	regionlist
LEAF_NODE	5560:62	5560:62	14	[
EXPR	5560:63	5560:63	14	i
FIELD	5560:63	5560:63	15	i
LEAF_NODE	5560:63	5560:63	16	i
LEAF_NODE	5560:64	5560:64	14	]
LEAF_NODE	5560:65	5560:65	14	.
LEAF_NODE	5560:66	5560:66	14	y1
LEAF_NODE	5560:69	5560:69	13	+
FIELD	5560:71	5560:71	13	1
LEAF_NODE	5560:71	5560:71	14	1
LEAF_NODE	5560:72	5560:72	10	;
SELECTION	5563:11	5564:13	9	
KEYWORD	5563:11	5563:11	10	if
LEAF_NODE	5563:11	5563:11	11	if
LEAF_NODE	5563:14	5563:14	10	(
CONDITION	5563:15	5563:15	10	crop -> exp_mode == COMPOSITE_IMAGES
EXPR	5563:15	5563:33	11	crop -> exp_mode == COMPOSITE_IMAGES
FIELD	5563:15	5563:21	12	crop -> exp_mode
LEAF_NODE	5563:15	5563:15	13	crop
LEAF_NODE	5563:19	5563:19	13	->
LEAF_NODE	5563:21	5563:21	13	exp_mode
EQ_OPERATOR	5563:30	5563:30	12	==
LEAF_NODE	5563:30	5563:30	13	==
FIELD	5563:33	5563:33	12	COMPOSITE_IMAGES
LEAF_NODE	5563:33	5563:33	13	COMPOSITE_IMAGES
LEAF_NODE	5563:49	5563:49	10	)
STATEMENTS	5564:13	5564:13	10	
EXPR_STATEMENT	5564:13	5564:53	11	crop -> combined_length += ( uint32 ) zlength ;
EXPR	5564:13	5564:13	12	crop -> combined_length += ( uint32 ) zlength
ASSIGN	5564:13	5564:38	13	crop -> combined_length += ( uint32 ) zlength
LVAL	5564:13	5564:13	14	crop -> combined_length
FIELD	5564:13	5564:19	15	crop -> combined_length
LEAF_NODE	5564:13	5564:13	16	crop
LEAF_NODE	5564:17	5564:17	16	->
LEAF_NODE	5564:19	5564:19	16	combined_length
ASSIGN_OP	5564:35	5564:35	14	+=
LEAF_NODE	5564:35	5564:35	15	+=
RVAL	5564:38	5564:46	14	( uint32 ) zlength
LEAF_NODE	5564:38	5564:38	15	(
TYPE_NAME	5564:39	5564:39	15	uint32
LEAF_NODE	5564:39	5564:39	16	uint32
LEAF_NODE	5564:45	5564:45	15	)
FIELD	5564:46	5564:46	15	zlength
LEAF_NODE	5564:46	5564:46	16	zlength
LEAF_NODE	5564:53	5564:53	12	;
SELECTION	5565:11	5566:13	9	
KEYWORD	5565:11	5565:11	10	else
LEAF_NODE	5565:11	5565:11	11	else
STATEMENTS	5566:13	5566:13	10	
EXPR_STATEMENT	5566:13	5566:52	11	crop -> combined_length = ( uint32 ) zlength ;
EXPR	5566:13	5566:13	12	crop -> combined_length = ( uint32 ) zlength
ASSIGN	5566:13	5566:37	13	crop -> combined_length = ( uint32 ) zlength
LVAL	5566:13	5566:13	14	crop -> combined_length
FIELD	5566:13	5566:19	15	crop -> combined_length
LEAF_NODE	5566:13	5566:13	16	crop
LEAF_NODE	5566:17	5566:17	16	->
LEAF_NODE	5566:19	5566:19	16	combined_length
ASSIGN_OP	5566:35	5566:35	14	=
LEAF_NODE	5566:35	5566:35	15	=
RVAL	5566:37	5566:45	14	( uint32 ) zlength
LEAF_NODE	5566:37	5566:37	15	(
TYPE_NAME	5566:38	5566:38	15	uint32
LEAF_NODE	5566:38	5566:38	16	uint32
LEAF_NODE	5566:44	5566:44	15	)
FIELD	5566:45	5566:45	15	zlength
LEAF_NODE	5566:45	5566:45	16	zlength
LEAF_NODE	5566:52	5566:52	12	;
EXPR_STATEMENT	5567:11	5567:48	9	crop -> combined_width = ( uint32 ) zwidth ;
EXPR	5567:11	5567:11	10	crop -> combined_width = ( uint32 ) zwidth
ASSIGN	5567:11	5567:34	11	crop -> combined_width = ( uint32 ) zwidth
LVAL	5567:11	5567:11	12	crop -> combined_width
FIELD	5567:11	5567:17	13	crop -> combined_width
LEAF_NODE	5567:11	5567:11	14	crop
LEAF_NODE	5567:15	5567:15	14	->
LEAF_NODE	5567:17	5567:17	14	combined_width
ASSIGN_OP	5567:32	5567:32	12	=
LEAF_NODE	5567:32	5567:32	13	=
RVAL	5567:34	5567:42	12	( uint32 ) zwidth
LEAF_NODE	5567:34	5567:34	13	(
TYPE_NAME	5567:35	5567:35	13	uint32
LEAF_NODE	5567:35	5567:35	14	uint32
LEAF_NODE	5567:41	5567:41	13	)
FIELD	5567:42	5567:42	13	zwidth
LEAF_NODE	5567:42	5567:42	14	zwidth
LEAF_NODE	5567:48	5567:48	10	;
JUMP_STATEMENT	5568:11	5568:16	9	break DESTINATION ;
KEYWORD	5568:11	5568:11	10	break
LEAF_NODE	5568:11	5568:11	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	5568:16	5568:16	10	;
LEAF_NODE	5569:6	5569:6	8	}
LEAF_NODE	5571:4	5571:4	6	buffsize
LEAF_NODE	5571:13	5571:13	6	=
LEAF_NODE	5571:15	5571:15	6	(
LEAF_NODE	5571:16	5571:16	6	uint32
LEAF_NODE	5571:22	5571:22	6	)
LEAF_NODE	5572:10	5572:10	6	(
LEAF_NODE	5572:11	5572:11	6	(
LEAF_NODE	5572:12	5572:12	6	(
LEAF_NODE	5572:13	5572:13	6	(
LEAF_NODE	5572:14	5572:14	6	zwidth
LEAF_NODE	5572:21	5572:21	6	*
LEAF_NODE	5572:23	5572:23	6	image
LEAF_NODE	5572:28	5572:28	6	->
LEAF_NODE	5572:30	5572:30	6	bps
LEAF_NODE	5572:34	5572:34	6	*
LEAF_NODE	5572:36	5572:36	6	image
LEAF_NODE	5572:41	5572:41	6	->
LEAF_NODE	5572:43	5572:43	6	spp
LEAF_NODE	5572:46	5572:46	6	)
LEAF_NODE	5572:48	5572:48	6	+
LEAF_NODE	5572:50	5572:50	6	7
LEAF_NODE	5572:52	5572:52	6	)
LEAF_NODE	5572:54	5572:54	6	/
LEAF_NODE	5572:56	5572:56	6	8
LEAF_NODE	5572:57	5572:57	6	)
LEAF_NODE	5572:59	5572:59	6	*
LEAF_NODE	5572:61	5572:61	6	(
LEAF_NODE	5572:62	5572:62	6	zlength
LEAF_NODE	5572:70	5572:70	6	+
LEAF_NODE	5572:72	5572:72	6	1
LEAF_NODE	5572:73	5572:73	6	)
LEAF_NODE	5572:74	5572:74	6	)
LEAF_NODE	5572:75	5572:75	6	;
EXPR_STATEMENT	5573:4	5573:47	6	crop -> regionlist [ i ] . width = ( uint32 ) zwidth ;
EXPR	5573:4	5573:4	7	crop -> regionlist [ i ] . width = ( uint32 ) zwidth
ASSIGN	5573:4	5573:32	8	crop -> regionlist [ i ] . width = ( uint32 ) zwidth
LVAL	5573:4	5573:4	9	crop -> regionlist [ i ] . width
FIELD	5573:4	5573:24	10	crop -> regionlist [ i ] . width
LEAF_NODE	5573:4	5573:4	11	crop
LEAF_NODE	5573:8	5573:8	11	->
LEAF_NODE	5573:10	5573:10	11	regionlist
LEAF_NODE	5573:20	5573:20	11	[
EXPR	5573:21	5573:21	11	i
FIELD	5573:21	5573:21	12	i
LEAF_NODE	5573:21	5573:21	13	i
LEAF_NODE	5573:22	5573:22	11	]
LEAF_NODE	5573:23	5573:23	11	.
LEAF_NODE	5573:24	5573:24	11	width
ASSIGN_OP	5573:30	5573:30	9	=
LEAF_NODE	5573:30	5573:30	10	=
RVAL	5573:32	5573:41	9	( uint32 ) zwidth
LEAF_NODE	5573:32	5573:32	10	(
TYPE_NAME	5573:33	5573:33	10	uint32
LEAF_NODE	5573:33	5573:33	11	uint32
LEAF_NODE	5573:39	5573:39	10	)
FIELD	5573:41	5573:41	10	zwidth
LEAF_NODE	5573:41	5573:41	11	zwidth
LEAF_NODE	5573:47	5573:47	7	;
EXPR_STATEMENT	5574:4	5574:49	6	crop -> regionlist [ i ] . length = ( uint32 ) zlength ;
EXPR	5574:4	5574:4	7	crop -> regionlist [ i ] . length = ( uint32 ) zlength
ASSIGN	5574:4	5574:33	8	crop -> regionlist [ i ] . length = ( uint32 ) zlength
LVAL	5574:4	5574:4	9	crop -> regionlist [ i ] . length
FIELD	5574:4	5574:24	10	crop -> regionlist [ i ] . length
LEAF_NODE	5574:4	5574:4	11	crop
LEAF_NODE	5574:8	5574:8	11	->
LEAF_NODE	5574:10	5574:10	11	regionlist
LEAF_NODE	5574:20	5574:20	11	[
EXPR	5574:21	5574:21	11	i
FIELD	5574:21	5574:21	12	i
LEAF_NODE	5574:21	5574:21	13	i
LEAF_NODE	5574:22	5574:22	11	]
LEAF_NODE	5574:23	5574:23	11	.
LEAF_NODE	5574:24	5574:24	11	length
ASSIGN_OP	5574:31	5574:31	9	=
LEAF_NODE	5574:31	5574:31	10	=
RVAL	5574:33	5574:42	9	( uint32 ) zlength
LEAF_NODE	5574:33	5574:33	10	(
TYPE_NAME	5574:34	5574:34	10	uint32
LEAF_NODE	5574:34	5574:34	11	uint32
LEAF_NODE	5574:40	5574:40	10	)
FIELD	5574:42	5574:42	10	zlength
LEAF_NODE	5574:42	5574:42	11	zlength
LEAF_NODE	5574:49	5574:49	7	;
EXPR_STATEMENT	5575:4	5575:43	6	crop -> regionlist [ i ] . buffsize = buffsize ;
EXPR	5575:4	5575:4	7	crop -> regionlist [ i ] . buffsize = buffsize
ASSIGN	5575:4	5575:35	8	crop -> regionlist [ i ] . buffsize = buffsize
LVAL	5575:4	5575:4	9	crop -> regionlist [ i ] . buffsize
FIELD	5575:4	5575:24	10	crop -> regionlist [ i ] . buffsize
LEAF_NODE	5575:4	5575:4	11	crop
LEAF_NODE	5575:8	5575:8	11	->
LEAF_NODE	5575:10	5575:10	11	regionlist
LEAF_NODE	5575:20	5575:20	11	[
EXPR	5575:21	5575:21	11	i
FIELD	5575:21	5575:21	12	i
LEAF_NODE	5575:21	5575:21	13	i
LEAF_NODE	5575:22	5575:22	11	]
LEAF_NODE	5575:23	5575:23	11	.
LEAF_NODE	5575:24	5575:24	11	buffsize
ASSIGN_OP	5575:33	5575:33	9	=
LEAF_NODE	5575:33	5575:33	10	=
RVAL	5575:35	5575:35	9	buffsize
FIELD	5575:35	5575:35	10	buffsize
LEAF_NODE	5575:35	5575:35	11	buffsize
LEAF_NODE	5575:43	5575:43	7	;
EXPR_STATEMENT	5576:4	5576:31	6	crop -> bufftotal += buffsize ;
EXPR	5576:4	5576:4	7	crop -> bufftotal += buffsize
ASSIGN	5576:4	5576:23	8	crop -> bufftotal += buffsize
LVAL	5576:4	5576:4	9	crop -> bufftotal
FIELD	5576:4	5576:10	10	crop -> bufftotal
LEAF_NODE	5576:4	5576:4	11	crop
LEAF_NODE	5576:8	5576:8	11	->
LEAF_NODE	5576:10	5576:10	11	bufftotal
ASSIGN_OP	5576:20	5576:20	9	+=
LEAF_NODE	5576:20	5576:20	10	+=
RVAL	5576:23	5576:23	9	buffsize
FIELD	5576:23	5576:23	10	buffsize
LEAF_NODE	5576:23	5576:23	11	buffsize
LEAF_NODE	5576:31	5576:31	7	;
SELECTION	5579:2	5580:4	6	
KEYWORD	5579:2	5579:2	7	if
LEAF_NODE	5579:2	5579:2	8	if
LEAF_NODE	5579:5	5579:5	7	(
CONDITION	5579:6	5579:6	7	dump -> outfile != NULL
EXPR	5579:6	5579:23	8	dump -> outfile != NULL
FIELD	5579:6	5579:12	9	dump -> outfile
LEAF_NODE	5579:6	5579:6	10	dump
LEAF_NODE	5579:10	5579:10	10	->
LEAF_NODE	5579:12	5579:12	10	outfile
EQ_OPERATOR	5579:20	5579:20	9	!=
LEAF_NODE	5579:20	5579:20	10	!=
FIELD	5579:23	5579:23	9	NULL
LEAF_NODE	5579:23	5579:23	10	NULL
LEAF_NODE	5579:27	5579:27	7	)
STATEMENTS	5580:4	5580:4	7	
EXPR_STATEMENT	5580:4	5583:67	8	dump_info ( dump -> outfile , dump -> format , "" , "Zone %d, width: %4d, length: %4d, x1: %4d  x2: %4d  y1: %4d  y2: %4d" , i + 1 , ( uint32 ) zwidth , ( uint32 ) zlength , crop -> regionlist [ i ] . x1 , crop -> regionlist [ i ] . x2 , crop -> regionlist [ i ] . y1 , crop -> regionlist [ i ] . y2 ) ;
EXPR	5580:4	5580:4	9	dump_info ( dump -> outfile , dump -> format , "" , "Zone %d, width: %4d, length: %4d, x1: %4d  x2: %4d  y1: %4d  y2: %4d" , i + 1 , ( uint32 ) zwidth , ( uint32 ) zlength , crop -> regionlist [ i ] . x1 , crop -> regionlist [ i ] . x2 , crop -> regionlist [ i ] . y1 , crop -> regionlist [ i ] . y2 )
FUNCTION_CALL	5580:4	5583:66	10	dump_info ( dump -> outfile , dump -> format , "" , "Zone %d, width: %4d, length: %4d, x1: %4d  x2: %4d  y1: %4d  y2: %4d" , i + 1 , ( uint32 ) zwidth , ( uint32 ) zlength , crop -> regionlist [ i ] . x1 , crop -> regionlist [ i ] . x2 , crop -> regionlist [ i ] . y1 , crop -> regionlist [ i ] . y2 )
CALLEE	5580:4	5580:4	11	dump_info
LEAF_NODE	5580:4	5580:4	12	dump_info
LEAF_NODE	5580:14	5580:14	11	(
ARGUMENT	5580:15	5580:15	11	dump -> outfile
FIELD	5580:15	5580:21	12	dump -> outfile
LEAF_NODE	5580:15	5580:15	13	dump
LEAF_NODE	5580:19	5580:19	13	->
LEAF_NODE	5580:21	5580:21	13	outfile
LEAF_NODE	5580:28	5580:28	11	,
ARGUMENT	5580:30	5580:30	11	dump -> format
FIELD	5580:30	5580:36	12	dump -> format
LEAF_NODE	5580:30	5580:30	13	dump
LEAF_NODE	5580:34	5580:34	13	->
LEAF_NODE	5580:36	5580:36	13	format
LEAF_NODE	5580:42	5580:42	11	,
ARGUMENT	5580:44	5580:44	11	""
FIELD	5580:44	5580:44	12	""
LEAF_NODE	5580:44	5580:44	13	""
LEAF_NODE	5580:46	5580:46	11	,
ARGUMENT	5580:49	5580:49	11	"Zone %d, width: %4d, length: %4d, x1: %4d  x2: %4d  y1: %4d  y2: %4d"
FIELD	5580:49	5580:49	12	"Zone %d, width: %4d, length: %4d, x1: %4d  x2: %4d  y1: %4d  y2: %4d"
LEAF_NODE	5580:49	5580:49	13	"Zone %d, width: %4d, length: %4d, x1: %4d  x2: %4d  y1: %4d  y2: %4d"
LEAF_NODE	5580:119	5580:119	11	,
ARGUMENT	5581:20	5581:24	11	i + 1
FIELD	5581:20	5581:20	12	i
LEAF_NODE	5581:20	5581:20	13	i
LEAF_NODE	5581:22	5581:22	12	+
FIELD	5581:24	5581:24	12	1
LEAF_NODE	5581:24	5581:24	13	1
LEAF_NODE	5581:25	5581:25	11	,
ARGUMENT	5581:27	5581:35	11	( uint32 ) zwidth
LEAF_NODE	5581:27	5581:27	12	(
TYPE_NAME	5581:28	5581:28	12	uint32
LEAF_NODE	5581:28	5581:28	13	uint32
LEAF_NODE	5581:34	5581:34	12	)
FIELD	5581:35	5581:35	12	zwidth
LEAF_NODE	5581:35	5581:35	13	zwidth
LEAF_NODE	5581:41	5581:41	11	,
ARGUMENT	5581:43	5581:51	11	( uint32 ) zlength
LEAF_NODE	5581:43	5581:43	12	(
TYPE_NAME	5581:44	5581:44	12	uint32
LEAF_NODE	5581:44	5581:44	13	uint32
LEAF_NODE	5581:50	5581:50	12	)
FIELD	5581:51	5581:51	12	zlength
LEAF_NODE	5581:51	5581:51	13	zlength
LEAF_NODE	5581:58	5581:58	11	,
ARGUMENT	5582:6	5582:6	11	crop -> regionlist [ i ] . x1
FIELD	5582:6	5582:26	12	crop -> regionlist [ i ] . x1
LEAF_NODE	5582:6	5582:6	13	crop
LEAF_NODE	5582:10	5582:10	13	->
LEAF_NODE	5582:12	5582:12	13	regionlist
LEAF_NODE	5582:22	5582:22	13	[
EXPR	5582:23	5582:23	13	i
FIELD	5582:23	5582:23	14	i
LEAF_NODE	5582:23	5582:23	15	i
LEAF_NODE	5582:24	5582:24	13	]
LEAF_NODE	5582:25	5582:25	13	.
LEAF_NODE	5582:26	5582:26	13	x1
LEAF_NODE	5582:28	5582:28	11	,
ARGUMENT	5582:30	5582:30	11	crop -> regionlist [ i ] . x2
FIELD	5582:30	5582:50	12	crop -> regionlist [ i ] . x2
LEAF_NODE	5582:30	5582:30	13	crop
LEAF_NODE	5582:34	5582:34	13	->
LEAF_NODE	5582:36	5582:36	13	regionlist
LEAF_NODE	5582:46	5582:46	13	[
EXPR	5582:47	5582:47	13	i
FIELD	5582:47	5582:47	14	i
LEAF_NODE	5582:47	5582:47	15	i
LEAF_NODE	5582:48	5582:48	13	]
LEAF_NODE	5582:49	5582:49	13	.
LEAF_NODE	5582:50	5582:50	13	x2
LEAF_NODE	5582:52	5582:52	11	,
ARGUMENT	5583:20	5583:20	11	crop -> regionlist [ i ] . y1
FIELD	5583:20	5583:40	12	crop -> regionlist [ i ] . y1
LEAF_NODE	5583:20	5583:20	13	crop
LEAF_NODE	5583:24	5583:24	13	->
LEAF_NODE	5583:26	5583:26	13	regionlist
LEAF_NODE	5583:36	5583:36	13	[
EXPR	5583:37	5583:37	13	i
FIELD	5583:37	5583:37	14	i
LEAF_NODE	5583:37	5583:37	15	i
LEAF_NODE	5583:38	5583:38	13	]
LEAF_NODE	5583:39	5583:39	13	.
LEAF_NODE	5583:40	5583:40	13	y1
LEAF_NODE	5583:42	5583:42	11	,
ARGUMENT	5583:44	5583:44	11	crop -> regionlist [ i ] . y2
FIELD	5583:44	5583:64	12	crop -> regionlist [ i ] . y2
LEAF_NODE	5583:44	5583:44	13	crop
LEAF_NODE	5583:48	5583:48	13	->
LEAF_NODE	5583:50	5583:50	13	regionlist
LEAF_NODE	5583:60	5583:60	13	[
EXPR	5583:61	5583:61	13	i
FIELD	5583:61	5583:61	14	i
LEAF_NODE	5583:61	5583:61	15	i
LEAF_NODE	5583:62	5583:62	13	]
LEAF_NODE	5583:63	5583:63	13	.
LEAF_NODE	5583:64	5583:64	13	y2
LEAF_NODE	5583:66	5583:66	11	)
LEAF_NODE	5583:67	5583:67	9	;
LEAF_NODE	5584:4	5584:4	5	}
JUMP_STATEMENT	5586:2	5586:12	3	return ( 0 ) ;
KEYWORD	5586:2	5586:2	4	return
LEAF_NODE	5586:2	5586:2	5	return
DESTINATION	5586:9	5586:9	4	( 0 )
EXPR	5586:9	5586:11	5	( 0 )
LEAF_NODE	5586:9	5586:9	6	(
FIELD	5586:10	5586:10	6	0
LEAF_NODE	5586:10	5586:10	7	0
LEAF_NODE	5586:11	5586:11	6	)
LEAF_NODE	5586:12	5586:12	4	;
LEAF_NODE	5587:2	5587:2	2	}
FUNCTION_DEF	5590:0	5818:2	1	
RETURN_TYPE	5590:0	5590:7	2	static int
LEAF_NODE	5590:0	5590:0	3	static
TYPE_NAME	5590:7	5590:7	3	int
LEAF_NODE	5590:7	5590:7	4	int
FUNCTION_NAME	5591:0	5591:0	2	computeOutputPixelOffsets
LEAF_NODE	5591:0	5591:0	3	computeOutputPixelOffsets
PARAMETER_LIST	5591:26	5593:49	2	( struct crop_mask * crop , struct image_data * image , struct pagedef * page , struct pageseg * sections , struct dump_opts * dump )
LEAF_NODE	5591:26	5591:26	3	(
PARAMETER_DECL	5591:27	5591:45	3	struct crop_mask * crop
TYPE	5591:27	5591:44	4	struct crop_mask *
TYPE_NAME	5591:27	5591:34	5	struct crop_mask
LEAF_NODE	5591:27	5591:27	6	struct
LEAF_NODE	5591:34	5591:34	6	crop_mask
POINTER	5591:44	5591:44	5	*
LEAF_NODE	5591:44	5591:44	6	*
NAME	5591:45	5591:45	4	crop
LEAF_NODE	5591:45	5591:45	5	crop
LEAF_NODE	5591:49	5591:49	3	,
PARAMETER_DECL	5591:51	5591:70	3	struct image_data * image
TYPE	5591:51	5591:69	4	struct image_data *
TYPE_NAME	5591:51	5591:58	5	struct image_data
LEAF_NODE	5591:51	5591:51	6	struct
LEAF_NODE	5591:58	5591:58	6	image_data
POINTER	5591:69	5591:69	5	*
LEAF_NODE	5591:69	5591:69	6	*
NAME	5591:70	5591:70	4	image
LEAF_NODE	5591:70	5591:70	5	image
LEAF_NODE	5591:75	5591:75	3	,
PARAMETER_DECL	5592:27	5592:43	3	struct pagedef * page
TYPE	5592:27	5592:42	4	struct pagedef *
TYPE_NAME	5592:27	5592:34	5	struct pagedef
LEAF_NODE	5592:27	5592:27	6	struct
LEAF_NODE	5592:34	5592:34	6	pagedef
POINTER	5592:42	5592:42	5	*
LEAF_NODE	5592:42	5592:42	6	*
NAME	5592:43	5592:43	4	page
LEAF_NODE	5592:43	5592:43	5	page
LEAF_NODE	5592:47	5592:47	3	,
PARAMETER_DECL	5592:49	5592:65	3	struct pageseg * sections
TYPE	5592:49	5592:64	4	struct pageseg *
TYPE_NAME	5592:49	5592:56	5	struct pageseg
LEAF_NODE	5592:49	5592:49	6	struct
LEAF_NODE	5592:56	5592:56	6	pageseg
POINTER	5592:64	5592:64	5	*
LEAF_NODE	5592:64	5592:64	6	*
NAME	5592:65	5592:65	4	sections
LEAF_NODE	5592:65	5592:65	5	sections
LEAF_NODE	5592:73	5592:73	3	,
PARAMETER_DECL	5593:27	5593:45	3	struct dump_opts * dump
TYPE	5593:27	5593:43	4	struct dump_opts *
TYPE_NAME	5593:27	5593:34	5	struct dump_opts
LEAF_NODE	5593:27	5593:27	6	struct
LEAF_NODE	5593:34	5593:34	6	dump_opts
POINTER	5593:43	5593:43	5	*
LEAF_NODE	5593:43	5593:43	6	*
NAME	5593:45	5593:45	4	dump
LEAF_NODE	5593:45	5593:45	5	dump
LEAF_NODE	5593:49	5593:49	3	)
LEAF_NODE	5594:2	5594:2	2	{
STATEMENTS	5595:2	5817:2	2	
SIMPLE_DECL	5595:2	5595:14	3	double scale ;
VAR_DECL	5595:2	5595:9	4	double scale
TYPE	5595:2	5595:2	5	double
TYPE_NAME	5595:2	5595:2	6	double
LEAF_NODE	5595:2	5595:2	7	double
NAME	5595:9	5595:9	5	scale
LEAF_NODE	5595:9	5595:9	6	scale
LEAF_NODE	5595:14	5595:14	4	;
SIMPLE_DECL	5596:2	5596:24	3	double pwidth , double plength ;
INIT_DECL_LIST	5596:2	5596:2	4	double pwidth , double plength
VAR_DECL	5596:2	5596:9	5	double pwidth
TYPE	5596:2	5596:2	6	double
TYPE_NAME	5596:2	5596:2	7	double
LEAF_NODE	5596:2	5596:2	8	double
NAME	5596:9	5596:9	6	pwidth
LEAF_NODE	5596:9	5596:9	7	pwidth
LEAF_NODE	5596:15	5596:15	5	,
VAR_DECL	5596:2	5596:17	5	double plength
TYPE	5596:2	5596:2	6	double
TYPE_NAME	5596:2	5596:2	7	double
LEAF_NODE	5596:2	5596:2	8	double
NAME	5596:17	5596:17	6	plength
LEAF_NODE	5596:17	5596:17	7	plength
LEAF_NODE	5596:24	5596:24	4	;
SIMPLE_DECL	5597:2	5597:24	3	uint32 iwidth , uint32 ilength ;
INIT_DECL_LIST	5597:2	5597:2	4	uint32 iwidth , uint32 ilength
VAR_DECL	5597:2	5597:9	5	uint32 iwidth
TYPE	5597:2	5597:2	6	uint32
TYPE_NAME	5597:2	5597:2	7	uint32
LEAF_NODE	5597:2	5597:2	8	uint32
NAME	5597:9	5597:9	6	iwidth
LEAF_NODE	5597:9	5597:9	7	iwidth
LEAF_NODE	5597:15	5597:15	5	,
VAR_DECL	5597:2	5597:17	5	uint32 ilength
TYPE	5597:2	5597:2	6	uint32
TYPE_NAME	5597:2	5597:2	7	uint32
LEAF_NODE	5597:2	5597:2	8	uint32
NAME	5597:17	5597:17	6	ilength
LEAF_NODE	5597:17	5597:17	7	ilength
LEAF_NODE	5597:24	5597:24	4	;
SIMPLE_DECL	5598:2	5598:24	3	uint32 owidth , uint32 olength ;
INIT_DECL_LIST	5598:2	5598:2	4	uint32 owidth , uint32 olength
VAR_DECL	5598:2	5598:9	5	uint32 owidth
TYPE	5598:2	5598:2	6	uint32
TYPE_NAME	5598:2	5598:2	7	uint32
LEAF_NODE	5598:2	5598:2	8	uint32
NAME	5598:9	5598:9	6	owidth
LEAF_NODE	5598:9	5598:9	7	owidth
LEAF_NODE	5598:15	5598:15	5	,
VAR_DECL	5598:2	5598:17	5	uint32 olength
TYPE	5598:2	5598:2	6	uint32
TYPE_NAME	5598:2	5598:2	7	uint32
LEAF_NODE	5598:2	5598:2	8	uint32
NAME	5598:17	5598:17	6	olength
LEAF_NODE	5598:17	5598:17	7	olength
LEAF_NODE	5598:24	5598:24	4	;
SIMPLE_DECL	5599:2	5599:21	3	uint32 orows , uint32 ocols ;
INIT_DECL_LIST	5599:2	5599:2	4	uint32 orows , uint32 ocols
VAR_DECL	5599:2	5599:9	5	uint32 orows
TYPE	5599:2	5599:2	6	uint32
TYPE_NAME	5599:2	5599:2	7	uint32
LEAF_NODE	5599:2	5599:2	8	uint32
NAME	5599:9	5599:9	6	orows
LEAF_NODE	5599:9	5599:9	7	orows
LEAF_NODE	5599:14	5599:14	5	,
VAR_DECL	5599:2	5599:16	5	uint32 ocols
TYPE	5599:2	5599:2	6	uint32
TYPE_NAME	5599:2	5599:2	7	uint32
LEAF_NODE	5599:2	5599:2	8	uint32
NAME	5599:16	5599:16	6	ocols
LEAF_NODE	5599:16	5599:16	7	ocols
LEAF_NODE	5599:21	5599:21	4	;
SIMPLE_DECL	5600:2	5600:25	3	uint32 hmargin , uint32 vmargin ;
INIT_DECL_LIST	5600:2	5600:2	4	uint32 hmargin , uint32 vmargin
VAR_DECL	5600:2	5600:9	5	uint32 hmargin
TYPE	5600:2	5600:2	6	uint32
TYPE_NAME	5600:2	5600:2	7	uint32
LEAF_NODE	5600:2	5600:2	8	uint32
NAME	5600:9	5600:9	6	hmargin
LEAF_NODE	5600:9	5600:9	7	hmargin
LEAF_NODE	5600:16	5600:16	5	,
VAR_DECL	5600:2	5600:18	5	uint32 vmargin
TYPE	5600:2	5600:2	6	uint32
TYPE_NAME	5600:2	5600:2	7	uint32
LEAF_NODE	5600:2	5600:2	8	uint32
NAME	5600:18	5600:18	6	vmargin
LEAF_NODE	5600:18	5600:18	7	vmargin
LEAF_NODE	5600:25	5600:25	4	;
SIMPLE_DECL	5601:2	5601:35	3	uint32 x1 , uint32 x2 , uint32 y1 , uint32 y2 , uint32 line_bytes ;
INIT_DECL_LIST	5601:2	5601:2	4	uint32 x1 , uint32 x2 , uint32 y1 , uint32 y2 , uint32 line_bytes
VAR_DECL	5601:2	5601:9	5	uint32 x1
TYPE	5601:2	5601:2	6	uint32
TYPE_NAME	5601:2	5601:2	7	uint32
LEAF_NODE	5601:2	5601:2	8	uint32
NAME	5601:9	5601:9	6	x1
LEAF_NODE	5601:9	5601:9	7	x1
LEAF_NODE	5601:11	5601:11	5	,
INIT_DECL_LIST	5601:2	5601:2	5	uint32 x2 , uint32 y1 , uint32 y2 , uint32 line_bytes
VAR_DECL	5601:2	5601:13	6	uint32 x2
TYPE	5601:2	5601:2	7	uint32
TYPE_NAME	5601:2	5601:2	8	uint32
LEAF_NODE	5601:2	5601:2	9	uint32
NAME	5601:13	5601:13	7	x2
LEAF_NODE	5601:13	5601:13	8	x2
LEAF_NODE	5601:15	5601:15	6	,
INIT_DECL_LIST	5601:2	5601:2	6	uint32 y1 , uint32 y2 , uint32 line_bytes
VAR_DECL	5601:2	5601:17	7	uint32 y1
TYPE	5601:2	5601:2	8	uint32
TYPE_NAME	5601:2	5601:2	9	uint32
LEAF_NODE	5601:2	5601:2	10	uint32
NAME	5601:17	5601:17	8	y1
LEAF_NODE	5601:17	5601:17	9	y1
LEAF_NODE	5601:19	5601:19	7	,
INIT_DECL_LIST	5601:2	5601:2	7	uint32 y2 , uint32 line_bytes
VAR_DECL	5601:2	5601:21	8	uint32 y2
TYPE	5601:2	5601:2	9	uint32
TYPE_NAME	5601:2	5601:2	10	uint32
LEAF_NODE	5601:2	5601:2	11	uint32
NAME	5601:21	5601:21	9	y2
LEAF_NODE	5601:21	5601:21	10	y2
LEAF_NODE	5601:23	5601:23	8	,
VAR_DECL	5601:2	5601:25	8	uint32 line_bytes
TYPE	5601:2	5601:2	9	uint32
TYPE_NAME	5601:2	5601:2	10	uint32
LEAF_NODE	5601:2	5601:2	11	uint32
NAME	5601:25	5601:25	9	line_bytes
LEAF_NODE	5601:25	5601:25	10	line_bytes
LEAF_NODE	5601:35	5601:35	4	;
SIMPLE_DECL	5603:2	5603:16	3	uint32 i , uint32 j , uint32 k ;
INIT_DECL_LIST	5603:2	5603:2	4	uint32 i , uint32 j , uint32 k
VAR_DECL	5603:2	5603:9	5	uint32 i
TYPE	5603:2	5603:2	6	uint32
TYPE_NAME	5603:2	5603:2	7	uint32
LEAF_NODE	5603:2	5603:2	8	uint32
NAME	5603:9	5603:9	6	i
LEAF_NODE	5603:9	5603:9	7	i
LEAF_NODE	5603:10	5603:10	5	,
INIT_DECL_LIST	5603:2	5603:2	5	uint32 j , uint32 k
VAR_DECL	5603:2	5603:12	6	uint32 j
TYPE	5603:2	5603:2	7	uint32
TYPE_NAME	5603:2	5603:2	8	uint32
LEAF_NODE	5603:2	5603:2	9	uint32
NAME	5603:12	5603:12	7	j
LEAF_NODE	5603:12	5603:12	8	j
LEAF_NODE	5603:13	5603:13	6	,
VAR_DECL	5603:2	5603:15	6	uint32 k
TYPE	5603:2	5603:2	7	uint32
TYPE_NAME	5603:2	5603:2	8	uint32
LEAF_NODE	5603:2	5603:2	9	uint32
NAME	5603:15	5603:15	7	k
LEAF_NODE	5603:15	5603:15	8	k
LEAF_NODE	5603:16	5603:16	4	;
EXPR_STATEMENT	5605:2	5605:13	3	scale = 1.0 ;
EXPR	5605:2	5605:2	4	scale = 1.0
ASSIGN	5605:2	5605:10	5	scale = 1.0
LVAL	5605:2	5605:2	6	scale
FIELD	5605:2	5605:2	7	scale
LEAF_NODE	5605:2	5605:2	8	scale
ASSIGN_OP	5605:8	5605:8	6	=
LEAF_NODE	5605:8	5605:8	7	=
RVAL	5605:10	5605:10	6	1.0
FIELD	5605:10	5605:10	7	1.0
LEAF_NODE	5605:10	5605:10	8	1.0
LEAF_NODE	5605:13	5605:13	4	;
SELECTION	5606:2	5607:4	3	
KEYWORD	5606:2	5606:2	4	if
LEAF_NODE	5606:2	5606:2	5	if
LEAF_NODE	5606:5	5606:5	4	(
CONDITION	5606:6	5606:6	4	page -> res_unit == RESUNIT_NONE
EXPR	5606:6	5606:24	5	page -> res_unit == RESUNIT_NONE
FIELD	5606:6	5606:12	6	page -> res_unit
LEAF_NODE	5606:6	5606:6	7	page
LEAF_NODE	5606:10	5606:10	7	->
LEAF_NODE	5606:12	5606:12	7	res_unit
EQ_OPERATOR	5606:21	5606:21	6	==
LEAF_NODE	5606:21	5606:21	7	==
FIELD	5606:24	5606:24	6	RESUNIT_NONE
LEAF_NODE	5606:24	5606:24	7	RESUNIT_NONE
LEAF_NODE	5606:36	5606:36	4	)
STATEMENTS	5607:4	5607:4	4	
EXPR_STATEMENT	5607:4	5607:36	5	page -> res_unit = image -> res_unit ;
EXPR	5607:4	5607:4	6	page -> res_unit = image -> res_unit
ASSIGN	5607:4	5607:21	7	page -> res_unit = image -> res_unit
LVAL	5607:4	5607:4	8	page -> res_unit
FIELD	5607:4	5607:10	9	page -> res_unit
LEAF_NODE	5607:4	5607:4	10	page
LEAF_NODE	5607:8	5607:8	10	->
LEAF_NODE	5607:10	5607:10	10	res_unit
ASSIGN_OP	5607:19	5607:19	8	=
LEAF_NODE	5607:19	5607:19	9	=
RVAL	5607:21	5607:21	8	image -> res_unit
FIELD	5607:21	5607:28	9	image -> res_unit
LEAF_NODE	5607:21	5607:21	10	image
LEAF_NODE	5607:26	5607:26	10	->
LEAF_NODE	5607:28	5607:28	10	res_unit
LEAF_NODE	5607:36	5607:36	6	;
SELECTION	5609:2	5609:27	3	
KEYWORD	5609:2	5609:2	4	switch
LEAF_NODE	5609:2	5609:2	5	switch
LEAF_NODE	5609:9	5609:9	4	(
CONDITION	5609:10	5609:10	4	image -> res_unit
EXPR	5609:10	5609:10	5	image -> res_unit
FIELD	5609:10	5609:17	6	image -> res_unit
LEAF_NODE	5609:10	5609:10	7	image
LEAF_NODE	5609:15	5609:15	7	->
LEAF_NODE	5609:17	5609:17	7	res_unit
LEAF_NODE	5609:25	5609:25	4	)
STATEMENTS	5609:27	5621:4	4	
LEAF_NODE	5609:27	5609:27	5	{
STATEMENTS	5610:4	5620:4	5	
LABEL	5610:4	5610:27	6	case RESUNIT_CENTIMETER :
LEAF_NODE	5610:4	5610:4	7	case
LEAF_NODE	5610:9	5610:9	7	RESUNIT_CENTIMETER
LEAF_NODE	5610:27	5610:27	7	:
SELECTION	5611:9	5612:4	6	
KEYWORD	5611:9	5611:9	7	if
LEAF_NODE	5611:9	5611:9	8	if
LEAF_NODE	5611:12	5611:12	7	(
CONDITION	5611:13	5611:13	7	page -> res_unit == RESUNIT_INCH
EXPR	5611:13	5611:31	8	page -> res_unit == RESUNIT_INCH
FIELD	5611:13	5611:19	9	page -> res_unit
LEAF_NODE	5611:13	5611:13	10	page
LEAF_NODE	5611:17	5611:17	10	->
LEAF_NODE	5611:19	5611:19	10	res_unit
EQ_OPERATOR	5611:28	5611:28	9	==
LEAF_NODE	5611:28	5611:28	10	==
FIELD	5611:31	5611:31	9	RESUNIT_INCH
LEAF_NODE	5611:31	5611:31	10	RESUNIT_INCH
LEAF_NODE	5611:43	5611:43	7	)
STATEMENTS	5612:4	5612:4	7	
EXPR_STATEMENT	5612:4	5612:20	8	scale = 1.0 / 2.54 ;
EXPR	5612:4	5612:4	9	scale = 1.0 / 2.54
ASSIGN	5612:4	5612:12	10	scale = 1.0 / 2.54
LVAL	5612:4	5612:4	11	scale
FIELD	5612:4	5612:4	12	scale
LEAF_NODE	5612:4	5612:4	13	scale
ASSIGN_OP	5612:10	5612:10	11	=
LEAF_NODE	5612:10	5612:10	12	=
RVAL	5612:12	5612:16	11	1.0 / 2.54
FIELD	5612:12	5612:12	12	1.0
LEAF_NODE	5612:12	5612:12	13	1.0
LEAF_NODE	5612:15	5612:15	12	/
FIELD	5612:16	5612:16	12	2.54
LEAF_NODE	5612:16	5612:16	13	2.54
LEAF_NODE	5612:20	5612:20	9	;
JUMP_STATEMENT	5613:2	5613:7	6	break DESTINATION ;
KEYWORD	5613:2	5613:2	7	break
LEAF_NODE	5613:2	5613:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5613:7	5613:7	7	;
LABEL	5614:4	5614:21	6	case RESUNIT_INCH :
LEAF_NODE	5614:4	5614:4	7	case
LEAF_NODE	5614:9	5614:9	7	RESUNIT_INCH
LEAF_NODE	5614:21	5614:21	7	:
SELECTION	5615:2	5616:6	6	
KEYWORD	5615:2	5615:2	7	if
LEAF_NODE	5615:2	5615:2	8	if
LEAF_NODE	5615:5	5615:5	7	(
CONDITION	5615:6	5615:6	7	page -> res_unit == RESUNIT_CENTIMETER
EXPR	5615:6	5615:24	8	page -> res_unit == RESUNIT_CENTIMETER
FIELD	5615:6	5615:12	9	page -> res_unit
LEAF_NODE	5615:6	5615:6	10	page
LEAF_NODE	5615:10	5615:10	10	->
LEAF_NODE	5615:12	5615:12	10	res_unit
EQ_OPERATOR	5615:21	5615:21	9	==
LEAF_NODE	5615:21	5615:21	10	==
FIELD	5615:24	5615:24	9	RESUNIT_CENTIMETER
LEAF_NODE	5615:24	5615:24	10	RESUNIT_CENTIMETER
LEAF_NODE	5615:42	5615:42	7	)
STATEMENTS	5616:6	5616:6	7	
EXPR_STATEMENT	5616:6	5616:18	8	scale = 2.54 ;
EXPR	5616:6	5616:6	9	scale = 2.54
ASSIGN	5616:6	5616:14	10	scale = 2.54
LVAL	5616:6	5616:6	11	scale
FIELD	5616:6	5616:6	12	scale
LEAF_NODE	5616:6	5616:6	13	scale
ASSIGN_OP	5616:12	5616:12	11	=
LEAF_NODE	5616:12	5616:12	12	=
RVAL	5616:14	5616:14	11	2.54
FIELD	5616:14	5616:14	12	2.54
LEAF_NODE	5616:14	5616:14	13	2.54
LEAF_NODE	5616:18	5616:18	9	;
JUMP_STATEMENT	5617:2	5617:7	6	break DESTINATION ;
KEYWORD	5617:2	5617:2	7	break
LEAF_NODE	5617:2	5617:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5617:7	5617:7	7	;
LABEL	5618:4	5618:21	6	case RESUNIT_NONE :
LEAF_NODE	5618:4	5618:4	7	case
LEAF_NODE	5618:9	5618:9	7	RESUNIT_NONE
LEAF_NODE	5618:21	5618:21	7	:
LABEL	5619:4	5619:11	6	default :
LEAF_NODE	5619:4	5619:4	7	default
LEAF_NODE	5619:11	5619:11	7	:
JUMP_STATEMENT	5620:4	5620:9	6	break DESTINATION ;
KEYWORD	5620:4	5620:4	7	break
LEAF_NODE	5620:4	5620:4	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5620:9	5620:9	7	;
LEAF_NODE	5621:4	5621:4	5	}
SELECTION	5624:2	5625:4	3	
KEYWORD	5624:2	5624:2	4	if
LEAF_NODE	5624:2	5624:2	5	if
LEAF_NODE	5624:5	5624:5	4	(
CONDITION	5624:6	5624:6	4	crop -> combined_width > 0
EXPR	5624:6	5624:29	5	crop -> combined_width > 0
FIELD	5624:6	5624:12	6	crop -> combined_width
LEAF_NODE	5624:6	5624:6	7	crop
LEAF_NODE	5624:10	5624:10	7	->
LEAF_NODE	5624:12	5624:12	7	combined_width
REL_OPERATOR	5624:27	5624:27	6	>
LEAF_NODE	5624:27	5624:27	7	>
FIELD	5624:29	5624:29	6	0
LEAF_NODE	5624:29	5624:29	7	0
LEAF_NODE	5624:30	5624:30	4	)
STATEMENTS	5625:4	5625:4	4	
EXPR_STATEMENT	5625:4	5625:33	5	iwidth = crop -> combined_width ;
EXPR	5625:4	5625:4	6	iwidth = crop -> combined_width
ASSIGN	5625:4	5625:13	7	iwidth = crop -> combined_width
LVAL	5625:4	5625:4	8	iwidth
FIELD	5625:4	5625:4	9	iwidth
LEAF_NODE	5625:4	5625:4	10	iwidth
ASSIGN_OP	5625:11	5625:11	8	=
LEAF_NODE	5625:11	5625:11	9	=
RVAL	5625:13	5625:13	8	crop -> combined_width
FIELD	5625:13	5625:19	9	crop -> combined_width
LEAF_NODE	5625:13	5625:13	10	crop
LEAF_NODE	5625:17	5625:17	10	->
LEAF_NODE	5625:19	5625:19	10	combined_width
LEAF_NODE	5625:33	5625:33	6	;
SELECTION	5626:2	5627:4	3	
KEYWORD	5626:2	5626:2	4	else
LEAF_NODE	5626:2	5626:2	5	else
STATEMENTS	5627:4	5627:4	4	
EXPR_STATEMENT	5627:4	5627:25	5	iwidth = image -> width ;
EXPR	5627:4	5627:4	6	iwidth = image -> width
ASSIGN	5627:4	5627:13	7	iwidth = image -> width
LVAL	5627:4	5627:4	8	iwidth
FIELD	5627:4	5627:4	9	iwidth
LEAF_NODE	5627:4	5627:4	10	iwidth
ASSIGN_OP	5627:11	5627:11	8	=
LEAF_NODE	5627:11	5627:11	9	=
RVAL	5627:13	5627:13	8	image -> width
FIELD	5627:13	5627:20	9	image -> width
LEAF_NODE	5627:13	5627:13	10	image
LEAF_NODE	5627:18	5627:18	10	->
LEAF_NODE	5627:20	5627:20	10	width
LEAF_NODE	5627:25	5627:25	6	;
SELECTION	5628:2	5629:4	3	
KEYWORD	5628:2	5628:2	4	if
LEAF_NODE	5628:2	5628:2	5	if
LEAF_NODE	5628:5	5628:5	4	(
CONDITION	5628:6	5628:6	4	crop -> combined_length > 0
EXPR	5628:6	5628:30	5	crop -> combined_length > 0
FIELD	5628:6	5628:12	6	crop -> combined_length
LEAF_NODE	5628:6	5628:6	7	crop
LEAF_NODE	5628:10	5628:10	7	->
LEAF_NODE	5628:12	5628:12	7	combined_length
REL_OPERATOR	5628:28	5628:28	6	>
LEAF_NODE	5628:28	5628:28	7	>
FIELD	5628:30	5628:30	6	0
LEAF_NODE	5628:30	5628:30	7	0
LEAF_NODE	5628:31	5628:31	4	)
STATEMENTS	5629:4	5629:4	4	
EXPR_STATEMENT	5629:4	5629:35	5	ilength = crop -> combined_length ;
EXPR	5629:4	5629:4	6	ilength = crop -> combined_length
ASSIGN	5629:4	5629:14	7	ilength = crop -> combined_length
LVAL	5629:4	5629:4	8	ilength
FIELD	5629:4	5629:4	9	ilength
LEAF_NODE	5629:4	5629:4	10	ilength
ASSIGN_OP	5629:12	5629:12	8	=
LEAF_NODE	5629:12	5629:12	9	=
RVAL	5629:14	5629:14	8	crop -> combined_length
FIELD	5629:14	5629:20	9	crop -> combined_length
LEAF_NODE	5629:14	5629:14	10	crop
LEAF_NODE	5629:18	5629:18	10	->
LEAF_NODE	5629:20	5629:20	10	combined_length
LEAF_NODE	5629:35	5629:35	6	;
SELECTION	5630:2	5631:4	3	
KEYWORD	5630:2	5630:2	4	else
LEAF_NODE	5630:2	5630:2	5	else
STATEMENTS	5631:4	5631:4	4	
EXPR_STATEMENT	5631:4	5631:27	5	ilength = image -> length ;
EXPR	5631:4	5631:4	6	ilength = image -> length
ASSIGN	5631:4	5631:14	7	ilength = image -> length
LVAL	5631:4	5631:4	8	ilength
FIELD	5631:4	5631:4	9	ilength
LEAF_NODE	5631:4	5631:4	10	ilength
ASSIGN_OP	5631:12	5631:12	8	=
LEAF_NODE	5631:12	5631:12	9	=
RVAL	5631:14	5631:14	8	image -> length
FIELD	5631:14	5631:21	9	image -> length
LEAF_NODE	5631:14	5631:14	10	image
LEAF_NODE	5631:19	5631:19	10	->
LEAF_NODE	5631:21	5631:21	10	length
LEAF_NODE	5631:27	5631:27	6	;
SELECTION	5633:2	5634:4	3	
KEYWORD	5633:2	5633:2	4	if
LEAF_NODE	5633:2	5633:2	5	if
LEAF_NODE	5633:5	5633:5	4	(
CONDITION	5633:6	5633:6	4	page -> hres <= 1.0
EXPR	5633:6	5633:20	5	page -> hres <= 1.0
FIELD	5633:6	5633:12	6	page -> hres
LEAF_NODE	5633:6	5633:6	7	page
LEAF_NODE	5633:10	5633:10	7	->
LEAF_NODE	5633:12	5633:12	7	hres
REL_OPERATOR	5633:17	5633:17	6	<=
LEAF_NODE	5633:17	5633:17	7	<=
FIELD	5633:20	5633:20	6	1.0
LEAF_NODE	5633:20	5633:20	7	1.0
LEAF_NODE	5633:23	5633:23	4	)
STATEMENTS	5634:4	5634:4	4	
EXPR_STATEMENT	5634:4	5634:28	5	page -> hres = image -> xres ;
EXPR	5634:4	5634:4	6	page -> hres = image -> xres
ASSIGN	5634:4	5634:17	7	page -> hres = image -> xres
LVAL	5634:4	5634:4	8	page -> hres
FIELD	5634:4	5634:10	9	page -> hres
LEAF_NODE	5634:4	5634:4	10	page
LEAF_NODE	5634:8	5634:8	10	->
LEAF_NODE	5634:10	5634:10	10	hres
ASSIGN_OP	5634:15	5634:15	8	=
LEAF_NODE	5634:15	5634:15	9	=
RVAL	5634:17	5634:17	8	image -> xres
FIELD	5634:17	5634:24	9	image -> xres
LEAF_NODE	5634:17	5634:17	10	image
LEAF_NODE	5634:22	5634:22	10	->
LEAF_NODE	5634:24	5634:24	10	xres
LEAF_NODE	5634:28	5634:28	6	;
SELECTION	5635:2	5636:4	3	
KEYWORD	5635:2	5635:2	4	if
LEAF_NODE	5635:2	5635:2	5	if
LEAF_NODE	5635:5	5635:5	4	(
CONDITION	5635:6	5635:6	4	page -> vres <= 1.0
EXPR	5635:6	5635:20	5	page -> vres <= 1.0
FIELD	5635:6	5635:12	6	page -> vres
LEAF_NODE	5635:6	5635:6	7	page
LEAF_NODE	5635:10	5635:10	7	->
LEAF_NODE	5635:12	5635:12	7	vres
REL_OPERATOR	5635:17	5635:17	6	<=
LEAF_NODE	5635:17	5635:17	7	<=
FIELD	5635:20	5635:20	6	1.0
LEAF_NODE	5635:20	5635:20	7	1.0
LEAF_NODE	5635:23	5635:23	4	)
STATEMENTS	5636:4	5636:4	4	
EXPR_STATEMENT	5636:4	5636:28	5	page -> vres = image -> yres ;
EXPR	5636:4	5636:4	6	page -> vres = image -> yres
ASSIGN	5636:4	5636:17	7	page -> vres = image -> yres
LVAL	5636:4	5636:4	8	page -> vres
FIELD	5636:4	5636:10	9	page -> vres
LEAF_NODE	5636:4	5636:4	10	page
LEAF_NODE	5636:8	5636:8	10	->
LEAF_NODE	5636:10	5636:10	10	vres
ASSIGN_OP	5636:15	5636:15	8	=
LEAF_NODE	5636:15	5636:15	9	=
RVAL	5636:17	5636:17	8	image -> yres
FIELD	5636:17	5636:24	9	image -> yres
LEAF_NODE	5636:17	5636:17	10	image
LEAF_NODE	5636:22	5636:22	10	->
LEAF_NODE	5636:24	5636:24	10	yres
LEAF_NODE	5636:28	5636:28	6	;
SELECTION	5638:2	5639:4	3	
KEYWORD	5638:2	5638:2	4	if
LEAF_NODE	5638:2	5638:2	5	if
LEAF_NODE	5638:5	5638:5	4	(
CONDITION	5638:6	5638:6	4	( page -> hres < 1.0 ) || ( page -> vres < 1.0 )
EXPR	5638:6	5638:6	5	( page -> hres < 1.0 ) || ( page -> vres < 1.0 )
OR	5638:6	5638:28	6	( page -> hres < 1.0 ) || ( page -> vres < 1.0 )
EXPR	5638:6	5638:23	7	( page -> hres < 1.0 )
LEAF_NODE	5638:6	5638:6	8	(
FIELD	5638:7	5638:13	8	page -> hres
LEAF_NODE	5638:7	5638:7	9	page
LEAF_NODE	5638:11	5638:11	9	->
LEAF_NODE	5638:13	5638:13	9	hres
REL_OPERATOR	5638:18	5638:18	8	<
LEAF_NODE	5638:18	5638:18	9	<
FIELD	5638:20	5638:20	8	1.0
LEAF_NODE	5638:20	5638:20	9	1.0
LEAF_NODE	5638:23	5638:23	8	)
LEAF_NODE	5638:25	5638:25	7	||
EXPR	5638:28	5638:45	7	( page -> vres < 1.0 )
LEAF_NODE	5638:28	5638:28	8	(
FIELD	5638:29	5638:35	8	page -> vres
LEAF_NODE	5638:29	5638:29	9	page
LEAF_NODE	5638:33	5638:33	9	->
LEAF_NODE	5638:35	5638:35	9	vres
REL_OPERATOR	5638:40	5638:40	8	<
LEAF_NODE	5638:40	5638:40	9	<
FIELD	5638:42	5638:42	8	1.0
LEAF_NODE	5638:42	5638:42	9	1.0
LEAF_NODE	5638:45	5638:45	8	)
LEAF_NODE	5638:46	5638:46	4	)
STATEMENTS	5639:4	5643:4	4	
LEAF_NODE	5639:4	5639:4	5	{
STATEMENTS	5640:4	5642:4	5	
EXPR_STATEMENT	5640:4	5641:83	6	TIFFError ( "computeOutputPixelOffsets" , "Invalid horizontal or vertical resolution specified or read from input image" ) ;
EXPR	5640:4	5640:4	7	TIFFError ( "computeOutputPixelOffsets" , "Invalid horizontal or vertical resolution specified or read from input image" )
FUNCTION_CALL	5640:4	5641:82	8	TIFFError ( "computeOutputPixelOffsets" , "Invalid horizontal or vertical resolution specified or read from input image" )
CALLEE	5640:4	5640:4	9	TIFFError
LEAF_NODE	5640:4	5640:4	10	TIFFError
LEAF_NODE	5640:13	5640:13	9	(
ARGUMENT	5640:14	5640:14	9	"computeOutputPixelOffsets"
FIELD	5640:14	5640:14	10	"computeOutputPixelOffsets"
LEAF_NODE	5640:14	5640:14	11	"computeOutputPixelOffsets"
LEAF_NODE	5640:41	5640:41	9	,
ARGUMENT	5641:4	5641:4	9	"Invalid horizontal or vertical resolution specified or read from input image"
FIELD	5641:4	5641:4	10	"Invalid horizontal or vertical resolution specified or read from input image"
LEAF_NODE	5641:4	5641:4	11	"Invalid horizontal or vertical resolution specified or read from input image"
LEAF_NODE	5641:82	5641:82	9	)
LEAF_NODE	5641:83	5641:83	7	;
JUMP_STATEMENT	5642:4	5642:14	6	return ( 1 ) ;
KEYWORD	5642:4	5642:4	7	return
LEAF_NODE	5642:4	5642:4	8	return
DESTINATION	5642:11	5642:11	7	( 1 )
EXPR	5642:11	5642:13	8	( 1 )
LEAF_NODE	5642:11	5642:11	9	(
FIELD	5642:12	5642:12	9	1
LEAF_NODE	5642:12	5642:12	10	1
LEAF_NODE	5642:13	5642:13	9	)
LEAF_NODE	5642:14	5642:14	7	;
LEAF_NODE	5643:4	5643:4	5	}
SELECTION	5648:2	5649:4	3	
KEYWORD	5648:2	5648:2	4	if
LEAF_NODE	5648:2	5648:2	5	if
LEAF_NODE	5648:5	5648:5	4	(
CONDITION	5648:6	5648:6	4	page -> width <= 0
EXPR	5648:6	5648:21	5	page -> width <= 0
FIELD	5648:6	5648:12	6	page -> width
LEAF_NODE	5648:6	5648:6	7	page
LEAF_NODE	5648:10	5648:10	7	->
LEAF_NODE	5648:12	5648:12	7	width
REL_OPERATOR	5648:18	5648:18	6	<=
LEAF_NODE	5648:18	5648:18	7	<=
FIELD	5648:21	5648:21	6	0
LEAF_NODE	5648:21	5648:21	7	0
LEAF_NODE	5648:22	5648:22	4	)
STATEMENTS	5649:4	5649:4	4	
EXPR_STATEMENT	5649:4	5649:19	5	pwidth = iwidth ;
EXPR	5649:4	5649:4	6	pwidth = iwidth
ASSIGN	5649:4	5649:13	7	pwidth = iwidth
LVAL	5649:4	5649:4	8	pwidth
FIELD	5649:4	5649:4	9	pwidth
LEAF_NODE	5649:4	5649:4	10	pwidth
ASSIGN_OP	5649:11	5649:11	8	=
LEAF_NODE	5649:11	5649:11	9	=
RVAL	5649:13	5649:13	8	iwidth
FIELD	5649:13	5649:13	9	iwidth
LEAF_NODE	5649:13	5649:13	10	iwidth
LEAF_NODE	5649:19	5649:19	6	;
SELECTION	5650:2	5651:4	3	
KEYWORD	5650:2	5650:2	4	else
LEAF_NODE	5650:2	5650:2	5	else
STATEMENTS	5651:4	5651:4	4	
EXPR_STATEMENT	5651:4	5651:24	5	pwidth = page -> width ;
EXPR	5651:4	5651:4	6	pwidth = page -> width
ASSIGN	5651:4	5651:13	7	pwidth = page -> width
LVAL	5651:4	5651:4	8	pwidth
FIELD	5651:4	5651:4	9	pwidth
LEAF_NODE	5651:4	5651:4	10	pwidth
ASSIGN_OP	5651:11	5651:11	8	=
LEAF_NODE	5651:11	5651:11	9	=
RVAL	5651:13	5651:13	8	page -> width
FIELD	5651:13	5651:19	9	page -> width
LEAF_NODE	5651:13	5651:13	10	page
LEAF_NODE	5651:17	5651:17	10	->
LEAF_NODE	5651:19	5651:19	10	width
LEAF_NODE	5651:24	5651:24	6	;
SELECTION	5653:2	5654:4	3	
KEYWORD	5653:2	5653:2	4	if
LEAF_NODE	5653:2	5653:2	5	if
LEAF_NODE	5653:5	5653:5	4	(
CONDITION	5653:6	5653:6	4	page -> length <= 0
EXPR	5653:6	5653:22	5	page -> length <= 0
FIELD	5653:6	5653:12	6	page -> length
LEAF_NODE	5653:6	5653:6	7	page
LEAF_NODE	5653:10	5653:10	7	->
LEAF_NODE	5653:12	5653:12	7	length
REL_OPERATOR	5653:19	5653:19	6	<=
LEAF_NODE	5653:19	5653:19	7	<=
FIELD	5653:22	5653:22	6	0
LEAF_NODE	5653:22	5653:22	7	0
LEAF_NODE	5653:23	5653:23	4	)
STATEMENTS	5654:4	5654:4	4	
EXPR_STATEMENT	5654:4	5654:21	5	plength = ilength ;
EXPR	5654:4	5654:4	6	plength = ilength
ASSIGN	5654:4	5654:14	7	plength = ilength
LVAL	5654:4	5654:4	8	plength
FIELD	5654:4	5654:4	9	plength
LEAF_NODE	5654:4	5654:4	10	plength
ASSIGN_OP	5654:12	5654:12	8	=
LEAF_NODE	5654:12	5654:12	9	=
RVAL	5654:14	5654:14	8	ilength
FIELD	5654:14	5654:14	9	ilength
LEAF_NODE	5654:14	5654:14	10	ilength
LEAF_NODE	5654:21	5654:21	6	;
SELECTION	5655:2	5656:4	3	
KEYWORD	5655:2	5655:2	4	else
LEAF_NODE	5655:2	5655:2	5	else
STATEMENTS	5656:4	5656:4	4	
EXPR_STATEMENT	5656:4	5656:26	5	plength = page -> length ;
EXPR	5656:4	5656:4	6	plength = page -> length
ASSIGN	5656:4	5656:14	7	plength = page -> length
LVAL	5656:4	5656:4	8	plength
FIELD	5656:4	5656:4	9	plength
LEAF_NODE	5656:4	5656:4	10	plength
ASSIGN_OP	5656:12	5656:12	8	=
LEAF_NODE	5656:12	5656:12	9	=
RVAL	5656:14	5656:14	8	page -> length
FIELD	5656:14	5656:20	9	page -> length
LEAF_NODE	5656:14	5656:14	10	page
LEAF_NODE	5656:18	5656:18	10	->
LEAF_NODE	5656:20	5656:20	10	length
LEAF_NODE	5656:26	5656:26	6	;
SELECTION	5658:2	5659:4	3	
KEYWORD	5658:2	5658:2	4	if
LEAF_NODE	5658:2	5658:2	5	if
LEAF_NODE	5658:5	5658:5	4	(
CONDITION	5658:6	5658:6	4	dump -> debug
EXPR	5658:6	5658:6	5	dump -> debug
FIELD	5658:6	5658:12	6	dump -> debug
LEAF_NODE	5658:6	5658:6	7	dump
LEAF_NODE	5658:10	5658:10	7	->
LEAF_NODE	5658:12	5658:12	7	debug
LEAF_NODE	5658:17	5658:17	4	)
STATEMENTS	5659:4	5666:4	4	
LEAF_NODE	5659:4	5659:4	5	{
STATEMENTS	5660:4	5664:4	5	
LEAF_NODE	5660:4	5660:4	6	TIFFError
LEAF_NODE	5660:13	5660:13	6	(
LEAF_NODE	5660:14	5660:14	6	""
LEAF_NODE	5660:16	5660:16	6	,
LEAF_NODE	5660:18	5660:18	6	"Page size: %s, Vres: %3.2f, Hres: %3.2f, "
LEAF_NODE	5661:19	5661:19	6	"Hmargin: %3.2f, Vmargin: %3.2f"
LEAF_NODE	5661:51	5661:51	6	,
LEAF_NODE	5662:6	5662:6	6	page
LEAF_NODE	5662:10	5662:10	6	->
LEAF_NODE	5662:12	5662:12	6	name
LEAF_NODE	5662:16	5662:16	6	,
LEAF_NODE	5662:18	5662:18	6	page
LEAF_NODE	5662:22	5662:22	6	->
LEAF_NODE	5662:24	5662:24	6	vres
LEAF_NODE	5662:28	5662:28	6	,
LEAF_NODE	5662:30	5662:30	6	page
LEAF_NODE	5662:34	5662:34	6	->
LEAF_NODE	5662:36	5662:36	6	hres
LEAF_NODE	5662:40	5662:40	6	,
LEAF_NODE	5663:13	5663:13	6	page
LEAF_NODE	5663:17	5663:17	6	->
LEAF_NODE	5663:19	5663:19	6	hmargin
LEAF_NODE	5663:26	5663:26	6	,
LEAF_NODE	5663:28	5663:28	6	page
LEAF_NODE	5663:32	5663:32	6	->
LEAF_NODE	5663:34	5663:34	6	vmargin
LEAF_NODE	5663:41	5663:41	6	)
LEAF_NODE	5663:42	5663:42	6	;
EXPR_STATEMENT	5664:4	5665:50	6	TIFFError ( "" , "Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f" , page -> res_unit , scale , pwidth , plength ) ;
EXPR	5664:4	5664:4	7	TIFFError ( "" , "Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f" , page -> res_unit , scale , pwidth , plength )
FUNCTION_CALL	5664:4	5665:49	8	TIFFError ( "" , "Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f" , page -> res_unit , scale , pwidth , plength )
CALLEE	5664:4	5664:4	9	TIFFError
LEAF_NODE	5664:4	5664:4	10	TIFFError
LEAF_NODE	5664:13	5664:13	9	(
ARGUMENT	5664:14	5664:14	9	""
FIELD	5664:14	5664:14	10	""
LEAF_NODE	5664:14	5664:14	11	""
LEAF_NODE	5664:16	5664:16	9	,
ARGUMENT	5664:18	5664:18	9	"Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f"
FIELD	5664:18	5664:18	10	"Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f"
LEAF_NODE	5664:18	5664:18	11	"Res_unit: %d, Scale: %3.2f, Page width: %3.2f, length: %3.2f"
LEAF_NODE	5664:80	5664:80	9	,
ARGUMENT	5665:11	5665:11	9	page -> res_unit
FIELD	5665:11	5665:17	10	page -> res_unit
LEAF_NODE	5665:11	5665:11	11	page
LEAF_NODE	5665:15	5665:15	11	->
LEAF_NODE	5665:17	5665:17	11	res_unit
LEAF_NODE	5665:25	5665:25	9	,
ARGUMENT	5665:27	5665:27	9	scale
FIELD	5665:27	5665:27	10	scale
LEAF_NODE	5665:27	5665:27	11	scale
LEAF_NODE	5665:32	5665:32	9	,
ARGUMENT	5665:34	5665:34	9	pwidth
FIELD	5665:34	5665:34	10	pwidth
LEAF_NODE	5665:34	5665:34	11	pwidth
LEAF_NODE	5665:40	5665:40	9	,
ARGUMENT	5665:42	5665:42	9	plength
FIELD	5665:42	5665:42	10	plength
LEAF_NODE	5665:42	5665:42	11	plength
LEAF_NODE	5665:49	5665:49	9	)
LEAF_NODE	5665:50	5665:50	7	;
LEAF_NODE	5666:4	5666:4	5	}
SELECTION	5669:2	5670:4	3	
KEYWORD	5669:2	5669:2	4	if
LEAF_NODE	5669:2	5669:2	5	if
LEAF_NODE	5669:5	5669:5	4	(
CONDITION	5669:6	5669:6	4	page -> mode & PAGE_MODE_MARGINS
EXPR	5669:6	5669:19	5	page -> mode & PAGE_MODE_MARGINS
FIELD	5669:6	5669:12	6	page -> mode
LEAF_NODE	5669:6	5669:6	7	page
LEAF_NODE	5669:10	5669:10	7	->
LEAF_NODE	5669:12	5669:12	7	mode
LEAF_NODE	5669:17	5669:17	6	&
FIELD	5669:19	5669:19	6	PAGE_MODE_MARGINS
LEAF_NODE	5669:19	5669:19	7	PAGE_MODE_MARGINS
LEAF_NODE	5669:36	5669:36	4	)
STATEMENTS	5670:4	5696:4	4	
LEAF_NODE	5670:4	5670:4	5	{
STATEMENTS	5671:4	5689:4	5	
SELECTION	5671:4	5672:6	6	
KEYWORD	5671:4	5671:4	7	if
LEAF_NODE	5671:4	5671:4	8	if
LEAF_NODE	5671:7	5671:7	7	(
CONDITION	5671:8	5671:8	7	page -> res_unit == RESUNIT_INCH || page -> res_unit == RESUNIT_CENTIMETER
EXPR	5671:8	5671:8	8	page -> res_unit == RESUNIT_INCH || page -> res_unit == RESUNIT_CENTIMETER
OR	5671:8	5671:42	9	page -> res_unit == RESUNIT_INCH || page -> res_unit == RESUNIT_CENTIMETER
EXPR	5671:8	5671:26	10	page -> res_unit == RESUNIT_INCH
FIELD	5671:8	5671:14	11	page -> res_unit
LEAF_NODE	5671:8	5671:8	12	page
LEAF_NODE	5671:12	5671:12	12	->
LEAF_NODE	5671:14	5671:14	12	res_unit
EQ_OPERATOR	5671:23	5671:23	11	==
LEAF_NODE	5671:23	5671:23	12	==
FIELD	5671:26	5671:26	11	RESUNIT_INCH
LEAF_NODE	5671:26	5671:26	12	RESUNIT_INCH
LEAF_NODE	5671:39	5671:39	10	||
EXPR	5671:42	5671:60	10	page -> res_unit == RESUNIT_CENTIMETER
FIELD	5671:42	5671:48	11	page -> res_unit
LEAF_NODE	5671:42	5671:42	12	page
LEAF_NODE	5671:46	5671:46	12	->
LEAF_NODE	5671:48	5671:48	12	res_unit
EQ_OPERATOR	5671:57	5671:57	11	==
LEAF_NODE	5671:57	5671:57	12	==
FIELD	5671:60	5671:60	11	RESUNIT_CENTIMETER
LEAF_NODE	5671:60	5671:60	12	RESUNIT_CENTIMETER
LEAF_NODE	5671:78	5671:78	7	)
STATEMENTS	5672:6	5675:6	7	
LEAF_NODE	5672:6	5672:6	8	{
STATEMENTS	5673:6	5674:84	8	
LEAF_NODE	5673:6	5673:6	9	hmargin
LEAF_NODE	5673:14	5673:14	9	=
LEAF_NODE	5673:16	5673:16	9	(
LEAF_NODE	5673:17	5673:17	9	uint32
LEAF_NODE	5673:23	5673:23	9	)
LEAF_NODE	5673:24	5673:24	9	(
LEAF_NODE	5673:25	5673:25	9	page
LEAF_NODE	5673:29	5673:29	9	->
LEAF_NODE	5673:31	5673:31	9	hmargin
LEAF_NODE	5673:39	5673:39	9	*
LEAF_NODE	5673:41	5673:41	9	scale
LEAF_NODE	5673:47	5673:47	9	*
LEAF_NODE	5673:49	5673:49	9	page
LEAF_NODE	5673:53	5673:53	9	->
LEAF_NODE	5673:55	5673:55	9	hres
LEAF_NODE	5673:60	5673:60	9	*
LEAF_NODE	5673:62	5673:62	9	(
LEAF_NODE	5673:63	5673:63	9	(
LEAF_NODE	5673:64	5673:64	9	image
LEAF_NODE	5673:69	5673:69	9	->
LEAF_NODE	5673:71	5673:71	9	bps
LEAF_NODE	5673:75	5673:75	9	+
LEAF_NODE	5673:77	5673:77	9	7
LEAF_NODE	5673:78	5673:78	9	)
LEAF_NODE	5673:79	5673:79	9	/
LEAF_NODE	5673:81	5673:81	9	8
LEAF_NODE	5673:82	5673:82	9	)
LEAF_NODE	5673:83	5673:83	9	)
LEAF_NODE	5673:84	5673:84	9	;
LEAF_NODE	5674:6	5674:6	9	vmargin
LEAF_NODE	5674:14	5674:14	9	=
LEAF_NODE	5674:16	5674:16	9	(
LEAF_NODE	5674:17	5674:17	9	uint32
LEAF_NODE	5674:23	5674:23	9	)
LEAF_NODE	5674:24	5674:24	9	(
LEAF_NODE	5674:25	5674:25	9	page
LEAF_NODE	5674:29	5674:29	9	->
LEAF_NODE	5674:31	5674:31	9	vmargin
LEAF_NODE	5674:39	5674:39	9	*
LEAF_NODE	5674:41	5674:41	9	scale
LEAF_NODE	5674:47	5674:47	9	*
LEAF_NODE	5674:49	5674:49	9	page
LEAF_NODE	5674:53	5674:53	9	->
LEAF_NODE	5674:55	5674:55	9	vres
LEAF_NODE	5674:60	5674:60	9	*
LEAF_NODE	5674:62	5674:62	9	(
LEAF_NODE	5674:63	5674:63	9	(
LEAF_NODE	5674:64	5674:64	9	image
LEAF_NODE	5674:69	5674:69	9	->
LEAF_NODE	5674:71	5674:71	9	bps
LEAF_NODE	5674:75	5674:75	9	+
LEAF_NODE	5674:77	5674:77	9	7
LEAF_NODE	5674:78	5674:78	9	)
LEAF_NODE	5674:79	5674:79	9	/
LEAF_NODE	5674:81	5674:81	9	8
LEAF_NODE	5674:82	5674:82	9	)
LEAF_NODE	5674:83	5674:83	9	)
LEAF_NODE	5674:84	5674:84	9	;
LEAF_NODE	5675:6	5675:6	8	}
SELECTION	5676:4	5677:6	6	
KEYWORD	5676:4	5676:4	7	else
LEAF_NODE	5676:4	5676:4	8	else
STATEMENTS	5677:6	5680:6	7	
LEAF_NODE	5677:6	5677:6	8	{
STATEMENTS	5678:6	5679:71	8	
LEAF_NODE	5678:6	5678:6	9	hmargin
LEAF_NODE	5678:14	5678:14	9	=
LEAF_NODE	5678:16	5678:16	9	(
LEAF_NODE	5678:17	5678:17	9	uint32
LEAF_NODE	5678:23	5678:23	9	)
LEAF_NODE	5678:24	5678:24	9	(
LEAF_NODE	5678:25	5678:25	9	page
LEAF_NODE	5678:29	5678:29	9	->
LEAF_NODE	5678:31	5678:31	9	hmargin
LEAF_NODE	5678:39	5678:39	9	*
LEAF_NODE	5678:41	5678:41	9	scale
LEAF_NODE	5678:47	5678:47	9	*
LEAF_NODE	5678:49	5678:49	9	(
LEAF_NODE	5678:50	5678:50	9	(
LEAF_NODE	5678:51	5678:51	9	image
LEAF_NODE	5678:56	5678:56	9	->
LEAF_NODE	5678:58	5678:58	9	bps
LEAF_NODE	5678:62	5678:62	9	+
LEAF_NODE	5678:64	5678:64	9	7
LEAF_NODE	5678:65	5678:65	9	)
LEAF_NODE	5678:66	5678:66	9	/
LEAF_NODE	5678:68	5678:68	9	8
LEAF_NODE	5678:69	5678:69	9	)
LEAF_NODE	5678:70	5678:70	9	)
LEAF_NODE	5678:71	5678:71	9	;
LEAF_NODE	5679:6	5679:6	9	vmargin
LEAF_NODE	5679:14	5679:14	9	=
LEAF_NODE	5679:16	5679:16	9	(
LEAF_NODE	5679:17	5679:17	9	uint32
LEAF_NODE	5679:23	5679:23	9	)
LEAF_NODE	5679:24	5679:24	9	(
LEAF_NODE	5679:25	5679:25	9	page
LEAF_NODE	5679:29	5679:29	9	->
LEAF_NODE	5679:31	5679:31	9	vmargin
LEAF_NODE	5679:39	5679:39	9	*
LEAF_NODE	5679:41	5679:41	9	scale
LEAF_NODE	5679:47	5679:47	9	*
LEAF_NODE	5679:49	5679:49	9	(
LEAF_NODE	5679:50	5679:50	9	(
LEAF_NODE	5679:51	5679:51	9	image
LEAF_NODE	5679:56	5679:56	9	->
LEAF_NODE	5679:58	5679:58	9	bps
LEAF_NODE	5679:62	5679:62	9	+
LEAF_NODE	5679:64	5679:64	9	7
LEAF_NODE	5679:65	5679:65	9	)
LEAF_NODE	5679:66	5679:66	9	/
LEAF_NODE	5679:68	5679:68	9	8
LEAF_NODE	5679:69	5679:69	9	)
LEAF_NODE	5679:70	5679:70	9	)
LEAF_NODE	5679:71	5679:71	9	;
LEAF_NODE	5680:6	5680:6	8	}
SELECTION	5682:4	5683:6	6	
KEYWORD	5682:4	5682:4	7	if
LEAF_NODE	5682:4	5682:4	8	if
LEAF_NODE	5682:7	5682:7	7	(
CONDITION	5682:8	5682:8	7	( hmargin * 2.0 ) > ( pwidth * page -> hres )
EXPR	5682:8	5682:46	8	( hmargin * 2.0 ) > ( pwidth * page -> hres )
LEAF_NODE	5682:8	5682:8	9	(
FIELD	5682:9	5682:9	9	hmargin
LEAF_NODE	5682:9	5682:9	10	hmargin
LEAF_NODE	5682:17	5682:17	9	*
FIELD	5682:19	5682:19	9	2.0
LEAF_NODE	5682:19	5682:19	10	2.0
LEAF_NODE	5682:22	5682:22	9	)
REL_OPERATOR	5682:24	5682:24	9	>
LEAF_NODE	5682:24	5682:24	10	>
LEAF_NODE	5682:26	5682:26	9	(
FIELD	5682:27	5682:27	9	pwidth
LEAF_NODE	5682:27	5682:27	10	pwidth
LEAF_NODE	5682:34	5682:34	9	*
FIELD	5682:36	5682:42	9	page -> hres
LEAF_NODE	5682:36	5682:36	10	page
LEAF_NODE	5682:40	5682:40	10	->
LEAF_NODE	5682:42	5682:42	10	hres
LEAF_NODE	5682:46	5682:46	9	)
LEAF_NODE	5682:47	5682:47	7	)
STATEMENTS	5683:6	5688:6	7	
LEAF_NODE	5683:6	5683:6	8	{
STATEMENTS	5684:6	5687:6	8	
EXPR_STATEMENT	5684:6	5685:68	9	TIFFError ( "computeOutputPixelOffsets" , "Combined left and right margins exceed page width" ) ;
EXPR	5684:6	5684:6	10	TIFFError ( "computeOutputPixelOffsets" , "Combined left and right margins exceed page width" )
FUNCTION_CALL	5684:6	5685:67	11	TIFFError ( "computeOutputPixelOffsets" , "Combined left and right margins exceed page width" )
CALLEE	5684:6	5684:6	12	TIFFError
LEAF_NODE	5684:6	5684:6	13	TIFFError
LEAF_NODE	5684:15	5684:15	12	(
ARGUMENT	5684:16	5684:16	12	"computeOutputPixelOffsets"
FIELD	5684:16	5684:16	13	"computeOutputPixelOffsets"
LEAF_NODE	5684:16	5684:16	14	"computeOutputPixelOffsets"
LEAF_NODE	5684:43	5684:43	12	,
ARGUMENT	5685:16	5685:16	12	"Combined left and right margins exceed page width"
FIELD	5685:16	5685:16	13	"Combined left and right margins exceed page width"
LEAF_NODE	5685:16	5685:16	14	"Combined left and right margins exceed page width"
LEAF_NODE	5685:67	5685:67	12	)
LEAF_NODE	5685:68	5685:68	10	;
EXPR_STATEMENT	5686:6	5686:26	9	hmargin = ( uint32 ) 0 ;
EXPR	5686:6	5686:6	10	hmargin = ( uint32 ) 0
ASSIGN	5686:6	5686:16	11	hmargin = ( uint32 ) 0
LVAL	5686:6	5686:6	12	hmargin
FIELD	5686:6	5686:6	13	hmargin
LEAF_NODE	5686:6	5686:6	14	hmargin
ASSIGN_OP	5686:14	5686:14	12	=
LEAF_NODE	5686:14	5686:14	13	=
RVAL	5686:16	5686:25	12	( uint32 ) 0
LEAF_NODE	5686:16	5686:16	13	(
TYPE_NAME	5686:17	5686:17	13	uint32
LEAF_NODE	5686:17	5686:17	14	uint32
LEAF_NODE	5686:23	5686:23	13	)
FIELD	5686:25	5686:25	13	0
LEAF_NODE	5686:25	5686:25	14	0
LEAF_NODE	5686:26	5686:26	10	;
JUMP_STATEMENT	5687:6	5687:17	9	return ( - 1 ) ;
KEYWORD	5687:6	5687:6	10	return
LEAF_NODE	5687:6	5687:6	11	return
DESTINATION	5687:13	5687:13	10	( - 1 )
EXPR	5687:13	5687:16	11	( - 1 )
LEAF_NODE	5687:13	5687:13	12	(
UNARY_EXPR	5687:14	5687:15	12	- 1
UNARY_OPERATOR	5687:14	5687:14	13	-
LEAF_NODE	5687:14	5687:14	14	-
FIELD	5687:15	5687:15	13	1
LEAF_NODE	5687:15	5687:15	14	1
LEAF_NODE	5687:16	5687:16	12	)
LEAF_NODE	5687:17	5687:17	10	;
LEAF_NODE	5688:6	5688:6	8	}
SELECTION	5689:4	5690:6	6	
KEYWORD	5689:4	5689:4	7	if
LEAF_NODE	5689:4	5689:4	8	if
LEAF_NODE	5689:7	5689:7	7	(
CONDITION	5689:8	5689:8	7	( vmargin * 2.0 ) > ( plength * page -> vres )
EXPR	5689:8	5689:47	8	( vmargin * 2.0 ) > ( plength * page -> vres )
LEAF_NODE	5689:8	5689:8	9	(
FIELD	5689:9	5689:9	9	vmargin
LEAF_NODE	5689:9	5689:9	10	vmargin
LEAF_NODE	5689:17	5689:17	9	*
FIELD	5689:19	5689:19	9	2.0
LEAF_NODE	5689:19	5689:19	10	2.0
LEAF_NODE	5689:22	5689:22	9	)
REL_OPERATOR	5689:24	5689:24	9	>
LEAF_NODE	5689:24	5689:24	10	>
LEAF_NODE	5689:26	5689:26	9	(
FIELD	5689:27	5689:27	9	plength
LEAF_NODE	5689:27	5689:27	10	plength
LEAF_NODE	5689:35	5689:35	9	*
FIELD	5689:37	5689:43	9	page -> vres
LEAF_NODE	5689:37	5689:37	10	page
LEAF_NODE	5689:41	5689:41	10	->
LEAF_NODE	5689:43	5689:43	10	vres
LEAF_NODE	5689:47	5689:47	9	)
LEAF_NODE	5689:48	5689:48	7	)
STATEMENTS	5690:6	5695:6	7	
LEAF_NODE	5690:6	5690:6	8	{
STATEMENTS	5691:6	5694:6	8	
EXPR_STATEMENT	5691:6	5692:69	9	TIFFError ( "computeOutputPixelOffsets" , "Combined top and bottom margins exceed page length" ) ;
EXPR	5691:6	5691:6	10	TIFFError ( "computeOutputPixelOffsets" , "Combined top and bottom margins exceed page length" )
FUNCTION_CALL	5691:6	5692:68	11	TIFFError ( "computeOutputPixelOffsets" , "Combined top and bottom margins exceed page length" )
CALLEE	5691:6	5691:6	12	TIFFError
LEAF_NODE	5691:6	5691:6	13	TIFFError
LEAF_NODE	5691:15	5691:15	12	(
ARGUMENT	5691:16	5691:16	12	"computeOutputPixelOffsets"
FIELD	5691:16	5691:16	13	"computeOutputPixelOffsets"
LEAF_NODE	5691:16	5691:16	14	"computeOutputPixelOffsets"
LEAF_NODE	5691:43	5691:43	12	,
ARGUMENT	5692:16	5692:16	12	"Combined top and bottom margins exceed page length"
FIELD	5692:16	5692:16	13	"Combined top and bottom margins exceed page length"
LEAF_NODE	5692:16	5692:16	14	"Combined top and bottom margins exceed page length"
LEAF_NODE	5692:68	5692:68	12	)
LEAF_NODE	5692:69	5692:69	10	;
EXPR_STATEMENT	5693:6	5693:26	9	vmargin = ( uint32 ) 0 ;
EXPR	5693:6	5693:6	10	vmargin = ( uint32 ) 0
ASSIGN	5693:6	5693:16	11	vmargin = ( uint32 ) 0
LVAL	5693:6	5693:6	12	vmargin
FIELD	5693:6	5693:6	13	vmargin
LEAF_NODE	5693:6	5693:6	14	vmargin
ASSIGN_OP	5693:14	5693:14	12	=
LEAF_NODE	5693:14	5693:14	13	=
RVAL	5693:16	5693:25	12	( uint32 ) 0
LEAF_NODE	5693:16	5693:16	13	(
TYPE_NAME	5693:17	5693:17	13	uint32
LEAF_NODE	5693:17	5693:17	14	uint32
LEAF_NODE	5693:23	5693:23	13	)
FIELD	5693:25	5693:25	13	0
LEAF_NODE	5693:25	5693:25	14	0
LEAF_NODE	5693:26	5693:26	10	;
JUMP_STATEMENT	5694:6	5694:17	9	return ( - 1 ) ;
KEYWORD	5694:6	5694:6	10	return
LEAF_NODE	5694:6	5694:6	11	return
DESTINATION	5694:13	5694:13	10	( - 1 )
EXPR	5694:13	5694:16	11	( - 1 )
LEAF_NODE	5694:13	5694:13	12	(
UNARY_EXPR	5694:14	5694:15	12	- 1
UNARY_OPERATOR	5694:14	5694:14	13	-
LEAF_NODE	5694:14	5694:14	14	-
FIELD	5694:15	5694:15	13	1
LEAF_NODE	5694:15	5694:15	14	1
LEAF_NODE	5694:16	5694:16	12	)
LEAF_NODE	5694:17	5694:17	10	;
LEAF_NODE	5695:6	5695:6	8	}
LEAF_NODE	5696:4	5696:4	5	}
SELECTION	5697:2	5698:4	3	
KEYWORD	5697:2	5697:2	4	else
LEAF_NODE	5697:2	5697:2	5	else
STATEMENTS	5698:4	5701:4	4	
LEAF_NODE	5698:4	5698:4	5	{
STATEMENTS	5699:4	5700:4	5	
EXPR_STATEMENT	5699:4	5699:15	6	hmargin = 0 ;
EXPR	5699:4	5699:4	7	hmargin = 0
ASSIGN	5699:4	5699:14	8	hmargin = 0
LVAL	5699:4	5699:4	9	hmargin
FIELD	5699:4	5699:4	10	hmargin
LEAF_NODE	5699:4	5699:4	11	hmargin
ASSIGN_OP	5699:12	5699:12	9	=
LEAF_NODE	5699:12	5699:12	10	=
RVAL	5699:14	5699:14	9	0
FIELD	5699:14	5699:14	10	0
LEAF_NODE	5699:14	5699:14	11	0
LEAF_NODE	5699:15	5699:15	7	;
EXPR_STATEMENT	5700:4	5700:15	6	vmargin = 0 ;
EXPR	5700:4	5700:4	7	vmargin = 0
ASSIGN	5700:4	5700:14	8	vmargin = 0
LVAL	5700:4	5700:4	9	vmargin
FIELD	5700:4	5700:4	10	vmargin
LEAF_NODE	5700:4	5700:4	11	vmargin
ASSIGN_OP	5700:12	5700:12	9	=
LEAF_NODE	5700:12	5700:12	10	=
RVAL	5700:14	5700:14	9	0
FIELD	5700:14	5700:14	10	0
LEAF_NODE	5700:14	5700:14	11	0
LEAF_NODE	5700:15	5700:15	7	;
LEAF_NODE	5701:4	5701:4	5	}
SELECTION	5703:2	5704:4	3	
KEYWORD	5703:2	5703:2	4	if
LEAF_NODE	5703:2	5703:2	5	if
LEAF_NODE	5703:5	5703:5	4	(
CONDITION	5703:6	5703:6	4	page -> mode & PAGE_MODE_ROWSCOLS
EXPR	5703:6	5703:19	5	page -> mode & PAGE_MODE_ROWSCOLS
FIELD	5703:6	5703:12	6	page -> mode
LEAF_NODE	5703:6	5703:6	7	page
LEAF_NODE	5703:10	5703:10	7	->
LEAF_NODE	5703:12	5703:12	7	mode
LEAF_NODE	5703:17	5703:17	6	&
FIELD	5703:19	5703:19	6	PAGE_MODE_ROWSCOLS
LEAF_NODE	5703:19	5703:19	7	PAGE_MODE_ROWSCOLS
LEAF_NODE	5703:38	5703:38	4	)
STATEMENTS	5704:4	5712:4	4	
LEAF_NODE	5704:4	5704:4	5	{
STATEMENTS	5706:4	5711:4	5	
SELECTION	5706:4	5707:6	6	
KEYWORD	5706:4	5706:4	7	if
LEAF_NODE	5706:4	5706:4	8	if
LEAF_NODE	5706:7	5706:7	7	(
CONDITION	5706:8	5706:8	7	page -> mode & PAGE_MODE_MARGINS
EXPR	5706:8	5706:21	8	page -> mode & PAGE_MODE_MARGINS
FIELD	5706:8	5706:14	9	page -> mode
LEAF_NODE	5706:8	5706:8	10	page
LEAF_NODE	5706:12	5706:12	10	->
LEAF_NODE	5706:14	5706:14	10	mode
LEAF_NODE	5706:19	5706:19	9	&
FIELD	5706:21	5706:21	9	PAGE_MODE_MARGINS
LEAF_NODE	5706:21	5706:21	10	PAGE_MODE_MARGINS
LEAF_NODE	5706:38	5706:38	7	)
STATEMENTS	5707:6	5707:6	7	
EXPR_STATEMENT	5707:6	5708:65	8	TIFFError ( "computeOutputPixelOffsets" , "Output margins cannot be specified with rows and columns" ) ;
EXPR	5707:6	5707:6	9	TIFFError ( "computeOutputPixelOffsets" , "Output margins cannot be specified with rows and columns" )
FUNCTION_CALL	5707:6	5708:64	10	TIFFError ( "computeOutputPixelOffsets" , "Output margins cannot be specified with rows and columns" )
CALLEE	5707:6	5707:6	11	TIFFError
LEAF_NODE	5707:6	5707:6	12	TIFFError
LEAF_NODE	5707:15	5707:15	11	(
ARGUMENT	5707:16	5707:16	11	"computeOutputPixelOffsets"
FIELD	5707:16	5707:16	12	"computeOutputPixelOffsets"
LEAF_NODE	5707:16	5707:16	13	"computeOutputPixelOffsets"
LEAF_NODE	5707:43	5707:43	11	,
ARGUMENT	5708:6	5708:6	11	"Output margins cannot be specified with rows and columns"
FIELD	5708:6	5708:6	12	"Output margins cannot be specified with rows and columns"
LEAF_NODE	5708:6	5708:6	13	"Output margins cannot be specified with rows and columns"
LEAF_NODE	5708:64	5708:64	11	)
LEAF_NODE	5708:65	5708:65	9	;
EXPR_STATEMENT	5710:4	5710:45	6	owidth = TIFFhowmany ( iwidth , page -> cols ) ;
EXPR	5710:4	5710:4	7	owidth = TIFFhowmany ( iwidth , page -> cols )
ASSIGN	5710:4	5710:14	8	owidth = TIFFhowmany ( iwidth , page -> cols )
LVAL	5710:4	5710:4	9	owidth
FIELD	5710:4	5710:4	10	owidth
LEAF_NODE	5710:4	5710:4	11	owidth
ASSIGN_OP	5710:12	5710:12	9	=
LEAF_NODE	5710:12	5710:12	10	=
RVAL	5710:14	5710:14	9	TIFFhowmany ( iwidth , page -> cols )
FUNCTION_CALL	5710:14	5710:44	10	TIFFhowmany ( iwidth , page -> cols )
CALLEE	5710:14	5710:14	11	TIFFhowmany
LEAF_NODE	5710:14	5710:14	12	TIFFhowmany
LEAF_NODE	5710:25	5710:25	11	(
ARGUMENT	5710:26	5710:26	11	iwidth
FIELD	5710:26	5710:26	12	iwidth
LEAF_NODE	5710:26	5710:26	13	iwidth
LEAF_NODE	5710:32	5710:32	11	,
ARGUMENT	5710:34	5710:34	11	page -> cols
FIELD	5710:34	5710:40	12	page -> cols
LEAF_NODE	5710:34	5710:34	13	page
LEAF_NODE	5710:38	5710:38	13	->
LEAF_NODE	5710:40	5710:40	13	cols
LEAF_NODE	5710:44	5710:44	11	)
LEAF_NODE	5710:45	5710:45	7	;
EXPR_STATEMENT	5711:4	5711:46	6	olength = TIFFhowmany ( ilength , page -> rows ) ;
EXPR	5711:4	5711:4	7	olength = TIFFhowmany ( ilength , page -> rows )
ASSIGN	5711:4	5711:14	8	olength = TIFFhowmany ( ilength , page -> rows )
LVAL	5711:4	5711:4	9	olength
FIELD	5711:4	5711:4	10	olength
LEAF_NODE	5711:4	5711:4	11	olength
ASSIGN_OP	5711:12	5711:12	9	=
LEAF_NODE	5711:12	5711:12	10	=
RVAL	5711:14	5711:14	9	TIFFhowmany ( ilength , page -> rows )
FUNCTION_CALL	5711:14	5711:45	10	TIFFhowmany ( ilength , page -> rows )
CALLEE	5711:14	5711:14	11	TIFFhowmany
LEAF_NODE	5711:14	5711:14	12	TIFFhowmany
LEAF_NODE	5711:25	5711:25	11	(
ARGUMENT	5711:26	5711:26	11	ilength
FIELD	5711:26	5711:26	12	ilength
LEAF_NODE	5711:26	5711:26	13	ilength
LEAF_NODE	5711:33	5711:33	11	,
ARGUMENT	5711:35	5711:35	11	page -> rows
FIELD	5711:35	5711:41	12	page -> rows
LEAF_NODE	5711:35	5711:35	13	page
LEAF_NODE	5711:39	5711:39	13	->
LEAF_NODE	5711:41	5711:41	13	rows
LEAF_NODE	5711:45	5711:45	11	)
LEAF_NODE	5711:46	5711:46	7	;
LEAF_NODE	5712:4	5712:4	5	}
SELECTION	5713:2	5714:4	3	
KEYWORD	5713:2	5713:2	4	else
LEAF_NODE	5713:2	5713:2	5	else
STATEMENTS	5714:4	5725:4	4	
LEAF_NODE	5714:4	5714:4	5	{
STATEMENTS	5715:4	5720:4	5	
SELECTION	5715:4	5716:6	6	
KEYWORD	5715:4	5715:4	7	if
LEAF_NODE	5715:4	5715:4	8	if
LEAF_NODE	5715:7	5715:7	7	(
CONDITION	5715:8	5715:8	7	page -> mode & PAGE_MODE_PAPERSIZE
EXPR	5715:8	5715:21	8	page -> mode & PAGE_MODE_PAPERSIZE
FIELD	5715:8	5715:14	9	page -> mode
LEAF_NODE	5715:8	5715:8	10	page
LEAF_NODE	5715:12	5715:12	10	->
LEAF_NODE	5715:14	5715:14	10	mode
LEAF_NODE	5715:19	5715:19	9	&
FIELD	5715:21	5715:21	9	PAGE_MODE_PAPERSIZE
LEAF_NODE	5715:21	5715:21	10	PAGE_MODE_PAPERSIZE
LEAF_NODE	5715:41	5715:41	7	)
STATEMENTS	5716:6	5719:6	7	
LEAF_NODE	5716:6	5716:6	8	{
STATEMENTS	5717:6	5718:6	8	
EXPR_STATEMENT	5717:6	5717:63	9	owidth = ( uint32 ) ( ( pwidth * page -> hres ) - ( hmargin * 2 ) ) ;
EXPR	5717:6	5717:6	10	owidth = ( uint32 ) ( ( pwidth * page -> hres ) - ( hmargin * 2 ) )
ASSIGN	5717:6	5717:16	11	owidth = ( uint32 ) ( ( pwidth * page -> hres ) - ( hmargin * 2 ) )
LVAL	5717:6	5717:6	12	owidth
FIELD	5717:6	5717:6	13	owidth
LEAF_NODE	5717:6	5717:6	14	owidth
ASSIGN_OP	5717:14	5717:14	12	=
LEAF_NODE	5717:14	5717:14	13	=
RVAL	5717:16	5717:62	12	( uint32 ) ( ( pwidth * page -> hres ) - ( hmargin * 2 ) )
LEAF_NODE	5717:16	5717:16	13	(
TYPE_NAME	5717:17	5717:17	13	uint32
LEAF_NODE	5717:17	5717:17	14	uint32
LEAF_NODE	5717:23	5717:23	13	)
LEAF_NODE	5717:24	5717:24	13	(
LEAF_NODE	5717:25	5717:25	13	(
FIELD	5717:26	5717:26	13	pwidth
LEAF_NODE	5717:26	5717:26	14	pwidth
LEAF_NODE	5717:33	5717:33	13	*
FIELD	5717:35	5717:41	13	page -> hres
LEAF_NODE	5717:35	5717:35	14	page
LEAF_NODE	5717:39	5717:39	14	->
LEAF_NODE	5717:41	5717:41	14	hres
LEAF_NODE	5717:45	5717:45	13	)
LEAF_NODE	5717:47	5717:47	13	-
LEAF_NODE	5717:49	5717:49	13	(
FIELD	5717:50	5717:50	13	hmargin
LEAF_NODE	5717:50	5717:50	14	hmargin
LEAF_NODE	5717:58	5717:58	13	*
FIELD	5717:60	5717:60	13	2
LEAF_NODE	5717:60	5717:60	14	2
LEAF_NODE	5717:61	5717:61	13	)
LEAF_NODE	5717:62	5717:62	13	)
LEAF_NODE	5717:63	5717:63	10	;
EXPR_STATEMENT	5718:6	5718:64	9	olength = ( uint32 ) ( ( plength * page -> vres ) - ( vmargin * 2 ) ) ;
EXPR	5718:6	5718:6	10	olength = ( uint32 ) ( ( plength * page -> vres ) - ( vmargin * 2 ) )
ASSIGN	5718:6	5718:16	11	olength = ( uint32 ) ( ( plength * page -> vres ) - ( vmargin * 2 ) )
LVAL	5718:6	5718:6	12	olength
FIELD	5718:6	5718:6	13	olength
LEAF_NODE	5718:6	5718:6	14	olength
ASSIGN_OP	5718:14	5718:14	12	=
LEAF_NODE	5718:14	5718:14	13	=
RVAL	5718:16	5718:63	12	( uint32 ) ( ( plength * page -> vres ) - ( vmargin * 2 ) )
LEAF_NODE	5718:16	5718:16	13	(
TYPE_NAME	5718:17	5718:17	13	uint32
LEAF_NODE	5718:17	5718:17	14	uint32
LEAF_NODE	5718:23	5718:23	13	)
LEAF_NODE	5718:24	5718:24	13	(
LEAF_NODE	5718:25	5718:25	13	(
FIELD	5718:26	5718:26	13	plength
LEAF_NODE	5718:26	5718:26	14	plength
LEAF_NODE	5718:34	5718:34	13	*
FIELD	5718:36	5718:42	13	page -> vres
LEAF_NODE	5718:36	5718:36	14	page
LEAF_NODE	5718:40	5718:40	14	->
LEAF_NODE	5718:42	5718:42	14	vres
LEAF_NODE	5718:46	5718:46	13	)
LEAF_NODE	5718:48	5718:48	13	-
LEAF_NODE	5718:50	5718:50	13	(
FIELD	5718:51	5718:51	13	vmargin
LEAF_NODE	5718:51	5718:51	14	vmargin
LEAF_NODE	5718:59	5718:59	13	*
FIELD	5718:61	5718:61	13	2
LEAF_NODE	5718:61	5718:61	14	2
LEAF_NODE	5718:62	5718:62	13	)
LEAF_NODE	5718:63	5718:63	13	)
LEAF_NODE	5718:64	5718:64	10	;
LEAF_NODE	5719:6	5719:6	8	}
SELECTION	5720:4	5721:6	6	
KEYWORD	5720:4	5720:4	7	else
LEAF_NODE	5720:4	5720:4	8	else
STATEMENTS	5721:6	5724:6	7	
LEAF_NODE	5721:6	5721:6	8	{
STATEMENTS	5722:6	5723:62	8	
LEAF_NODE	5722:6	5722:6	9	owidth
LEAF_NODE	5722:13	5722:13	9	=
LEAF_NODE	5722:15	5722:15	9	(
LEAF_NODE	5722:16	5722:16	9	uint32
LEAF_NODE	5722:22	5722:22	9	)
LEAF_NODE	5722:23	5722:23	9	(
LEAF_NODE	5722:24	5722:24	9	iwidth
LEAF_NODE	5722:31	5722:31	9	-
LEAF_NODE	5722:33	5722:33	9	(
LEAF_NODE	5722:34	5722:34	9	hmargin
LEAF_NODE	5722:42	5722:42	9	*
LEAF_NODE	5722:44	5722:44	9	2
LEAF_NODE	5722:46	5722:46	9	*
LEAF_NODE	5722:48	5722:48	9	page
LEAF_NODE	5722:52	5722:52	9	->
LEAF_NODE	5722:54	5722:54	9	hres
LEAF_NODE	5722:58	5722:58	9	)
LEAF_NODE	5722:59	5722:59	9	)
LEAF_NODE	5722:60	5722:60	9	;
LEAF_NODE	5723:6	5723:6	9	olength
LEAF_NODE	5723:14	5723:14	9	=
LEAF_NODE	5723:16	5723:16	9	(
LEAF_NODE	5723:17	5723:17	9	uint32
LEAF_NODE	5723:23	5723:23	9	)
LEAF_NODE	5723:24	5723:24	9	(
LEAF_NODE	5723:25	5723:25	9	ilength
LEAF_NODE	5723:33	5723:33	9	-
LEAF_NODE	5723:35	5723:35	9	(
LEAF_NODE	5723:36	5723:36	9	vmargin
LEAF_NODE	5723:44	5723:44	9	*
LEAF_NODE	5723:46	5723:46	9	2
LEAF_NODE	5723:48	5723:48	9	*
LEAF_NODE	5723:50	5723:50	9	page
LEAF_NODE	5723:54	5723:54	9	->
LEAF_NODE	5723:56	5723:56	9	vres
LEAF_NODE	5723:60	5723:60	9	)
LEAF_NODE	5723:61	5723:61	9	)
LEAF_NODE	5723:62	5723:62	9	;
LEAF_NODE	5724:6	5724:6	8	}
LEAF_NODE	5725:4	5725:4	5	}
SELECTION	5727:2	5728:4	3	
KEYWORD	5727:2	5727:2	4	if
LEAF_NODE	5727:2	5727:2	5	if
LEAF_NODE	5727:5	5727:5	4	(
CONDITION	5727:6	5727:6	4	owidth > iwidth
EXPR	5727:6	5727:15	5	owidth > iwidth
FIELD	5727:6	5727:6	6	owidth
LEAF_NODE	5727:6	5727:6	7	owidth
REL_OPERATOR	5727:13	5727:13	6	>
LEAF_NODE	5727:13	5727:13	7	>
FIELD	5727:15	5727:15	6	iwidth
LEAF_NODE	5727:15	5727:15	7	iwidth
LEAF_NODE	5727:21	5727:21	4	)
STATEMENTS	5728:4	5728:4	4	
EXPR_STATEMENT	5728:4	5728:19	5	owidth = iwidth ;
EXPR	5728:4	5728:4	6	owidth = iwidth
ASSIGN	5728:4	5728:13	7	owidth = iwidth
LVAL	5728:4	5728:4	8	owidth
FIELD	5728:4	5728:4	9	owidth
LEAF_NODE	5728:4	5728:4	10	owidth
ASSIGN_OP	5728:11	5728:11	8	=
LEAF_NODE	5728:11	5728:11	9	=
RVAL	5728:13	5728:13	8	iwidth
FIELD	5728:13	5728:13	9	iwidth
LEAF_NODE	5728:13	5728:13	10	iwidth
LEAF_NODE	5728:19	5728:19	6	;
SELECTION	5729:2	5730:4	3	
KEYWORD	5729:2	5729:2	4	if
LEAF_NODE	5729:2	5729:2	5	if
LEAF_NODE	5729:5	5729:5	4	(
CONDITION	5729:6	5729:6	4	olength > ilength
EXPR	5729:6	5729:16	5	olength > ilength
FIELD	5729:6	5729:6	6	olength
LEAF_NODE	5729:6	5729:6	7	olength
REL_OPERATOR	5729:14	5729:14	6	>
LEAF_NODE	5729:14	5729:14	7	>
FIELD	5729:16	5729:16	6	ilength
LEAF_NODE	5729:16	5729:16	7	ilength
LEAF_NODE	5729:23	5729:23	4	)
STATEMENTS	5730:4	5730:4	4	
EXPR_STATEMENT	5730:4	5730:21	5	olength = ilength ;
EXPR	5730:4	5730:4	6	olength = ilength
ASSIGN	5730:4	5730:14	7	olength = ilength
LVAL	5730:4	5730:4	8	olength
FIELD	5730:4	5730:4	9	olength
LEAF_NODE	5730:4	5730:4	10	olength
ASSIGN_OP	5730:12	5730:12	8	=
LEAF_NODE	5730:12	5730:12	9	=
RVAL	5730:14	5730:14	8	ilength
FIELD	5730:14	5730:14	9	ilength
LEAF_NODE	5730:14	5730:14	10	ilength
LEAF_NODE	5730:21	5730:21	6	;
SELECTION	5733:2	5734:4	3	
KEYWORD	5733:2	5733:2	4	switch
LEAF_NODE	5733:2	5733:2	5	switch
LEAF_NODE	5733:9	5733:9	4	(
CONDITION	5733:10	5733:10	4	page -> orient
EXPR	5733:10	5733:10	5	page -> orient
FIELD	5733:10	5733:16	6	page -> orient
LEAF_NODE	5733:10	5733:10	7	page
LEAF_NODE	5733:14	5733:14	7	->
LEAF_NODE	5733:16	5733:16	7	orient
LEAF_NODE	5733:22	5733:22	4	)
STATEMENTS	5734:4	5773:4	4	
LEAF_NODE	5734:4	5734:4	5	{
STATEMENTS	5735:4	5764:9	5	
LABEL	5735:4	5735:25	6	case ORIENTATION_NONE :
LEAF_NODE	5735:4	5735:4	7	case
LEAF_NODE	5735:9	5735:9	7	ORIENTATION_NONE
LEAF_NODE	5735:25	5735:25	7	:
LABEL	5736:4	5736:29	6	case ORIENTATION_PORTRAIT :
LEAF_NODE	5736:4	5736:4	7	case
LEAF_NODE	5736:9	5736:9	7	ORIENTATION_PORTRAIT
LEAF_NODE	5736:29	5736:29	7	:
EXPR_STATEMENT	5737:9	5737:44	6	ocols = TIFFhowmany ( iwidth , owidth ) ;
EXPR	5737:9	5737:9	7	ocols = TIFFhowmany ( iwidth , owidth )
ASSIGN	5737:9	5737:17	8	ocols = TIFFhowmany ( iwidth , owidth )
LVAL	5737:9	5737:9	9	ocols
FIELD	5737:9	5737:9	10	ocols
LEAF_NODE	5737:9	5737:9	11	ocols
ASSIGN_OP	5737:15	5737:15	9	=
LEAF_NODE	5737:15	5737:15	10	=
RVAL	5737:17	5737:17	9	TIFFhowmany ( iwidth , owidth )
FUNCTION_CALL	5737:17	5737:43	10	TIFFhowmany ( iwidth , owidth )
CALLEE	5737:17	5737:17	11	TIFFhowmany
LEAF_NODE	5737:17	5737:17	12	TIFFhowmany
LEAF_NODE	5737:28	5737:28	11	(
ARGUMENT	5737:29	5737:29	11	iwidth
FIELD	5737:29	5737:29	12	iwidth
LEAF_NODE	5737:29	5737:29	13	iwidth
LEAF_NODE	5737:35	5737:35	11	,
ARGUMENT	5737:37	5737:37	11	owidth
FIELD	5737:37	5737:37	12	owidth
LEAF_NODE	5737:37	5737:37	13	owidth
LEAF_NODE	5737:43	5737:43	11	)
LEAF_NODE	5737:44	5737:44	7	;
EXPR_STATEMENT	5738:9	5738:46	6	orows = TIFFhowmany ( ilength , olength ) ;
EXPR	5738:9	5738:9	7	orows = TIFFhowmany ( ilength , olength )
ASSIGN	5738:9	5738:17	8	orows = TIFFhowmany ( ilength , olength )
LVAL	5738:9	5738:9	9	orows
FIELD	5738:9	5738:9	10	orows
LEAF_NODE	5738:9	5738:9	11	orows
ASSIGN_OP	5738:15	5738:15	9	=
LEAF_NODE	5738:15	5738:15	10	=
RVAL	5738:17	5738:17	9	TIFFhowmany ( ilength , olength )
FUNCTION_CALL	5738:17	5738:45	10	TIFFhowmany ( ilength , olength )
CALLEE	5738:17	5738:17	11	TIFFhowmany
LEAF_NODE	5738:17	5738:17	12	TIFFhowmany
LEAF_NODE	5738:28	5738:28	11	(
ARGUMENT	5738:29	5738:29	11	ilength
FIELD	5738:29	5738:29	12	ilength
LEAF_NODE	5738:29	5738:29	13	ilength
LEAF_NODE	5738:36	5738:36	11	,
ARGUMENT	5738:38	5738:38	11	olength
FIELD	5738:38	5738:38	12	olength
LEAF_NODE	5738:38	5738:38	13	olength
LEAF_NODE	5738:45	5738:45	11	)
LEAF_NODE	5738:46	5738:46	7	;
JUMP_STATEMENT	5740:9	5740:14	6	break DESTINATION ;
KEYWORD	5740:9	5740:9	7	break
LEAF_NODE	5740:9	5740:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5740:14	5740:14	7	;
LABEL	5742:4	5742:30	6	case ORIENTATION_LANDSCAPE :
LEAF_NODE	5742:4	5742:4	7	case
LEAF_NODE	5742:9	5742:9	7	ORIENTATION_LANDSCAPE
LEAF_NODE	5742:30	5742:30	7	:
EXPR_STATEMENT	5743:9	5743:45	6	ocols = TIFFhowmany ( iwidth , olength ) ;
EXPR	5743:9	5743:9	7	ocols = TIFFhowmany ( iwidth , olength )
ASSIGN	5743:9	5743:17	8	ocols = TIFFhowmany ( iwidth , olength )
LVAL	5743:9	5743:9	9	ocols
FIELD	5743:9	5743:9	10	ocols
LEAF_NODE	5743:9	5743:9	11	ocols
ASSIGN_OP	5743:15	5743:15	9	=
LEAF_NODE	5743:15	5743:15	10	=
RVAL	5743:17	5743:17	9	TIFFhowmany ( iwidth , olength )
FUNCTION_CALL	5743:17	5743:44	10	TIFFhowmany ( iwidth , olength )
CALLEE	5743:17	5743:17	11	TIFFhowmany
LEAF_NODE	5743:17	5743:17	12	TIFFhowmany
LEAF_NODE	5743:28	5743:28	11	(
ARGUMENT	5743:29	5743:29	11	iwidth
FIELD	5743:29	5743:29	12	iwidth
LEAF_NODE	5743:29	5743:29	13	iwidth
LEAF_NODE	5743:35	5743:35	11	,
ARGUMENT	5743:37	5743:37	11	olength
FIELD	5743:37	5743:37	12	olength
LEAF_NODE	5743:37	5743:37	13	olength
LEAF_NODE	5743:44	5743:44	11	)
LEAF_NODE	5743:45	5743:45	7	;
EXPR_STATEMENT	5744:9	5744:45	6	orows = TIFFhowmany ( ilength , owidth ) ;
EXPR	5744:9	5744:9	7	orows = TIFFhowmany ( ilength , owidth )
ASSIGN	5744:9	5744:17	8	orows = TIFFhowmany ( ilength , owidth )
LVAL	5744:9	5744:9	9	orows
FIELD	5744:9	5744:9	10	orows
LEAF_NODE	5744:9	5744:9	11	orows
ASSIGN_OP	5744:15	5744:15	9	=
LEAF_NODE	5744:15	5744:15	10	=
RVAL	5744:17	5744:17	9	TIFFhowmany ( ilength , owidth )
FUNCTION_CALL	5744:17	5744:44	10	TIFFhowmany ( ilength , owidth )
CALLEE	5744:17	5744:17	11	TIFFhowmany
LEAF_NODE	5744:17	5744:17	12	TIFFhowmany
LEAF_NODE	5744:28	5744:28	11	(
ARGUMENT	5744:29	5744:29	11	ilength
FIELD	5744:29	5744:29	12	ilength
LEAF_NODE	5744:29	5744:29	13	ilength
LEAF_NODE	5744:36	5744:36	11	,
ARGUMENT	5744:38	5744:38	11	owidth
FIELD	5744:38	5744:38	12	owidth
LEAF_NODE	5744:38	5744:38	13	owidth
LEAF_NODE	5744:44	5744:44	11	)
LEAF_NODE	5744:45	5744:45	7	;
EXPR_STATEMENT	5745:9	5745:21	6	x1 = olength ;
EXPR	5745:9	5745:9	7	x1 = olength
ASSIGN	5745:9	5745:14	8	x1 = olength
LVAL	5745:9	5745:9	9	x1
FIELD	5745:9	5745:9	10	x1
LEAF_NODE	5745:9	5745:9	11	x1
ASSIGN_OP	5745:12	5745:12	9	=
LEAF_NODE	5745:12	5745:12	10	=
RVAL	5745:14	5745:14	9	olength
FIELD	5745:14	5745:14	10	olength
LEAF_NODE	5745:14	5745:14	11	olength
LEAF_NODE	5745:21	5745:21	7	;
EXPR_STATEMENT	5746:9	5746:25	6	olength = owidth ;
EXPR	5746:9	5746:9	7	olength = owidth
ASSIGN	5746:9	5746:19	8	olength = owidth
LVAL	5746:9	5746:9	9	olength
FIELD	5746:9	5746:9	10	olength
LEAF_NODE	5746:9	5746:9	11	olength
ASSIGN_OP	5746:17	5746:17	9	=
LEAF_NODE	5746:17	5746:17	10	=
RVAL	5746:19	5746:19	9	owidth
FIELD	5746:19	5746:19	10	owidth
LEAF_NODE	5746:19	5746:19	11	owidth
LEAF_NODE	5746:25	5746:25	7	;
EXPR_STATEMENT	5747:9	5747:20	6	owidth = x1 ;
EXPR	5747:9	5747:9	7	owidth = x1
ASSIGN	5747:9	5747:18	8	owidth = x1
LVAL	5747:9	5747:9	9	owidth
FIELD	5747:9	5747:9	10	owidth
LEAF_NODE	5747:9	5747:9	11	owidth
ASSIGN_OP	5747:16	5747:16	9	=
LEAF_NODE	5747:16	5747:16	10	=
RVAL	5747:18	5747:18	9	x1
FIELD	5747:18	5747:18	10	x1
LEAF_NODE	5747:18	5747:18	11	x1
LEAF_NODE	5747:20	5747:20	7	;
JUMP_STATEMENT	5749:9	5749:14	6	break DESTINATION ;
KEYWORD	5749:9	5749:9	7	break
LEAF_NODE	5749:9	5749:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5749:14	5749:14	7	;
LABEL	5751:4	5751:25	6	case ORIENTATION_AUTO :
LEAF_NODE	5751:4	5751:4	7	case
LEAF_NODE	5751:9	5751:9	7	ORIENTATION_AUTO
LEAF_NODE	5751:25	5751:25	7	:
LABEL	5752:4	5752:11	6	default :
LEAF_NODE	5752:4	5752:4	7	default
LEAF_NODE	5752:11	5752:11	7	:
EXPR_STATEMENT	5753:9	5753:41	6	x1 = TIFFhowmany ( iwidth , owidth ) ;
EXPR	5753:9	5753:9	7	x1 = TIFFhowmany ( iwidth , owidth )
ASSIGN	5753:9	5753:14	8	x1 = TIFFhowmany ( iwidth , owidth )
LVAL	5753:9	5753:9	9	x1
FIELD	5753:9	5753:9	10	x1
LEAF_NODE	5753:9	5753:9	11	x1
ASSIGN_OP	5753:12	5753:12	9	=
LEAF_NODE	5753:12	5753:12	10	=
RVAL	5753:14	5753:14	9	TIFFhowmany ( iwidth , owidth )
FUNCTION_CALL	5753:14	5753:40	10	TIFFhowmany ( iwidth , owidth )
CALLEE	5753:14	5753:14	11	TIFFhowmany
LEAF_NODE	5753:14	5753:14	12	TIFFhowmany
LEAF_NODE	5753:25	5753:25	11	(
ARGUMENT	5753:26	5753:26	11	iwidth
FIELD	5753:26	5753:26	12	iwidth
LEAF_NODE	5753:26	5753:26	13	iwidth
LEAF_NODE	5753:32	5753:32	11	,
ARGUMENT	5753:34	5753:34	11	owidth
FIELD	5753:34	5753:34	12	owidth
LEAF_NODE	5753:34	5753:34	13	owidth
LEAF_NODE	5753:40	5753:40	11	)
LEAF_NODE	5753:41	5753:41	7	;
EXPR_STATEMENT	5754:9	5754:43	6	x2 = TIFFhowmany ( ilength , olength ) ;
EXPR	5754:9	5754:9	7	x2 = TIFFhowmany ( ilength , olength )
ASSIGN	5754:9	5754:14	8	x2 = TIFFhowmany ( ilength , olength )
LVAL	5754:9	5754:9	9	x2
FIELD	5754:9	5754:9	10	x2
LEAF_NODE	5754:9	5754:9	11	x2
ASSIGN_OP	5754:12	5754:12	9	=
LEAF_NODE	5754:12	5754:12	10	=
RVAL	5754:14	5754:14	9	TIFFhowmany ( ilength , olength )
FUNCTION_CALL	5754:14	5754:42	10	TIFFhowmany ( ilength , olength )
CALLEE	5754:14	5754:14	11	TIFFhowmany
LEAF_NODE	5754:14	5754:14	12	TIFFhowmany
LEAF_NODE	5754:25	5754:25	11	(
ARGUMENT	5754:26	5754:26	11	ilength
FIELD	5754:26	5754:26	12	ilength
LEAF_NODE	5754:26	5754:26	13	ilength
LEAF_NODE	5754:33	5754:33	11	,
ARGUMENT	5754:35	5754:35	11	olength
FIELD	5754:35	5754:35	12	olength
LEAF_NODE	5754:35	5754:35	13	olength
LEAF_NODE	5754:42	5754:42	11	)
LEAF_NODE	5754:43	5754:43	7	;
EXPR_STATEMENT	5755:9	5755:42	6	y1 = TIFFhowmany ( iwidth , olength ) ;
EXPR	5755:9	5755:9	7	y1 = TIFFhowmany ( iwidth , olength )
ASSIGN	5755:9	5755:14	8	y1 = TIFFhowmany ( iwidth , olength )
LVAL	5755:9	5755:9	9	y1
FIELD	5755:9	5755:9	10	y1
LEAF_NODE	5755:9	5755:9	11	y1
ASSIGN_OP	5755:12	5755:12	9	=
LEAF_NODE	5755:12	5755:12	10	=
RVAL	5755:14	5755:14	9	TIFFhowmany ( iwidth , olength )
FUNCTION_CALL	5755:14	5755:41	10	TIFFhowmany ( iwidth , olength )
CALLEE	5755:14	5755:14	11	TIFFhowmany
LEAF_NODE	5755:14	5755:14	12	TIFFhowmany
LEAF_NODE	5755:25	5755:25	11	(
ARGUMENT	5755:26	5755:26	11	iwidth
FIELD	5755:26	5755:26	12	iwidth
LEAF_NODE	5755:26	5755:26	13	iwidth
LEAF_NODE	5755:32	5755:32	11	,
ARGUMENT	5755:34	5755:34	11	olength
FIELD	5755:34	5755:34	12	olength
LEAF_NODE	5755:34	5755:34	13	olength
LEAF_NODE	5755:41	5755:41	11	)
LEAF_NODE	5755:42	5755:42	7	;
EXPR_STATEMENT	5756:9	5756:42	6	y2 = TIFFhowmany ( ilength , owidth ) ;
EXPR	5756:9	5756:9	7	y2 = TIFFhowmany ( ilength , owidth )
ASSIGN	5756:9	5756:14	8	y2 = TIFFhowmany ( ilength , owidth )
LVAL	5756:9	5756:9	9	y2
FIELD	5756:9	5756:9	10	y2
LEAF_NODE	5756:9	5756:9	11	y2
ASSIGN_OP	5756:12	5756:12	9	=
LEAF_NODE	5756:12	5756:12	10	=
RVAL	5756:14	5756:14	9	TIFFhowmany ( ilength , owidth )
FUNCTION_CALL	5756:14	5756:41	10	TIFFhowmany ( ilength , owidth )
CALLEE	5756:14	5756:14	11	TIFFhowmany
LEAF_NODE	5756:14	5756:14	12	TIFFhowmany
LEAF_NODE	5756:25	5756:25	11	(
ARGUMENT	5756:26	5756:26	11	ilength
FIELD	5756:26	5756:26	12	ilength
LEAF_NODE	5756:26	5756:26	13	ilength
LEAF_NODE	5756:33	5756:33	11	,
ARGUMENT	5756:35	5756:35	11	owidth
FIELD	5756:35	5756:35	12	owidth
LEAF_NODE	5756:35	5756:35	13	owidth
LEAF_NODE	5756:41	5756:41	11	)
LEAF_NODE	5756:42	5756:42	7	;
SELECTION	5758:9	5759:11	6	
KEYWORD	5758:9	5758:9	7	if
LEAF_NODE	5758:9	5758:9	8	if
LEAF_NODE	5758:12	5758:12	7	(
CONDITION	5758:14	5758:14	7	( x1 * x2 ) < ( y1 * y2 )
EXPR	5758:14	5758:34	8	( x1 * x2 ) < ( y1 * y2 )
LEAF_NODE	5758:14	5758:14	9	(
FIELD	5758:15	5758:15	9	x1
LEAF_NODE	5758:15	5758:15	10	x1
LEAF_NODE	5758:18	5758:18	9	*
FIELD	5758:20	5758:20	9	x2
LEAF_NODE	5758:20	5758:20	10	x2
LEAF_NODE	5758:22	5758:22	9	)
REL_OPERATOR	5758:24	5758:24	9	<
LEAF_NODE	5758:24	5758:24	10	<
LEAF_NODE	5758:26	5758:26	9	(
FIELD	5758:27	5758:27	9	y1
LEAF_NODE	5758:27	5758:27	10	y1
LEAF_NODE	5758:30	5758:30	9	*
FIELD	5758:32	5758:32	9	y2
LEAF_NODE	5758:32	5758:32	10	y2
LEAF_NODE	5758:34	5758:34	9	)
LEAF_NODE	5758:35	5758:35	7	)
STATEMENTS	5759:11	5763:4	7	
LEAF_NODE	5759:11	5759:11	8	{
STATEMENTS	5760:11	5761:11	8	
EXPR_STATEMENT	5760:11	5760:21	9	ocols = x1 ;
EXPR	5760:11	5760:11	10	ocols = x1
ASSIGN	5760:11	5760:19	11	ocols = x1
LVAL	5760:11	5760:11	12	ocols
FIELD	5760:11	5760:11	13	ocols
LEAF_NODE	5760:11	5760:11	14	ocols
ASSIGN_OP	5760:17	5760:17	12	=
LEAF_NODE	5760:17	5760:17	13	=
RVAL	5760:19	5760:19	12	x1
FIELD	5760:19	5760:19	13	x1
LEAF_NODE	5760:19	5760:19	14	x1
LEAF_NODE	5760:21	5760:21	10	;
EXPR_STATEMENT	5761:11	5761:21	9	orows = x2 ;
EXPR	5761:11	5761:11	10	orows = x2
ASSIGN	5761:11	5761:19	11	orows = x2
LVAL	5761:11	5761:11	12	orows
FIELD	5761:11	5761:11	13	orows
LEAF_NODE	5761:11	5761:11	14	orows
ASSIGN_OP	5761:17	5761:17	12	=
LEAF_NODE	5761:17	5761:17	13	=
RVAL	5761:19	5761:19	12	x2
FIELD	5761:19	5761:19	13	x2
LEAF_NODE	5761:19	5761:19	14	x2
LEAF_NODE	5761:21	5761:21	10	;
LEAF_NODE	5763:4	5763:4	8	}
SELECTION	5764:9	5765:11	6	
KEYWORD	5764:9	5764:9	7	else
LEAF_NODE	5764:9	5764:9	8	else
STATEMENTS	5765:11	5772:11	7	
LEAF_NODE	5765:11	5765:11	8	{
STATEMENTS	5766:11	5770:11	8	
EXPR_STATEMENT	5766:11	5766:21	9	ocols = y1 ;
EXPR	5766:11	5766:11	10	ocols = y1
ASSIGN	5766:11	5766:19	11	ocols = y1
LVAL	5766:11	5766:11	12	ocols
FIELD	5766:11	5766:11	13	ocols
LEAF_NODE	5766:11	5766:11	14	ocols
ASSIGN_OP	5766:17	5766:17	12	=
LEAF_NODE	5766:17	5766:17	13	=
RVAL	5766:19	5766:19	12	y1
FIELD	5766:19	5766:19	13	y1
LEAF_NODE	5766:19	5766:19	14	y1
LEAF_NODE	5766:21	5766:21	10	;
EXPR_STATEMENT	5767:11	5767:21	9	orows = y2 ;
EXPR	5767:11	5767:11	10	orows = y2
ASSIGN	5767:11	5767:19	11	orows = y2
LVAL	5767:11	5767:11	12	orows
FIELD	5767:11	5767:11	13	orows
LEAF_NODE	5767:11	5767:11	14	orows
ASSIGN_OP	5767:17	5767:17	12	=
LEAF_NODE	5767:17	5767:17	13	=
RVAL	5767:19	5767:19	12	y2
FIELD	5767:19	5767:19	13	y2
LEAF_NODE	5767:19	5767:19	14	y2
LEAF_NODE	5767:21	5767:21	10	;
EXPR_STATEMENT	5768:11	5768:23	9	x1 = olength ;
EXPR	5768:11	5768:11	10	x1 = olength
ASSIGN	5768:11	5768:16	11	x1 = olength
LVAL	5768:11	5768:11	12	x1
FIELD	5768:11	5768:11	13	x1
LEAF_NODE	5768:11	5768:11	14	x1
ASSIGN_OP	5768:14	5768:14	12	=
LEAF_NODE	5768:14	5768:14	13	=
RVAL	5768:16	5768:16	12	olength
FIELD	5768:16	5768:16	13	olength
LEAF_NODE	5768:16	5768:16	14	olength
LEAF_NODE	5768:23	5768:23	10	;
EXPR_STATEMENT	5769:11	5769:27	9	olength = owidth ;
EXPR	5769:11	5769:11	10	olength = owidth
ASSIGN	5769:11	5769:21	11	olength = owidth
LVAL	5769:11	5769:11	12	olength
FIELD	5769:11	5769:11	13	olength
LEAF_NODE	5769:11	5769:11	14	olength
ASSIGN_OP	5769:19	5769:19	12	=
LEAF_NODE	5769:19	5769:19	13	=
RVAL	5769:21	5769:21	12	owidth
FIELD	5769:21	5769:21	13	owidth
LEAF_NODE	5769:21	5769:21	14	owidth
LEAF_NODE	5769:27	5769:27	10	;
EXPR_STATEMENT	5770:11	5770:22	9	owidth = x1 ;
EXPR	5770:11	5770:11	10	owidth = x1
ASSIGN	5770:11	5770:20	11	owidth = x1
LVAL	5770:11	5770:11	12	owidth
FIELD	5770:11	5770:11	13	owidth
LEAF_NODE	5770:11	5770:11	14	owidth
ASSIGN_OP	5770:18	5770:18	12	=
LEAF_NODE	5770:18	5770:18	13	=
RVAL	5770:20	5770:20	12	x1
FIELD	5770:20	5770:20	13	x1
LEAF_NODE	5770:20	5770:20	14	x1
LEAF_NODE	5770:22	5770:22	10	;
LEAF_NODE	5772:11	5772:11	8	}
LEAF_NODE	5773:4	5773:4	5	}
SELECTION	5775:2	5776:4	3	
KEYWORD	5775:2	5775:2	4	if
LEAF_NODE	5775:2	5775:2	5	if
LEAF_NODE	5775:5	5775:5	4	(
CONDITION	5775:6	5775:6	4	ocols < 1
EXPR	5775:6	5775:14	5	ocols < 1
FIELD	5775:6	5775:6	6	ocols
LEAF_NODE	5775:6	5775:6	7	ocols
REL_OPERATOR	5775:12	5775:12	6	<
LEAF_NODE	5775:12	5775:12	7	<
FIELD	5775:14	5775:14	6	1
LEAF_NODE	5775:14	5775:14	7	1
LEAF_NODE	5775:15	5775:15	4	)
STATEMENTS	5776:4	5776:4	4	
EXPR_STATEMENT	5776:4	5776:13	5	ocols = 1 ;
EXPR	5776:4	5776:4	6	ocols = 1
ASSIGN	5776:4	5776:12	7	ocols = 1
LVAL	5776:4	5776:4	8	ocols
FIELD	5776:4	5776:4	9	ocols
LEAF_NODE	5776:4	5776:4	10	ocols
ASSIGN_OP	5776:10	5776:10	8	=
LEAF_NODE	5776:10	5776:10	9	=
RVAL	5776:12	5776:12	8	1
FIELD	5776:12	5776:12	9	1
LEAF_NODE	5776:12	5776:12	10	1
LEAF_NODE	5776:13	5776:13	6	;
SELECTION	5777:2	5778:4	3	
KEYWORD	5777:2	5777:2	4	if
LEAF_NODE	5777:2	5777:2	5	if
LEAF_NODE	5777:5	5777:5	4	(
CONDITION	5777:6	5777:6	4	orows < 1
EXPR	5777:6	5777:14	5	orows < 1
FIELD	5777:6	5777:6	6	orows
LEAF_NODE	5777:6	5777:6	7	orows
REL_OPERATOR	5777:12	5777:12	6	<
LEAF_NODE	5777:12	5777:12	7	<
FIELD	5777:14	5777:14	6	1
LEAF_NODE	5777:14	5777:14	7	1
LEAF_NODE	5777:15	5777:15	4	)
STATEMENTS	5778:4	5778:4	4	
EXPR_STATEMENT	5778:4	5778:13	5	orows = 1 ;
EXPR	5778:4	5778:4	6	orows = 1
ASSIGN	5778:4	5778:12	7	orows = 1
LVAL	5778:4	5778:4	8	orows
FIELD	5778:4	5778:4	9	orows
LEAF_NODE	5778:4	5778:4	10	orows
ASSIGN_OP	5778:10	5778:10	8	=
LEAF_NODE	5778:10	5778:10	9	=
RVAL	5778:12	5778:12	8	1
FIELD	5778:12	5778:12	9	1
LEAF_NODE	5778:12	5778:12	10	1
LEAF_NODE	5778:13	5778:13	6	;
SELECTION	5781:2	5782:4	3	
KEYWORD	5781:2	5781:2	4	if
LEAF_NODE	5781:2	5781:2	5	if
LEAF_NODE	5781:5	5781:5	4	(
CONDITION	5781:6	5781:6	4	page -> rows < 1
EXPR	5781:6	5781:19	5	page -> rows < 1
FIELD	5781:6	5781:12	6	page -> rows
LEAF_NODE	5781:6	5781:6	7	page
LEAF_NODE	5781:10	5781:10	7	->
LEAF_NODE	5781:12	5781:12	7	rows
REL_OPERATOR	5781:17	5781:17	6	<
LEAF_NODE	5781:17	5781:17	7	<
FIELD	5781:19	5781:19	6	1
LEAF_NODE	5781:19	5781:19	7	1
LEAF_NODE	5781:20	5781:20	4	)
STATEMENTS	5782:4	5782:4	4	
EXPR_STATEMENT	5782:4	5782:22	5	page -> rows = orows ;
EXPR	5782:4	5782:4	6	page -> rows = orows
ASSIGN	5782:4	5782:17	7	page -> rows = orows
LVAL	5782:4	5782:4	8	page -> rows
FIELD	5782:4	5782:10	9	page -> rows
LEAF_NODE	5782:4	5782:4	10	page
LEAF_NODE	5782:8	5782:8	10	->
LEAF_NODE	5782:10	5782:10	10	rows
ASSIGN_OP	5782:15	5782:15	8	=
LEAF_NODE	5782:15	5782:15	9	=
RVAL	5782:17	5782:17	8	orows
FIELD	5782:17	5782:17	9	orows
LEAF_NODE	5782:17	5782:17	10	orows
LEAF_NODE	5782:22	5782:22	6	;
SELECTION	5783:2	5784:4	3	
KEYWORD	5783:2	5783:2	4	if
LEAF_NODE	5783:2	5783:2	5	if
LEAF_NODE	5783:5	5783:5	4	(
CONDITION	5783:6	5783:6	4	page -> cols < 1
EXPR	5783:6	5783:19	5	page -> cols < 1
FIELD	5783:6	5783:12	6	page -> cols
LEAF_NODE	5783:6	5783:6	7	page
LEAF_NODE	5783:10	5783:10	7	->
LEAF_NODE	5783:12	5783:12	7	cols
REL_OPERATOR	5783:17	5783:17	6	<
LEAF_NODE	5783:17	5783:17	7	<
FIELD	5783:19	5783:19	6	1
LEAF_NODE	5783:19	5783:19	7	1
LEAF_NODE	5783:20	5783:20	4	)
STATEMENTS	5784:4	5784:4	4	
EXPR_STATEMENT	5784:4	5784:22	5	page -> cols = ocols ;
EXPR	5784:4	5784:4	6	page -> cols = ocols
ASSIGN	5784:4	5784:17	7	page -> cols = ocols
LVAL	5784:4	5784:4	8	page -> cols
FIELD	5784:4	5784:10	9	page -> cols
LEAF_NODE	5784:4	5784:4	10	page
LEAF_NODE	5784:8	5784:8	10	->
LEAF_NODE	5784:10	5784:10	10	cols
ASSIGN_OP	5784:15	5784:15	8	=
LEAF_NODE	5784:15	5784:15	9	=
RVAL	5784:17	5784:17	8	ocols
FIELD	5784:17	5784:17	9	ocols
LEAF_NODE	5784:17	5784:17	10	ocols
LEAF_NODE	5784:22	5784:22	6	;
EXPR_STATEMENT	5786:2	5786:61	3	line_bytes = TIFFhowmany8 ( owidth * image -> bps ) * image -> spp ;
EXPR	5786:2	5786:2	4	line_bytes = TIFFhowmany8 ( owidth * image -> bps ) * image -> spp
ASSIGN	5786:2	5786:15	5	line_bytes = TIFFhowmany8 ( owidth * image -> bps ) * image -> spp
LVAL	5786:2	5786:2	6	line_bytes
FIELD	5786:2	5786:2	7	line_bytes
LEAF_NODE	5786:2	5786:2	8	line_bytes
ASSIGN_OP	5786:13	5786:13	6	=
LEAF_NODE	5786:13	5786:13	7	=
RVAL	5786:15	5786:51	6	TIFFhowmany8 ( owidth * image -> bps ) * image -> spp
FUNCTION_CALL	5786:15	5786:47	7	TIFFhowmany8 ( owidth * image -> bps )
CALLEE	5786:15	5786:15	8	TIFFhowmany8
LEAF_NODE	5786:15	5786:15	9	TIFFhowmany8
LEAF_NODE	5786:27	5786:27	8	(
ARGUMENT	5786:28	5786:37	8	owidth * image -> bps
FIELD	5786:28	5786:28	9	owidth
LEAF_NODE	5786:28	5786:28	10	owidth
LEAF_NODE	5786:35	5786:35	9	*
FIELD	5786:37	5786:44	9	image -> bps
LEAF_NODE	5786:37	5786:37	10	image
LEAF_NODE	5786:42	5786:42	10	->
LEAF_NODE	5786:44	5786:44	10	bps
LEAF_NODE	5786:47	5786:47	8	)
LEAF_NODE	5786:49	5786:49	7	*
FIELD	5786:51	5786:58	7	image -> spp
LEAF_NODE	5786:51	5786:51	8	image
LEAF_NODE	5786:56	5786:56	8	->
LEAF_NODE	5786:58	5786:58	8	spp
LEAF_NODE	5786:61	5786:61	4	;
SELECTION	5788:2	5789:3	3	
KEYWORD	5788:2	5788:2	4	if
LEAF_NODE	5788:2	5788:2	5	if
LEAF_NODE	5788:5	5788:5	4	(
CONDITION	5788:6	5788:6	4	( page -> rows * page -> cols ) > MAX_SECTIONS
EXPR	5788:6	5788:34	5	( page -> rows * page -> cols ) > MAX_SECTIONS
LEAF_NODE	5788:6	5788:6	6	(
FIELD	5788:7	5788:13	6	page -> rows
LEAF_NODE	5788:7	5788:7	7	page
LEAF_NODE	5788:11	5788:11	7	->
LEAF_NODE	5788:13	5788:13	7	rows
LEAF_NODE	5788:18	5788:18	6	*
FIELD	5788:20	5788:26	6	page -> cols
LEAF_NODE	5788:20	5788:20	7	page
LEAF_NODE	5788:24	5788:24	7	->
LEAF_NODE	5788:26	5788:26	7	cols
LEAF_NODE	5788:30	5788:30	6	)
REL_OPERATOR	5788:32	5788:32	6	>
LEAF_NODE	5788:32	5788:32	7	>
FIELD	5788:34	5788:34	6	MAX_SECTIONS
LEAF_NODE	5788:34	5788:34	7	MAX_SECTIONS
LEAF_NODE	5788:46	5788:46	4	)
STATEMENTS	5789:3	5793:3	4	
LEAF_NODE	5789:3	5789:3	5	{
STATEMENTS	5790:3	5792:3	5	
EXPR_STATEMENT	5790:3	5791:89	6	TIFFError ( "computeOutputPixelOffsets" , "Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections" ) ;
EXPR	5790:3	5790:3	7	TIFFError ( "computeOutputPixelOffsets" , "Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections" )
FUNCTION_CALL	5790:3	5791:88	8	TIFFError ( "computeOutputPixelOffsets" , "Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections" )
CALLEE	5790:3	5790:3	9	TIFFError
LEAF_NODE	5790:3	5790:3	10	TIFFError
LEAF_NODE	5790:12	5790:12	9	(
ARGUMENT	5790:13	5790:13	9	"computeOutputPixelOffsets"
FIELD	5790:13	5790:13	10	"computeOutputPixelOffsets"
LEAF_NODE	5790:13	5790:13	11	"computeOutputPixelOffsets"
LEAF_NODE	5790:40	5790:40	9	,
ARGUMENT	5791:6	5791:6	9	"Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections"
FIELD	5791:6	5791:6	10	"Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections"
LEAF_NODE	5791:6	5791:6	11	"Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections"
LEAF_NODE	5791:88	5791:88	9	)
LEAF_NODE	5791:89	5791:89	7	;
JUMP_STATEMENT	5792:3	5792:14	6	return ( - 1 ) ;
KEYWORD	5792:3	5792:3	7	return
LEAF_NODE	5792:3	5792:3	8	return
DESTINATION	5792:10	5792:10	7	( - 1 )
EXPR	5792:10	5792:13	8	( - 1 )
LEAF_NODE	5792:10	5792:10	9	(
UNARY_EXPR	5792:11	5792:12	9	- 1
UNARY_OPERATOR	5792:11	5792:11	10	-
LEAF_NODE	5792:11	5792:11	11	-
FIELD	5792:12	5792:12	10	1
LEAF_NODE	5792:12	5792:12	11	1
LEAF_NODE	5792:13	5792:13	9	)
LEAF_NODE	5792:14	5792:14	7	;
LEAF_NODE	5793:3	5793:3	5	}
ITERATION	5796:2	5797:4	3	
KEYWORD	5796:2	5796:2	4	for
LEAF_NODE	5796:2	5796:2	5	for
LEAF_NODE	5796:6	5796:6	4	(
FOR_INIT	5796:7	5796:40	4	k = 0 , i = 0 && k <= MAX_SECTIONS ;
EXPR	5796:7	5796:14	5	k = 0 , i = 0 && k <= MAX_SECTIONS
ASSIGN	5796:7	5796:11	6	k = 0
LVAL	5796:7	5796:7	7	k
FIELD	5796:7	5796:7	8	k
LEAF_NODE	5796:7	5796:7	9	k
ASSIGN_OP	5796:9	5796:9	7	=
LEAF_NODE	5796:9	5796:9	8	=
RVAL	5796:11	5796:11	7	0
FIELD	5796:11	5796:11	8	0
LEAF_NODE	5796:11	5796:11	9	0
LEAF_NODE	5796:12	5796:12	6	,
ASSIGN	5796:14	5796:18	6	i = 0 && k <= MAX_SECTIONS
LVAL	5796:14	5796:14	7	i
FIELD	5796:14	5796:14	8	i
LEAF_NODE	5796:14	5796:14	9	i
ASSIGN_OP	5796:16	5796:16	7	=
LEAF_NODE	5796:16	5796:16	8	=
RVAL	5796:18	5796:18	7	0 && k <= MAX_SECTIONS
AND	5796:18	5796:23	8	0 && k <= MAX_SECTIONS
EXPR	5796:18	5796:18	9	0
FIELD	5796:18	5796:18	10	0
LEAF_NODE	5796:18	5796:18	11	0
LEAF_NODE	5796:20	5796:20	9	&&
EXPR	5796:23	5796:28	9	k <= MAX_SECTIONS
FIELD	5796:23	5796:23	10	k
LEAF_NODE	5796:23	5796:23	11	k
REL_OPERATOR	5796:25	5796:25	10	<=
LEAF_NODE	5796:25	5796:25	11	<=
FIELD	5796:28	5796:28	10	MAX_SECTIONS
LEAF_NODE	5796:28	5796:28	11	MAX_SECTIONS
LEAF_NODE	5796:40	5796:40	5	;
CONDITION	5796:42	5796:42	4	i < orows
EXPR	5796:42	5796:46	5	i < orows
FIELD	5796:42	5796:42	6	i
LEAF_NODE	5796:42	5796:42	7	i
REL_OPERATOR	5796:44	5796:44	6	<
LEAF_NODE	5796:44	5796:44	7	<
FIELD	5796:46	5796:46	6	orows
LEAF_NODE	5796:46	5796:46	7	orows
LEAF_NODE	5796:51	5796:51	4	;
FOR_EXPR	5796:53	5796:53	4	i ++
EXPR	5796:53	5796:53	5	i ++
FIELD	5796:53	5796:54	6	i ++
LEAF_NODE	5796:53	5796:53	7	i
LEAF_NODE	5796:54	5796:54	7	++
LEAF_NODE	5796:56	5796:56	4	)
STATEMENTS	5797:4	5816:4	4	
LEAF_NODE	5797:4	5797:4	5	{
STATEMENTS	5798:4	5802:4	5	
EXPR_STATEMENT	5798:4	5798:30	6	y1 = ( uint32 ) ( olength * i ) ;
EXPR	5798:4	5798:4	7	y1 = ( uint32 ) ( olength * i )
ASSIGN	5798:4	5798:9	8	y1 = ( uint32 ) ( olength * i )
LVAL	5798:4	5798:4	9	y1
FIELD	5798:4	5798:4	10	y1
LEAF_NODE	5798:4	5798:4	11	y1
ASSIGN_OP	5798:7	5798:7	9	=
LEAF_NODE	5798:7	5798:7	10	=
RVAL	5798:9	5798:29	9	( uint32 ) ( olength * i )
LEAF_NODE	5798:9	5798:9	10	(
TYPE_NAME	5798:10	5798:10	10	uint32
LEAF_NODE	5798:10	5798:10	11	uint32
LEAF_NODE	5798:16	5798:16	10	)
LEAF_NODE	5798:17	5798:17	10	(
FIELD	5798:18	5798:18	10	olength
LEAF_NODE	5798:18	5798:18	11	olength
LEAF_NODE	5798:26	5798:26	10	*
FIELD	5798:28	5798:28	10	i
LEAF_NODE	5798:28	5798:28	11	i
LEAF_NODE	5798:29	5798:29	10	)
LEAF_NODE	5798:30	5798:30	7	;
EXPR_STATEMENT	5799:4	5799:41	6	y2 = ( uint32 ) ( olength * ( i + 1 ) - 1 ) ;
EXPR	5799:4	5799:4	7	y2 = ( uint32 ) ( olength * ( i + 1 ) - 1 )
ASSIGN	5799:4	5799:9	8	y2 = ( uint32 ) ( olength * ( i + 1 ) - 1 )
LVAL	5799:4	5799:4	9	y2
FIELD	5799:4	5799:4	10	y2
LEAF_NODE	5799:4	5799:4	11	y2
ASSIGN_OP	5799:7	5799:7	9	=
LEAF_NODE	5799:7	5799:7	10	=
RVAL	5799:9	5799:40	9	( uint32 ) ( olength * ( i + 1 ) - 1 )
LEAF_NODE	5799:9	5799:9	10	(
TYPE_NAME	5799:10	5799:10	10	uint32
LEAF_NODE	5799:10	5799:10	11	uint32
LEAF_NODE	5799:16	5799:16	10	)
LEAF_NODE	5799:17	5799:17	10	(
FIELD	5799:18	5799:18	10	olength
LEAF_NODE	5799:18	5799:18	11	olength
LEAF_NODE	5799:26	5799:26	10	*
LEAF_NODE	5799:28	5799:28	10	(
FIELD	5799:29	5799:29	10	i
LEAF_NODE	5799:29	5799:29	11	i
LEAF_NODE	5799:31	5799:31	10	+
FIELD	5799:34	5799:34	10	1
LEAF_NODE	5799:34	5799:34	11	1
LEAF_NODE	5799:35	5799:35	10	)
LEAF_NODE	5799:37	5799:37	10	-
FIELD	5799:39	5799:39	10	1
LEAF_NODE	5799:39	5799:39	11	1
LEAF_NODE	5799:40	5799:40	10	)
LEAF_NODE	5799:41	5799:41	7	;
SELECTION	5800:4	5801:6	6	
KEYWORD	5800:4	5800:4	7	if
LEAF_NODE	5800:4	5800:4	8	if
LEAF_NODE	5800:7	5800:7	7	(
CONDITION	5800:8	5800:8	7	y2 >= ilength
EXPR	5800:8	5800:14	8	y2 >= ilength
FIELD	5800:8	5800:8	9	y2
LEAF_NODE	5800:8	5800:8	10	y2
REL_OPERATOR	5800:11	5800:11	9	>=
LEAF_NODE	5800:11	5800:11	10	>=
FIELD	5800:14	5800:14	9	ilength
LEAF_NODE	5800:14	5800:14	10	ilength
LEAF_NODE	5800:21	5800:21	7	)
STATEMENTS	5801:6	5801:6	7	
EXPR_STATEMENT	5801:6	5801:22	8	y2 = ilength - 1 ;
EXPR	5801:6	5801:6	9	y2 = ilength - 1
ASSIGN	5801:6	5801:11	10	y2 = ilength - 1
LVAL	5801:6	5801:6	11	y2
FIELD	5801:6	5801:6	12	y2
LEAF_NODE	5801:6	5801:6	13	y2
ASSIGN_OP	5801:9	5801:9	11	=
LEAF_NODE	5801:9	5801:9	12	=
RVAL	5801:11	5801:21	11	ilength - 1
FIELD	5801:11	5801:11	12	ilength
LEAF_NODE	5801:11	5801:11	13	ilength
LEAF_NODE	5801:19	5801:19	12	-
FIELD	5801:21	5801:21	12	1
LEAF_NODE	5801:21	5801:21	13	1
LEAF_NODE	5801:22	5801:22	9	;
ITERATION	5802:4	5803:6	6	
KEYWORD	5802:4	5802:4	7	for
LEAF_NODE	5802:4	5802:4	8	for
LEAF_NODE	5802:8	5802:8	7	(
FOR_INIT	5802:9	5802:14	7	j = 0 ;
EXPR	5802:9	5802:9	8	j = 0
ASSIGN	5802:9	5802:13	9	j = 0
LVAL	5802:9	5802:9	10	j
FIELD	5802:9	5802:9	11	j
LEAF_NODE	5802:9	5802:9	12	j
ASSIGN_OP	5802:11	5802:11	10	=
LEAF_NODE	5802:11	5802:11	11	=
RVAL	5802:13	5802:13	10	0
FIELD	5802:13	5802:13	11	0
LEAF_NODE	5802:13	5802:13	12	0
LEAF_NODE	5802:14	5802:14	8	;
CONDITION	5802:16	5802:16	7	j < ocols
EXPR	5802:16	5802:20	8	j < ocols
FIELD	5802:16	5802:16	9	j
LEAF_NODE	5802:16	5802:16	10	j
REL_OPERATOR	5802:18	5802:18	9	<
LEAF_NODE	5802:18	5802:18	10	<
FIELD	5802:20	5802:20	9	ocols
LEAF_NODE	5802:20	5802:20	10	ocols
LEAF_NODE	5802:25	5802:25	7	;
FOR_EXPR	5802:27	5802:27	7	j ++ , k ++
EXPR	5802:27	5802:32	8	j ++ , k ++
FIELD	5802:27	5802:28	9	j ++
LEAF_NODE	5802:27	5802:27	10	j
LEAF_NODE	5802:28	5802:28	10	++
LEAF_NODE	5802:30	5802:30	9	,
FIELD	5802:32	5802:33	9	k ++
LEAF_NODE	5802:32	5802:32	10	k
LEAF_NODE	5802:33	5802:33	10	++
LEAF_NODE	5802:35	5802:35	7	)
STATEMENTS	5803:6	5815:6	7	
LEAF_NODE	5803:6	5803:6	8	{
STATEMENTS	5804:6	5814:6	8	
EXPR_STATEMENT	5804:6	5804:31	9	x1 = ( uint32 ) ( owidth * j ) ;
EXPR	5804:6	5804:6	10	x1 = ( uint32 ) ( owidth * j )
ASSIGN	5804:6	5804:11	11	x1 = ( uint32 ) ( owidth * j )
LVAL	5804:6	5804:6	12	x1
FIELD	5804:6	5804:6	13	x1
LEAF_NODE	5804:6	5804:6	14	x1
ASSIGN_OP	5804:9	5804:9	12	=
LEAF_NODE	5804:9	5804:9	13	=
RVAL	5804:11	5804:30	12	( uint32 ) ( owidth * j )
LEAF_NODE	5804:11	5804:11	13	(
TYPE_NAME	5804:12	5804:12	13	uint32
LEAF_NODE	5804:12	5804:12	14	uint32
LEAF_NODE	5804:18	5804:18	13	)
LEAF_NODE	5804:19	5804:19	13	(
FIELD	5804:20	5804:20	13	owidth
LEAF_NODE	5804:20	5804:20	14	owidth
LEAF_NODE	5804:27	5804:27	13	*
FIELD	5804:29	5804:29	13	j
LEAF_NODE	5804:29	5804:29	14	j
LEAF_NODE	5804:30	5804:30	13	)
LEAF_NODE	5804:31	5804:31	10	;
EXPR_STATEMENT	5805:6	5805:41	9	x2 = ( uint32 ) ( owidth * ( j + 1 ) - 1 ) ;
EXPR	5805:6	5805:6	10	x2 = ( uint32 ) ( owidth * ( j + 1 ) - 1 )
ASSIGN	5805:6	5805:11	11	x2 = ( uint32 ) ( owidth * ( j + 1 ) - 1 )
LVAL	5805:6	5805:6	12	x2
FIELD	5805:6	5805:6	13	x2
LEAF_NODE	5805:6	5805:6	14	x2
ASSIGN_OP	5805:9	5805:9	12	=
LEAF_NODE	5805:9	5805:9	13	=
RVAL	5805:11	5805:40	12	( uint32 ) ( owidth * ( j + 1 ) - 1 )
LEAF_NODE	5805:11	5805:11	13	(
TYPE_NAME	5805:12	5805:12	13	uint32
LEAF_NODE	5805:12	5805:12	14	uint32
LEAF_NODE	5805:18	5805:18	13	)
LEAF_NODE	5805:19	5805:19	13	(
FIELD	5805:20	5805:20	13	owidth
LEAF_NODE	5805:20	5805:20	14	owidth
LEAF_NODE	5805:27	5805:27	13	*
LEAF_NODE	5805:29	5805:29	13	(
FIELD	5805:30	5805:30	13	j
LEAF_NODE	5805:30	5805:30	14	j
LEAF_NODE	5805:32	5805:32	13	+
FIELD	5805:34	5805:34	13	1
LEAF_NODE	5805:34	5805:34	14	1
LEAF_NODE	5805:35	5805:35	13	)
LEAF_NODE	5805:37	5805:37	13	-
FIELD	5805:39	5805:39	13	1
LEAF_NODE	5805:39	5805:39	14	1
LEAF_NODE	5805:40	5805:40	13	)
LEAF_NODE	5805:41	5805:41	10	;
SELECTION	5806:6	5807:8	9	
KEYWORD	5806:6	5806:6	10	if
LEAF_NODE	5806:6	5806:6	11	if
LEAF_NODE	5806:9	5806:9	10	(
CONDITION	5806:10	5806:10	10	x2 >= iwidth
EXPR	5806:10	5806:16	11	x2 >= iwidth
FIELD	5806:10	5806:10	12	x2
LEAF_NODE	5806:10	5806:10	13	x2
REL_OPERATOR	5806:13	5806:13	12	>=
LEAF_NODE	5806:13	5806:13	13	>=
FIELD	5806:16	5806:16	12	iwidth
LEAF_NODE	5806:16	5806:16	13	iwidth
LEAF_NODE	5806:22	5806:22	10	)
STATEMENTS	5807:8	5807:8	10	
EXPR_STATEMENT	5807:8	5807:23	11	x2 = iwidth - 1 ;
EXPR	5807:8	5807:8	12	x2 = iwidth - 1
ASSIGN	5807:8	5807:13	13	x2 = iwidth - 1
LVAL	5807:8	5807:8	14	x2
FIELD	5807:8	5807:8	15	x2
LEAF_NODE	5807:8	5807:8	16	x2
ASSIGN_OP	5807:11	5807:11	14	=
LEAF_NODE	5807:11	5807:11	15	=
RVAL	5807:13	5807:22	14	iwidth - 1
FIELD	5807:13	5807:13	15	iwidth
LEAF_NODE	5807:13	5807:13	16	iwidth
LEAF_NODE	5807:20	5807:20	15	-
FIELD	5807:22	5807:22	15	1
LEAF_NODE	5807:22	5807:22	16	1
LEAF_NODE	5807:23	5807:23	12	;
EXPR_STATEMENT	5808:6	5808:25	9	sections [ k ] . x1 = x1 ;
EXPR	5808:6	5808:6	10	sections [ k ] . x1 = x1
ASSIGN	5808:6	5808:23	11	sections [ k ] . x1 = x1
LVAL	5808:6	5808:6	12	sections [ k ] . x1
FIELD	5808:6	5808:18	13	sections [ k ] . x1
LEAF_NODE	5808:6	5808:6	14	sections
LEAF_NODE	5808:14	5808:14	14	[
EXPR	5808:15	5808:15	14	k
FIELD	5808:15	5808:15	15	k
LEAF_NODE	5808:15	5808:15	16	k
LEAF_NODE	5808:16	5808:16	14	]
LEAF_NODE	5808:17	5808:17	14	.
LEAF_NODE	5808:18	5808:18	14	x1
ASSIGN_OP	5808:21	5808:21	12	=
LEAF_NODE	5808:21	5808:21	13	=
RVAL	5808:23	5808:23	12	x1
FIELD	5808:23	5808:23	13	x1
LEAF_NODE	5808:23	5808:23	14	x1
LEAF_NODE	5808:25	5808:25	10	;
EXPR_STATEMENT	5809:6	5809:25	9	sections [ k ] . x2 = x2 ;
EXPR	5809:6	5809:6	10	sections [ k ] . x2 = x2
ASSIGN	5809:6	5809:23	11	sections [ k ] . x2 = x2
LVAL	5809:6	5809:6	12	sections [ k ] . x2
FIELD	5809:6	5809:18	13	sections [ k ] . x2
LEAF_NODE	5809:6	5809:6	14	sections
LEAF_NODE	5809:14	5809:14	14	[
EXPR	5809:15	5809:15	14	k
FIELD	5809:15	5809:15	15	k
LEAF_NODE	5809:15	5809:15	16	k
LEAF_NODE	5809:16	5809:16	14	]
LEAF_NODE	5809:17	5809:17	14	.
LEAF_NODE	5809:18	5809:18	14	x2
ASSIGN_OP	5809:21	5809:21	12	=
LEAF_NODE	5809:21	5809:21	13	=
RVAL	5809:23	5809:23	12	x2
FIELD	5809:23	5809:23	13	x2
LEAF_NODE	5809:23	5809:23	14	x2
LEAF_NODE	5809:25	5809:25	10	;
EXPR_STATEMENT	5810:6	5810:25	9	sections [ k ] . y1 = y1 ;
EXPR	5810:6	5810:6	10	sections [ k ] . y1 = y1
ASSIGN	5810:6	5810:23	11	sections [ k ] . y1 = y1
LVAL	5810:6	5810:6	12	sections [ k ] . y1
FIELD	5810:6	5810:18	13	sections [ k ] . y1
LEAF_NODE	5810:6	5810:6	14	sections
LEAF_NODE	5810:14	5810:14	14	[
EXPR	5810:15	5810:15	14	k
FIELD	5810:15	5810:15	15	k
LEAF_NODE	5810:15	5810:15	16	k
LEAF_NODE	5810:16	5810:16	14	]
LEAF_NODE	5810:17	5810:17	14	.
LEAF_NODE	5810:18	5810:18	14	y1
ASSIGN_OP	5810:21	5810:21	12	=
LEAF_NODE	5810:21	5810:21	13	=
RVAL	5810:23	5810:23	12	y1
FIELD	5810:23	5810:23	13	y1
LEAF_NODE	5810:23	5810:23	14	y1
LEAF_NODE	5810:25	5810:25	10	;
EXPR_STATEMENT	5811:6	5811:25	9	sections [ k ] . y2 = y2 ;
EXPR	5811:6	5811:6	10	sections [ k ] . y2 = y2
ASSIGN	5811:6	5811:23	11	sections [ k ] . y2 = y2
LVAL	5811:6	5811:6	12	sections [ k ] . y2
FIELD	5811:6	5811:18	13	sections [ k ] . y2
LEAF_NODE	5811:6	5811:6	14	sections
LEAF_NODE	5811:14	5811:14	14	[
EXPR	5811:15	5811:15	14	k
FIELD	5811:15	5811:15	15	k
LEAF_NODE	5811:15	5811:15	16	k
LEAF_NODE	5811:16	5811:16	14	]
LEAF_NODE	5811:17	5811:17	14	.
LEAF_NODE	5811:18	5811:18	14	y2
ASSIGN_OP	5811:21	5811:21	12	=
LEAF_NODE	5811:21	5811:21	13	=
RVAL	5811:23	5811:23	12	y2
FIELD	5811:23	5811:23	13	y2
LEAF_NODE	5811:23	5811:23	14	y2
LEAF_NODE	5811:25	5811:25	10	;
EXPR_STATEMENT	5812:6	5812:49	9	sections [ k ] . buffsize = line_bytes * olength ;
EXPR	5812:6	5812:6	10	sections [ k ] . buffsize = line_bytes * olength
ASSIGN	5812:6	5812:29	11	sections [ k ] . buffsize = line_bytes * olength
LVAL	5812:6	5812:6	12	sections [ k ] . buffsize
FIELD	5812:6	5812:18	13	sections [ k ] . buffsize
LEAF_NODE	5812:6	5812:6	14	sections
LEAF_NODE	5812:14	5812:14	14	[
EXPR	5812:15	5812:15	14	k
FIELD	5812:15	5812:15	15	k
LEAF_NODE	5812:15	5812:15	16	k
LEAF_NODE	5812:16	5812:16	14	]
LEAF_NODE	5812:17	5812:17	14	.
LEAF_NODE	5812:18	5812:18	14	buffsize
ASSIGN_OP	5812:27	5812:27	12	=
LEAF_NODE	5812:27	5812:27	13	=
RVAL	5812:29	5812:42	12	line_bytes * olength
FIELD	5812:29	5812:29	13	line_bytes
LEAF_NODE	5812:29	5812:29	14	line_bytes
LEAF_NODE	5812:40	5812:40	13	*
FIELD	5812:42	5812:42	13	olength
LEAF_NODE	5812:42	5812:42	14	olength
LEAF_NODE	5812:49	5812:49	10	;
EXPR_STATEMENT	5813:6	5813:34	9	sections [ k ] . position = k + 1 ;
EXPR	5813:6	5813:6	10	sections [ k ] . position = k + 1
ASSIGN	5813:6	5813:29	11	sections [ k ] . position = k + 1
LVAL	5813:6	5813:6	12	sections [ k ] . position
FIELD	5813:6	5813:18	13	sections [ k ] . position
LEAF_NODE	5813:6	5813:6	14	sections
LEAF_NODE	5813:14	5813:14	14	[
EXPR	5813:15	5813:15	14	k
FIELD	5813:15	5813:15	15	k
LEAF_NODE	5813:15	5813:15	16	k
LEAF_NODE	5813:16	5813:16	14	]
LEAF_NODE	5813:17	5813:17	14	.
LEAF_NODE	5813:18	5813:18	14	position
ASSIGN_OP	5813:27	5813:27	12	=
LEAF_NODE	5813:27	5813:27	13	=
RVAL	5813:29	5813:33	12	k + 1
FIELD	5813:29	5813:29	13	k
LEAF_NODE	5813:29	5813:29	14	k
LEAF_NODE	5813:31	5813:31	13	+
FIELD	5813:33	5813:33	13	1
LEAF_NODE	5813:33	5813:33	14	1
LEAF_NODE	5813:34	5813:34	10	;
EXPR_STATEMENT	5814:6	5814:39	9	sections [ k ] . total = orows * ocols ;
EXPR	5814:6	5814:6	10	sections [ k ] . total = orows * ocols
ASSIGN	5814:6	5814:26	11	sections [ k ] . total = orows * ocols
LVAL	5814:6	5814:6	12	sections [ k ] . total
FIELD	5814:6	5814:18	13	sections [ k ] . total
LEAF_NODE	5814:6	5814:6	14	sections
LEAF_NODE	5814:14	5814:14	14	[
EXPR	5814:15	5814:15	14	k
FIELD	5814:15	5814:15	15	k
LEAF_NODE	5814:15	5814:15	16	k
LEAF_NODE	5814:16	5814:16	14	]
LEAF_NODE	5814:17	5814:17	14	.
LEAF_NODE	5814:18	5814:18	14	total
ASSIGN_OP	5814:24	5814:24	12	=
LEAF_NODE	5814:24	5814:24	13	=
RVAL	5814:26	5814:34	12	orows * ocols
FIELD	5814:26	5814:26	13	orows
LEAF_NODE	5814:26	5814:26	14	orows
LEAF_NODE	5814:32	5814:32	13	*
FIELD	5814:34	5814:34	13	ocols
LEAF_NODE	5814:34	5814:34	14	ocols
LEAF_NODE	5814:39	5814:39	10	;
LEAF_NODE	5815:6	5815:6	8	}
LEAF_NODE	5816:4	5816:4	5	}
JUMP_STATEMENT	5817:2	5817:12	3	return ( 0 ) ;
KEYWORD	5817:2	5817:2	4	return
LEAF_NODE	5817:2	5817:2	5	return
DESTINATION	5817:9	5817:9	4	( 0 )
EXPR	5817:9	5817:11	5	( 0 )
LEAF_NODE	5817:9	5817:9	6	(
FIELD	5817:10	5817:10	6	0
LEAF_NODE	5817:10	5817:10	7	0
LEAF_NODE	5817:11	5817:11	6	)
LEAF_NODE	5817:12	5817:12	4	;
LEAF_NODE	5818:2	5818:2	2	}
FUNCTION_DEF	5820:0	6233:2	1	
RETURN_TYPE	5820:0	5820:7	2	static int
LEAF_NODE	5820:0	5820:0	3	static
TYPE_NAME	5820:7	5820:7	3	int
LEAF_NODE	5820:7	5820:7	4	int
FUNCTION_NAME	5821:0	5821:0	2	loadImage
LEAF_NODE	5821:0	5821:0	3	loadImage
PARAMETER_LIST	5821:9	5821:94	2	( TIFF * in , struct image_data * image , struct dump_opts * dump , unsigned char * * read_ptr )
LEAF_NODE	5821:9	5821:9	3	(
PARAMETER_DECL	5821:10	5821:16	3	TIFF * in
TYPE	5821:10	5821:14	4	TIFF *
TYPE_NAME	5821:10	5821:10	5	TIFF
LEAF_NODE	5821:10	5821:10	6	TIFF
POINTER	5821:14	5821:14	5	*
LEAF_NODE	5821:14	5821:14	6	*
NAME	5821:16	5821:16	4	in
LEAF_NODE	5821:16	5821:16	5	in
LEAF_NODE	5821:18	5821:18	3	,
PARAMETER_DECL	5821:20	5821:39	3	struct image_data * image
TYPE	5821:20	5821:38	4	struct image_data *
TYPE_NAME	5821:20	5821:27	5	struct image_data
LEAF_NODE	5821:20	5821:20	6	struct
LEAF_NODE	5821:27	5821:27	6	image_data
POINTER	5821:38	5821:38	5	*
LEAF_NODE	5821:38	5821:38	6	*
NAME	5821:39	5821:39	4	image
LEAF_NODE	5821:39	5821:39	5	image
LEAF_NODE	5821:44	5821:44	3	,
PARAMETER_DECL	5821:46	5821:64	3	struct dump_opts * dump
TYPE	5821:46	5821:63	4	struct dump_opts *
TYPE_NAME	5821:46	5821:53	5	struct dump_opts
LEAF_NODE	5821:46	5821:46	6	struct
LEAF_NODE	5821:53	5821:53	6	dump_opts
POINTER	5821:63	5821:63	5	*
LEAF_NODE	5821:63	5821:63	6	*
NAME	5821:64	5821:64	4	dump
LEAF_NODE	5821:64	5821:64	5	dump
LEAF_NODE	5821:68	5821:68	3	,
PARAMETER_DECL	5821:70	5821:86	3	unsigned char * * read_ptr
TYPE	5821:70	5821:84	4	unsigned char * *
TYPE_NAME	5821:70	5821:79	5	unsigned char
LEAF_NODE	5821:70	5821:70	6	unsigned
LEAF_NODE	5821:79	5821:79	6	char
POINTER	5821:84	5821:85	5	* *
LEAF_NODE	5821:84	5821:84	6	*
LEAF_NODE	5821:85	5821:85	6	*
NAME	5821:86	5821:86	4	read_ptr
LEAF_NODE	5821:86	5821:86	5	read_ptr
LEAF_NODE	5821:94	5821:94	3	)
LEAF_NODE	5822:2	5822:2	2	{
STATEMENTS	5823:2	6232:2	2	
SIMPLE_DECL	5823:2	5823:12	3	uint32 i ;
VAR_DECL	5823:2	5823:11	4	uint32 i
TYPE	5823:2	5823:2	5	uint32
TYPE_NAME	5823:2	5823:2	6	uint32
LEAF_NODE	5823:2	5823:2	7	uint32
NAME	5823:11	5823:11	5	i
LEAF_NODE	5823:11	5823:11	6	i
LEAF_NODE	5823:12	5823:12	4	;
SIMPLE_DECL	5824:2	5824:33	3	float xres ; xres = 0.0 , float yres ; yres = 0.0 ;
INIT_DECL_LIST	5824:2	5824:2	4	float xres ; xres = 0.0 , float yres ; yres = 0.0
VAR_DECL	5824:2	5824:11	5	float xres ; xres = 0.0
TYPE	5824:2	5824:2	6	float
TYPE_NAME	5824:2	5824:2	7	float
LEAF_NODE	5824:2	5824:2	8	float
NAME	5824:11	5824:11	6	xres
LEAF_NODE	5824:11	5824:11	7	xres
LEAF_NODE	0:0	0:0	6	;
INIT	5824:11	5824:11	6	xres = 0.0
ASSIGN	5824:11	5824:18	7	xres = 0.0
LVAL	5824:11	5824:11	8	xres
NAME	5824:11	5824:11	9	xres
LEAF_NODE	5824:11	5824:11	10	xres
ASSIGN_OP	5824:16	5824:16	8	=
LEAF_NODE	5824:16	5824:16	9	=
RVAL	5824:18	5824:18	8	0.0
FIELD	5824:18	5824:18	9	0.0
LEAF_NODE	5824:18	5824:18	10	0.0
LEAF_NODE	5824:21	5824:21	5	,
VAR_DECL	5824:2	5824:23	5	float yres ; yres = 0.0
TYPE	5824:2	5824:2	6	float
TYPE_NAME	5824:2	5824:2	7	float
LEAF_NODE	5824:2	5824:2	8	float
NAME	5824:23	5824:23	6	yres
LEAF_NODE	5824:23	5824:23	7	yres
LEAF_NODE	0:0	0:0	6	;
INIT	5824:23	5824:23	6	yres = 0.0
ASSIGN	5824:23	5824:30	7	yres = 0.0
LVAL	5824:23	5824:23	8	yres
NAME	5824:23	5824:23	9	yres
LEAF_NODE	5824:23	5824:23	10	yres
ASSIGN_OP	5824:28	5824:28	8	=
LEAF_NODE	5824:28	5824:28	9	=
RVAL	5824:30	5824:30	8	0.0
FIELD	5824:30	5824:30	9	0.0
LEAF_NODE	5824:30	5824:30	10	0.0
LEAF_NODE	5824:33	5824:33	4	;
SIMPLE_DECL	5825:2	5825:34	3	uint32 nstrips ; nstrips = 0 , uint32 ntiles ; ntiles = 0 ;
INIT_DECL_LIST	5825:2	5825:2	4	uint32 nstrips ; nstrips = 0 , uint32 ntiles ; ntiles = 0
VAR_DECL	5825:2	5825:11	5	uint32 nstrips ; nstrips = 0
TYPE	5825:2	5825:2	6	uint32
TYPE_NAME	5825:2	5825:2	7	uint32
LEAF_NODE	5825:2	5825:2	8	uint32
NAME	5825:11	5825:11	6	nstrips
LEAF_NODE	5825:11	5825:11	7	nstrips
LEAF_NODE	0:0	0:0	6	;
INIT	5825:11	5825:11	6	nstrips = 0
ASSIGN	5825:11	5825:21	7	nstrips = 0
LVAL	5825:11	5825:11	8	nstrips
NAME	5825:11	5825:11	9	nstrips
LEAF_NODE	5825:11	5825:11	10	nstrips
ASSIGN_OP	5825:19	5825:19	8	=
LEAF_NODE	5825:19	5825:19	9	=
RVAL	5825:21	5825:21	8	0
FIELD	5825:21	5825:21	9	0
LEAF_NODE	5825:21	5825:21	10	0
LEAF_NODE	5825:22	5825:22	5	,
VAR_DECL	5825:2	5825:24	5	uint32 ntiles ; ntiles = 0
TYPE	5825:2	5825:2	6	uint32
TYPE_NAME	5825:2	5825:2	7	uint32
LEAF_NODE	5825:2	5825:2	8	uint32
NAME	5825:24	5825:24	6	ntiles
LEAF_NODE	5825:24	5825:24	7	ntiles
LEAF_NODE	0:0	0:0	6	;
INIT	5825:24	5825:24	6	ntiles = 0
ASSIGN	5825:24	5825:33	7	ntiles = 0
LVAL	5825:24	5825:24	8	ntiles
NAME	5825:24	5825:24	9	ntiles
LEAF_NODE	5825:24	5825:24	10	ntiles
ASSIGN_OP	5825:31	5825:31	8	=
LEAF_NODE	5825:31	5825:31	9	=
RVAL	5825:33	5825:33	8	0
FIELD	5825:33	5825:33	9	0
LEAF_NODE	5825:33	5825:33	10	0
LEAF_NODE	5825:34	5825:34	4	;
SIMPLE_DECL	5826:2	5826:21	3	uint16 planar ; planar = 0 ;
VAR_DECL	5826:2	5826:11	4	uint16 planar ; planar = 0
TYPE	5826:2	5826:2	5	uint16
TYPE_NAME	5826:2	5826:2	6	uint16
LEAF_NODE	5826:2	5826:2	7	uint16
NAME	5826:11	5826:11	5	planar
LEAF_NODE	5826:11	5826:11	6	planar
LEAF_NODE	0:0	0:0	5	;
INIT	5826:11	5826:11	5	planar = 0
ASSIGN	5826:11	5826:20	6	planar = 0
LVAL	5826:11	5826:11	7	planar
NAME	5826:11	5826:11	8	planar
LEAF_NODE	5826:11	5826:11	9	planar
ASSIGN_OP	5826:18	5826:18	7	=
LEAF_NODE	5826:18	5826:18	8	=
RVAL	5826:20	5826:20	7	0
FIELD	5826:20	5826:20	8	0
LEAF_NODE	5826:20	5826:20	9	0
LEAF_NODE	5826:21	5826:21	4	;
SIMPLE_DECL	5827:2	5827:41	3	uint16 bps ; bps = 0 , uint16 spp ; spp = 0 , uint16 res_unit ; res_unit = 0 ;
INIT_DECL_LIST	5827:2	5827:2	4	uint16 bps ; bps = 0 , uint16 spp ; spp = 0 , uint16 res_unit ; res_unit = 0
VAR_DECL	5827:2	5827:11	5	uint16 bps ; bps = 0
TYPE	5827:2	5827:2	6	uint16
TYPE_NAME	5827:2	5827:2	7	uint16
LEAF_NODE	5827:2	5827:2	8	uint16
NAME	5827:11	5827:11	6	bps
LEAF_NODE	5827:11	5827:11	7	bps
LEAF_NODE	0:0	0:0	6	;
INIT	5827:11	5827:11	6	bps = 0
ASSIGN	5827:11	5827:17	7	bps = 0
LVAL	5827:11	5827:11	8	bps
NAME	5827:11	5827:11	9	bps
LEAF_NODE	5827:11	5827:11	10	bps
ASSIGN_OP	5827:15	5827:15	8	=
LEAF_NODE	5827:15	5827:15	9	=
RVAL	5827:17	5827:17	8	0
FIELD	5827:17	5827:17	9	0
LEAF_NODE	5827:17	5827:17	10	0
LEAF_NODE	5827:18	5827:18	5	,
INIT_DECL_LIST	5827:2	5827:2	5	uint16 spp ; spp = 0 , uint16 res_unit ; res_unit = 0
VAR_DECL	5827:2	5827:20	6	uint16 spp ; spp = 0
TYPE	5827:2	5827:2	7	uint16
TYPE_NAME	5827:2	5827:2	8	uint16
LEAF_NODE	5827:2	5827:2	9	uint16
NAME	5827:20	5827:20	7	spp
LEAF_NODE	5827:20	5827:20	8	spp
LEAF_NODE	0:0	0:0	7	;
INIT	5827:20	5827:20	7	spp = 0
ASSIGN	5827:20	5827:26	8	spp = 0
LVAL	5827:20	5827:20	9	spp
NAME	5827:20	5827:20	10	spp
LEAF_NODE	5827:20	5827:20	11	spp
ASSIGN_OP	5827:24	5827:24	9	=
LEAF_NODE	5827:24	5827:24	10	=
RVAL	5827:26	5827:26	9	0
FIELD	5827:26	5827:26	10	0
LEAF_NODE	5827:26	5827:26	11	0
LEAF_NODE	5827:27	5827:27	6	,
VAR_DECL	5827:2	5827:29	6	uint16 res_unit ; res_unit = 0
TYPE	5827:2	5827:2	7	uint16
TYPE_NAME	5827:2	5827:2	8	uint16
LEAF_NODE	5827:2	5827:2	9	uint16
NAME	5827:29	5827:29	7	res_unit
LEAF_NODE	5827:29	5827:29	8	res_unit
LEAF_NODE	0:0	0:0	7	;
INIT	5827:29	5827:29	7	res_unit = 0
ASSIGN	5827:29	5827:40	8	res_unit = 0
LVAL	5827:29	5827:29	9	res_unit
NAME	5827:29	5827:29	10	res_unit
LEAF_NODE	5827:29	5827:29	11	res_unit
ASSIGN_OP	5827:38	5827:38	9	=
LEAF_NODE	5827:38	5827:38	10	=
RVAL	5827:40	5827:40	9	0
FIELD	5827:40	5827:40	10	0
LEAF_NODE	5827:40	5827:40	11	0
LEAF_NODE	5827:41	5827:41	4	;
SIMPLE_DECL	5828:2	5828:26	3	uint16 orientation ; orientation = 0 ;
VAR_DECL	5828:2	5828:11	4	uint16 orientation ; orientation = 0
TYPE	5828:2	5828:2	5	uint16
TYPE_NAME	5828:2	5828:2	6	uint16
LEAF_NODE	5828:2	5828:2	7	uint16
NAME	5828:11	5828:11	5	orientation
LEAF_NODE	5828:11	5828:11	6	orientation
LEAF_NODE	0:0	0:0	5	;
INIT	5828:11	5828:11	5	orientation = 0
ASSIGN	5828:11	5828:25	6	orientation = 0
LVAL	5828:11	5828:11	7	orientation
NAME	5828:11	5828:11	8	orientation
LEAF_NODE	5828:11	5828:11	9	orientation
ASSIGN_OP	5828:23	5828:23	7	=
LEAF_NODE	5828:23	5828:23	8	=
RVAL	5828:25	5828:25	7	0
FIELD	5828:25	5828:25	8	0
LEAF_NODE	5828:25	5828:25	9	0
LEAF_NODE	5828:26	5828:26	4	;
SIMPLE_DECL	5829:2	5829:55	3	uint16 input_compression ; input_compression = 0 , uint16 input_photometric ; input_photometric = 0 ;
INIT_DECL_LIST	5829:2	5829:2	4	uint16 input_compression ; input_compression = 0 , uint16 input_photometric ; input_photometric = 0
VAR_DECL	5829:2	5829:11	5	uint16 input_compression ; input_compression = 0
TYPE	5829:2	5829:2	6	uint16
TYPE_NAME	5829:2	5829:2	7	uint16
LEAF_NODE	5829:2	5829:2	8	uint16
NAME	5829:11	5829:11	6	input_compression
LEAF_NODE	5829:11	5829:11	7	input_compression
LEAF_NODE	0:0	0:0	6	;
INIT	5829:11	5829:11	6	input_compression = 0
ASSIGN	5829:11	5829:31	7	input_compression = 0
LVAL	5829:11	5829:11	8	input_compression
NAME	5829:11	5829:11	9	input_compression
LEAF_NODE	5829:11	5829:11	10	input_compression
ASSIGN_OP	5829:29	5829:29	8	=
LEAF_NODE	5829:29	5829:29	9	=
RVAL	5829:31	5829:31	8	0
FIELD	5829:31	5829:31	9	0
LEAF_NODE	5829:31	5829:31	10	0
LEAF_NODE	5829:32	5829:32	5	,
VAR_DECL	5829:2	5829:34	5	uint16 input_photometric ; input_photometric = 0
TYPE	5829:2	5829:2	6	uint16
TYPE_NAME	5829:2	5829:2	7	uint16
LEAF_NODE	5829:2	5829:2	8	uint16
NAME	5829:34	5829:34	6	input_photometric
LEAF_NODE	5829:34	5829:34	7	input_photometric
LEAF_NODE	0:0	0:0	6	;
INIT	5829:34	5829:34	6	input_photometric = 0
ASSIGN	5829:34	5829:54	7	input_photometric = 0
LVAL	5829:34	5829:34	8	input_photometric
NAME	5829:34	5829:34	9	input_photometric
LEAF_NODE	5829:34	5829:34	10	input_photometric
ASSIGN_OP	5829:52	5829:52	8	=
LEAF_NODE	5829:52	5829:52	9	=
RVAL	5829:54	5829:54	8	0
FIELD	5829:54	5829:54	9	0
LEAF_NODE	5829:54	5829:54	10	0
LEAF_NODE	5829:55	5829:55	4	;
SIMPLE_DECL	5830:2	5830:46	3	uint16 subsampling_horiz , uint16 subsampling_vert ;
INIT_DECL_LIST	5830:2	5830:2	4	uint16 subsampling_horiz , uint16 subsampling_vert
VAR_DECL	5830:2	5830:11	5	uint16 subsampling_horiz
TYPE	5830:2	5830:2	6	uint16
TYPE_NAME	5830:2	5830:2	7	uint16
LEAF_NODE	5830:2	5830:2	8	uint16
NAME	5830:11	5830:11	6	subsampling_horiz
LEAF_NODE	5830:11	5830:11	7	subsampling_horiz
LEAF_NODE	5830:28	5830:28	5	,
VAR_DECL	5830:2	5830:30	5	uint16 subsampling_vert
TYPE	5830:2	5830:2	6	uint16
TYPE_NAME	5830:2	5830:2	7	uint16
LEAF_NODE	5830:2	5830:2	8	uint16
NAME	5830:30	5830:30	6	subsampling_vert
LEAF_NODE	5830:30	5830:30	7	subsampling_vert
LEAF_NODE	5830:46	5830:46	4	;
SIMPLE_DECL	5831:2	5831:32	3	uint32 width ; width = 0 , uint32 length ; length = 0 ;
INIT_DECL_LIST	5831:2	5831:2	4	uint32 width ; width = 0 , uint32 length ; length = 0
VAR_DECL	5831:2	5831:11	5	uint32 width ; width = 0
TYPE	5831:2	5831:2	6	uint32
TYPE_NAME	5831:2	5831:2	7	uint32
LEAF_NODE	5831:2	5831:2	8	uint32
NAME	5831:11	5831:11	6	width
LEAF_NODE	5831:11	5831:11	7	width
LEAF_NODE	0:0	0:0	6	;
INIT	5831:11	5831:11	6	width = 0
ASSIGN	5831:11	5831:19	7	width = 0
LVAL	5831:11	5831:11	8	width
NAME	5831:11	5831:11	9	width
LEAF_NODE	5831:11	5831:11	10	width
ASSIGN_OP	5831:17	5831:17	8	=
LEAF_NODE	5831:17	5831:17	9	=
RVAL	5831:19	5831:19	8	0
FIELD	5831:19	5831:19	9	0
LEAF_NODE	5831:19	5831:19	10	0
LEAF_NODE	5831:20	5831:20	5	,
VAR_DECL	5831:2	5831:22	5	uint32 length ; length = 0
TYPE	5831:2	5831:2	6	uint32
TYPE_NAME	5831:2	5831:2	7	uint32
LEAF_NODE	5831:2	5831:2	8	uint32
NAME	5831:22	5831:22	6	length
LEAF_NODE	5831:22	5831:22	7	length
LEAF_NODE	0:0	0:0	6	;
INIT	5831:22	5831:22	6	length = 0
ASSIGN	5831:22	5831:31	7	length = 0
LVAL	5831:22	5831:22	8	length
NAME	5831:22	5831:22	9	length
LEAF_NODE	5831:22	5831:22	10	length
ASSIGN_OP	5831:29	5831:29	8	=
LEAF_NODE	5831:29	5831:29	9	=
RVAL	5831:31	5831:31	8	0
FIELD	5831:31	5831:31	9	0
LEAF_NODE	5831:31	5831:31	10	0
LEAF_NODE	5831:32	5831:32	4	;
SIMPLE_DECL	5832:2	5832:65	3	uint32 stsize ; stsize = 0 , uint32 tlsize ; tlsize = 0 , uint32 buffsize ; buffsize = 0 , uint32 scanlinesize ; scanlinesize = 0 ;
INIT_DECL_LIST	5832:2	5832:2	4	uint32 stsize ; stsize = 0 , uint32 tlsize ; tlsize = 0 , uint32 buffsize ; buffsize = 0 , uint32 scanlinesize ; scanlinesize = 0
VAR_DECL	5832:2	5832:11	5	uint32 stsize ; stsize = 0
TYPE	5832:2	5832:2	6	uint32
TYPE_NAME	5832:2	5832:2	7	uint32
LEAF_NODE	5832:2	5832:2	8	uint32
NAME	5832:11	5832:11	6	stsize
LEAF_NODE	5832:11	5832:11	7	stsize
LEAF_NODE	0:0	0:0	6	;
INIT	5832:11	5832:11	6	stsize = 0
ASSIGN	5832:11	5832:20	7	stsize = 0
LVAL	5832:11	5832:11	8	stsize
NAME	5832:11	5832:11	9	stsize
LEAF_NODE	5832:11	5832:11	10	stsize
ASSIGN_OP	5832:18	5832:18	8	=
LEAF_NODE	5832:18	5832:18	9	=
RVAL	5832:20	5832:20	8	0
FIELD	5832:20	5832:20	9	0
LEAF_NODE	5832:20	5832:20	10	0
LEAF_NODE	5832:21	5832:21	5	,
INIT_DECL_LIST	5832:2	5832:2	5	uint32 tlsize ; tlsize = 0 , uint32 buffsize ; buffsize = 0 , uint32 scanlinesize ; scanlinesize = 0
VAR_DECL	5832:2	5832:23	6	uint32 tlsize ; tlsize = 0
TYPE	5832:2	5832:2	7	uint32
TYPE_NAME	5832:2	5832:2	8	uint32
LEAF_NODE	5832:2	5832:2	9	uint32
NAME	5832:23	5832:23	7	tlsize
LEAF_NODE	5832:23	5832:23	8	tlsize
LEAF_NODE	0:0	0:0	7	;
INIT	5832:23	5832:23	7	tlsize = 0
ASSIGN	5832:23	5832:32	8	tlsize = 0
LVAL	5832:23	5832:23	9	tlsize
NAME	5832:23	5832:23	10	tlsize
LEAF_NODE	5832:23	5832:23	11	tlsize
ASSIGN_OP	5832:30	5832:30	9	=
LEAF_NODE	5832:30	5832:30	10	=
RVAL	5832:32	5832:32	9	0
FIELD	5832:32	5832:32	10	0
LEAF_NODE	5832:32	5832:32	11	0
LEAF_NODE	5832:33	5832:33	6	,
INIT_DECL_LIST	5832:2	5832:2	6	uint32 buffsize ; buffsize = 0 , uint32 scanlinesize ; scanlinesize = 0
VAR_DECL	5832:2	5832:35	7	uint32 buffsize ; buffsize = 0
TYPE	5832:2	5832:2	8	uint32
TYPE_NAME	5832:2	5832:2	9	uint32
LEAF_NODE	5832:2	5832:2	10	uint32
NAME	5832:35	5832:35	8	buffsize
LEAF_NODE	5832:35	5832:35	9	buffsize
LEAF_NODE	0:0	0:0	8	;
INIT	5832:35	5832:35	8	buffsize = 0
ASSIGN	5832:35	5832:46	9	buffsize = 0
LVAL	5832:35	5832:35	10	buffsize
NAME	5832:35	5832:35	11	buffsize
LEAF_NODE	5832:35	5832:35	12	buffsize
ASSIGN_OP	5832:44	5832:44	10	=
LEAF_NODE	5832:44	5832:44	11	=
RVAL	5832:46	5832:46	10	0
FIELD	5832:46	5832:46	11	0
LEAF_NODE	5832:46	5832:46	12	0
LEAF_NODE	5832:47	5832:47	7	,
VAR_DECL	5832:2	5832:49	7	uint32 scanlinesize ; scanlinesize = 0
TYPE	5832:2	5832:2	8	uint32
TYPE_NAME	5832:2	5832:2	9	uint32
LEAF_NODE	5832:2	5832:2	10	uint32
NAME	5832:49	5832:49	8	scanlinesize
LEAF_NODE	5832:49	5832:49	9	scanlinesize
LEAF_NODE	0:0	0:0	8	;
INIT	5832:49	5832:49	8	scanlinesize = 0
ASSIGN	5832:49	5832:64	9	scanlinesize = 0
LVAL	5832:49	5832:49	10	scanlinesize
NAME	5832:49	5832:49	11	scanlinesize
LEAF_NODE	5832:49	5832:49	12	scanlinesize
ASSIGN_OP	5832:62	5832:62	10	=
LEAF_NODE	5832:62	5832:62	11	=
RVAL	5832:64	5832:64	10	0
FIELD	5832:64	5832:64	11	0
LEAF_NODE	5832:64	5832:64	12	0
LEAF_NODE	5832:65	5832:65	4	;
SIMPLE_DECL	5833:2	5833:25	3	uint32 tw ; tw = 0 , uint32 tl ; tl = 0 ;
INIT_DECL_LIST	5833:2	5833:2	4	uint32 tw ; tw = 0 , uint32 tl ; tl = 0
VAR_DECL	5833:2	5833:11	5	uint32 tw ; tw = 0
TYPE	5833:2	5833:2	6	uint32
TYPE_NAME	5833:2	5833:2	7	uint32
LEAF_NODE	5833:2	5833:2	8	uint32
NAME	5833:11	5833:11	6	tw
LEAF_NODE	5833:11	5833:11	7	tw
LEAF_NODE	0:0	0:0	6	;
INIT	5833:11	5833:11	6	tw = 0
ASSIGN	5833:11	5833:16	7	tw = 0
LVAL	5833:11	5833:11	8	tw
NAME	5833:11	5833:11	9	tw
LEAF_NODE	5833:11	5833:11	10	tw
ASSIGN_OP	5833:14	5833:14	8	=
LEAF_NODE	5833:14	5833:14	9	=
RVAL	5833:16	5833:16	8	0
FIELD	5833:16	5833:16	9	0
LEAF_NODE	5833:16	5833:16	10	0
LEAF_NODE	5833:17	5833:17	5	,
VAR_DECL	5833:2	5833:19	5	uint32 tl ; tl = 0
TYPE	5833:2	5833:2	6	uint32
TYPE_NAME	5833:2	5833:2	7	uint32
LEAF_NODE	5833:2	5833:2	8	uint32
NAME	5833:19	5833:19	6	tl
LEAF_NODE	5833:19	5833:19	7	tl
LEAF_NODE	0:0	0:0	6	;
INIT	5833:19	5833:19	6	tl = 0
ASSIGN	5833:19	5833:24	7	tl = 0
LVAL	5833:19	5833:19	8	tl
NAME	5833:19	5833:19	9	tl
LEAF_NODE	5833:19	5833:19	10	tl
ASSIGN_OP	5833:22	5833:22	8	=
LEAF_NODE	5833:22	5833:22	9	=
RVAL	5833:24	5833:24	8	0
FIELD	5833:24	5833:24	9	0
LEAF_NODE	5833:24	5833:24	10	0
LEAF_NODE	5833:25	5833:25	4	;
SIMPLE_DECL	5834:2	5834:27	3	uint32 tile_rowsize ; tile_rowsize = 0 ;
VAR_DECL	5834:2	5834:11	4	uint32 tile_rowsize ; tile_rowsize = 0
TYPE	5834:2	5834:2	5	uint32
TYPE_NAME	5834:2	5834:2	6	uint32
LEAF_NODE	5834:2	5834:2	7	uint32
NAME	5834:11	5834:11	5	tile_rowsize
LEAF_NODE	5834:11	5834:11	6	tile_rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	5834:11	5834:11	5	tile_rowsize = 0
ASSIGN	5834:11	5834:26	6	tile_rowsize = 0
LVAL	5834:11	5834:11	7	tile_rowsize
NAME	5834:11	5834:11	8	tile_rowsize
LEAF_NODE	5834:11	5834:11	9	tile_rowsize
ASSIGN_OP	5834:24	5834:24	7	=
LEAF_NODE	5834:24	5834:24	8	=
RVAL	5834:26	5834:26	7	0
FIELD	5834:26	5834:26	8	0
LEAF_NODE	5834:26	5834:26	9	0
LEAF_NODE	5834:27	5834:27	4	;
SIMPLE_DECL	5835:2	5835:33	3	unsigned char * read_buff ; read_buff = NULL ;
VAR_DECL	5835:2	5835:17	4	unsigned char * read_buff ; read_buff = NULL
TYPE	5835:2	5835:16	5	unsigned char *
TYPE_NAME	5835:2	5835:11	6	unsigned char
LEAF_NODE	5835:2	5835:2	7	unsigned
LEAF_NODE	5835:11	5835:11	7	char
POINTER	5835:16	5835:16	6	*
LEAF_NODE	5835:16	5835:16	7	*
NAME	5835:17	5835:17	5	read_buff
LEAF_NODE	5835:17	5835:17	6	read_buff
LEAF_NODE	0:0	0:0	5	;
INIT	5835:17	5835:17	5	read_buff = NULL
ASSIGN	5835:17	5835:29	6	read_buff = NULL
LVAL	5835:17	5835:17	7	read_buff
NAME	5835:17	5835:17	8	read_buff
LEAF_NODE	5835:17	5835:17	9	read_buff
ASSIGN_OP	5835:27	5835:27	7	=
LEAF_NODE	5835:27	5835:27	8	=
RVAL	5835:29	5835:29	7	NULL
FIELD	5835:29	5835:29	8	NULL
LEAF_NODE	5835:29	5835:29	9	NULL
LEAF_NODE	5835:33	5835:33	4	;
SIMPLE_DECL	5836:2	5836:33	3	unsigned char * new_buff ; new_buff = NULL ;
VAR_DECL	5836:2	5836:17	4	unsigned char * new_buff ; new_buff = NULL
TYPE	5836:2	5836:16	5	unsigned char *
TYPE_NAME	5836:2	5836:11	6	unsigned char
LEAF_NODE	5836:2	5836:2	7	unsigned
LEAF_NODE	5836:11	5836:11	7	char
POINTER	5836:16	5836:16	6	*
LEAF_NODE	5836:16	5836:16	7	*
NAME	5836:17	5836:17	5	new_buff
LEAF_NODE	5836:17	5836:17	6	new_buff
LEAF_NODE	0:0	0:0	5	;
INIT	5836:17	5836:17	5	new_buff = NULL
ASSIGN	5836:17	5836:29	6	new_buff = NULL
LVAL	5836:17	5836:17	7	new_buff
NAME	5836:17	5836:17	8	new_buff
LEAF_NODE	5836:17	5836:17	9	new_buff
ASSIGN_OP	5836:27	5836:27	7	=
LEAF_NODE	5836:27	5836:27	8	=
RVAL	5836:29	5836:29	7	NULL
FIELD	5836:29	5836:29	8	NULL
LEAF_NODE	5836:29	5836:29	9	NULL
LEAF_NODE	5836:33	5836:33	4	;
SIMPLE_DECL	5837:2	5837:23	3	int readunit ; readunit = 0 ;
VAR_DECL	5837:2	5837:11	4	int readunit ; readunit = 0
TYPE	5837:2	5837:2	5	int
TYPE_NAME	5837:2	5837:2	6	int
LEAF_NODE	5837:2	5837:2	7	int
NAME	5837:11	5837:11	5	readunit
LEAF_NODE	5837:11	5837:11	6	readunit
LEAF_NODE	0:0	0:0	5	;
INIT	5837:11	5837:11	5	readunit = 0
ASSIGN	5837:11	5837:22	6	readunit = 0
LVAL	5837:11	5837:11	7	readunit
NAME	5837:11	5837:11	8	readunit
LEAF_NODE	5837:11	5837:11	9	readunit
ASSIGN_OP	5837:20	5837:20	7	=
LEAF_NODE	5837:20	5837:20	8	=
RVAL	5837:22	5837:22	7	0
FIELD	5837:22	5837:22	8	0
LEAF_NODE	5837:22	5837:22	9	0
LEAF_NODE	5837:23	5837:23	4	;
LEAF_NODE	5838:2	5838:2	3	static
SIMPLE_DECL	5838:11	5838:36	3	uint32 prev_readsize ; prev_readsize = 0 ;
VAR_DECL	5838:11	5838:19	4	uint32 prev_readsize ; prev_readsize = 0
TYPE	5838:11	5838:11	5	uint32
TYPE_NAME	5838:11	5838:11	6	uint32
LEAF_NODE	5838:11	5838:11	7	uint32
NAME	5838:19	5838:19	5	prev_readsize
LEAF_NODE	5838:19	5838:19	6	prev_readsize
LEAF_NODE	0:0	0:0	5	;
INIT	5838:19	5838:19	5	prev_readsize = 0
ASSIGN	5838:19	5838:35	6	prev_readsize = 0
LVAL	5838:19	5838:19	7	prev_readsize
NAME	5838:19	5838:19	8	prev_readsize
LEAF_NODE	5838:19	5838:19	9	prev_readsize
ASSIGN_OP	5838:33	5838:33	7	=
LEAF_NODE	5838:33	5838:33	8	=
RVAL	5838:35	5838:35	7	0
FIELD	5838:35	5838:35	8	0
LEAF_NODE	5838:35	5838:35	9	0
LEAF_NODE	5838:36	5838:36	4	;
EXPR_STATEMENT	5840:2	5840:56	3	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	5840:2	5840:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps )
FUNCTION_CALL	5840:2	5840:55	5	TIFFGetFieldDefaulted ( in , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	5840:2	5840:2	6	TIFFGetFieldDefaulted
LEAF_NODE	5840:2	5840:2	7	TIFFGetFieldDefaulted
LEAF_NODE	5840:23	5840:23	6	(
ARGUMENT	5840:24	5840:24	6	in
FIELD	5840:24	5840:24	7	in
LEAF_NODE	5840:24	5840:24	8	in
LEAF_NODE	5840:26	5840:26	6	,
ARGUMENT	5840:28	5840:28	6	TIFFTAG_BITSPERSAMPLE
FIELD	5840:28	5840:28	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	5840:28	5840:28	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	5840:49	5840:49	6	,
ARGUMENT	5840:51	5840:51	6	& bps
UNARY_EXPR	5840:51	5840:52	7	& bps
UNARY_OPERATOR	5840:51	5840:51	8	&
LEAF_NODE	5840:51	5840:51	9	&
FIELD	5840:52	5840:52	8	bps
LEAF_NODE	5840:52	5840:52	9	bps
LEAF_NODE	5840:55	5840:55	6	)
LEAF_NODE	5840:56	5840:56	4	;
EXPR_STATEMENT	5841:2	5841:58	3	TIFFGetFieldDefaulted ( in , TIFFTAG_SAMPLESPERPIXEL , & spp ) ;
EXPR	5841:2	5841:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_SAMPLESPERPIXEL , & spp )
FUNCTION_CALL	5841:2	5841:57	5	TIFFGetFieldDefaulted ( in , TIFFTAG_SAMPLESPERPIXEL , & spp )
CALLEE	5841:2	5841:2	6	TIFFGetFieldDefaulted
LEAF_NODE	5841:2	5841:2	7	TIFFGetFieldDefaulted
LEAF_NODE	5841:23	5841:23	6	(
ARGUMENT	5841:24	5841:24	6	in
FIELD	5841:24	5841:24	7	in
LEAF_NODE	5841:24	5841:24	8	in
LEAF_NODE	5841:26	5841:26	6	,
ARGUMENT	5841:28	5841:28	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	5841:28	5841:28	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	5841:28	5841:28	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	5841:51	5841:51	6	,
ARGUMENT	5841:53	5841:53	6	& spp
UNARY_EXPR	5841:53	5841:54	7	& spp
UNARY_OPERATOR	5841:53	5841:53	8	&
LEAF_NODE	5841:53	5841:53	9	&
FIELD	5841:54	5841:54	8	spp
LEAF_NODE	5841:54	5841:54	9	spp
LEAF_NODE	5841:57	5841:57	6	)
LEAF_NODE	5841:58	5841:58	4	;
EXPR_STATEMENT	5842:2	5842:58	3	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & planar ) ;
EXPR	5842:2	5842:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & planar )
FUNCTION_CALL	5842:2	5842:57	5	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & planar )
CALLEE	5842:2	5842:2	6	TIFFGetFieldDefaulted
LEAF_NODE	5842:2	5842:2	7	TIFFGetFieldDefaulted
LEAF_NODE	5842:23	5842:23	6	(
ARGUMENT	5842:24	5842:24	6	in
FIELD	5842:24	5842:24	7	in
LEAF_NODE	5842:24	5842:24	8	in
LEAF_NODE	5842:26	5842:26	6	,
ARGUMENT	5842:28	5842:28	6	TIFFTAG_PLANARCONFIG
FIELD	5842:28	5842:28	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	5842:28	5842:28	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	5842:48	5842:48	6	,
ARGUMENT	5842:50	5842:50	6	& planar
UNARY_EXPR	5842:50	5842:51	7	& planar
UNARY_OPERATOR	5842:50	5842:50	8	&
LEAF_NODE	5842:50	5842:50	9	&
FIELD	5842:51	5842:51	8	planar
LEAF_NODE	5842:51	5842:51	9	planar
LEAF_NODE	5842:57	5842:57	6	)
LEAF_NODE	5842:58	5842:58	4	;
EXPR_STATEMENT	5843:2	5843:62	3	TIFFGetFieldDefaulted ( in , TIFFTAG_ORIENTATION , & orientation ) ;
EXPR	5843:2	5843:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_ORIENTATION , & orientation )
FUNCTION_CALL	5843:2	5843:61	5	TIFFGetFieldDefaulted ( in , TIFFTAG_ORIENTATION , & orientation )
CALLEE	5843:2	5843:2	6	TIFFGetFieldDefaulted
LEAF_NODE	5843:2	5843:2	7	TIFFGetFieldDefaulted
LEAF_NODE	5843:23	5843:23	6	(
ARGUMENT	5843:24	5843:24	6	in
FIELD	5843:24	5843:24	7	in
LEAF_NODE	5843:24	5843:24	8	in
LEAF_NODE	5843:26	5843:26	6	,
ARGUMENT	5843:28	5843:28	6	TIFFTAG_ORIENTATION
FIELD	5843:28	5843:28	7	TIFFTAG_ORIENTATION
LEAF_NODE	5843:28	5843:28	8	TIFFTAG_ORIENTATION
LEAF_NODE	5843:47	5843:47	6	,
ARGUMENT	5843:49	5843:49	6	& orientation
UNARY_EXPR	5843:49	5843:50	7	& orientation
UNARY_OPERATOR	5843:49	5843:49	8	&
LEAF_NODE	5843:49	5843:49	9	&
FIELD	5843:50	5843:50	8	orientation
LEAF_NODE	5843:50	5843:50	9	orientation
LEAF_NODE	5843:61	5843:61	6	)
LEAF_NODE	5843:62	5843:62	4	;
SELECTION	5844:2	5845:4	3	
KEYWORD	5844:2	5844:2	4	if
LEAF_NODE	5844:2	5844:2	5	if
LEAF_NODE	5844:5	5844:5	4	(
CONDITION	5844:6	5844:6	4	! TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric )
EXPR	5844:6	5844:6	5	! TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric )
UNARY_EXPR	5844:6	5844:8	6	! TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric )
UNARY_OPERATOR	5844:6	5844:6	7	!
LEAF_NODE	5844:6	5844:6	8	!
FUNCTION_CALL	5844:8	5844:73	7	TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric )
CALLEE	5844:8	5844:8	8	TIFFGetFieldDefaulted
LEAF_NODE	5844:8	5844:8	9	TIFFGetFieldDefaulted
LEAF_NODE	5844:29	5844:29	8	(
ARGUMENT	5844:30	5844:30	8	in
FIELD	5844:30	5844:30	9	in
LEAF_NODE	5844:30	5844:30	10	in
LEAF_NODE	5844:32	5844:32	8	,
ARGUMENT	5844:34	5844:34	8	TIFFTAG_PHOTOMETRIC
FIELD	5844:34	5844:34	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	5844:34	5844:34	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	5844:53	5844:53	8	,
ARGUMENT	5844:55	5844:55	8	& input_photometric
UNARY_EXPR	5844:55	5844:56	9	& input_photometric
UNARY_OPERATOR	5844:55	5844:55	10	&
LEAF_NODE	5844:55	5844:55	11	&
FIELD	5844:56	5844:56	10	input_photometric
LEAF_NODE	5844:56	5844:56	11	input_photometric
LEAF_NODE	5844:73	5844:73	8	)
LEAF_NODE	5844:74	5844:74	4	)
STATEMENTS	5845:4	5845:4	4	
EXPR_STATEMENT	5845:4	5845:70	5	TIFFError ( "loadImage" , "Image lacks Photometric interpreation tag" ) ;
EXPR	5845:4	5845:4	6	TIFFError ( "loadImage" , "Image lacks Photometric interpreation tag" )
FUNCTION_CALL	5845:4	5845:69	7	TIFFError ( "loadImage" , "Image lacks Photometric interpreation tag" )
CALLEE	5845:4	5845:4	8	TIFFError
LEAF_NODE	5845:4	5845:4	9	TIFFError
LEAF_NODE	5845:13	5845:13	8	(
ARGUMENT	5845:14	5845:14	8	"loadImage"
FIELD	5845:14	5845:14	9	"loadImage"
LEAF_NODE	5845:14	5845:14	10	"loadImage"
LEAF_NODE	5845:25	5845:25	8	,
ARGUMENT	5845:26	5845:26	8	"Image lacks Photometric interpreation tag"
FIELD	5845:26	5845:26	9	"Image lacks Photometric interpreation tag"
LEAF_NODE	5845:26	5845:26	10	"Image lacks Photometric interpreation tag"
LEAF_NODE	5845:69	5845:69	8	)
LEAF_NODE	5845:70	5845:70	6	;
SELECTION	5846:2	5847:4	3	
KEYWORD	5846:2	5846:2	4	if
LEAF_NODE	5846:2	5846:2	5	if
LEAF_NODE	5846:5	5846:5	4	(
CONDITION	5846:6	5846:6	4	! TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
EXPR	5846:6	5846:6	5	! TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
UNARY_EXPR	5846:6	5846:8	6	! TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
UNARY_OPERATOR	5846:6	5846:6	7	!
LEAF_NODE	5846:6	5846:6	8	!
FUNCTION_CALL	5846:8	5846:52	7	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & width )
CALLEE	5846:8	5846:8	8	TIFFGetField
LEAF_NODE	5846:8	5846:8	9	TIFFGetField
LEAF_NODE	5846:20	5846:20	8	(
ARGUMENT	5846:21	5846:21	8	in
FIELD	5846:21	5846:21	9	in
LEAF_NODE	5846:21	5846:21	10	in
LEAF_NODE	5846:23	5846:23	8	,
ARGUMENT	5846:25	5846:25	8	TIFFTAG_IMAGEWIDTH
FIELD	5846:25	5846:25	9	TIFFTAG_IMAGEWIDTH
LEAF_NODE	5846:25	5846:25	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	5846:43	5846:43	8	,
ARGUMENT	5846:46	5846:46	8	& width
UNARY_EXPR	5846:46	5846:47	9	& width
UNARY_OPERATOR	5846:46	5846:46	10	&
LEAF_NODE	5846:46	5846:46	11	&
FIELD	5846:47	5846:47	10	width
LEAF_NODE	5846:47	5846:47	11	width
LEAF_NODE	5846:52	5846:52	8	)
LEAF_NODE	5846:53	5846:53	4	)
STATEMENTS	5847:4	5847:4	4	
EXPR_STATEMENT	5847:4	5847:56	5	TIFFError ( "loadimage" , "Image lacks image width tag" ) ;
EXPR	5847:4	5847:4	6	TIFFError ( "loadimage" , "Image lacks image width tag" )
FUNCTION_CALL	5847:4	5847:55	7	TIFFError ( "loadimage" , "Image lacks image width tag" )
CALLEE	5847:4	5847:4	8	TIFFError
LEAF_NODE	5847:4	5847:4	9	TIFFError
LEAF_NODE	5847:13	5847:13	8	(
ARGUMENT	5847:14	5847:14	8	"loadimage"
FIELD	5847:14	5847:14	9	"loadimage"
LEAF_NODE	5847:14	5847:14	10	"loadimage"
LEAF_NODE	5847:25	5847:25	8	,
ARGUMENT	5847:26	5847:26	8	"Image lacks image width tag"
FIELD	5847:26	5847:26	9	"Image lacks image width tag"
LEAF_NODE	5847:26	5847:26	10	"Image lacks image width tag"
LEAF_NODE	5847:55	5847:55	8	)
LEAF_NODE	5847:56	5847:56	6	;
SELECTION	5848:2	5849:4	3	
KEYWORD	5848:2	5848:2	4	if
LEAF_NODE	5848:2	5848:2	5	if
LEAF_NODE	5848:4	5848:4	4	(
CONDITION	5848:5	5848:5	4	! TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & length )
EXPR	5848:5	5848:5	5	! TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & length )
UNARY_EXPR	5848:5	5848:7	6	! TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & length )
UNARY_OPERATOR	5848:5	5848:5	7	!
LEAF_NODE	5848:5	5848:5	8	!
FUNCTION_CALL	5848:7	5848:52	7	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & length )
CALLEE	5848:7	5848:7	8	TIFFGetField
LEAF_NODE	5848:7	5848:7	9	TIFFGetField
LEAF_NODE	5848:19	5848:19	8	(
ARGUMENT	5848:20	5848:20	8	in
FIELD	5848:20	5848:20	9	in
LEAF_NODE	5848:20	5848:20	10	in
LEAF_NODE	5848:22	5848:22	8	,
ARGUMENT	5848:24	5848:24	8	TIFFTAG_IMAGELENGTH
FIELD	5848:24	5848:24	9	TIFFTAG_IMAGELENGTH
LEAF_NODE	5848:24	5848:24	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	5848:43	5848:43	8	,
ARGUMENT	5848:45	5848:45	8	& length
UNARY_EXPR	5848:45	5848:46	9	& length
UNARY_OPERATOR	5848:45	5848:45	10	&
LEAF_NODE	5848:45	5848:45	11	&
FIELD	5848:46	5848:46	10	length
LEAF_NODE	5848:46	5848:46	11	length
LEAF_NODE	5848:52	5848:52	8	)
LEAF_NODE	5848:53	5848:53	4	)
STATEMENTS	5849:4	5849:4	4	
EXPR_STATEMENT	5849:4	5849:57	5	TIFFError ( "loadimage" , "Image lacks image length tag" ) ;
EXPR	5849:4	5849:4	6	TIFFError ( "loadimage" , "Image lacks image length tag" )
FUNCTION_CALL	5849:4	5849:56	7	TIFFError ( "loadimage" , "Image lacks image length tag" )
CALLEE	5849:4	5849:4	8	TIFFError
LEAF_NODE	5849:4	5849:4	9	TIFFError
LEAF_NODE	5849:13	5849:13	8	(
ARGUMENT	5849:14	5849:14	8	"loadimage"
FIELD	5849:14	5849:14	9	"loadimage"
LEAF_NODE	5849:14	5849:14	10	"loadimage"
LEAF_NODE	5849:25	5849:25	8	,
ARGUMENT	5849:26	5849:26	8	"Image lacks image length tag"
FIELD	5849:26	5849:26	9	"Image lacks image length tag"
LEAF_NODE	5849:26	5849:26	10	"Image lacks image length tag"
LEAF_NODE	5849:56	5849:56	8	)
LEAF_NODE	5849:57	5849:57	6	;
EXPR_STATEMENT	5850:2	5850:55	3	TIFFGetFieldDefaulted ( in , TIFFTAG_XRESOLUTION , & xres ) ;
EXPR	5850:2	5850:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_XRESOLUTION , & xres )
FUNCTION_CALL	5850:2	5850:54	5	TIFFGetFieldDefaulted ( in , TIFFTAG_XRESOLUTION , & xres )
CALLEE	5850:2	5850:2	6	TIFFGetFieldDefaulted
LEAF_NODE	5850:2	5850:2	7	TIFFGetFieldDefaulted
LEAF_NODE	5850:23	5850:23	6	(
ARGUMENT	5850:24	5850:24	6	in
FIELD	5850:24	5850:24	7	in
LEAF_NODE	5850:24	5850:24	8	in
LEAF_NODE	5850:26	5850:26	6	,
ARGUMENT	5850:28	5850:28	6	TIFFTAG_XRESOLUTION
FIELD	5850:28	5850:28	7	TIFFTAG_XRESOLUTION
LEAF_NODE	5850:28	5850:28	8	TIFFTAG_XRESOLUTION
LEAF_NODE	5850:47	5850:47	6	,
ARGUMENT	5850:49	5850:49	6	& xres
UNARY_EXPR	5850:49	5850:50	7	& xres
UNARY_OPERATOR	5850:49	5850:49	8	&
LEAF_NODE	5850:49	5850:49	9	&
FIELD	5850:50	5850:50	8	xres
LEAF_NODE	5850:50	5850:50	9	xres
LEAF_NODE	5850:54	5850:54	6	)
LEAF_NODE	5850:55	5850:55	4	;
EXPR_STATEMENT	5851:2	5851:55	3	TIFFGetFieldDefaulted ( in , TIFFTAG_YRESOLUTION , & yres ) ;
EXPR	5851:2	5851:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_YRESOLUTION , & yres )
FUNCTION_CALL	5851:2	5851:54	5	TIFFGetFieldDefaulted ( in , TIFFTAG_YRESOLUTION , & yres )
CALLEE	5851:2	5851:2	6	TIFFGetFieldDefaulted
LEAF_NODE	5851:2	5851:2	7	TIFFGetFieldDefaulted
LEAF_NODE	5851:23	5851:23	6	(
ARGUMENT	5851:24	5851:24	6	in
FIELD	5851:24	5851:24	7	in
LEAF_NODE	5851:24	5851:24	8	in
LEAF_NODE	5851:26	5851:26	6	,
ARGUMENT	5851:28	5851:28	6	TIFFTAG_YRESOLUTION
FIELD	5851:28	5851:28	7	TIFFTAG_YRESOLUTION
LEAF_NODE	5851:28	5851:28	8	TIFFTAG_YRESOLUTION
LEAF_NODE	5851:47	5851:47	6	,
ARGUMENT	5851:49	5851:49	6	& yres
UNARY_EXPR	5851:49	5851:50	7	& yres
UNARY_OPERATOR	5851:49	5851:49	8	&
LEAF_NODE	5851:49	5851:49	9	&
FIELD	5851:50	5851:50	8	yres
LEAF_NODE	5851:50	5851:50	9	yres
LEAF_NODE	5851:54	5851:54	6	)
LEAF_NODE	5851:55	5851:55	4	;
SELECTION	5852:2	5853:4	3	
KEYWORD	5852:2	5852:2	4	if
LEAF_NODE	5852:2	5852:2	5	if
LEAF_NODE	5852:5	5852:5	4	(
CONDITION	5852:6	5852:6	4	! TIFFGetFieldDefaulted ( in , TIFFTAG_RESOLUTIONUNIT , & res_unit )
EXPR	5852:6	5852:6	5	! TIFFGetFieldDefaulted ( in , TIFFTAG_RESOLUTIONUNIT , & res_unit )
UNARY_EXPR	5852:6	5852:7	6	! TIFFGetFieldDefaulted ( in , TIFFTAG_RESOLUTIONUNIT , & res_unit )
UNARY_OPERATOR	5852:6	5852:6	7	!
LEAF_NODE	5852:6	5852:6	8	!
FUNCTION_CALL	5852:7	5852:66	7	TIFFGetFieldDefaulted ( in , TIFFTAG_RESOLUTIONUNIT , & res_unit )
CALLEE	5852:7	5852:7	8	TIFFGetFieldDefaulted
LEAF_NODE	5852:7	5852:7	9	TIFFGetFieldDefaulted
LEAF_NODE	5852:28	5852:28	8	(
ARGUMENT	5852:29	5852:29	8	in
FIELD	5852:29	5852:29	9	in
LEAF_NODE	5852:29	5852:29	10	in
LEAF_NODE	5852:31	5852:31	8	,
ARGUMENT	5852:33	5852:33	8	TIFFTAG_RESOLUTIONUNIT
FIELD	5852:33	5852:33	9	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	5852:33	5852:33	10	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	5852:55	5852:55	8	,
ARGUMENT	5852:57	5852:57	8	& res_unit
UNARY_EXPR	5852:57	5852:58	9	& res_unit
UNARY_OPERATOR	5852:57	5852:57	10	&
LEAF_NODE	5852:57	5852:57	11	&
FIELD	5852:58	5852:58	10	res_unit
LEAF_NODE	5852:58	5852:58	11	res_unit
LEAF_NODE	5852:66	5852:66	8	)
LEAF_NODE	5852:67	5852:67	4	)
STATEMENTS	5853:4	5853:4	4	
EXPR_STATEMENT	5853:4	5853:27	5	res_unit = RESUNIT_INCH ;
EXPR	5853:4	5853:4	6	res_unit = RESUNIT_INCH
ASSIGN	5853:4	5853:15	7	res_unit = RESUNIT_INCH
LVAL	5853:4	5853:4	8	res_unit
FIELD	5853:4	5853:4	9	res_unit
LEAF_NODE	5853:4	5853:4	10	res_unit
ASSIGN_OP	5853:13	5853:13	8	=
LEAF_NODE	5853:13	5853:13	9	=
RVAL	5853:15	5853:15	8	RESUNIT_INCH
FIELD	5853:15	5853:15	9	RESUNIT_INCH
LEAF_NODE	5853:15	5853:15	10	RESUNIT_INCH
LEAF_NODE	5853:27	5853:27	6	;
SELECTION	5854:2	5855:4	3	
KEYWORD	5854:2	5854:2	4	if
LEAF_NODE	5854:2	5854:2	5	if
LEAF_NODE	5854:5	5854:5	4	(
CONDITION	5854:6	5854:6	4	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & input_compression )
EXPR	5854:6	5854:6	5	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & input_compression )
UNARY_EXPR	5854:6	5854:7	6	! TIFFGetField ( in , TIFFTAG_COMPRESSION , & input_compression )
UNARY_OPERATOR	5854:6	5854:6	7	!
LEAF_NODE	5854:6	5854:6	8	!
FUNCTION_CALL	5854:7	5854:63	7	TIFFGetField ( in , TIFFTAG_COMPRESSION , & input_compression )
CALLEE	5854:7	5854:7	8	TIFFGetField
LEAF_NODE	5854:7	5854:7	9	TIFFGetField
LEAF_NODE	5854:19	5854:19	8	(
ARGUMENT	5854:20	5854:20	8	in
FIELD	5854:20	5854:20	9	in
LEAF_NODE	5854:20	5854:20	10	in
LEAF_NODE	5854:22	5854:22	8	,
ARGUMENT	5854:24	5854:24	8	TIFFTAG_COMPRESSION
FIELD	5854:24	5854:24	9	TIFFTAG_COMPRESSION
LEAF_NODE	5854:24	5854:24	10	TIFFTAG_COMPRESSION
LEAF_NODE	5854:43	5854:43	8	,
ARGUMENT	5854:45	5854:45	8	& input_compression
UNARY_EXPR	5854:45	5854:46	9	& input_compression
UNARY_OPERATOR	5854:45	5854:45	10	&
LEAF_NODE	5854:45	5854:45	11	&
FIELD	5854:46	5854:46	10	input_compression
LEAF_NODE	5854:46	5854:46	11	input_compression
LEAF_NODE	5854:63	5854:63	8	)
LEAF_NODE	5854:64	5854:64	4	)
STATEMENTS	5855:4	5855:4	4	
EXPR_STATEMENT	5855:4	5855:40	5	input_compression = COMPRESSION_NONE ;
EXPR	5855:4	5855:4	6	input_compression = COMPRESSION_NONE
ASSIGN	5855:4	5855:24	7	input_compression = COMPRESSION_NONE
LVAL	5855:4	5855:4	8	input_compression
FIELD	5855:4	5855:4	9	input_compression
LEAF_NODE	5855:4	5855:4	10	input_compression
ASSIGN_OP	5855:22	5855:22	8	=
LEAF_NODE	5855:22	5855:22	9	=
RVAL	5855:24	5855:24	8	COMPRESSION_NONE
FIELD	5855:24	5855:24	9	COMPRESSION_NONE
LEAF_NODE	5855:24	5855:24	10	COMPRESSION_NONE
LEAF_NODE	5855:40	5855:40	6	;
SIMPLE_DECL	5858:2	5858:24	3	char [ 16 ] compressionid ;
VAR_DECL	5858:2	5858:7	4	char [ 16 ] compressionid
TYPE	5858:2	5858:20	5	char [ 16 ]
TYPE_NAME	5858:2	5858:2	6	char
LEAF_NODE	5858:2	5858:2	7	char
TYPE_SUFFIX	5858:20	5858:23	6	[ 16 ]
LEAF_NODE	5858:20	5858:20	7	[
FIELD	5858:21	5858:21	7	16
LEAF_NODE	5858:21	5858:21	8	16
LEAF_NODE	5858:23	5858:23	7	]
NAME	5858:7	5858:7	5	compressionid
LEAF_NODE	5858:7	5858:7	6	compressionid
LEAF_NODE	5858:24	5858:24	4	;
SELECTION	5860:2	5861:4	3	
KEYWORD	5860:2	5860:2	4	switch
LEAF_NODE	5860:2	5860:2	5	switch
LEAF_NODE	5860:9	5860:9	4	(
CONDITION	5860:10	5860:10	4	input_compression
EXPR	5860:10	5860:10	5	input_compression
FIELD	5860:10	5860:10	6	input_compression
LEAF_NODE	5860:10	5860:10	7	input_compression
LEAF_NODE	5860:27	5860:27	4	)
STATEMENTS	5861:4	5922:4	4	
LEAF_NODE	5861:4	5861:4	5	{
STATEMENTS	5862:4	5921:9	5	
LABEL	5862:4	5862:25	6	case COMPRESSION_NONE :
LEAF_NODE	5862:4	5862:4	7	case
LEAF_NODE	5862:9	5862:9	7	COMPRESSION_NONE
LEAF_NODE	5862:25	5862:25	7	:
EXPR_STATEMENT	5863:2	5863:37	6	strcpy ( compressionid , "None/dump" ) ;
EXPR	5863:2	5863:2	7	strcpy ( compressionid , "None/dump" )
FUNCTION_CALL	5863:2	5863:36	8	strcpy ( compressionid , "None/dump" )
CALLEE	5863:2	5863:2	9	strcpy
LEAF_NODE	5863:2	5863:2	10	strcpy
LEAF_NODE	5863:9	5863:9	9	(
ARGUMENT	5863:10	5863:10	9	compressionid
FIELD	5863:10	5863:10	10	compressionid
LEAF_NODE	5863:10	5863:10	11	compressionid
LEAF_NODE	5863:23	5863:23	9	,
ARGUMENT	5863:25	5863:25	9	"None/dump"
FIELD	5863:25	5863:25	10	"None/dump"
LEAF_NODE	5863:25	5863:25	11	"None/dump"
LEAF_NODE	5863:36	5863:36	9	)
LEAF_NODE	5863:37	5863:37	7	;
JUMP_STATEMENT	5864:9	5864:14	6	break DESTINATION ;
KEYWORD	5864:9	5864:9	7	break
LEAF_NODE	5864:9	5864:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5864:14	5864:14	7	;
LABEL	5865:4	5865:29	6	case COMPRESSION_CCITTRLE :
LEAF_NODE	5865:4	5865:4	7	case
LEAF_NODE	5865:9	5865:9	7	COMPRESSION_CCITTRLE
LEAF_NODE	5865:29	5865:29	7	:
EXPR_STATEMENT	5866:2	5866:39	6	strcpy ( compressionid , "Huffman RLE" ) ;
EXPR	5866:2	5866:2	7	strcpy ( compressionid , "Huffman RLE" )
FUNCTION_CALL	5866:2	5866:38	8	strcpy ( compressionid , "Huffman RLE" )
CALLEE	5866:2	5866:2	9	strcpy
LEAF_NODE	5866:2	5866:2	10	strcpy
LEAF_NODE	5866:9	5866:9	9	(
ARGUMENT	5866:10	5866:10	9	compressionid
FIELD	5866:10	5866:10	10	compressionid
LEAF_NODE	5866:10	5866:10	11	compressionid
LEAF_NODE	5866:23	5866:23	9	,
ARGUMENT	5866:25	5866:25	9	"Huffman RLE"
FIELD	5866:25	5866:25	10	"Huffman RLE"
LEAF_NODE	5866:25	5866:25	11	"Huffman RLE"
LEAF_NODE	5866:38	5866:38	9	)
LEAF_NODE	5866:39	5866:39	7	;
JUMP_STATEMENT	5867:9	5867:14	6	break DESTINATION ;
KEYWORD	5867:9	5867:9	7	break
LEAF_NODE	5867:9	5867:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5867:14	5867:14	7	;
LABEL	5868:4	5868:30	6	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	5868:4	5868:4	7	case
LEAF_NODE	5868:9	5868:9	7	COMPRESSION_CCITTFAX3
LEAF_NODE	5868:30	5868:30	7	:
EXPR_STATEMENT	5869:2	5869:38	6	strcpy ( compressionid , "Group3 Fax" ) ;
EXPR	5869:2	5869:2	7	strcpy ( compressionid , "Group3 Fax" )
FUNCTION_CALL	5869:2	5869:37	8	strcpy ( compressionid , "Group3 Fax" )
CALLEE	5869:2	5869:2	9	strcpy
LEAF_NODE	5869:2	5869:2	10	strcpy
LEAF_NODE	5869:9	5869:9	9	(
ARGUMENT	5869:10	5869:10	9	compressionid
FIELD	5869:10	5869:10	10	compressionid
LEAF_NODE	5869:10	5869:10	11	compressionid
LEAF_NODE	5869:23	5869:23	9	,
ARGUMENT	5869:25	5869:25	9	"Group3 Fax"
FIELD	5869:25	5869:25	10	"Group3 Fax"
LEAF_NODE	5869:25	5869:25	11	"Group3 Fax"
LEAF_NODE	5869:37	5869:37	9	)
LEAF_NODE	5869:38	5869:38	7	;
JUMP_STATEMENT	5870:9	5870:14	6	break DESTINATION ;
KEYWORD	5870:9	5870:9	7	break
LEAF_NODE	5870:9	5870:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5870:14	5870:14	7	;
LABEL	5871:4	5871:30	6	case COMPRESSION_CCITTFAX4 :
LEAF_NODE	5871:4	5871:4	7	case
LEAF_NODE	5871:9	5871:9	7	COMPRESSION_CCITTFAX4
LEAF_NODE	5871:30	5871:30	7	:
EXPR_STATEMENT	5872:2	5872:38	6	strcpy ( compressionid , "Group4 Fax" ) ;
EXPR	5872:2	5872:2	7	strcpy ( compressionid , "Group4 Fax" )
FUNCTION_CALL	5872:2	5872:37	8	strcpy ( compressionid , "Group4 Fax" )
CALLEE	5872:2	5872:2	9	strcpy
LEAF_NODE	5872:2	5872:2	10	strcpy
LEAF_NODE	5872:9	5872:9	9	(
ARGUMENT	5872:10	5872:10	9	compressionid
FIELD	5872:10	5872:10	10	compressionid
LEAF_NODE	5872:10	5872:10	11	compressionid
LEAF_NODE	5872:23	5872:23	9	,
ARGUMENT	5872:25	5872:25	9	"Group4 Fax"
FIELD	5872:25	5872:25	10	"Group4 Fax"
LEAF_NODE	5872:25	5872:25	11	"Group4 Fax"
LEAF_NODE	5872:37	5872:37	9	)
LEAF_NODE	5872:38	5872:38	7	;
JUMP_STATEMENT	5873:9	5873:14	6	break DESTINATION ;
KEYWORD	5873:9	5873:9	7	break
LEAF_NODE	5873:9	5873:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5873:14	5873:14	7	;
LABEL	5874:4	5874:24	6	case COMPRESSION_LZW :
LEAF_NODE	5874:4	5874:4	7	case
LEAF_NODE	5874:9	5874:9	7	COMPRESSION_LZW
LEAF_NODE	5874:24	5874:24	7	:
EXPR_STATEMENT	5875:2	5875:31	6	strcpy ( compressionid , "LZW" ) ;
EXPR	5875:2	5875:2	7	strcpy ( compressionid , "LZW" )
FUNCTION_CALL	5875:2	5875:30	8	strcpy ( compressionid , "LZW" )
CALLEE	5875:2	5875:2	9	strcpy
LEAF_NODE	5875:2	5875:2	10	strcpy
LEAF_NODE	5875:9	5875:9	9	(
ARGUMENT	5875:10	5875:10	9	compressionid
FIELD	5875:10	5875:10	10	compressionid
LEAF_NODE	5875:10	5875:10	11	compressionid
LEAF_NODE	5875:23	5875:23	9	,
ARGUMENT	5875:25	5875:25	9	"LZW"
FIELD	5875:25	5875:25	10	"LZW"
LEAF_NODE	5875:25	5875:25	11	"LZW"
LEAF_NODE	5875:30	5875:30	9	)
LEAF_NODE	5875:31	5875:31	7	;
JUMP_STATEMENT	5876:9	5876:14	6	break DESTINATION ;
KEYWORD	5876:9	5876:9	7	break
LEAF_NODE	5876:9	5876:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5876:14	5876:14	7	;
LABEL	5877:4	5877:26	6	case COMPRESSION_OJPEG :
LEAF_NODE	5877:4	5877:4	7	case
LEAF_NODE	5877:9	5877:9	7	COMPRESSION_OJPEG
LEAF_NODE	5877:26	5877:26	7	:
EXPR_STATEMENT	5878:2	5878:36	6	strcpy ( compressionid , "Old Jpeg" ) ;
EXPR	5878:2	5878:2	7	strcpy ( compressionid , "Old Jpeg" )
FUNCTION_CALL	5878:2	5878:35	8	strcpy ( compressionid , "Old Jpeg" )
CALLEE	5878:2	5878:2	9	strcpy
LEAF_NODE	5878:2	5878:2	10	strcpy
LEAF_NODE	5878:9	5878:9	9	(
ARGUMENT	5878:10	5878:10	9	compressionid
FIELD	5878:10	5878:10	10	compressionid
LEAF_NODE	5878:10	5878:10	11	compressionid
LEAF_NODE	5878:23	5878:23	9	,
ARGUMENT	5878:25	5878:25	9	"Old Jpeg"
FIELD	5878:25	5878:25	10	"Old Jpeg"
LEAF_NODE	5878:25	5878:25	11	"Old Jpeg"
LEAF_NODE	5878:35	5878:35	9	)
LEAF_NODE	5878:36	5878:36	7	;
JUMP_STATEMENT	5879:9	5879:14	6	break DESTINATION ;
KEYWORD	5879:9	5879:9	7	break
LEAF_NODE	5879:9	5879:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5879:14	5879:14	7	;
LABEL	5880:4	5880:25	6	case COMPRESSION_JPEG :
LEAF_NODE	5880:4	5880:4	7	case
LEAF_NODE	5880:9	5880:9	7	COMPRESSION_JPEG
LEAF_NODE	5880:25	5880:25	7	:
EXPR_STATEMENT	5881:2	5881:36	6	strcpy ( compressionid , "New Jpeg" ) ;
EXPR	5881:2	5881:2	7	strcpy ( compressionid , "New Jpeg" )
FUNCTION_CALL	5881:2	5881:35	8	strcpy ( compressionid , "New Jpeg" )
CALLEE	5881:2	5881:2	9	strcpy
LEAF_NODE	5881:2	5881:2	10	strcpy
LEAF_NODE	5881:9	5881:9	9	(
ARGUMENT	5881:10	5881:10	9	compressionid
FIELD	5881:10	5881:10	10	compressionid
LEAF_NODE	5881:10	5881:10	11	compressionid
LEAF_NODE	5881:23	5881:23	9	,
ARGUMENT	5881:25	5881:25	9	"New Jpeg"
FIELD	5881:25	5881:25	10	"New Jpeg"
LEAF_NODE	5881:25	5881:25	11	"New Jpeg"
LEAF_NODE	5881:35	5881:35	9	)
LEAF_NODE	5881:36	5881:36	7	;
JUMP_STATEMENT	5882:9	5882:14	6	break DESTINATION ;
KEYWORD	5882:9	5882:9	7	break
LEAF_NODE	5882:9	5882:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5882:14	5882:14	7	;
LABEL	5883:4	5883:25	6	case COMPRESSION_NEXT :
LEAF_NODE	5883:4	5883:4	7	case
LEAF_NODE	5883:9	5883:9	7	COMPRESSION_NEXT
LEAF_NODE	5883:25	5883:25	7	:
EXPR_STATEMENT	5884:2	5884:36	6	strcpy ( compressionid , "Next RLE" ) ;
EXPR	5884:2	5884:2	7	strcpy ( compressionid , "Next RLE" )
FUNCTION_CALL	5884:2	5884:35	8	strcpy ( compressionid , "Next RLE" )
CALLEE	5884:2	5884:2	9	strcpy
LEAF_NODE	5884:2	5884:2	10	strcpy
LEAF_NODE	5884:9	5884:9	9	(
ARGUMENT	5884:10	5884:10	9	compressionid
FIELD	5884:10	5884:10	10	compressionid
LEAF_NODE	5884:10	5884:10	11	compressionid
LEAF_NODE	5884:23	5884:23	9	,
ARGUMENT	5884:25	5884:25	9	"Next RLE"
FIELD	5884:25	5884:25	10	"Next RLE"
LEAF_NODE	5884:25	5884:25	11	"Next RLE"
LEAF_NODE	5884:35	5884:35	9	)
LEAF_NODE	5884:36	5884:36	7	;
JUMP_STATEMENT	5885:9	5885:14	6	break DESTINATION ;
KEYWORD	5885:9	5885:9	7	break
LEAF_NODE	5885:9	5885:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5885:14	5885:14	7	;
LABEL	5886:4	5886:30	6	case COMPRESSION_CCITTRLEW :
LEAF_NODE	5886:4	5886:4	7	case
LEAF_NODE	5886:9	5886:9	7	COMPRESSION_CCITTRLEW
LEAF_NODE	5886:30	5886:30	7	:
EXPR_STATEMENT	5887:2	5887:36	6	strcpy ( compressionid , "CITTRLEW" ) ;
EXPR	5887:2	5887:2	7	strcpy ( compressionid , "CITTRLEW" )
FUNCTION_CALL	5887:2	5887:35	8	strcpy ( compressionid , "CITTRLEW" )
CALLEE	5887:2	5887:2	9	strcpy
LEAF_NODE	5887:2	5887:2	10	strcpy
LEAF_NODE	5887:9	5887:9	9	(
ARGUMENT	5887:10	5887:10	9	compressionid
FIELD	5887:10	5887:10	10	compressionid
LEAF_NODE	5887:10	5887:10	11	compressionid
LEAF_NODE	5887:23	5887:23	9	,
ARGUMENT	5887:25	5887:25	9	"CITTRLEW"
FIELD	5887:25	5887:25	10	"CITTRLEW"
LEAF_NODE	5887:25	5887:25	11	"CITTRLEW"
LEAF_NODE	5887:35	5887:35	9	)
LEAF_NODE	5887:36	5887:36	7	;
JUMP_STATEMENT	5888:9	5888:14	6	break DESTINATION ;
KEYWORD	5888:9	5888:9	7	break
LEAF_NODE	5888:9	5888:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5888:14	5888:14	7	;
LABEL	5889:4	5889:29	6	case COMPRESSION_PACKBITS :
LEAF_NODE	5889:4	5889:4	7	case
LEAF_NODE	5889:9	5889:9	7	COMPRESSION_PACKBITS
LEAF_NODE	5889:29	5889:29	7	:
EXPR_STATEMENT	5890:2	5890:40	6	strcpy ( compressionid , "Mac Packbits" ) ;
EXPR	5890:2	5890:2	7	strcpy ( compressionid , "Mac Packbits" )
FUNCTION_CALL	5890:2	5890:39	8	strcpy ( compressionid , "Mac Packbits" )
CALLEE	5890:2	5890:2	9	strcpy
LEAF_NODE	5890:2	5890:2	10	strcpy
LEAF_NODE	5890:9	5890:9	9	(
ARGUMENT	5890:10	5890:10	9	compressionid
FIELD	5890:10	5890:10	10	compressionid
LEAF_NODE	5890:10	5890:10	11	compressionid
LEAF_NODE	5890:23	5890:23	9	,
ARGUMENT	5890:25	5890:25	9	"Mac Packbits"
FIELD	5890:25	5890:25	10	"Mac Packbits"
LEAF_NODE	5890:25	5890:25	11	"Mac Packbits"
LEAF_NODE	5890:39	5890:39	9	)
LEAF_NODE	5890:40	5890:40	7	;
JUMP_STATEMENT	5891:9	5891:14	6	break DESTINATION ;
KEYWORD	5891:9	5891:9	7	break
LEAF_NODE	5891:9	5891:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5891:14	5891:14	7	;
LABEL	5892:4	5892:32	6	case COMPRESSION_THUNDERSCAN :
LEAF_NODE	5892:4	5892:4	7	case
LEAF_NODE	5892:9	5892:9	7	COMPRESSION_THUNDERSCAN
LEAF_NODE	5892:32	5892:32	7	:
EXPR_STATEMENT	5893:2	5893:39	6	strcpy ( compressionid , "Thunderscan" ) ;
EXPR	5893:2	5893:2	7	strcpy ( compressionid , "Thunderscan" )
FUNCTION_CALL	5893:2	5893:38	8	strcpy ( compressionid , "Thunderscan" )
CALLEE	5893:2	5893:2	9	strcpy
LEAF_NODE	5893:2	5893:2	10	strcpy
LEAF_NODE	5893:9	5893:9	9	(
ARGUMENT	5893:10	5893:10	9	compressionid
FIELD	5893:10	5893:10	10	compressionid
LEAF_NODE	5893:10	5893:10	11	compressionid
LEAF_NODE	5893:23	5893:23	9	,
ARGUMENT	5893:25	5893:25	9	"Thunderscan"
FIELD	5893:25	5893:25	10	"Thunderscan"
LEAF_NODE	5893:25	5893:25	11	"Thunderscan"
LEAF_NODE	5893:38	5893:38	9	)
LEAF_NODE	5893:39	5893:39	7	;
JUMP_STATEMENT	5894:9	5894:14	6	break DESTINATION ;
KEYWORD	5894:9	5894:9	7	break
LEAF_NODE	5894:9	5894:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5894:14	5894:14	7	;
LABEL	5895:4	5895:29	6	case COMPRESSION_IT8CTPAD :
LEAF_NODE	5895:4	5895:4	7	case
LEAF_NODE	5895:9	5895:9	7	COMPRESSION_IT8CTPAD
LEAF_NODE	5895:29	5895:29	7	:
EXPR_STATEMENT	5896:2	5896:38	6	strcpy ( compressionid , "IT8 padded" ) ;
EXPR	5896:2	5896:2	7	strcpy ( compressionid , "IT8 padded" )
FUNCTION_CALL	5896:2	5896:37	8	strcpy ( compressionid , "IT8 padded" )
CALLEE	5896:2	5896:2	9	strcpy
LEAF_NODE	5896:2	5896:2	10	strcpy
LEAF_NODE	5896:9	5896:9	9	(
ARGUMENT	5896:10	5896:10	9	compressionid
FIELD	5896:10	5896:10	10	compressionid
LEAF_NODE	5896:10	5896:10	11	compressionid
LEAF_NODE	5896:23	5896:23	9	,
ARGUMENT	5896:25	5896:25	9	"IT8 padded"
FIELD	5896:25	5896:25	10	"IT8 padded"
LEAF_NODE	5896:25	5896:25	11	"IT8 padded"
LEAF_NODE	5896:37	5896:37	9	)
LEAF_NODE	5896:38	5896:38	7	;
JUMP_STATEMENT	5897:9	5897:14	6	break DESTINATION ;
KEYWORD	5897:9	5897:9	7	break
LEAF_NODE	5897:9	5897:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5897:14	5897:14	7	;
LABEL	5898:4	5898:26	6	case COMPRESSION_IT8LW :
LEAF_NODE	5898:4	5898:4	7	case
LEAF_NODE	5898:9	5898:9	7	COMPRESSION_IT8LW
LEAF_NODE	5898:26	5898:26	7	:
EXPR_STATEMENT	5899:2	5899:35	6	strcpy ( compressionid , "IT8 RLE" ) ;
EXPR	5899:2	5899:2	7	strcpy ( compressionid , "IT8 RLE" )
FUNCTION_CALL	5899:2	5899:34	8	strcpy ( compressionid , "IT8 RLE" )
CALLEE	5899:2	5899:2	9	strcpy
LEAF_NODE	5899:2	5899:2	10	strcpy
LEAF_NODE	5899:9	5899:9	9	(
ARGUMENT	5899:10	5899:10	9	compressionid
FIELD	5899:10	5899:10	10	compressionid
LEAF_NODE	5899:10	5899:10	11	compressionid
LEAF_NODE	5899:23	5899:23	9	,
ARGUMENT	5899:25	5899:25	9	"IT8 RLE"
FIELD	5899:25	5899:25	10	"IT8 RLE"
LEAF_NODE	5899:25	5899:25	11	"IT8 RLE"
LEAF_NODE	5899:34	5899:34	9	)
LEAF_NODE	5899:35	5899:35	7	;
JUMP_STATEMENT	5900:9	5900:14	6	break DESTINATION ;
KEYWORD	5900:9	5900:9	7	break
LEAF_NODE	5900:9	5900:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5900:14	5900:14	7	;
LABEL	5901:4	5901:26	6	case COMPRESSION_IT8MP :
LEAF_NODE	5901:4	5901:4	7	case
LEAF_NODE	5901:9	5901:9	7	COMPRESSION_IT8MP
LEAF_NODE	5901:26	5901:26	7	:
EXPR_STATEMENT	5902:2	5902:36	6	strcpy ( compressionid , "IT8 mono" ) ;
EXPR	5902:2	5902:2	7	strcpy ( compressionid , "IT8 mono" )
FUNCTION_CALL	5902:2	5902:35	8	strcpy ( compressionid , "IT8 mono" )
CALLEE	5902:2	5902:2	9	strcpy
LEAF_NODE	5902:2	5902:2	10	strcpy
LEAF_NODE	5902:9	5902:9	9	(
ARGUMENT	5902:10	5902:10	9	compressionid
FIELD	5902:10	5902:10	10	compressionid
LEAF_NODE	5902:10	5902:10	11	compressionid
LEAF_NODE	5902:23	5902:23	9	,
ARGUMENT	5902:25	5902:25	9	"IT8 mono"
FIELD	5902:25	5902:25	10	"IT8 mono"
LEAF_NODE	5902:25	5902:25	11	"IT8 mono"
LEAF_NODE	5902:35	5902:35	9	)
LEAF_NODE	5902:36	5902:36	7	;
JUMP_STATEMENT	5903:9	5903:14	6	break DESTINATION ;
KEYWORD	5903:9	5903:9	7	break
LEAF_NODE	5903:9	5903:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5903:14	5903:14	7	;
LABEL	5904:4	5904:26	6	case COMPRESSION_IT8BL :
LEAF_NODE	5904:4	5904:4	7	case
LEAF_NODE	5904:9	5904:9	7	COMPRESSION_IT8BL
LEAF_NODE	5904:26	5904:26	7	:
EXPR_STATEMENT	5905:2	5905:39	6	strcpy ( compressionid , "IT8 lineart" ) ;
EXPR	5905:2	5905:2	7	strcpy ( compressionid , "IT8 lineart" )
FUNCTION_CALL	5905:2	5905:38	8	strcpy ( compressionid , "IT8 lineart" )
CALLEE	5905:2	5905:2	9	strcpy
LEAF_NODE	5905:2	5905:2	10	strcpy
LEAF_NODE	5905:9	5905:9	9	(
ARGUMENT	5905:10	5905:10	9	compressionid
FIELD	5905:10	5905:10	10	compressionid
LEAF_NODE	5905:10	5905:10	11	compressionid
LEAF_NODE	5905:23	5905:23	9	,
ARGUMENT	5905:25	5905:25	9	"IT8 lineart"
FIELD	5905:25	5905:25	10	"IT8 lineart"
LEAF_NODE	5905:25	5905:25	11	"IT8 lineart"
LEAF_NODE	5905:38	5905:38	9	)
LEAF_NODE	5905:39	5905:39	7	;
JUMP_STATEMENT	5906:9	5906:14	6	break DESTINATION ;
KEYWORD	5906:9	5906:9	7	break
LEAF_NODE	5906:9	5906:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5906:14	5906:14	7	;
LABEL	5907:4	5907:30	6	case COMPRESSION_PIXARFILM :
LEAF_NODE	5907:4	5907:4	7	case
LEAF_NODE	5907:9	5907:9	7	COMPRESSION_PIXARFILM
LEAF_NODE	5907:30	5907:30	7	:
EXPR_STATEMENT	5908:2	5908:40	6	strcpy ( compressionid , "Pixar 10 bit" ) ;
EXPR	5908:2	5908:2	7	strcpy ( compressionid , "Pixar 10 bit" )
FUNCTION_CALL	5908:2	5908:39	8	strcpy ( compressionid , "Pixar 10 bit" )
CALLEE	5908:2	5908:2	9	strcpy
LEAF_NODE	5908:2	5908:2	10	strcpy
LEAF_NODE	5908:9	5908:9	9	(
ARGUMENT	5908:10	5908:10	9	compressionid
FIELD	5908:10	5908:10	10	compressionid
LEAF_NODE	5908:10	5908:10	11	compressionid
LEAF_NODE	5908:23	5908:23	9	,
ARGUMENT	5908:25	5908:25	9	"Pixar 10 bit"
FIELD	5908:25	5908:25	10	"Pixar 10 bit"
LEAF_NODE	5908:25	5908:25	11	"Pixar 10 bit"
LEAF_NODE	5908:39	5908:39	9	)
LEAF_NODE	5908:40	5908:40	7	;
JUMP_STATEMENT	5909:9	5909:14	6	break DESTINATION ;
KEYWORD	5909:9	5909:9	7	break
LEAF_NODE	5909:9	5909:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5909:14	5909:14	7	;
LABEL	5910:4	5910:29	6	case COMPRESSION_PIXARLOG :
LEAF_NODE	5910:4	5910:4	7	case
LEAF_NODE	5910:9	5910:9	7	COMPRESSION_PIXARLOG
LEAF_NODE	5910:29	5910:29	7	:
EXPR_STATEMENT	5911:2	5911:39	6	strcpy ( compressionid , "Pixar 11bit" ) ;
EXPR	5911:2	5911:2	7	strcpy ( compressionid , "Pixar 11bit" )
FUNCTION_CALL	5911:2	5911:38	8	strcpy ( compressionid , "Pixar 11bit" )
CALLEE	5911:2	5911:2	9	strcpy
LEAF_NODE	5911:2	5911:2	10	strcpy
LEAF_NODE	5911:9	5911:9	9	(
ARGUMENT	5911:10	5911:10	9	compressionid
FIELD	5911:10	5911:10	10	compressionid
LEAF_NODE	5911:10	5911:10	11	compressionid
LEAF_NODE	5911:23	5911:23	9	,
ARGUMENT	5911:25	5911:25	9	"Pixar 11bit"
FIELD	5911:25	5911:25	10	"Pixar 11bit"
LEAF_NODE	5911:25	5911:25	11	"Pixar 11bit"
LEAF_NODE	5911:38	5911:38	9	)
LEAF_NODE	5911:39	5911:39	7	;
JUMP_STATEMENT	5912:9	5912:14	6	break DESTINATION ;
KEYWORD	5912:9	5912:9	7	break
LEAF_NODE	5912:9	5912:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5912:14	5912:14	7	;
LABEL	5913:4	5913:28	6	case COMPRESSION_DEFLATE :
LEAF_NODE	5913:4	5913:4	7	case
LEAF_NODE	5913:9	5913:9	7	COMPRESSION_DEFLATE
LEAF_NODE	5913:28	5913:28	7	:
EXPR_STATEMENT	5914:2	5914:35	6	strcpy ( compressionid , "Deflate" ) ;
EXPR	5914:2	5914:2	7	strcpy ( compressionid , "Deflate" )
FUNCTION_CALL	5914:2	5914:34	8	strcpy ( compressionid , "Deflate" )
CALLEE	5914:2	5914:2	9	strcpy
LEAF_NODE	5914:2	5914:2	10	strcpy
LEAF_NODE	5914:9	5914:9	9	(
ARGUMENT	5914:10	5914:10	9	compressionid
FIELD	5914:10	5914:10	10	compressionid
LEAF_NODE	5914:10	5914:10	11	compressionid
LEAF_NODE	5914:23	5914:23	9	,
ARGUMENT	5914:25	5914:25	9	"Deflate"
FIELD	5914:25	5914:25	10	"Deflate"
LEAF_NODE	5914:25	5914:25	11	"Deflate"
LEAF_NODE	5914:34	5914:34	9	)
LEAF_NODE	5914:35	5914:35	7	;
JUMP_STATEMENT	5915:9	5915:14	6	break DESTINATION ;
KEYWORD	5915:9	5915:9	7	break
LEAF_NODE	5915:9	5915:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5915:14	5915:14	7	;
LABEL	5916:4	5916:34	6	case COMPRESSION_ADOBE_DEFLATE :
LEAF_NODE	5916:4	5916:4	7	case
LEAF_NODE	5916:9	5916:9	7	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	5916:34	5916:34	7	:
EXPR_STATEMENT	5917:2	5917:41	6	strcpy ( compressionid , "Adobe deflate" ) ;
EXPR	5917:2	5917:2	7	strcpy ( compressionid , "Adobe deflate" )
FUNCTION_CALL	5917:2	5917:40	8	strcpy ( compressionid , "Adobe deflate" )
CALLEE	5917:2	5917:2	9	strcpy
LEAF_NODE	5917:2	5917:2	10	strcpy
LEAF_NODE	5917:9	5917:9	9	(
ARGUMENT	5917:10	5917:10	9	compressionid
FIELD	5917:10	5917:10	10	compressionid
LEAF_NODE	5917:10	5917:10	11	compressionid
LEAF_NODE	5917:23	5917:23	9	,
ARGUMENT	5917:25	5917:25	9	"Adobe deflate"
FIELD	5917:25	5917:25	10	"Adobe deflate"
LEAF_NODE	5917:25	5917:25	11	"Adobe deflate"
LEAF_NODE	5917:40	5917:40	9	)
LEAF_NODE	5917:41	5917:41	7	;
JUMP_STATEMENT	5918:9	5918:14	6	break DESTINATION ;
KEYWORD	5918:9	5918:9	7	break
LEAF_NODE	5918:9	5918:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5918:14	5918:14	7	;
LABEL	5919:4	5919:11	6	default :
LEAF_NODE	5919:4	5919:4	7	default
LEAF_NODE	5919:11	5919:11	7	:
EXPR_STATEMENT	5920:2	5920:40	6	strcpy ( compressionid , "None/unknown" ) ;
EXPR	5920:2	5920:2	7	strcpy ( compressionid , "None/unknown" )
FUNCTION_CALL	5920:2	5920:39	8	strcpy ( compressionid , "None/unknown" )
CALLEE	5920:2	5920:2	9	strcpy
LEAF_NODE	5920:2	5920:2	10	strcpy
LEAF_NODE	5920:9	5920:9	9	(
ARGUMENT	5920:10	5920:10	9	compressionid
FIELD	5920:10	5920:10	10	compressionid
LEAF_NODE	5920:10	5920:10	11	compressionid
LEAF_NODE	5920:23	5920:23	9	,
ARGUMENT	5920:25	5920:25	9	"None/unknown"
FIELD	5920:25	5920:25	10	"None/unknown"
LEAF_NODE	5920:25	5920:25	11	"None/unknown"
LEAF_NODE	5920:39	5920:39	9	)
LEAF_NODE	5920:40	5920:40	7	;
JUMP_STATEMENT	5921:9	5921:14	6	break DESTINATION ;
KEYWORD	5921:9	5921:9	7	break
LEAF_NODE	5921:9	5921:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5921:14	5921:14	7	;
LEAF_NODE	5922:4	5922:4	5	}
EXPR_STATEMENT	5923:2	5923:63	3	TIFFError ( "loadImage" , "Input compression %s" , compressionid ) ;
EXPR	5923:2	5923:2	4	TIFFError ( "loadImage" , "Input compression %s" , compressionid )
FUNCTION_CALL	5923:2	5923:62	5	TIFFError ( "loadImage" , "Input compression %s" , compressionid )
CALLEE	5923:2	5923:2	6	TIFFError
LEAF_NODE	5923:2	5923:2	7	TIFFError
LEAF_NODE	5923:11	5923:11	6	(
ARGUMENT	5923:12	5923:12	6	"loadImage"
FIELD	5923:12	5923:12	7	"loadImage"
LEAF_NODE	5923:12	5923:12	8	"loadImage"
LEAF_NODE	5923:23	5923:23	6	,
ARGUMENT	5923:25	5923:25	6	"Input compression %s"
FIELD	5923:25	5923:25	7	"Input compression %s"
LEAF_NODE	5923:25	5923:25	8	"Input compression %s"
LEAF_NODE	5923:47	5923:47	6	,
ARGUMENT	5923:49	5923:49	6	compressionid
FIELD	5923:49	5923:49	7	compressionid
LEAF_NODE	5923:49	5923:49	8	compressionid
LEAF_NODE	5923:62	5923:62	6	)
LEAF_NODE	5923:63	5923:63	4	;
EXPR_STATEMENT	5926:2	5926:37	3	scanlinesize = TIFFScanlineSize ( in ) ;
EXPR	5926:2	5926:2	4	scanlinesize = TIFFScanlineSize ( in )
ASSIGN	5926:2	5926:17	5	scanlinesize = TIFFScanlineSize ( in )
LVAL	5926:2	5926:2	6	scanlinesize
FIELD	5926:2	5926:2	7	scanlinesize
LEAF_NODE	5926:2	5926:2	8	scanlinesize
ASSIGN_OP	5926:15	5926:15	6	=
LEAF_NODE	5926:15	5926:15	7	=
RVAL	5926:17	5926:17	6	TIFFScanlineSize ( in )
FUNCTION_CALL	5926:17	5926:36	7	TIFFScanlineSize ( in )
CALLEE	5926:17	5926:17	8	TIFFScanlineSize
LEAF_NODE	5926:17	5926:17	9	TIFFScanlineSize
LEAF_NODE	5926:33	5926:33	8	(
ARGUMENT	5926:34	5926:34	8	in
FIELD	5926:34	5926:34	9	in
LEAF_NODE	5926:34	5926:34	10	in
LEAF_NODE	5926:36	5926:36	8	)
LEAF_NODE	5926:37	5926:37	4	;
EXPR_STATEMENT	5927:2	5927:18	3	image -> bps = bps ;
EXPR	5927:2	5927:2	4	image -> bps = bps
ASSIGN	5927:2	5927:15	5	image -> bps = bps
LVAL	5927:2	5927:2	6	image -> bps
FIELD	5927:2	5927:9	7	image -> bps
LEAF_NODE	5927:2	5927:2	8	image
LEAF_NODE	5927:7	5927:7	8	->
LEAF_NODE	5927:9	5927:9	8	bps
ASSIGN_OP	5927:13	5927:13	6	=
LEAF_NODE	5927:13	5927:13	7	=
RVAL	5927:15	5927:15	6	bps
FIELD	5927:15	5927:15	7	bps
LEAF_NODE	5927:15	5927:15	8	bps
LEAF_NODE	5927:18	5927:18	4	;
EXPR_STATEMENT	5928:2	5928:18	3	image -> spp = spp ;
EXPR	5928:2	5928:2	4	image -> spp = spp
ASSIGN	5928:2	5928:15	5	image -> spp = spp
LVAL	5928:2	5928:2	6	image -> spp
FIELD	5928:2	5928:9	7	image -> spp
LEAF_NODE	5928:2	5928:2	8	image
LEAF_NODE	5928:7	5928:7	8	->
LEAF_NODE	5928:9	5928:9	8	spp
ASSIGN_OP	5928:13	5928:13	6	=
LEAF_NODE	5928:13	5928:13	7	=
RVAL	5928:15	5928:15	6	spp
FIELD	5928:15	5928:15	7	spp
LEAF_NODE	5928:15	5928:15	8	spp
LEAF_NODE	5928:18	5928:18	4	;
EXPR_STATEMENT	5929:2	5929:24	3	image -> planar = planar ;
EXPR	5929:2	5929:2	4	image -> planar = planar
ASSIGN	5929:2	5929:18	5	image -> planar = planar
LVAL	5929:2	5929:2	6	image -> planar
FIELD	5929:2	5929:9	7	image -> planar
LEAF_NODE	5929:2	5929:2	8	image
LEAF_NODE	5929:7	5929:7	8	->
LEAF_NODE	5929:9	5929:9	8	planar
ASSIGN_OP	5929:16	5929:16	6	=
LEAF_NODE	5929:16	5929:16	7	=
RVAL	5929:18	5929:18	6	planar
FIELD	5929:18	5929:18	7	planar
LEAF_NODE	5929:18	5929:18	8	planar
LEAF_NODE	5929:24	5929:24	4	;
EXPR_STATEMENT	5930:2	5930:22	3	image -> width = width ;
EXPR	5930:2	5930:2	4	image -> width = width
ASSIGN	5930:2	5930:17	5	image -> width = width
LVAL	5930:2	5930:2	6	image -> width
FIELD	5930:2	5930:9	7	image -> width
LEAF_NODE	5930:2	5930:2	8	image
LEAF_NODE	5930:7	5930:7	8	->
LEAF_NODE	5930:9	5930:9	8	width
ASSIGN_OP	5930:15	5930:15	6	=
LEAF_NODE	5930:15	5930:15	7	=
RVAL	5930:17	5930:17	6	width
FIELD	5930:17	5930:17	7	width
LEAF_NODE	5930:17	5930:17	8	width
LEAF_NODE	5930:22	5930:22	4	;
EXPR_STATEMENT	5931:2	5931:24	3	image -> length = length ;
EXPR	5931:2	5931:2	4	image -> length = length
ASSIGN	5931:2	5931:18	5	image -> length = length
LVAL	5931:2	5931:2	6	image -> length
FIELD	5931:2	5931:9	7	image -> length
LEAF_NODE	5931:2	5931:2	8	image
LEAF_NODE	5931:7	5931:7	8	->
LEAF_NODE	5931:9	5931:9	8	length
ASSIGN_OP	5931:16	5931:16	6	=
LEAF_NODE	5931:16	5931:16	7	=
RVAL	5931:18	5931:18	6	length
FIELD	5931:18	5931:18	7	length
LEAF_NODE	5931:18	5931:18	8	length
LEAF_NODE	5931:24	5931:24	4	;
EXPR_STATEMENT	5932:2	5932:20	3	image -> xres = xres ;
EXPR	5932:2	5932:2	4	image -> xres = xres
ASSIGN	5932:2	5932:16	5	image -> xres = xres
LVAL	5932:2	5932:2	6	image -> xres
FIELD	5932:2	5932:9	7	image -> xres
LEAF_NODE	5932:2	5932:2	8	image
LEAF_NODE	5932:7	5932:7	8	->
LEAF_NODE	5932:9	5932:9	8	xres
ASSIGN_OP	5932:14	5932:14	6	=
LEAF_NODE	5932:14	5932:14	7	=
RVAL	5932:16	5932:16	6	xres
FIELD	5932:16	5932:16	7	xres
LEAF_NODE	5932:16	5932:16	8	xres
LEAF_NODE	5932:20	5932:20	4	;
EXPR_STATEMENT	5933:2	5933:20	3	image -> yres = yres ;
EXPR	5933:2	5933:2	4	image -> yres = yres
ASSIGN	5933:2	5933:16	5	image -> yres = yres
LVAL	5933:2	5933:2	6	image -> yres
FIELD	5933:2	5933:9	7	image -> yres
LEAF_NODE	5933:2	5933:2	8	image
LEAF_NODE	5933:7	5933:7	8	->
LEAF_NODE	5933:9	5933:9	8	yres
ASSIGN_OP	5933:14	5933:14	6	=
LEAF_NODE	5933:14	5933:14	7	=
RVAL	5933:16	5933:16	6	yres
FIELD	5933:16	5933:16	7	yres
LEAF_NODE	5933:16	5933:16	8	yres
LEAF_NODE	5933:20	5933:20	4	;
EXPR_STATEMENT	5934:2	5934:28	3	image -> res_unit = res_unit ;
EXPR	5934:2	5934:2	4	image -> res_unit = res_unit
ASSIGN	5934:2	5934:20	5	image -> res_unit = res_unit
LVAL	5934:2	5934:2	6	image -> res_unit
FIELD	5934:2	5934:9	7	image -> res_unit
LEAF_NODE	5934:2	5934:2	8	image
LEAF_NODE	5934:7	5934:7	8	->
LEAF_NODE	5934:9	5934:9	8	res_unit
ASSIGN_OP	5934:18	5934:18	6	=
LEAF_NODE	5934:18	5934:18	7	=
RVAL	5934:20	5934:20	6	res_unit
FIELD	5934:20	5934:20	7	res_unit
LEAF_NODE	5934:20	5934:20	8	res_unit
LEAF_NODE	5934:28	5934:28	4	;
EXPR_STATEMENT	5935:2	5935:40	3	image -> compression = input_compression ;
EXPR	5935:2	5935:2	4	image -> compression = input_compression
ASSIGN	5935:2	5935:23	5	image -> compression = input_compression
LVAL	5935:2	5935:2	6	image -> compression
FIELD	5935:2	5935:9	7	image -> compression
LEAF_NODE	5935:2	5935:2	8	image
LEAF_NODE	5935:7	5935:7	8	->
LEAF_NODE	5935:9	5935:9	8	compression
ASSIGN_OP	5935:21	5935:21	6	=
LEAF_NODE	5935:21	5935:21	7	=
RVAL	5935:23	5935:23	6	input_compression
FIELD	5935:23	5935:23	7	input_compression
LEAF_NODE	5935:23	5935:23	8	input_compression
LEAF_NODE	5935:40	5935:40	4	;
EXPR_STATEMENT	5936:2	5936:40	3	image -> photometric = input_photometric ;
EXPR	5936:2	5936:2	4	image -> photometric = input_photometric
ASSIGN	5936:2	5936:23	5	image -> photometric = input_photometric
LVAL	5936:2	5936:2	6	image -> photometric
FIELD	5936:2	5936:9	7	image -> photometric
LEAF_NODE	5936:2	5936:2	8	image
LEAF_NODE	5936:7	5936:7	8	->
LEAF_NODE	5936:9	5936:9	8	photometric
ASSIGN_OP	5936:21	5936:21	6	=
LEAF_NODE	5936:21	5936:21	7	=
RVAL	5936:23	5936:23	6	input_photometric
FIELD	5936:23	5936:23	7	input_photometric
LEAF_NODE	5936:23	5936:23	8	input_photometric
LEAF_NODE	5936:40	5936:40	4	;
SIMPLE_DECL	5938:2	5938:24	3	char [ 12 ] photometricid ;
VAR_DECL	5938:2	5938:7	4	char [ 12 ] photometricid
TYPE	5938:2	5938:20	5	char [ 12 ]
TYPE_NAME	5938:2	5938:2	6	char
LEAF_NODE	5938:2	5938:2	7	char
TYPE_SUFFIX	5938:20	5938:23	6	[ 12 ]
LEAF_NODE	5938:20	5938:20	7	[
FIELD	5938:21	5938:21	7	12
LEAF_NODE	5938:21	5938:21	8	12
LEAF_NODE	5938:23	5938:23	7	]
NAME	5938:7	5938:7	5	photometricid
LEAF_NODE	5938:7	5938:7	6	photometricid
LEAF_NODE	5938:24	5938:24	4	;
SELECTION	5940:2	5941:4	3	
KEYWORD	5940:2	5940:2	4	switch
LEAF_NODE	5940:2	5940:2	5	switch
LEAF_NODE	5940:9	5940:9	4	(
CONDITION	5940:10	5940:10	4	input_photometric
EXPR	5940:10	5940:10	5	input_photometric
FIELD	5940:10	5940:10	6	input_photometric
LEAF_NODE	5940:10	5940:10	7	input_photometric
LEAF_NODE	5940:27	5940:27	4	)
STATEMENTS	5941:4	5981:4	4	
LEAF_NODE	5941:4	5941:4	5	{
STATEMENTS	5942:4	5980:9	5	
LABEL	5942:4	5942:31	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	5942:4	5942:4	7	case
LEAF_NODE	5942:9	5942:9	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	5942:31	5942:31	7	:
EXPR_STATEMENT	5943:9	5943:45	6	strcpy ( photometricid , "MinIsWhite" ) ;
EXPR	5943:9	5943:9	7	strcpy ( photometricid , "MinIsWhite" )
FUNCTION_CALL	5943:9	5943:44	8	strcpy ( photometricid , "MinIsWhite" )
CALLEE	5943:9	5943:9	9	strcpy
LEAF_NODE	5943:9	5943:9	10	strcpy
LEAF_NODE	5943:16	5943:16	9	(
ARGUMENT	5943:17	5943:17	9	photometricid
FIELD	5943:17	5943:17	10	photometricid
LEAF_NODE	5943:17	5943:17	11	photometricid
LEAF_NODE	5943:30	5943:30	9	,
ARGUMENT	5943:32	5943:32	9	"MinIsWhite"
FIELD	5943:32	5943:32	10	"MinIsWhite"
LEAF_NODE	5943:32	5943:32	11	"MinIsWhite"
LEAF_NODE	5943:44	5943:44	9	)
LEAF_NODE	5943:45	5943:45	7	;
JUMP_STATEMENT	5944:9	5944:14	6	break DESTINATION ;
KEYWORD	5944:9	5944:9	7	break
LEAF_NODE	5944:9	5944:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5944:14	5944:14	7	;
LABEL	5945:4	5945:31	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	5945:4	5945:4	7	case
LEAF_NODE	5945:9	5945:9	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	5945:31	5945:31	7	:
EXPR_STATEMENT	5946:9	5946:45	6	strcpy ( photometricid , "MinIsBlack" ) ;
EXPR	5946:9	5946:9	7	strcpy ( photometricid , "MinIsBlack" )
FUNCTION_CALL	5946:9	5946:44	8	strcpy ( photometricid , "MinIsBlack" )
CALLEE	5946:9	5946:9	9	strcpy
LEAF_NODE	5946:9	5946:9	10	strcpy
LEAF_NODE	5946:16	5946:16	9	(
ARGUMENT	5946:17	5946:17	9	photometricid
FIELD	5946:17	5946:17	10	photometricid
LEAF_NODE	5946:17	5946:17	11	photometricid
LEAF_NODE	5946:30	5946:30	9	,
ARGUMENT	5946:32	5946:32	9	"MinIsBlack"
FIELD	5946:32	5946:32	10	"MinIsBlack"
LEAF_NODE	5946:32	5946:32	11	"MinIsBlack"
LEAF_NODE	5946:44	5946:44	9	)
LEAF_NODE	5946:45	5946:45	7	;
JUMP_STATEMENT	5947:9	5947:14	6	break DESTINATION ;
KEYWORD	5947:9	5947:9	7	break
LEAF_NODE	5947:9	5947:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5947:14	5947:14	7	;
LABEL	5948:4	5948:24	6	case PHOTOMETRIC_RGB :
LEAF_NODE	5948:4	5948:4	7	case
LEAF_NODE	5948:9	5948:9	7	PHOTOMETRIC_RGB
LEAF_NODE	5948:24	5948:24	7	:
EXPR_STATEMENT	5949:9	5949:38	6	strcpy ( photometricid , "RGB" ) ;
EXPR	5949:9	5949:9	7	strcpy ( photometricid , "RGB" )
FUNCTION_CALL	5949:9	5949:37	8	strcpy ( photometricid , "RGB" )
CALLEE	5949:9	5949:9	9	strcpy
LEAF_NODE	5949:9	5949:9	10	strcpy
LEAF_NODE	5949:16	5949:16	9	(
ARGUMENT	5949:17	5949:17	9	photometricid
FIELD	5949:17	5949:17	10	photometricid
LEAF_NODE	5949:17	5949:17	11	photometricid
LEAF_NODE	5949:30	5949:30	9	,
ARGUMENT	5949:32	5949:32	9	"RGB"
FIELD	5949:32	5949:32	10	"RGB"
LEAF_NODE	5949:32	5949:32	11	"RGB"
LEAF_NODE	5949:37	5949:37	9	)
LEAF_NODE	5949:38	5949:38	7	;
JUMP_STATEMENT	5950:9	5950:14	6	break DESTINATION ;
KEYWORD	5950:9	5950:9	7	break
LEAF_NODE	5950:9	5950:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5950:14	5950:14	7	;
LABEL	5951:4	5951:28	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	5951:4	5951:4	7	case
LEAF_NODE	5951:9	5951:9	7	PHOTOMETRIC_PALETTE
LEAF_NODE	5951:28	5951:28	7	:
EXPR_STATEMENT	5952:9	5952:42	6	strcpy ( photometricid , "Palette" ) ;
EXPR	5952:9	5952:9	7	strcpy ( photometricid , "Palette" )
FUNCTION_CALL	5952:9	5952:41	8	strcpy ( photometricid , "Palette" )
CALLEE	5952:9	5952:9	9	strcpy
LEAF_NODE	5952:9	5952:9	10	strcpy
LEAF_NODE	5952:16	5952:16	9	(
ARGUMENT	5952:17	5952:17	9	photometricid
FIELD	5952:17	5952:17	10	photometricid
LEAF_NODE	5952:17	5952:17	11	photometricid
LEAF_NODE	5952:30	5952:30	9	,
ARGUMENT	5952:32	5952:32	9	"Palette"
FIELD	5952:32	5952:32	10	"Palette"
LEAF_NODE	5952:32	5952:32	11	"Palette"
LEAF_NODE	5952:41	5952:41	9	)
LEAF_NODE	5952:42	5952:42	7	;
JUMP_STATEMENT	5953:9	5953:14	6	break DESTINATION ;
KEYWORD	5953:9	5953:9	7	break
LEAF_NODE	5953:9	5953:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5953:14	5953:14	7	;
LABEL	5954:4	5954:25	6	case PHOTOMETRIC_MASK :
LEAF_NODE	5954:4	5954:4	7	case
LEAF_NODE	5954:9	5954:9	7	PHOTOMETRIC_MASK
LEAF_NODE	5954:25	5954:25	7	:
EXPR_STATEMENT	5955:9	5955:39	6	strcpy ( photometricid , "Mask" ) ;
EXPR	5955:9	5955:9	7	strcpy ( photometricid , "Mask" )
FUNCTION_CALL	5955:9	5955:38	8	strcpy ( photometricid , "Mask" )
CALLEE	5955:9	5955:9	9	strcpy
LEAF_NODE	5955:9	5955:9	10	strcpy
LEAF_NODE	5955:16	5955:16	9	(
ARGUMENT	5955:17	5955:17	9	photometricid
FIELD	5955:17	5955:17	10	photometricid
LEAF_NODE	5955:17	5955:17	11	photometricid
LEAF_NODE	5955:30	5955:30	9	,
ARGUMENT	5955:32	5955:32	9	"Mask"
FIELD	5955:32	5955:32	10	"Mask"
LEAF_NODE	5955:32	5955:32	11	"Mask"
LEAF_NODE	5955:38	5955:38	9	)
LEAF_NODE	5955:39	5955:39	7	;
JUMP_STATEMENT	5956:9	5956:14	6	break DESTINATION ;
KEYWORD	5956:9	5956:9	7	break
LEAF_NODE	5956:9	5956:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5956:14	5956:14	7	;
LABEL	5957:4	5957:30	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	5957:4	5957:4	7	case
LEAF_NODE	5957:9	5957:9	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	5957:30	5957:30	7	:
EXPR_STATEMENT	5958:9	5958:44	6	strcpy ( photometricid , "Separated" ) ;
EXPR	5958:9	5958:9	7	strcpy ( photometricid , "Separated" )
FUNCTION_CALL	5958:9	5958:43	8	strcpy ( photometricid , "Separated" )
CALLEE	5958:9	5958:9	9	strcpy
LEAF_NODE	5958:9	5958:9	10	strcpy
LEAF_NODE	5958:16	5958:16	9	(
ARGUMENT	5958:17	5958:17	9	photometricid
FIELD	5958:17	5958:17	10	photometricid
LEAF_NODE	5958:17	5958:17	11	photometricid
LEAF_NODE	5958:30	5958:30	9	,
ARGUMENT	5958:32	5958:32	9	"Separated"
FIELD	5958:32	5958:32	10	"Separated"
LEAF_NODE	5958:32	5958:32	11	"Separated"
LEAF_NODE	5958:43	5958:43	9	)
LEAF_NODE	5958:44	5958:44	7	;
JUMP_STATEMENT	5959:9	5959:14	6	break DESTINATION ;
KEYWORD	5959:9	5959:9	7	break
LEAF_NODE	5959:9	5959:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5959:14	5959:14	7	;
LABEL	5960:4	5960:26	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	5960:4	5960:4	7	case
LEAF_NODE	5960:9	5960:9	7	PHOTOMETRIC_YCBCR
LEAF_NODE	5960:26	5960:26	7	:
EXPR_STATEMENT	5961:9	5961:40	6	strcpy ( photometricid , "YCBCR" ) ;
EXPR	5961:9	5961:9	7	strcpy ( photometricid , "YCBCR" )
FUNCTION_CALL	5961:9	5961:39	8	strcpy ( photometricid , "YCBCR" )
CALLEE	5961:9	5961:9	9	strcpy
LEAF_NODE	5961:9	5961:9	10	strcpy
LEAF_NODE	5961:16	5961:16	9	(
ARGUMENT	5961:17	5961:17	9	photometricid
FIELD	5961:17	5961:17	10	photometricid
LEAF_NODE	5961:17	5961:17	11	photometricid
LEAF_NODE	5961:30	5961:30	9	,
ARGUMENT	5961:32	5961:32	9	"YCBCR"
FIELD	5961:32	5961:32	10	"YCBCR"
LEAF_NODE	5961:32	5961:32	11	"YCBCR"
LEAF_NODE	5961:39	5961:39	9	)
LEAF_NODE	5961:40	5961:40	7	;
JUMP_STATEMENT	5962:9	5962:14	6	break DESTINATION ;
KEYWORD	5962:9	5962:9	7	break
LEAF_NODE	5962:9	5962:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5962:14	5962:14	7	;
LABEL	5963:4	5963:27	6	case PHOTOMETRIC_CIELAB :
LEAF_NODE	5963:4	5963:4	7	case
LEAF_NODE	5963:9	5963:9	7	PHOTOMETRIC_CIELAB
LEAF_NODE	5963:27	5963:27	7	:
EXPR_STATEMENT	5964:9	5964:41	6	strcpy ( photometricid , "CIELab" ) ;
EXPR	5964:9	5964:9	7	strcpy ( photometricid , "CIELab" )
FUNCTION_CALL	5964:9	5964:40	8	strcpy ( photometricid , "CIELab" )
CALLEE	5964:9	5964:9	9	strcpy
LEAF_NODE	5964:9	5964:9	10	strcpy
LEAF_NODE	5964:16	5964:16	9	(
ARGUMENT	5964:17	5964:17	9	photometricid
FIELD	5964:17	5964:17	10	photometricid
LEAF_NODE	5964:17	5964:17	11	photometricid
LEAF_NODE	5964:30	5964:30	9	,
ARGUMENT	5964:32	5964:32	9	"CIELab"
FIELD	5964:32	5964:32	10	"CIELab"
LEAF_NODE	5964:32	5964:32	11	"CIELab"
LEAF_NODE	5964:40	5964:40	9	)
LEAF_NODE	5964:41	5964:41	7	;
JUMP_STATEMENT	5965:9	5965:14	6	break DESTINATION ;
KEYWORD	5965:9	5965:9	7	break
LEAF_NODE	5965:9	5965:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5965:14	5965:14	7	;
LABEL	5966:4	5966:27	6	case PHOTOMETRIC_ICCLAB :
LEAF_NODE	5966:4	5966:4	7	case
LEAF_NODE	5966:9	5966:9	7	PHOTOMETRIC_ICCLAB
LEAF_NODE	5966:27	5966:27	7	:
EXPR_STATEMENT	5967:9	5967:41	6	strcpy ( photometricid , "ICCLab" ) ;
EXPR	5967:9	5967:9	7	strcpy ( photometricid , "ICCLab" )
FUNCTION_CALL	5967:9	5967:40	8	strcpy ( photometricid , "ICCLab" )
CALLEE	5967:9	5967:9	9	strcpy
LEAF_NODE	5967:9	5967:9	10	strcpy
LEAF_NODE	5967:16	5967:16	9	(
ARGUMENT	5967:17	5967:17	9	photometricid
FIELD	5967:17	5967:17	10	photometricid
LEAF_NODE	5967:17	5967:17	11	photometricid
LEAF_NODE	5967:30	5967:30	9	,
ARGUMENT	5967:32	5967:32	9	"ICCLab"
FIELD	5967:32	5967:32	10	"ICCLab"
LEAF_NODE	5967:32	5967:32	11	"ICCLab"
LEAF_NODE	5967:40	5967:40	9	)
LEAF_NODE	5967:41	5967:41	7	;
JUMP_STATEMENT	5968:9	5968:14	6	break DESTINATION ;
KEYWORD	5968:9	5968:9	7	break
LEAF_NODE	5968:9	5968:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5968:14	5968:14	7	;
LABEL	5969:4	5969:27	6	case PHOTOMETRIC_ITULAB :
LEAF_NODE	5969:4	5969:4	7	case
LEAF_NODE	5969:9	5969:9	7	PHOTOMETRIC_ITULAB
LEAF_NODE	5969:27	5969:27	7	:
EXPR_STATEMENT	5970:9	5970:41	6	strcpy ( photometricid , "ITULab" ) ;
EXPR	5970:9	5970:9	7	strcpy ( photometricid , "ITULab" )
FUNCTION_CALL	5970:9	5970:40	8	strcpy ( photometricid , "ITULab" )
CALLEE	5970:9	5970:9	9	strcpy
LEAF_NODE	5970:9	5970:9	10	strcpy
LEAF_NODE	5970:16	5970:16	9	(
ARGUMENT	5970:17	5970:17	9	photometricid
FIELD	5970:17	5970:17	10	photometricid
LEAF_NODE	5970:17	5970:17	11	photometricid
LEAF_NODE	5970:30	5970:30	9	,
ARGUMENT	5970:32	5970:32	9	"ITULab"
FIELD	5970:32	5970:32	10	"ITULab"
LEAF_NODE	5970:32	5970:32	11	"ITULab"
LEAF_NODE	5970:40	5970:40	9	)
LEAF_NODE	5970:41	5970:41	7	;
JUMP_STATEMENT	5971:9	5971:14	6	break DESTINATION ;
KEYWORD	5971:9	5971:9	7	break
LEAF_NODE	5971:9	5971:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5971:14	5971:14	7	;
LABEL	5972:4	5972:25	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	5972:4	5972:4	7	case
LEAF_NODE	5972:9	5972:9	7	PHOTOMETRIC_LOGL
LEAF_NODE	5972:25	5972:25	7	:
EXPR_STATEMENT	5973:9	5973:39	6	strcpy ( photometricid , "LogL" ) ;
EXPR	5973:9	5973:9	7	strcpy ( photometricid , "LogL" )
FUNCTION_CALL	5973:9	5973:38	8	strcpy ( photometricid , "LogL" )
CALLEE	5973:9	5973:9	9	strcpy
LEAF_NODE	5973:9	5973:9	10	strcpy
LEAF_NODE	5973:16	5973:16	9	(
ARGUMENT	5973:17	5973:17	9	photometricid
FIELD	5973:17	5973:17	10	photometricid
LEAF_NODE	5973:17	5973:17	11	photometricid
LEAF_NODE	5973:30	5973:30	9	,
ARGUMENT	5973:32	5973:32	9	"LogL"
FIELD	5973:32	5973:32	10	"LogL"
LEAF_NODE	5973:32	5973:32	11	"LogL"
LEAF_NODE	5973:38	5973:38	9	)
LEAF_NODE	5973:39	5973:39	7	;
JUMP_STATEMENT	5974:9	5974:14	6	break DESTINATION ;
KEYWORD	5974:9	5974:9	7	break
LEAF_NODE	5974:9	5974:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5974:14	5974:14	7	;
LABEL	5975:4	5975:27	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	5975:4	5975:4	7	case
LEAF_NODE	5975:9	5975:9	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	5975:27	5975:27	7	:
EXPR_STATEMENT	5976:9	5976:41	6	strcpy ( photometricid , "LOGLuv" ) ;
EXPR	5976:9	5976:9	7	strcpy ( photometricid , "LOGLuv" )
FUNCTION_CALL	5976:9	5976:40	8	strcpy ( photometricid , "LOGLuv" )
CALLEE	5976:9	5976:9	9	strcpy
LEAF_NODE	5976:9	5976:9	10	strcpy
LEAF_NODE	5976:16	5976:16	9	(
ARGUMENT	5976:17	5976:17	9	photometricid
FIELD	5976:17	5976:17	10	photometricid
LEAF_NODE	5976:17	5976:17	11	photometricid
LEAF_NODE	5976:30	5976:30	9	,
ARGUMENT	5976:32	5976:32	9	"LOGLuv"
FIELD	5976:32	5976:32	10	"LOGLuv"
LEAF_NODE	5976:32	5976:32	11	"LOGLuv"
LEAF_NODE	5976:40	5976:40	9	)
LEAF_NODE	5976:41	5976:41	7	;
JUMP_STATEMENT	5977:9	5977:14	6	break DESTINATION ;
KEYWORD	5977:9	5977:9	7	break
LEAF_NODE	5977:9	5977:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5977:14	5977:14	7	;
LABEL	5978:4	5978:11	6	default :
LEAF_NODE	5978:4	5978:4	7	default
LEAF_NODE	5978:11	5978:11	7	:
EXPR_STATEMENT	5979:9	5979:42	6	strcpy ( photometricid , "Unknown" ) ;
EXPR	5979:9	5979:9	7	strcpy ( photometricid , "Unknown" )
FUNCTION_CALL	5979:9	5979:41	8	strcpy ( photometricid , "Unknown" )
CALLEE	5979:9	5979:9	9	strcpy
LEAF_NODE	5979:9	5979:9	10	strcpy
LEAF_NODE	5979:16	5979:16	9	(
ARGUMENT	5979:17	5979:17	9	photometricid
FIELD	5979:17	5979:17	10	photometricid
LEAF_NODE	5979:17	5979:17	11	photometricid
LEAF_NODE	5979:30	5979:30	9	,
ARGUMENT	5979:32	5979:32	9	"Unknown"
FIELD	5979:32	5979:32	10	"Unknown"
LEAF_NODE	5979:32	5979:32	11	"Unknown"
LEAF_NODE	5979:41	5979:41	9	)
LEAF_NODE	5979:42	5979:42	7	;
JUMP_STATEMENT	5980:9	5980:14	6	break DESTINATION ;
KEYWORD	5980:9	5980:9	7	break
LEAF_NODE	5980:9	5980:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5980:14	5980:14	7	;
LEAF_NODE	5981:4	5981:4	5	}
EXPR_STATEMENT	5982:2	5982:78	3	TIFFError ( "loadImage" , "Input photometric interpretation %s" , photometricid ) ;
EXPR	5982:2	5982:2	4	TIFFError ( "loadImage" , "Input photometric interpretation %s" , photometricid )
FUNCTION_CALL	5982:2	5982:77	5	TIFFError ( "loadImage" , "Input photometric interpretation %s" , photometricid )
CALLEE	5982:2	5982:2	6	TIFFError
LEAF_NODE	5982:2	5982:2	7	TIFFError
LEAF_NODE	5982:11	5982:11	6	(
ARGUMENT	5982:12	5982:12	6	"loadImage"
FIELD	5982:12	5982:12	7	"loadImage"
LEAF_NODE	5982:12	5982:12	8	"loadImage"
LEAF_NODE	5982:23	5982:23	6	,
ARGUMENT	5982:25	5982:25	6	"Input photometric interpretation %s"
FIELD	5982:25	5982:25	7	"Input photometric interpretation %s"
LEAF_NODE	5982:25	5982:25	8	"Input photometric interpretation %s"
LEAF_NODE	5982:62	5982:62	6	,
ARGUMENT	5982:64	5982:64	6	photometricid
FIELD	5982:64	5982:64	7	photometricid
LEAF_NODE	5982:64	5982:64	8	photometricid
LEAF_NODE	5982:77	5982:77	6	)
LEAF_NODE	5982:78	5982:78	4	;
EXPR_STATEMENT	5985:2	5985:34	3	image -> orientation = orientation ;
EXPR	5985:2	5985:2	4	image -> orientation = orientation
ASSIGN	5985:2	5985:23	5	image -> orientation = orientation
LVAL	5985:2	5985:2	6	image -> orientation
FIELD	5985:2	5985:9	7	image -> orientation
LEAF_NODE	5985:2	5985:2	8	image
LEAF_NODE	5985:7	5985:7	8	->
LEAF_NODE	5985:9	5985:9	8	orientation
ASSIGN_OP	5985:21	5985:21	6	=
LEAF_NODE	5985:21	5985:21	7	=
RVAL	5985:23	5985:23	6	orientation
FIELD	5985:23	5985:23	7	orientation
LEAF_NODE	5985:23	5985:23	8	orientation
LEAF_NODE	5985:34	5985:34	4	;
SELECTION	5986:2	5987:4	3	
KEYWORD	5986:2	5986:2	4	switch
LEAF_NODE	5986:2	5986:2	5	switch
LEAF_NODE	5986:9	5986:9	4	(
CONDITION	5986:10	5986:10	4	orientation
EXPR	5986:10	5986:10	5	orientation
FIELD	5986:10	5986:10	6	orientation
LEAF_NODE	5986:10	5986:10	7	orientation
LEAF_NODE	5986:21	5986:21	4	)
STATEMENTS	5987:4	6016:3	4	
LEAF_NODE	5987:4	5987:4	5	{
STATEMENTS	5988:4	6015:9	5	
LABEL	5988:4	5988:10	6	case 0 :
LEAF_NODE	5988:4	5988:4	7	case
LEAF_NODE	5988:9	5988:9	7	0
LEAF_NODE	5988:10	5988:10	7	:
LABEL	5989:4	5989:28	6	case ORIENTATION_TOPLEFT :
LEAF_NODE	5989:4	5989:4	7	case
LEAF_NODE	5989:9	5989:9	7	ORIENTATION_TOPLEFT
LEAF_NODE	5989:28	5989:28	7	:
EXPR_STATEMENT	5990:9	5990:31	6	image -> adjustments = 0 ;
EXPR	5990:9	5990:9	7	image -> adjustments = 0
ASSIGN	5990:9	5990:30	8	image -> adjustments = 0
LVAL	5990:9	5990:9	9	image -> adjustments
FIELD	5990:9	5990:16	10	image -> adjustments
LEAF_NODE	5990:9	5990:9	11	image
LEAF_NODE	5990:14	5990:14	11	->
LEAF_NODE	5990:16	5990:16	11	adjustments
ASSIGN_OP	5990:28	5990:28	9	=
LEAF_NODE	5990:28	5990:28	10	=
RVAL	5990:30	5990:30	9	0
FIELD	5990:30	5990:30	10	0
LEAF_NODE	5990:30	5990:30	11	0
LEAF_NODE	5990:31	5990:31	7	;
JUMP_STATEMENT	5991:2	5991:7	6	break DESTINATION ;
KEYWORD	5991:2	5991:2	7	break
LEAF_NODE	5991:2	5991:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5991:7	5991:7	7	;
LABEL	5992:4	5992:29	6	case ORIENTATION_TOPRIGHT :
LEAF_NODE	5992:4	5992:4	7	case
LEAF_NODE	5992:9	5992:9	7	ORIENTATION_TOPRIGHT
LEAF_NODE	5992:29	5992:29	7	:
EXPR_STATEMENT	5993:9	5993:42	6	image -> adjustments = MIRROR_HORIZ ;
EXPR	5993:9	5993:9	7	image -> adjustments = MIRROR_HORIZ
ASSIGN	5993:9	5993:30	8	image -> adjustments = MIRROR_HORIZ
LVAL	5993:9	5993:9	9	image -> adjustments
FIELD	5993:9	5993:16	10	image -> adjustments
LEAF_NODE	5993:9	5993:9	11	image
LEAF_NODE	5993:14	5993:14	11	->
LEAF_NODE	5993:16	5993:16	11	adjustments
ASSIGN_OP	5993:28	5993:28	9	=
LEAF_NODE	5993:28	5993:28	10	=
RVAL	5993:30	5993:30	9	MIRROR_HORIZ
FIELD	5993:30	5993:30	10	MIRROR_HORIZ
LEAF_NODE	5993:30	5993:30	11	MIRROR_HORIZ
LEAF_NODE	5993:42	5993:42	7	;
JUMP_STATEMENT	5994:2	5994:7	6	break DESTINATION ;
KEYWORD	5994:2	5994:2	7	break
LEAF_NODE	5994:2	5994:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5994:7	5994:7	7	;
LABEL	5995:4	5995:29	6	case ORIENTATION_BOTRIGHT :
LEAF_NODE	5995:4	5995:4	7	case
LEAF_NODE	5995:9	5995:9	7	ORIENTATION_BOTRIGHT
LEAF_NODE	5995:29	5995:29	7	:
EXPR_STATEMENT	5996:9	5996:42	6	image -> adjustments = ROTATECW_180 ;
EXPR	5996:9	5996:9	7	image -> adjustments = ROTATECW_180
ASSIGN	5996:9	5996:30	8	image -> adjustments = ROTATECW_180
LVAL	5996:9	5996:9	9	image -> adjustments
FIELD	5996:9	5996:16	10	image -> adjustments
LEAF_NODE	5996:9	5996:9	11	image
LEAF_NODE	5996:14	5996:14	11	->
LEAF_NODE	5996:16	5996:16	11	adjustments
ASSIGN_OP	5996:28	5996:28	9	=
LEAF_NODE	5996:28	5996:28	10	=
RVAL	5996:30	5996:30	9	ROTATECW_180
FIELD	5996:30	5996:30	10	ROTATECW_180
LEAF_NODE	5996:30	5996:30	11	ROTATECW_180
LEAF_NODE	5996:42	5996:42	7	;
JUMP_STATEMENT	5997:2	5997:7	6	break DESTINATION ;
KEYWORD	5997:2	5997:2	7	break
LEAF_NODE	5997:2	5997:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5997:7	5997:7	7	;
LABEL	5998:4	5998:28	6	case ORIENTATION_BOTLEFT :
LEAF_NODE	5998:4	5998:4	7	case
LEAF_NODE	5998:9	5998:9	7	ORIENTATION_BOTLEFT
LEAF_NODE	5998:28	5998:28	7	:
EXPR_STATEMENT	5999:9	5999:41	6	image -> adjustments = MIRROR_VERT ;
EXPR	5999:9	5999:9	7	image -> adjustments = MIRROR_VERT
ASSIGN	5999:9	5999:30	8	image -> adjustments = MIRROR_VERT
LVAL	5999:9	5999:9	9	image -> adjustments
FIELD	5999:9	5999:16	10	image -> adjustments
LEAF_NODE	5999:9	5999:9	11	image
LEAF_NODE	5999:14	5999:14	11	->
LEAF_NODE	5999:16	5999:16	11	adjustments
ASSIGN_OP	5999:28	5999:28	9	=
LEAF_NODE	5999:28	5999:28	10	=
RVAL	5999:30	5999:30	9	MIRROR_VERT
FIELD	5999:30	5999:30	10	MIRROR_VERT
LEAF_NODE	5999:30	5999:30	11	MIRROR_VERT
LEAF_NODE	5999:41	5999:41	7	;
JUMP_STATEMENT	6000:2	6000:7	6	break DESTINATION ;
KEYWORD	6000:2	6000:2	7	break
LEAF_NODE	6000:2	6000:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6000:7	6000:7	7	;
LABEL	6001:4	6001:28	6	case ORIENTATION_LEFTTOP :
LEAF_NODE	6001:4	6001:4	7	case
LEAF_NODE	6001:9	6001:9	7	ORIENTATION_LEFTTOP
LEAF_NODE	6001:28	6001:28	7	:
EXPR_STATEMENT	6002:9	6002:55	6	image -> adjustments = MIRROR_VERT | ROTATECW_90 ;
EXPR	6002:9	6002:9	7	image -> adjustments = MIRROR_VERT | ROTATECW_90
ASSIGN	6002:9	6002:30	8	image -> adjustments = MIRROR_VERT | ROTATECW_90
LVAL	6002:9	6002:9	9	image -> adjustments
FIELD	6002:9	6002:16	10	image -> adjustments
LEAF_NODE	6002:9	6002:9	11	image
LEAF_NODE	6002:14	6002:14	11	->
LEAF_NODE	6002:16	6002:16	11	adjustments
ASSIGN_OP	6002:28	6002:28	9	=
LEAF_NODE	6002:28	6002:28	10	=
RVAL	6002:30	6002:30	9	MIRROR_VERT | ROTATECW_90
BIT_OR	6002:30	6002:44	10	MIRROR_VERT | ROTATECW_90
BIT_OR_ELEM	6002:30	6002:30	11	MIRROR_VERT
FIELD	6002:30	6002:30	12	MIRROR_VERT
LEAF_NODE	6002:30	6002:30	13	MIRROR_VERT
LEAF_NODE	6002:42	6002:42	11	|
BIT_OR_ELEM	6002:44	6002:44	11	ROTATECW_90
FIELD	6002:44	6002:44	12	ROTATECW_90
LEAF_NODE	6002:44	6002:44	13	ROTATECW_90
LEAF_NODE	6002:55	6002:55	7	;
JUMP_STATEMENT	6003:2	6003:7	6	break DESTINATION ;
KEYWORD	6003:2	6003:2	7	break
LEAF_NODE	6003:2	6003:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6003:7	6003:7	7	;
LABEL	6004:4	6004:29	6	case ORIENTATION_RIGHTTOP :
LEAF_NODE	6004:4	6004:4	7	case
LEAF_NODE	6004:9	6004:9	7	ORIENTATION_RIGHTTOP
LEAF_NODE	6004:29	6004:29	7	:
EXPR_STATEMENT	6005:9	6005:41	6	image -> adjustments = ROTATECW_90 ;
EXPR	6005:9	6005:9	7	image -> adjustments = ROTATECW_90
ASSIGN	6005:9	6005:30	8	image -> adjustments = ROTATECW_90
LVAL	6005:9	6005:9	9	image -> adjustments
FIELD	6005:9	6005:16	10	image -> adjustments
LEAF_NODE	6005:9	6005:9	11	image
LEAF_NODE	6005:14	6005:14	11	->
LEAF_NODE	6005:16	6005:16	11	adjustments
ASSIGN_OP	6005:28	6005:28	9	=
LEAF_NODE	6005:28	6005:28	10	=
RVAL	6005:30	6005:30	9	ROTATECW_90
FIELD	6005:30	6005:30	10	ROTATECW_90
LEAF_NODE	6005:30	6005:30	11	ROTATECW_90
LEAF_NODE	6005:41	6005:41	7	;
JUMP_STATEMENT	6006:2	6006:7	6	break DESTINATION ;
KEYWORD	6006:2	6006:2	7	break
LEAF_NODE	6006:2	6006:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6006:7	6006:7	7	;
LABEL	6007:4	6007:29	6	case ORIENTATION_RIGHTBOT :
LEAF_NODE	6007:4	6007:4	7	case
LEAF_NODE	6007:9	6007:9	7	ORIENTATION_RIGHTBOT
LEAF_NODE	6007:29	6007:29	7	:
EXPR_STATEMENT	6008:9	6008:56	6	image -> adjustments = MIRROR_VERT | ROTATECW_270 ;
EXPR	6008:9	6008:9	7	image -> adjustments = MIRROR_VERT | ROTATECW_270
ASSIGN	6008:9	6008:30	8	image -> adjustments = MIRROR_VERT | ROTATECW_270
LVAL	6008:9	6008:9	9	image -> adjustments
FIELD	6008:9	6008:16	10	image -> adjustments
LEAF_NODE	6008:9	6008:9	11	image
LEAF_NODE	6008:14	6008:14	11	->
LEAF_NODE	6008:16	6008:16	11	adjustments
ASSIGN_OP	6008:28	6008:28	9	=
LEAF_NODE	6008:28	6008:28	10	=
RVAL	6008:30	6008:30	9	MIRROR_VERT | ROTATECW_270
BIT_OR	6008:30	6008:44	10	MIRROR_VERT | ROTATECW_270
BIT_OR_ELEM	6008:30	6008:30	11	MIRROR_VERT
FIELD	6008:30	6008:30	12	MIRROR_VERT
LEAF_NODE	6008:30	6008:30	13	MIRROR_VERT
LEAF_NODE	6008:42	6008:42	11	|
BIT_OR_ELEM	6008:44	6008:44	11	ROTATECW_270
FIELD	6008:44	6008:44	12	ROTATECW_270
LEAF_NODE	6008:44	6008:44	13	ROTATECW_270
LEAF_NODE	6008:56	6008:56	7	;
JUMP_STATEMENT	6009:2	6009:7	6	break DESTINATION ;
KEYWORD	6009:2	6009:2	7	break
LEAF_NODE	6009:2	6009:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6009:7	6009:7	7	;
LABEL	6010:4	6010:28	6	case ORIENTATION_LEFTBOT :
LEAF_NODE	6010:4	6010:4	7	case
LEAF_NODE	6010:9	6010:9	7	ORIENTATION_LEFTBOT
LEAF_NODE	6010:28	6010:28	7	:
EXPR_STATEMENT	6011:9	6011:42	6	image -> adjustments = ROTATECW_270 ;
EXPR	6011:9	6011:9	7	image -> adjustments = ROTATECW_270
ASSIGN	6011:9	6011:30	8	image -> adjustments = ROTATECW_270
LVAL	6011:9	6011:9	9	image -> adjustments
FIELD	6011:9	6011:16	10	image -> adjustments
LEAF_NODE	6011:9	6011:9	11	image
LEAF_NODE	6011:14	6011:14	11	->
LEAF_NODE	6011:16	6011:16	11	adjustments
ASSIGN_OP	6011:28	6011:28	9	=
LEAF_NODE	6011:28	6011:28	10	=
RVAL	6011:30	6011:30	9	ROTATECW_270
FIELD	6011:30	6011:30	10	ROTATECW_270
LEAF_NODE	6011:30	6011:30	11	ROTATECW_270
LEAF_NODE	6011:42	6011:42	7	;
JUMP_STATEMENT	6012:2	6012:7	6	break DESTINATION ;
KEYWORD	6012:2	6012:2	7	break
LEAF_NODE	6012:2	6012:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6012:7	6012:7	7	;
LABEL	6013:4	6013:11	6	default :
LEAF_NODE	6013:4	6013:4	7	default
LEAF_NODE	6013:11	6013:11	7	:
EXPR_STATEMENT	6014:9	6014:31	6	image -> adjustments = 0 ;
EXPR	6014:9	6014:9	7	image -> adjustments = 0
ASSIGN	6014:9	6014:30	8	image -> adjustments = 0
LVAL	6014:9	6014:9	9	image -> adjustments
FIELD	6014:9	6014:16	10	image -> adjustments
LEAF_NODE	6014:9	6014:9	11	image
LEAF_NODE	6014:14	6014:14	11	->
LEAF_NODE	6014:16	6014:16	11	adjustments
ASSIGN_OP	6014:28	6014:28	9	=
LEAF_NODE	6014:28	6014:28	10	=
RVAL	6014:30	6014:30	9	0
FIELD	6014:30	6014:30	10	0
LEAF_NODE	6014:30	6014:30	11	0
LEAF_NODE	6014:31	6014:31	7	;
EXPR_STATEMENT	6015:9	6015:49	6	image -> orientation = ORIENTATION_TOPLEFT ;
EXPR	6015:9	6015:9	7	image -> orientation = ORIENTATION_TOPLEFT
ASSIGN	6015:9	6015:30	8	image -> orientation = ORIENTATION_TOPLEFT
LVAL	6015:9	6015:9	9	image -> orientation
FIELD	6015:9	6015:16	10	image -> orientation
LEAF_NODE	6015:9	6015:9	11	image
LEAF_NODE	6015:14	6015:14	11	->
LEAF_NODE	6015:16	6015:16	11	orientation
ASSIGN_OP	6015:28	6015:28	9	=
LEAF_NODE	6015:28	6015:28	10	=
RVAL	6015:30	6015:30	9	ORIENTATION_TOPLEFT
FIELD	6015:30	6015:30	10	ORIENTATION_TOPLEFT
LEAF_NODE	6015:30	6015:30	11	ORIENTATION_TOPLEFT
LEAF_NODE	6015:49	6015:49	7	;
LEAF_NODE	6016:3	6016:3	5	}
SELECTION	6018:2	6019:4	3	
KEYWORD	6018:2	6018:2	4	if
LEAF_NODE	6018:2	6018:2	5	if
LEAF_NODE	6018:5	6018:5	4	(
CONDITION	6018:6	6018:6	4	( bps == 0 ) || ( spp == 0 )
EXPR	6018:6	6018:6	5	( bps == 0 ) || ( spp == 0 )
OR	6018:6	6018:20	6	( bps == 0 ) || ( spp == 0 )
EXPR	6018:6	6018:15	7	( bps == 0 )
LEAF_NODE	6018:6	6018:6	8	(
FIELD	6018:7	6018:7	8	bps
LEAF_NODE	6018:7	6018:7	9	bps
EQ_OPERATOR	6018:11	6018:11	8	==
LEAF_NODE	6018:11	6018:11	9	==
FIELD	6018:14	6018:14	8	0
LEAF_NODE	6018:14	6018:14	9	0
LEAF_NODE	6018:15	6018:15	8	)
LEAF_NODE	6018:17	6018:17	7	||
EXPR	6018:20	6018:29	7	( spp == 0 )
LEAF_NODE	6018:20	6018:20	8	(
FIELD	6018:21	6018:21	8	spp
LEAF_NODE	6018:21	6018:21	9	spp
EQ_OPERATOR	6018:25	6018:25	8	==
LEAF_NODE	6018:25	6018:25	9	==
FIELD	6018:28	6018:28	8	0
LEAF_NODE	6018:28	6018:28	9	0
LEAF_NODE	6018:29	6018:29	8	)
LEAF_NODE	6018:30	6018:30	4	)
STATEMENTS	6019:4	6023:4	4	
LEAF_NODE	6019:4	6019:4	5	{
STATEMENTS	6020:4	6022:4	5	
EXPR_STATEMENT	6020:4	6021:17	6	TIFFError ( "loadImage" , "Invalid samples per pixel (%d) or bits per sample (%d)" , spp , bps ) ;
EXPR	6020:4	6020:4	7	TIFFError ( "loadImage" , "Invalid samples per pixel (%d) or bits per sample (%d)" , spp , bps )
FUNCTION_CALL	6020:4	6021:16	8	TIFFError ( "loadImage" , "Invalid samples per pixel (%d) or bits per sample (%d)" , spp , bps )
CALLEE	6020:4	6020:4	9	TIFFError
LEAF_NODE	6020:4	6020:4	10	TIFFError
LEAF_NODE	6020:13	6020:13	9	(
ARGUMENT	6020:14	6020:14	9	"loadImage"
FIELD	6020:14	6020:14	10	"loadImage"
LEAF_NODE	6020:14	6020:14	11	"loadImage"
LEAF_NODE	6020:25	6020:25	9	,
ARGUMENT	6020:27	6020:27	9	"Invalid samples per pixel (%d) or bits per sample (%d)"
FIELD	6020:27	6020:27	10	"Invalid samples per pixel (%d) or bits per sample (%d)"
LEAF_NODE	6020:27	6020:27	11	"Invalid samples per pixel (%d) or bits per sample (%d)"
LEAF_NODE	6020:83	6020:83	9	,
ARGUMENT	6021:8	6021:8	9	spp
FIELD	6021:8	6021:8	10	spp
LEAF_NODE	6021:8	6021:8	11	spp
LEAF_NODE	6021:11	6021:11	9	,
ARGUMENT	6021:13	6021:13	9	bps
FIELD	6021:13	6021:13	10	bps
LEAF_NODE	6021:13	6021:13	11	bps
LEAF_NODE	6021:16	6021:16	9	)
LEAF_NODE	6021:17	6021:17	7	;
JUMP_STATEMENT	6022:4	6022:15	6	return ( - 1 ) ;
KEYWORD	6022:4	6022:4	7	return
LEAF_NODE	6022:4	6022:4	8	return
DESTINATION	6022:11	6022:11	7	( - 1 )
EXPR	6022:11	6022:14	8	( - 1 )
LEAF_NODE	6022:11	6022:11	9	(
UNARY_EXPR	6022:12	6022:13	9	- 1
UNARY_OPERATOR	6022:12	6022:12	10	-
LEAF_NODE	6022:12	6022:12	11	-
FIELD	6022:13	6022:13	10	1
LEAF_NODE	6022:13	6022:13	11	1
LEAF_NODE	6022:14	6022:14	9	)
LEAF_NODE	6022:15	6022:15	7	;
LEAF_NODE	6023:4	6023:4	5	}
SELECTION	6025:2	6026:4	3	
KEYWORD	6025:2	6025:2	4	if
LEAF_NODE	6025:2	6025:2	5	if
LEAF_NODE	6025:5	6025:5	4	(
CONDITION	6025:6	6025:6	4	TIFFIsTiled ( in )
EXPR	6025:6	6025:6	5	TIFFIsTiled ( in )
FUNCTION_CALL	6025:6	6025:20	6	TIFFIsTiled ( in )
CALLEE	6025:6	6025:6	7	TIFFIsTiled
LEAF_NODE	6025:6	6025:6	8	TIFFIsTiled
LEAF_NODE	6025:17	6025:17	7	(
ARGUMENT	6025:18	6025:18	7	in
FIELD	6025:18	6025:18	8	in
LEAF_NODE	6025:18	6025:18	9	in
LEAF_NODE	6025:20	6025:20	7	)
LEAF_NODE	6025:21	6025:21	4	)
STATEMENTS	6026:4	6066:4	4	
LEAF_NODE	6026:4	6026:4	5	{
STATEMENTS	6027:4	6062:4	5	
EXPR_STATEMENT	6027:4	6027:19	6	readunit = TILE ;
EXPR	6027:4	6027:4	7	readunit = TILE
ASSIGN	6027:4	6027:15	8	readunit = TILE
LVAL	6027:4	6027:4	9	readunit
FIELD	6027:4	6027:4	10	readunit
LEAF_NODE	6027:4	6027:4	11	readunit
ASSIGN_OP	6027:13	6027:13	9	=
LEAF_NODE	6027:13	6027:13	10	=
RVAL	6027:15	6027:15	9	TILE
FIELD	6027:15	6027:15	10	TILE
LEAF_NODE	6027:15	6027:15	11	TILE
LEAF_NODE	6027:19	6027:19	7	;
EXPR_STATEMENT	6028:4	6028:29	6	tlsize = TIFFTileSize ( in ) ;
EXPR	6028:4	6028:4	7	tlsize = TIFFTileSize ( in )
ASSIGN	6028:4	6028:13	8	tlsize = TIFFTileSize ( in )
LVAL	6028:4	6028:4	9	tlsize
FIELD	6028:4	6028:4	10	tlsize
LEAF_NODE	6028:4	6028:4	11	tlsize
ASSIGN_OP	6028:11	6028:11	9	=
LEAF_NODE	6028:11	6028:11	10	=
RVAL	6028:13	6028:13	9	TIFFTileSize ( in )
FUNCTION_CALL	6028:13	6028:28	10	TIFFTileSize ( in )
CALLEE	6028:13	6028:13	11	TIFFTileSize
LEAF_NODE	6028:13	6028:13	12	TIFFTileSize
LEAF_NODE	6028:25	6028:25	11	(
ARGUMENT	6028:26	6028:26	11	in
FIELD	6028:26	6028:26	12	in
LEAF_NODE	6028:26	6028:26	13	in
LEAF_NODE	6028:28	6028:28	11	)
LEAF_NODE	6028:29	6028:29	7	;
EXPR_STATEMENT	6029:4	6029:34	6	ntiles = TIFFNumberOfTiles ( in ) ;
EXPR	6029:4	6029:4	7	ntiles = TIFFNumberOfTiles ( in )
ASSIGN	6029:4	6029:13	8	ntiles = TIFFNumberOfTiles ( in )
LVAL	6029:4	6029:4	9	ntiles
FIELD	6029:4	6029:4	10	ntiles
LEAF_NODE	6029:4	6029:4	11	ntiles
ASSIGN_OP	6029:11	6029:11	9	=
LEAF_NODE	6029:11	6029:11	10	=
RVAL	6029:13	6029:13	9	TIFFNumberOfTiles ( in )
FUNCTION_CALL	6029:13	6029:33	10	TIFFNumberOfTiles ( in )
CALLEE	6029:13	6029:13	11	TIFFNumberOfTiles
LEAF_NODE	6029:13	6029:13	12	TIFFNumberOfTiles
LEAF_NODE	6029:30	6029:30	11	(
ARGUMENT	6029:31	6029:31	11	in
FIELD	6029:31	6029:31	12	in
LEAF_NODE	6029:31	6029:31	13	in
LEAF_NODE	6029:33	6029:33	11	)
LEAF_NODE	6029:34	6029:34	7	;
EXPR_STATEMENT	6030:4	6030:44	6	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	6030:4	6030:4	7	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	6030:4	6030:43	8	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
CALLEE	6030:4	6030:4	9	TIFFGetField
LEAF_NODE	6030:4	6030:4	10	TIFFGetField
LEAF_NODE	6030:16	6030:16	9	(
ARGUMENT	6030:17	6030:17	9	in
FIELD	6030:17	6030:17	10	in
LEAF_NODE	6030:17	6030:17	11	in
LEAF_NODE	6030:19	6030:19	9	,
ARGUMENT	6030:21	6030:21	9	TIFFTAG_TILEWIDTH
FIELD	6030:21	6030:21	10	TIFFTAG_TILEWIDTH
LEAF_NODE	6030:21	6030:21	11	TIFFTAG_TILEWIDTH
LEAF_NODE	6030:38	6030:38	9	,
ARGUMENT	6030:40	6030:40	9	& tw
UNARY_EXPR	6030:40	6030:41	10	& tw
UNARY_OPERATOR	6030:40	6030:40	11	&
LEAF_NODE	6030:40	6030:40	12	&
FIELD	6030:41	6030:41	11	tw
LEAF_NODE	6030:41	6030:41	12	tw
LEAF_NODE	6030:43	6030:43	9	)
LEAF_NODE	6030:44	6030:44	7	;
EXPR_STATEMENT	6031:4	6031:45	6	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl ) ;
EXPR	6031:4	6031:4	7	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
FUNCTION_CALL	6031:4	6031:44	8	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
CALLEE	6031:4	6031:4	9	TIFFGetField
LEAF_NODE	6031:4	6031:4	10	TIFFGetField
LEAF_NODE	6031:16	6031:16	9	(
ARGUMENT	6031:17	6031:17	9	in
FIELD	6031:17	6031:17	10	in
LEAF_NODE	6031:17	6031:17	11	in
LEAF_NODE	6031:19	6031:19	9	,
ARGUMENT	6031:21	6031:21	9	TIFFTAG_TILELENGTH
FIELD	6031:21	6031:21	10	TIFFTAG_TILELENGTH
LEAF_NODE	6031:21	6031:21	11	TIFFTAG_TILELENGTH
LEAF_NODE	6031:39	6031:39	9	,
ARGUMENT	6031:41	6031:41	9	& tl
UNARY_EXPR	6031:41	6031:42	10	& tl
UNARY_OPERATOR	6031:41	6031:41	11	&
LEAF_NODE	6031:41	6031:41	12	&
FIELD	6031:42	6031:42	11	tl
LEAF_NODE	6031:42	6031:42	12	tl
LEAF_NODE	6031:44	6031:44	9	)
LEAF_NODE	6031:45	6031:45	7	;
EXPR_STATEMENT	6033:4	6033:39	6	tile_rowsize = TIFFTileRowSize ( in ) ;
EXPR	6033:4	6033:4	7	tile_rowsize = TIFFTileRowSize ( in )
ASSIGN	6033:4	6033:20	8	tile_rowsize = TIFFTileRowSize ( in )
LVAL	6033:4	6033:4	9	tile_rowsize
FIELD	6033:4	6033:4	10	tile_rowsize
LEAF_NODE	6033:4	6033:4	11	tile_rowsize
ASSIGN_OP	6033:18	6033:18	9	=
LEAF_NODE	6033:18	6033:18	10	=
RVAL	6033:20	6033:20	9	TIFFTileRowSize ( in )
FUNCTION_CALL	6033:20	6033:38	10	TIFFTileRowSize ( in )
CALLEE	6033:20	6033:20	11	TIFFTileRowSize
LEAF_NODE	6033:20	6033:20	12	TIFFTileRowSize
LEAF_NODE	6033:35	6033:35	11	(
ARGUMENT	6033:36	6033:36	11	in
FIELD	6033:36	6033:36	12	in
LEAF_NODE	6033:36	6033:36	13	in
LEAF_NODE	6033:38	6033:38	11	)
LEAF_NODE	6033:39	6033:39	7	;
SELECTION	6034:4	6035:4	6	
KEYWORD	6034:4	6034:4	7	if
LEAF_NODE	6034:4	6034:4	8	if
LEAF_NODE	6034:7	6034:7	7	(
CONDITION	6034:8	6034:8	7	ntiles == 0 || tlsize == 0 || tile_rowsize == 0
EXPR	6034:8	6034:8	8	ntiles == 0 || tlsize == 0 || tile_rowsize == 0
OR	6034:8	6034:23	9	ntiles == 0 || tlsize == 0 || tile_rowsize == 0
EXPR	6034:8	6034:18	10	ntiles == 0
FIELD	6034:8	6034:8	11	ntiles
LEAF_NODE	6034:8	6034:8	12	ntiles
EQ_OPERATOR	6034:15	6034:15	11	==
LEAF_NODE	6034:15	6034:15	12	==
FIELD	6034:18	6034:18	11	0
LEAF_NODE	6034:18	6034:18	12	0
LEAF_NODE	6034:20	6034:20	10	||
EXPR	6034:23	6034:23	10	tlsize == 0 || tile_rowsize == 0
OR	6034:23	6034:38	11	tlsize == 0 || tile_rowsize == 0
EXPR	6034:23	6034:33	12	tlsize == 0
FIELD	6034:23	6034:23	13	tlsize
LEAF_NODE	6034:23	6034:23	14	tlsize
EQ_OPERATOR	6034:30	6034:30	13	==
LEAF_NODE	6034:30	6034:30	14	==
FIELD	6034:33	6034:33	13	0
LEAF_NODE	6034:33	6034:33	14	0
LEAF_NODE	6034:35	6034:35	12	||
EXPR	6034:38	6034:54	12	tile_rowsize == 0
FIELD	6034:38	6034:38	13	tile_rowsize
LEAF_NODE	6034:38	6034:38	14	tile_rowsize
EQ_OPERATOR	6034:51	6034:51	13	==
LEAF_NODE	6034:51	6034:51	14	==
FIELD	6034:54	6034:54	13	0
LEAF_NODE	6034:54	6034:54	14	0
LEAF_NODE	6034:55	6034:55	7	)
STATEMENTS	6035:4	6038:4	7	
LEAF_NODE	6035:4	6035:4	8	{
STATEMENTS	6036:1	6037:1	8	
EXPR_STATEMENT	6036:1	6036:113	9	TIFFError ( "loadImage" , "File appears to be tiled, but the number of tiles, tile size, or tile rowsize is zero." ) ;
EXPR	6036:1	6036:1	10	TIFFError ( "loadImage" , "File appears to be tiled, but the number of tiles, tile size, or tile rowsize is zero." )
FUNCTION_CALL	6036:1	6036:112	11	TIFFError ( "loadImage" , "File appears to be tiled, but the number of tiles, tile size, or tile rowsize is zero." )
CALLEE	6036:1	6036:1	12	TIFFError
LEAF_NODE	6036:1	6036:1	13	TIFFError
LEAF_NODE	6036:10	6036:10	12	(
ARGUMENT	6036:11	6036:11	12	"loadImage"
FIELD	6036:11	6036:11	13	"loadImage"
LEAF_NODE	6036:11	6036:11	14	"loadImage"
LEAF_NODE	6036:22	6036:22	12	,
ARGUMENT	6036:24	6036:24	12	"File appears to be tiled, but the number of tiles, tile size, or tile rowsize is zero."
FIELD	6036:24	6036:24	13	"File appears to be tiled, but the number of tiles, tile size, or tile rowsize is zero."
LEAF_NODE	6036:24	6036:24	14	"File appears to be tiled, but the number of tiles, tile size, or tile rowsize is zero."
LEAF_NODE	6036:112	6036:112	12	)
LEAF_NODE	6036:113	6036:113	10	;
EXPR_STATEMENT	6037:1	6037:9	9	exit ( - 1 ) ;
EXPR	6037:1	6037:1	10	exit ( - 1 )
FUNCTION_CALL	6037:1	6037:8	11	exit ( - 1 )
CALLEE	6037:1	6037:1	12	exit
LEAF_NODE	6037:1	6037:1	13	exit
LEAF_NODE	6037:5	6037:5	12	(
ARGUMENT	6037:6	6037:6	12	- 1
UNARY_EXPR	6037:6	6037:7	13	- 1
UNARY_OPERATOR	6037:6	6037:6	14	-
LEAF_NODE	6037:6	6037:6	15	-
FIELD	6037:7	6037:7	14	1
LEAF_NODE	6037:7	6037:7	15	1
LEAF_NODE	6037:8	6037:8	12	)
LEAF_NODE	6037:9	6037:9	10	;
LEAF_NODE	6038:4	6038:4	8	}
EXPR_STATEMENT	6039:4	6039:30	6	buffsize = tlsize * ntiles ;
EXPR	6039:4	6039:4	7	buffsize = tlsize * ntiles
ASSIGN	6039:4	6039:15	8	buffsize = tlsize * ntiles
LVAL	6039:4	6039:4	9	buffsize
FIELD	6039:4	6039:4	10	buffsize
LEAF_NODE	6039:4	6039:4	11	buffsize
ASSIGN_OP	6039:13	6039:13	9	=
LEAF_NODE	6039:13	6039:13	10	=
RVAL	6039:15	6039:24	9	tlsize * ntiles
FIELD	6039:15	6039:15	10	tlsize
LEAF_NODE	6039:15	6039:15	11	tlsize
LEAF_NODE	6039:22	6039:22	10	*
FIELD	6039:24	6039:24	10	ntiles
LEAF_NODE	6039:24	6039:24	11	ntiles
LEAF_NODE	6039:30	6039:30	7	;
SELECTION	6040:4	6041:4	6	
KEYWORD	6040:4	6040:4	7	if
LEAF_NODE	6040:4	6040:4	8	if
LEAF_NODE	6040:7	6040:7	7	(
CONDITION	6040:8	6040:8	7	tlsize != ( buffsize / ntiles )
EXPR	6040:8	6040:36	8	tlsize != ( buffsize / ntiles )
FIELD	6040:8	6040:8	9	tlsize
LEAF_NODE	6040:8	6040:8	10	tlsize
EQ_OPERATOR	6040:15	6040:15	9	!=
LEAF_NODE	6040:15	6040:15	10	!=
LEAF_NODE	6040:18	6040:18	9	(
FIELD	6040:19	6040:19	9	buffsize
LEAF_NODE	6040:19	6040:19	10	buffsize
LEAF_NODE	6040:28	6040:28	9	/
FIELD	6040:30	6040:30	9	ntiles
LEAF_NODE	6040:30	6040:30	10	ntiles
LEAF_NODE	6040:36	6040:36	9	)
LEAF_NODE	6040:37	6040:37	7	)
STATEMENTS	6041:4	6044:4	7	
LEAF_NODE	6041:4	6041:4	8	{
STATEMENTS	6042:1	6043:1	8	
EXPR_STATEMENT	6042:1	6042:72	9	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" ) ;
EXPR	6042:1	6042:1	10	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" )
FUNCTION_CALL	6042:1	6042:71	11	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" )
CALLEE	6042:1	6042:1	12	TIFFError
LEAF_NODE	6042:1	6042:1	13	TIFFError
LEAF_NODE	6042:10	6042:10	12	(
ARGUMENT	6042:11	6042:11	12	"loadImage"
FIELD	6042:11	6042:11	13	"loadImage"
LEAF_NODE	6042:11	6042:11	14	"loadImage"
LEAF_NODE	6042:22	6042:22	12	,
ARGUMENT	6042:24	6042:24	12	"Integer overflow when calculating buffer size"
FIELD	6042:24	6042:24	13	"Integer overflow when calculating buffer size"
LEAF_NODE	6042:24	6042:24	14	"Integer overflow when calculating buffer size"
LEAF_NODE	6042:71	6042:71	12	)
LEAF_NODE	6042:72	6042:72	10	;
EXPR_STATEMENT	6043:1	6043:9	9	exit ( - 1 ) ;
EXPR	6043:1	6043:1	10	exit ( - 1 )
FUNCTION_CALL	6043:1	6043:8	11	exit ( - 1 )
CALLEE	6043:1	6043:1	12	exit
LEAF_NODE	6043:1	6043:1	13	exit
LEAF_NODE	6043:5	6043:5	12	(
ARGUMENT	6043:6	6043:6	12	- 1
UNARY_EXPR	6043:6	6043:7	13	- 1
UNARY_OPERATOR	6043:6	6043:6	14	-
LEAF_NODE	6043:6	6043:6	15	-
FIELD	6043:7	6043:7	14	1
LEAF_NODE	6043:7	6043:7	15	1
LEAF_NODE	6043:8	6043:8	12	)
LEAF_NODE	6043:9	6043:9	10	;
LEAF_NODE	6044:4	6044:4	8	}
LEAF_NODE	6046:4	6046:4	6	if
LEAF_NODE	6046:7	6046:7	6	(
LEAF_NODE	6046:8	6046:8	6	buffsize
LEAF_NODE	6046:17	6046:17	6	<
LEAF_NODE	6046:19	6046:19	6	(
LEAF_NODE	6046:20	6046:20	6	uint32
LEAF_NODE	6046:26	6046:26	6	)
LEAF_NODE	6046:27	6046:27	6	(
LEAF_NODE	6046:28	6046:28	6	ntiles
LEAF_NODE	6046:35	6046:35	6	*
LEAF_NODE	6046:37	6046:37	6	tl
LEAF_NODE	6046:40	6046:40	6	*
LEAF_NODE	6046:42	6046:42	6	tile_rowsize
LEAF_NODE	6046:54	6046:54	6	)
LEAF_NODE	6046:55	6046:55	6	)
LEAF_NODE	6047:6	6047:6	6	{
STATEMENTS	6048:6	6056:6	6	
LEAF_NODE	6048:6	6048:6	7	buffsize
LEAF_NODE	6048:15	6048:15	7	=
LEAF_NODE	6048:17	6048:17	7	ntiles
EXPR_STATEMENT	6048:24	6048:43	7	* tl * tile_rowsize ;
EXPR	6048:24	6048:31	8	* tl * tile_rowsize
UNARY_EXPR	6048:24	6048:26	9	* tl
UNARY_OPERATOR	6048:24	6048:24	10	*
LEAF_NODE	6048:24	6048:24	11	*
FIELD	6048:26	6048:26	10	tl
LEAF_NODE	6048:26	6048:26	11	tl
LEAF_NODE	6048:29	6048:29	9	*
FIELD	6048:31	6048:31	9	tile_rowsize
LEAF_NODE	6048:31	6048:31	10	tile_rowsize
LEAF_NODE	6048:43	6048:43	8	;
LEAF_NODE	6049:6	6049:6	7	if
LEAF_NODE	6049:9	6049:9	7	(
LEAF_NODE	6049:10	6049:10	7	ntiles
LEAF_NODE	6049:17	6049:17	7	!=
LEAF_NODE	6049:20	6049:20	7	(
LEAF_NODE	6049:21	6049:21	7	buffsize
LEAF_NODE	6049:30	6049:30	7	/
LEAF_NODE	6049:32	6049:32	7	tl
LEAF_NODE	6049:35	6049:35	7	/
LEAF_NODE	6049:37	6049:37	7	tile_rowsize
LEAF_NODE	6049:49	6049:49	7	)
LEAF_NODE	6049:50	6049:50	7	)
LEAF_NODE	6050:6	6050:6	7	{
STATEMENTS	6051:1	6052:1	7	
EXPR_STATEMENT	6051:1	6051:72	8	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" ) ;
EXPR	6051:1	6051:1	9	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" )
FUNCTION_CALL	6051:1	6051:71	10	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" )
CALLEE	6051:1	6051:1	11	TIFFError
LEAF_NODE	6051:1	6051:1	12	TIFFError
LEAF_NODE	6051:10	6051:10	11	(
ARGUMENT	6051:11	6051:11	11	"loadImage"
FIELD	6051:11	6051:11	12	"loadImage"
LEAF_NODE	6051:11	6051:11	13	"loadImage"
LEAF_NODE	6051:22	6051:22	11	,
ARGUMENT	6051:24	6051:24	11	"Integer overflow when calculating buffer size"
FIELD	6051:24	6051:24	12	"Integer overflow when calculating buffer size"
LEAF_NODE	6051:24	6051:24	13	"Integer overflow when calculating buffer size"
LEAF_NODE	6051:71	6051:71	11	)
LEAF_NODE	6051:72	6051:72	9	;
EXPR_STATEMENT	6052:1	6052:9	8	exit ( - 1 ) ;
EXPR	6052:1	6052:1	9	exit ( - 1 )
FUNCTION_CALL	6052:1	6052:8	10	exit ( - 1 )
CALLEE	6052:1	6052:1	11	exit
LEAF_NODE	6052:1	6052:1	12	exit
LEAF_NODE	6052:5	6052:5	11	(
ARGUMENT	6052:6	6052:6	11	- 1
UNARY_EXPR	6052:6	6052:7	12	- 1
UNARY_OPERATOR	6052:6	6052:6	13	-
LEAF_NODE	6052:6	6052:6	14	-
FIELD	6052:7	6052:7	13	1
LEAF_NODE	6052:7	6052:7	14	1
LEAF_NODE	6052:8	6052:8	11	)
LEAF_NODE	6052:9	6052:9	9	;
LEAF_NODE	6053:6	6053:6	7	}
EXPR_STATEMENT	6056:6	6058:48	7	TIFFError ( "loadImage" , "Tilesize %u is too small, using ntiles * tilelength * tilerowsize %lu" , tlsize , ( unsigned long ) buffsize ) ;
EXPR	6056:6	6056:6	8	TIFFError ( "loadImage" , "Tilesize %u is too small, using ntiles * tilelength * tilerowsize %lu" , tlsize , ( unsigned long ) buffsize )
FUNCTION_CALL	6056:6	6058:47	9	TIFFError ( "loadImage" , "Tilesize %u is too small, using ntiles * tilelength * tilerowsize %lu" , tlsize , ( unsigned long ) buffsize )
CALLEE	6056:6	6056:6	10	TIFFError
LEAF_NODE	6056:6	6056:6	11	TIFFError
LEAF_NODE	6056:15	6056:15	10	(
ARGUMENT	6056:16	6056:16	10	"loadImage"
FIELD	6056:16	6056:16	11	"loadImage"
LEAF_NODE	6056:16	6056:16	12	"loadImage"
LEAF_NODE	6056:27	6056:27	10	,
ARGUMENT	6057:9	6057:9	10	"Tilesize %u is too small, using ntiles * tilelength * tilerowsize %lu"
FIELD	6057:9	6057:9	11	"Tilesize %u is too small, using ntiles * tilelength * tilerowsize %lu"
LEAF_NODE	6057:9	6057:9	12	"Tilesize %u is too small, using ntiles * tilelength * tilerowsize %lu"
LEAF_NODE	6057:80	6057:80	10	,
ARGUMENT	6058:16	6058:16	10	tlsize
FIELD	6058:16	6058:16	11	tlsize
LEAF_NODE	6058:16	6058:16	12	tlsize
LEAF_NODE	6058:22	6058:22	10	,
ARGUMENT	6058:24	6058:39	10	( unsigned long ) buffsize
LEAF_NODE	6058:24	6058:24	11	(
TYPE_NAME	6058:25	6058:34	11	unsigned long
LEAF_NODE	6058:25	6058:25	12	unsigned
LEAF_NODE	6058:34	6058:34	12	long
LEAF_NODE	6058:38	6058:38	11	)
FIELD	6058:39	6058:39	11	buffsize
LEAF_NODE	6058:39	6058:39	12	buffsize
LEAF_NODE	6058:47	6058:47	10	)
LEAF_NODE	6058:48	6058:48	8	;
LEAF_NODE	6060:6	6060:6	6	}
SELECTION	6062:4	6063:6	6	
KEYWORD	6062:4	6062:4	7	if
LEAF_NODE	6062:4	6062:4	8	if
LEAF_NODE	6062:7	6062:7	7	(
CONDITION	6062:8	6062:8	7	dump -> infile != NULL
EXPR	6062:8	6062:24	8	dump -> infile != NULL
FIELD	6062:8	6062:14	9	dump -> infile
LEAF_NODE	6062:8	6062:8	10	dump
LEAF_NODE	6062:12	6062:12	10	->
LEAF_NODE	6062:14	6062:14	10	infile
EQ_OPERATOR	6062:21	6062:21	9	!=
LEAF_NODE	6062:21	6062:21	10	!=
FIELD	6062:24	6062:24	9	NULL
LEAF_NODE	6062:24	6062:24	10	NULL
LEAF_NODE	6062:28	6062:28	7	)
STATEMENTS	6063:6	6063:6	7	
EXPR_STATEMENT	6063:6	6065:46	8	dump_info ( dump -> infile , dump -> format , "" , "Tilesize: %u, Number of Tiles: %u, Tile row size: %u" , tlsize , ntiles , tile_rowsize ) ;
EXPR	6063:6	6063:6	9	dump_info ( dump -> infile , dump -> format , "" , "Tilesize: %u, Number of Tiles: %u, Tile row size: %u" , tlsize , ntiles , tile_rowsize )
FUNCTION_CALL	6063:6	6065:45	10	dump_info ( dump -> infile , dump -> format , "" , "Tilesize: %u, Number of Tiles: %u, Tile row size: %u" , tlsize , ntiles , tile_rowsize )
CALLEE	6063:6	6063:6	11	dump_info
LEAF_NODE	6063:6	6063:6	12	dump_info
LEAF_NODE	6063:16	6063:16	11	(
ARGUMENT	6063:17	6063:17	11	dump -> infile
FIELD	6063:17	6063:23	12	dump -> infile
LEAF_NODE	6063:17	6063:17	13	dump
LEAF_NODE	6063:21	6063:21	13	->
LEAF_NODE	6063:23	6063:23	13	infile
LEAF_NODE	6063:29	6063:29	11	,
ARGUMENT	6063:31	6063:31	11	dump -> format
FIELD	6063:31	6063:37	12	dump -> format
LEAF_NODE	6063:31	6063:31	13	dump
LEAF_NODE	6063:35	6063:35	13	->
LEAF_NODE	6063:37	6063:37	13	format
LEAF_NODE	6063:43	6063:43	11	,
ARGUMENT	6063:45	6063:45	11	""
FIELD	6063:45	6063:45	12	""
LEAF_NODE	6063:45	6063:45	13	""
LEAF_NODE	6063:47	6063:47	11	,
ARGUMENT	6064:17	6064:17	11	"Tilesize: %u, Number of Tiles: %u, Tile row size: %u"
FIELD	6064:17	6064:17	12	"Tilesize: %u, Number of Tiles: %u, Tile row size: %u"
LEAF_NODE	6064:17	6064:17	13	"Tilesize: %u, Number of Tiles: %u, Tile row size: %u"
LEAF_NODE	6064:71	6064:71	11	,
ARGUMENT	6065:17	6065:17	11	tlsize
FIELD	6065:17	6065:17	12	tlsize
LEAF_NODE	6065:17	6065:17	13	tlsize
LEAF_NODE	6065:23	6065:23	11	,
ARGUMENT	6065:25	6065:25	11	ntiles
FIELD	6065:25	6065:25	12	ntiles
LEAF_NODE	6065:25	6065:25	13	ntiles
LEAF_NODE	6065:31	6065:31	11	,
ARGUMENT	6065:33	6065:33	11	tile_rowsize
FIELD	6065:33	6065:33	12	tile_rowsize
LEAF_NODE	6065:33	6065:33	13	tile_rowsize
LEAF_NODE	6065:45	6065:45	11	)
LEAF_NODE	6065:46	6065:46	9	;
LEAF_NODE	6066:4	6066:4	5	}
SELECTION	6067:2	6068:4	3	
KEYWORD	6067:2	6067:2	4	else
LEAF_NODE	6067:2	6067:2	5	else
STATEMENTS	6068:4	6106:4	4	
LEAF_NODE	6068:4	6068:4	5	{
STATEMENTS	6069:4	6102:4	5	
SIMPLE_DECL	6069:4	6069:25	6	uint32 buffsize_check ;
VAR_DECL	6069:4	6069:11	7	uint32 buffsize_check
TYPE	6069:4	6069:4	8	uint32
TYPE_NAME	6069:4	6069:4	9	uint32
LEAF_NODE	6069:4	6069:4	10	uint32
NAME	6069:11	6069:11	8	buffsize_check
LEAF_NODE	6069:11	6069:11	9	buffsize_check
LEAF_NODE	6069:25	6069:25	7	;
EXPR_STATEMENT	6070:4	6070:20	6	readunit = STRIP ;
EXPR	6070:4	6070:4	7	readunit = STRIP
ASSIGN	6070:4	6070:15	8	readunit = STRIP
LVAL	6070:4	6070:4	9	readunit
FIELD	6070:4	6070:4	10	readunit
LEAF_NODE	6070:4	6070:4	11	readunit
ASSIGN_OP	6070:13	6070:13	9	=
LEAF_NODE	6070:13	6070:13	10	=
RVAL	6070:15	6070:15	9	STRIP
FIELD	6070:15	6070:15	10	STRIP
LEAF_NODE	6070:15	6070:15	11	STRIP
LEAF_NODE	6070:20	6070:20	7	;
EXPR_STATEMENT	6071:4	6071:66	6	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	6071:4	6071:4	7	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
FUNCTION_CALL	6071:4	6071:65	8	TIFFGetFieldDefaulted ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	6071:4	6071:4	9	TIFFGetFieldDefaulted
LEAF_NODE	6071:4	6071:4	10	TIFFGetFieldDefaulted
LEAF_NODE	6071:25	6071:25	9	(
ARGUMENT	6071:26	6071:26	9	in
FIELD	6071:26	6071:26	10	in
LEAF_NODE	6071:26	6071:26	11	in
LEAF_NODE	6071:28	6071:28	9	,
ARGUMENT	6071:30	6071:30	9	TIFFTAG_ROWSPERSTRIP
FIELD	6071:30	6071:30	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	6071:30	6071:30	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	6071:50	6071:50	9	,
ARGUMENT	6071:52	6071:52	9	& rowsperstrip
UNARY_EXPR	6071:52	6071:53	10	& rowsperstrip
UNARY_OPERATOR	6071:52	6071:52	11	&
LEAF_NODE	6071:52	6071:52	12	&
FIELD	6071:53	6071:53	11	rowsperstrip
LEAF_NODE	6071:53	6071:53	12	rowsperstrip
LEAF_NODE	6071:65	6071:65	9	)
LEAF_NODE	6071:66	6071:66	7	;
EXPR_STATEMENT	6072:4	6072:30	6	stsize = TIFFStripSize ( in ) ;
EXPR	6072:4	6072:4	7	stsize = TIFFStripSize ( in )
ASSIGN	6072:4	6072:13	8	stsize = TIFFStripSize ( in )
LVAL	6072:4	6072:4	9	stsize
FIELD	6072:4	6072:4	10	stsize
LEAF_NODE	6072:4	6072:4	11	stsize
ASSIGN_OP	6072:11	6072:11	9	=
LEAF_NODE	6072:11	6072:11	10	=
RVAL	6072:13	6072:13	9	TIFFStripSize ( in )
FUNCTION_CALL	6072:13	6072:29	10	TIFFStripSize ( in )
CALLEE	6072:13	6072:13	11	TIFFStripSize
LEAF_NODE	6072:13	6072:13	12	TIFFStripSize
LEAF_NODE	6072:26	6072:26	11	(
ARGUMENT	6072:27	6072:27	11	in
FIELD	6072:27	6072:27	12	in
LEAF_NODE	6072:27	6072:27	13	in
LEAF_NODE	6072:29	6072:29	11	)
LEAF_NODE	6072:30	6072:30	7	;
EXPR_STATEMENT	6073:4	6073:36	6	nstrips = TIFFNumberOfStrips ( in ) ;
EXPR	6073:4	6073:4	7	nstrips = TIFFNumberOfStrips ( in )
ASSIGN	6073:4	6073:14	8	nstrips = TIFFNumberOfStrips ( in )
LVAL	6073:4	6073:4	9	nstrips
FIELD	6073:4	6073:4	10	nstrips
LEAF_NODE	6073:4	6073:4	11	nstrips
ASSIGN_OP	6073:12	6073:12	9	=
LEAF_NODE	6073:12	6073:12	10	=
RVAL	6073:14	6073:14	9	TIFFNumberOfStrips ( in )
FUNCTION_CALL	6073:14	6073:35	10	TIFFNumberOfStrips ( in )
CALLEE	6073:14	6073:14	11	TIFFNumberOfStrips
LEAF_NODE	6073:14	6073:14	12	TIFFNumberOfStrips
LEAF_NODE	6073:32	6073:32	11	(
ARGUMENT	6073:33	6073:33	11	in
FIELD	6073:33	6073:33	12	in
LEAF_NODE	6073:33	6073:33	13	in
LEAF_NODE	6073:35	6073:35	11	)
LEAF_NODE	6073:36	6073:36	7	;
SELECTION	6074:4	6075:4	6	
KEYWORD	6074:4	6074:4	7	if
LEAF_NODE	6074:4	6074:4	8	if
LEAF_NODE	6074:7	6074:7	7	(
CONDITION	6074:8	6074:8	7	nstrips == 0 || stsize == 0
EXPR	6074:8	6074:8	8	nstrips == 0 || stsize == 0
OR	6074:8	6074:24	9	nstrips == 0 || stsize == 0
EXPR	6074:8	6074:19	10	nstrips == 0
FIELD	6074:8	6074:8	11	nstrips
LEAF_NODE	6074:8	6074:8	12	nstrips
EQ_OPERATOR	6074:16	6074:16	11	==
LEAF_NODE	6074:16	6074:16	12	==
FIELD	6074:19	6074:19	11	0
LEAF_NODE	6074:19	6074:19	12	0
LEAF_NODE	6074:21	6074:21	10	||
EXPR	6074:24	6074:34	10	stsize == 0
FIELD	6074:24	6074:24	11	stsize
LEAF_NODE	6074:24	6074:24	12	stsize
EQ_OPERATOR	6074:31	6074:31	11	==
LEAF_NODE	6074:31	6074:31	12	==
FIELD	6074:34	6074:34	11	0
LEAF_NODE	6074:34	6074:34	12	0
LEAF_NODE	6074:35	6074:35	7	)
STATEMENTS	6075:4	6078:4	7	
LEAF_NODE	6075:4	6075:4	8	{
STATEMENTS	6076:1	6077:1	8	
EXPR_STATEMENT	6076:1	6076:103	9	TIFFError ( "loadImage" , "File appears to be striped, but the number of stipes or stripe size is zero." ) ;
EXPR	6076:1	6076:1	10	TIFFError ( "loadImage" , "File appears to be striped, but the number of stipes or stripe size is zero." )
FUNCTION_CALL	6076:1	6076:102	11	TIFFError ( "loadImage" , "File appears to be striped, but the number of stipes or stripe size is zero." )
CALLEE	6076:1	6076:1	12	TIFFError
LEAF_NODE	6076:1	6076:1	13	TIFFError
LEAF_NODE	6076:10	6076:10	12	(
ARGUMENT	6076:11	6076:11	12	"loadImage"
FIELD	6076:11	6076:11	13	"loadImage"
LEAF_NODE	6076:11	6076:11	14	"loadImage"
LEAF_NODE	6076:22	6076:22	12	,
ARGUMENT	6076:24	6076:24	12	"File appears to be striped, but the number of stipes or stripe size is zero."
FIELD	6076:24	6076:24	13	"File appears to be striped, but the number of stipes or stripe size is zero."
LEAF_NODE	6076:24	6076:24	14	"File appears to be striped, but the number of stipes or stripe size is zero."
LEAF_NODE	6076:102	6076:102	12	)
LEAF_NODE	6076:103	6076:103	10	;
EXPR_STATEMENT	6077:1	6077:9	9	exit ( - 1 ) ;
EXPR	6077:1	6077:1	10	exit ( - 1 )
FUNCTION_CALL	6077:1	6077:8	11	exit ( - 1 )
CALLEE	6077:1	6077:1	12	exit
LEAF_NODE	6077:1	6077:1	13	exit
LEAF_NODE	6077:5	6077:5	12	(
ARGUMENT	6077:6	6077:6	12	- 1
UNARY_EXPR	6077:6	6077:7	13	- 1
UNARY_OPERATOR	6077:6	6077:6	14	-
LEAF_NODE	6077:6	6077:6	15	-
FIELD	6077:7	6077:7	14	1
LEAF_NODE	6077:7	6077:7	15	1
LEAF_NODE	6077:8	6077:8	12	)
LEAF_NODE	6077:9	6077:9	10	;
LEAF_NODE	6078:4	6078:4	8	}
EXPR_STATEMENT	6080:4	6080:31	6	buffsize = stsize * nstrips ;
EXPR	6080:4	6080:4	7	buffsize = stsize * nstrips
ASSIGN	6080:4	6080:15	8	buffsize = stsize * nstrips
LVAL	6080:4	6080:4	9	buffsize
FIELD	6080:4	6080:4	10	buffsize
LEAF_NODE	6080:4	6080:4	11	buffsize
ASSIGN_OP	6080:13	6080:13	9	=
LEAF_NODE	6080:13	6080:13	10	=
RVAL	6080:15	6080:24	9	stsize * nstrips
FIELD	6080:15	6080:15	10	stsize
LEAF_NODE	6080:15	6080:15	11	stsize
LEAF_NODE	6080:22	6080:22	10	*
FIELD	6080:24	6080:24	10	nstrips
LEAF_NODE	6080:24	6080:24	11	nstrips
LEAF_NODE	6080:31	6080:31	7	;
SELECTION	6081:4	6082:4	6	
KEYWORD	6081:4	6081:4	7	if
LEAF_NODE	6081:4	6081:4	8	if
LEAF_NODE	6081:7	6081:7	7	(
CONDITION	6081:8	6081:8	7	stsize != ( buffsize / nstrips )
EXPR	6081:8	6081:37	8	stsize != ( buffsize / nstrips )
FIELD	6081:8	6081:8	9	stsize
LEAF_NODE	6081:8	6081:8	10	stsize
EQ_OPERATOR	6081:15	6081:15	9	!=
LEAF_NODE	6081:15	6081:15	10	!=
LEAF_NODE	6081:18	6081:18	9	(
FIELD	6081:19	6081:19	9	buffsize
LEAF_NODE	6081:19	6081:19	10	buffsize
LEAF_NODE	6081:28	6081:28	9	/
FIELD	6081:30	6081:30	9	nstrips
LEAF_NODE	6081:30	6081:30	10	nstrips
LEAF_NODE	6081:37	6081:37	9	)
LEAF_NODE	6081:38	6081:38	7	)
STATEMENTS	6082:4	6085:4	7	
LEAF_NODE	6082:4	6082:4	8	{
STATEMENTS	6083:1	6084:1	8	
EXPR_STATEMENT	6083:1	6083:72	9	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" ) ;
EXPR	6083:1	6083:1	10	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" )
FUNCTION_CALL	6083:1	6083:71	11	TIFFError ( "loadImage" , "Integer overflow when calculating buffer size" )
CALLEE	6083:1	6083:1	12	TIFFError
LEAF_NODE	6083:1	6083:1	13	TIFFError
LEAF_NODE	6083:10	6083:10	12	(
ARGUMENT	6083:11	6083:11	12	"loadImage"
FIELD	6083:11	6083:11	13	"loadImage"
LEAF_NODE	6083:11	6083:11	14	"loadImage"
LEAF_NODE	6083:22	6083:22	12	,
ARGUMENT	6083:24	6083:24	12	"Integer overflow when calculating buffer size"
FIELD	6083:24	6083:24	13	"Integer overflow when calculating buffer size"
LEAF_NODE	6083:24	6083:24	14	"Integer overflow when calculating buffer size"
LEAF_NODE	6083:71	6083:71	12	)
LEAF_NODE	6083:72	6083:72	10	;
EXPR_STATEMENT	6084:1	6084:9	9	exit ( - 1 ) ;
EXPR	6084:1	6084:1	10	exit ( - 1 )
FUNCTION_CALL	6084:1	6084:8	11	exit ( - 1 )
CALLEE	6084:1	6084:1	12	exit
LEAF_NODE	6084:1	6084:1	13	exit
LEAF_NODE	6084:5	6084:5	12	(
ARGUMENT	6084:6	6084:6	12	- 1
UNARY_EXPR	6084:6	6084:7	13	- 1
UNARY_OPERATOR	6084:6	6084:6	14	-
LEAF_NODE	6084:6	6084:6	15	-
FIELD	6084:7	6084:7	14	1
LEAF_NODE	6084:7	6084:7	15	1
LEAF_NODE	6084:8	6084:8	12	)
LEAF_NODE	6084:9	6084:9	10	;
LEAF_NODE	6085:4	6085:4	8	}
LEAF_NODE	6086:4	6086:4	6	buffsize_check
LEAF_NODE	6086:19	6086:19	6	=
LEAF_NODE	6086:21	6086:21	6	(
LEAF_NODE	6086:22	6086:22	6	(
LEAF_NODE	6086:23	6086:23	6	length
LEAF_NODE	6086:30	6086:30	6	*
LEAF_NODE	6086:32	6086:32	6	width
LEAF_NODE	6086:38	6086:38	6	*
LEAF_NODE	6086:40	6086:40	6	spp
LEAF_NODE	6086:44	6086:44	6	*
LEAF_NODE	6086:46	6086:46	6	bps
LEAF_NODE	6086:49	6086:49	6	)
LEAF_NODE	6086:51	6086:51	6	+
LEAF_NODE	6086:53	6086:53	6	7
LEAF_NODE	6086:54	6086:54	6	)
LEAF_NODE	6086:55	6086:55	6	;
LEAF_NODE	6087:4	6087:4	6	if
LEAF_NODE	6087:7	6087:7	6	(
LEAF_NODE	6087:8	6087:8	6	length
LEAF_NODE	6087:15	6087:15	6	!=
LEAF_NODE	6087:18	6087:18	6	(
LEAF_NODE	6087:19	6087:19	6	(
LEAF_NODE	6087:20	6087:20	6	buffsize_check
LEAF_NODE	6087:35	6087:35	6	-
LEAF_NODE	6087:37	6087:37	6	7
LEAF_NODE	6087:38	6087:38	6	)
LEAF_NODE	6087:40	6087:40	6	/
LEAF_NODE	6087:42	6087:42	6	width
LEAF_NODE	6087:48	6087:48	6	/
LEAF_NODE	6087:50	6087:50	6	spp
LEAF_NODE	6087:54	6087:54	6	/
LEAF_NODE	6087:56	6087:56	6	bps
LEAF_NODE	6087:59	6087:59	6	)
LEAF_NODE	6087:60	6087:60	6	)
LEAF_NODE	6088:4	6088:4	6	{
STATEMENTS	6089:1	6090:1	6	
EXPR_STATEMENT	6089:1	6089:53	7	TIFFError ( "loadImage" , "Integer overflow detected." ) ;
EXPR	6089:1	6089:1	8	TIFFError ( "loadImage" , "Integer overflow detected." )
FUNCTION_CALL	6089:1	6089:52	9	TIFFError ( "loadImage" , "Integer overflow detected." )
CALLEE	6089:1	6089:1	10	TIFFError
LEAF_NODE	6089:1	6089:1	11	TIFFError
LEAF_NODE	6089:10	6089:10	10	(
ARGUMENT	6089:11	6089:11	10	"loadImage"
FIELD	6089:11	6089:11	11	"loadImage"
LEAF_NODE	6089:11	6089:11	12	"loadImage"
LEAF_NODE	6089:22	6089:22	10	,
ARGUMENT	6089:24	6089:24	10	"Integer overflow detected."
FIELD	6089:24	6089:24	11	"Integer overflow detected."
LEAF_NODE	6089:24	6089:24	12	"Integer overflow detected."
LEAF_NODE	6089:52	6089:52	10	)
LEAF_NODE	6089:53	6089:53	8	;
EXPR_STATEMENT	6090:1	6090:9	7	exit ( - 1 ) ;
EXPR	6090:1	6090:1	8	exit ( - 1 )
FUNCTION_CALL	6090:1	6090:8	9	exit ( - 1 )
CALLEE	6090:1	6090:1	10	exit
LEAF_NODE	6090:1	6090:1	11	exit
LEAF_NODE	6090:5	6090:5	10	(
ARGUMENT	6090:6	6090:6	10	- 1
UNARY_EXPR	6090:6	6090:7	11	- 1
UNARY_OPERATOR	6090:6	6090:6	12	-
LEAF_NODE	6090:6	6090:6	13	-
FIELD	6090:7	6090:7	12	1
LEAF_NODE	6090:7	6090:7	13	1
LEAF_NODE	6090:8	6090:8	10	)
LEAF_NODE	6090:9	6090:9	8	;
LEAF_NODE	6091:4	6091:4	6	}
LEAF_NODE	6092:4	6092:4	6	if
LEAF_NODE	6092:7	6092:7	6	(
LEAF_NODE	6092:8	6092:8	6	buffsize
LEAF_NODE	6092:17	6092:17	6	<
LEAF_NODE	6092:19	6092:19	6	(
LEAF_NODE	6092:20	6092:20	6	uint32
LEAF_NODE	6092:26	6092:26	6	)
LEAF_NODE	6092:28	6092:28	6	(
LEAF_NODE	6092:29	6092:29	6	(
LEAF_NODE	6092:30	6092:30	6	(
LEAF_NODE	6092:31	6092:31	6	length
LEAF_NODE	6092:38	6092:38	6	*
LEAF_NODE	6092:40	6092:40	6	width
LEAF_NODE	6092:46	6092:46	6	*
LEAF_NODE	6092:48	6092:48	6	spp
LEAF_NODE	6092:52	6092:52	6	*
LEAF_NODE	6092:54	6092:54	6	bps
LEAF_NODE	6092:57	6092:57	6	)
LEAF_NODE	6092:59	6092:59	6	+
LEAF_NODE	6092:61	6092:61	6	7
LEAF_NODE	6092:62	6092:62	6	)
LEAF_NODE	6092:64	6092:64	6	/
LEAF_NODE	6092:66	6092:66	6	8
LEAF_NODE	6092:67	6092:67	6	)
LEAF_NODE	6092:68	6092:68	6	)
LEAF_NODE	6093:6	6093:6	6	{
STATEMENTS	6094:6	6096:6	6	
LEAF_NODE	6094:6	6094:6	7	buffsize
LEAF_NODE	6094:15	6094:15	7	=
LEAF_NODE	6094:18	6094:18	7	(
LEAF_NODE	6094:19	6094:19	7	(
LEAF_NODE	6094:20	6094:20	7	length
LEAF_NODE	6094:27	6094:27	7	*
LEAF_NODE	6094:29	6094:29	7	width
LEAF_NODE	6094:35	6094:35	7	*
LEAF_NODE	6094:37	6094:37	7	spp
LEAF_NODE	6094:41	6094:41	7	*
LEAF_NODE	6094:43	6094:43	7	bps
LEAF_NODE	6094:46	6094:46	7	)
LEAF_NODE	6094:48	6094:48	7	+
LEAF_NODE	6094:50	6094:50	7	7
LEAF_NODE	6094:51	6094:51	7	)
LEAF_NODE	6094:53	6094:53	7	/
EXPR_STATEMENT	6094:55	6094:56	7	8 ;
EXPR	6094:55	6094:55	8	8
FIELD	6094:55	6094:55	9	8
LEAF_NODE	6094:55	6094:55	10	8
LEAF_NODE	6094:56	6094:56	8	;
EXPR_STATEMENT	6096:6	6098:48	7	TIFFError ( "loadImage" , "Stripsize %u is too small, using imagelength * width * spp * bps / 8 = %lu" , stsize , ( unsigned long ) buffsize ) ;
EXPR	6096:6	6096:6	8	TIFFError ( "loadImage" , "Stripsize %u is too small, using imagelength * width * spp * bps / 8 = %lu" , stsize , ( unsigned long ) buffsize )
FUNCTION_CALL	6096:6	6098:47	9	TIFFError ( "loadImage" , "Stripsize %u is too small, using imagelength * width * spp * bps / 8 = %lu" , stsize , ( unsigned long ) buffsize )
CALLEE	6096:6	6096:6	10	TIFFError
LEAF_NODE	6096:6	6096:6	11	TIFFError
LEAF_NODE	6096:15	6096:15	10	(
ARGUMENT	6096:16	6096:16	10	"loadImage"
FIELD	6096:16	6096:16	11	"loadImage"
LEAF_NODE	6096:16	6096:16	12	"loadImage"
LEAF_NODE	6096:27	6096:27	10	,
ARGUMENT	6097:9	6097:9	10	"Stripsize %u is too small, using imagelength * width * spp * bps / 8 = %lu"
FIELD	6097:9	6097:9	11	"Stripsize %u is too small, using imagelength * width * spp * bps / 8 = %lu"
LEAF_NODE	6097:9	6097:9	12	"Stripsize %u is too small, using imagelength * width * spp * bps / 8 = %lu"
LEAF_NODE	6097:85	6097:85	10	,
ARGUMENT	6098:16	6098:16	10	stsize
FIELD	6098:16	6098:16	11	stsize
LEAF_NODE	6098:16	6098:16	12	stsize
LEAF_NODE	6098:22	6098:22	10	,
ARGUMENT	6098:24	6098:39	10	( unsigned long ) buffsize
LEAF_NODE	6098:24	6098:24	11	(
TYPE_NAME	6098:25	6098:34	11	unsigned long
LEAF_NODE	6098:25	6098:25	12	unsigned
LEAF_NODE	6098:34	6098:34	12	long
LEAF_NODE	6098:38	6098:38	11	)
FIELD	6098:39	6098:39	11	buffsize
LEAF_NODE	6098:39	6098:39	12	buffsize
LEAF_NODE	6098:47	6098:47	10	)
LEAF_NODE	6098:48	6098:48	8	;
LEAF_NODE	6100:6	6100:6	6	}
SELECTION	6102:4	6103:6	6	
KEYWORD	6102:4	6102:4	7	if
LEAF_NODE	6102:4	6102:4	8	if
LEAF_NODE	6102:7	6102:7	7	(
CONDITION	6102:8	6102:8	7	dump -> infile != NULL
EXPR	6102:8	6102:24	8	dump -> infile != NULL
FIELD	6102:8	6102:14	9	dump -> infile
LEAF_NODE	6102:8	6102:8	10	dump
LEAF_NODE	6102:12	6102:12	10	->
LEAF_NODE	6102:14	6102:14	10	infile
EQ_OPERATOR	6102:21	6102:21	9	!=
LEAF_NODE	6102:21	6102:21	10	!=
FIELD	6102:24	6102:24	9	NULL
LEAF_NODE	6102:24	6102:24	10	NULL
LEAF_NODE	6102:28	6102:28	7	)
STATEMENTS	6103:6	6103:6	7	
EXPR_STATEMENT	6103:6	6105:47	8	dump_info ( dump -> infile , dump -> format , "" , "Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u" , stsize , nstrips , rowsperstrip , scanlinesize ) ;
EXPR	6103:6	6103:6	9	dump_info ( dump -> infile , dump -> format , "" , "Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u" , stsize , nstrips , rowsperstrip , scanlinesize )
FUNCTION_CALL	6103:6	6105:46	10	dump_info ( dump -> infile , dump -> format , "" , "Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u" , stsize , nstrips , rowsperstrip , scanlinesize )
CALLEE	6103:6	6103:6	11	dump_info
LEAF_NODE	6103:6	6103:6	12	dump_info
LEAF_NODE	6103:16	6103:16	11	(
ARGUMENT	6103:17	6103:17	11	dump -> infile
FIELD	6103:17	6103:23	12	dump -> infile
LEAF_NODE	6103:17	6103:17	13	dump
LEAF_NODE	6103:21	6103:21	13	->
LEAF_NODE	6103:23	6103:23	13	infile
LEAF_NODE	6103:29	6103:29	11	,
ARGUMENT	6103:31	6103:31	11	dump -> format
FIELD	6103:31	6103:37	12	dump -> format
LEAF_NODE	6103:31	6103:31	13	dump
LEAF_NODE	6103:35	6103:35	13	->
LEAF_NODE	6103:37	6103:37	13	format
LEAF_NODE	6103:43	6103:43	11	,
ARGUMENT	6103:45	6103:45	11	""
FIELD	6103:45	6103:45	12	""
LEAF_NODE	6103:45	6103:45	13	""
LEAF_NODE	6103:47	6103:47	11	,
ARGUMENT	6104:17	6104:17	11	"Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u"
FIELD	6104:17	6104:17	12	"Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u"
LEAF_NODE	6104:17	6104:17	13	"Stripsize: %u, Number of Strips: %u, Rows per Strip: %u, Scanline size: %u"
LEAF_NODE	6104:93	6104:93	11	,
ARGUMENT	6105:3	6105:3	11	stsize
FIELD	6105:3	6105:3	12	stsize
LEAF_NODE	6105:3	6105:3	13	stsize
LEAF_NODE	6105:9	6105:9	11	,
ARGUMENT	6105:11	6105:11	11	nstrips
FIELD	6105:11	6105:11	12	nstrips
LEAF_NODE	6105:11	6105:11	13	nstrips
LEAF_NODE	6105:18	6105:18	11	,
ARGUMENT	6105:20	6105:20	11	rowsperstrip
FIELD	6105:20	6105:20	12	rowsperstrip
LEAF_NODE	6105:20	6105:20	13	rowsperstrip
LEAF_NODE	6105:32	6105:32	11	,
ARGUMENT	6105:34	6105:34	11	scanlinesize
FIELD	6105:34	6105:34	12	scanlinesize
LEAF_NODE	6105:34	6105:34	13	scanlinesize
LEAF_NODE	6105:46	6105:46	11	)
LEAF_NODE	6105:47	6105:47	9	;
LEAF_NODE	6106:4	6106:4	5	}
SELECTION	6108:2	6109:4	3	
KEYWORD	6108:2	6108:2	4	if
LEAF_NODE	6108:2	6108:2	5	if
LEAF_NODE	6108:5	6108:5	4	(
CONDITION	6108:6	6108:6	4	input_compression == COMPRESSION_JPEG
EXPR	6108:6	6108:27	5	input_compression == COMPRESSION_JPEG
FIELD	6108:6	6108:6	6	input_compression
LEAF_NODE	6108:6	6108:6	7	input_compression
EQ_OPERATOR	6108:24	6108:24	6	==
LEAF_NODE	6108:24	6108:24	7	==
FIELD	6108:27	6108:27	6	COMPRESSION_JPEG
LEAF_NODE	6108:27	6108:27	7	COMPRESSION_JPEG
LEAF_NODE	6108:43	6108:43	4	)
STATEMENTS	6109:4	6112:4	4	
LEAF_NODE	6109:4	6109:4	5	{
STATEMENTS	6110:4	6111:4	5	
EXPR_STATEMENT	6110:4	6110:37	6	jpegcolormode = JPEGCOLORMODE_RGB ;
EXPR	6110:4	6110:4	7	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	6110:4	6110:20	8	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	6110:4	6110:4	9	jpegcolormode
FIELD	6110:4	6110:4	10	jpegcolormode
LEAF_NODE	6110:4	6110:4	11	jpegcolormode
ASSIGN_OP	6110:18	6110:18	9	=
LEAF_NODE	6110:18	6110:18	10	=
RVAL	6110:20	6110:20	9	JPEGCOLORMODE_RGB
FIELD	6110:20	6110:20	10	JPEGCOLORMODE_RGB
LEAF_NODE	6110:20	6110:20	11	JPEGCOLORMODE_RGB
LEAF_NODE	6110:37	6110:37	7	;
EXPR_STATEMENT	6111:4	6111:62	6	TIFFSetField ( in , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	6111:4	6111:4	7	TIFFSetField ( in , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	6111:4	6111:61	8	TIFFSetField ( in , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	6111:4	6111:4	9	TIFFSetField
LEAF_NODE	6111:4	6111:4	10	TIFFSetField
LEAF_NODE	6111:16	6111:16	9	(
ARGUMENT	6111:17	6111:17	9	in
FIELD	6111:17	6111:17	10	in
LEAF_NODE	6111:17	6111:17	11	in
LEAF_NODE	6111:19	6111:19	9	,
ARGUMENT	6111:21	6111:21	9	TIFFTAG_JPEGCOLORMODE
FIELD	6111:21	6111:21	10	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	6111:21	6111:21	11	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	6111:42	6111:42	9	,
ARGUMENT	6111:44	6111:44	9	JPEGCOLORMODE_RGB
FIELD	6111:44	6111:44	10	JPEGCOLORMODE_RGB
LEAF_NODE	6111:44	6111:44	11	JPEGCOLORMODE_RGB
LEAF_NODE	6111:61	6111:61	9	)
LEAF_NODE	6111:62	6111:62	7	;
LEAF_NODE	6112:4	6112:4	5	}
SELECTION	6114:2	6115:4	3	
KEYWORD	6114:2	6114:2	4	else
LEAF_NODE	6114:2	6114:2	5	else
STATEMENTS	6115:4	6128:4	4	
LEAF_NODE	6115:4	6115:4	5	{
STATEMENTS	6116:4	6116:4	5	
SELECTION	6116:4	6117:6	6	
KEYWORD	6116:4	6116:4	7	if
LEAF_NODE	6116:4	6116:4	8	if
LEAF_NODE	6116:7	6116:7	7	(
CONDITION	6116:8	6116:8	7	input_photometric == PHOTOMETRIC_YCBCR
EXPR	6116:8	6116:29	8	input_photometric == PHOTOMETRIC_YCBCR
FIELD	6116:8	6116:8	9	input_photometric
LEAF_NODE	6116:8	6116:8	10	input_photometric
EQ_OPERATOR	6116:26	6116:26	9	==
LEAF_NODE	6116:26	6116:26	10	==
FIELD	6116:29	6116:29	9	PHOTOMETRIC_YCBCR
LEAF_NODE	6116:29	6116:29	10	PHOTOMETRIC_YCBCR
LEAF_NODE	6116:46	6116:46	7	)
STATEMENTS	6117:6	6127:1	7	
LEAF_NODE	6117:6	6117:6	8	{
STATEMENTS	6118:6	6120:6	8	
EXPR_STATEMENT	6118:6	6119:52	9	TIFFGetFieldDefaulted ( in , TIFFTAG_YCBCRSUBSAMPLING , & subsampling_horiz , & subsampling_vert ) ;
EXPR	6118:6	6118:6	10	TIFFGetFieldDefaulted ( in , TIFFTAG_YCBCRSUBSAMPLING , & subsampling_horiz , & subsampling_vert )
FUNCTION_CALL	6118:6	6119:51	11	TIFFGetFieldDefaulted ( in , TIFFTAG_YCBCRSUBSAMPLING , & subsampling_horiz , & subsampling_vert )
CALLEE	6118:6	6118:6	12	TIFFGetFieldDefaulted
LEAF_NODE	6118:6	6118:6	13	TIFFGetFieldDefaulted
LEAF_NODE	6118:27	6118:27	12	(
ARGUMENT	6118:28	6118:28	12	in
FIELD	6118:28	6118:28	13	in
LEAF_NODE	6118:28	6118:28	14	in
LEAF_NODE	6118:30	6118:30	12	,
ARGUMENT	6118:32	6118:32	12	TIFFTAG_YCBCRSUBSAMPLING
FIELD	6118:32	6118:32	13	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	6118:32	6118:32	14	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	6118:56	6118:56	12	,
ARGUMENT	6119:14	6119:14	12	& subsampling_horiz
UNARY_EXPR	6119:14	6119:15	13	& subsampling_horiz
UNARY_OPERATOR	6119:14	6119:14	14	&
LEAF_NODE	6119:14	6119:14	15	&
FIELD	6119:15	6119:15	14	subsampling_horiz
LEAF_NODE	6119:15	6119:15	15	subsampling_horiz
LEAF_NODE	6119:32	6119:32	12	,
ARGUMENT	6119:34	6119:34	12	& subsampling_vert
UNARY_EXPR	6119:34	6119:35	13	& subsampling_vert
UNARY_OPERATOR	6119:34	6119:34	14	&
LEAF_NODE	6119:34	6119:34	15	&
FIELD	6119:35	6119:35	14	subsampling_vert
LEAF_NODE	6119:35	6119:35	15	subsampling_vert
LEAF_NODE	6119:51	6119:51	12	)
LEAF_NODE	6119:52	6119:52	10	;
SELECTION	6120:6	6121:8	9	
KEYWORD	6120:6	6120:6	10	if
LEAF_NODE	6120:6	6120:6	11	if
LEAF_NODE	6120:9	6120:9	10	(
CONDITION	6120:10	6120:10	10	subsampling_horiz != 1 || subsampling_vert != 1
EXPR	6120:10	6120:10	11	subsampling_horiz != 1 || subsampling_vert != 1
OR	6120:10	6120:36	12	subsampling_horiz != 1 || subsampling_vert != 1
EXPR	6120:10	6120:31	13	subsampling_horiz != 1
FIELD	6120:10	6120:10	14	subsampling_horiz
LEAF_NODE	6120:10	6120:10	15	subsampling_horiz
EQ_OPERATOR	6120:28	6120:28	14	!=
LEAF_NODE	6120:28	6120:28	15	!=
FIELD	6120:31	6120:31	14	1
LEAF_NODE	6120:31	6120:31	15	1
LEAF_NODE	6120:33	6120:33	13	||
EXPR	6120:36	6120:56	13	subsampling_vert != 1
FIELD	6120:36	6120:36	14	subsampling_vert
LEAF_NODE	6120:36	6120:36	15	subsampling_vert
EQ_OPERATOR	6120:53	6120:53	14	!=
LEAF_NODE	6120:53	6120:53	15	!=
FIELD	6120:56	6120:56	14	1
LEAF_NODE	6120:56	6120:56	15	1
LEAF_NODE	6120:57	6120:57	10	)
STATEMENTS	6121:8	6126:8	10	
LEAF_NODE	6121:8	6121:8	11	{
STATEMENTS	6122:1	6125:8	11	
EXPR_STATEMENT	6122:1	6124:52	12	TIFFError ( "loadImage" , "Can't copy/convert subsampled image with subsampling %d horiz %d vert" , subsampling_horiz , subsampling_vert ) ;
EXPR	6122:1	6122:1	13	TIFFError ( "loadImage" , "Can't copy/convert subsampled image with subsampling %d horiz %d vert" , subsampling_horiz , subsampling_vert )
FUNCTION_CALL	6122:1	6124:51	14	TIFFError ( "loadImage" , "Can't copy/convert subsampled image with subsampling %d horiz %d vert" , subsampling_horiz , subsampling_vert )
CALLEE	6122:1	6122:1	15	TIFFError
LEAF_NODE	6122:1	6122:1	16	TIFFError
LEAF_NODE	6122:10	6122:10	15	(
ARGUMENT	6122:11	6122:11	15	"loadImage"
FIELD	6122:11	6122:11	16	"loadImage"
LEAF_NODE	6122:11	6122:11	17	"loadImage"
LEAF_NODE	6122:22	6122:22	15	,
ARGUMENT	6123:2	6123:2	15	"Can't copy/convert subsampled image with subsampling %d horiz %d vert"
FIELD	6123:2	6123:2	16	"Can't copy/convert subsampled image with subsampling %d horiz %d vert"
LEAF_NODE	6123:2	6123:2	17	"Can't copy/convert subsampled image with subsampling %d horiz %d vert"
LEAF_NODE	6123:73	6123:73	15	,
ARGUMENT	6124:16	6124:16	15	subsampling_horiz
FIELD	6124:16	6124:16	16	subsampling_horiz
LEAF_NODE	6124:16	6124:16	17	subsampling_horiz
LEAF_NODE	6124:33	6124:33	15	,
ARGUMENT	6124:35	6124:35	15	subsampling_vert
FIELD	6124:35	6124:35	16	subsampling_vert
LEAF_NODE	6124:35	6124:35	17	subsampling_vert
LEAF_NODE	6124:51	6124:51	15	)
LEAF_NODE	6124:52	6124:52	13	;
JUMP_STATEMENT	6125:8	6125:19	12	return ( - 1 ) ;
KEYWORD	6125:8	6125:8	13	return
LEAF_NODE	6125:8	6125:8	14	return
DESTINATION	6125:15	6125:15	13	( - 1 )
EXPR	6125:15	6125:18	14	( - 1 )
LEAF_NODE	6125:15	6125:15	15	(
UNARY_EXPR	6125:16	6125:17	15	- 1
UNARY_OPERATOR	6125:16	6125:16	16	-
LEAF_NODE	6125:16	6125:16	17	-
FIELD	6125:17	6125:17	16	1
LEAF_NODE	6125:17	6125:17	17	1
LEAF_NODE	6125:18	6125:18	15	)
LEAF_NODE	6125:19	6125:19	13	;
LEAF_NODE	6126:8	6126:8	11	}
LEAF_NODE	6127:1	6127:1	8	}
LEAF_NODE	6128:4	6128:4	5	}
EXPR_STATEMENT	6130:2	6130:23	3	read_buff = * read_ptr ;
EXPR	6130:2	6130:2	4	read_buff = * read_ptr
ASSIGN	6130:2	6130:14	5	read_buff = * read_ptr
LVAL	6130:2	6130:2	6	read_buff
FIELD	6130:2	6130:2	7	read_buff
LEAF_NODE	6130:2	6130:2	8	read_buff
ASSIGN_OP	6130:12	6130:12	6	=
LEAF_NODE	6130:12	6130:12	7	=
RVAL	6130:14	6130:14	6	* read_ptr
UNARY_EXPR	6130:14	6130:15	7	* read_ptr
UNARY_OPERATOR	6130:14	6130:14	8	*
LEAF_NODE	6130:14	6130:14	9	*
FIELD	6130:15	6130:15	8	read_ptr
LEAF_NODE	6130:15	6130:15	9	read_ptr
LEAF_NODE	6130:23	6130:23	4	;
SELECTION	6133:2	6134:2	3	
KEYWORD	6133:2	6133:2	4	if
LEAF_NODE	6133:2	6133:2	5	if
LEAF_NODE	6133:5	6133:5	4	(
CONDITION	6133:6	6133:6	4	! read_buff
EXPR	6133:6	6133:6	5	! read_buff
UNARY_EXPR	6133:6	6133:7	6	! read_buff
UNARY_OPERATOR	6133:6	6133:6	7	!
LEAF_NODE	6133:6	6133:6	8	!
FIELD	6133:7	6133:7	7	read_buff
LEAF_NODE	6133:7	6133:7	8	read_buff
LEAF_NODE	6133:16	6133:16	4	)
STATEMENTS	6134:2	6141:2	4	
LEAF_NODE	6134:2	6134:2	5	{
STATEMENTS	6135:4	6140:4	5	
SELECTION	6135:4	6136:4	6	
KEYWORD	6135:4	6135:4	7	if
LEAF_NODE	6135:4	6135:4	8	if
LEAF_NODE	6135:6	6135:6	7	(
CONDITION	6135:8	6135:8	7	buffsize > 0xFFFFFFFFU - 3
EXPR	6135:8	6135:33	8	buffsize > 0xFFFFFFFFU - 3
FIELD	6135:8	6135:8	9	buffsize
LEAF_NODE	6135:8	6135:8	10	buffsize
REL_OPERATOR	6135:17	6135:17	9	>
LEAF_NODE	6135:17	6135:17	10	>
FIELD	6135:19	6135:19	9	0xFFFFFFFFU
LEAF_NODE	6135:19	6135:19	10	0xFFFFFFFFU
LEAF_NODE	6135:31	6135:31	9	-
FIELD	6135:33	6135:33	9	3
LEAF_NODE	6135:33	6135:33	10	3
LEAF_NODE	6135:35	6135:35	7	)
STATEMENTS	6136:4	6139:4	7	
LEAF_NODE	6136:4	6136:4	8	{
STATEMENTS	6137:8	6138:8	8	
EXPR_STATEMENT	6137:8	6137:75	9	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" ) ;
EXPR	6137:8	6137:8	10	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" )
FUNCTION_CALL	6137:8	6137:74	11	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" )
CALLEE	6137:8	6137:8	12	TIFFError
LEAF_NODE	6137:8	6137:8	13	TIFFError
LEAF_NODE	6137:17	6137:17	12	(
ARGUMENT	6137:18	6137:18	12	"loadImage"
FIELD	6137:18	6137:18	13	"loadImage"
LEAF_NODE	6137:18	6137:18	14	"loadImage"
LEAF_NODE	6137:29	6137:29	12	,
ARGUMENT	6137:31	6137:31	12	"Unable to allocate/reallocate read buffer"
FIELD	6137:31	6137:31	13	"Unable to allocate/reallocate read buffer"
LEAF_NODE	6137:31	6137:31	14	"Unable to allocate/reallocate read buffer"
LEAF_NODE	6137:74	6137:74	12	)
LEAF_NODE	6137:75	6137:75	10	;
JUMP_STATEMENT	6138:8	6138:19	9	return ( - 1 ) ;
KEYWORD	6138:8	6138:8	10	return
LEAF_NODE	6138:8	6138:8	11	return
DESTINATION	6138:15	6138:15	10	( - 1 )
EXPR	6138:15	6138:18	11	( - 1 )
LEAF_NODE	6138:15	6138:15	12	(
UNARY_EXPR	6138:16	6138:17	12	- 1
UNARY_OPERATOR	6138:16	6138:16	13	-
LEAF_NODE	6138:16	6138:16	14	-
FIELD	6138:17	6138:17	13	1
LEAF_NODE	6138:17	6138:17	14	1
LEAF_NODE	6138:18	6138:18	12	)
LEAF_NODE	6138:19	6138:19	10	;
LEAF_NODE	6139:4	6139:4	8	}
EXPR_STATEMENT	6140:4	6140:56	6	read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 ) ;
EXPR	6140:4	6140:4	7	read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 )
ASSIGN	6140:4	6140:16	8	read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 )
LVAL	6140:4	6140:4	9	read_buff
FIELD	6140:4	6140:4	10	read_buff
LEAF_NODE	6140:4	6140:4	11	read_buff
ASSIGN_OP	6140:14	6140:14	9	=
LEAF_NODE	6140:14	6140:14	10	=
RVAL	6140:16	6140:33	9	( unsigned char * ) _TIFFmalloc ( buffsize + 3 )
LEAF_NODE	6140:16	6140:16	10	(
TYPE_NAME	6140:17	6140:26	10	unsigned char
LEAF_NODE	6140:17	6140:17	11	unsigned
LEAF_NODE	6140:26	6140:26	11	char
LEAF_NODE	6140:31	6140:31	10	*
LEAF_NODE	6140:32	6140:32	10	)
FUNCTION_CALL	6140:33	6140:55	10	_TIFFmalloc ( buffsize + 3 )
CALLEE	6140:33	6140:33	11	_TIFFmalloc
LEAF_NODE	6140:33	6140:33	12	_TIFFmalloc
LEAF_NODE	6140:44	6140:44	11	(
ARGUMENT	6140:45	6140:54	11	buffsize + 3
FIELD	6140:45	6140:45	12	buffsize
LEAF_NODE	6140:45	6140:45	13	buffsize
LEAF_NODE	6140:53	6140:53	12	+
FIELD	6140:54	6140:54	12	3
LEAF_NODE	6140:54	6140:54	13	3
LEAF_NODE	6140:55	6140:55	11	)
LEAF_NODE	6140:56	6140:56	7	;
LEAF_NODE	6141:2	6141:2	5	}
SELECTION	6142:2	6143:4	3	
KEYWORD	6142:2	6142:2	4	else
LEAF_NODE	6142:2	6142:2	5	else
STATEMENTS	6143:4	6160:4	4	
LEAF_NODE	6143:4	6143:4	5	{
STATEMENTS	6144:4	6144:4	5	
SELECTION	6144:4	6145:4	6	
KEYWORD	6144:4	6144:4	7	if
LEAF_NODE	6144:4	6144:4	8	if
LEAF_NODE	6144:7	6144:7	7	(
CONDITION	6144:8	6144:8	7	prev_readsize < buffsize
EXPR	6144:8	6144:24	8	prev_readsize < buffsize
FIELD	6144:8	6144:8	9	prev_readsize
LEAF_NODE	6144:8	6144:8	10	prev_readsize
REL_OPERATOR	6144:22	6144:22	9	<
LEAF_NODE	6144:22	6144:22	10	<
FIELD	6144:24	6144:24	9	buffsize
LEAF_NODE	6144:24	6144:24	10	buffsize
LEAF_NODE	6144:32	6144:32	7	)
STATEMENTS	6145:4	6159:6	7	
LEAF_NODE	6145:4	6145:4	8	{
STATEMENTS	6146:6	6157:6	8	
SELECTION	6146:6	6147:6	9	
KEYWORD	6146:6	6146:6	10	if
LEAF_NODE	6146:6	6146:6	11	if
LEAF_NODE	6146:8	6146:8	10	(
CONDITION	6146:10	6146:10	10	buffsize > 0xFFFFFFFFU - 3
EXPR	6146:10	6146:35	11	buffsize > 0xFFFFFFFFU - 3
FIELD	6146:10	6146:10	12	buffsize
LEAF_NODE	6146:10	6146:10	13	buffsize
REL_OPERATOR	6146:19	6146:19	12	>
LEAF_NODE	6146:19	6146:19	13	>
FIELD	6146:21	6146:21	12	0xFFFFFFFFU
LEAF_NODE	6146:21	6146:21	13	0xFFFFFFFFU
LEAF_NODE	6146:33	6146:33	12	-
FIELD	6146:35	6146:35	12	3
LEAF_NODE	6146:35	6146:35	13	3
LEAF_NODE	6146:37	6146:37	10	)
STATEMENTS	6147:6	6150:6	10	
LEAF_NODE	6147:6	6147:6	11	{
STATEMENTS	6148:10	6149:10	11	
EXPR_STATEMENT	6148:10	6148:77	12	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" ) ;
EXPR	6148:10	6148:10	13	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" )
FUNCTION_CALL	6148:10	6148:76	14	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" )
CALLEE	6148:10	6148:10	15	TIFFError
LEAF_NODE	6148:10	6148:10	16	TIFFError
LEAF_NODE	6148:19	6148:19	15	(
ARGUMENT	6148:20	6148:20	15	"loadImage"
FIELD	6148:20	6148:20	16	"loadImage"
LEAF_NODE	6148:20	6148:20	17	"loadImage"
LEAF_NODE	6148:31	6148:31	15	,
ARGUMENT	6148:33	6148:33	15	"Unable to allocate/reallocate read buffer"
FIELD	6148:33	6148:33	16	"Unable to allocate/reallocate read buffer"
LEAF_NODE	6148:33	6148:33	17	"Unable to allocate/reallocate read buffer"
LEAF_NODE	6148:76	6148:76	15	)
LEAF_NODE	6148:77	6148:77	13	;
JUMP_STATEMENT	6149:10	6149:21	12	return ( - 1 ) ;
KEYWORD	6149:10	6149:10	13	return
LEAF_NODE	6149:10	6149:10	14	return
DESTINATION	6149:17	6149:17	13	( - 1 )
EXPR	6149:17	6149:20	14	( - 1 )
LEAF_NODE	6149:17	6149:17	15	(
UNARY_EXPR	6149:18	6149:19	15	- 1
UNARY_OPERATOR	6149:18	6149:18	16	-
LEAF_NODE	6149:18	6149:18	17	-
FIELD	6149:19	6149:19	16	1
LEAF_NODE	6149:19	6149:19	17	1
LEAF_NODE	6149:20	6149:20	15	)
LEAF_NODE	6149:21	6149:21	13	;
LEAF_NODE	6150:6	6150:6	11	}
EXPR_STATEMENT	6151:6	6151:52	9	new_buff = _TIFFrealloc ( read_buff , buffsize + 3 ) ;
EXPR	6151:6	6151:6	10	new_buff = _TIFFrealloc ( read_buff , buffsize + 3 )
ASSIGN	6151:6	6151:17	11	new_buff = _TIFFrealloc ( read_buff , buffsize + 3 )
LVAL	6151:6	6151:6	12	new_buff
FIELD	6151:6	6151:6	13	new_buff
LEAF_NODE	6151:6	6151:6	14	new_buff
ASSIGN_OP	6151:15	6151:15	12	=
LEAF_NODE	6151:15	6151:15	13	=
RVAL	6151:17	6151:17	12	_TIFFrealloc ( read_buff , buffsize + 3 )
FUNCTION_CALL	6151:17	6151:51	13	_TIFFrealloc ( read_buff , buffsize + 3 )
CALLEE	6151:17	6151:17	14	_TIFFrealloc
LEAF_NODE	6151:17	6151:17	15	_TIFFrealloc
LEAF_NODE	6151:29	6151:29	14	(
ARGUMENT	6151:30	6151:30	14	read_buff
FIELD	6151:30	6151:30	15	read_buff
LEAF_NODE	6151:30	6151:30	16	read_buff
LEAF_NODE	6151:39	6151:39	14	,
ARGUMENT	6151:41	6151:50	14	buffsize + 3
FIELD	6151:41	6151:41	15	buffsize
LEAF_NODE	6151:41	6151:41	16	buffsize
LEAF_NODE	6151:49	6151:49	15	+
FIELD	6151:50	6151:50	15	3
LEAF_NODE	6151:50	6151:50	16	3
LEAF_NODE	6151:51	6151:51	14	)
LEAF_NODE	6151:52	6151:52	10	;
SELECTION	6152:6	6153:8	9	
KEYWORD	6152:6	6152:6	10	if
LEAF_NODE	6152:6	6152:6	11	if
LEAF_NODE	6152:9	6152:9	10	(
CONDITION	6152:10	6152:10	10	! new_buff
EXPR	6152:10	6152:10	11	! new_buff
UNARY_EXPR	6152:10	6152:11	12	! new_buff
UNARY_OPERATOR	6152:10	6152:10	13	!
LEAF_NODE	6152:10	6152:10	14	!
FIELD	6152:11	6152:11	13	new_buff
LEAF_NODE	6152:11	6152:11	14	new_buff
LEAF_NODE	6152:19	6152:19	10	)
STATEMENTS	6153:8	6156:8	10	
LEAF_NODE	6153:8	6153:8	11	{
STATEMENTS	6154:1	6155:8	11	
EXPR_STATEMENT	6154:1	6154:17	12	free ( read_buff ) ;
EXPR	6154:1	6154:1	13	free ( read_buff )
FUNCTION_CALL	6154:1	6154:16	14	free ( read_buff )
CALLEE	6154:1	6154:1	15	free
LEAF_NODE	6154:1	6154:1	16	free
LEAF_NODE	6154:6	6154:6	15	(
ARGUMENT	6154:7	6154:7	15	read_buff
FIELD	6154:7	6154:7	16	read_buff
LEAF_NODE	6154:7	6154:7	17	read_buff
LEAF_NODE	6154:16	6154:16	15	)
LEAF_NODE	6154:17	6154:17	13	;
EXPR_STATEMENT	6155:8	6155:60	12	read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 ) ;
EXPR	6155:8	6155:8	13	read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 )
ASSIGN	6155:8	6155:20	14	read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 )
LVAL	6155:8	6155:8	15	read_buff
FIELD	6155:8	6155:8	16	read_buff
LEAF_NODE	6155:8	6155:8	17	read_buff
ASSIGN_OP	6155:18	6155:18	15	=
LEAF_NODE	6155:18	6155:18	16	=
RVAL	6155:20	6155:37	15	( unsigned char * ) _TIFFmalloc ( buffsize + 3 )
LEAF_NODE	6155:20	6155:20	16	(
TYPE_NAME	6155:21	6155:30	16	unsigned char
LEAF_NODE	6155:21	6155:21	17	unsigned
LEAF_NODE	6155:30	6155:30	17	char
LEAF_NODE	6155:35	6155:35	16	*
LEAF_NODE	6155:36	6155:36	16	)
FUNCTION_CALL	6155:37	6155:59	16	_TIFFmalloc ( buffsize + 3 )
CALLEE	6155:37	6155:37	17	_TIFFmalloc
LEAF_NODE	6155:37	6155:37	18	_TIFFmalloc
LEAF_NODE	6155:48	6155:48	17	(
ARGUMENT	6155:49	6155:58	17	buffsize + 3
FIELD	6155:49	6155:49	18	buffsize
LEAF_NODE	6155:49	6155:49	19	buffsize
LEAF_NODE	6155:57	6155:57	18	+
FIELD	6155:58	6155:58	18	3
LEAF_NODE	6155:58	6155:58	19	3
LEAF_NODE	6155:59	6155:59	17	)
LEAF_NODE	6155:60	6155:60	13	;
LEAF_NODE	6156:8	6156:8	11	}
SELECTION	6157:6	6158:8	9	
KEYWORD	6157:6	6157:6	10	else
LEAF_NODE	6157:6	6157:6	11	else
STATEMENTS	6158:8	6158:8	10	
EXPR_STATEMENT	6158:8	6158:28	11	read_buff = new_buff ;
EXPR	6158:8	6158:8	12	read_buff = new_buff
ASSIGN	6158:8	6158:20	13	read_buff = new_buff
LVAL	6158:8	6158:8	14	read_buff
FIELD	6158:8	6158:8	15	read_buff
LEAF_NODE	6158:8	6158:8	16	read_buff
ASSIGN_OP	6158:18	6158:18	14	=
LEAF_NODE	6158:18	6158:18	15	=
RVAL	6158:20	6158:20	14	new_buff
FIELD	6158:20	6158:20	15	new_buff
LEAF_NODE	6158:20	6158:20	16	new_buff
LEAF_NODE	6158:28	6158:28	12	;
LEAF_NODE	6159:6	6159:6	8	}
LEAF_NODE	6160:4	6160:4	5	}
SELECTION	6161:2	6162:4	3	
KEYWORD	6161:2	6161:2	4	if
LEAF_NODE	6161:2	6161:2	5	if
LEAF_NODE	6161:5	6161:5	4	(
CONDITION	6161:6	6161:6	4	! read_buff
EXPR	6161:6	6161:6	5	! read_buff
UNARY_EXPR	6161:6	6161:7	6	! read_buff
UNARY_OPERATOR	6161:6	6161:6	7	!
LEAF_NODE	6161:6	6161:6	8	!
FIELD	6161:7	6161:7	7	read_buff
LEAF_NODE	6161:7	6161:7	8	read_buff
LEAF_NODE	6161:16	6161:16	4	)
STATEMENTS	6162:4	6165:4	4	
LEAF_NODE	6162:4	6162:4	5	{
STATEMENTS	6163:4	6164:4	5	
EXPR_STATEMENT	6163:4	6163:71	6	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" ) ;
EXPR	6163:4	6163:4	7	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" )
FUNCTION_CALL	6163:4	6163:70	8	TIFFError ( "loadImage" , "Unable to allocate/reallocate read buffer" )
CALLEE	6163:4	6163:4	9	TIFFError
LEAF_NODE	6163:4	6163:4	10	TIFFError
LEAF_NODE	6163:13	6163:13	9	(
ARGUMENT	6163:14	6163:14	9	"loadImage"
FIELD	6163:14	6163:14	10	"loadImage"
LEAF_NODE	6163:14	6163:14	11	"loadImage"
LEAF_NODE	6163:25	6163:25	9	,
ARGUMENT	6163:27	6163:27	9	"Unable to allocate/reallocate read buffer"
FIELD	6163:27	6163:27	10	"Unable to allocate/reallocate read buffer"
LEAF_NODE	6163:27	6163:27	11	"Unable to allocate/reallocate read buffer"
LEAF_NODE	6163:70	6163:70	9	)
LEAF_NODE	6163:71	6163:71	7	;
JUMP_STATEMENT	6164:4	6164:15	6	return ( - 1 ) ;
KEYWORD	6164:4	6164:4	7	return
LEAF_NODE	6164:4	6164:4	8	return
DESTINATION	6164:11	6164:11	7	( - 1 )
EXPR	6164:11	6164:14	8	( - 1 )
LEAF_NODE	6164:11	6164:11	9	(
UNARY_EXPR	6164:12	6164:13	9	- 1
UNARY_OPERATOR	6164:12	6164:12	10	-
LEAF_NODE	6164:12	6164:12	11	-
FIELD	6164:13	6164:13	10	1
LEAF_NODE	6164:13	6164:13	11	1
LEAF_NODE	6164:14	6164:14	9	)
LEAF_NODE	6164:15	6164:15	7	;
LEAF_NODE	6165:4	6165:4	5	}
EXPR_STATEMENT	6167:2	6167:25	3	read_buff [ buffsize ] = 0 ;
EXPR	6167:2	6167:2	4	read_buff [ buffsize ] = 0
ASSIGN	6167:2	6167:24	5	read_buff [ buffsize ] = 0
LVAL	6167:2	6167:2	6	read_buff [ buffsize ]
FIELD	6167:2	6167:20	7	read_buff [ buffsize ]
LEAF_NODE	6167:2	6167:2	8	read_buff
LEAF_NODE	6167:11	6167:11	8	[
EXPR	6167:12	6167:12	8	buffsize
FIELD	6167:12	6167:12	9	buffsize
LEAF_NODE	6167:12	6167:12	10	buffsize
LEAF_NODE	6167:20	6167:20	8	]
ASSIGN_OP	6167:22	6167:22	6	=
LEAF_NODE	6167:22	6167:22	7	=
RVAL	6167:24	6167:24	6	0
FIELD	6167:24	6167:24	7	0
LEAF_NODE	6167:24	6167:24	8	0
LEAF_NODE	6167:25	6167:25	4	;
EXPR_STATEMENT	6168:2	6168:27	3	read_buff [ buffsize + 1 ] = 0 ;
EXPR	6168:2	6168:2	4	read_buff [ buffsize + 1 ] = 0
ASSIGN	6168:2	6168:26	5	read_buff [ buffsize + 1 ] = 0
LVAL	6168:2	6168:2	6	read_buff [ buffsize + 1 ]
FIELD	6168:2	6168:22	7	read_buff [ buffsize + 1 ]
LEAF_NODE	6168:2	6168:2	8	read_buff
LEAF_NODE	6168:11	6168:11	8	[
EXPR	6168:12	6168:21	8	buffsize + 1
FIELD	6168:12	6168:12	9	buffsize
LEAF_NODE	6168:12	6168:12	10	buffsize
LEAF_NODE	6168:20	6168:20	9	+
FIELD	6168:21	6168:21	9	1
LEAF_NODE	6168:21	6168:21	10	1
LEAF_NODE	6168:22	6168:22	8	]
ASSIGN_OP	6168:24	6168:24	6	=
LEAF_NODE	6168:24	6168:24	7	=
RVAL	6168:26	6168:26	6	0
FIELD	6168:26	6168:26	7	0
LEAF_NODE	6168:26	6168:26	8	0
LEAF_NODE	6168:27	6168:27	4	;
EXPR_STATEMENT	6169:2	6169:27	3	read_buff [ buffsize + 2 ] = 0 ;
EXPR	6169:2	6169:2	4	read_buff [ buffsize + 2 ] = 0
ASSIGN	6169:2	6169:26	5	read_buff [ buffsize + 2 ] = 0
LVAL	6169:2	6169:2	6	read_buff [ buffsize + 2 ]
FIELD	6169:2	6169:22	7	read_buff [ buffsize + 2 ]
LEAF_NODE	6169:2	6169:2	8	read_buff
LEAF_NODE	6169:11	6169:11	8	[
EXPR	6169:12	6169:21	8	buffsize + 2
FIELD	6169:12	6169:12	9	buffsize
LEAF_NODE	6169:12	6169:12	10	buffsize
LEAF_NODE	6169:20	6169:20	9	+
FIELD	6169:21	6169:21	9	2
LEAF_NODE	6169:21	6169:21	10	2
LEAF_NODE	6169:22	6169:22	8	]
ASSIGN_OP	6169:24	6169:24	6	=
LEAF_NODE	6169:24	6169:24	7	=
RVAL	6169:26	6169:26	6	0
FIELD	6169:26	6169:26	7	0
LEAF_NODE	6169:26	6169:26	8	0
LEAF_NODE	6169:27	6169:27	4	;
EXPR_STATEMENT	6171:2	6171:26	3	prev_readsize = buffsize ;
EXPR	6171:2	6171:2	4	prev_readsize = buffsize
ASSIGN	6171:2	6171:18	5	prev_readsize = buffsize
LVAL	6171:2	6171:2	6	prev_readsize
FIELD	6171:2	6171:2	7	prev_readsize
LEAF_NODE	6171:2	6171:2	8	prev_readsize
ASSIGN_OP	6171:16	6171:16	6	=
LEAF_NODE	6171:16	6171:16	7	=
RVAL	6171:18	6171:18	6	buffsize
FIELD	6171:18	6171:18	7	buffsize
LEAF_NODE	6171:18	6171:18	8	buffsize
LEAF_NODE	6171:26	6171:26	4	;
EXPR_STATEMENT	6172:2	6172:23	3	* read_ptr = read_buff ;
EXPR	6172:2	6172:2	4	* read_ptr = read_buff
ASSIGN	6172:2	6172:14	5	* read_ptr = read_buff
LVAL	6172:2	6172:2	6	* read_ptr
UNARY_EXPR	6172:2	6172:3	7	* read_ptr
UNARY_OPERATOR	6172:2	6172:2	8	*
LEAF_NODE	6172:2	6172:2	9	*
FIELD	6172:3	6172:3	8	read_ptr
LEAF_NODE	6172:3	6172:3	9	read_ptr
ASSIGN_OP	6172:12	6172:12	6	=
LEAF_NODE	6172:12	6172:12	7	=
RVAL	6172:14	6172:14	6	read_buff
FIELD	6172:14	6172:14	7	read_buff
LEAF_NODE	6172:14	6172:14	8	read_buff
LEAF_NODE	6172:23	6172:23	4	;
SELECTION	6178:2	6178:20	3	
KEYWORD	6178:2	6178:2	4	switch
LEAF_NODE	6178:2	6178:2	5	switch
LEAF_NODE	6178:9	6178:9	4	(
CONDITION	6178:10	6178:10	4	readunit
EXPR	6178:10	6178:10	5	readunit
FIELD	6178:10	6178:10	6	readunit
LEAF_NODE	6178:10	6178:10	7	readunit
LEAF_NODE	6178:18	6178:18	4	)
STATEMENTS	6178:20	6219:4	4	
LEAF_NODE	6178:20	6178:20	5	{
STATEMENTS	6179:4	6218:10	5	
LABEL	6179:4	6179:14	6	case STRIP :
LEAF_NODE	6179:4	6179:4	7	case
LEAF_NODE	6179:9	6179:9	7	STRIP
LEAF_NODE	6179:14	6179:14	7	:
SELECTION	6180:9	6181:11	6	
KEYWORD	6180:9	6180:9	7	if
LEAF_NODE	6180:9	6180:9	8	if
LEAF_NODE	6180:12	6180:12	7	(
CONDITION	6180:13	6180:13	7	planar == PLANARCONFIG_CONTIG
EXPR	6180:13	6180:23	8	planar == PLANARCONFIG_CONTIG
FIELD	6180:13	6180:13	9	planar
LEAF_NODE	6180:13	6180:13	10	planar
EQ_OPERATOR	6180:20	6180:20	9	==
LEAF_NODE	6180:20	6180:20	10	==
FIELD	6180:23	6180:23	9	PLANARCONFIG_CONTIG
LEAF_NODE	6180:23	6180:23	10	PLANARCONFIG_CONTIG
LEAF_NODE	6180:42	6180:42	7	)
STATEMENTS	6181:11	6187:11	7	
LEAF_NODE	6181:11	6181:11	8	{
STATEMENTS	6182:6	6182:6	8	
SELECTION	6182:6	6183:6	9	
KEYWORD	6182:6	6182:6	10	if
LEAF_NODE	6182:6	6182:6	11	if
LEAF_NODE	6182:9	6182:9	10	(
CONDITION	6182:10	6182:10	10	! ( readContigStripsIntoBuffer ( in , read_buff ) )
EXPR	6182:10	6182:10	11	! ( readContigStripsIntoBuffer ( in , read_buff ) )
UNARY_EXPR	6182:10	6182:53	12	! ( readContigStripsIntoBuffer ( in , read_buff ) )
UNARY_OPERATOR	6182:10	6182:10	13	!
LEAF_NODE	6182:10	6182:10	14	!
LEAF_NODE	6182:11	6182:11	13	(
FUNCTION_CALL	6182:12	6182:52	13	readContigStripsIntoBuffer ( in , read_buff )
CALLEE	6182:12	6182:12	14	readContigStripsIntoBuffer
LEAF_NODE	6182:12	6182:12	15	readContigStripsIntoBuffer
LEAF_NODE	6182:38	6182:38	14	(
ARGUMENT	6182:39	6182:39	14	in
FIELD	6182:39	6182:39	15	in
LEAF_NODE	6182:39	6182:39	16	in
LEAF_NODE	6182:41	6182:41	14	,
ARGUMENT	6182:43	6182:43	14	read_buff
FIELD	6182:43	6182:43	15	read_buff
LEAF_NODE	6182:43	6182:43	16	read_buff
LEAF_NODE	6182:52	6182:52	14	)
LEAF_NODE	6182:53	6182:53	13	)
LEAF_NODE	6182:54	6182:54	10	)
STATEMENTS	6183:6	6186:13	10	
LEAF_NODE	6183:6	6183:6	11	{
STATEMENTS	6184:6	6185:6	11	
EXPR_STATEMENT	6184:6	6184:76	12	TIFFError ( "loadImage" , "Unable to read contiguous strips into buffer" ) ;
EXPR	6184:6	6184:6	13	TIFFError ( "loadImage" , "Unable to read contiguous strips into buffer" )
FUNCTION_CALL	6184:6	6184:75	14	TIFFError ( "loadImage" , "Unable to read contiguous strips into buffer" )
CALLEE	6184:6	6184:6	15	TIFFError
LEAF_NODE	6184:6	6184:6	16	TIFFError
LEAF_NODE	6184:15	6184:15	15	(
ARGUMENT	6184:16	6184:16	15	"loadImage"
FIELD	6184:16	6184:16	16	"loadImage"
LEAF_NODE	6184:16	6184:16	17	"loadImage"
LEAF_NODE	6184:27	6184:27	15	,
ARGUMENT	6184:29	6184:29	15	"Unable to read contiguous strips into buffer"
FIELD	6184:29	6184:29	16	"Unable to read contiguous strips into buffer"
LEAF_NODE	6184:29	6184:29	17	"Unable to read contiguous strips into buffer"
LEAF_NODE	6184:75	6184:75	15	)
LEAF_NODE	6184:76	6184:76	13	;
JUMP_STATEMENT	6185:6	6185:17	12	return ( - 1 ) ;
KEYWORD	6185:6	6185:6	13	return
LEAF_NODE	6185:6	6185:6	14	return
DESTINATION	6185:13	6185:13	13	( - 1 )
EXPR	6185:13	6185:16	14	( - 1 )
LEAF_NODE	6185:13	6185:13	15	(
UNARY_EXPR	6185:14	6185:15	15	- 1
UNARY_OPERATOR	6185:14	6185:14	16	-
LEAF_NODE	6185:14	6185:14	17	-
FIELD	6185:15	6185:15	16	1
LEAF_NODE	6185:15	6185:15	17	1
LEAF_NODE	6185:16	6185:16	15	)
LEAF_NODE	6185:17	6185:17	13	;
LEAF_NODE	6186:13	6186:13	11	}
LEAF_NODE	6187:11	6187:11	8	}
SELECTION	6188:9	6189:11	6	
KEYWORD	6188:9	6188:9	7	else
LEAF_NODE	6188:9	6188:9	8	else
STATEMENTS	6189:11	6195:11	7	
LEAF_NODE	6189:11	6189:11	8	{
STATEMENTS	6190:4	6190:4	8	
SELECTION	6190:4	6191:6	9	
KEYWORD	6190:4	6190:4	10	if
LEAF_NODE	6190:4	6190:4	11	if
LEAF_NODE	6190:7	6190:7	10	(
CONDITION	6190:8	6190:8	10	! ( readSeparateStripsIntoBuffer ( in , read_buff , length , width , spp , dump ) )
EXPR	6190:8	6190:8	11	! ( readSeparateStripsIntoBuffer ( in , read_buff , length , width , spp , dump ) )
UNARY_EXPR	6190:8	6190:79	12	! ( readSeparateStripsIntoBuffer ( in , read_buff , length , width , spp , dump ) )
UNARY_OPERATOR	6190:8	6190:8	13	!
LEAF_NODE	6190:8	6190:8	14	!
LEAF_NODE	6190:9	6190:9	13	(
FUNCTION_CALL	6190:10	6190:78	13	readSeparateStripsIntoBuffer ( in , read_buff , length , width , spp , dump )
CALLEE	6190:10	6190:10	14	readSeparateStripsIntoBuffer
LEAF_NODE	6190:10	6190:10	15	readSeparateStripsIntoBuffer
LEAF_NODE	6190:38	6190:38	14	(
ARGUMENT	6190:39	6190:39	14	in
FIELD	6190:39	6190:39	15	in
LEAF_NODE	6190:39	6190:39	16	in
LEAF_NODE	6190:41	6190:41	14	,
ARGUMENT	6190:43	6190:43	14	read_buff
FIELD	6190:43	6190:43	15	read_buff
LEAF_NODE	6190:43	6190:43	16	read_buff
LEAF_NODE	6190:52	6190:52	14	,
ARGUMENT	6190:54	6190:54	14	length
FIELD	6190:54	6190:54	15	length
LEAF_NODE	6190:54	6190:54	16	length
LEAF_NODE	6190:60	6190:60	14	,
ARGUMENT	6190:62	6190:62	14	width
FIELD	6190:62	6190:62	15	width
LEAF_NODE	6190:62	6190:62	16	width
LEAF_NODE	6190:67	6190:67	14	,
ARGUMENT	6190:69	6190:69	14	spp
FIELD	6190:69	6190:69	15	spp
LEAF_NODE	6190:69	6190:69	16	spp
LEAF_NODE	6190:72	6190:72	14	,
ARGUMENT	6190:74	6190:74	14	dump
FIELD	6190:74	6190:74	15	dump
LEAF_NODE	6190:74	6190:74	16	dump
LEAF_NODE	6190:78	6190:78	14	)
LEAF_NODE	6190:79	6190:79	13	)
LEAF_NODE	6190:80	6190:80	10	)
STATEMENTS	6191:6	6194:13	10	
LEAF_NODE	6191:6	6191:6	11	{
STATEMENTS	6192:6	6193:6	11	
EXPR_STATEMENT	6192:6	6192:74	12	TIFFError ( "loadImage" , "Unable to read separate strips into buffer" ) ;
EXPR	6192:6	6192:6	13	TIFFError ( "loadImage" , "Unable to read separate strips into buffer" )
FUNCTION_CALL	6192:6	6192:73	14	TIFFError ( "loadImage" , "Unable to read separate strips into buffer" )
CALLEE	6192:6	6192:6	15	TIFFError
LEAF_NODE	6192:6	6192:6	16	TIFFError
LEAF_NODE	6192:15	6192:15	15	(
ARGUMENT	6192:16	6192:16	15	"loadImage"
FIELD	6192:16	6192:16	16	"loadImage"
LEAF_NODE	6192:16	6192:16	17	"loadImage"
LEAF_NODE	6192:27	6192:27	15	,
ARGUMENT	6192:29	6192:29	15	"Unable to read separate strips into buffer"
FIELD	6192:29	6192:29	16	"Unable to read separate strips into buffer"
LEAF_NODE	6192:29	6192:29	17	"Unable to read separate strips into buffer"
LEAF_NODE	6192:73	6192:73	15	)
LEAF_NODE	6192:74	6192:74	13	;
JUMP_STATEMENT	6193:6	6193:17	12	return ( - 1 ) ;
KEYWORD	6193:6	6193:6	13	return
LEAF_NODE	6193:6	6193:6	14	return
DESTINATION	6193:13	6193:13	13	( - 1 )
EXPR	6193:13	6193:16	14	( - 1 )
LEAF_NODE	6193:13	6193:13	15	(
UNARY_EXPR	6193:14	6193:15	15	- 1
UNARY_OPERATOR	6193:14	6193:14	16	-
LEAF_NODE	6193:14	6193:14	17	-
FIELD	6193:15	6193:15	16	1
LEAF_NODE	6193:15	6193:15	17	1
LEAF_NODE	6193:16	6193:16	15	)
LEAF_NODE	6193:17	6193:17	13	;
LEAF_NODE	6194:13	6194:13	11	}
LEAF_NODE	6195:11	6195:11	8	}
JUMP_STATEMENT	6196:9	6196:14	6	break DESTINATION ;
KEYWORD	6196:9	6196:9	7	break
LEAF_NODE	6196:9	6196:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6196:14	6196:14	7	;
LABEL	6198:4	6198:13	6	case TILE :
LEAF_NODE	6198:4	6198:4	7	case
LEAF_NODE	6198:9	6198:9	7	TILE
LEAF_NODE	6198:13	6198:13	7	:
SELECTION	6199:9	6200:11	6	
KEYWORD	6199:9	6199:9	7	if
LEAF_NODE	6199:9	6199:9	8	if
LEAF_NODE	6199:12	6199:12	7	(
CONDITION	6199:13	6199:13	7	planar == PLANARCONFIG_CONTIG
EXPR	6199:13	6199:23	8	planar == PLANARCONFIG_CONTIG
FIELD	6199:13	6199:13	9	planar
LEAF_NODE	6199:13	6199:13	10	planar
EQ_OPERATOR	6199:20	6199:20	9	==
LEAF_NODE	6199:20	6199:20	10	==
FIELD	6199:23	6199:23	9	PLANARCONFIG_CONTIG
LEAF_NODE	6199:23	6199:23	10	PLANARCONFIG_CONTIG
LEAF_NODE	6199:42	6199:42	7	)
STATEMENTS	6200:11	6206:11	7	
LEAF_NODE	6200:11	6200:11	8	{
STATEMENTS	6201:4	6201:4	8	
SELECTION	6201:4	6202:6	9	
KEYWORD	6201:4	6201:4	10	if
LEAF_NODE	6201:4	6201:4	11	if
LEAF_NODE	6201:7	6201:7	10	(
CONDITION	6201:8	6201:8	10	! ( readContigTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps ) )
EXPR	6201:8	6201:8	11	! ( readContigTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps ) )
UNARY_EXPR	6201:8	6201:83	12	! ( readContigTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps ) )
UNARY_OPERATOR	6201:8	6201:8	13	!
LEAF_NODE	6201:8	6201:8	14	!
LEAF_NODE	6201:9	6201:9	13	(
FUNCTION_CALL	6201:10	6201:82	13	readContigTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps )
CALLEE	6201:10	6201:10	14	readContigTilesIntoBuffer
LEAF_NODE	6201:10	6201:10	15	readContigTilesIntoBuffer
LEAF_NODE	6201:35	6201:35	14	(
ARGUMENT	6201:36	6201:36	14	in
FIELD	6201:36	6201:36	15	in
LEAF_NODE	6201:36	6201:36	16	in
LEAF_NODE	6201:38	6201:38	14	,
ARGUMENT	6201:40	6201:40	14	read_buff
FIELD	6201:40	6201:40	15	read_buff
LEAF_NODE	6201:40	6201:40	16	read_buff
LEAF_NODE	6201:49	6201:49	14	,
ARGUMENT	6201:51	6201:51	14	length
FIELD	6201:51	6201:51	15	length
LEAF_NODE	6201:51	6201:51	16	length
LEAF_NODE	6201:57	6201:57	14	,
ARGUMENT	6201:59	6201:59	14	width
FIELD	6201:59	6201:59	15	width
LEAF_NODE	6201:59	6201:59	16	width
LEAF_NODE	6201:64	6201:64	14	,
ARGUMENT	6201:66	6201:66	14	tw
FIELD	6201:66	6201:66	15	tw
LEAF_NODE	6201:66	6201:66	16	tw
LEAF_NODE	6201:68	6201:68	14	,
ARGUMENT	6201:70	6201:70	14	tl
FIELD	6201:70	6201:70	15	tl
LEAF_NODE	6201:70	6201:70	16	tl
LEAF_NODE	6201:72	6201:72	14	,
ARGUMENT	6201:74	6201:74	14	spp
FIELD	6201:74	6201:74	15	spp
LEAF_NODE	6201:74	6201:74	16	spp
LEAF_NODE	6201:77	6201:77	14	,
ARGUMENT	6201:79	6201:79	14	bps
FIELD	6201:79	6201:79	15	bps
LEAF_NODE	6201:79	6201:79	16	bps
LEAF_NODE	6201:82	6201:82	14	)
LEAF_NODE	6201:83	6201:83	13	)
LEAF_NODE	6201:84	6201:84	10	)
STATEMENTS	6202:6	6205:13	10	
LEAF_NODE	6202:6	6202:6	11	{
STATEMENTS	6203:6	6204:6	11	
EXPR_STATEMENT	6203:6	6203:75	12	TIFFError ( "loadImage" , "Unable to read contiguous tiles into buffer" ) ;
EXPR	6203:6	6203:6	13	TIFFError ( "loadImage" , "Unable to read contiguous tiles into buffer" )
FUNCTION_CALL	6203:6	6203:74	14	TIFFError ( "loadImage" , "Unable to read contiguous tiles into buffer" )
CALLEE	6203:6	6203:6	15	TIFFError
LEAF_NODE	6203:6	6203:6	16	TIFFError
LEAF_NODE	6203:15	6203:15	15	(
ARGUMENT	6203:16	6203:16	15	"loadImage"
FIELD	6203:16	6203:16	16	"loadImage"
LEAF_NODE	6203:16	6203:16	17	"loadImage"
LEAF_NODE	6203:27	6203:27	15	,
ARGUMENT	6203:29	6203:29	15	"Unable to read contiguous tiles into buffer"
FIELD	6203:29	6203:29	16	"Unable to read contiguous tiles into buffer"
LEAF_NODE	6203:29	6203:29	17	"Unable to read contiguous tiles into buffer"
LEAF_NODE	6203:74	6203:74	15	)
LEAF_NODE	6203:75	6203:75	13	;
JUMP_STATEMENT	6204:6	6204:17	12	return ( - 1 ) ;
KEYWORD	6204:6	6204:6	13	return
LEAF_NODE	6204:6	6204:6	14	return
DESTINATION	6204:13	6204:13	13	( - 1 )
EXPR	6204:13	6204:16	14	( - 1 )
LEAF_NODE	6204:13	6204:13	15	(
UNARY_EXPR	6204:14	6204:15	15	- 1
UNARY_OPERATOR	6204:14	6204:14	16	-
LEAF_NODE	6204:14	6204:14	17	-
FIELD	6204:15	6204:15	16	1
LEAF_NODE	6204:15	6204:15	17	1
LEAF_NODE	6204:16	6204:16	15	)
LEAF_NODE	6204:17	6204:17	13	;
LEAF_NODE	6205:13	6205:13	11	}
LEAF_NODE	6206:11	6206:11	8	}
SELECTION	6207:9	6208:11	6	
KEYWORD	6207:9	6207:9	7	else
LEAF_NODE	6207:9	6207:9	8	else
STATEMENTS	6208:11	6214:11	7	
LEAF_NODE	6208:11	6208:11	8	{
STATEMENTS	6209:4	6209:4	8	
SELECTION	6209:4	6210:6	9	
KEYWORD	6209:4	6209:4	10	if
LEAF_NODE	6209:4	6209:4	11	if
LEAF_NODE	6209:7	6209:7	10	(
CONDITION	6209:8	6209:8	10	! ( readSeparateTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps ) )
EXPR	6209:8	6209:8	11	! ( readSeparateTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps ) )
UNARY_EXPR	6209:8	6209:85	12	! ( readSeparateTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps ) )
UNARY_OPERATOR	6209:8	6209:8	13	!
LEAF_NODE	6209:8	6209:8	14	!
LEAF_NODE	6209:9	6209:9	13	(
FUNCTION_CALL	6209:10	6209:84	13	readSeparateTilesIntoBuffer ( in , read_buff , length , width , tw , tl , spp , bps )
CALLEE	6209:10	6209:10	14	readSeparateTilesIntoBuffer
LEAF_NODE	6209:10	6209:10	15	readSeparateTilesIntoBuffer
LEAF_NODE	6209:37	6209:37	14	(
ARGUMENT	6209:38	6209:38	14	in
FIELD	6209:38	6209:38	15	in
LEAF_NODE	6209:38	6209:38	16	in
LEAF_NODE	6209:40	6209:40	14	,
ARGUMENT	6209:42	6209:42	14	read_buff
FIELD	6209:42	6209:42	15	read_buff
LEAF_NODE	6209:42	6209:42	16	read_buff
LEAF_NODE	6209:51	6209:51	14	,
ARGUMENT	6209:53	6209:53	14	length
FIELD	6209:53	6209:53	15	length
LEAF_NODE	6209:53	6209:53	16	length
LEAF_NODE	6209:59	6209:59	14	,
ARGUMENT	6209:61	6209:61	14	width
FIELD	6209:61	6209:61	15	width
LEAF_NODE	6209:61	6209:61	16	width
LEAF_NODE	6209:66	6209:66	14	,
ARGUMENT	6209:68	6209:68	14	tw
FIELD	6209:68	6209:68	15	tw
LEAF_NODE	6209:68	6209:68	16	tw
LEAF_NODE	6209:70	6209:70	14	,
ARGUMENT	6209:72	6209:72	14	tl
FIELD	6209:72	6209:72	15	tl
LEAF_NODE	6209:72	6209:72	16	tl
LEAF_NODE	6209:74	6209:74	14	,
ARGUMENT	6209:76	6209:76	14	spp
FIELD	6209:76	6209:76	15	spp
LEAF_NODE	6209:76	6209:76	16	spp
LEAF_NODE	6209:79	6209:79	14	,
ARGUMENT	6209:81	6209:81	14	bps
FIELD	6209:81	6209:81	15	bps
LEAF_NODE	6209:81	6209:81	16	bps
LEAF_NODE	6209:84	6209:84	14	)
LEAF_NODE	6209:85	6209:85	13	)
LEAF_NODE	6209:86	6209:86	10	)
STATEMENTS	6210:6	6213:13	10	
LEAF_NODE	6210:6	6210:6	11	{
STATEMENTS	6211:6	6212:6	11	
EXPR_STATEMENT	6211:6	6211:73	12	TIFFError ( "loadImage" , "Unable to read separate tiles into buffer" ) ;
EXPR	6211:6	6211:6	13	TIFFError ( "loadImage" , "Unable to read separate tiles into buffer" )
FUNCTION_CALL	6211:6	6211:72	14	TIFFError ( "loadImage" , "Unable to read separate tiles into buffer" )
CALLEE	6211:6	6211:6	15	TIFFError
LEAF_NODE	6211:6	6211:6	16	TIFFError
LEAF_NODE	6211:15	6211:15	15	(
ARGUMENT	6211:16	6211:16	15	"loadImage"
FIELD	6211:16	6211:16	16	"loadImage"
LEAF_NODE	6211:16	6211:16	17	"loadImage"
LEAF_NODE	6211:27	6211:27	15	,
ARGUMENT	6211:29	6211:29	15	"Unable to read separate tiles into buffer"
FIELD	6211:29	6211:29	16	"Unable to read separate tiles into buffer"
LEAF_NODE	6211:29	6211:29	17	"Unable to read separate tiles into buffer"
LEAF_NODE	6211:72	6211:72	15	)
LEAF_NODE	6211:73	6211:73	13	;
JUMP_STATEMENT	6212:6	6212:17	12	return ( - 1 ) ;
KEYWORD	6212:6	6212:6	13	return
LEAF_NODE	6212:6	6212:6	14	return
DESTINATION	6212:13	6212:13	13	( - 1 )
EXPR	6212:13	6212:16	14	( - 1 )
LEAF_NODE	6212:13	6212:13	15	(
UNARY_EXPR	6212:14	6212:15	15	- 1
UNARY_OPERATOR	6212:14	6212:14	16	-
LEAF_NODE	6212:14	6212:14	17	-
FIELD	6212:15	6212:15	16	1
LEAF_NODE	6212:15	6212:15	17	1
LEAF_NODE	6212:16	6212:16	15	)
LEAF_NODE	6212:17	6212:17	13	;
LEAF_NODE	6213:13	6213:13	11	}
LEAF_NODE	6214:11	6214:11	8	}
JUMP_STATEMENT	6215:9	6215:14	6	break DESTINATION ;
KEYWORD	6215:9	6215:9	7	break
LEAF_NODE	6215:9	6215:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6215:14	6215:14	7	;
LABEL	6216:4	6216:11	6	default :
LEAF_NODE	6216:4	6216:4	7	default
LEAF_NODE	6216:11	6216:11	7	:
EXPR_STATEMENT	6216:13	6216:68	6	TIFFError ( "loadImage" , "Unsupported image file format" ) ;
EXPR	6216:13	6216:13	7	TIFFError ( "loadImage" , "Unsupported image file format" )
FUNCTION_CALL	6216:13	6216:67	8	TIFFError ( "loadImage" , "Unsupported image file format" )
CALLEE	6216:13	6216:13	9	TIFFError
LEAF_NODE	6216:13	6216:13	10	TIFFError
LEAF_NODE	6216:22	6216:22	9	(
ARGUMENT	6216:23	6216:23	9	"loadImage"
FIELD	6216:23	6216:23	10	"loadImage"
LEAF_NODE	6216:23	6216:23	11	"loadImage"
LEAF_NODE	6216:34	6216:34	9	,
ARGUMENT	6216:36	6216:36	9	"Unsupported image file format"
FIELD	6216:36	6216:36	10	"Unsupported image file format"
LEAF_NODE	6216:36	6216:36	11	"Unsupported image file format"
LEAF_NODE	6216:67	6216:67	9	)
LEAF_NODE	6216:68	6216:68	7	;
JUMP_STATEMENT	6217:10	6217:21	6	return ( - 1 ) ;
KEYWORD	6217:10	6217:10	7	return
LEAF_NODE	6217:10	6217:10	8	return
DESTINATION	6217:17	6217:17	7	( - 1 )
EXPR	6217:17	6217:20	8	( - 1 )
LEAF_NODE	6217:17	6217:17	9	(
UNARY_EXPR	6217:18	6217:19	9	- 1
UNARY_OPERATOR	6217:18	6217:18	10	-
LEAF_NODE	6217:18	6217:18	11	-
FIELD	6217:19	6217:19	10	1
LEAF_NODE	6217:19	6217:19	11	1
LEAF_NODE	6217:20	6217:20	9	)
LEAF_NODE	6217:21	6217:21	7	;
JUMP_STATEMENT	6218:10	6218:15	6	break DESTINATION ;
KEYWORD	6218:10	6218:10	7	break
LEAF_NODE	6218:10	6218:10	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6218:15	6218:15	7	;
LEAF_NODE	6219:4	6219:4	5	}
SELECTION	6220:2	6221:4	3	
KEYWORD	6220:2	6220:2	4	if
LEAF_NODE	6220:2	6220:2	5	if
LEAF_NODE	6220:5	6220:5	4	(
CONDITION	6220:6	6220:6	4	( dump -> infile != NULL ) && ( dump -> level == 2 )
EXPR	6220:6	6220:6	5	( dump -> infile != NULL ) && ( dump -> level == 2 )
AND	6220:6	6220:32	6	( dump -> infile != NULL ) && ( dump -> level == 2 )
EXPR	6220:6	6220:27	7	( dump -> infile != NULL )
LEAF_NODE	6220:6	6220:6	8	(
FIELD	6220:7	6220:13	8	dump -> infile
LEAF_NODE	6220:7	6220:7	9	dump
LEAF_NODE	6220:11	6220:11	9	->
LEAF_NODE	6220:13	6220:13	9	infile
EQ_OPERATOR	6220:20	6220:20	8	!=
LEAF_NODE	6220:20	6220:20	9	!=
FIELD	6220:23	6220:23	8	NULL
LEAF_NODE	6220:23	6220:23	9	NULL
LEAF_NODE	6220:27	6220:27	8	)
LEAF_NODE	6220:29	6220:29	7	&&
EXPR	6220:32	6220:49	7	( dump -> level == 2 )
LEAF_NODE	6220:32	6220:32	8	(
FIELD	6220:33	6220:39	8	dump -> level
LEAF_NODE	6220:33	6220:33	9	dump
LEAF_NODE	6220:37	6220:37	9	->
LEAF_NODE	6220:39	6220:39	9	level
EQ_OPERATOR	6220:45	6220:45	8	==
LEAF_NODE	6220:45	6220:45	9	==
FIELD	6220:48	6220:48	8	2
LEAF_NODE	6220:48	6220:48	9	2
LEAF_NODE	6220:49	6220:49	8	)
LEAF_NODE	6220:50	6220:50	4	)
STATEMENTS	6221:4	6231:4	4	
LEAF_NODE	6221:4	6221:4	5	{
STATEMENTS	6222:4	6228:4	5	
EXPR_STATEMENT	6222:4	6224:41	6	dump_info ( dump -> infile , dump -> format , "loadImage" , "Image width %d, length %d, Raw image data, %4d bytes" , width , length , buffsize ) ;
EXPR	6222:4	6222:4	7	dump_info ( dump -> infile , dump -> format , "loadImage" , "Image width %d, length %d, Raw image data, %4d bytes" , width , length , buffsize )
FUNCTION_CALL	6222:4	6224:40	8	dump_info ( dump -> infile , dump -> format , "loadImage" , "Image width %d, length %d, Raw image data, %4d bytes" , width , length , buffsize )
CALLEE	6222:4	6222:4	9	dump_info
LEAF_NODE	6222:4	6222:4	10	dump_info
LEAF_NODE	6222:15	6222:15	9	(
ARGUMENT	6222:16	6222:16	9	dump -> infile
FIELD	6222:16	6222:22	10	dump -> infile
LEAF_NODE	6222:16	6222:16	11	dump
LEAF_NODE	6222:20	6222:20	11	->
LEAF_NODE	6222:22	6222:22	11	infile
LEAF_NODE	6222:28	6222:28	9	,
ARGUMENT	6222:30	6222:30	9	dump -> format
FIELD	6222:30	6222:36	10	dump -> format
LEAF_NODE	6222:30	6222:30	11	dump
LEAF_NODE	6222:34	6222:34	11	->
LEAF_NODE	6222:36	6222:36	11	format
LEAF_NODE	6222:42	6222:42	9	,
ARGUMENT	6222:44	6222:44	9	"loadImage"
FIELD	6222:44	6222:44	10	"loadImage"
LEAF_NODE	6222:44	6222:44	11	"loadImage"
LEAF_NODE	6222:55	6222:55	9	,
ARGUMENT	6223:16	6223:16	9	"Image width %d, length %d, Raw image data, %4d bytes"
FIELD	6223:16	6223:16	10	"Image width %d, length %d, Raw image data, %4d bytes"
LEAF_NODE	6223:16	6223:16	11	"Image width %d, length %d, Raw image data, %4d bytes"
LEAF_NODE	6223:70	6223:70	9	,
ARGUMENT	6224:16	6224:16	9	width
FIELD	6224:16	6224:16	10	width
LEAF_NODE	6224:16	6224:16	11	width
LEAF_NODE	6224:21	6224:21	9	,
ARGUMENT	6224:23	6224:23	9	length
FIELD	6224:23	6224:23	10	length
LEAF_NODE	6224:23	6224:23	11	length
LEAF_NODE	6224:29	6224:29	9	,
ARGUMENT	6224:32	6224:32	9	buffsize
FIELD	6224:32	6224:32	10	buffsize
LEAF_NODE	6224:32	6224:32	11	buffsize
LEAF_NODE	6224:40	6224:40	9	)
LEAF_NODE	6224:41	6224:41	7	;
EXPR_STATEMENT	6225:4	6226:69	6	dump_info ( dump -> infile , dump -> format , "" , "Bits per sample %d, Samples per pixel %d" , bps , spp ) ;
EXPR	6225:4	6225:4	7	dump_info ( dump -> infile , dump -> format , "" , "Bits per sample %d, Samples per pixel %d" , bps , spp )
FUNCTION_CALL	6225:4	6226:68	8	dump_info ( dump -> infile , dump -> format , "" , "Bits per sample %d, Samples per pixel %d" , bps , spp )
CALLEE	6225:4	6225:4	9	dump_info
LEAF_NODE	6225:4	6225:4	10	dump_info
LEAF_NODE	6225:15	6225:15	9	(
ARGUMENT	6225:16	6225:16	9	dump -> infile
FIELD	6225:16	6225:22	10	dump -> infile
LEAF_NODE	6225:16	6225:16	11	dump
LEAF_NODE	6225:20	6225:20	11	->
LEAF_NODE	6225:22	6225:22	11	infile
LEAF_NODE	6225:28	6225:28	9	,
ARGUMENT	6225:30	6225:30	9	dump -> format
FIELD	6225:30	6225:36	10	dump -> format
LEAF_NODE	6225:30	6225:30	11	dump
LEAF_NODE	6225:34	6225:34	11	->
LEAF_NODE	6225:36	6225:36	11	format
LEAF_NODE	6225:42	6225:42	9	,
ARGUMENT	6225:44	6225:44	9	""
FIELD	6225:44	6225:44	10	""
LEAF_NODE	6225:44	6225:44	11	""
LEAF_NODE	6225:46	6225:46	9	,
ARGUMENT	6226:16	6226:16	9	"Bits per sample %d, Samples per pixel %d"
FIELD	6226:16	6226:16	10	"Bits per sample %d, Samples per pixel %d"
LEAF_NODE	6226:16	6226:16	11	"Bits per sample %d, Samples per pixel %d"
LEAF_NODE	6226:58	6226:58	9	,
ARGUMENT	6226:60	6226:60	9	bps
FIELD	6226:60	6226:60	10	bps
LEAF_NODE	6226:60	6226:60	11	bps
LEAF_NODE	6226:63	6226:63	9	,
ARGUMENT	6226:65	6226:65	9	spp
FIELD	6226:65	6226:65	10	spp
LEAF_NODE	6226:65	6226:65	11	spp
LEAF_NODE	6226:68	6226:68	9	)
LEAF_NODE	6226:69	6226:69	7	;
ITERATION	6228:4	6229:6	6	
KEYWORD	6228:4	6228:4	7	for
LEAF_NODE	6228:4	6228:4	8	for
LEAF_NODE	6228:8	6228:8	7	(
FOR_INIT	6228:9	6228:14	7	i = 0 ;
EXPR	6228:9	6228:9	8	i = 0
ASSIGN	6228:9	6228:13	9	i = 0
LVAL	6228:9	6228:9	10	i
FIELD	6228:9	6228:9	11	i
LEAF_NODE	6228:9	6228:9	12	i
ASSIGN_OP	6228:11	6228:11	10	=
LEAF_NODE	6228:11	6228:11	11	=
RVAL	6228:13	6228:13	10	0
FIELD	6228:13	6228:13	11	0
LEAF_NODE	6228:13	6228:13	12	0
LEAF_NODE	6228:14	6228:14	8	;
CONDITION	6228:16	6228:16	7	i < length
EXPR	6228:16	6228:20	8	i < length
FIELD	6228:16	6228:16	9	i
LEAF_NODE	6228:16	6228:16	10	i
REL_OPERATOR	6228:18	6228:18	9	<
LEAF_NODE	6228:18	6228:18	10	<
FIELD	6228:20	6228:20	9	length
LEAF_NODE	6228:20	6228:20	10	length
LEAF_NODE	6228:26	6228:26	7	;
FOR_EXPR	6228:28	6228:28	7	i ++
EXPR	6228:28	6228:28	8	i ++
FIELD	6228:28	6228:29	9	i ++
LEAF_NODE	6228:28	6228:28	10	i
LEAF_NODE	6228:29	6228:29	10	++
LEAF_NODE	6228:31	6228:31	7	)
STATEMENTS	6229:6	6229:6	7	
EXPR_STATEMENT	6229:6	6230:52	8	dump_buffer ( dump -> infile , dump -> format , 1 , scanlinesize , i , read_buff + ( i * scanlinesize ) ) ;
EXPR	6229:6	6229:6	9	dump_buffer ( dump -> infile , dump -> format , 1 , scanlinesize , i , read_buff + ( i * scanlinesize ) )
FUNCTION_CALL	6229:6	6230:51	10	dump_buffer ( dump -> infile , dump -> format , 1 , scanlinesize , i , read_buff + ( i * scanlinesize ) )
CALLEE	6229:6	6229:6	11	dump_buffer
LEAF_NODE	6229:6	6229:6	12	dump_buffer
LEAF_NODE	6229:17	6229:17	11	(
ARGUMENT	6229:18	6229:18	11	dump -> infile
FIELD	6229:18	6229:24	12	dump -> infile
LEAF_NODE	6229:18	6229:18	13	dump
LEAF_NODE	6229:22	6229:22	13	->
LEAF_NODE	6229:24	6229:24	13	infile
LEAF_NODE	6229:30	6229:30	11	,
ARGUMENT	6229:32	6229:32	11	dump -> format
FIELD	6229:32	6229:38	12	dump -> format
LEAF_NODE	6229:32	6229:32	13	dump
LEAF_NODE	6229:36	6229:36	13	->
LEAF_NODE	6229:38	6229:38	13	format
LEAF_NODE	6229:44	6229:44	11	,
ARGUMENT	6229:46	6229:46	11	1
FIELD	6229:46	6229:46	12	1
LEAF_NODE	6229:46	6229:46	13	1
LEAF_NODE	6229:47	6229:47	11	,
ARGUMENT	6229:49	6229:49	11	scanlinesize
FIELD	6229:49	6229:49	12	scanlinesize
LEAF_NODE	6229:49	6229:49	13	scanlinesize
LEAF_NODE	6229:61	6229:61	11	,
ARGUMENT	6230:18	6230:18	11	i
FIELD	6230:18	6230:18	12	i
LEAF_NODE	6230:18	6230:18	13	i
LEAF_NODE	6230:19	6230:19	11	,
ARGUMENT	6230:21	6230:50	11	read_buff + ( i * scanlinesize )
FIELD	6230:21	6230:21	12	read_buff
LEAF_NODE	6230:21	6230:21	13	read_buff
LEAF_NODE	6230:31	6230:31	12	+
LEAF_NODE	6230:33	6230:33	12	(
FIELD	6230:34	6230:34	12	i
LEAF_NODE	6230:34	6230:34	13	i
LEAF_NODE	6230:36	6230:36	12	*
FIELD	6230:38	6230:38	12	scanlinesize
LEAF_NODE	6230:38	6230:38	13	scanlinesize
LEAF_NODE	6230:50	6230:50	12	)
LEAF_NODE	6230:51	6230:51	11	)
LEAF_NODE	6230:52	6230:52	9	;
LEAF_NODE	6231:4	6231:4	5	}
JUMP_STATEMENT	6232:2	6232:12	3	return ( 0 ) ;
KEYWORD	6232:2	6232:2	4	return
LEAF_NODE	6232:2	6232:2	5	return
DESTINATION	6232:9	6232:9	4	( 0 )
EXPR	6232:9	6232:11	5	( 0 )
LEAF_NODE	6232:9	6232:9	6	(
FIELD	6232:10	6232:10	6	0
LEAF_NODE	6232:10	6232:10	7	0
LEAF_NODE	6232:11	6232:11	6	)
LEAF_NODE	6232:12	6232:12	4	;
LEAF_NODE	6233:2	6233:2	2	}
FUNCTION_DEF	6235:0	6284:2	1	
RETURN_TYPE	6235:0	6235:7	2	static int
LEAF_NODE	6235:0	6235:0	3	static
TYPE_NAME	6235:7	6235:7	3	int
LEAF_NODE	6235:7	6235:7	4	int
FUNCTION_NAME	6235:12	6235:12	2	correct_orientation
LEAF_NODE	6235:12	6235:12	3	correct_orientation
PARAMETER_LIST	6235:31	6235:87	2	( struct image_data * image , unsigned char * * work_buff_ptr )
LEAF_NODE	6235:31	6235:31	3	(
PARAMETER_DECL	6235:32	6235:51	3	struct image_data * image
TYPE	6235:32	6235:50	4	struct image_data *
TYPE_NAME	6235:32	6235:39	5	struct image_data
LEAF_NODE	6235:32	6235:32	6	struct
LEAF_NODE	6235:39	6235:39	6	image_data
POINTER	6235:50	6235:50	5	*
LEAF_NODE	6235:50	6235:50	6	*
NAME	6235:51	6235:51	4	image
LEAF_NODE	6235:51	6235:51	5	image
LEAF_NODE	6235:56	6235:56	3	,
PARAMETER_DECL	6235:58	6235:74	3	unsigned char * * work_buff_ptr
TYPE	6235:58	6235:72	4	unsigned char * *
TYPE_NAME	6235:58	6235:67	5	unsigned char
LEAF_NODE	6235:58	6235:58	6	unsigned
LEAF_NODE	6235:67	6235:67	6	char
POINTER	6235:72	6235:73	5	* *
LEAF_NODE	6235:72	6235:72	6	*
LEAF_NODE	6235:73	6235:73	6	*
NAME	6235:74	6235:74	4	work_buff_ptr
LEAF_NODE	6235:74	6235:74	5	work_buff_ptr
LEAF_NODE	6235:87	6235:87	3	)
LEAF_NODE	6236:2	6236:2	2	{
STATEMENTS	6237:2	6283:2	2	
SIMPLE_DECL	6237:2	6237:25	3	uint16 mirror , uint16 rotation ;
INIT_DECL_LIST	6237:2	6237:2	4	uint16 mirror , uint16 rotation
VAR_DECL	6237:2	6237:9	5	uint16 mirror
TYPE	6237:2	6237:2	6	uint16
TYPE_NAME	6237:2	6237:2	7	uint16
LEAF_NODE	6237:2	6237:2	8	uint16
NAME	6237:9	6237:9	6	mirror
LEAF_NODE	6237:9	6237:9	7	mirror
LEAF_NODE	6237:15	6237:15	5	,
VAR_DECL	6237:2	6237:17	5	uint16 rotation
TYPE	6237:2	6237:2	6	uint16
TYPE_NAME	6237:2	6237:2	7	uint16
LEAF_NODE	6237:2	6237:2	8	uint16
NAME	6237:17	6237:17	6	rotation
LEAF_NODE	6237:17	6237:17	7	rotation
LEAF_NODE	6237:25	6237:25	4	;
SIMPLE_DECL	6238:2	6238:26	3	unsigned char * work_buff ;
VAR_DECL	6238:2	6238:17	4	unsigned char * work_buff
TYPE	6238:2	6238:16	5	unsigned char *
TYPE_NAME	6238:2	6238:11	6	unsigned char
LEAF_NODE	6238:2	6238:2	7	unsigned
LEAF_NODE	6238:11	6238:11	7	char
POINTER	6238:16	6238:16	6	*
LEAF_NODE	6238:16	6238:16	7	*
NAME	6238:17	6238:17	5	work_buff
LEAF_NODE	6238:17	6238:17	6	work_buff
LEAF_NODE	6238:26	6238:26	4	;
EXPR_STATEMENT	6240:2	6240:28	3	work_buff = * work_buff_ptr ;
EXPR	6240:2	6240:2	4	work_buff = * work_buff_ptr
ASSIGN	6240:2	6240:14	5	work_buff = * work_buff_ptr
LVAL	6240:2	6240:2	6	work_buff
FIELD	6240:2	6240:2	7	work_buff
LEAF_NODE	6240:2	6240:2	8	work_buff
ASSIGN_OP	6240:12	6240:12	6	=
LEAF_NODE	6240:12	6240:12	7	=
RVAL	6240:14	6240:14	6	* work_buff_ptr
UNARY_EXPR	6240:14	6240:15	7	* work_buff_ptr
UNARY_OPERATOR	6240:14	6240:14	8	*
LEAF_NODE	6240:14	6240:14	9	*
FIELD	6240:15	6240:15	8	work_buff_ptr
LEAF_NODE	6240:15	6240:15	9	work_buff_ptr
LEAF_NODE	6240:28	6240:28	4	;
SELECTION	6241:2	6242:4	3	
KEYWORD	6241:2	6241:2	4	if
LEAF_NODE	6241:2	6241:2	5	if
LEAF_NODE	6241:5	6241:5	4	(
CONDITION	6241:6	6241:6	4	( image == NULL ) || ( work_buff == NULL )
EXPR	6241:6	6241:6	5	( image == NULL ) || ( work_buff == NULL )
OR	6241:6	6241:25	6	( image == NULL ) || ( work_buff == NULL )
EXPR	6241:6	6241:20	7	( image == NULL )
LEAF_NODE	6241:6	6241:6	8	(
FIELD	6241:7	6241:7	8	image
LEAF_NODE	6241:7	6241:7	9	image
EQ_OPERATOR	6241:13	6241:13	8	==
LEAF_NODE	6241:13	6241:13	9	==
FIELD	6241:16	6241:16	8	NULL
LEAF_NODE	6241:16	6241:16	9	NULL
LEAF_NODE	6241:20	6241:20	8	)
LEAF_NODE	6241:22	6241:22	7	||
EXPR	6241:25	6241:43	7	( work_buff == NULL )
LEAF_NODE	6241:25	6241:25	8	(
FIELD	6241:26	6241:26	8	work_buff
LEAF_NODE	6241:26	6241:26	9	work_buff
EQ_OPERATOR	6241:36	6241:36	8	==
LEAF_NODE	6241:36	6241:36	9	==
FIELD	6241:39	6241:39	8	NULL
LEAF_NODE	6241:39	6241:39	9	NULL
LEAF_NODE	6241:43	6241:43	8	)
LEAF_NODE	6241:44	6241:44	4	)
STATEMENTS	6242:4	6245:4	4	
LEAF_NODE	6242:4	6242:4	5	{
STATEMENTS	6243:4	6244:4	5	
EXPR_STATEMENT	6243:4	6243:71	6	TIFFError ( "correct_orientatin" , "Invalid image or buffer pointer" ) ;
EXPR	6243:4	6243:4	7	TIFFError ( "correct_orientatin" , "Invalid image or buffer pointer" )
FUNCTION_CALL	6243:4	6243:70	8	TIFFError ( "correct_orientatin" , "Invalid image or buffer pointer" )
CALLEE	6243:4	6243:4	9	TIFFError
LEAF_NODE	6243:4	6243:4	10	TIFFError
LEAF_NODE	6243:14	6243:14	9	(
ARGUMENT	6243:15	6243:15	9	"correct_orientatin"
FIELD	6243:15	6243:15	10	"correct_orientatin"
LEAF_NODE	6243:15	6243:15	11	"correct_orientatin"
LEAF_NODE	6243:35	6243:35	9	,
ARGUMENT	6243:37	6243:37	9	"Invalid image or buffer pointer"
FIELD	6243:37	6243:37	10	"Invalid image or buffer pointer"
LEAF_NODE	6243:37	6243:37	11	"Invalid image or buffer pointer"
LEAF_NODE	6243:70	6243:70	9	)
LEAF_NODE	6243:71	6243:71	7	;
JUMP_STATEMENT	6244:4	6244:15	6	return ( - 1 ) ;
KEYWORD	6244:4	6244:4	7	return
LEAF_NODE	6244:4	6244:4	8	return
DESTINATION	6244:11	6244:11	7	( - 1 )
EXPR	6244:11	6244:14	8	( - 1 )
LEAF_NODE	6244:11	6244:11	9	(
UNARY_EXPR	6244:12	6244:13	9	- 1
UNARY_OPERATOR	6244:12	6244:12	10	-
LEAF_NODE	6244:12	6244:12	11	-
FIELD	6244:13	6244:13	10	1
LEAF_NODE	6244:13	6244:13	11	1
LEAF_NODE	6244:14	6244:14	9	)
LEAF_NODE	6244:15	6244:15	7	;
LEAF_NODE	6245:4	6245:4	5	}
SELECTION	6247:2	6248:4	3	
KEYWORD	6247:2	6247:2	4	if
LEAF_NODE	6247:2	6247:2	5	if
LEAF_NODE	6247:5	6247:5	4	(
CONDITION	6247:6	6247:6	4	( image -> adjustments & MIRROR_HORIZ ) || ( image -> adjustments & MIRROR_VERT )
EXPR	6247:6	6247:6	5	( image -> adjustments & MIRROR_HORIZ ) || ( image -> adjustments & MIRROR_VERT )
OR	6247:6	6247:45	6	( image -> adjustments & MIRROR_HORIZ ) || ( image -> adjustments & MIRROR_VERT )
EXPR	6247:6	6247:40	7	( image -> adjustments & MIRROR_HORIZ )
LEAF_NODE	6247:6	6247:6	8	(
FIELD	6247:7	6247:14	8	image -> adjustments
LEAF_NODE	6247:7	6247:7	9	image
LEAF_NODE	6247:12	6247:12	9	->
LEAF_NODE	6247:14	6247:14	9	adjustments
LEAF_NODE	6247:26	6247:26	8	&
FIELD	6247:28	6247:28	8	MIRROR_HORIZ
LEAF_NODE	6247:28	6247:28	9	MIRROR_HORIZ
LEAF_NODE	6247:40	6247:40	8	)
LEAF_NODE	6247:42	6247:42	7	||
EXPR	6247:45	6247:78	7	( image -> adjustments & MIRROR_VERT )
LEAF_NODE	6247:45	6247:45	8	(
FIELD	6247:46	6247:53	8	image -> adjustments
LEAF_NODE	6247:46	6247:46	9	image
LEAF_NODE	6247:51	6247:51	9	->
LEAF_NODE	6247:53	6247:53	9	adjustments
LEAF_NODE	6247:65	6247:65	8	&
FIELD	6247:67	6247:67	8	MIRROR_VERT
LEAF_NODE	6247:67	6247:67	9	MIRROR_VERT
LEAF_NODE	6247:78	6247:78	8	)
LEAF_NODE	6247:79	6247:79	4	)
STATEMENTS	6248:4	6256:4	4	
LEAF_NODE	6248:4	6248:4	5	{
STATEMENTS	6249:4	6250:4	5	
EXPR_STATEMENT	6249:4	6249:55	6	mirror = ( uint16 ) ( image -> adjustments & MIRROR_BOTH ) ;
EXPR	6249:4	6249:4	7	mirror = ( uint16 ) ( image -> adjustments & MIRROR_BOTH )
ASSIGN	6249:4	6249:13	8	mirror = ( uint16 ) ( image -> adjustments & MIRROR_BOTH )
LVAL	6249:4	6249:4	9	mirror
FIELD	6249:4	6249:4	10	mirror
LEAF_NODE	6249:4	6249:4	11	mirror
ASSIGN_OP	6249:11	6249:11	9	=
LEAF_NODE	6249:11	6249:11	10	=
RVAL	6249:13	6249:54	9	( uint16 ) ( image -> adjustments & MIRROR_BOTH )
LEAF_NODE	6249:13	6249:13	10	(
TYPE_NAME	6249:14	6249:14	10	uint16
LEAF_NODE	6249:14	6249:14	11	uint16
LEAF_NODE	6249:20	6249:20	10	)
LEAF_NODE	6249:21	6249:21	10	(
FIELD	6249:22	6249:29	10	image -> adjustments
LEAF_NODE	6249:22	6249:22	11	image
LEAF_NODE	6249:27	6249:27	11	->
LEAF_NODE	6249:29	6249:29	11	adjustments
LEAF_NODE	6249:41	6249:41	10	&
FIELD	6249:43	6249:43	10	MIRROR_BOTH
LEAF_NODE	6249:43	6249:43	11	MIRROR_BOTH
LEAF_NODE	6249:54	6249:54	10	)
LEAF_NODE	6249:55	6249:55	7	;
SELECTION	6250:4	6252:6	6	
KEYWORD	6250:4	6250:4	7	if
LEAF_NODE	6250:4	6250:4	8	if
LEAF_NODE	6250:7	6250:7	7	(
CONDITION	6250:8	6250:8	7	mirrorImage ( image -> spp , image -> bps , mirror , image -> width , image -> length , work_buff )
EXPR	6250:8	6250:8	8	mirrorImage ( image -> spp , image -> bps , mirror , image -> width , image -> length , work_buff )
FUNCTION_CALL	6250:8	6251:46	9	mirrorImage ( image -> spp , image -> bps , mirror , image -> width , image -> length , work_buff )
CALLEE	6250:8	6250:8	10	mirrorImage
LEAF_NODE	6250:8	6250:8	11	mirrorImage
LEAF_NODE	6250:19	6250:19	10	(
ARGUMENT	6250:20	6250:20	10	image -> spp
FIELD	6250:20	6250:27	11	image -> spp
LEAF_NODE	6250:20	6250:20	12	image
LEAF_NODE	6250:25	6250:25	12	->
LEAF_NODE	6250:27	6250:27	12	spp
LEAF_NODE	6250:30	6250:30	10	,
ARGUMENT	6250:32	6250:32	10	image -> bps
FIELD	6250:32	6250:39	11	image -> bps
LEAF_NODE	6250:32	6250:32	12	image
LEAF_NODE	6250:37	6250:37	12	->
LEAF_NODE	6250:39	6250:39	12	bps
LEAF_NODE	6250:42	6250:42	10	,
ARGUMENT	6250:44	6250:44	10	mirror
FIELD	6250:44	6250:44	11	mirror
LEAF_NODE	6250:44	6250:44	12	mirror
LEAF_NODE	6250:50	6250:50	10	,
ARGUMENT	6251:8	6251:8	10	image -> width
FIELD	6251:8	6251:15	11	image -> width
LEAF_NODE	6251:8	6251:8	12	image
LEAF_NODE	6251:13	6251:13	12	->
LEAF_NODE	6251:15	6251:15	12	width
LEAF_NODE	6251:20	6251:20	10	,
ARGUMENT	6251:22	6251:22	10	image -> length
FIELD	6251:22	6251:29	11	image -> length
LEAF_NODE	6251:22	6251:22	12	image
LEAF_NODE	6251:27	6251:27	12	->
LEAF_NODE	6251:29	6251:29	12	length
LEAF_NODE	6251:35	6251:35	10	,
ARGUMENT	6251:37	6251:37	10	work_buff
FIELD	6251:37	6251:37	11	work_buff
LEAF_NODE	6251:37	6251:37	12	work_buff
LEAF_NODE	6251:46	6251:46	10	)
LEAF_NODE	6251:47	6251:47	7	)
STATEMENTS	6252:6	6255:6	7	
LEAF_NODE	6252:6	6252:6	8	{
STATEMENTS	6253:6	6254:6	8	
EXPR_STATEMENT	6253:6	6253:65	9	TIFFError ( "correct_orientation" , "Unable to mirror image" ) ;
EXPR	6253:6	6253:6	10	TIFFError ( "correct_orientation" , "Unable to mirror image" )
FUNCTION_CALL	6253:6	6253:64	11	TIFFError ( "correct_orientation" , "Unable to mirror image" )
CALLEE	6253:6	6253:6	12	TIFFError
LEAF_NODE	6253:6	6253:6	13	TIFFError
LEAF_NODE	6253:16	6253:16	12	(
ARGUMENT	6253:17	6253:17	12	"correct_orientation"
FIELD	6253:17	6253:17	13	"correct_orientation"
LEAF_NODE	6253:17	6253:17	14	"correct_orientation"
LEAF_NODE	6253:38	6253:38	12	,
ARGUMENT	6253:40	6253:40	12	"Unable to mirror image"
FIELD	6253:40	6253:40	13	"Unable to mirror image"
LEAF_NODE	6253:40	6253:40	14	"Unable to mirror image"
LEAF_NODE	6253:64	6253:64	12	)
LEAF_NODE	6253:65	6253:65	10	;
JUMP_STATEMENT	6254:6	6254:17	9	return ( - 1 ) ;
KEYWORD	6254:6	6254:6	10	return
LEAF_NODE	6254:6	6254:6	11	return
DESTINATION	6254:13	6254:13	10	( - 1 )
EXPR	6254:13	6254:16	11	( - 1 )
LEAF_NODE	6254:13	6254:13	12	(
UNARY_EXPR	6254:14	6254:15	12	- 1
UNARY_OPERATOR	6254:14	6254:14	13	-
LEAF_NODE	6254:14	6254:14	14	-
FIELD	6254:15	6254:15	13	1
LEAF_NODE	6254:15	6254:15	14	1
LEAF_NODE	6254:16	6254:16	12	)
LEAF_NODE	6254:17	6254:17	10	;
LEAF_NODE	6255:6	6255:6	8	}
LEAF_NODE	6256:4	6256:4	5	}
SELECTION	6258:2	6259:4	3	
KEYWORD	6258:2	6258:2	4	if
LEAF_NODE	6258:2	6258:2	5	if
LEAF_NODE	6258:5	6258:5	4	(
CONDITION	6258:6	6258:6	4	image -> adjustments & ROTATE_ANY
EXPR	6258:6	6258:27	5	image -> adjustments & ROTATE_ANY
FIELD	6258:6	6258:13	6	image -> adjustments
LEAF_NODE	6258:6	6258:6	7	image
LEAF_NODE	6258:11	6258:11	7	->
LEAF_NODE	6258:13	6258:13	7	adjustments
LEAF_NODE	6258:25	6258:25	6	&
FIELD	6258:27	6258:27	6	ROTATE_ANY
LEAF_NODE	6258:27	6258:27	7	ROTATE_ANY
LEAF_NODE	6258:37	6258:37	4	)
STATEMENTS	6259:4	6281:4	4	
LEAF_NODE	6259:4	6259:4	5	{
STATEMENTS	6260:4	6280:4	5	
SELECTION	6260:4	6261:6	6	
KEYWORD	6260:4	6260:4	7	if
LEAF_NODE	6260:4	6260:4	8	if
LEAF_NODE	6260:7	6260:7	7	(
CONDITION	6260:8	6260:8	7	image -> adjustments & ROTATECW_90
EXPR	6260:8	6260:29	8	image -> adjustments & ROTATECW_90
FIELD	6260:8	6260:15	9	image -> adjustments
LEAF_NODE	6260:8	6260:8	10	image
LEAF_NODE	6260:13	6260:13	10	->
LEAF_NODE	6260:15	6260:15	10	adjustments
LEAF_NODE	6260:27	6260:27	9	&
FIELD	6260:29	6260:29	9	ROTATECW_90
LEAF_NODE	6260:29	6260:29	10	ROTATECW_90
LEAF_NODE	6260:40	6260:40	7	)
STATEMENTS	6261:6	6261:6	7	
EXPR_STATEMENT	6261:6	6261:28	8	rotation = ( uint16 ) 90 ;
EXPR	6261:6	6261:6	9	rotation = ( uint16 ) 90
ASSIGN	6261:6	6261:17	10	rotation = ( uint16 ) 90
LVAL	6261:6	6261:6	11	rotation
FIELD	6261:6	6261:6	12	rotation
LEAF_NODE	6261:6	6261:6	13	rotation
ASSIGN_OP	6261:15	6261:15	11	=
LEAF_NODE	6261:15	6261:15	12	=
RVAL	6261:17	6261:26	11	( uint16 ) 90
LEAF_NODE	6261:17	6261:17	12	(
TYPE_NAME	6261:18	6261:18	12	uint16
LEAF_NODE	6261:18	6261:18	13	uint16
LEAF_NODE	6261:24	6261:24	12	)
FIELD	6261:26	6261:26	12	90
LEAF_NODE	6261:26	6261:26	13	90
LEAF_NODE	6261:28	6261:28	9	;
SELECTION	6262:4	6263:4	6	
KEYWORD	6262:4	6262:4	7	else
LEAF_NODE	6262:4	6262:4	8	else
STATEMENTS	6263:4	6263:4	7	
SELECTION	6263:4	6264:6	8	
KEYWORD	6263:4	6263:4	9	if
LEAF_NODE	6263:4	6263:4	10	if
LEAF_NODE	6263:7	6263:7	9	(
CONDITION	6263:8	6263:8	9	image -> adjustments & ROTATECW_180
EXPR	6263:8	6263:29	10	image -> adjustments & ROTATECW_180
FIELD	6263:8	6263:15	11	image -> adjustments
LEAF_NODE	6263:8	6263:8	12	image
LEAF_NODE	6263:13	6263:13	12	->
LEAF_NODE	6263:15	6263:15	12	adjustments
LEAF_NODE	6263:27	6263:27	11	&
FIELD	6263:29	6263:29	11	ROTATECW_180
LEAF_NODE	6263:29	6263:29	12	ROTATECW_180
LEAF_NODE	6263:41	6263:41	9	)
STATEMENTS	6264:6	6264:6	9	
EXPR_STATEMENT	6264:6	6264:29	10	rotation = ( uint16 ) 180 ;
EXPR	6264:6	6264:6	11	rotation = ( uint16 ) 180
ASSIGN	6264:6	6264:17	12	rotation = ( uint16 ) 180
LVAL	6264:6	6264:6	13	rotation
FIELD	6264:6	6264:6	14	rotation
LEAF_NODE	6264:6	6264:6	15	rotation
ASSIGN_OP	6264:15	6264:15	13	=
LEAF_NODE	6264:15	6264:15	14	=
RVAL	6264:17	6264:26	13	( uint16 ) 180
LEAF_NODE	6264:17	6264:17	14	(
TYPE_NAME	6264:18	6264:18	14	uint16
LEAF_NODE	6264:18	6264:18	15	uint16
LEAF_NODE	6264:24	6264:24	14	)
FIELD	6264:26	6264:26	14	180
LEAF_NODE	6264:26	6264:26	15	180
LEAF_NODE	6264:29	6264:29	11	;
SELECTION	6265:4	6266:4	6	
KEYWORD	6265:4	6265:4	7	else
LEAF_NODE	6265:4	6265:4	8	else
STATEMENTS	6266:4	6266:4	7	
SELECTION	6266:4	6267:6	8	
KEYWORD	6266:4	6266:4	9	if
LEAF_NODE	6266:4	6266:4	10	if
LEAF_NODE	6266:7	6266:7	9	(
CONDITION	6266:8	6266:8	9	image -> adjustments & ROTATECW_270
EXPR	6266:8	6266:29	10	image -> adjustments & ROTATECW_270
FIELD	6266:8	6266:15	11	image -> adjustments
LEAF_NODE	6266:8	6266:8	12	image
LEAF_NODE	6266:13	6266:13	12	->
LEAF_NODE	6266:15	6266:15	12	adjustments
LEAF_NODE	6266:27	6266:27	11	&
FIELD	6266:29	6266:29	11	ROTATECW_270
LEAF_NODE	6266:29	6266:29	12	ROTATECW_270
LEAF_NODE	6266:41	6266:41	9	)
STATEMENTS	6267:6	6267:6	9	
EXPR_STATEMENT	6267:6	6267:29	10	rotation = ( uint16 ) 270 ;
EXPR	6267:6	6267:6	11	rotation = ( uint16 ) 270
ASSIGN	6267:6	6267:17	12	rotation = ( uint16 ) 270
LVAL	6267:6	6267:6	13	rotation
FIELD	6267:6	6267:6	14	rotation
LEAF_NODE	6267:6	6267:6	15	rotation
ASSIGN_OP	6267:15	6267:15	13	=
LEAF_NODE	6267:15	6267:15	14	=
RVAL	6267:17	6267:26	13	( uint16 ) 270
LEAF_NODE	6267:17	6267:17	14	(
TYPE_NAME	6267:18	6267:18	14	uint16
LEAF_NODE	6267:18	6267:18	15	uint16
LEAF_NODE	6267:24	6267:24	14	)
FIELD	6267:26	6267:26	14	270
LEAF_NODE	6267:26	6267:26	15	270
LEAF_NODE	6267:29	6267:29	11	;
SELECTION	6268:4	6269:6	6	
KEYWORD	6268:4	6268:4	7	else
LEAF_NODE	6268:4	6268:4	8	else
STATEMENTS	6269:6	6273:6	7	
LEAF_NODE	6269:6	6269:6	8	{
STATEMENTS	6270:6	6272:6	8	
EXPR_STATEMENT	6270:6	6271:50	9	TIFFError ( "correct_orientation" , "Invalid rotation value: %d" , image -> adjustments & ROTATE_ANY ) ;
EXPR	6270:6	6270:6	10	TIFFError ( "correct_orientation" , "Invalid rotation value: %d" , image -> adjustments & ROTATE_ANY )
FUNCTION_CALL	6270:6	6271:49	11	TIFFError ( "correct_orientation" , "Invalid rotation value: %d" , image -> adjustments & ROTATE_ANY )
CALLEE	6270:6	6270:6	12	TIFFError
LEAF_NODE	6270:6	6270:6	13	TIFFError
LEAF_NODE	6270:16	6270:16	12	(
ARGUMENT	6270:17	6270:17	12	"correct_orientation"
FIELD	6270:17	6270:17	13	"correct_orientation"
LEAF_NODE	6270:17	6270:17	14	"correct_orientation"
LEAF_NODE	6270:38	6270:38	12	,
ARGUMENT	6270:40	6270:40	12	"Invalid rotation value: %d"
FIELD	6270:40	6270:40	13	"Invalid rotation value: %d"
LEAF_NODE	6270:40	6270:40	14	"Invalid rotation value: %d"
LEAF_NODE	6270:68	6270:68	12	,
ARGUMENT	6271:18	6271:39	12	image -> adjustments & ROTATE_ANY
FIELD	6271:18	6271:25	13	image -> adjustments
LEAF_NODE	6271:18	6271:18	14	image
LEAF_NODE	6271:23	6271:23	14	->
LEAF_NODE	6271:25	6271:25	14	adjustments
LEAF_NODE	6271:37	6271:37	13	&
FIELD	6271:39	6271:39	13	ROTATE_ANY
LEAF_NODE	6271:39	6271:39	14	ROTATE_ANY
LEAF_NODE	6271:49	6271:49	12	)
LEAF_NODE	6271:50	6271:50	10	;
JUMP_STATEMENT	6272:6	6272:17	9	return ( - 1 ) ;
KEYWORD	6272:6	6272:6	10	return
LEAF_NODE	6272:6	6272:6	11	return
DESTINATION	6272:13	6272:13	10	( - 1 )
EXPR	6272:13	6272:16	11	( - 1 )
LEAF_NODE	6272:13	6272:13	12	(
UNARY_EXPR	6272:14	6272:15	12	- 1
UNARY_OPERATOR	6272:14	6272:14	13	-
LEAF_NODE	6272:14	6272:14	14	-
FIELD	6272:15	6272:15	13	1
LEAF_NODE	6272:15	6272:15	14	1
LEAF_NODE	6272:16	6272:16	12	)
LEAF_NODE	6272:17	6272:17	10	;
LEAF_NODE	6273:6	6273:6	8	}
SELECTION	6275:4	6276:6	6	
KEYWORD	6275:4	6275:4	7	if
LEAF_NODE	6275:4	6275:4	8	if
LEAF_NODE	6275:7	6275:7	7	(
CONDITION	6275:8	6275:8	7	rotateImage ( rotation , image , & image -> width , & image -> length , work_buff_ptr )
EXPR	6275:8	6275:8	8	rotateImage ( rotation , image , & image -> width , & image -> length , work_buff_ptr )
FUNCTION_CALL	6275:8	6275:81	9	rotateImage ( rotation , image , & image -> width , & image -> length , work_buff_ptr )
CALLEE	6275:8	6275:8	10	rotateImage
LEAF_NODE	6275:8	6275:8	11	rotateImage
LEAF_NODE	6275:19	6275:19	10	(
ARGUMENT	6275:20	6275:20	10	rotation
FIELD	6275:20	6275:20	11	rotation
LEAF_NODE	6275:20	6275:20	12	rotation
LEAF_NODE	6275:28	6275:28	10	,
ARGUMENT	6275:30	6275:30	10	image
FIELD	6275:30	6275:30	11	image
LEAF_NODE	6275:30	6275:30	12	image
LEAF_NODE	6275:35	6275:35	10	,
ARGUMENT	6275:37	6275:37	10	& image -> width
UNARY_EXPR	6275:37	6275:38	11	& image -> width
UNARY_OPERATOR	6275:37	6275:37	12	&
LEAF_NODE	6275:37	6275:37	13	&
FIELD	6275:38	6275:45	12	image -> width
LEAF_NODE	6275:38	6275:38	13	image
LEAF_NODE	6275:43	6275:43	13	->
LEAF_NODE	6275:45	6275:45	13	width
LEAF_NODE	6275:50	6275:50	10	,
ARGUMENT	6275:52	6275:52	10	& image -> length
UNARY_EXPR	6275:52	6275:53	11	& image -> length
UNARY_OPERATOR	6275:52	6275:52	12	&
LEAF_NODE	6275:52	6275:52	13	&
FIELD	6275:53	6275:60	12	image -> length
LEAF_NODE	6275:53	6275:53	13	image
LEAF_NODE	6275:58	6275:58	13	->
LEAF_NODE	6275:60	6275:60	13	length
LEAF_NODE	6275:66	6275:66	10	,
ARGUMENT	6275:68	6275:68	10	work_buff_ptr
FIELD	6275:68	6275:68	11	work_buff_ptr
LEAF_NODE	6275:68	6275:68	12	work_buff_ptr
LEAF_NODE	6275:81	6275:81	10	)
LEAF_NODE	6275:82	6275:82	7	)
STATEMENTS	6276:6	6279:6	7	
LEAF_NODE	6276:6	6276:6	8	{
STATEMENTS	6277:6	6278:6	8	
EXPR_STATEMENT	6277:6	6277:65	9	TIFFError ( "correct_orientation" , "Unable to rotate image" ) ;
EXPR	6277:6	6277:6	10	TIFFError ( "correct_orientation" , "Unable to rotate image" )
FUNCTION_CALL	6277:6	6277:64	11	TIFFError ( "correct_orientation" , "Unable to rotate image" )
CALLEE	6277:6	6277:6	12	TIFFError
LEAF_NODE	6277:6	6277:6	13	TIFFError
LEAF_NODE	6277:16	6277:16	12	(
ARGUMENT	6277:17	6277:17	12	"correct_orientation"
FIELD	6277:17	6277:17	13	"correct_orientation"
LEAF_NODE	6277:17	6277:17	14	"correct_orientation"
LEAF_NODE	6277:38	6277:38	12	,
ARGUMENT	6277:40	6277:40	12	"Unable to rotate image"
FIELD	6277:40	6277:40	13	"Unable to rotate image"
LEAF_NODE	6277:40	6277:40	14	"Unable to rotate image"
LEAF_NODE	6277:64	6277:64	12	)
LEAF_NODE	6277:65	6277:65	10	;
JUMP_STATEMENT	6278:6	6278:17	9	return ( - 1 ) ;
KEYWORD	6278:6	6278:6	10	return
LEAF_NODE	6278:6	6278:6	11	return
DESTINATION	6278:13	6278:13	10	( - 1 )
EXPR	6278:13	6278:16	11	( - 1 )
LEAF_NODE	6278:13	6278:13	12	(
UNARY_EXPR	6278:14	6278:15	12	- 1
UNARY_OPERATOR	6278:14	6278:14	13	-
LEAF_NODE	6278:14	6278:14	14	-
FIELD	6278:15	6278:15	13	1
LEAF_NODE	6278:15	6278:15	14	1
LEAF_NODE	6278:16	6278:16	12	)
LEAF_NODE	6278:17	6278:17	10	;
LEAF_NODE	6279:6	6279:6	8	}
EXPR_STATEMENT	6280:4	6280:44	6	image -> orientation = ORIENTATION_TOPLEFT ;
EXPR	6280:4	6280:4	7	image -> orientation = ORIENTATION_TOPLEFT
ASSIGN	6280:4	6280:25	8	image -> orientation = ORIENTATION_TOPLEFT
LVAL	6280:4	6280:4	9	image -> orientation
FIELD	6280:4	6280:11	10	image -> orientation
LEAF_NODE	6280:4	6280:4	11	image
LEAF_NODE	6280:9	6280:9	11	->
LEAF_NODE	6280:11	6280:11	11	orientation
ASSIGN_OP	6280:23	6280:23	9	=
LEAF_NODE	6280:23	6280:23	10	=
RVAL	6280:25	6280:25	9	ORIENTATION_TOPLEFT
FIELD	6280:25	6280:25	10	ORIENTATION_TOPLEFT
LEAF_NODE	6280:25	6280:25	11	ORIENTATION_TOPLEFT
LEAF_NODE	6280:44	6280:44	7	;
LEAF_NODE	6281:4	6281:4	5	}
JUMP_STATEMENT	6283:2	6283:12	3	return ( 0 ) ;
KEYWORD	6283:2	6283:2	4	return
LEAF_NODE	6283:2	6283:2	5	return
DESTINATION	6283:9	6283:9	4	( 0 )
EXPR	6283:9	6283:11	5	( 0 )
LEAF_NODE	6283:9	6283:9	6	(
FIELD	6283:10	6283:10	6	0
LEAF_NODE	6283:10	6283:10	7	0
LEAF_NODE	6283:11	6283:11	6	)
LEAF_NODE	6283:12	6283:12	4	;
LEAF_NODE	6284:2	6284:2	2	}
FUNCTION_DEF	6288:0	6523:2	1	
RETURN_TYPE	6288:0	6288:7	2	static int
LEAF_NODE	6288:0	6288:0	3	static
TYPE_NAME	6288:7	6288:7	3	int
LEAF_NODE	6288:7	6288:7	4	int
FUNCTION_NAME	6289:0	6289:0	2	extractCompositeRegions
LEAF_NODE	6289:0	6289:0	3	extractCompositeRegions
PARAMETER_LIST	6289:23	6290:74	2	( struct image_data * image , struct crop_mask * crop , unsigned char * read_buff , unsigned char * crop_buff )
LEAF_NODE	6289:23	6289:23	3	(
PARAMETER_DECL	6289:24	6289:43	3	struct image_data * image
TYPE	6289:24	6289:42	4	struct image_data *
TYPE_NAME	6289:24	6289:31	5	struct image_data
LEAF_NODE	6289:24	6289:24	6	struct
LEAF_NODE	6289:31	6289:31	6	image_data
POINTER	6289:42	6289:42	5	*
LEAF_NODE	6289:42	6289:42	6	*
NAME	6289:43	6289:43	4	image
LEAF_NODE	6289:43	6289:43	5	image
LEAF_NODE	6289:48	6289:48	3	,
PARAMETER_DECL	6289:51	6289:69	3	struct crop_mask * crop
TYPE	6289:51	6289:68	4	struct crop_mask *
TYPE_NAME	6289:51	6289:58	5	struct crop_mask
LEAF_NODE	6289:51	6289:51	6	struct
LEAF_NODE	6289:58	6289:58	6	crop_mask
POINTER	6289:68	6289:68	5	*
LEAF_NODE	6289:68	6289:68	6	*
NAME	6289:69	6289:69	4	crop
LEAF_NODE	6289:69	6289:69	5	crop
LEAF_NODE	6289:73	6289:73	3	,
PARAMETER_DECL	6290:24	6290:39	3	unsigned char * read_buff
TYPE	6290:24	6290:38	4	unsigned char *
TYPE_NAME	6290:24	6290:33	5	unsigned char
LEAF_NODE	6290:24	6290:24	6	unsigned
LEAF_NODE	6290:33	6290:33	6	char
POINTER	6290:38	6290:38	5	*
LEAF_NODE	6290:38	6290:38	6	*
NAME	6290:39	6290:39	4	read_buff
LEAF_NODE	6290:39	6290:39	5	read_buff
LEAF_NODE	6290:48	6290:48	3	,
PARAMETER_DECL	6290:50	6290:65	3	unsigned char * crop_buff
TYPE	6290:50	6290:64	4	unsigned char *
TYPE_NAME	6290:50	6290:59	5	unsigned char
LEAF_NODE	6290:50	6290:50	6	unsigned
LEAF_NODE	6290:59	6290:59	6	char
POINTER	6290:64	6290:64	5	*
LEAF_NODE	6290:64	6290:64	6	*
NAME	6290:65	6290:65	4	crop_buff
LEAF_NODE	6290:65	6290:65	5	crop_buff
LEAF_NODE	6290:74	6290:74	3	)
LEAF_NODE	6291:2	6291:2	2	{
STATEMENTS	6292:2	6522:2	2	
SIMPLE_DECL	6292:2	6292:58	3	int shift_width , int bytes_per_sample , int bytes_per_pixel ;
INIT_DECL_LIST	6292:2	6292:2	4	int shift_width , int bytes_per_sample , int bytes_per_pixel
VAR_DECL	6292:2	6292:12	5	int shift_width
TYPE	6292:2	6292:2	6	int
TYPE_NAME	6292:2	6292:2	7	int
LEAF_NODE	6292:2	6292:2	8	int
NAME	6292:12	6292:12	6	shift_width
LEAF_NODE	6292:12	6292:12	7	shift_width
LEAF_NODE	6292:23	6292:23	5	,
INIT_DECL_LIST	6292:2	6292:2	5	int bytes_per_sample , int bytes_per_pixel
VAR_DECL	6292:2	6292:25	6	int bytes_per_sample
TYPE	6292:2	6292:2	7	int
TYPE_NAME	6292:2	6292:2	8	int
LEAF_NODE	6292:2	6292:2	9	int
NAME	6292:25	6292:25	7	bytes_per_sample
LEAF_NODE	6292:25	6292:25	8	bytes_per_sample
LEAF_NODE	6292:41	6292:41	6	,
VAR_DECL	6292:2	6292:43	6	int bytes_per_pixel
TYPE	6292:2	6292:2	7	int
TYPE_NAME	6292:2	6292:2	8	int
LEAF_NODE	6292:2	6292:2	9	int
NAME	6292:43	6292:43	7	bytes_per_pixel
LEAF_NODE	6292:43	6292:43	8	bytes_per_pixel
LEAF_NODE	6292:58	6292:58	4	;
SIMPLE_DECL	6293:2	6293:48	3	uint32 i , uint32 trailing_bits , uint32 prev_trailing_bits ;
INIT_DECL_LIST	6293:2	6293:2	4	uint32 i , uint32 trailing_bits , uint32 prev_trailing_bits
VAR_DECL	6293:2	6293:12	5	uint32 i
TYPE	6293:2	6293:2	6	uint32
TYPE_NAME	6293:2	6293:2	7	uint32
LEAF_NODE	6293:2	6293:2	8	uint32
NAME	6293:12	6293:12	6	i
LEAF_NODE	6293:12	6293:12	7	i
LEAF_NODE	6293:13	6293:13	5	,
INIT_DECL_LIST	6293:2	6293:2	5	uint32 trailing_bits , uint32 prev_trailing_bits
VAR_DECL	6293:2	6293:15	6	uint32 trailing_bits
TYPE	6293:2	6293:2	7	uint32
TYPE_NAME	6293:2	6293:2	8	uint32
LEAF_NODE	6293:2	6293:2	9	uint32
NAME	6293:15	6293:15	7	trailing_bits
LEAF_NODE	6293:15	6293:15	8	trailing_bits
LEAF_NODE	6293:28	6293:28	6	,
VAR_DECL	6293:2	6293:30	6	uint32 prev_trailing_bits
TYPE	6293:2	6293:2	7	uint32
TYPE_NAME	6293:2	6293:2	8	uint32
LEAF_NODE	6293:2	6293:2	9	uint32
NAME	6293:30	6293:30	7	prev_trailing_bits
LEAF_NODE	6293:30	6293:30	8	prev_trailing_bits
LEAF_NODE	6293:48	6293:48	4	;
SIMPLE_DECL	6294:2	6294:57	3	uint32 row , uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col ;
INIT_DECL_LIST	6294:2	6294:2	4	uint32 row , uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6294:2	6294:12	5	uint32 row
TYPE	6294:2	6294:2	6	uint32
TYPE_NAME	6294:2	6294:2	7	uint32
LEAF_NODE	6294:2	6294:2	8	uint32
NAME	6294:12	6294:12	6	row
LEAF_NODE	6294:12	6294:12	7	row
LEAF_NODE	6294:15	6294:15	5	,
INIT_DECL_LIST	6294:2	6294:2	5	uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6294:2	6294:17	6	uint32 first_row
TYPE	6294:2	6294:2	7	uint32
TYPE_NAME	6294:2	6294:2	8	uint32
LEAF_NODE	6294:2	6294:2	9	uint32
NAME	6294:17	6294:17	7	first_row
LEAF_NODE	6294:17	6294:17	8	first_row
LEAF_NODE	6294:26	6294:26	6	,
INIT_DECL_LIST	6294:2	6294:2	6	uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6294:2	6294:28	7	uint32 last_row
TYPE	6294:2	6294:2	8	uint32
TYPE_NAME	6294:2	6294:2	9	uint32
LEAF_NODE	6294:2	6294:2	10	uint32
NAME	6294:28	6294:28	8	last_row
LEAF_NODE	6294:28	6294:28	9	last_row
LEAF_NODE	6294:36	6294:36	7	,
INIT_DECL_LIST	6294:2	6294:2	7	uint32 first_col , uint32 last_col
VAR_DECL	6294:2	6294:38	8	uint32 first_col
TYPE	6294:2	6294:2	9	uint32
TYPE_NAME	6294:2	6294:2	10	uint32
LEAF_NODE	6294:2	6294:2	11	uint32
NAME	6294:38	6294:38	9	first_col
LEAF_NODE	6294:38	6294:38	10	first_col
LEAF_NODE	6294:47	6294:47	8	,
VAR_DECL	6294:2	6294:49	8	uint32 last_col
TYPE	6294:2	6294:2	9	uint32
TYPE_NAME	6294:2	6294:2	10	uint32
LEAF_NODE	6294:2	6294:2	11	uint32
NAME	6294:49	6294:49	9	last_col
LEAF_NODE	6294:49	6294:49	10	last_col
LEAF_NODE	6294:57	6294:57	4	;
SIMPLE_DECL	6295:2	6295:60	3	uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset , uint32 dst_offset ;
INIT_DECL_LIST	6295:2	6295:2	4	uint32 src_rowsize , uint32 dst_rowsize , uint32 src_offset , uint32 dst_offset
VAR_DECL	6295:2	6295:12	5	uint32 src_rowsize
TYPE	6295:2	6295:2	6	uint32
TYPE_NAME	6295:2	6295:2	7	uint32
LEAF_NODE	6295:2	6295:2	8	uint32
NAME	6295:12	6295:12	6	src_rowsize
LEAF_NODE	6295:12	6295:12	7	src_rowsize
LEAF_NODE	6295:23	6295:23	5	,
INIT_DECL_LIST	6295:2	6295:2	5	uint32 dst_rowsize , uint32 src_offset , uint32 dst_offset
VAR_DECL	6295:2	6295:25	6	uint32 dst_rowsize
TYPE	6295:2	6295:2	7	uint32
TYPE_NAME	6295:2	6295:2	8	uint32
LEAF_NODE	6295:2	6295:2	9	uint32
NAME	6295:25	6295:25	7	dst_rowsize
LEAF_NODE	6295:25	6295:25	8	dst_rowsize
LEAF_NODE	6295:36	6295:36	6	,
INIT_DECL_LIST	6295:2	6295:2	6	uint32 src_offset , uint32 dst_offset
VAR_DECL	6295:2	6295:38	7	uint32 src_offset
TYPE	6295:2	6295:2	8	uint32
TYPE_NAME	6295:2	6295:2	9	uint32
LEAF_NODE	6295:2	6295:2	10	uint32
NAME	6295:38	6295:38	8	src_offset
LEAF_NODE	6295:38	6295:38	9	src_offset
LEAF_NODE	6295:48	6295:48	7	,
VAR_DECL	6295:2	6295:50	7	uint32 dst_offset
TYPE	6295:2	6295:2	8	uint32
TYPE_NAME	6295:2	6295:2	9	uint32
LEAF_NODE	6295:2	6295:2	10	uint32
NAME	6295:50	6295:50	8	dst_offset
LEAF_NODE	6295:50	6295:50	9	dst_offset
LEAF_NODE	6295:60	6295:60	4	;
SIMPLE_DECL	6296:2	6296:64	3	uint32 crop_width , uint32 crop_length , uint32 img_width ;
INIT_DECL_LIST	6296:2	6296:2	4	uint32 crop_width , uint32 crop_length , uint32 img_width
VAR_DECL	6296:2	6296:12	5	uint32 crop_width
TYPE	6296:2	6296:2	6	uint32
TYPE_NAME	6296:2	6296:2	7	uint32
LEAF_NODE	6296:2	6296:2	8	uint32
NAME	6296:12	6296:12	6	crop_width
LEAF_NODE	6296:12	6296:12	7	crop_width
LEAF_NODE	6296:22	6296:22	5	,
INIT_DECL_LIST	6296:2	6296:2	5	uint32 crop_length , uint32 img_width
VAR_DECL	6296:2	6296:24	6	uint32 crop_length
TYPE	6296:2	6296:2	7	uint32
TYPE_NAME	6296:2	6296:2	8	uint32
LEAF_NODE	6296:2	6296:2	9	uint32
NAME	6296:24	6296:24	7	crop_length
LEAF_NODE	6296:24	6296:24	8	crop_length
LEAF_NODE	6296:35	6296:35	6	,
VAR_DECL	6296:2	6296:37	6	uint32 img_width
TYPE	6296:2	6296:2	7	uint32
TYPE_NAME	6296:2	6296:2	8	uint32
LEAF_NODE	6296:2	6296:2	9	uint32
NAME	6296:37	6296:37	7	img_width
LEAF_NODE	6296:37	6296:37	8	img_width
LEAF_NODE	6296:64	6296:64	4	;
SIMPLE_DECL	6297:2	6297:52	3	uint32 prev_length , uint32 prev_width , uint32 composite_width ;
INIT_DECL_LIST	6297:2	6297:2	4	uint32 prev_length , uint32 prev_width , uint32 composite_width
VAR_DECL	6297:2	6297:12	5	uint32 prev_length
TYPE	6297:2	6297:2	6	uint32
TYPE_NAME	6297:2	6297:2	7	uint32
LEAF_NODE	6297:2	6297:2	8	uint32
NAME	6297:12	6297:12	6	prev_length
LEAF_NODE	6297:12	6297:12	7	prev_length
LEAF_NODE	6297:23	6297:23	5	,
INIT_DECL_LIST	6297:2	6297:2	5	uint32 prev_width , uint32 composite_width
VAR_DECL	6297:2	6297:25	6	uint32 prev_width
TYPE	6297:2	6297:2	7	uint32
TYPE_NAME	6297:2	6297:2	8	uint32
LEAF_NODE	6297:2	6297:2	9	uint32
NAME	6297:25	6297:25	7	prev_width
LEAF_NODE	6297:25	6297:25	8	prev_width
LEAF_NODE	6297:35	6297:35	6	,
VAR_DECL	6297:2	6297:37	6	uint32 composite_width
TYPE	6297:2	6297:2	7	uint32
TYPE_NAME	6297:2	6297:2	8	uint32
LEAF_NODE	6297:2	6297:2	9	uint32
NAME	6297:37	6297:37	7	composite_width
LEAF_NODE	6297:37	6297:37	8	composite_width
LEAF_NODE	6297:52	6297:52	4	;
SIMPLE_DECL	6298:2	6298:20	3	uint16 bps , uint16 spp ;
INIT_DECL_LIST	6298:2	6298:2	4	uint16 bps , uint16 spp
VAR_DECL	6298:2	6298:12	5	uint16 bps
TYPE	6298:2	6298:2	6	uint16
TYPE_NAME	6298:2	6298:2	7	uint16
LEAF_NODE	6298:2	6298:2	8	uint16
NAME	6298:12	6298:12	6	bps
LEAF_NODE	6298:12	6298:12	7	bps
LEAF_NODE	6298:15	6298:15	5	,
VAR_DECL	6298:2	6298:17	5	uint16 spp
TYPE	6298:2	6298:2	6	uint16
TYPE_NAME	6298:2	6298:2	7	uint16
LEAF_NODE	6298:2	6298:2	8	uint16
NAME	6298:17	6298:17	6	spp
LEAF_NODE	6298:17	6298:17	7	spp
LEAF_NODE	6298:20	6298:20	4	;
SIMPLE_DECL	6299:2	6299:21	3	uint8 * src , uint8 * dst ;
INIT_DECL_LIST	6299:2	6299:2	4	uint8 * src , uint8 * dst
VAR_DECL	6299:2	6299:12	5	uint8 * src
TYPE	6299:2	6299:11	6	uint8 *
TYPE_NAME	6299:2	6299:2	7	uint8
LEAF_NODE	6299:2	6299:2	8	uint8
POINTER	6299:11	6299:11	7	*
LEAF_NODE	6299:11	6299:11	8	*
NAME	6299:12	6299:12	6	src
LEAF_NODE	6299:12	6299:12	7	src
LEAF_NODE	6299:15	6299:15	5	,
VAR_DECL	6299:2	6299:18	5	uint8 * dst
TYPE	6299:2	6299:17	6	uint8 *
TYPE_NAME	6299:2	6299:2	7	uint8
LEAF_NODE	6299:2	6299:2	8	uint8
POINTER	6299:17	6299:17	7	*
LEAF_NODE	6299:17	6299:17	8	*
NAME	6299:18	6299:18	6	dst
LEAF_NODE	6299:18	6299:18	7	dst
LEAF_NODE	6299:21	6299:21	4	;
SIMPLE_DECL	6300:2	6300:29	3	tsample_t count , tsample_t sample ; sample = 0 ;
INIT_DECL_LIST	6300:2	6300:2	4	tsample_t count , tsample_t sample ; sample = 0
VAR_DECL	6300:2	6300:12	5	tsample_t count
TYPE	6300:2	6300:2	6	tsample_t
TYPE_NAME	6300:2	6300:2	7	tsample_t
LEAF_NODE	6300:2	6300:2	8	tsample_t
NAME	6300:12	6300:12	6	count
LEAF_NODE	6300:12	6300:12	7	count
LEAF_NODE	6300:17	6300:17	5	,
VAR_DECL	6300:2	6300:19	5	tsample_t sample ; sample = 0
TYPE	6300:2	6300:2	6	tsample_t
TYPE_NAME	6300:2	6300:2	7	tsample_t
LEAF_NODE	6300:2	6300:2	8	tsample_t
NAME	6300:19	6300:19	6	sample
LEAF_NODE	6300:19	6300:19	7	sample
LEAF_NODE	0:0	0:0	6	;
INIT	6300:19	6300:19	6	sample = 0
ASSIGN	6300:19	6300:28	7	sample = 0
LVAL	6300:19	6300:19	8	sample
NAME	6300:19	6300:19	9	sample
LEAF_NODE	6300:19	6300:19	10	sample
ASSIGN_OP	6300:26	6300:26	8	=
LEAF_NODE	6300:26	6300:26	9	=
RVAL	6300:28	6300:28	8	0
FIELD	6300:28	6300:28	9	0
LEAF_NODE	6300:28	6300:28	10	0
LEAF_NODE	6300:29	6300:29	4	;
EXPR_STATEMENT	6302:2	6302:26	3	img_width = image -> width ;
EXPR	6302:2	6302:2	4	img_width = image -> width
ASSIGN	6302:2	6302:14	5	img_width = image -> width
LVAL	6302:2	6302:2	6	img_width
FIELD	6302:2	6302:2	7	img_width
LEAF_NODE	6302:2	6302:2	8	img_width
ASSIGN_OP	6302:12	6302:12	6	=
LEAF_NODE	6302:12	6302:12	7	=
RVAL	6302:14	6302:14	6	image -> width
FIELD	6302:14	6302:21	7	image -> width
LEAF_NODE	6302:14	6302:14	8	image
LEAF_NODE	6302:19	6302:19	8	->
LEAF_NODE	6302:21	6302:21	8	width
LEAF_NODE	6302:26	6302:26	4	;
EXPR_STATEMENT	6304:2	6304:18	3	bps = image -> bps ;
EXPR	6304:2	6304:2	4	bps = image -> bps
ASSIGN	6304:2	6304:8	5	bps = image -> bps
LVAL	6304:2	6304:2	6	bps
FIELD	6304:2	6304:2	7	bps
LEAF_NODE	6304:2	6304:2	8	bps
ASSIGN_OP	6304:6	6304:6	6	=
LEAF_NODE	6304:6	6304:6	7	=
RVAL	6304:8	6304:8	6	image -> bps
FIELD	6304:8	6304:15	7	image -> bps
LEAF_NODE	6304:8	6304:8	8	image
LEAF_NODE	6304:13	6304:13	8	->
LEAF_NODE	6304:15	6304:15	8	bps
LEAF_NODE	6304:18	6304:18	4	;
EXPR_STATEMENT	6305:2	6305:18	3	spp = image -> spp ;
EXPR	6305:2	6305:2	4	spp = image -> spp
ASSIGN	6305:2	6305:8	5	spp = image -> spp
LVAL	6305:2	6305:2	6	spp
FIELD	6305:2	6305:2	7	spp
LEAF_NODE	6305:2	6305:2	8	spp
ASSIGN_OP	6305:6	6305:6	6	=
LEAF_NODE	6305:6	6305:6	7	=
RVAL	6305:8	6305:8	6	image -> spp
FIELD	6305:8	6305:15	7	image -> spp
LEAF_NODE	6305:8	6305:8	8	image
LEAF_NODE	6305:13	6305:13	8	->
LEAF_NODE	6305:15	6305:15	8	spp
LEAF_NODE	6305:18	6305:18	4	;
EXPR_STATEMENT	6306:2	6306:13	3	count = spp ;
EXPR	6306:2	6306:2	4	count = spp
ASSIGN	6306:2	6306:10	5	count = spp
LVAL	6306:2	6306:2	6	count
FIELD	6306:2	6306:2	7	count
LEAF_NODE	6306:2	6306:2	8	count
ASSIGN_OP	6306:8	6306:8	6	=
LEAF_NODE	6306:8	6306:8	7	=
RVAL	6306:10	6306:10	6	spp
FIELD	6306:10	6306:10	7	spp
LEAF_NODE	6306:10	6306:10	8	spp
LEAF_NODE	6306:13	6306:13	4	;
EXPR_STATEMENT	6308:2	6308:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	6308:2	6308:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	6308:2	6308:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	6308:2	6308:2	6	bytes_per_sample
FIELD	6308:2	6308:2	7	bytes_per_sample
LEAF_NODE	6308:2	6308:2	8	bytes_per_sample
ASSIGN_OP	6308:19	6308:19	6	=
LEAF_NODE	6308:19	6308:19	7	=
RVAL	6308:21	6308:33	6	( bps + 7 ) / 8
LEAF_NODE	6308:21	6308:21	7	(
FIELD	6308:22	6308:22	7	bps
LEAF_NODE	6308:22	6308:22	8	bps
LEAF_NODE	6308:26	6308:26	7	+
FIELD	6308:28	6308:28	7	7
LEAF_NODE	6308:28	6308:28	8	7
LEAF_NODE	6308:29	6308:29	7	)
LEAF_NODE	6308:31	6308:31	7	/
FIELD	6308:33	6308:33	7	8
LEAF_NODE	6308:33	6308:33	8	8
LEAF_NODE	6308:34	6308:34	4	;
EXPR_STATEMENT	6309:2	6309:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	6309:2	6309:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	6309:2	6309:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	6309:2	6309:2	6	bytes_per_pixel
FIELD	6309:2	6309:2	7	bytes_per_pixel
LEAF_NODE	6309:2	6309:2	8	bytes_per_pixel
ASSIGN_OP	6309:19	6309:19	6	=
LEAF_NODE	6309:19	6309:19	7	=
RVAL	6309:21	6309:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	6309:21	6309:21	7	(
LEAF_NODE	6309:22	6309:22	7	(
FIELD	6309:23	6309:23	7	bps
LEAF_NODE	6309:23	6309:23	8	bps
LEAF_NODE	6309:27	6309:27	7	*
FIELD	6309:29	6309:29	7	spp
LEAF_NODE	6309:29	6309:29	8	spp
LEAF_NODE	6309:32	6309:32	7	)
LEAF_NODE	6309:34	6309:34	7	+
FIELD	6309:36	6309:36	7	7
LEAF_NODE	6309:36	6309:36	8	7
LEAF_NODE	6309:37	6309:37	7	)
LEAF_NODE	6309:39	6309:39	7	/
FIELD	6309:41	6309:41	7	8
LEAF_NODE	6309:41	6309:41	8	8
LEAF_NODE	6309:42	6309:42	4	;
SELECTION	6310:2	6311:4	3	
KEYWORD	6310:2	6310:2	4	if
LEAF_NODE	6310:2	6310:2	5	if
LEAF_NODE	6310:5	6310:5	4	(
CONDITION	6310:6	6310:6	4	( bps % 8 ) == 0
EXPR	6310:6	6310:19	5	( bps % 8 ) == 0
LEAF_NODE	6310:6	6310:6	6	(
FIELD	6310:7	6310:7	6	bps
LEAF_NODE	6310:7	6310:7	7	bps
LEAF_NODE	6310:11	6310:11	6	%
FIELD	6310:13	6310:13	6	8
LEAF_NODE	6310:13	6310:13	7	8
LEAF_NODE	6310:14	6310:14	6	)
EQ_OPERATOR	6310:16	6310:16	6	==
LEAF_NODE	6310:16	6310:16	7	==
FIELD	6310:19	6310:19	6	0
LEAF_NODE	6310:19	6310:19	7	0
LEAF_NODE	6310:20	6310:20	4	)
STATEMENTS	6311:4	6311:4	4	
EXPR_STATEMENT	6311:4	6311:19	5	shift_width = 0 ;
EXPR	6311:4	6311:4	6	shift_width = 0
ASSIGN	6311:4	6311:18	7	shift_width = 0
LVAL	6311:4	6311:4	8	shift_width
FIELD	6311:4	6311:4	9	shift_width
LEAF_NODE	6311:4	6311:4	10	shift_width
ASSIGN_OP	6311:16	6311:16	8	=
LEAF_NODE	6311:16	6311:16	9	=
RVAL	6311:18	6311:18	8	0
FIELD	6311:18	6311:18	9	0
LEAF_NODE	6311:18	6311:18	10	0
LEAF_NODE	6311:19	6311:19	6	;
SELECTION	6312:2	6313:4	3	
KEYWORD	6312:2	6312:2	4	else
LEAF_NODE	6312:2	6312:2	5	else
STATEMENTS	6313:4	6318:4	4	
LEAF_NODE	6313:4	6313:4	5	{
STATEMENTS	6314:4	6316:4	5	
SELECTION	6314:4	6315:6	6	
KEYWORD	6314:4	6314:4	7	if
LEAF_NODE	6314:4	6314:4	8	if
LEAF_NODE	6314:7	6314:7	7	(
CONDITION	6314:8	6314:8	7	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	6314:8	6314:47	8	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	6314:8	6314:8	9	bytes_per_pixel
LEAF_NODE	6314:8	6314:8	10	bytes_per_pixel
REL_OPERATOR	6314:24	6314:24	9	<
LEAF_NODE	6314:24	6314:24	10	<
LEAF_NODE	6314:26	6314:26	9	(
FIELD	6314:27	6314:27	9	bytes_per_sample
LEAF_NODE	6314:27	6314:27	10	bytes_per_sample
LEAF_NODE	6314:44	6314:44	9	+
FIELD	6314:46	6314:46	9	1
LEAF_NODE	6314:46	6314:46	10	1
LEAF_NODE	6314:47	6314:47	9	)
LEAF_NODE	6314:48	6314:48	7	)
STATEMENTS	6315:6	6315:6	7	
EXPR_STATEMENT	6315:6	6315:35	8	shift_width = bytes_per_pixel ;
EXPR	6315:6	6315:6	9	shift_width = bytes_per_pixel
ASSIGN	6315:6	6315:20	10	shift_width = bytes_per_pixel
LVAL	6315:6	6315:6	11	shift_width
FIELD	6315:6	6315:6	12	shift_width
LEAF_NODE	6315:6	6315:6	13	shift_width
ASSIGN_OP	6315:18	6315:18	11	=
LEAF_NODE	6315:18	6315:18	12	=
RVAL	6315:20	6315:20	11	bytes_per_pixel
FIELD	6315:20	6315:20	12	bytes_per_pixel
LEAF_NODE	6315:20	6315:20	13	bytes_per_pixel
LEAF_NODE	6315:35	6315:35	9	;
SELECTION	6316:4	6317:6	6	
KEYWORD	6316:4	6316:4	7	else
LEAF_NODE	6316:4	6316:4	8	else
STATEMENTS	6317:6	6317:6	7	
EXPR_STATEMENT	6317:6	6317:40	8	shift_width = bytes_per_sample + 1 ;
EXPR	6317:6	6317:6	9	shift_width = bytes_per_sample + 1
ASSIGN	6317:6	6317:20	10	shift_width = bytes_per_sample + 1
LVAL	6317:6	6317:6	11	shift_width
FIELD	6317:6	6317:6	12	shift_width
LEAF_NODE	6317:6	6317:6	13	shift_width
ASSIGN_OP	6317:18	6317:18	11	=
LEAF_NODE	6317:18	6317:18	12	=
RVAL	6317:20	6317:39	11	bytes_per_sample + 1
FIELD	6317:20	6317:20	12	bytes_per_sample
LEAF_NODE	6317:20	6317:20	13	bytes_per_sample
LEAF_NODE	6317:37	6317:37	12	+
FIELD	6317:39	6317:39	12	1
LEAF_NODE	6317:39	6317:39	13	1
LEAF_NODE	6317:40	6317:40	9	;
LEAF_NODE	6318:4	6318:4	5	}
EXPR_STATEMENT	6319:2	6319:17	3	src = read_buff ;
EXPR	6319:2	6319:2	4	src = read_buff
ASSIGN	6319:2	6319:8	5	src = read_buff
LVAL	6319:2	6319:2	6	src
FIELD	6319:2	6319:2	7	src
LEAF_NODE	6319:2	6319:2	8	src
ASSIGN_OP	6319:6	6319:6	6	=
LEAF_NODE	6319:6	6319:6	7	=
RVAL	6319:8	6319:8	6	read_buff
FIELD	6319:8	6319:8	7	read_buff
LEAF_NODE	6319:8	6319:8	8	read_buff
LEAF_NODE	6319:17	6319:17	4	;
EXPR_STATEMENT	6320:2	6320:17	3	dst = crop_buff ;
EXPR	6320:2	6320:2	4	dst = crop_buff
ASSIGN	6320:2	6320:8	5	dst = crop_buff
LVAL	6320:2	6320:2	6	dst
FIELD	6320:2	6320:2	7	dst
LEAF_NODE	6320:2	6320:2	8	dst
ASSIGN_OP	6320:6	6320:6	6	=
LEAF_NODE	6320:6	6320:6	7	=
RVAL	6320:8	6320:8	6	crop_buff
FIELD	6320:8	6320:8	7	crop_buff
LEAF_NODE	6320:8	6320:8	8	crop_buff
LEAF_NODE	6320:17	6320:17	4	;
EXPR_STATEMENT	6323:2	6323:30	3	prev_width = prev_length = 0 ;
EXPR	6323:2	6323:2	4	prev_width = prev_length = 0
ASSIGN	6323:2	6323:15	5	prev_width = prev_length = 0
LVAL	6323:2	6323:2	6	prev_width
FIELD	6323:2	6323:2	7	prev_width
LEAF_NODE	6323:2	6323:2	8	prev_width
ASSIGN_OP	6323:13	6323:13	6	=
LEAF_NODE	6323:13	6323:13	7	=
RVAL	6323:15	6323:15	6	prev_length = 0
ASSIGN	6323:15	6323:29	7	prev_length = 0
LVAL	6323:15	6323:15	8	prev_length
FIELD	6323:15	6323:15	9	prev_length
LEAF_NODE	6323:15	6323:15	10	prev_length
ASSIGN_OP	6323:27	6323:27	8	=
LEAF_NODE	6323:27	6323:27	9	=
RVAL	6323:29	6323:29	8	0
FIELD	6323:29	6323:29	9	0
LEAF_NODE	6323:29	6323:29	10	0
LEAF_NODE	6323:30	6323:30	4	;
EXPR_STATEMENT	6324:2	6324:40	3	prev_trailing_bits = trailing_bits = 0 ;
EXPR	6324:2	6324:2	4	prev_trailing_bits = trailing_bits = 0
ASSIGN	6324:2	6324:23	5	prev_trailing_bits = trailing_bits = 0
LVAL	6324:2	6324:2	6	prev_trailing_bits
FIELD	6324:2	6324:2	7	prev_trailing_bits
LEAF_NODE	6324:2	6324:2	8	prev_trailing_bits
ASSIGN_OP	6324:21	6324:21	6	=
LEAF_NODE	6324:21	6324:21	7	=
RVAL	6324:23	6324:23	6	trailing_bits = 0
ASSIGN	6324:23	6324:39	7	trailing_bits = 0
LVAL	6324:23	6324:23	8	trailing_bits
FIELD	6324:23	6324:23	9	trailing_bits
LEAF_NODE	6324:23	6324:23	10	trailing_bits
ASSIGN_OP	6324:37	6324:37	8	=
LEAF_NODE	6324:37	6324:37	9	=
RVAL	6324:39	6324:39	8	0
FIELD	6324:39	6324:39	9	0
LEAF_NODE	6324:39	6324:39	10	0
LEAF_NODE	6324:40	6324:40	4	;
EXPR_STATEMENT	6325:2	6325:40	3	composite_width = crop -> combined_width ;
EXPR	6325:2	6325:2	4	composite_width = crop -> combined_width
ASSIGN	6325:2	6325:20	5	composite_width = crop -> combined_width
LVAL	6325:2	6325:2	6	composite_width
FIELD	6325:2	6325:2	7	composite_width
LEAF_NODE	6325:2	6325:2	8	composite_width
ASSIGN_OP	6325:18	6325:18	6	=
LEAF_NODE	6325:18	6325:18	7	=
RVAL	6325:20	6325:20	6	crop -> combined_width
FIELD	6325:20	6325:26	7	crop -> combined_width
LEAF_NODE	6325:20	6325:20	8	crop
LEAF_NODE	6325:24	6325:24	8	->
LEAF_NODE	6325:26	6325:26	8	combined_width
LEAF_NODE	6325:40	6325:40	4	;
EXPR_STATEMENT	6326:2	6326:26	3	crop -> combined_width = 0 ;
EXPR	6326:2	6326:2	4	crop -> combined_width = 0
ASSIGN	6326:2	6326:25	5	crop -> combined_width = 0
LVAL	6326:2	6326:2	6	crop -> combined_width
FIELD	6326:2	6326:8	7	crop -> combined_width
LEAF_NODE	6326:2	6326:2	8	crop
LEAF_NODE	6326:6	6326:6	8	->
LEAF_NODE	6326:8	6326:8	8	combined_width
ASSIGN_OP	6326:23	6326:23	6	=
LEAF_NODE	6326:23	6326:23	7	=
RVAL	6326:25	6326:25	6	0
FIELD	6326:25	6326:25	7	0
LEAF_NODE	6326:25	6326:25	8	0
LEAF_NODE	6326:26	6326:26	4	;
EXPR_STATEMENT	6327:2	6327:27	3	crop -> combined_length = 0 ;
EXPR	6327:2	6327:2	4	crop -> combined_length = 0
ASSIGN	6327:2	6327:26	5	crop -> combined_length = 0
LVAL	6327:2	6327:2	6	crop -> combined_length
FIELD	6327:2	6327:8	7	crop -> combined_length
LEAF_NODE	6327:2	6327:2	8	crop
LEAF_NODE	6327:6	6327:6	8	->
LEAF_NODE	6327:8	6327:8	8	combined_length
ASSIGN_OP	6327:24	6327:24	6	=
LEAF_NODE	6327:24	6327:24	7	=
RVAL	6327:26	6327:26	6	0
FIELD	6327:26	6327:26	7	0
LEAF_NODE	6327:26	6327:26	8	0
LEAF_NODE	6327:27	6327:27	4	;
ITERATION	6329:2	6330:4	3	
KEYWORD	6329:2	6329:2	4	for
LEAF_NODE	6329:2	6329:2	5	for
LEAF_NODE	6329:6	6329:6	4	(
FOR_INIT	6329:7	6329:12	4	i = 0 ;
EXPR	6329:7	6329:7	5	i = 0
ASSIGN	6329:7	6329:11	6	i = 0
LVAL	6329:7	6329:7	7	i
FIELD	6329:7	6329:7	8	i
LEAF_NODE	6329:7	6329:7	9	i
ASSIGN_OP	6329:9	6329:9	7	=
LEAF_NODE	6329:9	6329:9	8	=
RVAL	6329:11	6329:11	7	0
FIELD	6329:11	6329:11	8	0
LEAF_NODE	6329:11	6329:11	9	0
LEAF_NODE	6329:12	6329:12	5	;
CONDITION	6329:14	6329:14	4	i < crop -> selections
EXPR	6329:14	6329:18	5	i < crop -> selections
FIELD	6329:14	6329:14	6	i
LEAF_NODE	6329:14	6329:14	7	i
REL_OPERATOR	6329:16	6329:16	6	<
LEAF_NODE	6329:16	6329:16	7	<
FIELD	6329:18	6329:24	6	crop -> selections
LEAF_NODE	6329:18	6329:18	7	crop
LEAF_NODE	6329:22	6329:22	7	->
LEAF_NODE	6329:24	6329:24	7	selections
LEAF_NODE	6329:34	6329:34	4	;
FOR_EXPR	6329:36	6329:36	4	i ++
EXPR	6329:36	6329:36	5	i ++
FIELD	6329:36	6329:37	6	i ++
LEAF_NODE	6329:36	6329:36	7	i
LEAF_NODE	6329:37	6329:37	7	++
LEAF_NODE	6329:39	6329:39	4	)
STATEMENTS	6330:4	6518:4	4	
LEAF_NODE	6330:4	6330:4	5	{
STATEMENTS	6332:4	6348:4	5	
EXPR_STATEMENT	6332:4	6332:38	6	first_row = crop -> regionlist [ i ] . y1 ;
EXPR	6332:4	6332:4	7	first_row = crop -> regionlist [ i ] . y1
ASSIGN	6332:4	6332:16	8	first_row = crop -> regionlist [ i ] . y1
LVAL	6332:4	6332:4	9	first_row
FIELD	6332:4	6332:4	10	first_row
LEAF_NODE	6332:4	6332:4	11	first_row
ASSIGN_OP	6332:14	6332:14	9	=
LEAF_NODE	6332:14	6332:14	10	=
RVAL	6332:16	6332:16	9	crop -> regionlist [ i ] . y1
FIELD	6332:16	6332:36	10	crop -> regionlist [ i ] . y1
LEAF_NODE	6332:16	6332:16	11	crop
LEAF_NODE	6332:20	6332:20	11	->
LEAF_NODE	6332:22	6332:22	11	regionlist
LEAF_NODE	6332:32	6332:32	11	[
EXPR	6332:33	6332:33	11	i
FIELD	6332:33	6332:33	12	i
LEAF_NODE	6332:33	6332:33	13	i
LEAF_NODE	6332:34	6332:34	11	]
LEAF_NODE	6332:35	6332:35	11	.
LEAF_NODE	6332:36	6332:36	11	y1
LEAF_NODE	6332:38	6332:38	7	;
EXPR_STATEMENT	6333:4	6333:38	6	last_row = crop -> regionlist [ i ] . y2 ;
EXPR	6333:4	6333:4	7	last_row = crop -> regionlist [ i ] . y2
ASSIGN	6333:4	6333:16	8	last_row = crop -> regionlist [ i ] . y2
LVAL	6333:4	6333:4	9	last_row
FIELD	6333:4	6333:4	10	last_row
LEAF_NODE	6333:4	6333:4	11	last_row
ASSIGN_OP	6333:14	6333:14	9	=
LEAF_NODE	6333:14	6333:14	10	=
RVAL	6333:16	6333:16	9	crop -> regionlist [ i ] . y2
FIELD	6333:16	6333:36	10	crop -> regionlist [ i ] . y2
LEAF_NODE	6333:16	6333:16	11	crop
LEAF_NODE	6333:20	6333:20	11	->
LEAF_NODE	6333:22	6333:22	11	regionlist
LEAF_NODE	6333:32	6333:32	11	[
EXPR	6333:33	6333:33	11	i
FIELD	6333:33	6333:33	12	i
LEAF_NODE	6333:33	6333:33	13	i
LEAF_NODE	6333:34	6333:34	11	]
LEAF_NODE	6333:35	6333:35	11	.
LEAF_NODE	6333:36	6333:36	11	y2
LEAF_NODE	6333:38	6333:38	7	;
EXPR_STATEMENT	6334:4	6334:38	6	first_col = crop -> regionlist [ i ] . x1 ;
EXPR	6334:4	6334:4	7	first_col = crop -> regionlist [ i ] . x1
ASSIGN	6334:4	6334:16	8	first_col = crop -> regionlist [ i ] . x1
LVAL	6334:4	6334:4	9	first_col
FIELD	6334:4	6334:4	10	first_col
LEAF_NODE	6334:4	6334:4	11	first_col
ASSIGN_OP	6334:14	6334:14	9	=
LEAF_NODE	6334:14	6334:14	10	=
RVAL	6334:16	6334:16	9	crop -> regionlist [ i ] . x1
FIELD	6334:16	6334:36	10	crop -> regionlist [ i ] . x1
LEAF_NODE	6334:16	6334:16	11	crop
LEAF_NODE	6334:20	6334:20	11	->
LEAF_NODE	6334:22	6334:22	11	regionlist
LEAF_NODE	6334:32	6334:32	11	[
EXPR	6334:33	6334:33	11	i
FIELD	6334:33	6334:33	12	i
LEAF_NODE	6334:33	6334:33	13	i
LEAF_NODE	6334:34	6334:34	11	]
LEAF_NODE	6334:35	6334:35	11	.
LEAF_NODE	6334:36	6334:36	11	x1
LEAF_NODE	6334:38	6334:38	7	;
EXPR_STATEMENT	6335:4	6335:38	6	last_col = crop -> regionlist [ i ] . x2 ;
EXPR	6335:4	6335:4	7	last_col = crop -> regionlist [ i ] . x2
ASSIGN	6335:4	6335:16	8	last_col = crop -> regionlist [ i ] . x2
LVAL	6335:4	6335:4	9	last_col
FIELD	6335:4	6335:4	10	last_col
LEAF_NODE	6335:4	6335:4	11	last_col
ASSIGN_OP	6335:14	6335:14	9	=
LEAF_NODE	6335:14	6335:14	10	=
RVAL	6335:16	6335:16	9	crop -> regionlist [ i ] . x2
FIELD	6335:16	6335:36	10	crop -> regionlist [ i ] . x2
LEAF_NODE	6335:16	6335:16	11	crop
LEAF_NODE	6335:20	6335:20	11	->
LEAF_NODE	6335:22	6335:22	11	regionlist
LEAF_NODE	6335:32	6335:32	11	[
EXPR	6335:33	6335:33	11	i
FIELD	6335:33	6335:33	12	i
LEAF_NODE	6335:33	6335:33	13	i
LEAF_NODE	6335:34	6335:34	11	]
LEAF_NODE	6335:35	6335:35	11	.
LEAF_NODE	6335:36	6335:36	11	x2
LEAF_NODE	6335:38	6335:38	7	;
EXPR_STATEMENT	6337:4	6337:41	6	crop_width = last_col - first_col + 1 ;
EXPR	6337:4	6337:4	7	crop_width = last_col - first_col + 1
ASSIGN	6337:4	6337:17	8	crop_width = last_col - first_col + 1
LVAL	6337:4	6337:4	9	crop_width
FIELD	6337:4	6337:4	10	crop_width
LEAF_NODE	6337:4	6337:4	11	crop_width
ASSIGN_OP	6337:15	6337:15	9	=
LEAF_NODE	6337:15	6337:15	10	=
RVAL	6337:17	6337:40	9	last_col - first_col + 1
FIELD	6337:17	6337:17	10	last_col
LEAF_NODE	6337:17	6337:17	11	last_col
LEAF_NODE	6337:26	6337:26	10	-
FIELD	6337:28	6337:28	10	first_col
LEAF_NODE	6337:28	6337:28	11	first_col
LEAF_NODE	6337:38	6337:38	10	+
FIELD	6337:40	6337:40	10	1
LEAF_NODE	6337:40	6337:40	11	1
LEAF_NODE	6337:41	6337:41	7	;
EXPR_STATEMENT	6338:4	6338:42	6	crop_length = last_row - first_row + 1 ;
EXPR	6338:4	6338:4	7	crop_length = last_row - first_row + 1
ASSIGN	6338:4	6338:18	8	crop_length = last_row - first_row + 1
LVAL	6338:4	6338:4	9	crop_length
FIELD	6338:4	6338:4	10	crop_length
LEAF_NODE	6338:4	6338:4	11	crop_length
ASSIGN_OP	6338:16	6338:16	9	=
LEAF_NODE	6338:16	6338:16	10	=
RVAL	6338:18	6338:41	9	last_row - first_row + 1
FIELD	6338:18	6338:18	10	last_row
LEAF_NODE	6338:18	6338:18	11	last_row
LEAF_NODE	6338:27	6338:27	10	-
FIELD	6338:29	6338:29	10	first_row
LEAF_NODE	6338:29	6338:29	11	first_row
LEAF_NODE	6338:39	6338:39	10	+
FIELD	6338:41	6338:41	10	1
LEAF_NODE	6338:41	6338:41	11	1
LEAF_NODE	6338:42	6338:42	7	;
EXPR_STATEMENT	6341:4	6341:42	6	crop -> regionlist [ i ] . width = crop_width ;
EXPR	6341:4	6341:4	7	crop -> regionlist [ i ] . width = crop_width
ASSIGN	6341:4	6341:32	8	crop -> regionlist [ i ] . width = crop_width
LVAL	6341:4	6341:4	9	crop -> regionlist [ i ] . width
FIELD	6341:4	6341:24	10	crop -> regionlist [ i ] . width
LEAF_NODE	6341:4	6341:4	11	crop
LEAF_NODE	6341:8	6341:8	11	->
LEAF_NODE	6341:10	6341:10	11	regionlist
LEAF_NODE	6341:20	6341:20	11	[
EXPR	6341:21	6341:21	11	i
FIELD	6341:21	6341:21	12	i
LEAF_NODE	6341:21	6341:21	13	i
LEAF_NODE	6341:22	6341:22	11	]
LEAF_NODE	6341:23	6341:23	11	.
LEAF_NODE	6341:24	6341:24	11	width
ASSIGN_OP	6341:30	6341:30	9	=
LEAF_NODE	6341:30	6341:30	10	=
RVAL	6341:32	6341:32	9	crop_width
FIELD	6341:32	6341:32	10	crop_width
LEAF_NODE	6341:32	6341:32	11	crop_width
LEAF_NODE	6341:42	6341:42	7	;
EXPR_STATEMENT	6342:4	6342:44	6	crop -> regionlist [ i ] . length = crop_length ;
EXPR	6342:4	6342:4	7	crop -> regionlist [ i ] . length = crop_length
ASSIGN	6342:4	6342:33	8	crop -> regionlist [ i ] . length = crop_length
LVAL	6342:4	6342:4	9	crop -> regionlist [ i ] . length
FIELD	6342:4	6342:24	10	crop -> regionlist [ i ] . length
LEAF_NODE	6342:4	6342:4	11	crop
LEAF_NODE	6342:8	6342:8	11	->
LEAF_NODE	6342:10	6342:10	11	regionlist
LEAF_NODE	6342:20	6342:20	11	[
EXPR	6342:21	6342:21	11	i
FIELD	6342:21	6342:21	12	i
LEAF_NODE	6342:21	6342:21	13	i
LEAF_NODE	6342:22	6342:22	11	]
LEAF_NODE	6342:23	6342:23	11	.
LEAF_NODE	6342:24	6342:24	11	length
ASSIGN_OP	6342:31	6342:31	9	=
LEAF_NODE	6342:31	6342:31	10	=
RVAL	6342:33	6342:33	9	crop_length
FIELD	6342:33	6342:33	10	crop_length
LEAF_NODE	6342:33	6342:33	11	crop_length
LEAF_NODE	6342:44	6342:44	7	;
EXPR_STATEMENT	6343:4	6343:43	6	crop -> regionlist [ i ] . buffptr = crop_buff ;
EXPR	6343:4	6343:4	7	crop -> regionlist [ i ] . buffptr = crop_buff
ASSIGN	6343:4	6343:34	8	crop -> regionlist [ i ] . buffptr = crop_buff
LVAL	6343:4	6343:4	9	crop -> regionlist [ i ] . buffptr
FIELD	6343:4	6343:24	10	crop -> regionlist [ i ] . buffptr
LEAF_NODE	6343:4	6343:4	11	crop
LEAF_NODE	6343:8	6343:8	11	->
LEAF_NODE	6343:10	6343:10	11	regionlist
LEAF_NODE	6343:20	6343:20	11	[
EXPR	6343:21	6343:21	11	i
FIELD	6343:21	6343:21	12	i
LEAF_NODE	6343:21	6343:21	13	i
LEAF_NODE	6343:22	6343:22	11	]
LEAF_NODE	6343:23	6343:23	11	.
LEAF_NODE	6343:24	6343:24	11	buffptr
ASSIGN_OP	6343:32	6343:32	9	=
LEAF_NODE	6343:32	6343:32	10	=
RVAL	6343:34	6343:34	9	crop_buff
FIELD	6343:34	6343:34	10	crop_buff
LEAF_NODE	6343:34	6343:34	11	crop_buff
LEAF_NODE	6343:43	6343:43	7	;
LEAF_NODE	6345:4	6345:4	6	src_rowsize
LEAF_NODE	6345:16	6345:16	6	=
LEAF_NODE	6345:18	6345:18	6	(
LEAF_NODE	6345:19	6345:19	6	(
LEAF_NODE	6345:20	6345:20	6	img_width
LEAF_NODE	6345:30	6345:30	6	*
LEAF_NODE	6345:32	6345:32	6	bps
LEAF_NODE	6345:36	6345:36	6	*
LEAF_NODE	6345:38	6345:38	6	spp
LEAF_NODE	6345:41	6345:41	6	)
LEAF_NODE	6345:43	6345:43	6	+
LEAF_NODE	6345:45	6345:45	6	7
LEAF_NODE	6345:46	6345:46	6	)
LEAF_NODE	6345:48	6345:48	6	/
EXPR_STATEMENT	6345:50	6345:51	6	8 ;
EXPR	6345:50	6345:50	7	8
FIELD	6345:50	6345:50	8	8
LEAF_NODE	6345:50	6345:50	9	8
LEAF_NODE	6345:51	6345:51	7	;
LEAF_NODE	6346:4	6346:4	6	dst_rowsize
LEAF_NODE	6346:16	6346:16	6	=
LEAF_NODE	6346:18	6346:18	6	(
LEAF_NODE	6346:19	6346:19	6	(
LEAF_NODE	6346:20	6346:20	6	(
LEAF_NODE	6346:21	6346:21	6	crop_width
LEAF_NODE	6346:32	6346:32	6	*
LEAF_NODE	6346:34	6346:34	6	bps
LEAF_NODE	6346:38	6346:38	6	*
LEAF_NODE	6346:40	6346:40	6	count
LEAF_NODE	6346:45	6346:45	6	)
LEAF_NODE	6346:47	6346:47	6	+
LEAF_NODE	6346:49	6346:49	6	7
LEAF_NODE	6346:50	6346:50	6	)
LEAF_NODE	6346:52	6346:52	6	/
LEAF_NODE	6346:54	6346:54	6	8
LEAF_NODE	6346:55	6346:55	6	)
LEAF_NODE	6346:56	6346:56	6	;
SELECTION	6348:4	6349:6	6	
KEYWORD	6348:4	6348:4	7	switch
LEAF_NODE	6348:4	6348:4	8	switch
LEAF_NODE	6348:11	6348:11	7	(
CONDITION	6348:12	6348:12	7	crop -> edge_ref
EXPR	6348:12	6348:12	8	crop -> edge_ref
FIELD	6348:12	6348:18	9	crop -> edge_ref
LEAF_NODE	6348:12	6348:12	10	crop
LEAF_NODE	6348:16	6348:16	10	->
LEAF_NODE	6348:18	6348:18	10	edge_ref
LEAF_NODE	6348:26	6348:26	7	)
STATEMENTS	6349:6	6517:6	7	
LEAF_NODE	6349:6	6349:6	8	{
STATEMENTS	6350:6	6516:4	8	
LABEL	6350:6	6350:13	9	default :
LEAF_NODE	6350:6	6350:6	10	default
LEAF_NODE	6350:13	6350:13	10	:
LABEL	6351:6	6351:19	9	case EDGE_TOP :
LEAF_NODE	6351:6	6351:6	10	case
LEAF_NODE	6351:11	6351:11	10	EDGE_TOP
LEAF_NODE	6351:19	6351:19	10	:
LABEL	6352:6	6352:22	9	case EDGE_BOTTOM :
LEAF_NODE	6352:6	6352:6	10	case
LEAF_NODE	6352:11	6352:11	10	EDGE_BOTTOM
LEAF_NODE	6352:22	6352:22	10	:
SELECTION	6353:4	6354:13	9	
KEYWORD	6353:4	6353:4	10	if
LEAF_NODE	6353:4	6353:4	11	if
LEAF_NODE	6353:7	6353:7	10	(
CONDITION	6353:8	6353:8	10	( i > 0 ) && ( crop_width != crop -> regionlist [ i - 1 ] . width )
EXPR	6353:8	6353:8	11	( i > 0 ) && ( crop_width != crop -> regionlist [ i - 1 ] . width )
AND	6353:8	6353:19	12	( i > 0 ) && ( crop_width != crop -> regionlist [ i - 1 ] . width )
EXPR	6353:8	6353:14	13	( i > 0 )
LEAF_NODE	6353:8	6353:8	14	(
FIELD	6353:9	6353:9	14	i
LEAF_NODE	6353:9	6353:9	15	i
REL_OPERATOR	6353:11	6353:11	14	>
LEAF_NODE	6353:11	6353:11	15	>
FIELD	6353:13	6353:13	14	0
LEAF_NODE	6353:13	6353:13	15	0
LEAF_NODE	6353:14	6353:14	14	)
LEAF_NODE	6353:16	6353:16	13	&&
EXPR	6353:19	6353:63	13	( crop_width != crop -> regionlist [ i - 1 ] . width )
LEAF_NODE	6353:19	6353:19	14	(
FIELD	6353:20	6353:20	14	crop_width
LEAF_NODE	6353:20	6353:20	15	crop_width
EQ_OPERATOR	6353:31	6353:31	14	!=
LEAF_NODE	6353:31	6353:31	15	!=
FIELD	6353:34	6353:58	14	crop -> regionlist [ i - 1 ] . width
LEAF_NODE	6353:34	6353:34	15	crop
LEAF_NODE	6353:38	6353:38	15	->
LEAF_NODE	6353:40	6353:40	15	regionlist
LEAF_NODE	6353:50	6353:50	15	[
EXPR	6353:51	6353:55	15	i - 1
FIELD	6353:51	6353:51	16	i
LEAF_NODE	6353:51	6353:51	17	i
LEAF_NODE	6353:53	6353:53	16	-
FIELD	6353:55	6353:55	16	1
LEAF_NODE	6353:55	6353:55	17	1
LEAF_NODE	6353:56	6353:56	15	]
LEAF_NODE	6353:57	6353:57	15	.
LEAF_NODE	6353:58	6353:58	15	width
LEAF_NODE	6353:63	6353:63	14	)
LEAF_NODE	6353:64	6353:64	10	)
STATEMENTS	6354:13	6358:13	10	
LEAF_NODE	6354:13	6354:13	11	{
STATEMENTS	6355:6	6357:6	11	
EXPR_STATEMENT	6355:6	6356:90	12	TIFFError ( "extractCompositeRegions" , "Only equal width regions can be combined for -E top or bottom" ) ;
EXPR	6355:6	6355:6	13	TIFFError ( "extractCompositeRegions" , "Only equal width regions can be combined for -E top or bottom" )
FUNCTION_CALL	6355:6	6356:89	14	TIFFError ( "extractCompositeRegions" , "Only equal width regions can be combined for -E top or bottom" )
CALLEE	6355:6	6355:6	15	TIFFError
LEAF_NODE	6355:6	6355:6	16	TIFFError
LEAF_NODE	6355:16	6355:16	15	(
ARGUMENT	6355:17	6355:17	15	"extractCompositeRegions"
FIELD	6355:17	6355:17	16	"extractCompositeRegions"
LEAF_NODE	6355:17	6355:17	17	"extractCompositeRegions"
LEAF_NODE	6355:42	6355:42	15	,
ARGUMENT	6356:26	6356:26	15	"Only equal width regions can be combined for -E top or bottom"
FIELD	6356:26	6356:26	16	"Only equal width regions can be combined for -E top or bottom"
LEAF_NODE	6356:26	6356:26	17	"Only equal width regions can be combined for -E top or bottom"
LEAF_NODE	6356:89	6356:89	15	)
LEAF_NODE	6356:90	6356:90	13	;
JUMP_STATEMENT	6357:6	6357:16	12	return ( 1 ) ;
KEYWORD	6357:6	6357:6	13	return
LEAF_NODE	6357:6	6357:6	14	return
DESTINATION	6357:13	6357:13	13	( 1 )
EXPR	6357:13	6357:15	14	( 1 )
LEAF_NODE	6357:13	6357:13	15	(
FIELD	6357:14	6357:14	15	1
LEAF_NODE	6357:14	6357:14	16	1
LEAF_NODE	6357:15	6357:15	15	)
LEAF_NODE	6357:16	6357:16	13	;
LEAF_NODE	6358:13	6358:13	11	}
EXPR_STATEMENT	6360:11	6360:44	9	crop -> combined_width = crop_width ;
EXPR	6360:11	6360:11	10	crop -> combined_width = crop_width
ASSIGN	6360:11	6360:34	11	crop -> combined_width = crop_width
LVAL	6360:11	6360:11	12	crop -> combined_width
FIELD	6360:11	6360:17	13	crop -> combined_width
LEAF_NODE	6360:11	6360:11	14	crop
LEAF_NODE	6360:15	6360:15	14	->
LEAF_NODE	6360:17	6360:17	14	combined_width
ASSIGN_OP	6360:32	6360:32	12	=
LEAF_NODE	6360:32	6360:32	13	=
RVAL	6360:34	6360:34	12	crop_width
FIELD	6360:34	6360:34	13	crop_width
LEAF_NODE	6360:34	6360:34	14	crop_width
LEAF_NODE	6360:44	6360:44	10	;
EXPR_STATEMENT	6361:11	6361:47	9	crop -> combined_length += crop_length ;
EXPR	6361:11	6361:11	10	crop -> combined_length += crop_length
ASSIGN	6361:11	6361:36	11	crop -> combined_length += crop_length
LVAL	6361:11	6361:11	12	crop -> combined_length
FIELD	6361:11	6361:17	13	crop -> combined_length
LEAF_NODE	6361:11	6361:11	14	crop
LEAF_NODE	6361:15	6361:15	14	->
LEAF_NODE	6361:17	6361:17	14	combined_length
ASSIGN_OP	6361:33	6361:33	12	+=
LEAF_NODE	6361:33	6361:33	13	+=
RVAL	6361:36	6361:36	12	crop_length
FIELD	6361:36	6361:36	13	crop_length
LEAF_NODE	6361:36	6361:36	14	crop_length
LEAF_NODE	6361:47	6361:47	10	;
ITERATION	6363:11	6364:13	9	
KEYWORD	6363:11	6363:11	10	for
LEAF_NODE	6363:11	6363:11	11	for
LEAF_NODE	6363:15	6363:15	10	(
FOR_INIT	6363:16	6363:31	10	row = first_row ;
EXPR	6363:16	6363:16	11	row = first_row
ASSIGN	6363:16	6363:22	12	row = first_row
LVAL	6363:16	6363:16	13	row
FIELD	6363:16	6363:16	14	row
LEAF_NODE	6363:16	6363:16	15	row
ASSIGN_OP	6363:20	6363:20	13	=
LEAF_NODE	6363:20	6363:20	14	=
RVAL	6363:22	6363:22	13	first_row
FIELD	6363:22	6363:22	14	first_row
LEAF_NODE	6363:22	6363:22	15	first_row
LEAF_NODE	6363:31	6363:31	11	;
CONDITION	6363:33	6363:33	10	row <= last_row
EXPR	6363:33	6363:40	11	row <= last_row
FIELD	6363:33	6363:33	12	row
LEAF_NODE	6363:33	6363:33	13	row
REL_OPERATOR	6363:37	6363:37	12	<=
LEAF_NODE	6363:37	6363:37	13	<=
FIELD	6363:40	6363:40	12	last_row
LEAF_NODE	6363:40	6363:40	13	last_row
LEAF_NODE	6363:48	6363:48	10	;
FOR_EXPR	6363:50	6363:50	10	row ++
EXPR	6363:50	6363:50	11	row ++
FIELD	6363:50	6363:53	12	row ++
LEAF_NODE	6363:50	6363:50	13	row
LEAF_NODE	6363:53	6363:53	13	++
LEAF_NODE	6363:55	6363:55	10	)
STATEMENTS	6364:13	6429:13	10	
LEAF_NODE	6364:13	6364:13	11	{
STATEMENTS	6365:6	6369:13	11	
EXPR_STATEMENT	6365:6	6365:36	12	src_offset = row * src_rowsize ;
EXPR	6365:6	6365:6	13	src_offset = row * src_rowsize
ASSIGN	6365:6	6365:19	14	src_offset = row * src_rowsize
LVAL	6365:6	6365:6	15	src_offset
FIELD	6365:6	6365:6	16	src_offset
LEAF_NODE	6365:6	6365:6	17	src_offset
ASSIGN_OP	6365:17	6365:17	15	=
LEAF_NODE	6365:17	6365:17	16	=
RVAL	6365:19	6365:25	15	row * src_rowsize
FIELD	6365:19	6365:19	16	row
LEAF_NODE	6365:19	6365:19	17	row
LEAF_NODE	6365:23	6365:23	16	*
FIELD	6365:25	6365:25	16	src_rowsize
LEAF_NODE	6365:25	6365:25	17	src_rowsize
LEAF_NODE	6365:36	6365:36	13	;
EXPR_STATEMENT	6366:6	6366:50	12	dst_offset = ( row - first_row ) * dst_rowsize ;
EXPR	6366:6	6366:6	13	dst_offset = ( row - first_row ) * dst_rowsize
ASSIGN	6366:6	6366:19	14	dst_offset = ( row - first_row ) * dst_rowsize
LVAL	6366:6	6366:6	15	dst_offset
FIELD	6366:6	6366:6	16	dst_offset
LEAF_NODE	6366:6	6366:6	17	dst_offset
ASSIGN_OP	6366:17	6366:17	15	=
LEAF_NODE	6366:17	6366:17	16	=
RVAL	6366:19	6366:39	15	( row - first_row ) * dst_rowsize
LEAF_NODE	6366:19	6366:19	16	(
FIELD	6366:20	6366:20	16	row
LEAF_NODE	6366:20	6366:20	17	row
LEAF_NODE	6366:24	6366:24	16	-
FIELD	6366:26	6366:26	16	first_row
LEAF_NODE	6366:26	6366:26	17	first_row
LEAF_NODE	6366:35	6366:35	16	)
LEAF_NODE	6366:37	6366:37	16	*
FIELD	6366:39	6366:39	16	dst_rowsize
LEAF_NODE	6366:39	6366:39	17	dst_rowsize
LEAF_NODE	6366:50	6366:50	13	;
EXPR_STATEMENT	6367:13	6367:41	12	src = read_buff + src_offset ;
EXPR	6367:13	6367:13	13	src = read_buff + src_offset
ASSIGN	6367:13	6367:19	14	src = read_buff + src_offset
LVAL	6367:13	6367:13	15	src
FIELD	6367:13	6367:13	16	src
LEAF_NODE	6367:13	6367:13	17	src
ASSIGN_OP	6367:17	6367:17	15	=
LEAF_NODE	6367:17	6367:17	16	=
RVAL	6367:19	6367:31	15	read_buff + src_offset
FIELD	6367:19	6367:19	16	read_buff
LEAF_NODE	6367:19	6367:19	17	read_buff
LEAF_NODE	6367:29	6367:29	16	+
FIELD	6367:31	6367:31	16	src_offset
LEAF_NODE	6367:31	6367:31	17	src_offset
LEAF_NODE	6367:41	6367:41	13	;
EXPR_STATEMENT	6368:13	6368:71	12	dst = crop_buff + dst_offset + ( prev_length * dst_rowsize ) ;
EXPR	6368:13	6368:13	13	dst = crop_buff + dst_offset + ( prev_length * dst_rowsize )
ASSIGN	6368:13	6368:19	14	dst = crop_buff + dst_offset + ( prev_length * dst_rowsize )
LVAL	6368:13	6368:13	15	dst
FIELD	6368:13	6368:13	16	dst
LEAF_NODE	6368:13	6368:13	17	dst
ASSIGN_OP	6368:17	6368:17	15	=
LEAF_NODE	6368:17	6368:17	16	=
RVAL	6368:19	6368:70	15	crop_buff + dst_offset + ( prev_length * dst_rowsize )
FIELD	6368:19	6368:19	16	crop_buff
LEAF_NODE	6368:19	6368:19	17	crop_buff
LEAF_NODE	6368:29	6368:29	16	+
FIELD	6368:31	6368:31	16	dst_offset
LEAF_NODE	6368:31	6368:31	17	dst_offset
LEAF_NODE	6368:42	6368:42	16	+
LEAF_NODE	6368:44	6368:44	16	(
FIELD	6368:45	6368:45	16	prev_length
LEAF_NODE	6368:45	6368:45	17	prev_length
LEAF_NODE	6368:57	6368:57	16	*
FIELD	6368:59	6368:59	16	dst_rowsize
LEAF_NODE	6368:59	6368:59	17	dst_rowsize
LEAF_NODE	6368:70	6368:70	16	)
LEAF_NODE	6368:71	6368:71	13	;
SELECTION	6369:13	6370:15	12	
KEYWORD	6369:13	6369:13	13	switch
LEAF_NODE	6369:13	6369:13	14	switch
LEAF_NODE	6369:20	6369:20	13	(
CONDITION	6369:21	6369:21	13	shift_width
EXPR	6369:21	6369:21	14	shift_width
FIELD	6369:21	6369:21	15	shift_width
LEAF_NODE	6369:21	6369:21	16	shift_width
LEAF_NODE	6369:32	6369:32	13	)
STATEMENTS	6370:15	6428:8	13	
LEAF_NODE	6370:15	6370:15	14	{
STATEMENTS	6371:15	6427:10	14	
LABEL	6371:15	6371:21	15	case 0 :
LEAF_NODE	6371:15	6371:15	16	case
LEAF_NODE	6371:20	6371:20	16	0
LEAF_NODE	6371:21	6371:21	16	:
SELECTION	6371:23	6374:25	15	
KEYWORD	6371:23	6371:23	16	if
LEAF_NODE	6371:23	6371:23	17	if
LEAF_NODE	6371:26	6371:26	16	(
CONDITION	6371:27	6371:27	16	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
EXPR	6371:27	6371:27	17	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
FUNCTION_CALL	6371:27	6373:66	18	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
CALLEE	6371:27	6371:27	19	extractContigSamplesBytes
LEAF_NODE	6371:27	6371:27	20	extractContigSamplesBytes
LEAF_NODE	6371:53	6371:53	19	(
ARGUMENT	6371:54	6371:54	19	src
FIELD	6371:54	6371:54	20	src
LEAF_NODE	6371:54	6371:54	21	src
LEAF_NODE	6371:57	6371:57	19	,
ARGUMENT	6371:59	6371:59	19	dst
FIELD	6371:59	6371:59	20	dst
LEAF_NODE	6371:59	6371:59	21	dst
LEAF_NODE	6371:62	6371:62	19	,
ARGUMENT	6371:64	6371:64	19	img_width
FIELD	6371:64	6371:64	20	img_width
LEAF_NODE	6371:64	6371:64	21	img_width
LEAF_NODE	6371:73	6371:73	19	,
ARGUMENT	6371:75	6371:75	19	sample
FIELD	6371:75	6371:75	20	sample
LEAF_NODE	6371:75	6371:75	21	sample
LEAF_NODE	6371:81	6371:81	19	,
ARGUMENT	6372:54	6372:54	19	spp
FIELD	6372:54	6372:54	20	spp
LEAF_NODE	6372:54	6372:54	21	spp
LEAF_NODE	6372:57	6372:57	19	,
ARGUMENT	6372:59	6372:59	19	bps
FIELD	6372:59	6372:59	20	bps
LEAF_NODE	6372:59	6372:59	21	bps
LEAF_NODE	6372:62	6372:62	19	,
ARGUMENT	6372:64	6372:64	19	count
FIELD	6372:64	6372:64	20	count
LEAF_NODE	6372:64	6372:64	21	count
LEAF_NODE	6372:69	6372:69	19	,
ARGUMENT	6372:71	6372:71	19	first_col
FIELD	6372:71	6372:71	20	first_col
LEAF_NODE	6372:71	6372:71	21	first_col
LEAF_NODE	6372:80	6372:80	19	,
ARGUMENT	6373:54	6373:65	19	last_col + 1
FIELD	6373:54	6373:54	20	last_col
LEAF_NODE	6373:54	6373:54	21	last_col
LEAF_NODE	6373:63	6373:63	20	+
FIELD	6373:65	6373:65	20	1
LEAF_NODE	6373:65	6373:65	21	1
LEAF_NODE	6373:66	6373:66	19	)
LEAF_NODE	6373:67	6373:67	16	)
STATEMENTS	6374:25	6378:11	16	
LEAF_NODE	6374:25	6374:25	17	{
STATEMENTS	6375:11	6377:11	17	
EXPR_STATEMENT	6375:11	6376:67	18	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6375:11	6375:11	19	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6375:11	6376:66	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6375:11	6375:11	21	TIFFError
LEAF_NODE	6375:11	6375:11	22	TIFFError
LEAF_NODE	6375:20	6375:20	21	(
ARGUMENT	6375:21	6375:21	21	"extractCompositeRegions"
FIELD	6375:21	6375:21	22	"extractCompositeRegions"
LEAF_NODE	6375:21	6375:21	23	"extractCompositeRegions"
LEAF_NODE	6375:46	6375:46	21	,
ARGUMENT	6376:35	6376:35	21	"Unable to extract row %d"
FIELD	6376:35	6376:35	22	"Unable to extract row %d"
LEAF_NODE	6376:35	6376:35	23	"Unable to extract row %d"
LEAF_NODE	6376:61	6376:61	21	,
ARGUMENT	6376:63	6376:63	21	row
FIELD	6376:63	6376:63	22	row
LEAF_NODE	6376:63	6376:63	23	row
LEAF_NODE	6376:66	6376:66	21	)
LEAF_NODE	6376:67	6376:67	19	;
JUMP_STATEMENT	6377:11	6377:21	18	return ( 1 ) ;
KEYWORD	6377:11	6377:11	19	return
LEAF_NODE	6377:11	6377:11	20	return
DESTINATION	6377:18	6377:18	19	( 1 )
EXPR	6377:18	6377:20	20	( 1 )
LEAF_NODE	6377:18	6377:18	21	(
FIELD	6377:19	6377:19	21	1
LEAF_NODE	6377:19	6377:19	22	1
LEAF_NODE	6377:20	6377:20	21	)
LEAF_NODE	6377:21	6377:21	19	;
LEAF_NODE	6378:11	6378:11	17	}
JUMP_STATEMENT	6379:9	6379:14	15	break DESTINATION ;
KEYWORD	6379:9	6379:9	16	break
LEAF_NODE	6379:9	6379:9	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6379:14	6379:14	16	;
LABEL	6380:15	6380:21	15	case 1 :
LEAF_NODE	6380:15	6380:15	16	case
LEAF_NODE	6380:20	6380:20	16	1
LEAF_NODE	6380:21	6380:21	16	:
SELECTION	6380:23	6381:25	15	
KEYWORD	6380:23	6380:23	16	if
LEAF_NODE	6380:23	6380:23	17	if
LEAF_NODE	6380:26	6380:26	16	(
CONDITION	6380:27	6380:27	16	bps == 1
EXPR	6380:27	6380:34	17	bps == 1
FIELD	6380:27	6380:27	18	bps
LEAF_NODE	6380:27	6380:27	19	bps
EQ_OPERATOR	6380:31	6380:31	18	==
LEAF_NODE	6380:31	6380:31	19	==
FIELD	6380:34	6380:34	18	1
LEAF_NODE	6380:34	6380:34	19	1
LEAF_NODE	6380:35	6380:35	16	)
STATEMENTS	6381:25	6392:4	16	
LEAF_NODE	6381:25	6381:25	17	{
STATEMENTS	6382:25	6391:11	17	
SELECTION	6382:25	6386:27	18	
KEYWORD	6382:25	6382:25	19	if
LEAF_NODE	6382:25	6382:25	20	if
LEAF_NODE	6382:28	6382:28	19	(
CONDITION	6382:29	6382:29	19	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6382:29	6382:29	20	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6382:29	6385:81	21	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6382:29	6382:29	22	extractContigSamplesShifted8bits
LEAF_NODE	6382:29	6382:29	23	extractContigSamplesShifted8bits
LEAF_NODE	6382:62	6382:62	22	(
ARGUMENT	6382:63	6382:63	22	src
FIELD	6382:63	6382:63	23	src
LEAF_NODE	6382:63	6382:63	24	src
LEAF_NODE	6382:66	6382:66	22	,
ARGUMENT	6382:68	6382:68	22	dst
FIELD	6382:68	6382:68	23	dst
LEAF_NODE	6382:68	6382:68	24	dst
LEAF_NODE	6382:71	6382:71	22	,
ARGUMENT	6382:73	6382:73	22	img_width
FIELD	6382:73	6382:73	23	img_width
LEAF_NODE	6382:73	6382:73	24	img_width
LEAF_NODE	6382:82	6382:82	22	,
ARGUMENT	6383:63	6383:63	22	sample
FIELD	6383:63	6383:63	23	sample
LEAF_NODE	6383:63	6383:63	24	sample
LEAF_NODE	6383:69	6383:69	22	,
ARGUMENT	6383:71	6383:71	22	spp
FIELD	6383:71	6383:71	23	spp
LEAF_NODE	6383:71	6383:71	24	spp
LEAF_NODE	6383:74	6383:74	22	,
ARGUMENT	6383:76	6383:76	22	bps
FIELD	6383:76	6383:76	23	bps
LEAF_NODE	6383:76	6383:76	24	bps
LEAF_NODE	6383:79	6383:79	22	,
ARGUMENT	6383:81	6383:81	22	count
FIELD	6383:81	6383:81	23	count
LEAF_NODE	6383:81	6383:81	24	count
LEAF_NODE	6383:86	6383:86	22	,
ARGUMENT	6384:63	6384:63	22	first_col
FIELD	6384:63	6384:63	23	first_col
LEAF_NODE	6384:63	6384:63	24	first_col
LEAF_NODE	6384:72	6384:72	22	,
ARGUMENT	6384:74	6384:85	22	last_col + 1
FIELD	6384:74	6384:74	23	last_col
LEAF_NODE	6384:74	6384:74	24	last_col
LEAF_NODE	6384:83	6384:83	23	+
FIELD	6384:85	6384:85	23	1
LEAF_NODE	6384:85	6384:85	24	1
LEAF_NODE	6384:86	6384:86	22	,
ARGUMENT	6385:63	6385:63	22	prev_trailing_bits
FIELD	6385:63	6385:63	23	prev_trailing_bits
LEAF_NODE	6385:63	6385:63	24	prev_trailing_bits
LEAF_NODE	6385:81	6385:81	22	)
LEAF_NODE	6385:82	6385:82	19	)
STATEMENTS	6386:27	6390:13	19	
LEAF_NODE	6386:27	6386:27	20	{
STATEMENTS	6387:13	6389:13	20	
EXPR_STATEMENT	6387:13	6388:69	21	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6387:13	6387:13	22	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6387:13	6388:68	23	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6387:13	6387:13	24	TIFFError
LEAF_NODE	6387:13	6387:13	25	TIFFError
LEAF_NODE	6387:22	6387:22	24	(
ARGUMENT	6387:23	6387:23	24	"extractCompositeRegions"
FIELD	6387:23	6387:23	25	"extractCompositeRegions"
LEAF_NODE	6387:23	6387:23	26	"extractCompositeRegions"
LEAF_NODE	6387:48	6387:48	24	,
ARGUMENT	6388:37	6388:37	24	"Unable to extract row %d"
FIELD	6388:37	6388:37	25	"Unable to extract row %d"
LEAF_NODE	6388:37	6388:37	26	"Unable to extract row %d"
LEAF_NODE	6388:63	6388:63	24	,
ARGUMENT	6388:65	6388:65	24	row
FIELD	6388:65	6388:65	25	row
LEAF_NODE	6388:65	6388:65	26	row
LEAF_NODE	6388:68	6388:68	24	)
LEAF_NODE	6388:69	6388:69	22	;
JUMP_STATEMENT	6389:13	6389:23	21	return ( 1 ) ;
KEYWORD	6389:13	6389:13	22	return
LEAF_NODE	6389:13	6389:13	23	return
DESTINATION	6389:20	6389:20	22	( 1 )
EXPR	6389:20	6389:22	23	( 1 )
LEAF_NODE	6389:20	6389:20	24	(
FIELD	6389:21	6389:21	24	1
LEAF_NODE	6389:21	6389:21	25	1
LEAF_NODE	6389:22	6389:22	24	)
LEAF_NODE	6389:23	6389:23	22	;
LEAF_NODE	6390:13	6390:13	20	}
JUMP_STATEMENT	6391:11	6391:16	18	break DESTINATION ;
KEYWORD	6391:11	6391:11	19	break
LEAF_NODE	6391:11	6391:11	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	6391:16	6391:16	19	;
LEAF_NODE	6392:4	6392:4	17	}
SELECTION	6393:23	6394:25	15	
KEYWORD	6393:23	6393:23	16	else
LEAF_NODE	6393:23	6393:23	17	else
STATEMENTS	6394:25	6394:25	16	
SELECTION	6394:25	6398:27	17	
KEYWORD	6394:25	6394:25	18	if
LEAF_NODE	6394:25	6394:25	19	if
LEAF_NODE	6394:28	6394:28	18	(
CONDITION	6394:29	6394:29	18	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6394:29	6394:29	19	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6394:29	6397:82	20	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6394:29	6394:29	21	extractContigSamplesShifted16bits
LEAF_NODE	6394:29	6394:29	22	extractContigSamplesShifted16bits
LEAF_NODE	6394:63	6394:63	21	(
ARGUMENT	6394:64	6394:64	21	src
FIELD	6394:64	6394:64	22	src
LEAF_NODE	6394:64	6394:64	23	src
LEAF_NODE	6394:67	6394:67	21	,
ARGUMENT	6394:69	6394:69	21	dst
FIELD	6394:69	6394:69	22	dst
LEAF_NODE	6394:69	6394:69	23	dst
LEAF_NODE	6394:72	6394:72	21	,
ARGUMENT	6394:74	6394:74	21	img_width
FIELD	6394:74	6394:74	22	img_width
LEAF_NODE	6394:74	6394:74	23	img_width
LEAF_NODE	6394:83	6394:83	21	,
ARGUMENT	6395:64	6395:64	21	sample
FIELD	6395:64	6395:64	22	sample
LEAF_NODE	6395:64	6395:64	23	sample
LEAF_NODE	6395:70	6395:70	21	,
ARGUMENT	6395:72	6395:72	21	spp
FIELD	6395:72	6395:72	22	spp
LEAF_NODE	6395:72	6395:72	23	spp
LEAF_NODE	6395:75	6395:75	21	,
ARGUMENT	6395:77	6395:77	21	bps
FIELD	6395:77	6395:77	22	bps
LEAF_NODE	6395:77	6395:77	23	bps
LEAF_NODE	6395:80	6395:80	21	,
ARGUMENT	6395:82	6395:82	21	count
FIELD	6395:82	6395:82	22	count
LEAF_NODE	6395:82	6395:82	23	count
LEAF_NODE	6395:87	6395:87	21	,
ARGUMENT	6396:64	6396:64	21	first_col
FIELD	6396:64	6396:64	22	first_col
LEAF_NODE	6396:64	6396:64	23	first_col
LEAF_NODE	6396:73	6396:73	21	,
ARGUMENT	6396:75	6396:86	21	last_col + 1
FIELD	6396:75	6396:75	22	last_col
LEAF_NODE	6396:75	6396:75	23	last_col
LEAF_NODE	6396:84	6396:84	22	+
FIELD	6396:86	6396:86	22	1
LEAF_NODE	6396:86	6396:86	23	1
LEAF_NODE	6396:87	6396:87	21	,
ARGUMENT	6397:64	6397:64	21	prev_trailing_bits
FIELD	6397:64	6397:64	22	prev_trailing_bits
LEAF_NODE	6397:64	6397:64	23	prev_trailing_bits
LEAF_NODE	6397:82	6397:82	21	)
LEAF_NODE	6397:83	6397:83	18	)
STATEMENTS	6398:27	6402:13	18	
LEAF_NODE	6398:27	6398:27	19	{
STATEMENTS	6399:13	6401:13	19	
EXPR_STATEMENT	6399:13	6400:69	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6399:13	6399:13	21	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6399:13	6400:68	22	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6399:13	6399:13	23	TIFFError
LEAF_NODE	6399:13	6399:13	24	TIFFError
LEAF_NODE	6399:22	6399:22	23	(
ARGUMENT	6399:23	6399:23	23	"extractCompositeRegions"
FIELD	6399:23	6399:23	24	"extractCompositeRegions"
LEAF_NODE	6399:23	6399:23	25	"extractCompositeRegions"
LEAF_NODE	6399:48	6399:48	23	,
ARGUMENT	6400:37	6400:37	23	"Unable to extract row %d"
FIELD	6400:37	6400:37	24	"Unable to extract row %d"
LEAF_NODE	6400:37	6400:37	25	"Unable to extract row %d"
LEAF_NODE	6400:63	6400:63	23	,
ARGUMENT	6400:65	6400:65	23	row
FIELD	6400:65	6400:65	24	row
LEAF_NODE	6400:65	6400:65	25	row
LEAF_NODE	6400:68	6400:68	23	)
LEAF_NODE	6400:69	6400:69	21	;
JUMP_STATEMENT	6401:13	6401:23	20	return ( 1 ) ;
KEYWORD	6401:13	6401:13	21	return
LEAF_NODE	6401:13	6401:13	22	return
DESTINATION	6401:20	6401:20	21	( 1 )
EXPR	6401:20	6401:22	22	( 1 )
LEAF_NODE	6401:20	6401:20	23	(
FIELD	6401:21	6401:21	23	1
LEAF_NODE	6401:21	6401:21	24	1
LEAF_NODE	6401:22	6401:22	23	)
LEAF_NODE	6401:23	6401:23	21	;
LEAF_NODE	6402:13	6402:13	19	}
JUMP_STATEMENT	6403:10	6403:15	15	break DESTINATION ;
KEYWORD	6403:10	6403:10	16	break
LEAF_NODE	6403:10	6403:10	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6403:15	6403:15	16	;
LABEL	6404:15	6404:21	15	case 2 :
LEAF_NODE	6404:15	6404:15	16	case
LEAF_NODE	6404:20	6404:20	16	2
LEAF_NODE	6404:21	6404:21	16	:
SELECTION	6404:24	6408:26	15	
KEYWORD	6404:24	6404:24	16	if
LEAF_NODE	6404:24	6404:24	17	if
LEAF_NODE	6404:27	6404:27	16	(
CONDITION	6404:28	6404:28	16	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6404:28	6404:28	17	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6404:28	6407:81	18	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6404:28	6404:28	19	extractContigSamplesShifted24bits
LEAF_NODE	6404:28	6404:28	20	extractContigSamplesShifted24bits
LEAF_NODE	6404:62	6404:62	19	(
ARGUMENT	6404:63	6404:63	19	src
FIELD	6404:63	6404:63	20	src
LEAF_NODE	6404:63	6404:63	21	src
LEAF_NODE	6404:66	6404:66	19	,
ARGUMENT	6404:68	6404:68	19	dst
FIELD	6404:68	6404:68	20	dst
LEAF_NODE	6404:68	6404:68	21	dst
LEAF_NODE	6404:71	6404:71	19	,
ARGUMENT	6404:73	6404:73	19	img_width
FIELD	6404:73	6404:73	20	img_width
LEAF_NODE	6404:73	6404:73	21	img_width
LEAF_NODE	6404:82	6404:82	19	,
ARGUMENT	6405:63	6405:63	19	sample
FIELD	6405:63	6405:63	20	sample
LEAF_NODE	6405:63	6405:63	21	sample
LEAF_NODE	6405:69	6405:69	19	,
ARGUMENT	6405:71	6405:71	19	spp
FIELD	6405:71	6405:71	20	spp
LEAF_NODE	6405:71	6405:71	21	spp
LEAF_NODE	6405:74	6405:74	19	,
ARGUMENT	6405:76	6405:76	19	bps
FIELD	6405:76	6405:76	20	bps
LEAF_NODE	6405:76	6405:76	21	bps
LEAF_NODE	6405:79	6405:79	19	,
ARGUMENT	6405:81	6405:81	19	count
FIELD	6405:81	6405:81	20	count
LEAF_NODE	6405:81	6405:81	21	count
LEAF_NODE	6405:86	6405:86	19	,
ARGUMENT	6406:63	6406:63	19	first_col
FIELD	6406:63	6406:63	20	first_col
LEAF_NODE	6406:63	6406:63	21	first_col
LEAF_NODE	6406:72	6406:72	19	,
ARGUMENT	6406:74	6406:85	19	last_col + 1
FIELD	6406:74	6406:74	20	last_col
LEAF_NODE	6406:74	6406:74	21	last_col
LEAF_NODE	6406:83	6406:83	20	+
FIELD	6406:85	6406:85	20	1
LEAF_NODE	6406:85	6406:85	21	1
LEAF_NODE	6406:86	6406:86	19	,
ARGUMENT	6407:63	6407:63	19	prev_trailing_bits
FIELD	6407:63	6407:63	20	prev_trailing_bits
LEAF_NODE	6407:63	6407:63	21	prev_trailing_bits
LEAF_NODE	6407:81	6407:81	19	)
LEAF_NODE	6407:82	6407:82	16	)
STATEMENTS	6408:26	6412:12	16	
LEAF_NODE	6408:26	6408:26	17	{
STATEMENTS	6409:12	6411:12	17	
EXPR_STATEMENT	6409:12	6410:68	18	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6409:12	6409:12	19	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6409:12	6410:67	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6409:12	6409:12	21	TIFFError
LEAF_NODE	6409:12	6409:12	22	TIFFError
LEAF_NODE	6409:21	6409:21	21	(
ARGUMENT	6409:22	6409:22	21	"extractCompositeRegions"
FIELD	6409:22	6409:22	22	"extractCompositeRegions"
LEAF_NODE	6409:22	6409:22	23	"extractCompositeRegions"
LEAF_NODE	6409:47	6409:47	21	,
ARGUMENT	6410:36	6410:36	21	"Unable to extract row %d"
FIELD	6410:36	6410:36	22	"Unable to extract row %d"
LEAF_NODE	6410:36	6410:36	23	"Unable to extract row %d"
LEAF_NODE	6410:62	6410:62	21	,
ARGUMENT	6410:64	6410:64	21	row
FIELD	6410:64	6410:64	22	row
LEAF_NODE	6410:64	6410:64	23	row
LEAF_NODE	6410:67	6410:67	21	)
LEAF_NODE	6410:68	6410:68	19	;
JUMP_STATEMENT	6411:12	6411:22	18	return ( 1 ) ;
KEYWORD	6411:12	6411:12	19	return
LEAF_NODE	6411:12	6411:12	20	return
DESTINATION	6411:19	6411:19	19	( 1 )
EXPR	6411:19	6411:21	20	( 1 )
LEAF_NODE	6411:19	6411:19	21	(
FIELD	6411:20	6411:20	21	1
LEAF_NODE	6411:20	6411:20	22	1
LEAF_NODE	6411:21	6411:21	21	)
LEAF_NODE	6411:22	6411:22	19	;
LEAF_NODE	6412:12	6412:12	17	}
JUMP_STATEMENT	6413:10	6413:15	15	break DESTINATION ;
KEYWORD	6413:10	6413:10	16	break
LEAF_NODE	6413:10	6413:10	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6413:15	6413:15	16	;
LABEL	6414:15	6414:21	15	case 3 :
LEAF_NODE	6414:15	6414:15	16	case
LEAF_NODE	6414:20	6414:20	16	3
LEAF_NODE	6414:21	6414:21	16	:
LABEL	6415:15	6415:21	15	case 4 :
LEAF_NODE	6415:15	6415:15	16	case
LEAF_NODE	6415:20	6415:20	16	4
LEAF_NODE	6415:21	6415:21	16	:
LABEL	6416:15	6416:21	15	case 5 :
LEAF_NODE	6416:15	6416:15	16	case
LEAF_NODE	6416:20	6416:20	16	5
LEAF_NODE	6416:21	6416:21	16	:
SELECTION	6416:24	6420:26	15	
KEYWORD	6416:24	6416:24	16	if
LEAF_NODE	6416:24	6416:24	17	if
LEAF_NODE	6416:27	6416:27	16	(
CONDITION	6416:28	6416:28	16	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6416:28	6416:28	17	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6416:28	6419:81	18	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6416:28	6416:28	19	extractContigSamplesShifted32bits
LEAF_NODE	6416:28	6416:28	20	extractContigSamplesShifted32bits
LEAF_NODE	6416:62	6416:62	19	(
ARGUMENT	6416:63	6416:63	19	src
FIELD	6416:63	6416:63	20	src
LEAF_NODE	6416:63	6416:63	21	src
LEAF_NODE	6416:66	6416:66	19	,
ARGUMENT	6416:68	6416:68	19	dst
FIELD	6416:68	6416:68	20	dst
LEAF_NODE	6416:68	6416:68	21	dst
LEAF_NODE	6416:71	6416:71	19	,
ARGUMENT	6416:73	6416:73	19	img_width
FIELD	6416:73	6416:73	20	img_width
LEAF_NODE	6416:73	6416:73	21	img_width
LEAF_NODE	6416:82	6416:82	19	,
ARGUMENT	6417:63	6417:63	19	sample
FIELD	6417:63	6417:63	20	sample
LEAF_NODE	6417:63	6417:63	21	sample
LEAF_NODE	6417:69	6417:69	19	,
ARGUMENT	6417:71	6417:71	19	spp
FIELD	6417:71	6417:71	20	spp
LEAF_NODE	6417:71	6417:71	21	spp
LEAF_NODE	6417:74	6417:74	19	,
ARGUMENT	6417:76	6417:76	19	bps
FIELD	6417:76	6417:76	20	bps
LEAF_NODE	6417:76	6417:76	21	bps
LEAF_NODE	6417:79	6417:79	19	,
ARGUMENT	6417:81	6417:81	19	count
FIELD	6417:81	6417:81	20	count
LEAF_NODE	6417:81	6417:81	21	count
LEAF_NODE	6417:86	6417:86	19	,
ARGUMENT	6418:63	6418:63	19	first_col
FIELD	6418:63	6418:63	20	first_col
LEAF_NODE	6418:63	6418:63	21	first_col
LEAF_NODE	6418:72	6418:72	19	,
ARGUMENT	6418:74	6418:85	19	last_col + 1
FIELD	6418:74	6418:74	20	last_col
LEAF_NODE	6418:74	6418:74	21	last_col
LEAF_NODE	6418:83	6418:83	20	+
FIELD	6418:85	6418:85	20	1
LEAF_NODE	6418:85	6418:85	21	1
LEAF_NODE	6418:86	6418:86	19	,
ARGUMENT	6419:63	6419:63	19	prev_trailing_bits
FIELD	6419:63	6419:63	20	prev_trailing_bits
LEAF_NODE	6419:63	6419:63	21	prev_trailing_bits
LEAF_NODE	6419:81	6419:81	19	)
LEAF_NODE	6419:82	6419:82	16	)
STATEMENTS	6420:26	6424:12	16	
LEAF_NODE	6420:26	6420:26	17	{
STATEMENTS	6421:12	6423:12	17	
EXPR_STATEMENT	6421:12	6422:68	18	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6421:12	6421:12	19	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6421:12	6422:67	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6421:12	6421:12	21	TIFFError
LEAF_NODE	6421:12	6421:12	22	TIFFError
LEAF_NODE	6421:21	6421:21	21	(
ARGUMENT	6421:22	6421:22	21	"extractCompositeRegions"
FIELD	6421:22	6421:22	22	"extractCompositeRegions"
LEAF_NODE	6421:22	6421:22	23	"extractCompositeRegions"
LEAF_NODE	6421:47	6421:47	21	,
ARGUMENT	6422:36	6422:36	21	"Unable to extract row %d"
FIELD	6422:36	6422:36	22	"Unable to extract row %d"
LEAF_NODE	6422:36	6422:36	23	"Unable to extract row %d"
LEAF_NODE	6422:62	6422:62	21	,
ARGUMENT	6422:64	6422:64	21	row
FIELD	6422:64	6422:64	22	row
LEAF_NODE	6422:64	6422:64	23	row
LEAF_NODE	6422:67	6422:67	21	)
LEAF_NODE	6422:68	6422:68	19	;
JUMP_STATEMENT	6423:12	6423:22	18	return ( 1 ) ;
KEYWORD	6423:12	6423:12	19	return
LEAF_NODE	6423:12	6423:12	20	return
DESTINATION	6423:19	6423:19	19	( 1 )
EXPR	6423:19	6423:21	20	( 1 )
LEAF_NODE	6423:19	6423:19	21	(
FIELD	6423:20	6423:20	21	1
LEAF_NODE	6423:20	6423:20	22	1
LEAF_NODE	6423:21	6423:21	21	)
LEAF_NODE	6423:22	6423:22	19	;
LEAF_NODE	6424:12	6424:12	17	}
JUMP_STATEMENT	6425:10	6425:15	15	break DESTINATION ;
KEYWORD	6425:10	6425:10	16	break
LEAF_NODE	6425:10	6425:10	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6425:15	6425:15	16	;
LABEL	6426:15	6426:22	15	default :
LEAF_NODE	6426:15	6426:15	16	default
LEAF_NODE	6426:22	6426:22	16	:
EXPR_STATEMENT	6426:24	6426:93	15	TIFFError ( "extractCompositeRegions" , "Unsupported bit depth %d" , bps ) ;
EXPR	6426:24	6426:24	16	TIFFError ( "extractCompositeRegions" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	6426:24	6426:92	17	TIFFError ( "extractCompositeRegions" , "Unsupported bit depth %d" , bps )
CALLEE	6426:24	6426:24	18	TIFFError
LEAF_NODE	6426:24	6426:24	19	TIFFError
LEAF_NODE	6426:33	6426:33	18	(
ARGUMENT	6426:34	6426:34	18	"extractCompositeRegions"
FIELD	6426:34	6426:34	19	"extractCompositeRegions"
LEAF_NODE	6426:34	6426:34	20	"extractCompositeRegions"
LEAF_NODE	6426:59	6426:59	18	,
ARGUMENT	6426:61	6426:61	18	"Unsupported bit depth %d"
FIELD	6426:61	6426:61	19	"Unsupported bit depth %d"
LEAF_NODE	6426:61	6426:61	20	"Unsupported bit depth %d"
LEAF_NODE	6426:87	6426:87	18	,
ARGUMENT	6426:89	6426:89	18	bps
FIELD	6426:89	6426:89	19	bps
LEAF_NODE	6426:89	6426:89	20	bps
LEAF_NODE	6426:92	6426:92	18	)
LEAF_NODE	6426:93	6426:93	16	;
JUMP_STATEMENT	6427:10	6427:20	15	return ( 1 ) ;
KEYWORD	6427:10	6427:10	16	return
LEAF_NODE	6427:10	6427:10	17	return
DESTINATION	6427:17	6427:17	16	( 1 )
EXPR	6427:17	6427:19	17	( 1 )
LEAF_NODE	6427:17	6427:17	18	(
FIELD	6427:18	6427:18	18	1
LEAF_NODE	6427:18	6427:18	19	1
LEAF_NODE	6427:19	6427:19	18	)
LEAF_NODE	6427:20	6427:20	16	;
LEAF_NODE	6428:8	6428:8	14	}
LEAF_NODE	6429:13	6429:13	11	}
EXPR_STATEMENT	6430:11	6430:37	9	prev_length += crop_length ;
EXPR	6430:11	6430:11	10	prev_length += crop_length
ASSIGN	6430:11	6430:26	11	prev_length += crop_length
LVAL	6430:11	6430:11	12	prev_length
FIELD	6430:11	6430:11	13	prev_length
LEAF_NODE	6430:11	6430:11	14	prev_length
ASSIGN_OP	6430:23	6430:23	12	+=
LEAF_NODE	6430:23	6430:23	13	+=
RVAL	6430:26	6430:26	12	crop_length
FIELD	6430:26	6430:26	13	crop_length
LEAF_NODE	6430:26	6430:26	14	crop_length
LEAF_NODE	6430:37	6430:37	10	;
JUMP_STATEMENT	6431:4	6431:9	9	break DESTINATION ;
KEYWORD	6431:4	6431:4	10	break
LEAF_NODE	6431:4	6431:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	6431:9	6431:9	10	;
LABEL	6432:6	6432:20	9	case EDGE_LEFT :
LEAF_NODE	6432:6	6432:6	10	case
LEAF_NODE	6432:11	6432:11	10	EDGE_LEFT
LEAF_NODE	6432:20	6432:20	10	:
LABEL	6433:6	6433:21	9	case EDGE_RIGHT :
LEAF_NODE	6433:6	6433:6	10	case
LEAF_NODE	6433:11	6433:11	10	EDGE_RIGHT
LEAF_NODE	6433:21	6433:21	10	:
SELECTION	6434:4	6435:13	9	
KEYWORD	6434:4	6434:4	10	if
LEAF_NODE	6434:4	6434:4	11	if
LEAF_NODE	6434:7	6434:7	10	(
CONDITION	6434:8	6434:8	10	( i > 0 ) && ( crop_length != crop -> regionlist [ i - 1 ] . length )
EXPR	6434:8	6434:8	11	( i > 0 ) && ( crop_length != crop -> regionlist [ i - 1 ] . length )
AND	6434:8	6434:19	12	( i > 0 ) && ( crop_length != crop -> regionlist [ i - 1 ] . length )
EXPR	6434:8	6434:14	13	( i > 0 )
LEAF_NODE	6434:8	6434:8	14	(
FIELD	6434:9	6434:9	14	i
LEAF_NODE	6434:9	6434:9	15	i
REL_OPERATOR	6434:11	6434:11	14	>
LEAF_NODE	6434:11	6434:11	15	>
FIELD	6434:13	6434:13	14	0
LEAF_NODE	6434:13	6434:13	15	0
LEAF_NODE	6434:14	6434:14	14	)
LEAF_NODE	6434:16	6434:16	13	&&
EXPR	6434:19	6434:65	13	( crop_length != crop -> regionlist [ i - 1 ] . length )
LEAF_NODE	6434:19	6434:19	14	(
FIELD	6434:20	6434:20	14	crop_length
LEAF_NODE	6434:20	6434:20	15	crop_length
EQ_OPERATOR	6434:32	6434:32	14	!=
LEAF_NODE	6434:32	6434:32	15	!=
FIELD	6434:35	6434:59	14	crop -> regionlist [ i - 1 ] . length
LEAF_NODE	6434:35	6434:35	15	crop
LEAF_NODE	6434:39	6434:39	15	->
LEAF_NODE	6434:41	6434:41	15	regionlist
LEAF_NODE	6434:51	6434:51	15	[
EXPR	6434:52	6434:56	15	i - 1
FIELD	6434:52	6434:52	16	i
LEAF_NODE	6434:52	6434:52	17	i
LEAF_NODE	6434:54	6434:54	16	-
FIELD	6434:56	6434:56	16	1
LEAF_NODE	6434:56	6434:56	17	1
LEAF_NODE	6434:57	6434:57	15	]
LEAF_NODE	6434:58	6434:58	15	.
LEAF_NODE	6434:59	6434:59	15	length
LEAF_NODE	6434:65	6434:65	14	)
LEAF_NODE	6434:66	6434:66	10	)
STATEMENTS	6435:13	6439:13	10	
LEAF_NODE	6435:13	6435:13	11	{
STATEMENTS	6436:6	6438:6	11	
EXPR_STATEMENT	6436:6	6437:91	12	TIFFError ( "extractCompositeRegions" , "Only equal length regions can be combined for -E left or right" ) ;
EXPR	6436:6	6436:6	13	TIFFError ( "extractCompositeRegions" , "Only equal length regions can be combined for -E left or right" )
FUNCTION_CALL	6436:6	6437:90	14	TIFFError ( "extractCompositeRegions" , "Only equal length regions can be combined for -E left or right" )
CALLEE	6436:6	6436:6	15	TIFFError
LEAF_NODE	6436:6	6436:6	16	TIFFError
LEAF_NODE	6436:16	6436:16	15	(
ARGUMENT	6436:17	6436:17	15	"extractCompositeRegions"
FIELD	6436:17	6436:17	16	"extractCompositeRegions"
LEAF_NODE	6436:17	6436:17	17	"extractCompositeRegions"
LEAF_NODE	6436:42	6436:42	15	,
ARGUMENT	6437:26	6437:26	15	"Only equal length regions can be combined for -E left or right"
FIELD	6437:26	6437:26	16	"Only equal length regions can be combined for -E left or right"
LEAF_NODE	6437:26	6437:26	17	"Only equal length regions can be combined for -E left or right"
LEAF_NODE	6437:90	6437:90	15	)
LEAF_NODE	6437:91	6437:91	13	;
JUMP_STATEMENT	6438:6	6438:16	12	return ( 1 ) ;
KEYWORD	6438:6	6438:6	13	return
LEAF_NODE	6438:6	6438:6	14	return
DESTINATION	6438:13	6438:13	13	( 1 )
EXPR	6438:13	6438:15	14	( 1 )
LEAF_NODE	6438:13	6438:13	15	(
FIELD	6438:14	6438:14	15	1
LEAF_NODE	6438:14	6438:14	16	1
LEAF_NODE	6438:15	6438:15	15	)
LEAF_NODE	6438:16	6438:16	13	;
LEAF_NODE	6439:13	6439:13	11	}
EXPR_STATEMENT	6440:11	6440:45	9	crop -> combined_width += crop_width ;
EXPR	6440:11	6440:11	10	crop -> combined_width += crop_width
ASSIGN	6440:11	6440:35	11	crop -> combined_width += crop_width
LVAL	6440:11	6440:11	12	crop -> combined_width
FIELD	6440:11	6440:17	13	crop -> combined_width
LEAF_NODE	6440:11	6440:11	14	crop
LEAF_NODE	6440:15	6440:15	14	->
LEAF_NODE	6440:17	6440:17	14	combined_width
ASSIGN_OP	6440:32	6440:32	12	+=
LEAF_NODE	6440:32	6440:32	13	+=
RVAL	6440:35	6440:35	12	crop_width
FIELD	6440:35	6440:35	13	crop_width
LEAF_NODE	6440:35	6440:35	14	crop_width
LEAF_NODE	6440:45	6440:45	10	;
EXPR_STATEMENT	6441:11	6441:46	9	crop -> combined_length = crop_length ;
EXPR	6441:11	6441:11	10	crop -> combined_length = crop_length
ASSIGN	6441:11	6441:35	11	crop -> combined_length = crop_length
LVAL	6441:11	6441:11	12	crop -> combined_length
FIELD	6441:11	6441:17	13	crop -> combined_length
LEAF_NODE	6441:11	6441:11	14	crop
LEAF_NODE	6441:15	6441:15	14	->
LEAF_NODE	6441:17	6441:17	14	combined_length
ASSIGN_OP	6441:33	6441:33	12	=
LEAF_NODE	6441:33	6441:33	13	=
RVAL	6441:35	6441:35	12	crop_length
FIELD	6441:35	6441:35	13	crop_length
LEAF_NODE	6441:35	6441:35	14	crop_length
LEAF_NODE	6441:46	6441:46	10	;
LEAF_NODE	6442:11	6442:11	9	dst_rowsize
LEAF_NODE	6442:23	6442:23	9	=
LEAF_NODE	6442:25	6442:25	9	(
LEAF_NODE	6442:26	6442:26	9	(
LEAF_NODE	6442:27	6442:27	9	(
LEAF_NODE	6442:28	6442:28	9	composite_width
LEAF_NODE	6442:44	6442:44	9	*
LEAF_NODE	6442:46	6442:46	9	bps
LEAF_NODE	6442:50	6442:50	9	*
LEAF_NODE	6442:52	6442:52	9	count
LEAF_NODE	6442:57	6442:57	9	)
LEAF_NODE	6442:59	6442:59	9	+
LEAF_NODE	6442:61	6442:61	9	7
LEAF_NODE	6442:62	6442:62	9	)
LEAF_NODE	6442:64	6442:64	9	/
LEAF_NODE	6442:66	6442:66	9	8
LEAF_NODE	6442:67	6442:67	9	)
LEAF_NODE	6442:68	6442:68	9	;
LEAF_NODE	6443:11	6443:11	9	trailing_bits
LEAF_NODE	6443:25	6443:25	9	=
LEAF_NODE	6443:27	6443:27	9	(
LEAF_NODE	6443:28	6443:28	9	crop_width
LEAF_NODE	6443:39	6443:39	9	*
LEAF_NODE	6443:41	6443:41	9	bps
LEAF_NODE	6443:45	6443:45	9	*
LEAF_NODE	6443:47	6443:47	9	count
LEAF_NODE	6443:52	6443:52	9	)
LEAF_NODE	6443:54	6443:54	9	%
EXPR_STATEMENT	6443:56	6443:57	9	8 ;
EXPR	6443:56	6443:56	10	8
FIELD	6443:56	6443:56	11	8
LEAF_NODE	6443:56	6443:56	12	8
LEAF_NODE	6443:57	6443:57	10	;
ITERATION	6444:11	6445:13	9	
KEYWORD	6444:11	6444:11	10	for
LEAF_NODE	6444:11	6444:11	11	for
LEAF_NODE	6444:15	6444:15	10	(
FOR_INIT	6444:16	6444:31	10	row = first_row ;
EXPR	6444:16	6444:16	11	row = first_row
ASSIGN	6444:16	6444:22	12	row = first_row
LVAL	6444:16	6444:16	13	row
FIELD	6444:16	6444:16	14	row
LEAF_NODE	6444:16	6444:16	15	row
ASSIGN_OP	6444:20	6444:20	13	=
LEAF_NODE	6444:20	6444:20	14	=
RVAL	6444:22	6444:22	13	first_row
FIELD	6444:22	6444:22	14	first_row
LEAF_NODE	6444:22	6444:22	15	first_row
LEAF_NODE	6444:31	6444:31	11	;
CONDITION	6444:33	6444:33	10	row <= last_row
EXPR	6444:33	6444:40	11	row <= last_row
FIELD	6444:33	6444:33	12	row
LEAF_NODE	6444:33	6444:33	13	row
REL_OPERATOR	6444:37	6444:37	12	<=
LEAF_NODE	6444:37	6444:37	13	<=
FIELD	6444:40	6444:40	12	last_row
LEAF_NODE	6444:40	6444:40	13	last_row
LEAF_NODE	6444:48	6444:48	10	;
FOR_EXPR	6444:50	6444:50	10	row ++
EXPR	6444:50	6444:50	11	row ++
FIELD	6444:50	6444:53	12	row ++
LEAF_NODE	6444:50	6444:50	13	row
LEAF_NODE	6444:53	6444:53	13	++
LEAF_NODE	6444:55	6444:55	10	)
STATEMENTS	6445:13	6511:6	10	
LEAF_NODE	6445:13	6445:13	11	{
STATEMENTS	6446:6	6451:13	11	
EXPR_STATEMENT	6446:6	6446:36	12	src_offset = row * src_rowsize ;
EXPR	6446:6	6446:6	13	src_offset = row * src_rowsize
ASSIGN	6446:6	6446:19	14	src_offset = row * src_rowsize
LVAL	6446:6	6446:6	15	src_offset
FIELD	6446:6	6446:6	16	src_offset
LEAF_NODE	6446:6	6446:6	17	src_offset
ASSIGN_OP	6446:17	6446:17	15	=
LEAF_NODE	6446:17	6446:17	16	=
RVAL	6446:19	6446:25	15	row * src_rowsize
FIELD	6446:19	6446:19	16	row
LEAF_NODE	6446:19	6446:19	17	row
LEAF_NODE	6446:23	6446:23	16	*
FIELD	6446:25	6446:25	16	src_rowsize
LEAF_NODE	6446:25	6446:25	17	src_rowsize
LEAF_NODE	6446:36	6446:36	13	;
EXPR_STATEMENT	6447:6	6447:50	12	dst_offset = ( row - first_row ) * dst_rowsize ;
EXPR	6447:6	6447:6	13	dst_offset = ( row - first_row ) * dst_rowsize
ASSIGN	6447:6	6447:19	14	dst_offset = ( row - first_row ) * dst_rowsize
LVAL	6447:6	6447:6	15	dst_offset
FIELD	6447:6	6447:6	16	dst_offset
LEAF_NODE	6447:6	6447:6	17	dst_offset
ASSIGN_OP	6447:17	6447:17	15	=
LEAF_NODE	6447:17	6447:17	16	=
RVAL	6447:19	6447:39	15	( row - first_row ) * dst_rowsize
LEAF_NODE	6447:19	6447:19	16	(
FIELD	6447:20	6447:20	16	row
LEAF_NODE	6447:20	6447:20	17	row
LEAF_NODE	6447:24	6447:24	16	-
FIELD	6447:26	6447:26	16	first_row
LEAF_NODE	6447:26	6447:26	17	first_row
LEAF_NODE	6447:35	6447:35	16	)
LEAF_NODE	6447:37	6447:37	16	*
FIELD	6447:39	6447:39	16	dst_rowsize
LEAF_NODE	6447:39	6447:39	17	dst_rowsize
LEAF_NODE	6447:50	6447:50	13	;
EXPR_STATEMENT	6448:13	6448:41	12	src = read_buff + src_offset ;
EXPR	6448:13	6448:13	13	src = read_buff + src_offset
ASSIGN	6448:13	6448:19	14	src = read_buff + src_offset
LVAL	6448:13	6448:13	15	src
FIELD	6448:13	6448:13	16	src
LEAF_NODE	6448:13	6448:13	17	src
ASSIGN_OP	6448:17	6448:17	15	=
LEAF_NODE	6448:17	6448:17	16	=
RVAL	6448:19	6448:31	15	read_buff + src_offset
FIELD	6448:19	6448:19	16	read_buff
LEAF_NODE	6448:19	6448:19	17	read_buff
LEAF_NODE	6448:29	6448:29	16	+
FIELD	6448:31	6448:31	16	src_offset
LEAF_NODE	6448:31	6448:31	17	src_offset
LEAF_NODE	6448:41	6448:41	13	;
EXPR_STATEMENT	6449:13	6449:54	12	dst = crop_buff + dst_offset + prev_width ;
EXPR	6449:13	6449:13	13	dst = crop_buff + dst_offset + prev_width
ASSIGN	6449:13	6449:19	14	dst = crop_buff + dst_offset + prev_width
LVAL	6449:13	6449:13	15	dst
FIELD	6449:13	6449:13	16	dst
LEAF_NODE	6449:13	6449:13	17	dst
ASSIGN_OP	6449:17	6449:17	15	=
LEAF_NODE	6449:17	6449:17	16	=
RVAL	6449:19	6449:44	15	crop_buff + dst_offset + prev_width
FIELD	6449:19	6449:19	16	crop_buff
LEAF_NODE	6449:19	6449:19	17	crop_buff
LEAF_NODE	6449:29	6449:29	16	+
FIELD	6449:31	6449:31	16	dst_offset
LEAF_NODE	6449:31	6449:31	17	dst_offset
LEAF_NODE	6449:42	6449:42	16	+
FIELD	6449:44	6449:44	16	prev_width
LEAF_NODE	6449:44	6449:44	17	prev_width
LEAF_NODE	6449:54	6449:54	13	;
SELECTION	6451:13	6452:15	12	
KEYWORD	6451:13	6451:13	13	switch
LEAF_NODE	6451:13	6451:13	14	switch
LEAF_NODE	6451:20	6451:20	13	(
CONDITION	6451:21	6451:21	13	shift_width
EXPR	6451:21	6451:21	14	shift_width
FIELD	6451:21	6451:21	15	shift_width
LEAF_NODE	6451:21	6451:21	16	shift_width
LEAF_NODE	6451:32	6451:32	13	)
STATEMENTS	6452:15	6510:8	13	
LEAF_NODE	6452:15	6452:15	14	{
STATEMENTS	6453:15	6509:10	14	
LABEL	6453:15	6453:21	15	case 0 :
LEAF_NODE	6453:15	6453:15	16	case
LEAF_NODE	6453:20	6453:20	16	0
LEAF_NODE	6453:21	6453:21	16	:
SELECTION	6453:23	6456:25	15	
KEYWORD	6453:23	6453:23	16	if
LEAF_NODE	6453:23	6453:23	17	if
LEAF_NODE	6453:26	6453:26	16	(
CONDITION	6453:27	6453:27	16	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
EXPR	6453:27	6453:27	17	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
FUNCTION_CALL	6453:27	6455:77	18	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
CALLEE	6453:27	6453:27	19	extractContigSamplesBytes
LEAF_NODE	6453:27	6453:27	20	extractContigSamplesBytes
LEAF_NODE	6453:53	6453:53	19	(
ARGUMENT	6453:54	6453:54	19	src
FIELD	6453:54	6453:54	20	src
LEAF_NODE	6453:54	6453:54	21	src
LEAF_NODE	6453:57	6453:57	19	,
ARGUMENT	6453:59	6453:59	19	dst
FIELD	6453:59	6453:59	20	dst
LEAF_NODE	6453:59	6453:59	21	dst
LEAF_NODE	6453:62	6453:62	19	,
ARGUMENT	6453:64	6453:64	19	img_width
FIELD	6453:64	6453:64	20	img_width
LEAF_NODE	6453:64	6453:64	21	img_width
LEAF_NODE	6453:73	6453:73	19	,
ARGUMENT	6454:54	6454:54	19	sample
FIELD	6454:54	6454:54	20	sample
LEAF_NODE	6454:54	6454:54	21	sample
LEAF_NODE	6454:60	6454:60	19	,
ARGUMENT	6454:62	6454:62	19	spp
FIELD	6454:62	6454:62	20	spp
LEAF_NODE	6454:62	6454:62	21	spp
LEAF_NODE	6454:65	6454:65	19	,
ARGUMENT	6454:67	6454:67	19	bps
FIELD	6454:67	6454:67	20	bps
LEAF_NODE	6454:67	6454:67	21	bps
LEAF_NODE	6454:70	6454:70	19	,
ARGUMENT	6454:72	6454:72	19	count
FIELD	6454:72	6454:72	20	count
LEAF_NODE	6454:72	6454:72	21	count
LEAF_NODE	6454:77	6454:77	19	,
ARGUMENT	6455:54	6455:54	19	first_col
FIELD	6455:54	6455:54	20	first_col
LEAF_NODE	6455:54	6455:54	21	first_col
LEAF_NODE	6455:63	6455:63	19	,
ARGUMENT	6455:65	6455:76	19	last_col + 1
FIELD	6455:65	6455:65	20	last_col
LEAF_NODE	6455:65	6455:65	21	last_col
LEAF_NODE	6455:74	6455:74	20	+
FIELD	6455:76	6455:76	20	1
LEAF_NODE	6455:76	6455:76	21	1
LEAF_NODE	6455:77	6455:77	19	)
LEAF_NODE	6455:78	6455:78	16	)
STATEMENTS	6456:25	6460:11	16	
LEAF_NODE	6456:25	6456:25	17	{
STATEMENTS	6457:11	6459:11	17	
EXPR_STATEMENT	6457:11	6458:67	18	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6457:11	6457:11	19	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6457:11	6458:66	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6457:11	6457:11	21	TIFFError
LEAF_NODE	6457:11	6457:11	22	TIFFError
LEAF_NODE	6457:20	6457:20	21	(
ARGUMENT	6457:21	6457:21	21	"extractCompositeRegions"
FIELD	6457:21	6457:21	22	"extractCompositeRegions"
LEAF_NODE	6457:21	6457:21	23	"extractCompositeRegions"
LEAF_NODE	6457:46	6457:46	21	,
ARGUMENT	6458:35	6458:35	21	"Unable to extract row %d"
FIELD	6458:35	6458:35	22	"Unable to extract row %d"
LEAF_NODE	6458:35	6458:35	23	"Unable to extract row %d"
LEAF_NODE	6458:61	6458:61	21	,
ARGUMENT	6458:63	6458:63	21	row
FIELD	6458:63	6458:63	22	row
LEAF_NODE	6458:63	6458:63	23	row
LEAF_NODE	6458:66	6458:66	21	)
LEAF_NODE	6458:67	6458:67	19	;
JUMP_STATEMENT	6459:11	6459:21	18	return ( 1 ) ;
KEYWORD	6459:11	6459:11	19	return
LEAF_NODE	6459:11	6459:11	20	return
DESTINATION	6459:18	6459:18	19	( 1 )
EXPR	6459:18	6459:20	20	( 1 )
LEAF_NODE	6459:18	6459:18	21	(
FIELD	6459:19	6459:19	21	1
LEAF_NODE	6459:19	6459:19	22	1
LEAF_NODE	6459:20	6459:20	21	)
LEAF_NODE	6459:21	6459:21	19	;
LEAF_NODE	6460:11	6460:11	17	}
JUMP_STATEMENT	6461:9	6461:14	15	break DESTINATION ;
KEYWORD	6461:9	6461:9	16	break
LEAF_NODE	6461:9	6461:9	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6461:14	6461:14	16	;
LABEL	6462:15	6462:21	15	case 1 :
LEAF_NODE	6462:15	6462:15	16	case
LEAF_NODE	6462:20	6462:20	16	1
LEAF_NODE	6462:21	6462:21	16	:
SELECTION	6462:23	6463:25	15	
KEYWORD	6462:23	6462:23	16	if
LEAF_NODE	6462:23	6462:23	17	if
LEAF_NODE	6462:26	6462:26	16	(
CONDITION	6462:27	6462:27	16	bps == 1
EXPR	6462:27	6462:34	17	bps == 1
FIELD	6462:27	6462:27	18	bps
LEAF_NODE	6462:27	6462:27	19	bps
EQ_OPERATOR	6462:31	6462:31	18	==
LEAF_NODE	6462:31	6462:31	19	==
FIELD	6462:34	6462:34	18	1
LEAF_NODE	6462:34	6462:34	19	1
LEAF_NODE	6462:35	6462:35	16	)
STATEMENTS	6463:25	6474:4	16	
LEAF_NODE	6463:25	6463:25	17	{
STATEMENTS	6464:25	6473:11	17	
SELECTION	6464:25	6468:27	18	
KEYWORD	6464:25	6464:25	19	if
LEAF_NODE	6464:25	6464:25	20	if
LEAF_NODE	6464:28	6464:28	19	(
CONDITION	6464:29	6464:29	19	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6464:29	6464:29	20	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6464:29	6467:81	21	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6464:29	6464:29	22	extractContigSamplesShifted8bits
LEAF_NODE	6464:29	6464:29	23	extractContigSamplesShifted8bits
LEAF_NODE	6464:62	6464:62	22	(
ARGUMENT	6464:63	6464:63	22	src
FIELD	6464:63	6464:63	23	src
LEAF_NODE	6464:63	6464:63	24	src
LEAF_NODE	6464:66	6464:66	22	,
ARGUMENT	6464:68	6464:68	22	dst
FIELD	6464:68	6464:68	23	dst
LEAF_NODE	6464:68	6464:68	24	dst
LEAF_NODE	6464:71	6464:71	22	,
ARGUMENT	6464:73	6464:73	22	img_width
FIELD	6464:73	6464:73	23	img_width
LEAF_NODE	6464:73	6464:73	24	img_width
LEAF_NODE	6464:82	6464:82	22	,
ARGUMENT	6465:63	6465:63	22	sample
FIELD	6465:63	6465:63	23	sample
LEAF_NODE	6465:63	6465:63	24	sample
LEAF_NODE	6465:69	6465:69	22	,
ARGUMENT	6465:71	6465:71	22	spp
FIELD	6465:71	6465:71	23	spp
LEAF_NODE	6465:71	6465:71	24	spp
LEAF_NODE	6465:74	6465:74	22	,
ARGUMENT	6465:76	6465:76	22	bps
FIELD	6465:76	6465:76	23	bps
LEAF_NODE	6465:76	6465:76	24	bps
LEAF_NODE	6465:79	6465:79	22	,
ARGUMENT	6465:81	6465:81	22	count
FIELD	6465:81	6465:81	23	count
LEAF_NODE	6465:81	6465:81	24	count
LEAF_NODE	6465:86	6465:86	22	,
ARGUMENT	6466:63	6466:63	22	first_col
FIELD	6466:63	6466:63	23	first_col
LEAF_NODE	6466:63	6466:63	24	first_col
LEAF_NODE	6466:72	6466:72	22	,
ARGUMENT	6466:74	6466:85	22	last_col + 1
FIELD	6466:74	6466:74	23	last_col
LEAF_NODE	6466:74	6466:74	24	last_col
LEAF_NODE	6466:83	6466:83	23	+
FIELD	6466:85	6466:85	23	1
LEAF_NODE	6466:85	6466:85	24	1
LEAF_NODE	6466:86	6466:86	22	,
ARGUMENT	6467:63	6467:63	22	prev_trailing_bits
FIELD	6467:63	6467:63	23	prev_trailing_bits
LEAF_NODE	6467:63	6467:63	24	prev_trailing_bits
LEAF_NODE	6467:81	6467:81	22	)
LEAF_NODE	6467:82	6467:82	19	)
STATEMENTS	6468:27	6472:13	19	
LEAF_NODE	6468:27	6468:27	20	{
STATEMENTS	6469:13	6471:13	20	
EXPR_STATEMENT	6469:13	6470:69	21	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6469:13	6469:13	22	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6469:13	6470:68	23	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6469:13	6469:13	24	TIFFError
LEAF_NODE	6469:13	6469:13	25	TIFFError
LEAF_NODE	6469:22	6469:22	24	(
ARGUMENT	6469:23	6469:23	24	"extractCompositeRegions"
FIELD	6469:23	6469:23	25	"extractCompositeRegions"
LEAF_NODE	6469:23	6469:23	26	"extractCompositeRegions"
LEAF_NODE	6469:48	6469:48	24	,
ARGUMENT	6470:37	6470:37	24	"Unable to extract row %d"
FIELD	6470:37	6470:37	25	"Unable to extract row %d"
LEAF_NODE	6470:37	6470:37	26	"Unable to extract row %d"
LEAF_NODE	6470:63	6470:63	24	,
ARGUMENT	6470:65	6470:65	24	row
FIELD	6470:65	6470:65	25	row
LEAF_NODE	6470:65	6470:65	26	row
LEAF_NODE	6470:68	6470:68	24	)
LEAF_NODE	6470:69	6470:69	22	;
JUMP_STATEMENT	6471:13	6471:23	21	return ( 1 ) ;
KEYWORD	6471:13	6471:13	22	return
LEAF_NODE	6471:13	6471:13	23	return
DESTINATION	6471:20	6471:20	22	( 1 )
EXPR	6471:20	6471:22	23	( 1 )
LEAF_NODE	6471:20	6471:20	24	(
FIELD	6471:21	6471:21	24	1
LEAF_NODE	6471:21	6471:21	25	1
LEAF_NODE	6471:22	6471:22	24	)
LEAF_NODE	6471:23	6471:23	22	;
LEAF_NODE	6472:13	6472:13	20	}
JUMP_STATEMENT	6473:11	6473:16	18	break DESTINATION ;
KEYWORD	6473:11	6473:11	19	break
LEAF_NODE	6473:11	6473:11	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	6473:16	6473:16	19	;
LEAF_NODE	6474:4	6474:4	17	}
SELECTION	6475:23	6476:25	15	
KEYWORD	6475:23	6475:23	16	else
LEAF_NODE	6475:23	6475:23	17	else
STATEMENTS	6476:25	6476:25	16	
SELECTION	6476:25	6480:27	17	
KEYWORD	6476:25	6476:25	18	if
LEAF_NODE	6476:25	6476:25	19	if
LEAF_NODE	6476:28	6476:28	18	(
CONDITION	6476:29	6476:29	18	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6476:29	6476:29	19	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6476:29	6479:82	20	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6476:29	6476:29	21	extractContigSamplesShifted16bits
LEAF_NODE	6476:29	6476:29	22	extractContigSamplesShifted16bits
LEAF_NODE	6476:63	6476:63	21	(
ARGUMENT	6476:64	6476:64	21	src
FIELD	6476:64	6476:64	22	src
LEAF_NODE	6476:64	6476:64	23	src
LEAF_NODE	6476:67	6476:67	21	,
ARGUMENT	6476:69	6476:69	21	dst
FIELD	6476:69	6476:69	22	dst
LEAF_NODE	6476:69	6476:69	23	dst
LEAF_NODE	6476:72	6476:72	21	,
ARGUMENT	6476:74	6476:74	21	img_width
FIELD	6476:74	6476:74	22	img_width
LEAF_NODE	6476:74	6476:74	23	img_width
LEAF_NODE	6476:83	6476:83	21	,
ARGUMENT	6477:64	6477:64	21	sample
FIELD	6477:64	6477:64	22	sample
LEAF_NODE	6477:64	6477:64	23	sample
LEAF_NODE	6477:70	6477:70	21	,
ARGUMENT	6477:72	6477:72	21	spp
FIELD	6477:72	6477:72	22	spp
LEAF_NODE	6477:72	6477:72	23	spp
LEAF_NODE	6477:75	6477:75	21	,
ARGUMENT	6477:77	6477:77	21	bps
FIELD	6477:77	6477:77	22	bps
LEAF_NODE	6477:77	6477:77	23	bps
LEAF_NODE	6477:80	6477:80	21	,
ARGUMENT	6477:82	6477:82	21	count
FIELD	6477:82	6477:82	22	count
LEAF_NODE	6477:82	6477:82	23	count
LEAF_NODE	6477:87	6477:87	21	,
ARGUMENT	6478:64	6478:64	21	first_col
FIELD	6478:64	6478:64	22	first_col
LEAF_NODE	6478:64	6478:64	23	first_col
LEAF_NODE	6478:73	6478:73	21	,
ARGUMENT	6478:75	6478:86	21	last_col + 1
FIELD	6478:75	6478:75	22	last_col
LEAF_NODE	6478:75	6478:75	23	last_col
LEAF_NODE	6478:84	6478:84	22	+
FIELD	6478:86	6478:86	22	1
LEAF_NODE	6478:86	6478:86	23	1
LEAF_NODE	6478:87	6478:87	21	,
ARGUMENT	6479:64	6479:64	21	prev_trailing_bits
FIELD	6479:64	6479:64	22	prev_trailing_bits
LEAF_NODE	6479:64	6479:64	23	prev_trailing_bits
LEAF_NODE	6479:82	6479:82	21	)
LEAF_NODE	6479:83	6479:83	18	)
STATEMENTS	6480:27	6484:13	18	
LEAF_NODE	6480:27	6480:27	19	{
STATEMENTS	6481:13	6483:13	19	
EXPR_STATEMENT	6481:13	6482:69	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6481:13	6481:13	21	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6481:13	6482:68	22	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6481:13	6481:13	23	TIFFError
LEAF_NODE	6481:13	6481:13	24	TIFFError
LEAF_NODE	6481:22	6481:22	23	(
ARGUMENT	6481:23	6481:23	23	"extractCompositeRegions"
FIELD	6481:23	6481:23	24	"extractCompositeRegions"
LEAF_NODE	6481:23	6481:23	25	"extractCompositeRegions"
LEAF_NODE	6481:48	6481:48	23	,
ARGUMENT	6482:37	6482:37	23	"Unable to extract row %d"
FIELD	6482:37	6482:37	24	"Unable to extract row %d"
LEAF_NODE	6482:37	6482:37	25	"Unable to extract row %d"
LEAF_NODE	6482:63	6482:63	23	,
ARGUMENT	6482:65	6482:65	23	row
FIELD	6482:65	6482:65	24	row
LEAF_NODE	6482:65	6482:65	25	row
LEAF_NODE	6482:68	6482:68	23	)
LEAF_NODE	6482:69	6482:69	21	;
JUMP_STATEMENT	6483:13	6483:23	20	return ( 1 ) ;
KEYWORD	6483:13	6483:13	21	return
LEAF_NODE	6483:13	6483:13	22	return
DESTINATION	6483:20	6483:20	21	( 1 )
EXPR	6483:20	6483:22	22	( 1 )
LEAF_NODE	6483:20	6483:20	23	(
FIELD	6483:21	6483:21	23	1
LEAF_NODE	6483:21	6483:21	24	1
LEAF_NODE	6483:22	6483:22	23	)
LEAF_NODE	6483:23	6483:23	21	;
LEAF_NODE	6484:13	6484:13	19	}
JUMP_STATEMENT	6485:10	6485:15	15	break DESTINATION ;
KEYWORD	6485:10	6485:10	16	break
LEAF_NODE	6485:10	6485:10	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6485:15	6485:15	16	;
LABEL	6486:14	6486:20	15	case 2 :
LEAF_NODE	6486:14	6486:14	16	case
LEAF_NODE	6486:19	6486:19	16	2
LEAF_NODE	6486:20	6486:20	16	:
SELECTION	6486:23	6490:26	15	
KEYWORD	6486:23	6486:23	16	if
LEAF_NODE	6486:23	6486:23	17	if
LEAF_NODE	6486:26	6486:26	16	(
CONDITION	6486:27	6486:27	16	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6486:27	6486:27	17	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6486:27	6489:81	18	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6486:27	6486:27	19	extractContigSamplesShifted24bits
LEAF_NODE	6486:27	6486:27	20	extractContigSamplesShifted24bits
LEAF_NODE	6486:61	6486:61	19	(
ARGUMENT	6486:62	6486:62	19	src
FIELD	6486:62	6486:62	20	src
LEAF_NODE	6486:62	6486:62	21	src
LEAF_NODE	6486:65	6486:65	19	,
ARGUMENT	6486:67	6486:67	19	dst
FIELD	6486:67	6486:67	20	dst
LEAF_NODE	6486:67	6486:67	21	dst
LEAF_NODE	6486:70	6486:70	19	,
ARGUMENT	6486:72	6486:72	19	img_width
FIELD	6486:72	6486:72	20	img_width
LEAF_NODE	6486:72	6486:72	21	img_width
LEAF_NODE	6486:81	6486:81	19	,
ARGUMENT	6487:63	6487:63	19	sample
FIELD	6487:63	6487:63	20	sample
LEAF_NODE	6487:63	6487:63	21	sample
LEAF_NODE	6487:69	6487:69	19	,
ARGUMENT	6487:71	6487:71	19	spp
FIELD	6487:71	6487:71	20	spp
LEAF_NODE	6487:71	6487:71	21	spp
LEAF_NODE	6487:74	6487:74	19	,
ARGUMENT	6487:76	6487:76	19	bps
FIELD	6487:76	6487:76	20	bps
LEAF_NODE	6487:76	6487:76	21	bps
LEAF_NODE	6487:79	6487:79	19	,
ARGUMENT	6487:81	6487:81	19	count
FIELD	6487:81	6487:81	20	count
LEAF_NODE	6487:81	6487:81	21	count
LEAF_NODE	6487:86	6487:86	19	,
ARGUMENT	6488:63	6488:63	19	first_col
FIELD	6488:63	6488:63	20	first_col
LEAF_NODE	6488:63	6488:63	21	first_col
LEAF_NODE	6488:72	6488:72	19	,
ARGUMENT	6488:74	6488:85	19	last_col + 1
FIELD	6488:74	6488:74	20	last_col
LEAF_NODE	6488:74	6488:74	21	last_col
LEAF_NODE	6488:83	6488:83	20	+
FIELD	6488:85	6488:85	20	1
LEAF_NODE	6488:85	6488:85	21	1
LEAF_NODE	6488:86	6488:86	19	,
ARGUMENT	6489:63	6489:63	19	prev_trailing_bits
FIELD	6489:63	6489:63	20	prev_trailing_bits
LEAF_NODE	6489:63	6489:63	21	prev_trailing_bits
LEAF_NODE	6489:81	6489:81	19	)
LEAF_NODE	6489:82	6489:82	16	)
STATEMENTS	6490:26	6494:12	16	
LEAF_NODE	6490:26	6490:26	17	{
STATEMENTS	6491:12	6493:12	17	
EXPR_STATEMENT	6491:12	6492:68	18	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6491:12	6491:12	19	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6491:12	6492:67	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6491:12	6491:12	21	TIFFError
LEAF_NODE	6491:12	6491:12	22	TIFFError
LEAF_NODE	6491:21	6491:21	21	(
ARGUMENT	6491:22	6491:22	21	"extractCompositeRegions"
FIELD	6491:22	6491:22	22	"extractCompositeRegions"
LEAF_NODE	6491:22	6491:22	23	"extractCompositeRegions"
LEAF_NODE	6491:47	6491:47	21	,
ARGUMENT	6492:36	6492:36	21	"Unable to extract row %d"
FIELD	6492:36	6492:36	22	"Unable to extract row %d"
LEAF_NODE	6492:36	6492:36	23	"Unable to extract row %d"
LEAF_NODE	6492:62	6492:62	21	,
ARGUMENT	6492:64	6492:64	21	row
FIELD	6492:64	6492:64	22	row
LEAF_NODE	6492:64	6492:64	23	row
LEAF_NODE	6492:67	6492:67	21	)
LEAF_NODE	6492:68	6492:68	19	;
JUMP_STATEMENT	6493:12	6493:22	18	return ( 1 ) ;
KEYWORD	6493:12	6493:12	19	return
LEAF_NODE	6493:12	6493:12	20	return
DESTINATION	6493:19	6493:19	19	( 1 )
EXPR	6493:19	6493:21	20	( 1 )
LEAF_NODE	6493:19	6493:19	21	(
FIELD	6493:20	6493:20	21	1
LEAF_NODE	6493:20	6493:20	22	1
LEAF_NODE	6493:21	6493:21	21	)
LEAF_NODE	6493:22	6493:22	19	;
LEAF_NODE	6494:12	6494:12	17	}
JUMP_STATEMENT	6495:10	6495:15	15	break DESTINATION ;
KEYWORD	6495:10	6495:10	16	break
LEAF_NODE	6495:10	6495:10	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6495:15	6495:15	16	;
LABEL	6496:15	6496:21	15	case 3 :
LEAF_NODE	6496:15	6496:15	16	case
LEAF_NODE	6496:20	6496:20	16	3
LEAF_NODE	6496:21	6496:21	16	:
LABEL	6497:15	6497:21	15	case 4 :
LEAF_NODE	6497:15	6497:15	16	case
LEAF_NODE	6497:20	6497:20	16	4
LEAF_NODE	6497:21	6497:21	16	:
LABEL	6498:15	6498:21	15	case 5 :
LEAF_NODE	6498:15	6498:15	16	case
LEAF_NODE	6498:20	6498:20	16	5
LEAF_NODE	6498:21	6498:21	16	:
SELECTION	6498:24	6502:26	15	
KEYWORD	6498:24	6498:24	16	if
LEAF_NODE	6498:24	6498:24	17	if
LEAF_NODE	6498:27	6498:27	16	(
CONDITION	6498:28	6498:28	16	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6498:28	6498:28	17	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6498:28	6501:81	18	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6498:28	6498:28	19	extractContigSamplesShifted32bits
LEAF_NODE	6498:28	6498:28	20	extractContigSamplesShifted32bits
LEAF_NODE	6498:62	6498:62	19	(
ARGUMENT	6498:63	6498:63	19	src
FIELD	6498:63	6498:63	20	src
LEAF_NODE	6498:63	6498:63	21	src
LEAF_NODE	6498:66	6498:66	19	,
ARGUMENT	6498:68	6498:68	19	dst
FIELD	6498:68	6498:68	20	dst
LEAF_NODE	6498:68	6498:68	21	dst
LEAF_NODE	6498:71	6498:71	19	,
ARGUMENT	6498:73	6498:73	19	img_width
FIELD	6498:73	6498:73	20	img_width
LEAF_NODE	6498:73	6498:73	21	img_width
LEAF_NODE	6498:82	6498:82	19	,
ARGUMENT	6499:63	6499:63	19	sample
FIELD	6499:63	6499:63	20	sample
LEAF_NODE	6499:63	6499:63	21	sample
LEAF_NODE	6499:69	6499:69	19	,
ARGUMENT	6499:71	6499:71	19	spp
FIELD	6499:71	6499:71	20	spp
LEAF_NODE	6499:71	6499:71	21	spp
LEAF_NODE	6499:74	6499:74	19	,
ARGUMENT	6499:76	6499:76	19	bps
FIELD	6499:76	6499:76	20	bps
LEAF_NODE	6499:76	6499:76	21	bps
LEAF_NODE	6499:79	6499:79	19	,
ARGUMENT	6499:81	6499:81	19	count
FIELD	6499:81	6499:81	20	count
LEAF_NODE	6499:81	6499:81	21	count
LEAF_NODE	6499:86	6499:86	19	,
ARGUMENT	6500:63	6500:63	19	first_col
FIELD	6500:63	6500:63	20	first_col
LEAF_NODE	6500:63	6500:63	21	first_col
LEAF_NODE	6500:72	6500:72	19	,
ARGUMENT	6500:74	6500:85	19	last_col + 1
FIELD	6500:74	6500:74	20	last_col
LEAF_NODE	6500:74	6500:74	21	last_col
LEAF_NODE	6500:83	6500:83	20	+
FIELD	6500:85	6500:85	20	1
LEAF_NODE	6500:85	6500:85	21	1
LEAF_NODE	6500:86	6500:86	19	,
ARGUMENT	6501:63	6501:63	19	prev_trailing_bits
FIELD	6501:63	6501:63	20	prev_trailing_bits
LEAF_NODE	6501:63	6501:63	21	prev_trailing_bits
LEAF_NODE	6501:81	6501:81	19	)
LEAF_NODE	6501:82	6501:82	16	)
STATEMENTS	6502:26	6506:12	16	
LEAF_NODE	6502:26	6502:26	17	{
STATEMENTS	6503:12	6505:12	17	
EXPR_STATEMENT	6503:12	6504:68	18	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row ) ;
EXPR	6503:12	6503:12	19	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
FUNCTION_CALL	6503:12	6504:67	20	TIFFError ( "extractCompositeRegions" , "Unable to extract row %d" , row )
CALLEE	6503:12	6503:12	21	TIFFError
LEAF_NODE	6503:12	6503:12	22	TIFFError
LEAF_NODE	6503:21	6503:21	21	(
ARGUMENT	6503:22	6503:22	21	"extractCompositeRegions"
FIELD	6503:22	6503:22	22	"extractCompositeRegions"
LEAF_NODE	6503:22	6503:22	23	"extractCompositeRegions"
LEAF_NODE	6503:47	6503:47	21	,
ARGUMENT	6504:36	6504:36	21	"Unable to extract row %d"
FIELD	6504:36	6504:36	22	"Unable to extract row %d"
LEAF_NODE	6504:36	6504:36	23	"Unable to extract row %d"
LEAF_NODE	6504:62	6504:62	21	,
ARGUMENT	6504:64	6504:64	21	row
FIELD	6504:64	6504:64	22	row
LEAF_NODE	6504:64	6504:64	23	row
LEAF_NODE	6504:67	6504:67	21	)
LEAF_NODE	6504:68	6504:68	19	;
JUMP_STATEMENT	6505:12	6505:22	18	return ( 1 ) ;
KEYWORD	6505:12	6505:12	19	return
LEAF_NODE	6505:12	6505:12	20	return
DESTINATION	6505:19	6505:19	19	( 1 )
EXPR	6505:19	6505:21	20	( 1 )
LEAF_NODE	6505:19	6505:19	21	(
FIELD	6505:20	6505:20	21	1
LEAF_NODE	6505:20	6505:20	22	1
LEAF_NODE	6505:21	6505:21	21	)
LEAF_NODE	6505:22	6505:22	19	;
LEAF_NODE	6506:12	6506:12	17	}
JUMP_STATEMENT	6507:10	6507:15	15	break DESTINATION ;
KEYWORD	6507:10	6507:10	16	break
LEAF_NODE	6507:10	6507:10	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	6507:15	6507:15	16	;
LABEL	6508:15	6508:22	15	default :
LEAF_NODE	6508:15	6508:15	16	default
LEAF_NODE	6508:22	6508:22	16	:
EXPR_STATEMENT	6508:24	6508:93	15	TIFFError ( "extractCompositeRegions" , "Unsupported bit depth %d" , bps ) ;
EXPR	6508:24	6508:24	16	TIFFError ( "extractCompositeRegions" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	6508:24	6508:92	17	TIFFError ( "extractCompositeRegions" , "Unsupported bit depth %d" , bps )
CALLEE	6508:24	6508:24	18	TIFFError
LEAF_NODE	6508:24	6508:24	19	TIFFError
LEAF_NODE	6508:33	6508:33	18	(
ARGUMENT	6508:34	6508:34	18	"extractCompositeRegions"
FIELD	6508:34	6508:34	19	"extractCompositeRegions"
LEAF_NODE	6508:34	6508:34	20	"extractCompositeRegions"
LEAF_NODE	6508:59	6508:59	18	,
ARGUMENT	6508:61	6508:61	18	"Unsupported bit depth %d"
FIELD	6508:61	6508:61	19	"Unsupported bit depth %d"
LEAF_NODE	6508:61	6508:61	20	"Unsupported bit depth %d"
LEAF_NODE	6508:87	6508:87	18	,
ARGUMENT	6508:89	6508:89	18	bps
FIELD	6508:89	6508:89	19	bps
LEAF_NODE	6508:89	6508:89	20	bps
LEAF_NODE	6508:92	6508:92	18	)
LEAF_NODE	6508:93	6508:93	16	;
JUMP_STATEMENT	6509:10	6509:20	15	return ( 1 ) ;
KEYWORD	6509:10	6509:10	16	return
LEAF_NODE	6509:10	6509:10	17	return
DESTINATION	6509:17	6509:17	16	( 1 )
EXPR	6509:17	6509:19	17	( 1 )
LEAF_NODE	6509:17	6509:17	18	(
FIELD	6509:18	6509:18	18	1
LEAF_NODE	6509:18	6509:18	19	1
LEAF_NODE	6509:19	6509:19	18	)
LEAF_NODE	6509:20	6509:20	16	;
LEAF_NODE	6510:8	6510:8	14	}
LEAF_NODE	6511:6	6511:6	11	}
LEAF_NODE	6512:4	6512:4	9	prev_width
LEAF_NODE	6512:15	6512:15	9	+=
LEAF_NODE	6512:18	6512:18	9	(
LEAF_NODE	6512:19	6512:19	9	crop_width
LEAF_NODE	6512:30	6512:30	9	*
LEAF_NODE	6512:32	6512:32	9	bps
LEAF_NODE	6512:36	6512:36	9	*
LEAF_NODE	6512:38	6512:38	9	count
LEAF_NODE	6512:43	6512:43	9	)
LEAF_NODE	6512:45	6512:45	9	/
EXPR_STATEMENT	6512:47	6512:48	9	8 ;
EXPR	6512:47	6512:47	10	8
FIELD	6512:47	6512:47	11	8
LEAF_NODE	6512:47	6512:47	12	8
LEAF_NODE	6512:48	6512:48	10	;
EXPR_STATEMENT	6513:11	6513:46	9	prev_trailing_bits += trailing_bits ;
EXPR	6513:11	6513:11	10	prev_trailing_bits += trailing_bits
ASSIGN	6513:11	6513:33	11	prev_trailing_bits += trailing_bits
LVAL	6513:11	6513:11	12	prev_trailing_bits
FIELD	6513:11	6513:11	13	prev_trailing_bits
LEAF_NODE	6513:11	6513:11	14	prev_trailing_bits
ASSIGN_OP	6513:30	6513:30	12	+=
LEAF_NODE	6513:30	6513:30	13	+=
RVAL	6513:33	6513:33	12	trailing_bits
FIELD	6513:33	6513:33	13	trailing_bits
LEAF_NODE	6513:33	6513:33	14	trailing_bits
LEAF_NODE	6513:46	6513:46	10	;
SELECTION	6514:11	6515:6	9	
KEYWORD	6514:11	6514:11	10	if
LEAF_NODE	6514:11	6514:11	11	if
LEAF_NODE	6514:14	6514:14	10	(
CONDITION	6514:15	6514:15	10	prev_trailing_bits > 7
EXPR	6514:15	6514:36	11	prev_trailing_bits > 7
FIELD	6514:15	6514:15	12	prev_trailing_bits
LEAF_NODE	6514:15	6514:15	13	prev_trailing_bits
REL_OPERATOR	6514:34	6514:34	12	>
LEAF_NODE	6514:34	6514:34	13	>
FIELD	6514:36	6514:36	12	7
LEAF_NODE	6514:36	6514:36	13	7
LEAF_NODE	6514:37	6514:37	10	)
STATEMENTS	6515:6	6515:6	10	
EXPR_STATEMENT	6515:6	6515:28	11	prev_trailing_bits -= 8 ;
EXPR	6515:6	6515:6	12	prev_trailing_bits -= 8
ASSIGN	6515:6	6515:27	13	prev_trailing_bits -= 8
LVAL	6515:6	6515:6	14	prev_trailing_bits
FIELD	6515:6	6515:6	15	prev_trailing_bits
LEAF_NODE	6515:6	6515:6	16	prev_trailing_bits
ASSIGN_OP	6515:24	6515:24	14	-=
LEAF_NODE	6515:24	6515:24	15	-=
RVAL	6515:27	6515:27	14	8
FIELD	6515:27	6515:27	15	8
LEAF_NODE	6515:27	6515:27	16	8
LEAF_NODE	6515:28	6515:28	12	;
JUMP_STATEMENT	6516:4	6516:9	9	break DESTINATION ;
KEYWORD	6516:4	6516:4	10	break
LEAF_NODE	6516:4	6516:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	6516:9	6516:9	10	;
LEAF_NODE	6517:6	6517:6	8	}
LEAF_NODE	6518:4	6518:4	5	}
SELECTION	6519:2	6520:4	3	
KEYWORD	6519:2	6519:2	4	if
LEAF_NODE	6519:2	6519:2	5	if
LEAF_NODE	6519:5	6519:5	4	(
CONDITION	6519:6	6519:6	4	crop -> combined_width != composite_width
EXPR	6519:6	6519:30	5	crop -> combined_width != composite_width
FIELD	6519:6	6519:12	6	crop -> combined_width
LEAF_NODE	6519:6	6519:6	7	crop
LEAF_NODE	6519:10	6519:10	7	->
LEAF_NODE	6519:12	6519:12	7	combined_width
EQ_OPERATOR	6519:27	6519:27	6	!=
LEAF_NODE	6519:27	6519:27	7	!=
FIELD	6519:30	6519:30	6	composite_width
LEAF_NODE	6519:30	6519:30	7	composite_width
LEAF_NODE	6519:45	6519:45	4	)
STATEMENTS	6520:4	6520:4	4	
EXPR_STATEMENT	6520:4	6520:87	5	TIFFError ( "combineSeparateRegions" , "Combined width does not match composite width" ) ;
EXPR	6520:4	6520:4	6	TIFFError ( "combineSeparateRegions" , "Combined width does not match composite width" )
FUNCTION_CALL	6520:4	6520:86	7	TIFFError ( "combineSeparateRegions" , "Combined width does not match composite width" )
CALLEE	6520:4	6520:4	8	TIFFError
LEAF_NODE	6520:4	6520:4	9	TIFFError
LEAF_NODE	6520:13	6520:13	8	(
ARGUMENT	6520:14	6520:14	8	"combineSeparateRegions"
FIELD	6520:14	6520:14	9	"combineSeparateRegions"
LEAF_NODE	6520:14	6520:14	10	"combineSeparateRegions"
LEAF_NODE	6520:38	6520:38	8	,
ARGUMENT	6520:39	6520:39	8	"Combined width does not match composite width"
FIELD	6520:39	6520:39	9	"Combined width does not match composite width"
LEAF_NODE	6520:39	6520:39	10	"Combined width does not match composite width"
LEAF_NODE	6520:86	6520:86	8	)
LEAF_NODE	6520:87	6520:87	6	;
JUMP_STATEMENT	6522:2	6522:12	3	return ( 0 ) ;
KEYWORD	6522:2	6522:2	4	return
LEAF_NODE	6522:2	6522:2	5	return
DESTINATION	6522:9	6522:9	4	( 0 )
EXPR	6522:9	6522:11	5	( 0 )
LEAF_NODE	6522:9	6522:9	6	(
FIELD	6522:10	6522:10	6	0
LEAF_NODE	6522:10	6522:10	7	0
LEAF_NODE	6522:11	6522:11	6	)
LEAF_NODE	6522:12	6522:12	4	;
LEAF_NODE	6523:2	6523:2	2	}
FUNCTION_DEF	6536:0	6657:2	1	
RETURN_TYPE	6536:0	6536:7	2	static int
LEAF_NODE	6536:0	6536:0	3	static
TYPE_NAME	6536:7	6536:7	3	int
LEAF_NODE	6536:7	6536:7	4	int
FUNCTION_NAME	6537:0	6537:0	2	extractSeparateRegion
LEAF_NODE	6537:0	6537:0	3	extractSeparateRegion
PARAMETER_LIST	6537:21	6539:32	2	( struct image_data * image , struct crop_mask * crop , unsigned char * read_buff , unsigned char * crop_buff , int region )
LEAF_NODE	6537:21	6537:21	3	(
PARAMETER_DECL	6537:22	6537:41	3	struct image_data * image
TYPE	6537:22	6537:40	4	struct image_data *
TYPE_NAME	6537:22	6537:29	5	struct image_data
LEAF_NODE	6537:22	6537:22	6	struct
LEAF_NODE	6537:29	6537:29	6	image_data
POINTER	6537:40	6537:40	5	*
LEAF_NODE	6537:40	6537:40	6	*
NAME	6537:41	6537:41	4	image
LEAF_NODE	6537:41	6537:41	5	image
LEAF_NODE	6537:46	6537:46	3	,
PARAMETER_DECL	6537:49	6537:67	3	struct crop_mask * crop
TYPE	6537:49	6537:66	4	struct crop_mask *
TYPE_NAME	6537:49	6537:56	5	struct crop_mask
LEAF_NODE	6537:49	6537:49	6	struct
LEAF_NODE	6537:56	6537:56	6	crop_mask
POINTER	6537:66	6537:66	5	*
LEAF_NODE	6537:66	6537:66	6	*
NAME	6537:67	6537:67	4	crop
LEAF_NODE	6537:67	6537:67	5	crop
LEAF_NODE	6537:71	6537:71	3	,
PARAMETER_DECL	6538:22	6538:37	3	unsigned char * read_buff
TYPE	6538:22	6538:36	4	unsigned char *
TYPE_NAME	6538:22	6538:31	5	unsigned char
LEAF_NODE	6538:22	6538:22	6	unsigned
LEAF_NODE	6538:31	6538:31	6	char
POINTER	6538:36	6538:36	5	*
LEAF_NODE	6538:36	6538:36	6	*
NAME	6538:37	6538:37	4	read_buff
LEAF_NODE	6538:37	6538:37	5	read_buff
LEAF_NODE	6538:46	6538:46	3	,
PARAMETER_DECL	6538:48	6538:63	3	unsigned char * crop_buff
TYPE	6538:48	6538:62	4	unsigned char *
TYPE_NAME	6538:48	6538:57	5	unsigned char
LEAF_NODE	6538:48	6538:48	6	unsigned
LEAF_NODE	6538:57	6538:57	6	char
POINTER	6538:62	6538:62	5	*
LEAF_NODE	6538:62	6538:62	6	*
NAME	6538:63	6538:63	4	crop_buff
LEAF_NODE	6538:63	6538:63	5	crop_buff
LEAF_NODE	6538:72	6538:72	3	,
PARAMETER_DECL	6539:22	6539:26	3	int region
TYPE	6539:22	6539:22	4	int
TYPE_NAME	6539:22	6539:22	5	int
LEAF_NODE	6539:22	6539:22	6	int
NAME	6539:26	6539:26	4	region
LEAF_NODE	6539:26	6539:26	5	region
LEAF_NODE	6539:32	6539:32	3	)
LEAF_NODE	6540:2	6540:2	2	{
STATEMENTS	6541:2	6656:2	2	
SIMPLE_DECL	6541:2	6541:45	3	int shift_width , int prev_trailing_bits ; prev_trailing_bits = 0 ;
INIT_DECL_LIST	6541:2	6541:2	4	int shift_width , int prev_trailing_bits ; prev_trailing_bits = 0
VAR_DECL	6541:2	6541:10	5	int shift_width
TYPE	6541:2	6541:2	6	int
TYPE_NAME	6541:2	6541:2	7	int
LEAF_NODE	6541:2	6541:2	8	int
NAME	6541:10	6541:10	6	shift_width
LEAF_NODE	6541:10	6541:10	7	shift_width
LEAF_NODE	6541:21	6541:21	5	,
VAR_DECL	6541:2	6541:23	5	int prev_trailing_bits ; prev_trailing_bits = 0
TYPE	6541:2	6541:2	6	int
TYPE_NAME	6541:2	6541:2	7	int
LEAF_NODE	6541:2	6541:2	8	int
NAME	6541:23	6541:23	6	prev_trailing_bits
LEAF_NODE	6541:23	6541:23	7	prev_trailing_bits
LEAF_NODE	0:0	0:0	6	;
INIT	6541:23	6541:23	6	prev_trailing_bits = 0
ASSIGN	6541:23	6541:44	7	prev_trailing_bits = 0
LVAL	6541:23	6541:23	8	prev_trailing_bits
NAME	6541:23	6541:23	9	prev_trailing_bits
LEAF_NODE	6541:23	6541:23	10	prev_trailing_bits
ASSIGN_OP	6541:42	6541:42	8	=
LEAF_NODE	6541:42	6541:42	9	=
RVAL	6541:44	6541:44	8	0
FIELD	6541:44	6541:44	9	0
LEAF_NODE	6541:44	6541:44	10	0
LEAF_NODE	6541:45	6541:45	4	;
SIMPLE_DECL	6542:2	6542:43	3	uint32 bytes_per_sample , uint32 bytes_per_pixel ;
INIT_DECL_LIST	6542:2	6542:2	4	uint32 bytes_per_sample , uint32 bytes_per_pixel
VAR_DECL	6542:2	6542:10	5	uint32 bytes_per_sample
TYPE	6542:2	6542:2	6	uint32
TYPE_NAME	6542:2	6542:2	7	uint32
LEAF_NODE	6542:2	6542:2	8	uint32
NAME	6542:10	6542:10	6	bytes_per_sample
LEAF_NODE	6542:10	6542:10	7	bytes_per_sample
LEAF_NODE	6542:26	6542:26	5	,
VAR_DECL	6542:2	6542:28	5	uint32 bytes_per_pixel
TYPE	6542:2	6542:2	6	uint32
TYPE_NAME	6542:2	6542:2	7	uint32
LEAF_NODE	6542:2	6542:2	8	uint32
NAME	6542:28	6542:28	6	bytes_per_pixel
LEAF_NODE	6542:28	6542:28	7	bytes_per_pixel
LEAF_NODE	6542:43	6542:43	4	;
SIMPLE_DECL	6543:2	6543:34	3	uint32 src_rowsize , uint32 dst_rowsize ;
INIT_DECL_LIST	6543:2	6543:2	4	uint32 src_rowsize , uint32 dst_rowsize
VAR_DECL	6543:2	6543:10	5	uint32 src_rowsize
TYPE	6543:2	6543:2	6	uint32
TYPE_NAME	6543:2	6543:2	7	uint32
LEAF_NODE	6543:2	6543:2	8	uint32
NAME	6543:10	6543:10	6	src_rowsize
LEAF_NODE	6543:10	6543:10	7	src_rowsize
LEAF_NODE	6543:21	6543:21	5	,
VAR_DECL	6543:2	6543:23	5	uint32 dst_rowsize
TYPE	6543:2	6543:2	6	uint32
TYPE_NAME	6543:2	6543:2	7	uint32
LEAF_NODE	6543:2	6543:2	8	uint32
NAME	6543:23	6543:23	6	dst_rowsize
LEAF_NODE	6543:23	6543:23	7	dst_rowsize
LEAF_NODE	6543:34	6543:34	4	;
SIMPLE_DECL	6544:2	6544:55	3	uint32 row , uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col ;
INIT_DECL_LIST	6544:2	6544:2	4	uint32 row , uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6544:2	6544:10	5	uint32 row
TYPE	6544:2	6544:2	6	uint32
TYPE_NAME	6544:2	6544:2	7	uint32
LEAF_NODE	6544:2	6544:2	8	uint32
NAME	6544:10	6544:10	6	row
LEAF_NODE	6544:10	6544:10	7	row
LEAF_NODE	6544:13	6544:13	5	,
INIT_DECL_LIST	6544:2	6544:2	5	uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6544:2	6544:15	6	uint32 first_row
TYPE	6544:2	6544:2	7	uint32
TYPE_NAME	6544:2	6544:2	8	uint32
LEAF_NODE	6544:2	6544:2	9	uint32
NAME	6544:15	6544:15	7	first_row
LEAF_NODE	6544:15	6544:15	8	first_row
LEAF_NODE	6544:24	6544:24	6	,
INIT_DECL_LIST	6544:2	6544:2	6	uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6544:2	6544:26	7	uint32 last_row
TYPE	6544:2	6544:2	8	uint32
TYPE_NAME	6544:2	6544:2	9	uint32
LEAF_NODE	6544:2	6544:2	10	uint32
NAME	6544:26	6544:26	8	last_row
LEAF_NODE	6544:26	6544:26	9	last_row
LEAF_NODE	6544:34	6544:34	7	,
INIT_DECL_LIST	6544:2	6544:2	7	uint32 first_col , uint32 last_col
VAR_DECL	6544:2	6544:36	8	uint32 first_col
TYPE	6544:2	6544:2	9	uint32
TYPE_NAME	6544:2	6544:2	10	uint32
LEAF_NODE	6544:2	6544:2	11	uint32
NAME	6544:36	6544:36	9	first_col
LEAF_NODE	6544:36	6544:36	10	first_col
LEAF_NODE	6544:45	6544:45	8	,
VAR_DECL	6544:2	6544:47	8	uint32 last_col
TYPE	6544:2	6544:2	9	uint32
TYPE_NAME	6544:2	6544:2	10	uint32
LEAF_NODE	6544:2	6544:2	11	uint32
NAME	6544:47	6544:47	9	last_col
LEAF_NODE	6544:47	6544:47	10	last_col
LEAF_NODE	6544:55	6544:55	4	;
SIMPLE_DECL	6545:2	6545:32	3	uint32 src_offset , uint32 dst_offset ;
INIT_DECL_LIST	6545:2	6545:2	4	uint32 src_offset , uint32 dst_offset
VAR_DECL	6545:2	6545:10	5	uint32 src_offset
TYPE	6545:2	6545:2	6	uint32
TYPE_NAME	6545:2	6545:2	7	uint32
LEAF_NODE	6545:2	6545:2	8	uint32
NAME	6545:10	6545:10	6	src_offset
LEAF_NODE	6545:10	6545:10	7	src_offset
LEAF_NODE	6545:20	6545:20	5	,
VAR_DECL	6545:2	6545:22	5	uint32 dst_offset
TYPE	6545:2	6545:2	6	uint32
TYPE_NAME	6545:2	6545:2	7	uint32
LEAF_NODE	6545:2	6545:2	8	uint32
NAME	6545:22	6545:22	6	dst_offset
LEAF_NODE	6545:22	6545:22	7	dst_offset
LEAF_NODE	6545:32	6545:32	4	;
SIMPLE_DECL	6546:2	6546:62	3	uint32 crop_width , uint32 crop_length , uint32 img_width ;
INIT_DECL_LIST	6546:2	6546:2	4	uint32 crop_width , uint32 crop_length , uint32 img_width
VAR_DECL	6546:2	6546:10	5	uint32 crop_width
TYPE	6546:2	6546:2	6	uint32
TYPE_NAME	6546:2	6546:2	7	uint32
LEAF_NODE	6546:2	6546:2	8	uint32
NAME	6546:10	6546:10	6	crop_width
LEAF_NODE	6546:10	6546:10	7	crop_width
LEAF_NODE	6546:20	6546:20	5	,
INIT_DECL_LIST	6546:2	6546:2	5	uint32 crop_length , uint32 img_width
VAR_DECL	6546:2	6546:22	6	uint32 crop_length
TYPE	6546:2	6546:2	7	uint32
TYPE_NAME	6546:2	6546:2	8	uint32
LEAF_NODE	6546:2	6546:2	9	uint32
NAME	6546:22	6546:22	7	crop_length
LEAF_NODE	6546:22	6546:22	8	crop_length
LEAF_NODE	6546:33	6546:33	6	,
VAR_DECL	6546:2	6546:35	6	uint32 img_width
TYPE	6546:2	6546:2	7	uint32
TYPE_NAME	6546:2	6546:2	8	uint32
LEAF_NODE	6546:2	6546:2	9	uint32
NAME	6546:35	6546:35	7	img_width
LEAF_NODE	6546:35	6546:35	8	img_width
LEAF_NODE	6546:62	6546:62	4	;
SIMPLE_DECL	6547:2	6547:18	3	uint16 bps , uint16 spp ;
INIT_DECL_LIST	6547:2	6547:2	4	uint16 bps , uint16 spp
VAR_DECL	6547:2	6547:10	5	uint16 bps
TYPE	6547:2	6547:2	6	uint16
TYPE_NAME	6547:2	6547:2	7	uint16
LEAF_NODE	6547:2	6547:2	8	uint16
NAME	6547:10	6547:10	6	bps
LEAF_NODE	6547:10	6547:10	7	bps
LEAF_NODE	6547:13	6547:13	5	,
VAR_DECL	6547:2	6547:15	5	uint16 spp
TYPE	6547:2	6547:2	6	uint16
TYPE_NAME	6547:2	6547:2	7	uint16
LEAF_NODE	6547:2	6547:2	8	uint16
NAME	6547:15	6547:15	6	spp
LEAF_NODE	6547:15	6547:15	7	spp
LEAF_NODE	6547:18	6547:18	4	;
SIMPLE_DECL	6548:2	6548:19	3	uint8 * src , uint8 * dst ;
INIT_DECL_LIST	6548:2	6548:2	4	uint8 * src , uint8 * dst
VAR_DECL	6548:2	6548:10	5	uint8 * src
TYPE	6548:2	6548:9	6	uint8 *
TYPE_NAME	6548:2	6548:2	7	uint8
LEAF_NODE	6548:2	6548:2	8	uint8
POINTER	6548:9	6548:9	7	*
LEAF_NODE	6548:9	6548:9	8	*
NAME	6548:10	6548:10	6	src
LEAF_NODE	6548:10	6548:10	7	src
LEAF_NODE	6548:13	6548:13	5	,
VAR_DECL	6548:2	6548:16	5	uint8 * dst
TYPE	6548:2	6548:15	6	uint8 *
TYPE_NAME	6548:2	6548:2	7	uint8
LEAF_NODE	6548:2	6548:2	8	uint8
POINTER	6548:15	6548:15	7	*
LEAF_NODE	6548:15	6548:15	8	*
NAME	6548:16	6548:16	6	dst
LEAF_NODE	6548:16	6548:16	7	dst
LEAF_NODE	6548:19	6548:19	4	;
SIMPLE_DECL	6549:2	6549:29	3	tsample_t count , tsample_t sample ; sample = 0 ;
INIT_DECL_LIST	6549:2	6549:2	4	tsample_t count , tsample_t sample ; sample = 0
VAR_DECL	6549:2	6549:12	5	tsample_t count
TYPE	6549:2	6549:2	6	tsample_t
TYPE_NAME	6549:2	6549:2	7	tsample_t
LEAF_NODE	6549:2	6549:2	8	tsample_t
NAME	6549:12	6549:12	6	count
LEAF_NODE	6549:12	6549:12	7	count
LEAF_NODE	6549:17	6549:17	5	,
VAR_DECL	6549:2	6549:19	5	tsample_t sample ; sample = 0
TYPE	6549:2	6549:2	6	tsample_t
TYPE_NAME	6549:2	6549:2	7	tsample_t
LEAF_NODE	6549:2	6549:2	8	tsample_t
NAME	6549:19	6549:19	6	sample
LEAF_NODE	6549:19	6549:19	7	sample
LEAF_NODE	0:0	0:0	6	;
INIT	6549:19	6549:19	6	sample = 0
ASSIGN	6549:19	6549:28	7	sample = 0
LVAL	6549:19	6549:19	8	sample
NAME	6549:19	6549:19	9	sample
LEAF_NODE	6549:19	6549:19	10	sample
ASSIGN_OP	6549:26	6549:26	8	=
LEAF_NODE	6549:26	6549:26	9	=
RVAL	6549:28	6549:28	8	0
FIELD	6549:28	6549:28	9	0
LEAF_NODE	6549:28	6549:28	10	0
LEAF_NODE	6549:29	6549:29	4	;
EXPR_STATEMENT	6551:2	6551:26	3	img_width = image -> width ;
EXPR	6551:2	6551:2	4	img_width = image -> width
ASSIGN	6551:2	6551:14	5	img_width = image -> width
LVAL	6551:2	6551:2	6	img_width
FIELD	6551:2	6551:2	7	img_width
LEAF_NODE	6551:2	6551:2	8	img_width
ASSIGN_OP	6551:12	6551:12	6	=
LEAF_NODE	6551:12	6551:12	7	=
RVAL	6551:14	6551:14	6	image -> width
FIELD	6551:14	6551:21	7	image -> width
LEAF_NODE	6551:14	6551:14	8	image
LEAF_NODE	6551:19	6551:19	8	->
LEAF_NODE	6551:21	6551:21	8	width
LEAF_NODE	6551:26	6551:26	4	;
EXPR_STATEMENT	6553:2	6553:18	3	bps = image -> bps ;
EXPR	6553:2	6553:2	4	bps = image -> bps
ASSIGN	6553:2	6553:8	5	bps = image -> bps
LVAL	6553:2	6553:2	6	bps
FIELD	6553:2	6553:2	7	bps
LEAF_NODE	6553:2	6553:2	8	bps
ASSIGN_OP	6553:6	6553:6	6	=
LEAF_NODE	6553:6	6553:6	7	=
RVAL	6553:8	6553:8	6	image -> bps
FIELD	6553:8	6553:15	7	image -> bps
LEAF_NODE	6553:8	6553:8	8	image
LEAF_NODE	6553:13	6553:13	8	->
LEAF_NODE	6553:15	6553:15	8	bps
LEAF_NODE	6553:18	6553:18	4	;
EXPR_STATEMENT	6554:2	6554:18	3	spp = image -> spp ;
EXPR	6554:2	6554:2	4	spp = image -> spp
ASSIGN	6554:2	6554:8	5	spp = image -> spp
LVAL	6554:2	6554:2	6	spp
FIELD	6554:2	6554:2	7	spp
LEAF_NODE	6554:2	6554:2	8	spp
ASSIGN_OP	6554:6	6554:6	6	=
LEAF_NODE	6554:6	6554:6	7	=
RVAL	6554:8	6554:8	6	image -> spp
FIELD	6554:8	6554:15	7	image -> spp
LEAF_NODE	6554:8	6554:8	8	image
LEAF_NODE	6554:13	6554:13	8	->
LEAF_NODE	6554:15	6554:15	8	spp
LEAF_NODE	6554:18	6554:18	4	;
EXPR_STATEMENT	6555:2	6555:13	3	count = spp ;
EXPR	6555:2	6555:2	4	count = spp
ASSIGN	6555:2	6555:10	5	count = spp
LVAL	6555:2	6555:2	6	count
FIELD	6555:2	6555:2	7	count
LEAF_NODE	6555:2	6555:2	8	count
ASSIGN_OP	6555:8	6555:8	6	=
LEAF_NODE	6555:8	6555:8	7	=
RVAL	6555:10	6555:10	6	spp
FIELD	6555:10	6555:10	7	spp
LEAF_NODE	6555:10	6555:10	8	spp
LEAF_NODE	6555:13	6555:13	4	;
EXPR_STATEMENT	6557:2	6557:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	6557:2	6557:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	6557:2	6557:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	6557:2	6557:2	6	bytes_per_sample
FIELD	6557:2	6557:2	7	bytes_per_sample
LEAF_NODE	6557:2	6557:2	8	bytes_per_sample
ASSIGN_OP	6557:19	6557:19	6	=
LEAF_NODE	6557:19	6557:19	7	=
RVAL	6557:21	6557:33	6	( bps + 7 ) / 8
LEAF_NODE	6557:21	6557:21	7	(
FIELD	6557:22	6557:22	7	bps
LEAF_NODE	6557:22	6557:22	8	bps
LEAF_NODE	6557:26	6557:26	7	+
FIELD	6557:28	6557:28	7	7
LEAF_NODE	6557:28	6557:28	8	7
LEAF_NODE	6557:29	6557:29	7	)
LEAF_NODE	6557:31	6557:31	7	/
FIELD	6557:33	6557:33	7	8
LEAF_NODE	6557:33	6557:33	8	8
LEAF_NODE	6557:34	6557:34	4	;
EXPR_STATEMENT	6558:2	6558:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	6558:2	6558:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	6558:2	6558:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	6558:2	6558:2	6	bytes_per_pixel
FIELD	6558:2	6558:2	7	bytes_per_pixel
LEAF_NODE	6558:2	6558:2	8	bytes_per_pixel
ASSIGN_OP	6558:19	6558:19	6	=
LEAF_NODE	6558:19	6558:19	7	=
RVAL	6558:21	6558:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	6558:21	6558:21	7	(
LEAF_NODE	6558:22	6558:22	7	(
FIELD	6558:23	6558:23	7	bps
LEAF_NODE	6558:23	6558:23	8	bps
LEAF_NODE	6558:27	6558:27	7	*
FIELD	6558:29	6558:29	7	spp
LEAF_NODE	6558:29	6558:29	8	spp
LEAF_NODE	6558:32	6558:32	7	)
LEAF_NODE	6558:34	6558:34	7	+
FIELD	6558:36	6558:36	7	7
LEAF_NODE	6558:36	6558:36	8	7
LEAF_NODE	6558:37	6558:37	7	)
LEAF_NODE	6558:39	6558:39	7	/
FIELD	6558:41	6558:41	7	8
LEAF_NODE	6558:41	6558:41	8	8
LEAF_NODE	6558:42	6558:42	4	;
SELECTION	6559:2	6560:4	3	
KEYWORD	6559:2	6559:2	4	if
LEAF_NODE	6559:2	6559:2	5	if
LEAF_NODE	6559:5	6559:5	4	(
CONDITION	6559:6	6559:6	4	( bps % 8 ) == 0
EXPR	6559:6	6559:19	5	( bps % 8 ) == 0
LEAF_NODE	6559:6	6559:6	6	(
FIELD	6559:7	6559:7	6	bps
LEAF_NODE	6559:7	6559:7	7	bps
LEAF_NODE	6559:11	6559:11	6	%
FIELD	6559:13	6559:13	6	8
LEAF_NODE	6559:13	6559:13	7	8
LEAF_NODE	6559:14	6559:14	6	)
EQ_OPERATOR	6559:16	6559:16	6	==
LEAF_NODE	6559:16	6559:16	7	==
FIELD	6559:19	6559:19	6	0
LEAF_NODE	6559:19	6559:19	7	0
LEAF_NODE	6559:20	6559:20	4	)
STATEMENTS	6560:4	6560:4	4	
EXPR_STATEMENT	6560:4	6560:19	5	shift_width = 0 ;
EXPR	6560:4	6560:4	6	shift_width = 0
ASSIGN	6560:4	6560:18	7	shift_width = 0
LVAL	6560:4	6560:4	8	shift_width
FIELD	6560:4	6560:4	9	shift_width
LEAF_NODE	6560:4	6560:4	10	shift_width
ASSIGN_OP	6560:16	6560:16	8	=
LEAF_NODE	6560:16	6560:16	9	=
RVAL	6560:18	6560:18	8	0
FIELD	6560:18	6560:18	9	0
LEAF_NODE	6560:18	6560:18	10	0
LEAF_NODE	6560:19	6560:19	6	;
SELECTION	6561:2	6562:4	3	
KEYWORD	6561:2	6561:2	4	else
LEAF_NODE	6561:2	6561:2	5	else
STATEMENTS	6562:4	6567:4	4	
LEAF_NODE	6562:4	6562:4	5	{
STATEMENTS	6563:4	6565:4	5	
SELECTION	6563:4	6564:6	6	
KEYWORD	6563:4	6563:4	7	if
LEAF_NODE	6563:4	6563:4	8	if
LEAF_NODE	6563:7	6563:7	7	(
CONDITION	6563:8	6563:8	7	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	6563:8	6563:47	8	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	6563:8	6563:8	9	bytes_per_pixel
LEAF_NODE	6563:8	6563:8	10	bytes_per_pixel
REL_OPERATOR	6563:24	6563:24	9	<
LEAF_NODE	6563:24	6563:24	10	<
LEAF_NODE	6563:26	6563:26	9	(
FIELD	6563:27	6563:27	9	bytes_per_sample
LEAF_NODE	6563:27	6563:27	10	bytes_per_sample
LEAF_NODE	6563:44	6563:44	9	+
FIELD	6563:46	6563:46	9	1
LEAF_NODE	6563:46	6563:46	10	1
LEAF_NODE	6563:47	6563:47	9	)
LEAF_NODE	6563:48	6563:48	7	)
STATEMENTS	6564:6	6564:6	7	
EXPR_STATEMENT	6564:6	6564:35	8	shift_width = bytes_per_pixel ;
EXPR	6564:6	6564:6	9	shift_width = bytes_per_pixel
ASSIGN	6564:6	6564:20	10	shift_width = bytes_per_pixel
LVAL	6564:6	6564:6	11	shift_width
FIELD	6564:6	6564:6	12	shift_width
LEAF_NODE	6564:6	6564:6	13	shift_width
ASSIGN_OP	6564:18	6564:18	11	=
LEAF_NODE	6564:18	6564:18	12	=
RVAL	6564:20	6564:20	11	bytes_per_pixel
FIELD	6564:20	6564:20	12	bytes_per_pixel
LEAF_NODE	6564:20	6564:20	13	bytes_per_pixel
LEAF_NODE	6564:35	6564:35	9	;
SELECTION	6565:4	6566:6	6	
KEYWORD	6565:4	6565:4	7	else
LEAF_NODE	6565:4	6565:4	8	else
STATEMENTS	6566:6	6566:6	7	
EXPR_STATEMENT	6566:6	6566:40	8	shift_width = bytes_per_sample + 1 ;
EXPR	6566:6	6566:6	9	shift_width = bytes_per_sample + 1
ASSIGN	6566:6	6566:20	10	shift_width = bytes_per_sample + 1
LVAL	6566:6	6566:6	11	shift_width
FIELD	6566:6	6566:6	12	shift_width
LEAF_NODE	6566:6	6566:6	13	shift_width
ASSIGN_OP	6566:18	6566:18	11	=
LEAF_NODE	6566:18	6566:18	12	=
RVAL	6566:20	6566:39	11	bytes_per_sample + 1
FIELD	6566:20	6566:20	12	bytes_per_sample
LEAF_NODE	6566:20	6566:20	13	bytes_per_sample
LEAF_NODE	6566:37	6566:37	12	+
FIELD	6566:39	6566:39	12	1
LEAF_NODE	6566:39	6566:39	13	1
LEAF_NODE	6566:40	6566:40	9	;
LEAF_NODE	6567:4	6567:4	5	}
EXPR_STATEMENT	6570:2	6570:41	3	first_row = crop -> regionlist [ region ] . y1 ;
EXPR	6570:2	6570:2	4	first_row = crop -> regionlist [ region ] . y1
ASSIGN	6570:2	6570:14	5	first_row = crop -> regionlist [ region ] . y1
LVAL	6570:2	6570:2	6	first_row
FIELD	6570:2	6570:2	7	first_row
LEAF_NODE	6570:2	6570:2	8	first_row
ASSIGN_OP	6570:12	6570:12	6	=
LEAF_NODE	6570:12	6570:12	7	=
RVAL	6570:14	6570:14	6	crop -> regionlist [ region ] . y1
FIELD	6570:14	6570:39	7	crop -> regionlist [ region ] . y1
LEAF_NODE	6570:14	6570:14	8	crop
LEAF_NODE	6570:18	6570:18	8	->
LEAF_NODE	6570:20	6570:20	8	regionlist
LEAF_NODE	6570:30	6570:30	8	[
EXPR	6570:31	6570:31	8	region
FIELD	6570:31	6570:31	9	region
LEAF_NODE	6570:31	6570:31	10	region
LEAF_NODE	6570:37	6570:37	8	]
LEAF_NODE	6570:38	6570:38	8	.
LEAF_NODE	6570:39	6570:39	8	y1
LEAF_NODE	6570:41	6570:41	4	;
EXPR_STATEMENT	6571:2	6571:41	3	last_row = crop -> regionlist [ region ] . y2 ;
EXPR	6571:2	6571:2	4	last_row = crop -> regionlist [ region ] . y2
ASSIGN	6571:2	6571:14	5	last_row = crop -> regionlist [ region ] . y2
LVAL	6571:2	6571:2	6	last_row
FIELD	6571:2	6571:2	7	last_row
LEAF_NODE	6571:2	6571:2	8	last_row
ASSIGN_OP	6571:12	6571:12	6	=
LEAF_NODE	6571:12	6571:12	7	=
RVAL	6571:14	6571:14	6	crop -> regionlist [ region ] . y2
FIELD	6571:14	6571:39	7	crop -> regionlist [ region ] . y2
LEAF_NODE	6571:14	6571:14	8	crop
LEAF_NODE	6571:18	6571:18	8	->
LEAF_NODE	6571:20	6571:20	8	regionlist
LEAF_NODE	6571:30	6571:30	8	[
EXPR	6571:31	6571:31	8	region
FIELD	6571:31	6571:31	9	region
LEAF_NODE	6571:31	6571:31	10	region
LEAF_NODE	6571:37	6571:37	8	]
LEAF_NODE	6571:38	6571:38	8	.
LEAF_NODE	6571:39	6571:39	8	y2
LEAF_NODE	6571:41	6571:41	4	;
EXPR_STATEMENT	6572:2	6572:41	3	first_col = crop -> regionlist [ region ] . x1 ;
EXPR	6572:2	6572:2	4	first_col = crop -> regionlist [ region ] . x1
ASSIGN	6572:2	6572:14	5	first_col = crop -> regionlist [ region ] . x1
LVAL	6572:2	6572:2	6	first_col
FIELD	6572:2	6572:2	7	first_col
LEAF_NODE	6572:2	6572:2	8	first_col
ASSIGN_OP	6572:12	6572:12	6	=
LEAF_NODE	6572:12	6572:12	7	=
RVAL	6572:14	6572:14	6	crop -> regionlist [ region ] . x1
FIELD	6572:14	6572:39	7	crop -> regionlist [ region ] . x1
LEAF_NODE	6572:14	6572:14	8	crop
LEAF_NODE	6572:18	6572:18	8	->
LEAF_NODE	6572:20	6572:20	8	regionlist
LEAF_NODE	6572:30	6572:30	8	[
EXPR	6572:31	6572:31	8	region
FIELD	6572:31	6572:31	9	region
LEAF_NODE	6572:31	6572:31	10	region
LEAF_NODE	6572:37	6572:37	8	]
LEAF_NODE	6572:38	6572:38	8	.
LEAF_NODE	6572:39	6572:39	8	x1
LEAF_NODE	6572:41	6572:41	4	;
EXPR_STATEMENT	6573:2	6573:41	3	last_col = crop -> regionlist [ region ] . x2 ;
EXPR	6573:2	6573:2	4	last_col = crop -> regionlist [ region ] . x2
ASSIGN	6573:2	6573:14	5	last_col = crop -> regionlist [ region ] . x2
LVAL	6573:2	6573:2	6	last_col
FIELD	6573:2	6573:2	7	last_col
LEAF_NODE	6573:2	6573:2	8	last_col
ASSIGN_OP	6573:12	6573:12	6	=
LEAF_NODE	6573:12	6573:12	7	=
RVAL	6573:14	6573:14	6	crop -> regionlist [ region ] . x2
FIELD	6573:14	6573:39	7	crop -> regionlist [ region ] . x2
LEAF_NODE	6573:14	6573:14	8	crop
LEAF_NODE	6573:18	6573:18	8	->
LEAF_NODE	6573:20	6573:20	8	regionlist
LEAF_NODE	6573:30	6573:30	8	[
EXPR	6573:31	6573:31	8	region
FIELD	6573:31	6573:31	9	region
LEAF_NODE	6573:31	6573:31	10	region
LEAF_NODE	6573:37	6573:37	8	]
LEAF_NODE	6573:38	6573:38	8	.
LEAF_NODE	6573:39	6573:39	8	x2
LEAF_NODE	6573:41	6573:41	4	;
EXPR_STATEMENT	6575:2	6575:39	3	crop_width = last_col - first_col + 1 ;
EXPR	6575:2	6575:2	4	crop_width = last_col - first_col + 1
ASSIGN	6575:2	6575:15	5	crop_width = last_col - first_col + 1
LVAL	6575:2	6575:2	6	crop_width
FIELD	6575:2	6575:2	7	crop_width
LEAF_NODE	6575:2	6575:2	8	crop_width
ASSIGN_OP	6575:13	6575:13	6	=
LEAF_NODE	6575:13	6575:13	7	=
RVAL	6575:15	6575:38	6	last_col - first_col + 1
FIELD	6575:15	6575:15	7	last_col
LEAF_NODE	6575:15	6575:15	8	last_col
LEAF_NODE	6575:24	6575:24	7	-
FIELD	6575:26	6575:26	7	first_col
LEAF_NODE	6575:26	6575:26	8	first_col
LEAF_NODE	6575:36	6575:36	7	+
FIELD	6575:38	6575:38	7	1
LEAF_NODE	6575:38	6575:38	8	1
LEAF_NODE	6575:39	6575:39	4	;
EXPR_STATEMENT	6576:2	6576:40	3	crop_length = last_row - first_row + 1 ;
EXPR	6576:2	6576:2	4	crop_length = last_row - first_row + 1
ASSIGN	6576:2	6576:16	5	crop_length = last_row - first_row + 1
LVAL	6576:2	6576:2	6	crop_length
FIELD	6576:2	6576:2	7	crop_length
LEAF_NODE	6576:2	6576:2	8	crop_length
ASSIGN_OP	6576:14	6576:14	6	=
LEAF_NODE	6576:14	6576:14	7	=
RVAL	6576:16	6576:39	6	last_row - first_row + 1
FIELD	6576:16	6576:16	7	last_row
LEAF_NODE	6576:16	6576:16	8	last_row
LEAF_NODE	6576:25	6576:25	7	-
FIELD	6576:27	6576:27	7	first_row
LEAF_NODE	6576:27	6576:27	8	first_row
LEAF_NODE	6576:37	6576:37	7	+
FIELD	6576:39	6576:39	7	1
LEAF_NODE	6576:39	6576:39	8	1
LEAF_NODE	6576:40	6576:40	4	;
EXPR_STATEMENT	6578:2	6578:45	3	crop -> regionlist [ region ] . width = crop_width ;
EXPR	6578:2	6578:2	4	crop -> regionlist [ region ] . width = crop_width
ASSIGN	6578:2	6578:35	5	crop -> regionlist [ region ] . width = crop_width
LVAL	6578:2	6578:2	6	crop -> regionlist [ region ] . width
FIELD	6578:2	6578:27	7	crop -> regionlist [ region ] . width
LEAF_NODE	6578:2	6578:2	8	crop
LEAF_NODE	6578:6	6578:6	8	->
LEAF_NODE	6578:8	6578:8	8	regionlist
LEAF_NODE	6578:18	6578:18	8	[
EXPR	6578:19	6578:19	8	region
FIELD	6578:19	6578:19	9	region
LEAF_NODE	6578:19	6578:19	10	region
LEAF_NODE	6578:25	6578:25	8	]
LEAF_NODE	6578:26	6578:26	8	.
LEAF_NODE	6578:27	6578:27	8	width
ASSIGN_OP	6578:33	6578:33	6	=
LEAF_NODE	6578:33	6578:33	7	=
RVAL	6578:35	6578:35	6	crop_width
FIELD	6578:35	6578:35	7	crop_width
LEAF_NODE	6578:35	6578:35	8	crop_width
LEAF_NODE	6578:45	6578:45	4	;
EXPR_STATEMENT	6579:2	6579:47	3	crop -> regionlist [ region ] . length = crop_length ;
EXPR	6579:2	6579:2	4	crop -> regionlist [ region ] . length = crop_length
ASSIGN	6579:2	6579:36	5	crop -> regionlist [ region ] . length = crop_length
LVAL	6579:2	6579:2	6	crop -> regionlist [ region ] . length
FIELD	6579:2	6579:27	7	crop -> regionlist [ region ] . length
LEAF_NODE	6579:2	6579:2	8	crop
LEAF_NODE	6579:6	6579:6	8	->
LEAF_NODE	6579:8	6579:8	8	regionlist
LEAF_NODE	6579:18	6579:18	8	[
EXPR	6579:19	6579:19	8	region
FIELD	6579:19	6579:19	9	region
LEAF_NODE	6579:19	6579:19	10	region
LEAF_NODE	6579:25	6579:25	8	]
LEAF_NODE	6579:26	6579:26	8	.
LEAF_NODE	6579:27	6579:27	8	length
ASSIGN_OP	6579:34	6579:34	6	=
LEAF_NODE	6579:34	6579:34	7	=
RVAL	6579:36	6579:36	6	crop_length
FIELD	6579:36	6579:36	7	crop_length
LEAF_NODE	6579:36	6579:36	8	crop_length
LEAF_NODE	6579:47	6579:47	4	;
EXPR_STATEMENT	6580:2	6580:46	3	crop -> regionlist [ region ] . buffptr = crop_buff ;
EXPR	6580:2	6580:2	4	crop -> regionlist [ region ] . buffptr = crop_buff
ASSIGN	6580:2	6580:37	5	crop -> regionlist [ region ] . buffptr = crop_buff
LVAL	6580:2	6580:2	6	crop -> regionlist [ region ] . buffptr
FIELD	6580:2	6580:27	7	crop -> regionlist [ region ] . buffptr
LEAF_NODE	6580:2	6580:2	8	crop
LEAF_NODE	6580:6	6580:6	8	->
LEAF_NODE	6580:8	6580:8	8	regionlist
LEAF_NODE	6580:18	6580:18	8	[
EXPR	6580:19	6580:19	8	region
FIELD	6580:19	6580:19	9	region
LEAF_NODE	6580:19	6580:19	10	region
LEAF_NODE	6580:25	6580:25	8	]
LEAF_NODE	6580:26	6580:26	8	.
LEAF_NODE	6580:27	6580:27	8	buffptr
ASSIGN_OP	6580:35	6580:35	6	=
LEAF_NODE	6580:35	6580:35	7	=
RVAL	6580:37	6580:37	6	crop_buff
FIELD	6580:37	6580:37	7	crop_buff
LEAF_NODE	6580:37	6580:37	8	crop_buff
LEAF_NODE	6580:46	6580:46	4	;
EXPR_STATEMENT	6582:2	6582:17	3	src = read_buff ;
EXPR	6582:2	6582:2	4	src = read_buff
ASSIGN	6582:2	6582:8	5	src = read_buff
LVAL	6582:2	6582:2	6	src
FIELD	6582:2	6582:2	7	src
LEAF_NODE	6582:2	6582:2	8	src
ASSIGN_OP	6582:6	6582:6	6	=
LEAF_NODE	6582:6	6582:6	7	=
RVAL	6582:8	6582:8	6	read_buff
FIELD	6582:8	6582:8	7	read_buff
LEAF_NODE	6582:8	6582:8	8	read_buff
LEAF_NODE	6582:17	6582:17	4	;
EXPR_STATEMENT	6583:2	6583:17	3	dst = crop_buff ;
EXPR	6583:2	6583:2	4	dst = crop_buff
ASSIGN	6583:2	6583:8	5	dst = crop_buff
LVAL	6583:2	6583:2	6	dst
FIELD	6583:2	6583:2	7	dst
LEAF_NODE	6583:2	6583:2	8	dst
ASSIGN_OP	6583:6	6583:6	6	=
LEAF_NODE	6583:6	6583:6	7	=
RVAL	6583:8	6583:8	6	crop_buff
FIELD	6583:8	6583:8	7	crop_buff
LEAF_NODE	6583:8	6583:8	8	crop_buff
LEAF_NODE	6583:17	6583:17	4	;
LEAF_NODE	6584:2	6584:2	3	src_rowsize
LEAF_NODE	6584:14	6584:14	3	=
LEAF_NODE	6584:16	6584:16	3	(
LEAF_NODE	6584:17	6584:17	3	(
LEAF_NODE	6584:18	6584:18	3	img_width
LEAF_NODE	6584:28	6584:28	3	*
LEAF_NODE	6584:30	6584:30	3	bps
LEAF_NODE	6584:34	6584:34	3	*
LEAF_NODE	6584:36	6584:36	3	spp
LEAF_NODE	6584:39	6584:39	3	)
LEAF_NODE	6584:41	6584:41	3	+
LEAF_NODE	6584:43	6584:43	3	7
LEAF_NODE	6584:44	6584:44	3	)
LEAF_NODE	6584:46	6584:46	3	/
EXPR_STATEMENT	6584:48	6584:49	3	8 ;
EXPR	6584:48	6584:48	4	8
FIELD	6584:48	6584:48	5	8
LEAF_NODE	6584:48	6584:48	6	8
LEAF_NODE	6584:49	6584:49	4	;
LEAF_NODE	6585:2	6585:2	3	dst_rowsize
LEAF_NODE	6585:14	6585:14	3	=
LEAF_NODE	6585:16	6585:16	3	(
LEAF_NODE	6585:17	6585:17	3	(
LEAF_NODE	6585:18	6585:18	3	(
LEAF_NODE	6585:19	6585:19	3	crop_width
LEAF_NODE	6585:30	6585:30	3	*
LEAF_NODE	6585:32	6585:32	3	bps
LEAF_NODE	6585:36	6585:36	3	*
LEAF_NODE	6585:38	6585:38	3	spp
LEAF_NODE	6585:41	6585:41	3	)
LEAF_NODE	6585:43	6585:43	3	+
LEAF_NODE	6585:45	6585:45	3	7
LEAF_NODE	6585:46	6585:46	3	)
LEAF_NODE	6585:48	6585:48	3	/
LEAF_NODE	6585:50	6585:50	3	8
LEAF_NODE	6585:51	6585:51	3	)
LEAF_NODE	6585:52	6585:52	3	;
ITERATION	6587:2	6588:4	3	
KEYWORD	6587:2	6587:2	4	for
LEAF_NODE	6587:2	6587:2	5	for
LEAF_NODE	6587:6	6587:6	4	(
FOR_INIT	6587:7	6587:22	4	row = first_row ;
EXPR	6587:7	6587:7	5	row = first_row
ASSIGN	6587:7	6587:13	6	row = first_row
LVAL	6587:7	6587:7	7	row
FIELD	6587:7	6587:7	8	row
LEAF_NODE	6587:7	6587:7	9	row
ASSIGN_OP	6587:11	6587:11	7	=
LEAF_NODE	6587:11	6587:11	8	=
RVAL	6587:13	6587:13	7	first_row
FIELD	6587:13	6587:13	8	first_row
LEAF_NODE	6587:13	6587:13	9	first_row
LEAF_NODE	6587:22	6587:22	5	;
CONDITION	6587:24	6587:24	4	row <= last_row
EXPR	6587:24	6587:31	5	row <= last_row
FIELD	6587:24	6587:24	6	row
LEAF_NODE	6587:24	6587:24	7	row
REL_OPERATOR	6587:28	6587:28	6	<=
LEAF_NODE	6587:28	6587:28	7	<=
FIELD	6587:31	6587:31	6	last_row
LEAF_NODE	6587:31	6587:31	7	last_row
LEAF_NODE	6587:39	6587:39	4	;
FOR_EXPR	6587:41	6587:41	4	row ++
EXPR	6587:41	6587:41	5	row ++
FIELD	6587:41	6587:44	6	row ++
LEAF_NODE	6587:41	6587:41	7	row
LEAF_NODE	6587:44	6587:44	7	++
LEAF_NODE	6587:46	6587:46	4	)
STATEMENTS	6588:4	6654:4	4	
LEAF_NODE	6588:4	6588:4	5	{
STATEMENTS	6589:4	6594:4	5	
EXPR_STATEMENT	6589:4	6589:34	6	src_offset = row * src_rowsize ;
EXPR	6589:4	6589:4	7	src_offset = row * src_rowsize
ASSIGN	6589:4	6589:17	8	src_offset = row * src_rowsize
LVAL	6589:4	6589:4	9	src_offset
FIELD	6589:4	6589:4	10	src_offset
LEAF_NODE	6589:4	6589:4	11	src_offset
ASSIGN_OP	6589:15	6589:15	9	=
LEAF_NODE	6589:15	6589:15	10	=
RVAL	6589:17	6589:23	9	row * src_rowsize
FIELD	6589:17	6589:17	10	row
LEAF_NODE	6589:17	6589:17	11	row
LEAF_NODE	6589:21	6589:21	10	*
FIELD	6589:23	6589:23	10	src_rowsize
LEAF_NODE	6589:23	6589:23	11	src_rowsize
LEAF_NODE	6589:34	6589:34	7	;
EXPR_STATEMENT	6590:4	6590:49	6	dst_offset = ( row - first_row ) * dst_rowsize ;
EXPR	6590:4	6590:4	7	dst_offset = ( row - first_row ) * dst_rowsize
ASSIGN	6590:4	6590:17	8	dst_offset = ( row - first_row ) * dst_rowsize
LVAL	6590:4	6590:4	9	dst_offset
FIELD	6590:4	6590:4	10	dst_offset
LEAF_NODE	6590:4	6590:4	11	dst_offset
ASSIGN_OP	6590:15	6590:15	9	=
LEAF_NODE	6590:15	6590:15	10	=
RVAL	6590:17	6590:38	9	( row - first_row ) * dst_rowsize
LEAF_NODE	6590:17	6590:17	10	(
FIELD	6590:18	6590:18	10	row
LEAF_NODE	6590:18	6590:18	11	row
LEAF_NODE	6590:23	6590:23	10	-
FIELD	6590:25	6590:25	10	first_row
LEAF_NODE	6590:25	6590:25	11	first_row
LEAF_NODE	6590:34	6590:34	10	)
LEAF_NODE	6590:36	6590:36	10	*
FIELD	6590:38	6590:38	10	dst_rowsize
LEAF_NODE	6590:38	6590:38	11	dst_rowsize
LEAF_NODE	6590:49	6590:49	7	;
EXPR_STATEMENT	6591:4	6591:32	6	src = read_buff + src_offset ;
EXPR	6591:4	6591:4	7	src = read_buff + src_offset
ASSIGN	6591:4	6591:10	8	src = read_buff + src_offset
LVAL	6591:4	6591:4	9	src
FIELD	6591:4	6591:4	10	src
LEAF_NODE	6591:4	6591:4	11	src
ASSIGN_OP	6591:8	6591:8	9	=
LEAF_NODE	6591:8	6591:8	10	=
RVAL	6591:10	6591:22	9	read_buff + src_offset
FIELD	6591:10	6591:10	10	read_buff
LEAF_NODE	6591:10	6591:10	11	read_buff
LEAF_NODE	6591:20	6591:20	10	+
FIELD	6591:22	6591:22	10	src_offset
LEAF_NODE	6591:22	6591:22	11	src_offset
LEAF_NODE	6591:32	6591:32	7	;
EXPR_STATEMENT	6592:4	6592:32	6	dst = crop_buff + dst_offset ;
EXPR	6592:4	6592:4	7	dst = crop_buff + dst_offset
ASSIGN	6592:4	6592:10	8	dst = crop_buff + dst_offset
LVAL	6592:4	6592:4	9	dst
FIELD	6592:4	6592:4	10	dst
LEAF_NODE	6592:4	6592:4	11	dst
ASSIGN_OP	6592:8	6592:8	9	=
LEAF_NODE	6592:8	6592:8	10	=
RVAL	6592:10	6592:22	9	crop_buff + dst_offset
FIELD	6592:10	6592:10	10	crop_buff
LEAF_NODE	6592:10	6592:10	11	crop_buff
LEAF_NODE	6592:20	6592:20	10	+
FIELD	6592:22	6592:22	10	dst_offset
LEAF_NODE	6592:22	6592:22	11	dst_offset
LEAF_NODE	6592:32	6592:32	7	;
SELECTION	6594:4	6595:6	6	
KEYWORD	6594:4	6594:4	7	switch
LEAF_NODE	6594:4	6594:4	8	switch
LEAF_NODE	6594:11	6594:11	7	(
CONDITION	6594:12	6594:12	7	shift_width
EXPR	6594:12	6594:12	8	shift_width
FIELD	6594:12	6594:12	9	shift_width
LEAF_NODE	6594:12	6594:12	10	shift_width
LEAF_NODE	6594:23	6594:23	7	)
STATEMENTS	6595:6	6653:6	7	
LEAF_NODE	6595:6	6595:6	8	{
STATEMENTS	6596:6	6652:8	8	
LABEL	6596:6	6596:12	9	case 0 :
LEAF_NODE	6596:6	6596:6	10	case
LEAF_NODE	6596:11	6596:11	10	0
LEAF_NODE	6596:12	6596:12	10	:
SELECTION	6596:14	6599:16	9	
KEYWORD	6596:14	6596:14	10	if
LEAF_NODE	6596:14	6596:14	11	if
LEAF_NODE	6596:17	6596:17	10	(
CONDITION	6596:18	6596:18	10	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
EXPR	6596:18	6596:18	11	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
FUNCTION_CALL	6596:18	6598:57	12	extractContigSamplesBytes ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 )
CALLEE	6596:18	6596:18	13	extractContigSamplesBytes
LEAF_NODE	6596:18	6596:18	14	extractContigSamplesBytes
LEAF_NODE	6596:44	6596:44	13	(
ARGUMENT	6596:45	6596:45	13	src
FIELD	6596:45	6596:45	14	src
LEAF_NODE	6596:45	6596:45	15	src
LEAF_NODE	6596:48	6596:48	13	,
ARGUMENT	6596:50	6596:50	13	dst
FIELD	6596:50	6596:50	14	dst
LEAF_NODE	6596:50	6596:50	15	dst
LEAF_NODE	6596:53	6596:53	13	,
ARGUMENT	6596:55	6596:55	13	img_width
FIELD	6596:55	6596:55	14	img_width
LEAF_NODE	6596:55	6596:55	15	img_width
LEAF_NODE	6596:64	6596:64	13	,
ARGUMENT	6596:66	6596:66	13	sample
FIELD	6596:66	6596:66	14	sample
LEAF_NODE	6596:66	6596:66	15	sample
LEAF_NODE	6596:72	6596:72	13	,
ARGUMENT	6597:45	6597:45	13	spp
FIELD	6597:45	6597:45	14	spp
LEAF_NODE	6597:45	6597:45	15	spp
LEAF_NODE	6597:48	6597:48	13	,
ARGUMENT	6597:50	6597:50	13	bps
FIELD	6597:50	6597:50	14	bps
LEAF_NODE	6597:50	6597:50	15	bps
LEAF_NODE	6597:53	6597:53	13	,
ARGUMENT	6597:55	6597:55	13	count
FIELD	6597:55	6597:55	14	count
LEAF_NODE	6597:55	6597:55	15	count
LEAF_NODE	6597:60	6597:60	13	,
ARGUMENT	6597:62	6597:62	13	first_col
FIELD	6597:62	6597:62	14	first_col
LEAF_NODE	6597:62	6597:62	15	first_col
LEAF_NODE	6597:71	6597:71	13	,
ARGUMENT	6598:45	6598:56	13	last_col + 1
FIELD	6598:45	6598:45	14	last_col
LEAF_NODE	6598:45	6598:45	15	last_col
LEAF_NODE	6598:54	6598:54	14	+
FIELD	6598:56	6598:56	14	1
LEAF_NODE	6598:56	6598:56	15	1
LEAF_NODE	6598:57	6598:57	13	)
LEAF_NODE	6598:58	6598:58	10	)
STATEMENTS	6599:16	6603:9	10	
LEAF_NODE	6599:16	6599:16	11	{
STATEMENTS	6600:9	6602:9	11	
EXPR_STATEMENT	6600:9	6601:58	12	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row ) ;
EXPR	6600:9	6600:9	13	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
FUNCTION_CALL	6600:9	6601:57	14	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
CALLEE	6600:9	6600:9	15	TIFFError
LEAF_NODE	6600:9	6600:9	16	TIFFError
LEAF_NODE	6600:18	6600:18	15	(
ARGUMENT	6600:19	6600:19	15	"extractSeparateRegion"
FIELD	6600:19	6600:19	16	"extractSeparateRegion"
LEAF_NODE	6600:19	6600:19	17	"extractSeparateRegion"
LEAF_NODE	6600:42	6600:42	15	,
ARGUMENT	6601:26	6601:26	15	"Unable to extract row %d"
FIELD	6601:26	6601:26	16	"Unable to extract row %d"
LEAF_NODE	6601:26	6601:26	17	"Unable to extract row %d"
LEAF_NODE	6601:52	6601:52	15	,
ARGUMENT	6601:54	6601:54	15	row
FIELD	6601:54	6601:54	16	row
LEAF_NODE	6601:54	6601:54	17	row
LEAF_NODE	6601:57	6601:57	15	)
LEAF_NODE	6601:58	6601:58	13	;
JUMP_STATEMENT	6602:9	6602:19	12	return ( 1 ) ;
KEYWORD	6602:9	6602:9	13	return
LEAF_NODE	6602:9	6602:9	14	return
DESTINATION	6602:16	6602:16	13	( 1 )
EXPR	6602:16	6602:18	14	( 1 )
LEAF_NODE	6602:16	6602:16	15	(
FIELD	6602:17	6602:17	15	1
LEAF_NODE	6602:17	6602:17	16	1
LEAF_NODE	6602:18	6602:18	15	)
LEAF_NODE	6602:19	6602:19	13	;
LEAF_NODE	6603:9	6603:9	11	}
JUMP_STATEMENT	6604:7	6604:12	9	break DESTINATION ;
KEYWORD	6604:7	6604:7	10	break
LEAF_NODE	6604:7	6604:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	6604:12	6604:12	10	;
LABEL	6605:6	6605:12	9	case 1 :
LEAF_NODE	6605:6	6605:6	10	case
LEAF_NODE	6605:11	6605:11	10	1
LEAF_NODE	6605:12	6605:12	10	:
SELECTION	6605:14	6606:16	9	
KEYWORD	6605:14	6605:14	10	if
LEAF_NODE	6605:14	6605:14	11	if
LEAF_NODE	6605:17	6605:17	10	(
CONDITION	6605:18	6605:18	10	bps == 1
EXPR	6605:18	6605:25	11	bps == 1
FIELD	6605:18	6605:18	12	bps
LEAF_NODE	6605:18	6605:18	13	bps
EQ_OPERATOR	6605:22	6605:22	12	==
LEAF_NODE	6605:22	6605:22	13	==
FIELD	6605:25	6605:25	12	1
LEAF_NODE	6605:25	6605:25	13	1
LEAF_NODE	6605:26	6605:26	10	)
STATEMENTS	6606:16	6617:2	10	
LEAF_NODE	6606:16	6606:16	11	{
STATEMENTS	6607:16	6616:4	11	
SELECTION	6607:16	6611:18	12	
KEYWORD	6607:16	6607:16	13	if
LEAF_NODE	6607:16	6607:16	14	if
LEAF_NODE	6607:19	6607:19	13	(
CONDITION	6607:20	6607:20	13	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6607:20	6607:20	14	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6607:20	6610:72	15	extractContigSamplesShifted8bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6607:20	6607:20	16	extractContigSamplesShifted8bits
LEAF_NODE	6607:20	6607:20	17	extractContigSamplesShifted8bits
LEAF_NODE	6607:53	6607:53	16	(
ARGUMENT	6607:54	6607:54	16	src
FIELD	6607:54	6607:54	17	src
LEAF_NODE	6607:54	6607:54	18	src
LEAF_NODE	6607:57	6607:57	16	,
ARGUMENT	6607:59	6607:59	16	dst
FIELD	6607:59	6607:59	17	dst
LEAF_NODE	6607:59	6607:59	18	dst
LEAF_NODE	6607:62	6607:62	16	,
ARGUMENT	6607:64	6607:64	16	img_width
FIELD	6607:64	6607:64	17	img_width
LEAF_NODE	6607:64	6607:64	18	img_width
LEAF_NODE	6607:73	6607:73	16	,
ARGUMENT	6608:54	6608:54	16	sample
FIELD	6608:54	6608:54	17	sample
LEAF_NODE	6608:54	6608:54	18	sample
LEAF_NODE	6608:60	6608:60	16	,
ARGUMENT	6608:62	6608:62	16	spp
FIELD	6608:62	6608:62	17	spp
LEAF_NODE	6608:62	6608:62	18	spp
LEAF_NODE	6608:65	6608:65	16	,
ARGUMENT	6608:67	6608:67	16	bps
FIELD	6608:67	6608:67	17	bps
LEAF_NODE	6608:67	6608:67	18	bps
LEAF_NODE	6608:70	6608:70	16	,
ARGUMENT	6608:72	6608:72	16	count
FIELD	6608:72	6608:72	17	count
LEAF_NODE	6608:72	6608:72	18	count
LEAF_NODE	6608:77	6608:77	16	,
ARGUMENT	6609:54	6609:54	16	first_col
FIELD	6609:54	6609:54	17	first_col
LEAF_NODE	6609:54	6609:54	18	first_col
LEAF_NODE	6609:63	6609:63	16	,
ARGUMENT	6609:65	6609:76	16	last_col + 1
FIELD	6609:65	6609:65	17	last_col
LEAF_NODE	6609:65	6609:65	18	last_col
LEAF_NODE	6609:74	6609:74	17	+
FIELD	6609:76	6609:76	17	1
LEAF_NODE	6609:76	6609:76	18	1
LEAF_NODE	6609:77	6609:77	16	,
ARGUMENT	6610:54	6610:54	16	prev_trailing_bits
FIELD	6610:54	6610:54	17	prev_trailing_bits
LEAF_NODE	6610:54	6610:54	18	prev_trailing_bits
LEAF_NODE	6610:72	6610:72	16	)
LEAF_NODE	6610:73	6610:73	13	)
STATEMENTS	6611:18	6615:4	13	
LEAF_NODE	6611:18	6611:18	14	{
STATEMENTS	6612:4	6614:4	14	
EXPR_STATEMENT	6612:4	6613:60	15	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row ) ;
EXPR	6612:4	6612:4	16	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
FUNCTION_CALL	6612:4	6613:59	17	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
CALLEE	6612:4	6612:4	18	TIFFError
LEAF_NODE	6612:4	6612:4	19	TIFFError
LEAF_NODE	6612:13	6612:13	18	(
ARGUMENT	6612:14	6612:14	18	"extractSeparateRegion"
FIELD	6612:14	6612:14	19	"extractSeparateRegion"
LEAF_NODE	6612:14	6612:14	20	"extractSeparateRegion"
LEAF_NODE	6612:37	6612:37	18	,
ARGUMENT	6613:28	6613:28	18	"Unable to extract row %d"
FIELD	6613:28	6613:28	19	"Unable to extract row %d"
LEAF_NODE	6613:28	6613:28	20	"Unable to extract row %d"
LEAF_NODE	6613:54	6613:54	18	,
ARGUMENT	6613:56	6613:56	18	row
FIELD	6613:56	6613:56	19	row
LEAF_NODE	6613:56	6613:56	20	row
LEAF_NODE	6613:59	6613:59	18	)
LEAF_NODE	6613:60	6613:60	16	;
JUMP_STATEMENT	6614:4	6614:14	15	return ( 1 ) ;
KEYWORD	6614:4	6614:4	16	return
LEAF_NODE	6614:4	6614:4	17	return
DESTINATION	6614:11	6614:11	16	( 1 )
EXPR	6614:11	6614:13	17	( 1 )
LEAF_NODE	6614:11	6614:11	18	(
FIELD	6614:12	6614:12	18	1
LEAF_NODE	6614:12	6614:12	19	1
LEAF_NODE	6614:13	6614:13	18	)
LEAF_NODE	6614:14	6614:14	16	;
LEAF_NODE	6615:4	6615:4	14	}
JUMP_STATEMENT	6616:4	6616:9	12	break DESTINATION ;
KEYWORD	6616:4	6616:4	13	break
LEAF_NODE	6616:4	6616:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	6616:9	6616:9	13	;
LEAF_NODE	6617:2	6617:2	11	}
SELECTION	6618:14	6619:16	9	
KEYWORD	6618:14	6618:14	10	else
LEAF_NODE	6618:14	6618:14	11	else
STATEMENTS	6619:16	6619:16	10	
SELECTION	6619:16	6623:18	11	
KEYWORD	6619:16	6619:16	12	if
LEAF_NODE	6619:16	6619:16	13	if
LEAF_NODE	6619:19	6619:19	12	(
CONDITION	6619:20	6619:20	12	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6619:20	6619:20	13	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6619:20	6622:73	14	extractContigSamplesShifted16bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6619:20	6619:20	15	extractContigSamplesShifted16bits
LEAF_NODE	6619:20	6619:20	16	extractContigSamplesShifted16bits
LEAF_NODE	6619:54	6619:54	15	(
ARGUMENT	6619:55	6619:55	15	src
FIELD	6619:55	6619:55	16	src
LEAF_NODE	6619:55	6619:55	17	src
LEAF_NODE	6619:58	6619:58	15	,
ARGUMENT	6619:60	6619:60	15	dst
FIELD	6619:60	6619:60	16	dst
LEAF_NODE	6619:60	6619:60	17	dst
LEAF_NODE	6619:63	6619:63	15	,
ARGUMENT	6619:65	6619:65	15	img_width
FIELD	6619:65	6619:65	16	img_width
LEAF_NODE	6619:65	6619:65	17	img_width
LEAF_NODE	6619:74	6619:74	15	,
ARGUMENT	6620:55	6620:55	15	sample
FIELD	6620:55	6620:55	16	sample
LEAF_NODE	6620:55	6620:55	17	sample
LEAF_NODE	6620:61	6620:61	15	,
ARGUMENT	6620:63	6620:63	15	spp
FIELD	6620:63	6620:63	16	spp
LEAF_NODE	6620:63	6620:63	17	spp
LEAF_NODE	6620:66	6620:66	15	,
ARGUMENT	6620:68	6620:68	15	bps
FIELD	6620:68	6620:68	16	bps
LEAF_NODE	6620:68	6620:68	17	bps
LEAF_NODE	6620:71	6620:71	15	,
ARGUMENT	6620:73	6620:73	15	count
FIELD	6620:73	6620:73	16	count
LEAF_NODE	6620:73	6620:73	17	count
LEAF_NODE	6620:78	6620:78	15	,
ARGUMENT	6621:55	6621:55	15	first_col
FIELD	6621:55	6621:55	16	first_col
LEAF_NODE	6621:55	6621:55	17	first_col
LEAF_NODE	6621:64	6621:64	15	,
ARGUMENT	6621:66	6621:77	15	last_col + 1
FIELD	6621:66	6621:66	16	last_col
LEAF_NODE	6621:66	6621:66	17	last_col
LEAF_NODE	6621:75	6621:75	16	+
FIELD	6621:77	6621:77	16	1
LEAF_NODE	6621:77	6621:77	17	1
LEAF_NODE	6621:78	6621:78	15	,
ARGUMENT	6622:55	6622:55	15	prev_trailing_bits
FIELD	6622:55	6622:55	16	prev_trailing_bits
LEAF_NODE	6622:55	6622:55	17	prev_trailing_bits
LEAF_NODE	6622:73	6622:73	15	)
LEAF_NODE	6622:74	6622:74	12	)
STATEMENTS	6623:18	6627:4	12	
LEAF_NODE	6623:18	6623:18	13	{
STATEMENTS	6624:4	6626:4	13	
EXPR_STATEMENT	6624:4	6625:60	14	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row ) ;
EXPR	6624:4	6624:4	15	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
FUNCTION_CALL	6624:4	6625:59	16	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
CALLEE	6624:4	6624:4	17	TIFFError
LEAF_NODE	6624:4	6624:4	18	TIFFError
LEAF_NODE	6624:13	6624:13	17	(
ARGUMENT	6624:14	6624:14	17	"extractSeparateRegion"
FIELD	6624:14	6624:14	18	"extractSeparateRegion"
LEAF_NODE	6624:14	6624:14	19	"extractSeparateRegion"
LEAF_NODE	6624:37	6624:37	17	,
ARGUMENT	6625:28	6625:28	17	"Unable to extract row %d"
FIELD	6625:28	6625:28	18	"Unable to extract row %d"
LEAF_NODE	6625:28	6625:28	19	"Unable to extract row %d"
LEAF_NODE	6625:54	6625:54	17	,
ARGUMENT	6625:56	6625:56	17	row
FIELD	6625:56	6625:56	18	row
LEAF_NODE	6625:56	6625:56	19	row
LEAF_NODE	6625:59	6625:59	17	)
LEAF_NODE	6625:60	6625:60	15	;
JUMP_STATEMENT	6626:4	6626:14	14	return ( 1 ) ;
KEYWORD	6626:4	6626:4	15	return
LEAF_NODE	6626:4	6626:4	16	return
DESTINATION	6626:11	6626:11	15	( 1 )
EXPR	6626:11	6626:13	16	( 1 )
LEAF_NODE	6626:11	6626:11	17	(
FIELD	6626:12	6626:12	17	1
LEAF_NODE	6626:12	6626:12	18	1
LEAF_NODE	6626:13	6626:13	17	)
LEAF_NODE	6626:14	6626:14	15	;
LEAF_NODE	6627:4	6627:4	13	}
JUMP_STATEMENT	6628:7	6628:12	9	break DESTINATION ;
KEYWORD	6628:7	6628:7	10	break
LEAF_NODE	6628:7	6628:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	6628:12	6628:12	10	;
LABEL	6629:6	6629:12	9	case 2 :
LEAF_NODE	6629:6	6629:6	10	case
LEAF_NODE	6629:11	6629:11	10	2
LEAF_NODE	6629:12	6629:12	10	:
SELECTION	6629:15	6633:16	9	
KEYWORD	6629:15	6629:15	10	if
LEAF_NODE	6629:15	6629:15	11	if
LEAF_NODE	6629:18	6629:18	10	(
CONDITION	6629:19	6629:19	10	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6629:19	6629:19	11	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6629:19	6632:71	12	extractContigSamplesShifted24bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6629:19	6629:19	13	extractContigSamplesShifted24bits
LEAF_NODE	6629:19	6629:19	14	extractContigSamplesShifted24bits
LEAF_NODE	6629:53	6629:53	13	(
ARGUMENT	6629:54	6629:54	13	src
FIELD	6629:54	6629:54	14	src
LEAF_NODE	6629:54	6629:54	15	src
LEAF_NODE	6629:57	6629:57	13	,
ARGUMENT	6629:59	6629:59	13	dst
FIELD	6629:59	6629:59	14	dst
LEAF_NODE	6629:59	6629:59	15	dst
LEAF_NODE	6629:62	6629:62	13	,
ARGUMENT	6629:64	6629:64	13	img_width
FIELD	6629:64	6629:64	14	img_width
LEAF_NODE	6629:64	6629:64	15	img_width
LEAF_NODE	6629:73	6629:73	13	,
ARGUMENT	6630:53	6630:53	13	sample
FIELD	6630:53	6630:53	14	sample
LEAF_NODE	6630:53	6630:53	15	sample
LEAF_NODE	6630:59	6630:59	13	,
ARGUMENT	6630:61	6630:61	13	spp
FIELD	6630:61	6630:61	14	spp
LEAF_NODE	6630:61	6630:61	15	spp
LEAF_NODE	6630:64	6630:64	13	,
ARGUMENT	6630:66	6630:66	13	bps
FIELD	6630:66	6630:66	14	bps
LEAF_NODE	6630:66	6630:66	15	bps
LEAF_NODE	6630:69	6630:69	13	,
ARGUMENT	6630:71	6630:71	13	count
FIELD	6630:71	6630:71	14	count
LEAF_NODE	6630:71	6630:71	15	count
LEAF_NODE	6630:76	6630:76	13	,
ARGUMENT	6631:53	6631:53	13	first_col
FIELD	6631:53	6631:53	14	first_col
LEAF_NODE	6631:53	6631:53	15	first_col
LEAF_NODE	6631:62	6631:62	13	,
ARGUMENT	6631:64	6631:75	13	last_col + 1
FIELD	6631:64	6631:64	14	last_col
LEAF_NODE	6631:64	6631:64	15	last_col
LEAF_NODE	6631:73	6631:73	14	+
FIELD	6631:75	6631:75	14	1
LEAF_NODE	6631:75	6631:75	15	1
LEAF_NODE	6631:76	6631:76	13	,
ARGUMENT	6632:53	6632:53	13	prev_trailing_bits
FIELD	6632:53	6632:53	14	prev_trailing_bits
LEAF_NODE	6632:53	6632:53	15	prev_trailing_bits
LEAF_NODE	6632:71	6632:71	13	)
LEAF_NODE	6632:72	6632:72	10	)
STATEMENTS	6633:16	6637:2	10	
LEAF_NODE	6633:16	6633:16	11	{
STATEMENTS	6634:2	6636:2	11	
EXPR_STATEMENT	6634:2	6635:58	12	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row ) ;
EXPR	6634:2	6634:2	13	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
FUNCTION_CALL	6634:2	6635:57	14	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
CALLEE	6634:2	6634:2	15	TIFFError
LEAF_NODE	6634:2	6634:2	16	TIFFError
LEAF_NODE	6634:11	6634:11	15	(
ARGUMENT	6634:12	6634:12	15	"extractSeparateRegion"
FIELD	6634:12	6634:12	16	"extractSeparateRegion"
LEAF_NODE	6634:12	6634:12	17	"extractSeparateRegion"
LEAF_NODE	6634:35	6634:35	15	,
ARGUMENT	6635:26	6635:26	15	"Unable to extract row %d"
FIELD	6635:26	6635:26	16	"Unable to extract row %d"
LEAF_NODE	6635:26	6635:26	17	"Unable to extract row %d"
LEAF_NODE	6635:52	6635:52	15	,
ARGUMENT	6635:54	6635:54	15	row
FIELD	6635:54	6635:54	16	row
LEAF_NODE	6635:54	6635:54	17	row
LEAF_NODE	6635:57	6635:57	15	)
LEAF_NODE	6635:58	6635:58	13	;
JUMP_STATEMENT	6636:2	6636:12	12	return ( 1 ) ;
KEYWORD	6636:2	6636:2	13	return
LEAF_NODE	6636:2	6636:2	14	return
DESTINATION	6636:9	6636:9	13	( 1 )
EXPR	6636:9	6636:11	14	( 1 )
LEAF_NODE	6636:9	6636:9	15	(
FIELD	6636:10	6636:10	15	1
LEAF_NODE	6636:10	6636:10	16	1
LEAF_NODE	6636:11	6636:11	15	)
LEAF_NODE	6636:12	6636:12	13	;
LEAF_NODE	6637:2	6637:2	11	}
JUMP_STATEMENT	6638:7	6638:12	9	break DESTINATION ;
KEYWORD	6638:7	6638:7	10	break
LEAF_NODE	6638:7	6638:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	6638:12	6638:12	10	;
LABEL	6639:6	6639:12	9	case 3 :
LEAF_NODE	6639:6	6639:6	10	case
LEAF_NODE	6639:11	6639:11	10	3
LEAF_NODE	6639:12	6639:12	10	:
LABEL	6640:6	6640:12	9	case 4 :
LEAF_NODE	6640:6	6640:6	10	case
LEAF_NODE	6640:11	6640:11	10	4
LEAF_NODE	6640:12	6640:12	10	:
LABEL	6641:6	6641:12	9	case 5 :
LEAF_NODE	6641:6	6641:6	10	case
LEAF_NODE	6641:11	6641:11	10	5
LEAF_NODE	6641:12	6641:12	10	:
SELECTION	6641:15	6645:16	9	
KEYWORD	6641:15	6641:15	10	if
LEAF_NODE	6641:15	6641:15	11	if
LEAF_NODE	6641:18	6641:18	10	(
CONDITION	6641:19	6641:19	10	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
EXPR	6641:19	6641:19	11	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
FUNCTION_CALL	6641:19	6644:71	12	extractContigSamplesShifted32bits ( src , dst , img_width , sample , spp , bps , count , first_col , last_col + 1 , prev_trailing_bits )
CALLEE	6641:19	6641:19	13	extractContigSamplesShifted32bits
LEAF_NODE	6641:19	6641:19	14	extractContigSamplesShifted32bits
LEAF_NODE	6641:53	6641:53	13	(
ARGUMENT	6641:54	6641:54	13	src
FIELD	6641:54	6641:54	14	src
LEAF_NODE	6641:54	6641:54	15	src
LEAF_NODE	6641:57	6641:57	13	,
ARGUMENT	6641:59	6641:59	13	dst
FIELD	6641:59	6641:59	14	dst
LEAF_NODE	6641:59	6641:59	15	dst
LEAF_NODE	6641:62	6641:62	13	,
ARGUMENT	6641:64	6641:64	13	img_width
FIELD	6641:64	6641:64	14	img_width
LEAF_NODE	6641:64	6641:64	15	img_width
LEAF_NODE	6641:73	6641:73	13	,
ARGUMENT	6642:53	6642:53	13	sample
FIELD	6642:53	6642:53	14	sample
LEAF_NODE	6642:53	6642:53	15	sample
LEAF_NODE	6642:59	6642:59	13	,
ARGUMENT	6642:61	6642:61	13	spp
FIELD	6642:61	6642:61	14	spp
LEAF_NODE	6642:61	6642:61	15	spp
LEAF_NODE	6642:64	6642:64	13	,
ARGUMENT	6642:66	6642:66	13	bps
FIELD	6642:66	6642:66	14	bps
LEAF_NODE	6642:66	6642:66	15	bps
LEAF_NODE	6642:69	6642:69	13	,
ARGUMENT	6642:71	6642:71	13	count
FIELD	6642:71	6642:71	14	count
LEAF_NODE	6642:71	6642:71	15	count
LEAF_NODE	6642:76	6642:76	13	,
ARGUMENT	6643:53	6643:53	13	first_col
FIELD	6643:53	6643:53	14	first_col
LEAF_NODE	6643:53	6643:53	15	first_col
LEAF_NODE	6643:62	6643:62	13	,
ARGUMENT	6643:64	6643:75	13	last_col + 1
FIELD	6643:64	6643:64	14	last_col
LEAF_NODE	6643:64	6643:64	15	last_col
LEAF_NODE	6643:73	6643:73	14	+
FIELD	6643:75	6643:75	14	1
LEAF_NODE	6643:75	6643:75	15	1
LEAF_NODE	6643:76	6643:76	13	,
ARGUMENT	6644:53	6644:53	13	prev_trailing_bits
FIELD	6644:53	6644:53	14	prev_trailing_bits
LEAF_NODE	6644:53	6644:53	15	prev_trailing_bits
LEAF_NODE	6644:71	6644:71	13	)
LEAF_NODE	6644:72	6644:72	10	)
STATEMENTS	6645:16	6649:2	10	
LEAF_NODE	6645:16	6645:16	11	{
STATEMENTS	6646:2	6648:2	11	
EXPR_STATEMENT	6646:2	6647:58	12	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row ) ;
EXPR	6646:2	6646:2	13	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
FUNCTION_CALL	6646:2	6647:57	14	TIFFError ( "extractSeparateRegion" , "Unable to extract row %d" , row )
CALLEE	6646:2	6646:2	15	TIFFError
LEAF_NODE	6646:2	6646:2	16	TIFFError
LEAF_NODE	6646:11	6646:11	15	(
ARGUMENT	6646:12	6646:12	15	"extractSeparateRegion"
FIELD	6646:12	6646:12	16	"extractSeparateRegion"
LEAF_NODE	6646:12	6646:12	17	"extractSeparateRegion"
LEAF_NODE	6646:35	6646:35	15	,
ARGUMENT	6647:26	6647:26	15	"Unable to extract row %d"
FIELD	6647:26	6647:26	16	"Unable to extract row %d"
LEAF_NODE	6647:26	6647:26	17	"Unable to extract row %d"
LEAF_NODE	6647:52	6647:52	15	,
ARGUMENT	6647:54	6647:54	15	row
FIELD	6647:54	6647:54	16	row
LEAF_NODE	6647:54	6647:54	17	row
LEAF_NODE	6647:57	6647:57	15	)
LEAF_NODE	6647:58	6647:58	13	;
JUMP_STATEMENT	6648:2	6648:12	12	return ( 1 ) ;
KEYWORD	6648:2	6648:2	13	return
LEAF_NODE	6648:2	6648:2	14	return
DESTINATION	6648:9	6648:9	13	( 1 )
EXPR	6648:9	6648:11	14	( 1 )
LEAF_NODE	6648:9	6648:9	15	(
FIELD	6648:10	6648:10	15	1
LEAF_NODE	6648:10	6648:10	16	1
LEAF_NODE	6648:11	6648:11	15	)
LEAF_NODE	6648:12	6648:12	13	;
LEAF_NODE	6649:2	6649:2	11	}
JUMP_STATEMENT	6650:7	6650:12	9	break DESTINATION ;
KEYWORD	6650:7	6650:7	10	break
LEAF_NODE	6650:7	6650:7	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	6650:12	6650:12	10	;
LABEL	6651:6	6651:13	9	default :
LEAF_NODE	6651:6	6651:6	10	default
LEAF_NODE	6651:13	6651:13	10	:
EXPR_STATEMENT	6651:15	6651:82	9	TIFFError ( "extractSeparateRegion" , "Unsupported bit depth %d" , bps ) ;
EXPR	6651:15	6651:15	10	TIFFError ( "extractSeparateRegion" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	6651:15	6651:81	11	TIFFError ( "extractSeparateRegion" , "Unsupported bit depth %d" , bps )
CALLEE	6651:15	6651:15	12	TIFFError
LEAF_NODE	6651:15	6651:15	13	TIFFError
LEAF_NODE	6651:24	6651:24	12	(
ARGUMENT	6651:25	6651:25	12	"extractSeparateRegion"
FIELD	6651:25	6651:25	13	"extractSeparateRegion"
LEAF_NODE	6651:25	6651:25	14	"extractSeparateRegion"
LEAF_NODE	6651:48	6651:48	12	,
ARGUMENT	6651:50	6651:50	12	"Unsupported bit depth %d"
FIELD	6651:50	6651:50	13	"Unsupported bit depth %d"
LEAF_NODE	6651:50	6651:50	14	"Unsupported bit depth %d"
LEAF_NODE	6651:76	6651:76	12	,
ARGUMENT	6651:78	6651:78	12	bps
FIELD	6651:78	6651:78	13	bps
LEAF_NODE	6651:78	6651:78	14	bps
LEAF_NODE	6651:81	6651:81	12	)
LEAF_NODE	6651:82	6651:82	10	;
JUMP_STATEMENT	6652:8	6652:18	9	return ( 1 ) ;
KEYWORD	6652:8	6652:8	10	return
LEAF_NODE	6652:8	6652:8	11	return
DESTINATION	6652:15	6652:15	10	( 1 )
EXPR	6652:15	6652:17	11	( 1 )
LEAF_NODE	6652:15	6652:15	12	(
FIELD	6652:16	6652:16	12	1
LEAF_NODE	6652:16	6652:16	13	1
LEAF_NODE	6652:17	6652:17	12	)
LEAF_NODE	6652:18	6652:18	10	;
LEAF_NODE	6653:6	6653:6	8	}
LEAF_NODE	6654:4	6654:4	5	}
JUMP_STATEMENT	6656:2	6656:12	3	return ( 0 ) ;
KEYWORD	6656:2	6656:2	4	return
LEAF_NODE	6656:2	6656:2	5	return
DESTINATION	6656:9	6656:9	4	( 0 )
EXPR	6656:9	6656:11	5	( 0 )
LEAF_NODE	6656:9	6656:9	6	(
FIELD	6656:10	6656:10	6	0
LEAF_NODE	6656:10	6656:10	7	0
LEAF_NODE	6656:11	6656:11	6	)
LEAF_NODE	6656:12	6656:12	4	;
LEAF_NODE	6657:2	6657:2	2	}
FUNCTION_DEF	6659:0	6889:2	1	
RETURN_TYPE	6659:0	6659:7	2	static int
LEAF_NODE	6659:0	6659:0	3	static
TYPE_NAME	6659:7	6659:7	3	int
LEAF_NODE	6659:7	6659:7	4	int
FUNCTION_NAME	6660:0	6660:0	2	extractImageSection
LEAF_NODE	6660:0	6660:0	3	extractImageSection
PARAMETER_LIST	6660:19	6661:69	2	( struct image_data * image , struct pageseg * section , unsigned char * src_buff , unsigned char * sect_buff )
LEAF_NODE	6660:19	6660:19	3	(
PARAMETER_DECL	6660:20	6660:39	3	struct image_data * image
TYPE	6660:20	6660:38	4	struct image_data *
TYPE_NAME	6660:20	6660:27	5	struct image_data
LEAF_NODE	6660:20	6660:20	6	struct
LEAF_NODE	6660:27	6660:27	6	image_data
POINTER	6660:38	6660:38	5	*
LEAF_NODE	6660:38	6660:38	6	*
NAME	6660:39	6660:39	4	image
LEAF_NODE	6660:39	6660:39	5	image
LEAF_NODE	6660:44	6660:44	3	,
PARAMETER_DECL	6660:46	6660:62	3	struct pageseg * section
TYPE	6660:46	6660:61	4	struct pageseg *
TYPE_NAME	6660:46	6660:53	5	struct pageseg
LEAF_NODE	6660:46	6660:46	6	struct
LEAF_NODE	6660:53	6660:53	6	pageseg
POINTER	6660:61	6660:61	5	*
LEAF_NODE	6660:61	6660:61	6	*
NAME	6660:62	6660:62	4	section
LEAF_NODE	6660:62	6660:62	5	section
LEAF_NODE	6660:69	6660:69	3	,
PARAMETER_DECL	6661:20	6661:35	3	unsigned char * src_buff
TYPE	6661:20	6661:34	4	unsigned char *
TYPE_NAME	6661:20	6661:29	5	unsigned char
LEAF_NODE	6661:20	6661:20	6	unsigned
LEAF_NODE	6661:29	6661:29	6	char
POINTER	6661:34	6661:34	5	*
LEAF_NODE	6661:34	6661:34	6	*
NAME	6661:35	6661:35	4	src_buff
LEAF_NODE	6661:35	6661:35	5	src_buff
LEAF_NODE	6661:43	6661:43	3	,
PARAMETER_DECL	6661:45	6661:60	3	unsigned char * sect_buff
TYPE	6661:45	6661:59	4	unsigned char *
TYPE_NAME	6661:45	6661:54	5	unsigned char
LEAF_NODE	6661:45	6661:45	6	unsigned
LEAF_NODE	6661:54	6661:54	6	char
POINTER	6661:59	6661:59	5	*
LEAF_NODE	6661:59	6661:59	6	*
NAME	6661:60	6661:60	4	sect_buff
LEAF_NODE	6661:60	6661:60	5	sect_buff
LEAF_NODE	6661:69	6661:69	3	)
LEAF_NODE	6662:2	6662:2	2	{
STATEMENTS	6663:2	6888:2	2	
SIMPLE_DECL	6663:2	6663:38	3	unsigned char bytebuff1 , unsigned char bytebuff2 ;
INIT_DECL_LIST	6663:2	6663:2	4	unsigned char bytebuff1 , unsigned char bytebuff2
VAR_DECL	6663:2	6663:18	5	unsigned char bytebuff1
TYPE	6663:2	6663:2	6	unsigned char
TYPE_NAME	6663:2	6663:12	7	unsigned char
LEAF_NODE	6663:2	6663:2	8	unsigned
LEAF_NODE	6663:12	6663:12	8	char
NAME	6663:18	6663:18	6	bytebuff1
LEAF_NODE	6663:18	6663:18	7	bytebuff1
LEAF_NODE	6663:27	6663:27	5	,
VAR_DECL	6663:2	6663:29	5	unsigned char bytebuff2
TYPE	6663:2	6663:2	6	unsigned char
TYPE_NAME	6663:2	6663:12	7	unsigned char
LEAF_NODE	6663:2	6663:2	8	unsigned
LEAF_NODE	6663:12	6663:12	8	char
NAME	6663:29	6663:29	6	bytebuff2
LEAF_NODE	6663:29	6663:29	7	bytebuff2
LEAF_NODE	6663:38	6663:38	4	;
SIMPLE_DECL	6668:2	6668:34	3	uint32 img_width , uint32 img_rowsize ;
INIT_DECL_LIST	6668:2	6668:2	4	uint32 img_width , uint32 img_rowsize
VAR_DECL	6668:2	6668:12	5	uint32 img_width
TYPE	6668:2	6668:2	6	uint32
TYPE_NAME	6668:2	6668:2	7	uint32
LEAF_NODE	6668:2	6668:2	8	uint32
NAME	6668:12	6668:12	6	img_width
LEAF_NODE	6668:12	6668:12	7	img_width
LEAF_NODE	6668:21	6668:21	5	,
VAR_DECL	6668:2	6668:23	5	uint32 img_rowsize
TYPE	6668:2	6668:2	6	uint32
TYPE_NAME	6668:2	6668:2	7	uint32
LEAF_NODE	6668:2	6668:2	8	uint32
NAME	6668:23	6668:23	6	img_rowsize
LEAF_NODE	6668:23	6668:23	7	img_rowsize
LEAF_NODE	6668:34	6668:34	4	;
SIMPLE_DECL	6670:2	6670:22	3	uint32 img_length ;
VAR_DECL	6670:2	6670:12	4	uint32 img_length
TYPE	6670:2	6670:2	5	uint32
TYPE_NAME	6670:2	6670:2	6	uint32
LEAF_NODE	6670:2	6670:2	7	uint32
NAME	6670:12	6670:12	5	img_length
LEAF_NODE	6670:12	6670:12	6	img_length
LEAF_NODE	6670:22	6670:22	4	;
SIMPLE_DECL	6672:2	6672:44	3	uint32 j , uint32 shift1 , uint32 shift2 , uint32 trailing_bits ;
INIT_DECL_LIST	6672:2	6672:2	4	uint32 j , uint32 shift1 , uint32 shift2 , uint32 trailing_bits
VAR_DECL	6672:2	6672:12	5	uint32 j
TYPE	6672:2	6672:2	6	uint32
TYPE_NAME	6672:2	6672:2	7	uint32
LEAF_NODE	6672:2	6672:2	8	uint32
NAME	6672:12	6672:12	6	j
LEAF_NODE	6672:12	6672:12	7	j
LEAF_NODE	6672:13	6672:13	5	,
INIT_DECL_LIST	6672:2	6672:2	5	uint32 shift1 , uint32 shift2 , uint32 trailing_bits
VAR_DECL	6672:2	6672:15	6	uint32 shift1
TYPE	6672:2	6672:2	7	uint32
TYPE_NAME	6672:2	6672:2	8	uint32
LEAF_NODE	6672:2	6672:2	9	uint32
NAME	6672:15	6672:15	7	shift1
LEAF_NODE	6672:15	6672:15	8	shift1
LEAF_NODE	6672:21	6672:21	6	,
INIT_DECL_LIST	6672:2	6672:2	6	uint32 shift2 , uint32 trailing_bits
VAR_DECL	6672:2	6672:23	7	uint32 shift2
TYPE	6672:2	6672:2	8	uint32
TYPE_NAME	6672:2	6672:2	9	uint32
LEAF_NODE	6672:2	6672:2	10	uint32
NAME	6672:23	6672:23	8	shift2
LEAF_NODE	6672:23	6672:23	9	shift2
LEAF_NODE	6672:29	6672:29	7	,
VAR_DECL	6672:2	6672:31	7	uint32 trailing_bits
TYPE	6672:2	6672:2	8	uint32
TYPE_NAME	6672:2	6672:2	9	uint32
LEAF_NODE	6672:2	6672:2	10	uint32
NAME	6672:31	6672:31	8	trailing_bits
LEAF_NODE	6672:31	6672:31	9	trailing_bits
LEAF_NODE	6672:44	6672:44	4	;
SIMPLE_DECL	6673:2	6673:57	3	uint32 row , uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col ;
INIT_DECL_LIST	6673:2	6673:2	4	uint32 row , uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6673:2	6673:12	5	uint32 row
TYPE	6673:2	6673:2	6	uint32
TYPE_NAME	6673:2	6673:2	7	uint32
LEAF_NODE	6673:2	6673:2	8	uint32
NAME	6673:12	6673:12	6	row
LEAF_NODE	6673:12	6673:12	7	row
LEAF_NODE	6673:15	6673:15	5	,
INIT_DECL_LIST	6673:2	6673:2	5	uint32 first_row , uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6673:2	6673:17	6	uint32 first_row
TYPE	6673:2	6673:2	7	uint32
TYPE_NAME	6673:2	6673:2	8	uint32
LEAF_NODE	6673:2	6673:2	9	uint32
NAME	6673:17	6673:17	7	first_row
LEAF_NODE	6673:17	6673:17	8	first_row
LEAF_NODE	6673:26	6673:26	6	,
INIT_DECL_LIST	6673:2	6673:2	6	uint32 last_row , uint32 first_col , uint32 last_col
VAR_DECL	6673:2	6673:28	7	uint32 last_row
TYPE	6673:2	6673:2	8	uint32
TYPE_NAME	6673:2	6673:2	9	uint32
LEAF_NODE	6673:2	6673:2	10	uint32
NAME	6673:28	6673:28	8	last_row
LEAF_NODE	6673:28	6673:28	9	last_row
LEAF_NODE	6673:36	6673:36	7	,
INIT_DECL_LIST	6673:2	6673:2	7	uint32 first_col , uint32 last_col
VAR_DECL	6673:2	6673:38	8	uint32 first_col
TYPE	6673:2	6673:2	9	uint32
TYPE_NAME	6673:2	6673:2	10	uint32
LEAF_NODE	6673:2	6673:2	11	uint32
NAME	6673:38	6673:38	9	first_col
LEAF_NODE	6673:38	6673:38	10	first_col
LEAF_NODE	6673:47	6673:47	8	,
VAR_DECL	6673:2	6673:49	8	uint32 last_col
TYPE	6673:2	6673:2	9	uint32
TYPE_NAME	6673:2	6673:2	10	uint32
LEAF_NODE	6673:2	6673:2	11	uint32
NAME	6673:49	6673:49	9	last_col
LEAF_NODE	6673:49	6673:49	10	last_col
LEAF_NODE	6673:57	6673:57	4	;
SIMPLE_DECL	6674:2	6674:58	3	uint32 src_offset , uint32 dst_offset , uint32 row_offset , uint32 col_offset ;
INIT_DECL_LIST	6674:2	6674:2	4	uint32 src_offset , uint32 dst_offset , uint32 row_offset , uint32 col_offset
VAR_DECL	6674:2	6674:12	5	uint32 src_offset
TYPE	6674:2	6674:2	6	uint32
TYPE_NAME	6674:2	6674:2	7	uint32
LEAF_NODE	6674:2	6674:2	8	uint32
NAME	6674:12	6674:12	6	src_offset
LEAF_NODE	6674:12	6674:12	7	src_offset
LEAF_NODE	6674:22	6674:22	5	,
INIT_DECL_LIST	6674:2	6674:2	5	uint32 dst_offset , uint32 row_offset , uint32 col_offset
VAR_DECL	6674:2	6674:24	6	uint32 dst_offset
TYPE	6674:2	6674:2	7	uint32
TYPE_NAME	6674:2	6674:2	8	uint32
LEAF_NODE	6674:2	6674:2	9	uint32
NAME	6674:24	6674:24	7	dst_offset
LEAF_NODE	6674:24	6674:24	8	dst_offset
LEAF_NODE	6674:34	6674:34	6	,
INIT_DECL_LIST	6674:2	6674:2	6	uint32 row_offset , uint32 col_offset
VAR_DECL	6674:2	6674:36	7	uint32 row_offset
TYPE	6674:2	6674:2	8	uint32
TYPE_NAME	6674:2	6674:2	9	uint32
LEAF_NODE	6674:2	6674:2	10	uint32
NAME	6674:36	6674:36	8	row_offset
LEAF_NODE	6674:36	6674:36	9	row_offset
LEAF_NODE	6674:46	6674:46	7	,
VAR_DECL	6674:2	6674:48	7	uint32 col_offset
TYPE	6674:2	6674:2	8	uint32
TYPE_NAME	6674:2	6674:2	9	uint32
LEAF_NODE	6674:2	6674:2	10	uint32
NAME	6674:48	6674:48	8	col_offset
LEAF_NODE	6674:48	6674:48	9	col_offset
LEAF_NODE	6674:58	6674:58	4	;
SIMPLE_DECL	6675:2	6675:40	3	uint32 offset1 , uint32 offset2 , uint32 full_bytes ;
INIT_DECL_LIST	6675:2	6675:2	4	uint32 offset1 , uint32 offset2 , uint32 full_bytes
VAR_DECL	6675:2	6675:12	5	uint32 offset1
TYPE	6675:2	6675:2	6	uint32
TYPE_NAME	6675:2	6675:2	7	uint32
LEAF_NODE	6675:2	6675:2	8	uint32
NAME	6675:12	6675:12	6	offset1
LEAF_NODE	6675:12	6675:12	7	offset1
LEAF_NODE	6675:19	6675:19	5	,
INIT_DECL_LIST	6675:2	6675:2	5	uint32 offset2 , uint32 full_bytes
VAR_DECL	6675:2	6675:21	6	uint32 offset2
TYPE	6675:2	6675:2	7	uint32
TYPE_NAME	6675:2	6675:2	8	uint32
LEAF_NODE	6675:2	6675:2	9	uint32
NAME	6675:21	6675:21	7	offset2
LEAF_NODE	6675:21	6675:21	8	offset2
LEAF_NODE	6675:28	6675:28	6	,
VAR_DECL	6675:2	6675:30	6	uint32 full_bytes
TYPE	6675:2	6675:2	7	uint32
TYPE_NAME	6675:2	6675:2	8	uint32
LEAF_NODE	6675:2	6675:2	9	uint32
NAME	6675:30	6675:30	7	full_bytes
LEAF_NODE	6675:30	6675:30	8	full_bytes
LEAF_NODE	6675:40	6675:40	4	;
SIMPLE_DECL	6676:2	6676:22	3	uint32 sect_width ;
VAR_DECL	6676:2	6676:12	4	uint32 sect_width
TYPE	6676:2	6676:2	5	uint32
TYPE_NAME	6676:2	6676:2	6	uint32
LEAF_NODE	6676:2	6676:2	7	uint32
NAME	6676:12	6676:12	5	sect_width
LEAF_NODE	6676:12	6676:12	6	sect_width
LEAF_NODE	6676:22	6676:22	4	;
SIMPLE_DECL	6678:2	6678:23	3	uint32 sect_length ;
VAR_DECL	6678:2	6678:12	4	uint32 sect_length
TYPE	6678:2	6678:2	5	uint32
TYPE_NAME	6678:2	6678:2	6	uint32
LEAF_NODE	6678:2	6678:2	7	uint32
NAME	6678:12	6678:12	5	sect_length
LEAF_NODE	6678:12	6678:12	6	sect_length
LEAF_NODE	6678:23	6678:23	4	;
SIMPLE_DECL	6680:2	6680:20	3	uint16 bps , uint16 spp ;
INIT_DECL_LIST	6680:2	6680:2	4	uint16 bps , uint16 spp
VAR_DECL	6680:2	6680:12	5	uint16 bps
TYPE	6680:2	6680:2	6	uint16
TYPE_NAME	6680:2	6680:2	7	uint16
LEAF_NODE	6680:2	6680:2	8	uint16
NAME	6680:12	6680:12	6	bps
LEAF_NODE	6680:12	6680:12	7	bps
LEAF_NODE	6680:15	6680:15	5	,
VAR_DECL	6680:2	6680:17	5	uint16 spp
TYPE	6680:2	6680:2	6	uint16
TYPE_NAME	6680:2	6680:2	7	uint16
LEAF_NODE	6680:2	6680:2	8	uint16
NAME	6680:17	6680:17	6	spp
LEAF_NODE	6680:17	6680:17	7	spp
LEAF_NODE	6680:20	6680:20	4	;
SIMPLE_DECL	6683:2	6683:12	3	int k ;
VAR_DECL	6683:2	6683:11	4	int k
TYPE	6683:2	6683:2	5	int
TYPE_NAME	6683:2	6683:2	6	int
LEAF_NODE	6683:2	6683:2	7	int
NAME	6683:11	6683:11	5	k
LEAF_NODE	6683:11	6683:11	6	k
LEAF_NODE	6683:12	6683:12	4	;
SIMPLE_DECL	6684:2	6684:22	3	unsigned char bitset ;
VAR_DECL	6684:2	6684:16	4	unsigned char bitset
TYPE	6684:2	6684:2	5	unsigned char
TYPE_NAME	6684:2	6684:11	6	unsigned char
LEAF_NODE	6684:2	6684:2	7	unsigned
LEAF_NODE	6684:11	6684:11	7	char
NAME	6684:16	6684:16	5	bitset
LEAF_NODE	6684:16	6684:16	6	bitset
LEAF_NODE	6684:22	6684:22	4	;
LEAF_NODE	6685:2	6685:2	3	static
SIMPLE_DECL	6685:9	6685:30	3	char * bitarray ; bitarray = NULL ;
VAR_DECL	6685:9	6685:15	4	char * bitarray ; bitarray = NULL
TYPE	6685:9	6685:14	5	char *
TYPE_NAME	6685:9	6685:9	6	char
LEAF_NODE	6685:9	6685:9	7	char
POINTER	6685:14	6685:14	6	*
LEAF_NODE	6685:14	6685:14	7	*
NAME	6685:15	6685:15	5	bitarray
LEAF_NODE	6685:15	6685:15	6	bitarray
LEAF_NODE	0:0	0:0	5	;
INIT	6685:15	6685:15	5	bitarray = NULL
ASSIGN	6685:15	6685:26	6	bitarray = NULL
LVAL	6685:15	6685:15	7	bitarray
NAME	6685:15	6685:15	8	bitarray
LEAF_NODE	6685:15	6685:15	9	bitarray
ASSIGN_OP	6685:24	6685:24	7	=
LEAF_NODE	6685:24	6685:24	8	=
RVAL	6685:26	6685:26	7	NULL
FIELD	6685:26	6685:26	8	NULL
LEAF_NODE	6685:26	6685:26	9	NULL
LEAF_NODE	6685:30	6685:30	4	;
EXPR_STATEMENT	6688:2	6688:26	3	img_width = image -> width ;
EXPR	6688:2	6688:2	4	img_width = image -> width
ASSIGN	6688:2	6688:14	5	img_width = image -> width
LVAL	6688:2	6688:2	6	img_width
FIELD	6688:2	6688:2	7	img_width
LEAF_NODE	6688:2	6688:2	8	img_width
ASSIGN_OP	6688:12	6688:12	6	=
LEAF_NODE	6688:12	6688:12	7	=
RVAL	6688:14	6688:14	6	image -> width
FIELD	6688:14	6688:21	7	image -> width
LEAF_NODE	6688:14	6688:14	8	image
LEAF_NODE	6688:19	6688:19	8	->
LEAF_NODE	6688:21	6688:21	8	width
LEAF_NODE	6688:26	6688:26	4	;
EXPR_STATEMENT	6690:2	6690:28	3	img_length = image -> length ;
EXPR	6690:2	6690:2	4	img_length = image -> length
ASSIGN	6690:2	6690:15	5	img_length = image -> length
LVAL	6690:2	6690:2	6	img_length
FIELD	6690:2	6690:2	7	img_length
LEAF_NODE	6690:2	6690:2	8	img_length
ASSIGN_OP	6690:13	6690:13	6	=
LEAF_NODE	6690:13	6690:13	7	=
RVAL	6690:15	6690:15	6	image -> length
FIELD	6690:15	6690:22	7	image -> length
LEAF_NODE	6690:15	6690:15	8	image
LEAF_NODE	6690:20	6690:20	8	->
LEAF_NODE	6690:22	6690:22	8	length
LEAF_NODE	6690:28	6690:28	4	;
EXPR_STATEMENT	6692:2	6692:18	3	bps = image -> bps ;
EXPR	6692:2	6692:2	4	bps = image -> bps
ASSIGN	6692:2	6692:8	5	bps = image -> bps
LVAL	6692:2	6692:2	6	bps
FIELD	6692:2	6692:2	7	bps
LEAF_NODE	6692:2	6692:2	8	bps
ASSIGN_OP	6692:6	6692:6	6	=
LEAF_NODE	6692:6	6692:6	7	=
RVAL	6692:8	6692:8	6	image -> bps
FIELD	6692:8	6692:15	7	image -> bps
LEAF_NODE	6692:8	6692:8	8	image
LEAF_NODE	6692:13	6692:13	8	->
LEAF_NODE	6692:15	6692:15	8	bps
LEAF_NODE	6692:18	6692:18	4	;
EXPR_STATEMENT	6693:2	6693:18	3	spp = image -> spp ;
EXPR	6693:2	6693:2	4	spp = image -> spp
ASSIGN	6693:2	6693:8	5	spp = image -> spp
LVAL	6693:2	6693:2	6	spp
FIELD	6693:2	6693:2	7	spp
LEAF_NODE	6693:2	6693:2	8	spp
ASSIGN_OP	6693:6	6693:6	6	=
LEAF_NODE	6693:6	6693:6	7	=
RVAL	6693:8	6693:8	6	image -> spp
FIELD	6693:8	6693:15	7	image -> spp
LEAF_NODE	6693:8	6693:8	8	image
LEAF_NODE	6693:13	6693:13	8	->
LEAF_NODE	6693:15	6693:15	8	spp
LEAF_NODE	6693:18	6693:18	4	;
EXPR_STATEMENT	6699:2	6699:16	3	src_offset = 0 ;
EXPR	6699:2	6699:2	4	src_offset = 0
ASSIGN	6699:2	6699:15	5	src_offset = 0
LVAL	6699:2	6699:2	6	src_offset
FIELD	6699:2	6699:2	7	src_offset
LEAF_NODE	6699:2	6699:2	8	src_offset
ASSIGN_OP	6699:13	6699:13	6	=
LEAF_NODE	6699:13	6699:13	7	=
RVAL	6699:15	6699:15	6	0
FIELD	6699:15	6699:15	7	0
LEAF_NODE	6699:15	6699:15	8	0
LEAF_NODE	6699:16	6699:16	4	;
EXPR_STATEMENT	6700:2	6700:16	3	dst_offset = 0 ;
EXPR	6700:2	6700:2	4	dst_offset = 0
ASSIGN	6700:2	6700:15	5	dst_offset = 0
LVAL	6700:2	6700:2	6	dst_offset
FIELD	6700:2	6700:2	7	dst_offset
LEAF_NODE	6700:2	6700:2	8	dst_offset
ASSIGN_OP	6700:13	6700:13	6	=
LEAF_NODE	6700:13	6700:13	7	=
RVAL	6700:15	6700:15	6	0
FIELD	6700:15	6700:15	7	0
LEAF_NODE	6700:15	6700:15	8	0
LEAF_NODE	6700:16	6700:16	4	;
SELECTION	6703:2	6704:4	3	
KEYWORD	6703:2	6703:2	4	if
LEAF_NODE	6703:2	6703:2	5	if
LEAF_NODE	6703:5	6703:5	4	(
CONDITION	6703:6	6703:6	4	bitarray == NULL
EXPR	6703:6	6703:18	5	bitarray == NULL
FIELD	6703:6	6703:6	6	bitarray
LEAF_NODE	6703:6	6703:6	7	bitarray
EQ_OPERATOR	6703:15	6703:15	6	==
LEAF_NODE	6703:15	6703:15	7	==
FIELD	6703:18	6703:18	6	NULL
LEAF_NODE	6703:18	6703:18	7	NULL
LEAF_NODE	6703:22	6703:22	4	)
STATEMENTS	6704:4	6710:4	4	
LEAF_NODE	6704:4	6704:4	5	{
STATEMENTS	6705:4	6705:4	5	
SELECTION	6705:4	6706:6	6	
KEYWORD	6705:4	6705:4	7	if
LEAF_NODE	6705:4	6705:4	8	if
LEAF_NODE	6705:7	6705:7	7	(
CONDITION	6705:8	6705:8	7	( bitarray = ( char * ) malloc ( img_width ) ) == NULL
EXPR	6705:8	6705:50	8	( bitarray = ( char * ) malloc ( img_width ) ) == NULL
LEAF_NODE	6705:8	6705:8	9	(
ASSIGN	6705:9	6705:20	9	bitarray = ( char * ) malloc ( img_width )
LVAL	6705:9	6705:9	10	bitarray
FIELD	6705:9	6705:9	11	bitarray
LEAF_NODE	6705:9	6705:9	12	bitarray
ASSIGN_OP	6705:18	6705:18	10	=
LEAF_NODE	6705:18	6705:18	11	=
RVAL	6705:20	6705:28	10	( char * ) malloc ( img_width )
LEAF_NODE	6705:20	6705:20	11	(
TYPE_NAME	6705:21	6705:21	11	char
LEAF_NODE	6705:21	6705:21	12	char
LEAF_NODE	6705:26	6705:26	11	*
LEAF_NODE	6705:27	6705:27	11	)
FUNCTION_CALL	6705:28	6705:44	11	malloc ( img_width )
CALLEE	6705:28	6705:28	12	malloc
LEAF_NODE	6705:28	6705:28	13	malloc
LEAF_NODE	6705:34	6705:34	12	(
ARGUMENT	6705:35	6705:35	12	img_width
FIELD	6705:35	6705:35	13	img_width
LEAF_NODE	6705:35	6705:35	14	img_width
LEAF_NODE	6705:44	6705:44	12	)
LEAF_NODE	6705:45	6705:45	9	)
EQ_OPERATOR	6705:47	6705:47	9	==
LEAF_NODE	6705:47	6705:47	10	==
FIELD	6705:50	6705:50	9	NULL
LEAF_NODE	6705:50	6705:50	10	NULL
LEAF_NODE	6705:54	6705:54	7	)
STATEMENTS	6706:6	6709:6	7	
LEAF_NODE	6706:6	6706:6	8	{
STATEMENTS	6707:6	6708:6	8	
EXPR_STATEMENT	6707:6	6707:68	9	TIFFError ( "" , "DEBUG: Unable to allocate debugging bitarray" ) ;
EXPR	6707:6	6707:6	10	TIFFError ( "" , "DEBUG: Unable to allocate debugging bitarray" )
FUNCTION_CALL	6707:6	6707:67	11	TIFFError ( "" , "DEBUG: Unable to allocate debugging bitarray" )
CALLEE	6707:6	6707:6	12	TIFFError
LEAF_NODE	6707:6	6707:6	13	TIFFError
LEAF_NODE	6707:16	6707:16	12	(
ARGUMENT	6707:17	6707:17	12	""
FIELD	6707:17	6707:17	13	""
LEAF_NODE	6707:17	6707:17	14	""
LEAF_NODE	6707:19	6707:19	12	,
ARGUMENT	6707:21	6707:21	12	"DEBUG: Unable to allocate debugging bitarray"
FIELD	6707:21	6707:21	13	"DEBUG: Unable to allocate debugging bitarray"
LEAF_NODE	6707:21	6707:21	14	"DEBUG: Unable to allocate debugging bitarray"
LEAF_NODE	6707:67	6707:67	12	)
LEAF_NODE	6707:68	6707:68	10	;
JUMP_STATEMENT	6708:6	6708:17	9	return ( - 1 ) ;
KEYWORD	6708:6	6708:6	10	return
LEAF_NODE	6708:6	6708:6	11	return
DESTINATION	6708:13	6708:13	10	( - 1 )
EXPR	6708:13	6708:16	11	( - 1 )
LEAF_NODE	6708:13	6708:13	12	(
UNARY_EXPR	6708:14	6708:15	12	- 1
UNARY_OPERATOR	6708:14	6708:14	13	-
LEAF_NODE	6708:14	6708:14	14	-
FIELD	6708:15	6708:15	13	1
LEAF_NODE	6708:15	6708:15	14	1
LEAF_NODE	6708:16	6708:16	12	)
LEAF_NODE	6708:17	6708:17	10	;
LEAF_NODE	6709:6	6709:6	8	}
LEAF_NODE	6710:4	6710:4	5	}
EXPR_STATEMENT	6714:2	6714:25	3	first_row = section -> y1 ;
EXPR	6714:2	6714:2	4	first_row = section -> y1
ASSIGN	6714:2	6714:14	5	first_row = section -> y1
LVAL	6714:2	6714:2	6	first_row
FIELD	6714:2	6714:2	7	first_row
LEAF_NODE	6714:2	6714:2	8	first_row
ASSIGN_OP	6714:12	6714:12	6	=
LEAF_NODE	6714:12	6714:12	7	=
RVAL	6714:14	6714:14	6	section -> y1
FIELD	6714:14	6714:23	7	section -> y1
LEAF_NODE	6714:14	6714:14	8	section
LEAF_NODE	6714:21	6714:21	8	->
LEAF_NODE	6714:23	6714:23	8	y1
LEAF_NODE	6714:25	6714:25	4	;
EXPR_STATEMENT	6715:2	6715:25	3	last_row = section -> y2 ;
EXPR	6715:2	6715:2	4	last_row = section -> y2
ASSIGN	6715:2	6715:14	5	last_row = section -> y2
LVAL	6715:2	6715:2	6	last_row
FIELD	6715:2	6715:2	7	last_row
LEAF_NODE	6715:2	6715:2	8	last_row
ASSIGN_OP	6715:12	6715:12	6	=
LEAF_NODE	6715:12	6715:12	7	=
RVAL	6715:14	6715:14	6	section -> y2
FIELD	6715:14	6715:23	7	section -> y2
LEAF_NODE	6715:14	6715:14	8	section
LEAF_NODE	6715:21	6715:21	8	->
LEAF_NODE	6715:23	6715:23	8	y2
LEAF_NODE	6715:25	6715:25	4	;
EXPR_STATEMENT	6716:2	6716:25	3	first_col = section -> x1 ;
EXPR	6716:2	6716:2	4	first_col = section -> x1
ASSIGN	6716:2	6716:14	5	first_col = section -> x1
LVAL	6716:2	6716:2	6	first_col
FIELD	6716:2	6716:2	7	first_col
LEAF_NODE	6716:2	6716:2	8	first_col
ASSIGN_OP	6716:12	6716:12	6	=
LEAF_NODE	6716:12	6716:12	7	=
RVAL	6716:14	6716:14	6	section -> x1
FIELD	6716:14	6716:23	7	section -> x1
LEAF_NODE	6716:14	6716:14	8	section
LEAF_NODE	6716:21	6716:21	8	->
LEAF_NODE	6716:23	6716:23	8	x1
LEAF_NODE	6716:25	6716:25	4	;
EXPR_STATEMENT	6717:2	6717:25	3	last_col = section -> x2 ;
EXPR	6717:2	6717:2	4	last_col = section -> x2
ASSIGN	6717:2	6717:14	5	last_col = section -> x2
LVAL	6717:2	6717:2	6	last_col
FIELD	6717:2	6717:2	7	last_col
LEAF_NODE	6717:2	6717:2	8	last_col
ASSIGN_OP	6717:12	6717:12	6	=
LEAF_NODE	6717:12	6717:12	7	=
RVAL	6717:14	6717:14	6	section -> x2
FIELD	6717:14	6717:23	7	section -> x2
LEAF_NODE	6717:14	6717:14	8	section
LEAF_NODE	6717:21	6717:21	8	->
LEAF_NODE	6717:23	6717:23	8	x2
LEAF_NODE	6717:25	6717:25	4	;
EXPR_STATEMENT	6719:2	6719:39	3	sect_width = last_col - first_col + 1 ;
EXPR	6719:2	6719:2	4	sect_width = last_col - first_col + 1
ASSIGN	6719:2	6719:15	5	sect_width = last_col - first_col + 1
LVAL	6719:2	6719:2	6	sect_width
FIELD	6719:2	6719:2	7	sect_width
LEAF_NODE	6719:2	6719:2	8	sect_width
ASSIGN_OP	6719:13	6719:13	6	=
LEAF_NODE	6719:13	6719:13	7	=
RVAL	6719:15	6719:38	6	last_col - first_col + 1
FIELD	6719:15	6719:15	7	last_col
LEAF_NODE	6719:15	6719:15	8	last_col
LEAF_NODE	6719:24	6719:24	7	-
FIELD	6719:26	6719:26	7	first_col
LEAF_NODE	6719:26	6719:26	8	first_col
LEAF_NODE	6719:36	6719:36	7	+
FIELD	6719:38	6719:38	7	1
LEAF_NODE	6719:38	6719:38	8	1
LEAF_NODE	6719:39	6719:39	4	;
EXPR_STATEMENT	6721:2	6721:40	3	sect_length = last_row - first_row + 1 ;
EXPR	6721:2	6721:2	4	sect_length = last_row - first_row + 1
ASSIGN	6721:2	6721:16	5	sect_length = last_row - first_row + 1
LVAL	6721:2	6721:2	6	sect_length
FIELD	6721:2	6721:2	7	sect_length
LEAF_NODE	6721:2	6721:2	8	sect_length
ASSIGN_OP	6721:14	6721:14	6	=
LEAF_NODE	6721:14	6721:14	7	=
RVAL	6721:16	6721:39	6	last_row - first_row + 1
FIELD	6721:16	6721:16	7	last_row
LEAF_NODE	6721:16	6721:16	8	last_row
LEAF_NODE	6721:25	6721:25	7	-
FIELD	6721:27	6721:27	7	first_row
LEAF_NODE	6721:27	6721:27	8	first_row
LEAF_NODE	6721:37	6721:37	7	+
FIELD	6721:39	6721:39	7	1
LEAF_NODE	6721:39	6721:39	8	1
LEAF_NODE	6721:40	6721:40	4	;
EXPR_STATEMENT	6723:2	6723:49	3	img_rowsize = ( ( img_width * bps + 7 ) / 8 ) * spp ;
EXPR	6723:2	6723:2	4	img_rowsize = ( ( img_width * bps + 7 ) / 8 ) * spp
ASSIGN	6723:2	6723:16	5	img_rowsize = ( ( img_width * bps + 7 ) / 8 ) * spp
LVAL	6723:2	6723:2	6	img_rowsize
FIELD	6723:2	6723:2	7	img_rowsize
LEAF_NODE	6723:2	6723:2	8	img_rowsize
ASSIGN_OP	6723:14	6723:14	6	=
LEAF_NODE	6723:14	6723:14	7	=
RVAL	6723:16	6723:46	6	( ( img_width * bps + 7 ) / 8 ) * spp
LEAF_NODE	6723:16	6723:16	7	(
LEAF_NODE	6723:17	6723:17	7	(
FIELD	6723:18	6723:18	7	img_width
LEAF_NODE	6723:18	6723:18	8	img_width
LEAF_NODE	6723:28	6723:28	7	*
FIELD	6723:30	6723:30	7	bps
LEAF_NODE	6723:30	6723:30	8	bps
LEAF_NODE	6723:34	6723:34	7	+
FIELD	6723:36	6723:36	7	7
LEAF_NODE	6723:36	6723:36	8	7
LEAF_NODE	6723:37	6723:37	7	)
LEAF_NODE	6723:39	6723:39	7	/
FIELD	6723:41	6723:41	7	8
LEAF_NODE	6723:41	6723:41	8	8
LEAF_NODE	6723:42	6723:42	7	)
LEAF_NODE	6723:44	6723:44	7	*
FIELD	6723:46	6723:46	7	spp
LEAF_NODE	6723:46	6723:46	8	spp
LEAF_NODE	6723:49	6723:49	4	;
LEAF_NODE	6724:2	6724:2	3	full_bytes
LEAF_NODE	6724:13	6724:13	3	=
LEAF_NODE	6724:15	6724:15	3	(
LEAF_NODE	6724:16	6724:16	3	sect_width
LEAF_NODE	6724:27	6724:27	3	*
LEAF_NODE	6724:29	6724:29	3	spp
LEAF_NODE	6724:33	6724:33	3	*
LEAF_NODE	6724:35	6724:35	3	bps
LEAF_NODE	6724:38	6724:38	3	)
LEAF_NODE	6724:40	6724:40	3	/
EXPR_STATEMENT	6724:42	6724:43	3	8 ;
EXPR	6724:42	6724:42	4	8
FIELD	6724:42	6724:42	5	8
LEAF_NODE	6724:42	6724:42	6	8
LEAF_NODE	6724:43	6724:43	4	;
EXPR_STATEMENT	6725:2	6725:40	3	trailing_bits = ( sect_width * bps ) % 8 ;
EXPR	6725:2	6725:2	4	trailing_bits = ( sect_width * bps ) % 8
ASSIGN	6725:2	6725:18	5	trailing_bits = ( sect_width * bps ) % 8
LVAL	6725:2	6725:2	6	trailing_bits
FIELD	6725:2	6725:2	7	trailing_bits
LEAF_NODE	6725:2	6725:2	8	trailing_bits
ASSIGN_OP	6725:16	6725:16	6	=
LEAF_NODE	6725:16	6725:16	7	=
RVAL	6725:18	6725:39	6	( sect_width * bps ) % 8
LEAF_NODE	6725:18	6725:18	7	(
FIELD	6725:19	6725:19	7	sect_width
LEAF_NODE	6725:19	6725:19	8	sect_width
LEAF_NODE	6725:30	6725:30	7	*
FIELD	6725:32	6725:32	7	bps
LEAF_NODE	6725:32	6725:32	8	bps
LEAF_NODE	6725:35	6725:35	7	)
LEAF_NODE	6725:37	6725:37	7	%
FIELD	6725:39	6725:39	7	8
LEAF_NODE	6725:39	6725:39	8	8
LEAF_NODE	6725:40	6725:40	4	;
EXPR_STATEMENT	6728:4	6729:52	3	TIFFError ( "" , "First row: %d, last row: %d, First col: %d, last col: %d\n" , first_row , last_row , first_col , last_col ) ;
EXPR	6728:4	6728:4	4	TIFFError ( "" , "First row: %d, last row: %d, First col: %d, last col: %d\n" , first_row , last_row , first_col , last_col )
FUNCTION_CALL	6728:4	6729:51	5	TIFFError ( "" , "First row: %d, last row: %d, First col: %d, last col: %d\n" , first_row , last_row , first_col , last_col )
CALLEE	6728:4	6728:4	6	TIFFError
LEAF_NODE	6728:4	6728:4	7	TIFFError
LEAF_NODE	6728:14	6728:14	6	(
ARGUMENT	6728:15	6728:15	6	""
FIELD	6728:15	6728:15	7	""
LEAF_NODE	6728:15	6728:15	8	""
LEAF_NODE	6728:17	6728:17	6	,
ARGUMENT	6728:19	6728:19	6	"First row: %d, last row: %d, First col: %d, last col: %d\n"
FIELD	6728:19	6728:19	7	"First row: %d, last row: %d, First col: %d, last col: %d\n"
LEAF_NODE	6728:19	6728:19	8	"First row: %d, last row: %d, First col: %d, last col: %d\n"
LEAF_NODE	6728:79	6728:79	6	,
ARGUMENT	6729:11	6729:11	6	first_row
FIELD	6729:11	6729:11	7	first_row
LEAF_NODE	6729:11	6729:11	8	first_row
LEAF_NODE	6729:20	6729:20	6	,
ARGUMENT	6729:22	6729:22	6	last_row
FIELD	6729:22	6729:22	7	last_row
LEAF_NODE	6729:22	6729:22	8	last_row
LEAF_NODE	6729:30	6729:30	6	,
ARGUMENT	6729:32	6729:32	6	first_col
FIELD	6729:32	6729:32	7	first_col
LEAF_NODE	6729:32	6729:32	8	first_col
LEAF_NODE	6729:41	6729:41	6	,
ARGUMENT	6729:43	6729:43	6	last_col
FIELD	6729:43	6729:43	7	last_col
LEAF_NODE	6729:43	6729:43	8	last_col
LEAF_NODE	6729:51	6729:51	6	)
LEAF_NODE	6729:52	6729:52	4	;
EXPR_STATEMENT	6730:4	6731:36	3	TIFFError ( "" , "Image width: %d, Image length: %d, bps: %d, spp: %d\n" , img_width , img_length , bps , spp ) ;
EXPR	6730:4	6730:4	4	TIFFError ( "" , "Image width: %d, Image length: %d, bps: %d, spp: %d\n" , img_width , img_length , bps , spp )
FUNCTION_CALL	6730:4	6731:35	5	TIFFError ( "" , "Image width: %d, Image length: %d, bps: %d, spp: %d\n" , img_width , img_length , bps , spp )
CALLEE	6730:4	6730:4	6	TIFFError
LEAF_NODE	6730:4	6730:4	7	TIFFError
LEAF_NODE	6730:14	6730:14	6	(
ARGUMENT	6730:15	6730:15	6	""
FIELD	6730:15	6730:15	7	""
LEAF_NODE	6730:15	6730:15	8	""
LEAF_NODE	6730:17	6730:17	6	,
ARGUMENT	6730:19	6730:19	6	"Image width: %d, Image length: %d, bps: %d, spp: %d\n"
FIELD	6730:19	6730:19	7	"Image width: %d, Image length: %d, bps: %d, spp: %d\n"
LEAF_NODE	6730:19	6730:19	8	"Image width: %d, Image length: %d, bps: %d, spp: %d\n"
LEAF_NODE	6730:74	6730:74	6	,
ARGUMENT	6731:4	6731:4	6	img_width
FIELD	6731:4	6731:4	7	img_width
LEAF_NODE	6731:4	6731:4	8	img_width
LEAF_NODE	6731:13	6731:13	6	,
ARGUMENT	6731:15	6731:15	6	img_length
FIELD	6731:15	6731:15	7	img_length
LEAF_NODE	6731:15	6731:15	8	img_length
LEAF_NODE	6731:25	6731:25	6	,
ARGUMENT	6731:27	6731:27	6	bps
FIELD	6731:27	6731:27	7	bps
LEAF_NODE	6731:27	6731:27	8	bps
LEAF_NODE	6731:30	6731:30	6	,
ARGUMENT	6731:32	6731:32	6	spp
FIELD	6731:32	6731:32	7	spp
LEAF_NODE	6731:32	6731:32	8	spp
LEAF_NODE	6731:35	6731:35	6	)
LEAF_NODE	6731:36	6731:36	4	;
EXPR_STATEMENT	6732:4	6733:62	3	TIFFError ( "" , "Sect  width: %d,  Sect length: %d, full bytes: %d trailing bits %d\n" , sect_width , sect_length , full_bytes , trailing_bits ) ;
EXPR	6732:4	6732:4	4	TIFFError ( "" , "Sect  width: %d,  Sect length: %d, full bytes: %d trailing bits %d\n" , sect_width , sect_length , full_bytes , trailing_bits )
FUNCTION_CALL	6732:4	6733:61	5	TIFFError ( "" , "Sect  width: %d,  Sect length: %d, full bytes: %d trailing bits %d\n" , sect_width , sect_length , full_bytes , trailing_bits )
CALLEE	6732:4	6732:4	6	TIFFError
LEAF_NODE	6732:4	6732:4	7	TIFFError
LEAF_NODE	6732:14	6732:14	6	(
ARGUMENT	6732:15	6732:15	6	""
FIELD	6732:15	6732:15	7	""
LEAF_NODE	6732:15	6732:15	8	""
LEAF_NODE	6732:17	6732:17	6	,
ARGUMENT	6732:19	6732:19	6	"Sect  width: %d,  Sect length: %d, full bytes: %d trailing bits %d\n"
FIELD	6732:19	6732:19	7	"Sect  width: %d,  Sect length: %d, full bytes: %d trailing bits %d\n"
LEAF_NODE	6732:19	6732:19	8	"Sect  width: %d,  Sect length: %d, full bytes: %d trailing bits %d\n"
LEAF_NODE	6732:89	6732:89	6	,
ARGUMENT	6733:11	6733:11	6	sect_width
FIELD	6733:11	6733:11	7	sect_width
LEAF_NODE	6733:11	6733:11	8	sect_width
LEAF_NODE	6733:21	6733:21	6	,
ARGUMENT	6733:23	6733:23	6	sect_length
FIELD	6733:23	6733:23	7	sect_length
LEAF_NODE	6733:23	6733:23	8	sect_length
LEAF_NODE	6733:34	6733:34	6	,
ARGUMENT	6733:36	6733:36	6	full_bytes
FIELD	6733:36	6733:36	7	full_bytes
LEAF_NODE	6733:36	6733:36	8	full_bytes
LEAF_NODE	6733:46	6733:46	6	,
ARGUMENT	6733:48	6733:48	6	trailing_bits
FIELD	6733:48	6733:48	7	trailing_bits
LEAF_NODE	6733:48	6733:48	8	trailing_bits
LEAF_NODE	6733:61	6733:61	6	)
LEAF_NODE	6733:62	6733:62	4	;
SELECTION	6736:2	6737:4	3	
KEYWORD	6736:2	6736:2	4	if
LEAF_NODE	6736:2	6736:2	5	if
LEAF_NODE	6736:5	6736:5	4	(
CONDITION	6736:6	6736:6	4	( bps % 8 ) == 0
EXPR	6736:6	6736:19	5	( bps % 8 ) == 0
LEAF_NODE	6736:6	6736:6	6	(
FIELD	6736:7	6736:7	6	bps
LEAF_NODE	6736:7	6736:7	7	bps
LEAF_NODE	6736:11	6736:11	6	%
FIELD	6736:13	6736:13	6	8
LEAF_NODE	6736:13	6736:13	7	8
LEAF_NODE	6736:14	6736:14	6	)
EQ_OPERATOR	6736:16	6736:16	6	==
LEAF_NODE	6736:16	6736:16	7	==
FIELD	6736:19	6736:19	6	0
LEAF_NODE	6736:19	6736:19	7	0
LEAF_NODE	6736:20	6736:20	4	)
STATEMENTS	6737:4	6751:4	4	
LEAF_NODE	6737:4	6737:4	5	{
STATEMENTS	6738:4	6739:4	5	
LEAF_NODE	6738:4	6738:4	6	col_offset
LEAF_NODE	6738:15	6738:15	6	=
LEAF_NODE	6738:17	6738:17	6	first_col
LEAF_NODE	6738:27	6738:27	6	*
LEAF_NODE	6738:29	6738:29	6	spp
EXPR_STATEMENT	6738:33	6738:42	6	* bps / 8 ;
EXPR	6738:33	6738:41	7	* bps / 8
UNARY_EXPR	6738:33	6738:35	8	* bps
UNARY_OPERATOR	6738:33	6738:33	9	*
LEAF_NODE	6738:33	6738:33	10	*
FIELD	6738:35	6738:35	9	bps
LEAF_NODE	6738:35	6738:35	10	bps
LEAF_NODE	6738:39	6738:39	8	/
FIELD	6738:41	6738:41	8	8
LEAF_NODE	6738:41	6738:41	9	8
LEAF_NODE	6738:42	6738:42	7	;
ITERATION	6739:4	6740:6	6	
KEYWORD	6739:4	6739:4	7	for
LEAF_NODE	6739:4	6739:4	8	for
LEAF_NODE	6739:8	6739:8	7	(
FOR_INIT	6739:9	6739:24	7	row = first_row ;
EXPR	6739:9	6739:9	8	row = first_row
ASSIGN	6739:9	6739:15	9	row = first_row
LVAL	6739:9	6739:9	10	row
FIELD	6739:9	6739:9	11	row
LEAF_NODE	6739:9	6739:9	12	row
ASSIGN_OP	6739:13	6739:13	10	=
LEAF_NODE	6739:13	6739:13	11	=
RVAL	6739:15	6739:15	10	first_row
FIELD	6739:15	6739:15	11	first_row
LEAF_NODE	6739:15	6739:15	12	first_row
LEAF_NODE	6739:24	6739:24	8	;
CONDITION	6739:26	6739:26	7	row <= last_row
EXPR	6739:26	6739:33	8	row <= last_row
FIELD	6739:26	6739:26	9	row
LEAF_NODE	6739:26	6739:26	10	row
REL_OPERATOR	6739:30	6739:30	9	<=
LEAF_NODE	6739:30	6739:30	10	<=
FIELD	6739:33	6739:33	9	last_row
LEAF_NODE	6739:33	6739:33	10	last_row
LEAF_NODE	6739:41	6739:41	7	;
FOR_EXPR	6739:43	6739:43	7	row ++
EXPR	6739:43	6739:43	8	row ++
FIELD	6739:43	6739:46	9	row ++
LEAF_NODE	6739:43	6739:43	10	row
LEAF_NODE	6739:46	6739:46	10	++
LEAF_NODE	6739:48	6739:48	7	)
STATEMENTS	6740:6	6750:6	7	
LEAF_NODE	6740:6	6740:6	8	{
STATEMENTS	6742:6	6749:6	8	
EXPR_STATEMENT	6742:6	6742:36	9	row_offset = row * img_rowsize ;
EXPR	6742:6	6742:6	10	row_offset = row * img_rowsize
ASSIGN	6742:6	6742:19	11	row_offset = row * img_rowsize
LVAL	6742:6	6742:6	12	row_offset
FIELD	6742:6	6742:6	13	row_offset
LEAF_NODE	6742:6	6742:6	14	row_offset
ASSIGN_OP	6742:17	6742:17	12	=
LEAF_NODE	6742:17	6742:17	13	=
RVAL	6742:19	6742:25	12	row * img_rowsize
FIELD	6742:19	6742:19	13	row
LEAF_NODE	6742:19	6742:19	14	row
LEAF_NODE	6742:23	6742:23	13	*
FIELD	6742:25	6742:25	13	img_rowsize
LEAF_NODE	6742:25	6742:25	14	img_rowsize
LEAF_NODE	6742:36	6742:36	10	;
EXPR_STATEMENT	6743:6	6743:42	9	src_offset = row_offset + col_offset ;
EXPR	6743:6	6743:6	10	src_offset = row_offset + col_offset
ASSIGN	6743:6	6743:19	11	src_offset = row_offset + col_offset
LVAL	6743:6	6743:6	12	src_offset
FIELD	6743:6	6743:6	13	src_offset
LEAF_NODE	6743:6	6743:6	14	src_offset
ASSIGN_OP	6743:17	6743:17	12	=
LEAF_NODE	6743:17	6743:17	13	=
RVAL	6743:19	6743:32	12	row_offset + col_offset
FIELD	6743:19	6743:19	13	row_offset
LEAF_NODE	6743:19	6743:19	14	row_offset
LEAF_NODE	6743:30	6743:30	13	+
FIELD	6743:32	6743:32	13	col_offset
LEAF_NODE	6743:32	6743:32	14	col_offset
LEAF_NODE	6743:42	6743:42	10	;
EXPR_STATEMENT	6746:8	6746:82	9	TIFFError ( "" , "Src offset: %8d, Dst offset: %8d" , src_offset , dst_offset ) ;
EXPR	6746:8	6746:8	10	TIFFError ( "" , "Src offset: %8d, Dst offset: %8d" , src_offset , dst_offset )
FUNCTION_CALL	6746:8	6746:81	11	TIFFError ( "" , "Src offset: %8d, Dst offset: %8d" , src_offset , dst_offset )
CALLEE	6746:8	6746:8	12	TIFFError
LEAF_NODE	6746:8	6746:8	13	TIFFError
LEAF_NODE	6746:18	6746:18	12	(
ARGUMENT	6746:19	6746:19	12	""
FIELD	6746:19	6746:19	13	""
LEAF_NODE	6746:19	6746:19	14	""
LEAF_NODE	6746:21	6746:21	12	,
ARGUMENT	6746:23	6746:23	12	"Src offset: %8d, Dst offset: %8d"
FIELD	6746:23	6746:23	13	"Src offset: %8d, Dst offset: %8d"
LEAF_NODE	6746:23	6746:23	14	"Src offset: %8d, Dst offset: %8d"
LEAF_NODE	6746:57	6746:57	12	,
ARGUMENT	6746:59	6746:59	12	src_offset
FIELD	6746:59	6746:59	13	src_offset
LEAF_NODE	6746:59	6746:59	14	src_offset
LEAF_NODE	6746:69	6746:69	12	,
ARGUMENT	6746:71	6746:71	12	dst_offset
FIELD	6746:71	6746:71	13	dst_offset
LEAF_NODE	6746:71	6746:71	14	dst_offset
LEAF_NODE	6746:81	6746:81	12	)
LEAF_NODE	6746:82	6746:82	10	;
EXPR_STATEMENT	6748:6	6748:77	9	_TIFFmemcpy ( sect_buff + dst_offset , src_buff + src_offset , full_bytes ) ;
EXPR	6748:6	6748:6	10	_TIFFmemcpy ( sect_buff + dst_offset , src_buff + src_offset , full_bytes )
FUNCTION_CALL	6748:6	6748:76	11	_TIFFmemcpy ( sect_buff + dst_offset , src_buff + src_offset , full_bytes )
CALLEE	6748:6	6748:6	12	_TIFFmemcpy
LEAF_NODE	6748:6	6748:6	13	_TIFFmemcpy
LEAF_NODE	6748:18	6748:18	12	(
ARGUMENT	6748:19	6748:31	12	sect_buff + dst_offset
FIELD	6748:19	6748:19	13	sect_buff
LEAF_NODE	6748:19	6748:19	14	sect_buff
LEAF_NODE	6748:29	6748:29	13	+
FIELD	6748:31	6748:31	13	dst_offset
LEAF_NODE	6748:31	6748:31	14	dst_offset
LEAF_NODE	6748:41	6748:41	12	,
ARGUMENT	6748:43	6748:54	12	src_buff + src_offset
FIELD	6748:43	6748:43	13	src_buff
LEAF_NODE	6748:43	6748:43	14	src_buff
LEAF_NODE	6748:52	6748:52	13	+
FIELD	6748:54	6748:54	13	src_offset
LEAF_NODE	6748:54	6748:54	14	src_offset
LEAF_NODE	6748:64	6748:64	12	,
ARGUMENT	6748:66	6748:66	12	full_bytes
FIELD	6748:66	6748:66	13	full_bytes
LEAF_NODE	6748:66	6748:66	14	full_bytes
LEAF_NODE	6748:76	6748:76	12	)
LEAF_NODE	6748:77	6748:77	10	;
EXPR_STATEMENT	6749:6	6749:30	9	dst_offset += full_bytes ;
EXPR	6749:6	6749:6	10	dst_offset += full_bytes
ASSIGN	6749:6	6749:20	11	dst_offset += full_bytes
LVAL	6749:6	6749:6	12	dst_offset
FIELD	6749:6	6749:6	13	dst_offset
LEAF_NODE	6749:6	6749:6	14	dst_offset
ASSIGN_OP	6749:17	6749:17	12	+=
LEAF_NODE	6749:17	6749:17	13	+=
RVAL	6749:20	6749:20	12	full_bytes
FIELD	6749:20	6749:20	13	full_bytes
LEAF_NODE	6749:20	6749:20	14	full_bytes
LEAF_NODE	6749:30	6749:30	10	;
LEAF_NODE	6750:6	6750:6	8	}
LEAF_NODE	6751:4	6751:4	5	}
SELECTION	6752:2	6753:4	3	
KEYWORD	6752:2	6752:2	4	else
LEAF_NODE	6752:2	6752:2	5	else
STATEMENTS	6753:4	6886:4	4	
LEAF_NODE	6753:4	6753:4	5	{
STATEMENTS	6754:4	6756:4	5	
EXPR_STATEMENT	6754:4	6754:43	6	shift1 = spp * ( ( first_col * bps ) % 8 ) ;
EXPR	6754:4	6754:4	7	shift1 = spp * ( ( first_col * bps ) % 8 )
ASSIGN	6754:4	6754:14	8	shift1 = spp * ( ( first_col * bps ) % 8 )
LVAL	6754:4	6754:4	9	shift1
FIELD	6754:4	6754:4	10	shift1
LEAF_NODE	6754:4	6754:4	11	shift1
ASSIGN_OP	6754:12	6754:12	9	=
LEAF_NODE	6754:12	6754:12	10	=
RVAL	6754:14	6754:42	9	spp * ( ( first_col * bps ) % 8 )
FIELD	6754:14	6754:14	10	spp
LEAF_NODE	6754:14	6754:14	11	spp
LEAF_NODE	6754:18	6754:18	10	*
LEAF_NODE	6754:20	6754:20	10	(
LEAF_NODE	6754:21	6754:21	10	(
FIELD	6754:22	6754:22	10	first_col
LEAF_NODE	6754:22	6754:22	11	first_col
LEAF_NODE	6754:32	6754:32	10	*
FIELD	6754:34	6754:34	10	bps
LEAF_NODE	6754:34	6754:34	11	bps
LEAF_NODE	6754:37	6754:37	10	)
LEAF_NODE	6754:39	6754:39	10	%
FIELD	6754:41	6754:41	10	8
LEAF_NODE	6754:41	6754:41	11	8
LEAF_NODE	6754:42	6754:42	10	)
LEAF_NODE	6754:43	6754:43	7	;
EXPR_STATEMENT	6755:4	6755:42	6	shift2 = spp * ( ( last_col * bps ) % 8 ) ;
EXPR	6755:4	6755:4	7	shift2 = spp * ( ( last_col * bps ) % 8 )
ASSIGN	6755:4	6755:14	8	shift2 = spp * ( ( last_col * bps ) % 8 )
LVAL	6755:4	6755:4	9	shift2
FIELD	6755:4	6755:4	10	shift2
LEAF_NODE	6755:4	6755:4	11	shift2
ASSIGN_OP	6755:12	6755:12	9	=
LEAF_NODE	6755:12	6755:12	10	=
RVAL	6755:14	6755:41	9	spp * ( ( last_col * bps ) % 8 )
FIELD	6755:14	6755:14	10	spp
LEAF_NODE	6755:14	6755:14	11	spp
LEAF_NODE	6755:18	6755:18	10	*
LEAF_NODE	6755:20	6755:20	10	(
LEAF_NODE	6755:21	6755:21	10	(
FIELD	6755:22	6755:22	10	last_col
LEAF_NODE	6755:22	6755:22	11	last_col
LEAF_NODE	6755:31	6755:31	10	*
FIELD	6755:33	6755:33	10	bps
LEAF_NODE	6755:33	6755:33	11	bps
LEAF_NODE	6755:36	6755:36	10	)
LEAF_NODE	6755:38	6755:38	10	%
FIELD	6755:40	6755:40	10	8
LEAF_NODE	6755:40	6755:40	11	8
LEAF_NODE	6755:41	6755:41	10	)
LEAF_NODE	6755:42	6755:42	7	;
ITERATION	6756:4	6757:6	6	
KEYWORD	6756:4	6756:4	7	for
LEAF_NODE	6756:4	6756:4	8	for
LEAF_NODE	6756:8	6756:8	7	(
FOR_INIT	6756:9	6756:24	7	row = first_row ;
EXPR	6756:9	6756:9	8	row = first_row
ASSIGN	6756:9	6756:15	9	row = first_row
LVAL	6756:9	6756:9	10	row
FIELD	6756:9	6756:9	11	row
LEAF_NODE	6756:9	6756:9	12	row
ASSIGN_OP	6756:13	6756:13	10	=
LEAF_NODE	6756:13	6756:13	11	=
RVAL	6756:15	6756:15	10	first_row
FIELD	6756:15	6756:15	11	first_row
LEAF_NODE	6756:15	6756:15	12	first_row
LEAF_NODE	6756:24	6756:24	8	;
CONDITION	6756:26	6756:26	7	row <= last_row
EXPR	6756:26	6756:33	8	row <= last_row
FIELD	6756:26	6756:26	9	row
LEAF_NODE	6756:26	6756:26	10	row
REL_OPERATOR	6756:30	6756:30	9	<=
LEAF_NODE	6756:30	6756:30	10	<=
FIELD	6756:33	6756:33	9	last_row
LEAF_NODE	6756:33	6756:33	10	last_row
LEAF_NODE	6756:41	6756:41	7	;
FOR_EXPR	6756:43	6756:43	7	row ++
EXPR	6756:43	6756:43	8	row ++
FIELD	6756:43	6756:46	9	row ++
LEAF_NODE	6756:43	6756:43	10	row
LEAF_NODE	6756:46	6756:46	10	++
LEAF_NODE	6756:48	6756:48	7	)
STATEMENTS	6757:6	6885:6	7	
LEAF_NODE	6757:6	6757:6	8	{
STATEMENTS	6759:6	6818:6	8	
EXPR_STATEMENT	6759:6	6759:36	9	row_offset = row * img_rowsize ;
EXPR	6759:6	6759:6	10	row_offset = row * img_rowsize
ASSIGN	6759:6	6759:19	11	row_offset = row * img_rowsize
LVAL	6759:6	6759:6	12	row_offset
FIELD	6759:6	6759:6	13	row_offset
LEAF_NODE	6759:6	6759:6	14	row_offset
ASSIGN_OP	6759:17	6759:17	12	=
LEAF_NODE	6759:17	6759:17	13	=
RVAL	6759:19	6759:25	12	row * img_rowsize
FIELD	6759:19	6759:19	13	row
LEAF_NODE	6759:19	6759:19	14	row
LEAF_NODE	6759:23	6759:23	13	*
FIELD	6759:25	6759:25	13	img_rowsize
LEAF_NODE	6759:25	6759:25	14	img_rowsize
LEAF_NODE	6759:36	6759:36	10	;
LEAF_NODE	6760:6	6760:6	9	offset1
LEAF_NODE	6760:14	6760:14	9	=
LEAF_NODE	6760:16	6760:16	9	row_offset
LEAF_NODE	6760:27	6760:27	9	+
LEAF_NODE	6760:29	6760:29	9	(
LEAF_NODE	6760:30	6760:30	9	first_col
LEAF_NODE	6760:40	6760:40	9	*
LEAF_NODE	6760:42	6760:42	9	bps
LEAF_NODE	6760:46	6760:46	9	/
LEAF_NODE	6760:48	6760:48	9	8
LEAF_NODE	6760:49	6760:49	9	)
LEAF_NODE	6760:50	6760:50	9	;
LEAF_NODE	6761:6	6761:6	9	offset2
LEAF_NODE	6761:14	6761:14	9	=
LEAF_NODE	6761:16	6761:16	9	row_offset
LEAF_NODE	6761:27	6761:27	9	+
LEAF_NODE	6761:29	6761:29	9	(
LEAF_NODE	6761:30	6761:30	9	last_col
LEAF_NODE	6761:39	6761:39	9	*
LEAF_NODE	6761:41	6761:41	9	bps
LEAF_NODE	6761:45	6761:45	9	/
LEAF_NODE	6761:47	6761:47	9	8
LEAF_NODE	6761:48	6761:48	9	)
LEAF_NODE	6761:49	6761:49	9	;
ITERATION	6764:6	6765:8	9	
KEYWORD	6764:6	6764:6	10	for
LEAF_NODE	6764:6	6764:6	11	for
LEAF_NODE	6764:10	6764:10	10	(
FOR_INIT	6764:11	6764:23	10	j = 0 , k = 7 ;
EXPR	6764:11	6764:18	11	j = 0 , k = 7
ASSIGN	6764:11	6764:15	12	j = 0
LVAL	6764:11	6764:11	13	j
FIELD	6764:11	6764:11	14	j
LEAF_NODE	6764:11	6764:11	15	j
ASSIGN_OP	6764:13	6764:13	13	=
LEAF_NODE	6764:13	6764:13	14	=
RVAL	6764:15	6764:15	13	0
FIELD	6764:15	6764:15	14	0
LEAF_NODE	6764:15	6764:15	15	0
LEAF_NODE	6764:16	6764:16	12	,
ASSIGN	6764:18	6764:22	12	k = 7
LVAL	6764:18	6764:18	13	k
FIELD	6764:18	6764:18	14	k
LEAF_NODE	6764:18	6764:18	15	k
ASSIGN_OP	6764:20	6764:20	13	=
LEAF_NODE	6764:20	6764:20	14	=
RVAL	6764:22	6764:22	13	7
FIELD	6764:22	6764:22	14	7
LEAF_NODE	6764:22	6764:22	15	7
LEAF_NODE	6764:23	6764:23	11	;
CONDITION	6764:25	6764:25	10	j < 8
EXPR	6764:25	6764:29	11	j < 8
FIELD	6764:25	6764:25	12	j
LEAF_NODE	6764:25	6764:25	13	j
REL_OPERATOR	6764:27	6764:27	12	<
LEAF_NODE	6764:27	6764:27	13	<
FIELD	6764:29	6764:29	12	8
LEAF_NODE	6764:29	6764:29	13	8
LEAF_NODE	6764:30	6764:30	10	;
FOR_EXPR	6764:32	6764:32	10	j ++ , k --
EXPR	6764:32	6764:37	11	j ++ , k --
FIELD	6764:32	6764:33	12	j ++
LEAF_NODE	6764:32	6764:32	13	j
LEAF_NODE	6764:33	6764:33	13	++
LEAF_NODE	6764:35	6764:35	12	,
FIELD	6764:37	6764:38	12	k --
LEAF_NODE	6764:37	6764:37	13	k
LEAF_NODE	6764:38	6764:38	13	--
LEAF_NODE	6764:40	6764:40	10	)
STATEMENTS	6765:8	6768:8	10	
LEAF_NODE	6765:8	6765:8	11	{
STATEMENTS	6766:8	6767:51	11	
EXPR_STATEMENT	6766:8	6766:74	12	bitset = * ( src_buff + offset1 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	6766:8	6766:8	13	bitset = * ( src_buff + offset1 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	6766:8	6766:17	14	bitset = * ( src_buff + offset1 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	6766:8	6766:8	15	bitset
FIELD	6766:8	6766:8	16	bitset
LEAF_NODE	6766:8	6766:8	17	bitset
ASSIGN_OP	6766:15	6766:15	15	=
LEAF_NODE	6766:15	6766:15	16	=
RVAL	6766:17	6766:17	15	* ( src_buff + offset1 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	6766:17	6766:73	16	* ( src_buff + offset1 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	6766:17	6766:65	17	* ( src_buff + offset1 ) & ( ( ( unsigned char ) 1 << k ) )
UNARY_EXPR	6766:17	6766:37	18	* ( src_buff + offset1 )
UNARY_OPERATOR	6766:17	6766:17	19	*
LEAF_NODE	6766:17	6766:17	20	*
LEAF_NODE	6766:18	6766:18	19	(
FIELD	6766:19	6766:19	19	src_buff
LEAF_NODE	6766:19	6766:19	20	src_buff
LEAF_NODE	6766:28	6766:28	19	+
FIELD	6766:30	6766:30	19	offset1
LEAF_NODE	6766:30	6766:30	20	offset1
LEAF_NODE	6766:37	6766:37	19	)
LEAF_NODE	6766:39	6766:39	18	&
LEAF_NODE	6766:41	6766:41	18	(
LEAF_NODE	6766:42	6766:42	18	(
LEAF_NODE	6766:43	6766:43	18	(
TYPE_NAME	6766:44	6766:53	18	unsigned char
LEAF_NODE	6766:44	6766:44	19	unsigned
LEAF_NODE	6766:53	6766:53	19	char
LEAF_NODE	6766:57	6766:57	18	)
FIELD	6766:58	6766:58	18	1
LEAF_NODE	6766:58	6766:58	19	1
LEAF_NODE	6766:60	6766:60	18	<<
FIELD	6766:63	6766:63	18	k
LEAF_NODE	6766:63	6766:63	19	k
LEAF_NODE	6766:64	6766:64	18	)
LEAF_NODE	6766:65	6766:65	18	)
LEAF_NODE	6766:67	6766:67	17	?
EXPR	6766:69	6766:69	17	1
FIELD	6766:69	6766:69	18	1
LEAF_NODE	6766:69	6766:69	19	1
LEAF_NODE	6766:71	6766:71	17	:
FIELD	6766:73	6766:73	17	0
LEAF_NODE	6766:73	6766:73	18	0
LEAF_NODE	6766:74	6766:74	13	;
LEAF_NODE	6767:8	6767:8	12	sprintf
LEAF_NODE	6767:15	6767:15	12	(
LEAF_NODE	6767:16	6767:16	12	&
LEAF_NODE	6767:17	6767:17	12	bitarray
LEAF_NODE	6767:25	6767:25	12	[
LEAF_NODE	6767:26	6767:26	12	j
LEAF_NODE	6767:27	6767:27	12	]
LEAF_NODE	6767:28	6767:28	12	,
LEAF_NODE	6767:30	6767:30	12	(
LEAF_NODE	6767:31	6767:31	12	bitset
LEAF_NODE	6767:37	6767:37	12	)
LEAF_NODE	6767:39	6767:39	12	?
LEAF_NODE	6767:41	6767:41	12	"1"
LEAF_NODE	6767:45	6767:45	12	:
LEAF_NODE	6767:47	6767:47	12	"0"
LEAF_NODE	6767:50	6767:50	12	)
LEAF_NODE	6767:51	6767:51	12	;
LEAF_NODE	6768:8	6768:8	11	}
EXPR_STATEMENT	6769:6	6769:32	9	sprintf ( & bitarray [ 8 ] , " " ) ;
EXPR	6769:6	6769:6	10	sprintf ( & bitarray [ 8 ] , " " )
FUNCTION_CALL	6769:6	6769:31	11	sprintf ( & bitarray [ 8 ] , " " )
CALLEE	6769:6	6769:6	12	sprintf
LEAF_NODE	6769:6	6769:6	13	sprintf
LEAF_NODE	6769:13	6769:13	12	(
ARGUMENT	6769:14	6769:14	12	& bitarray [ 8 ]
UNARY_EXPR	6769:14	6769:15	13	& bitarray [ 8 ]
UNARY_OPERATOR	6769:14	6769:14	14	&
LEAF_NODE	6769:14	6769:14	15	&
FIELD	6769:15	6769:25	14	bitarray [ 8 ]
LEAF_NODE	6769:15	6769:15	15	bitarray
LEAF_NODE	6769:23	6769:23	15	[
EXPR	6769:24	6769:24	15	8
FIELD	6769:24	6769:24	16	8
LEAF_NODE	6769:24	6769:24	17	8
LEAF_NODE	6769:25	6769:25	15	]
LEAF_NODE	6769:26	6769:26	12	,
ARGUMENT	6769:28	6769:28	12	" "
FIELD	6769:28	6769:28	13	" "
LEAF_NODE	6769:28	6769:28	14	" "
LEAF_NODE	6769:31	6769:31	12	)
LEAF_NODE	6769:32	6769:32	10	;
EXPR_STATEMENT	6770:6	6770:32	9	sprintf ( & bitarray [ 9 ] , " " ) ;
EXPR	6770:6	6770:6	10	sprintf ( & bitarray [ 9 ] , " " )
FUNCTION_CALL	6770:6	6770:31	11	sprintf ( & bitarray [ 9 ] , " " )
CALLEE	6770:6	6770:6	12	sprintf
LEAF_NODE	6770:6	6770:6	13	sprintf
LEAF_NODE	6770:13	6770:13	12	(
ARGUMENT	6770:14	6770:14	12	& bitarray [ 9 ]
UNARY_EXPR	6770:14	6770:15	13	& bitarray [ 9 ]
UNARY_OPERATOR	6770:14	6770:14	14	&
LEAF_NODE	6770:14	6770:14	15	&
FIELD	6770:15	6770:25	14	bitarray [ 9 ]
LEAF_NODE	6770:15	6770:15	15	bitarray
LEAF_NODE	6770:23	6770:23	15	[
EXPR	6770:24	6770:24	15	9
FIELD	6770:24	6770:24	16	9
LEAF_NODE	6770:24	6770:24	17	9
LEAF_NODE	6770:25	6770:25	15	]
LEAF_NODE	6770:26	6770:26	12	,
ARGUMENT	6770:28	6770:28	12	" "
FIELD	6770:28	6770:28	13	" "
LEAF_NODE	6770:28	6770:28	14	" "
LEAF_NODE	6770:31	6770:31	12	)
LEAF_NODE	6770:32	6770:32	10	;
ITERATION	6771:6	6772:8	9	
KEYWORD	6771:6	6771:6	10	for
LEAF_NODE	6771:6	6771:6	11	for
LEAF_NODE	6771:10	6771:10	10	(
FOR_INIT	6771:11	6771:24	10	j = 10 , k = 7 ;
EXPR	6771:11	6771:19	11	j = 10 , k = 7
ASSIGN	6771:11	6771:15	12	j = 10
LVAL	6771:11	6771:11	13	j
FIELD	6771:11	6771:11	14	j
LEAF_NODE	6771:11	6771:11	15	j
ASSIGN_OP	6771:13	6771:13	13	=
LEAF_NODE	6771:13	6771:13	14	=
RVAL	6771:15	6771:15	13	10
FIELD	6771:15	6771:15	14	10
LEAF_NODE	6771:15	6771:15	15	10
LEAF_NODE	6771:17	6771:17	12	,
ASSIGN	6771:19	6771:23	12	k = 7
LVAL	6771:19	6771:19	13	k
FIELD	6771:19	6771:19	14	k
LEAF_NODE	6771:19	6771:19	15	k
ASSIGN_OP	6771:21	6771:21	13	=
LEAF_NODE	6771:21	6771:21	14	=
RVAL	6771:23	6771:23	13	7
FIELD	6771:23	6771:23	14	7
LEAF_NODE	6771:23	6771:23	15	7
LEAF_NODE	6771:24	6771:24	11	;
CONDITION	6771:26	6771:26	10	j < 18
EXPR	6771:26	6771:30	11	j < 18
FIELD	6771:26	6771:26	12	j
LEAF_NODE	6771:26	6771:26	13	j
REL_OPERATOR	6771:28	6771:28	12	<
LEAF_NODE	6771:28	6771:28	13	<
FIELD	6771:30	6771:30	12	18
LEAF_NODE	6771:30	6771:30	13	18
LEAF_NODE	6771:32	6771:32	10	;
FOR_EXPR	6771:34	6771:34	10	j ++ , k --
EXPR	6771:34	6771:39	11	j ++ , k --
FIELD	6771:34	6771:35	12	j ++
LEAF_NODE	6771:34	6771:34	13	j
LEAF_NODE	6771:35	6771:35	13	++
LEAF_NODE	6771:37	6771:37	12	,
FIELD	6771:39	6771:40	12	k --
LEAF_NODE	6771:39	6771:39	13	k
LEAF_NODE	6771:40	6771:40	13	--
LEAF_NODE	6771:42	6771:42	10	)
STATEMENTS	6772:8	6775:8	10	
LEAF_NODE	6772:8	6772:8	11	{
STATEMENTS	6773:8	6774:51	11	
EXPR_STATEMENT	6773:8	6773:74	12	bitset = * ( src_buff + offset2 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	6773:8	6773:8	13	bitset = * ( src_buff + offset2 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	6773:8	6773:17	14	bitset = * ( src_buff + offset2 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	6773:8	6773:8	15	bitset
FIELD	6773:8	6773:8	16	bitset
LEAF_NODE	6773:8	6773:8	17	bitset
ASSIGN_OP	6773:15	6773:15	15	=
LEAF_NODE	6773:15	6773:15	16	=
RVAL	6773:17	6773:17	15	* ( src_buff + offset2 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	6773:17	6773:73	16	* ( src_buff + offset2 ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	6773:17	6773:65	17	* ( src_buff + offset2 ) & ( ( ( unsigned char ) 1 << k ) )
UNARY_EXPR	6773:17	6773:37	18	* ( src_buff + offset2 )
UNARY_OPERATOR	6773:17	6773:17	19	*
LEAF_NODE	6773:17	6773:17	20	*
LEAF_NODE	6773:18	6773:18	19	(
FIELD	6773:19	6773:19	19	src_buff
LEAF_NODE	6773:19	6773:19	20	src_buff
LEAF_NODE	6773:28	6773:28	19	+
FIELD	6773:30	6773:30	19	offset2
LEAF_NODE	6773:30	6773:30	20	offset2
LEAF_NODE	6773:37	6773:37	19	)
LEAF_NODE	6773:39	6773:39	18	&
LEAF_NODE	6773:41	6773:41	18	(
LEAF_NODE	6773:42	6773:42	18	(
LEAF_NODE	6773:43	6773:43	18	(
TYPE_NAME	6773:44	6773:53	18	unsigned char
LEAF_NODE	6773:44	6773:44	19	unsigned
LEAF_NODE	6773:53	6773:53	19	char
LEAF_NODE	6773:57	6773:57	18	)
FIELD	6773:58	6773:58	18	1
LEAF_NODE	6773:58	6773:58	19	1
LEAF_NODE	6773:60	6773:60	18	<<
FIELD	6773:63	6773:63	18	k
LEAF_NODE	6773:63	6773:63	19	k
LEAF_NODE	6773:64	6773:64	18	)
LEAF_NODE	6773:65	6773:65	18	)
LEAF_NODE	6773:67	6773:67	17	?
EXPR	6773:69	6773:69	17	1
FIELD	6773:69	6773:69	18	1
LEAF_NODE	6773:69	6773:69	19	1
LEAF_NODE	6773:71	6773:71	17	:
FIELD	6773:73	6773:73	17	0
LEAF_NODE	6773:73	6773:73	18	0
LEAF_NODE	6773:74	6773:74	13	;
LEAF_NODE	6774:8	6774:8	12	sprintf
LEAF_NODE	6774:15	6774:15	12	(
LEAF_NODE	6774:16	6774:16	12	&
LEAF_NODE	6774:17	6774:17	12	bitarray
LEAF_NODE	6774:25	6774:25	12	[
LEAF_NODE	6774:26	6774:26	12	j
LEAF_NODE	6774:27	6774:27	12	]
LEAF_NODE	6774:28	6774:28	12	,
LEAF_NODE	6774:30	6774:30	12	(
LEAF_NODE	6774:31	6774:31	12	bitset
LEAF_NODE	6774:37	6774:37	12	)
LEAF_NODE	6774:39	6774:39	12	?
LEAF_NODE	6774:41	6774:41	12	"1"
LEAF_NODE	6774:45	6774:45	12	:
LEAF_NODE	6774:47	6774:47	12	"0"
LEAF_NODE	6774:50	6774:50	12	)
LEAF_NODE	6774:51	6774:51	12	;
LEAF_NODE	6775:8	6775:8	11	}
EXPR_STATEMENT	6776:6	6776:25	9	bitarray [ 18 ] = '\0' ;
EXPR	6776:6	6776:6	10	bitarray [ 18 ] = '\0'
ASSIGN	6776:6	6776:21	11	bitarray [ 18 ] = '\0'
LVAL	6776:6	6776:6	12	bitarray [ 18 ]
FIELD	6776:6	6776:17	13	bitarray [ 18 ]
LEAF_NODE	6776:6	6776:6	14	bitarray
LEAF_NODE	6776:14	6776:14	14	[
EXPR	6776:15	6776:15	14	18
FIELD	6776:15	6776:15	15	18
LEAF_NODE	6776:15	6776:15	16	18
LEAF_NODE	6776:17	6776:17	14	]
ASSIGN_OP	6776:19	6776:19	12	=
LEAF_NODE	6776:19	6776:19	13	=
RVAL	6776:21	6776:21	12	'\0'
FIELD	6776:21	6776:21	13	'\0'
LEAF_NODE	6776:21	6776:21	14	'\0'
LEAF_NODE	6776:25	6776:25	10	;
EXPR_STATEMENT	6777:6	6778:55	9	TIFFError ( "" , "Row: %3d Offset1: %d,  Shift1: %d,    Offset2: %d,  Shift2:  %d\n" , row , offset1 , shift1 , offset2 , shift2 ) ;
EXPR	6777:6	6777:6	10	TIFFError ( "" , "Row: %3d Offset1: %d,  Shift1: %d,    Offset2: %d,  Shift2:  %d\n" , row , offset1 , shift1 , offset2 , shift2 )
FUNCTION_CALL	6777:6	6778:54	11	TIFFError ( "" , "Row: %3d Offset1: %d,  Shift1: %d,    Offset2: %d,  Shift2:  %d\n" , row , offset1 , shift1 , offset2 , shift2 )
CALLEE	6777:6	6777:6	12	TIFFError
LEAF_NODE	6777:6	6777:6	13	TIFFError
LEAF_NODE	6777:16	6777:16	12	(
ARGUMENT	6777:17	6777:17	12	""
FIELD	6777:17	6777:17	13	""
LEAF_NODE	6777:17	6777:17	14	""
LEAF_NODE	6777:19	6777:19	12	,
ARGUMENT	6777:21	6777:21	12	"Row: %3d Offset1: %d,  Shift1: %d,    Offset2: %d,  Shift2:  %d\n"
FIELD	6777:21	6777:21	13	"Row: %3d Offset1: %d,  Shift1: %d,    Offset2: %d,  Shift2:  %d\n"
LEAF_NODE	6777:21	6777:21	14	"Row: %3d Offset1: %d,  Shift1: %d,    Offset2: %d,  Shift2:  %d\n"
LEAF_NODE	6777:88	6777:88	12	,
ARGUMENT	6778:17	6778:17	12	row
FIELD	6778:17	6778:17	13	row
LEAF_NODE	6778:17	6778:17	14	row
LEAF_NODE	6778:20	6778:20	12	,
ARGUMENT	6778:22	6778:22	12	offset1
FIELD	6778:22	6778:22	13	offset1
LEAF_NODE	6778:22	6778:22	14	offset1
LEAF_NODE	6778:29	6778:29	12	,
ARGUMENT	6778:31	6778:31	12	shift1
FIELD	6778:31	6778:31	13	shift1
LEAF_NODE	6778:31	6778:31	14	shift1
LEAF_NODE	6778:37	6778:37	12	,
ARGUMENT	6778:39	6778:39	12	offset2
FIELD	6778:39	6778:39	13	offset2
LEAF_NODE	6778:39	6778:39	14	offset2
LEAF_NODE	6778:46	6778:46	12	,
ARGUMENT	6778:48	6778:48	12	shift2
FIELD	6778:48	6778:48	13	shift2
LEAF_NODE	6778:48	6778:48	14	shift2
LEAF_NODE	6778:54	6778:54	12	)
LEAF_NODE	6778:55	6778:55	10	;
EXPR_STATEMENT	6781:6	6781:31	9	bytebuff1 = bytebuff2 = 0 ;
EXPR	6781:6	6781:6	10	bytebuff1 = bytebuff2 = 0
ASSIGN	6781:6	6781:18	11	bytebuff1 = bytebuff2 = 0
LVAL	6781:6	6781:6	12	bytebuff1
FIELD	6781:6	6781:6	13	bytebuff1
LEAF_NODE	6781:6	6781:6	14	bytebuff1
ASSIGN_OP	6781:16	6781:16	12	=
LEAF_NODE	6781:16	6781:16	13	=
RVAL	6781:18	6781:18	12	bytebuff2 = 0
ASSIGN	6781:18	6781:30	13	bytebuff2 = 0
LVAL	6781:18	6781:18	14	bytebuff2
FIELD	6781:18	6781:18	15	bytebuff2
LEAF_NODE	6781:18	6781:18	16	bytebuff2
ASSIGN_OP	6781:28	6781:28	14	=
LEAF_NODE	6781:28	6781:28	15	=
RVAL	6781:30	6781:30	14	0
FIELD	6781:30	6781:30	15	0
LEAF_NODE	6781:30	6781:30	16	0
LEAF_NODE	6781:31	6781:31	10	;
SELECTION	6782:6	6783:8	9	
KEYWORD	6782:6	6782:6	10	if
LEAF_NODE	6782:6	6782:6	11	if
LEAF_NODE	6782:9	6782:9	10	(
CONDITION	6782:10	6782:10	10	shift1 == 0
EXPR	6782:10	6782:20	11	shift1 == 0
FIELD	6782:10	6782:10	12	shift1
LEAF_NODE	6782:10	6782:10	13	shift1
EQ_OPERATOR	6782:17	6782:17	12	==
LEAF_NODE	6782:17	6782:17	13	==
FIELD	6782:20	6782:20	12	0
LEAF_NODE	6782:20	6782:20	13	0
LEAF_NODE	6782:21	6782:21	10	)
STATEMENTS	6783:8	6817:8	10	
LEAF_NODE	6783:8	6783:8	11	{
STATEMENTS	6784:1	6800:8	11	
EXPR_STATEMENT	6784:1	6784:69	12	_TIFFmemcpy ( sect_buff + dst_offset , src_buff + offset1 , full_bytes ) ;
EXPR	6784:1	6784:1	13	_TIFFmemcpy ( sect_buff + dst_offset , src_buff + offset1 , full_bytes )
FUNCTION_CALL	6784:1	6784:68	14	_TIFFmemcpy ( sect_buff + dst_offset , src_buff + offset1 , full_bytes )
CALLEE	6784:1	6784:1	15	_TIFFmemcpy
LEAF_NODE	6784:1	6784:1	16	_TIFFmemcpy
LEAF_NODE	6784:13	6784:13	15	(
ARGUMENT	6784:14	6784:26	15	sect_buff + dst_offset
FIELD	6784:14	6784:14	16	sect_buff
LEAF_NODE	6784:14	6784:14	17	sect_buff
LEAF_NODE	6784:24	6784:24	16	+
FIELD	6784:26	6784:26	16	dst_offset
LEAF_NODE	6784:26	6784:26	17	dst_offset
LEAF_NODE	6784:36	6784:36	15	,
ARGUMENT	6784:38	6784:49	15	src_buff + offset1
FIELD	6784:38	6784:38	16	src_buff
LEAF_NODE	6784:38	6784:38	17	src_buff
LEAF_NODE	6784:47	6784:47	16	+
FIELD	6784:49	6784:49	16	offset1
LEAF_NODE	6784:49	6784:49	17	offset1
LEAF_NODE	6784:56	6784:56	15	,
ARGUMENT	6784:58	6784:58	15	full_bytes
FIELD	6784:58	6784:58	16	full_bytes
LEAF_NODE	6784:58	6784:58	17	full_bytes
LEAF_NODE	6784:68	6784:68	15	)
LEAF_NODE	6784:69	6784:69	13	;
EXPR_STATEMENT	6787:1	6787:96	12	TIFFError ( "" , "        Aligned data src offset1: %8d, Dst offset: %8d\n" , offset1 , dst_offset ) ;
EXPR	6787:1	6787:1	13	TIFFError ( "" , "        Aligned data src offset1: %8d, Dst offset: %8d\n" , offset1 , dst_offset )
FUNCTION_CALL	6787:1	6787:95	14	TIFFError ( "" , "        Aligned data src offset1: %8d, Dst offset: %8d\n" , offset1 , dst_offset )
CALLEE	6787:1	6787:1	15	TIFFError
LEAF_NODE	6787:1	6787:1	16	TIFFError
LEAF_NODE	6787:11	6787:11	15	(
ARGUMENT	6787:12	6787:12	15	""
FIELD	6787:12	6787:12	16	""
LEAF_NODE	6787:12	6787:12	17	""
LEAF_NODE	6787:14	6787:14	15	,
ARGUMENT	6787:16	6787:16	15	"        Aligned data src offset1: %8d, Dst offset: %8d\n"
FIELD	6787:16	6787:16	16	"        Aligned data src offset1: %8d, Dst offset: %8d\n"
LEAF_NODE	6787:16	6787:16	17	"        Aligned data src offset1: %8d, Dst offset: %8d\n"
LEAF_NODE	6787:74	6787:74	15	,
ARGUMENT	6787:76	6787:76	15	offset1
FIELD	6787:76	6787:76	16	offset1
LEAF_NODE	6787:76	6787:76	17	offset1
LEAF_NODE	6787:83	6787:83	15	,
ARGUMENT	6787:85	6787:85	15	dst_offset
FIELD	6787:85	6787:85	16	dst_offset
LEAF_NODE	6787:85	6787:85	17	dst_offset
LEAF_NODE	6787:95	6787:95	15	)
LEAF_NODE	6787:96	6787:96	13	;
EXPR_STATEMENT	6788:1	6788:29	12	sprintf ( & bitarray [ 18 ] , "\n" ) ;
EXPR	6788:1	6788:1	13	sprintf ( & bitarray [ 18 ] , "\n" )
FUNCTION_CALL	6788:1	6788:28	14	sprintf ( & bitarray [ 18 ] , "\n" )
CALLEE	6788:1	6788:1	15	sprintf
LEAF_NODE	6788:1	6788:1	16	sprintf
LEAF_NODE	6788:8	6788:8	15	(
ARGUMENT	6788:9	6788:9	15	& bitarray [ 18 ]
UNARY_EXPR	6788:9	6788:10	16	& bitarray [ 18 ]
UNARY_OPERATOR	6788:9	6788:9	17	&
LEAF_NODE	6788:9	6788:9	18	&
FIELD	6788:10	6788:21	17	bitarray [ 18 ]
LEAF_NODE	6788:10	6788:10	18	bitarray
LEAF_NODE	6788:18	6788:18	18	[
EXPR	6788:19	6788:19	18	18
FIELD	6788:19	6788:19	19	18
LEAF_NODE	6788:19	6788:19	20	18
LEAF_NODE	6788:21	6788:21	18	]
LEAF_NODE	6788:22	6788:22	15	,
ARGUMENT	6788:24	6788:24	15	"\n"
FIELD	6788:24	6788:24	16	"\n"
LEAF_NODE	6788:24	6788:24	17	"\n"
LEAF_NODE	6788:28	6788:28	15	)
LEAF_NODE	6788:29	6788:29	13	;
EXPR_STATEMENT	6789:1	6789:29	12	sprintf ( & bitarray [ 19 ] , "\t" ) ;
EXPR	6789:1	6789:1	13	sprintf ( & bitarray [ 19 ] , "\t" )
FUNCTION_CALL	6789:1	6789:28	14	sprintf ( & bitarray [ 19 ] , "\t" )
CALLEE	6789:1	6789:1	15	sprintf
LEAF_NODE	6789:1	6789:1	16	sprintf
LEAF_NODE	6789:8	6789:8	15	(
ARGUMENT	6789:9	6789:9	15	& bitarray [ 19 ]
UNARY_EXPR	6789:9	6789:10	16	& bitarray [ 19 ]
UNARY_OPERATOR	6789:9	6789:9	17	&
LEAF_NODE	6789:9	6789:9	18	&
FIELD	6789:10	6789:21	17	bitarray [ 19 ]
LEAF_NODE	6789:10	6789:10	18	bitarray
LEAF_NODE	6789:18	6789:18	18	[
EXPR	6789:19	6789:19	18	19
FIELD	6789:19	6789:19	19	19
LEAF_NODE	6789:19	6789:19	20	19
LEAF_NODE	6789:21	6789:21	18	]
LEAF_NODE	6789:22	6789:22	15	,
ARGUMENT	6789:24	6789:24	15	"\t"
FIELD	6789:24	6789:24	16	"\t"
LEAF_NODE	6789:24	6789:24	17	"\t"
LEAF_NODE	6789:28	6789:28	15	)
LEAF_NODE	6789:29	6789:29	13	;
ITERATION	6790:8	6791:10	12	
KEYWORD	6790:8	6790:8	13	for
LEAF_NODE	6790:8	6790:8	14	for
LEAF_NODE	6790:12	6790:12	13	(
FOR_INIT	6790:13	6790:26	13	j = 20 , k = 7 ;
EXPR	6790:13	6790:21	14	j = 20 , k = 7
ASSIGN	6790:13	6790:17	15	j = 20
LVAL	6790:13	6790:13	16	j
FIELD	6790:13	6790:13	17	j
LEAF_NODE	6790:13	6790:13	18	j
ASSIGN_OP	6790:15	6790:15	16	=
LEAF_NODE	6790:15	6790:15	17	=
RVAL	6790:17	6790:17	16	20
FIELD	6790:17	6790:17	17	20
LEAF_NODE	6790:17	6790:17	18	20
LEAF_NODE	6790:19	6790:19	15	,
ASSIGN	6790:21	6790:25	15	k = 7
LVAL	6790:21	6790:21	16	k
FIELD	6790:21	6790:21	17	k
LEAF_NODE	6790:21	6790:21	18	k
ASSIGN_OP	6790:23	6790:23	16	=
LEAF_NODE	6790:23	6790:23	17	=
RVAL	6790:25	6790:25	16	7
FIELD	6790:25	6790:25	17	7
LEAF_NODE	6790:25	6790:25	18	7
LEAF_NODE	6790:26	6790:26	14	;
CONDITION	6790:28	6790:28	13	j < 28
EXPR	6790:28	6790:32	14	j < 28
FIELD	6790:28	6790:28	15	j
LEAF_NODE	6790:28	6790:28	16	j
REL_OPERATOR	6790:30	6790:30	15	<
LEAF_NODE	6790:30	6790:30	16	<
FIELD	6790:32	6790:32	15	28
LEAF_NODE	6790:32	6790:32	16	28
LEAF_NODE	6790:34	6790:34	13	;
FOR_EXPR	6790:36	6790:36	13	j ++ , k --
EXPR	6790:36	6790:41	14	j ++ , k --
FIELD	6790:36	6790:37	15	j ++
LEAF_NODE	6790:36	6790:36	16	j
LEAF_NODE	6790:37	6790:37	16	++
LEAF_NODE	6790:39	6790:39	15	,
FIELD	6790:41	6790:42	15	k --
LEAF_NODE	6790:41	6790:41	16	k
LEAF_NODE	6790:42	6790:42	16	--
LEAF_NODE	6790:44	6790:44	13	)
STATEMENTS	6791:10	6794:10	13	
LEAF_NODE	6791:10	6791:10	14	{
STATEMENTS	6792:10	6793:53	14	
EXPR_STATEMENT	6792:10	6792:80	15	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	6792:10	6792:10	16	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	6792:10	6792:19	17	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	6792:10	6792:10	18	bitset
FIELD	6792:10	6792:10	19	bitset
LEAF_NODE	6792:10	6792:10	20	bitset
ASSIGN_OP	6792:17	6792:17	18	=
LEAF_NODE	6792:17	6792:17	19	=
RVAL	6792:19	6792:19	18	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	6792:19	6792:79	19	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	6792:19	6792:71	20	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) )
UNARY_EXPR	6792:19	6792:43	21	* ( sect_buff + dst_offset )
UNARY_OPERATOR	6792:19	6792:19	22	*
LEAF_NODE	6792:19	6792:19	23	*
LEAF_NODE	6792:20	6792:20	22	(
FIELD	6792:21	6792:21	22	sect_buff
LEAF_NODE	6792:21	6792:21	23	sect_buff
LEAF_NODE	6792:31	6792:31	22	+
FIELD	6792:33	6792:33	22	dst_offset
LEAF_NODE	6792:33	6792:33	23	dst_offset
LEAF_NODE	6792:43	6792:43	22	)
LEAF_NODE	6792:45	6792:45	21	&
LEAF_NODE	6792:47	6792:47	21	(
LEAF_NODE	6792:48	6792:48	21	(
LEAF_NODE	6792:49	6792:49	21	(
TYPE_NAME	6792:50	6792:59	21	unsigned char
LEAF_NODE	6792:50	6792:50	22	unsigned
LEAF_NODE	6792:59	6792:59	22	char
LEAF_NODE	6792:63	6792:63	21	)
FIELD	6792:64	6792:64	21	1
LEAF_NODE	6792:64	6792:64	22	1
LEAF_NODE	6792:66	6792:66	21	<<
FIELD	6792:69	6792:69	21	k
LEAF_NODE	6792:69	6792:69	22	k
LEAF_NODE	6792:70	6792:70	21	)
LEAF_NODE	6792:71	6792:71	21	)
LEAF_NODE	6792:73	6792:73	20	?
EXPR	6792:75	6792:75	20	1
FIELD	6792:75	6792:75	21	1
LEAF_NODE	6792:75	6792:75	22	1
LEAF_NODE	6792:77	6792:77	20	:
FIELD	6792:79	6792:79	20	0
LEAF_NODE	6792:79	6792:79	21	0
LEAF_NODE	6792:80	6792:80	16	;
LEAF_NODE	6793:10	6793:10	15	sprintf
LEAF_NODE	6793:17	6793:17	15	(
LEAF_NODE	6793:18	6793:18	15	&
LEAF_NODE	6793:19	6793:19	15	bitarray
LEAF_NODE	6793:27	6793:27	15	[
LEAF_NODE	6793:28	6793:28	15	j
LEAF_NODE	6793:29	6793:29	15	]
LEAF_NODE	6793:30	6793:30	15	,
LEAF_NODE	6793:32	6793:32	15	(
LEAF_NODE	6793:33	6793:33	15	bitset
LEAF_NODE	6793:39	6793:39	15	)
LEAF_NODE	6793:41	6793:41	15	?
LEAF_NODE	6793:43	6793:43	15	"1"
LEAF_NODE	6793:47	6793:47	15	:
LEAF_NODE	6793:49	6793:49	15	"0"
LEAF_NODE	6793:52	6793:52	15	)
LEAF_NODE	6793:53	6793:53	15	;
LEAF_NODE	6794:10	6794:10	14	}
EXPR_STATEMENT	6795:8	6795:26	12	bitarray [ 28 ] = ' ' ;
EXPR	6795:8	6795:8	13	bitarray [ 28 ] = ' '
ASSIGN	6795:8	6795:23	14	bitarray [ 28 ] = ' '
LVAL	6795:8	6795:8	15	bitarray [ 28 ]
FIELD	6795:8	6795:19	16	bitarray [ 28 ]
LEAF_NODE	6795:8	6795:8	17	bitarray
LEAF_NODE	6795:16	6795:16	17	[
EXPR	6795:17	6795:17	17	28
FIELD	6795:17	6795:17	18	28
LEAF_NODE	6795:17	6795:17	19	28
LEAF_NODE	6795:19	6795:19	17	]
ASSIGN_OP	6795:21	6795:21	15	=
LEAF_NODE	6795:21	6795:21	16	=
RVAL	6795:23	6795:23	15	' '
FIELD	6795:23	6795:23	16	' '
LEAF_NODE	6795:23	6795:23	17	' '
LEAF_NODE	6795:26	6795:26	13	;
EXPR_STATEMENT	6796:8	6796:26	12	bitarray [ 29 ] = ' ' ;
EXPR	6796:8	6796:8	13	bitarray [ 29 ] = ' '
ASSIGN	6796:8	6796:23	14	bitarray [ 29 ] = ' '
LVAL	6796:8	6796:8	15	bitarray [ 29 ]
FIELD	6796:8	6796:19	16	bitarray [ 29 ]
LEAF_NODE	6796:8	6796:8	17	bitarray
LEAF_NODE	6796:16	6796:16	17	[
EXPR	6796:17	6796:17	17	29
FIELD	6796:17	6796:17	18	29
LEAF_NODE	6796:17	6796:17	19	29
LEAF_NODE	6796:19	6796:19	17	]
ASSIGN_OP	6796:21	6796:21	15	=
LEAF_NODE	6796:21	6796:21	16	=
RVAL	6796:23	6796:23	15	' '
FIELD	6796:23	6796:23	16	' '
LEAF_NODE	6796:23	6796:23	17	' '
LEAF_NODE	6796:26	6796:26	13	;
EXPR_STATEMENT	6798:8	6798:32	12	dst_offset += full_bytes ;
EXPR	6798:8	6798:8	13	dst_offset += full_bytes
ASSIGN	6798:8	6798:22	14	dst_offset += full_bytes
LVAL	6798:8	6798:8	15	dst_offset
FIELD	6798:8	6798:8	16	dst_offset
LEAF_NODE	6798:8	6798:8	17	dst_offset
ASSIGN_OP	6798:19	6798:19	15	+=
LEAF_NODE	6798:19	6798:19	16	+=
RVAL	6798:22	6798:22	15	full_bytes
FIELD	6798:22	6798:22	16	full_bytes
LEAF_NODE	6798:22	6798:22	17	full_bytes
LEAF_NODE	6798:32	6798:32	13	;
SELECTION	6800:8	6801:10	12	
KEYWORD	6800:8	6800:8	13	if
LEAF_NODE	6800:8	6800:8	14	if
LEAF_NODE	6800:11	6800:11	13	(
CONDITION	6800:12	6800:12	13	trailing_bits != 0
EXPR	6800:12	6800:29	14	trailing_bits != 0
FIELD	6800:12	6800:12	15	trailing_bits
LEAF_NODE	6800:12	6800:12	16	trailing_bits
EQ_OPERATOR	6800:26	6800:26	15	!=
LEAF_NODE	6800:26	6800:26	16	!=
FIELD	6800:29	6800:29	15	0
LEAF_NODE	6800:29	6800:29	16	0
LEAF_NODE	6800:30	6800:30	13	)
STATEMENTS	6801:10	6816:10	13	
LEAF_NODE	6801:10	6801:10	14	{
STATEMENTS	6802:3	6815:10	14	
EXPR_STATEMENT	6802:3	6802:71	15	bytebuff2 = src_buff [ offset2 ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) ) ;
EXPR	6802:3	6802:3	16	bytebuff2 = src_buff [ offset2 ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) )
ASSIGN	6802:3	6802:15	17	bytebuff2 = src_buff [ offset2 ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) )
LVAL	6802:3	6802:3	18	bytebuff2
FIELD	6802:3	6802:3	19	bytebuff2
LEAF_NODE	6802:3	6802:3	20	bytebuff2
ASSIGN_OP	6802:13	6802:13	18	=
LEAF_NODE	6802:13	6802:13	19	=
RVAL	6802:15	6802:70	18	src_buff [ offset2 ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) )
FIELD	6802:15	6802:31	19	src_buff [ offset2 ]
LEAF_NODE	6802:15	6802:15	20	src_buff
LEAF_NODE	6802:23	6802:23	20	[
EXPR	6802:24	6802:24	20	offset2
FIELD	6802:24	6802:24	21	offset2
LEAF_NODE	6802:24	6802:24	22	offset2
LEAF_NODE	6802:31	6802:31	20	]
LEAF_NODE	6802:33	6802:33	19	&
LEAF_NODE	6802:35	6802:35	19	(
LEAF_NODE	6802:36	6802:36	19	(
TYPE_NAME	6802:37	6802:46	19	unsigned char
LEAF_NODE	6802:37	6802:37	20	unsigned
LEAF_NODE	6802:46	6802:46	20	char
LEAF_NODE	6802:50	6802:50	19	)
FIELD	6802:51	6802:51	19	255
LEAF_NODE	6802:51	6802:51	20	255
LEAF_NODE	6802:55	6802:55	19	<<
LEAF_NODE	6802:58	6802:58	19	(
FIELD	6802:59	6802:59	19	7
LEAF_NODE	6802:59	6802:59	20	7
LEAF_NODE	6802:61	6802:61	19	-
FIELD	6802:63	6802:63	19	shift2
LEAF_NODE	6802:63	6802:63	20	shift2
LEAF_NODE	6802:69	6802:69	19	)
LEAF_NODE	6802:70	6802:70	19	)
LEAF_NODE	6802:71	6802:71	16	;
EXPR_STATEMENT	6803:10	6803:43	15	sect_buff [ dst_offset ] = bytebuff2 ;
EXPR	6803:10	6803:10	16	sect_buff [ dst_offset ] = bytebuff2
ASSIGN	6803:10	6803:34	17	sect_buff [ dst_offset ] = bytebuff2
LVAL	6803:10	6803:10	18	sect_buff [ dst_offset ]
FIELD	6803:10	6803:30	19	sect_buff [ dst_offset ]
LEAF_NODE	6803:10	6803:10	20	sect_buff
LEAF_NODE	6803:19	6803:19	20	[
EXPR	6803:20	6803:20	20	dst_offset
FIELD	6803:20	6803:20	21	dst_offset
LEAF_NODE	6803:20	6803:20	22	dst_offset
LEAF_NODE	6803:30	6803:30	20	]
ASSIGN_OP	6803:32	6803:32	18	=
LEAF_NODE	6803:32	6803:32	19	=
RVAL	6803:34	6803:34	18	bytebuff2
FIELD	6803:34	6803:34	19	bytebuff2
LEAF_NODE	6803:34	6803:34	20	bytebuff2
LEAF_NODE	6803:43	6803:43	16	;
EXPR_STATEMENT	6805:3	6806:50	15	TIFFError ( "" , "        Trailing bits src offset:  %8d, Dst offset: %8d\n" , offset2 , dst_offset ) ;
EXPR	6805:3	6805:3	16	TIFFError ( "" , "        Trailing bits src offset:  %8d, Dst offset: %8d\n" , offset2 , dst_offset )
FUNCTION_CALL	6805:3	6806:49	17	TIFFError ( "" , "        Trailing bits src offset:  %8d, Dst offset: %8d\n" , offset2 , dst_offset )
CALLEE	6805:3	6805:3	18	TIFFError
LEAF_NODE	6805:3	6805:3	19	TIFFError
LEAF_NODE	6805:13	6805:13	18	(
ARGUMENT	6805:14	6805:14	18	""
FIELD	6805:14	6805:14	19	""
LEAF_NODE	6805:14	6805:14	20	""
LEAF_NODE	6805:16	6805:16	18	,
ARGUMENT	6805:18	6805:18	18	"        Trailing bits src offset:  %8d, Dst offset: %8d\n"
FIELD	6805:18	6805:18	19	"        Trailing bits src offset:  %8d, Dst offset: %8d\n"
LEAF_NODE	6805:18	6805:18	20	"        Trailing bits src offset:  %8d, Dst offset: %8d\n"
LEAF_NODE	6805:77	6805:77	18	,
ARGUMENT	6806:30	6806:30	18	offset2
FIELD	6806:30	6806:30	19	offset2
LEAF_NODE	6806:30	6806:30	20	offset2
LEAF_NODE	6806:37	6806:37	18	,
ARGUMENT	6806:39	6806:39	18	dst_offset
FIELD	6806:39	6806:39	19	dst_offset
LEAF_NODE	6806:39	6806:39	20	dst_offset
LEAF_NODE	6806:49	6806:49	18	)
LEAF_NODE	6806:50	6806:50	16	;
ITERATION	6807:10	6808:12	15	
KEYWORD	6807:10	6807:10	16	for
LEAF_NODE	6807:10	6807:10	17	for
LEAF_NODE	6807:14	6807:14	16	(
FOR_INIT	6807:15	6807:28	16	j = 30 , k = 7 ;
EXPR	6807:15	6807:23	17	j = 30 , k = 7
ASSIGN	6807:15	6807:19	18	j = 30
LVAL	6807:15	6807:15	19	j
FIELD	6807:15	6807:15	20	j
LEAF_NODE	6807:15	6807:15	21	j
ASSIGN_OP	6807:17	6807:17	19	=
LEAF_NODE	6807:17	6807:17	20	=
RVAL	6807:19	6807:19	19	30
FIELD	6807:19	6807:19	20	30
LEAF_NODE	6807:19	6807:19	21	30
LEAF_NODE	6807:21	6807:21	18	,
ASSIGN	6807:23	6807:27	18	k = 7
LVAL	6807:23	6807:23	19	k
FIELD	6807:23	6807:23	20	k
LEAF_NODE	6807:23	6807:23	21	k
ASSIGN_OP	6807:25	6807:25	19	=
LEAF_NODE	6807:25	6807:25	20	=
RVAL	6807:27	6807:27	19	7
FIELD	6807:27	6807:27	20	7
LEAF_NODE	6807:27	6807:27	21	7
LEAF_NODE	6807:28	6807:28	17	;
CONDITION	6807:30	6807:30	16	j < 38
EXPR	6807:30	6807:34	17	j < 38
FIELD	6807:30	6807:30	18	j
LEAF_NODE	6807:30	6807:30	19	j
REL_OPERATOR	6807:32	6807:32	18	<
LEAF_NODE	6807:32	6807:32	19	<
FIELD	6807:34	6807:34	18	38
LEAF_NODE	6807:34	6807:34	19	38
LEAF_NODE	6807:36	6807:36	16	;
FOR_EXPR	6807:38	6807:38	16	j ++ , k --
EXPR	6807:38	6807:43	17	j ++ , k --
FIELD	6807:38	6807:39	18	j ++
LEAF_NODE	6807:38	6807:38	19	j
LEAF_NODE	6807:39	6807:39	19	++
LEAF_NODE	6807:41	6807:41	18	,
FIELD	6807:43	6807:44	18	k --
LEAF_NODE	6807:43	6807:43	19	k
LEAF_NODE	6807:44	6807:44	19	--
LEAF_NODE	6807:46	6807:46	16	)
STATEMENTS	6808:12	6811:12	16	
LEAF_NODE	6808:12	6808:12	17	{
STATEMENTS	6809:12	6810:55	17	
EXPR_STATEMENT	6809:12	6809:82	18	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	6809:12	6809:12	19	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	6809:12	6809:21	20	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	6809:12	6809:12	21	bitset
FIELD	6809:12	6809:12	22	bitset
LEAF_NODE	6809:12	6809:12	23	bitset
ASSIGN_OP	6809:19	6809:19	21	=
LEAF_NODE	6809:19	6809:19	22	=
RVAL	6809:21	6809:21	21	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	6809:21	6809:81	22	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	6809:21	6809:73	23	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) )
UNARY_EXPR	6809:21	6809:45	24	* ( sect_buff + dst_offset )
UNARY_OPERATOR	6809:21	6809:21	25	*
LEAF_NODE	6809:21	6809:21	26	*
LEAF_NODE	6809:22	6809:22	25	(
FIELD	6809:23	6809:23	25	sect_buff
LEAF_NODE	6809:23	6809:23	26	sect_buff
LEAF_NODE	6809:33	6809:33	25	+
FIELD	6809:35	6809:35	25	dst_offset
LEAF_NODE	6809:35	6809:35	26	dst_offset
LEAF_NODE	6809:45	6809:45	25	)
LEAF_NODE	6809:47	6809:47	24	&
LEAF_NODE	6809:49	6809:49	24	(
LEAF_NODE	6809:50	6809:50	24	(
LEAF_NODE	6809:51	6809:51	24	(
TYPE_NAME	6809:52	6809:61	24	unsigned char
LEAF_NODE	6809:52	6809:52	25	unsigned
LEAF_NODE	6809:61	6809:61	25	char
LEAF_NODE	6809:65	6809:65	24	)
FIELD	6809:66	6809:66	24	1
LEAF_NODE	6809:66	6809:66	25	1
LEAF_NODE	6809:68	6809:68	24	<<
FIELD	6809:71	6809:71	24	k
LEAF_NODE	6809:71	6809:71	25	k
LEAF_NODE	6809:72	6809:72	24	)
LEAF_NODE	6809:73	6809:73	24	)
LEAF_NODE	6809:75	6809:75	23	?
EXPR	6809:77	6809:77	23	1
FIELD	6809:77	6809:77	24	1
LEAF_NODE	6809:77	6809:77	25	1
LEAF_NODE	6809:79	6809:79	23	:
FIELD	6809:81	6809:81	23	0
LEAF_NODE	6809:81	6809:81	24	0
LEAF_NODE	6809:82	6809:82	19	;
LEAF_NODE	6810:12	6810:12	18	sprintf
LEAF_NODE	6810:19	6810:19	18	(
LEAF_NODE	6810:20	6810:20	18	&
LEAF_NODE	6810:21	6810:21	18	bitarray
LEAF_NODE	6810:29	6810:29	18	[
LEAF_NODE	6810:30	6810:30	18	j
LEAF_NODE	6810:31	6810:31	18	]
LEAF_NODE	6810:32	6810:32	18	,
LEAF_NODE	6810:34	6810:34	18	(
LEAF_NODE	6810:35	6810:35	18	bitset
LEAF_NODE	6810:41	6810:41	18	)
LEAF_NODE	6810:43	6810:43	18	?
LEAF_NODE	6810:45	6810:45	18	"1"
LEAF_NODE	6810:49	6810:49	18	:
LEAF_NODE	6810:51	6810:51	18	"0"
LEAF_NODE	6810:54	6810:54	18	)
LEAF_NODE	6810:55	6810:55	18	;
LEAF_NODE	6811:12	6811:12	17	}
EXPR_STATEMENT	6812:10	6812:29	15	bitarray [ 38 ] = '\0' ;
EXPR	6812:10	6812:10	16	bitarray [ 38 ] = '\0'
ASSIGN	6812:10	6812:25	17	bitarray [ 38 ] = '\0'
LVAL	6812:10	6812:10	18	bitarray [ 38 ]
FIELD	6812:10	6812:21	19	bitarray [ 38 ]
LEAF_NODE	6812:10	6812:10	20	bitarray
LEAF_NODE	6812:18	6812:18	20	[
EXPR	6812:19	6812:19	20	38
FIELD	6812:19	6812:19	21	38
LEAF_NODE	6812:19	6812:19	22	38
LEAF_NODE	6812:21	6812:21	20	]
ASSIGN_OP	6812:23	6812:23	18	=
LEAF_NODE	6812:23	6812:23	19	=
RVAL	6812:25	6812:25	18	'\0'
FIELD	6812:25	6812:25	19	'\0'
LEAF_NODE	6812:25	6812:25	20	'\0'
LEAF_NODE	6812:29	6812:29	16	;
EXPR_STATEMENT	6813:10	6813:96	15	TIFFError ( "" , "\tFirst and last bytes before and after masking:\n\t%s\n\n" , bitarray ) ;
EXPR	6813:10	6813:10	16	TIFFError ( "" , "\tFirst and last bytes before and after masking:\n\t%s\n\n" , bitarray )
FUNCTION_CALL	6813:10	6813:95	17	TIFFError ( "" , "\tFirst and last bytes before and after masking:\n\t%s\n\n" , bitarray )
CALLEE	6813:10	6813:10	18	TIFFError
LEAF_NODE	6813:10	6813:10	19	TIFFError
LEAF_NODE	6813:20	6813:20	18	(
ARGUMENT	6813:21	6813:21	18	""
FIELD	6813:21	6813:21	19	""
LEAF_NODE	6813:21	6813:21	20	""
LEAF_NODE	6813:23	6813:23	18	,
ARGUMENT	6813:25	6813:25	18	"\tFirst and last bytes before and after masking:\n\t%s\n\n"
FIELD	6813:25	6813:25	19	"\tFirst and last bytes before and after masking:\n\t%s\n\n"
LEAF_NODE	6813:25	6813:25	20	"\tFirst and last bytes before and after masking:\n\t%s\n\n"
LEAF_NODE	6813:85	6813:85	18	,
ARGUMENT	6813:87	6813:87	18	bitarray
FIELD	6813:87	6813:87	19	bitarray
LEAF_NODE	6813:87	6813:87	20	bitarray
LEAF_NODE	6813:95	6813:95	18	)
LEAF_NODE	6813:96	6813:96	16	;
EXPR_STATEMENT	6815:10	6815:22	15	dst_offset ++ ;
EXPR	6815:10	6815:10	16	dst_offset ++
FIELD	6815:10	6815:20	17	dst_offset ++
LEAF_NODE	6815:10	6815:10	18	dst_offset
LEAF_NODE	6815:20	6815:20	18	++
LEAF_NODE	6815:22	6815:22	16	;
LEAF_NODE	6816:10	6816:10	14	}
LEAF_NODE	6817:8	6817:8	11	}
SELECTION	6818:6	6819:8	9	
KEYWORD	6818:6	6818:6	10	else
LEAF_NODE	6818:6	6818:6	11	else
STATEMENTS	6819:8	6884:8	10	
LEAF_NODE	6819:8	6819:8	11	{
STATEMENTS	6821:3	6883:8	11	
EXPR_STATEMENT	6821:3	6821:101	12	TIFFError ( "" , "        Unalligned data src offset: %8d, Dst offset: %8d\n" , offset1 , dst_offset ) ;
EXPR	6821:3	6821:3	13	TIFFError ( "" , "        Unalligned data src offset: %8d, Dst offset: %8d\n" , offset1 , dst_offset )
FUNCTION_CALL	6821:3	6821:100	14	TIFFError ( "" , "        Unalligned data src offset: %8d, Dst offset: %8d\n" , offset1 , dst_offset )
CALLEE	6821:3	6821:3	15	TIFFError
LEAF_NODE	6821:3	6821:3	16	TIFFError
LEAF_NODE	6821:13	6821:13	15	(
ARGUMENT	6821:14	6821:14	15	""
FIELD	6821:14	6821:14	16	""
LEAF_NODE	6821:14	6821:14	17	""
LEAF_NODE	6821:16	6821:16	15	,
ARGUMENT	6821:18	6821:18	15	"        Unalligned data src offset: %8d, Dst offset: %8d\n"
FIELD	6821:18	6821:18	16	"        Unalligned data src offset: %8d, Dst offset: %8d\n"
LEAF_NODE	6821:18	6821:18	17	"        Unalligned data src offset: %8d, Dst offset: %8d\n"
LEAF_NODE	6821:78	6821:78	15	,
ARGUMENT	6821:80	6821:80	15	offset1
FIELD	6821:80	6821:80	16	offset1
LEAF_NODE	6821:80	6821:80	17	offset1
LEAF_NODE	6821:88	6821:88	15	,
ARGUMENT	6821:90	6821:90	15	dst_offset
FIELD	6821:90	6821:90	16	dst_offset
LEAF_NODE	6821:90	6821:90	17	dst_offset
LEAF_NODE	6821:100	6821:100	15	)
LEAF_NODE	6821:101	6821:101	13	;
ITERATION	6823:8	6824:10	12	
KEYWORD	6823:8	6823:8	13	for
LEAF_NODE	6823:8	6823:8	14	for
LEAF_NODE	6823:12	6823:12	13	(
FOR_INIT	6823:13	6823:18	13	j = 0 ;
EXPR	6823:13	6823:13	14	j = 0
ASSIGN	6823:13	6823:17	15	j = 0
LVAL	6823:13	6823:13	16	j
FIELD	6823:13	6823:13	17	j
LEAF_NODE	6823:13	6823:13	18	j
ASSIGN_OP	6823:15	6823:15	16	=
LEAF_NODE	6823:15	6823:15	17	=
RVAL	6823:17	6823:17	16	0
FIELD	6823:17	6823:17	17	0
LEAF_NODE	6823:17	6823:17	18	0
LEAF_NODE	6823:18	6823:18	14	;
CONDITION	6823:20	6823:20	13	j <= full_bytes
EXPR	6823:20	6823:25	14	j <= full_bytes
FIELD	6823:20	6823:20	15	j
LEAF_NODE	6823:20	6823:20	16	j
REL_OPERATOR	6823:22	6823:22	15	<=
LEAF_NODE	6823:22	6823:22	16	<=
FIELD	6823:25	6823:25	15	full_bytes
LEAF_NODE	6823:25	6823:25	16	full_bytes
LEAF_NODE	6823:35	6823:35	13	;
FOR_EXPR	6823:37	6823:37	13	j ++
EXPR	6823:37	6823:37	14	j ++
FIELD	6823:37	6823:38	15	j ++
LEAF_NODE	6823:37	6823:37	16	j
LEAF_NODE	6823:38	6823:38	16	++
LEAF_NODE	6823:40	6823:40	13	)
STATEMENTS	6824:10	6828:10	13	
LEAF_NODE	6824:10	6824:10	14	{
STATEMENTS	6825:3	6827:10	14	
EXPR_STATEMENT	6825:3	6825:69	15	bytebuff1 = src_buff [ offset1 + j ] & ( ( unsigned char ) 255 >> shift1 ) ;
EXPR	6825:3	6825:3	16	bytebuff1 = src_buff [ offset1 + j ] & ( ( unsigned char ) 255 >> shift1 )
ASSIGN	6825:3	6825:15	17	bytebuff1 = src_buff [ offset1 + j ] & ( ( unsigned char ) 255 >> shift1 )
LVAL	6825:3	6825:3	18	bytebuff1
FIELD	6825:3	6825:3	19	bytebuff1
LEAF_NODE	6825:3	6825:3	20	bytebuff1
ASSIGN_OP	6825:13	6825:13	18	=
LEAF_NODE	6825:13	6825:13	19	=
RVAL	6825:15	6825:68	18	src_buff [ offset1 + j ] & ( ( unsigned char ) 255 >> shift1 )
FIELD	6825:15	6825:35	19	src_buff [ offset1 + j ]
LEAF_NODE	6825:15	6825:15	20	src_buff
LEAF_NODE	6825:23	6825:23	20	[
EXPR	6825:24	6825:34	20	offset1 + j
FIELD	6825:24	6825:24	21	offset1
LEAF_NODE	6825:24	6825:24	22	offset1
LEAF_NODE	6825:32	6825:32	21	+
FIELD	6825:34	6825:34	21	j
LEAF_NODE	6825:34	6825:34	22	j
LEAF_NODE	6825:35	6825:35	20	]
LEAF_NODE	6825:37	6825:37	19	&
LEAF_NODE	6825:39	6825:39	19	(
LEAF_NODE	6825:40	6825:40	19	(
TYPE_NAME	6825:41	6825:50	19	unsigned char
LEAF_NODE	6825:41	6825:41	20	unsigned
LEAF_NODE	6825:50	6825:50	20	char
LEAF_NODE	6825:54	6825:54	19	)
FIELD	6825:55	6825:55	19	255
LEAF_NODE	6825:55	6825:55	20	255
LEAF_NODE	6825:59	6825:59	19	>>
FIELD	6825:62	6825:62	19	shift1
LEAF_NODE	6825:62	6825:62	20	shift1
LEAF_NODE	6825:68	6825:68	19	)
LEAF_NODE	6825:69	6825:69	16	;
EXPR_STATEMENT	6826:3	6826:79	15	bytebuff2 = src_buff [ offset1 + j + 1 ] & ( ( unsigned char ) 255 << ( 7 - shift1 ) ) ;
EXPR	6826:3	6826:3	16	bytebuff2 = src_buff [ offset1 + j + 1 ] & ( ( unsigned char ) 255 << ( 7 - shift1 ) )
ASSIGN	6826:3	6826:15	17	bytebuff2 = src_buff [ offset1 + j + 1 ] & ( ( unsigned char ) 255 << ( 7 - shift1 ) )
LVAL	6826:3	6826:3	18	bytebuff2
FIELD	6826:3	6826:3	19	bytebuff2
LEAF_NODE	6826:3	6826:3	20	bytebuff2
ASSIGN_OP	6826:13	6826:13	18	=
LEAF_NODE	6826:13	6826:13	19	=
RVAL	6826:15	6826:78	18	src_buff [ offset1 + j + 1 ] & ( ( unsigned char ) 255 << ( 7 - shift1 ) )
FIELD	6826:15	6826:39	19	src_buff [ offset1 + j + 1 ]
LEAF_NODE	6826:15	6826:15	20	src_buff
LEAF_NODE	6826:23	6826:23	20	[
EXPR	6826:24	6826:38	20	offset1 + j + 1
FIELD	6826:24	6826:24	21	offset1
LEAF_NODE	6826:24	6826:24	22	offset1
LEAF_NODE	6826:32	6826:32	21	+
FIELD	6826:34	6826:34	21	j
LEAF_NODE	6826:34	6826:34	22	j
LEAF_NODE	6826:36	6826:36	21	+
FIELD	6826:38	6826:38	21	1
LEAF_NODE	6826:38	6826:38	22	1
LEAF_NODE	6826:39	6826:39	20	]
LEAF_NODE	6826:41	6826:41	19	&
LEAF_NODE	6826:43	6826:43	19	(
LEAF_NODE	6826:44	6826:44	19	(
TYPE_NAME	6826:45	6826:54	19	unsigned char
LEAF_NODE	6826:45	6826:45	20	unsigned
LEAF_NODE	6826:54	6826:54	20	char
LEAF_NODE	6826:58	6826:58	19	)
FIELD	6826:59	6826:59	19	255
LEAF_NODE	6826:59	6826:59	20	255
LEAF_NODE	6826:63	6826:63	19	<<
LEAF_NODE	6826:66	6826:66	19	(
FIELD	6826:67	6826:67	19	7
LEAF_NODE	6826:67	6826:67	20	7
LEAF_NODE	6826:69	6826:69	19	-
FIELD	6826:71	6826:71	19	shift1
LEAF_NODE	6826:71	6826:71	20	shift1
LEAF_NODE	6826:77	6826:77	19	)
LEAF_NODE	6826:78	6826:78	19	)
LEAF_NODE	6826:79	6826:79	16	;
EXPR_STATEMENT	6827:10	6827:89	15	sect_buff [ dst_offset + j ] = ( bytebuff1 << shift1 ) | ( bytebuff2 >> ( 8 - shift1 ) ) ;
EXPR	6827:10	6827:10	16	sect_buff [ dst_offset + j ] = ( bytebuff1 << shift1 ) | ( bytebuff2 >> ( 8 - shift1 ) )
ASSIGN	6827:10	6827:38	17	sect_buff [ dst_offset + j ] = ( bytebuff1 << shift1 ) | ( bytebuff2 >> ( 8 - shift1 ) )
LVAL	6827:10	6827:10	18	sect_buff [ dst_offset + j ]
FIELD	6827:10	6827:34	19	sect_buff [ dst_offset + j ]
LEAF_NODE	6827:10	6827:10	20	sect_buff
LEAF_NODE	6827:19	6827:19	20	[
EXPR	6827:20	6827:33	20	dst_offset + j
FIELD	6827:20	6827:20	21	dst_offset
LEAF_NODE	6827:20	6827:20	22	dst_offset
LEAF_NODE	6827:31	6827:31	21	+
FIELD	6827:33	6827:33	21	j
LEAF_NODE	6827:33	6827:33	22	j
LEAF_NODE	6827:34	6827:34	20	]
ASSIGN_OP	6827:36	6827:36	18	=
LEAF_NODE	6827:36	6827:36	19	=
RVAL	6827:38	6827:38	18	( bytebuff1 << shift1 ) | ( bytebuff2 >> ( 8 - shift1 ) )
BIT_OR	6827:38	6827:62	19	( bytebuff1 << shift1 ) | ( bytebuff2 >> ( 8 - shift1 ) )
BIT_OR_ELEM	6827:38	6827:58	20	( bytebuff1 << shift1 )
LEAF_NODE	6827:38	6827:38	21	(
FIELD	6827:39	6827:39	21	bytebuff1
LEAF_NODE	6827:39	6827:39	22	bytebuff1
LEAF_NODE	6827:49	6827:49	21	<<
FIELD	6827:52	6827:52	21	shift1
LEAF_NODE	6827:52	6827:52	22	shift1
LEAF_NODE	6827:58	6827:58	21	)
LEAF_NODE	6827:60	6827:60	20	|
BIT_OR_ELEM	6827:62	6827:88	20	( bytebuff2 >> ( 8 - shift1 ) )
LEAF_NODE	6827:62	6827:62	21	(
FIELD	6827:63	6827:63	21	bytebuff2
LEAF_NODE	6827:63	6827:63	22	bytebuff2
LEAF_NODE	6827:73	6827:73	21	>>
LEAF_NODE	6827:76	6827:76	21	(
FIELD	6827:77	6827:77	21	8
LEAF_NODE	6827:77	6827:77	22	8
LEAF_NODE	6827:79	6827:79	21	-
FIELD	6827:81	6827:81	21	shift1
LEAF_NODE	6827:81	6827:81	22	shift1
LEAF_NODE	6827:87	6827:87	21	)
LEAF_NODE	6827:88	6827:88	21	)
LEAF_NODE	6827:89	6827:89	16	;
LEAF_NODE	6828:10	6828:10	14	}
EXPR_STATEMENT	6830:1	6830:29	12	sprintf ( & bitarray [ 18 ] , "\n" ) ;
EXPR	6830:1	6830:1	13	sprintf ( & bitarray [ 18 ] , "\n" )
FUNCTION_CALL	6830:1	6830:28	14	sprintf ( & bitarray [ 18 ] , "\n" )
CALLEE	6830:1	6830:1	15	sprintf
LEAF_NODE	6830:1	6830:1	16	sprintf
LEAF_NODE	6830:8	6830:8	15	(
ARGUMENT	6830:9	6830:9	15	& bitarray [ 18 ]
UNARY_EXPR	6830:9	6830:10	16	& bitarray [ 18 ]
UNARY_OPERATOR	6830:9	6830:9	17	&
LEAF_NODE	6830:9	6830:9	18	&
FIELD	6830:10	6830:21	17	bitarray [ 18 ]
LEAF_NODE	6830:10	6830:10	18	bitarray
LEAF_NODE	6830:18	6830:18	18	[
EXPR	6830:19	6830:19	18	18
FIELD	6830:19	6830:19	19	18
LEAF_NODE	6830:19	6830:19	20	18
LEAF_NODE	6830:21	6830:21	18	]
LEAF_NODE	6830:22	6830:22	15	,
ARGUMENT	6830:24	6830:24	15	"\n"
FIELD	6830:24	6830:24	16	"\n"
LEAF_NODE	6830:24	6830:24	17	"\n"
LEAF_NODE	6830:28	6830:28	15	)
LEAF_NODE	6830:29	6830:29	13	;
EXPR_STATEMENT	6831:1	6831:29	12	sprintf ( & bitarray [ 19 ] , "\t" ) ;
EXPR	6831:1	6831:1	13	sprintf ( & bitarray [ 19 ] , "\t" )
FUNCTION_CALL	6831:1	6831:28	14	sprintf ( & bitarray [ 19 ] , "\t" )
CALLEE	6831:1	6831:1	15	sprintf
LEAF_NODE	6831:1	6831:1	16	sprintf
LEAF_NODE	6831:8	6831:8	15	(
ARGUMENT	6831:9	6831:9	15	& bitarray [ 19 ]
UNARY_EXPR	6831:9	6831:10	16	& bitarray [ 19 ]
UNARY_OPERATOR	6831:9	6831:9	17	&
LEAF_NODE	6831:9	6831:9	18	&
FIELD	6831:10	6831:21	17	bitarray [ 19 ]
LEAF_NODE	6831:10	6831:10	18	bitarray
LEAF_NODE	6831:18	6831:18	18	[
EXPR	6831:19	6831:19	18	19
FIELD	6831:19	6831:19	19	19
LEAF_NODE	6831:19	6831:19	20	19
LEAF_NODE	6831:21	6831:21	18	]
LEAF_NODE	6831:22	6831:22	15	,
ARGUMENT	6831:24	6831:24	15	"\t"
FIELD	6831:24	6831:24	16	"\t"
LEAF_NODE	6831:24	6831:24	17	"\t"
LEAF_NODE	6831:28	6831:28	15	)
LEAF_NODE	6831:29	6831:29	13	;
ITERATION	6832:8	6833:10	12	
KEYWORD	6832:8	6832:8	13	for
LEAF_NODE	6832:8	6832:8	14	for
LEAF_NODE	6832:12	6832:12	13	(
FOR_INIT	6832:13	6832:26	13	j = 20 , k = 7 ;
EXPR	6832:13	6832:21	14	j = 20 , k = 7
ASSIGN	6832:13	6832:17	15	j = 20
LVAL	6832:13	6832:13	16	j
FIELD	6832:13	6832:13	17	j
LEAF_NODE	6832:13	6832:13	18	j
ASSIGN_OP	6832:15	6832:15	16	=
LEAF_NODE	6832:15	6832:15	17	=
RVAL	6832:17	6832:17	16	20
FIELD	6832:17	6832:17	17	20
LEAF_NODE	6832:17	6832:17	18	20
LEAF_NODE	6832:19	6832:19	15	,
ASSIGN	6832:21	6832:25	15	k = 7
LVAL	6832:21	6832:21	16	k
FIELD	6832:21	6832:21	17	k
LEAF_NODE	6832:21	6832:21	18	k
ASSIGN_OP	6832:23	6832:23	16	=
LEAF_NODE	6832:23	6832:23	17	=
RVAL	6832:25	6832:25	16	7
FIELD	6832:25	6832:25	17	7
LEAF_NODE	6832:25	6832:25	18	7
LEAF_NODE	6832:26	6832:26	14	;
CONDITION	6832:28	6832:28	13	j < 28
EXPR	6832:28	6832:32	14	j < 28
FIELD	6832:28	6832:28	15	j
LEAF_NODE	6832:28	6832:28	16	j
REL_OPERATOR	6832:30	6832:30	15	<
LEAF_NODE	6832:30	6832:30	16	<
FIELD	6832:32	6832:32	15	28
LEAF_NODE	6832:32	6832:32	16	28
LEAF_NODE	6832:34	6832:34	13	;
FOR_EXPR	6832:36	6832:36	13	j ++ , k --
EXPR	6832:36	6832:41	14	j ++ , k --
FIELD	6832:36	6832:37	15	j ++
LEAF_NODE	6832:36	6832:36	16	j
LEAF_NODE	6832:37	6832:37	16	++
LEAF_NODE	6832:39	6832:39	15	,
FIELD	6832:41	6832:42	15	k --
LEAF_NODE	6832:41	6832:41	16	k
LEAF_NODE	6832:42	6832:42	16	--
LEAF_NODE	6832:44	6832:44	13	)
STATEMENTS	6833:10	6836:10	13	
LEAF_NODE	6833:10	6833:10	14	{
STATEMENTS	6834:10	6835:53	14	
EXPR_STATEMENT	6834:10	6834:80	15	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	6834:10	6834:10	16	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	6834:10	6834:19	17	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	6834:10	6834:10	18	bitset
FIELD	6834:10	6834:10	19	bitset
LEAF_NODE	6834:10	6834:10	20	bitset
ASSIGN_OP	6834:17	6834:17	18	=
LEAF_NODE	6834:17	6834:17	19	=
RVAL	6834:19	6834:19	18	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	6834:19	6834:79	19	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	6834:19	6834:71	20	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) )
UNARY_EXPR	6834:19	6834:43	21	* ( sect_buff + dst_offset )
UNARY_OPERATOR	6834:19	6834:19	22	*
LEAF_NODE	6834:19	6834:19	23	*
LEAF_NODE	6834:20	6834:20	22	(
FIELD	6834:21	6834:21	22	sect_buff
LEAF_NODE	6834:21	6834:21	23	sect_buff
LEAF_NODE	6834:31	6834:31	22	+
FIELD	6834:33	6834:33	22	dst_offset
LEAF_NODE	6834:33	6834:33	23	dst_offset
LEAF_NODE	6834:43	6834:43	22	)
LEAF_NODE	6834:45	6834:45	21	&
LEAF_NODE	6834:47	6834:47	21	(
LEAF_NODE	6834:48	6834:48	21	(
LEAF_NODE	6834:49	6834:49	21	(
TYPE_NAME	6834:50	6834:59	21	unsigned char
LEAF_NODE	6834:50	6834:50	22	unsigned
LEAF_NODE	6834:59	6834:59	22	char
LEAF_NODE	6834:63	6834:63	21	)
FIELD	6834:64	6834:64	21	1
LEAF_NODE	6834:64	6834:64	22	1
LEAF_NODE	6834:66	6834:66	21	<<
FIELD	6834:69	6834:69	21	k
LEAF_NODE	6834:69	6834:69	22	k
LEAF_NODE	6834:70	6834:70	21	)
LEAF_NODE	6834:71	6834:71	21	)
LEAF_NODE	6834:73	6834:73	20	?
EXPR	6834:75	6834:75	20	1
FIELD	6834:75	6834:75	21	1
LEAF_NODE	6834:75	6834:75	22	1
LEAF_NODE	6834:77	6834:77	20	:
FIELD	6834:79	6834:79	20	0
LEAF_NODE	6834:79	6834:79	21	0
LEAF_NODE	6834:80	6834:80	16	;
LEAF_NODE	6835:10	6835:10	15	sprintf
LEAF_NODE	6835:17	6835:17	15	(
LEAF_NODE	6835:18	6835:18	15	&
LEAF_NODE	6835:19	6835:19	15	bitarray
LEAF_NODE	6835:27	6835:27	15	[
LEAF_NODE	6835:28	6835:28	15	j
LEAF_NODE	6835:29	6835:29	15	]
LEAF_NODE	6835:30	6835:30	15	,
LEAF_NODE	6835:32	6835:32	15	(
LEAF_NODE	6835:33	6835:33	15	bitset
LEAF_NODE	6835:39	6835:39	15	)
LEAF_NODE	6835:41	6835:41	15	?
LEAF_NODE	6835:43	6835:43	15	"1"
LEAF_NODE	6835:47	6835:47	15	:
LEAF_NODE	6835:49	6835:49	15	"0"
LEAF_NODE	6835:52	6835:52	15	)
LEAF_NODE	6835:53	6835:53	15	;
LEAF_NODE	6836:10	6836:10	14	}
EXPR_STATEMENT	6837:8	6837:26	12	bitarray [ 28 ] = ' ' ;
EXPR	6837:8	6837:8	13	bitarray [ 28 ] = ' '
ASSIGN	6837:8	6837:23	14	bitarray [ 28 ] = ' '
LVAL	6837:8	6837:8	15	bitarray [ 28 ]
FIELD	6837:8	6837:19	16	bitarray [ 28 ]
LEAF_NODE	6837:8	6837:8	17	bitarray
LEAF_NODE	6837:16	6837:16	17	[
EXPR	6837:17	6837:17	17	28
FIELD	6837:17	6837:17	18	28
LEAF_NODE	6837:17	6837:17	19	28
LEAF_NODE	6837:19	6837:19	17	]
ASSIGN_OP	6837:21	6837:21	15	=
LEAF_NODE	6837:21	6837:21	16	=
RVAL	6837:23	6837:23	15	' '
FIELD	6837:23	6837:23	16	' '
LEAF_NODE	6837:23	6837:23	17	' '
LEAF_NODE	6837:26	6837:26	13	;
EXPR_STATEMENT	6838:8	6838:26	12	bitarray [ 29 ] = ' ' ;
EXPR	6838:8	6838:8	13	bitarray [ 29 ] = ' '
ASSIGN	6838:8	6838:23	14	bitarray [ 29 ] = ' '
LVAL	6838:8	6838:8	15	bitarray [ 29 ]
FIELD	6838:8	6838:19	16	bitarray [ 29 ]
LEAF_NODE	6838:8	6838:8	17	bitarray
LEAF_NODE	6838:16	6838:16	17	[
EXPR	6838:17	6838:17	17	29
FIELD	6838:17	6838:17	18	29
LEAF_NODE	6838:17	6838:17	19	29
LEAF_NODE	6838:19	6838:19	17	]
ASSIGN_OP	6838:21	6838:21	15	=
LEAF_NODE	6838:21	6838:21	16	=
RVAL	6838:23	6838:23	15	' '
FIELD	6838:23	6838:23	16	' '
LEAF_NODE	6838:23	6838:23	17	' '
LEAF_NODE	6838:26	6838:26	13	;
EXPR_STATEMENT	6840:8	6840:32	12	dst_offset += full_bytes ;
EXPR	6840:8	6840:8	13	dst_offset += full_bytes
ASSIGN	6840:8	6840:22	14	dst_offset += full_bytes
LVAL	6840:8	6840:8	15	dst_offset
FIELD	6840:8	6840:8	16	dst_offset
LEAF_NODE	6840:8	6840:8	17	dst_offset
ASSIGN_OP	6840:19	6840:19	15	+=
LEAF_NODE	6840:19	6840:19	16	+=
RVAL	6840:22	6840:22	15	full_bytes
FIELD	6840:22	6840:22	16	full_bytes
LEAF_NODE	6840:22	6840:22	17	full_bytes
LEAF_NODE	6840:32	6840:32	13	;
SELECTION	6842:8	6843:10	12	
KEYWORD	6842:8	6842:8	13	if
LEAF_NODE	6842:8	6842:8	14	if
LEAF_NODE	6842:11	6842:11	13	(
CONDITION	6842:12	6842:12	13	trailing_bits != 0
EXPR	6842:12	6842:29	14	trailing_bits != 0
FIELD	6842:12	6842:12	15	trailing_bits
LEAF_NODE	6842:12	6842:12	16	trailing_bits
EQ_OPERATOR	6842:26	6842:26	15	!=
LEAF_NODE	6842:26	6842:26	16	!=
FIELD	6842:29	6842:29	15	0
LEAF_NODE	6842:29	6842:29	16	0
LEAF_NODE	6842:30	6842:30	13	)
STATEMENTS	6843:10	6871:3	13	
LEAF_NODE	6843:10	6843:10	14	{
STATEMENTS	6845:5	6856:10	14	
EXPR_STATEMENT	6845:5	6845:115	15	TIFFError ( "" , "        Trailing bits   src offset: %8d, Dst offset: %8d\n" , offset1 + full_bytes , dst_offset ) ;
EXPR	6845:5	6845:5	16	TIFFError ( "" , "        Trailing bits   src offset: %8d, Dst offset: %8d\n" , offset1 + full_bytes , dst_offset )
FUNCTION_CALL	6845:5	6845:114	17	TIFFError ( "" , "        Trailing bits   src offset: %8d, Dst offset: %8d\n" , offset1 + full_bytes , dst_offset )
CALLEE	6845:5	6845:5	18	TIFFError
LEAF_NODE	6845:5	6845:5	19	TIFFError
LEAF_NODE	6845:15	6845:15	18	(
ARGUMENT	6845:16	6845:16	18	""
FIELD	6845:16	6845:16	19	""
LEAF_NODE	6845:16	6845:16	20	""
LEAF_NODE	6845:18	6845:18	18	,
ARGUMENT	6845:20	6845:20	18	"        Trailing bits   src offset: %8d, Dst offset: %8d\n"
FIELD	6845:20	6845:20	19	"        Trailing bits   src offset: %8d, Dst offset: %8d\n"
LEAF_NODE	6845:20	6845:20	20	"        Trailing bits   src offset: %8d, Dst offset: %8d\n"
LEAF_NODE	6845:80	6845:80	18	,
ARGUMENT	6845:82	6845:92	18	offset1 + full_bytes
FIELD	6845:82	6845:82	19	offset1
LEAF_NODE	6845:82	6845:82	20	offset1
LEAF_NODE	6845:90	6845:90	19	+
FIELD	6845:92	6845:92	19	full_bytes
LEAF_NODE	6845:92	6845:92	20	full_bytes
LEAF_NODE	6845:102	6845:102	18	,
ARGUMENT	6845:104	6845:104	18	dst_offset
FIELD	6845:104	6845:104	19	dst_offset
LEAF_NODE	6845:104	6845:104	20	dst_offset
LEAF_NODE	6845:114	6845:114	18	)
LEAF_NODE	6845:115	6845:115	16	;
SELECTION	6847:3	6848:12	15	
KEYWORD	6847:3	6847:3	16	if
LEAF_NODE	6847:3	6847:3	17	if
LEAF_NODE	6847:6	6847:6	16	(
CONDITION	6847:7	6847:7	16	shift2 > shift1
EXPR	6847:7	6847:16	17	shift2 > shift1
FIELD	6847:7	6847:7	18	shift2
LEAF_NODE	6847:7	6847:7	19	shift2
REL_OPERATOR	6847:14	6847:14	18	>
LEAF_NODE	6847:14	6847:14	19	>
FIELD	6847:16	6847:16	18	shift1
LEAF_NODE	6847:16	6847:16	19	shift1
LEAF_NODE	6847:22	6847:22	16	)
STATEMENTS	6848:12	6855:12	16	
LEAF_NODE	6848:12	6848:12	17	{
STATEMENTS	6849:5	6853:5	17	
EXPR_STATEMENT	6849:5	6849:86	18	bytebuff1 = src_buff [ offset1 + full_bytes ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) ) ;
EXPR	6849:5	6849:5	19	bytebuff1 = src_buff [ offset1 + full_bytes ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) )
ASSIGN	6849:5	6849:17	20	bytebuff1 = src_buff [ offset1 + full_bytes ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) )
LVAL	6849:5	6849:5	21	bytebuff1
FIELD	6849:5	6849:5	22	bytebuff1
LEAF_NODE	6849:5	6849:5	23	bytebuff1
ASSIGN_OP	6849:15	6849:15	21	=
LEAF_NODE	6849:15	6849:15	22	=
RVAL	6849:17	6849:85	21	src_buff [ offset1 + full_bytes ] & ( ( unsigned char ) 255 << ( 7 - shift2 ) )
FIELD	6849:17	6849:46	22	src_buff [ offset1 + full_bytes ]
LEAF_NODE	6849:17	6849:17	23	src_buff
LEAF_NODE	6849:25	6849:25	23	[
EXPR	6849:26	6849:36	23	offset1 + full_bytes
FIELD	6849:26	6849:26	24	offset1
LEAF_NODE	6849:26	6849:26	25	offset1
LEAF_NODE	6849:34	6849:34	24	+
FIELD	6849:36	6849:36	24	full_bytes
LEAF_NODE	6849:36	6849:36	25	full_bytes
LEAF_NODE	6849:46	6849:46	23	]
LEAF_NODE	6849:48	6849:48	22	&
LEAF_NODE	6849:50	6849:50	22	(
LEAF_NODE	6849:51	6849:51	22	(
TYPE_NAME	6849:52	6849:61	22	unsigned char
LEAF_NODE	6849:52	6849:52	23	unsigned
LEAF_NODE	6849:61	6849:61	23	char
LEAF_NODE	6849:65	6849:65	22	)
FIELD	6849:66	6849:66	22	255
LEAF_NODE	6849:66	6849:66	23	255
LEAF_NODE	6849:70	6849:70	22	<<
LEAF_NODE	6849:73	6849:73	22	(
FIELD	6849:74	6849:74	22	7
LEAF_NODE	6849:74	6849:74	23	7
LEAF_NODE	6849:76	6849:76	22	-
FIELD	6849:78	6849:78	22	shift2
LEAF_NODE	6849:78	6849:78	23	shift2
LEAF_NODE	6849:84	6849:84	22	)
LEAF_NODE	6849:85	6849:85	22	)
LEAF_NODE	6849:86	6849:86	19	;
EXPR_STATEMENT	6850:12	6850:66	18	bytebuff2 = bytebuff1 & ( ( unsigned char ) 255 << shift1 ) ;
EXPR	6850:12	6850:12	19	bytebuff2 = bytebuff1 & ( ( unsigned char ) 255 << shift1 )
ASSIGN	6850:12	6850:24	20	bytebuff2 = bytebuff1 & ( ( unsigned char ) 255 << shift1 )
LVAL	6850:12	6850:12	21	bytebuff2
FIELD	6850:12	6850:12	22	bytebuff2
LEAF_NODE	6850:12	6850:12	23	bytebuff2
ASSIGN_OP	6850:22	6850:22	21	=
LEAF_NODE	6850:22	6850:22	22	=
RVAL	6850:24	6850:65	21	bytebuff1 & ( ( unsigned char ) 255 << shift1 )
FIELD	6850:24	6850:24	22	bytebuff1
LEAF_NODE	6850:24	6850:24	23	bytebuff1
LEAF_NODE	6850:34	6850:34	22	&
LEAF_NODE	6850:36	6850:36	22	(
LEAF_NODE	6850:37	6850:37	22	(
TYPE_NAME	6850:38	6850:47	22	unsigned char
LEAF_NODE	6850:38	6850:38	23	unsigned
LEAF_NODE	6850:47	6850:47	23	char
LEAF_NODE	6850:51	6850:51	22	)
FIELD	6850:52	6850:52	22	255
LEAF_NODE	6850:52	6850:52	23	255
LEAF_NODE	6850:56	6850:56	22	<<
FIELD	6850:59	6850:59	22	shift1
LEAF_NODE	6850:59	6850:59	23	shift1
LEAF_NODE	6850:65	6850:65	22	)
LEAF_NODE	6850:66	6850:66	19	;
EXPR_STATEMENT	6851:12	6851:45	18	sect_buff [ dst_offset ] = bytebuff2 ;
EXPR	6851:12	6851:12	19	sect_buff [ dst_offset ] = bytebuff2
ASSIGN	6851:12	6851:36	20	sect_buff [ dst_offset ] = bytebuff2
LVAL	6851:12	6851:12	21	sect_buff [ dst_offset ]
FIELD	6851:12	6851:32	22	sect_buff [ dst_offset ]
LEAF_NODE	6851:12	6851:12	23	sect_buff
LEAF_NODE	6851:21	6851:21	23	[
EXPR	6851:22	6851:22	23	dst_offset
FIELD	6851:22	6851:22	24	dst_offset
LEAF_NODE	6851:22	6851:22	25	dst_offset
LEAF_NODE	6851:32	6851:32	23	]
ASSIGN_OP	6851:34	6851:34	21	=
LEAF_NODE	6851:34	6851:34	22	=
RVAL	6851:36	6851:36	21	bytebuff2
FIELD	6851:36	6851:36	22	bytebuff2
LEAF_NODE	6851:36	6851:36	23	bytebuff2
LEAF_NODE	6851:45	6851:45	19	;
EXPR_STATEMENT	6853:5	6853:48	18	TIFFError ( "" , "        Shift2 > Shift1\n" ) ;
EXPR	6853:5	6853:5	19	TIFFError ( "" , "        Shift2 > Shift1\n" )
FUNCTION_CALL	6853:5	6853:47	20	TIFFError ( "" , "        Shift2 > Shift1\n" )
CALLEE	6853:5	6853:5	21	TIFFError
LEAF_NODE	6853:5	6853:5	22	TIFFError
LEAF_NODE	6853:15	6853:15	21	(
ARGUMENT	6853:16	6853:16	21	""
FIELD	6853:16	6853:16	22	""
LEAF_NODE	6853:16	6853:16	23	""
LEAF_NODE	6853:18	6853:18	21	,
ARGUMENT	6853:20	6853:20	21	"        Shift2 > Shift1\n"
FIELD	6853:20	6853:20	22	"        Shift2 > Shift1\n"
LEAF_NODE	6853:20	6853:20	23	"        Shift2 > Shift1\n"
LEAF_NODE	6853:47	6853:47	21	)
LEAF_NODE	6853:48	6853:48	19	;
LEAF_NODE	6855:12	6855:12	17	}
SELECTION	6856:10	6857:12	15	
KEYWORD	6856:10	6856:10	16	else
LEAF_NODE	6856:10	6856:10	17	else
STATEMENTS	6857:12	6870:12	16	
LEAF_NODE	6857:12	6857:12	17	{
STATEMENTS	6858:5	6867:12	17	
SELECTION	6858:5	6859:14	18	
KEYWORD	6858:5	6858:5	19	if
LEAF_NODE	6858:5	6858:5	20	if
LEAF_NODE	6858:8	6858:8	19	(
CONDITION	6858:9	6858:9	19	shift2 < shift1
EXPR	6858:9	6858:18	20	shift2 < shift1
FIELD	6858:9	6858:9	21	shift2
LEAF_NODE	6858:9	6858:9	22	shift2
REL_OPERATOR	6858:16	6858:16	21	<
LEAF_NODE	6858:16	6858:16	22	<
FIELD	6858:18	6858:18	21	shift1
LEAF_NODE	6858:18	6858:18	22	shift1
LEAF_NODE	6858:24	6858:24	19	)
STATEMENTS	6859:14	6865:14	19	
LEAF_NODE	6859:14	6859:14	20	{
STATEMENTS	6860:14	6863:7	20	
EXPR_STATEMENT	6860:14	6860:71	21	bytebuff2 = ( ( unsigned char ) 255 << ( shift1 - shift2 - 1 ) ) ;
EXPR	6860:14	6860:14	22	bytebuff2 = ( ( unsigned char ) 255 << ( shift1 - shift2 - 1 ) )
ASSIGN	6860:14	6860:26	23	bytebuff2 = ( ( unsigned char ) 255 << ( shift1 - shift2 - 1 ) )
LVAL	6860:14	6860:14	24	bytebuff2
FIELD	6860:14	6860:14	25	bytebuff2
LEAF_NODE	6860:14	6860:14	26	bytebuff2
ASSIGN_OP	6860:24	6860:24	24	=
LEAF_NODE	6860:24	6860:24	25	=
RVAL	6860:26	6860:70	24	( ( unsigned char ) 255 << ( shift1 - shift2 - 1 ) )
LEAF_NODE	6860:26	6860:26	25	(
LEAF_NODE	6860:27	6860:27	25	(
TYPE_NAME	6860:28	6860:37	25	unsigned char
LEAF_NODE	6860:28	6860:28	26	unsigned
LEAF_NODE	6860:37	6860:37	26	char
LEAF_NODE	6860:41	6860:41	25	)
FIELD	6860:42	6860:42	25	255
LEAF_NODE	6860:42	6860:42	26	255
LEAF_NODE	6860:46	6860:46	25	<<
LEAF_NODE	6860:49	6860:49	25	(
FIELD	6860:50	6860:50	25	shift1
LEAF_NODE	6860:50	6860:50	26	shift1
LEAF_NODE	6860:57	6860:57	25	-
FIELD	6860:59	6860:59	25	shift2
LEAF_NODE	6860:59	6860:59	26	shift2
LEAF_NODE	6860:66	6860:66	25	-
FIELD	6860:68	6860:68	25	1
LEAF_NODE	6860:68	6860:68	26	1
LEAF_NODE	6860:69	6860:69	25	)
LEAF_NODE	6860:70	6860:70	25	)
LEAF_NODE	6860:71	6860:71	22	;
EXPR_STATEMENT	6861:7	6861:41	21	sect_buff [ dst_offset ] &= bytebuff2 ;
EXPR	6861:7	6861:7	22	sect_buff [ dst_offset ] &= bytebuff2
ASSIGN	6861:7	6861:32	23	sect_buff [ dst_offset ] &= bytebuff2
LVAL	6861:7	6861:7	24	sect_buff [ dst_offset ]
FIELD	6861:7	6861:27	25	sect_buff [ dst_offset ]
LEAF_NODE	6861:7	6861:7	26	sect_buff
LEAF_NODE	6861:16	6861:16	26	[
EXPR	6861:17	6861:17	26	dst_offset
FIELD	6861:17	6861:17	27	dst_offset
LEAF_NODE	6861:17	6861:17	28	dst_offset
LEAF_NODE	6861:27	6861:27	26	]
ASSIGN_OP	6861:29	6861:29	24	&=
LEAF_NODE	6861:29	6861:29	25	&=
RVAL	6861:32	6861:32	24	bytebuff2
FIELD	6861:32	6861:32	25	bytebuff2
LEAF_NODE	6861:32	6861:32	26	bytebuff2
LEAF_NODE	6861:41	6861:41	22	;
EXPR_STATEMENT	6863:7	6863:50	21	TIFFError ( "" , "        Shift2 < Shift1\n" ) ;
EXPR	6863:7	6863:7	22	TIFFError ( "" , "        Shift2 < Shift1\n" )
FUNCTION_CALL	6863:7	6863:49	23	TIFFError ( "" , "        Shift2 < Shift1\n" )
CALLEE	6863:7	6863:7	24	TIFFError
LEAF_NODE	6863:7	6863:7	25	TIFFError
LEAF_NODE	6863:17	6863:17	24	(
ARGUMENT	6863:18	6863:18	24	""
FIELD	6863:18	6863:18	25	""
LEAF_NODE	6863:18	6863:18	26	""
LEAF_NODE	6863:20	6863:20	24	,
ARGUMENT	6863:22	6863:22	24	"        Shift2 < Shift1\n"
FIELD	6863:22	6863:22	25	"        Shift2 < Shift1\n"
LEAF_NODE	6863:22	6863:22	26	"        Shift2 < Shift1\n"
LEAF_NODE	6863:49	6863:49	24	)
LEAF_NODE	6863:50	6863:50	22	;
LEAF_NODE	6865:14	6865:14	20	}
SELECTION	6867:12	6868:7	18	
KEYWORD	6867:12	6867:12	19	else
LEAF_NODE	6867:12	6867:12	20	else
STATEMENTS	6868:7	6868:7	19	
EXPR_STATEMENT	6868:7	6868:51	20	TIFFError ( "" , "        Shift2 == Shift1\n" ) ;
EXPR	6868:7	6868:7	21	TIFFError ( "" , "        Shift2 == Shift1\n" )
FUNCTION_CALL	6868:7	6868:50	22	TIFFError ( "" , "        Shift2 == Shift1\n" )
CALLEE	6868:7	6868:7	23	TIFFError
LEAF_NODE	6868:7	6868:7	24	TIFFError
LEAF_NODE	6868:17	6868:17	23	(
ARGUMENT	6868:18	6868:18	23	""
FIELD	6868:18	6868:18	24	""
LEAF_NODE	6868:18	6868:18	25	""
LEAF_NODE	6868:20	6868:20	23	,
ARGUMENT	6868:22	6868:22	23	"        Shift2 == Shift1\n"
FIELD	6868:22	6868:22	24	"        Shift2 == Shift1\n"
LEAF_NODE	6868:22	6868:22	25	"        Shift2 == Shift1\n"
LEAF_NODE	6868:50	6868:50	23	)
LEAF_NODE	6868:51	6868:51	21	;
LEAF_NODE	6870:12	6870:12	17	}
LEAF_NODE	6871:3	6871:3	14	}
EXPR_STATEMENT	6873:3	6873:30	12	sprintf ( & bitarray [ 28 ] , " " ) ;
EXPR	6873:3	6873:3	13	sprintf ( & bitarray [ 28 ] , " " )
FUNCTION_CALL	6873:3	6873:29	14	sprintf ( & bitarray [ 28 ] , " " )
CALLEE	6873:3	6873:3	15	sprintf
LEAF_NODE	6873:3	6873:3	16	sprintf
LEAF_NODE	6873:10	6873:10	15	(
ARGUMENT	6873:11	6873:11	15	& bitarray [ 28 ]
UNARY_EXPR	6873:11	6873:12	16	& bitarray [ 28 ]
UNARY_OPERATOR	6873:11	6873:11	17	&
LEAF_NODE	6873:11	6873:11	18	&
FIELD	6873:12	6873:23	17	bitarray [ 28 ]
LEAF_NODE	6873:12	6873:12	18	bitarray
LEAF_NODE	6873:20	6873:20	18	[
EXPR	6873:21	6873:21	18	28
FIELD	6873:21	6873:21	19	28
LEAF_NODE	6873:21	6873:21	20	28
LEAF_NODE	6873:23	6873:23	18	]
LEAF_NODE	6873:24	6873:24	15	,
ARGUMENT	6873:26	6873:26	15	" "
FIELD	6873:26	6873:26	16	" "
LEAF_NODE	6873:26	6873:26	17	" "
LEAF_NODE	6873:29	6873:29	15	)
LEAF_NODE	6873:30	6873:30	13	;
EXPR_STATEMENT	6874:3	6874:30	12	sprintf ( & bitarray [ 29 ] , " " ) ;
EXPR	6874:3	6874:3	13	sprintf ( & bitarray [ 29 ] , " " )
FUNCTION_CALL	6874:3	6874:29	14	sprintf ( & bitarray [ 29 ] , " " )
CALLEE	6874:3	6874:3	15	sprintf
LEAF_NODE	6874:3	6874:3	16	sprintf
LEAF_NODE	6874:10	6874:10	15	(
ARGUMENT	6874:11	6874:11	15	& bitarray [ 29 ]
UNARY_EXPR	6874:11	6874:12	16	& bitarray [ 29 ]
UNARY_OPERATOR	6874:11	6874:11	17	&
LEAF_NODE	6874:11	6874:11	18	&
FIELD	6874:12	6874:23	17	bitarray [ 29 ]
LEAF_NODE	6874:12	6874:12	18	bitarray
LEAF_NODE	6874:20	6874:20	18	[
EXPR	6874:21	6874:21	18	29
FIELD	6874:21	6874:21	19	29
LEAF_NODE	6874:21	6874:21	20	29
LEAF_NODE	6874:23	6874:23	18	]
LEAF_NODE	6874:24	6874:24	15	,
ARGUMENT	6874:26	6874:26	15	" "
FIELD	6874:26	6874:26	16	" "
LEAF_NODE	6874:26	6874:26	17	" "
LEAF_NODE	6874:29	6874:29	15	)
LEAF_NODE	6874:30	6874:30	13	;
ITERATION	6875:10	6876:12	12	
KEYWORD	6875:10	6875:10	13	for
LEAF_NODE	6875:10	6875:10	14	for
LEAF_NODE	6875:14	6875:14	13	(
FOR_INIT	6875:15	6875:28	13	j = 30 , k = 7 ;
EXPR	6875:15	6875:23	14	j = 30 , k = 7
ASSIGN	6875:15	6875:19	15	j = 30
LVAL	6875:15	6875:15	16	j
FIELD	6875:15	6875:15	17	j
LEAF_NODE	6875:15	6875:15	18	j
ASSIGN_OP	6875:17	6875:17	16	=
LEAF_NODE	6875:17	6875:17	17	=
RVAL	6875:19	6875:19	16	30
FIELD	6875:19	6875:19	17	30
LEAF_NODE	6875:19	6875:19	18	30
LEAF_NODE	6875:21	6875:21	15	,
ASSIGN	6875:23	6875:27	15	k = 7
LVAL	6875:23	6875:23	16	k
FIELD	6875:23	6875:23	17	k
LEAF_NODE	6875:23	6875:23	18	k
ASSIGN_OP	6875:25	6875:25	16	=
LEAF_NODE	6875:25	6875:25	17	=
RVAL	6875:27	6875:27	16	7
FIELD	6875:27	6875:27	17	7
LEAF_NODE	6875:27	6875:27	18	7
LEAF_NODE	6875:28	6875:28	14	;
CONDITION	6875:30	6875:30	13	j < 38
EXPR	6875:30	6875:34	14	j < 38
FIELD	6875:30	6875:30	15	j
LEAF_NODE	6875:30	6875:30	16	j
REL_OPERATOR	6875:32	6875:32	15	<
LEAF_NODE	6875:32	6875:32	16	<
FIELD	6875:34	6875:34	15	38
LEAF_NODE	6875:34	6875:34	16	38
LEAF_NODE	6875:36	6875:36	13	;
FOR_EXPR	6875:38	6875:38	13	j ++ , k --
EXPR	6875:38	6875:43	14	j ++ , k --
FIELD	6875:38	6875:39	15	j ++
LEAF_NODE	6875:38	6875:38	16	j
LEAF_NODE	6875:39	6875:39	16	++
LEAF_NODE	6875:41	6875:41	15	,
FIELD	6875:43	6875:44	15	k --
LEAF_NODE	6875:43	6875:43	16	k
LEAF_NODE	6875:44	6875:44	16	--
LEAF_NODE	6875:46	6875:46	13	)
STATEMENTS	6876:12	6879:12	13	
LEAF_NODE	6876:12	6876:12	14	{
STATEMENTS	6877:12	6878:55	14	
EXPR_STATEMENT	6877:12	6877:82	15	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0 ;
EXPR	6877:12	6877:12	16	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
ASSIGN	6877:12	6877:21	17	bitset = * ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
LVAL	6877:12	6877:12	18	bitset
FIELD	6877:12	6877:12	19	bitset
LEAF_NODE	6877:12	6877:12	20	bitset
ASSIGN_OP	6877:19	6877:19	18	=
LEAF_NODE	6877:19	6877:19	19	=
RVAL	6877:21	6877:21	18	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
COND_EXPR	6877:21	6877:81	19	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) ) ? 1 : 0
CONDITION	6877:21	6877:73	20	* ( sect_buff + dst_offset ) & ( ( ( unsigned char ) 1 << k ) )
UNARY_EXPR	6877:21	6877:45	21	* ( sect_buff + dst_offset )
UNARY_OPERATOR	6877:21	6877:21	22	*
LEAF_NODE	6877:21	6877:21	23	*
LEAF_NODE	6877:22	6877:22	22	(
FIELD	6877:23	6877:23	22	sect_buff
LEAF_NODE	6877:23	6877:23	23	sect_buff
LEAF_NODE	6877:33	6877:33	22	+
FIELD	6877:35	6877:35	22	dst_offset
LEAF_NODE	6877:35	6877:35	23	dst_offset
LEAF_NODE	6877:45	6877:45	22	)
LEAF_NODE	6877:47	6877:47	21	&
LEAF_NODE	6877:49	6877:49	21	(
LEAF_NODE	6877:50	6877:50	21	(
LEAF_NODE	6877:51	6877:51	21	(
TYPE_NAME	6877:52	6877:61	21	unsigned char
LEAF_NODE	6877:52	6877:52	22	unsigned
LEAF_NODE	6877:61	6877:61	22	char
LEAF_NODE	6877:65	6877:65	21	)
FIELD	6877:66	6877:66	21	1
LEAF_NODE	6877:66	6877:66	22	1
LEAF_NODE	6877:68	6877:68	21	<<
FIELD	6877:71	6877:71	21	k
LEAF_NODE	6877:71	6877:71	22	k
LEAF_NODE	6877:72	6877:72	21	)
LEAF_NODE	6877:73	6877:73	21	)
LEAF_NODE	6877:75	6877:75	20	?
EXPR	6877:77	6877:77	20	1
FIELD	6877:77	6877:77	21	1
LEAF_NODE	6877:77	6877:77	22	1
LEAF_NODE	6877:79	6877:79	20	:
FIELD	6877:81	6877:81	20	0
LEAF_NODE	6877:81	6877:81	21	0
LEAF_NODE	6877:82	6877:82	16	;
LEAF_NODE	6878:12	6878:12	15	sprintf
LEAF_NODE	6878:19	6878:19	15	(
LEAF_NODE	6878:20	6878:20	15	&
LEAF_NODE	6878:21	6878:21	15	bitarray
LEAF_NODE	6878:29	6878:29	15	[
LEAF_NODE	6878:30	6878:30	15	j
LEAF_NODE	6878:31	6878:31	15	]
LEAF_NODE	6878:32	6878:32	15	,
LEAF_NODE	6878:34	6878:34	15	(
LEAF_NODE	6878:35	6878:35	15	bitset
LEAF_NODE	6878:41	6878:41	15	)
LEAF_NODE	6878:43	6878:43	15	?
LEAF_NODE	6878:45	6878:45	15	"1"
LEAF_NODE	6878:49	6878:49	15	:
LEAF_NODE	6878:51	6878:51	15	"0"
LEAF_NODE	6878:54	6878:54	15	)
LEAF_NODE	6878:55	6878:55	15	;
LEAF_NODE	6879:12	6879:12	14	}
EXPR_STATEMENT	6880:10	6880:29	12	bitarray [ 38 ] = '\0' ;
EXPR	6880:10	6880:10	13	bitarray [ 38 ] = '\0'
ASSIGN	6880:10	6880:25	14	bitarray [ 38 ] = '\0'
LVAL	6880:10	6880:10	15	bitarray [ 38 ]
FIELD	6880:10	6880:21	16	bitarray [ 38 ]
LEAF_NODE	6880:10	6880:10	17	bitarray
LEAF_NODE	6880:18	6880:18	17	[
EXPR	6880:19	6880:19	17	38
FIELD	6880:19	6880:19	18	38
LEAF_NODE	6880:19	6880:19	19	38
LEAF_NODE	6880:21	6880:21	17	]
ASSIGN_OP	6880:23	6880:23	15	=
LEAF_NODE	6880:23	6880:23	16	=
RVAL	6880:25	6880:25	15	'\0'
FIELD	6880:25	6880:25	16	'\0'
LEAF_NODE	6880:25	6880:25	17	'\0'
LEAF_NODE	6880:29	6880:29	13	;
EXPR_STATEMENT	6881:10	6881:96	12	TIFFError ( "" , "\tFirst and last bytes before and after masking:\n\t%s\n\n" , bitarray ) ;
EXPR	6881:10	6881:10	13	TIFFError ( "" , "\tFirst and last bytes before and after masking:\n\t%s\n\n" , bitarray )
FUNCTION_CALL	6881:10	6881:95	14	TIFFError ( "" , "\tFirst and last bytes before and after masking:\n\t%s\n\n" , bitarray )
CALLEE	6881:10	6881:10	15	TIFFError
LEAF_NODE	6881:10	6881:10	16	TIFFError
LEAF_NODE	6881:20	6881:20	15	(
ARGUMENT	6881:21	6881:21	15	""
FIELD	6881:21	6881:21	16	""
LEAF_NODE	6881:21	6881:21	17	""
LEAF_NODE	6881:23	6881:23	15	,
ARGUMENT	6881:25	6881:25	15	"\tFirst and last bytes before and after masking:\n\t%s\n\n"
FIELD	6881:25	6881:25	16	"\tFirst and last bytes before and after masking:\n\t%s\n\n"
LEAF_NODE	6881:25	6881:25	17	"\tFirst and last bytes before and after masking:\n\t%s\n\n"
LEAF_NODE	6881:85	6881:85	15	,
ARGUMENT	6881:87	6881:87	15	bitarray
FIELD	6881:87	6881:87	16	bitarray
LEAF_NODE	6881:87	6881:87	17	bitarray
LEAF_NODE	6881:95	6881:95	15	)
LEAF_NODE	6881:96	6881:96	13	;
EXPR_STATEMENT	6883:8	6883:20	12	dst_offset ++ ;
EXPR	6883:8	6883:8	13	dst_offset ++
FIELD	6883:8	6883:18	14	dst_offset ++
LEAF_NODE	6883:8	6883:8	15	dst_offset
LEAF_NODE	6883:18	6883:18	15	++
LEAF_NODE	6883:20	6883:20	13	;
LEAF_NODE	6884:8	6884:8	11	}
LEAF_NODE	6885:6	6885:6	8	}
LEAF_NODE	6886:4	6886:4	5	}
JUMP_STATEMENT	6888:2	6888:12	3	return ( 0 ) ;
KEYWORD	6888:2	6888:2	4	return
LEAF_NODE	6888:2	6888:2	5	return
DESTINATION	6888:9	6888:9	4	( 0 )
EXPR	6888:9	6888:11	5	( 0 )
LEAF_NODE	6888:9	6888:9	6	(
FIELD	6888:10	6888:10	6	0
LEAF_NODE	6888:10	6888:10	7	0
LEAF_NODE	6888:11	6888:11	6	)
LEAF_NODE	6888:12	6888:12	4	;
LEAF_NODE	6889:2	6889:2	2	}
FUNCTION_DEF	6891:0	6996:2	1	
RETURN_TYPE	6891:0	6891:7	2	static int
LEAF_NODE	6891:0	6891:0	3	static
TYPE_NAME	6891:7	6891:7	3	int
LEAF_NODE	6891:7	6891:7	4	int
FUNCTION_NAME	6892:0	6892:0	2	writeSelections
LEAF_NODE	6892:0	6892:0	3	writeSelections
PARAMETER_LIST	6892:15	6895:60	2	( TIFF * in , TIFF * * out , struct crop_mask * crop , struct image_data * image , struct dump_opts * dump , struct buffinfo [ ] seg_buffs , char * mp , char * filename , unsigned int * page , unsigned int total_pages )
LEAF_NODE	6892:15	6892:15	3	(
PARAMETER_DECL	6892:16	6892:22	3	TIFF * in
TYPE	6892:16	6892:21	4	TIFF *
TYPE_NAME	6892:16	6892:16	5	TIFF
LEAF_NODE	6892:16	6892:16	6	TIFF
POINTER	6892:21	6892:21	5	*
LEAF_NODE	6892:21	6892:21	6	*
NAME	6892:22	6892:22	4	in
LEAF_NODE	6892:22	6892:22	5	in
LEAF_NODE	6892:24	6892:24	3	,
PARAMETER_DECL	6892:26	6892:33	3	TIFF * * out
TYPE	6892:26	6892:31	4	TIFF * *
TYPE_NAME	6892:26	6892:26	5	TIFF
LEAF_NODE	6892:26	6892:26	6	TIFF
POINTER	6892:31	6892:32	5	* *
LEAF_NODE	6892:31	6892:31	6	*
LEAF_NODE	6892:32	6892:32	6	*
NAME	6892:33	6892:33	4	out
LEAF_NODE	6892:33	6892:33	5	out
LEAF_NODE	6892:36	6892:36	3	,
PARAMETER_DECL	6892:38	6892:56	3	struct crop_mask * crop
TYPE	6892:38	6892:55	4	struct crop_mask *
TYPE_NAME	6892:38	6892:45	5	struct crop_mask
LEAF_NODE	6892:38	6892:38	6	struct
LEAF_NODE	6892:45	6892:45	6	crop_mask
POINTER	6892:55	6892:55	5	*
LEAF_NODE	6892:55	6892:55	6	*
NAME	6892:56	6892:56	4	crop
LEAF_NODE	6892:56	6892:56	5	crop
LEAF_NODE	6892:60	6892:60	3	,
PARAMETER_DECL	6893:16	6893:35	3	struct image_data * image
TYPE	6893:16	6893:34	4	struct image_data *
TYPE_NAME	6893:16	6893:23	5	struct image_data
LEAF_NODE	6893:16	6893:16	6	struct
LEAF_NODE	6893:23	6893:23	6	image_data
POINTER	6893:34	6893:34	5	*
LEAF_NODE	6893:34	6893:34	6	*
NAME	6893:35	6893:35	4	image
LEAF_NODE	6893:35	6893:35	5	image
LEAF_NODE	6893:40	6893:40	3	,
PARAMETER_DECL	6893:42	6893:60	3	struct dump_opts * dump
TYPE	6893:42	6893:59	4	struct dump_opts *
TYPE_NAME	6893:42	6893:49	5	struct dump_opts
LEAF_NODE	6893:42	6893:42	6	struct
LEAF_NODE	6893:49	6893:49	6	dump_opts
POINTER	6893:59	6893:59	5	*
LEAF_NODE	6893:59	6893:59	6	*
NAME	6893:60	6893:60	4	dump
LEAF_NODE	6893:60	6893:60	5	dump
LEAF_NODE	6893:64	6893:64	3	,
PARAMETER_DECL	6894:16	6894:32	3	struct buffinfo [ ] seg_buffs
TYPE	6894:16	6894:41	4	struct buffinfo [ ]
TYPE_NAME	6894:16	6894:23	5	struct buffinfo
LEAF_NODE	6894:16	6894:16	6	struct
LEAF_NODE	6894:23	6894:23	6	buffinfo
TYPE_SUFFIX	6894:41	6894:42	5	[ ]
LEAF_NODE	6894:41	6894:41	6	[
LEAF_NODE	6894:42	6894:42	6	]
NAME	6894:32	6894:32	4	seg_buffs
LEAF_NODE	6894:32	6894:32	5	seg_buffs
LEAF_NODE	6894:43	6894:43	3	,
PARAMETER_DECL	6894:45	6894:51	3	char * mp
TYPE	6894:45	6894:50	4	char *
TYPE_NAME	6894:45	6894:45	5	char
LEAF_NODE	6894:45	6894:45	6	char
POINTER	6894:50	6894:50	5	*
LEAF_NODE	6894:50	6894:50	6	*
NAME	6894:51	6894:51	4	mp
LEAF_NODE	6894:51	6894:51	5	mp
LEAF_NODE	6894:53	6894:53	3	,
PARAMETER_DECL	6894:55	6894:61	3	char * filename
TYPE	6894:55	6894:60	4	char *
TYPE_NAME	6894:55	6894:55	5	char
LEAF_NODE	6894:55	6894:55	6	char
POINTER	6894:60	6894:60	5	*
LEAF_NODE	6894:60	6894:60	6	*
NAME	6894:61	6894:61	4	filename
LEAF_NODE	6894:61	6894:61	5	filename
LEAF_NODE	6894:69	6894:69	3	,
PARAMETER_DECL	6895:16	6895:30	3	unsigned int * page
TYPE	6895:16	6895:29	4	unsigned int *
TYPE_NAME	6895:16	6895:25	5	unsigned int
LEAF_NODE	6895:16	6895:16	6	unsigned
LEAF_NODE	6895:25	6895:25	6	int
POINTER	6895:29	6895:29	5	*
LEAF_NODE	6895:29	6895:29	6	*
NAME	6895:30	6895:30	4	page
LEAF_NODE	6895:30	6895:30	5	page
LEAF_NODE	6895:34	6895:34	3	,
PARAMETER_DECL	6895:36	6895:49	3	unsigned int total_pages
TYPE	6895:36	6895:36	4	unsigned int
TYPE_NAME	6895:36	6895:45	5	unsigned int
LEAF_NODE	6895:36	6895:36	6	unsigned
LEAF_NODE	6895:45	6895:45	6	int
NAME	6895:49	6895:49	4	total_pages
LEAF_NODE	6895:49	6895:49	5	total_pages
LEAF_NODE	6895:60	6895:60	3	)
LEAF_NODE	6896:2	6896:2	2	{
STATEMENTS	6897:2	6995:2	2	
SIMPLE_DECL	6897:2	6897:19	3	int i , int page_count ;
INIT_DECL_LIST	6897:2	6897:2	4	int i , int page_count
VAR_DECL	6897:2	6897:6	5	int i
TYPE	6897:2	6897:2	6	int
TYPE_NAME	6897:2	6897:2	7	int
LEAF_NODE	6897:2	6897:2	8	int
NAME	6897:6	6897:6	6	i
LEAF_NODE	6897:6	6897:6	7	i
LEAF_NODE	6897:7	6897:7	5	,
VAR_DECL	6897:2	6897:9	5	int page_count
TYPE	6897:2	6897:2	6	int
TYPE_NAME	6897:2	6897:2	7	int
LEAF_NODE	6897:2	6897:2	8	int
NAME	6897:9	6897:9	6	page_count
LEAF_NODE	6897:9	6897:9	7	page_count
LEAF_NODE	6897:19	6897:19	4	;
SIMPLE_DECL	6898:2	6898:19	3	int autoindex ; autoindex = 0 ;
VAR_DECL	6898:2	6898:6	4	int autoindex ; autoindex = 0
TYPE	6898:2	6898:2	5	int
TYPE_NAME	6898:2	6898:2	6	int
LEAF_NODE	6898:2	6898:2	7	int
NAME	6898:6	6898:6	5	autoindex
LEAF_NODE	6898:6	6898:6	6	autoindex
LEAF_NODE	0:0	0:0	5	;
INIT	6898:6	6898:6	5	autoindex = 0
ASSIGN	6898:6	6898:18	6	autoindex = 0
LVAL	6898:6	6898:6	7	autoindex
NAME	6898:6	6898:6	8	autoindex
LEAF_NODE	6898:6	6898:6	9	autoindex
ASSIGN_OP	6898:16	6898:16	7	=
LEAF_NODE	6898:16	6898:16	8	=
RVAL	6898:18	6898:18	7	0
FIELD	6898:18	6898:18	8	0
LEAF_NODE	6898:18	6898:18	9	0
LEAF_NODE	6898:19	6898:19	4	;
SIMPLE_DECL	6899:2	6899:33	3	unsigned char * crop_buff ; crop_buff = NULL ;
VAR_DECL	6899:2	6899:17	4	unsigned char * crop_buff ; crop_buff = NULL
TYPE	6899:2	6899:16	5	unsigned char *
TYPE_NAME	6899:2	6899:11	6	unsigned char
LEAF_NODE	6899:2	6899:2	7	unsigned
LEAF_NODE	6899:11	6899:11	7	char
POINTER	6899:16	6899:16	6	*
LEAF_NODE	6899:16	6899:16	7	*
NAME	6899:17	6899:17	5	crop_buff
LEAF_NODE	6899:17	6899:17	6	crop_buff
LEAF_NODE	0:0	0:0	5	;
INIT	6899:17	6899:17	5	crop_buff = NULL
ASSIGN	6899:17	6899:29	6	crop_buff = NULL
LVAL	6899:17	6899:17	7	crop_buff
NAME	6899:17	6899:17	8	crop_buff
LEAF_NODE	6899:17	6899:17	9	crop_buff
ASSIGN_OP	6899:27	6899:27	7	=
LEAF_NODE	6899:27	6899:27	8	=
RVAL	6899:29	6899:29	7	NULL
FIELD	6899:29	6899:29	8	NULL
LEAF_NODE	6899:29	6899:29	9	NULL
LEAF_NODE	6899:33	6899:33	4	;
SELECTION	6902:2	6903:4	3	
KEYWORD	6902:2	6902:2	4	switch
LEAF_NODE	6902:2	6902:2	5	switch
LEAF_NODE	6902:9	6902:9	4	(
CONDITION	6902:10	6902:10	4	crop -> exp_mode
EXPR	6902:10	6902:10	5	crop -> exp_mode
FIELD	6902:10	6902:16	6	crop -> exp_mode
LEAF_NODE	6902:10	6902:10	7	crop
LEAF_NODE	6902:14	6902:14	7	->
LEAF_NODE	6902:16	6902:16	7	exp_mode
LEAF_NODE	6902:24	6902:24	4	)
STATEMENTS	6903:4	6993:4	4	
LEAF_NODE	6903:4	6903:4	5	{
STATEMENTS	6904:4	6992:13	5	
LABEL	6904:4	6904:27	6	case ONE_FILE_COMPOSITE :
LEAF_NODE	6904:4	6904:4	7	case
LEAF_NODE	6904:9	6904:9	7	ONE_FILE_COMPOSITE
LEAF_NODE	6904:27	6904:27	7	:
EXPR_STATEMENT	6905:9	6905:22	6	autoindex = 0 ;
EXPR	6905:9	6905:9	7	autoindex = 0
ASSIGN	6905:9	6905:21	8	autoindex = 0
LVAL	6905:9	6905:9	9	autoindex
FIELD	6905:9	6905:9	10	autoindex
LEAF_NODE	6905:9	6905:9	11	autoindex
ASSIGN_OP	6905:19	6905:19	9	=
LEAF_NODE	6905:19	6905:19	10	=
RVAL	6905:21	6905:21	9	0
FIELD	6905:21	6905:21	10	0
LEAF_NODE	6905:21	6905:21	11	0
LEAF_NODE	6905:22	6905:22	7	;
EXPR_STATEMENT	6906:9	6906:40	6	crop_buff = seg_buffs [ 0 ] . buffer ;
EXPR	6906:9	6906:9	7	crop_buff = seg_buffs [ 0 ] . buffer
ASSIGN	6906:9	6906:21	8	crop_buff = seg_buffs [ 0 ] . buffer
LVAL	6906:9	6906:9	9	crop_buff
FIELD	6906:9	6906:9	10	crop_buff
LEAF_NODE	6906:9	6906:9	11	crop_buff
ASSIGN_OP	6906:19	6906:19	9	=
LEAF_NODE	6906:19	6906:19	10	=
RVAL	6906:21	6906:21	9	seg_buffs [ 0 ] . buffer
FIELD	6906:21	6906:34	10	seg_buffs [ 0 ] . buffer
LEAF_NODE	6906:21	6906:21	11	seg_buffs
LEAF_NODE	6906:30	6906:30	11	[
EXPR	6906:31	6906:31	11	0
FIELD	6906:31	6906:31	12	0
LEAF_NODE	6906:31	6906:31	13	0
LEAF_NODE	6906:32	6906:32	11	]
LEAF_NODE	6906:33	6906:33	11	.
LEAF_NODE	6906:34	6906:34	11	buffer
LEAF_NODE	6906:40	6906:40	7	;
SELECTION	6907:9	6908:11	6	
KEYWORD	6907:9	6907:9	7	if
LEAF_NODE	6907:9	6907:9	8	if
LEAF_NODE	6907:12	6907:12	7	(
CONDITION	6907:13	6907:13	7	update_output_file ( out , mp , autoindex , filename , page )
EXPR	6907:13	6907:13	8	update_output_file ( out , mp , autoindex , filename , page )
FUNCTION_CALL	6907:13	6907:67	9	update_output_file ( out , mp , autoindex , filename , page )
CALLEE	6907:13	6907:13	10	update_output_file
LEAF_NODE	6907:13	6907:13	11	update_output_file
LEAF_NODE	6907:32	6907:32	10	(
ARGUMENT	6907:33	6907:33	10	out
FIELD	6907:33	6907:33	11	out
LEAF_NODE	6907:33	6907:33	12	out
LEAF_NODE	6907:36	6907:36	10	,
ARGUMENT	6907:38	6907:38	10	mp
FIELD	6907:38	6907:38	11	mp
LEAF_NODE	6907:38	6907:38	12	mp
LEAF_NODE	6907:40	6907:40	10	,
ARGUMENT	6907:42	6907:42	10	autoindex
FIELD	6907:42	6907:42	11	autoindex
LEAF_NODE	6907:42	6907:42	12	autoindex
LEAF_NODE	6907:51	6907:51	10	,
ARGUMENT	6907:53	6907:53	10	filename
FIELD	6907:53	6907:53	11	filename
LEAF_NODE	6907:53	6907:53	12	filename
LEAF_NODE	6907:61	6907:61	10	,
ARGUMENT	6907:63	6907:63	10	page
FIELD	6907:63	6907:63	11	page
LEAF_NODE	6907:63	6907:63	12	page
LEAF_NODE	6907:67	6907:67	10	)
LEAF_NODE	6907:68	6907:68	7	)
STATEMENTS	6908:11	6908:11	7	
JUMP_STATEMENT	6908:11	6908:21	8	return ( 1 ) ;
KEYWORD	6908:11	6908:11	9	return
LEAF_NODE	6908:11	6908:11	10	return
DESTINATION	6908:18	6908:18	9	( 1 )
EXPR	6908:18	6908:20	10	( 1 )
LEAF_NODE	6908:18	6908:18	11	(
FIELD	6908:19	6908:19	11	1
LEAF_NODE	6908:19	6908:19	12	1
LEAF_NODE	6908:20	6908:20	11	)
LEAF_NODE	6908:21	6908:21	9	;
EXPR_STATEMENT	6909:9	6909:33	6	page_count = total_pages ;
EXPR	6909:9	6909:9	7	page_count = total_pages
ASSIGN	6909:9	6909:22	8	page_count = total_pages
LVAL	6909:9	6909:9	9	page_count
FIELD	6909:9	6909:9	10	page_count
LEAF_NODE	6909:9	6909:9	11	page_count
ASSIGN_OP	6909:20	6909:20	9	=
LEAF_NODE	6909:20	6909:20	10	=
RVAL	6909:22	6909:22	9	total_pages
FIELD	6909:22	6909:22	10	total_pages
LEAF_NODE	6909:22	6909:22	11	total_pages
LEAF_NODE	6909:33	6909:33	7	;
SELECTION	6910:9	6914:12	6	
KEYWORD	6910:9	6910:9	7	if
LEAF_NODE	6910:9	6910:9	8	if
LEAF_NODE	6910:12	6910:12	7	(
CONDITION	6910:13	6910:13	7	writeCroppedImage ( in , * out , image , dump , crop -> combined_width , crop -> combined_length , crop_buff , * page , total_pages )
EXPR	6910:13	6910:13	8	writeCroppedImage ( in , * out , image , dump , crop -> combined_width , crop -> combined_length , crop_buff , * page , total_pages )
FUNCTION_CALL	6910:13	6913:60	9	writeCroppedImage ( in , * out , image , dump , crop -> combined_width , crop -> combined_length , crop_buff , * page , total_pages )
CALLEE	6910:13	6910:13	10	writeCroppedImage
LEAF_NODE	6910:13	6910:13	11	writeCroppedImage
LEAF_NODE	6910:30	6910:30	10	(
ARGUMENT	6910:31	6910:31	10	in
FIELD	6910:31	6910:31	11	in
LEAF_NODE	6910:31	6910:31	12	in
LEAF_NODE	6910:33	6910:33	10	,
ARGUMENT	6910:35	6910:35	10	* out
UNARY_EXPR	6910:35	6910:36	11	* out
UNARY_OPERATOR	6910:35	6910:35	12	*
LEAF_NODE	6910:35	6910:35	13	*
FIELD	6910:36	6910:36	12	out
LEAF_NODE	6910:36	6910:36	13	out
LEAF_NODE	6910:39	6910:39	10	,
ARGUMENT	6910:41	6910:41	10	image
FIELD	6910:41	6910:41	11	image
LEAF_NODE	6910:41	6910:41	12	image
LEAF_NODE	6910:46	6910:46	10	,
ARGUMENT	6910:48	6910:48	10	dump
FIELD	6910:48	6910:48	11	dump
LEAF_NODE	6910:48	6910:48	12	dump
LEAF_NODE	6910:52	6910:52	10	,
ARGUMENT	6911:31	6911:31	10	crop -> combined_width
FIELD	6911:31	6911:37	11	crop -> combined_width
LEAF_NODE	6911:31	6911:31	12	crop
LEAF_NODE	6911:35	6911:35	12	->
LEAF_NODE	6911:37	6911:37	12	combined_width
LEAF_NODE	6911:51	6911:51	10	,
ARGUMENT	6912:31	6912:31	10	crop -> combined_length
FIELD	6912:31	6912:37	11	crop -> combined_length
LEAF_NODE	6912:31	6912:31	12	crop
LEAF_NODE	6912:35	6912:35	12	->
LEAF_NODE	6912:37	6912:37	12	combined_length
LEAF_NODE	6912:52	6912:52	10	,
ARGUMENT	6913:31	6913:31	10	crop_buff
FIELD	6913:31	6913:31	11	crop_buff
LEAF_NODE	6913:31	6913:31	12	crop_buff
LEAF_NODE	6913:40	6913:40	10	,
ARGUMENT	6913:42	6913:42	10	* page
UNARY_EXPR	6913:42	6913:43	11	* page
UNARY_OPERATOR	6913:42	6913:42	12	*
LEAF_NODE	6913:42	6913:42	13	*
FIELD	6913:43	6913:43	12	page
LEAF_NODE	6913:43	6913:43	13	page
LEAF_NODE	6913:47	6913:47	10	,
ARGUMENT	6913:49	6913:49	10	total_pages
FIELD	6913:49	6913:49	11	total_pages
LEAF_NODE	6913:49	6913:49	12	total_pages
LEAF_NODE	6913:60	6913:60	10	)
LEAF_NODE	6913:61	6913:61	7	)
STATEMENTS	6914:12	6917:13	7	
LEAF_NODE	6914:12	6914:12	8	{
STATEMENTS	6915:13	6916:13	8	
EXPR_STATEMENT	6915:13	6915:67	9	TIFFError ( "writeRegions" , "Unable to write new image" ) ;
EXPR	6915:13	6915:13	10	TIFFError ( "writeRegions" , "Unable to write new image" )
FUNCTION_CALL	6915:13	6915:66	11	TIFFError ( "writeRegions" , "Unable to write new image" )
CALLEE	6915:13	6915:13	12	TIFFError
LEAF_NODE	6915:13	6915:13	13	TIFFError
LEAF_NODE	6915:22	6915:22	12	(
ARGUMENT	6915:23	6915:23	12	"writeRegions"
FIELD	6915:23	6915:23	13	"writeRegions"
LEAF_NODE	6915:23	6915:23	14	"writeRegions"
LEAF_NODE	6915:37	6915:37	12	,
ARGUMENT	6915:39	6915:39	12	"Unable to write new image"
FIELD	6915:39	6915:39	13	"Unable to write new image"
LEAF_NODE	6915:39	6915:39	14	"Unable to write new image"
LEAF_NODE	6915:66	6915:66	12	)
LEAF_NODE	6915:67	6915:67	10	;
JUMP_STATEMENT	6916:13	6916:24	9	return ( - 1 ) ;
KEYWORD	6916:13	6916:13	10	return
LEAF_NODE	6916:13	6916:13	11	return
DESTINATION	6916:20	6916:20	10	( - 1 )
EXPR	6916:20	6916:23	11	( - 1 )
LEAF_NODE	6916:20	6916:20	12	(
UNARY_EXPR	6916:21	6916:22	12	- 1
UNARY_OPERATOR	6916:21	6916:21	13	-
LEAF_NODE	6916:21	6916:21	14	-
FIELD	6916:22	6916:22	13	1
LEAF_NODE	6916:22	6916:22	14	1
LEAF_NODE	6916:23	6916:23	12	)
LEAF_NODE	6916:24	6916:24	10	;
LEAF_NODE	6917:13	6917:13	8	}
JUMP_STATEMENT	6918:2	6918:7	6	break DESTINATION ;
KEYWORD	6918:2	6918:2	7	break
LEAF_NODE	6918:2	6918:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6918:7	6918:7	7	;
LABEL	6919:4	6919:27	6	case ONE_FILE_SEPARATED :
LEAF_NODE	6919:4	6919:4	7	case
LEAF_NODE	6919:9	6919:9	7	ONE_FILE_SEPARATED
LEAF_NODE	6919:27	6919:27	7	:
EXPR_STATEMENT	6920:9	6920:22	6	autoindex = 0 ;
EXPR	6920:9	6920:9	7	autoindex = 0
ASSIGN	6920:9	6920:21	8	autoindex = 0
LVAL	6920:9	6920:9	9	autoindex
FIELD	6920:9	6920:9	10	autoindex
LEAF_NODE	6920:9	6920:9	11	autoindex
ASSIGN_OP	6920:19	6920:19	9	=
LEAF_NODE	6920:19	6920:19	10	=
RVAL	6920:21	6920:21	9	0
FIELD	6920:21	6920:21	10	0
LEAF_NODE	6920:21	6920:21	11	0
LEAF_NODE	6920:22	6920:22	7	;
SELECTION	6921:9	6922:11	6	
KEYWORD	6921:9	6921:9	7	if
LEAF_NODE	6921:9	6921:9	8	if
LEAF_NODE	6921:12	6921:12	7	(
CONDITION	6921:13	6921:13	7	update_output_file ( out , mp , autoindex , filename , page )
EXPR	6921:13	6921:13	8	update_output_file ( out , mp , autoindex , filename , page )
FUNCTION_CALL	6921:13	6921:67	9	update_output_file ( out , mp , autoindex , filename , page )
CALLEE	6921:13	6921:13	10	update_output_file
LEAF_NODE	6921:13	6921:13	11	update_output_file
LEAF_NODE	6921:32	6921:32	10	(
ARGUMENT	6921:33	6921:33	10	out
FIELD	6921:33	6921:33	11	out
LEAF_NODE	6921:33	6921:33	12	out
LEAF_NODE	6921:36	6921:36	10	,
ARGUMENT	6921:38	6921:38	10	mp
FIELD	6921:38	6921:38	11	mp
LEAF_NODE	6921:38	6921:38	12	mp
LEAF_NODE	6921:40	6921:40	10	,
ARGUMENT	6921:42	6921:42	10	autoindex
FIELD	6921:42	6921:42	11	autoindex
LEAF_NODE	6921:42	6921:42	12	autoindex
LEAF_NODE	6921:51	6921:51	10	,
ARGUMENT	6921:53	6921:53	10	filename
FIELD	6921:53	6921:53	11	filename
LEAF_NODE	6921:53	6921:53	12	filename
LEAF_NODE	6921:61	6921:61	10	,
ARGUMENT	6921:63	6921:63	10	page
FIELD	6921:63	6921:63	11	page
LEAF_NODE	6921:63	6921:63	12	page
LEAF_NODE	6921:67	6921:67	10	)
LEAF_NODE	6921:68	6921:68	7	)
STATEMENTS	6922:11	6922:11	7	
JUMP_STATEMENT	6922:11	6922:21	8	return ( 1 ) ;
KEYWORD	6922:11	6922:11	9	return
LEAF_NODE	6922:11	6922:11	10	return
DESTINATION	6922:18	6922:18	9	( 1 )
EXPR	6922:18	6922:20	10	( 1 )
LEAF_NODE	6922:18	6922:18	11	(
FIELD	6922:19	6922:19	11	1
LEAF_NODE	6922:19	6922:19	12	1
LEAF_NODE	6922:20	6922:20	11	)
LEAF_NODE	6922:21	6922:21	9	;
EXPR_STATEMENT	6923:9	6923:52	6	page_count = crop -> selections * total_pages ;
EXPR	6923:9	6923:9	7	page_count = crop -> selections * total_pages
ASSIGN	6923:9	6923:22	8	page_count = crop -> selections * total_pages
LVAL	6923:9	6923:9	9	page_count
FIELD	6923:9	6923:9	10	page_count
LEAF_NODE	6923:9	6923:9	11	page_count
ASSIGN_OP	6923:20	6923:20	9	=
LEAF_NODE	6923:20	6923:20	10	=
RVAL	6923:22	6923:41	9	crop -> selections * total_pages
FIELD	6923:22	6923:28	10	crop -> selections
LEAF_NODE	6923:22	6923:22	11	crop
LEAF_NODE	6923:26	6923:26	11	->
LEAF_NODE	6923:28	6923:28	11	selections
LEAF_NODE	6923:39	6923:39	10	*
FIELD	6923:41	6923:41	10	total_pages
LEAF_NODE	6923:41	6923:41	11	total_pages
LEAF_NODE	6923:52	6923:52	7	;
ITERATION	6924:9	6925:11	6	
KEYWORD	6924:9	6924:9	7	for
LEAF_NODE	6924:9	6924:9	8	for
LEAF_NODE	6924:13	6924:13	7	(
FOR_INIT	6924:14	6924:19	7	i = 0 ;
EXPR	6924:14	6924:14	8	i = 0
ASSIGN	6924:14	6924:18	9	i = 0
LVAL	6924:14	6924:14	10	i
FIELD	6924:14	6924:14	11	i
LEAF_NODE	6924:14	6924:14	12	i
ASSIGN_OP	6924:16	6924:16	10	=
LEAF_NODE	6924:16	6924:16	11	=
RVAL	6924:18	6924:18	10	0
FIELD	6924:18	6924:18	11	0
LEAF_NODE	6924:18	6924:18	12	0
LEAF_NODE	6924:19	6924:19	8	;
CONDITION	6924:21	6924:21	7	i < crop -> selections
EXPR	6924:21	6924:25	8	i < crop -> selections
FIELD	6924:21	6924:21	9	i
LEAF_NODE	6924:21	6924:21	10	i
REL_OPERATOR	6924:23	6924:23	9	<
LEAF_NODE	6924:23	6924:23	10	<
FIELD	6924:25	6924:31	9	crop -> selections
LEAF_NODE	6924:25	6924:25	10	crop
LEAF_NODE	6924:29	6924:29	10	->
LEAF_NODE	6924:31	6924:31	10	selections
LEAF_NODE	6924:41	6924:41	7	;
FOR_EXPR	6924:43	6924:43	7	i ++
EXPR	6924:43	6924:43	8	i ++
FIELD	6924:43	6924:44	9	i ++
LEAF_NODE	6924:43	6924:43	10	i
LEAF_NODE	6924:44	6924:44	10	++
LEAF_NODE	6924:46	6924:46	7	)
STATEMENTS	6925:11	6935:4	7	
LEAF_NODE	6925:11	6925:11	8	{
STATEMENTS	6926:11	6927:11	8	
EXPR_STATEMENT	6926:11	6926:42	9	crop_buff = seg_buffs [ i ] . buffer ;
EXPR	6926:11	6926:11	10	crop_buff = seg_buffs [ i ] . buffer
ASSIGN	6926:11	6926:23	11	crop_buff = seg_buffs [ i ] . buffer
LVAL	6926:11	6926:11	12	crop_buff
FIELD	6926:11	6926:11	13	crop_buff
LEAF_NODE	6926:11	6926:11	14	crop_buff
ASSIGN_OP	6926:21	6926:21	12	=
LEAF_NODE	6926:21	6926:21	13	=
RVAL	6926:23	6926:23	12	seg_buffs [ i ] . buffer
FIELD	6926:23	6926:36	13	seg_buffs [ i ] . buffer
LEAF_NODE	6926:23	6926:23	14	seg_buffs
LEAF_NODE	6926:32	6926:32	14	[
EXPR	6926:33	6926:33	14	i
FIELD	6926:33	6926:33	15	i
LEAF_NODE	6926:33	6926:33	16	i
LEAF_NODE	6926:34	6926:34	14	]
LEAF_NODE	6926:35	6926:35	14	.
LEAF_NODE	6926:36	6926:36	14	buffer
LEAF_NODE	6926:42	6926:42	10	;
SELECTION	6927:11	6931:13	9	
KEYWORD	6927:11	6927:11	10	if
LEAF_NODE	6927:11	6927:11	11	if
LEAF_NODE	6927:14	6927:14	10	(
CONDITION	6927:15	6927:15	10	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
EXPR	6927:15	6927:15	11	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
FUNCTION_CALL	6927:15	6930:61	12	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
CALLEE	6927:15	6927:15	13	writeCroppedImage
LEAF_NODE	6927:15	6927:15	14	writeCroppedImage
LEAF_NODE	6927:32	6927:32	13	(
ARGUMENT	6927:33	6927:33	13	in
FIELD	6927:33	6927:33	14	in
LEAF_NODE	6927:33	6927:33	15	in
LEAF_NODE	6927:35	6927:35	13	,
ARGUMENT	6927:37	6927:37	13	* out
UNARY_EXPR	6927:37	6927:38	14	* out
UNARY_OPERATOR	6927:37	6927:37	15	*
LEAF_NODE	6927:37	6927:37	16	*
FIELD	6927:38	6927:38	15	out
LEAF_NODE	6927:38	6927:38	16	out
LEAF_NODE	6927:41	6927:41	13	,
ARGUMENT	6927:43	6927:43	13	image
FIELD	6927:43	6927:43	14	image
LEAF_NODE	6927:43	6927:43	15	image
LEAF_NODE	6927:48	6927:48	13	,
ARGUMENT	6927:50	6927:50	13	dump
FIELD	6927:50	6927:50	14	dump
LEAF_NODE	6927:50	6927:50	15	dump
LEAF_NODE	6927:54	6927:54	13	,
ARGUMENT	6928:33	6928:33	13	crop -> regionlist [ i ] . width
FIELD	6928:33	6928:53	14	crop -> regionlist [ i ] . width
LEAF_NODE	6928:33	6928:33	15	crop
LEAF_NODE	6928:37	6928:37	15	->
LEAF_NODE	6928:39	6928:39	15	regionlist
LEAF_NODE	6928:49	6928:49	15	[
EXPR	6928:50	6928:50	15	i
FIELD	6928:50	6928:50	16	i
LEAF_NODE	6928:50	6928:50	17	i
LEAF_NODE	6928:51	6928:51	15	]
LEAF_NODE	6928:52	6928:52	15	.
LEAF_NODE	6928:53	6928:53	15	width
LEAF_NODE	6928:58	6928:58	13	,
ARGUMENT	6929:33	6929:33	13	crop -> regionlist [ i ] . length
FIELD	6929:33	6929:53	14	crop -> regionlist [ i ] . length
LEAF_NODE	6929:33	6929:33	15	crop
LEAF_NODE	6929:37	6929:37	15	->
LEAF_NODE	6929:39	6929:39	15	regionlist
LEAF_NODE	6929:49	6929:49	15	[
EXPR	6929:50	6929:50	15	i
FIELD	6929:50	6929:50	16	i
LEAF_NODE	6929:50	6929:50	17	i
LEAF_NODE	6929:51	6929:51	15	]
LEAF_NODE	6929:52	6929:52	15	.
LEAF_NODE	6929:53	6929:53	15	length
LEAF_NODE	6929:59	6929:59	13	,
ARGUMENT	6930:33	6930:33	13	crop_buff
FIELD	6930:33	6930:33	14	crop_buff
LEAF_NODE	6930:33	6930:33	15	crop_buff
LEAF_NODE	6930:42	6930:42	13	,
ARGUMENT	6930:44	6930:44	13	* page
UNARY_EXPR	6930:44	6930:45	14	* page
UNARY_OPERATOR	6930:44	6930:44	15	*
LEAF_NODE	6930:44	6930:44	16	*
FIELD	6930:45	6930:45	15	page
LEAF_NODE	6930:45	6930:45	16	page
LEAF_NODE	6930:49	6930:49	13	,
ARGUMENT	6930:51	6930:51	13	page_count
FIELD	6930:51	6930:51	14	page_count
LEAF_NODE	6930:51	6930:51	15	page_count
LEAF_NODE	6930:61	6930:61	13	)
LEAF_NODE	6930:62	6930:62	10	)
STATEMENTS	6931:13	6934:13	10	
LEAF_NODE	6931:13	6931:13	11	{
STATEMENTS	6932:13	6933:13	11	
EXPR_STATEMENT	6932:13	6932:67	12	TIFFError ( "writeRegions" , "Unable to write new image" ) ;
EXPR	6932:13	6932:13	13	TIFFError ( "writeRegions" , "Unable to write new image" )
FUNCTION_CALL	6932:13	6932:66	14	TIFFError ( "writeRegions" , "Unable to write new image" )
CALLEE	6932:13	6932:13	15	TIFFError
LEAF_NODE	6932:13	6932:13	16	TIFFError
LEAF_NODE	6932:22	6932:22	15	(
ARGUMENT	6932:23	6932:23	15	"writeRegions"
FIELD	6932:23	6932:23	16	"writeRegions"
LEAF_NODE	6932:23	6932:23	17	"writeRegions"
LEAF_NODE	6932:37	6932:37	15	,
ARGUMENT	6932:39	6932:39	15	"Unable to write new image"
FIELD	6932:39	6932:39	16	"Unable to write new image"
LEAF_NODE	6932:39	6932:39	17	"Unable to write new image"
LEAF_NODE	6932:66	6932:66	15	)
LEAF_NODE	6932:67	6932:67	13	;
JUMP_STATEMENT	6933:13	6933:24	12	return ( - 1 ) ;
KEYWORD	6933:13	6933:13	13	return
LEAF_NODE	6933:13	6933:13	14	return
DESTINATION	6933:20	6933:20	13	( - 1 )
EXPR	6933:20	6933:23	14	( - 1 )
LEAF_NODE	6933:20	6933:20	15	(
UNARY_EXPR	6933:21	6933:22	15	- 1
UNARY_OPERATOR	6933:21	6933:21	16	-
LEAF_NODE	6933:21	6933:21	17	-
FIELD	6933:22	6933:22	16	1
LEAF_NODE	6933:22	6933:22	17	1
LEAF_NODE	6933:23	6933:23	15	)
LEAF_NODE	6933:24	6933:24	13	;
LEAF_NODE	6934:13	6934:13	11	}
LEAF_NODE	6935:4	6935:4	8	}
JUMP_STATEMENT	6936:9	6936:14	6	break DESTINATION ;
KEYWORD	6936:9	6936:9	7	break
LEAF_NODE	6936:9	6936:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6936:14	6936:14	7	;
LABEL	6937:4	6937:33	6	case FILE_PER_IMAGE_COMPOSITE :
LEAF_NODE	6937:4	6937:4	7	case
LEAF_NODE	6937:9	6937:9	7	FILE_PER_IMAGE_COMPOSITE
LEAF_NODE	6937:33	6937:33	7	:
EXPR_STATEMENT	6938:9	6938:22	6	autoindex = 1 ;
EXPR	6938:9	6938:9	7	autoindex = 1
ASSIGN	6938:9	6938:21	8	autoindex = 1
LVAL	6938:9	6938:9	9	autoindex
FIELD	6938:9	6938:9	10	autoindex
LEAF_NODE	6938:9	6938:9	11	autoindex
ASSIGN_OP	6938:19	6938:19	9	=
LEAF_NODE	6938:19	6938:19	10	=
RVAL	6938:21	6938:21	9	1
FIELD	6938:21	6938:21	10	1
LEAF_NODE	6938:21	6938:21	11	1
LEAF_NODE	6938:22	6938:22	7	;
SELECTION	6939:9	6940:11	6	
KEYWORD	6939:9	6939:9	7	if
LEAF_NODE	6939:9	6939:9	8	if
LEAF_NODE	6939:12	6939:12	7	(
CONDITION	6939:13	6939:13	7	update_output_file ( out , mp , autoindex , filename , page )
EXPR	6939:13	6939:13	8	update_output_file ( out , mp , autoindex , filename , page )
FUNCTION_CALL	6939:13	6939:67	9	update_output_file ( out , mp , autoindex , filename , page )
CALLEE	6939:13	6939:13	10	update_output_file
LEAF_NODE	6939:13	6939:13	11	update_output_file
LEAF_NODE	6939:32	6939:32	10	(
ARGUMENT	6939:33	6939:33	10	out
FIELD	6939:33	6939:33	11	out
LEAF_NODE	6939:33	6939:33	12	out
LEAF_NODE	6939:36	6939:36	10	,
ARGUMENT	6939:38	6939:38	10	mp
FIELD	6939:38	6939:38	11	mp
LEAF_NODE	6939:38	6939:38	12	mp
LEAF_NODE	6939:40	6939:40	10	,
ARGUMENT	6939:42	6939:42	10	autoindex
FIELD	6939:42	6939:42	11	autoindex
LEAF_NODE	6939:42	6939:42	12	autoindex
LEAF_NODE	6939:51	6939:51	10	,
ARGUMENT	6939:53	6939:53	10	filename
FIELD	6939:53	6939:53	11	filename
LEAF_NODE	6939:53	6939:53	12	filename
LEAF_NODE	6939:61	6939:61	10	,
ARGUMENT	6939:63	6939:63	10	page
FIELD	6939:63	6939:63	11	page
LEAF_NODE	6939:63	6939:63	12	page
LEAF_NODE	6939:67	6939:67	10	)
LEAF_NODE	6939:68	6939:68	7	)
STATEMENTS	6940:11	6940:11	7	
JUMP_STATEMENT	6940:11	6940:21	8	return ( 1 ) ;
KEYWORD	6940:11	6940:11	9	return
LEAF_NODE	6940:11	6940:11	10	return
DESTINATION	6940:18	6940:18	9	( 1 )
EXPR	6940:18	6940:20	10	( 1 )
LEAF_NODE	6940:18	6940:18	11	(
FIELD	6940:19	6940:19	11	1
LEAF_NODE	6940:19	6940:19	12	1
LEAF_NODE	6940:20	6940:20	11	)
LEAF_NODE	6940:21	6940:21	9	;
EXPR_STATEMENT	6942:9	6942:40	6	crop_buff = seg_buffs [ 0 ] . buffer ;
EXPR	6942:9	6942:9	7	crop_buff = seg_buffs [ 0 ] . buffer
ASSIGN	6942:9	6942:21	8	crop_buff = seg_buffs [ 0 ] . buffer
LVAL	6942:9	6942:9	9	crop_buff
FIELD	6942:9	6942:9	10	crop_buff
LEAF_NODE	6942:9	6942:9	11	crop_buff
ASSIGN_OP	6942:19	6942:19	9	=
LEAF_NODE	6942:19	6942:19	10	=
RVAL	6942:21	6942:21	9	seg_buffs [ 0 ] . buffer
FIELD	6942:21	6942:34	10	seg_buffs [ 0 ] . buffer
LEAF_NODE	6942:21	6942:21	11	seg_buffs
LEAF_NODE	6942:30	6942:30	11	[
EXPR	6942:31	6942:31	11	0
FIELD	6942:31	6942:31	12	0
LEAF_NODE	6942:31	6942:31	13	0
LEAF_NODE	6942:32	6942:32	11	]
LEAF_NODE	6942:33	6942:33	11	.
LEAF_NODE	6942:34	6942:34	11	buffer
LEAF_NODE	6942:40	6942:40	7	;
SELECTION	6943:9	6947:11	6	
KEYWORD	6943:9	6943:9	7	if
LEAF_NODE	6943:9	6943:9	8	if
LEAF_NODE	6943:12	6943:12	7	(
CONDITION	6943:13	6943:13	7	writeCroppedImage ( in , * out , image , dump , crop -> combined_width , crop -> combined_length , crop_buff , * page , total_pages )
EXPR	6943:13	6943:13	8	writeCroppedImage ( in , * out , image , dump , crop -> combined_width , crop -> combined_length , crop_buff , * page , total_pages )
FUNCTION_CALL	6943:13	6946:60	9	writeCroppedImage ( in , * out , image , dump , crop -> combined_width , crop -> combined_length , crop_buff , * page , total_pages )
CALLEE	6943:13	6943:13	10	writeCroppedImage
LEAF_NODE	6943:13	6943:13	11	writeCroppedImage
LEAF_NODE	6943:30	6943:30	10	(
ARGUMENT	6943:31	6943:31	10	in
FIELD	6943:31	6943:31	11	in
LEAF_NODE	6943:31	6943:31	12	in
LEAF_NODE	6943:33	6943:33	10	,
ARGUMENT	6943:35	6943:35	10	* out
UNARY_EXPR	6943:35	6943:36	11	* out
UNARY_OPERATOR	6943:35	6943:35	12	*
LEAF_NODE	6943:35	6943:35	13	*
FIELD	6943:36	6943:36	12	out
LEAF_NODE	6943:36	6943:36	13	out
LEAF_NODE	6943:39	6943:39	10	,
ARGUMENT	6943:41	6943:41	10	image
FIELD	6943:41	6943:41	11	image
LEAF_NODE	6943:41	6943:41	12	image
LEAF_NODE	6943:46	6943:46	10	,
ARGUMENT	6943:48	6943:48	10	dump
FIELD	6943:48	6943:48	11	dump
LEAF_NODE	6943:48	6943:48	12	dump
LEAF_NODE	6943:52	6943:52	10	,
ARGUMENT	6944:31	6944:31	10	crop -> combined_width
FIELD	6944:31	6944:37	11	crop -> combined_width
LEAF_NODE	6944:31	6944:31	12	crop
LEAF_NODE	6944:35	6944:35	12	->
LEAF_NODE	6944:37	6944:37	12	combined_width
LEAF_NODE	6944:51	6944:51	10	,
ARGUMENT	6945:31	6945:31	10	crop -> combined_length
FIELD	6945:31	6945:37	11	crop -> combined_length
LEAF_NODE	6945:31	6945:31	12	crop
LEAF_NODE	6945:35	6945:35	12	->
LEAF_NODE	6945:37	6945:37	12	combined_length
LEAF_NODE	6945:52	6945:52	10	,
ARGUMENT	6946:31	6946:31	10	crop_buff
FIELD	6946:31	6946:31	11	crop_buff
LEAF_NODE	6946:31	6946:31	12	crop_buff
LEAF_NODE	6946:40	6946:40	10	,
ARGUMENT	6946:42	6946:42	10	* page
UNARY_EXPR	6946:42	6946:43	11	* page
UNARY_OPERATOR	6946:42	6946:42	12	*
LEAF_NODE	6946:42	6946:42	13	*
FIELD	6946:43	6946:43	12	page
LEAF_NODE	6946:43	6946:43	13	page
LEAF_NODE	6946:47	6946:47	10	,
ARGUMENT	6946:49	6946:49	10	total_pages
FIELD	6946:49	6946:49	11	total_pages
LEAF_NODE	6946:49	6946:49	12	total_pages
LEAF_NODE	6946:60	6946:60	10	)
LEAF_NODE	6946:61	6946:61	7	)
STATEMENTS	6947:11	6950:11	7	
LEAF_NODE	6947:11	6947:11	8	{
STATEMENTS	6948:11	6949:11	8	
EXPR_STATEMENT	6948:11	6948:65	9	TIFFError ( "writeRegions" , "Unable to write new image" ) ;
EXPR	6948:11	6948:11	10	TIFFError ( "writeRegions" , "Unable to write new image" )
FUNCTION_CALL	6948:11	6948:64	11	TIFFError ( "writeRegions" , "Unable to write new image" )
CALLEE	6948:11	6948:11	12	TIFFError
LEAF_NODE	6948:11	6948:11	13	TIFFError
LEAF_NODE	6948:20	6948:20	12	(
ARGUMENT	6948:21	6948:21	12	"writeRegions"
FIELD	6948:21	6948:21	13	"writeRegions"
LEAF_NODE	6948:21	6948:21	14	"writeRegions"
LEAF_NODE	6948:35	6948:35	12	,
ARGUMENT	6948:37	6948:37	12	"Unable to write new image"
FIELD	6948:37	6948:37	13	"Unable to write new image"
LEAF_NODE	6948:37	6948:37	14	"Unable to write new image"
LEAF_NODE	6948:64	6948:64	12	)
LEAF_NODE	6948:65	6948:65	10	;
JUMP_STATEMENT	6949:11	6949:22	9	return ( - 1 ) ;
KEYWORD	6949:11	6949:11	10	return
LEAF_NODE	6949:11	6949:11	11	return
DESTINATION	6949:18	6949:18	10	( - 1 )
EXPR	6949:18	6949:21	11	( - 1 )
LEAF_NODE	6949:18	6949:18	12	(
UNARY_EXPR	6949:19	6949:20	12	- 1
UNARY_OPERATOR	6949:19	6949:19	13	-
LEAF_NODE	6949:19	6949:19	14	-
FIELD	6949:20	6949:20	13	1
LEAF_NODE	6949:20	6949:20	14	1
LEAF_NODE	6949:21	6949:21	12	)
LEAF_NODE	6949:22	6949:22	10	;
LEAF_NODE	6950:11	6950:11	8	}
JUMP_STATEMENT	6951:9	6951:14	6	break DESTINATION ;
KEYWORD	6951:9	6951:9	7	break
LEAF_NODE	6951:9	6951:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6951:14	6951:14	7	;
LABEL	6952:4	6952:33	6	case FILE_PER_IMAGE_SEPARATED :
LEAF_NODE	6952:4	6952:4	7	case
LEAF_NODE	6952:9	6952:9	7	FILE_PER_IMAGE_SEPARATED
LEAF_NODE	6952:33	6952:33	7	:
EXPR_STATEMENT	6953:9	6953:22	6	autoindex = 1 ;
EXPR	6953:9	6953:9	7	autoindex = 1
ASSIGN	6953:9	6953:21	8	autoindex = 1
LVAL	6953:9	6953:9	9	autoindex
FIELD	6953:9	6953:9	10	autoindex
LEAF_NODE	6953:9	6953:9	11	autoindex
ASSIGN_OP	6953:19	6953:19	9	=
LEAF_NODE	6953:19	6953:19	10	=
RVAL	6953:21	6953:21	9	1
FIELD	6953:21	6953:21	10	1
LEAF_NODE	6953:21	6953:21	11	1
LEAF_NODE	6953:22	6953:22	7	;
EXPR_STATEMENT	6954:9	6954:38	6	page_count = crop -> selections ;
EXPR	6954:9	6954:9	7	page_count = crop -> selections
ASSIGN	6954:9	6954:22	8	page_count = crop -> selections
LVAL	6954:9	6954:9	9	page_count
FIELD	6954:9	6954:9	10	page_count
LEAF_NODE	6954:9	6954:9	11	page_count
ASSIGN_OP	6954:20	6954:20	9	=
LEAF_NODE	6954:20	6954:20	10	=
RVAL	6954:22	6954:22	9	crop -> selections
FIELD	6954:22	6954:28	10	crop -> selections
LEAF_NODE	6954:22	6954:22	11	crop
LEAF_NODE	6954:26	6954:26	11	->
LEAF_NODE	6954:28	6954:28	11	selections
LEAF_NODE	6954:38	6954:38	7	;
SELECTION	6955:9	6956:11	6	
KEYWORD	6955:9	6955:9	7	if
LEAF_NODE	6955:9	6955:9	8	if
LEAF_NODE	6955:12	6955:12	7	(
CONDITION	6955:13	6955:13	7	update_output_file ( out , mp , autoindex , filename , page )
EXPR	6955:13	6955:13	8	update_output_file ( out , mp , autoindex , filename , page )
FUNCTION_CALL	6955:13	6955:67	9	update_output_file ( out , mp , autoindex , filename , page )
CALLEE	6955:13	6955:13	10	update_output_file
LEAF_NODE	6955:13	6955:13	11	update_output_file
LEAF_NODE	6955:32	6955:32	10	(
ARGUMENT	6955:33	6955:33	10	out
FIELD	6955:33	6955:33	11	out
LEAF_NODE	6955:33	6955:33	12	out
LEAF_NODE	6955:36	6955:36	10	,
ARGUMENT	6955:38	6955:38	10	mp
FIELD	6955:38	6955:38	11	mp
LEAF_NODE	6955:38	6955:38	12	mp
LEAF_NODE	6955:40	6955:40	10	,
ARGUMENT	6955:42	6955:42	10	autoindex
FIELD	6955:42	6955:42	11	autoindex
LEAF_NODE	6955:42	6955:42	12	autoindex
LEAF_NODE	6955:51	6955:51	10	,
ARGUMENT	6955:53	6955:53	10	filename
FIELD	6955:53	6955:53	11	filename
LEAF_NODE	6955:53	6955:53	12	filename
LEAF_NODE	6955:61	6955:61	10	,
ARGUMENT	6955:63	6955:63	10	page
FIELD	6955:63	6955:63	11	page
LEAF_NODE	6955:63	6955:63	12	page
LEAF_NODE	6955:67	6955:67	10	)
LEAF_NODE	6955:68	6955:68	7	)
STATEMENTS	6956:11	6956:11	7	
JUMP_STATEMENT	6956:11	6956:21	8	return ( 1 ) ;
KEYWORD	6956:11	6956:11	9	return
LEAF_NODE	6956:11	6956:11	10	return
DESTINATION	6956:18	6956:18	9	( 1 )
EXPR	6956:18	6956:20	10	( 1 )
LEAF_NODE	6956:18	6956:18	11	(
FIELD	6956:19	6956:19	11	1
LEAF_NODE	6956:19	6956:19	12	1
LEAF_NODE	6956:20	6956:20	11	)
LEAF_NODE	6956:21	6956:21	9	;
ITERATION	6958:9	6959:11	6	
KEYWORD	6958:9	6958:9	7	for
LEAF_NODE	6958:9	6958:9	8	for
LEAF_NODE	6958:13	6958:13	7	(
FOR_INIT	6958:14	6958:19	7	i = 0 ;
EXPR	6958:14	6958:14	8	i = 0
ASSIGN	6958:14	6958:18	9	i = 0
LVAL	6958:14	6958:14	10	i
FIELD	6958:14	6958:14	11	i
LEAF_NODE	6958:14	6958:14	12	i
ASSIGN_OP	6958:16	6958:16	10	=
LEAF_NODE	6958:16	6958:16	11	=
RVAL	6958:18	6958:18	10	0
FIELD	6958:18	6958:18	11	0
LEAF_NODE	6958:18	6958:18	12	0
LEAF_NODE	6958:19	6958:19	8	;
CONDITION	6958:21	6958:21	7	i < crop -> selections
EXPR	6958:21	6958:25	8	i < crop -> selections
FIELD	6958:21	6958:21	9	i
LEAF_NODE	6958:21	6958:21	10	i
REL_OPERATOR	6958:23	6958:23	9	<
LEAF_NODE	6958:23	6958:23	10	<
FIELD	6958:25	6958:31	9	crop -> selections
LEAF_NODE	6958:25	6958:25	10	crop
LEAF_NODE	6958:29	6958:29	10	->
LEAF_NODE	6958:31	6958:31	10	selections
LEAF_NODE	6958:41	6958:41	7	;
FOR_EXPR	6958:43	6958:43	7	i ++
EXPR	6958:43	6958:43	8	i ++
FIELD	6958:43	6958:44	9	i ++
LEAF_NODE	6958:43	6958:43	10	i
LEAF_NODE	6958:44	6958:44	10	++
LEAF_NODE	6958:46	6958:46	7	)
STATEMENTS	6959:11	6970:11	7	
LEAF_NODE	6959:11	6959:11	8	{
STATEMENTS	6960:11	6962:11	8	
EXPR_STATEMENT	6960:11	6960:42	9	crop_buff = seg_buffs [ i ] . buffer ;
EXPR	6960:11	6960:11	10	crop_buff = seg_buffs [ i ] . buffer
ASSIGN	6960:11	6960:23	11	crop_buff = seg_buffs [ i ] . buffer
LVAL	6960:11	6960:11	12	crop_buff
FIELD	6960:11	6960:11	13	crop_buff
LEAF_NODE	6960:11	6960:11	14	crop_buff
ASSIGN_OP	6960:21	6960:21	12	=
LEAF_NODE	6960:21	6960:21	13	=
RVAL	6960:23	6960:23	12	seg_buffs [ i ] . buffer
FIELD	6960:23	6960:36	13	seg_buffs [ i ] . buffer
LEAF_NODE	6960:23	6960:23	14	seg_buffs
LEAF_NODE	6960:32	6960:32	14	[
EXPR	6960:33	6960:33	14	i
FIELD	6960:33	6960:33	15	i
LEAF_NODE	6960:33	6960:33	16	i
LEAF_NODE	6960:34	6960:34	14	]
LEAF_NODE	6960:35	6960:35	14	.
LEAF_NODE	6960:36	6960:36	14	buffer
LEAF_NODE	6960:42	6960:42	10	;
SELECTION	6962:11	6966:13	9	
KEYWORD	6962:11	6962:11	10	if
LEAF_NODE	6962:11	6962:11	11	if
LEAF_NODE	6962:14	6962:14	10	(
CONDITION	6962:15	6962:15	10	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
EXPR	6962:15	6962:15	11	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
FUNCTION_CALL	6962:15	6965:61	12	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
CALLEE	6962:15	6962:15	13	writeCroppedImage
LEAF_NODE	6962:15	6962:15	14	writeCroppedImage
LEAF_NODE	6962:32	6962:32	13	(
ARGUMENT	6962:33	6962:33	13	in
FIELD	6962:33	6962:33	14	in
LEAF_NODE	6962:33	6962:33	15	in
LEAF_NODE	6962:35	6962:35	13	,
ARGUMENT	6962:37	6962:37	13	* out
UNARY_EXPR	6962:37	6962:38	14	* out
UNARY_OPERATOR	6962:37	6962:37	15	*
LEAF_NODE	6962:37	6962:37	16	*
FIELD	6962:38	6962:38	15	out
LEAF_NODE	6962:38	6962:38	16	out
LEAF_NODE	6962:41	6962:41	13	,
ARGUMENT	6962:43	6962:43	13	image
FIELD	6962:43	6962:43	14	image
LEAF_NODE	6962:43	6962:43	15	image
LEAF_NODE	6962:48	6962:48	13	,
ARGUMENT	6962:50	6962:50	13	dump
FIELD	6962:50	6962:50	14	dump
LEAF_NODE	6962:50	6962:50	15	dump
LEAF_NODE	6962:54	6962:54	13	,
ARGUMENT	6963:33	6963:33	13	crop -> regionlist [ i ] . width
FIELD	6963:33	6963:53	14	crop -> regionlist [ i ] . width
LEAF_NODE	6963:33	6963:33	15	crop
LEAF_NODE	6963:37	6963:37	15	->
LEAF_NODE	6963:39	6963:39	15	regionlist
LEAF_NODE	6963:49	6963:49	15	[
EXPR	6963:50	6963:50	15	i
FIELD	6963:50	6963:50	16	i
LEAF_NODE	6963:50	6963:50	17	i
LEAF_NODE	6963:51	6963:51	15	]
LEAF_NODE	6963:52	6963:52	15	.
LEAF_NODE	6963:53	6963:53	15	width
LEAF_NODE	6963:58	6963:58	13	,
ARGUMENT	6964:33	6964:33	13	crop -> regionlist [ i ] . length
FIELD	6964:33	6964:53	14	crop -> regionlist [ i ] . length
LEAF_NODE	6964:33	6964:33	15	crop
LEAF_NODE	6964:37	6964:37	15	->
LEAF_NODE	6964:39	6964:39	15	regionlist
LEAF_NODE	6964:49	6964:49	15	[
EXPR	6964:50	6964:50	15	i
FIELD	6964:50	6964:50	16	i
LEAF_NODE	6964:50	6964:50	17	i
LEAF_NODE	6964:51	6964:51	15	]
LEAF_NODE	6964:52	6964:52	15	.
LEAF_NODE	6964:53	6964:53	15	length
LEAF_NODE	6964:59	6964:59	13	,
ARGUMENT	6965:33	6965:33	13	crop_buff
FIELD	6965:33	6965:33	14	crop_buff
LEAF_NODE	6965:33	6965:33	15	crop_buff
LEAF_NODE	6965:42	6965:42	13	,
ARGUMENT	6965:44	6965:44	13	* page
UNARY_EXPR	6965:44	6965:45	14	* page
UNARY_OPERATOR	6965:44	6965:44	15	*
LEAF_NODE	6965:44	6965:44	16	*
FIELD	6965:45	6965:45	15	page
LEAF_NODE	6965:45	6965:45	16	page
LEAF_NODE	6965:49	6965:49	13	,
ARGUMENT	6965:51	6965:51	13	page_count
FIELD	6965:51	6965:51	14	page_count
LEAF_NODE	6965:51	6965:51	15	page_count
LEAF_NODE	6965:61	6965:61	13	)
LEAF_NODE	6965:62	6965:62	10	)
STATEMENTS	6966:13	6969:13	10	
LEAF_NODE	6966:13	6966:13	11	{
STATEMENTS	6967:13	6968:13	11	
EXPR_STATEMENT	6967:13	6967:67	12	TIFFError ( "writeRegions" , "Unable to write new image" ) ;
EXPR	6967:13	6967:13	13	TIFFError ( "writeRegions" , "Unable to write new image" )
FUNCTION_CALL	6967:13	6967:66	14	TIFFError ( "writeRegions" , "Unable to write new image" )
CALLEE	6967:13	6967:13	15	TIFFError
LEAF_NODE	6967:13	6967:13	16	TIFFError
LEAF_NODE	6967:22	6967:22	15	(
ARGUMENT	6967:23	6967:23	15	"writeRegions"
FIELD	6967:23	6967:23	16	"writeRegions"
LEAF_NODE	6967:23	6967:23	17	"writeRegions"
LEAF_NODE	6967:37	6967:37	15	,
ARGUMENT	6967:39	6967:39	15	"Unable to write new image"
FIELD	6967:39	6967:39	16	"Unable to write new image"
LEAF_NODE	6967:39	6967:39	17	"Unable to write new image"
LEAF_NODE	6967:66	6967:66	15	)
LEAF_NODE	6967:67	6967:67	13	;
JUMP_STATEMENT	6968:13	6968:24	12	return ( - 1 ) ;
KEYWORD	6968:13	6968:13	13	return
LEAF_NODE	6968:13	6968:13	14	return
DESTINATION	6968:20	6968:20	13	( - 1 )
EXPR	6968:20	6968:23	14	( - 1 )
LEAF_NODE	6968:20	6968:20	15	(
UNARY_EXPR	6968:21	6968:22	15	- 1
UNARY_OPERATOR	6968:21	6968:21	16	-
LEAF_NODE	6968:21	6968:21	17	-
FIELD	6968:22	6968:22	16	1
LEAF_NODE	6968:22	6968:22	17	1
LEAF_NODE	6968:23	6968:23	15	)
LEAF_NODE	6968:24	6968:24	13	;
LEAF_NODE	6969:13	6969:13	11	}
LEAF_NODE	6970:11	6970:11	8	}
JUMP_STATEMENT	6971:9	6971:14	6	break DESTINATION ;
KEYWORD	6971:9	6971:9	7	break
LEAF_NODE	6971:9	6971:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6971:14	6971:14	7	;
LABEL	6972:4	6972:27	6	case FILE_PER_SELECTION :
LEAF_NODE	6972:4	6972:4	7	case
LEAF_NODE	6972:9	6972:9	7	FILE_PER_SELECTION
LEAF_NODE	6972:27	6972:27	7	:
EXPR_STATEMENT	6973:9	6973:22	6	autoindex = 1 ;
EXPR	6973:9	6973:9	7	autoindex = 1
ASSIGN	6973:9	6973:21	8	autoindex = 1
LVAL	6973:9	6973:9	9	autoindex
FIELD	6973:9	6973:9	10	autoindex
LEAF_NODE	6973:9	6973:9	11	autoindex
ASSIGN_OP	6973:19	6973:19	9	=
LEAF_NODE	6973:19	6973:19	10	=
RVAL	6973:21	6973:21	9	1
FIELD	6973:21	6973:21	10	1
LEAF_NODE	6973:21	6973:21	11	1
LEAF_NODE	6973:22	6973:22	7	;
EXPR_STATEMENT	6974:2	6974:16	6	page_count = 1 ;
EXPR	6974:2	6974:2	7	page_count = 1
ASSIGN	6974:2	6974:15	8	page_count = 1
LVAL	6974:2	6974:2	9	page_count
FIELD	6974:2	6974:2	10	page_count
LEAF_NODE	6974:2	6974:2	11	page_count
ASSIGN_OP	6974:13	6974:13	9	=
LEAF_NODE	6974:13	6974:13	10	=
RVAL	6974:15	6974:15	9	1
FIELD	6974:15	6974:15	10	1
LEAF_NODE	6974:15	6974:15	11	1
LEAF_NODE	6974:16	6974:16	7	;
ITERATION	6975:9	6976:11	6	
KEYWORD	6975:9	6975:9	7	for
LEAF_NODE	6975:9	6975:9	8	for
LEAF_NODE	6975:13	6975:13	7	(
FOR_INIT	6975:14	6975:19	7	i = 0 ;
EXPR	6975:14	6975:14	8	i = 0
ASSIGN	6975:14	6975:18	9	i = 0
LVAL	6975:14	6975:14	10	i
FIELD	6975:14	6975:14	11	i
LEAF_NODE	6975:14	6975:14	12	i
ASSIGN_OP	6975:16	6975:16	10	=
LEAF_NODE	6975:16	6975:16	11	=
RVAL	6975:18	6975:18	10	0
FIELD	6975:18	6975:18	11	0
LEAF_NODE	6975:18	6975:18	12	0
LEAF_NODE	6975:19	6975:19	8	;
CONDITION	6975:21	6975:21	7	i < crop -> selections
EXPR	6975:21	6975:25	8	i < crop -> selections
FIELD	6975:21	6975:21	9	i
LEAF_NODE	6975:21	6975:21	10	i
REL_OPERATOR	6975:23	6975:23	9	<
LEAF_NODE	6975:23	6975:23	10	<
FIELD	6975:25	6975:31	9	crop -> selections
LEAF_NODE	6975:25	6975:25	10	crop
LEAF_NODE	6975:29	6975:29	10	->
LEAF_NODE	6975:31	6975:31	10	selections
LEAF_NODE	6975:41	6975:41	7	;
FOR_EXPR	6975:43	6975:43	7	i ++
EXPR	6975:43	6975:43	8	i ++
FIELD	6975:43	6975:44	9	i ++
LEAF_NODE	6975:43	6975:43	10	i
LEAF_NODE	6975:44	6975:44	10	++
LEAF_NODE	6975:46	6975:46	7	)
STATEMENTS	6976:11	6990:11	7	
LEAF_NODE	6976:11	6976:11	8	{
STATEMENTS	6977:11	6982:11	8	
SELECTION	6977:11	6978:13	9	
KEYWORD	6977:11	6977:11	10	if
LEAF_NODE	6977:11	6977:11	11	if
LEAF_NODE	6977:14	6977:14	10	(
CONDITION	6977:15	6977:15	10	update_output_file ( out , mp , autoindex , filename , page )
EXPR	6977:15	6977:15	11	update_output_file ( out , mp , autoindex , filename , page )
FUNCTION_CALL	6977:15	6977:69	12	update_output_file ( out , mp , autoindex , filename , page )
CALLEE	6977:15	6977:15	13	update_output_file
LEAF_NODE	6977:15	6977:15	14	update_output_file
LEAF_NODE	6977:34	6977:34	13	(
ARGUMENT	6977:35	6977:35	13	out
FIELD	6977:35	6977:35	14	out
LEAF_NODE	6977:35	6977:35	15	out
LEAF_NODE	6977:38	6977:38	13	,
ARGUMENT	6977:40	6977:40	13	mp
FIELD	6977:40	6977:40	14	mp
LEAF_NODE	6977:40	6977:40	15	mp
LEAF_NODE	6977:42	6977:42	13	,
ARGUMENT	6977:44	6977:44	13	autoindex
FIELD	6977:44	6977:44	14	autoindex
LEAF_NODE	6977:44	6977:44	15	autoindex
LEAF_NODE	6977:53	6977:53	13	,
ARGUMENT	6977:55	6977:55	13	filename
FIELD	6977:55	6977:55	14	filename
LEAF_NODE	6977:55	6977:55	15	filename
LEAF_NODE	6977:63	6977:63	13	,
ARGUMENT	6977:65	6977:65	13	page
FIELD	6977:65	6977:65	14	page
LEAF_NODE	6977:65	6977:65	15	page
LEAF_NODE	6977:69	6977:69	13	)
LEAF_NODE	6977:70	6977:70	10	)
STATEMENTS	6978:13	6978:13	10	
JUMP_STATEMENT	6978:13	6978:23	11	return ( 1 ) ;
KEYWORD	6978:13	6978:13	12	return
LEAF_NODE	6978:13	6978:13	13	return
DESTINATION	6978:20	6978:20	12	( 1 )
EXPR	6978:20	6978:22	13	( 1 )
LEAF_NODE	6978:20	6978:20	14	(
FIELD	6978:21	6978:21	14	1
LEAF_NODE	6978:21	6978:21	15	1
LEAF_NODE	6978:22	6978:22	14	)
LEAF_NODE	6978:23	6978:23	12	;
EXPR_STATEMENT	6980:11	6980:42	9	crop_buff = seg_buffs [ i ] . buffer ;
EXPR	6980:11	6980:11	10	crop_buff = seg_buffs [ i ] . buffer
ASSIGN	6980:11	6980:23	11	crop_buff = seg_buffs [ i ] . buffer
LVAL	6980:11	6980:11	12	crop_buff
FIELD	6980:11	6980:11	13	crop_buff
LEAF_NODE	6980:11	6980:11	14	crop_buff
ASSIGN_OP	6980:21	6980:21	12	=
LEAF_NODE	6980:21	6980:21	13	=
RVAL	6980:23	6980:23	12	seg_buffs [ i ] . buffer
FIELD	6980:23	6980:36	13	seg_buffs [ i ] . buffer
LEAF_NODE	6980:23	6980:23	14	seg_buffs
LEAF_NODE	6980:32	6980:32	14	[
EXPR	6980:33	6980:33	14	i
FIELD	6980:33	6980:33	15	i
LEAF_NODE	6980:33	6980:33	16	i
LEAF_NODE	6980:34	6980:34	14	]
LEAF_NODE	6980:35	6980:35	14	.
LEAF_NODE	6980:36	6980:36	14	buffer
LEAF_NODE	6980:42	6980:42	10	;
SELECTION	6982:11	6986:13	9	
KEYWORD	6982:11	6982:11	10	if
LEAF_NODE	6982:11	6982:11	11	if
LEAF_NODE	6982:14	6982:14	10	(
CONDITION	6982:15	6982:15	10	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
EXPR	6982:15	6982:15	11	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
FUNCTION_CALL	6982:15	6985:61	12	writeCroppedImage ( in , * out , image , dump , crop -> regionlist [ i ] . width , crop -> regionlist [ i ] . length , crop_buff , * page , page_count )
CALLEE	6982:15	6982:15	13	writeCroppedImage
LEAF_NODE	6982:15	6982:15	14	writeCroppedImage
LEAF_NODE	6982:32	6982:32	13	(
ARGUMENT	6982:33	6982:33	13	in
FIELD	6982:33	6982:33	14	in
LEAF_NODE	6982:33	6982:33	15	in
LEAF_NODE	6982:35	6982:35	13	,
ARGUMENT	6982:37	6982:37	13	* out
UNARY_EXPR	6982:37	6982:38	14	* out
UNARY_OPERATOR	6982:37	6982:37	15	*
LEAF_NODE	6982:37	6982:37	16	*
FIELD	6982:38	6982:38	15	out
LEAF_NODE	6982:38	6982:38	16	out
LEAF_NODE	6982:41	6982:41	13	,
ARGUMENT	6982:43	6982:43	13	image
FIELD	6982:43	6982:43	14	image
LEAF_NODE	6982:43	6982:43	15	image
LEAF_NODE	6982:48	6982:48	13	,
ARGUMENT	6982:50	6982:50	13	dump
FIELD	6982:50	6982:50	14	dump
LEAF_NODE	6982:50	6982:50	15	dump
LEAF_NODE	6982:54	6982:54	13	,
ARGUMENT	6983:33	6983:33	13	crop -> regionlist [ i ] . width
FIELD	6983:33	6983:53	14	crop -> regionlist [ i ] . width
LEAF_NODE	6983:33	6983:33	15	crop
LEAF_NODE	6983:37	6983:37	15	->
LEAF_NODE	6983:39	6983:39	15	regionlist
LEAF_NODE	6983:49	6983:49	15	[
EXPR	6983:50	6983:50	15	i
FIELD	6983:50	6983:50	16	i
LEAF_NODE	6983:50	6983:50	17	i
LEAF_NODE	6983:51	6983:51	15	]
LEAF_NODE	6983:52	6983:52	15	.
LEAF_NODE	6983:53	6983:53	15	width
LEAF_NODE	6983:58	6983:58	13	,
ARGUMENT	6984:33	6984:33	13	crop -> regionlist [ i ] . length
FIELD	6984:33	6984:53	14	crop -> regionlist [ i ] . length
LEAF_NODE	6984:33	6984:33	15	crop
LEAF_NODE	6984:37	6984:37	15	->
LEAF_NODE	6984:39	6984:39	15	regionlist
LEAF_NODE	6984:49	6984:49	15	[
EXPR	6984:50	6984:50	15	i
FIELD	6984:50	6984:50	16	i
LEAF_NODE	6984:50	6984:50	17	i
LEAF_NODE	6984:51	6984:51	15	]
LEAF_NODE	6984:52	6984:52	15	.
LEAF_NODE	6984:53	6984:53	15	length
LEAF_NODE	6984:59	6984:59	13	,
ARGUMENT	6985:33	6985:33	13	crop_buff
FIELD	6985:33	6985:33	14	crop_buff
LEAF_NODE	6985:33	6985:33	15	crop_buff
LEAF_NODE	6985:42	6985:42	13	,
ARGUMENT	6985:44	6985:44	13	* page
UNARY_EXPR	6985:44	6985:45	14	* page
UNARY_OPERATOR	6985:44	6985:44	15	*
LEAF_NODE	6985:44	6985:44	16	*
FIELD	6985:45	6985:45	15	page
LEAF_NODE	6985:45	6985:45	16	page
LEAF_NODE	6985:49	6985:49	13	,
ARGUMENT	6985:51	6985:51	13	page_count
FIELD	6985:51	6985:51	14	page_count
LEAF_NODE	6985:51	6985:51	15	page_count
LEAF_NODE	6985:61	6985:61	13	)
LEAF_NODE	6985:62	6985:62	10	)
STATEMENTS	6986:13	6989:13	10	
LEAF_NODE	6986:13	6986:13	11	{
STATEMENTS	6987:13	6988:13	11	
EXPR_STATEMENT	6987:13	6987:67	12	TIFFError ( "writeRegions" , "Unable to write new image" ) ;
EXPR	6987:13	6987:13	13	TIFFError ( "writeRegions" , "Unable to write new image" )
FUNCTION_CALL	6987:13	6987:66	14	TIFFError ( "writeRegions" , "Unable to write new image" )
CALLEE	6987:13	6987:13	15	TIFFError
LEAF_NODE	6987:13	6987:13	16	TIFFError
LEAF_NODE	6987:22	6987:22	15	(
ARGUMENT	6987:23	6987:23	15	"writeRegions"
FIELD	6987:23	6987:23	16	"writeRegions"
LEAF_NODE	6987:23	6987:23	17	"writeRegions"
LEAF_NODE	6987:37	6987:37	15	,
ARGUMENT	6987:39	6987:39	15	"Unable to write new image"
FIELD	6987:39	6987:39	16	"Unable to write new image"
LEAF_NODE	6987:39	6987:39	17	"Unable to write new image"
LEAF_NODE	6987:66	6987:66	15	)
LEAF_NODE	6987:67	6987:67	13	;
JUMP_STATEMENT	6988:13	6988:24	12	return ( - 1 ) ;
KEYWORD	6988:13	6988:13	13	return
LEAF_NODE	6988:13	6988:13	14	return
DESTINATION	6988:20	6988:20	13	( - 1 )
EXPR	6988:20	6988:23	14	( - 1 )
LEAF_NODE	6988:20	6988:20	15	(
UNARY_EXPR	6988:21	6988:22	15	- 1
UNARY_OPERATOR	6988:21	6988:21	16	-
LEAF_NODE	6988:21	6988:21	17	-
FIELD	6988:22	6988:22	16	1
LEAF_NODE	6988:22	6988:22	17	1
LEAF_NODE	6988:23	6988:23	15	)
LEAF_NODE	6988:24	6988:24	13	;
LEAF_NODE	6989:13	6989:13	11	}
LEAF_NODE	6990:11	6990:11	8	}
JUMP_STATEMENT	6991:2	6991:7	6	break DESTINATION ;
KEYWORD	6991:2	6991:2	7	break
LEAF_NODE	6991:2	6991:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	6991:7	6991:7	7	;
LABEL	6992:4	6992:11	6	default :
LEAF_NODE	6992:4	6992:4	7	default
LEAF_NODE	6992:11	6992:11	7	:
JUMP_STATEMENT	6992:13	6992:23	6	return ( 1 ) ;
KEYWORD	6992:13	6992:13	7	return
LEAF_NODE	6992:13	6992:13	8	return
DESTINATION	6992:20	6992:20	7	( 1 )
EXPR	6992:20	6992:22	8	( 1 )
LEAF_NODE	6992:20	6992:20	9	(
FIELD	6992:21	6992:21	9	1
LEAF_NODE	6992:21	6992:21	10	1
LEAF_NODE	6992:22	6992:22	9	)
LEAF_NODE	6992:23	6992:23	7	;
LEAF_NODE	6993:4	6993:4	5	}
JUMP_STATEMENT	6995:2	6995:12	3	return ( 0 ) ;
KEYWORD	6995:2	6995:2	4	return
LEAF_NODE	6995:2	6995:2	5	return
DESTINATION	6995:9	6995:9	4	( 0 )
EXPR	6995:9	6995:11	5	( 0 )
LEAF_NODE	6995:9	6995:9	6	(
FIELD	6995:10	6995:10	6	0
LEAF_NODE	6995:10	6995:10	7	0
LEAF_NODE	6995:11	6995:11	6	)
LEAF_NODE	6995:12	6995:12	4	;
LEAF_NODE	6996:2	6996:2	2	}
FUNCTION_DEF	6998:0	7048:2	1	
RETURN_TYPE	6998:0	6998:7	2	static int
LEAF_NODE	6998:0	6998:0	3	static
TYPE_NAME	6998:7	6998:7	3	int
LEAF_NODE	6998:7	6998:7	4	int
FUNCTION_NAME	6999:0	6999:0	2	writeImageSections
LEAF_NODE	6999:0	6999:0	3	writeImageSections
PARAMETER_LIST	6999:18	7002:48	2	( TIFF * in , TIFF * out , struct image_data * image , struct pagedef * page , struct pageseg * sections , struct dump_opts * dump , unsigned char * src_buff , unsigned char * * sect_buff_ptr )
LEAF_NODE	6999:18	6999:18	3	(
PARAMETER_DECL	6999:19	6999:25	3	TIFF * in
TYPE	6999:19	6999:24	4	TIFF *
TYPE_NAME	6999:19	6999:19	5	TIFF
LEAF_NODE	6999:19	6999:19	6	TIFF
POINTER	6999:24	6999:24	5	*
LEAF_NODE	6999:24	6999:24	6	*
NAME	6999:25	6999:25	4	in
LEAF_NODE	6999:25	6999:25	5	in
LEAF_NODE	6999:27	6999:27	3	,
PARAMETER_DECL	6999:29	6999:35	3	TIFF * out
TYPE	6999:29	6999:34	4	TIFF *
TYPE_NAME	6999:29	6999:29	5	TIFF
LEAF_NODE	6999:29	6999:29	6	TIFF
POINTER	6999:34	6999:34	5	*
LEAF_NODE	6999:34	6999:34	6	*
NAME	6999:35	6999:35	4	out
LEAF_NODE	6999:35	6999:35	5	out
LEAF_NODE	6999:38	6999:38	3	,
PARAMETER_DECL	6999:40	6999:59	3	struct image_data * image
TYPE	6999:40	6999:58	4	struct image_data *
TYPE_NAME	6999:40	6999:47	5	struct image_data
LEAF_NODE	6999:40	6999:40	6	struct
LEAF_NODE	6999:47	6999:47	6	image_data
POINTER	6999:58	6999:58	5	*
LEAF_NODE	6999:58	6999:58	6	*
NAME	6999:59	6999:59	4	image
LEAF_NODE	6999:59	6999:59	5	image
LEAF_NODE	6999:64	6999:64	3	,
PARAMETER_DECL	7000:5	7000:21	3	struct pagedef * page
TYPE	7000:5	7000:20	4	struct pagedef *
TYPE_NAME	7000:5	7000:12	5	struct pagedef
LEAF_NODE	7000:5	7000:5	6	struct
LEAF_NODE	7000:12	7000:12	6	pagedef
POINTER	7000:20	7000:20	5	*
LEAF_NODE	7000:20	7000:20	6	*
NAME	7000:21	7000:21	4	page
LEAF_NODE	7000:21	7000:21	5	page
LEAF_NODE	7000:25	7000:25	3	,
PARAMETER_DECL	7000:27	7000:43	3	struct pageseg * sections
TYPE	7000:27	7000:42	4	struct pageseg *
TYPE_NAME	7000:27	7000:34	5	struct pageseg
LEAF_NODE	7000:27	7000:27	6	struct
LEAF_NODE	7000:34	7000:34	6	pageseg
POINTER	7000:42	7000:42	5	*
LEAF_NODE	7000:42	7000:42	6	*
NAME	7000:43	7000:43	4	sections
LEAF_NODE	7000:43	7000:43	5	sections
LEAF_NODE	7000:51	7000:51	3	,
PARAMETER_DECL	7001:5	7001:24	3	struct dump_opts * dump
TYPE	7001:5	7001:22	4	struct dump_opts *
TYPE_NAME	7001:5	7001:12	5	struct dump_opts
LEAF_NODE	7001:5	7001:5	6	struct
LEAF_NODE	7001:12	7001:12	6	dump_opts
POINTER	7001:22	7001:22	5	*
LEAF_NODE	7001:22	7001:22	6	*
NAME	7001:24	7001:24	4	dump
LEAF_NODE	7001:24	7001:24	5	dump
LEAF_NODE	7001:28	7001:28	3	,
PARAMETER_DECL	7001:30	7001:45	3	unsigned char * src_buff
TYPE	7001:30	7001:44	4	unsigned char *
TYPE_NAME	7001:30	7001:39	5	unsigned char
LEAF_NODE	7001:30	7001:30	6	unsigned
LEAF_NODE	7001:39	7001:39	6	char
POINTER	7001:44	7001:44	5	*
LEAF_NODE	7001:44	7001:44	6	*
NAME	7001:45	7001:45	4	src_buff
LEAF_NODE	7001:45	7001:45	5	src_buff
LEAF_NODE	7001:53	7001:53	3	,
PARAMETER_DECL	7002:19	7002:35	3	unsigned char * * sect_buff_ptr
TYPE	7002:19	7002:33	4	unsigned char * *
TYPE_NAME	7002:19	7002:28	5	unsigned char
LEAF_NODE	7002:19	7002:19	6	unsigned
LEAF_NODE	7002:28	7002:28	6	char
POINTER	7002:33	7002:34	5	* *
LEAF_NODE	7002:33	7002:33	6	*
LEAF_NODE	7002:34	7002:34	6	*
NAME	7002:35	7002:35	4	sect_buff_ptr
LEAF_NODE	7002:35	7002:35	5	sect_buff_ptr
LEAF_NODE	7002:48	7002:48	3	)
LEAF_NODE	7003:2	7003:2	2	{
STATEMENTS	7004:2	7047:2	2	
SIMPLE_DECL	7004:2	7004:20	3	double hres , double vres ;
INIT_DECL_LIST	7004:2	7004:2	4	double hres , double vres
VAR_DECL	7004:2	7004:10	5	double hres
TYPE	7004:2	7004:2	6	double
TYPE_NAME	7004:2	7004:2	7	double
LEAF_NODE	7004:2	7004:2	8	double
NAME	7004:10	7004:10	6	hres
LEAF_NODE	7004:10	7004:10	7	hres
LEAF_NODE	7004:14	7004:14	5	,
VAR_DECL	7004:2	7004:16	5	double vres
TYPE	7004:2	7004:2	6	double
TYPE_NAME	7004:2	7004:2	7	double
LEAF_NODE	7004:2	7004:2	8	double
NAME	7004:16	7004:16	6	vres
LEAF_NODE	7004:16	7004:16	7	vres
LEAF_NODE	7004:20	7004:20	4	;
SIMPLE_DECL	7005:2	7005:39	3	uint32 i , uint32 k , uint32 width , uint32 length , uint32 sectsize ;
INIT_DECL_LIST	7005:2	7005:2	4	uint32 i , uint32 k , uint32 width , uint32 length , uint32 sectsize
VAR_DECL	7005:2	7005:10	5	uint32 i
TYPE	7005:2	7005:2	6	uint32
TYPE_NAME	7005:2	7005:2	7	uint32
LEAF_NODE	7005:2	7005:2	8	uint32
NAME	7005:10	7005:10	6	i
LEAF_NODE	7005:10	7005:10	7	i
LEAF_NODE	7005:11	7005:11	5	,
INIT_DECL_LIST	7005:2	7005:2	5	uint32 k , uint32 width , uint32 length , uint32 sectsize
VAR_DECL	7005:2	7005:13	6	uint32 k
TYPE	7005:2	7005:2	7	uint32
TYPE_NAME	7005:2	7005:2	8	uint32
LEAF_NODE	7005:2	7005:2	9	uint32
NAME	7005:13	7005:13	7	k
LEAF_NODE	7005:13	7005:13	8	k
LEAF_NODE	7005:14	7005:14	6	,
INIT_DECL_LIST	7005:2	7005:2	6	uint32 width , uint32 length , uint32 sectsize
VAR_DECL	7005:2	7005:16	7	uint32 width
TYPE	7005:2	7005:2	8	uint32
TYPE_NAME	7005:2	7005:2	9	uint32
LEAF_NODE	7005:2	7005:2	10	uint32
NAME	7005:16	7005:16	8	width
LEAF_NODE	7005:16	7005:16	9	width
LEAF_NODE	7005:21	7005:21	7	,
INIT_DECL_LIST	7005:2	7005:2	7	uint32 length , uint32 sectsize
VAR_DECL	7005:2	7005:23	8	uint32 length
TYPE	7005:2	7005:2	9	uint32
TYPE_NAME	7005:2	7005:2	10	uint32
LEAF_NODE	7005:2	7005:2	11	uint32
NAME	7005:23	7005:23	9	length
LEAF_NODE	7005:23	7005:23	10	length
LEAF_NODE	7005:29	7005:29	8	,
VAR_DECL	7005:2	7005:31	8	uint32 sectsize
TYPE	7005:2	7005:2	9	uint32
TYPE_NAME	7005:2	7005:2	10	uint32
LEAF_NODE	7005:2	7005:2	11	uint32
NAME	7005:31	7005:31	9	sectsize
LEAF_NODE	7005:31	7005:31	10	sectsize
LEAF_NODE	7005:39	7005:39	4	;
SIMPLE_DECL	7006:2	7006:43	3	unsigned char * sect_buff ; sect_buff = * sect_buff_ptr ;
VAR_DECL	7006:2	7006:17	4	unsigned char * sect_buff ; sect_buff = * sect_buff_ptr
TYPE	7006:2	7006:16	5	unsigned char *
TYPE_NAME	7006:2	7006:11	6	unsigned char
LEAF_NODE	7006:2	7006:2	7	unsigned
LEAF_NODE	7006:11	7006:11	7	char
POINTER	7006:16	7006:16	6	*
LEAF_NODE	7006:16	7006:16	7	*
NAME	7006:17	7006:17	5	sect_buff
LEAF_NODE	7006:17	7006:17	6	sect_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7006:17	7006:17	5	sect_buff = * sect_buff_ptr
ASSIGN	7006:17	7006:29	6	sect_buff = * sect_buff_ptr
LVAL	7006:17	7006:17	7	sect_buff
NAME	7006:17	7006:17	8	sect_buff
LEAF_NODE	7006:17	7006:17	9	sect_buff
ASSIGN_OP	7006:27	7006:27	7	=
LEAF_NODE	7006:27	7006:27	8	=
RVAL	7006:29	7006:29	7	* sect_buff_ptr
UNARY_EXPR	7006:29	7006:30	8	* sect_buff_ptr
UNARY_OPERATOR	7006:29	7006:29	9	*
LEAF_NODE	7006:29	7006:29	10	*
FIELD	7006:30	7006:30	9	sect_buff_ptr
LEAF_NODE	7006:30	7006:30	10	sect_buff_ptr
LEAF_NODE	7006:43	7006:43	4	;
EXPR_STATEMENT	7008:2	7008:19	3	hres = page -> hres ;
EXPR	7008:2	7008:2	4	hres = page -> hres
ASSIGN	7008:2	7008:9	5	hres = page -> hres
LVAL	7008:2	7008:2	6	hres
FIELD	7008:2	7008:2	7	hres
LEAF_NODE	7008:2	7008:2	8	hres
ASSIGN_OP	7008:7	7008:7	6	=
LEAF_NODE	7008:7	7008:7	7	=
RVAL	7008:9	7008:9	6	page -> hres
FIELD	7008:9	7008:15	7	page -> hres
LEAF_NODE	7008:9	7008:9	8	page
LEAF_NODE	7008:13	7008:13	8	->
LEAF_NODE	7008:15	7008:15	8	hres
LEAF_NODE	7008:19	7008:19	4	;
EXPR_STATEMENT	7009:2	7009:19	3	vres = page -> vres ;
EXPR	7009:2	7009:2	4	vres = page -> vres
ASSIGN	7009:2	7009:9	5	vres = page -> vres
LVAL	7009:2	7009:2	6	vres
FIELD	7009:2	7009:2	7	vres
LEAF_NODE	7009:2	7009:2	8	vres
ASSIGN_OP	7009:7	7009:7	6	=
LEAF_NODE	7009:7	7009:7	7	=
RVAL	7009:9	7009:9	6	page -> vres
FIELD	7009:9	7009:15	7	page -> vres
LEAF_NODE	7009:9	7009:9	8	page
LEAF_NODE	7009:13	7009:13	8	->
LEAF_NODE	7009:15	7009:15	8	vres
LEAF_NODE	7009:19	7009:19	4	;
EXPR_STATEMENT	7011:2	7011:29	3	k = page -> cols * page -> rows ;
EXPR	7011:2	7011:2	4	k = page -> cols * page -> rows
ASSIGN	7011:2	7011:6	5	k = page -> cols * page -> rows
LVAL	7011:2	7011:2	6	k
FIELD	7011:2	7011:2	7	k
LEAF_NODE	7011:2	7011:2	8	k
ASSIGN_OP	7011:4	7011:4	6	=
LEAF_NODE	7011:4	7011:4	7	=
RVAL	7011:6	7011:19	6	page -> cols * page -> rows
FIELD	7011:6	7011:12	7	page -> cols
LEAF_NODE	7011:6	7011:6	8	page
LEAF_NODE	7011:10	7011:10	8	->
LEAF_NODE	7011:12	7011:12	8	cols
LEAF_NODE	7011:17	7011:17	7	*
FIELD	7011:19	7011:25	7	page -> rows
LEAF_NODE	7011:19	7011:19	8	page
LEAF_NODE	7011:23	7011:23	8	->
LEAF_NODE	7011:25	7011:25	8	rows
LEAF_NODE	7011:29	7011:29	4	;
SELECTION	7012:2	7013:3	3	
KEYWORD	7012:2	7012:2	4	if
LEAF_NODE	7012:2	7012:2	5	if
LEAF_NODE	7012:5	7012:5	4	(
CONDITION	7012:6	7012:6	4	( k < 1 ) || ( k > MAX_SECTIONS )
EXPR	7012:6	7012:6	5	( k < 1 ) || ( k > MAX_SECTIONS )
OR	7012:6	7012:17	6	( k < 1 ) || ( k > MAX_SECTIONS )
EXPR	7012:6	7012:12	7	( k < 1 )
LEAF_NODE	7012:6	7012:6	8	(
FIELD	7012:7	7012:7	8	k
LEAF_NODE	7012:7	7012:7	9	k
REL_OPERATOR	7012:9	7012:9	8	<
LEAF_NODE	7012:9	7012:9	9	<
FIELD	7012:11	7012:11	8	1
LEAF_NODE	7012:11	7012:11	9	1
LEAF_NODE	7012:12	7012:12	8	)
LEAF_NODE	7012:14	7012:14	7	||
EXPR	7012:17	7012:34	7	( k > MAX_SECTIONS )
LEAF_NODE	7012:17	7012:17	8	(
FIELD	7012:18	7012:18	8	k
LEAF_NODE	7012:18	7012:18	9	k
REL_OPERATOR	7012:20	7012:20	8	>
LEAF_NODE	7012:20	7012:20	9	>
FIELD	7012:22	7012:22	8	MAX_SECTIONS
LEAF_NODE	7012:22	7012:22	9	MAX_SECTIONS
LEAF_NODE	7012:34	7012:34	8	)
LEAF_NODE	7012:35	7012:35	4	)
STATEMENTS	7013:3	7017:3	4	
LEAF_NODE	7013:3	7013:3	5	{
STATEMENTS	7014:3	7016:3	5	
EXPR_STATEMENT	7014:3	7015:95	6	TIFFError ( "writeImageSections" , "%d Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections" , k ) ;
EXPR	7014:3	7014:3	7	TIFFError ( "writeImageSections" , "%d Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections" , k )
FUNCTION_CALL	7014:3	7015:94	8	TIFFError ( "writeImageSections" , "%d Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections" , k )
CALLEE	7014:3	7014:3	9	TIFFError
LEAF_NODE	7014:3	7014:3	10	TIFFError
LEAF_NODE	7014:12	7014:12	9	(
ARGUMENT	7014:13	7014:13	9	"writeImageSections"
FIELD	7014:13	7014:13	10	"writeImageSections"
LEAF_NODE	7014:13	7014:13	11	"writeImageSections"
LEAF_NODE	7014:33	7014:33	9	,
ARGUMENT	7015:6	7015:6	9	"%d Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections"
FIELD	7015:6	7015:6	10	"%d Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections"
LEAF_NODE	7015:6	7015:6	11	"%d Rows and Columns exceed maximum sections\nIncrease resolution or reduce sections"
LEAF_NODE	7015:91	7015:91	9	,
ARGUMENT	7015:93	7015:93	9	k
FIELD	7015:93	7015:93	10	k
LEAF_NODE	7015:93	7015:93	11	k
LEAF_NODE	7015:94	7015:94	9	)
LEAF_NODE	7015:95	7015:95	7	;
JUMP_STATEMENT	7016:3	7016:14	6	return ( - 1 ) ;
KEYWORD	7016:3	7016:3	7	return
LEAF_NODE	7016:3	7016:3	8	return
DESTINATION	7016:10	7016:10	7	( - 1 )
EXPR	7016:10	7016:13	8	( - 1 )
LEAF_NODE	7016:10	7016:10	9	(
UNARY_EXPR	7016:11	7016:12	9	- 1
UNARY_OPERATOR	7016:11	7016:11	10	-
LEAF_NODE	7016:11	7016:11	11	-
FIELD	7016:12	7016:12	10	1
LEAF_NODE	7016:12	7016:12	11	1
LEAF_NODE	7016:13	7016:13	9	)
LEAF_NODE	7016:14	7016:14	7	;
LEAF_NODE	7017:3	7017:3	5	}
ITERATION	7019:2	7020:4	3	
KEYWORD	7019:2	7019:2	4	for
LEAF_NODE	7019:2	7019:2	5	for
LEAF_NODE	7019:6	7019:6	4	(
FOR_INIT	7019:7	7019:12	4	i = 0 ;
EXPR	7019:7	7019:7	5	i = 0
ASSIGN	7019:7	7019:11	6	i = 0
LVAL	7019:7	7019:7	7	i
FIELD	7019:7	7019:7	8	i
LEAF_NODE	7019:7	7019:7	9	i
ASSIGN_OP	7019:9	7019:9	7	=
LEAF_NODE	7019:9	7019:9	8	=
RVAL	7019:11	7019:11	7	0
FIELD	7019:11	7019:11	8	0
LEAF_NODE	7019:11	7019:11	9	0
LEAF_NODE	7019:12	7019:12	5	;
CONDITION	7019:14	7019:14	4	i < k
EXPR	7019:14	7019:18	5	i < k
FIELD	7019:14	7019:14	6	i
LEAF_NODE	7019:14	7019:14	7	i
REL_OPERATOR	7019:16	7019:16	6	<
LEAF_NODE	7019:16	7019:16	7	<
FIELD	7019:18	7019:18	6	k
LEAF_NODE	7019:18	7019:18	7	k
LEAF_NODE	7019:19	7019:19	4	;
FOR_EXPR	7019:21	7019:21	4	i ++
EXPR	7019:21	7019:21	5	i ++
FIELD	7019:21	7019:22	6	i ++
LEAF_NODE	7019:21	7019:21	7	i
LEAF_NODE	7019:22	7019:22	7	++
LEAF_NODE	7019:24	7019:24	4	)
STATEMENTS	7020:4	7045:4	4	
LEAF_NODE	7020:4	7020:4	5	{
STATEMENTS	7021:4	7040:4	5	
EXPR_STATEMENT	7021:4	7021:48	6	width = sections [ i ] . x2 - sections [ i ] . x1 + 1 ;
EXPR	7021:4	7021:4	7	width = sections [ i ] . x2 - sections [ i ] . x1 + 1
ASSIGN	7021:4	7021:13	8	width = sections [ i ] . x2 - sections [ i ] . x1 + 1
LVAL	7021:4	7021:4	9	width
FIELD	7021:4	7021:4	10	width
LEAF_NODE	7021:4	7021:4	11	width
ASSIGN_OP	7021:11	7021:11	9	=
LEAF_NODE	7021:11	7021:11	10	=
RVAL	7021:13	7021:47	9	sections [ i ] . x2 - sections [ i ] . x1 + 1
FIELD	7021:13	7021:25	10	sections [ i ] . x2
LEAF_NODE	7021:13	7021:13	11	sections
LEAF_NODE	7021:21	7021:21	11	[
EXPR	7021:22	7021:22	11	i
FIELD	7021:22	7021:22	12	i
LEAF_NODE	7021:22	7021:22	13	i
LEAF_NODE	7021:23	7021:23	11	]
LEAF_NODE	7021:24	7021:24	11	.
LEAF_NODE	7021:25	7021:25	11	x2
LEAF_NODE	7021:28	7021:28	10	-
FIELD	7021:30	7021:42	10	sections [ i ] . x1
LEAF_NODE	7021:30	7021:30	11	sections
LEAF_NODE	7021:38	7021:38	11	[
EXPR	7021:39	7021:39	11	i
FIELD	7021:39	7021:39	12	i
LEAF_NODE	7021:39	7021:39	13	i
LEAF_NODE	7021:40	7021:40	11	]
LEAF_NODE	7021:41	7021:41	11	.
LEAF_NODE	7021:42	7021:42	11	x1
LEAF_NODE	7021:45	7021:45	10	+
FIELD	7021:47	7021:47	10	1
LEAF_NODE	7021:47	7021:47	11	1
LEAF_NODE	7021:48	7021:48	7	;
EXPR_STATEMENT	7022:4	7022:48	6	length = sections [ i ] . y2 - sections [ i ] . y1 + 1 ;
EXPR	7022:4	7022:4	7	length = sections [ i ] . y2 - sections [ i ] . y1 + 1
ASSIGN	7022:4	7022:13	8	length = sections [ i ] . y2 - sections [ i ] . y1 + 1
LVAL	7022:4	7022:4	9	length
FIELD	7022:4	7022:4	10	length
LEAF_NODE	7022:4	7022:4	11	length
ASSIGN_OP	7022:11	7022:11	9	=
LEAF_NODE	7022:11	7022:11	10	=
RVAL	7022:13	7022:47	9	sections [ i ] . y2 - sections [ i ] . y1 + 1
FIELD	7022:13	7022:25	10	sections [ i ] . y2
LEAF_NODE	7022:13	7022:13	11	sections
LEAF_NODE	7022:21	7022:21	11	[
EXPR	7022:22	7022:22	11	i
FIELD	7022:22	7022:22	12	i
LEAF_NODE	7022:22	7022:22	13	i
LEAF_NODE	7022:23	7022:23	11	]
LEAF_NODE	7022:24	7022:24	11	.
LEAF_NODE	7022:25	7022:25	11	y2
LEAF_NODE	7022:28	7022:28	10	-
FIELD	7022:30	7022:42	10	sections [ i ] . y1
LEAF_NODE	7022:30	7022:30	11	sections
LEAF_NODE	7022:38	7022:38	11	[
EXPR	7022:39	7022:39	11	i
FIELD	7022:39	7022:39	12	i
LEAF_NODE	7022:39	7022:39	13	i
LEAF_NODE	7022:40	7022:40	11	]
LEAF_NODE	7022:41	7022:41	11	.
LEAF_NODE	7022:42	7022:42	11	y1
LEAF_NODE	7022:45	7022:45	10	+
FIELD	7022:47	7022:47	10	1
LEAF_NODE	7022:47	7022:47	11	1
LEAF_NODE	7022:48	7022:48	7	;
LEAF_NODE	7023:4	7023:4	6	sectsize
LEAF_NODE	7023:13	7023:13	6	=
LEAF_NODE	7023:15	7023:15	6	(
LEAF_NODE	7023:16	7023:16	6	uint32
LEAF_NODE	7023:22	7023:22	6	)
LEAF_NODE	7024:5	7024:5	6	ceil
LEAF_NODE	7024:9	7024:9	6	(
LEAF_NODE	7024:10	7024:10	6	(
LEAF_NODE	7024:11	7024:11	6	width
LEAF_NODE	7024:17	7024:17	6	*
LEAF_NODE	7024:19	7024:19	6	image
LEAF_NODE	7024:24	7024:24	6	->
LEAF_NODE	7024:26	7024:26	6	bps
LEAF_NODE	7024:30	7024:30	6	+
LEAF_NODE	7024:32	7024:32	6	7
LEAF_NODE	7024:33	7024:33	6	)
LEAF_NODE	7024:35	7024:35	6	/
LEAF_NODE	7024:37	7024:37	6	(
LEAF_NODE	7024:38	7024:38	6	double
LEAF_NODE	7024:44	7024:44	6	)
LEAF_NODE	7024:45	7024:45	6	8
LEAF_NODE	7024:46	7024:46	6	)
EXPR_STATEMENT	7024:48	7024:69	6	* image -> spp * length ;
EXPR	7024:48	7024:63	7	* image -> spp * length
UNARY_EXPR	7024:48	7024:50	8	* image -> spp
UNARY_OPERATOR	7024:48	7024:48	9	*
LEAF_NODE	7024:48	7024:48	10	*
FIELD	7024:50	7024:57	9	image -> spp
LEAF_NODE	7024:50	7024:50	10	image
LEAF_NODE	7024:55	7024:55	10	->
LEAF_NODE	7024:57	7024:57	10	spp
LEAF_NODE	7024:61	7024:61	8	*
FIELD	7024:63	7024:63	8	length
LEAF_NODE	7024:63	7024:63	9	length
LEAF_NODE	7024:69	7024:69	7	;
SELECTION	7026:4	7027:6	6	
KEYWORD	7026:4	7026:4	7	if
LEAF_NODE	7026:4	7026:4	8	if
LEAF_NODE	7026:7	7026:7	7	(
CONDITION	7026:8	7026:8	7	createImageSection ( sectsize , sect_buff_ptr )
EXPR	7026:8	7026:8	8	createImageSection ( sectsize , sect_buff_ptr )
FUNCTION_CALL	7026:8	7026:50	9	createImageSection ( sectsize , sect_buff_ptr )
CALLEE	7026:8	7026:8	10	createImageSection
LEAF_NODE	7026:8	7026:8	11	createImageSection
LEAF_NODE	7026:26	7026:26	10	(
ARGUMENT	7026:27	7026:27	10	sectsize
FIELD	7026:27	7026:27	11	sectsize
LEAF_NODE	7026:27	7026:27	12	sectsize
LEAF_NODE	7026:35	7026:35	10	,
ARGUMENT	7026:37	7026:37	10	sect_buff_ptr
FIELD	7026:37	7026:37	11	sect_buff_ptr
LEAF_NODE	7026:37	7026:37	12	sect_buff_ptr
LEAF_NODE	7026:50	7026:50	10	)
LEAF_NODE	7026:51	7026:51	7	)
STATEMENTS	7027:6	7030:6	7	
LEAF_NODE	7027:6	7027:6	8	{
STATEMENTS	7028:6	7029:6	8	
EXPR_STATEMENT	7028:6	7028:74	9	TIFFError ( "writeImageSections" , "Unable to allocate section buffer" ) ;
EXPR	7028:6	7028:6	10	TIFFError ( "writeImageSections" , "Unable to allocate section buffer" )
FUNCTION_CALL	7028:6	7028:73	11	TIFFError ( "writeImageSections" , "Unable to allocate section buffer" )
CALLEE	7028:6	7028:6	12	TIFFError
LEAF_NODE	7028:6	7028:6	13	TIFFError
LEAF_NODE	7028:15	7028:15	12	(
ARGUMENT	7028:16	7028:16	12	"writeImageSections"
FIELD	7028:16	7028:16	13	"writeImageSections"
LEAF_NODE	7028:16	7028:16	14	"writeImageSections"
LEAF_NODE	7028:36	7028:36	12	,
ARGUMENT	7028:38	7028:38	12	"Unable to allocate section buffer"
FIELD	7028:38	7028:38	13	"Unable to allocate section buffer"
LEAF_NODE	7028:38	7028:38	14	"Unable to allocate section buffer"
LEAF_NODE	7028:73	7028:73	12	)
LEAF_NODE	7028:74	7028:74	10	;
EXPR_STATEMENT	7029:6	7029:15	9	exit ( - 1 ) ;
EXPR	7029:6	7029:6	10	exit ( - 1 )
FUNCTION_CALL	7029:6	7029:14	11	exit ( - 1 )
CALLEE	7029:6	7029:6	12	exit
LEAF_NODE	7029:6	7029:6	13	exit
LEAF_NODE	7029:11	7029:11	12	(
ARGUMENT	7029:12	7029:12	12	- 1
UNARY_EXPR	7029:12	7029:13	13	- 1
UNARY_OPERATOR	7029:12	7029:12	14	-
LEAF_NODE	7029:12	7029:12	15	-
FIELD	7029:13	7029:13	14	1
LEAF_NODE	7029:13	7029:13	15	1
LEAF_NODE	7029:14	7029:14	12	)
LEAF_NODE	7029:15	7029:15	10	;
LEAF_NODE	7030:6	7030:6	8	}
EXPR_STATEMENT	7031:4	7031:30	6	sect_buff = * sect_buff_ptr ;
EXPR	7031:4	7031:4	7	sect_buff = * sect_buff_ptr
ASSIGN	7031:4	7031:16	8	sect_buff = * sect_buff_ptr
LVAL	7031:4	7031:4	9	sect_buff
FIELD	7031:4	7031:4	10	sect_buff
LEAF_NODE	7031:4	7031:4	11	sect_buff
ASSIGN_OP	7031:14	7031:14	9	=
LEAF_NODE	7031:14	7031:14	10	=
RVAL	7031:16	7031:16	9	* sect_buff_ptr
UNARY_EXPR	7031:16	7031:17	10	* sect_buff_ptr
UNARY_OPERATOR	7031:16	7031:16	11	*
LEAF_NODE	7031:16	7031:16	12	*
FIELD	7031:17	7031:17	11	sect_buff_ptr
LEAF_NODE	7031:17	7031:17	12	sect_buff_ptr
LEAF_NODE	7031:30	7031:30	7	;
SELECTION	7033:4	7034:6	6	
KEYWORD	7033:4	7033:4	7	if
LEAF_NODE	7033:4	7033:4	8	if
LEAF_NODE	7033:7	7033:7	7	(
CONDITION	7033:8	7033:8	7	extractImageSection ( image , & sections [ i ] , src_buff , sect_buff )
EXPR	7033:8	7033:8	8	extractImageSection ( image , & sections [ i ] , src_buff , sect_buff )
FUNCTION_CALL	7033:8	7033:69	9	extractImageSection ( image , & sections [ i ] , src_buff , sect_buff )
CALLEE	7033:8	7033:8	10	extractImageSection
LEAF_NODE	7033:8	7033:8	11	extractImageSection
LEAF_NODE	7033:28	7033:28	10	(
ARGUMENT	7033:29	7033:29	10	image
FIELD	7033:29	7033:29	11	image
LEAF_NODE	7033:29	7033:29	12	image
LEAF_NODE	7033:34	7033:34	10	,
ARGUMENT	7033:36	7033:36	10	& sections [ i ]
UNARY_EXPR	7033:36	7033:37	11	& sections [ i ]
UNARY_OPERATOR	7033:36	7033:36	12	&
LEAF_NODE	7033:36	7033:36	13	&
FIELD	7033:37	7033:47	12	sections [ i ]
LEAF_NODE	7033:37	7033:37	13	sections
LEAF_NODE	7033:45	7033:45	13	[
EXPR	7033:46	7033:46	13	i
FIELD	7033:46	7033:46	14	i
LEAF_NODE	7033:46	7033:46	15	i
LEAF_NODE	7033:47	7033:47	13	]
LEAF_NODE	7033:48	7033:48	10	,
ARGUMENT	7033:50	7033:50	10	src_buff
FIELD	7033:50	7033:50	11	src_buff
LEAF_NODE	7033:50	7033:50	12	src_buff
LEAF_NODE	7033:58	7033:58	10	,
ARGUMENT	7033:60	7033:60	10	sect_buff
FIELD	7033:60	7033:60	11	sect_buff
LEAF_NODE	7033:60	7033:60	12	sect_buff
LEAF_NODE	7033:69	7033:69	10	)
LEAF_NODE	7033:70	7033:70	7	)
STATEMENTS	7034:6	7037:6	7	
LEAF_NODE	7034:6	7034:6	8	{
STATEMENTS	7035:6	7036:6	8	
EXPR_STATEMENT	7035:6	7035:73	9	TIFFError ( "writeImageSections" , "Unable to extract image sections" ) ;
EXPR	7035:6	7035:6	10	TIFFError ( "writeImageSections" , "Unable to extract image sections" )
FUNCTION_CALL	7035:6	7035:72	11	TIFFError ( "writeImageSections" , "Unable to extract image sections" )
CALLEE	7035:6	7035:6	12	TIFFError
LEAF_NODE	7035:6	7035:6	13	TIFFError
LEAF_NODE	7035:15	7035:15	12	(
ARGUMENT	7035:16	7035:16	12	"writeImageSections"
FIELD	7035:16	7035:16	13	"writeImageSections"
LEAF_NODE	7035:16	7035:16	14	"writeImageSections"
LEAF_NODE	7035:36	7035:36	12	,
ARGUMENT	7035:38	7035:38	12	"Unable to extract image sections"
FIELD	7035:38	7035:38	13	"Unable to extract image sections"
LEAF_NODE	7035:38	7035:38	14	"Unable to extract image sections"
LEAF_NODE	7035:72	7035:72	12	)
LEAF_NODE	7035:73	7035:73	10	;
EXPR_STATEMENT	7036:6	7036:15	9	exit ( - 1 ) ;
EXPR	7036:6	7036:6	10	exit ( - 1 )
FUNCTION_CALL	7036:6	7036:14	11	exit ( - 1 )
CALLEE	7036:6	7036:6	12	exit
LEAF_NODE	7036:6	7036:6	13	exit
LEAF_NODE	7036:11	7036:11	12	(
ARGUMENT	7036:12	7036:12	12	- 1
UNARY_EXPR	7036:12	7036:13	13	- 1
UNARY_OPERATOR	7036:12	7036:12	14	-
LEAF_NODE	7036:12	7036:12	15	-
FIELD	7036:13	7036:13	14	1
LEAF_NODE	7036:13	7036:13	15	1
LEAF_NODE	7036:14	7036:14	12	)
LEAF_NODE	7036:15	7036:15	10	;
LEAF_NODE	7037:6	7037:6	8	}
SELECTION	7040:4	7041:6	6	
KEYWORD	7040:4	7040:4	7	if
LEAF_NODE	7040:4	7040:4	8	if
LEAF_NODE	7040:7	7040:7	7	(
CONDITION	7040:8	7040:8	7	writeSingleSection ( in , out , image , dump , width , length , hres , vres , sect_buff )
EXPR	7040:8	7040:8	8	writeSingleSection ( in , out , image , dump , width , length , hres , vres , sect_buff )
FUNCTION_CALL	7040:8	7040:85	9	writeSingleSection ( in , out , image , dump , width , length , hres , vres , sect_buff )
CALLEE	7040:8	7040:8	10	writeSingleSection
LEAF_NODE	7040:8	7040:8	11	writeSingleSection
LEAF_NODE	7040:26	7040:26	10	(
ARGUMENT	7040:27	7040:27	10	in
FIELD	7040:27	7040:27	11	in
LEAF_NODE	7040:27	7040:27	12	in
LEAF_NODE	7040:29	7040:29	10	,
ARGUMENT	7040:31	7040:31	10	out
FIELD	7040:31	7040:31	11	out
LEAF_NODE	7040:31	7040:31	12	out
LEAF_NODE	7040:34	7040:34	10	,
ARGUMENT	7040:36	7040:36	10	image
FIELD	7040:36	7040:36	11	image
LEAF_NODE	7040:36	7040:36	12	image
LEAF_NODE	7040:41	7040:41	10	,
ARGUMENT	7040:43	7040:43	10	dump
FIELD	7040:43	7040:43	11	dump
LEAF_NODE	7040:43	7040:43	12	dump
LEAF_NODE	7040:47	7040:47	10	,
ARGUMENT	7040:49	7040:49	10	width
FIELD	7040:49	7040:49	11	width
LEAF_NODE	7040:49	7040:49	12	width
LEAF_NODE	7040:54	7040:54	10	,
ARGUMENT	7040:56	7040:56	10	length
FIELD	7040:56	7040:56	11	length
LEAF_NODE	7040:56	7040:56	12	length
LEAF_NODE	7040:62	7040:62	10	,
ARGUMENT	7040:64	7040:64	10	hres
FIELD	7040:64	7040:64	11	hres
LEAF_NODE	7040:64	7040:64	12	hres
LEAF_NODE	7040:68	7040:68	10	,
ARGUMENT	7040:70	7040:70	10	vres
FIELD	7040:70	7040:70	11	vres
LEAF_NODE	7040:70	7040:70	12	vres
LEAF_NODE	7040:74	7040:74	10	,
ARGUMENT	7040:76	7040:76	10	sect_buff
FIELD	7040:76	7040:76	11	sect_buff
LEAF_NODE	7040:76	7040:76	12	sect_buff
LEAF_NODE	7040:85	7040:85	10	)
LEAF_NODE	7040:86	7040:86	7	)
STATEMENTS	7041:6	7044:6	7	
LEAF_NODE	7041:6	7041:6	8	{
STATEMENTS	7042:6	7043:6	8	
EXPR_STATEMENT	7042:6	7042:70	9	TIFFError ( "writeImageSections" , "Unable to write image section" ) ;
EXPR	7042:6	7042:6	10	TIFFError ( "writeImageSections" , "Unable to write image section" )
FUNCTION_CALL	7042:6	7042:69	11	TIFFError ( "writeImageSections" , "Unable to write image section" )
CALLEE	7042:6	7042:6	12	TIFFError
LEAF_NODE	7042:6	7042:6	13	TIFFError
LEAF_NODE	7042:15	7042:15	12	(
ARGUMENT	7042:16	7042:16	12	"writeImageSections"
FIELD	7042:16	7042:16	13	"writeImageSections"
LEAF_NODE	7042:16	7042:16	14	"writeImageSections"
LEAF_NODE	7042:36	7042:36	12	,
ARGUMENT	7042:38	7042:38	12	"Unable to write image section"
FIELD	7042:38	7042:38	13	"Unable to write image section"
LEAF_NODE	7042:38	7042:38	14	"Unable to write image section"
LEAF_NODE	7042:69	7042:69	12	)
LEAF_NODE	7042:70	7042:70	10	;
EXPR_STATEMENT	7043:6	7043:15	9	exit ( - 1 ) ;
EXPR	7043:6	7043:6	10	exit ( - 1 )
FUNCTION_CALL	7043:6	7043:14	11	exit ( - 1 )
CALLEE	7043:6	7043:6	12	exit
LEAF_NODE	7043:6	7043:6	13	exit
LEAF_NODE	7043:11	7043:11	12	(
ARGUMENT	7043:12	7043:12	12	- 1
UNARY_EXPR	7043:12	7043:13	13	- 1
UNARY_OPERATOR	7043:12	7043:12	14	-
LEAF_NODE	7043:12	7043:12	15	-
FIELD	7043:13	7043:13	14	1
LEAF_NODE	7043:13	7043:13	15	1
LEAF_NODE	7043:14	7043:14	12	)
LEAF_NODE	7043:15	7043:15	10	;
LEAF_NODE	7044:6	7044:6	8	}
LEAF_NODE	7045:4	7045:4	5	}
JUMP_STATEMENT	7047:2	7047:12	3	return ( 0 ) ;
KEYWORD	7047:2	7047:2	4	return
LEAF_NODE	7047:2	7047:2	5	return
DESTINATION	7047:9	7047:9	4	( 0 )
EXPR	7047:9	7047:11	5	( 0 )
LEAF_NODE	7047:9	7047:9	6	(
FIELD	7047:10	7047:10	6	0
LEAF_NODE	7047:10	7047:10	7	0
LEAF_NODE	7047:11	7047:11	6	)
LEAF_NODE	7047:12	7047:12	4	;
LEAF_NODE	7048:2	7048:2	2	}
FUNCTION_DEF	7056:0	7323:2	1	
RETURN_TYPE	7056:0	7056:7	2	static int
LEAF_NODE	7056:0	7056:0	3	static
TYPE_NAME	7056:7	7056:7	3	int
LEAF_NODE	7056:7	7056:7	4	int
FUNCTION_NAME	7057:0	7057:0	2	writeSingleSection
LEAF_NODE	7057:0	7057:0	3	writeSingleSection
PARAMETER_LIST	7057:18	7060:43	2	( TIFF * in , TIFF * out , struct image_data * image , struct dump_opts * dump , uint32 width , uint32 length , double hres , double vres , unsigned char * sect_buff )
LEAF_NODE	7057:18	7057:18	3	(
PARAMETER_DECL	7057:19	7057:25	3	TIFF * in
TYPE	7057:19	7057:24	4	TIFF *
TYPE_NAME	7057:19	7057:19	5	TIFF
LEAF_NODE	7057:19	7057:19	6	TIFF
POINTER	7057:24	7057:24	5	*
LEAF_NODE	7057:24	7057:24	6	*
NAME	7057:25	7057:25	4	in
LEAF_NODE	7057:25	7057:25	5	in
LEAF_NODE	7057:27	7057:27	3	,
PARAMETER_DECL	7057:29	7057:35	3	TIFF * out
TYPE	7057:29	7057:34	4	TIFF *
TYPE_NAME	7057:29	7057:29	5	TIFF
LEAF_NODE	7057:29	7057:29	6	TIFF
POINTER	7057:34	7057:34	5	*
LEAF_NODE	7057:34	7057:34	6	*
NAME	7057:35	7057:35	4	out
LEAF_NODE	7057:35	7057:35	5	out
LEAF_NODE	7057:38	7057:38	3	,
PARAMETER_DECL	7057:40	7057:59	3	struct image_data * image
TYPE	7057:40	7057:58	4	struct image_data *
TYPE_NAME	7057:40	7057:47	5	struct image_data
LEAF_NODE	7057:40	7057:40	6	struct
LEAF_NODE	7057:47	7057:47	6	image_data
POINTER	7057:58	7057:58	5	*
LEAF_NODE	7057:58	7057:58	6	*
NAME	7057:59	7057:59	4	image
LEAF_NODE	7057:59	7057:59	5	image
LEAF_NODE	7057:64	7057:64	3	,
PARAMETER_DECL	7058:19	7058:37	3	struct dump_opts * dump
TYPE	7058:19	7058:36	4	struct dump_opts *
TYPE_NAME	7058:19	7058:26	5	struct dump_opts
LEAF_NODE	7058:19	7058:19	6	struct
LEAF_NODE	7058:26	7058:26	6	dump_opts
POINTER	7058:36	7058:36	5	*
LEAF_NODE	7058:36	7058:36	6	*
NAME	7058:37	7058:37	4	dump
LEAF_NODE	7058:37	7058:37	5	dump
LEAF_NODE	7058:41	7058:41	3	,
PARAMETER_DECL	7058:43	7058:50	3	uint32 width
TYPE	7058:43	7058:43	4	uint32
TYPE_NAME	7058:43	7058:43	5	uint32
LEAF_NODE	7058:43	7058:43	6	uint32
NAME	7058:50	7058:50	4	width
LEAF_NODE	7058:50	7058:50	5	width
LEAF_NODE	7058:55	7058:55	3	,
PARAMETER_DECL	7058:57	7058:64	3	uint32 length
TYPE	7058:57	7058:57	4	uint32
TYPE_NAME	7058:57	7058:57	5	uint32
LEAF_NODE	7058:57	7058:57	6	uint32
NAME	7058:64	7058:64	4	length
LEAF_NODE	7058:64	7058:64	5	length
LEAF_NODE	7058:70	7058:70	3	,
PARAMETER_DECL	7059:19	7059:26	3	double hres
TYPE	7059:19	7059:19	4	double
TYPE_NAME	7059:19	7059:19	5	double
LEAF_NODE	7059:19	7059:19	6	double
NAME	7059:26	7059:26	4	hres
LEAF_NODE	7059:26	7059:26	5	hres
LEAF_NODE	7059:30	7059:30	3	,
PARAMETER_DECL	7059:32	7059:39	3	double vres
TYPE	7059:32	7059:32	4	double
TYPE_NAME	7059:32	7059:32	5	double
LEAF_NODE	7059:32	7059:32	6	double
NAME	7059:39	7059:39	4	vres
LEAF_NODE	7059:39	7059:39	5	vres
LEAF_NODE	7059:43	7059:43	3	,
PARAMETER_DECL	7060:19	7060:34	3	unsigned char * sect_buff
TYPE	7060:19	7060:33	4	unsigned char *
TYPE_NAME	7060:19	7060:28	5	unsigned char
LEAF_NODE	7060:19	7060:19	6	unsigned
LEAF_NODE	7060:28	7060:28	6	char
POINTER	7060:33	7060:33	5	*
LEAF_NODE	7060:33	7060:33	6	*
NAME	7060:34	7060:34	4	sect_buff
LEAF_NODE	7060:34	7060:34	5	sect_buff
LEAF_NODE	7060:43	7060:43	3	)
LEAF_NODE	7061:2	7061:2	2	{
STATEMENTS	7062:2	7322:2	2	
SIMPLE_DECL	7062:2	7062:17	3	uint16 bps , uint16 spp ;
INIT_DECL_LIST	7062:2	7062:2	4	uint16 bps , uint16 spp
VAR_DECL	7062:2	7062:9	5	uint16 bps
TYPE	7062:2	7062:2	6	uint16
TYPE_NAME	7062:2	7062:2	7	uint16
LEAF_NODE	7062:2	7062:2	8	uint16
NAME	7062:9	7062:9	6	bps
LEAF_NODE	7062:9	7062:9	7	bps
LEAF_NODE	7062:12	7062:12	5	,
VAR_DECL	7062:2	7062:14	5	uint16 spp
TYPE	7062:2	7062:2	6	uint16
TYPE_NAME	7062:2	7062:2	7	uint16
LEAF_NODE	7062:2	7062:2	8	uint16
NAME	7062:14	7062:14	6	spp
LEAF_NODE	7062:14	7062:14	7	spp
LEAF_NODE	7062:17	7062:17	4	;
SIMPLE_DECL	7063:2	7063:45	3	uint16 input_compression , uint16 input_photometric ;
INIT_DECL_LIST	7063:2	7063:2	4	uint16 input_compression , uint16 input_photometric
VAR_DECL	7063:2	7063:9	5	uint16 input_compression
TYPE	7063:2	7063:2	6	uint16
TYPE_NAME	7063:2	7063:2	7	uint16
LEAF_NODE	7063:2	7063:2	8	uint16
NAME	7063:9	7063:9	6	input_compression
LEAF_NODE	7063:9	7063:9	7	input_compression
LEAF_NODE	7063:26	7063:26	5	,
VAR_DECL	7063:2	7063:28	5	uint16 input_photometric
TYPE	7063:2	7063:2	6	uint16
TYPE_NAME	7063:2	7063:2	7	uint16
LEAF_NODE	7063:2	7063:2	8	uint16
NAME	7063:28	7063:28	6	input_photometric
LEAF_NODE	7063:28	7063:28	7	input_photometric
LEAF_NODE	7063:45	7063:45	4	;
SIMPLE_DECL	7064:2	7064:21	3	uint16 input_planar ;
VAR_DECL	7064:2	7064:9	4	uint16 input_planar
TYPE	7064:2	7064:2	5	uint16
TYPE_NAME	7064:2	7064:2	6	uint16
LEAF_NODE	7064:2	7064:2	7	uint16
NAME	7064:9	7064:9	5	input_planar
LEAF_NODE	7064:9	7064:9	6	input_planar
LEAF_NODE	7064:21	7064:21	4	;
SIMPLE_DECL	7065:2	7065:17	3	struct cpTag * p ;
VAR_DECL	7065:2	7065:16	4	struct cpTag * p
TYPE	7065:2	7065:14	5	struct cpTag *
TYPE_NAME	7065:2	7065:9	6	struct cpTag
LEAF_NODE	7065:2	7065:2	7	struct
LEAF_NODE	7065:9	7065:9	7	cpTag
POINTER	7065:14	7065:14	6	*
LEAF_NODE	7065:14	7065:14	7	*
NAME	7065:16	7065:16	5	p
LEAF_NODE	7065:16	7065:16	6	p
LEAF_NODE	7065:17	7065:17	4	;
EXPR_STATEMENT	7070:2	7070:40	3	input_compression = image -> compression ;
EXPR	7070:2	7070:2	4	input_compression = image -> compression
ASSIGN	7070:2	7070:22	5	input_compression = image -> compression
LVAL	7070:2	7070:2	6	input_compression
FIELD	7070:2	7070:2	7	input_compression
LEAF_NODE	7070:2	7070:2	8	input_compression
ASSIGN_OP	7070:20	7070:20	6	=
LEAF_NODE	7070:20	7070:20	7	=
RVAL	7070:22	7070:22	6	image -> compression
FIELD	7070:22	7070:29	7	image -> compression
LEAF_NODE	7070:22	7070:22	8	image
LEAF_NODE	7070:27	7070:27	8	->
LEAF_NODE	7070:29	7070:29	8	compression
LEAF_NODE	7070:40	7070:40	4	;
EXPR_STATEMENT	7071:2	7071:40	3	input_photometric = image -> photometric ;
EXPR	7071:2	7071:2	4	input_photometric = image -> photometric
ASSIGN	7071:2	7071:22	5	input_photometric = image -> photometric
LVAL	7071:2	7071:2	6	input_photometric
FIELD	7071:2	7071:2	7	input_photometric
LEAF_NODE	7071:2	7071:2	8	input_photometric
ASSIGN_OP	7071:20	7071:20	6	=
LEAF_NODE	7071:20	7071:20	7	=
RVAL	7071:22	7071:22	6	image -> photometric
FIELD	7071:22	7071:29	7	image -> photometric
LEAF_NODE	7071:22	7071:22	8	image
LEAF_NODE	7071:27	7071:27	8	->
LEAF_NODE	7071:29	7071:29	8	photometric
LEAF_NODE	7071:40	7071:40	4	;
EXPR_STATEMENT	7073:2	7073:18	3	spp = image -> spp ;
EXPR	7073:2	7073:2	4	spp = image -> spp
ASSIGN	7073:2	7073:8	5	spp = image -> spp
LVAL	7073:2	7073:2	6	spp
FIELD	7073:2	7073:2	7	spp
LEAF_NODE	7073:2	7073:2	8	spp
ASSIGN_OP	7073:6	7073:6	6	=
LEAF_NODE	7073:6	7073:6	7	=
RVAL	7073:8	7073:8	6	image -> spp
FIELD	7073:8	7073:15	7	image -> spp
LEAF_NODE	7073:8	7073:8	8	image
LEAF_NODE	7073:13	7073:13	8	->
LEAF_NODE	7073:15	7073:15	8	spp
LEAF_NODE	7073:18	7073:18	4	;
EXPR_STATEMENT	7074:2	7074:18	3	bps = image -> bps ;
EXPR	7074:2	7074:2	4	bps = image -> bps
ASSIGN	7074:2	7074:8	5	bps = image -> bps
LVAL	7074:2	7074:2	6	bps
FIELD	7074:2	7074:2	7	bps
LEAF_NODE	7074:2	7074:2	8	bps
ASSIGN_OP	7074:6	7074:6	6	=
LEAF_NODE	7074:6	7074:6	7	=
RVAL	7074:8	7074:8	6	image -> bps
FIELD	7074:8	7074:15	7	image -> bps
LEAF_NODE	7074:8	7074:8	8	image
LEAF_NODE	7074:13	7074:13	8	->
LEAF_NODE	7074:15	7074:15	8	bps
LEAF_NODE	7074:18	7074:18	4	;
EXPR_STATEMENT	7075:2	7075:46	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width ) ;
EXPR	7075:2	7075:2	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
FUNCTION_CALL	7075:2	7075:45	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
CALLEE	7075:2	7075:2	6	TIFFSetField
LEAF_NODE	7075:2	7075:2	7	TIFFSetField
LEAF_NODE	7075:14	7075:14	6	(
ARGUMENT	7075:15	7075:15	6	out
FIELD	7075:15	7075:15	7	out
LEAF_NODE	7075:15	7075:15	8	out
LEAF_NODE	7075:18	7075:18	6	,
ARGUMENT	7075:20	7075:20	6	TIFFTAG_IMAGEWIDTH
FIELD	7075:20	7075:20	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	7075:20	7075:20	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	7075:38	7075:38	6	,
ARGUMENT	7075:40	7075:40	6	width
FIELD	7075:40	7075:40	7	width
LEAF_NODE	7075:40	7075:40	8	width
LEAF_NODE	7075:45	7075:45	6	)
LEAF_NODE	7075:46	7075:46	4	;
EXPR_STATEMENT	7076:2	7076:48	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length ) ;
EXPR	7076:2	7076:2	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length )
FUNCTION_CALL	7076:2	7076:47	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length )
CALLEE	7076:2	7076:2	6	TIFFSetField
LEAF_NODE	7076:2	7076:2	7	TIFFSetField
LEAF_NODE	7076:14	7076:14	6	(
ARGUMENT	7076:15	7076:15	6	out
FIELD	7076:15	7076:15	7	out
LEAF_NODE	7076:15	7076:15	8	out
LEAF_NODE	7076:18	7076:18	6	,
ARGUMENT	7076:20	7076:20	6	TIFFTAG_IMAGELENGTH
FIELD	7076:20	7076:20	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	7076:20	7076:20	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	7076:39	7076:39	6	,
ARGUMENT	7076:41	7076:41	6	length
FIELD	7076:41	7076:41	7	length
LEAF_NODE	7076:41	7076:41	8	length
LEAF_NODE	7076:47	7076:47	6	)
LEAF_NODE	7076:48	7076:48	4	;
EXPR_STATEMENT	7077:2	7077:47	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bps ) ;
EXPR	7077:2	7077:2	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bps )
FUNCTION_CALL	7077:2	7077:46	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bps )
CALLEE	7077:2	7077:2	6	TIFFSetField
LEAF_NODE	7077:2	7077:2	7	TIFFSetField
LEAF_NODE	7077:14	7077:14	6	(
ARGUMENT	7077:15	7077:15	6	out
FIELD	7077:15	7077:15	7	out
LEAF_NODE	7077:15	7077:15	8	out
LEAF_NODE	7077:18	7077:18	6	,
ARGUMENT	7077:20	7077:20	6	TIFFTAG_BITSPERSAMPLE
FIELD	7077:20	7077:20	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	7077:20	7077:20	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	7077:41	7077:41	6	,
ARGUMENT	7077:43	7077:43	6	bps
FIELD	7077:43	7077:43	7	bps
LEAF_NODE	7077:43	7077:43	8	bps
LEAF_NODE	7077:46	7077:46	6	)
LEAF_NODE	7077:47	7077:47	4	;
EXPR_STATEMENT	7078:2	7078:49	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp ) ;
EXPR	7078:2	7078:2	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp )
FUNCTION_CALL	7078:2	7078:48	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp )
CALLEE	7078:2	7078:2	6	TIFFSetField
LEAF_NODE	7078:2	7078:2	7	TIFFSetField
LEAF_NODE	7078:14	7078:14	6	(
ARGUMENT	7078:15	7078:15	6	out
FIELD	7078:15	7078:15	7	out
LEAF_NODE	7078:15	7078:15	8	out
LEAF_NODE	7078:18	7078:18	6	,
ARGUMENT	7078:20	7078:20	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	7078:20	7078:20	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	7078:20	7078:20	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	7078:43	7078:43	6	,
ARGUMENT	7078:45	7078:45	6	spp
FIELD	7078:45	7078:45	7	spp
LEAF_NODE	7078:45	7078:45	8	spp
LEAF_NODE	7078:48	7078:48	6	)
LEAF_NODE	7078:49	7078:49	4	;
EXPR_STATEMENT	7081:2	7083:74	3	TIFFError ( "writeSingleSection" , "Input compression: %s" , ( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" ) ) ;
EXPR	7081:2	7081:2	4	TIFFError ( "writeSingleSection" , "Input compression: %s" , ( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" ) )
FUNCTION_CALL	7081:2	7083:73	5	TIFFError ( "writeSingleSection" , "Input compression: %s" , ( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" ) )
CALLEE	7081:2	7081:2	6	TIFFError
LEAF_NODE	7081:2	7081:2	7	TIFFError
LEAF_NODE	7081:11	7081:11	6	(
ARGUMENT	7081:12	7081:12	6	"writeSingleSection"
FIELD	7081:12	7081:12	7	"writeSingleSection"
LEAF_NODE	7081:12	7081:12	8	"writeSingleSection"
LEAF_NODE	7081:32	7081:32	6	,
ARGUMENT	7081:34	7081:34	6	"Input compression: %s"
FIELD	7081:34	7081:34	7	"Input compression: %s"
LEAF_NODE	7081:34	7081:34	8	"Input compression: %s"
LEAF_NODE	7081:57	7081:57	6	,
ARGUMENT	7082:5	7082:5	6	( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" )
COND_EXPR	7082:5	7083:72	7	( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" )
CONDITION	7082:5	7082:44	8	( input_compression == COMPRESSION_OJPEG )
LEAF_NODE	7082:5	7082:5	9	(
FIELD	7082:6	7082:6	9	input_compression
LEAF_NODE	7082:6	7082:6	10	input_compression
EQ_OPERATOR	7082:24	7082:24	9	==
LEAF_NODE	7082:24	7082:24	10	==
FIELD	7082:27	7082:27	9	COMPRESSION_OJPEG
LEAF_NODE	7082:27	7082:27	10	COMPRESSION_OJPEG
LEAF_NODE	7082:44	7082:44	9	)
LEAF_NODE	7082:46	7082:46	8	?
EXPR	7082:48	7082:48	8	"Old Jpeg"
FIELD	7082:48	7082:48	9	"Old Jpeg"
LEAF_NODE	7082:48	7082:48	10	"Old Jpeg"
LEAF_NODE	7082:59	7082:59	8	:
LEAF_NODE	7083:5	7083:5	8	(
COND_EXPR	7083:6	7083:62	8	( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg"
CONDITION	7083:6	7083:44	9	( input_compression == COMPRESSION_JPEG )
LEAF_NODE	7083:6	7083:6	10	(
FIELD	7083:7	7083:7	10	input_compression
LEAF_NODE	7083:7	7083:7	11	input_compression
EQ_OPERATOR	7083:25	7083:25	10	==
LEAF_NODE	7083:25	7083:25	11	==
FIELD	7083:28	7083:28	10	COMPRESSION_JPEG
LEAF_NODE	7083:28	7083:28	11	COMPRESSION_JPEG
LEAF_NODE	7083:44	7083:44	10	)
LEAF_NODE	7083:46	7083:46	9	?
EXPR	7083:49	7083:49	9	"New Jpeg"
FIELD	7083:49	7083:49	10	"New Jpeg"
LEAF_NODE	7083:49	7083:49	11	"New Jpeg"
LEAF_NODE	7083:60	7083:60	9	:
FIELD	7083:62	7083:62	9	"Non Jpeg"
LEAF_NODE	7083:62	7083:62	10	"Non Jpeg"
LEAF_NODE	7083:72	7083:72	8	)
LEAF_NODE	7083:73	7083:73	6	)
LEAF_NODE	7083:74	7083:74	4	;
SELECTION	7090:2	7091:4	3	
KEYWORD	7090:2	7090:2	4	if
LEAF_NODE	7090:2	7090:2	5	if
LEAF_NODE	7090:5	7090:5	4	(
CONDITION	7090:6	7090:6	4	compression != ( uint16 ) - 1
EXPR	7090:6	7090:29	5	compression != ( uint16 ) - 1
FIELD	7090:6	7090:6	6	compression
LEAF_NODE	7090:6	7090:6	7	compression
EQ_OPERATOR	7090:18	7090:18	6	!=
LEAF_NODE	7090:18	7090:18	7	!=
LEAF_NODE	7090:21	7090:21	6	(
TYPE_NAME	7090:22	7090:22	6	uint16
LEAF_NODE	7090:22	7090:22	7	uint16
LEAF_NODE	7090:28	7090:28	6	)
UNARY_EXPR	7090:29	7090:30	6	- 1
UNARY_OPERATOR	7090:29	7090:29	7	-
LEAF_NODE	7090:29	7090:29	8	-
FIELD	7090:30	7090:30	7	1
LEAF_NODE	7090:30	7090:30	8	1
LEAF_NODE	7090:31	7090:31	4	)
STATEMENTS	7091:4	7091:4	4	
EXPR_STATEMENT	7091:4	7091:55	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	7091:4	7091:4	6	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	7091:4	7091:54	7	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	7091:4	7091:4	8	TIFFSetField
LEAF_NODE	7091:4	7091:4	9	TIFFSetField
LEAF_NODE	7091:16	7091:16	8	(
ARGUMENT	7091:17	7091:17	8	out
FIELD	7091:17	7091:17	9	out
LEAF_NODE	7091:17	7091:17	10	out
LEAF_NODE	7091:20	7091:20	8	,
ARGUMENT	7091:22	7091:22	8	TIFFTAG_COMPRESSION
FIELD	7091:22	7091:22	9	TIFFTAG_COMPRESSION
LEAF_NODE	7091:22	7091:22	10	TIFFTAG_COMPRESSION
LEAF_NODE	7091:41	7091:41	8	,
ARGUMENT	7091:43	7091:43	8	compression
FIELD	7091:43	7091:43	9	compression
LEAF_NODE	7091:43	7091:43	10	compression
LEAF_NODE	7091:54	7091:54	8	)
LEAF_NODE	7091:55	7091:55	6	;
SELECTION	7092:2	7093:4	3	
KEYWORD	7092:2	7092:2	4	else
LEAF_NODE	7092:2	7092:2	5	else
STATEMENTS	7093:4	7102:4	4	
LEAF_NODE	7093:4	7093:4	5	{
STATEMENTS	7094:4	7100:4	5	
SELECTION	7094:4	7095:6	6	
KEYWORD	7094:4	7094:4	7	if
LEAF_NODE	7094:4	7094:4	8	if
LEAF_NODE	7094:7	7094:7	7	(
CONDITION	7094:8	7094:8	7	input_compression == COMPRESSION_OJPEG
EXPR	7094:8	7094:29	8	input_compression == COMPRESSION_OJPEG
FIELD	7094:8	7094:8	9	input_compression
LEAF_NODE	7094:8	7094:8	10	input_compression
EQ_OPERATOR	7094:26	7094:26	9	==
LEAF_NODE	7094:26	7094:26	10	==
FIELD	7094:29	7094:29	9	COMPRESSION_OJPEG
LEAF_NODE	7094:29	7094:29	10	COMPRESSION_OJPEG
LEAF_NODE	7094:46	7094:46	7	)
STATEMENTS	7095:6	7099:6	7	
LEAF_NODE	7095:6	7095:6	8	{
STATEMENTS	7096:6	7098:6	8	
EXPR_STATEMENT	7096:6	7096:36	9	compression = COMPRESSION_JPEG ;
EXPR	7096:6	7096:6	10	compression = COMPRESSION_JPEG
ASSIGN	7096:6	7096:20	11	compression = COMPRESSION_JPEG
LVAL	7096:6	7096:6	12	compression
FIELD	7096:6	7096:6	13	compression
LEAF_NODE	7096:6	7096:6	14	compression
ASSIGN_OP	7096:18	7096:18	12	=
LEAF_NODE	7096:18	7096:18	13	=
RVAL	7096:20	7096:20	12	COMPRESSION_JPEG
FIELD	7096:20	7096:20	13	COMPRESSION_JPEG
LEAF_NODE	7096:20	7096:20	14	COMPRESSION_JPEG
LEAF_NODE	7096:36	7096:36	10	;
EXPR_STATEMENT	7097:6	7097:39	9	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	7097:6	7097:6	10	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	7097:6	7097:22	11	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	7097:6	7097:6	12	jpegcolormode
FIELD	7097:6	7097:6	13	jpegcolormode
LEAF_NODE	7097:6	7097:6	14	jpegcolormode
ASSIGN_OP	7097:20	7097:20	12	=
LEAF_NODE	7097:20	7097:20	13	=
RVAL	7097:22	7097:22	12	JPEGCOLORMODE_RAW
FIELD	7097:22	7097:22	13	JPEGCOLORMODE_RAW
LEAF_NODE	7097:22	7097:22	14	JPEGCOLORMODE_RAW
LEAF_NODE	7097:39	7097:39	10	;
EXPR_STATEMENT	7098:6	7098:62	9	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_JPEG ) ;
EXPR	7098:6	7098:6	10	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_JPEG )
FUNCTION_CALL	7098:6	7098:61	11	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_JPEG )
CALLEE	7098:6	7098:6	12	TIFFSetField
LEAF_NODE	7098:6	7098:6	13	TIFFSetField
LEAF_NODE	7098:18	7098:18	12	(
ARGUMENT	7098:19	7098:19	12	out
FIELD	7098:19	7098:19	13	out
LEAF_NODE	7098:19	7098:19	14	out
LEAF_NODE	7098:22	7098:22	12	,
ARGUMENT	7098:24	7098:24	12	TIFFTAG_COMPRESSION
FIELD	7098:24	7098:24	13	TIFFTAG_COMPRESSION
LEAF_NODE	7098:24	7098:24	14	TIFFTAG_COMPRESSION
LEAF_NODE	7098:43	7098:43	12	,
ARGUMENT	7098:45	7098:45	12	COMPRESSION_JPEG
FIELD	7098:45	7098:45	13	COMPRESSION_JPEG
LEAF_NODE	7098:45	7098:45	14	COMPRESSION_JPEG
LEAF_NODE	7098:61	7098:61	12	)
LEAF_NODE	7098:62	7098:62	10	;
LEAF_NODE	7099:6	7099:6	8	}
SELECTION	7100:4	7101:6	6	
KEYWORD	7100:4	7100:4	7	else
LEAF_NODE	7100:4	7100:4	8	else
STATEMENTS	7101:6	7101:6	7	
EXPR_STATEMENT	7101:6	7101:49	8	CopyField ( TIFFTAG_COMPRESSION , compression ) ;
EXPR	7101:6	7101:6	9	CopyField ( TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	7101:6	7101:48	10	CopyField ( TIFFTAG_COMPRESSION , compression )
CALLEE	7101:6	7101:6	11	CopyField
LEAF_NODE	7101:6	7101:6	12	CopyField
LEAF_NODE	7101:15	7101:15	11	(
ARGUMENT	7101:16	7101:16	11	TIFFTAG_COMPRESSION
FIELD	7101:16	7101:16	12	TIFFTAG_COMPRESSION
LEAF_NODE	7101:16	7101:16	13	TIFFTAG_COMPRESSION
LEAF_NODE	7101:35	7101:35	11	,
ARGUMENT	7101:37	7101:37	11	compression
FIELD	7101:37	7101:37	12	compression
LEAF_NODE	7101:37	7101:37	13	compression
LEAF_NODE	7101:48	7101:48	11	)
LEAF_NODE	7101:49	7101:49	9	;
LEAF_NODE	7102:4	7102:4	5	}
SELECTION	7104:2	7105:4	3	
KEYWORD	7104:2	7104:2	4	if
LEAF_NODE	7104:2	7104:2	5	if
LEAF_NODE	7104:5	7104:5	4	(
CONDITION	7104:6	7104:6	4	compression == COMPRESSION_JPEG
EXPR	7104:6	7104:21	5	compression == COMPRESSION_JPEG
FIELD	7104:6	7104:6	6	compression
LEAF_NODE	7104:6	7104:6	7	compression
EQ_OPERATOR	7104:18	7104:18	6	==
LEAF_NODE	7104:18	7104:18	7	==
FIELD	7104:21	7104:21	6	COMPRESSION_JPEG
LEAF_NODE	7104:21	7104:21	7	COMPRESSION_JPEG
LEAF_NODE	7104:37	7104:37	4	)
STATEMENTS	7105:4	7120:4	4	
LEAF_NODE	7105:4	7105:4	5	{
STATEMENTS	7106:4	7118:4	5	
SELECTION	7106:4	7108:6	6	
KEYWORD	7106:4	7106:4	7	if
LEAF_NODE	7106:4	7106:4	8	if
LEAF_NODE	7106:7	7106:7	7	(
CONDITION	7106:8	7106:8	7	( input_photometric == PHOTOMETRIC_PALETTE ) || ( input_photometric == PHOTOMETRIC_MASK )
EXPR	7106:8	7106:8	8	( input_photometric == PHOTOMETRIC_PALETTE ) || ( input_photometric == PHOTOMETRIC_MASK )
OR	7106:8	7107:8	9	( input_photometric == PHOTOMETRIC_PALETTE ) || ( input_photometric == PHOTOMETRIC_MASK )
EXPR	7106:8	7106:49	10	( input_photometric == PHOTOMETRIC_PALETTE )
LEAF_NODE	7106:8	7106:8	11	(
FIELD	7106:9	7106:9	11	input_photometric
LEAF_NODE	7106:9	7106:9	12	input_photometric
EQ_OPERATOR	7106:27	7106:27	11	==
LEAF_NODE	7106:27	7106:27	12	==
FIELD	7106:30	7106:30	11	PHOTOMETRIC_PALETTE
LEAF_NODE	7106:30	7106:30	12	PHOTOMETRIC_PALETTE
LEAF_NODE	7106:49	7106:49	11	)
LEAF_NODE	7106:51	7106:51	10	||
EXPR	7107:8	7107:46	10	( input_photometric == PHOTOMETRIC_MASK )
LEAF_NODE	7107:8	7107:8	11	(
FIELD	7107:9	7107:9	11	input_photometric
LEAF_NODE	7107:9	7107:9	12	input_photometric
EQ_OPERATOR	7107:27	7107:27	11	==
LEAF_NODE	7107:27	7107:27	12	==
FIELD	7107:30	7107:30	11	PHOTOMETRIC_MASK
LEAF_NODE	7107:30	7107:30	12	PHOTOMETRIC_MASK
LEAF_NODE	7107:46	7107:46	11	)
LEAF_NODE	7107:47	7107:47	7	)
STATEMENTS	7108:6	7114:6	7	
LEAF_NODE	7108:6	7108:6	8	{
STATEMENTS	7109:6	7113:6	8	
EXPR_STATEMENT	7109:6	7112:36	9	TIFFError ( "writeSingleSection" , "JPEG compression cannot be used with %s image data" , ( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask" ) ;
EXPR	7109:6	7109:6	10	TIFFError ( "writeSingleSection" , "JPEG compression cannot be used with %s image data" , ( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask" )
FUNCTION_CALL	7109:6	7112:35	11	TIFFError ( "writeSingleSection" , "JPEG compression cannot be used with %s image data" , ( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask" )
CALLEE	7109:6	7109:6	12	TIFFError
LEAF_NODE	7109:6	7109:6	13	TIFFError
LEAF_NODE	7109:16	7109:16	12	(
ARGUMENT	7109:17	7109:17	12	"writeSingleSection"
FIELD	7109:17	7109:17	13	"writeSingleSection"
LEAF_NODE	7109:17	7109:17	14	"writeSingleSection"
LEAF_NODE	7109:37	7109:37	12	,
ARGUMENT	7110:17	7110:17	12	"JPEG compression cannot be used with %s image data"
FIELD	7110:17	7110:17	13	"JPEG compression cannot be used with %s image data"
LEAF_NODE	7110:17	7110:17	14	"JPEG compression cannot be used with %s image data"
LEAF_NODE	7110:69	7110:69	12	,
ARGUMENT	7111:3	7111:3	12	( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask"
COND_EXPR	7111:3	7112:29	13	( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask"
CONDITION	7111:3	7111:44	14	( input_photometric == PHOTOMETRIC_PALETTE )
LEAF_NODE	7111:3	7111:3	15	(
FIELD	7111:4	7111:4	15	input_photometric
LEAF_NODE	7111:4	7111:4	16	input_photometric
EQ_OPERATOR	7111:22	7111:22	15	==
LEAF_NODE	7111:22	7111:22	16	==
FIELD	7111:25	7111:25	15	PHOTOMETRIC_PALETTE
LEAF_NODE	7111:25	7111:25	16	PHOTOMETRIC_PALETTE
LEAF_NODE	7111:44	7111:44	15	)
LEAF_NODE	7111:46	7111:46	14	?
EXPR	7112:17	7112:17	14	"palette"
FIELD	7112:17	7112:17	15	"palette"
LEAF_NODE	7112:17	7112:17	16	"palette"
LEAF_NODE	7112:27	7112:27	14	:
FIELD	7112:29	7112:29	14	"mask"
LEAF_NODE	7112:29	7112:29	15	"mask"
LEAF_NODE	7112:35	7112:35	12	)
LEAF_NODE	7112:36	7112:36	10	;
JUMP_STATEMENT	7113:6	7113:17	9	return ( - 1 ) ;
KEYWORD	7113:6	7113:6	10	return
LEAF_NODE	7113:6	7113:6	11	return
DESTINATION	7113:13	7113:13	10	( - 1 )
EXPR	7113:13	7113:16	11	( - 1 )
LEAF_NODE	7113:13	7113:13	12	(
UNARY_EXPR	7113:14	7113:15	12	- 1
UNARY_OPERATOR	7113:14	7113:14	13	-
LEAF_NODE	7113:14	7113:14	14	-
FIELD	7113:15	7113:15	13	1
LEAF_NODE	7113:15	7113:15	14	1
LEAF_NODE	7113:16	7113:16	12	)
LEAF_NODE	7113:17	7113:17	10	;
LEAF_NODE	7114:6	7114:6	8	}
SELECTION	7115:4	7117:6	6	
KEYWORD	7115:4	7115:4	7	if
LEAF_NODE	7115:4	7115:4	8	if
LEAF_NODE	7115:7	7115:7	7	(
CONDITION	7115:8	7115:8	7	( input_photometric == PHOTOMETRIC_RGB ) && ( jpegcolormode == JPEGCOLORMODE_RGB )
EXPR	7115:8	7115:8	8	( input_photometric == PHOTOMETRIC_RGB ) && ( jpegcolormode == JPEGCOLORMODE_RGB )
AND	7115:8	7116:1	9	( input_photometric == PHOTOMETRIC_RGB ) && ( jpegcolormode == JPEGCOLORMODE_RGB )
EXPR	7115:8	7115:45	10	( input_photometric == PHOTOMETRIC_RGB )
LEAF_NODE	7115:8	7115:8	11	(
FIELD	7115:9	7115:9	11	input_photometric
LEAF_NODE	7115:9	7115:9	12	input_photometric
EQ_OPERATOR	7115:27	7115:27	11	==
LEAF_NODE	7115:27	7115:27	12	==
FIELD	7115:30	7115:30	11	PHOTOMETRIC_RGB
LEAF_NODE	7115:30	7115:30	12	PHOTOMETRIC_RGB
LEAF_NODE	7115:45	7115:45	11	)
LEAF_NODE	7115:47	7115:47	10	&&
EXPR	7116:1	7116:36	10	( jpegcolormode == JPEGCOLORMODE_RGB )
LEAF_NODE	7116:1	7116:1	11	(
FIELD	7116:2	7116:2	11	jpegcolormode
LEAF_NODE	7116:2	7116:2	12	jpegcolormode
EQ_OPERATOR	7116:16	7116:16	11	==
LEAF_NODE	7116:16	7116:16	12	==
FIELD	7116:19	7116:19	11	JPEGCOLORMODE_RGB
LEAF_NODE	7116:19	7116:19	12	JPEGCOLORMODE_RGB
LEAF_NODE	7116:36	7116:36	11	)
LEAF_NODE	7116:37	7116:37	7	)
STATEMENTS	7117:6	7117:6	7	
EXPR_STATEMENT	7117:6	7117:63	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ;
EXPR	7117:6	7117:6	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
FUNCTION_CALL	7117:6	7117:62	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
CALLEE	7117:6	7117:6	11	TIFFSetField
LEAF_NODE	7117:6	7117:6	12	TIFFSetField
LEAF_NODE	7117:18	7117:18	11	(
ARGUMENT	7117:19	7117:19	11	out
FIELD	7117:19	7117:19	12	out
LEAF_NODE	7117:19	7117:19	13	out
LEAF_NODE	7117:22	7117:22	11	,
ARGUMENT	7117:24	7117:24	11	TIFFTAG_PHOTOMETRIC
FIELD	7117:24	7117:24	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7117:24	7117:24	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7117:43	7117:43	11	,
ARGUMENT	7117:45	7117:45	11	PHOTOMETRIC_YCBCR
FIELD	7117:45	7117:45	12	PHOTOMETRIC_YCBCR
LEAF_NODE	7117:45	7117:45	13	PHOTOMETRIC_YCBCR
LEAF_NODE	7117:62	7117:62	11	)
LEAF_NODE	7117:63	7117:63	9	;
SELECTION	7118:4	7119:1	6	
KEYWORD	7118:4	7118:4	7	else
LEAF_NODE	7118:4	7118:4	8	else
STATEMENTS	7119:1	7119:1	7	
EXPR_STATEMENT	7119:1	7119:58	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric ) ;
EXPR	7119:1	7119:1	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric )
FUNCTION_CALL	7119:1	7119:57	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric )
CALLEE	7119:1	7119:1	11	TIFFSetField
LEAF_NODE	7119:1	7119:1	12	TIFFSetField
LEAF_NODE	7119:13	7119:13	11	(
ARGUMENT	7119:14	7119:14	11	out
FIELD	7119:14	7119:14	12	out
LEAF_NODE	7119:14	7119:14	13	out
LEAF_NODE	7119:17	7119:17	11	,
ARGUMENT	7119:19	7119:19	11	TIFFTAG_PHOTOMETRIC
FIELD	7119:19	7119:19	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7119:19	7119:19	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7119:38	7119:38	11	,
ARGUMENT	7119:40	7119:40	11	input_photometric
FIELD	7119:40	7119:40	12	input_photometric
LEAF_NODE	7119:40	7119:40	13	input_photometric
LEAF_NODE	7119:57	7119:57	11	)
LEAF_NODE	7119:58	7119:58	9	;
LEAF_NODE	7120:4	7120:4	5	}
SELECTION	7121:2	7122:4	3	
KEYWORD	7121:2	7121:2	4	else
LEAF_NODE	7121:2	7121:2	5	else
STATEMENTS	7122:4	7128:4	4	
LEAF_NODE	7122:4	7122:4	5	{
STATEMENTS	7123:4	7126:4	5	
SELECTION	7123:4	7124:6	6	
KEYWORD	7123:4	7123:4	7	if
LEAF_NODE	7123:4	7123:4	8	if
LEAF_NODE	7123:7	7123:7	7	(
CONDITION	7123:8	7123:8	7	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
EXPR	7123:8	7123:8	8	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
OR	7123:8	7123:45	9	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
EXPR	7123:8	7123:23	10	compression == COMPRESSION_SGILOG
FIELD	7123:8	7123:8	11	compression
LEAF_NODE	7123:8	7123:8	12	compression
EQ_OPERATOR	7123:20	7123:20	11	==
LEAF_NODE	7123:20	7123:20	12	==
FIELD	7123:23	7123:23	11	COMPRESSION_SGILOG
LEAF_NODE	7123:23	7123:23	12	COMPRESSION_SGILOG
LEAF_NODE	7123:42	7123:42	10	||
EXPR	7123:45	7123:60	10	compression == COMPRESSION_SGILOG24
FIELD	7123:45	7123:45	11	compression
LEAF_NODE	7123:45	7123:45	12	compression
EQ_OPERATOR	7123:57	7123:57	11	==
LEAF_NODE	7123:57	7123:57	12	==
FIELD	7123:60	7123:60	11	COMPRESSION_SGILOG24
LEAF_NODE	7123:60	7123:60	12	COMPRESSION_SGILOG24
LEAF_NODE	7123:80	7123:80	7	)
STATEMENTS	7124:6	7124:6	7	
EXPR_STATEMENT	7124:6	7125:41	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV ) ;
EXPR	7124:6	7124:6	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
FUNCTION_CALL	7124:6	7125:40	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
CALLEE	7124:6	7124:6	11	TIFFSetField
LEAF_NODE	7124:6	7124:6	12	TIFFSetField
LEAF_NODE	7124:18	7124:18	11	(
ARGUMENT	7124:19	7124:19	11	out
FIELD	7124:19	7124:19	12	out
LEAF_NODE	7124:19	7124:19	13	out
LEAF_NODE	7124:22	7124:22	11	,
ARGUMENT	7124:24	7124:24	11	TIFFTAG_PHOTOMETRIC
FIELD	7124:24	7124:24	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7124:24	7124:24	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7124:43	7124:43	11	,
ARGUMENT	7124:45	7124:45	11	spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
COND_EXPR	7124:45	7125:22	12	spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
CONDITION	7124:45	7124:52	13	spp == 1
FIELD	7124:45	7124:45	14	spp
LEAF_NODE	7124:45	7124:45	15	spp
EQ_OPERATOR	7124:49	7124:49	14	==
LEAF_NODE	7124:49	7124:49	15	==
FIELD	7124:52	7124:52	14	1
LEAF_NODE	7124:52	7124:52	15	1
LEAF_NODE	7124:54	7124:54	13	?
EXPR	7125:3	7125:3	13	PHOTOMETRIC_LOGL
FIELD	7125:3	7125:3	14	PHOTOMETRIC_LOGL
LEAF_NODE	7125:3	7125:3	15	PHOTOMETRIC_LOGL
LEAF_NODE	7125:20	7125:20	13	:
FIELD	7125:22	7125:22	13	PHOTOMETRIC_LOGLUV
LEAF_NODE	7125:22	7125:22	14	PHOTOMETRIC_LOGLUV
LEAF_NODE	7125:40	7125:40	11	)
LEAF_NODE	7125:41	7125:41	9	;
SELECTION	7126:4	7127:6	6	
KEYWORD	7126:4	7126:4	7	else
LEAF_NODE	7126:4	7126:4	8	else
STATEMENTS	7127:6	7127:6	7	
EXPR_STATEMENT	7127:6	7127:64	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , image -> photometric ) ;
EXPR	7127:6	7127:6	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , image -> photometric )
FUNCTION_CALL	7127:6	7127:63	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , image -> photometric )
CALLEE	7127:6	7127:6	11	TIFFSetField
LEAF_NODE	7127:6	7127:6	12	TIFFSetField
LEAF_NODE	7127:18	7127:18	11	(
ARGUMENT	7127:19	7127:19	11	out
FIELD	7127:19	7127:19	12	out
LEAF_NODE	7127:19	7127:19	13	out
LEAF_NODE	7127:22	7127:22	11	,
ARGUMENT	7127:24	7127:24	11	TIFFTAG_PHOTOMETRIC
FIELD	7127:24	7127:24	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7127:24	7127:24	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7127:43	7127:43	11	,
ARGUMENT	7127:45	7127:45	11	image -> photometric
FIELD	7127:45	7127:52	12	image -> photometric
LEAF_NODE	7127:45	7127:45	13	image
LEAF_NODE	7127:50	7127:50	13	->
LEAF_NODE	7127:52	7127:52	13	photometric
LEAF_NODE	7127:63	7127:63	11	)
LEAF_NODE	7127:64	7127:64	9	;
LEAF_NODE	7128:4	7128:4	5	}
EXPR_STATEMENT	7131:2	7133:80	3	TIFFError ( "writeSingleSection" , "Input photometric: %s" , ( input_photometric == PHOTOMETRIC_RGB ) ? "RGB" : ( ( input_photometric == PHOTOMETRIC_YCBCR ) ? "YCbCr" : "Not RGB or YCbCr" ) ) ;
EXPR	7131:2	7131:2	4	TIFFError ( "writeSingleSection" , "Input photometric: %s" , ( input_photometric == PHOTOMETRIC_RGB ) ? "RGB" : ( ( input_photometric == PHOTOMETRIC_YCBCR ) ? "YCbCr" : "Not RGB or YCbCr" ) )
FUNCTION_CALL	7131:2	7133:79	5	TIFFError ( "writeSingleSection" , "Input photometric: %s" , ( input_photometric == PHOTOMETRIC_RGB ) ? "RGB" : ( ( input_photometric == PHOTOMETRIC_YCBCR ) ? "YCbCr" : "Not RGB or YCbCr" ) )
CALLEE	7131:2	7131:2	6	TIFFError
LEAF_NODE	7131:2	7131:2	7	TIFFError
LEAF_NODE	7131:11	7131:11	6	(
ARGUMENT	7131:12	7131:12	6	"writeSingleSection"
FIELD	7131:12	7131:12	7	"writeSingleSection"
LEAF_NODE	7131:12	7131:12	8	"writeSingleSection"
LEAF_NODE	7131:32	7131:32	6	,
ARGUMENT	7131:34	7131:34	6	"Input photometric: %s"
FIELD	7131:34	7131:34	7	"Input photometric: %s"
LEAF_NODE	7131:34	7131:34	8	"Input photometric: %s"
LEAF_NODE	7131:57	7131:57	6	,
ARGUMENT	7132:5	7132:5	6	( input_photometric == PHOTOMETRIC_RGB ) ? "RGB" : ( ( input_photometric == PHOTOMETRIC_YCBCR ) ? "YCbCr" : "Not RGB or YCbCr" )
COND_EXPR	7132:5	7133:78	7	( input_photometric == PHOTOMETRIC_RGB ) ? "RGB" : ( ( input_photometric == PHOTOMETRIC_YCBCR ) ? "YCbCr" : "Not RGB or YCbCr" )
CONDITION	7132:5	7132:42	8	( input_photometric == PHOTOMETRIC_RGB )
LEAF_NODE	7132:5	7132:5	9	(
FIELD	7132:6	7132:6	9	input_photometric
LEAF_NODE	7132:6	7132:6	10	input_photometric
EQ_OPERATOR	7132:24	7132:24	9	==
LEAF_NODE	7132:24	7132:24	10	==
FIELD	7132:27	7132:27	9	PHOTOMETRIC_RGB
LEAF_NODE	7132:27	7132:27	10	PHOTOMETRIC_RGB
LEAF_NODE	7132:42	7132:42	9	)
LEAF_NODE	7132:44	7132:44	8	?
EXPR	7132:46	7132:46	8	"RGB"
FIELD	7132:46	7132:46	9	"RGB"
LEAF_NODE	7132:46	7132:46	10	"RGB"
LEAF_NODE	7132:52	7132:52	8	:
LEAF_NODE	7133:5	7133:5	8	(
COND_EXPR	7133:6	7133:60	8	( input_photometric == PHOTOMETRIC_YCBCR ) ? "YCbCr" : "Not RGB or YCbCr"
CONDITION	7133:6	7133:45	9	( input_photometric == PHOTOMETRIC_YCBCR )
LEAF_NODE	7133:6	7133:6	10	(
FIELD	7133:7	7133:7	10	input_photometric
LEAF_NODE	7133:7	7133:7	11	input_photometric
EQ_OPERATOR	7133:25	7133:25	10	==
LEAF_NODE	7133:25	7133:25	11	==
FIELD	7133:28	7133:28	10	PHOTOMETRIC_YCBCR
LEAF_NODE	7133:28	7133:28	11	PHOTOMETRIC_YCBCR
LEAF_NODE	7133:45	7133:45	10	)
LEAF_NODE	7133:47	7133:47	9	?
EXPR	7133:50	7133:50	9	"YCbCr"
FIELD	7133:50	7133:50	10	"YCbCr"
LEAF_NODE	7133:50	7133:50	11	"YCbCr"
LEAF_NODE	7133:58	7133:58	9	:
FIELD	7133:60	7133:60	9	"Not RGB or YCbCr"
LEAF_NODE	7133:60	7133:60	10	"Not RGB or YCbCr"
LEAF_NODE	7133:78	7133:78	8	)
LEAF_NODE	7133:79	7133:79	6	)
LEAF_NODE	7133:80	7133:80	4	;
SELECTION	7136:2	7140:4	3	
KEYWORD	7136:2	7136:2	4	if
LEAF_NODE	7136:2	7136:2	5	if
LEAF_NODE	7136:5	7136:5	4	(
CONDITION	7136:6	7136:6	4	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) ) && ( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
EXPR	7136:6	7136:6	5	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) ) && ( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
AND	7136:6	7138:6	6	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) ) && ( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
EXPR	7136:6	7137:49	7	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) )
LEAF_NODE	7136:6	7136:6	8	(
OR	7136:7	7137:7	8	( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV )
EXPR	7136:7	7136:45	9	( input_photometric == PHOTOMETRIC_LOGL )
LEAF_NODE	7136:7	7136:7	10	(
FIELD	7136:8	7136:8	10	input_photometric
LEAF_NODE	7136:8	7136:8	11	input_photometric
EQ_OPERATOR	7136:26	7136:26	10	==
LEAF_NODE	7136:26	7136:26	11	==
FIELD	7136:29	7136:29	10	PHOTOMETRIC_LOGL
LEAF_NODE	7136:29	7136:29	11	PHOTOMETRIC_LOGL
LEAF_NODE	7136:45	7136:45	10	)
LEAF_NODE	7136:47	7136:47	9	||
EXPR	7137:7	7137:48	9	( input_photometric == PHOTOMETRIC_LOGLUV )
LEAF_NODE	7137:7	7137:7	10	(
FIELD	7137:8	7137:8	10	input_photometric
LEAF_NODE	7137:8	7137:8	11	input_photometric
EQ_OPERATOR	7137:26	7137:26	10	==
LEAF_NODE	7137:26	7137:26	11	==
FIELD	7137:30	7137:30	10	PHOTOMETRIC_LOGLUV
LEAF_NODE	7137:30	7137:30	11	PHOTOMETRIC_LOGLUV
LEAF_NODE	7137:48	7137:48	10	)
LEAF_NODE	7137:49	7137:49	8	)
LEAF_NODE	7137:51	7137:51	7	&&
EXPR	7138:6	7139:44	7	( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
LEAF_NODE	7138:6	7138:6	8	(
AND	7138:7	7139:7	8	( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 )
EXPR	7138:7	7138:41	9	( compression != COMPRESSION_SGILOG )
LEAF_NODE	7138:7	7138:7	10	(
FIELD	7138:8	7138:8	10	compression
LEAF_NODE	7138:8	7138:8	11	compression
EQ_OPERATOR	7138:20	7138:20	10	!=
LEAF_NODE	7138:20	7138:20	11	!=
FIELD	7138:23	7138:23	10	COMPRESSION_SGILOG
LEAF_NODE	7138:23	7138:23	11	COMPRESSION_SGILOG
LEAF_NODE	7138:41	7138:41	10	)
LEAF_NODE	7138:43	7138:43	9	&&
EXPR	7139:7	7139:43	9	( compression != COMPRESSION_SGILOG24 )
LEAF_NODE	7139:7	7139:7	10	(
FIELD	7139:8	7139:8	10	compression
LEAF_NODE	7139:8	7139:8	11	compression
EQ_OPERATOR	7139:20	7139:20	10	!=
LEAF_NODE	7139:20	7139:20	11	!=
FIELD	7139:23	7139:23	10	COMPRESSION_SGILOG24
LEAF_NODE	7139:23	7139:23	11	COMPRESSION_SGILOG24
LEAF_NODE	7139:43	7139:43	10	)
LEAF_NODE	7139:44	7139:44	8	)
LEAF_NODE	7139:45	7139:45	4	)
STATEMENTS	7140:4	7144:4	4	
LEAF_NODE	7140:4	7140:4	5	{
STATEMENTS	7141:4	7143:4	5	
EXPR_STATEMENT	7141:4	7142:85	6	TIFFError ( "writeSingleSection" , "LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression" ) ;
EXPR	7141:4	7141:4	7	TIFFError ( "writeSingleSection" , "LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression" )
FUNCTION_CALL	7141:4	7142:84	8	TIFFError ( "writeSingleSection" , "LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression" )
CALLEE	7141:4	7141:4	9	TIFFError
LEAF_NODE	7141:4	7141:4	10	TIFFError
LEAF_NODE	7141:13	7141:13	9	(
ARGUMENT	7141:14	7141:14	9	"writeSingleSection"
FIELD	7141:14	7141:14	10	"writeSingleSection"
LEAF_NODE	7141:14	7141:14	11	"writeSingleSection"
LEAF_NODE	7141:34	7141:34	9	,
ARGUMENT	7142:14	7142:14	9	"LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression"
FIELD	7142:14	7142:14	10	"LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression"
LEAF_NODE	7142:14	7142:14	11	"LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression"
LEAF_NODE	7142:84	7142:84	9	)
LEAF_NODE	7142:85	7142:85	7	;
JUMP_STATEMENT	7143:4	7143:15	6	return ( - 1 ) ;
KEYWORD	7143:4	7143:4	7	return
LEAF_NODE	7143:4	7143:4	8	return
DESTINATION	7143:11	7143:11	7	( - 1 )
EXPR	7143:11	7143:14	8	( - 1 )
LEAF_NODE	7143:11	7143:11	9	(
UNARY_EXPR	7143:12	7143:13	9	- 1
UNARY_OPERATOR	7143:12	7143:12	10	-
LEAF_NODE	7143:12	7143:12	11	-
FIELD	7143:13	7143:13	10	1
LEAF_NODE	7143:13	7143:13	11	1
LEAF_NODE	7143:14	7143:14	9	)
LEAF_NODE	7143:15	7143:15	7	;
LEAF_NODE	7144:4	7144:4	5	}
SELECTION	7146:2	7147:4	3	
KEYWORD	7146:2	7146:2	4	if
LEAF_NODE	7146:2	7146:2	5	if
LEAF_NODE	7146:5	7146:5	4	(
CONDITION	7146:6	7146:6	4	fillorder != 0
EXPR	7146:6	7146:19	5	fillorder != 0
FIELD	7146:6	7146:6	6	fillorder
LEAF_NODE	7146:6	7146:6	7	fillorder
EQ_OPERATOR	7146:16	7146:16	6	!=
LEAF_NODE	7146:16	7146:16	7	!=
FIELD	7146:19	7146:19	6	0
LEAF_NODE	7146:19	7146:19	7	0
LEAF_NODE	7146:20	7146:20	4	)
STATEMENTS	7147:4	7147:4	4	
EXPR_STATEMENT	7147:4	7147:51	5	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder ) ;
EXPR	7147:4	7147:4	6	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
FUNCTION_CALL	7147:4	7147:50	7	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
CALLEE	7147:4	7147:4	8	TIFFSetField
LEAF_NODE	7147:4	7147:4	9	TIFFSetField
LEAF_NODE	7147:16	7147:16	8	(
ARGUMENT	7147:17	7147:17	8	out
FIELD	7147:17	7147:17	9	out
LEAF_NODE	7147:17	7147:17	10	out
LEAF_NODE	7147:20	7147:20	8	,
ARGUMENT	7147:22	7147:22	8	TIFFTAG_FILLORDER
FIELD	7147:22	7147:22	9	TIFFTAG_FILLORDER
LEAF_NODE	7147:22	7147:22	10	TIFFTAG_FILLORDER
LEAF_NODE	7147:39	7147:39	8	,
ARGUMENT	7147:41	7147:41	8	fillorder
FIELD	7147:41	7147:41	9	fillorder
LEAF_NODE	7147:41	7147:41	10	fillorder
LEAF_NODE	7147:50	7147:50	8	)
LEAF_NODE	7147:51	7147:51	6	;
SELECTION	7148:2	7149:4	3	
KEYWORD	7148:2	7148:2	4	else
LEAF_NODE	7148:2	7148:2	5	else
STATEMENTS	7149:4	7149:4	4	
EXPR_STATEMENT	7149:4	7149:45	5	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT ) ;
EXPR	7149:4	7149:4	6	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT )
FUNCTION_CALL	7149:4	7149:44	7	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT )
CALLEE	7149:4	7149:4	8	CopyTag
LEAF_NODE	7149:4	7149:4	9	CopyTag
LEAF_NODE	7149:11	7149:11	8	(
ARGUMENT	7149:12	7149:12	8	TIFFTAG_FILLORDER
FIELD	7149:12	7149:12	9	TIFFTAG_FILLORDER
LEAF_NODE	7149:12	7149:12	10	TIFFTAG_FILLORDER
LEAF_NODE	7149:29	7149:29	8	,
ARGUMENT	7149:31	7149:31	8	1
FIELD	7149:31	7149:31	9	1
LEAF_NODE	7149:31	7149:31	10	1
LEAF_NODE	7149:32	7149:32	8	,
ARGUMENT	7149:34	7149:34	8	TIFF_SHORT
FIELD	7149:34	7149:34	9	TIFF_SHORT
LEAF_NODE	7149:34	7149:34	10	TIFF_SHORT
LEAF_NODE	7149:44	7149:44	8	)
LEAF_NODE	7149:45	7149:45	6	;
EXPR_STATEMENT	7158:2	7158:60	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , image -> orientation ) ;
EXPR	7158:2	7158:2	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , image -> orientation )
FUNCTION_CALL	7158:2	7158:59	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , image -> orientation )
CALLEE	7158:2	7158:2	6	TIFFSetField
LEAF_NODE	7158:2	7158:2	7	TIFFSetField
LEAF_NODE	7158:14	7158:14	6	(
ARGUMENT	7158:15	7158:15	6	out
FIELD	7158:15	7158:15	7	out
LEAF_NODE	7158:15	7158:15	8	out
LEAF_NODE	7158:18	7158:18	6	,
ARGUMENT	7158:20	7158:20	6	TIFFTAG_ORIENTATION
FIELD	7158:20	7158:20	7	TIFFTAG_ORIENTATION
LEAF_NODE	7158:20	7158:20	8	TIFFTAG_ORIENTATION
LEAF_NODE	7158:39	7158:39	6	,
ARGUMENT	7158:41	7158:41	6	image -> orientation
FIELD	7158:41	7158:48	7	image -> orientation
LEAF_NODE	7158:41	7158:41	8	image
LEAF_NODE	7158:46	7158:46	8	->
LEAF_NODE	7158:48	7158:48	8	orientation
LEAF_NODE	7158:59	7158:59	6	)
LEAF_NODE	7158:60	7158:60	4	;
SELECTION	7165:2	7166:4	3	
KEYWORD	7165:2	7165:2	4	if
LEAF_NODE	7165:2	7165:2	5	if
LEAF_NODE	7165:5	7165:5	4	(
CONDITION	7165:6	7165:6	4	outtiled == - 1
EXPR	7165:6	7165:18	5	outtiled == - 1
FIELD	7165:6	7165:6	6	outtiled
LEAF_NODE	7165:6	7165:6	7	outtiled
EQ_OPERATOR	7165:15	7165:15	6	==
LEAF_NODE	7165:15	7165:15	7	==
UNARY_EXPR	7165:18	7165:19	6	- 1
UNARY_OPERATOR	7165:18	7165:18	7	-
LEAF_NODE	7165:18	7165:18	8	-
FIELD	7165:19	7165:19	7	1
LEAF_NODE	7165:19	7165:19	8	1
LEAF_NODE	7165:20	7165:20	4	)
STATEMENTS	7166:4	7166:4	4	
EXPR_STATEMENT	7166:4	7166:30	5	outtiled = TIFFIsTiled ( in ) ;
EXPR	7166:4	7166:4	6	outtiled = TIFFIsTiled ( in )
ASSIGN	7166:4	7166:15	7	outtiled = TIFFIsTiled ( in )
LVAL	7166:4	7166:4	8	outtiled
FIELD	7166:4	7166:4	9	outtiled
LEAF_NODE	7166:4	7166:4	10	outtiled
ASSIGN_OP	7166:13	7166:13	8	=
LEAF_NODE	7166:13	7166:13	9	=
RVAL	7166:15	7166:15	8	TIFFIsTiled ( in )
FUNCTION_CALL	7166:15	7166:29	9	TIFFIsTiled ( in )
CALLEE	7166:15	7166:15	10	TIFFIsTiled
LEAF_NODE	7166:15	7166:15	11	TIFFIsTiled
LEAF_NODE	7166:26	7166:26	10	(
ARGUMENT	7166:27	7166:27	10	in
FIELD	7166:27	7166:27	11	in
LEAF_NODE	7166:27	7166:27	12	in
LEAF_NODE	7166:29	7166:29	10	)
LEAF_NODE	7166:30	7166:30	6	;
SELECTION	7167:2	7167:16	3	
KEYWORD	7167:2	7167:2	4	if
LEAF_NODE	7167:2	7167:2	5	if
LEAF_NODE	7167:5	7167:5	4	(
CONDITION	7167:6	7167:6	4	outtiled
EXPR	7167:6	7167:6	5	outtiled
FIELD	7167:6	7167:6	6	outtiled
LEAF_NODE	7167:6	7167:6	7	outtiled
LEAF_NODE	7167:14	7167:14	4	)
STATEMENTS	7167:16	7184:4	4	
LEAF_NODE	7167:16	7167:16	5	{
STATEMENTS	7174:4	7183:4	5	
SELECTION	7174:4	7175:6	6	
KEYWORD	7174:4	7174:4	7	if
LEAF_NODE	7174:4	7174:4	8	if
LEAF_NODE	7174:7	7174:7	7	(
CONDITION	7174:8	7174:8	7	tilewidth == ( uint32 ) 0
EXPR	7174:8	7174:30	8	tilewidth == ( uint32 ) 0
FIELD	7174:8	7174:8	9	tilewidth
LEAF_NODE	7174:8	7174:8	10	tilewidth
EQ_OPERATOR	7174:18	7174:18	9	==
LEAF_NODE	7174:18	7174:18	10	==
LEAF_NODE	7174:21	7174:21	9	(
TYPE_NAME	7174:22	7174:22	9	uint32
LEAF_NODE	7174:22	7174:22	10	uint32
LEAF_NODE	7174:28	7174:28	9	)
FIELD	7174:30	7174:30	9	0
LEAF_NODE	7174:30	7174:30	10	0
LEAF_NODE	7174:31	7174:31	7	)
STATEMENTS	7175:6	7175:6	7	
EXPR_STATEMENT	7175:6	7175:53	8	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth ) ;
EXPR	7175:6	7175:6	9	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth )
FUNCTION_CALL	7175:6	7175:52	10	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth )
CALLEE	7175:6	7175:6	11	TIFFGetField
LEAF_NODE	7175:6	7175:6	12	TIFFGetField
LEAF_NODE	7175:18	7175:18	11	(
ARGUMENT	7175:19	7175:19	11	in
FIELD	7175:19	7175:19	12	in
LEAF_NODE	7175:19	7175:19	13	in
LEAF_NODE	7175:21	7175:21	11	,
ARGUMENT	7175:23	7175:23	11	TIFFTAG_TILEWIDTH
FIELD	7175:23	7175:23	12	TIFFTAG_TILEWIDTH
LEAF_NODE	7175:23	7175:23	13	TIFFTAG_TILEWIDTH
LEAF_NODE	7175:40	7175:40	11	,
ARGUMENT	7175:42	7175:42	11	& tilewidth
UNARY_EXPR	7175:42	7175:43	12	& tilewidth
UNARY_OPERATOR	7175:42	7175:42	13	&
LEAF_NODE	7175:42	7175:42	14	&
FIELD	7175:43	7175:43	13	tilewidth
LEAF_NODE	7175:43	7175:43	14	tilewidth
LEAF_NODE	7175:52	7175:52	11	)
LEAF_NODE	7175:53	7175:53	9	;
SELECTION	7176:4	7177:6	6	
KEYWORD	7176:4	7176:4	7	if
LEAF_NODE	7176:4	7176:4	8	if
LEAF_NODE	7176:7	7176:7	7	(
CONDITION	7176:8	7176:8	7	tilelength == ( uint32 ) 0
EXPR	7176:8	7176:31	8	tilelength == ( uint32 ) 0
FIELD	7176:8	7176:8	9	tilelength
LEAF_NODE	7176:8	7176:8	10	tilelength
EQ_OPERATOR	7176:19	7176:19	9	==
LEAF_NODE	7176:19	7176:19	10	==
LEAF_NODE	7176:22	7176:22	9	(
TYPE_NAME	7176:23	7176:23	9	uint32
LEAF_NODE	7176:23	7176:23	10	uint32
LEAF_NODE	7176:29	7176:29	9	)
FIELD	7176:31	7176:31	9	0
LEAF_NODE	7176:31	7176:31	10	0
LEAF_NODE	7176:32	7176:32	7	)
STATEMENTS	7177:6	7177:6	7	
EXPR_STATEMENT	7177:6	7177:55	8	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength ) ;
EXPR	7177:6	7177:6	9	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength )
FUNCTION_CALL	7177:6	7177:54	10	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength )
CALLEE	7177:6	7177:6	11	TIFFGetField
LEAF_NODE	7177:6	7177:6	12	TIFFGetField
LEAF_NODE	7177:18	7177:18	11	(
ARGUMENT	7177:19	7177:19	11	in
FIELD	7177:19	7177:19	12	in
LEAF_NODE	7177:19	7177:19	13	in
LEAF_NODE	7177:21	7177:21	11	,
ARGUMENT	7177:23	7177:23	11	TIFFTAG_TILELENGTH
FIELD	7177:23	7177:23	12	TIFFTAG_TILELENGTH
LEAF_NODE	7177:23	7177:23	13	TIFFTAG_TILELENGTH
LEAF_NODE	7177:41	7177:41	11	,
ARGUMENT	7177:43	7177:43	11	& tilelength
UNARY_EXPR	7177:43	7177:44	12	& tilelength
UNARY_OPERATOR	7177:43	7177:43	13	&
LEAF_NODE	7177:43	7177:43	14	&
FIELD	7177:44	7177:44	13	tilelength
LEAF_NODE	7177:44	7177:44	14	tilelength
LEAF_NODE	7177:54	7177:54	11	)
LEAF_NODE	7177:55	7177:55	9	;
SELECTION	7179:4	7180:6	6	
KEYWORD	7179:4	7179:4	7	if
LEAF_NODE	7179:4	7179:4	8	if
LEAF_NODE	7179:7	7179:7	7	(
CONDITION	7179:8	7179:8	7	tilewidth == 0 || tilelength == 0
EXPR	7179:8	7179:8	8	tilewidth == 0 || tilelength == 0
OR	7179:8	7179:26	9	tilewidth == 0 || tilelength == 0
EXPR	7179:8	7179:21	10	tilewidth == 0
FIELD	7179:8	7179:8	11	tilewidth
LEAF_NODE	7179:8	7179:8	12	tilewidth
EQ_OPERATOR	7179:18	7179:18	11	==
LEAF_NODE	7179:18	7179:18	12	==
FIELD	7179:21	7179:21	11	0
LEAF_NODE	7179:21	7179:21	12	0
LEAF_NODE	7179:23	7179:23	10	||
EXPR	7179:26	7179:40	10	tilelength == 0
FIELD	7179:26	7179:26	11	tilelength
LEAF_NODE	7179:26	7179:26	12	tilelength
EQ_OPERATOR	7179:37	7179:37	11	==
LEAF_NODE	7179:37	7179:37	12	==
FIELD	7179:40	7179:40	11	0
LEAF_NODE	7179:40	7179:40	12	0
LEAF_NODE	7179:41	7179:41	7	)
STATEMENTS	7180:6	7180:6	7	
EXPR_STATEMENT	7180:6	7180:55	8	TIFFDefaultTileSize ( out , & tilewidth , & tilelength ) ;
EXPR	7180:6	7180:6	9	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
FUNCTION_CALL	7180:6	7180:54	10	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
CALLEE	7180:6	7180:6	11	TIFFDefaultTileSize
LEAF_NODE	7180:6	7180:6	12	TIFFDefaultTileSize
LEAF_NODE	7180:25	7180:25	11	(
ARGUMENT	7180:26	7180:26	11	out
FIELD	7180:26	7180:26	12	out
LEAF_NODE	7180:26	7180:26	13	out
LEAF_NODE	7180:29	7180:29	11	,
ARGUMENT	7180:31	7180:31	11	& tilewidth
UNARY_EXPR	7180:31	7180:32	12	& tilewidth
UNARY_OPERATOR	7180:31	7180:31	13	&
LEAF_NODE	7180:31	7180:31	14	&
FIELD	7180:32	7180:32	13	tilewidth
LEAF_NODE	7180:32	7180:32	14	tilewidth
LEAF_NODE	7180:41	7180:41	11	,
ARGUMENT	7180:43	7180:43	11	& tilelength
UNARY_EXPR	7180:43	7180:44	12	& tilelength
UNARY_OPERATOR	7180:43	7180:43	13	&
LEAF_NODE	7180:43	7180:43	14	&
FIELD	7180:44	7180:44	13	tilelength
LEAF_NODE	7180:44	7180:44	14	tilelength
LEAF_NODE	7180:54	7180:54	11	)
LEAF_NODE	7180:55	7180:55	9	;
EXPR_STATEMENT	7181:4	7181:53	6	TIFFDefaultTileSize ( out , & tilewidth , & tilelength ) ;
EXPR	7181:4	7181:4	7	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
FUNCTION_CALL	7181:4	7181:52	8	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
CALLEE	7181:4	7181:4	9	TIFFDefaultTileSize
LEAF_NODE	7181:4	7181:4	10	TIFFDefaultTileSize
LEAF_NODE	7181:23	7181:23	9	(
ARGUMENT	7181:24	7181:24	9	out
FIELD	7181:24	7181:24	10	out
LEAF_NODE	7181:24	7181:24	11	out
LEAF_NODE	7181:27	7181:27	9	,
ARGUMENT	7181:29	7181:29	9	& tilewidth
UNARY_EXPR	7181:29	7181:30	10	& tilewidth
UNARY_OPERATOR	7181:29	7181:29	11	&
LEAF_NODE	7181:29	7181:29	12	&
FIELD	7181:30	7181:30	11	tilewidth
LEAF_NODE	7181:30	7181:30	12	tilewidth
LEAF_NODE	7181:39	7181:39	9	,
ARGUMENT	7181:41	7181:41	9	& tilelength
UNARY_EXPR	7181:41	7181:42	10	& tilelength
UNARY_OPERATOR	7181:41	7181:41	11	&
LEAF_NODE	7181:41	7181:41	12	&
FIELD	7181:42	7181:42	11	tilelength
LEAF_NODE	7181:42	7181:42	12	tilelength
LEAF_NODE	7181:52	7181:52	9	)
LEAF_NODE	7181:53	7181:53	7	;
EXPR_STATEMENT	7182:4	7182:51	6	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth ) ;
EXPR	7182:4	7182:4	7	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth )
FUNCTION_CALL	7182:4	7182:50	8	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth )
CALLEE	7182:4	7182:4	9	TIFFSetField
LEAF_NODE	7182:4	7182:4	10	TIFFSetField
LEAF_NODE	7182:16	7182:16	9	(
ARGUMENT	7182:17	7182:17	9	out
FIELD	7182:17	7182:17	10	out
LEAF_NODE	7182:17	7182:17	11	out
LEAF_NODE	7182:20	7182:20	9	,
ARGUMENT	7182:22	7182:22	9	TIFFTAG_TILEWIDTH
FIELD	7182:22	7182:22	10	TIFFTAG_TILEWIDTH
LEAF_NODE	7182:22	7182:22	11	TIFFTAG_TILEWIDTH
LEAF_NODE	7182:39	7182:39	9	,
ARGUMENT	7182:41	7182:41	9	tilewidth
FIELD	7182:41	7182:41	10	tilewidth
LEAF_NODE	7182:41	7182:41	11	tilewidth
LEAF_NODE	7182:50	7182:50	9	)
LEAF_NODE	7182:51	7182:51	7	;
EXPR_STATEMENT	7183:4	7183:53	6	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength ) ;
EXPR	7183:4	7183:4	7	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength )
FUNCTION_CALL	7183:4	7183:52	8	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength )
CALLEE	7183:4	7183:4	9	TIFFSetField
LEAF_NODE	7183:4	7183:4	10	TIFFSetField
LEAF_NODE	7183:16	7183:16	9	(
ARGUMENT	7183:17	7183:17	9	out
FIELD	7183:17	7183:17	10	out
LEAF_NODE	7183:17	7183:17	11	out
LEAF_NODE	7183:20	7183:20	9	,
ARGUMENT	7183:22	7183:22	9	TIFFTAG_TILELENGTH
FIELD	7183:22	7183:22	10	TIFFTAG_TILELENGTH
LEAF_NODE	7183:22	7183:22	11	TIFFTAG_TILELENGTH
LEAF_NODE	7183:40	7183:40	9	,
ARGUMENT	7183:42	7183:42	9	tilelength
FIELD	7183:42	7183:42	10	tilelength
LEAF_NODE	7183:42	7183:42	11	tilelength
LEAF_NODE	7183:52	7183:52	9	)
LEAF_NODE	7183:53	7183:53	7	;
LEAF_NODE	7184:4	7184:4	5	}
SELECTION	7184:6	7184:11	3	
KEYWORD	7184:6	7184:6	4	else
LEAF_NODE	7184:6	7184:6	5	else
STATEMENTS	7184:11	7204:1	4	
LEAF_NODE	7184:11	7184:11	5	{
STATEMENTS	7190:1	7203:1	5	
SELECTION	7190:1	7191:10	6	
KEYWORD	7190:1	7190:1	7	if
LEAF_NODE	7190:1	7190:1	8	if
LEAF_NODE	7190:4	7190:4	7	(
CONDITION	7190:5	7190:5	7	rowsperstrip == ( uint32 ) 0
EXPR	7190:5	7190:30	8	rowsperstrip == ( uint32 ) 0
FIELD	7190:5	7190:5	9	rowsperstrip
LEAF_NODE	7190:5	7190:5	10	rowsperstrip
EQ_OPERATOR	7190:18	7190:18	9	==
LEAF_NODE	7190:18	7190:18	10	==
LEAF_NODE	7190:21	7190:21	9	(
TYPE_NAME	7190:22	7190:22	9	uint32
LEAF_NODE	7190:22	7190:22	10	uint32
LEAF_NODE	7190:28	7190:28	9	)
FIELD	7190:30	7190:30	9	0
LEAF_NODE	7190:30	7190:30	10	0
LEAF_NODE	7190:31	7190:31	7	)
STATEMENTS	7191:10	7199:3	7	
LEAF_NODE	7191:10	7191:10	8	{
STATEMENTS	7192:3	7194:10	8	
SELECTION	7192:3	7193:5	9	
KEYWORD	7192:3	7192:3	10	if
LEAF_NODE	7192:3	7192:3	11	if
LEAF_NODE	7192:6	7192:6	10	(
CONDITION	7192:7	7192:7	10	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
EXPR	7192:7	7192:7	11	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_EXPR	7192:7	7192:8	12	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_OPERATOR	7192:7	7192:7	13	!
LEAF_NODE	7192:7	7192:7	14	!
FUNCTION_CALL	7192:8	7192:60	13	TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	7192:8	7192:8	14	TIFFGetField
LEAF_NODE	7192:8	7192:8	15	TIFFGetField
LEAF_NODE	7192:20	7192:20	14	(
ARGUMENT	7192:21	7192:21	14	in
FIELD	7192:21	7192:21	15	in
LEAF_NODE	7192:21	7192:21	16	in
LEAF_NODE	7192:23	7192:23	14	,
ARGUMENT	7192:25	7192:25	14	TIFFTAG_ROWSPERSTRIP
FIELD	7192:25	7192:25	15	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7192:25	7192:25	16	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7192:45	7192:45	14	,
ARGUMENT	7192:47	7192:47	14	& rowsperstrip
UNARY_EXPR	7192:47	7192:48	15	& rowsperstrip
UNARY_OPERATOR	7192:47	7192:47	16	&
LEAF_NODE	7192:47	7192:47	17	&
FIELD	7192:48	7192:48	16	rowsperstrip
LEAF_NODE	7192:48	7192:48	17	rowsperstrip
LEAF_NODE	7192:60	7192:60	14	)
LEAF_NODE	7192:61	7192:61	10	)
STATEMENTS	7193:5	7193:5	10	
EXPR_STATEMENT	7193:5	7193:59	11	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ;
EXPR	7193:5	7193:5	12	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	7193:5	7193:20	13	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	7193:5	7193:5	14	rowsperstrip
FIELD	7193:5	7193:5	15	rowsperstrip
LEAF_NODE	7193:5	7193:5	16	rowsperstrip
ASSIGN_OP	7193:18	7193:18	14	=
LEAF_NODE	7193:18	7193:18	15	=
RVAL	7193:20	7193:20	14	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	7193:20	7193:58	15	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	7193:20	7193:20	16	TIFFDefaultStripSize
LEAF_NODE	7193:20	7193:20	17	TIFFDefaultStripSize
LEAF_NODE	7193:40	7193:40	16	(
ARGUMENT	7193:41	7193:41	16	out
FIELD	7193:41	7193:41	17	out
LEAF_NODE	7193:41	7193:41	18	out
LEAF_NODE	7193:44	7193:44	16	,
ARGUMENT	7193:46	7193:46	16	rowsperstrip
FIELD	7193:46	7193:46	17	rowsperstrip
LEAF_NODE	7193:46	7193:46	18	rowsperstrip
LEAF_NODE	7193:58	7193:58	16	)
LEAF_NODE	7193:59	7193:59	12	;
SELECTION	7194:10	7195:12	9	
KEYWORD	7194:10	7194:10	10	if
LEAF_NODE	7194:10	7194:10	11	if
LEAF_NODE	7194:13	7194:13	10	(
CONDITION	7194:14	7194:14	10	compression != COMPRESSION_JPEG
EXPR	7194:14	7194:29	11	compression != COMPRESSION_JPEG
FIELD	7194:14	7194:14	12	compression
LEAF_NODE	7194:14	7194:14	13	compression
EQ_OPERATOR	7194:26	7194:26	12	!=
LEAF_NODE	7194:26	7194:26	13	!=
FIELD	7194:29	7194:29	12	COMPRESSION_JPEG
LEAF_NODE	7194:29	7194:29	13	COMPRESSION_JPEG
LEAF_NODE	7194:45	7194:45	10	)
STATEMENTS	7195:12	7198:5	10	
LEAF_NODE	7195:12	7195:12	11	{
STATEMENTS	7196:7	7196:7	11	
SELECTION	7196:7	7197:7	12	
KEYWORD	7196:7	7196:7	13	if
LEAF_NODE	7196:7	7196:7	14	if
LEAF_NODE	7196:10	7196:10	13	(
CONDITION	7196:11	7196:11	13	rowsperstrip > length
EXPR	7196:11	7196:26	14	rowsperstrip > length
FIELD	7196:11	7196:11	15	rowsperstrip
LEAF_NODE	7196:11	7196:11	16	rowsperstrip
REL_OPERATOR	7196:24	7196:24	15	>
LEAF_NODE	7196:24	7196:24	16	>
FIELD	7196:26	7196:26	15	length
LEAF_NODE	7196:26	7196:26	16	length
LEAF_NODE	7196:32	7196:32	13	)
STATEMENTS	7197:7	7197:7	13	
EXPR_STATEMENT	7197:7	7197:28	14	rowsperstrip = length ;
EXPR	7197:7	7197:7	15	rowsperstrip = length
ASSIGN	7197:7	7197:22	16	rowsperstrip = length
LVAL	7197:7	7197:7	17	rowsperstrip
FIELD	7197:7	7197:7	18	rowsperstrip
LEAF_NODE	7197:7	7197:7	19	rowsperstrip
ASSIGN_OP	7197:20	7197:20	17	=
LEAF_NODE	7197:20	7197:20	18	=
RVAL	7197:22	7197:22	17	length
FIELD	7197:22	7197:22	18	length
LEAF_NODE	7197:22	7197:22	19	length
LEAF_NODE	7197:28	7197:28	15	;
LEAF_NODE	7198:5	7198:5	11	}
LEAF_NODE	7199:3	7199:3	8	}
SELECTION	7200:1	7201:10	6	
KEYWORD	7200:1	7200:1	7	else
LEAF_NODE	7200:1	7200:1	8	else
STATEMENTS	7201:10	7201:10	7	
SELECTION	7201:10	7202:5	8	
KEYWORD	7201:10	7201:10	9	if
LEAF_NODE	7201:10	7201:10	10	if
LEAF_NODE	7201:13	7201:13	9	(
CONDITION	7201:14	7201:14	9	rowsperstrip == ( uint32 ) - 1
EXPR	7201:14	7201:39	10	rowsperstrip == ( uint32 ) - 1
FIELD	7201:14	7201:14	11	rowsperstrip
LEAF_NODE	7201:14	7201:14	12	rowsperstrip
EQ_OPERATOR	7201:27	7201:27	11	==
LEAF_NODE	7201:27	7201:27	12	==
LEAF_NODE	7201:30	7201:30	11	(
TYPE_NAME	7201:31	7201:31	11	uint32
LEAF_NODE	7201:31	7201:31	12	uint32
LEAF_NODE	7201:37	7201:37	11	)
UNARY_EXPR	7201:39	7201:40	11	- 1
UNARY_OPERATOR	7201:39	7201:39	12	-
LEAF_NODE	7201:39	7201:39	13	-
FIELD	7201:40	7201:40	12	1
LEAF_NODE	7201:40	7201:40	13	1
LEAF_NODE	7201:41	7201:41	9	)
STATEMENTS	7202:5	7202:5	9	
EXPR_STATEMENT	7202:5	7202:26	10	rowsperstrip = length ;
EXPR	7202:5	7202:5	11	rowsperstrip = length
ASSIGN	7202:5	7202:20	12	rowsperstrip = length
LVAL	7202:5	7202:5	13	rowsperstrip
FIELD	7202:5	7202:5	14	rowsperstrip
LEAF_NODE	7202:5	7202:5	15	rowsperstrip
ASSIGN_OP	7202:18	7202:18	13	=
LEAF_NODE	7202:18	7202:18	14	=
RVAL	7202:20	7202:20	13	length
FIELD	7202:20	7202:20	14	length
LEAF_NODE	7202:20	7202:20	15	length
LEAF_NODE	7202:26	7202:26	11	;
EXPR_STATEMENT	7203:1	7203:54	6	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	7203:1	7203:1	7	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	7203:1	7203:53	8	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	7203:1	7203:1	9	TIFFSetField
LEAF_NODE	7203:1	7203:1	10	TIFFSetField
LEAF_NODE	7203:13	7203:13	9	(
ARGUMENT	7203:14	7203:14	9	out
FIELD	7203:14	7203:14	10	out
LEAF_NODE	7203:14	7203:14	11	out
LEAF_NODE	7203:17	7203:17	9	,
ARGUMENT	7203:19	7203:19	9	TIFFTAG_ROWSPERSTRIP
FIELD	7203:19	7203:19	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7203:19	7203:19	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7203:39	7203:39	9	,
ARGUMENT	7203:41	7203:41	9	rowsperstrip
FIELD	7203:41	7203:41	10	rowsperstrip
LEAF_NODE	7203:41	7203:41	11	rowsperstrip
LEAF_NODE	7203:53	7203:53	9	)
LEAF_NODE	7203:54	7203:54	7	;
LEAF_NODE	7204:1	7204:1	5	}
EXPR_STATEMENT	7206:2	7206:64	3	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & input_planar ) ;
EXPR	7206:2	7206:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & input_planar )
FUNCTION_CALL	7206:2	7206:63	5	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & input_planar )
CALLEE	7206:2	7206:2	6	TIFFGetFieldDefaulted
LEAF_NODE	7206:2	7206:2	7	TIFFGetFieldDefaulted
LEAF_NODE	7206:23	7206:23	6	(
ARGUMENT	7206:24	7206:24	6	in
FIELD	7206:24	7206:24	7	in
LEAF_NODE	7206:24	7206:24	8	in
LEAF_NODE	7206:26	7206:26	6	,
ARGUMENT	7206:28	7206:28	6	TIFFTAG_PLANARCONFIG
FIELD	7206:28	7206:28	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	7206:28	7206:28	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	7206:48	7206:48	6	,
ARGUMENT	7206:50	7206:50	6	& input_planar
UNARY_EXPR	7206:50	7206:51	7	& input_planar
UNARY_OPERATOR	7206:50	7206:50	8	&
LEAF_NODE	7206:50	7206:50	9	&
FIELD	7206:51	7206:51	8	input_planar
LEAF_NODE	7206:51	7206:51	9	input_planar
LEAF_NODE	7206:63	7206:63	6	)
LEAF_NODE	7206:64	7206:64	4	;
SELECTION	7207:2	7208:4	3	
KEYWORD	7207:2	7207:2	4	if
LEAF_NODE	7207:2	7207:2	5	if
LEAF_NODE	7207:5	7207:5	4	(
CONDITION	7207:6	7207:6	4	config != ( uint16 ) - 1
EXPR	7207:6	7207:25	5	config != ( uint16 ) - 1
FIELD	7207:6	7207:6	6	config
LEAF_NODE	7207:6	7207:6	7	config
EQ_OPERATOR	7207:13	7207:13	6	!=
LEAF_NODE	7207:13	7207:13	7	!=
LEAF_NODE	7207:16	7207:16	6	(
TYPE_NAME	7207:17	7207:17	6	uint16
LEAF_NODE	7207:17	7207:17	7	uint16
LEAF_NODE	7207:23	7207:23	6	)
UNARY_EXPR	7207:25	7207:26	6	- 1
UNARY_OPERATOR	7207:25	7207:25	7	-
LEAF_NODE	7207:25	7207:25	8	-
FIELD	7207:26	7207:26	7	1
LEAF_NODE	7207:26	7207:26	8	1
LEAF_NODE	7207:27	7207:27	4	)
STATEMENTS	7208:4	7208:4	4	
EXPR_STATEMENT	7208:4	7208:51	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config ) ;
EXPR	7208:4	7208:4	6	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	7208:4	7208:50	7	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
CALLEE	7208:4	7208:4	8	TIFFSetField
LEAF_NODE	7208:4	7208:4	9	TIFFSetField
LEAF_NODE	7208:16	7208:16	8	(
ARGUMENT	7208:17	7208:17	8	out
FIELD	7208:17	7208:17	9	out
LEAF_NODE	7208:17	7208:17	10	out
LEAF_NODE	7208:20	7208:20	8	,
ARGUMENT	7208:22	7208:22	8	TIFFTAG_PLANARCONFIG
FIELD	7208:22	7208:22	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	7208:22	7208:22	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	7208:42	7208:42	8	,
ARGUMENT	7208:44	7208:44	8	config
FIELD	7208:44	7208:44	9	config
LEAF_NODE	7208:44	7208:44	10	config
LEAF_NODE	7208:50	7208:50	8	)
LEAF_NODE	7208:51	7208:51	6	;
SELECTION	7209:2	7210:4	3	
KEYWORD	7209:2	7209:2	4	else
LEAF_NODE	7209:2	7209:2	5	else
STATEMENTS	7210:4	7210:4	4	
EXPR_STATEMENT	7210:4	7210:43	5	CopyField ( TIFFTAG_PLANARCONFIG , config ) ;
EXPR	7210:4	7210:4	6	CopyField ( TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	7210:4	7210:42	7	CopyField ( TIFFTAG_PLANARCONFIG , config )
CALLEE	7210:4	7210:4	8	CopyField
LEAF_NODE	7210:4	7210:4	9	CopyField
LEAF_NODE	7210:13	7210:13	8	(
ARGUMENT	7210:14	7210:14	8	TIFFTAG_PLANARCONFIG
FIELD	7210:14	7210:14	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	7210:14	7210:14	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	7210:34	7210:34	8	,
ARGUMENT	7210:36	7210:36	8	config
FIELD	7210:36	7210:36	9	config
LEAF_NODE	7210:36	7210:36	10	config
LEAF_NODE	7210:42	7210:42	8	)
LEAF_NODE	7210:43	7210:43	6	;
SELECTION	7211:2	7212:4	3	
KEYWORD	7211:2	7211:2	4	if
LEAF_NODE	7211:2	7211:2	5	if
LEAF_NODE	7211:5	7211:5	4	(
CONDITION	7211:6	7211:6	4	spp <= 4
EXPR	7211:6	7211:13	5	spp <= 4
FIELD	7211:6	7211:6	6	spp
LEAF_NODE	7211:6	7211:6	7	spp
REL_OPERATOR	7211:10	7211:10	6	<=
LEAF_NODE	7211:10	7211:10	7	<=
FIELD	7211:13	7211:13	6	4
LEAF_NODE	7211:13	7211:13	7	4
LEAF_NODE	7211:14	7211:14	4	)
STATEMENTS	7212:4	7212:4	4	
EXPR_STATEMENT	7212:4	7212:52	5	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT ) ;
EXPR	7212:4	7212:4	6	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT )
FUNCTION_CALL	7212:4	7212:51	7	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT )
CALLEE	7212:4	7212:4	8	CopyTag
LEAF_NODE	7212:4	7212:4	9	CopyTag
LEAF_NODE	7212:11	7212:11	8	(
ARGUMENT	7212:12	7212:12	8	TIFFTAG_TRANSFERFUNCTION
FIELD	7212:12	7212:12	9	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	7212:12	7212:12	10	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	7212:36	7212:36	8	,
ARGUMENT	7212:38	7212:38	8	4
FIELD	7212:38	7212:38	9	4
LEAF_NODE	7212:38	7212:38	10	4
LEAF_NODE	7212:39	7212:39	8	,
ARGUMENT	7212:41	7212:41	8	TIFF_SHORT
FIELD	7212:41	7212:41	9	TIFF_SHORT
LEAF_NODE	7212:41	7212:41	10	TIFF_SHORT
LEAF_NODE	7212:51	7212:51	8	)
LEAF_NODE	7212:52	7212:52	6	;
EXPR_STATEMENT	7213:2	7213:42	3	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT ) ;
EXPR	7213:2	7213:2	4	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT )
FUNCTION_CALL	7213:2	7213:41	5	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT )
CALLEE	7213:2	7213:2	6	CopyTag
LEAF_NODE	7213:2	7213:2	7	CopyTag
LEAF_NODE	7213:9	7213:9	6	(
ARGUMENT	7213:10	7213:10	6	TIFFTAG_COLORMAP
FIELD	7213:10	7213:10	7	TIFFTAG_COLORMAP
LEAF_NODE	7213:10	7213:10	8	TIFFTAG_COLORMAP
LEAF_NODE	7213:26	7213:26	6	,
ARGUMENT	7213:28	7213:28	6	4
FIELD	7213:28	7213:28	7	4
LEAF_NODE	7213:28	7213:28	8	4
LEAF_NODE	7213:29	7213:29	6	,
ARGUMENT	7213:31	7213:31	6	TIFF_SHORT
FIELD	7213:31	7213:31	7	TIFF_SHORT
LEAF_NODE	7213:31	7213:31	8	TIFF_SHORT
LEAF_NODE	7213:41	7213:41	6	)
LEAF_NODE	7213:42	7213:42	4	;
SELECTION	7216:2	7216:23	3	
KEYWORD	7216:2	7216:2	4	switch
LEAF_NODE	7216:2	7216:2	5	switch
LEAF_NODE	7216:9	7216:9	4	(
CONDITION	7216:10	7216:10	4	compression
EXPR	7216:10	7216:10	5	compression
FIELD	7216:10	7216:10	6	compression
LEAF_NODE	7216:10	7216:10	7	compression
LEAF_NODE	7216:21	7216:21	4	)
STATEMENTS	7216:23	7258:3	4	
LEAF_NODE	7216:23	7216:23	5	{
STATEMENTS	7220:4	7257:1	5	
LABEL	7220:4	7220:25	6	case COMPRESSION_JPEG :
LEAF_NODE	7220:4	7220:4	7	case
LEAF_NODE	7220:9	7220:9	7	COMPRESSION_JPEG
LEAF_NODE	7220:25	7220:25	7	:
SELECTION	7221:9	7222:4	6	
KEYWORD	7221:9	7221:9	7	if
LEAF_NODE	7221:9	7221:9	8	if
LEAF_NODE	7221:12	7221:12	7	(
CONDITION	7221:13	7221:13	7	( ( bps % 8 ) == 0 ) || ( ( bps % 12 ) == 0 )
EXPR	7221:13	7221:13	8	( ( bps % 8 ) == 0 ) || ( ( bps % 12 ) == 0 )
OR	7221:13	7221:33	9	( ( bps % 8 ) == 0 ) || ( ( bps % 12 ) == 0 )
EXPR	7221:13	7221:28	10	( ( bps % 8 ) == 0 )
LEAF_NODE	7221:13	7221:13	11	(
LEAF_NODE	7221:14	7221:14	11	(
FIELD	7221:15	7221:15	11	bps
LEAF_NODE	7221:15	7221:15	12	bps
LEAF_NODE	7221:19	7221:19	11	%
FIELD	7221:21	7221:21	11	8
LEAF_NODE	7221:21	7221:21	12	8
LEAF_NODE	7221:22	7221:22	11	)
EQ_OPERATOR	7221:24	7221:24	11	==
LEAF_NODE	7221:24	7221:24	12	==
FIELD	7221:27	7221:27	11	0
LEAF_NODE	7221:27	7221:27	12	0
LEAF_NODE	7221:28	7221:28	11	)
LEAF_NODE	7221:30	7221:30	10	||
EXPR	7221:33	7221:49	10	( ( bps % 12 ) == 0 )
LEAF_NODE	7221:33	7221:33	11	(
LEAF_NODE	7221:34	7221:34	11	(
FIELD	7221:35	7221:35	11	bps
LEAF_NODE	7221:35	7221:35	12	bps
LEAF_NODE	7221:39	7221:39	11	%
FIELD	7221:41	7221:41	11	12
LEAF_NODE	7221:41	7221:41	12	12
LEAF_NODE	7221:43	7221:43	11	)
EQ_OPERATOR	7221:45	7221:45	11	==
LEAF_NODE	7221:45	7221:45	12	==
FIELD	7221:48	7221:48	11	0
LEAF_NODE	7221:48	7221:48	12	0
LEAF_NODE	7221:49	7221:49	11	)
LEAF_NODE	7221:50	7221:50	7	)
STATEMENTS	7222:4	7225:11	7	
LEAF_NODE	7222:4	7222:4	8	{
STATEMENTS	7223:11	7224:4	8	
EXPR_STATEMENT	7223:11	7223:58	9	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ;
EXPR	7223:11	7223:11	10	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
FUNCTION_CALL	7223:11	7223:57	11	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
CALLEE	7223:11	7223:11	12	TIFFSetField
LEAF_NODE	7223:11	7223:11	13	TIFFSetField
LEAF_NODE	7223:23	7223:23	12	(
ARGUMENT	7223:24	7223:24	12	out
FIELD	7223:24	7223:24	13	out
LEAF_NODE	7223:24	7223:24	14	out
LEAF_NODE	7223:27	7223:27	12	,
ARGUMENT	7223:29	7223:29	12	TIFFTAG_JPEGQUALITY
FIELD	7223:29	7223:29	13	TIFFTAG_JPEGQUALITY
LEAF_NODE	7223:29	7223:29	14	TIFFTAG_JPEGQUALITY
LEAF_NODE	7223:48	7223:48	12	,
ARGUMENT	7223:50	7223:50	12	quality
FIELD	7223:50	7223:50	13	quality
LEAF_NODE	7223:50	7223:50	14	quality
LEAF_NODE	7223:57	7223:57	12	)
LEAF_NODE	7223:58	7223:58	10	;
EXPR_STATEMENT	7224:4	7224:63	9	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	7224:4	7224:4	10	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	7224:4	7224:62	11	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	7224:4	7224:4	12	TIFFSetField
LEAF_NODE	7224:4	7224:4	13	TIFFSetField
LEAF_NODE	7224:16	7224:16	12	(
ARGUMENT	7224:17	7224:17	12	out
FIELD	7224:17	7224:17	13	out
LEAF_NODE	7224:17	7224:17	14	out
LEAF_NODE	7224:20	7224:20	12	,
ARGUMENT	7224:22	7224:22	12	TIFFTAG_JPEGCOLORMODE
FIELD	7224:22	7224:22	13	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	7224:22	7224:22	14	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	7224:43	7224:43	12	,
ARGUMENT	7224:45	7224:45	12	JPEGCOLORMODE_RGB
FIELD	7224:45	7224:45	13	JPEGCOLORMODE_RGB
LEAF_NODE	7224:45	7224:45	14	JPEGCOLORMODE_RGB
LEAF_NODE	7224:62	7224:62	12	)
LEAF_NODE	7224:63	7224:63	10	;
LEAF_NODE	7225:11	7225:11	8	}
SELECTION	7226:9	7227:11	6	
KEYWORD	7226:9	7226:9	7	else
LEAF_NODE	7226:9	7226:9	8	else
STATEMENTS	7227:11	7231:11	7	
LEAF_NODE	7227:11	7227:11	8	{
STATEMENTS	7228:4	7230:11	8	
EXPR_STATEMENT	7228:4	7229:73	9	TIFFError ( "writeSingleSection" , "JPEG compression requires 8 or 12 bits per sample" ) ;
EXPR	7228:4	7228:4	10	TIFFError ( "writeSingleSection" , "JPEG compression requires 8 or 12 bits per sample" )
FUNCTION_CALL	7228:4	7229:72	11	TIFFError ( "writeSingleSection" , "JPEG compression requires 8 or 12 bits per sample" )
CALLEE	7228:4	7228:4	12	TIFFError
LEAF_NODE	7228:4	7228:4	13	TIFFError
LEAF_NODE	7228:13	7228:13	12	(
ARGUMENT	7228:14	7228:14	12	"writeSingleSection"
FIELD	7228:14	7228:14	13	"writeSingleSection"
LEAF_NODE	7228:14	7228:14	14	"writeSingleSection"
LEAF_NODE	7228:34	7228:34	12	,
ARGUMENT	7229:21	7229:21	12	"JPEG compression requires 8 or 12 bits per sample"
FIELD	7229:21	7229:21	13	"JPEG compression requires 8 or 12 bits per sample"
LEAF_NODE	7229:21	7229:21	14	"JPEG compression requires 8 or 12 bits per sample"
LEAF_NODE	7229:72	7229:72	12	)
LEAF_NODE	7229:73	7229:73	10	;
JUMP_STATEMENT	7230:11	7230:22	9	return ( - 1 ) ;
KEYWORD	7230:11	7230:11	10	return
LEAF_NODE	7230:11	7230:11	11	return
DESTINATION	7230:18	7230:18	10	( - 1 )
EXPR	7230:18	7230:21	11	( - 1 )
LEAF_NODE	7230:18	7230:18	12	(
UNARY_EXPR	7230:19	7230:20	12	- 1
UNARY_OPERATOR	7230:19	7230:19	13	-
LEAF_NODE	7230:19	7230:19	14	-
FIELD	7230:20	7230:20	13	1
LEAF_NODE	7230:20	7230:20	14	1
LEAF_NODE	7230:21	7230:21	12	)
LEAF_NODE	7230:22	7230:22	10	;
LEAF_NODE	7231:11	7231:11	8	}
JUMP_STATEMENT	7232:2	7232:7	6	break DESTINATION ;
KEYWORD	7232:2	7232:2	7	break
LEAF_NODE	7232:2	7232:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7232:7	7232:7	7	;
LABEL	7233:3	7233:23	6	case COMPRESSION_LZW :
LEAF_NODE	7233:3	7233:3	7	case
LEAF_NODE	7233:8	7233:8	7	COMPRESSION_LZW
LEAF_NODE	7233:23	7233:23	7	:
LABEL	7234:3	7234:33	6	case COMPRESSION_ADOBE_DEFLATE :
LEAF_NODE	7234:3	7234:3	7	case
LEAF_NODE	7234:8	7234:8	7	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	7234:33	7234:33	7	:
LABEL	7235:3	7235:27	6	case COMPRESSION_DEFLATE :
LEAF_NODE	7235:3	7235:3	7	case
LEAF_NODE	7235:8	7235:8	7	COMPRESSION_DEFLATE
LEAF_NODE	7235:27	7235:27	7	:
SELECTION	7236:1	7237:10	6	
KEYWORD	7236:1	7236:1	7	if
LEAF_NODE	7236:1	7236:1	8	if
LEAF_NODE	7236:4	7236:4	7	(
CONDITION	7236:5	7236:5	7	predictor != ( uint16 ) - 1
EXPR	7236:5	7236:26	8	predictor != ( uint16 ) - 1
FIELD	7236:5	7236:5	9	predictor
LEAF_NODE	7236:5	7236:5	10	predictor
EQ_OPERATOR	7236:15	7236:15	9	!=
LEAF_NODE	7236:15	7236:15	10	!=
LEAF_NODE	7236:18	7236:18	9	(
TYPE_NAME	7236:19	7236:19	9	uint16
LEAF_NODE	7236:19	7236:19	10	uint16
LEAF_NODE	7236:25	7236:25	9	)
UNARY_EXPR	7236:26	7236:27	9	- 1
UNARY_OPERATOR	7236:26	7236:26	10	-
LEAF_NODE	7236:26	7236:26	11	-
FIELD	7236:27	7236:27	10	1
LEAF_NODE	7236:27	7236:27	11	1
LEAF_NODE	7236:28	7236:28	7	)
STATEMENTS	7237:10	7237:10	7	
EXPR_STATEMENT	7237:10	7237:57	8	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	7237:10	7237:10	9	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	7237:10	7237:56	10	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	7237:10	7237:10	11	TIFFSetField
LEAF_NODE	7237:10	7237:10	12	TIFFSetField
LEAF_NODE	7237:22	7237:22	11	(
ARGUMENT	7237:23	7237:23	11	out
FIELD	7237:23	7237:23	12	out
LEAF_NODE	7237:23	7237:23	13	out
LEAF_NODE	7237:26	7237:26	11	,
ARGUMENT	7237:28	7237:28	11	TIFFTAG_PREDICTOR
FIELD	7237:28	7237:28	12	TIFFTAG_PREDICTOR
LEAF_NODE	7237:28	7237:28	13	TIFFTAG_PREDICTOR
LEAF_NODE	7237:45	7237:45	11	,
ARGUMENT	7237:47	7237:47	11	predictor
FIELD	7237:47	7237:47	12	predictor
LEAF_NODE	7237:47	7237:47	13	predictor
LEAF_NODE	7237:56	7237:56	11	)
LEAF_NODE	7237:57	7237:57	9	;
SELECTION	7238:1	7239:3	6	
KEYWORD	7238:1	7238:1	7	else
LEAF_NODE	7238:1	7238:1	8	else
STATEMENTS	7239:3	7239:3	7	
EXPR_STATEMENT	7239:3	7239:42	8	CopyField ( TIFFTAG_PREDICTOR , predictor ) ;
EXPR	7239:3	7239:3	9	CopyField ( TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	7239:3	7239:41	10	CopyField ( TIFFTAG_PREDICTOR , predictor )
CALLEE	7239:3	7239:3	11	CopyField
LEAF_NODE	7239:3	7239:3	12	CopyField
LEAF_NODE	7239:12	7239:12	11	(
ARGUMENT	7239:13	7239:13	11	TIFFTAG_PREDICTOR
FIELD	7239:13	7239:13	12	TIFFTAG_PREDICTOR
LEAF_NODE	7239:13	7239:13	13	TIFFTAG_PREDICTOR
LEAF_NODE	7239:30	7239:30	11	,
ARGUMENT	7239:32	7239:32	11	predictor
FIELD	7239:32	7239:32	12	predictor
LEAF_NODE	7239:32	7239:32	13	predictor
LEAF_NODE	7239:41	7239:41	11	)
LEAF_NODE	7239:42	7239:42	9	;
JUMP_STATEMENT	7240:1	7240:6	6	break DESTINATION ;
KEYWORD	7240:1	7240:1	7	break
LEAF_NODE	7240:1	7240:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7240:6	7240:6	7	;
LABEL	7241:3	7241:29	6	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	7241:3	7241:3	7	case
LEAF_NODE	7241:8	7241:8	7	COMPRESSION_CCITTFAX3
LEAF_NODE	7241:29	7241:29	7	:
LABEL	7242:3	7242:29	6	case COMPRESSION_CCITTFAX4 :
LEAF_NODE	7242:3	7242:3	7	case
LEAF_NODE	7242:8	7242:8	7	COMPRESSION_CCITTFAX4
LEAF_NODE	7242:29	7242:29	7	:
SELECTION	7243:1	7243:43	6	
KEYWORD	7243:1	7243:1	7	if
LEAF_NODE	7243:1	7243:1	8	if
LEAF_NODE	7243:4	7243:4	7	(
CONDITION	7243:5	7243:5	7	compression == COMPRESSION_CCITTFAX3
EXPR	7243:5	7243:20	8	compression == COMPRESSION_CCITTFAX3
FIELD	7243:5	7243:5	9	compression
LEAF_NODE	7243:5	7243:5	10	compression
EQ_OPERATOR	7243:17	7243:17	9	==
LEAF_NODE	7243:17	7243:17	10	==
FIELD	7243:20	7243:20	9	COMPRESSION_CCITTFAX3
LEAF_NODE	7243:20	7243:20	10	COMPRESSION_CCITTFAX3
LEAF_NODE	7243:41	7243:41	7	)
STATEMENTS	7243:43	7248:1	7	
LEAF_NODE	7243:43	7243:43	8	{
STATEMENTS	7244:10	7246:3	8	
SELECTION	7244:10	7245:5	9	
KEYWORD	7244:10	7244:10	10	if
LEAF_NODE	7244:10	7244:10	11	if
LEAF_NODE	7244:13	7244:13	10	(
CONDITION	7244:14	7244:14	10	g3opts != ( uint32 ) - 1
EXPR	7244:14	7244:33	11	g3opts != ( uint32 ) - 1
FIELD	7244:14	7244:14	12	g3opts
LEAF_NODE	7244:14	7244:14	13	g3opts
EQ_OPERATOR	7244:21	7244:21	12	!=
LEAF_NODE	7244:21	7244:21	13	!=
LEAF_NODE	7244:24	7244:24	12	(
TYPE_NAME	7244:25	7244:25	12	uint32
LEAF_NODE	7244:25	7244:25	13	uint32
LEAF_NODE	7244:31	7244:31	12	)
UNARY_EXPR	7244:33	7244:34	12	- 1
UNARY_OPERATOR	7244:33	7244:33	13	-
LEAF_NODE	7244:33	7244:33	14	-
FIELD	7244:34	7244:34	13	1
LEAF_NODE	7244:34	7244:34	14	1
LEAF_NODE	7244:35	7244:35	10	)
STATEMENTS	7245:5	7245:5	10	
EXPR_STATEMENT	7245:5	7245:53	11	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts ) ;
EXPR	7245:5	7245:5	12	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
FUNCTION_CALL	7245:5	7245:52	13	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
CALLEE	7245:5	7245:5	14	TIFFSetField
LEAF_NODE	7245:5	7245:5	15	TIFFSetField
LEAF_NODE	7245:17	7245:17	14	(
ARGUMENT	7245:18	7245:18	14	out
FIELD	7245:18	7245:18	15	out
LEAF_NODE	7245:18	7245:18	16	out
LEAF_NODE	7245:21	7245:21	14	,
ARGUMENT	7245:23	7245:23	14	TIFFTAG_GROUP3OPTIONS
FIELD	7245:23	7245:23	15	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7245:23	7245:23	16	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7245:44	7245:44	14	,
ARGUMENT	7245:46	7245:46	14	g3opts
FIELD	7245:46	7245:46	15	g3opts
LEAF_NODE	7245:46	7245:46	16	g3opts
LEAF_NODE	7245:52	7245:52	14	)
LEAF_NODE	7245:53	7245:53	12	;
SELECTION	7246:3	7247:5	9	
KEYWORD	7246:3	7246:3	10	else
LEAF_NODE	7246:3	7246:3	11	else
STATEMENTS	7247:5	7247:5	10	
EXPR_STATEMENT	7247:5	7247:45	11	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts ) ;
EXPR	7247:5	7247:5	12	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts )
FUNCTION_CALL	7247:5	7247:44	13	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts )
CALLEE	7247:5	7247:5	14	CopyField
LEAF_NODE	7247:5	7247:5	15	CopyField
LEAF_NODE	7247:14	7247:14	14	(
ARGUMENT	7247:15	7247:15	14	TIFFTAG_GROUP3OPTIONS
FIELD	7247:15	7247:15	15	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7247:15	7247:15	16	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7247:36	7247:36	14	,
ARGUMENT	7247:38	7247:38	14	g3opts
FIELD	7247:38	7247:38	15	g3opts
LEAF_NODE	7247:38	7247:38	16	g3opts
LEAF_NODE	7247:44	7247:44	14	)
LEAF_NODE	7247:45	7247:45	12	;
LEAF_NODE	7248:1	7248:1	8	}
SELECTION	7248:3	7248:8	6	
KEYWORD	7248:3	7248:3	7	else
LEAF_NODE	7248:3	7248:3	8	else
STATEMENTS	7248:8	7250:8	7	
LEAF_NODE	7248:8	7248:8	8	{
STATEMENTS	7249:5	7249:5	8	
EXPR_STATEMENT	7249:5	7249:49	9	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG ) ;
EXPR	7249:5	7249:5	10	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG )
FUNCTION_CALL	7249:5	7249:48	11	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG )
CALLEE	7249:5	7249:5	12	CopyTag
LEAF_NODE	7249:5	7249:5	13	CopyTag
LEAF_NODE	7249:12	7249:12	12	(
ARGUMENT	7249:13	7249:13	12	TIFFTAG_GROUP4OPTIONS
FIELD	7249:13	7249:13	13	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	7249:13	7249:13	14	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	7249:34	7249:34	12	,
ARGUMENT	7249:36	7249:36	12	1
FIELD	7249:36	7249:36	13	1
LEAF_NODE	7249:36	7249:36	14	1
LEAF_NODE	7249:37	7249:37	12	,
ARGUMENT	7249:39	7249:39	12	TIFF_LONG
FIELD	7249:39	7249:39	13	TIFF_LONG
LEAF_NODE	7249:39	7249:39	14	TIFF_LONG
LEAF_NODE	7249:48	7249:48	12	)
LEAF_NODE	7249:49	7249:49	10	;
LEAF_NODE	7250:8	7250:8	8	}
EXPR_STATEMENT	7251:8	7251:50	6	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG ) ;
EXPR	7251:8	7251:8	7	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG )
FUNCTION_CALL	7251:8	7251:49	8	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG )
CALLEE	7251:8	7251:8	9	CopyTag
LEAF_NODE	7251:8	7251:8	10	CopyTag
LEAF_NODE	7251:15	7251:15	9	(
ARGUMENT	7251:16	7251:16	9	TIFFTAG_BADFAXLINES
FIELD	7251:16	7251:16	10	TIFFTAG_BADFAXLINES
LEAF_NODE	7251:16	7251:16	11	TIFFTAG_BADFAXLINES
LEAF_NODE	7251:35	7251:35	9	,
ARGUMENT	7251:37	7251:37	9	1
FIELD	7251:37	7251:37	10	1
LEAF_NODE	7251:37	7251:37	11	1
LEAF_NODE	7251:38	7251:38	9	,
ARGUMENT	7251:40	7251:40	9	TIFF_LONG
FIELD	7251:40	7251:40	10	TIFF_LONG
LEAF_NODE	7251:40	7251:40	11	TIFF_LONG
LEAF_NODE	7251:49	7251:49	9	)
LEAF_NODE	7251:50	7251:50	7	;
EXPR_STATEMENT	7252:8	7252:51	6	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG ) ;
EXPR	7252:8	7252:8	7	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG )
FUNCTION_CALL	7252:8	7252:50	8	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG )
CALLEE	7252:8	7252:8	9	CopyTag
LEAF_NODE	7252:8	7252:8	10	CopyTag
LEAF_NODE	7252:15	7252:15	9	(
ARGUMENT	7252:16	7252:16	9	TIFFTAG_CLEANFAXDATA
FIELD	7252:16	7252:16	10	TIFFTAG_CLEANFAXDATA
LEAF_NODE	7252:16	7252:16	11	TIFFTAG_CLEANFAXDATA
LEAF_NODE	7252:36	7252:36	9	,
ARGUMENT	7252:38	7252:38	9	1
FIELD	7252:38	7252:38	10	1
LEAF_NODE	7252:38	7252:38	11	1
LEAF_NODE	7252:39	7252:39	9	,
ARGUMENT	7252:41	7252:41	9	TIFF_LONG
FIELD	7252:41	7252:41	10	TIFF_LONG
LEAF_NODE	7252:41	7252:41	11	TIFF_LONG
LEAF_NODE	7252:50	7252:50	9	)
LEAF_NODE	7252:51	7252:51	7	;
EXPR_STATEMENT	7253:8	7253:61	6	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG ) ;
EXPR	7253:8	7253:8	7	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG )
FUNCTION_CALL	7253:8	7253:60	8	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG )
CALLEE	7253:8	7253:8	9	CopyTag
LEAF_NODE	7253:8	7253:8	10	CopyTag
LEAF_NODE	7253:15	7253:15	9	(
ARGUMENT	7253:16	7253:16	9	TIFFTAG_CONSECUTIVEBADFAXLINES
FIELD	7253:16	7253:16	10	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	7253:16	7253:16	11	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	7253:46	7253:46	9	,
ARGUMENT	7253:48	7253:48	9	1
FIELD	7253:48	7253:48	10	1
LEAF_NODE	7253:48	7253:48	11	1
LEAF_NODE	7253:49	7253:49	9	,
ARGUMENT	7253:51	7253:51	9	TIFF_LONG
FIELD	7253:51	7253:51	10	TIFF_LONG
LEAF_NODE	7253:51	7253:51	11	TIFF_LONG
LEAF_NODE	7253:60	7253:60	9	)
LEAF_NODE	7253:61	7253:61	7	;
EXPR_STATEMENT	7254:8	7254:52	6	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG ) ;
EXPR	7254:8	7254:8	7	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
FUNCTION_CALL	7254:8	7254:51	8	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
CALLEE	7254:8	7254:8	9	CopyTag
LEAF_NODE	7254:8	7254:8	10	CopyTag
LEAF_NODE	7254:15	7254:15	9	(
ARGUMENT	7254:16	7254:16	9	TIFFTAG_FAXRECVPARAMS
FIELD	7254:16	7254:16	10	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	7254:16	7254:16	11	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	7254:37	7254:37	9	,
ARGUMENT	7254:39	7254:39	9	1
FIELD	7254:39	7254:39	10	1
LEAF_NODE	7254:39	7254:39	11	1
LEAF_NODE	7254:40	7254:40	9	,
ARGUMENT	7254:42	7254:42	9	TIFF_LONG
FIELD	7254:42	7254:42	10	TIFF_LONG
LEAF_NODE	7254:42	7254:42	11	TIFF_LONG
LEAF_NODE	7254:51	7254:51	9	)
LEAF_NODE	7254:52	7254:52	7	;
EXPR_STATEMENT	7255:8	7255:50	6	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG ) ;
EXPR	7255:8	7255:8	7	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
FUNCTION_CALL	7255:8	7255:49	8	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
CALLEE	7255:8	7255:8	9	CopyTag
LEAF_NODE	7255:8	7255:8	10	CopyTag
LEAF_NODE	7255:15	7255:15	9	(
ARGUMENT	7255:16	7255:16	9	TIFFTAG_FAXRECVTIME
FIELD	7255:16	7255:16	10	TIFFTAG_FAXRECVTIME
LEAF_NODE	7255:16	7255:16	11	TIFFTAG_FAXRECVTIME
LEAF_NODE	7255:35	7255:35	9	,
ARGUMENT	7255:37	7255:37	9	1
FIELD	7255:37	7255:37	10	1
LEAF_NODE	7255:37	7255:37	11	1
LEAF_NODE	7255:38	7255:38	9	,
ARGUMENT	7255:40	7255:40	9	TIFF_LONG
FIELD	7255:40	7255:40	10	TIFF_LONG
LEAF_NODE	7255:40	7255:40	11	TIFF_LONG
LEAF_NODE	7255:49	7255:49	9	)
LEAF_NODE	7255:50	7255:50	7	;
EXPR_STATEMENT	7256:8	7256:53	6	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII ) ;
EXPR	7256:8	7256:8	7	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
FUNCTION_CALL	7256:8	7256:52	8	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
CALLEE	7256:8	7256:8	9	CopyTag
LEAF_NODE	7256:8	7256:8	10	CopyTag
LEAF_NODE	7256:15	7256:15	9	(
ARGUMENT	7256:16	7256:16	9	TIFFTAG_FAXSUBADDRESS
FIELD	7256:16	7256:16	10	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	7256:16	7256:16	11	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	7256:37	7256:37	9	,
ARGUMENT	7256:39	7256:39	9	1
FIELD	7256:39	7256:39	10	1
LEAF_NODE	7256:39	7256:39	11	1
LEAF_NODE	7256:40	7256:40	9	,
ARGUMENT	7256:42	7256:42	9	TIFF_ASCII
FIELD	7256:42	7256:42	10	TIFF_ASCII
LEAF_NODE	7256:42	7256:42	11	TIFF_ASCII
LEAF_NODE	7256:52	7256:52	9	)
LEAF_NODE	7256:53	7256:53	7	;
JUMP_STATEMENT	7257:1	7257:6	6	break DESTINATION ;
KEYWORD	7257:1	7257:1	7	break
LEAF_NODE	7257:1	7257:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7257:6	7257:6	7	;
LEAF_NODE	7258:3	7258:3	5	}
LEAF_NODE	7259:3	7259:3	3	{
STATEMENTS	7259:5	7261:5	3	
SIMPLE_DECL	7259:5	7259:17	4	uint32 len32 ;
VAR_DECL	7259:5	7259:12	5	uint32 len32
TYPE	7259:5	7259:5	6	uint32
TYPE_NAME	7259:5	7259:5	7	uint32
LEAF_NODE	7259:5	7259:5	8	uint32
NAME	7259:12	7259:12	6	len32
LEAF_NODE	7259:12	7259:12	7	len32
LEAF_NODE	7259:17	7259:17	5	;
SIMPLE_DECL	7260:5	7260:16	4	void * data ;
VAR_DECL	7260:5	7260:12	5	void * data
TYPE	7260:5	7260:10	6	void *
TYPE_NAME	7260:5	7260:5	7	void
LEAF_NODE	7260:5	7260:5	8	void
POINTER	7260:10	7260:10	7	*
LEAF_NODE	7260:10	7260:10	8	*
NAME	7260:12	7260:12	6	data
LEAF_NODE	7260:12	7260:12	7	data
LEAF_NODE	7260:16	7260:16	5	;
SELECTION	7261:5	7262:7	4	
KEYWORD	7261:5	7261:5	5	if
LEAF_NODE	7261:5	7261:5	6	if
LEAF_NODE	7261:8	7261:8	5	(
CONDITION	7261:9	7261:9	5	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
EXPR	7261:9	7261:9	6	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
FUNCTION_CALL	7261:9	7261:59	7	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
CALLEE	7261:9	7261:9	8	TIFFGetField
LEAF_NODE	7261:9	7261:9	9	TIFFGetField
LEAF_NODE	7261:21	7261:21	8	(
ARGUMENT	7261:22	7261:22	8	in
FIELD	7261:22	7261:22	9	in
LEAF_NODE	7261:22	7261:22	10	in
LEAF_NODE	7261:24	7261:24	8	,
ARGUMENT	7261:26	7261:26	8	TIFFTAG_ICCPROFILE
FIELD	7261:26	7261:26	9	TIFFTAG_ICCPROFILE
LEAF_NODE	7261:26	7261:26	10	TIFFTAG_ICCPROFILE
LEAF_NODE	7261:44	7261:44	8	,
ARGUMENT	7261:46	7261:46	8	& len32
UNARY_EXPR	7261:46	7261:47	9	& len32
UNARY_OPERATOR	7261:46	7261:46	10	&
LEAF_NODE	7261:46	7261:46	11	&
FIELD	7261:47	7261:47	10	len32
LEAF_NODE	7261:47	7261:47	11	len32
LEAF_NODE	7261:52	7261:52	8	,
ARGUMENT	7261:54	7261:54	8	& data
UNARY_EXPR	7261:54	7261:55	9	& data
UNARY_OPERATOR	7261:54	7261:54	10	&
LEAF_NODE	7261:54	7261:54	11	&
FIELD	7261:55	7261:55	10	data
LEAF_NODE	7261:55	7261:55	11	data
LEAF_NODE	7261:59	7261:59	8	)
LEAF_NODE	7261:60	7261:60	5	)
STATEMENTS	7262:7	7262:7	5	
EXPR_STATEMENT	7262:7	7262:57	6	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data ) ;
EXPR	7262:7	7262:7	7	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data )
FUNCTION_CALL	7262:7	7262:56	8	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data )
CALLEE	7262:7	7262:7	9	TIFFSetField
LEAF_NODE	7262:7	7262:7	10	TIFFSetField
LEAF_NODE	7262:19	7262:19	9	(
ARGUMENT	7262:20	7262:20	9	out
FIELD	7262:20	7262:20	10	out
LEAF_NODE	7262:20	7262:20	11	out
LEAF_NODE	7262:23	7262:23	9	,
ARGUMENT	7262:25	7262:25	9	TIFFTAG_ICCPROFILE
FIELD	7262:25	7262:25	10	TIFFTAG_ICCPROFILE
LEAF_NODE	7262:25	7262:25	11	TIFFTAG_ICCPROFILE
LEAF_NODE	7262:43	7262:43	9	,
ARGUMENT	7262:45	7262:45	9	len32
FIELD	7262:45	7262:45	10	len32
LEAF_NODE	7262:45	7262:45	11	len32
LEAF_NODE	7262:50	7262:50	9	,
ARGUMENT	7262:52	7262:52	9	data
FIELD	7262:52	7262:52	10	data
LEAF_NODE	7262:52	7262:52	11	data
LEAF_NODE	7262:56	7262:56	9	)
LEAF_NODE	7262:57	7262:57	7	;
LEAF_NODE	7263:3	7263:3	3	}
LEAF_NODE	7264:3	7264:3	3	{
STATEMENTS	7264:5	7266:5	3	
SIMPLE_DECL	7264:5	7264:17	4	uint16 ninks ;
VAR_DECL	7264:5	7264:12	5	uint16 ninks
TYPE	7264:5	7264:5	6	uint16
TYPE_NAME	7264:5	7264:5	7	uint16
LEAF_NODE	7264:5	7264:5	8	uint16
NAME	7264:12	7264:12	6	ninks
LEAF_NODE	7264:12	7264:12	7	ninks
LEAF_NODE	7264:17	7264:17	5	;
SIMPLE_DECL	7265:5	7265:25	4	const char * inknames ;
VAR_DECL	7265:5	7265:17	5	const char * inknames
TYPE	7265:5	7265:15	6	const char *
TYPE_NAME	7265:5	7265:11	7	const char
LEAF_NODE	7265:5	7265:5	8	const
LEAF_NODE	7265:11	7265:11	8	char
POINTER	7265:15	7265:15	7	*
LEAF_NODE	7265:15	7265:15	8	*
NAME	7265:17	7265:17	6	inknames
LEAF_NODE	7265:17	7265:17	7	inknames
LEAF_NODE	7265:25	7265:25	5	;
SELECTION	7266:5	7266:57	4	
KEYWORD	7266:5	7266:5	5	if
LEAF_NODE	7266:5	7266:5	6	if
LEAF_NODE	7266:8	7266:8	5	(
CONDITION	7266:9	7266:9	5	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
EXPR	7266:9	7266:9	6	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
FUNCTION_CALL	7266:9	7266:54	7	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
CALLEE	7266:9	7266:9	8	TIFFGetField
LEAF_NODE	7266:9	7266:9	9	TIFFGetField
LEAF_NODE	7266:21	7266:21	8	(
ARGUMENT	7266:22	7266:22	8	in
FIELD	7266:22	7266:22	9	in
LEAF_NODE	7266:22	7266:22	10	in
LEAF_NODE	7266:24	7266:24	8	,
ARGUMENT	7266:26	7266:26	8	TIFFTAG_NUMBEROFINKS
FIELD	7266:26	7266:26	9	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7266:26	7266:26	10	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7266:46	7266:46	8	,
ARGUMENT	7266:48	7266:48	8	& ninks
UNARY_EXPR	7266:48	7266:49	9	& ninks
UNARY_OPERATOR	7266:48	7266:48	10	&
LEAF_NODE	7266:48	7266:48	11	&
FIELD	7266:49	7266:49	10	ninks
LEAF_NODE	7266:49	7266:49	11	ninks
LEAF_NODE	7266:54	7266:54	8	)
LEAF_NODE	7266:55	7266:55	5	)
STATEMENTS	7266:57	7281:5	5	
LEAF_NODE	7266:57	7266:57	6	{
STATEMENTS	7267:7	7268:7	6	
EXPR_STATEMENT	7267:7	7267:53	7	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks ) ;
EXPR	7267:7	7267:7	8	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks )
FUNCTION_CALL	7267:7	7267:52	9	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks )
CALLEE	7267:7	7267:7	10	TIFFSetField
LEAF_NODE	7267:7	7267:7	11	TIFFSetField
LEAF_NODE	7267:19	7267:19	10	(
ARGUMENT	7267:20	7267:20	10	out
FIELD	7267:20	7267:20	11	out
LEAF_NODE	7267:20	7267:20	12	out
LEAF_NODE	7267:23	7267:23	10	,
ARGUMENT	7267:25	7267:25	10	TIFFTAG_NUMBEROFINKS
FIELD	7267:25	7267:25	11	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7267:25	7267:25	12	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7267:45	7267:45	10	,
ARGUMENT	7267:47	7267:47	10	ninks
FIELD	7267:47	7267:47	11	ninks
LEAF_NODE	7267:47	7267:47	12	ninks
LEAF_NODE	7267:52	7267:52	10	)
LEAF_NODE	7267:53	7267:53	8	;
SELECTION	7268:7	7268:58	7	
KEYWORD	7268:7	7268:7	8	if
LEAF_NODE	7268:7	7268:7	9	if
LEAF_NODE	7268:10	7268:10	8	(
CONDITION	7268:11	7268:11	8	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
EXPR	7268:11	7268:11	9	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
FUNCTION_CALL	7268:11	7268:55	10	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
CALLEE	7268:11	7268:11	11	TIFFGetField
LEAF_NODE	7268:11	7268:11	12	TIFFGetField
LEAF_NODE	7268:23	7268:23	11	(
ARGUMENT	7268:24	7268:24	11	in
FIELD	7268:24	7268:24	12	in
LEAF_NODE	7268:24	7268:24	13	in
LEAF_NODE	7268:26	7268:26	11	,
ARGUMENT	7268:28	7268:28	11	TIFFTAG_INKNAMES
FIELD	7268:28	7268:28	12	TIFFTAG_INKNAMES
LEAF_NODE	7268:28	7268:28	13	TIFFTAG_INKNAMES
LEAF_NODE	7268:44	7268:44	11	,
ARGUMENT	7268:46	7268:46	11	& inknames
UNARY_EXPR	7268:46	7268:47	12	& inknames
UNARY_OPERATOR	7268:46	7268:46	13	&
LEAF_NODE	7268:46	7268:46	14	&
FIELD	7268:47	7268:47	13	inknames
LEAF_NODE	7268:47	7268:47	14	inknames
LEAF_NODE	7268:55	7268:55	11	)
LEAF_NODE	7268:56	7268:56	8	)
STATEMENTS	7268:58	7280:7	8	
LEAF_NODE	7268:58	7268:58	9	{
STATEMENTS	7269:2	7279:2	9	
SIMPLE_DECL	7269:2	7269:40	10	int inknameslen ; inknameslen = strlen ( inknames ) + 1 ;
VAR_DECL	7269:2	7269:6	11	int inknameslen ; inknameslen = strlen ( inknames ) + 1
TYPE	7269:2	7269:2	12	int
TYPE_NAME	7269:2	7269:2	13	int
LEAF_NODE	7269:2	7269:2	14	int
NAME	7269:6	7269:6	12	inknameslen
LEAF_NODE	7269:6	7269:6	13	inknameslen
LEAF_NODE	0:0	0:0	12	;
INIT	7269:6	7269:6	12	inknameslen = strlen ( inknames ) + 1
ASSIGN	7269:6	7269:20	13	inknameslen = strlen ( inknames ) + 1
LVAL	7269:6	7269:6	14	inknameslen
NAME	7269:6	7269:6	15	inknameslen
LEAF_NODE	7269:6	7269:6	16	inknameslen
ASSIGN_OP	7269:18	7269:18	14	=
LEAF_NODE	7269:18	7269:18	15	=
RVAL	7269:20	7269:39	14	strlen ( inknames ) + 1
FUNCTION_CALL	7269:20	7269:35	15	strlen ( inknames )
CALLEE	7269:20	7269:20	16	strlen
LEAF_NODE	7269:20	7269:20	17	strlen
LEAF_NODE	7269:26	7269:26	16	(
ARGUMENT	7269:27	7269:27	16	inknames
FIELD	7269:27	7269:27	17	inknames
LEAF_NODE	7269:27	7269:27	18	inknames
LEAF_NODE	7269:35	7269:35	16	)
LEAF_NODE	7269:37	7269:37	15	+
FIELD	7269:39	7269:39	15	1
LEAF_NODE	7269:39	7269:39	16	1
LEAF_NODE	7269:40	7269:40	11	;
SIMPLE_DECL	7270:2	7270:27	10	const char * cp ; cp = inknames ;
VAR_DECL	7270:2	7270:14	11	const char * cp ; cp = inknames
TYPE	7270:2	7270:12	12	const char *
TYPE_NAME	7270:2	7270:8	13	const char
LEAF_NODE	7270:2	7270:2	14	const
LEAF_NODE	7270:8	7270:8	14	char
POINTER	7270:12	7270:12	13	*
LEAF_NODE	7270:12	7270:12	14	*
NAME	7270:14	7270:14	12	cp
LEAF_NODE	7270:14	7270:14	13	cp
LEAF_NODE	0:0	0:0	12	;
INIT	7270:14	7270:14	12	cp = inknames
ASSIGN	7270:14	7270:19	13	cp = inknames
LVAL	7270:14	7270:14	14	cp
NAME	7270:14	7270:14	15	cp
LEAF_NODE	7270:14	7270:14	16	cp
ASSIGN_OP	7270:17	7270:17	14	=
LEAF_NODE	7270:17	7270:17	15	=
RVAL	7270:19	7270:19	14	inknames
FIELD	7270:19	7270:19	15	inknames
LEAF_NODE	7270:19	7270:19	16	inknames
LEAF_NODE	7270:27	7270:27	11	;
ITERATION	7271:2	7271:20	10	
KEYWORD	7271:2	7271:2	11	while
LEAF_NODE	7271:2	7271:2	12	while
LEAF_NODE	7271:8	7271:8	11	(
CONDITION	7271:9	7271:9	11	ninks > 1
EXPR	7271:9	7271:17	12	ninks > 1
FIELD	7271:9	7271:9	13	ninks
LEAF_NODE	7271:9	7271:9	14	ninks
REL_OPERATOR	7271:15	7271:15	13	>
LEAF_NODE	7271:15	7271:15	14	>
FIELD	7271:17	7271:17	13	1
LEAF_NODE	7271:17	7271:17	14	1
LEAF_NODE	7271:18	7271:18	11	)
STATEMENTS	7271:20	7278:9	11	
LEAF_NODE	7271:20	7271:20	12	{
STATEMENTS	7272:4	7277:4	12	
EXPR_STATEMENT	7272:4	7272:25	13	cp = strchr ( cp , '\0' ) ;
EXPR	7272:4	7272:4	14	cp = strchr ( cp , '\0' )
ASSIGN	7272:4	7272:9	15	cp = strchr ( cp , '\0' )
LVAL	7272:4	7272:4	16	cp
FIELD	7272:4	7272:4	17	cp
LEAF_NODE	7272:4	7272:4	18	cp
ASSIGN_OP	7272:7	7272:7	16	=
LEAF_NODE	7272:7	7272:7	17	=
RVAL	7272:9	7272:9	16	strchr ( cp , '\0' )
FUNCTION_CALL	7272:9	7272:24	17	strchr ( cp , '\0' )
CALLEE	7272:9	7272:9	18	strchr
LEAF_NODE	7272:9	7272:9	19	strchr
LEAF_NODE	7272:15	7272:15	18	(
ARGUMENT	7272:16	7272:16	18	cp
FIELD	7272:16	7272:16	19	cp
LEAF_NODE	7272:16	7272:16	20	cp
LEAF_NODE	7272:18	7272:18	18	,
ARGUMENT	7272:20	7272:20	18	'\0'
FIELD	7272:20	7272:20	19	'\0'
LEAF_NODE	7272:20	7272:20	20	'\0'
LEAF_NODE	7272:24	7272:24	18	)
LEAF_NODE	7272:25	7272:25	14	;
SELECTION	7273:4	7273:12	13	
KEYWORD	7273:4	7273:4	14	if
LEAF_NODE	7273:4	7273:4	15	if
LEAF_NODE	7273:7	7273:7	14	(
CONDITION	7273:8	7273:8	14	cp
EXPR	7273:8	7273:8	15	cp
FIELD	7273:8	7273:8	16	cp
LEAF_NODE	7273:8	7273:8	17	cp
LEAF_NODE	7273:10	7273:10	14	)
STATEMENTS	7273:12	7276:4	14	
LEAF_NODE	7273:12	7273:12	15	{
STATEMENTS	7274:6	7275:6	15	
EXPR_STATEMENT	7274:6	7274:10	16	cp ++ ;
EXPR	7274:6	7274:6	17	cp ++
FIELD	7274:6	7274:8	18	cp ++
LEAF_NODE	7274:6	7274:6	19	cp
LEAF_NODE	7274:8	7274:8	19	++
LEAF_NODE	7274:10	7274:10	17	;
EXPR_STATEMENT	7275:6	7275:37	16	inknameslen += ( strlen ( cp ) + 1 ) ;
EXPR	7275:6	7275:6	17	inknameslen += ( strlen ( cp ) + 1 )
ASSIGN	7275:6	7275:21	18	inknameslen += ( strlen ( cp ) + 1 )
LVAL	7275:6	7275:6	19	inknameslen
FIELD	7275:6	7275:6	20	inknameslen
LEAF_NODE	7275:6	7275:6	21	inknameslen
ASSIGN_OP	7275:18	7275:18	19	+=
LEAF_NODE	7275:18	7275:18	20	+=
RVAL	7275:21	7275:36	19	( strlen ( cp ) + 1 )
LEAF_NODE	7275:21	7275:21	20	(
FUNCTION_CALL	7275:22	7275:31	20	strlen ( cp )
CALLEE	7275:22	7275:22	21	strlen
LEAF_NODE	7275:22	7275:22	22	strlen
LEAF_NODE	7275:28	7275:28	21	(
ARGUMENT	7275:29	7275:29	21	cp
FIELD	7275:29	7275:29	22	cp
LEAF_NODE	7275:29	7275:29	23	cp
LEAF_NODE	7275:31	7275:31	21	)
LEAF_NODE	7275:33	7275:33	20	+
FIELD	7275:35	7275:35	20	1
LEAF_NODE	7275:35	7275:35	21	1
LEAF_NODE	7275:36	7275:36	20	)
LEAF_NODE	7275:37	7275:37	17	;
LEAF_NODE	7276:4	7276:4	15	}
EXPR_STATEMENT	7277:4	7277:11	13	ninks -- ;
EXPR	7277:4	7277:4	14	ninks --
FIELD	7277:4	7277:9	15	ninks --
LEAF_NODE	7277:4	7277:4	16	ninks
LEAF_NODE	7277:9	7277:9	16	--
LEAF_NODE	7277:11	7277:11	14	;
LEAF_NODE	7278:9	7278:9	12	}
EXPR_STATEMENT	7279:2	7279:60	10	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames ) ;
EXPR	7279:2	7279:2	11	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames )
FUNCTION_CALL	7279:2	7279:59	12	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames )
CALLEE	7279:2	7279:2	13	TIFFSetField
LEAF_NODE	7279:2	7279:2	14	TIFFSetField
LEAF_NODE	7279:14	7279:14	13	(
ARGUMENT	7279:15	7279:15	13	out
FIELD	7279:15	7279:15	14	out
LEAF_NODE	7279:15	7279:15	15	out
LEAF_NODE	7279:18	7279:18	13	,
ARGUMENT	7279:20	7279:20	13	TIFFTAG_INKNAMES
FIELD	7279:20	7279:20	14	TIFFTAG_INKNAMES
LEAF_NODE	7279:20	7279:20	15	TIFFTAG_INKNAMES
LEAF_NODE	7279:36	7279:36	13	,
ARGUMENT	7279:38	7279:38	13	inknameslen
FIELD	7279:38	7279:38	14	inknameslen
LEAF_NODE	7279:38	7279:38	15	inknameslen
LEAF_NODE	7279:49	7279:49	13	,
ARGUMENT	7279:51	7279:51	13	inknames
FIELD	7279:51	7279:51	14	inknames
LEAF_NODE	7279:51	7279:51	15	inknames
LEAF_NODE	7279:59	7279:59	13	)
LEAF_NODE	7279:60	7279:60	11	;
LEAF_NODE	7280:7	7280:7	9	}
LEAF_NODE	7281:5	7281:5	6	}
LEAF_NODE	7282:3	7282:3	3	}
LEAF_NODE	7283:3	7283:3	3	{
STATEMENTS	7284:3	7285:3	3	
SIMPLE_DECL	7284:3	7284:26	4	unsigned short pg0 , unsigned short pg1 ;
INIT_DECL_LIST	7284:3	7284:3	5	unsigned short pg0 , unsigned short pg1
VAR_DECL	7284:3	7284:18	6	unsigned short pg0
TYPE	7284:3	7284:3	7	unsigned short
TYPE_NAME	7284:3	7284:12	8	unsigned short
LEAF_NODE	7284:3	7284:3	9	unsigned
LEAF_NODE	7284:12	7284:12	9	short
NAME	7284:18	7284:18	7	pg0
LEAF_NODE	7284:18	7284:18	8	pg0
LEAF_NODE	7284:21	7284:21	6	,
VAR_DECL	7284:3	7284:23	6	unsigned short pg1
TYPE	7284:3	7284:3	7	unsigned short
TYPE_NAME	7284:3	7284:12	8	unsigned short
LEAF_NODE	7284:3	7284:3	9	unsigned
LEAF_NODE	7284:12	7284:12	9	short
NAME	7284:23	7284:23	7	pg1
LEAF_NODE	7284:23	7284:23	8	pg1
LEAF_NODE	7284:26	7284:26	5	;
SELECTION	7285:3	7285:57	4	
KEYWORD	7285:3	7285:3	5	if
LEAF_NODE	7285:3	7285:3	6	if
LEAF_NODE	7285:6	7285:6	5	(
CONDITION	7285:7	7285:7	5	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
EXPR	7285:7	7285:7	6	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
FUNCTION_CALL	7285:7	7285:54	7	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
CALLEE	7285:7	7285:7	8	TIFFGetField
LEAF_NODE	7285:7	7285:7	9	TIFFGetField
LEAF_NODE	7285:19	7285:19	8	(
ARGUMENT	7285:20	7285:20	8	in
FIELD	7285:20	7285:20	9	in
LEAF_NODE	7285:20	7285:20	10	in
LEAF_NODE	7285:22	7285:22	8	,
ARGUMENT	7285:24	7285:24	8	TIFFTAG_PAGENUMBER
FIELD	7285:24	7285:24	9	TIFFTAG_PAGENUMBER
LEAF_NODE	7285:24	7285:24	10	TIFFTAG_PAGENUMBER
LEAF_NODE	7285:42	7285:42	8	,
ARGUMENT	7285:44	7285:44	8	& pg0
UNARY_EXPR	7285:44	7285:45	9	& pg0
UNARY_OPERATOR	7285:44	7285:44	10	&
LEAF_NODE	7285:44	7285:44	11	&
FIELD	7285:45	7285:45	10	pg0
LEAF_NODE	7285:45	7285:45	11	pg0
LEAF_NODE	7285:48	7285:48	8	,
ARGUMENT	7285:50	7285:50	8	& pg1
UNARY_EXPR	7285:50	7285:51	9	& pg1
UNARY_OPERATOR	7285:50	7285:50	10	&
LEAF_NODE	7285:50	7285:50	11	&
FIELD	7285:51	7285:51	10	pg1
LEAF_NODE	7285:51	7285:51	11	pg1
LEAF_NODE	7285:54	7285:54	8	)
LEAF_NODE	7285:55	7285:55	5	)
STATEMENTS	7285:57	7290:5	5	
LEAF_NODE	7285:57	7285:57	6	{
STATEMENTS	7286:5	7288:5	6	
SELECTION	7286:5	7287:1	7	
KEYWORD	7286:5	7286:5	8	if
LEAF_NODE	7286:5	7286:5	9	if
LEAF_NODE	7286:8	7286:8	8	(
CONDITION	7286:9	7286:9	8	pageNum < 0
EXPR	7286:9	7286:19	9	pageNum < 0
FIELD	7286:9	7286:9	10	pageNum
LEAF_NODE	7286:9	7286:9	11	pageNum
REL_OPERATOR	7286:17	7286:17	10	<
LEAF_NODE	7286:17	7286:17	11	<
FIELD	7286:19	7286:19	10	0
LEAF_NODE	7286:19	7286:19	11	0
LEAF_NODE	7286:20	7286:20	8	)
STATEMENTS	7287:1	7287:1	8	
EXPR_STATEMENT	7287:1	7287:48	9	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 ) ;
EXPR	7287:1	7287:1	10	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 )
FUNCTION_CALL	7287:1	7287:47	11	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 )
CALLEE	7287:1	7287:1	12	TIFFSetField
LEAF_NODE	7287:1	7287:1	13	TIFFSetField
LEAF_NODE	7287:13	7287:13	12	(
ARGUMENT	7287:14	7287:14	12	out
FIELD	7287:14	7287:14	13	out
LEAF_NODE	7287:14	7287:14	14	out
LEAF_NODE	7287:17	7287:17	12	,
ARGUMENT	7287:19	7287:19	12	TIFFTAG_PAGENUMBER
FIELD	7287:19	7287:19	13	TIFFTAG_PAGENUMBER
LEAF_NODE	7287:19	7287:19	14	TIFFTAG_PAGENUMBER
LEAF_NODE	7287:37	7287:37	12	,
ARGUMENT	7287:39	7287:39	12	pg0
FIELD	7287:39	7287:39	13	pg0
LEAF_NODE	7287:39	7287:39	14	pg0
LEAF_NODE	7287:42	7287:42	12	,
ARGUMENT	7287:44	7287:44	12	pg1
FIELD	7287:44	7287:44	13	pg1
LEAF_NODE	7287:44	7287:44	14	pg1
LEAF_NODE	7287:47	7287:47	12	)
LEAF_NODE	7287:48	7287:48	10	;
SELECTION	7288:5	7289:1	7	
KEYWORD	7288:5	7288:5	8	else
LEAF_NODE	7288:5	7288:5	9	else
STATEMENTS	7289:1	7289:1	8	
EXPR_STATEMENT	7289:1	7289:52	9	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 ) ;
EXPR	7289:1	7289:1	10	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 )
FUNCTION_CALL	7289:1	7289:51	11	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 )
CALLEE	7289:1	7289:1	12	TIFFSetField
LEAF_NODE	7289:1	7289:1	13	TIFFSetField
LEAF_NODE	7289:13	7289:13	12	(
ARGUMENT	7289:14	7289:14	12	out
FIELD	7289:14	7289:14	13	out
LEAF_NODE	7289:14	7289:14	14	out
LEAF_NODE	7289:17	7289:17	12	,
ARGUMENT	7289:19	7289:19	12	TIFFTAG_PAGENUMBER
FIELD	7289:19	7289:19	13	TIFFTAG_PAGENUMBER
LEAF_NODE	7289:19	7289:19	14	TIFFTAG_PAGENUMBER
LEAF_NODE	7289:37	7289:37	12	,
ARGUMENT	7289:39	7289:39	12	pageNum ++
FIELD	7289:39	7289:46	13	pageNum ++
LEAF_NODE	7289:39	7289:39	14	pageNum
LEAF_NODE	7289:46	7289:46	14	++
LEAF_NODE	7289:48	7289:48	12	,
ARGUMENT	7289:50	7289:50	12	0
FIELD	7289:50	7289:50	13	0
LEAF_NODE	7289:50	7289:50	14	0
LEAF_NODE	7289:51	7289:51	12	)
LEAF_NODE	7289:52	7289:52	10	;
LEAF_NODE	7290:5	7290:5	6	}
LEAF_NODE	7291:3	7291:3	3	}
ITERATION	7293:2	7294:2	3	
KEYWORD	7293:2	7293:2	4	for
LEAF_NODE	7293:2	7293:2	5	for
LEAF_NODE	7293:6	7293:6	4	(
FOR_INIT	7293:7	7293:15	4	p = tags ;
EXPR	7293:7	7293:7	5	p = tags
ASSIGN	7293:7	7293:11	6	p = tags
LVAL	7293:7	7293:7	7	p
FIELD	7293:7	7293:7	8	p
LEAF_NODE	7293:7	7293:7	9	p
ASSIGN_OP	7293:9	7293:9	7	=
LEAF_NODE	7293:9	7293:9	8	=
RVAL	7293:11	7293:11	7	tags
FIELD	7293:11	7293:11	8	tags
LEAF_NODE	7293:11	7293:11	9	tags
LEAF_NODE	7293:15	7293:15	5	;
CONDITION	7293:17	7293:17	4	p < & tags [ NTAGS ]
EXPR	7293:17	7293:21	5	p < & tags [ NTAGS ]
FIELD	7293:17	7293:17	6	p
LEAF_NODE	7293:17	7293:17	7	p
REL_OPERATOR	7293:19	7293:19	6	<
LEAF_NODE	7293:19	7293:19	7	<
UNARY_EXPR	7293:21	7293:22	6	& tags [ NTAGS ]
UNARY_OPERATOR	7293:21	7293:21	7	&
LEAF_NODE	7293:21	7293:21	8	&
FIELD	7293:22	7293:32	7	tags [ NTAGS ]
LEAF_NODE	7293:22	7293:22	8	tags
LEAF_NODE	7293:26	7293:26	8	[
EXPR	7293:27	7293:27	8	NTAGS
FIELD	7293:27	7293:27	9	NTAGS
LEAF_NODE	7293:27	7293:27	10	NTAGS
LEAF_NODE	7293:32	7293:32	8	]
LEAF_NODE	7293:33	7293:33	4	;
FOR_EXPR	7293:35	7293:35	4	p ++
EXPR	7293:35	7293:35	5	p ++
FIELD	7293:35	7293:36	6	p ++
LEAF_NODE	7293:35	7293:35	7	p
LEAF_NODE	7293:36	7293:36	7	++
LEAF_NODE	7293:38	7293:38	4	)
STATEMENTS	7294:2	7294:2	4	
EXPR_STATEMENT	7294:2	7294:36	5	CopyTag ( p -> tag , p -> count , p -> type ) ;
EXPR	7294:2	7294:2	6	CopyTag ( p -> tag , p -> count , p -> type )
FUNCTION_CALL	7294:2	7294:35	7	CopyTag ( p -> tag , p -> count , p -> type )
CALLEE	7294:2	7294:2	8	CopyTag
LEAF_NODE	7294:2	7294:2	9	CopyTag
LEAF_NODE	7294:9	7294:9	8	(
ARGUMENT	7294:10	7294:10	8	p -> tag
FIELD	7294:10	7294:13	9	p -> tag
LEAF_NODE	7294:10	7294:10	10	p
LEAF_NODE	7294:11	7294:11	10	->
LEAF_NODE	7294:13	7294:13	10	tag
LEAF_NODE	7294:16	7294:16	8	,
ARGUMENT	7294:18	7294:18	8	p -> count
FIELD	7294:18	7294:21	9	p -> count
LEAF_NODE	7294:18	7294:18	10	p
LEAF_NODE	7294:19	7294:19	10	->
LEAF_NODE	7294:21	7294:21	10	count
LEAF_NODE	7294:26	7294:26	8	,
ARGUMENT	7294:28	7294:28	8	p -> type
FIELD	7294:28	7294:31	9	p -> type
LEAF_NODE	7294:28	7294:28	10	p
LEAF_NODE	7294:29	7294:29	10	->
LEAF_NODE	7294:31	7294:31	10	type
LEAF_NODE	7294:35	7294:35	8	)
LEAF_NODE	7294:36	7294:36	6	;
EXPR_STATEMENT	7297:2	7297:53	3	TIFFSetField ( out , TIFFTAG_XRESOLUTION , ( float ) hres ) ;
EXPR	7297:2	7297:2	4	TIFFSetField ( out , TIFFTAG_XRESOLUTION , ( float ) hres )
FUNCTION_CALL	7297:2	7297:52	5	TIFFSetField ( out , TIFFTAG_XRESOLUTION , ( float ) hres )
CALLEE	7297:2	7297:2	6	TIFFSetField
LEAF_NODE	7297:2	7297:2	7	TIFFSetField
LEAF_NODE	7297:14	7297:14	6	(
ARGUMENT	7297:15	7297:15	6	out
FIELD	7297:15	7297:15	7	out
LEAF_NODE	7297:15	7297:15	8	out
LEAF_NODE	7297:18	7297:18	6	,
ARGUMENT	7297:20	7297:20	6	TIFFTAG_XRESOLUTION
FIELD	7297:20	7297:20	7	TIFFTAG_XRESOLUTION
LEAF_NODE	7297:20	7297:20	8	TIFFTAG_XRESOLUTION
LEAF_NODE	7297:39	7297:39	6	,
ARGUMENT	7297:41	7297:48	6	( float ) hres
LEAF_NODE	7297:41	7297:41	7	(
TYPE_NAME	7297:42	7297:42	7	float
LEAF_NODE	7297:42	7297:42	8	float
LEAF_NODE	7297:47	7297:47	7	)
FIELD	7297:48	7297:48	7	hres
LEAF_NODE	7297:48	7297:48	8	hres
LEAF_NODE	7297:52	7297:52	6	)
LEAF_NODE	7297:53	7297:53	4	;
EXPR_STATEMENT	7298:2	7298:53	3	TIFFSetField ( out , TIFFTAG_YRESOLUTION , ( float ) vres ) ;
EXPR	7298:2	7298:2	4	TIFFSetField ( out , TIFFTAG_YRESOLUTION , ( float ) vres )
FUNCTION_CALL	7298:2	7298:52	5	TIFFSetField ( out , TIFFTAG_YRESOLUTION , ( float ) vres )
CALLEE	7298:2	7298:2	6	TIFFSetField
LEAF_NODE	7298:2	7298:2	7	TIFFSetField
LEAF_NODE	7298:14	7298:14	6	(
ARGUMENT	7298:15	7298:15	6	out
FIELD	7298:15	7298:15	7	out
LEAF_NODE	7298:15	7298:15	8	out
LEAF_NODE	7298:18	7298:18	6	,
ARGUMENT	7298:20	7298:20	6	TIFFTAG_YRESOLUTION
FIELD	7298:20	7298:20	7	TIFFTAG_YRESOLUTION
LEAF_NODE	7298:20	7298:20	8	TIFFTAG_YRESOLUTION
LEAF_NODE	7298:39	7298:39	6	,
ARGUMENT	7298:41	7298:48	6	( float ) vres
LEAF_NODE	7298:41	7298:41	7	(
TYPE_NAME	7298:42	7298:42	7	float
LEAF_NODE	7298:42	7298:42	8	float
LEAF_NODE	7298:47	7298:47	7	)
FIELD	7298:48	7298:48	7	vres
LEAF_NODE	7298:48	7298:48	8	vres
LEAF_NODE	7298:52	7298:52	6	)
LEAF_NODE	7298:53	7298:53	4	;
SELECTION	7301:2	7302:4	3	
KEYWORD	7301:2	7301:2	4	if
LEAF_NODE	7301:2	7301:2	5	if
LEAF_NODE	7301:5	7301:5	4	(
CONDITION	7301:6	7301:6	4	outtiled
EXPR	7301:6	7301:6	5	outtiled
FIELD	7301:6	7301:6	6	outtiled
LEAF_NODE	7301:6	7301:6	7	outtiled
LEAF_NODE	7301:14	7301:14	4	)
STATEMENTS	7302:4	7307:4	4	
LEAF_NODE	7302:4	7302:4	5	{
STATEMENTS	7303:4	7305:4	5	
SELECTION	7303:4	7304:6	6	
KEYWORD	7303:4	7303:4	7	if
LEAF_NODE	7303:4	7303:4	8	if
LEAF_NODE	7303:7	7303:7	7	(
CONDITION	7303:8	7303:8	7	config == PLANARCONFIG_CONTIG
EXPR	7303:8	7303:18	8	config == PLANARCONFIG_CONTIG
FIELD	7303:8	7303:8	9	config
LEAF_NODE	7303:8	7303:8	10	config
EQ_OPERATOR	7303:15	7303:15	9	==
LEAF_NODE	7303:15	7303:15	10	==
FIELD	7303:18	7303:18	9	PLANARCONFIG_CONTIG
LEAF_NODE	7303:18	7303:18	10	PLANARCONFIG_CONTIG
LEAF_NODE	7303:37	7303:37	7	)
STATEMENTS	7304:6	7304:6	7	
EXPR_STATEMENT	7304:6	7304:73	8	writeBufferToContigTiles ( out , sect_buff , length , width , spp , dump ) ;
EXPR	7304:6	7304:6	9	writeBufferToContigTiles ( out , sect_buff , length , width , spp , dump )
FUNCTION_CALL	7304:6	7304:72	10	writeBufferToContigTiles ( out , sect_buff , length , width , spp , dump )
CALLEE	7304:6	7304:6	11	writeBufferToContigTiles
LEAF_NODE	7304:6	7304:6	12	writeBufferToContigTiles
LEAF_NODE	7304:31	7304:31	11	(
ARGUMENT	7304:32	7304:32	11	out
FIELD	7304:32	7304:32	12	out
LEAF_NODE	7304:32	7304:32	13	out
LEAF_NODE	7304:35	7304:35	11	,
ARGUMENT	7304:37	7304:37	11	sect_buff
FIELD	7304:37	7304:37	12	sect_buff
LEAF_NODE	7304:37	7304:37	13	sect_buff
LEAF_NODE	7304:46	7304:46	11	,
ARGUMENT	7304:48	7304:48	11	length
FIELD	7304:48	7304:48	12	length
LEAF_NODE	7304:48	7304:48	13	length
LEAF_NODE	7304:54	7304:54	11	,
ARGUMENT	7304:56	7304:56	11	width
FIELD	7304:56	7304:56	12	width
LEAF_NODE	7304:56	7304:56	13	width
LEAF_NODE	7304:61	7304:61	11	,
ARGUMENT	7304:63	7304:63	11	spp
FIELD	7304:63	7304:63	12	spp
LEAF_NODE	7304:63	7304:63	13	spp
LEAF_NODE	7304:66	7304:66	11	,
ARGUMENT	7304:68	7304:68	11	dump
FIELD	7304:68	7304:68	12	dump
LEAF_NODE	7304:68	7304:68	13	dump
LEAF_NODE	7304:72	7304:72	11	)
LEAF_NODE	7304:73	7304:73	9	;
SELECTION	7305:4	7306:6	6	
KEYWORD	7305:4	7305:4	7	else
LEAF_NODE	7305:4	7305:4	8	else
STATEMENTS	7306:6	7306:6	7	
EXPR_STATEMENT	7306:6	7306:75	8	writeBufferToSeparateTiles ( out , sect_buff , length , width , spp , dump ) ;
EXPR	7306:6	7306:6	9	writeBufferToSeparateTiles ( out , sect_buff , length , width , spp , dump )
FUNCTION_CALL	7306:6	7306:74	10	writeBufferToSeparateTiles ( out , sect_buff , length , width , spp , dump )
CALLEE	7306:6	7306:6	11	writeBufferToSeparateTiles
LEAF_NODE	7306:6	7306:6	12	writeBufferToSeparateTiles
LEAF_NODE	7306:33	7306:33	11	(
ARGUMENT	7306:34	7306:34	11	out
FIELD	7306:34	7306:34	12	out
LEAF_NODE	7306:34	7306:34	13	out
LEAF_NODE	7306:37	7306:37	11	,
ARGUMENT	7306:39	7306:39	11	sect_buff
FIELD	7306:39	7306:39	12	sect_buff
LEAF_NODE	7306:39	7306:39	13	sect_buff
LEAF_NODE	7306:48	7306:48	11	,
ARGUMENT	7306:50	7306:50	11	length
FIELD	7306:50	7306:50	12	length
LEAF_NODE	7306:50	7306:50	13	length
LEAF_NODE	7306:56	7306:56	11	,
ARGUMENT	7306:58	7306:58	11	width
FIELD	7306:58	7306:58	12	width
LEAF_NODE	7306:58	7306:58	13	width
LEAF_NODE	7306:63	7306:63	11	,
ARGUMENT	7306:65	7306:65	11	spp
FIELD	7306:65	7306:65	12	spp
LEAF_NODE	7306:65	7306:65	13	spp
LEAF_NODE	7306:68	7306:68	11	,
ARGUMENT	7306:70	7306:70	11	dump
FIELD	7306:70	7306:70	12	dump
LEAF_NODE	7306:70	7306:70	13	dump
LEAF_NODE	7306:74	7306:74	11	)
LEAF_NODE	7306:75	7306:75	9	;
LEAF_NODE	7307:4	7307:4	5	}
SELECTION	7308:2	7309:4	3	
KEYWORD	7308:2	7308:2	4	else
LEAF_NODE	7308:2	7308:2	5	else
STATEMENTS	7309:4	7314:4	4	
LEAF_NODE	7309:4	7309:4	5	{
STATEMENTS	7310:4	7312:4	5	
SELECTION	7310:4	7311:6	6	
KEYWORD	7310:4	7310:4	7	if
LEAF_NODE	7310:4	7310:4	8	if
LEAF_NODE	7310:7	7310:7	7	(
CONDITION	7310:8	7310:8	7	config == PLANARCONFIG_CONTIG
EXPR	7310:8	7310:18	8	config == PLANARCONFIG_CONTIG
FIELD	7310:8	7310:8	9	config
LEAF_NODE	7310:8	7310:8	10	config
EQ_OPERATOR	7310:15	7310:15	9	==
LEAF_NODE	7310:15	7310:15	10	==
FIELD	7310:18	7310:18	9	PLANARCONFIG_CONTIG
LEAF_NODE	7310:18	7310:18	10	PLANARCONFIG_CONTIG
LEAF_NODE	7310:37	7310:37	7	)
STATEMENTS	7311:6	7311:6	7	
EXPR_STATEMENT	7311:6	7311:56	8	writeBufferToContigStrips ( out , sect_buff , length ) ;
EXPR	7311:6	7311:6	9	writeBufferToContigStrips ( out , sect_buff , length )
FUNCTION_CALL	7311:6	7311:55	10	writeBufferToContigStrips ( out , sect_buff , length )
CALLEE	7311:6	7311:6	11	writeBufferToContigStrips
LEAF_NODE	7311:6	7311:6	12	writeBufferToContigStrips
LEAF_NODE	7311:32	7311:32	11	(
ARGUMENT	7311:33	7311:33	11	out
FIELD	7311:33	7311:33	12	out
LEAF_NODE	7311:33	7311:33	13	out
LEAF_NODE	7311:36	7311:36	11	,
ARGUMENT	7311:38	7311:38	11	sect_buff
FIELD	7311:38	7311:38	12	sect_buff
LEAF_NODE	7311:38	7311:38	13	sect_buff
LEAF_NODE	7311:47	7311:47	11	,
ARGUMENT	7311:49	7311:49	11	length
FIELD	7311:49	7311:49	12	length
LEAF_NODE	7311:49	7311:49	13	length
LEAF_NODE	7311:55	7311:55	11	)
LEAF_NODE	7311:56	7311:56	9	;
SELECTION	7312:4	7313:6	6	
KEYWORD	7312:4	7312:4	7	else
LEAF_NODE	7312:4	7312:4	8	else
STATEMENTS	7313:6	7313:6	7	
EXPR_STATEMENT	7313:6	7313:75	8	writeBufferToSeparateStrips ( out , sect_buff , length , width , spp , dump ) ;
EXPR	7313:6	7313:6	9	writeBufferToSeparateStrips ( out , sect_buff , length , width , spp , dump )
FUNCTION_CALL	7313:6	7313:74	10	writeBufferToSeparateStrips ( out , sect_buff , length , width , spp , dump )
CALLEE	7313:6	7313:6	11	writeBufferToSeparateStrips
LEAF_NODE	7313:6	7313:6	12	writeBufferToSeparateStrips
LEAF_NODE	7313:33	7313:33	11	(
ARGUMENT	7313:34	7313:34	11	out
FIELD	7313:34	7313:34	12	out
LEAF_NODE	7313:34	7313:34	13	out
LEAF_NODE	7313:37	7313:37	11	,
ARGUMENT	7313:39	7313:39	11	sect_buff
FIELD	7313:39	7313:39	12	sect_buff
LEAF_NODE	7313:39	7313:39	13	sect_buff
LEAF_NODE	7313:48	7313:48	11	,
ARGUMENT	7313:50	7313:50	11	length
FIELD	7313:50	7313:50	12	length
LEAF_NODE	7313:50	7313:50	13	length
LEAF_NODE	7313:56	7313:56	11	,
ARGUMENT	7313:58	7313:58	11	width
FIELD	7313:58	7313:58	12	width
LEAF_NODE	7313:58	7313:58	13	width
LEAF_NODE	7313:63	7313:63	11	,
ARGUMENT	7313:65	7313:65	11	spp
FIELD	7313:65	7313:65	12	spp
LEAF_NODE	7313:65	7313:65	13	spp
LEAF_NODE	7313:68	7313:68	11	,
ARGUMENT	7313:70	7313:70	11	dump
FIELD	7313:70	7313:70	12	dump
LEAF_NODE	7313:70	7313:70	13	dump
LEAF_NODE	7313:74	7313:74	11	)
LEAF_NODE	7313:75	7313:75	9	;
LEAF_NODE	7314:4	7314:4	5	}
SELECTION	7316:2	7317:4	3	
KEYWORD	7316:2	7316:2	4	if
LEAF_NODE	7316:2	7316:2	5	if
LEAF_NODE	7316:5	7316:5	4	(
CONDITION	7316:6	7316:6	4	! TIFFWriteDirectory ( out )
EXPR	7316:6	7316:6	5	! TIFFWriteDirectory ( out )
UNARY_EXPR	7316:6	7316:7	6	! TIFFWriteDirectory ( out )
UNARY_OPERATOR	7316:6	7316:6	7	!
LEAF_NODE	7316:6	7316:6	8	!
FUNCTION_CALL	7316:7	7316:29	7	TIFFWriteDirectory ( out )
CALLEE	7316:7	7316:7	8	TIFFWriteDirectory
LEAF_NODE	7316:7	7316:7	9	TIFFWriteDirectory
LEAF_NODE	7316:25	7316:25	8	(
ARGUMENT	7316:26	7316:26	8	out
FIELD	7316:26	7316:26	9	out
LEAF_NODE	7316:26	7316:26	10	out
LEAF_NODE	7316:29	7316:29	8	)
LEAF_NODE	7316:30	7316:30	4	)
STATEMENTS	7317:4	7320:4	4	
LEAF_NODE	7317:4	7317:4	5	{
STATEMENTS	7318:4	7319:4	5	
EXPR_STATEMENT	7318:4	7318:18	6	TIFFClose ( out ) ;
EXPR	7318:4	7318:4	7	TIFFClose ( out )
FUNCTION_CALL	7318:4	7318:17	8	TIFFClose ( out )
CALLEE	7318:4	7318:4	9	TIFFClose
LEAF_NODE	7318:4	7318:4	10	TIFFClose
LEAF_NODE	7318:13	7318:13	9	(
ARGUMENT	7318:14	7318:14	9	out
FIELD	7318:14	7318:14	10	out
LEAF_NODE	7318:14	7318:14	11	out
LEAF_NODE	7318:17	7318:17	9	)
LEAF_NODE	7318:18	7318:18	7	;
JUMP_STATEMENT	7319:4	7319:15	6	return ( - 1 ) ;
KEYWORD	7319:4	7319:4	7	return
LEAF_NODE	7319:4	7319:4	8	return
DESTINATION	7319:11	7319:11	7	( - 1 )
EXPR	7319:11	7319:14	8	( - 1 )
LEAF_NODE	7319:11	7319:11	9	(
UNARY_EXPR	7319:12	7319:13	9	- 1
UNARY_OPERATOR	7319:12	7319:12	10	-
LEAF_NODE	7319:12	7319:12	11	-
FIELD	7319:13	7319:13	10	1
LEAF_NODE	7319:13	7319:13	11	1
LEAF_NODE	7319:14	7319:14	9	)
LEAF_NODE	7319:15	7319:15	7	;
LEAF_NODE	7320:4	7320:4	5	}
JUMP_STATEMENT	7322:2	7322:12	3	return ( 0 ) ;
KEYWORD	7322:2	7322:2	4	return
LEAF_NODE	7322:2	7322:2	5	return
DESTINATION	7322:9	7322:9	4	( 0 )
EXPR	7322:9	7322:11	5	( 0 )
LEAF_NODE	7322:9	7322:9	6	(
FIELD	7322:10	7322:10	6	0
LEAF_NODE	7322:10	7322:10	7	0
LEAF_NODE	7322:11	7322:11	6	)
LEAF_NODE	7322:12	7322:12	4	;
LEAF_NODE	7323:2	7323:2	2	}
FUNCTION_DEF	7327:0	7368:2	1	
RETURN_TYPE	7327:0	7327:7	2	static int
LEAF_NODE	7327:0	7327:0	3	static
TYPE_NAME	7327:7	7327:7	3	int
LEAF_NODE	7327:7	7327:7	4	int
FUNCTION_NAME	7328:0	7328:0	2	createImageSection
LEAF_NODE	7328:0	7328:0	3	createImageSection
PARAMETER_LIST	7328:18	7328:65	2	( uint32 sectsize , unsigned char * * sect_buff_ptr )
LEAF_NODE	7328:18	7328:18	3	(
PARAMETER_DECL	7328:19	7328:26	3	uint32 sectsize
TYPE	7328:19	7328:19	4	uint32
TYPE_NAME	7328:19	7328:19	5	uint32
LEAF_NODE	7328:19	7328:19	6	uint32
NAME	7328:26	7328:26	4	sectsize
LEAF_NODE	7328:26	7328:26	5	sectsize
LEAF_NODE	7328:34	7328:34	3	,
PARAMETER_DECL	7328:36	7328:52	3	unsigned char * * sect_buff_ptr
TYPE	7328:36	7328:50	4	unsigned char * *
TYPE_NAME	7328:36	7328:45	5	unsigned char
LEAF_NODE	7328:36	7328:36	6	unsigned
LEAF_NODE	7328:45	7328:45	6	char
POINTER	7328:50	7328:51	5	* *
LEAF_NODE	7328:50	7328:50	6	*
LEAF_NODE	7328:51	7328:51	6	*
NAME	7328:52	7328:52	4	sect_buff_ptr
LEAF_NODE	7328:52	7328:52	5	sect_buff_ptr
LEAF_NODE	7328:65	7328:65	3	)
LEAF_NODE	7329:2	7329:2	2	{
STATEMENTS	7330:2	7367:2	2	
SIMPLE_DECL	7330:2	7330:34	3	unsigned char * sect_buff ; sect_buff = NULL ;
VAR_DECL	7330:2	7330:18	4	unsigned char * sect_buff ; sect_buff = NULL
TYPE	7330:2	7330:17	5	unsigned char *
TYPE_NAME	7330:2	7330:12	6	unsigned char
LEAF_NODE	7330:2	7330:2	7	unsigned
LEAF_NODE	7330:12	7330:12	7	char
POINTER	7330:17	7330:17	6	*
LEAF_NODE	7330:17	7330:17	7	*
NAME	7330:18	7330:18	5	sect_buff
LEAF_NODE	7330:18	7330:18	6	sect_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7330:18	7330:18	5	sect_buff = NULL
ASSIGN	7330:18	7330:30	6	sect_buff = NULL
LVAL	7330:18	7330:18	7	sect_buff
NAME	7330:18	7330:18	8	sect_buff
LEAF_NODE	7330:18	7330:18	9	sect_buff
ASSIGN_OP	7330:28	7330:28	7	=
LEAF_NODE	7330:28	7330:28	8	=
RVAL	7330:30	7330:30	7	NULL
FIELD	7330:30	7330:30	8	NULL
LEAF_NODE	7330:30	7330:30	9	NULL
LEAF_NODE	7330:34	7330:34	4	;
SIMPLE_DECL	7331:2	7331:34	3	unsigned char * new_buff ; new_buff = NULL ;
VAR_DECL	7331:2	7331:18	4	unsigned char * new_buff ; new_buff = NULL
TYPE	7331:2	7331:17	5	unsigned char *
TYPE_NAME	7331:2	7331:12	6	unsigned char
LEAF_NODE	7331:2	7331:2	7	unsigned
LEAF_NODE	7331:12	7331:12	7	char
POINTER	7331:17	7331:17	6	*
LEAF_NODE	7331:17	7331:17	7	*
NAME	7331:18	7331:18	5	new_buff
LEAF_NODE	7331:18	7331:18	6	new_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7331:18	7331:18	5	new_buff = NULL
ASSIGN	7331:18	7331:30	6	new_buff = NULL
LVAL	7331:18	7331:18	7	new_buff
NAME	7331:18	7331:18	8	new_buff
LEAF_NODE	7331:18	7331:18	9	new_buff
ASSIGN_OP	7331:28	7331:28	7	=
LEAF_NODE	7331:28	7331:28	8	=
RVAL	7331:30	7331:30	7	NULL
FIELD	7331:30	7331:30	8	NULL
LEAF_NODE	7331:30	7331:30	9	NULL
LEAF_NODE	7331:34	7331:34	4	;
LEAF_NODE	7332:2	7332:2	3	static
SIMPLE_DECL	7332:12	7332:37	3	uint32 prev_sectsize ; prev_sectsize = 0 ;
VAR_DECL	7332:12	7332:20	4	uint32 prev_sectsize ; prev_sectsize = 0
TYPE	7332:12	7332:12	5	uint32
TYPE_NAME	7332:12	7332:12	6	uint32
LEAF_NODE	7332:12	7332:12	7	uint32
NAME	7332:20	7332:20	5	prev_sectsize
LEAF_NODE	7332:20	7332:20	6	prev_sectsize
LEAF_NODE	0:0	0:0	5	;
INIT	7332:20	7332:20	5	prev_sectsize = 0
ASSIGN	7332:20	7332:36	6	prev_sectsize = 0
LVAL	7332:20	7332:20	7	prev_sectsize
NAME	7332:20	7332:20	8	prev_sectsize
LEAF_NODE	7332:20	7332:20	9	prev_sectsize
ASSIGN_OP	7332:34	7332:34	7	=
LEAF_NODE	7332:34	7332:34	8	=
RVAL	7332:36	7332:36	7	0
FIELD	7332:36	7332:36	8	0
LEAF_NODE	7332:36	7332:36	9	0
LEAF_NODE	7332:37	7332:37	4	;
EXPR_STATEMENT	7334:2	7334:28	3	sect_buff = * sect_buff_ptr ;
EXPR	7334:2	7334:2	4	sect_buff = * sect_buff_ptr
ASSIGN	7334:2	7334:14	5	sect_buff = * sect_buff_ptr
LVAL	7334:2	7334:2	6	sect_buff
FIELD	7334:2	7334:2	7	sect_buff
LEAF_NODE	7334:2	7334:2	8	sect_buff
ASSIGN_OP	7334:12	7334:12	6	=
LEAF_NODE	7334:12	7334:12	7	=
RVAL	7334:14	7334:14	6	* sect_buff_ptr
UNARY_EXPR	7334:14	7334:15	7	* sect_buff_ptr
UNARY_OPERATOR	7334:14	7334:14	8	*
LEAF_NODE	7334:14	7334:14	9	*
FIELD	7334:15	7334:15	8	sect_buff_ptr
LEAF_NODE	7334:15	7334:15	9	sect_buff_ptr
LEAF_NODE	7334:28	7334:28	4	;
SELECTION	7336:2	7337:4	3	
KEYWORD	7336:2	7336:2	4	if
LEAF_NODE	7336:2	7336:2	5	if
LEAF_NODE	7336:5	7336:5	4	(
CONDITION	7336:6	7336:6	4	! sect_buff
EXPR	7336:6	7336:6	5	! sect_buff
UNARY_EXPR	7336:6	7336:7	6	! sect_buff
UNARY_OPERATOR	7336:6	7336:6	7	!
LEAF_NODE	7336:6	7336:6	8	!
FIELD	7336:7	7336:7	7	sect_buff
LEAF_NODE	7336:7	7336:7	8	sect_buff
LEAF_NODE	7336:16	7336:16	4	)
STATEMENTS	7337:4	7341:4	4	
LEAF_NODE	7337:4	7337:4	5	{
STATEMENTS	7338:4	7340:4	5	
EXPR_STATEMENT	7338:4	7338:54	6	sect_buff = ( unsigned char * ) _TIFFmalloc ( sectsize ) ;
EXPR	7338:4	7338:4	7	sect_buff = ( unsigned char * ) _TIFFmalloc ( sectsize )
ASSIGN	7338:4	7338:16	8	sect_buff = ( unsigned char * ) _TIFFmalloc ( sectsize )
LVAL	7338:4	7338:4	9	sect_buff
FIELD	7338:4	7338:4	10	sect_buff
LEAF_NODE	7338:4	7338:4	11	sect_buff
ASSIGN_OP	7338:14	7338:14	9	=
LEAF_NODE	7338:14	7338:14	10	=
RVAL	7338:16	7338:33	9	( unsigned char * ) _TIFFmalloc ( sectsize )
LEAF_NODE	7338:16	7338:16	10	(
TYPE_NAME	7338:17	7338:26	10	unsigned char
LEAF_NODE	7338:17	7338:17	11	unsigned
LEAF_NODE	7338:26	7338:26	11	char
LEAF_NODE	7338:31	7338:31	10	*
LEAF_NODE	7338:32	7338:32	10	)
FUNCTION_CALL	7338:33	7338:53	10	_TIFFmalloc ( sectsize )
CALLEE	7338:33	7338:33	11	_TIFFmalloc
LEAF_NODE	7338:33	7338:33	12	_TIFFmalloc
LEAF_NODE	7338:44	7338:44	11	(
ARGUMENT	7338:45	7338:45	11	sectsize
FIELD	7338:45	7338:45	12	sectsize
LEAF_NODE	7338:45	7338:45	13	sectsize
LEAF_NODE	7338:53	7338:53	11	)
LEAF_NODE	7338:54	7338:54	7	;
EXPR_STATEMENT	7339:4	7339:30	6	* sect_buff_ptr = sect_buff ;
EXPR	7339:4	7339:4	7	* sect_buff_ptr = sect_buff
ASSIGN	7339:4	7339:21	8	* sect_buff_ptr = sect_buff
LVAL	7339:4	7339:4	9	* sect_buff_ptr
UNARY_EXPR	7339:4	7339:5	10	* sect_buff_ptr
UNARY_OPERATOR	7339:4	7339:4	11	*
LEAF_NODE	7339:4	7339:4	12	*
FIELD	7339:5	7339:5	11	sect_buff_ptr
LEAF_NODE	7339:5	7339:5	12	sect_buff_ptr
ASSIGN_OP	7339:19	7339:19	9	=
LEAF_NODE	7339:19	7339:19	10	=
RVAL	7339:21	7339:21	9	sect_buff
FIELD	7339:21	7339:21	10	sect_buff
LEAF_NODE	7339:21	7339:21	11	sect_buff
LEAF_NODE	7339:30	7339:30	7	;
EXPR_STATEMENT	7340:4	7340:39	6	_TIFFmemset ( sect_buff , 0 , sectsize ) ;
EXPR	7340:4	7340:4	7	_TIFFmemset ( sect_buff , 0 , sectsize )
FUNCTION_CALL	7340:4	7340:38	8	_TIFFmemset ( sect_buff , 0 , sectsize )
CALLEE	7340:4	7340:4	9	_TIFFmemset
LEAF_NODE	7340:4	7340:4	10	_TIFFmemset
LEAF_NODE	7340:15	7340:15	9	(
ARGUMENT	7340:16	7340:16	9	sect_buff
FIELD	7340:16	7340:16	10	sect_buff
LEAF_NODE	7340:16	7340:16	11	sect_buff
LEAF_NODE	7340:25	7340:25	9	,
ARGUMENT	7340:27	7340:27	9	0
FIELD	7340:27	7340:27	10	0
LEAF_NODE	7340:27	7340:27	11	0
LEAF_NODE	7340:28	7340:28	9	,
ARGUMENT	7340:30	7340:30	9	sectsize
FIELD	7340:30	7340:30	10	sectsize
LEAF_NODE	7340:30	7340:30	11	sectsize
LEAF_NODE	7340:38	7340:38	9	)
LEAF_NODE	7340:39	7340:39	7	;
LEAF_NODE	7341:4	7341:4	5	}
SELECTION	7342:2	7343:4	3	
KEYWORD	7342:2	7342:2	4	else
LEAF_NODE	7342:2	7342:2	5	else
STATEMENTS	7343:4	7357:4	4	
LEAF_NODE	7343:4	7343:4	5	{
STATEMENTS	7344:4	7344:4	5	
SELECTION	7344:4	7345:6	6	
KEYWORD	7344:4	7344:4	7	if
LEAF_NODE	7344:4	7344:4	8	if
LEAF_NODE	7344:7	7344:7	7	(
CONDITION	7344:8	7344:8	7	prev_sectsize < sectsize
EXPR	7344:8	7344:24	8	prev_sectsize < sectsize
FIELD	7344:8	7344:8	9	prev_sectsize
LEAF_NODE	7344:8	7344:8	10	prev_sectsize
REL_OPERATOR	7344:22	7344:22	9	<
LEAF_NODE	7344:22	7344:22	10	<
FIELD	7344:24	7344:24	9	sectsize
LEAF_NODE	7344:24	7344:24	10	sectsize
LEAF_NODE	7344:32	7344:32	7	)
STATEMENTS	7345:6	7356:6	7	
LEAF_NODE	7345:6	7345:6	8	{
STATEMENTS	7346:6	7355:6	8	
EXPR_STATEMENT	7346:6	7346:50	9	new_buff = _TIFFrealloc ( sect_buff , sectsize ) ;
EXPR	7346:6	7346:6	10	new_buff = _TIFFrealloc ( sect_buff , sectsize )
ASSIGN	7346:6	7346:17	11	new_buff = _TIFFrealloc ( sect_buff , sectsize )
LVAL	7346:6	7346:6	12	new_buff
FIELD	7346:6	7346:6	13	new_buff
LEAF_NODE	7346:6	7346:6	14	new_buff
ASSIGN_OP	7346:15	7346:15	12	=
LEAF_NODE	7346:15	7346:15	13	=
RVAL	7346:17	7346:17	12	_TIFFrealloc ( sect_buff , sectsize )
FUNCTION_CALL	7346:17	7346:49	13	_TIFFrealloc ( sect_buff , sectsize )
CALLEE	7346:17	7346:17	14	_TIFFrealloc
LEAF_NODE	7346:17	7346:17	15	_TIFFrealloc
LEAF_NODE	7346:29	7346:29	14	(
ARGUMENT	7346:30	7346:30	14	sect_buff
FIELD	7346:30	7346:30	15	sect_buff
LEAF_NODE	7346:30	7346:30	16	sect_buff
LEAF_NODE	7346:39	7346:39	14	,
ARGUMENT	7346:41	7346:41	14	sectsize
FIELD	7346:41	7346:41	15	sectsize
LEAF_NODE	7346:41	7346:41	16	sectsize
LEAF_NODE	7346:49	7346:49	14	)
LEAF_NODE	7346:50	7346:50	10	;
SELECTION	7347:6	7348:8	9	
KEYWORD	7347:6	7347:6	10	if
LEAF_NODE	7347:6	7347:6	11	if
LEAF_NODE	7347:9	7347:9	10	(
CONDITION	7347:10	7347:10	10	! new_buff
EXPR	7347:10	7347:10	11	! new_buff
UNARY_EXPR	7347:10	7347:11	12	! new_buff
UNARY_OPERATOR	7347:10	7347:10	13	!
LEAF_NODE	7347:10	7347:10	14	!
FIELD	7347:11	7347:11	13	new_buff
LEAF_NODE	7347:11	7347:11	14	new_buff
LEAF_NODE	7347:19	7347:19	10	)
STATEMENTS	7348:8	7351:8	10	
LEAF_NODE	7348:8	7348:8	11	{
STATEMENTS	7349:1	7350:8	11	
EXPR_STATEMENT	7349:1	7349:17	12	free ( sect_buff ) ;
EXPR	7349:1	7349:1	13	free ( sect_buff )
FUNCTION_CALL	7349:1	7349:16	14	free ( sect_buff )
CALLEE	7349:1	7349:1	15	free
LEAF_NODE	7349:1	7349:1	16	free
LEAF_NODE	7349:6	7349:6	15	(
ARGUMENT	7349:7	7349:7	15	sect_buff
FIELD	7349:7	7349:7	16	sect_buff
LEAF_NODE	7349:7	7349:7	17	sect_buff
LEAF_NODE	7349:16	7349:16	15	)
LEAF_NODE	7349:17	7349:17	13	;
EXPR_STATEMENT	7350:8	7350:58	12	sect_buff = ( unsigned char * ) _TIFFmalloc ( sectsize ) ;
EXPR	7350:8	7350:8	13	sect_buff = ( unsigned char * ) _TIFFmalloc ( sectsize )
ASSIGN	7350:8	7350:20	14	sect_buff = ( unsigned char * ) _TIFFmalloc ( sectsize )
LVAL	7350:8	7350:8	15	sect_buff
FIELD	7350:8	7350:8	16	sect_buff
LEAF_NODE	7350:8	7350:8	17	sect_buff
ASSIGN_OP	7350:18	7350:18	15	=
LEAF_NODE	7350:18	7350:18	16	=
RVAL	7350:20	7350:37	15	( unsigned char * ) _TIFFmalloc ( sectsize )
LEAF_NODE	7350:20	7350:20	16	(
TYPE_NAME	7350:21	7350:30	16	unsigned char
LEAF_NODE	7350:21	7350:21	17	unsigned
LEAF_NODE	7350:30	7350:30	17	char
LEAF_NODE	7350:35	7350:35	16	*
LEAF_NODE	7350:36	7350:36	16	)
FUNCTION_CALL	7350:37	7350:57	16	_TIFFmalloc ( sectsize )
CALLEE	7350:37	7350:37	17	_TIFFmalloc
LEAF_NODE	7350:37	7350:37	18	_TIFFmalloc
LEAF_NODE	7350:48	7350:48	17	(
ARGUMENT	7350:49	7350:49	17	sectsize
FIELD	7350:49	7350:49	18	sectsize
LEAF_NODE	7350:49	7350:49	19	sectsize
LEAF_NODE	7350:57	7350:57	17	)
LEAF_NODE	7350:58	7350:58	13	;
LEAF_NODE	7351:8	7351:8	11	}
SELECTION	7352:6	7353:8	9	
KEYWORD	7352:6	7352:6	10	else
LEAF_NODE	7352:6	7352:6	11	else
STATEMENTS	7353:8	7353:8	10	
EXPR_STATEMENT	7353:8	7353:28	11	sect_buff = new_buff ;
EXPR	7353:8	7353:8	12	sect_buff = new_buff
ASSIGN	7353:8	7353:20	13	sect_buff = new_buff
LVAL	7353:8	7353:8	14	sect_buff
FIELD	7353:8	7353:8	15	sect_buff
LEAF_NODE	7353:8	7353:8	16	sect_buff
ASSIGN_OP	7353:18	7353:18	14	=
LEAF_NODE	7353:18	7353:18	15	=
RVAL	7353:20	7353:20	14	new_buff
FIELD	7353:20	7353:20	15	new_buff
LEAF_NODE	7353:20	7353:20	16	new_buff
LEAF_NODE	7353:28	7353:28	12	;
EXPR_STATEMENT	7355:6	7355:41	9	_TIFFmemset ( sect_buff , 0 , sectsize ) ;
EXPR	7355:6	7355:6	10	_TIFFmemset ( sect_buff , 0 , sectsize )
FUNCTION_CALL	7355:6	7355:40	11	_TIFFmemset ( sect_buff , 0 , sectsize )
CALLEE	7355:6	7355:6	12	_TIFFmemset
LEAF_NODE	7355:6	7355:6	13	_TIFFmemset
LEAF_NODE	7355:17	7355:17	12	(
ARGUMENT	7355:18	7355:18	12	sect_buff
FIELD	7355:18	7355:18	13	sect_buff
LEAF_NODE	7355:18	7355:18	14	sect_buff
LEAF_NODE	7355:27	7355:27	12	,
ARGUMENT	7355:29	7355:29	12	0
FIELD	7355:29	7355:29	13	0
LEAF_NODE	7355:29	7355:29	14	0
LEAF_NODE	7355:30	7355:30	12	,
ARGUMENT	7355:32	7355:32	12	sectsize
FIELD	7355:32	7355:32	13	sectsize
LEAF_NODE	7355:32	7355:32	14	sectsize
LEAF_NODE	7355:40	7355:40	12	)
LEAF_NODE	7355:41	7355:41	10	;
LEAF_NODE	7356:6	7356:6	8	}
LEAF_NODE	7357:4	7357:4	5	}
SELECTION	7359:2	7360:4	3	
KEYWORD	7359:2	7359:2	4	if
LEAF_NODE	7359:2	7359:2	5	if
LEAF_NODE	7359:5	7359:5	4	(
CONDITION	7359:6	7359:6	4	! sect_buff
EXPR	7359:6	7359:6	5	! sect_buff
UNARY_EXPR	7359:6	7359:7	6	! sect_buff
UNARY_OPERATOR	7359:6	7359:6	7	!
LEAF_NODE	7359:6	7359:6	8	!
FIELD	7359:7	7359:7	7	sect_buff
LEAF_NODE	7359:7	7359:7	8	sect_buff
LEAF_NODE	7359:16	7359:16	4	)
STATEMENTS	7360:4	7363:4	4	
LEAF_NODE	7360:4	7360:4	5	{
STATEMENTS	7361:4	7362:4	5	
EXPR_STATEMENT	7361:4	7361:83	6	TIFFError ( "createImageSection" , "Unable to allocate/reallocate section buffer" ) ;
EXPR	7361:4	7361:4	7	TIFFError ( "createImageSection" , "Unable to allocate/reallocate section buffer" )
FUNCTION_CALL	7361:4	7361:82	8	TIFFError ( "createImageSection" , "Unable to allocate/reallocate section buffer" )
CALLEE	7361:4	7361:4	9	TIFFError
LEAF_NODE	7361:4	7361:4	10	TIFFError
LEAF_NODE	7361:13	7361:13	9	(
ARGUMENT	7361:14	7361:14	9	"createImageSection"
FIELD	7361:14	7361:14	10	"createImageSection"
LEAF_NODE	7361:14	7361:14	11	"createImageSection"
LEAF_NODE	7361:34	7361:34	9	,
ARGUMENT	7361:36	7361:36	9	"Unable to allocate/reallocate section buffer"
FIELD	7361:36	7361:36	10	"Unable to allocate/reallocate section buffer"
LEAF_NODE	7361:36	7361:36	11	"Unable to allocate/reallocate section buffer"
LEAF_NODE	7361:82	7361:82	9	)
LEAF_NODE	7361:83	7361:83	7	;
JUMP_STATEMENT	7362:4	7362:15	6	return ( - 1 ) ;
KEYWORD	7362:4	7362:4	7	return
LEAF_NODE	7362:4	7362:4	8	return
DESTINATION	7362:11	7362:11	7	( - 1 )
EXPR	7362:11	7362:14	8	( - 1 )
LEAF_NODE	7362:11	7362:11	9	(
UNARY_EXPR	7362:12	7362:13	9	- 1
UNARY_OPERATOR	7362:12	7362:12	10	-
LEAF_NODE	7362:12	7362:12	11	-
FIELD	7362:13	7362:13	10	1
LEAF_NODE	7362:13	7362:13	11	1
LEAF_NODE	7362:14	7362:14	9	)
LEAF_NODE	7362:15	7362:15	7	;
LEAF_NODE	7363:4	7363:4	5	}
EXPR_STATEMENT	7364:2	7364:26	3	prev_sectsize = sectsize ;
EXPR	7364:2	7364:2	4	prev_sectsize = sectsize
ASSIGN	7364:2	7364:18	5	prev_sectsize = sectsize
LVAL	7364:2	7364:2	6	prev_sectsize
FIELD	7364:2	7364:2	7	prev_sectsize
LEAF_NODE	7364:2	7364:2	8	prev_sectsize
ASSIGN_OP	7364:16	7364:16	6	=
LEAF_NODE	7364:16	7364:16	7	=
RVAL	7364:18	7364:18	6	sectsize
FIELD	7364:18	7364:18	7	sectsize
LEAF_NODE	7364:18	7364:18	8	sectsize
LEAF_NODE	7364:26	7364:26	4	;
EXPR_STATEMENT	7365:2	7365:28	3	* sect_buff_ptr = sect_buff ;
EXPR	7365:2	7365:2	4	* sect_buff_ptr = sect_buff
ASSIGN	7365:2	7365:19	5	* sect_buff_ptr = sect_buff
LVAL	7365:2	7365:2	6	* sect_buff_ptr
UNARY_EXPR	7365:2	7365:3	7	* sect_buff_ptr
UNARY_OPERATOR	7365:2	7365:2	8	*
LEAF_NODE	7365:2	7365:2	9	*
FIELD	7365:3	7365:3	8	sect_buff_ptr
LEAF_NODE	7365:3	7365:3	9	sect_buff_ptr
ASSIGN_OP	7365:17	7365:17	6	=
LEAF_NODE	7365:17	7365:17	7	=
RVAL	7365:19	7365:19	6	sect_buff
FIELD	7365:19	7365:19	7	sect_buff
LEAF_NODE	7365:19	7365:19	8	sect_buff
LEAF_NODE	7365:28	7365:28	4	;
JUMP_STATEMENT	7367:2	7367:12	3	return ( 0 ) ;
KEYWORD	7367:2	7367:2	4	return
LEAF_NODE	7367:2	7367:2	5	return
DESTINATION	7367:9	7367:9	4	( 0 )
EXPR	7367:9	7367:11	5	( 0 )
LEAF_NODE	7367:9	7367:9	6	(
FIELD	7367:10	7367:10	6	0
LEAF_NODE	7367:10	7367:10	7	0
LEAF_NODE	7367:11	7367:11	6	)
LEAF_NODE	7367:12	7367:12	4	;
LEAF_NODE	7368:2	7368:2	2	}
FUNCTION_DEF	7372:0	7597:2	1	
RETURN_TYPE	7372:0	7372:7	2	static int
LEAF_NODE	7372:0	7372:0	3	static
TYPE_NAME	7372:7	7372:7	3	int
LEAF_NODE	7372:7	7372:7	4	int
FUNCTION_NAME	7373:0	7373:0	2	processCropSelections
LEAF_NODE	7373:0	7373:0	3	processCropSelections
PARAMETER_LIST	7373:21	7374:80	2	( struct image_data * image , struct crop_mask * crop , unsigned char * * read_buff_ptr , struct buffinfo [ ] seg_buffs )
LEAF_NODE	7373:21	7373:21	3	(
PARAMETER_DECL	7373:22	7373:41	3	struct image_data * image
TYPE	7373:22	7373:40	4	struct image_data *
TYPE_NAME	7373:22	7373:29	5	struct image_data
LEAF_NODE	7373:22	7373:22	6	struct
LEAF_NODE	7373:29	7373:29	6	image_data
POINTER	7373:40	7373:40	5	*
LEAF_NODE	7373:40	7373:40	6	*
NAME	7373:41	7373:41	4	image
LEAF_NODE	7373:41	7373:41	5	image
LEAF_NODE	7373:46	7373:46	3	,
PARAMETER_DECL	7373:48	7373:66	3	struct crop_mask * crop
TYPE	7373:48	7373:65	4	struct crop_mask *
TYPE_NAME	7373:48	7373:55	5	struct crop_mask
LEAF_NODE	7373:48	7373:48	6	struct
LEAF_NODE	7373:55	7373:55	6	crop_mask
POINTER	7373:65	7373:65	5	*
LEAF_NODE	7373:65	7373:65	6	*
NAME	7373:66	7373:66	4	crop
LEAF_NODE	7373:66	7373:66	5	crop
LEAF_NODE	7373:70	7373:70	3	,
PARAMETER_DECL	7374:22	7374:38	3	unsigned char * * read_buff_ptr
TYPE	7374:22	7374:36	4	unsigned char * *
TYPE_NAME	7374:22	7374:31	5	unsigned char
LEAF_NODE	7374:22	7374:22	6	unsigned
LEAF_NODE	7374:31	7374:31	6	char
POINTER	7374:36	7374:37	5	* *
LEAF_NODE	7374:36	7374:36	6	*
LEAF_NODE	7374:37	7374:37	6	*
NAME	7374:38	7374:38	4	read_buff_ptr
LEAF_NODE	7374:38	7374:38	5	read_buff_ptr
LEAF_NODE	7374:51	7374:51	3	,
PARAMETER_DECL	7374:53	7374:69	3	struct buffinfo [ ] seg_buffs
TYPE	7374:53	7374:78	4	struct buffinfo [ ]
TYPE_NAME	7374:53	7374:60	5	struct buffinfo
LEAF_NODE	7374:53	7374:53	6	struct
LEAF_NODE	7374:60	7374:60	6	buffinfo
TYPE_SUFFIX	7374:78	7374:79	5	[ ]
LEAF_NODE	7374:78	7374:78	6	[
LEAF_NODE	7374:79	7374:79	6	]
NAME	7374:69	7374:69	4	seg_buffs
LEAF_NODE	7374:69	7374:69	5	seg_buffs
LEAF_NODE	7374:80	7374:80	3	)
LEAF_NODE	7375:2	7375:2	2	{
STATEMENTS	7376:2	7596:2	2	
SIMPLE_DECL	7376:2	7376:13	3	int i ;
VAR_DECL	7376:2	7376:12	4	int i
TYPE	7376:2	7376:2	5	int
TYPE_NAME	7376:2	7376:2	6	int
LEAF_NODE	7376:2	7376:2	7	int
NAME	7376:12	7376:12	5	i
LEAF_NODE	7376:12	7376:12	6	i
LEAF_NODE	7376:13	7376:13	4	;
SIMPLE_DECL	7377:2	7377:52	3	uint32 width , uint32 length , uint32 total_width , uint32 total_length ;
INIT_DECL_LIST	7377:2	7377:2	4	uint32 width , uint32 length , uint32 total_width , uint32 total_length
VAR_DECL	7377:2	7377:12	5	uint32 width
TYPE	7377:2	7377:2	6	uint32
TYPE_NAME	7377:2	7377:2	7	uint32
LEAF_NODE	7377:2	7377:2	8	uint32
NAME	7377:12	7377:12	6	width
LEAF_NODE	7377:12	7377:12	7	width
LEAF_NODE	7377:17	7377:17	5	,
INIT_DECL_LIST	7377:2	7377:2	5	uint32 length , uint32 total_width , uint32 total_length
VAR_DECL	7377:2	7377:19	6	uint32 length
TYPE	7377:2	7377:2	7	uint32
TYPE_NAME	7377:2	7377:2	8	uint32
LEAF_NODE	7377:2	7377:2	9	uint32
NAME	7377:19	7377:19	7	length
LEAF_NODE	7377:19	7377:19	8	length
LEAF_NODE	7377:25	7377:25	6	,
INIT_DECL_LIST	7377:2	7377:2	6	uint32 total_width , uint32 total_length
VAR_DECL	7377:2	7377:27	7	uint32 total_width
TYPE	7377:2	7377:2	8	uint32
TYPE_NAME	7377:2	7377:2	9	uint32
LEAF_NODE	7377:2	7377:2	10	uint32
NAME	7377:27	7377:27	8	total_width
LEAF_NODE	7377:27	7377:27	9	total_width
LEAF_NODE	7377:38	7377:38	7	,
VAR_DECL	7377:2	7377:40	7	uint32 total_length
TYPE	7377:2	7377:2	8	uint32
TYPE_NAME	7377:2	7377:2	9	uint32
LEAF_NODE	7377:2	7377:2	10	uint32
NAME	7377:40	7377:40	8	total_length
LEAF_NODE	7377:40	7377:40	9	total_length
LEAF_NODE	7377:52	7377:52	4	;
SIMPLE_DECL	7378:2	7378:20	3	tsize_t cropsize ;
VAR_DECL	7378:2	7378:12	4	tsize_t cropsize
TYPE	7378:2	7378:2	5	tsize_t
TYPE_NAME	7378:2	7378:2	6	tsize_t
LEAF_NODE	7378:2	7378:2	7	tsize_t
NAME	7378:12	7378:12	5	cropsize
LEAF_NODE	7378:12	7378:12	6	cropsize
LEAF_NODE	7378:20	7378:20	4	;
SIMPLE_DECL	7379:2	7379:34	3	unsigned char * crop_buff ; crop_buff = NULL ;
VAR_DECL	7379:2	7379:18	4	unsigned char * crop_buff ; crop_buff = NULL
TYPE	7379:2	7379:17	5	unsigned char *
TYPE_NAME	7379:2	7379:12	6	unsigned char
LEAF_NODE	7379:2	7379:2	7	unsigned
LEAF_NODE	7379:12	7379:12	7	char
POINTER	7379:17	7379:17	6	*
LEAF_NODE	7379:17	7379:17	7	*
NAME	7379:18	7379:18	5	crop_buff
LEAF_NODE	7379:18	7379:18	6	crop_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7379:18	7379:18	5	crop_buff = NULL
ASSIGN	7379:18	7379:30	6	crop_buff = NULL
LVAL	7379:18	7379:18	7	crop_buff
NAME	7379:18	7379:18	8	crop_buff
LEAF_NODE	7379:18	7379:18	9	crop_buff
ASSIGN_OP	7379:28	7379:28	7	=
LEAF_NODE	7379:28	7379:28	8	=
RVAL	7379:30	7379:30	7	NULL
FIELD	7379:30	7379:30	8	NULL
LEAF_NODE	7379:30	7379:30	9	NULL
LEAF_NODE	7379:34	7379:34	4	;
SIMPLE_DECL	7380:2	7380:34	3	unsigned char * read_buff ; read_buff = NULL ;
VAR_DECL	7380:2	7380:18	4	unsigned char * read_buff ; read_buff = NULL
TYPE	7380:2	7380:17	5	unsigned char *
TYPE_NAME	7380:2	7380:12	6	unsigned char
LEAF_NODE	7380:2	7380:2	7	unsigned
LEAF_NODE	7380:12	7380:12	7	char
POINTER	7380:17	7380:17	6	*
LEAF_NODE	7380:17	7380:17	7	*
NAME	7380:18	7380:18	5	read_buff
LEAF_NODE	7380:18	7380:18	6	read_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7380:18	7380:18	5	read_buff = NULL
ASSIGN	7380:18	7380:30	6	read_buff = NULL
LVAL	7380:18	7380:18	7	read_buff
NAME	7380:18	7380:18	8	read_buff
LEAF_NODE	7380:18	7380:18	9	read_buff
ASSIGN_OP	7380:28	7380:28	7	=
LEAF_NODE	7380:28	7380:28	8	=
RVAL	7380:30	7380:30	7	NULL
FIELD	7380:30	7380:30	8	NULL
LEAF_NODE	7380:30	7380:30	9	NULL
LEAF_NODE	7380:34	7380:34	4	;
SIMPLE_DECL	7381:2	7381:34	3	unsigned char * next_buff ; next_buff = NULL ;
VAR_DECL	7381:2	7381:18	4	unsigned char * next_buff ; next_buff = NULL
TYPE	7381:2	7381:17	5	unsigned char *
TYPE_NAME	7381:2	7381:12	6	unsigned char
LEAF_NODE	7381:2	7381:2	7	unsigned
LEAF_NODE	7381:12	7381:12	7	char
POINTER	7381:17	7381:17	6	*
LEAF_NODE	7381:17	7381:17	7	*
NAME	7381:18	7381:18	5	next_buff
LEAF_NODE	7381:18	7381:18	6	next_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7381:18	7381:18	5	next_buff = NULL
ASSIGN	7381:18	7381:30	6	next_buff = NULL
LVAL	7381:18	7381:18	7	next_buff
NAME	7381:18	7381:18	8	next_buff
LEAF_NODE	7381:18	7381:18	9	next_buff
ASSIGN_OP	7381:28	7381:28	7	=
LEAF_NODE	7381:28	7381:28	8	=
RVAL	7381:30	7381:30	7	NULL
FIELD	7381:30	7381:30	8	NULL
LEAF_NODE	7381:30	7381:30	9	NULL
LEAF_NODE	7381:34	7381:34	4	;
SIMPLE_DECL	7382:2	7382:29	3	tsize_t prev_cropsize ; prev_cropsize = 0 ;
VAR_DECL	7382:2	7382:12	4	tsize_t prev_cropsize ; prev_cropsize = 0
TYPE	7382:2	7382:2	5	tsize_t
TYPE_NAME	7382:2	7382:2	6	tsize_t
LEAF_NODE	7382:2	7382:2	7	tsize_t
NAME	7382:12	7382:12	5	prev_cropsize
LEAF_NODE	7382:12	7382:12	6	prev_cropsize
LEAF_NODE	0:0	0:0	5	;
INIT	7382:12	7382:12	5	prev_cropsize = 0
ASSIGN	7382:12	7382:28	6	prev_cropsize = 0
LVAL	7382:12	7382:12	7	prev_cropsize
NAME	7382:12	7382:12	8	prev_cropsize
LEAF_NODE	7382:12	7382:12	9	prev_cropsize
ASSIGN_OP	7382:26	7382:26	7	=
LEAF_NODE	7382:26	7382:26	8	=
RVAL	7382:28	7382:28	7	0
FIELD	7382:28	7382:28	8	0
LEAF_NODE	7382:28	7382:28	9	0
LEAF_NODE	7382:29	7382:29	4	;
EXPR_STATEMENT	7384:2	7384:28	3	read_buff = * read_buff_ptr ;
EXPR	7384:2	7384:2	4	read_buff = * read_buff_ptr
ASSIGN	7384:2	7384:14	5	read_buff = * read_buff_ptr
LVAL	7384:2	7384:2	6	read_buff
FIELD	7384:2	7384:2	7	read_buff
LEAF_NODE	7384:2	7384:2	8	read_buff
ASSIGN_OP	7384:12	7384:12	6	=
LEAF_NODE	7384:12	7384:12	7	=
RVAL	7384:14	7384:14	6	* read_buff_ptr
UNARY_EXPR	7384:14	7384:15	7	* read_buff_ptr
UNARY_OPERATOR	7384:14	7384:14	8	*
LEAF_NODE	7384:14	7384:14	9	*
FIELD	7384:15	7384:15	8	read_buff_ptr
LEAF_NODE	7384:15	7384:15	9	read_buff_ptr
LEAF_NODE	7384:28	7384:28	4	;
SELECTION	7386:2	7387:4	3	
KEYWORD	7386:2	7386:2	4	if
LEAF_NODE	7386:2	7386:2	5	if
LEAF_NODE	7386:5	7386:5	4	(
CONDITION	7386:6	7386:6	4	crop -> img_mode == COMPOSITE_IMAGES
EXPR	7386:6	7386:24	5	crop -> img_mode == COMPOSITE_IMAGES
FIELD	7386:6	7386:12	6	crop -> img_mode
LEAF_NODE	7386:6	7386:6	7	crop
LEAF_NODE	7386:10	7386:10	7	->
LEAF_NODE	7386:12	7386:12	7	img_mode
EQ_OPERATOR	7386:21	7386:21	6	==
LEAF_NODE	7386:21	7386:21	7	==
FIELD	7386:24	7386:24	6	COMPOSITE_IMAGES
LEAF_NODE	7386:24	7386:24	7	COMPOSITE_IMAGES
LEAF_NODE	7386:40	7386:40	4	)
STATEMENTS	7387:4	7484:4	4	
LEAF_NODE	7387:4	7387:4	5	{
STATEMENTS	7388:4	7471:4	5	
EXPR_STATEMENT	7388:4	7388:30	6	cropsize = crop -> bufftotal ;
EXPR	7388:4	7388:4	7	cropsize = crop -> bufftotal
ASSIGN	7388:4	7388:15	8	cropsize = crop -> bufftotal
LVAL	7388:4	7388:4	9	cropsize
FIELD	7388:4	7388:4	10	cropsize
LEAF_NODE	7388:4	7388:4	11	cropsize
ASSIGN_OP	7388:13	7388:13	9	=
LEAF_NODE	7388:13	7388:13	10	=
RVAL	7388:15	7388:15	9	crop -> bufftotal
FIELD	7388:15	7388:21	10	crop -> bufftotal
LEAF_NODE	7388:15	7388:15	11	crop
LEAF_NODE	7388:19	7388:19	11	->
LEAF_NODE	7388:21	7388:21	11	bufftotal
LEAF_NODE	7388:30	7388:30	7	;
EXPR_STATEMENT	7389:4	7389:35	6	crop_buff = seg_buffs [ 0 ] . buffer ;
EXPR	7389:4	7389:4	7	crop_buff = seg_buffs [ 0 ] . buffer
ASSIGN	7389:4	7389:16	8	crop_buff = seg_buffs [ 0 ] . buffer
LVAL	7389:4	7389:4	9	crop_buff
FIELD	7389:4	7389:4	10	crop_buff
LEAF_NODE	7389:4	7389:4	11	crop_buff
ASSIGN_OP	7389:14	7389:14	9	=
LEAF_NODE	7389:14	7389:14	10	=
RVAL	7389:16	7389:16	9	seg_buffs [ 0 ] . buffer
FIELD	7389:16	7389:29	10	seg_buffs [ 0 ] . buffer
LEAF_NODE	7389:16	7389:16	11	seg_buffs
LEAF_NODE	7389:25	7389:25	11	[
EXPR	7389:26	7389:26	11	0
FIELD	7389:26	7389:26	12	0
LEAF_NODE	7389:26	7389:26	13	0
LEAF_NODE	7389:27	7389:27	11	]
LEAF_NODE	7389:28	7389:28	11	.
LEAF_NODE	7389:29	7389:29	11	buffer
LEAF_NODE	7389:35	7389:35	7	;
SELECTION	7390:4	7391:6	6	
KEYWORD	7390:4	7390:4	7	if
LEAF_NODE	7390:4	7390:4	8	if
LEAF_NODE	7390:7	7390:7	7	(
CONDITION	7390:8	7390:8	7	! crop_buff
EXPR	7390:8	7390:8	8	! crop_buff
UNARY_EXPR	7390:8	7390:9	9	! crop_buff
UNARY_OPERATOR	7390:8	7390:8	10	!
LEAF_NODE	7390:8	7390:8	11	!
FIELD	7390:9	7390:9	10	crop_buff
LEAF_NODE	7390:9	7390:9	11	crop_buff
LEAF_NODE	7390:18	7390:18	7	)
STATEMENTS	7391:6	7391:6	7	
EXPR_STATEMENT	7391:6	7391:56	8	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize ) ;
EXPR	7391:6	7391:6	9	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
ASSIGN	7391:6	7391:18	10	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
LVAL	7391:6	7391:6	11	crop_buff
FIELD	7391:6	7391:6	12	crop_buff
LEAF_NODE	7391:6	7391:6	13	crop_buff
ASSIGN_OP	7391:16	7391:16	11	=
LEAF_NODE	7391:16	7391:16	12	=
RVAL	7391:18	7391:35	11	( unsigned char * ) _TIFFmalloc ( cropsize )
LEAF_NODE	7391:18	7391:18	12	(
TYPE_NAME	7391:19	7391:28	12	unsigned char
LEAF_NODE	7391:19	7391:19	13	unsigned
LEAF_NODE	7391:28	7391:28	13	char
LEAF_NODE	7391:33	7391:33	12	*
LEAF_NODE	7391:34	7391:34	12	)
FUNCTION_CALL	7391:35	7391:55	12	_TIFFmalloc ( cropsize )
CALLEE	7391:35	7391:35	13	_TIFFmalloc
LEAF_NODE	7391:35	7391:35	14	_TIFFmalloc
LEAF_NODE	7391:46	7391:46	13	(
ARGUMENT	7391:47	7391:47	13	cropsize
FIELD	7391:47	7391:47	14	cropsize
LEAF_NODE	7391:47	7391:47	15	cropsize
LEAF_NODE	7391:55	7391:55	13	)
LEAF_NODE	7391:56	7391:56	9	;
SELECTION	7392:4	7393:6	6	
KEYWORD	7392:4	7392:4	7	else
LEAF_NODE	7392:4	7392:4	8	else
STATEMENTS	7393:6	7406:6	7	
LEAF_NODE	7393:6	7393:6	8	{
STATEMENTS	7394:6	7395:6	8	
EXPR_STATEMENT	7394:6	7394:39	9	prev_cropsize = seg_buffs [ 0 ] . size ;
EXPR	7394:6	7394:6	10	prev_cropsize = seg_buffs [ 0 ] . size
ASSIGN	7394:6	7394:22	11	prev_cropsize = seg_buffs [ 0 ] . size
LVAL	7394:6	7394:6	12	prev_cropsize
FIELD	7394:6	7394:6	13	prev_cropsize
LEAF_NODE	7394:6	7394:6	14	prev_cropsize
ASSIGN_OP	7394:20	7394:20	12	=
LEAF_NODE	7394:20	7394:20	13	=
RVAL	7394:22	7394:22	12	seg_buffs [ 0 ] . size
FIELD	7394:22	7394:35	13	seg_buffs [ 0 ] . size
LEAF_NODE	7394:22	7394:22	14	seg_buffs
LEAF_NODE	7394:31	7394:31	14	[
EXPR	7394:32	7394:32	14	0
FIELD	7394:32	7394:32	15	0
LEAF_NODE	7394:32	7394:32	16	0
LEAF_NODE	7394:33	7394:33	14	]
LEAF_NODE	7394:34	7394:34	14	.
LEAF_NODE	7394:35	7394:35	14	size
LEAF_NODE	7394:39	7394:39	10	;
SELECTION	7395:6	7396:8	9	
KEYWORD	7395:6	7395:6	10	if
LEAF_NODE	7395:6	7395:6	11	if
LEAF_NODE	7395:9	7395:9	10	(
CONDITION	7395:10	7395:10	10	prev_cropsize < cropsize
EXPR	7395:10	7395:26	11	prev_cropsize < cropsize
FIELD	7395:10	7395:10	12	prev_cropsize
LEAF_NODE	7395:10	7395:10	13	prev_cropsize
REL_OPERATOR	7395:24	7395:24	12	<
LEAF_NODE	7395:24	7395:24	13	<
FIELD	7395:26	7395:26	12	cropsize
LEAF_NODE	7395:26	7395:26	13	cropsize
LEAF_NODE	7395:34	7395:34	10	)
STATEMENTS	7396:8	7405:8	10	
LEAF_NODE	7396:8	7396:8	11	{
STATEMENTS	7397:8	7403:8	11	
EXPR_STATEMENT	7397:8	7397:53	12	next_buff = _TIFFrealloc ( crop_buff , cropsize ) ;
EXPR	7397:8	7397:8	13	next_buff = _TIFFrealloc ( crop_buff , cropsize )
ASSIGN	7397:8	7397:20	14	next_buff = _TIFFrealloc ( crop_buff , cropsize )
LVAL	7397:8	7397:8	15	next_buff
FIELD	7397:8	7397:8	16	next_buff
LEAF_NODE	7397:8	7397:8	17	next_buff
ASSIGN_OP	7397:18	7397:18	15	=
LEAF_NODE	7397:18	7397:18	16	=
RVAL	7397:20	7397:20	15	_TIFFrealloc ( crop_buff , cropsize )
FUNCTION_CALL	7397:20	7397:52	16	_TIFFrealloc ( crop_buff , cropsize )
CALLEE	7397:20	7397:20	17	_TIFFrealloc
LEAF_NODE	7397:20	7397:20	18	_TIFFrealloc
LEAF_NODE	7397:32	7397:32	17	(
ARGUMENT	7397:33	7397:33	17	crop_buff
FIELD	7397:33	7397:33	18	crop_buff
LEAF_NODE	7397:33	7397:33	19	crop_buff
LEAF_NODE	7397:42	7397:42	17	,
ARGUMENT	7397:44	7397:44	17	cropsize
FIELD	7397:44	7397:44	18	cropsize
LEAF_NODE	7397:44	7397:44	19	cropsize
LEAF_NODE	7397:52	7397:52	17	)
LEAF_NODE	7397:53	7397:53	13	;
SELECTION	7398:8	7399:10	12	
KEYWORD	7398:8	7398:8	13	if
LEAF_NODE	7398:8	7398:8	14	if
LEAF_NODE	7398:11	7398:11	13	(
CONDITION	7398:12	7398:12	13	! next_buff
EXPR	7398:12	7398:12	14	! next_buff
UNARY_EXPR	7398:12	7398:14	15	! next_buff
UNARY_OPERATOR	7398:12	7398:12	16	!
LEAF_NODE	7398:12	7398:12	17	!
FIELD	7398:14	7398:14	16	next_buff
LEAF_NODE	7398:14	7398:14	17	next_buff
LEAF_NODE	7398:23	7398:23	13	)
STATEMENTS	7399:10	7402:10	13	
LEAF_NODE	7399:10	7399:10	14	{
STATEMENTS	7400:10	7401:10	14	
EXPR_STATEMENT	7400:10	7400:31	15	_TIFFfree ( crop_buff ) ;
EXPR	7400:10	7400:10	16	_TIFFfree ( crop_buff )
FUNCTION_CALL	7400:10	7400:30	17	_TIFFfree ( crop_buff )
CALLEE	7400:10	7400:10	18	_TIFFfree
LEAF_NODE	7400:10	7400:10	19	_TIFFfree
LEAF_NODE	7400:20	7400:20	18	(
ARGUMENT	7400:21	7400:21	18	crop_buff
FIELD	7400:21	7400:21	19	crop_buff
LEAF_NODE	7400:21	7400:21	20	crop_buff
LEAF_NODE	7400:30	7400:30	18	)
LEAF_NODE	7400:31	7400:31	16	;
EXPR_STATEMENT	7401:10	7401:60	15	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize ) ;
EXPR	7401:10	7401:10	16	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
ASSIGN	7401:10	7401:22	17	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
LVAL	7401:10	7401:10	18	crop_buff
FIELD	7401:10	7401:10	19	crop_buff
LEAF_NODE	7401:10	7401:10	20	crop_buff
ASSIGN_OP	7401:20	7401:20	18	=
LEAF_NODE	7401:20	7401:20	19	=
RVAL	7401:22	7401:39	18	( unsigned char * ) _TIFFmalloc ( cropsize )
LEAF_NODE	7401:22	7401:22	19	(
TYPE_NAME	7401:23	7401:32	19	unsigned char
LEAF_NODE	7401:23	7401:23	20	unsigned
LEAF_NODE	7401:32	7401:32	20	char
LEAF_NODE	7401:37	7401:37	19	*
LEAF_NODE	7401:38	7401:38	19	)
FUNCTION_CALL	7401:39	7401:59	19	_TIFFmalloc ( cropsize )
CALLEE	7401:39	7401:39	20	_TIFFmalloc
LEAF_NODE	7401:39	7401:39	21	_TIFFmalloc
LEAF_NODE	7401:50	7401:50	20	(
ARGUMENT	7401:51	7401:51	20	cropsize
FIELD	7401:51	7401:51	21	cropsize
LEAF_NODE	7401:51	7401:51	22	cropsize
LEAF_NODE	7401:59	7401:59	20	)
LEAF_NODE	7401:60	7401:60	16	;
LEAF_NODE	7402:10	7402:10	14	}
SELECTION	7403:8	7404:10	12	
KEYWORD	7403:8	7403:8	13	else
LEAF_NODE	7403:8	7403:8	14	else
STATEMENTS	7404:10	7404:10	13	
EXPR_STATEMENT	7404:10	7404:31	14	crop_buff = next_buff ;
EXPR	7404:10	7404:10	15	crop_buff = next_buff
ASSIGN	7404:10	7404:22	16	crop_buff = next_buff
LVAL	7404:10	7404:10	17	crop_buff
FIELD	7404:10	7404:10	18	crop_buff
LEAF_NODE	7404:10	7404:10	19	crop_buff
ASSIGN_OP	7404:20	7404:20	17	=
LEAF_NODE	7404:20	7404:20	18	=
RVAL	7404:22	7404:22	17	next_buff
FIELD	7404:22	7404:22	18	next_buff
LEAF_NODE	7404:22	7404:22	19	next_buff
LEAF_NODE	7404:31	7404:31	15	;
LEAF_NODE	7405:8	7405:8	11	}
LEAF_NODE	7406:6	7406:6	8	}
SELECTION	7408:4	7409:6	6	
KEYWORD	7408:4	7408:4	7	if
LEAF_NODE	7408:4	7408:4	8	if
LEAF_NODE	7408:7	7408:7	7	(
CONDITION	7408:8	7408:8	7	! crop_buff
EXPR	7408:8	7408:8	8	! crop_buff
UNARY_EXPR	7408:8	7408:9	9	! crop_buff
UNARY_OPERATOR	7408:8	7408:8	10	!
LEAF_NODE	7408:8	7408:8	11	!
FIELD	7408:9	7408:9	10	crop_buff
LEAF_NODE	7408:9	7408:9	11	crop_buff
LEAF_NODE	7408:18	7408:18	7	)
STATEMENTS	7409:6	7412:6	7	
LEAF_NODE	7409:6	7409:6	8	{
STATEMENTS	7410:6	7411:6	8	
EXPR_STATEMENT	7410:6	7410:85	9	TIFFError ( "processCropSelections" , "Unable to allocate/reallocate crop buffer" ) ;
EXPR	7410:6	7410:6	10	TIFFError ( "processCropSelections" , "Unable to allocate/reallocate crop buffer" )
FUNCTION_CALL	7410:6	7410:84	11	TIFFError ( "processCropSelections" , "Unable to allocate/reallocate crop buffer" )
CALLEE	7410:6	7410:6	12	TIFFError
LEAF_NODE	7410:6	7410:6	13	TIFFError
LEAF_NODE	7410:15	7410:15	12	(
ARGUMENT	7410:16	7410:16	12	"processCropSelections"
FIELD	7410:16	7410:16	13	"processCropSelections"
LEAF_NODE	7410:16	7410:16	14	"processCropSelections"
LEAF_NODE	7410:39	7410:39	12	,
ARGUMENT	7410:41	7410:41	12	"Unable to allocate/reallocate crop buffer"
FIELD	7410:41	7410:41	13	"Unable to allocate/reallocate crop buffer"
LEAF_NODE	7410:41	7410:41	14	"Unable to allocate/reallocate crop buffer"
LEAF_NODE	7410:84	7410:84	12	)
LEAF_NODE	7410:85	7410:85	10	;
JUMP_STATEMENT	7411:6	7411:17	9	return ( - 1 ) ;
KEYWORD	7411:6	7411:6	10	return
LEAF_NODE	7411:6	7411:6	11	return
DESTINATION	7411:13	7411:13	10	( - 1 )
EXPR	7411:13	7411:16	11	( - 1 )
LEAF_NODE	7411:13	7411:13	12	(
UNARY_EXPR	7411:14	7411:15	12	- 1
UNARY_OPERATOR	7411:14	7411:14	13	-
LEAF_NODE	7411:14	7411:14	14	-
FIELD	7411:15	7411:15	13	1
LEAF_NODE	7411:15	7411:15	14	1
LEAF_NODE	7411:16	7411:16	12	)
LEAF_NODE	7411:17	7411:17	10	;
LEAF_NODE	7412:6	7412:6	8	}
EXPR_STATEMENT	7414:4	7414:39	6	_TIFFmemset ( crop_buff , 0 , cropsize ) ;
EXPR	7414:4	7414:4	7	_TIFFmemset ( crop_buff , 0 , cropsize )
FUNCTION_CALL	7414:4	7414:38	8	_TIFFmemset ( crop_buff , 0 , cropsize )
CALLEE	7414:4	7414:4	9	_TIFFmemset
LEAF_NODE	7414:4	7414:4	10	_TIFFmemset
LEAF_NODE	7414:15	7414:15	9	(
ARGUMENT	7414:16	7414:16	9	crop_buff
FIELD	7414:16	7414:16	10	crop_buff
LEAF_NODE	7414:16	7414:16	11	crop_buff
LEAF_NODE	7414:25	7414:25	9	,
ARGUMENT	7414:27	7414:27	9	0
FIELD	7414:27	7414:27	10	0
LEAF_NODE	7414:27	7414:27	11	0
LEAF_NODE	7414:28	7414:28	9	,
ARGUMENT	7414:30	7414:30	9	cropsize
FIELD	7414:30	7414:30	10	cropsize
LEAF_NODE	7414:30	7414:30	11	cropsize
LEAF_NODE	7414:38	7414:38	9	)
LEAF_NODE	7414:39	7414:39	7	;
EXPR_STATEMENT	7415:4	7415:35	6	seg_buffs [ 0 ] . buffer = crop_buff ;
EXPR	7415:4	7415:4	7	seg_buffs [ 0 ] . buffer = crop_buff
ASSIGN	7415:4	7415:26	8	seg_buffs [ 0 ] . buffer = crop_buff
LVAL	7415:4	7415:4	9	seg_buffs [ 0 ] . buffer
FIELD	7415:4	7415:17	10	seg_buffs [ 0 ] . buffer
LEAF_NODE	7415:4	7415:4	11	seg_buffs
LEAF_NODE	7415:13	7415:13	11	[
EXPR	7415:14	7415:14	11	0
FIELD	7415:14	7415:14	12	0
LEAF_NODE	7415:14	7415:14	13	0
LEAF_NODE	7415:15	7415:15	11	]
LEAF_NODE	7415:16	7415:16	11	.
LEAF_NODE	7415:17	7415:17	11	buffer
ASSIGN_OP	7415:24	7415:24	9	=
LEAF_NODE	7415:24	7415:24	10	=
RVAL	7415:26	7415:26	9	crop_buff
FIELD	7415:26	7415:26	10	crop_buff
LEAF_NODE	7415:26	7415:26	11	crop_buff
LEAF_NODE	7415:35	7415:35	7	;
EXPR_STATEMENT	7416:4	7416:32	6	seg_buffs [ 0 ] . size = cropsize ;
EXPR	7416:4	7416:4	7	seg_buffs [ 0 ] . size = cropsize
ASSIGN	7416:4	7416:24	8	seg_buffs [ 0 ] . size = cropsize
LVAL	7416:4	7416:4	9	seg_buffs [ 0 ] . size
FIELD	7416:4	7416:17	10	seg_buffs [ 0 ] . size
LEAF_NODE	7416:4	7416:4	11	seg_buffs
LEAF_NODE	7416:13	7416:13	11	[
EXPR	7416:14	7416:14	11	0
FIELD	7416:14	7416:14	12	0
LEAF_NODE	7416:14	7416:14	13	0
LEAF_NODE	7416:15	7416:15	11	]
LEAF_NODE	7416:16	7416:16	11	.
LEAF_NODE	7416:17	7416:17	11	size
ASSIGN_OP	7416:22	7416:22	9	=
LEAF_NODE	7416:22	7416:22	10	=
RVAL	7416:24	7416:24	9	cropsize
FIELD	7416:24	7416:24	10	cropsize
LEAF_NODE	7416:24	7416:24	11	cropsize
LEAF_NODE	7416:32	7416:32	7	;
SELECTION	7419:4	7420:6	6	
KEYWORD	7419:4	7419:4	7	if
LEAF_NODE	7419:4	7419:4	8	if
LEAF_NODE	7419:7	7419:7	7	(
CONDITION	7419:8	7419:8	7	extractCompositeRegions ( image , crop , read_buff , crop_buff ) != 0
EXPR	7419:8	7419:70	8	extractCompositeRegions ( image , crop , read_buff , crop_buff ) != 0
FUNCTION_CALL	7419:8	7419:65	9	extractCompositeRegions ( image , crop , read_buff , crop_buff )
CALLEE	7419:8	7419:8	10	extractCompositeRegions
LEAF_NODE	7419:8	7419:8	11	extractCompositeRegions
LEAF_NODE	7419:31	7419:31	10	(
ARGUMENT	7419:32	7419:32	10	image
FIELD	7419:32	7419:32	11	image
LEAF_NODE	7419:32	7419:32	12	image
LEAF_NODE	7419:37	7419:37	10	,
ARGUMENT	7419:39	7419:39	10	crop
FIELD	7419:39	7419:39	11	crop
LEAF_NODE	7419:39	7419:39	12	crop
LEAF_NODE	7419:43	7419:43	10	,
ARGUMENT	7419:45	7419:45	10	read_buff
FIELD	7419:45	7419:45	11	read_buff
LEAF_NODE	7419:45	7419:45	12	read_buff
LEAF_NODE	7419:54	7419:54	10	,
ARGUMENT	7419:56	7419:56	10	crop_buff
FIELD	7419:56	7419:56	11	crop_buff
LEAF_NODE	7419:56	7419:56	12	crop_buff
LEAF_NODE	7419:65	7419:65	10	)
EQ_OPERATOR	7419:67	7419:67	9	!=
LEAF_NODE	7419:67	7419:67	10	!=
FIELD	7419:70	7419:70	9	0
LEAF_NODE	7419:70	7419:70	10	0
LEAF_NODE	7419:71	7419:71	7	)
STATEMENTS	7420:6	7420:6	7	
JUMP_STATEMENT	7420:6	7420:16	8	return ( 1 ) ;
KEYWORD	7420:6	7420:6	9	return
LEAF_NODE	7420:6	7420:6	10	return
DESTINATION	7420:13	7420:13	9	( 1 )
EXPR	7420:13	7420:15	10	( 1 )
LEAF_NODE	7420:13	7420:13	11	(
FIELD	7420:14	7420:14	11	1
LEAF_NODE	7420:14	7420:14	12	1
LEAF_NODE	7420:15	7420:15	11	)
LEAF_NODE	7420:16	7420:16	9	;
SELECTION	7422:4	7423:6	6	
KEYWORD	7422:4	7422:4	7	if
LEAF_NODE	7422:4	7422:4	8	if
LEAF_NODE	7422:7	7422:7	7	(
CONDITION	7422:8	7422:8	7	crop -> crop_mode & CROP_INVERT
EXPR	7422:8	7422:26	8	crop -> crop_mode & CROP_INVERT
FIELD	7422:8	7422:14	9	crop -> crop_mode
LEAF_NODE	7422:8	7422:8	10	crop
LEAF_NODE	7422:12	7422:12	10	->
LEAF_NODE	7422:14	7422:14	10	crop_mode
LEAF_NODE	7422:24	7422:24	9	&
FIELD	7422:26	7422:26	9	CROP_INVERT
LEAF_NODE	7422:26	7422:26	10	CROP_INVERT
LEAF_NODE	7422:37	7422:37	7	)
STATEMENTS	7423:6	7457:6	7	
LEAF_NODE	7423:6	7423:6	8	{
STATEMENTS	7424:6	7424:6	8	
SELECTION	7424:6	7425:8	9	
KEYWORD	7424:6	7424:6	10	switch
LEAF_NODE	7424:6	7424:6	11	switch
LEAF_NODE	7424:13	7424:13	10	(
CONDITION	7424:14	7424:14	10	crop -> photometric
EXPR	7424:14	7424:14	11	crop -> photometric
FIELD	7424:14	7424:20	12	crop -> photometric
LEAF_NODE	7424:14	7424:14	13	crop
LEAF_NODE	7424:18	7424:18	13	->
LEAF_NODE	7424:20	7424:20	13	photometric
LEAF_NODE	7424:31	7424:31	10	)
STATEMENTS	7425:8	7456:8	10	
LEAF_NODE	7425:8	7425:8	11	{
STATEMENTS	7427:8	7455:17	11	
LABEL	7427:8	7427:35	12	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	7427:8	7427:8	13	case
LEAF_NODE	7427:13	7427:13	13	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7427:35	7427:35	13	:
LABEL	7428:8	7428:35	12	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	7428:8	7428:8	13	case
LEAF_NODE	7428:13	7428:13	13	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7428:35	7428:35	13	:
EXPR_STATEMENT	7429:6	7429:44	12	image -> photometric = crop -> photometric ;
EXPR	7429:6	7429:6	13	image -> photometric = crop -> photometric
ASSIGN	7429:6	7429:27	14	image -> photometric = crop -> photometric
LVAL	7429:6	7429:6	15	image -> photometric
FIELD	7429:6	7429:13	16	image -> photometric
LEAF_NODE	7429:6	7429:6	17	image
LEAF_NODE	7429:11	7429:11	17	->
LEAF_NODE	7429:13	7429:13	17	photometric
ASSIGN_OP	7429:25	7429:25	15	=
LEAF_NODE	7429:25	7429:25	16	=
RVAL	7429:27	7429:27	15	crop -> photometric
FIELD	7429:27	7429:33	16	crop -> photometric
LEAF_NODE	7429:27	7429:27	17	crop
LEAF_NODE	7429:31	7429:31	17	->
LEAF_NODE	7429:33	7429:33	17	photometric
LEAF_NODE	7429:44	7429:44	13	;
JUMP_STATEMENT	7430:6	7430:11	12	break DESTINATION ;
KEYWORD	7430:6	7430:6	13	break
LEAF_NODE	7430:6	7430:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	7430:11	7430:11	13	;
LABEL	7431:8	7431:29	12	case INVERT_DATA_ONLY :
LEAF_NODE	7431:8	7431:8	13	case
LEAF_NODE	7431:13	7431:13	13	INVERT_DATA_ONLY
LEAF_NODE	7431:29	7431:29	13	:
LABEL	7432:8	7432:32	12	case INVERT_DATA_AND_TAG :
LEAF_NODE	7432:8	7432:8	13	case
LEAF_NODE	7432:13	7432:13	13	INVERT_DATA_AND_TAG
LEAF_NODE	7432:32	7432:32	13	:
SELECTION	7433:13	7435:15	12	
KEYWORD	7433:13	7433:13	13	if
LEAF_NODE	7433:13	7433:13	14	if
LEAF_NODE	7433:16	7433:16	13	(
CONDITION	7433:17	7433:17	13	invertImage ( image -> photometric , image -> spp , image -> bps , crop -> combined_width , crop -> combined_length , crop_buff )
EXPR	7433:17	7433:17	14	invertImage ( image -> photometric , image -> spp , image -> bps , crop -> combined_width , crop -> combined_length , crop_buff )
FUNCTION_CALL	7433:17	7434:83	15	invertImage ( image -> photometric , image -> spp , image -> bps , crop -> combined_width , crop -> combined_length , crop_buff )
CALLEE	7433:17	7433:17	16	invertImage
LEAF_NODE	7433:17	7433:17	17	invertImage
LEAF_NODE	7433:28	7433:28	16	(
ARGUMENT	7433:29	7433:29	16	image -> photometric
FIELD	7433:29	7433:36	17	image -> photometric
LEAF_NODE	7433:29	7433:29	18	image
LEAF_NODE	7433:34	7433:34	18	->
LEAF_NODE	7433:36	7433:36	18	photometric
LEAF_NODE	7433:47	7433:47	16	,
ARGUMENT	7433:49	7433:49	16	image -> spp
FIELD	7433:49	7433:56	17	image -> spp
LEAF_NODE	7433:49	7433:49	18	image
LEAF_NODE	7433:54	7433:54	18	->
LEAF_NODE	7433:56	7433:56	18	spp
LEAF_NODE	7433:59	7433:59	16	,
ARGUMENT	7433:61	7433:61	16	image -> bps
FIELD	7433:61	7433:68	17	image -> bps
LEAF_NODE	7433:61	7433:61	18	image
LEAF_NODE	7433:66	7433:66	18	->
LEAF_NODE	7433:68	7433:68	18	bps
LEAF_NODE	7433:71	7433:71	16	,
ARGUMENT	7434:29	7434:29	16	crop -> combined_width
FIELD	7434:29	7434:35	17	crop -> combined_width
LEAF_NODE	7434:29	7434:29	18	crop
LEAF_NODE	7434:33	7434:33	18	->
LEAF_NODE	7434:35	7434:35	18	combined_width
LEAF_NODE	7434:49	7434:49	16	,
ARGUMENT	7434:51	7434:51	16	crop -> combined_length
FIELD	7434:51	7434:57	17	crop -> combined_length
LEAF_NODE	7434:51	7434:51	18	crop
LEAF_NODE	7434:55	7434:55	18	->
LEAF_NODE	7434:57	7434:57	18	combined_length
LEAF_NODE	7434:72	7434:72	16	,
ARGUMENT	7434:74	7434:74	16	crop_buff
FIELD	7434:74	7434:74	17	crop_buff
LEAF_NODE	7434:74	7434:74	18	crop_buff
LEAF_NODE	7434:83	7434:83	16	)
LEAF_NODE	7434:84	7434:84	13	)
STATEMENTS	7435:15	7439:15	13	
LEAF_NODE	7435:15	7435:15	14	{
STATEMENTS	7436:15	7438:15	14	
EXPR_STATEMENT	7436:15	7437:77	15	TIFFError ( "processCropSelections" , "Failed to invert colorspace for composite regions" ) ;
EXPR	7436:15	7436:15	16	TIFFError ( "processCropSelections" , "Failed to invert colorspace for composite regions" )
FUNCTION_CALL	7436:15	7437:76	17	TIFFError ( "processCropSelections" , "Failed to invert colorspace for composite regions" )
CALLEE	7436:15	7436:15	18	TIFFError
LEAF_NODE	7436:15	7436:15	19	TIFFError
LEAF_NODE	7436:24	7436:24	18	(
ARGUMENT	7436:25	7436:25	18	"processCropSelections"
FIELD	7436:25	7436:25	19	"processCropSelections"
LEAF_NODE	7436:25	7436:25	20	"processCropSelections"
LEAF_NODE	7436:48	7436:48	18	,
ARGUMENT	7437:25	7437:25	18	"Failed to invert colorspace for composite regions"
FIELD	7437:25	7437:25	19	"Failed to invert colorspace for composite regions"
LEAF_NODE	7437:25	7437:25	20	"Failed to invert colorspace for composite regions"
LEAF_NODE	7437:76	7437:76	18	)
LEAF_NODE	7437:77	7437:77	16	;
JUMP_STATEMENT	7438:15	7438:26	15	return ( - 1 ) ;
KEYWORD	7438:15	7438:15	16	return
LEAF_NODE	7438:15	7438:15	17	return
DESTINATION	7438:22	7438:22	16	( - 1 )
EXPR	7438:22	7438:25	17	( - 1 )
LEAF_NODE	7438:22	7438:22	18	(
UNARY_EXPR	7438:23	7438:24	18	- 1
UNARY_OPERATOR	7438:23	7438:23	19	-
LEAF_NODE	7438:23	7438:23	20	-
FIELD	7438:24	7438:24	19	1
LEAF_NODE	7438:24	7438:24	20	1
LEAF_NODE	7438:25	7438:25	18	)
LEAF_NODE	7438:26	7438:26	16	;
LEAF_NODE	7439:15	7439:15	14	}
SELECTION	7440:13	7441:15	12	
KEYWORD	7440:13	7440:13	13	if
LEAF_NODE	7440:13	7440:13	14	if
LEAF_NODE	7440:16	7440:16	13	(
CONDITION	7440:17	7440:17	13	crop -> photometric == INVERT_DATA_AND_TAG
EXPR	7440:17	7440:38	14	crop -> photometric == INVERT_DATA_AND_TAG
FIELD	7440:17	7440:23	15	crop -> photometric
LEAF_NODE	7440:17	7440:17	16	crop
LEAF_NODE	7440:21	7440:21	16	->
LEAF_NODE	7440:23	7440:23	16	photometric
EQ_OPERATOR	7440:35	7440:35	15	==
LEAF_NODE	7440:35	7440:35	16	==
FIELD	7440:38	7440:38	15	INVERT_DATA_AND_TAG
LEAF_NODE	7440:38	7440:38	16	INVERT_DATA_AND_TAG
LEAF_NODE	7440:57	7440:57	13	)
STATEMENTS	7441:15	7453:8	13	
LEAF_NODE	7441:15	7441:15	14	{
STATEMENTS	7442:15	7442:15	14	
SELECTION	7442:15	7443:17	15	
KEYWORD	7442:15	7442:15	16	switch
LEAF_NODE	7442:15	7442:15	17	switch
LEAF_NODE	7442:22	7442:22	16	(
CONDITION	7442:23	7442:23	16	image -> photometric
EXPR	7442:23	7442:23	17	image -> photometric
FIELD	7442:23	7442:30	18	image -> photometric
LEAF_NODE	7442:23	7442:23	19	image
LEAF_NODE	7442:28	7442:28	19	->
LEAF_NODE	7442:30	7442:30	19	photometric
LEAF_NODE	7442:41	7442:41	16	)
STATEMENTS	7443:17	7452:10	16	
LEAF_NODE	7443:17	7443:17	17	{
STATEMENTS	7444:17	7451:15	17	
LABEL	7444:17	7444:44	18	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	7444:17	7444:17	19	case
LEAF_NODE	7444:22	7444:22	19	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7444:44	7444:44	19	:
EXPR_STATEMENT	7445:16	7445:59	18	image -> photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	7445:16	7445:16	19	image -> photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	7445:16	7445:37	20	image -> photometric = PHOTOMETRIC_MINISBLACK
LVAL	7445:16	7445:16	21	image -> photometric
FIELD	7445:16	7445:23	22	image -> photometric
LEAF_NODE	7445:16	7445:16	23	image
LEAF_NODE	7445:21	7445:21	23	->
LEAF_NODE	7445:23	7445:23	23	photometric
ASSIGN_OP	7445:35	7445:35	21	=
LEAF_NODE	7445:35	7445:35	22	=
RVAL	7445:37	7445:37	21	PHOTOMETRIC_MINISBLACK
FIELD	7445:37	7445:37	22	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7445:37	7445:37	23	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7445:59	7445:59	19	;
JUMP_STATEMENT	7446:15	7446:20	18	break DESTINATION ;
KEYWORD	7446:15	7446:15	19	break
LEAF_NODE	7446:15	7446:15	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	7446:20	7446:20	19	;
LABEL	7447:17	7447:44	18	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	7447:17	7447:17	19	case
LEAF_NODE	7447:22	7447:22	19	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7447:44	7447:44	19	:
EXPR_STATEMENT	7448:16	7448:59	18	image -> photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	7448:16	7448:16	19	image -> photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	7448:16	7448:37	20	image -> photometric = PHOTOMETRIC_MINISWHITE
LVAL	7448:16	7448:16	21	image -> photometric
FIELD	7448:16	7448:23	22	image -> photometric
LEAF_NODE	7448:16	7448:16	23	image
LEAF_NODE	7448:21	7448:21	23	->
LEAF_NODE	7448:23	7448:23	23	photometric
ASSIGN_OP	7448:35	7448:35	21	=
LEAF_NODE	7448:35	7448:35	22	=
RVAL	7448:37	7448:37	21	PHOTOMETRIC_MINISWHITE
FIELD	7448:37	7448:37	22	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7448:37	7448:37	23	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7448:59	7448:59	19	;
JUMP_STATEMENT	7449:15	7449:20	18	break DESTINATION ;
KEYWORD	7449:15	7449:15	19	break
LEAF_NODE	7449:15	7449:15	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	7449:20	7449:20	19	;
LABEL	7450:17	7450:24	18	default :
LEAF_NODE	7450:17	7450:17	19	default
LEAF_NODE	7450:24	7450:24	19	:
JUMP_STATEMENT	7451:15	7451:20	18	break DESTINATION ;
KEYWORD	7451:15	7451:15	19	break
LEAF_NODE	7451:15	7451:15	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	7451:20	7451:20	19	;
LEAF_NODE	7452:10	7452:10	17	}
LEAF_NODE	7453:8	7453:8	14	}
JUMP_STATEMENT	7454:13	7454:18	12	break DESTINATION ;
KEYWORD	7454:13	7454:13	13	break
LEAF_NODE	7454:13	7454:13	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	7454:18	7454:18	13	;
LABEL	7455:8	7455:15	12	default :
LEAF_NODE	7455:8	7455:8	13	default
LEAF_NODE	7455:15	7455:15	13	:
JUMP_STATEMENT	7455:17	7455:22	12	break DESTINATION ;
KEYWORD	7455:17	7455:17	13	break
LEAF_NODE	7455:17	7455:17	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	7455:22	7455:22	13	;
LEAF_NODE	7456:8	7456:8	11	}
LEAF_NODE	7457:6	7457:6	8	}
SELECTION	7460:4	7461:6	6	
KEYWORD	7460:4	7460:4	7	if
LEAF_NODE	7460:4	7460:4	8	if
LEAF_NODE	7460:7	7460:7	7	(
CONDITION	7460:8	7460:8	7	crop -> crop_mode & CROP_MIRROR
EXPR	7460:8	7460:26	8	crop -> crop_mode & CROP_MIRROR
FIELD	7460:8	7460:14	9	crop -> crop_mode
LEAF_NODE	7460:8	7460:8	10	crop
LEAF_NODE	7460:12	7460:12	10	->
LEAF_NODE	7460:14	7460:14	10	crop_mode
LEAF_NODE	7460:24	7460:24	9	&
FIELD	7460:26	7460:26	9	CROP_MIRROR
LEAF_NODE	7460:26	7460:26	10	CROP_MIRROR
LEAF_NODE	7460:37	7460:37	7	)
STATEMENTS	7461:6	7469:6	7	
LEAF_NODE	7461:6	7461:6	8	{
STATEMENTS	7462:6	7462:6	8	
SELECTION	7462:6	7464:8	9	
KEYWORD	7462:6	7462:6	10	if
LEAF_NODE	7462:6	7462:6	11	if
LEAF_NODE	7462:9	7462:9	10	(
CONDITION	7462:10	7462:10	10	mirrorImage ( image -> spp , image -> bps , crop -> mirror , crop -> combined_width , crop -> combined_length , crop_buff )
EXPR	7462:10	7462:10	11	mirrorImage ( image -> spp , image -> bps , crop -> mirror , crop -> combined_width , crop -> combined_length , crop_buff )
FUNCTION_CALL	7462:10	7463:76	12	mirrorImage ( image -> spp , image -> bps , crop -> mirror , crop -> combined_width , crop -> combined_length , crop_buff )
CALLEE	7462:10	7462:10	13	mirrorImage
LEAF_NODE	7462:10	7462:10	14	mirrorImage
LEAF_NODE	7462:21	7462:21	13	(
ARGUMENT	7462:22	7462:22	13	image -> spp
FIELD	7462:22	7462:29	14	image -> spp
LEAF_NODE	7462:22	7462:22	15	image
LEAF_NODE	7462:27	7462:27	15	->
LEAF_NODE	7462:29	7462:29	15	spp
LEAF_NODE	7462:32	7462:32	13	,
ARGUMENT	7462:34	7462:34	13	image -> bps
FIELD	7462:34	7462:41	14	image -> bps
LEAF_NODE	7462:34	7462:34	15	image
LEAF_NODE	7462:39	7462:39	15	->
LEAF_NODE	7462:41	7462:41	15	bps
LEAF_NODE	7462:44	7462:44	13	,
ARGUMENT	7462:46	7462:46	13	crop -> mirror
FIELD	7462:46	7462:52	14	crop -> mirror
LEAF_NODE	7462:46	7462:46	15	crop
LEAF_NODE	7462:50	7462:50	15	->
LEAF_NODE	7462:52	7462:52	15	mirror
LEAF_NODE	7462:58	7462:58	13	,
ARGUMENT	7463:22	7463:22	13	crop -> combined_width
FIELD	7463:22	7463:28	14	crop -> combined_width
LEAF_NODE	7463:22	7463:22	15	crop
LEAF_NODE	7463:26	7463:26	15	->
LEAF_NODE	7463:28	7463:28	15	combined_width
LEAF_NODE	7463:42	7463:42	13	,
ARGUMENT	7463:44	7463:44	13	crop -> combined_length
FIELD	7463:44	7463:50	14	crop -> combined_length
LEAF_NODE	7463:44	7463:44	15	crop
LEAF_NODE	7463:48	7463:48	15	->
LEAF_NODE	7463:50	7463:50	15	combined_length
LEAF_NODE	7463:65	7463:65	13	,
ARGUMENT	7463:67	7463:67	13	crop_buff
FIELD	7463:67	7463:67	14	crop_buff
LEAF_NODE	7463:67	7463:67	15	crop_buff
LEAF_NODE	7463:76	7463:76	13	)
LEAF_NODE	7463:77	7463:77	10	)
STATEMENTS	7464:8	7468:8	10	
LEAF_NODE	7464:8	7464:8	11	{
STATEMENTS	7465:8	7467:8	11	
EXPR_STATEMENT	7465:8	7466:75	12	TIFFError ( "processCropSelections" , "Failed to mirror composite regions %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" ) ;
EXPR	7465:8	7465:8	13	TIFFError ( "processCropSelections" , "Failed to mirror composite regions %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" )
FUNCTION_CALL	7465:8	7466:74	14	TIFFError ( "processCropSelections" , "Failed to mirror composite regions %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" )
CALLEE	7465:8	7465:8	15	TIFFError
LEAF_NODE	7465:8	7465:8	16	TIFFError
LEAF_NODE	7465:17	7465:17	15	(
ARGUMENT	7465:18	7465:18	15	"processCropSelections"
FIELD	7465:18	7465:18	16	"processCropSelections"
LEAF_NODE	7465:18	7465:18	17	"processCropSelections"
LEAF_NODE	7465:41	7465:41	15	,
ARGUMENT	7465:43	7465:43	15	"Failed to mirror composite regions %s"
FIELD	7465:43	7465:43	16	"Failed to mirror composite regions %s"
LEAF_NODE	7465:43	7465:43	17	"Failed to mirror composite regions %s"
LEAF_NODE	7465:82	7465:82	15	,
ARGUMENT	7466:10	7466:10	15	( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically"
COND_EXPR	7466:10	7466:62	16	( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically"
CONDITION	7466:10	7466:41	17	( crop -> rotation == MIRROR_HORIZ )
LEAF_NODE	7466:10	7466:10	18	(
FIELD	7466:11	7466:17	18	crop -> rotation
LEAF_NODE	7466:11	7466:11	19	crop
LEAF_NODE	7466:15	7466:15	19	->
LEAF_NODE	7466:17	7466:17	19	rotation
EQ_OPERATOR	7466:26	7466:26	18	==
LEAF_NODE	7466:26	7466:26	19	==
FIELD	7466:29	7466:29	18	MIRROR_HORIZ
LEAF_NODE	7466:29	7466:29	19	MIRROR_HORIZ
LEAF_NODE	7466:41	7466:41	18	)
LEAF_NODE	7466:43	7466:43	17	?
EXPR	7466:45	7466:45	17	"horizontally"
FIELD	7466:45	7466:45	18	"horizontally"
LEAF_NODE	7466:45	7466:45	19	"horizontally"
LEAF_NODE	7466:60	7466:60	17	:
FIELD	7466:62	7466:62	17	"vertically"
LEAF_NODE	7466:62	7466:62	18	"vertically"
LEAF_NODE	7466:74	7466:74	15	)
LEAF_NODE	7466:75	7466:75	13	;
JUMP_STATEMENT	7467:8	7467:19	12	return ( - 1 ) ;
KEYWORD	7467:8	7467:8	13	return
LEAF_NODE	7467:8	7467:8	14	return
DESTINATION	7467:15	7467:15	13	( - 1 )
EXPR	7467:15	7467:18	14	( - 1 )
LEAF_NODE	7467:15	7467:15	15	(
UNARY_EXPR	7467:16	7467:17	15	- 1
UNARY_OPERATOR	7467:16	7467:16	16	-
LEAF_NODE	7467:16	7467:16	17	-
FIELD	7467:17	7467:17	16	1
LEAF_NODE	7467:17	7467:17	17	1
LEAF_NODE	7467:18	7467:18	15	)
LEAF_NODE	7467:19	7467:19	13	;
LEAF_NODE	7468:8	7468:8	11	}
LEAF_NODE	7469:6	7469:6	8	}
SELECTION	7471:4	7472:6	6	
KEYWORD	7471:4	7471:4	7	if
LEAF_NODE	7471:4	7471:4	8	if
LEAF_NODE	7471:7	7471:7	7	(
CONDITION	7471:8	7471:8	7	crop -> crop_mode & CROP_ROTATE
EXPR	7471:8	7471:26	8	crop -> crop_mode & CROP_ROTATE
FIELD	7471:8	7471:14	9	crop -> crop_mode
LEAF_NODE	7471:8	7471:8	10	crop
LEAF_NODE	7471:12	7471:12	10	->
LEAF_NODE	7471:14	7471:14	10	crop_mode
LEAF_NODE	7471:24	7471:24	9	&
FIELD	7471:26	7471:26	9	CROP_ROTATE
LEAF_NODE	7471:26	7471:26	10	CROP_ROTATE
LEAF_NODE	7471:37	7471:37	7	)
STATEMENTS	7472:6	7483:6	7	
LEAF_NODE	7472:6	7472:6	8	{
STATEMENTS	7473:6	7481:6	8	
SELECTION	7473:6	7475:8	9	
KEYWORD	7473:6	7473:6	10	if
LEAF_NODE	7473:6	7473:6	11	if
LEAF_NODE	7473:9	7473:9	10	(
CONDITION	7473:10	7473:10	10	rotateImage ( crop -> rotation , image , & crop -> combined_width , & crop -> combined_length , & crop_buff )
EXPR	7473:10	7473:10	11	rotateImage ( crop -> rotation , image , & crop -> combined_width , & crop -> combined_length , & crop_buff )
FUNCTION_CALL	7473:10	7474:56	12	rotateImage ( crop -> rotation , image , & crop -> combined_width , & crop -> combined_length , & crop_buff )
CALLEE	7473:10	7473:10	13	rotateImage
LEAF_NODE	7473:10	7473:10	14	rotateImage
LEAF_NODE	7473:21	7473:21	13	(
ARGUMENT	7473:22	7473:22	13	crop -> rotation
FIELD	7473:22	7473:28	14	crop -> rotation
LEAF_NODE	7473:22	7473:22	15	crop
LEAF_NODE	7473:26	7473:26	15	->
LEAF_NODE	7473:28	7473:28	15	rotation
LEAF_NODE	7473:36	7473:36	13	,
ARGUMENT	7473:38	7473:38	13	image
FIELD	7473:38	7473:38	14	image
LEAF_NODE	7473:38	7473:38	15	image
LEAF_NODE	7473:43	7473:43	13	,
ARGUMENT	7473:45	7473:45	13	& crop -> combined_width
UNARY_EXPR	7473:45	7473:46	14	& crop -> combined_width
UNARY_OPERATOR	7473:45	7473:45	15	&
LEAF_NODE	7473:45	7473:45	16	&
FIELD	7473:46	7473:52	15	crop -> combined_width
LEAF_NODE	7473:46	7473:46	16	crop
LEAF_NODE	7473:50	7473:50	16	->
LEAF_NODE	7473:52	7473:52	16	combined_width
LEAF_NODE	7473:66	7473:66	13	,
ARGUMENT	7474:22	7474:22	13	& crop -> combined_length
UNARY_EXPR	7474:22	7474:23	14	& crop -> combined_length
UNARY_OPERATOR	7474:22	7474:22	15	&
LEAF_NODE	7474:22	7474:22	16	&
FIELD	7474:23	7474:29	15	crop -> combined_length
LEAF_NODE	7474:23	7474:23	16	crop
LEAF_NODE	7474:27	7474:27	16	->
LEAF_NODE	7474:29	7474:29	16	combined_length
LEAF_NODE	7474:44	7474:44	13	,
ARGUMENT	7474:46	7474:46	13	& crop_buff
UNARY_EXPR	7474:46	7474:47	14	& crop_buff
UNARY_OPERATOR	7474:46	7474:46	15	&
LEAF_NODE	7474:46	7474:46	16	&
FIELD	7474:47	7474:47	15	crop_buff
LEAF_NODE	7474:47	7474:47	16	crop_buff
LEAF_NODE	7474:56	7474:56	13	)
LEAF_NODE	7474:57	7474:57	10	)
STATEMENTS	7475:8	7479:8	10	
LEAF_NODE	7475:8	7475:8	11	{
STATEMENTS	7476:8	7478:8	11	
EXPR_STATEMENT	7476:8	7477:85	12	TIFFError ( "processCropSelections" , "Failed to rotate composite regions by %d degrees" , crop -> rotation ) ;
EXPR	7476:8	7476:8	13	TIFFError ( "processCropSelections" , "Failed to rotate composite regions by %d degrees" , crop -> rotation )
FUNCTION_CALL	7476:8	7477:84	14	TIFFError ( "processCropSelections" , "Failed to rotate composite regions by %d degrees" , crop -> rotation )
CALLEE	7476:8	7476:8	15	TIFFError
LEAF_NODE	7476:8	7476:8	16	TIFFError
LEAF_NODE	7476:17	7476:17	15	(
ARGUMENT	7476:18	7476:18	15	"processCropSelections"
FIELD	7476:18	7476:18	16	"processCropSelections"
LEAF_NODE	7476:18	7476:18	17	"processCropSelections"
LEAF_NODE	7476:41	7476:41	15	,
ARGUMENT	7477:18	7477:18	15	"Failed to rotate composite regions by %d degrees"
FIELD	7477:18	7477:18	16	"Failed to rotate composite regions by %d degrees"
LEAF_NODE	7477:18	7477:18	17	"Failed to rotate composite regions by %d degrees"
LEAF_NODE	7477:68	7477:68	15	,
ARGUMENT	7477:70	7477:70	15	crop -> rotation
FIELD	7477:70	7477:76	16	crop -> rotation
LEAF_NODE	7477:70	7477:70	17	crop
LEAF_NODE	7477:74	7477:74	17	->
LEAF_NODE	7477:76	7477:76	17	rotation
LEAF_NODE	7477:84	7477:84	15	)
LEAF_NODE	7477:85	7477:85	13	;
JUMP_STATEMENT	7478:8	7478:19	12	return ( - 1 ) ;
KEYWORD	7478:8	7478:8	13	return
LEAF_NODE	7478:8	7478:8	14	return
DESTINATION	7478:15	7478:15	13	( - 1 )
EXPR	7478:15	7478:18	14	( - 1 )
LEAF_NODE	7478:15	7478:15	15	(
UNARY_EXPR	7478:16	7478:17	15	- 1
UNARY_OPERATOR	7478:16	7478:16	16	-
LEAF_NODE	7478:16	7478:16	17	-
FIELD	7478:17	7478:17	16	1
LEAF_NODE	7478:17	7478:17	17	1
LEAF_NODE	7478:18	7478:18	15	)
LEAF_NODE	7478:19	7478:19	13	;
LEAF_NODE	7479:8	7479:8	11	}
EXPR_STATEMENT	7480:6	7480:37	9	seg_buffs [ 0 ] . buffer = crop_buff ;
EXPR	7480:6	7480:6	10	seg_buffs [ 0 ] . buffer = crop_buff
ASSIGN	7480:6	7480:28	11	seg_buffs [ 0 ] . buffer = crop_buff
LVAL	7480:6	7480:6	12	seg_buffs [ 0 ] . buffer
FIELD	7480:6	7480:19	13	seg_buffs [ 0 ] . buffer
LEAF_NODE	7480:6	7480:6	14	seg_buffs
LEAF_NODE	7480:15	7480:15	14	[
EXPR	7480:16	7480:16	14	0
FIELD	7480:16	7480:16	15	0
LEAF_NODE	7480:16	7480:16	16	0
LEAF_NODE	7480:17	7480:17	14	]
LEAF_NODE	7480:18	7480:18	14	.
LEAF_NODE	7480:19	7480:19	14	buffer
ASSIGN_OP	7480:26	7480:26	12	=
LEAF_NODE	7480:26	7480:26	13	=
RVAL	7480:28	7480:28	12	crop_buff
FIELD	7480:28	7480:28	13	crop_buff
LEAF_NODE	7480:28	7480:28	14	crop_buff
LEAF_NODE	7480:37	7480:37	10	;
EXPR_STATEMENT	7481:6	7482:65	9	seg_buffs [ 0 ] . size = ( ( ( crop -> combined_width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> combined_length ;
EXPR	7481:6	7481:6	10	seg_buffs [ 0 ] . size = ( ( ( crop -> combined_width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> combined_length
ASSIGN	7481:6	7481:26	11	seg_buffs [ 0 ] . size = ( ( ( crop -> combined_width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> combined_length
LVAL	7481:6	7481:6	12	seg_buffs [ 0 ] . size
FIELD	7481:6	7481:19	13	seg_buffs [ 0 ] . size
LEAF_NODE	7481:6	7481:6	14	seg_buffs
LEAF_NODE	7481:15	7481:15	14	[
EXPR	7481:16	7481:16	14	0
FIELD	7481:16	7481:16	15	0
LEAF_NODE	7481:16	7481:16	16	0
LEAF_NODE	7481:17	7481:17	14	]
LEAF_NODE	7481:18	7481:18	14	.
LEAF_NODE	7481:19	7481:19	14	size
ASSIGN_OP	7481:24	7481:24	12	=
LEAF_NODE	7481:24	7481:24	13	=
RVAL	7481:26	7482:44	12	( ( ( crop -> combined_width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> combined_length
LEAF_NODE	7481:26	7481:26	13	(
LEAF_NODE	7481:27	7481:27	13	(
LEAF_NODE	7481:28	7481:28	13	(
FIELD	7481:29	7481:35	13	crop -> combined_width
LEAF_NODE	7481:29	7481:29	14	crop
LEAF_NODE	7481:33	7481:33	14	->
LEAF_NODE	7481:35	7481:35	14	combined_width
LEAF_NODE	7481:50	7481:50	13	*
FIELD	7481:52	7481:59	13	image -> bps
LEAF_NODE	7481:52	7481:52	14	image
LEAF_NODE	7481:57	7481:57	14	->
LEAF_NODE	7481:59	7481:59	14	bps
LEAF_NODE	7481:63	7481:63	13	+
FIELD	7481:65	7481:65	13	7
LEAF_NODE	7481:65	7481:65	14	7
LEAF_NODE	7481:67	7481:67	13	)
LEAF_NODE	7481:69	7481:69	13	/
FIELD	7481:71	7481:71	13	8
LEAF_NODE	7481:71	7481:71	14	8
LEAF_NODE	7481:72	7481:72	13	)
LEAF_NODE	7482:28	7482:28	13	*
FIELD	7482:30	7482:37	13	image -> spp
LEAF_NODE	7482:30	7482:30	14	image
LEAF_NODE	7482:35	7482:35	14	->
LEAF_NODE	7482:37	7482:37	14	spp
LEAF_NODE	7482:40	7482:40	13	)
LEAF_NODE	7482:42	7482:42	13	*
FIELD	7482:44	7482:50	13	crop -> combined_length
LEAF_NODE	7482:44	7482:44	14	crop
LEAF_NODE	7482:48	7482:48	14	->
LEAF_NODE	7482:50	7482:50	14	combined_length
LEAF_NODE	7482:65	7482:65	10	;
LEAF_NODE	7483:6	7483:6	8	}
LEAF_NODE	7484:4	7484:4	5	}
SELECTION	7485:2	7486:4	3	
KEYWORD	7485:2	7485:2	4	else
LEAF_NODE	7485:2	7485:2	5	else
STATEMENTS	7486:4	7595:4	4	
LEAF_NODE	7486:4	7486:4	5	{
STATEMENTS	7487:4	7488:4	5	
EXPR_STATEMENT	7487:4	7487:34	6	total_width = total_length = 0 ;
EXPR	7487:4	7487:4	7	total_width = total_length = 0
ASSIGN	7487:4	7487:18	8	total_width = total_length = 0
LVAL	7487:4	7487:4	9	total_width
FIELD	7487:4	7487:4	10	total_width
LEAF_NODE	7487:4	7487:4	11	total_width
ASSIGN_OP	7487:16	7487:16	9	=
LEAF_NODE	7487:16	7487:16	10	=
RVAL	7487:18	7487:18	9	total_length = 0
ASSIGN	7487:18	7487:33	10	total_length = 0
LVAL	7487:18	7487:18	11	total_length
FIELD	7487:18	7487:18	12	total_length
LEAF_NODE	7487:18	7487:18	13	total_length
ASSIGN_OP	7487:31	7487:31	11	=
LEAF_NODE	7487:31	7487:31	12	=
RVAL	7487:33	7487:33	11	0
FIELD	7487:33	7487:33	12	0
LEAF_NODE	7487:33	7487:33	13	0
LEAF_NODE	7487:34	7487:34	7	;
ITERATION	7488:4	7489:6	6	
KEYWORD	7488:4	7488:4	7	for
LEAF_NODE	7488:4	7488:4	8	for
LEAF_NODE	7488:8	7488:8	7	(
FOR_INIT	7488:9	7488:14	7	i = 0 ;
EXPR	7488:9	7488:9	8	i = 0
ASSIGN	7488:9	7488:13	9	i = 0
LVAL	7488:9	7488:9	10	i
FIELD	7488:9	7488:9	11	i
LEAF_NODE	7488:9	7488:9	12	i
ASSIGN_OP	7488:11	7488:11	10	=
LEAF_NODE	7488:11	7488:11	11	=
RVAL	7488:13	7488:13	10	0
FIELD	7488:13	7488:13	11	0
LEAF_NODE	7488:13	7488:13	12	0
LEAF_NODE	7488:14	7488:14	8	;
CONDITION	7488:16	7488:16	7	i < crop -> selections
EXPR	7488:16	7488:20	8	i < crop -> selections
FIELD	7488:16	7488:16	9	i
LEAF_NODE	7488:16	7488:16	10	i
REL_OPERATOR	7488:18	7488:18	9	<
LEAF_NODE	7488:18	7488:18	10	<
FIELD	7488:20	7488:26	9	crop -> selections
LEAF_NODE	7488:20	7488:20	10	crop
LEAF_NODE	7488:24	7488:24	10	->
LEAF_NODE	7488:26	7488:26	10	selections
LEAF_NODE	7488:36	7488:36	7	;
FOR_EXPR	7488:38	7488:38	7	i ++
EXPR	7488:38	7488:38	8	i ++
FIELD	7488:38	7488:39	9	i ++
LEAF_NODE	7488:38	7488:38	10	i
LEAF_NODE	7488:39	7488:39	10	++
LEAF_NODE	7488:41	7488:41	7	)
STATEMENTS	7489:6	7594:6	7	
LEAF_NODE	7489:6	7489:6	8	{
STATEMENTS	7490:6	7577:6	8	
EXPR_STATEMENT	7490:6	7490:32	9	cropsize = crop -> bufftotal ;
EXPR	7490:6	7490:6	10	cropsize = crop -> bufftotal
ASSIGN	7490:6	7490:17	11	cropsize = crop -> bufftotal
LVAL	7490:6	7490:6	12	cropsize
FIELD	7490:6	7490:6	13	cropsize
LEAF_NODE	7490:6	7490:6	14	cropsize
ASSIGN_OP	7490:15	7490:15	12	=
LEAF_NODE	7490:15	7490:15	13	=
RVAL	7490:17	7490:17	12	crop -> bufftotal
FIELD	7490:17	7490:23	13	crop -> bufftotal
LEAF_NODE	7490:17	7490:17	14	crop
LEAF_NODE	7490:21	7490:21	14	->
LEAF_NODE	7490:23	7490:23	14	bufftotal
LEAF_NODE	7490:32	7490:32	10	;
EXPR_STATEMENT	7491:6	7491:37	9	crop_buff = seg_buffs [ i ] . buffer ;
EXPR	7491:6	7491:6	10	crop_buff = seg_buffs [ i ] . buffer
ASSIGN	7491:6	7491:18	11	crop_buff = seg_buffs [ i ] . buffer
LVAL	7491:6	7491:6	12	crop_buff
FIELD	7491:6	7491:6	13	crop_buff
LEAF_NODE	7491:6	7491:6	14	crop_buff
ASSIGN_OP	7491:16	7491:16	12	=
LEAF_NODE	7491:16	7491:16	13	=
RVAL	7491:18	7491:18	12	seg_buffs [ i ] . buffer
FIELD	7491:18	7491:31	13	seg_buffs [ i ] . buffer
LEAF_NODE	7491:18	7491:18	14	seg_buffs
LEAF_NODE	7491:27	7491:27	14	[
EXPR	7491:28	7491:28	14	i
FIELD	7491:28	7491:28	15	i
LEAF_NODE	7491:28	7491:28	16	i
LEAF_NODE	7491:29	7491:29	14	]
LEAF_NODE	7491:30	7491:30	14	.
LEAF_NODE	7491:31	7491:31	14	buffer
LEAF_NODE	7491:37	7491:37	10	;
SELECTION	7492:6	7493:8	9	
KEYWORD	7492:6	7492:6	10	if
LEAF_NODE	7492:6	7492:6	11	if
LEAF_NODE	7492:9	7492:9	10	(
CONDITION	7492:10	7492:10	10	! crop_buff
EXPR	7492:10	7492:10	11	! crop_buff
UNARY_EXPR	7492:10	7492:11	12	! crop_buff
UNARY_OPERATOR	7492:10	7492:10	13	!
LEAF_NODE	7492:10	7492:10	14	!
FIELD	7492:11	7492:11	13	crop_buff
LEAF_NODE	7492:11	7492:11	14	crop_buff
LEAF_NODE	7492:20	7492:20	10	)
STATEMENTS	7493:8	7493:8	10	
EXPR_STATEMENT	7493:8	7493:58	11	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize ) ;
EXPR	7493:8	7493:8	12	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
ASSIGN	7493:8	7493:20	13	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
LVAL	7493:8	7493:8	14	crop_buff
FIELD	7493:8	7493:8	15	crop_buff
LEAF_NODE	7493:8	7493:8	16	crop_buff
ASSIGN_OP	7493:18	7493:18	14	=
LEAF_NODE	7493:18	7493:18	15	=
RVAL	7493:20	7493:37	14	( unsigned char * ) _TIFFmalloc ( cropsize )
LEAF_NODE	7493:20	7493:20	15	(
TYPE_NAME	7493:21	7493:30	15	unsigned char
LEAF_NODE	7493:21	7493:21	16	unsigned
LEAF_NODE	7493:30	7493:30	16	char
LEAF_NODE	7493:35	7493:35	15	*
LEAF_NODE	7493:36	7493:36	15	)
FUNCTION_CALL	7493:37	7493:57	15	_TIFFmalloc ( cropsize )
CALLEE	7493:37	7493:37	16	_TIFFmalloc
LEAF_NODE	7493:37	7493:37	17	_TIFFmalloc
LEAF_NODE	7493:48	7493:48	16	(
ARGUMENT	7493:49	7493:49	16	cropsize
FIELD	7493:49	7493:49	17	cropsize
LEAF_NODE	7493:49	7493:49	18	cropsize
LEAF_NODE	7493:57	7493:57	16	)
LEAF_NODE	7493:58	7493:58	12	;
SELECTION	7494:6	7495:8	9	
KEYWORD	7494:6	7494:6	10	else
LEAF_NODE	7494:6	7494:6	11	else
STATEMENTS	7495:8	7508:8	10	
LEAF_NODE	7495:8	7495:8	11	{
STATEMENTS	7496:8	7497:8	11	
EXPR_STATEMENT	7496:8	7496:41	12	prev_cropsize = seg_buffs [ 0 ] . size ;
EXPR	7496:8	7496:8	13	prev_cropsize = seg_buffs [ 0 ] . size
ASSIGN	7496:8	7496:24	14	prev_cropsize = seg_buffs [ 0 ] . size
LVAL	7496:8	7496:8	15	prev_cropsize
FIELD	7496:8	7496:8	16	prev_cropsize
LEAF_NODE	7496:8	7496:8	17	prev_cropsize
ASSIGN_OP	7496:22	7496:22	15	=
LEAF_NODE	7496:22	7496:22	16	=
RVAL	7496:24	7496:24	15	seg_buffs [ 0 ] . size
FIELD	7496:24	7496:37	16	seg_buffs [ 0 ] . size
LEAF_NODE	7496:24	7496:24	17	seg_buffs
LEAF_NODE	7496:33	7496:33	17	[
EXPR	7496:34	7496:34	17	0
FIELD	7496:34	7496:34	18	0
LEAF_NODE	7496:34	7496:34	19	0
LEAF_NODE	7496:35	7496:35	17	]
LEAF_NODE	7496:36	7496:36	17	.
LEAF_NODE	7496:37	7496:37	17	size
LEAF_NODE	7496:41	7496:41	13	;
SELECTION	7497:8	7498:10	12	
KEYWORD	7497:8	7497:8	13	if
LEAF_NODE	7497:8	7497:8	14	if
LEAF_NODE	7497:11	7497:11	13	(
CONDITION	7497:12	7497:12	13	prev_cropsize < cropsize
EXPR	7497:12	7497:28	14	prev_cropsize < cropsize
FIELD	7497:12	7497:12	15	prev_cropsize
LEAF_NODE	7497:12	7497:12	16	prev_cropsize
REL_OPERATOR	7497:26	7497:26	15	<
LEAF_NODE	7497:26	7497:26	16	<
FIELD	7497:28	7497:28	15	cropsize
LEAF_NODE	7497:28	7497:28	16	cropsize
LEAF_NODE	7497:36	7497:36	13	)
STATEMENTS	7498:10	7507:10	13	
LEAF_NODE	7498:10	7498:10	14	{
STATEMENTS	7499:10	7505:10	14	
EXPR_STATEMENT	7499:10	7499:55	15	next_buff = _TIFFrealloc ( crop_buff , cropsize ) ;
EXPR	7499:10	7499:10	16	next_buff = _TIFFrealloc ( crop_buff , cropsize )
ASSIGN	7499:10	7499:22	17	next_buff = _TIFFrealloc ( crop_buff , cropsize )
LVAL	7499:10	7499:10	18	next_buff
FIELD	7499:10	7499:10	19	next_buff
LEAF_NODE	7499:10	7499:10	20	next_buff
ASSIGN_OP	7499:20	7499:20	18	=
LEAF_NODE	7499:20	7499:20	19	=
RVAL	7499:22	7499:22	18	_TIFFrealloc ( crop_buff , cropsize )
FUNCTION_CALL	7499:22	7499:54	19	_TIFFrealloc ( crop_buff , cropsize )
CALLEE	7499:22	7499:22	20	_TIFFrealloc
LEAF_NODE	7499:22	7499:22	21	_TIFFrealloc
LEAF_NODE	7499:34	7499:34	20	(
ARGUMENT	7499:35	7499:35	20	crop_buff
FIELD	7499:35	7499:35	21	crop_buff
LEAF_NODE	7499:35	7499:35	22	crop_buff
LEAF_NODE	7499:44	7499:44	20	,
ARGUMENT	7499:46	7499:46	20	cropsize
FIELD	7499:46	7499:46	21	cropsize
LEAF_NODE	7499:46	7499:46	22	cropsize
LEAF_NODE	7499:54	7499:54	20	)
LEAF_NODE	7499:55	7499:55	16	;
SELECTION	7500:10	7501:12	15	
KEYWORD	7500:10	7500:10	16	if
LEAF_NODE	7500:10	7500:10	17	if
LEAF_NODE	7500:13	7500:13	16	(
CONDITION	7500:14	7500:14	16	! next_buff
EXPR	7500:14	7500:14	17	! next_buff
UNARY_EXPR	7500:14	7500:16	18	! next_buff
UNARY_OPERATOR	7500:14	7500:14	19	!
LEAF_NODE	7500:14	7500:14	20	!
FIELD	7500:16	7500:16	19	next_buff
LEAF_NODE	7500:16	7500:16	20	next_buff
LEAF_NODE	7500:25	7500:25	16	)
STATEMENTS	7501:12	7504:12	16	
LEAF_NODE	7501:12	7501:12	17	{
STATEMENTS	7502:12	7503:12	17	
EXPR_STATEMENT	7502:12	7502:33	18	_TIFFfree ( crop_buff ) ;
EXPR	7502:12	7502:12	19	_TIFFfree ( crop_buff )
FUNCTION_CALL	7502:12	7502:32	20	_TIFFfree ( crop_buff )
CALLEE	7502:12	7502:12	21	_TIFFfree
LEAF_NODE	7502:12	7502:12	22	_TIFFfree
LEAF_NODE	7502:22	7502:22	21	(
ARGUMENT	7502:23	7502:23	21	crop_buff
FIELD	7502:23	7502:23	22	crop_buff
LEAF_NODE	7502:23	7502:23	23	crop_buff
LEAF_NODE	7502:32	7502:32	21	)
LEAF_NODE	7502:33	7502:33	19	;
EXPR_STATEMENT	7503:12	7503:62	18	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize ) ;
EXPR	7503:12	7503:12	19	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
ASSIGN	7503:12	7503:24	20	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
LVAL	7503:12	7503:12	21	crop_buff
FIELD	7503:12	7503:12	22	crop_buff
LEAF_NODE	7503:12	7503:12	23	crop_buff
ASSIGN_OP	7503:22	7503:22	21	=
LEAF_NODE	7503:22	7503:22	22	=
RVAL	7503:24	7503:41	21	( unsigned char * ) _TIFFmalloc ( cropsize )
LEAF_NODE	7503:24	7503:24	22	(
TYPE_NAME	7503:25	7503:34	22	unsigned char
LEAF_NODE	7503:25	7503:25	23	unsigned
LEAF_NODE	7503:34	7503:34	23	char
LEAF_NODE	7503:39	7503:39	22	*
LEAF_NODE	7503:40	7503:40	22	)
FUNCTION_CALL	7503:41	7503:61	22	_TIFFmalloc ( cropsize )
CALLEE	7503:41	7503:41	23	_TIFFmalloc
LEAF_NODE	7503:41	7503:41	24	_TIFFmalloc
LEAF_NODE	7503:52	7503:52	23	(
ARGUMENT	7503:53	7503:53	23	cropsize
FIELD	7503:53	7503:53	24	cropsize
LEAF_NODE	7503:53	7503:53	25	cropsize
LEAF_NODE	7503:61	7503:61	23	)
LEAF_NODE	7503:62	7503:62	19	;
LEAF_NODE	7504:12	7504:12	17	}
SELECTION	7505:10	7506:12	15	
KEYWORD	7505:10	7505:10	16	else
LEAF_NODE	7505:10	7505:10	17	else
STATEMENTS	7506:12	7506:12	16	
EXPR_STATEMENT	7506:12	7506:33	17	crop_buff = next_buff ;
EXPR	7506:12	7506:12	18	crop_buff = next_buff
ASSIGN	7506:12	7506:24	19	crop_buff = next_buff
LVAL	7506:12	7506:12	20	crop_buff
FIELD	7506:12	7506:12	21	crop_buff
LEAF_NODE	7506:12	7506:12	22	crop_buff
ASSIGN_OP	7506:22	7506:22	20	=
LEAF_NODE	7506:22	7506:22	21	=
RVAL	7506:24	7506:24	20	next_buff
FIELD	7506:24	7506:24	21	next_buff
LEAF_NODE	7506:24	7506:24	22	next_buff
LEAF_NODE	7506:33	7506:33	18	;
LEAF_NODE	7507:10	7507:10	14	}
LEAF_NODE	7508:8	7508:8	11	}
SELECTION	7510:6	7511:8	9	
KEYWORD	7510:6	7510:6	10	if
LEAF_NODE	7510:6	7510:6	11	if
LEAF_NODE	7510:9	7510:9	10	(
CONDITION	7510:10	7510:10	10	! crop_buff
EXPR	7510:10	7510:10	11	! crop_buff
UNARY_EXPR	7510:10	7510:11	12	! crop_buff
UNARY_OPERATOR	7510:10	7510:10	13	!
LEAF_NODE	7510:10	7510:10	14	!
FIELD	7510:11	7510:11	13	crop_buff
LEAF_NODE	7510:11	7510:11	14	crop_buff
LEAF_NODE	7510:20	7510:20	10	)
STATEMENTS	7511:8	7514:8	10	
LEAF_NODE	7511:8	7511:8	11	{
STATEMENTS	7512:8	7513:8	11	
EXPR_STATEMENT	7512:8	7512:87	12	TIFFError ( "processCropSelections" , "Unable to allocate/reallocate crop buffer" ) ;
EXPR	7512:8	7512:8	13	TIFFError ( "processCropSelections" , "Unable to allocate/reallocate crop buffer" )
FUNCTION_CALL	7512:8	7512:86	14	TIFFError ( "processCropSelections" , "Unable to allocate/reallocate crop buffer" )
CALLEE	7512:8	7512:8	15	TIFFError
LEAF_NODE	7512:8	7512:8	16	TIFFError
LEAF_NODE	7512:17	7512:17	15	(
ARGUMENT	7512:18	7512:18	15	"processCropSelections"
FIELD	7512:18	7512:18	16	"processCropSelections"
LEAF_NODE	7512:18	7512:18	17	"processCropSelections"
LEAF_NODE	7512:41	7512:41	15	,
ARGUMENT	7512:43	7512:43	15	"Unable to allocate/reallocate crop buffer"
FIELD	7512:43	7512:43	16	"Unable to allocate/reallocate crop buffer"
LEAF_NODE	7512:43	7512:43	17	"Unable to allocate/reallocate crop buffer"
LEAF_NODE	7512:86	7512:86	15	)
LEAF_NODE	7512:87	7512:87	13	;
JUMP_STATEMENT	7513:8	7513:19	12	return ( - 1 ) ;
KEYWORD	7513:8	7513:8	13	return
LEAF_NODE	7513:8	7513:8	14	return
DESTINATION	7513:15	7513:15	13	( - 1 )
EXPR	7513:15	7513:18	14	( - 1 )
LEAF_NODE	7513:15	7513:15	15	(
UNARY_EXPR	7513:16	7513:17	15	- 1
UNARY_OPERATOR	7513:16	7513:16	16	-
LEAF_NODE	7513:16	7513:16	17	-
FIELD	7513:17	7513:17	16	1
LEAF_NODE	7513:17	7513:17	17	1
LEAF_NODE	7513:18	7513:18	15	)
LEAF_NODE	7513:19	7513:19	13	;
LEAF_NODE	7514:8	7514:8	11	}
EXPR_STATEMENT	7516:6	7516:41	9	_TIFFmemset ( crop_buff , 0 , cropsize ) ;
EXPR	7516:6	7516:6	10	_TIFFmemset ( crop_buff , 0 , cropsize )
FUNCTION_CALL	7516:6	7516:40	11	_TIFFmemset ( crop_buff , 0 , cropsize )
CALLEE	7516:6	7516:6	12	_TIFFmemset
LEAF_NODE	7516:6	7516:6	13	_TIFFmemset
LEAF_NODE	7516:17	7516:17	12	(
ARGUMENT	7516:18	7516:18	12	crop_buff
FIELD	7516:18	7516:18	13	crop_buff
LEAF_NODE	7516:18	7516:18	14	crop_buff
LEAF_NODE	7516:27	7516:27	12	,
ARGUMENT	7516:29	7516:29	12	0
FIELD	7516:29	7516:29	13	0
LEAF_NODE	7516:29	7516:29	14	0
LEAF_NODE	7516:30	7516:30	12	,
ARGUMENT	7516:32	7516:32	12	cropsize
FIELD	7516:32	7516:32	13	cropsize
LEAF_NODE	7516:32	7516:32	14	cropsize
LEAF_NODE	7516:40	7516:40	12	)
LEAF_NODE	7516:41	7516:41	10	;
EXPR_STATEMENT	7517:6	7517:37	9	seg_buffs [ i ] . buffer = crop_buff ;
EXPR	7517:6	7517:6	10	seg_buffs [ i ] . buffer = crop_buff
ASSIGN	7517:6	7517:28	11	seg_buffs [ i ] . buffer = crop_buff
LVAL	7517:6	7517:6	12	seg_buffs [ i ] . buffer
FIELD	7517:6	7517:19	13	seg_buffs [ i ] . buffer
LEAF_NODE	7517:6	7517:6	14	seg_buffs
LEAF_NODE	7517:15	7517:15	14	[
EXPR	7517:16	7517:16	14	i
FIELD	7517:16	7517:16	15	i
LEAF_NODE	7517:16	7517:16	16	i
LEAF_NODE	7517:17	7517:17	14	]
LEAF_NODE	7517:18	7517:18	14	.
LEAF_NODE	7517:19	7517:19	14	buffer
ASSIGN_OP	7517:26	7517:26	12	=
LEAF_NODE	7517:26	7517:26	13	=
RVAL	7517:28	7517:28	12	crop_buff
FIELD	7517:28	7517:28	13	crop_buff
LEAF_NODE	7517:28	7517:28	14	crop_buff
LEAF_NODE	7517:37	7517:37	10	;
EXPR_STATEMENT	7518:6	7518:34	9	seg_buffs [ i ] . size = cropsize ;
EXPR	7518:6	7518:6	10	seg_buffs [ i ] . size = cropsize
ASSIGN	7518:6	7518:26	11	seg_buffs [ i ] . size = cropsize
LVAL	7518:6	7518:6	12	seg_buffs [ i ] . size
FIELD	7518:6	7518:19	13	seg_buffs [ i ] . size
LEAF_NODE	7518:6	7518:6	14	seg_buffs
LEAF_NODE	7518:15	7518:15	14	[
EXPR	7518:16	7518:16	14	i
FIELD	7518:16	7518:16	15	i
LEAF_NODE	7518:16	7518:16	16	i
LEAF_NODE	7518:17	7518:17	14	]
LEAF_NODE	7518:18	7518:18	14	.
LEAF_NODE	7518:19	7518:19	14	size
ASSIGN_OP	7518:24	7518:24	12	=
LEAF_NODE	7518:24	7518:24	13	=
RVAL	7518:26	7518:26	12	cropsize
FIELD	7518:26	7518:26	13	cropsize
LEAF_NODE	7518:26	7518:26	14	cropsize
LEAF_NODE	7518:34	7518:34	10	;
SELECTION	7520:6	7521:8	9	
KEYWORD	7520:6	7520:6	10	if
LEAF_NODE	7520:6	7520:6	11	if
LEAF_NODE	7520:9	7520:9	10	(
CONDITION	7520:10	7520:10	10	extractSeparateRegion ( image , crop , read_buff , crop_buff , i )
EXPR	7520:10	7520:10	11	extractSeparateRegion ( image , crop , read_buff , crop_buff , i )
FUNCTION_CALL	7520:10	7520:68	12	extractSeparateRegion ( image , crop , read_buff , crop_buff , i )
CALLEE	7520:10	7520:10	13	extractSeparateRegion
LEAF_NODE	7520:10	7520:10	14	extractSeparateRegion
LEAF_NODE	7520:31	7520:31	13	(
ARGUMENT	7520:32	7520:32	13	image
FIELD	7520:32	7520:32	14	image
LEAF_NODE	7520:32	7520:32	15	image
LEAF_NODE	7520:37	7520:37	13	,
ARGUMENT	7520:39	7520:39	13	crop
FIELD	7520:39	7520:39	14	crop
LEAF_NODE	7520:39	7520:39	15	crop
LEAF_NODE	7520:43	7520:43	13	,
ARGUMENT	7520:45	7520:45	13	read_buff
FIELD	7520:45	7520:45	14	read_buff
LEAF_NODE	7520:45	7520:45	15	read_buff
LEAF_NODE	7520:54	7520:54	13	,
ARGUMENT	7520:56	7520:56	13	crop_buff
FIELD	7520:56	7520:56	14	crop_buff
LEAF_NODE	7520:56	7520:56	15	crop_buff
LEAF_NODE	7520:65	7520:65	13	,
ARGUMENT	7520:67	7520:67	13	i
FIELD	7520:67	7520:67	14	i
LEAF_NODE	7520:67	7520:67	15	i
LEAF_NODE	7520:68	7520:68	13	)
LEAF_NODE	7520:69	7520:69	10	)
STATEMENTS	7521:8	7524:8	10	
LEAF_NODE	7521:8	7521:8	11	{
STATEMENTS	7522:1	7523:8	11	
EXPR_STATEMENT	7522:1	7522:88	12	TIFFError ( "processCropSelections" , "Unable to extract cropped region %d from image" , i ) ;
EXPR	7522:1	7522:1	13	TIFFError ( "processCropSelections" , "Unable to extract cropped region %d from image" , i )
FUNCTION_CALL	7522:1	7522:87	14	TIFFError ( "processCropSelections" , "Unable to extract cropped region %d from image" , i )
CALLEE	7522:1	7522:1	15	TIFFError
LEAF_NODE	7522:1	7522:1	16	TIFFError
LEAF_NODE	7522:10	7522:10	15	(
ARGUMENT	7522:11	7522:11	15	"processCropSelections"
FIELD	7522:11	7522:11	16	"processCropSelections"
LEAF_NODE	7522:11	7522:11	17	"processCropSelections"
LEAF_NODE	7522:34	7522:34	15	,
ARGUMENT	7522:36	7522:36	15	"Unable to extract cropped region %d from image"
FIELD	7522:36	7522:36	16	"Unable to extract cropped region %d from image"
LEAF_NODE	7522:36	7522:36	17	"Unable to extract cropped region %d from image"
LEAF_NODE	7522:84	7522:84	15	,
ARGUMENT	7522:86	7522:86	15	i
FIELD	7522:86	7522:86	16	i
LEAF_NODE	7522:86	7522:86	17	i
LEAF_NODE	7522:87	7522:87	15	)
LEAF_NODE	7522:88	7522:88	13	;
JUMP_STATEMENT	7523:8	7523:19	12	return ( - 1 ) ;
KEYWORD	7523:8	7523:8	13	return
LEAF_NODE	7523:8	7523:8	14	return
DESTINATION	7523:15	7523:15	13	( - 1 )
EXPR	7523:15	7523:18	14	( - 1 )
LEAF_NODE	7523:15	7523:15	15	(
UNARY_EXPR	7523:16	7523:17	15	- 1
UNARY_OPERATOR	7523:16	7523:16	16	-
LEAF_NODE	7523:16	7523:16	17	-
FIELD	7523:17	7523:17	16	1
LEAF_NODE	7523:17	7523:17	17	1
LEAF_NODE	7523:18	7523:18	15	)
LEAF_NODE	7523:19	7523:19	13	;
LEAF_NODE	7524:8	7524:8	11	}
EXPR_STATEMENT	7526:6	7526:40	9	width = crop -> regionlist [ i ] . width ;
EXPR	7526:6	7526:6	10	width = crop -> regionlist [ i ] . width
ASSIGN	7526:6	7526:15	11	width = crop -> regionlist [ i ] . width
LVAL	7526:6	7526:6	12	width
FIELD	7526:6	7526:6	13	width
LEAF_NODE	7526:6	7526:6	14	width
ASSIGN_OP	7526:13	7526:13	12	=
LEAF_NODE	7526:13	7526:13	13	=
RVAL	7526:15	7526:15	12	crop -> regionlist [ i ] . width
FIELD	7526:15	7526:35	13	crop -> regionlist [ i ] . width
LEAF_NODE	7526:15	7526:15	14	crop
LEAF_NODE	7526:19	7526:19	14	->
LEAF_NODE	7526:21	7526:21	14	regionlist
LEAF_NODE	7526:31	7526:31	14	[
EXPR	7526:32	7526:32	14	i
FIELD	7526:32	7526:32	15	i
LEAF_NODE	7526:32	7526:32	16	i
LEAF_NODE	7526:33	7526:33	14	]
LEAF_NODE	7526:34	7526:34	14	.
LEAF_NODE	7526:35	7526:35	14	width
LEAF_NODE	7526:40	7526:40	10	;
EXPR_STATEMENT	7527:6	7527:41	9	length = crop -> regionlist [ i ] . length ;
EXPR	7527:6	7527:6	10	length = crop -> regionlist [ i ] . length
ASSIGN	7527:6	7527:15	11	length = crop -> regionlist [ i ] . length
LVAL	7527:6	7527:6	12	length
FIELD	7527:6	7527:6	13	length
LEAF_NODE	7527:6	7527:6	14	length
ASSIGN_OP	7527:13	7527:13	12	=
LEAF_NODE	7527:13	7527:13	13	=
RVAL	7527:15	7527:15	12	crop -> regionlist [ i ] . length
FIELD	7527:15	7527:35	13	crop -> regionlist [ i ] . length
LEAF_NODE	7527:15	7527:15	14	crop
LEAF_NODE	7527:19	7527:19	14	->
LEAF_NODE	7527:21	7527:21	14	regionlist
LEAF_NODE	7527:31	7527:31	14	[
EXPR	7527:32	7527:32	14	i
FIELD	7527:32	7527:32	15	i
LEAF_NODE	7527:32	7527:32	16	i
LEAF_NODE	7527:33	7527:33	14	]
LEAF_NODE	7527:34	7527:34	14	.
LEAF_NODE	7527:35	7527:35	14	length
LEAF_NODE	7527:41	7527:41	10	;
SELECTION	7529:6	7530:8	9	
KEYWORD	7529:6	7529:6	10	if
LEAF_NODE	7529:6	7529:6	11	if
LEAF_NODE	7529:9	7529:9	10	(
CONDITION	7529:10	7529:10	10	crop -> crop_mode & CROP_INVERT
EXPR	7529:10	7529:28	11	crop -> crop_mode & CROP_INVERT
FIELD	7529:10	7529:16	12	crop -> crop_mode
LEAF_NODE	7529:10	7529:10	13	crop
LEAF_NODE	7529:14	7529:14	13	->
LEAF_NODE	7529:16	7529:16	13	crop_mode
LEAF_NODE	7529:26	7529:26	12	&
FIELD	7529:28	7529:28	12	CROP_INVERT
LEAF_NODE	7529:28	7529:28	13	CROP_INVERT
LEAF_NODE	7529:39	7529:39	10	)
STATEMENTS	7530:8	7564:8	10	
LEAF_NODE	7530:8	7530:8	11	{
STATEMENTS	7531:8	7531:8	11	
SELECTION	7531:8	7532:10	12	
KEYWORD	7531:8	7531:8	13	switch
LEAF_NODE	7531:8	7531:8	14	switch
LEAF_NODE	7531:15	7531:15	13	(
CONDITION	7531:16	7531:16	13	crop -> photometric
EXPR	7531:16	7531:16	14	crop -> photometric
FIELD	7531:16	7531:22	15	crop -> photometric
LEAF_NODE	7531:16	7531:16	16	crop
LEAF_NODE	7531:20	7531:20	16	->
LEAF_NODE	7531:22	7531:22	16	photometric
LEAF_NODE	7531:33	7531:33	13	)
STATEMENTS	7532:10	7563:10	13	
LEAF_NODE	7532:10	7532:10	14	{
STATEMENTS	7534:10	7562:19	14	
LABEL	7534:10	7534:37	15	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	7534:10	7534:10	16	case
LEAF_NODE	7534:15	7534:15	16	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7534:37	7534:37	16	:
LABEL	7535:10	7535:37	15	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	7535:10	7535:10	16	case
LEAF_NODE	7535:15	7535:15	16	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7535:37	7535:37	16	:
EXPR_STATEMENT	7536:8	7536:46	15	image -> photometric = crop -> photometric ;
EXPR	7536:8	7536:8	16	image -> photometric = crop -> photometric
ASSIGN	7536:8	7536:29	17	image -> photometric = crop -> photometric
LVAL	7536:8	7536:8	18	image -> photometric
FIELD	7536:8	7536:15	19	image -> photometric
LEAF_NODE	7536:8	7536:8	20	image
LEAF_NODE	7536:13	7536:13	20	->
LEAF_NODE	7536:15	7536:15	20	photometric
ASSIGN_OP	7536:27	7536:27	18	=
LEAF_NODE	7536:27	7536:27	19	=
RVAL	7536:29	7536:29	18	crop -> photometric
FIELD	7536:29	7536:35	19	crop -> photometric
LEAF_NODE	7536:29	7536:29	20	crop
LEAF_NODE	7536:33	7536:33	20	->
LEAF_NODE	7536:35	7536:35	20	photometric
LEAF_NODE	7536:46	7536:46	16	;
JUMP_STATEMENT	7537:8	7537:13	15	break DESTINATION ;
KEYWORD	7537:8	7537:8	16	break
LEAF_NODE	7537:8	7537:8	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	7537:13	7537:13	16	;
LABEL	7538:10	7538:31	15	case INVERT_DATA_ONLY :
LEAF_NODE	7538:10	7538:10	16	case
LEAF_NODE	7538:15	7538:15	16	INVERT_DATA_ONLY
LEAF_NODE	7538:31	7538:31	16	:
LABEL	7539:10	7539:34	15	case INVERT_DATA_AND_TAG :
LEAF_NODE	7539:10	7539:10	16	case
LEAF_NODE	7539:15	7539:15	16	INVERT_DATA_AND_TAG
LEAF_NODE	7539:34	7539:34	16	:
SELECTION	7540:15	7542:17	15	
KEYWORD	7540:15	7540:15	16	if
LEAF_NODE	7540:15	7540:15	17	if
LEAF_NODE	7540:18	7540:18	16	(
CONDITION	7540:19	7540:19	16	invertImage ( image -> photometric , image -> spp , image -> bps , width , length , crop_buff )
EXPR	7540:19	7540:19	17	invertImage ( image -> photometric , image -> spp , image -> bps , width , length , crop_buff )
FUNCTION_CALL	7540:19	7541:55	18	invertImage ( image -> photometric , image -> spp , image -> bps , width , length , crop_buff )
CALLEE	7540:19	7540:19	19	invertImage
LEAF_NODE	7540:19	7540:19	20	invertImage
LEAF_NODE	7540:30	7540:30	19	(
ARGUMENT	7540:31	7540:31	19	image -> photometric
FIELD	7540:31	7540:38	20	image -> photometric
LEAF_NODE	7540:31	7540:31	21	image
LEAF_NODE	7540:36	7540:36	21	->
LEAF_NODE	7540:38	7540:38	21	photometric
LEAF_NODE	7540:49	7540:49	19	,
ARGUMENT	7540:51	7540:51	19	image -> spp
FIELD	7540:51	7540:58	20	image -> spp
LEAF_NODE	7540:51	7540:51	21	image
LEAF_NODE	7540:56	7540:56	21	->
LEAF_NODE	7540:58	7540:58	21	spp
LEAF_NODE	7540:61	7540:61	19	,
ARGUMENT	7540:63	7540:63	19	image -> bps
FIELD	7540:63	7540:70	20	image -> bps
LEAF_NODE	7540:63	7540:63	21	image
LEAF_NODE	7540:68	7540:68	21	->
LEAF_NODE	7540:70	7540:70	21	bps
LEAF_NODE	7540:73	7540:73	19	,
ARGUMENT	7541:31	7541:31	19	width
FIELD	7541:31	7541:31	20	width
LEAF_NODE	7541:31	7541:31	21	width
LEAF_NODE	7541:36	7541:36	19	,
ARGUMENT	7541:38	7541:38	19	length
FIELD	7541:38	7541:38	20	length
LEAF_NODE	7541:38	7541:38	21	length
LEAF_NODE	7541:44	7541:44	19	,
ARGUMENT	7541:46	7541:46	19	crop_buff
FIELD	7541:46	7541:46	20	crop_buff
LEAF_NODE	7541:46	7541:46	21	crop_buff
LEAF_NODE	7541:55	7541:55	19	)
LEAF_NODE	7541:56	7541:56	16	)
STATEMENTS	7542:17	7546:17	16	
LEAF_NODE	7542:17	7542:17	17	{
STATEMENTS	7543:17	7545:17	17	
EXPR_STATEMENT	7543:17	7544:68	18	TIFFError ( "processCropSelections" , "Failed to invert colorspace for region" ) ;
EXPR	7543:17	7543:17	19	TIFFError ( "processCropSelections" , "Failed to invert colorspace for region" )
FUNCTION_CALL	7543:17	7544:67	20	TIFFError ( "processCropSelections" , "Failed to invert colorspace for region" )
CALLEE	7543:17	7543:17	21	TIFFError
LEAF_NODE	7543:17	7543:17	22	TIFFError
LEAF_NODE	7543:26	7543:26	21	(
ARGUMENT	7543:27	7543:27	21	"processCropSelections"
FIELD	7543:27	7543:27	22	"processCropSelections"
LEAF_NODE	7543:27	7543:27	23	"processCropSelections"
LEAF_NODE	7543:50	7543:50	21	,
ARGUMENT	7544:27	7544:27	21	"Failed to invert colorspace for region"
FIELD	7544:27	7544:27	22	"Failed to invert colorspace for region"
LEAF_NODE	7544:27	7544:27	23	"Failed to invert colorspace for region"
LEAF_NODE	7544:67	7544:67	21	)
LEAF_NODE	7544:68	7544:68	19	;
JUMP_STATEMENT	7545:17	7545:28	18	return ( - 1 ) ;
KEYWORD	7545:17	7545:17	19	return
LEAF_NODE	7545:17	7545:17	20	return
DESTINATION	7545:24	7545:24	19	( - 1 )
EXPR	7545:24	7545:27	20	( - 1 )
LEAF_NODE	7545:24	7545:24	21	(
UNARY_EXPR	7545:25	7545:26	21	- 1
UNARY_OPERATOR	7545:25	7545:25	22	-
LEAF_NODE	7545:25	7545:25	23	-
FIELD	7545:26	7545:26	22	1
LEAF_NODE	7545:26	7545:26	23	1
LEAF_NODE	7545:27	7545:27	21	)
LEAF_NODE	7545:28	7545:28	19	;
LEAF_NODE	7546:17	7546:17	17	}
SELECTION	7547:15	7548:17	15	
KEYWORD	7547:15	7547:15	16	if
LEAF_NODE	7547:15	7547:15	17	if
LEAF_NODE	7547:18	7547:18	16	(
CONDITION	7547:19	7547:19	16	crop -> photometric == INVERT_DATA_AND_TAG
EXPR	7547:19	7547:40	17	crop -> photometric == INVERT_DATA_AND_TAG
FIELD	7547:19	7547:25	18	crop -> photometric
LEAF_NODE	7547:19	7547:19	19	crop
LEAF_NODE	7547:23	7547:23	19	->
LEAF_NODE	7547:25	7547:25	19	photometric
EQ_OPERATOR	7547:37	7547:37	18	==
LEAF_NODE	7547:37	7547:37	19	==
FIELD	7547:40	7547:40	18	INVERT_DATA_AND_TAG
LEAF_NODE	7547:40	7547:40	19	INVERT_DATA_AND_TAG
LEAF_NODE	7547:59	7547:59	16	)
STATEMENTS	7548:17	7560:10	16	
LEAF_NODE	7548:17	7548:17	17	{
STATEMENTS	7549:17	7549:17	17	
SELECTION	7549:17	7550:19	18	
KEYWORD	7549:17	7549:17	19	switch
LEAF_NODE	7549:17	7549:17	20	switch
LEAF_NODE	7549:24	7549:24	19	(
CONDITION	7549:25	7549:25	19	image -> photometric
EXPR	7549:25	7549:25	20	image -> photometric
FIELD	7549:25	7549:32	21	image -> photometric
LEAF_NODE	7549:25	7549:25	22	image
LEAF_NODE	7549:30	7549:30	22	->
LEAF_NODE	7549:32	7549:32	22	photometric
LEAF_NODE	7549:43	7549:43	19	)
STATEMENTS	7550:19	7559:12	19	
LEAF_NODE	7550:19	7550:19	20	{
STATEMENTS	7551:19	7558:17	20	
LABEL	7551:19	7551:46	21	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	7551:19	7551:19	22	case
LEAF_NODE	7551:24	7551:24	22	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7551:46	7551:46	22	:
EXPR_STATEMENT	7552:18	7552:61	21	image -> photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	7552:18	7552:18	22	image -> photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	7552:18	7552:39	23	image -> photometric = PHOTOMETRIC_MINISBLACK
LVAL	7552:18	7552:18	24	image -> photometric
FIELD	7552:18	7552:25	25	image -> photometric
LEAF_NODE	7552:18	7552:18	26	image
LEAF_NODE	7552:23	7552:23	26	->
LEAF_NODE	7552:25	7552:25	26	photometric
ASSIGN_OP	7552:37	7552:37	24	=
LEAF_NODE	7552:37	7552:37	25	=
RVAL	7552:39	7552:39	24	PHOTOMETRIC_MINISBLACK
FIELD	7552:39	7552:39	25	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7552:39	7552:39	26	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7552:61	7552:61	22	;
JUMP_STATEMENT	7553:17	7553:22	21	break DESTINATION ;
KEYWORD	7553:17	7553:17	22	break
LEAF_NODE	7553:17	7553:17	23	break
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	7553:22	7553:22	22	;
LABEL	7554:19	7554:46	21	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	7554:19	7554:19	22	case
LEAF_NODE	7554:24	7554:24	22	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7554:46	7554:46	22	:
EXPR_STATEMENT	7555:18	7555:61	21	image -> photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	7555:18	7555:18	22	image -> photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	7555:18	7555:39	23	image -> photometric = PHOTOMETRIC_MINISWHITE
LVAL	7555:18	7555:18	24	image -> photometric
FIELD	7555:18	7555:25	25	image -> photometric
LEAF_NODE	7555:18	7555:18	26	image
LEAF_NODE	7555:23	7555:23	26	->
LEAF_NODE	7555:25	7555:25	26	photometric
ASSIGN_OP	7555:37	7555:37	24	=
LEAF_NODE	7555:37	7555:37	25	=
RVAL	7555:39	7555:39	24	PHOTOMETRIC_MINISWHITE
FIELD	7555:39	7555:39	25	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7555:39	7555:39	26	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7555:61	7555:61	22	;
JUMP_STATEMENT	7556:17	7556:22	21	break DESTINATION ;
KEYWORD	7556:17	7556:17	22	break
LEAF_NODE	7556:17	7556:17	23	break
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	7556:22	7556:22	22	;
LABEL	7557:19	7557:26	21	default :
LEAF_NODE	7557:19	7557:19	22	default
LEAF_NODE	7557:26	7557:26	22	:
JUMP_STATEMENT	7558:17	7558:22	21	break DESTINATION ;
KEYWORD	7558:17	7558:17	22	break
LEAF_NODE	7558:17	7558:17	23	break
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	7558:22	7558:22	22	;
LEAF_NODE	7559:12	7559:12	20	}
LEAF_NODE	7560:10	7560:10	17	}
JUMP_STATEMENT	7561:15	7561:20	15	break DESTINATION ;
KEYWORD	7561:15	7561:15	16	break
LEAF_NODE	7561:15	7561:15	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	7561:20	7561:20	16	;
LABEL	7562:10	7562:17	15	default :
LEAF_NODE	7562:10	7562:10	16	default
LEAF_NODE	7562:17	7562:17	16	:
JUMP_STATEMENT	7562:19	7562:24	15	break DESTINATION ;
KEYWORD	7562:19	7562:19	16	break
LEAF_NODE	7562:19	7562:19	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	7562:24	7562:24	16	;
LEAF_NODE	7563:10	7563:10	14	}
LEAF_NODE	7564:8	7564:8	11	}
SELECTION	7566:6	7567:8	9	
KEYWORD	7566:6	7566:6	10	if
LEAF_NODE	7566:6	7566:6	11	if
LEAF_NODE	7566:9	7566:9	10	(
CONDITION	7566:10	7566:10	10	crop -> crop_mode & CROP_MIRROR
EXPR	7566:10	7566:28	11	crop -> crop_mode & CROP_MIRROR
FIELD	7566:10	7566:16	12	crop -> crop_mode
LEAF_NODE	7566:10	7566:10	13	crop
LEAF_NODE	7566:14	7566:14	13	->
LEAF_NODE	7566:16	7566:16	13	crop_mode
LEAF_NODE	7566:26	7566:26	12	&
FIELD	7566:28	7566:28	12	CROP_MIRROR
LEAF_NODE	7566:28	7566:28	13	CROP_MIRROR
LEAF_NODE	7566:39	7566:39	10	)
STATEMENTS	7567:8	7575:8	10	
LEAF_NODE	7567:8	7567:8	11	{
STATEMENTS	7568:8	7568:8	11	
SELECTION	7568:8	7570:10	12	
KEYWORD	7568:8	7568:8	13	if
LEAF_NODE	7568:8	7568:8	14	if
LEAF_NODE	7568:11	7568:11	13	(
CONDITION	7568:12	7568:12	13	mirrorImage ( image -> spp , image -> bps , crop -> mirror , width , length , crop_buff )
EXPR	7568:12	7568:12	14	mirrorImage ( image -> spp , image -> bps , crop -> mirror , width , length , crop_buff )
FUNCTION_CALL	7568:12	7569:48	15	mirrorImage ( image -> spp , image -> bps , crop -> mirror , width , length , crop_buff )
CALLEE	7568:12	7568:12	16	mirrorImage
LEAF_NODE	7568:12	7568:12	17	mirrorImage
LEAF_NODE	7568:23	7568:23	16	(
ARGUMENT	7568:24	7568:24	16	image -> spp
FIELD	7568:24	7568:31	17	image -> spp
LEAF_NODE	7568:24	7568:24	18	image
LEAF_NODE	7568:29	7568:29	18	->
LEAF_NODE	7568:31	7568:31	18	spp
LEAF_NODE	7568:34	7568:34	16	,
ARGUMENT	7568:36	7568:36	16	image -> bps
FIELD	7568:36	7568:43	17	image -> bps
LEAF_NODE	7568:36	7568:36	18	image
LEAF_NODE	7568:41	7568:41	18	->
LEAF_NODE	7568:43	7568:43	18	bps
LEAF_NODE	7568:46	7568:46	16	,
ARGUMENT	7568:48	7568:48	16	crop -> mirror
FIELD	7568:48	7568:54	17	crop -> mirror
LEAF_NODE	7568:48	7568:48	18	crop
LEAF_NODE	7568:52	7568:52	18	->
LEAF_NODE	7568:54	7568:54	18	mirror
LEAF_NODE	7568:60	7568:60	16	,
ARGUMENT	7569:24	7569:24	16	width
FIELD	7569:24	7569:24	17	width
LEAF_NODE	7569:24	7569:24	18	width
LEAF_NODE	7569:29	7569:29	16	,
ARGUMENT	7569:31	7569:31	16	length
FIELD	7569:31	7569:31	17	length
LEAF_NODE	7569:31	7569:31	18	length
LEAF_NODE	7569:37	7569:37	16	,
ARGUMENT	7569:39	7569:39	16	crop_buff
FIELD	7569:39	7569:39	17	crop_buff
LEAF_NODE	7569:39	7569:39	18	crop_buff
LEAF_NODE	7569:48	7569:48	16	)
LEAF_NODE	7569:49	7569:49	13	)
STATEMENTS	7570:10	7574:10	13	
LEAF_NODE	7570:10	7570:10	14	{
STATEMENTS	7571:10	7573:10	14	
EXPR_STATEMENT	7571:10	7572:77	15	TIFFError ( "processCropSelections" , "Failed to mirror crop region %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" ) ;
EXPR	7571:10	7571:10	16	TIFFError ( "processCropSelections" , "Failed to mirror crop region %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" )
FUNCTION_CALL	7571:10	7572:76	17	TIFFError ( "processCropSelections" , "Failed to mirror crop region %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" )
CALLEE	7571:10	7571:10	18	TIFFError
LEAF_NODE	7571:10	7571:10	19	TIFFError
LEAF_NODE	7571:19	7571:19	18	(
ARGUMENT	7571:20	7571:20	18	"processCropSelections"
FIELD	7571:20	7571:20	19	"processCropSelections"
LEAF_NODE	7571:20	7571:20	20	"processCropSelections"
LEAF_NODE	7571:43	7571:43	18	,
ARGUMENT	7571:45	7571:45	18	"Failed to mirror crop region %s"
FIELD	7571:45	7571:45	19	"Failed to mirror crop region %s"
LEAF_NODE	7571:45	7571:45	20	"Failed to mirror crop region %s"
LEAF_NODE	7571:78	7571:78	18	,
ARGUMENT	7572:12	7572:12	18	( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically"
COND_EXPR	7572:12	7572:64	19	( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically"
CONDITION	7572:12	7572:43	20	( crop -> rotation == MIRROR_HORIZ )
LEAF_NODE	7572:12	7572:12	21	(
FIELD	7572:13	7572:19	21	crop -> rotation
LEAF_NODE	7572:13	7572:13	22	crop
LEAF_NODE	7572:17	7572:17	22	->
LEAF_NODE	7572:19	7572:19	22	rotation
EQ_OPERATOR	7572:28	7572:28	21	==
LEAF_NODE	7572:28	7572:28	22	==
FIELD	7572:31	7572:31	21	MIRROR_HORIZ
LEAF_NODE	7572:31	7572:31	22	MIRROR_HORIZ
LEAF_NODE	7572:43	7572:43	21	)
LEAF_NODE	7572:45	7572:45	20	?
EXPR	7572:47	7572:47	20	"horizontally"
FIELD	7572:47	7572:47	21	"horizontally"
LEAF_NODE	7572:47	7572:47	22	"horizontally"
LEAF_NODE	7572:62	7572:62	20	:
FIELD	7572:64	7572:64	20	"vertically"
LEAF_NODE	7572:64	7572:64	21	"vertically"
LEAF_NODE	7572:76	7572:76	18	)
LEAF_NODE	7572:77	7572:77	16	;
JUMP_STATEMENT	7573:10	7573:21	15	return ( - 1 ) ;
KEYWORD	7573:10	7573:10	16	return
LEAF_NODE	7573:10	7573:10	17	return
DESTINATION	7573:17	7573:17	16	( - 1 )
EXPR	7573:17	7573:20	17	( - 1 )
LEAF_NODE	7573:17	7573:17	18	(
UNARY_EXPR	7573:18	7573:19	18	- 1
UNARY_OPERATOR	7573:18	7573:18	19	-
LEAF_NODE	7573:18	7573:18	20	-
FIELD	7573:19	7573:19	19	1
LEAF_NODE	7573:19	7573:19	20	1
LEAF_NODE	7573:20	7573:20	18	)
LEAF_NODE	7573:21	7573:21	16	;
LEAF_NODE	7574:10	7574:10	14	}
LEAF_NODE	7575:8	7575:8	11	}
SELECTION	7577:6	7578:8	9	
KEYWORD	7577:6	7577:6	10	if
LEAF_NODE	7577:6	7577:6	11	if
LEAF_NODE	7577:9	7577:9	10	(
CONDITION	7577:10	7577:10	10	crop -> crop_mode & CROP_ROTATE
EXPR	7577:10	7577:28	11	crop -> crop_mode & CROP_ROTATE
FIELD	7577:10	7577:16	12	crop -> crop_mode
LEAF_NODE	7577:10	7577:10	13	crop
LEAF_NODE	7577:14	7577:14	13	->
LEAF_NODE	7577:16	7577:16	13	crop_mode
LEAF_NODE	7577:26	7577:26	12	&
FIELD	7577:28	7577:28	12	CROP_ROTATE
LEAF_NODE	7577:28	7577:28	13	CROP_ROTATE
LEAF_NODE	7577:39	7577:39	10	)
STATEMENTS	7578:8	7593:8	10	
LEAF_NODE	7578:8	7578:8	11	{
STATEMENTS	7579:1	7591:8	11	
SELECTION	7579:1	7581:10	12	
KEYWORD	7579:1	7579:1	13	if
LEAF_NODE	7579:1	7579:1	14	if
LEAF_NODE	7579:4	7579:4	13	(
CONDITION	7579:5	7579:5	13	rotateImage ( crop -> rotation , image , & crop -> regionlist [ i ] . width , & crop -> regionlist [ i ] . length , & crop_buff )
EXPR	7579:5	7579:5	14	rotateImage ( crop -> rotation , image , & crop -> regionlist [ i ] . width , & crop -> regionlist [ i ] . length , & crop_buff )
FUNCTION_CALL	7579:5	7580:42	15	rotateImage ( crop -> rotation , image , & crop -> regionlist [ i ] . width , & crop -> regionlist [ i ] . length , & crop_buff )
CALLEE	7579:5	7579:5	16	rotateImage
LEAF_NODE	7579:5	7579:5	17	rotateImage
LEAF_NODE	7579:16	7579:16	16	(
ARGUMENT	7579:17	7579:17	16	crop -> rotation
FIELD	7579:17	7579:23	17	crop -> rotation
LEAF_NODE	7579:17	7579:17	18	crop
LEAF_NODE	7579:21	7579:21	18	->
LEAF_NODE	7579:23	7579:23	18	rotation
LEAF_NODE	7579:31	7579:31	16	,
ARGUMENT	7579:33	7579:33	16	image
FIELD	7579:33	7579:33	17	image
LEAF_NODE	7579:33	7579:33	18	image
LEAF_NODE	7579:38	7579:38	16	,
ARGUMENT	7579:40	7579:40	16	& crop -> regionlist [ i ] . width
UNARY_EXPR	7579:40	7579:41	17	& crop -> regionlist [ i ] . width
UNARY_OPERATOR	7579:40	7579:40	18	&
LEAF_NODE	7579:40	7579:40	19	&
FIELD	7579:41	7579:61	18	crop -> regionlist [ i ] . width
LEAF_NODE	7579:41	7579:41	19	crop
LEAF_NODE	7579:45	7579:45	19	->
LEAF_NODE	7579:47	7579:47	19	regionlist
LEAF_NODE	7579:57	7579:57	19	[
EXPR	7579:58	7579:58	19	i
FIELD	7579:58	7579:58	20	i
LEAF_NODE	7579:58	7579:58	21	i
LEAF_NODE	7579:59	7579:59	19	]
LEAF_NODE	7579:60	7579:60	19	.
LEAF_NODE	7579:61	7579:61	19	width
LEAF_NODE	7579:66	7579:66	16	,
ARGUMENT	7580:3	7580:3	16	& crop -> regionlist [ i ] . length
UNARY_EXPR	7580:3	7580:4	17	& crop -> regionlist [ i ] . length
UNARY_OPERATOR	7580:3	7580:3	18	&
LEAF_NODE	7580:3	7580:3	19	&
FIELD	7580:4	7580:24	18	crop -> regionlist [ i ] . length
LEAF_NODE	7580:4	7580:4	19	crop
LEAF_NODE	7580:8	7580:8	19	->
LEAF_NODE	7580:10	7580:10	19	regionlist
LEAF_NODE	7580:20	7580:20	19	[
EXPR	7580:21	7580:21	19	i
FIELD	7580:21	7580:21	20	i
LEAF_NODE	7580:21	7580:21	21	i
LEAF_NODE	7580:22	7580:22	19	]
LEAF_NODE	7580:23	7580:23	19	.
LEAF_NODE	7580:24	7580:24	19	length
LEAF_NODE	7580:30	7580:30	16	,
ARGUMENT	7580:32	7580:32	16	& crop_buff
UNARY_EXPR	7580:32	7580:33	17	& crop_buff
UNARY_OPERATOR	7580:32	7580:32	18	&
LEAF_NODE	7580:32	7580:32	19	&
FIELD	7580:33	7580:33	18	crop_buff
LEAF_NODE	7580:33	7580:33	19	crop_buff
LEAF_NODE	7580:42	7580:42	16	)
LEAF_NODE	7580:43	7580:43	13	)
STATEMENTS	7581:10	7585:10	13	
LEAF_NODE	7581:10	7581:10	14	{
STATEMENTS	7582:10	7584:10	14	
EXPR_STATEMENT	7582:10	7583:81	15	TIFFError ( "processCropSelections" , "Failed to rotate crop region by %d degrees" , crop -> rotation ) ;
EXPR	7582:10	7582:10	16	TIFFError ( "processCropSelections" , "Failed to rotate crop region by %d degrees" , crop -> rotation )
FUNCTION_CALL	7582:10	7583:80	17	TIFFError ( "processCropSelections" , "Failed to rotate crop region by %d degrees" , crop -> rotation )
CALLEE	7582:10	7582:10	18	TIFFError
LEAF_NODE	7582:10	7582:10	19	TIFFError
LEAF_NODE	7582:19	7582:19	18	(
ARGUMENT	7582:20	7582:20	18	"processCropSelections"
FIELD	7582:20	7582:20	19	"processCropSelections"
LEAF_NODE	7582:20	7582:20	20	"processCropSelections"
LEAF_NODE	7582:43	7582:43	18	,
ARGUMENT	7583:20	7583:20	18	"Failed to rotate crop region by %d degrees"
FIELD	7583:20	7583:20	19	"Failed to rotate crop region by %d degrees"
LEAF_NODE	7583:20	7583:20	20	"Failed to rotate crop region by %d degrees"
LEAF_NODE	7583:64	7583:64	18	,
ARGUMENT	7583:66	7583:66	18	crop -> rotation
FIELD	7583:66	7583:72	19	crop -> rotation
LEAF_NODE	7583:66	7583:66	20	crop
LEAF_NODE	7583:70	7583:70	20	->
LEAF_NODE	7583:72	7583:72	20	rotation
LEAF_NODE	7583:80	7583:80	18	)
LEAF_NODE	7583:81	7583:81	16	;
JUMP_STATEMENT	7584:10	7584:21	15	return ( - 1 ) ;
KEYWORD	7584:10	7584:10	16	return
LEAF_NODE	7584:10	7584:10	17	return
DESTINATION	7584:17	7584:17	16	( - 1 )
EXPR	7584:17	7584:20	17	( - 1 )
LEAF_NODE	7584:17	7584:17	18	(
UNARY_EXPR	7584:18	7584:19	18	- 1
UNARY_OPERATOR	7584:18	7584:18	19	-
LEAF_NODE	7584:18	7584:18	20	-
FIELD	7584:19	7584:19	19	1
LEAF_NODE	7584:19	7584:19	20	1
LEAF_NODE	7584:20	7584:20	18	)
LEAF_NODE	7584:21	7584:21	16	;
LEAF_NODE	7585:10	7585:10	14	}
EXPR_STATEMENT	7586:8	7586:49	12	total_width += crop -> regionlist [ i ] . width ;
EXPR	7586:8	7586:8	13	total_width += crop -> regionlist [ i ] . width
ASSIGN	7586:8	7586:24	14	total_width += crop -> regionlist [ i ] . width
LVAL	7586:8	7586:8	15	total_width
FIELD	7586:8	7586:8	16	total_width
LEAF_NODE	7586:8	7586:8	17	total_width
ASSIGN_OP	7586:21	7586:21	15	+=
LEAF_NODE	7586:21	7586:21	16	+=
RVAL	7586:24	7586:24	15	crop -> regionlist [ i ] . width
FIELD	7586:24	7586:44	16	crop -> regionlist [ i ] . width
LEAF_NODE	7586:24	7586:24	17	crop
LEAF_NODE	7586:28	7586:28	17	->
LEAF_NODE	7586:30	7586:30	17	regionlist
LEAF_NODE	7586:40	7586:40	17	[
EXPR	7586:41	7586:41	17	i
FIELD	7586:41	7586:41	18	i
LEAF_NODE	7586:41	7586:41	19	i
LEAF_NODE	7586:42	7586:42	17	]
LEAF_NODE	7586:43	7586:43	17	.
LEAF_NODE	7586:44	7586:44	17	width
LEAF_NODE	7586:49	7586:49	13	;
EXPR_STATEMENT	7587:8	7587:50	12	total_length += crop -> regionlist [ i ] . length ;
EXPR	7587:8	7587:8	13	total_length += crop -> regionlist [ i ] . length
ASSIGN	7587:8	7587:24	14	total_length += crop -> regionlist [ i ] . length
LVAL	7587:8	7587:8	15	total_length
FIELD	7587:8	7587:8	16	total_length
LEAF_NODE	7587:8	7587:8	17	total_length
ASSIGN_OP	7587:21	7587:21	15	+=
LEAF_NODE	7587:21	7587:21	16	+=
RVAL	7587:24	7587:24	15	crop -> regionlist [ i ] . length
FIELD	7587:24	7587:44	16	crop -> regionlist [ i ] . length
LEAF_NODE	7587:24	7587:24	17	crop
LEAF_NODE	7587:28	7587:28	17	->
LEAF_NODE	7587:30	7587:30	17	regionlist
LEAF_NODE	7587:40	7587:40	17	[
EXPR	7587:41	7587:41	17	i
FIELD	7587:41	7587:41	18	i
LEAF_NODE	7587:41	7587:41	19	i
LEAF_NODE	7587:42	7587:42	17	]
LEAF_NODE	7587:43	7587:43	17	.
LEAF_NODE	7587:44	7587:44	17	length
LEAF_NODE	7587:50	7587:50	13	;
EXPR_STATEMENT	7588:8	7588:42	12	crop -> combined_width = total_width ;
EXPR	7588:8	7588:8	13	crop -> combined_width = total_width
ASSIGN	7588:8	7588:31	14	crop -> combined_width = total_width
LVAL	7588:8	7588:8	15	crop -> combined_width
FIELD	7588:8	7588:14	16	crop -> combined_width
LEAF_NODE	7588:8	7588:8	17	crop
LEAF_NODE	7588:12	7588:12	17	->
LEAF_NODE	7588:14	7588:14	17	combined_width
ASSIGN_OP	7588:29	7588:29	15	=
LEAF_NODE	7588:29	7588:29	16	=
RVAL	7588:31	7588:31	15	total_width
FIELD	7588:31	7588:31	16	total_width
LEAF_NODE	7588:31	7588:31	17	total_width
LEAF_NODE	7588:42	7588:42	13	;
EXPR_STATEMENT	7589:8	7589:44	12	crop -> combined_length = total_length ;
EXPR	7589:8	7589:8	13	crop -> combined_length = total_length
ASSIGN	7589:8	7589:32	14	crop -> combined_length = total_length
LVAL	7589:8	7589:8	15	crop -> combined_length
FIELD	7589:8	7589:14	16	crop -> combined_length
LEAF_NODE	7589:8	7589:8	17	crop
LEAF_NODE	7589:12	7589:12	17	->
LEAF_NODE	7589:14	7589:14	17	combined_length
ASSIGN_OP	7589:30	7589:30	15	=
LEAF_NODE	7589:30	7589:30	16	=
RVAL	7589:32	7589:32	15	total_length
FIELD	7589:32	7589:32	16	total_length
LEAF_NODE	7589:32	7589:32	17	total_length
LEAF_NODE	7589:44	7589:44	13	;
EXPR_STATEMENT	7590:8	7590:39	12	seg_buffs [ i ] . buffer = crop_buff ;
EXPR	7590:8	7590:8	13	seg_buffs [ i ] . buffer = crop_buff
ASSIGN	7590:8	7590:30	14	seg_buffs [ i ] . buffer = crop_buff
LVAL	7590:8	7590:8	15	seg_buffs [ i ] . buffer
FIELD	7590:8	7590:21	16	seg_buffs [ i ] . buffer
LEAF_NODE	7590:8	7590:8	17	seg_buffs
LEAF_NODE	7590:17	7590:17	17	[
EXPR	7590:18	7590:18	17	i
FIELD	7590:18	7590:18	18	i
LEAF_NODE	7590:18	7590:18	19	i
LEAF_NODE	7590:19	7590:19	17	]
LEAF_NODE	7590:20	7590:20	17	.
LEAF_NODE	7590:21	7590:21	17	buffer
ASSIGN_OP	7590:28	7590:28	15	=
LEAF_NODE	7590:28	7590:28	16	=
RVAL	7590:30	7590:30	15	crop_buff
FIELD	7590:30	7590:30	16	crop_buff
LEAF_NODE	7590:30	7590:30	17	crop_buff
LEAF_NODE	7590:39	7590:39	13	;
EXPR_STATEMENT	7591:8	7592:73	12	seg_buffs [ i ] . size = ( ( ( crop -> regionlist [ i ] . width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> regionlist [ i ] . length ;
EXPR	7591:8	7591:8	13	seg_buffs [ i ] . size = ( ( ( crop -> regionlist [ i ] . width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> regionlist [ i ] . length
ASSIGN	7591:8	7591:28	14	seg_buffs [ i ] . size = ( ( ( crop -> regionlist [ i ] . width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> regionlist [ i ] . length
LVAL	7591:8	7591:8	15	seg_buffs [ i ] . size
FIELD	7591:8	7591:21	16	seg_buffs [ i ] . size
LEAF_NODE	7591:8	7591:8	17	seg_buffs
LEAF_NODE	7591:17	7591:17	17	[
EXPR	7591:18	7591:18	17	i
FIELD	7591:18	7591:18	18	i
LEAF_NODE	7591:18	7591:18	19	i
LEAF_NODE	7591:19	7591:19	17	]
LEAF_NODE	7591:20	7591:20	17	.
LEAF_NODE	7591:21	7591:21	17	size
ASSIGN_OP	7591:26	7591:26	15	=
LEAF_NODE	7591:26	7591:26	16	=
RVAL	7591:28	7592:47	15	( ( ( crop -> regionlist [ i ] . width * image -> bps + 7 ) / 8 ) * image -> spp ) * crop -> regionlist [ i ] . length
LEAF_NODE	7591:28	7591:28	16	(
LEAF_NODE	7591:29	7591:29	16	(
LEAF_NODE	7591:30	7591:30	16	(
FIELD	7591:31	7591:51	16	crop -> regionlist [ i ] . width
LEAF_NODE	7591:31	7591:31	17	crop
LEAF_NODE	7591:35	7591:35	17	->
LEAF_NODE	7591:37	7591:37	17	regionlist
LEAF_NODE	7591:47	7591:47	17	[
EXPR	7591:48	7591:48	17	i
FIELD	7591:48	7591:48	18	i
LEAF_NODE	7591:48	7591:48	19	i
LEAF_NODE	7591:49	7591:49	17	]
LEAF_NODE	7591:50	7591:50	17	.
LEAF_NODE	7591:51	7591:51	17	width
LEAF_NODE	7591:57	7591:57	16	*
FIELD	7591:59	7591:66	16	image -> bps
LEAF_NODE	7591:59	7591:59	17	image
LEAF_NODE	7591:64	7591:64	17	->
LEAF_NODE	7591:66	7591:66	17	bps
LEAF_NODE	7591:70	7591:70	16	+
FIELD	7591:72	7591:72	16	7
LEAF_NODE	7591:72	7591:72	17	7
LEAF_NODE	7591:74	7591:74	16	)
LEAF_NODE	7591:76	7591:76	16	/
FIELD	7591:78	7591:78	16	8
LEAF_NODE	7591:78	7591:78	17	8
LEAF_NODE	7591:79	7591:79	16	)
LEAF_NODE	7592:31	7592:31	16	*
FIELD	7592:33	7592:40	16	image -> spp
LEAF_NODE	7592:33	7592:33	17	image
LEAF_NODE	7592:38	7592:38	17	->
LEAF_NODE	7592:40	7592:40	17	spp
LEAF_NODE	7592:43	7592:43	16	)
LEAF_NODE	7592:45	7592:45	16	*
FIELD	7592:47	7592:67	16	crop -> regionlist [ i ] . length
LEAF_NODE	7592:47	7592:47	17	crop
LEAF_NODE	7592:51	7592:51	17	->
LEAF_NODE	7592:53	7592:53	17	regionlist
LEAF_NODE	7592:63	7592:63	17	[
EXPR	7592:64	7592:64	17	i
FIELD	7592:64	7592:64	18	i
LEAF_NODE	7592:64	7592:64	19	i
LEAF_NODE	7592:65	7592:65	17	]
LEAF_NODE	7592:66	7592:66	17	.
LEAF_NODE	7592:67	7592:67	17	length
LEAF_NODE	7592:73	7592:73	13	;
LEAF_NODE	7593:8	7593:8	11	}
LEAF_NODE	7594:6	7594:6	8	}
LEAF_NODE	7595:4	7595:4	5	}
JUMP_STATEMENT	7596:2	7596:12	3	return ( 0 ) ;
KEYWORD	7596:2	7596:2	4	return
LEAF_NODE	7596:2	7596:2	5	return
DESTINATION	7596:9	7596:9	4	( 0 )
EXPR	7596:9	7596:11	5	( 0 )
LEAF_NODE	7596:9	7596:9	6	(
FIELD	7596:10	7596:10	6	0
LEAF_NODE	7596:10	7596:10	7	0
LEAF_NODE	7596:11	7596:11	6	)
LEAF_NODE	7596:12	7596:12	4	;
LEAF_NODE	7597:2	7597:2	2	}
FUNCTION_DEF	7607:0	7720:2	1	
RETURN_TYPE	7607:0	7607:7	2	static int
LEAF_NODE	7607:0	7607:0	3	static
TYPE_NAME	7607:7	7607:7	3	int
LEAF_NODE	7607:7	7607:7	4	int
FUNCTION_NAME	7608:0	7608:0	2	createCroppedImage
LEAF_NODE	7608:0	7608:0	3	createCroppedImage
PARAMETER_LIST	7608:18	7609:79	2	( struct image_data * image , struct crop_mask * crop , unsigned char * * read_buff_ptr , unsigned char * * crop_buff_ptr )
LEAF_NODE	7608:18	7608:18	3	(
PARAMETER_DECL	7608:19	7608:38	3	struct image_data * image
TYPE	7608:19	7608:37	4	struct image_data *
TYPE_NAME	7608:19	7608:26	5	struct image_data
LEAF_NODE	7608:19	7608:19	6	struct
LEAF_NODE	7608:26	7608:26	6	image_data
POINTER	7608:37	7608:37	5	*
LEAF_NODE	7608:37	7608:37	6	*
NAME	7608:38	7608:38	4	image
LEAF_NODE	7608:38	7608:38	5	image
LEAF_NODE	7608:43	7608:43	3	,
PARAMETER_DECL	7608:45	7608:63	3	struct crop_mask * crop
TYPE	7608:45	7608:62	4	struct crop_mask *
TYPE_NAME	7608:45	7608:52	5	struct crop_mask
LEAF_NODE	7608:45	7608:45	6	struct
LEAF_NODE	7608:52	7608:52	6	crop_mask
POINTER	7608:62	7608:62	5	*
LEAF_NODE	7608:62	7608:62	6	*
NAME	7608:63	7608:63	4	crop
LEAF_NODE	7608:63	7608:63	5	crop
LEAF_NODE	7608:67	7608:67	3	,
PARAMETER_DECL	7609:19	7609:35	3	unsigned char * * read_buff_ptr
TYPE	7609:19	7609:33	4	unsigned char * *
TYPE_NAME	7609:19	7609:28	5	unsigned char
LEAF_NODE	7609:19	7609:19	6	unsigned
LEAF_NODE	7609:28	7609:28	6	char
POINTER	7609:33	7609:34	5	* *
LEAF_NODE	7609:33	7609:33	6	*
LEAF_NODE	7609:34	7609:34	6	*
NAME	7609:35	7609:35	4	read_buff_ptr
LEAF_NODE	7609:35	7609:35	5	read_buff_ptr
LEAF_NODE	7609:48	7609:48	3	,
PARAMETER_DECL	7609:50	7609:66	3	unsigned char * * crop_buff_ptr
TYPE	7609:50	7609:64	4	unsigned char * *
TYPE_NAME	7609:50	7609:59	5	unsigned char
LEAF_NODE	7609:50	7609:50	6	unsigned
LEAF_NODE	7609:59	7609:59	6	char
POINTER	7609:64	7609:65	5	* *
LEAF_NODE	7609:64	7609:64	6	*
LEAF_NODE	7609:65	7609:65	6	*
NAME	7609:66	7609:66	4	crop_buff_ptr
LEAF_NODE	7609:66	7609:66	5	crop_buff_ptr
LEAF_NODE	7609:79	7609:79	3	)
LEAF_NODE	7610:2	7610:2	2	{
STATEMENTS	7611:2	7719:2	2	
SIMPLE_DECL	7611:2	7611:20	3	tsize_t cropsize ;
VAR_DECL	7611:2	7611:12	4	tsize_t cropsize
TYPE	7611:2	7611:2	5	tsize_t
TYPE_NAME	7611:2	7611:2	6	tsize_t
LEAF_NODE	7611:2	7611:2	7	tsize_t
NAME	7611:12	7611:12	5	cropsize
LEAF_NODE	7611:12	7611:12	6	cropsize
LEAF_NODE	7611:20	7611:20	4	;
SIMPLE_DECL	7612:2	7612:34	3	unsigned char * read_buff ; read_buff = NULL ;
VAR_DECL	7612:2	7612:18	4	unsigned char * read_buff ; read_buff = NULL
TYPE	7612:2	7612:17	5	unsigned char *
TYPE_NAME	7612:2	7612:12	6	unsigned char
LEAF_NODE	7612:2	7612:2	7	unsigned
LEAF_NODE	7612:12	7612:12	7	char
POINTER	7612:17	7612:17	6	*
LEAF_NODE	7612:17	7612:17	7	*
NAME	7612:18	7612:18	5	read_buff
LEAF_NODE	7612:18	7612:18	6	read_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7612:18	7612:18	5	read_buff = NULL
ASSIGN	7612:18	7612:30	6	read_buff = NULL
LVAL	7612:18	7612:18	7	read_buff
NAME	7612:18	7612:18	8	read_buff
LEAF_NODE	7612:18	7612:18	9	read_buff
ASSIGN_OP	7612:28	7612:28	7	=
LEAF_NODE	7612:28	7612:28	8	=
RVAL	7612:30	7612:30	7	NULL
FIELD	7612:30	7612:30	8	NULL
LEAF_NODE	7612:30	7612:30	9	NULL
LEAF_NODE	7612:34	7612:34	4	;
SIMPLE_DECL	7613:2	7613:34	3	unsigned char * crop_buff ; crop_buff = NULL ;
VAR_DECL	7613:2	7613:18	4	unsigned char * crop_buff ; crop_buff = NULL
TYPE	7613:2	7613:17	5	unsigned char *
TYPE_NAME	7613:2	7613:12	6	unsigned char
LEAF_NODE	7613:2	7613:2	7	unsigned
LEAF_NODE	7613:12	7613:12	7	char
POINTER	7613:17	7613:17	6	*
LEAF_NODE	7613:17	7613:17	7	*
NAME	7613:18	7613:18	5	crop_buff
LEAF_NODE	7613:18	7613:18	6	crop_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7613:18	7613:18	5	crop_buff = NULL
ASSIGN	7613:18	7613:30	6	crop_buff = NULL
LVAL	7613:18	7613:18	7	crop_buff
NAME	7613:18	7613:18	8	crop_buff
LEAF_NODE	7613:18	7613:18	9	crop_buff
ASSIGN_OP	7613:28	7613:28	7	=
LEAF_NODE	7613:28	7613:28	8	=
RVAL	7613:30	7613:30	7	NULL
FIELD	7613:30	7613:30	8	NULL
LEAF_NODE	7613:30	7613:30	9	NULL
LEAF_NODE	7613:34	7613:34	4	;
SIMPLE_DECL	7614:2	7614:34	3	unsigned char * new_buff ; new_buff = NULL ;
VAR_DECL	7614:2	7614:18	4	unsigned char * new_buff ; new_buff = NULL
TYPE	7614:2	7614:17	5	unsigned char *
TYPE_NAME	7614:2	7614:12	6	unsigned char
LEAF_NODE	7614:2	7614:2	7	unsigned
LEAF_NODE	7614:12	7614:12	7	char
POINTER	7614:17	7614:17	6	*
LEAF_NODE	7614:17	7614:17	7	*
NAME	7614:18	7614:18	5	new_buff
LEAF_NODE	7614:18	7614:18	6	new_buff
LEAF_NODE	0:0	0:0	5	;
INIT	7614:18	7614:18	5	new_buff = NULL
ASSIGN	7614:18	7614:30	6	new_buff = NULL
LVAL	7614:18	7614:18	7	new_buff
NAME	7614:18	7614:18	8	new_buff
LEAF_NODE	7614:18	7614:18	9	new_buff
ASSIGN_OP	7614:28	7614:28	7	=
LEAF_NODE	7614:28	7614:28	8	=
RVAL	7614:30	7614:30	7	NULL
FIELD	7614:30	7614:30	8	NULL
LEAF_NODE	7614:30	7614:30	9	NULL
LEAF_NODE	7614:34	7614:34	4	;
LEAF_NODE	7615:2	7615:2	3	static
SIMPLE_DECL	7615:12	7615:38	3	tsize_t prev_cropsize ; prev_cropsize = 0 ;
VAR_DECL	7615:12	7615:21	4	tsize_t prev_cropsize ; prev_cropsize = 0
TYPE	7615:12	7615:12	5	tsize_t
TYPE_NAME	7615:12	7615:12	6	tsize_t
LEAF_NODE	7615:12	7615:12	7	tsize_t
NAME	7615:21	7615:21	5	prev_cropsize
LEAF_NODE	7615:21	7615:21	6	prev_cropsize
LEAF_NODE	0:0	0:0	5	;
INIT	7615:21	7615:21	5	prev_cropsize = 0
ASSIGN	7615:21	7615:37	6	prev_cropsize = 0
LVAL	7615:21	7615:21	7	prev_cropsize
NAME	7615:21	7615:21	8	prev_cropsize
LEAF_NODE	7615:21	7615:21	9	prev_cropsize
ASSIGN_OP	7615:35	7615:35	7	=
LEAF_NODE	7615:35	7615:35	8	=
RVAL	7615:37	7615:37	7	0
FIELD	7615:37	7615:37	8	0
LEAF_NODE	7615:37	7615:37	9	0
LEAF_NODE	7615:38	7615:38	4	;
EXPR_STATEMENT	7617:2	7617:28	3	read_buff = * read_buff_ptr ;
EXPR	7617:2	7617:2	4	read_buff = * read_buff_ptr
ASSIGN	7617:2	7617:14	5	read_buff = * read_buff_ptr
LVAL	7617:2	7617:2	6	read_buff
FIELD	7617:2	7617:2	7	read_buff
LEAF_NODE	7617:2	7617:2	8	read_buff
ASSIGN_OP	7617:12	7617:12	6	=
LEAF_NODE	7617:12	7617:12	7	=
RVAL	7617:14	7617:14	6	* read_buff_ptr
UNARY_EXPR	7617:14	7617:15	7	* read_buff_ptr
UNARY_OPERATOR	7617:14	7617:14	8	*
LEAF_NODE	7617:14	7617:14	9	*
FIELD	7617:15	7617:15	8	read_buff_ptr
LEAF_NODE	7617:15	7617:15	9	read_buff_ptr
LEAF_NODE	7617:28	7617:28	4	;
EXPR_STATEMENT	7620:2	7620:23	3	crop_buff = read_buff ;
EXPR	7620:2	7620:2	4	crop_buff = read_buff
ASSIGN	7620:2	7620:14	5	crop_buff = read_buff
LVAL	7620:2	7620:2	6	crop_buff
FIELD	7620:2	7620:2	7	crop_buff
LEAF_NODE	7620:2	7620:2	8	crop_buff
ASSIGN_OP	7620:12	7620:12	6	=
LEAF_NODE	7620:12	7620:12	7	=
RVAL	7620:14	7620:14	6	read_buff
FIELD	7620:14	7620:14	7	read_buff
LEAF_NODE	7620:14	7620:14	8	read_buff
LEAF_NODE	7620:23	7620:23	4	;
EXPR_STATEMENT	7621:2	7621:28	3	* crop_buff_ptr = read_buff ;
EXPR	7621:2	7621:2	4	* crop_buff_ptr = read_buff
ASSIGN	7621:2	7621:19	5	* crop_buff_ptr = read_buff
LVAL	7621:2	7621:2	6	* crop_buff_ptr
UNARY_EXPR	7621:2	7621:3	7	* crop_buff_ptr
UNARY_OPERATOR	7621:2	7621:2	8	*
LEAF_NODE	7621:2	7621:2	9	*
FIELD	7621:3	7621:3	8	crop_buff_ptr
LEAF_NODE	7621:3	7621:3	9	crop_buff_ptr
ASSIGN_OP	7621:17	7621:17	6	=
LEAF_NODE	7621:17	7621:17	7	=
RVAL	7621:19	7621:19	6	read_buff
FIELD	7621:19	7621:19	7	read_buff
LEAF_NODE	7621:19	7621:19	8	read_buff
LEAF_NODE	7621:28	7621:28	4	;
EXPR_STATEMENT	7622:2	7622:37	3	crop -> combined_width = image -> width ;
EXPR	7622:2	7622:2	4	crop -> combined_width = image -> width
ASSIGN	7622:2	7622:25	5	crop -> combined_width = image -> width
LVAL	7622:2	7622:2	6	crop -> combined_width
FIELD	7622:2	7622:8	7	crop -> combined_width
LEAF_NODE	7622:2	7622:2	8	crop
LEAF_NODE	7622:6	7622:6	8	->
LEAF_NODE	7622:8	7622:8	8	combined_width
ASSIGN_OP	7622:23	7622:23	6	=
LEAF_NODE	7622:23	7622:23	7	=
RVAL	7622:25	7622:25	6	image -> width
FIELD	7622:25	7622:32	7	image -> width
LEAF_NODE	7622:25	7622:25	8	image
LEAF_NODE	7622:30	7622:30	8	->
LEAF_NODE	7622:32	7622:32	8	width
LEAF_NODE	7622:37	7622:37	4	;
EXPR_STATEMENT	7623:2	7623:39	3	crop -> combined_length = image -> length ;
EXPR	7623:2	7623:2	4	crop -> combined_length = image -> length
ASSIGN	7623:2	7623:26	5	crop -> combined_length = image -> length
LVAL	7623:2	7623:2	6	crop -> combined_length
FIELD	7623:2	7623:8	7	crop -> combined_length
LEAF_NODE	7623:2	7623:2	8	crop
LEAF_NODE	7623:6	7623:6	8	->
LEAF_NODE	7623:8	7623:8	8	combined_length
ASSIGN_OP	7623:24	7623:24	6	=
LEAF_NODE	7623:24	7623:24	7	=
RVAL	7623:26	7623:26	6	image -> length
FIELD	7623:26	7623:33	7	image -> length
LEAF_NODE	7623:26	7623:26	8	image
LEAF_NODE	7623:31	7623:31	8	->
LEAF_NODE	7623:33	7623:33	8	length
LEAF_NODE	7623:39	7623:39	4	;
EXPR_STATEMENT	7625:2	7625:28	3	cropsize = crop -> bufftotal ;
EXPR	7625:2	7625:2	4	cropsize = crop -> bufftotal
ASSIGN	7625:2	7625:13	5	cropsize = crop -> bufftotal
LVAL	7625:2	7625:2	6	cropsize
FIELD	7625:2	7625:2	7	cropsize
LEAF_NODE	7625:2	7625:2	8	cropsize
ASSIGN_OP	7625:11	7625:11	6	=
LEAF_NODE	7625:11	7625:11	7	=
RVAL	7625:13	7625:13	6	crop -> bufftotal
FIELD	7625:13	7625:19	7	crop -> bufftotal
LEAF_NODE	7625:13	7625:13	8	crop
LEAF_NODE	7625:17	7625:17	8	->
LEAF_NODE	7625:19	7625:19	8	bufftotal
LEAF_NODE	7625:28	7625:28	4	;
EXPR_STATEMENT	7626:2	7626:28	3	crop_buff = * crop_buff_ptr ;
EXPR	7626:2	7626:2	4	crop_buff = * crop_buff_ptr
ASSIGN	7626:2	7626:14	5	crop_buff = * crop_buff_ptr
LVAL	7626:2	7626:2	6	crop_buff
FIELD	7626:2	7626:2	7	crop_buff
LEAF_NODE	7626:2	7626:2	8	crop_buff
ASSIGN_OP	7626:12	7626:12	6	=
LEAF_NODE	7626:12	7626:12	7	=
RVAL	7626:14	7626:14	6	* crop_buff_ptr
UNARY_EXPR	7626:14	7626:15	7	* crop_buff_ptr
UNARY_OPERATOR	7626:14	7626:14	8	*
LEAF_NODE	7626:14	7626:14	9	*
FIELD	7626:15	7626:15	8	crop_buff_ptr
LEAF_NODE	7626:15	7626:15	9	crop_buff_ptr
LEAF_NODE	7626:28	7626:28	4	;
SELECTION	7627:2	7628:4	3	
KEYWORD	7627:2	7627:2	4	if
LEAF_NODE	7627:2	7627:2	5	if
LEAF_NODE	7627:5	7627:5	4	(
CONDITION	7627:6	7627:6	4	! crop_buff
EXPR	7627:6	7627:6	5	! crop_buff
UNARY_EXPR	7627:6	7627:7	6	! crop_buff
UNARY_OPERATOR	7627:6	7627:6	7	!
LEAF_NODE	7627:6	7627:6	8	!
FIELD	7627:7	7627:7	7	crop_buff
LEAF_NODE	7627:7	7627:7	8	crop_buff
LEAF_NODE	7627:16	7627:16	4	)
STATEMENTS	7628:4	7633:4	4	
LEAF_NODE	7628:4	7628:4	5	{
STATEMENTS	7629:4	7632:4	5	
EXPR_STATEMENT	7629:4	7629:54	6	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize ) ;
EXPR	7629:4	7629:4	7	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
ASSIGN	7629:4	7629:16	8	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
LVAL	7629:4	7629:4	9	crop_buff
FIELD	7629:4	7629:4	10	crop_buff
LEAF_NODE	7629:4	7629:4	11	crop_buff
ASSIGN_OP	7629:14	7629:14	9	=
LEAF_NODE	7629:14	7629:14	10	=
RVAL	7629:16	7629:33	9	( unsigned char * ) _TIFFmalloc ( cropsize )
LEAF_NODE	7629:16	7629:16	10	(
TYPE_NAME	7629:17	7629:26	10	unsigned char
LEAF_NODE	7629:17	7629:17	11	unsigned
LEAF_NODE	7629:26	7629:26	11	char
LEAF_NODE	7629:31	7629:31	10	*
LEAF_NODE	7629:32	7629:32	10	)
FUNCTION_CALL	7629:33	7629:53	10	_TIFFmalloc ( cropsize )
CALLEE	7629:33	7629:33	11	_TIFFmalloc
LEAF_NODE	7629:33	7629:33	12	_TIFFmalloc
LEAF_NODE	7629:44	7629:44	11	(
ARGUMENT	7629:45	7629:45	11	cropsize
FIELD	7629:45	7629:45	12	cropsize
LEAF_NODE	7629:45	7629:45	13	cropsize
LEAF_NODE	7629:53	7629:53	11	)
LEAF_NODE	7629:54	7629:54	7	;
EXPR_STATEMENT	7630:4	7630:30	6	* crop_buff_ptr = crop_buff ;
EXPR	7630:4	7630:4	7	* crop_buff_ptr = crop_buff
ASSIGN	7630:4	7630:21	8	* crop_buff_ptr = crop_buff
LVAL	7630:4	7630:4	9	* crop_buff_ptr
UNARY_EXPR	7630:4	7630:5	10	* crop_buff_ptr
UNARY_OPERATOR	7630:4	7630:4	11	*
LEAF_NODE	7630:4	7630:4	12	*
FIELD	7630:5	7630:5	11	crop_buff_ptr
LEAF_NODE	7630:5	7630:5	12	crop_buff_ptr
ASSIGN_OP	7630:19	7630:19	9	=
LEAF_NODE	7630:19	7630:19	10	=
RVAL	7630:21	7630:21	9	crop_buff
FIELD	7630:21	7630:21	10	crop_buff
LEAF_NODE	7630:21	7630:21	11	crop_buff
LEAF_NODE	7630:30	7630:30	7	;
EXPR_STATEMENT	7631:4	7631:39	6	_TIFFmemset ( crop_buff , 0 , cropsize ) ;
EXPR	7631:4	7631:4	7	_TIFFmemset ( crop_buff , 0 , cropsize )
FUNCTION_CALL	7631:4	7631:38	8	_TIFFmemset ( crop_buff , 0 , cropsize )
CALLEE	7631:4	7631:4	9	_TIFFmemset
LEAF_NODE	7631:4	7631:4	10	_TIFFmemset
LEAF_NODE	7631:15	7631:15	9	(
ARGUMENT	7631:16	7631:16	9	crop_buff
FIELD	7631:16	7631:16	10	crop_buff
LEAF_NODE	7631:16	7631:16	11	crop_buff
LEAF_NODE	7631:25	7631:25	9	,
ARGUMENT	7631:27	7631:27	9	0
FIELD	7631:27	7631:27	10	0
LEAF_NODE	7631:27	7631:27	11	0
LEAF_NODE	7631:28	7631:28	9	,
ARGUMENT	7631:30	7631:30	9	cropsize
FIELD	7631:30	7631:30	10	cropsize
LEAF_NODE	7631:30	7631:30	11	cropsize
LEAF_NODE	7631:38	7631:38	9	)
LEAF_NODE	7631:39	7631:39	7	;
EXPR_STATEMENT	7632:4	7632:28	6	prev_cropsize = cropsize ;
EXPR	7632:4	7632:4	7	prev_cropsize = cropsize
ASSIGN	7632:4	7632:20	8	prev_cropsize = cropsize
LVAL	7632:4	7632:4	9	prev_cropsize
FIELD	7632:4	7632:4	10	prev_cropsize
LEAF_NODE	7632:4	7632:4	11	prev_cropsize
ASSIGN_OP	7632:18	7632:18	9	=
LEAF_NODE	7632:18	7632:18	10	=
RVAL	7632:20	7632:20	9	cropsize
FIELD	7632:20	7632:20	10	cropsize
LEAF_NODE	7632:20	7632:20	11	cropsize
LEAF_NODE	7632:28	7632:28	7	;
LEAF_NODE	7633:4	7633:4	5	}
SELECTION	7634:2	7635:4	3	
KEYWORD	7634:2	7634:2	4	else
LEAF_NODE	7634:2	7634:2	5	else
STATEMENTS	7635:4	7648:4	4	
LEAF_NODE	7635:4	7635:4	5	{
STATEMENTS	7636:4	7636:4	5	
SELECTION	7636:4	7637:6	6	
KEYWORD	7636:4	7636:4	7	if
LEAF_NODE	7636:4	7636:4	8	if
LEAF_NODE	7636:7	7636:7	7	(
CONDITION	7636:8	7636:8	7	prev_cropsize < cropsize
EXPR	7636:8	7636:24	8	prev_cropsize < cropsize
FIELD	7636:8	7636:8	9	prev_cropsize
LEAF_NODE	7636:8	7636:8	10	prev_cropsize
REL_OPERATOR	7636:22	7636:22	9	<
LEAF_NODE	7636:22	7636:22	10	<
FIELD	7636:24	7636:24	9	cropsize
LEAF_NODE	7636:24	7636:24	10	cropsize
LEAF_NODE	7636:32	7636:32	7	)
STATEMENTS	7637:6	7647:6	7	
LEAF_NODE	7637:6	7637:6	8	{
STATEMENTS	7638:6	7646:6	8	
EXPR_STATEMENT	7638:6	7638:50	9	new_buff = _TIFFrealloc ( crop_buff , cropsize ) ;
EXPR	7638:6	7638:6	10	new_buff = _TIFFrealloc ( crop_buff , cropsize )
ASSIGN	7638:6	7638:17	11	new_buff = _TIFFrealloc ( crop_buff , cropsize )
LVAL	7638:6	7638:6	12	new_buff
FIELD	7638:6	7638:6	13	new_buff
LEAF_NODE	7638:6	7638:6	14	new_buff
ASSIGN_OP	7638:15	7638:15	12	=
LEAF_NODE	7638:15	7638:15	13	=
RVAL	7638:17	7638:17	12	_TIFFrealloc ( crop_buff , cropsize )
FUNCTION_CALL	7638:17	7638:49	13	_TIFFrealloc ( crop_buff , cropsize )
CALLEE	7638:17	7638:17	14	_TIFFrealloc
LEAF_NODE	7638:17	7638:17	15	_TIFFrealloc
LEAF_NODE	7638:29	7638:29	14	(
ARGUMENT	7638:30	7638:30	14	crop_buff
FIELD	7638:30	7638:30	15	crop_buff
LEAF_NODE	7638:30	7638:30	16	crop_buff
LEAF_NODE	7638:39	7638:39	14	,
ARGUMENT	7638:41	7638:41	14	cropsize
FIELD	7638:41	7638:41	15	cropsize
LEAF_NODE	7638:41	7638:41	16	cropsize
LEAF_NODE	7638:49	7638:49	14	)
LEAF_NODE	7638:50	7638:50	10	;
SELECTION	7639:6	7640:8	9	
KEYWORD	7639:6	7639:6	10	if
LEAF_NODE	7639:6	7639:6	11	if
LEAF_NODE	7639:9	7639:9	10	(
CONDITION	7639:10	7639:10	10	! new_buff
EXPR	7639:10	7639:10	11	! new_buff
UNARY_EXPR	7639:10	7639:11	12	! new_buff
UNARY_OPERATOR	7639:10	7639:10	13	!
LEAF_NODE	7639:10	7639:10	14	!
FIELD	7639:11	7639:11	13	new_buff
LEAF_NODE	7639:11	7639:11	14	new_buff
LEAF_NODE	7639:19	7639:19	10	)
STATEMENTS	7640:8	7643:8	10	
LEAF_NODE	7640:8	7640:8	11	{
STATEMENTS	7641:1	7642:8	11	
EXPR_STATEMENT	7641:1	7641:17	12	free ( crop_buff ) ;
EXPR	7641:1	7641:1	13	free ( crop_buff )
FUNCTION_CALL	7641:1	7641:16	14	free ( crop_buff )
CALLEE	7641:1	7641:1	15	free
LEAF_NODE	7641:1	7641:1	16	free
LEAF_NODE	7641:6	7641:6	15	(
ARGUMENT	7641:7	7641:7	15	crop_buff
FIELD	7641:7	7641:7	16	crop_buff
LEAF_NODE	7641:7	7641:7	17	crop_buff
LEAF_NODE	7641:16	7641:16	15	)
LEAF_NODE	7641:17	7641:17	13	;
EXPR_STATEMENT	7642:8	7642:58	12	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize ) ;
EXPR	7642:8	7642:8	13	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
ASSIGN	7642:8	7642:20	14	crop_buff = ( unsigned char * ) _TIFFmalloc ( cropsize )
LVAL	7642:8	7642:8	15	crop_buff
FIELD	7642:8	7642:8	16	crop_buff
LEAF_NODE	7642:8	7642:8	17	crop_buff
ASSIGN_OP	7642:18	7642:18	15	=
LEAF_NODE	7642:18	7642:18	16	=
RVAL	7642:20	7642:37	15	( unsigned char * ) _TIFFmalloc ( cropsize )
LEAF_NODE	7642:20	7642:20	16	(
TYPE_NAME	7642:21	7642:30	16	unsigned char
LEAF_NODE	7642:21	7642:21	17	unsigned
LEAF_NODE	7642:30	7642:30	17	char
LEAF_NODE	7642:35	7642:35	16	*
LEAF_NODE	7642:36	7642:36	16	)
FUNCTION_CALL	7642:37	7642:57	16	_TIFFmalloc ( cropsize )
CALLEE	7642:37	7642:37	17	_TIFFmalloc
LEAF_NODE	7642:37	7642:37	18	_TIFFmalloc
LEAF_NODE	7642:48	7642:48	17	(
ARGUMENT	7642:49	7642:49	17	cropsize
FIELD	7642:49	7642:49	18	cropsize
LEAF_NODE	7642:49	7642:49	19	cropsize
LEAF_NODE	7642:57	7642:57	17	)
LEAF_NODE	7642:58	7642:58	13	;
LEAF_NODE	7643:8	7643:8	11	}
SELECTION	7644:6	7645:8	9	
KEYWORD	7644:6	7644:6	10	else
LEAF_NODE	7644:6	7644:6	11	else
STATEMENTS	7645:8	7645:8	10	
EXPR_STATEMENT	7645:8	7645:28	11	crop_buff = new_buff ;
EXPR	7645:8	7645:8	12	crop_buff = new_buff
ASSIGN	7645:8	7645:20	13	crop_buff = new_buff
LVAL	7645:8	7645:8	14	crop_buff
FIELD	7645:8	7645:8	15	crop_buff
LEAF_NODE	7645:8	7645:8	16	crop_buff
ASSIGN_OP	7645:18	7645:18	14	=
LEAF_NODE	7645:18	7645:18	15	=
RVAL	7645:20	7645:20	14	new_buff
FIELD	7645:20	7645:20	15	new_buff
LEAF_NODE	7645:20	7645:20	16	new_buff
LEAF_NODE	7645:28	7645:28	12	;
EXPR_STATEMENT	7646:6	7646:41	9	_TIFFmemset ( crop_buff , 0 , cropsize ) ;
EXPR	7646:6	7646:6	10	_TIFFmemset ( crop_buff , 0 , cropsize )
FUNCTION_CALL	7646:6	7646:40	11	_TIFFmemset ( crop_buff , 0 , cropsize )
CALLEE	7646:6	7646:6	12	_TIFFmemset
LEAF_NODE	7646:6	7646:6	13	_TIFFmemset
LEAF_NODE	7646:17	7646:17	12	(
ARGUMENT	7646:18	7646:18	12	crop_buff
FIELD	7646:18	7646:18	13	crop_buff
LEAF_NODE	7646:18	7646:18	14	crop_buff
LEAF_NODE	7646:27	7646:27	12	,
ARGUMENT	7646:29	7646:29	12	0
FIELD	7646:29	7646:29	13	0
LEAF_NODE	7646:29	7646:29	14	0
LEAF_NODE	7646:30	7646:30	12	,
ARGUMENT	7646:32	7646:32	12	cropsize
FIELD	7646:32	7646:32	13	cropsize
LEAF_NODE	7646:32	7646:32	14	cropsize
LEAF_NODE	7646:40	7646:40	12	)
LEAF_NODE	7646:41	7646:41	10	;
LEAF_NODE	7647:6	7647:6	8	}
LEAF_NODE	7648:4	7648:4	5	}
SELECTION	7650:2	7651:4	3	
KEYWORD	7650:2	7650:2	4	if
LEAF_NODE	7650:2	7650:2	5	if
LEAF_NODE	7650:5	7650:5	4	(
CONDITION	7650:6	7650:6	4	! crop_buff
EXPR	7650:6	7650:6	5	! crop_buff
UNARY_EXPR	7650:6	7650:7	6	! crop_buff
UNARY_OPERATOR	7650:6	7650:6	7	!
LEAF_NODE	7650:6	7650:6	8	!
FIELD	7650:7	7650:7	7	crop_buff
LEAF_NODE	7650:7	7650:7	8	crop_buff
LEAF_NODE	7650:16	7650:16	4	)
STATEMENTS	7651:4	7654:4	4	
LEAF_NODE	7651:4	7651:4	5	{
STATEMENTS	7652:4	7653:4	5	
EXPR_STATEMENT	7652:4	7652:80	6	TIFFError ( "createCroppedImage" , "Unable to allocate/reallocate crop buffer" ) ;
EXPR	7652:4	7652:4	7	TIFFError ( "createCroppedImage" , "Unable to allocate/reallocate crop buffer" )
FUNCTION_CALL	7652:4	7652:79	8	TIFFError ( "createCroppedImage" , "Unable to allocate/reallocate crop buffer" )
CALLEE	7652:4	7652:4	9	TIFFError
LEAF_NODE	7652:4	7652:4	10	TIFFError
LEAF_NODE	7652:13	7652:13	9	(
ARGUMENT	7652:14	7652:14	9	"createCroppedImage"
FIELD	7652:14	7652:14	10	"createCroppedImage"
LEAF_NODE	7652:14	7652:14	11	"createCroppedImage"
LEAF_NODE	7652:34	7652:34	9	,
ARGUMENT	7652:36	7652:36	9	"Unable to allocate/reallocate crop buffer"
FIELD	7652:36	7652:36	10	"Unable to allocate/reallocate crop buffer"
LEAF_NODE	7652:36	7652:36	11	"Unable to allocate/reallocate crop buffer"
LEAF_NODE	7652:79	7652:79	9	)
LEAF_NODE	7652:80	7652:80	7	;
JUMP_STATEMENT	7653:4	7653:15	6	return ( - 1 ) ;
KEYWORD	7653:4	7653:4	7	return
LEAF_NODE	7653:4	7653:4	8	return
DESTINATION	7653:11	7653:11	7	( - 1 )
EXPR	7653:11	7653:14	8	( - 1 )
LEAF_NODE	7653:11	7653:11	9	(
UNARY_EXPR	7653:12	7653:13	9	- 1
UNARY_OPERATOR	7653:12	7653:12	10	-
LEAF_NODE	7653:12	7653:12	11	-
FIELD	7653:13	7653:13	10	1
LEAF_NODE	7653:13	7653:13	11	1
LEAF_NODE	7653:14	7653:14	9	)
LEAF_NODE	7653:15	7653:15	7	;
LEAF_NODE	7654:4	7654:4	5	}
EXPR_STATEMENT	7655:2	7655:28	3	* crop_buff_ptr = crop_buff ;
EXPR	7655:2	7655:2	4	* crop_buff_ptr = crop_buff
ASSIGN	7655:2	7655:19	5	* crop_buff_ptr = crop_buff
LVAL	7655:2	7655:2	6	* crop_buff_ptr
UNARY_EXPR	7655:2	7655:3	7	* crop_buff_ptr
UNARY_OPERATOR	7655:2	7655:2	8	*
LEAF_NODE	7655:2	7655:2	9	*
FIELD	7655:3	7655:3	8	crop_buff_ptr
LEAF_NODE	7655:3	7655:3	9	crop_buff_ptr
ASSIGN_OP	7655:17	7655:17	6	=
LEAF_NODE	7655:17	7655:17	7	=
RVAL	7655:19	7655:19	6	crop_buff
FIELD	7655:19	7655:19	7	crop_buff
LEAF_NODE	7655:19	7655:19	8	crop_buff
LEAF_NODE	7655:28	7655:28	4	;
SELECTION	7657:2	7658:4	3	
KEYWORD	7657:2	7657:2	4	if
LEAF_NODE	7657:2	7657:2	5	if
LEAF_NODE	7657:5	7657:5	4	(
CONDITION	7657:6	7657:6	4	crop -> crop_mode & CROP_INVERT
EXPR	7657:6	7657:24	5	crop -> crop_mode & CROP_INVERT
FIELD	7657:6	7657:12	6	crop -> crop_mode
LEAF_NODE	7657:6	7657:6	7	crop
LEAF_NODE	7657:10	7657:10	7	->
LEAF_NODE	7657:12	7657:12	7	crop_mode
LEAF_NODE	7657:22	7657:22	6	&
FIELD	7657:24	7657:24	6	CROP_INVERT
LEAF_NODE	7657:24	7657:24	7	CROP_INVERT
LEAF_NODE	7657:35	7657:35	4	)
STATEMENTS	7658:4	7692:4	4	
LEAF_NODE	7658:4	7658:4	5	{
STATEMENTS	7659:4	7659:4	5	
SELECTION	7659:4	7660:6	6	
KEYWORD	7659:4	7659:4	7	switch
LEAF_NODE	7659:4	7659:4	8	switch
LEAF_NODE	7659:11	7659:11	7	(
CONDITION	7659:12	7659:12	7	crop -> photometric
EXPR	7659:12	7659:12	8	crop -> photometric
FIELD	7659:12	7659:18	9	crop -> photometric
LEAF_NODE	7659:12	7659:12	10	crop
LEAF_NODE	7659:16	7659:16	10	->
LEAF_NODE	7659:18	7659:18	10	photometric
LEAF_NODE	7659:29	7659:29	7	)
STATEMENTS	7660:6	7691:6	7	
LEAF_NODE	7660:6	7660:6	8	{
STATEMENTS	7662:6	7690:15	8	
LABEL	7662:6	7662:33	9	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	7662:6	7662:6	10	case
LEAF_NODE	7662:11	7662:11	10	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7662:33	7662:33	10	:
LABEL	7663:6	7663:33	9	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	7663:6	7663:6	10	case
LEAF_NODE	7663:11	7663:11	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7663:33	7663:33	10	:
EXPR_STATEMENT	7664:4	7664:42	9	image -> photometric = crop -> photometric ;
EXPR	7664:4	7664:4	10	image -> photometric = crop -> photometric
ASSIGN	7664:4	7664:25	11	image -> photometric = crop -> photometric
LVAL	7664:4	7664:4	12	image -> photometric
FIELD	7664:4	7664:11	13	image -> photometric
LEAF_NODE	7664:4	7664:4	14	image
LEAF_NODE	7664:9	7664:9	14	->
LEAF_NODE	7664:11	7664:11	14	photometric
ASSIGN_OP	7664:23	7664:23	12	=
LEAF_NODE	7664:23	7664:23	13	=
RVAL	7664:25	7664:25	12	crop -> photometric
FIELD	7664:25	7664:31	13	crop -> photometric
LEAF_NODE	7664:25	7664:25	14	crop
LEAF_NODE	7664:29	7664:29	14	->
LEAF_NODE	7664:31	7664:31	14	photometric
LEAF_NODE	7664:42	7664:42	10	;
JUMP_STATEMENT	7665:4	7665:9	9	break DESTINATION ;
KEYWORD	7665:4	7665:4	10	break
LEAF_NODE	7665:4	7665:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	7665:9	7665:9	10	;
LABEL	7666:6	7666:27	9	case INVERT_DATA_ONLY :
LEAF_NODE	7666:6	7666:6	10	case
LEAF_NODE	7666:11	7666:11	10	INVERT_DATA_ONLY
LEAF_NODE	7666:27	7666:27	10	:
LABEL	7667:6	7667:30	9	case INVERT_DATA_AND_TAG :
LEAF_NODE	7667:6	7667:6	10	case
LEAF_NODE	7667:11	7667:11	10	INVERT_DATA_AND_TAG
LEAF_NODE	7667:30	7667:30	10	:
SELECTION	7668:11	7670:13	9	
KEYWORD	7668:11	7668:11	10	if
LEAF_NODE	7668:11	7668:11	11	if
LEAF_NODE	7668:14	7668:14	10	(
CONDITION	7668:15	7668:15	10	invertImage ( image -> photometric , image -> spp , image -> bps , crop -> combined_width , crop -> combined_length , crop_buff )
EXPR	7668:15	7668:15	11	invertImage ( image -> photometric , image -> spp , image -> bps , crop -> combined_width , crop -> combined_length , crop_buff )
FUNCTION_CALL	7668:15	7669:81	12	invertImage ( image -> photometric , image -> spp , image -> bps , crop -> combined_width , crop -> combined_length , crop_buff )
CALLEE	7668:15	7668:15	13	invertImage
LEAF_NODE	7668:15	7668:15	14	invertImage
LEAF_NODE	7668:26	7668:26	13	(
ARGUMENT	7668:27	7668:27	13	image -> photometric
FIELD	7668:27	7668:34	14	image -> photometric
LEAF_NODE	7668:27	7668:27	15	image
LEAF_NODE	7668:32	7668:32	15	->
LEAF_NODE	7668:34	7668:34	15	photometric
LEAF_NODE	7668:45	7668:45	13	,
ARGUMENT	7668:47	7668:47	13	image -> spp
FIELD	7668:47	7668:54	14	image -> spp
LEAF_NODE	7668:47	7668:47	15	image
LEAF_NODE	7668:52	7668:52	15	->
LEAF_NODE	7668:54	7668:54	15	spp
LEAF_NODE	7668:57	7668:57	13	,
ARGUMENT	7668:59	7668:59	13	image -> bps
FIELD	7668:59	7668:66	14	image -> bps
LEAF_NODE	7668:59	7668:59	15	image
LEAF_NODE	7668:64	7668:64	15	->
LEAF_NODE	7668:66	7668:66	15	bps
LEAF_NODE	7668:69	7668:69	13	,
ARGUMENT	7669:27	7669:27	13	crop -> combined_width
FIELD	7669:27	7669:33	14	crop -> combined_width
LEAF_NODE	7669:27	7669:27	15	crop
LEAF_NODE	7669:31	7669:31	15	->
LEAF_NODE	7669:33	7669:33	15	combined_width
LEAF_NODE	7669:47	7669:47	13	,
ARGUMENT	7669:49	7669:49	13	crop -> combined_length
FIELD	7669:49	7669:55	14	crop -> combined_length
LEAF_NODE	7669:49	7669:49	15	crop
LEAF_NODE	7669:53	7669:53	15	->
LEAF_NODE	7669:55	7669:55	15	combined_length
LEAF_NODE	7669:70	7669:70	13	,
ARGUMENT	7669:72	7669:72	13	crop_buff
FIELD	7669:72	7669:72	14	crop_buff
LEAF_NODE	7669:72	7669:72	15	crop_buff
LEAF_NODE	7669:81	7669:81	13	)
LEAF_NODE	7669:82	7669:82	10	)
STATEMENTS	7670:13	7674:13	10	
LEAF_NODE	7670:13	7670:13	11	{
STATEMENTS	7671:13	7673:13	11	
EXPR_STATEMENT	7671:13	7672:84	12	TIFFError ( "createCroppedImage" , "Failed to invert colorspace for image or cropped selection" ) ;
EXPR	7671:13	7671:13	13	TIFFError ( "createCroppedImage" , "Failed to invert colorspace for image or cropped selection" )
FUNCTION_CALL	7671:13	7672:83	14	TIFFError ( "createCroppedImage" , "Failed to invert colorspace for image or cropped selection" )
CALLEE	7671:13	7671:13	15	TIFFError
LEAF_NODE	7671:13	7671:13	16	TIFFError
LEAF_NODE	7671:22	7671:22	15	(
ARGUMENT	7671:23	7671:23	15	"createCroppedImage"
FIELD	7671:23	7671:23	16	"createCroppedImage"
LEAF_NODE	7671:23	7671:23	17	"createCroppedImage"
LEAF_NODE	7671:43	7671:43	15	,
ARGUMENT	7672:23	7672:23	15	"Failed to invert colorspace for image or cropped selection"
FIELD	7672:23	7672:23	16	"Failed to invert colorspace for image or cropped selection"
LEAF_NODE	7672:23	7672:23	17	"Failed to invert colorspace for image or cropped selection"
LEAF_NODE	7672:83	7672:83	15	)
LEAF_NODE	7672:84	7672:84	13	;
JUMP_STATEMENT	7673:13	7673:24	12	return ( - 1 ) ;
KEYWORD	7673:13	7673:13	13	return
LEAF_NODE	7673:13	7673:13	14	return
DESTINATION	7673:20	7673:20	13	( - 1 )
EXPR	7673:20	7673:23	14	( - 1 )
LEAF_NODE	7673:20	7673:20	15	(
UNARY_EXPR	7673:21	7673:22	15	- 1
UNARY_OPERATOR	7673:21	7673:21	16	-
LEAF_NODE	7673:21	7673:21	17	-
FIELD	7673:22	7673:22	16	1
LEAF_NODE	7673:22	7673:22	17	1
LEAF_NODE	7673:23	7673:23	15	)
LEAF_NODE	7673:24	7673:24	13	;
LEAF_NODE	7674:13	7674:13	11	}
SELECTION	7675:11	7676:13	9	
KEYWORD	7675:11	7675:11	10	if
LEAF_NODE	7675:11	7675:11	11	if
LEAF_NODE	7675:14	7675:14	10	(
CONDITION	7675:15	7675:15	10	crop -> photometric == INVERT_DATA_AND_TAG
EXPR	7675:15	7675:36	11	crop -> photometric == INVERT_DATA_AND_TAG
FIELD	7675:15	7675:21	12	crop -> photometric
LEAF_NODE	7675:15	7675:15	13	crop
LEAF_NODE	7675:19	7675:19	13	->
LEAF_NODE	7675:21	7675:21	13	photometric
EQ_OPERATOR	7675:33	7675:33	12	==
LEAF_NODE	7675:33	7675:33	13	==
FIELD	7675:36	7675:36	12	INVERT_DATA_AND_TAG
LEAF_NODE	7675:36	7675:36	13	INVERT_DATA_AND_TAG
LEAF_NODE	7675:55	7675:55	10	)
STATEMENTS	7676:13	7688:6	10	
LEAF_NODE	7676:13	7676:13	11	{
STATEMENTS	7677:13	7677:13	11	
SELECTION	7677:13	7678:15	12	
KEYWORD	7677:13	7677:13	13	switch
LEAF_NODE	7677:13	7677:13	14	switch
LEAF_NODE	7677:20	7677:20	13	(
CONDITION	7677:21	7677:21	13	image -> photometric
EXPR	7677:21	7677:21	14	image -> photometric
FIELD	7677:21	7677:28	15	image -> photometric
LEAF_NODE	7677:21	7677:21	16	image
LEAF_NODE	7677:26	7677:26	16	->
LEAF_NODE	7677:28	7677:28	16	photometric
LEAF_NODE	7677:39	7677:39	13	)
STATEMENTS	7678:15	7687:8	13	
LEAF_NODE	7678:15	7678:15	14	{
STATEMENTS	7679:15	7686:13	14	
LABEL	7679:15	7679:42	15	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	7679:15	7679:15	16	case
LEAF_NODE	7679:20	7679:20	16	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7679:42	7679:42	16	:
EXPR_STATEMENT	7680:14	7680:57	15	image -> photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	7680:14	7680:14	16	image -> photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	7680:14	7680:35	17	image -> photometric = PHOTOMETRIC_MINISBLACK
LVAL	7680:14	7680:14	18	image -> photometric
FIELD	7680:14	7680:21	19	image -> photometric
LEAF_NODE	7680:14	7680:14	20	image
LEAF_NODE	7680:19	7680:19	20	->
LEAF_NODE	7680:21	7680:21	20	photometric
ASSIGN_OP	7680:33	7680:33	18	=
LEAF_NODE	7680:33	7680:33	19	=
RVAL	7680:35	7680:35	18	PHOTOMETRIC_MINISBLACK
FIELD	7680:35	7680:35	19	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7680:35	7680:35	20	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7680:57	7680:57	16	;
JUMP_STATEMENT	7681:13	7681:18	15	break DESTINATION ;
KEYWORD	7681:13	7681:13	16	break
LEAF_NODE	7681:13	7681:13	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	7681:18	7681:18	16	;
LABEL	7682:15	7682:42	15	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	7682:15	7682:15	16	case
LEAF_NODE	7682:20	7682:20	16	PHOTOMETRIC_MINISBLACK
LEAF_NODE	7682:42	7682:42	16	:
EXPR_STATEMENT	7683:14	7683:57	15	image -> photometric = PHOTOMETRIC_MINISWHITE ;
EXPR	7683:14	7683:14	16	image -> photometric = PHOTOMETRIC_MINISWHITE
ASSIGN	7683:14	7683:35	17	image -> photometric = PHOTOMETRIC_MINISWHITE
LVAL	7683:14	7683:14	18	image -> photometric
FIELD	7683:14	7683:21	19	image -> photometric
LEAF_NODE	7683:14	7683:14	20	image
LEAF_NODE	7683:19	7683:19	20	->
LEAF_NODE	7683:21	7683:21	20	photometric
ASSIGN_OP	7683:33	7683:33	18	=
LEAF_NODE	7683:33	7683:33	19	=
RVAL	7683:35	7683:35	18	PHOTOMETRIC_MINISWHITE
FIELD	7683:35	7683:35	19	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7683:35	7683:35	20	PHOTOMETRIC_MINISWHITE
LEAF_NODE	7683:57	7683:57	16	;
JUMP_STATEMENT	7684:13	7684:18	15	break DESTINATION ;
KEYWORD	7684:13	7684:13	16	break
LEAF_NODE	7684:13	7684:13	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	7684:18	7684:18	16	;
LABEL	7685:15	7685:22	15	default :
LEAF_NODE	7685:15	7685:15	16	default
LEAF_NODE	7685:22	7685:22	16	:
JUMP_STATEMENT	7686:13	7686:18	15	break DESTINATION ;
KEYWORD	7686:13	7686:13	16	break
LEAF_NODE	7686:13	7686:13	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	7686:18	7686:18	16	;
LEAF_NODE	7687:8	7687:8	14	}
LEAF_NODE	7688:6	7688:6	11	}
JUMP_STATEMENT	7689:11	7689:16	9	break DESTINATION ;
KEYWORD	7689:11	7689:11	10	break
LEAF_NODE	7689:11	7689:11	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	7689:16	7689:16	10	;
LABEL	7690:6	7690:13	9	default :
LEAF_NODE	7690:6	7690:6	10	default
LEAF_NODE	7690:13	7690:13	10	:
JUMP_STATEMENT	7690:15	7690:20	9	break DESTINATION ;
KEYWORD	7690:15	7690:15	10	break
LEAF_NODE	7690:15	7690:15	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	7690:20	7690:20	10	;
LEAF_NODE	7691:6	7691:6	8	}
LEAF_NODE	7692:4	7692:4	5	}
SELECTION	7694:2	7695:4	3	
KEYWORD	7694:2	7694:2	4	if
LEAF_NODE	7694:2	7694:2	5	if
LEAF_NODE	7694:5	7694:5	4	(
CONDITION	7694:6	7694:6	4	crop -> crop_mode & CROP_MIRROR
EXPR	7694:6	7694:24	5	crop -> crop_mode & CROP_MIRROR
FIELD	7694:6	7694:12	6	crop -> crop_mode
LEAF_NODE	7694:6	7694:6	7	crop
LEAF_NODE	7694:10	7694:10	7	->
LEAF_NODE	7694:12	7694:12	7	crop_mode
LEAF_NODE	7694:22	7694:22	6	&
FIELD	7694:24	7694:24	6	CROP_MIRROR
LEAF_NODE	7694:24	7694:24	7	CROP_MIRROR
LEAF_NODE	7694:35	7694:35	4	)
STATEMENTS	7695:4	7703:4	4	
LEAF_NODE	7695:4	7695:4	5	{
STATEMENTS	7696:4	7696:4	5	
SELECTION	7696:4	7698:6	6	
KEYWORD	7696:4	7696:4	7	if
LEAF_NODE	7696:4	7696:4	8	if
LEAF_NODE	7696:7	7696:7	7	(
CONDITION	7696:8	7696:8	7	mirrorImage ( image -> spp , image -> bps , crop -> mirror , crop -> combined_width , crop -> combined_length , crop_buff )
EXPR	7696:8	7696:8	8	mirrorImage ( image -> spp , image -> bps , crop -> mirror , crop -> combined_width , crop -> combined_length , crop_buff )
FUNCTION_CALL	7696:8	7697:74	9	mirrorImage ( image -> spp , image -> bps , crop -> mirror , crop -> combined_width , crop -> combined_length , crop_buff )
CALLEE	7696:8	7696:8	10	mirrorImage
LEAF_NODE	7696:8	7696:8	11	mirrorImage
LEAF_NODE	7696:19	7696:19	10	(
ARGUMENT	7696:20	7696:20	10	image -> spp
FIELD	7696:20	7696:27	11	image -> spp
LEAF_NODE	7696:20	7696:20	12	image
LEAF_NODE	7696:25	7696:25	12	->
LEAF_NODE	7696:27	7696:27	12	spp
LEAF_NODE	7696:30	7696:30	10	,
ARGUMENT	7696:32	7696:32	10	image -> bps
FIELD	7696:32	7696:39	11	image -> bps
LEAF_NODE	7696:32	7696:32	12	image
LEAF_NODE	7696:37	7696:37	12	->
LEAF_NODE	7696:39	7696:39	12	bps
LEAF_NODE	7696:42	7696:42	10	,
ARGUMENT	7696:44	7696:44	10	crop -> mirror
FIELD	7696:44	7696:50	11	crop -> mirror
LEAF_NODE	7696:44	7696:44	12	crop
LEAF_NODE	7696:48	7696:48	12	->
LEAF_NODE	7696:50	7696:50	12	mirror
LEAF_NODE	7696:56	7696:56	10	,
ARGUMENT	7697:20	7697:20	10	crop -> combined_width
FIELD	7697:20	7697:26	11	crop -> combined_width
LEAF_NODE	7697:20	7697:20	12	crop
LEAF_NODE	7697:24	7697:24	12	->
LEAF_NODE	7697:26	7697:26	12	combined_width
LEAF_NODE	7697:40	7697:40	10	,
ARGUMENT	7697:42	7697:42	10	crop -> combined_length
FIELD	7697:42	7697:48	11	crop -> combined_length
LEAF_NODE	7697:42	7697:42	12	crop
LEAF_NODE	7697:46	7697:46	12	->
LEAF_NODE	7697:48	7697:48	12	combined_length
LEAF_NODE	7697:63	7697:63	10	,
ARGUMENT	7697:65	7697:65	10	crop_buff
FIELD	7697:65	7697:65	11	crop_buff
LEAF_NODE	7697:65	7697:65	12	crop_buff
LEAF_NODE	7697:74	7697:74	10	)
LEAF_NODE	7697:75	7697:75	7	)
STATEMENTS	7698:6	7702:6	7	
LEAF_NODE	7698:6	7698:6	8	{
STATEMENTS	7699:6	7701:6	8	
EXPR_STATEMENT	7699:6	7700:73	9	TIFFError ( "createCroppedImage" , "Failed to mirror image or cropped selection %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" ) ;
EXPR	7699:6	7699:6	10	TIFFError ( "createCroppedImage" , "Failed to mirror image or cropped selection %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" )
FUNCTION_CALL	7699:6	7700:72	11	TIFFError ( "createCroppedImage" , "Failed to mirror image or cropped selection %s" , ( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically" )
CALLEE	7699:6	7699:6	12	TIFFError
LEAF_NODE	7699:6	7699:6	13	TIFFError
LEAF_NODE	7699:15	7699:15	12	(
ARGUMENT	7699:16	7699:16	12	"createCroppedImage"
FIELD	7699:16	7699:16	13	"createCroppedImage"
LEAF_NODE	7699:16	7699:16	14	"createCroppedImage"
LEAF_NODE	7699:36	7699:36	12	,
ARGUMENT	7699:38	7699:38	12	"Failed to mirror image or cropped selection %s"
FIELD	7699:38	7699:38	13	"Failed to mirror image or cropped selection %s"
LEAF_NODE	7699:38	7699:38	14	"Failed to mirror image or cropped selection %s"
LEAF_NODE	7699:86	7699:86	12	,
ARGUMENT	7700:8	7700:8	12	( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically"
COND_EXPR	7700:8	7700:60	13	( crop -> rotation == MIRROR_HORIZ ) ? "horizontally" : "vertically"
CONDITION	7700:8	7700:39	14	( crop -> rotation == MIRROR_HORIZ )
LEAF_NODE	7700:8	7700:8	15	(
FIELD	7700:9	7700:15	15	crop -> rotation
LEAF_NODE	7700:9	7700:9	16	crop
LEAF_NODE	7700:13	7700:13	16	->
LEAF_NODE	7700:15	7700:15	16	rotation
EQ_OPERATOR	7700:24	7700:24	15	==
LEAF_NODE	7700:24	7700:24	16	==
FIELD	7700:27	7700:27	15	MIRROR_HORIZ
LEAF_NODE	7700:27	7700:27	16	MIRROR_HORIZ
LEAF_NODE	7700:39	7700:39	15	)
LEAF_NODE	7700:41	7700:41	14	?
EXPR	7700:43	7700:43	14	"horizontally"
FIELD	7700:43	7700:43	15	"horizontally"
LEAF_NODE	7700:43	7700:43	16	"horizontally"
LEAF_NODE	7700:58	7700:58	14	:
FIELD	7700:60	7700:60	14	"vertically"
LEAF_NODE	7700:60	7700:60	15	"vertically"
LEAF_NODE	7700:72	7700:72	12	)
LEAF_NODE	7700:73	7700:73	10	;
JUMP_STATEMENT	7701:6	7701:17	9	return ( - 1 ) ;
KEYWORD	7701:6	7701:6	10	return
LEAF_NODE	7701:6	7701:6	11	return
DESTINATION	7701:13	7701:13	10	( - 1 )
EXPR	7701:13	7701:16	11	( - 1 )
LEAF_NODE	7701:13	7701:13	12	(
UNARY_EXPR	7701:14	7701:15	12	- 1
UNARY_OPERATOR	7701:14	7701:14	13	-
LEAF_NODE	7701:14	7701:14	14	-
FIELD	7701:15	7701:15	13	1
LEAF_NODE	7701:15	7701:15	14	1
LEAF_NODE	7701:16	7701:16	12	)
LEAF_NODE	7701:17	7701:17	10	;
LEAF_NODE	7702:6	7702:6	8	}
LEAF_NODE	7703:4	7703:4	5	}
SELECTION	7705:2	7706:4	3	
KEYWORD	7705:2	7705:2	4	if
LEAF_NODE	7705:2	7705:2	5	if
LEAF_NODE	7705:5	7705:5	4	(
CONDITION	7705:6	7705:6	4	crop -> crop_mode & CROP_ROTATE
EXPR	7705:6	7705:24	5	crop -> crop_mode & CROP_ROTATE
FIELD	7705:6	7705:12	6	crop -> crop_mode
LEAF_NODE	7705:6	7705:6	7	crop
LEAF_NODE	7705:10	7705:10	7	->
LEAF_NODE	7705:12	7705:12	7	crop_mode
LEAF_NODE	7705:22	7705:22	6	&
FIELD	7705:24	7705:24	6	CROP_ROTATE
LEAF_NODE	7705:24	7705:24	7	CROP_ROTATE
LEAF_NODE	7705:35	7705:35	4	)
STATEMENTS	7706:4	7714:4	4	
LEAF_NODE	7706:4	7706:4	5	{
STATEMENTS	7707:4	7707:4	5	
SELECTION	7707:4	7709:6	6	
KEYWORD	7707:4	7707:4	7	if
LEAF_NODE	7707:4	7707:4	8	if
LEAF_NODE	7707:7	7707:7	7	(
CONDITION	7707:8	7707:8	7	rotateImage ( crop -> rotation , image , & crop -> combined_width , & crop -> combined_length , crop_buff_ptr )
EXPR	7707:8	7707:8	8	rotateImage ( crop -> rotation , image , & crop -> combined_width , & crop -> combined_length , crop_buff_ptr )
FUNCTION_CALL	7707:8	7708:57	9	rotateImage ( crop -> rotation , image , & crop -> combined_width , & crop -> combined_length , crop_buff_ptr )
CALLEE	7707:8	7707:8	10	rotateImage
LEAF_NODE	7707:8	7707:8	11	rotateImage
LEAF_NODE	7707:19	7707:19	10	(
ARGUMENT	7707:20	7707:20	10	crop -> rotation
FIELD	7707:20	7707:26	11	crop -> rotation
LEAF_NODE	7707:20	7707:20	12	crop
LEAF_NODE	7707:24	7707:24	12	->
LEAF_NODE	7707:26	7707:26	12	rotation
LEAF_NODE	7707:34	7707:34	10	,
ARGUMENT	7707:36	7707:36	10	image
FIELD	7707:36	7707:36	11	image
LEAF_NODE	7707:36	7707:36	12	image
LEAF_NODE	7707:41	7707:41	10	,
ARGUMENT	7707:43	7707:43	10	& crop -> combined_width
UNARY_EXPR	7707:43	7707:44	11	& crop -> combined_width
UNARY_OPERATOR	7707:43	7707:43	12	&
LEAF_NODE	7707:43	7707:43	13	&
FIELD	7707:44	7707:50	12	crop -> combined_width
LEAF_NODE	7707:44	7707:44	13	crop
LEAF_NODE	7707:48	7707:48	13	->
LEAF_NODE	7707:50	7707:50	13	combined_width
LEAF_NODE	7707:64	7707:64	10	,
ARGUMENT	7708:20	7708:20	10	& crop -> combined_length
UNARY_EXPR	7708:20	7708:21	11	& crop -> combined_length
UNARY_OPERATOR	7708:20	7708:20	12	&
LEAF_NODE	7708:20	7708:20	13	&
FIELD	7708:21	7708:27	12	crop -> combined_length
LEAF_NODE	7708:21	7708:21	13	crop
LEAF_NODE	7708:25	7708:25	13	->
LEAF_NODE	7708:27	7708:27	13	combined_length
LEAF_NODE	7708:42	7708:42	10	,
ARGUMENT	7708:44	7708:44	10	crop_buff_ptr
FIELD	7708:44	7708:44	11	crop_buff_ptr
LEAF_NODE	7708:44	7708:44	12	crop_buff_ptr
LEAF_NODE	7708:57	7708:57	10	)
LEAF_NODE	7708:58	7708:58	7	)
STATEMENTS	7709:6	7713:6	7	
LEAF_NODE	7709:6	7709:6	8	{
STATEMENTS	7710:6	7712:6	8	
EXPR_STATEMENT	7710:6	7711:92	9	TIFFError ( "createCroppedImage" , "Failed to rotate image or cropped selection by %d degrees" , crop -> rotation ) ;
EXPR	7710:6	7710:6	10	TIFFError ( "createCroppedImage" , "Failed to rotate image or cropped selection by %d degrees" , crop -> rotation )
FUNCTION_CALL	7710:6	7711:91	11	TIFFError ( "createCroppedImage" , "Failed to rotate image or cropped selection by %d degrees" , crop -> rotation )
CALLEE	7710:6	7710:6	12	TIFFError
LEAF_NODE	7710:6	7710:6	13	TIFFError
LEAF_NODE	7710:15	7710:15	12	(
ARGUMENT	7710:16	7710:16	12	"createCroppedImage"
FIELD	7710:16	7710:16	13	"createCroppedImage"
LEAF_NODE	7710:16	7710:16	14	"createCroppedImage"
LEAF_NODE	7710:36	7710:36	12	,
ARGUMENT	7711:16	7711:16	12	"Failed to rotate image or cropped selection by %d degrees"
FIELD	7711:16	7711:16	13	"Failed to rotate image or cropped selection by %d degrees"
LEAF_NODE	7711:16	7711:16	14	"Failed to rotate image or cropped selection by %d degrees"
LEAF_NODE	7711:75	7711:75	12	,
ARGUMENT	7711:77	7711:77	12	crop -> rotation
FIELD	7711:77	7711:83	13	crop -> rotation
LEAF_NODE	7711:77	7711:77	14	crop
LEAF_NODE	7711:81	7711:81	14	->
LEAF_NODE	7711:83	7711:83	14	rotation
LEAF_NODE	7711:91	7711:91	12	)
LEAF_NODE	7711:92	7711:92	10	;
JUMP_STATEMENT	7712:6	7712:17	9	return ( - 1 ) ;
KEYWORD	7712:6	7712:6	10	return
LEAF_NODE	7712:6	7712:6	11	return
DESTINATION	7712:13	7712:13	10	( - 1 )
EXPR	7712:13	7712:16	11	( - 1 )
LEAF_NODE	7712:13	7712:13	12	(
UNARY_EXPR	7712:14	7712:15	12	- 1
UNARY_OPERATOR	7712:14	7712:14	13	-
LEAF_NODE	7712:14	7712:14	14	-
FIELD	7712:15	7712:15	13	1
LEAF_NODE	7712:15	7712:15	14	1
LEAF_NODE	7712:16	7712:16	12	)
LEAF_NODE	7712:17	7712:17	10	;
LEAF_NODE	7713:6	7713:6	8	}
LEAF_NODE	7714:4	7714:4	5	}
SELECTION	7716:2	7717:4	3	
KEYWORD	7716:2	7716:2	4	if
LEAF_NODE	7716:2	7716:2	5	if
LEAF_NODE	7716:5	7716:5	4	(
CONDITION	7716:6	7716:6	4	crop_buff == read_buff
EXPR	7716:6	7716:19	5	crop_buff == read_buff
FIELD	7716:6	7716:6	6	crop_buff
LEAF_NODE	7716:6	7716:6	7	crop_buff
EQ_OPERATOR	7716:16	7716:16	6	==
LEAF_NODE	7716:16	7716:16	7	==
FIELD	7716:19	7716:19	6	read_buff
LEAF_NODE	7716:19	7716:19	7	read_buff
LEAF_NODE	7716:28	7716:28	4	)
STATEMENTS	7717:4	7717:4	4	
EXPR_STATEMENT	7717:4	7717:25	5	* read_buff_ptr = NULL ;
EXPR	7717:4	7717:4	6	* read_buff_ptr = NULL
ASSIGN	7717:4	7717:21	7	* read_buff_ptr = NULL
LVAL	7717:4	7717:4	8	* read_buff_ptr
UNARY_EXPR	7717:4	7717:5	9	* read_buff_ptr
UNARY_OPERATOR	7717:4	7717:4	10	*
LEAF_NODE	7717:4	7717:4	11	*
FIELD	7717:5	7717:5	10	read_buff_ptr
LEAF_NODE	7717:5	7717:5	11	read_buff_ptr
ASSIGN_OP	7717:19	7717:19	8	=
LEAF_NODE	7717:19	7717:19	9	=
RVAL	7717:21	7717:21	8	NULL
FIELD	7717:21	7717:21	9	NULL
LEAF_NODE	7717:21	7717:21	10	NULL
LEAF_NODE	7717:25	7717:25	6	;
JUMP_STATEMENT	7719:2	7719:12	3	return ( 0 ) ;
KEYWORD	7719:2	7719:2	4	return
LEAF_NODE	7719:2	7719:2	5	return
DESTINATION	7719:9	7719:9	4	( 0 )
EXPR	7719:9	7719:11	5	( 0 )
LEAF_NODE	7719:9	7719:9	6	(
FIELD	7719:10	7719:10	6	0
LEAF_NODE	7719:10	7719:10	7	0
LEAF_NODE	7719:11	7719:11	6	)
LEAF_NODE	7719:12	7719:12	4	;
LEAF_NODE	7720:2	7720:2	2	}
FUNCTION_DEF	7734:0	8008:2	1	
RETURN_TYPE	7734:0	7734:7	2	static int
LEAF_NODE	7734:0	7734:0	3	static
TYPE_NAME	7734:7	7734:7	3	int
LEAF_NODE	7734:7	7734:7	4	int
FUNCTION_NAME	7735:0	7735:0	2	writeCroppedImage
LEAF_NODE	7735:0	7735:0	3	writeCroppedImage
PARAMETER_LIST	7735:17	7737:72	2	( TIFF * in , TIFF * out , struct image_data * image , struct dump_opts * dump , uint32 width , uint32 length , unsigned char * crop_buff , int pagenum , int total_pages )
LEAF_NODE	7735:17	7735:17	3	(
PARAMETER_DECL	7735:18	7735:24	3	TIFF * in
TYPE	7735:18	7735:23	4	TIFF *
TYPE_NAME	7735:18	7735:18	5	TIFF
LEAF_NODE	7735:18	7735:18	6	TIFF
POINTER	7735:23	7735:23	5	*
LEAF_NODE	7735:23	7735:23	6	*
NAME	7735:24	7735:24	4	in
LEAF_NODE	7735:24	7735:24	5	in
LEAF_NODE	7735:26	7735:26	3	,
PARAMETER_DECL	7735:28	7735:34	3	TIFF * out
TYPE	7735:28	7735:33	4	TIFF *
TYPE_NAME	7735:28	7735:28	5	TIFF
LEAF_NODE	7735:28	7735:28	6	TIFF
POINTER	7735:33	7735:33	5	*
LEAF_NODE	7735:33	7735:33	6	*
NAME	7735:34	7735:34	4	out
LEAF_NODE	7735:34	7735:34	5	out
LEAF_NODE	7735:37	7735:37	3	,
PARAMETER_DECL	7735:39	7735:58	3	struct image_data * image
TYPE	7735:39	7735:57	4	struct image_data *
TYPE_NAME	7735:39	7735:46	5	struct image_data
LEAF_NODE	7735:39	7735:39	6	struct
LEAF_NODE	7735:46	7735:46	6	image_data
POINTER	7735:57	7735:57	5	*
LEAF_NODE	7735:57	7735:57	6	*
NAME	7735:58	7735:58	4	image
LEAF_NODE	7735:58	7735:58	5	image
LEAF_NODE	7735:63	7735:63	3	,
PARAMETER_DECL	7736:18	7736:36	3	struct dump_opts * dump
TYPE	7736:18	7736:35	4	struct dump_opts *
TYPE_NAME	7736:18	7736:25	5	struct dump_opts
LEAF_NODE	7736:18	7736:18	6	struct
LEAF_NODE	7736:25	7736:25	6	dump_opts
POINTER	7736:35	7736:35	5	*
LEAF_NODE	7736:35	7736:35	6	*
NAME	7736:36	7736:36	4	dump
LEAF_NODE	7736:36	7736:36	5	dump
LEAF_NODE	7736:40	7736:40	3	,
PARAMETER_DECL	7736:42	7736:49	3	uint32 width
TYPE	7736:42	7736:42	4	uint32
TYPE_NAME	7736:42	7736:42	5	uint32
LEAF_NODE	7736:42	7736:42	6	uint32
NAME	7736:49	7736:49	4	width
LEAF_NODE	7736:49	7736:49	5	width
LEAF_NODE	7736:54	7736:54	3	,
PARAMETER_DECL	7736:56	7736:63	3	uint32 length
TYPE	7736:56	7736:56	4	uint32
TYPE_NAME	7736:56	7736:56	5	uint32
LEAF_NODE	7736:56	7736:56	6	uint32
NAME	7736:63	7736:63	4	length
LEAF_NODE	7736:63	7736:63	5	length
LEAF_NODE	7736:69	7736:69	3	,
PARAMETER_DECL	7737:18	7737:33	3	unsigned char * crop_buff
TYPE	7737:18	7737:32	4	unsigned char *
TYPE_NAME	7737:18	7737:27	5	unsigned char
LEAF_NODE	7737:18	7737:18	6	unsigned
LEAF_NODE	7737:27	7737:27	6	char
POINTER	7737:32	7737:32	5	*
LEAF_NODE	7737:32	7737:32	6	*
NAME	7737:33	7737:33	4	crop_buff
LEAF_NODE	7737:33	7737:33	5	crop_buff
LEAF_NODE	7737:42	7737:42	3	,
PARAMETER_DECL	7737:44	7737:48	3	int pagenum
TYPE	7737:44	7737:44	4	int
TYPE_NAME	7737:44	7737:44	5	int
LEAF_NODE	7737:44	7737:44	6	int
NAME	7737:48	7737:48	4	pagenum
LEAF_NODE	7737:48	7737:48	5	pagenum
LEAF_NODE	7737:55	7737:55	3	,
PARAMETER_DECL	7737:57	7737:61	3	int total_pages
TYPE	7737:57	7737:57	4	int
TYPE_NAME	7737:57	7737:57	5	int
LEAF_NODE	7737:57	7737:57	6	int
NAME	7737:61	7737:61	4	total_pages
LEAF_NODE	7737:61	7737:61	5	total_pages
LEAF_NODE	7737:72	7737:72	3	)
LEAF_NODE	7738:2	7738:2	2	{
STATEMENTS	7739:2	8007:2	2	
SIMPLE_DECL	7739:2	7739:17	3	uint16 bps , uint16 spp ;
INIT_DECL_LIST	7739:2	7739:2	4	uint16 bps , uint16 spp
VAR_DECL	7739:2	7739:9	5	uint16 bps
TYPE	7739:2	7739:2	6	uint16
TYPE_NAME	7739:2	7739:2	7	uint16
LEAF_NODE	7739:2	7739:2	8	uint16
NAME	7739:9	7739:9	6	bps
LEAF_NODE	7739:9	7739:9	7	bps
LEAF_NODE	7739:12	7739:12	5	,
VAR_DECL	7739:2	7739:14	5	uint16 spp
TYPE	7739:2	7739:2	6	uint16
TYPE_NAME	7739:2	7739:2	7	uint16
LEAF_NODE	7739:2	7739:2	8	uint16
NAME	7739:14	7739:14	6	spp
LEAF_NODE	7739:14	7739:14	7	spp
LEAF_NODE	7739:17	7739:17	4	;
SIMPLE_DECL	7740:2	7740:45	3	uint16 input_compression , uint16 input_photometric ;
INIT_DECL_LIST	7740:2	7740:2	4	uint16 input_compression , uint16 input_photometric
VAR_DECL	7740:2	7740:9	5	uint16 input_compression
TYPE	7740:2	7740:2	6	uint16
TYPE_NAME	7740:2	7740:2	7	uint16
LEAF_NODE	7740:2	7740:2	8	uint16
NAME	7740:9	7740:9	6	input_compression
LEAF_NODE	7740:9	7740:9	7	input_compression
LEAF_NODE	7740:26	7740:26	5	,
VAR_DECL	7740:2	7740:28	5	uint16 input_photometric
TYPE	7740:2	7740:2	6	uint16
TYPE_NAME	7740:2	7740:2	7	uint16
LEAF_NODE	7740:2	7740:2	8	uint16
NAME	7740:28	7740:28	6	input_photometric
LEAF_NODE	7740:28	7740:28	7	input_photometric
LEAF_NODE	7740:45	7740:45	4	;
SIMPLE_DECL	7741:2	7741:21	3	uint16 input_planar ;
VAR_DECL	7741:2	7741:9	4	uint16 input_planar
TYPE	7741:2	7741:2	5	uint16
TYPE_NAME	7741:2	7741:2	6	uint16
LEAF_NODE	7741:2	7741:2	7	uint16
NAME	7741:9	7741:9	5	input_planar
LEAF_NODE	7741:9	7741:9	6	input_planar
LEAF_NODE	7741:21	7741:21	4	;
SIMPLE_DECL	7742:2	7742:17	3	struct cpTag * p ;
VAR_DECL	7742:2	7742:16	4	struct cpTag * p
TYPE	7742:2	7742:14	5	struct cpTag *
TYPE_NAME	7742:2	7742:9	6	struct cpTag
LEAF_NODE	7742:2	7742:2	7	struct
LEAF_NODE	7742:9	7742:9	7	cpTag
POINTER	7742:14	7742:14	6	*
LEAF_NODE	7742:14	7742:14	7	*
NAME	7742:16	7742:16	5	p
LEAF_NODE	7742:16	7742:16	6	p
LEAF_NODE	7742:17	7742:17	4	;
EXPR_STATEMENT	7744:2	7744:40	3	input_compression = image -> compression ;
EXPR	7744:2	7744:2	4	input_compression = image -> compression
ASSIGN	7744:2	7744:22	5	input_compression = image -> compression
LVAL	7744:2	7744:2	6	input_compression
FIELD	7744:2	7744:2	7	input_compression
LEAF_NODE	7744:2	7744:2	8	input_compression
ASSIGN_OP	7744:20	7744:20	6	=
LEAF_NODE	7744:20	7744:20	7	=
RVAL	7744:22	7744:22	6	image -> compression
FIELD	7744:22	7744:29	7	image -> compression
LEAF_NODE	7744:22	7744:22	8	image
LEAF_NODE	7744:27	7744:27	8	->
LEAF_NODE	7744:29	7744:29	8	compression
LEAF_NODE	7744:40	7744:40	4	;
EXPR_STATEMENT	7745:2	7745:40	3	input_photometric = image -> photometric ;
EXPR	7745:2	7745:2	4	input_photometric = image -> photometric
ASSIGN	7745:2	7745:22	5	input_photometric = image -> photometric
LVAL	7745:2	7745:2	6	input_photometric
FIELD	7745:2	7745:2	7	input_photometric
LEAF_NODE	7745:2	7745:2	8	input_photometric
ASSIGN_OP	7745:20	7745:20	6	=
LEAF_NODE	7745:20	7745:20	7	=
RVAL	7745:22	7745:22	6	image -> photometric
FIELD	7745:22	7745:29	7	image -> photometric
LEAF_NODE	7745:22	7745:22	8	image
LEAF_NODE	7745:27	7745:27	8	->
LEAF_NODE	7745:29	7745:29	8	photometric
LEAF_NODE	7745:40	7745:40	4	;
EXPR_STATEMENT	7746:2	7746:18	3	spp = image -> spp ;
EXPR	7746:2	7746:2	4	spp = image -> spp
ASSIGN	7746:2	7746:8	5	spp = image -> spp
LVAL	7746:2	7746:2	6	spp
FIELD	7746:2	7746:2	7	spp
LEAF_NODE	7746:2	7746:2	8	spp
ASSIGN_OP	7746:6	7746:6	6	=
LEAF_NODE	7746:6	7746:6	7	=
RVAL	7746:8	7746:8	6	image -> spp
FIELD	7746:8	7746:15	7	image -> spp
LEAF_NODE	7746:8	7746:8	8	image
LEAF_NODE	7746:13	7746:13	8	->
LEAF_NODE	7746:15	7746:15	8	spp
LEAF_NODE	7746:18	7746:18	4	;
EXPR_STATEMENT	7747:2	7747:18	3	bps = image -> bps ;
EXPR	7747:2	7747:2	4	bps = image -> bps
ASSIGN	7747:2	7747:8	5	bps = image -> bps
LVAL	7747:2	7747:2	6	bps
FIELD	7747:2	7747:2	7	bps
LEAF_NODE	7747:2	7747:2	8	bps
ASSIGN_OP	7747:6	7747:6	6	=
LEAF_NODE	7747:6	7747:6	7	=
RVAL	7747:8	7747:8	6	image -> bps
FIELD	7747:8	7747:15	7	image -> bps
LEAF_NODE	7747:8	7747:8	8	image
LEAF_NODE	7747:13	7747:13	8	->
LEAF_NODE	7747:15	7747:15	8	bps
LEAF_NODE	7747:18	7747:18	4	;
EXPR_STATEMENT	7749:2	7749:46	3	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width ) ;
EXPR	7749:2	7749:2	4	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
FUNCTION_CALL	7749:2	7749:45	5	TIFFSetField ( out , TIFFTAG_IMAGEWIDTH , width )
CALLEE	7749:2	7749:2	6	TIFFSetField
LEAF_NODE	7749:2	7749:2	7	TIFFSetField
LEAF_NODE	7749:14	7749:14	6	(
ARGUMENT	7749:15	7749:15	6	out
FIELD	7749:15	7749:15	7	out
LEAF_NODE	7749:15	7749:15	8	out
LEAF_NODE	7749:18	7749:18	6	,
ARGUMENT	7749:20	7749:20	6	TIFFTAG_IMAGEWIDTH
FIELD	7749:20	7749:20	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	7749:20	7749:20	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	7749:38	7749:38	6	,
ARGUMENT	7749:40	7749:40	6	width
FIELD	7749:40	7749:40	7	width
LEAF_NODE	7749:40	7749:40	8	width
LEAF_NODE	7749:45	7749:45	6	)
LEAF_NODE	7749:46	7749:46	4	;
EXPR_STATEMENT	7750:2	7750:48	3	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length ) ;
EXPR	7750:2	7750:2	4	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length )
FUNCTION_CALL	7750:2	7750:47	5	TIFFSetField ( out , TIFFTAG_IMAGELENGTH , length )
CALLEE	7750:2	7750:2	6	TIFFSetField
LEAF_NODE	7750:2	7750:2	7	TIFFSetField
LEAF_NODE	7750:14	7750:14	6	(
ARGUMENT	7750:15	7750:15	6	out
FIELD	7750:15	7750:15	7	out
LEAF_NODE	7750:15	7750:15	8	out
LEAF_NODE	7750:18	7750:18	6	,
ARGUMENT	7750:20	7750:20	6	TIFFTAG_IMAGELENGTH
FIELD	7750:20	7750:20	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	7750:20	7750:20	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	7750:39	7750:39	6	,
ARGUMENT	7750:41	7750:41	6	length
FIELD	7750:41	7750:41	7	length
LEAF_NODE	7750:41	7750:41	8	length
LEAF_NODE	7750:47	7750:47	6	)
LEAF_NODE	7750:48	7750:48	4	;
EXPR_STATEMENT	7751:2	7751:47	3	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bps ) ;
EXPR	7751:2	7751:2	4	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bps )
FUNCTION_CALL	7751:2	7751:46	5	TIFFSetField ( out , TIFFTAG_BITSPERSAMPLE , bps )
CALLEE	7751:2	7751:2	6	TIFFSetField
LEAF_NODE	7751:2	7751:2	7	TIFFSetField
LEAF_NODE	7751:14	7751:14	6	(
ARGUMENT	7751:15	7751:15	6	out
FIELD	7751:15	7751:15	7	out
LEAF_NODE	7751:15	7751:15	8	out
LEAF_NODE	7751:18	7751:18	6	,
ARGUMENT	7751:20	7751:20	6	TIFFTAG_BITSPERSAMPLE
FIELD	7751:20	7751:20	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	7751:20	7751:20	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	7751:41	7751:41	6	,
ARGUMENT	7751:43	7751:43	6	bps
FIELD	7751:43	7751:43	7	bps
LEAF_NODE	7751:43	7751:43	8	bps
LEAF_NODE	7751:46	7751:46	6	)
LEAF_NODE	7751:47	7751:47	4	;
EXPR_STATEMENT	7752:2	7752:49	3	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp ) ;
EXPR	7752:2	7752:2	4	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp )
FUNCTION_CALL	7752:2	7752:48	5	TIFFSetField ( out , TIFFTAG_SAMPLESPERPIXEL , spp )
CALLEE	7752:2	7752:2	6	TIFFSetField
LEAF_NODE	7752:2	7752:2	7	TIFFSetField
LEAF_NODE	7752:14	7752:14	6	(
ARGUMENT	7752:15	7752:15	6	out
FIELD	7752:15	7752:15	7	out
LEAF_NODE	7752:15	7752:15	8	out
LEAF_NODE	7752:18	7752:18	6	,
ARGUMENT	7752:20	7752:20	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	7752:20	7752:20	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	7752:20	7752:20	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	7752:43	7752:43	6	,
ARGUMENT	7752:45	7752:45	6	spp
FIELD	7752:45	7752:45	7	spp
LEAF_NODE	7752:45	7752:45	8	spp
LEAF_NODE	7752:48	7752:48	6	)
LEAF_NODE	7752:49	7752:49	4	;
EXPR_STATEMENT	7755:2	7757:74	3	TIFFError ( "writeCroppedImage" , "Input compression: %s" , ( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" ) ) ;
EXPR	7755:2	7755:2	4	TIFFError ( "writeCroppedImage" , "Input compression: %s" , ( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" ) )
FUNCTION_CALL	7755:2	7757:73	5	TIFFError ( "writeCroppedImage" , "Input compression: %s" , ( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" ) )
CALLEE	7755:2	7755:2	6	TIFFError
LEAF_NODE	7755:2	7755:2	7	TIFFError
LEAF_NODE	7755:11	7755:11	6	(
ARGUMENT	7755:12	7755:12	6	"writeCroppedImage"
FIELD	7755:12	7755:12	7	"writeCroppedImage"
LEAF_NODE	7755:12	7755:12	8	"writeCroppedImage"
LEAF_NODE	7755:31	7755:31	6	,
ARGUMENT	7755:33	7755:33	6	"Input compression: %s"
FIELD	7755:33	7755:33	7	"Input compression: %s"
LEAF_NODE	7755:33	7755:33	8	"Input compression: %s"
LEAF_NODE	7755:56	7755:56	6	,
ARGUMENT	7756:5	7756:5	6	( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" )
COND_EXPR	7756:5	7757:72	7	( input_compression == COMPRESSION_OJPEG ) ? "Old Jpeg" : ( ( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg" )
CONDITION	7756:5	7756:44	8	( input_compression == COMPRESSION_OJPEG )
LEAF_NODE	7756:5	7756:5	9	(
FIELD	7756:6	7756:6	9	input_compression
LEAF_NODE	7756:6	7756:6	10	input_compression
EQ_OPERATOR	7756:24	7756:24	9	==
LEAF_NODE	7756:24	7756:24	10	==
FIELD	7756:27	7756:27	9	COMPRESSION_OJPEG
LEAF_NODE	7756:27	7756:27	10	COMPRESSION_OJPEG
LEAF_NODE	7756:44	7756:44	9	)
LEAF_NODE	7756:46	7756:46	8	?
EXPR	7756:48	7756:48	8	"Old Jpeg"
FIELD	7756:48	7756:48	9	"Old Jpeg"
LEAF_NODE	7756:48	7756:48	10	"Old Jpeg"
LEAF_NODE	7756:59	7756:59	8	:
LEAF_NODE	7757:5	7757:5	8	(
COND_EXPR	7757:6	7757:62	8	( input_compression == COMPRESSION_JPEG ) ? "New Jpeg" : "Non Jpeg"
CONDITION	7757:6	7757:44	9	( input_compression == COMPRESSION_JPEG )
LEAF_NODE	7757:6	7757:6	10	(
FIELD	7757:7	7757:7	10	input_compression
LEAF_NODE	7757:7	7757:7	11	input_compression
EQ_OPERATOR	7757:25	7757:25	10	==
LEAF_NODE	7757:25	7757:25	11	==
FIELD	7757:28	7757:28	10	COMPRESSION_JPEG
LEAF_NODE	7757:28	7757:28	11	COMPRESSION_JPEG
LEAF_NODE	7757:44	7757:44	10	)
LEAF_NODE	7757:46	7757:46	9	?
EXPR	7757:49	7757:49	9	"New Jpeg"
FIELD	7757:49	7757:49	10	"New Jpeg"
LEAF_NODE	7757:49	7757:49	11	"New Jpeg"
LEAF_NODE	7757:60	7757:60	9	:
FIELD	7757:62	7757:62	9	"Non Jpeg"
LEAF_NODE	7757:62	7757:62	10	"Non Jpeg"
LEAF_NODE	7757:72	7757:72	8	)
LEAF_NODE	7757:73	7757:73	6	)
LEAF_NODE	7757:74	7757:74	4	;
SELECTION	7760:2	7761:4	3	
KEYWORD	7760:2	7760:2	4	if
LEAF_NODE	7760:2	7760:2	5	if
LEAF_NODE	7760:5	7760:5	4	(
CONDITION	7760:6	7760:6	4	compression != ( uint16 ) - 1
EXPR	7760:6	7760:29	5	compression != ( uint16 ) - 1
FIELD	7760:6	7760:6	6	compression
LEAF_NODE	7760:6	7760:6	7	compression
EQ_OPERATOR	7760:18	7760:18	6	!=
LEAF_NODE	7760:18	7760:18	7	!=
LEAF_NODE	7760:21	7760:21	6	(
TYPE_NAME	7760:22	7760:22	6	uint16
LEAF_NODE	7760:22	7760:22	7	uint16
LEAF_NODE	7760:28	7760:28	6	)
UNARY_EXPR	7760:29	7760:30	6	- 1
UNARY_OPERATOR	7760:29	7760:29	7	-
LEAF_NODE	7760:29	7760:29	8	-
FIELD	7760:30	7760:30	7	1
LEAF_NODE	7760:30	7760:30	8	1
LEAF_NODE	7760:31	7760:31	4	)
STATEMENTS	7761:4	7761:4	4	
EXPR_STATEMENT	7761:4	7761:55	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	7761:4	7761:4	6	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	7761:4	7761:54	7	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	7761:4	7761:4	8	TIFFSetField
LEAF_NODE	7761:4	7761:4	9	TIFFSetField
LEAF_NODE	7761:16	7761:16	8	(
ARGUMENT	7761:17	7761:17	8	out
FIELD	7761:17	7761:17	9	out
LEAF_NODE	7761:17	7761:17	10	out
LEAF_NODE	7761:20	7761:20	8	,
ARGUMENT	7761:22	7761:22	8	TIFFTAG_COMPRESSION
FIELD	7761:22	7761:22	9	TIFFTAG_COMPRESSION
LEAF_NODE	7761:22	7761:22	10	TIFFTAG_COMPRESSION
LEAF_NODE	7761:41	7761:41	8	,
ARGUMENT	7761:43	7761:43	8	compression
FIELD	7761:43	7761:43	9	compression
LEAF_NODE	7761:43	7761:43	10	compression
LEAF_NODE	7761:54	7761:54	8	)
LEAF_NODE	7761:55	7761:55	6	;
SELECTION	7762:2	7763:4	3	
KEYWORD	7762:2	7762:2	4	else
LEAF_NODE	7762:2	7762:2	5	else
STATEMENTS	7763:4	7772:4	4	
LEAF_NODE	7763:4	7763:4	5	{
STATEMENTS	7764:4	7770:4	5	
SELECTION	7764:4	7765:6	6	
KEYWORD	7764:4	7764:4	7	if
LEAF_NODE	7764:4	7764:4	8	if
LEAF_NODE	7764:7	7764:7	7	(
CONDITION	7764:8	7764:8	7	input_compression == COMPRESSION_OJPEG
EXPR	7764:8	7764:29	8	input_compression == COMPRESSION_OJPEG
FIELD	7764:8	7764:8	9	input_compression
LEAF_NODE	7764:8	7764:8	10	input_compression
EQ_OPERATOR	7764:26	7764:26	9	==
LEAF_NODE	7764:26	7764:26	10	==
FIELD	7764:29	7764:29	9	COMPRESSION_OJPEG
LEAF_NODE	7764:29	7764:29	10	COMPRESSION_OJPEG
LEAF_NODE	7764:46	7764:46	7	)
STATEMENTS	7765:6	7769:6	7	
LEAF_NODE	7765:6	7765:6	8	{
STATEMENTS	7766:6	7768:6	8	
EXPR_STATEMENT	7766:6	7766:36	9	compression = COMPRESSION_JPEG ;
EXPR	7766:6	7766:6	10	compression = COMPRESSION_JPEG
ASSIGN	7766:6	7766:20	11	compression = COMPRESSION_JPEG
LVAL	7766:6	7766:6	12	compression
FIELD	7766:6	7766:6	13	compression
LEAF_NODE	7766:6	7766:6	14	compression
ASSIGN_OP	7766:18	7766:18	12	=
LEAF_NODE	7766:18	7766:18	13	=
RVAL	7766:20	7766:20	12	COMPRESSION_JPEG
FIELD	7766:20	7766:20	13	COMPRESSION_JPEG
LEAF_NODE	7766:20	7766:20	14	COMPRESSION_JPEG
LEAF_NODE	7766:36	7766:36	10	;
EXPR_STATEMENT	7767:6	7767:39	9	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	7767:6	7767:6	10	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	7767:6	7767:22	11	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	7767:6	7767:6	12	jpegcolormode
FIELD	7767:6	7767:6	13	jpegcolormode
LEAF_NODE	7767:6	7767:6	14	jpegcolormode
ASSIGN_OP	7767:20	7767:20	12	=
LEAF_NODE	7767:20	7767:20	13	=
RVAL	7767:22	7767:22	12	JPEGCOLORMODE_RAW
FIELD	7767:22	7767:22	13	JPEGCOLORMODE_RAW
LEAF_NODE	7767:22	7767:22	14	JPEGCOLORMODE_RAW
LEAF_NODE	7767:39	7767:39	10	;
EXPR_STATEMENT	7768:6	7768:62	9	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_JPEG ) ;
EXPR	7768:6	7768:6	10	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_JPEG )
FUNCTION_CALL	7768:6	7768:61	11	TIFFSetField ( out , TIFFTAG_COMPRESSION , COMPRESSION_JPEG )
CALLEE	7768:6	7768:6	12	TIFFSetField
LEAF_NODE	7768:6	7768:6	13	TIFFSetField
LEAF_NODE	7768:18	7768:18	12	(
ARGUMENT	7768:19	7768:19	12	out
FIELD	7768:19	7768:19	13	out
LEAF_NODE	7768:19	7768:19	14	out
LEAF_NODE	7768:22	7768:22	12	,
ARGUMENT	7768:24	7768:24	12	TIFFTAG_COMPRESSION
FIELD	7768:24	7768:24	13	TIFFTAG_COMPRESSION
LEAF_NODE	7768:24	7768:24	14	TIFFTAG_COMPRESSION
LEAF_NODE	7768:43	7768:43	12	,
ARGUMENT	7768:45	7768:45	12	COMPRESSION_JPEG
FIELD	7768:45	7768:45	13	COMPRESSION_JPEG
LEAF_NODE	7768:45	7768:45	14	COMPRESSION_JPEG
LEAF_NODE	7768:61	7768:61	12	)
LEAF_NODE	7768:62	7768:62	10	;
LEAF_NODE	7769:6	7769:6	8	}
SELECTION	7770:4	7771:6	6	
KEYWORD	7770:4	7770:4	7	else
LEAF_NODE	7770:4	7770:4	8	else
STATEMENTS	7771:6	7771:6	7	
EXPR_STATEMENT	7771:6	7771:49	8	CopyField ( TIFFTAG_COMPRESSION , compression ) ;
EXPR	7771:6	7771:6	9	CopyField ( TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	7771:6	7771:48	10	CopyField ( TIFFTAG_COMPRESSION , compression )
CALLEE	7771:6	7771:6	11	CopyField
LEAF_NODE	7771:6	7771:6	12	CopyField
LEAF_NODE	7771:15	7771:15	11	(
ARGUMENT	7771:16	7771:16	11	TIFFTAG_COMPRESSION
FIELD	7771:16	7771:16	12	TIFFTAG_COMPRESSION
LEAF_NODE	7771:16	7771:16	13	TIFFTAG_COMPRESSION
LEAF_NODE	7771:35	7771:35	11	,
ARGUMENT	7771:37	7771:37	11	compression
FIELD	7771:37	7771:37	12	compression
LEAF_NODE	7771:37	7771:37	13	compression
LEAF_NODE	7771:48	7771:48	11	)
LEAF_NODE	7771:49	7771:49	9	;
LEAF_NODE	7772:4	7772:4	5	}
SELECTION	7774:2	7775:4	3	
KEYWORD	7774:2	7774:2	4	if
LEAF_NODE	7774:2	7774:2	5	if
LEAF_NODE	7774:5	7774:5	4	(
CONDITION	7774:6	7774:6	4	compression == COMPRESSION_JPEG
EXPR	7774:6	7774:21	5	compression == COMPRESSION_JPEG
FIELD	7774:6	7774:6	6	compression
LEAF_NODE	7774:6	7774:6	7	compression
EQ_OPERATOR	7774:18	7774:18	6	==
LEAF_NODE	7774:18	7774:18	7	==
FIELD	7774:21	7774:21	6	COMPRESSION_JPEG
LEAF_NODE	7774:21	7774:21	7	COMPRESSION_JPEG
LEAF_NODE	7774:37	7774:37	4	)
STATEMENTS	7775:4	7790:4	4	
LEAF_NODE	7775:4	7775:4	5	{
STATEMENTS	7776:4	7788:4	5	
SELECTION	7776:4	7778:6	6	
KEYWORD	7776:4	7776:4	7	if
LEAF_NODE	7776:4	7776:4	8	if
LEAF_NODE	7776:7	7776:7	7	(
CONDITION	7776:8	7776:8	7	( input_photometric == PHOTOMETRIC_PALETTE ) || ( input_photometric == PHOTOMETRIC_MASK )
EXPR	7776:8	7776:8	8	( input_photometric == PHOTOMETRIC_PALETTE ) || ( input_photometric == PHOTOMETRIC_MASK )
OR	7776:8	7777:8	9	( input_photometric == PHOTOMETRIC_PALETTE ) || ( input_photometric == PHOTOMETRIC_MASK )
EXPR	7776:8	7776:49	10	( input_photometric == PHOTOMETRIC_PALETTE )
LEAF_NODE	7776:8	7776:8	11	(
FIELD	7776:9	7776:9	11	input_photometric
LEAF_NODE	7776:9	7776:9	12	input_photometric
EQ_OPERATOR	7776:27	7776:27	11	==
LEAF_NODE	7776:27	7776:27	12	==
FIELD	7776:30	7776:30	11	PHOTOMETRIC_PALETTE
LEAF_NODE	7776:30	7776:30	12	PHOTOMETRIC_PALETTE
LEAF_NODE	7776:49	7776:49	11	)
LEAF_NODE	7776:51	7776:51	10	||
EXPR	7777:8	7777:46	10	( input_photometric == PHOTOMETRIC_MASK )
LEAF_NODE	7777:8	7777:8	11	(
FIELD	7777:9	7777:9	11	input_photometric
LEAF_NODE	7777:9	7777:9	12	input_photometric
EQ_OPERATOR	7777:27	7777:27	11	==
LEAF_NODE	7777:27	7777:27	12	==
FIELD	7777:30	7777:30	11	PHOTOMETRIC_MASK
LEAF_NODE	7777:30	7777:30	12	PHOTOMETRIC_MASK
LEAF_NODE	7777:46	7777:46	11	)
LEAF_NODE	7777:47	7777:47	7	)
STATEMENTS	7778:6	7784:6	7	
LEAF_NODE	7778:6	7778:6	8	{
STATEMENTS	7779:6	7783:6	8	
EXPR_STATEMENT	7779:6	7782:36	9	TIFFError ( "writeCroppedImage" , "JPEG compression cannot be used with %s image data" , ( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask" ) ;
EXPR	7779:6	7779:6	10	TIFFError ( "writeCroppedImage" , "JPEG compression cannot be used with %s image data" , ( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask" )
FUNCTION_CALL	7779:6	7782:35	11	TIFFError ( "writeCroppedImage" , "JPEG compression cannot be used with %s image data" , ( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask" )
CALLEE	7779:6	7779:6	12	TIFFError
LEAF_NODE	7779:6	7779:6	13	TIFFError
LEAF_NODE	7779:16	7779:16	12	(
ARGUMENT	7779:17	7779:17	12	"writeCroppedImage"
FIELD	7779:17	7779:17	13	"writeCroppedImage"
LEAF_NODE	7779:17	7779:17	14	"writeCroppedImage"
LEAF_NODE	7779:36	7779:36	12	,
ARGUMENT	7780:17	7780:17	12	"JPEG compression cannot be used with %s image data"
FIELD	7780:17	7780:17	13	"JPEG compression cannot be used with %s image data"
LEAF_NODE	7780:17	7780:17	14	"JPEG compression cannot be used with %s image data"
LEAF_NODE	7780:69	7780:69	12	,
ARGUMENT	7781:15	7781:15	12	( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask"
COND_EXPR	7781:15	7782:29	13	( input_photometric == PHOTOMETRIC_PALETTE ) ? "palette" : "mask"
CONDITION	7781:15	7781:56	14	( input_photometric == PHOTOMETRIC_PALETTE )
LEAF_NODE	7781:15	7781:15	15	(
FIELD	7781:16	7781:16	15	input_photometric
LEAF_NODE	7781:16	7781:16	16	input_photometric
EQ_OPERATOR	7781:34	7781:34	15	==
LEAF_NODE	7781:34	7781:34	16	==
FIELD	7781:37	7781:37	15	PHOTOMETRIC_PALETTE
LEAF_NODE	7781:37	7781:37	16	PHOTOMETRIC_PALETTE
LEAF_NODE	7781:56	7781:56	15	)
LEAF_NODE	7781:58	7781:58	14	?
EXPR	7782:17	7782:17	14	"palette"
FIELD	7782:17	7782:17	15	"palette"
LEAF_NODE	7782:17	7782:17	16	"palette"
LEAF_NODE	7782:27	7782:27	14	:
FIELD	7782:29	7782:29	14	"mask"
LEAF_NODE	7782:29	7782:29	15	"mask"
LEAF_NODE	7782:35	7782:35	12	)
LEAF_NODE	7782:36	7782:36	10	;
JUMP_STATEMENT	7783:6	7783:17	9	return ( - 1 ) ;
KEYWORD	7783:6	7783:6	10	return
LEAF_NODE	7783:6	7783:6	11	return
DESTINATION	7783:13	7783:13	10	( - 1 )
EXPR	7783:13	7783:16	11	( - 1 )
LEAF_NODE	7783:13	7783:13	12	(
UNARY_EXPR	7783:14	7783:15	12	- 1
UNARY_OPERATOR	7783:14	7783:14	13	-
LEAF_NODE	7783:14	7783:14	14	-
FIELD	7783:15	7783:15	13	1
LEAF_NODE	7783:15	7783:15	14	1
LEAF_NODE	7783:16	7783:16	12	)
LEAF_NODE	7783:17	7783:17	10	;
LEAF_NODE	7784:6	7784:6	8	}
SELECTION	7785:4	7787:6	6	
KEYWORD	7785:4	7785:4	7	if
LEAF_NODE	7785:4	7785:4	8	if
LEAF_NODE	7785:7	7785:7	7	(
CONDITION	7785:8	7785:8	7	( input_photometric == PHOTOMETRIC_RGB ) && ( jpegcolormode == JPEGCOLORMODE_RGB )
EXPR	7785:8	7785:8	8	( input_photometric == PHOTOMETRIC_RGB ) && ( jpegcolormode == JPEGCOLORMODE_RGB )
AND	7785:8	7786:1	9	( input_photometric == PHOTOMETRIC_RGB ) && ( jpegcolormode == JPEGCOLORMODE_RGB )
EXPR	7785:8	7785:45	10	( input_photometric == PHOTOMETRIC_RGB )
LEAF_NODE	7785:8	7785:8	11	(
FIELD	7785:9	7785:9	11	input_photometric
LEAF_NODE	7785:9	7785:9	12	input_photometric
EQ_OPERATOR	7785:27	7785:27	11	==
LEAF_NODE	7785:27	7785:27	12	==
FIELD	7785:30	7785:30	11	PHOTOMETRIC_RGB
LEAF_NODE	7785:30	7785:30	12	PHOTOMETRIC_RGB
LEAF_NODE	7785:45	7785:45	11	)
LEAF_NODE	7785:47	7785:47	10	&&
EXPR	7786:1	7786:36	10	( jpegcolormode == JPEGCOLORMODE_RGB )
LEAF_NODE	7786:1	7786:1	11	(
FIELD	7786:2	7786:2	11	jpegcolormode
LEAF_NODE	7786:2	7786:2	12	jpegcolormode
EQ_OPERATOR	7786:16	7786:16	11	==
LEAF_NODE	7786:16	7786:16	12	==
FIELD	7786:19	7786:19	11	JPEGCOLORMODE_RGB
LEAF_NODE	7786:19	7786:19	12	JPEGCOLORMODE_RGB
LEAF_NODE	7786:36	7786:36	11	)
LEAF_NODE	7786:37	7786:37	7	)
STATEMENTS	7787:6	7787:6	7	
EXPR_STATEMENT	7787:6	7787:63	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ;
EXPR	7787:6	7787:6	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
FUNCTION_CALL	7787:6	7787:62	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
CALLEE	7787:6	7787:6	11	TIFFSetField
LEAF_NODE	7787:6	7787:6	12	TIFFSetField
LEAF_NODE	7787:18	7787:18	11	(
ARGUMENT	7787:19	7787:19	11	out
FIELD	7787:19	7787:19	12	out
LEAF_NODE	7787:19	7787:19	13	out
LEAF_NODE	7787:22	7787:22	11	,
ARGUMENT	7787:24	7787:24	11	TIFFTAG_PHOTOMETRIC
FIELD	7787:24	7787:24	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7787:24	7787:24	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7787:43	7787:43	11	,
ARGUMENT	7787:45	7787:45	11	PHOTOMETRIC_YCBCR
FIELD	7787:45	7787:45	12	PHOTOMETRIC_YCBCR
LEAF_NODE	7787:45	7787:45	13	PHOTOMETRIC_YCBCR
LEAF_NODE	7787:62	7787:62	11	)
LEAF_NODE	7787:63	7787:63	9	;
SELECTION	7788:4	7789:1	6	
KEYWORD	7788:4	7788:4	7	else
LEAF_NODE	7788:4	7788:4	8	else
STATEMENTS	7789:1	7789:1	7	
EXPR_STATEMENT	7789:1	7789:58	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric ) ;
EXPR	7789:1	7789:1	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric )
FUNCTION_CALL	7789:1	7789:57	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric )
CALLEE	7789:1	7789:1	11	TIFFSetField
LEAF_NODE	7789:1	7789:1	12	TIFFSetField
LEAF_NODE	7789:13	7789:13	11	(
ARGUMENT	7789:14	7789:14	11	out
FIELD	7789:14	7789:14	12	out
LEAF_NODE	7789:14	7789:14	13	out
LEAF_NODE	7789:17	7789:17	11	,
ARGUMENT	7789:19	7789:19	11	TIFFTAG_PHOTOMETRIC
FIELD	7789:19	7789:19	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7789:19	7789:19	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7789:38	7789:38	11	,
ARGUMENT	7789:40	7789:40	11	input_photometric
FIELD	7789:40	7789:40	12	input_photometric
LEAF_NODE	7789:40	7789:40	13	input_photometric
LEAF_NODE	7789:57	7789:57	11	)
LEAF_NODE	7789:58	7789:58	9	;
LEAF_NODE	7790:4	7790:4	5	}
SELECTION	7791:2	7792:4	3	
KEYWORD	7791:2	7791:2	4	else
LEAF_NODE	7791:2	7791:2	5	else
STATEMENTS	7792:4	7809:4	4	
LEAF_NODE	7792:4	7792:4	5	{
STATEMENTS	7793:4	7798:4	5	
SELECTION	7793:4	7794:6	6	
KEYWORD	7793:4	7793:4	7	if
LEAF_NODE	7793:4	7793:4	8	if
LEAF_NODE	7793:7	7793:7	7	(
CONDITION	7793:8	7793:8	7	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
EXPR	7793:8	7793:8	8	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
OR	7793:8	7793:45	9	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
EXPR	7793:8	7793:23	10	compression == COMPRESSION_SGILOG
FIELD	7793:8	7793:8	11	compression
LEAF_NODE	7793:8	7793:8	12	compression
EQ_OPERATOR	7793:20	7793:20	11	==
LEAF_NODE	7793:20	7793:20	12	==
FIELD	7793:23	7793:23	11	COMPRESSION_SGILOG
LEAF_NODE	7793:23	7793:23	12	COMPRESSION_SGILOG
LEAF_NODE	7793:42	7793:42	10	||
EXPR	7793:45	7793:60	10	compression == COMPRESSION_SGILOG24
FIELD	7793:45	7793:45	11	compression
LEAF_NODE	7793:45	7793:45	12	compression
EQ_OPERATOR	7793:57	7793:57	11	==
LEAF_NODE	7793:57	7793:57	12	==
FIELD	7793:60	7793:60	11	COMPRESSION_SGILOG24
LEAF_NODE	7793:60	7793:60	12	COMPRESSION_SGILOG24
LEAF_NODE	7793:80	7793:80	7	)
STATEMENTS	7794:6	7797:6	7	
LEAF_NODE	7794:6	7794:6	8	{
STATEMENTS	7795:6	7795:6	8	
EXPR_STATEMENT	7795:6	7796:41	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV ) ;
EXPR	7795:6	7795:6	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
FUNCTION_CALL	7795:6	7796:40	11	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
CALLEE	7795:6	7795:6	12	TIFFSetField
LEAF_NODE	7795:6	7795:6	13	TIFFSetField
LEAF_NODE	7795:18	7795:18	12	(
ARGUMENT	7795:19	7795:19	12	out
FIELD	7795:19	7795:19	13	out
LEAF_NODE	7795:19	7795:19	14	out
LEAF_NODE	7795:22	7795:22	12	,
ARGUMENT	7795:24	7795:24	12	TIFFTAG_PHOTOMETRIC
FIELD	7795:24	7795:24	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7795:24	7795:24	14	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7795:43	7795:43	12	,
ARGUMENT	7795:45	7795:45	12	spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
COND_EXPR	7795:45	7796:22	13	spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
CONDITION	7795:45	7795:52	14	spp == 1
FIELD	7795:45	7795:45	15	spp
LEAF_NODE	7795:45	7795:45	16	spp
EQ_OPERATOR	7795:49	7795:49	15	==
LEAF_NODE	7795:49	7795:49	16	==
FIELD	7795:52	7795:52	15	1
LEAF_NODE	7795:52	7795:52	16	1
LEAF_NODE	7795:54	7795:54	14	?
EXPR	7796:3	7796:3	14	PHOTOMETRIC_LOGL
FIELD	7796:3	7796:3	15	PHOTOMETRIC_LOGL
LEAF_NODE	7796:3	7796:3	16	PHOTOMETRIC_LOGL
LEAF_NODE	7796:20	7796:20	14	:
FIELD	7796:22	7796:22	14	PHOTOMETRIC_LOGLUV
LEAF_NODE	7796:22	7796:22	15	PHOTOMETRIC_LOGLUV
LEAF_NODE	7796:40	7796:40	12	)
LEAF_NODE	7796:41	7796:41	10	;
LEAF_NODE	7797:6	7797:6	8	}
SELECTION	7798:4	7799:6	6	
KEYWORD	7798:4	7798:4	7	else
LEAF_NODE	7798:4	7798:4	8	else
STATEMENTS	7799:6	7808:6	7	
LEAF_NODE	7799:6	7799:6	8	{
STATEMENTS	7800:6	7806:6	8	
SELECTION	7800:6	7802:8	9	
KEYWORD	7800:6	7800:6	10	if
LEAF_NODE	7800:6	7800:6	11	if
LEAF_NODE	7800:9	7800:9	10	(
CONDITION	7800:10	7800:10	10	input_compression == COMPRESSION_SGILOG || input_compression == COMPRESSION_SGILOG24
EXPR	7800:10	7800:10	11	input_compression == COMPRESSION_SGILOG || input_compression == COMPRESSION_SGILOG24
OR	7800:10	7801:10	12	input_compression == COMPRESSION_SGILOG || input_compression == COMPRESSION_SGILOG24
EXPR	7800:10	7800:31	13	input_compression == COMPRESSION_SGILOG
FIELD	7800:10	7800:10	14	input_compression
LEAF_NODE	7800:10	7800:10	15	input_compression
EQ_OPERATOR	7800:28	7800:28	14	==
LEAF_NODE	7800:28	7800:28	15	==
FIELD	7800:31	7800:31	14	COMPRESSION_SGILOG
LEAF_NODE	7800:31	7800:31	15	COMPRESSION_SGILOG
LEAF_NODE	7800:50	7800:50	13	||
EXPR	7801:10	7801:31	13	input_compression == COMPRESSION_SGILOG24
FIELD	7801:10	7801:10	14	input_compression
LEAF_NODE	7801:10	7801:10	15	input_compression
EQ_OPERATOR	7801:28	7801:28	14	==
LEAF_NODE	7801:28	7801:28	15	==
FIELD	7801:31	7801:31	14	COMPRESSION_SGILOG24
LEAF_NODE	7801:31	7801:31	15	COMPRESSION_SGILOG24
LEAF_NODE	7801:51	7801:51	10	)
STATEMENTS	7802:8	7805:8	10	
LEAF_NODE	7802:8	7802:8	11	{
STATEMENTS	7803:8	7803:8	11	
EXPR_STATEMENT	7803:8	7804:43	12	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV ) ;
EXPR	7803:8	7803:8	13	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
FUNCTION_CALL	7803:8	7804:42	14	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
CALLEE	7803:8	7803:8	15	TIFFSetField
LEAF_NODE	7803:8	7803:8	16	TIFFSetField
LEAF_NODE	7803:20	7803:20	15	(
ARGUMENT	7803:21	7803:21	15	out
FIELD	7803:21	7803:21	16	out
LEAF_NODE	7803:21	7803:21	17	out
LEAF_NODE	7803:24	7803:24	15	,
ARGUMENT	7803:26	7803:26	15	TIFFTAG_PHOTOMETRIC
FIELD	7803:26	7803:26	16	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7803:26	7803:26	17	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7803:45	7803:45	15	,
ARGUMENT	7803:47	7803:47	15	spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
COND_EXPR	7803:47	7804:24	16	spp == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
CONDITION	7803:47	7803:54	17	spp == 1
FIELD	7803:47	7803:47	18	spp
LEAF_NODE	7803:47	7803:47	19	spp
EQ_OPERATOR	7803:51	7803:51	18	==
LEAF_NODE	7803:51	7803:51	19	==
FIELD	7803:54	7803:54	18	1
LEAF_NODE	7803:54	7803:54	19	1
LEAF_NODE	7803:56	7803:56	17	?
EXPR	7804:5	7804:5	17	PHOTOMETRIC_LOGL
FIELD	7804:5	7804:5	18	PHOTOMETRIC_LOGL
LEAF_NODE	7804:5	7804:5	19	PHOTOMETRIC_LOGL
LEAF_NODE	7804:22	7804:22	17	:
FIELD	7804:24	7804:24	17	PHOTOMETRIC_LOGLUV
LEAF_NODE	7804:24	7804:24	18	PHOTOMETRIC_LOGLUV
LEAF_NODE	7804:42	7804:42	15	)
LEAF_NODE	7804:43	7804:43	13	;
LEAF_NODE	7805:8	7805:8	11	}
SELECTION	7806:6	7807:8	9	
KEYWORD	7806:6	7806:6	10	else
LEAF_NODE	7806:6	7806:6	11	else
STATEMENTS	7807:8	7807:8	10	
EXPR_STATEMENT	7807:8	7807:66	11	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , image -> photometric ) ;
EXPR	7807:8	7807:8	12	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , image -> photometric )
FUNCTION_CALL	7807:8	7807:65	13	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , image -> photometric )
CALLEE	7807:8	7807:8	14	TIFFSetField
LEAF_NODE	7807:8	7807:8	15	TIFFSetField
LEAF_NODE	7807:20	7807:20	14	(
ARGUMENT	7807:21	7807:21	14	out
FIELD	7807:21	7807:21	15	out
LEAF_NODE	7807:21	7807:21	16	out
LEAF_NODE	7807:24	7807:24	14	,
ARGUMENT	7807:26	7807:26	14	TIFFTAG_PHOTOMETRIC
FIELD	7807:26	7807:26	15	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7807:26	7807:26	16	TIFFTAG_PHOTOMETRIC
LEAF_NODE	7807:45	7807:45	14	,
ARGUMENT	7807:47	7807:47	14	image -> photometric
FIELD	7807:47	7807:54	15	image -> photometric
LEAF_NODE	7807:47	7807:47	16	image
LEAF_NODE	7807:52	7807:52	16	->
LEAF_NODE	7807:54	7807:54	16	photometric
LEAF_NODE	7807:65	7807:65	14	)
LEAF_NODE	7807:66	7807:66	12	;
LEAF_NODE	7808:6	7808:6	8	}
LEAF_NODE	7809:4	7809:4	5	}
SELECTION	7811:2	7815:4	3	
KEYWORD	7811:2	7811:2	4	if
LEAF_NODE	7811:2	7811:2	5	if
LEAF_NODE	7811:5	7811:5	4	(
CONDITION	7811:6	7811:6	4	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) ) && ( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
EXPR	7811:6	7811:6	5	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) ) && ( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
AND	7811:6	7813:6	6	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) ) && ( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
EXPR	7811:6	7812:49	7	( ( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV ) )
LEAF_NODE	7811:6	7811:6	8	(
OR	7811:7	7812:7	8	( input_photometric == PHOTOMETRIC_LOGL ) || ( input_photometric == PHOTOMETRIC_LOGLUV )
EXPR	7811:7	7811:45	9	( input_photometric == PHOTOMETRIC_LOGL )
LEAF_NODE	7811:7	7811:7	10	(
FIELD	7811:8	7811:8	10	input_photometric
LEAF_NODE	7811:8	7811:8	11	input_photometric
EQ_OPERATOR	7811:26	7811:26	10	==
LEAF_NODE	7811:26	7811:26	11	==
FIELD	7811:29	7811:29	10	PHOTOMETRIC_LOGL
LEAF_NODE	7811:29	7811:29	11	PHOTOMETRIC_LOGL
LEAF_NODE	7811:45	7811:45	10	)
LEAF_NODE	7811:47	7811:47	9	||
EXPR	7812:7	7812:48	9	( input_photometric == PHOTOMETRIC_LOGLUV )
LEAF_NODE	7812:7	7812:7	10	(
FIELD	7812:8	7812:8	10	input_photometric
LEAF_NODE	7812:8	7812:8	11	input_photometric
EQ_OPERATOR	7812:26	7812:26	10	==
LEAF_NODE	7812:26	7812:26	11	==
FIELD	7812:30	7812:30	10	PHOTOMETRIC_LOGLUV
LEAF_NODE	7812:30	7812:30	11	PHOTOMETRIC_LOGLUV
LEAF_NODE	7812:48	7812:48	10	)
LEAF_NODE	7812:49	7812:49	8	)
LEAF_NODE	7812:51	7812:51	7	&&
EXPR	7813:6	7814:44	7	( ( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 ) )
LEAF_NODE	7813:6	7813:6	8	(
AND	7813:7	7814:7	8	( compression != COMPRESSION_SGILOG ) && ( compression != COMPRESSION_SGILOG24 )
EXPR	7813:7	7813:41	9	( compression != COMPRESSION_SGILOG )
LEAF_NODE	7813:7	7813:7	10	(
FIELD	7813:8	7813:8	10	compression
LEAF_NODE	7813:8	7813:8	11	compression
EQ_OPERATOR	7813:20	7813:20	10	!=
LEAF_NODE	7813:20	7813:20	11	!=
FIELD	7813:23	7813:23	10	COMPRESSION_SGILOG
LEAF_NODE	7813:23	7813:23	11	COMPRESSION_SGILOG
LEAF_NODE	7813:41	7813:41	10	)
LEAF_NODE	7813:43	7813:43	9	&&
EXPR	7814:7	7814:43	9	( compression != COMPRESSION_SGILOG24 )
LEAF_NODE	7814:7	7814:7	10	(
FIELD	7814:8	7814:8	10	compression
LEAF_NODE	7814:8	7814:8	11	compression
EQ_OPERATOR	7814:20	7814:20	10	!=
LEAF_NODE	7814:20	7814:20	11	!=
FIELD	7814:23	7814:23	10	COMPRESSION_SGILOG24
LEAF_NODE	7814:23	7814:23	11	COMPRESSION_SGILOG24
LEAF_NODE	7814:43	7814:43	10	)
LEAF_NODE	7814:44	7814:44	8	)
LEAF_NODE	7814:45	7814:45	4	)
STATEMENTS	7815:4	7819:4	4	
LEAF_NODE	7815:4	7815:4	5	{
STATEMENTS	7816:4	7818:4	5	
EXPR_STATEMENT	7816:4	7817:85	6	TIFFError ( "writeCroppedImage" , "LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression" ) ;
EXPR	7816:4	7816:4	7	TIFFError ( "writeCroppedImage" , "LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression" )
FUNCTION_CALL	7816:4	7817:84	8	TIFFError ( "writeCroppedImage" , "LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression" )
CALLEE	7816:4	7816:4	9	TIFFError
LEAF_NODE	7816:4	7816:4	10	TIFFError
LEAF_NODE	7816:13	7816:13	9	(
ARGUMENT	7816:14	7816:14	9	"writeCroppedImage"
FIELD	7816:14	7816:14	10	"writeCroppedImage"
LEAF_NODE	7816:14	7816:14	11	"writeCroppedImage"
LEAF_NODE	7816:33	7816:33	9	,
ARGUMENT	7817:14	7817:14	9	"LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression"
FIELD	7817:14	7817:14	10	"LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression"
LEAF_NODE	7817:14	7817:14	11	"LogL and LogLuv source data require SGI_LOG or SGI_LOG24 compression"
LEAF_NODE	7817:84	7817:84	9	)
LEAF_NODE	7817:85	7817:85	7	;
JUMP_STATEMENT	7818:4	7818:15	6	return ( - 1 ) ;
KEYWORD	7818:4	7818:4	7	return
LEAF_NODE	7818:4	7818:4	8	return
DESTINATION	7818:11	7818:11	7	( - 1 )
EXPR	7818:11	7818:14	8	( - 1 )
LEAF_NODE	7818:11	7818:11	9	(
UNARY_EXPR	7818:12	7818:13	9	- 1
UNARY_OPERATOR	7818:12	7818:12	10	-
LEAF_NODE	7818:12	7818:12	11	-
FIELD	7818:13	7818:13	10	1
LEAF_NODE	7818:13	7818:13	11	1
LEAF_NODE	7818:14	7818:14	9	)
LEAF_NODE	7818:15	7818:15	7	;
LEAF_NODE	7819:4	7819:4	5	}
SELECTION	7821:2	7822:4	3	
KEYWORD	7821:2	7821:2	4	if
LEAF_NODE	7821:2	7821:2	5	if
LEAF_NODE	7821:5	7821:5	4	(
CONDITION	7821:6	7821:6	4	fillorder != 0
EXPR	7821:6	7821:19	5	fillorder != 0
FIELD	7821:6	7821:6	6	fillorder
LEAF_NODE	7821:6	7821:6	7	fillorder
EQ_OPERATOR	7821:16	7821:16	6	!=
LEAF_NODE	7821:16	7821:16	7	!=
FIELD	7821:19	7821:19	6	0
LEAF_NODE	7821:19	7821:19	7	0
LEAF_NODE	7821:20	7821:20	4	)
STATEMENTS	7822:4	7822:4	4	
EXPR_STATEMENT	7822:4	7822:51	5	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder ) ;
EXPR	7822:4	7822:4	6	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
FUNCTION_CALL	7822:4	7822:50	7	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
CALLEE	7822:4	7822:4	8	TIFFSetField
LEAF_NODE	7822:4	7822:4	9	TIFFSetField
LEAF_NODE	7822:16	7822:16	8	(
ARGUMENT	7822:17	7822:17	8	out
FIELD	7822:17	7822:17	9	out
LEAF_NODE	7822:17	7822:17	10	out
LEAF_NODE	7822:20	7822:20	8	,
ARGUMENT	7822:22	7822:22	8	TIFFTAG_FILLORDER
FIELD	7822:22	7822:22	9	TIFFTAG_FILLORDER
LEAF_NODE	7822:22	7822:22	10	TIFFTAG_FILLORDER
LEAF_NODE	7822:39	7822:39	8	,
ARGUMENT	7822:41	7822:41	8	fillorder
FIELD	7822:41	7822:41	9	fillorder
LEAF_NODE	7822:41	7822:41	10	fillorder
LEAF_NODE	7822:50	7822:50	8	)
LEAF_NODE	7822:51	7822:51	6	;
SELECTION	7823:2	7824:4	3	
KEYWORD	7823:2	7823:2	4	else
LEAF_NODE	7823:2	7823:2	5	else
STATEMENTS	7824:4	7824:4	4	
EXPR_STATEMENT	7824:4	7824:45	5	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT ) ;
EXPR	7824:4	7824:4	6	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT )
FUNCTION_CALL	7824:4	7824:44	7	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT )
CALLEE	7824:4	7824:4	8	CopyTag
LEAF_NODE	7824:4	7824:4	9	CopyTag
LEAF_NODE	7824:11	7824:11	8	(
ARGUMENT	7824:12	7824:12	8	TIFFTAG_FILLORDER
FIELD	7824:12	7824:12	9	TIFFTAG_FILLORDER
LEAF_NODE	7824:12	7824:12	10	TIFFTAG_FILLORDER
LEAF_NODE	7824:29	7824:29	8	,
ARGUMENT	7824:31	7824:31	8	1
FIELD	7824:31	7824:31	9	1
LEAF_NODE	7824:31	7824:31	10	1
LEAF_NODE	7824:32	7824:32	8	,
ARGUMENT	7824:34	7824:34	8	TIFF_SHORT
FIELD	7824:34	7824:34	9	TIFF_SHORT
LEAF_NODE	7824:34	7824:34	10	TIFF_SHORT
LEAF_NODE	7824:44	7824:44	8	)
LEAF_NODE	7824:45	7824:45	6	;
EXPR_STATEMENT	7833:2	7833:60	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , image -> orientation ) ;
EXPR	7833:2	7833:2	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , image -> orientation )
FUNCTION_CALL	7833:2	7833:59	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , image -> orientation )
CALLEE	7833:2	7833:2	6	TIFFSetField
LEAF_NODE	7833:2	7833:2	7	TIFFSetField
LEAF_NODE	7833:14	7833:14	6	(
ARGUMENT	7833:15	7833:15	6	out
FIELD	7833:15	7833:15	7	out
LEAF_NODE	7833:15	7833:15	8	out
LEAF_NODE	7833:18	7833:18	6	,
ARGUMENT	7833:20	7833:20	6	TIFFTAG_ORIENTATION
FIELD	7833:20	7833:20	7	TIFFTAG_ORIENTATION
LEAF_NODE	7833:20	7833:20	8	TIFFTAG_ORIENTATION
LEAF_NODE	7833:39	7833:39	6	,
ARGUMENT	7833:41	7833:41	6	image -> orientation
FIELD	7833:41	7833:48	7	image -> orientation
LEAF_NODE	7833:41	7833:41	8	image
LEAF_NODE	7833:46	7833:46	8	->
LEAF_NODE	7833:48	7833:48	8	orientation
LEAF_NODE	7833:59	7833:59	6	)
LEAF_NODE	7833:60	7833:60	4	;
SELECTION	7840:2	7841:4	3	
KEYWORD	7840:2	7840:2	4	if
LEAF_NODE	7840:2	7840:2	5	if
LEAF_NODE	7840:5	7840:5	4	(
CONDITION	7840:6	7840:6	4	outtiled == - 1
EXPR	7840:6	7840:18	5	outtiled == - 1
FIELD	7840:6	7840:6	6	outtiled
LEAF_NODE	7840:6	7840:6	7	outtiled
EQ_OPERATOR	7840:15	7840:15	6	==
LEAF_NODE	7840:15	7840:15	7	==
UNARY_EXPR	7840:18	7840:19	6	- 1
UNARY_OPERATOR	7840:18	7840:18	7	-
LEAF_NODE	7840:18	7840:18	8	-
FIELD	7840:19	7840:19	7	1
LEAF_NODE	7840:19	7840:19	8	1
LEAF_NODE	7840:20	7840:20	4	)
STATEMENTS	7841:4	7841:4	4	
EXPR_STATEMENT	7841:4	7841:30	5	outtiled = TIFFIsTiled ( in ) ;
EXPR	7841:4	7841:4	6	outtiled = TIFFIsTiled ( in )
ASSIGN	7841:4	7841:15	7	outtiled = TIFFIsTiled ( in )
LVAL	7841:4	7841:4	8	outtiled
FIELD	7841:4	7841:4	9	outtiled
LEAF_NODE	7841:4	7841:4	10	outtiled
ASSIGN_OP	7841:13	7841:13	8	=
LEAF_NODE	7841:13	7841:13	9	=
RVAL	7841:15	7841:15	8	TIFFIsTiled ( in )
FUNCTION_CALL	7841:15	7841:29	9	TIFFIsTiled ( in )
CALLEE	7841:15	7841:15	10	TIFFIsTiled
LEAF_NODE	7841:15	7841:15	11	TIFFIsTiled
LEAF_NODE	7841:26	7841:26	10	(
ARGUMENT	7841:27	7841:27	10	in
FIELD	7841:27	7841:27	11	in
LEAF_NODE	7841:27	7841:27	12	in
LEAF_NODE	7841:29	7841:29	10	)
LEAF_NODE	7841:30	7841:30	6	;
SELECTION	7842:2	7842:16	3	
KEYWORD	7842:2	7842:2	4	if
LEAF_NODE	7842:2	7842:2	5	if
LEAF_NODE	7842:5	7842:5	4	(
CONDITION	7842:6	7842:6	4	outtiled
EXPR	7842:6	7842:6	5	outtiled
FIELD	7842:6	7842:6	6	outtiled
LEAF_NODE	7842:6	7842:6	7	outtiled
LEAF_NODE	7842:14	7842:14	4	)
STATEMENTS	7842:16	7858:4	4	
LEAF_NODE	7842:16	7842:16	5	{
STATEMENTS	7849:4	7857:4	5	
SELECTION	7849:4	7850:6	6	
KEYWORD	7849:4	7849:4	7	if
LEAF_NODE	7849:4	7849:4	8	if
LEAF_NODE	7849:7	7849:7	7	(
CONDITION	7849:8	7849:8	7	tilewidth == ( uint32 ) 0
EXPR	7849:8	7849:30	8	tilewidth == ( uint32 ) 0
FIELD	7849:8	7849:8	9	tilewidth
LEAF_NODE	7849:8	7849:8	10	tilewidth
EQ_OPERATOR	7849:18	7849:18	9	==
LEAF_NODE	7849:18	7849:18	10	==
LEAF_NODE	7849:21	7849:21	9	(
TYPE_NAME	7849:22	7849:22	9	uint32
LEAF_NODE	7849:22	7849:22	10	uint32
LEAF_NODE	7849:28	7849:28	9	)
FIELD	7849:30	7849:30	9	0
LEAF_NODE	7849:30	7849:30	10	0
LEAF_NODE	7849:31	7849:31	7	)
STATEMENTS	7850:6	7850:6	7	
EXPR_STATEMENT	7850:6	7850:53	8	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth ) ;
EXPR	7850:6	7850:6	9	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth )
FUNCTION_CALL	7850:6	7850:52	10	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth )
CALLEE	7850:6	7850:6	11	TIFFGetField
LEAF_NODE	7850:6	7850:6	12	TIFFGetField
LEAF_NODE	7850:18	7850:18	11	(
ARGUMENT	7850:19	7850:19	11	in
FIELD	7850:19	7850:19	12	in
LEAF_NODE	7850:19	7850:19	13	in
LEAF_NODE	7850:21	7850:21	11	,
ARGUMENT	7850:23	7850:23	11	TIFFTAG_TILEWIDTH
FIELD	7850:23	7850:23	12	TIFFTAG_TILEWIDTH
LEAF_NODE	7850:23	7850:23	13	TIFFTAG_TILEWIDTH
LEAF_NODE	7850:40	7850:40	11	,
ARGUMENT	7850:42	7850:42	11	& tilewidth
UNARY_EXPR	7850:42	7850:43	12	& tilewidth
UNARY_OPERATOR	7850:42	7850:42	13	&
LEAF_NODE	7850:42	7850:42	14	&
FIELD	7850:43	7850:43	13	tilewidth
LEAF_NODE	7850:43	7850:43	14	tilewidth
LEAF_NODE	7850:52	7850:52	11	)
LEAF_NODE	7850:53	7850:53	9	;
SELECTION	7851:4	7852:6	6	
KEYWORD	7851:4	7851:4	7	if
LEAF_NODE	7851:4	7851:4	8	if
LEAF_NODE	7851:7	7851:7	7	(
CONDITION	7851:8	7851:8	7	tilelength == ( uint32 ) 0
EXPR	7851:8	7851:31	8	tilelength == ( uint32 ) 0
FIELD	7851:8	7851:8	9	tilelength
LEAF_NODE	7851:8	7851:8	10	tilelength
EQ_OPERATOR	7851:19	7851:19	9	==
LEAF_NODE	7851:19	7851:19	10	==
LEAF_NODE	7851:22	7851:22	9	(
TYPE_NAME	7851:23	7851:23	9	uint32
LEAF_NODE	7851:23	7851:23	10	uint32
LEAF_NODE	7851:29	7851:29	9	)
FIELD	7851:31	7851:31	9	0
LEAF_NODE	7851:31	7851:31	10	0
LEAF_NODE	7851:32	7851:32	7	)
STATEMENTS	7852:6	7852:6	7	
EXPR_STATEMENT	7852:6	7852:55	8	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength ) ;
EXPR	7852:6	7852:6	9	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength )
FUNCTION_CALL	7852:6	7852:54	10	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength )
CALLEE	7852:6	7852:6	11	TIFFGetField
LEAF_NODE	7852:6	7852:6	12	TIFFGetField
LEAF_NODE	7852:18	7852:18	11	(
ARGUMENT	7852:19	7852:19	11	in
FIELD	7852:19	7852:19	12	in
LEAF_NODE	7852:19	7852:19	13	in
LEAF_NODE	7852:21	7852:21	11	,
ARGUMENT	7852:23	7852:23	11	TIFFTAG_TILELENGTH
FIELD	7852:23	7852:23	12	TIFFTAG_TILELENGTH
LEAF_NODE	7852:23	7852:23	13	TIFFTAG_TILELENGTH
LEAF_NODE	7852:41	7852:41	11	,
ARGUMENT	7852:43	7852:43	11	& tilelength
UNARY_EXPR	7852:43	7852:44	12	& tilelength
UNARY_OPERATOR	7852:43	7852:43	13	&
LEAF_NODE	7852:43	7852:43	14	&
FIELD	7852:44	7852:44	13	tilelength
LEAF_NODE	7852:44	7852:44	14	tilelength
LEAF_NODE	7852:54	7852:54	11	)
LEAF_NODE	7852:55	7852:55	9	;
SELECTION	7854:4	7855:6	6	
KEYWORD	7854:4	7854:4	7	if
LEAF_NODE	7854:4	7854:4	8	if
LEAF_NODE	7854:7	7854:7	7	(
CONDITION	7854:8	7854:8	7	tilewidth == 0 || tilelength == 0
EXPR	7854:8	7854:8	8	tilewidth == 0 || tilelength == 0
OR	7854:8	7854:26	9	tilewidth == 0 || tilelength == 0
EXPR	7854:8	7854:21	10	tilewidth == 0
FIELD	7854:8	7854:8	11	tilewidth
LEAF_NODE	7854:8	7854:8	12	tilewidth
EQ_OPERATOR	7854:18	7854:18	11	==
LEAF_NODE	7854:18	7854:18	12	==
FIELD	7854:21	7854:21	11	0
LEAF_NODE	7854:21	7854:21	12	0
LEAF_NODE	7854:23	7854:23	10	||
EXPR	7854:26	7854:40	10	tilelength == 0
FIELD	7854:26	7854:26	11	tilelength
LEAF_NODE	7854:26	7854:26	12	tilelength
EQ_OPERATOR	7854:37	7854:37	11	==
LEAF_NODE	7854:37	7854:37	12	==
FIELD	7854:40	7854:40	11	0
LEAF_NODE	7854:40	7854:40	12	0
LEAF_NODE	7854:41	7854:41	7	)
STATEMENTS	7855:6	7855:6	7	
EXPR_STATEMENT	7855:6	7855:55	8	TIFFDefaultTileSize ( out , & tilewidth , & tilelength ) ;
EXPR	7855:6	7855:6	9	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
FUNCTION_CALL	7855:6	7855:54	10	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
CALLEE	7855:6	7855:6	11	TIFFDefaultTileSize
LEAF_NODE	7855:6	7855:6	12	TIFFDefaultTileSize
LEAF_NODE	7855:25	7855:25	11	(
ARGUMENT	7855:26	7855:26	11	out
FIELD	7855:26	7855:26	12	out
LEAF_NODE	7855:26	7855:26	13	out
LEAF_NODE	7855:29	7855:29	11	,
ARGUMENT	7855:31	7855:31	11	& tilewidth
UNARY_EXPR	7855:31	7855:32	12	& tilewidth
UNARY_OPERATOR	7855:31	7855:31	13	&
LEAF_NODE	7855:31	7855:31	14	&
FIELD	7855:32	7855:32	13	tilewidth
LEAF_NODE	7855:32	7855:32	14	tilewidth
LEAF_NODE	7855:41	7855:41	11	,
ARGUMENT	7855:43	7855:43	11	& tilelength
UNARY_EXPR	7855:43	7855:44	12	& tilelength
UNARY_OPERATOR	7855:43	7855:43	13	&
LEAF_NODE	7855:43	7855:43	14	&
FIELD	7855:44	7855:44	13	tilelength
LEAF_NODE	7855:44	7855:44	14	tilelength
LEAF_NODE	7855:54	7855:54	11	)
LEAF_NODE	7855:55	7855:55	9	;
EXPR_STATEMENT	7856:4	7856:51	6	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth ) ;
EXPR	7856:4	7856:4	7	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth )
FUNCTION_CALL	7856:4	7856:50	8	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth )
CALLEE	7856:4	7856:4	9	TIFFSetField
LEAF_NODE	7856:4	7856:4	10	TIFFSetField
LEAF_NODE	7856:16	7856:16	9	(
ARGUMENT	7856:17	7856:17	9	out
FIELD	7856:17	7856:17	10	out
LEAF_NODE	7856:17	7856:17	11	out
LEAF_NODE	7856:20	7856:20	9	,
ARGUMENT	7856:22	7856:22	9	TIFFTAG_TILEWIDTH
FIELD	7856:22	7856:22	10	TIFFTAG_TILEWIDTH
LEAF_NODE	7856:22	7856:22	11	TIFFTAG_TILEWIDTH
LEAF_NODE	7856:39	7856:39	9	,
ARGUMENT	7856:41	7856:41	9	tilewidth
FIELD	7856:41	7856:41	10	tilewidth
LEAF_NODE	7856:41	7856:41	11	tilewidth
LEAF_NODE	7856:50	7856:50	9	)
LEAF_NODE	7856:51	7856:51	7	;
EXPR_STATEMENT	7857:4	7857:53	6	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength ) ;
EXPR	7857:4	7857:4	7	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength )
FUNCTION_CALL	7857:4	7857:52	8	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength )
CALLEE	7857:4	7857:4	9	TIFFSetField
LEAF_NODE	7857:4	7857:4	10	TIFFSetField
LEAF_NODE	7857:16	7857:16	9	(
ARGUMENT	7857:17	7857:17	9	out
FIELD	7857:17	7857:17	10	out
LEAF_NODE	7857:17	7857:17	11	out
LEAF_NODE	7857:20	7857:20	9	,
ARGUMENT	7857:22	7857:22	9	TIFFTAG_TILELENGTH
FIELD	7857:22	7857:22	10	TIFFTAG_TILELENGTH
LEAF_NODE	7857:22	7857:22	11	TIFFTAG_TILELENGTH
LEAF_NODE	7857:40	7857:40	9	,
ARGUMENT	7857:42	7857:42	9	tilelength
FIELD	7857:42	7857:42	10	tilelength
LEAF_NODE	7857:42	7857:42	11	tilelength
LEAF_NODE	7857:52	7857:52	9	)
LEAF_NODE	7857:53	7857:53	7	;
LEAF_NODE	7858:4	7858:4	5	}
SELECTION	7858:6	7858:11	3	
KEYWORD	7858:6	7858:6	4	else
LEAF_NODE	7858:6	7858:6	5	else
STATEMENTS	7858:11	7878:1	4	
LEAF_NODE	7858:11	7858:11	5	{
STATEMENTS	7864:1	7877:1	5	
SELECTION	7864:1	7865:10	6	
KEYWORD	7864:1	7864:1	7	if
LEAF_NODE	7864:1	7864:1	8	if
LEAF_NODE	7864:4	7864:4	7	(
CONDITION	7864:5	7864:5	7	rowsperstrip == ( uint32 ) 0
EXPR	7864:5	7864:30	8	rowsperstrip == ( uint32 ) 0
FIELD	7864:5	7864:5	9	rowsperstrip
LEAF_NODE	7864:5	7864:5	10	rowsperstrip
EQ_OPERATOR	7864:18	7864:18	9	==
LEAF_NODE	7864:18	7864:18	10	==
LEAF_NODE	7864:21	7864:21	9	(
TYPE_NAME	7864:22	7864:22	9	uint32
LEAF_NODE	7864:22	7864:22	10	uint32
LEAF_NODE	7864:28	7864:28	9	)
FIELD	7864:30	7864:30	9	0
LEAF_NODE	7864:30	7864:30	10	0
LEAF_NODE	7864:31	7864:31	7	)
STATEMENTS	7865:10	7873:3	7	
LEAF_NODE	7865:10	7865:10	8	{
STATEMENTS	7866:3	7868:10	8	
SELECTION	7866:3	7867:5	9	
KEYWORD	7866:3	7866:3	10	if
LEAF_NODE	7866:3	7866:3	11	if
LEAF_NODE	7866:6	7866:6	10	(
CONDITION	7866:7	7866:7	10	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
EXPR	7866:7	7866:7	11	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_EXPR	7866:7	7866:8	12	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_OPERATOR	7866:7	7866:7	13	!
LEAF_NODE	7866:7	7866:7	14	!
FUNCTION_CALL	7866:8	7866:60	13	TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	7866:8	7866:8	14	TIFFGetField
LEAF_NODE	7866:8	7866:8	15	TIFFGetField
LEAF_NODE	7866:20	7866:20	14	(
ARGUMENT	7866:21	7866:21	14	in
FIELD	7866:21	7866:21	15	in
LEAF_NODE	7866:21	7866:21	16	in
LEAF_NODE	7866:23	7866:23	14	,
ARGUMENT	7866:25	7866:25	14	TIFFTAG_ROWSPERSTRIP
FIELD	7866:25	7866:25	15	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7866:25	7866:25	16	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7866:45	7866:45	14	,
ARGUMENT	7866:47	7866:47	14	& rowsperstrip
UNARY_EXPR	7866:47	7866:48	15	& rowsperstrip
UNARY_OPERATOR	7866:47	7866:47	16	&
LEAF_NODE	7866:47	7866:47	17	&
FIELD	7866:48	7866:48	16	rowsperstrip
LEAF_NODE	7866:48	7866:48	17	rowsperstrip
LEAF_NODE	7866:60	7866:60	14	)
LEAF_NODE	7866:61	7866:61	10	)
STATEMENTS	7867:5	7867:5	10	
EXPR_STATEMENT	7867:5	7867:59	11	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ;
EXPR	7867:5	7867:5	12	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	7867:5	7867:20	13	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	7867:5	7867:5	14	rowsperstrip
FIELD	7867:5	7867:5	15	rowsperstrip
LEAF_NODE	7867:5	7867:5	16	rowsperstrip
ASSIGN_OP	7867:18	7867:18	14	=
LEAF_NODE	7867:18	7867:18	15	=
RVAL	7867:20	7867:20	14	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	7867:20	7867:58	15	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	7867:20	7867:20	16	TIFFDefaultStripSize
LEAF_NODE	7867:20	7867:20	17	TIFFDefaultStripSize
LEAF_NODE	7867:40	7867:40	16	(
ARGUMENT	7867:41	7867:41	16	out
FIELD	7867:41	7867:41	17	out
LEAF_NODE	7867:41	7867:41	18	out
LEAF_NODE	7867:44	7867:44	16	,
ARGUMENT	7867:46	7867:46	16	rowsperstrip
FIELD	7867:46	7867:46	17	rowsperstrip
LEAF_NODE	7867:46	7867:46	18	rowsperstrip
LEAF_NODE	7867:58	7867:58	16	)
LEAF_NODE	7867:59	7867:59	12	;
SELECTION	7868:10	7869:12	9	
KEYWORD	7868:10	7868:10	10	if
LEAF_NODE	7868:10	7868:10	11	if
LEAF_NODE	7868:13	7868:13	10	(
CONDITION	7868:14	7868:14	10	compression != COMPRESSION_JPEG
EXPR	7868:14	7868:29	11	compression != COMPRESSION_JPEG
FIELD	7868:14	7868:14	12	compression
LEAF_NODE	7868:14	7868:14	13	compression
EQ_OPERATOR	7868:26	7868:26	12	!=
LEAF_NODE	7868:26	7868:26	13	!=
FIELD	7868:29	7868:29	12	COMPRESSION_JPEG
LEAF_NODE	7868:29	7868:29	13	COMPRESSION_JPEG
LEAF_NODE	7868:45	7868:45	10	)
STATEMENTS	7869:12	7872:5	10	
LEAF_NODE	7869:12	7869:12	11	{
STATEMENTS	7870:7	7870:7	11	
SELECTION	7870:7	7871:7	12	
KEYWORD	7870:7	7870:7	13	if
LEAF_NODE	7870:7	7870:7	14	if
LEAF_NODE	7870:10	7870:10	13	(
CONDITION	7870:11	7870:11	13	rowsperstrip > length
EXPR	7870:11	7870:26	14	rowsperstrip > length
FIELD	7870:11	7870:11	15	rowsperstrip
LEAF_NODE	7870:11	7870:11	16	rowsperstrip
REL_OPERATOR	7870:24	7870:24	15	>
LEAF_NODE	7870:24	7870:24	16	>
FIELD	7870:26	7870:26	15	length
LEAF_NODE	7870:26	7870:26	16	length
LEAF_NODE	7870:32	7870:32	13	)
STATEMENTS	7871:7	7871:7	13	
EXPR_STATEMENT	7871:7	7871:28	14	rowsperstrip = length ;
EXPR	7871:7	7871:7	15	rowsperstrip = length
ASSIGN	7871:7	7871:22	16	rowsperstrip = length
LVAL	7871:7	7871:7	17	rowsperstrip
FIELD	7871:7	7871:7	18	rowsperstrip
LEAF_NODE	7871:7	7871:7	19	rowsperstrip
ASSIGN_OP	7871:20	7871:20	17	=
LEAF_NODE	7871:20	7871:20	18	=
RVAL	7871:22	7871:22	17	length
FIELD	7871:22	7871:22	18	length
LEAF_NODE	7871:22	7871:22	19	length
LEAF_NODE	7871:28	7871:28	15	;
LEAF_NODE	7872:5	7872:5	11	}
LEAF_NODE	7873:3	7873:3	8	}
SELECTION	7874:1	7875:10	6	
KEYWORD	7874:1	7874:1	7	else
LEAF_NODE	7874:1	7874:1	8	else
STATEMENTS	7875:10	7875:10	7	
SELECTION	7875:10	7876:5	8	
KEYWORD	7875:10	7875:10	9	if
LEAF_NODE	7875:10	7875:10	10	if
LEAF_NODE	7875:13	7875:13	9	(
CONDITION	7875:14	7875:14	9	rowsperstrip == ( uint32 ) - 1
EXPR	7875:14	7875:39	10	rowsperstrip == ( uint32 ) - 1
FIELD	7875:14	7875:14	11	rowsperstrip
LEAF_NODE	7875:14	7875:14	12	rowsperstrip
EQ_OPERATOR	7875:27	7875:27	11	==
LEAF_NODE	7875:27	7875:27	12	==
LEAF_NODE	7875:30	7875:30	11	(
TYPE_NAME	7875:31	7875:31	11	uint32
LEAF_NODE	7875:31	7875:31	12	uint32
LEAF_NODE	7875:37	7875:37	11	)
UNARY_EXPR	7875:39	7875:40	11	- 1
UNARY_OPERATOR	7875:39	7875:39	12	-
LEAF_NODE	7875:39	7875:39	13	-
FIELD	7875:40	7875:40	12	1
LEAF_NODE	7875:40	7875:40	13	1
LEAF_NODE	7875:41	7875:41	9	)
STATEMENTS	7876:5	7876:5	9	
EXPR_STATEMENT	7876:5	7876:26	10	rowsperstrip = length ;
EXPR	7876:5	7876:5	11	rowsperstrip = length
ASSIGN	7876:5	7876:20	12	rowsperstrip = length
LVAL	7876:5	7876:5	13	rowsperstrip
FIELD	7876:5	7876:5	14	rowsperstrip
LEAF_NODE	7876:5	7876:5	15	rowsperstrip
ASSIGN_OP	7876:18	7876:18	13	=
LEAF_NODE	7876:18	7876:18	14	=
RVAL	7876:20	7876:20	13	length
FIELD	7876:20	7876:20	14	length
LEAF_NODE	7876:20	7876:20	15	length
LEAF_NODE	7876:26	7876:26	11	;
EXPR_STATEMENT	7877:1	7877:54	6	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	7877:1	7877:1	7	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	7877:1	7877:53	8	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	7877:1	7877:1	9	TIFFSetField
LEAF_NODE	7877:1	7877:1	10	TIFFSetField
LEAF_NODE	7877:13	7877:13	9	(
ARGUMENT	7877:14	7877:14	9	out
FIELD	7877:14	7877:14	10	out
LEAF_NODE	7877:14	7877:14	11	out
LEAF_NODE	7877:17	7877:17	9	,
ARGUMENT	7877:19	7877:19	9	TIFFTAG_ROWSPERSTRIP
FIELD	7877:19	7877:19	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7877:19	7877:19	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	7877:39	7877:39	9	,
ARGUMENT	7877:41	7877:41	9	rowsperstrip
FIELD	7877:41	7877:41	10	rowsperstrip
LEAF_NODE	7877:41	7877:41	11	rowsperstrip
LEAF_NODE	7877:53	7877:53	9	)
LEAF_NODE	7877:54	7877:54	7	;
LEAF_NODE	7878:1	7878:1	5	}
EXPR_STATEMENT	7880:2	7880:64	3	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & input_planar ) ;
EXPR	7880:2	7880:2	4	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & input_planar )
FUNCTION_CALL	7880:2	7880:63	5	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & input_planar )
CALLEE	7880:2	7880:2	6	TIFFGetFieldDefaulted
LEAF_NODE	7880:2	7880:2	7	TIFFGetFieldDefaulted
LEAF_NODE	7880:23	7880:23	6	(
ARGUMENT	7880:24	7880:24	6	in
FIELD	7880:24	7880:24	7	in
LEAF_NODE	7880:24	7880:24	8	in
LEAF_NODE	7880:26	7880:26	6	,
ARGUMENT	7880:28	7880:28	6	TIFFTAG_PLANARCONFIG
FIELD	7880:28	7880:28	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	7880:28	7880:28	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	7880:48	7880:48	6	,
ARGUMENT	7880:50	7880:50	6	& input_planar
UNARY_EXPR	7880:50	7880:51	7	& input_planar
UNARY_OPERATOR	7880:50	7880:50	8	&
LEAF_NODE	7880:50	7880:50	9	&
FIELD	7880:51	7880:51	8	input_planar
LEAF_NODE	7880:51	7880:51	9	input_planar
LEAF_NODE	7880:63	7880:63	6	)
LEAF_NODE	7880:64	7880:64	4	;
SELECTION	7881:2	7882:4	3	
KEYWORD	7881:2	7881:2	4	if
LEAF_NODE	7881:2	7881:2	5	if
LEAF_NODE	7881:5	7881:5	4	(
CONDITION	7881:6	7881:6	4	config != ( uint16 ) - 1
EXPR	7881:6	7881:25	5	config != ( uint16 ) - 1
FIELD	7881:6	7881:6	6	config
LEAF_NODE	7881:6	7881:6	7	config
EQ_OPERATOR	7881:13	7881:13	6	!=
LEAF_NODE	7881:13	7881:13	7	!=
LEAF_NODE	7881:16	7881:16	6	(
TYPE_NAME	7881:17	7881:17	6	uint16
LEAF_NODE	7881:17	7881:17	7	uint16
LEAF_NODE	7881:23	7881:23	6	)
UNARY_EXPR	7881:25	7881:26	6	- 1
UNARY_OPERATOR	7881:25	7881:25	7	-
LEAF_NODE	7881:25	7881:25	8	-
FIELD	7881:26	7881:26	7	1
LEAF_NODE	7881:26	7881:26	8	1
LEAF_NODE	7881:27	7881:27	4	)
STATEMENTS	7882:4	7882:4	4	
EXPR_STATEMENT	7882:4	7882:51	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config ) ;
EXPR	7882:4	7882:4	6	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	7882:4	7882:50	7	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
CALLEE	7882:4	7882:4	8	TIFFSetField
LEAF_NODE	7882:4	7882:4	9	TIFFSetField
LEAF_NODE	7882:16	7882:16	8	(
ARGUMENT	7882:17	7882:17	8	out
FIELD	7882:17	7882:17	9	out
LEAF_NODE	7882:17	7882:17	10	out
LEAF_NODE	7882:20	7882:20	8	,
ARGUMENT	7882:22	7882:22	8	TIFFTAG_PLANARCONFIG
FIELD	7882:22	7882:22	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	7882:22	7882:22	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	7882:42	7882:42	8	,
ARGUMENT	7882:44	7882:44	8	config
FIELD	7882:44	7882:44	9	config
LEAF_NODE	7882:44	7882:44	10	config
LEAF_NODE	7882:50	7882:50	8	)
LEAF_NODE	7882:51	7882:51	6	;
SELECTION	7883:2	7884:4	3	
KEYWORD	7883:2	7883:2	4	else
LEAF_NODE	7883:2	7883:2	5	else
STATEMENTS	7884:4	7884:4	4	
EXPR_STATEMENT	7884:4	7884:43	5	CopyField ( TIFFTAG_PLANARCONFIG , config ) ;
EXPR	7884:4	7884:4	6	CopyField ( TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	7884:4	7884:42	7	CopyField ( TIFFTAG_PLANARCONFIG , config )
CALLEE	7884:4	7884:4	8	CopyField
LEAF_NODE	7884:4	7884:4	9	CopyField
LEAF_NODE	7884:13	7884:13	8	(
ARGUMENT	7884:14	7884:14	8	TIFFTAG_PLANARCONFIG
FIELD	7884:14	7884:14	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	7884:14	7884:14	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	7884:34	7884:34	8	,
ARGUMENT	7884:36	7884:36	8	config
FIELD	7884:36	7884:36	9	config
LEAF_NODE	7884:36	7884:36	10	config
LEAF_NODE	7884:42	7884:42	8	)
LEAF_NODE	7884:43	7884:43	6	;
SELECTION	7885:2	7886:4	3	
KEYWORD	7885:2	7885:2	4	if
LEAF_NODE	7885:2	7885:2	5	if
LEAF_NODE	7885:5	7885:5	4	(
CONDITION	7885:6	7885:6	4	spp <= 4
EXPR	7885:6	7885:13	5	spp <= 4
FIELD	7885:6	7885:6	6	spp
LEAF_NODE	7885:6	7885:6	7	spp
REL_OPERATOR	7885:10	7885:10	6	<=
LEAF_NODE	7885:10	7885:10	7	<=
FIELD	7885:13	7885:13	6	4
LEAF_NODE	7885:13	7885:13	7	4
LEAF_NODE	7885:14	7885:14	4	)
STATEMENTS	7886:4	7886:4	4	
EXPR_STATEMENT	7886:4	7886:52	5	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT ) ;
EXPR	7886:4	7886:4	6	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT )
FUNCTION_CALL	7886:4	7886:51	7	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT )
CALLEE	7886:4	7886:4	8	CopyTag
LEAF_NODE	7886:4	7886:4	9	CopyTag
LEAF_NODE	7886:11	7886:11	8	(
ARGUMENT	7886:12	7886:12	8	TIFFTAG_TRANSFERFUNCTION
FIELD	7886:12	7886:12	9	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	7886:12	7886:12	10	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	7886:36	7886:36	8	,
ARGUMENT	7886:38	7886:38	8	4
FIELD	7886:38	7886:38	9	4
LEAF_NODE	7886:38	7886:38	10	4
LEAF_NODE	7886:39	7886:39	8	,
ARGUMENT	7886:41	7886:41	8	TIFF_SHORT
FIELD	7886:41	7886:41	9	TIFF_SHORT
LEAF_NODE	7886:41	7886:41	10	TIFF_SHORT
LEAF_NODE	7886:51	7886:51	8	)
LEAF_NODE	7886:52	7886:52	6	;
EXPR_STATEMENT	7887:2	7887:42	3	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT ) ;
EXPR	7887:2	7887:2	4	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT )
FUNCTION_CALL	7887:2	7887:41	5	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT )
CALLEE	7887:2	7887:2	6	CopyTag
LEAF_NODE	7887:2	7887:2	7	CopyTag
LEAF_NODE	7887:9	7887:9	6	(
ARGUMENT	7887:10	7887:10	6	TIFFTAG_COLORMAP
FIELD	7887:10	7887:10	7	TIFFTAG_COLORMAP
LEAF_NODE	7887:10	7887:10	8	TIFFTAG_COLORMAP
LEAF_NODE	7887:26	7887:26	6	,
ARGUMENT	7887:28	7887:28	6	4
FIELD	7887:28	7887:28	7	4
LEAF_NODE	7887:28	7887:28	8	4
LEAF_NODE	7887:29	7887:29	6	,
ARGUMENT	7887:31	7887:31	6	TIFF_SHORT
FIELD	7887:31	7887:31	7	TIFF_SHORT
LEAF_NODE	7887:31	7887:31	8	TIFF_SHORT
LEAF_NODE	7887:41	7887:41	6	)
LEAF_NODE	7887:42	7887:42	4	;
SELECTION	7890:2	7890:23	3	
KEYWORD	7890:2	7890:2	4	switch
LEAF_NODE	7890:2	7890:2	5	switch
LEAF_NODE	7890:9	7890:9	4	(
CONDITION	7890:10	7890:10	4	compression
EXPR	7890:10	7890:10	5	compression
FIELD	7890:10	7890:10	6	compression
LEAF_NODE	7890:10	7890:10	7	compression
LEAF_NODE	7890:21	7890:21	4	)
STATEMENTS	7890:23	7938:3	4	
LEAF_NODE	7890:23	7890:23	5	{
STATEMENTS	7891:4	7937:13	5	
LABEL	7891:4	7891:25	6	case COMPRESSION_JPEG :
LEAF_NODE	7891:4	7891:4	7	case
LEAF_NODE	7891:9	7891:9	7	COMPRESSION_JPEG
LEAF_NODE	7891:25	7891:25	7	:
SELECTION	7892:9	7893:4	6	
KEYWORD	7892:9	7892:9	7	if
LEAF_NODE	7892:9	7892:9	8	if
LEAF_NODE	7892:12	7892:12	7	(
CONDITION	7892:13	7892:13	7	( ( bps % 8 ) == 0 ) || ( ( bps % 12 ) == 0 )
EXPR	7892:13	7892:13	8	( ( bps % 8 ) == 0 ) || ( ( bps % 12 ) == 0 )
OR	7892:13	7892:33	9	( ( bps % 8 ) == 0 ) || ( ( bps % 12 ) == 0 )
EXPR	7892:13	7892:28	10	( ( bps % 8 ) == 0 )
LEAF_NODE	7892:13	7892:13	11	(
LEAF_NODE	7892:14	7892:14	11	(
FIELD	7892:15	7892:15	11	bps
LEAF_NODE	7892:15	7892:15	12	bps
LEAF_NODE	7892:19	7892:19	11	%
FIELD	7892:21	7892:21	11	8
LEAF_NODE	7892:21	7892:21	12	8
LEAF_NODE	7892:22	7892:22	11	)
EQ_OPERATOR	7892:24	7892:24	11	==
LEAF_NODE	7892:24	7892:24	12	==
FIELD	7892:27	7892:27	11	0
LEAF_NODE	7892:27	7892:27	12	0
LEAF_NODE	7892:28	7892:28	11	)
LEAF_NODE	7892:30	7892:30	10	||
EXPR	7892:33	7892:49	10	( ( bps % 12 ) == 0 )
LEAF_NODE	7892:33	7892:33	11	(
LEAF_NODE	7892:34	7892:34	11	(
FIELD	7892:35	7892:35	11	bps
LEAF_NODE	7892:35	7892:35	12	bps
LEAF_NODE	7892:39	7892:39	11	%
FIELD	7892:41	7892:41	11	12
LEAF_NODE	7892:41	7892:41	12	12
LEAF_NODE	7892:43	7892:43	11	)
EQ_OPERATOR	7892:45	7892:45	11	==
LEAF_NODE	7892:45	7892:45	12	==
FIELD	7892:48	7892:48	11	0
LEAF_NODE	7892:48	7892:48	12	0
LEAF_NODE	7892:49	7892:49	11	)
LEAF_NODE	7892:50	7892:50	7	)
STATEMENTS	7893:4	7896:11	7	
LEAF_NODE	7893:4	7893:4	8	{
STATEMENTS	7894:11	7895:4	8	
EXPR_STATEMENT	7894:11	7894:58	9	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ;
EXPR	7894:11	7894:11	10	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
FUNCTION_CALL	7894:11	7894:57	11	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
CALLEE	7894:11	7894:11	12	TIFFSetField
LEAF_NODE	7894:11	7894:11	13	TIFFSetField
LEAF_NODE	7894:23	7894:23	12	(
ARGUMENT	7894:24	7894:24	12	out
FIELD	7894:24	7894:24	13	out
LEAF_NODE	7894:24	7894:24	14	out
LEAF_NODE	7894:27	7894:27	12	,
ARGUMENT	7894:29	7894:29	12	TIFFTAG_JPEGQUALITY
FIELD	7894:29	7894:29	13	TIFFTAG_JPEGQUALITY
LEAF_NODE	7894:29	7894:29	14	TIFFTAG_JPEGQUALITY
LEAF_NODE	7894:48	7894:48	12	,
ARGUMENT	7894:50	7894:50	12	quality
FIELD	7894:50	7894:50	13	quality
LEAF_NODE	7894:50	7894:50	14	quality
LEAF_NODE	7894:57	7894:57	12	)
LEAF_NODE	7894:58	7894:58	10	;
EXPR_STATEMENT	7895:4	7895:63	9	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	7895:4	7895:4	10	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	7895:4	7895:62	11	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	7895:4	7895:4	12	TIFFSetField
LEAF_NODE	7895:4	7895:4	13	TIFFSetField
LEAF_NODE	7895:16	7895:16	12	(
ARGUMENT	7895:17	7895:17	12	out
FIELD	7895:17	7895:17	13	out
LEAF_NODE	7895:17	7895:17	14	out
LEAF_NODE	7895:20	7895:20	12	,
ARGUMENT	7895:22	7895:22	12	TIFFTAG_JPEGCOLORMODE
FIELD	7895:22	7895:22	13	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	7895:22	7895:22	14	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	7895:43	7895:43	12	,
ARGUMENT	7895:45	7895:45	12	JPEGCOLORMODE_RGB
FIELD	7895:45	7895:45	13	JPEGCOLORMODE_RGB
LEAF_NODE	7895:45	7895:45	14	JPEGCOLORMODE_RGB
LEAF_NODE	7895:62	7895:62	12	)
LEAF_NODE	7895:63	7895:63	10	;
LEAF_NODE	7896:11	7896:11	8	}
SELECTION	7897:9	7898:11	6	
KEYWORD	7897:9	7897:9	7	else
LEAF_NODE	7897:9	7897:9	8	else
STATEMENTS	7898:11	7902:11	7	
LEAF_NODE	7898:11	7898:11	8	{
STATEMENTS	7899:4	7901:11	8	
EXPR_STATEMENT	7899:4	7900:73	9	TIFFError ( "writeCroppedImage" , "JPEG compression requires 8 or 12 bits per sample" ) ;
EXPR	7899:4	7899:4	10	TIFFError ( "writeCroppedImage" , "JPEG compression requires 8 or 12 bits per sample" )
FUNCTION_CALL	7899:4	7900:72	11	TIFFError ( "writeCroppedImage" , "JPEG compression requires 8 or 12 bits per sample" )
CALLEE	7899:4	7899:4	12	TIFFError
LEAF_NODE	7899:4	7899:4	13	TIFFError
LEAF_NODE	7899:13	7899:13	12	(
ARGUMENT	7899:14	7899:14	12	"writeCroppedImage"
FIELD	7899:14	7899:14	13	"writeCroppedImage"
LEAF_NODE	7899:14	7899:14	14	"writeCroppedImage"
LEAF_NODE	7899:33	7899:33	12	,
ARGUMENT	7900:21	7900:21	12	"JPEG compression requires 8 or 12 bits per sample"
FIELD	7900:21	7900:21	13	"JPEG compression requires 8 or 12 bits per sample"
LEAF_NODE	7900:21	7900:21	14	"JPEG compression requires 8 or 12 bits per sample"
LEAF_NODE	7900:72	7900:72	12	)
LEAF_NODE	7900:73	7900:73	10	;
JUMP_STATEMENT	7901:11	7901:22	9	return ( - 1 ) ;
KEYWORD	7901:11	7901:11	10	return
LEAF_NODE	7901:11	7901:11	11	return
DESTINATION	7901:18	7901:18	10	( - 1 )
EXPR	7901:18	7901:21	11	( - 1 )
LEAF_NODE	7901:18	7901:18	12	(
UNARY_EXPR	7901:19	7901:20	12	- 1
UNARY_OPERATOR	7901:19	7901:19	13	-
LEAF_NODE	7901:19	7901:19	14	-
FIELD	7901:20	7901:20	13	1
LEAF_NODE	7901:20	7901:20	14	1
LEAF_NODE	7901:21	7901:21	12	)
LEAF_NODE	7901:22	7901:22	10	;
LEAF_NODE	7902:11	7902:11	8	}
JUMP_STATEMENT	7903:2	7903:7	6	break DESTINATION ;
KEYWORD	7903:2	7903:2	7	break
LEAF_NODE	7903:2	7903:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7903:7	7903:7	7	;
LABEL	7904:3	7904:23	6	case COMPRESSION_LZW :
LEAF_NODE	7904:3	7904:3	7	case
LEAF_NODE	7904:8	7904:8	7	COMPRESSION_LZW
LEAF_NODE	7904:23	7904:23	7	:
LABEL	7905:3	7905:33	6	case COMPRESSION_ADOBE_DEFLATE :
LEAF_NODE	7905:3	7905:3	7	case
LEAF_NODE	7905:8	7905:8	7	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	7905:33	7905:33	7	:
LABEL	7906:3	7906:27	6	case COMPRESSION_DEFLATE :
LEAF_NODE	7906:3	7906:3	7	case
LEAF_NODE	7906:8	7906:8	7	COMPRESSION_DEFLATE
LEAF_NODE	7906:27	7906:27	7	:
SELECTION	7907:1	7908:10	6	
KEYWORD	7907:1	7907:1	7	if
LEAF_NODE	7907:1	7907:1	8	if
LEAF_NODE	7907:4	7907:4	7	(
CONDITION	7907:5	7907:5	7	predictor != ( uint16 ) - 1
EXPR	7907:5	7907:26	8	predictor != ( uint16 ) - 1
FIELD	7907:5	7907:5	9	predictor
LEAF_NODE	7907:5	7907:5	10	predictor
EQ_OPERATOR	7907:15	7907:15	9	!=
LEAF_NODE	7907:15	7907:15	10	!=
LEAF_NODE	7907:18	7907:18	9	(
TYPE_NAME	7907:19	7907:19	9	uint16
LEAF_NODE	7907:19	7907:19	10	uint16
LEAF_NODE	7907:25	7907:25	9	)
UNARY_EXPR	7907:26	7907:27	9	- 1
UNARY_OPERATOR	7907:26	7907:26	10	-
LEAF_NODE	7907:26	7907:26	11	-
FIELD	7907:27	7907:27	10	1
LEAF_NODE	7907:27	7907:27	11	1
LEAF_NODE	7907:28	7907:28	7	)
STATEMENTS	7908:10	7908:10	7	
EXPR_STATEMENT	7908:10	7908:57	8	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	7908:10	7908:10	9	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	7908:10	7908:56	10	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	7908:10	7908:10	11	TIFFSetField
LEAF_NODE	7908:10	7908:10	12	TIFFSetField
LEAF_NODE	7908:22	7908:22	11	(
ARGUMENT	7908:23	7908:23	11	out
FIELD	7908:23	7908:23	12	out
LEAF_NODE	7908:23	7908:23	13	out
LEAF_NODE	7908:26	7908:26	11	,
ARGUMENT	7908:28	7908:28	11	TIFFTAG_PREDICTOR
FIELD	7908:28	7908:28	12	TIFFTAG_PREDICTOR
LEAF_NODE	7908:28	7908:28	13	TIFFTAG_PREDICTOR
LEAF_NODE	7908:45	7908:45	11	,
ARGUMENT	7908:47	7908:47	11	predictor
FIELD	7908:47	7908:47	12	predictor
LEAF_NODE	7908:47	7908:47	13	predictor
LEAF_NODE	7908:56	7908:56	11	)
LEAF_NODE	7908:57	7908:57	9	;
SELECTION	7909:1	7910:3	6	
KEYWORD	7909:1	7909:1	7	else
LEAF_NODE	7909:1	7909:1	8	else
STATEMENTS	7910:3	7910:3	7	
EXPR_STATEMENT	7910:3	7910:42	8	CopyField ( TIFFTAG_PREDICTOR , predictor ) ;
EXPR	7910:3	7910:3	9	CopyField ( TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	7910:3	7910:41	10	CopyField ( TIFFTAG_PREDICTOR , predictor )
CALLEE	7910:3	7910:3	11	CopyField
LEAF_NODE	7910:3	7910:3	12	CopyField
LEAF_NODE	7910:12	7910:12	11	(
ARGUMENT	7910:13	7910:13	11	TIFFTAG_PREDICTOR
FIELD	7910:13	7910:13	12	TIFFTAG_PREDICTOR
LEAF_NODE	7910:13	7910:13	13	TIFFTAG_PREDICTOR
LEAF_NODE	7910:30	7910:30	11	,
ARGUMENT	7910:32	7910:32	11	predictor
FIELD	7910:32	7910:32	12	predictor
LEAF_NODE	7910:32	7910:32	13	predictor
LEAF_NODE	7910:41	7910:41	11	)
LEAF_NODE	7910:42	7910:42	9	;
JUMP_STATEMENT	7911:1	7911:6	6	break DESTINATION ;
KEYWORD	7911:1	7911:1	7	break
LEAF_NODE	7911:1	7911:1	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7911:6	7911:6	7	;
LABEL	7912:3	7912:29	6	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	7912:3	7912:3	7	case
LEAF_NODE	7912:8	7912:8	7	COMPRESSION_CCITTFAX3
LEAF_NODE	7912:29	7912:29	7	:
LABEL	7913:3	7913:29	6	case COMPRESSION_CCITTFAX4 :
LEAF_NODE	7913:3	7913:3	7	case
LEAF_NODE	7913:8	7913:8	7	COMPRESSION_CCITTFAX4
LEAF_NODE	7913:29	7913:29	7	:
SELECTION	7914:8	7915:10	6	
KEYWORD	7914:8	7914:8	7	if
LEAF_NODE	7914:8	7914:8	8	if
LEAF_NODE	7914:11	7914:11	7	(
CONDITION	7914:12	7914:12	7	bps != 1
EXPR	7914:12	7914:19	8	bps != 1
FIELD	7914:12	7914:12	9	bps
LEAF_NODE	7914:12	7914:12	10	bps
EQ_OPERATOR	7914:16	7914:16	9	!=
LEAF_NODE	7914:16	7914:16	10	!=
FIELD	7914:19	7914:19	9	1
LEAF_NODE	7914:19	7914:19	10	1
LEAF_NODE	7914:20	7914:20	7	)
STATEMENTS	7915:10	7919:3	7	
LEAF_NODE	7915:10	7915:10	8	{
STATEMENTS	7916:3	7918:10	8	
EXPR_STATEMENT	7916:3	7917:63	9	TIFFError ( "writeCroppedImage" , "Group 3/4 compression is not usable with bps > 1" ) ;
EXPR	7916:3	7916:3	10	TIFFError ( "writeCroppedImage" , "Group 3/4 compression is not usable with bps > 1" )
FUNCTION_CALL	7916:3	7917:62	11	TIFFError ( "writeCroppedImage" , "Group 3/4 compression is not usable with bps > 1" )
CALLEE	7916:3	7916:3	12	TIFFError
LEAF_NODE	7916:3	7916:3	13	TIFFError
LEAF_NODE	7916:12	7916:12	12	(
ARGUMENT	7916:13	7916:13	12	"writeCroppedImage"
FIELD	7916:13	7916:13	13	"writeCroppedImage"
LEAF_NODE	7916:13	7916:13	14	"writeCroppedImage"
LEAF_NODE	7916:32	7916:32	12	,
ARGUMENT	7917:12	7917:12	12	"Group 3/4 compression is not usable with bps > 1"
FIELD	7917:12	7917:12	13	"Group 3/4 compression is not usable with bps > 1"
LEAF_NODE	7917:12	7917:12	14	"Group 3/4 compression is not usable with bps > 1"
LEAF_NODE	7917:62	7917:62	12	)
LEAF_NODE	7917:63	7917:63	10	;
JUMP_STATEMENT	7918:10	7918:21	9	return ( - 1 ) ;
KEYWORD	7918:10	7918:10	10	return
LEAF_NODE	7918:10	7918:10	11	return
DESTINATION	7918:17	7918:17	10	( - 1 )
EXPR	7918:17	7918:20	11	( - 1 )
LEAF_NODE	7918:17	7918:17	12	(
UNARY_EXPR	7918:18	7918:19	12	- 1
UNARY_OPERATOR	7918:18	7918:18	13	-
LEAF_NODE	7918:18	7918:18	14	-
FIELD	7918:19	7918:19	13	1
LEAF_NODE	7918:19	7918:19	14	1
LEAF_NODE	7918:20	7918:20	12	)
LEAF_NODE	7918:21	7918:21	10	;
LEAF_NODE	7919:3	7919:3	8	}
SELECTION	7920:1	7920:43	6	
KEYWORD	7920:1	7920:1	7	if
LEAF_NODE	7920:1	7920:1	8	if
LEAF_NODE	7920:4	7920:4	7	(
CONDITION	7920:5	7920:5	7	compression == COMPRESSION_CCITTFAX3
EXPR	7920:5	7920:20	8	compression == COMPRESSION_CCITTFAX3
FIELD	7920:5	7920:5	9	compression
LEAF_NODE	7920:5	7920:5	10	compression
EQ_OPERATOR	7920:17	7920:17	9	==
LEAF_NODE	7920:17	7920:17	10	==
FIELD	7920:20	7920:20	9	COMPRESSION_CCITTFAX3
LEAF_NODE	7920:20	7920:20	10	COMPRESSION_CCITTFAX3
LEAF_NODE	7920:41	7920:41	7	)
STATEMENTS	7920:43	7925:1	7	
LEAF_NODE	7920:43	7920:43	8	{
STATEMENTS	7921:10	7923:3	8	
SELECTION	7921:10	7922:5	9	
KEYWORD	7921:10	7921:10	10	if
LEAF_NODE	7921:10	7921:10	11	if
LEAF_NODE	7921:13	7921:13	10	(
CONDITION	7921:14	7921:14	10	g3opts != ( uint32 ) - 1
EXPR	7921:14	7921:33	11	g3opts != ( uint32 ) - 1
FIELD	7921:14	7921:14	12	g3opts
LEAF_NODE	7921:14	7921:14	13	g3opts
EQ_OPERATOR	7921:21	7921:21	12	!=
LEAF_NODE	7921:21	7921:21	13	!=
LEAF_NODE	7921:24	7921:24	12	(
TYPE_NAME	7921:25	7921:25	12	uint32
LEAF_NODE	7921:25	7921:25	13	uint32
LEAF_NODE	7921:31	7921:31	12	)
UNARY_EXPR	7921:33	7921:34	12	- 1
UNARY_OPERATOR	7921:33	7921:33	13	-
LEAF_NODE	7921:33	7921:33	14	-
FIELD	7921:34	7921:34	13	1
LEAF_NODE	7921:34	7921:34	14	1
LEAF_NODE	7921:35	7921:35	10	)
STATEMENTS	7922:5	7922:5	10	
EXPR_STATEMENT	7922:5	7922:53	11	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts ) ;
EXPR	7922:5	7922:5	12	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
FUNCTION_CALL	7922:5	7922:52	13	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
CALLEE	7922:5	7922:5	14	TIFFSetField
LEAF_NODE	7922:5	7922:5	15	TIFFSetField
LEAF_NODE	7922:17	7922:17	14	(
ARGUMENT	7922:18	7922:18	14	out
FIELD	7922:18	7922:18	15	out
LEAF_NODE	7922:18	7922:18	16	out
LEAF_NODE	7922:21	7922:21	14	,
ARGUMENT	7922:23	7922:23	14	TIFFTAG_GROUP3OPTIONS
FIELD	7922:23	7922:23	15	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7922:23	7922:23	16	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7922:44	7922:44	14	,
ARGUMENT	7922:46	7922:46	14	g3opts
FIELD	7922:46	7922:46	15	g3opts
LEAF_NODE	7922:46	7922:46	16	g3opts
LEAF_NODE	7922:52	7922:52	14	)
LEAF_NODE	7922:53	7922:53	12	;
SELECTION	7923:3	7924:5	9	
KEYWORD	7923:3	7923:3	10	else
LEAF_NODE	7923:3	7923:3	11	else
STATEMENTS	7924:5	7924:5	10	
EXPR_STATEMENT	7924:5	7924:45	11	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts ) ;
EXPR	7924:5	7924:5	12	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts )
FUNCTION_CALL	7924:5	7924:44	13	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts )
CALLEE	7924:5	7924:5	14	CopyField
LEAF_NODE	7924:5	7924:5	15	CopyField
LEAF_NODE	7924:14	7924:14	14	(
ARGUMENT	7924:15	7924:15	14	TIFFTAG_GROUP3OPTIONS
FIELD	7924:15	7924:15	15	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7924:15	7924:15	16	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	7924:36	7924:36	14	,
ARGUMENT	7924:38	7924:38	14	g3opts
FIELD	7924:38	7924:38	15	g3opts
LEAF_NODE	7924:38	7924:38	16	g3opts
LEAF_NODE	7924:44	7924:44	14	)
LEAF_NODE	7924:45	7924:45	12	;
LEAF_NODE	7925:1	7925:1	8	}
SELECTION	7925:3	7925:8	6	
KEYWORD	7925:3	7925:3	7	else
LEAF_NODE	7925:3	7925:3	8	else
STATEMENTS	7925:8	7927:8	7	
LEAF_NODE	7925:8	7925:8	8	{
STATEMENTS	7926:5	7926:5	8	
EXPR_STATEMENT	7926:5	7926:49	9	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG ) ;
EXPR	7926:5	7926:5	10	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG )
FUNCTION_CALL	7926:5	7926:48	11	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG )
CALLEE	7926:5	7926:5	12	CopyTag
LEAF_NODE	7926:5	7926:5	13	CopyTag
LEAF_NODE	7926:12	7926:12	12	(
ARGUMENT	7926:13	7926:13	12	TIFFTAG_GROUP4OPTIONS
FIELD	7926:13	7926:13	13	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	7926:13	7926:13	14	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	7926:34	7926:34	12	,
ARGUMENT	7926:36	7926:36	12	1
FIELD	7926:36	7926:36	13	1
LEAF_NODE	7926:36	7926:36	14	1
LEAF_NODE	7926:37	7926:37	12	,
ARGUMENT	7926:39	7926:39	12	TIFF_LONG
FIELD	7926:39	7926:39	13	TIFF_LONG
LEAF_NODE	7926:39	7926:39	14	TIFF_LONG
LEAF_NODE	7926:48	7926:48	12	)
LEAF_NODE	7926:49	7926:49	10	;
LEAF_NODE	7927:8	7927:8	8	}
EXPR_STATEMENT	7928:8	7928:50	6	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG ) ;
EXPR	7928:8	7928:8	7	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG )
FUNCTION_CALL	7928:8	7928:49	8	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG )
CALLEE	7928:8	7928:8	9	CopyTag
LEAF_NODE	7928:8	7928:8	10	CopyTag
LEAF_NODE	7928:15	7928:15	9	(
ARGUMENT	7928:16	7928:16	9	TIFFTAG_BADFAXLINES
FIELD	7928:16	7928:16	10	TIFFTAG_BADFAXLINES
LEAF_NODE	7928:16	7928:16	11	TIFFTAG_BADFAXLINES
LEAF_NODE	7928:35	7928:35	9	,
ARGUMENT	7928:37	7928:37	9	1
FIELD	7928:37	7928:37	10	1
LEAF_NODE	7928:37	7928:37	11	1
LEAF_NODE	7928:38	7928:38	9	,
ARGUMENT	7928:40	7928:40	9	TIFF_LONG
FIELD	7928:40	7928:40	10	TIFF_LONG
LEAF_NODE	7928:40	7928:40	11	TIFF_LONG
LEAF_NODE	7928:49	7928:49	9	)
LEAF_NODE	7928:50	7928:50	7	;
EXPR_STATEMENT	7929:8	7929:51	6	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG ) ;
EXPR	7929:8	7929:8	7	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG )
FUNCTION_CALL	7929:8	7929:50	8	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG )
CALLEE	7929:8	7929:8	9	CopyTag
LEAF_NODE	7929:8	7929:8	10	CopyTag
LEAF_NODE	7929:15	7929:15	9	(
ARGUMENT	7929:16	7929:16	9	TIFFTAG_CLEANFAXDATA
FIELD	7929:16	7929:16	10	TIFFTAG_CLEANFAXDATA
LEAF_NODE	7929:16	7929:16	11	TIFFTAG_CLEANFAXDATA
LEAF_NODE	7929:36	7929:36	9	,
ARGUMENT	7929:38	7929:38	9	1
FIELD	7929:38	7929:38	10	1
LEAF_NODE	7929:38	7929:38	11	1
LEAF_NODE	7929:39	7929:39	9	,
ARGUMENT	7929:41	7929:41	9	TIFF_LONG
FIELD	7929:41	7929:41	10	TIFF_LONG
LEAF_NODE	7929:41	7929:41	11	TIFF_LONG
LEAF_NODE	7929:50	7929:50	9	)
LEAF_NODE	7929:51	7929:51	7	;
EXPR_STATEMENT	7930:8	7930:61	6	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG ) ;
EXPR	7930:8	7930:8	7	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG )
FUNCTION_CALL	7930:8	7930:60	8	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG )
CALLEE	7930:8	7930:8	9	CopyTag
LEAF_NODE	7930:8	7930:8	10	CopyTag
LEAF_NODE	7930:15	7930:15	9	(
ARGUMENT	7930:16	7930:16	9	TIFFTAG_CONSECUTIVEBADFAXLINES
FIELD	7930:16	7930:16	10	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	7930:16	7930:16	11	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	7930:46	7930:46	9	,
ARGUMENT	7930:48	7930:48	9	1
FIELD	7930:48	7930:48	10	1
LEAF_NODE	7930:48	7930:48	11	1
LEAF_NODE	7930:49	7930:49	9	,
ARGUMENT	7930:51	7930:51	9	TIFF_LONG
FIELD	7930:51	7930:51	10	TIFF_LONG
LEAF_NODE	7930:51	7930:51	11	TIFF_LONG
LEAF_NODE	7930:60	7930:60	9	)
LEAF_NODE	7930:61	7930:61	7	;
EXPR_STATEMENT	7931:8	7931:52	6	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG ) ;
EXPR	7931:8	7931:8	7	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
FUNCTION_CALL	7931:8	7931:51	8	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
CALLEE	7931:8	7931:8	9	CopyTag
LEAF_NODE	7931:8	7931:8	10	CopyTag
LEAF_NODE	7931:15	7931:15	9	(
ARGUMENT	7931:16	7931:16	9	TIFFTAG_FAXRECVPARAMS
FIELD	7931:16	7931:16	10	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	7931:16	7931:16	11	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	7931:37	7931:37	9	,
ARGUMENT	7931:39	7931:39	9	1
FIELD	7931:39	7931:39	10	1
LEAF_NODE	7931:39	7931:39	11	1
LEAF_NODE	7931:40	7931:40	9	,
ARGUMENT	7931:42	7931:42	9	TIFF_LONG
FIELD	7931:42	7931:42	10	TIFF_LONG
LEAF_NODE	7931:42	7931:42	11	TIFF_LONG
LEAF_NODE	7931:51	7931:51	9	)
LEAF_NODE	7931:52	7931:52	7	;
EXPR_STATEMENT	7932:8	7932:50	6	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG ) ;
EXPR	7932:8	7932:8	7	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
FUNCTION_CALL	7932:8	7932:49	8	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
CALLEE	7932:8	7932:8	9	CopyTag
LEAF_NODE	7932:8	7932:8	10	CopyTag
LEAF_NODE	7932:15	7932:15	9	(
ARGUMENT	7932:16	7932:16	9	TIFFTAG_FAXRECVTIME
FIELD	7932:16	7932:16	10	TIFFTAG_FAXRECVTIME
LEAF_NODE	7932:16	7932:16	11	TIFFTAG_FAXRECVTIME
LEAF_NODE	7932:35	7932:35	9	,
ARGUMENT	7932:37	7932:37	9	1
FIELD	7932:37	7932:37	10	1
LEAF_NODE	7932:37	7932:37	11	1
LEAF_NODE	7932:38	7932:38	9	,
ARGUMENT	7932:40	7932:40	9	TIFF_LONG
FIELD	7932:40	7932:40	10	TIFF_LONG
LEAF_NODE	7932:40	7932:40	11	TIFF_LONG
LEAF_NODE	7932:49	7932:49	9	)
LEAF_NODE	7932:50	7932:50	7	;
EXPR_STATEMENT	7933:8	7933:53	6	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII ) ;
EXPR	7933:8	7933:8	7	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
FUNCTION_CALL	7933:8	7933:52	8	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
CALLEE	7933:8	7933:8	9	CopyTag
LEAF_NODE	7933:8	7933:8	10	CopyTag
LEAF_NODE	7933:15	7933:15	9	(
ARGUMENT	7933:16	7933:16	9	TIFFTAG_FAXSUBADDRESS
FIELD	7933:16	7933:16	10	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	7933:16	7933:16	11	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	7933:37	7933:37	9	,
ARGUMENT	7933:39	7933:39	9	1
FIELD	7933:39	7933:39	10	1
LEAF_NODE	7933:39	7933:39	11	1
LEAF_NODE	7933:40	7933:40	9	,
ARGUMENT	7933:42	7933:42	9	TIFF_ASCII
FIELD	7933:42	7933:42	10	TIFF_ASCII
LEAF_NODE	7933:42	7933:42	11	TIFF_ASCII
LEAF_NODE	7933:52	7933:52	9	)
LEAF_NODE	7933:53	7933:53	7	;
JUMP_STATEMENT	7934:8	7934:13	6	break DESTINATION ;
KEYWORD	7934:8	7934:8	7	break
LEAF_NODE	7934:8	7934:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7934:13	7934:13	7	;
LABEL	7935:4	7935:25	6	case COMPRESSION_NONE :
LEAF_NODE	7935:4	7935:4	7	case
LEAF_NODE	7935:9	7935:9	7	COMPRESSION_NONE
LEAF_NODE	7935:25	7935:25	7	:
JUMP_STATEMENT	7936:9	7936:14	6	break DESTINATION ;
KEYWORD	7936:9	7936:9	7	break
LEAF_NODE	7936:9	7936:9	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7936:14	7936:14	7	;
LABEL	7937:4	7937:11	6	default :
LEAF_NODE	7937:4	7937:4	7	default
LEAF_NODE	7937:11	7937:11	7	:
JUMP_STATEMENT	7937:13	7937:18	6	break DESTINATION ;
KEYWORD	7937:13	7937:13	7	break
LEAF_NODE	7937:13	7937:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7937:18	7937:18	7	;
LEAF_NODE	7938:3	7938:3	5	}
LEAF_NODE	7939:3	7939:3	3	{
STATEMENTS	7939:5	7941:5	3	
SIMPLE_DECL	7939:5	7939:17	4	uint32 len32 ;
VAR_DECL	7939:5	7939:12	5	uint32 len32
TYPE	7939:5	7939:5	6	uint32
TYPE_NAME	7939:5	7939:5	7	uint32
LEAF_NODE	7939:5	7939:5	8	uint32
NAME	7939:12	7939:12	6	len32
LEAF_NODE	7939:12	7939:12	7	len32
LEAF_NODE	7939:17	7939:17	5	;
SIMPLE_DECL	7940:5	7940:16	4	void * data ;
VAR_DECL	7940:5	7940:12	5	void * data
TYPE	7940:5	7940:10	6	void *
TYPE_NAME	7940:5	7940:5	7	void
LEAF_NODE	7940:5	7940:5	8	void
POINTER	7940:10	7940:10	7	*
LEAF_NODE	7940:10	7940:10	8	*
NAME	7940:12	7940:12	6	data
LEAF_NODE	7940:12	7940:12	7	data
LEAF_NODE	7940:16	7940:16	5	;
SELECTION	7941:5	7942:7	4	
KEYWORD	7941:5	7941:5	5	if
LEAF_NODE	7941:5	7941:5	6	if
LEAF_NODE	7941:8	7941:8	5	(
CONDITION	7941:9	7941:9	5	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
EXPR	7941:9	7941:9	6	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
FUNCTION_CALL	7941:9	7941:59	7	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
CALLEE	7941:9	7941:9	8	TIFFGetField
LEAF_NODE	7941:9	7941:9	9	TIFFGetField
LEAF_NODE	7941:21	7941:21	8	(
ARGUMENT	7941:22	7941:22	8	in
FIELD	7941:22	7941:22	9	in
LEAF_NODE	7941:22	7941:22	10	in
LEAF_NODE	7941:24	7941:24	8	,
ARGUMENT	7941:26	7941:26	8	TIFFTAG_ICCPROFILE
FIELD	7941:26	7941:26	9	TIFFTAG_ICCPROFILE
LEAF_NODE	7941:26	7941:26	10	TIFFTAG_ICCPROFILE
LEAF_NODE	7941:44	7941:44	8	,
ARGUMENT	7941:46	7941:46	8	& len32
UNARY_EXPR	7941:46	7941:47	9	& len32
UNARY_OPERATOR	7941:46	7941:46	10	&
LEAF_NODE	7941:46	7941:46	11	&
FIELD	7941:47	7941:47	10	len32
LEAF_NODE	7941:47	7941:47	11	len32
LEAF_NODE	7941:52	7941:52	8	,
ARGUMENT	7941:54	7941:54	8	& data
UNARY_EXPR	7941:54	7941:55	9	& data
UNARY_OPERATOR	7941:54	7941:54	10	&
LEAF_NODE	7941:54	7941:54	11	&
FIELD	7941:55	7941:55	10	data
LEAF_NODE	7941:55	7941:55	11	data
LEAF_NODE	7941:59	7941:59	8	)
LEAF_NODE	7941:60	7941:60	5	)
STATEMENTS	7942:7	7942:7	5	
EXPR_STATEMENT	7942:7	7942:57	6	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data ) ;
EXPR	7942:7	7942:7	7	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data )
FUNCTION_CALL	7942:7	7942:56	8	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data )
CALLEE	7942:7	7942:7	9	TIFFSetField
LEAF_NODE	7942:7	7942:7	10	TIFFSetField
LEAF_NODE	7942:19	7942:19	9	(
ARGUMENT	7942:20	7942:20	9	out
FIELD	7942:20	7942:20	10	out
LEAF_NODE	7942:20	7942:20	11	out
LEAF_NODE	7942:23	7942:23	9	,
ARGUMENT	7942:25	7942:25	9	TIFFTAG_ICCPROFILE
FIELD	7942:25	7942:25	10	TIFFTAG_ICCPROFILE
LEAF_NODE	7942:25	7942:25	11	TIFFTAG_ICCPROFILE
LEAF_NODE	7942:43	7942:43	9	,
ARGUMENT	7942:45	7942:45	9	len32
FIELD	7942:45	7942:45	10	len32
LEAF_NODE	7942:45	7942:45	11	len32
LEAF_NODE	7942:50	7942:50	9	,
ARGUMENT	7942:52	7942:52	9	data
FIELD	7942:52	7942:52	10	data
LEAF_NODE	7942:52	7942:52	11	data
LEAF_NODE	7942:56	7942:56	9	)
LEAF_NODE	7942:57	7942:57	7	;
LEAF_NODE	7943:3	7943:3	3	}
LEAF_NODE	7944:3	7944:3	3	{
STATEMENTS	7944:5	7946:5	3	
SIMPLE_DECL	7944:5	7944:17	4	uint16 ninks ;
VAR_DECL	7944:5	7944:12	5	uint16 ninks
TYPE	7944:5	7944:5	6	uint16
TYPE_NAME	7944:5	7944:5	7	uint16
LEAF_NODE	7944:5	7944:5	8	uint16
NAME	7944:12	7944:12	6	ninks
LEAF_NODE	7944:12	7944:12	7	ninks
LEAF_NODE	7944:17	7944:17	5	;
SIMPLE_DECL	7945:5	7945:25	4	const char * inknames ;
VAR_DECL	7945:5	7945:17	5	const char * inknames
TYPE	7945:5	7945:15	6	const char *
TYPE_NAME	7945:5	7945:11	7	const char
LEAF_NODE	7945:5	7945:5	8	const
LEAF_NODE	7945:11	7945:11	8	char
POINTER	7945:15	7945:15	7	*
LEAF_NODE	7945:15	7945:15	8	*
NAME	7945:17	7945:17	6	inknames
LEAF_NODE	7945:17	7945:17	7	inknames
LEAF_NODE	7945:25	7945:25	5	;
SELECTION	7946:5	7946:57	4	
KEYWORD	7946:5	7946:5	5	if
LEAF_NODE	7946:5	7946:5	6	if
LEAF_NODE	7946:8	7946:8	5	(
CONDITION	7946:9	7946:9	5	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
EXPR	7946:9	7946:9	6	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
FUNCTION_CALL	7946:9	7946:54	7	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
CALLEE	7946:9	7946:9	8	TIFFGetField
LEAF_NODE	7946:9	7946:9	9	TIFFGetField
LEAF_NODE	7946:21	7946:21	8	(
ARGUMENT	7946:22	7946:22	8	in
FIELD	7946:22	7946:22	9	in
LEAF_NODE	7946:22	7946:22	10	in
LEAF_NODE	7946:24	7946:24	8	,
ARGUMENT	7946:26	7946:26	8	TIFFTAG_NUMBEROFINKS
FIELD	7946:26	7946:26	9	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7946:26	7946:26	10	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7946:46	7946:46	8	,
ARGUMENT	7946:48	7946:48	8	& ninks
UNARY_EXPR	7946:48	7946:49	9	& ninks
UNARY_OPERATOR	7946:48	7946:48	10	&
LEAF_NODE	7946:48	7946:48	11	&
FIELD	7946:49	7946:49	10	ninks
LEAF_NODE	7946:49	7946:49	11	ninks
LEAF_NODE	7946:54	7946:54	8	)
LEAF_NODE	7946:55	7946:55	5	)
STATEMENTS	7946:57	7961:5	5	
LEAF_NODE	7946:57	7946:57	6	{
STATEMENTS	7947:7	7948:7	6	
EXPR_STATEMENT	7947:7	7947:53	7	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks ) ;
EXPR	7947:7	7947:7	8	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks )
FUNCTION_CALL	7947:7	7947:52	9	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks )
CALLEE	7947:7	7947:7	10	TIFFSetField
LEAF_NODE	7947:7	7947:7	11	TIFFSetField
LEAF_NODE	7947:19	7947:19	10	(
ARGUMENT	7947:20	7947:20	10	out
FIELD	7947:20	7947:20	11	out
LEAF_NODE	7947:20	7947:20	12	out
LEAF_NODE	7947:23	7947:23	10	,
ARGUMENT	7947:25	7947:25	10	TIFFTAG_NUMBEROFINKS
FIELD	7947:25	7947:25	11	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7947:25	7947:25	12	TIFFTAG_NUMBEROFINKS
LEAF_NODE	7947:45	7947:45	10	,
ARGUMENT	7947:47	7947:47	10	ninks
FIELD	7947:47	7947:47	11	ninks
LEAF_NODE	7947:47	7947:47	12	ninks
LEAF_NODE	7947:52	7947:52	10	)
LEAF_NODE	7947:53	7947:53	8	;
SELECTION	7948:7	7948:58	7	
KEYWORD	7948:7	7948:7	8	if
LEAF_NODE	7948:7	7948:7	9	if
LEAF_NODE	7948:10	7948:10	8	(
CONDITION	7948:11	7948:11	8	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
EXPR	7948:11	7948:11	9	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
FUNCTION_CALL	7948:11	7948:55	10	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
CALLEE	7948:11	7948:11	11	TIFFGetField
LEAF_NODE	7948:11	7948:11	12	TIFFGetField
LEAF_NODE	7948:23	7948:23	11	(
ARGUMENT	7948:24	7948:24	11	in
FIELD	7948:24	7948:24	12	in
LEAF_NODE	7948:24	7948:24	13	in
LEAF_NODE	7948:26	7948:26	11	,
ARGUMENT	7948:28	7948:28	11	TIFFTAG_INKNAMES
FIELD	7948:28	7948:28	12	TIFFTAG_INKNAMES
LEAF_NODE	7948:28	7948:28	13	TIFFTAG_INKNAMES
LEAF_NODE	7948:44	7948:44	11	,
ARGUMENT	7948:46	7948:46	11	& inknames
UNARY_EXPR	7948:46	7948:47	12	& inknames
UNARY_OPERATOR	7948:46	7948:46	13	&
LEAF_NODE	7948:46	7948:46	14	&
FIELD	7948:47	7948:47	13	inknames
LEAF_NODE	7948:47	7948:47	14	inknames
LEAF_NODE	7948:55	7948:55	11	)
LEAF_NODE	7948:56	7948:56	8	)
STATEMENTS	7948:58	7960:7	8	
LEAF_NODE	7948:58	7948:58	9	{
STATEMENTS	7949:2	7959:2	9	
SIMPLE_DECL	7949:2	7949:40	10	int inknameslen ; inknameslen = strlen ( inknames ) + 1 ;
VAR_DECL	7949:2	7949:6	11	int inknameslen ; inknameslen = strlen ( inknames ) + 1
TYPE	7949:2	7949:2	12	int
TYPE_NAME	7949:2	7949:2	13	int
LEAF_NODE	7949:2	7949:2	14	int
NAME	7949:6	7949:6	12	inknameslen
LEAF_NODE	7949:6	7949:6	13	inknameslen
LEAF_NODE	0:0	0:0	12	;
INIT	7949:6	7949:6	12	inknameslen = strlen ( inknames ) + 1
ASSIGN	7949:6	7949:20	13	inknameslen = strlen ( inknames ) + 1
LVAL	7949:6	7949:6	14	inknameslen
NAME	7949:6	7949:6	15	inknameslen
LEAF_NODE	7949:6	7949:6	16	inknameslen
ASSIGN_OP	7949:18	7949:18	14	=
LEAF_NODE	7949:18	7949:18	15	=
RVAL	7949:20	7949:39	14	strlen ( inknames ) + 1
FUNCTION_CALL	7949:20	7949:35	15	strlen ( inknames )
CALLEE	7949:20	7949:20	16	strlen
LEAF_NODE	7949:20	7949:20	17	strlen
LEAF_NODE	7949:26	7949:26	16	(
ARGUMENT	7949:27	7949:27	16	inknames
FIELD	7949:27	7949:27	17	inknames
LEAF_NODE	7949:27	7949:27	18	inknames
LEAF_NODE	7949:35	7949:35	16	)
LEAF_NODE	7949:37	7949:37	15	+
FIELD	7949:39	7949:39	15	1
LEAF_NODE	7949:39	7949:39	16	1
LEAF_NODE	7949:40	7949:40	11	;
SIMPLE_DECL	7950:2	7950:27	10	const char * cp ; cp = inknames ;
VAR_DECL	7950:2	7950:14	11	const char * cp ; cp = inknames
TYPE	7950:2	7950:12	12	const char *
TYPE_NAME	7950:2	7950:8	13	const char
LEAF_NODE	7950:2	7950:2	14	const
LEAF_NODE	7950:8	7950:8	14	char
POINTER	7950:12	7950:12	13	*
LEAF_NODE	7950:12	7950:12	14	*
NAME	7950:14	7950:14	12	cp
LEAF_NODE	7950:14	7950:14	13	cp
LEAF_NODE	0:0	0:0	12	;
INIT	7950:14	7950:14	12	cp = inknames
ASSIGN	7950:14	7950:19	13	cp = inknames
LVAL	7950:14	7950:14	14	cp
NAME	7950:14	7950:14	15	cp
LEAF_NODE	7950:14	7950:14	16	cp
ASSIGN_OP	7950:17	7950:17	14	=
LEAF_NODE	7950:17	7950:17	15	=
RVAL	7950:19	7950:19	14	inknames
FIELD	7950:19	7950:19	15	inknames
LEAF_NODE	7950:19	7950:19	16	inknames
LEAF_NODE	7950:27	7950:27	11	;
ITERATION	7951:2	7951:20	10	
KEYWORD	7951:2	7951:2	11	while
LEAF_NODE	7951:2	7951:2	12	while
LEAF_NODE	7951:8	7951:8	11	(
CONDITION	7951:9	7951:9	11	ninks > 1
EXPR	7951:9	7951:17	12	ninks > 1
FIELD	7951:9	7951:9	13	ninks
LEAF_NODE	7951:9	7951:9	14	ninks
REL_OPERATOR	7951:15	7951:15	13	>
LEAF_NODE	7951:15	7951:15	14	>
FIELD	7951:17	7951:17	13	1
LEAF_NODE	7951:17	7951:17	14	1
LEAF_NODE	7951:18	7951:18	11	)
STATEMENTS	7951:20	7958:9	11	
LEAF_NODE	7951:20	7951:20	12	{
STATEMENTS	7952:4	7957:4	12	
EXPR_STATEMENT	7952:4	7952:25	13	cp = strchr ( cp , '\0' ) ;
EXPR	7952:4	7952:4	14	cp = strchr ( cp , '\0' )
ASSIGN	7952:4	7952:9	15	cp = strchr ( cp , '\0' )
LVAL	7952:4	7952:4	16	cp
FIELD	7952:4	7952:4	17	cp
LEAF_NODE	7952:4	7952:4	18	cp
ASSIGN_OP	7952:7	7952:7	16	=
LEAF_NODE	7952:7	7952:7	17	=
RVAL	7952:9	7952:9	16	strchr ( cp , '\0' )
FUNCTION_CALL	7952:9	7952:24	17	strchr ( cp , '\0' )
CALLEE	7952:9	7952:9	18	strchr
LEAF_NODE	7952:9	7952:9	19	strchr
LEAF_NODE	7952:15	7952:15	18	(
ARGUMENT	7952:16	7952:16	18	cp
FIELD	7952:16	7952:16	19	cp
LEAF_NODE	7952:16	7952:16	20	cp
LEAF_NODE	7952:18	7952:18	18	,
ARGUMENT	7952:20	7952:20	18	'\0'
FIELD	7952:20	7952:20	19	'\0'
LEAF_NODE	7952:20	7952:20	20	'\0'
LEAF_NODE	7952:24	7952:24	18	)
LEAF_NODE	7952:25	7952:25	14	;
SELECTION	7953:4	7953:12	13	
KEYWORD	7953:4	7953:4	14	if
LEAF_NODE	7953:4	7953:4	15	if
LEAF_NODE	7953:7	7953:7	14	(
CONDITION	7953:8	7953:8	14	cp
EXPR	7953:8	7953:8	15	cp
FIELD	7953:8	7953:8	16	cp
LEAF_NODE	7953:8	7953:8	17	cp
LEAF_NODE	7953:10	7953:10	14	)
STATEMENTS	7953:12	7956:4	14	
LEAF_NODE	7953:12	7953:12	15	{
STATEMENTS	7954:6	7955:6	15	
EXPR_STATEMENT	7954:6	7954:10	16	cp ++ ;
EXPR	7954:6	7954:6	17	cp ++
FIELD	7954:6	7954:8	18	cp ++
LEAF_NODE	7954:6	7954:6	19	cp
LEAF_NODE	7954:8	7954:8	19	++
LEAF_NODE	7954:10	7954:10	17	;
EXPR_STATEMENT	7955:6	7955:37	16	inknameslen += ( strlen ( cp ) + 1 ) ;
EXPR	7955:6	7955:6	17	inknameslen += ( strlen ( cp ) + 1 )
ASSIGN	7955:6	7955:21	18	inknameslen += ( strlen ( cp ) + 1 )
LVAL	7955:6	7955:6	19	inknameslen
FIELD	7955:6	7955:6	20	inknameslen
LEAF_NODE	7955:6	7955:6	21	inknameslen
ASSIGN_OP	7955:18	7955:18	19	+=
LEAF_NODE	7955:18	7955:18	20	+=
RVAL	7955:21	7955:36	19	( strlen ( cp ) + 1 )
LEAF_NODE	7955:21	7955:21	20	(
FUNCTION_CALL	7955:22	7955:31	20	strlen ( cp )
CALLEE	7955:22	7955:22	21	strlen
LEAF_NODE	7955:22	7955:22	22	strlen
LEAF_NODE	7955:28	7955:28	21	(
ARGUMENT	7955:29	7955:29	21	cp
FIELD	7955:29	7955:29	22	cp
LEAF_NODE	7955:29	7955:29	23	cp
LEAF_NODE	7955:31	7955:31	21	)
LEAF_NODE	7955:33	7955:33	20	+
FIELD	7955:35	7955:35	20	1
LEAF_NODE	7955:35	7955:35	21	1
LEAF_NODE	7955:36	7955:36	20	)
LEAF_NODE	7955:37	7955:37	17	;
LEAF_NODE	7956:4	7956:4	15	}
EXPR_STATEMENT	7957:4	7957:11	13	ninks -- ;
EXPR	7957:4	7957:4	14	ninks --
FIELD	7957:4	7957:9	15	ninks --
LEAF_NODE	7957:4	7957:4	16	ninks
LEAF_NODE	7957:9	7957:9	16	--
LEAF_NODE	7957:11	7957:11	14	;
LEAF_NODE	7958:9	7958:9	12	}
EXPR_STATEMENT	7959:2	7959:60	10	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames ) ;
EXPR	7959:2	7959:2	11	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames )
FUNCTION_CALL	7959:2	7959:59	12	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames )
CALLEE	7959:2	7959:2	13	TIFFSetField
LEAF_NODE	7959:2	7959:2	14	TIFFSetField
LEAF_NODE	7959:14	7959:14	13	(
ARGUMENT	7959:15	7959:15	13	out
FIELD	7959:15	7959:15	14	out
LEAF_NODE	7959:15	7959:15	15	out
LEAF_NODE	7959:18	7959:18	13	,
ARGUMENT	7959:20	7959:20	13	TIFFTAG_INKNAMES
FIELD	7959:20	7959:20	14	TIFFTAG_INKNAMES
LEAF_NODE	7959:20	7959:20	15	TIFFTAG_INKNAMES
LEAF_NODE	7959:36	7959:36	13	,
ARGUMENT	7959:38	7959:38	13	inknameslen
FIELD	7959:38	7959:38	14	inknameslen
LEAF_NODE	7959:38	7959:38	15	inknameslen
LEAF_NODE	7959:49	7959:49	13	,
ARGUMENT	7959:51	7959:51	13	inknames
FIELD	7959:51	7959:51	14	inknames
LEAF_NODE	7959:51	7959:51	15	inknames
LEAF_NODE	7959:59	7959:59	13	)
LEAF_NODE	7959:60	7959:60	11	;
LEAF_NODE	7960:7	7960:7	9	}
LEAF_NODE	7961:5	7961:5	6	}
LEAF_NODE	7962:3	7962:3	3	}
LEAF_NODE	7963:3	7963:3	3	{
STATEMENTS	7964:3	7965:3	3	
SIMPLE_DECL	7964:3	7964:26	4	unsigned short pg0 , unsigned short pg1 ;
INIT_DECL_LIST	7964:3	7964:3	5	unsigned short pg0 , unsigned short pg1
VAR_DECL	7964:3	7964:18	6	unsigned short pg0
TYPE	7964:3	7964:3	7	unsigned short
TYPE_NAME	7964:3	7964:12	8	unsigned short
LEAF_NODE	7964:3	7964:3	9	unsigned
LEAF_NODE	7964:12	7964:12	9	short
NAME	7964:18	7964:18	7	pg0
LEAF_NODE	7964:18	7964:18	8	pg0
LEAF_NODE	7964:21	7964:21	6	,
VAR_DECL	7964:3	7964:23	6	unsigned short pg1
TYPE	7964:3	7964:3	7	unsigned short
TYPE_NAME	7964:3	7964:12	8	unsigned short
LEAF_NODE	7964:3	7964:3	9	unsigned
LEAF_NODE	7964:12	7964:12	9	short
NAME	7964:23	7964:23	7	pg1
LEAF_NODE	7964:23	7964:23	8	pg1
LEAF_NODE	7964:26	7964:26	5	;
SELECTION	7965:3	7965:57	4	
KEYWORD	7965:3	7965:3	5	if
LEAF_NODE	7965:3	7965:3	6	if
LEAF_NODE	7965:6	7965:6	5	(
CONDITION	7965:7	7965:7	5	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
EXPR	7965:7	7965:7	6	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
FUNCTION_CALL	7965:7	7965:54	7	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
CALLEE	7965:7	7965:7	8	TIFFGetField
LEAF_NODE	7965:7	7965:7	9	TIFFGetField
LEAF_NODE	7965:19	7965:19	8	(
ARGUMENT	7965:20	7965:20	8	in
FIELD	7965:20	7965:20	9	in
LEAF_NODE	7965:20	7965:20	10	in
LEAF_NODE	7965:22	7965:22	8	,
ARGUMENT	7965:24	7965:24	8	TIFFTAG_PAGENUMBER
FIELD	7965:24	7965:24	9	TIFFTAG_PAGENUMBER
LEAF_NODE	7965:24	7965:24	10	TIFFTAG_PAGENUMBER
LEAF_NODE	7965:42	7965:42	8	,
ARGUMENT	7965:44	7965:44	8	& pg0
UNARY_EXPR	7965:44	7965:45	9	& pg0
UNARY_OPERATOR	7965:44	7965:44	10	&
LEAF_NODE	7965:44	7965:44	11	&
FIELD	7965:45	7965:45	10	pg0
LEAF_NODE	7965:45	7965:45	11	pg0
LEAF_NODE	7965:48	7965:48	8	,
ARGUMENT	7965:50	7965:50	8	& pg1
UNARY_EXPR	7965:50	7965:51	9	& pg1
UNARY_OPERATOR	7965:50	7965:50	10	&
LEAF_NODE	7965:50	7965:50	11	&
FIELD	7965:51	7965:51	10	pg1
LEAF_NODE	7965:51	7965:51	11	pg1
LEAF_NODE	7965:54	7965:54	8	)
LEAF_NODE	7965:55	7965:55	5	)
STATEMENTS	7965:57	7967:5	5	
LEAF_NODE	7965:57	7965:57	6	{
STATEMENTS	7966:5	7966:5	6	
EXPR_STATEMENT	7966:5	7966:64	7	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pagenum , total_pages ) ;
EXPR	7966:5	7966:5	8	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pagenum , total_pages )
FUNCTION_CALL	7966:5	7966:63	9	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pagenum , total_pages )
CALLEE	7966:5	7966:5	10	TIFFSetField
LEAF_NODE	7966:5	7966:5	11	TIFFSetField
LEAF_NODE	7966:17	7966:17	10	(
ARGUMENT	7966:18	7966:18	10	out
FIELD	7966:18	7966:18	11	out
LEAF_NODE	7966:18	7966:18	12	out
LEAF_NODE	7966:21	7966:21	10	,
ARGUMENT	7966:23	7966:23	10	TIFFTAG_PAGENUMBER
FIELD	7966:23	7966:23	11	TIFFTAG_PAGENUMBER
LEAF_NODE	7966:23	7966:23	12	TIFFTAG_PAGENUMBER
LEAF_NODE	7966:41	7966:41	10	,
ARGUMENT	7966:43	7966:43	10	pagenum
FIELD	7966:43	7966:43	11	pagenum
LEAF_NODE	7966:43	7966:43	12	pagenum
LEAF_NODE	7966:50	7966:50	10	,
ARGUMENT	7966:52	7966:52	10	total_pages
FIELD	7966:52	7966:52	11	total_pages
LEAF_NODE	7966:52	7966:52	12	total_pages
LEAF_NODE	7966:63	7966:63	10	)
LEAF_NODE	7966:64	7966:64	8	;
LEAF_NODE	7967:5	7967:5	6	}
LEAF_NODE	7968:3	7968:3	3	}
ITERATION	7970:2	7971:2	3	
KEYWORD	7970:2	7970:2	4	for
LEAF_NODE	7970:2	7970:2	5	for
LEAF_NODE	7970:6	7970:6	4	(
FOR_INIT	7970:7	7970:15	4	p = tags ;
EXPR	7970:7	7970:7	5	p = tags
ASSIGN	7970:7	7970:11	6	p = tags
LVAL	7970:7	7970:7	7	p
FIELD	7970:7	7970:7	8	p
LEAF_NODE	7970:7	7970:7	9	p
ASSIGN_OP	7970:9	7970:9	7	=
LEAF_NODE	7970:9	7970:9	8	=
RVAL	7970:11	7970:11	7	tags
FIELD	7970:11	7970:11	8	tags
LEAF_NODE	7970:11	7970:11	9	tags
LEAF_NODE	7970:15	7970:15	5	;
CONDITION	7970:17	7970:17	4	p < & tags [ NTAGS ]
EXPR	7970:17	7970:21	5	p < & tags [ NTAGS ]
FIELD	7970:17	7970:17	6	p
LEAF_NODE	7970:17	7970:17	7	p
REL_OPERATOR	7970:19	7970:19	6	<
LEAF_NODE	7970:19	7970:19	7	<
UNARY_EXPR	7970:21	7970:22	6	& tags [ NTAGS ]
UNARY_OPERATOR	7970:21	7970:21	7	&
LEAF_NODE	7970:21	7970:21	8	&
FIELD	7970:22	7970:32	7	tags [ NTAGS ]
LEAF_NODE	7970:22	7970:22	8	tags
LEAF_NODE	7970:26	7970:26	8	[
EXPR	7970:27	7970:27	8	NTAGS
FIELD	7970:27	7970:27	9	NTAGS
LEAF_NODE	7970:27	7970:27	10	NTAGS
LEAF_NODE	7970:32	7970:32	8	]
LEAF_NODE	7970:33	7970:33	4	;
FOR_EXPR	7970:35	7970:35	4	p ++
EXPR	7970:35	7970:35	5	p ++
FIELD	7970:35	7970:36	6	p ++
LEAF_NODE	7970:35	7970:35	7	p
LEAF_NODE	7970:36	7970:36	7	++
LEAF_NODE	7970:38	7970:38	4	)
STATEMENTS	7971:2	7971:2	4	
EXPR_STATEMENT	7971:2	7971:36	5	CopyTag ( p -> tag , p -> count , p -> type ) ;
EXPR	7971:2	7971:2	6	CopyTag ( p -> tag , p -> count , p -> type )
FUNCTION_CALL	7971:2	7971:35	7	CopyTag ( p -> tag , p -> count , p -> type )
CALLEE	7971:2	7971:2	8	CopyTag
LEAF_NODE	7971:2	7971:2	9	CopyTag
LEAF_NODE	7971:9	7971:9	8	(
ARGUMENT	7971:10	7971:10	8	p -> tag
FIELD	7971:10	7971:13	9	p -> tag
LEAF_NODE	7971:10	7971:10	10	p
LEAF_NODE	7971:11	7971:11	10	->
LEAF_NODE	7971:13	7971:13	10	tag
LEAF_NODE	7971:16	7971:16	8	,
ARGUMENT	7971:18	7971:18	8	p -> count
FIELD	7971:18	7971:21	9	p -> count
LEAF_NODE	7971:18	7971:18	10	p
LEAF_NODE	7971:19	7971:19	10	->
LEAF_NODE	7971:21	7971:21	10	count
LEAF_NODE	7971:26	7971:26	8	,
ARGUMENT	7971:28	7971:28	8	p -> type
FIELD	7971:28	7971:31	9	p -> type
LEAF_NODE	7971:28	7971:28	10	p
LEAF_NODE	7971:29	7971:29	10	->
LEAF_NODE	7971:31	7971:31	10	type
LEAF_NODE	7971:35	7971:35	8	)
LEAF_NODE	7971:36	7971:36	6	;
SELECTION	7974:2	7975:4	3	
KEYWORD	7974:2	7974:2	4	if
LEAF_NODE	7974:2	7974:2	5	if
LEAF_NODE	7974:5	7974:5	4	(
CONDITION	7974:6	7974:6	4	outtiled
EXPR	7974:6	7974:6	5	outtiled
FIELD	7974:6	7974:6	6	outtiled
LEAF_NODE	7974:6	7974:6	7	outtiled
LEAF_NODE	7974:14	7974:14	4	)
STATEMENTS	7975:4	7986:4	4	
LEAF_NODE	7975:4	7975:4	5	{
STATEMENTS	7976:4	7981:4	5	
SELECTION	7976:4	7977:6	6	
KEYWORD	7976:4	7976:4	7	if
LEAF_NODE	7976:4	7976:4	8	if
LEAF_NODE	7976:7	7976:7	7	(
CONDITION	7976:8	7976:8	7	config == PLANARCONFIG_CONTIG
EXPR	7976:8	7976:18	8	config == PLANARCONFIG_CONTIG
FIELD	7976:8	7976:8	9	config
LEAF_NODE	7976:8	7976:8	10	config
EQ_OPERATOR	7976:15	7976:15	9	==
LEAF_NODE	7976:15	7976:15	10	==
FIELD	7976:18	7976:18	9	PLANARCONFIG_CONTIG
LEAF_NODE	7976:18	7976:18	10	PLANARCONFIG_CONTIG
LEAF_NODE	7976:37	7976:37	7	)
STATEMENTS	7977:6	7980:6	7	
LEAF_NODE	7977:6	7977:6	8	{
STATEMENTS	7978:6	7978:6	8	
SELECTION	7978:6	7979:8	9	
KEYWORD	7978:6	7978:6	10	if
LEAF_NODE	7978:6	7978:6	11	if
LEAF_NODE	7978:9	7978:9	10	(
CONDITION	7978:10	7978:10	10	writeBufferToContigTiles ( out , crop_buff , length , width , spp , dump )
EXPR	7978:10	7978:10	11	writeBufferToContigTiles ( out , crop_buff , length , width , spp , dump )
FUNCTION_CALL	7978:10	7978:76	12	writeBufferToContigTiles ( out , crop_buff , length , width , spp , dump )
CALLEE	7978:10	7978:10	13	writeBufferToContigTiles
LEAF_NODE	7978:10	7978:10	14	writeBufferToContigTiles
LEAF_NODE	7978:35	7978:35	13	(
ARGUMENT	7978:36	7978:36	13	out
FIELD	7978:36	7978:36	14	out
LEAF_NODE	7978:36	7978:36	15	out
LEAF_NODE	7978:39	7978:39	13	,
ARGUMENT	7978:41	7978:41	13	crop_buff
FIELD	7978:41	7978:41	14	crop_buff
LEAF_NODE	7978:41	7978:41	15	crop_buff
LEAF_NODE	7978:50	7978:50	13	,
ARGUMENT	7978:52	7978:52	13	length
FIELD	7978:52	7978:52	14	length
LEAF_NODE	7978:52	7978:52	15	length
LEAF_NODE	7978:58	7978:58	13	,
ARGUMENT	7978:60	7978:60	13	width
FIELD	7978:60	7978:60	14	width
LEAF_NODE	7978:60	7978:60	15	width
LEAF_NODE	7978:65	7978:65	13	,
ARGUMENT	7978:67	7978:67	13	spp
FIELD	7978:67	7978:67	14	spp
LEAF_NODE	7978:67	7978:67	15	spp
LEAF_NODE	7978:70	7978:70	13	,
ARGUMENT	7978:72	7978:72	13	dump
FIELD	7978:72	7978:72	14	dump
LEAF_NODE	7978:72	7978:72	15	dump
LEAF_NODE	7978:76	7978:76	13	)
LEAF_NODE	7978:77	7978:77	10	)
STATEMENTS	7979:8	7979:8	10	
EXPR_STATEMENT	7979:8	7979:81	11	TIFFError ( "" , "Unable to write contiguous tile data for page %d" , pagenum ) ;
EXPR	7979:8	7979:8	12	TIFFError ( "" , "Unable to write contiguous tile data for page %d" , pagenum )
FUNCTION_CALL	7979:8	7979:80	13	TIFFError ( "" , "Unable to write contiguous tile data for page %d" , pagenum )
CALLEE	7979:8	7979:8	14	TIFFError
LEAF_NODE	7979:8	7979:8	15	TIFFError
LEAF_NODE	7979:17	7979:17	14	(
ARGUMENT	7979:18	7979:18	14	""
FIELD	7979:18	7979:18	15	""
LEAF_NODE	7979:18	7979:18	16	""
LEAF_NODE	7979:20	7979:20	14	,
ARGUMENT	7979:21	7979:21	14	"Unable to write contiguous tile data for page %d"
FIELD	7979:21	7979:21	15	"Unable to write contiguous tile data for page %d"
LEAF_NODE	7979:21	7979:21	16	"Unable to write contiguous tile data for page %d"
LEAF_NODE	7979:71	7979:71	14	,
ARGUMENT	7979:73	7979:73	14	pagenum
FIELD	7979:73	7979:73	15	pagenum
LEAF_NODE	7979:73	7979:73	16	pagenum
LEAF_NODE	7979:80	7979:80	14	)
LEAF_NODE	7979:81	7979:81	12	;
LEAF_NODE	7980:6	7980:6	8	}
SELECTION	7981:4	7982:6	6	
KEYWORD	7981:4	7981:4	7	else
LEAF_NODE	7981:4	7981:4	8	else
STATEMENTS	7982:6	7985:6	7	
LEAF_NODE	7982:6	7982:6	8	{
STATEMENTS	7983:6	7983:6	8	
SELECTION	7983:6	7984:8	9	
KEYWORD	7983:6	7983:6	10	if
LEAF_NODE	7983:6	7983:6	11	if
LEAF_NODE	7983:9	7983:9	10	(
CONDITION	7983:10	7983:10	10	writeBufferToSeparateTiles ( out , crop_buff , length , width , spp , dump )
EXPR	7983:10	7983:10	11	writeBufferToSeparateTiles ( out , crop_buff , length , width , spp , dump )
FUNCTION_CALL	7983:10	7983:78	12	writeBufferToSeparateTiles ( out , crop_buff , length , width , spp , dump )
CALLEE	7983:10	7983:10	13	writeBufferToSeparateTiles
LEAF_NODE	7983:10	7983:10	14	writeBufferToSeparateTiles
LEAF_NODE	7983:37	7983:37	13	(
ARGUMENT	7983:38	7983:38	13	out
FIELD	7983:38	7983:38	14	out
LEAF_NODE	7983:38	7983:38	15	out
LEAF_NODE	7983:41	7983:41	13	,
ARGUMENT	7983:43	7983:43	13	crop_buff
FIELD	7983:43	7983:43	14	crop_buff
LEAF_NODE	7983:43	7983:43	15	crop_buff
LEAF_NODE	7983:52	7983:52	13	,
ARGUMENT	7983:54	7983:54	13	length
FIELD	7983:54	7983:54	14	length
LEAF_NODE	7983:54	7983:54	15	length
LEAF_NODE	7983:60	7983:60	13	,
ARGUMENT	7983:62	7983:62	13	width
FIELD	7983:62	7983:62	14	width
LEAF_NODE	7983:62	7983:62	15	width
LEAF_NODE	7983:67	7983:67	13	,
ARGUMENT	7983:69	7983:69	13	spp
FIELD	7983:69	7983:69	14	spp
LEAF_NODE	7983:69	7983:69	15	spp
LEAF_NODE	7983:72	7983:72	13	,
ARGUMENT	7983:74	7983:74	13	dump
FIELD	7983:74	7983:74	14	dump
LEAF_NODE	7983:74	7983:74	15	dump
LEAF_NODE	7983:78	7983:78	13	)
LEAF_NODE	7983:79	7983:79	10	)
STATEMENTS	7984:8	7984:8	10	
EXPR_STATEMENT	7984:8	7984:79	11	TIFFError ( "" , "Unable to write separate tile data for page %d" , pagenum ) ;
EXPR	7984:8	7984:8	12	TIFFError ( "" , "Unable to write separate tile data for page %d" , pagenum )
FUNCTION_CALL	7984:8	7984:78	13	TIFFError ( "" , "Unable to write separate tile data for page %d" , pagenum )
CALLEE	7984:8	7984:8	14	TIFFError
LEAF_NODE	7984:8	7984:8	15	TIFFError
LEAF_NODE	7984:17	7984:17	14	(
ARGUMENT	7984:18	7984:18	14	""
FIELD	7984:18	7984:18	15	""
LEAF_NODE	7984:18	7984:18	16	""
LEAF_NODE	7984:20	7984:20	14	,
ARGUMENT	7984:21	7984:21	14	"Unable to write separate tile data for page %d"
FIELD	7984:21	7984:21	15	"Unable to write separate tile data for page %d"
LEAF_NODE	7984:21	7984:21	16	"Unable to write separate tile data for page %d"
LEAF_NODE	7984:69	7984:69	14	,
ARGUMENT	7984:71	7984:71	14	pagenum
FIELD	7984:71	7984:71	15	pagenum
LEAF_NODE	7984:71	7984:71	16	pagenum
LEAF_NODE	7984:78	7984:78	14	)
LEAF_NODE	7984:79	7984:79	12	;
LEAF_NODE	7985:6	7985:6	8	}
LEAF_NODE	7986:4	7986:4	5	}
SELECTION	7987:2	7988:4	3	
KEYWORD	7987:2	7987:2	4	else
LEAF_NODE	7987:2	7987:2	5	else
STATEMENTS	7988:4	7999:4	4	
LEAF_NODE	7988:4	7988:4	5	{
STATEMENTS	7989:4	7994:4	5	
SELECTION	7989:4	7990:6	6	
KEYWORD	7989:4	7989:4	7	if
LEAF_NODE	7989:4	7989:4	8	if
LEAF_NODE	7989:7	7989:7	7	(
CONDITION	7989:8	7989:8	7	config == PLANARCONFIG_CONTIG
EXPR	7989:8	7989:18	8	config == PLANARCONFIG_CONTIG
FIELD	7989:8	7989:8	9	config
LEAF_NODE	7989:8	7989:8	10	config
EQ_OPERATOR	7989:15	7989:15	9	==
LEAF_NODE	7989:15	7989:15	10	==
FIELD	7989:18	7989:18	9	PLANARCONFIG_CONTIG
LEAF_NODE	7989:18	7989:18	10	PLANARCONFIG_CONTIG
LEAF_NODE	7989:37	7989:37	7	)
STATEMENTS	7990:6	7993:6	7	
LEAF_NODE	7990:6	7990:6	8	{
STATEMENTS	7991:6	7991:6	8	
SELECTION	7991:6	7992:8	9	
KEYWORD	7991:6	7991:6	10	if
LEAF_NODE	7991:6	7991:6	11	if
LEAF_NODE	7991:9	7991:9	10	(
CONDITION	7991:10	7991:10	10	writeBufferToContigStrips ( out , crop_buff , length )
EXPR	7991:10	7991:10	11	writeBufferToContigStrips ( out , crop_buff , length )
FUNCTION_CALL	7991:10	7991:59	12	writeBufferToContigStrips ( out , crop_buff , length )
CALLEE	7991:10	7991:10	13	writeBufferToContigStrips
LEAF_NODE	7991:10	7991:10	14	writeBufferToContigStrips
LEAF_NODE	7991:36	7991:36	13	(
ARGUMENT	7991:37	7991:37	13	out
FIELD	7991:37	7991:37	14	out
LEAF_NODE	7991:37	7991:37	15	out
LEAF_NODE	7991:40	7991:40	13	,
ARGUMENT	7991:42	7991:42	13	crop_buff
FIELD	7991:42	7991:42	14	crop_buff
LEAF_NODE	7991:42	7991:42	15	crop_buff
LEAF_NODE	7991:51	7991:51	13	,
ARGUMENT	7991:53	7991:53	13	length
FIELD	7991:53	7991:53	14	length
LEAF_NODE	7991:53	7991:53	15	length
LEAF_NODE	7991:59	7991:59	13	)
LEAF_NODE	7991:60	7991:60	10	)
STATEMENTS	7992:8	7992:8	10	
EXPR_STATEMENT	7992:8	7992:82	11	TIFFError ( "" , "Unable to write contiguous strip data for page %d" , pagenum ) ;
EXPR	7992:8	7992:8	12	TIFFError ( "" , "Unable to write contiguous strip data for page %d" , pagenum )
FUNCTION_CALL	7992:8	7992:81	13	TIFFError ( "" , "Unable to write contiguous strip data for page %d" , pagenum )
CALLEE	7992:8	7992:8	14	TIFFError
LEAF_NODE	7992:8	7992:8	15	TIFFError
LEAF_NODE	7992:17	7992:17	14	(
ARGUMENT	7992:18	7992:18	14	""
FIELD	7992:18	7992:18	15	""
LEAF_NODE	7992:18	7992:18	16	""
LEAF_NODE	7992:20	7992:20	14	,
ARGUMENT	7992:21	7992:21	14	"Unable to write contiguous strip data for page %d"
FIELD	7992:21	7992:21	15	"Unable to write contiguous strip data for page %d"
LEAF_NODE	7992:21	7992:21	16	"Unable to write contiguous strip data for page %d"
LEAF_NODE	7992:72	7992:72	14	,
ARGUMENT	7992:74	7992:74	14	pagenum
FIELD	7992:74	7992:74	15	pagenum
LEAF_NODE	7992:74	7992:74	16	pagenum
LEAF_NODE	7992:81	7992:81	14	)
LEAF_NODE	7992:82	7992:82	12	;
LEAF_NODE	7993:6	7993:6	8	}
SELECTION	7994:4	7995:6	6	
KEYWORD	7994:4	7994:4	7	else
LEAF_NODE	7994:4	7994:4	8	else
STATEMENTS	7995:6	7998:6	7	
LEAF_NODE	7995:6	7995:6	8	{
STATEMENTS	7996:6	7996:6	8	
SELECTION	7996:6	7997:8	9	
KEYWORD	7996:6	7996:6	10	if
LEAF_NODE	7996:6	7996:6	11	if
LEAF_NODE	7996:9	7996:9	10	(
CONDITION	7996:10	7996:10	10	writeBufferToSeparateStrips ( out , crop_buff , length , width , spp , dump )
EXPR	7996:10	7996:10	11	writeBufferToSeparateStrips ( out , crop_buff , length , width , spp , dump )
FUNCTION_CALL	7996:10	7996:78	12	writeBufferToSeparateStrips ( out , crop_buff , length , width , spp , dump )
CALLEE	7996:10	7996:10	13	writeBufferToSeparateStrips
LEAF_NODE	7996:10	7996:10	14	writeBufferToSeparateStrips
LEAF_NODE	7996:37	7996:37	13	(
ARGUMENT	7996:38	7996:38	13	out
FIELD	7996:38	7996:38	14	out
LEAF_NODE	7996:38	7996:38	15	out
LEAF_NODE	7996:41	7996:41	13	,
ARGUMENT	7996:43	7996:43	13	crop_buff
FIELD	7996:43	7996:43	14	crop_buff
LEAF_NODE	7996:43	7996:43	15	crop_buff
LEAF_NODE	7996:52	7996:52	13	,
ARGUMENT	7996:54	7996:54	13	length
FIELD	7996:54	7996:54	14	length
LEAF_NODE	7996:54	7996:54	15	length
LEAF_NODE	7996:60	7996:60	13	,
ARGUMENT	7996:62	7996:62	13	width
FIELD	7996:62	7996:62	14	width
LEAF_NODE	7996:62	7996:62	15	width
LEAF_NODE	7996:67	7996:67	13	,
ARGUMENT	7996:69	7996:69	13	spp
FIELD	7996:69	7996:69	14	spp
LEAF_NODE	7996:69	7996:69	15	spp
LEAF_NODE	7996:72	7996:72	13	,
ARGUMENT	7996:74	7996:74	13	dump
FIELD	7996:74	7996:74	14	dump
LEAF_NODE	7996:74	7996:74	15	dump
LEAF_NODE	7996:78	7996:78	13	)
LEAF_NODE	7996:79	7996:79	10	)
STATEMENTS	7997:8	7997:8	10	
EXPR_STATEMENT	7997:8	7997:80	11	TIFFError ( "" , "Unable to write separate strip data for page %d" , pagenum ) ;
EXPR	7997:8	7997:8	12	TIFFError ( "" , "Unable to write separate strip data for page %d" , pagenum )
FUNCTION_CALL	7997:8	7997:79	13	TIFFError ( "" , "Unable to write separate strip data for page %d" , pagenum )
CALLEE	7997:8	7997:8	14	TIFFError
LEAF_NODE	7997:8	7997:8	15	TIFFError
LEAF_NODE	7997:17	7997:17	14	(
ARGUMENT	7997:18	7997:18	14	""
FIELD	7997:18	7997:18	15	""
LEAF_NODE	7997:18	7997:18	16	""
LEAF_NODE	7997:20	7997:20	14	,
ARGUMENT	7997:21	7997:21	14	"Unable to write separate strip data for page %d"
FIELD	7997:21	7997:21	15	"Unable to write separate strip data for page %d"
LEAF_NODE	7997:21	7997:21	16	"Unable to write separate strip data for page %d"
LEAF_NODE	7997:70	7997:70	14	,
ARGUMENT	7997:72	7997:72	14	pagenum
FIELD	7997:72	7997:72	15	pagenum
LEAF_NODE	7997:72	7997:72	16	pagenum
LEAF_NODE	7997:79	7997:79	14	)
LEAF_NODE	7997:80	7997:80	12	;
LEAF_NODE	7998:6	7998:6	8	}
LEAF_NODE	7999:4	7999:4	5	}
SELECTION	8001:2	8002:4	3	
KEYWORD	8001:2	8001:2	4	if
LEAF_NODE	8001:2	8001:2	5	if
LEAF_NODE	8001:5	8001:5	4	(
CONDITION	8001:6	8001:6	4	! TIFFWriteDirectory ( out )
EXPR	8001:6	8001:6	5	! TIFFWriteDirectory ( out )
UNARY_EXPR	8001:6	8001:7	6	! TIFFWriteDirectory ( out )
UNARY_OPERATOR	8001:6	8001:6	7	!
LEAF_NODE	8001:6	8001:6	8	!
FUNCTION_CALL	8001:7	8001:29	7	TIFFWriteDirectory ( out )
CALLEE	8001:7	8001:7	8	TIFFWriteDirectory
LEAF_NODE	8001:7	8001:7	9	TIFFWriteDirectory
LEAF_NODE	8001:25	8001:25	8	(
ARGUMENT	8001:26	8001:26	8	out
FIELD	8001:26	8001:26	9	out
LEAF_NODE	8001:26	8001:26	10	out
LEAF_NODE	8001:29	8001:29	8	)
LEAF_NODE	8001:30	8001:30	4	)
STATEMENTS	8002:4	8005:4	4	
LEAF_NODE	8002:4	8002:4	5	{
STATEMENTS	8003:4	8004:4	5	
EXPR_STATEMENT	8003:4	8003:67	6	TIFFError ( "" , "Failed to write IFD for page number %d" , pagenum ) ;
EXPR	8003:4	8003:4	7	TIFFError ( "" , "Failed to write IFD for page number %d" , pagenum )
FUNCTION_CALL	8003:4	8003:66	8	TIFFError ( "" , "Failed to write IFD for page number %d" , pagenum )
CALLEE	8003:4	8003:4	9	TIFFError
LEAF_NODE	8003:4	8003:4	10	TIFFError
LEAF_NODE	8003:13	8003:13	9	(
ARGUMENT	8003:14	8003:14	9	""
FIELD	8003:14	8003:14	10	""
LEAF_NODE	8003:14	8003:14	11	""
LEAF_NODE	8003:16	8003:16	9	,
ARGUMENT	8003:17	8003:17	9	"Failed to write IFD for page number %d"
FIELD	8003:17	8003:17	10	"Failed to write IFD for page number %d"
LEAF_NODE	8003:17	8003:17	11	"Failed to write IFD for page number %d"
LEAF_NODE	8003:57	8003:57	9	,
ARGUMENT	8003:59	8003:59	9	pagenum
FIELD	8003:59	8003:59	10	pagenum
LEAF_NODE	8003:59	8003:59	11	pagenum
LEAF_NODE	8003:66	8003:66	9	)
LEAF_NODE	8003:67	8003:67	7	;
JUMP_STATEMENT	8004:4	8004:15	6	return ( - 1 ) ;
KEYWORD	8004:4	8004:4	7	return
LEAF_NODE	8004:4	8004:4	8	return
DESTINATION	8004:11	8004:11	7	( - 1 )
EXPR	8004:11	8004:14	8	( - 1 )
LEAF_NODE	8004:11	8004:11	9	(
UNARY_EXPR	8004:12	8004:13	9	- 1
UNARY_OPERATOR	8004:12	8004:12	10	-
LEAF_NODE	8004:12	8004:12	11	-
FIELD	8004:13	8004:13	10	1
LEAF_NODE	8004:13	8004:13	11	1
LEAF_NODE	8004:14	8004:14	9	)
LEAF_NODE	8004:15	8004:15	7	;
LEAF_NODE	8005:4	8005:4	5	}
JUMP_STATEMENT	8007:2	8007:12	3	return ( 0 ) ;
KEYWORD	8007:2	8007:2	4	return
LEAF_NODE	8007:2	8007:2	5	return
DESTINATION	8007:9	8007:9	4	( 0 )
EXPR	8007:9	8007:11	5	( 0 )
LEAF_NODE	8007:9	8007:9	6	(
FIELD	8007:10	8007:10	6	0
LEAF_NODE	8007:10	8007:10	7	0
LEAF_NODE	8007:11	8007:11	6	)
LEAF_NODE	8007:12	8007:12	4	;
LEAF_NODE	8008:2	8008:2	2	}
FUNCTION_DEF	8010:0	8083:2	1	
RETURN_TYPE	8010:0	8010:7	2	static int
LEAF_NODE	8010:0	8010:0	3	static
TYPE_NAME	8010:7	8010:7	3	int
LEAF_NODE	8010:7	8010:7	4	int
FUNCTION_NAME	8011:0	8011:0	2	rotateContigSamples8bits
LEAF_NODE	8011:0	8011:0	3	rotateContigSamples8bits
PARAMETER_LIST	8011:24	8012:76	2	( uint16 rotation , uint16 spp , uint16 bps , uint32 width , uint32 length , uint32 col , uint8 * src , uint8 * dst )
LEAF_NODE	8011:24	8011:24	3	(
PARAMETER_DECL	8011:25	8011:32	3	uint16 rotation
TYPE	8011:25	8011:25	4	uint16
TYPE_NAME	8011:25	8011:25	5	uint16
LEAF_NODE	8011:25	8011:25	6	uint16
NAME	8011:32	8011:32	4	rotation
LEAF_NODE	8011:32	8011:32	5	rotation
LEAF_NODE	8011:40	8011:40	3	,
PARAMETER_DECL	8011:42	8011:49	3	uint16 spp
TYPE	8011:42	8011:42	4	uint16
TYPE_NAME	8011:42	8011:42	5	uint16
LEAF_NODE	8011:42	8011:42	6	uint16
NAME	8011:49	8011:49	4	spp
LEAF_NODE	8011:49	8011:49	5	spp
LEAF_NODE	8011:52	8011:52	3	,
PARAMETER_DECL	8011:54	8011:61	3	uint16 bps
TYPE	8011:54	8011:54	4	uint16
TYPE_NAME	8011:54	8011:54	5	uint16
LEAF_NODE	8011:54	8011:54	6	uint16
NAME	8011:61	8011:61	4	bps
LEAF_NODE	8011:61	8011:61	5	bps
LEAF_NODE	8011:64	8011:64	3	,
PARAMETER_DECL	8011:66	8011:73	3	uint32 width
TYPE	8011:66	8011:66	4	uint32
TYPE_NAME	8011:66	8011:66	5	uint32
LEAF_NODE	8011:66	8011:66	6	uint32
NAME	8011:73	8011:73	4	width
LEAF_NODE	8011:73	8011:73	5	width
LEAF_NODE	8011:78	8011:78	3	,
PARAMETER_DECL	8012:25	8012:32	3	uint32 length
TYPE	8012:25	8012:25	4	uint32
TYPE_NAME	8012:25	8012:25	5	uint32
LEAF_NODE	8012:25	8012:25	6	uint32
NAME	8012:32	8012:32	4	length
LEAF_NODE	8012:32	8012:32	5	length
LEAF_NODE	8012:38	8012:38	3	,
PARAMETER_DECL	8012:42	8012:49	3	uint32 col
TYPE	8012:42	8012:42	4	uint32
TYPE_NAME	8012:42	8012:42	5	uint32
LEAF_NODE	8012:42	8012:42	6	uint32
NAME	8012:49	8012:49	4	col
LEAF_NODE	8012:49	8012:49	5	col
LEAF_NODE	8012:52	8012:52	3	,
PARAMETER_DECL	8012:54	8012:61	3	uint8 * src
TYPE	8012:54	8012:60	4	uint8 *
TYPE_NAME	8012:54	8012:54	5	uint8
LEAF_NODE	8012:54	8012:54	6	uint8
POINTER	8012:60	8012:60	5	*
LEAF_NODE	8012:60	8012:60	6	*
NAME	8012:61	8012:61	4	src
LEAF_NODE	8012:61	8012:61	5	src
LEAF_NODE	8012:64	8012:64	3	,
PARAMETER_DECL	8012:66	8012:73	3	uint8 * dst
TYPE	8012:66	8012:72	4	uint8 *
TYPE_NAME	8012:66	8012:66	5	uint8
LEAF_NODE	8012:66	8012:66	6	uint8
POINTER	8012:72	8012:72	5	*
LEAF_NODE	8012:72	8012:72	6	*
NAME	8012:73	8012:73	4	dst
LEAF_NODE	8012:73	8012:73	5	dst
LEAF_NODE	8012:76	8012:76	3	)
LEAF_NODE	8013:2	8013:2	2	{
STATEMENTS	8014:2	8082:2	2	
SIMPLE_DECL	8014:2	8014:25	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8014:2	8014:11	4	int ready_bits ; ready_bits = 0
TYPE	8014:2	8014:2	5	int
TYPE_NAME	8014:2	8014:2	6	int
LEAF_NODE	8014:2	8014:2	7	int
NAME	8014:11	8014:11	5	ready_bits
LEAF_NODE	8014:11	8014:11	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8014:11	8014:11	5	ready_bits = 0
ASSIGN	8014:11	8014:24	6	ready_bits = 0
LVAL	8014:11	8014:11	7	ready_bits
NAME	8014:11	8014:11	8	ready_bits
LEAF_NODE	8014:11	8014:11	9	ready_bits
ASSIGN_OP	8014:22	8014:22	7	=
LEAF_NODE	8014:22	8014:22	8	=
RVAL	8014:24	8014:24	7	0
FIELD	8014:24	8014:24	8	0
LEAF_NODE	8014:24	8014:24	9	0
LEAF_NODE	8014:25	8014:25	4	;
SIMPLE_DECL	8015:2	8015:36	3	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	8015:2	8015:2	4	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	8015:2	8015:11	5	uint32 src_byte ; src_byte = 0
TYPE	8015:2	8015:2	6	uint32
TYPE_NAME	8015:2	8015:2	7	uint32
LEAF_NODE	8015:2	8015:2	8	uint32
NAME	8015:11	8015:11	6	src_byte
LEAF_NODE	8015:11	8015:11	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	8015:11	8015:11	6	src_byte = 0
ASSIGN	8015:11	8015:22	7	src_byte = 0
LVAL	8015:11	8015:11	8	src_byte
NAME	8015:11	8015:11	9	src_byte
LEAF_NODE	8015:11	8015:11	10	src_byte
ASSIGN_OP	8015:20	8015:20	8	=
LEAF_NODE	8015:20	8015:20	9	=
RVAL	8015:22	8015:22	8	0
FIELD	8015:22	8015:22	9	0
LEAF_NODE	8015:22	8015:22	10	0
LEAF_NODE	8015:23	8015:23	5	,
VAR_DECL	8015:2	8015:25	5	uint32 src_bit ; src_bit = 0
TYPE	8015:2	8015:2	6	uint32
TYPE_NAME	8015:2	8015:2	7	uint32
LEAF_NODE	8015:2	8015:2	8	uint32
NAME	8015:25	8015:25	6	src_bit
LEAF_NODE	8015:25	8015:25	7	src_bit
LEAF_NODE	0:0	0:0	6	;
INIT	8015:25	8015:25	6	src_bit = 0
ASSIGN	8015:25	8015:35	7	src_bit = 0
LVAL	8015:25	8015:25	8	src_bit
NAME	8015:25	8015:25	9	src_bit
LEAF_NODE	8015:25	8015:25	10	src_bit
ASSIGN_OP	8015:33	8015:33	8	=
LEAF_NODE	8015:33	8015:33	9	=
RVAL	8015:35	8015:35	8	0
FIELD	8015:35	8015:35	9	0
LEAF_NODE	8015:35	8015:35	10	0
LEAF_NODE	8015:36	8015:36	4	;
SIMPLE_DECL	8016:2	8016:43	3	uint32 row , uint32 rowsize ; rowsize = 0 , uint32 bit_offset ; bit_offset = 0 ;
INIT_DECL_LIST	8016:2	8016:2	4	uint32 row , uint32 rowsize ; rowsize = 0 , uint32 bit_offset ; bit_offset = 0
VAR_DECL	8016:2	8016:11	5	uint32 row
TYPE	8016:2	8016:2	6	uint32
TYPE_NAME	8016:2	8016:2	7	uint32
LEAF_NODE	8016:2	8016:2	8	uint32
NAME	8016:11	8016:11	6	row
LEAF_NODE	8016:11	8016:11	7	row
LEAF_NODE	8016:14	8016:14	5	,
INIT_DECL_LIST	8016:2	8016:2	5	uint32 rowsize ; rowsize = 0 , uint32 bit_offset ; bit_offset = 0
VAR_DECL	8016:2	8016:16	6	uint32 rowsize ; rowsize = 0
TYPE	8016:2	8016:2	7	uint32
TYPE_NAME	8016:2	8016:2	8	uint32
LEAF_NODE	8016:2	8016:2	9	uint32
NAME	8016:16	8016:16	7	rowsize
LEAF_NODE	8016:16	8016:16	8	rowsize
LEAF_NODE	0:0	0:0	7	;
INIT	8016:16	8016:16	7	rowsize = 0
ASSIGN	8016:16	8016:26	8	rowsize = 0
LVAL	8016:16	8016:16	9	rowsize
NAME	8016:16	8016:16	10	rowsize
LEAF_NODE	8016:16	8016:16	11	rowsize
ASSIGN_OP	8016:24	8016:24	9	=
LEAF_NODE	8016:24	8016:24	10	=
RVAL	8016:26	8016:26	9	0
FIELD	8016:26	8016:26	10	0
LEAF_NODE	8016:26	8016:26	11	0
LEAF_NODE	8016:27	8016:27	6	,
VAR_DECL	8016:2	8016:29	6	uint32 bit_offset ; bit_offset = 0
TYPE	8016:2	8016:2	7	uint32
TYPE_NAME	8016:2	8016:2	8	uint32
LEAF_NODE	8016:2	8016:2	9	uint32
NAME	8016:29	8016:29	7	bit_offset
LEAF_NODE	8016:29	8016:29	8	bit_offset
LEAF_NODE	0:0	0:0	7	;
INIT	8016:29	8016:29	7	bit_offset = 0
ASSIGN	8016:29	8016:42	8	bit_offset = 0
LVAL	8016:29	8016:29	9	bit_offset
NAME	8016:29	8016:29	10	bit_offset
LEAF_NODE	8016:29	8016:29	11	bit_offset
ASSIGN_OP	8016:40	8016:40	9	=
LEAF_NODE	8016:40	8016:40	10	=
RVAL	8016:42	8016:42	9	0
FIELD	8016:42	8016:42	10	0
LEAF_NODE	8016:42	8016:42	11	0
LEAF_NODE	8016:43	8016:43	4	;
SIMPLE_DECL	8017:2	8017:38	3	uint8 matchbits ; matchbits = 0 , uint8 maskbits ; maskbits = 0 ;
INIT_DECL_LIST	8017:2	8017:2	4	uint8 matchbits ; matchbits = 0 , uint8 maskbits ; maskbits = 0
VAR_DECL	8017:2	8017:11	5	uint8 matchbits ; matchbits = 0
TYPE	8017:2	8017:2	6	uint8
TYPE_NAME	8017:2	8017:2	7	uint8
LEAF_NODE	8017:2	8017:2	8	uint8
NAME	8017:11	8017:11	6	matchbits
LEAF_NODE	8017:11	8017:11	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	8017:11	8017:11	6	matchbits = 0
ASSIGN	8017:11	8017:23	7	matchbits = 0
LVAL	8017:11	8017:11	8	matchbits
NAME	8017:11	8017:11	9	matchbits
LEAF_NODE	8017:11	8017:11	10	matchbits
ASSIGN_OP	8017:21	8017:21	8	=
LEAF_NODE	8017:21	8017:21	9	=
RVAL	8017:23	8017:23	8	0
FIELD	8017:23	8017:23	9	0
LEAF_NODE	8017:23	8017:23	10	0
LEAF_NODE	8017:24	8017:24	5	,
VAR_DECL	8017:2	8017:26	5	uint8 maskbits ; maskbits = 0
TYPE	8017:2	8017:2	6	uint8
TYPE_NAME	8017:2	8017:2	7	uint8
LEAF_NODE	8017:2	8017:2	8	uint8
NAME	8017:26	8017:26	6	maskbits
LEAF_NODE	8017:26	8017:26	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	8017:26	8017:26	6	maskbits = 0
ASSIGN	8017:26	8017:37	7	maskbits = 0
LVAL	8017:26	8017:26	8	maskbits
NAME	8017:26	8017:26	9	maskbits
LEAF_NODE	8017:26	8017:26	10	maskbits
ASSIGN_OP	8017:35	8017:35	8	=
LEAF_NODE	8017:35	8017:35	9	=
RVAL	8017:37	8017:37	8	0
FIELD	8017:37	8017:37	9	0
LEAF_NODE	8017:37	8017:37	10	0
LEAF_NODE	8017:38	8017:38	4	;
SIMPLE_DECL	8018:2	8018:31	3	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	8018:2	8018:2	4	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0
VAR_DECL	8018:2	8018:11	5	uint8 buff1 ; buff1 = 0
TYPE	8018:2	8018:2	6	uint8
TYPE_NAME	8018:2	8018:2	7	uint8
LEAF_NODE	8018:2	8018:2	8	uint8
NAME	8018:11	8018:11	6	buff1
LEAF_NODE	8018:11	8018:11	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8018:11	8018:11	6	buff1 = 0
ASSIGN	8018:11	8018:19	7	buff1 = 0
LVAL	8018:11	8018:11	8	buff1
NAME	8018:11	8018:11	9	buff1
LEAF_NODE	8018:11	8018:11	10	buff1
ASSIGN_OP	8018:17	8018:17	8	=
LEAF_NODE	8018:17	8018:17	9	=
RVAL	8018:19	8018:19	8	0
FIELD	8018:19	8018:19	9	0
LEAF_NODE	8018:19	8018:19	10	0
LEAF_NODE	8018:20	8018:20	5	,
VAR_DECL	8018:2	8018:22	5	uint8 buff2 ; buff2 = 0
TYPE	8018:2	8018:2	6	uint8
TYPE_NAME	8018:2	8018:2	7	uint8
LEAF_NODE	8018:2	8018:2	8	uint8
NAME	8018:22	8018:22	6	buff2
LEAF_NODE	8018:22	8018:22	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	8018:22	8018:22	6	buff2 = 0
ASSIGN	8018:22	8018:30	7	buff2 = 0
LVAL	8018:22	8018:22	8	buff2
NAME	8018:22	8018:22	9	buff2
LEAF_NODE	8018:22	8018:22	10	buff2
ASSIGN_OP	8018:28	8018:28	8	=
LEAF_NODE	8018:28	8018:28	9	=
RVAL	8018:30	8018:30	8	0
FIELD	8018:30	8018:30	9	0
LEAF_NODE	8018:30	8018:30	10	0
LEAF_NODE	8018:31	8018:31	4	;
SIMPLE_DECL	8019:2	8019:15	3	uint8 * next ;
VAR_DECL	8019:2	8019:11	4	uint8 * next
TYPE	8019:2	8019:10	5	uint8 *
TYPE_NAME	8019:2	8019:2	6	uint8
LEAF_NODE	8019:2	8019:2	7	uint8
POINTER	8019:10	8019:10	6	*
LEAF_NODE	8019:10	8019:10	7	*
NAME	8019:11	8019:11	5	next
LEAF_NODE	8019:11	8019:11	6	next
LEAF_NODE	8019:15	8019:15	4	;
SIMPLE_DECL	8020:2	8020:18	3	tsample_t sample ;
VAR_DECL	8020:2	8020:12	4	tsample_t sample
TYPE	8020:2	8020:2	5	tsample_t
TYPE_NAME	8020:2	8020:2	6	tsample_t
LEAF_NODE	8020:2	8020:2	7	tsample_t
NAME	8020:12	8020:12	5	sample
LEAF_NODE	8020:12	8020:12	6	sample
LEAF_NODE	8020:18	8020:18	4	;
SELECTION	8022:2	8023:4	3	
KEYWORD	8022:2	8022:2	4	if
LEAF_NODE	8022:2	8022:2	5	if
LEAF_NODE	8022:5	8022:5	4	(
CONDITION	8022:6	8022:6	4	( src == NULL ) || ( dst == NULL )
EXPR	8022:6	8022:6	5	( src == NULL ) || ( dst == NULL )
OR	8022:6	8022:23	6	( src == NULL ) || ( dst == NULL )
EXPR	8022:6	8022:18	7	( src == NULL )
LEAF_NODE	8022:6	8022:6	8	(
FIELD	8022:7	8022:7	8	src
LEAF_NODE	8022:7	8022:7	9	src
EQ_OPERATOR	8022:11	8022:11	8	==
LEAF_NODE	8022:11	8022:11	9	==
FIELD	8022:14	8022:14	8	NULL
LEAF_NODE	8022:14	8022:14	9	NULL
LEAF_NODE	8022:18	8022:18	8	)
LEAF_NODE	8022:20	8022:20	7	||
EXPR	8022:23	8022:35	7	( dst == NULL )
LEAF_NODE	8022:23	8022:23	8	(
FIELD	8022:24	8022:24	8	dst
LEAF_NODE	8022:24	8022:24	9	dst
EQ_OPERATOR	8022:28	8022:28	8	==
LEAF_NODE	8022:28	8022:28	9	==
FIELD	8022:31	8022:31	8	NULL
LEAF_NODE	8022:31	8022:31	9	NULL
LEAF_NODE	8022:35	8022:35	8	)
LEAF_NODE	8022:36	8022:36	4	)
STATEMENTS	8023:4	8026:4	4	
LEAF_NODE	8023:4	8023:4	5	{
STATEMENTS	8024:4	8025:4	5	
EXPR_STATEMENT	8024:4	8024:77	6	TIFFError ( "rotateContigSamples8bits" , "Invalid src or destination buffer" ) ;
EXPR	8024:4	8024:4	7	TIFFError ( "rotateContigSamples8bits" , "Invalid src or destination buffer" )
FUNCTION_CALL	8024:4	8024:76	8	TIFFError ( "rotateContigSamples8bits" , "Invalid src or destination buffer" )
CALLEE	8024:4	8024:4	9	TIFFError
LEAF_NODE	8024:4	8024:4	10	TIFFError
LEAF_NODE	8024:13	8024:13	9	(
ARGUMENT	8024:14	8024:14	9	"rotateContigSamples8bits"
FIELD	8024:14	8024:14	10	"rotateContigSamples8bits"
LEAF_NODE	8024:14	8024:14	11	"rotateContigSamples8bits"
LEAF_NODE	8024:40	8024:40	9	,
ARGUMENT	8024:41	8024:41	9	"Invalid src or destination buffer"
FIELD	8024:41	8024:41	10	"Invalid src or destination buffer"
LEAF_NODE	8024:41	8024:41	11	"Invalid src or destination buffer"
LEAF_NODE	8024:76	8024:76	9	)
LEAF_NODE	8024:77	8024:77	7	;
JUMP_STATEMENT	8025:4	8025:14	6	return ( 1 ) ;
KEYWORD	8025:4	8025:4	7	return
LEAF_NODE	8025:4	8025:4	8	return
DESTINATION	8025:11	8025:11	7	( 1 )
EXPR	8025:11	8025:13	8	( 1 )
LEAF_NODE	8025:11	8025:11	9	(
FIELD	8025:12	8025:12	9	1
LEAF_NODE	8025:12	8025:12	10	1
LEAF_NODE	8025:13	8025:13	9	)
LEAF_NODE	8025:14	8025:14	7	;
LEAF_NODE	8026:4	8026:4	5	}
LEAF_NODE	8028:2	8028:2	3	rowsize
LEAF_NODE	8028:10	8028:10	3	=
LEAF_NODE	8028:12	8028:12	3	(
LEAF_NODE	8028:13	8028:13	3	(
LEAF_NODE	8028:14	8028:14	3	bps
LEAF_NODE	8028:18	8028:18	3	*
LEAF_NODE	8028:20	8028:20	3	spp
LEAF_NODE	8028:24	8028:24	3	*
LEAF_NODE	8028:26	8028:26	3	width
LEAF_NODE	8028:31	8028:31	3	)
LEAF_NODE	8028:33	8028:33	3	+
LEAF_NODE	8028:35	8028:35	3	7
LEAF_NODE	8028:36	8028:36	3	)
LEAF_NODE	8028:38	8028:38	3	/
EXPR_STATEMENT	8028:40	8028:41	3	8 ;
EXPR	8028:40	8028:40	4	8
FIELD	8028:40	8028:40	5	8
LEAF_NODE	8028:40	8028:40	6	8
LEAF_NODE	8028:41	8028:41	4	;
EXPR_STATEMENT	8029:2	8029:16	3	ready_bits = 0 ;
EXPR	8029:2	8029:2	4	ready_bits = 0
ASSIGN	8029:2	8029:15	5	ready_bits = 0
LVAL	8029:2	8029:2	6	ready_bits
FIELD	8029:2	8029:2	7	ready_bits
LEAF_NODE	8029:2	8029:2	8	ready_bits
ASSIGN_OP	8029:13	8029:13	6	=
LEAF_NODE	8029:13	8029:13	7	=
RVAL	8029:15	8029:15	6	0
FIELD	8029:15	8029:15	7	0
LEAF_NODE	8029:15	8029:15	8	0
LEAF_NODE	8029:16	8029:16	4	;
EXPR_STATEMENT	8030:2	8030:37	3	maskbits = ( uint8 ) - 1 >> ( 8 - bps ) ;
EXPR	8030:2	8030:2	4	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
ASSIGN	8030:2	8030:14	5	maskbits = ( uint8 ) - 1 >> ( 8 - bps )
LVAL	8030:2	8030:2	6	maskbits
FIELD	8030:2	8030:2	7	maskbits
LEAF_NODE	8030:2	8030:2	8	maskbits
ASSIGN_OP	8030:11	8030:11	6	=
LEAF_NODE	8030:11	8030:11	7	=
RVAL	8030:14	8030:36	6	( uint8 ) - 1 >> ( 8 - bps )
LEAF_NODE	8030:14	8030:14	7	(
TYPE_NAME	8030:15	8030:15	7	uint8
LEAF_NODE	8030:15	8030:15	8	uint8
LEAF_NODE	8030:20	8030:20	7	)
UNARY_EXPR	8030:21	8030:22	7	- 1
UNARY_OPERATOR	8030:21	8030:21	8	-
LEAF_NODE	8030:21	8030:21	9	-
FIELD	8030:22	8030:22	8	1
LEAF_NODE	8030:22	8030:22	9	1
LEAF_NODE	8030:24	8030:24	7	>>
LEAF_NODE	8030:27	8030:27	7	(
FIELD	8030:29	8030:29	7	8
LEAF_NODE	8030:29	8030:29	8	8
LEAF_NODE	8030:31	8030:31	7	-
FIELD	8030:33	8030:33	7	bps
LEAF_NODE	8030:33	8030:33	8	bps
LEAF_NODE	8030:36	8030:36	7	)
LEAF_NODE	8030:37	8030:37	4	;
EXPR_STATEMENT	8031:2	8031:19	3	buff1 = buff2 = 0 ;
EXPR	8031:2	8031:2	4	buff1 = buff2 = 0
ASSIGN	8031:2	8031:10	5	buff1 = buff2 = 0
LVAL	8031:2	8031:2	6	buff1
FIELD	8031:2	8031:2	7	buff1
LEAF_NODE	8031:2	8031:2	8	buff1
ASSIGN_OP	8031:8	8031:8	6	=
LEAF_NODE	8031:8	8031:8	7	=
RVAL	8031:10	8031:10	6	buff2 = 0
ASSIGN	8031:10	8031:18	7	buff2 = 0
LVAL	8031:10	8031:10	8	buff2
FIELD	8031:10	8031:10	9	buff2
LEAF_NODE	8031:10	8031:10	10	buff2
ASSIGN_OP	8031:16	8031:16	8	=
LEAF_NODE	8031:16	8031:16	9	=
RVAL	8031:18	8031:18	8	0
FIELD	8031:18	8031:18	9	0
LEAF_NODE	8031:18	8031:18	10	0
LEAF_NODE	8031:19	8031:19	4	;
ITERATION	8033:2	8034:4	3	
KEYWORD	8033:2	8033:2	4	for
LEAF_NODE	8033:2	8033:2	5	for
LEAF_NODE	8033:6	8033:6	4	(
FOR_INIT	8033:7	8033:14	4	row = 0 ;
EXPR	8033:7	8033:7	5	row = 0
ASSIGN	8033:7	8033:13	6	row = 0
LVAL	8033:7	8033:7	7	row
FIELD	8033:7	8033:7	8	row
LEAF_NODE	8033:7	8033:7	9	row
ASSIGN_OP	8033:11	8033:11	7	=
LEAF_NODE	8033:11	8033:11	8	=
RVAL	8033:13	8033:13	7	0
FIELD	8033:13	8033:13	8	0
LEAF_NODE	8033:13	8033:13	9	0
LEAF_NODE	8033:14	8033:14	5	;
CONDITION	8033:16	8033:16	4	row < length
EXPR	8033:16	8033:22	5	row < length
FIELD	8033:16	8033:16	6	row
LEAF_NODE	8033:16	8033:16	7	row
REL_OPERATOR	8033:20	8033:20	6	<
LEAF_NODE	8033:20	8033:20	7	<
FIELD	8033:22	8033:22	6	length
LEAF_NODE	8033:22	8033:22	7	length
LEAF_NODE	8033:29	8033:29	4	;
FOR_EXPR	8033:31	8033:31	4	row ++
EXPR	8033:31	8033:31	5	row ++
FIELD	8033:31	8033:34	6	row ++
LEAF_NODE	8033:31	8033:31	7	row
LEAF_NODE	8033:34	8033:34	7	++
LEAF_NODE	8033:36	8033:36	4	)
STATEMENTS	8034:4	8074:4	4	
LEAF_NODE	8034:4	8034:4	5	{
STATEMENTS	8035:4	8036:4	5	
LEAF_NODE	8035:4	8035:4	6	bit_offset
LEAF_NODE	8035:15	8035:15	6	=
LEAF_NODE	8035:17	8035:17	6	col
EXPR_STATEMENT	8035:21	8035:32	6	* bps * spp ;
EXPR	8035:21	8035:29	7	* bps * spp
UNARY_EXPR	8035:21	8035:23	8	* bps
UNARY_OPERATOR	8035:21	8035:21	9	*
LEAF_NODE	8035:21	8035:21	10	*
FIELD	8035:23	8035:23	9	bps
LEAF_NODE	8035:23	8035:23	10	bps
LEAF_NODE	8035:27	8035:27	8	*
FIELD	8035:29	8035:29	8	spp
LEAF_NODE	8035:29	8035:29	9	spp
LEAF_NODE	8035:32	8035:32	7	;
ITERATION	8036:4	8037:6	6	
KEYWORD	8036:4	8036:4	7	for
LEAF_NODE	8036:4	8036:4	8	for
LEAF_NODE	8036:8	8036:8	7	(
FOR_INIT	8036:9	8036:19	7	sample = 0 ;
EXPR	8036:9	8036:9	8	sample = 0
ASSIGN	8036:9	8036:18	9	sample = 0
LVAL	8036:9	8036:9	10	sample
FIELD	8036:9	8036:9	11	sample
LEAF_NODE	8036:9	8036:9	12	sample
ASSIGN_OP	8036:16	8036:16	10	=
LEAF_NODE	8036:16	8036:16	11	=
RVAL	8036:18	8036:18	10	0
FIELD	8036:18	8036:18	11	0
LEAF_NODE	8036:18	8036:18	12	0
LEAF_NODE	8036:19	8036:19	8	;
CONDITION	8036:21	8036:21	7	sample < spp
EXPR	8036:21	8036:30	8	sample < spp
FIELD	8036:21	8036:21	9	sample
LEAF_NODE	8036:21	8036:21	10	sample
REL_OPERATOR	8036:28	8036:28	9	<
LEAF_NODE	8036:28	8036:28	10	<
FIELD	8036:30	8036:30	9	spp
LEAF_NODE	8036:30	8036:30	10	spp
LEAF_NODE	8036:33	8036:33	7	;
FOR_EXPR	8036:35	8036:35	7	sample ++
EXPR	8036:35	8036:35	8	sample ++
FIELD	8036:35	8036:41	9	sample ++
LEAF_NODE	8036:35	8036:35	10	sample
LEAF_NODE	8036:41	8036:41	10	++
LEAF_NODE	8036:43	8036:43	7	)
STATEMENTS	8037:6	8073:6	7	
LEAF_NODE	8037:6	8037:6	8	{
STATEMENTS	8038:6	8072:6	8	
SELECTION	8038:6	8039:8	9	
KEYWORD	8038:6	8038:6	10	if
LEAF_NODE	8038:6	8038:6	11	if
LEAF_NODE	8038:9	8038:9	10	(
CONDITION	8038:10	8038:10	10	sample == 0
EXPR	8038:10	8038:20	11	sample == 0
FIELD	8038:10	8038:10	12	sample
LEAF_NODE	8038:10	8038:10	13	sample
EQ_OPERATOR	8038:17	8038:17	12	==
LEAF_NODE	8038:17	8038:17	13	==
FIELD	8038:20	8038:20	12	0
LEAF_NODE	8038:20	8038:20	13	0
LEAF_NODE	8038:21	8038:21	10	)
STATEMENTS	8039:8	8042:8	10	
LEAF_NODE	8039:8	8039:8	11	{
STATEMENTS	8040:8	8041:8	11	
EXPR_STATEMENT	8040:8	8040:33	12	src_byte = bit_offset / 8 ;
EXPR	8040:8	8040:8	13	src_byte = bit_offset / 8
ASSIGN	8040:8	8040:19	14	src_byte = bit_offset / 8
LVAL	8040:8	8040:8	15	src_byte
FIELD	8040:8	8040:8	16	src_byte
LEAF_NODE	8040:8	8040:8	17	src_byte
ASSIGN_OP	8040:17	8040:17	15	=
LEAF_NODE	8040:17	8040:17	16	=
RVAL	8040:19	8040:32	15	bit_offset / 8
FIELD	8040:19	8040:19	16	bit_offset
LEAF_NODE	8040:19	8040:19	17	bit_offset
LEAF_NODE	8040:30	8040:30	16	/
FIELD	8040:32	8040:32	16	8
LEAF_NODE	8040:32	8040:32	17	8
LEAF_NODE	8040:33	8040:33	13	;
EXPR_STATEMENT	8041:8	8041:33	12	src_bit = bit_offset % 8 ;
EXPR	8041:8	8041:8	13	src_bit = bit_offset % 8
ASSIGN	8041:8	8041:19	14	src_bit = bit_offset % 8
LVAL	8041:8	8041:8	15	src_bit
FIELD	8041:8	8041:8	16	src_bit
LEAF_NODE	8041:8	8041:8	17	src_bit
ASSIGN_OP	8041:17	8041:17	15	=
LEAF_NODE	8041:17	8041:17	16	=
RVAL	8041:19	8041:32	15	bit_offset % 8
FIELD	8041:19	8041:19	16	bit_offset
LEAF_NODE	8041:19	8041:19	17	bit_offset
LEAF_NODE	8041:30	8041:30	16	%
FIELD	8041:32	8041:32	16	8
LEAF_NODE	8041:32	8041:32	17	8
LEAF_NODE	8041:33	8041:33	13	;
LEAF_NODE	8042:8	8042:8	11	}
SELECTION	8043:6	8044:8	9	
KEYWORD	8043:6	8043:6	10	else
LEAF_NODE	8043:6	8043:6	11	else
STATEMENTS	8044:8	8047:8	10	
LEAF_NODE	8044:8	8044:8	11	{
STATEMENTS	8045:8	8046:8	11	
EXPR_STATEMENT	8045:8	8045:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8045:8	8045:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8045:8	8045:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8045:8	8045:8	15	src_byte
FIELD	8045:8	8045:8	16	src_byte
LEAF_NODE	8045:8	8045:8	17	src_byte
ASSIGN_OP	8045:17	8045:17	15	=
LEAF_NODE	8045:17	8045:17	16	=
RVAL	8045:19	8045:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8045:19	8045:19	16	(
FIELD	8045:20	8045:20	16	bit_offset
LEAF_NODE	8045:20	8045:20	17	bit_offset
LEAF_NODE	8045:31	8045:31	16	+
LEAF_NODE	8045:33	8045:33	16	(
FIELD	8045:34	8045:34	16	sample
LEAF_NODE	8045:34	8045:34	17	sample
LEAF_NODE	8045:41	8045:41	16	*
FIELD	8045:43	8045:43	16	bps
LEAF_NODE	8045:43	8045:43	17	bps
LEAF_NODE	8045:46	8045:46	16	)
LEAF_NODE	8045:47	8045:47	16	)
LEAF_NODE	8045:49	8045:49	16	/
FIELD	8045:51	8045:51	16	8
LEAF_NODE	8045:51	8045:51	17	8
LEAF_NODE	8045:52	8045:52	13	;
EXPR_STATEMENT	8046:8	8046:52	12	src_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8046:8	8046:8	13	src_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8046:8	8046:19	14	src_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8046:8	8046:8	15	src_bit
FIELD	8046:8	8046:8	16	src_bit
LEAF_NODE	8046:8	8046:8	17	src_bit
ASSIGN_OP	8046:17	8046:17	15	=
LEAF_NODE	8046:17	8046:17	16	=
RVAL	8046:19	8046:51	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8046:19	8046:19	16	(
FIELD	8046:20	8046:20	16	bit_offset
LEAF_NODE	8046:20	8046:20	17	bit_offset
LEAF_NODE	8046:31	8046:31	16	+
LEAF_NODE	8046:33	8046:33	16	(
FIELD	8046:34	8046:34	16	sample
LEAF_NODE	8046:34	8046:34	17	sample
LEAF_NODE	8046:41	8046:41	16	*
FIELD	8046:43	8046:43	16	bps
LEAF_NODE	8046:43	8046:43	17	bps
LEAF_NODE	8046:46	8046:46	16	)
LEAF_NODE	8046:47	8046:47	16	)
LEAF_NODE	8046:49	8046:49	16	%
FIELD	8046:51	8046:51	16	8
LEAF_NODE	8046:51	8046:51	17	8
LEAF_NODE	8046:52	8046:52	13	;
LEAF_NODE	8047:8	8047:8	11	}
SELECTION	8049:6	8050:1	9	
KEYWORD	8049:6	8049:6	10	switch
LEAF_NODE	8049:6	8049:6	11	switch
LEAF_NODE	8049:13	8049:13	10	(
CONDITION	8049:14	8049:14	10	rotation
EXPR	8049:14	8049:14	11	rotation
FIELD	8049:14	8049:14	12	rotation
LEAF_NODE	8049:14	8049:14	13	rotation
LEAF_NODE	8049:22	8049:22	10	)
STATEMENTS	8050:1	8057:8	10	
LEAF_NODE	8050:1	8050:1	11	{
STATEMENTS	8051:8	8056:18	11	
LABEL	8051:8	8051:16	12	case 90 :
LEAF_NODE	8051:8	8051:8	13	case
LEAF_NODE	8051:14	8051:14	13	90
LEAF_NODE	8051:16	8051:16	13	:
EXPR_STATEMENT	8051:18	8051:57	12	next = src + src_byte - ( row * rowsize ) ;
EXPR	8051:18	8051:18	13	next = src + src_byte - ( row * rowsize )
ASSIGN	8051:18	8051:25	14	next = src + src_byte - ( row * rowsize )
LVAL	8051:18	8051:18	15	next
FIELD	8051:18	8051:18	16	next
LEAF_NODE	8051:18	8051:18	17	next
ASSIGN_OP	8051:23	8051:23	15	=
LEAF_NODE	8051:23	8051:23	16	=
RVAL	8051:25	8051:56	15	src + src_byte - ( row * rowsize )
FIELD	8051:25	8051:25	16	src
LEAF_NODE	8051:25	8051:25	17	src
LEAF_NODE	8051:29	8051:29	16	+
FIELD	8051:31	8051:31	16	src_byte
LEAF_NODE	8051:31	8051:31	17	src_byte
LEAF_NODE	8051:40	8051:40	16	-
LEAF_NODE	8051:42	8051:42	16	(
FIELD	8051:43	8051:43	16	row
LEAF_NODE	8051:43	8051:43	17	row
LEAF_NODE	8051:47	8051:47	16	*
FIELD	8051:49	8051:49	16	rowsize
LEAF_NODE	8051:49	8051:49	17	rowsize
LEAF_NODE	8051:56	8051:56	16	)
LEAF_NODE	8051:57	8051:57	13	;
JUMP_STATEMENT	8052:18	8052:23	12	break DESTINATION ;
KEYWORD	8052:18	8052:18	13	break
LEAF_NODE	8052:18	8052:18	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8052:23	8052:23	13	;
LABEL	8053:8	8053:16	12	case 270 :
LEAF_NODE	8053:8	8053:8	13	case
LEAF_NODE	8053:13	8053:13	13	270
LEAF_NODE	8053:16	8053:16	13	:
EXPR_STATEMENT	8053:18	8053:57	12	next = src + src_byte + ( row * rowsize ) ;
EXPR	8053:18	8053:18	13	next = src + src_byte + ( row * rowsize )
ASSIGN	8053:18	8053:25	14	next = src + src_byte + ( row * rowsize )
LVAL	8053:18	8053:18	15	next
FIELD	8053:18	8053:18	16	next
LEAF_NODE	8053:18	8053:18	17	next
ASSIGN_OP	8053:23	8053:23	15	=
LEAF_NODE	8053:23	8053:23	16	=
RVAL	8053:25	8053:56	15	src + src_byte + ( row * rowsize )
FIELD	8053:25	8053:25	16	src
LEAF_NODE	8053:25	8053:25	17	src
LEAF_NODE	8053:29	8053:29	16	+
FIELD	8053:31	8053:31	16	src_byte
LEAF_NODE	8053:31	8053:31	17	src_byte
LEAF_NODE	8053:40	8053:40	16	+
LEAF_NODE	8053:42	8053:42	16	(
FIELD	8053:43	8053:43	16	row
LEAF_NODE	8053:43	8053:43	17	row
LEAF_NODE	8053:47	8053:47	16	*
FIELD	8053:49	8053:49	16	rowsize
LEAF_NODE	8053:49	8053:49	17	rowsize
LEAF_NODE	8053:56	8053:56	16	)
LEAF_NODE	8053:57	8053:57	13	;
JUMP_STATEMENT	8054:11	8054:16	12	break DESTINATION ;
KEYWORD	8054:11	8054:11	13	break
LEAF_NODE	8054:11	8054:11	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8054:16	8054:16	13	;
LABEL	8055:1	8055:8	12	default :
LEAF_NODE	8055:1	8055:1	13	default
LEAF_NODE	8055:8	8055:8	13	:
EXPR_STATEMENT	8055:11	8055:81	12	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation ) ;
EXPR	8055:11	8055:11	13	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
FUNCTION_CALL	8055:11	8055:80	14	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
CALLEE	8055:11	8055:11	15	TIFFError
LEAF_NODE	8055:11	8055:11	16	TIFFError
LEAF_NODE	8055:20	8055:20	15	(
ARGUMENT	8055:21	8055:21	15	"rotateContigSamples8bits"
FIELD	8055:21	8055:21	16	"rotateContigSamples8bits"
LEAF_NODE	8055:21	8055:21	17	"rotateContigSamples8bits"
LEAF_NODE	8055:47	8055:47	15	,
ARGUMENT	8055:49	8055:49	15	"Invalid rotation %d"
FIELD	8055:49	8055:49	16	"Invalid rotation %d"
LEAF_NODE	8055:49	8055:49	17	"Invalid rotation %d"
LEAF_NODE	8055:70	8055:70	15	,
ARGUMENT	8055:72	8055:72	15	rotation
FIELD	8055:72	8055:72	16	rotation
LEAF_NODE	8055:72	8055:72	17	rotation
LEAF_NODE	8055:80	8055:80	15	)
LEAF_NODE	8055:81	8055:81	13	;
JUMP_STATEMENT	8056:18	8056:28	12	return ( 1 ) ;
KEYWORD	8056:18	8056:18	13	return
LEAF_NODE	8056:18	8056:18	14	return
DESTINATION	8056:25	8056:25	13	( 1 )
EXPR	8056:25	8056:27	14	( 1 )
LEAF_NODE	8056:25	8056:25	15	(
FIELD	8056:26	8056:26	15	1
LEAF_NODE	8056:26	8056:26	16	1
LEAF_NODE	8056:27	8056:27	15	)
LEAF_NODE	8056:28	8056:28	13	;
LEAF_NODE	8057:8	8057:8	11	}
EXPR_STATEMENT	8058:6	8058:49	9	matchbits = maskbits << ( 8 - src_bit - bps ) ;
EXPR	8058:6	8058:6	10	matchbits = maskbits << ( 8 - src_bit - bps )
ASSIGN	8058:6	8058:18	11	matchbits = maskbits << ( 8 - src_bit - bps )
LVAL	8058:6	8058:6	12	matchbits
FIELD	8058:6	8058:6	13	matchbits
LEAF_NODE	8058:6	8058:6	14	matchbits
ASSIGN_OP	8058:16	8058:16	12	=
LEAF_NODE	8058:16	8058:16	13	=
RVAL	8058:18	8058:48	12	maskbits << ( 8 - src_bit - bps )
FIELD	8058:18	8058:18	13	maskbits
LEAF_NODE	8058:18	8058:18	14	maskbits
LEAF_NODE	8058:27	8058:27	13	<<
LEAF_NODE	8058:30	8058:30	13	(
FIELD	8058:31	8058:31	13	8
LEAF_NODE	8058:31	8058:31	14	8
LEAF_NODE	8058:33	8058:33	13	-
FIELD	8058:35	8058:35	13	src_bit
LEAF_NODE	8058:35	8058:35	14	src_bit
LEAF_NODE	8058:43	8058:43	13	-
FIELD	8058:45	8058:45	13	bps
LEAF_NODE	8058:45	8058:45	14	bps
LEAF_NODE	8058:48	8058:48	13	)
LEAF_NODE	8058:49	8058:49	10	;
LEAF_NODE	8059:6	8059:6	9	buff1
LEAF_NODE	8059:12	8059:12	9	=
LEAF_NODE	8059:14	8059:14	9	(
LEAF_NODE	8059:15	8059:15	9	(
LEAF_NODE	8059:16	8059:16	9	*
LEAF_NODE	8059:17	8059:17	9	next
LEAF_NODE	8059:21	8059:21	9	)
LEAF_NODE	8059:23	8059:23	9	&
LEAF_NODE	8059:25	8059:25	9	matchbits
LEAF_NODE	8059:34	8059:34	9	)
LEAF_NODE	8059:36	8059:36	9	<<
LEAF_NODE	8059:39	8059:39	9	(
LEAF_NODE	8059:40	8059:40	9	src_bit
LEAF_NODE	8059:47	8059:47	9	)
LEAF_NODE	8059:48	8059:48	9	;
SELECTION	8062:6	8063:8	9	
KEYWORD	8062:6	8062:6	10	if
LEAF_NODE	8062:6	8062:6	11	if
LEAF_NODE	8062:9	8062:9	10	(
CONDITION	8062:10	8062:10	10	ready_bits >= 8
EXPR	8062:10	8062:24	11	ready_bits >= 8
FIELD	8062:10	8062:10	12	ready_bits
LEAF_NODE	8062:10	8062:10	13	ready_bits
REL_OPERATOR	8062:21	8062:21	12	>=
LEAF_NODE	8062:21	8062:21	13	>=
FIELD	8062:24	8062:24	12	8
LEAF_NODE	8062:24	8062:24	13	8
LEAF_NODE	8062:25	8062:25	10	)
STATEMENTS	8063:8	8067:8	10	
LEAF_NODE	8063:8	8063:8	11	{
STATEMENTS	8064:8	8066:8	11	
EXPR_STATEMENT	8064:8	8064:22	12	* dst ++ = buff2 ;
EXPR	8064:8	8064:8	13	* dst ++ = buff2
ASSIGN	8064:8	8064:17	14	* dst ++ = buff2
LVAL	8064:8	8064:8	15	* dst ++
UNARY_EXPR	8064:8	8064:9	16	* dst ++
UNARY_OPERATOR	8064:8	8064:8	17	*
LEAF_NODE	8064:8	8064:8	18	*
FIELD	8064:9	8064:12	17	dst ++
LEAF_NODE	8064:9	8064:9	18	dst
LEAF_NODE	8064:12	8064:12	18	++
ASSIGN_OP	8064:15	8064:15	15	=
LEAF_NODE	8064:15	8064:15	16	=
RVAL	8064:17	8064:17	15	buff2
FIELD	8064:17	8064:17	16	buff2
LEAF_NODE	8064:17	8064:17	17	buff2
LEAF_NODE	8064:22	8064:22	13	;
EXPR_STATEMENT	8065:8	8065:21	12	buff2 = buff1 ;
EXPR	8065:8	8065:8	13	buff2 = buff1
ASSIGN	8065:8	8065:16	14	buff2 = buff1
LVAL	8065:8	8065:8	15	buff2
FIELD	8065:8	8065:8	16	buff2
LEAF_NODE	8065:8	8065:8	17	buff2
ASSIGN_OP	8065:14	8065:14	15	=
LEAF_NODE	8065:14	8065:14	16	=
RVAL	8065:16	8065:16	15	buff1
FIELD	8065:16	8065:16	16	buff1
LEAF_NODE	8065:16	8065:16	17	buff1
LEAF_NODE	8065:21	8065:21	13	;
EXPR_STATEMENT	8066:8	8066:23	12	ready_bits -= 8 ;
EXPR	8066:8	8066:8	13	ready_bits -= 8
ASSIGN	8066:8	8066:22	14	ready_bits -= 8
LVAL	8066:8	8066:8	15	ready_bits
FIELD	8066:8	8066:8	16	ready_bits
LEAF_NODE	8066:8	8066:8	17	ready_bits
ASSIGN_OP	8066:19	8066:19	15	-=
LEAF_NODE	8066:19	8066:19	16	-=
RVAL	8066:22	8066:22	15	8
FIELD	8066:22	8066:22	16	8
LEAF_NODE	8066:22	8066:22	17	8
LEAF_NODE	8066:23	8066:23	13	;
LEAF_NODE	8067:8	8067:8	11	}
SELECTION	8068:6	8069:8	9	
KEYWORD	8068:6	8068:6	10	else
LEAF_NODE	8068:6	8068:6	11	else
STATEMENTS	8069:8	8071:8	10	
LEAF_NODE	8069:8	8069:8	11	{
STATEMENTS	8070:8	8070:8	11	
EXPR_STATEMENT	8070:8	8070:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8070:8	8070:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8070:8	8070:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8070:8	8070:8	15	buff2
FIELD	8070:8	8070:8	16	buff2
LEAF_NODE	8070:8	8070:8	17	buff2
ASSIGN_OP	8070:14	8070:14	15	=
LEAF_NODE	8070:14	8070:14	16	=
RVAL	8070:16	8070:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8070:16	8070:16	16	(
BIT_OR	8070:17	8070:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8070:17	8070:17	17	buff2
FIELD	8070:17	8070:17	18	buff2
LEAF_NODE	8070:17	8070:17	19	buff2
LEAF_NODE	8070:23	8070:23	17	|
BIT_OR_ELEM	8070:25	8070:45	17	( buff1 >> ready_bits )
LEAF_NODE	8070:25	8070:25	18	(
FIELD	8070:26	8070:26	18	buff1
LEAF_NODE	8070:26	8070:26	19	buff1
LEAF_NODE	8070:32	8070:32	18	>>
FIELD	8070:35	8070:35	18	ready_bits
LEAF_NODE	8070:35	8070:35	19	ready_bits
LEAF_NODE	8070:45	8070:45	18	)
LEAF_NODE	8070:46	8070:46	16	)
LEAF_NODE	8070:47	8070:47	13	;
LEAF_NODE	8071:8	8071:8	11	}
EXPR_STATEMENT	8072:6	8072:23	9	ready_bits += bps ;
EXPR	8072:6	8072:6	10	ready_bits += bps
ASSIGN	8072:6	8072:20	11	ready_bits += bps
LVAL	8072:6	8072:6	12	ready_bits
FIELD	8072:6	8072:6	13	ready_bits
LEAF_NODE	8072:6	8072:6	14	ready_bits
ASSIGN_OP	8072:17	8072:17	12	+=
LEAF_NODE	8072:17	8072:17	13	+=
RVAL	8072:20	8072:20	12	bps
FIELD	8072:20	8072:20	13	bps
LEAF_NODE	8072:20	8072:20	14	bps
LEAF_NODE	8072:23	8072:23	10	;
LEAF_NODE	8073:6	8073:6	8	}
LEAF_NODE	8074:4	8074:4	5	}
SELECTION	8076:2	8077:4	3	
KEYWORD	8076:2	8076:2	4	if
LEAF_NODE	8076:2	8076:2	5	if
LEAF_NODE	8076:5	8076:5	4	(
CONDITION	8076:6	8076:6	4	ready_bits > 0
EXPR	8076:6	8076:19	5	ready_bits > 0
FIELD	8076:6	8076:6	6	ready_bits
LEAF_NODE	8076:6	8076:6	7	ready_bits
REL_OPERATOR	8076:17	8076:17	6	>
LEAF_NODE	8076:17	8076:17	7	>
FIELD	8076:19	8076:19	6	0
LEAF_NODE	8076:19	8076:19	7	0
LEAF_NODE	8076:20	8076:20	4	)
STATEMENTS	8077:4	8080:4	4	
LEAF_NODE	8077:4	8077:4	5	{
STATEMENTS	8078:4	8079:4	5	
EXPR_STATEMENT	8078:4	8078:61	6	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) ) ;
EXPR	8078:4	8078:4	7	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
ASSIGN	8078:4	8078:12	8	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LVAL	8078:4	8078:4	9	buff1
FIELD	8078:4	8078:4	10	buff1
LEAF_NODE	8078:4	8078:4	11	buff1
ASSIGN_OP	8078:10	8078:10	9	=
LEAF_NODE	8078:10	8078:10	10	=
RVAL	8078:12	8078:60	9	( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LEAF_NODE	8078:12	8078:12	10	(
FIELD	8078:13	8078:13	10	buff2
LEAF_NODE	8078:13	8078:13	11	buff2
LEAF_NODE	8078:19	8078:19	10	&
LEAF_NODE	8078:21	8078:21	10	(
LEAF_NODE	8078:22	8078:22	10	(
TYPE_NAME	8078:23	8078:32	10	unsigned int
LEAF_NODE	8078:23	8078:23	11	unsigned
LEAF_NODE	8078:32	8078:32	11	int
LEAF_NODE	8078:35	8078:35	10	)
FIELD	8078:36	8078:36	10	255
LEAF_NODE	8078:36	8078:36	11	255
LEAF_NODE	8078:40	8078:40	10	<<
LEAF_NODE	8078:43	8078:43	10	(
FIELD	8078:44	8078:44	10	8
LEAF_NODE	8078:44	8078:44	11	8
LEAF_NODE	8078:46	8078:46	10	-
FIELD	8078:48	8078:48	10	ready_bits
LEAF_NODE	8078:48	8078:48	11	ready_bits
LEAF_NODE	8078:58	8078:58	10	)
LEAF_NODE	8078:59	8078:59	10	)
LEAF_NODE	8078:60	8078:60	10	)
LEAF_NODE	8078:61	8078:61	7	;
EXPR_STATEMENT	8079:4	8079:18	6	* dst ++ = buff1 ;
EXPR	8079:4	8079:4	7	* dst ++ = buff1
ASSIGN	8079:4	8079:13	8	* dst ++ = buff1
LVAL	8079:4	8079:4	9	* dst ++
UNARY_EXPR	8079:4	8079:5	10	* dst ++
UNARY_OPERATOR	8079:4	8079:4	11	*
LEAF_NODE	8079:4	8079:4	12	*
FIELD	8079:5	8079:8	11	dst ++
LEAF_NODE	8079:5	8079:5	12	dst
LEAF_NODE	8079:8	8079:8	12	++
ASSIGN_OP	8079:11	8079:11	9	=
LEAF_NODE	8079:11	8079:11	10	=
RVAL	8079:13	8079:13	9	buff1
FIELD	8079:13	8079:13	10	buff1
LEAF_NODE	8079:13	8079:13	11	buff1
LEAF_NODE	8079:18	8079:18	7	;
LEAF_NODE	8080:4	8080:4	5	}
JUMP_STATEMENT	8082:2	8082:12	3	return ( 0 ) ;
KEYWORD	8082:2	8082:2	4	return
LEAF_NODE	8082:2	8082:2	5	return
DESTINATION	8082:9	8082:9	4	( 0 )
EXPR	8082:9	8082:11	5	( 0 )
LEAF_NODE	8082:9	8082:9	6	(
FIELD	8082:10	8082:10	6	0
LEAF_NODE	8082:10	8082:10	7	0
LEAF_NODE	8082:11	8082:11	6	)
LEAF_NODE	8082:12	8082:12	4	;
LEAF_NODE	8083:2	8083:2	2	}
FUNCTION_DEF	8086:0	8167:2	1	
RETURN_TYPE	8086:0	8086:7	2	static int
LEAF_NODE	8086:0	8086:0	3	static
TYPE_NAME	8086:7	8086:7	3	int
LEAF_NODE	8086:7	8086:7	4	int
FUNCTION_NAME	8087:0	8087:0	2	rotateContigSamples16bits
LEAF_NODE	8087:0	8087:0	3	rotateContigSamples16bits
PARAMETER_LIST	8087:25	8088:76	2	( uint16 rotation , uint16 spp , uint16 bps , uint32 width , uint32 length , uint32 col , uint8 * src , uint8 * dst )
LEAF_NODE	8087:25	8087:25	3	(
PARAMETER_DECL	8087:26	8087:33	3	uint16 rotation
TYPE	8087:26	8087:26	4	uint16
TYPE_NAME	8087:26	8087:26	5	uint16
LEAF_NODE	8087:26	8087:26	6	uint16
NAME	8087:33	8087:33	4	rotation
LEAF_NODE	8087:33	8087:33	5	rotation
LEAF_NODE	8087:41	8087:41	3	,
PARAMETER_DECL	8087:43	8087:50	3	uint16 spp
TYPE	8087:43	8087:43	4	uint16
TYPE_NAME	8087:43	8087:43	5	uint16
LEAF_NODE	8087:43	8087:43	6	uint16
NAME	8087:50	8087:50	4	spp
LEAF_NODE	8087:50	8087:50	5	spp
LEAF_NODE	8087:53	8087:53	3	,
PARAMETER_DECL	8087:55	8087:62	3	uint16 bps
TYPE	8087:55	8087:55	4	uint16
TYPE_NAME	8087:55	8087:55	5	uint16
LEAF_NODE	8087:55	8087:55	6	uint16
NAME	8087:62	8087:62	4	bps
LEAF_NODE	8087:62	8087:62	5	bps
LEAF_NODE	8087:65	8087:65	3	,
PARAMETER_DECL	8087:67	8087:74	3	uint32 width
TYPE	8087:67	8087:67	4	uint32
TYPE_NAME	8087:67	8087:67	5	uint32
LEAF_NODE	8087:67	8087:67	6	uint32
NAME	8087:74	8087:74	4	width
LEAF_NODE	8087:74	8087:74	5	width
LEAF_NODE	8087:79	8087:79	3	,
PARAMETER_DECL	8088:25	8088:32	3	uint32 length
TYPE	8088:25	8088:25	4	uint32
TYPE_NAME	8088:25	8088:25	5	uint32
LEAF_NODE	8088:25	8088:25	6	uint32
NAME	8088:32	8088:32	4	length
LEAF_NODE	8088:32	8088:32	5	length
LEAF_NODE	8088:38	8088:38	3	,
PARAMETER_DECL	8088:42	8088:49	3	uint32 col
TYPE	8088:42	8088:42	4	uint32
TYPE_NAME	8088:42	8088:42	5	uint32
LEAF_NODE	8088:42	8088:42	6	uint32
NAME	8088:49	8088:49	4	col
LEAF_NODE	8088:49	8088:49	5	col
LEAF_NODE	8088:52	8088:52	3	,
PARAMETER_DECL	8088:54	8088:61	3	uint8 * src
TYPE	8088:54	8088:60	4	uint8 *
TYPE_NAME	8088:54	8088:54	5	uint8
LEAF_NODE	8088:54	8088:54	6	uint8
POINTER	8088:60	8088:60	5	*
LEAF_NODE	8088:60	8088:60	6	*
NAME	8088:61	8088:61	4	src
LEAF_NODE	8088:61	8088:61	5	src
LEAF_NODE	8088:64	8088:64	3	,
PARAMETER_DECL	8088:66	8088:73	3	uint8 * dst
TYPE	8088:66	8088:72	4	uint8 *
TYPE_NAME	8088:66	8088:66	5	uint8
LEAF_NODE	8088:66	8088:66	6	uint8
POINTER	8088:72	8088:72	5	*
LEAF_NODE	8088:72	8088:72	6	*
NAME	8088:73	8088:73	4	dst
LEAF_NODE	8088:73	8088:73	5	dst
LEAF_NODE	8088:76	8088:76	3	)
LEAF_NODE	8089:2	8089:2	2	{
STATEMENTS	8090:2	8166:2	2	
SIMPLE_DECL	8090:2	8090:25	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8090:2	8090:11	4	int ready_bits ; ready_bits = 0
TYPE	8090:2	8090:2	5	int
TYPE_NAME	8090:2	8090:2	6	int
LEAF_NODE	8090:2	8090:2	7	int
NAME	8090:11	8090:11	5	ready_bits
LEAF_NODE	8090:11	8090:11	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8090:11	8090:11	5	ready_bits = 0
ASSIGN	8090:11	8090:24	6	ready_bits = 0
LVAL	8090:11	8090:11	7	ready_bits
NAME	8090:11	8090:11	8	ready_bits
LEAF_NODE	8090:11	8090:11	9	ready_bits
ASSIGN_OP	8090:22	8090:22	7	=
LEAF_NODE	8090:22	8090:22	8	=
RVAL	8090:24	8090:24	7	0
FIELD	8090:24	8090:24	8	0
LEAF_NODE	8090:24	8090:24	9	0
LEAF_NODE	8090:25	8090:25	4	;
SIMPLE_DECL	8091:2	8091:35	3	uint32 row , uint32 rowsize , uint32 bit_offset ;
INIT_DECL_LIST	8091:2	8091:2	4	uint32 row , uint32 rowsize , uint32 bit_offset
VAR_DECL	8091:2	8091:11	5	uint32 row
TYPE	8091:2	8091:2	6	uint32
TYPE_NAME	8091:2	8091:2	7	uint32
LEAF_NODE	8091:2	8091:2	8	uint32
NAME	8091:11	8091:11	6	row
LEAF_NODE	8091:11	8091:11	7	row
LEAF_NODE	8091:14	8091:14	5	,
INIT_DECL_LIST	8091:2	8091:2	5	uint32 rowsize , uint32 bit_offset
VAR_DECL	8091:2	8091:16	6	uint32 rowsize
TYPE	8091:2	8091:2	7	uint32
TYPE_NAME	8091:2	8091:2	8	uint32
LEAF_NODE	8091:2	8091:2	9	uint32
NAME	8091:16	8091:16	7	rowsize
LEAF_NODE	8091:16	8091:16	8	rowsize
LEAF_NODE	8091:23	8091:23	6	,
VAR_DECL	8091:2	8091:25	6	uint32 bit_offset
TYPE	8091:2	8091:2	7	uint32
TYPE_NAME	8091:2	8091:2	8	uint32
LEAF_NODE	8091:2	8091:2	9	uint32
NAME	8091:25	8091:25	7	bit_offset
LEAF_NODE	8091:25	8091:25	8	bit_offset
LEAF_NODE	8091:35	8091:35	4	;
SIMPLE_DECL	8092:2	8092:36	3	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	8092:2	8092:2	4	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	8092:2	8092:11	5	uint32 src_byte ; src_byte = 0
TYPE	8092:2	8092:2	6	uint32
TYPE_NAME	8092:2	8092:2	7	uint32
LEAF_NODE	8092:2	8092:2	8	uint32
NAME	8092:11	8092:11	6	src_byte
LEAF_NODE	8092:11	8092:11	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	8092:11	8092:11	6	src_byte = 0
ASSIGN	8092:11	8092:22	7	src_byte = 0
LVAL	8092:11	8092:11	8	src_byte
NAME	8092:11	8092:11	9	src_byte
LEAF_NODE	8092:11	8092:11	10	src_byte
ASSIGN_OP	8092:20	8092:20	8	=
LEAF_NODE	8092:20	8092:20	9	=
RVAL	8092:22	8092:22	8	0
FIELD	8092:22	8092:22	9	0
LEAF_NODE	8092:22	8092:22	10	0
LEAF_NODE	8092:23	8092:23	5	,
VAR_DECL	8092:2	8092:25	5	uint32 src_bit ; src_bit = 0
TYPE	8092:2	8092:2	6	uint32
TYPE_NAME	8092:2	8092:2	7	uint32
LEAF_NODE	8092:2	8092:2	8	uint32
NAME	8092:25	8092:25	6	src_bit
LEAF_NODE	8092:25	8092:25	7	src_bit
LEAF_NODE	0:0	0:0	6	;
INIT	8092:25	8092:25	6	src_bit = 0
ASSIGN	8092:25	8092:35	7	src_bit = 0
LVAL	8092:25	8092:25	8	src_bit
NAME	8092:25	8092:25	9	src_bit
LEAF_NODE	8092:25	8092:25	10	src_bit
ASSIGN_OP	8092:33	8092:33	8	=
LEAF_NODE	8092:33	8092:33	9	=
RVAL	8092:35	8092:35	8	0
FIELD	8092:35	8092:35	9	0
LEAF_NODE	8092:35	8092:35	10	0
LEAF_NODE	8092:36	8092:36	4	;
SIMPLE_DECL	8093:2	8093:38	3	uint16 matchbits ; matchbits = 0 , uint16 maskbits ; maskbits = 0 ;
INIT_DECL_LIST	8093:2	8093:2	4	uint16 matchbits ; matchbits = 0 , uint16 maskbits ; maskbits = 0
VAR_DECL	8093:2	8093:11	5	uint16 matchbits ; matchbits = 0
TYPE	8093:2	8093:2	6	uint16
TYPE_NAME	8093:2	8093:2	7	uint16
LEAF_NODE	8093:2	8093:2	8	uint16
NAME	8093:11	8093:11	6	matchbits
LEAF_NODE	8093:11	8093:11	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	8093:11	8093:11	6	matchbits = 0
ASSIGN	8093:11	8093:23	7	matchbits = 0
LVAL	8093:11	8093:11	8	matchbits
NAME	8093:11	8093:11	9	matchbits
LEAF_NODE	8093:11	8093:11	10	matchbits
ASSIGN_OP	8093:21	8093:21	8	=
LEAF_NODE	8093:21	8093:21	9	=
RVAL	8093:23	8093:23	8	0
FIELD	8093:23	8093:23	9	0
LEAF_NODE	8093:23	8093:23	10	0
LEAF_NODE	8093:24	8093:24	5	,
VAR_DECL	8093:2	8093:26	5	uint16 maskbits ; maskbits = 0
TYPE	8093:2	8093:2	6	uint16
TYPE_NAME	8093:2	8093:2	7	uint16
LEAF_NODE	8093:2	8093:2	8	uint16
NAME	8093:26	8093:26	6	maskbits
LEAF_NODE	8093:26	8093:26	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	8093:26	8093:26	6	maskbits = 0
ASSIGN	8093:26	8093:37	7	maskbits = 0
LVAL	8093:26	8093:26	8	maskbits
NAME	8093:26	8093:26	9	maskbits
LEAF_NODE	8093:26	8093:26	10	maskbits
ASSIGN_OP	8093:35	8093:35	8	=
LEAF_NODE	8093:35	8093:35	9	=
RVAL	8093:37	8093:37	8	0
FIELD	8093:37	8093:37	9	0
LEAF_NODE	8093:37	8093:37	10	0
LEAF_NODE	8093:38	8093:38	4	;
SIMPLE_DECL	8094:2	8094:31	3	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	8094:2	8094:2	4	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0
VAR_DECL	8094:2	8094:11	5	uint16 buff1 ; buff1 = 0
TYPE	8094:2	8094:2	6	uint16
TYPE_NAME	8094:2	8094:2	7	uint16
LEAF_NODE	8094:2	8094:2	8	uint16
NAME	8094:11	8094:11	6	buff1
LEAF_NODE	8094:11	8094:11	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8094:11	8094:11	6	buff1 = 0
ASSIGN	8094:11	8094:19	7	buff1 = 0
LVAL	8094:11	8094:11	8	buff1
NAME	8094:11	8094:11	9	buff1
LEAF_NODE	8094:11	8094:11	10	buff1
ASSIGN_OP	8094:17	8094:17	8	=
LEAF_NODE	8094:17	8094:17	9	=
RVAL	8094:19	8094:19	8	0
FIELD	8094:19	8094:19	9	0
LEAF_NODE	8094:19	8094:19	10	0
LEAF_NODE	8094:20	8094:20	5	,
VAR_DECL	8094:2	8094:22	5	uint16 buff2 ; buff2 = 0
TYPE	8094:2	8094:2	6	uint16
TYPE_NAME	8094:2	8094:2	7	uint16
LEAF_NODE	8094:2	8094:2	8	uint16
NAME	8094:22	8094:22	6	buff2
LEAF_NODE	8094:22	8094:22	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	8094:22	8094:22	6	buff2 = 0
ASSIGN	8094:22	8094:30	7	buff2 = 0
LVAL	8094:22	8094:22	8	buff2
NAME	8094:22	8094:22	9	buff2
LEAF_NODE	8094:22	8094:22	10	buff2
ASSIGN_OP	8094:28	8094:28	8	=
LEAF_NODE	8094:28	8094:28	9	=
RVAL	8094:30	8094:30	8	0
FIELD	8094:30	8094:30	9	0
LEAF_NODE	8094:30	8094:30	10	0
LEAF_NODE	8094:31	8094:31	4	;
SIMPLE_DECL	8095:2	8095:23	3	uint8 bytebuff ; bytebuff = 0 ;
VAR_DECL	8095:2	8095:11	4	uint8 bytebuff ; bytebuff = 0
TYPE	8095:2	8095:2	5	uint8
TYPE_NAME	8095:2	8095:2	6	uint8
LEAF_NODE	8095:2	8095:2	7	uint8
NAME	8095:11	8095:11	5	bytebuff
LEAF_NODE	8095:11	8095:11	6	bytebuff
LEAF_NODE	0:0	0:0	5	;
INIT	8095:11	8095:11	5	bytebuff = 0
ASSIGN	8095:11	8095:22	6	bytebuff = 0
LVAL	8095:11	8095:11	7	bytebuff
NAME	8095:11	8095:11	8	bytebuff
LEAF_NODE	8095:11	8095:11	9	bytebuff
ASSIGN_OP	8095:20	8095:20	7	=
LEAF_NODE	8095:20	8095:20	8	=
RVAL	8095:22	8095:22	7	0
FIELD	8095:22	8095:22	8	0
LEAF_NODE	8095:22	8095:22	9	0
LEAF_NODE	8095:23	8095:23	4	;
SIMPLE_DECL	8096:2	8096:15	3	uint8 * next ;
VAR_DECL	8096:2	8096:11	4	uint8 * next
TYPE	8096:2	8096:10	5	uint8 *
TYPE_NAME	8096:2	8096:2	6	uint8
LEAF_NODE	8096:2	8096:2	7	uint8
POINTER	8096:10	8096:10	6	*
LEAF_NODE	8096:10	8096:10	7	*
NAME	8096:11	8096:11	5	next
LEAF_NODE	8096:11	8096:11	6	next
LEAF_NODE	8096:15	8096:15	4	;
SIMPLE_DECL	8097:2	8097:18	3	tsample_t sample ;
VAR_DECL	8097:2	8097:12	4	tsample_t sample
TYPE	8097:2	8097:2	5	tsample_t
TYPE_NAME	8097:2	8097:2	6	tsample_t
LEAF_NODE	8097:2	8097:2	7	tsample_t
NAME	8097:12	8097:12	5	sample
LEAF_NODE	8097:12	8097:12	6	sample
LEAF_NODE	8097:18	8097:18	4	;
SELECTION	8099:2	8100:4	3	
KEYWORD	8099:2	8099:2	4	if
LEAF_NODE	8099:2	8099:2	5	if
LEAF_NODE	8099:5	8099:5	4	(
CONDITION	8099:6	8099:6	4	( src == NULL ) || ( dst == NULL )
EXPR	8099:6	8099:6	5	( src == NULL ) || ( dst == NULL )
OR	8099:6	8099:23	6	( src == NULL ) || ( dst == NULL )
EXPR	8099:6	8099:18	7	( src == NULL )
LEAF_NODE	8099:6	8099:6	8	(
FIELD	8099:7	8099:7	8	src
LEAF_NODE	8099:7	8099:7	9	src
EQ_OPERATOR	8099:11	8099:11	8	==
LEAF_NODE	8099:11	8099:11	9	==
FIELD	8099:14	8099:14	8	NULL
LEAF_NODE	8099:14	8099:14	9	NULL
LEAF_NODE	8099:18	8099:18	8	)
LEAF_NODE	8099:20	8099:20	7	||
EXPR	8099:23	8099:35	7	( dst == NULL )
LEAF_NODE	8099:23	8099:23	8	(
FIELD	8099:24	8099:24	8	dst
LEAF_NODE	8099:24	8099:24	9	dst
EQ_OPERATOR	8099:28	8099:28	8	==
LEAF_NODE	8099:28	8099:28	9	==
FIELD	8099:31	8099:31	8	NULL
LEAF_NODE	8099:31	8099:31	9	NULL
LEAF_NODE	8099:35	8099:35	8	)
LEAF_NODE	8099:36	8099:36	4	)
STATEMENTS	8100:4	8103:4	4	
LEAF_NODE	8100:4	8100:4	5	{
STATEMENTS	8101:4	8102:4	5	
EXPR_STATEMENT	8101:4	8101:78	6	TIFFError ( "rotateContigSamples16bits" , "Invalid src or destination buffer" ) ;
EXPR	8101:4	8101:4	7	TIFFError ( "rotateContigSamples16bits" , "Invalid src or destination buffer" )
FUNCTION_CALL	8101:4	8101:77	8	TIFFError ( "rotateContigSamples16bits" , "Invalid src or destination buffer" )
CALLEE	8101:4	8101:4	9	TIFFError
LEAF_NODE	8101:4	8101:4	10	TIFFError
LEAF_NODE	8101:13	8101:13	9	(
ARGUMENT	8101:14	8101:14	9	"rotateContigSamples16bits"
FIELD	8101:14	8101:14	10	"rotateContigSamples16bits"
LEAF_NODE	8101:14	8101:14	11	"rotateContigSamples16bits"
LEAF_NODE	8101:41	8101:41	9	,
ARGUMENT	8101:42	8101:42	9	"Invalid src or destination buffer"
FIELD	8101:42	8101:42	10	"Invalid src or destination buffer"
LEAF_NODE	8101:42	8101:42	11	"Invalid src or destination buffer"
LEAF_NODE	8101:77	8101:77	9	)
LEAF_NODE	8101:78	8101:78	7	;
JUMP_STATEMENT	8102:4	8102:14	6	return ( 1 ) ;
KEYWORD	8102:4	8102:4	7	return
LEAF_NODE	8102:4	8102:4	8	return
DESTINATION	8102:11	8102:11	7	( 1 )
EXPR	8102:11	8102:13	8	( 1 )
LEAF_NODE	8102:11	8102:11	9	(
FIELD	8102:12	8102:12	9	1
LEAF_NODE	8102:12	8102:12	10	1
LEAF_NODE	8102:13	8102:13	9	)
LEAF_NODE	8102:14	8102:14	7	;
LEAF_NODE	8103:4	8103:4	5	}
LEAF_NODE	8105:2	8105:2	3	rowsize
LEAF_NODE	8105:10	8105:10	3	=
LEAF_NODE	8105:12	8105:12	3	(
LEAF_NODE	8105:13	8105:13	3	(
LEAF_NODE	8105:14	8105:14	3	bps
LEAF_NODE	8105:18	8105:18	3	*
LEAF_NODE	8105:20	8105:20	3	spp
LEAF_NODE	8105:24	8105:24	3	*
LEAF_NODE	8105:26	8105:26	3	width
LEAF_NODE	8105:31	8105:31	3	)
LEAF_NODE	8105:33	8105:33	3	+
LEAF_NODE	8105:35	8105:35	3	7
LEAF_NODE	8105:36	8105:36	3	)
LEAF_NODE	8105:38	8105:38	3	/
EXPR_STATEMENT	8105:40	8105:41	3	8 ;
EXPR	8105:40	8105:40	4	8
FIELD	8105:40	8105:40	5	8
LEAF_NODE	8105:40	8105:40	6	8
LEAF_NODE	8105:41	8105:41	4	;
EXPR_STATEMENT	8106:2	8106:16	3	ready_bits = 0 ;
EXPR	8106:2	8106:2	4	ready_bits = 0
ASSIGN	8106:2	8106:15	5	ready_bits = 0
LVAL	8106:2	8106:2	6	ready_bits
FIELD	8106:2	8106:2	7	ready_bits
LEAF_NODE	8106:2	8106:2	8	ready_bits
ASSIGN_OP	8106:13	8106:13	6	=
LEAF_NODE	8106:13	8106:13	7	=
RVAL	8106:15	8106:15	6	0
FIELD	8106:15	8106:15	7	0
LEAF_NODE	8106:15	8106:15	8	0
LEAF_NODE	8106:16	8106:16	4	;
EXPR_STATEMENT	8107:2	8107:38	3	maskbits = ( uint16 ) - 1 >> ( 16 - bps ) ;
EXPR	8107:2	8107:2	4	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
ASSIGN	8107:2	8107:14	5	maskbits = ( uint16 ) - 1 >> ( 16 - bps )
LVAL	8107:2	8107:2	6	maskbits
FIELD	8107:2	8107:2	7	maskbits
LEAF_NODE	8107:2	8107:2	8	maskbits
ASSIGN_OP	8107:11	8107:11	6	=
LEAF_NODE	8107:11	8107:11	7	=
RVAL	8107:14	8107:37	6	( uint16 ) - 1 >> ( 16 - bps )
LEAF_NODE	8107:14	8107:14	7	(
TYPE_NAME	8107:15	8107:15	7	uint16
LEAF_NODE	8107:15	8107:15	8	uint16
LEAF_NODE	8107:21	8107:21	7	)
UNARY_EXPR	8107:22	8107:23	7	- 1
UNARY_OPERATOR	8107:22	8107:22	8	-
LEAF_NODE	8107:22	8107:22	9	-
FIELD	8107:23	8107:23	8	1
LEAF_NODE	8107:23	8107:23	9	1
LEAF_NODE	8107:25	8107:25	7	>>
LEAF_NODE	8107:28	8107:28	7	(
FIELD	8107:29	8107:29	7	16
LEAF_NODE	8107:29	8107:29	8	16
LEAF_NODE	8107:32	8107:32	7	-
FIELD	8107:34	8107:34	7	bps
LEAF_NODE	8107:34	8107:34	8	bps
LEAF_NODE	8107:37	8107:37	7	)
LEAF_NODE	8107:38	8107:38	4	;
EXPR_STATEMENT	8108:2	8108:19	3	buff1 = buff2 = 0 ;
EXPR	8108:2	8108:2	4	buff1 = buff2 = 0
ASSIGN	8108:2	8108:10	5	buff1 = buff2 = 0
LVAL	8108:2	8108:2	6	buff1
FIELD	8108:2	8108:2	7	buff1
LEAF_NODE	8108:2	8108:2	8	buff1
ASSIGN_OP	8108:8	8108:8	6	=
LEAF_NODE	8108:8	8108:8	7	=
RVAL	8108:10	8108:10	6	buff2 = 0
ASSIGN	8108:10	8108:18	7	buff2 = 0
LVAL	8108:10	8108:10	8	buff2
FIELD	8108:10	8108:10	9	buff2
LEAF_NODE	8108:10	8108:10	10	buff2
ASSIGN_OP	8108:16	8108:16	8	=
LEAF_NODE	8108:16	8108:16	9	=
RVAL	8108:18	8108:18	8	0
FIELD	8108:18	8108:18	9	0
LEAF_NODE	8108:18	8108:18	10	0
LEAF_NODE	8108:19	8108:19	4	;
ITERATION	8109:2	8110:4	3	
KEYWORD	8109:2	8109:2	4	for
LEAF_NODE	8109:2	8109:2	5	for
LEAF_NODE	8109:6	8109:6	4	(
FOR_INIT	8109:7	8109:14	4	row = 0 ;
EXPR	8109:7	8109:7	5	row = 0
ASSIGN	8109:7	8109:13	6	row = 0
LVAL	8109:7	8109:7	7	row
FIELD	8109:7	8109:7	8	row
LEAF_NODE	8109:7	8109:7	9	row
ASSIGN_OP	8109:11	8109:11	7	=
LEAF_NODE	8109:11	8109:11	8	=
RVAL	8109:13	8109:13	7	0
FIELD	8109:13	8109:13	8	0
LEAF_NODE	8109:13	8109:13	9	0
LEAF_NODE	8109:14	8109:14	5	;
CONDITION	8109:16	8109:16	4	row < length
EXPR	8109:16	8109:22	5	row < length
FIELD	8109:16	8109:16	6	row
LEAF_NODE	8109:16	8109:16	7	row
REL_OPERATOR	8109:20	8109:20	6	<
LEAF_NODE	8109:20	8109:20	7	<
FIELD	8109:22	8109:22	6	length
LEAF_NODE	8109:22	8109:22	7	length
LEAF_NODE	8109:28	8109:28	4	;
FOR_EXPR	8109:30	8109:30	4	row ++
EXPR	8109:30	8109:30	5	row ++
FIELD	8109:30	8109:33	6	row ++
LEAF_NODE	8109:30	8109:30	7	row
LEAF_NODE	8109:33	8109:33	7	++
LEAF_NODE	8109:35	8109:35	4	)
STATEMENTS	8110:4	8158:4	4	
LEAF_NODE	8110:4	8110:4	5	{
STATEMENTS	8111:4	8112:4	5	
LEAF_NODE	8111:4	8111:4	6	bit_offset
LEAF_NODE	8111:15	8111:15	6	=
LEAF_NODE	8111:17	8111:17	6	col
EXPR_STATEMENT	8111:21	8111:32	6	* bps * spp ;
EXPR	8111:21	8111:29	7	* bps * spp
UNARY_EXPR	8111:21	8111:23	8	* bps
UNARY_OPERATOR	8111:21	8111:21	9	*
LEAF_NODE	8111:21	8111:21	10	*
FIELD	8111:23	8111:23	9	bps
LEAF_NODE	8111:23	8111:23	10	bps
LEAF_NODE	8111:27	8111:27	8	*
FIELD	8111:29	8111:29	8	spp
LEAF_NODE	8111:29	8111:29	9	spp
LEAF_NODE	8111:32	8111:32	7	;
ITERATION	8112:4	8113:6	6	
KEYWORD	8112:4	8112:4	7	for
LEAF_NODE	8112:4	8112:4	8	for
LEAF_NODE	8112:8	8112:8	7	(
FOR_INIT	8112:9	8112:19	7	sample = 0 ;
EXPR	8112:9	8112:9	8	sample = 0
ASSIGN	8112:9	8112:18	9	sample = 0
LVAL	8112:9	8112:9	10	sample
FIELD	8112:9	8112:9	11	sample
LEAF_NODE	8112:9	8112:9	12	sample
ASSIGN_OP	8112:16	8112:16	10	=
LEAF_NODE	8112:16	8112:16	11	=
RVAL	8112:18	8112:18	10	0
FIELD	8112:18	8112:18	11	0
LEAF_NODE	8112:18	8112:18	12	0
LEAF_NODE	8112:19	8112:19	8	;
CONDITION	8112:21	8112:21	7	sample < spp
EXPR	8112:21	8112:30	8	sample < spp
FIELD	8112:21	8112:21	9	sample
LEAF_NODE	8112:21	8112:21	10	sample
REL_OPERATOR	8112:28	8112:28	9	<
LEAF_NODE	8112:28	8112:28	10	<
FIELD	8112:30	8112:30	9	spp
LEAF_NODE	8112:30	8112:30	10	spp
LEAF_NODE	8112:33	8112:33	7	;
FOR_EXPR	8112:35	8112:35	7	sample ++
EXPR	8112:35	8112:35	8	sample ++
FIELD	8112:35	8112:41	9	sample ++
LEAF_NODE	8112:35	8112:35	10	sample
LEAF_NODE	8112:41	8112:41	10	++
LEAF_NODE	8112:43	8112:43	7	)
STATEMENTS	8113:6	8157:6	7	
LEAF_NODE	8113:6	8113:6	8	{
STATEMENTS	8114:6	8156:6	8	
SELECTION	8114:6	8115:8	9	
KEYWORD	8114:6	8114:6	10	if
LEAF_NODE	8114:6	8114:6	11	if
LEAF_NODE	8114:9	8114:9	10	(
CONDITION	8114:10	8114:10	10	sample == 0
EXPR	8114:10	8114:20	11	sample == 0
FIELD	8114:10	8114:10	12	sample
LEAF_NODE	8114:10	8114:10	13	sample
EQ_OPERATOR	8114:17	8114:17	12	==
LEAF_NODE	8114:17	8114:17	13	==
FIELD	8114:20	8114:20	12	0
LEAF_NODE	8114:20	8114:20	13	0
LEAF_NODE	8114:21	8114:21	10	)
STATEMENTS	8115:8	8118:8	10	
LEAF_NODE	8115:8	8115:8	11	{
STATEMENTS	8116:8	8117:8	11	
EXPR_STATEMENT	8116:8	8116:33	12	src_byte = bit_offset / 8 ;
EXPR	8116:8	8116:8	13	src_byte = bit_offset / 8
ASSIGN	8116:8	8116:19	14	src_byte = bit_offset / 8
LVAL	8116:8	8116:8	15	src_byte
FIELD	8116:8	8116:8	16	src_byte
LEAF_NODE	8116:8	8116:8	17	src_byte
ASSIGN_OP	8116:17	8116:17	15	=
LEAF_NODE	8116:17	8116:17	16	=
RVAL	8116:19	8116:32	15	bit_offset / 8
FIELD	8116:19	8116:19	16	bit_offset
LEAF_NODE	8116:19	8116:19	17	bit_offset
LEAF_NODE	8116:30	8116:30	16	/
FIELD	8116:32	8116:32	16	8
LEAF_NODE	8116:32	8116:32	17	8
LEAF_NODE	8116:33	8116:33	13	;
EXPR_STATEMENT	8117:8	8117:33	12	src_bit = bit_offset % 8 ;
EXPR	8117:8	8117:8	13	src_bit = bit_offset % 8
ASSIGN	8117:8	8117:19	14	src_bit = bit_offset % 8
LVAL	8117:8	8117:8	15	src_bit
FIELD	8117:8	8117:8	16	src_bit
LEAF_NODE	8117:8	8117:8	17	src_bit
ASSIGN_OP	8117:17	8117:17	15	=
LEAF_NODE	8117:17	8117:17	16	=
RVAL	8117:19	8117:32	15	bit_offset % 8
FIELD	8117:19	8117:19	16	bit_offset
LEAF_NODE	8117:19	8117:19	17	bit_offset
LEAF_NODE	8117:30	8117:30	16	%
FIELD	8117:32	8117:32	16	8
LEAF_NODE	8117:32	8117:32	17	8
LEAF_NODE	8117:33	8117:33	13	;
LEAF_NODE	8118:8	8118:8	11	}
SELECTION	8119:6	8120:8	9	
KEYWORD	8119:6	8119:6	10	else
LEAF_NODE	8119:6	8119:6	11	else
STATEMENTS	8120:8	8123:8	10	
LEAF_NODE	8120:8	8120:8	11	{
STATEMENTS	8121:8	8122:8	11	
EXPR_STATEMENT	8121:8	8121:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8121:8	8121:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8121:8	8121:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8121:8	8121:8	15	src_byte
FIELD	8121:8	8121:8	16	src_byte
LEAF_NODE	8121:8	8121:8	17	src_byte
ASSIGN_OP	8121:17	8121:17	15	=
LEAF_NODE	8121:17	8121:17	16	=
RVAL	8121:19	8121:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8121:19	8121:19	16	(
FIELD	8121:20	8121:20	16	bit_offset
LEAF_NODE	8121:20	8121:20	17	bit_offset
LEAF_NODE	8121:31	8121:31	16	+
LEAF_NODE	8121:33	8121:33	16	(
FIELD	8121:34	8121:34	16	sample
LEAF_NODE	8121:34	8121:34	17	sample
LEAF_NODE	8121:41	8121:41	16	*
FIELD	8121:43	8121:43	16	bps
LEAF_NODE	8121:43	8121:43	17	bps
LEAF_NODE	8121:46	8121:46	16	)
LEAF_NODE	8121:47	8121:47	16	)
LEAF_NODE	8121:49	8121:49	16	/
FIELD	8121:51	8121:51	16	8
LEAF_NODE	8121:51	8121:51	17	8
LEAF_NODE	8121:52	8121:52	13	;
EXPR_STATEMENT	8122:8	8122:52	12	src_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8122:8	8122:8	13	src_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8122:8	8122:19	14	src_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8122:8	8122:8	15	src_bit
FIELD	8122:8	8122:8	16	src_bit
LEAF_NODE	8122:8	8122:8	17	src_bit
ASSIGN_OP	8122:17	8122:17	15	=
LEAF_NODE	8122:17	8122:17	16	=
RVAL	8122:19	8122:51	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8122:19	8122:19	16	(
FIELD	8122:20	8122:20	16	bit_offset
LEAF_NODE	8122:20	8122:20	17	bit_offset
LEAF_NODE	8122:31	8122:31	16	+
LEAF_NODE	8122:33	8122:33	16	(
FIELD	8122:34	8122:34	16	sample
LEAF_NODE	8122:34	8122:34	17	sample
LEAF_NODE	8122:41	8122:41	16	*
FIELD	8122:43	8122:43	16	bps
LEAF_NODE	8122:43	8122:43	17	bps
LEAF_NODE	8122:46	8122:46	16	)
LEAF_NODE	8122:47	8122:47	16	)
LEAF_NODE	8122:49	8122:49	16	%
FIELD	8122:51	8122:51	16	8
LEAF_NODE	8122:51	8122:51	17	8
LEAF_NODE	8122:52	8122:52	13	;
LEAF_NODE	8123:8	8123:8	11	}
SELECTION	8125:6	8126:1	9	
KEYWORD	8125:6	8125:6	10	switch
LEAF_NODE	8125:6	8125:6	11	switch
LEAF_NODE	8125:13	8125:13	10	(
CONDITION	8125:14	8125:14	10	rotation
EXPR	8125:14	8125:14	11	rotation
FIELD	8125:14	8125:14	12	rotation
LEAF_NODE	8125:14	8125:14	13	rotation
LEAF_NODE	8125:22	8125:22	10	)
STATEMENTS	8126:1	8133:8	10	
LEAF_NODE	8126:1	8126:1	11	{
STATEMENTS	8127:8	8132:18	11	
LABEL	8127:8	8127:16	12	case 90 :
LEAF_NODE	8127:8	8127:8	13	case
LEAF_NODE	8127:14	8127:14	13	90
LEAF_NODE	8127:16	8127:16	13	:
EXPR_STATEMENT	8127:18	8127:57	12	next = src + src_byte - ( row * rowsize ) ;
EXPR	8127:18	8127:18	13	next = src + src_byte - ( row * rowsize )
ASSIGN	8127:18	8127:25	14	next = src + src_byte - ( row * rowsize )
LVAL	8127:18	8127:18	15	next
FIELD	8127:18	8127:18	16	next
LEAF_NODE	8127:18	8127:18	17	next
ASSIGN_OP	8127:23	8127:23	15	=
LEAF_NODE	8127:23	8127:23	16	=
RVAL	8127:25	8127:56	15	src + src_byte - ( row * rowsize )
FIELD	8127:25	8127:25	16	src
LEAF_NODE	8127:25	8127:25	17	src
LEAF_NODE	8127:29	8127:29	16	+
FIELD	8127:31	8127:31	16	src_byte
LEAF_NODE	8127:31	8127:31	17	src_byte
LEAF_NODE	8127:40	8127:40	16	-
LEAF_NODE	8127:42	8127:42	16	(
FIELD	8127:43	8127:43	16	row
LEAF_NODE	8127:43	8127:43	17	row
LEAF_NODE	8127:47	8127:47	16	*
FIELD	8127:49	8127:49	16	rowsize
LEAF_NODE	8127:49	8127:49	17	rowsize
LEAF_NODE	8127:56	8127:56	16	)
LEAF_NODE	8127:57	8127:57	13	;
JUMP_STATEMENT	8128:18	8128:23	12	break DESTINATION ;
KEYWORD	8128:18	8128:18	13	break
LEAF_NODE	8128:18	8128:18	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8128:23	8128:23	13	;
LABEL	8129:8	8129:16	12	case 270 :
LEAF_NODE	8129:8	8129:8	13	case
LEAF_NODE	8129:13	8129:13	13	270
LEAF_NODE	8129:16	8129:16	13	:
EXPR_STATEMENT	8129:18	8129:57	12	next = src + src_byte + ( row * rowsize ) ;
EXPR	8129:18	8129:18	13	next = src + src_byte + ( row * rowsize )
ASSIGN	8129:18	8129:25	14	next = src + src_byte + ( row * rowsize )
LVAL	8129:18	8129:18	15	next
FIELD	8129:18	8129:18	16	next
LEAF_NODE	8129:18	8129:18	17	next
ASSIGN_OP	8129:23	8129:23	15	=
LEAF_NODE	8129:23	8129:23	16	=
RVAL	8129:25	8129:56	15	src + src_byte + ( row * rowsize )
FIELD	8129:25	8129:25	16	src
LEAF_NODE	8129:25	8129:25	17	src
LEAF_NODE	8129:29	8129:29	16	+
FIELD	8129:31	8129:31	16	src_byte
LEAF_NODE	8129:31	8129:31	17	src_byte
LEAF_NODE	8129:40	8129:40	16	+
LEAF_NODE	8129:42	8129:42	16	(
FIELD	8129:43	8129:43	16	row
LEAF_NODE	8129:43	8129:43	17	row
LEAF_NODE	8129:47	8129:47	16	*
FIELD	8129:49	8129:49	16	rowsize
LEAF_NODE	8129:49	8129:49	17	rowsize
LEAF_NODE	8129:56	8129:56	16	)
LEAF_NODE	8129:57	8129:57	13	;
JUMP_STATEMENT	8130:11	8130:16	12	break DESTINATION ;
KEYWORD	8130:11	8130:11	13	break
LEAF_NODE	8130:11	8130:11	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8130:16	8130:16	13	;
LABEL	8131:1	8131:8	12	default :
LEAF_NODE	8131:1	8131:1	13	default
LEAF_NODE	8131:8	8131:8	13	:
EXPR_STATEMENT	8131:11	8131:81	12	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation ) ;
EXPR	8131:11	8131:11	13	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
FUNCTION_CALL	8131:11	8131:80	14	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
CALLEE	8131:11	8131:11	15	TIFFError
LEAF_NODE	8131:11	8131:11	16	TIFFError
LEAF_NODE	8131:20	8131:20	15	(
ARGUMENT	8131:21	8131:21	15	"rotateContigSamples8bits"
FIELD	8131:21	8131:21	16	"rotateContigSamples8bits"
LEAF_NODE	8131:21	8131:21	17	"rotateContigSamples8bits"
LEAF_NODE	8131:47	8131:47	15	,
ARGUMENT	8131:49	8131:49	15	"Invalid rotation %d"
FIELD	8131:49	8131:49	16	"Invalid rotation %d"
LEAF_NODE	8131:49	8131:49	17	"Invalid rotation %d"
LEAF_NODE	8131:70	8131:70	15	,
ARGUMENT	8131:72	8131:72	15	rotation
FIELD	8131:72	8131:72	16	rotation
LEAF_NODE	8131:72	8131:72	17	rotation
LEAF_NODE	8131:80	8131:80	15	)
LEAF_NODE	8131:81	8131:81	13	;
JUMP_STATEMENT	8132:18	8132:28	12	return ( 1 ) ;
KEYWORD	8132:18	8132:18	13	return
LEAF_NODE	8132:18	8132:18	14	return
DESTINATION	8132:25	8132:25	13	( 1 )
EXPR	8132:25	8132:27	14	( 1 )
LEAF_NODE	8132:25	8132:25	15	(
FIELD	8132:26	8132:26	15	1
LEAF_NODE	8132:26	8132:26	16	1
LEAF_NODE	8132:27	8132:27	15	)
LEAF_NODE	8132:28	8132:28	13	;
LEAF_NODE	8133:8	8133:8	11	}
EXPR_STATEMENT	8134:6	8134:50	9	matchbits = maskbits << ( 16 - src_bit - bps ) ;
EXPR	8134:6	8134:6	10	matchbits = maskbits << ( 16 - src_bit - bps )
ASSIGN	8134:6	8134:18	11	matchbits = maskbits << ( 16 - src_bit - bps )
LVAL	8134:6	8134:6	12	matchbits
FIELD	8134:6	8134:6	13	matchbits
LEAF_NODE	8134:6	8134:6	14	matchbits
ASSIGN_OP	8134:16	8134:16	12	=
LEAF_NODE	8134:16	8134:16	13	=
RVAL	8134:18	8134:49	12	maskbits << ( 16 - src_bit - bps )
FIELD	8134:18	8134:18	13	maskbits
LEAF_NODE	8134:18	8134:18	14	maskbits
LEAF_NODE	8134:27	8134:27	13	<<
LEAF_NODE	8134:30	8134:30	13	(
FIELD	8134:31	8134:31	13	16
LEAF_NODE	8134:31	8134:31	14	16
LEAF_NODE	8134:34	8134:34	13	-
FIELD	8134:36	8134:36	13	src_bit
LEAF_NODE	8134:36	8134:36	14	src_bit
LEAF_NODE	8134:44	8134:44	13	-
FIELD	8134:46	8134:46	13	bps
LEAF_NODE	8134:46	8134:46	14	bps
LEAF_NODE	8134:49	8134:49	13	)
LEAF_NODE	8134:50	8134:50	10	;
SELECTION	8135:6	8136:8	9	
KEYWORD	8135:6	8135:6	10	if
LEAF_NODE	8135:6	8135:6	11	if
LEAF_NODE	8135:9	8135:9	10	(
CONDITION	8135:10	8135:10	10	little_endian
EXPR	8135:10	8135:10	11	little_endian
FIELD	8135:10	8135:10	12	little_endian
LEAF_NODE	8135:10	8135:10	13	little_endian
LEAF_NODE	8135:23	8135:23	10	)
STATEMENTS	8136:8	8136:8	10	
EXPR_STATEMENT	8136:8	8136:40	11	buff1 = ( next [ 0 ] << 8 ) | next [ 1 ] ;
EXPR	8136:8	8136:8	12	buff1 = ( next [ 0 ] << 8 ) | next [ 1 ]
ASSIGN	8136:8	8136:16	13	buff1 = ( next [ 0 ] << 8 ) | next [ 1 ]
LVAL	8136:8	8136:8	14	buff1
FIELD	8136:8	8136:8	15	buff1
LEAF_NODE	8136:8	8136:8	16	buff1
ASSIGN_OP	8136:14	8136:14	14	=
LEAF_NODE	8136:14	8136:14	15	=
RVAL	8136:16	8136:16	14	( next [ 0 ] << 8 ) | next [ 1 ]
BIT_OR	8136:16	8136:33	15	( next [ 0 ] << 8 ) | next [ 1 ]
BIT_OR_ELEM	8136:16	8136:29	16	( next [ 0 ] << 8 )
LEAF_NODE	8136:16	8136:16	17	(
FIELD	8136:17	8136:23	17	next [ 0 ]
LEAF_NODE	8136:17	8136:17	18	next
LEAF_NODE	8136:21	8136:21	18	[
EXPR	8136:22	8136:22	18	0
FIELD	8136:22	8136:22	19	0
LEAF_NODE	8136:22	8136:22	20	0
LEAF_NODE	8136:23	8136:23	18	]
LEAF_NODE	8136:25	8136:25	17	<<
FIELD	8136:28	8136:28	17	8
LEAF_NODE	8136:28	8136:28	18	8
LEAF_NODE	8136:29	8136:29	17	)
LEAF_NODE	8136:31	8136:31	16	|
BIT_OR_ELEM	8136:33	8136:33	16	next [ 1 ]
FIELD	8136:33	8136:39	17	next [ 1 ]
LEAF_NODE	8136:33	8136:33	18	next
LEAF_NODE	8136:37	8136:37	18	[
EXPR	8136:38	8136:38	18	1
FIELD	8136:38	8136:38	19	1
LEAF_NODE	8136:38	8136:38	20	1
LEAF_NODE	8136:39	8136:39	18	]
LEAF_NODE	8136:40	8136:40	12	;
SELECTION	8137:6	8138:8	9	
KEYWORD	8137:6	8137:6	10	else
LEAF_NODE	8137:6	8137:6	11	else
STATEMENTS	8138:8	8138:8	10	
EXPR_STATEMENT	8138:8	8138:40	11	buff1 = ( next [ 1 ] << 8 ) | next [ 0 ] ;
EXPR	8138:8	8138:8	12	buff1 = ( next [ 1 ] << 8 ) | next [ 0 ]
ASSIGN	8138:8	8138:16	13	buff1 = ( next [ 1 ] << 8 ) | next [ 0 ]
LVAL	8138:8	8138:8	14	buff1
FIELD	8138:8	8138:8	15	buff1
LEAF_NODE	8138:8	8138:8	16	buff1
ASSIGN_OP	8138:14	8138:14	14	=
LEAF_NODE	8138:14	8138:14	15	=
RVAL	8138:16	8138:16	14	( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR	8138:16	8138:33	15	( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR_ELEM	8138:16	8138:29	16	( next [ 1 ] << 8 )
LEAF_NODE	8138:16	8138:16	17	(
FIELD	8138:17	8138:23	17	next [ 1 ]
LEAF_NODE	8138:17	8138:17	18	next
LEAF_NODE	8138:21	8138:21	18	[
EXPR	8138:22	8138:22	18	1
FIELD	8138:22	8138:22	19	1
LEAF_NODE	8138:22	8138:22	20	1
LEAF_NODE	8138:23	8138:23	18	]
LEAF_NODE	8138:25	8138:25	17	<<
FIELD	8138:28	8138:28	17	8
LEAF_NODE	8138:28	8138:28	18	8
LEAF_NODE	8138:29	8138:29	17	)
LEAF_NODE	8138:31	8138:31	16	|
BIT_OR_ELEM	8138:33	8138:33	16	next [ 0 ]
FIELD	8138:33	8138:39	17	next [ 0 ]
LEAF_NODE	8138:33	8138:33	18	next
LEAF_NODE	8138:37	8138:37	18	[
EXPR	8138:38	8138:38	18	0
FIELD	8138:38	8138:38	19	0
LEAF_NODE	8138:38	8138:38	20	0
LEAF_NODE	8138:39	8138:39	18	]
LEAF_NODE	8138:40	8138:40	12	;
LEAF_NODE	8140:6	8140:6	9	buff1
LEAF_NODE	8140:12	8140:12	9	=
LEAF_NODE	8140:14	8140:14	9	(
LEAF_NODE	8140:15	8140:15	9	buff1
LEAF_NODE	8140:21	8140:21	9	&
LEAF_NODE	8140:23	8140:23	9	matchbits
LEAF_NODE	8140:32	8140:32	9	)
LEAF_NODE	8140:34	8140:34	9	<<
LEAF_NODE	8140:37	8140:37	9	(
LEAF_NODE	8140:38	8140:38	9	src_bit
LEAF_NODE	8140:45	8140:45	9	)
LEAF_NODE	8140:46	8140:46	9	;
SELECTION	8143:6	8144:8	9	
KEYWORD	8143:6	8143:6	10	if
LEAF_NODE	8143:6	8143:6	11	if
LEAF_NODE	8143:9	8143:9	10	(
CONDITION	8143:10	8143:10	10	ready_bits >= 8
EXPR	8143:10	8143:24	11	ready_bits >= 8
FIELD	8143:10	8143:10	12	ready_bits
LEAF_NODE	8143:10	8143:10	13	ready_bits
REL_OPERATOR	8143:21	8143:21	12	>=
LEAF_NODE	8143:21	8143:21	13	>=
FIELD	8143:24	8143:24	12	8
LEAF_NODE	8143:24	8143:24	13	8
LEAF_NODE	8143:25	8143:25	10	)
STATEMENTS	8144:8	8150:8	10	
LEAF_NODE	8144:8	8144:8	11	{
STATEMENTS	8145:8	8149:8	11	
EXPR_STATEMENT	8145:8	8145:31	12	bytebuff = ( buff2 >> 8 ) ;
EXPR	8145:8	8145:8	13	bytebuff = ( buff2 >> 8 )
ASSIGN	8145:8	8145:19	14	bytebuff = ( buff2 >> 8 )
LVAL	8145:8	8145:8	15	bytebuff
FIELD	8145:8	8145:8	16	bytebuff
LEAF_NODE	8145:8	8145:8	17	bytebuff
ASSIGN_OP	8145:17	8145:17	15	=
LEAF_NODE	8145:17	8145:17	16	=
RVAL	8145:19	8145:30	15	( buff2 >> 8 )
LEAF_NODE	8145:19	8145:19	16	(
FIELD	8145:20	8145:20	16	buff2
LEAF_NODE	8145:20	8145:20	17	buff2
LEAF_NODE	8145:26	8145:26	16	>>
FIELD	8145:29	8145:29	16	8
LEAF_NODE	8145:29	8145:29	17	8
LEAF_NODE	8145:30	8145:30	16	)
LEAF_NODE	8145:31	8145:31	13	;
EXPR_STATEMENT	8146:8	8146:25	12	* dst ++ = bytebuff ;
EXPR	8146:8	8146:8	13	* dst ++ = bytebuff
ASSIGN	8146:8	8146:17	14	* dst ++ = bytebuff
LVAL	8146:8	8146:8	15	* dst ++
UNARY_EXPR	8146:8	8146:9	16	* dst ++
UNARY_OPERATOR	8146:8	8146:8	17	*
LEAF_NODE	8146:8	8146:8	18	*
FIELD	8146:9	8146:12	17	dst ++
LEAF_NODE	8146:9	8146:9	18	dst
LEAF_NODE	8146:12	8146:12	18	++
ASSIGN_OP	8146:15	8146:15	15	=
LEAF_NODE	8146:15	8146:15	16	=
RVAL	8146:17	8146:17	15	bytebuff
FIELD	8146:17	8146:17	16	bytebuff
LEAF_NODE	8146:17	8146:17	17	bytebuff
LEAF_NODE	8146:25	8146:25	13	;
EXPR_STATEMENT	8147:8	8147:23	12	ready_bits -= 8 ;
EXPR	8147:8	8147:8	13	ready_bits -= 8
ASSIGN	8147:8	8147:22	14	ready_bits -= 8
LVAL	8147:8	8147:8	15	ready_bits
FIELD	8147:8	8147:8	16	ready_bits
LEAF_NODE	8147:8	8147:8	17	ready_bits
ASSIGN_OP	8147:19	8147:19	15	-=
LEAF_NODE	8147:19	8147:19	16	-=
RVAL	8147:22	8147:22	15	8
FIELD	8147:22	8147:22	16	8
LEAF_NODE	8147:22	8147:22	17	8
LEAF_NODE	8147:23	8147:23	13	;
EXPR_STATEMENT	8149:8	8149:54	12	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) ) ;
EXPR	8149:8	8149:8	13	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
ASSIGN	8149:8	8149:16	14	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LVAL	8149:8	8149:8	15	buff2
FIELD	8149:8	8149:8	16	buff2
LEAF_NODE	8149:8	8149:8	17	buff2
ASSIGN_OP	8149:14	8149:14	15	=
LEAF_NODE	8149:14	8149:14	16	=
RVAL	8149:16	8149:53	15	( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	8149:16	8149:16	16	(
BIT_OR	8149:17	8149:32	16	( buff2 << 8 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	8149:17	8149:28	17	( buff2 << 8 )
LEAF_NODE	8149:17	8149:17	18	(
FIELD	8149:18	8149:18	18	buff2
LEAF_NODE	8149:18	8149:18	19	buff2
LEAF_NODE	8149:24	8149:24	18	<<
FIELD	8149:27	8149:27	18	8
LEAF_NODE	8149:27	8149:27	19	8
LEAF_NODE	8149:28	8149:28	18	)
LEAF_NODE	8149:30	8149:30	17	|
BIT_OR_ELEM	8149:32	8149:52	17	( buff1 >> ready_bits )
LEAF_NODE	8149:32	8149:32	18	(
FIELD	8149:33	8149:33	18	buff1
LEAF_NODE	8149:33	8149:33	19	buff1
LEAF_NODE	8149:39	8149:39	18	>>
FIELD	8149:42	8149:42	18	ready_bits
LEAF_NODE	8149:42	8149:42	19	ready_bits
LEAF_NODE	8149:52	8149:52	18	)
LEAF_NODE	8149:53	8149:53	16	)
LEAF_NODE	8149:54	8149:54	13	;
LEAF_NODE	8150:8	8150:8	11	}
SELECTION	8151:6	8152:8	9	
KEYWORD	8151:6	8151:6	10	else
LEAF_NODE	8151:6	8151:6	11	else
STATEMENTS	8152:8	8155:8	10	
LEAF_NODE	8152:8	8152:8	11	{
STATEMENTS	8153:8	8154:8	11	
EXPR_STATEMENT	8153:8	8153:20	12	bytebuff = 0 ;
EXPR	8153:8	8153:8	13	bytebuff = 0
ASSIGN	8153:8	8153:19	14	bytebuff = 0
LVAL	8153:8	8153:8	15	bytebuff
FIELD	8153:8	8153:8	16	bytebuff
LEAF_NODE	8153:8	8153:8	17	bytebuff
ASSIGN_OP	8153:17	8153:17	15	=
LEAF_NODE	8153:17	8153:17	16	=
RVAL	8153:19	8153:19	15	0
FIELD	8153:19	8153:19	16	0
LEAF_NODE	8153:19	8153:19	17	0
LEAF_NODE	8153:20	8153:20	13	;
EXPR_STATEMENT	8154:8	8154:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8154:8	8154:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8154:8	8154:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8154:8	8154:8	15	buff2
FIELD	8154:8	8154:8	16	buff2
LEAF_NODE	8154:8	8154:8	17	buff2
ASSIGN_OP	8154:14	8154:14	15	=
LEAF_NODE	8154:14	8154:14	16	=
RVAL	8154:16	8154:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8154:16	8154:16	16	(
BIT_OR	8154:17	8154:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8154:17	8154:17	17	buff2
FIELD	8154:17	8154:17	18	buff2
LEAF_NODE	8154:17	8154:17	19	buff2
LEAF_NODE	8154:23	8154:23	17	|
BIT_OR_ELEM	8154:25	8154:45	17	( buff1 >> ready_bits )
LEAF_NODE	8154:25	8154:25	18	(
FIELD	8154:26	8154:26	18	buff1
LEAF_NODE	8154:26	8154:26	19	buff1
LEAF_NODE	8154:32	8154:32	18	>>
FIELD	8154:35	8154:35	18	ready_bits
LEAF_NODE	8154:35	8154:35	19	ready_bits
LEAF_NODE	8154:45	8154:45	18	)
LEAF_NODE	8154:46	8154:46	16	)
LEAF_NODE	8154:47	8154:47	13	;
LEAF_NODE	8155:8	8155:8	11	}
EXPR_STATEMENT	8156:6	8156:23	9	ready_bits += bps ;
EXPR	8156:6	8156:6	10	ready_bits += bps
ASSIGN	8156:6	8156:20	11	ready_bits += bps
LVAL	8156:6	8156:6	12	ready_bits
FIELD	8156:6	8156:6	13	ready_bits
LEAF_NODE	8156:6	8156:6	14	ready_bits
ASSIGN_OP	8156:17	8156:17	12	+=
LEAF_NODE	8156:17	8156:17	13	+=
RVAL	8156:20	8156:20	12	bps
FIELD	8156:20	8156:20	13	bps
LEAF_NODE	8156:20	8156:20	14	bps
LEAF_NODE	8156:23	8156:23	10	;
LEAF_NODE	8157:6	8157:6	8	}
LEAF_NODE	8158:4	8158:4	5	}
SELECTION	8160:2	8161:4	3	
KEYWORD	8160:2	8160:2	4	if
LEAF_NODE	8160:2	8160:2	5	if
LEAF_NODE	8160:5	8160:5	4	(
CONDITION	8160:6	8160:6	4	ready_bits > 0
EXPR	8160:6	8160:19	5	ready_bits > 0
FIELD	8160:6	8160:6	6	ready_bits
LEAF_NODE	8160:6	8160:6	7	ready_bits
REL_OPERATOR	8160:17	8160:17	6	>
LEAF_NODE	8160:17	8160:17	7	>
FIELD	8160:19	8160:19	6	0
LEAF_NODE	8160:19	8160:19	7	0
LEAF_NODE	8160:20	8160:20	4	)
STATEMENTS	8161:4	8164:4	4	
LEAF_NODE	8161:4	8161:4	5	{
STATEMENTS	8162:4	8163:4	5	
EXPR_STATEMENT	8162:4	8162:27	6	bytebuff = ( buff2 >> 8 ) ;
EXPR	8162:4	8162:4	7	bytebuff = ( buff2 >> 8 )
ASSIGN	8162:4	8162:15	8	bytebuff = ( buff2 >> 8 )
LVAL	8162:4	8162:4	9	bytebuff
FIELD	8162:4	8162:4	10	bytebuff
LEAF_NODE	8162:4	8162:4	11	bytebuff
ASSIGN_OP	8162:13	8162:13	9	=
LEAF_NODE	8162:13	8162:13	10	=
RVAL	8162:15	8162:26	9	( buff2 >> 8 )
LEAF_NODE	8162:15	8162:15	10	(
FIELD	8162:16	8162:16	10	buff2
LEAF_NODE	8162:16	8162:16	11	buff2
LEAF_NODE	8162:22	8162:22	10	>>
FIELD	8162:25	8162:25	10	8
LEAF_NODE	8162:25	8162:25	11	8
LEAF_NODE	8162:26	8162:26	10	)
LEAF_NODE	8162:27	8162:27	7	;
EXPR_STATEMENT	8163:4	8163:21	6	* dst ++ = bytebuff ;
EXPR	8163:4	8163:4	7	* dst ++ = bytebuff
ASSIGN	8163:4	8163:13	8	* dst ++ = bytebuff
LVAL	8163:4	8163:4	9	* dst ++
UNARY_EXPR	8163:4	8163:5	10	* dst ++
UNARY_OPERATOR	8163:4	8163:4	11	*
LEAF_NODE	8163:4	8163:4	12	*
FIELD	8163:5	8163:8	11	dst ++
LEAF_NODE	8163:5	8163:5	12	dst
LEAF_NODE	8163:8	8163:8	12	++
ASSIGN_OP	8163:11	8163:11	9	=
LEAF_NODE	8163:11	8163:11	10	=
RVAL	8163:13	8163:13	9	bytebuff
FIELD	8163:13	8163:13	10	bytebuff
LEAF_NODE	8163:13	8163:13	11	bytebuff
LEAF_NODE	8163:21	8163:21	7	;
LEAF_NODE	8164:4	8164:4	5	}
JUMP_STATEMENT	8166:2	8166:12	3	return ( 0 ) ;
KEYWORD	8166:2	8166:2	4	return
LEAF_NODE	8166:2	8166:2	5	return
DESTINATION	8166:9	8166:9	4	( 0 )
EXPR	8166:9	8166:11	5	( 0 )
LEAF_NODE	8166:9	8166:9	6	(
FIELD	8166:10	8166:10	6	0
LEAF_NODE	8166:10	8166:10	7	0
LEAF_NODE	8166:11	8166:11	6	)
LEAF_NODE	8166:12	8166:12	4	;
LEAF_NODE	8167:2	8167:2	2	}
FUNCTION_DEF	8169:0	8258:2	1	
RETURN_TYPE	8169:0	8169:7	2	static int
LEAF_NODE	8169:0	8169:0	3	static
TYPE_NAME	8169:7	8169:7	3	int
LEAF_NODE	8169:7	8169:7	4	int
FUNCTION_NAME	8170:0	8170:0	2	rotateContigSamples24bits
LEAF_NODE	8170:0	8170:0	3	rotateContigSamples24bits
PARAMETER_LIST	8170:25	8171:77	2	( uint16 rotation , uint16 spp , uint16 bps , uint32 width , uint32 length , uint32 col , uint8 * src , uint8 * dst )
LEAF_NODE	8170:25	8170:25	3	(
PARAMETER_DECL	8170:26	8170:33	3	uint16 rotation
TYPE	8170:26	8170:26	4	uint16
TYPE_NAME	8170:26	8170:26	5	uint16
LEAF_NODE	8170:26	8170:26	6	uint16
NAME	8170:33	8170:33	4	rotation
LEAF_NODE	8170:33	8170:33	5	rotation
LEAF_NODE	8170:41	8170:41	3	,
PARAMETER_DECL	8170:43	8170:50	3	uint16 spp
TYPE	8170:43	8170:43	4	uint16
TYPE_NAME	8170:43	8170:43	5	uint16
LEAF_NODE	8170:43	8170:43	6	uint16
NAME	8170:50	8170:50	4	spp
LEAF_NODE	8170:50	8170:50	5	spp
LEAF_NODE	8170:53	8170:53	3	,
PARAMETER_DECL	8170:55	8170:62	3	uint16 bps
TYPE	8170:55	8170:55	4	uint16
TYPE_NAME	8170:55	8170:55	5	uint16
LEAF_NODE	8170:55	8170:55	6	uint16
NAME	8170:62	8170:62	4	bps
LEAF_NODE	8170:62	8170:62	5	bps
LEAF_NODE	8170:65	8170:65	3	,
PARAMETER_DECL	8170:67	8170:74	3	uint32 width
TYPE	8170:67	8170:67	4	uint32
TYPE_NAME	8170:67	8170:67	5	uint32
LEAF_NODE	8170:67	8170:67	6	uint32
NAME	8170:74	8170:74	4	width
LEAF_NODE	8170:74	8170:74	5	width
LEAF_NODE	8170:79	8170:79	3	,
PARAMETER_DECL	8171:26	8171:33	3	uint32 length
TYPE	8171:26	8171:26	4	uint32
TYPE_NAME	8171:26	8171:26	5	uint32
LEAF_NODE	8171:26	8171:26	6	uint32
NAME	8171:33	8171:33	4	length
LEAF_NODE	8171:33	8171:33	5	length
LEAF_NODE	8171:39	8171:39	3	,
PARAMETER_DECL	8171:43	8171:50	3	uint32 col
TYPE	8171:43	8171:43	4	uint32
TYPE_NAME	8171:43	8171:43	5	uint32
LEAF_NODE	8171:43	8171:43	6	uint32
NAME	8171:50	8171:50	4	col
LEAF_NODE	8171:50	8171:50	5	col
LEAF_NODE	8171:53	8171:53	3	,
PARAMETER_DECL	8171:55	8171:62	3	uint8 * src
TYPE	8171:55	8171:61	4	uint8 *
TYPE_NAME	8171:55	8171:55	5	uint8
LEAF_NODE	8171:55	8171:55	6	uint8
POINTER	8171:61	8171:61	5	*
LEAF_NODE	8171:61	8171:61	6	*
NAME	8171:62	8171:62	4	src
LEAF_NODE	8171:62	8171:62	5	src
LEAF_NODE	8171:65	8171:65	3	,
PARAMETER_DECL	8171:67	8171:74	3	uint8 * dst
TYPE	8171:67	8171:73	4	uint8 *
TYPE_NAME	8171:67	8171:67	5	uint8
LEAF_NODE	8171:67	8171:67	6	uint8
POINTER	8171:73	8171:73	5	*
LEAF_NODE	8171:73	8171:73	6	*
NAME	8171:74	8171:74	4	dst
LEAF_NODE	8171:74	8171:74	5	dst
LEAF_NODE	8171:77	8171:77	3	)
LEAF_NODE	8172:2	8172:2	2	{
STATEMENTS	8173:2	8257:2	2	
SIMPLE_DECL	8173:2	8173:25	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8173:2	8173:11	4	int ready_bits ; ready_bits = 0
TYPE	8173:2	8173:2	5	int
TYPE_NAME	8173:2	8173:2	6	int
LEAF_NODE	8173:2	8173:2	7	int
NAME	8173:11	8173:11	5	ready_bits
LEAF_NODE	8173:11	8173:11	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8173:11	8173:11	5	ready_bits = 0
ASSIGN	8173:11	8173:24	6	ready_bits = 0
LVAL	8173:11	8173:11	7	ready_bits
NAME	8173:11	8173:11	8	ready_bits
LEAF_NODE	8173:11	8173:11	9	ready_bits
ASSIGN_OP	8173:22	8173:22	7	=
LEAF_NODE	8173:22	8173:22	8	=
RVAL	8173:24	8173:24	7	0
FIELD	8173:24	8173:24	8	0
LEAF_NODE	8173:24	8173:24	9	0
LEAF_NODE	8173:25	8173:25	4	;
SIMPLE_DECL	8174:2	8174:35	3	uint32 row , uint32 rowsize , uint32 bit_offset ;
INIT_DECL_LIST	8174:2	8174:2	4	uint32 row , uint32 rowsize , uint32 bit_offset
VAR_DECL	8174:2	8174:11	5	uint32 row
TYPE	8174:2	8174:2	6	uint32
TYPE_NAME	8174:2	8174:2	7	uint32
LEAF_NODE	8174:2	8174:2	8	uint32
NAME	8174:11	8174:11	6	row
LEAF_NODE	8174:11	8174:11	7	row
LEAF_NODE	8174:14	8174:14	5	,
INIT_DECL_LIST	8174:2	8174:2	5	uint32 rowsize , uint32 bit_offset
VAR_DECL	8174:2	8174:16	6	uint32 rowsize
TYPE	8174:2	8174:2	7	uint32
TYPE_NAME	8174:2	8174:2	8	uint32
LEAF_NODE	8174:2	8174:2	9	uint32
NAME	8174:16	8174:16	7	rowsize
LEAF_NODE	8174:16	8174:16	8	rowsize
LEAF_NODE	8174:23	8174:23	6	,
VAR_DECL	8174:2	8174:25	6	uint32 bit_offset
TYPE	8174:2	8174:2	7	uint32
TYPE_NAME	8174:2	8174:2	8	uint32
LEAF_NODE	8174:2	8174:2	9	uint32
NAME	8174:25	8174:25	7	bit_offset
LEAF_NODE	8174:25	8174:25	8	bit_offset
LEAF_NODE	8174:35	8174:35	4	;
SIMPLE_DECL	8175:2	8175:36	3	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0 ;
INIT_DECL_LIST	8175:2	8175:2	4	uint32 src_byte ; src_byte = 0 , uint32 src_bit ; src_bit = 0
VAR_DECL	8175:2	8175:11	5	uint32 src_byte ; src_byte = 0
TYPE	8175:2	8175:2	6	uint32
TYPE_NAME	8175:2	8175:2	7	uint32
LEAF_NODE	8175:2	8175:2	8	uint32
NAME	8175:11	8175:11	6	src_byte
LEAF_NODE	8175:11	8175:11	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	8175:11	8175:11	6	src_byte = 0
ASSIGN	8175:11	8175:22	7	src_byte = 0
LVAL	8175:11	8175:11	8	src_byte
NAME	8175:11	8175:11	9	src_byte
LEAF_NODE	8175:11	8175:11	10	src_byte
ASSIGN_OP	8175:20	8175:20	8	=
LEAF_NODE	8175:20	8175:20	9	=
RVAL	8175:22	8175:22	8	0
FIELD	8175:22	8175:22	9	0
LEAF_NODE	8175:22	8175:22	10	0
LEAF_NODE	8175:23	8175:23	5	,
VAR_DECL	8175:2	8175:25	5	uint32 src_bit ; src_bit = 0
TYPE	8175:2	8175:2	6	uint32
TYPE_NAME	8175:2	8175:2	7	uint32
LEAF_NODE	8175:2	8175:2	8	uint32
NAME	8175:25	8175:25	6	src_bit
LEAF_NODE	8175:25	8175:25	7	src_bit
LEAF_NODE	0:0	0:0	6	;
INIT	8175:25	8175:25	6	src_bit = 0
ASSIGN	8175:25	8175:35	7	src_bit = 0
LVAL	8175:25	8175:25	8	src_bit
NAME	8175:25	8175:25	9	src_bit
LEAF_NODE	8175:25	8175:25	10	src_bit
ASSIGN_OP	8175:33	8175:33	8	=
LEAF_NODE	8175:33	8175:33	9	=
RVAL	8175:35	8175:35	8	0
FIELD	8175:35	8175:35	9	0
LEAF_NODE	8175:35	8175:35	10	0
LEAF_NODE	8175:36	8175:36	4	;
SIMPLE_DECL	8176:2	8176:38	3	uint32 matchbits ; matchbits = 0 , uint32 maskbits ; maskbits = 0 ;
INIT_DECL_LIST	8176:2	8176:2	4	uint32 matchbits ; matchbits = 0 , uint32 maskbits ; maskbits = 0
VAR_DECL	8176:2	8176:11	5	uint32 matchbits ; matchbits = 0
TYPE	8176:2	8176:2	6	uint32
TYPE_NAME	8176:2	8176:2	7	uint32
LEAF_NODE	8176:2	8176:2	8	uint32
NAME	8176:11	8176:11	6	matchbits
LEAF_NODE	8176:11	8176:11	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	8176:11	8176:11	6	matchbits = 0
ASSIGN	8176:11	8176:23	7	matchbits = 0
LVAL	8176:11	8176:11	8	matchbits
NAME	8176:11	8176:11	9	matchbits
LEAF_NODE	8176:11	8176:11	10	matchbits
ASSIGN_OP	8176:21	8176:21	8	=
LEAF_NODE	8176:21	8176:21	9	=
RVAL	8176:23	8176:23	8	0
FIELD	8176:23	8176:23	9	0
LEAF_NODE	8176:23	8176:23	10	0
LEAF_NODE	8176:24	8176:24	5	,
VAR_DECL	8176:2	8176:26	5	uint32 maskbits ; maskbits = 0
TYPE	8176:2	8176:2	6	uint32
TYPE_NAME	8176:2	8176:2	7	uint32
LEAF_NODE	8176:2	8176:2	8	uint32
NAME	8176:26	8176:26	6	maskbits
LEAF_NODE	8176:26	8176:26	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	8176:26	8176:26	6	maskbits = 0
ASSIGN	8176:26	8176:37	7	maskbits = 0
LVAL	8176:26	8176:26	8	maskbits
NAME	8176:26	8176:26	9	maskbits
LEAF_NODE	8176:26	8176:26	10	maskbits
ASSIGN_OP	8176:35	8176:35	8	=
LEAF_NODE	8176:35	8176:35	9	=
RVAL	8176:37	8176:37	8	0
FIELD	8176:37	8176:37	9	0
LEAF_NODE	8176:37	8176:37	10	0
LEAF_NODE	8176:38	8176:38	4	;
SIMPLE_DECL	8177:2	8177:31	3	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	8177:2	8177:2	4	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0
VAR_DECL	8177:2	8177:11	5	uint32 buff1 ; buff1 = 0
TYPE	8177:2	8177:2	6	uint32
TYPE_NAME	8177:2	8177:2	7	uint32
LEAF_NODE	8177:2	8177:2	8	uint32
NAME	8177:11	8177:11	6	buff1
LEAF_NODE	8177:11	8177:11	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8177:11	8177:11	6	buff1 = 0
ASSIGN	8177:11	8177:19	7	buff1 = 0
LVAL	8177:11	8177:11	8	buff1
NAME	8177:11	8177:11	9	buff1
LEAF_NODE	8177:11	8177:11	10	buff1
ASSIGN_OP	8177:17	8177:17	8	=
LEAF_NODE	8177:17	8177:17	9	=
RVAL	8177:19	8177:19	8	0
FIELD	8177:19	8177:19	9	0
LEAF_NODE	8177:19	8177:19	10	0
LEAF_NODE	8177:20	8177:20	5	,
VAR_DECL	8177:2	8177:22	5	uint32 buff2 ; buff2 = 0
TYPE	8177:2	8177:2	6	uint32
TYPE_NAME	8177:2	8177:2	7	uint32
LEAF_NODE	8177:2	8177:2	8	uint32
NAME	8177:22	8177:22	6	buff2
LEAF_NODE	8177:22	8177:22	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	8177:22	8177:22	6	buff2 = 0
ASSIGN	8177:22	8177:30	7	buff2 = 0
LVAL	8177:22	8177:22	8	buff2
NAME	8177:22	8177:22	9	buff2
LEAF_NODE	8177:22	8177:22	10	buff2
ASSIGN_OP	8177:28	8177:28	8	=
LEAF_NODE	8177:28	8177:28	9	=
RVAL	8177:30	8177:30	8	0
FIELD	8177:30	8177:30	9	0
LEAF_NODE	8177:30	8177:30	10	0
LEAF_NODE	8177:31	8177:31	4	;
SIMPLE_DECL	8178:2	8178:39	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 ;
INIT_DECL_LIST	8178:2	8178:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0
VAR_DECL	8178:2	8178:11	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	8178:2	8178:2	6	uint8
TYPE_NAME	8178:2	8178:2	7	uint8
LEAF_NODE	8178:2	8178:2	8	uint8
NAME	8178:11	8178:11	6	bytebuff1
LEAF_NODE	8178:11	8178:11	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	8178:11	8178:11	6	bytebuff1 = 0
ASSIGN	8178:11	8178:23	7	bytebuff1 = 0
LVAL	8178:11	8178:11	8	bytebuff1
NAME	8178:11	8178:11	9	bytebuff1
LEAF_NODE	8178:11	8178:11	10	bytebuff1
ASSIGN_OP	8178:21	8178:21	8	=
LEAF_NODE	8178:21	8178:21	9	=
RVAL	8178:23	8178:23	8	0
FIELD	8178:23	8178:23	9	0
LEAF_NODE	8178:23	8178:23	10	0
LEAF_NODE	8178:24	8178:24	5	,
VAR_DECL	8178:2	8178:26	5	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	8178:2	8178:2	6	uint8
TYPE_NAME	8178:2	8178:2	7	uint8
LEAF_NODE	8178:2	8178:2	8	uint8
NAME	8178:26	8178:26	6	bytebuff2
LEAF_NODE	8178:26	8178:26	7	bytebuff2
LEAF_NODE	0:0	0:0	6	;
INIT	8178:26	8178:26	6	bytebuff2 = 0
ASSIGN	8178:26	8178:38	7	bytebuff2 = 0
LVAL	8178:26	8178:26	8	bytebuff2
NAME	8178:26	8178:26	9	bytebuff2
LEAF_NODE	8178:26	8178:26	10	bytebuff2
ASSIGN_OP	8178:36	8178:36	8	=
LEAF_NODE	8178:36	8178:36	9	=
RVAL	8178:38	8178:38	8	0
FIELD	8178:38	8178:38	9	0
LEAF_NODE	8178:38	8178:38	10	0
LEAF_NODE	8178:39	8178:39	4	;
SIMPLE_DECL	8179:2	8179:15	3	uint8 * next ;
VAR_DECL	8179:2	8179:11	4	uint8 * next
TYPE	8179:2	8179:10	5	uint8 *
TYPE_NAME	8179:2	8179:2	6	uint8
LEAF_NODE	8179:2	8179:2	7	uint8
POINTER	8179:10	8179:10	6	*
LEAF_NODE	8179:10	8179:10	7	*
NAME	8179:11	8179:11	5	next
LEAF_NODE	8179:11	8179:11	6	next
LEAF_NODE	8179:15	8179:15	4	;
SIMPLE_DECL	8180:2	8180:18	3	tsample_t sample ;
VAR_DECL	8180:2	8180:12	4	tsample_t sample
TYPE	8180:2	8180:2	5	tsample_t
TYPE_NAME	8180:2	8180:2	6	tsample_t
LEAF_NODE	8180:2	8180:2	7	tsample_t
NAME	8180:12	8180:12	5	sample
LEAF_NODE	8180:12	8180:12	6	sample
LEAF_NODE	8180:18	8180:18	4	;
SELECTION	8183:2	8184:4	3	
KEYWORD	8183:2	8183:2	4	if
LEAF_NODE	8183:2	8183:2	5	if
LEAF_NODE	8183:5	8183:5	4	(
CONDITION	8183:6	8183:6	4	( src == NULL ) || ( dst == NULL )
EXPR	8183:6	8183:6	5	( src == NULL ) || ( dst == NULL )
OR	8183:6	8183:23	6	( src == NULL ) || ( dst == NULL )
EXPR	8183:6	8183:18	7	( src == NULL )
LEAF_NODE	8183:6	8183:6	8	(
FIELD	8183:7	8183:7	8	src
LEAF_NODE	8183:7	8183:7	9	src
EQ_OPERATOR	8183:11	8183:11	8	==
LEAF_NODE	8183:11	8183:11	9	==
FIELD	8183:14	8183:14	8	NULL
LEAF_NODE	8183:14	8183:14	9	NULL
LEAF_NODE	8183:18	8183:18	8	)
LEAF_NODE	8183:20	8183:20	7	||
EXPR	8183:23	8183:35	7	( dst == NULL )
LEAF_NODE	8183:23	8183:23	8	(
FIELD	8183:24	8183:24	8	dst
LEAF_NODE	8183:24	8183:24	9	dst
EQ_OPERATOR	8183:28	8183:28	8	==
LEAF_NODE	8183:28	8183:28	9	==
FIELD	8183:31	8183:31	8	NULL
LEAF_NODE	8183:31	8183:31	9	NULL
LEAF_NODE	8183:35	8183:35	8	)
LEAF_NODE	8183:36	8183:36	4	)
STATEMENTS	8184:4	8187:4	4	
LEAF_NODE	8184:4	8184:4	5	{
STATEMENTS	8185:4	8186:4	5	
EXPR_STATEMENT	8185:4	8185:78	6	TIFFError ( "rotateContigSamples24bits" , "Invalid src or destination buffer" ) ;
EXPR	8185:4	8185:4	7	TIFFError ( "rotateContigSamples24bits" , "Invalid src or destination buffer" )
FUNCTION_CALL	8185:4	8185:77	8	TIFFError ( "rotateContigSamples24bits" , "Invalid src or destination buffer" )
CALLEE	8185:4	8185:4	9	TIFFError
LEAF_NODE	8185:4	8185:4	10	TIFFError
LEAF_NODE	8185:13	8185:13	9	(
ARGUMENT	8185:14	8185:14	9	"rotateContigSamples24bits"
FIELD	8185:14	8185:14	10	"rotateContigSamples24bits"
LEAF_NODE	8185:14	8185:14	11	"rotateContigSamples24bits"
LEAF_NODE	8185:41	8185:41	9	,
ARGUMENT	8185:42	8185:42	9	"Invalid src or destination buffer"
FIELD	8185:42	8185:42	10	"Invalid src or destination buffer"
LEAF_NODE	8185:42	8185:42	11	"Invalid src or destination buffer"
LEAF_NODE	8185:77	8185:77	9	)
LEAF_NODE	8185:78	8185:78	7	;
JUMP_STATEMENT	8186:4	8186:14	6	return ( 1 ) ;
KEYWORD	8186:4	8186:4	7	return
LEAF_NODE	8186:4	8186:4	8	return
DESTINATION	8186:11	8186:11	7	( 1 )
EXPR	8186:11	8186:13	8	( 1 )
LEAF_NODE	8186:11	8186:11	9	(
FIELD	8186:12	8186:12	9	1
LEAF_NODE	8186:12	8186:12	10	1
LEAF_NODE	8186:13	8186:13	9	)
LEAF_NODE	8186:14	8186:14	7	;
LEAF_NODE	8187:4	8187:4	5	}
LEAF_NODE	8189:2	8189:2	3	rowsize
LEAF_NODE	8189:10	8189:10	3	=
LEAF_NODE	8189:12	8189:12	3	(
LEAF_NODE	8189:13	8189:13	3	(
LEAF_NODE	8189:14	8189:14	3	bps
LEAF_NODE	8189:18	8189:18	3	*
LEAF_NODE	8189:20	8189:20	3	spp
LEAF_NODE	8189:24	8189:24	3	*
LEAF_NODE	8189:26	8189:26	3	width
LEAF_NODE	8189:31	8189:31	3	)
LEAF_NODE	8189:33	8189:33	3	+
LEAF_NODE	8189:35	8189:35	3	7
LEAF_NODE	8189:36	8189:36	3	)
LEAF_NODE	8189:38	8189:38	3	/
EXPR_STATEMENT	8189:40	8189:41	3	8 ;
EXPR	8189:40	8189:40	4	8
FIELD	8189:40	8189:40	5	8
LEAF_NODE	8189:40	8189:40	6	8
LEAF_NODE	8189:41	8189:41	4	;
EXPR_STATEMENT	8190:2	8190:16	3	ready_bits = 0 ;
EXPR	8190:2	8190:2	4	ready_bits = 0
ASSIGN	8190:2	8190:15	5	ready_bits = 0
LVAL	8190:2	8190:2	6	ready_bits
FIELD	8190:2	8190:2	7	ready_bits
LEAF_NODE	8190:2	8190:2	8	ready_bits
ASSIGN_OP	8190:13	8190:13	6	=
LEAF_NODE	8190:13	8190:13	7	=
RVAL	8190:15	8190:15	6	0
FIELD	8190:15	8190:15	7	0
LEAF_NODE	8190:15	8190:15	8	0
LEAF_NODE	8190:16	8190:16	4	;
EXPR_STATEMENT	8191:2	8191:38	3	maskbits = ( uint32 ) - 1 >> ( 32 - bps ) ;
EXPR	8191:2	8191:2	4	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
ASSIGN	8191:2	8191:14	5	maskbits = ( uint32 ) - 1 >> ( 32 - bps )
LVAL	8191:2	8191:2	6	maskbits
FIELD	8191:2	8191:2	7	maskbits
LEAF_NODE	8191:2	8191:2	8	maskbits
ASSIGN_OP	8191:11	8191:11	6	=
LEAF_NODE	8191:11	8191:11	7	=
RVAL	8191:14	8191:37	6	( uint32 ) - 1 >> ( 32 - bps )
LEAF_NODE	8191:14	8191:14	7	(
TYPE_NAME	8191:15	8191:15	7	uint32
LEAF_NODE	8191:15	8191:15	8	uint32
LEAF_NODE	8191:21	8191:21	7	)
UNARY_EXPR	8191:22	8191:23	7	- 1
UNARY_OPERATOR	8191:22	8191:22	8	-
LEAF_NODE	8191:22	8191:22	9	-
FIELD	8191:23	8191:23	8	1
LEAF_NODE	8191:23	8191:23	9	1
LEAF_NODE	8191:25	8191:25	7	>>
LEAF_NODE	8191:28	8191:28	7	(
FIELD	8191:29	8191:29	7	32
LEAF_NODE	8191:29	8191:29	8	32
LEAF_NODE	8191:32	8191:32	7	-
FIELD	8191:34	8191:34	7	bps
LEAF_NODE	8191:34	8191:34	8	bps
LEAF_NODE	8191:37	8191:37	7	)
LEAF_NODE	8191:38	8191:38	4	;
EXPR_STATEMENT	8192:2	8192:19	3	buff1 = buff2 = 0 ;
EXPR	8192:2	8192:2	4	buff1 = buff2 = 0
ASSIGN	8192:2	8192:10	5	buff1 = buff2 = 0
LVAL	8192:2	8192:2	6	buff1
FIELD	8192:2	8192:2	7	buff1
LEAF_NODE	8192:2	8192:2	8	buff1
ASSIGN_OP	8192:8	8192:8	6	=
LEAF_NODE	8192:8	8192:8	7	=
RVAL	8192:10	8192:10	6	buff2 = 0
ASSIGN	8192:10	8192:18	7	buff2 = 0
LVAL	8192:10	8192:10	8	buff2
FIELD	8192:10	8192:10	9	buff2
LEAF_NODE	8192:10	8192:10	10	buff2
ASSIGN_OP	8192:16	8192:16	8	=
LEAF_NODE	8192:16	8192:16	9	=
RVAL	8192:18	8192:18	8	0
FIELD	8192:18	8192:18	9	0
LEAF_NODE	8192:18	8192:18	10	0
LEAF_NODE	8192:19	8192:19	4	;
ITERATION	8193:2	8194:4	3	
KEYWORD	8193:2	8193:2	4	for
LEAF_NODE	8193:2	8193:2	5	for
LEAF_NODE	8193:6	8193:6	4	(
FOR_INIT	8193:7	8193:14	4	row = 0 ;
EXPR	8193:7	8193:7	5	row = 0
ASSIGN	8193:7	8193:13	6	row = 0
LVAL	8193:7	8193:7	7	row
FIELD	8193:7	8193:7	8	row
LEAF_NODE	8193:7	8193:7	9	row
ASSIGN_OP	8193:11	8193:11	7	=
LEAF_NODE	8193:11	8193:11	8	=
RVAL	8193:13	8193:13	7	0
FIELD	8193:13	8193:13	8	0
LEAF_NODE	8193:13	8193:13	9	0
LEAF_NODE	8193:14	8193:14	5	;
CONDITION	8193:16	8193:16	4	row < length
EXPR	8193:16	8193:22	5	row < length
FIELD	8193:16	8193:16	6	row
LEAF_NODE	8193:16	8193:16	7	row
REL_OPERATOR	8193:20	8193:20	6	<
LEAF_NODE	8193:20	8193:20	7	<
FIELD	8193:22	8193:22	6	length
LEAF_NODE	8193:22	8193:22	7	length
LEAF_NODE	8193:28	8193:28	4	;
FOR_EXPR	8193:30	8193:30	4	row ++
EXPR	8193:30	8193:30	5	row ++
FIELD	8193:30	8193:33	6	row ++
LEAF_NODE	8193:30	8193:30	7	row
LEAF_NODE	8193:33	8193:33	7	++
LEAF_NODE	8193:35	8193:35	4	)
STATEMENTS	8194:4	8244:4	4	
LEAF_NODE	8194:4	8194:4	5	{
STATEMENTS	8195:4	8196:4	5	
LEAF_NODE	8195:4	8195:4	6	bit_offset
LEAF_NODE	8195:15	8195:15	6	=
LEAF_NODE	8195:17	8195:17	6	col
EXPR_STATEMENT	8195:21	8195:32	6	* bps * spp ;
EXPR	8195:21	8195:29	7	* bps * spp
UNARY_EXPR	8195:21	8195:23	8	* bps
UNARY_OPERATOR	8195:21	8195:21	9	*
LEAF_NODE	8195:21	8195:21	10	*
FIELD	8195:23	8195:23	9	bps
LEAF_NODE	8195:23	8195:23	10	bps
LEAF_NODE	8195:27	8195:27	8	*
FIELD	8195:29	8195:29	8	spp
LEAF_NODE	8195:29	8195:29	9	spp
LEAF_NODE	8195:32	8195:32	7	;
ITERATION	8196:4	8197:6	6	
KEYWORD	8196:4	8196:4	7	for
LEAF_NODE	8196:4	8196:4	8	for
LEAF_NODE	8196:8	8196:8	7	(
FOR_INIT	8196:9	8196:19	7	sample = 0 ;
EXPR	8196:9	8196:9	8	sample = 0
ASSIGN	8196:9	8196:18	9	sample = 0
LVAL	8196:9	8196:9	10	sample
FIELD	8196:9	8196:9	11	sample
LEAF_NODE	8196:9	8196:9	12	sample
ASSIGN_OP	8196:16	8196:16	10	=
LEAF_NODE	8196:16	8196:16	11	=
RVAL	8196:18	8196:18	10	0
FIELD	8196:18	8196:18	11	0
LEAF_NODE	8196:18	8196:18	12	0
LEAF_NODE	8196:19	8196:19	8	;
CONDITION	8196:21	8196:21	7	sample < spp
EXPR	8196:21	8196:30	8	sample < spp
FIELD	8196:21	8196:21	9	sample
LEAF_NODE	8196:21	8196:21	10	sample
REL_OPERATOR	8196:28	8196:28	9	<
LEAF_NODE	8196:28	8196:28	10	<
FIELD	8196:30	8196:30	9	spp
LEAF_NODE	8196:30	8196:30	10	spp
LEAF_NODE	8196:33	8196:33	7	;
FOR_EXPR	8196:35	8196:35	7	sample ++
EXPR	8196:35	8196:35	8	sample ++
FIELD	8196:35	8196:41	9	sample ++
LEAF_NODE	8196:35	8196:35	10	sample
LEAF_NODE	8196:41	8196:41	10	++
LEAF_NODE	8196:43	8196:43	7	)
STATEMENTS	8197:6	8243:6	7	
LEAF_NODE	8197:6	8197:6	8	{
STATEMENTS	8198:6	8242:6	8	
SELECTION	8198:6	8199:8	9	
KEYWORD	8198:6	8198:6	10	if
LEAF_NODE	8198:6	8198:6	11	if
LEAF_NODE	8198:9	8198:9	10	(
CONDITION	8198:10	8198:10	10	sample == 0
EXPR	8198:10	8198:20	11	sample == 0
FIELD	8198:10	8198:10	12	sample
LEAF_NODE	8198:10	8198:10	13	sample
EQ_OPERATOR	8198:17	8198:17	12	==
LEAF_NODE	8198:17	8198:17	13	==
FIELD	8198:20	8198:20	12	0
LEAF_NODE	8198:20	8198:20	13	0
LEAF_NODE	8198:21	8198:21	10	)
STATEMENTS	8199:8	8202:8	10	
LEAF_NODE	8199:8	8199:8	11	{
STATEMENTS	8200:8	8201:8	11	
EXPR_STATEMENT	8200:8	8200:33	12	src_byte = bit_offset / 8 ;
EXPR	8200:8	8200:8	13	src_byte = bit_offset / 8
ASSIGN	8200:8	8200:19	14	src_byte = bit_offset / 8
LVAL	8200:8	8200:8	15	src_byte
FIELD	8200:8	8200:8	16	src_byte
LEAF_NODE	8200:8	8200:8	17	src_byte
ASSIGN_OP	8200:17	8200:17	15	=
LEAF_NODE	8200:17	8200:17	16	=
RVAL	8200:19	8200:32	15	bit_offset / 8
FIELD	8200:19	8200:19	16	bit_offset
LEAF_NODE	8200:19	8200:19	17	bit_offset
LEAF_NODE	8200:30	8200:30	16	/
FIELD	8200:32	8200:32	16	8
LEAF_NODE	8200:32	8200:32	17	8
LEAF_NODE	8200:33	8200:33	13	;
EXPR_STATEMENT	8201:8	8201:33	12	src_bit = bit_offset % 8 ;
EXPR	8201:8	8201:8	13	src_bit = bit_offset % 8
ASSIGN	8201:8	8201:19	14	src_bit = bit_offset % 8
LVAL	8201:8	8201:8	15	src_bit
FIELD	8201:8	8201:8	16	src_bit
LEAF_NODE	8201:8	8201:8	17	src_bit
ASSIGN_OP	8201:17	8201:17	15	=
LEAF_NODE	8201:17	8201:17	16	=
RVAL	8201:19	8201:32	15	bit_offset % 8
FIELD	8201:19	8201:19	16	bit_offset
LEAF_NODE	8201:19	8201:19	17	bit_offset
LEAF_NODE	8201:30	8201:30	16	%
FIELD	8201:32	8201:32	16	8
LEAF_NODE	8201:32	8201:32	17	8
LEAF_NODE	8201:33	8201:33	13	;
LEAF_NODE	8202:8	8202:8	11	}
SELECTION	8203:6	8204:8	9	
KEYWORD	8203:6	8203:6	10	else
LEAF_NODE	8203:6	8203:6	11	else
STATEMENTS	8204:8	8207:8	10	
LEAF_NODE	8204:8	8204:8	11	{
STATEMENTS	8205:8	8206:8	11	
EXPR_STATEMENT	8205:8	8205:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8205:8	8205:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8205:8	8205:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8205:8	8205:8	15	src_byte
FIELD	8205:8	8205:8	16	src_byte
LEAF_NODE	8205:8	8205:8	17	src_byte
ASSIGN_OP	8205:17	8205:17	15	=
LEAF_NODE	8205:17	8205:17	16	=
RVAL	8205:19	8205:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8205:19	8205:19	16	(
FIELD	8205:20	8205:20	16	bit_offset
LEAF_NODE	8205:20	8205:20	17	bit_offset
LEAF_NODE	8205:31	8205:31	16	+
LEAF_NODE	8205:33	8205:33	16	(
FIELD	8205:34	8205:34	16	sample
LEAF_NODE	8205:34	8205:34	17	sample
LEAF_NODE	8205:41	8205:41	16	*
FIELD	8205:43	8205:43	16	bps
LEAF_NODE	8205:43	8205:43	17	bps
LEAF_NODE	8205:46	8205:46	16	)
LEAF_NODE	8205:47	8205:47	16	)
LEAF_NODE	8205:49	8205:49	16	/
FIELD	8205:51	8205:51	16	8
LEAF_NODE	8205:51	8205:51	17	8
LEAF_NODE	8205:52	8205:52	13	;
EXPR_STATEMENT	8206:8	8206:52	12	src_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8206:8	8206:8	13	src_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8206:8	8206:19	14	src_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8206:8	8206:8	15	src_bit
FIELD	8206:8	8206:8	16	src_bit
LEAF_NODE	8206:8	8206:8	17	src_bit
ASSIGN_OP	8206:17	8206:17	15	=
LEAF_NODE	8206:17	8206:17	16	=
RVAL	8206:19	8206:51	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8206:19	8206:19	16	(
FIELD	8206:20	8206:20	16	bit_offset
LEAF_NODE	8206:20	8206:20	17	bit_offset
LEAF_NODE	8206:31	8206:31	16	+
LEAF_NODE	8206:33	8206:33	16	(
FIELD	8206:34	8206:34	16	sample
LEAF_NODE	8206:34	8206:34	17	sample
LEAF_NODE	8206:41	8206:41	16	*
FIELD	8206:43	8206:43	16	bps
LEAF_NODE	8206:43	8206:43	17	bps
LEAF_NODE	8206:46	8206:46	16	)
LEAF_NODE	8206:47	8206:47	16	)
LEAF_NODE	8206:49	8206:49	16	%
FIELD	8206:51	8206:51	16	8
LEAF_NODE	8206:51	8206:51	17	8
LEAF_NODE	8206:52	8206:52	13	;
LEAF_NODE	8207:8	8207:8	11	}
SELECTION	8209:6	8210:1	9	
KEYWORD	8209:6	8209:6	10	switch
LEAF_NODE	8209:6	8209:6	11	switch
LEAF_NODE	8209:13	8209:13	10	(
CONDITION	8209:14	8209:14	10	rotation
EXPR	8209:14	8209:14	11	rotation
FIELD	8209:14	8209:14	12	rotation
LEAF_NODE	8209:14	8209:14	13	rotation
LEAF_NODE	8209:22	8209:22	10	)
STATEMENTS	8210:1	8217:8	10	
LEAF_NODE	8210:1	8210:1	11	{
STATEMENTS	8211:8	8216:18	11	
LABEL	8211:8	8211:16	12	case 90 :
LEAF_NODE	8211:8	8211:8	13	case
LEAF_NODE	8211:14	8211:14	13	90
LEAF_NODE	8211:16	8211:16	13	:
EXPR_STATEMENT	8211:18	8211:57	12	next = src + src_byte - ( row * rowsize ) ;
EXPR	8211:18	8211:18	13	next = src + src_byte - ( row * rowsize )
ASSIGN	8211:18	8211:25	14	next = src + src_byte - ( row * rowsize )
LVAL	8211:18	8211:18	15	next
FIELD	8211:18	8211:18	16	next
LEAF_NODE	8211:18	8211:18	17	next
ASSIGN_OP	8211:23	8211:23	15	=
LEAF_NODE	8211:23	8211:23	16	=
RVAL	8211:25	8211:56	15	src + src_byte - ( row * rowsize )
FIELD	8211:25	8211:25	16	src
LEAF_NODE	8211:25	8211:25	17	src
LEAF_NODE	8211:29	8211:29	16	+
FIELD	8211:31	8211:31	16	src_byte
LEAF_NODE	8211:31	8211:31	17	src_byte
LEAF_NODE	8211:40	8211:40	16	-
LEAF_NODE	8211:42	8211:42	16	(
FIELD	8211:43	8211:43	16	row
LEAF_NODE	8211:43	8211:43	17	row
LEAF_NODE	8211:47	8211:47	16	*
FIELD	8211:49	8211:49	16	rowsize
LEAF_NODE	8211:49	8211:49	17	rowsize
LEAF_NODE	8211:56	8211:56	16	)
LEAF_NODE	8211:57	8211:57	13	;
JUMP_STATEMENT	8212:18	8212:23	12	break DESTINATION ;
KEYWORD	8212:18	8212:18	13	break
LEAF_NODE	8212:18	8212:18	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8212:23	8212:23	13	;
LABEL	8213:8	8213:16	12	case 270 :
LEAF_NODE	8213:8	8213:8	13	case
LEAF_NODE	8213:13	8213:13	13	270
LEAF_NODE	8213:16	8213:16	13	:
EXPR_STATEMENT	8213:18	8213:57	12	next = src + src_byte + ( row * rowsize ) ;
EXPR	8213:18	8213:18	13	next = src + src_byte + ( row * rowsize )
ASSIGN	8213:18	8213:25	14	next = src + src_byte + ( row * rowsize )
LVAL	8213:18	8213:18	15	next
FIELD	8213:18	8213:18	16	next
LEAF_NODE	8213:18	8213:18	17	next
ASSIGN_OP	8213:23	8213:23	15	=
LEAF_NODE	8213:23	8213:23	16	=
RVAL	8213:25	8213:56	15	src + src_byte + ( row * rowsize )
FIELD	8213:25	8213:25	16	src
LEAF_NODE	8213:25	8213:25	17	src
LEAF_NODE	8213:29	8213:29	16	+
FIELD	8213:31	8213:31	16	src_byte
LEAF_NODE	8213:31	8213:31	17	src_byte
LEAF_NODE	8213:40	8213:40	16	+
LEAF_NODE	8213:42	8213:42	16	(
FIELD	8213:43	8213:43	16	row
LEAF_NODE	8213:43	8213:43	17	row
LEAF_NODE	8213:47	8213:47	16	*
FIELD	8213:49	8213:49	16	rowsize
LEAF_NODE	8213:49	8213:49	17	rowsize
LEAF_NODE	8213:56	8213:56	16	)
LEAF_NODE	8213:57	8213:57	13	;
JUMP_STATEMENT	8214:11	8214:16	12	break DESTINATION ;
KEYWORD	8214:11	8214:11	13	break
LEAF_NODE	8214:11	8214:11	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8214:16	8214:16	13	;
LABEL	8215:1	8215:8	12	default :
LEAF_NODE	8215:1	8215:1	13	default
LEAF_NODE	8215:8	8215:8	13	:
EXPR_STATEMENT	8215:11	8215:81	12	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation ) ;
EXPR	8215:11	8215:11	13	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
FUNCTION_CALL	8215:11	8215:80	14	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
CALLEE	8215:11	8215:11	15	TIFFError
LEAF_NODE	8215:11	8215:11	16	TIFFError
LEAF_NODE	8215:20	8215:20	15	(
ARGUMENT	8215:21	8215:21	15	"rotateContigSamples8bits"
FIELD	8215:21	8215:21	16	"rotateContigSamples8bits"
LEAF_NODE	8215:21	8215:21	17	"rotateContigSamples8bits"
LEAF_NODE	8215:47	8215:47	15	,
ARGUMENT	8215:49	8215:49	15	"Invalid rotation %d"
FIELD	8215:49	8215:49	16	"Invalid rotation %d"
LEAF_NODE	8215:49	8215:49	17	"Invalid rotation %d"
LEAF_NODE	8215:70	8215:70	15	,
ARGUMENT	8215:72	8215:72	15	rotation
FIELD	8215:72	8215:72	16	rotation
LEAF_NODE	8215:72	8215:72	17	rotation
LEAF_NODE	8215:80	8215:80	15	)
LEAF_NODE	8215:81	8215:81	13	;
JUMP_STATEMENT	8216:18	8216:28	12	return ( 1 ) ;
KEYWORD	8216:18	8216:18	13	return
LEAF_NODE	8216:18	8216:18	14	return
DESTINATION	8216:25	8216:25	13	( 1 )
EXPR	8216:25	8216:27	14	( 1 )
LEAF_NODE	8216:25	8216:25	15	(
FIELD	8216:26	8216:26	15	1
LEAF_NODE	8216:26	8216:26	16	1
LEAF_NODE	8216:27	8216:27	15	)
LEAF_NODE	8216:28	8216:28	13	;
LEAF_NODE	8217:8	8217:8	11	}
EXPR_STATEMENT	8218:6	8218:50	9	matchbits = maskbits << ( 32 - src_bit - bps ) ;
EXPR	8218:6	8218:6	10	matchbits = maskbits << ( 32 - src_bit - bps )
ASSIGN	8218:6	8218:18	11	matchbits = maskbits << ( 32 - src_bit - bps )
LVAL	8218:6	8218:6	12	matchbits
FIELD	8218:6	8218:6	13	matchbits
LEAF_NODE	8218:6	8218:6	14	matchbits
ASSIGN_OP	8218:16	8218:16	12	=
LEAF_NODE	8218:16	8218:16	13	=
RVAL	8218:18	8218:49	12	maskbits << ( 32 - src_bit - bps )
FIELD	8218:18	8218:18	13	maskbits
LEAF_NODE	8218:18	8218:18	14	maskbits
LEAF_NODE	8218:27	8218:27	13	<<
LEAF_NODE	8218:30	8218:30	13	(
FIELD	8218:31	8218:31	13	32
LEAF_NODE	8218:31	8218:31	14	32
LEAF_NODE	8218:34	8218:34	13	-
FIELD	8218:36	8218:36	13	src_bit
LEAF_NODE	8218:36	8218:36	14	src_bit
LEAF_NODE	8218:44	8218:44	13	-
FIELD	8218:46	8218:46	13	bps
LEAF_NODE	8218:46	8218:46	14	bps
LEAF_NODE	8218:49	8218:49	13	)
LEAF_NODE	8218:50	8218:50	10	;
SELECTION	8219:6	8220:1	9	
KEYWORD	8219:6	8219:6	10	if
LEAF_NODE	8219:6	8219:6	11	if
LEAF_NODE	8219:9	8219:9	10	(
CONDITION	8219:10	8219:10	10	little_endian
EXPR	8219:10	8219:10	11	little_endian
FIELD	8219:10	8219:10	12	little_endian
LEAF_NODE	8219:10	8219:10	13	little_endian
LEAF_NODE	8219:23	8219:23	10	)
STATEMENTS	8220:1	8220:1	10	
EXPR_STATEMENT	8220:1	8220:69	11	buff1 = ( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ] ;
EXPR	8220:1	8220:1	12	buff1 = ( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
ASSIGN	8220:1	8220:9	13	buff1 = ( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
LVAL	8220:1	8220:1	14	buff1
FIELD	8220:1	8220:1	15	buff1
LEAF_NODE	8220:1	8220:1	16	buff1
ASSIGN_OP	8220:7	8220:7	14	=
LEAF_NODE	8220:7	8220:7	15	=
RVAL	8220:9	8220:9	14	( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR	8220:9	8220:27	15	( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR_ELEM	8220:9	8220:23	16	( next [ 0 ] << 24 )
LEAF_NODE	8220:9	8220:9	17	(
FIELD	8220:10	8220:16	17	next [ 0 ]
LEAF_NODE	8220:10	8220:10	18	next
LEAF_NODE	8220:14	8220:14	18	[
EXPR	8220:15	8220:15	18	0
FIELD	8220:15	8220:15	19	0
LEAF_NODE	8220:15	8220:15	20	0
LEAF_NODE	8220:16	8220:16	18	]
LEAF_NODE	8220:18	8220:18	17	<<
FIELD	8220:21	8220:21	17	24
LEAF_NODE	8220:21	8220:21	18	24
LEAF_NODE	8220:23	8220:23	17	)
LEAF_NODE	8220:25	8220:25	16	|
BIT_OR_ELEM	8220:27	8220:27	16	( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR	8220:27	8220:45	17	( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR_ELEM	8220:27	8220:41	18	( next [ 1 ] << 16 )
LEAF_NODE	8220:27	8220:27	19	(
FIELD	8220:28	8220:34	19	next [ 1 ]
LEAF_NODE	8220:28	8220:28	20	next
LEAF_NODE	8220:32	8220:32	20	[
EXPR	8220:33	8220:33	20	1
FIELD	8220:33	8220:33	21	1
LEAF_NODE	8220:33	8220:33	22	1
LEAF_NODE	8220:34	8220:34	20	]
LEAF_NODE	8220:36	8220:36	19	<<
FIELD	8220:39	8220:39	19	16
LEAF_NODE	8220:39	8220:39	20	16
LEAF_NODE	8220:41	8220:41	19	)
LEAF_NODE	8220:43	8220:43	18	|
BIT_OR_ELEM	8220:45	8220:45	18	( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR	8220:45	8220:62	19	( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR_ELEM	8220:45	8220:58	20	( next [ 2 ] << 8 )
LEAF_NODE	8220:45	8220:45	21	(
FIELD	8220:46	8220:52	21	next [ 2 ]
LEAF_NODE	8220:46	8220:46	22	next
LEAF_NODE	8220:50	8220:50	22	[
EXPR	8220:51	8220:51	22	2
FIELD	8220:51	8220:51	23	2
LEAF_NODE	8220:51	8220:51	24	2
LEAF_NODE	8220:52	8220:52	22	]
LEAF_NODE	8220:54	8220:54	21	<<
FIELD	8220:57	8220:57	21	8
LEAF_NODE	8220:57	8220:57	22	8
LEAF_NODE	8220:58	8220:58	21	)
LEAF_NODE	8220:60	8220:60	20	|
BIT_OR_ELEM	8220:62	8220:62	20	next [ 3 ]
FIELD	8220:62	8220:68	21	next [ 3 ]
LEAF_NODE	8220:62	8220:62	22	next
LEAF_NODE	8220:66	8220:66	22	[
EXPR	8220:67	8220:67	22	3
FIELD	8220:67	8220:67	23	3
LEAF_NODE	8220:67	8220:67	24	3
LEAF_NODE	8220:68	8220:68	22	]
LEAF_NODE	8220:69	8220:69	12	;
SELECTION	8221:6	8222:1	9	
KEYWORD	8221:6	8221:6	10	else
LEAF_NODE	8221:6	8221:6	11	else
STATEMENTS	8222:1	8222:1	10	
EXPR_STATEMENT	8222:1	8222:69	11	buff1 = ( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ] ;
EXPR	8222:1	8222:1	12	buff1 = ( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
ASSIGN	8222:1	8222:9	13	buff1 = ( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
LVAL	8222:1	8222:1	14	buff1
FIELD	8222:1	8222:1	15	buff1
LEAF_NODE	8222:1	8222:1	16	buff1
ASSIGN_OP	8222:7	8222:7	14	=
LEAF_NODE	8222:7	8222:7	15	=
RVAL	8222:9	8222:9	14	( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR	8222:9	8222:27	15	( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR_ELEM	8222:9	8222:23	16	( next [ 3 ] << 24 )
LEAF_NODE	8222:9	8222:9	17	(
FIELD	8222:10	8222:16	17	next [ 3 ]
LEAF_NODE	8222:10	8222:10	18	next
LEAF_NODE	8222:14	8222:14	18	[
EXPR	8222:15	8222:15	18	3
FIELD	8222:15	8222:15	19	3
LEAF_NODE	8222:15	8222:15	20	3
LEAF_NODE	8222:16	8222:16	18	]
LEAF_NODE	8222:18	8222:18	17	<<
FIELD	8222:21	8222:21	17	24
LEAF_NODE	8222:21	8222:21	18	24
LEAF_NODE	8222:23	8222:23	17	)
LEAF_NODE	8222:25	8222:25	16	|
BIT_OR_ELEM	8222:27	8222:27	16	( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR	8222:27	8222:45	17	( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR_ELEM	8222:27	8222:41	18	( next [ 2 ] << 16 )
LEAF_NODE	8222:27	8222:27	19	(
FIELD	8222:28	8222:34	19	next [ 2 ]
LEAF_NODE	8222:28	8222:28	20	next
LEAF_NODE	8222:32	8222:32	20	[
EXPR	8222:33	8222:33	20	2
FIELD	8222:33	8222:33	21	2
LEAF_NODE	8222:33	8222:33	22	2
LEAF_NODE	8222:34	8222:34	20	]
LEAF_NODE	8222:36	8222:36	19	<<
FIELD	8222:39	8222:39	19	16
LEAF_NODE	8222:39	8222:39	20	16
LEAF_NODE	8222:41	8222:41	19	)
LEAF_NODE	8222:43	8222:43	18	|
BIT_OR_ELEM	8222:45	8222:45	18	( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR	8222:45	8222:62	19	( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR_ELEM	8222:45	8222:58	20	( next [ 1 ] << 8 )
LEAF_NODE	8222:45	8222:45	21	(
FIELD	8222:46	8222:52	21	next [ 1 ]
LEAF_NODE	8222:46	8222:46	22	next
LEAF_NODE	8222:50	8222:50	22	[
EXPR	8222:51	8222:51	22	1
FIELD	8222:51	8222:51	23	1
LEAF_NODE	8222:51	8222:51	24	1
LEAF_NODE	8222:52	8222:52	22	]
LEAF_NODE	8222:54	8222:54	21	<<
FIELD	8222:57	8222:57	21	8
LEAF_NODE	8222:57	8222:57	22	8
LEAF_NODE	8222:58	8222:58	21	)
LEAF_NODE	8222:60	8222:60	20	|
BIT_OR_ELEM	8222:62	8222:62	20	next [ 0 ]
FIELD	8222:62	8222:68	21	next [ 0 ]
LEAF_NODE	8222:62	8222:62	22	next
LEAF_NODE	8222:66	8222:66	22	[
EXPR	8222:67	8222:67	22	0
FIELD	8222:67	8222:67	23	0
LEAF_NODE	8222:67	8222:67	24	0
LEAF_NODE	8222:68	8222:68	22	]
LEAF_NODE	8222:69	8222:69	12	;
LEAF_NODE	8223:6	8223:6	9	buff1
LEAF_NODE	8223:12	8223:12	9	=
LEAF_NODE	8223:14	8223:14	9	(
LEAF_NODE	8223:15	8223:15	9	buff1
LEAF_NODE	8223:21	8223:21	9	&
LEAF_NODE	8223:23	8223:23	9	matchbits
LEAF_NODE	8223:32	8223:32	9	)
LEAF_NODE	8223:34	8223:34	9	<<
LEAF_NODE	8223:37	8223:37	9	(
LEAF_NODE	8223:38	8223:38	9	src_bit
LEAF_NODE	8223:45	8223:45	9	)
LEAF_NODE	8223:46	8223:46	9	;
SELECTION	8226:6	8227:8	9	
KEYWORD	8226:6	8226:6	10	if
LEAF_NODE	8226:6	8226:6	11	if
LEAF_NODE	8226:9	8226:9	10	(
CONDITION	8226:10	8226:10	10	ready_bits >= 16
EXPR	8226:10	8226:24	11	ready_bits >= 16
FIELD	8226:10	8226:10	12	ready_bits
LEAF_NODE	8226:10	8226:10	13	ready_bits
REL_OPERATOR	8226:21	8226:21	12	>=
LEAF_NODE	8226:21	8226:21	13	>=
FIELD	8226:24	8226:24	12	16
LEAF_NODE	8226:24	8226:24	13	16
LEAF_NODE	8226:26	8226:26	10	)
STATEMENTS	8227:8	8236:8	10	
LEAF_NODE	8227:8	8227:8	11	{
STATEMENTS	8228:8	8235:8	11	
EXPR_STATEMENT	8228:8	8228:33	12	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	8228:8	8228:8	13	bytebuff1 = ( buff2 >> 24 )
ASSIGN	8228:8	8228:20	14	bytebuff1 = ( buff2 >> 24 )
LVAL	8228:8	8228:8	15	bytebuff1
FIELD	8228:8	8228:8	16	bytebuff1
LEAF_NODE	8228:8	8228:8	17	bytebuff1
ASSIGN_OP	8228:18	8228:18	15	=
LEAF_NODE	8228:18	8228:18	16	=
RVAL	8228:20	8228:32	15	( buff2 >> 24 )
LEAF_NODE	8228:20	8228:20	16	(
FIELD	8228:21	8228:21	16	buff2
LEAF_NODE	8228:21	8228:21	17	buff2
LEAF_NODE	8228:27	8228:27	16	>>
FIELD	8228:30	8228:30	16	24
LEAF_NODE	8228:30	8228:30	17	24
LEAF_NODE	8228:32	8228:32	16	)
LEAF_NODE	8228:33	8228:33	13	;
EXPR_STATEMENT	8229:8	8229:26	12	* dst ++ = bytebuff1 ;
EXPR	8229:8	8229:8	13	* dst ++ = bytebuff1
ASSIGN	8229:8	8229:17	14	* dst ++ = bytebuff1
LVAL	8229:8	8229:8	15	* dst ++
UNARY_EXPR	8229:8	8229:9	16	* dst ++
UNARY_OPERATOR	8229:8	8229:8	17	*
LEAF_NODE	8229:8	8229:8	18	*
FIELD	8229:9	8229:12	17	dst ++
LEAF_NODE	8229:9	8229:9	18	dst
LEAF_NODE	8229:12	8229:12	18	++
ASSIGN_OP	8229:15	8229:15	15	=
LEAF_NODE	8229:15	8229:15	16	=
RVAL	8229:17	8229:17	15	bytebuff1
FIELD	8229:17	8229:17	16	bytebuff1
LEAF_NODE	8229:17	8229:17	17	bytebuff1
LEAF_NODE	8229:26	8229:26	13	;
EXPR_STATEMENT	8230:8	8230:33	12	bytebuff2 = ( buff2 >> 16 ) ;
EXPR	8230:8	8230:8	13	bytebuff2 = ( buff2 >> 16 )
ASSIGN	8230:8	8230:20	14	bytebuff2 = ( buff2 >> 16 )
LVAL	8230:8	8230:8	15	bytebuff2
FIELD	8230:8	8230:8	16	bytebuff2
LEAF_NODE	8230:8	8230:8	17	bytebuff2
ASSIGN_OP	8230:18	8230:18	15	=
LEAF_NODE	8230:18	8230:18	16	=
RVAL	8230:20	8230:32	15	( buff2 >> 16 )
LEAF_NODE	8230:20	8230:20	16	(
FIELD	8230:21	8230:21	16	buff2
LEAF_NODE	8230:21	8230:21	17	buff2
LEAF_NODE	8230:27	8230:27	16	>>
FIELD	8230:30	8230:30	16	16
LEAF_NODE	8230:30	8230:30	17	16
LEAF_NODE	8230:32	8230:32	16	)
LEAF_NODE	8230:33	8230:33	13	;
EXPR_STATEMENT	8231:8	8231:26	12	* dst ++ = bytebuff2 ;
EXPR	8231:8	8231:8	13	* dst ++ = bytebuff2
ASSIGN	8231:8	8231:17	14	* dst ++ = bytebuff2
LVAL	8231:8	8231:8	15	* dst ++
UNARY_EXPR	8231:8	8231:9	16	* dst ++
UNARY_OPERATOR	8231:8	8231:8	17	*
LEAF_NODE	8231:8	8231:8	18	*
FIELD	8231:9	8231:12	17	dst ++
LEAF_NODE	8231:9	8231:9	18	dst
LEAF_NODE	8231:12	8231:12	18	++
ASSIGN_OP	8231:15	8231:15	15	=
LEAF_NODE	8231:15	8231:15	16	=
RVAL	8231:17	8231:17	15	bytebuff2
FIELD	8231:17	8231:17	16	bytebuff2
LEAF_NODE	8231:17	8231:17	17	bytebuff2
LEAF_NODE	8231:26	8231:26	13	;
EXPR_STATEMENT	8232:8	8232:24	12	ready_bits -= 16 ;
EXPR	8232:8	8232:8	13	ready_bits -= 16
ASSIGN	8232:8	8232:22	14	ready_bits -= 16
LVAL	8232:8	8232:8	15	ready_bits
FIELD	8232:8	8232:8	16	ready_bits
LEAF_NODE	8232:8	8232:8	17	ready_bits
ASSIGN_OP	8232:19	8232:19	15	-=
LEAF_NODE	8232:19	8232:19	16	-=
RVAL	8232:22	8232:22	15	16
FIELD	8232:22	8232:22	16	16
LEAF_NODE	8232:22	8232:22	17	16
LEAF_NODE	8232:24	8232:24	13	;
EXPR_STATEMENT	8235:8	8235:55	12	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) ) ;
EXPR	8235:8	8235:8	13	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
ASSIGN	8235:8	8235:16	14	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LVAL	8235:8	8235:8	15	buff2
FIELD	8235:8	8235:8	16	buff2
LEAF_NODE	8235:8	8235:8	17	buff2
ASSIGN_OP	8235:14	8235:14	15	=
LEAF_NODE	8235:14	8235:14	16	=
RVAL	8235:16	8235:54	15	( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	8235:16	8235:16	16	(
BIT_OR	8235:17	8235:33	16	( buff2 << 16 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	8235:17	8235:29	17	( buff2 << 16 )
LEAF_NODE	8235:17	8235:17	18	(
FIELD	8235:18	8235:18	18	buff2
LEAF_NODE	8235:18	8235:18	19	buff2
LEAF_NODE	8235:24	8235:24	18	<<
FIELD	8235:27	8235:27	18	16
LEAF_NODE	8235:27	8235:27	19	16
LEAF_NODE	8235:29	8235:29	18	)
LEAF_NODE	8235:31	8235:31	17	|
BIT_OR_ELEM	8235:33	8235:53	17	( buff1 >> ready_bits )
LEAF_NODE	8235:33	8235:33	18	(
FIELD	8235:34	8235:34	18	buff1
LEAF_NODE	8235:34	8235:34	19	buff1
LEAF_NODE	8235:40	8235:40	18	>>
FIELD	8235:43	8235:43	18	ready_bits
LEAF_NODE	8235:43	8235:43	19	ready_bits
LEAF_NODE	8235:53	8235:53	18	)
LEAF_NODE	8235:54	8235:54	16	)
LEAF_NODE	8235:55	8235:55	13	;
LEAF_NODE	8236:8	8236:8	11	}
SELECTION	8237:6	8238:8	9	
KEYWORD	8237:6	8237:6	10	else
LEAF_NODE	8237:6	8237:6	11	else
STATEMENTS	8238:8	8241:8	10	
LEAF_NODE	8238:8	8238:8	11	{
STATEMENTS	8239:8	8240:8	11	
EXPR_STATEMENT	8239:8	8239:33	12	bytebuff1 = bytebuff2 = 0 ;
EXPR	8239:8	8239:8	13	bytebuff1 = bytebuff2 = 0
ASSIGN	8239:8	8239:20	14	bytebuff1 = bytebuff2 = 0
LVAL	8239:8	8239:8	15	bytebuff1
FIELD	8239:8	8239:8	16	bytebuff1
LEAF_NODE	8239:8	8239:8	17	bytebuff1
ASSIGN_OP	8239:18	8239:18	15	=
LEAF_NODE	8239:18	8239:18	16	=
RVAL	8239:20	8239:20	15	bytebuff2 = 0
ASSIGN	8239:20	8239:32	16	bytebuff2 = 0
LVAL	8239:20	8239:20	17	bytebuff2
FIELD	8239:20	8239:20	18	bytebuff2
LEAF_NODE	8239:20	8239:20	19	bytebuff2
ASSIGN_OP	8239:30	8239:30	17	=
LEAF_NODE	8239:30	8239:30	18	=
RVAL	8239:32	8239:32	17	0
FIELD	8239:32	8239:32	18	0
LEAF_NODE	8239:32	8239:32	19	0
LEAF_NODE	8239:33	8239:33	13	;
EXPR_STATEMENT	8240:8	8240:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8240:8	8240:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8240:8	8240:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8240:8	8240:8	15	buff2
FIELD	8240:8	8240:8	16	buff2
LEAF_NODE	8240:8	8240:8	17	buff2
ASSIGN_OP	8240:14	8240:14	15	=
LEAF_NODE	8240:14	8240:14	16	=
RVAL	8240:16	8240:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8240:16	8240:16	16	(
BIT_OR	8240:17	8240:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8240:17	8240:17	17	buff2
FIELD	8240:17	8240:17	18	buff2
LEAF_NODE	8240:17	8240:17	19	buff2
LEAF_NODE	8240:23	8240:23	17	|
BIT_OR_ELEM	8240:25	8240:45	17	( buff1 >> ready_bits )
LEAF_NODE	8240:25	8240:25	18	(
FIELD	8240:26	8240:26	18	buff1
LEAF_NODE	8240:26	8240:26	19	buff1
LEAF_NODE	8240:32	8240:32	18	>>
FIELD	8240:35	8240:35	18	ready_bits
LEAF_NODE	8240:35	8240:35	19	ready_bits
LEAF_NODE	8240:45	8240:45	18	)
LEAF_NODE	8240:46	8240:46	16	)
LEAF_NODE	8240:47	8240:47	13	;
LEAF_NODE	8241:8	8241:8	11	}
EXPR_STATEMENT	8242:6	8242:23	9	ready_bits += bps ;
EXPR	8242:6	8242:6	10	ready_bits += bps
ASSIGN	8242:6	8242:20	11	ready_bits += bps
LVAL	8242:6	8242:6	12	ready_bits
FIELD	8242:6	8242:6	13	ready_bits
LEAF_NODE	8242:6	8242:6	14	ready_bits
ASSIGN_OP	8242:17	8242:17	12	+=
LEAF_NODE	8242:17	8242:17	13	+=
RVAL	8242:20	8242:20	12	bps
FIELD	8242:20	8242:20	13	bps
LEAF_NODE	8242:20	8242:20	14	bps
LEAF_NODE	8242:23	8242:23	10	;
LEAF_NODE	8243:6	8243:6	8	}
LEAF_NODE	8244:4	8244:4	5	}
ITERATION	8247:2	8248:4	3	
KEYWORD	8247:2	8247:2	4	while
LEAF_NODE	8247:2	8247:2	5	while
LEAF_NODE	8247:8	8247:8	4	(
CONDITION	8247:9	8247:9	4	ready_bits > 0
EXPR	8247:9	8247:22	5	ready_bits > 0
FIELD	8247:9	8247:9	6	ready_bits
LEAF_NODE	8247:9	8247:9	7	ready_bits
REL_OPERATOR	8247:20	8247:20	6	>
LEAF_NODE	8247:20	8247:20	7	>
FIELD	8247:22	8247:22	6	0
LEAF_NODE	8247:22	8247:22	7	0
LEAF_NODE	8247:23	8247:23	4	)
STATEMENTS	8248:4	8255:4	4	
LEAF_NODE	8248:4	8248:4	5	{
STATEMENTS	8249:4	8254:4	5	
EXPR_STATEMENT	8249:4	8249:29	6	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	8249:4	8249:4	7	bytebuff1 = ( buff2 >> 24 )
ASSIGN	8249:4	8249:16	8	bytebuff1 = ( buff2 >> 24 )
LVAL	8249:4	8249:4	9	bytebuff1
FIELD	8249:4	8249:4	10	bytebuff1
LEAF_NODE	8249:4	8249:4	11	bytebuff1
ASSIGN_OP	8249:14	8249:14	9	=
LEAF_NODE	8249:14	8249:14	10	=
RVAL	8249:16	8249:28	9	( buff2 >> 24 )
LEAF_NODE	8249:16	8249:16	10	(
FIELD	8249:17	8249:17	10	buff2
LEAF_NODE	8249:17	8249:17	11	buff2
LEAF_NODE	8249:23	8249:23	10	>>
FIELD	8249:26	8249:26	10	24
LEAF_NODE	8249:26	8249:26	11	24
LEAF_NODE	8249:28	8249:28	10	)
LEAF_NODE	8249:29	8249:29	7	;
EXPR_STATEMENT	8250:4	8250:22	6	* dst ++ = bytebuff1 ;
EXPR	8250:4	8250:4	7	* dst ++ = bytebuff1
ASSIGN	8250:4	8250:13	8	* dst ++ = bytebuff1
LVAL	8250:4	8250:4	9	* dst ++
UNARY_EXPR	8250:4	8250:5	10	* dst ++
UNARY_OPERATOR	8250:4	8250:4	11	*
LEAF_NODE	8250:4	8250:4	12	*
FIELD	8250:5	8250:8	11	dst ++
LEAF_NODE	8250:5	8250:5	12	dst
LEAF_NODE	8250:8	8250:8	12	++
ASSIGN_OP	8250:11	8250:11	9	=
LEAF_NODE	8250:11	8250:11	10	=
RVAL	8250:13	8250:13	9	bytebuff1
FIELD	8250:13	8250:13	10	bytebuff1
LEAF_NODE	8250:13	8250:13	11	bytebuff1
LEAF_NODE	8250:22	8250:22	7	;
EXPR_STATEMENT	8252:4	8252:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	8252:4	8252:4	7	buff2 = ( buff2 << 8 )
ASSIGN	8252:4	8252:12	8	buff2 = ( buff2 << 8 )
LVAL	8252:4	8252:4	9	buff2
FIELD	8252:4	8252:4	10	buff2
LEAF_NODE	8252:4	8252:4	11	buff2
ASSIGN_OP	8252:10	8252:10	9	=
LEAF_NODE	8252:10	8252:10	10	=
RVAL	8252:12	8252:23	9	( buff2 << 8 )
LEAF_NODE	8252:12	8252:12	10	(
FIELD	8252:13	8252:13	10	buff2
LEAF_NODE	8252:13	8252:13	11	buff2
LEAF_NODE	8252:19	8252:19	10	<<
FIELD	8252:22	8252:22	10	8
LEAF_NODE	8252:22	8252:22	11	8
LEAF_NODE	8252:23	8252:23	10	)
LEAF_NODE	8252:24	8252:24	7	;
EXPR_STATEMENT	8253:4	8253:25	6	bytebuff2 = bytebuff1 ;
EXPR	8253:4	8253:4	7	bytebuff2 = bytebuff1
ASSIGN	8253:4	8253:16	8	bytebuff2 = bytebuff1
LVAL	8253:4	8253:4	9	bytebuff2
FIELD	8253:4	8253:4	10	bytebuff2
LEAF_NODE	8253:4	8253:4	11	bytebuff2
ASSIGN_OP	8253:14	8253:14	9	=
LEAF_NODE	8253:14	8253:14	10	=
RVAL	8253:16	8253:16	9	bytebuff1
FIELD	8253:16	8253:16	10	bytebuff1
LEAF_NODE	8253:16	8253:16	11	bytebuff1
LEAF_NODE	8253:25	8253:25	7	;
EXPR_STATEMENT	8254:4	8254:19	6	ready_bits -= 8 ;
EXPR	8254:4	8254:4	7	ready_bits -= 8
ASSIGN	8254:4	8254:18	8	ready_bits -= 8
LVAL	8254:4	8254:4	9	ready_bits
FIELD	8254:4	8254:4	10	ready_bits
LEAF_NODE	8254:4	8254:4	11	ready_bits
ASSIGN_OP	8254:15	8254:15	9	-=
LEAF_NODE	8254:15	8254:15	10	-=
RVAL	8254:18	8254:18	9	8
FIELD	8254:18	8254:18	10	8
LEAF_NODE	8254:18	8254:18	11	8
LEAF_NODE	8254:19	8254:19	7	;
LEAF_NODE	8255:4	8255:4	5	}
JUMP_STATEMENT	8257:2	8257:12	3	return ( 0 ) ;
KEYWORD	8257:2	8257:2	4	return
LEAF_NODE	8257:2	8257:2	5	return
DESTINATION	8257:9	8257:9	4	( 0 )
EXPR	8257:9	8257:11	5	( 0 )
LEAF_NODE	8257:9	8257:9	6	(
FIELD	8257:10	8257:10	6	0
LEAF_NODE	8257:10	8257:10	7	0
LEAF_NODE	8257:11	8257:11	6	)
LEAF_NODE	8257:12	8257:12	4	;
LEAF_NODE	8258:2	8258:2	2	}
FUNCTION_DEF	8260:0	8365:2	1	
RETURN_TYPE	8260:0	8260:7	2	static int
LEAF_NODE	8260:0	8260:0	3	static
TYPE_NAME	8260:7	8260:7	3	int
LEAF_NODE	8260:7	8260:7	4	int
FUNCTION_NAME	8261:0	8261:0	2	rotateContigSamples32bits
LEAF_NODE	8261:0	8261:0	3	rotateContigSamples32bits
PARAMETER_LIST	8261:25	8262:77	2	( uint16 rotation , uint16 spp , uint16 bps , uint32 width , uint32 length , uint32 col , uint8 * src , uint8 * dst )
LEAF_NODE	8261:25	8261:25	3	(
PARAMETER_DECL	8261:26	8261:33	3	uint16 rotation
TYPE	8261:26	8261:26	4	uint16
TYPE_NAME	8261:26	8261:26	5	uint16
LEAF_NODE	8261:26	8261:26	6	uint16
NAME	8261:33	8261:33	4	rotation
LEAF_NODE	8261:33	8261:33	5	rotation
LEAF_NODE	8261:41	8261:41	3	,
PARAMETER_DECL	8261:43	8261:50	3	uint16 spp
TYPE	8261:43	8261:43	4	uint16
TYPE_NAME	8261:43	8261:43	5	uint16
LEAF_NODE	8261:43	8261:43	6	uint16
NAME	8261:50	8261:50	4	spp
LEAF_NODE	8261:50	8261:50	5	spp
LEAF_NODE	8261:53	8261:53	3	,
PARAMETER_DECL	8261:55	8261:62	3	uint16 bps
TYPE	8261:55	8261:55	4	uint16
TYPE_NAME	8261:55	8261:55	5	uint16
LEAF_NODE	8261:55	8261:55	6	uint16
NAME	8261:62	8261:62	4	bps
LEAF_NODE	8261:62	8261:62	5	bps
LEAF_NODE	8261:65	8261:65	3	,
PARAMETER_DECL	8261:67	8261:74	3	uint32 width
TYPE	8261:67	8261:67	4	uint32
TYPE_NAME	8261:67	8261:67	5	uint32
LEAF_NODE	8261:67	8261:67	6	uint32
NAME	8261:74	8261:74	4	width
LEAF_NODE	8261:74	8261:74	5	width
LEAF_NODE	8261:79	8261:79	3	,
PARAMETER_DECL	8262:26	8262:33	3	uint32 length
TYPE	8262:26	8262:26	4	uint32
TYPE_NAME	8262:26	8262:26	5	uint32
LEAF_NODE	8262:26	8262:26	6	uint32
NAME	8262:33	8262:33	4	length
LEAF_NODE	8262:33	8262:33	5	length
LEAF_NODE	8262:39	8262:39	3	,
PARAMETER_DECL	8262:43	8262:50	3	uint32 col
TYPE	8262:43	8262:43	4	uint32
TYPE_NAME	8262:43	8262:43	5	uint32
LEAF_NODE	8262:43	8262:43	6	uint32
NAME	8262:50	8262:50	4	col
LEAF_NODE	8262:50	8262:50	5	col
LEAF_NODE	8262:53	8262:53	3	,
PARAMETER_DECL	8262:55	8262:62	3	uint8 * src
TYPE	8262:55	8262:61	4	uint8 *
TYPE_NAME	8262:55	8262:55	5	uint8
LEAF_NODE	8262:55	8262:55	6	uint8
POINTER	8262:61	8262:61	5	*
LEAF_NODE	8262:61	8262:61	6	*
NAME	8262:62	8262:62	4	src
LEAF_NODE	8262:62	8262:62	5	src
LEAF_NODE	8262:65	8262:65	3	,
PARAMETER_DECL	8262:67	8262:74	3	uint8 * dst
TYPE	8262:67	8262:73	4	uint8 *
TYPE_NAME	8262:67	8262:67	5	uint8
LEAF_NODE	8262:67	8262:67	6	uint8
POINTER	8262:73	8262:73	5	*
LEAF_NODE	8262:73	8262:73	6	*
NAME	8262:74	8262:74	4	dst
LEAF_NODE	8262:74	8262:74	5	dst
LEAF_NODE	8262:77	8262:77	3	)
LEAF_NODE	8263:2	8263:2	2	{
STATEMENTS	8264:2	8364:2	2	
SIMPLE_DECL	8264:2	8264:46	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8264:2	8264:9	4	int ready_bits ; ready_bits = 0
TYPE	8264:2	8264:2	5	int
TYPE_NAME	8264:2	8264:2	6	int
LEAF_NODE	8264:2	8264:2	7	int
NAME	8264:9	8264:9	5	ready_bits
LEAF_NODE	8264:9	8264:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8264:9	8264:9	5	ready_bits = 0
ASSIGN	8264:9	8264:22	6	ready_bits = 0
LVAL	8264:9	8264:9	7	ready_bits
NAME	8264:9	8264:9	8	ready_bits
LEAF_NODE	8264:9	8264:9	9	ready_bits
ASSIGN_OP	8264:20	8264:20	7	=
LEAF_NODE	8264:20	8264:20	8	=
RVAL	8264:22	8264:22	7	0
FIELD	8264:22	8264:22	8	0
LEAF_NODE	8264:22	8264:22	9	0
LEAF_NODE	8264:46	8264:46	4	;
SIMPLE_DECL	8266:2	8266:33	3	uint32 row , uint32 rowsize , uint32 bit_offset ;
INIT_DECL_LIST	8266:2	8266:2	4	uint32 row , uint32 rowsize , uint32 bit_offset
VAR_DECL	8266:2	8266:9	5	uint32 row
TYPE	8266:2	8266:2	6	uint32
TYPE_NAME	8266:2	8266:2	7	uint32
LEAF_NODE	8266:2	8266:2	8	uint32
NAME	8266:9	8266:9	6	row
LEAF_NODE	8266:9	8266:9	7	row
LEAF_NODE	8266:12	8266:12	5	,
INIT_DECL_LIST	8266:2	8266:2	5	uint32 rowsize , uint32 bit_offset
VAR_DECL	8266:2	8266:14	6	uint32 rowsize
TYPE	8266:2	8266:2	7	uint32
TYPE_NAME	8266:2	8266:2	8	uint32
LEAF_NODE	8266:2	8266:2	9	uint32
NAME	8266:14	8266:14	7	rowsize
LEAF_NODE	8266:14	8266:14	8	rowsize
LEAF_NODE	8266:21	8266:21	6	,
VAR_DECL	8266:2	8266:23	6	uint32 bit_offset
TYPE	8266:2	8266:2	7	uint32
TYPE_NAME	8266:2	8266:2	8	uint32
LEAF_NODE	8266:2	8266:2	9	uint32
NAME	8266:23	8266:23	7	bit_offset
LEAF_NODE	8266:23	8266:23	8	bit_offset
LEAF_NODE	8266:33	8266:33	4	;
SIMPLE_DECL	8267:2	8267:26	3	uint32 src_byte , uint32 src_bit ;
INIT_DECL_LIST	8267:2	8267:2	4	uint32 src_byte , uint32 src_bit
VAR_DECL	8267:2	8267:9	5	uint32 src_byte
TYPE	8267:2	8267:2	6	uint32
TYPE_NAME	8267:2	8267:2	7	uint32
LEAF_NODE	8267:2	8267:2	8	uint32
NAME	8267:9	8267:9	6	src_byte
LEAF_NODE	8267:9	8267:9	7	src_byte
LEAF_NODE	8267:17	8267:17	5	,
VAR_DECL	8267:2	8267:19	5	uint32 src_bit
TYPE	8267:2	8267:2	6	uint32
TYPE_NAME	8267:2	8267:2	7	uint32
LEAF_NODE	8267:2	8267:2	8	uint32
NAME	8267:19	8267:19	6	src_bit
LEAF_NODE	8267:19	8267:19	7	src_bit
LEAF_NODE	8267:26	8267:26	4	;
SIMPLE_DECL	8268:2	8268:37	3	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0 ;
INIT_DECL_LIST	8268:2	8268:2	4	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0
VAR_DECL	8268:2	8268:9	5	uint32 longbuff1 ; longbuff1 = 0
TYPE	8268:2	8268:2	6	uint32
TYPE_NAME	8268:2	8268:2	7	uint32
LEAF_NODE	8268:2	8268:2	8	uint32
NAME	8268:9	8268:9	6	longbuff1
LEAF_NODE	8268:9	8268:9	7	longbuff1
LEAF_NODE	0:0	0:0	6	;
INIT	8268:9	8268:9	6	longbuff1 = 0
ASSIGN	8268:9	8268:21	7	longbuff1 = 0
LVAL	8268:9	8268:9	8	longbuff1
NAME	8268:9	8268:9	9	longbuff1
LEAF_NODE	8268:9	8268:9	10	longbuff1
ASSIGN_OP	8268:19	8268:19	8	=
LEAF_NODE	8268:19	8268:19	9	=
RVAL	8268:21	8268:21	8	0
FIELD	8268:21	8268:21	9	0
LEAF_NODE	8268:21	8268:21	10	0
LEAF_NODE	8268:22	8268:22	5	,
VAR_DECL	8268:2	8268:24	5	uint32 longbuff2 ; longbuff2 = 0
TYPE	8268:2	8268:2	6	uint32
TYPE_NAME	8268:2	8268:2	7	uint32
LEAF_NODE	8268:2	8268:2	8	uint32
NAME	8268:24	8268:24	6	longbuff2
LEAF_NODE	8268:24	8268:24	7	longbuff2
LEAF_NODE	0:0	0:0	6	;
INIT	8268:24	8268:24	6	longbuff2 = 0
ASSIGN	8268:24	8268:36	7	longbuff2 = 0
LVAL	8268:24	8268:24	8	longbuff2
NAME	8268:24	8268:24	9	longbuff2
LEAF_NODE	8268:24	8268:24	10	longbuff2
ASSIGN_OP	8268:34	8268:34	8	=
LEAF_NODE	8268:34	8268:34	9	=
RVAL	8268:36	8268:36	8	0
FIELD	8268:36	8268:36	9	0
LEAF_NODE	8268:36	8268:36	10	0
LEAF_NODE	8268:37	8268:37	4	;
SIMPLE_DECL	8269:2	8269:36	3	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0 ;
INIT_DECL_LIST	8269:2	8269:2	4	uint64 maskbits ; maskbits = 0 , uint64 matchbits ; matchbits = 0
VAR_DECL	8269:2	8269:9	5	uint64 maskbits ; maskbits = 0
TYPE	8269:2	8269:2	6	uint64
TYPE_NAME	8269:2	8269:2	7	uint64
LEAF_NODE	8269:2	8269:2	8	uint64
NAME	8269:9	8269:9	6	maskbits
LEAF_NODE	8269:9	8269:9	7	maskbits
LEAF_NODE	0:0	0:0	6	;
INIT	8269:9	8269:9	6	maskbits = 0
ASSIGN	8269:9	8269:20	7	maskbits = 0
LVAL	8269:9	8269:9	8	maskbits
NAME	8269:9	8269:9	9	maskbits
LEAF_NODE	8269:9	8269:9	10	maskbits
ASSIGN_OP	8269:18	8269:18	8	=
LEAF_NODE	8269:18	8269:18	9	=
RVAL	8269:20	8269:20	8	0
FIELD	8269:20	8269:20	9	0
LEAF_NODE	8269:20	8269:20	10	0
LEAF_NODE	8269:21	8269:21	5	,
VAR_DECL	8269:2	8269:23	5	uint64 matchbits ; matchbits = 0
TYPE	8269:2	8269:2	6	uint64
TYPE_NAME	8269:2	8269:2	7	uint64
LEAF_NODE	8269:2	8269:2	8	uint64
NAME	8269:23	8269:23	6	matchbits
LEAF_NODE	8269:23	8269:23	7	matchbits
LEAF_NODE	0:0	0:0	6	;
INIT	8269:23	8269:23	6	matchbits = 0
ASSIGN	8269:23	8269:35	7	matchbits = 0
LVAL	8269:23	8269:23	8	matchbits
NAME	8269:23	8269:23	9	matchbits
LEAF_NODE	8269:23	8269:23	10	matchbits
ASSIGN_OP	8269:33	8269:33	8	=
LEAF_NODE	8269:33	8269:33	9	=
RVAL	8269:35	8269:35	8	0
FIELD	8269:35	8269:35	9	0
LEAF_NODE	8269:35	8269:35	10	0
LEAF_NODE	8269:36	8269:36	4	;
SIMPLE_DECL	8270:2	8270:40	3	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0 ;
INIT_DECL_LIST	8270:2	8270:2	4	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	8270:2	8270:9	5	uint64 buff1 ; buff1 = 0
TYPE	8270:2	8270:2	6	uint64
TYPE_NAME	8270:2	8270:2	7	uint64
LEAF_NODE	8270:2	8270:2	8	uint64
NAME	8270:9	8270:9	6	buff1
LEAF_NODE	8270:9	8270:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8270:9	8270:9	6	buff1 = 0
ASSIGN	8270:9	8270:17	7	buff1 = 0
LVAL	8270:9	8270:9	8	buff1
NAME	8270:9	8270:9	9	buff1
LEAF_NODE	8270:9	8270:9	10	buff1
ASSIGN_OP	8270:15	8270:15	8	=
LEAF_NODE	8270:15	8270:15	9	=
RVAL	8270:17	8270:17	8	0
FIELD	8270:17	8270:17	9	0
LEAF_NODE	8270:17	8270:17	10	0
LEAF_NODE	8270:18	8270:18	5	,
INIT_DECL_LIST	8270:2	8270:2	5	uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	8270:2	8270:20	6	uint64 buff2 ; buff2 = 0
TYPE	8270:2	8270:2	7	uint64
TYPE_NAME	8270:2	8270:2	8	uint64
LEAF_NODE	8270:2	8270:2	9	uint64
NAME	8270:20	8270:20	7	buff2
LEAF_NODE	8270:20	8270:20	8	buff2
LEAF_NODE	0:0	0:0	7	;
INIT	8270:20	8270:20	7	buff2 = 0
ASSIGN	8270:20	8270:28	8	buff2 = 0
LVAL	8270:20	8270:20	9	buff2
NAME	8270:20	8270:20	10	buff2
LEAF_NODE	8270:20	8270:20	11	buff2
ASSIGN_OP	8270:26	8270:26	9	=
LEAF_NODE	8270:26	8270:26	10	=
RVAL	8270:28	8270:28	9	0
FIELD	8270:28	8270:28	10	0
LEAF_NODE	8270:28	8270:28	11	0
LEAF_NODE	8270:29	8270:29	6	,
VAR_DECL	8270:2	8270:31	6	uint64 buff3 ; buff3 = 0
TYPE	8270:2	8270:2	7	uint64
TYPE_NAME	8270:2	8270:2	8	uint64
LEAF_NODE	8270:2	8270:2	9	uint64
NAME	8270:31	8270:31	7	buff3
LEAF_NODE	8270:31	8270:31	8	buff3
LEAF_NODE	0:0	0:0	7	;
INIT	8270:31	8270:31	7	buff3 = 0
ASSIGN	8270:31	8270:39	8	buff3 = 0
LVAL	8270:31	8270:31	9	buff3
NAME	8270:31	8270:31	10	buff3
LEAF_NODE	8270:31	8270:31	11	buff3
ASSIGN_OP	8270:37	8270:37	9	=
LEAF_NODE	8270:37	8270:37	10	=
RVAL	8270:39	8270:39	9	0
FIELD	8270:39	8270:39	10	0
LEAF_NODE	8270:39	8270:39	11	0
LEAF_NODE	8270:40	8270:40	4	;
SIMPLE_DECL	8271:2	8271:67	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0 ;
INIT_DECL_LIST	8271:2	8271:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	8271:2	8271:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	8271:2	8271:2	6	uint8
TYPE_NAME	8271:2	8271:2	7	uint8
LEAF_NODE	8271:2	8271:2	8	uint8
NAME	8271:9	8271:9	6	bytebuff1
LEAF_NODE	8271:9	8271:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	8271:9	8271:9	6	bytebuff1 = 0
ASSIGN	8271:9	8271:21	7	bytebuff1 = 0
LVAL	8271:9	8271:9	8	bytebuff1
NAME	8271:9	8271:9	9	bytebuff1
LEAF_NODE	8271:9	8271:9	10	bytebuff1
ASSIGN_OP	8271:19	8271:19	8	=
LEAF_NODE	8271:19	8271:19	9	=
RVAL	8271:21	8271:21	8	0
FIELD	8271:21	8271:21	9	0
LEAF_NODE	8271:21	8271:21	10	0
LEAF_NODE	8271:22	8271:22	5	,
INIT_DECL_LIST	8271:2	8271:2	5	uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	8271:2	8271:24	6	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	8271:2	8271:2	7	uint8
TYPE_NAME	8271:2	8271:2	8	uint8
LEAF_NODE	8271:2	8271:2	9	uint8
NAME	8271:24	8271:24	7	bytebuff2
LEAF_NODE	8271:24	8271:24	8	bytebuff2
LEAF_NODE	0:0	0:0	7	;
INIT	8271:24	8271:24	7	bytebuff2 = 0
ASSIGN	8271:24	8271:36	8	bytebuff2 = 0
LVAL	8271:24	8271:24	9	bytebuff2
NAME	8271:24	8271:24	10	bytebuff2
LEAF_NODE	8271:24	8271:24	11	bytebuff2
ASSIGN_OP	8271:34	8271:34	9	=
LEAF_NODE	8271:34	8271:34	10	=
RVAL	8271:36	8271:36	9	0
FIELD	8271:36	8271:36	10	0
LEAF_NODE	8271:36	8271:36	11	0
LEAF_NODE	8271:37	8271:37	6	,
INIT_DECL_LIST	8271:2	8271:2	6	uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	8271:2	8271:39	7	uint8 bytebuff3 ; bytebuff3 = 0
TYPE	8271:2	8271:2	8	uint8
TYPE_NAME	8271:2	8271:2	9	uint8
LEAF_NODE	8271:2	8271:2	10	uint8
NAME	8271:39	8271:39	8	bytebuff3
LEAF_NODE	8271:39	8271:39	9	bytebuff3
LEAF_NODE	0:0	0:0	8	;
INIT	8271:39	8271:39	8	bytebuff3 = 0
ASSIGN	8271:39	8271:51	9	bytebuff3 = 0
LVAL	8271:39	8271:39	10	bytebuff3
NAME	8271:39	8271:39	11	bytebuff3
LEAF_NODE	8271:39	8271:39	12	bytebuff3
ASSIGN_OP	8271:49	8271:49	10	=
LEAF_NODE	8271:49	8271:49	11	=
RVAL	8271:51	8271:51	10	0
FIELD	8271:51	8271:51	11	0
LEAF_NODE	8271:51	8271:51	12	0
LEAF_NODE	8271:52	8271:52	7	,
VAR_DECL	8271:2	8271:54	7	uint8 bytebuff4 ; bytebuff4 = 0
TYPE	8271:2	8271:2	8	uint8
TYPE_NAME	8271:2	8271:2	9	uint8
LEAF_NODE	8271:2	8271:2	10	uint8
NAME	8271:54	8271:54	8	bytebuff4
LEAF_NODE	8271:54	8271:54	9	bytebuff4
LEAF_NODE	0:0	0:0	8	;
INIT	8271:54	8271:54	8	bytebuff4 = 0
ASSIGN	8271:54	8271:66	9	bytebuff4 = 0
LVAL	8271:54	8271:54	10	bytebuff4
NAME	8271:54	8271:54	11	bytebuff4
LEAF_NODE	8271:54	8271:54	12	bytebuff4
ASSIGN_OP	8271:64	8271:64	10	=
LEAF_NODE	8271:64	8271:64	11	=
RVAL	8271:66	8271:66	10	0
FIELD	8271:66	8271:66	11	0
LEAF_NODE	8271:66	8271:66	12	0
LEAF_NODE	8271:67	8271:67	4	;
SIMPLE_DECL	8272:2	8272:15	3	uint8 * next ;
VAR_DECL	8272:2	8272:11	4	uint8 * next
TYPE	8272:2	8272:10	5	uint8 *
TYPE_NAME	8272:2	8272:2	6	uint8
LEAF_NODE	8272:2	8272:2	7	uint8
POINTER	8272:10	8272:10	6	*
LEAF_NODE	8272:10	8272:10	7	*
NAME	8272:11	8272:11	5	next
LEAF_NODE	8272:11	8272:11	6	next
LEAF_NODE	8272:15	8272:15	4	;
SIMPLE_DECL	8273:2	8273:18	3	tsample_t sample ;
VAR_DECL	8273:2	8273:12	4	tsample_t sample
TYPE	8273:2	8273:2	5	tsample_t
TYPE_NAME	8273:2	8273:2	6	tsample_t
LEAF_NODE	8273:2	8273:2	7	tsample_t
NAME	8273:12	8273:12	5	sample
LEAF_NODE	8273:12	8273:12	6	sample
LEAF_NODE	8273:18	8273:18	4	;
SELECTION	8276:2	8277:4	3	
KEYWORD	8276:2	8276:2	4	if
LEAF_NODE	8276:2	8276:2	5	if
LEAF_NODE	8276:5	8276:5	4	(
CONDITION	8276:6	8276:6	4	( src == NULL ) || ( dst == NULL )
EXPR	8276:6	8276:6	5	( src == NULL ) || ( dst == NULL )
OR	8276:6	8276:23	6	( src == NULL ) || ( dst == NULL )
EXPR	8276:6	8276:18	7	( src == NULL )
LEAF_NODE	8276:6	8276:6	8	(
FIELD	8276:7	8276:7	8	src
LEAF_NODE	8276:7	8276:7	9	src
EQ_OPERATOR	8276:11	8276:11	8	==
LEAF_NODE	8276:11	8276:11	9	==
FIELD	8276:14	8276:14	8	NULL
LEAF_NODE	8276:14	8276:14	9	NULL
LEAF_NODE	8276:18	8276:18	8	)
LEAF_NODE	8276:20	8276:20	7	||
EXPR	8276:23	8276:35	7	( dst == NULL )
LEAF_NODE	8276:23	8276:23	8	(
FIELD	8276:24	8276:24	8	dst
LEAF_NODE	8276:24	8276:24	9	dst
EQ_OPERATOR	8276:28	8276:28	8	==
LEAF_NODE	8276:28	8276:28	9	==
FIELD	8276:31	8276:31	8	NULL
LEAF_NODE	8276:31	8276:31	9	NULL
LEAF_NODE	8276:35	8276:35	8	)
LEAF_NODE	8276:36	8276:36	4	)
STATEMENTS	8277:4	8280:4	4	
LEAF_NODE	8277:4	8277:4	5	{
STATEMENTS	8278:4	8279:4	5	
EXPR_STATEMENT	8278:4	8278:78	6	TIFFError ( "rotateContigSamples24bits" , "Invalid src or destination buffer" ) ;
EXPR	8278:4	8278:4	7	TIFFError ( "rotateContigSamples24bits" , "Invalid src or destination buffer" )
FUNCTION_CALL	8278:4	8278:77	8	TIFFError ( "rotateContigSamples24bits" , "Invalid src or destination buffer" )
CALLEE	8278:4	8278:4	9	TIFFError
LEAF_NODE	8278:4	8278:4	10	TIFFError
LEAF_NODE	8278:13	8278:13	9	(
ARGUMENT	8278:14	8278:14	9	"rotateContigSamples24bits"
FIELD	8278:14	8278:14	10	"rotateContigSamples24bits"
LEAF_NODE	8278:14	8278:14	11	"rotateContigSamples24bits"
LEAF_NODE	8278:41	8278:41	9	,
ARGUMENT	8278:42	8278:42	9	"Invalid src or destination buffer"
FIELD	8278:42	8278:42	10	"Invalid src or destination buffer"
LEAF_NODE	8278:42	8278:42	11	"Invalid src or destination buffer"
LEAF_NODE	8278:77	8278:77	9	)
LEAF_NODE	8278:78	8278:78	7	;
JUMP_STATEMENT	8279:4	8279:14	6	return ( 1 ) ;
KEYWORD	8279:4	8279:4	7	return
LEAF_NODE	8279:4	8279:4	8	return
DESTINATION	8279:11	8279:11	7	( 1 )
EXPR	8279:11	8279:13	8	( 1 )
LEAF_NODE	8279:11	8279:11	9	(
FIELD	8279:12	8279:12	9	1
LEAF_NODE	8279:12	8279:12	10	1
LEAF_NODE	8279:13	8279:13	9	)
LEAF_NODE	8279:14	8279:14	7	;
LEAF_NODE	8280:4	8280:4	5	}
LEAF_NODE	8289:2	8289:2	3	rowsize
LEAF_NODE	8289:10	8289:10	3	=
LEAF_NODE	8289:12	8289:12	3	(
LEAF_NODE	8289:13	8289:13	3	(
LEAF_NODE	8289:14	8289:14	3	bps
LEAF_NODE	8289:18	8289:18	3	*
LEAF_NODE	8289:20	8289:20	3	spp
LEAF_NODE	8289:24	8289:24	3	*
LEAF_NODE	8289:26	8289:26	3	width
LEAF_NODE	8289:31	8289:31	3	)
LEAF_NODE	8289:33	8289:33	3	+
LEAF_NODE	8289:35	8289:35	3	7
LEAF_NODE	8289:36	8289:36	3	)
LEAF_NODE	8289:38	8289:38	3	/
EXPR_STATEMENT	8289:40	8289:41	3	8 ;
EXPR	8289:40	8289:40	4	8
FIELD	8289:40	8289:40	5	8
LEAF_NODE	8289:40	8289:40	6	8
LEAF_NODE	8289:41	8289:41	4	;
EXPR_STATEMENT	8290:2	8290:16	3	ready_bits = 0 ;
EXPR	8290:2	8290:2	4	ready_bits = 0
ASSIGN	8290:2	8290:15	5	ready_bits = 0
LVAL	8290:2	8290:2	6	ready_bits
FIELD	8290:2	8290:2	7	ready_bits
LEAF_NODE	8290:2	8290:2	8	ready_bits
ASSIGN_OP	8290:13	8290:13	6	=
LEAF_NODE	8290:13	8290:13	7	=
RVAL	8290:15	8290:15	6	0
FIELD	8290:15	8290:15	7	0
LEAF_NODE	8290:15	8290:15	8	0
LEAF_NODE	8290:16	8290:16	4	;
EXPR_STATEMENT	8291:2	8291:38	3	maskbits = ( uint64 ) - 1 >> ( 64 - bps ) ;
EXPR	8291:2	8291:2	4	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
ASSIGN	8291:2	8291:14	5	maskbits = ( uint64 ) - 1 >> ( 64 - bps )
LVAL	8291:2	8291:2	6	maskbits
FIELD	8291:2	8291:2	7	maskbits
LEAF_NODE	8291:2	8291:2	8	maskbits
ASSIGN_OP	8291:11	8291:11	6	=
LEAF_NODE	8291:11	8291:11	7	=
RVAL	8291:14	8291:37	6	( uint64 ) - 1 >> ( 64 - bps )
LEAF_NODE	8291:14	8291:14	7	(
TYPE_NAME	8291:15	8291:15	7	uint64
LEAF_NODE	8291:15	8291:15	8	uint64
LEAF_NODE	8291:21	8291:21	7	)
UNARY_EXPR	8291:22	8291:23	7	- 1
UNARY_OPERATOR	8291:22	8291:22	8	-
LEAF_NODE	8291:22	8291:22	9	-
FIELD	8291:23	8291:23	8	1
LEAF_NODE	8291:23	8291:23	9	1
LEAF_NODE	8291:25	8291:25	7	>>
LEAF_NODE	8291:28	8291:28	7	(
FIELD	8291:29	8291:29	7	64
LEAF_NODE	8291:29	8291:29	8	64
LEAF_NODE	8291:32	8291:32	7	-
FIELD	8291:34	8291:34	7	bps
LEAF_NODE	8291:34	8291:34	8	bps
LEAF_NODE	8291:37	8291:37	7	)
LEAF_NODE	8291:38	8291:38	4	;
EXPR_STATEMENT	8292:2	8292:19	3	buff1 = buff2 = 0 ;
EXPR	8292:2	8292:2	4	buff1 = buff2 = 0
ASSIGN	8292:2	8292:10	5	buff1 = buff2 = 0
LVAL	8292:2	8292:2	6	buff1
FIELD	8292:2	8292:2	7	buff1
LEAF_NODE	8292:2	8292:2	8	buff1
ASSIGN_OP	8292:8	8292:8	6	=
LEAF_NODE	8292:8	8292:8	7	=
RVAL	8292:10	8292:10	6	buff2 = 0
ASSIGN	8292:10	8292:18	7	buff2 = 0
LVAL	8292:10	8292:10	8	buff2
FIELD	8292:10	8292:10	9	buff2
LEAF_NODE	8292:10	8292:10	10	buff2
ASSIGN_OP	8292:16	8292:16	8	=
LEAF_NODE	8292:16	8292:16	9	=
RVAL	8292:18	8292:18	8	0
FIELD	8292:18	8292:18	9	0
LEAF_NODE	8292:18	8292:18	10	0
LEAF_NODE	8292:19	8292:19	4	;
ITERATION	8293:2	8294:4	3	
KEYWORD	8293:2	8293:2	4	for
LEAF_NODE	8293:2	8293:2	5	for
LEAF_NODE	8293:6	8293:6	4	(
FOR_INIT	8293:7	8293:14	4	row = 0 ;
EXPR	8293:7	8293:7	5	row = 0
ASSIGN	8293:7	8293:13	6	row = 0
LVAL	8293:7	8293:7	7	row
FIELD	8293:7	8293:7	8	row
LEAF_NODE	8293:7	8293:7	9	row
ASSIGN_OP	8293:11	8293:11	7	=
LEAF_NODE	8293:11	8293:11	8	=
RVAL	8293:13	8293:13	7	0
FIELD	8293:13	8293:13	8	0
LEAF_NODE	8293:13	8293:13	9	0
LEAF_NODE	8293:14	8293:14	5	;
CONDITION	8293:16	8293:16	4	row < length
EXPR	8293:16	8293:22	5	row < length
FIELD	8293:16	8293:16	6	row
LEAF_NODE	8293:16	8293:16	7	row
REL_OPERATOR	8293:20	8293:20	6	<
LEAF_NODE	8293:20	8293:20	7	<
FIELD	8293:22	8293:22	6	length
LEAF_NODE	8293:22	8293:22	7	length
LEAF_NODE	8293:28	8293:28	4	;
FOR_EXPR	8293:30	8293:30	4	row ++
EXPR	8293:30	8293:30	5	row ++
FIELD	8293:30	8293:33	6	row ++
LEAF_NODE	8293:30	8293:30	7	row
LEAF_NODE	8293:33	8293:33	7	++
LEAF_NODE	8293:35	8293:35	4	)
STATEMENTS	8294:4	8355:4	4	
LEAF_NODE	8294:4	8294:4	5	{
STATEMENTS	8295:4	8296:4	5	
LEAF_NODE	8295:4	8295:4	6	bit_offset
LEAF_NODE	8295:15	8295:15	6	=
LEAF_NODE	8295:17	8295:17	6	col
EXPR_STATEMENT	8295:21	8295:32	6	* bps * spp ;
EXPR	8295:21	8295:29	7	* bps * spp
UNARY_EXPR	8295:21	8295:23	8	* bps
UNARY_OPERATOR	8295:21	8295:21	9	*
LEAF_NODE	8295:21	8295:21	10	*
FIELD	8295:23	8295:23	9	bps
LEAF_NODE	8295:23	8295:23	10	bps
LEAF_NODE	8295:27	8295:27	8	*
FIELD	8295:29	8295:29	8	spp
LEAF_NODE	8295:29	8295:29	9	spp
LEAF_NODE	8295:32	8295:32	7	;
ITERATION	8296:4	8297:6	6	
KEYWORD	8296:4	8296:4	7	for
LEAF_NODE	8296:4	8296:4	8	for
LEAF_NODE	8296:8	8296:8	7	(
FOR_INIT	8296:9	8296:19	7	sample = 0 ;
EXPR	8296:9	8296:9	8	sample = 0
ASSIGN	8296:9	8296:18	9	sample = 0
LVAL	8296:9	8296:9	10	sample
FIELD	8296:9	8296:9	11	sample
LEAF_NODE	8296:9	8296:9	12	sample
ASSIGN_OP	8296:16	8296:16	10	=
LEAF_NODE	8296:16	8296:16	11	=
RVAL	8296:18	8296:18	10	0
FIELD	8296:18	8296:18	11	0
LEAF_NODE	8296:18	8296:18	12	0
LEAF_NODE	8296:19	8296:19	8	;
CONDITION	8296:21	8296:21	7	sample < spp
EXPR	8296:21	8296:30	8	sample < spp
FIELD	8296:21	8296:21	9	sample
LEAF_NODE	8296:21	8296:21	10	sample
REL_OPERATOR	8296:28	8296:28	9	<
LEAF_NODE	8296:28	8296:28	10	<
FIELD	8296:30	8296:30	9	spp
LEAF_NODE	8296:30	8296:30	10	spp
LEAF_NODE	8296:33	8296:33	7	;
FOR_EXPR	8296:35	8296:35	7	sample ++
EXPR	8296:35	8296:35	8	sample ++
FIELD	8296:35	8296:41	9	sample ++
LEAF_NODE	8296:35	8296:35	10	sample
LEAF_NODE	8296:41	8296:41	10	++
LEAF_NODE	8296:43	8296:43	7	)
STATEMENTS	8297:6	8354:6	7	
LEAF_NODE	8297:6	8297:6	8	{
STATEMENTS	8298:6	8353:6	8	
SELECTION	8298:6	8299:8	9	
KEYWORD	8298:6	8298:6	10	if
LEAF_NODE	8298:6	8298:6	11	if
LEAF_NODE	8298:9	8298:9	10	(
CONDITION	8298:10	8298:10	10	sample == 0
EXPR	8298:10	8298:20	11	sample == 0
FIELD	8298:10	8298:10	12	sample
LEAF_NODE	8298:10	8298:10	13	sample
EQ_OPERATOR	8298:17	8298:17	12	==
LEAF_NODE	8298:17	8298:17	13	==
FIELD	8298:20	8298:20	12	0
LEAF_NODE	8298:20	8298:20	13	0
LEAF_NODE	8298:21	8298:21	10	)
STATEMENTS	8299:8	8302:8	10	
LEAF_NODE	8299:8	8299:8	11	{
STATEMENTS	8300:8	8301:8	11	
EXPR_STATEMENT	8300:8	8300:33	12	src_byte = bit_offset / 8 ;
EXPR	8300:8	8300:8	13	src_byte = bit_offset / 8
ASSIGN	8300:8	8300:19	14	src_byte = bit_offset / 8
LVAL	8300:8	8300:8	15	src_byte
FIELD	8300:8	8300:8	16	src_byte
LEAF_NODE	8300:8	8300:8	17	src_byte
ASSIGN_OP	8300:17	8300:17	15	=
LEAF_NODE	8300:17	8300:17	16	=
RVAL	8300:19	8300:32	15	bit_offset / 8
FIELD	8300:19	8300:19	16	bit_offset
LEAF_NODE	8300:19	8300:19	17	bit_offset
LEAF_NODE	8300:30	8300:30	16	/
FIELD	8300:32	8300:32	16	8
LEAF_NODE	8300:32	8300:32	17	8
LEAF_NODE	8300:33	8300:33	13	;
EXPR_STATEMENT	8301:8	8301:33	12	src_bit = bit_offset % 8 ;
EXPR	8301:8	8301:8	13	src_bit = bit_offset % 8
ASSIGN	8301:8	8301:19	14	src_bit = bit_offset % 8
LVAL	8301:8	8301:8	15	src_bit
FIELD	8301:8	8301:8	16	src_bit
LEAF_NODE	8301:8	8301:8	17	src_bit
ASSIGN_OP	8301:17	8301:17	15	=
LEAF_NODE	8301:17	8301:17	16	=
RVAL	8301:19	8301:32	15	bit_offset % 8
FIELD	8301:19	8301:19	16	bit_offset
LEAF_NODE	8301:19	8301:19	17	bit_offset
LEAF_NODE	8301:30	8301:30	16	%
FIELD	8301:32	8301:32	16	8
LEAF_NODE	8301:32	8301:32	17	8
LEAF_NODE	8301:33	8301:33	13	;
LEAF_NODE	8302:8	8302:8	11	}
SELECTION	8303:6	8304:8	9	
KEYWORD	8303:6	8303:6	10	else
LEAF_NODE	8303:6	8303:6	11	else
STATEMENTS	8304:8	8307:8	10	
LEAF_NODE	8304:8	8304:8	11	{
STATEMENTS	8305:8	8306:8	11	
EXPR_STATEMENT	8305:8	8305:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8305:8	8305:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8305:8	8305:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8305:8	8305:8	15	src_byte
FIELD	8305:8	8305:8	16	src_byte
LEAF_NODE	8305:8	8305:8	17	src_byte
ASSIGN_OP	8305:17	8305:17	15	=
LEAF_NODE	8305:17	8305:17	16	=
RVAL	8305:19	8305:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8305:19	8305:19	16	(
FIELD	8305:20	8305:20	16	bit_offset
LEAF_NODE	8305:20	8305:20	17	bit_offset
LEAF_NODE	8305:31	8305:31	16	+
LEAF_NODE	8305:33	8305:33	16	(
FIELD	8305:34	8305:34	16	sample
LEAF_NODE	8305:34	8305:34	17	sample
LEAF_NODE	8305:41	8305:41	16	*
FIELD	8305:43	8305:43	16	bps
LEAF_NODE	8305:43	8305:43	17	bps
LEAF_NODE	8305:46	8305:46	16	)
LEAF_NODE	8305:47	8305:47	16	)
LEAF_NODE	8305:49	8305:49	16	/
FIELD	8305:51	8305:51	16	8
LEAF_NODE	8305:51	8305:51	17	8
LEAF_NODE	8305:52	8305:52	13	;
EXPR_STATEMENT	8306:8	8306:52	12	src_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8306:8	8306:8	13	src_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8306:8	8306:19	14	src_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8306:8	8306:8	15	src_bit
FIELD	8306:8	8306:8	16	src_bit
LEAF_NODE	8306:8	8306:8	17	src_bit
ASSIGN_OP	8306:17	8306:17	15	=
LEAF_NODE	8306:17	8306:17	16	=
RVAL	8306:19	8306:51	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8306:19	8306:19	16	(
FIELD	8306:20	8306:20	16	bit_offset
LEAF_NODE	8306:20	8306:20	17	bit_offset
LEAF_NODE	8306:31	8306:31	16	+
LEAF_NODE	8306:33	8306:33	16	(
FIELD	8306:34	8306:34	16	sample
LEAF_NODE	8306:34	8306:34	17	sample
LEAF_NODE	8306:41	8306:41	16	*
FIELD	8306:43	8306:43	16	bps
LEAF_NODE	8306:43	8306:43	17	bps
LEAF_NODE	8306:46	8306:46	16	)
LEAF_NODE	8306:47	8306:47	16	)
LEAF_NODE	8306:49	8306:49	16	%
FIELD	8306:51	8306:51	16	8
LEAF_NODE	8306:51	8306:51	17	8
LEAF_NODE	8306:52	8306:52	13	;
LEAF_NODE	8307:8	8307:8	11	}
SELECTION	8309:6	8310:1	9	
KEYWORD	8309:6	8309:6	10	switch
LEAF_NODE	8309:6	8309:6	11	switch
LEAF_NODE	8309:13	8309:13	10	(
CONDITION	8309:14	8309:14	10	rotation
EXPR	8309:14	8309:14	11	rotation
FIELD	8309:14	8309:14	12	rotation
LEAF_NODE	8309:14	8309:14	13	rotation
LEAF_NODE	8309:22	8309:22	10	)
STATEMENTS	8310:1	8317:8	10	
LEAF_NODE	8310:1	8310:1	11	{
STATEMENTS	8311:8	8316:18	11	
LABEL	8311:8	8311:16	12	case 90 :
LEAF_NODE	8311:8	8311:8	13	case
LEAF_NODE	8311:14	8311:14	13	90
LEAF_NODE	8311:16	8311:16	13	:
EXPR_STATEMENT	8311:18	8311:57	12	next = src + src_byte - ( row * rowsize ) ;
EXPR	8311:18	8311:18	13	next = src + src_byte - ( row * rowsize )
ASSIGN	8311:18	8311:25	14	next = src + src_byte - ( row * rowsize )
LVAL	8311:18	8311:18	15	next
FIELD	8311:18	8311:18	16	next
LEAF_NODE	8311:18	8311:18	17	next
ASSIGN_OP	8311:23	8311:23	15	=
LEAF_NODE	8311:23	8311:23	16	=
RVAL	8311:25	8311:56	15	src + src_byte - ( row * rowsize )
FIELD	8311:25	8311:25	16	src
LEAF_NODE	8311:25	8311:25	17	src
LEAF_NODE	8311:29	8311:29	16	+
FIELD	8311:31	8311:31	16	src_byte
LEAF_NODE	8311:31	8311:31	17	src_byte
LEAF_NODE	8311:40	8311:40	16	-
LEAF_NODE	8311:42	8311:42	16	(
FIELD	8311:43	8311:43	16	row
LEAF_NODE	8311:43	8311:43	17	row
LEAF_NODE	8311:47	8311:47	16	*
FIELD	8311:49	8311:49	16	rowsize
LEAF_NODE	8311:49	8311:49	17	rowsize
LEAF_NODE	8311:56	8311:56	16	)
LEAF_NODE	8311:57	8311:57	13	;
JUMP_STATEMENT	8312:18	8312:23	12	break DESTINATION ;
KEYWORD	8312:18	8312:18	13	break
LEAF_NODE	8312:18	8312:18	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8312:23	8312:23	13	;
LABEL	8313:8	8313:16	12	case 270 :
LEAF_NODE	8313:8	8313:8	13	case
LEAF_NODE	8313:13	8313:13	13	270
LEAF_NODE	8313:16	8313:16	13	:
EXPR_STATEMENT	8313:18	8313:57	12	next = src + src_byte + ( row * rowsize ) ;
EXPR	8313:18	8313:18	13	next = src + src_byte + ( row * rowsize )
ASSIGN	8313:18	8313:25	14	next = src + src_byte + ( row * rowsize )
LVAL	8313:18	8313:18	15	next
FIELD	8313:18	8313:18	16	next
LEAF_NODE	8313:18	8313:18	17	next
ASSIGN_OP	8313:23	8313:23	15	=
LEAF_NODE	8313:23	8313:23	16	=
RVAL	8313:25	8313:56	15	src + src_byte + ( row * rowsize )
FIELD	8313:25	8313:25	16	src
LEAF_NODE	8313:25	8313:25	17	src
LEAF_NODE	8313:29	8313:29	16	+
FIELD	8313:31	8313:31	16	src_byte
LEAF_NODE	8313:31	8313:31	17	src_byte
LEAF_NODE	8313:40	8313:40	16	+
LEAF_NODE	8313:42	8313:42	16	(
FIELD	8313:43	8313:43	16	row
LEAF_NODE	8313:43	8313:43	17	row
LEAF_NODE	8313:47	8313:47	16	*
FIELD	8313:49	8313:49	16	rowsize
LEAF_NODE	8313:49	8313:49	17	rowsize
LEAF_NODE	8313:56	8313:56	16	)
LEAF_NODE	8313:57	8313:57	13	;
JUMP_STATEMENT	8314:11	8314:16	12	break DESTINATION ;
KEYWORD	8314:11	8314:11	13	break
LEAF_NODE	8314:11	8314:11	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	8314:16	8314:16	13	;
LABEL	8315:1	8315:8	12	default :
LEAF_NODE	8315:1	8315:1	13	default
LEAF_NODE	8315:8	8315:8	13	:
EXPR_STATEMENT	8315:11	8315:81	12	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation ) ;
EXPR	8315:11	8315:11	13	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
FUNCTION_CALL	8315:11	8315:80	14	TIFFError ( "rotateContigSamples8bits" , "Invalid rotation %d" , rotation )
CALLEE	8315:11	8315:11	15	TIFFError
LEAF_NODE	8315:11	8315:11	16	TIFFError
LEAF_NODE	8315:20	8315:20	15	(
ARGUMENT	8315:21	8315:21	15	"rotateContigSamples8bits"
FIELD	8315:21	8315:21	16	"rotateContigSamples8bits"
LEAF_NODE	8315:21	8315:21	17	"rotateContigSamples8bits"
LEAF_NODE	8315:47	8315:47	15	,
ARGUMENT	8315:49	8315:49	15	"Invalid rotation %d"
FIELD	8315:49	8315:49	16	"Invalid rotation %d"
LEAF_NODE	8315:49	8315:49	17	"Invalid rotation %d"
LEAF_NODE	8315:70	8315:70	15	,
ARGUMENT	8315:72	8315:72	15	rotation
FIELD	8315:72	8315:72	16	rotation
LEAF_NODE	8315:72	8315:72	17	rotation
LEAF_NODE	8315:80	8315:80	15	)
LEAF_NODE	8315:81	8315:81	13	;
JUMP_STATEMENT	8316:18	8316:28	12	return ( 1 ) ;
KEYWORD	8316:18	8316:18	13	return
LEAF_NODE	8316:18	8316:18	14	return
DESTINATION	8316:25	8316:25	13	( 1 )
EXPR	8316:25	8316:27	14	( 1 )
LEAF_NODE	8316:25	8316:25	15	(
FIELD	8316:26	8316:26	15	1
LEAF_NODE	8316:26	8316:26	16	1
LEAF_NODE	8316:27	8316:27	15	)
LEAF_NODE	8316:28	8316:28	13	;
LEAF_NODE	8317:8	8317:8	11	}
EXPR_STATEMENT	8318:6	8318:50	9	matchbits = maskbits << ( 64 - src_bit - bps ) ;
EXPR	8318:6	8318:6	10	matchbits = maskbits << ( 64 - src_bit - bps )
ASSIGN	8318:6	8318:18	11	matchbits = maskbits << ( 64 - src_bit - bps )
LVAL	8318:6	8318:6	12	matchbits
FIELD	8318:6	8318:6	13	matchbits
LEAF_NODE	8318:6	8318:6	14	matchbits
ASSIGN_OP	8318:16	8318:16	12	=
LEAF_NODE	8318:16	8318:16	13	=
RVAL	8318:18	8318:49	12	maskbits << ( 64 - src_bit - bps )
FIELD	8318:18	8318:18	13	maskbits
LEAF_NODE	8318:18	8318:18	14	maskbits
LEAF_NODE	8318:27	8318:27	13	<<
LEAF_NODE	8318:30	8318:30	13	(
FIELD	8318:31	8318:31	13	64
LEAF_NODE	8318:31	8318:31	14	64
LEAF_NODE	8318:34	8318:34	13	-
FIELD	8318:36	8318:36	13	src_bit
LEAF_NODE	8318:36	8318:36	14	src_bit
LEAF_NODE	8318:44	8318:44	13	-
FIELD	8318:46	8318:46	13	bps
LEAF_NODE	8318:46	8318:46	14	bps
LEAF_NODE	8318:49	8318:49	13	)
LEAF_NODE	8318:50	8318:50	10	;
SELECTION	8319:6	8320:8	9	
KEYWORD	8319:6	8319:6	10	if
LEAF_NODE	8319:6	8319:6	11	if
LEAF_NODE	8319:9	8319:9	10	(
CONDITION	8319:10	8319:10	10	little_endian
EXPR	8319:10	8319:10	11	little_endian
FIELD	8319:10	8319:10	12	little_endian
LEAF_NODE	8319:10	8319:10	13	little_endian
LEAF_NODE	8319:23	8319:23	10	)
STATEMENTS	8320:8	8323:8	10	
LEAF_NODE	8320:8	8320:8	11	{
STATEMENTS	8321:1	8322:8	11	
EXPR_STATEMENT	8321:1	8321:73	12	longbuff1 = ( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ] ;
EXPR	8321:1	8321:1	13	longbuff1 = ( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
ASSIGN	8321:1	8321:13	14	longbuff1 = ( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
LVAL	8321:1	8321:1	15	longbuff1
FIELD	8321:1	8321:1	16	longbuff1
LEAF_NODE	8321:1	8321:1	17	longbuff1
ASSIGN_OP	8321:11	8321:11	15	=
LEAF_NODE	8321:11	8321:11	16	=
RVAL	8321:13	8321:13	15	( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR	8321:13	8321:31	16	( next [ 0 ] << 24 ) | ( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR_ELEM	8321:13	8321:27	17	( next [ 0 ] << 24 )
LEAF_NODE	8321:13	8321:13	18	(
FIELD	8321:14	8321:20	18	next [ 0 ]
LEAF_NODE	8321:14	8321:14	19	next
LEAF_NODE	8321:18	8321:18	19	[
EXPR	8321:19	8321:19	19	0
FIELD	8321:19	8321:19	20	0
LEAF_NODE	8321:19	8321:19	21	0
LEAF_NODE	8321:20	8321:20	19	]
LEAF_NODE	8321:22	8321:22	18	<<
FIELD	8321:25	8321:25	18	24
LEAF_NODE	8321:25	8321:25	19	24
LEAF_NODE	8321:27	8321:27	18	)
LEAF_NODE	8321:29	8321:29	17	|
BIT_OR_ELEM	8321:31	8321:31	17	( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR	8321:31	8321:49	18	( next [ 1 ] << 16 ) | ( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR_ELEM	8321:31	8321:45	19	( next [ 1 ] << 16 )
LEAF_NODE	8321:31	8321:31	20	(
FIELD	8321:32	8321:38	20	next [ 1 ]
LEAF_NODE	8321:32	8321:32	21	next
LEAF_NODE	8321:36	8321:36	21	[
EXPR	8321:37	8321:37	21	1
FIELD	8321:37	8321:37	22	1
LEAF_NODE	8321:37	8321:37	23	1
LEAF_NODE	8321:38	8321:38	21	]
LEAF_NODE	8321:40	8321:40	20	<<
FIELD	8321:43	8321:43	20	16
LEAF_NODE	8321:43	8321:43	21	16
LEAF_NODE	8321:45	8321:45	20	)
LEAF_NODE	8321:47	8321:47	19	|
BIT_OR_ELEM	8321:49	8321:49	19	( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR	8321:49	8321:66	20	( next [ 2 ] << 8 ) | next [ 3 ]
BIT_OR_ELEM	8321:49	8321:62	21	( next [ 2 ] << 8 )
LEAF_NODE	8321:49	8321:49	22	(
FIELD	8321:50	8321:56	22	next [ 2 ]
LEAF_NODE	8321:50	8321:50	23	next
LEAF_NODE	8321:54	8321:54	23	[
EXPR	8321:55	8321:55	23	2
FIELD	8321:55	8321:55	24	2
LEAF_NODE	8321:55	8321:55	25	2
LEAF_NODE	8321:56	8321:56	23	]
LEAF_NODE	8321:58	8321:58	22	<<
FIELD	8321:61	8321:61	22	8
LEAF_NODE	8321:61	8321:61	23	8
LEAF_NODE	8321:62	8321:62	22	)
LEAF_NODE	8321:64	8321:64	21	|
BIT_OR_ELEM	8321:66	8321:66	21	next [ 3 ]
FIELD	8321:66	8321:72	22	next [ 3 ]
LEAF_NODE	8321:66	8321:66	23	next
LEAF_NODE	8321:70	8321:70	23	[
EXPR	8321:71	8321:71	23	3
FIELD	8321:71	8321:71	24	3
LEAF_NODE	8321:71	8321:71	25	3
LEAF_NODE	8321:72	8321:72	23	]
LEAF_NODE	8321:73	8321:73	13	;
EXPR_STATEMENT	8322:8	8322:29	12	longbuff2 = longbuff1 ;
EXPR	8322:8	8322:8	13	longbuff2 = longbuff1
ASSIGN	8322:8	8322:20	14	longbuff2 = longbuff1
LVAL	8322:8	8322:8	15	longbuff2
FIELD	8322:8	8322:8	16	longbuff2
LEAF_NODE	8322:8	8322:8	17	longbuff2
ASSIGN_OP	8322:18	8322:18	15	=
LEAF_NODE	8322:18	8322:18	16	=
RVAL	8322:20	8322:20	15	longbuff1
FIELD	8322:20	8322:20	16	longbuff1
LEAF_NODE	8322:20	8322:20	17	longbuff1
LEAF_NODE	8322:29	8322:29	13	;
LEAF_NODE	8323:8	8323:8	11	}
SELECTION	8324:6	8325:8	9	
KEYWORD	8324:6	8324:6	10	else
LEAF_NODE	8324:6	8324:6	11	else
STATEMENTS	8325:8	8328:1	10	
LEAF_NODE	8325:8	8325:8	11	{
STATEMENTS	8326:1	8327:8	11	
EXPR_STATEMENT	8326:1	8326:73	12	longbuff1 = ( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ] ;
EXPR	8326:1	8326:1	13	longbuff1 = ( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
ASSIGN	8326:1	8326:13	14	longbuff1 = ( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
LVAL	8326:1	8326:1	15	longbuff1
FIELD	8326:1	8326:1	16	longbuff1
LEAF_NODE	8326:1	8326:1	17	longbuff1
ASSIGN_OP	8326:11	8326:11	15	=
LEAF_NODE	8326:11	8326:11	16	=
RVAL	8326:13	8326:13	15	( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR	8326:13	8326:31	16	( next [ 3 ] << 24 ) | ( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR_ELEM	8326:13	8326:27	17	( next [ 3 ] << 24 )
LEAF_NODE	8326:13	8326:13	18	(
FIELD	8326:14	8326:20	18	next [ 3 ]
LEAF_NODE	8326:14	8326:14	19	next
LEAF_NODE	8326:18	8326:18	19	[
EXPR	8326:19	8326:19	19	3
FIELD	8326:19	8326:19	20	3
LEAF_NODE	8326:19	8326:19	21	3
LEAF_NODE	8326:20	8326:20	19	]
LEAF_NODE	8326:22	8326:22	18	<<
FIELD	8326:25	8326:25	18	24
LEAF_NODE	8326:25	8326:25	19	24
LEAF_NODE	8326:27	8326:27	18	)
LEAF_NODE	8326:29	8326:29	17	|
BIT_OR_ELEM	8326:31	8326:31	17	( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR	8326:31	8326:49	18	( next [ 2 ] << 16 ) | ( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR_ELEM	8326:31	8326:45	19	( next [ 2 ] << 16 )
LEAF_NODE	8326:31	8326:31	20	(
FIELD	8326:32	8326:38	20	next [ 2 ]
LEAF_NODE	8326:32	8326:32	21	next
LEAF_NODE	8326:36	8326:36	21	[
EXPR	8326:37	8326:37	21	2
FIELD	8326:37	8326:37	22	2
LEAF_NODE	8326:37	8326:37	23	2
LEAF_NODE	8326:38	8326:38	21	]
LEAF_NODE	8326:40	8326:40	20	<<
FIELD	8326:43	8326:43	20	16
LEAF_NODE	8326:43	8326:43	21	16
LEAF_NODE	8326:45	8326:45	20	)
LEAF_NODE	8326:47	8326:47	19	|
BIT_OR_ELEM	8326:49	8326:49	19	( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR	8326:49	8326:66	20	( next [ 1 ] << 8 ) | next [ 0 ]
BIT_OR_ELEM	8326:49	8326:62	21	( next [ 1 ] << 8 )
LEAF_NODE	8326:49	8326:49	22	(
FIELD	8326:50	8326:56	22	next [ 1 ]
LEAF_NODE	8326:50	8326:50	23	next
LEAF_NODE	8326:54	8326:54	23	[
EXPR	8326:55	8326:55	23	1
FIELD	8326:55	8326:55	24	1
LEAF_NODE	8326:55	8326:55	25	1
LEAF_NODE	8326:56	8326:56	23	]
LEAF_NODE	8326:58	8326:58	22	<<
FIELD	8326:61	8326:61	22	8
LEAF_NODE	8326:61	8326:61	23	8
LEAF_NODE	8326:62	8326:62	22	)
LEAF_NODE	8326:64	8326:64	21	|
BIT_OR_ELEM	8326:66	8326:66	21	next [ 0 ]
FIELD	8326:66	8326:72	22	next [ 0 ]
LEAF_NODE	8326:66	8326:66	23	next
LEAF_NODE	8326:70	8326:70	23	[
EXPR	8326:71	8326:71	23	0
FIELD	8326:71	8326:71	24	0
LEAF_NODE	8326:71	8326:71	25	0
LEAF_NODE	8326:72	8326:72	23	]
LEAF_NODE	8326:73	8326:73	13	;
EXPR_STATEMENT	8327:8	8327:29	12	longbuff2 = longbuff1 ;
EXPR	8327:8	8327:8	13	longbuff2 = longbuff1
ASSIGN	8327:8	8327:20	14	longbuff2 = longbuff1
LVAL	8327:8	8327:8	15	longbuff2
FIELD	8327:8	8327:8	16	longbuff2
LEAF_NODE	8327:8	8327:8	17	longbuff2
ASSIGN_OP	8327:18	8327:18	15	=
LEAF_NODE	8327:18	8327:18	16	=
RVAL	8327:20	8327:20	15	longbuff1
FIELD	8327:20	8327:20	16	longbuff1
LEAF_NODE	8327:20	8327:20	17	longbuff1
LEAF_NODE	8327:29	8327:29	13	;
LEAF_NODE	8328:1	8328:1	11	}
EXPR_STATEMENT	8330:6	8330:51	9	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2 ;
EXPR	8330:6	8330:6	10	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
ASSIGN	8330:6	8330:14	11	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
LVAL	8330:6	8330:6	12	buff3
FIELD	8330:6	8330:6	13	buff3
LEAF_NODE	8330:6	8330:6	14	buff3
ASSIGN_OP	8330:12	8330:12	12	=
LEAF_NODE	8330:12	8330:12	13	=
RVAL	8330:14	8330:14	12	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR	8330:14	8330:42	13	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR_ELEM	8330:14	8330:38	14	( ( uint64 ) longbuff1 << 32 )
LEAF_NODE	8330:14	8330:14	15	(
LEAF_NODE	8330:15	8330:15	15	(
TYPE_NAME	8330:16	8330:16	15	uint64
LEAF_NODE	8330:16	8330:16	16	uint64
LEAF_NODE	8330:22	8330:22	15	)
FIELD	8330:23	8330:23	15	longbuff1
LEAF_NODE	8330:23	8330:23	16	longbuff1
LEAF_NODE	8330:33	8330:33	15	<<
FIELD	8330:36	8330:36	15	32
LEAF_NODE	8330:36	8330:36	16	32
LEAF_NODE	8330:38	8330:38	15	)
LEAF_NODE	8330:40	8330:40	14	|
BIT_OR_ELEM	8330:42	8330:42	14	longbuff2
FIELD	8330:42	8330:42	15	longbuff2
LEAF_NODE	8330:42	8330:42	16	longbuff2
LEAF_NODE	8330:51	8330:51	10	;
LEAF_NODE	8331:6	8331:6	9	buff1
LEAF_NODE	8331:12	8331:12	9	=
LEAF_NODE	8331:14	8331:14	9	(
LEAF_NODE	8331:15	8331:15	9	buff3
LEAF_NODE	8331:21	8331:21	9	&
LEAF_NODE	8331:23	8331:23	9	matchbits
LEAF_NODE	8331:32	8331:32	9	)
LEAF_NODE	8331:34	8331:34	9	<<
LEAF_NODE	8331:37	8331:37	9	(
LEAF_NODE	8331:38	8331:38	9	src_bit
LEAF_NODE	8331:45	8331:45	9	)
LEAF_NODE	8331:46	8331:46	9	;
SELECTION	8333:6	8334:8	9	
KEYWORD	8333:6	8333:6	10	if
LEAF_NODE	8333:6	8333:6	11	if
LEAF_NODE	8333:9	8333:9	10	(
CONDITION	8333:10	8333:10	10	ready_bits < 32
EXPR	8333:10	8333:23	11	ready_bits < 32
FIELD	8333:10	8333:10	12	ready_bits
LEAF_NODE	8333:10	8333:10	13	ready_bits
REL_OPERATOR	8333:21	8333:21	12	<
LEAF_NODE	8333:21	8333:21	13	<
FIELD	8333:23	8333:23	12	32
LEAF_NODE	8333:23	8333:23	13	32
LEAF_NODE	8333:25	8333:25	10	)
STATEMENTS	8334:8	8337:8	10	
LEAF_NODE	8334:8	8334:8	11	{
STATEMENTS	8335:8	8336:8	11	
EXPR_STATEMENT	8335:8	8335:57	12	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0 ;
EXPR	8335:8	8335:8	13	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	8335:8	8335:20	14	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	8335:8	8335:8	15	bytebuff1
FIELD	8335:8	8335:8	16	bytebuff1
LEAF_NODE	8335:8	8335:8	17	bytebuff1
ASSIGN_OP	8335:18	8335:18	15	=
LEAF_NODE	8335:18	8335:18	16	=
RVAL	8335:20	8335:20	15	bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	8335:20	8335:32	16	bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	8335:20	8335:20	17	bytebuff2
FIELD	8335:20	8335:20	18	bytebuff2
LEAF_NODE	8335:20	8335:20	19	bytebuff2
ASSIGN_OP	8335:30	8335:30	17	=
LEAF_NODE	8335:30	8335:30	18	=
RVAL	8335:32	8335:32	17	bytebuff3 = bytebuff4 = 0
ASSIGN	8335:32	8335:44	18	bytebuff3 = bytebuff4 = 0
LVAL	8335:32	8335:32	19	bytebuff3
FIELD	8335:32	8335:32	20	bytebuff3
LEAF_NODE	8335:32	8335:32	21	bytebuff3
ASSIGN_OP	8335:42	8335:42	19	=
LEAF_NODE	8335:42	8335:42	20	=
RVAL	8335:44	8335:44	19	bytebuff4 = 0
ASSIGN	8335:44	8335:56	20	bytebuff4 = 0
LVAL	8335:44	8335:44	21	bytebuff4
FIELD	8335:44	8335:44	22	bytebuff4
LEAF_NODE	8335:44	8335:44	23	bytebuff4
ASSIGN_OP	8335:54	8335:54	21	=
LEAF_NODE	8335:54	8335:54	22	=
RVAL	8335:56	8335:56	21	0
FIELD	8335:56	8335:56	22	0
LEAF_NODE	8335:56	8335:56	23	0
LEAF_NODE	8335:57	8335:57	13	;
EXPR_STATEMENT	8336:8	8336:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8336:8	8336:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8336:8	8336:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8336:8	8336:8	15	buff2
FIELD	8336:8	8336:8	16	buff2
LEAF_NODE	8336:8	8336:8	17	buff2
ASSIGN_OP	8336:14	8336:14	15	=
LEAF_NODE	8336:14	8336:14	16	=
RVAL	8336:16	8336:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8336:16	8336:16	16	(
BIT_OR	8336:17	8336:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8336:17	8336:17	17	buff2
FIELD	8336:17	8336:17	18	buff2
LEAF_NODE	8336:17	8336:17	19	buff2
LEAF_NODE	8336:23	8336:23	17	|
BIT_OR_ELEM	8336:25	8336:45	17	( buff1 >> ready_bits )
LEAF_NODE	8336:25	8336:25	18	(
FIELD	8336:26	8336:26	18	buff1
LEAF_NODE	8336:26	8336:26	19	buff1
LEAF_NODE	8336:32	8336:32	18	>>
FIELD	8336:35	8336:35	18	ready_bits
LEAF_NODE	8336:35	8336:35	19	ready_bits
LEAF_NODE	8336:45	8336:45	18	)
LEAF_NODE	8336:46	8336:46	16	)
LEAF_NODE	8336:47	8336:47	13	;
LEAF_NODE	8337:8	8337:8	11	}
SELECTION	8338:6	8339:8	9	
KEYWORD	8338:6	8338:6	10	else
LEAF_NODE	8338:6	8338:6	11	else
STATEMENTS	8339:8	8352:8	10	
LEAF_NODE	8339:8	8339:8	11	{
STATEMENTS	8340:8	8351:8	11	
EXPR_STATEMENT	8340:8	8340:33	12	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	8340:8	8340:8	13	bytebuff1 = ( buff2 >> 56 )
ASSIGN	8340:8	8340:20	14	bytebuff1 = ( buff2 >> 56 )
LVAL	8340:8	8340:8	15	bytebuff1
FIELD	8340:8	8340:8	16	bytebuff1
LEAF_NODE	8340:8	8340:8	17	bytebuff1
ASSIGN_OP	8340:18	8340:18	15	=
LEAF_NODE	8340:18	8340:18	16	=
RVAL	8340:20	8340:32	15	( buff2 >> 56 )
LEAF_NODE	8340:20	8340:20	16	(
FIELD	8340:21	8340:21	16	buff2
LEAF_NODE	8340:21	8340:21	17	buff2
LEAF_NODE	8340:27	8340:27	16	>>
FIELD	8340:30	8340:30	16	56
LEAF_NODE	8340:30	8340:30	17	56
LEAF_NODE	8340:32	8340:32	16	)
LEAF_NODE	8340:33	8340:33	13	;
EXPR_STATEMENT	8341:8	8341:26	12	* dst ++ = bytebuff1 ;
EXPR	8341:8	8341:8	13	* dst ++ = bytebuff1
ASSIGN	8341:8	8341:17	14	* dst ++ = bytebuff1
LVAL	8341:8	8341:8	15	* dst ++
UNARY_EXPR	8341:8	8341:9	16	* dst ++
UNARY_OPERATOR	8341:8	8341:8	17	*
LEAF_NODE	8341:8	8341:8	18	*
FIELD	8341:9	8341:12	17	dst ++
LEAF_NODE	8341:9	8341:9	18	dst
LEAF_NODE	8341:12	8341:12	18	++
ASSIGN_OP	8341:15	8341:15	15	=
LEAF_NODE	8341:15	8341:15	16	=
RVAL	8341:17	8341:17	15	bytebuff1
FIELD	8341:17	8341:17	16	bytebuff1
LEAF_NODE	8341:17	8341:17	17	bytebuff1
LEAF_NODE	8341:26	8341:26	13	;
EXPR_STATEMENT	8342:8	8342:33	12	bytebuff2 = ( buff2 >> 48 ) ;
EXPR	8342:8	8342:8	13	bytebuff2 = ( buff2 >> 48 )
ASSIGN	8342:8	8342:20	14	bytebuff2 = ( buff2 >> 48 )
LVAL	8342:8	8342:8	15	bytebuff2
FIELD	8342:8	8342:8	16	bytebuff2
LEAF_NODE	8342:8	8342:8	17	bytebuff2
ASSIGN_OP	8342:18	8342:18	15	=
LEAF_NODE	8342:18	8342:18	16	=
RVAL	8342:20	8342:32	15	( buff2 >> 48 )
LEAF_NODE	8342:20	8342:20	16	(
FIELD	8342:21	8342:21	16	buff2
LEAF_NODE	8342:21	8342:21	17	buff2
LEAF_NODE	8342:27	8342:27	16	>>
FIELD	8342:30	8342:30	16	48
LEAF_NODE	8342:30	8342:30	17	48
LEAF_NODE	8342:32	8342:32	16	)
LEAF_NODE	8342:33	8342:33	13	;
EXPR_STATEMENT	8343:8	8343:26	12	* dst ++ = bytebuff2 ;
EXPR	8343:8	8343:8	13	* dst ++ = bytebuff2
ASSIGN	8343:8	8343:17	14	* dst ++ = bytebuff2
LVAL	8343:8	8343:8	15	* dst ++
UNARY_EXPR	8343:8	8343:9	16	* dst ++
UNARY_OPERATOR	8343:8	8343:8	17	*
LEAF_NODE	8343:8	8343:8	18	*
FIELD	8343:9	8343:12	17	dst ++
LEAF_NODE	8343:9	8343:9	18	dst
LEAF_NODE	8343:12	8343:12	18	++
ASSIGN_OP	8343:15	8343:15	15	=
LEAF_NODE	8343:15	8343:15	16	=
RVAL	8343:17	8343:17	15	bytebuff2
FIELD	8343:17	8343:17	16	bytebuff2
LEAF_NODE	8343:17	8343:17	17	bytebuff2
LEAF_NODE	8343:26	8343:26	13	;
EXPR_STATEMENT	8344:8	8344:33	12	bytebuff3 = ( buff2 >> 40 ) ;
EXPR	8344:8	8344:8	13	bytebuff3 = ( buff2 >> 40 )
ASSIGN	8344:8	8344:20	14	bytebuff3 = ( buff2 >> 40 )
LVAL	8344:8	8344:8	15	bytebuff3
FIELD	8344:8	8344:8	16	bytebuff3
LEAF_NODE	8344:8	8344:8	17	bytebuff3
ASSIGN_OP	8344:18	8344:18	15	=
LEAF_NODE	8344:18	8344:18	16	=
RVAL	8344:20	8344:32	15	( buff2 >> 40 )
LEAF_NODE	8344:20	8344:20	16	(
FIELD	8344:21	8344:21	16	buff2
LEAF_NODE	8344:21	8344:21	17	buff2
LEAF_NODE	8344:27	8344:27	16	>>
FIELD	8344:30	8344:30	16	40
LEAF_NODE	8344:30	8344:30	17	40
LEAF_NODE	8344:32	8344:32	16	)
LEAF_NODE	8344:33	8344:33	13	;
EXPR_STATEMENT	8345:8	8345:26	12	* dst ++ = bytebuff3 ;
EXPR	8345:8	8345:8	13	* dst ++ = bytebuff3
ASSIGN	8345:8	8345:17	14	* dst ++ = bytebuff3
LVAL	8345:8	8345:8	15	* dst ++
UNARY_EXPR	8345:8	8345:9	16	* dst ++
UNARY_OPERATOR	8345:8	8345:8	17	*
LEAF_NODE	8345:8	8345:8	18	*
FIELD	8345:9	8345:12	17	dst ++
LEAF_NODE	8345:9	8345:9	18	dst
LEAF_NODE	8345:12	8345:12	18	++
ASSIGN_OP	8345:15	8345:15	15	=
LEAF_NODE	8345:15	8345:15	16	=
RVAL	8345:17	8345:17	15	bytebuff3
FIELD	8345:17	8345:17	16	bytebuff3
LEAF_NODE	8345:17	8345:17	17	bytebuff3
LEAF_NODE	8345:26	8345:26	13	;
EXPR_STATEMENT	8346:8	8346:33	12	bytebuff4 = ( buff2 >> 32 ) ;
EXPR	8346:8	8346:8	13	bytebuff4 = ( buff2 >> 32 )
ASSIGN	8346:8	8346:20	14	bytebuff4 = ( buff2 >> 32 )
LVAL	8346:8	8346:8	15	bytebuff4
FIELD	8346:8	8346:8	16	bytebuff4
LEAF_NODE	8346:8	8346:8	17	bytebuff4
ASSIGN_OP	8346:18	8346:18	15	=
LEAF_NODE	8346:18	8346:18	16	=
RVAL	8346:20	8346:32	15	( buff2 >> 32 )
LEAF_NODE	8346:20	8346:20	16	(
FIELD	8346:21	8346:21	16	buff2
LEAF_NODE	8346:21	8346:21	17	buff2
LEAF_NODE	8346:27	8346:27	16	>>
FIELD	8346:30	8346:30	16	32
LEAF_NODE	8346:30	8346:30	17	32
LEAF_NODE	8346:32	8346:32	16	)
LEAF_NODE	8346:33	8346:33	13	;
EXPR_STATEMENT	8347:8	8347:26	12	* dst ++ = bytebuff4 ;
EXPR	8347:8	8347:8	13	* dst ++ = bytebuff4
ASSIGN	8347:8	8347:17	14	* dst ++ = bytebuff4
LVAL	8347:8	8347:8	15	* dst ++
UNARY_EXPR	8347:8	8347:9	16	* dst ++
UNARY_OPERATOR	8347:8	8347:8	17	*
LEAF_NODE	8347:8	8347:8	18	*
FIELD	8347:9	8347:12	17	dst ++
LEAF_NODE	8347:9	8347:9	18	dst
LEAF_NODE	8347:12	8347:12	18	++
ASSIGN_OP	8347:15	8347:15	15	=
LEAF_NODE	8347:15	8347:15	16	=
RVAL	8347:17	8347:17	15	bytebuff4
FIELD	8347:17	8347:17	16	bytebuff4
LEAF_NODE	8347:17	8347:17	17	bytebuff4
LEAF_NODE	8347:26	8347:26	13	;
EXPR_STATEMENT	8348:8	8348:24	12	ready_bits -= 32 ;
EXPR	8348:8	8348:8	13	ready_bits -= 32
ASSIGN	8348:8	8348:22	14	ready_bits -= 32
LVAL	8348:8	8348:8	15	ready_bits
FIELD	8348:8	8348:8	16	ready_bits
LEAF_NODE	8348:8	8348:8	17	ready_bits
ASSIGN_OP	8348:19	8348:19	15	-=
LEAF_NODE	8348:19	8348:19	16	-=
RVAL	8348:22	8348:22	15	32
FIELD	8348:22	8348:22	16	32
LEAF_NODE	8348:22	8348:22	17	32
LEAF_NODE	8348:24	8348:24	13	;
EXPR_STATEMENT	8351:8	8351:55	12	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) ) ;
EXPR	8351:8	8351:8	13	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
ASSIGN	8351:8	8351:16	14	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LVAL	8351:8	8351:8	15	buff2
FIELD	8351:8	8351:8	16	buff2
LEAF_NODE	8351:8	8351:8	17	buff2
ASSIGN_OP	8351:14	8351:14	15	=
LEAF_NODE	8351:14	8351:14	16	=
RVAL	8351:16	8351:54	15	( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	8351:16	8351:16	16	(
BIT_OR	8351:17	8351:33	16	( buff2 << 32 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	8351:17	8351:29	17	( buff2 << 32 )
LEAF_NODE	8351:17	8351:17	18	(
FIELD	8351:18	8351:18	18	buff2
LEAF_NODE	8351:18	8351:18	19	buff2
LEAF_NODE	8351:24	8351:24	18	<<
FIELD	8351:27	8351:27	18	32
LEAF_NODE	8351:27	8351:27	19	32
LEAF_NODE	8351:29	8351:29	18	)
LEAF_NODE	8351:31	8351:31	17	|
BIT_OR_ELEM	8351:33	8351:53	17	( buff1 >> ready_bits )
LEAF_NODE	8351:33	8351:33	18	(
FIELD	8351:34	8351:34	18	buff1
LEAF_NODE	8351:34	8351:34	19	buff1
LEAF_NODE	8351:40	8351:40	18	>>
FIELD	8351:43	8351:43	18	ready_bits
LEAF_NODE	8351:43	8351:43	19	ready_bits
LEAF_NODE	8351:53	8351:53	18	)
LEAF_NODE	8351:54	8351:54	16	)
LEAF_NODE	8351:55	8351:55	13	;
LEAF_NODE	8352:8	8352:8	11	}
EXPR_STATEMENT	8353:6	8353:23	9	ready_bits += bps ;
EXPR	8353:6	8353:6	10	ready_bits += bps
ASSIGN	8353:6	8353:20	11	ready_bits += bps
LVAL	8353:6	8353:6	12	ready_bits
FIELD	8353:6	8353:6	13	ready_bits
LEAF_NODE	8353:6	8353:6	14	ready_bits
ASSIGN_OP	8353:17	8353:17	12	+=
LEAF_NODE	8353:17	8353:17	13	+=
RVAL	8353:20	8353:20	12	bps
FIELD	8353:20	8353:20	13	bps
LEAF_NODE	8353:20	8353:20	14	bps
LEAF_NODE	8353:23	8353:23	10	;
LEAF_NODE	8354:6	8354:6	8	}
LEAF_NODE	8355:4	8355:4	5	}
ITERATION	8356:2	8357:4	3	
KEYWORD	8356:2	8356:2	4	while
LEAF_NODE	8356:2	8356:2	5	while
LEAF_NODE	8356:8	8356:8	4	(
CONDITION	8356:9	8356:9	4	ready_bits > 0
EXPR	8356:9	8356:22	5	ready_bits > 0
FIELD	8356:9	8356:9	6	ready_bits
LEAF_NODE	8356:9	8356:9	7	ready_bits
REL_OPERATOR	8356:20	8356:20	6	>
LEAF_NODE	8356:20	8356:20	7	>
FIELD	8356:22	8356:22	6	0
LEAF_NODE	8356:22	8356:22	7	0
LEAF_NODE	8356:23	8356:23	4	)
STATEMENTS	8357:4	8362:4	4	
LEAF_NODE	8357:4	8357:4	5	{
STATEMENTS	8358:4	8361:4	5	
EXPR_STATEMENT	8358:4	8358:29	6	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	8358:4	8358:4	7	bytebuff1 = ( buff2 >> 56 )
ASSIGN	8358:4	8358:16	8	bytebuff1 = ( buff2 >> 56 )
LVAL	8358:4	8358:4	9	bytebuff1
FIELD	8358:4	8358:4	10	bytebuff1
LEAF_NODE	8358:4	8358:4	11	bytebuff1
ASSIGN_OP	8358:14	8358:14	9	=
LEAF_NODE	8358:14	8358:14	10	=
RVAL	8358:16	8358:28	9	( buff2 >> 56 )
LEAF_NODE	8358:16	8358:16	10	(
FIELD	8358:17	8358:17	10	buff2
LEAF_NODE	8358:17	8358:17	11	buff2
LEAF_NODE	8358:23	8358:23	10	>>
FIELD	8358:26	8358:26	10	56
LEAF_NODE	8358:26	8358:26	11	56
LEAF_NODE	8358:28	8358:28	10	)
LEAF_NODE	8358:29	8358:29	7	;
EXPR_STATEMENT	8359:4	8359:22	6	* dst ++ = bytebuff1 ;
EXPR	8359:4	8359:4	7	* dst ++ = bytebuff1
ASSIGN	8359:4	8359:13	8	* dst ++ = bytebuff1
LVAL	8359:4	8359:4	9	* dst ++
UNARY_EXPR	8359:4	8359:5	10	* dst ++
UNARY_OPERATOR	8359:4	8359:4	11	*
LEAF_NODE	8359:4	8359:4	12	*
FIELD	8359:5	8359:8	11	dst ++
LEAF_NODE	8359:5	8359:5	12	dst
LEAF_NODE	8359:8	8359:8	12	++
ASSIGN_OP	8359:11	8359:11	9	=
LEAF_NODE	8359:11	8359:11	10	=
RVAL	8359:13	8359:13	9	bytebuff1
FIELD	8359:13	8359:13	10	bytebuff1
LEAF_NODE	8359:13	8359:13	11	bytebuff1
LEAF_NODE	8359:22	8359:22	7	;
EXPR_STATEMENT	8360:4	8360:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	8360:4	8360:4	7	buff2 = ( buff2 << 8 )
ASSIGN	8360:4	8360:12	8	buff2 = ( buff2 << 8 )
LVAL	8360:4	8360:4	9	buff2
FIELD	8360:4	8360:4	10	buff2
LEAF_NODE	8360:4	8360:4	11	buff2
ASSIGN_OP	8360:10	8360:10	9	=
LEAF_NODE	8360:10	8360:10	10	=
RVAL	8360:12	8360:23	9	( buff2 << 8 )
LEAF_NODE	8360:12	8360:12	10	(
FIELD	8360:13	8360:13	10	buff2
LEAF_NODE	8360:13	8360:13	11	buff2
LEAF_NODE	8360:19	8360:19	10	<<
FIELD	8360:22	8360:22	10	8
LEAF_NODE	8360:22	8360:22	11	8
LEAF_NODE	8360:23	8360:23	10	)
LEAF_NODE	8360:24	8360:24	7	;
EXPR_STATEMENT	8361:4	8361:19	6	ready_bits -= 8 ;
EXPR	8361:4	8361:4	7	ready_bits -= 8
ASSIGN	8361:4	8361:18	8	ready_bits -= 8
LVAL	8361:4	8361:4	9	ready_bits
FIELD	8361:4	8361:4	10	ready_bits
LEAF_NODE	8361:4	8361:4	11	ready_bits
ASSIGN_OP	8361:15	8361:15	9	-=
LEAF_NODE	8361:15	8361:15	10	-=
RVAL	8361:18	8361:18	9	8
FIELD	8361:18	8361:18	10	8
LEAF_NODE	8361:18	8361:18	11	8
LEAF_NODE	8361:19	8361:19	7	;
LEAF_NODE	8362:4	8362:4	5	}
JUMP_STATEMENT	8364:2	8364:12	3	return ( 0 ) ;
KEYWORD	8364:2	8364:2	4	return
LEAF_NODE	8364:2	8364:2	5	return
DESTINATION	8364:9	8364:9	4	( 0 )
EXPR	8364:9	8364:11	5	( 0 )
LEAF_NODE	8364:9	8364:9	6	(
FIELD	8364:10	8364:10	6	0
LEAF_NODE	8364:10	8364:10	7	0
LEAF_NODE	8364:11	8364:11	6	)
LEAF_NODE	8364:12	8364:12	4	;
LEAF_NODE	8365:2	8365:2	2	}
FUNCTION_DEF	8369:0	8649:2	1	
RETURN_TYPE	8369:0	8369:7	2	static int
LEAF_NODE	8369:0	8369:0	3	static
TYPE_NAME	8369:7	8369:7	3	int
LEAF_NODE	8369:7	8369:7	4	int
FUNCTION_NAME	8370:0	8370:0	2	rotateImage
LEAF_NODE	8370:0	8370:0	3	rotateImage
PARAMETER_LIST	8370:11	8371:57	2	( uint16 rotation , struct image_data * image , uint32 * img_width , uint32 * img_length , unsigned char * * ibuff_ptr )
LEAF_NODE	8370:11	8370:11	3	(
PARAMETER_DECL	8370:12	8370:19	3	uint16 rotation
TYPE	8370:12	8370:12	4	uint16
TYPE_NAME	8370:12	8370:12	5	uint16
LEAF_NODE	8370:12	8370:12	6	uint16
NAME	8370:19	8370:19	4	rotation
LEAF_NODE	8370:19	8370:19	5	rotation
LEAF_NODE	8370:27	8370:27	3	,
PARAMETER_DECL	8370:29	8370:48	3	struct image_data * image
TYPE	8370:29	8370:47	4	struct image_data *
TYPE_NAME	8370:29	8370:36	5	struct image_data
LEAF_NODE	8370:29	8370:29	6	struct
LEAF_NODE	8370:36	8370:36	6	image_data
POINTER	8370:47	8370:47	5	*
LEAF_NODE	8370:47	8370:47	6	*
NAME	8370:48	8370:48	4	image
LEAF_NODE	8370:48	8370:48	5	image
LEAF_NODE	8370:53	8370:53	3	,
PARAMETER_DECL	8370:55	8370:63	3	uint32 * img_width
TYPE	8370:55	8370:62	4	uint32 *
TYPE_NAME	8370:55	8370:55	5	uint32
LEAF_NODE	8370:55	8370:55	6	uint32
POINTER	8370:62	8370:62	5	*
LEAF_NODE	8370:62	8370:62	6	*
NAME	8370:63	8370:63	4	img_width
LEAF_NODE	8370:63	8370:63	5	img_width
LEAF_NODE	8370:72	8370:72	3	,
PARAMETER_DECL	8371:12	8371:20	3	uint32 * img_length
TYPE	8371:12	8371:19	4	uint32 *
TYPE_NAME	8371:12	8371:12	5	uint32
LEAF_NODE	8371:12	8371:12	6	uint32
POINTER	8371:19	8371:19	5	*
LEAF_NODE	8371:19	8371:19	6	*
NAME	8371:20	8371:20	4	img_length
LEAF_NODE	8371:20	8371:20	5	img_length
LEAF_NODE	8371:30	8371:30	3	,
PARAMETER_DECL	8371:32	8371:48	3	unsigned char * * ibuff_ptr
TYPE	8371:32	8371:46	4	unsigned char * *
TYPE_NAME	8371:32	8371:41	5	unsigned char
LEAF_NODE	8371:32	8371:32	6	unsigned
LEAF_NODE	8371:41	8371:41	6	char
POINTER	8371:46	8371:47	5	* *
LEAF_NODE	8371:46	8371:46	6	*
LEAF_NODE	8371:47	8371:47	6	*
NAME	8371:48	8371:48	4	ibuff_ptr
LEAF_NODE	8371:48	8371:48	5	ibuff_ptr
LEAF_NODE	8371:57	8371:57	3	)
LEAF_NODE	8372:2	8372:2	2	{
STATEMENTS	8373:2	8648:2	2	
SIMPLE_DECL	8373:2	8373:22	3	int shift_width ;
VAR_DECL	8373:2	8373:11	4	int shift_width
TYPE	8373:2	8373:2	5	int
TYPE_NAME	8373:2	8373:2	6	int
LEAF_NODE	8373:2	8373:2	7	int
NAME	8373:11	8373:11	5	shift_width
LEAF_NODE	8373:11	8373:11	6	shift_width
LEAF_NODE	8373:22	8373:22	4	;
SIMPLE_DECL	8374:2	8374:44	3	uint32 bytes_per_pixel , uint32 bytes_per_sample ;
INIT_DECL_LIST	8374:2	8374:2	4	uint32 bytes_per_pixel , uint32 bytes_per_sample
VAR_DECL	8374:2	8374:11	5	uint32 bytes_per_pixel
TYPE	8374:2	8374:2	6	uint32
TYPE_NAME	8374:2	8374:2	7	uint32
LEAF_NODE	8374:2	8374:2	8	uint32
NAME	8374:11	8374:11	6	bytes_per_pixel
LEAF_NODE	8374:11	8374:11	7	bytes_per_pixel
LEAF_NODE	8374:26	8374:26	5	,
VAR_DECL	8374:2	8374:28	5	uint32 bytes_per_sample
TYPE	8374:2	8374:2	6	uint32
TYPE_NAME	8374:2	8374:2	7	uint32
LEAF_NODE	8374:2	8374:2	8	uint32
NAME	8374:28	8374:28	6	bytes_per_sample
LEAF_NODE	8374:28	8374:28	7	bytes_per_sample
LEAF_NODE	8374:44	8374:44	4	;
SIMPLE_DECL	8375:2	8375:47	3	uint32 row , uint32 rowsize , uint32 src_offset , uint32 dst_offset ;
INIT_DECL_LIST	8375:2	8375:2	4	uint32 row , uint32 rowsize , uint32 src_offset , uint32 dst_offset
VAR_DECL	8375:2	8375:11	5	uint32 row
TYPE	8375:2	8375:2	6	uint32
TYPE_NAME	8375:2	8375:2	7	uint32
LEAF_NODE	8375:2	8375:2	8	uint32
NAME	8375:11	8375:11	6	row
LEAF_NODE	8375:11	8375:11	7	row
LEAF_NODE	8375:14	8375:14	5	,
INIT_DECL_LIST	8375:2	8375:2	5	uint32 rowsize , uint32 src_offset , uint32 dst_offset
VAR_DECL	8375:2	8375:16	6	uint32 rowsize
TYPE	8375:2	8375:2	7	uint32
TYPE_NAME	8375:2	8375:2	8	uint32
LEAF_NODE	8375:2	8375:2	9	uint32
NAME	8375:16	8375:16	7	rowsize
LEAF_NODE	8375:16	8375:16	8	rowsize
LEAF_NODE	8375:23	8375:23	6	,
INIT_DECL_LIST	8375:2	8375:2	6	uint32 src_offset , uint32 dst_offset
VAR_DECL	8375:2	8375:25	7	uint32 src_offset
TYPE	8375:2	8375:2	8	uint32
TYPE_NAME	8375:2	8375:2	9	uint32
LEAF_NODE	8375:2	8375:2	10	uint32
NAME	8375:25	8375:25	8	src_offset
LEAF_NODE	8375:25	8375:25	9	src_offset
LEAF_NODE	8375:35	8375:35	7	,
VAR_DECL	8375:2	8375:37	7	uint32 dst_offset
TYPE	8375:2	8375:2	8	uint32
TYPE_NAME	8375:2	8375:2	9	uint32
LEAF_NODE	8375:2	8375:2	10	uint32
NAME	8375:37	8375:37	8	dst_offset
LEAF_NODE	8375:37	8375:37	9	dst_offset
LEAF_NODE	8375:47	8375:47	4	;
SIMPLE_DECL	8376:2	8376:32	3	uint32 i , uint32 col , uint32 width , uint32 length ;
INIT_DECL_LIST	8376:2	8376:2	4	uint32 i , uint32 col , uint32 width , uint32 length
VAR_DECL	8376:2	8376:11	5	uint32 i
TYPE	8376:2	8376:2	6	uint32
TYPE_NAME	8376:2	8376:2	7	uint32
LEAF_NODE	8376:2	8376:2	8	uint32
NAME	8376:11	8376:11	6	i
LEAF_NODE	8376:11	8376:11	7	i
LEAF_NODE	8376:12	8376:12	5	,
INIT_DECL_LIST	8376:2	8376:2	5	uint32 col , uint32 width , uint32 length
VAR_DECL	8376:2	8376:14	6	uint32 col
TYPE	8376:2	8376:2	7	uint32
TYPE_NAME	8376:2	8376:2	8	uint32
LEAF_NODE	8376:2	8376:2	9	uint32
NAME	8376:14	8376:14	7	col
LEAF_NODE	8376:14	8376:14	8	col
LEAF_NODE	8376:17	8376:17	6	,
INIT_DECL_LIST	8376:2	8376:2	6	uint32 width , uint32 length
VAR_DECL	8376:2	8376:19	7	uint32 width
TYPE	8376:2	8376:2	8	uint32
TYPE_NAME	8376:2	8376:2	9	uint32
LEAF_NODE	8376:2	8376:2	10	uint32
NAME	8376:19	8376:19	8	width
LEAF_NODE	8376:19	8376:19	9	width
LEAF_NODE	8376:24	8376:24	7	,
VAR_DECL	8376:2	8376:26	7	uint32 length
TYPE	8376:2	8376:2	8	uint32
TYPE_NAME	8376:2	8376:2	9	uint32
LEAF_NODE	8376:2	8376:2	10	uint32
NAME	8376:26	8376:26	8	length
LEAF_NODE	8376:26	8376:26	9	length
LEAF_NODE	8376:32	8376:32	4	;
SIMPLE_DECL	8377:2	8377:52	3	uint32 colsize , uint32 buffsize , uint32 col_offset , uint32 pix_offset ;
INIT_DECL_LIST	8377:2	8377:2	4	uint32 colsize , uint32 buffsize , uint32 col_offset , uint32 pix_offset
VAR_DECL	8377:2	8377:11	5	uint32 colsize
TYPE	8377:2	8377:2	6	uint32
TYPE_NAME	8377:2	8377:2	7	uint32
LEAF_NODE	8377:2	8377:2	8	uint32
NAME	8377:11	8377:11	6	colsize
LEAF_NODE	8377:11	8377:11	7	colsize
LEAF_NODE	8377:18	8377:18	5	,
INIT_DECL_LIST	8377:2	8377:2	5	uint32 buffsize , uint32 col_offset , uint32 pix_offset
VAR_DECL	8377:2	8377:20	6	uint32 buffsize
TYPE	8377:2	8377:2	7	uint32
TYPE_NAME	8377:2	8377:2	8	uint32
LEAF_NODE	8377:2	8377:2	9	uint32
NAME	8377:20	8377:20	7	buffsize
LEAF_NODE	8377:20	8377:20	8	buffsize
LEAF_NODE	8377:28	8377:28	6	,
INIT_DECL_LIST	8377:2	8377:2	6	uint32 col_offset , uint32 pix_offset
VAR_DECL	8377:2	8377:30	7	uint32 col_offset
TYPE	8377:2	8377:2	8	uint32
TYPE_NAME	8377:2	8377:2	9	uint32
LEAF_NODE	8377:2	8377:2	10	uint32
NAME	8377:30	8377:30	8	col_offset
LEAF_NODE	8377:30	8377:30	9	col_offset
LEAF_NODE	8377:40	8377:40	7	,
VAR_DECL	8377:2	8377:42	7	uint32 pix_offset
TYPE	8377:2	8377:2	8	uint32
TYPE_NAME	8377:2	8377:2	9	uint32
LEAF_NODE	8377:2	8377:2	10	uint32
NAME	8377:42	8377:42	8	pix_offset
LEAF_NODE	8377:42	8377:42	9	pix_offset
LEAF_NODE	8377:52	8377:52	4	;
SIMPLE_DECL	8378:2	8378:22	3	unsigned char * ibuff ;
VAR_DECL	8378:2	8378:17	4	unsigned char * ibuff
TYPE	8378:2	8378:16	5	unsigned char *
TYPE_NAME	8378:2	8378:11	6	unsigned char
LEAF_NODE	8378:2	8378:2	7	unsigned
LEAF_NODE	8378:11	8378:11	7	char
POINTER	8378:16	8378:16	6	*
LEAF_NODE	8378:16	8378:16	7	*
NAME	8378:17	8378:17	5	ibuff
LEAF_NODE	8378:17	8378:17	6	ibuff
LEAF_NODE	8378:22	8378:22	4	;
SIMPLE_DECL	8379:2	8379:20	3	unsigned char * src ;
VAR_DECL	8379:2	8379:17	4	unsigned char * src
TYPE	8379:2	8379:16	5	unsigned char *
TYPE_NAME	8379:2	8379:11	6	unsigned char
LEAF_NODE	8379:2	8379:2	7	unsigned
LEAF_NODE	8379:11	8379:11	7	char
POINTER	8379:16	8379:16	6	*
LEAF_NODE	8379:16	8379:16	7	*
NAME	8379:17	8379:17	5	src
LEAF_NODE	8379:17	8379:17	6	src
LEAF_NODE	8379:20	8379:20	4	;
SIMPLE_DECL	8380:2	8380:20	3	unsigned char * dst ;
VAR_DECL	8380:2	8380:17	4	unsigned char * dst
TYPE	8380:2	8380:16	5	unsigned char *
TYPE_NAME	8380:2	8380:11	6	unsigned char
LEAF_NODE	8380:2	8380:2	7	unsigned
LEAF_NODE	8380:11	8380:11	7	char
POINTER	8380:16	8380:16	6	*
LEAF_NODE	8380:16	8380:16	7	*
NAME	8380:17	8380:17	5	dst
LEAF_NODE	8380:17	8380:17	6	dst
LEAF_NODE	8380:20	8380:20	4	;
SIMPLE_DECL	8381:2	8381:19	3	uint16 spp , uint16 bps ;
INIT_DECL_LIST	8381:2	8381:2	4	uint16 spp , uint16 bps
VAR_DECL	8381:2	8381:11	5	uint16 spp
TYPE	8381:2	8381:2	6	uint16
TYPE_NAME	8381:2	8381:2	7	uint16
LEAF_NODE	8381:2	8381:2	8	uint16
NAME	8381:11	8381:11	6	spp
LEAF_NODE	8381:11	8381:11	7	spp
LEAF_NODE	8381:14	8381:14	5	,
VAR_DECL	8381:2	8381:16	5	uint16 bps
TYPE	8381:2	8381:2	6	uint16
TYPE_NAME	8381:2	8381:2	7	uint16
LEAF_NODE	8381:2	8381:2	8	uint16
NAME	8381:16	8381:16	6	bps
LEAF_NODE	8381:16	8381:16	7	bps
LEAF_NODE	8381:19	8381:19	4	;
SIMPLE_DECL	8382:2	8382:19	3	float res_temp ;
VAR_DECL	8382:2	8382:11	4	float res_temp
TYPE	8382:2	8382:2	5	float
TYPE_NAME	8382:2	8382:2	6	float
LEAF_NODE	8382:2	8382:2	7	float
NAME	8382:11	8382:11	5	res_temp
LEAF_NODE	8382:11	8382:11	6	res_temp
LEAF_NODE	8382:19	8382:19	4	;
SIMPLE_DECL	8383:2	8383:29	3	unsigned char * rbuff ; rbuff = NULL ;
VAR_DECL	8383:2	8383:17	4	unsigned char * rbuff ; rbuff = NULL
TYPE	8383:2	8383:16	5	unsigned char *
TYPE_NAME	8383:2	8383:11	6	unsigned char
LEAF_NODE	8383:2	8383:2	7	unsigned
LEAF_NODE	8383:11	8383:11	7	char
POINTER	8383:16	8383:16	6	*
LEAF_NODE	8383:16	8383:16	7	*
NAME	8383:17	8383:17	5	rbuff
LEAF_NODE	8383:17	8383:17	6	rbuff
LEAF_NODE	0:0	0:0	5	;
INIT	8383:17	8383:17	5	rbuff = NULL
ASSIGN	8383:17	8383:25	6	rbuff = NULL
LVAL	8383:17	8383:17	7	rbuff
NAME	8383:17	8383:17	8	rbuff
LEAF_NODE	8383:17	8383:17	9	rbuff
ASSIGN_OP	8383:23	8383:23	7	=
LEAF_NODE	8383:23	8383:23	8	=
RVAL	8383:25	8383:25	7	NULL
FIELD	8383:25	8383:25	8	NULL
LEAF_NODE	8383:25	8383:25	9	NULL
LEAF_NODE	8383:29	8383:29	4	;
EXPR_STATEMENT	8385:2	8385:21	3	width = * img_width ;
EXPR	8385:2	8385:2	4	width = * img_width
ASSIGN	8385:2	8385:11	5	width = * img_width
LVAL	8385:2	8385:2	6	width
FIELD	8385:2	8385:2	7	width
LEAF_NODE	8385:2	8385:2	8	width
ASSIGN_OP	8385:9	8385:9	6	=
LEAF_NODE	8385:9	8385:9	7	=
RVAL	8385:11	8385:11	6	* img_width
UNARY_EXPR	8385:11	8385:12	7	* img_width
UNARY_OPERATOR	8385:11	8385:11	8	*
LEAF_NODE	8385:11	8385:11	9	*
FIELD	8385:12	8385:12	8	img_width
LEAF_NODE	8385:12	8385:12	9	img_width
LEAF_NODE	8385:21	8385:21	4	;
EXPR_STATEMENT	8386:2	8386:22	3	length = * img_length ;
EXPR	8386:2	8386:2	4	length = * img_length
ASSIGN	8386:2	8386:11	5	length = * img_length
LVAL	8386:2	8386:2	6	length
FIELD	8386:2	8386:2	7	length
LEAF_NODE	8386:2	8386:2	8	length
ASSIGN_OP	8386:9	8386:9	6	=
LEAF_NODE	8386:9	8386:9	7	=
RVAL	8386:11	8386:11	6	* img_length
UNARY_EXPR	8386:11	8386:12	7	* img_length
UNARY_OPERATOR	8386:11	8386:11	8	*
LEAF_NODE	8386:11	8386:11	9	*
FIELD	8386:12	8386:12	8	img_length
LEAF_NODE	8386:12	8386:12	9	img_length
LEAF_NODE	8386:22	8386:22	4	;
EXPR_STATEMENT	8387:2	8387:18	3	spp = image -> spp ;
EXPR	8387:2	8387:2	4	spp = image -> spp
ASSIGN	8387:2	8387:8	5	spp = image -> spp
LVAL	8387:2	8387:2	6	spp
FIELD	8387:2	8387:2	7	spp
LEAF_NODE	8387:2	8387:2	8	spp
ASSIGN_OP	8387:6	8387:6	6	=
LEAF_NODE	8387:6	8387:6	7	=
RVAL	8387:8	8387:8	6	image -> spp
FIELD	8387:8	8387:15	7	image -> spp
LEAF_NODE	8387:8	8387:8	8	image
LEAF_NODE	8387:13	8387:13	8	->
LEAF_NODE	8387:15	8387:15	8	spp
LEAF_NODE	8387:18	8387:18	4	;
EXPR_STATEMENT	8388:2	8388:18	3	bps = image -> bps ;
EXPR	8388:2	8388:2	4	bps = image -> bps
ASSIGN	8388:2	8388:8	5	bps = image -> bps
LVAL	8388:2	8388:2	6	bps
FIELD	8388:2	8388:2	7	bps
LEAF_NODE	8388:2	8388:2	8	bps
ASSIGN_OP	8388:6	8388:6	6	=
LEAF_NODE	8388:6	8388:6	7	=
RVAL	8388:8	8388:8	6	image -> bps
FIELD	8388:8	8388:15	7	image -> bps
LEAF_NODE	8388:8	8388:8	8	image
LEAF_NODE	8388:13	8388:13	8	->
LEAF_NODE	8388:15	8388:15	8	bps
LEAF_NODE	8388:18	8388:18	4	;
LEAF_NODE	8390:2	8390:2	3	rowsize
LEAF_NODE	8390:10	8390:10	3	=
LEAF_NODE	8390:12	8390:12	3	(
LEAF_NODE	8390:13	8390:13	3	(
LEAF_NODE	8390:14	8390:14	3	bps
LEAF_NODE	8390:18	8390:18	3	*
LEAF_NODE	8390:20	8390:20	3	spp
LEAF_NODE	8390:24	8390:24	3	*
LEAF_NODE	8390:26	8390:26	3	width
LEAF_NODE	8390:31	8390:31	3	)
LEAF_NODE	8390:33	8390:33	3	+
LEAF_NODE	8390:35	8390:35	3	7
LEAF_NODE	8390:36	8390:36	3	)
LEAF_NODE	8390:38	8390:38	3	/
EXPR_STATEMENT	8390:40	8390:41	3	8 ;
EXPR	8390:40	8390:40	4	8
FIELD	8390:40	8390:40	5	8
LEAF_NODE	8390:40	8390:40	6	8
LEAF_NODE	8390:41	8390:41	4	;
LEAF_NODE	8391:2	8391:2	3	colsize
LEAF_NODE	8391:10	8391:10	3	=
LEAF_NODE	8391:12	8391:12	3	(
LEAF_NODE	8391:13	8391:13	3	(
LEAF_NODE	8391:14	8391:14	3	bps
LEAF_NODE	8391:18	8391:18	3	*
LEAF_NODE	8391:20	8391:20	3	spp
LEAF_NODE	8391:24	8391:24	3	*
LEAF_NODE	8391:26	8391:26	3	length
LEAF_NODE	8391:32	8391:32	3	)
LEAF_NODE	8391:34	8391:34	3	+
LEAF_NODE	8391:36	8391:36	3	7
LEAF_NODE	8391:37	8391:37	3	)
LEAF_NODE	8391:39	8391:39	3	/
EXPR_STATEMENT	8391:41	8391:42	3	8 ;
EXPR	8391:41	8391:41	4	8
FIELD	8391:41	8391:41	5	8
LEAF_NODE	8391:41	8391:41	6	8
LEAF_NODE	8391:42	8391:42	4	;
SELECTION	8392:2	8393:4	3	
KEYWORD	8392:2	8392:2	4	if
LEAF_NODE	8392:2	8392:2	5	if
LEAF_NODE	8392:5	8392:5	4	(
CONDITION	8392:6	8392:6	4	( colsize * width ) > ( rowsize * length )
EXPR	8392:6	8392:43	5	( colsize * width ) > ( rowsize * length )
LEAF_NODE	8392:6	8392:6	6	(
FIELD	8392:7	8392:7	6	colsize
LEAF_NODE	8392:7	8392:7	7	colsize
LEAF_NODE	8392:15	8392:15	6	*
FIELD	8392:17	8392:17	6	width
LEAF_NODE	8392:17	8392:17	7	width
LEAF_NODE	8392:22	8392:22	6	)
REL_OPERATOR	8392:24	8392:24	6	>
LEAF_NODE	8392:24	8392:24	7	>
LEAF_NODE	8392:26	8392:26	6	(
FIELD	8392:27	8392:27	6	rowsize
LEAF_NODE	8392:27	8392:27	7	rowsize
LEAF_NODE	8392:35	8392:35	6	*
FIELD	8392:37	8392:37	6	length
LEAF_NODE	8392:37	8392:37	7	length
LEAF_NODE	8392:43	8392:43	6	)
LEAF_NODE	8392:44	8392:44	4	)
STATEMENTS	8393:4	8393:4	4	
EXPR_STATEMENT	8393:4	8393:36	5	buffsize = ( colsize + 1 ) * width ;
EXPR	8393:4	8393:4	6	buffsize = ( colsize + 1 ) * width
ASSIGN	8393:4	8393:15	7	buffsize = ( colsize + 1 ) * width
LVAL	8393:4	8393:4	8	buffsize
FIELD	8393:4	8393:4	9	buffsize
LEAF_NODE	8393:4	8393:4	10	buffsize
ASSIGN_OP	8393:13	8393:13	8	=
LEAF_NODE	8393:13	8393:13	9	=
RVAL	8393:15	8393:31	8	( colsize + 1 ) * width
LEAF_NODE	8393:15	8393:15	9	(
FIELD	8393:16	8393:16	9	colsize
LEAF_NODE	8393:16	8393:16	10	colsize
LEAF_NODE	8393:24	8393:24	9	+
FIELD	8393:26	8393:26	9	1
LEAF_NODE	8393:26	8393:26	10	1
LEAF_NODE	8393:27	8393:27	9	)
LEAF_NODE	8393:29	8393:29	9	*
FIELD	8393:31	8393:31	9	width
LEAF_NODE	8393:31	8393:31	10	width
LEAF_NODE	8393:36	8393:36	6	;
SELECTION	8394:2	8395:4	3	
KEYWORD	8394:2	8394:2	4	else
LEAF_NODE	8394:2	8394:2	5	else
STATEMENTS	8395:4	8395:4	4	
EXPR_STATEMENT	8395:4	8395:37	5	buffsize = ( rowsize + 1 ) * length ;
EXPR	8395:4	8395:4	6	buffsize = ( rowsize + 1 ) * length
ASSIGN	8395:4	8395:15	7	buffsize = ( rowsize + 1 ) * length
LVAL	8395:4	8395:4	8	buffsize
FIELD	8395:4	8395:4	9	buffsize
LEAF_NODE	8395:4	8395:4	10	buffsize
ASSIGN_OP	8395:13	8395:13	8	=
LEAF_NODE	8395:13	8395:13	9	=
RVAL	8395:15	8395:31	8	( rowsize + 1 ) * length
LEAF_NODE	8395:15	8395:15	9	(
FIELD	8395:16	8395:16	9	rowsize
LEAF_NODE	8395:16	8395:16	10	rowsize
LEAF_NODE	8395:24	8395:24	9	+
FIELD	8395:26	8395:26	9	1
LEAF_NODE	8395:26	8395:26	10	1
LEAF_NODE	8395:27	8395:27	9	)
LEAF_NODE	8395:29	8395:29	9	*
FIELD	8395:31	8395:31	9	length
LEAF_NODE	8395:31	8395:31	10	length
LEAF_NODE	8395:37	8395:37	6	;
EXPR_STATEMENT	8397:2	8397:34	3	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	8397:2	8397:2	4	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	8397:2	8397:21	5	bytes_per_sample = ( bps + 7 ) / 8
LVAL	8397:2	8397:2	6	bytes_per_sample
FIELD	8397:2	8397:2	7	bytes_per_sample
LEAF_NODE	8397:2	8397:2	8	bytes_per_sample
ASSIGN_OP	8397:19	8397:19	6	=
LEAF_NODE	8397:19	8397:19	7	=
RVAL	8397:21	8397:33	6	( bps + 7 ) / 8
LEAF_NODE	8397:21	8397:21	7	(
FIELD	8397:22	8397:22	7	bps
LEAF_NODE	8397:22	8397:22	8	bps
LEAF_NODE	8397:26	8397:26	7	+
FIELD	8397:28	8397:28	7	7
LEAF_NODE	8397:28	8397:28	8	7
LEAF_NODE	8397:29	8397:29	7	)
LEAF_NODE	8397:31	8397:31	7	/
FIELD	8397:33	8397:33	7	8
LEAF_NODE	8397:33	8397:33	8	8
LEAF_NODE	8397:34	8397:34	4	;
EXPR_STATEMENT	8398:2	8398:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	8398:2	8398:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	8398:2	8398:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	8398:2	8398:2	6	bytes_per_pixel
FIELD	8398:2	8398:2	7	bytes_per_pixel
LEAF_NODE	8398:2	8398:2	8	bytes_per_pixel
ASSIGN_OP	8398:19	8398:19	6	=
LEAF_NODE	8398:19	8398:19	7	=
RVAL	8398:21	8398:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	8398:21	8398:21	7	(
LEAF_NODE	8398:22	8398:22	7	(
FIELD	8398:23	8398:23	7	bps
LEAF_NODE	8398:23	8398:23	8	bps
LEAF_NODE	8398:27	8398:27	7	*
FIELD	8398:29	8398:29	7	spp
LEAF_NODE	8398:29	8398:29	8	spp
LEAF_NODE	8398:32	8398:32	7	)
LEAF_NODE	8398:34	8398:34	7	+
FIELD	8398:36	8398:36	7	7
LEAF_NODE	8398:36	8398:36	8	7
LEAF_NODE	8398:37	8398:37	7	)
LEAF_NODE	8398:39	8398:39	7	/
FIELD	8398:41	8398:41	7	8
LEAF_NODE	8398:41	8398:41	8	8
LEAF_NODE	8398:42	8398:42	4	;
SELECTION	8399:2	8400:4	3	
KEYWORD	8399:2	8399:2	4	if
LEAF_NODE	8399:2	8399:2	5	if
LEAF_NODE	8399:5	8399:5	4	(
CONDITION	8399:6	8399:6	4	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	8399:6	8399:45	5	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	8399:6	8399:6	6	bytes_per_pixel
LEAF_NODE	8399:6	8399:6	7	bytes_per_pixel
REL_OPERATOR	8399:22	8399:22	6	<
LEAF_NODE	8399:22	8399:22	7	<
LEAF_NODE	8399:24	8399:24	6	(
FIELD	8399:25	8399:25	6	bytes_per_sample
LEAF_NODE	8399:25	8399:25	7	bytes_per_sample
LEAF_NODE	8399:42	8399:42	6	+
FIELD	8399:44	8399:44	6	1
LEAF_NODE	8399:44	8399:44	7	1
LEAF_NODE	8399:45	8399:45	6	)
LEAF_NODE	8399:46	8399:46	4	)
STATEMENTS	8400:4	8400:4	4	
EXPR_STATEMENT	8400:4	8400:33	5	shift_width = bytes_per_pixel ;
EXPR	8400:4	8400:4	6	shift_width = bytes_per_pixel
ASSIGN	8400:4	8400:18	7	shift_width = bytes_per_pixel
LVAL	8400:4	8400:4	8	shift_width
FIELD	8400:4	8400:4	9	shift_width
LEAF_NODE	8400:4	8400:4	10	shift_width
ASSIGN_OP	8400:16	8400:16	8	=
LEAF_NODE	8400:16	8400:16	9	=
RVAL	8400:18	8400:18	8	bytes_per_pixel
FIELD	8400:18	8400:18	9	bytes_per_pixel
LEAF_NODE	8400:18	8400:18	10	bytes_per_pixel
LEAF_NODE	8400:33	8400:33	6	;
SELECTION	8401:2	8402:4	3	
KEYWORD	8401:2	8401:2	4	else
LEAF_NODE	8401:2	8401:2	5	else
STATEMENTS	8402:4	8402:4	4	
EXPR_STATEMENT	8402:4	8402:38	5	shift_width = bytes_per_sample + 1 ;
EXPR	8402:4	8402:4	6	shift_width = bytes_per_sample + 1
ASSIGN	8402:4	8402:18	7	shift_width = bytes_per_sample + 1
LVAL	8402:4	8402:4	8	shift_width
FIELD	8402:4	8402:4	9	shift_width
LEAF_NODE	8402:4	8402:4	10	shift_width
ASSIGN_OP	8402:16	8402:16	8	=
LEAF_NODE	8402:16	8402:16	9	=
RVAL	8402:18	8402:37	8	bytes_per_sample + 1
FIELD	8402:18	8402:18	9	bytes_per_sample
LEAF_NODE	8402:18	8402:18	10	bytes_per_sample
LEAF_NODE	8402:35	8402:35	9	+
FIELD	8402:37	8402:37	9	1
LEAF_NODE	8402:37	8402:37	10	1
LEAF_NODE	8402:38	8402:38	6	;
SELECTION	8404:2	8405:4	3	
KEYWORD	8404:2	8404:2	4	switch
LEAF_NODE	8404:2	8404:2	5	switch
LEAF_NODE	8404:9	8404:9	4	(
CONDITION	8404:10	8404:10	4	rotation
EXPR	8404:10	8404:10	5	rotation
FIELD	8404:10	8404:10	6	rotation
LEAF_NODE	8404:10	8404:10	7	rotation
LEAF_NODE	8404:18	8404:18	4	)
STATEMENTS	8405:4	8413:4	4	
LEAF_NODE	8405:4	8405:4	5	{
STATEMENTS	8406:4	8412:14	5	
LABEL	8406:4	8406:10	6	case 0 :
LEAF_NODE	8406:4	8406:4	7	case
LEAF_NODE	8406:9	8406:9	7	0
LEAF_NODE	8406:10	8406:10	7	:
LABEL	8407:4	8407:12	6	case 360 :
LEAF_NODE	8407:4	8407:4	7	case
LEAF_NODE	8407:9	8407:9	7	360
LEAF_NODE	8407:12	8407:12	7	:
JUMP_STATEMENT	8407:14	8407:24	6	return ( 0 ) ;
KEYWORD	8407:14	8407:14	7	return
LEAF_NODE	8407:14	8407:14	8	return
DESTINATION	8407:21	8407:21	7	( 0 )
EXPR	8407:21	8407:23	8	( 0 )
LEAF_NODE	8407:21	8407:21	9	(
FIELD	8407:22	8407:22	9	0
LEAF_NODE	8407:22	8407:22	10	0
LEAF_NODE	8407:23	8407:23	9	)
LEAF_NODE	8407:24	8407:24	7	;
LABEL	8408:4	8408:11	6	case 90 :
LEAF_NODE	8408:4	8408:4	7	case
LEAF_NODE	8408:9	8408:9	7	90
LEAF_NODE	8408:11	8408:11	7	:
LABEL	8409:4	8409:12	6	case 180 :
LEAF_NODE	8409:4	8409:4	7	case
LEAF_NODE	8409:9	8409:9	7	180
LEAF_NODE	8409:12	8409:12	7	:
LABEL	8410:4	8410:12	6	case 270 :
LEAF_NODE	8410:4	8410:4	7	case
LEAF_NODE	8410:9	8410:9	7	270
LEAF_NODE	8410:12	8410:12	7	:
JUMP_STATEMENT	8410:14	8410:19	6	break DESTINATION ;
KEYWORD	8410:14	8410:14	7	break
LEAF_NODE	8410:14	8410:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	8410:19	8410:19	7	;
LABEL	8411:4	8411:11	6	default :
LEAF_NODE	8411:4	8411:4	7	default
LEAF_NODE	8411:11	8411:11	7	:
EXPR_STATEMENT	8411:14	8411:77	6	TIFFError ( "rotateImage" , "Invalid rotation angle %d" , rotation ) ;
EXPR	8411:14	8411:14	7	TIFFError ( "rotateImage" , "Invalid rotation angle %d" , rotation )
FUNCTION_CALL	8411:14	8411:76	8	TIFFError ( "rotateImage" , "Invalid rotation angle %d" , rotation )
CALLEE	8411:14	8411:14	9	TIFFError
LEAF_NODE	8411:14	8411:14	10	TIFFError
LEAF_NODE	8411:23	8411:23	9	(
ARGUMENT	8411:24	8411:24	9	"rotateImage"
FIELD	8411:24	8411:24	10	"rotateImage"
LEAF_NODE	8411:24	8411:24	11	"rotateImage"
LEAF_NODE	8411:37	8411:37	9	,
ARGUMENT	8411:39	8411:39	9	"Invalid rotation angle %d"
FIELD	8411:39	8411:39	10	"Invalid rotation angle %d"
LEAF_NODE	8411:39	8411:39	11	"Invalid rotation angle %d"
LEAF_NODE	8411:66	8411:66	9	,
ARGUMENT	8411:68	8411:68	9	rotation
FIELD	8411:68	8411:68	10	rotation
LEAF_NODE	8411:68	8411:68	11	rotation
LEAF_NODE	8411:76	8411:76	9	)
LEAF_NODE	8411:77	8411:77	7	;
JUMP_STATEMENT	8412:14	8412:25	6	return ( - 1 ) ;
KEYWORD	8412:14	8412:14	7	return
LEAF_NODE	8412:14	8412:14	8	return
DESTINATION	8412:21	8412:21	7	( - 1 )
EXPR	8412:21	8412:24	8	( - 1 )
LEAF_NODE	8412:21	8412:21	9	(
UNARY_EXPR	8412:22	8412:23	9	- 1
UNARY_OPERATOR	8412:22	8412:22	10	-
LEAF_NODE	8412:22	8412:22	11	-
FIELD	8412:23	8412:23	10	1
LEAF_NODE	8412:23	8412:23	11	1
LEAF_NODE	8412:24	8412:24	9	)
LEAF_NODE	8412:25	8412:25	7	;
LEAF_NODE	8413:4	8413:4	5	}
SELECTION	8415:2	8416:4	3	
KEYWORD	8415:2	8415:2	4	if
LEAF_NODE	8415:2	8415:2	5	if
LEAF_NODE	8415:5	8415:5	4	(
CONDITION	8415:6	8415:6	4	! ( rbuff = ( unsigned char * ) _TIFFmalloc ( buffsize ) )
EXPR	8415:6	8415:6	5	! ( rbuff = ( unsigned char * ) _TIFFmalloc ( buffsize ) )
UNARY_EXPR	8415:6	8415:54	6	! ( rbuff = ( unsigned char * ) _TIFFmalloc ( buffsize ) )
UNARY_OPERATOR	8415:6	8415:6	7	!
LEAF_NODE	8415:6	8415:6	8	!
LEAF_NODE	8415:7	8415:7	7	(
ASSIGN	8415:8	8415:16	7	rbuff = ( unsigned char * ) _TIFFmalloc ( buffsize )
LVAL	8415:8	8415:8	8	rbuff
FIELD	8415:8	8415:8	9	rbuff
LEAF_NODE	8415:8	8415:8	10	rbuff
ASSIGN_OP	8415:14	8415:14	8	=
LEAF_NODE	8415:14	8415:14	9	=
RVAL	8415:16	8415:33	8	( unsigned char * ) _TIFFmalloc ( buffsize )
LEAF_NODE	8415:16	8415:16	9	(
TYPE_NAME	8415:17	8415:26	9	unsigned char
LEAF_NODE	8415:17	8415:17	10	unsigned
LEAF_NODE	8415:26	8415:26	10	char
LEAF_NODE	8415:31	8415:31	9	*
LEAF_NODE	8415:32	8415:32	9	)
FUNCTION_CALL	8415:33	8415:53	9	_TIFFmalloc ( buffsize )
CALLEE	8415:33	8415:33	10	_TIFFmalloc
LEAF_NODE	8415:33	8415:33	11	_TIFFmalloc
LEAF_NODE	8415:44	8415:44	10	(
ARGUMENT	8415:45	8415:45	10	buffsize
FIELD	8415:45	8415:45	11	buffsize
LEAF_NODE	8415:45	8415:45	12	buffsize
LEAF_NODE	8415:53	8415:53	10	)
LEAF_NODE	8415:54	8415:54	7	)
LEAF_NODE	8415:55	8415:55	4	)
STATEMENTS	8416:4	8419:4	4	
LEAF_NODE	8416:4	8416:4	5	{
STATEMENTS	8417:4	8418:4	5	
EXPR_STATEMENT	8417:4	8417:89	6	TIFFError ( "rotateImage" , "Unable to allocate rotation buffer of %1u bytes" , buffsize ) ;
EXPR	8417:4	8417:4	7	TIFFError ( "rotateImage" , "Unable to allocate rotation buffer of %1u bytes" , buffsize )
FUNCTION_CALL	8417:4	8417:88	8	TIFFError ( "rotateImage" , "Unable to allocate rotation buffer of %1u bytes" , buffsize )
CALLEE	8417:4	8417:4	9	TIFFError
LEAF_NODE	8417:4	8417:4	10	TIFFError
LEAF_NODE	8417:13	8417:13	9	(
ARGUMENT	8417:14	8417:14	9	"rotateImage"
FIELD	8417:14	8417:14	10	"rotateImage"
LEAF_NODE	8417:14	8417:14	11	"rotateImage"
LEAF_NODE	8417:27	8417:27	9	,
ARGUMENT	8417:29	8417:29	9	"Unable to allocate rotation buffer of %1u bytes"
FIELD	8417:29	8417:29	10	"Unable to allocate rotation buffer of %1u bytes"
LEAF_NODE	8417:29	8417:29	11	"Unable to allocate rotation buffer of %1u bytes"
LEAF_NODE	8417:78	8417:78	9	,
ARGUMENT	8417:80	8417:80	9	buffsize
FIELD	8417:80	8417:80	10	buffsize
LEAF_NODE	8417:80	8417:80	11	buffsize
LEAF_NODE	8417:88	8417:88	9	)
LEAF_NODE	8417:89	8417:89	7	;
JUMP_STATEMENT	8418:4	8418:15	6	return ( - 1 ) ;
KEYWORD	8418:4	8418:4	7	return
LEAF_NODE	8418:4	8418:4	8	return
DESTINATION	8418:11	8418:11	7	( - 1 )
EXPR	8418:11	8418:14	8	( - 1 )
LEAF_NODE	8418:11	8418:11	9	(
UNARY_EXPR	8418:12	8418:13	9	- 1
UNARY_OPERATOR	8418:12	8418:12	10	-
LEAF_NODE	8418:12	8418:12	11	-
FIELD	8418:13	8418:13	10	1
LEAF_NODE	8418:13	8418:13	11	1
LEAF_NODE	8418:14	8418:14	9	)
LEAF_NODE	8418:15	8418:15	7	;
LEAF_NODE	8419:4	8419:4	5	}
EXPR_STATEMENT	8420:2	8420:36	3	_TIFFmemset ( rbuff , '\0' , buffsize ) ;
EXPR	8420:2	8420:2	4	_TIFFmemset ( rbuff , '\0' , buffsize )
FUNCTION_CALL	8420:2	8420:35	5	_TIFFmemset ( rbuff , '\0' , buffsize )
CALLEE	8420:2	8420:2	6	_TIFFmemset
LEAF_NODE	8420:2	8420:2	7	_TIFFmemset
LEAF_NODE	8420:13	8420:13	6	(
ARGUMENT	8420:14	8420:14	6	rbuff
FIELD	8420:14	8420:14	7	rbuff
LEAF_NODE	8420:14	8420:14	8	rbuff
LEAF_NODE	8420:19	8420:19	6	,
ARGUMENT	8420:21	8420:21	6	'\0'
FIELD	8420:21	8420:21	7	'\0'
LEAF_NODE	8420:21	8420:21	8	'\0'
LEAF_NODE	8420:25	8420:25	6	,
ARGUMENT	8420:27	8420:27	6	buffsize
FIELD	8420:27	8420:27	7	buffsize
LEAF_NODE	8420:27	8420:27	8	buffsize
LEAF_NODE	8420:35	8420:35	6	)
LEAF_NODE	8420:36	8420:36	4	;
EXPR_STATEMENT	8422:2	8422:20	3	ibuff = * ibuff_ptr ;
EXPR	8422:2	8422:2	4	ibuff = * ibuff_ptr
ASSIGN	8422:2	8422:10	5	ibuff = * ibuff_ptr
LVAL	8422:2	8422:2	6	ibuff
FIELD	8422:2	8422:2	7	ibuff
LEAF_NODE	8422:2	8422:2	8	ibuff
ASSIGN_OP	8422:8	8422:8	6	=
LEAF_NODE	8422:8	8422:8	7	=
RVAL	8422:10	8422:10	6	* ibuff_ptr
UNARY_EXPR	8422:10	8422:11	7	* ibuff_ptr
UNARY_OPERATOR	8422:10	8422:10	8	*
LEAF_NODE	8422:10	8422:10	9	*
FIELD	8422:11	8422:11	8	ibuff_ptr
LEAF_NODE	8422:11	8422:11	9	ibuff_ptr
LEAF_NODE	8422:20	8422:20	4	;
SELECTION	8423:2	8424:4	3	
KEYWORD	8423:2	8423:2	4	switch
LEAF_NODE	8423:2	8423:2	5	switch
LEAF_NODE	8423:9	8423:9	4	(
CONDITION	8423:10	8423:10	4	rotation
EXPR	8423:10	8423:10	5	rotation
FIELD	8423:10	8423:10	6	rotation
LEAF_NODE	8423:10	8423:10	7	rotation
LEAF_NODE	8423:18	8423:18	4	)
STATEMENTS	8424:4	8646:4	4	
LEAF_NODE	8424:4	8424:4	5	{
STATEMENTS	8425:4	8645:14	5	
LABEL	8425:4	8425:12	6	case 180 :
LEAF_NODE	8425:4	8425:4	7	case
LEAF_NODE	8425:9	8425:9	7	180
LEAF_NODE	8425:12	8425:12	7	:
SELECTION	8425:14	8426:16	6	
KEYWORD	8425:14	8425:14	7	if
LEAF_NODE	8425:14	8425:14	8	if
LEAF_NODE	8425:17	8425:17	7	(
CONDITION	8425:18	8425:18	7	( bps % 8 ) == 0
EXPR	8425:18	8425:31	8	( bps % 8 ) == 0
LEAF_NODE	8425:18	8425:18	9	(
FIELD	8425:19	8425:19	9	bps
LEAF_NODE	8425:19	8425:19	10	bps
LEAF_NODE	8425:23	8425:23	9	%
FIELD	8425:25	8425:25	9	8
LEAF_NODE	8425:25	8425:25	10	8
LEAF_NODE	8425:26	8425:26	9	)
EQ_OPERATOR	8425:28	8425:28	9	==
LEAF_NODE	8425:28	8425:28	10	==
FIELD	8425:31	8425:31	9	0
LEAF_NODE	8425:31	8425:31	10	0
LEAF_NODE	8425:32	8425:32	7	)
STATEMENTS	8426:16	8441:16	7	
LEAF_NODE	8426:16	8426:16	8	{
STATEMENTS	8427:16	8429:16	8	
EXPR_STATEMENT	8427:16	8427:27	9	src = ibuff ;
EXPR	8427:16	8427:16	10	src = ibuff
ASSIGN	8427:16	8427:22	11	src = ibuff
LVAL	8427:16	8427:16	12	src
FIELD	8427:16	8427:16	13	src
LEAF_NODE	8427:16	8427:16	14	src
ASSIGN_OP	8427:20	8427:20	12	=
LEAF_NODE	8427:20	8427:20	13	=
RVAL	8427:22	8427:22	12	ibuff
FIELD	8427:22	8427:22	13	ibuff
LEAF_NODE	8427:22	8427:22	14	ibuff
LEAF_NODE	8427:27	8427:27	10	;
EXPR_STATEMENT	8428:16	8428:44	9	pix_offset = ( spp * bps ) / 8 ;
EXPR	8428:16	8428:16	10	pix_offset = ( spp * bps ) / 8
ASSIGN	8428:16	8428:29	11	pix_offset = ( spp * bps ) / 8
LVAL	8428:16	8428:16	12	pix_offset
FIELD	8428:16	8428:16	13	pix_offset
LEAF_NODE	8428:16	8428:16	14	pix_offset
ASSIGN_OP	8428:27	8428:27	12	=
LEAF_NODE	8428:27	8428:27	13	=
RVAL	8428:29	8428:43	12	( spp * bps ) / 8
LEAF_NODE	8428:29	8428:29	13	(
FIELD	8428:30	8428:30	13	spp
LEAF_NODE	8428:30	8428:30	14	spp
LEAF_NODE	8428:34	8428:34	13	*
FIELD	8428:36	8428:36	13	bps
LEAF_NODE	8428:36	8428:36	14	bps
LEAF_NODE	8428:39	8428:39	13	)
LEAF_NODE	8428:41	8428:41	13	/
FIELD	8428:43	8428:43	13	8
LEAF_NODE	8428:43	8428:43	14	8
LEAF_NODE	8428:44	8428:44	10	;
ITERATION	8429:16	8430:19	9	
KEYWORD	8429:16	8429:16	10	for
LEAF_NODE	8429:16	8429:16	11	for
LEAF_NODE	8429:20	8429:20	10	(
FOR_INIT	8429:21	8429:28	10	row = 0 ;
EXPR	8429:21	8429:21	11	row = 0
ASSIGN	8429:21	8429:27	12	row = 0
LVAL	8429:21	8429:21	13	row
FIELD	8429:21	8429:21	14	row
LEAF_NODE	8429:21	8429:21	15	row
ASSIGN_OP	8429:25	8429:25	13	=
LEAF_NODE	8429:25	8429:25	14	=
RVAL	8429:27	8429:27	13	0
FIELD	8429:27	8429:27	14	0
LEAF_NODE	8429:27	8429:27	15	0
LEAF_NODE	8429:28	8429:28	11	;
CONDITION	8429:30	8429:30	10	row < length
EXPR	8429:30	8429:36	11	row < length
FIELD	8429:30	8429:30	12	row
LEAF_NODE	8429:30	8429:30	13	row
REL_OPERATOR	8429:34	8429:34	12	<
LEAF_NODE	8429:34	8429:34	13	<
FIELD	8429:36	8429:36	12	length
LEAF_NODE	8429:36	8429:36	13	length
LEAF_NODE	8429:42	8429:42	10	;
FOR_EXPR	8429:44	8429:44	10	row ++
EXPR	8429:44	8429:44	11	row ++
FIELD	8429:44	8429:47	12	row ++
LEAF_NODE	8429:44	8429:44	13	row
LEAF_NODE	8429:47	8429:47	13	++
LEAF_NODE	8429:49	8429:49	10	)
STATEMENTS	8430:19	8440:19	10	
LEAF_NODE	8430:19	8430:19	11	{
STATEMENTS	8431:5	8432:19	11	
EXPR_STATEMENT	8431:5	8431:46	12	dst_offset = ( length - row - 1 ) * rowsize ;
EXPR	8431:5	8431:5	13	dst_offset = ( length - row - 1 ) * rowsize
ASSIGN	8431:5	8431:18	14	dst_offset = ( length - row - 1 ) * rowsize
LVAL	8431:5	8431:5	15	dst_offset
FIELD	8431:5	8431:5	16	dst_offset
LEAF_NODE	8431:5	8431:5	17	dst_offset
ASSIGN_OP	8431:16	8431:16	15	=
LEAF_NODE	8431:16	8431:16	16	=
RVAL	8431:18	8431:39	15	( length - row - 1 ) * rowsize
LEAF_NODE	8431:18	8431:18	16	(
FIELD	8431:19	8431:19	16	length
LEAF_NODE	8431:19	8431:19	17	length
LEAF_NODE	8431:26	8431:26	16	-
FIELD	8431:28	8431:28	16	row
LEAF_NODE	8431:28	8431:28	17	row
LEAF_NODE	8431:32	8431:32	16	-
FIELD	8431:34	8431:34	16	1
LEAF_NODE	8431:34	8431:34	17	1
LEAF_NODE	8431:35	8431:35	16	)
LEAF_NODE	8431:37	8431:37	16	*
FIELD	8431:39	8431:39	16	rowsize
LEAF_NODE	8431:39	8431:39	17	rowsize
LEAF_NODE	8431:46	8431:46	13	;
ITERATION	8432:19	8433:21	12	
KEYWORD	8432:19	8432:19	13	for
LEAF_NODE	8432:19	8432:19	14	for
LEAF_NODE	8432:23	8432:23	13	(
FOR_INIT	8432:24	8432:31	13	col = 0 ;
EXPR	8432:24	8432:24	14	col = 0
ASSIGN	8432:24	8432:30	15	col = 0
LVAL	8432:24	8432:24	16	col
FIELD	8432:24	8432:24	17	col
LEAF_NODE	8432:24	8432:24	18	col
ASSIGN_OP	8432:28	8432:28	16	=
LEAF_NODE	8432:28	8432:28	17	=
RVAL	8432:30	8432:30	16	0
FIELD	8432:30	8432:30	17	0
LEAF_NODE	8432:30	8432:30	18	0
LEAF_NODE	8432:31	8432:31	14	;
CONDITION	8432:33	8432:33	13	col < width
EXPR	8432:33	8432:39	14	col < width
FIELD	8432:33	8432:33	15	col
LEAF_NODE	8432:33	8432:33	16	col
REL_OPERATOR	8432:37	8432:37	15	<
LEAF_NODE	8432:37	8432:37	16	<
FIELD	8432:39	8432:39	15	width
LEAF_NODE	8432:39	8432:39	16	width
LEAF_NODE	8432:44	8432:44	13	;
FOR_EXPR	8432:46	8432:46	13	col ++
EXPR	8432:46	8432:46	14	col ++
FIELD	8432:46	8432:49	15	col ++
LEAF_NODE	8432:46	8432:46	16	col
LEAF_NODE	8432:49	8432:49	16	++
LEAF_NODE	8432:51	8432:51	13	)
STATEMENTS	8433:21	8439:21	13	
LEAF_NODE	8433:21	8433:21	14	{
STATEMENTS	8434:7	8437:7	14	
EXPR_STATEMENT	8434:7	8434:50	15	col_offset = ( width - col - 1 ) * pix_offset ;
EXPR	8434:7	8434:7	16	col_offset = ( width - col - 1 ) * pix_offset
ASSIGN	8434:7	8434:20	17	col_offset = ( width - col - 1 ) * pix_offset
LVAL	8434:7	8434:7	18	col_offset
FIELD	8434:7	8434:7	19	col_offset
LEAF_NODE	8434:7	8434:7	20	col_offset
ASSIGN_OP	8434:18	8434:18	18	=
LEAF_NODE	8434:18	8434:18	19	=
RVAL	8434:20	8434:40	18	( width - col - 1 ) * pix_offset
LEAF_NODE	8434:20	8434:20	19	(
FIELD	8434:21	8434:21	19	width
LEAF_NODE	8434:21	8434:21	20	width
LEAF_NODE	8434:27	8434:27	19	-
FIELD	8434:29	8434:29	19	col
LEAF_NODE	8434:29	8434:29	20	col
LEAF_NODE	8434:33	8434:33	19	-
FIELD	8434:35	8434:35	19	1
LEAF_NODE	8434:35	8434:35	20	1
LEAF_NODE	8434:36	8434:36	19	)
LEAF_NODE	8434:38	8434:38	19	*
FIELD	8434:40	8434:40	19	pix_offset
LEAF_NODE	8434:40	8434:40	20	pix_offset
LEAF_NODE	8434:50	8434:50	16	;
EXPR_STATEMENT	8435:21	8435:58	15	dst = rbuff + dst_offset + col_offset ;
EXPR	8435:21	8435:21	16	dst = rbuff + dst_offset + col_offset
ASSIGN	8435:21	8435:27	17	dst = rbuff + dst_offset + col_offset
LVAL	8435:21	8435:21	18	dst
FIELD	8435:21	8435:21	19	dst
LEAF_NODE	8435:21	8435:21	20	dst
ASSIGN_OP	8435:25	8435:25	18	=
LEAF_NODE	8435:25	8435:25	19	=
RVAL	8435:27	8435:48	18	rbuff + dst_offset + col_offset
FIELD	8435:27	8435:27	19	rbuff
LEAF_NODE	8435:27	8435:27	20	rbuff
LEAF_NODE	8435:33	8435:33	19	+
FIELD	8435:35	8435:35	19	dst_offset
LEAF_NODE	8435:35	8435:35	20	dst_offset
LEAF_NODE	8435:46	8435:46	19	+
FIELD	8435:48	8435:48	19	col_offset
LEAF_NODE	8435:48	8435:48	20	col_offset
LEAF_NODE	8435:58	8435:58	16	;
ITERATION	8437:7	8438:9	15	
KEYWORD	8437:7	8437:7	16	for
LEAF_NODE	8437:7	8437:7	17	for
LEAF_NODE	8437:11	8437:11	16	(
FOR_INIT	8437:12	8437:17	16	i = 0 ;
EXPR	8437:12	8437:12	17	i = 0
ASSIGN	8437:12	8437:16	18	i = 0
LVAL	8437:12	8437:12	19	i
FIELD	8437:12	8437:12	20	i
LEAF_NODE	8437:12	8437:12	21	i
ASSIGN_OP	8437:14	8437:14	19	=
LEAF_NODE	8437:14	8437:14	20	=
RVAL	8437:16	8437:16	19	0
FIELD	8437:16	8437:16	20	0
LEAF_NODE	8437:16	8437:16	21	0
LEAF_NODE	8437:17	8437:17	17	;
CONDITION	8437:19	8437:19	16	i < bytes_per_pixel
EXPR	8437:19	8437:24	17	i < bytes_per_pixel
FIELD	8437:19	8437:19	18	i
LEAF_NODE	8437:19	8437:19	19	i
REL_OPERATOR	8437:22	8437:22	18	<
LEAF_NODE	8437:22	8437:22	19	<
FIELD	8437:24	8437:24	18	bytes_per_pixel
LEAF_NODE	8437:24	8437:24	19	bytes_per_pixel
LEAF_NODE	8437:39	8437:39	16	;
FOR_EXPR	8437:41	8437:41	16	i ++
EXPR	8437:41	8437:41	17	i ++
FIELD	8437:41	8437:42	18	i ++
LEAF_NODE	8437:41	8437:41	19	i
LEAF_NODE	8437:42	8437:42	19	++
LEAF_NODE	8437:44	8437:44	16	)
STATEMENTS	8438:9	8438:9	16	
EXPR_STATEMENT	8438:9	8438:24	17	* dst ++ = * src ++ ;
EXPR	8438:9	8438:9	18	* dst ++ = * src ++
ASSIGN	8438:9	8438:18	19	* dst ++ = * src ++
LVAL	8438:9	8438:9	20	* dst ++
UNARY_EXPR	8438:9	8438:10	21	* dst ++
UNARY_OPERATOR	8438:9	8438:9	22	*
LEAF_NODE	8438:9	8438:9	23	*
FIELD	8438:10	8438:13	22	dst ++
LEAF_NODE	8438:10	8438:10	23	dst
LEAF_NODE	8438:13	8438:13	23	++
ASSIGN_OP	8438:16	8438:16	20	=
LEAF_NODE	8438:16	8438:16	21	=
RVAL	8438:18	8438:18	20	* src ++
UNARY_EXPR	8438:18	8438:19	21	* src ++
UNARY_OPERATOR	8438:18	8438:18	22	*
LEAF_NODE	8438:18	8438:18	23	*
FIELD	8438:19	8438:22	22	src ++
LEAF_NODE	8438:19	8438:19	23	src
LEAF_NODE	8438:22	8438:22	23	++
LEAF_NODE	8438:24	8438:24	18	;
LEAF_NODE	8439:21	8439:21	14	}
LEAF_NODE	8440:19	8440:19	11	}
LEAF_NODE	8441:16	8441:16	8	}
SELECTION	8442:7	8443:16	6	
KEYWORD	8442:7	8442:7	7	else
LEAF_NODE	8442:7	8442:7	8	else
STATEMENTS	8443:16	8486:2	7	
LEAF_NODE	8443:16	8443:16	8	{
STATEMENTS	8444:16	8444:16	8	
ITERATION	8444:16	8445:18	9	
KEYWORD	8444:16	8444:16	10	for
LEAF_NODE	8444:16	8444:16	11	for
LEAF_NODE	8444:20	8444:20	10	(
FOR_INIT	8444:21	8444:28	10	row = 0 ;
EXPR	8444:21	8444:21	11	row = 0
ASSIGN	8444:21	8444:27	12	row = 0
LVAL	8444:21	8444:21	13	row
FIELD	8444:21	8444:21	14	row
LEAF_NODE	8444:21	8444:21	15	row
ASSIGN_OP	8444:25	8444:25	13	=
LEAF_NODE	8444:25	8444:25	14	=
RVAL	8444:27	8444:27	13	0
FIELD	8444:27	8444:27	14	0
LEAF_NODE	8444:27	8444:27	15	0
LEAF_NODE	8444:28	8444:28	11	;
CONDITION	8444:30	8444:30	10	row < length
EXPR	8444:30	8444:36	11	row < length
FIELD	8444:30	8444:30	12	row
LEAF_NODE	8444:30	8444:30	13	row
REL_OPERATOR	8444:34	8444:34	12	<
LEAF_NODE	8444:34	8444:34	13	<
FIELD	8444:36	8444:36	12	length
LEAF_NODE	8444:36	8444:36	13	length
LEAF_NODE	8444:42	8444:42	10	;
FOR_EXPR	8444:44	8444:44	10	row ++
EXPR	8444:44	8444:44	11	row ++
FIELD	8444:44	8444:47	12	row ++
LEAF_NODE	8444:44	8444:44	13	row
LEAF_NODE	8444:47	8444:47	13	++
LEAF_NODE	8444:49	8444:49	10	)
STATEMENTS	8445:18	8485:4	10	
LEAF_NODE	8445:18	8445:18	11	{
STATEMENTS	8446:4	8450:18	11	
EXPR_STATEMENT	8446:4	8446:30	12	src_offset = row * rowsize ;
EXPR	8446:4	8446:4	13	src_offset = row * rowsize
ASSIGN	8446:4	8446:17	14	src_offset = row * rowsize
LVAL	8446:4	8446:4	15	src_offset
FIELD	8446:4	8446:4	16	src_offset
LEAF_NODE	8446:4	8446:4	17	src_offset
ASSIGN_OP	8446:15	8446:15	15	=
LEAF_NODE	8446:15	8446:15	16	=
RVAL	8446:17	8446:23	15	row * rowsize
FIELD	8446:17	8446:17	16	row
LEAF_NODE	8446:17	8446:17	17	row
LEAF_NODE	8446:21	8446:21	16	*
FIELD	8446:23	8446:23	16	rowsize
LEAF_NODE	8446:23	8446:23	17	rowsize
LEAF_NODE	8446:30	8446:30	13	;
EXPR_STATEMENT	8447:4	8447:45	12	dst_offset = ( length - row - 1 ) * rowsize ;
EXPR	8447:4	8447:4	13	dst_offset = ( length - row - 1 ) * rowsize
ASSIGN	8447:4	8447:17	14	dst_offset = ( length - row - 1 ) * rowsize
LVAL	8447:4	8447:4	15	dst_offset
FIELD	8447:4	8447:4	16	dst_offset
LEAF_NODE	8447:4	8447:4	17	dst_offset
ASSIGN_OP	8447:15	8447:15	15	=
LEAF_NODE	8447:15	8447:15	16	=
RVAL	8447:17	8447:38	15	( length - row - 1 ) * rowsize
LEAF_NODE	8447:17	8447:17	16	(
FIELD	8447:18	8447:18	16	length
LEAF_NODE	8447:18	8447:18	17	length
LEAF_NODE	8447:25	8447:25	16	-
FIELD	8447:27	8447:27	16	row
LEAF_NODE	8447:27	8447:27	17	row
LEAF_NODE	8447:31	8447:31	16	-
FIELD	8447:33	8447:33	16	1
LEAF_NODE	8447:33	8447:33	17	1
LEAF_NODE	8447:34	8447:34	16	)
LEAF_NODE	8447:36	8447:36	16	*
FIELD	8447:38	8447:38	16	rowsize
LEAF_NODE	8447:38	8447:38	17	rowsize
LEAF_NODE	8447:45	8447:45	13	;
EXPR_STATEMENT	8448:4	8448:28	12	src = ibuff + src_offset ;
EXPR	8448:4	8448:4	13	src = ibuff + src_offset
ASSIGN	8448:4	8448:10	14	src = ibuff + src_offset
LVAL	8448:4	8448:4	15	src
FIELD	8448:4	8448:4	16	src
LEAF_NODE	8448:4	8448:4	17	src
ASSIGN_OP	8448:8	8448:8	15	=
LEAF_NODE	8448:8	8448:8	16	=
RVAL	8448:10	8448:18	15	ibuff + src_offset
FIELD	8448:10	8448:10	16	ibuff
LEAF_NODE	8448:10	8448:10	17	ibuff
LEAF_NODE	8448:16	8448:16	16	+
FIELD	8448:18	8448:18	16	src_offset
LEAF_NODE	8448:18	8448:18	17	src_offset
LEAF_NODE	8448:28	8448:28	13	;
EXPR_STATEMENT	8449:18	8449:42	12	dst = rbuff + dst_offset ;
EXPR	8449:18	8449:18	13	dst = rbuff + dst_offset
ASSIGN	8449:18	8449:24	14	dst = rbuff + dst_offset
LVAL	8449:18	8449:18	15	dst
FIELD	8449:18	8449:18	16	dst
LEAF_NODE	8449:18	8449:18	17	dst
ASSIGN_OP	8449:22	8449:22	15	=
LEAF_NODE	8449:22	8449:22	16	=
RVAL	8449:24	8449:32	15	rbuff + dst_offset
FIELD	8449:24	8449:24	16	rbuff
LEAF_NODE	8449:24	8449:24	17	rbuff
LEAF_NODE	8449:30	8449:30	16	+
FIELD	8449:32	8449:32	16	dst_offset
LEAF_NODE	8449:32	8449:32	17	dst_offset
LEAF_NODE	8449:42	8449:42	13	;
SELECTION	8450:18	8451:20	12	
KEYWORD	8450:18	8450:18	13	switch
LEAF_NODE	8450:18	8450:18	14	switch
LEAF_NODE	8450:25	8450:25	13	(
CONDITION	8450:26	8450:26	13	shift_width
EXPR	8450:26	8450:26	14	shift_width
FIELD	8450:26	8450:26	15	shift_width
LEAF_NODE	8450:26	8450:26	16	shift_width
LEAF_NODE	8450:37	8450:37	13	)
STATEMENTS	8451:20	8484:20	13	
LEAF_NODE	8451:20	8451:20	14	{
STATEMENTS	8452:20	8483:29	14	
LABEL	8452:20	8452:26	15	case 1 :
LEAF_NODE	8452:20	8452:20	16	case
LEAF_NODE	8452:25	8452:25	16	1
LEAF_NODE	8452:26	8452:26	16	:
SELECTION	8452:28	8453:9	15	
KEYWORD	8452:28	8452:28	16	if
LEAF_NODE	8452:28	8452:28	17	if
LEAF_NODE	8452:31	8452:31	16	(
CONDITION	8452:32	8452:32	16	bps == 1
EXPR	8452:32	8452:39	17	bps == 1
FIELD	8452:32	8452:32	18	bps
LEAF_NODE	8452:32	8452:32	19	bps
EQ_OPERATOR	8452:36	8452:36	18	==
LEAF_NODE	8452:36	8452:36	19	==
FIELD	8452:39	8452:39	18	1
LEAF_NODE	8452:39	8452:39	19	1
LEAF_NODE	8452:40	8452:40	16	)
STATEMENTS	8453:9	8460:30	16	
LEAF_NODE	8453:9	8453:9	17	{
STATEMENTS	8454:30	8459:30	17	
SELECTION	8454:30	8455:32	18	
KEYWORD	8454:30	8454:30	19	if
LEAF_NODE	8454:30	8454:30	20	if
LEAF_NODE	8454:33	8454:33	19	(
CONDITION	8454:34	8454:34	19	reverseSamples8bits ( spp , bps , width , src , dst )
EXPR	8454:34	8454:34	20	reverseSamples8bits ( spp , bps , width , src , dst )
FUNCTION_CALL	8454:34	8454:79	21	reverseSamples8bits ( spp , bps , width , src , dst )
CALLEE	8454:34	8454:34	22	reverseSamples8bits
LEAF_NODE	8454:34	8454:34	23	reverseSamples8bits
LEAF_NODE	8454:53	8454:53	22	(
ARGUMENT	8454:54	8454:54	22	spp
FIELD	8454:54	8454:54	23	spp
LEAF_NODE	8454:54	8454:54	24	spp
LEAF_NODE	8454:57	8454:57	22	,
ARGUMENT	8454:59	8454:59	22	bps
FIELD	8454:59	8454:59	23	bps
LEAF_NODE	8454:59	8454:59	24	bps
LEAF_NODE	8454:62	8454:62	22	,
ARGUMENT	8454:64	8454:64	22	width
FIELD	8454:64	8454:64	23	width
LEAF_NODE	8454:64	8454:64	24	width
LEAF_NODE	8454:69	8454:69	22	,
ARGUMENT	8454:71	8454:71	22	src
FIELD	8454:71	8454:71	23	src
LEAF_NODE	8454:71	8454:71	24	src
LEAF_NODE	8454:74	8454:74	22	,
ARGUMENT	8454:76	8454:76	22	dst
FIELD	8454:76	8454:76	23	dst
LEAF_NODE	8454:76	8454:76	24	dst
LEAF_NODE	8454:79	8454:79	22	)
LEAF_NODE	8454:80	8454:80	19	)
STATEMENTS	8455:32	8458:32	19	
LEAF_NODE	8455:32	8455:32	20	{
STATEMENTS	8456:18	8457:32	20	
EXPR_STATEMENT	8456:18	8456:34	21	_TIFFfree ( rbuff ) ;
EXPR	8456:18	8456:18	22	_TIFFfree ( rbuff )
FUNCTION_CALL	8456:18	8456:33	23	_TIFFfree ( rbuff )
CALLEE	8456:18	8456:18	24	_TIFFfree
LEAF_NODE	8456:18	8456:18	25	_TIFFfree
LEAF_NODE	8456:27	8456:27	24	(
ARGUMENT	8456:28	8456:28	24	rbuff
FIELD	8456:28	8456:28	25	rbuff
LEAF_NODE	8456:28	8456:28	26	rbuff
LEAF_NODE	8456:33	8456:33	24	)
LEAF_NODE	8456:34	8456:34	22	;
JUMP_STATEMENT	8457:32	8457:43	21	return ( - 1 ) ;
KEYWORD	8457:32	8457:32	22	return
LEAF_NODE	8457:32	8457:32	23	return
DESTINATION	8457:39	8457:39	22	( - 1 )
EXPR	8457:39	8457:42	23	( - 1 )
LEAF_NODE	8457:39	8457:39	24	(
UNARY_EXPR	8457:40	8457:41	24	- 1
UNARY_OPERATOR	8457:40	8457:40	25	-
LEAF_NODE	8457:40	8457:40	26	-
FIELD	8457:41	8457:41	25	1
LEAF_NODE	8457:41	8457:41	26	1
LEAF_NODE	8457:42	8457:42	24	)
LEAF_NODE	8457:43	8457:43	22	;
LEAF_NODE	8458:32	8458:32	20	}
JUMP_STATEMENT	8459:30	8459:35	18	break DESTINATION ;
KEYWORD	8459:30	8459:30	19	break
LEAF_NODE	8459:30	8459:30	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	8459:35	8459:35	19	;
LEAF_NODE	8460:30	8460:30	17	}
SELECTION	8461:28	8462:30	15	
KEYWORD	8461:28	8461:28	16	if
LEAF_NODE	8461:28	8461:28	17	if
LEAF_NODE	8461:31	8461:31	16	(
CONDITION	8461:32	8461:32	16	reverseSamples16bits ( spp , bps , width , src , dst )
EXPR	8461:32	8461:32	17	reverseSamples16bits ( spp , bps , width , src , dst )
FUNCTION_CALL	8461:32	8461:78	18	reverseSamples16bits ( spp , bps , width , src , dst )
CALLEE	8461:32	8461:32	19	reverseSamples16bits
LEAF_NODE	8461:32	8461:32	20	reverseSamples16bits
LEAF_NODE	8461:52	8461:52	19	(
ARGUMENT	8461:53	8461:53	19	spp
FIELD	8461:53	8461:53	20	spp
LEAF_NODE	8461:53	8461:53	21	spp
LEAF_NODE	8461:56	8461:56	19	,
ARGUMENT	8461:58	8461:58	19	bps
FIELD	8461:58	8461:58	20	bps
LEAF_NODE	8461:58	8461:58	21	bps
LEAF_NODE	8461:61	8461:61	19	,
ARGUMENT	8461:63	8461:63	19	width
FIELD	8461:63	8461:63	20	width
LEAF_NODE	8461:63	8461:63	21	width
LEAF_NODE	8461:68	8461:68	19	,
ARGUMENT	8461:70	8461:70	19	src
FIELD	8461:70	8461:70	20	src
LEAF_NODE	8461:70	8461:70	21	src
LEAF_NODE	8461:73	8461:73	19	,
ARGUMENT	8461:75	8461:75	19	dst
FIELD	8461:75	8461:75	20	dst
LEAF_NODE	8461:75	8461:75	21	dst
LEAF_NODE	8461:78	8461:78	19	)
LEAF_NODE	8461:79	8461:79	16	)
STATEMENTS	8462:30	8465:30	16	
LEAF_NODE	8462:30	8462:30	17	{
STATEMENTS	8463:16	8464:30	17	
EXPR_STATEMENT	8463:16	8463:32	18	_TIFFfree ( rbuff ) ;
EXPR	8463:16	8463:16	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8463:16	8463:31	20	_TIFFfree ( rbuff )
CALLEE	8463:16	8463:16	21	_TIFFfree
LEAF_NODE	8463:16	8463:16	22	_TIFFfree
LEAF_NODE	8463:25	8463:25	21	(
ARGUMENT	8463:26	8463:26	21	rbuff
FIELD	8463:26	8463:26	22	rbuff
LEAF_NODE	8463:26	8463:26	23	rbuff
LEAF_NODE	8463:31	8463:31	21	)
LEAF_NODE	8463:32	8463:32	19	;
JUMP_STATEMENT	8464:30	8464:41	18	return ( - 1 ) ;
KEYWORD	8464:30	8464:30	19	return
LEAF_NODE	8464:30	8464:30	20	return
DESTINATION	8464:37	8464:37	19	( - 1 )
EXPR	8464:37	8464:40	20	( - 1 )
LEAF_NODE	8464:37	8464:37	21	(
UNARY_EXPR	8464:38	8464:39	21	- 1
UNARY_OPERATOR	8464:38	8464:38	22	-
LEAF_NODE	8464:38	8464:38	23	-
FIELD	8464:39	8464:39	22	1
LEAF_NODE	8464:39	8464:39	23	1
LEAF_NODE	8464:40	8464:40	21	)
LEAF_NODE	8464:41	8464:41	19	;
LEAF_NODE	8465:30	8465:30	17	}
JUMP_STATEMENT	8466:29	8466:34	15	break DESTINATION ;
KEYWORD	8466:29	8466:29	16	break
LEAF_NODE	8466:29	8466:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8466:34	8466:34	16	;
LABEL	8467:20	8467:26	15	case 2 :
LEAF_NODE	8467:20	8467:20	16	case
LEAF_NODE	8467:25	8467:25	16	2
LEAF_NODE	8467:26	8467:26	16	:
SELECTION	8467:28	8468:30	15	
KEYWORD	8467:28	8467:28	16	if
LEAF_NODE	8467:28	8467:28	17	if
LEAF_NODE	8467:31	8467:31	16	(
CONDITION	8467:32	8467:32	16	reverseSamples24bits ( spp , bps , width , src , dst )
EXPR	8467:32	8467:32	17	reverseSamples24bits ( spp , bps , width , src , dst )
FUNCTION_CALL	8467:32	8467:78	18	reverseSamples24bits ( spp , bps , width , src , dst )
CALLEE	8467:32	8467:32	19	reverseSamples24bits
LEAF_NODE	8467:32	8467:32	20	reverseSamples24bits
LEAF_NODE	8467:52	8467:52	19	(
ARGUMENT	8467:53	8467:53	19	spp
FIELD	8467:53	8467:53	20	spp
LEAF_NODE	8467:53	8467:53	21	spp
LEAF_NODE	8467:56	8467:56	19	,
ARGUMENT	8467:58	8467:58	19	bps
FIELD	8467:58	8467:58	20	bps
LEAF_NODE	8467:58	8467:58	21	bps
LEAF_NODE	8467:61	8467:61	19	,
ARGUMENT	8467:63	8467:63	19	width
FIELD	8467:63	8467:63	20	width
LEAF_NODE	8467:63	8467:63	21	width
LEAF_NODE	8467:68	8467:68	19	,
ARGUMENT	8467:70	8467:70	19	src
FIELD	8467:70	8467:70	20	src
LEAF_NODE	8467:70	8467:70	21	src
LEAF_NODE	8467:73	8467:73	19	,
ARGUMENT	8467:75	8467:75	19	dst
FIELD	8467:75	8467:75	20	dst
LEAF_NODE	8467:75	8467:75	21	dst
LEAF_NODE	8467:78	8467:78	19	)
LEAF_NODE	8467:79	8467:79	16	)
STATEMENTS	8468:30	8471:30	16	
LEAF_NODE	8468:30	8468:30	17	{
STATEMENTS	8469:16	8470:30	17	
EXPR_STATEMENT	8469:16	8469:32	18	_TIFFfree ( rbuff ) ;
EXPR	8469:16	8469:16	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8469:16	8469:31	20	_TIFFfree ( rbuff )
CALLEE	8469:16	8469:16	21	_TIFFfree
LEAF_NODE	8469:16	8469:16	22	_TIFFfree
LEAF_NODE	8469:25	8469:25	21	(
ARGUMENT	8469:26	8469:26	21	rbuff
FIELD	8469:26	8469:26	22	rbuff
LEAF_NODE	8469:26	8469:26	23	rbuff
LEAF_NODE	8469:31	8469:31	21	)
LEAF_NODE	8469:32	8469:32	19	;
JUMP_STATEMENT	8470:30	8470:41	18	return ( - 1 ) ;
KEYWORD	8470:30	8470:30	19	return
LEAF_NODE	8470:30	8470:30	20	return
DESTINATION	8470:37	8470:37	19	( - 1 )
EXPR	8470:37	8470:40	20	( - 1 )
LEAF_NODE	8470:37	8470:37	21	(
UNARY_EXPR	8470:38	8470:39	21	- 1
UNARY_OPERATOR	8470:38	8470:38	22	-
LEAF_NODE	8470:38	8470:38	23	-
FIELD	8470:39	8470:39	22	1
LEAF_NODE	8470:39	8470:39	23	1
LEAF_NODE	8470:40	8470:40	21	)
LEAF_NODE	8470:41	8470:41	19	;
LEAF_NODE	8471:30	8471:30	17	}
JUMP_STATEMENT	8472:29	8472:34	15	break DESTINATION ;
KEYWORD	8472:29	8472:29	16	break
LEAF_NODE	8472:29	8472:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8472:34	8472:34	16	;
LABEL	8473:20	8473:26	15	case 3 :
LEAF_NODE	8473:20	8473:20	16	case
LEAF_NODE	8473:25	8473:25	16	3
LEAF_NODE	8473:26	8473:26	16	:
LABEL	8474:20	8474:26	15	case 4 :
LEAF_NODE	8474:20	8474:20	16	case
LEAF_NODE	8474:25	8474:25	16	4
LEAF_NODE	8474:26	8474:26	16	:
LABEL	8475:20	8475:26	15	case 5 :
LEAF_NODE	8475:20	8475:20	16	case
LEAF_NODE	8475:25	8475:25	16	5
LEAF_NODE	8475:26	8475:26	16	:
SELECTION	8475:28	8476:30	15	
KEYWORD	8475:28	8475:28	16	if
LEAF_NODE	8475:28	8475:28	17	if
LEAF_NODE	8475:31	8475:31	16	(
CONDITION	8475:32	8475:32	16	reverseSamples32bits ( spp , bps , width , src , dst )
EXPR	8475:32	8475:32	17	reverseSamples32bits ( spp , bps , width , src , dst )
FUNCTION_CALL	8475:32	8475:78	18	reverseSamples32bits ( spp , bps , width , src , dst )
CALLEE	8475:32	8475:32	19	reverseSamples32bits
LEAF_NODE	8475:32	8475:32	20	reverseSamples32bits
LEAF_NODE	8475:52	8475:52	19	(
ARGUMENT	8475:53	8475:53	19	spp
FIELD	8475:53	8475:53	20	spp
LEAF_NODE	8475:53	8475:53	21	spp
LEAF_NODE	8475:56	8475:56	19	,
ARGUMENT	8475:58	8475:58	19	bps
FIELD	8475:58	8475:58	20	bps
LEAF_NODE	8475:58	8475:58	21	bps
LEAF_NODE	8475:61	8475:61	19	,
ARGUMENT	8475:63	8475:63	19	width
FIELD	8475:63	8475:63	20	width
LEAF_NODE	8475:63	8475:63	21	width
LEAF_NODE	8475:68	8475:68	19	,
ARGUMENT	8475:70	8475:70	19	src
FIELD	8475:70	8475:70	20	src
LEAF_NODE	8475:70	8475:70	21	src
LEAF_NODE	8475:73	8475:73	19	,
ARGUMENT	8475:75	8475:75	19	dst
FIELD	8475:75	8475:75	20	dst
LEAF_NODE	8475:75	8475:75	21	dst
LEAF_NODE	8475:78	8475:78	19	)
LEAF_NODE	8475:79	8475:79	16	)
STATEMENTS	8476:30	8479:30	16	
LEAF_NODE	8476:30	8476:30	17	{
STATEMENTS	8477:16	8478:30	17	
EXPR_STATEMENT	8477:16	8477:32	18	_TIFFfree ( rbuff ) ;
EXPR	8477:16	8477:16	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8477:16	8477:31	20	_TIFFfree ( rbuff )
CALLEE	8477:16	8477:16	21	_TIFFfree
LEAF_NODE	8477:16	8477:16	22	_TIFFfree
LEAF_NODE	8477:25	8477:25	21	(
ARGUMENT	8477:26	8477:26	21	rbuff
FIELD	8477:26	8477:26	22	rbuff
LEAF_NODE	8477:26	8477:26	23	rbuff
LEAF_NODE	8477:31	8477:31	21	)
LEAF_NODE	8477:32	8477:32	19	;
JUMP_STATEMENT	8478:30	8478:41	18	return ( - 1 ) ;
KEYWORD	8478:30	8478:30	19	return
LEAF_NODE	8478:30	8478:30	20	return
DESTINATION	8478:37	8478:37	19	( - 1 )
EXPR	8478:37	8478:40	20	( - 1 )
LEAF_NODE	8478:37	8478:37	21	(
UNARY_EXPR	8478:38	8478:39	21	- 1
UNARY_OPERATOR	8478:38	8478:38	22	-
LEAF_NODE	8478:38	8478:38	23	-
FIELD	8478:39	8478:39	22	1
LEAF_NODE	8478:39	8478:39	23	1
LEAF_NODE	8478:40	8478:40	21	)
LEAF_NODE	8478:41	8478:41	19	;
LEAF_NODE	8479:30	8479:30	17	}
JUMP_STATEMENT	8480:29	8480:34	15	break DESTINATION ;
KEYWORD	8480:29	8480:29	16	break
LEAF_NODE	8480:29	8480:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8480:34	8480:34	16	;
LABEL	8481:20	8481:27	15	default :
LEAF_NODE	8481:20	8481:20	16	default
LEAF_NODE	8481:27	8481:27	16	:
EXPR_STATEMENT	8481:29	8481:85	15	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps ) ;
EXPR	8481:29	8481:29	16	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	8481:29	8481:84	17	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps )
CALLEE	8481:29	8481:29	18	TIFFError
LEAF_NODE	8481:29	8481:29	19	TIFFError
LEAF_NODE	8481:38	8481:38	18	(
ARGUMENT	8481:39	8481:39	18	"rotateImage"
FIELD	8481:39	8481:39	19	"rotateImage"
LEAF_NODE	8481:39	8481:39	20	"rotateImage"
LEAF_NODE	8481:52	8481:52	18	,
ARGUMENT	8481:53	8481:53	18	"Unsupported bit depth %d"
FIELD	8481:53	8481:53	19	"Unsupported bit depth %d"
LEAF_NODE	8481:53	8481:53	20	"Unsupported bit depth %d"
LEAF_NODE	8481:79	8481:79	18	,
ARGUMENT	8481:81	8481:81	18	bps
FIELD	8481:81	8481:81	19	bps
LEAF_NODE	8481:81	8481:81	20	bps
LEAF_NODE	8481:84	8481:84	18	)
LEAF_NODE	8481:85	8481:85	16	;
EXPR_STATEMENT	8482:15	8482:31	15	_TIFFfree ( rbuff ) ;
EXPR	8482:15	8482:15	16	_TIFFfree ( rbuff )
FUNCTION_CALL	8482:15	8482:30	17	_TIFFfree ( rbuff )
CALLEE	8482:15	8482:15	18	_TIFFfree
LEAF_NODE	8482:15	8482:15	19	_TIFFfree
LEAF_NODE	8482:24	8482:24	18	(
ARGUMENT	8482:25	8482:25	18	rbuff
FIELD	8482:25	8482:25	19	rbuff
LEAF_NODE	8482:25	8482:25	20	rbuff
LEAF_NODE	8482:30	8482:30	18	)
LEAF_NODE	8482:31	8482:31	16	;
JUMP_STATEMENT	8483:29	8483:40	15	return ( - 1 ) ;
KEYWORD	8483:29	8483:29	16	return
LEAF_NODE	8483:29	8483:29	17	return
DESTINATION	8483:36	8483:36	16	( - 1 )
EXPR	8483:36	8483:39	17	( - 1 )
LEAF_NODE	8483:36	8483:36	18	(
UNARY_EXPR	8483:37	8483:38	18	- 1
UNARY_OPERATOR	8483:37	8483:37	19	-
LEAF_NODE	8483:37	8483:37	20	-
FIELD	8483:38	8483:38	19	1
LEAF_NODE	8483:38	8483:38	20	1
LEAF_NODE	8483:39	8483:39	18	)
LEAF_NODE	8483:40	8483:40	16	;
LEAF_NODE	8484:20	8484:20	14	}
LEAF_NODE	8485:4	8485:4	11	}
LEAF_NODE	8486:2	8486:2	8	}
EXPR_STATEMENT	8487:14	8487:30	6	_TIFFfree ( ibuff ) ;
EXPR	8487:14	8487:14	7	_TIFFfree ( ibuff )
FUNCTION_CALL	8487:14	8487:29	8	_TIFFfree ( ibuff )
CALLEE	8487:14	8487:14	9	_TIFFfree
LEAF_NODE	8487:14	8487:14	10	_TIFFfree
LEAF_NODE	8487:23	8487:23	9	(
ARGUMENT	8487:24	8487:24	9	ibuff
FIELD	8487:24	8487:24	10	ibuff
LEAF_NODE	8487:24	8487:24	11	ibuff
LEAF_NODE	8487:29	8487:29	9	)
LEAF_NODE	8487:30	8487:30	7	;
EXPR_STATEMENT	8488:14	8488:34	6	* ( ibuff_ptr ) = rbuff ;
EXPR	8488:14	8488:14	7	* ( ibuff_ptr ) = rbuff
ASSIGN	8488:14	8488:29	8	* ( ibuff_ptr ) = rbuff
LVAL	8488:14	8488:14	9	* ( ibuff_ptr )
UNARY_EXPR	8488:14	8488:25	10	* ( ibuff_ptr )
UNARY_OPERATOR	8488:14	8488:14	11	*
LEAF_NODE	8488:14	8488:14	12	*
LEAF_NODE	8488:15	8488:15	11	(
FIELD	8488:16	8488:16	11	ibuff_ptr
LEAF_NODE	8488:16	8488:16	12	ibuff_ptr
LEAF_NODE	8488:25	8488:25	11	)
ASSIGN_OP	8488:27	8488:27	9	=
LEAF_NODE	8488:27	8488:27	10	=
RVAL	8488:29	8488:29	9	rbuff
FIELD	8488:29	8488:29	10	rbuff
LEAF_NODE	8488:29	8488:29	11	rbuff
LEAF_NODE	8488:34	8488:34	7	;
JUMP_STATEMENT	8489:14	8489:19	6	break DESTINATION ;
KEYWORD	8489:14	8489:14	7	break
LEAF_NODE	8489:14	8489:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	8489:19	8489:19	7	;
LABEL	8491:4	8491:11	6	case 90 :
LEAF_NODE	8491:4	8491:4	7	case
LEAF_NODE	8491:9	8491:9	7	90
LEAF_NODE	8491:11	8491:11	7	:
SELECTION	8491:14	8492:16	6	
KEYWORD	8491:14	8491:14	7	if
LEAF_NODE	8491:14	8491:14	8	if
LEAF_NODE	8491:17	8491:17	7	(
CONDITION	8491:18	8491:18	7	( bps % 8 ) == 0
EXPR	8491:18	8491:31	8	( bps % 8 ) == 0
LEAF_NODE	8491:18	8491:18	9	(
FIELD	8491:19	8491:19	9	bps
LEAF_NODE	8491:19	8491:19	10	bps
LEAF_NODE	8491:23	8491:23	9	%
FIELD	8491:25	8491:25	9	8
LEAF_NODE	8491:25	8491:25	10	8
LEAF_NODE	8491:26	8491:26	9	)
EQ_OPERATOR	8491:28	8491:28	9	==
LEAF_NODE	8491:28	8491:28	10	==
FIELD	8491:31	8491:31	9	0
LEAF_NODE	8491:31	8491:31	10	0
LEAF_NODE	8491:32	8491:32	7	)
STATEMENTS	8492:16	8506:2	7	
LEAF_NODE	8492:16	8492:16	8	{
STATEMENTS	8493:16	8493:16	8	
ITERATION	8493:16	8494:18	9	
KEYWORD	8493:16	8493:16	10	for
LEAF_NODE	8493:16	8493:16	11	for
LEAF_NODE	8493:20	8493:20	10	(
FOR_INIT	8493:21	8493:28	10	col = 0 ;
EXPR	8493:21	8493:21	11	col = 0
ASSIGN	8493:21	8493:27	12	col = 0
LVAL	8493:21	8493:21	13	col
FIELD	8493:21	8493:21	14	col
LEAF_NODE	8493:21	8493:21	15	col
ASSIGN_OP	8493:25	8493:25	13	=
LEAF_NODE	8493:25	8493:25	14	=
RVAL	8493:27	8493:27	13	0
FIELD	8493:27	8493:27	14	0
LEAF_NODE	8493:27	8493:27	15	0
LEAF_NODE	8493:28	8493:28	11	;
CONDITION	8493:30	8493:30	10	col < width
EXPR	8493:30	8493:36	11	col < width
FIELD	8493:30	8493:30	12	col
LEAF_NODE	8493:30	8493:30	13	col
REL_OPERATOR	8493:34	8493:34	12	<
LEAF_NODE	8493:34	8493:34	13	<
FIELD	8493:36	8493:36	12	width
LEAF_NODE	8493:36	8493:36	13	width
LEAF_NODE	8493:41	8493:41	10	;
FOR_EXPR	8493:43	8493:43	10	col ++
EXPR	8493:43	8493:43	11	col ++
FIELD	8493:43	8493:46	12	col ++
LEAF_NODE	8493:43	8493:43	13	col
LEAF_NODE	8493:46	8493:46	13	++
LEAF_NODE	8493:48	8493:48	10	)
STATEMENTS	8494:18	8505:4	10	
LEAF_NODE	8494:18	8494:18	11	{
STATEMENTS	8495:4	8499:18	11	
EXPR_STATEMENT	8495:4	8495:67	12	src_offset = ( ( length - 1 ) * rowsize ) + ( col * bytes_per_pixel ) ;
EXPR	8495:4	8495:4	13	src_offset = ( ( length - 1 ) * rowsize ) + ( col * bytes_per_pixel )
ASSIGN	8495:4	8495:17	14	src_offset = ( ( length - 1 ) * rowsize ) + ( col * bytes_per_pixel )
LVAL	8495:4	8495:4	15	src_offset
FIELD	8495:4	8495:4	16	src_offset
LEAF_NODE	8495:4	8495:4	17	src_offset
ASSIGN_OP	8495:15	8495:15	15	=
LEAF_NODE	8495:15	8495:15	16	=
RVAL	8495:17	8495:66	15	( ( length - 1 ) * rowsize ) + ( col * bytes_per_pixel )
LEAF_NODE	8495:17	8495:17	16	(
LEAF_NODE	8495:18	8495:18	16	(
FIELD	8495:19	8495:19	16	length
LEAF_NODE	8495:19	8495:19	17	length
LEAF_NODE	8495:26	8495:26	16	-
FIELD	8495:28	8495:28	16	1
LEAF_NODE	8495:28	8495:28	17	1
LEAF_NODE	8495:29	8495:29	16	)
LEAF_NODE	8495:31	8495:31	16	*
FIELD	8495:33	8495:33	16	rowsize
LEAF_NODE	8495:33	8495:33	17	rowsize
LEAF_NODE	8495:40	8495:40	16	)
LEAF_NODE	8495:42	8495:42	16	+
LEAF_NODE	8495:44	8495:44	16	(
FIELD	8495:45	8495:45	16	col
LEAF_NODE	8495:45	8495:45	17	col
LEAF_NODE	8495:49	8495:49	16	*
FIELD	8495:51	8495:51	16	bytes_per_pixel
LEAF_NODE	8495:51	8495:51	17	bytes_per_pixel
LEAF_NODE	8495:66	8495:66	16	)
LEAF_NODE	8495:67	8495:67	13	;
EXPR_STATEMENT	8496:18	8496:44	12	dst_offset = col * colsize ;
EXPR	8496:18	8496:18	13	dst_offset = col * colsize
ASSIGN	8496:18	8496:31	14	dst_offset = col * colsize
LVAL	8496:18	8496:18	15	dst_offset
FIELD	8496:18	8496:18	16	dst_offset
LEAF_NODE	8496:18	8496:18	17	dst_offset
ASSIGN_OP	8496:29	8496:29	15	=
LEAF_NODE	8496:29	8496:29	16	=
RVAL	8496:31	8496:37	15	col * colsize
FIELD	8496:31	8496:31	16	col
LEAF_NODE	8496:31	8496:31	17	col
LEAF_NODE	8496:35	8496:35	16	*
FIELD	8496:37	8496:37	16	colsize
LEAF_NODE	8496:37	8496:37	17	colsize
LEAF_NODE	8496:44	8496:44	13	;
EXPR_STATEMENT	8497:4	8497:28	12	src = ibuff + src_offset ;
EXPR	8497:4	8497:4	13	src = ibuff + src_offset
ASSIGN	8497:4	8497:10	14	src = ibuff + src_offset
LVAL	8497:4	8497:4	15	src
FIELD	8497:4	8497:4	16	src
LEAF_NODE	8497:4	8497:4	17	src
ASSIGN_OP	8497:8	8497:8	15	=
LEAF_NODE	8497:8	8497:8	16	=
RVAL	8497:10	8497:18	15	ibuff + src_offset
FIELD	8497:10	8497:10	16	ibuff
LEAF_NODE	8497:10	8497:10	17	ibuff
LEAF_NODE	8497:16	8497:16	16	+
FIELD	8497:18	8497:18	16	src_offset
LEAF_NODE	8497:18	8497:18	17	src_offset
LEAF_NODE	8497:28	8497:28	13	;
EXPR_STATEMENT	8498:4	8498:28	12	dst = rbuff + dst_offset ;
EXPR	8498:4	8498:4	13	dst = rbuff + dst_offset
ASSIGN	8498:4	8498:10	14	dst = rbuff + dst_offset
LVAL	8498:4	8498:4	15	dst
FIELD	8498:4	8498:4	16	dst
LEAF_NODE	8498:4	8498:4	17	dst
ASSIGN_OP	8498:8	8498:8	15	=
LEAF_NODE	8498:8	8498:8	16	=
RVAL	8498:10	8498:18	15	rbuff + dst_offset
FIELD	8498:10	8498:10	16	rbuff
LEAF_NODE	8498:10	8498:10	17	rbuff
LEAF_NODE	8498:16	8498:16	16	+
FIELD	8498:18	8498:18	16	dst_offset
LEAF_NODE	8498:18	8498:18	17	dst_offset
LEAF_NODE	8498:28	8498:28	13	;
ITERATION	8499:18	8500:20	12	
KEYWORD	8499:18	8499:18	13	for
LEAF_NODE	8499:18	8499:18	14	for
LEAF_NODE	8499:22	8499:22	13	(
FOR_INIT	8499:23	8499:35	13	row = length ;
EXPR	8499:23	8499:23	14	row = length
ASSIGN	8499:23	8499:29	15	row = length
LVAL	8499:23	8499:23	16	row
FIELD	8499:23	8499:23	17	row
LEAF_NODE	8499:23	8499:23	18	row
ASSIGN_OP	8499:27	8499:27	16	=
LEAF_NODE	8499:27	8499:27	17	=
RVAL	8499:29	8499:29	16	length
FIELD	8499:29	8499:29	17	length
LEAF_NODE	8499:29	8499:29	18	length
LEAF_NODE	8499:35	8499:35	14	;
CONDITION	8499:37	8499:37	13	row > 0
EXPR	8499:37	8499:43	14	row > 0
FIELD	8499:37	8499:37	15	row
LEAF_NODE	8499:37	8499:37	16	row
REL_OPERATOR	8499:41	8499:41	15	>
LEAF_NODE	8499:41	8499:41	16	>
FIELD	8499:43	8499:43	15	0
LEAF_NODE	8499:43	8499:43	16	0
LEAF_NODE	8499:44	8499:44	13	;
FOR_EXPR	8499:46	8499:46	13	row --
EXPR	8499:46	8499:46	14	row --
FIELD	8499:46	8499:49	15	row --
LEAF_NODE	8499:46	8499:46	16	row
LEAF_NODE	8499:49	8499:49	16	--
LEAF_NODE	8499:51	8499:51	13	)
STATEMENTS	8500:20	8504:20	13	
LEAF_NODE	8500:20	8500:20	14	{
STATEMENTS	8501:20	8503:6	14	
ITERATION	8501:20	8502:22	15	
KEYWORD	8501:20	8501:20	16	for
LEAF_NODE	8501:20	8501:20	17	for
LEAF_NODE	8501:24	8501:24	16	(
FOR_INIT	8501:25	8501:30	16	i = 0 ;
EXPR	8501:25	8501:25	17	i = 0
ASSIGN	8501:25	8501:29	18	i = 0
LVAL	8501:25	8501:25	19	i
FIELD	8501:25	8501:25	20	i
LEAF_NODE	8501:25	8501:25	21	i
ASSIGN_OP	8501:27	8501:27	19	=
LEAF_NODE	8501:27	8501:27	20	=
RVAL	8501:29	8501:29	19	0
FIELD	8501:29	8501:29	20	0
LEAF_NODE	8501:29	8501:29	21	0
LEAF_NODE	8501:30	8501:30	17	;
CONDITION	8501:32	8501:32	16	i < bytes_per_pixel
EXPR	8501:32	8501:36	17	i < bytes_per_pixel
FIELD	8501:32	8501:32	18	i
LEAF_NODE	8501:32	8501:32	19	i
REL_OPERATOR	8501:34	8501:34	18	<
LEAF_NODE	8501:34	8501:34	19	<
FIELD	8501:36	8501:36	18	bytes_per_pixel
LEAF_NODE	8501:36	8501:36	19	bytes_per_pixel
LEAF_NODE	8501:51	8501:51	16	;
FOR_EXPR	8501:53	8501:53	16	i ++
EXPR	8501:53	8501:53	17	i ++
FIELD	8501:53	8501:54	18	i ++
LEAF_NODE	8501:53	8501:53	19	i
LEAF_NODE	8501:54	8501:54	19	++
LEAF_NODE	8501:56	8501:56	16	)
STATEMENTS	8502:22	8502:22	16	
EXPR_STATEMENT	8502:22	8502:41	17	* dst ++ = * ( src + i ) ;
EXPR	8502:22	8502:22	18	* dst ++ = * ( src + i )
ASSIGN	8502:22	8502:31	19	* dst ++ = * ( src + i )
LVAL	8502:22	8502:22	20	* dst ++
UNARY_EXPR	8502:22	8502:23	21	* dst ++
UNARY_OPERATOR	8502:22	8502:22	22	*
LEAF_NODE	8502:22	8502:22	23	*
FIELD	8502:23	8502:26	22	dst ++
LEAF_NODE	8502:23	8502:23	23	dst
LEAF_NODE	8502:26	8502:26	23	++
ASSIGN_OP	8502:29	8502:29	20	=
LEAF_NODE	8502:29	8502:29	21	=
RVAL	8502:31	8502:31	20	* ( src + i )
UNARY_EXPR	8502:31	8502:40	21	* ( src + i )
UNARY_OPERATOR	8502:31	8502:31	22	*
LEAF_NODE	8502:31	8502:31	23	*
LEAF_NODE	8502:32	8502:32	22	(
FIELD	8502:33	8502:33	22	src
LEAF_NODE	8502:33	8502:33	23	src
LEAF_NODE	8502:37	8502:37	22	+
FIELD	8502:39	8502:39	22	i
LEAF_NODE	8502:39	8502:39	23	i
LEAF_NODE	8502:40	8502:40	22	)
LEAF_NODE	8502:41	8502:41	18	;
EXPR_STATEMENT	8503:6	8503:20	15	src -= rowsize ;
EXPR	8503:6	8503:6	16	src -= rowsize
ASSIGN	8503:6	8503:13	17	src -= rowsize
LVAL	8503:6	8503:6	18	src
FIELD	8503:6	8503:6	19	src
LEAF_NODE	8503:6	8503:6	20	src
ASSIGN_OP	8503:10	8503:10	18	-=
LEAF_NODE	8503:10	8503:10	19	-=
RVAL	8503:13	8503:13	18	rowsize
FIELD	8503:13	8503:13	19	rowsize
LEAF_NODE	8503:13	8503:13	20	rowsize
LEAF_NODE	8503:20	8503:20	16	;
LEAF_NODE	8504:20	8504:20	14	}
LEAF_NODE	8505:4	8505:4	11	}
LEAF_NODE	8506:2	8506:2	8	}
SELECTION	8507:14	8508:16	6	
KEYWORD	8507:14	8507:14	7	else
LEAF_NODE	8507:14	8507:14	8	else
STATEMENTS	8508:16	8555:2	7	
LEAF_NODE	8508:16	8508:16	8	{
STATEMENTS	8509:16	8509:16	8	
ITERATION	8509:16	8510:18	9	
KEYWORD	8509:16	8509:16	10	for
LEAF_NODE	8509:16	8509:16	11	for
LEAF_NODE	8509:20	8509:20	10	(
FOR_INIT	8509:21	8509:28	10	col = 0 ;
EXPR	8509:21	8509:21	11	col = 0
ASSIGN	8509:21	8509:27	12	col = 0
LVAL	8509:21	8509:21	13	col
FIELD	8509:21	8509:21	14	col
LEAF_NODE	8509:21	8509:21	15	col
ASSIGN_OP	8509:25	8509:25	13	=
LEAF_NODE	8509:25	8509:25	14	=
RVAL	8509:27	8509:27	13	0
FIELD	8509:27	8509:27	14	0
LEAF_NODE	8509:27	8509:27	15	0
LEAF_NODE	8509:28	8509:28	11	;
CONDITION	8509:30	8509:30	10	col < width
EXPR	8509:30	8509:36	11	col < width
FIELD	8509:30	8509:30	12	col
LEAF_NODE	8509:30	8509:30	13	col
REL_OPERATOR	8509:34	8509:34	12	<
LEAF_NODE	8509:34	8509:34	13	<
FIELD	8509:36	8509:36	12	width
LEAF_NODE	8509:36	8509:36	13	width
LEAF_NODE	8509:41	8509:41	10	;
FOR_EXPR	8509:43	8509:43	10	col ++
EXPR	8509:43	8509:43	11	col ++
FIELD	8509:43	8509:46	12	col ++
LEAF_NODE	8509:43	8509:43	13	col
LEAF_NODE	8509:46	8509:46	13	++
LEAF_NODE	8509:48	8509:48	10	)
STATEMENTS	8510:18	8554:4	10	
LEAF_NODE	8510:18	8510:18	11	{
STATEMENTS	8511:4	8515:18	11	
EXPR_STATEMENT	8511:4	8511:39	12	src_offset = ( length - 1 ) * rowsize ;
EXPR	8511:4	8511:4	13	src_offset = ( length - 1 ) * rowsize
ASSIGN	8511:4	8511:17	14	src_offset = ( length - 1 ) * rowsize
LVAL	8511:4	8511:4	15	src_offset
FIELD	8511:4	8511:4	16	src_offset
LEAF_NODE	8511:4	8511:4	17	src_offset
ASSIGN_OP	8511:15	8511:15	15	=
LEAF_NODE	8511:15	8511:15	16	=
RVAL	8511:17	8511:32	15	( length - 1 ) * rowsize
LEAF_NODE	8511:17	8511:17	16	(
FIELD	8511:18	8511:18	16	length
LEAF_NODE	8511:18	8511:18	17	length
LEAF_NODE	8511:25	8511:25	16	-
FIELD	8511:27	8511:27	16	1
LEAF_NODE	8511:27	8511:27	17	1
LEAF_NODE	8511:28	8511:28	16	)
LEAF_NODE	8511:30	8511:30	16	*
FIELD	8511:32	8511:32	16	rowsize
LEAF_NODE	8511:32	8511:32	17	rowsize
LEAF_NODE	8511:39	8511:39	13	;
EXPR_STATEMENT	8512:18	8512:44	12	dst_offset = col * colsize ;
EXPR	8512:18	8512:18	13	dst_offset = col * colsize
ASSIGN	8512:18	8512:31	14	dst_offset = col * colsize
LVAL	8512:18	8512:18	15	dst_offset
FIELD	8512:18	8512:18	16	dst_offset
LEAF_NODE	8512:18	8512:18	17	dst_offset
ASSIGN_OP	8512:29	8512:29	15	=
LEAF_NODE	8512:29	8512:29	16	=
RVAL	8512:31	8512:37	15	col * colsize
FIELD	8512:31	8512:31	16	col
LEAF_NODE	8512:31	8512:31	17	col
LEAF_NODE	8512:35	8512:35	16	*
FIELD	8512:37	8512:37	16	colsize
LEAF_NODE	8512:37	8512:37	17	colsize
LEAF_NODE	8512:44	8512:44	13	;
EXPR_STATEMENT	8513:4	8513:28	12	src = ibuff + src_offset ;
EXPR	8513:4	8513:4	13	src = ibuff + src_offset
ASSIGN	8513:4	8513:10	14	src = ibuff + src_offset
LVAL	8513:4	8513:4	15	src
FIELD	8513:4	8513:4	16	src
LEAF_NODE	8513:4	8513:4	17	src
ASSIGN_OP	8513:8	8513:8	15	=
LEAF_NODE	8513:8	8513:8	16	=
RVAL	8513:10	8513:18	15	ibuff + src_offset
FIELD	8513:10	8513:10	16	ibuff
LEAF_NODE	8513:10	8513:10	17	ibuff
LEAF_NODE	8513:16	8513:16	16	+
FIELD	8513:18	8513:18	16	src_offset
LEAF_NODE	8513:18	8513:18	17	src_offset
LEAF_NODE	8513:28	8513:28	13	;
EXPR_STATEMENT	8514:4	8514:28	12	dst = rbuff + dst_offset ;
EXPR	8514:4	8514:4	13	dst = rbuff + dst_offset
ASSIGN	8514:4	8514:10	14	dst = rbuff + dst_offset
LVAL	8514:4	8514:4	15	dst
FIELD	8514:4	8514:4	16	dst
LEAF_NODE	8514:4	8514:4	17	dst
ASSIGN_OP	8514:8	8514:8	15	=
LEAF_NODE	8514:8	8514:8	16	=
RVAL	8514:10	8514:18	15	rbuff + dst_offset
FIELD	8514:10	8514:10	16	rbuff
LEAF_NODE	8514:10	8514:10	17	rbuff
LEAF_NODE	8514:16	8514:16	16	+
FIELD	8514:18	8514:18	16	dst_offset
LEAF_NODE	8514:18	8514:18	17	dst_offset
LEAF_NODE	8514:28	8514:28	13	;
SELECTION	8515:18	8516:20	12	
KEYWORD	8515:18	8515:18	13	switch
LEAF_NODE	8515:18	8515:18	14	switch
LEAF_NODE	8515:25	8515:25	13	(
CONDITION	8515:26	8515:26	13	shift_width
EXPR	8515:26	8515:26	14	shift_width
FIELD	8515:26	8515:26	15	shift_width
LEAF_NODE	8515:26	8515:26	16	shift_width
LEAF_NODE	8515:37	8515:37	13	)
STATEMENTS	8516:20	8553:6	13	
LEAF_NODE	8516:20	8516:20	14	{
STATEMENTS	8517:20	8552:29	14	
LABEL	8517:20	8517:26	15	case 1 :
LEAF_NODE	8517:20	8517:20	16	case
LEAF_NODE	8517:25	8517:25	16	1
LEAF_NODE	8517:26	8517:26	16	:
SELECTION	8517:28	8518:9	15	
KEYWORD	8517:28	8517:28	16	if
LEAF_NODE	8517:28	8517:28	17	if
LEAF_NODE	8517:31	8517:31	16	(
CONDITION	8517:32	8517:32	16	bps == 1
EXPR	8517:32	8517:39	17	bps == 1
FIELD	8517:32	8517:32	18	bps
LEAF_NODE	8517:32	8517:32	19	bps
EQ_OPERATOR	8517:36	8517:36	18	==
LEAF_NODE	8517:36	8517:36	19	==
FIELD	8517:39	8517:39	18	1
LEAF_NODE	8517:39	8517:39	19	1
LEAF_NODE	8517:40	8517:40	16	)
STATEMENTS	8518:9	8526:30	16	
LEAF_NODE	8518:9	8518:9	17	{
STATEMENTS	8519:30	8525:30	17	
SELECTION	8519:30	8521:32	18	
KEYWORD	8519:30	8519:30	19	if
LEAF_NODE	8519:30	8519:30	20	if
LEAF_NODE	8519:33	8519:33	19	(
CONDITION	8519:34	8519:34	19	rotateContigSamples8bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8519:34	8519:34	20	rotateContigSamples8bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8519:34	8520:46	21	rotateContigSamples8bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8519:34	8519:34	22	rotateContigSamples8bits
LEAF_NODE	8519:34	8519:34	23	rotateContigSamples8bits
LEAF_NODE	8519:58	8519:58	22	(
ARGUMENT	8519:59	8519:59	22	rotation
FIELD	8519:59	8519:59	23	rotation
LEAF_NODE	8519:59	8519:59	24	rotation
LEAF_NODE	8519:67	8519:67	22	,
ARGUMENT	8519:69	8519:69	22	spp
FIELD	8519:69	8519:69	23	spp
LEAF_NODE	8519:69	8519:69	24	spp
LEAF_NODE	8519:72	8519:72	22	,
ARGUMENT	8519:74	8519:74	22	bps
FIELD	8519:74	8519:74	23	bps
LEAF_NODE	8519:74	8519:74	24	bps
LEAF_NODE	8519:77	8519:77	22	,
ARGUMENT	8519:79	8519:79	22	width
FIELD	8519:79	8519:79	23	width
LEAF_NODE	8519:79	8519:79	24	width
LEAF_NODE	8519:84	8519:84	22	,
ARGUMENT	8520:25	8520:25	22	length
FIELD	8520:25	8520:25	23	length
LEAF_NODE	8520:25	8520:25	24	length
LEAF_NODE	8520:31	8520:31	22	,
ARGUMENT	8520:33	8520:33	22	col
FIELD	8520:33	8520:33	23	col
LEAF_NODE	8520:33	8520:33	24	col
LEAF_NODE	8520:36	8520:36	22	,
ARGUMENT	8520:38	8520:38	22	src
FIELD	8520:38	8520:38	23	src
LEAF_NODE	8520:38	8520:38	24	src
LEAF_NODE	8520:41	8520:41	22	,
ARGUMENT	8520:43	8520:43	22	dst
FIELD	8520:43	8520:43	23	dst
LEAF_NODE	8520:43	8520:43	24	dst
LEAF_NODE	8520:46	8520:46	22	)
LEAF_NODE	8520:47	8520:47	19	)
STATEMENTS	8521:32	8524:32	19	
LEAF_NODE	8521:32	8521:32	20	{
STATEMENTS	8522:18	8523:32	20	
EXPR_STATEMENT	8522:18	8522:34	21	_TIFFfree ( rbuff ) ;
EXPR	8522:18	8522:18	22	_TIFFfree ( rbuff )
FUNCTION_CALL	8522:18	8522:33	23	_TIFFfree ( rbuff )
CALLEE	8522:18	8522:18	24	_TIFFfree
LEAF_NODE	8522:18	8522:18	25	_TIFFfree
LEAF_NODE	8522:27	8522:27	24	(
ARGUMENT	8522:28	8522:28	24	rbuff
FIELD	8522:28	8522:28	25	rbuff
LEAF_NODE	8522:28	8522:28	26	rbuff
LEAF_NODE	8522:33	8522:33	24	)
LEAF_NODE	8522:34	8522:34	22	;
JUMP_STATEMENT	8523:32	8523:43	21	return ( - 1 ) ;
KEYWORD	8523:32	8523:32	22	return
LEAF_NODE	8523:32	8523:32	23	return
DESTINATION	8523:39	8523:39	22	( - 1 )
EXPR	8523:39	8523:42	23	( - 1 )
LEAF_NODE	8523:39	8523:39	24	(
UNARY_EXPR	8523:40	8523:41	24	- 1
UNARY_OPERATOR	8523:40	8523:40	25	-
LEAF_NODE	8523:40	8523:40	26	-
FIELD	8523:41	8523:41	25	1
LEAF_NODE	8523:41	8523:41	26	1
LEAF_NODE	8523:42	8523:42	24	)
LEAF_NODE	8523:43	8523:43	22	;
LEAF_NODE	8524:32	8524:32	20	}
JUMP_STATEMENT	8525:30	8525:35	18	break DESTINATION ;
KEYWORD	8525:30	8525:30	19	break
LEAF_NODE	8525:30	8525:30	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	8525:35	8525:35	19	;
LEAF_NODE	8526:30	8526:30	17	}
SELECTION	8527:28	8529:30	15	
KEYWORD	8527:28	8527:28	16	if
LEAF_NODE	8527:28	8527:28	17	if
LEAF_NODE	8527:31	8527:31	16	(
CONDITION	8527:32	8527:32	16	rotateContigSamples16bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8527:32	8527:32	17	rotateContigSamples16bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8527:32	8528:46	18	rotateContigSamples16bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8527:32	8527:32	19	rotateContigSamples16bits
LEAF_NODE	8527:32	8527:32	20	rotateContigSamples16bits
LEAF_NODE	8527:57	8527:57	19	(
ARGUMENT	8527:58	8527:58	19	rotation
FIELD	8527:58	8527:58	20	rotation
LEAF_NODE	8527:58	8527:58	21	rotation
LEAF_NODE	8527:66	8527:66	19	,
ARGUMENT	8527:68	8527:68	19	spp
FIELD	8527:68	8527:68	20	spp
LEAF_NODE	8527:68	8527:68	21	spp
LEAF_NODE	8527:71	8527:71	19	,
ARGUMENT	8527:73	8527:73	19	bps
FIELD	8527:73	8527:73	20	bps
LEAF_NODE	8527:73	8527:73	21	bps
LEAF_NODE	8527:76	8527:76	19	,
ARGUMENT	8527:78	8527:78	19	width
FIELD	8527:78	8527:78	20	width
LEAF_NODE	8527:78	8527:78	21	width
LEAF_NODE	8527:83	8527:83	19	,
ARGUMENT	8528:25	8528:25	19	length
FIELD	8528:25	8528:25	20	length
LEAF_NODE	8528:25	8528:25	21	length
LEAF_NODE	8528:31	8528:31	19	,
ARGUMENT	8528:33	8528:33	19	col
FIELD	8528:33	8528:33	20	col
LEAF_NODE	8528:33	8528:33	21	col
LEAF_NODE	8528:36	8528:36	19	,
ARGUMENT	8528:38	8528:38	19	src
FIELD	8528:38	8528:38	20	src
LEAF_NODE	8528:38	8528:38	21	src
LEAF_NODE	8528:41	8528:41	19	,
ARGUMENT	8528:43	8528:43	19	dst
FIELD	8528:43	8528:43	20	dst
LEAF_NODE	8528:43	8528:43	21	dst
LEAF_NODE	8528:46	8528:46	19	)
LEAF_NODE	8528:47	8528:47	16	)
STATEMENTS	8529:30	8532:16	16	
LEAF_NODE	8529:30	8529:30	17	{
STATEMENTS	8530:23	8531:30	17	
EXPR_STATEMENT	8530:23	8530:39	18	_TIFFfree ( rbuff ) ;
EXPR	8530:23	8530:23	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8530:23	8530:38	20	_TIFFfree ( rbuff )
CALLEE	8530:23	8530:23	21	_TIFFfree
LEAF_NODE	8530:23	8530:23	22	_TIFFfree
LEAF_NODE	8530:32	8530:32	21	(
ARGUMENT	8530:33	8530:33	21	rbuff
FIELD	8530:33	8530:33	22	rbuff
LEAF_NODE	8530:33	8530:33	23	rbuff
LEAF_NODE	8530:38	8530:38	21	)
LEAF_NODE	8530:39	8530:39	19	;
JUMP_STATEMENT	8531:30	8531:41	18	return ( - 1 ) ;
KEYWORD	8531:30	8531:30	19	return
LEAF_NODE	8531:30	8531:30	20	return
DESTINATION	8531:37	8531:37	19	( - 1 )
EXPR	8531:37	8531:40	20	( - 1 )
LEAF_NODE	8531:37	8531:37	21	(
UNARY_EXPR	8531:38	8531:39	21	- 1
UNARY_OPERATOR	8531:38	8531:38	22	-
LEAF_NODE	8531:38	8531:38	23	-
FIELD	8531:39	8531:39	22	1
LEAF_NODE	8531:39	8531:39	23	1
LEAF_NODE	8531:40	8531:40	21	)
LEAF_NODE	8531:41	8531:41	19	;
LEAF_NODE	8532:16	8532:16	17	}
JUMP_STATEMENT	8533:14	8533:19	15	break DESTINATION ;
KEYWORD	8533:14	8533:14	16	break
LEAF_NODE	8533:14	8533:14	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8533:19	8533:19	16	;
LABEL	8534:20	8534:26	15	case 2 :
LEAF_NODE	8534:20	8534:20	16	case
LEAF_NODE	8534:25	8534:25	16	2
LEAF_NODE	8534:26	8534:26	16	:
SELECTION	8534:28	8536:30	15	
KEYWORD	8534:28	8534:28	16	if
LEAF_NODE	8534:28	8534:28	17	if
LEAF_NODE	8534:31	8534:31	16	(
CONDITION	8534:32	8534:32	16	rotateContigSamples24bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8534:32	8534:32	17	rotateContigSamples24bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8534:32	8535:44	18	rotateContigSamples24bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8534:32	8534:32	19	rotateContigSamples24bits
LEAF_NODE	8534:32	8534:32	20	rotateContigSamples24bits
LEAF_NODE	8534:57	8534:57	19	(
ARGUMENT	8534:58	8534:58	19	rotation
FIELD	8534:58	8534:58	20	rotation
LEAF_NODE	8534:58	8534:58	21	rotation
LEAF_NODE	8534:66	8534:66	19	,
ARGUMENT	8534:68	8534:68	19	spp
FIELD	8534:68	8534:68	20	spp
LEAF_NODE	8534:68	8534:68	21	spp
LEAF_NODE	8534:71	8534:71	19	,
ARGUMENT	8534:73	8534:73	19	bps
FIELD	8534:73	8534:73	20	bps
LEAF_NODE	8534:73	8534:73	21	bps
LEAF_NODE	8534:76	8534:76	19	,
ARGUMENT	8534:78	8534:78	19	width
FIELD	8534:78	8534:78	20	width
LEAF_NODE	8534:78	8534:78	21	width
LEAF_NODE	8534:83	8534:83	19	,
ARGUMENT	8535:23	8535:23	19	length
FIELD	8535:23	8535:23	20	length
LEAF_NODE	8535:23	8535:23	21	length
LEAF_NODE	8535:29	8535:29	19	,
ARGUMENT	8535:31	8535:31	19	col
FIELD	8535:31	8535:31	20	col
LEAF_NODE	8535:31	8535:31	21	col
LEAF_NODE	8535:34	8535:34	19	,
ARGUMENT	8535:36	8535:36	19	src
FIELD	8535:36	8535:36	20	src
LEAF_NODE	8535:36	8535:36	21	src
LEAF_NODE	8535:39	8535:39	19	,
ARGUMENT	8535:41	8535:41	19	dst
FIELD	8535:41	8535:41	20	dst
LEAF_NODE	8535:41	8535:41	21	dst
LEAF_NODE	8535:44	8535:44	19	)
LEAF_NODE	8535:45	8535:45	16	)
STATEMENTS	8536:30	8539:30	16	
LEAF_NODE	8536:30	8536:30	17	{
STATEMENTS	8537:16	8538:30	17	
EXPR_STATEMENT	8537:16	8537:32	18	_TIFFfree ( rbuff ) ;
EXPR	8537:16	8537:16	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8537:16	8537:31	20	_TIFFfree ( rbuff )
CALLEE	8537:16	8537:16	21	_TIFFfree
LEAF_NODE	8537:16	8537:16	22	_TIFFfree
LEAF_NODE	8537:25	8537:25	21	(
ARGUMENT	8537:26	8537:26	21	rbuff
FIELD	8537:26	8537:26	22	rbuff
LEAF_NODE	8537:26	8537:26	23	rbuff
LEAF_NODE	8537:31	8537:31	21	)
LEAF_NODE	8537:32	8537:32	19	;
JUMP_STATEMENT	8538:30	8538:41	18	return ( - 1 ) ;
KEYWORD	8538:30	8538:30	19	return
LEAF_NODE	8538:30	8538:30	20	return
DESTINATION	8538:37	8538:37	19	( - 1 )
EXPR	8538:37	8538:40	20	( - 1 )
LEAF_NODE	8538:37	8538:37	21	(
UNARY_EXPR	8538:38	8538:39	21	- 1
UNARY_OPERATOR	8538:38	8538:38	22	-
LEAF_NODE	8538:38	8538:38	23	-
FIELD	8538:39	8538:39	22	1
LEAF_NODE	8538:39	8538:39	23	1
LEAF_NODE	8538:40	8538:40	21	)
LEAF_NODE	8538:41	8538:41	19	;
LEAF_NODE	8539:30	8539:30	17	}
JUMP_STATEMENT	8540:29	8540:34	15	break DESTINATION ;
KEYWORD	8540:29	8540:29	16	break
LEAF_NODE	8540:29	8540:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8540:34	8540:34	16	;
LABEL	8541:20	8541:26	15	case 3 :
LEAF_NODE	8541:20	8541:20	16	case
LEAF_NODE	8541:25	8541:25	16	3
LEAF_NODE	8541:26	8541:26	16	:
LABEL	8542:20	8542:26	15	case 4 :
LEAF_NODE	8542:20	8542:20	16	case
LEAF_NODE	8542:25	8542:25	16	4
LEAF_NODE	8542:26	8542:26	16	:
LABEL	8543:20	8543:26	15	case 5 :
LEAF_NODE	8543:20	8543:20	16	case
LEAF_NODE	8543:25	8543:25	16	5
LEAF_NODE	8543:26	8543:26	16	:
SELECTION	8543:28	8545:30	15	
KEYWORD	8543:28	8543:28	16	if
LEAF_NODE	8543:28	8543:28	17	if
LEAF_NODE	8543:31	8543:31	16	(
CONDITION	8543:32	8543:32	16	rotateContigSamples32bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8543:32	8543:32	17	rotateContigSamples32bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8543:32	8544:44	18	rotateContigSamples32bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8543:32	8543:32	19	rotateContigSamples32bits
LEAF_NODE	8543:32	8543:32	20	rotateContigSamples32bits
LEAF_NODE	8543:57	8543:57	19	(
ARGUMENT	8543:58	8543:58	19	rotation
FIELD	8543:58	8543:58	20	rotation
LEAF_NODE	8543:58	8543:58	21	rotation
LEAF_NODE	8543:66	8543:66	19	,
ARGUMENT	8543:68	8543:68	19	spp
FIELD	8543:68	8543:68	20	spp
LEAF_NODE	8543:68	8543:68	21	spp
LEAF_NODE	8543:71	8543:71	19	,
ARGUMENT	8543:73	8543:73	19	bps
FIELD	8543:73	8543:73	20	bps
LEAF_NODE	8543:73	8543:73	21	bps
LEAF_NODE	8543:76	8543:76	19	,
ARGUMENT	8543:78	8543:78	19	width
FIELD	8543:78	8543:78	20	width
LEAF_NODE	8543:78	8543:78	21	width
LEAF_NODE	8543:83	8543:83	19	,
ARGUMENT	8544:23	8544:23	19	length
FIELD	8544:23	8544:23	20	length
LEAF_NODE	8544:23	8544:23	21	length
LEAF_NODE	8544:29	8544:29	19	,
ARGUMENT	8544:31	8544:31	19	col
FIELD	8544:31	8544:31	20	col
LEAF_NODE	8544:31	8544:31	21	col
LEAF_NODE	8544:34	8544:34	19	,
ARGUMENT	8544:36	8544:36	19	src
FIELD	8544:36	8544:36	20	src
LEAF_NODE	8544:36	8544:36	21	src
LEAF_NODE	8544:39	8544:39	19	,
ARGUMENT	8544:41	8544:41	19	dst
FIELD	8544:41	8544:41	20	dst
LEAF_NODE	8544:41	8544:41	21	dst
LEAF_NODE	8544:44	8544:44	19	)
LEAF_NODE	8544:45	8544:45	16	)
STATEMENTS	8545:30	8548:30	16	
LEAF_NODE	8545:30	8545:30	17	{
STATEMENTS	8546:16	8547:30	17	
EXPR_STATEMENT	8546:16	8546:32	18	_TIFFfree ( rbuff ) ;
EXPR	8546:16	8546:16	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8546:16	8546:31	20	_TIFFfree ( rbuff )
CALLEE	8546:16	8546:16	21	_TIFFfree
LEAF_NODE	8546:16	8546:16	22	_TIFFfree
LEAF_NODE	8546:25	8546:25	21	(
ARGUMENT	8546:26	8546:26	21	rbuff
FIELD	8546:26	8546:26	22	rbuff
LEAF_NODE	8546:26	8546:26	23	rbuff
LEAF_NODE	8546:31	8546:31	21	)
LEAF_NODE	8546:32	8546:32	19	;
JUMP_STATEMENT	8547:30	8547:41	18	return ( - 1 ) ;
KEYWORD	8547:30	8547:30	19	return
LEAF_NODE	8547:30	8547:30	20	return
DESTINATION	8547:37	8547:37	19	( - 1 )
EXPR	8547:37	8547:40	20	( - 1 )
LEAF_NODE	8547:37	8547:37	21	(
UNARY_EXPR	8547:38	8547:39	21	- 1
UNARY_OPERATOR	8547:38	8547:38	22	-
LEAF_NODE	8547:38	8547:38	23	-
FIELD	8547:39	8547:39	22	1
LEAF_NODE	8547:39	8547:39	23	1
LEAF_NODE	8547:40	8547:40	21	)
LEAF_NODE	8547:41	8547:41	19	;
LEAF_NODE	8548:30	8548:30	17	}
JUMP_STATEMENT	8549:29	8549:34	15	break DESTINATION ;
KEYWORD	8549:29	8549:29	16	break
LEAF_NODE	8549:29	8549:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8549:34	8549:34	16	;
LABEL	8550:20	8550:27	15	default :
LEAF_NODE	8550:20	8550:20	16	default
LEAF_NODE	8550:27	8550:27	16	:
EXPR_STATEMENT	8550:29	8550:85	15	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps ) ;
EXPR	8550:29	8550:29	16	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	8550:29	8550:84	17	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps )
CALLEE	8550:29	8550:29	18	TIFFError
LEAF_NODE	8550:29	8550:29	19	TIFFError
LEAF_NODE	8550:38	8550:38	18	(
ARGUMENT	8550:39	8550:39	18	"rotateImage"
FIELD	8550:39	8550:39	19	"rotateImage"
LEAF_NODE	8550:39	8550:39	20	"rotateImage"
LEAF_NODE	8550:52	8550:52	18	,
ARGUMENT	8550:53	8550:53	18	"Unsupported bit depth %d"
FIELD	8550:53	8550:53	19	"Unsupported bit depth %d"
LEAF_NODE	8550:53	8550:53	20	"Unsupported bit depth %d"
LEAF_NODE	8550:79	8550:79	18	,
ARGUMENT	8550:81	8550:81	18	bps
FIELD	8550:81	8550:81	19	bps
LEAF_NODE	8550:81	8550:81	20	bps
LEAF_NODE	8550:84	8550:84	18	)
LEAF_NODE	8550:85	8550:85	16	;
EXPR_STATEMENT	8551:15	8551:31	15	_TIFFfree ( rbuff ) ;
EXPR	8551:15	8551:15	16	_TIFFfree ( rbuff )
FUNCTION_CALL	8551:15	8551:30	17	_TIFFfree ( rbuff )
CALLEE	8551:15	8551:15	18	_TIFFfree
LEAF_NODE	8551:15	8551:15	19	_TIFFfree
LEAF_NODE	8551:24	8551:24	18	(
ARGUMENT	8551:25	8551:25	18	rbuff
FIELD	8551:25	8551:25	19	rbuff
LEAF_NODE	8551:25	8551:25	20	rbuff
LEAF_NODE	8551:30	8551:30	18	)
LEAF_NODE	8551:31	8551:31	16	;
JUMP_STATEMENT	8552:29	8552:40	15	return ( - 1 ) ;
KEYWORD	8552:29	8552:29	16	return
LEAF_NODE	8552:29	8552:29	17	return
DESTINATION	8552:36	8552:36	16	( - 1 )
EXPR	8552:36	8552:39	17	( - 1 )
LEAF_NODE	8552:36	8552:36	18	(
UNARY_EXPR	8552:37	8552:38	18	- 1
UNARY_OPERATOR	8552:37	8552:37	19	-
LEAF_NODE	8552:37	8552:37	20	-
FIELD	8552:38	8552:38	19	1
LEAF_NODE	8552:38	8552:38	20	1
LEAF_NODE	8552:39	8552:39	18	)
LEAF_NODE	8552:40	8552:40	16	;
LEAF_NODE	8553:6	8553:6	14	}
LEAF_NODE	8554:4	8554:4	11	}
LEAF_NODE	8555:2	8555:2	8	}
EXPR_STATEMENT	8556:14	8556:30	6	_TIFFfree ( ibuff ) ;
EXPR	8556:14	8556:14	7	_TIFFfree ( ibuff )
FUNCTION_CALL	8556:14	8556:29	8	_TIFFfree ( ibuff )
CALLEE	8556:14	8556:14	9	_TIFFfree
LEAF_NODE	8556:14	8556:14	10	_TIFFfree
LEAF_NODE	8556:23	8556:23	9	(
ARGUMENT	8556:24	8556:24	9	ibuff
FIELD	8556:24	8556:24	10	ibuff
LEAF_NODE	8556:24	8556:24	11	ibuff
LEAF_NODE	8556:29	8556:29	9	)
LEAF_NODE	8556:30	8556:30	7	;
EXPR_STATEMENT	8557:14	8557:34	6	* ( ibuff_ptr ) = rbuff ;
EXPR	8557:14	8557:14	7	* ( ibuff_ptr ) = rbuff
ASSIGN	8557:14	8557:29	8	* ( ibuff_ptr ) = rbuff
LVAL	8557:14	8557:14	9	* ( ibuff_ptr )
UNARY_EXPR	8557:14	8557:25	10	* ( ibuff_ptr )
UNARY_OPERATOR	8557:14	8557:14	11	*
LEAF_NODE	8557:14	8557:14	12	*
LEAF_NODE	8557:15	8557:15	11	(
FIELD	8557:16	8557:16	11	ibuff_ptr
LEAF_NODE	8557:16	8557:16	12	ibuff_ptr
LEAF_NODE	8557:25	8557:25	11	)
ASSIGN_OP	8557:27	8557:27	9	=
LEAF_NODE	8557:27	8557:27	10	=
RVAL	8557:29	8557:29	9	rbuff
FIELD	8557:29	8557:29	10	rbuff
LEAF_NODE	8557:29	8557:29	11	rbuff
LEAF_NODE	8557:34	8557:34	7	;
EXPR_STATEMENT	8559:14	8559:33	6	* img_width = length ;
EXPR	8559:14	8559:14	7	* img_width = length
ASSIGN	8559:14	8559:27	8	* img_width = length
LVAL	8559:14	8559:14	9	* img_width
UNARY_EXPR	8559:14	8559:15	10	* img_width
UNARY_OPERATOR	8559:14	8559:14	11	*
LEAF_NODE	8559:14	8559:14	12	*
FIELD	8559:15	8559:15	11	img_width
LEAF_NODE	8559:15	8559:15	12	img_width
ASSIGN_OP	8559:25	8559:25	9	=
LEAF_NODE	8559:25	8559:25	10	=
RVAL	8559:27	8559:27	9	length
FIELD	8559:27	8559:27	10	length
LEAF_NODE	8559:27	8559:27	11	length
LEAF_NODE	8559:33	8559:33	7	;
EXPR_STATEMENT	8560:14	8560:33	6	* img_length = width ;
EXPR	8560:14	8560:14	7	* img_length = width
ASSIGN	8560:14	8560:28	8	* img_length = width
LVAL	8560:14	8560:14	9	* img_length
UNARY_EXPR	8560:14	8560:15	10	* img_length
UNARY_OPERATOR	8560:14	8560:14	11	*
LEAF_NODE	8560:14	8560:14	12	*
FIELD	8560:15	8560:15	11	img_length
LEAF_NODE	8560:15	8560:15	12	img_length
ASSIGN_OP	8560:26	8560:26	9	=
LEAF_NODE	8560:26	8560:26	10	=
RVAL	8560:28	8560:28	9	width
FIELD	8560:28	8560:28	10	width
LEAF_NODE	8560:28	8560:28	11	width
LEAF_NODE	8560:33	8560:33	7	;
EXPR_STATEMENT	8561:14	8561:35	6	image -> width = length ;
EXPR	8561:14	8561:14	7	image -> width = length
ASSIGN	8561:14	8561:29	8	image -> width = length
LVAL	8561:14	8561:14	9	image -> width
FIELD	8561:14	8561:21	10	image -> width
LEAF_NODE	8561:14	8561:14	11	image
LEAF_NODE	8561:19	8561:19	11	->
LEAF_NODE	8561:21	8561:21	11	width
ASSIGN_OP	8561:27	8561:27	9	=
LEAF_NODE	8561:27	8561:27	10	=
RVAL	8561:29	8561:29	9	length
FIELD	8561:29	8561:29	10	length
LEAF_NODE	8561:29	8561:29	11	length
LEAF_NODE	8561:35	8561:35	7	;
EXPR_STATEMENT	8562:14	8562:35	6	image -> length = width ;
EXPR	8562:14	8562:14	7	image -> length = width
ASSIGN	8562:14	8562:30	8	image -> length = width
LVAL	8562:14	8562:14	9	image -> length
FIELD	8562:14	8562:21	10	image -> length
LEAF_NODE	8562:14	8562:14	11	image
LEAF_NODE	8562:19	8562:19	11	->
LEAF_NODE	8562:21	8562:21	11	length
ASSIGN_OP	8562:28	8562:28	9	=
LEAF_NODE	8562:28	8562:28	10	=
RVAL	8562:30	8562:30	9	width
FIELD	8562:30	8562:30	10	width
LEAF_NODE	8562:30	8562:30	11	width
LEAF_NODE	8562:35	8562:35	7	;
EXPR_STATEMENT	8563:14	8563:36	6	res_temp = image -> xres ;
EXPR	8563:14	8563:14	7	res_temp = image -> xres
ASSIGN	8563:14	8563:25	8	res_temp = image -> xres
LVAL	8563:14	8563:14	9	res_temp
FIELD	8563:14	8563:14	10	res_temp
LEAF_NODE	8563:14	8563:14	11	res_temp
ASSIGN_OP	8563:23	8563:23	9	=
LEAF_NODE	8563:23	8563:23	10	=
RVAL	8563:25	8563:25	9	image -> xres
FIELD	8563:25	8563:32	10	image -> xres
LEAF_NODE	8563:25	8563:25	11	image
LEAF_NODE	8563:30	8563:30	11	->
LEAF_NODE	8563:32	8563:32	11	xres
LEAF_NODE	8563:36	8563:36	7	;
EXPR_STATEMENT	8564:14	8564:39	6	image -> xres = image -> yres ;
EXPR	8564:14	8564:14	7	image -> xres = image -> yres
ASSIGN	8564:14	8564:28	8	image -> xres = image -> yres
LVAL	8564:14	8564:14	9	image -> xres
FIELD	8564:14	8564:21	10	image -> xres
LEAF_NODE	8564:14	8564:14	11	image
LEAF_NODE	8564:19	8564:19	11	->
LEAF_NODE	8564:21	8564:21	11	xres
ASSIGN_OP	8564:26	8564:26	9	=
LEAF_NODE	8564:26	8564:26	10	=
RVAL	8564:28	8564:28	9	image -> yres
FIELD	8564:28	8564:35	10	image -> yres
LEAF_NODE	8564:28	8564:28	11	image
LEAF_NODE	8564:33	8564:33	11	->
LEAF_NODE	8564:35	8564:35	11	yres
LEAF_NODE	8564:39	8564:39	7	;
EXPR_STATEMENT	8565:14	8565:36	6	image -> yres = res_temp ;
EXPR	8565:14	8565:14	7	image -> yres = res_temp
ASSIGN	8565:14	8565:28	8	image -> yres = res_temp
LVAL	8565:14	8565:14	9	image -> yres
FIELD	8565:14	8565:21	10	image -> yres
LEAF_NODE	8565:14	8565:14	11	image
LEAF_NODE	8565:19	8565:19	11	->
LEAF_NODE	8565:21	8565:21	11	yres
ASSIGN_OP	8565:26	8565:26	9	=
LEAF_NODE	8565:26	8565:26	10	=
RVAL	8565:28	8565:28	9	res_temp
FIELD	8565:28	8565:28	10	res_temp
LEAF_NODE	8565:28	8565:28	11	res_temp
LEAF_NODE	8565:36	8565:36	7	;
JUMP_STATEMENT	8566:7	8566:12	6	break DESTINATION ;
KEYWORD	8566:7	8566:7	7	break
LEAF_NODE	8566:7	8566:7	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	8566:12	8566:12	7	;
LABEL	8568:4	8568:12	6	case 270 :
LEAF_NODE	8568:4	8568:4	7	case
LEAF_NODE	8568:9	8568:9	7	270
LEAF_NODE	8568:12	8568:12	7	:
SELECTION	8568:14	8569:16	6	
KEYWORD	8568:14	8568:14	7	if
LEAF_NODE	8568:14	8568:14	8	if
LEAF_NODE	8568:17	8568:17	7	(
CONDITION	8568:18	8568:18	7	( bps % 8 ) == 0
EXPR	8568:18	8568:31	8	( bps % 8 ) == 0
LEAF_NODE	8568:18	8568:18	9	(
FIELD	8568:19	8568:19	9	bps
LEAF_NODE	8568:19	8568:19	10	bps
LEAF_NODE	8568:23	8568:23	9	%
FIELD	8568:25	8568:25	9	8
LEAF_NODE	8568:25	8568:25	10	8
LEAF_NODE	8568:26	8568:26	9	)
EQ_OPERATOR	8568:28	8568:28	9	==
LEAF_NODE	8568:28	8568:28	10	==
FIELD	8568:31	8568:31	9	0
LEAF_NODE	8568:31	8568:31	10	0
LEAF_NODE	8568:32	8568:32	7	)
STATEMENTS	8569:16	8583:2	7	
LEAF_NODE	8569:16	8569:16	8	{
STATEMENTS	8570:16	8570:16	8	
ITERATION	8570:16	8571:18	9	
KEYWORD	8570:16	8570:16	10	for
LEAF_NODE	8570:16	8570:16	11	for
LEAF_NODE	8570:20	8570:20	10	(
FOR_INIT	8570:21	8570:28	10	col = 0 ;
EXPR	8570:21	8570:21	11	col = 0
ASSIGN	8570:21	8570:27	12	col = 0
LVAL	8570:21	8570:21	13	col
FIELD	8570:21	8570:21	14	col
LEAF_NODE	8570:21	8570:21	15	col
ASSIGN_OP	8570:25	8570:25	13	=
LEAF_NODE	8570:25	8570:25	14	=
RVAL	8570:27	8570:27	13	0
FIELD	8570:27	8570:27	14	0
LEAF_NODE	8570:27	8570:27	15	0
LEAF_NODE	8570:28	8570:28	11	;
CONDITION	8570:30	8570:30	10	col < width
EXPR	8570:30	8570:36	11	col < width
FIELD	8570:30	8570:30	12	col
LEAF_NODE	8570:30	8570:30	13	col
REL_OPERATOR	8570:34	8570:34	12	<
LEAF_NODE	8570:34	8570:34	13	<
FIELD	8570:36	8570:36	12	width
LEAF_NODE	8570:36	8570:36	13	width
LEAF_NODE	8570:41	8570:41	10	;
FOR_EXPR	8570:43	8570:43	10	col ++
EXPR	8570:43	8570:43	11	col ++
FIELD	8570:43	8570:46	12	col ++
LEAF_NODE	8570:43	8570:43	13	col
LEAF_NODE	8570:46	8570:46	13	++
LEAF_NODE	8570:48	8570:48	10	)
STATEMENTS	8571:18	8582:4	10	
LEAF_NODE	8571:18	8571:18	11	{
STATEMENTS	8572:4	8576:18	11	
EXPR_STATEMENT	8572:4	8572:38	12	src_offset = col * bytes_per_pixel ;
EXPR	8572:4	8572:4	13	src_offset = col * bytes_per_pixel
ASSIGN	8572:4	8572:17	14	src_offset = col * bytes_per_pixel
LVAL	8572:4	8572:4	15	src_offset
FIELD	8572:4	8572:4	16	src_offset
LEAF_NODE	8572:4	8572:4	17	src_offset
ASSIGN_OP	8572:15	8572:15	15	=
LEAF_NODE	8572:15	8572:15	16	=
RVAL	8572:17	8572:23	15	col * bytes_per_pixel
FIELD	8572:17	8572:17	16	col
LEAF_NODE	8572:17	8572:17	17	col
LEAF_NODE	8572:21	8572:21	16	*
FIELD	8572:23	8572:23	16	bytes_per_pixel
LEAF_NODE	8572:23	8572:23	17	bytes_per_pixel
LEAF_NODE	8572:38	8572:38	13	;
EXPR_STATEMENT	8573:18	8573:58	12	dst_offset = ( width - col - 1 ) * colsize ;
EXPR	8573:18	8573:18	13	dst_offset = ( width - col - 1 ) * colsize
ASSIGN	8573:18	8573:31	14	dst_offset = ( width - col - 1 ) * colsize
LVAL	8573:18	8573:18	15	dst_offset
FIELD	8573:18	8573:18	16	dst_offset
LEAF_NODE	8573:18	8573:18	17	dst_offset
ASSIGN_OP	8573:29	8573:29	15	=
LEAF_NODE	8573:29	8573:29	16	=
RVAL	8573:31	8573:51	15	( width - col - 1 ) * colsize
LEAF_NODE	8573:31	8573:31	16	(
FIELD	8573:32	8573:32	16	width
LEAF_NODE	8573:32	8573:32	17	width
LEAF_NODE	8573:38	8573:38	16	-
FIELD	8573:40	8573:40	16	col
LEAF_NODE	8573:40	8573:40	17	col
LEAF_NODE	8573:44	8573:44	16	-
FIELD	8573:46	8573:46	16	1
LEAF_NODE	8573:46	8573:46	17	1
LEAF_NODE	8573:47	8573:47	16	)
LEAF_NODE	8573:49	8573:49	16	*
FIELD	8573:51	8573:51	16	colsize
LEAF_NODE	8573:51	8573:51	17	colsize
LEAF_NODE	8573:58	8573:58	13	;
EXPR_STATEMENT	8574:4	8574:28	12	src = ibuff + src_offset ;
EXPR	8574:4	8574:4	13	src = ibuff + src_offset
ASSIGN	8574:4	8574:10	14	src = ibuff + src_offset
LVAL	8574:4	8574:4	15	src
FIELD	8574:4	8574:4	16	src
LEAF_NODE	8574:4	8574:4	17	src
ASSIGN_OP	8574:8	8574:8	15	=
LEAF_NODE	8574:8	8574:8	16	=
RVAL	8574:10	8574:18	15	ibuff + src_offset
FIELD	8574:10	8574:10	16	ibuff
LEAF_NODE	8574:10	8574:10	17	ibuff
LEAF_NODE	8574:16	8574:16	16	+
FIELD	8574:18	8574:18	16	src_offset
LEAF_NODE	8574:18	8574:18	17	src_offset
LEAF_NODE	8574:28	8574:28	13	;
EXPR_STATEMENT	8575:4	8575:28	12	dst = rbuff + dst_offset ;
EXPR	8575:4	8575:4	13	dst = rbuff + dst_offset
ASSIGN	8575:4	8575:10	14	dst = rbuff + dst_offset
LVAL	8575:4	8575:4	15	dst
FIELD	8575:4	8575:4	16	dst
LEAF_NODE	8575:4	8575:4	17	dst
ASSIGN_OP	8575:8	8575:8	15	=
LEAF_NODE	8575:8	8575:8	16	=
RVAL	8575:10	8575:18	15	rbuff + dst_offset
FIELD	8575:10	8575:10	16	rbuff
LEAF_NODE	8575:10	8575:10	17	rbuff
LEAF_NODE	8575:16	8575:16	16	+
FIELD	8575:18	8575:18	16	dst_offset
LEAF_NODE	8575:18	8575:18	17	dst_offset
LEAF_NODE	8575:28	8575:28	13	;
ITERATION	8576:18	8577:20	12	
KEYWORD	8576:18	8576:18	13	for
LEAF_NODE	8576:18	8576:18	14	for
LEAF_NODE	8576:22	8576:22	13	(
FOR_INIT	8576:23	8576:35	13	row = length ;
EXPR	8576:23	8576:23	14	row = length
ASSIGN	8576:23	8576:29	15	row = length
LVAL	8576:23	8576:23	16	row
FIELD	8576:23	8576:23	17	row
LEAF_NODE	8576:23	8576:23	18	row
ASSIGN_OP	8576:27	8576:27	16	=
LEAF_NODE	8576:27	8576:27	17	=
RVAL	8576:29	8576:29	16	length
FIELD	8576:29	8576:29	17	length
LEAF_NODE	8576:29	8576:29	18	length
LEAF_NODE	8576:35	8576:35	14	;
CONDITION	8576:37	8576:37	13	row > 0
EXPR	8576:37	8576:43	14	row > 0
FIELD	8576:37	8576:37	15	row
LEAF_NODE	8576:37	8576:37	16	row
REL_OPERATOR	8576:41	8576:41	15	>
LEAF_NODE	8576:41	8576:41	16	>
FIELD	8576:43	8576:43	15	0
LEAF_NODE	8576:43	8576:43	16	0
LEAF_NODE	8576:44	8576:44	13	;
FOR_EXPR	8576:46	8576:46	13	row --
EXPR	8576:46	8576:46	14	row --
FIELD	8576:46	8576:49	15	row --
LEAF_NODE	8576:46	8576:46	16	row
LEAF_NODE	8576:49	8576:49	16	--
LEAF_NODE	8576:51	8576:51	13	)
STATEMENTS	8577:20	8581:20	13	
LEAF_NODE	8577:20	8577:20	14	{
STATEMENTS	8578:20	8580:6	14	
ITERATION	8578:20	8579:22	15	
KEYWORD	8578:20	8578:20	16	for
LEAF_NODE	8578:20	8578:20	17	for
LEAF_NODE	8578:24	8578:24	16	(
FOR_INIT	8578:25	8578:30	16	i = 0 ;
EXPR	8578:25	8578:25	17	i = 0
ASSIGN	8578:25	8578:29	18	i = 0
LVAL	8578:25	8578:25	19	i
FIELD	8578:25	8578:25	20	i
LEAF_NODE	8578:25	8578:25	21	i
ASSIGN_OP	8578:27	8578:27	19	=
LEAF_NODE	8578:27	8578:27	20	=
RVAL	8578:29	8578:29	19	0
FIELD	8578:29	8578:29	20	0
LEAF_NODE	8578:29	8578:29	21	0
LEAF_NODE	8578:30	8578:30	17	;
CONDITION	8578:32	8578:32	16	i < bytes_per_pixel
EXPR	8578:32	8578:36	17	i < bytes_per_pixel
FIELD	8578:32	8578:32	18	i
LEAF_NODE	8578:32	8578:32	19	i
REL_OPERATOR	8578:34	8578:34	18	<
LEAF_NODE	8578:34	8578:34	19	<
FIELD	8578:36	8578:36	18	bytes_per_pixel
LEAF_NODE	8578:36	8578:36	19	bytes_per_pixel
LEAF_NODE	8578:51	8578:51	16	;
FOR_EXPR	8578:53	8578:53	16	i ++
EXPR	8578:53	8578:53	17	i ++
FIELD	8578:53	8578:54	18	i ++
LEAF_NODE	8578:53	8578:53	19	i
LEAF_NODE	8578:54	8578:54	19	++
LEAF_NODE	8578:56	8578:56	16	)
STATEMENTS	8579:22	8579:22	16	
EXPR_STATEMENT	8579:22	8579:41	17	* dst ++ = * ( src + i ) ;
EXPR	8579:22	8579:22	18	* dst ++ = * ( src + i )
ASSIGN	8579:22	8579:31	19	* dst ++ = * ( src + i )
LVAL	8579:22	8579:22	20	* dst ++
UNARY_EXPR	8579:22	8579:23	21	* dst ++
UNARY_OPERATOR	8579:22	8579:22	22	*
LEAF_NODE	8579:22	8579:22	23	*
FIELD	8579:23	8579:26	22	dst ++
LEAF_NODE	8579:23	8579:23	23	dst
LEAF_NODE	8579:26	8579:26	23	++
ASSIGN_OP	8579:29	8579:29	20	=
LEAF_NODE	8579:29	8579:29	21	=
RVAL	8579:31	8579:31	20	* ( src + i )
UNARY_EXPR	8579:31	8579:40	21	* ( src + i )
UNARY_OPERATOR	8579:31	8579:31	22	*
LEAF_NODE	8579:31	8579:31	23	*
LEAF_NODE	8579:32	8579:32	22	(
FIELD	8579:33	8579:33	22	src
LEAF_NODE	8579:33	8579:33	23	src
LEAF_NODE	8579:37	8579:37	22	+
FIELD	8579:39	8579:39	22	i
LEAF_NODE	8579:39	8579:39	23	i
LEAF_NODE	8579:40	8579:40	22	)
LEAF_NODE	8579:41	8579:41	18	;
EXPR_STATEMENT	8580:6	8580:20	15	src += rowsize ;
EXPR	8580:6	8580:6	16	src += rowsize
ASSIGN	8580:6	8580:13	17	src += rowsize
LVAL	8580:6	8580:6	18	src
FIELD	8580:6	8580:6	19	src
LEAF_NODE	8580:6	8580:6	20	src
ASSIGN_OP	8580:10	8580:10	18	+=
LEAF_NODE	8580:10	8580:10	19	+=
RVAL	8580:13	8580:13	18	rowsize
FIELD	8580:13	8580:13	19	rowsize
LEAF_NODE	8580:13	8580:13	20	rowsize
LEAF_NODE	8580:20	8580:20	16	;
LEAF_NODE	8581:20	8581:20	14	}
LEAF_NODE	8582:4	8582:4	11	}
LEAF_NODE	8583:2	8583:2	8	}
SELECTION	8584:14	8585:16	6	
KEYWORD	8584:14	8584:14	7	else
LEAF_NODE	8584:14	8584:14	8	else
STATEMENTS	8585:16	8632:2	7	
LEAF_NODE	8585:16	8585:16	8	{
STATEMENTS	8586:16	8586:16	8	
ITERATION	8586:16	8587:18	9	
KEYWORD	8586:16	8586:16	10	for
LEAF_NODE	8586:16	8586:16	11	for
LEAF_NODE	8586:20	8586:20	10	(
FOR_INIT	8586:21	8586:28	10	col = 0 ;
EXPR	8586:21	8586:21	11	col = 0
ASSIGN	8586:21	8586:27	12	col = 0
LVAL	8586:21	8586:21	13	col
FIELD	8586:21	8586:21	14	col
LEAF_NODE	8586:21	8586:21	15	col
ASSIGN_OP	8586:25	8586:25	13	=
LEAF_NODE	8586:25	8586:25	14	=
RVAL	8586:27	8586:27	13	0
FIELD	8586:27	8586:27	14	0
LEAF_NODE	8586:27	8586:27	15	0
LEAF_NODE	8586:28	8586:28	11	;
CONDITION	8586:30	8586:30	10	col < width
EXPR	8586:30	8586:36	11	col < width
FIELD	8586:30	8586:30	12	col
LEAF_NODE	8586:30	8586:30	13	col
REL_OPERATOR	8586:34	8586:34	12	<
LEAF_NODE	8586:34	8586:34	13	<
FIELD	8586:36	8586:36	12	width
LEAF_NODE	8586:36	8586:36	13	width
LEAF_NODE	8586:41	8586:41	10	;
FOR_EXPR	8586:43	8586:43	10	col ++
EXPR	8586:43	8586:43	11	col ++
FIELD	8586:43	8586:46	12	col ++
LEAF_NODE	8586:43	8586:43	13	col
LEAF_NODE	8586:46	8586:46	13	++
LEAF_NODE	8586:48	8586:48	10	)
STATEMENTS	8587:18	8631:4	10	
LEAF_NODE	8587:18	8587:18	11	{
STATEMENTS	8588:4	8592:18	11	
EXPR_STATEMENT	8588:4	8588:18	12	src_offset = 0 ;
EXPR	8588:4	8588:4	13	src_offset = 0
ASSIGN	8588:4	8588:17	14	src_offset = 0
LVAL	8588:4	8588:4	15	src_offset
FIELD	8588:4	8588:4	16	src_offset
LEAF_NODE	8588:4	8588:4	17	src_offset
ASSIGN_OP	8588:15	8588:15	15	=
LEAF_NODE	8588:15	8588:15	16	=
RVAL	8588:17	8588:17	15	0
FIELD	8588:17	8588:17	16	0
LEAF_NODE	8588:17	8588:17	17	0
LEAF_NODE	8588:18	8588:18	13	;
EXPR_STATEMENT	8589:18	8589:58	12	dst_offset = ( width - col - 1 ) * colsize ;
EXPR	8589:18	8589:18	13	dst_offset = ( width - col - 1 ) * colsize
ASSIGN	8589:18	8589:31	14	dst_offset = ( width - col - 1 ) * colsize
LVAL	8589:18	8589:18	15	dst_offset
FIELD	8589:18	8589:18	16	dst_offset
LEAF_NODE	8589:18	8589:18	17	dst_offset
ASSIGN_OP	8589:29	8589:29	15	=
LEAF_NODE	8589:29	8589:29	16	=
RVAL	8589:31	8589:51	15	( width - col - 1 ) * colsize
LEAF_NODE	8589:31	8589:31	16	(
FIELD	8589:32	8589:32	16	width
LEAF_NODE	8589:32	8589:32	17	width
LEAF_NODE	8589:38	8589:38	16	-
FIELD	8589:40	8589:40	16	col
LEAF_NODE	8589:40	8589:40	17	col
LEAF_NODE	8589:44	8589:44	16	-
FIELD	8589:46	8589:46	16	1
LEAF_NODE	8589:46	8589:46	17	1
LEAF_NODE	8589:47	8589:47	16	)
LEAF_NODE	8589:49	8589:49	16	*
FIELD	8589:51	8589:51	16	colsize
LEAF_NODE	8589:51	8589:51	17	colsize
LEAF_NODE	8589:58	8589:58	13	;
EXPR_STATEMENT	8590:4	8590:28	12	src = ibuff + src_offset ;
EXPR	8590:4	8590:4	13	src = ibuff + src_offset
ASSIGN	8590:4	8590:10	14	src = ibuff + src_offset
LVAL	8590:4	8590:4	15	src
FIELD	8590:4	8590:4	16	src
LEAF_NODE	8590:4	8590:4	17	src
ASSIGN_OP	8590:8	8590:8	15	=
LEAF_NODE	8590:8	8590:8	16	=
RVAL	8590:10	8590:18	15	ibuff + src_offset
FIELD	8590:10	8590:10	16	ibuff
LEAF_NODE	8590:10	8590:10	17	ibuff
LEAF_NODE	8590:16	8590:16	16	+
FIELD	8590:18	8590:18	16	src_offset
LEAF_NODE	8590:18	8590:18	17	src_offset
LEAF_NODE	8590:28	8590:28	13	;
EXPR_STATEMENT	8591:4	8591:28	12	dst = rbuff + dst_offset ;
EXPR	8591:4	8591:4	13	dst = rbuff + dst_offset
ASSIGN	8591:4	8591:10	14	dst = rbuff + dst_offset
LVAL	8591:4	8591:4	15	dst
FIELD	8591:4	8591:4	16	dst
LEAF_NODE	8591:4	8591:4	17	dst
ASSIGN_OP	8591:8	8591:8	15	=
LEAF_NODE	8591:8	8591:8	16	=
RVAL	8591:10	8591:18	15	rbuff + dst_offset
FIELD	8591:10	8591:10	16	rbuff
LEAF_NODE	8591:10	8591:10	17	rbuff
LEAF_NODE	8591:16	8591:16	16	+
FIELD	8591:18	8591:18	16	dst_offset
LEAF_NODE	8591:18	8591:18	17	dst_offset
LEAF_NODE	8591:28	8591:28	13	;
SELECTION	8592:18	8593:20	12	
KEYWORD	8592:18	8592:18	13	switch
LEAF_NODE	8592:18	8592:18	14	switch
LEAF_NODE	8592:25	8592:25	13	(
CONDITION	8592:26	8592:26	13	shift_width
EXPR	8592:26	8592:26	14	shift_width
FIELD	8592:26	8592:26	15	shift_width
LEAF_NODE	8592:26	8592:26	16	shift_width
LEAF_NODE	8592:37	8592:37	13	)
STATEMENTS	8593:20	8630:6	13	
LEAF_NODE	8593:20	8593:20	14	{
STATEMENTS	8594:20	8629:29	14	
LABEL	8594:20	8594:26	15	case 1 :
LEAF_NODE	8594:20	8594:20	16	case
LEAF_NODE	8594:25	8594:25	16	1
LEAF_NODE	8594:26	8594:26	16	:
SELECTION	8594:28	8595:9	15	
KEYWORD	8594:28	8594:28	16	if
LEAF_NODE	8594:28	8594:28	17	if
LEAF_NODE	8594:31	8594:31	16	(
CONDITION	8594:32	8594:32	16	bps == 1
EXPR	8594:32	8594:39	17	bps == 1
FIELD	8594:32	8594:32	18	bps
LEAF_NODE	8594:32	8594:32	19	bps
EQ_OPERATOR	8594:36	8594:36	18	==
LEAF_NODE	8594:36	8594:36	19	==
FIELD	8594:39	8594:39	18	1
LEAF_NODE	8594:39	8594:39	19	1
LEAF_NODE	8594:40	8594:40	16	)
STATEMENTS	8595:9	8603:30	16	
LEAF_NODE	8595:9	8595:9	17	{
STATEMENTS	8596:30	8602:30	17	
SELECTION	8596:30	8598:32	18	
KEYWORD	8596:30	8596:30	19	if
LEAF_NODE	8596:30	8596:30	20	if
LEAF_NODE	8596:33	8596:33	19	(
CONDITION	8596:34	8596:34	19	rotateContigSamples8bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8596:34	8596:34	20	rotateContigSamples8bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8596:34	8597:46	21	rotateContigSamples8bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8596:34	8596:34	22	rotateContigSamples8bits
LEAF_NODE	8596:34	8596:34	23	rotateContigSamples8bits
LEAF_NODE	8596:58	8596:58	22	(
ARGUMENT	8596:59	8596:59	22	rotation
FIELD	8596:59	8596:59	23	rotation
LEAF_NODE	8596:59	8596:59	24	rotation
LEAF_NODE	8596:67	8596:67	22	,
ARGUMENT	8596:69	8596:69	22	spp
FIELD	8596:69	8596:69	23	spp
LEAF_NODE	8596:69	8596:69	24	spp
LEAF_NODE	8596:72	8596:72	22	,
ARGUMENT	8596:74	8596:74	22	bps
FIELD	8596:74	8596:74	23	bps
LEAF_NODE	8596:74	8596:74	24	bps
LEAF_NODE	8596:77	8596:77	22	,
ARGUMENT	8596:79	8596:79	22	width
FIELD	8596:79	8596:79	23	width
LEAF_NODE	8596:79	8596:79	24	width
LEAF_NODE	8596:84	8596:84	22	,
ARGUMENT	8597:25	8597:25	22	length
FIELD	8597:25	8597:25	23	length
LEAF_NODE	8597:25	8597:25	24	length
LEAF_NODE	8597:31	8597:31	22	,
ARGUMENT	8597:33	8597:33	22	col
FIELD	8597:33	8597:33	23	col
LEAF_NODE	8597:33	8597:33	24	col
LEAF_NODE	8597:36	8597:36	22	,
ARGUMENT	8597:38	8597:38	22	src
FIELD	8597:38	8597:38	23	src
LEAF_NODE	8597:38	8597:38	24	src
LEAF_NODE	8597:41	8597:41	22	,
ARGUMENT	8597:43	8597:43	22	dst
FIELD	8597:43	8597:43	23	dst
LEAF_NODE	8597:43	8597:43	24	dst
LEAF_NODE	8597:46	8597:46	22	)
LEAF_NODE	8597:47	8597:47	19	)
STATEMENTS	8598:32	8601:32	19	
LEAF_NODE	8598:32	8598:32	20	{
STATEMENTS	8599:18	8600:32	20	
EXPR_STATEMENT	8599:18	8599:34	21	_TIFFfree ( rbuff ) ;
EXPR	8599:18	8599:18	22	_TIFFfree ( rbuff )
FUNCTION_CALL	8599:18	8599:33	23	_TIFFfree ( rbuff )
CALLEE	8599:18	8599:18	24	_TIFFfree
LEAF_NODE	8599:18	8599:18	25	_TIFFfree
LEAF_NODE	8599:27	8599:27	24	(
ARGUMENT	8599:28	8599:28	24	rbuff
FIELD	8599:28	8599:28	25	rbuff
LEAF_NODE	8599:28	8599:28	26	rbuff
LEAF_NODE	8599:33	8599:33	24	)
LEAF_NODE	8599:34	8599:34	22	;
JUMP_STATEMENT	8600:32	8600:43	21	return ( - 1 ) ;
KEYWORD	8600:32	8600:32	22	return
LEAF_NODE	8600:32	8600:32	23	return
DESTINATION	8600:39	8600:39	22	( - 1 )
EXPR	8600:39	8600:42	23	( - 1 )
LEAF_NODE	8600:39	8600:39	24	(
UNARY_EXPR	8600:40	8600:41	24	- 1
UNARY_OPERATOR	8600:40	8600:40	25	-
LEAF_NODE	8600:40	8600:40	26	-
FIELD	8600:41	8600:41	25	1
LEAF_NODE	8600:41	8600:41	26	1
LEAF_NODE	8600:42	8600:42	24	)
LEAF_NODE	8600:43	8600:43	22	;
LEAF_NODE	8601:32	8601:32	20	}
JUMP_STATEMENT	8602:30	8602:35	18	break DESTINATION ;
KEYWORD	8602:30	8602:30	19	break
LEAF_NODE	8602:30	8602:30	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	8602:35	8602:35	19	;
LEAF_NODE	8603:30	8603:30	17	}
SELECTION	8604:28	8606:30	15	
KEYWORD	8604:28	8604:28	16	if
LEAF_NODE	8604:28	8604:28	17	if
LEAF_NODE	8604:31	8604:31	16	(
CONDITION	8604:32	8604:32	16	rotateContigSamples16bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8604:32	8604:32	17	rotateContigSamples16bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8604:32	8605:46	18	rotateContigSamples16bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8604:32	8604:32	19	rotateContigSamples16bits
LEAF_NODE	8604:32	8604:32	20	rotateContigSamples16bits
LEAF_NODE	8604:57	8604:57	19	(
ARGUMENT	8604:58	8604:58	19	rotation
FIELD	8604:58	8604:58	20	rotation
LEAF_NODE	8604:58	8604:58	21	rotation
LEAF_NODE	8604:66	8604:66	19	,
ARGUMENT	8604:68	8604:68	19	spp
FIELD	8604:68	8604:68	20	spp
LEAF_NODE	8604:68	8604:68	21	spp
LEAF_NODE	8604:71	8604:71	19	,
ARGUMENT	8604:73	8604:73	19	bps
FIELD	8604:73	8604:73	20	bps
LEAF_NODE	8604:73	8604:73	21	bps
LEAF_NODE	8604:76	8604:76	19	,
ARGUMENT	8604:78	8604:78	19	width
FIELD	8604:78	8604:78	20	width
LEAF_NODE	8604:78	8604:78	21	width
LEAF_NODE	8604:83	8604:83	19	,
ARGUMENT	8605:25	8605:25	19	length
FIELD	8605:25	8605:25	20	length
LEAF_NODE	8605:25	8605:25	21	length
LEAF_NODE	8605:31	8605:31	19	,
ARGUMENT	8605:33	8605:33	19	col
FIELD	8605:33	8605:33	20	col
LEAF_NODE	8605:33	8605:33	21	col
LEAF_NODE	8605:36	8605:36	19	,
ARGUMENT	8605:38	8605:38	19	src
FIELD	8605:38	8605:38	20	src
LEAF_NODE	8605:38	8605:38	21	src
LEAF_NODE	8605:41	8605:41	19	,
ARGUMENT	8605:43	8605:43	19	dst
FIELD	8605:43	8605:43	20	dst
LEAF_NODE	8605:43	8605:43	21	dst
LEAF_NODE	8605:46	8605:46	19	)
LEAF_NODE	8605:47	8605:47	16	)
STATEMENTS	8606:30	8609:16	16	
LEAF_NODE	8606:30	8606:30	17	{
STATEMENTS	8607:23	8608:30	17	
EXPR_STATEMENT	8607:23	8607:39	18	_TIFFfree ( rbuff ) ;
EXPR	8607:23	8607:23	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8607:23	8607:38	20	_TIFFfree ( rbuff )
CALLEE	8607:23	8607:23	21	_TIFFfree
LEAF_NODE	8607:23	8607:23	22	_TIFFfree
LEAF_NODE	8607:32	8607:32	21	(
ARGUMENT	8607:33	8607:33	21	rbuff
FIELD	8607:33	8607:33	22	rbuff
LEAF_NODE	8607:33	8607:33	23	rbuff
LEAF_NODE	8607:38	8607:38	21	)
LEAF_NODE	8607:39	8607:39	19	;
JUMP_STATEMENT	8608:30	8608:41	18	return ( - 1 ) ;
KEYWORD	8608:30	8608:30	19	return
LEAF_NODE	8608:30	8608:30	20	return
DESTINATION	8608:37	8608:37	19	( - 1 )
EXPR	8608:37	8608:40	20	( - 1 )
LEAF_NODE	8608:37	8608:37	21	(
UNARY_EXPR	8608:38	8608:39	21	- 1
UNARY_OPERATOR	8608:38	8608:38	22	-
LEAF_NODE	8608:38	8608:38	23	-
FIELD	8608:39	8608:39	22	1
LEAF_NODE	8608:39	8608:39	23	1
LEAF_NODE	8608:40	8608:40	21	)
LEAF_NODE	8608:41	8608:41	19	;
LEAF_NODE	8609:16	8609:16	17	}
JUMP_STATEMENT	8610:14	8610:19	15	break DESTINATION ;
KEYWORD	8610:14	8610:14	16	break
LEAF_NODE	8610:14	8610:14	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8610:19	8610:19	16	;
LABEL	8611:20	8611:26	15	case 2 :
LEAF_NODE	8611:20	8611:20	16	case
LEAF_NODE	8611:25	8611:25	16	2
LEAF_NODE	8611:26	8611:26	16	:
SELECTION	8611:28	8613:30	15	
KEYWORD	8611:28	8611:28	16	if
LEAF_NODE	8611:28	8611:28	17	if
LEAF_NODE	8611:31	8611:31	16	(
CONDITION	8611:32	8611:32	16	rotateContigSamples24bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8611:32	8611:32	17	rotateContigSamples24bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8611:32	8612:44	18	rotateContigSamples24bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8611:32	8611:32	19	rotateContigSamples24bits
LEAF_NODE	8611:32	8611:32	20	rotateContigSamples24bits
LEAF_NODE	8611:57	8611:57	19	(
ARGUMENT	8611:58	8611:58	19	rotation
FIELD	8611:58	8611:58	20	rotation
LEAF_NODE	8611:58	8611:58	21	rotation
LEAF_NODE	8611:66	8611:66	19	,
ARGUMENT	8611:68	8611:68	19	spp
FIELD	8611:68	8611:68	20	spp
LEAF_NODE	8611:68	8611:68	21	spp
LEAF_NODE	8611:71	8611:71	19	,
ARGUMENT	8611:73	8611:73	19	bps
FIELD	8611:73	8611:73	20	bps
LEAF_NODE	8611:73	8611:73	21	bps
LEAF_NODE	8611:76	8611:76	19	,
ARGUMENT	8611:78	8611:78	19	width
FIELD	8611:78	8611:78	20	width
LEAF_NODE	8611:78	8611:78	21	width
LEAF_NODE	8611:83	8611:83	19	,
ARGUMENT	8612:23	8612:23	19	length
FIELD	8612:23	8612:23	20	length
LEAF_NODE	8612:23	8612:23	21	length
LEAF_NODE	8612:29	8612:29	19	,
ARGUMENT	8612:31	8612:31	19	col
FIELD	8612:31	8612:31	20	col
LEAF_NODE	8612:31	8612:31	21	col
LEAF_NODE	8612:34	8612:34	19	,
ARGUMENT	8612:36	8612:36	19	src
FIELD	8612:36	8612:36	20	src
LEAF_NODE	8612:36	8612:36	21	src
LEAF_NODE	8612:39	8612:39	19	,
ARGUMENT	8612:41	8612:41	19	dst
FIELD	8612:41	8612:41	20	dst
LEAF_NODE	8612:41	8612:41	21	dst
LEAF_NODE	8612:44	8612:44	19	)
LEAF_NODE	8612:45	8612:45	16	)
STATEMENTS	8613:30	8616:30	16	
LEAF_NODE	8613:30	8613:30	17	{
STATEMENTS	8614:16	8615:30	17	
EXPR_STATEMENT	8614:16	8614:32	18	_TIFFfree ( rbuff ) ;
EXPR	8614:16	8614:16	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8614:16	8614:31	20	_TIFFfree ( rbuff )
CALLEE	8614:16	8614:16	21	_TIFFfree
LEAF_NODE	8614:16	8614:16	22	_TIFFfree
LEAF_NODE	8614:25	8614:25	21	(
ARGUMENT	8614:26	8614:26	21	rbuff
FIELD	8614:26	8614:26	22	rbuff
LEAF_NODE	8614:26	8614:26	23	rbuff
LEAF_NODE	8614:31	8614:31	21	)
LEAF_NODE	8614:32	8614:32	19	;
JUMP_STATEMENT	8615:30	8615:41	18	return ( - 1 ) ;
KEYWORD	8615:30	8615:30	19	return
LEAF_NODE	8615:30	8615:30	20	return
DESTINATION	8615:37	8615:37	19	( - 1 )
EXPR	8615:37	8615:40	20	( - 1 )
LEAF_NODE	8615:37	8615:37	21	(
UNARY_EXPR	8615:38	8615:39	21	- 1
UNARY_OPERATOR	8615:38	8615:38	22	-
LEAF_NODE	8615:38	8615:38	23	-
FIELD	8615:39	8615:39	22	1
LEAF_NODE	8615:39	8615:39	23	1
LEAF_NODE	8615:40	8615:40	21	)
LEAF_NODE	8615:41	8615:41	19	;
LEAF_NODE	8616:30	8616:30	17	}
JUMP_STATEMENT	8617:29	8617:34	15	break DESTINATION ;
KEYWORD	8617:29	8617:29	16	break
LEAF_NODE	8617:29	8617:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8617:34	8617:34	16	;
LABEL	8618:20	8618:26	15	case 3 :
LEAF_NODE	8618:20	8618:20	16	case
LEAF_NODE	8618:25	8618:25	16	3
LEAF_NODE	8618:26	8618:26	16	:
LABEL	8619:20	8619:26	15	case 4 :
LEAF_NODE	8619:20	8619:20	16	case
LEAF_NODE	8619:25	8619:25	16	4
LEAF_NODE	8619:26	8619:26	16	:
LABEL	8620:20	8620:26	15	case 5 :
LEAF_NODE	8620:20	8620:20	16	case
LEAF_NODE	8620:25	8620:25	16	5
LEAF_NODE	8620:26	8620:26	16	:
SELECTION	8620:28	8622:30	15	
KEYWORD	8620:28	8620:28	16	if
LEAF_NODE	8620:28	8620:28	17	if
LEAF_NODE	8620:31	8620:31	16	(
CONDITION	8620:32	8620:32	16	rotateContigSamples32bits ( rotation , spp , bps , width , length , col , src , dst )
EXPR	8620:32	8620:32	17	rotateContigSamples32bits ( rotation , spp , bps , width , length , col , src , dst )
FUNCTION_CALL	8620:32	8621:44	18	rotateContigSamples32bits ( rotation , spp , bps , width , length , col , src , dst )
CALLEE	8620:32	8620:32	19	rotateContigSamples32bits
LEAF_NODE	8620:32	8620:32	20	rotateContigSamples32bits
LEAF_NODE	8620:57	8620:57	19	(
ARGUMENT	8620:58	8620:58	19	rotation
FIELD	8620:58	8620:58	20	rotation
LEAF_NODE	8620:58	8620:58	21	rotation
LEAF_NODE	8620:66	8620:66	19	,
ARGUMENT	8620:68	8620:68	19	spp
FIELD	8620:68	8620:68	20	spp
LEAF_NODE	8620:68	8620:68	21	spp
LEAF_NODE	8620:71	8620:71	19	,
ARGUMENT	8620:73	8620:73	19	bps
FIELD	8620:73	8620:73	20	bps
LEAF_NODE	8620:73	8620:73	21	bps
LEAF_NODE	8620:76	8620:76	19	,
ARGUMENT	8620:78	8620:78	19	width
FIELD	8620:78	8620:78	20	width
LEAF_NODE	8620:78	8620:78	21	width
LEAF_NODE	8620:83	8620:83	19	,
ARGUMENT	8621:23	8621:23	19	length
FIELD	8621:23	8621:23	20	length
LEAF_NODE	8621:23	8621:23	21	length
LEAF_NODE	8621:29	8621:29	19	,
ARGUMENT	8621:31	8621:31	19	col
FIELD	8621:31	8621:31	20	col
LEAF_NODE	8621:31	8621:31	21	col
LEAF_NODE	8621:34	8621:34	19	,
ARGUMENT	8621:36	8621:36	19	src
FIELD	8621:36	8621:36	20	src
LEAF_NODE	8621:36	8621:36	21	src
LEAF_NODE	8621:39	8621:39	19	,
ARGUMENT	8621:41	8621:41	19	dst
FIELD	8621:41	8621:41	20	dst
LEAF_NODE	8621:41	8621:41	21	dst
LEAF_NODE	8621:44	8621:44	19	)
LEAF_NODE	8621:45	8621:45	16	)
STATEMENTS	8622:30	8625:30	16	
LEAF_NODE	8622:30	8622:30	17	{
STATEMENTS	8623:16	8624:30	17	
EXPR_STATEMENT	8623:16	8623:32	18	_TIFFfree ( rbuff ) ;
EXPR	8623:16	8623:16	19	_TIFFfree ( rbuff )
FUNCTION_CALL	8623:16	8623:31	20	_TIFFfree ( rbuff )
CALLEE	8623:16	8623:16	21	_TIFFfree
LEAF_NODE	8623:16	8623:16	22	_TIFFfree
LEAF_NODE	8623:25	8623:25	21	(
ARGUMENT	8623:26	8623:26	21	rbuff
FIELD	8623:26	8623:26	22	rbuff
LEAF_NODE	8623:26	8623:26	23	rbuff
LEAF_NODE	8623:31	8623:31	21	)
LEAF_NODE	8623:32	8623:32	19	;
JUMP_STATEMENT	8624:30	8624:41	18	return ( - 1 ) ;
KEYWORD	8624:30	8624:30	19	return
LEAF_NODE	8624:30	8624:30	20	return
DESTINATION	8624:37	8624:37	19	( - 1 )
EXPR	8624:37	8624:40	20	( - 1 )
LEAF_NODE	8624:37	8624:37	21	(
UNARY_EXPR	8624:38	8624:39	21	- 1
UNARY_OPERATOR	8624:38	8624:38	22	-
LEAF_NODE	8624:38	8624:38	23	-
FIELD	8624:39	8624:39	22	1
LEAF_NODE	8624:39	8624:39	23	1
LEAF_NODE	8624:40	8624:40	21	)
LEAF_NODE	8624:41	8624:41	19	;
LEAF_NODE	8625:30	8625:30	17	}
JUMP_STATEMENT	8626:29	8626:34	15	break DESTINATION ;
KEYWORD	8626:29	8626:29	16	break
LEAF_NODE	8626:29	8626:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	8626:34	8626:34	16	;
LABEL	8627:20	8627:27	15	default :
LEAF_NODE	8627:20	8627:20	16	default
LEAF_NODE	8627:27	8627:27	16	:
EXPR_STATEMENT	8627:29	8627:85	15	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps ) ;
EXPR	8627:29	8627:29	16	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	8627:29	8627:84	17	TIFFError ( "rotateImage" , "Unsupported bit depth %d" , bps )
CALLEE	8627:29	8627:29	18	TIFFError
LEAF_NODE	8627:29	8627:29	19	TIFFError
LEAF_NODE	8627:38	8627:38	18	(
ARGUMENT	8627:39	8627:39	18	"rotateImage"
FIELD	8627:39	8627:39	19	"rotateImage"
LEAF_NODE	8627:39	8627:39	20	"rotateImage"
LEAF_NODE	8627:52	8627:52	18	,
ARGUMENT	8627:53	8627:53	18	"Unsupported bit depth %d"
FIELD	8627:53	8627:53	19	"Unsupported bit depth %d"
LEAF_NODE	8627:53	8627:53	20	"Unsupported bit depth %d"
LEAF_NODE	8627:79	8627:79	18	,
ARGUMENT	8627:81	8627:81	18	bps
FIELD	8627:81	8627:81	19	bps
LEAF_NODE	8627:81	8627:81	20	bps
LEAF_NODE	8627:84	8627:84	18	)
LEAF_NODE	8627:85	8627:85	16	;
EXPR_STATEMENT	8628:15	8628:31	15	_TIFFfree ( rbuff ) ;
EXPR	8628:15	8628:15	16	_TIFFfree ( rbuff )
FUNCTION_CALL	8628:15	8628:30	17	_TIFFfree ( rbuff )
CALLEE	8628:15	8628:15	18	_TIFFfree
LEAF_NODE	8628:15	8628:15	19	_TIFFfree
LEAF_NODE	8628:24	8628:24	18	(
ARGUMENT	8628:25	8628:25	18	rbuff
FIELD	8628:25	8628:25	19	rbuff
LEAF_NODE	8628:25	8628:25	20	rbuff
LEAF_NODE	8628:30	8628:30	18	)
LEAF_NODE	8628:31	8628:31	16	;
JUMP_STATEMENT	8629:29	8629:40	15	return ( - 1 ) ;
KEYWORD	8629:29	8629:29	16	return
LEAF_NODE	8629:29	8629:29	17	return
DESTINATION	8629:36	8629:36	16	( - 1 )
EXPR	8629:36	8629:39	17	( - 1 )
LEAF_NODE	8629:36	8629:36	18	(
UNARY_EXPR	8629:37	8629:38	18	- 1
UNARY_OPERATOR	8629:37	8629:37	19	-
LEAF_NODE	8629:37	8629:37	20	-
FIELD	8629:38	8629:38	19	1
LEAF_NODE	8629:38	8629:38	20	1
LEAF_NODE	8629:39	8629:39	18	)
LEAF_NODE	8629:40	8629:40	16	;
LEAF_NODE	8630:6	8630:6	14	}
LEAF_NODE	8631:4	8631:4	11	}
LEAF_NODE	8632:2	8632:2	8	}
EXPR_STATEMENT	8633:14	8633:30	6	_TIFFfree ( ibuff ) ;
EXPR	8633:14	8633:14	7	_TIFFfree ( ibuff )
FUNCTION_CALL	8633:14	8633:29	8	_TIFFfree ( ibuff )
CALLEE	8633:14	8633:14	9	_TIFFfree
LEAF_NODE	8633:14	8633:14	10	_TIFFfree
LEAF_NODE	8633:23	8633:23	9	(
ARGUMENT	8633:24	8633:24	9	ibuff
FIELD	8633:24	8633:24	10	ibuff
LEAF_NODE	8633:24	8633:24	11	ibuff
LEAF_NODE	8633:29	8633:29	9	)
LEAF_NODE	8633:30	8633:30	7	;
EXPR_STATEMENT	8634:14	8634:34	6	* ( ibuff_ptr ) = rbuff ;
EXPR	8634:14	8634:14	7	* ( ibuff_ptr ) = rbuff
ASSIGN	8634:14	8634:29	8	* ( ibuff_ptr ) = rbuff
LVAL	8634:14	8634:14	9	* ( ibuff_ptr )
UNARY_EXPR	8634:14	8634:25	10	* ( ibuff_ptr )
UNARY_OPERATOR	8634:14	8634:14	11	*
LEAF_NODE	8634:14	8634:14	12	*
LEAF_NODE	8634:15	8634:15	11	(
FIELD	8634:16	8634:16	11	ibuff_ptr
LEAF_NODE	8634:16	8634:16	12	ibuff_ptr
LEAF_NODE	8634:25	8634:25	11	)
ASSIGN_OP	8634:27	8634:27	9	=
LEAF_NODE	8634:27	8634:27	10	=
RVAL	8634:29	8634:29	9	rbuff
FIELD	8634:29	8634:29	10	rbuff
LEAF_NODE	8634:29	8634:29	11	rbuff
LEAF_NODE	8634:34	8634:34	7	;
EXPR_STATEMENT	8636:14	8636:33	6	* img_width = length ;
EXPR	8636:14	8636:14	7	* img_width = length
ASSIGN	8636:14	8636:27	8	* img_width = length
LVAL	8636:14	8636:14	9	* img_width
UNARY_EXPR	8636:14	8636:15	10	* img_width
UNARY_OPERATOR	8636:14	8636:14	11	*
LEAF_NODE	8636:14	8636:14	12	*
FIELD	8636:15	8636:15	11	img_width
LEAF_NODE	8636:15	8636:15	12	img_width
ASSIGN_OP	8636:25	8636:25	9	=
LEAF_NODE	8636:25	8636:25	10	=
RVAL	8636:27	8636:27	9	length
FIELD	8636:27	8636:27	10	length
LEAF_NODE	8636:27	8636:27	11	length
LEAF_NODE	8636:33	8636:33	7	;
EXPR_STATEMENT	8637:14	8637:33	6	* img_length = width ;
EXPR	8637:14	8637:14	7	* img_length = width
ASSIGN	8637:14	8637:28	8	* img_length = width
LVAL	8637:14	8637:14	9	* img_length
UNARY_EXPR	8637:14	8637:15	10	* img_length
UNARY_OPERATOR	8637:14	8637:14	11	*
LEAF_NODE	8637:14	8637:14	12	*
FIELD	8637:15	8637:15	11	img_length
LEAF_NODE	8637:15	8637:15	12	img_length
ASSIGN_OP	8637:26	8637:26	9	=
LEAF_NODE	8637:26	8637:26	10	=
RVAL	8637:28	8637:28	9	width
FIELD	8637:28	8637:28	10	width
LEAF_NODE	8637:28	8637:28	11	width
LEAF_NODE	8637:33	8637:33	7	;
EXPR_STATEMENT	8638:14	8638:35	6	image -> width = length ;
EXPR	8638:14	8638:14	7	image -> width = length
ASSIGN	8638:14	8638:29	8	image -> width = length
LVAL	8638:14	8638:14	9	image -> width
FIELD	8638:14	8638:21	10	image -> width
LEAF_NODE	8638:14	8638:14	11	image
LEAF_NODE	8638:19	8638:19	11	->
LEAF_NODE	8638:21	8638:21	11	width
ASSIGN_OP	8638:27	8638:27	9	=
LEAF_NODE	8638:27	8638:27	10	=
RVAL	8638:29	8638:29	9	length
FIELD	8638:29	8638:29	10	length
LEAF_NODE	8638:29	8638:29	11	length
LEAF_NODE	8638:35	8638:35	7	;
EXPR_STATEMENT	8639:14	8639:35	6	image -> length = width ;
EXPR	8639:14	8639:14	7	image -> length = width
ASSIGN	8639:14	8639:30	8	image -> length = width
LVAL	8639:14	8639:14	9	image -> length
FIELD	8639:14	8639:21	10	image -> length
LEAF_NODE	8639:14	8639:14	11	image
LEAF_NODE	8639:19	8639:19	11	->
LEAF_NODE	8639:21	8639:21	11	length
ASSIGN_OP	8639:28	8639:28	9	=
LEAF_NODE	8639:28	8639:28	10	=
RVAL	8639:30	8639:30	9	width
FIELD	8639:30	8639:30	10	width
LEAF_NODE	8639:30	8639:30	11	width
LEAF_NODE	8639:35	8639:35	7	;
EXPR_STATEMENT	8640:14	8640:36	6	res_temp = image -> xres ;
EXPR	8640:14	8640:14	7	res_temp = image -> xres
ASSIGN	8640:14	8640:25	8	res_temp = image -> xres
LVAL	8640:14	8640:14	9	res_temp
FIELD	8640:14	8640:14	10	res_temp
LEAF_NODE	8640:14	8640:14	11	res_temp
ASSIGN_OP	8640:23	8640:23	9	=
LEAF_NODE	8640:23	8640:23	10	=
RVAL	8640:25	8640:25	9	image -> xres
FIELD	8640:25	8640:32	10	image -> xres
LEAF_NODE	8640:25	8640:25	11	image
LEAF_NODE	8640:30	8640:30	11	->
LEAF_NODE	8640:32	8640:32	11	xres
LEAF_NODE	8640:36	8640:36	7	;
EXPR_STATEMENT	8641:14	8641:39	6	image -> xres = image -> yres ;
EXPR	8641:14	8641:14	7	image -> xres = image -> yres
ASSIGN	8641:14	8641:28	8	image -> xres = image -> yres
LVAL	8641:14	8641:14	9	image -> xres
FIELD	8641:14	8641:21	10	image -> xres
LEAF_NODE	8641:14	8641:14	11	image
LEAF_NODE	8641:19	8641:19	11	->
LEAF_NODE	8641:21	8641:21	11	xres
ASSIGN_OP	8641:26	8641:26	9	=
LEAF_NODE	8641:26	8641:26	10	=
RVAL	8641:28	8641:28	9	image -> yres
FIELD	8641:28	8641:35	10	image -> yres
LEAF_NODE	8641:28	8641:28	11	image
LEAF_NODE	8641:33	8641:33	11	->
LEAF_NODE	8641:35	8641:35	11	yres
LEAF_NODE	8641:39	8641:39	7	;
EXPR_STATEMENT	8642:14	8642:36	6	image -> yres = res_temp ;
EXPR	8642:14	8642:14	7	image -> yres = res_temp
ASSIGN	8642:14	8642:28	8	image -> yres = res_temp
LVAL	8642:14	8642:14	9	image -> yres
FIELD	8642:14	8642:21	10	image -> yres
LEAF_NODE	8642:14	8642:14	11	image
LEAF_NODE	8642:19	8642:19	11	->
LEAF_NODE	8642:21	8642:21	11	yres
ASSIGN_OP	8642:26	8642:26	9	=
LEAF_NODE	8642:26	8642:26	10	=
RVAL	8642:28	8642:28	9	res_temp
FIELD	8642:28	8642:28	10	res_temp
LEAF_NODE	8642:28	8642:28	11	res_temp
LEAF_NODE	8642:36	8642:36	7	;
JUMP_STATEMENT	8643:14	8643:19	6	break DESTINATION ;
KEYWORD	8643:14	8643:14	7	break
LEAF_NODE	8643:14	8643:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	8643:19	8643:19	7	;
LABEL	8644:4	8644:11	6	default :
LEAF_NODE	8644:4	8644:4	7	default
LEAF_NODE	8644:11	8644:11	7	:
JUMP_STATEMENT	8645:14	8645:19	6	break DESTINATION ;
KEYWORD	8645:14	8645:14	7	break
LEAF_NODE	8645:14	8645:14	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	8645:19	8645:19	7	;
LEAF_NODE	8646:4	8646:4	5	}
JUMP_STATEMENT	8648:2	8648:12	3	return ( 0 ) ;
KEYWORD	8648:2	8648:2	4	return
LEAF_NODE	8648:2	8648:2	5	return
DESTINATION	8648:9	8648:9	4	( 0 )
EXPR	8648:9	8648:11	5	( 0 )
LEAF_NODE	8648:9	8648:9	6	(
FIELD	8648:10	8648:10	6	0
LEAF_NODE	8648:10	8648:10	7	0
LEAF_NODE	8648:11	8648:11	6	)
LEAF_NODE	8648:12	8648:12	4	;
LEAF_NODE	8649:2	8649:2	2	}
FUNCTION_DEF	8651:0	8713:2	1	
RETURN_TYPE	8651:0	8651:7	2	static int
LEAF_NODE	8651:0	8651:0	3	static
TYPE_NAME	8651:7	8651:7	3	int
LEAF_NODE	8651:7	8651:7	4	int
FUNCTION_NAME	8652:0	8652:0	2	reverseSamples8bits
LEAF_NODE	8652:0	8652:0	3	reverseSamples8bits
PARAMETER_LIST	8652:20	8653:47	2	( uint16 spp , uint16 bps , uint32 width , uint8 * ibuff , uint8 * obuff )
LEAF_NODE	8652:20	8652:20	3	(
PARAMETER_DECL	8652:21	8652:28	3	uint16 spp
TYPE	8652:21	8652:21	4	uint16
TYPE_NAME	8652:21	8652:21	5	uint16
LEAF_NODE	8652:21	8652:21	6	uint16
NAME	8652:28	8652:28	4	spp
LEAF_NODE	8652:28	8652:28	5	spp
LEAF_NODE	8652:31	8652:31	3	,
PARAMETER_DECL	8652:33	8652:40	3	uint16 bps
TYPE	8652:33	8652:33	4	uint16
TYPE_NAME	8652:33	8652:33	5	uint16
LEAF_NODE	8652:33	8652:33	6	uint16
NAME	8652:40	8652:40	4	bps
LEAF_NODE	8652:40	8652:40	5	bps
LEAF_NODE	8652:43	8652:43	3	,
PARAMETER_DECL	8652:45	8652:52	3	uint32 width
TYPE	8652:45	8652:45	4	uint32
TYPE_NAME	8652:45	8652:45	5	uint32
LEAF_NODE	8652:45	8652:45	6	uint32
NAME	8652:52	8652:52	4	width
LEAF_NODE	8652:52	8652:52	5	width
LEAF_NODE	8652:57	8652:57	3	,
PARAMETER_DECL	8653:21	8653:28	3	uint8 * ibuff
TYPE	8653:21	8653:27	4	uint8 *
TYPE_NAME	8653:21	8653:21	5	uint8
LEAF_NODE	8653:21	8653:21	6	uint8
POINTER	8653:27	8653:27	5	*
LEAF_NODE	8653:27	8653:27	6	*
NAME	8653:28	8653:28	4	ibuff
LEAF_NODE	8653:28	8653:28	5	ibuff
LEAF_NODE	8653:33	8653:33	3	,
PARAMETER_DECL	8653:35	8653:42	3	uint8 * obuff
TYPE	8653:35	8653:41	4	uint8 *
TYPE_NAME	8653:35	8653:35	5	uint8
LEAF_NODE	8653:35	8653:35	6	uint8
POINTER	8653:41	8653:41	5	*
LEAF_NODE	8653:41	8653:41	6	*
NAME	8653:42	8653:42	4	obuff
LEAF_NODE	8653:42	8653:42	5	obuff
LEAF_NODE	8653:47	8653:47	3	)
LEAF_NODE	8654:2	8654:2	2	{
STATEMENTS	8655:2	8712:2	2	
SIMPLE_DECL	8655:2	8655:25	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8655:2	8655:11	4	int ready_bits ; ready_bits = 0
TYPE	8655:2	8655:2	5	int
TYPE_NAME	8655:2	8655:2	6	int
LEAF_NODE	8655:2	8655:2	7	int
NAME	8655:11	8655:11	5	ready_bits
LEAF_NODE	8655:11	8655:11	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8655:11	8655:11	5	ready_bits = 0
ASSIGN	8655:11	8655:24	6	ready_bits = 0
LVAL	8655:11	8655:11	7	ready_bits
NAME	8655:11	8655:11	8	ready_bits
LEAF_NODE	8655:11	8655:11	9	ready_bits
ASSIGN_OP	8655:22	8655:22	7	=
LEAF_NODE	8655:22	8655:22	8	=
RVAL	8655:24	8655:24	7	0
FIELD	8655:24	8655:24	8	0
LEAF_NODE	8655:24	8655:24	9	0
LEAF_NODE	8655:25	8655:25	4	;
SIMPLE_DECL	8656:2	8656:14	3	uint32 col ;
VAR_DECL	8656:2	8656:11	4	uint32 col
TYPE	8656:2	8656:2	5	uint32
TYPE_NAME	8656:2	8656:2	6	uint32
LEAF_NODE	8656:2	8656:2	7	uint32
NAME	8656:11	8656:11	5	col
LEAF_NODE	8656:11	8656:11	6	col
LEAF_NODE	8656:14	8656:14	4	;
SIMPLE_DECL	8657:2	8657:28	3	uint32 src_byte , uint32 src_bit ;
INIT_DECL_LIST	8657:2	8657:2	4	uint32 src_byte , uint32 src_bit
VAR_DECL	8657:2	8657:11	5	uint32 src_byte
TYPE	8657:2	8657:2	6	uint32
TYPE_NAME	8657:2	8657:2	7	uint32
LEAF_NODE	8657:2	8657:2	8	uint32
NAME	8657:11	8657:11	6	src_byte
LEAF_NODE	8657:11	8657:11	7	src_byte
LEAF_NODE	8657:19	8657:19	5	,
VAR_DECL	8657:2	8657:21	5	uint32 src_bit
TYPE	8657:2	8657:2	6	uint32
TYPE_NAME	8657:2	8657:2	7	uint32
LEAF_NODE	8657:2	8657:2	8	uint32
NAME	8657:21	8657:21	6	src_bit
LEAF_NODE	8657:21	8657:21	7	src_bit
LEAF_NODE	8657:28	8657:28	4	;
SIMPLE_DECL	8658:2	8658:25	3	uint32 bit_offset ; bit_offset = 0 ;
VAR_DECL	8658:2	8658:11	4	uint32 bit_offset ; bit_offset = 0
TYPE	8658:2	8658:2	5	uint32
TYPE_NAME	8658:2	8658:2	6	uint32
LEAF_NODE	8658:2	8658:2	7	uint32
NAME	8658:11	8658:11	5	bit_offset
LEAF_NODE	8658:11	8658:11	6	bit_offset
LEAF_NODE	0:0	0:0	5	;
INIT	8658:11	8658:11	5	bit_offset = 0
ASSIGN	8658:11	8658:24	6	bit_offset = 0
LVAL	8658:11	8658:11	7	bit_offset
NAME	8658:11	8658:11	8	bit_offset
LEAF_NODE	8658:11	8658:11	9	bit_offset
ASSIGN_OP	8658:22	8658:22	7	=
LEAF_NODE	8658:22	8658:22	8	=
RVAL	8658:24	8658:24	7	0
FIELD	8658:24	8658:24	8	0
LEAF_NODE	8658:24	8658:24	9	0
LEAF_NODE	8658:25	8658:25	4	;
SIMPLE_DECL	8659:2	8659:40	3	uint8 match_bits ; match_bits = 0 , uint8 mask_bits ; mask_bits = 0 ;
INIT_DECL_LIST	8659:2	8659:2	4	uint8 match_bits ; match_bits = 0 , uint8 mask_bits ; mask_bits = 0
VAR_DECL	8659:2	8659:11	5	uint8 match_bits ; match_bits = 0
TYPE	8659:2	8659:2	6	uint8
TYPE_NAME	8659:2	8659:2	7	uint8
LEAF_NODE	8659:2	8659:2	8	uint8
NAME	8659:11	8659:11	6	match_bits
LEAF_NODE	8659:11	8659:11	7	match_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8659:11	8659:11	6	match_bits = 0
ASSIGN	8659:11	8659:24	7	match_bits = 0
LVAL	8659:11	8659:11	8	match_bits
NAME	8659:11	8659:11	9	match_bits
LEAF_NODE	8659:11	8659:11	10	match_bits
ASSIGN_OP	8659:22	8659:22	8	=
LEAF_NODE	8659:22	8659:22	9	=
RVAL	8659:24	8659:24	8	0
FIELD	8659:24	8659:24	9	0
LEAF_NODE	8659:24	8659:24	10	0
LEAF_NODE	8659:25	8659:25	5	,
VAR_DECL	8659:2	8659:27	5	uint8 mask_bits ; mask_bits = 0
TYPE	8659:2	8659:2	6	uint8
TYPE_NAME	8659:2	8659:2	7	uint8
LEAF_NODE	8659:2	8659:2	8	uint8
NAME	8659:27	8659:27	6	mask_bits
LEAF_NODE	8659:27	8659:27	7	mask_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8659:27	8659:27	6	mask_bits = 0
ASSIGN	8659:27	8659:39	7	mask_bits = 0
LVAL	8659:27	8659:27	8	mask_bits
NAME	8659:27	8659:27	9	mask_bits
LEAF_NODE	8659:27	8659:27	10	mask_bits
ASSIGN_OP	8659:37	8659:37	8	=
LEAF_NODE	8659:37	8659:37	9	=
RVAL	8659:39	8659:39	8	0
FIELD	8659:39	8659:39	9	0
LEAF_NODE	8659:39	8659:39	10	0
LEAF_NODE	8659:40	8659:40	4	;
SIMPLE_DECL	8660:2	8660:31	3	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	8660:2	8660:2	4	uint8 buff1 ; buff1 = 0 , uint8 buff2 ; buff2 = 0
VAR_DECL	8660:2	8660:11	5	uint8 buff1 ; buff1 = 0
TYPE	8660:2	8660:2	6	uint8
TYPE_NAME	8660:2	8660:2	7	uint8
LEAF_NODE	8660:2	8660:2	8	uint8
NAME	8660:11	8660:11	6	buff1
LEAF_NODE	8660:11	8660:11	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8660:11	8660:11	6	buff1 = 0
ASSIGN	8660:11	8660:19	7	buff1 = 0
LVAL	8660:11	8660:11	8	buff1
NAME	8660:11	8660:11	9	buff1
LEAF_NODE	8660:11	8660:11	10	buff1
ASSIGN_OP	8660:17	8660:17	8	=
LEAF_NODE	8660:17	8660:17	9	=
RVAL	8660:19	8660:19	8	0
FIELD	8660:19	8660:19	9	0
LEAF_NODE	8660:19	8660:19	10	0
LEAF_NODE	8660:20	8660:20	5	,
VAR_DECL	8660:2	8660:22	5	uint8 buff2 ; buff2 = 0
TYPE	8660:2	8660:2	6	uint8
TYPE_NAME	8660:2	8660:2	7	uint8
LEAF_NODE	8660:2	8660:2	8	uint8
NAME	8660:22	8660:22	6	buff2
LEAF_NODE	8660:22	8660:22	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	8660:22	8660:22	6	buff2 = 0
ASSIGN	8660:22	8660:30	7	buff2 = 0
LVAL	8660:22	8660:22	8	buff2
NAME	8660:22	8660:22	9	buff2
LEAF_NODE	8660:22	8660:22	10	buff2
ASSIGN_OP	8660:28	8660:28	8	=
LEAF_NODE	8660:28	8660:28	9	=
RVAL	8660:30	8660:30	8	0
FIELD	8660:30	8660:30	9	0
LEAF_NODE	8660:30	8660:30	10	0
LEAF_NODE	8660:31	8660:31	4	;
SIMPLE_DECL	8661:2	8661:20	3	unsigned char * src ;
VAR_DECL	8661:2	8661:17	4	unsigned char * src
TYPE	8661:2	8661:16	5	unsigned char *
TYPE_NAME	8661:2	8661:11	6	unsigned char
LEAF_NODE	8661:2	8661:2	7	unsigned
LEAF_NODE	8661:11	8661:11	7	char
POINTER	8661:16	8661:16	6	*
LEAF_NODE	8661:16	8661:16	7	*
NAME	8661:17	8661:17	5	src
LEAF_NODE	8661:17	8661:17	6	src
LEAF_NODE	8661:20	8661:20	4	;
SIMPLE_DECL	8662:2	8662:20	3	unsigned char * dst ;
VAR_DECL	8662:2	8662:17	4	unsigned char * dst
TYPE	8662:2	8662:16	5	unsigned char *
TYPE_NAME	8662:2	8662:11	6	unsigned char
LEAF_NODE	8662:2	8662:2	7	unsigned
LEAF_NODE	8662:11	8662:11	7	char
POINTER	8662:16	8662:16	6	*
LEAF_NODE	8662:16	8662:16	7	*
NAME	8662:17	8662:17	5	dst
LEAF_NODE	8662:17	8662:17	6	dst
LEAF_NODE	8662:20	8662:20	4	;
SIMPLE_DECL	8663:2	8663:18	3	tsample_t sample ;
VAR_DECL	8663:2	8663:12	4	tsample_t sample
TYPE	8663:2	8663:2	5	tsample_t
TYPE_NAME	8663:2	8663:2	6	tsample_t
LEAF_NODE	8663:2	8663:2	7	tsample_t
NAME	8663:12	8663:12	5	sample
LEAF_NODE	8663:12	8663:12	6	sample
LEAF_NODE	8663:18	8663:18	4	;
SELECTION	8665:2	8666:4	3	
KEYWORD	8665:2	8665:2	4	if
LEAF_NODE	8665:2	8665:2	5	if
LEAF_NODE	8665:5	8665:5	4	(
CONDITION	8665:6	8665:6	4	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8665:6	8665:6	5	( ibuff == NULL ) || ( obuff == NULL )
OR	8665:6	8665:25	6	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8665:6	8665:20	7	( ibuff == NULL )
LEAF_NODE	8665:6	8665:6	8	(
FIELD	8665:7	8665:7	8	ibuff
LEAF_NODE	8665:7	8665:7	9	ibuff
EQ_OPERATOR	8665:13	8665:13	8	==
LEAF_NODE	8665:13	8665:13	9	==
FIELD	8665:16	8665:16	8	NULL
LEAF_NODE	8665:16	8665:16	9	NULL
LEAF_NODE	8665:20	8665:20	8	)
LEAF_NODE	8665:22	8665:22	7	||
EXPR	8665:25	8665:39	7	( obuff == NULL )
LEAF_NODE	8665:25	8665:25	8	(
FIELD	8665:26	8665:26	8	obuff
LEAF_NODE	8665:26	8665:26	9	obuff
EQ_OPERATOR	8665:32	8665:32	8	==
LEAF_NODE	8665:32	8665:32	9	==
FIELD	8665:35	8665:35	8	NULL
LEAF_NODE	8665:35	8665:35	9	NULL
LEAF_NODE	8665:39	8665:39	8	)
LEAF_NODE	8665:40	8665:40	4	)
STATEMENTS	8666:4	8669:4	4	
LEAF_NODE	8666:4	8666:4	5	{
STATEMENTS	8667:4	8668:4	5	
EXPR_STATEMENT	8667:4	8667:67	6	TIFFError ( "reverseSamples8bits" , "Invalid image or work buffer" ) ;
EXPR	8667:4	8667:4	7	TIFFError ( "reverseSamples8bits" , "Invalid image or work buffer" )
FUNCTION_CALL	8667:4	8667:66	8	TIFFError ( "reverseSamples8bits" , "Invalid image or work buffer" )
CALLEE	8667:4	8667:4	9	TIFFError
LEAF_NODE	8667:4	8667:4	10	TIFFError
LEAF_NODE	8667:13	8667:13	9	(
ARGUMENT	8667:14	8667:14	9	"reverseSamples8bits"
FIELD	8667:14	8667:14	10	"reverseSamples8bits"
LEAF_NODE	8667:14	8667:14	11	"reverseSamples8bits"
LEAF_NODE	8667:35	8667:35	9	,
ARGUMENT	8667:36	8667:36	9	"Invalid image or work buffer"
FIELD	8667:36	8667:36	10	"Invalid image or work buffer"
LEAF_NODE	8667:36	8667:36	11	"Invalid image or work buffer"
LEAF_NODE	8667:66	8667:66	9	)
LEAF_NODE	8667:67	8667:67	7	;
JUMP_STATEMENT	8668:4	8668:14	6	return ( 1 ) ;
KEYWORD	8668:4	8668:4	7	return
LEAF_NODE	8668:4	8668:4	8	return
DESTINATION	8668:11	8668:11	7	( 1 )
EXPR	8668:11	8668:13	8	( 1 )
LEAF_NODE	8668:11	8668:11	9	(
FIELD	8668:12	8668:12	9	1
LEAF_NODE	8668:12	8668:12	10	1
LEAF_NODE	8668:13	8668:13	9	)
LEAF_NODE	8668:14	8668:14	7	;
LEAF_NODE	8669:4	8669:4	5	}
EXPR_STATEMENT	8671:2	8671:16	3	ready_bits = 0 ;
EXPR	8671:2	8671:2	4	ready_bits = 0
ASSIGN	8671:2	8671:15	5	ready_bits = 0
LVAL	8671:2	8671:2	6	ready_bits
FIELD	8671:2	8671:2	7	ready_bits
LEAF_NODE	8671:2	8671:2	8	ready_bits
ASSIGN_OP	8671:13	8671:13	6	=
LEAF_NODE	8671:13	8671:13	7	=
RVAL	8671:15	8671:15	6	0
FIELD	8671:15	8671:15	7	0
LEAF_NODE	8671:15	8671:15	8	0
LEAF_NODE	8671:16	8671:16	4	;
EXPR_STATEMENT	8672:2	8672:38	3	mask_bits = ( uint8 ) - 1 >> ( 8 - bps ) ;
EXPR	8672:2	8672:2	4	mask_bits = ( uint8 ) - 1 >> ( 8 - bps )
ASSIGN	8672:2	8672:15	5	mask_bits = ( uint8 ) - 1 >> ( 8 - bps )
LVAL	8672:2	8672:2	6	mask_bits
FIELD	8672:2	8672:2	7	mask_bits
LEAF_NODE	8672:2	8672:2	8	mask_bits
ASSIGN_OP	8672:12	8672:12	6	=
LEAF_NODE	8672:12	8672:12	7	=
RVAL	8672:15	8672:37	6	( uint8 ) - 1 >> ( 8 - bps )
LEAF_NODE	8672:15	8672:15	7	(
TYPE_NAME	8672:16	8672:16	7	uint8
LEAF_NODE	8672:16	8672:16	8	uint8
LEAF_NODE	8672:21	8672:21	7	)
UNARY_EXPR	8672:22	8672:23	7	- 1
UNARY_OPERATOR	8672:22	8672:22	8	-
LEAF_NODE	8672:22	8672:22	9	-
FIELD	8672:23	8672:23	8	1
LEAF_NODE	8672:23	8672:23	9	1
LEAF_NODE	8672:25	8672:25	7	>>
LEAF_NODE	8672:28	8672:28	7	(
FIELD	8672:30	8672:30	7	8
LEAF_NODE	8672:30	8672:30	8	8
LEAF_NODE	8672:32	8672:32	7	-
FIELD	8672:34	8672:34	7	bps
LEAF_NODE	8672:34	8672:34	8	bps
LEAF_NODE	8672:37	8672:37	7	)
LEAF_NODE	8672:38	8672:38	4	;
EXPR_STATEMENT	8673:2	8673:13	3	dst = obuff ;
EXPR	8673:2	8673:2	4	dst = obuff
ASSIGN	8673:2	8673:8	5	dst = obuff
LVAL	8673:2	8673:2	6	dst
FIELD	8673:2	8673:2	7	dst
LEAF_NODE	8673:2	8673:2	8	dst
ASSIGN_OP	8673:6	8673:6	6	=
LEAF_NODE	8673:6	8673:6	7	=
RVAL	8673:8	8673:8	6	obuff
FIELD	8673:8	8673:8	7	obuff
LEAF_NODE	8673:8	8673:8	8	obuff
LEAF_NODE	8673:13	8673:13	4	;
ITERATION	8674:2	8675:4	3	
KEYWORD	8674:2	8674:2	4	for
LEAF_NODE	8674:2	8674:2	5	for
LEAF_NODE	8674:6	8674:6	4	(
FOR_INIT	8674:7	8674:18	4	col = width ;
EXPR	8674:7	8674:7	5	col = width
ASSIGN	8674:7	8674:13	6	col = width
LVAL	8674:7	8674:7	7	col
FIELD	8674:7	8674:7	8	col
LEAF_NODE	8674:7	8674:7	9	col
ASSIGN_OP	8674:11	8674:11	7	=
LEAF_NODE	8674:11	8674:11	8	=
RVAL	8674:13	8674:13	7	width
FIELD	8674:13	8674:13	8	width
LEAF_NODE	8674:13	8674:13	9	width
LEAF_NODE	8674:18	8674:18	5	;
CONDITION	8674:20	8674:20	4	col > 0
EXPR	8674:20	8674:26	5	col > 0
FIELD	8674:20	8674:20	6	col
LEAF_NODE	8674:20	8674:20	7	col
REL_OPERATOR	8674:24	8674:24	6	>
LEAF_NODE	8674:24	8674:24	7	>
FIELD	8674:26	8674:26	6	0
LEAF_NODE	8674:26	8674:26	7	0
LEAF_NODE	8674:27	8674:27	4	;
FOR_EXPR	8674:29	8674:29	4	col --
EXPR	8674:29	8674:29	5	col --
FIELD	8674:29	8674:32	6	col --
LEAF_NODE	8674:29	8674:29	7	col
LEAF_NODE	8674:32	8674:32	7	--
LEAF_NODE	8674:34	8674:34	4	)
STATEMENTS	8675:4	8705:4	4	
LEAF_NODE	8675:4	8675:4	5	{
STATEMENTS	8677:4	8678:4	5	
LEAF_NODE	8677:4	8677:4	6	bit_offset
LEAF_NODE	8677:15	8677:15	6	=
LEAF_NODE	8677:17	8677:17	6	(
LEAF_NODE	8677:18	8677:18	6	col
LEAF_NODE	8677:22	8677:22	6	-
LEAF_NODE	8677:24	8677:24	6	1
LEAF_NODE	8677:25	8677:25	6	)
EXPR_STATEMENT	8677:27	8677:38	6	* bps * spp ;
EXPR	8677:27	8677:35	7	* bps * spp
UNARY_EXPR	8677:27	8677:29	8	* bps
UNARY_OPERATOR	8677:27	8677:27	9	*
LEAF_NODE	8677:27	8677:27	10	*
FIELD	8677:29	8677:29	9	bps
LEAF_NODE	8677:29	8677:29	10	bps
LEAF_NODE	8677:33	8677:33	8	*
FIELD	8677:35	8677:35	8	spp
LEAF_NODE	8677:35	8677:35	9	spp
LEAF_NODE	8677:38	8677:38	7	;
ITERATION	8678:4	8679:6	6	
KEYWORD	8678:4	8678:4	7	for
LEAF_NODE	8678:4	8678:4	8	for
LEAF_NODE	8678:8	8678:8	7	(
FOR_INIT	8678:9	8678:19	7	sample = 0 ;
EXPR	8678:9	8678:9	8	sample = 0
ASSIGN	8678:9	8678:18	9	sample = 0
LVAL	8678:9	8678:9	10	sample
FIELD	8678:9	8678:9	11	sample
LEAF_NODE	8678:9	8678:9	12	sample
ASSIGN_OP	8678:16	8678:16	10	=
LEAF_NODE	8678:16	8678:16	11	=
RVAL	8678:18	8678:18	10	0
FIELD	8678:18	8678:18	11	0
LEAF_NODE	8678:18	8678:18	12	0
LEAF_NODE	8678:19	8678:19	8	;
CONDITION	8678:21	8678:21	7	sample < spp
EXPR	8678:21	8678:30	8	sample < spp
FIELD	8678:21	8678:21	9	sample
LEAF_NODE	8678:21	8678:21	10	sample
REL_OPERATOR	8678:28	8678:28	9	<
LEAF_NODE	8678:28	8678:28	10	<
FIELD	8678:30	8678:30	9	spp
LEAF_NODE	8678:30	8678:30	10	spp
LEAF_NODE	8678:33	8678:33	7	;
FOR_EXPR	8678:35	8678:35	7	sample ++
EXPR	8678:35	8678:35	8	sample ++
FIELD	8678:35	8678:41	9	sample ++
LEAF_NODE	8678:35	8678:35	10	sample
LEAF_NODE	8678:41	8678:41	10	++
LEAF_NODE	8678:43	8678:43	7	)
STATEMENTS	8679:6	8704:6	7	
LEAF_NODE	8679:6	8679:6	8	{
STATEMENTS	8680:6	8703:6	8	
SELECTION	8680:6	8681:8	9	
KEYWORD	8680:6	8680:6	10	if
LEAF_NODE	8680:6	8680:6	11	if
LEAF_NODE	8680:9	8680:9	10	(
CONDITION	8680:10	8680:10	10	sample == 0
EXPR	8680:10	8680:20	11	sample == 0
FIELD	8680:10	8680:10	12	sample
LEAF_NODE	8680:10	8680:10	13	sample
EQ_OPERATOR	8680:17	8680:17	12	==
LEAF_NODE	8680:17	8680:17	13	==
FIELD	8680:20	8680:20	12	0
LEAF_NODE	8680:20	8680:20	13	0
LEAF_NODE	8680:21	8680:21	10	)
STATEMENTS	8681:8	8684:8	10	
LEAF_NODE	8681:8	8681:8	11	{
STATEMENTS	8682:8	8683:8	11	
EXPR_STATEMENT	8682:8	8682:33	12	src_byte = bit_offset / 8 ;
EXPR	8682:8	8682:8	13	src_byte = bit_offset / 8
ASSIGN	8682:8	8682:19	14	src_byte = bit_offset / 8
LVAL	8682:8	8682:8	15	src_byte
FIELD	8682:8	8682:8	16	src_byte
LEAF_NODE	8682:8	8682:8	17	src_byte
ASSIGN_OP	8682:17	8682:17	15	=
LEAF_NODE	8682:17	8682:17	16	=
RVAL	8682:19	8682:32	15	bit_offset / 8
FIELD	8682:19	8682:19	16	bit_offset
LEAF_NODE	8682:19	8682:19	17	bit_offset
LEAF_NODE	8682:30	8682:30	16	/
FIELD	8682:32	8682:32	16	8
LEAF_NODE	8682:32	8682:32	17	8
LEAF_NODE	8682:33	8682:33	13	;
EXPR_STATEMENT	8683:8	8683:33	12	src_bit = bit_offset % 8 ;
EXPR	8683:8	8683:8	13	src_bit = bit_offset % 8
ASSIGN	8683:8	8683:19	14	src_bit = bit_offset % 8
LVAL	8683:8	8683:8	15	src_bit
FIELD	8683:8	8683:8	16	src_bit
LEAF_NODE	8683:8	8683:8	17	src_bit
ASSIGN_OP	8683:17	8683:17	15	=
LEAF_NODE	8683:17	8683:17	16	=
RVAL	8683:19	8683:32	15	bit_offset % 8
FIELD	8683:19	8683:19	16	bit_offset
LEAF_NODE	8683:19	8683:19	17	bit_offset
LEAF_NODE	8683:30	8683:30	16	%
FIELD	8683:32	8683:32	16	8
LEAF_NODE	8683:32	8683:32	17	8
LEAF_NODE	8683:33	8683:33	13	;
LEAF_NODE	8684:8	8684:8	11	}
SELECTION	8685:6	8686:8	9	
KEYWORD	8685:6	8685:6	10	else
LEAF_NODE	8685:6	8685:6	11	else
STATEMENTS	8686:8	8689:8	10	
LEAF_NODE	8686:8	8686:8	11	{
STATEMENTS	8687:8	8688:8	11	
EXPR_STATEMENT	8687:8	8687:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8687:8	8687:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8687:8	8687:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8687:8	8687:8	15	src_byte
FIELD	8687:8	8687:8	16	src_byte
LEAF_NODE	8687:8	8687:8	17	src_byte
ASSIGN_OP	8687:17	8687:17	15	=
LEAF_NODE	8687:17	8687:17	16	=
RVAL	8687:19	8687:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8687:19	8687:19	16	(
FIELD	8687:20	8687:20	16	bit_offset
LEAF_NODE	8687:20	8687:20	17	bit_offset
LEAF_NODE	8687:31	8687:31	16	+
LEAF_NODE	8687:33	8687:33	16	(
FIELD	8687:34	8687:34	16	sample
LEAF_NODE	8687:34	8687:34	17	sample
LEAF_NODE	8687:41	8687:41	16	*
FIELD	8687:43	8687:43	16	bps
LEAF_NODE	8687:43	8687:43	17	bps
LEAF_NODE	8687:46	8687:46	16	)
LEAF_NODE	8687:47	8687:47	16	)
LEAF_NODE	8687:49	8687:49	16	/
FIELD	8687:51	8687:51	16	8
LEAF_NODE	8687:51	8687:51	17	8
LEAF_NODE	8687:52	8687:52	13	;
EXPR_STATEMENT	8688:8	8688:52	12	src_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8688:8	8688:8	13	src_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8688:8	8688:19	14	src_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8688:8	8688:8	15	src_bit
FIELD	8688:8	8688:8	16	src_bit
LEAF_NODE	8688:8	8688:8	17	src_bit
ASSIGN_OP	8688:17	8688:17	15	=
LEAF_NODE	8688:17	8688:17	16	=
RVAL	8688:19	8688:51	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8688:19	8688:19	16	(
FIELD	8688:20	8688:20	16	bit_offset
LEAF_NODE	8688:20	8688:20	17	bit_offset
LEAF_NODE	8688:31	8688:31	16	+
LEAF_NODE	8688:33	8688:33	16	(
FIELD	8688:34	8688:34	16	sample
LEAF_NODE	8688:34	8688:34	17	sample
LEAF_NODE	8688:41	8688:41	16	*
FIELD	8688:43	8688:43	16	bps
LEAF_NODE	8688:43	8688:43	17	bps
LEAF_NODE	8688:46	8688:46	16	)
LEAF_NODE	8688:47	8688:47	16	)
LEAF_NODE	8688:49	8688:49	16	%
FIELD	8688:51	8688:51	16	8
LEAF_NODE	8688:51	8688:51	17	8
LEAF_NODE	8688:52	8688:52	13	;
LEAF_NODE	8689:8	8689:8	11	}
EXPR_STATEMENT	8691:6	8691:28	9	src = ibuff + src_byte ;
EXPR	8691:6	8691:6	10	src = ibuff + src_byte
ASSIGN	8691:6	8691:12	11	src = ibuff + src_byte
LVAL	8691:6	8691:6	12	src
FIELD	8691:6	8691:6	13	src
LEAF_NODE	8691:6	8691:6	14	src
ASSIGN_OP	8691:10	8691:10	12	=
LEAF_NODE	8691:10	8691:10	13	=
RVAL	8691:12	8691:20	12	ibuff + src_byte
FIELD	8691:12	8691:12	13	ibuff
LEAF_NODE	8691:12	8691:12	14	ibuff
LEAF_NODE	8691:18	8691:18	13	+
FIELD	8691:20	8691:20	13	src_byte
LEAF_NODE	8691:20	8691:20	14	src_byte
LEAF_NODE	8691:28	8691:28	10	;
EXPR_STATEMENT	8692:6	8692:51	9	match_bits = mask_bits << ( 8 - src_bit - bps ) ;
EXPR	8692:6	8692:6	10	match_bits = mask_bits << ( 8 - src_bit - bps )
ASSIGN	8692:6	8692:19	11	match_bits = mask_bits << ( 8 - src_bit - bps )
LVAL	8692:6	8692:6	12	match_bits
FIELD	8692:6	8692:6	13	match_bits
LEAF_NODE	8692:6	8692:6	14	match_bits
ASSIGN_OP	8692:17	8692:17	12	=
LEAF_NODE	8692:17	8692:17	13	=
RVAL	8692:19	8692:50	12	mask_bits << ( 8 - src_bit - bps )
FIELD	8692:19	8692:19	13	mask_bits
LEAF_NODE	8692:19	8692:19	14	mask_bits
LEAF_NODE	8692:29	8692:29	13	<<
LEAF_NODE	8692:32	8692:32	13	(
FIELD	8692:33	8692:33	13	8
LEAF_NODE	8692:33	8692:33	14	8
LEAF_NODE	8692:35	8692:35	13	-
FIELD	8692:37	8692:37	13	src_bit
LEAF_NODE	8692:37	8692:37	14	src_bit
LEAF_NODE	8692:45	8692:45	13	-
FIELD	8692:47	8692:47	13	bps
LEAF_NODE	8692:47	8692:47	14	bps
LEAF_NODE	8692:50	8692:50	13	)
LEAF_NODE	8692:51	8692:51	10	;
LEAF_NODE	8693:6	8693:6	9	buff1
LEAF_NODE	8693:12	8693:12	9	=
LEAF_NODE	8693:14	8693:14	9	(
LEAF_NODE	8693:15	8693:15	9	(
LEAF_NODE	8693:16	8693:16	9	*
LEAF_NODE	8693:17	8693:17	9	src
LEAF_NODE	8693:20	8693:20	9	)
LEAF_NODE	8693:22	8693:22	9	&
LEAF_NODE	8693:24	8693:24	9	match_bits
LEAF_NODE	8693:34	8693:34	9	)
LEAF_NODE	8693:36	8693:36	9	<<
LEAF_NODE	8693:39	8693:39	9	(
LEAF_NODE	8693:40	8693:40	9	src_bit
LEAF_NODE	8693:47	8693:47	9	)
LEAF_NODE	8693:48	8693:48	9	;
SELECTION	8695:6	8696:8	9	
KEYWORD	8695:6	8695:6	10	if
LEAF_NODE	8695:6	8695:6	11	if
LEAF_NODE	8695:9	8695:9	10	(
CONDITION	8695:10	8695:10	10	ready_bits < 8
EXPR	8695:10	8695:23	11	ready_bits < 8
FIELD	8695:10	8695:10	12	ready_bits
LEAF_NODE	8695:10	8695:10	13	ready_bits
REL_OPERATOR	8695:21	8695:21	12	<
LEAF_NODE	8695:21	8695:21	13	<
FIELD	8695:23	8695:23	12	8
LEAF_NODE	8695:23	8695:23	13	8
LEAF_NODE	8695:24	8695:24	10	)
STATEMENTS	8696:8	8696:8	10	
EXPR_STATEMENT	8696:8	8696:47	11	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8696:8	8696:8	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8696:8	8696:16	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8696:8	8696:8	14	buff2
FIELD	8696:8	8696:8	15	buff2
LEAF_NODE	8696:8	8696:8	16	buff2
ASSIGN_OP	8696:14	8696:14	14	=
LEAF_NODE	8696:14	8696:14	15	=
RVAL	8696:16	8696:46	14	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8696:16	8696:16	15	(
BIT_OR	8696:17	8696:25	15	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8696:17	8696:17	16	buff2
FIELD	8696:17	8696:17	17	buff2
LEAF_NODE	8696:17	8696:17	18	buff2
LEAF_NODE	8696:23	8696:23	16	|
BIT_OR_ELEM	8696:25	8696:45	16	( buff1 >> ready_bits )
LEAF_NODE	8696:25	8696:25	17	(
FIELD	8696:26	8696:26	17	buff1
LEAF_NODE	8696:26	8696:26	18	buff1
LEAF_NODE	8696:32	8696:32	17	>>
FIELD	8696:35	8696:35	17	ready_bits
LEAF_NODE	8696:35	8696:35	18	ready_bits
LEAF_NODE	8696:45	8696:45	17	)
LEAF_NODE	8696:46	8696:46	15	)
LEAF_NODE	8696:47	8696:47	12	;
SELECTION	8697:6	8698:8	9	
KEYWORD	8697:6	8697:6	10	else
LEAF_NODE	8697:6	8697:6	11	else
STATEMENTS	8698:8	8702:8	10	
LEAF_NODE	8698:8	8698:8	11	{
STATEMENTS	8699:8	8701:8	11	
EXPR_STATEMENT	8699:8	8699:22	12	* dst ++ = buff2 ;
EXPR	8699:8	8699:8	13	* dst ++ = buff2
ASSIGN	8699:8	8699:17	14	* dst ++ = buff2
LVAL	8699:8	8699:8	15	* dst ++
UNARY_EXPR	8699:8	8699:9	16	* dst ++
UNARY_OPERATOR	8699:8	8699:8	17	*
LEAF_NODE	8699:8	8699:8	18	*
FIELD	8699:9	8699:12	17	dst ++
LEAF_NODE	8699:9	8699:9	18	dst
LEAF_NODE	8699:12	8699:12	18	++
ASSIGN_OP	8699:15	8699:15	15	=
LEAF_NODE	8699:15	8699:15	16	=
RVAL	8699:17	8699:17	15	buff2
FIELD	8699:17	8699:17	16	buff2
LEAF_NODE	8699:17	8699:17	17	buff2
LEAF_NODE	8699:22	8699:22	13	;
EXPR_STATEMENT	8700:8	8700:21	12	buff2 = buff1 ;
EXPR	8700:8	8700:8	13	buff2 = buff1
ASSIGN	8700:8	8700:16	14	buff2 = buff1
LVAL	8700:8	8700:8	15	buff2
FIELD	8700:8	8700:8	16	buff2
LEAF_NODE	8700:8	8700:8	17	buff2
ASSIGN_OP	8700:14	8700:14	15	=
LEAF_NODE	8700:14	8700:14	16	=
RVAL	8700:16	8700:16	15	buff1
FIELD	8700:16	8700:16	16	buff1
LEAF_NODE	8700:16	8700:16	17	buff1
LEAF_NODE	8700:21	8700:21	13	;
EXPR_STATEMENT	8701:8	8701:23	12	ready_bits -= 8 ;
EXPR	8701:8	8701:8	13	ready_bits -= 8
ASSIGN	8701:8	8701:22	14	ready_bits -= 8
LVAL	8701:8	8701:8	15	ready_bits
FIELD	8701:8	8701:8	16	ready_bits
LEAF_NODE	8701:8	8701:8	17	ready_bits
ASSIGN_OP	8701:19	8701:19	15	-=
LEAF_NODE	8701:19	8701:19	16	-=
RVAL	8701:22	8701:22	15	8
FIELD	8701:22	8701:22	16	8
LEAF_NODE	8701:22	8701:22	17	8
LEAF_NODE	8701:23	8701:23	13	;
LEAF_NODE	8702:8	8702:8	11	}
EXPR_STATEMENT	8703:6	8703:23	9	ready_bits += bps ;
EXPR	8703:6	8703:6	10	ready_bits += bps
ASSIGN	8703:6	8703:20	11	ready_bits += bps
LVAL	8703:6	8703:6	12	ready_bits
FIELD	8703:6	8703:6	13	ready_bits
LEAF_NODE	8703:6	8703:6	14	ready_bits
ASSIGN_OP	8703:17	8703:17	12	+=
LEAF_NODE	8703:17	8703:17	13	+=
RVAL	8703:20	8703:20	12	bps
FIELD	8703:20	8703:20	13	bps
LEAF_NODE	8703:20	8703:20	14	bps
LEAF_NODE	8703:23	8703:23	10	;
LEAF_NODE	8704:6	8704:6	8	}
LEAF_NODE	8705:4	8705:4	5	}
SELECTION	8706:2	8707:4	3	
KEYWORD	8706:2	8706:2	4	if
LEAF_NODE	8706:2	8706:2	5	if
LEAF_NODE	8706:5	8706:5	4	(
CONDITION	8706:6	8706:6	4	ready_bits > 0
EXPR	8706:6	8706:19	5	ready_bits > 0
FIELD	8706:6	8706:6	6	ready_bits
LEAF_NODE	8706:6	8706:6	7	ready_bits
REL_OPERATOR	8706:17	8706:17	6	>
LEAF_NODE	8706:17	8706:17	7	>
FIELD	8706:19	8706:19	6	0
LEAF_NODE	8706:19	8706:19	7	0
LEAF_NODE	8706:20	8706:20	4	)
STATEMENTS	8707:4	8710:4	4	
LEAF_NODE	8707:4	8707:4	5	{
STATEMENTS	8708:4	8709:4	5	
EXPR_STATEMENT	8708:4	8708:61	6	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) ) ;
EXPR	8708:4	8708:4	7	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
ASSIGN	8708:4	8708:12	8	buff1 = ( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LVAL	8708:4	8708:4	9	buff1
FIELD	8708:4	8708:4	10	buff1
LEAF_NODE	8708:4	8708:4	11	buff1
ASSIGN_OP	8708:10	8708:10	9	=
LEAF_NODE	8708:10	8708:10	10	=
RVAL	8708:12	8708:60	9	( buff2 & ( ( unsigned int ) 255 << ( 8 - ready_bits ) ) )
LEAF_NODE	8708:12	8708:12	10	(
FIELD	8708:13	8708:13	10	buff2
LEAF_NODE	8708:13	8708:13	11	buff2
LEAF_NODE	8708:19	8708:19	10	&
LEAF_NODE	8708:21	8708:21	10	(
LEAF_NODE	8708:22	8708:22	10	(
TYPE_NAME	8708:23	8708:32	10	unsigned int
LEAF_NODE	8708:23	8708:23	11	unsigned
LEAF_NODE	8708:32	8708:32	11	int
LEAF_NODE	8708:35	8708:35	10	)
FIELD	8708:36	8708:36	10	255
LEAF_NODE	8708:36	8708:36	11	255
LEAF_NODE	8708:40	8708:40	10	<<
LEAF_NODE	8708:43	8708:43	10	(
FIELD	8708:44	8708:44	10	8
LEAF_NODE	8708:44	8708:44	11	8
LEAF_NODE	8708:46	8708:46	10	-
FIELD	8708:48	8708:48	10	ready_bits
LEAF_NODE	8708:48	8708:48	11	ready_bits
LEAF_NODE	8708:58	8708:58	10	)
LEAF_NODE	8708:59	8708:59	10	)
LEAF_NODE	8708:60	8708:60	10	)
LEAF_NODE	8708:61	8708:61	7	;
EXPR_STATEMENT	8709:4	8709:18	6	* dst ++ = buff1 ;
EXPR	8709:4	8709:4	7	* dst ++ = buff1
ASSIGN	8709:4	8709:13	8	* dst ++ = buff1
LVAL	8709:4	8709:4	9	* dst ++
UNARY_EXPR	8709:4	8709:5	10	* dst ++
UNARY_OPERATOR	8709:4	8709:4	11	*
LEAF_NODE	8709:4	8709:4	12	*
FIELD	8709:5	8709:8	11	dst ++
LEAF_NODE	8709:5	8709:5	12	dst
LEAF_NODE	8709:8	8709:8	12	++
ASSIGN_OP	8709:11	8709:11	9	=
LEAF_NODE	8709:11	8709:11	10	=
RVAL	8709:13	8709:13	9	buff1
FIELD	8709:13	8709:13	10	buff1
LEAF_NODE	8709:13	8709:13	11	buff1
LEAF_NODE	8709:18	8709:18	7	;
LEAF_NODE	8710:4	8710:4	5	}
JUMP_STATEMENT	8712:2	8712:12	3	return ( 0 ) ;
KEYWORD	8712:2	8712:2	4	return
LEAF_NODE	8712:2	8712:2	5	return
DESTINATION	8712:9	8712:9	4	( 0 )
EXPR	8712:9	8712:11	5	( 0 )
LEAF_NODE	8712:9	8712:9	6	(
FIELD	8712:10	8712:10	6	0
LEAF_NODE	8712:10	8712:10	7	0
LEAF_NODE	8712:11	8712:11	6	)
LEAF_NODE	8712:12	8712:12	4	;
LEAF_NODE	8713:2	8713:2	2	}
FUNCTION_DEF	8716:0	8789:2	1	
RETURN_TYPE	8716:0	8716:7	2	static int
LEAF_NODE	8716:0	8716:0	3	static
TYPE_NAME	8716:7	8716:7	3	int
LEAF_NODE	8716:7	8716:7	4	int
FUNCTION_NAME	8717:0	8717:0	2	reverseSamples16bits
LEAF_NODE	8717:0	8717:0	3	reverseSamples16bits
PARAMETER_LIST	8717:21	8718:48	2	( uint16 spp , uint16 bps , uint32 width , uint8 * ibuff , uint8 * obuff )
LEAF_NODE	8717:21	8717:21	3	(
PARAMETER_DECL	8717:22	8717:29	3	uint16 spp
TYPE	8717:22	8717:22	4	uint16
TYPE_NAME	8717:22	8717:22	5	uint16
LEAF_NODE	8717:22	8717:22	6	uint16
NAME	8717:29	8717:29	4	spp
LEAF_NODE	8717:29	8717:29	5	spp
LEAF_NODE	8717:32	8717:32	3	,
PARAMETER_DECL	8717:34	8717:41	3	uint16 bps
TYPE	8717:34	8717:34	4	uint16
TYPE_NAME	8717:34	8717:34	5	uint16
LEAF_NODE	8717:34	8717:34	6	uint16
NAME	8717:41	8717:41	4	bps
LEAF_NODE	8717:41	8717:41	5	bps
LEAF_NODE	8717:44	8717:44	3	,
PARAMETER_DECL	8717:46	8717:53	3	uint32 width
TYPE	8717:46	8717:46	4	uint32
TYPE_NAME	8717:46	8717:46	5	uint32
LEAF_NODE	8717:46	8717:46	6	uint32
NAME	8717:53	8717:53	4	width
LEAF_NODE	8717:53	8717:53	5	width
LEAF_NODE	8717:58	8717:58	3	,
PARAMETER_DECL	8718:22	8718:29	3	uint8 * ibuff
TYPE	8718:22	8718:28	4	uint8 *
TYPE_NAME	8718:22	8718:22	5	uint8
LEAF_NODE	8718:22	8718:22	6	uint8
POINTER	8718:28	8718:28	5	*
LEAF_NODE	8718:28	8718:28	6	*
NAME	8718:29	8718:29	4	ibuff
LEAF_NODE	8718:29	8718:29	5	ibuff
LEAF_NODE	8718:34	8718:34	3	,
PARAMETER_DECL	8718:36	8718:43	3	uint8 * obuff
TYPE	8718:36	8718:42	4	uint8 *
TYPE_NAME	8718:36	8718:36	5	uint8
LEAF_NODE	8718:36	8718:36	6	uint8
POINTER	8718:42	8718:42	5	*
LEAF_NODE	8718:42	8718:42	6	*
NAME	8718:43	8718:43	4	obuff
LEAF_NODE	8718:43	8718:43	5	obuff
LEAF_NODE	8718:48	8718:48	3	)
LEAF_NODE	8719:2	8719:2	2	{
STATEMENTS	8720:2	8788:2	2	
SIMPLE_DECL	8720:2	8720:25	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8720:2	8720:11	4	int ready_bits ; ready_bits = 0
TYPE	8720:2	8720:2	5	int
TYPE_NAME	8720:2	8720:2	6	int
LEAF_NODE	8720:2	8720:2	7	int
NAME	8720:11	8720:11	5	ready_bits
LEAF_NODE	8720:11	8720:11	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8720:11	8720:11	5	ready_bits = 0
ASSIGN	8720:11	8720:24	6	ready_bits = 0
LVAL	8720:11	8720:11	7	ready_bits
NAME	8720:11	8720:11	8	ready_bits
LEAF_NODE	8720:11	8720:11	9	ready_bits
ASSIGN_OP	8720:22	8720:22	7	=
LEAF_NODE	8720:22	8720:22	8	=
RVAL	8720:24	8720:24	7	0
FIELD	8720:24	8720:24	8	0
LEAF_NODE	8720:24	8720:24	9	0
LEAF_NODE	8720:25	8720:25	4	;
SIMPLE_DECL	8721:2	8721:14	3	uint32 col ;
VAR_DECL	8721:2	8721:11	4	uint32 col
TYPE	8721:2	8721:2	5	uint32
TYPE_NAME	8721:2	8721:2	6	uint32
LEAF_NODE	8721:2	8721:2	7	uint32
NAME	8721:11	8721:11	5	col
LEAF_NODE	8721:11	8721:11	6	col
LEAF_NODE	8721:14	8721:14	4	;
SIMPLE_DECL	8722:2	8722:37	3	uint32 src_byte ; src_byte = 0 , uint32 high_bit ; high_bit = 0 ;
INIT_DECL_LIST	8722:2	8722:2	4	uint32 src_byte ; src_byte = 0 , uint32 high_bit ; high_bit = 0
VAR_DECL	8722:2	8722:11	5	uint32 src_byte ; src_byte = 0
TYPE	8722:2	8722:2	6	uint32
TYPE_NAME	8722:2	8722:2	7	uint32
LEAF_NODE	8722:2	8722:2	8	uint32
NAME	8722:11	8722:11	6	src_byte
LEAF_NODE	8722:11	8722:11	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	8722:11	8722:11	6	src_byte = 0
ASSIGN	8722:11	8722:22	7	src_byte = 0
LVAL	8722:11	8722:11	8	src_byte
NAME	8722:11	8722:11	9	src_byte
LEAF_NODE	8722:11	8722:11	10	src_byte
ASSIGN_OP	8722:20	8722:20	8	=
LEAF_NODE	8722:20	8722:20	9	=
RVAL	8722:22	8722:22	8	0
FIELD	8722:22	8722:22	9	0
LEAF_NODE	8722:22	8722:22	10	0
LEAF_NODE	8722:23	8722:23	5	,
VAR_DECL	8722:2	8722:25	5	uint32 high_bit ; high_bit = 0
TYPE	8722:2	8722:2	6	uint32
TYPE_NAME	8722:2	8722:2	7	uint32
LEAF_NODE	8722:2	8722:2	8	uint32
NAME	8722:25	8722:25	6	high_bit
LEAF_NODE	8722:25	8722:25	7	high_bit
LEAF_NODE	0:0	0:0	6	;
INIT	8722:25	8722:25	6	high_bit = 0
ASSIGN	8722:25	8722:36	7	high_bit = 0
LVAL	8722:25	8722:25	8	high_bit
NAME	8722:25	8722:25	9	high_bit
LEAF_NODE	8722:25	8722:25	10	high_bit
ASSIGN_OP	8722:34	8722:34	8	=
LEAF_NODE	8722:34	8722:34	9	=
RVAL	8722:36	8722:36	8	0
FIELD	8722:36	8722:36	9	0
LEAF_NODE	8722:36	8722:36	10	0
LEAF_NODE	8722:37	8722:37	4	;
SIMPLE_DECL	8723:2	8723:25	3	uint32 bit_offset ; bit_offset = 0 ;
VAR_DECL	8723:2	8723:11	4	uint32 bit_offset ; bit_offset = 0
TYPE	8723:2	8723:2	5	uint32
TYPE_NAME	8723:2	8723:2	6	uint32
LEAF_NODE	8723:2	8723:2	7	uint32
NAME	8723:11	8723:11	5	bit_offset
LEAF_NODE	8723:11	8723:11	6	bit_offset
LEAF_NODE	0:0	0:0	5	;
INIT	8723:11	8723:11	5	bit_offset = 0
ASSIGN	8723:11	8723:24	6	bit_offset = 0
LVAL	8723:11	8723:11	7	bit_offset
NAME	8723:11	8723:11	8	bit_offset
LEAF_NODE	8723:11	8723:11	9	bit_offset
ASSIGN_OP	8723:22	8723:22	7	=
LEAF_NODE	8723:22	8723:22	8	=
RVAL	8723:24	8723:24	7	0
FIELD	8723:24	8723:24	8	0
LEAF_NODE	8723:24	8723:24	9	0
LEAF_NODE	8723:25	8723:25	4	;
SIMPLE_DECL	8724:2	8724:40	3	uint16 match_bits ; match_bits = 0 , uint16 mask_bits ; mask_bits = 0 ;
INIT_DECL_LIST	8724:2	8724:2	4	uint16 match_bits ; match_bits = 0 , uint16 mask_bits ; mask_bits = 0
VAR_DECL	8724:2	8724:11	5	uint16 match_bits ; match_bits = 0
TYPE	8724:2	8724:2	6	uint16
TYPE_NAME	8724:2	8724:2	7	uint16
LEAF_NODE	8724:2	8724:2	8	uint16
NAME	8724:11	8724:11	6	match_bits
LEAF_NODE	8724:11	8724:11	7	match_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8724:11	8724:11	6	match_bits = 0
ASSIGN	8724:11	8724:24	7	match_bits = 0
LVAL	8724:11	8724:11	8	match_bits
NAME	8724:11	8724:11	9	match_bits
LEAF_NODE	8724:11	8724:11	10	match_bits
ASSIGN_OP	8724:22	8724:22	8	=
LEAF_NODE	8724:22	8724:22	9	=
RVAL	8724:24	8724:24	8	0
FIELD	8724:24	8724:24	9	0
LEAF_NODE	8724:24	8724:24	10	0
LEAF_NODE	8724:25	8724:25	5	,
VAR_DECL	8724:2	8724:27	5	uint16 mask_bits ; mask_bits = 0
TYPE	8724:2	8724:2	6	uint16
TYPE_NAME	8724:2	8724:2	7	uint16
LEAF_NODE	8724:2	8724:2	8	uint16
NAME	8724:27	8724:27	6	mask_bits
LEAF_NODE	8724:27	8724:27	7	mask_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8724:27	8724:27	6	mask_bits = 0
ASSIGN	8724:27	8724:39	7	mask_bits = 0
LVAL	8724:27	8724:27	8	mask_bits
NAME	8724:27	8724:27	9	mask_bits
LEAF_NODE	8724:27	8724:27	10	mask_bits
ASSIGN_OP	8724:37	8724:37	8	=
LEAF_NODE	8724:37	8724:37	9	=
RVAL	8724:39	8724:39	8	0
FIELD	8724:39	8724:39	9	0
LEAF_NODE	8724:39	8724:39	10	0
LEAF_NODE	8724:40	8724:40	4	;
SIMPLE_DECL	8725:2	8725:31	3	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	8725:2	8725:2	4	uint16 buff1 ; buff1 = 0 , uint16 buff2 ; buff2 = 0
VAR_DECL	8725:2	8725:11	5	uint16 buff1 ; buff1 = 0
TYPE	8725:2	8725:2	6	uint16
TYPE_NAME	8725:2	8725:2	7	uint16
LEAF_NODE	8725:2	8725:2	8	uint16
NAME	8725:11	8725:11	6	buff1
LEAF_NODE	8725:11	8725:11	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8725:11	8725:11	6	buff1 = 0
ASSIGN	8725:11	8725:19	7	buff1 = 0
LVAL	8725:11	8725:11	8	buff1
NAME	8725:11	8725:11	9	buff1
LEAF_NODE	8725:11	8725:11	10	buff1
ASSIGN_OP	8725:17	8725:17	8	=
LEAF_NODE	8725:17	8725:17	9	=
RVAL	8725:19	8725:19	8	0
FIELD	8725:19	8725:19	9	0
LEAF_NODE	8725:19	8725:19	10	0
LEAF_NODE	8725:20	8725:20	5	,
VAR_DECL	8725:2	8725:22	5	uint16 buff2 ; buff2 = 0
TYPE	8725:2	8725:2	6	uint16
TYPE_NAME	8725:2	8725:2	7	uint16
LEAF_NODE	8725:2	8725:2	8	uint16
NAME	8725:22	8725:22	6	buff2
LEAF_NODE	8725:22	8725:22	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	8725:22	8725:22	6	buff2 = 0
ASSIGN	8725:22	8725:30	7	buff2 = 0
LVAL	8725:22	8725:22	8	buff2
NAME	8725:22	8725:22	9	buff2
LEAF_NODE	8725:22	8725:22	10	buff2
ASSIGN_OP	8725:28	8725:28	8	=
LEAF_NODE	8725:28	8725:28	9	=
RVAL	8725:30	8725:30	8	0
FIELD	8725:30	8725:30	9	0
LEAF_NODE	8725:30	8725:30	10	0
LEAF_NODE	8725:31	8725:31	4	;
SIMPLE_DECL	8726:2	8726:23	3	uint8 bytebuff ; bytebuff = 0 ;
VAR_DECL	8726:2	8726:11	4	uint8 bytebuff ; bytebuff = 0
TYPE	8726:2	8726:2	5	uint8
TYPE_NAME	8726:2	8726:2	6	uint8
LEAF_NODE	8726:2	8726:2	7	uint8
NAME	8726:11	8726:11	5	bytebuff
LEAF_NODE	8726:11	8726:11	6	bytebuff
LEAF_NODE	0:0	0:0	5	;
INIT	8726:11	8726:11	5	bytebuff = 0
ASSIGN	8726:11	8726:22	6	bytebuff = 0
LVAL	8726:11	8726:11	7	bytebuff
NAME	8726:11	8726:11	8	bytebuff
LEAF_NODE	8726:11	8726:11	9	bytebuff
ASSIGN_OP	8726:20	8726:20	7	=
LEAF_NODE	8726:20	8726:20	8	=
RVAL	8726:22	8726:22	7	0
FIELD	8726:22	8726:22	8	0
LEAF_NODE	8726:22	8726:22	9	0
LEAF_NODE	8726:23	8726:23	4	;
SIMPLE_DECL	8727:2	8727:20	3	unsigned char * src ;
VAR_DECL	8727:2	8727:17	4	unsigned char * src
TYPE	8727:2	8727:16	5	unsigned char *
TYPE_NAME	8727:2	8727:11	6	unsigned char
LEAF_NODE	8727:2	8727:2	7	unsigned
LEAF_NODE	8727:11	8727:11	7	char
POINTER	8727:16	8727:16	6	*
LEAF_NODE	8727:16	8727:16	7	*
NAME	8727:17	8727:17	5	src
LEAF_NODE	8727:17	8727:17	6	src
LEAF_NODE	8727:20	8727:20	4	;
SIMPLE_DECL	8728:2	8728:20	3	unsigned char * dst ;
VAR_DECL	8728:2	8728:17	4	unsigned char * dst
TYPE	8728:2	8728:16	5	unsigned char *
TYPE_NAME	8728:2	8728:11	6	unsigned char
LEAF_NODE	8728:2	8728:2	7	unsigned
LEAF_NODE	8728:11	8728:11	7	char
POINTER	8728:16	8728:16	6	*
LEAF_NODE	8728:16	8728:16	7	*
NAME	8728:17	8728:17	5	dst
LEAF_NODE	8728:17	8728:17	6	dst
LEAF_NODE	8728:20	8728:20	4	;
SIMPLE_DECL	8729:2	8729:18	3	tsample_t sample ;
VAR_DECL	8729:2	8729:12	4	tsample_t sample
TYPE	8729:2	8729:2	5	tsample_t
TYPE_NAME	8729:2	8729:2	6	tsample_t
LEAF_NODE	8729:2	8729:2	7	tsample_t
NAME	8729:12	8729:12	5	sample
LEAF_NODE	8729:12	8729:12	6	sample
LEAF_NODE	8729:18	8729:18	4	;
SELECTION	8731:2	8732:4	3	
KEYWORD	8731:2	8731:2	4	if
LEAF_NODE	8731:2	8731:2	5	if
LEAF_NODE	8731:5	8731:5	4	(
CONDITION	8731:6	8731:6	4	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8731:6	8731:6	5	( ibuff == NULL ) || ( obuff == NULL )
OR	8731:6	8731:25	6	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8731:6	8731:20	7	( ibuff == NULL )
LEAF_NODE	8731:6	8731:6	8	(
FIELD	8731:7	8731:7	8	ibuff
LEAF_NODE	8731:7	8731:7	9	ibuff
EQ_OPERATOR	8731:13	8731:13	8	==
LEAF_NODE	8731:13	8731:13	9	==
FIELD	8731:16	8731:16	8	NULL
LEAF_NODE	8731:16	8731:16	9	NULL
LEAF_NODE	8731:20	8731:20	8	)
LEAF_NODE	8731:22	8731:22	7	||
EXPR	8731:25	8731:39	7	( obuff == NULL )
LEAF_NODE	8731:25	8731:25	8	(
FIELD	8731:26	8731:26	8	obuff
LEAF_NODE	8731:26	8731:26	9	obuff
EQ_OPERATOR	8731:32	8731:32	8	==
LEAF_NODE	8731:32	8731:32	9	==
FIELD	8731:35	8731:35	8	NULL
LEAF_NODE	8731:35	8731:35	9	NULL
LEAF_NODE	8731:39	8731:39	8	)
LEAF_NODE	8731:40	8731:40	4	)
STATEMENTS	8732:4	8735:4	4	
LEAF_NODE	8732:4	8732:4	5	{
STATEMENTS	8733:4	8734:4	5	
EXPR_STATEMENT	8733:4	8733:67	6	TIFFError ( "reverseSample16bits" , "Invalid image or work buffer" ) ;
EXPR	8733:4	8733:4	7	TIFFError ( "reverseSample16bits" , "Invalid image or work buffer" )
FUNCTION_CALL	8733:4	8733:66	8	TIFFError ( "reverseSample16bits" , "Invalid image or work buffer" )
CALLEE	8733:4	8733:4	9	TIFFError
LEAF_NODE	8733:4	8733:4	10	TIFFError
LEAF_NODE	8733:13	8733:13	9	(
ARGUMENT	8733:14	8733:14	9	"reverseSample16bits"
FIELD	8733:14	8733:14	10	"reverseSample16bits"
LEAF_NODE	8733:14	8733:14	11	"reverseSample16bits"
LEAF_NODE	8733:35	8733:35	9	,
ARGUMENT	8733:36	8733:36	9	"Invalid image or work buffer"
FIELD	8733:36	8733:36	10	"Invalid image or work buffer"
LEAF_NODE	8733:36	8733:36	11	"Invalid image or work buffer"
LEAF_NODE	8733:66	8733:66	9	)
LEAF_NODE	8733:67	8733:67	7	;
JUMP_STATEMENT	8734:4	8734:14	6	return ( 1 ) ;
KEYWORD	8734:4	8734:4	7	return
LEAF_NODE	8734:4	8734:4	8	return
DESTINATION	8734:11	8734:11	7	( 1 )
EXPR	8734:11	8734:13	8	( 1 )
LEAF_NODE	8734:11	8734:11	9	(
FIELD	8734:12	8734:12	9	1
LEAF_NODE	8734:12	8734:12	10	1
LEAF_NODE	8734:13	8734:13	9	)
LEAF_NODE	8734:14	8734:14	7	;
LEAF_NODE	8735:4	8735:4	5	}
EXPR_STATEMENT	8737:2	8737:16	3	ready_bits = 0 ;
EXPR	8737:2	8737:2	4	ready_bits = 0
ASSIGN	8737:2	8737:15	5	ready_bits = 0
LVAL	8737:2	8737:2	6	ready_bits
FIELD	8737:2	8737:2	7	ready_bits
LEAF_NODE	8737:2	8737:2	8	ready_bits
ASSIGN_OP	8737:13	8737:13	6	=
LEAF_NODE	8737:13	8737:13	7	=
RVAL	8737:15	8737:15	6	0
FIELD	8737:15	8737:15	7	0
LEAF_NODE	8737:15	8737:15	8	0
LEAF_NODE	8737:16	8737:16	4	;
EXPR_STATEMENT	8738:2	8738:39	3	mask_bits = ( uint16 ) - 1 >> ( 16 - bps ) ;
EXPR	8738:2	8738:2	4	mask_bits = ( uint16 ) - 1 >> ( 16 - bps )
ASSIGN	8738:2	8738:15	5	mask_bits = ( uint16 ) - 1 >> ( 16 - bps )
LVAL	8738:2	8738:2	6	mask_bits
FIELD	8738:2	8738:2	7	mask_bits
LEAF_NODE	8738:2	8738:2	8	mask_bits
ASSIGN_OP	8738:12	8738:12	6	=
LEAF_NODE	8738:12	8738:12	7	=
RVAL	8738:15	8738:38	6	( uint16 ) - 1 >> ( 16 - bps )
LEAF_NODE	8738:15	8738:15	7	(
TYPE_NAME	8738:16	8738:16	7	uint16
LEAF_NODE	8738:16	8738:16	8	uint16
LEAF_NODE	8738:22	8738:22	7	)
UNARY_EXPR	8738:23	8738:24	7	- 1
UNARY_OPERATOR	8738:23	8738:23	8	-
LEAF_NODE	8738:23	8738:23	9	-
FIELD	8738:24	8738:24	8	1
LEAF_NODE	8738:24	8738:24	9	1
LEAF_NODE	8738:26	8738:26	7	>>
LEAF_NODE	8738:29	8738:29	7	(
FIELD	8738:30	8738:30	7	16
LEAF_NODE	8738:30	8738:30	8	16
LEAF_NODE	8738:33	8738:33	7	-
FIELD	8738:35	8738:35	7	bps
LEAF_NODE	8738:35	8738:35	8	bps
LEAF_NODE	8738:38	8738:38	7	)
LEAF_NODE	8738:39	8738:39	4	;
EXPR_STATEMENT	8739:2	8739:13	3	dst = obuff ;
EXPR	8739:2	8739:2	4	dst = obuff
ASSIGN	8739:2	8739:8	5	dst = obuff
LVAL	8739:2	8739:2	6	dst
FIELD	8739:2	8739:2	7	dst
LEAF_NODE	8739:2	8739:2	8	dst
ASSIGN_OP	8739:6	8739:6	6	=
LEAF_NODE	8739:6	8739:6	7	=
RVAL	8739:8	8739:8	6	obuff
FIELD	8739:8	8739:8	7	obuff
LEAF_NODE	8739:8	8739:8	8	obuff
LEAF_NODE	8739:13	8739:13	4	;
ITERATION	8740:2	8741:4	3	
KEYWORD	8740:2	8740:2	4	for
LEAF_NODE	8740:2	8740:2	5	for
LEAF_NODE	8740:6	8740:6	4	(
FOR_INIT	8740:7	8740:18	4	col = width ;
EXPR	8740:7	8740:7	5	col = width
ASSIGN	8740:7	8740:13	6	col = width
LVAL	8740:7	8740:7	7	col
FIELD	8740:7	8740:7	8	col
LEAF_NODE	8740:7	8740:7	9	col
ASSIGN_OP	8740:11	8740:11	7	=
LEAF_NODE	8740:11	8740:11	8	=
RVAL	8740:13	8740:13	7	width
FIELD	8740:13	8740:13	8	width
LEAF_NODE	8740:13	8740:13	9	width
LEAF_NODE	8740:18	8740:18	5	;
CONDITION	8740:20	8740:20	4	col > 0
EXPR	8740:20	8740:26	5	col > 0
FIELD	8740:20	8740:20	6	col
LEAF_NODE	8740:20	8740:20	7	col
REL_OPERATOR	8740:24	8740:24	6	>
LEAF_NODE	8740:24	8740:24	7	>
FIELD	8740:26	8740:26	6	0
LEAF_NODE	8740:26	8740:26	7	0
LEAF_NODE	8740:27	8740:27	4	;
FOR_EXPR	8740:29	8740:29	4	col --
EXPR	8740:29	8740:29	5	col --
FIELD	8740:29	8740:32	6	col --
LEAF_NODE	8740:29	8740:29	7	col
LEAF_NODE	8740:32	8740:32	7	--
LEAF_NODE	8740:34	8740:34	4	)
STATEMENTS	8741:4	8780:4	4	
LEAF_NODE	8741:4	8741:4	5	{
STATEMENTS	8743:4	8744:4	5	
LEAF_NODE	8743:4	8743:4	6	bit_offset
LEAF_NODE	8743:15	8743:15	6	=
LEAF_NODE	8743:17	8743:17	6	(
LEAF_NODE	8743:18	8743:18	6	col
LEAF_NODE	8743:22	8743:22	6	-
LEAF_NODE	8743:24	8743:24	6	1
LEAF_NODE	8743:25	8743:25	6	)
EXPR_STATEMENT	8743:27	8743:38	6	* bps * spp ;
EXPR	8743:27	8743:35	7	* bps * spp
UNARY_EXPR	8743:27	8743:29	8	* bps
UNARY_OPERATOR	8743:27	8743:27	9	*
LEAF_NODE	8743:27	8743:27	10	*
FIELD	8743:29	8743:29	9	bps
LEAF_NODE	8743:29	8743:29	10	bps
LEAF_NODE	8743:33	8743:33	8	*
FIELD	8743:35	8743:35	8	spp
LEAF_NODE	8743:35	8743:35	9	spp
LEAF_NODE	8743:38	8743:38	7	;
ITERATION	8744:4	8745:6	6	
KEYWORD	8744:4	8744:4	7	for
LEAF_NODE	8744:4	8744:4	8	for
LEAF_NODE	8744:8	8744:8	7	(
FOR_INIT	8744:9	8744:19	7	sample = 0 ;
EXPR	8744:9	8744:9	8	sample = 0
ASSIGN	8744:9	8744:18	9	sample = 0
LVAL	8744:9	8744:9	10	sample
FIELD	8744:9	8744:9	11	sample
LEAF_NODE	8744:9	8744:9	12	sample
ASSIGN_OP	8744:16	8744:16	10	=
LEAF_NODE	8744:16	8744:16	11	=
RVAL	8744:18	8744:18	10	0
FIELD	8744:18	8744:18	11	0
LEAF_NODE	8744:18	8744:18	12	0
LEAF_NODE	8744:19	8744:19	8	;
CONDITION	8744:21	8744:21	7	sample < spp
EXPR	8744:21	8744:30	8	sample < spp
FIELD	8744:21	8744:21	9	sample
LEAF_NODE	8744:21	8744:21	10	sample
REL_OPERATOR	8744:28	8744:28	9	<
LEAF_NODE	8744:28	8744:28	10	<
FIELD	8744:30	8744:30	9	spp
LEAF_NODE	8744:30	8744:30	10	spp
LEAF_NODE	8744:33	8744:33	7	;
FOR_EXPR	8744:35	8744:35	7	sample ++
EXPR	8744:35	8744:35	8	sample ++
FIELD	8744:35	8744:41	9	sample ++
LEAF_NODE	8744:35	8744:35	10	sample
LEAF_NODE	8744:41	8744:41	10	++
LEAF_NODE	8744:43	8744:43	7	)
STATEMENTS	8745:6	8779:6	7	
LEAF_NODE	8745:6	8745:6	8	{
STATEMENTS	8746:6	8778:6	8	
SELECTION	8746:6	8747:8	9	
KEYWORD	8746:6	8746:6	10	if
LEAF_NODE	8746:6	8746:6	11	if
LEAF_NODE	8746:9	8746:9	10	(
CONDITION	8746:10	8746:10	10	sample == 0
EXPR	8746:10	8746:20	11	sample == 0
FIELD	8746:10	8746:10	12	sample
LEAF_NODE	8746:10	8746:10	13	sample
EQ_OPERATOR	8746:17	8746:17	12	==
LEAF_NODE	8746:17	8746:17	13	==
FIELD	8746:20	8746:20	12	0
LEAF_NODE	8746:20	8746:20	13	0
LEAF_NODE	8746:21	8746:21	10	)
STATEMENTS	8747:8	8750:8	10	
LEAF_NODE	8747:8	8747:8	11	{
STATEMENTS	8748:8	8749:8	11	
EXPR_STATEMENT	8748:8	8748:33	12	src_byte = bit_offset / 8 ;
EXPR	8748:8	8748:8	13	src_byte = bit_offset / 8
ASSIGN	8748:8	8748:19	14	src_byte = bit_offset / 8
LVAL	8748:8	8748:8	15	src_byte
FIELD	8748:8	8748:8	16	src_byte
LEAF_NODE	8748:8	8748:8	17	src_byte
ASSIGN_OP	8748:17	8748:17	15	=
LEAF_NODE	8748:17	8748:17	16	=
RVAL	8748:19	8748:32	15	bit_offset / 8
FIELD	8748:19	8748:19	16	bit_offset
LEAF_NODE	8748:19	8748:19	17	bit_offset
LEAF_NODE	8748:30	8748:30	16	/
FIELD	8748:32	8748:32	16	8
LEAF_NODE	8748:32	8748:32	17	8
LEAF_NODE	8748:33	8748:33	13	;
EXPR_STATEMENT	8749:8	8749:34	12	high_bit = bit_offset % 8 ;
EXPR	8749:8	8749:8	13	high_bit = bit_offset % 8
ASSIGN	8749:8	8749:20	14	high_bit = bit_offset % 8
LVAL	8749:8	8749:8	15	high_bit
FIELD	8749:8	8749:8	16	high_bit
LEAF_NODE	8749:8	8749:8	17	high_bit
ASSIGN_OP	8749:18	8749:18	15	=
LEAF_NODE	8749:18	8749:18	16	=
RVAL	8749:20	8749:33	15	bit_offset % 8
FIELD	8749:20	8749:20	16	bit_offset
LEAF_NODE	8749:20	8749:20	17	bit_offset
LEAF_NODE	8749:31	8749:31	16	%
FIELD	8749:33	8749:33	16	8
LEAF_NODE	8749:33	8749:33	17	8
LEAF_NODE	8749:34	8749:34	13	;
LEAF_NODE	8750:8	8750:8	11	}
SELECTION	8751:6	8752:8	9	
KEYWORD	8751:6	8751:6	10	else
LEAF_NODE	8751:6	8751:6	11	else
STATEMENTS	8752:8	8755:8	10	
LEAF_NODE	8752:8	8752:8	11	{
STATEMENTS	8753:8	8754:8	11	
EXPR_STATEMENT	8753:8	8753:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8753:8	8753:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8753:8	8753:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8753:8	8753:8	15	src_byte
FIELD	8753:8	8753:8	16	src_byte
LEAF_NODE	8753:8	8753:8	17	src_byte
ASSIGN_OP	8753:17	8753:17	15	=
LEAF_NODE	8753:17	8753:17	16	=
RVAL	8753:19	8753:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8753:19	8753:19	16	(
FIELD	8753:20	8753:20	16	bit_offset
LEAF_NODE	8753:20	8753:20	17	bit_offset
LEAF_NODE	8753:31	8753:31	16	+
LEAF_NODE	8753:33	8753:33	16	(
FIELD	8753:34	8753:34	16	sample
LEAF_NODE	8753:34	8753:34	17	sample
LEAF_NODE	8753:41	8753:41	16	*
FIELD	8753:43	8753:43	16	bps
LEAF_NODE	8753:43	8753:43	17	bps
LEAF_NODE	8753:46	8753:46	16	)
LEAF_NODE	8753:47	8753:47	16	)
LEAF_NODE	8753:49	8753:49	16	/
FIELD	8753:51	8753:51	16	8
LEAF_NODE	8753:51	8753:51	17	8
LEAF_NODE	8753:52	8753:52	13	;
EXPR_STATEMENT	8754:8	8754:53	12	high_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8754:8	8754:8	13	high_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8754:8	8754:20	14	high_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8754:8	8754:8	15	high_bit
FIELD	8754:8	8754:8	16	high_bit
LEAF_NODE	8754:8	8754:8	17	high_bit
ASSIGN_OP	8754:18	8754:18	15	=
LEAF_NODE	8754:18	8754:18	16	=
RVAL	8754:20	8754:52	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8754:20	8754:20	16	(
FIELD	8754:21	8754:21	16	bit_offset
LEAF_NODE	8754:21	8754:21	17	bit_offset
LEAF_NODE	8754:32	8754:32	16	+
LEAF_NODE	8754:34	8754:34	16	(
FIELD	8754:35	8754:35	16	sample
LEAF_NODE	8754:35	8754:35	17	sample
LEAF_NODE	8754:42	8754:42	16	*
FIELD	8754:44	8754:44	16	bps
LEAF_NODE	8754:44	8754:44	17	bps
LEAF_NODE	8754:47	8754:47	16	)
LEAF_NODE	8754:48	8754:48	16	)
LEAF_NODE	8754:50	8754:50	16	%
FIELD	8754:52	8754:52	16	8
LEAF_NODE	8754:52	8754:52	17	8
LEAF_NODE	8754:53	8754:53	13	;
LEAF_NODE	8755:8	8755:8	11	}
EXPR_STATEMENT	8757:6	8757:28	9	src = ibuff + src_byte ;
EXPR	8757:6	8757:6	10	src = ibuff + src_byte
ASSIGN	8757:6	8757:12	11	src = ibuff + src_byte
LVAL	8757:6	8757:6	12	src
FIELD	8757:6	8757:6	13	src
LEAF_NODE	8757:6	8757:6	14	src
ASSIGN_OP	8757:10	8757:10	12	=
LEAF_NODE	8757:10	8757:10	13	=
RVAL	8757:12	8757:20	12	ibuff + src_byte
FIELD	8757:12	8757:12	13	ibuff
LEAF_NODE	8757:12	8757:12	14	ibuff
LEAF_NODE	8757:18	8757:18	13	+
FIELD	8757:20	8757:20	13	src_byte
LEAF_NODE	8757:20	8757:20	14	src_byte
LEAF_NODE	8757:28	8757:28	10	;
EXPR_STATEMENT	8758:6	8758:53	9	match_bits = mask_bits << ( 16 - high_bit - bps ) ;
EXPR	8758:6	8758:6	10	match_bits = mask_bits << ( 16 - high_bit - bps )
ASSIGN	8758:6	8758:19	11	match_bits = mask_bits << ( 16 - high_bit - bps )
LVAL	8758:6	8758:6	12	match_bits
FIELD	8758:6	8758:6	13	match_bits
LEAF_NODE	8758:6	8758:6	14	match_bits
ASSIGN_OP	8758:17	8758:17	12	=
LEAF_NODE	8758:17	8758:17	13	=
RVAL	8758:19	8758:52	12	mask_bits << ( 16 - high_bit - bps )
FIELD	8758:19	8758:19	13	mask_bits
LEAF_NODE	8758:19	8758:19	14	mask_bits
LEAF_NODE	8758:29	8758:29	13	<<
LEAF_NODE	8758:32	8758:32	13	(
FIELD	8758:33	8758:33	13	16
LEAF_NODE	8758:33	8758:33	14	16
LEAF_NODE	8758:36	8758:36	13	-
FIELD	8758:38	8758:38	13	high_bit
LEAF_NODE	8758:38	8758:38	14	high_bit
LEAF_NODE	8758:47	8758:47	13	-
FIELD	8758:49	8758:49	13	bps
LEAF_NODE	8758:49	8758:49	14	bps
LEAF_NODE	8758:52	8758:52	13	)
LEAF_NODE	8758:53	8758:53	10	;
SELECTION	8759:6	8760:8	9	
KEYWORD	8759:6	8759:6	10	if
LEAF_NODE	8759:6	8759:6	11	if
LEAF_NODE	8759:9	8759:9	10	(
CONDITION	8759:10	8759:10	10	little_endian
EXPR	8759:10	8759:10	11	little_endian
FIELD	8759:10	8759:10	12	little_endian
LEAF_NODE	8759:10	8759:10	13	little_endian
LEAF_NODE	8759:23	8759:23	10	)
STATEMENTS	8760:8	8760:8	10	
EXPR_STATEMENT	8760:8	8760:38	11	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ] ;
EXPR	8760:8	8760:8	12	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
ASSIGN	8760:8	8760:16	13	buff1 = ( src [ 0 ] << 8 ) | src [ 1 ]
LVAL	8760:8	8760:8	14	buff1
FIELD	8760:8	8760:8	15	buff1
LEAF_NODE	8760:8	8760:8	16	buff1
ASSIGN_OP	8760:14	8760:14	14	=
LEAF_NODE	8760:14	8760:14	15	=
RVAL	8760:16	8760:16	14	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR	8760:16	8760:32	15	( src [ 0 ] << 8 ) | src [ 1 ]
BIT_OR_ELEM	8760:16	8760:28	16	( src [ 0 ] << 8 )
LEAF_NODE	8760:16	8760:16	17	(
FIELD	8760:17	8760:22	17	src [ 0 ]
LEAF_NODE	8760:17	8760:17	18	src
LEAF_NODE	8760:20	8760:20	18	[
EXPR	8760:21	8760:21	18	0
FIELD	8760:21	8760:21	19	0
LEAF_NODE	8760:21	8760:21	20	0
LEAF_NODE	8760:22	8760:22	18	]
LEAF_NODE	8760:24	8760:24	17	<<
FIELD	8760:27	8760:27	17	8
LEAF_NODE	8760:27	8760:27	18	8
LEAF_NODE	8760:28	8760:28	17	)
LEAF_NODE	8760:30	8760:30	16	|
BIT_OR_ELEM	8760:32	8760:32	16	src [ 1 ]
FIELD	8760:32	8760:37	17	src [ 1 ]
LEAF_NODE	8760:32	8760:32	18	src
LEAF_NODE	8760:35	8760:35	18	[
EXPR	8760:36	8760:36	18	1
FIELD	8760:36	8760:36	19	1
LEAF_NODE	8760:36	8760:36	20	1
LEAF_NODE	8760:37	8760:37	18	]
LEAF_NODE	8760:38	8760:38	12	;
SELECTION	8761:6	8762:8	9	
KEYWORD	8761:6	8761:6	10	else
LEAF_NODE	8761:6	8761:6	11	else
STATEMENTS	8762:8	8762:8	10	
EXPR_STATEMENT	8762:8	8762:38	11	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	8762:8	8762:8	12	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	8762:8	8762:16	13	buff1 = ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	8762:8	8762:8	14	buff1
FIELD	8762:8	8762:8	15	buff1
LEAF_NODE	8762:8	8762:8	16	buff1
ASSIGN_OP	8762:14	8762:14	14	=
LEAF_NODE	8762:14	8762:14	15	=
RVAL	8762:16	8762:16	14	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	8762:16	8762:32	15	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	8762:16	8762:28	16	( src [ 1 ] << 8 )
LEAF_NODE	8762:16	8762:16	17	(
FIELD	8762:17	8762:22	17	src [ 1 ]
LEAF_NODE	8762:17	8762:17	18	src
LEAF_NODE	8762:20	8762:20	18	[
EXPR	8762:21	8762:21	18	1
FIELD	8762:21	8762:21	19	1
LEAF_NODE	8762:21	8762:21	20	1
LEAF_NODE	8762:22	8762:22	18	]
LEAF_NODE	8762:24	8762:24	17	<<
FIELD	8762:27	8762:27	17	8
LEAF_NODE	8762:27	8762:27	18	8
LEAF_NODE	8762:28	8762:28	17	)
LEAF_NODE	8762:30	8762:30	16	|
BIT_OR_ELEM	8762:32	8762:32	16	src [ 0 ]
FIELD	8762:32	8762:37	17	src [ 0 ]
LEAF_NODE	8762:32	8762:32	18	src
LEAF_NODE	8762:35	8762:35	18	[
EXPR	8762:36	8762:36	18	0
FIELD	8762:36	8762:36	19	0
LEAF_NODE	8762:36	8762:36	20	0
LEAF_NODE	8762:37	8762:37	18	]
LEAF_NODE	8762:38	8762:38	12	;
LEAF_NODE	8763:6	8763:6	9	buff1
LEAF_NODE	8763:12	8763:12	9	=
LEAF_NODE	8763:14	8763:14	9	(
LEAF_NODE	8763:15	8763:15	9	buff1
LEAF_NODE	8763:21	8763:21	9	&
LEAF_NODE	8763:23	8763:23	9	match_bits
LEAF_NODE	8763:33	8763:33	9	)
LEAF_NODE	8763:35	8763:35	9	<<
LEAF_NODE	8763:38	8763:38	9	(
LEAF_NODE	8763:39	8763:39	9	high_bit
LEAF_NODE	8763:47	8763:47	9	)
LEAF_NODE	8763:48	8763:48	9	;
SELECTION	8765:6	8766:8	9	
KEYWORD	8765:6	8765:6	10	if
LEAF_NODE	8765:6	8765:6	11	if
LEAF_NODE	8765:9	8765:9	10	(
CONDITION	8765:10	8765:10	10	ready_bits < 8
EXPR	8765:10	8765:23	11	ready_bits < 8
FIELD	8765:10	8765:10	12	ready_bits
LEAF_NODE	8765:10	8765:10	13	ready_bits
REL_OPERATOR	8765:21	8765:21	12	<
LEAF_NODE	8765:21	8765:21	13	<
FIELD	8765:23	8765:23	12	8
LEAF_NODE	8765:23	8765:23	13	8
LEAF_NODE	8765:24	8765:24	10	)
STATEMENTS	8766:8	8769:8	10	
LEAF_NODE	8766:8	8766:8	11	{
STATEMENTS	8767:8	8768:8	11	
EXPR_STATEMENT	8767:8	8767:20	12	bytebuff = 0 ;
EXPR	8767:8	8767:8	13	bytebuff = 0
ASSIGN	8767:8	8767:19	14	bytebuff = 0
LVAL	8767:8	8767:8	15	bytebuff
FIELD	8767:8	8767:8	16	bytebuff
LEAF_NODE	8767:8	8767:8	17	bytebuff
ASSIGN_OP	8767:17	8767:17	15	=
LEAF_NODE	8767:17	8767:17	16	=
RVAL	8767:19	8767:19	15	0
FIELD	8767:19	8767:19	16	0
LEAF_NODE	8767:19	8767:19	17	0
LEAF_NODE	8767:20	8767:20	13	;
EXPR_STATEMENT	8768:8	8768:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8768:8	8768:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8768:8	8768:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8768:8	8768:8	15	buff2
FIELD	8768:8	8768:8	16	buff2
LEAF_NODE	8768:8	8768:8	17	buff2
ASSIGN_OP	8768:14	8768:14	15	=
LEAF_NODE	8768:14	8768:14	16	=
RVAL	8768:16	8768:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8768:16	8768:16	16	(
BIT_OR	8768:17	8768:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8768:17	8768:17	17	buff2
FIELD	8768:17	8768:17	18	buff2
LEAF_NODE	8768:17	8768:17	19	buff2
LEAF_NODE	8768:23	8768:23	17	|
BIT_OR_ELEM	8768:25	8768:45	17	( buff1 >> ready_bits )
LEAF_NODE	8768:25	8768:25	18	(
FIELD	8768:26	8768:26	18	buff1
LEAF_NODE	8768:26	8768:26	19	buff1
LEAF_NODE	8768:32	8768:32	18	>>
FIELD	8768:35	8768:35	18	ready_bits
LEAF_NODE	8768:35	8768:35	19	ready_bits
LEAF_NODE	8768:45	8768:45	18	)
LEAF_NODE	8768:46	8768:46	16	)
LEAF_NODE	8768:47	8768:47	13	;
LEAF_NODE	8769:8	8769:8	11	}
SELECTION	8770:6	8771:8	9	
KEYWORD	8770:6	8770:6	10	else
LEAF_NODE	8770:6	8770:6	11	else
STATEMENTS	8771:8	8777:8	10	
LEAF_NODE	8771:8	8771:8	11	{
STATEMENTS	8772:8	8776:8	11	
EXPR_STATEMENT	8772:8	8772:31	12	bytebuff = ( buff2 >> 8 ) ;
EXPR	8772:8	8772:8	13	bytebuff = ( buff2 >> 8 )
ASSIGN	8772:8	8772:19	14	bytebuff = ( buff2 >> 8 )
LVAL	8772:8	8772:8	15	bytebuff
FIELD	8772:8	8772:8	16	bytebuff
LEAF_NODE	8772:8	8772:8	17	bytebuff
ASSIGN_OP	8772:17	8772:17	15	=
LEAF_NODE	8772:17	8772:17	16	=
RVAL	8772:19	8772:30	15	( buff2 >> 8 )
LEAF_NODE	8772:19	8772:19	16	(
FIELD	8772:20	8772:20	16	buff2
LEAF_NODE	8772:20	8772:20	17	buff2
LEAF_NODE	8772:26	8772:26	16	>>
FIELD	8772:29	8772:29	16	8
LEAF_NODE	8772:29	8772:29	17	8
LEAF_NODE	8772:30	8772:30	16	)
LEAF_NODE	8772:31	8772:31	13	;
EXPR_STATEMENT	8773:8	8773:25	12	* dst ++ = bytebuff ;
EXPR	8773:8	8773:8	13	* dst ++ = bytebuff
ASSIGN	8773:8	8773:17	14	* dst ++ = bytebuff
LVAL	8773:8	8773:8	15	* dst ++
UNARY_EXPR	8773:8	8773:9	16	* dst ++
UNARY_OPERATOR	8773:8	8773:8	17	*
LEAF_NODE	8773:8	8773:8	18	*
FIELD	8773:9	8773:12	17	dst ++
LEAF_NODE	8773:9	8773:9	18	dst
LEAF_NODE	8773:12	8773:12	18	++
ASSIGN_OP	8773:15	8773:15	15	=
LEAF_NODE	8773:15	8773:15	16	=
RVAL	8773:17	8773:17	15	bytebuff
FIELD	8773:17	8773:17	16	bytebuff
LEAF_NODE	8773:17	8773:17	17	bytebuff
LEAF_NODE	8773:25	8773:25	13	;
EXPR_STATEMENT	8774:8	8774:23	12	ready_bits -= 8 ;
EXPR	8774:8	8774:8	13	ready_bits -= 8
ASSIGN	8774:8	8774:22	14	ready_bits -= 8
LVAL	8774:8	8774:8	15	ready_bits
FIELD	8774:8	8774:8	16	ready_bits
LEAF_NODE	8774:8	8774:8	17	ready_bits
ASSIGN_OP	8774:19	8774:19	15	-=
LEAF_NODE	8774:19	8774:19	16	-=
RVAL	8774:22	8774:22	15	8
FIELD	8774:22	8774:22	16	8
LEAF_NODE	8774:22	8774:22	17	8
LEAF_NODE	8774:23	8774:23	13	;
EXPR_STATEMENT	8776:8	8776:54	12	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) ) ;
EXPR	8776:8	8776:8	13	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
ASSIGN	8776:8	8776:16	14	buff2 = ( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LVAL	8776:8	8776:8	15	buff2
FIELD	8776:8	8776:8	16	buff2
LEAF_NODE	8776:8	8776:8	17	buff2
ASSIGN_OP	8776:14	8776:14	15	=
LEAF_NODE	8776:14	8776:14	16	=
RVAL	8776:16	8776:53	15	( ( buff2 << 8 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	8776:16	8776:16	16	(
BIT_OR	8776:17	8776:32	16	( buff2 << 8 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	8776:17	8776:28	17	( buff2 << 8 )
LEAF_NODE	8776:17	8776:17	18	(
FIELD	8776:18	8776:18	18	buff2
LEAF_NODE	8776:18	8776:18	19	buff2
LEAF_NODE	8776:24	8776:24	18	<<
FIELD	8776:27	8776:27	18	8
LEAF_NODE	8776:27	8776:27	19	8
LEAF_NODE	8776:28	8776:28	18	)
LEAF_NODE	8776:30	8776:30	17	|
BIT_OR_ELEM	8776:32	8776:52	17	( buff1 >> ready_bits )
LEAF_NODE	8776:32	8776:32	18	(
FIELD	8776:33	8776:33	18	buff1
LEAF_NODE	8776:33	8776:33	19	buff1
LEAF_NODE	8776:39	8776:39	18	>>
FIELD	8776:42	8776:42	18	ready_bits
LEAF_NODE	8776:42	8776:42	19	ready_bits
LEAF_NODE	8776:52	8776:52	18	)
LEAF_NODE	8776:53	8776:53	16	)
LEAF_NODE	8776:54	8776:54	13	;
LEAF_NODE	8777:8	8777:8	11	}
EXPR_STATEMENT	8778:6	8778:23	9	ready_bits += bps ;
EXPR	8778:6	8778:6	10	ready_bits += bps
ASSIGN	8778:6	8778:20	11	ready_bits += bps
LVAL	8778:6	8778:6	12	ready_bits
FIELD	8778:6	8778:6	13	ready_bits
LEAF_NODE	8778:6	8778:6	14	ready_bits
ASSIGN_OP	8778:17	8778:17	12	+=
LEAF_NODE	8778:17	8778:17	13	+=
RVAL	8778:20	8778:20	12	bps
FIELD	8778:20	8778:20	13	bps
LEAF_NODE	8778:20	8778:20	14	bps
LEAF_NODE	8778:23	8778:23	10	;
LEAF_NODE	8779:6	8779:6	8	}
LEAF_NODE	8780:4	8780:4	5	}
SELECTION	8782:2	8783:4	3	
KEYWORD	8782:2	8782:2	4	if
LEAF_NODE	8782:2	8782:2	5	if
LEAF_NODE	8782:5	8782:5	4	(
CONDITION	8782:6	8782:6	4	ready_bits > 0
EXPR	8782:6	8782:19	5	ready_bits > 0
FIELD	8782:6	8782:6	6	ready_bits
LEAF_NODE	8782:6	8782:6	7	ready_bits
REL_OPERATOR	8782:17	8782:17	6	>
LEAF_NODE	8782:17	8782:17	7	>
FIELD	8782:19	8782:19	6	0
LEAF_NODE	8782:19	8782:19	7	0
LEAF_NODE	8782:20	8782:20	4	)
STATEMENTS	8783:4	8786:4	4	
LEAF_NODE	8783:4	8783:4	5	{
STATEMENTS	8784:4	8785:4	5	
EXPR_STATEMENT	8784:4	8784:27	6	bytebuff = ( buff2 >> 8 ) ;
EXPR	8784:4	8784:4	7	bytebuff = ( buff2 >> 8 )
ASSIGN	8784:4	8784:15	8	bytebuff = ( buff2 >> 8 )
LVAL	8784:4	8784:4	9	bytebuff
FIELD	8784:4	8784:4	10	bytebuff
LEAF_NODE	8784:4	8784:4	11	bytebuff
ASSIGN_OP	8784:13	8784:13	9	=
LEAF_NODE	8784:13	8784:13	10	=
RVAL	8784:15	8784:26	9	( buff2 >> 8 )
LEAF_NODE	8784:15	8784:15	10	(
FIELD	8784:16	8784:16	10	buff2
LEAF_NODE	8784:16	8784:16	11	buff2
LEAF_NODE	8784:22	8784:22	10	>>
FIELD	8784:25	8784:25	10	8
LEAF_NODE	8784:25	8784:25	11	8
LEAF_NODE	8784:26	8784:26	10	)
LEAF_NODE	8784:27	8784:27	7	;
EXPR_STATEMENT	8785:4	8785:21	6	* dst ++ = bytebuff ;
EXPR	8785:4	8785:4	7	* dst ++ = bytebuff
ASSIGN	8785:4	8785:13	8	* dst ++ = bytebuff
LVAL	8785:4	8785:4	9	* dst ++
UNARY_EXPR	8785:4	8785:5	10	* dst ++
UNARY_OPERATOR	8785:4	8785:4	11	*
LEAF_NODE	8785:4	8785:4	12	*
FIELD	8785:5	8785:8	11	dst ++
LEAF_NODE	8785:5	8785:5	12	dst
LEAF_NODE	8785:8	8785:8	12	++
ASSIGN_OP	8785:11	8785:11	9	=
LEAF_NODE	8785:11	8785:11	10	=
RVAL	8785:13	8785:13	9	bytebuff
FIELD	8785:13	8785:13	10	bytebuff
LEAF_NODE	8785:13	8785:13	11	bytebuff
LEAF_NODE	8785:21	8785:21	7	;
LEAF_NODE	8786:4	8786:4	5	}
JUMP_STATEMENT	8788:2	8788:12	3	return ( 0 ) ;
KEYWORD	8788:2	8788:2	4	return
LEAF_NODE	8788:2	8788:2	5	return
DESTINATION	8788:9	8788:9	4	( 0 )
EXPR	8788:9	8788:11	5	( 0 )
LEAF_NODE	8788:9	8788:9	6	(
FIELD	8788:10	8788:10	6	0
LEAF_NODE	8788:10	8788:10	7	0
LEAF_NODE	8788:11	8788:11	6	)
LEAF_NODE	8788:12	8788:12	4	;
LEAF_NODE	8789:2	8789:2	2	}
FUNCTION_DEF	8791:0	8872:2	1	
RETURN_TYPE	8791:0	8791:7	2	static int
LEAF_NODE	8791:0	8791:0	3	static
TYPE_NAME	8791:7	8791:7	3	int
LEAF_NODE	8791:7	8791:7	4	int
FUNCTION_NAME	8792:0	8792:0	2	reverseSamples24bits
LEAF_NODE	8792:0	8792:0	3	reverseSamples24bits
PARAMETER_LIST	8792:21	8793:48	2	( uint16 spp , uint16 bps , uint32 width , uint8 * ibuff , uint8 * obuff )
LEAF_NODE	8792:21	8792:21	3	(
PARAMETER_DECL	8792:22	8792:29	3	uint16 spp
TYPE	8792:22	8792:22	4	uint16
TYPE_NAME	8792:22	8792:22	5	uint16
LEAF_NODE	8792:22	8792:22	6	uint16
NAME	8792:29	8792:29	4	spp
LEAF_NODE	8792:29	8792:29	5	spp
LEAF_NODE	8792:32	8792:32	3	,
PARAMETER_DECL	8792:34	8792:41	3	uint16 bps
TYPE	8792:34	8792:34	4	uint16
TYPE_NAME	8792:34	8792:34	5	uint16
LEAF_NODE	8792:34	8792:34	6	uint16
NAME	8792:41	8792:41	4	bps
LEAF_NODE	8792:41	8792:41	5	bps
LEAF_NODE	8792:44	8792:44	3	,
PARAMETER_DECL	8792:46	8792:53	3	uint32 width
TYPE	8792:46	8792:46	4	uint32
TYPE_NAME	8792:46	8792:46	5	uint32
LEAF_NODE	8792:46	8792:46	6	uint32
NAME	8792:53	8792:53	4	width
LEAF_NODE	8792:53	8792:53	5	width
LEAF_NODE	8792:58	8792:58	3	,
PARAMETER_DECL	8793:22	8793:29	3	uint8 * ibuff
TYPE	8793:22	8793:28	4	uint8 *
TYPE_NAME	8793:22	8793:22	5	uint8
LEAF_NODE	8793:22	8793:22	6	uint8
POINTER	8793:28	8793:28	5	*
LEAF_NODE	8793:28	8793:28	6	*
NAME	8793:29	8793:29	4	ibuff
LEAF_NODE	8793:29	8793:29	5	ibuff
LEAF_NODE	8793:34	8793:34	3	,
PARAMETER_DECL	8793:36	8793:43	3	uint8 * obuff
TYPE	8793:36	8793:42	4	uint8 *
TYPE_NAME	8793:36	8793:36	5	uint8
LEAF_NODE	8793:36	8793:36	6	uint8
POINTER	8793:42	8793:42	5	*
LEAF_NODE	8793:42	8793:42	6	*
NAME	8793:43	8793:43	4	obuff
LEAF_NODE	8793:43	8793:43	5	obuff
LEAF_NODE	8793:48	8793:48	3	)
LEAF_NODE	8794:2	8794:2	2	{
STATEMENTS	8795:2	8871:2	2	
SIMPLE_DECL	8795:2	8795:25	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8795:2	8795:11	4	int ready_bits ; ready_bits = 0
TYPE	8795:2	8795:2	5	int
TYPE_NAME	8795:2	8795:2	6	int
LEAF_NODE	8795:2	8795:2	7	int
NAME	8795:11	8795:11	5	ready_bits
LEAF_NODE	8795:11	8795:11	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8795:11	8795:11	5	ready_bits = 0
ASSIGN	8795:11	8795:24	6	ready_bits = 0
LVAL	8795:11	8795:11	7	ready_bits
NAME	8795:11	8795:11	8	ready_bits
LEAF_NODE	8795:11	8795:11	9	ready_bits
ASSIGN_OP	8795:22	8795:22	7	=
LEAF_NODE	8795:22	8795:22	8	=
RVAL	8795:24	8795:24	7	0
FIELD	8795:24	8795:24	8	0
LEAF_NODE	8795:24	8795:24	9	0
LEAF_NODE	8795:25	8795:25	4	;
SIMPLE_DECL	8796:2	8796:14	3	uint32 col ;
VAR_DECL	8796:2	8796:11	4	uint32 col
TYPE	8796:2	8796:2	5	uint32
TYPE_NAME	8796:2	8796:2	6	uint32
LEAF_NODE	8796:2	8796:2	7	uint32
NAME	8796:11	8796:11	5	col
LEAF_NODE	8796:11	8796:11	6	col
LEAF_NODE	8796:14	8796:14	4	;
SIMPLE_DECL	8797:2	8797:37	3	uint32 src_byte ; src_byte = 0 , uint32 high_bit ; high_bit = 0 ;
INIT_DECL_LIST	8797:2	8797:2	4	uint32 src_byte ; src_byte = 0 , uint32 high_bit ; high_bit = 0
VAR_DECL	8797:2	8797:11	5	uint32 src_byte ; src_byte = 0
TYPE	8797:2	8797:2	6	uint32
TYPE_NAME	8797:2	8797:2	7	uint32
LEAF_NODE	8797:2	8797:2	8	uint32
NAME	8797:11	8797:11	6	src_byte
LEAF_NODE	8797:11	8797:11	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	8797:11	8797:11	6	src_byte = 0
ASSIGN	8797:11	8797:22	7	src_byte = 0
LVAL	8797:11	8797:11	8	src_byte
NAME	8797:11	8797:11	9	src_byte
LEAF_NODE	8797:11	8797:11	10	src_byte
ASSIGN_OP	8797:20	8797:20	8	=
LEAF_NODE	8797:20	8797:20	9	=
RVAL	8797:22	8797:22	8	0
FIELD	8797:22	8797:22	9	0
LEAF_NODE	8797:22	8797:22	10	0
LEAF_NODE	8797:23	8797:23	5	,
VAR_DECL	8797:2	8797:25	5	uint32 high_bit ; high_bit = 0
TYPE	8797:2	8797:2	6	uint32
TYPE_NAME	8797:2	8797:2	7	uint32
LEAF_NODE	8797:2	8797:2	8	uint32
NAME	8797:25	8797:25	6	high_bit
LEAF_NODE	8797:25	8797:25	7	high_bit
LEAF_NODE	0:0	0:0	6	;
INIT	8797:25	8797:25	6	high_bit = 0
ASSIGN	8797:25	8797:36	7	high_bit = 0
LVAL	8797:25	8797:25	8	high_bit
NAME	8797:25	8797:25	9	high_bit
LEAF_NODE	8797:25	8797:25	10	high_bit
ASSIGN_OP	8797:34	8797:34	8	=
LEAF_NODE	8797:34	8797:34	9	=
RVAL	8797:36	8797:36	8	0
FIELD	8797:36	8797:36	9	0
LEAF_NODE	8797:36	8797:36	10	0
LEAF_NODE	8797:37	8797:37	4	;
SIMPLE_DECL	8798:2	8798:25	3	uint32 bit_offset ; bit_offset = 0 ;
VAR_DECL	8798:2	8798:11	4	uint32 bit_offset ; bit_offset = 0
TYPE	8798:2	8798:2	5	uint32
TYPE_NAME	8798:2	8798:2	6	uint32
LEAF_NODE	8798:2	8798:2	7	uint32
NAME	8798:11	8798:11	5	bit_offset
LEAF_NODE	8798:11	8798:11	6	bit_offset
LEAF_NODE	0:0	0:0	5	;
INIT	8798:11	8798:11	5	bit_offset = 0
ASSIGN	8798:11	8798:24	6	bit_offset = 0
LVAL	8798:11	8798:11	7	bit_offset
NAME	8798:11	8798:11	8	bit_offset
LEAF_NODE	8798:11	8798:11	9	bit_offset
ASSIGN_OP	8798:22	8798:22	7	=
LEAF_NODE	8798:22	8798:22	8	=
RVAL	8798:24	8798:24	7	0
FIELD	8798:24	8798:24	8	0
LEAF_NODE	8798:24	8798:24	9	0
LEAF_NODE	8798:25	8798:25	4	;
SIMPLE_DECL	8799:2	8799:40	3	uint32 match_bits ; match_bits = 0 , uint32 mask_bits ; mask_bits = 0 ;
INIT_DECL_LIST	8799:2	8799:2	4	uint32 match_bits ; match_bits = 0 , uint32 mask_bits ; mask_bits = 0
VAR_DECL	8799:2	8799:11	5	uint32 match_bits ; match_bits = 0
TYPE	8799:2	8799:2	6	uint32
TYPE_NAME	8799:2	8799:2	7	uint32
LEAF_NODE	8799:2	8799:2	8	uint32
NAME	8799:11	8799:11	6	match_bits
LEAF_NODE	8799:11	8799:11	7	match_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8799:11	8799:11	6	match_bits = 0
ASSIGN	8799:11	8799:24	7	match_bits = 0
LVAL	8799:11	8799:11	8	match_bits
NAME	8799:11	8799:11	9	match_bits
LEAF_NODE	8799:11	8799:11	10	match_bits
ASSIGN_OP	8799:22	8799:22	8	=
LEAF_NODE	8799:22	8799:22	9	=
RVAL	8799:24	8799:24	8	0
FIELD	8799:24	8799:24	9	0
LEAF_NODE	8799:24	8799:24	10	0
LEAF_NODE	8799:25	8799:25	5	,
VAR_DECL	8799:2	8799:27	5	uint32 mask_bits ; mask_bits = 0
TYPE	8799:2	8799:2	6	uint32
TYPE_NAME	8799:2	8799:2	7	uint32
LEAF_NODE	8799:2	8799:2	8	uint32
NAME	8799:27	8799:27	6	mask_bits
LEAF_NODE	8799:27	8799:27	7	mask_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8799:27	8799:27	6	mask_bits = 0
ASSIGN	8799:27	8799:39	7	mask_bits = 0
LVAL	8799:27	8799:27	8	mask_bits
NAME	8799:27	8799:27	9	mask_bits
LEAF_NODE	8799:27	8799:27	10	mask_bits
ASSIGN_OP	8799:37	8799:37	8	=
LEAF_NODE	8799:37	8799:37	9	=
RVAL	8799:39	8799:39	8	0
FIELD	8799:39	8799:39	9	0
LEAF_NODE	8799:39	8799:39	10	0
LEAF_NODE	8799:40	8799:40	4	;
SIMPLE_DECL	8800:2	8800:31	3	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0 ;
INIT_DECL_LIST	8800:2	8800:2	4	uint32 buff1 ; buff1 = 0 , uint32 buff2 ; buff2 = 0
VAR_DECL	8800:2	8800:11	5	uint32 buff1 ; buff1 = 0
TYPE	8800:2	8800:2	6	uint32
TYPE_NAME	8800:2	8800:2	7	uint32
LEAF_NODE	8800:2	8800:2	8	uint32
NAME	8800:11	8800:11	6	buff1
LEAF_NODE	8800:11	8800:11	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8800:11	8800:11	6	buff1 = 0
ASSIGN	8800:11	8800:19	7	buff1 = 0
LVAL	8800:11	8800:11	8	buff1
NAME	8800:11	8800:11	9	buff1
LEAF_NODE	8800:11	8800:11	10	buff1
ASSIGN_OP	8800:17	8800:17	8	=
LEAF_NODE	8800:17	8800:17	9	=
RVAL	8800:19	8800:19	8	0
FIELD	8800:19	8800:19	9	0
LEAF_NODE	8800:19	8800:19	10	0
LEAF_NODE	8800:20	8800:20	5	,
VAR_DECL	8800:2	8800:22	5	uint32 buff2 ; buff2 = 0
TYPE	8800:2	8800:2	6	uint32
TYPE_NAME	8800:2	8800:2	7	uint32
LEAF_NODE	8800:2	8800:2	8	uint32
NAME	8800:22	8800:22	6	buff2
LEAF_NODE	8800:22	8800:22	7	buff2
LEAF_NODE	0:0	0:0	6	;
INIT	8800:22	8800:22	6	buff2 = 0
ASSIGN	8800:22	8800:30	7	buff2 = 0
LVAL	8800:22	8800:22	8	buff2
NAME	8800:22	8800:22	9	buff2
LEAF_NODE	8800:22	8800:22	10	buff2
ASSIGN_OP	8800:28	8800:28	8	=
LEAF_NODE	8800:28	8800:28	9	=
RVAL	8800:30	8800:30	8	0
FIELD	8800:30	8800:30	9	0
LEAF_NODE	8800:30	8800:30	10	0
LEAF_NODE	8800:31	8800:31	4	;
SIMPLE_DECL	8801:2	8801:39	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 ;
INIT_DECL_LIST	8801:2	8801:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0
VAR_DECL	8801:2	8801:11	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	8801:2	8801:2	6	uint8
TYPE_NAME	8801:2	8801:2	7	uint8
LEAF_NODE	8801:2	8801:2	8	uint8
NAME	8801:11	8801:11	6	bytebuff1
LEAF_NODE	8801:11	8801:11	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	8801:11	8801:11	6	bytebuff1 = 0
ASSIGN	8801:11	8801:23	7	bytebuff1 = 0
LVAL	8801:11	8801:11	8	bytebuff1
NAME	8801:11	8801:11	9	bytebuff1
LEAF_NODE	8801:11	8801:11	10	bytebuff1
ASSIGN_OP	8801:21	8801:21	8	=
LEAF_NODE	8801:21	8801:21	9	=
RVAL	8801:23	8801:23	8	0
FIELD	8801:23	8801:23	9	0
LEAF_NODE	8801:23	8801:23	10	0
LEAF_NODE	8801:24	8801:24	5	,
VAR_DECL	8801:2	8801:26	5	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	8801:2	8801:2	6	uint8
TYPE_NAME	8801:2	8801:2	7	uint8
LEAF_NODE	8801:2	8801:2	8	uint8
NAME	8801:26	8801:26	6	bytebuff2
LEAF_NODE	8801:26	8801:26	7	bytebuff2
LEAF_NODE	0:0	0:0	6	;
INIT	8801:26	8801:26	6	bytebuff2 = 0
ASSIGN	8801:26	8801:38	7	bytebuff2 = 0
LVAL	8801:26	8801:26	8	bytebuff2
NAME	8801:26	8801:26	9	bytebuff2
LEAF_NODE	8801:26	8801:26	10	bytebuff2
ASSIGN_OP	8801:36	8801:36	8	=
LEAF_NODE	8801:36	8801:36	9	=
RVAL	8801:38	8801:38	8	0
FIELD	8801:38	8801:38	9	0
LEAF_NODE	8801:38	8801:38	10	0
LEAF_NODE	8801:39	8801:39	4	;
SIMPLE_DECL	8802:2	8802:20	3	unsigned char * src ;
VAR_DECL	8802:2	8802:17	4	unsigned char * src
TYPE	8802:2	8802:16	5	unsigned char *
TYPE_NAME	8802:2	8802:11	6	unsigned char
LEAF_NODE	8802:2	8802:2	7	unsigned
LEAF_NODE	8802:11	8802:11	7	char
POINTER	8802:16	8802:16	6	*
LEAF_NODE	8802:16	8802:16	7	*
NAME	8802:17	8802:17	5	src
LEAF_NODE	8802:17	8802:17	6	src
LEAF_NODE	8802:20	8802:20	4	;
SIMPLE_DECL	8803:2	8803:20	3	unsigned char * dst ;
VAR_DECL	8803:2	8803:17	4	unsigned char * dst
TYPE	8803:2	8803:16	5	unsigned char *
TYPE_NAME	8803:2	8803:11	6	unsigned char
LEAF_NODE	8803:2	8803:2	7	unsigned
LEAF_NODE	8803:11	8803:11	7	char
POINTER	8803:16	8803:16	6	*
LEAF_NODE	8803:16	8803:16	7	*
NAME	8803:17	8803:17	5	dst
LEAF_NODE	8803:17	8803:17	6	dst
LEAF_NODE	8803:20	8803:20	4	;
SIMPLE_DECL	8804:2	8804:18	3	tsample_t sample ;
VAR_DECL	8804:2	8804:12	4	tsample_t sample
TYPE	8804:2	8804:2	5	tsample_t
TYPE_NAME	8804:2	8804:2	6	tsample_t
LEAF_NODE	8804:2	8804:2	7	tsample_t
NAME	8804:12	8804:12	5	sample
LEAF_NODE	8804:12	8804:12	6	sample
LEAF_NODE	8804:18	8804:18	4	;
SELECTION	8806:2	8807:4	3	
KEYWORD	8806:2	8806:2	4	if
LEAF_NODE	8806:2	8806:2	5	if
LEAF_NODE	8806:5	8806:5	4	(
CONDITION	8806:6	8806:6	4	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8806:6	8806:6	5	( ibuff == NULL ) || ( obuff == NULL )
OR	8806:6	8806:25	6	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8806:6	8806:20	7	( ibuff == NULL )
LEAF_NODE	8806:6	8806:6	8	(
FIELD	8806:7	8806:7	8	ibuff
LEAF_NODE	8806:7	8806:7	9	ibuff
EQ_OPERATOR	8806:13	8806:13	8	==
LEAF_NODE	8806:13	8806:13	9	==
FIELD	8806:16	8806:16	8	NULL
LEAF_NODE	8806:16	8806:16	9	NULL
LEAF_NODE	8806:20	8806:20	8	)
LEAF_NODE	8806:22	8806:22	7	||
EXPR	8806:25	8806:39	7	( obuff == NULL )
LEAF_NODE	8806:25	8806:25	8	(
FIELD	8806:26	8806:26	8	obuff
LEAF_NODE	8806:26	8806:26	9	obuff
EQ_OPERATOR	8806:32	8806:32	8	==
LEAF_NODE	8806:32	8806:32	9	==
FIELD	8806:35	8806:35	8	NULL
LEAF_NODE	8806:35	8806:35	9	NULL
LEAF_NODE	8806:39	8806:39	8	)
LEAF_NODE	8806:40	8806:40	4	)
STATEMENTS	8807:4	8810:4	4	
LEAF_NODE	8807:4	8807:4	5	{
STATEMENTS	8808:4	8809:4	5	
EXPR_STATEMENT	8808:4	8808:68	6	TIFFError ( "reverseSamples24bits" , "Invalid image or work buffer" ) ;
EXPR	8808:4	8808:4	7	TIFFError ( "reverseSamples24bits" , "Invalid image or work buffer" )
FUNCTION_CALL	8808:4	8808:67	8	TIFFError ( "reverseSamples24bits" , "Invalid image or work buffer" )
CALLEE	8808:4	8808:4	9	TIFFError
LEAF_NODE	8808:4	8808:4	10	TIFFError
LEAF_NODE	8808:13	8808:13	9	(
ARGUMENT	8808:14	8808:14	9	"reverseSamples24bits"
FIELD	8808:14	8808:14	10	"reverseSamples24bits"
LEAF_NODE	8808:14	8808:14	11	"reverseSamples24bits"
LEAF_NODE	8808:36	8808:36	9	,
ARGUMENT	8808:37	8808:37	9	"Invalid image or work buffer"
FIELD	8808:37	8808:37	10	"Invalid image or work buffer"
LEAF_NODE	8808:37	8808:37	11	"Invalid image or work buffer"
LEAF_NODE	8808:67	8808:67	9	)
LEAF_NODE	8808:68	8808:68	7	;
JUMP_STATEMENT	8809:4	8809:14	6	return ( 1 ) ;
KEYWORD	8809:4	8809:4	7	return
LEAF_NODE	8809:4	8809:4	8	return
DESTINATION	8809:11	8809:11	7	( 1 )
EXPR	8809:11	8809:13	8	( 1 )
LEAF_NODE	8809:11	8809:11	9	(
FIELD	8809:12	8809:12	9	1
LEAF_NODE	8809:12	8809:12	10	1
LEAF_NODE	8809:13	8809:13	9	)
LEAF_NODE	8809:14	8809:14	7	;
LEAF_NODE	8810:4	8810:4	5	}
EXPR_STATEMENT	8812:2	8812:16	3	ready_bits = 0 ;
EXPR	8812:2	8812:2	4	ready_bits = 0
ASSIGN	8812:2	8812:15	5	ready_bits = 0
LVAL	8812:2	8812:2	6	ready_bits
FIELD	8812:2	8812:2	7	ready_bits
LEAF_NODE	8812:2	8812:2	8	ready_bits
ASSIGN_OP	8812:13	8812:13	6	=
LEAF_NODE	8812:13	8812:13	7	=
RVAL	8812:15	8812:15	6	0
FIELD	8812:15	8812:15	7	0
LEAF_NODE	8812:15	8812:15	8	0
LEAF_NODE	8812:16	8812:16	4	;
EXPR_STATEMENT	8813:2	8813:39	3	mask_bits = ( uint32 ) - 1 >> ( 32 - bps ) ;
EXPR	8813:2	8813:2	4	mask_bits = ( uint32 ) - 1 >> ( 32 - bps )
ASSIGN	8813:2	8813:15	5	mask_bits = ( uint32 ) - 1 >> ( 32 - bps )
LVAL	8813:2	8813:2	6	mask_bits
FIELD	8813:2	8813:2	7	mask_bits
LEAF_NODE	8813:2	8813:2	8	mask_bits
ASSIGN_OP	8813:12	8813:12	6	=
LEAF_NODE	8813:12	8813:12	7	=
RVAL	8813:15	8813:38	6	( uint32 ) - 1 >> ( 32 - bps )
LEAF_NODE	8813:15	8813:15	7	(
TYPE_NAME	8813:16	8813:16	7	uint32
LEAF_NODE	8813:16	8813:16	8	uint32
LEAF_NODE	8813:22	8813:22	7	)
UNARY_EXPR	8813:23	8813:24	7	- 1
UNARY_OPERATOR	8813:23	8813:23	8	-
LEAF_NODE	8813:23	8813:23	9	-
FIELD	8813:24	8813:24	8	1
LEAF_NODE	8813:24	8813:24	9	1
LEAF_NODE	8813:26	8813:26	7	>>
LEAF_NODE	8813:29	8813:29	7	(
FIELD	8813:30	8813:30	7	32
LEAF_NODE	8813:30	8813:30	8	32
LEAF_NODE	8813:33	8813:33	7	-
FIELD	8813:35	8813:35	7	bps
LEAF_NODE	8813:35	8813:35	8	bps
LEAF_NODE	8813:38	8813:38	7	)
LEAF_NODE	8813:39	8813:39	4	;
EXPR_STATEMENT	8814:2	8814:13	3	dst = obuff ;
EXPR	8814:2	8814:2	4	dst = obuff
ASSIGN	8814:2	8814:8	5	dst = obuff
LVAL	8814:2	8814:2	6	dst
FIELD	8814:2	8814:2	7	dst
LEAF_NODE	8814:2	8814:2	8	dst
ASSIGN_OP	8814:6	8814:6	6	=
LEAF_NODE	8814:6	8814:6	7	=
RVAL	8814:8	8814:8	6	obuff
FIELD	8814:8	8814:8	7	obuff
LEAF_NODE	8814:8	8814:8	8	obuff
LEAF_NODE	8814:13	8814:13	4	;
ITERATION	8815:2	8816:4	3	
KEYWORD	8815:2	8815:2	4	for
LEAF_NODE	8815:2	8815:2	5	for
LEAF_NODE	8815:6	8815:6	4	(
FOR_INIT	8815:7	8815:18	4	col = width ;
EXPR	8815:7	8815:7	5	col = width
ASSIGN	8815:7	8815:13	6	col = width
LVAL	8815:7	8815:7	7	col
FIELD	8815:7	8815:7	8	col
LEAF_NODE	8815:7	8815:7	9	col
ASSIGN_OP	8815:11	8815:11	7	=
LEAF_NODE	8815:11	8815:11	8	=
RVAL	8815:13	8815:13	7	width
FIELD	8815:13	8815:13	8	width
LEAF_NODE	8815:13	8815:13	9	width
LEAF_NODE	8815:18	8815:18	5	;
CONDITION	8815:20	8815:20	4	col > 0
EXPR	8815:20	8815:26	5	col > 0
FIELD	8815:20	8815:20	6	col
LEAF_NODE	8815:20	8815:20	7	col
REL_OPERATOR	8815:24	8815:24	6	>
LEAF_NODE	8815:24	8815:24	7	>
FIELD	8815:26	8815:26	6	0
LEAF_NODE	8815:26	8815:26	7	0
LEAF_NODE	8815:27	8815:27	4	;
FOR_EXPR	8815:29	8815:29	4	col --
EXPR	8815:29	8815:29	5	col --
FIELD	8815:29	8815:32	6	col --
LEAF_NODE	8815:29	8815:29	7	col
LEAF_NODE	8815:32	8815:32	7	--
LEAF_NODE	8815:34	8815:34	4	)
STATEMENTS	8816:4	8858:4	4	
LEAF_NODE	8816:4	8816:4	5	{
STATEMENTS	8818:4	8819:4	5	
LEAF_NODE	8818:4	8818:4	6	bit_offset
LEAF_NODE	8818:15	8818:15	6	=
LEAF_NODE	8818:17	8818:17	6	(
LEAF_NODE	8818:18	8818:18	6	col
LEAF_NODE	8818:22	8818:22	6	-
LEAF_NODE	8818:24	8818:24	6	1
LEAF_NODE	8818:25	8818:25	6	)
EXPR_STATEMENT	8818:27	8818:38	6	* bps * spp ;
EXPR	8818:27	8818:35	7	* bps * spp
UNARY_EXPR	8818:27	8818:29	8	* bps
UNARY_OPERATOR	8818:27	8818:27	9	*
LEAF_NODE	8818:27	8818:27	10	*
FIELD	8818:29	8818:29	9	bps
LEAF_NODE	8818:29	8818:29	10	bps
LEAF_NODE	8818:33	8818:33	8	*
FIELD	8818:35	8818:35	8	spp
LEAF_NODE	8818:35	8818:35	9	spp
LEAF_NODE	8818:38	8818:38	7	;
ITERATION	8819:4	8820:6	6	
KEYWORD	8819:4	8819:4	7	for
LEAF_NODE	8819:4	8819:4	8	for
LEAF_NODE	8819:8	8819:8	7	(
FOR_INIT	8819:9	8819:19	7	sample = 0 ;
EXPR	8819:9	8819:9	8	sample = 0
ASSIGN	8819:9	8819:18	9	sample = 0
LVAL	8819:9	8819:9	10	sample
FIELD	8819:9	8819:9	11	sample
LEAF_NODE	8819:9	8819:9	12	sample
ASSIGN_OP	8819:16	8819:16	10	=
LEAF_NODE	8819:16	8819:16	11	=
RVAL	8819:18	8819:18	10	0
FIELD	8819:18	8819:18	11	0
LEAF_NODE	8819:18	8819:18	12	0
LEAF_NODE	8819:19	8819:19	8	;
CONDITION	8819:21	8819:21	7	sample < spp
EXPR	8819:21	8819:30	8	sample < spp
FIELD	8819:21	8819:21	9	sample
LEAF_NODE	8819:21	8819:21	10	sample
REL_OPERATOR	8819:28	8819:28	9	<
LEAF_NODE	8819:28	8819:28	10	<
FIELD	8819:30	8819:30	9	spp
LEAF_NODE	8819:30	8819:30	10	spp
LEAF_NODE	8819:33	8819:33	7	;
FOR_EXPR	8819:35	8819:35	7	sample ++
EXPR	8819:35	8819:35	8	sample ++
FIELD	8819:35	8819:41	9	sample ++
LEAF_NODE	8819:35	8819:35	10	sample
LEAF_NODE	8819:41	8819:41	10	++
LEAF_NODE	8819:43	8819:43	7	)
STATEMENTS	8820:6	8857:6	7	
LEAF_NODE	8820:6	8820:6	8	{
STATEMENTS	8821:6	8856:6	8	
SELECTION	8821:6	8822:8	9	
KEYWORD	8821:6	8821:6	10	if
LEAF_NODE	8821:6	8821:6	11	if
LEAF_NODE	8821:9	8821:9	10	(
CONDITION	8821:10	8821:10	10	sample == 0
EXPR	8821:10	8821:20	11	sample == 0
FIELD	8821:10	8821:10	12	sample
LEAF_NODE	8821:10	8821:10	13	sample
EQ_OPERATOR	8821:17	8821:17	12	==
LEAF_NODE	8821:17	8821:17	13	==
FIELD	8821:20	8821:20	12	0
LEAF_NODE	8821:20	8821:20	13	0
LEAF_NODE	8821:21	8821:21	10	)
STATEMENTS	8822:8	8825:8	10	
LEAF_NODE	8822:8	8822:8	11	{
STATEMENTS	8823:8	8824:8	11	
EXPR_STATEMENT	8823:8	8823:33	12	src_byte = bit_offset / 8 ;
EXPR	8823:8	8823:8	13	src_byte = bit_offset / 8
ASSIGN	8823:8	8823:19	14	src_byte = bit_offset / 8
LVAL	8823:8	8823:8	15	src_byte
FIELD	8823:8	8823:8	16	src_byte
LEAF_NODE	8823:8	8823:8	17	src_byte
ASSIGN_OP	8823:17	8823:17	15	=
LEAF_NODE	8823:17	8823:17	16	=
RVAL	8823:19	8823:32	15	bit_offset / 8
FIELD	8823:19	8823:19	16	bit_offset
LEAF_NODE	8823:19	8823:19	17	bit_offset
LEAF_NODE	8823:30	8823:30	16	/
FIELD	8823:32	8823:32	16	8
LEAF_NODE	8823:32	8823:32	17	8
LEAF_NODE	8823:33	8823:33	13	;
EXPR_STATEMENT	8824:8	8824:34	12	high_bit = bit_offset % 8 ;
EXPR	8824:8	8824:8	13	high_bit = bit_offset % 8
ASSIGN	8824:8	8824:20	14	high_bit = bit_offset % 8
LVAL	8824:8	8824:8	15	high_bit
FIELD	8824:8	8824:8	16	high_bit
LEAF_NODE	8824:8	8824:8	17	high_bit
ASSIGN_OP	8824:18	8824:18	15	=
LEAF_NODE	8824:18	8824:18	16	=
RVAL	8824:20	8824:33	15	bit_offset % 8
FIELD	8824:20	8824:20	16	bit_offset
LEAF_NODE	8824:20	8824:20	17	bit_offset
LEAF_NODE	8824:31	8824:31	16	%
FIELD	8824:33	8824:33	16	8
LEAF_NODE	8824:33	8824:33	17	8
LEAF_NODE	8824:34	8824:34	13	;
LEAF_NODE	8825:8	8825:8	11	}
SELECTION	8826:6	8827:8	9	
KEYWORD	8826:6	8826:6	10	else
LEAF_NODE	8826:6	8826:6	11	else
STATEMENTS	8827:8	8830:8	10	
LEAF_NODE	8827:8	8827:8	11	{
STATEMENTS	8828:8	8829:8	11	
EXPR_STATEMENT	8828:8	8828:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8828:8	8828:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8828:8	8828:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8828:8	8828:8	15	src_byte
FIELD	8828:8	8828:8	16	src_byte
LEAF_NODE	8828:8	8828:8	17	src_byte
ASSIGN_OP	8828:17	8828:17	15	=
LEAF_NODE	8828:17	8828:17	16	=
RVAL	8828:19	8828:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8828:19	8828:19	16	(
FIELD	8828:20	8828:20	16	bit_offset
LEAF_NODE	8828:20	8828:20	17	bit_offset
LEAF_NODE	8828:31	8828:31	16	+
LEAF_NODE	8828:33	8828:33	16	(
FIELD	8828:34	8828:34	16	sample
LEAF_NODE	8828:34	8828:34	17	sample
LEAF_NODE	8828:41	8828:41	16	*
FIELD	8828:43	8828:43	16	bps
LEAF_NODE	8828:43	8828:43	17	bps
LEAF_NODE	8828:46	8828:46	16	)
LEAF_NODE	8828:47	8828:47	16	)
LEAF_NODE	8828:49	8828:49	16	/
FIELD	8828:51	8828:51	16	8
LEAF_NODE	8828:51	8828:51	17	8
LEAF_NODE	8828:52	8828:52	13	;
EXPR_STATEMENT	8829:8	8829:53	12	high_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8829:8	8829:8	13	high_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8829:8	8829:20	14	high_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8829:8	8829:8	15	high_bit
FIELD	8829:8	8829:8	16	high_bit
LEAF_NODE	8829:8	8829:8	17	high_bit
ASSIGN_OP	8829:18	8829:18	15	=
LEAF_NODE	8829:18	8829:18	16	=
RVAL	8829:20	8829:52	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8829:20	8829:20	16	(
FIELD	8829:21	8829:21	16	bit_offset
LEAF_NODE	8829:21	8829:21	17	bit_offset
LEAF_NODE	8829:32	8829:32	16	+
LEAF_NODE	8829:34	8829:34	16	(
FIELD	8829:35	8829:35	16	sample
LEAF_NODE	8829:35	8829:35	17	sample
LEAF_NODE	8829:42	8829:42	16	*
FIELD	8829:44	8829:44	16	bps
LEAF_NODE	8829:44	8829:44	17	bps
LEAF_NODE	8829:47	8829:47	16	)
LEAF_NODE	8829:48	8829:48	16	)
LEAF_NODE	8829:50	8829:50	16	%
FIELD	8829:52	8829:52	16	8
LEAF_NODE	8829:52	8829:52	17	8
LEAF_NODE	8829:53	8829:53	13	;
LEAF_NODE	8830:8	8830:8	11	}
EXPR_STATEMENT	8832:6	8832:28	9	src = ibuff + src_byte ;
EXPR	8832:6	8832:6	10	src = ibuff + src_byte
ASSIGN	8832:6	8832:12	11	src = ibuff + src_byte
LVAL	8832:6	8832:6	12	src
FIELD	8832:6	8832:6	13	src
LEAF_NODE	8832:6	8832:6	14	src
ASSIGN_OP	8832:10	8832:10	12	=
LEAF_NODE	8832:10	8832:10	13	=
RVAL	8832:12	8832:20	12	ibuff + src_byte
FIELD	8832:12	8832:12	13	ibuff
LEAF_NODE	8832:12	8832:12	14	ibuff
LEAF_NODE	8832:18	8832:18	13	+
FIELD	8832:20	8832:20	13	src_byte
LEAF_NODE	8832:20	8832:20	14	src_byte
LEAF_NODE	8832:28	8832:28	10	;
EXPR_STATEMENT	8833:6	8833:53	9	match_bits = mask_bits << ( 32 - high_bit - bps ) ;
EXPR	8833:6	8833:6	10	match_bits = mask_bits << ( 32 - high_bit - bps )
ASSIGN	8833:6	8833:19	11	match_bits = mask_bits << ( 32 - high_bit - bps )
LVAL	8833:6	8833:6	12	match_bits
FIELD	8833:6	8833:6	13	match_bits
LEAF_NODE	8833:6	8833:6	14	match_bits
ASSIGN_OP	8833:17	8833:17	12	=
LEAF_NODE	8833:17	8833:17	13	=
RVAL	8833:19	8833:52	12	mask_bits << ( 32 - high_bit - bps )
FIELD	8833:19	8833:19	13	mask_bits
LEAF_NODE	8833:19	8833:19	14	mask_bits
LEAF_NODE	8833:29	8833:29	13	<<
LEAF_NODE	8833:32	8833:32	13	(
FIELD	8833:33	8833:33	13	32
LEAF_NODE	8833:33	8833:33	14	32
LEAF_NODE	8833:36	8833:36	13	-
FIELD	8833:38	8833:38	13	high_bit
LEAF_NODE	8833:38	8833:38	14	high_bit
LEAF_NODE	8833:47	8833:47	13	-
FIELD	8833:49	8833:49	13	bps
LEAF_NODE	8833:49	8833:49	14	bps
LEAF_NODE	8833:52	8833:52	13	)
LEAF_NODE	8833:53	8833:53	10	;
SELECTION	8834:6	8835:1	9	
KEYWORD	8834:6	8834:6	10	if
LEAF_NODE	8834:6	8834:6	11	if
LEAF_NODE	8834:9	8834:9	10	(
CONDITION	8834:10	8834:10	10	little_endian
EXPR	8834:10	8834:10	11	little_endian
FIELD	8834:10	8834:10	12	little_endian
LEAF_NODE	8834:10	8834:10	13	little_endian
LEAF_NODE	8834:23	8834:23	10	)
STATEMENTS	8835:1	8835:1	10	
EXPR_STATEMENT	8835:1	8835:65	11	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	8835:1	8835:1	12	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	8835:1	8835:9	13	buff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	8835:1	8835:1	14	buff1
FIELD	8835:1	8835:1	15	buff1
LEAF_NODE	8835:1	8835:1	16	buff1
ASSIGN_OP	8835:7	8835:7	14	=
LEAF_NODE	8835:7	8835:7	15	=
RVAL	8835:9	8835:9	14	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	8835:9	8835:26	15	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	8835:9	8835:22	16	( src [ 0 ] << 24 )
LEAF_NODE	8835:9	8835:9	17	(
FIELD	8835:10	8835:15	17	src [ 0 ]
LEAF_NODE	8835:10	8835:10	18	src
LEAF_NODE	8835:13	8835:13	18	[
EXPR	8835:14	8835:14	18	0
FIELD	8835:14	8835:14	19	0
LEAF_NODE	8835:14	8835:14	20	0
LEAF_NODE	8835:15	8835:15	18	]
LEAF_NODE	8835:17	8835:17	17	<<
FIELD	8835:20	8835:20	17	24
LEAF_NODE	8835:20	8835:20	18	24
LEAF_NODE	8835:22	8835:22	17	)
LEAF_NODE	8835:24	8835:24	16	|
BIT_OR_ELEM	8835:26	8835:26	16	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	8835:26	8835:43	17	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	8835:26	8835:39	18	( src [ 1 ] << 16 )
LEAF_NODE	8835:26	8835:26	19	(
FIELD	8835:27	8835:32	19	src [ 1 ]
LEAF_NODE	8835:27	8835:27	20	src
LEAF_NODE	8835:30	8835:30	20	[
EXPR	8835:31	8835:31	20	1
FIELD	8835:31	8835:31	21	1
LEAF_NODE	8835:31	8835:31	22	1
LEAF_NODE	8835:32	8835:32	20	]
LEAF_NODE	8835:34	8835:34	19	<<
FIELD	8835:37	8835:37	19	16
LEAF_NODE	8835:37	8835:37	20	16
LEAF_NODE	8835:39	8835:39	19	)
LEAF_NODE	8835:41	8835:41	18	|
BIT_OR_ELEM	8835:43	8835:43	18	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	8835:43	8835:59	19	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	8835:43	8835:55	20	( src [ 2 ] << 8 )
LEAF_NODE	8835:43	8835:43	21	(
FIELD	8835:44	8835:49	21	src [ 2 ]
LEAF_NODE	8835:44	8835:44	22	src
LEAF_NODE	8835:47	8835:47	22	[
EXPR	8835:48	8835:48	22	2
FIELD	8835:48	8835:48	23	2
LEAF_NODE	8835:48	8835:48	24	2
LEAF_NODE	8835:49	8835:49	22	]
LEAF_NODE	8835:51	8835:51	21	<<
FIELD	8835:54	8835:54	21	8
LEAF_NODE	8835:54	8835:54	22	8
LEAF_NODE	8835:55	8835:55	21	)
LEAF_NODE	8835:57	8835:57	20	|
BIT_OR_ELEM	8835:59	8835:59	20	src [ 3 ]
FIELD	8835:59	8835:64	21	src [ 3 ]
LEAF_NODE	8835:59	8835:59	22	src
LEAF_NODE	8835:62	8835:62	22	[
EXPR	8835:63	8835:63	22	3
FIELD	8835:63	8835:63	23	3
LEAF_NODE	8835:63	8835:63	24	3
LEAF_NODE	8835:64	8835:64	22	]
LEAF_NODE	8835:65	8835:65	12	;
SELECTION	8836:6	8837:1	9	
KEYWORD	8836:6	8836:6	10	else
LEAF_NODE	8836:6	8836:6	11	else
STATEMENTS	8837:1	8837:1	10	
EXPR_STATEMENT	8837:1	8837:65	11	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	8837:1	8837:1	12	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	8837:1	8837:9	13	buff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	8837:1	8837:1	14	buff1
FIELD	8837:1	8837:1	15	buff1
LEAF_NODE	8837:1	8837:1	16	buff1
ASSIGN_OP	8837:7	8837:7	14	=
LEAF_NODE	8837:7	8837:7	15	=
RVAL	8837:9	8837:9	14	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	8837:9	8837:26	15	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	8837:9	8837:22	16	( src [ 3 ] << 24 )
LEAF_NODE	8837:9	8837:9	17	(
FIELD	8837:10	8837:15	17	src [ 3 ]
LEAF_NODE	8837:10	8837:10	18	src
LEAF_NODE	8837:13	8837:13	18	[
EXPR	8837:14	8837:14	18	3
FIELD	8837:14	8837:14	19	3
LEAF_NODE	8837:14	8837:14	20	3
LEAF_NODE	8837:15	8837:15	18	]
LEAF_NODE	8837:17	8837:17	17	<<
FIELD	8837:20	8837:20	17	24
LEAF_NODE	8837:20	8837:20	18	24
LEAF_NODE	8837:22	8837:22	17	)
LEAF_NODE	8837:24	8837:24	16	|
BIT_OR_ELEM	8837:26	8837:26	16	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	8837:26	8837:43	17	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	8837:26	8837:39	18	( src [ 2 ] << 16 )
LEAF_NODE	8837:26	8837:26	19	(
FIELD	8837:27	8837:32	19	src [ 2 ]
LEAF_NODE	8837:27	8837:27	20	src
LEAF_NODE	8837:30	8837:30	20	[
EXPR	8837:31	8837:31	20	2
FIELD	8837:31	8837:31	21	2
LEAF_NODE	8837:31	8837:31	22	2
LEAF_NODE	8837:32	8837:32	20	]
LEAF_NODE	8837:34	8837:34	19	<<
FIELD	8837:37	8837:37	19	16
LEAF_NODE	8837:37	8837:37	20	16
LEAF_NODE	8837:39	8837:39	19	)
LEAF_NODE	8837:41	8837:41	18	|
BIT_OR_ELEM	8837:43	8837:43	18	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	8837:43	8837:59	19	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	8837:43	8837:55	20	( src [ 1 ] << 8 )
LEAF_NODE	8837:43	8837:43	21	(
FIELD	8837:44	8837:49	21	src [ 1 ]
LEAF_NODE	8837:44	8837:44	22	src
LEAF_NODE	8837:47	8837:47	22	[
EXPR	8837:48	8837:48	22	1
FIELD	8837:48	8837:48	23	1
LEAF_NODE	8837:48	8837:48	24	1
LEAF_NODE	8837:49	8837:49	22	]
LEAF_NODE	8837:51	8837:51	21	<<
FIELD	8837:54	8837:54	21	8
LEAF_NODE	8837:54	8837:54	22	8
LEAF_NODE	8837:55	8837:55	21	)
LEAF_NODE	8837:57	8837:57	20	|
BIT_OR_ELEM	8837:59	8837:59	20	src [ 0 ]
FIELD	8837:59	8837:64	21	src [ 0 ]
LEAF_NODE	8837:59	8837:59	22	src
LEAF_NODE	8837:62	8837:62	22	[
EXPR	8837:63	8837:63	22	0
FIELD	8837:63	8837:63	23	0
LEAF_NODE	8837:63	8837:63	24	0
LEAF_NODE	8837:64	8837:64	22	]
LEAF_NODE	8837:65	8837:65	12	;
LEAF_NODE	8838:6	8838:6	9	buff1
LEAF_NODE	8838:12	8838:12	9	=
LEAF_NODE	8838:14	8838:14	9	(
LEAF_NODE	8838:15	8838:15	9	buff1
LEAF_NODE	8838:21	8838:21	9	&
LEAF_NODE	8838:23	8838:23	9	match_bits
LEAF_NODE	8838:33	8838:33	9	)
LEAF_NODE	8838:35	8838:35	9	<<
LEAF_NODE	8838:38	8838:38	9	(
LEAF_NODE	8838:39	8838:39	9	high_bit
LEAF_NODE	8838:47	8838:47	9	)
LEAF_NODE	8838:48	8838:48	9	;
SELECTION	8840:6	8841:8	9	
KEYWORD	8840:6	8840:6	10	if
LEAF_NODE	8840:6	8840:6	11	if
LEAF_NODE	8840:9	8840:9	10	(
CONDITION	8840:10	8840:10	10	ready_bits < 16
EXPR	8840:10	8840:23	11	ready_bits < 16
FIELD	8840:10	8840:10	12	ready_bits
LEAF_NODE	8840:10	8840:10	13	ready_bits
REL_OPERATOR	8840:21	8840:21	12	<
LEAF_NODE	8840:21	8840:21	13	<
FIELD	8840:23	8840:23	12	16
LEAF_NODE	8840:23	8840:23	13	16
LEAF_NODE	8840:25	8840:25	10	)
STATEMENTS	8841:8	8844:8	10	
LEAF_NODE	8841:8	8841:8	11	{
STATEMENTS	8842:8	8843:8	11	
EXPR_STATEMENT	8842:8	8842:33	12	bytebuff1 = bytebuff2 = 0 ;
EXPR	8842:8	8842:8	13	bytebuff1 = bytebuff2 = 0
ASSIGN	8842:8	8842:20	14	bytebuff1 = bytebuff2 = 0
LVAL	8842:8	8842:8	15	bytebuff1
FIELD	8842:8	8842:8	16	bytebuff1
LEAF_NODE	8842:8	8842:8	17	bytebuff1
ASSIGN_OP	8842:18	8842:18	15	=
LEAF_NODE	8842:18	8842:18	16	=
RVAL	8842:20	8842:20	15	bytebuff2 = 0
ASSIGN	8842:20	8842:32	16	bytebuff2 = 0
LVAL	8842:20	8842:20	17	bytebuff2
FIELD	8842:20	8842:20	18	bytebuff2
LEAF_NODE	8842:20	8842:20	19	bytebuff2
ASSIGN_OP	8842:30	8842:30	17	=
LEAF_NODE	8842:30	8842:30	18	=
RVAL	8842:32	8842:32	17	0
FIELD	8842:32	8842:32	18	0
LEAF_NODE	8842:32	8842:32	19	0
LEAF_NODE	8842:33	8842:33	13	;
EXPR_STATEMENT	8843:8	8843:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8843:8	8843:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8843:8	8843:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8843:8	8843:8	15	buff2
FIELD	8843:8	8843:8	16	buff2
LEAF_NODE	8843:8	8843:8	17	buff2
ASSIGN_OP	8843:14	8843:14	15	=
LEAF_NODE	8843:14	8843:14	16	=
RVAL	8843:16	8843:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8843:16	8843:16	16	(
BIT_OR	8843:17	8843:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8843:17	8843:17	17	buff2
FIELD	8843:17	8843:17	18	buff2
LEAF_NODE	8843:17	8843:17	19	buff2
LEAF_NODE	8843:23	8843:23	17	|
BIT_OR_ELEM	8843:25	8843:45	17	( buff1 >> ready_bits )
LEAF_NODE	8843:25	8843:25	18	(
FIELD	8843:26	8843:26	18	buff1
LEAF_NODE	8843:26	8843:26	19	buff1
LEAF_NODE	8843:32	8843:32	18	>>
FIELD	8843:35	8843:35	18	ready_bits
LEAF_NODE	8843:35	8843:35	19	ready_bits
LEAF_NODE	8843:45	8843:45	18	)
LEAF_NODE	8843:46	8843:46	16	)
LEAF_NODE	8843:47	8843:47	13	;
LEAF_NODE	8844:8	8844:8	11	}
SELECTION	8845:6	8846:8	9	
KEYWORD	8845:6	8845:6	10	else
LEAF_NODE	8845:6	8845:6	11	else
STATEMENTS	8846:8	8855:8	10	
LEAF_NODE	8846:8	8846:8	11	{
STATEMENTS	8847:8	8854:8	11	
EXPR_STATEMENT	8847:8	8847:33	12	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	8847:8	8847:8	13	bytebuff1 = ( buff2 >> 24 )
ASSIGN	8847:8	8847:20	14	bytebuff1 = ( buff2 >> 24 )
LVAL	8847:8	8847:8	15	bytebuff1
FIELD	8847:8	8847:8	16	bytebuff1
LEAF_NODE	8847:8	8847:8	17	bytebuff1
ASSIGN_OP	8847:18	8847:18	15	=
LEAF_NODE	8847:18	8847:18	16	=
RVAL	8847:20	8847:32	15	( buff2 >> 24 )
LEAF_NODE	8847:20	8847:20	16	(
FIELD	8847:21	8847:21	16	buff2
LEAF_NODE	8847:21	8847:21	17	buff2
LEAF_NODE	8847:27	8847:27	16	>>
FIELD	8847:30	8847:30	16	24
LEAF_NODE	8847:30	8847:30	17	24
LEAF_NODE	8847:32	8847:32	16	)
LEAF_NODE	8847:33	8847:33	13	;
EXPR_STATEMENT	8848:8	8848:26	12	* dst ++ = bytebuff1 ;
EXPR	8848:8	8848:8	13	* dst ++ = bytebuff1
ASSIGN	8848:8	8848:17	14	* dst ++ = bytebuff1
LVAL	8848:8	8848:8	15	* dst ++
UNARY_EXPR	8848:8	8848:9	16	* dst ++
UNARY_OPERATOR	8848:8	8848:8	17	*
LEAF_NODE	8848:8	8848:8	18	*
FIELD	8848:9	8848:12	17	dst ++
LEAF_NODE	8848:9	8848:9	18	dst
LEAF_NODE	8848:12	8848:12	18	++
ASSIGN_OP	8848:15	8848:15	15	=
LEAF_NODE	8848:15	8848:15	16	=
RVAL	8848:17	8848:17	15	bytebuff1
FIELD	8848:17	8848:17	16	bytebuff1
LEAF_NODE	8848:17	8848:17	17	bytebuff1
LEAF_NODE	8848:26	8848:26	13	;
EXPR_STATEMENT	8849:8	8849:33	12	bytebuff2 = ( buff2 >> 16 ) ;
EXPR	8849:8	8849:8	13	bytebuff2 = ( buff2 >> 16 )
ASSIGN	8849:8	8849:20	14	bytebuff2 = ( buff2 >> 16 )
LVAL	8849:8	8849:8	15	bytebuff2
FIELD	8849:8	8849:8	16	bytebuff2
LEAF_NODE	8849:8	8849:8	17	bytebuff2
ASSIGN_OP	8849:18	8849:18	15	=
LEAF_NODE	8849:18	8849:18	16	=
RVAL	8849:20	8849:32	15	( buff2 >> 16 )
LEAF_NODE	8849:20	8849:20	16	(
FIELD	8849:21	8849:21	16	buff2
LEAF_NODE	8849:21	8849:21	17	buff2
LEAF_NODE	8849:27	8849:27	16	>>
FIELD	8849:30	8849:30	16	16
LEAF_NODE	8849:30	8849:30	17	16
LEAF_NODE	8849:32	8849:32	16	)
LEAF_NODE	8849:33	8849:33	13	;
EXPR_STATEMENT	8850:8	8850:26	12	* dst ++ = bytebuff2 ;
EXPR	8850:8	8850:8	13	* dst ++ = bytebuff2
ASSIGN	8850:8	8850:17	14	* dst ++ = bytebuff2
LVAL	8850:8	8850:8	15	* dst ++
UNARY_EXPR	8850:8	8850:9	16	* dst ++
UNARY_OPERATOR	8850:8	8850:8	17	*
LEAF_NODE	8850:8	8850:8	18	*
FIELD	8850:9	8850:12	17	dst ++
LEAF_NODE	8850:9	8850:9	18	dst
LEAF_NODE	8850:12	8850:12	18	++
ASSIGN_OP	8850:15	8850:15	15	=
LEAF_NODE	8850:15	8850:15	16	=
RVAL	8850:17	8850:17	15	bytebuff2
FIELD	8850:17	8850:17	16	bytebuff2
LEAF_NODE	8850:17	8850:17	17	bytebuff2
LEAF_NODE	8850:26	8850:26	13	;
EXPR_STATEMENT	8851:8	8851:24	12	ready_bits -= 16 ;
EXPR	8851:8	8851:8	13	ready_bits -= 16
ASSIGN	8851:8	8851:22	14	ready_bits -= 16
LVAL	8851:8	8851:8	15	ready_bits
FIELD	8851:8	8851:8	16	ready_bits
LEAF_NODE	8851:8	8851:8	17	ready_bits
ASSIGN_OP	8851:19	8851:19	15	-=
LEAF_NODE	8851:19	8851:19	16	-=
RVAL	8851:22	8851:22	15	16
FIELD	8851:22	8851:22	16	16
LEAF_NODE	8851:22	8851:22	17	16
LEAF_NODE	8851:24	8851:24	13	;
EXPR_STATEMENT	8854:8	8854:55	12	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) ) ;
EXPR	8854:8	8854:8	13	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
ASSIGN	8854:8	8854:16	14	buff2 = ( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LVAL	8854:8	8854:8	15	buff2
FIELD	8854:8	8854:8	16	buff2
LEAF_NODE	8854:8	8854:8	17	buff2
ASSIGN_OP	8854:14	8854:14	15	=
LEAF_NODE	8854:14	8854:14	16	=
RVAL	8854:16	8854:54	15	( ( buff2 << 16 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	8854:16	8854:16	16	(
BIT_OR	8854:17	8854:33	16	( buff2 << 16 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	8854:17	8854:29	17	( buff2 << 16 )
LEAF_NODE	8854:17	8854:17	18	(
FIELD	8854:18	8854:18	18	buff2
LEAF_NODE	8854:18	8854:18	19	buff2
LEAF_NODE	8854:24	8854:24	18	<<
FIELD	8854:27	8854:27	18	16
LEAF_NODE	8854:27	8854:27	19	16
LEAF_NODE	8854:29	8854:29	18	)
LEAF_NODE	8854:31	8854:31	17	|
BIT_OR_ELEM	8854:33	8854:53	17	( buff1 >> ready_bits )
LEAF_NODE	8854:33	8854:33	18	(
FIELD	8854:34	8854:34	18	buff1
LEAF_NODE	8854:34	8854:34	19	buff1
LEAF_NODE	8854:40	8854:40	18	>>
FIELD	8854:43	8854:43	18	ready_bits
LEAF_NODE	8854:43	8854:43	19	ready_bits
LEAF_NODE	8854:53	8854:53	18	)
LEAF_NODE	8854:54	8854:54	16	)
LEAF_NODE	8854:55	8854:55	13	;
LEAF_NODE	8855:8	8855:8	11	}
EXPR_STATEMENT	8856:6	8856:23	9	ready_bits += bps ;
EXPR	8856:6	8856:6	10	ready_bits += bps
ASSIGN	8856:6	8856:20	11	ready_bits += bps
LVAL	8856:6	8856:6	12	ready_bits
FIELD	8856:6	8856:6	13	ready_bits
LEAF_NODE	8856:6	8856:6	14	ready_bits
ASSIGN_OP	8856:17	8856:17	12	+=
LEAF_NODE	8856:17	8856:17	13	+=
RVAL	8856:20	8856:20	12	bps
FIELD	8856:20	8856:20	13	bps
LEAF_NODE	8856:20	8856:20	14	bps
LEAF_NODE	8856:23	8856:23	10	;
LEAF_NODE	8857:6	8857:6	8	}
LEAF_NODE	8858:4	8858:4	5	}
ITERATION	8861:2	8862:4	3	
KEYWORD	8861:2	8861:2	4	while
LEAF_NODE	8861:2	8861:2	5	while
LEAF_NODE	8861:8	8861:8	4	(
CONDITION	8861:9	8861:9	4	ready_bits > 0
EXPR	8861:9	8861:22	5	ready_bits > 0
FIELD	8861:9	8861:9	6	ready_bits
LEAF_NODE	8861:9	8861:9	7	ready_bits
REL_OPERATOR	8861:20	8861:20	6	>
LEAF_NODE	8861:20	8861:20	7	>
FIELD	8861:22	8861:22	6	0
LEAF_NODE	8861:22	8861:22	7	0
LEAF_NODE	8861:23	8861:23	4	)
STATEMENTS	8862:4	8869:4	4	
LEAF_NODE	8862:4	8862:4	5	{
STATEMENTS	8863:4	8868:4	5	
EXPR_STATEMENT	8863:4	8863:29	6	bytebuff1 = ( buff2 >> 24 ) ;
EXPR	8863:4	8863:4	7	bytebuff1 = ( buff2 >> 24 )
ASSIGN	8863:4	8863:16	8	bytebuff1 = ( buff2 >> 24 )
LVAL	8863:4	8863:4	9	bytebuff1
FIELD	8863:4	8863:4	10	bytebuff1
LEAF_NODE	8863:4	8863:4	11	bytebuff1
ASSIGN_OP	8863:14	8863:14	9	=
LEAF_NODE	8863:14	8863:14	10	=
RVAL	8863:16	8863:28	9	( buff2 >> 24 )
LEAF_NODE	8863:16	8863:16	10	(
FIELD	8863:17	8863:17	10	buff2
LEAF_NODE	8863:17	8863:17	11	buff2
LEAF_NODE	8863:23	8863:23	10	>>
FIELD	8863:26	8863:26	10	24
LEAF_NODE	8863:26	8863:26	11	24
LEAF_NODE	8863:28	8863:28	10	)
LEAF_NODE	8863:29	8863:29	7	;
EXPR_STATEMENT	8864:4	8864:22	6	* dst ++ = bytebuff1 ;
EXPR	8864:4	8864:4	7	* dst ++ = bytebuff1
ASSIGN	8864:4	8864:13	8	* dst ++ = bytebuff1
LVAL	8864:4	8864:4	9	* dst ++
UNARY_EXPR	8864:4	8864:5	10	* dst ++
UNARY_OPERATOR	8864:4	8864:4	11	*
LEAF_NODE	8864:4	8864:4	12	*
FIELD	8864:5	8864:8	11	dst ++
LEAF_NODE	8864:5	8864:5	12	dst
LEAF_NODE	8864:8	8864:8	12	++
ASSIGN_OP	8864:11	8864:11	9	=
LEAF_NODE	8864:11	8864:11	10	=
RVAL	8864:13	8864:13	9	bytebuff1
FIELD	8864:13	8864:13	10	bytebuff1
LEAF_NODE	8864:13	8864:13	11	bytebuff1
LEAF_NODE	8864:22	8864:22	7	;
EXPR_STATEMENT	8866:4	8866:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	8866:4	8866:4	7	buff2 = ( buff2 << 8 )
ASSIGN	8866:4	8866:12	8	buff2 = ( buff2 << 8 )
LVAL	8866:4	8866:4	9	buff2
FIELD	8866:4	8866:4	10	buff2
LEAF_NODE	8866:4	8866:4	11	buff2
ASSIGN_OP	8866:10	8866:10	9	=
LEAF_NODE	8866:10	8866:10	10	=
RVAL	8866:12	8866:23	9	( buff2 << 8 )
LEAF_NODE	8866:12	8866:12	10	(
FIELD	8866:13	8866:13	10	buff2
LEAF_NODE	8866:13	8866:13	11	buff2
LEAF_NODE	8866:19	8866:19	10	<<
FIELD	8866:22	8866:22	10	8
LEAF_NODE	8866:22	8866:22	11	8
LEAF_NODE	8866:23	8866:23	10	)
LEAF_NODE	8866:24	8866:24	7	;
EXPR_STATEMENT	8867:4	8867:25	6	bytebuff2 = bytebuff1 ;
EXPR	8867:4	8867:4	7	bytebuff2 = bytebuff1
ASSIGN	8867:4	8867:16	8	bytebuff2 = bytebuff1
LVAL	8867:4	8867:4	9	bytebuff2
FIELD	8867:4	8867:4	10	bytebuff2
LEAF_NODE	8867:4	8867:4	11	bytebuff2
ASSIGN_OP	8867:14	8867:14	9	=
LEAF_NODE	8867:14	8867:14	10	=
RVAL	8867:16	8867:16	9	bytebuff1
FIELD	8867:16	8867:16	10	bytebuff1
LEAF_NODE	8867:16	8867:16	11	bytebuff1
LEAF_NODE	8867:25	8867:25	7	;
EXPR_STATEMENT	8868:4	8868:19	6	ready_bits -= 8 ;
EXPR	8868:4	8868:4	7	ready_bits -= 8
ASSIGN	8868:4	8868:18	8	ready_bits -= 8
LVAL	8868:4	8868:4	9	ready_bits
FIELD	8868:4	8868:4	10	ready_bits
LEAF_NODE	8868:4	8868:4	11	ready_bits
ASSIGN_OP	8868:15	8868:15	9	-=
LEAF_NODE	8868:15	8868:15	10	-=
RVAL	8868:18	8868:18	9	8
FIELD	8868:18	8868:18	10	8
LEAF_NODE	8868:18	8868:18	11	8
LEAF_NODE	8868:19	8868:19	7	;
LEAF_NODE	8869:4	8869:4	5	}
JUMP_STATEMENT	8871:2	8871:12	3	return ( 0 ) ;
KEYWORD	8871:2	8871:2	4	return
LEAF_NODE	8871:2	8871:2	5	return
DESTINATION	8871:9	8871:9	4	( 0 )
EXPR	8871:9	8871:11	5	( 0 )
LEAF_NODE	8871:9	8871:9	6	(
FIELD	8871:10	8871:10	6	0
LEAF_NODE	8871:10	8871:10	7	0
LEAF_NODE	8871:11	8871:11	6	)
LEAF_NODE	8871:12	8871:12	4	;
LEAF_NODE	8872:2	8872:2	2	}
FUNCTION_DEF	8875:0	8973:2	1	
RETURN_TYPE	8875:0	8875:7	2	static int
LEAF_NODE	8875:0	8875:0	3	static
TYPE_NAME	8875:7	8875:7	3	int
LEAF_NODE	8875:7	8875:7	4	int
FUNCTION_NAME	8876:0	8876:0	2	reverseSamples32bits
LEAF_NODE	8876:0	8876:0	3	reverseSamples32bits
PARAMETER_LIST	8876:21	8877:48	2	( uint16 spp , uint16 bps , uint32 width , uint8 * ibuff , uint8 * obuff )
LEAF_NODE	8876:21	8876:21	3	(
PARAMETER_DECL	8876:22	8876:29	3	uint16 spp
TYPE	8876:22	8876:22	4	uint16
TYPE_NAME	8876:22	8876:22	5	uint16
LEAF_NODE	8876:22	8876:22	6	uint16
NAME	8876:29	8876:29	4	spp
LEAF_NODE	8876:29	8876:29	5	spp
LEAF_NODE	8876:32	8876:32	3	,
PARAMETER_DECL	8876:34	8876:41	3	uint16 bps
TYPE	8876:34	8876:34	4	uint16
TYPE_NAME	8876:34	8876:34	5	uint16
LEAF_NODE	8876:34	8876:34	6	uint16
NAME	8876:41	8876:41	4	bps
LEAF_NODE	8876:41	8876:41	5	bps
LEAF_NODE	8876:44	8876:44	3	,
PARAMETER_DECL	8876:46	8876:53	3	uint32 width
TYPE	8876:46	8876:46	4	uint32
TYPE_NAME	8876:46	8876:46	5	uint32
LEAF_NODE	8876:46	8876:46	6	uint32
NAME	8876:53	8876:53	4	width
LEAF_NODE	8876:53	8876:53	5	width
LEAF_NODE	8876:58	8876:58	3	,
PARAMETER_DECL	8877:22	8877:29	3	uint8 * ibuff
TYPE	8877:22	8877:28	4	uint8 *
TYPE_NAME	8877:22	8877:22	5	uint8
LEAF_NODE	8877:22	8877:22	6	uint8
POINTER	8877:28	8877:28	5	*
LEAF_NODE	8877:28	8877:28	6	*
NAME	8877:29	8877:29	4	ibuff
LEAF_NODE	8877:29	8877:29	5	ibuff
LEAF_NODE	8877:34	8877:34	3	,
PARAMETER_DECL	8877:36	8877:43	3	uint8 * obuff
TYPE	8877:36	8877:42	4	uint8 *
TYPE_NAME	8877:36	8877:36	5	uint8
LEAF_NODE	8877:36	8877:36	6	uint8
POINTER	8877:42	8877:42	5	*
LEAF_NODE	8877:42	8877:42	6	*
NAME	8877:43	8877:43	4	obuff
LEAF_NODE	8877:43	8877:43	5	obuff
LEAF_NODE	8877:48	8877:48	3	)
LEAF_NODE	8878:2	8878:2	2	{
STATEMENTS	8879:2	8972:2	2	
SIMPLE_DECL	8879:2	8879:46	3	int ready_bits ; ready_bits = 0 ;
VAR_DECL	8879:2	8879:9	4	int ready_bits ; ready_bits = 0
TYPE	8879:2	8879:2	5	int
TYPE_NAME	8879:2	8879:2	6	int
LEAF_NODE	8879:2	8879:2	7	int
NAME	8879:9	8879:9	5	ready_bits
LEAF_NODE	8879:9	8879:9	6	ready_bits
LEAF_NODE	0:0	0:0	5	;
INIT	8879:9	8879:9	5	ready_bits = 0
ASSIGN	8879:9	8879:22	6	ready_bits = 0
LVAL	8879:9	8879:9	7	ready_bits
NAME	8879:9	8879:9	8	ready_bits
LEAF_NODE	8879:9	8879:9	9	ready_bits
ASSIGN_OP	8879:20	8879:20	7	=
LEAF_NODE	8879:20	8879:20	8	=
RVAL	8879:22	8879:22	7	0
FIELD	8879:22	8879:22	8	0
LEAF_NODE	8879:22	8879:22	9	0
LEAF_NODE	8879:46	8879:46	4	;
SIMPLE_DECL	8881:2	8881:19	3	uint32 bit_offset ;
VAR_DECL	8881:2	8881:9	4	uint32 bit_offset
TYPE	8881:2	8881:2	5	uint32
TYPE_NAME	8881:2	8881:2	6	uint32
LEAF_NODE	8881:2	8881:2	7	uint32
NAME	8881:9	8881:9	5	bit_offset
LEAF_NODE	8881:9	8881:9	6	bit_offset
LEAF_NODE	8881:19	8881:19	4	;
SIMPLE_DECL	8882:2	8882:35	3	uint32 src_byte ; src_byte = 0 , uint32 high_bit ; high_bit = 0 ;
INIT_DECL_LIST	8882:2	8882:2	4	uint32 src_byte ; src_byte = 0 , uint32 high_bit ; high_bit = 0
VAR_DECL	8882:2	8882:9	5	uint32 src_byte ; src_byte = 0
TYPE	8882:2	8882:2	6	uint32
TYPE_NAME	8882:2	8882:2	7	uint32
LEAF_NODE	8882:2	8882:2	8	uint32
NAME	8882:9	8882:9	6	src_byte
LEAF_NODE	8882:9	8882:9	7	src_byte
LEAF_NODE	0:0	0:0	6	;
INIT	8882:9	8882:9	6	src_byte = 0
ASSIGN	8882:9	8882:20	7	src_byte = 0
LVAL	8882:9	8882:9	8	src_byte
NAME	8882:9	8882:9	9	src_byte
LEAF_NODE	8882:9	8882:9	10	src_byte
ASSIGN_OP	8882:18	8882:18	8	=
LEAF_NODE	8882:18	8882:18	9	=
RVAL	8882:20	8882:20	8	0
FIELD	8882:20	8882:20	9	0
LEAF_NODE	8882:20	8882:20	10	0
LEAF_NODE	8882:21	8882:21	5	,
VAR_DECL	8882:2	8882:23	5	uint32 high_bit ; high_bit = 0
TYPE	8882:2	8882:2	6	uint32
TYPE_NAME	8882:2	8882:2	7	uint32
LEAF_NODE	8882:2	8882:2	8	uint32
NAME	8882:23	8882:23	6	high_bit
LEAF_NODE	8882:23	8882:23	7	high_bit
LEAF_NODE	0:0	0:0	6	;
INIT	8882:23	8882:23	6	high_bit = 0
ASSIGN	8882:23	8882:34	7	high_bit = 0
LVAL	8882:23	8882:23	8	high_bit
NAME	8882:23	8882:23	9	high_bit
LEAF_NODE	8882:23	8882:23	10	high_bit
ASSIGN_OP	8882:32	8882:32	8	=
LEAF_NODE	8882:32	8882:32	9	=
RVAL	8882:34	8882:34	8	0
FIELD	8882:34	8882:34	9	0
LEAF_NODE	8882:34	8882:34	10	0
LEAF_NODE	8882:35	8882:35	4	;
SIMPLE_DECL	8883:2	8883:12	3	uint32 col ;
VAR_DECL	8883:2	8883:9	4	uint32 col
TYPE	8883:2	8883:2	5	uint32
TYPE_NAME	8883:2	8883:2	6	uint32
LEAF_NODE	8883:2	8883:2	7	uint32
NAME	8883:9	8883:9	5	col
LEAF_NODE	8883:9	8883:9	6	col
LEAF_NODE	8883:12	8883:12	4	;
SIMPLE_DECL	8884:2	8884:37	3	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0 ;
INIT_DECL_LIST	8884:2	8884:2	4	uint32 longbuff1 ; longbuff1 = 0 , uint32 longbuff2 ; longbuff2 = 0
VAR_DECL	8884:2	8884:9	5	uint32 longbuff1 ; longbuff1 = 0
TYPE	8884:2	8884:2	6	uint32
TYPE_NAME	8884:2	8884:2	7	uint32
LEAF_NODE	8884:2	8884:2	8	uint32
NAME	8884:9	8884:9	6	longbuff1
LEAF_NODE	8884:9	8884:9	7	longbuff1
LEAF_NODE	0:0	0:0	6	;
INIT	8884:9	8884:9	6	longbuff1 = 0
ASSIGN	8884:9	8884:21	7	longbuff1 = 0
LVAL	8884:9	8884:9	8	longbuff1
NAME	8884:9	8884:9	9	longbuff1
LEAF_NODE	8884:9	8884:9	10	longbuff1
ASSIGN_OP	8884:19	8884:19	8	=
LEAF_NODE	8884:19	8884:19	9	=
RVAL	8884:21	8884:21	8	0
FIELD	8884:21	8884:21	9	0
LEAF_NODE	8884:21	8884:21	10	0
LEAF_NODE	8884:22	8884:22	5	,
VAR_DECL	8884:2	8884:24	5	uint32 longbuff2 ; longbuff2 = 0
TYPE	8884:2	8884:2	6	uint32
TYPE_NAME	8884:2	8884:2	7	uint32
LEAF_NODE	8884:2	8884:2	8	uint32
NAME	8884:24	8884:24	6	longbuff2
LEAF_NODE	8884:24	8884:24	7	longbuff2
LEAF_NODE	0:0	0:0	6	;
INIT	8884:24	8884:24	6	longbuff2 = 0
ASSIGN	8884:24	8884:36	7	longbuff2 = 0
LVAL	8884:24	8884:24	8	longbuff2
NAME	8884:24	8884:24	9	longbuff2
LEAF_NODE	8884:24	8884:24	10	longbuff2
ASSIGN_OP	8884:34	8884:34	8	=
LEAF_NODE	8884:34	8884:34	9	=
RVAL	8884:36	8884:36	8	0
FIELD	8884:36	8884:36	9	0
LEAF_NODE	8884:36	8884:36	10	0
LEAF_NODE	8884:37	8884:37	4	;
SIMPLE_DECL	8885:2	8885:38	3	uint64 mask_bits ; mask_bits = 0 , uint64 match_bits ; match_bits = 0 ;
INIT_DECL_LIST	8885:2	8885:2	4	uint64 mask_bits ; mask_bits = 0 , uint64 match_bits ; match_bits = 0
VAR_DECL	8885:2	8885:9	5	uint64 mask_bits ; mask_bits = 0
TYPE	8885:2	8885:2	6	uint64
TYPE_NAME	8885:2	8885:2	7	uint64
LEAF_NODE	8885:2	8885:2	8	uint64
NAME	8885:9	8885:9	6	mask_bits
LEAF_NODE	8885:9	8885:9	7	mask_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8885:9	8885:9	6	mask_bits = 0
ASSIGN	8885:9	8885:21	7	mask_bits = 0
LVAL	8885:9	8885:9	8	mask_bits
NAME	8885:9	8885:9	9	mask_bits
LEAF_NODE	8885:9	8885:9	10	mask_bits
ASSIGN_OP	8885:19	8885:19	8	=
LEAF_NODE	8885:19	8885:19	9	=
RVAL	8885:21	8885:21	8	0
FIELD	8885:21	8885:21	9	0
LEAF_NODE	8885:21	8885:21	10	0
LEAF_NODE	8885:22	8885:22	5	,
VAR_DECL	8885:2	8885:24	5	uint64 match_bits ; match_bits = 0
TYPE	8885:2	8885:2	6	uint64
TYPE_NAME	8885:2	8885:2	7	uint64
LEAF_NODE	8885:2	8885:2	8	uint64
NAME	8885:24	8885:24	6	match_bits
LEAF_NODE	8885:24	8885:24	7	match_bits
LEAF_NODE	0:0	0:0	6	;
INIT	8885:24	8885:24	6	match_bits = 0
ASSIGN	8885:24	8885:37	7	match_bits = 0
LVAL	8885:24	8885:24	8	match_bits
NAME	8885:24	8885:24	9	match_bits
LEAF_NODE	8885:24	8885:24	10	match_bits
ASSIGN_OP	8885:35	8885:35	8	=
LEAF_NODE	8885:35	8885:35	9	=
RVAL	8885:37	8885:37	8	0
FIELD	8885:37	8885:37	9	0
LEAF_NODE	8885:37	8885:37	10	0
LEAF_NODE	8885:38	8885:38	4	;
SIMPLE_DECL	8886:2	8886:40	3	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0 ;
INIT_DECL_LIST	8886:2	8886:2	4	uint64 buff1 ; buff1 = 0 , uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	8886:2	8886:9	5	uint64 buff1 ; buff1 = 0
TYPE	8886:2	8886:2	6	uint64
TYPE_NAME	8886:2	8886:2	7	uint64
LEAF_NODE	8886:2	8886:2	8	uint64
NAME	8886:9	8886:9	6	buff1
LEAF_NODE	8886:9	8886:9	7	buff1
LEAF_NODE	0:0	0:0	6	;
INIT	8886:9	8886:9	6	buff1 = 0
ASSIGN	8886:9	8886:17	7	buff1 = 0
LVAL	8886:9	8886:9	8	buff1
NAME	8886:9	8886:9	9	buff1
LEAF_NODE	8886:9	8886:9	10	buff1
ASSIGN_OP	8886:15	8886:15	8	=
LEAF_NODE	8886:15	8886:15	9	=
RVAL	8886:17	8886:17	8	0
FIELD	8886:17	8886:17	9	0
LEAF_NODE	8886:17	8886:17	10	0
LEAF_NODE	8886:18	8886:18	5	,
INIT_DECL_LIST	8886:2	8886:2	5	uint64 buff2 ; buff2 = 0 , uint64 buff3 ; buff3 = 0
VAR_DECL	8886:2	8886:20	6	uint64 buff2 ; buff2 = 0
TYPE	8886:2	8886:2	7	uint64
TYPE_NAME	8886:2	8886:2	8	uint64
LEAF_NODE	8886:2	8886:2	9	uint64
NAME	8886:20	8886:20	7	buff2
LEAF_NODE	8886:20	8886:20	8	buff2
LEAF_NODE	0:0	0:0	7	;
INIT	8886:20	8886:20	7	buff2 = 0
ASSIGN	8886:20	8886:28	8	buff2 = 0
LVAL	8886:20	8886:20	9	buff2
NAME	8886:20	8886:20	10	buff2
LEAF_NODE	8886:20	8886:20	11	buff2
ASSIGN_OP	8886:26	8886:26	9	=
LEAF_NODE	8886:26	8886:26	10	=
RVAL	8886:28	8886:28	9	0
FIELD	8886:28	8886:28	10	0
LEAF_NODE	8886:28	8886:28	11	0
LEAF_NODE	8886:29	8886:29	6	,
VAR_DECL	8886:2	8886:31	6	uint64 buff3 ; buff3 = 0
TYPE	8886:2	8886:2	7	uint64
TYPE_NAME	8886:2	8886:2	8	uint64
LEAF_NODE	8886:2	8886:2	9	uint64
NAME	8886:31	8886:31	7	buff3
LEAF_NODE	8886:31	8886:31	8	buff3
LEAF_NODE	0:0	0:0	7	;
INIT	8886:31	8886:31	7	buff3 = 0
ASSIGN	8886:31	8886:39	8	buff3 = 0
LVAL	8886:31	8886:31	9	buff3
NAME	8886:31	8886:31	10	buff3
LEAF_NODE	8886:31	8886:31	11	buff3
ASSIGN_OP	8886:37	8886:37	9	=
LEAF_NODE	8886:37	8886:37	10	=
RVAL	8886:39	8886:39	9	0
FIELD	8886:39	8886:39	10	0
LEAF_NODE	8886:39	8886:39	11	0
LEAF_NODE	8886:40	8886:40	4	;
SIMPLE_DECL	8887:2	8887:67	3	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0 ;
INIT_DECL_LIST	8887:2	8887:2	4	uint8 bytebuff1 ; bytebuff1 = 0 , uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	8887:2	8887:9	5	uint8 bytebuff1 ; bytebuff1 = 0
TYPE	8887:2	8887:2	6	uint8
TYPE_NAME	8887:2	8887:2	7	uint8
LEAF_NODE	8887:2	8887:2	8	uint8
NAME	8887:9	8887:9	6	bytebuff1
LEAF_NODE	8887:9	8887:9	7	bytebuff1
LEAF_NODE	0:0	0:0	6	;
INIT	8887:9	8887:9	6	bytebuff1 = 0
ASSIGN	8887:9	8887:21	7	bytebuff1 = 0
LVAL	8887:9	8887:9	8	bytebuff1
NAME	8887:9	8887:9	9	bytebuff1
LEAF_NODE	8887:9	8887:9	10	bytebuff1
ASSIGN_OP	8887:19	8887:19	8	=
LEAF_NODE	8887:19	8887:19	9	=
RVAL	8887:21	8887:21	8	0
FIELD	8887:21	8887:21	9	0
LEAF_NODE	8887:21	8887:21	10	0
LEAF_NODE	8887:22	8887:22	5	,
INIT_DECL_LIST	8887:2	8887:2	5	uint8 bytebuff2 ; bytebuff2 = 0 , uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	8887:2	8887:24	6	uint8 bytebuff2 ; bytebuff2 = 0
TYPE	8887:2	8887:2	7	uint8
TYPE_NAME	8887:2	8887:2	8	uint8
LEAF_NODE	8887:2	8887:2	9	uint8
NAME	8887:24	8887:24	7	bytebuff2
LEAF_NODE	8887:24	8887:24	8	bytebuff2
LEAF_NODE	0:0	0:0	7	;
INIT	8887:24	8887:24	7	bytebuff2 = 0
ASSIGN	8887:24	8887:36	8	bytebuff2 = 0
LVAL	8887:24	8887:24	9	bytebuff2
NAME	8887:24	8887:24	10	bytebuff2
LEAF_NODE	8887:24	8887:24	11	bytebuff2
ASSIGN_OP	8887:34	8887:34	9	=
LEAF_NODE	8887:34	8887:34	10	=
RVAL	8887:36	8887:36	9	0
FIELD	8887:36	8887:36	10	0
LEAF_NODE	8887:36	8887:36	11	0
LEAF_NODE	8887:37	8887:37	6	,
INIT_DECL_LIST	8887:2	8887:2	6	uint8 bytebuff3 ; bytebuff3 = 0 , uint8 bytebuff4 ; bytebuff4 = 0
VAR_DECL	8887:2	8887:39	7	uint8 bytebuff3 ; bytebuff3 = 0
TYPE	8887:2	8887:2	8	uint8
TYPE_NAME	8887:2	8887:2	9	uint8
LEAF_NODE	8887:2	8887:2	10	uint8
NAME	8887:39	8887:39	8	bytebuff3
LEAF_NODE	8887:39	8887:39	9	bytebuff3
LEAF_NODE	0:0	0:0	8	;
INIT	8887:39	8887:39	8	bytebuff3 = 0
ASSIGN	8887:39	8887:51	9	bytebuff3 = 0
LVAL	8887:39	8887:39	10	bytebuff3
NAME	8887:39	8887:39	11	bytebuff3
LEAF_NODE	8887:39	8887:39	12	bytebuff3
ASSIGN_OP	8887:49	8887:49	10	=
LEAF_NODE	8887:49	8887:49	11	=
RVAL	8887:51	8887:51	10	0
FIELD	8887:51	8887:51	11	0
LEAF_NODE	8887:51	8887:51	12	0
LEAF_NODE	8887:52	8887:52	7	,
VAR_DECL	8887:2	8887:54	7	uint8 bytebuff4 ; bytebuff4 = 0
TYPE	8887:2	8887:2	8	uint8
TYPE_NAME	8887:2	8887:2	9	uint8
LEAF_NODE	8887:2	8887:2	10	uint8
NAME	8887:54	8887:54	8	bytebuff4
LEAF_NODE	8887:54	8887:54	9	bytebuff4
LEAF_NODE	0:0	0:0	8	;
INIT	8887:54	8887:54	8	bytebuff4 = 0
ASSIGN	8887:54	8887:66	9	bytebuff4 = 0
LVAL	8887:54	8887:54	10	bytebuff4
NAME	8887:54	8887:54	11	bytebuff4
LEAF_NODE	8887:54	8887:54	12	bytebuff4
ASSIGN_OP	8887:64	8887:64	10	=
LEAF_NODE	8887:64	8887:64	11	=
RVAL	8887:66	8887:66	10	0
FIELD	8887:66	8887:66	11	0
LEAF_NODE	8887:66	8887:66	12	0
LEAF_NODE	8887:67	8887:67	4	;
SIMPLE_DECL	8888:2	8888:20	3	unsigned char * src ;
VAR_DECL	8888:2	8888:17	4	unsigned char * src
TYPE	8888:2	8888:16	5	unsigned char *
TYPE_NAME	8888:2	8888:11	6	unsigned char
LEAF_NODE	8888:2	8888:2	7	unsigned
LEAF_NODE	8888:11	8888:11	7	char
POINTER	8888:16	8888:16	6	*
LEAF_NODE	8888:16	8888:16	7	*
NAME	8888:17	8888:17	5	src
LEAF_NODE	8888:17	8888:17	6	src
LEAF_NODE	8888:20	8888:20	4	;
SIMPLE_DECL	8889:2	8889:20	3	unsigned char * dst ;
VAR_DECL	8889:2	8889:17	4	unsigned char * dst
TYPE	8889:2	8889:16	5	unsigned char *
TYPE_NAME	8889:2	8889:11	6	unsigned char
LEAF_NODE	8889:2	8889:2	7	unsigned
LEAF_NODE	8889:11	8889:11	7	char
POINTER	8889:16	8889:16	6	*
LEAF_NODE	8889:16	8889:16	7	*
NAME	8889:17	8889:17	5	dst
LEAF_NODE	8889:17	8889:17	6	dst
LEAF_NODE	8889:20	8889:20	4	;
SIMPLE_DECL	8890:2	8890:18	3	tsample_t sample ;
VAR_DECL	8890:2	8890:12	4	tsample_t sample
TYPE	8890:2	8890:2	5	tsample_t
TYPE_NAME	8890:2	8890:2	6	tsample_t
LEAF_NODE	8890:2	8890:2	7	tsample_t
NAME	8890:12	8890:12	5	sample
LEAF_NODE	8890:12	8890:12	6	sample
LEAF_NODE	8890:18	8890:18	4	;
SELECTION	8892:2	8893:4	3	
KEYWORD	8892:2	8892:2	4	if
LEAF_NODE	8892:2	8892:2	5	if
LEAF_NODE	8892:5	8892:5	4	(
CONDITION	8892:6	8892:6	4	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8892:6	8892:6	5	( ibuff == NULL ) || ( obuff == NULL )
OR	8892:6	8892:25	6	( ibuff == NULL ) || ( obuff == NULL )
EXPR	8892:6	8892:20	7	( ibuff == NULL )
LEAF_NODE	8892:6	8892:6	8	(
FIELD	8892:7	8892:7	8	ibuff
LEAF_NODE	8892:7	8892:7	9	ibuff
EQ_OPERATOR	8892:13	8892:13	8	==
LEAF_NODE	8892:13	8892:13	9	==
FIELD	8892:16	8892:16	8	NULL
LEAF_NODE	8892:16	8892:16	9	NULL
LEAF_NODE	8892:20	8892:20	8	)
LEAF_NODE	8892:22	8892:22	7	||
EXPR	8892:25	8892:39	7	( obuff == NULL )
LEAF_NODE	8892:25	8892:25	8	(
FIELD	8892:26	8892:26	8	obuff
LEAF_NODE	8892:26	8892:26	9	obuff
EQ_OPERATOR	8892:32	8892:32	8	==
LEAF_NODE	8892:32	8892:32	9	==
FIELD	8892:35	8892:35	8	NULL
LEAF_NODE	8892:35	8892:35	9	NULL
LEAF_NODE	8892:39	8892:39	8	)
LEAF_NODE	8892:40	8892:40	4	)
STATEMENTS	8893:4	8896:4	4	
LEAF_NODE	8893:4	8893:4	5	{
STATEMENTS	8894:4	8895:4	5	
EXPR_STATEMENT	8894:4	8894:68	6	TIFFError ( "reverseSamples32bits" , "Invalid image or work buffer" ) ;
EXPR	8894:4	8894:4	7	TIFFError ( "reverseSamples32bits" , "Invalid image or work buffer" )
FUNCTION_CALL	8894:4	8894:67	8	TIFFError ( "reverseSamples32bits" , "Invalid image or work buffer" )
CALLEE	8894:4	8894:4	9	TIFFError
LEAF_NODE	8894:4	8894:4	10	TIFFError
LEAF_NODE	8894:13	8894:13	9	(
ARGUMENT	8894:14	8894:14	9	"reverseSamples32bits"
FIELD	8894:14	8894:14	10	"reverseSamples32bits"
LEAF_NODE	8894:14	8894:14	11	"reverseSamples32bits"
LEAF_NODE	8894:36	8894:36	9	,
ARGUMENT	8894:37	8894:37	9	"Invalid image or work buffer"
FIELD	8894:37	8894:37	10	"Invalid image or work buffer"
LEAF_NODE	8894:37	8894:37	11	"Invalid image or work buffer"
LEAF_NODE	8894:67	8894:67	9	)
LEAF_NODE	8894:68	8894:68	7	;
JUMP_STATEMENT	8895:4	8895:14	6	return ( 1 ) ;
KEYWORD	8895:4	8895:4	7	return
LEAF_NODE	8895:4	8895:4	8	return
DESTINATION	8895:11	8895:11	7	( 1 )
EXPR	8895:11	8895:13	8	( 1 )
LEAF_NODE	8895:11	8895:11	9	(
FIELD	8895:12	8895:12	9	1
LEAF_NODE	8895:12	8895:12	10	1
LEAF_NODE	8895:13	8895:13	9	)
LEAF_NODE	8895:14	8895:14	7	;
LEAF_NODE	8896:4	8896:4	5	}
EXPR_STATEMENT	8898:2	8898:16	3	ready_bits = 0 ;
EXPR	8898:2	8898:2	4	ready_bits = 0
ASSIGN	8898:2	8898:15	5	ready_bits = 0
LVAL	8898:2	8898:2	6	ready_bits
FIELD	8898:2	8898:2	7	ready_bits
LEAF_NODE	8898:2	8898:2	8	ready_bits
ASSIGN_OP	8898:13	8898:13	6	=
LEAF_NODE	8898:13	8898:13	7	=
RVAL	8898:15	8898:15	6	0
FIELD	8898:15	8898:15	7	0
LEAF_NODE	8898:15	8898:15	8	0
LEAF_NODE	8898:16	8898:16	4	;
EXPR_STATEMENT	8899:2	8899:39	3	mask_bits = ( uint64 ) - 1 >> ( 64 - bps ) ;
EXPR	8899:2	8899:2	4	mask_bits = ( uint64 ) - 1 >> ( 64 - bps )
ASSIGN	8899:2	8899:15	5	mask_bits = ( uint64 ) - 1 >> ( 64 - bps )
LVAL	8899:2	8899:2	6	mask_bits
FIELD	8899:2	8899:2	7	mask_bits
LEAF_NODE	8899:2	8899:2	8	mask_bits
ASSIGN_OP	8899:12	8899:12	6	=
LEAF_NODE	8899:12	8899:12	7	=
RVAL	8899:15	8899:38	6	( uint64 ) - 1 >> ( 64 - bps )
LEAF_NODE	8899:15	8899:15	7	(
TYPE_NAME	8899:16	8899:16	7	uint64
LEAF_NODE	8899:16	8899:16	8	uint64
LEAF_NODE	8899:22	8899:22	7	)
UNARY_EXPR	8899:23	8899:24	7	- 1
UNARY_OPERATOR	8899:23	8899:23	8	-
LEAF_NODE	8899:23	8899:23	9	-
FIELD	8899:24	8899:24	8	1
LEAF_NODE	8899:24	8899:24	9	1
LEAF_NODE	8899:26	8899:26	7	>>
LEAF_NODE	8899:29	8899:29	7	(
FIELD	8899:30	8899:30	7	64
LEAF_NODE	8899:30	8899:30	8	64
LEAF_NODE	8899:33	8899:33	7	-
FIELD	8899:35	8899:35	7	bps
LEAF_NODE	8899:35	8899:35	8	bps
LEAF_NODE	8899:38	8899:38	7	)
LEAF_NODE	8899:39	8899:39	4	;
EXPR_STATEMENT	8900:2	8900:13	3	dst = obuff ;
EXPR	8900:2	8900:2	4	dst = obuff
ASSIGN	8900:2	8900:8	5	dst = obuff
LVAL	8900:2	8900:2	6	dst
FIELD	8900:2	8900:2	7	dst
LEAF_NODE	8900:2	8900:2	8	dst
ASSIGN_OP	8900:6	8900:6	6	=
LEAF_NODE	8900:6	8900:6	7	=
RVAL	8900:8	8900:8	6	obuff
FIELD	8900:8	8900:8	7	obuff
LEAF_NODE	8900:8	8900:8	8	obuff
LEAF_NODE	8900:13	8900:13	4	;
ITERATION	8909:2	8910:4	3	
KEYWORD	8909:2	8909:2	4	for
LEAF_NODE	8909:2	8909:2	5	for
LEAF_NODE	8909:6	8909:6	4	(
FOR_INIT	8909:7	8909:18	4	col = width ;
EXPR	8909:7	8909:7	5	col = width
ASSIGN	8909:7	8909:13	6	col = width
LVAL	8909:7	8909:7	7	col
FIELD	8909:7	8909:7	8	col
LEAF_NODE	8909:7	8909:7	9	col
ASSIGN_OP	8909:11	8909:11	7	=
LEAF_NODE	8909:11	8909:11	8	=
RVAL	8909:13	8909:13	7	width
FIELD	8909:13	8909:13	8	width
LEAF_NODE	8909:13	8909:13	9	width
LEAF_NODE	8909:18	8909:18	5	;
CONDITION	8909:20	8909:20	4	col > 0
EXPR	8909:20	8909:26	5	col > 0
FIELD	8909:20	8909:20	6	col
LEAF_NODE	8909:20	8909:20	7	col
REL_OPERATOR	8909:24	8909:24	6	>
LEAF_NODE	8909:24	8909:24	7	>
FIELD	8909:26	8909:26	6	0
LEAF_NODE	8909:26	8909:26	7	0
LEAF_NODE	8909:27	8909:27	4	;
FOR_EXPR	8909:29	8909:29	4	col --
EXPR	8909:29	8909:29	5	col --
FIELD	8909:29	8909:32	6	col --
LEAF_NODE	8909:29	8909:29	7	col
LEAF_NODE	8909:32	8909:32	7	--
LEAF_NODE	8909:34	8909:34	4	)
STATEMENTS	8910:4	8963:4	4	
LEAF_NODE	8910:4	8910:4	5	{
STATEMENTS	8912:4	8913:4	5	
LEAF_NODE	8912:4	8912:4	6	bit_offset
LEAF_NODE	8912:15	8912:15	6	=
LEAF_NODE	8912:17	8912:17	6	(
LEAF_NODE	8912:18	8912:18	6	col
LEAF_NODE	8912:22	8912:22	6	-
LEAF_NODE	8912:24	8912:24	6	1
LEAF_NODE	8912:25	8912:25	6	)
EXPR_STATEMENT	8912:27	8912:38	6	* bps * spp ;
EXPR	8912:27	8912:35	7	* bps * spp
UNARY_EXPR	8912:27	8912:29	8	* bps
UNARY_OPERATOR	8912:27	8912:27	9	*
LEAF_NODE	8912:27	8912:27	10	*
FIELD	8912:29	8912:29	9	bps
LEAF_NODE	8912:29	8912:29	10	bps
LEAF_NODE	8912:33	8912:33	8	*
FIELD	8912:35	8912:35	8	spp
LEAF_NODE	8912:35	8912:35	9	spp
LEAF_NODE	8912:38	8912:38	7	;
ITERATION	8913:4	8914:6	6	
KEYWORD	8913:4	8913:4	7	for
LEAF_NODE	8913:4	8913:4	8	for
LEAF_NODE	8913:8	8913:8	7	(
FOR_INIT	8913:9	8913:19	7	sample = 0 ;
EXPR	8913:9	8913:9	8	sample = 0
ASSIGN	8913:9	8913:18	9	sample = 0
LVAL	8913:9	8913:9	10	sample
FIELD	8913:9	8913:9	11	sample
LEAF_NODE	8913:9	8913:9	12	sample
ASSIGN_OP	8913:16	8913:16	10	=
LEAF_NODE	8913:16	8913:16	11	=
RVAL	8913:18	8913:18	10	0
FIELD	8913:18	8913:18	11	0
LEAF_NODE	8913:18	8913:18	12	0
LEAF_NODE	8913:19	8913:19	8	;
CONDITION	8913:21	8913:21	7	sample < spp
EXPR	8913:21	8913:30	8	sample < spp
FIELD	8913:21	8913:21	9	sample
LEAF_NODE	8913:21	8913:21	10	sample
REL_OPERATOR	8913:28	8913:28	9	<
LEAF_NODE	8913:28	8913:28	10	<
FIELD	8913:30	8913:30	9	spp
LEAF_NODE	8913:30	8913:30	10	spp
LEAF_NODE	8913:33	8913:33	7	;
FOR_EXPR	8913:35	8913:35	7	sample ++
EXPR	8913:35	8913:35	8	sample ++
FIELD	8913:35	8913:41	9	sample ++
LEAF_NODE	8913:35	8913:35	10	sample
LEAF_NODE	8913:41	8913:41	10	++
LEAF_NODE	8913:43	8913:43	7	)
STATEMENTS	8914:6	8962:6	7	
LEAF_NODE	8914:6	8914:6	8	{
STATEMENTS	8915:6	8961:6	8	
SELECTION	8915:6	8916:8	9	
KEYWORD	8915:6	8915:6	10	if
LEAF_NODE	8915:6	8915:6	11	if
LEAF_NODE	8915:9	8915:9	10	(
CONDITION	8915:10	8915:10	10	sample == 0
EXPR	8915:10	8915:20	11	sample == 0
FIELD	8915:10	8915:10	12	sample
LEAF_NODE	8915:10	8915:10	13	sample
EQ_OPERATOR	8915:17	8915:17	12	==
LEAF_NODE	8915:17	8915:17	13	==
FIELD	8915:20	8915:20	12	0
LEAF_NODE	8915:20	8915:20	13	0
LEAF_NODE	8915:21	8915:21	10	)
STATEMENTS	8916:8	8919:8	10	
LEAF_NODE	8916:8	8916:8	11	{
STATEMENTS	8917:8	8918:8	11	
EXPR_STATEMENT	8917:8	8917:33	12	src_byte = bit_offset / 8 ;
EXPR	8917:8	8917:8	13	src_byte = bit_offset / 8
ASSIGN	8917:8	8917:19	14	src_byte = bit_offset / 8
LVAL	8917:8	8917:8	15	src_byte
FIELD	8917:8	8917:8	16	src_byte
LEAF_NODE	8917:8	8917:8	17	src_byte
ASSIGN_OP	8917:17	8917:17	15	=
LEAF_NODE	8917:17	8917:17	16	=
RVAL	8917:19	8917:32	15	bit_offset / 8
FIELD	8917:19	8917:19	16	bit_offset
LEAF_NODE	8917:19	8917:19	17	bit_offset
LEAF_NODE	8917:30	8917:30	16	/
FIELD	8917:32	8917:32	16	8
LEAF_NODE	8917:32	8917:32	17	8
LEAF_NODE	8917:33	8917:33	13	;
EXPR_STATEMENT	8918:8	8918:34	12	high_bit = bit_offset % 8 ;
EXPR	8918:8	8918:8	13	high_bit = bit_offset % 8
ASSIGN	8918:8	8918:20	14	high_bit = bit_offset % 8
LVAL	8918:8	8918:8	15	high_bit
FIELD	8918:8	8918:8	16	high_bit
LEAF_NODE	8918:8	8918:8	17	high_bit
ASSIGN_OP	8918:18	8918:18	15	=
LEAF_NODE	8918:18	8918:18	16	=
RVAL	8918:20	8918:33	15	bit_offset % 8
FIELD	8918:20	8918:20	16	bit_offset
LEAF_NODE	8918:20	8918:20	17	bit_offset
LEAF_NODE	8918:31	8918:31	16	%
FIELD	8918:33	8918:33	16	8
LEAF_NODE	8918:33	8918:33	17	8
LEAF_NODE	8918:34	8918:34	13	;
LEAF_NODE	8919:8	8919:8	11	}
SELECTION	8920:6	8921:8	9	
KEYWORD	8920:6	8920:6	10	else
LEAF_NODE	8920:6	8920:6	11	else
STATEMENTS	8921:8	8924:8	10	
LEAF_NODE	8921:8	8921:8	11	{
STATEMENTS	8922:8	8923:8	11	
EXPR_STATEMENT	8922:8	8922:52	12	src_byte = ( bit_offset + ( sample * bps ) ) / 8 ;
EXPR	8922:8	8922:8	13	src_byte = ( bit_offset + ( sample * bps ) ) / 8
ASSIGN	8922:8	8922:19	14	src_byte = ( bit_offset + ( sample * bps ) ) / 8
LVAL	8922:8	8922:8	15	src_byte
FIELD	8922:8	8922:8	16	src_byte
LEAF_NODE	8922:8	8922:8	17	src_byte
ASSIGN_OP	8922:17	8922:17	15	=
LEAF_NODE	8922:17	8922:17	16	=
RVAL	8922:19	8922:51	15	( bit_offset + ( sample * bps ) ) / 8
LEAF_NODE	8922:19	8922:19	16	(
FIELD	8922:20	8922:20	16	bit_offset
LEAF_NODE	8922:20	8922:20	17	bit_offset
LEAF_NODE	8922:31	8922:31	16	+
LEAF_NODE	8922:33	8922:33	16	(
FIELD	8922:34	8922:34	16	sample
LEAF_NODE	8922:34	8922:34	17	sample
LEAF_NODE	8922:41	8922:41	16	*
FIELD	8922:43	8922:43	16	bps
LEAF_NODE	8922:43	8922:43	17	bps
LEAF_NODE	8922:46	8922:46	16	)
LEAF_NODE	8922:47	8922:47	16	)
LEAF_NODE	8922:49	8922:49	16	/
FIELD	8922:51	8922:51	16	8
LEAF_NODE	8922:51	8922:51	17	8
LEAF_NODE	8922:52	8922:52	13	;
EXPR_STATEMENT	8923:8	8923:53	12	high_bit = ( bit_offset + ( sample * bps ) ) % 8 ;
EXPR	8923:8	8923:8	13	high_bit = ( bit_offset + ( sample * bps ) ) % 8
ASSIGN	8923:8	8923:20	14	high_bit = ( bit_offset + ( sample * bps ) ) % 8
LVAL	8923:8	8923:8	15	high_bit
FIELD	8923:8	8923:8	16	high_bit
LEAF_NODE	8923:8	8923:8	17	high_bit
ASSIGN_OP	8923:18	8923:18	15	=
LEAF_NODE	8923:18	8923:18	16	=
RVAL	8923:20	8923:52	15	( bit_offset + ( sample * bps ) ) % 8
LEAF_NODE	8923:20	8923:20	16	(
FIELD	8923:21	8923:21	16	bit_offset
LEAF_NODE	8923:21	8923:21	17	bit_offset
LEAF_NODE	8923:32	8923:32	16	+
LEAF_NODE	8923:34	8923:34	16	(
FIELD	8923:35	8923:35	16	sample
LEAF_NODE	8923:35	8923:35	17	sample
LEAF_NODE	8923:42	8923:42	16	*
FIELD	8923:44	8923:44	16	bps
LEAF_NODE	8923:44	8923:44	17	bps
LEAF_NODE	8923:47	8923:47	16	)
LEAF_NODE	8923:48	8923:48	16	)
LEAF_NODE	8923:50	8923:50	16	%
FIELD	8923:52	8923:52	16	8
LEAF_NODE	8923:52	8923:52	17	8
LEAF_NODE	8923:53	8923:53	13	;
LEAF_NODE	8924:8	8924:8	11	}
EXPR_STATEMENT	8926:6	8926:28	9	src = ibuff + src_byte ;
EXPR	8926:6	8926:6	10	src = ibuff + src_byte
ASSIGN	8926:6	8926:12	11	src = ibuff + src_byte
LVAL	8926:6	8926:6	12	src
FIELD	8926:6	8926:6	13	src
LEAF_NODE	8926:6	8926:6	14	src
ASSIGN_OP	8926:10	8926:10	12	=
LEAF_NODE	8926:10	8926:10	13	=
RVAL	8926:12	8926:20	12	ibuff + src_byte
FIELD	8926:12	8926:12	13	ibuff
LEAF_NODE	8926:12	8926:12	14	ibuff
LEAF_NODE	8926:18	8926:18	13	+
FIELD	8926:20	8926:20	13	src_byte
LEAF_NODE	8926:20	8926:20	14	src_byte
LEAF_NODE	8926:28	8926:28	10	;
EXPR_STATEMENT	8927:6	8927:53	9	match_bits = mask_bits << ( 64 - high_bit - bps ) ;
EXPR	8927:6	8927:6	10	match_bits = mask_bits << ( 64 - high_bit - bps )
ASSIGN	8927:6	8927:19	11	match_bits = mask_bits << ( 64 - high_bit - bps )
LVAL	8927:6	8927:6	12	match_bits
FIELD	8927:6	8927:6	13	match_bits
LEAF_NODE	8927:6	8927:6	14	match_bits
ASSIGN_OP	8927:17	8927:17	12	=
LEAF_NODE	8927:17	8927:17	13	=
RVAL	8927:19	8927:52	12	mask_bits << ( 64 - high_bit - bps )
FIELD	8927:19	8927:19	13	mask_bits
LEAF_NODE	8927:19	8927:19	14	mask_bits
LEAF_NODE	8927:29	8927:29	13	<<
LEAF_NODE	8927:32	8927:32	13	(
FIELD	8927:33	8927:33	13	64
LEAF_NODE	8927:33	8927:33	14	64
LEAF_NODE	8927:36	8927:36	13	-
FIELD	8927:38	8927:38	13	high_bit
LEAF_NODE	8927:38	8927:38	14	high_bit
LEAF_NODE	8927:47	8927:47	13	-
FIELD	8927:49	8927:49	13	bps
LEAF_NODE	8927:49	8927:49	14	bps
LEAF_NODE	8927:52	8927:52	13	)
LEAF_NODE	8927:53	8927:53	10	;
SELECTION	8928:6	8929:8	9	
KEYWORD	8928:6	8928:6	10	if
LEAF_NODE	8928:6	8928:6	11	if
LEAF_NODE	8928:9	8928:9	10	(
CONDITION	8928:10	8928:10	10	little_endian
EXPR	8928:10	8928:10	11	little_endian
FIELD	8928:10	8928:10	12	little_endian
LEAF_NODE	8928:10	8928:10	13	little_endian
LEAF_NODE	8928:23	8928:23	10	)
STATEMENTS	8929:8	8932:8	10	
LEAF_NODE	8929:8	8929:8	11	{
STATEMENTS	8930:1	8931:8	11	
EXPR_STATEMENT	8930:1	8930:69	12	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ] ;
EXPR	8930:1	8930:1	13	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
ASSIGN	8930:1	8930:13	14	longbuff1 = ( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
LVAL	8930:1	8930:1	15	longbuff1
FIELD	8930:1	8930:1	16	longbuff1
LEAF_NODE	8930:1	8930:1	17	longbuff1
ASSIGN_OP	8930:11	8930:11	15	=
LEAF_NODE	8930:11	8930:11	16	=
RVAL	8930:13	8930:13	15	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	8930:13	8930:30	16	( src [ 0 ] << 24 ) | ( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	8930:13	8930:26	17	( src [ 0 ] << 24 )
LEAF_NODE	8930:13	8930:13	18	(
FIELD	8930:14	8930:19	18	src [ 0 ]
LEAF_NODE	8930:14	8930:14	19	src
LEAF_NODE	8930:17	8930:17	19	[
EXPR	8930:18	8930:18	19	0
FIELD	8930:18	8930:18	20	0
LEAF_NODE	8930:18	8930:18	21	0
LEAF_NODE	8930:19	8930:19	19	]
LEAF_NODE	8930:21	8930:21	18	<<
FIELD	8930:24	8930:24	18	24
LEAF_NODE	8930:24	8930:24	19	24
LEAF_NODE	8930:26	8930:26	18	)
LEAF_NODE	8930:28	8930:28	17	|
BIT_OR_ELEM	8930:30	8930:30	17	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	8930:30	8930:47	18	( src [ 1 ] << 16 ) | ( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	8930:30	8930:43	19	( src [ 1 ] << 16 )
LEAF_NODE	8930:30	8930:30	20	(
FIELD	8930:31	8930:36	20	src [ 1 ]
LEAF_NODE	8930:31	8930:31	21	src
LEAF_NODE	8930:34	8930:34	21	[
EXPR	8930:35	8930:35	21	1
FIELD	8930:35	8930:35	22	1
LEAF_NODE	8930:35	8930:35	23	1
LEAF_NODE	8930:36	8930:36	21	]
LEAF_NODE	8930:38	8930:38	20	<<
FIELD	8930:41	8930:41	20	16
LEAF_NODE	8930:41	8930:41	21	16
LEAF_NODE	8930:43	8930:43	20	)
LEAF_NODE	8930:45	8930:45	19	|
BIT_OR_ELEM	8930:47	8930:47	19	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR	8930:47	8930:63	20	( src [ 2 ] << 8 ) | src [ 3 ]
BIT_OR_ELEM	8930:47	8930:59	21	( src [ 2 ] << 8 )
LEAF_NODE	8930:47	8930:47	22	(
FIELD	8930:48	8930:53	22	src [ 2 ]
LEAF_NODE	8930:48	8930:48	23	src
LEAF_NODE	8930:51	8930:51	23	[
EXPR	8930:52	8930:52	23	2
FIELD	8930:52	8930:52	24	2
LEAF_NODE	8930:52	8930:52	25	2
LEAF_NODE	8930:53	8930:53	23	]
LEAF_NODE	8930:55	8930:55	22	<<
FIELD	8930:58	8930:58	22	8
LEAF_NODE	8930:58	8930:58	23	8
LEAF_NODE	8930:59	8930:59	22	)
LEAF_NODE	8930:61	8930:61	21	|
BIT_OR_ELEM	8930:63	8930:63	21	src [ 3 ]
FIELD	8930:63	8930:68	22	src [ 3 ]
LEAF_NODE	8930:63	8930:63	23	src
LEAF_NODE	8930:66	8930:66	23	[
EXPR	8930:67	8930:67	23	3
FIELD	8930:67	8930:67	24	3
LEAF_NODE	8930:67	8930:67	25	3
LEAF_NODE	8930:68	8930:68	23	]
LEAF_NODE	8930:69	8930:69	13	;
EXPR_STATEMENT	8931:8	8931:29	12	longbuff2 = longbuff1 ;
EXPR	8931:8	8931:8	13	longbuff2 = longbuff1
ASSIGN	8931:8	8931:20	14	longbuff2 = longbuff1
LVAL	8931:8	8931:8	15	longbuff2
FIELD	8931:8	8931:8	16	longbuff2
LEAF_NODE	8931:8	8931:8	17	longbuff2
ASSIGN_OP	8931:18	8931:18	15	=
LEAF_NODE	8931:18	8931:18	16	=
RVAL	8931:20	8931:20	15	longbuff1
FIELD	8931:20	8931:20	16	longbuff1
LEAF_NODE	8931:20	8931:20	17	longbuff1
LEAF_NODE	8931:29	8931:29	13	;
LEAF_NODE	8932:8	8932:8	11	}
SELECTION	8933:6	8934:8	9	
KEYWORD	8933:6	8933:6	10	else
LEAF_NODE	8933:6	8933:6	11	else
STATEMENTS	8934:8	8937:1	10	
LEAF_NODE	8934:8	8934:8	11	{
STATEMENTS	8935:1	8936:8	11	
EXPR_STATEMENT	8935:1	8935:69	12	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ] ;
EXPR	8935:1	8935:1	13	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
ASSIGN	8935:1	8935:13	14	longbuff1 = ( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
LVAL	8935:1	8935:1	15	longbuff1
FIELD	8935:1	8935:1	16	longbuff1
LEAF_NODE	8935:1	8935:1	17	longbuff1
ASSIGN_OP	8935:11	8935:11	15	=
LEAF_NODE	8935:11	8935:11	16	=
RVAL	8935:13	8935:13	15	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	8935:13	8935:30	16	( src [ 3 ] << 24 ) | ( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	8935:13	8935:26	17	( src [ 3 ] << 24 )
LEAF_NODE	8935:13	8935:13	18	(
FIELD	8935:14	8935:19	18	src [ 3 ]
LEAF_NODE	8935:14	8935:14	19	src
LEAF_NODE	8935:17	8935:17	19	[
EXPR	8935:18	8935:18	19	3
FIELD	8935:18	8935:18	20	3
LEAF_NODE	8935:18	8935:18	21	3
LEAF_NODE	8935:19	8935:19	19	]
LEAF_NODE	8935:21	8935:21	18	<<
FIELD	8935:24	8935:24	18	24
LEAF_NODE	8935:24	8935:24	19	24
LEAF_NODE	8935:26	8935:26	18	)
LEAF_NODE	8935:28	8935:28	17	|
BIT_OR_ELEM	8935:30	8935:30	17	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	8935:30	8935:47	18	( src [ 2 ] << 16 ) | ( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	8935:30	8935:43	19	( src [ 2 ] << 16 )
LEAF_NODE	8935:30	8935:30	20	(
FIELD	8935:31	8935:36	20	src [ 2 ]
LEAF_NODE	8935:31	8935:31	21	src
LEAF_NODE	8935:34	8935:34	21	[
EXPR	8935:35	8935:35	21	2
FIELD	8935:35	8935:35	22	2
LEAF_NODE	8935:35	8935:35	23	2
LEAF_NODE	8935:36	8935:36	21	]
LEAF_NODE	8935:38	8935:38	20	<<
FIELD	8935:41	8935:41	20	16
LEAF_NODE	8935:41	8935:41	21	16
LEAF_NODE	8935:43	8935:43	20	)
LEAF_NODE	8935:45	8935:45	19	|
BIT_OR_ELEM	8935:47	8935:47	19	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR	8935:47	8935:63	20	( src [ 1 ] << 8 ) | src [ 0 ]
BIT_OR_ELEM	8935:47	8935:59	21	( src [ 1 ] << 8 )
LEAF_NODE	8935:47	8935:47	22	(
FIELD	8935:48	8935:53	22	src [ 1 ]
LEAF_NODE	8935:48	8935:48	23	src
LEAF_NODE	8935:51	8935:51	23	[
EXPR	8935:52	8935:52	23	1
FIELD	8935:52	8935:52	24	1
LEAF_NODE	8935:52	8935:52	25	1
LEAF_NODE	8935:53	8935:53	23	]
LEAF_NODE	8935:55	8935:55	22	<<
FIELD	8935:58	8935:58	22	8
LEAF_NODE	8935:58	8935:58	23	8
LEAF_NODE	8935:59	8935:59	22	)
LEAF_NODE	8935:61	8935:61	21	|
BIT_OR_ELEM	8935:63	8935:63	21	src [ 0 ]
FIELD	8935:63	8935:68	22	src [ 0 ]
LEAF_NODE	8935:63	8935:63	23	src
LEAF_NODE	8935:66	8935:66	23	[
EXPR	8935:67	8935:67	23	0
FIELD	8935:67	8935:67	24	0
LEAF_NODE	8935:67	8935:67	25	0
LEAF_NODE	8935:68	8935:68	23	]
LEAF_NODE	8935:69	8935:69	13	;
EXPR_STATEMENT	8936:8	8936:29	12	longbuff2 = longbuff1 ;
EXPR	8936:8	8936:8	13	longbuff2 = longbuff1
ASSIGN	8936:8	8936:20	14	longbuff2 = longbuff1
LVAL	8936:8	8936:8	15	longbuff2
FIELD	8936:8	8936:8	16	longbuff2
LEAF_NODE	8936:8	8936:8	17	longbuff2
ASSIGN_OP	8936:18	8936:18	15	=
LEAF_NODE	8936:18	8936:18	16	=
RVAL	8936:20	8936:20	15	longbuff1
FIELD	8936:20	8936:20	16	longbuff1
LEAF_NODE	8936:20	8936:20	17	longbuff1
LEAF_NODE	8936:29	8936:29	13	;
LEAF_NODE	8937:1	8937:1	11	}
EXPR_STATEMENT	8938:6	8938:51	9	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2 ;
EXPR	8938:6	8938:6	10	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
ASSIGN	8938:6	8938:14	11	buff3 = ( ( uint64 ) longbuff1 << 32 ) | longbuff2
LVAL	8938:6	8938:6	12	buff3
FIELD	8938:6	8938:6	13	buff3
LEAF_NODE	8938:6	8938:6	14	buff3
ASSIGN_OP	8938:12	8938:12	12	=
LEAF_NODE	8938:12	8938:12	13	=
RVAL	8938:14	8938:14	12	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR	8938:14	8938:42	13	( ( uint64 ) longbuff1 << 32 ) | longbuff2
BIT_OR_ELEM	8938:14	8938:38	14	( ( uint64 ) longbuff1 << 32 )
LEAF_NODE	8938:14	8938:14	15	(
LEAF_NODE	8938:15	8938:15	15	(
TYPE_NAME	8938:16	8938:16	15	uint64
LEAF_NODE	8938:16	8938:16	16	uint64
LEAF_NODE	8938:22	8938:22	15	)
FIELD	8938:23	8938:23	15	longbuff1
LEAF_NODE	8938:23	8938:23	16	longbuff1
LEAF_NODE	8938:33	8938:33	15	<<
FIELD	8938:36	8938:36	15	32
LEAF_NODE	8938:36	8938:36	16	32
LEAF_NODE	8938:38	8938:38	15	)
LEAF_NODE	8938:40	8938:40	14	|
BIT_OR_ELEM	8938:42	8938:42	14	longbuff2
FIELD	8938:42	8938:42	15	longbuff2
LEAF_NODE	8938:42	8938:42	16	longbuff2
LEAF_NODE	8938:51	8938:51	10	;
LEAF_NODE	8939:6	8939:6	9	buff1
LEAF_NODE	8939:12	8939:12	9	=
LEAF_NODE	8939:14	8939:14	9	(
LEAF_NODE	8939:15	8939:15	9	buff3
LEAF_NODE	8939:21	8939:21	9	&
LEAF_NODE	8939:23	8939:23	9	match_bits
LEAF_NODE	8939:33	8939:33	9	)
LEAF_NODE	8939:35	8939:35	9	<<
LEAF_NODE	8939:38	8939:38	9	(
LEAF_NODE	8939:39	8939:39	9	high_bit
LEAF_NODE	8939:47	8939:47	9	)
LEAF_NODE	8939:48	8939:48	9	;
SELECTION	8941:6	8942:8	9	
KEYWORD	8941:6	8941:6	10	if
LEAF_NODE	8941:6	8941:6	11	if
LEAF_NODE	8941:9	8941:9	10	(
CONDITION	8941:10	8941:10	10	ready_bits < 32
EXPR	8941:10	8941:23	11	ready_bits < 32
FIELD	8941:10	8941:10	12	ready_bits
LEAF_NODE	8941:10	8941:10	13	ready_bits
REL_OPERATOR	8941:21	8941:21	12	<
LEAF_NODE	8941:21	8941:21	13	<
FIELD	8941:23	8941:23	12	32
LEAF_NODE	8941:23	8941:23	13	32
LEAF_NODE	8941:25	8941:25	10	)
STATEMENTS	8942:8	8945:8	10	
LEAF_NODE	8942:8	8942:8	11	{
STATEMENTS	8943:8	8944:8	11	
EXPR_STATEMENT	8943:8	8943:57	12	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0 ;
EXPR	8943:8	8943:8	13	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	8943:8	8943:20	14	bytebuff1 = bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	8943:8	8943:8	15	bytebuff1
FIELD	8943:8	8943:8	16	bytebuff1
LEAF_NODE	8943:8	8943:8	17	bytebuff1
ASSIGN_OP	8943:18	8943:18	15	=
LEAF_NODE	8943:18	8943:18	16	=
RVAL	8943:20	8943:20	15	bytebuff2 = bytebuff3 = bytebuff4 = 0
ASSIGN	8943:20	8943:32	16	bytebuff2 = bytebuff3 = bytebuff4 = 0
LVAL	8943:20	8943:20	17	bytebuff2
FIELD	8943:20	8943:20	18	bytebuff2
LEAF_NODE	8943:20	8943:20	19	bytebuff2
ASSIGN_OP	8943:30	8943:30	17	=
LEAF_NODE	8943:30	8943:30	18	=
RVAL	8943:32	8943:32	17	bytebuff3 = bytebuff4 = 0
ASSIGN	8943:32	8943:44	18	bytebuff3 = bytebuff4 = 0
LVAL	8943:32	8943:32	19	bytebuff3
FIELD	8943:32	8943:32	20	bytebuff3
LEAF_NODE	8943:32	8943:32	21	bytebuff3
ASSIGN_OP	8943:42	8943:42	19	=
LEAF_NODE	8943:42	8943:42	20	=
RVAL	8943:44	8943:44	19	bytebuff4 = 0
ASSIGN	8943:44	8943:56	20	bytebuff4 = 0
LVAL	8943:44	8943:44	21	bytebuff4
FIELD	8943:44	8943:44	22	bytebuff4
LEAF_NODE	8943:44	8943:44	23	bytebuff4
ASSIGN_OP	8943:54	8943:54	21	=
LEAF_NODE	8943:54	8943:54	22	=
RVAL	8943:56	8943:56	21	0
FIELD	8943:56	8943:56	22	0
LEAF_NODE	8943:56	8943:56	23	0
LEAF_NODE	8943:57	8943:57	13	;
EXPR_STATEMENT	8944:8	8944:47	12	buff2 = ( buff2 | ( buff1 >> ready_bits ) ) ;
EXPR	8944:8	8944:8	13	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
ASSIGN	8944:8	8944:16	14	buff2 = ( buff2 | ( buff1 >> ready_bits ) )
LVAL	8944:8	8944:8	15	buff2
FIELD	8944:8	8944:8	16	buff2
LEAF_NODE	8944:8	8944:8	17	buff2
ASSIGN_OP	8944:14	8944:14	15	=
LEAF_NODE	8944:14	8944:14	16	=
RVAL	8944:16	8944:46	15	( buff2 | ( buff1 >> ready_bits ) )
LEAF_NODE	8944:16	8944:16	16	(
BIT_OR	8944:17	8944:25	16	buff2 | ( buff1 >> ready_bits )
BIT_OR_ELEM	8944:17	8944:17	17	buff2
FIELD	8944:17	8944:17	18	buff2
LEAF_NODE	8944:17	8944:17	19	buff2
LEAF_NODE	8944:23	8944:23	17	|
BIT_OR_ELEM	8944:25	8944:45	17	( buff1 >> ready_bits )
LEAF_NODE	8944:25	8944:25	18	(
FIELD	8944:26	8944:26	18	buff1
LEAF_NODE	8944:26	8944:26	19	buff1
LEAF_NODE	8944:32	8944:32	18	>>
FIELD	8944:35	8944:35	18	ready_bits
LEAF_NODE	8944:35	8944:35	19	ready_bits
LEAF_NODE	8944:45	8944:45	18	)
LEAF_NODE	8944:46	8944:46	16	)
LEAF_NODE	8944:47	8944:47	13	;
LEAF_NODE	8945:8	8945:8	11	}
SELECTION	8946:6	8947:8	9	
KEYWORD	8946:6	8946:6	10	else
LEAF_NODE	8946:6	8946:6	11	else
STATEMENTS	8947:8	8960:8	10	
LEAF_NODE	8947:8	8947:8	11	{
STATEMENTS	8948:8	8959:8	11	
EXPR_STATEMENT	8948:8	8948:33	12	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	8948:8	8948:8	13	bytebuff1 = ( buff2 >> 56 )
ASSIGN	8948:8	8948:20	14	bytebuff1 = ( buff2 >> 56 )
LVAL	8948:8	8948:8	15	bytebuff1
FIELD	8948:8	8948:8	16	bytebuff1
LEAF_NODE	8948:8	8948:8	17	bytebuff1
ASSIGN_OP	8948:18	8948:18	15	=
LEAF_NODE	8948:18	8948:18	16	=
RVAL	8948:20	8948:32	15	( buff2 >> 56 )
LEAF_NODE	8948:20	8948:20	16	(
FIELD	8948:21	8948:21	16	buff2
LEAF_NODE	8948:21	8948:21	17	buff2
LEAF_NODE	8948:27	8948:27	16	>>
FIELD	8948:30	8948:30	16	56
LEAF_NODE	8948:30	8948:30	17	56
LEAF_NODE	8948:32	8948:32	16	)
LEAF_NODE	8948:33	8948:33	13	;
EXPR_STATEMENT	8949:8	8949:26	12	* dst ++ = bytebuff1 ;
EXPR	8949:8	8949:8	13	* dst ++ = bytebuff1
ASSIGN	8949:8	8949:17	14	* dst ++ = bytebuff1
LVAL	8949:8	8949:8	15	* dst ++
UNARY_EXPR	8949:8	8949:9	16	* dst ++
UNARY_OPERATOR	8949:8	8949:8	17	*
LEAF_NODE	8949:8	8949:8	18	*
FIELD	8949:9	8949:12	17	dst ++
LEAF_NODE	8949:9	8949:9	18	dst
LEAF_NODE	8949:12	8949:12	18	++
ASSIGN_OP	8949:15	8949:15	15	=
LEAF_NODE	8949:15	8949:15	16	=
RVAL	8949:17	8949:17	15	bytebuff1
FIELD	8949:17	8949:17	16	bytebuff1
LEAF_NODE	8949:17	8949:17	17	bytebuff1
LEAF_NODE	8949:26	8949:26	13	;
EXPR_STATEMENT	8950:8	8950:33	12	bytebuff2 = ( buff2 >> 48 ) ;
EXPR	8950:8	8950:8	13	bytebuff2 = ( buff2 >> 48 )
ASSIGN	8950:8	8950:20	14	bytebuff2 = ( buff2 >> 48 )
LVAL	8950:8	8950:8	15	bytebuff2
FIELD	8950:8	8950:8	16	bytebuff2
LEAF_NODE	8950:8	8950:8	17	bytebuff2
ASSIGN_OP	8950:18	8950:18	15	=
LEAF_NODE	8950:18	8950:18	16	=
RVAL	8950:20	8950:32	15	( buff2 >> 48 )
LEAF_NODE	8950:20	8950:20	16	(
FIELD	8950:21	8950:21	16	buff2
LEAF_NODE	8950:21	8950:21	17	buff2
LEAF_NODE	8950:27	8950:27	16	>>
FIELD	8950:30	8950:30	16	48
LEAF_NODE	8950:30	8950:30	17	48
LEAF_NODE	8950:32	8950:32	16	)
LEAF_NODE	8950:33	8950:33	13	;
EXPR_STATEMENT	8951:8	8951:26	12	* dst ++ = bytebuff2 ;
EXPR	8951:8	8951:8	13	* dst ++ = bytebuff2
ASSIGN	8951:8	8951:17	14	* dst ++ = bytebuff2
LVAL	8951:8	8951:8	15	* dst ++
UNARY_EXPR	8951:8	8951:9	16	* dst ++
UNARY_OPERATOR	8951:8	8951:8	17	*
LEAF_NODE	8951:8	8951:8	18	*
FIELD	8951:9	8951:12	17	dst ++
LEAF_NODE	8951:9	8951:9	18	dst
LEAF_NODE	8951:12	8951:12	18	++
ASSIGN_OP	8951:15	8951:15	15	=
LEAF_NODE	8951:15	8951:15	16	=
RVAL	8951:17	8951:17	15	bytebuff2
FIELD	8951:17	8951:17	16	bytebuff2
LEAF_NODE	8951:17	8951:17	17	bytebuff2
LEAF_NODE	8951:26	8951:26	13	;
EXPR_STATEMENT	8952:8	8952:33	12	bytebuff3 = ( buff2 >> 40 ) ;
EXPR	8952:8	8952:8	13	bytebuff3 = ( buff2 >> 40 )
ASSIGN	8952:8	8952:20	14	bytebuff3 = ( buff2 >> 40 )
LVAL	8952:8	8952:8	15	bytebuff3
FIELD	8952:8	8952:8	16	bytebuff3
LEAF_NODE	8952:8	8952:8	17	bytebuff3
ASSIGN_OP	8952:18	8952:18	15	=
LEAF_NODE	8952:18	8952:18	16	=
RVAL	8952:20	8952:32	15	( buff2 >> 40 )
LEAF_NODE	8952:20	8952:20	16	(
FIELD	8952:21	8952:21	16	buff2
LEAF_NODE	8952:21	8952:21	17	buff2
LEAF_NODE	8952:27	8952:27	16	>>
FIELD	8952:30	8952:30	16	40
LEAF_NODE	8952:30	8952:30	17	40
LEAF_NODE	8952:32	8952:32	16	)
LEAF_NODE	8952:33	8952:33	13	;
EXPR_STATEMENT	8953:8	8953:26	12	* dst ++ = bytebuff3 ;
EXPR	8953:8	8953:8	13	* dst ++ = bytebuff3
ASSIGN	8953:8	8953:17	14	* dst ++ = bytebuff3
LVAL	8953:8	8953:8	15	* dst ++
UNARY_EXPR	8953:8	8953:9	16	* dst ++
UNARY_OPERATOR	8953:8	8953:8	17	*
LEAF_NODE	8953:8	8953:8	18	*
FIELD	8953:9	8953:12	17	dst ++
LEAF_NODE	8953:9	8953:9	18	dst
LEAF_NODE	8953:12	8953:12	18	++
ASSIGN_OP	8953:15	8953:15	15	=
LEAF_NODE	8953:15	8953:15	16	=
RVAL	8953:17	8953:17	15	bytebuff3
FIELD	8953:17	8953:17	16	bytebuff3
LEAF_NODE	8953:17	8953:17	17	bytebuff3
LEAF_NODE	8953:26	8953:26	13	;
EXPR_STATEMENT	8954:8	8954:33	12	bytebuff4 = ( buff2 >> 32 ) ;
EXPR	8954:8	8954:8	13	bytebuff4 = ( buff2 >> 32 )
ASSIGN	8954:8	8954:20	14	bytebuff4 = ( buff2 >> 32 )
LVAL	8954:8	8954:8	15	bytebuff4
FIELD	8954:8	8954:8	16	bytebuff4
LEAF_NODE	8954:8	8954:8	17	bytebuff4
ASSIGN_OP	8954:18	8954:18	15	=
LEAF_NODE	8954:18	8954:18	16	=
RVAL	8954:20	8954:32	15	( buff2 >> 32 )
LEAF_NODE	8954:20	8954:20	16	(
FIELD	8954:21	8954:21	16	buff2
LEAF_NODE	8954:21	8954:21	17	buff2
LEAF_NODE	8954:27	8954:27	16	>>
FIELD	8954:30	8954:30	16	32
LEAF_NODE	8954:30	8954:30	17	32
LEAF_NODE	8954:32	8954:32	16	)
LEAF_NODE	8954:33	8954:33	13	;
EXPR_STATEMENT	8955:8	8955:26	12	* dst ++ = bytebuff4 ;
EXPR	8955:8	8955:8	13	* dst ++ = bytebuff4
ASSIGN	8955:8	8955:17	14	* dst ++ = bytebuff4
LVAL	8955:8	8955:8	15	* dst ++
UNARY_EXPR	8955:8	8955:9	16	* dst ++
UNARY_OPERATOR	8955:8	8955:8	17	*
LEAF_NODE	8955:8	8955:8	18	*
FIELD	8955:9	8955:12	17	dst ++
LEAF_NODE	8955:9	8955:9	18	dst
LEAF_NODE	8955:12	8955:12	18	++
ASSIGN_OP	8955:15	8955:15	15	=
LEAF_NODE	8955:15	8955:15	16	=
RVAL	8955:17	8955:17	15	bytebuff4
FIELD	8955:17	8955:17	16	bytebuff4
LEAF_NODE	8955:17	8955:17	17	bytebuff4
LEAF_NODE	8955:26	8955:26	13	;
EXPR_STATEMENT	8956:8	8956:24	12	ready_bits -= 32 ;
EXPR	8956:8	8956:8	13	ready_bits -= 32
ASSIGN	8956:8	8956:22	14	ready_bits -= 32
LVAL	8956:8	8956:8	15	ready_bits
FIELD	8956:8	8956:8	16	ready_bits
LEAF_NODE	8956:8	8956:8	17	ready_bits
ASSIGN_OP	8956:19	8956:19	15	-=
LEAF_NODE	8956:19	8956:19	16	-=
RVAL	8956:22	8956:22	15	32
FIELD	8956:22	8956:22	16	32
LEAF_NODE	8956:22	8956:22	17	32
LEAF_NODE	8956:24	8956:24	13	;
EXPR_STATEMENT	8959:8	8959:55	12	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) ) ;
EXPR	8959:8	8959:8	13	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
ASSIGN	8959:8	8959:16	14	buff2 = ( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LVAL	8959:8	8959:8	15	buff2
FIELD	8959:8	8959:8	16	buff2
LEAF_NODE	8959:8	8959:8	17	buff2
ASSIGN_OP	8959:14	8959:14	15	=
LEAF_NODE	8959:14	8959:14	16	=
RVAL	8959:16	8959:54	15	( ( buff2 << 32 ) | ( buff1 >> ready_bits ) )
LEAF_NODE	8959:16	8959:16	16	(
BIT_OR	8959:17	8959:33	16	( buff2 << 32 ) | ( buff1 >> ready_bits )
BIT_OR_ELEM	8959:17	8959:29	17	( buff2 << 32 )
LEAF_NODE	8959:17	8959:17	18	(
FIELD	8959:18	8959:18	18	buff2
LEAF_NODE	8959:18	8959:18	19	buff2
LEAF_NODE	8959:24	8959:24	18	<<
FIELD	8959:27	8959:27	18	32
LEAF_NODE	8959:27	8959:27	19	32
LEAF_NODE	8959:29	8959:29	18	)
LEAF_NODE	8959:31	8959:31	17	|
BIT_OR_ELEM	8959:33	8959:53	17	( buff1 >> ready_bits )
LEAF_NODE	8959:33	8959:33	18	(
FIELD	8959:34	8959:34	18	buff1
LEAF_NODE	8959:34	8959:34	19	buff1
LEAF_NODE	8959:40	8959:40	18	>>
FIELD	8959:43	8959:43	18	ready_bits
LEAF_NODE	8959:43	8959:43	19	ready_bits
LEAF_NODE	8959:53	8959:53	18	)
LEAF_NODE	8959:54	8959:54	16	)
LEAF_NODE	8959:55	8959:55	13	;
LEAF_NODE	8960:8	8960:8	11	}
EXPR_STATEMENT	8961:6	8961:23	9	ready_bits += bps ;
EXPR	8961:6	8961:6	10	ready_bits += bps
ASSIGN	8961:6	8961:20	11	ready_bits += bps
LVAL	8961:6	8961:6	12	ready_bits
FIELD	8961:6	8961:6	13	ready_bits
LEAF_NODE	8961:6	8961:6	14	ready_bits
ASSIGN_OP	8961:17	8961:17	12	+=
LEAF_NODE	8961:17	8961:17	13	+=
RVAL	8961:20	8961:20	12	bps
FIELD	8961:20	8961:20	13	bps
LEAF_NODE	8961:20	8961:20	14	bps
LEAF_NODE	8961:23	8961:23	10	;
LEAF_NODE	8962:6	8962:6	8	}
LEAF_NODE	8963:4	8963:4	5	}
ITERATION	8964:2	8965:4	3	
KEYWORD	8964:2	8964:2	4	while
LEAF_NODE	8964:2	8964:2	5	while
LEAF_NODE	8964:8	8964:8	4	(
CONDITION	8964:9	8964:9	4	ready_bits > 0
EXPR	8964:9	8964:22	5	ready_bits > 0
FIELD	8964:9	8964:9	6	ready_bits
LEAF_NODE	8964:9	8964:9	7	ready_bits
REL_OPERATOR	8964:20	8964:20	6	>
LEAF_NODE	8964:20	8964:20	7	>
FIELD	8964:22	8964:22	6	0
LEAF_NODE	8964:22	8964:22	7	0
LEAF_NODE	8964:23	8964:23	4	)
STATEMENTS	8965:4	8970:4	4	
LEAF_NODE	8965:4	8965:4	5	{
STATEMENTS	8966:4	8969:4	5	
EXPR_STATEMENT	8966:4	8966:29	6	bytebuff1 = ( buff2 >> 56 ) ;
EXPR	8966:4	8966:4	7	bytebuff1 = ( buff2 >> 56 )
ASSIGN	8966:4	8966:16	8	bytebuff1 = ( buff2 >> 56 )
LVAL	8966:4	8966:4	9	bytebuff1
FIELD	8966:4	8966:4	10	bytebuff1
LEAF_NODE	8966:4	8966:4	11	bytebuff1
ASSIGN_OP	8966:14	8966:14	9	=
LEAF_NODE	8966:14	8966:14	10	=
RVAL	8966:16	8966:28	9	( buff2 >> 56 )
LEAF_NODE	8966:16	8966:16	10	(
FIELD	8966:17	8966:17	10	buff2
LEAF_NODE	8966:17	8966:17	11	buff2
LEAF_NODE	8966:23	8966:23	10	>>
FIELD	8966:26	8966:26	10	56
LEAF_NODE	8966:26	8966:26	11	56
LEAF_NODE	8966:28	8966:28	10	)
LEAF_NODE	8966:29	8966:29	7	;
EXPR_STATEMENT	8967:4	8967:22	6	* dst ++ = bytebuff1 ;
EXPR	8967:4	8967:4	7	* dst ++ = bytebuff1
ASSIGN	8967:4	8967:13	8	* dst ++ = bytebuff1
LVAL	8967:4	8967:4	9	* dst ++
UNARY_EXPR	8967:4	8967:5	10	* dst ++
UNARY_OPERATOR	8967:4	8967:4	11	*
LEAF_NODE	8967:4	8967:4	12	*
FIELD	8967:5	8967:8	11	dst ++
LEAF_NODE	8967:5	8967:5	12	dst
LEAF_NODE	8967:8	8967:8	12	++
ASSIGN_OP	8967:11	8967:11	9	=
LEAF_NODE	8967:11	8967:11	10	=
RVAL	8967:13	8967:13	9	bytebuff1
FIELD	8967:13	8967:13	10	bytebuff1
LEAF_NODE	8967:13	8967:13	11	bytebuff1
LEAF_NODE	8967:22	8967:22	7	;
EXPR_STATEMENT	8968:4	8968:24	6	buff2 = ( buff2 << 8 ) ;
EXPR	8968:4	8968:4	7	buff2 = ( buff2 << 8 )
ASSIGN	8968:4	8968:12	8	buff2 = ( buff2 << 8 )
LVAL	8968:4	8968:4	9	buff2
FIELD	8968:4	8968:4	10	buff2
LEAF_NODE	8968:4	8968:4	11	buff2
ASSIGN_OP	8968:10	8968:10	9	=
LEAF_NODE	8968:10	8968:10	10	=
RVAL	8968:12	8968:23	9	( buff2 << 8 )
LEAF_NODE	8968:12	8968:12	10	(
FIELD	8968:13	8968:13	10	buff2
LEAF_NODE	8968:13	8968:13	11	buff2
LEAF_NODE	8968:19	8968:19	10	<<
FIELD	8968:22	8968:22	10	8
LEAF_NODE	8968:22	8968:22	11	8
LEAF_NODE	8968:23	8968:23	10	)
LEAF_NODE	8968:24	8968:24	7	;
EXPR_STATEMENT	8969:4	8969:19	6	ready_bits -= 8 ;
EXPR	8969:4	8969:4	7	ready_bits -= 8
ASSIGN	8969:4	8969:18	8	ready_bits -= 8
LVAL	8969:4	8969:4	9	ready_bits
FIELD	8969:4	8969:4	10	ready_bits
LEAF_NODE	8969:4	8969:4	11	ready_bits
ASSIGN_OP	8969:15	8969:15	9	-=
LEAF_NODE	8969:15	8969:15	10	-=
RVAL	8969:18	8969:18	9	8
FIELD	8969:18	8969:18	10	8
LEAF_NODE	8969:18	8969:18	11	8
LEAF_NODE	8969:19	8969:19	7	;
LEAF_NODE	8970:4	8970:4	5	}
JUMP_STATEMENT	8972:2	8972:12	3	return ( 0 ) ;
KEYWORD	8972:2	8972:2	4	return
LEAF_NODE	8972:2	8972:2	5	return
DESTINATION	8972:9	8972:9	4	( 0 )
EXPR	8972:9	8972:11	5	( 0 )
LEAF_NODE	8972:9	8972:9	6	(
FIELD	8972:10	8972:10	6	0
LEAF_NODE	8972:10	8972:10	7	0
LEAF_NODE	8972:11	8972:11	6	)
LEAF_NODE	8972:12	8972:12	4	;
LEAF_NODE	8973:2	8973:2	2	}
FUNCTION_DEF	8975:0	9025:2	1	
RETURN_TYPE	8975:0	8975:7	2	static int
LEAF_NODE	8975:0	8975:0	3	static
TYPE_NAME	8975:7	8975:7	3	int
LEAF_NODE	8975:7	8975:7	4	int
FUNCTION_NAME	8976:0	8976:0	2	reverseSamplesBytes
LEAF_NODE	8976:0	8976:0	3	reverseSamplesBytes
PARAMETER_LIST	8976:20	8977:43	2	( uint16 spp , uint16 bps , uint32 width , uint8 * src , uint8 * dst )
LEAF_NODE	8976:20	8976:20	3	(
PARAMETER_DECL	8976:21	8976:28	3	uint16 spp
TYPE	8976:21	8976:21	4	uint16
TYPE_NAME	8976:21	8976:21	5	uint16
LEAF_NODE	8976:21	8976:21	6	uint16
NAME	8976:28	8976:28	4	spp
LEAF_NODE	8976:28	8976:28	5	spp
LEAF_NODE	8976:31	8976:31	3	,
PARAMETER_DECL	8976:33	8976:40	3	uint16 bps
TYPE	8976:33	8976:33	4	uint16
TYPE_NAME	8976:33	8976:33	5	uint16
LEAF_NODE	8976:33	8976:33	6	uint16
NAME	8976:40	8976:40	4	bps
LEAF_NODE	8976:40	8976:40	5	bps
LEAF_NODE	8976:43	8976:43	3	,
PARAMETER_DECL	8976:45	8976:52	3	uint32 width
TYPE	8976:45	8976:45	4	uint32
TYPE_NAME	8976:45	8976:45	5	uint32
LEAF_NODE	8976:45	8976:45	6	uint32
NAME	8976:52	8976:52	4	width
LEAF_NODE	8976:52	8976:52	5	width
LEAF_NODE	8976:57	8976:57	3	,
PARAMETER_DECL	8977:21	8977:28	3	uint8 * src
TYPE	8977:21	8977:27	4	uint8 *
TYPE_NAME	8977:21	8977:21	5	uint8
LEAF_NODE	8977:21	8977:21	6	uint8
POINTER	8977:27	8977:27	5	*
LEAF_NODE	8977:27	8977:27	6	*
NAME	8977:28	8977:28	4	src
LEAF_NODE	8977:28	8977:28	5	src
LEAF_NODE	8977:31	8977:31	3	,
PARAMETER_DECL	8977:33	8977:40	3	uint8 * dst
TYPE	8977:33	8977:39	4	uint8 *
TYPE_NAME	8977:33	8977:33	5	uint8
LEAF_NODE	8977:33	8977:33	6	uint8
POINTER	8977:39	8977:39	5	*
LEAF_NODE	8977:39	8977:39	6	*
NAME	8977:40	8977:40	4	dst
LEAF_NODE	8977:40	8977:40	5	dst
LEAF_NODE	8977:43	8977:43	3	)
LEAF_NODE	8978:2	8978:2	2	{
STATEMENTS	8979:2	9024:2	2	
SIMPLE_DECL	8979:2	8979:7	3	int i ;
VAR_DECL	8979:2	8979:6	4	int i
TYPE	8979:2	8979:2	5	int
TYPE_NAME	8979:2	8979:2	6	int
LEAF_NODE	8979:2	8979:2	7	int
NAME	8979:6	8979:6	5	i
LEAF_NODE	8979:6	8979:6	6	i
LEAF_NODE	8979:7	8979:7	4	;
SIMPLE_DECL	8980:2	8980:42	3	uint32 col , uint32 bytes_per_pixel , uint32 col_offset ;
INIT_DECL_LIST	8980:2	8980:2	4	uint32 col , uint32 bytes_per_pixel , uint32 col_offset
VAR_DECL	8980:2	8980:10	5	uint32 col
TYPE	8980:2	8980:2	6	uint32
TYPE_NAME	8980:2	8980:2	7	uint32
LEAF_NODE	8980:2	8980:2	8	uint32
NAME	8980:10	8980:10	6	col
LEAF_NODE	8980:10	8980:10	7	col
LEAF_NODE	8980:13	8980:13	5	,
INIT_DECL_LIST	8980:2	8980:2	5	uint32 bytes_per_pixel , uint32 col_offset
VAR_DECL	8980:2	8980:15	6	uint32 bytes_per_pixel
TYPE	8980:2	8980:2	7	uint32
TYPE_NAME	8980:2	8980:2	8	uint32
LEAF_NODE	8980:2	8980:2	9	uint32
NAME	8980:15	8980:15	7	bytes_per_pixel
LEAF_NODE	8980:15	8980:15	8	bytes_per_pixel
LEAF_NODE	8980:30	8980:30	6	,
VAR_DECL	8980:2	8980:32	6	uint32 col_offset
TYPE	8980:2	8980:2	7	uint32
TYPE_NAME	8980:2	8980:2	8	uint32
LEAF_NODE	8980:2	8980:2	9	uint32
NAME	8980:32	8980:32	7	col_offset
LEAF_NODE	8980:32	8980:32	8	col_offset
LEAF_NODE	8980:42	8980:42	4	;
SIMPLE_DECL	8981:2	8981:19	3	uint8 bytebuff1 ;
VAR_DECL	8981:2	8981:10	4	uint8 bytebuff1
TYPE	8981:2	8981:2	5	uint8
TYPE_NAME	8981:2	8981:2	6	uint8
LEAF_NODE	8981:2	8981:2	7	uint8
NAME	8981:10	8981:10	5	bytebuff1
LEAF_NODE	8981:10	8981:10	6	bytebuff1
LEAF_NODE	8981:19	8981:19	4	;
SIMPLE_DECL	8982:2	8982:28	3	unsigned char [ 32 ] swapbuff ;
VAR_DECL	8982:2	8982:16	4	unsigned char [ 32 ] swapbuff
TYPE	8982:2	8982:24	5	unsigned char [ 32 ]
TYPE_NAME	8982:2	8982:11	6	unsigned char
LEAF_NODE	8982:2	8982:2	7	unsigned
LEAF_NODE	8982:11	8982:11	7	char
TYPE_SUFFIX	8982:24	8982:27	6	[ 32 ]
LEAF_NODE	8982:24	8982:24	7	[
FIELD	8982:25	8982:25	7	32
LEAF_NODE	8982:25	8982:25	8	32
LEAF_NODE	8982:27	8982:27	7	]
NAME	8982:16	8982:16	5	swapbuff
LEAF_NODE	8982:16	8982:16	6	swapbuff
LEAF_NODE	8982:28	8982:28	4	;
SELECTION	8984:2	8985:4	3	
KEYWORD	8984:2	8984:2	4	if
LEAF_NODE	8984:2	8984:2	5	if
LEAF_NODE	8984:5	8984:5	4	(
CONDITION	8984:6	8984:6	4	( src == NULL ) || ( dst == NULL )
EXPR	8984:6	8984:6	5	( src == NULL ) || ( dst == NULL )
OR	8984:6	8984:23	6	( src == NULL ) || ( dst == NULL )
EXPR	8984:6	8984:18	7	( src == NULL )
LEAF_NODE	8984:6	8984:6	8	(
FIELD	8984:7	8984:7	8	src
LEAF_NODE	8984:7	8984:7	9	src
EQ_OPERATOR	8984:11	8984:11	8	==
LEAF_NODE	8984:11	8984:11	9	==
FIELD	8984:14	8984:14	8	NULL
LEAF_NODE	8984:14	8984:14	9	NULL
LEAF_NODE	8984:18	8984:18	8	)
LEAF_NODE	8984:20	8984:20	7	||
EXPR	8984:23	8984:35	7	( dst == NULL )
LEAF_NODE	8984:23	8984:23	8	(
FIELD	8984:24	8984:24	8	dst
LEAF_NODE	8984:24	8984:24	9	dst
EQ_OPERATOR	8984:28	8984:28	8	==
LEAF_NODE	8984:28	8984:28	9	==
FIELD	8984:31	8984:31	8	NULL
LEAF_NODE	8984:31	8984:31	9	NULL
LEAF_NODE	8984:35	8984:35	8	)
LEAF_NODE	8984:36	8984:36	4	)
STATEMENTS	8985:4	8988:4	4	
LEAF_NODE	8985:4	8985:4	5	{
STATEMENTS	8986:4	8987:4	5	
EXPR_STATEMENT	8986:4	8986:69	6	TIFFError ( "reverseSamplesBytes" , "Invalid input or output buffer" ) ;
EXPR	8986:4	8986:4	7	TIFFError ( "reverseSamplesBytes" , "Invalid input or output buffer" )
FUNCTION_CALL	8986:4	8986:68	8	TIFFError ( "reverseSamplesBytes" , "Invalid input or output buffer" )
CALLEE	8986:4	8986:4	9	TIFFError
LEAF_NODE	8986:4	8986:4	10	TIFFError
LEAF_NODE	8986:13	8986:13	9	(
ARGUMENT	8986:14	8986:14	9	"reverseSamplesBytes"
FIELD	8986:14	8986:14	10	"reverseSamplesBytes"
LEAF_NODE	8986:14	8986:14	11	"reverseSamplesBytes"
LEAF_NODE	8986:35	8986:35	9	,
ARGUMENT	8986:36	8986:36	9	"Invalid input or output buffer"
FIELD	8986:36	8986:36	10	"Invalid input or output buffer"
LEAF_NODE	8986:36	8986:36	11	"Invalid input or output buffer"
LEAF_NODE	8986:68	8986:68	9	)
LEAF_NODE	8986:69	8986:69	7	;
JUMP_STATEMENT	8987:4	8987:14	6	return ( 1 ) ;
KEYWORD	8987:4	8987:4	7	return
LEAF_NODE	8987:4	8987:4	8	return
DESTINATION	8987:11	8987:11	7	( 1 )
EXPR	8987:11	8987:13	8	( 1 )
LEAF_NODE	8987:11	8987:11	9	(
FIELD	8987:12	8987:12	9	1
LEAF_NODE	8987:12	8987:12	10	1
LEAF_NODE	8987:13	8987:13	9	)
LEAF_NODE	8987:14	8987:14	7	;
LEAF_NODE	8988:4	8988:4	5	}
EXPR_STATEMENT	8990:2	8990:42	3	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	8990:2	8990:2	4	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	8990:2	8990:21	5	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	8990:2	8990:2	6	bytes_per_pixel
FIELD	8990:2	8990:2	7	bytes_per_pixel
LEAF_NODE	8990:2	8990:2	8	bytes_per_pixel
ASSIGN_OP	8990:19	8990:19	6	=
LEAF_NODE	8990:19	8990:19	7	=
RVAL	8990:21	8990:41	6	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	8990:21	8990:21	7	(
LEAF_NODE	8990:22	8990:22	7	(
FIELD	8990:23	8990:23	7	bps
LEAF_NODE	8990:23	8990:23	8	bps
LEAF_NODE	8990:27	8990:27	7	*
FIELD	8990:29	8990:29	7	spp
LEAF_NODE	8990:29	8990:29	8	spp
LEAF_NODE	8990:32	8990:32	7	)
LEAF_NODE	8990:34	8990:34	7	+
FIELD	8990:36	8990:36	7	7
LEAF_NODE	8990:36	8990:36	8	7
LEAF_NODE	8990:37	8990:37	7	)
LEAF_NODE	8990:39	8990:39	7	/
FIELD	8990:41	8990:41	7	8
LEAF_NODE	8990:41	8990:41	8	8
LEAF_NODE	8990:42	8990:42	4	;
SELECTION	8991:2	8992:2	3	
KEYWORD	8991:2	8991:2	4	if
LEAF_NODE	8991:2	8991:2	5	if
LEAF_NODE	8991:4	8991:4	4	(
CONDITION	8991:6	8991:6	4	bytes_per_pixel > sizeof ( swapbuff )
EXPR	8991:6	8991:24	5	bytes_per_pixel > sizeof ( swapbuff )
FIELD	8991:6	8991:6	6	bytes_per_pixel
LEAF_NODE	8991:6	8991:6	7	bytes_per_pixel
REL_OPERATOR	8991:22	8991:22	6	>
LEAF_NODE	8991:22	8991:22	7	>
FUNCTION_CALL	8991:24	8991:39	6	sizeof ( swapbuff )
CALLEE	8991:24	8991:24	7	sizeof
LEAF_NODE	8991:24	8991:24	8	sizeof
LEAF_NODE	8991:30	8991:30	7	(
ARGUMENT	8991:31	8991:31	7	swapbuff
FIELD	8991:31	8991:31	8	swapbuff
LEAF_NODE	8991:31	8991:31	9	swapbuff
LEAF_NODE	8991:39	8991:39	7	)
LEAF_NODE	8991:41	8991:41	4	)
STATEMENTS	8992:2	8995:2	4	
LEAF_NODE	8992:2	8992:2	5	{
STATEMENTS	8993:4	8994:4	5	
EXPR_STATEMENT	8993:4	8993:64	6	TIFFError ( "reverseSamplesBytes" , "bytes_per_pixel too large" ) ;
EXPR	8993:4	8993:4	7	TIFFError ( "reverseSamplesBytes" , "bytes_per_pixel too large" )
FUNCTION_CALL	8993:4	8993:63	8	TIFFError ( "reverseSamplesBytes" , "bytes_per_pixel too large" )
CALLEE	8993:4	8993:4	9	TIFFError
LEAF_NODE	8993:4	8993:4	10	TIFFError
LEAF_NODE	8993:13	8993:13	9	(
ARGUMENT	8993:14	8993:14	9	"reverseSamplesBytes"
FIELD	8993:14	8993:14	10	"reverseSamplesBytes"
LEAF_NODE	8993:14	8993:14	11	"reverseSamplesBytes"
LEAF_NODE	8993:35	8993:35	9	,
ARGUMENT	8993:36	8993:36	9	"bytes_per_pixel too large"
FIELD	8993:36	8993:36	10	"bytes_per_pixel too large"
LEAF_NODE	8993:36	8993:36	11	"bytes_per_pixel too large"
LEAF_NODE	8993:63	8993:63	9	)
LEAF_NODE	8993:64	8993:64	7	;
JUMP_STATEMENT	8994:4	8994:14	6	return ( 1 ) ;
KEYWORD	8994:4	8994:4	7	return
LEAF_NODE	8994:4	8994:4	8	return
DESTINATION	8994:11	8994:11	7	( 1 )
EXPR	8994:11	8994:13	8	( 1 )
LEAF_NODE	8994:11	8994:11	9	(
FIELD	8994:12	8994:12	9	1
LEAF_NODE	8994:12	8994:12	10	1
LEAF_NODE	8994:13	8994:13	9	)
LEAF_NODE	8994:14	8994:14	7	;
LEAF_NODE	8995:2	8995:2	5	}
SELECTION	8996:2	8997:5	3	
KEYWORD	8996:2	8996:2	4	switch
LEAF_NODE	8996:2	8996:2	5	switch
LEAF_NODE	8996:9	8996:9	4	(
CONDITION	8996:10	8996:10	4	bps / 8
EXPR	8996:10	8996:16	5	bps / 8
FIELD	8996:10	8996:10	6	bps
LEAF_NODE	8996:10	8996:10	7	bps
LEAF_NODE	8996:14	8996:14	6	/
FIELD	8996:16	8996:16	6	8
LEAF_NODE	8996:16	8996:16	7	8
LEAF_NODE	8996:17	8996:17	4	)
STATEMENTS	8997:5	9023:5	4	
LEAF_NODE	8997:5	8997:5	5	{
STATEMENTS	8998:5	9022:7	5	
LABEL	8998:5	8998:11	6	case 8 :
LEAF_NODE	8998:5	8998:5	7	case
LEAF_NODE	8998:10	8998:10	7	8
LEAF_NODE	8998:11	8998:11	7	:
LABEL	8999:5	8999:11	6	case 4 :
LEAF_NODE	8999:5	8999:5	7	case
LEAF_NODE	8999:10	8999:10	7	4
LEAF_NODE	8999:11	8999:11	7	:
LABEL	9000:5	9000:11	6	case 3 :
LEAF_NODE	9000:5	9000:5	7	case
LEAF_NODE	9000:10	9000:10	7	3
LEAF_NODE	9000:11	9000:11	7	:
LABEL	9001:5	9001:11	6	case 2 :
LEAF_NODE	9001:5	9001:5	7	case
LEAF_NODE	9001:10	9001:10	7	2
LEAF_NODE	9001:11	9001:11	7	:
ITERATION	9001:13	9002:15	6	
KEYWORD	9001:13	9001:13	7	for
LEAF_NODE	9001:13	9001:13	8	for
LEAF_NODE	9001:17	9001:17	7	(
FOR_INIT	9001:18	9001:25	7	col = 0 ;
EXPR	9001:18	9001:18	8	col = 0
ASSIGN	9001:18	9001:24	9	col = 0
LVAL	9001:18	9001:18	10	col
FIELD	9001:18	9001:18	11	col
LEAF_NODE	9001:18	9001:18	12	col
ASSIGN_OP	9001:22	9001:22	10	=
LEAF_NODE	9001:22	9001:22	11	=
RVAL	9001:24	9001:24	10	0
FIELD	9001:24	9001:24	11	0
LEAF_NODE	9001:24	9001:24	12	0
LEAF_NODE	9001:25	9001:25	8	;
CONDITION	9001:27	9001:27	7	col < ( width / 2 )
EXPR	9001:27	9001:43	8	col < ( width / 2 )
FIELD	9001:27	9001:27	9	col
LEAF_NODE	9001:27	9001:27	10	col
REL_OPERATOR	9001:31	9001:31	9	<
LEAF_NODE	9001:31	9001:31	10	<
LEAF_NODE	9001:33	9001:33	9	(
FIELD	9001:34	9001:34	9	width
LEAF_NODE	9001:34	9001:34	10	width
LEAF_NODE	9001:40	9001:40	9	/
FIELD	9001:42	9001:42	9	2
LEAF_NODE	9001:42	9001:42	10	2
LEAF_NODE	9001:43	9001:43	9	)
LEAF_NODE	9001:44	9001:44	7	;
FOR_EXPR	9001:46	9001:46	7	col ++
EXPR	9001:46	9001:46	8	col ++
FIELD	9001:46	9001:49	9	col ++
LEAF_NODE	9001:46	9001:46	10	col
LEAF_NODE	9001:49	9001:49	10	++
LEAF_NODE	9001:51	9001:51	7	)
STATEMENTS	9002:15	9007:15	7	
LEAF_NODE	9002:15	9002:15	8	{
STATEMENTS	9003:8	9006:8	8	
EXPR_STATEMENT	9003:8	9003:42	9	col_offset = col * bytes_per_pixel ;
EXPR	9003:8	9003:8	10	col_offset = col * bytes_per_pixel
ASSIGN	9003:8	9003:21	11	col_offset = col * bytes_per_pixel
LVAL	9003:8	9003:8	12	col_offset
FIELD	9003:8	9003:8	13	col_offset
LEAF_NODE	9003:8	9003:8	14	col_offset
ASSIGN_OP	9003:19	9003:19	12	=
LEAF_NODE	9003:19	9003:19	13	=
RVAL	9003:21	9003:27	12	col * bytes_per_pixel
FIELD	9003:21	9003:21	13	col
LEAF_NODE	9003:21	9003:21	14	col
LEAF_NODE	9003:25	9003:25	13	*
FIELD	9003:27	9003:27	13	bytes_per_pixel
LEAF_NODE	9003:27	9003:27	14	bytes_per_pixel
LEAF_NODE	9003:42	9003:42	10	;
EXPR_STATEMENT	9004:8	9004:65	9	_TIFFmemcpy ( swapbuff , src + col_offset , bytes_per_pixel ) ;
EXPR	9004:8	9004:8	10	_TIFFmemcpy ( swapbuff , src + col_offset , bytes_per_pixel )
FUNCTION_CALL	9004:8	9004:64	11	_TIFFmemcpy ( swapbuff , src + col_offset , bytes_per_pixel )
CALLEE	9004:8	9004:8	12	_TIFFmemcpy
LEAF_NODE	9004:8	9004:8	13	_TIFFmemcpy
LEAF_NODE	9004:20	9004:20	12	(
ARGUMENT	9004:21	9004:21	12	swapbuff
FIELD	9004:21	9004:21	13	swapbuff
LEAF_NODE	9004:21	9004:21	14	swapbuff
LEAF_NODE	9004:29	9004:29	12	,
ARGUMENT	9004:31	9004:37	12	src + col_offset
FIELD	9004:31	9004:31	13	src
LEAF_NODE	9004:31	9004:31	14	src
LEAF_NODE	9004:35	9004:35	13	+
FIELD	9004:37	9004:37	13	col_offset
LEAF_NODE	9004:37	9004:37	14	col_offset
LEAF_NODE	9004:47	9004:47	12	,
ARGUMENT	9004:49	9004:49	12	bytes_per_pixel
FIELD	9004:49	9004:49	13	bytes_per_pixel
LEAF_NODE	9004:49	9004:49	14	bytes_per_pixel
LEAF_NODE	9004:64	9004:64	12	)
LEAF_NODE	9004:65	9004:65	10	;
EXPR_STATEMENT	9005:8	9005:91	9	_TIFFmemcpy ( src + col_offset , dst - col_offset - bytes_per_pixel , bytes_per_pixel ) ;
EXPR	9005:8	9005:8	10	_TIFFmemcpy ( src + col_offset , dst - col_offset - bytes_per_pixel , bytes_per_pixel )
FUNCTION_CALL	9005:8	9005:90	11	_TIFFmemcpy ( src + col_offset , dst - col_offset - bytes_per_pixel , bytes_per_pixel )
CALLEE	9005:8	9005:8	12	_TIFFmemcpy
LEAF_NODE	9005:8	9005:8	13	_TIFFmemcpy
LEAF_NODE	9005:20	9005:20	12	(
ARGUMENT	9005:21	9005:27	12	src + col_offset
FIELD	9005:21	9005:21	13	src
LEAF_NODE	9005:21	9005:21	14	src
LEAF_NODE	9005:25	9005:25	13	+
FIELD	9005:27	9005:27	13	col_offset
LEAF_NODE	9005:27	9005:27	14	col_offset
LEAF_NODE	9005:37	9005:37	12	,
ARGUMENT	9005:39	9005:58	12	dst - col_offset - bytes_per_pixel
FIELD	9005:39	9005:39	13	dst
LEAF_NODE	9005:39	9005:39	14	dst
LEAF_NODE	9005:43	9005:43	13	-
FIELD	9005:45	9005:45	13	col_offset
LEAF_NODE	9005:45	9005:45	14	col_offset
LEAF_NODE	9005:56	9005:56	13	-
FIELD	9005:58	9005:58	13	bytes_per_pixel
LEAF_NODE	9005:58	9005:58	14	bytes_per_pixel
LEAF_NODE	9005:73	9005:73	12	,
ARGUMENT	9005:75	9005:75	12	bytes_per_pixel
FIELD	9005:75	9005:75	13	bytes_per_pixel
LEAF_NODE	9005:75	9005:75	14	bytes_per_pixel
LEAF_NODE	9005:90	9005:90	12	)
LEAF_NODE	9005:91	9005:91	10	;
EXPR_STATEMENT	9006:8	9006:83	9	_TIFFmemcpy ( dst - col_offset - bytes_per_pixel , swapbuff , bytes_per_pixel ) ;
EXPR	9006:8	9006:8	10	_TIFFmemcpy ( dst - col_offset - bytes_per_pixel , swapbuff , bytes_per_pixel )
FUNCTION_CALL	9006:8	9006:82	11	_TIFFmemcpy ( dst - col_offset - bytes_per_pixel , swapbuff , bytes_per_pixel )
CALLEE	9006:8	9006:8	12	_TIFFmemcpy
LEAF_NODE	9006:8	9006:8	13	_TIFFmemcpy
LEAF_NODE	9006:20	9006:20	12	(
ARGUMENT	9006:21	9006:40	12	dst - col_offset - bytes_per_pixel
FIELD	9006:21	9006:21	13	dst
LEAF_NODE	9006:21	9006:21	14	dst
LEAF_NODE	9006:25	9006:25	13	-
FIELD	9006:27	9006:27	13	col_offset
LEAF_NODE	9006:27	9006:27	14	col_offset
LEAF_NODE	9006:38	9006:38	13	-
FIELD	9006:40	9006:40	13	bytes_per_pixel
LEAF_NODE	9006:40	9006:40	14	bytes_per_pixel
LEAF_NODE	9006:55	9006:55	12	,
ARGUMENT	9006:57	9006:57	12	swapbuff
FIELD	9006:57	9006:57	13	swapbuff
LEAF_NODE	9006:57	9006:57	14	swapbuff
LEAF_NODE	9006:65	9006:65	12	,
ARGUMENT	9006:67	9006:67	12	bytes_per_pixel
FIELD	9006:67	9006:67	13	bytes_per_pixel
LEAF_NODE	9006:67	9006:67	14	bytes_per_pixel
LEAF_NODE	9006:82	9006:82	12	)
LEAF_NODE	9006:83	9006:83	10	;
LEAF_NODE	9007:15	9007:15	8	}
JUMP_STATEMENT	9008:6	9008:11	6	break DESTINATION ;
KEYWORD	9008:6	9008:6	7	break
LEAF_NODE	9008:6	9008:6	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9008:11	9008:11	7	;
LABEL	9009:5	9009:11	6	case 1 :
LEAF_NODE	9009:5	9009:5	7	case
LEAF_NODE	9009:10	9009:10	7	1
LEAF_NODE	9009:11	9009:11	7	:
ITERATION	9010:13	9011:15	6	
KEYWORD	9010:13	9010:13	7	for
LEAF_NODE	9010:13	9010:13	8	for
LEAF_NODE	9010:17	9010:17	7	(
FOR_INIT	9010:18	9010:25	7	col = 0 ;
EXPR	9010:18	9010:18	8	col = 0
ASSIGN	9010:18	9010:24	9	col = 0
LVAL	9010:18	9010:18	10	col
FIELD	9010:18	9010:18	11	col
LEAF_NODE	9010:18	9010:18	12	col
ASSIGN_OP	9010:22	9010:22	10	=
LEAF_NODE	9010:22	9010:22	11	=
RVAL	9010:24	9010:24	10	0
FIELD	9010:24	9010:24	11	0
LEAF_NODE	9010:24	9010:24	12	0
LEAF_NODE	9010:25	9010:25	8	;
CONDITION	9010:27	9010:27	7	col < ( width / 2 )
EXPR	9010:27	9010:43	8	col < ( width / 2 )
FIELD	9010:27	9010:27	9	col
LEAF_NODE	9010:27	9010:27	10	col
REL_OPERATOR	9010:31	9010:31	9	<
LEAF_NODE	9010:31	9010:31	10	<
LEAF_NODE	9010:33	9010:33	9	(
FIELD	9010:34	9010:34	9	width
LEAF_NODE	9010:34	9010:34	10	width
LEAF_NODE	9010:40	9010:40	9	/
FIELD	9010:42	9010:42	9	2
LEAF_NODE	9010:42	9010:42	10	2
LEAF_NODE	9010:43	9010:43	9	)
LEAF_NODE	9010:44	9010:44	7	;
FOR_EXPR	9010:46	9010:46	7	col ++
EXPR	9010:46	9010:46	8	col ++
FIELD	9010:46	9010:49	9	col ++
LEAF_NODE	9010:46	9010:46	10	col
LEAF_NODE	9010:49	9010:49	10	++
LEAF_NODE	9010:51	9010:51	7	)
STATEMENTS	9011:15	9019:16	7	
LEAF_NODE	9011:15	9011:15	8	{
STATEMENTS	9012:8	9018:2	8	
ITERATION	9012:8	9013:18	9	
KEYWORD	9012:8	9012:8	10	for
LEAF_NODE	9012:8	9012:8	11	for
LEAF_NODE	9012:12	9012:12	10	(
FOR_INIT	9012:13	9012:18	10	i = 0 ;
EXPR	9012:13	9012:13	11	i = 0
ASSIGN	9012:13	9012:17	12	i = 0
LVAL	9012:13	9012:13	13	i
FIELD	9012:13	9012:13	14	i
LEAF_NODE	9012:13	9012:13	15	i
ASSIGN_OP	9012:15	9012:15	13	=
LEAF_NODE	9012:15	9012:15	14	=
RVAL	9012:17	9012:17	13	0
FIELD	9012:17	9012:17	14	0
LEAF_NODE	9012:17	9012:17	15	0
LEAF_NODE	9012:18	9012:18	11	;
CONDITION	9012:20	9012:20	10	i < spp
EXPR	9012:20	9012:24	11	i < spp
FIELD	9012:20	9012:20	12	i
LEAF_NODE	9012:20	9012:20	13	i
REL_OPERATOR	9012:22	9012:22	12	<
LEAF_NODE	9012:22	9012:22	13	<
FIELD	9012:24	9012:24	12	spp
LEAF_NODE	9012:24	9012:24	13	spp
LEAF_NODE	9012:27	9012:27	10	;
FOR_EXPR	9012:29	9012:29	10	i ++
EXPR	9012:29	9012:29	11	i ++
FIELD	9012:29	9012:30	12	i ++
LEAF_NODE	9012:29	9012:29	13	i
LEAF_NODE	9012:30	9012:30	13	++
LEAF_NODE	9012:32	9012:32	10	)
STATEMENTS	9013:18	9017:4	10	
LEAF_NODE	9013:18	9013:18	11	{
STATEMENTS	9014:4	9016:18	11	
EXPR_STATEMENT	9014:4	9014:20	12	bytebuff1 = * src ;
EXPR	9014:4	9014:4	13	bytebuff1 = * src
ASSIGN	9014:4	9014:16	14	bytebuff1 = * src
LVAL	9014:4	9014:4	15	bytebuff1
FIELD	9014:4	9014:4	16	bytebuff1
LEAF_NODE	9014:4	9014:4	17	bytebuff1
ASSIGN_OP	9014:14	9014:14	15	=
LEAF_NODE	9014:14	9014:14	16	=
RVAL	9014:16	9014:16	15	* src
UNARY_EXPR	9014:16	9014:17	16	* src
UNARY_OPERATOR	9014:16	9014:16	17	*
LEAF_NODE	9014:16	9014:16	18	*
FIELD	9014:17	9014:17	17	src
LEAF_NODE	9014:17	9014:17	18	src
LEAF_NODE	9014:20	9014:20	13	;
EXPR_STATEMENT	9015:4	9015:29	12	* src ++ = * ( dst - spp + i ) ;
EXPR	9015:4	9015:4	13	* src ++ = * ( dst - spp + i )
ASSIGN	9015:4	9015:13	14	* src ++ = * ( dst - spp + i )
LVAL	9015:4	9015:4	15	* src ++
UNARY_EXPR	9015:4	9015:5	16	* src ++
UNARY_OPERATOR	9015:4	9015:4	17	*
LEAF_NODE	9015:4	9015:4	18	*
FIELD	9015:5	9015:8	17	src ++
LEAF_NODE	9015:5	9015:5	18	src
LEAF_NODE	9015:8	9015:8	18	++
ASSIGN_OP	9015:11	9015:11	15	=
LEAF_NODE	9015:11	9015:11	16	=
RVAL	9015:13	9015:13	15	* ( dst - spp + i )
UNARY_EXPR	9015:13	9015:28	16	* ( dst - spp + i )
UNARY_OPERATOR	9015:13	9015:13	17	*
LEAF_NODE	9015:13	9015:13	18	*
LEAF_NODE	9015:14	9015:14	17	(
FIELD	9015:15	9015:15	17	dst
LEAF_NODE	9015:15	9015:15	18	dst
LEAF_NODE	9015:19	9015:19	17	-
FIELD	9015:21	9015:21	17	spp
LEAF_NODE	9015:21	9015:21	18	spp
LEAF_NODE	9015:25	9015:25	17	+
FIELD	9015:27	9015:27	17	i
LEAF_NODE	9015:27	9015:27	18	i
LEAF_NODE	9015:28	9015:28	17	)
LEAF_NODE	9015:29	9015:29	13	;
EXPR_STATEMENT	9016:18	9016:46	12	* ( dst - spp + i ) = bytebuff1 ;
EXPR	9016:18	9016:18	13	* ( dst - spp + i ) = bytebuff1
ASSIGN	9016:18	9016:37	14	* ( dst - spp + i ) = bytebuff1
LVAL	9016:18	9016:18	15	* ( dst - spp + i )
UNARY_EXPR	9016:18	9016:33	16	* ( dst - spp + i )
UNARY_OPERATOR	9016:18	9016:18	17	*
LEAF_NODE	9016:18	9016:18	18	*
LEAF_NODE	9016:19	9016:19	17	(
FIELD	9016:20	9016:20	17	dst
LEAF_NODE	9016:20	9016:20	18	dst
LEAF_NODE	9016:24	9016:24	17	-
FIELD	9016:26	9016:26	17	spp
LEAF_NODE	9016:26	9016:26	18	spp
LEAF_NODE	9016:30	9016:30	17	+
FIELD	9016:32	9016:32	17	i
LEAF_NODE	9016:32	9016:32	18	i
LEAF_NODE	9016:33	9016:33	17	)
ASSIGN_OP	9016:35	9016:35	15	=
LEAF_NODE	9016:35	9016:35	16	=
RVAL	9016:37	9016:37	15	bytebuff1
FIELD	9016:37	9016:37	16	bytebuff1
LEAF_NODE	9016:37	9016:37	17	bytebuff1
LEAF_NODE	9016:46	9016:46	13	;
LEAF_NODE	9017:4	9017:4	11	}
EXPR_STATEMENT	9018:2	9018:12	9	dst -= spp ;
EXPR	9018:2	9018:2	10	dst -= spp
ASSIGN	9018:2	9018:9	11	dst -= spp
LVAL	9018:2	9018:2	12	dst
FIELD	9018:2	9018:2	13	dst
LEAF_NODE	9018:2	9018:2	14	dst
ASSIGN_OP	9018:6	9018:6	12	-=
LEAF_NODE	9018:6	9018:6	13	-=
RVAL	9018:9	9018:9	12	spp
FIELD	9018:9	9018:9	13	spp
LEAF_NODE	9018:9	9018:9	14	spp
LEAF_NODE	9018:12	9018:12	10	;
LEAF_NODE	9019:16	9019:16	8	}
JUMP_STATEMENT	9020:6	9020:11	6	break DESTINATION ;
KEYWORD	9020:6	9020:6	7	break
LEAF_NODE	9020:6	9020:6	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9020:11	9020:11	7	;
LABEL	9021:5	9021:12	6	default :
LEAF_NODE	9021:5	9021:5	7	default
LEAF_NODE	9021:12	9021:12	7	:
EXPR_STATEMENT	9021:14	9021:78	6	TIFFError ( "reverseSamplesBytes" , "Unsupported bit depth %d" , bps ) ;
EXPR	9021:14	9021:14	7	TIFFError ( "reverseSamplesBytes" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	9021:14	9021:77	8	TIFFError ( "reverseSamplesBytes" , "Unsupported bit depth %d" , bps )
CALLEE	9021:14	9021:14	9	TIFFError
LEAF_NODE	9021:14	9021:14	10	TIFFError
LEAF_NODE	9021:23	9021:23	9	(
ARGUMENT	9021:24	9021:24	9	"reverseSamplesBytes"
FIELD	9021:24	9021:24	10	"reverseSamplesBytes"
LEAF_NODE	9021:24	9021:24	11	"reverseSamplesBytes"
LEAF_NODE	9021:45	9021:45	9	,
ARGUMENT	9021:46	9021:46	9	"Unsupported bit depth %d"
FIELD	9021:46	9021:46	10	"Unsupported bit depth %d"
LEAF_NODE	9021:46	9021:46	11	"Unsupported bit depth %d"
LEAF_NODE	9021:72	9021:72	9	,
ARGUMENT	9021:74	9021:74	9	bps
FIELD	9021:74	9021:74	10	bps
LEAF_NODE	9021:74	9021:74	11	bps
LEAF_NODE	9021:77	9021:77	9	)
LEAF_NODE	9021:78	9021:78	7	;
JUMP_STATEMENT	9022:7	9022:17	6	return ( 1 ) ;
KEYWORD	9022:7	9022:7	7	return
LEAF_NODE	9022:7	9022:7	8	return
DESTINATION	9022:14	9022:14	7	( 1 )
EXPR	9022:14	9022:16	8	( 1 )
LEAF_NODE	9022:14	9022:14	9	(
FIELD	9022:15	9022:15	9	1
LEAF_NODE	9022:15	9022:15	10	1
LEAF_NODE	9022:16	9022:16	9	)
LEAF_NODE	9022:17	9022:17	7	;
LEAF_NODE	9023:5	9023:5	5	}
JUMP_STATEMENT	9024:2	9024:12	3	return ( 0 ) ;
KEYWORD	9024:2	9024:2	4	return
LEAF_NODE	9024:2	9024:2	5	return
DESTINATION	9024:9	9024:9	4	( 0 )
EXPR	9024:9	9024:11	5	( 0 )
LEAF_NODE	9024:9	9024:9	6	(
FIELD	9024:10	9024:10	6	0
LEAF_NODE	9024:10	9024:10	7	0
LEAF_NODE	9024:11	9024:11	6	)
LEAF_NODE	9024:12	9024:12	4	;
LEAF_NODE	9025:2	9025:2	2	}
FUNCTION_DEF	9029:0	9140:2	1	
RETURN_TYPE	9029:0	9029:7	2	static int
LEAF_NODE	9029:0	9029:0	3	static
TYPE_NAME	9029:7	9029:7	3	int
LEAF_NODE	9029:7	9029:7	4	int
FUNCTION_NAME	9030:0	9030:0	2	mirrorImage
LEAF_NODE	9030:0	9030:0	3	mirrorImage
PARAMETER_LIST	9030:11	9030:100	2	( uint16 spp , uint16 bps , uint16 mirror , uint32 width , uint32 length , unsigned char * ibuff )
LEAF_NODE	9030:11	9030:11	3	(
PARAMETER_DECL	9030:12	9030:19	3	uint16 spp
TYPE	9030:12	9030:12	4	uint16
TYPE_NAME	9030:12	9030:12	5	uint16
LEAF_NODE	9030:12	9030:12	6	uint16
NAME	9030:19	9030:19	4	spp
LEAF_NODE	9030:19	9030:19	5	spp
LEAF_NODE	9030:22	9030:22	3	,
PARAMETER_DECL	9030:24	9030:31	3	uint16 bps
TYPE	9030:24	9030:24	4	uint16
TYPE_NAME	9030:24	9030:24	5	uint16
LEAF_NODE	9030:24	9030:24	6	uint16
NAME	9030:31	9030:31	4	bps
LEAF_NODE	9030:31	9030:31	5	bps
LEAF_NODE	9030:34	9030:34	3	,
PARAMETER_DECL	9030:36	9030:43	3	uint16 mirror
TYPE	9030:36	9030:36	4	uint16
TYPE_NAME	9030:36	9030:36	5	uint16
LEAF_NODE	9030:36	9030:36	6	uint16
NAME	9030:43	9030:43	4	mirror
LEAF_NODE	9030:43	9030:43	5	mirror
LEAF_NODE	9030:49	9030:49	3	,
PARAMETER_DECL	9030:51	9030:58	3	uint32 width
TYPE	9030:51	9030:51	4	uint32
TYPE_NAME	9030:51	9030:51	5	uint32
LEAF_NODE	9030:51	9030:51	6	uint32
NAME	9030:58	9030:58	4	width
LEAF_NODE	9030:58	9030:58	5	width
LEAF_NODE	9030:63	9030:63	3	,
PARAMETER_DECL	9030:65	9030:72	3	uint32 length
TYPE	9030:65	9030:65	4	uint32
TYPE_NAME	9030:65	9030:65	5	uint32
LEAF_NODE	9030:65	9030:65	6	uint32
NAME	9030:72	9030:72	4	length
LEAF_NODE	9030:72	9030:72	5	length
LEAF_NODE	9030:78	9030:78	3	,
PARAMETER_DECL	9030:80	9030:95	3	unsigned char * ibuff
TYPE	9030:80	9030:94	4	unsigned char *
TYPE_NAME	9030:80	9030:89	5	unsigned char
LEAF_NODE	9030:80	9030:80	6	unsigned
LEAF_NODE	9030:89	9030:89	6	char
POINTER	9030:94	9030:94	5	*
LEAF_NODE	9030:94	9030:94	6	*
NAME	9030:95	9030:95	4	ibuff
LEAF_NODE	9030:95	9030:95	5	ibuff
LEAF_NODE	9030:100	9030:100	3	)
LEAF_NODE	9031:2	9031:2	2	{
STATEMENTS	9032:2	9139:2	2	
SIMPLE_DECL	9032:2	9032:22	3	int shift_width ;
VAR_DECL	9032:2	9032:11	4	int shift_width
TYPE	9032:2	9032:2	5	int
TYPE_NAME	9032:2	9032:2	6	int
LEAF_NODE	9032:2	9032:2	7	int
NAME	9032:11	9032:11	5	shift_width
LEAF_NODE	9032:11	9032:11	6	shift_width
LEAF_NODE	9032:22	9032:22	4	;
SIMPLE_DECL	9033:2	9033:44	3	uint32 bytes_per_pixel , uint32 bytes_per_sample ;
INIT_DECL_LIST	9033:2	9033:2	4	uint32 bytes_per_pixel , uint32 bytes_per_sample
VAR_DECL	9033:2	9033:11	5	uint32 bytes_per_pixel
TYPE	9033:2	9033:2	6	uint32
TYPE_NAME	9033:2	9033:2	7	uint32
LEAF_NODE	9033:2	9033:2	8	uint32
NAME	9033:11	9033:11	6	bytes_per_pixel
LEAF_NODE	9033:11	9033:11	7	bytes_per_pixel
LEAF_NODE	9033:26	9033:26	5	,
VAR_DECL	9033:2	9033:28	5	uint32 bytes_per_sample
TYPE	9033:2	9033:2	6	uint32
TYPE_NAME	9033:2	9033:2	7	uint32
LEAF_NODE	9033:2	9033:2	8	uint32
NAME	9033:28	9033:28	6	bytes_per_sample
LEAF_NODE	9033:28	9033:28	7	bytes_per_sample
LEAF_NODE	9033:44	9033:44	4	;
SIMPLE_DECL	9034:2	9034:35	3	uint32 row , uint32 rowsize , uint32 row_offset ;
INIT_DECL_LIST	9034:2	9034:2	4	uint32 row , uint32 rowsize , uint32 row_offset
VAR_DECL	9034:2	9034:11	5	uint32 row
TYPE	9034:2	9034:2	6	uint32
TYPE_NAME	9034:2	9034:2	7	uint32
LEAF_NODE	9034:2	9034:2	8	uint32
NAME	9034:11	9034:11	6	row
LEAF_NODE	9034:11	9034:11	7	row
LEAF_NODE	9034:14	9034:14	5	,
INIT_DECL_LIST	9034:2	9034:2	5	uint32 rowsize , uint32 row_offset
VAR_DECL	9034:2	9034:16	6	uint32 rowsize
TYPE	9034:2	9034:2	7	uint32
TYPE_NAME	9034:2	9034:2	8	uint32
LEAF_NODE	9034:2	9034:2	9	uint32
NAME	9034:16	9034:16	7	rowsize
LEAF_NODE	9034:16	9034:16	8	rowsize
LEAF_NODE	9034:23	9034:23	6	,
VAR_DECL	9034:2	9034:25	6	uint32 row_offset
TYPE	9034:2	9034:2	7	uint32
TYPE_NAME	9034:2	9034:2	8	uint32
LEAF_NODE	9034:2	9034:2	9	uint32
NAME	9034:25	9034:25	7	row_offset
LEAF_NODE	9034:25	9034:25	8	row_offset
LEAF_NODE	9034:35	9034:35	4	;
SIMPLE_DECL	9035:2	9035:33	3	unsigned char * line_buff ; line_buff = NULL ;
VAR_DECL	9035:2	9035:17	4	unsigned char * line_buff ; line_buff = NULL
TYPE	9035:2	9035:16	5	unsigned char *
TYPE_NAME	9035:2	9035:11	6	unsigned char
LEAF_NODE	9035:2	9035:2	7	unsigned
LEAF_NODE	9035:11	9035:11	7	char
POINTER	9035:16	9035:16	6	*
LEAF_NODE	9035:16	9035:16	7	*
NAME	9035:17	9035:17	5	line_buff
LEAF_NODE	9035:17	9035:17	6	line_buff
LEAF_NODE	0:0	0:0	5	;
INIT	9035:17	9035:17	5	line_buff = NULL
ASSIGN	9035:17	9035:29	6	line_buff = NULL
LVAL	9035:17	9035:17	7	line_buff
NAME	9035:17	9035:17	8	line_buff
LEAF_NODE	9035:17	9035:17	9	line_buff
ASSIGN_OP	9035:27	9035:27	7	=
LEAF_NODE	9035:27	9035:27	8	=
RVAL	9035:29	9035:29	7	NULL
FIELD	9035:29	9035:29	8	NULL
LEAF_NODE	9035:29	9035:29	9	NULL
LEAF_NODE	9035:33	9035:33	4	;
SIMPLE_DECL	9036:2	9036:20	3	unsigned char * src ;
VAR_DECL	9036:2	9036:17	4	unsigned char * src
TYPE	9036:2	9036:16	5	unsigned char *
TYPE_NAME	9036:2	9036:11	6	unsigned char
LEAF_NODE	9036:2	9036:2	7	unsigned
LEAF_NODE	9036:11	9036:11	7	char
POINTER	9036:16	9036:16	6	*
LEAF_NODE	9036:16	9036:16	7	*
NAME	9036:17	9036:17	5	src
LEAF_NODE	9036:17	9036:17	6	src
LEAF_NODE	9036:20	9036:20	4	;
SIMPLE_DECL	9037:2	9037:20	3	unsigned char * dst ;
VAR_DECL	9037:2	9037:17	4	unsigned char * dst
TYPE	9037:2	9037:16	5	unsigned char *
TYPE_NAME	9037:2	9037:11	6	unsigned char
LEAF_NODE	9037:2	9037:2	7	unsigned
LEAF_NODE	9037:11	9037:11	7	char
POINTER	9037:16	9037:16	6	*
LEAF_NODE	9037:16	9037:16	7	*
NAME	9037:17	9037:17	5	dst
LEAF_NODE	9037:17	9037:17	6	dst
LEAF_NODE	9037:20	9037:20	4	;
EXPR_STATEMENT	9039:2	9039:13	3	src = ibuff ;
EXPR	9039:2	9039:2	4	src = ibuff
ASSIGN	9039:2	9039:8	5	src = ibuff
LVAL	9039:2	9039:2	6	src
FIELD	9039:2	9039:2	7	src
LEAF_NODE	9039:2	9039:2	8	src
ASSIGN_OP	9039:6	9039:6	6	=
LEAF_NODE	9039:6	9039:6	7	=
RVAL	9039:8	9039:8	6	ibuff
FIELD	9039:8	9039:8	7	ibuff
LEAF_NODE	9039:8	9039:8	8	ibuff
LEAF_NODE	9039:13	9039:13	4	;
LEAF_NODE	9040:2	9040:2	3	rowsize
LEAF_NODE	9040:10	9040:10	3	=
LEAF_NODE	9040:12	9040:12	3	(
LEAF_NODE	9040:13	9040:13	3	(
LEAF_NODE	9040:14	9040:14	3	width
LEAF_NODE	9040:20	9040:20	3	*
LEAF_NODE	9040:22	9040:22	3	bps
LEAF_NODE	9040:26	9040:26	3	*
LEAF_NODE	9040:28	9040:28	3	spp
LEAF_NODE	9040:31	9040:31	3	)
LEAF_NODE	9040:33	9040:33	3	+
LEAF_NODE	9040:35	9040:35	3	7
LEAF_NODE	9040:36	9040:36	3	)
LEAF_NODE	9040:38	9040:38	3	/
EXPR_STATEMENT	9040:40	9040:41	3	8 ;
EXPR	9040:40	9040:40	4	8
FIELD	9040:40	9040:40	5	8
LEAF_NODE	9040:40	9040:40	6	8
LEAF_NODE	9040:41	9040:41	4	;
SELECTION	9041:2	9042:4	3	
KEYWORD	9041:2	9041:2	4	switch
LEAF_NODE	9041:2	9041:2	5	switch
LEAF_NODE	9041:9	9041:9	4	(
CONDITION	9041:10	9041:10	4	mirror
EXPR	9041:10	9041:10	5	mirror
FIELD	9041:10	9041:10	6	mirror
LEAF_NODE	9041:10	9041:10	7	mirror
LEAF_NODE	9041:16	9041:16	4	)
STATEMENTS	9042:4	9137:4	4	
LEAF_NODE	9042:4	9042:4	5	{
STATEMENTS	9043:4	9136:13	5	
LABEL	9043:4	9043:20	6	case MIRROR_BOTH :
LEAF_NODE	9043:4	9043:4	7	case
LEAF_NODE	9043:9	9043:9	7	MIRROR_BOTH
LEAF_NODE	9043:20	9043:20	7	:
LABEL	9044:4	9044:20	6	case MIRROR_VERT :
LEAF_NODE	9044:4	9044:4	7	case
LEAF_NODE	9044:9	9044:9	7	MIRROR_VERT
LEAF_NODE	9044:20	9044:20	7	:
EXPR_STATEMENT	9045:13	9045:62	6	line_buff = ( unsigned char * ) _TIFFmalloc ( rowsize ) ;
EXPR	9045:13	9045:13	7	line_buff = ( unsigned char * ) _TIFFmalloc ( rowsize )
ASSIGN	9045:13	9045:25	8	line_buff = ( unsigned char * ) _TIFFmalloc ( rowsize )
LVAL	9045:13	9045:13	9	line_buff
FIELD	9045:13	9045:13	10	line_buff
LEAF_NODE	9045:13	9045:13	11	line_buff
ASSIGN_OP	9045:23	9045:23	9	=
LEAF_NODE	9045:23	9045:23	10	=
RVAL	9045:25	9045:42	9	( unsigned char * ) _TIFFmalloc ( rowsize )
LEAF_NODE	9045:25	9045:25	10	(
TYPE_NAME	9045:26	9045:35	10	unsigned char
LEAF_NODE	9045:26	9045:26	11	unsigned
LEAF_NODE	9045:35	9045:35	11	char
LEAF_NODE	9045:40	9045:40	10	*
LEAF_NODE	9045:41	9045:41	10	)
FUNCTION_CALL	9045:42	9045:61	10	_TIFFmalloc ( rowsize )
CALLEE	9045:42	9045:42	11	_TIFFmalloc
LEAF_NODE	9045:42	9045:42	12	_TIFFmalloc
LEAF_NODE	9045:53	9045:53	11	(
ARGUMENT	9045:54	9045:54	11	rowsize
FIELD	9045:54	9045:54	12	rowsize
LEAF_NODE	9045:54	9045:54	13	rowsize
LEAF_NODE	9045:61	9045:61	11	)
LEAF_NODE	9045:62	9045:62	7	;
SELECTION	9046:13	9047:15	6	
KEYWORD	9046:13	9046:13	7	if
LEAF_NODE	9046:13	9046:13	8	if
LEAF_NODE	9046:16	9046:16	7	(
CONDITION	9046:17	9046:17	7	line_buff == NULL
EXPR	9046:17	9046:30	8	line_buff == NULL
FIELD	9046:17	9046:17	9	line_buff
LEAF_NODE	9046:17	9046:17	10	line_buff
EQ_OPERATOR	9046:27	9046:27	9	==
LEAF_NODE	9046:27	9046:27	10	==
FIELD	9046:30	9046:30	9	NULL
LEAF_NODE	9046:30	9046:30	10	NULL
LEAF_NODE	9046:34	9046:34	7	)
STATEMENTS	9047:15	9050:15	7	
LEAF_NODE	9047:15	9047:15	8	{
STATEMENTS	9048:8	9049:15	8	
EXPR_STATEMENT	9048:8	9048:96	9	TIFFError ( "mirrorImage" , "Unable to allocate mirror line buffer of %1u bytes" , rowsize ) ;
EXPR	9048:8	9048:8	10	TIFFError ( "mirrorImage" , "Unable to allocate mirror line buffer of %1u bytes" , rowsize )
FUNCTION_CALL	9048:8	9048:95	11	TIFFError ( "mirrorImage" , "Unable to allocate mirror line buffer of %1u bytes" , rowsize )
CALLEE	9048:8	9048:8	12	TIFFError
LEAF_NODE	9048:8	9048:8	13	TIFFError
LEAF_NODE	9048:18	9048:18	12	(
ARGUMENT	9048:19	9048:19	12	"mirrorImage"
FIELD	9048:19	9048:19	13	"mirrorImage"
LEAF_NODE	9048:19	9048:19	14	"mirrorImage"
LEAF_NODE	9048:32	9048:32	12	,
ARGUMENT	9048:34	9048:34	12	"Unable to allocate mirror line buffer of %1u bytes"
FIELD	9048:34	9048:34	13	"Unable to allocate mirror line buffer of %1u bytes"
LEAF_NODE	9048:34	9048:34	14	"Unable to allocate mirror line buffer of %1u bytes"
LEAF_NODE	9048:86	9048:86	12	,
ARGUMENT	9048:88	9048:88	12	rowsize
FIELD	9048:88	9048:88	13	rowsize
LEAF_NODE	9048:88	9048:88	14	rowsize
LEAF_NODE	9048:95	9048:95	12	)
LEAF_NODE	9048:96	9048:96	10	;
JUMP_STATEMENT	9049:15	9049:26	9	return ( - 1 ) ;
KEYWORD	9049:15	9049:15	10	return
LEAF_NODE	9049:15	9049:15	11	return
DESTINATION	9049:22	9049:22	10	( - 1 )
EXPR	9049:22	9049:25	11	( - 1 )
LEAF_NODE	9049:22	9049:22	12	(
UNARY_EXPR	9049:23	9049:24	12	- 1
UNARY_OPERATOR	9049:23	9049:23	13	-
LEAF_NODE	9049:23	9049:23	14	-
FIELD	9049:24	9049:24	13	1
LEAF_NODE	9049:24	9049:24	14	1
LEAF_NODE	9049:25	9049:25	12	)
LEAF_NODE	9049:26	9049:26	10	;
LEAF_NODE	9050:15	9050:15	8	}
EXPR_STATEMENT	9052:13	9052:51	6	dst = ibuff + ( rowsize * ( length - 1 ) ) ;
EXPR	9052:13	9052:13	7	dst = ibuff + ( rowsize * ( length - 1 ) )
ASSIGN	9052:13	9052:19	8	dst = ibuff + ( rowsize * ( length - 1 ) )
LVAL	9052:13	9052:13	9	dst
FIELD	9052:13	9052:13	10	dst
LEAF_NODE	9052:13	9052:13	11	dst
ASSIGN_OP	9052:17	9052:17	9	=
LEAF_NODE	9052:17	9052:17	10	=
RVAL	9052:19	9052:50	9	ibuff + ( rowsize * ( length - 1 ) )
FIELD	9052:19	9052:19	10	ibuff
LEAF_NODE	9052:19	9052:19	11	ibuff
LEAF_NODE	9052:25	9052:25	10	+
LEAF_NODE	9052:27	9052:27	10	(
FIELD	9052:28	9052:28	10	rowsize
LEAF_NODE	9052:28	9052:28	11	rowsize
LEAF_NODE	9052:36	9052:36	10	*
LEAF_NODE	9052:38	9052:38	10	(
FIELD	9052:39	9052:39	10	length
LEAF_NODE	9052:39	9052:39	11	length
LEAF_NODE	9052:46	9052:46	10	-
FIELD	9052:48	9052:48	10	1
LEAF_NODE	9052:48	9052:48	11	1
LEAF_NODE	9052:49	9052:49	10	)
LEAF_NODE	9052:50	9052:50	10	)
LEAF_NODE	9052:51	9052:51	7	;
ITERATION	9053:13	9054:15	6	
KEYWORD	9053:13	9053:13	7	for
LEAF_NODE	9053:13	9053:13	8	for
LEAF_NODE	9053:17	9053:17	7	(
FOR_INIT	9053:18	9053:25	7	row = 0 ;
EXPR	9053:18	9053:18	8	row = 0
ASSIGN	9053:18	9053:24	9	row = 0
LVAL	9053:18	9053:18	10	row
FIELD	9053:18	9053:18	11	row
LEAF_NODE	9053:18	9053:18	12	row
ASSIGN_OP	9053:22	9053:22	10	=
LEAF_NODE	9053:22	9053:22	11	=
RVAL	9053:24	9053:24	10	0
FIELD	9053:24	9053:24	11	0
LEAF_NODE	9053:24	9053:24	12	0
LEAF_NODE	9053:25	9053:25	8	;
CONDITION	9053:27	9053:27	7	row < length / 2
EXPR	9053:27	9053:42	8	row < length / 2
FIELD	9053:27	9053:27	9	row
LEAF_NODE	9053:27	9053:27	10	row
REL_OPERATOR	9053:31	9053:31	9	<
LEAF_NODE	9053:31	9053:31	10	<
FIELD	9053:33	9053:33	9	length
LEAF_NODE	9053:33	9053:33	10	length
LEAF_NODE	9053:40	9053:40	9	/
FIELD	9053:42	9053:42	9	2
LEAF_NODE	9053:42	9053:42	10	2
LEAF_NODE	9053:43	9053:43	7	;
FOR_EXPR	9053:45	9053:45	7	row ++
EXPR	9053:45	9053:45	8	row ++
FIELD	9053:45	9053:48	9	row ++
LEAF_NODE	9053:45	9053:45	10	row
LEAF_NODE	9053:48	9053:48	10	++
LEAF_NODE	9053:50	9053:50	7	)
STATEMENTS	9054:15	9060:15	7	
LEAF_NODE	9054:15	9054:15	8	{
STATEMENTS	9055:7	9059:31	8	
EXPR_STATEMENT	9055:7	9055:43	9	_TIFFmemcpy ( line_buff , src , rowsize ) ;
EXPR	9055:7	9055:7	10	_TIFFmemcpy ( line_buff , src , rowsize )
FUNCTION_CALL	9055:7	9055:42	11	_TIFFmemcpy ( line_buff , src , rowsize )
CALLEE	9055:7	9055:7	12	_TIFFmemcpy
LEAF_NODE	9055:7	9055:7	13	_TIFFmemcpy
LEAF_NODE	9055:18	9055:18	12	(
ARGUMENT	9055:19	9055:19	12	line_buff
FIELD	9055:19	9055:19	13	line_buff
LEAF_NODE	9055:19	9055:19	14	line_buff
LEAF_NODE	9055:28	9055:28	12	,
ARGUMENT	9055:30	9055:30	12	src
FIELD	9055:30	9055:30	13	src
LEAF_NODE	9055:30	9055:30	14	src
LEAF_NODE	9055:33	9055:33	12	,
ARGUMENT	9055:35	9055:35	12	rowsize
FIELD	9055:35	9055:35	13	rowsize
LEAF_NODE	9055:35	9055:35	14	rowsize
LEAF_NODE	9055:42	9055:42	12	)
LEAF_NODE	9055:43	9055:43	10	;
EXPR_STATEMENT	9056:7	9056:38	9	_TIFFmemcpy ( src , dst , rowsize ) ;
EXPR	9056:7	9056:7	10	_TIFFmemcpy ( src , dst , rowsize )
FUNCTION_CALL	9056:7	9056:37	11	_TIFFmemcpy ( src , dst , rowsize )
CALLEE	9056:7	9056:7	12	_TIFFmemcpy
LEAF_NODE	9056:7	9056:7	13	_TIFFmemcpy
LEAF_NODE	9056:18	9056:18	12	(
ARGUMENT	9056:19	9056:19	12	src
FIELD	9056:19	9056:19	13	src
LEAF_NODE	9056:19	9056:19	14	src
LEAF_NODE	9056:22	9056:22	12	,
ARGUMENT	9056:24	9056:24	12	dst
FIELD	9056:24	9056:24	13	dst
LEAF_NODE	9056:24	9056:24	14	dst
LEAF_NODE	9056:27	9056:27	12	,
ARGUMENT	9056:30	9056:30	12	rowsize
FIELD	9056:30	9056:30	13	rowsize
LEAF_NODE	9056:30	9056:30	14	rowsize
LEAF_NODE	9056:37	9056:37	12	)
LEAF_NODE	9056:38	9056:38	10	;
EXPR_STATEMENT	9057:7	9057:43	9	_TIFFmemcpy ( dst , line_buff , rowsize ) ;
EXPR	9057:7	9057:7	10	_TIFFmemcpy ( dst , line_buff , rowsize )
FUNCTION_CALL	9057:7	9057:42	11	_TIFFmemcpy ( dst , line_buff , rowsize )
CALLEE	9057:7	9057:7	12	_TIFFmemcpy
LEAF_NODE	9057:7	9057:7	13	_TIFFmemcpy
LEAF_NODE	9057:18	9057:18	12	(
ARGUMENT	9057:19	9057:19	12	dst
FIELD	9057:19	9057:19	13	dst
LEAF_NODE	9057:19	9057:19	14	dst
LEAF_NODE	9057:22	9057:22	12	,
ARGUMENT	9057:24	9057:24	12	line_buff
FIELD	9057:24	9057:24	13	line_buff
LEAF_NODE	9057:24	9057:24	14	line_buff
LEAF_NODE	9057:33	9057:33	12	,
ARGUMENT	9057:35	9057:35	12	rowsize
FIELD	9057:35	9057:35	13	rowsize
LEAF_NODE	9057:35	9057:35	14	rowsize
LEAF_NODE	9057:42	9057:42	12	)
LEAF_NODE	9057:43	9057:43	10	;
LEAF_NODE	9058:15	9058:15	9	src
LEAF_NODE	9058:19	9058:19	9	+=
LEAF_NODE	9058:22	9058:22	9	(
LEAF_NODE	9058:23	9058:23	9	rowsize
LEAF_NODE	9058:30	9058:30	9	)
LEAF_NODE	9058:31	9058:31	9	;
LEAF_NODE	9059:15	9059:15	9	dst
LEAF_NODE	9059:19	9059:19	9	-=
LEAF_NODE	9059:22	9059:22	9	(
LEAF_NODE	9059:23	9059:23	9	rowsize
LEAF_NODE	9059:30	9059:30	9	)
LEAF_NODE	9059:31	9059:31	9	;
LEAF_NODE	9060:15	9060:15	8	}
SELECTION	9061:13	9062:15	6	
KEYWORD	9061:13	9061:13	7	if
LEAF_NODE	9061:13	9061:13	8	if
LEAF_NODE	9061:16	9061:16	7	(
CONDITION	9061:17	9061:17	7	line_buff
EXPR	9061:17	9061:17	8	line_buff
FIELD	9061:17	9061:17	9	line_buff
LEAF_NODE	9061:17	9061:17	10	line_buff
LEAF_NODE	9061:26	9061:26	7	)
STATEMENTS	9062:15	9062:15	7	
EXPR_STATEMENT	9062:15	9062:35	8	_TIFFfree ( line_buff ) ;
EXPR	9062:15	9062:15	9	_TIFFfree ( line_buff )
FUNCTION_CALL	9062:15	9062:34	10	_TIFFfree ( line_buff )
CALLEE	9062:15	9062:15	11	_TIFFfree
LEAF_NODE	9062:15	9062:15	12	_TIFFfree
LEAF_NODE	9062:24	9062:24	11	(
ARGUMENT	9062:25	9062:25	11	line_buff
FIELD	9062:25	9062:25	12	line_buff
LEAF_NODE	9062:25	9062:25	13	line_buff
LEAF_NODE	9062:34	9062:34	11	)
LEAF_NODE	9062:35	9062:35	9	;
SELECTION	9063:13	9064:15	6	
KEYWORD	9063:13	9063:13	7	if
LEAF_NODE	9063:13	9063:13	8	if
LEAF_NODE	9063:16	9063:16	7	(
CONDITION	9063:17	9063:17	7	mirror == MIRROR_VERT
EXPR	9063:17	9063:27	8	mirror == MIRROR_VERT
FIELD	9063:17	9063:17	9	mirror
LEAF_NODE	9063:17	9063:17	10	mirror
EQ_OPERATOR	9063:24	9063:24	9	==
LEAF_NODE	9063:24	9063:24	10	==
FIELD	9063:27	9063:27	9	MIRROR_VERT
LEAF_NODE	9063:27	9063:27	10	MIRROR_VERT
LEAF_NODE	9063:38	9063:38	7	)
STATEMENTS	9064:15	9064:15	7	
JUMP_STATEMENT	9064:15	9064:20	8	break DESTINATION ;
KEYWORD	9064:15	9064:15	9	break
LEAF_NODE	9064:15	9064:15	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	9064:20	9064:20	9	;
LABEL	9066:4	9066:22	6	case MIRROR_HORIZ :
LEAF_NODE	9066:4	9066:4	7	case
LEAF_NODE	9066:9	9066:9	7	MIRROR_HORIZ
LEAF_NODE	9066:22	9066:22	7	:
SELECTION	9067:14	9068:16	6	
KEYWORD	9067:14	9067:14	7	if
LEAF_NODE	9067:14	9067:14	8	if
LEAF_NODE	9067:17	9067:17	7	(
CONDITION	9067:18	9067:18	7	( bps % 8 ) == 0
EXPR	9067:18	9067:31	8	( bps % 8 ) == 0
LEAF_NODE	9067:18	9067:18	9	(
FIELD	9067:19	9067:19	9	bps
LEAF_NODE	9067:19	9067:19	10	bps
LEAF_NODE	9067:23	9067:23	9	%
FIELD	9067:25	9067:25	9	8
LEAF_NODE	9067:25	9067:25	10	8
LEAF_NODE	9067:26	9067:26	9	)
EQ_OPERATOR	9067:28	9067:28	9	==
LEAF_NODE	9067:28	9067:28	10	==
FIELD	9067:31	9067:31	9	0
LEAF_NODE	9067:31	9067:31	10	0
LEAF_NODE	9067:32	9067:32	7	)
STATEMENTS	9068:16	9079:2	7	
LEAF_NODE	9068:16	9068:16	8	{
STATEMENTS	9069:16	9069:16	8	
ITERATION	9069:16	9070:18	9	
KEYWORD	9069:16	9069:16	10	for
LEAF_NODE	9069:16	9069:16	11	for
LEAF_NODE	9069:20	9069:20	10	(
FOR_INIT	9069:21	9069:28	10	row = 0 ;
EXPR	9069:21	9069:21	11	row = 0
ASSIGN	9069:21	9069:27	12	row = 0
LVAL	9069:21	9069:21	13	row
FIELD	9069:21	9069:21	14	row
LEAF_NODE	9069:21	9069:21	15	row
ASSIGN_OP	9069:25	9069:25	13	=
LEAF_NODE	9069:25	9069:25	14	=
RVAL	9069:27	9069:27	13	0
FIELD	9069:27	9069:27	14	0
LEAF_NODE	9069:27	9069:27	15	0
LEAF_NODE	9069:28	9069:28	11	;
CONDITION	9069:30	9069:30	10	row < length
EXPR	9069:30	9069:36	11	row < length
FIELD	9069:30	9069:30	12	row
LEAF_NODE	9069:30	9069:30	13	row
REL_OPERATOR	9069:34	9069:34	12	<
LEAF_NODE	9069:34	9069:34	13	<
FIELD	9069:36	9069:36	12	length
LEAF_NODE	9069:36	9069:36	13	length
LEAF_NODE	9069:42	9069:42	10	;
FOR_EXPR	9069:44	9069:44	10	row ++
EXPR	9069:44	9069:44	11	row ++
FIELD	9069:44	9069:47	12	row ++
LEAF_NODE	9069:44	9069:44	13	row
LEAF_NODE	9069:47	9069:47	13	++
LEAF_NODE	9069:49	9069:49	10	)
STATEMENTS	9070:18	9078:4	10	
LEAF_NODE	9070:18	9070:18	11	{
STATEMENTS	9071:4	9074:18	11	
EXPR_STATEMENT	9071:4	9071:30	12	row_offset = row * rowsize ;
EXPR	9071:4	9071:4	13	row_offset = row * rowsize
ASSIGN	9071:4	9071:17	14	row_offset = row * rowsize
LVAL	9071:4	9071:4	15	row_offset
FIELD	9071:4	9071:4	16	row_offset
LEAF_NODE	9071:4	9071:4	17	row_offset
ASSIGN_OP	9071:15	9071:15	15	=
LEAF_NODE	9071:15	9071:15	16	=
RVAL	9071:17	9071:23	15	row * rowsize
FIELD	9071:17	9071:17	16	row
LEAF_NODE	9071:17	9071:17	17	row
LEAF_NODE	9071:21	9071:21	16	*
FIELD	9071:23	9071:23	16	rowsize
LEAF_NODE	9071:23	9071:23	17	rowsize
LEAF_NODE	9071:30	9071:30	13	;
EXPR_STATEMENT	9072:18	9072:42	12	src = ibuff + row_offset ;
EXPR	9072:18	9072:18	13	src = ibuff + row_offset
ASSIGN	9072:18	9072:24	14	src = ibuff + row_offset
LVAL	9072:18	9072:18	15	src
FIELD	9072:18	9072:18	16	src
LEAF_NODE	9072:18	9072:18	17	src
ASSIGN_OP	9072:22	9072:22	15	=
LEAF_NODE	9072:22	9072:22	16	=
RVAL	9072:24	9072:32	15	ibuff + row_offset
FIELD	9072:24	9072:24	16	ibuff
LEAF_NODE	9072:24	9072:24	17	ibuff
LEAF_NODE	9072:30	9072:30	16	+
FIELD	9072:32	9072:32	16	row_offset
LEAF_NODE	9072:32	9072:32	17	row_offset
LEAF_NODE	9072:42	9072:42	13	;
EXPR_STATEMENT	9073:18	9073:52	12	dst = ibuff + row_offset + rowsize ;
EXPR	9073:18	9073:18	13	dst = ibuff + row_offset + rowsize
ASSIGN	9073:18	9073:24	14	dst = ibuff + row_offset + rowsize
LVAL	9073:18	9073:18	15	dst
FIELD	9073:18	9073:18	16	dst
LEAF_NODE	9073:18	9073:18	17	dst
ASSIGN_OP	9073:22	9073:22	15	=
LEAF_NODE	9073:22	9073:22	16	=
RVAL	9073:24	9073:45	15	ibuff + row_offset + rowsize
FIELD	9073:24	9073:24	16	ibuff
LEAF_NODE	9073:24	9073:24	17	ibuff
LEAF_NODE	9073:30	9073:30	16	+
FIELD	9073:32	9073:32	16	row_offset
LEAF_NODE	9073:32	9073:32	17	row_offset
LEAF_NODE	9073:43	9073:43	16	+
FIELD	9073:45	9073:45	16	rowsize
LEAF_NODE	9073:45	9073:45	17	rowsize
LEAF_NODE	9073:52	9073:52	13	;
SELECTION	9074:18	9075:20	12	
KEYWORD	9074:18	9074:18	13	if
LEAF_NODE	9074:18	9074:18	14	if
LEAF_NODE	9074:21	9074:21	13	(
CONDITION	9074:22	9074:22	13	reverseSamplesBytes ( spp , bps , width , src , dst )
EXPR	9074:22	9074:22	14	reverseSamplesBytes ( spp , bps , width , src , dst )
FUNCTION_CALL	9074:22	9074:67	15	reverseSamplesBytes ( spp , bps , width , src , dst )
CALLEE	9074:22	9074:22	16	reverseSamplesBytes
LEAF_NODE	9074:22	9074:22	17	reverseSamplesBytes
LEAF_NODE	9074:41	9074:41	16	(
ARGUMENT	9074:42	9074:42	16	spp
FIELD	9074:42	9074:42	17	spp
LEAF_NODE	9074:42	9074:42	18	spp
LEAF_NODE	9074:45	9074:45	16	,
ARGUMENT	9074:47	9074:47	16	bps
FIELD	9074:47	9074:47	17	bps
LEAF_NODE	9074:47	9074:47	18	bps
LEAF_NODE	9074:50	9074:50	16	,
ARGUMENT	9074:52	9074:52	16	width
FIELD	9074:52	9074:52	17	width
LEAF_NODE	9074:52	9074:52	18	width
LEAF_NODE	9074:57	9074:57	16	,
ARGUMENT	9074:59	9074:59	16	src
FIELD	9074:59	9074:59	17	src
LEAF_NODE	9074:59	9074:59	18	src
LEAF_NODE	9074:62	9074:62	16	,
ARGUMENT	9074:64	9074:64	16	dst
FIELD	9074:64	9074:64	17	dst
LEAF_NODE	9074:64	9074:64	18	dst
LEAF_NODE	9074:67	9074:67	16	)
LEAF_NODE	9074:68	9074:68	13	)
STATEMENTS	9075:20	9077:20	13	
LEAF_NODE	9075:20	9075:20	14	{
STATEMENTS	9076:6	9076:6	14	
JUMP_STATEMENT	9076:6	9076:17	15	return ( - 1 ) ;
KEYWORD	9076:6	9076:6	16	return
LEAF_NODE	9076:6	9076:6	17	return
DESTINATION	9076:13	9076:13	16	( - 1 )
EXPR	9076:13	9076:16	17	( - 1 )
LEAF_NODE	9076:13	9076:13	18	(
UNARY_EXPR	9076:14	9076:15	18	- 1
UNARY_OPERATOR	9076:14	9076:14	19	-
LEAF_NODE	9076:14	9076:14	20	-
FIELD	9076:15	9076:15	19	1
LEAF_NODE	9076:15	9076:15	20	1
LEAF_NODE	9076:16	9076:16	18	)
LEAF_NODE	9076:17	9076:17	16	;
LEAF_NODE	9077:20	9077:20	14	}
LEAF_NODE	9078:4	9078:4	11	}
LEAF_NODE	9079:2	9079:2	8	}
SELECTION	9080:7	9081:16	6	
KEYWORD	9080:7	9080:7	7	else
LEAF_NODE	9080:7	9080:7	8	else
STATEMENTS	9081:16	9131:2	7	
LEAF_NODE	9081:16	9081:16	8	{
STATEMENTS	9082:16	9129:16	8	
SELECTION	9082:16	9083:18	9	
KEYWORD	9082:16	9082:16	10	if
LEAF_NODE	9082:16	9082:16	11	if
LEAF_NODE	9082:19	9082:19	10	(
CONDITION	9082:20	9082:20	10	! ( line_buff = ( unsigned char * ) _TIFFmalloc ( rowsize + 1 ) )
EXPR	9082:20	9082:20	11	! ( line_buff = ( unsigned char * ) _TIFFmalloc ( rowsize + 1 ) )
UNARY_EXPR	9082:20	9082:75	12	! ( line_buff = ( unsigned char * ) _TIFFmalloc ( rowsize + 1 ) )
UNARY_OPERATOR	9082:20	9082:20	13	!
LEAF_NODE	9082:20	9082:20	14	!
LEAF_NODE	9082:21	9082:21	13	(
ASSIGN	9082:22	9082:34	13	line_buff = ( unsigned char * ) _TIFFmalloc ( rowsize + 1 )
LVAL	9082:22	9082:22	14	line_buff
FIELD	9082:22	9082:22	15	line_buff
LEAF_NODE	9082:22	9082:22	16	line_buff
ASSIGN_OP	9082:32	9082:32	14	=
LEAF_NODE	9082:32	9082:32	15	=
RVAL	9082:34	9082:51	14	( unsigned char * ) _TIFFmalloc ( rowsize + 1 )
LEAF_NODE	9082:34	9082:34	15	(
TYPE_NAME	9082:35	9082:44	15	unsigned char
LEAF_NODE	9082:35	9082:35	16	unsigned
LEAF_NODE	9082:44	9082:44	16	char
LEAF_NODE	9082:49	9082:49	15	*
LEAF_NODE	9082:50	9082:50	15	)
FUNCTION_CALL	9082:51	9082:74	15	_TIFFmalloc ( rowsize + 1 )
CALLEE	9082:51	9082:51	16	_TIFFmalloc
LEAF_NODE	9082:51	9082:51	17	_TIFFmalloc
LEAF_NODE	9082:62	9082:62	16	(
ARGUMENT	9082:63	9082:73	16	rowsize + 1
FIELD	9082:63	9082:63	17	rowsize
LEAF_NODE	9082:63	9082:63	18	rowsize
LEAF_NODE	9082:71	9082:71	17	+
FIELD	9082:73	9082:73	17	1
LEAF_NODE	9082:73	9082:73	18	1
LEAF_NODE	9082:74	9082:74	16	)
LEAF_NODE	9082:75	9082:75	13	)
LEAF_NODE	9082:76	9082:76	10	)
STATEMENTS	9083:18	9086:18	10	
LEAF_NODE	9083:18	9083:18	11	{
STATEMENTS	9084:18	9085:18	11	
EXPR_STATEMENT	9084:18	9084:83	12	TIFFError ( "mirrorImage" , "Unable to allocate mirror line buffer" ) ;
EXPR	9084:18	9084:18	13	TIFFError ( "mirrorImage" , "Unable to allocate mirror line buffer" )
FUNCTION_CALL	9084:18	9084:82	14	TIFFError ( "mirrorImage" , "Unable to allocate mirror line buffer" )
CALLEE	9084:18	9084:18	15	TIFFError
LEAF_NODE	9084:18	9084:18	16	TIFFError
LEAF_NODE	9084:27	9084:27	15	(
ARGUMENT	9084:28	9084:28	15	"mirrorImage"
FIELD	9084:28	9084:28	16	"mirrorImage"
LEAF_NODE	9084:28	9084:28	17	"mirrorImage"
LEAF_NODE	9084:41	9084:41	15	,
ARGUMENT	9084:43	9084:43	15	"Unable to allocate mirror line buffer"
FIELD	9084:43	9084:43	16	"Unable to allocate mirror line buffer"
LEAF_NODE	9084:43	9084:43	17	"Unable to allocate mirror line buffer"
LEAF_NODE	9084:82	9084:82	15	)
LEAF_NODE	9084:83	9084:83	13	;
JUMP_STATEMENT	9085:18	9085:29	12	return ( - 1 ) ;
KEYWORD	9085:18	9085:18	13	return
LEAF_NODE	9085:18	9085:18	14	return
DESTINATION	9085:25	9085:25	13	( - 1 )
EXPR	9085:25	9085:28	14	( - 1 )
LEAF_NODE	9085:25	9085:25	15	(
UNARY_EXPR	9085:26	9085:27	15	- 1
UNARY_OPERATOR	9085:26	9085:26	16	-
LEAF_NODE	9085:26	9085:26	17	-
FIELD	9085:27	9085:27	16	1
LEAF_NODE	9085:27	9085:27	17	1
LEAF_NODE	9085:28	9085:28	15	)
LEAF_NODE	9085:29	9085:29	13	;
LEAF_NODE	9086:18	9086:18	11	}
EXPR_STATEMENT	9087:16	9087:48	9	bytes_per_sample = ( bps + 7 ) / 8 ;
EXPR	9087:16	9087:16	10	bytes_per_sample = ( bps + 7 ) / 8
ASSIGN	9087:16	9087:35	11	bytes_per_sample = ( bps + 7 ) / 8
LVAL	9087:16	9087:16	12	bytes_per_sample
FIELD	9087:16	9087:16	13	bytes_per_sample
LEAF_NODE	9087:16	9087:16	14	bytes_per_sample
ASSIGN_OP	9087:33	9087:33	12	=
LEAF_NODE	9087:33	9087:33	13	=
RVAL	9087:35	9087:47	12	( bps + 7 ) / 8
LEAF_NODE	9087:35	9087:35	13	(
FIELD	9087:36	9087:36	13	bps
LEAF_NODE	9087:36	9087:36	14	bps
LEAF_NODE	9087:40	9087:40	13	+
FIELD	9087:42	9087:42	13	7
LEAF_NODE	9087:42	9087:42	14	7
LEAF_NODE	9087:43	9087:43	13	)
LEAF_NODE	9087:45	9087:45	13	/
FIELD	9087:47	9087:47	13	8
LEAF_NODE	9087:47	9087:47	14	8
LEAF_NODE	9087:48	9087:48	10	;
EXPR_STATEMENT	9088:16	9088:56	9	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ;
EXPR	9088:16	9088:16	10	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
ASSIGN	9088:16	9088:35	11	bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8
LVAL	9088:16	9088:16	12	bytes_per_pixel
FIELD	9088:16	9088:16	13	bytes_per_pixel
LEAF_NODE	9088:16	9088:16	14	bytes_per_pixel
ASSIGN_OP	9088:33	9088:33	12	=
LEAF_NODE	9088:33	9088:33	13	=
RVAL	9088:35	9088:55	12	( ( bps * spp ) + 7 ) / 8
LEAF_NODE	9088:35	9088:35	13	(
LEAF_NODE	9088:36	9088:36	13	(
FIELD	9088:37	9088:37	13	bps
LEAF_NODE	9088:37	9088:37	14	bps
LEAF_NODE	9088:41	9088:41	13	*
FIELD	9088:43	9088:43	13	spp
LEAF_NODE	9088:43	9088:43	14	spp
LEAF_NODE	9088:46	9088:46	13	)
LEAF_NODE	9088:48	9088:48	13	+
FIELD	9088:50	9088:50	13	7
LEAF_NODE	9088:50	9088:50	14	7
LEAF_NODE	9088:51	9088:51	13	)
LEAF_NODE	9088:53	9088:53	13	/
FIELD	9088:55	9088:55	13	8
LEAF_NODE	9088:55	9088:55	14	8
LEAF_NODE	9088:56	9088:56	10	;
SELECTION	9089:16	9090:18	9	
KEYWORD	9089:16	9089:16	10	if
LEAF_NODE	9089:16	9089:16	11	if
LEAF_NODE	9089:19	9089:19	10	(
CONDITION	9089:20	9089:20	10	bytes_per_pixel < ( bytes_per_sample + 1 )
EXPR	9089:20	9089:59	11	bytes_per_pixel < ( bytes_per_sample + 1 )
FIELD	9089:20	9089:20	12	bytes_per_pixel
LEAF_NODE	9089:20	9089:20	13	bytes_per_pixel
REL_OPERATOR	9089:36	9089:36	12	<
LEAF_NODE	9089:36	9089:36	13	<
LEAF_NODE	9089:38	9089:38	12	(
FIELD	9089:39	9089:39	12	bytes_per_sample
LEAF_NODE	9089:39	9089:39	13	bytes_per_sample
LEAF_NODE	9089:56	9089:56	12	+
FIELD	9089:58	9089:58	12	1
LEAF_NODE	9089:58	9089:58	13	1
LEAF_NODE	9089:59	9089:59	12	)
LEAF_NODE	9089:60	9089:60	10	)
STATEMENTS	9090:18	9090:18	10	
EXPR_STATEMENT	9090:18	9090:47	11	shift_width = bytes_per_pixel ;
EXPR	9090:18	9090:18	12	shift_width = bytes_per_pixel
ASSIGN	9090:18	9090:32	13	shift_width = bytes_per_pixel
LVAL	9090:18	9090:18	14	shift_width
FIELD	9090:18	9090:18	15	shift_width
LEAF_NODE	9090:18	9090:18	16	shift_width
ASSIGN_OP	9090:30	9090:30	14	=
LEAF_NODE	9090:30	9090:30	15	=
RVAL	9090:32	9090:32	14	bytes_per_pixel
FIELD	9090:32	9090:32	15	bytes_per_pixel
LEAF_NODE	9090:32	9090:32	16	bytes_per_pixel
LEAF_NODE	9090:47	9090:47	12	;
SELECTION	9091:16	9092:18	9	
KEYWORD	9091:16	9091:16	10	else
LEAF_NODE	9091:16	9091:16	11	else
STATEMENTS	9092:18	9092:18	10	
EXPR_STATEMENT	9092:18	9092:52	11	shift_width = bytes_per_sample + 1 ;
EXPR	9092:18	9092:18	12	shift_width = bytes_per_sample + 1
ASSIGN	9092:18	9092:32	13	shift_width = bytes_per_sample + 1
LVAL	9092:18	9092:18	14	shift_width
FIELD	9092:18	9092:18	15	shift_width
LEAF_NODE	9092:18	9092:18	16	shift_width
ASSIGN_OP	9092:30	9092:30	14	=
LEAF_NODE	9092:30	9092:30	15	=
RVAL	9092:32	9092:51	14	bytes_per_sample + 1
FIELD	9092:32	9092:32	15	bytes_per_sample
LEAF_NODE	9092:32	9092:32	16	bytes_per_sample
LEAF_NODE	9092:49	9092:49	15	+
FIELD	9092:51	9092:51	15	1
LEAF_NODE	9092:51	9092:51	16	1
LEAF_NODE	9092:52	9092:52	12	;
ITERATION	9094:16	9095:18	9	
KEYWORD	9094:16	9094:16	10	for
LEAF_NODE	9094:16	9094:16	11	for
LEAF_NODE	9094:20	9094:20	10	(
FOR_INIT	9094:21	9094:28	10	row = 0 ;
EXPR	9094:21	9094:21	11	row = 0
ASSIGN	9094:21	9094:27	12	row = 0
LVAL	9094:21	9094:21	13	row
FIELD	9094:21	9094:21	14	row
LEAF_NODE	9094:21	9094:21	15	row
ASSIGN_OP	9094:25	9094:25	13	=
LEAF_NODE	9094:25	9094:25	14	=
RVAL	9094:27	9094:27	13	0
FIELD	9094:27	9094:27	14	0
LEAF_NODE	9094:27	9094:27	15	0
LEAF_NODE	9094:28	9094:28	11	;
CONDITION	9094:30	9094:30	10	row < length
EXPR	9094:30	9094:36	11	row < length
FIELD	9094:30	9094:30	12	row
LEAF_NODE	9094:30	9094:30	13	row
REL_OPERATOR	9094:34	9094:34	12	<
LEAF_NODE	9094:34	9094:34	13	<
FIELD	9094:36	9094:36	12	length
LEAF_NODE	9094:36	9094:36	13	length
LEAF_NODE	9094:42	9094:42	10	;
FOR_EXPR	9094:44	9094:44	10	row ++
EXPR	9094:44	9094:44	11	row ++
FIELD	9094:44	9094:47	12	row ++
LEAF_NODE	9094:44	9094:44	13	row
LEAF_NODE	9094:47	9094:47	13	++
LEAF_NODE	9094:49	9094:49	10	)
STATEMENTS	9095:18	9128:4	10	
LEAF_NODE	9095:18	9095:18	11	{
STATEMENTS	9096:4	9099:18	11	
EXPR_STATEMENT	9096:4	9096:30	12	row_offset = row * rowsize ;
EXPR	9096:4	9096:4	13	row_offset = row * rowsize
ASSIGN	9096:4	9096:17	14	row_offset = row * rowsize
LVAL	9096:4	9096:4	15	row_offset
FIELD	9096:4	9096:4	16	row_offset
LEAF_NODE	9096:4	9096:4	17	row_offset
ASSIGN_OP	9096:15	9096:15	15	=
LEAF_NODE	9096:15	9096:15	16	=
RVAL	9096:17	9096:23	15	row * rowsize
FIELD	9096:17	9096:17	16	row
LEAF_NODE	9096:17	9096:17	17	row
LEAF_NODE	9096:21	9096:21	16	*
FIELD	9096:23	9096:23	16	rowsize
LEAF_NODE	9096:23	9096:23	17	rowsize
LEAF_NODE	9096:30	9096:30	13	;
EXPR_STATEMENT	9097:18	9097:42	12	src = ibuff + row_offset ;
EXPR	9097:18	9097:18	13	src = ibuff + row_offset
ASSIGN	9097:18	9097:24	14	src = ibuff + row_offset
LVAL	9097:18	9097:18	15	src
FIELD	9097:18	9097:18	16	src
LEAF_NODE	9097:18	9097:18	17	src
ASSIGN_OP	9097:22	9097:22	15	=
LEAF_NODE	9097:22	9097:22	16	=
RVAL	9097:24	9097:32	15	ibuff + row_offset
FIELD	9097:24	9097:24	16	ibuff
LEAF_NODE	9097:24	9097:24	17	ibuff
LEAF_NODE	9097:30	9097:30	16	+
FIELD	9097:32	9097:32	16	row_offset
LEAF_NODE	9097:32	9097:32	17	row_offset
LEAF_NODE	9097:42	9097:42	13	;
EXPR_STATEMENT	9098:18	9098:56	12	_TIFFmemset ( line_buff , '\0' , rowsize ) ;
EXPR	9098:18	9098:18	13	_TIFFmemset ( line_buff , '\0' , rowsize )
FUNCTION_CALL	9098:18	9098:55	14	_TIFFmemset ( line_buff , '\0' , rowsize )
CALLEE	9098:18	9098:18	15	_TIFFmemset
LEAF_NODE	9098:18	9098:18	16	_TIFFmemset
LEAF_NODE	9098:30	9098:30	15	(
ARGUMENT	9098:31	9098:31	15	line_buff
FIELD	9098:31	9098:31	16	line_buff
LEAF_NODE	9098:31	9098:31	17	line_buff
LEAF_NODE	9098:40	9098:40	15	,
ARGUMENT	9098:42	9098:42	15	'\0'
FIELD	9098:42	9098:42	16	'\0'
LEAF_NODE	9098:42	9098:42	17	'\0'
LEAF_NODE	9098:46	9098:46	15	,
ARGUMENT	9098:48	9098:48	15	rowsize
FIELD	9098:48	9098:48	16	rowsize
LEAF_NODE	9098:48	9098:48	17	rowsize
LEAF_NODE	9098:55	9098:55	15	)
LEAF_NODE	9098:56	9098:56	13	;
SELECTION	9099:18	9100:20	12	
KEYWORD	9099:18	9099:18	13	switch
LEAF_NODE	9099:18	9099:18	14	switch
LEAF_NODE	9099:25	9099:25	13	(
CONDITION	9099:26	9099:26	13	shift_width
EXPR	9099:26	9099:26	14	shift_width
FIELD	9099:26	9099:26	15	shift_width
LEAF_NODE	9099:26	9099:26	16	shift_width
LEAF_NODE	9099:37	9099:37	13	)
STATEMENTS	9100:20	9127:20	13	
LEAF_NODE	9100:20	9100:20	14	{
STATEMENTS	9101:20	9126:29	14	
LABEL	9101:20	9101:26	15	case 1 :
LEAF_NODE	9101:20	9101:20	16	case
LEAF_NODE	9101:25	9101:25	16	1
LEAF_NODE	9101:26	9101:26	16	:
SELECTION	9101:28	9102:30	15	
KEYWORD	9101:28	9101:28	16	if
LEAF_NODE	9101:28	9101:28	17	if
LEAF_NODE	9101:31	9101:31	16	(
CONDITION	9101:32	9101:32	16	reverseSamples16bits ( spp , bps , width , src , line_buff )
EXPR	9101:32	9101:32	17	reverseSamples16bits ( spp , bps , width , src , line_buff )
FUNCTION_CALL	9101:32	9101:84	18	reverseSamples16bits ( spp , bps , width , src , line_buff )
CALLEE	9101:32	9101:32	19	reverseSamples16bits
LEAF_NODE	9101:32	9101:32	20	reverseSamples16bits
LEAF_NODE	9101:52	9101:52	19	(
ARGUMENT	9101:53	9101:53	19	spp
FIELD	9101:53	9101:53	20	spp
LEAF_NODE	9101:53	9101:53	21	spp
LEAF_NODE	9101:56	9101:56	19	,
ARGUMENT	9101:58	9101:58	19	bps
FIELD	9101:58	9101:58	20	bps
LEAF_NODE	9101:58	9101:58	21	bps
LEAF_NODE	9101:61	9101:61	19	,
ARGUMENT	9101:63	9101:63	19	width
FIELD	9101:63	9101:63	20	width
LEAF_NODE	9101:63	9101:63	21	width
LEAF_NODE	9101:68	9101:68	19	,
ARGUMENT	9101:70	9101:70	19	src
FIELD	9101:70	9101:70	20	src
LEAF_NODE	9101:70	9101:70	21	src
LEAF_NODE	9101:73	9101:73	19	,
ARGUMENT	9101:75	9101:75	19	line_buff
FIELD	9101:75	9101:75	20	line_buff
LEAF_NODE	9101:75	9101:75	21	line_buff
LEAF_NODE	9101:84	9101:84	19	)
LEAF_NODE	9101:85	9101:85	16	)
STATEMENTS	9102:30	9105:30	16	
LEAF_NODE	9102:30	9102:30	17	{
STATEMENTS	9103:16	9104:30	17	
EXPR_STATEMENT	9103:16	9103:36	18	_TIFFfree ( line_buff ) ;
EXPR	9103:16	9103:16	19	_TIFFfree ( line_buff )
FUNCTION_CALL	9103:16	9103:35	20	_TIFFfree ( line_buff )
CALLEE	9103:16	9103:16	21	_TIFFfree
LEAF_NODE	9103:16	9103:16	22	_TIFFfree
LEAF_NODE	9103:25	9103:25	21	(
ARGUMENT	9103:26	9103:26	21	line_buff
FIELD	9103:26	9103:26	22	line_buff
LEAF_NODE	9103:26	9103:26	23	line_buff
LEAF_NODE	9103:35	9103:35	21	)
LEAF_NODE	9103:36	9103:36	19	;
JUMP_STATEMENT	9104:30	9104:41	18	return ( - 1 ) ;
KEYWORD	9104:30	9104:30	19	return
LEAF_NODE	9104:30	9104:30	20	return
DESTINATION	9104:37	9104:37	19	( - 1 )
EXPR	9104:37	9104:40	20	( - 1 )
LEAF_NODE	9104:37	9104:37	21	(
UNARY_EXPR	9104:38	9104:39	21	- 1
UNARY_OPERATOR	9104:38	9104:38	22	-
LEAF_NODE	9104:38	9104:38	23	-
FIELD	9104:39	9104:39	22	1
LEAF_NODE	9104:39	9104:39	23	1
LEAF_NODE	9104:40	9104:40	21	)
LEAF_NODE	9104:41	9104:41	19	;
LEAF_NODE	9105:30	9105:30	17	}
EXPR_STATEMENT	9106:29	9106:66	15	_TIFFmemcpy ( src , line_buff , rowsize ) ;
EXPR	9106:29	9106:29	16	_TIFFmemcpy ( src , line_buff , rowsize )
FUNCTION_CALL	9106:29	9106:65	17	_TIFFmemcpy ( src , line_buff , rowsize )
CALLEE	9106:29	9106:29	18	_TIFFmemcpy
LEAF_NODE	9106:29	9106:29	19	_TIFFmemcpy
LEAF_NODE	9106:41	9106:41	18	(
ARGUMENT	9106:42	9106:42	18	src
FIELD	9106:42	9106:42	19	src
LEAF_NODE	9106:42	9106:42	20	src
LEAF_NODE	9106:45	9106:45	18	,
ARGUMENT	9106:47	9106:47	18	line_buff
FIELD	9106:47	9106:47	19	line_buff
LEAF_NODE	9106:47	9106:47	20	line_buff
LEAF_NODE	9106:56	9106:56	18	,
ARGUMENT	9106:58	9106:58	18	rowsize
FIELD	9106:58	9106:58	19	rowsize
LEAF_NODE	9106:58	9106:58	20	rowsize
LEAF_NODE	9106:65	9106:65	18	)
LEAF_NODE	9106:66	9106:66	16	;
JUMP_STATEMENT	9107:29	9107:34	15	break DESTINATION ;
KEYWORD	9107:29	9107:29	16	break
LEAF_NODE	9107:29	9107:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	9107:34	9107:34	16	;
LABEL	9108:20	9108:26	15	case 2 :
LEAF_NODE	9108:20	9108:20	16	case
LEAF_NODE	9108:25	9108:25	16	2
LEAF_NODE	9108:26	9108:26	16	:
SELECTION	9108:28	9109:30	15	
KEYWORD	9108:28	9108:28	16	if
LEAF_NODE	9108:28	9108:28	17	if
LEAF_NODE	9108:31	9108:31	16	(
CONDITION	9108:32	9108:32	16	reverseSamples24bits ( spp , bps , width , src , line_buff )
EXPR	9108:32	9108:32	17	reverseSamples24bits ( spp , bps , width , src , line_buff )
FUNCTION_CALL	9108:32	9108:84	18	reverseSamples24bits ( spp , bps , width , src , line_buff )
CALLEE	9108:32	9108:32	19	reverseSamples24bits
LEAF_NODE	9108:32	9108:32	20	reverseSamples24bits
LEAF_NODE	9108:52	9108:52	19	(
ARGUMENT	9108:53	9108:53	19	spp
FIELD	9108:53	9108:53	20	spp
LEAF_NODE	9108:53	9108:53	21	spp
LEAF_NODE	9108:56	9108:56	19	,
ARGUMENT	9108:58	9108:58	19	bps
FIELD	9108:58	9108:58	20	bps
LEAF_NODE	9108:58	9108:58	21	bps
LEAF_NODE	9108:61	9108:61	19	,
ARGUMENT	9108:63	9108:63	19	width
FIELD	9108:63	9108:63	20	width
LEAF_NODE	9108:63	9108:63	21	width
LEAF_NODE	9108:68	9108:68	19	,
ARGUMENT	9108:70	9108:70	19	src
FIELD	9108:70	9108:70	20	src
LEAF_NODE	9108:70	9108:70	21	src
LEAF_NODE	9108:73	9108:73	19	,
ARGUMENT	9108:75	9108:75	19	line_buff
FIELD	9108:75	9108:75	20	line_buff
LEAF_NODE	9108:75	9108:75	21	line_buff
LEAF_NODE	9108:84	9108:84	19	)
LEAF_NODE	9108:85	9108:85	16	)
STATEMENTS	9109:30	9112:30	16	
LEAF_NODE	9109:30	9109:30	17	{
STATEMENTS	9110:16	9111:30	17	
EXPR_STATEMENT	9110:16	9110:36	18	_TIFFfree ( line_buff ) ;
EXPR	9110:16	9110:16	19	_TIFFfree ( line_buff )
FUNCTION_CALL	9110:16	9110:35	20	_TIFFfree ( line_buff )
CALLEE	9110:16	9110:16	21	_TIFFfree
LEAF_NODE	9110:16	9110:16	22	_TIFFfree
LEAF_NODE	9110:25	9110:25	21	(
ARGUMENT	9110:26	9110:26	21	line_buff
FIELD	9110:26	9110:26	22	line_buff
LEAF_NODE	9110:26	9110:26	23	line_buff
LEAF_NODE	9110:35	9110:35	21	)
LEAF_NODE	9110:36	9110:36	19	;
JUMP_STATEMENT	9111:30	9111:41	18	return ( - 1 ) ;
KEYWORD	9111:30	9111:30	19	return
LEAF_NODE	9111:30	9111:30	20	return
DESTINATION	9111:37	9111:37	19	( - 1 )
EXPR	9111:37	9111:40	20	( - 1 )
LEAF_NODE	9111:37	9111:37	21	(
UNARY_EXPR	9111:38	9111:39	21	- 1
UNARY_OPERATOR	9111:38	9111:38	22	-
LEAF_NODE	9111:38	9111:38	23	-
FIELD	9111:39	9111:39	22	1
LEAF_NODE	9111:39	9111:39	23	1
LEAF_NODE	9111:40	9111:40	21	)
LEAF_NODE	9111:41	9111:41	19	;
LEAF_NODE	9112:30	9112:30	17	}
EXPR_STATEMENT	9113:29	9113:66	15	_TIFFmemcpy ( src , line_buff , rowsize ) ;
EXPR	9113:29	9113:29	16	_TIFFmemcpy ( src , line_buff , rowsize )
FUNCTION_CALL	9113:29	9113:65	17	_TIFFmemcpy ( src , line_buff , rowsize )
CALLEE	9113:29	9113:29	18	_TIFFmemcpy
LEAF_NODE	9113:29	9113:29	19	_TIFFmemcpy
LEAF_NODE	9113:41	9113:41	18	(
ARGUMENT	9113:42	9113:42	18	src
FIELD	9113:42	9113:42	19	src
LEAF_NODE	9113:42	9113:42	20	src
LEAF_NODE	9113:45	9113:45	18	,
ARGUMENT	9113:47	9113:47	18	line_buff
FIELD	9113:47	9113:47	19	line_buff
LEAF_NODE	9113:47	9113:47	20	line_buff
LEAF_NODE	9113:56	9113:56	18	,
ARGUMENT	9113:58	9113:58	18	rowsize
FIELD	9113:58	9113:58	19	rowsize
LEAF_NODE	9113:58	9113:58	20	rowsize
LEAF_NODE	9113:65	9113:65	18	)
LEAF_NODE	9113:66	9113:66	16	;
JUMP_STATEMENT	9114:29	9114:34	15	break DESTINATION ;
KEYWORD	9114:29	9114:29	16	break
LEAF_NODE	9114:29	9114:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	9114:34	9114:34	16	;
LABEL	9115:20	9115:26	15	case 3 :
LEAF_NODE	9115:20	9115:20	16	case
LEAF_NODE	9115:25	9115:25	16	3
LEAF_NODE	9115:26	9115:26	16	:
LABEL	9116:20	9116:26	15	case 4 :
LEAF_NODE	9116:20	9116:20	16	case
LEAF_NODE	9116:25	9116:25	16	4
LEAF_NODE	9116:26	9116:26	16	:
LABEL	9117:20	9117:26	15	case 5 :
LEAF_NODE	9117:20	9117:20	16	case
LEAF_NODE	9117:25	9117:25	16	5
LEAF_NODE	9117:26	9117:26	16	:
SELECTION	9117:28	9118:30	15	
KEYWORD	9117:28	9117:28	16	if
LEAF_NODE	9117:28	9117:28	17	if
LEAF_NODE	9117:31	9117:31	16	(
CONDITION	9117:32	9117:32	16	reverseSamples32bits ( spp , bps , width , src , line_buff )
EXPR	9117:32	9117:32	17	reverseSamples32bits ( spp , bps , width , src , line_buff )
FUNCTION_CALL	9117:32	9117:84	18	reverseSamples32bits ( spp , bps , width , src , line_buff )
CALLEE	9117:32	9117:32	19	reverseSamples32bits
LEAF_NODE	9117:32	9117:32	20	reverseSamples32bits
LEAF_NODE	9117:52	9117:52	19	(
ARGUMENT	9117:53	9117:53	19	spp
FIELD	9117:53	9117:53	20	spp
LEAF_NODE	9117:53	9117:53	21	spp
LEAF_NODE	9117:56	9117:56	19	,
ARGUMENT	9117:58	9117:58	19	bps
FIELD	9117:58	9117:58	20	bps
LEAF_NODE	9117:58	9117:58	21	bps
LEAF_NODE	9117:61	9117:61	19	,
ARGUMENT	9117:63	9117:63	19	width
FIELD	9117:63	9117:63	20	width
LEAF_NODE	9117:63	9117:63	21	width
LEAF_NODE	9117:68	9117:68	19	,
ARGUMENT	9117:70	9117:70	19	src
FIELD	9117:70	9117:70	20	src
LEAF_NODE	9117:70	9117:70	21	src
LEAF_NODE	9117:73	9117:73	19	,
ARGUMENT	9117:75	9117:75	19	line_buff
FIELD	9117:75	9117:75	20	line_buff
LEAF_NODE	9117:75	9117:75	21	line_buff
LEAF_NODE	9117:84	9117:84	19	)
LEAF_NODE	9117:85	9117:85	16	)
STATEMENTS	9118:30	9121:30	16	
LEAF_NODE	9118:30	9118:30	17	{
STATEMENTS	9119:16	9120:30	17	
EXPR_STATEMENT	9119:16	9119:36	18	_TIFFfree ( line_buff ) ;
EXPR	9119:16	9119:16	19	_TIFFfree ( line_buff )
FUNCTION_CALL	9119:16	9119:35	20	_TIFFfree ( line_buff )
CALLEE	9119:16	9119:16	21	_TIFFfree
LEAF_NODE	9119:16	9119:16	22	_TIFFfree
LEAF_NODE	9119:25	9119:25	21	(
ARGUMENT	9119:26	9119:26	21	line_buff
FIELD	9119:26	9119:26	22	line_buff
LEAF_NODE	9119:26	9119:26	23	line_buff
LEAF_NODE	9119:35	9119:35	21	)
LEAF_NODE	9119:36	9119:36	19	;
JUMP_STATEMENT	9120:30	9120:41	18	return ( - 1 ) ;
KEYWORD	9120:30	9120:30	19	return
LEAF_NODE	9120:30	9120:30	20	return
DESTINATION	9120:37	9120:37	19	( - 1 )
EXPR	9120:37	9120:40	20	( - 1 )
LEAF_NODE	9120:37	9120:37	21	(
UNARY_EXPR	9120:38	9120:39	21	- 1
UNARY_OPERATOR	9120:38	9120:38	22	-
LEAF_NODE	9120:38	9120:38	23	-
FIELD	9120:39	9120:39	22	1
LEAF_NODE	9120:39	9120:39	23	1
LEAF_NODE	9120:40	9120:40	21	)
LEAF_NODE	9120:41	9120:41	19	;
LEAF_NODE	9121:30	9121:30	17	}
EXPR_STATEMENT	9122:29	9122:66	15	_TIFFmemcpy ( src , line_buff , rowsize ) ;
EXPR	9122:29	9122:29	16	_TIFFmemcpy ( src , line_buff , rowsize )
FUNCTION_CALL	9122:29	9122:65	17	_TIFFmemcpy ( src , line_buff , rowsize )
CALLEE	9122:29	9122:29	18	_TIFFmemcpy
LEAF_NODE	9122:29	9122:29	19	_TIFFmemcpy
LEAF_NODE	9122:41	9122:41	18	(
ARGUMENT	9122:42	9122:42	18	src
FIELD	9122:42	9122:42	19	src
LEAF_NODE	9122:42	9122:42	20	src
LEAF_NODE	9122:45	9122:45	18	,
ARGUMENT	9122:47	9122:47	18	line_buff
FIELD	9122:47	9122:47	19	line_buff
LEAF_NODE	9122:47	9122:47	20	line_buff
LEAF_NODE	9122:56	9122:56	18	,
ARGUMENT	9122:58	9122:58	18	rowsize
FIELD	9122:58	9122:58	19	rowsize
LEAF_NODE	9122:58	9122:58	20	rowsize
LEAF_NODE	9122:65	9122:65	18	)
LEAF_NODE	9122:66	9122:66	16	;
JUMP_STATEMENT	9123:29	9123:34	15	break DESTINATION ;
KEYWORD	9123:29	9123:29	16	break
LEAF_NODE	9123:29	9123:29	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	9123:34	9123:34	16	;
LABEL	9124:20	9124:27	15	default :
LEAF_NODE	9124:20	9124:20	16	default
LEAF_NODE	9124:27	9124:27	16	:
EXPR_STATEMENT	9124:29	9124:85	15	TIFFError ( "mirrorImage" , "Unsupported bit depth %d" , bps ) ;
EXPR	9124:29	9124:29	16	TIFFError ( "mirrorImage" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	9124:29	9124:84	17	TIFFError ( "mirrorImage" , "Unsupported bit depth %d" , bps )
CALLEE	9124:29	9124:29	18	TIFFError
LEAF_NODE	9124:29	9124:29	19	TIFFError
LEAF_NODE	9124:38	9124:38	18	(
ARGUMENT	9124:39	9124:39	18	"mirrorImage"
FIELD	9124:39	9124:39	19	"mirrorImage"
LEAF_NODE	9124:39	9124:39	20	"mirrorImage"
LEAF_NODE	9124:52	9124:52	18	,
ARGUMENT	9124:53	9124:53	18	"Unsupported bit depth %d"
FIELD	9124:53	9124:53	19	"Unsupported bit depth %d"
LEAF_NODE	9124:53	9124:53	20	"Unsupported bit depth %d"
LEAF_NODE	9124:79	9124:79	18	,
ARGUMENT	9124:81	9124:81	18	bps
FIELD	9124:81	9124:81	19	bps
LEAF_NODE	9124:81	9124:81	20	bps
LEAF_NODE	9124:84	9124:84	18	)
LEAF_NODE	9124:85	9124:85	16	;
EXPR_STATEMENT	9125:15	9125:35	15	_TIFFfree ( line_buff ) ;
EXPR	9125:15	9125:15	16	_TIFFfree ( line_buff )
FUNCTION_CALL	9125:15	9125:34	17	_TIFFfree ( line_buff )
CALLEE	9125:15	9125:15	18	_TIFFfree
LEAF_NODE	9125:15	9125:15	19	_TIFFfree
LEAF_NODE	9125:24	9125:24	18	(
ARGUMENT	9125:25	9125:25	18	line_buff
FIELD	9125:25	9125:25	19	line_buff
LEAF_NODE	9125:25	9125:25	20	line_buff
LEAF_NODE	9125:34	9125:34	18	)
LEAF_NODE	9125:35	9125:35	16	;
JUMP_STATEMENT	9126:29	9126:40	15	return ( - 1 ) ;
KEYWORD	9126:29	9126:29	16	return
LEAF_NODE	9126:29	9126:29	17	return
DESTINATION	9126:36	9126:36	16	( - 1 )
EXPR	9126:36	9126:39	17	( - 1 )
LEAF_NODE	9126:36	9126:36	18	(
UNARY_EXPR	9126:37	9126:38	18	- 1
UNARY_OPERATOR	9126:37	9126:37	19	-
LEAF_NODE	9126:37	9126:37	20	-
FIELD	9126:38	9126:38	19	1
LEAF_NODE	9126:38	9126:38	20	1
LEAF_NODE	9126:39	9126:39	18	)
LEAF_NODE	9126:40	9126:40	16	;
LEAF_NODE	9127:20	9127:20	14	}
LEAF_NODE	9128:4	9128:4	11	}
SELECTION	9129:16	9130:18	9	
KEYWORD	9129:16	9129:16	10	if
LEAF_NODE	9129:16	9129:16	11	if
LEAF_NODE	9129:19	9129:19	10	(
CONDITION	9129:20	9129:20	10	line_buff
EXPR	9129:20	9129:20	11	line_buff
FIELD	9129:20	9129:20	12	line_buff
LEAF_NODE	9129:20	9129:20	13	line_buff
LEAF_NODE	9129:29	9129:29	10	)
STATEMENTS	9130:18	9130:18	10	
EXPR_STATEMENT	9130:18	9130:38	11	_TIFFfree ( line_buff ) ;
EXPR	9130:18	9130:18	12	_TIFFfree ( line_buff )
FUNCTION_CALL	9130:18	9130:37	13	_TIFFfree ( line_buff )
CALLEE	9130:18	9130:18	14	_TIFFfree
LEAF_NODE	9130:18	9130:18	15	_TIFFfree
LEAF_NODE	9130:27	9130:27	14	(
ARGUMENT	9130:28	9130:28	14	line_buff
FIELD	9130:28	9130:28	15	line_buff
LEAF_NODE	9130:28	9130:28	16	line_buff
LEAF_NODE	9130:37	9130:37	14	)
LEAF_NODE	9130:38	9130:38	12	;
LEAF_NODE	9131:2	9131:2	8	}
JUMP_STATEMENT	9132:13	9132:18	6	break DESTINATION ;
KEYWORD	9132:13	9132:13	7	break
LEAF_NODE	9132:13	9132:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9132:18	9132:18	7	;
LABEL	9134:4	9134:11	6	default :
LEAF_NODE	9134:4	9134:4	7	default
LEAF_NODE	9134:11	9134:11	7	:
EXPR_STATEMENT	9134:13	9134:72	6	TIFFError ( "mirrorImage" , "Invalid mirror axis %d" , mirror ) ;
EXPR	9134:13	9134:13	7	TIFFError ( "mirrorImage" , "Invalid mirror axis %d" , mirror )
FUNCTION_CALL	9134:13	9134:71	8	TIFFError ( "mirrorImage" , "Invalid mirror axis %d" , mirror )
CALLEE	9134:13	9134:13	9	TIFFError
LEAF_NODE	9134:13	9134:13	10	TIFFError
LEAF_NODE	9134:23	9134:23	9	(
ARGUMENT	9134:24	9134:24	9	"mirrorImage"
FIELD	9134:24	9134:24	10	"mirrorImage"
LEAF_NODE	9134:24	9134:24	11	"mirrorImage"
LEAF_NODE	9134:37	9134:37	9	,
ARGUMENT	9134:39	9134:39	9	"Invalid mirror axis %d"
FIELD	9134:39	9134:39	10	"Invalid mirror axis %d"
LEAF_NODE	9134:39	9134:39	11	"Invalid mirror axis %d"
LEAF_NODE	9134:63	9134:63	9	,
ARGUMENT	9134:65	9134:65	9	mirror
FIELD	9134:65	9134:65	10	mirror
LEAF_NODE	9134:65	9134:65	11	mirror
LEAF_NODE	9134:71	9134:71	9	)
LEAF_NODE	9134:72	9134:72	7	;
JUMP_STATEMENT	9135:13	9135:24	6	return ( - 1 ) ;
KEYWORD	9135:13	9135:13	7	return
LEAF_NODE	9135:13	9135:13	8	return
DESTINATION	9135:20	9135:20	7	( - 1 )
EXPR	9135:20	9135:23	8	( - 1 )
LEAF_NODE	9135:20	9135:20	9	(
UNARY_EXPR	9135:21	9135:22	9	- 1
UNARY_OPERATOR	9135:21	9135:21	10	-
LEAF_NODE	9135:21	9135:21	11	-
FIELD	9135:22	9135:22	10	1
LEAF_NODE	9135:22	9135:22	11	1
LEAF_NODE	9135:23	9135:23	9	)
LEAF_NODE	9135:24	9135:24	7	;
JUMP_STATEMENT	9136:13	9136:18	6	break DESTINATION ;
KEYWORD	9136:13	9136:13	7	break
LEAF_NODE	9136:13	9136:13	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9136:18	9136:18	7	;
LEAF_NODE	9137:4	9137:4	5	}
JUMP_STATEMENT	9139:2	9139:12	3	return ( 0 ) ;
KEYWORD	9139:2	9139:2	4	return
LEAF_NODE	9139:2	9139:2	5	return
DESTINATION	9139:9	9139:9	4	( 0 )
EXPR	9139:9	9139:11	5	( 0 )
LEAF_NODE	9139:9	9139:9	6	(
FIELD	9139:10	9139:10	6	0
LEAF_NODE	9139:10	9139:10	7	0
LEAF_NODE	9139:11	9139:11	6	)
LEAF_NODE	9139:12	9139:12	4	;
LEAF_NODE	9140:2	9140:2	2	}
FUNCTION_DEF	9143:0	9203:2	1	
RETURN_TYPE	9143:0	9143:7	2	static int
LEAF_NODE	9143:0	9143:0	3	static
TYPE_NAME	9143:7	9143:7	3	int
LEAF_NODE	9143:7	9143:7	4	int
FUNCTION_NAME	9144:0	9144:0	2	invertImage
LEAF_NODE	9144:0	9144:0	3	invertImage
PARAMETER_LIST	9144:11	9144:109	2	( uint16 photometric , uint16 spp , uint16 bps , uint32 width , uint32 length , unsigned char * work_buff )
LEAF_NODE	9144:11	9144:11	3	(
PARAMETER_DECL	9144:12	9144:19	3	uint16 photometric
TYPE	9144:12	9144:12	4	uint16
TYPE_NAME	9144:12	9144:12	5	uint16
LEAF_NODE	9144:12	9144:12	6	uint16
NAME	9144:19	9144:19	4	photometric
LEAF_NODE	9144:19	9144:19	5	photometric
LEAF_NODE	9144:30	9144:30	3	,
PARAMETER_DECL	9144:32	9144:39	3	uint16 spp
TYPE	9144:32	9144:32	4	uint16
TYPE_NAME	9144:32	9144:32	5	uint16
LEAF_NODE	9144:32	9144:32	6	uint16
NAME	9144:39	9144:39	4	spp
LEAF_NODE	9144:39	9144:39	5	spp
LEAF_NODE	9144:42	9144:42	3	,
PARAMETER_DECL	9144:44	9144:51	3	uint16 bps
TYPE	9144:44	9144:44	4	uint16
TYPE_NAME	9144:44	9144:44	5	uint16
LEAF_NODE	9144:44	9144:44	6	uint16
NAME	9144:51	9144:51	4	bps
LEAF_NODE	9144:51	9144:51	5	bps
LEAF_NODE	9144:54	9144:54	3	,
PARAMETER_DECL	9144:56	9144:63	3	uint32 width
TYPE	9144:56	9144:56	4	uint32
TYPE_NAME	9144:56	9144:56	5	uint32
LEAF_NODE	9144:56	9144:56	6	uint32
NAME	9144:63	9144:63	4	width
LEAF_NODE	9144:63	9144:63	5	width
LEAF_NODE	9144:68	9144:68	3	,
PARAMETER_DECL	9144:70	9144:77	3	uint32 length
TYPE	9144:70	9144:70	4	uint32
TYPE_NAME	9144:70	9144:70	5	uint32
LEAF_NODE	9144:70	9144:70	6	uint32
NAME	9144:77	9144:77	4	length
LEAF_NODE	9144:77	9144:77	5	length
LEAF_NODE	9144:83	9144:83	3	,
PARAMETER_DECL	9144:85	9144:100	3	unsigned char * work_buff
TYPE	9144:85	9144:99	4	unsigned char *
TYPE_NAME	9144:85	9144:94	5	unsigned char
LEAF_NODE	9144:85	9144:85	6	unsigned
LEAF_NODE	9144:94	9144:94	6	char
POINTER	9144:99	9144:99	5	*
LEAF_NODE	9144:99	9144:99	6	*
NAME	9144:100	9144:100	4	work_buff
LEAF_NODE	9144:100	9144:100	5	work_buff
LEAF_NODE	9144:109	9144:109	3	)
LEAF_NODE	9145:2	9145:2	2	{
STATEMENTS	9146:2	9202:2	2	
SIMPLE_DECL	9146:2	9146:19	3	uint32 row , uint32 col ;
INIT_DECL_LIST	9146:2	9146:2	4	uint32 row , uint32 col
VAR_DECL	9146:2	9146:11	5	uint32 row
TYPE	9146:2	9146:2	6	uint32
TYPE_NAME	9146:2	9146:2	7	uint32
LEAF_NODE	9146:2	9146:2	8	uint32
NAME	9146:11	9146:11	6	row
LEAF_NODE	9146:11	9146:11	7	row
LEAF_NODE	9146:14	9146:14	5	,
VAR_DECL	9146:2	9146:16	5	uint32 col
TYPE	9146:2	9146:2	6	uint32
TYPE_NAME	9146:2	9146:2	7	uint32
LEAF_NODE	9146:2	9146:2	8	uint32
NAME	9146:16	9146:16	6	col
LEAF_NODE	9146:16	9146:16	7	col
LEAF_NODE	9146:19	9146:19	4	;
SIMPLE_DECL	9147:2	9147:20	3	unsigned char * src ;
VAR_DECL	9147:2	9147:17	4	unsigned char * src
TYPE	9147:2	9147:16	5	unsigned char *
TYPE_NAME	9147:2	9147:11	6	unsigned char
LEAF_NODE	9147:2	9147:2	7	unsigned
LEAF_NODE	9147:11	9147:11	7	char
POINTER	9147:16	9147:16	6	*
LEAF_NODE	9147:16	9147:16	7	*
NAME	9147:17	9147:17	5	src
LEAF_NODE	9147:17	9147:17	6	src
LEAF_NODE	9147:20	9147:20	4	;
SIMPLE_DECL	9148:2	9148:27	3	uint16 * src_uint16 ;
VAR_DECL	9148:2	9148:17	4	uint16 * src_uint16
TYPE	9148:2	9148:16	5	uint16 *
TYPE_NAME	9148:2	9148:2	6	uint16
LEAF_NODE	9148:2	9148:2	7	uint16
POINTER	9148:16	9148:16	6	*
LEAF_NODE	9148:16	9148:16	7	*
NAME	9148:17	9148:17	5	src_uint16
LEAF_NODE	9148:17	9148:17	6	src_uint16
LEAF_NODE	9148:27	9148:27	4	;
SIMPLE_DECL	9149:2	9149:27	3	uint32 * src_uint32 ;
VAR_DECL	9149:2	9149:17	4	uint32 * src_uint32
TYPE	9149:2	9149:16	5	uint32 *
TYPE_NAME	9149:2	9149:2	6	uint32
LEAF_NODE	9149:2	9149:2	7	uint32
POINTER	9149:16	9149:16	6	*
LEAF_NODE	9149:16	9149:16	7	*
NAME	9149:17	9149:17	5	src_uint32
LEAF_NODE	9149:17	9149:17	6	src_uint32
LEAF_NODE	9149:27	9149:27	4	;
SELECTION	9151:2	9152:4	3	
KEYWORD	9151:2	9151:2	4	if
LEAF_NODE	9151:2	9151:2	5	if
LEAF_NODE	9151:5	9151:5	4	(
CONDITION	9151:6	9151:6	4	spp != 1
EXPR	9151:6	9151:13	5	spp != 1
FIELD	9151:6	9151:6	6	spp
LEAF_NODE	9151:6	9151:6	7	spp
EQ_OPERATOR	9151:10	9151:10	6	!=
LEAF_NODE	9151:10	9151:10	7	!=
FIELD	9151:13	9151:13	6	1
LEAF_NODE	9151:13	9151:13	7	1
LEAF_NODE	9151:14	9151:14	4	)
STATEMENTS	9152:4	9155:4	4	
LEAF_NODE	9152:4	9152:4	5	{
STATEMENTS	9153:4	9154:4	5	
EXPR_STATEMENT	9153:4	9153:96	6	TIFFError ( "invertImage" , "Image inversion not supported for more than one sample per pixel" ) ;
EXPR	9153:4	9153:4	7	TIFFError ( "invertImage" , "Image inversion not supported for more than one sample per pixel" )
FUNCTION_CALL	9153:4	9153:95	8	TIFFError ( "invertImage" , "Image inversion not supported for more than one sample per pixel" )
CALLEE	9153:4	9153:4	9	TIFFError
LEAF_NODE	9153:4	9153:4	10	TIFFError
LEAF_NODE	9153:13	9153:13	9	(
ARGUMENT	9153:14	9153:14	9	"invertImage"
FIELD	9153:14	9153:14	10	"invertImage"
LEAF_NODE	9153:14	9153:14	11	"invertImage"
LEAF_NODE	9153:27	9153:27	9	,
ARGUMENT	9153:29	9153:29	9	"Image inversion not supported for more than one sample per pixel"
FIELD	9153:29	9153:29	10	"Image inversion not supported for more than one sample per pixel"
LEAF_NODE	9153:29	9153:29	11	"Image inversion not supported for more than one sample per pixel"
LEAF_NODE	9153:95	9153:95	9	)
LEAF_NODE	9153:96	9153:96	7	;
JUMP_STATEMENT	9154:4	9154:15	6	return ( - 1 ) ;
KEYWORD	9154:4	9154:4	7	return
LEAF_NODE	9154:4	9154:4	8	return
DESTINATION	9154:11	9154:11	7	( - 1 )
EXPR	9154:11	9154:14	8	( - 1 )
LEAF_NODE	9154:11	9154:11	9	(
UNARY_EXPR	9154:12	9154:13	9	- 1
UNARY_OPERATOR	9154:12	9154:12	10	-
LEAF_NODE	9154:12	9154:12	11	-
FIELD	9154:13	9154:13	10	1
LEAF_NODE	9154:13	9154:13	11	1
LEAF_NODE	9154:14	9154:14	9	)
LEAF_NODE	9154:15	9154:15	7	;
LEAF_NODE	9155:4	9155:4	5	}
SELECTION	9157:2	9158:4	3	
KEYWORD	9157:2	9157:2	4	if
LEAF_NODE	9157:2	9157:2	5	if
LEAF_NODE	9157:5	9157:5	4	(
CONDITION	9157:6	9157:6	4	photometric != PHOTOMETRIC_MINISWHITE && photometric != PHOTOMETRIC_MINISBLACK
EXPR	9157:6	9157:6	5	photometric != PHOTOMETRIC_MINISWHITE && photometric != PHOTOMETRIC_MINISBLACK
AND	9157:6	9157:48	6	photometric != PHOTOMETRIC_MINISWHITE && photometric != PHOTOMETRIC_MINISBLACK
EXPR	9157:6	9157:22	7	photometric != PHOTOMETRIC_MINISWHITE
FIELD	9157:6	9157:6	8	photometric
LEAF_NODE	9157:6	9157:6	9	photometric
EQ_OPERATOR	9157:18	9157:18	8	!=
LEAF_NODE	9157:18	9157:18	9	!=
FIELD	9157:22	9157:22	8	PHOTOMETRIC_MINISWHITE
LEAF_NODE	9157:22	9157:22	9	PHOTOMETRIC_MINISWHITE
LEAF_NODE	9157:45	9157:45	7	&&
EXPR	9157:48	9157:64	7	photometric != PHOTOMETRIC_MINISBLACK
FIELD	9157:48	9157:48	8	photometric
LEAF_NODE	9157:48	9157:48	9	photometric
EQ_OPERATOR	9157:60	9157:60	8	!=
LEAF_NODE	9157:60	9157:60	9	!=
FIELD	9157:64	9157:64	8	PHOTOMETRIC_MINISBLACK
LEAF_NODE	9157:64	9157:64	9	PHOTOMETRIC_MINISBLACK
LEAF_NODE	9157:86	9157:86	4	)
STATEMENTS	9158:4	9161:4	4	
LEAF_NODE	9158:4	9158:4	5	{
STATEMENTS	9159:4	9160:4	5	
EXPR_STATEMENT	9159:4	9159:89	6	TIFFError ( "invertImage" , "Only black and white and grayscale images can be inverted" ) ;
EXPR	9159:4	9159:4	7	TIFFError ( "invertImage" , "Only black and white and grayscale images can be inverted" )
FUNCTION_CALL	9159:4	9159:88	8	TIFFError ( "invertImage" , "Only black and white and grayscale images can be inverted" )
CALLEE	9159:4	9159:4	9	TIFFError
LEAF_NODE	9159:4	9159:4	10	TIFFError
LEAF_NODE	9159:13	9159:13	9	(
ARGUMENT	9159:14	9159:14	9	"invertImage"
FIELD	9159:14	9159:14	10	"invertImage"
LEAF_NODE	9159:14	9159:14	11	"invertImage"
LEAF_NODE	9159:27	9159:27	9	,
ARGUMENT	9159:29	9159:29	9	"Only black and white and grayscale images can be inverted"
FIELD	9159:29	9159:29	10	"Only black and white and grayscale images can be inverted"
LEAF_NODE	9159:29	9159:29	11	"Only black and white and grayscale images can be inverted"
LEAF_NODE	9159:88	9159:88	9	)
LEAF_NODE	9159:89	9159:89	7	;
JUMP_STATEMENT	9160:4	9160:15	6	return ( - 1 ) ;
KEYWORD	9160:4	9160:4	7	return
LEAF_NODE	9160:4	9160:4	8	return
DESTINATION	9160:11	9160:11	7	( - 1 )
EXPR	9160:11	9160:14	8	( - 1 )
LEAF_NODE	9160:11	9160:11	9	(
UNARY_EXPR	9160:12	9160:13	9	- 1
UNARY_OPERATOR	9160:12	9160:12	10	-
LEAF_NODE	9160:12	9160:12	11	-
FIELD	9160:13	9160:13	10	1
LEAF_NODE	9160:13	9160:13	11	1
LEAF_NODE	9160:14	9160:14	9	)
LEAF_NODE	9160:15	9160:15	7	;
LEAF_NODE	9161:4	9161:4	5	}
EXPR_STATEMENT	9163:2	9163:17	3	src = work_buff ;
EXPR	9163:2	9163:2	4	src = work_buff
ASSIGN	9163:2	9163:8	5	src = work_buff
LVAL	9163:2	9163:2	6	src
FIELD	9163:2	9163:2	7	src
LEAF_NODE	9163:2	9163:2	8	src
ASSIGN_OP	9163:6	9163:6	6	=
LEAF_NODE	9163:6	9163:6	7	=
RVAL	9163:8	9163:8	6	work_buff
FIELD	9163:8	9163:8	7	work_buff
LEAF_NODE	9163:8	9163:8	8	work_buff
LEAF_NODE	9163:17	9163:17	4	;
SELECTION	9164:2	9165:4	3	
KEYWORD	9164:2	9164:2	4	if
LEAF_NODE	9164:2	9164:2	5	if
LEAF_NODE	9164:5	9164:5	4	(
CONDITION	9164:6	9164:6	4	src == NULL
EXPR	9164:6	9164:13	5	src == NULL
FIELD	9164:6	9164:6	6	src
LEAF_NODE	9164:6	9164:6	7	src
EQ_OPERATOR	9164:10	9164:10	6	==
LEAF_NODE	9164:10	9164:10	7	==
FIELD	9164:13	9164:13	6	NULL
LEAF_NODE	9164:13	9164:13	7	NULL
LEAF_NODE	9164:17	9164:17	4	)
STATEMENTS	9165:4	9168:4	4	
LEAF_NODE	9165:4	9165:4	5	{
STATEMENTS	9166:4	9167:4	5	
EXPR_STATEMENT	9166:4	9166:74	6	TIFFError ( "invertImage" , "Invalid crop buffer passed to invertImage" ) ;
EXPR	9166:4	9166:4	7	TIFFError ( "invertImage" , "Invalid crop buffer passed to invertImage" )
FUNCTION_CALL	9166:4	9166:73	8	TIFFError ( "invertImage" , "Invalid crop buffer passed to invertImage" )
CALLEE	9166:4	9166:4	9	TIFFError
LEAF_NODE	9166:4	9166:4	10	TIFFError
LEAF_NODE	9166:14	9166:14	9	(
ARGUMENT	9166:15	9166:15	9	"invertImage"
FIELD	9166:15	9166:15	10	"invertImage"
LEAF_NODE	9166:15	9166:15	11	"invertImage"
LEAF_NODE	9166:28	9166:28	9	,
ARGUMENT	9166:30	9166:30	9	"Invalid crop buffer passed to invertImage"
FIELD	9166:30	9166:30	10	"Invalid crop buffer passed to invertImage"
LEAF_NODE	9166:30	9166:30	11	"Invalid crop buffer passed to invertImage"
LEAF_NODE	9166:73	9166:73	9	)
LEAF_NODE	9166:74	9166:74	7	;
JUMP_STATEMENT	9167:4	9167:15	6	return ( - 1 ) ;
KEYWORD	9167:4	9167:4	7	return
LEAF_NODE	9167:4	9167:4	8	return
DESTINATION	9167:11	9167:11	7	( - 1 )
EXPR	9167:11	9167:14	8	( - 1 )
LEAF_NODE	9167:11	9167:11	9	(
UNARY_EXPR	9167:12	9167:13	9	- 1
UNARY_OPERATOR	9167:12	9167:12	10	-
LEAF_NODE	9167:12	9167:12	11	-
FIELD	9167:13	9167:13	10	1
LEAF_NODE	9167:13	9167:13	11	1
LEAF_NODE	9167:14	9167:14	9	)
LEAF_NODE	9167:15	9167:15	7	;
LEAF_NODE	9168:4	9168:4	5	}
SELECTION	9170:2	9171:4	3	
KEYWORD	9170:2	9170:2	4	switch
LEAF_NODE	9170:2	9170:2	5	switch
LEAF_NODE	9170:9	9170:9	4	(
CONDITION	9170:10	9170:10	4	bps
EXPR	9170:10	9170:10	5	bps
FIELD	9170:10	9170:10	6	bps
LEAF_NODE	9170:10	9170:10	7	bps
LEAF_NODE	9170:13	9170:13	4	)
STATEMENTS	9171:4	9200:4	4	
LEAF_NODE	9171:4	9171:4	5	{
STATEMENTS	9172:4	9199:6	5	
LABEL	9172:4	9172:11	6	case 32 :
LEAF_NODE	9172:4	9172:4	7	case
LEAF_NODE	9172:9	9172:9	7	32
LEAF_NODE	9172:11	9172:11	7	:
EXPR_STATEMENT	9172:13	9172:39	6	src_uint32 = ( uint32 * ) src ;
EXPR	9172:13	9172:13	7	src_uint32 = ( uint32 * ) src
ASSIGN	9172:13	9172:26	8	src_uint32 = ( uint32 * ) src
LVAL	9172:13	9172:13	9	src_uint32
FIELD	9172:13	9172:13	10	src_uint32
LEAF_NODE	9172:13	9172:13	11	src_uint32
ASSIGN_OP	9172:24	9172:24	9	=
LEAF_NODE	9172:24	9172:24	10	=
RVAL	9172:26	9172:36	9	( uint32 * ) src
LEAF_NODE	9172:26	9172:26	10	(
TYPE_NAME	9172:27	9172:27	10	uint32
LEAF_NODE	9172:27	9172:27	11	uint32
LEAF_NODE	9172:34	9172:34	10	*
LEAF_NODE	9172:35	9172:35	10	)
FIELD	9172:36	9172:36	10	src
LEAF_NODE	9172:36	9172:36	11	src
LEAF_NODE	9172:39	9172:39	7	;
ITERATION	9173:13	9174:15	6	
KEYWORD	9173:13	9173:13	7	for
LEAF_NODE	9173:13	9173:13	8	for
LEAF_NODE	9173:17	9173:17	7	(
FOR_INIT	9173:18	9173:25	7	row = 0 ;
EXPR	9173:18	9173:18	8	row = 0
ASSIGN	9173:18	9173:24	9	row = 0
LVAL	9173:18	9173:18	10	row
FIELD	9173:18	9173:18	11	row
LEAF_NODE	9173:18	9173:18	12	row
ASSIGN_OP	9173:22	9173:22	10	=
LEAF_NODE	9173:22	9173:22	11	=
RVAL	9173:24	9173:24	10	0
FIELD	9173:24	9173:24	11	0
LEAF_NODE	9173:24	9173:24	12	0
LEAF_NODE	9173:25	9173:25	8	;
CONDITION	9173:27	9173:27	7	row < length
EXPR	9173:27	9173:33	8	row < length
FIELD	9173:27	9173:27	9	row
LEAF_NODE	9173:27	9173:27	10	row
REL_OPERATOR	9173:31	9173:31	9	<
LEAF_NODE	9173:31	9173:31	10	<
FIELD	9173:33	9173:33	9	length
LEAF_NODE	9173:33	9173:33	10	length
LEAF_NODE	9173:39	9173:39	7	;
FOR_EXPR	9173:41	9173:41	7	row ++
EXPR	9173:41	9173:41	8	row ++
FIELD	9173:41	9173:44	9	row ++
LEAF_NODE	9173:41	9173:41	10	row
LEAF_NODE	9173:44	9173:44	10	++
LEAF_NODE	9173:46	9173:46	7	)
STATEMENTS	9174:15	9174:15	7	
ITERATION	9174:15	9175:17	8	
KEYWORD	9174:15	9174:15	9	for
LEAF_NODE	9174:15	9174:15	10	for
LEAF_NODE	9174:19	9174:19	9	(
FOR_INIT	9174:20	9174:27	9	col = 0 ;
EXPR	9174:20	9174:20	10	col = 0
ASSIGN	9174:20	9174:26	11	col = 0
LVAL	9174:20	9174:20	12	col
FIELD	9174:20	9174:20	13	col
LEAF_NODE	9174:20	9174:20	14	col
ASSIGN_OP	9174:24	9174:24	12	=
LEAF_NODE	9174:24	9174:24	13	=
RVAL	9174:26	9174:26	12	0
FIELD	9174:26	9174:26	13	0
LEAF_NODE	9174:26	9174:26	14	0
LEAF_NODE	9174:27	9174:27	10	;
CONDITION	9174:29	9174:29	9	col < width
EXPR	9174:29	9174:35	10	col < width
FIELD	9174:29	9174:29	11	col
LEAF_NODE	9174:29	9174:29	12	col
REL_OPERATOR	9174:33	9174:33	11	<
LEAF_NODE	9174:33	9174:33	12	<
FIELD	9174:35	9174:35	11	width
LEAF_NODE	9174:35	9174:35	12	width
LEAF_NODE	9174:40	9174:40	9	;
FOR_EXPR	9174:42	9174:42	9	col ++
EXPR	9174:42	9174:42	10	col ++
FIELD	9174:42	9174:45	11	col ++
LEAF_NODE	9174:42	9174:42	12	col
LEAF_NODE	9174:45	9174:45	12	++
LEAF_NODE	9174:47	9174:47	9	)
STATEMENTS	9175:17	9178:17	9	
LEAF_NODE	9175:17	9175:17	10	{
STATEMENTS	9176:3	9177:18	10	
EXPR_STATEMENT	9176:3	9176:31	11	* src_uint32 = ~ ( * src_uint32 ) ;
EXPR	9176:3	9176:3	12	* src_uint32 = ~ ( * src_uint32 )
ASSIGN	9176:3	9176:17	13	* src_uint32 = ~ ( * src_uint32 )
LVAL	9176:3	9176:3	14	* src_uint32
UNARY_EXPR	9176:3	9176:4	15	* src_uint32
UNARY_OPERATOR	9176:3	9176:3	16	*
LEAF_NODE	9176:3	9176:3	17	*
FIELD	9176:4	9176:4	16	src_uint32
LEAF_NODE	9176:4	9176:4	17	src_uint32
ASSIGN_OP	9176:15	9176:15	14	=
LEAF_NODE	9176:15	9176:15	15	=
RVAL	9176:17	9176:17	14	~ ( * src_uint32 )
UNARY_EXPR	9176:17	9176:30	15	~ ( * src_uint32 )
UNARY_OPERATOR	9176:17	9176:17	16	~
LEAF_NODE	9176:17	9176:17	17	~
LEAF_NODE	9176:18	9176:18	16	(
UNARY_EXPR	9176:19	9176:20	16	* src_uint32
UNARY_OPERATOR	9176:19	9176:19	17	*
LEAF_NODE	9176:19	9176:19	18	*
FIELD	9176:20	9176:20	17	src_uint32
LEAF_NODE	9176:20	9176:20	18	src_uint32
LEAF_NODE	9176:30	9176:30	16	)
LEAF_NODE	9176:31	9176:31	12	;
EXPR_STATEMENT	9177:18	9177:30	11	src_uint32 ++ ;
EXPR	9177:18	9177:18	12	src_uint32 ++
FIELD	9177:18	9177:28	13	src_uint32 ++
LEAF_NODE	9177:18	9177:18	14	src_uint32
LEAF_NODE	9177:28	9177:28	14	++
LEAF_NODE	9177:30	9177:30	12	;
LEAF_NODE	9178:17	9178:17	10	}
JUMP_STATEMENT	9179:12	9179:17	6	break DESTINATION ;
KEYWORD	9179:12	9179:12	7	break
LEAF_NODE	9179:12	9179:12	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9179:17	9179:17	7	;
LABEL	9180:4	9180:11	6	case 16 :
LEAF_NODE	9180:4	9180:4	7	case
LEAF_NODE	9180:9	9180:9	7	16
LEAF_NODE	9180:11	9180:11	7	:
EXPR_STATEMENT	9180:13	9180:39	6	src_uint16 = ( uint16 * ) src ;
EXPR	9180:13	9180:13	7	src_uint16 = ( uint16 * ) src
ASSIGN	9180:13	9180:26	8	src_uint16 = ( uint16 * ) src
LVAL	9180:13	9180:13	9	src_uint16
FIELD	9180:13	9180:13	10	src_uint16
LEAF_NODE	9180:13	9180:13	11	src_uint16
ASSIGN_OP	9180:24	9180:24	9	=
LEAF_NODE	9180:24	9180:24	10	=
RVAL	9180:26	9180:36	9	( uint16 * ) src
LEAF_NODE	9180:26	9180:26	10	(
TYPE_NAME	9180:27	9180:27	10	uint16
LEAF_NODE	9180:27	9180:27	11	uint16
LEAF_NODE	9180:34	9180:34	10	*
LEAF_NODE	9180:35	9180:35	10	)
FIELD	9180:36	9180:36	10	src
LEAF_NODE	9180:36	9180:36	11	src
LEAF_NODE	9180:39	9180:39	7	;
ITERATION	9181:13	9182:15	6	
KEYWORD	9181:13	9181:13	7	for
LEAF_NODE	9181:13	9181:13	8	for
LEAF_NODE	9181:17	9181:17	7	(
FOR_INIT	9181:18	9181:25	7	row = 0 ;
EXPR	9181:18	9181:18	8	row = 0
ASSIGN	9181:18	9181:24	9	row = 0
LVAL	9181:18	9181:18	10	row
FIELD	9181:18	9181:18	11	row
LEAF_NODE	9181:18	9181:18	12	row
ASSIGN_OP	9181:22	9181:22	10	=
LEAF_NODE	9181:22	9181:22	11	=
RVAL	9181:24	9181:24	10	0
FIELD	9181:24	9181:24	11	0
LEAF_NODE	9181:24	9181:24	12	0
LEAF_NODE	9181:25	9181:25	8	;
CONDITION	9181:27	9181:27	7	row < length
EXPR	9181:27	9181:33	8	row < length
FIELD	9181:27	9181:27	9	row
LEAF_NODE	9181:27	9181:27	10	row
REL_OPERATOR	9181:31	9181:31	9	<
LEAF_NODE	9181:31	9181:31	10	<
FIELD	9181:33	9181:33	9	length
LEAF_NODE	9181:33	9181:33	10	length
LEAF_NODE	9181:39	9181:39	7	;
FOR_EXPR	9181:41	9181:41	7	row ++
EXPR	9181:41	9181:41	8	row ++
FIELD	9181:41	9181:44	9	row ++
LEAF_NODE	9181:41	9181:41	10	row
LEAF_NODE	9181:44	9181:44	10	++
LEAF_NODE	9181:46	9181:46	7	)
STATEMENTS	9182:15	9182:15	7	
ITERATION	9182:15	9183:17	8	
KEYWORD	9182:15	9182:15	9	for
LEAF_NODE	9182:15	9182:15	10	for
LEAF_NODE	9182:19	9182:19	9	(
FOR_INIT	9182:20	9182:27	9	col = 0 ;
EXPR	9182:20	9182:20	10	col = 0
ASSIGN	9182:20	9182:26	11	col = 0
LVAL	9182:20	9182:20	12	col
FIELD	9182:20	9182:20	13	col
LEAF_NODE	9182:20	9182:20	14	col
ASSIGN_OP	9182:24	9182:24	12	=
LEAF_NODE	9182:24	9182:24	13	=
RVAL	9182:26	9182:26	12	0
FIELD	9182:26	9182:26	13	0
LEAF_NODE	9182:26	9182:26	14	0
LEAF_NODE	9182:27	9182:27	10	;
CONDITION	9182:29	9182:29	9	col < width
EXPR	9182:29	9182:35	10	col < width
FIELD	9182:29	9182:29	11	col
LEAF_NODE	9182:29	9182:29	12	col
REL_OPERATOR	9182:33	9182:33	11	<
LEAF_NODE	9182:33	9182:33	12	<
FIELD	9182:35	9182:35	11	width
LEAF_NODE	9182:35	9182:35	12	width
LEAF_NODE	9182:40	9182:40	9	;
FOR_EXPR	9182:42	9182:42	9	col ++
EXPR	9182:42	9182:42	10	col ++
FIELD	9182:42	9182:45	11	col ++
LEAF_NODE	9182:42	9182:42	12	col
LEAF_NODE	9182:45	9182:45	12	++
LEAF_NODE	9182:47	9182:47	9	)
STATEMENTS	9183:17	9186:17	9	
LEAF_NODE	9183:17	9183:17	10	{
STATEMENTS	9184:3	9185:18	10	
EXPR_STATEMENT	9184:3	9184:31	11	* src_uint16 = ~ ( * src_uint16 ) ;
EXPR	9184:3	9184:3	12	* src_uint16 = ~ ( * src_uint16 )
ASSIGN	9184:3	9184:17	13	* src_uint16 = ~ ( * src_uint16 )
LVAL	9184:3	9184:3	14	* src_uint16
UNARY_EXPR	9184:3	9184:4	15	* src_uint16
UNARY_OPERATOR	9184:3	9184:3	16	*
LEAF_NODE	9184:3	9184:3	17	*
FIELD	9184:4	9184:4	16	src_uint16
LEAF_NODE	9184:4	9184:4	17	src_uint16
ASSIGN_OP	9184:15	9184:15	14	=
LEAF_NODE	9184:15	9184:15	15	=
RVAL	9184:17	9184:17	14	~ ( * src_uint16 )
UNARY_EXPR	9184:17	9184:30	15	~ ( * src_uint16 )
UNARY_OPERATOR	9184:17	9184:17	16	~
LEAF_NODE	9184:17	9184:17	17	~
LEAF_NODE	9184:18	9184:18	16	(
UNARY_EXPR	9184:19	9184:20	16	* src_uint16
UNARY_OPERATOR	9184:19	9184:19	17	*
LEAF_NODE	9184:19	9184:19	18	*
FIELD	9184:20	9184:20	17	src_uint16
LEAF_NODE	9184:20	9184:20	18	src_uint16
LEAF_NODE	9184:30	9184:30	16	)
LEAF_NODE	9184:31	9184:31	12	;
EXPR_STATEMENT	9185:18	9185:30	11	src_uint16 ++ ;
EXPR	9185:18	9185:18	12	src_uint16 ++
FIELD	9185:18	9185:28	13	src_uint16 ++
LEAF_NODE	9185:18	9185:18	14	src_uint16
LEAF_NODE	9185:28	9185:28	14	++
LEAF_NODE	9185:30	9185:30	12	;
LEAF_NODE	9186:17	9186:17	10	}
JUMP_STATEMENT	9187:12	9187:17	6	break DESTINATION ;
KEYWORD	9187:12	9187:12	7	break
LEAF_NODE	9187:12	9187:12	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9187:17	9187:17	7	;
LABEL	9188:4	9188:10	6	case 8 :
LEAF_NODE	9188:4	9188:4	7	case
LEAF_NODE	9188:9	9188:9	7	8
LEAF_NODE	9188:10	9188:10	7	:
LABEL	9189:4	9189:10	6	case 4 :
LEAF_NODE	9189:4	9189:4	7	case
LEAF_NODE	9189:9	9189:9	7	4
LEAF_NODE	9189:10	9189:10	7	:
LABEL	9190:4	9190:10	6	case 2 :
LEAF_NODE	9190:4	9190:4	7	case
LEAF_NODE	9190:9	9190:9	7	2
LEAF_NODE	9190:10	9190:10	7	:
LABEL	9191:4	9191:10	6	case 1 :
LEAF_NODE	9191:4	9191:4	7	case
LEAF_NODE	9191:9	9191:9	7	1
LEAF_NODE	9191:10	9191:10	7	:
ITERATION	9191:12	9192:14	6	
KEYWORD	9191:12	9191:12	7	for
LEAF_NODE	9191:12	9191:12	8	for
LEAF_NODE	9191:16	9191:16	7	(
FOR_INIT	9191:17	9191:24	7	row = 0 ;
EXPR	9191:17	9191:17	8	row = 0
ASSIGN	9191:17	9191:23	9	row = 0
LVAL	9191:17	9191:17	10	row
FIELD	9191:17	9191:17	11	row
LEAF_NODE	9191:17	9191:17	12	row
ASSIGN_OP	9191:21	9191:21	10	=
LEAF_NODE	9191:21	9191:21	11	=
RVAL	9191:23	9191:23	10	0
FIELD	9191:23	9191:23	11	0
LEAF_NODE	9191:23	9191:23	12	0
LEAF_NODE	9191:24	9191:24	8	;
CONDITION	9191:26	9191:26	7	row < length
EXPR	9191:26	9191:32	8	row < length
FIELD	9191:26	9191:26	9	row
LEAF_NODE	9191:26	9191:26	10	row
REL_OPERATOR	9191:30	9191:30	9	<
LEAF_NODE	9191:30	9191:30	10	<
FIELD	9191:32	9191:32	9	length
LEAF_NODE	9191:32	9191:32	10	length
LEAF_NODE	9191:38	9191:38	7	;
FOR_EXPR	9191:40	9191:40	7	row ++
EXPR	9191:40	9191:40	8	row ++
FIELD	9191:40	9191:43	9	row ++
LEAF_NODE	9191:40	9191:40	10	row
LEAF_NODE	9191:43	9191:43	10	++
LEAF_NODE	9191:45	9191:45	7	)
STATEMENTS	9192:14	9192:14	7	
ITERATION	9192:14	9193:16	8	
KEYWORD	9192:14	9192:14	9	for
LEAF_NODE	9192:14	9192:14	10	for
LEAF_NODE	9192:18	9192:18	9	(
FOR_INIT	9192:19	9192:26	9	col = 0 ;
EXPR	9192:19	9192:19	10	col = 0
ASSIGN	9192:19	9192:25	11	col = 0
LVAL	9192:19	9192:19	12	col
FIELD	9192:19	9192:19	13	col
LEAF_NODE	9192:19	9192:19	14	col
ASSIGN_OP	9192:23	9192:23	12	=
LEAF_NODE	9192:23	9192:23	13	=
RVAL	9192:25	9192:25	12	0
FIELD	9192:25	9192:25	13	0
LEAF_NODE	9192:25	9192:25	14	0
LEAF_NODE	9192:26	9192:26	10	;
CONDITION	9192:28	9192:28	9	col < width
EXPR	9192:28	9192:34	10	col < width
FIELD	9192:28	9192:28	11	col
LEAF_NODE	9192:28	9192:28	12	col
REL_OPERATOR	9192:32	9192:32	11	<
LEAF_NODE	9192:32	9192:32	12	<
FIELD	9192:34	9192:34	11	width
LEAF_NODE	9192:34	9192:34	12	width
LEAF_NODE	9192:39	9192:39	9	;
FOR_EXPR	9192:41	9192:41	9	col += 8 / bps
EXPR	9192:41	9192:41	10	col += 8 / bps
ASSIGN	9192:41	9192:48	11	col += 8 / bps
LVAL	9192:41	9192:41	12	col
FIELD	9192:41	9192:41	13	col
LEAF_NODE	9192:41	9192:41	14	col
ASSIGN_OP	9192:45	9192:45	12	+=
LEAF_NODE	9192:45	9192:45	13	+=
RVAL	9192:48	9192:52	12	8 / bps
FIELD	9192:48	9192:48	13	8
LEAF_NODE	9192:48	9192:48	14	8
LEAF_NODE	9192:50	9192:50	13	/
FIELD	9192:52	9192:52	13	bps
LEAF_NODE	9192:52	9192:52	14	bps
LEAF_NODE	9192:55	9192:55	9	)
STATEMENTS	9193:16	9196:16	9	
LEAF_NODE	9193:16	9193:16	10	{
STATEMENTS	9194:16	9195:16	10	
EXPR_STATEMENT	9194:16	9194:30	11	* src = ~ ( * src ) ;
EXPR	9194:16	9194:16	12	* src = ~ ( * src )
ASSIGN	9194:16	9194:23	13	* src = ~ ( * src )
LVAL	9194:16	9194:16	14	* src
UNARY_EXPR	9194:16	9194:17	15	* src
UNARY_OPERATOR	9194:16	9194:16	16	*
LEAF_NODE	9194:16	9194:16	17	*
FIELD	9194:17	9194:17	16	src
LEAF_NODE	9194:17	9194:17	17	src
ASSIGN_OP	9194:21	9194:21	14	=
LEAF_NODE	9194:21	9194:21	15	=
RVAL	9194:23	9194:23	14	~ ( * src )
UNARY_EXPR	9194:23	9194:29	15	~ ( * src )
UNARY_OPERATOR	9194:23	9194:23	16	~
LEAF_NODE	9194:23	9194:23	17	~
LEAF_NODE	9194:24	9194:24	16	(
UNARY_EXPR	9194:25	9194:26	16	* src
UNARY_OPERATOR	9194:25	9194:25	17	*
LEAF_NODE	9194:25	9194:25	18	*
FIELD	9194:26	9194:26	17	src
LEAF_NODE	9194:26	9194:26	18	src
LEAF_NODE	9194:29	9194:29	16	)
LEAF_NODE	9194:30	9194:30	12	;
EXPR_STATEMENT	9195:16	9195:21	11	src ++ ;
EXPR	9195:16	9195:16	12	src ++
FIELD	9195:16	9195:19	13	src ++
LEAF_NODE	9195:16	9195:16	14	src
LEAF_NODE	9195:19	9195:19	14	++
LEAF_NODE	9195:21	9195:21	12	;
LEAF_NODE	9196:16	9196:16	10	}
JUMP_STATEMENT	9197:12	9197:17	6	break DESTINATION ;
KEYWORD	9197:12	9197:12	7	break
LEAF_NODE	9197:12	9197:12	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9197:17	9197:17	7	;
LABEL	9198:4	9198:11	6	default :
LEAF_NODE	9198:4	9198:4	7	default
LEAF_NODE	9198:11	9198:11	7	:
EXPR_STATEMENT	9198:13	9198:70	6	TIFFError ( "invertImage" , "Unsupported bit depth %d" , bps ) ;
EXPR	9198:13	9198:13	7	TIFFError ( "invertImage" , "Unsupported bit depth %d" , bps )
FUNCTION_CALL	9198:13	9198:69	8	TIFFError ( "invertImage" , "Unsupported bit depth %d" , bps )
CALLEE	9198:13	9198:13	9	TIFFError
LEAF_NODE	9198:13	9198:13	10	TIFFError
LEAF_NODE	9198:22	9198:22	9	(
ARGUMENT	9198:23	9198:23	9	"invertImage"
FIELD	9198:23	9198:23	10	"invertImage"
LEAF_NODE	9198:23	9198:23	11	"invertImage"
LEAF_NODE	9198:36	9198:36	9	,
ARGUMENT	9198:38	9198:38	9	"Unsupported bit depth %d"
FIELD	9198:38	9198:38	10	"Unsupported bit depth %d"
LEAF_NODE	9198:38	9198:38	11	"Unsupported bit depth %d"
LEAF_NODE	9198:64	9198:64	9	,
ARGUMENT	9198:66	9198:66	9	bps
FIELD	9198:66	9198:66	10	bps
LEAF_NODE	9198:66	9198:66	11	bps
LEAF_NODE	9198:69	9198:69	9	)
LEAF_NODE	9198:70	9198:70	7	;
JUMP_STATEMENT	9199:6	9199:17	6	return ( - 1 ) ;
KEYWORD	9199:6	9199:6	7	return
LEAF_NODE	9199:6	9199:6	8	return
DESTINATION	9199:13	9199:13	7	( - 1 )
EXPR	9199:13	9199:16	8	( - 1 )
LEAF_NODE	9199:13	9199:13	9	(
UNARY_EXPR	9199:14	9199:15	9	- 1
UNARY_OPERATOR	9199:14	9199:14	10	-
LEAF_NODE	9199:14	9199:14	11	-
FIELD	9199:15	9199:15	10	1
LEAF_NODE	9199:15	9199:15	11	1
LEAF_NODE	9199:16	9199:16	9	)
LEAF_NODE	9199:17	9199:17	7	;
LEAF_NODE	9200:4	9200:4	5	}
JUMP_STATEMENT	9202:2	9202:12	3	return ( 0 ) ;
KEYWORD	9202:2	9202:2	4	return
LEAF_NODE	9202:2	9202:2	5	return
DESTINATION	9202:9	9202:9	4	( 0 )
EXPR	9202:9	9202:11	5	( 0 )
LEAF_NODE	9202:9	9202:9	6	(
FIELD	9202:10	9202:10	6	0
LEAF_NODE	9202:10	9202:10	7	0
LEAF_NODE	9202:11	9202:11	6	)
LEAF_NODE	9202:12	9202:12	4	;
LEAF_NODE	9203:2	9203:2	2	}
