SOURCE_FILE	33:0	728:0	0	
FUNCTION_DEF	33:0	38:0	1	
RETURN_TYPE	33:0	33:7	2	static int
LEAF_NODE	33:0	33:0	3	static
TYPE_NAME	33:7	33:7	3	int
LEAF_NODE	33:7	33:7	4	int
FUNCTION_NAME	34:0	34:0	2	_tiffDummyMapProc
LEAF_NODE	34:0	34:0	3	_tiffDummyMapProc
PARAMETER_LIST	34:17	34:59	2	( thandle_t fd , void * * pbase , toff_t * psize )
LEAF_NODE	34:17	34:17	3	(
PARAMETER_DECL	34:18	34:28	3	thandle_t fd
TYPE	34:18	34:18	4	thandle_t
TYPE_NAME	34:18	34:18	5	thandle_t
LEAF_NODE	34:18	34:18	6	thandle_t
NAME	34:28	34:28	4	fd
LEAF_NODE	34:28	34:28	5	fd
LEAF_NODE	34:30	34:30	3	,
PARAMETER_DECL	34:32	34:39	3	void * * pbase
TYPE	34:32	34:36	4	void * *
TYPE_NAME	34:32	34:32	5	void
LEAF_NODE	34:32	34:32	6	void
POINTER	34:36	34:37	5	* *
LEAF_NODE	34:36	34:36	6	*
LEAF_NODE	34:37	34:37	6	*
NAME	34:39	34:39	4	pbase
LEAF_NODE	34:39	34:39	5	pbase
LEAF_NODE	34:44	34:44	3	,
PARAMETER_DECL	34:46	34:54	3	toff_t * psize
TYPE	34:46	34:52	4	toff_t *
TYPE_NAME	34:46	34:46	5	toff_t
LEAF_NODE	34:46	34:46	6	toff_t
POINTER	34:52	34:52	5	*
LEAF_NODE	34:52	34:52	6	*
NAME	34:54	34:54	4	psize
LEAF_NODE	34:54	34:54	5	psize
LEAF_NODE	34:59	34:59	3	)
LEAF_NODE	35:0	35:0	2	{
STATEMENTS	36:1	37:1	2	
EXPR_STATEMENT	36:1	36:10	3	( void ) fd ;
EXPR	36:1	36:8	4	( void ) fd
LEAF_NODE	36:1	36:1	5	(
TYPE_NAME	36:2	36:2	5	void
LEAF_NODE	36:2	36:2	6	void
LEAF_NODE	36:6	36:6	5	)
FIELD	36:8	36:8	5	fd
LEAF_NODE	36:8	36:8	6	fd
LEAF_NODE	36:10	36:10	4	;
EXPR_STATEMENT	36:12	36:24	3	( void ) pbase ;
EXPR	36:12	36:19	4	( void ) pbase
LEAF_NODE	36:12	36:12	5	(
TYPE_NAME	36:13	36:13	5	void
LEAF_NODE	36:13	36:13	6	void
LEAF_NODE	36:17	36:17	5	)
FIELD	36:19	36:19	5	pbase
LEAF_NODE	36:19	36:19	6	pbase
LEAF_NODE	36:24	36:24	4	;
EXPR_STATEMENT	36:26	36:38	3	( void ) psize ;
EXPR	36:26	36:33	4	( void ) psize
LEAF_NODE	36:26	36:26	5	(
TYPE_NAME	36:27	36:27	5	void
LEAF_NODE	36:27	36:27	6	void
LEAF_NODE	36:31	36:31	5	)
FIELD	36:33	36:33	5	psize
LEAF_NODE	36:33	36:33	6	psize
LEAF_NODE	36:38	36:38	4	;
JUMP_STATEMENT	37:1	37:11	3	return ( 0 ) ;
KEYWORD	37:1	37:1	4	return
LEAF_NODE	37:1	37:1	5	return
DESTINATION	37:8	37:8	4	( 0 )
EXPR	37:8	37:10	5	( 0 )
LEAF_NODE	37:8	37:8	6	(
FIELD	37:9	37:9	6	0
LEAF_NODE	37:9	37:9	7	0
LEAF_NODE	37:10	37:10	6	)
LEAF_NODE	37:11	37:11	4	;
LEAF_NODE	38:0	38:0	2	}
FUNCTION_DEF	40:0	44:0	1	
RETURN_TYPE	40:0	40:7	2	static void
LEAF_NODE	40:0	40:0	3	static
TYPE_NAME	40:7	40:7	3	void
LEAF_NODE	40:7	40:7	4	void
FUNCTION_NAME	41:0	41:0	2	_tiffDummyUnmapProc
LEAF_NODE	41:0	41:0	3	_tiffDummyUnmapProc
PARAMETER_LIST	41:19	41:57	2	( thandle_t fd , void * base , toff_t size )
LEAF_NODE	41:19	41:19	3	(
PARAMETER_DECL	41:20	41:30	3	thandle_t fd
TYPE	41:20	41:20	4	thandle_t
TYPE_NAME	41:20	41:20	5	thandle_t
LEAF_NODE	41:20	41:20	6	thandle_t
NAME	41:30	41:30	4	fd
LEAF_NODE	41:30	41:30	5	fd
LEAF_NODE	41:32	41:32	3	,
PARAMETER_DECL	41:34	41:40	3	void * base
TYPE	41:34	41:38	4	void *
TYPE_NAME	41:34	41:34	5	void
LEAF_NODE	41:34	41:34	6	void
POINTER	41:38	41:38	5	*
LEAF_NODE	41:38	41:38	6	*
NAME	41:40	41:40	4	base
LEAF_NODE	41:40	41:40	5	base
LEAF_NODE	41:44	41:44	3	,
PARAMETER_DECL	41:46	41:53	3	toff_t size
TYPE	41:46	41:46	4	toff_t
TYPE_NAME	41:46	41:46	5	toff_t
LEAF_NODE	41:46	41:46	6	toff_t
NAME	41:53	41:53	4	size
LEAF_NODE	41:53	41:53	5	size
LEAF_NODE	41:57	41:57	3	)
LEAF_NODE	42:0	42:0	2	{
STATEMENTS	43:1	43:25	2	
EXPR_STATEMENT	43:1	43:10	3	( void ) fd ;
EXPR	43:1	43:8	4	( void ) fd
LEAF_NODE	43:1	43:1	5	(
TYPE_NAME	43:2	43:2	5	void
LEAF_NODE	43:2	43:2	6	void
LEAF_NODE	43:6	43:6	5	)
FIELD	43:8	43:8	5	fd
LEAF_NODE	43:8	43:8	6	fd
LEAF_NODE	43:10	43:10	4	;
EXPR_STATEMENT	43:12	43:23	3	( void ) base ;
EXPR	43:12	43:19	4	( void ) base
LEAF_NODE	43:12	43:12	5	(
TYPE_NAME	43:13	43:13	5	void
LEAF_NODE	43:13	43:13	6	void
LEAF_NODE	43:17	43:17	5	)
FIELD	43:19	43:19	5	base
LEAF_NODE	43:19	43:19	6	base
LEAF_NODE	43:23	43:23	4	;
EXPR_STATEMENT	43:25	43:36	3	( void ) size ;
EXPR	43:25	43:32	4	( void ) size
LEAF_NODE	43:25	43:25	5	(
TYPE_NAME	43:26	43:26	5	void
LEAF_NODE	43:26	43:26	6	void
LEAF_NODE	43:30	43:30	5	)
FIELD	43:32	43:32	5	size
LEAF_NODE	43:32	43:32	6	size
LEAF_NODE	43:36	43:36	4	;
LEAF_NODE	44:0	44:0	2	}
FUNCTION_DEF	46:0	68:0	1	
RETURN_TYPE	46:0	46:0	2	int
TYPE_NAME	46:0	46:0	3	int
LEAF_NODE	46:0	46:0	4	int
FUNCTION_NAME	47:0	47:0	2	_TIFFgetMode
LEAF_NODE	47:0	47:0	3	_TIFFgetMode
PARAMETER_LIST	47:12	47:49	2	( const char * mode , const char * module )
LEAF_NODE	47:12	47:12	3	(
PARAMETER_DECL	47:13	47:25	3	const char * mode
TYPE	47:13	47:23	4	const char *
TYPE_NAME	47:13	47:19	5	const char
LEAF_NODE	47:13	47:13	6	const
LEAF_NODE	47:19	47:19	6	char
POINTER	47:23	47:23	5	*
LEAF_NODE	47:23	47:23	6	*
NAME	47:25	47:25	4	mode
LEAF_NODE	47:25	47:25	5	mode
LEAF_NODE	47:29	47:29	3	,
PARAMETER_DECL	47:31	47:43	3	const char * module
TYPE	47:31	47:41	4	const char *
TYPE_NAME	47:31	47:37	5	const char
LEAF_NODE	47:31	47:31	6	const
LEAF_NODE	47:37	47:37	6	char
POINTER	47:41	47:41	5	*
LEAF_NODE	47:41	47:41	6	*
NAME	47:43	47:43	4	module
LEAF_NODE	47:43	47:43	5	module
LEAF_NODE	47:49	47:49	3	)
LEAF_NODE	48:0	48:0	2	{
STATEMENTS	49:1	67:11	2	
SIMPLE_DECL	49:1	49:11	3	int m ; m = - 1 ;
VAR_DECL	49:1	49:5	4	int m ; m = - 1
TYPE	49:1	49:1	5	int
TYPE_NAME	49:1	49:1	6	int
LEAF_NODE	49:1	49:1	7	int
NAME	49:5	49:5	5	m
LEAF_NODE	49:5	49:5	6	m
LEAF_NODE	0:0	0:0	5	;
INIT	49:5	49:5	5	m = - 1
ASSIGN	49:5	49:9	6	m = - 1
LVAL	49:5	49:5	7	m
NAME	49:5	49:5	8	m
LEAF_NODE	49:5	49:5	9	m
ASSIGN_OP	49:7	49:7	7	=
LEAF_NODE	49:7	49:7	8	=
RVAL	49:9	49:9	7	- 1
UNARY_EXPR	49:9	49:10	8	- 1
UNARY_OPERATOR	49:9	49:9	9	-
LEAF_NODE	49:9	49:9	10	-
FIELD	49:10	49:10	9	1
LEAF_NODE	49:10	49:10	10	1
LEAF_NODE	49:11	49:11	4	;
SELECTION	51:1	51:18	3	
KEYWORD	51:1	51:1	4	switch
LEAF_NODE	51:1	51:1	5	switch
LEAF_NODE	51:8	51:8	4	(
CONDITION	51:9	51:9	4	mode [ 0 ]
EXPR	51:9	51:9	5	mode [ 0 ]
FIELD	51:9	51:15	6	mode [ 0 ]
LEAF_NODE	51:9	51:9	7	mode
LEAF_NODE	51:13	51:13	7	[
EXPR	51:14	51:14	7	0
FIELD	51:14	51:14	8	0
LEAF_NODE	51:14	51:14	9	0
LEAF_NODE	51:15	51:15	7	]
LEAF_NODE	51:16	51:16	4	)
STATEMENTS	51:18	66:1	4	
LEAF_NODE	51:18	51:18	5	{
STATEMENTS	52:1	65:2	5	
LEAF_NODE	52:1	52:1	6	case
LEAF_NODE	52:6	52:6	6	'r'
LEAF_NODE	52:9	52:9	6	:
EXPR_STATEMENT	53:2	53:14	6	m = O_RDONLY ;
EXPR	53:2	53:2	7	m = O_RDONLY
ASSIGN	53:2	53:6	8	m = O_RDONLY
LVAL	53:2	53:2	9	m
FIELD	53:2	53:2	10	m
LEAF_NODE	53:2	53:2	11	m
ASSIGN_OP	53:4	53:4	9	=
LEAF_NODE	53:4	53:4	10	=
RVAL	53:6	53:6	9	O_RDONLY
FIELD	53:6	53:6	10	O_RDONLY
LEAF_NODE	53:6	53:6	11	O_RDONLY
LEAF_NODE	53:14	53:14	7	;
SELECTION	54:2	55:3	6	
KEYWORD	54:2	54:2	7	if
LEAF_NODE	54:2	54:2	8	if
LEAF_NODE	54:5	54:5	7	(
CONDITION	54:6	54:6	7	mode [ 1 ] == '+'
EXPR	54:6	54:17	8	mode [ 1 ] == '+'
FIELD	54:6	54:12	9	mode [ 1 ]
LEAF_NODE	54:6	54:6	10	mode
LEAF_NODE	54:10	54:10	10	[
EXPR	54:11	54:11	10	1
FIELD	54:11	54:11	11	1
LEAF_NODE	54:11	54:11	12	1
LEAF_NODE	54:12	54:12	10	]
EQ_OPERATOR	54:14	54:14	9	==
LEAF_NODE	54:14	54:14	10	==
FIELD	54:17	54:17	9	'+'
LEAF_NODE	54:17	54:17	10	'+'
LEAF_NODE	54:20	54:20	7	)
STATEMENTS	55:3	55:3	7	
EXPR_STATEMENT	55:3	55:13	8	m = O_RDWR ;
EXPR	55:3	55:3	9	m = O_RDWR
ASSIGN	55:3	55:7	10	m = O_RDWR
LVAL	55:3	55:3	11	m
FIELD	55:3	55:3	12	m
LEAF_NODE	55:3	55:3	13	m
ASSIGN_OP	55:5	55:5	11	=
LEAF_NODE	55:5	55:5	12	=
RVAL	55:7	55:7	11	O_RDWR
FIELD	55:7	55:7	12	O_RDWR
LEAF_NODE	55:7	55:7	13	O_RDWR
LEAF_NODE	55:13	55:13	9	;
JUMP_STATEMENT	56:2	56:7	6	break DESTINATION ;
KEYWORD	56:2	56:2	7	break
LEAF_NODE	56:2	56:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	56:7	56:7	7	;
LEAF_NODE	57:1	57:1	6	case
LEAF_NODE	57:6	57:6	6	'w'
LEAF_NODE	57:9	57:9	6	:
LEAF_NODE	58:1	58:1	6	case
LEAF_NODE	58:6	58:6	6	'a'
LEAF_NODE	58:9	58:9	6	:
EXPR_STATEMENT	59:2	59:20	6	m = O_RDWR | O_CREAT ;
EXPR	59:2	59:2	7	m = O_RDWR | O_CREAT
ASSIGN	59:2	59:6	8	m = O_RDWR | O_CREAT
LVAL	59:2	59:2	9	m
FIELD	59:2	59:2	10	m
LEAF_NODE	59:2	59:2	11	m
ASSIGN_OP	59:4	59:4	9	=
LEAF_NODE	59:4	59:4	10	=
RVAL	59:6	59:6	9	O_RDWR | O_CREAT
BIT_OR	59:6	59:13	10	O_RDWR | O_CREAT
BIT_OR_ELEM	59:6	59:6	11	O_RDWR
FIELD	59:6	59:6	12	O_RDWR
LEAF_NODE	59:6	59:6	13	O_RDWR
LEAF_NODE	59:12	59:12	11	|
BIT_OR_ELEM	59:13	59:13	11	O_CREAT
FIELD	59:13	59:13	12	O_CREAT
LEAF_NODE	59:13	59:13	13	O_CREAT
LEAF_NODE	59:20	59:20	7	;
SELECTION	60:2	61:3	6	
KEYWORD	60:2	60:2	7	if
LEAF_NODE	60:2	60:2	8	if
LEAF_NODE	60:5	60:5	7	(
CONDITION	60:6	60:6	7	mode [ 0 ] == 'w'
EXPR	60:6	60:17	8	mode [ 0 ] == 'w'
FIELD	60:6	60:12	9	mode [ 0 ]
LEAF_NODE	60:6	60:6	10	mode
LEAF_NODE	60:10	60:10	10	[
EXPR	60:11	60:11	10	0
FIELD	60:11	60:11	11	0
LEAF_NODE	60:11	60:11	12	0
LEAF_NODE	60:12	60:12	10	]
EQ_OPERATOR	60:14	60:14	9	==
LEAF_NODE	60:14	60:14	10	==
FIELD	60:17	60:17	9	'w'
LEAF_NODE	60:17	60:17	10	'w'
LEAF_NODE	60:20	60:20	7	)
STATEMENTS	61:3	61:3	7	
EXPR_STATEMENT	61:3	61:15	8	m |= O_TRUNC ;
EXPR	61:3	61:3	9	m |= O_TRUNC
ASSIGN	61:3	61:8	10	m |= O_TRUNC
LVAL	61:3	61:3	11	m
FIELD	61:3	61:3	12	m
LEAF_NODE	61:3	61:3	13	m
ASSIGN_OP	61:5	61:5	11	|=
LEAF_NODE	61:5	61:5	12	|=
RVAL	61:8	61:8	11	O_TRUNC
FIELD	61:8	61:8	12	O_TRUNC
LEAF_NODE	61:8	61:8	13	O_TRUNC
LEAF_NODE	61:15	61:15	9	;
JUMP_STATEMENT	62:2	62:7	6	break DESTINATION ;
KEYWORD	62:2	62:2	7	break
LEAF_NODE	62:2	62:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	62:7	62:7	7	;
LABEL	63:1	63:8	6	default :
LEAF_NODE	63:1	63:1	7	default
LEAF_NODE	63:8	63:8	7	:
EXPR_STATEMENT	64:2	64:51	6	TIFFErrorExt ( 0 , module , "\"%s\": Bad mode" , mode ) ;
EXPR	64:2	64:2	7	TIFFErrorExt ( 0 , module , "\"%s\": Bad mode" , mode )
FUNCTION_CALL	64:2	64:50	8	TIFFErrorExt ( 0 , module , "\"%s\": Bad mode" , mode )
CALLEE	64:2	64:2	9	TIFFErrorExt
LEAF_NODE	64:2	64:2	10	TIFFErrorExt
LEAF_NODE	64:14	64:14	9	(
ARGUMENT	64:15	64:15	9	0
FIELD	64:15	64:15	10	0
LEAF_NODE	64:15	64:15	11	0
LEAF_NODE	64:16	64:16	9	,
ARGUMENT	64:18	64:18	9	module
FIELD	64:18	64:18	10	module
LEAF_NODE	64:18	64:18	11	module
LEAF_NODE	64:24	64:24	9	,
ARGUMENT	64:26	64:26	9	"\"%s\": Bad mode"
FIELD	64:26	64:26	10	"\"%s\": Bad mode"
LEAF_NODE	64:26	64:26	11	"\"%s\": Bad mode"
LEAF_NODE	64:44	64:44	9	,
ARGUMENT	64:46	64:46	9	mode
FIELD	64:46	64:46	10	mode
LEAF_NODE	64:46	64:46	11	mode
LEAF_NODE	64:50	64:50	9	)
LEAF_NODE	64:51	64:51	7	;
JUMP_STATEMENT	65:2	65:7	6	break DESTINATION ;
KEYWORD	65:2	65:2	7	break
LEAF_NODE	65:2	65:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	65:7	65:7	7	;
LEAF_NODE	66:1	66:1	5	}
LEAF_NODE	67:1	67:1	3	return
LEAF_NODE	67:8	67:8	3	(
LEAF_NODE	67:9	67:9	3	m
LEAF_NODE	67:10	67:10	3	)
LEAF_NODE	67:11	67:11	3	;
LEAF_NODE	68:0	68:0	2	}
SIMPLE_DECL	83:8	83:46	1	const char [ ] module ; module = "TIFFClientOpen" ;
VAR_DECL	83:8	83:19	2	const char [ ] module ; module = "TIFFClientOpen"
TYPE	83:8	83:25	3	const char [ ]
TYPE_NAME	83:8	83:14	4	const char
LEAF_NODE	83:8	83:8	5	const
LEAF_NODE	83:14	83:14	5	char
TYPE_SUFFIX	83:25	83:26	4	[ ]
LEAF_NODE	83:25	83:25	5	[
LEAF_NODE	83:26	83:26	5	]
NAME	83:19	83:19	3	module
LEAF_NODE	83:19	83:19	4	module
LEAF_NODE	0:0	0:0	3	;
INIT	83:19	83:19	3	module = "TIFFClientOpen"
ASSIGN	83:19	83:30	4	module = "TIFFClientOpen"
LVAL	83:19	83:19	5	module
NAME	83:19	83:19	6	module
LEAF_NODE	83:19	83:19	7	module
ASSIGN_OP	83:28	83:28	5	=
LEAF_NODE	83:28	83:28	6	=
RVAL	83:30	83:30	5	"TIFFClientOpen"
FIELD	83:30	83:30	6	"TIFFClientOpen"
LEAF_NODE	83:30	83:30	7	"TIFFClientOpen"
LEAF_NODE	83:46	83:46	2	;
SIMPLE_DECL	84:1	84:10	1	TIFF * tif ;
VAR_DECL	84:1	84:7	2	TIFF * tif
TYPE	84:1	84:6	3	TIFF *
TYPE_NAME	84:1	84:1	4	TIFF
LEAF_NODE	84:1	84:1	5	TIFF
POINTER	84:6	84:6	4	*
LEAF_NODE	84:6	84:6	5	*
NAME	84:7	84:7	3	tif
LEAF_NODE	84:7	84:7	4	tif
LEAF_NODE	84:10	84:10	2	;
SIMPLE_DECL	85:1	85:6	1	int m ;
VAR_DECL	85:1	85:5	2	int m
TYPE	85:1	85:1	3	int
TYPE_NAME	85:1	85:1	4	int
LEAF_NODE	85:1	85:1	5	int
NAME	85:5	85:5	3	m
LEAF_NODE	85:5	85:5	4	m
LEAF_NODE	85:6	85:6	2	;
SIMPLE_DECL	86:1	86:15	1	const char * cp ;
VAR_DECL	86:1	86:13	2	const char * cp
TYPE	86:1	86:11	3	const char *
TYPE_NAME	86:1	86:7	4	const char
LEAF_NODE	86:1	86:1	5	const
LEAF_NODE	86:7	86:7	5	char
POINTER	86:11	86:11	4	*
LEAF_NODE	86:11	86:11	5	*
NAME	86:13	86:13	3	cp
LEAF_NODE	86:13	86:13	4	cp
LEAF_NODE	86:15	86:15	2	;
SIMPLE_DECL	101:2	104:5	1	union CLASS_NAME BASE_CLASSES { uint8 [ 2 ] a8 ; uint16 a16 ; } n ;
VAR_DECL	101:2	104:4	2	union CLASS_NAME BASE_CLASSES { uint8 [ 2 ] a8 ; uint16 a16 ; } n
TYPE	101:2	101:2	3	union CLASS_NAME BASE_CLASSES { uint8 [ 2 ] a8 ; uint16 a16 ; }
CLASS_DEF	101:2	104:2	4	union CLASS_NAME BASE_CLASSES { uint8 [ 2 ] a8 ; uint16 a16 ; }
LEAF_NODE	101:2	101:2	5	union
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	101:7	101:7	5	{
CLASS_CONTENT	102:3	103:3	5	uint8 [ 2 ] a8 ; uint16 a16 ;
SIMPLE_DECL	102:3	102:14	6	uint8 [ 2 ] a8 ;
VAR_DECL	102:3	102:9	7	uint8 [ 2 ] a8
TYPE	102:3	102:11	8	uint8 [ 2 ]
TYPE_NAME	102:3	102:3	9	uint8
LEAF_NODE	102:3	102:3	10	uint8
TYPE_SUFFIX	102:11	102:13	9	[ 2 ]
LEAF_NODE	102:11	102:11	10	[
FIELD	102:12	102:12	10	2
LEAF_NODE	102:12	102:12	11	2
LEAF_NODE	102:13	102:13	10	]
NAME	102:9	102:9	8	a8
LEAF_NODE	102:9	102:9	9	a8
LEAF_NODE	102:14	102:14	7	;
SIMPLE_DECL	103:3	103:13	6	uint16 a16 ;
VAR_DECL	103:3	103:10	7	uint16 a16
TYPE	103:3	103:3	8	uint16
TYPE_NAME	103:3	103:3	9	uint16
LEAF_NODE	103:3	103:3	10	uint16
NAME	103:10	103:10	8	a16
LEAF_NODE	103:10	103:10	9	a16
LEAF_NODE	103:13	103:13	7	;
LEAF_NODE	104:2	104:2	5	}
NAME	104:4	104:4	3	n
LEAF_NODE	104:4	104:4	4	n
LEAF_NODE	104:5	104:5	2	;
SIMPLE_DECL	461:4	461:12	1	toff_t n ;
VAR_DECL	461:4	461:11	2	toff_t n
TYPE	461:4	461:4	3	toff_t
TYPE_NAME	461:4	461:4	4	toff_t
LEAF_NODE	461:4	461:4	5	toff_t
NAME	461:11	461:11	3	n
LEAF_NODE	461:11	461:11	4	n
LEAF_NODE	461:12	461:12	2	;
FUNCTION_DEF	512:0	516:0	1	
RETURN_TYPE	512:0	512:11	2	const char *
TYPE_NAME	512:0	512:6	3	const char
LEAF_NODE	512:0	512:0	4	const
LEAF_NODE	512:6	512:6	4	char
LEAF_NODE	512:11	512:11	3	*
FUNCTION_NAME	513:0	513:0	2	TIFFFileName
LEAF_NODE	513:0	513:0	3	TIFFFileName
PARAMETER_LIST	513:12	513:22	2	( TIFF * tif )
LEAF_NODE	513:12	513:12	3	(
PARAMETER_DECL	513:13	513:19	3	TIFF * tif
TYPE	513:13	513:17	4	TIFF *
TYPE_NAME	513:13	513:13	5	TIFF
LEAF_NODE	513:13	513:13	6	TIFF
POINTER	513:17	513:17	5	*
LEAF_NODE	513:17	513:17	6	*
NAME	513:19	513:19	4	tif
LEAF_NODE	513:19	513:19	5	tif
LEAF_NODE	513:22	513:22	3	)
LEAF_NODE	514:0	514:0	2	{
STATEMENTS	515:1	515:1	2	
JUMP_STATEMENT	515:1	515:23	3	return ( tif -> tif_name ) ;
KEYWORD	515:1	515:1	4	return
LEAF_NODE	515:1	515:1	5	return
DESTINATION	515:8	515:8	4	( tif -> tif_name )
EXPR	515:8	515:22	5	( tif -> tif_name )
LEAF_NODE	515:8	515:8	6	(
FIELD	515:9	515:14	6	tif -> tif_name
LEAF_NODE	515:9	515:9	7	tif
LEAF_NODE	515:12	515:12	7	->
LEAF_NODE	515:14	515:14	7	tif_name
LEAF_NODE	515:22	515:22	6	)
LEAF_NODE	515:23	515:23	4	;
LEAF_NODE	516:0	516:0	2	}
FUNCTION_DEF	521:0	527:0	1	
RETURN_TYPE	521:0	521:11	2	const char *
TYPE_NAME	521:0	521:6	3	const char
LEAF_NODE	521:0	521:0	4	const
LEAF_NODE	521:6	521:6	4	char
LEAF_NODE	521:11	521:11	3	*
FUNCTION_NAME	522:0	522:0	2	TIFFSetFileName
LEAF_NODE	522:0	522:0	3	TIFFSetFileName
PARAMETER_LIST	522:15	522:43	2	( TIFF * tif , const char * name )
LEAF_NODE	522:15	522:15	3	(
PARAMETER_DECL	522:16	522:22	3	TIFF * tif
TYPE	522:16	522:20	4	TIFF *
TYPE_NAME	522:16	522:16	5	TIFF
LEAF_NODE	522:16	522:16	6	TIFF
POINTER	522:20	522:20	5	*
LEAF_NODE	522:20	522:20	6	*
NAME	522:22	522:22	4	tif
LEAF_NODE	522:22	522:22	5	tif
LEAF_NODE	522:25	522:25	3	,
PARAMETER_DECL	522:27	522:39	3	const char * name
TYPE	522:27	522:38	4	const char *
TYPE_NAME	522:27	522:33	5	const char
LEAF_NODE	522:27	522:27	6	const
LEAF_NODE	522:33	522:33	6	char
POINTER	522:38	522:38	5	*
LEAF_NODE	522:38	522:38	6	*
NAME	522:39	522:39	4	name
LEAF_NODE	522:39	522:39	5	name
LEAF_NODE	522:43	522:43	3	)
LEAF_NODE	523:0	523:0	2	{
STATEMENTS	524:1	526:18	2	
SIMPLE_DECL	524:1	524:37	3	const char * old_name ; old_name = tif -> tif_name ;
VAR_DECL	524:1	524:13	4	const char * old_name ; old_name = tif -> tif_name
TYPE	524:1	524:11	5	const char *
TYPE_NAME	524:1	524:7	6	const char
LEAF_NODE	524:1	524:1	7	const
LEAF_NODE	524:7	524:7	7	char
POINTER	524:11	524:11	6	*
LEAF_NODE	524:11	524:11	7	*
NAME	524:13	524:13	5	old_name
LEAF_NODE	524:13	524:13	6	old_name
LEAF_NODE	0:0	0:0	5	;
INIT	524:13	524:13	5	old_name = tif -> tif_name
ASSIGN	524:13	524:24	6	old_name = tif -> tif_name
LVAL	524:13	524:13	7	old_name
NAME	524:13	524:13	8	old_name
LEAF_NODE	524:13	524:13	9	old_name
ASSIGN_OP	524:22	524:22	7	=
LEAF_NODE	524:22	524:22	8	=
RVAL	524:24	524:24	7	tif -> tif_name
FIELD	524:24	524:29	8	tif -> tif_name
LEAF_NODE	524:24	524:24	9	tif
LEAF_NODE	524:27	524:27	9	->
LEAF_NODE	524:29	524:29	9	tif_name
LEAF_NODE	524:37	524:37	4	;
EXPR_STATEMENT	525:1	525:29	3	tif -> tif_name = ( char * ) name ;
EXPR	525:1	525:1	4	tif -> tif_name = ( char * ) name
ASSIGN	525:1	525:17	5	tif -> tif_name = ( char * ) name
LVAL	525:1	525:1	6	tif -> tif_name
FIELD	525:1	525:6	7	tif -> tif_name
LEAF_NODE	525:1	525:1	8	tif
LEAF_NODE	525:4	525:4	8	->
LEAF_NODE	525:6	525:6	8	tif_name
ASSIGN_OP	525:15	525:15	6	=
LEAF_NODE	525:15	525:15	7	=
RVAL	525:17	525:25	6	( char * ) name
LEAF_NODE	525:17	525:17	7	(
TYPE_NAME	525:18	525:18	7	char
LEAF_NODE	525:18	525:18	8	char
LEAF_NODE	525:23	525:23	7	*
LEAF_NODE	525:24	525:24	7	)
FIELD	525:25	525:25	7	name
LEAF_NODE	525:25	525:25	8	name
LEAF_NODE	525:29	525:29	4	;
LEAF_NODE	526:1	526:1	3	return
LEAF_NODE	526:8	526:8	3	(
LEAF_NODE	526:9	526:9	3	old_name
LEAF_NODE	526:17	526:17	3	)
LEAF_NODE	526:18	526:18	3	;
LEAF_NODE	527:0	527:0	2	}
FUNCTION_DEF	532:0	536:0	1	
RETURN_TYPE	532:0	532:0	2	int
TYPE_NAME	532:0	532:0	3	int
LEAF_NODE	532:0	532:0	4	int
FUNCTION_NAME	533:0	533:0	2	TIFFFileno
LEAF_NODE	533:0	533:0	3	TIFFFileno
PARAMETER_LIST	533:10	533:20	2	( TIFF * tif )
LEAF_NODE	533:10	533:10	3	(
PARAMETER_DECL	533:11	533:17	3	TIFF * tif
TYPE	533:11	533:15	4	TIFF *
TYPE_NAME	533:11	533:11	5	TIFF
LEAF_NODE	533:11	533:11	6	TIFF
POINTER	533:15	533:15	5	*
LEAF_NODE	533:15	533:15	6	*
NAME	533:17	533:17	4	tif
LEAF_NODE	533:17	533:17	5	tif
LEAF_NODE	533:20	533:20	3	)
LEAF_NODE	534:0	534:0	2	{
STATEMENTS	535:1	535:1	2	
JUMP_STATEMENT	535:1	535:21	3	return ( tif -> tif_fd ) ;
KEYWORD	535:1	535:1	4	return
LEAF_NODE	535:1	535:1	5	return
DESTINATION	535:8	535:8	4	( tif -> tif_fd )
EXPR	535:8	535:20	5	( tif -> tif_fd )
LEAF_NODE	535:8	535:8	6	(
FIELD	535:9	535:14	6	tif -> tif_fd
LEAF_NODE	535:9	535:9	7	tif
LEAF_NODE	535:12	535:12	7	->
LEAF_NODE	535:14	535:14	7	tif_fd
LEAF_NODE	535:20	535:20	6	)
LEAF_NODE	535:21	535:21	4	;
LEAF_NODE	536:0	536:0	2	}
FUNCTION_DEF	541:0	547:0	1	
RETURN_TYPE	541:0	541:0	2	int
TYPE_NAME	541:0	541:0	3	int
LEAF_NODE	541:0	541:0	4	int
FUNCTION_NAME	542:0	542:0	2	TIFFSetFileno
LEAF_NODE	542:0	542:0	3	TIFFSetFileno
PARAMETER_LIST	542:13	542:31	2	( TIFF * tif , int fd )
LEAF_NODE	542:13	542:13	3	(
PARAMETER_DECL	542:14	542:20	3	TIFF * tif
TYPE	542:14	542:18	4	TIFF *
TYPE_NAME	542:14	542:14	5	TIFF
LEAF_NODE	542:14	542:14	6	TIFF
POINTER	542:18	542:18	5	*
LEAF_NODE	542:18	542:18	6	*
NAME	542:20	542:20	4	tif
LEAF_NODE	542:20	542:20	5	tif
LEAF_NODE	542:23	542:23	3	,
PARAMETER_DECL	542:25	542:29	3	int fd
TYPE	542:25	542:25	4	int
TYPE_NAME	542:25	542:25	5	int
LEAF_NODE	542:25	542:25	6	int
NAME	542:29	542:29	4	fd
LEAF_NODE	542:29	542:29	5	fd
LEAF_NODE	542:31	542:31	3	)
LEAF_NODE	543:0	543:0	2	{
STATEMENTS	544:8	546:1	2	
SIMPLE_DECL	544:8	544:32	3	int old_fd ; old_fd = tif -> tif_fd ;
VAR_DECL	544:8	544:12	4	int old_fd ; old_fd = tif -> tif_fd
TYPE	544:8	544:8	5	int
TYPE_NAME	544:8	544:8	6	int
LEAF_NODE	544:8	544:8	7	int
NAME	544:12	544:12	5	old_fd
LEAF_NODE	544:12	544:12	6	old_fd
LEAF_NODE	0:0	0:0	5	;
INIT	544:12	544:12	5	old_fd = tif -> tif_fd
ASSIGN	544:12	544:21	6	old_fd = tif -> tif_fd
LVAL	544:12	544:12	7	old_fd
NAME	544:12	544:12	8	old_fd
LEAF_NODE	544:12	544:12	9	old_fd
ASSIGN_OP	544:19	544:19	7	=
LEAF_NODE	544:19	544:19	8	=
RVAL	544:21	544:21	7	tif -> tif_fd
FIELD	544:21	544:26	8	tif -> tif_fd
LEAF_NODE	544:21	544:21	9	tif
LEAF_NODE	544:24	544:24	9	->
LEAF_NODE	544:26	544:26	9	tif_fd
LEAF_NODE	544:32	544:32	4	;
EXPR_STATEMENT	545:1	545:17	3	tif -> tif_fd = fd ;
EXPR	545:1	545:1	4	tif -> tif_fd = fd
ASSIGN	545:1	545:15	5	tif -> tif_fd = fd
LVAL	545:1	545:1	6	tif -> tif_fd
FIELD	545:1	545:6	7	tif -> tif_fd
LEAF_NODE	545:1	545:1	8	tif
LEAF_NODE	545:4	545:4	8	->
LEAF_NODE	545:6	545:6	8	tif_fd
ASSIGN_OP	545:13	545:13	6	=
LEAF_NODE	545:13	545:13	7	=
RVAL	545:15	545:15	6	fd
FIELD	545:15	545:15	7	fd
LEAF_NODE	545:15	545:15	8	fd
LEAF_NODE	545:17	545:17	4	;
JUMP_STATEMENT	546:1	546:14	3	return old_fd ;
KEYWORD	546:1	546:1	4	return
LEAF_NODE	546:1	546:1	5	return
DESTINATION	546:8	546:8	4	old_fd
EXPR	546:8	546:8	5	old_fd
FIELD	546:8	546:8	6	old_fd
LEAF_NODE	546:8	546:8	7	old_fd
LEAF_NODE	546:14	546:14	4	;
LEAF_NODE	547:0	547:0	2	}
FUNCTION_DEF	552:0	556:0	1	
RETURN_TYPE	552:0	552:0	2	thandle_t
TYPE_NAME	552:0	552:0	3	thandle_t
LEAF_NODE	552:0	552:0	4	thandle_t
FUNCTION_NAME	553:0	553:0	2	TIFFClientdata
LEAF_NODE	553:0	553:0	3	TIFFClientdata
PARAMETER_LIST	553:14	553:24	2	( TIFF * tif )
LEAF_NODE	553:14	553:14	3	(
PARAMETER_DECL	553:15	553:21	3	TIFF * tif
TYPE	553:15	553:19	4	TIFF *
TYPE_NAME	553:15	553:15	5	TIFF
LEAF_NODE	553:15	553:15	6	TIFF
POINTER	553:19	553:19	5	*
LEAF_NODE	553:19	553:19	6	*
NAME	553:21	553:21	4	tif
LEAF_NODE	553:21	553:21	5	tif
LEAF_NODE	553:24	553:24	3	)
LEAF_NODE	554:0	554:0	2	{
STATEMENTS	555:1	555:1	2	
JUMP_STATEMENT	555:1	555:29	3	return ( tif -> tif_clientdata ) ;
KEYWORD	555:1	555:1	4	return
LEAF_NODE	555:1	555:1	5	return
DESTINATION	555:8	555:8	4	( tif -> tif_clientdata )
EXPR	555:8	555:28	5	( tif -> tif_clientdata )
LEAF_NODE	555:8	555:8	6	(
FIELD	555:9	555:14	6	tif -> tif_clientdata
LEAF_NODE	555:9	555:9	7	tif
LEAF_NODE	555:12	555:12	7	->
LEAF_NODE	555:14	555:14	7	tif_clientdata
LEAF_NODE	555:28	555:28	6	)
LEAF_NODE	555:29	555:29	4	;
LEAF_NODE	556:0	556:0	2	}
FUNCTION_DEF	561:0	567:0	1	
RETURN_TYPE	561:0	561:0	2	thandle_t
TYPE_NAME	561:0	561:0	3	thandle_t
LEAF_NODE	561:0	561:0	4	thandle_t
FUNCTION_NAME	562:0	562:0	2	TIFFSetClientdata
LEAF_NODE	562:0	562:0	3	TIFFSetClientdata
PARAMETER_LIST	562:17	562:47	2	( TIFF * tif , thandle_t newvalue )
LEAF_NODE	562:17	562:17	3	(
PARAMETER_DECL	562:18	562:24	3	TIFF * tif
TYPE	562:18	562:22	4	TIFF *
TYPE_NAME	562:18	562:18	5	TIFF
LEAF_NODE	562:18	562:18	6	TIFF
POINTER	562:22	562:22	5	*
LEAF_NODE	562:22	562:22	6	*
NAME	562:24	562:24	4	tif
LEAF_NODE	562:24	562:24	5	tif
LEAF_NODE	562:27	562:27	3	,
PARAMETER_DECL	562:29	562:39	3	thandle_t newvalue
TYPE	562:29	562:29	4	thandle_t
TYPE_NAME	562:29	562:29	5	thandle_t
LEAF_NODE	562:29	562:29	6	thandle_t
NAME	562:39	562:39	4	newvalue
LEAF_NODE	562:39	562:39	5	newvalue
LEAF_NODE	562:47	562:47	3	)
LEAF_NODE	563:0	563:0	2	{
STATEMENTS	564:1	566:1	2	
SIMPLE_DECL	564:1	564:34	3	thandle_t m ; m = tif -> tif_clientdata ;
VAR_DECL	564:1	564:11	4	thandle_t m ; m = tif -> tif_clientdata
TYPE	564:1	564:1	5	thandle_t
TYPE_NAME	564:1	564:1	6	thandle_t
LEAF_NODE	564:1	564:1	7	thandle_t
NAME	564:11	564:11	5	m
LEAF_NODE	564:11	564:11	6	m
LEAF_NODE	0:0	0:0	5	;
INIT	564:11	564:11	5	m = tif -> tif_clientdata
ASSIGN	564:11	564:15	6	m = tif -> tif_clientdata
LVAL	564:11	564:11	7	m
NAME	564:11	564:11	8	m
LEAF_NODE	564:11	564:11	9	m
ASSIGN_OP	564:13	564:13	7	=
LEAF_NODE	564:13	564:13	8	=
RVAL	564:15	564:15	7	tif -> tif_clientdata
FIELD	564:15	564:20	8	tif -> tif_clientdata
LEAF_NODE	564:15	564:15	9	tif
LEAF_NODE	564:18	564:18	9	->
LEAF_NODE	564:20	564:20	9	tif_clientdata
LEAF_NODE	564:34	564:34	4	;
EXPR_STATEMENT	565:1	565:31	3	tif -> tif_clientdata = newvalue ;
EXPR	565:1	565:1	4	tif -> tif_clientdata = newvalue
ASSIGN	565:1	565:23	5	tif -> tif_clientdata = newvalue
LVAL	565:1	565:1	6	tif -> tif_clientdata
FIELD	565:1	565:6	7	tif -> tif_clientdata
LEAF_NODE	565:1	565:1	8	tif
LEAF_NODE	565:4	565:4	8	->
LEAF_NODE	565:6	565:6	8	tif_clientdata
ASSIGN_OP	565:21	565:21	6	=
LEAF_NODE	565:21	565:21	7	=
RVAL	565:23	565:23	6	newvalue
FIELD	565:23	565:23	7	newvalue
LEAF_NODE	565:23	565:23	8	newvalue
LEAF_NODE	565:31	565:31	4	;
JUMP_STATEMENT	566:1	566:9	3	return m ;
KEYWORD	566:1	566:1	4	return
LEAF_NODE	566:1	566:1	5	return
DESTINATION	566:8	566:8	4	m
EXPR	566:8	566:8	5	m
FIELD	566:8	566:8	6	m
LEAF_NODE	566:8	566:8	7	m
LEAF_NODE	566:9	566:9	4	;
LEAF_NODE	567:0	567:0	2	}
FUNCTION_DEF	572:0	576:0	1	
RETURN_TYPE	572:0	572:0	2	int
TYPE_NAME	572:0	572:0	3	int
LEAF_NODE	572:0	572:0	4	int
FUNCTION_NAME	573:0	573:0	2	TIFFGetMode
LEAF_NODE	573:0	573:0	3	TIFFGetMode
PARAMETER_LIST	573:11	573:21	2	( TIFF * tif )
LEAF_NODE	573:11	573:11	3	(
PARAMETER_DECL	573:12	573:18	3	TIFF * tif
TYPE	573:12	573:16	4	TIFF *
TYPE_NAME	573:12	573:12	5	TIFF
LEAF_NODE	573:12	573:12	6	TIFF
POINTER	573:16	573:16	5	*
LEAF_NODE	573:16	573:16	6	*
NAME	573:18	573:18	4	tif
LEAF_NODE	573:18	573:18	5	tif
LEAF_NODE	573:21	573:21	3	)
LEAF_NODE	574:0	574:0	2	{
STATEMENTS	575:1	575:1	2	
JUMP_STATEMENT	575:1	575:23	3	return ( tif -> tif_mode ) ;
KEYWORD	575:1	575:1	4	return
LEAF_NODE	575:1	575:1	5	return
DESTINATION	575:8	575:8	4	( tif -> tif_mode )
EXPR	575:8	575:22	5	( tif -> tif_mode )
LEAF_NODE	575:8	575:8	6	(
FIELD	575:9	575:14	6	tif -> tif_mode
LEAF_NODE	575:9	575:9	7	tif
LEAF_NODE	575:12	575:12	7	->
LEAF_NODE	575:14	575:14	7	tif_mode
LEAF_NODE	575:22	575:22	6	)
LEAF_NODE	575:23	575:23	4	;
LEAF_NODE	576:0	576:0	2	}
FUNCTION_DEF	581:0	587:0	1	
RETURN_TYPE	581:0	581:0	2	int
TYPE_NAME	581:0	581:0	3	int
LEAF_NODE	581:0	581:0	4	int
FUNCTION_NAME	582:0	582:0	2	TIFFSetMode
LEAF_NODE	582:0	582:0	3	TIFFSetMode
PARAMETER_LIST	582:11	582:31	2	( TIFF * tif , int mode )
LEAF_NODE	582:11	582:11	3	(
PARAMETER_DECL	582:12	582:18	3	TIFF * tif
TYPE	582:12	582:16	4	TIFF *
TYPE_NAME	582:12	582:12	5	TIFF
LEAF_NODE	582:12	582:12	6	TIFF
POINTER	582:16	582:16	5	*
LEAF_NODE	582:16	582:16	6	*
NAME	582:18	582:18	4	tif
LEAF_NODE	582:18	582:18	5	tif
LEAF_NODE	582:21	582:21	3	,
PARAMETER_DECL	582:23	582:27	3	int mode
TYPE	582:23	582:23	4	int
TYPE_NAME	582:23	582:23	5	int
LEAF_NODE	582:23	582:23	6	int
NAME	582:27	582:27	4	mode
LEAF_NODE	582:27	582:27	5	mode
LEAF_NODE	582:31	582:31	3	)
LEAF_NODE	583:0	583:0	2	{
STATEMENTS	584:1	586:18	2	
SIMPLE_DECL	584:1	584:29	3	int old_mode ; old_mode = tif -> tif_mode ;
VAR_DECL	584:1	584:5	4	int old_mode ; old_mode = tif -> tif_mode
TYPE	584:1	584:1	5	int
TYPE_NAME	584:1	584:1	6	int
LEAF_NODE	584:1	584:1	7	int
NAME	584:5	584:5	5	old_mode
LEAF_NODE	584:5	584:5	6	old_mode
LEAF_NODE	0:0	0:0	5	;
INIT	584:5	584:5	5	old_mode = tif -> tif_mode
ASSIGN	584:5	584:16	6	old_mode = tif -> tif_mode
LVAL	584:5	584:5	7	old_mode
NAME	584:5	584:5	8	old_mode
LEAF_NODE	584:5	584:5	9	old_mode
ASSIGN_OP	584:14	584:14	7	=
LEAF_NODE	584:14	584:14	8	=
RVAL	584:16	584:16	7	tif -> tif_mode
FIELD	584:16	584:21	8	tif -> tif_mode
LEAF_NODE	584:16	584:16	9	tif
LEAF_NODE	584:19	584:19	9	->
LEAF_NODE	584:21	584:21	9	tif_mode
LEAF_NODE	584:29	584:29	4	;
EXPR_STATEMENT	585:1	585:21	3	tif -> tif_mode = mode ;
EXPR	585:1	585:1	4	tif -> tif_mode = mode
ASSIGN	585:1	585:17	5	tif -> tif_mode = mode
LVAL	585:1	585:1	6	tif -> tif_mode
FIELD	585:1	585:6	7	tif -> tif_mode
LEAF_NODE	585:1	585:1	8	tif
LEAF_NODE	585:4	585:4	8	->
LEAF_NODE	585:6	585:6	8	tif_mode
ASSIGN_OP	585:15	585:15	6	=
LEAF_NODE	585:15	585:15	7	=
RVAL	585:17	585:17	6	mode
FIELD	585:17	585:17	7	mode
LEAF_NODE	585:17	585:17	8	mode
LEAF_NODE	585:21	585:21	4	;
LEAF_NODE	586:1	586:1	3	return
LEAF_NODE	586:8	586:8	3	(
LEAF_NODE	586:9	586:9	3	old_mode
LEAF_NODE	586:17	586:17	3	)
LEAF_NODE	586:18	586:18	3	;
LEAF_NODE	587:0	587:0	2	}
FUNCTION_DEF	593:0	597:0	1	
RETURN_TYPE	593:0	593:0	2	int
TYPE_NAME	593:0	593:0	3	int
LEAF_NODE	593:0	593:0	4	int
FUNCTION_NAME	594:0	594:0	2	TIFFIsTiled
LEAF_NODE	594:0	594:0	3	TIFFIsTiled
PARAMETER_LIST	594:11	594:21	2	( TIFF * tif )
LEAF_NODE	594:11	594:11	3	(
PARAMETER_DECL	594:12	594:18	3	TIFF * tif
TYPE	594:12	594:16	4	TIFF *
TYPE_NAME	594:12	594:12	5	TIFF
LEAF_NODE	594:12	594:12	6	TIFF
POINTER	594:16	594:16	5	*
LEAF_NODE	594:16	594:16	6	*
NAME	594:18	594:18	4	tif
LEAF_NODE	594:18	594:18	5	tif
LEAF_NODE	594:21	594:21	3	)
LEAF_NODE	595:0	595:0	2	{
STATEMENTS	596:1	596:1	2	
JUMP_STATEMENT	596:1	596:22	3	return ( isTiled ( tif ) ) ;
KEYWORD	596:1	596:1	4	return
LEAF_NODE	596:1	596:1	5	return
DESTINATION	596:8	596:8	4	( isTiled ( tif ) )
EXPR	596:8	596:21	5	( isTiled ( tif ) )
LEAF_NODE	596:8	596:8	6	(
FUNCTION_CALL	596:9	596:20	6	isTiled ( tif )
CALLEE	596:9	596:9	7	isTiled
LEAF_NODE	596:9	596:9	8	isTiled
LEAF_NODE	596:16	596:16	7	(
ARGUMENT	596:17	596:17	7	tif
FIELD	596:17	596:17	8	tif
LEAF_NODE	596:17	596:17	9	tif
LEAF_NODE	596:20	596:20	7	)
LEAF_NODE	596:21	596:21	6	)
LEAF_NODE	596:22	596:22	4	;
LEAF_NODE	597:0	597:0	2	}
FUNCTION_DEF	602:0	606:0	1	
RETURN_TYPE	602:0	602:0	2	uint32
TYPE_NAME	602:0	602:0	3	uint32
LEAF_NODE	602:0	602:0	4	uint32
FUNCTION_NAME	603:0	603:0	2	TIFFCurrentRow
LEAF_NODE	603:0	603:0	3	TIFFCurrentRow
PARAMETER_LIST	603:14	603:24	2	( TIFF * tif )
LEAF_NODE	603:14	603:14	3	(
PARAMETER_DECL	603:15	603:21	3	TIFF * tif
TYPE	603:15	603:19	4	TIFF *
TYPE_NAME	603:15	603:15	5	TIFF
LEAF_NODE	603:15	603:15	6	TIFF
POINTER	603:19	603:19	5	*
LEAF_NODE	603:19	603:19	6	*
NAME	603:21	603:21	4	tif
LEAF_NODE	603:21	603:21	5	tif
LEAF_NODE	603:24	603:24	3	)
LEAF_NODE	604:0	604:0	2	{
STATEMENTS	605:1	605:1	2	
JUMP_STATEMENT	605:1	605:22	3	return ( tif -> tif_row ) ;
KEYWORD	605:1	605:1	4	return
LEAF_NODE	605:1	605:1	5	return
DESTINATION	605:8	605:8	4	( tif -> tif_row )
EXPR	605:8	605:21	5	( tif -> tif_row )
LEAF_NODE	605:8	605:8	6	(
FIELD	605:9	605:14	6	tif -> tif_row
LEAF_NODE	605:9	605:9	7	tif
LEAF_NODE	605:12	605:12	7	->
LEAF_NODE	605:14	605:14	7	tif_row
LEAF_NODE	605:21	605:21	6	)
LEAF_NODE	605:22	605:22	4	;
LEAF_NODE	606:0	606:0	2	}
FUNCTION_DEF	611:0	615:0	1	
RETURN_TYPE	611:0	611:0	2	uint16
TYPE_NAME	611:0	611:0	3	uint16
LEAF_NODE	611:0	611:0	4	uint16
FUNCTION_NAME	612:0	612:0	2	TIFFCurrentDirectory
LEAF_NODE	612:0	612:0	3	TIFFCurrentDirectory
PARAMETER_LIST	612:20	612:30	2	( TIFF * tif )
LEAF_NODE	612:20	612:20	3	(
PARAMETER_DECL	612:21	612:27	3	TIFF * tif
TYPE	612:21	612:25	4	TIFF *
TYPE_NAME	612:21	612:21	5	TIFF
LEAF_NODE	612:21	612:21	6	TIFF
POINTER	612:25	612:25	5	*
LEAF_NODE	612:25	612:25	6	*
NAME	612:27	612:27	4	tif
LEAF_NODE	612:27	612:27	5	tif
LEAF_NODE	612:30	612:30	3	)
LEAF_NODE	613:0	613:0	2	{
STATEMENTS	614:1	614:1	2	
JUMP_STATEMENT	614:1	614:25	3	return ( tif -> tif_curdir ) ;
KEYWORD	614:1	614:1	4	return
LEAF_NODE	614:1	614:1	5	return
DESTINATION	614:8	614:8	4	( tif -> tif_curdir )
EXPR	614:8	614:24	5	( tif -> tif_curdir )
LEAF_NODE	614:8	614:8	6	(
FIELD	614:9	614:14	6	tif -> tif_curdir
LEAF_NODE	614:9	614:9	7	tif
LEAF_NODE	614:12	614:12	7	->
LEAF_NODE	614:14	614:14	7	tif_curdir
LEAF_NODE	614:24	614:24	6	)
LEAF_NODE	614:25	614:25	4	;
LEAF_NODE	615:0	615:0	2	}
FUNCTION_DEF	620:0	624:0	1	
RETURN_TYPE	620:0	620:0	2	uint32
TYPE_NAME	620:0	620:0	3	uint32
LEAF_NODE	620:0	620:0	4	uint32
FUNCTION_NAME	621:0	621:0	2	TIFFCurrentStrip
LEAF_NODE	621:0	621:0	3	TIFFCurrentStrip
PARAMETER_LIST	621:16	621:26	2	( TIFF * tif )
LEAF_NODE	621:16	621:16	3	(
PARAMETER_DECL	621:17	621:23	3	TIFF * tif
TYPE	621:17	621:21	4	TIFF *
TYPE_NAME	621:17	621:17	5	TIFF
LEAF_NODE	621:17	621:17	6	TIFF
POINTER	621:21	621:21	5	*
LEAF_NODE	621:21	621:21	6	*
NAME	621:23	621:23	4	tif
LEAF_NODE	621:23	621:23	5	tif
LEAF_NODE	621:26	621:26	3	)
LEAF_NODE	622:0	622:0	2	{
STATEMENTS	623:1	623:1	2	
JUMP_STATEMENT	623:1	623:27	3	return ( tif -> tif_curstrip ) ;
KEYWORD	623:1	623:1	4	return
LEAF_NODE	623:1	623:1	5	return
DESTINATION	623:8	623:8	4	( tif -> tif_curstrip )
EXPR	623:8	623:26	5	( tif -> tif_curstrip )
LEAF_NODE	623:8	623:8	6	(
FIELD	623:9	623:14	6	tif -> tif_curstrip
LEAF_NODE	623:9	623:9	7	tif
LEAF_NODE	623:12	623:12	7	->
LEAF_NODE	623:14	623:14	7	tif_curstrip
LEAF_NODE	623:26	623:26	6	)
LEAF_NODE	623:27	623:27	4	;
LEAF_NODE	624:0	624:0	2	}
FUNCTION_DEF	629:0	633:0	1	
RETURN_TYPE	629:0	629:0	2	uint32
TYPE_NAME	629:0	629:0	3	uint32
LEAF_NODE	629:0	629:0	4	uint32
FUNCTION_NAME	630:0	630:0	2	TIFFCurrentTile
LEAF_NODE	630:0	630:0	3	TIFFCurrentTile
PARAMETER_LIST	630:15	630:25	2	( TIFF * tif )
LEAF_NODE	630:15	630:15	3	(
PARAMETER_DECL	630:16	630:22	3	TIFF * tif
TYPE	630:16	630:20	4	TIFF *
TYPE_NAME	630:16	630:16	5	TIFF
LEAF_NODE	630:16	630:16	6	TIFF
POINTER	630:20	630:20	5	*
LEAF_NODE	630:20	630:20	6	*
NAME	630:22	630:22	4	tif
LEAF_NODE	630:22	630:22	5	tif
LEAF_NODE	630:25	630:25	3	)
LEAF_NODE	631:0	631:0	2	{
STATEMENTS	632:1	632:1	2	
JUMP_STATEMENT	632:1	632:26	3	return ( tif -> tif_curtile ) ;
KEYWORD	632:1	632:1	4	return
LEAF_NODE	632:1	632:1	5	return
DESTINATION	632:8	632:8	4	( tif -> tif_curtile )
EXPR	632:8	632:25	5	( tif -> tif_curtile )
LEAF_NODE	632:8	632:8	6	(
FIELD	632:9	632:14	6	tif -> tif_curtile
LEAF_NODE	632:9	632:9	7	tif
LEAF_NODE	632:12	632:12	7	->
LEAF_NODE	632:14	632:14	7	tif_curtile
LEAF_NODE	632:25	632:25	6	)
LEAF_NODE	632:26	632:26	4	;
LEAF_NODE	633:0	633:0	2	}
FUNCTION_DEF	638:0	642:0	1	
RETURN_TYPE	638:0	638:0	2	int
TYPE_NAME	638:0	638:0	3	int
LEAF_NODE	638:0	638:0	4	int
FUNCTION_NAME	639:0	639:0	2	TIFFIsByteSwapped
LEAF_NODE	639:0	639:0	3	TIFFIsByteSwapped
PARAMETER_LIST	639:17	639:27	2	( TIFF * tif )
LEAF_NODE	639:17	639:17	3	(
PARAMETER_DECL	639:18	639:24	3	TIFF * tif
TYPE	639:18	639:22	4	TIFF *
TYPE_NAME	639:18	639:18	5	TIFF
LEAF_NODE	639:18	639:18	6	TIFF
POINTER	639:22	639:22	5	*
LEAF_NODE	639:22	639:22	6	*
NAME	639:24	639:24	4	tif
LEAF_NODE	639:24	639:24	5	tif
LEAF_NODE	639:27	639:27	3	)
LEAF_NODE	640:0	640:0	2	{
STATEMENTS	641:1	641:1	2	
JUMP_STATEMENT	641:1	641:43	3	return ( ( tif -> tif_flags & TIFF_SWAB ) != 0 ) ;
KEYWORD	641:1	641:1	4	return
LEAF_NODE	641:1	641:1	5	return
DESTINATION	641:8	641:8	4	( ( tif -> tif_flags & TIFF_SWAB ) != 0 )
EXPR	641:8	641:42	5	( ( tif -> tif_flags & TIFF_SWAB ) != 0 )
LEAF_NODE	641:8	641:8	6	(
LEAF_NODE	641:9	641:9	6	(
FIELD	641:10	641:15	6	tif -> tif_flags
LEAF_NODE	641:10	641:10	7	tif
LEAF_NODE	641:13	641:13	7	->
LEAF_NODE	641:15	641:15	7	tif_flags
LEAF_NODE	641:25	641:25	6	&
FIELD	641:27	641:27	6	TIFF_SWAB
LEAF_NODE	641:27	641:27	7	TIFF_SWAB
LEAF_NODE	641:36	641:36	6	)
EQ_OPERATOR	641:38	641:38	6	!=
LEAF_NODE	641:38	641:38	7	!=
FIELD	641:41	641:41	6	0
LEAF_NODE	641:41	641:41	7	0
LEAF_NODE	641:42	641:42	6	)
LEAF_NODE	641:43	641:43	4	;
LEAF_NODE	642:0	642:0	2	}
FUNCTION_DEF	647:0	651:0	1	
RETURN_TYPE	647:0	647:0	2	int
TYPE_NAME	647:0	647:0	3	int
LEAF_NODE	647:0	647:0	4	int
FUNCTION_NAME	648:0	648:0	2	TIFFIsUpSampled
LEAF_NODE	648:0	648:0	3	TIFFIsUpSampled
PARAMETER_LIST	648:15	648:25	2	( TIFF * tif )
LEAF_NODE	648:15	648:15	3	(
PARAMETER_DECL	648:16	648:22	3	TIFF * tif
TYPE	648:16	648:20	4	TIFF *
TYPE_NAME	648:16	648:16	5	TIFF
LEAF_NODE	648:16	648:16	6	TIFF
POINTER	648:20	648:20	5	*
LEAF_NODE	648:20	648:20	6	*
NAME	648:22	648:22	4	tif
LEAF_NODE	648:22	648:22	5	tif
LEAF_NODE	648:25	648:25	3	)
LEAF_NODE	649:0	649:0	2	{
STATEMENTS	650:1	650:1	2	
JUMP_STATEMENT	650:1	650:26	3	return ( isUpSampled ( tif ) ) ;
KEYWORD	650:1	650:1	4	return
LEAF_NODE	650:1	650:1	5	return
DESTINATION	650:8	650:8	4	( isUpSampled ( tif ) )
EXPR	650:8	650:25	5	( isUpSampled ( tif ) )
LEAF_NODE	650:8	650:8	6	(
FUNCTION_CALL	650:9	650:24	6	isUpSampled ( tif )
CALLEE	650:9	650:9	7	isUpSampled
LEAF_NODE	650:9	650:9	8	isUpSampled
LEAF_NODE	650:20	650:20	7	(
ARGUMENT	650:21	650:21	7	tif
FIELD	650:21	650:21	8	tif
LEAF_NODE	650:21	650:21	9	tif
LEAF_NODE	650:24	650:24	7	)
LEAF_NODE	650:25	650:25	6	)
LEAF_NODE	650:26	650:26	4	;
LEAF_NODE	651:0	651:0	2	}
FUNCTION_DEF	656:0	660:0	1	
RETURN_TYPE	656:0	656:0	2	int
TYPE_NAME	656:0	656:0	3	int
LEAF_NODE	656:0	656:0	4	int
FUNCTION_NAME	657:0	657:0	2	TIFFIsMSB2LSB
LEAF_NODE	657:0	657:0	3	TIFFIsMSB2LSB
PARAMETER_LIST	657:13	657:23	2	( TIFF * tif )
LEAF_NODE	657:13	657:13	3	(
PARAMETER_DECL	657:14	657:20	3	TIFF * tif
TYPE	657:14	657:18	4	TIFF *
TYPE_NAME	657:14	657:14	5	TIFF
LEAF_NODE	657:14	657:14	6	TIFF
POINTER	657:18	657:18	5	*
LEAF_NODE	657:18	657:18	6	*
NAME	657:20	657:20	4	tif
LEAF_NODE	657:20	657:20	5	tif
LEAF_NODE	657:23	657:23	3	)
LEAF_NODE	658:0	658:0	2	{
STATEMENTS	659:1	659:1	2	
JUMP_STATEMENT	659:1	659:45	3	return ( isFillOrder ( tif , FILLORDER_MSB2LSB ) ) ;
KEYWORD	659:1	659:1	4	return
LEAF_NODE	659:1	659:1	5	return
DESTINATION	659:8	659:8	4	( isFillOrder ( tif , FILLORDER_MSB2LSB ) )
EXPR	659:8	659:44	5	( isFillOrder ( tif , FILLORDER_MSB2LSB ) )
LEAF_NODE	659:8	659:8	6	(
FUNCTION_CALL	659:9	659:43	6	isFillOrder ( tif , FILLORDER_MSB2LSB )
CALLEE	659:9	659:9	7	isFillOrder
LEAF_NODE	659:9	659:9	8	isFillOrder
LEAF_NODE	659:20	659:20	7	(
ARGUMENT	659:21	659:21	7	tif
FIELD	659:21	659:21	8	tif
LEAF_NODE	659:21	659:21	9	tif
LEAF_NODE	659:24	659:24	7	,
ARGUMENT	659:26	659:26	7	FILLORDER_MSB2LSB
FIELD	659:26	659:26	8	FILLORDER_MSB2LSB
LEAF_NODE	659:26	659:26	9	FILLORDER_MSB2LSB
LEAF_NODE	659:43	659:43	7	)
LEAF_NODE	659:44	659:44	6	)
LEAF_NODE	659:45	659:45	4	;
LEAF_NODE	660:0	660:0	2	}
FUNCTION_DEF	665:0	669:0	1	
RETURN_TYPE	665:0	665:0	2	int
TYPE_NAME	665:0	665:0	3	int
LEAF_NODE	665:0	665:0	4	int
FUNCTION_NAME	666:0	666:0	2	TIFFIsBigEndian
LEAF_NODE	666:0	666:0	3	TIFFIsBigEndian
PARAMETER_LIST	666:15	666:25	2	( TIFF * tif )
LEAF_NODE	666:15	666:15	3	(
PARAMETER_DECL	666:16	666:22	3	TIFF * tif
TYPE	666:16	666:20	4	TIFF *
TYPE_NAME	666:16	666:16	5	TIFF
LEAF_NODE	666:16	666:16	6	TIFF
POINTER	666:20	666:20	5	*
LEAF_NODE	666:20	666:20	6	*
NAME	666:22	666:22	4	tif
LEAF_NODE	666:22	666:22	5	tif
LEAF_NODE	666:25	666:25	3	)
LEAF_NODE	667:0	667:0	2	{
STATEMENTS	668:1	668:1	2	
JUMP_STATEMENT	668:1	668:61	3	return ( tif -> tif_header . common . tiff_magic == TIFF_BIGENDIAN ) ;
KEYWORD	668:1	668:1	4	return
LEAF_NODE	668:1	668:1	5	return
DESTINATION	668:8	668:8	4	( tif -> tif_header . common . tiff_magic == TIFF_BIGENDIAN )
EXPR	668:8	668:60	5	( tif -> tif_header . common . tiff_magic == TIFF_BIGENDIAN )
LEAF_NODE	668:8	668:8	6	(
FIELD	668:9	668:32	6	tif -> tif_header . common . tiff_magic
LEAF_NODE	668:9	668:9	7	tif
LEAF_NODE	668:12	668:12	7	->
LEAF_NODE	668:14	668:14	7	tif_header
LEAF_NODE	668:24	668:24	7	.
LEAF_NODE	668:25	668:25	7	common
LEAF_NODE	668:31	668:31	7	.
LEAF_NODE	668:32	668:32	7	tiff_magic
EQ_OPERATOR	668:43	668:43	6	==
LEAF_NODE	668:43	668:43	7	==
FIELD	668:46	668:46	6	TIFF_BIGENDIAN
LEAF_NODE	668:46	668:46	7	TIFF_BIGENDIAN
LEAF_NODE	668:60	668:60	6	)
LEAF_NODE	668:61	668:61	4	;
LEAF_NODE	669:0	669:0	2	}
FUNCTION_DEF	674:0	678:0	1	
RETURN_TYPE	674:0	674:0	2	TIFFReadWriteProc
TYPE_NAME	674:0	674:0	3	TIFFReadWriteProc
LEAF_NODE	674:0	674:0	4	TIFFReadWriteProc
FUNCTION_NAME	675:0	675:0	2	TIFFGetReadProc
LEAF_NODE	675:0	675:0	3	TIFFGetReadProc
PARAMETER_LIST	675:15	675:25	2	( TIFF * tif )
LEAF_NODE	675:15	675:15	3	(
PARAMETER_DECL	675:16	675:22	3	TIFF * tif
TYPE	675:16	675:20	4	TIFF *
TYPE_NAME	675:16	675:16	5	TIFF
LEAF_NODE	675:16	675:16	6	TIFF
POINTER	675:20	675:20	5	*
LEAF_NODE	675:20	675:20	6	*
NAME	675:22	675:22	4	tif
LEAF_NODE	675:22	675:22	5	tif
LEAF_NODE	675:25	675:25	3	)
LEAF_NODE	676:0	676:0	2	{
STATEMENTS	677:1	677:1	2	
JUMP_STATEMENT	677:1	677:27	3	return ( tif -> tif_readproc ) ;
KEYWORD	677:1	677:1	4	return
LEAF_NODE	677:1	677:1	5	return
DESTINATION	677:8	677:8	4	( tif -> tif_readproc )
EXPR	677:8	677:26	5	( tif -> tif_readproc )
LEAF_NODE	677:8	677:8	6	(
FIELD	677:9	677:14	6	tif -> tif_readproc
LEAF_NODE	677:9	677:9	7	tif
LEAF_NODE	677:12	677:12	7	->
LEAF_NODE	677:14	677:14	7	tif_readproc
LEAF_NODE	677:26	677:26	6	)
LEAF_NODE	677:27	677:27	4	;
LEAF_NODE	678:0	678:0	2	}
FUNCTION_DEF	683:0	687:0	1	
RETURN_TYPE	683:0	683:0	2	TIFFReadWriteProc
TYPE_NAME	683:0	683:0	3	TIFFReadWriteProc
LEAF_NODE	683:0	683:0	4	TIFFReadWriteProc
FUNCTION_NAME	684:0	684:0	2	TIFFGetWriteProc
LEAF_NODE	684:0	684:0	3	TIFFGetWriteProc
PARAMETER_LIST	684:16	684:26	2	( TIFF * tif )
LEAF_NODE	684:16	684:16	3	(
PARAMETER_DECL	684:17	684:23	3	TIFF * tif
TYPE	684:17	684:21	4	TIFF *
TYPE_NAME	684:17	684:17	5	TIFF
LEAF_NODE	684:17	684:17	6	TIFF
POINTER	684:21	684:21	5	*
LEAF_NODE	684:21	684:21	6	*
NAME	684:23	684:23	4	tif
LEAF_NODE	684:23	684:23	5	tif
LEAF_NODE	684:26	684:26	3	)
LEAF_NODE	685:0	685:0	2	{
STATEMENTS	686:1	686:1	2	
JUMP_STATEMENT	686:1	686:28	3	return ( tif -> tif_writeproc ) ;
KEYWORD	686:1	686:1	4	return
LEAF_NODE	686:1	686:1	5	return
DESTINATION	686:8	686:8	4	( tif -> tif_writeproc )
EXPR	686:8	686:27	5	( tif -> tif_writeproc )
LEAF_NODE	686:8	686:8	6	(
FIELD	686:9	686:14	6	tif -> tif_writeproc
LEAF_NODE	686:9	686:9	7	tif
LEAF_NODE	686:12	686:12	7	->
LEAF_NODE	686:14	686:14	7	tif_writeproc
LEAF_NODE	686:27	686:27	6	)
LEAF_NODE	686:28	686:28	4	;
LEAF_NODE	687:0	687:0	2	}
FUNCTION_DEF	692:0	696:0	1	
RETURN_TYPE	692:0	692:0	2	TIFFSeekProc
TYPE_NAME	692:0	692:0	3	TIFFSeekProc
LEAF_NODE	692:0	692:0	4	TIFFSeekProc
FUNCTION_NAME	693:0	693:0	2	TIFFGetSeekProc
LEAF_NODE	693:0	693:0	3	TIFFGetSeekProc
PARAMETER_LIST	693:15	693:25	2	( TIFF * tif )
LEAF_NODE	693:15	693:15	3	(
PARAMETER_DECL	693:16	693:22	3	TIFF * tif
TYPE	693:16	693:20	4	TIFF *
TYPE_NAME	693:16	693:16	5	TIFF
LEAF_NODE	693:16	693:16	6	TIFF
POINTER	693:20	693:20	5	*
LEAF_NODE	693:20	693:20	6	*
NAME	693:22	693:22	4	tif
LEAF_NODE	693:22	693:22	5	tif
LEAF_NODE	693:25	693:25	3	)
LEAF_NODE	694:0	694:0	2	{
STATEMENTS	695:1	695:1	2	
JUMP_STATEMENT	695:1	695:27	3	return ( tif -> tif_seekproc ) ;
KEYWORD	695:1	695:1	4	return
LEAF_NODE	695:1	695:1	5	return
DESTINATION	695:8	695:8	4	( tif -> tif_seekproc )
EXPR	695:8	695:26	5	( tif -> tif_seekproc )
LEAF_NODE	695:8	695:8	6	(
FIELD	695:9	695:14	6	tif -> tif_seekproc
LEAF_NODE	695:9	695:9	7	tif
LEAF_NODE	695:12	695:12	7	->
LEAF_NODE	695:14	695:14	7	tif_seekproc
LEAF_NODE	695:26	695:26	6	)
LEAF_NODE	695:27	695:27	4	;
LEAF_NODE	696:0	696:0	2	}
FUNCTION_DEF	701:0	705:0	1	
RETURN_TYPE	701:0	701:0	2	TIFFCloseProc
TYPE_NAME	701:0	701:0	3	TIFFCloseProc
LEAF_NODE	701:0	701:0	4	TIFFCloseProc
FUNCTION_NAME	702:0	702:0	2	TIFFGetCloseProc
LEAF_NODE	702:0	702:0	3	TIFFGetCloseProc
PARAMETER_LIST	702:16	702:26	2	( TIFF * tif )
LEAF_NODE	702:16	702:16	3	(
PARAMETER_DECL	702:17	702:23	3	TIFF * tif
TYPE	702:17	702:21	4	TIFF *
TYPE_NAME	702:17	702:17	5	TIFF
LEAF_NODE	702:17	702:17	6	TIFF
POINTER	702:21	702:21	5	*
LEAF_NODE	702:21	702:21	6	*
NAME	702:23	702:23	4	tif
LEAF_NODE	702:23	702:23	5	tif
LEAF_NODE	702:26	702:26	3	)
LEAF_NODE	703:0	703:0	2	{
STATEMENTS	704:1	704:1	2	
JUMP_STATEMENT	704:1	704:28	3	return ( tif -> tif_closeproc ) ;
KEYWORD	704:1	704:1	4	return
LEAF_NODE	704:1	704:1	5	return
DESTINATION	704:8	704:8	4	( tif -> tif_closeproc )
EXPR	704:8	704:27	5	( tif -> tif_closeproc )
LEAF_NODE	704:8	704:8	6	(
FIELD	704:9	704:14	6	tif -> tif_closeproc
LEAF_NODE	704:9	704:9	7	tif
LEAF_NODE	704:12	704:12	7	->
LEAF_NODE	704:14	704:14	7	tif_closeproc
LEAF_NODE	704:27	704:27	6	)
LEAF_NODE	704:28	704:28	4	;
LEAF_NODE	705:0	705:0	2	}
FUNCTION_DEF	710:0	714:0	1	
RETURN_TYPE	710:0	710:0	2	TIFFSizeProc
TYPE_NAME	710:0	710:0	3	TIFFSizeProc
LEAF_NODE	710:0	710:0	4	TIFFSizeProc
FUNCTION_NAME	711:0	711:0	2	TIFFGetSizeProc
LEAF_NODE	711:0	711:0	3	TIFFGetSizeProc
PARAMETER_LIST	711:15	711:25	2	( TIFF * tif )
LEAF_NODE	711:15	711:15	3	(
PARAMETER_DECL	711:16	711:22	3	TIFF * tif
TYPE	711:16	711:20	4	TIFF *
TYPE_NAME	711:16	711:16	5	TIFF
LEAF_NODE	711:16	711:16	6	TIFF
POINTER	711:20	711:20	5	*
LEAF_NODE	711:20	711:20	6	*
NAME	711:22	711:22	4	tif
LEAF_NODE	711:22	711:22	5	tif
LEAF_NODE	711:25	711:25	3	)
LEAF_NODE	712:0	712:0	2	{
STATEMENTS	713:1	713:1	2	
JUMP_STATEMENT	713:1	713:27	3	return ( tif -> tif_sizeproc ) ;
KEYWORD	713:1	713:1	4	return
LEAF_NODE	713:1	713:1	5	return
DESTINATION	713:8	713:8	4	( tif -> tif_sizeproc )
EXPR	713:8	713:26	5	( tif -> tif_sizeproc )
LEAF_NODE	713:8	713:8	6	(
FIELD	713:9	713:14	6	tif -> tif_sizeproc
LEAF_NODE	713:9	713:9	7	tif
LEAF_NODE	713:12	713:12	7	->
LEAF_NODE	713:14	713:14	7	tif_sizeproc
LEAF_NODE	713:26	713:26	6	)
LEAF_NODE	713:27	713:27	4	;
LEAF_NODE	714:0	714:0	2	}
FUNCTION_DEF	719:0	723:0	1	
RETURN_TYPE	719:0	719:0	2	TIFFMapFileProc
TYPE_NAME	719:0	719:0	3	TIFFMapFileProc
LEAF_NODE	719:0	719:0	4	TIFFMapFileProc
FUNCTION_NAME	720:0	720:0	2	TIFFGetMapFileProc
LEAF_NODE	720:0	720:0	3	TIFFGetMapFileProc
PARAMETER_LIST	720:18	720:28	2	( TIFF * tif )
LEAF_NODE	720:18	720:18	3	(
PARAMETER_DECL	720:19	720:25	3	TIFF * tif
TYPE	720:19	720:23	4	TIFF *
TYPE_NAME	720:19	720:19	5	TIFF
LEAF_NODE	720:19	720:19	6	TIFF
POINTER	720:23	720:23	5	*
LEAF_NODE	720:23	720:23	6	*
NAME	720:25	720:25	4	tif
LEAF_NODE	720:25	720:25	5	tif
LEAF_NODE	720:28	720:28	3	)
LEAF_NODE	721:0	721:0	2	{
STATEMENTS	722:1	722:1	2	
JUMP_STATEMENT	722:1	722:26	3	return ( tif -> tif_mapproc ) ;
KEYWORD	722:1	722:1	4	return
LEAF_NODE	722:1	722:1	5	return
DESTINATION	722:8	722:8	4	( tif -> tif_mapproc )
EXPR	722:8	722:25	5	( tif -> tif_mapproc )
LEAF_NODE	722:8	722:8	6	(
FIELD	722:9	722:14	6	tif -> tif_mapproc
LEAF_NODE	722:9	722:9	7	tif
LEAF_NODE	722:12	722:12	7	->
LEAF_NODE	722:14	722:14	7	tif_mapproc
LEAF_NODE	722:25	722:25	6	)
LEAF_NODE	722:26	722:26	4	;
LEAF_NODE	723:0	723:0	2	}
FUNCTION_DEF	728:0	732:0	1	
RETURN_TYPE	728:0	728:0	2	TIFFUnmapFileProc
TYPE_NAME	728:0	728:0	3	TIFFUnmapFileProc
LEAF_NODE	728:0	728:0	4	TIFFUnmapFileProc
FUNCTION_NAME	729:0	729:0	2	TIFFGetUnmapFileProc
LEAF_NODE	729:0	729:0	3	TIFFGetUnmapFileProc
PARAMETER_LIST	729:20	729:30	2	( TIFF * tif )
LEAF_NODE	729:20	729:20	3	(
PARAMETER_DECL	729:21	729:27	3	TIFF * tif
TYPE	729:21	729:25	4	TIFF *
TYPE_NAME	729:21	729:21	5	TIFF
LEAF_NODE	729:21	729:21	6	TIFF
POINTER	729:25	729:25	5	*
LEAF_NODE	729:25	729:25	6	*
NAME	729:27	729:27	4	tif
LEAF_NODE	729:27	729:27	5	tif
LEAF_NODE	729:30	729:30	3	)
LEAF_NODE	730:0	730:0	2	{
STATEMENTS	731:1	731:1	2	
JUMP_STATEMENT	731:1	731:28	3	return ( tif -> tif_unmapproc ) ;
KEYWORD	731:1	731:1	4	return
LEAF_NODE	731:1	731:1	5	return
DESTINATION	731:8	731:8	4	( tif -> tif_unmapproc )
EXPR	731:8	731:27	5	( tif -> tif_unmapproc )
LEAF_NODE	731:8	731:8	6	(
FIELD	731:9	731:14	6	tif -> tif_unmapproc
LEAF_NODE	731:9	731:9	7	tif
LEAF_NODE	731:12	731:12	7	->
LEAF_NODE	731:14	731:14	7	tif_unmapproc
LEAF_NODE	731:27	731:27	6	)
LEAF_NODE	731:28	731:28	4	;
LEAF_NODE	732:0	732:0	2	}
