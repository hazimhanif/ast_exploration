SOURCE_FILE	35:0	277:0	0	
FUNCTION_DEF	35:0	66:0	1	
RETURN_TYPE	35:0	35:0	2	uint32
TYPE_NAME	35:0	35:0	3	uint32
LEAF_NODE	35:0	35:0	4	uint32
FUNCTION_NAME	36:0	36:0	2	TIFFComputeTile
LEAF_NODE	36:0	36:0	3	TIFFComputeTile
PARAMETER_LIST	36:15	36:65	2	( TIFF * tif , uint32 x , uint32 y , uint32 z , uint16 s )
LEAF_NODE	36:15	36:15	3	(
PARAMETER_DECL	36:16	36:22	3	TIFF * tif
TYPE	36:16	36:20	4	TIFF *
TYPE_NAME	36:16	36:16	5	TIFF
LEAF_NODE	36:16	36:16	6	TIFF
POINTER	36:20	36:20	5	*
LEAF_NODE	36:20	36:20	6	*
NAME	36:22	36:22	4	tif
LEAF_NODE	36:22	36:22	5	tif
LEAF_NODE	36:25	36:25	3	,
PARAMETER_DECL	36:27	36:34	3	uint32 x
TYPE	36:27	36:27	4	uint32
TYPE_NAME	36:27	36:27	5	uint32
LEAF_NODE	36:27	36:27	6	uint32
NAME	36:34	36:34	4	x
LEAF_NODE	36:34	36:34	5	x
LEAF_NODE	36:35	36:35	3	,
PARAMETER_DECL	36:37	36:44	3	uint32 y
TYPE	36:37	36:37	4	uint32
TYPE_NAME	36:37	36:37	5	uint32
LEAF_NODE	36:37	36:37	6	uint32
NAME	36:44	36:44	4	y
LEAF_NODE	36:44	36:44	5	y
LEAF_NODE	36:45	36:45	3	,
PARAMETER_DECL	36:47	36:54	3	uint32 z
TYPE	36:47	36:47	4	uint32
TYPE_NAME	36:47	36:47	5	uint32
LEAF_NODE	36:47	36:47	6	uint32
NAME	36:54	36:54	4	z
LEAF_NODE	36:54	36:54	5	z
LEAF_NODE	36:55	36:55	3	,
PARAMETER_DECL	36:57	36:64	3	uint16 s
TYPE	36:57	36:57	4	uint16
TYPE_NAME	36:57	36:57	5	uint16
LEAF_NODE	36:57	36:57	6	uint16
NAME	36:64	36:64	4	s
LEAF_NODE	36:64	36:64	5	s
LEAF_NODE	36:65	36:65	3	)
LEAF_NODE	37:0	37:0	2	{
STATEMENTS	38:1	65:14	2	
SIMPLE_DECL	38:1	38:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	38:1	38:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	38:1	38:15	5	TIFFDirectory *
TYPE_NAME	38:1	38:1	6	TIFFDirectory
LEAF_NODE	38:1	38:1	7	TIFFDirectory
POINTER	38:15	38:15	6	*
LEAF_NODE	38:15	38:15	7	*
NAME	38:16	38:16	5	td
LEAF_NODE	38:16	38:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	38:16	38:16	5	td = & tif -> tif_dir
ASSIGN	38:16	38:21	6	td = & tif -> tif_dir
LVAL	38:16	38:16	7	td
NAME	38:16	38:16	8	td
LEAF_NODE	38:16	38:16	9	td
ASSIGN_OP	38:19	38:19	7	=
LEAF_NODE	38:19	38:19	8	=
RVAL	38:21	38:21	7	& tif -> tif_dir
UNARY_EXPR	38:21	38:22	8	& tif -> tif_dir
UNARY_OPERATOR	38:21	38:21	9	&
LEAF_NODE	38:21	38:21	10	&
FIELD	38:22	38:27	9	tif -> tif_dir
LEAF_NODE	38:22	38:22	10	tif
LEAF_NODE	38:25	38:25	10	->
LEAF_NODE	38:27	38:27	10	tif_dir
LEAF_NODE	38:34	38:34	4	;
SIMPLE_DECL	39:1	39:29	3	uint32 dx ; dx = td -> td_tilewidth ;
VAR_DECL	39:1	39:8	4	uint32 dx ; dx = td -> td_tilewidth
TYPE	39:1	39:1	5	uint32
TYPE_NAME	39:1	39:1	6	uint32
LEAF_NODE	39:1	39:1	7	uint32
NAME	39:8	39:8	5	dx
LEAF_NODE	39:8	39:8	6	dx
LEAF_NODE	0:0	0:0	5	;
INIT	39:8	39:8	5	dx = td -> td_tilewidth
ASSIGN	39:8	39:13	6	dx = td -> td_tilewidth
LVAL	39:8	39:8	7	dx
NAME	39:8	39:8	8	dx
LEAF_NODE	39:8	39:8	9	dx
ASSIGN_OP	39:11	39:11	7	=
LEAF_NODE	39:11	39:11	8	=
RVAL	39:13	39:13	7	td -> td_tilewidth
FIELD	39:13	39:17	8	td -> td_tilewidth
LEAF_NODE	39:13	39:13	9	td
LEAF_NODE	39:15	39:15	9	->
LEAF_NODE	39:17	39:17	9	td_tilewidth
LEAF_NODE	39:29	39:29	4	;
SIMPLE_DECL	40:1	40:30	3	uint32 dy ; dy = td -> td_tilelength ;
VAR_DECL	40:1	40:8	4	uint32 dy ; dy = td -> td_tilelength
TYPE	40:1	40:1	5	uint32
TYPE_NAME	40:1	40:1	6	uint32
LEAF_NODE	40:1	40:1	7	uint32
NAME	40:8	40:8	5	dy
LEAF_NODE	40:8	40:8	6	dy
LEAF_NODE	0:0	0:0	5	;
INIT	40:8	40:8	5	dy = td -> td_tilelength
ASSIGN	40:8	40:13	6	dy = td -> td_tilelength
LVAL	40:8	40:8	7	dy
NAME	40:8	40:8	8	dy
LEAF_NODE	40:8	40:8	9	dy
ASSIGN_OP	40:11	40:11	7	=
LEAF_NODE	40:11	40:11	8	=
RVAL	40:13	40:13	7	td -> td_tilelength
FIELD	40:13	40:17	8	td -> td_tilelength
LEAF_NODE	40:13	40:13	9	td
LEAF_NODE	40:15	40:15	9	->
LEAF_NODE	40:17	40:17	9	td_tilelength
LEAF_NODE	40:30	40:30	4	;
SIMPLE_DECL	41:1	41:29	3	uint32 dz ; dz = td -> td_tiledepth ;
VAR_DECL	41:1	41:8	4	uint32 dz ; dz = td -> td_tiledepth
TYPE	41:1	41:1	5	uint32
TYPE_NAME	41:1	41:1	6	uint32
LEAF_NODE	41:1	41:1	7	uint32
NAME	41:8	41:8	5	dz
LEAF_NODE	41:8	41:8	6	dz
LEAF_NODE	0:0	0:0	5	;
INIT	41:8	41:8	5	dz = td -> td_tiledepth
ASSIGN	41:8	41:13	6	dz = td -> td_tiledepth
LVAL	41:8	41:8	7	dz
NAME	41:8	41:8	8	dz
LEAF_NODE	41:8	41:8	9	dz
ASSIGN_OP	41:11	41:11	7	=
LEAF_NODE	41:11	41:11	8	=
RVAL	41:13	41:13	7	td -> td_tiledepth
FIELD	41:13	41:17	8	td -> td_tiledepth
LEAF_NODE	41:13	41:13	9	td
LEAF_NODE	41:15	41:15	9	->
LEAF_NODE	41:17	41:17	9	td_tiledepth
LEAF_NODE	41:29	41:29	4	;
SIMPLE_DECL	42:1	42:16	3	uint32 tile ; tile = 1 ;
VAR_DECL	42:1	42:8	4	uint32 tile ; tile = 1
TYPE	42:1	42:1	5	uint32
TYPE_NAME	42:1	42:1	6	uint32
LEAF_NODE	42:1	42:1	7	uint32
NAME	42:8	42:8	5	tile
LEAF_NODE	42:8	42:8	6	tile
LEAF_NODE	0:0	0:0	5	;
INIT	42:8	42:8	5	tile = 1
ASSIGN	42:8	42:15	6	tile = 1
LVAL	42:8	42:8	7	tile
NAME	42:8	42:8	8	tile
LEAF_NODE	42:8	42:8	9	tile
ASSIGN_OP	42:13	42:13	7	=
LEAF_NODE	42:13	42:13	8	=
RVAL	42:15	42:15	7	1
FIELD	42:15	42:15	8	1
LEAF_NODE	42:15	42:15	9	1
LEAF_NODE	42:16	42:16	4	;
SELECTION	44:1	45:2	3	
KEYWORD	44:1	44:1	4	if
LEAF_NODE	44:1	44:1	5	if
LEAF_NODE	44:4	44:4	4	(
CONDITION	44:5	44:5	4	td -> td_imagedepth == 1
EXPR	44:5	44:26	5	td -> td_imagedepth == 1
FIELD	44:5	44:9	6	td -> td_imagedepth
LEAF_NODE	44:5	44:5	7	td
LEAF_NODE	44:7	44:7	7	->
LEAF_NODE	44:9	44:9	7	td_imagedepth
EQ_OPERATOR	44:23	44:23	6	==
LEAF_NODE	44:23	44:23	7	==
FIELD	44:26	44:26	6	1
LEAF_NODE	44:26	44:26	7	1
LEAF_NODE	44:27	44:27	4	)
STATEMENTS	45:2	45:2	4	
EXPR_STATEMENT	45:2	45:7	5	z = 0 ;
EXPR	45:2	45:2	6	z = 0
ASSIGN	45:2	45:6	7	z = 0
LVAL	45:2	45:2	8	z
FIELD	45:2	45:2	9	z
LEAF_NODE	45:2	45:2	10	z
ASSIGN_OP	45:4	45:4	8	=
LEAF_NODE	45:4	45:4	9	=
RVAL	45:6	45:6	8	0
FIELD	45:6	45:6	9	0
LEAF_NODE	45:6	45:6	10	0
LEAF_NODE	45:7	45:7	6	;
SELECTION	46:1	47:2	3	
KEYWORD	46:1	46:1	4	if
LEAF_NODE	46:1	46:1	5	if
LEAF_NODE	46:4	46:4	4	(
CONDITION	46:5	46:5	4	dx == ( uint32 ) - 1
EXPR	46:5	46:20	5	dx == ( uint32 ) - 1
FIELD	46:5	46:5	6	dx
LEAF_NODE	46:5	46:5	7	dx
EQ_OPERATOR	46:8	46:8	6	==
LEAF_NODE	46:8	46:8	7	==
LEAF_NODE	46:11	46:11	6	(
TYPE_NAME	46:12	46:12	6	uint32
LEAF_NODE	46:12	46:12	7	uint32
LEAF_NODE	46:18	46:18	6	)
UNARY_EXPR	46:20	46:21	6	- 1
UNARY_OPERATOR	46:20	46:20	7	-
LEAF_NODE	46:20	46:20	8	-
FIELD	46:21	46:21	7	1
LEAF_NODE	46:21	46:21	8	1
LEAF_NODE	46:22	46:22	4	)
STATEMENTS	47:2	47:2	4	
EXPR_STATEMENT	47:2	47:24	5	dx = td -> td_imagewidth ;
EXPR	47:2	47:2	6	dx = td -> td_imagewidth
ASSIGN	47:2	47:7	7	dx = td -> td_imagewidth
LVAL	47:2	47:2	8	dx
FIELD	47:2	47:2	9	dx
LEAF_NODE	47:2	47:2	10	dx
ASSIGN_OP	47:5	47:5	8	=
LEAF_NODE	47:5	47:5	9	=
RVAL	47:7	47:7	8	td -> td_imagewidth
FIELD	47:7	47:11	9	td -> td_imagewidth
LEAF_NODE	47:7	47:7	10	td
LEAF_NODE	47:9	47:9	10	->
LEAF_NODE	47:11	47:11	10	td_imagewidth
LEAF_NODE	47:24	47:24	6	;
SELECTION	48:1	49:2	3	
KEYWORD	48:1	48:1	4	if
LEAF_NODE	48:1	48:1	5	if
LEAF_NODE	48:4	48:4	4	(
CONDITION	48:5	48:5	4	dy == ( uint32 ) - 1
EXPR	48:5	48:20	5	dy == ( uint32 ) - 1
FIELD	48:5	48:5	6	dy
LEAF_NODE	48:5	48:5	7	dy
EQ_OPERATOR	48:8	48:8	6	==
LEAF_NODE	48:8	48:8	7	==
LEAF_NODE	48:11	48:11	6	(
TYPE_NAME	48:12	48:12	6	uint32
LEAF_NODE	48:12	48:12	7	uint32
LEAF_NODE	48:18	48:18	6	)
UNARY_EXPR	48:20	48:21	6	- 1
UNARY_OPERATOR	48:20	48:20	7	-
LEAF_NODE	48:20	48:20	8	-
FIELD	48:21	48:21	7	1
LEAF_NODE	48:21	48:21	8	1
LEAF_NODE	48:22	48:22	4	)
STATEMENTS	49:2	49:2	4	
EXPR_STATEMENT	49:2	49:25	5	dy = td -> td_imagelength ;
EXPR	49:2	49:2	6	dy = td -> td_imagelength
ASSIGN	49:2	49:7	7	dy = td -> td_imagelength
LVAL	49:2	49:2	8	dy
FIELD	49:2	49:2	9	dy
LEAF_NODE	49:2	49:2	10	dy
ASSIGN_OP	49:5	49:5	8	=
LEAF_NODE	49:5	49:5	9	=
RVAL	49:7	49:7	8	td -> td_imagelength
FIELD	49:7	49:11	9	td -> td_imagelength
LEAF_NODE	49:7	49:7	10	td
LEAF_NODE	49:9	49:9	10	->
LEAF_NODE	49:11	49:11	10	td_imagelength
LEAF_NODE	49:25	49:25	6	;
SELECTION	50:1	51:2	3	
KEYWORD	50:1	50:1	4	if
LEAF_NODE	50:1	50:1	5	if
LEAF_NODE	50:4	50:4	4	(
CONDITION	50:5	50:5	4	dz == ( uint32 ) - 1
EXPR	50:5	50:20	5	dz == ( uint32 ) - 1
FIELD	50:5	50:5	6	dz
LEAF_NODE	50:5	50:5	7	dz
EQ_OPERATOR	50:8	50:8	6	==
LEAF_NODE	50:8	50:8	7	==
LEAF_NODE	50:11	50:11	6	(
TYPE_NAME	50:12	50:12	6	uint32
LEAF_NODE	50:12	50:12	7	uint32
LEAF_NODE	50:18	50:18	6	)
UNARY_EXPR	50:20	50:21	6	- 1
UNARY_OPERATOR	50:20	50:20	7	-
LEAF_NODE	50:20	50:20	8	-
FIELD	50:21	50:21	7	1
LEAF_NODE	50:21	50:21	8	1
LEAF_NODE	50:22	50:22	4	)
STATEMENTS	51:2	51:2	4	
EXPR_STATEMENT	51:2	51:24	5	dz = td -> td_imagedepth ;
EXPR	51:2	51:2	6	dz = td -> td_imagedepth
ASSIGN	51:2	51:7	7	dz = td -> td_imagedepth
LVAL	51:2	51:2	8	dz
FIELD	51:2	51:2	9	dz
LEAF_NODE	51:2	51:2	10	dz
ASSIGN_OP	51:5	51:5	8	=
LEAF_NODE	51:5	51:5	9	=
RVAL	51:7	51:7	8	td -> td_imagedepth
FIELD	51:7	51:11	9	td -> td_imagedepth
LEAF_NODE	51:7	51:7	10	td
LEAF_NODE	51:9	51:9	10	->
LEAF_NODE	51:11	51:11	10	td_imagedepth
LEAF_NODE	51:24	51:24	6	;
SELECTION	52:1	52:36	3	
KEYWORD	52:1	52:1	4	if
LEAF_NODE	52:1	52:1	5	if
LEAF_NODE	52:4	52:4	4	(
CONDITION	52:5	52:5	4	dx != 0 && dy != 0 && dz != 0
EXPR	52:5	52:5	5	dx != 0 && dy != 0 && dz != 0
AND	52:5	52:16	6	dx != 0 && dy != 0 && dz != 0
EXPR	52:5	52:11	7	dx != 0
FIELD	52:5	52:5	8	dx
LEAF_NODE	52:5	52:5	9	dx
EQ_OPERATOR	52:8	52:8	8	!=
LEAF_NODE	52:8	52:8	9	!=
FIELD	52:11	52:11	8	0
LEAF_NODE	52:11	52:11	9	0
LEAF_NODE	52:13	52:13	7	&&
EXPR	52:16	52:16	7	dy != 0 && dz != 0
AND	52:16	52:27	8	dy != 0 && dz != 0
EXPR	52:16	52:22	9	dy != 0
FIELD	52:16	52:16	10	dy
LEAF_NODE	52:16	52:16	11	dy
EQ_OPERATOR	52:19	52:19	10	!=
LEAF_NODE	52:19	52:19	11	!=
FIELD	52:22	52:22	10	0
LEAF_NODE	52:22	52:22	11	0
LEAF_NODE	52:24	52:24	9	&&
EXPR	52:27	52:33	9	dz != 0
FIELD	52:27	52:27	10	dz
LEAF_NODE	52:27	52:27	11	dz
EQ_OPERATOR	52:30	52:30	10	!=
LEAF_NODE	52:30	52:30	11	!=
FIELD	52:33	52:33	10	0
LEAF_NODE	52:33	52:33	11	0
LEAF_NODE	52:34	52:34	4	)
STATEMENTS	52:36	64:1	4	
LEAF_NODE	52:36	52:36	5	{
STATEMENTS	53:2	62:2	5	
SIMPLE_DECL	53:2	53:52	6	uint32 xpt ; xpt = TIFFhowmany_32 ( td -> td_imagewidth , dx ) ;
VAR_DECL	53:2	53:9	7	uint32 xpt ; xpt = TIFFhowmany_32 ( td -> td_imagewidth , dx )
TYPE	53:2	53:2	8	uint32
TYPE_NAME	53:2	53:2	9	uint32
LEAF_NODE	53:2	53:2	10	uint32
NAME	53:9	53:9	8	xpt
LEAF_NODE	53:9	53:9	9	xpt
LEAF_NODE	0:0	0:0	8	;
INIT	53:9	53:9	8	xpt = TIFFhowmany_32 ( td -> td_imagewidth , dx )
ASSIGN	53:9	53:15	9	xpt = TIFFhowmany_32 ( td -> td_imagewidth , dx )
LVAL	53:9	53:9	10	xpt
NAME	53:9	53:9	11	xpt
LEAF_NODE	53:9	53:9	12	xpt
ASSIGN_OP	53:13	53:13	10	=
LEAF_NODE	53:13	53:13	11	=
RVAL	53:15	53:15	10	TIFFhowmany_32 ( td -> td_imagewidth , dx )
FUNCTION_CALL	53:15	53:51	11	TIFFhowmany_32 ( td -> td_imagewidth , dx )
CALLEE	53:15	53:15	12	TIFFhowmany_32
LEAF_NODE	53:15	53:15	13	TIFFhowmany_32
LEAF_NODE	53:29	53:29	12	(
ARGUMENT	53:30	53:30	12	td -> td_imagewidth
FIELD	53:30	53:34	13	td -> td_imagewidth
LEAF_NODE	53:30	53:30	14	td
LEAF_NODE	53:32	53:32	14	->
LEAF_NODE	53:34	53:34	14	td_imagewidth
LEAF_NODE	53:47	53:47	12	,
ARGUMENT	53:49	53:49	12	dx
FIELD	53:49	53:49	13	dx
LEAF_NODE	53:49	53:49	14	dx
LEAF_NODE	53:51	53:51	12	)
LEAF_NODE	53:52	53:52	7	;
SIMPLE_DECL	54:2	54:53	6	uint32 ypt ; ypt = TIFFhowmany_32 ( td -> td_imagelength , dy ) ;
VAR_DECL	54:2	54:9	7	uint32 ypt ; ypt = TIFFhowmany_32 ( td -> td_imagelength , dy )
TYPE	54:2	54:2	8	uint32
TYPE_NAME	54:2	54:2	9	uint32
LEAF_NODE	54:2	54:2	10	uint32
NAME	54:9	54:9	8	ypt
LEAF_NODE	54:9	54:9	9	ypt
LEAF_NODE	0:0	0:0	8	;
INIT	54:9	54:9	8	ypt = TIFFhowmany_32 ( td -> td_imagelength , dy )
ASSIGN	54:9	54:15	9	ypt = TIFFhowmany_32 ( td -> td_imagelength , dy )
LVAL	54:9	54:9	10	ypt
NAME	54:9	54:9	11	ypt
LEAF_NODE	54:9	54:9	12	ypt
ASSIGN_OP	54:13	54:13	10	=
LEAF_NODE	54:13	54:13	11	=
RVAL	54:15	54:15	10	TIFFhowmany_32 ( td -> td_imagelength , dy )
FUNCTION_CALL	54:15	54:52	11	TIFFhowmany_32 ( td -> td_imagelength , dy )
CALLEE	54:15	54:15	12	TIFFhowmany_32
LEAF_NODE	54:15	54:15	13	TIFFhowmany_32
LEAF_NODE	54:29	54:29	12	(
ARGUMENT	54:30	54:30	12	td -> td_imagelength
FIELD	54:30	54:34	13	td -> td_imagelength
LEAF_NODE	54:30	54:30	14	td
LEAF_NODE	54:32	54:32	14	->
LEAF_NODE	54:34	54:34	14	td_imagelength
LEAF_NODE	54:48	54:48	12	,
ARGUMENT	54:50	54:50	12	dy
FIELD	54:50	54:50	13	dy
LEAF_NODE	54:50	54:50	14	dy
LEAF_NODE	54:52	54:52	12	)
LEAF_NODE	54:53	54:53	7	;
SIMPLE_DECL	55:2	55:52	6	uint32 zpt ; zpt = TIFFhowmany_32 ( td -> td_imagedepth , dz ) ;
VAR_DECL	55:2	55:9	7	uint32 zpt ; zpt = TIFFhowmany_32 ( td -> td_imagedepth , dz )
TYPE	55:2	55:2	8	uint32
TYPE_NAME	55:2	55:2	9	uint32
LEAF_NODE	55:2	55:2	10	uint32
NAME	55:9	55:9	8	zpt
LEAF_NODE	55:9	55:9	9	zpt
LEAF_NODE	0:0	0:0	8	;
INIT	55:9	55:9	8	zpt = TIFFhowmany_32 ( td -> td_imagedepth , dz )
ASSIGN	55:9	55:15	9	zpt = TIFFhowmany_32 ( td -> td_imagedepth , dz )
LVAL	55:9	55:9	10	zpt
NAME	55:9	55:9	11	zpt
LEAF_NODE	55:9	55:9	12	zpt
ASSIGN_OP	55:13	55:13	10	=
LEAF_NODE	55:13	55:13	11	=
RVAL	55:15	55:15	10	TIFFhowmany_32 ( td -> td_imagedepth , dz )
FUNCTION_CALL	55:15	55:51	11	TIFFhowmany_32 ( td -> td_imagedepth , dz )
CALLEE	55:15	55:15	12	TIFFhowmany_32
LEAF_NODE	55:15	55:15	13	TIFFhowmany_32
LEAF_NODE	55:29	55:29	12	(
ARGUMENT	55:30	55:30	12	td -> td_imagedepth
FIELD	55:30	55:34	13	td -> td_imagedepth
LEAF_NODE	55:30	55:30	14	td
LEAF_NODE	55:32	55:32	14	->
LEAF_NODE	55:34	55:34	14	td_imagedepth
LEAF_NODE	55:47	55:47	12	,
ARGUMENT	55:49	55:49	12	dz
FIELD	55:49	55:49	13	dz
LEAF_NODE	55:49	55:49	14	dz
LEAF_NODE	55:51	55:51	12	)
LEAF_NODE	55:52	55:52	7	;
SELECTION	57:2	58:3	6	
KEYWORD	57:2	57:2	7	if
LEAF_NODE	57:2	57:2	8	if
LEAF_NODE	57:5	57:5	7	(
CONDITION	57:6	57:6	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	57:6	57:29	8	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	57:6	57:10	9	td -> td_planarconfig
LEAF_NODE	57:6	57:6	10	td
LEAF_NODE	57:8	57:8	10	->
LEAF_NODE	57:10	57:10	10	td_planarconfig
EQ_OPERATOR	57:26	57:26	9	==
LEAF_NODE	57:26	57:26	10	==
FIELD	57:29	57:29	9	PLANARCONFIG_SEPARATE
LEAF_NODE	57:29	57:29	10	PLANARCONFIG_SEPARATE
LEAF_NODE	57:50	57:50	7	)
STATEMENTS	58:3	58:3	7	
LEAF_NODE	58:3	58:3	8	tile
LEAF_NODE	58:8	58:8	6	=
LEAF_NODE	58:10	58:10	6	(
LEAF_NODE	58:11	58:11	6	xpt
LEAF_NODE	58:14	58:14	6	*
LEAF_NODE	58:15	58:15	6	ypt
LEAF_NODE	58:18	58:18	6	*
LEAF_NODE	58:19	58:19	6	zpt
LEAF_NODE	58:22	58:22	6	)
EXPR_STATEMENT	58:23	61:12	6	* s + ( xpt * ypt ) * ( z / dz ) + xpt * ( y / dy ) + x / dx ;
EXPR	58:23	61:10	7	* s + ( xpt * ypt ) * ( z / dz ) + xpt * ( y / dy ) + x / dx
UNARY_EXPR	58:23	58:24	8	* s
UNARY_OPERATOR	58:23	58:23	9	*
LEAF_NODE	58:23	58:23	10	*
FIELD	58:24	58:24	9	s
LEAF_NODE	58:24	58:24	10	s
LEAF_NODE	58:26	58:26	8	+
LEAF_NODE	59:8	59:8	8	(
FIELD	59:9	59:9	8	xpt
LEAF_NODE	59:9	59:9	9	xpt
LEAF_NODE	59:12	59:12	8	*
FIELD	59:13	59:13	8	ypt
LEAF_NODE	59:13	59:13	9	ypt
LEAF_NODE	59:16	59:16	8	)
LEAF_NODE	59:17	59:17	8	*
LEAF_NODE	59:18	59:18	8	(
FIELD	59:19	59:19	8	z
LEAF_NODE	59:19	59:19	9	z
LEAF_NODE	59:20	59:20	8	/
FIELD	59:21	59:21	8	dz
LEAF_NODE	59:21	59:21	9	dz
LEAF_NODE	59:23	59:23	8	)
LEAF_NODE	59:25	59:25	8	+
FIELD	60:8	60:8	8	xpt
LEAF_NODE	60:8	60:8	9	xpt
LEAF_NODE	60:11	60:11	8	*
LEAF_NODE	60:12	60:12	8	(
FIELD	60:13	60:13	8	y
LEAF_NODE	60:13	60:13	9	y
LEAF_NODE	60:14	60:14	8	/
FIELD	60:15	60:15	8	dy
LEAF_NODE	60:15	60:15	9	dy
LEAF_NODE	60:17	60:17	8	)
LEAF_NODE	60:19	60:19	8	+
FIELD	61:8	61:8	8	x
LEAF_NODE	61:8	61:8	9	x
LEAF_NODE	61:9	61:9	8	/
FIELD	61:10	61:10	8	dx
LEAF_NODE	61:10	61:10	9	dx
LEAF_NODE	61:12	61:12	7	;
SELECTION	62:2	63:3	6	
KEYWORD	62:2	62:2	7	else
LEAF_NODE	62:2	62:2	8	else
STATEMENTS	63:3	63:3	7	
EXPR_STATEMENT	63:3	63:46	8	tile = ( xpt * ypt ) * ( z / dz ) + xpt * ( y / dy ) + x / dx ;
EXPR	63:3	63:3	9	tile = ( xpt * ypt ) * ( z / dz ) + xpt * ( y / dy ) + x / dx
ASSIGN	63:3	63:10	10	tile = ( xpt * ypt ) * ( z / dz ) + xpt * ( y / dy ) + x / dx
LVAL	63:3	63:3	11	tile
FIELD	63:3	63:3	12	tile
LEAF_NODE	63:3	63:3	13	tile
ASSIGN_OP	63:8	63:8	11	=
LEAF_NODE	63:8	63:8	12	=
RVAL	63:10	63:44	11	( xpt * ypt ) * ( z / dz ) + xpt * ( y / dy ) + x / dx
LEAF_NODE	63:10	63:10	12	(
FIELD	63:11	63:11	12	xpt
LEAF_NODE	63:11	63:11	13	xpt
LEAF_NODE	63:14	63:14	12	*
FIELD	63:15	63:15	12	ypt
LEAF_NODE	63:15	63:15	13	ypt
LEAF_NODE	63:18	63:18	12	)
LEAF_NODE	63:19	63:19	12	*
LEAF_NODE	63:20	63:20	12	(
FIELD	63:21	63:21	12	z
LEAF_NODE	63:21	63:21	13	z
LEAF_NODE	63:22	63:22	12	/
FIELD	63:23	63:23	12	dz
LEAF_NODE	63:23	63:23	13	dz
LEAF_NODE	63:25	63:25	12	)
LEAF_NODE	63:27	63:27	12	+
FIELD	63:29	63:29	12	xpt
LEAF_NODE	63:29	63:29	13	xpt
LEAF_NODE	63:32	63:32	12	*
LEAF_NODE	63:33	63:33	12	(
FIELD	63:34	63:34	12	y
LEAF_NODE	63:34	63:34	13	y
LEAF_NODE	63:35	63:35	12	/
FIELD	63:36	63:36	12	dy
LEAF_NODE	63:36	63:36	13	dy
LEAF_NODE	63:38	63:38	12	)
LEAF_NODE	63:40	63:40	12	+
FIELD	63:42	63:42	12	x
LEAF_NODE	63:42	63:42	13	x
LEAF_NODE	63:43	63:43	12	/
FIELD	63:44	63:44	12	dx
LEAF_NODE	63:44	63:44	13	dx
LEAF_NODE	63:46	63:46	9	;
LEAF_NODE	64:1	64:1	5	}
LEAF_NODE	65:1	65:1	3	return
LEAF_NODE	65:8	65:8	3	(
LEAF_NODE	65:9	65:9	3	tile
LEAF_NODE	65:13	65:13	3	)
LEAF_NODE	65:14	65:14	3	;
LEAF_NODE	66:0	66:0	2	}
FUNCTION_DEF	72:0	107:0	1	
RETURN_TYPE	72:0	72:0	2	int
TYPE_NAME	72:0	72:0	3	int
LEAF_NODE	72:0	72:0	4	int
FUNCTION_NAME	73:0	73:0	2	TIFFCheckTile
LEAF_NODE	73:0	73:0	3	TIFFCheckTile
PARAMETER_LIST	73:13	73:63	2	( TIFF * tif , uint32 x , uint32 y , uint32 z , uint16 s )
LEAF_NODE	73:13	73:13	3	(
PARAMETER_DECL	73:14	73:20	3	TIFF * tif
TYPE	73:14	73:18	4	TIFF *
TYPE_NAME	73:14	73:14	5	TIFF
LEAF_NODE	73:14	73:14	6	TIFF
POINTER	73:18	73:18	5	*
LEAF_NODE	73:18	73:18	6	*
NAME	73:20	73:20	4	tif
LEAF_NODE	73:20	73:20	5	tif
LEAF_NODE	73:23	73:23	3	,
PARAMETER_DECL	73:25	73:32	3	uint32 x
TYPE	73:25	73:25	4	uint32
TYPE_NAME	73:25	73:25	5	uint32
LEAF_NODE	73:25	73:25	6	uint32
NAME	73:32	73:32	4	x
LEAF_NODE	73:32	73:32	5	x
LEAF_NODE	73:33	73:33	3	,
PARAMETER_DECL	73:35	73:42	3	uint32 y
TYPE	73:35	73:35	4	uint32
TYPE_NAME	73:35	73:35	5	uint32
LEAF_NODE	73:35	73:35	6	uint32
NAME	73:42	73:42	4	y
LEAF_NODE	73:42	73:42	5	y
LEAF_NODE	73:43	73:43	3	,
PARAMETER_DECL	73:45	73:52	3	uint32 z
TYPE	73:45	73:45	4	uint32
TYPE_NAME	73:45	73:45	5	uint32
LEAF_NODE	73:45	73:45	6	uint32
NAME	73:52	73:52	4	z
LEAF_NODE	73:52	73:52	5	z
LEAF_NODE	73:53	73:53	3	,
PARAMETER_DECL	73:55	73:62	3	uint16 s
TYPE	73:55	73:55	4	uint16
TYPE_NAME	73:55	73:55	5	uint16
LEAF_NODE	73:55	73:55	6	uint16
NAME	73:62	73:62	4	s
LEAF_NODE	73:62	73:62	5	s
LEAF_NODE	73:63	73:63	3	)
LEAF_NODE	74:0	74:0	2	{
STATEMENTS	75:1	106:1	2	
SIMPLE_DECL	75:1	75:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	75:1	75:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	75:1	75:15	5	TIFFDirectory *
TYPE_NAME	75:1	75:1	6	TIFFDirectory
LEAF_NODE	75:1	75:1	7	TIFFDirectory
POINTER	75:15	75:15	6	*
LEAF_NODE	75:15	75:15	7	*
NAME	75:16	75:16	5	td
LEAF_NODE	75:16	75:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	75:16	75:16	5	td = & tif -> tif_dir
ASSIGN	75:16	75:21	6	td = & tif -> tif_dir
LVAL	75:16	75:16	7	td
NAME	75:16	75:16	8	td
LEAF_NODE	75:16	75:16	9	td
ASSIGN_OP	75:19	75:19	7	=
LEAF_NODE	75:19	75:19	8	=
RVAL	75:21	75:21	7	& tif -> tif_dir
UNARY_EXPR	75:21	75:22	8	& tif -> tif_dir
UNARY_OPERATOR	75:21	75:21	9	&
LEAF_NODE	75:21	75:21	10	&
FIELD	75:22	75:27	9	tif -> tif_dir
LEAF_NODE	75:22	75:22	10	tif
LEAF_NODE	75:25	75:25	10	->
LEAF_NODE	75:27	75:27	10	tif_dir
LEAF_NODE	75:34	75:34	4	;
SELECTION	77:1	77:29	3	
KEYWORD	77:1	77:1	4	if
LEAF_NODE	77:1	77:1	5	if
LEAF_NODE	77:4	77:4	4	(
CONDITION	77:5	77:5	4	x >= td -> td_imagewidth
EXPR	77:5	77:10	5	x >= td -> td_imagewidth
FIELD	77:5	77:5	6	x
LEAF_NODE	77:5	77:5	7	x
REL_OPERATOR	77:7	77:7	6	>=
LEAF_NODE	77:7	77:7	7	>=
FIELD	77:10	77:14	6	td -> td_imagewidth
LEAF_NODE	77:10	77:10	7	td
LEAF_NODE	77:12	77:12	7	->
LEAF_NODE	77:14	77:14	7	td_imagewidth
LEAF_NODE	77:27	77:27	4	)
STATEMENTS	77:29	83:1	4	
LEAF_NODE	77:29	77:29	5	{
STATEMENTS	78:2	82:2	5	
EXPR_STATEMENT	78:2	81:48	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Col out of range, max %lu" , ( unsigned long ) x , ( unsigned long ) ( td -> td_imagewidth - 1 ) ) ;
EXPR	78:2	78:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Col out of range, max %lu" , ( unsigned long ) x , ( unsigned long ) ( td -> td_imagewidth - 1 ) )
FUNCTION_CALL	78:2	81:47	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Col out of range, max %lu" , ( unsigned long ) x , ( unsigned long ) ( td -> td_imagewidth - 1 ) )
CALLEE	78:2	78:2	9	TIFFErrorExt
LEAF_NODE	78:2	78:2	10	TIFFErrorExt
LEAF_NODE	78:14	78:14	9	(
ARGUMENT	78:15	78:15	9	tif -> tif_clientdata
FIELD	78:15	78:20	10	tif -> tif_clientdata
LEAF_NODE	78:15	78:15	11	tif
LEAF_NODE	78:18	78:18	11	->
LEAF_NODE	78:20	78:20	11	tif_clientdata
LEAF_NODE	78:34	78:34	9	,
ARGUMENT	78:36	78:36	9	tif -> tif_name
FIELD	78:36	78:41	10	tif -> tif_name
LEAF_NODE	78:36	78:36	11	tif
LEAF_NODE	78:39	78:39	11	->
LEAF_NODE	78:41	78:41	11	tif_name
LEAF_NODE	78:49	78:49	9	,
ARGUMENT	79:8	79:8	9	"%lu: Col out of range, max %lu"
FIELD	79:8	79:8	10	"%lu: Col out of range, max %lu"
LEAF_NODE	79:8	79:8	11	"%lu: Col out of range, max %lu"
LEAF_NODE	79:40	79:40	9	,
ARGUMENT	80:8	80:24	9	( unsigned long ) x
LEAF_NODE	80:8	80:8	10	(
TYPE_NAME	80:9	80:18	10	unsigned long
LEAF_NODE	80:9	80:9	11	unsigned
LEAF_NODE	80:18	80:18	11	long
LEAF_NODE	80:22	80:22	10	)
FIELD	80:24	80:24	10	x
LEAF_NODE	80:24	80:24	11	x
LEAF_NODE	80:25	80:25	9	,
ARGUMENT	81:8	81:46	9	( unsigned long ) ( td -> td_imagewidth - 1 )
LEAF_NODE	81:8	81:8	10	(
TYPE_NAME	81:9	81:18	10	unsigned long
LEAF_NODE	81:9	81:9	11	unsigned
LEAF_NODE	81:18	81:18	11	long
LEAF_NODE	81:22	81:22	10	)
LEAF_NODE	81:24	81:24	10	(
FIELD	81:25	81:29	10	td -> td_imagewidth
LEAF_NODE	81:25	81:25	11	td
LEAF_NODE	81:27	81:27	11	->
LEAF_NODE	81:29	81:29	11	td_imagewidth
LEAF_NODE	81:43	81:43	10	-
FIELD	81:45	81:45	10	1
LEAF_NODE	81:45	81:45	11	1
LEAF_NODE	81:46	81:46	10	)
LEAF_NODE	81:47	81:47	9	)
LEAF_NODE	81:48	81:48	7	;
JUMP_STATEMENT	82:2	82:12	6	return ( 0 ) ;
KEYWORD	82:2	82:2	7	return
LEAF_NODE	82:2	82:2	8	return
DESTINATION	82:9	82:9	7	( 0 )
EXPR	82:9	82:11	8	( 0 )
LEAF_NODE	82:9	82:9	9	(
FIELD	82:10	82:10	9	0
LEAF_NODE	82:10	82:10	10	0
LEAF_NODE	82:11	82:11	9	)
LEAF_NODE	82:12	82:12	7	;
LEAF_NODE	83:1	83:1	5	}
SELECTION	84:1	84:30	3	
KEYWORD	84:1	84:1	4	if
LEAF_NODE	84:1	84:1	5	if
LEAF_NODE	84:4	84:4	4	(
CONDITION	84:5	84:5	4	y >= td -> td_imagelength
EXPR	84:5	84:10	5	y >= td -> td_imagelength
FIELD	84:5	84:5	6	y
LEAF_NODE	84:5	84:5	7	y
REL_OPERATOR	84:7	84:7	6	>=
LEAF_NODE	84:7	84:7	7	>=
FIELD	84:10	84:14	6	td -> td_imagelength
LEAF_NODE	84:10	84:10	7	td
LEAF_NODE	84:12	84:12	7	->
LEAF_NODE	84:14	84:14	7	td_imagelength
LEAF_NODE	84:28	84:28	4	)
STATEMENTS	84:30	90:1	4	
LEAF_NODE	84:30	84:30	5	{
STATEMENTS	85:2	89:2	5	
EXPR_STATEMENT	85:2	88:49	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Row out of range, max %lu" , ( unsigned long ) y , ( unsigned long ) ( td -> td_imagelength - 1 ) ) ;
EXPR	85:2	85:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Row out of range, max %lu" , ( unsigned long ) y , ( unsigned long ) ( td -> td_imagelength - 1 ) )
FUNCTION_CALL	85:2	88:48	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Row out of range, max %lu" , ( unsigned long ) y , ( unsigned long ) ( td -> td_imagelength - 1 ) )
CALLEE	85:2	85:2	9	TIFFErrorExt
LEAF_NODE	85:2	85:2	10	TIFFErrorExt
LEAF_NODE	85:14	85:14	9	(
ARGUMENT	85:15	85:15	9	tif -> tif_clientdata
FIELD	85:15	85:20	10	tif -> tif_clientdata
LEAF_NODE	85:15	85:15	11	tif
LEAF_NODE	85:18	85:18	11	->
LEAF_NODE	85:20	85:20	11	tif_clientdata
LEAF_NODE	85:34	85:34	9	,
ARGUMENT	85:36	85:36	9	tif -> tif_name
FIELD	85:36	85:41	10	tif -> tif_name
LEAF_NODE	85:36	85:36	11	tif
LEAF_NODE	85:39	85:39	11	->
LEAF_NODE	85:41	85:41	11	tif_name
LEAF_NODE	85:49	85:49	9	,
ARGUMENT	86:8	86:8	9	"%lu: Row out of range, max %lu"
FIELD	86:8	86:8	10	"%lu: Row out of range, max %lu"
LEAF_NODE	86:8	86:8	11	"%lu: Row out of range, max %lu"
LEAF_NODE	86:40	86:40	9	,
ARGUMENT	87:8	87:24	9	( unsigned long ) y
LEAF_NODE	87:8	87:8	10	(
TYPE_NAME	87:9	87:18	10	unsigned long
LEAF_NODE	87:9	87:9	11	unsigned
LEAF_NODE	87:18	87:18	11	long
LEAF_NODE	87:22	87:22	10	)
FIELD	87:24	87:24	10	y
LEAF_NODE	87:24	87:24	11	y
LEAF_NODE	87:25	87:25	9	,
ARGUMENT	88:8	88:47	9	( unsigned long ) ( td -> td_imagelength - 1 )
LEAF_NODE	88:8	88:8	10	(
TYPE_NAME	88:9	88:18	10	unsigned long
LEAF_NODE	88:9	88:9	11	unsigned
LEAF_NODE	88:18	88:18	11	long
LEAF_NODE	88:22	88:22	10	)
LEAF_NODE	88:24	88:24	10	(
FIELD	88:25	88:29	10	td -> td_imagelength
LEAF_NODE	88:25	88:25	11	td
LEAF_NODE	88:27	88:27	11	->
LEAF_NODE	88:29	88:29	11	td_imagelength
LEAF_NODE	88:44	88:44	10	-
FIELD	88:46	88:46	10	1
LEAF_NODE	88:46	88:46	11	1
LEAF_NODE	88:47	88:47	10	)
LEAF_NODE	88:48	88:48	9	)
LEAF_NODE	88:49	88:49	7	;
JUMP_STATEMENT	89:2	89:12	6	return ( 0 ) ;
KEYWORD	89:2	89:2	7	return
LEAF_NODE	89:2	89:2	8	return
DESTINATION	89:9	89:9	7	( 0 )
EXPR	89:9	89:11	8	( 0 )
LEAF_NODE	89:9	89:9	9	(
FIELD	89:10	89:10	9	0
LEAF_NODE	89:10	89:10	10	0
LEAF_NODE	89:11	89:11	9	)
LEAF_NODE	89:12	89:12	7	;
LEAF_NODE	90:1	90:1	5	}
SELECTION	91:1	91:29	3	
KEYWORD	91:1	91:1	4	if
LEAF_NODE	91:1	91:1	5	if
LEAF_NODE	91:4	91:4	4	(
CONDITION	91:5	91:5	4	z >= td -> td_imagedepth
EXPR	91:5	91:10	5	z >= td -> td_imagedepth
FIELD	91:5	91:5	6	z
LEAF_NODE	91:5	91:5	7	z
REL_OPERATOR	91:7	91:7	6	>=
LEAF_NODE	91:7	91:7	7	>=
FIELD	91:10	91:14	6	td -> td_imagedepth
LEAF_NODE	91:10	91:10	7	td
LEAF_NODE	91:12	91:12	7	->
LEAF_NODE	91:14	91:14	7	td_imagedepth
LEAF_NODE	91:27	91:27	4	)
STATEMENTS	91:29	97:1	4	
LEAF_NODE	91:29	91:29	5	{
STATEMENTS	92:2	96:2	5	
EXPR_STATEMENT	92:2	95:48	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Depth out of range, max %lu" , ( unsigned long ) z , ( unsigned long ) ( td -> td_imagedepth - 1 ) ) ;
EXPR	92:2	92:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Depth out of range, max %lu" , ( unsigned long ) z , ( unsigned long ) ( td -> td_imagedepth - 1 ) )
FUNCTION_CALL	92:2	95:47	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Depth out of range, max %lu" , ( unsigned long ) z , ( unsigned long ) ( td -> td_imagedepth - 1 ) )
CALLEE	92:2	92:2	9	TIFFErrorExt
LEAF_NODE	92:2	92:2	10	TIFFErrorExt
LEAF_NODE	92:14	92:14	9	(
ARGUMENT	92:15	92:15	9	tif -> tif_clientdata
FIELD	92:15	92:20	10	tif -> tif_clientdata
LEAF_NODE	92:15	92:15	11	tif
LEAF_NODE	92:18	92:18	11	->
LEAF_NODE	92:20	92:20	11	tif_clientdata
LEAF_NODE	92:34	92:34	9	,
ARGUMENT	92:36	92:36	9	tif -> tif_name
FIELD	92:36	92:41	10	tif -> tif_name
LEAF_NODE	92:36	92:36	11	tif
LEAF_NODE	92:39	92:39	11	->
LEAF_NODE	92:41	92:41	11	tif_name
LEAF_NODE	92:49	92:49	9	,
ARGUMENT	93:8	93:8	9	"%lu: Depth out of range, max %lu"
FIELD	93:8	93:8	10	"%lu: Depth out of range, max %lu"
LEAF_NODE	93:8	93:8	11	"%lu: Depth out of range, max %lu"
LEAF_NODE	93:42	93:42	9	,
ARGUMENT	94:8	94:24	9	( unsigned long ) z
LEAF_NODE	94:8	94:8	10	(
TYPE_NAME	94:9	94:18	10	unsigned long
LEAF_NODE	94:9	94:9	11	unsigned
LEAF_NODE	94:18	94:18	11	long
LEAF_NODE	94:22	94:22	10	)
FIELD	94:24	94:24	10	z
LEAF_NODE	94:24	94:24	11	z
LEAF_NODE	94:25	94:25	9	,
ARGUMENT	95:8	95:46	9	( unsigned long ) ( td -> td_imagedepth - 1 )
LEAF_NODE	95:8	95:8	10	(
TYPE_NAME	95:9	95:18	10	unsigned long
LEAF_NODE	95:9	95:9	11	unsigned
LEAF_NODE	95:18	95:18	11	long
LEAF_NODE	95:22	95:22	10	)
LEAF_NODE	95:24	95:24	10	(
FIELD	95:25	95:29	10	td -> td_imagedepth
LEAF_NODE	95:25	95:25	11	td
LEAF_NODE	95:27	95:27	11	->
LEAF_NODE	95:29	95:29	11	td_imagedepth
LEAF_NODE	95:43	95:43	10	-
FIELD	95:45	95:45	10	1
LEAF_NODE	95:45	95:45	11	1
LEAF_NODE	95:46	95:46	10	)
LEAF_NODE	95:47	95:47	9	)
LEAF_NODE	95:48	95:48	7	;
JUMP_STATEMENT	96:2	96:12	6	return ( 0 ) ;
KEYWORD	96:2	96:2	7	return
LEAF_NODE	96:2	96:2	8	return
DESTINATION	96:9	96:9	7	( 0 )
EXPR	96:9	96:11	8	( 0 )
LEAF_NODE	96:9	96:9	9	(
FIELD	96:10	96:10	9	0
LEAF_NODE	96:10	96:10	10	0
LEAF_NODE	96:11	96:11	9	)
LEAF_NODE	96:12	96:12	7	;
LEAF_NODE	97:1	97:1	5	}
SELECTION	98:1	99:34	3	
KEYWORD	98:1	98:1	4	if
LEAF_NODE	98:1	98:1	5	if
LEAF_NODE	98:4	98:4	4	(
CONDITION	98:5	98:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s >= td -> td_samplesperpixel
EXPR	98:5	98:5	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s >= td -> td_samplesperpixel
AND	98:5	99:5	6	td -> td_planarconfig == PLANARCONFIG_SEPARATE && s >= td -> td_samplesperpixel
EXPR	98:5	98:28	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	98:5	98:9	8	td -> td_planarconfig
LEAF_NODE	98:5	98:5	9	td
LEAF_NODE	98:7	98:7	9	->
LEAF_NODE	98:9	98:9	9	td_planarconfig
EQ_OPERATOR	98:25	98:25	8	==
LEAF_NODE	98:25	98:25	9	==
FIELD	98:28	98:28	8	PLANARCONFIG_SEPARATE
LEAF_NODE	98:28	98:28	9	PLANARCONFIG_SEPARATE
LEAF_NODE	98:50	98:50	7	&&
EXPR	99:5	99:10	7	s >= td -> td_samplesperpixel
FIELD	99:5	99:5	8	s
LEAF_NODE	99:5	99:5	9	s
REL_OPERATOR	99:7	99:7	8	>=
LEAF_NODE	99:7	99:7	9	>=
FIELD	99:10	99:14	8	td -> td_samplesperpixel
LEAF_NODE	99:10	99:10	9	td
LEAF_NODE	99:12	99:12	9	->
LEAF_NODE	99:14	99:14	9	td_samplesperpixel
LEAF_NODE	99:32	99:32	4	)
STATEMENTS	99:34	105:1	4	
LEAF_NODE	99:34	99:34	5	{
STATEMENTS	100:2	104:2	5	
EXPR_STATEMENT	100:2	103:53	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Sample out of range, max %lu" , ( unsigned long ) s , ( unsigned long ) ( td -> td_samplesperpixel - 1 ) ) ;
EXPR	100:2	100:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Sample out of range, max %lu" , ( unsigned long ) s , ( unsigned long ) ( td -> td_samplesperpixel - 1 ) )
FUNCTION_CALL	100:2	103:52	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Sample out of range, max %lu" , ( unsigned long ) s , ( unsigned long ) ( td -> td_samplesperpixel - 1 ) )
CALLEE	100:2	100:2	9	TIFFErrorExt
LEAF_NODE	100:2	100:2	10	TIFFErrorExt
LEAF_NODE	100:14	100:14	9	(
ARGUMENT	100:15	100:15	9	tif -> tif_clientdata
FIELD	100:15	100:20	10	tif -> tif_clientdata
LEAF_NODE	100:15	100:15	11	tif
LEAF_NODE	100:18	100:18	11	->
LEAF_NODE	100:20	100:20	11	tif_clientdata
LEAF_NODE	100:34	100:34	9	,
ARGUMENT	100:36	100:36	9	tif -> tif_name
FIELD	100:36	100:41	10	tif -> tif_name
LEAF_NODE	100:36	100:36	11	tif
LEAF_NODE	100:39	100:39	11	->
LEAF_NODE	100:41	100:41	11	tif_name
LEAF_NODE	100:49	100:49	9	,
ARGUMENT	101:8	101:8	9	"%lu: Sample out of range, max %lu"
FIELD	101:8	101:8	10	"%lu: Sample out of range, max %lu"
LEAF_NODE	101:8	101:8	11	"%lu: Sample out of range, max %lu"
LEAF_NODE	101:43	101:43	9	,
ARGUMENT	102:8	102:24	9	( unsigned long ) s
LEAF_NODE	102:8	102:8	10	(
TYPE_NAME	102:9	102:18	10	unsigned long
LEAF_NODE	102:9	102:9	11	unsigned
LEAF_NODE	102:18	102:18	11	long
LEAF_NODE	102:22	102:22	10	)
FIELD	102:24	102:24	10	s
LEAF_NODE	102:24	102:24	11	s
LEAF_NODE	102:25	102:25	9	,
ARGUMENT	103:8	103:51	9	( unsigned long ) ( td -> td_samplesperpixel - 1 )
LEAF_NODE	103:8	103:8	10	(
TYPE_NAME	103:9	103:18	10	unsigned long
LEAF_NODE	103:9	103:9	11	unsigned
LEAF_NODE	103:18	103:18	11	long
LEAF_NODE	103:22	103:22	10	)
LEAF_NODE	103:24	103:24	10	(
FIELD	103:25	103:29	10	td -> td_samplesperpixel
LEAF_NODE	103:25	103:25	11	td
LEAF_NODE	103:27	103:27	11	->
LEAF_NODE	103:29	103:29	11	td_samplesperpixel
LEAF_NODE	103:48	103:48	10	-
FIELD	103:50	103:50	10	1
LEAF_NODE	103:50	103:50	11	1
LEAF_NODE	103:51	103:51	10	)
LEAF_NODE	103:52	103:52	9	)
LEAF_NODE	103:53	103:53	7	;
JUMP_STATEMENT	104:2	104:12	6	return ( 0 ) ;
KEYWORD	104:2	104:2	7	return
LEAF_NODE	104:2	104:2	8	return
DESTINATION	104:9	104:9	7	( 0 )
EXPR	104:9	104:11	8	( 0 )
LEAF_NODE	104:9	104:9	9	(
FIELD	104:10	104:10	9	0
LEAF_NODE	104:10	104:10	10	0
LEAF_NODE	104:11	104:11	9	)
LEAF_NODE	104:12	104:12	7	;
LEAF_NODE	105:1	105:1	5	}
JUMP_STATEMENT	106:1	106:11	3	return ( 1 ) ;
KEYWORD	106:1	106:1	4	return
LEAF_NODE	106:1	106:1	5	return
DESTINATION	106:8	106:8	4	( 1 )
EXPR	106:8	106:10	5	( 1 )
LEAF_NODE	106:8	106:8	6	(
FIELD	106:9	106:9	6	1
LEAF_NODE	106:9	106:9	7	1
LEAF_NODE	106:10	106:10	6	)
LEAF_NODE	106:11	106:11	4	;
LEAF_NODE	107:0	107:0	2	}
FUNCTION_DEF	112:0	136:0	1	
RETURN_TYPE	112:0	112:0	2	uint32
TYPE_NAME	112:0	112:0	3	uint32
LEAF_NODE	112:0	112:0	4	uint32
FUNCTION_NAME	113:0	113:0	2	TIFFNumberOfTiles
LEAF_NODE	113:0	113:0	3	TIFFNumberOfTiles
PARAMETER_LIST	113:17	113:27	2	( TIFF * tif )
LEAF_NODE	113:17	113:17	3	(
PARAMETER_DECL	113:18	113:24	3	TIFF * tif
TYPE	113:18	113:22	4	TIFF *
TYPE_NAME	113:18	113:18	5	TIFF
LEAF_NODE	113:18	113:18	6	TIFF
POINTER	113:22	113:22	5	*
LEAF_NODE	113:22	113:22	6	*
NAME	113:24	113:24	4	tif
LEAF_NODE	113:24	113:24	5	tif
LEAF_NODE	113:27	113:27	3	)
LEAF_NODE	114:0	114:0	2	{
STATEMENTS	115:1	135:16	2	
SIMPLE_DECL	115:1	115:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	115:1	115:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	115:1	115:15	5	TIFFDirectory *
TYPE_NAME	115:1	115:1	6	TIFFDirectory
LEAF_NODE	115:1	115:1	7	TIFFDirectory
POINTER	115:15	115:15	6	*
LEAF_NODE	115:15	115:15	7	*
NAME	115:16	115:16	5	td
LEAF_NODE	115:16	115:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	115:16	115:16	5	td = & tif -> tif_dir
ASSIGN	115:16	115:21	6	td = & tif -> tif_dir
LVAL	115:16	115:16	7	td
NAME	115:16	115:16	8	td
LEAF_NODE	115:16	115:16	9	td
ASSIGN_OP	115:19	115:19	7	=
LEAF_NODE	115:19	115:19	8	=
RVAL	115:21	115:21	7	& tif -> tif_dir
UNARY_EXPR	115:21	115:22	8	& tif -> tif_dir
UNARY_OPERATOR	115:21	115:21	9	&
LEAF_NODE	115:21	115:21	10	&
FIELD	115:22	115:27	9	tif -> tif_dir
LEAF_NODE	115:22	115:22	10	tif
LEAF_NODE	115:25	115:25	10	->
LEAF_NODE	115:27	115:27	10	tif_dir
LEAF_NODE	115:34	115:34	4	;
SIMPLE_DECL	116:1	116:29	3	uint32 dx ; dx = td -> td_tilewidth ;
VAR_DECL	116:1	116:8	4	uint32 dx ; dx = td -> td_tilewidth
TYPE	116:1	116:1	5	uint32
TYPE_NAME	116:1	116:1	6	uint32
LEAF_NODE	116:1	116:1	7	uint32
NAME	116:8	116:8	5	dx
LEAF_NODE	116:8	116:8	6	dx
LEAF_NODE	0:0	0:0	5	;
INIT	116:8	116:8	5	dx = td -> td_tilewidth
ASSIGN	116:8	116:13	6	dx = td -> td_tilewidth
LVAL	116:8	116:8	7	dx
NAME	116:8	116:8	8	dx
LEAF_NODE	116:8	116:8	9	dx
ASSIGN_OP	116:11	116:11	7	=
LEAF_NODE	116:11	116:11	8	=
RVAL	116:13	116:13	7	td -> td_tilewidth
FIELD	116:13	116:17	8	td -> td_tilewidth
LEAF_NODE	116:13	116:13	9	td
LEAF_NODE	116:15	116:15	9	->
LEAF_NODE	116:17	116:17	9	td_tilewidth
LEAF_NODE	116:29	116:29	4	;
SIMPLE_DECL	117:1	117:30	3	uint32 dy ; dy = td -> td_tilelength ;
VAR_DECL	117:1	117:8	4	uint32 dy ; dy = td -> td_tilelength
TYPE	117:1	117:1	5	uint32
TYPE_NAME	117:1	117:1	6	uint32
LEAF_NODE	117:1	117:1	7	uint32
NAME	117:8	117:8	5	dy
LEAF_NODE	117:8	117:8	6	dy
LEAF_NODE	0:0	0:0	5	;
INIT	117:8	117:8	5	dy = td -> td_tilelength
ASSIGN	117:8	117:13	6	dy = td -> td_tilelength
LVAL	117:8	117:8	7	dy
NAME	117:8	117:8	8	dy
LEAF_NODE	117:8	117:8	9	dy
ASSIGN_OP	117:11	117:11	7	=
LEAF_NODE	117:11	117:11	8	=
RVAL	117:13	117:13	7	td -> td_tilelength
FIELD	117:13	117:17	8	td -> td_tilelength
LEAF_NODE	117:13	117:13	9	td
LEAF_NODE	117:15	117:15	9	->
LEAF_NODE	117:17	117:17	9	td_tilelength
LEAF_NODE	117:30	117:30	4	;
SIMPLE_DECL	118:1	118:29	3	uint32 dz ; dz = td -> td_tiledepth ;
VAR_DECL	118:1	118:8	4	uint32 dz ; dz = td -> td_tiledepth
TYPE	118:1	118:1	5	uint32
TYPE_NAME	118:1	118:1	6	uint32
LEAF_NODE	118:1	118:1	7	uint32
NAME	118:8	118:8	5	dz
LEAF_NODE	118:8	118:8	6	dz
LEAF_NODE	0:0	0:0	5	;
INIT	118:8	118:8	5	dz = td -> td_tiledepth
ASSIGN	118:8	118:13	6	dz = td -> td_tiledepth
LVAL	118:8	118:8	7	dz
NAME	118:8	118:8	8	dz
LEAF_NODE	118:8	118:8	9	dz
ASSIGN_OP	118:11	118:11	7	=
LEAF_NODE	118:11	118:11	8	=
RVAL	118:13	118:13	7	td -> td_tiledepth
FIELD	118:13	118:17	8	td -> td_tiledepth
LEAF_NODE	118:13	118:13	9	td
LEAF_NODE	118:15	118:15	9	->
LEAF_NODE	118:17	118:17	9	td_tiledepth
LEAF_NODE	118:29	118:29	4	;
SIMPLE_DECL	119:1	119:14	3	uint32 ntiles ;
VAR_DECL	119:1	119:8	4	uint32 ntiles
TYPE	119:1	119:1	5	uint32
TYPE_NAME	119:1	119:1	6	uint32
LEAF_NODE	119:1	119:1	7	uint32
NAME	119:8	119:8	5	ntiles
LEAF_NODE	119:8	119:8	6	ntiles
LEAF_NODE	119:14	119:14	4	;
SELECTION	121:1	122:2	3	
KEYWORD	121:1	121:1	4	if
LEAF_NODE	121:1	121:1	5	if
LEAF_NODE	121:4	121:4	4	(
CONDITION	121:5	121:5	4	dx == ( uint32 ) - 1
EXPR	121:5	121:20	5	dx == ( uint32 ) - 1
FIELD	121:5	121:5	6	dx
LEAF_NODE	121:5	121:5	7	dx
EQ_OPERATOR	121:8	121:8	6	==
LEAF_NODE	121:8	121:8	7	==
LEAF_NODE	121:11	121:11	6	(
TYPE_NAME	121:12	121:12	6	uint32
LEAF_NODE	121:12	121:12	7	uint32
LEAF_NODE	121:18	121:18	6	)
UNARY_EXPR	121:20	121:21	6	- 1
UNARY_OPERATOR	121:20	121:20	7	-
LEAF_NODE	121:20	121:20	8	-
FIELD	121:21	121:21	7	1
LEAF_NODE	121:21	121:21	8	1
LEAF_NODE	121:22	121:22	4	)
STATEMENTS	122:2	122:2	4	
EXPR_STATEMENT	122:2	122:24	5	dx = td -> td_imagewidth ;
EXPR	122:2	122:2	6	dx = td -> td_imagewidth
ASSIGN	122:2	122:7	7	dx = td -> td_imagewidth
LVAL	122:2	122:2	8	dx
FIELD	122:2	122:2	9	dx
LEAF_NODE	122:2	122:2	10	dx
ASSIGN_OP	122:5	122:5	8	=
LEAF_NODE	122:5	122:5	9	=
RVAL	122:7	122:7	8	td -> td_imagewidth
FIELD	122:7	122:11	9	td -> td_imagewidth
LEAF_NODE	122:7	122:7	10	td
LEAF_NODE	122:9	122:9	10	->
LEAF_NODE	122:11	122:11	10	td_imagewidth
LEAF_NODE	122:24	122:24	6	;
SELECTION	123:1	124:2	3	
KEYWORD	123:1	123:1	4	if
LEAF_NODE	123:1	123:1	5	if
LEAF_NODE	123:4	123:4	4	(
CONDITION	123:5	123:5	4	dy == ( uint32 ) - 1
EXPR	123:5	123:20	5	dy == ( uint32 ) - 1
FIELD	123:5	123:5	6	dy
LEAF_NODE	123:5	123:5	7	dy
EQ_OPERATOR	123:8	123:8	6	==
LEAF_NODE	123:8	123:8	7	==
LEAF_NODE	123:11	123:11	6	(
TYPE_NAME	123:12	123:12	6	uint32
LEAF_NODE	123:12	123:12	7	uint32
LEAF_NODE	123:18	123:18	6	)
UNARY_EXPR	123:20	123:21	6	- 1
UNARY_OPERATOR	123:20	123:20	7	-
LEAF_NODE	123:20	123:20	8	-
FIELD	123:21	123:21	7	1
LEAF_NODE	123:21	123:21	8	1
LEAF_NODE	123:22	123:22	4	)
STATEMENTS	124:2	124:2	4	
EXPR_STATEMENT	124:2	124:25	5	dy = td -> td_imagelength ;
EXPR	124:2	124:2	6	dy = td -> td_imagelength
ASSIGN	124:2	124:7	7	dy = td -> td_imagelength
LVAL	124:2	124:2	8	dy
FIELD	124:2	124:2	9	dy
LEAF_NODE	124:2	124:2	10	dy
ASSIGN_OP	124:5	124:5	8	=
LEAF_NODE	124:5	124:5	9	=
RVAL	124:7	124:7	8	td -> td_imagelength
FIELD	124:7	124:11	9	td -> td_imagelength
LEAF_NODE	124:7	124:7	10	td
LEAF_NODE	124:9	124:9	10	->
LEAF_NODE	124:11	124:11	10	td_imagelength
LEAF_NODE	124:25	124:25	6	;
SELECTION	125:1	126:2	3	
KEYWORD	125:1	125:1	4	if
LEAF_NODE	125:1	125:1	5	if
LEAF_NODE	125:4	125:4	4	(
CONDITION	125:5	125:5	4	dz == ( uint32 ) - 1
EXPR	125:5	125:20	5	dz == ( uint32 ) - 1
FIELD	125:5	125:5	6	dz
LEAF_NODE	125:5	125:5	7	dz
EQ_OPERATOR	125:8	125:8	6	==
LEAF_NODE	125:8	125:8	7	==
LEAF_NODE	125:11	125:11	6	(
TYPE_NAME	125:12	125:12	6	uint32
LEAF_NODE	125:12	125:12	7	uint32
LEAF_NODE	125:18	125:18	6	)
UNARY_EXPR	125:20	125:21	6	- 1
UNARY_OPERATOR	125:20	125:20	7	-
LEAF_NODE	125:20	125:20	8	-
FIELD	125:21	125:21	7	1
LEAF_NODE	125:21	125:21	8	1
LEAF_NODE	125:22	125:22	4	)
STATEMENTS	126:2	126:2	4	
EXPR_STATEMENT	126:2	126:24	5	dz = td -> td_imagedepth ;
EXPR	126:2	126:2	6	dz = td -> td_imagedepth
ASSIGN	126:2	126:7	7	dz = td -> td_imagedepth
LVAL	126:2	126:2	8	dz
FIELD	126:2	126:2	9	dz
LEAF_NODE	126:2	126:2	10	dz
ASSIGN_OP	126:5	126:5	8	=
LEAF_NODE	126:5	126:5	9	=
RVAL	126:7	126:7	8	td -> td_imagedepth
FIELD	126:7	126:11	9	td -> td_imagedepth
LEAF_NODE	126:7	126:7	10	td
LEAF_NODE	126:9	126:9	10	->
LEAF_NODE	126:11	126:11	10	td_imagedepth
LEAF_NODE	126:24	126:24	6	;
EXPR_STATEMENT	127:1	131:64	3	ntiles = ( dx == 0 || dy == 0 || dz == 0 ) ? 0 : _TIFFMultiply32 ( tif , _TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" ) , TIFFhowmany_32 ( td -> td_imagedepth , dz ) , "TIFFNumberOfTiles" ) ;
EXPR	127:1	127:1	4	ntiles = ( dx == 0 || dy == 0 || dz == 0 ) ? 0 : _TIFFMultiply32 ( tif , _TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" ) , TIFFhowmany_32 ( td -> td_imagedepth , dz ) , "TIFFNumberOfTiles" )
ASSIGN	127:1	127:10	5	ntiles = ( dx == 0 || dy == 0 || dz == 0 ) ? 0 : _TIFFMultiply32 ( tif , _TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" ) , TIFFhowmany_32 ( td -> td_imagedepth , dz ) , "TIFFNumberOfTiles" )
LVAL	127:1	127:1	6	ntiles
FIELD	127:1	127:1	7	ntiles
LEAF_NODE	127:1	127:1	8	ntiles
ASSIGN_OP	127:8	127:8	6	=
LEAF_NODE	127:8	127:8	7	=
RVAL	127:10	127:10	6	( dx == 0 || dy == 0 || dz == 0 ) ? 0 : _TIFFMultiply32 ( tif , _TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" ) , TIFFhowmany_32 ( td -> td_imagedepth , dz ) , "TIFFNumberOfTiles" )
COND_EXPR	127:10	128:5	7	( dx == 0 || dy == 0 || dz == 0 ) ? 0 : _TIFFMultiply32 ( tif , _TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" ) , TIFFhowmany_32 ( td -> td_imagedepth , dz ) , "TIFFNumberOfTiles" )
CONDITION	127:10	127:40	8	( dx == 0 || dy == 0 || dz == 0 )
LEAF_NODE	127:10	127:10	9	(
OR	127:11	127:22	9	dx == 0 || dy == 0 || dz == 0
EXPR	127:11	127:17	10	dx == 0
FIELD	127:11	127:11	11	dx
LEAF_NODE	127:11	127:11	12	dx
EQ_OPERATOR	127:14	127:14	11	==
LEAF_NODE	127:14	127:14	12	==
FIELD	127:17	127:17	11	0
LEAF_NODE	127:17	127:17	12	0
LEAF_NODE	127:19	127:19	10	||
EXPR	127:22	127:22	10	dy == 0 || dz == 0
OR	127:22	127:33	11	dy == 0 || dz == 0
EXPR	127:22	127:28	12	dy == 0
FIELD	127:22	127:22	13	dy
LEAF_NODE	127:22	127:22	14	dy
EQ_OPERATOR	127:25	127:25	13	==
LEAF_NODE	127:25	127:25	14	==
FIELD	127:28	127:28	13	0
LEAF_NODE	127:28	127:28	14	0
LEAF_NODE	127:30	127:30	12	||
EXPR	127:33	127:39	12	dz == 0
FIELD	127:33	127:33	13	dz
LEAF_NODE	127:33	127:33	14	dz
EQ_OPERATOR	127:36	127:36	13	==
LEAF_NODE	127:36	127:36	14	==
FIELD	127:39	127:39	13	0
LEAF_NODE	127:39	127:39	14	0
LEAF_NODE	127:40	127:40	9	)
LEAF_NODE	127:42	127:42	8	?
EXPR	127:44	127:44	8	0
FIELD	127:44	127:44	9	0
LEAF_NODE	127:44	127:44	10	0
LEAF_NODE	127:46	127:46	8	:
FUNCTION_CALL	128:5	131:63	8	_TIFFMultiply32 ( tif , _TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" ) , TIFFhowmany_32 ( td -> td_imagedepth , dz ) , "TIFFNumberOfTiles" )
CALLEE	128:5	128:5	9	_TIFFMultiply32
LEAF_NODE	128:5	128:5	10	_TIFFMultiply32
LEAF_NODE	128:20	128:20	9	(
ARGUMENT	128:21	128:21	9	tif
FIELD	128:21	128:21	10	tif
LEAF_NODE	128:21	128:21	11	tif
LEAF_NODE	128:24	128:24	9	,
ARGUMENT	128:26	128:26	9	_TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" )
FUNCTION_CALL	128:26	130:24	10	_TIFFMultiply32 ( tif , TIFFhowmany_32 ( td -> td_imagewidth , dx ) , TIFFhowmany_32 ( td -> td_imagelength , dy ) , "TIFFNumberOfTiles" )
CALLEE	128:26	128:26	11	_TIFFMultiply32
LEAF_NODE	128:26	128:26	12	_TIFFMultiply32
LEAF_NODE	128:41	128:41	11	(
ARGUMENT	128:42	128:42	11	tif
FIELD	128:42	128:42	12	tif
LEAF_NODE	128:42	128:42	13	tif
LEAF_NODE	128:45	128:45	11	,
ARGUMENT	128:47	128:47	11	TIFFhowmany_32 ( td -> td_imagewidth , dx )
FUNCTION_CALL	128:47	128:83	12	TIFFhowmany_32 ( td -> td_imagewidth , dx )
CALLEE	128:47	128:47	13	TIFFhowmany_32
LEAF_NODE	128:47	128:47	14	TIFFhowmany_32
LEAF_NODE	128:61	128:61	13	(
ARGUMENT	128:62	128:62	13	td -> td_imagewidth
FIELD	128:62	128:66	14	td -> td_imagewidth
LEAF_NODE	128:62	128:62	15	td
LEAF_NODE	128:64	128:64	15	->
LEAF_NODE	128:66	128:66	15	td_imagewidth
LEAF_NODE	128:79	128:79	13	,
ARGUMENT	128:81	128:81	13	dx
FIELD	128:81	128:81	14	dx
LEAF_NODE	128:81	128:81	15	dx
LEAF_NODE	128:83	128:83	13	)
LEAF_NODE	128:84	128:84	11	,
ARGUMENT	129:5	129:5	11	TIFFhowmany_32 ( td -> td_imagelength , dy )
FUNCTION_CALL	129:5	129:42	12	TIFFhowmany_32 ( td -> td_imagelength , dy )
CALLEE	129:5	129:5	13	TIFFhowmany_32
LEAF_NODE	129:5	129:5	14	TIFFhowmany_32
LEAF_NODE	129:19	129:19	13	(
ARGUMENT	129:20	129:20	13	td -> td_imagelength
FIELD	129:20	129:24	14	td -> td_imagelength
LEAF_NODE	129:20	129:20	15	td
LEAF_NODE	129:22	129:22	15	->
LEAF_NODE	129:24	129:24	15	td_imagelength
LEAF_NODE	129:38	129:38	13	,
ARGUMENT	129:40	129:40	13	dy
FIELD	129:40	129:40	14	dy
LEAF_NODE	129:40	129:40	15	dy
LEAF_NODE	129:42	129:42	13	)
LEAF_NODE	129:43	129:43	11	,
ARGUMENT	130:5	130:5	11	"TIFFNumberOfTiles"
FIELD	130:5	130:5	12	"TIFFNumberOfTiles"
LEAF_NODE	130:5	130:5	13	"TIFFNumberOfTiles"
LEAF_NODE	130:24	130:24	11	)
LEAF_NODE	130:25	130:25	9	,
ARGUMENT	131:5	131:5	9	TIFFhowmany_32 ( td -> td_imagedepth , dz )
FUNCTION_CALL	131:5	131:41	10	TIFFhowmany_32 ( td -> td_imagedepth , dz )
CALLEE	131:5	131:5	11	TIFFhowmany_32
LEAF_NODE	131:5	131:5	12	TIFFhowmany_32
LEAF_NODE	131:19	131:19	11	(
ARGUMENT	131:20	131:20	11	td -> td_imagedepth
FIELD	131:20	131:24	12	td -> td_imagedepth
LEAF_NODE	131:20	131:20	13	td
LEAF_NODE	131:22	131:22	13	->
LEAF_NODE	131:24	131:24	13	td_imagedepth
LEAF_NODE	131:37	131:37	11	,
ARGUMENT	131:39	131:39	11	dz
FIELD	131:39	131:39	12	dz
LEAF_NODE	131:39	131:39	13	dz
LEAF_NODE	131:41	131:41	11	)
LEAF_NODE	131:42	131:42	9	,
ARGUMENT	131:44	131:44	9	"TIFFNumberOfTiles"
FIELD	131:44	131:44	10	"TIFFNumberOfTiles"
LEAF_NODE	131:44	131:44	11	"TIFFNumberOfTiles"
LEAF_NODE	131:63	131:63	9	)
LEAF_NODE	131:64	131:64	4	;
SELECTION	132:1	133:2	3	
KEYWORD	132:1	132:1	4	if
LEAF_NODE	132:1	132:1	5	if
LEAF_NODE	132:4	132:4	4	(
CONDITION	132:5	132:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	132:5	132:28	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	132:5	132:9	6	td -> td_planarconfig
LEAF_NODE	132:5	132:5	7	td
LEAF_NODE	132:7	132:7	7	->
LEAF_NODE	132:9	132:9	7	td_planarconfig
EQ_OPERATOR	132:25	132:25	6	==
LEAF_NODE	132:25	132:25	7	==
FIELD	132:28	132:28	6	PLANARCONFIG_SEPARATE
LEAF_NODE	132:28	132:28	7	PLANARCONFIG_SEPARATE
LEAF_NODE	132:49	132:49	4	)
STATEMENTS	133:2	133:2	4	
EXPR_STATEMENT	133:2	134:26	5	ntiles = _TIFFMultiply32 ( tif , ntiles , td -> td_samplesperpixel , "TIFFNumberOfTiles" ) ;
EXPR	133:2	133:2	6	ntiles = _TIFFMultiply32 ( tif , ntiles , td -> td_samplesperpixel , "TIFFNumberOfTiles" )
ASSIGN	133:2	133:11	7	ntiles = _TIFFMultiply32 ( tif , ntiles , td -> td_samplesperpixel , "TIFFNumberOfTiles" )
LVAL	133:2	133:2	8	ntiles
FIELD	133:2	133:2	9	ntiles
LEAF_NODE	133:2	133:2	10	ntiles
ASSIGN_OP	133:9	133:9	8	=
LEAF_NODE	133:9	133:9	9	=
RVAL	133:11	133:11	8	_TIFFMultiply32 ( tif , ntiles , td -> td_samplesperpixel , "TIFFNumberOfTiles" )
FUNCTION_CALL	133:11	134:25	9	_TIFFMultiply32 ( tif , ntiles , td -> td_samplesperpixel , "TIFFNumberOfTiles" )
CALLEE	133:11	133:11	10	_TIFFMultiply32
LEAF_NODE	133:11	133:11	11	_TIFFMultiply32
LEAF_NODE	133:26	133:26	10	(
ARGUMENT	133:27	133:27	10	tif
FIELD	133:27	133:27	11	tif
LEAF_NODE	133:27	133:27	12	tif
LEAF_NODE	133:30	133:30	10	,
ARGUMENT	133:32	133:32	10	ntiles
FIELD	133:32	133:32	11	ntiles
LEAF_NODE	133:32	133:32	12	ntiles
LEAF_NODE	133:38	133:38	10	,
ARGUMENT	133:40	133:40	10	td -> td_samplesperpixel
FIELD	133:40	133:44	11	td -> td_samplesperpixel
LEAF_NODE	133:40	133:40	12	td
LEAF_NODE	133:42	133:42	12	->
LEAF_NODE	133:44	133:44	12	td_samplesperpixel
LEAF_NODE	133:62	133:62	10	,
ARGUMENT	134:6	134:6	10	"TIFFNumberOfTiles"
FIELD	134:6	134:6	11	"TIFFNumberOfTiles"
LEAF_NODE	134:6	134:6	12	"TIFFNumberOfTiles"
LEAF_NODE	134:25	134:25	10	)
LEAF_NODE	134:26	134:26	6	;
LEAF_NODE	135:1	135:1	3	return
LEAF_NODE	135:8	135:8	3	(
LEAF_NODE	135:9	135:9	3	ntiles
LEAF_NODE	135:15	135:15	3	)
LEAF_NODE	135:16	135:16	3	;
LEAF_NODE	136:0	136:0	2	}
FUNCTION_DEF	141:0	178:0	1	
RETURN_TYPE	141:0	141:0	2	uint64
TYPE_NAME	141:0	141:0	3	uint64
LEAF_NODE	141:0	141:0	4	uint64
FUNCTION_NAME	142:0	142:0	2	TIFFTileRowSize64
LEAF_NODE	142:0	142:0	3	TIFFTileRowSize64
PARAMETER_LIST	142:17	142:27	2	( TIFF * tif )
LEAF_NODE	142:17	142:17	3	(
PARAMETER_DECL	142:18	142:24	3	TIFF * tif
TYPE	142:18	142:22	4	TIFF *
TYPE_NAME	142:18	142:18	5	TIFF
LEAF_NODE	142:18	142:18	6	TIFF
POINTER	142:22	142:22	5	*
LEAF_NODE	142:22	142:22	6	*
NAME	142:24	142:24	4	tif
LEAF_NODE	142:24	142:24	5	tif
LEAF_NODE	142:27	142:27	3	)
LEAF_NODE	143:0	143:0	2	{
STATEMENTS	144:8	177:21	2	
LEAF_NODE	144:8	144:8	3	static
SIMPLE_DECL	144:15	144:56	3	const char [ ] module ; module = "TIFFTileRowSize64" ;
VAR_DECL	144:15	144:26	4	const char [ ] module ; module = "TIFFTileRowSize64"
TYPE	144:15	144:32	5	const char [ ]
TYPE_NAME	144:15	144:21	6	const char
LEAF_NODE	144:15	144:15	7	const
LEAF_NODE	144:21	144:21	7	char
TYPE_SUFFIX	144:32	144:33	6	[ ]
LEAF_NODE	144:32	144:32	7	[
LEAF_NODE	144:33	144:33	7	]
NAME	144:26	144:26	5	module
LEAF_NODE	144:26	144:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	144:26	144:26	5	module = "TIFFTileRowSize64"
ASSIGN	144:26	144:37	6	module = "TIFFTileRowSize64"
LVAL	144:26	144:26	7	module
NAME	144:26	144:26	8	module
LEAF_NODE	144:26	144:26	9	module
ASSIGN_OP	144:35	144:35	7	=
LEAF_NODE	144:35	144:35	8	=
RVAL	144:37	144:37	7	"TIFFTileRowSize64"
FIELD	144:37	144:37	8	"TIFFTileRowSize64"
LEAF_NODE	144:37	144:37	9	"TIFFTileRowSize64"
LEAF_NODE	144:56	144:56	4	;
SIMPLE_DECL	145:1	145:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	145:1	145:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	145:1	145:15	5	TIFFDirectory *
TYPE_NAME	145:1	145:1	6	TIFFDirectory
LEAF_NODE	145:1	145:1	7	TIFFDirectory
POINTER	145:15	145:15	6	*
LEAF_NODE	145:15	145:15	7	*
NAME	145:16	145:16	5	td
LEAF_NODE	145:16	145:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	145:16	145:16	5	td = & tif -> tif_dir
ASSIGN	145:16	145:21	6	td = & tif -> tif_dir
LVAL	145:16	145:16	7	td
NAME	145:16	145:16	8	td
LEAF_NODE	145:16	145:16	9	td
ASSIGN_OP	145:19	145:19	7	=
LEAF_NODE	145:19	145:19	8	=
RVAL	145:21	145:21	7	& tif -> tif_dir
UNARY_EXPR	145:21	145:22	8	& tif -> tif_dir
UNARY_OPERATOR	145:21	145:21	9	&
LEAF_NODE	145:21	145:21	10	&
FIELD	145:22	145:27	9	tif -> tif_dir
LEAF_NODE	145:22	145:22	10	tif
LEAF_NODE	145:25	145:25	10	->
LEAF_NODE	145:27	145:27	10	tif_dir
LEAF_NODE	145:34	145:34	4	;
SIMPLE_DECL	146:1	146:15	3	uint64 rowsize ;
VAR_DECL	146:1	146:8	4	uint64 rowsize
TYPE	146:1	146:1	5	uint64
TYPE_NAME	146:1	146:1	6	uint64
LEAF_NODE	146:1	146:1	7	uint64
NAME	146:8	146:8	5	rowsize
LEAF_NODE	146:8	146:8	6	rowsize
LEAF_NODE	146:15	146:15	4	;
SIMPLE_DECL	147:1	147:19	3	uint64 tilerowsize ;
VAR_DECL	147:1	147:8	4	uint64 tilerowsize
TYPE	147:1	147:1	5	uint64
TYPE_NAME	147:1	147:1	6	uint64
LEAF_NODE	147:1	147:1	7	uint64
NAME	147:8	147:8	5	tilerowsize
LEAF_NODE	147:8	147:8	6	tilerowsize
LEAF_NODE	147:19	147:19	4	;
SELECTION	149:1	150:8	3	
KEYWORD	149:1	149:1	4	if
LEAF_NODE	149:1	149:1	5	if
LEAF_NODE	149:4	149:4	4	(
CONDITION	149:5	149:5	4	td -> td_tilelength == 0
EXPR	149:5	149:26	5	td -> td_tilelength == 0
FIELD	149:5	149:9	6	td -> td_tilelength
LEAF_NODE	149:5	149:5	7	td
LEAF_NODE	149:7	149:7	7	->
LEAF_NODE	149:9	149:9	7	td_tilelength
EQ_OPERATOR	149:23	149:23	6	==
LEAF_NODE	149:23	149:23	7	==
FIELD	149:26	149:26	6	0
LEAF_NODE	149:26	149:26	7	0
LEAF_NODE	149:27	149:27	4	)
STATEMENTS	150:8	153:8	4	
LEAF_NODE	150:8	150:8	5	{
STATEMENTS	151:16	152:16	5	
EXPR_STATEMENT	151:16	151:78	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile length is zero" ) ;
EXPR	151:16	151:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile length is zero" )
FUNCTION_CALL	151:16	151:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile length is zero" )
CALLEE	151:16	151:16	9	TIFFErrorExt
LEAF_NODE	151:16	151:16	10	TIFFErrorExt
LEAF_NODE	151:28	151:28	9	(
ARGUMENT	151:29	151:29	9	tif -> tif_clientdata
FIELD	151:29	151:34	10	tif -> tif_clientdata
LEAF_NODE	151:29	151:29	11	tif
LEAF_NODE	151:32	151:32	11	->
LEAF_NODE	151:34	151:34	11	tif_clientdata
LEAF_NODE	151:48	151:48	9	,
ARGUMENT	151:49	151:49	9	module
FIELD	151:49	151:49	10	module
LEAF_NODE	151:49	151:49	11	module
LEAF_NODE	151:55	151:55	9	,
ARGUMENT	151:56	151:56	9	"Tile length is zero"
FIELD	151:56	151:56	10	"Tile length is zero"
LEAF_NODE	151:56	151:56	11	"Tile length is zero"
LEAF_NODE	151:77	151:77	9	)
LEAF_NODE	151:78	151:78	7	;
JUMP_STATEMENT	152:16	152:24	6	return 0 ;
KEYWORD	152:16	152:16	7	return
LEAF_NODE	152:16	152:16	8	return
DESTINATION	152:23	152:23	7	0
EXPR	152:23	152:23	8	0
FIELD	152:23	152:23	9	0
LEAF_NODE	152:23	152:23	10	0
LEAF_NODE	152:24	152:24	7	;
LEAF_NODE	153:8	153:8	5	}
SELECTION	154:8	155:8	3	
KEYWORD	154:8	154:8	4	if
LEAF_NODE	154:8	154:8	5	if
LEAF_NODE	154:11	154:11	4	(
CONDITION	154:12	154:12	4	td -> td_tilewidth == 0
EXPR	154:12	154:32	5	td -> td_tilewidth == 0
FIELD	154:12	154:16	6	td -> td_tilewidth
LEAF_NODE	154:12	154:12	7	td
LEAF_NODE	154:14	154:14	7	->
LEAF_NODE	154:16	154:16	7	td_tilewidth
EQ_OPERATOR	154:29	154:29	6	==
LEAF_NODE	154:29	154:29	7	==
FIELD	154:32	154:32	6	0
LEAF_NODE	154:32	154:32	7	0
LEAF_NODE	154:33	154:33	4	)
STATEMENTS	155:8	158:8	4	
LEAF_NODE	155:8	155:8	5	{
STATEMENTS	156:16	157:2	5	
EXPR_STATEMENT	156:16	156:77	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile width is zero" ) ;
EXPR	156:16	156:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile width is zero" )
FUNCTION_CALL	156:16	156:76	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Tile width is zero" )
CALLEE	156:16	156:16	9	TIFFErrorExt
LEAF_NODE	156:16	156:16	10	TIFFErrorExt
LEAF_NODE	156:28	156:28	9	(
ARGUMENT	156:29	156:29	9	tif -> tif_clientdata
FIELD	156:29	156:34	10	tif -> tif_clientdata
LEAF_NODE	156:29	156:29	11	tif
LEAF_NODE	156:32	156:32	11	->
LEAF_NODE	156:34	156:34	11	tif_clientdata
LEAF_NODE	156:48	156:48	9	,
ARGUMENT	156:49	156:49	9	module
FIELD	156:49	156:49	10	module
LEAF_NODE	156:49	156:49	11	module
LEAF_NODE	156:55	156:55	9	,
ARGUMENT	156:56	156:56	9	"Tile width is zero"
FIELD	156:56	156:56	10	"Tile width is zero"
LEAF_NODE	156:56	156:56	11	"Tile width is zero"
LEAF_NODE	156:76	156:76	9	)
LEAF_NODE	156:77	156:77	7	;
JUMP_STATEMENT	157:2	157:12	6	return ( 0 ) ;
KEYWORD	157:2	157:2	7	return
LEAF_NODE	157:2	157:2	8	return
DESTINATION	157:9	157:9	7	( 0 )
EXPR	157:9	157:11	8	( 0 )
LEAF_NODE	157:9	157:9	9	(
FIELD	157:10	157:10	9	0
LEAF_NODE	157:10	157:10	10	0
LEAF_NODE	157:11	157:11	9	)
LEAF_NODE	157:12	157:12	7	;
LEAF_NODE	158:8	158:8	5	}
EXPR_STATEMENT	159:1	160:23	3	rowsize = _TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_tilewidth , "TIFFTileRowSize" ) ;
EXPR	159:1	159:1	4	rowsize = _TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_tilewidth , "TIFFTileRowSize" )
ASSIGN	159:1	159:11	5	rowsize = _TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_tilewidth , "TIFFTileRowSize" )
LVAL	159:1	159:1	6	rowsize
FIELD	159:1	159:1	7	rowsize
LEAF_NODE	159:1	159:1	8	rowsize
ASSIGN_OP	159:9	159:9	6	=
LEAF_NODE	159:9	159:9	7	=
RVAL	159:11	159:11	6	_TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_tilewidth , "TIFFTileRowSize" )
FUNCTION_CALL	159:11	160:22	7	_TIFFMultiply64 ( tif , td -> td_bitspersample , td -> td_tilewidth , "TIFFTileRowSize" )
CALLEE	159:11	159:11	8	_TIFFMultiply64
LEAF_NODE	159:11	159:11	9	_TIFFMultiply64
LEAF_NODE	159:26	159:26	8	(
ARGUMENT	159:27	159:27	8	tif
FIELD	159:27	159:27	9	tif
LEAF_NODE	159:27	159:27	10	tif
LEAF_NODE	159:30	159:30	8	,
ARGUMENT	159:32	159:32	8	td -> td_bitspersample
FIELD	159:32	159:36	9	td -> td_bitspersample
LEAF_NODE	159:32	159:32	10	td
LEAF_NODE	159:34	159:34	10	->
LEAF_NODE	159:36	159:36	10	td_bitspersample
LEAF_NODE	159:52	159:52	8	,
ARGUMENT	159:54	159:54	8	td -> td_tilewidth
FIELD	159:54	159:58	9	td -> td_tilewidth
LEAF_NODE	159:54	159:54	10	td
LEAF_NODE	159:56	159:56	10	->
LEAF_NODE	159:58	159:58	10	td_tilewidth
LEAF_NODE	159:70	159:70	8	,
ARGUMENT	160:5	160:5	8	"TIFFTileRowSize"
FIELD	160:5	160:5	9	"TIFFTileRowSize"
LEAF_NODE	160:5	160:5	10	"TIFFTileRowSize"
LEAF_NODE	160:22	160:22	8	)
LEAF_NODE	160:23	160:23	4	;
SELECTION	161:1	162:8	3	
KEYWORD	161:1	161:1	4	if
LEAF_NODE	161:1	161:1	5	if
LEAF_NODE	161:4	161:4	4	(
CONDITION	161:5	161:5	4	td -> td_planarconfig == PLANARCONFIG_CONTIG
EXPR	161:5	161:28	5	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	161:5	161:9	6	td -> td_planarconfig
LEAF_NODE	161:5	161:5	7	td
LEAF_NODE	161:7	161:7	7	->
LEAF_NODE	161:9	161:9	7	td_planarconfig
EQ_OPERATOR	161:25	161:25	6	==
LEAF_NODE	161:25	161:25	7	==
FIELD	161:28	161:28	6	PLANARCONFIG_CONTIG
LEAF_NODE	161:28	161:28	7	PLANARCONFIG_CONTIG
LEAF_NODE	161:47	161:47	4	)
STATEMENTS	162:8	170:8	4	
LEAF_NODE	162:8	162:8	5	{
STATEMENTS	163:16	168:2	5	
SELECTION	163:16	164:16	6	
KEYWORD	163:16	163:16	7	if
LEAF_NODE	163:16	163:16	8	if
LEAF_NODE	163:19	163:19	7	(
CONDITION	163:20	163:20	7	td -> td_samplesperpixel == 0
EXPR	163:20	163:46	8	td -> td_samplesperpixel == 0
FIELD	163:20	163:24	9	td -> td_samplesperpixel
LEAF_NODE	163:20	163:20	10	td
LEAF_NODE	163:22	163:22	10	->
LEAF_NODE	163:24	163:24	10	td_samplesperpixel
EQ_OPERATOR	163:43	163:43	9	==
LEAF_NODE	163:43	163:43	10	==
FIELD	163:46	163:46	9	0
LEAF_NODE	163:46	163:46	10	0
LEAF_NODE	163:47	163:47	7	)
STATEMENTS	164:16	167:16	7	
LEAF_NODE	164:16	164:16	8	{
STATEMENTS	165:24	166:24	8	
EXPR_STATEMENT	165:24	165:92	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Samples per pixel is zero" ) ;
EXPR	165:24	165:24	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Samples per pixel is zero" )
FUNCTION_CALL	165:24	165:91	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Samples per pixel is zero" )
CALLEE	165:24	165:24	12	TIFFErrorExt
LEAF_NODE	165:24	165:24	13	TIFFErrorExt
LEAF_NODE	165:36	165:36	12	(
ARGUMENT	165:37	165:37	12	tif -> tif_clientdata
FIELD	165:37	165:42	13	tif -> tif_clientdata
LEAF_NODE	165:37	165:37	14	tif
LEAF_NODE	165:40	165:40	14	->
LEAF_NODE	165:42	165:42	14	tif_clientdata
LEAF_NODE	165:56	165:56	12	,
ARGUMENT	165:57	165:57	12	module
FIELD	165:57	165:57	13	module
LEAF_NODE	165:57	165:57	14	module
LEAF_NODE	165:63	165:63	12	,
ARGUMENT	165:64	165:64	12	"Samples per pixel is zero"
FIELD	165:64	165:64	13	"Samples per pixel is zero"
LEAF_NODE	165:64	165:64	14	"Samples per pixel is zero"
LEAF_NODE	165:91	165:91	12	)
LEAF_NODE	165:92	165:92	10	;
JUMP_STATEMENT	166:24	166:32	9	return 0 ;
KEYWORD	166:24	166:24	10	return
LEAF_NODE	166:24	166:24	11	return
DESTINATION	166:31	166:31	10	0
EXPR	166:31	166:31	11	0
FIELD	166:31	166:31	12	0
LEAF_NODE	166:31	166:31	13	0
LEAF_NODE	166:32	166:32	10	;
LEAF_NODE	167:16	167:16	8	}
EXPR_STATEMENT	168:2	169:24	6	rowsize = _TIFFMultiply64 ( tif , rowsize , td -> td_samplesperpixel , "TIFFTileRowSize" ) ;
EXPR	168:2	168:2	7	rowsize = _TIFFMultiply64 ( tif , rowsize , td -> td_samplesperpixel , "TIFFTileRowSize" )
ASSIGN	168:2	168:12	8	rowsize = _TIFFMultiply64 ( tif , rowsize , td -> td_samplesperpixel , "TIFFTileRowSize" )
LVAL	168:2	168:2	9	rowsize
FIELD	168:2	168:2	10	rowsize
LEAF_NODE	168:2	168:2	11	rowsize
ASSIGN_OP	168:10	168:10	9	=
LEAF_NODE	168:10	168:10	10	=
RVAL	168:12	168:12	9	_TIFFMultiply64 ( tif , rowsize , td -> td_samplesperpixel , "TIFFTileRowSize" )
FUNCTION_CALL	168:12	169:23	10	_TIFFMultiply64 ( tif , rowsize , td -> td_samplesperpixel , "TIFFTileRowSize" )
CALLEE	168:12	168:12	11	_TIFFMultiply64
LEAF_NODE	168:12	168:12	12	_TIFFMultiply64
LEAF_NODE	168:27	168:27	11	(
ARGUMENT	168:28	168:28	11	tif
FIELD	168:28	168:28	12	tif
LEAF_NODE	168:28	168:28	13	tif
LEAF_NODE	168:31	168:31	11	,
ARGUMENT	168:33	168:33	11	rowsize
FIELD	168:33	168:33	12	rowsize
LEAF_NODE	168:33	168:33	13	rowsize
LEAF_NODE	168:40	168:40	11	,
ARGUMENT	168:42	168:42	11	td -> td_samplesperpixel
FIELD	168:42	168:46	12	td -> td_samplesperpixel
LEAF_NODE	168:42	168:42	13	td
LEAF_NODE	168:44	168:44	13	->
LEAF_NODE	168:46	168:46	13	td_samplesperpixel
LEAF_NODE	168:64	168:64	11	,
ARGUMENT	169:6	169:6	11	"TIFFTileRowSize"
FIELD	169:6	169:6	12	"TIFFTileRowSize"
LEAF_NODE	169:6	169:6	13	"TIFFTileRowSize"
LEAF_NODE	169:23	169:23	11	)
LEAF_NODE	169:24	169:24	7	;
LEAF_NODE	170:8	170:8	5	}
EXPR_STATEMENT	171:8	171:44	3	tilerowsize = TIFFhowmany8_64 ( rowsize ) ;
EXPR	171:8	171:8	4	tilerowsize = TIFFhowmany8_64 ( rowsize )
ASSIGN	171:8	171:20	5	tilerowsize = TIFFhowmany8_64 ( rowsize )
LVAL	171:8	171:8	6	tilerowsize
FIELD	171:8	171:8	7	tilerowsize
LEAF_NODE	171:8	171:8	8	tilerowsize
ASSIGN_OP	171:19	171:19	6	=
LEAF_NODE	171:19	171:19	7	=
RVAL	171:20	171:20	6	TIFFhowmany8_64 ( rowsize )
FUNCTION_CALL	171:20	171:43	7	TIFFhowmany8_64 ( rowsize )
CALLEE	171:20	171:20	8	TIFFhowmany8_64
LEAF_NODE	171:20	171:20	9	TIFFhowmany8_64
LEAF_NODE	171:35	171:35	8	(
ARGUMENT	171:36	171:36	8	rowsize
FIELD	171:36	171:36	9	rowsize
LEAF_NODE	171:36	171:36	10	rowsize
LEAF_NODE	171:43	171:43	8	)
LEAF_NODE	171:44	171:44	4	;
SELECTION	172:8	173:8	3	
KEYWORD	172:8	172:8	4	if
LEAF_NODE	172:8	172:8	5	if
LEAF_NODE	172:11	172:11	4	(
CONDITION	172:12	172:12	4	tilerowsize == 0
EXPR	172:12	172:27	5	tilerowsize == 0
FIELD	172:12	172:12	6	tilerowsize
LEAF_NODE	172:12	172:12	7	tilerowsize
EQ_OPERATOR	172:24	172:24	6	==
LEAF_NODE	172:24	172:24	7	==
FIELD	172:27	172:27	6	0
LEAF_NODE	172:27	172:27	7	0
LEAF_NODE	172:28	172:28	4	)
STATEMENTS	173:8	176:8	4	
LEAF_NODE	173:8	173:8	5	{
STATEMENTS	174:16	175:16	5	
EXPR_STATEMENT	174:16	174:89	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Computed tile row size is zero" ) ;
EXPR	174:16	174:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Computed tile row size is zero" )
FUNCTION_CALL	174:16	174:88	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Computed tile row size is zero" )
CALLEE	174:16	174:16	9	TIFFErrorExt
LEAF_NODE	174:16	174:16	10	TIFFErrorExt
LEAF_NODE	174:28	174:28	9	(
ARGUMENT	174:29	174:29	9	tif -> tif_clientdata
FIELD	174:29	174:34	10	tif -> tif_clientdata
LEAF_NODE	174:29	174:29	11	tif
LEAF_NODE	174:32	174:32	11	->
LEAF_NODE	174:34	174:34	11	tif_clientdata
LEAF_NODE	174:48	174:48	9	,
ARGUMENT	174:49	174:49	9	module
FIELD	174:49	174:49	10	module
LEAF_NODE	174:49	174:49	11	module
LEAF_NODE	174:55	174:55	9	,
ARGUMENT	174:56	174:56	9	"Computed tile row size is zero"
FIELD	174:56	174:56	10	"Computed tile row size is zero"
LEAF_NODE	174:56	174:56	11	"Computed tile row size is zero"
LEAF_NODE	174:88	174:88	9	)
LEAF_NODE	174:89	174:89	7	;
JUMP_STATEMENT	175:16	175:24	6	return 0 ;
KEYWORD	175:16	175:16	7	return
LEAF_NODE	175:16	175:16	8	return
DESTINATION	175:23	175:23	7	0
EXPR	175:23	175:23	8	0
FIELD	175:23	175:23	9	0
LEAF_NODE	175:23	175:23	10	0
LEAF_NODE	175:24	175:24	7	;
LEAF_NODE	176:8	176:8	5	}
LEAF_NODE	177:1	177:1	3	return
LEAF_NODE	177:8	177:8	3	(
LEAF_NODE	177:9	177:9	3	tilerowsize
LEAF_NODE	177:20	177:20	3	)
LEAF_NODE	177:21	177:21	3	;
LEAF_NODE	178:0	178:0	2	}
FUNCTION_DEF	179:0	186:0	1	
RETURN_TYPE	179:0	179:0	2	tmsize_t
TYPE_NAME	179:0	179:0	3	tmsize_t
LEAF_NODE	179:0	179:0	4	tmsize_t
FUNCTION_NAME	180:0	180:0	2	TIFFTileRowSize
LEAF_NODE	180:0	180:0	3	TIFFTileRowSize
PARAMETER_LIST	180:15	180:25	2	( TIFF * tif )
LEAF_NODE	180:15	180:15	3	(
PARAMETER_DECL	180:16	180:22	3	TIFF * tif
TYPE	180:16	180:20	4	TIFF *
TYPE_NAME	180:16	180:16	5	TIFF
LEAF_NODE	180:16	180:16	6	TIFF
POINTER	180:20	180:20	5	*
LEAF_NODE	180:20	180:20	6	*
NAME	180:22	180:22	4	tif
LEAF_NODE	180:22	180:22	5	tif
LEAF_NODE	180:25	180:25	3	)
LEAF_NODE	181:0	181:0	2	{
STATEMENTS	182:1	185:1	2	
LEAF_NODE	182:1	182:1	3	static
SIMPLE_DECL	182:8	182:47	3	const char [ ] module ; module = "TIFFTileRowSize" ;
VAR_DECL	182:8	182:19	4	const char [ ] module ; module = "TIFFTileRowSize"
TYPE	182:8	182:25	5	const char [ ]
TYPE_NAME	182:8	182:14	6	const char
LEAF_NODE	182:8	182:8	7	const
LEAF_NODE	182:14	182:14	7	char
TYPE_SUFFIX	182:25	182:26	6	[ ]
LEAF_NODE	182:25	182:25	7	[
LEAF_NODE	182:26	182:26	7	]
NAME	182:19	182:19	5	module
LEAF_NODE	182:19	182:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	182:19	182:19	5	module = "TIFFTileRowSize"
ASSIGN	182:19	182:30	6	module = "TIFFTileRowSize"
LVAL	182:19	182:19	7	module
NAME	182:19	182:19	8	module
LEAF_NODE	182:19	182:19	9	module
ASSIGN_OP	182:28	182:28	7	=
LEAF_NODE	182:28	182:28	8	=
RVAL	182:30	182:30	7	"TIFFTileRowSize"
FIELD	182:30	182:30	8	"TIFFTileRowSize"
LEAF_NODE	182:30	182:30	9	"TIFFTileRowSize"
LEAF_NODE	182:47	182:47	4	;
SIMPLE_DECL	183:1	183:9	3	uint64 m ;
VAR_DECL	183:1	183:8	4	uint64 m
TYPE	183:1	183:1	5	uint64
TYPE_NAME	183:1	183:1	6	uint64
LEAF_NODE	183:1	183:1	7	uint64
NAME	183:8	183:8	5	m
LEAF_NODE	183:8	183:8	6	m
LEAF_NODE	183:9	183:9	4	;
EXPR_STATEMENT	184:1	184:25	3	m = TIFFTileRowSize64 ( tif ) ;
EXPR	184:1	184:1	4	m = TIFFTileRowSize64 ( tif )
ASSIGN	184:1	184:3	5	m = TIFFTileRowSize64 ( tif )
LVAL	184:1	184:1	6	m
FIELD	184:1	184:1	7	m
LEAF_NODE	184:1	184:1	8	m
ASSIGN_OP	184:2	184:2	6	=
LEAF_NODE	184:2	184:2	7	=
RVAL	184:3	184:3	6	TIFFTileRowSize64 ( tif )
FUNCTION_CALL	184:3	184:24	7	TIFFTileRowSize64 ( tif )
CALLEE	184:3	184:3	8	TIFFTileRowSize64
LEAF_NODE	184:3	184:3	9	TIFFTileRowSize64
LEAF_NODE	184:20	184:20	8	(
ARGUMENT	184:21	184:21	8	tif
FIELD	184:21	184:21	9	tif
LEAF_NODE	184:21	184:21	10	tif
LEAF_NODE	184:24	184:24	8	)
LEAF_NODE	184:25	184:25	4	;
JUMP_STATEMENT	185:1	185:46	3	return _TIFFCastUInt64ToSSize ( tif , m , module ) ;
KEYWORD	185:1	185:1	4	return
LEAF_NODE	185:1	185:1	5	return
DESTINATION	185:8	185:8	4	_TIFFCastUInt64ToSSize ( tif , m , module )
EXPR	185:8	185:8	5	_TIFFCastUInt64ToSSize ( tif , m , module )
FUNCTION_CALL	185:8	185:45	6	_TIFFCastUInt64ToSSize ( tif , m , module )
CALLEE	185:8	185:8	7	_TIFFCastUInt64ToSSize
LEAF_NODE	185:8	185:8	8	_TIFFCastUInt64ToSSize
LEAF_NODE	185:30	185:30	7	(
ARGUMENT	185:31	185:31	7	tif
FIELD	185:31	185:31	8	tif
LEAF_NODE	185:31	185:31	9	tif
LEAF_NODE	185:34	185:34	7	,
ARGUMENT	185:36	185:36	7	m
FIELD	185:36	185:36	8	m
LEAF_NODE	185:36	185:36	9	m
LEAF_NODE	185:37	185:37	7	,
ARGUMENT	185:39	185:39	7	module
FIELD	185:39	185:39	8	module
LEAF_NODE	185:39	185:39	9	module
LEAF_NODE	185:45	185:45	7	)
LEAF_NODE	185:46	185:46	4	;
LEAF_NODE	186:0	186:0	2	}
FUNCTION_DEF	191:0	238:0	1	
RETURN_TYPE	191:0	191:0	2	uint64
TYPE_NAME	191:0	191:0	3	uint64
LEAF_NODE	191:0	191:0	4	uint64
FUNCTION_NAME	192:0	192:0	2	TIFFVTileSize64
LEAF_NODE	192:0	192:0	3	TIFFVTileSize64
PARAMETER_LIST	192:15	192:39	2	( TIFF * tif , uint32 nrows )
LEAF_NODE	192:15	192:15	3	(
PARAMETER_DECL	192:16	192:22	3	TIFF * tif
TYPE	192:16	192:20	4	TIFF *
TYPE_NAME	192:16	192:16	5	TIFF
LEAF_NODE	192:16	192:16	6	TIFF
POINTER	192:20	192:20	5	*
LEAF_NODE	192:20	192:20	6	*
NAME	192:22	192:22	4	tif
LEAF_NODE	192:22	192:22	5	tif
LEAF_NODE	192:25	192:25	3	,
PARAMETER_DECL	192:27	192:34	3	uint32 nrows
TYPE	192:27	192:27	4	uint32
TYPE_NAME	192:27	192:27	5	uint32
LEAF_NODE	192:27	192:27	6	uint32
NAME	192:34	192:34	4	nrows
LEAF_NODE	192:34	192:34	5	nrows
LEAF_NODE	192:39	192:39	3	)
LEAF_NODE	193:0	193:0	2	{
STATEMENTS	194:1	236:1	2	
LEAF_NODE	194:1	194:1	3	static
SIMPLE_DECL	194:8	194:47	3	const char [ ] module ; module = "TIFFVTileSize64" ;
VAR_DECL	194:8	194:19	4	const char [ ] module ; module = "TIFFVTileSize64"
TYPE	194:8	194:25	5	const char [ ]
TYPE_NAME	194:8	194:14	6	const char
LEAF_NODE	194:8	194:8	7	const
LEAF_NODE	194:14	194:14	7	char
TYPE_SUFFIX	194:25	194:26	6	[ ]
LEAF_NODE	194:25	194:25	7	[
LEAF_NODE	194:26	194:26	7	]
NAME	194:19	194:19	5	module
LEAF_NODE	194:19	194:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	194:19	194:19	5	module = "TIFFVTileSize64"
ASSIGN	194:19	194:30	6	module = "TIFFVTileSize64"
LVAL	194:19	194:19	7	module
NAME	194:19	194:19	8	module
LEAF_NODE	194:19	194:19	9	module
ASSIGN_OP	194:28	194:28	7	=
LEAF_NODE	194:28	194:28	8	=
RVAL	194:30	194:30	7	"TIFFVTileSize64"
FIELD	194:30	194:30	8	"TIFFVTileSize64"
LEAF_NODE	194:30	194:30	9	"TIFFVTileSize64"
LEAF_NODE	194:47	194:47	4	;
SIMPLE_DECL	195:1	195:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	195:1	195:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	195:1	195:15	5	TIFFDirectory *
TYPE_NAME	195:1	195:1	6	TIFFDirectory
LEAF_NODE	195:1	195:1	7	TIFFDirectory
POINTER	195:15	195:15	6	*
LEAF_NODE	195:15	195:15	7	*
NAME	195:16	195:16	5	td
LEAF_NODE	195:16	195:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	195:16	195:16	5	td = & tif -> tif_dir
ASSIGN	195:16	195:21	6	td = & tif -> tif_dir
LVAL	195:16	195:16	7	td
NAME	195:16	195:16	8	td
LEAF_NODE	195:16	195:16	9	td
ASSIGN_OP	195:19	195:19	7	=
LEAF_NODE	195:19	195:19	8	=
RVAL	195:21	195:21	7	& tif -> tif_dir
UNARY_EXPR	195:21	195:22	8	& tif -> tif_dir
UNARY_OPERATOR	195:21	195:21	9	&
LEAF_NODE	195:21	195:21	10	&
FIELD	195:22	195:27	9	tif -> tif_dir
LEAF_NODE	195:22	195:22	10	tif
LEAF_NODE	195:25	195:25	10	->
LEAF_NODE	195:27	195:27	10	tif_dir
LEAF_NODE	195:34	195:34	4	;
SELECTION	196:1	198:2	3	
KEYWORD	196:1	196:1	4	if
LEAF_NODE	196:1	196:1	5	if
LEAF_NODE	196:4	196:4	4	(
CONDITION	196:5	196:5	4	td -> td_tilelength == 0 || td -> td_tilewidth == 0 || td -> td_tiledepth == 0
EXPR	196:5	196:5	5	td -> td_tilelength == 0 || td -> td_tilewidth == 0 || td -> td_tiledepth == 0
OR	196:5	196:31	6	td -> td_tilelength == 0 || td -> td_tilewidth == 0 || td -> td_tiledepth == 0
EXPR	196:5	196:26	7	td -> td_tilelength == 0
FIELD	196:5	196:9	8	td -> td_tilelength
LEAF_NODE	196:5	196:5	9	td
LEAF_NODE	196:7	196:7	9	->
LEAF_NODE	196:9	196:9	9	td_tilelength
EQ_OPERATOR	196:23	196:23	8	==
LEAF_NODE	196:23	196:23	9	==
FIELD	196:26	196:26	8	0
LEAF_NODE	196:26	196:26	9	0
LEAF_NODE	196:28	196:28	7	||
EXPR	196:31	196:31	7	td -> td_tilewidth == 0 || td -> td_tiledepth == 0
OR	196:31	197:5	8	td -> td_tilewidth == 0 || td -> td_tiledepth == 0
EXPR	196:31	196:51	9	td -> td_tilewidth == 0
FIELD	196:31	196:35	10	td -> td_tilewidth
LEAF_NODE	196:31	196:31	11	td
LEAF_NODE	196:33	196:33	11	->
LEAF_NODE	196:35	196:35	11	td_tilewidth
EQ_OPERATOR	196:48	196:48	10	==
LEAF_NODE	196:48	196:48	11	==
FIELD	196:51	196:51	10	0
LEAF_NODE	196:51	196:51	11	0
LEAF_NODE	196:53	196:53	9	||
EXPR	197:5	197:25	9	td -> td_tiledepth == 0
FIELD	197:5	197:9	10	td -> td_tiledepth
LEAF_NODE	197:5	197:5	11	td
LEAF_NODE	197:7	197:7	11	->
LEAF_NODE	197:9	197:9	11	td_tiledepth
EQ_OPERATOR	197:22	197:22	10	==
LEAF_NODE	197:22	197:22	11	==
FIELD	197:25	197:25	10	0
LEAF_NODE	197:25	197:25	11	0
LEAF_NODE	197:26	197:26	4	)
STATEMENTS	198:2	198:2	4	
JUMP_STATEMENT	198:2	198:12	5	return ( 0 ) ;
KEYWORD	198:2	198:2	6	return
LEAF_NODE	198:2	198:2	7	return
DESTINATION	198:9	198:9	6	( 0 )
EXPR	198:9	198:11	7	( 0 )
LEAF_NODE	198:9	198:9	8	(
FIELD	198:10	198:10	8	0
LEAF_NODE	198:10	198:10	9	0
LEAF_NODE	198:11	198:11	8	)
LEAF_NODE	198:12	198:12	6	;
SELECTION	199:1	203:1	3	
KEYWORD	199:1	199:1	4	if
LEAF_NODE	199:1	199:1	5	if
LEAF_NODE	199:4	199:4	4	(
CONDITION	199:5	199:5	4	( td -> td_planarconfig == PLANARCONFIG_CONTIG ) && ( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
EXPR	199:5	199:5	5	( td -> td_planarconfig == PLANARCONFIG_CONTIG ) && ( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
AND	199:5	200:5	6	( td -> td_planarconfig == PLANARCONFIG_CONTIG ) && ( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
EXPR	199:5	199:46	7	( td -> td_planarconfig == PLANARCONFIG_CONTIG )
LEAF_NODE	199:5	199:5	8	(
FIELD	199:6	199:10	8	td -> td_planarconfig
LEAF_NODE	199:6	199:6	9	td
LEAF_NODE	199:8	199:8	9	->
LEAF_NODE	199:10	199:10	9	td_planarconfig
EQ_OPERATOR	199:25	199:25	8	==
LEAF_NODE	199:25	199:25	9	==
FIELD	199:27	199:27	8	PLANARCONFIG_CONTIG
LEAF_NODE	199:27	199:27	9	PLANARCONFIG_CONTIG
LEAF_NODE	199:46	199:46	8	)
LEAF_NODE	199:47	199:47	7	&&
EXPR	200:5	200:5	7	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
AND	200:5	201:5	8	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
EXPR	200:5	200:43	9	( td -> td_photometric == PHOTOMETRIC_YCBCR )
LEAF_NODE	200:5	200:5	10	(
FIELD	200:6	200:10	10	td -> td_photometric
LEAF_NODE	200:6	200:6	11	td
LEAF_NODE	200:8	200:8	11	->
LEAF_NODE	200:10	200:10	11	td_photometric
EQ_OPERATOR	200:24	200:24	10	==
LEAF_NODE	200:24	200:24	11	==
FIELD	200:26	200:26	10	PHOTOMETRIC_YCBCR
LEAF_NODE	200:26	200:26	11	PHOTOMETRIC_YCBCR
LEAF_NODE	200:43	200:43	10	)
LEAF_NODE	200:44	200:44	9	&&
EXPR	201:5	201:5	9	( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
AND	201:5	202:5	10	( td -> td_samplesperpixel == 3 ) && ( ! isUpSampled ( tif ) )
EXPR	201:5	201:31	11	( td -> td_samplesperpixel == 3 )
LEAF_NODE	201:5	201:5	12	(
FIELD	201:6	201:10	12	td -> td_samplesperpixel
LEAF_NODE	201:6	201:6	13	td
LEAF_NODE	201:8	201:8	13	->
LEAF_NODE	201:10	201:10	13	td_samplesperpixel
EQ_OPERATOR	201:28	201:28	12	==
LEAF_NODE	201:28	201:28	13	==
FIELD	201:30	201:30	12	3
LEAF_NODE	201:30	201:30	13	3
LEAF_NODE	201:31	201:31	12	)
LEAF_NODE	201:32	201:32	11	&&
EXPR	202:5	202:23	11	( ! isUpSampled ( tif ) )
LEAF_NODE	202:5	202:5	12	(
UNARY_EXPR	202:6	202:7	12	! isUpSampled ( tif )
UNARY_OPERATOR	202:6	202:6	13	!
LEAF_NODE	202:6	202:6	14	!
FUNCTION_CALL	202:7	202:22	13	isUpSampled ( tif )
CALLEE	202:7	202:7	14	isUpSampled
LEAF_NODE	202:7	202:7	15	isUpSampled
LEAF_NODE	202:18	202:18	14	(
ARGUMENT	202:19	202:19	14	tif
FIELD	202:19	202:19	15	tif
LEAF_NODE	202:19	202:19	16	tif
LEAF_NODE	202:22	202:22	14	)
LEAF_NODE	202:23	202:23	12	)
LEAF_NODE	202:24	202:24	4	)
STATEMENTS	203:1	235:1	4	
LEAF_NODE	203:1	203:1	5	{
STATEMENTS	212:2	234:2	5	
SIMPLE_DECL	212:2	212:28	6	uint16 [ 2 ] ycbcrsubsampling ;
VAR_DECL	212:2	212:9	7	uint16 [ 2 ] ycbcrsubsampling
TYPE	212:2	212:25	8	uint16 [ 2 ]
TYPE_NAME	212:2	212:2	9	uint16
LEAF_NODE	212:2	212:2	10	uint16
TYPE_SUFFIX	212:25	212:27	9	[ 2 ]
LEAF_NODE	212:25	212:25	10	[
FIELD	212:26	212:26	10	2
LEAF_NODE	212:26	212:26	11	2
LEAF_NODE	212:27	212:27	10	]
NAME	212:9	212:9	8	ycbcrsubsampling
LEAF_NODE	212:9	212:9	9	ycbcrsubsampling
LEAF_NODE	212:28	212:28	7	;
SIMPLE_DECL	213:2	213:30	6	uint16 samplingblock_samples ;
VAR_DECL	213:2	213:9	7	uint16 samplingblock_samples
TYPE	213:2	213:2	8	uint16
TYPE_NAME	213:2	213:2	9	uint16
LEAF_NODE	213:2	213:2	10	uint16
NAME	213:9	213:9	8	samplingblock_samples
LEAF_NODE	213:9	213:9	9	samplingblock_samples
LEAF_NODE	213:30	213:30	7	;
SIMPLE_DECL	214:2	214:27	6	uint32 samplingblocks_hor ;
VAR_DECL	214:2	214:9	7	uint32 samplingblocks_hor
TYPE	214:2	214:2	8	uint32
TYPE_NAME	214:2	214:2	9	uint32
LEAF_NODE	214:2	214:2	10	uint32
NAME	214:9	214:9	8	samplingblocks_hor
LEAF_NODE	214:9	214:9	9	samplingblocks_hor
LEAF_NODE	214:27	214:27	7	;
SIMPLE_DECL	215:2	215:27	6	uint32 samplingblocks_ver ;
VAR_DECL	215:2	215:9	7	uint32 samplingblocks_ver
TYPE	215:2	215:2	8	uint32
TYPE_NAME	215:2	215:2	9	uint32
LEAF_NODE	215:2	215:2	10	uint32
NAME	215:9	215:9	8	samplingblocks_ver
LEAF_NODE	215:9	215:9	9	samplingblocks_ver
LEAF_NODE	215:27	215:27	7	;
SIMPLE_DECL	216:2	216:28	6	uint64 samplingrow_samples ;
VAR_DECL	216:2	216:9	7	uint64 samplingrow_samples
TYPE	216:2	216:2	8	uint64
TYPE_NAME	216:2	216:2	9	uint64
LEAF_NODE	216:2	216:2	10	uint64
NAME	216:9	216:9	8	samplingrow_samples
LEAF_NODE	216:9	216:9	9	samplingrow_samples
LEAF_NODE	216:28	216:28	7	;
SIMPLE_DECL	217:2	217:25	6	uint64 samplingrow_size ;
VAR_DECL	217:2	217:9	7	uint64 samplingrow_size
TYPE	217:2	217:2	8	uint64
TYPE_NAME	217:2	217:2	9	uint64
LEAF_NODE	217:2	217:2	10	uint64
NAME	217:9	217:9	8	samplingrow_size
LEAF_NODE	217:9	217:9	9	samplingrow_size
LEAF_NODE	217:25	217:25	7	;
EXPR_STATEMENT	218:2	219:25	6	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 ) ;
EXPR	218:2	218:2	7	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 )
FUNCTION_CALL	218:2	219:24	8	TIFFGetFieldDefaulted ( tif , TIFFTAG_YCBCRSUBSAMPLING , ycbcrsubsampling + 0 , ycbcrsubsampling + 1 )
CALLEE	218:2	218:2	9	TIFFGetFieldDefaulted
LEAF_NODE	218:2	218:2	10	TIFFGetFieldDefaulted
LEAF_NODE	218:23	218:23	9	(
ARGUMENT	218:24	218:24	9	tif
FIELD	218:24	218:24	10	tif
LEAF_NODE	218:24	218:24	11	tif
LEAF_NODE	218:27	218:27	9	,
ARGUMENT	218:28	218:28	9	TIFFTAG_YCBCRSUBSAMPLING
FIELD	218:28	218:28	10	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	218:28	218:28	11	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	218:52	218:52	9	,
ARGUMENT	218:53	218:70	9	ycbcrsubsampling + 0
FIELD	218:53	218:53	10	ycbcrsubsampling
LEAF_NODE	218:53	218:53	11	ycbcrsubsampling
LEAF_NODE	218:69	218:69	10	+
FIELD	218:70	218:70	10	0
LEAF_NODE	218:70	218:70	11	0
LEAF_NODE	218:71	218:71	9	,
ARGUMENT	219:6	219:23	9	ycbcrsubsampling + 1
FIELD	219:6	219:6	10	ycbcrsubsampling
LEAF_NODE	219:6	219:6	11	ycbcrsubsampling
LEAF_NODE	219:22	219:22	10	+
FIELD	219:23	219:23	10	1
LEAF_NODE	219:23	219:23	11	1
LEAF_NODE	219:24	219:24	9	)
LEAF_NODE	219:25	219:25	7	;
SELECTION	220:2	222:2	6	
KEYWORD	220:2	220:2	7	if
LEAF_NODE	220:2	220:2	8	if
LEAF_NODE	220:5	220:5	7	(
CONDITION	220:6	220:6	7	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 ) || ( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
EXPR	220:6	220:6	8	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 ) || ( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
OR	220:6	221:8	9	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 ) || ( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
EXPR	220:6	220:87	10	( ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4 )
LEAF_NODE	220:6	220:6	11	(
AND	220:7	220:35	11	ycbcrsubsampling [ 0 ] != 1 && ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4
EXPR	220:7	220:30	12	ycbcrsubsampling [ 0 ] != 1
FIELD	220:7	220:25	13	ycbcrsubsampling [ 0 ]
LEAF_NODE	220:7	220:7	14	ycbcrsubsampling
LEAF_NODE	220:23	220:23	14	[
EXPR	220:24	220:24	14	0
FIELD	220:24	220:24	15	0
LEAF_NODE	220:24	220:24	16	0
LEAF_NODE	220:25	220:25	14	]
EQ_OPERATOR	220:27	220:27	13	!=
LEAF_NODE	220:27	220:27	14	!=
FIELD	220:30	220:30	13	1
LEAF_NODE	220:30	220:30	14	1
LEAF_NODE	220:32	220:32	12	&&
EXPR	220:35	220:35	12	ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4
AND	220:35	220:63	13	ycbcrsubsampling [ 0 ] != 2 && ycbcrsubsampling [ 0 ] != 4
EXPR	220:35	220:58	14	ycbcrsubsampling [ 0 ] != 2
FIELD	220:35	220:53	15	ycbcrsubsampling [ 0 ]
LEAF_NODE	220:35	220:35	16	ycbcrsubsampling
LEAF_NODE	220:51	220:51	16	[
EXPR	220:52	220:52	16	0
FIELD	220:52	220:52	17	0
LEAF_NODE	220:52	220:52	18	0
LEAF_NODE	220:53	220:53	16	]
EQ_OPERATOR	220:55	220:55	15	!=
LEAF_NODE	220:55	220:55	16	!=
FIELD	220:58	220:58	15	2
LEAF_NODE	220:58	220:58	16	2
LEAF_NODE	220:60	220:60	14	&&
EXPR	220:63	220:86	14	ycbcrsubsampling [ 0 ] != 4
FIELD	220:63	220:81	15	ycbcrsubsampling [ 0 ]
LEAF_NODE	220:63	220:63	16	ycbcrsubsampling
LEAF_NODE	220:79	220:79	16	[
EXPR	220:80	220:80	16	0
FIELD	220:80	220:80	17	0
LEAF_NODE	220:80	220:80	18	0
LEAF_NODE	220:81	220:81	16	]
EQ_OPERATOR	220:83	220:83	15	!=
LEAF_NODE	220:83	220:83	16	!=
FIELD	220:86	220:86	15	4
LEAF_NODE	220:86	220:86	16	4
LEAF_NODE	220:87	220:87	11	)
LEAF_NODE	221:6	221:6	10	||
EXPR	221:8	221:89	10	( ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4 )
LEAF_NODE	221:8	221:8	11	(
AND	221:9	221:37	11	ycbcrsubsampling [ 1 ] != 1 && ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4
EXPR	221:9	221:32	12	ycbcrsubsampling [ 1 ] != 1
FIELD	221:9	221:27	13	ycbcrsubsampling [ 1 ]
LEAF_NODE	221:9	221:9	14	ycbcrsubsampling
LEAF_NODE	221:25	221:25	14	[
EXPR	221:26	221:26	14	1
FIELD	221:26	221:26	15	1
LEAF_NODE	221:26	221:26	16	1
LEAF_NODE	221:27	221:27	14	]
EQ_OPERATOR	221:29	221:29	13	!=
LEAF_NODE	221:29	221:29	14	!=
FIELD	221:32	221:32	13	1
LEAF_NODE	221:32	221:32	14	1
LEAF_NODE	221:34	221:34	12	&&
EXPR	221:37	221:37	12	ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4
AND	221:37	221:65	13	ycbcrsubsampling [ 1 ] != 2 && ycbcrsubsampling [ 1 ] != 4
EXPR	221:37	221:60	14	ycbcrsubsampling [ 1 ] != 2
FIELD	221:37	221:55	15	ycbcrsubsampling [ 1 ]
LEAF_NODE	221:37	221:37	16	ycbcrsubsampling
LEAF_NODE	221:53	221:53	16	[
EXPR	221:54	221:54	16	1
FIELD	221:54	221:54	17	1
LEAF_NODE	221:54	221:54	18	1
LEAF_NODE	221:55	221:55	16	]
EQ_OPERATOR	221:57	221:57	15	!=
LEAF_NODE	221:57	221:57	16	!=
FIELD	221:60	221:60	15	2
LEAF_NODE	221:60	221:60	16	2
LEAF_NODE	221:62	221:62	14	&&
EXPR	221:65	221:88	14	ycbcrsubsampling [ 1 ] != 4
FIELD	221:65	221:83	15	ycbcrsubsampling [ 1 ]
LEAF_NODE	221:65	221:65	16	ycbcrsubsampling
LEAF_NODE	221:81	221:81	16	[
EXPR	221:82	221:82	16	1
FIELD	221:82	221:82	17	1
LEAF_NODE	221:82	221:82	18	1
LEAF_NODE	221:83	221:83	16	]
EQ_OPERATOR	221:85	221:85	15	!=
LEAF_NODE	221:85	221:85	16	!=
FIELD	221:88	221:88	15	4
LEAF_NODE	221:88	221:88	16	4
LEAF_NODE	221:89	221:89	11	)
LEAF_NODE	221:90	221:90	7	)
STATEMENTS	222:2	228:2	7	
LEAF_NODE	222:2	222:2	8	{
STATEMENTS	223:3	227:3	8	
EXPR_STATEMENT	223:3	226:30	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling (%dx%d)" , ycbcrsubsampling [ 0 ] , ycbcrsubsampling [ 1 ] ) ;
EXPR	223:3	223:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling (%dx%d)" , ycbcrsubsampling [ 0 ] , ycbcrsubsampling [ 1 ] )
FUNCTION_CALL	223:3	226:29	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid YCbCr subsampling (%dx%d)" , ycbcrsubsampling [ 0 ] , ycbcrsubsampling [ 1 ] )
CALLEE	223:3	223:3	12	TIFFErrorExt
LEAF_NODE	223:3	223:3	13	TIFFErrorExt
LEAF_NODE	223:15	223:15	12	(
ARGUMENT	223:16	223:16	12	tif -> tif_clientdata
FIELD	223:16	223:21	13	tif -> tif_clientdata
LEAF_NODE	223:16	223:16	14	tif
LEAF_NODE	223:19	223:19	14	->
LEAF_NODE	223:21	223:21	14	tif_clientdata
LEAF_NODE	223:35	223:35	12	,
ARGUMENT	223:36	223:36	12	module
FIELD	223:36	223:36	13	module
LEAF_NODE	223:36	223:36	14	module
LEAF_NODE	223:42	223:42	12	,
ARGUMENT	224:9	224:9	12	"Invalid YCbCr subsampling (%dx%d)"
FIELD	224:9	224:9	13	"Invalid YCbCr subsampling (%dx%d)"
LEAF_NODE	224:9	224:9	14	"Invalid YCbCr subsampling (%dx%d)"
LEAF_NODE	224:44	224:44	12	,
ARGUMENT	225:9	225:9	12	ycbcrsubsampling [ 0 ]
FIELD	225:9	225:27	13	ycbcrsubsampling [ 0 ]
LEAF_NODE	225:9	225:9	14	ycbcrsubsampling
LEAF_NODE	225:25	225:25	14	[
EXPR	225:26	225:26	14	0
FIELD	225:26	225:26	15	0
LEAF_NODE	225:26	225:26	16	0
LEAF_NODE	225:27	225:27	14	]
LEAF_NODE	225:28	225:28	12	,
ARGUMENT	226:9	226:9	12	ycbcrsubsampling [ 1 ]
FIELD	226:9	226:27	13	ycbcrsubsampling [ 1 ]
LEAF_NODE	226:9	226:9	14	ycbcrsubsampling
LEAF_NODE	226:25	226:25	14	[
EXPR	226:26	226:26	14	1
FIELD	226:26	226:26	15	1
LEAF_NODE	226:26	226:26	16	1
LEAF_NODE	226:27	226:27	14	]
LEAF_NODE	226:29	226:29	12	)
LEAF_NODE	226:30	226:30	10	;
JUMP_STATEMENT	227:3	227:11	9	return 0 ;
KEYWORD	227:3	227:3	10	return
LEAF_NODE	227:3	227:3	11	return
DESTINATION	227:10	227:10	10	0
EXPR	227:10	227:10	11	0
FIELD	227:10	227:10	12	0
LEAF_NODE	227:10	227:10	13	0
LEAF_NODE	227:11	227:11	10	;
LEAF_NODE	228:2	228:2	8	}
EXPR_STATEMENT	229:2	229:65	6	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2 ;
EXPR	229:2	229:2	7	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
ASSIGN	229:2	229:24	8	samplingblock_samples = ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
LVAL	229:2	229:2	9	samplingblock_samples
FIELD	229:2	229:2	10	samplingblock_samples
LEAF_NODE	229:2	229:2	11	samplingblock_samples
ASSIGN_OP	229:23	229:23	9	=
LEAF_NODE	229:23	229:23	10	=
RVAL	229:24	229:64	9	ycbcrsubsampling [ 0 ] * ycbcrsubsampling [ 1 ] + 2
FIELD	229:24	229:42	10	ycbcrsubsampling [ 0 ]
LEAF_NODE	229:24	229:24	11	ycbcrsubsampling
LEAF_NODE	229:40	229:40	11	[
EXPR	229:41	229:41	11	0
FIELD	229:41	229:41	12	0
LEAF_NODE	229:41	229:41	13	0
LEAF_NODE	229:42	229:42	11	]
LEAF_NODE	229:43	229:43	10	*
FIELD	229:44	229:62	10	ycbcrsubsampling [ 1 ]
LEAF_NODE	229:44	229:44	11	ycbcrsubsampling
LEAF_NODE	229:60	229:60	11	[
EXPR	229:61	229:61	11	1
FIELD	229:61	229:61	12	1
LEAF_NODE	229:61	229:61	13	1
LEAF_NODE	229:62	229:62	11	]
LEAF_NODE	229:63	229:63	10	+
FIELD	229:64	229:64	10	2
LEAF_NODE	229:64	229:64	11	2
LEAF_NODE	229:65	229:65	7	;
EXPR_STATEMENT	230:2	230:73	6	samplingblocks_hor = TIFFhowmany_32 ( td -> td_tilewidth , ycbcrsubsampling [ 0 ] ) ;
EXPR	230:2	230:2	7	samplingblocks_hor = TIFFhowmany_32 ( td -> td_tilewidth , ycbcrsubsampling [ 0 ] )
ASSIGN	230:2	230:21	8	samplingblocks_hor = TIFFhowmany_32 ( td -> td_tilewidth , ycbcrsubsampling [ 0 ] )
LVAL	230:2	230:2	9	samplingblocks_hor
FIELD	230:2	230:2	10	samplingblocks_hor
LEAF_NODE	230:2	230:2	11	samplingblocks_hor
ASSIGN_OP	230:20	230:20	9	=
LEAF_NODE	230:20	230:20	10	=
RVAL	230:21	230:21	9	TIFFhowmany_32 ( td -> td_tilewidth , ycbcrsubsampling [ 0 ] )
FUNCTION_CALL	230:21	230:72	10	TIFFhowmany_32 ( td -> td_tilewidth , ycbcrsubsampling [ 0 ] )
CALLEE	230:21	230:21	11	TIFFhowmany_32
LEAF_NODE	230:21	230:21	12	TIFFhowmany_32
LEAF_NODE	230:35	230:35	11	(
ARGUMENT	230:36	230:36	11	td -> td_tilewidth
FIELD	230:36	230:40	12	td -> td_tilewidth
LEAF_NODE	230:36	230:36	13	td
LEAF_NODE	230:38	230:38	13	->
LEAF_NODE	230:40	230:40	13	td_tilewidth
LEAF_NODE	230:52	230:52	11	,
ARGUMENT	230:53	230:53	11	ycbcrsubsampling [ 0 ]
FIELD	230:53	230:71	12	ycbcrsubsampling [ 0 ]
LEAF_NODE	230:53	230:53	13	ycbcrsubsampling
LEAF_NODE	230:69	230:69	13	[
EXPR	230:70	230:70	13	0
FIELD	230:70	230:70	14	0
LEAF_NODE	230:70	230:70	15	0
LEAF_NODE	230:71	230:71	13	]
LEAF_NODE	230:72	230:72	11	)
LEAF_NODE	230:73	230:73	7	;
EXPR_STATEMENT	231:2	231:62	6	samplingblocks_ver = TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] ) ;
EXPR	231:2	231:2	7	samplingblocks_ver = TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
ASSIGN	231:2	231:21	8	samplingblocks_ver = TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
LVAL	231:2	231:2	9	samplingblocks_ver
FIELD	231:2	231:2	10	samplingblocks_ver
LEAF_NODE	231:2	231:2	11	samplingblocks_ver
ASSIGN_OP	231:20	231:20	9	=
LEAF_NODE	231:20	231:20	10	=
RVAL	231:21	231:21	9	TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
FUNCTION_CALL	231:21	231:61	10	TIFFhowmany_32 ( nrows , ycbcrsubsampling [ 1 ] )
CALLEE	231:21	231:21	11	TIFFhowmany_32
LEAF_NODE	231:21	231:21	12	TIFFhowmany_32
LEAF_NODE	231:35	231:35	11	(
ARGUMENT	231:36	231:36	11	nrows
FIELD	231:36	231:36	12	nrows
LEAF_NODE	231:36	231:36	13	nrows
LEAF_NODE	231:41	231:41	11	,
ARGUMENT	231:42	231:42	11	ycbcrsubsampling [ 1 ]
FIELD	231:42	231:60	12	ycbcrsubsampling [ 1 ]
LEAF_NODE	231:42	231:42	13	ycbcrsubsampling
LEAF_NODE	231:58	231:58	13	[
EXPR	231:59	231:59	13	1
FIELD	231:59	231:59	14	1
LEAF_NODE	231:59	231:59	15	1
LEAF_NODE	231:60	231:60	13	]
LEAF_NODE	231:61	231:61	11	)
LEAF_NODE	231:62	231:62	7	;
EXPR_STATEMENT	232:2	232:90	6	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module ) ;
EXPR	232:2	232:2	7	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
ASSIGN	232:2	232:22	8	samplingrow_samples = _TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
LVAL	232:2	232:2	9	samplingrow_samples
FIELD	232:2	232:2	10	samplingrow_samples
LEAF_NODE	232:2	232:2	11	samplingrow_samples
ASSIGN_OP	232:21	232:21	9	=
LEAF_NODE	232:21	232:21	10	=
RVAL	232:22	232:22	9	_TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
FUNCTION_CALL	232:22	232:89	10	_TIFFMultiply64 ( tif , samplingblocks_hor , samplingblock_samples , module )
CALLEE	232:22	232:22	11	_TIFFMultiply64
LEAF_NODE	232:22	232:22	12	_TIFFMultiply64
LEAF_NODE	232:37	232:37	11	(
ARGUMENT	232:38	232:38	11	tif
FIELD	232:38	232:38	12	tif
LEAF_NODE	232:38	232:38	13	tif
LEAF_NODE	232:41	232:41	11	,
ARGUMENT	232:42	232:42	11	samplingblocks_hor
FIELD	232:42	232:42	12	samplingblocks_hor
LEAF_NODE	232:42	232:42	13	samplingblocks_hor
LEAF_NODE	232:60	232:60	11	,
ARGUMENT	232:61	232:61	11	samplingblock_samples
FIELD	232:61	232:61	12	samplingblock_samples
LEAF_NODE	232:61	232:61	13	samplingblock_samples
LEAF_NODE	232:82	232:82	11	,
ARGUMENT	232:83	232:83	11	module
FIELD	232:83	232:83	12	module
LEAF_NODE	232:83	232:83	13	module
LEAF_NODE	232:89	232:89	11	)
LEAF_NODE	232:90	232:90	7	;
EXPR_STATEMENT	233:2	233:104	6	samplingrow_size = TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) ) ;
EXPR	233:2	233:2	7	samplingrow_size = TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
ASSIGN	233:2	233:19	8	samplingrow_size = TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
LVAL	233:2	233:2	9	samplingrow_size
FIELD	233:2	233:2	10	samplingrow_size
LEAF_NODE	233:2	233:2	11	samplingrow_size
ASSIGN_OP	233:18	233:18	9	=
LEAF_NODE	233:18	233:18	10	=
RVAL	233:19	233:19	9	TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
FUNCTION_CALL	233:19	233:103	10	TIFFhowmany8_64 ( _TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module ) )
CALLEE	233:19	233:19	11	TIFFhowmany8_64
LEAF_NODE	233:19	233:19	12	TIFFhowmany8_64
LEAF_NODE	233:34	233:34	11	(
ARGUMENT	233:35	233:35	11	_TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module )
FUNCTION_CALL	233:35	233:102	12	_TIFFMultiply64 ( tif , samplingrow_samples , td -> td_bitspersample , module )
CALLEE	233:35	233:35	13	_TIFFMultiply64
LEAF_NODE	233:35	233:35	14	_TIFFMultiply64
LEAF_NODE	233:50	233:50	13	(
ARGUMENT	233:51	233:51	13	tif
FIELD	233:51	233:51	14	tif
LEAF_NODE	233:51	233:51	15	tif
LEAF_NODE	233:54	233:54	13	,
ARGUMENT	233:55	233:55	13	samplingrow_samples
FIELD	233:55	233:55	14	samplingrow_samples
LEAF_NODE	233:55	233:55	15	samplingrow_samples
LEAF_NODE	233:74	233:74	13	,
ARGUMENT	233:75	233:75	13	td -> td_bitspersample
FIELD	233:75	233:79	14	td -> td_bitspersample
LEAF_NODE	233:75	233:75	15	td
LEAF_NODE	233:77	233:77	15	->
LEAF_NODE	233:79	233:79	15	td_bitspersample
LEAF_NODE	233:95	233:95	13	,
ARGUMENT	233:96	233:96	13	module
FIELD	233:96	233:96	14	module
LEAF_NODE	233:96	233:96	15	module
LEAF_NODE	233:102	233:102	13	)
LEAF_NODE	233:103	233:103	11	)
LEAF_NODE	233:104	233:104	7	;
JUMP_STATEMENT	234:2	234:73	6	return ( _TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module ) ) ;
KEYWORD	234:2	234:2	7	return
LEAF_NODE	234:2	234:2	8	return
DESTINATION	234:8	234:8	7	( _TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module ) )
EXPR	234:8	234:72	8	( _TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module ) )
LEAF_NODE	234:8	234:8	9	(
FUNCTION_CALL	234:9	234:71	9	_TIFFMultiply64 ( tif , samplingrow_size , samplingblocks_ver , module )
CALLEE	234:9	234:9	10	_TIFFMultiply64
LEAF_NODE	234:9	234:9	11	_TIFFMultiply64
LEAF_NODE	234:24	234:24	10	(
ARGUMENT	234:25	234:25	10	tif
FIELD	234:25	234:25	11	tif
LEAF_NODE	234:25	234:25	12	tif
LEAF_NODE	234:28	234:28	10	,
ARGUMENT	234:29	234:29	10	samplingrow_size
FIELD	234:29	234:29	11	samplingrow_size
LEAF_NODE	234:29	234:29	12	samplingrow_size
LEAF_NODE	234:45	234:45	10	,
ARGUMENT	234:46	234:46	10	samplingblocks_ver
FIELD	234:46	234:46	11	samplingblocks_ver
LEAF_NODE	234:46	234:46	12	samplingblocks_ver
LEAF_NODE	234:64	234:64	10	,
ARGUMENT	234:65	234:65	10	module
FIELD	234:65	234:65	11	module
LEAF_NODE	234:65	234:65	12	module
LEAF_NODE	234:71	234:71	10	)
LEAF_NODE	234:72	234:72	9	)
LEAF_NODE	234:73	234:73	7	;
LEAF_NODE	235:1	235:1	5	}
SELECTION	236:1	237:2	3	
KEYWORD	236:1	236:1	4	else
LEAF_NODE	236:1	236:1	5	else
STATEMENTS	237:2	237:2	4	
JUMP_STATEMENT	237:2	237:66	5	return ( _TIFFMultiply64 ( tif , nrows , TIFFTileRowSize64 ( tif ) , module ) ) ;
KEYWORD	237:2	237:2	6	return
LEAF_NODE	237:2	237:2	7	return
DESTINATION	237:8	237:8	6	( _TIFFMultiply64 ( tif , nrows , TIFFTileRowSize64 ( tif ) , module ) )
EXPR	237:8	237:65	7	( _TIFFMultiply64 ( tif , nrows , TIFFTileRowSize64 ( tif ) , module ) )
LEAF_NODE	237:8	237:8	8	(
FUNCTION_CALL	237:9	237:64	8	_TIFFMultiply64 ( tif , nrows , TIFFTileRowSize64 ( tif ) , module )
CALLEE	237:9	237:9	9	_TIFFMultiply64
LEAF_NODE	237:9	237:9	10	_TIFFMultiply64
LEAF_NODE	237:24	237:24	9	(
ARGUMENT	237:25	237:25	9	tif
FIELD	237:25	237:25	10	tif
LEAF_NODE	237:25	237:25	11	tif
LEAF_NODE	237:28	237:28	9	,
ARGUMENT	237:29	237:29	9	nrows
FIELD	237:29	237:29	10	nrows
LEAF_NODE	237:29	237:29	11	nrows
LEAF_NODE	237:34	237:34	9	,
ARGUMENT	237:35	237:35	9	TIFFTileRowSize64 ( tif )
FUNCTION_CALL	237:35	237:56	10	TIFFTileRowSize64 ( tif )
CALLEE	237:35	237:35	11	TIFFTileRowSize64
LEAF_NODE	237:35	237:35	12	TIFFTileRowSize64
LEAF_NODE	237:52	237:52	11	(
ARGUMENT	237:53	237:53	11	tif
FIELD	237:53	237:53	12	tif
LEAF_NODE	237:53	237:53	13	tif
LEAF_NODE	237:56	237:56	11	)
LEAF_NODE	237:57	237:57	9	,
ARGUMENT	237:58	237:58	9	module
FIELD	237:58	237:58	10	module
LEAF_NODE	237:58	237:58	11	module
LEAF_NODE	237:64	237:64	9	)
LEAF_NODE	237:65	237:65	8	)
LEAF_NODE	237:66	237:66	6	;
LEAF_NODE	238:0	238:0	2	}
FUNCTION_DEF	239:0	246:0	1	
RETURN_TYPE	239:0	239:0	2	tmsize_t
TYPE_NAME	239:0	239:0	3	tmsize_t
LEAF_NODE	239:0	239:0	4	tmsize_t
FUNCTION_NAME	240:0	240:0	2	TIFFVTileSize
LEAF_NODE	240:0	240:0	3	TIFFVTileSize
PARAMETER_LIST	240:13	240:37	2	( TIFF * tif , uint32 nrows )
LEAF_NODE	240:13	240:13	3	(
PARAMETER_DECL	240:14	240:20	3	TIFF * tif
TYPE	240:14	240:18	4	TIFF *
TYPE_NAME	240:14	240:14	5	TIFF
LEAF_NODE	240:14	240:14	6	TIFF
POINTER	240:18	240:18	5	*
LEAF_NODE	240:18	240:18	6	*
NAME	240:20	240:20	4	tif
LEAF_NODE	240:20	240:20	5	tif
LEAF_NODE	240:23	240:23	3	,
PARAMETER_DECL	240:25	240:32	3	uint32 nrows
TYPE	240:25	240:25	4	uint32
TYPE_NAME	240:25	240:25	5	uint32
LEAF_NODE	240:25	240:25	6	uint32
NAME	240:32	240:32	4	nrows
LEAF_NODE	240:32	240:32	5	nrows
LEAF_NODE	240:37	240:37	3	)
LEAF_NODE	241:0	241:0	2	{
STATEMENTS	242:1	245:1	2	
LEAF_NODE	242:1	242:1	3	static
SIMPLE_DECL	242:8	242:45	3	const char [ ] module ; module = "TIFFVTileSize" ;
VAR_DECL	242:8	242:19	4	const char [ ] module ; module = "TIFFVTileSize"
TYPE	242:8	242:25	5	const char [ ]
TYPE_NAME	242:8	242:14	6	const char
LEAF_NODE	242:8	242:8	7	const
LEAF_NODE	242:14	242:14	7	char
TYPE_SUFFIX	242:25	242:26	6	[ ]
LEAF_NODE	242:25	242:25	7	[
LEAF_NODE	242:26	242:26	7	]
NAME	242:19	242:19	5	module
LEAF_NODE	242:19	242:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	242:19	242:19	5	module = "TIFFVTileSize"
ASSIGN	242:19	242:30	6	module = "TIFFVTileSize"
LVAL	242:19	242:19	7	module
NAME	242:19	242:19	8	module
LEAF_NODE	242:19	242:19	9	module
ASSIGN_OP	242:28	242:28	7	=
LEAF_NODE	242:28	242:28	8	=
RVAL	242:30	242:30	7	"TIFFVTileSize"
FIELD	242:30	242:30	8	"TIFFVTileSize"
LEAF_NODE	242:30	242:30	9	"TIFFVTileSize"
LEAF_NODE	242:45	242:45	4	;
SIMPLE_DECL	243:1	243:9	3	uint64 m ;
VAR_DECL	243:1	243:8	4	uint64 m
TYPE	243:1	243:1	5	uint64
TYPE_NAME	243:1	243:1	6	uint64
LEAF_NODE	243:1	243:1	7	uint64
NAME	243:8	243:8	5	m
LEAF_NODE	243:8	243:8	6	m
LEAF_NODE	243:9	243:9	4	;
EXPR_STATEMENT	244:1	244:29	3	m = TIFFVTileSize64 ( tif , nrows ) ;
EXPR	244:1	244:1	4	m = TIFFVTileSize64 ( tif , nrows )
ASSIGN	244:1	244:3	5	m = TIFFVTileSize64 ( tif , nrows )
LVAL	244:1	244:1	6	m
FIELD	244:1	244:1	7	m
LEAF_NODE	244:1	244:1	8	m
ASSIGN_OP	244:2	244:2	6	=
LEAF_NODE	244:2	244:2	7	=
RVAL	244:3	244:3	6	TIFFVTileSize64 ( tif , nrows )
FUNCTION_CALL	244:3	244:28	7	TIFFVTileSize64 ( tif , nrows )
CALLEE	244:3	244:3	8	TIFFVTileSize64
LEAF_NODE	244:3	244:3	9	TIFFVTileSize64
LEAF_NODE	244:18	244:18	8	(
ARGUMENT	244:19	244:19	8	tif
FIELD	244:19	244:19	9	tif
LEAF_NODE	244:19	244:19	10	tif
LEAF_NODE	244:22	244:22	8	,
ARGUMENT	244:23	244:23	8	nrows
FIELD	244:23	244:23	9	nrows
LEAF_NODE	244:23	244:23	10	nrows
LEAF_NODE	244:28	244:28	8	)
LEAF_NODE	244:29	244:29	4	;
JUMP_STATEMENT	245:1	245:46	3	return _TIFFCastUInt64ToSSize ( tif , m , module ) ;
KEYWORD	245:1	245:1	4	return
LEAF_NODE	245:1	245:1	5	return
DESTINATION	245:8	245:8	4	_TIFFCastUInt64ToSSize ( tif , m , module )
EXPR	245:8	245:8	5	_TIFFCastUInt64ToSSize ( tif , m , module )
FUNCTION_CALL	245:8	245:45	6	_TIFFCastUInt64ToSSize ( tif , m , module )
CALLEE	245:8	245:8	7	_TIFFCastUInt64ToSSize
LEAF_NODE	245:8	245:8	8	_TIFFCastUInt64ToSSize
LEAF_NODE	245:30	245:30	7	(
ARGUMENT	245:31	245:31	7	tif
FIELD	245:31	245:31	8	tif
LEAF_NODE	245:31	245:31	9	tif
LEAF_NODE	245:34	245:34	7	,
ARGUMENT	245:36	245:36	7	m
FIELD	245:36	245:36	8	m
LEAF_NODE	245:36	245:36	9	m
LEAF_NODE	245:37	245:37	7	,
ARGUMENT	245:39	245:39	7	module
FIELD	245:39	245:39	8	module
LEAF_NODE	245:39	245:39	9	module
LEAF_NODE	245:45	245:45	7	)
LEAF_NODE	245:46	245:46	4	;
LEAF_NODE	246:0	246:0	2	}
FUNCTION_DEF	251:0	255:0	1	
RETURN_TYPE	251:0	251:0	2	uint64
TYPE_NAME	251:0	251:0	3	uint64
LEAF_NODE	251:0	251:0	4	uint64
FUNCTION_NAME	252:0	252:0	2	TIFFTileSize64
LEAF_NODE	252:0	252:0	3	TIFFTileSize64
PARAMETER_LIST	252:14	252:24	2	( TIFF * tif )
LEAF_NODE	252:14	252:14	3	(
PARAMETER_DECL	252:15	252:21	3	TIFF * tif
TYPE	252:15	252:19	4	TIFF *
TYPE_NAME	252:15	252:15	5	TIFF
LEAF_NODE	252:15	252:15	6	TIFF
POINTER	252:19	252:19	5	*
LEAF_NODE	252:19	252:19	6	*
NAME	252:21	252:21	4	tif
LEAF_NODE	252:21	252:21	5	tif
LEAF_NODE	252:24	252:24	3	)
LEAF_NODE	253:0	253:0	2	{
STATEMENTS	254:1	254:1	2	
JUMP_STATEMENT	254:1	254:58	3	return ( TIFFVTileSize64 ( tif , tif -> tif_dir . td_tilelength ) ) ;
KEYWORD	254:1	254:1	4	return
LEAF_NODE	254:1	254:1	5	return
DESTINATION	254:8	254:8	4	( TIFFVTileSize64 ( tif , tif -> tif_dir . td_tilelength ) )
EXPR	254:8	254:57	5	( TIFFVTileSize64 ( tif , tif -> tif_dir . td_tilelength ) )
LEAF_NODE	254:8	254:8	6	(
FUNCTION_CALL	254:9	254:56	6	TIFFVTileSize64 ( tif , tif -> tif_dir . td_tilelength )
CALLEE	254:9	254:9	7	TIFFVTileSize64
LEAF_NODE	254:9	254:9	8	TIFFVTileSize64
LEAF_NODE	254:24	254:24	7	(
ARGUMENT	254:25	254:25	7	tif
FIELD	254:25	254:25	8	tif
LEAF_NODE	254:25	254:25	9	tif
LEAF_NODE	254:28	254:28	7	,
ARGUMENT	254:30	254:30	7	tif -> tif_dir . td_tilelength
FIELD	254:30	254:43	8	tif -> tif_dir . td_tilelength
LEAF_NODE	254:30	254:30	9	tif
LEAF_NODE	254:33	254:33	9	->
LEAF_NODE	254:35	254:35	9	tif_dir
LEAF_NODE	254:42	254:42	9	.
LEAF_NODE	254:43	254:43	9	td_tilelength
LEAF_NODE	254:56	254:56	7	)
LEAF_NODE	254:57	254:57	6	)
LEAF_NODE	254:58	254:58	4	;
LEAF_NODE	255:0	255:0	2	}
FUNCTION_DEF	256:0	263:0	1	
RETURN_TYPE	256:0	256:0	2	tmsize_t
TYPE_NAME	256:0	256:0	3	tmsize_t
LEAF_NODE	256:0	256:0	4	tmsize_t
FUNCTION_NAME	257:0	257:0	2	TIFFTileSize
LEAF_NODE	257:0	257:0	3	TIFFTileSize
PARAMETER_LIST	257:12	257:22	2	( TIFF * tif )
LEAF_NODE	257:12	257:12	3	(
PARAMETER_DECL	257:13	257:19	3	TIFF * tif
TYPE	257:13	257:17	4	TIFF *
TYPE_NAME	257:13	257:13	5	TIFF
LEAF_NODE	257:13	257:13	6	TIFF
POINTER	257:17	257:17	5	*
LEAF_NODE	257:17	257:17	6	*
NAME	257:19	257:19	4	tif
LEAF_NODE	257:19	257:19	5	tif
LEAF_NODE	257:22	257:22	3	)
LEAF_NODE	258:0	258:0	2	{
STATEMENTS	259:1	262:1	2	
LEAF_NODE	259:1	259:1	3	static
SIMPLE_DECL	259:8	259:44	3	const char [ ] module ; module = "TIFFTileSize" ;
VAR_DECL	259:8	259:19	4	const char [ ] module ; module = "TIFFTileSize"
TYPE	259:8	259:25	5	const char [ ]
TYPE_NAME	259:8	259:14	6	const char
LEAF_NODE	259:8	259:8	7	const
LEAF_NODE	259:14	259:14	7	char
TYPE_SUFFIX	259:25	259:26	6	[ ]
LEAF_NODE	259:25	259:25	7	[
LEAF_NODE	259:26	259:26	7	]
NAME	259:19	259:19	5	module
LEAF_NODE	259:19	259:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	259:19	259:19	5	module = "TIFFTileSize"
ASSIGN	259:19	259:30	6	module = "TIFFTileSize"
LVAL	259:19	259:19	7	module
NAME	259:19	259:19	8	module
LEAF_NODE	259:19	259:19	9	module
ASSIGN_OP	259:28	259:28	7	=
LEAF_NODE	259:28	259:28	8	=
RVAL	259:30	259:30	7	"TIFFTileSize"
FIELD	259:30	259:30	8	"TIFFTileSize"
LEAF_NODE	259:30	259:30	9	"TIFFTileSize"
LEAF_NODE	259:44	259:44	4	;
SIMPLE_DECL	260:1	260:9	3	uint64 m ;
VAR_DECL	260:1	260:8	4	uint64 m
TYPE	260:1	260:1	5	uint64
TYPE_NAME	260:1	260:1	6	uint64
LEAF_NODE	260:1	260:1	7	uint64
NAME	260:8	260:8	5	m
LEAF_NODE	260:8	260:8	6	m
LEAF_NODE	260:9	260:9	4	;
EXPR_STATEMENT	261:1	261:22	3	m = TIFFTileSize64 ( tif ) ;
EXPR	261:1	261:1	4	m = TIFFTileSize64 ( tif )
ASSIGN	261:1	261:3	5	m = TIFFTileSize64 ( tif )
LVAL	261:1	261:1	6	m
FIELD	261:1	261:1	7	m
LEAF_NODE	261:1	261:1	8	m
ASSIGN_OP	261:2	261:2	6	=
LEAF_NODE	261:2	261:2	7	=
RVAL	261:3	261:3	6	TIFFTileSize64 ( tif )
FUNCTION_CALL	261:3	261:21	7	TIFFTileSize64 ( tif )
CALLEE	261:3	261:3	8	TIFFTileSize64
LEAF_NODE	261:3	261:3	9	TIFFTileSize64
LEAF_NODE	261:17	261:17	8	(
ARGUMENT	261:18	261:18	8	tif
FIELD	261:18	261:18	9	tif
LEAF_NODE	261:18	261:18	10	tif
LEAF_NODE	261:21	261:21	8	)
LEAF_NODE	261:22	261:22	4	;
JUMP_STATEMENT	262:1	262:46	3	return _TIFFCastUInt64ToSSize ( tif , m , module ) ;
KEYWORD	262:1	262:1	4	return
LEAF_NODE	262:1	262:1	5	return
DESTINATION	262:8	262:8	4	_TIFFCastUInt64ToSSize ( tif , m , module )
EXPR	262:8	262:8	5	_TIFFCastUInt64ToSSize ( tif , m , module )
FUNCTION_CALL	262:8	262:45	6	_TIFFCastUInt64ToSSize ( tif , m , module )
CALLEE	262:8	262:8	7	_TIFFCastUInt64ToSSize
LEAF_NODE	262:8	262:8	8	_TIFFCastUInt64ToSSize
LEAF_NODE	262:30	262:30	7	(
ARGUMENT	262:31	262:31	7	tif
FIELD	262:31	262:31	8	tif
LEAF_NODE	262:31	262:31	9	tif
LEAF_NODE	262:34	262:34	7	,
ARGUMENT	262:36	262:36	7	m
FIELD	262:36	262:36	8	m
LEAF_NODE	262:36	262:36	9	m
LEAF_NODE	262:37	262:37	7	,
ARGUMENT	262:39	262:39	7	module
FIELD	262:39	262:39	8	module
LEAF_NODE	262:39	262:39	9	module
LEAF_NODE	262:45	262:45	7	)
LEAF_NODE	262:46	262:46	4	;
LEAF_NODE	263:0	263:0	2	}
FUNCTION_DEF	271:0	275:0	1	
RETURN_TYPE	271:0	271:0	2	void
TYPE_NAME	271:0	271:0	3	void
LEAF_NODE	271:0	271:0	4	void
FUNCTION_NAME	272:0	272:0	2	TIFFDefaultTileSize
LEAF_NODE	272:0	272:0	3	TIFFDefaultTileSize
PARAMETER_LIST	272:19	272:53	2	( TIFF * tif , uint32 * tw , uint32 * th )
LEAF_NODE	272:19	272:19	3	(
PARAMETER_DECL	272:20	272:26	3	TIFF * tif
TYPE	272:20	272:24	4	TIFF *
TYPE_NAME	272:20	272:20	5	TIFF
LEAF_NODE	272:20	272:20	6	TIFF
POINTER	272:24	272:24	5	*
LEAF_NODE	272:24	272:24	6	*
NAME	272:26	272:26	4	tif
LEAF_NODE	272:26	272:26	5	tif
LEAF_NODE	272:29	272:29	3	,
PARAMETER_DECL	272:31	272:39	3	uint32 * tw
TYPE	272:31	272:37	4	uint32 *
TYPE_NAME	272:31	272:31	5	uint32
LEAF_NODE	272:31	272:31	6	uint32
POINTER	272:37	272:37	5	*
LEAF_NODE	272:37	272:37	6	*
NAME	272:39	272:39	4	tw
LEAF_NODE	272:39	272:39	5	tw
LEAF_NODE	272:41	272:41	3	,
PARAMETER_DECL	272:43	272:51	3	uint32 * th
TYPE	272:43	272:49	4	uint32 *
TYPE_NAME	272:43	272:43	5	uint32
LEAF_NODE	272:43	272:43	6	uint32
POINTER	272:49	272:49	5	*
LEAF_NODE	272:49	272:49	6	*
NAME	272:51	272:51	4	th
LEAF_NODE	272:51	272:51	5	th
LEAF_NODE	272:53	272:53	3	)
LEAF_NODE	273:0	273:0	2	{
STATEMENTS	274:1	274:1	2	
EXPR_STATEMENT	274:1	274:37	3	( * tif -> tif_deftilesize ) ( tif , tw , th ) ;
EXPR	274:1	274:1	4	( * tif -> tif_deftilesize ) ( tif , tw , th )
FUNCTION_CALL	274:1	274:36	5	( * tif -> tif_deftilesize ) ( tif , tw , th )
CALLEE	274:1	274:23	6	( * tif -> tif_deftilesize )
LEAF_NODE	274:1	274:1	7	(
UNARY_EXPR	274:2	274:3	7	* tif -> tif_deftilesize
UNARY_OPERATOR	274:2	274:2	8	*
LEAF_NODE	274:2	274:2	9	*
FIELD	274:3	274:8	8	tif -> tif_deftilesize
LEAF_NODE	274:3	274:3	9	tif
LEAF_NODE	274:6	274:6	9	->
LEAF_NODE	274:8	274:8	9	tif_deftilesize
LEAF_NODE	274:23	274:23	7	)
LEAF_NODE	274:24	274:24	6	(
ARGUMENT	274:25	274:25	6	tif
FIELD	274:25	274:25	7	tif
LEAF_NODE	274:25	274:25	8	tif
LEAF_NODE	274:28	274:28	6	,
ARGUMENT	274:30	274:30	6	tw
FIELD	274:30	274:30	7	tw
LEAF_NODE	274:30	274:30	8	tw
LEAF_NODE	274:32	274:32	6	,
ARGUMENT	274:34	274:34	6	th
FIELD	274:34	274:34	7	th
LEAF_NODE	274:34	274:34	8	th
LEAF_NODE	274:36	274:36	6	)
LEAF_NODE	274:37	274:37	4	;
LEAF_NODE	275:0	275:0	2	}
FUNCTION_DEF	277:0	290:0	1	
RETURN_TYPE	277:0	277:0	2	void
TYPE_NAME	277:0	277:0	3	void
LEAF_NODE	277:0	277:0	4	void
FUNCTION_NAME	278:0	278:0	2	_TIFFDefaultTileSize
LEAF_NODE	278:0	278:0	3	_TIFFDefaultTileSize
PARAMETER_LIST	278:20	278:54	2	( TIFF * tif , uint32 * tw , uint32 * th )
LEAF_NODE	278:20	278:20	3	(
PARAMETER_DECL	278:21	278:27	3	TIFF * tif
TYPE	278:21	278:25	4	TIFF *
TYPE_NAME	278:21	278:21	5	TIFF
LEAF_NODE	278:21	278:21	6	TIFF
POINTER	278:25	278:25	5	*
LEAF_NODE	278:25	278:25	6	*
NAME	278:27	278:27	4	tif
LEAF_NODE	278:27	278:27	5	tif
LEAF_NODE	278:30	278:30	3	,
PARAMETER_DECL	278:32	278:40	3	uint32 * tw
TYPE	278:32	278:38	4	uint32 *
TYPE_NAME	278:32	278:32	5	uint32
LEAF_NODE	278:32	278:32	6	uint32
POINTER	278:38	278:38	5	*
LEAF_NODE	278:38	278:38	6	*
NAME	278:40	278:40	4	tw
LEAF_NODE	278:40	278:40	5	tw
LEAF_NODE	278:42	278:42	3	,
PARAMETER_DECL	278:44	278:52	3	uint32 * th
TYPE	278:44	278:50	4	uint32 *
TYPE_NAME	278:44	278:44	5	uint32
LEAF_NODE	278:44	278:44	6	uint32
POINTER	278:50	278:50	5	*
LEAF_NODE	278:50	278:50	6	*
NAME	278:52	278:52	4	th
LEAF_NODE	278:52	278:52	5	th
LEAF_NODE	278:54	278:54	3	)
LEAF_NODE	279:0	279:0	2	{
STATEMENTS	280:1	288:1	2	
EXPR_STATEMENT	280:1	280:11	3	( void ) tif ;
EXPR	280:1	280:8	4	( void ) tif
LEAF_NODE	280:1	280:1	5	(
TYPE_NAME	280:2	280:2	5	void
LEAF_NODE	280:2	280:2	6	void
LEAF_NODE	280:6	280:6	5	)
FIELD	280:8	280:8	5	tif
LEAF_NODE	280:8	280:8	6	tif
LEAF_NODE	280:11	280:11	4	;
LEAF_NODE	281:1	281:1	3	if
LEAF_NODE	281:4	281:4	3	(
LEAF_NODE	281:5	281:5	3	*
LEAF_NODE	281:6	281:6	3	(
LEAF_NODE	281:7	281:7	3	int32
LEAF_NODE	281:12	281:12	3	*
LEAF_NODE	281:13	281:13	3	)
LEAF_NODE	281:15	281:15	3	tw
LEAF_NODE	281:18	281:18	3	<
LEAF_NODE	281:20	281:20	3	1
LEAF_NODE	281:21	281:21	3	)
EXPR_STATEMENT	282:2	282:11	3	* tw = 256 ;
EXPR	282:2	282:2	4	* tw = 256
ASSIGN	282:2	282:8	5	* tw = 256
LVAL	282:2	282:2	6	* tw
UNARY_EXPR	282:2	282:3	7	* tw
UNARY_OPERATOR	282:2	282:2	8	*
LEAF_NODE	282:2	282:2	9	*
FIELD	282:3	282:3	8	tw
LEAF_NODE	282:3	282:3	9	tw
ASSIGN_OP	282:6	282:6	6	=
LEAF_NODE	282:6	282:6	7	=
RVAL	282:8	282:8	6	256
FIELD	282:8	282:8	7	256
LEAF_NODE	282:8	282:8	8	256
LEAF_NODE	282:11	282:11	4	;
LEAF_NODE	283:1	283:1	3	if
LEAF_NODE	283:4	283:4	3	(
LEAF_NODE	283:5	283:5	3	*
LEAF_NODE	283:6	283:6	3	(
LEAF_NODE	283:7	283:7	3	int32
LEAF_NODE	283:12	283:12	3	*
LEAF_NODE	283:13	283:13	3	)
LEAF_NODE	283:15	283:15	3	th
LEAF_NODE	283:18	283:18	3	<
LEAF_NODE	283:20	283:20	3	1
LEAF_NODE	283:21	283:21	3	)
EXPR_STATEMENT	284:2	284:11	3	* th = 256 ;
EXPR	284:2	284:2	4	* th = 256
ASSIGN	284:2	284:8	5	* th = 256
LVAL	284:2	284:2	6	* th
UNARY_EXPR	284:2	284:3	7	* th
UNARY_OPERATOR	284:2	284:2	8	*
LEAF_NODE	284:2	284:2	9	*
FIELD	284:3	284:3	8	th
LEAF_NODE	284:3	284:3	9	th
ASSIGN_OP	284:6	284:6	6	=
LEAF_NODE	284:6	284:6	7	=
RVAL	284:8	284:8	6	256
FIELD	284:8	284:8	7	256
LEAF_NODE	284:8	284:8	8	256
LEAF_NODE	284:11	284:11	4	;
SELECTION	286:1	287:2	3	
KEYWORD	286:1	286:1	4	if
LEAF_NODE	286:1	286:1	5	if
LEAF_NODE	286:4	286:4	4	(
CONDITION	286:5	286:5	4	* tw & 0xf
EXPR	286:5	286:11	5	* tw & 0xf
UNARY_EXPR	286:5	286:6	6	* tw
UNARY_OPERATOR	286:5	286:5	7	*
LEAF_NODE	286:5	286:5	8	*
FIELD	286:6	286:6	7	tw
LEAF_NODE	286:6	286:6	8	tw
LEAF_NODE	286:9	286:9	6	&
FIELD	286:11	286:11	6	0xf
LEAF_NODE	286:11	286:11	7	0xf
LEAF_NODE	286:14	286:14	4	)
STATEMENTS	287:2	287:2	4	
EXPR_STATEMENT	287:2	287:31	5	* tw = TIFFroundup_32 ( * tw , 16 ) ;
EXPR	287:2	287:2	6	* tw = TIFFroundup_32 ( * tw , 16 )
ASSIGN	287:2	287:8	7	* tw = TIFFroundup_32 ( * tw , 16 )
LVAL	287:2	287:2	8	* tw
UNARY_EXPR	287:2	287:3	9	* tw
UNARY_OPERATOR	287:2	287:2	10	*
LEAF_NODE	287:2	287:2	11	*
FIELD	287:3	287:3	10	tw
LEAF_NODE	287:3	287:3	11	tw
ASSIGN_OP	287:6	287:6	8	=
LEAF_NODE	287:6	287:6	9	=
RVAL	287:8	287:8	8	TIFFroundup_32 ( * tw , 16 )
FUNCTION_CALL	287:8	287:30	9	TIFFroundup_32 ( * tw , 16 )
CALLEE	287:8	287:8	10	TIFFroundup_32
LEAF_NODE	287:8	287:8	11	TIFFroundup_32
LEAF_NODE	287:22	287:22	10	(
ARGUMENT	287:23	287:23	10	* tw
UNARY_EXPR	287:23	287:24	11	* tw
UNARY_OPERATOR	287:23	287:23	12	*
LEAF_NODE	287:23	287:23	13	*
FIELD	287:24	287:24	12	tw
LEAF_NODE	287:24	287:24	13	tw
LEAF_NODE	287:26	287:26	10	,
ARGUMENT	287:28	287:28	10	16
FIELD	287:28	287:28	11	16
LEAF_NODE	287:28	287:28	12	16
LEAF_NODE	287:30	287:30	10	)
LEAF_NODE	287:31	287:31	6	;
SELECTION	288:1	289:2	3	
KEYWORD	288:1	288:1	4	if
LEAF_NODE	288:1	288:1	5	if
LEAF_NODE	288:4	288:4	4	(
CONDITION	288:5	288:5	4	* th & 0xf
EXPR	288:5	288:11	5	* th & 0xf
UNARY_EXPR	288:5	288:6	6	* th
UNARY_OPERATOR	288:5	288:5	7	*
LEAF_NODE	288:5	288:5	8	*
FIELD	288:6	288:6	7	th
LEAF_NODE	288:6	288:6	8	th
LEAF_NODE	288:9	288:9	6	&
FIELD	288:11	288:11	6	0xf
LEAF_NODE	288:11	288:11	7	0xf
LEAF_NODE	288:14	288:14	4	)
STATEMENTS	289:2	289:2	4	
EXPR_STATEMENT	289:2	289:31	5	* th = TIFFroundup_32 ( * th , 16 ) ;
EXPR	289:2	289:2	6	* th = TIFFroundup_32 ( * th , 16 )
ASSIGN	289:2	289:8	7	* th = TIFFroundup_32 ( * th , 16 )
LVAL	289:2	289:2	8	* th
UNARY_EXPR	289:2	289:3	9	* th
UNARY_OPERATOR	289:2	289:2	10	*
LEAF_NODE	289:2	289:2	11	*
FIELD	289:3	289:3	10	th
LEAF_NODE	289:3	289:3	11	th
ASSIGN_OP	289:6	289:6	8	=
LEAF_NODE	289:6	289:6	9	=
RVAL	289:8	289:8	8	TIFFroundup_32 ( * th , 16 )
FUNCTION_CALL	289:8	289:30	9	TIFFroundup_32 ( * th , 16 )
CALLEE	289:8	289:8	10	TIFFroundup_32
LEAF_NODE	289:8	289:8	11	TIFFroundup_32
LEAF_NODE	289:22	289:22	10	(
ARGUMENT	289:23	289:23	10	* th
UNARY_EXPR	289:23	289:24	11	* th
UNARY_OPERATOR	289:23	289:23	12	*
LEAF_NODE	289:23	289:23	13	*
FIELD	289:24	289:24	12	th
LEAF_NODE	289:24	289:24	13	th
LEAF_NODE	289:26	289:26	10	,
ARGUMENT	289:28	289:28	10	16
FIELD	289:28	289:28	11	16
LEAF_NODE	289:28	289:28	12	16
LEAF_NODE	289:30	289:30	10	)
LEAF_NODE	289:31	289:31	6	;
LEAF_NODE	290:0	290:0	2	}
