SOURCE_FILE	38:0	200:0	0	
FUNCTION_DEF	38:0	47:0	1	
RETURN_TYPE	38:0	38:7	2	static int
LEAF_NODE	38:0	38:0	3	static
TYPE_NAME	38:7	38:7	3	int
LEAF_NODE	38:7	38:7	4	int
FUNCTION_NAME	38:11	38:11	2	JBIGSetupDecode
LEAF_NODE	38:11	38:11	3	JBIGSetupDecode
PARAMETER_LIST	38:26	38:36	2	( TIFF * tif )
LEAF_NODE	38:26	38:26	3	(
PARAMETER_DECL	38:27	38:33	3	TIFF * tif
TYPE	38:27	38:31	4	TIFF *
TYPE_NAME	38:27	38:27	5	TIFF
LEAF_NODE	38:27	38:27	6	TIFF
POINTER	38:31	38:31	5	*
LEAF_NODE	38:31	38:31	6	*
NAME	38:33	38:33	4	tif
LEAF_NODE	38:33	38:33	5	tif
LEAF_NODE	38:36	38:36	3	)
LEAF_NODE	39:0	39:0	2	{
STATEMENTS	40:1	46:1	2	
SELECTION	40:1	41:1	3	
KEYWORD	40:1	40:1	4	if
LEAF_NODE	40:1	40:1	5	if
LEAF_NODE	40:4	40:4	4	(
CONDITION	40:5	40:5	4	TIFFNumberOfStrips ( tif ) != 1
EXPR	40:5	40:32	5	TIFFNumberOfStrips ( tif ) != 1
FUNCTION_CALL	40:5	40:27	6	TIFFNumberOfStrips ( tif )
CALLEE	40:5	40:5	7	TIFFNumberOfStrips
LEAF_NODE	40:5	40:5	8	TIFFNumberOfStrips
LEAF_NODE	40:23	40:23	7	(
ARGUMENT	40:24	40:24	7	tif
FIELD	40:24	40:24	8	tif
LEAF_NODE	40:24	40:24	9	tif
LEAF_NODE	40:27	40:27	7	)
EQ_OPERATOR	40:29	40:29	6	!=
LEAF_NODE	40:29	40:29	7	!=
FIELD	40:32	40:32	6	1
LEAF_NODE	40:32	40:32	7	1
LEAF_NODE	40:33	40:33	4	)
STATEMENTS	41:1	44:1	4	
LEAF_NODE	41:1	41:1	5	{
STATEMENTS	42:2	43:2	5	
EXPR_STATEMENT	42:2	42:89	6	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Multistrip images not supported in decoder" ) ;
EXPR	42:2	42:2	7	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Multistrip images not supported in decoder" )
FUNCTION_CALL	42:2	42:88	8	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Multistrip images not supported in decoder" )
CALLEE	42:2	42:2	9	TIFFErrorExt
LEAF_NODE	42:2	42:2	10	TIFFErrorExt
LEAF_NODE	42:14	42:14	9	(
ARGUMENT	42:15	42:15	9	tif -> tif_clientdata
FIELD	42:15	42:20	10	tif -> tif_clientdata
LEAF_NODE	42:15	42:15	11	tif
LEAF_NODE	42:18	42:18	11	->
LEAF_NODE	42:20	42:20	11	tif_clientdata
LEAF_NODE	42:34	42:34	9	,
ARGUMENT	42:36	42:36	9	"JBIG"
FIELD	42:36	42:36	10	"JBIG"
LEAF_NODE	42:36	42:36	11	"JBIG"
LEAF_NODE	42:42	42:42	9	,
ARGUMENT	42:44	42:44	9	"Multistrip images not supported in decoder"
FIELD	42:44	42:44	10	"Multistrip images not supported in decoder"
LEAF_NODE	42:44	42:44	11	"Multistrip images not supported in decoder"
LEAF_NODE	42:88	42:88	9	)
LEAF_NODE	42:89	42:89	7	;
JUMP_STATEMENT	43:2	43:10	6	return 0 ;
KEYWORD	43:2	43:2	7	return
LEAF_NODE	43:2	43:2	8	return
DESTINATION	43:9	43:9	7	0
EXPR	43:9	43:9	8	0
FIELD	43:9	43:9	9	0
LEAF_NODE	43:9	43:9	10	0
LEAF_NODE	43:10	43:10	7	;
LEAF_NODE	44:1	44:1	5	}
JUMP_STATEMENT	46:1	46:9	3	return 1 ;
KEYWORD	46:1	46:1	4	return
LEAF_NODE	46:1	46:1	5	return
DESTINATION	46:8	46:8	4	1
EXPR	46:8	46:8	5	1
FIELD	46:8	46:8	6	1
LEAF_NODE	46:8	46:8	7	1
LEAF_NODE	46:9	46:9	4	;
LEAF_NODE	47:0	47:0	2	}
FUNCTION_DEF	49:0	123:0	1	
RETURN_TYPE	49:0	49:7	2	static int
LEAF_NODE	49:0	49:0	3	static
TYPE_NAME	49:7	49:7	3	int
LEAF_NODE	49:7	49:7	4	int
FUNCTION_NAME	49:11	49:11	2	JBIGDecode
LEAF_NODE	49:11	49:11	3	JBIGDecode
PARAMETER_LIST	49:21	49:71	2	( TIFF * tif , uint8 * buffer , tmsize_t size , uint16 s )
LEAF_NODE	49:21	49:21	3	(
PARAMETER_DECL	49:22	49:28	3	TIFF * tif
TYPE	49:22	49:26	4	TIFF *
TYPE_NAME	49:22	49:22	5	TIFF
LEAF_NODE	49:22	49:22	6	TIFF
POINTER	49:26	49:26	5	*
LEAF_NODE	49:26	49:26	6	*
NAME	49:28	49:28	4	tif
LEAF_NODE	49:28	49:28	5	tif
LEAF_NODE	49:31	49:31	3	,
PARAMETER_DECL	49:33	49:40	3	uint8 * buffer
TYPE	49:33	49:38	4	uint8 *
TYPE_NAME	49:33	49:33	5	uint8
LEAF_NODE	49:33	49:33	6	uint8
POINTER	49:38	49:38	5	*
LEAF_NODE	49:38	49:38	6	*
NAME	49:40	49:40	4	buffer
LEAF_NODE	49:40	49:40	5	buffer
LEAF_NODE	49:46	49:46	3	,
PARAMETER_DECL	49:48	49:57	3	tmsize_t size
TYPE	49:48	49:48	4	tmsize_t
TYPE_NAME	49:48	49:48	5	tmsize_t
LEAF_NODE	49:48	49:48	6	tmsize_t
NAME	49:57	49:57	4	size
LEAF_NODE	49:57	49:57	5	size
LEAF_NODE	49:61	49:61	3	,
PARAMETER_DECL	49:63	49:70	3	uint16 s
TYPE	49:63	49:63	4	uint16
TYPE_NAME	49:63	49:63	5	uint16
LEAF_NODE	49:63	49:63	6	uint16
NAME	49:70	49:70	4	s
LEAF_NODE	49:70	49:70	5	s
LEAF_NODE	49:71	49:71	3	)
LEAF_NODE	50:0	50:0	2	{
STATEMENTS	51:1	122:1	2	
SIMPLE_DECL	51:1	51:29	3	struct jbg_dec_state decoder ;
VAR_DECL	51:1	51:22	4	struct jbg_dec_state decoder
TYPE	51:1	51:1	5	struct jbg_dec_state
TYPE_NAME	51:1	51:8	6	struct jbg_dec_state
LEAF_NODE	51:1	51:1	7	struct
LEAF_NODE	51:8	51:8	7	jbg_dec_state
NAME	51:22	51:22	5	decoder
LEAF_NODE	51:22	51:22	6	decoder
LEAF_NODE	51:29	51:29	4	;
SIMPLE_DECL	52:1	52:21	3	int decodeStatus ; decodeStatus = 0 ;
VAR_DECL	52:1	52:5	4	int decodeStatus ; decodeStatus = 0
TYPE	52:1	52:1	5	int
TYPE_NAME	52:1	52:1	6	int
LEAF_NODE	52:1	52:1	7	int
NAME	52:5	52:5	5	decodeStatus
LEAF_NODE	52:5	52:5	6	decodeStatus
LEAF_NODE	0:0	0:0	5	;
INIT	52:5	52:5	5	decodeStatus = 0
ASSIGN	52:5	52:20	6	decodeStatus = 0
LVAL	52:5	52:5	7	decodeStatus
NAME	52:5	52:5	8	decodeStatus
LEAF_NODE	52:5	52:5	9	decodeStatus
ASSIGN_OP	52:18	52:18	7	=
LEAF_NODE	52:18	52:18	8	=
RVAL	52:20	52:20	7	0
FIELD	52:20	52:20	8	0
LEAF_NODE	52:20	52:20	9	0
LEAF_NODE	52:21	52:21	4	;
SIMPLE_DECL	53:1	53:29	3	unsigned char * pImage ; pImage = NULL ;
VAR_DECL	53:1	53:16	4	unsigned char * pImage ; pImage = NULL
TYPE	53:1	53:14	5	unsigned char *
TYPE_NAME	53:1	53:10	6	unsigned char
LEAF_NODE	53:1	53:1	7	unsigned
LEAF_NODE	53:10	53:10	7	char
POINTER	53:14	53:14	6	*
LEAF_NODE	53:14	53:14	7	*
NAME	53:16	53:16	5	pImage
LEAF_NODE	53:16	53:16	6	pImage
LEAF_NODE	0:0	0:0	5	;
INIT	53:16	53:16	5	pImage = NULL
ASSIGN	53:16	53:25	6	pImage = NULL
LVAL	53:16	53:16	7	pImage
NAME	53:16	53:16	8	pImage
LEAF_NODE	53:16	53:16	9	pImage
ASSIGN_OP	53:23	53:23	7	=
LEAF_NODE	53:23	53:23	8	=
RVAL	53:25	53:25	7	NULL
FIELD	53:25	53:25	8	NULL
LEAF_NODE	53:25	53:25	9	NULL
LEAF_NODE	53:29	53:29	4	;
SIMPLE_DECL	54:1	54:26	3	unsigned long decodedSize ;
VAR_DECL	54:1	54:15	4	unsigned long decodedSize
TYPE	54:1	54:1	5	unsigned long
TYPE_NAME	54:1	54:10	6	unsigned long
LEAF_NODE	54:1	54:1	7	unsigned
LEAF_NODE	54:10	54:10	7	long
NAME	54:15	54:15	5	decodedSize
LEAF_NODE	54:15	54:15	6	decodedSize
LEAF_NODE	54:26	54:26	4	;
EXPR_STATEMENT	55:1	55:9	3	( void ) s ;
EXPR	55:1	55:8	4	( void ) s
LEAF_NODE	55:1	55:1	5	(
TYPE_NAME	55:2	55:2	5	void
LEAF_NODE	55:2	55:2	6	void
LEAF_NODE	55:6	55:6	5	)
FIELD	55:8	55:8	5	s
LEAF_NODE	55:8	55:8	6	s
LEAF_NODE	55:9	55:9	4	;
SELECTION	57:1	58:1	3	
KEYWORD	57:1	57:1	4	if
LEAF_NODE	57:1	57:1	5	if
LEAF_NODE	57:4	57:4	4	(
CONDITION	57:5	57:5	4	isFillOrder ( tif , tif -> tif_dir . td_fillorder )
EXPR	57:5	57:5	5	isFillOrder ( tif , tif -> tif_dir . td_fillorder )
FUNCTION_CALL	57:5	57:47	6	isFillOrder ( tif , tif -> tif_dir . td_fillorder )
CALLEE	57:5	57:5	7	isFillOrder
LEAF_NODE	57:5	57:5	8	isFillOrder
LEAF_NODE	57:16	57:16	7	(
ARGUMENT	57:17	57:17	7	tif
FIELD	57:17	57:17	8	tif
LEAF_NODE	57:17	57:17	9	tif
LEAF_NODE	57:20	57:20	7	,
ARGUMENT	57:22	57:22	7	tif -> tif_dir . td_fillorder
FIELD	57:22	57:35	8	tif -> tif_dir . td_fillorder
LEAF_NODE	57:22	57:22	9	tif
LEAF_NODE	57:25	57:25	9	->
LEAF_NODE	57:27	57:27	9	tif_dir
LEAF_NODE	57:34	57:34	9	.
LEAF_NODE	57:35	57:35	9	td_fillorder
LEAF_NODE	57:47	57:47	7	)
LEAF_NODE	57:48	57:48	4	)
STATEMENTS	58:1	60:1	4	
LEAF_NODE	58:1	58:1	5	{
STATEMENTS	59:2	59:2	5	
EXPR_STATEMENT	59:2	59:49	6	TIFFReverseBits ( tif -> tif_rawcp , tif -> tif_rawcc ) ;
EXPR	59:2	59:2	7	TIFFReverseBits ( tif -> tif_rawcp , tif -> tif_rawcc )
FUNCTION_CALL	59:2	59:48	8	TIFFReverseBits ( tif -> tif_rawcp , tif -> tif_rawcc )
CALLEE	59:2	59:2	9	TIFFReverseBits
LEAF_NODE	59:2	59:2	10	TIFFReverseBits
LEAF_NODE	59:17	59:17	9	(
ARGUMENT	59:18	59:18	9	tif -> tif_rawcp
FIELD	59:18	59:23	10	tif -> tif_rawcp
LEAF_NODE	59:18	59:18	11	tif
LEAF_NODE	59:21	59:21	11	->
LEAF_NODE	59:23	59:23	11	tif_rawcp
LEAF_NODE	59:32	59:32	9	,
ARGUMENT	59:34	59:34	9	tif -> tif_rawcc
FIELD	59:34	59:39	10	tif -> tif_rawcc
LEAF_NODE	59:34	59:34	11	tif
LEAF_NODE	59:37	59:37	11	->
LEAF_NODE	59:39	59:39	11	tif_rawcc
LEAF_NODE	59:48	59:48	9	)
LEAF_NODE	59:49	59:49	7	;
LEAF_NODE	60:1	60:1	5	}
EXPR_STATEMENT	62:1	62:23	3	jbg_dec_init ( & decoder ) ;
EXPR	62:1	62:1	4	jbg_dec_init ( & decoder )
FUNCTION_CALL	62:1	62:22	5	jbg_dec_init ( & decoder )
CALLEE	62:1	62:1	6	jbg_dec_init
LEAF_NODE	62:1	62:1	7	jbg_dec_init
LEAF_NODE	62:13	62:13	6	(
ARGUMENT	62:14	62:14	6	& decoder
UNARY_EXPR	62:14	62:15	7	& decoder
UNARY_OPERATOR	62:14	62:14	8	&
LEAF_NODE	62:14	62:14	9	&
FIELD	62:15	62:15	8	decoder
LEAF_NODE	62:15	62:15	9	decoder
LEAF_NODE	62:22	62:22	6	)
LEAF_NODE	62:23	62:23	4	;
EXPR_STATEMENT	65:1	65:51	3	jbg_newlen ( tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc ) ;
EXPR	65:1	65:1	4	jbg_newlen ( tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc )
FUNCTION_CALL	65:1	65:50	5	jbg_newlen ( tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc )
CALLEE	65:1	65:1	6	jbg_newlen
LEAF_NODE	65:1	65:1	7	jbg_newlen
LEAF_NODE	65:11	65:11	6	(
ARGUMENT	65:12	65:12	6	tif -> tif_rawcp
FIELD	65:12	65:17	7	tif -> tif_rawcp
LEAF_NODE	65:12	65:12	8	tif
LEAF_NODE	65:15	65:15	8	->
LEAF_NODE	65:17	65:17	8	tif_rawcp
LEAF_NODE	65:26	65:26	6	,
ARGUMENT	65:28	65:36	6	( size_t ) tif -> tif_rawcc
LEAF_NODE	65:28	65:28	7	(
TYPE_NAME	65:29	65:29	7	size_t
LEAF_NODE	65:29	65:29	8	size_t
LEAF_NODE	65:35	65:35	7	)
FIELD	65:36	65:41	7	tif -> tif_rawcc
LEAF_NODE	65:36	65:36	8	tif
LEAF_NODE	65:39	65:39	8	->
LEAF_NODE	65:41	65:41	8	tif_rawcc
LEAF_NODE	65:50	65:50	6	)
LEAF_NODE	65:51	65:51	4	;
EXPR_STATEMENT	78:1	79:35	3	decodeStatus = jbg_dec_in ( & decoder , ( unsigned char * ) tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc , NULL ) ;
EXPR	78:1	78:1	4	decodeStatus = jbg_dec_in ( & decoder , ( unsigned char * ) tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc , NULL )
ASSIGN	78:1	78:16	5	decodeStatus = jbg_dec_in ( & decoder , ( unsigned char * ) tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc , NULL )
LVAL	78:1	78:1	6	decodeStatus
FIELD	78:1	78:1	7	decodeStatus
LEAF_NODE	78:1	78:1	8	decodeStatus
ASSIGN_OP	78:14	78:14	6	=
LEAF_NODE	78:14	78:14	7	=
RVAL	78:16	78:16	6	jbg_dec_in ( & decoder , ( unsigned char * ) tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc , NULL )
FUNCTION_CALL	78:16	79:34	7	jbg_dec_in ( & decoder , ( unsigned char * ) tif -> tif_rawcp , ( size_t ) tif -> tif_rawcc , NULL )
CALLEE	78:16	78:16	8	jbg_dec_in
LEAF_NODE	78:16	78:16	9	jbg_dec_in
LEAF_NODE	78:26	78:26	8	(
ARGUMENT	78:27	78:27	8	& decoder
UNARY_EXPR	78:27	78:28	9	& decoder
UNARY_OPERATOR	78:27	78:27	10	&
LEAF_NODE	78:27	78:27	11	&
FIELD	78:28	78:28	10	decoder
LEAF_NODE	78:28	78:28	11	decoder
LEAF_NODE	78:35	78:35	8	,
ARGUMENT	78:37	78:53	8	( unsigned char * ) tif -> tif_rawcp
LEAF_NODE	78:37	78:37	9	(
TYPE_NAME	78:38	78:47	9	unsigned char
LEAF_NODE	78:38	78:38	10	unsigned
LEAF_NODE	78:47	78:47	10	char
LEAF_NODE	78:51	78:51	9	*
LEAF_NODE	78:52	78:52	9	)
FIELD	78:53	78:58	9	tif -> tif_rawcp
LEAF_NODE	78:53	78:53	10	tif
LEAF_NODE	78:56	78:56	10	->
LEAF_NODE	78:58	78:58	10	tif_rawcp
LEAF_NODE	78:67	78:67	8	,
ARGUMENT	79:6	79:14	8	( size_t ) tif -> tif_rawcc
LEAF_NODE	79:6	79:6	9	(
TYPE_NAME	79:7	79:7	9	size_t
LEAF_NODE	79:7	79:7	10	size_t
LEAF_NODE	79:13	79:13	9	)
FIELD	79:14	79:19	9	tif -> tif_rawcc
LEAF_NODE	79:14	79:14	10	tif
LEAF_NODE	79:17	79:17	10	->
LEAF_NODE	79:19	79:19	10	tif_rawcc
LEAF_NODE	79:28	79:28	8	,
ARGUMENT	79:30	79:30	8	NULL
FIELD	79:30	79:30	9	NULL
LEAF_NODE	79:30	79:30	10	NULL
LEAF_NODE	79:34	79:34	8	)
LEAF_NODE	79:35	79:35	4	;
SELECTION	80:1	81:1	3	
KEYWORD	80:1	80:1	4	if
LEAF_NODE	80:1	80:1	5	if
LEAF_NODE	80:4	80:4	4	(
CONDITION	80:5	80:5	4	JBG_EOK != decodeStatus
EXPR	80:5	80:16	5	JBG_EOK != decodeStatus
FIELD	80:5	80:5	6	JBG_EOK
LEAF_NODE	80:5	80:5	7	JBG_EOK
EQ_OPERATOR	80:13	80:13	6	!=
LEAF_NODE	80:13	80:13	7	!=
FIELD	80:16	80:16	6	decodeStatus
LEAF_NODE	80:16	80:16	7	decodeStatus
LEAF_NODE	80:28	80:28	4	)
STATEMENTS	81:1	98:1	4	
LEAF_NODE	81:1	81:1	5	{
STATEMENTS	87:2	97:2	5	
LEAF_NODE	87:2	87:2	6	TIFFErrorExt
LEAF_NODE	87:14	87:14	6	(
LEAF_NODE	87:15	87:15	6	tif
LEAF_NODE	87:18	87:18	6	->
LEAF_NODE	87:20	87:20	6	tif_clientdata
LEAF_NODE	87:34	87:34	6	,
LEAF_NODE	88:8	88:8	6	"JBIG"
LEAF_NODE	88:14	88:14	6	,
LEAF_NODE	88:16	88:16	6	"Error (%d) decoding: %s"
LEAF_NODE	88:41	88:41	6	,
LEAF_NODE	89:8	89:8	6	decodeStatus
LEAF_NODE	89:20	89:20	6	,
LEAF_NODE	91:8	91:8	6	jbg_strerror
LEAF_NODE	91:20	91:20	6	(
LEAF_NODE	91:21	91:21	6	decodeStatus
LEAF_NODE	91:33	91:33	6	,
LEAF_NODE	91:35	91:35	6	JBG_EN
LEAF_NODE	91:41	91:41	6	)
LEAF_NODE	93:8	93:8	6	jbg_strerror
LEAF_NODE	93:20	93:20	6	(
LEAF_NODE	93:21	93:21	6	decodeStatus
LEAF_NODE	93:33	93:33	6	)
LEAF_NODE	95:8	95:8	6	)
LEAF_NODE	95:9	95:9	6	;
EXPR_STATEMENT	96:2	96:24	6	jbg_dec_free ( & decoder ) ;
EXPR	96:2	96:2	7	jbg_dec_free ( & decoder )
FUNCTION_CALL	96:2	96:23	8	jbg_dec_free ( & decoder )
CALLEE	96:2	96:2	9	jbg_dec_free
LEAF_NODE	96:2	96:2	10	jbg_dec_free
LEAF_NODE	96:14	96:14	9	(
ARGUMENT	96:15	96:15	9	& decoder
UNARY_EXPR	96:15	96:16	10	& decoder
UNARY_OPERATOR	96:15	96:15	11	&
LEAF_NODE	96:15	96:15	12	&
FIELD	96:16	96:16	11	decoder
LEAF_NODE	96:16	96:16	12	decoder
LEAF_NODE	96:23	96:23	9	)
LEAF_NODE	96:24	96:24	7	;
JUMP_STATEMENT	97:2	97:10	6	return 0 ;
KEYWORD	97:2	97:2	7	return
LEAF_NODE	97:2	97:2	8	return
DESTINATION	97:9	97:9	7	0
EXPR	97:9	97:9	8	0
FIELD	97:9	97:9	9	0
LEAF_NODE	97:9	97:9	10	0
LEAF_NODE	97:10	97:10	7	;
LEAF_NODE	98:1	98:1	5	}
EXPR_STATEMENT	100:1	100:40	3	decodedSize = jbg_dec_getsize ( & decoder ) ;
EXPR	100:1	100:1	4	decodedSize = jbg_dec_getsize ( & decoder )
ASSIGN	100:1	100:15	5	decodedSize = jbg_dec_getsize ( & decoder )
LVAL	100:1	100:1	6	decodedSize
FIELD	100:1	100:1	7	decodedSize
LEAF_NODE	100:1	100:1	8	decodedSize
ASSIGN_OP	100:13	100:13	6	=
LEAF_NODE	100:13	100:13	7	=
RVAL	100:15	100:15	6	jbg_dec_getsize ( & decoder )
FUNCTION_CALL	100:15	100:39	7	jbg_dec_getsize ( & decoder )
CALLEE	100:15	100:15	8	jbg_dec_getsize
LEAF_NODE	100:15	100:15	9	jbg_dec_getsize
LEAF_NODE	100:30	100:30	8	(
ARGUMENT	100:31	100:31	8	& decoder
UNARY_EXPR	100:31	100:32	9	& decoder
UNARY_OPERATOR	100:31	100:31	10	&
LEAF_NODE	100:31	100:31	11	&
FIELD	100:32	100:32	10	decoder
LEAF_NODE	100:32	100:32	11	decoder
LEAF_NODE	100:39	100:39	8	)
LEAF_NODE	100:40	100:40	4	;
SELECTION	101:1	102:1	3	
KEYWORD	101:1	101:1	4	if
LEAF_NODE	101:1	101:1	5	if
LEAF_NODE	101:3	101:3	4	(
CONDITION	101:5	101:5	4	( tmsize_t ) decodedSize < size
EXPR	101:5	101:29	5	( tmsize_t ) decodedSize < size
LEAF_NODE	101:5	101:5	6	(
TYPE_NAME	101:6	101:6	6	tmsize_t
LEAF_NODE	101:6	101:6	7	tmsize_t
LEAF_NODE	101:14	101:14	6	)
FIELD	101:15	101:15	6	decodedSize
LEAF_NODE	101:15	101:15	7	decodedSize
REL_OPERATOR	101:27	101:27	6	<
LEAF_NODE	101:27	101:27	7	<
FIELD	101:29	101:29	6	size
LEAF_NODE	101:29	101:29	7	size
LEAF_NODE	101:34	101:34	4	)
STATEMENTS	102:1	106:1	4	
LEAF_NODE	102:1	102:1	5	{
STATEMENTS	103:5	103:5	5	
EXPR_STATEMENT	103:5	105:53	6	TIFFWarningExt ( tif -> tif_clientdata , "JBIG" , "Only decoded %lu bytes, whereas %lu requested" , decodedSize , ( unsigned long ) size ) ;
EXPR	103:5	103:5	7	TIFFWarningExt ( tif -> tif_clientdata , "JBIG" , "Only decoded %lu bytes, whereas %lu requested" , decodedSize , ( unsigned long ) size )
FUNCTION_CALL	103:5	105:52	8	TIFFWarningExt ( tif -> tif_clientdata , "JBIG" , "Only decoded %lu bytes, whereas %lu requested" , decodedSize , ( unsigned long ) size )
CALLEE	103:5	103:5	9	TIFFWarningExt
LEAF_NODE	103:5	103:5	10	TIFFWarningExt
LEAF_NODE	103:19	103:19	9	(
ARGUMENT	103:20	103:20	9	tif -> tif_clientdata
FIELD	103:20	103:25	10	tif -> tif_clientdata
LEAF_NODE	103:20	103:20	11	tif
LEAF_NODE	103:23	103:23	11	->
LEAF_NODE	103:25	103:25	11	tif_clientdata
LEAF_NODE	103:39	103:39	9	,
ARGUMENT	103:41	103:41	9	"JBIG"
FIELD	103:41	103:41	10	"JBIG"
LEAF_NODE	103:41	103:41	11	"JBIG"
LEAF_NODE	103:47	103:47	9	,
ARGUMENT	104:20	104:20	9	"Only decoded %lu bytes, whereas %lu requested"
FIELD	104:20	104:20	10	"Only decoded %lu bytes, whereas %lu requested"
LEAF_NODE	104:20	104:20	11	"Only decoded %lu bytes, whereas %lu requested"
LEAF_NODE	104:67	104:67	9	,
ARGUMENT	105:20	105:20	9	decodedSize
FIELD	105:20	105:20	10	decodedSize
LEAF_NODE	105:20	105:20	11	decodedSize
LEAF_NODE	105:31	105:31	9	,
ARGUMENT	105:33	105:48	9	( unsigned long ) size
LEAF_NODE	105:33	105:33	10	(
TYPE_NAME	105:34	105:43	10	unsigned long
LEAF_NODE	105:34	105:34	11	unsigned
LEAF_NODE	105:43	105:43	11	long
LEAF_NODE	105:47	105:47	10	)
FIELD	105:48	105:48	10	size
LEAF_NODE	105:48	105:48	11	size
LEAF_NODE	105:52	105:52	9	)
LEAF_NODE	105:53	105:53	7	;
LEAF_NODE	106:1	106:1	5	}
SELECTION	107:1	107:6	3	
KEYWORD	107:1	107:1	4	else
LEAF_NODE	107:1	107:1	5	else
STATEMENTS	107:6	107:6	4	
SELECTION	107:6	108:1	5	
KEYWORD	107:6	107:6	6	if
LEAF_NODE	107:6	107:6	7	if
LEAF_NODE	107:8	107:8	6	(
CONDITION	107:10	107:10	6	( tmsize_t ) decodedSize > size
EXPR	107:10	107:34	7	( tmsize_t ) decodedSize > size
LEAF_NODE	107:10	107:10	8	(
TYPE_NAME	107:11	107:11	8	tmsize_t
LEAF_NODE	107:11	107:11	9	tmsize_t
LEAF_NODE	107:19	107:19	8	)
FIELD	107:20	107:20	8	decodedSize
LEAF_NODE	107:20	107:20	9	decodedSize
REL_OPERATOR	107:32	107:32	8	>
LEAF_NODE	107:32	107:32	9	>
FIELD	107:34	107:34	8	size
LEAF_NODE	107:34	107:34	9	size
LEAF_NODE	107:39	107:39	6	)
STATEMENTS	108:1	114:1	6	
LEAF_NODE	108:1	108:1	7	{
STATEMENTS	109:5	113:5	7	
EXPR_STATEMENT	109:5	111:51	8	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Decoded %lu bytes, whereas %lu were requested" , decodedSize , ( unsigned long ) size ) ;
EXPR	109:5	109:5	9	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Decoded %lu bytes, whereas %lu were requested" , decodedSize , ( unsigned long ) size )
FUNCTION_CALL	109:5	111:50	10	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Decoded %lu bytes, whereas %lu were requested" , decodedSize , ( unsigned long ) size )
CALLEE	109:5	109:5	11	TIFFErrorExt
LEAF_NODE	109:5	109:5	12	TIFFErrorExt
LEAF_NODE	109:17	109:17	11	(
ARGUMENT	109:18	109:18	11	tif -> tif_clientdata
FIELD	109:18	109:23	12	tif -> tif_clientdata
LEAF_NODE	109:18	109:18	13	tif
LEAF_NODE	109:21	109:21	13	->
LEAF_NODE	109:23	109:23	13	tif_clientdata
LEAF_NODE	109:37	109:37	11	,
ARGUMENT	109:39	109:39	11	"JBIG"
FIELD	109:39	109:39	12	"JBIG"
LEAF_NODE	109:39	109:39	13	"JBIG"
LEAF_NODE	109:45	109:45	11	,
ARGUMENT	110:18	110:18	11	"Decoded %lu bytes, whereas %lu were requested"
FIELD	110:18	110:18	12	"Decoded %lu bytes, whereas %lu were requested"
LEAF_NODE	110:18	110:18	13	"Decoded %lu bytes, whereas %lu were requested"
LEAF_NODE	110:65	110:65	11	,
ARGUMENT	111:18	111:18	11	decodedSize
FIELD	111:18	111:18	12	decodedSize
LEAF_NODE	111:18	111:18	13	decodedSize
LEAF_NODE	111:29	111:29	11	,
ARGUMENT	111:31	111:46	11	( unsigned long ) size
LEAF_NODE	111:31	111:31	12	(
TYPE_NAME	111:32	111:41	12	unsigned long
LEAF_NODE	111:32	111:32	13	unsigned
LEAF_NODE	111:41	111:41	13	long
LEAF_NODE	111:45	111:45	12	)
FIELD	111:46	111:46	12	size
LEAF_NODE	111:46	111:46	13	size
LEAF_NODE	111:50	111:50	11	)
LEAF_NODE	111:51	111:51	9	;
EXPR_STATEMENT	112:5	112:27	8	jbg_dec_free ( & decoder ) ;
EXPR	112:5	112:5	9	jbg_dec_free ( & decoder )
FUNCTION_CALL	112:5	112:26	10	jbg_dec_free ( & decoder )
CALLEE	112:5	112:5	11	jbg_dec_free
LEAF_NODE	112:5	112:5	12	jbg_dec_free
LEAF_NODE	112:17	112:17	11	(
ARGUMENT	112:18	112:18	11	& decoder
UNARY_EXPR	112:18	112:19	12	& decoder
UNARY_OPERATOR	112:18	112:18	13	&
LEAF_NODE	112:18	112:18	14	&
FIELD	112:19	112:19	13	decoder
LEAF_NODE	112:19	112:19	14	decoder
LEAF_NODE	112:26	112:26	11	)
LEAF_NODE	112:27	112:27	9	;
JUMP_STATEMENT	113:5	113:13	8	return 0 ;
KEYWORD	113:5	113:5	9	return
LEAF_NODE	113:5	113:5	10	return
DESTINATION	113:12	113:12	9	0
EXPR	113:12	113:12	10	0
FIELD	113:12	113:12	11	0
LEAF_NODE	113:12	113:12	12	0
LEAF_NODE	113:13	113:13	9	;
LEAF_NODE	114:1	114:1	7	}
EXPR_STATEMENT	115:1	115:39	3	pImage = jbg_dec_getimage ( & decoder , 0 ) ;
EXPR	115:1	115:1	4	pImage = jbg_dec_getimage ( & decoder , 0 )
ASSIGN	115:1	115:10	5	pImage = jbg_dec_getimage ( & decoder , 0 )
LVAL	115:1	115:1	6	pImage
FIELD	115:1	115:1	7	pImage
LEAF_NODE	115:1	115:1	8	pImage
ASSIGN_OP	115:8	115:8	6	=
LEAF_NODE	115:8	115:8	7	=
RVAL	115:10	115:10	6	jbg_dec_getimage ( & decoder , 0 )
FUNCTION_CALL	115:10	115:38	7	jbg_dec_getimage ( & decoder , 0 )
CALLEE	115:10	115:10	8	jbg_dec_getimage
LEAF_NODE	115:10	115:10	9	jbg_dec_getimage
LEAF_NODE	115:26	115:26	8	(
ARGUMENT	115:27	115:27	8	& decoder
UNARY_EXPR	115:27	115:28	9	& decoder
UNARY_OPERATOR	115:27	115:27	10	&
LEAF_NODE	115:27	115:27	11	&
FIELD	115:28	115:28	10	decoder
LEAF_NODE	115:28	115:28	11	decoder
LEAF_NODE	115:35	115:35	8	,
ARGUMENT	115:37	115:37	8	0
FIELD	115:37	115:37	9	0
LEAF_NODE	115:37	115:37	10	0
LEAF_NODE	115:38	115:38	8	)
LEAF_NODE	115:39	115:39	4	;
EXPR_STATEMENT	116:1	116:41	3	_TIFFmemcpy ( buffer , pImage , decodedSize ) ;
EXPR	116:1	116:1	4	_TIFFmemcpy ( buffer , pImage , decodedSize )
FUNCTION_CALL	116:1	116:40	5	_TIFFmemcpy ( buffer , pImage , decodedSize )
CALLEE	116:1	116:1	6	_TIFFmemcpy
LEAF_NODE	116:1	116:1	7	_TIFFmemcpy
LEAF_NODE	116:12	116:12	6	(
ARGUMENT	116:13	116:13	6	buffer
FIELD	116:13	116:13	7	buffer
LEAF_NODE	116:13	116:13	8	buffer
LEAF_NODE	116:19	116:19	6	,
ARGUMENT	116:21	116:21	6	pImage
FIELD	116:21	116:21	7	pImage
LEAF_NODE	116:21	116:21	8	pImage
LEAF_NODE	116:27	116:27	6	,
ARGUMENT	116:29	116:29	6	decodedSize
FIELD	116:29	116:29	7	decodedSize
LEAF_NODE	116:29	116:29	8	decodedSize
LEAF_NODE	116:40	116:40	6	)
LEAF_NODE	116:41	116:41	4	;
EXPR_STATEMENT	117:1	117:23	3	jbg_dec_free ( & decoder ) ;
EXPR	117:1	117:1	4	jbg_dec_free ( & decoder )
FUNCTION_CALL	117:1	117:22	5	jbg_dec_free ( & decoder )
CALLEE	117:1	117:1	6	jbg_dec_free
LEAF_NODE	117:1	117:1	7	jbg_dec_free
LEAF_NODE	117:13	117:13	6	(
ARGUMENT	117:14	117:14	6	& decoder
UNARY_EXPR	117:14	117:15	7	& decoder
UNARY_OPERATOR	117:14	117:14	8	&
LEAF_NODE	117:14	117:14	9	&
FIELD	117:15	117:15	8	decoder
LEAF_NODE	117:15	117:15	9	decoder
LEAF_NODE	117:22	117:22	6	)
LEAF_NODE	117:23	117:23	4	;
EXPR_STATEMENT	119:8	119:40	3	tif -> tif_rawcp += tif -> tif_rawcc ;
EXPR	119:8	119:8	4	tif -> tif_rawcp += tif -> tif_rawcc
ASSIGN	119:8	119:26	5	tif -> tif_rawcp += tif -> tif_rawcc
LVAL	119:8	119:8	6	tif -> tif_rawcp
FIELD	119:8	119:13	7	tif -> tif_rawcp
LEAF_NODE	119:8	119:8	8	tif
LEAF_NODE	119:11	119:11	8	->
LEAF_NODE	119:13	119:13	8	tif_rawcp
ASSIGN_OP	119:23	119:23	6	+=
LEAF_NODE	119:23	119:23	7	+=
RVAL	119:26	119:26	6	tif -> tif_rawcc
FIELD	119:26	119:31	7	tif -> tif_rawcc
LEAF_NODE	119:26	119:26	8	tif
LEAF_NODE	119:29	119:29	8	->
LEAF_NODE	119:31	119:31	8	tif_rawcc
LEAF_NODE	119:40	119:40	4	;
EXPR_STATEMENT	120:8	120:26	3	tif -> tif_rawcc = 0 ;
EXPR	120:8	120:8	4	tif -> tif_rawcc = 0
ASSIGN	120:8	120:25	5	tif -> tif_rawcc = 0
LVAL	120:8	120:8	6	tif -> tif_rawcc
FIELD	120:8	120:13	7	tif -> tif_rawcc
LEAF_NODE	120:8	120:8	8	tif
LEAF_NODE	120:11	120:11	8	->
LEAF_NODE	120:13	120:13	8	tif_rawcc
ASSIGN_OP	120:23	120:23	6	=
LEAF_NODE	120:23	120:23	7	=
RVAL	120:25	120:25	6	0
FIELD	120:25	120:25	7	0
LEAF_NODE	120:25	120:25	8	0
LEAF_NODE	120:26	120:26	4	;
JUMP_STATEMENT	122:1	122:9	3	return 1 ;
KEYWORD	122:1	122:1	4	return
LEAF_NODE	122:1	122:1	5	return
DESTINATION	122:8	122:8	4	1
EXPR	122:8	122:8	5	1
FIELD	122:8	122:8	6	1
LEAF_NODE	122:8	122:8	7	1
LEAF_NODE	122:9	122:9	4	;
LEAF_NODE	123:0	123:0	2	}
FUNCTION_DEF	125:0	134:0	1	
RETURN_TYPE	125:0	125:7	2	static int
LEAF_NODE	125:0	125:0	3	static
TYPE_NAME	125:7	125:7	3	int
LEAF_NODE	125:7	125:7	4	int
FUNCTION_NAME	125:11	125:11	2	JBIGSetupEncode
LEAF_NODE	125:11	125:11	3	JBIGSetupEncode
PARAMETER_LIST	125:26	125:36	2	( TIFF * tif )
LEAF_NODE	125:26	125:26	3	(
PARAMETER_DECL	125:27	125:33	3	TIFF * tif
TYPE	125:27	125:31	4	TIFF *
TYPE_NAME	125:27	125:27	5	TIFF
LEAF_NODE	125:27	125:27	6	TIFF
POINTER	125:31	125:31	5	*
LEAF_NODE	125:31	125:31	6	*
NAME	125:33	125:33	4	tif
LEAF_NODE	125:33	125:33	5	tif
LEAF_NODE	125:36	125:36	3	)
LEAF_NODE	126:0	126:0	2	{
STATEMENTS	127:1	133:1	2	
SELECTION	127:1	128:1	3	
KEYWORD	127:1	127:1	4	if
LEAF_NODE	127:1	127:1	5	if
LEAF_NODE	127:4	127:4	4	(
CONDITION	127:5	127:5	4	TIFFNumberOfStrips ( tif ) != 1
EXPR	127:5	127:32	5	TIFFNumberOfStrips ( tif ) != 1
FUNCTION_CALL	127:5	127:27	6	TIFFNumberOfStrips ( tif )
CALLEE	127:5	127:5	7	TIFFNumberOfStrips
LEAF_NODE	127:5	127:5	8	TIFFNumberOfStrips
LEAF_NODE	127:23	127:23	7	(
ARGUMENT	127:24	127:24	7	tif
FIELD	127:24	127:24	8	tif
LEAF_NODE	127:24	127:24	9	tif
LEAF_NODE	127:27	127:27	7	)
EQ_OPERATOR	127:29	127:29	6	!=
LEAF_NODE	127:29	127:29	7	!=
FIELD	127:32	127:32	6	1
LEAF_NODE	127:32	127:32	7	1
LEAF_NODE	127:33	127:33	4	)
STATEMENTS	128:1	131:1	4	
LEAF_NODE	128:1	128:1	5	{
STATEMENTS	129:2	130:2	5	
EXPR_STATEMENT	129:2	129:89	6	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Multistrip images not supported in encoder" ) ;
EXPR	129:2	129:2	7	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Multistrip images not supported in encoder" )
FUNCTION_CALL	129:2	129:88	8	TIFFErrorExt ( tif -> tif_clientdata , "JBIG" , "Multistrip images not supported in encoder" )
CALLEE	129:2	129:2	9	TIFFErrorExt
LEAF_NODE	129:2	129:2	10	TIFFErrorExt
LEAF_NODE	129:14	129:14	9	(
ARGUMENT	129:15	129:15	9	tif -> tif_clientdata
FIELD	129:15	129:20	10	tif -> tif_clientdata
LEAF_NODE	129:15	129:15	11	tif
LEAF_NODE	129:18	129:18	11	->
LEAF_NODE	129:20	129:20	11	tif_clientdata
LEAF_NODE	129:34	129:34	9	,
ARGUMENT	129:36	129:36	9	"JBIG"
FIELD	129:36	129:36	10	"JBIG"
LEAF_NODE	129:36	129:36	11	"JBIG"
LEAF_NODE	129:42	129:42	9	,
ARGUMENT	129:44	129:44	9	"Multistrip images not supported in encoder"
FIELD	129:44	129:44	10	"Multistrip images not supported in encoder"
LEAF_NODE	129:44	129:44	11	"Multistrip images not supported in encoder"
LEAF_NODE	129:88	129:88	9	)
LEAF_NODE	129:89	129:89	7	;
JUMP_STATEMENT	130:2	130:10	6	return 0 ;
KEYWORD	130:2	130:2	7	return
LEAF_NODE	130:2	130:2	8	return
DESTINATION	130:9	130:9	7	0
EXPR	130:9	130:9	8	0
FIELD	130:9	130:9	9	0
LEAF_NODE	130:9	130:9	10	0
LEAF_NODE	130:10	130:10	7	;
LEAF_NODE	131:1	131:1	5	}
JUMP_STATEMENT	133:1	133:9	3	return 1 ;
KEYWORD	133:1	133:1	4	return
LEAF_NODE	133:1	133:1	5	return
DESTINATION	133:8	133:8	4	1
EXPR	133:8	133:8	5	1
FIELD	133:8	133:8	6	1
LEAF_NODE	133:8	133:8	7	1
LEAF_NODE	133:9	133:9	4	;
LEAF_NODE	134:0	134:0	2	}
FUNCTION_DEF	136:0	162:0	1	
RETURN_TYPE	136:0	136:7	2	static int
LEAF_NODE	136:0	136:0	3	static
TYPE_NAME	136:7	136:7	3	int
LEAF_NODE	136:7	136:7	4	int
FUNCTION_NAME	136:11	136:11	2	JBIGCopyEncodedData
LEAF_NODE	136:11	136:11	3	JBIGCopyEncodedData
PARAMETER_LIST	136:30	136:80	2	( TIFF * tif , unsigned char * pp , size_t cc , uint16 s )
LEAF_NODE	136:30	136:30	3	(
PARAMETER_DECL	136:31	136:37	3	TIFF * tif
TYPE	136:31	136:35	4	TIFF *
TYPE_NAME	136:31	136:31	5	TIFF
LEAF_NODE	136:31	136:31	6	TIFF
POINTER	136:35	136:35	5	*
LEAF_NODE	136:35	136:35	6	*
NAME	136:37	136:37	4	tif
LEAF_NODE	136:37	136:37	5	tif
LEAF_NODE	136:40	136:40	3	,
PARAMETER_DECL	136:42	136:57	3	unsigned char * pp
TYPE	136:42	136:55	4	unsigned char *
TYPE_NAME	136:42	136:51	5	unsigned char
LEAF_NODE	136:42	136:42	6	unsigned
LEAF_NODE	136:51	136:51	6	char
POINTER	136:55	136:55	5	*
LEAF_NODE	136:55	136:55	6	*
NAME	136:57	136:57	4	pp
LEAF_NODE	136:57	136:57	5	pp
LEAF_NODE	136:59	136:59	3	,
PARAMETER_DECL	136:61	136:68	3	size_t cc
TYPE	136:61	136:61	4	size_t
TYPE_NAME	136:61	136:61	5	size_t
LEAF_NODE	136:61	136:61	6	size_t
NAME	136:68	136:68	4	cc
LEAF_NODE	136:68	136:68	5	cc
LEAF_NODE	136:70	136:70	3	,
PARAMETER_DECL	136:72	136:79	3	uint16 s
TYPE	136:72	136:72	4	uint16
TYPE_NAME	136:72	136:72	5	uint16
LEAF_NODE	136:72	136:72	6	uint16
NAME	136:79	136:79	4	s
LEAF_NODE	136:79	136:79	5	s
LEAF_NODE	136:80	136:80	3	)
LEAF_NODE	137:0	137:0	2	{
STATEMENTS	138:1	161:1	2	
EXPR_STATEMENT	138:1	138:9	3	( void ) s ;
EXPR	138:1	138:8	4	( void ) s
LEAF_NODE	138:1	138:1	5	(
TYPE_NAME	138:2	138:2	5	void
LEAF_NODE	138:2	138:2	6	void
LEAF_NODE	138:6	138:6	5	)
FIELD	138:8	138:8	5	s
LEAF_NODE	138:8	138:8	6	s
LEAF_NODE	138:9	138:9	4	;
ITERATION	139:1	140:1	3	
KEYWORD	139:1	139:1	4	while
LEAF_NODE	139:1	139:1	5	while
LEAF_NODE	139:7	139:7	4	(
CONDITION	139:8	139:8	4	cc > 0
EXPR	139:8	139:13	5	cc > 0
FIELD	139:8	139:8	6	cc
LEAF_NODE	139:8	139:8	7	cc
REL_OPERATOR	139:11	139:11	6	>
LEAF_NODE	139:11	139:11	7	>
FIELD	139:13	139:13	6	0
LEAF_NODE	139:13	139:13	7	0
LEAF_NODE	139:14	139:14	4	)
STATEMENTS	140:1	159:1	4	
LEAF_NODE	140:1	140:1	5	{
STATEMENTS	141:2	154:2	5	
SIMPLE_DECL	141:2	141:27	6	tmsize_t n ; n = ( tmsize_t ) cc ;
VAR_DECL	141:2	141:11	7	tmsize_t n ; n = ( tmsize_t ) cc
TYPE	141:2	141:2	8	tmsize_t
TYPE_NAME	141:2	141:2	9	tmsize_t
LEAF_NODE	141:2	141:2	10	tmsize_t
NAME	141:11	141:11	8	n
LEAF_NODE	141:11	141:11	9	n
LEAF_NODE	0:0	0:0	8	;
INIT	141:11	141:11	8	n = ( tmsize_t ) cc
ASSIGN	141:11	141:15	9	n = ( tmsize_t ) cc
LVAL	141:11	141:11	10	n
NAME	141:11	141:11	11	n
LEAF_NODE	141:11	141:11	12	n
ASSIGN_OP	141:13	141:13	10	=
LEAF_NODE	141:13	141:13	11	=
RVAL	141:15	141:25	10	( tmsize_t ) cc
LEAF_NODE	141:15	141:15	11	(
TYPE_NAME	141:16	141:16	11	tmsize_t
LEAF_NODE	141:16	141:16	12	tmsize_t
LEAF_NODE	141:24	141:24	11	)
FIELD	141:25	141:25	11	cc
LEAF_NODE	141:25	141:25	12	cc
LEAF_NODE	141:27	141:27	7	;
SELECTION	143:2	144:2	6	
KEYWORD	143:2	143:2	7	if
LEAF_NODE	143:2	143:2	8	if
LEAF_NODE	143:5	143:5	7	(
CONDITION	143:6	143:6	7	tif -> tif_rawcc + n > tif -> tif_rawdatasize
EXPR	143:6	143:27	8	tif -> tif_rawcc + n > tif -> tif_rawdatasize
FIELD	143:6	143:11	9	tif -> tif_rawcc
LEAF_NODE	143:6	143:6	10	tif
LEAF_NODE	143:9	143:9	10	->
LEAF_NODE	143:11	143:11	10	tif_rawcc
LEAF_NODE	143:21	143:21	9	+
FIELD	143:23	143:23	9	n
LEAF_NODE	143:23	143:23	10	n
REL_OPERATOR	143:25	143:25	9	>
LEAF_NODE	143:25	143:25	10	>
FIELD	143:27	143:32	9	tif -> tif_rawdatasize
LEAF_NODE	143:27	143:27	10	tif
LEAF_NODE	143:30	143:30	10	->
LEAF_NODE	143:32	143:32	10	tif_rawdatasize
LEAF_NODE	143:47	143:47	7	)
STATEMENTS	144:2	146:2	7	
LEAF_NODE	144:2	144:2	8	{
STATEMENTS	145:3	145:3	8	
EXPR_STATEMENT	145:3	145:44	9	n = tif -> tif_rawdatasize - tif -> tif_rawcc ;
EXPR	145:3	145:3	10	n = tif -> tif_rawdatasize - tif -> tif_rawcc
ASSIGN	145:3	145:7	11	n = tif -> tif_rawdatasize - tif -> tif_rawcc
LVAL	145:3	145:3	12	n
FIELD	145:3	145:3	13	n
LEAF_NODE	145:3	145:3	14	n
ASSIGN_OP	145:5	145:5	12	=
LEAF_NODE	145:5	145:5	13	=
RVAL	145:7	145:30	12	tif -> tif_rawdatasize - tif -> tif_rawcc
FIELD	145:7	145:12	13	tif -> tif_rawdatasize
LEAF_NODE	145:7	145:7	14	tif
LEAF_NODE	145:10	145:10	14	->
LEAF_NODE	145:12	145:12	14	tif_rawdatasize
LEAF_NODE	145:28	145:28	13	-
FIELD	145:30	145:35	13	tif -> tif_rawcc
LEAF_NODE	145:30	145:30	14	tif
LEAF_NODE	145:33	145:33	14	->
LEAF_NODE	145:35	145:35	14	tif_rawcc
LEAF_NODE	145:44	145:44	10	;
LEAF_NODE	146:2	146:2	8	}
EXPR_STATEMENT	148:2	148:15	6	assert ( n > 0 ) ;
EXPR	148:2	148:2	7	assert ( n > 0 )
FUNCTION_CALL	148:2	148:14	8	assert ( n > 0 )
CALLEE	148:2	148:2	9	assert
LEAF_NODE	148:2	148:2	10	assert
LEAF_NODE	148:8	148:8	9	(
ARGUMENT	148:9	148:13	9	n > 0
FIELD	148:9	148:9	10	n
LEAF_NODE	148:9	148:9	11	n
REL_OPERATOR	148:11	148:11	10	>
LEAF_NODE	148:11	148:11	11	>
FIELD	148:13	148:13	10	0
LEAF_NODE	148:13	148:13	11	0
LEAF_NODE	148:14	148:14	9	)
LEAF_NODE	148:15	148:15	7	;
EXPR_STATEMENT	149:2	149:36	6	_TIFFmemcpy ( tif -> tif_rawcp , pp , n ) ;
EXPR	149:2	149:2	7	_TIFFmemcpy ( tif -> tif_rawcp , pp , n )
FUNCTION_CALL	149:2	149:35	8	_TIFFmemcpy ( tif -> tif_rawcp , pp , n )
CALLEE	149:2	149:2	9	_TIFFmemcpy
LEAF_NODE	149:2	149:2	10	_TIFFmemcpy
LEAF_NODE	149:13	149:13	9	(
ARGUMENT	149:14	149:14	9	tif -> tif_rawcp
FIELD	149:14	149:19	10	tif -> tif_rawcp
LEAF_NODE	149:14	149:14	11	tif
LEAF_NODE	149:17	149:17	11	->
LEAF_NODE	149:19	149:19	11	tif_rawcp
LEAF_NODE	149:28	149:28	9	,
ARGUMENT	149:30	149:30	9	pp
FIELD	149:30	149:30	10	pp
LEAF_NODE	149:30	149:30	11	pp
LEAF_NODE	149:32	149:32	9	,
ARGUMENT	149:34	149:34	9	n
FIELD	149:34	149:34	10	n
LEAF_NODE	149:34	149:34	11	n
LEAF_NODE	149:35	149:35	9	)
LEAF_NODE	149:36	149:36	7	;
EXPR_STATEMENT	150:2	150:21	6	tif -> tif_rawcp += n ;
EXPR	150:2	150:2	7	tif -> tif_rawcp += n
ASSIGN	150:2	150:20	8	tif -> tif_rawcp += n
LVAL	150:2	150:2	9	tif -> tif_rawcp
FIELD	150:2	150:7	10	tif -> tif_rawcp
LEAF_NODE	150:2	150:2	11	tif
LEAF_NODE	150:5	150:5	11	->
LEAF_NODE	150:7	150:7	11	tif_rawcp
ASSIGN_OP	150:17	150:17	9	+=
LEAF_NODE	150:17	150:17	10	+=
RVAL	150:20	150:20	9	n
FIELD	150:20	150:20	10	n
LEAF_NODE	150:20	150:20	11	n
LEAF_NODE	150:21	150:21	7	;
EXPR_STATEMENT	151:2	151:21	6	tif -> tif_rawcc += n ;
EXPR	151:2	151:2	7	tif -> tif_rawcc += n
ASSIGN	151:2	151:20	8	tif -> tif_rawcc += n
LVAL	151:2	151:2	9	tif -> tif_rawcc
FIELD	151:2	151:7	10	tif -> tif_rawcc
LEAF_NODE	151:2	151:2	11	tif
LEAF_NODE	151:5	151:5	11	->
LEAF_NODE	151:7	151:7	11	tif_rawcc
ASSIGN_OP	151:17	151:17	9	+=
LEAF_NODE	151:17	151:17	10	+=
RVAL	151:20	151:20	9	n
FIELD	151:20	151:20	10	n
LEAF_NODE	151:20	151:20	11	n
LEAF_NODE	151:21	151:21	7	;
EXPR_STATEMENT	152:2	152:9	6	pp += n ;
EXPR	152:2	152:2	7	pp += n
ASSIGN	152:2	152:8	8	pp += n
LVAL	152:2	152:2	9	pp
FIELD	152:2	152:2	10	pp
LEAF_NODE	152:2	152:2	11	pp
ASSIGN_OP	152:5	152:5	9	+=
LEAF_NODE	152:5	152:5	10	+=
RVAL	152:8	152:8	9	n
FIELD	152:8	152:8	10	n
LEAF_NODE	152:8	152:8	11	n
LEAF_NODE	152:9	152:9	7	;
EXPR_STATEMENT	153:2	153:17	6	cc -= ( size_t ) n ;
EXPR	153:2	153:2	7	cc -= ( size_t ) n
ASSIGN	153:2	153:8	8	cc -= ( size_t ) n
LVAL	153:2	153:2	9	cc
FIELD	153:2	153:2	10	cc
LEAF_NODE	153:2	153:2	11	cc
ASSIGN_OP	153:5	153:5	9	-=
LEAF_NODE	153:5	153:5	10	-=
RVAL	153:8	153:16	9	( size_t ) n
LEAF_NODE	153:8	153:8	10	(
TYPE_NAME	153:9	153:9	10	size_t
LEAF_NODE	153:9	153:9	11	size_t
LEAF_NODE	153:15	153:15	10	)
FIELD	153:16	153:16	10	n
LEAF_NODE	153:16	153:16	11	n
LEAF_NODE	153:17	153:17	7	;
SELECTION	154:2	156:2	6	
KEYWORD	154:2	154:2	7	if
LEAF_NODE	154:2	154:2	8	if
LEAF_NODE	154:5	154:5	7	(
CONDITION	154:6	154:6	7	tif -> tif_rawcc >= tif -> tif_rawdatasize && ! TIFFFlushData1 ( tif )
EXPR	154:6	154:6	8	tif -> tif_rawcc >= tif -> tif_rawdatasize && ! TIFFFlushData1 ( tif )
AND	154:6	155:6	9	tif -> tif_rawcc >= tif -> tif_rawdatasize && ! TIFFFlushData1 ( tif )
EXPR	154:6	154:24	10	tif -> tif_rawcc >= tif -> tif_rawdatasize
FIELD	154:6	154:11	11	tif -> tif_rawcc
LEAF_NODE	154:6	154:6	12	tif
LEAF_NODE	154:9	154:9	12	->
LEAF_NODE	154:11	154:11	12	tif_rawcc
REL_OPERATOR	154:21	154:21	11	>=
LEAF_NODE	154:21	154:21	12	>=
FIELD	154:24	154:29	11	tif -> tif_rawdatasize
LEAF_NODE	154:24	154:24	12	tif
LEAF_NODE	154:27	154:27	12	->
LEAF_NODE	154:29	154:29	12	tif_rawdatasize
LEAF_NODE	154:45	154:45	10	&&
EXPR	155:6	155:6	10	! TIFFFlushData1 ( tif )
UNARY_EXPR	155:6	155:7	11	! TIFFFlushData1 ( tif )
UNARY_OPERATOR	155:6	155:6	12	!
LEAF_NODE	155:6	155:6	13	!
FUNCTION_CALL	155:7	155:25	12	TIFFFlushData1 ( tif )
CALLEE	155:7	155:7	13	TIFFFlushData1
LEAF_NODE	155:7	155:7	14	TIFFFlushData1
LEAF_NODE	155:21	155:21	13	(
ARGUMENT	155:22	155:22	13	tif
FIELD	155:22	155:22	14	tif
LEAF_NODE	155:22	155:22	15	tif
LEAF_NODE	155:25	155:25	13	)
LEAF_NODE	155:26	155:26	7	)
STATEMENTS	156:2	158:2	7	
LEAF_NODE	156:2	156:2	8	{
STATEMENTS	157:3	157:3	8	
JUMP_STATEMENT	157:3	157:14	9	return ( - 1 ) ;
KEYWORD	157:3	157:3	10	return
LEAF_NODE	157:3	157:3	11	return
DESTINATION	157:10	157:10	10	( - 1 )
EXPR	157:10	157:13	11	( - 1 )
LEAF_NODE	157:10	157:10	12	(
UNARY_EXPR	157:11	157:12	12	- 1
UNARY_OPERATOR	157:11	157:11	13	-
LEAF_NODE	157:11	157:11	14	-
FIELD	157:12	157:12	13	1
LEAF_NODE	157:12	157:12	14	1
LEAF_NODE	157:13	157:13	12	)
LEAF_NODE	157:14	157:14	10	;
LEAF_NODE	158:2	158:2	8	}
LEAF_NODE	159:1	159:1	5	}
JUMP_STATEMENT	161:1	161:11	3	return ( 1 ) ;
KEYWORD	161:1	161:1	4	return
LEAF_NODE	161:1	161:1	5	return
DESTINATION	161:8	161:8	4	( 1 )
EXPR	161:8	161:10	5	( 1 )
LEAF_NODE	161:8	161:8	6	(
FIELD	161:9	161:9	6	1
LEAF_NODE	161:9	161:9	7	1
LEAF_NODE	161:10	161:10	6	)
LEAF_NODE	161:11	161:11	4	;
LEAF_NODE	162:0	162:0	2	}
FUNCTION_DEF	164:0	174:0	1	
RETURN_TYPE	164:0	164:7	2	static void
LEAF_NODE	164:0	164:0	3	static
TYPE_NAME	164:7	164:7	3	void
LEAF_NODE	164:7	164:7	4	void
FUNCTION_NAME	164:12	164:12	2	JBIGOutputBie
LEAF_NODE	164:12	164:12	3	JBIGOutputBie
PARAMETER_LIST	164:25	164:75	2	( unsigned char * buffer , size_t len , void * userData )
LEAF_NODE	164:25	164:25	3	(
PARAMETER_DECL	164:26	164:41	3	unsigned char * buffer
TYPE	164:26	164:39	4	unsigned char *
TYPE_NAME	164:26	164:35	5	unsigned char
LEAF_NODE	164:26	164:26	6	unsigned
LEAF_NODE	164:35	164:35	6	char
POINTER	164:39	164:39	5	*
LEAF_NODE	164:39	164:39	6	*
NAME	164:41	164:41	4	buffer
LEAF_NODE	164:41	164:41	5	buffer
LEAF_NODE	164:47	164:47	3	,
PARAMETER_DECL	164:49	164:56	3	size_t len
TYPE	164:49	164:49	4	size_t
TYPE_NAME	164:49	164:49	5	size_t
LEAF_NODE	164:49	164:49	6	size_t
NAME	164:56	164:56	4	len
LEAF_NODE	164:56	164:56	5	len
LEAF_NODE	164:59	164:59	3	,
PARAMETER_DECL	164:61	164:67	3	void * userData
TYPE	164:61	164:65	4	void *
TYPE_NAME	164:61	164:61	5	void
LEAF_NODE	164:61	164:61	6	void
POINTER	164:65	164:65	5	*
LEAF_NODE	164:65	164:65	6	*
NAME	164:67	164:67	4	userData
LEAF_NODE	164:67	164:67	5	userData
LEAF_NODE	164:75	164:75	3	)
LEAF_NODE	165:0	165:0	2	{
STATEMENTS	166:1	173:1	2	
SIMPLE_DECL	166:1	166:28	3	TIFF * tif ; tif = ( TIFF * ) userData ;
VAR_DECL	166:1	166:7	4	TIFF * tif ; tif = ( TIFF * ) userData
TYPE	166:1	166:5	5	TIFF *
TYPE_NAME	166:1	166:1	6	TIFF
LEAF_NODE	166:1	166:1	7	TIFF
POINTER	166:5	166:5	6	*
LEAF_NODE	166:5	166:5	7	*
NAME	166:7	166:7	5	tif
LEAF_NODE	166:7	166:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	166:7	166:7	5	tif = ( TIFF * ) userData
ASSIGN	166:7	166:13	6	tif = ( TIFF * ) userData
LVAL	166:7	166:7	7	tif
NAME	166:7	166:7	8	tif
LEAF_NODE	166:7	166:7	9	tif
ASSIGN_OP	166:11	166:11	7	=
LEAF_NODE	166:11	166:11	8	=
RVAL	166:13	166:20	7	( TIFF * ) userData
LEAF_NODE	166:13	166:13	8	(
TYPE_NAME	166:14	166:14	8	TIFF
LEAF_NODE	166:14	166:14	9	TIFF
LEAF_NODE	166:18	166:18	8	*
LEAF_NODE	166:19	166:19	8	)
FIELD	166:20	166:20	8	userData
LEAF_NODE	166:20	166:20	9	userData
LEAF_NODE	166:28	166:28	4	;
SELECTION	168:1	169:1	3	
KEYWORD	168:1	168:1	4	if
LEAF_NODE	168:1	168:1	5	if
LEAF_NODE	168:4	168:4	4	(
CONDITION	168:5	168:5	4	isFillOrder ( tif , tif -> tif_dir . td_fillorder )
EXPR	168:5	168:5	5	isFillOrder ( tif , tif -> tif_dir . td_fillorder )
FUNCTION_CALL	168:5	168:47	6	isFillOrder ( tif , tif -> tif_dir . td_fillorder )
CALLEE	168:5	168:5	7	isFillOrder
LEAF_NODE	168:5	168:5	8	isFillOrder
LEAF_NODE	168:16	168:16	7	(
ARGUMENT	168:17	168:17	7	tif
FIELD	168:17	168:17	8	tif
LEAF_NODE	168:17	168:17	9	tif
LEAF_NODE	168:20	168:20	7	,
ARGUMENT	168:22	168:22	7	tif -> tif_dir . td_fillorder
FIELD	168:22	168:35	8	tif -> tif_dir . td_fillorder
LEAF_NODE	168:22	168:22	9	tif
LEAF_NODE	168:25	168:25	9	->
LEAF_NODE	168:27	168:27	9	tif_dir
LEAF_NODE	168:34	168:34	9	.
LEAF_NODE	168:35	168:35	9	td_fillorder
LEAF_NODE	168:47	168:47	7	)
LEAF_NODE	168:48	168:48	4	)
STATEMENTS	169:1	171:1	4	
LEAF_NODE	169:1	169:1	5	{
STATEMENTS	170:2	170:2	5	
EXPR_STATEMENT	170:2	170:40	6	TIFFReverseBits ( buffer , ( tmsize_t ) len ) ;
EXPR	170:2	170:2	7	TIFFReverseBits ( buffer , ( tmsize_t ) len )
FUNCTION_CALL	170:2	170:39	8	TIFFReverseBits ( buffer , ( tmsize_t ) len )
CALLEE	170:2	170:2	9	TIFFReverseBits
LEAF_NODE	170:2	170:2	10	TIFFReverseBits
LEAF_NODE	170:17	170:17	9	(
ARGUMENT	170:18	170:18	9	buffer
FIELD	170:18	170:18	10	buffer
LEAF_NODE	170:18	170:18	11	buffer
LEAF_NODE	170:24	170:24	9	,
ARGUMENT	170:26	170:36	9	( tmsize_t ) len
LEAF_NODE	170:26	170:26	10	(
TYPE_NAME	170:27	170:27	10	tmsize_t
LEAF_NODE	170:27	170:27	11	tmsize_t
LEAF_NODE	170:35	170:35	10	)
FIELD	170:36	170:36	10	len
LEAF_NODE	170:36	170:36	11	len
LEAF_NODE	170:39	170:39	9	)
LEAF_NODE	170:40	170:40	7	;
LEAF_NODE	171:1	171:1	5	}
EXPR_STATEMENT	173:1	173:41	3	JBIGCopyEncodedData ( tif , buffer , len , 0 ) ;
EXPR	173:1	173:1	4	JBIGCopyEncodedData ( tif , buffer , len , 0 )
FUNCTION_CALL	173:1	173:40	5	JBIGCopyEncodedData ( tif , buffer , len , 0 )
CALLEE	173:1	173:1	6	JBIGCopyEncodedData
LEAF_NODE	173:1	173:1	7	JBIGCopyEncodedData
LEAF_NODE	173:20	173:20	6	(
ARGUMENT	173:21	173:21	6	tif
FIELD	173:21	173:21	7	tif
LEAF_NODE	173:21	173:21	8	tif
LEAF_NODE	173:24	173:24	6	,
ARGUMENT	173:26	173:26	6	buffer
FIELD	173:26	173:26	7	buffer
LEAF_NODE	173:26	173:26	8	buffer
LEAF_NODE	173:32	173:32	6	,
ARGUMENT	173:34	173:34	6	len
FIELD	173:34	173:34	7	len
LEAF_NODE	173:34	173:34	8	len
LEAF_NODE	173:37	173:37	6	,
ARGUMENT	173:39	173:39	6	0
FIELD	173:39	173:39	7	0
LEAF_NODE	173:39	173:39	8	0
LEAF_NODE	173:40	173:40	6	)
LEAF_NODE	173:41	173:41	4	;
LEAF_NODE	174:0	174:0	2	}
FUNCTION_DEF	176:0	198:0	1	
RETURN_TYPE	176:0	176:7	2	static int
LEAF_NODE	176:0	176:0	3	static
TYPE_NAME	176:7	176:7	3	int
LEAF_NODE	176:7	176:7	4	int
FUNCTION_NAME	176:11	176:11	2	JBIGEncode
LEAF_NODE	176:11	176:11	3	JBIGEncode
PARAMETER_LIST	176:21	176:71	2	( TIFF * tif , uint8 * buffer , tmsize_t size , uint16 s )
LEAF_NODE	176:21	176:21	3	(
PARAMETER_DECL	176:22	176:28	3	TIFF * tif
TYPE	176:22	176:26	4	TIFF *
TYPE_NAME	176:22	176:22	5	TIFF
LEAF_NODE	176:22	176:22	6	TIFF
POINTER	176:26	176:26	5	*
LEAF_NODE	176:26	176:26	6	*
NAME	176:28	176:28	4	tif
LEAF_NODE	176:28	176:28	5	tif
LEAF_NODE	176:31	176:31	3	,
PARAMETER_DECL	176:33	176:40	3	uint8 * buffer
TYPE	176:33	176:38	4	uint8 *
TYPE_NAME	176:33	176:33	5	uint8
LEAF_NODE	176:33	176:33	6	uint8
POINTER	176:38	176:38	5	*
LEAF_NODE	176:38	176:38	6	*
NAME	176:40	176:40	4	buffer
LEAF_NODE	176:40	176:40	5	buffer
LEAF_NODE	176:46	176:46	3	,
PARAMETER_DECL	176:48	176:57	3	tmsize_t size
TYPE	176:48	176:48	4	tmsize_t
TYPE_NAME	176:48	176:48	5	tmsize_t
LEAF_NODE	176:48	176:48	6	tmsize_t
NAME	176:57	176:57	4	size
LEAF_NODE	176:57	176:57	5	size
LEAF_NODE	176:61	176:61	3	,
PARAMETER_DECL	176:63	176:70	3	uint16 s
TYPE	176:63	176:63	4	uint16
TYPE_NAME	176:63	176:63	5	uint16
LEAF_NODE	176:63	176:63	6	uint16
NAME	176:70	176:70	4	s
LEAF_NODE	176:70	176:70	5	s
LEAF_NODE	176:71	176:71	3	)
LEAF_NODE	177:0	177:0	2	{
STATEMENTS	178:1	197:1	2	
SIMPLE_DECL	178:1	178:35	3	TIFFDirectory * dir ; dir = & tif -> tif_dir ;
VAR_DECL	178:1	178:16	4	TIFFDirectory * dir ; dir = & tif -> tif_dir
TYPE	178:1	178:14	5	TIFFDirectory *
TYPE_NAME	178:1	178:1	6	TIFFDirectory
LEAF_NODE	178:1	178:1	7	TIFFDirectory
POINTER	178:14	178:14	6	*
LEAF_NODE	178:14	178:14	7	*
NAME	178:16	178:16	5	dir
LEAF_NODE	178:16	178:16	6	dir
LEAF_NODE	0:0	0:0	5	;
INIT	178:16	178:16	5	dir = & tif -> tif_dir
ASSIGN	178:16	178:22	6	dir = & tif -> tif_dir
LVAL	178:16	178:16	7	dir
NAME	178:16	178:16	8	dir
LEAF_NODE	178:16	178:16	9	dir
ASSIGN_OP	178:20	178:20	7	=
LEAF_NODE	178:20	178:20	8	=
RVAL	178:22	178:22	7	& tif -> tif_dir
UNARY_EXPR	178:22	178:23	8	& tif -> tif_dir
UNARY_OPERATOR	178:22	178:22	9	&
LEAF_NODE	178:22	178:22	10	&
FIELD	178:23	178:28	9	tif -> tif_dir
LEAF_NODE	178:23	178:23	10	tif
LEAF_NODE	178:26	178:26	10	->
LEAF_NODE	178:28	178:28	10	tif_dir
LEAF_NODE	178:35	178:35	4	;
SIMPLE_DECL	179:1	179:29	3	struct jbg_enc_state encoder ;
VAR_DECL	179:1	179:22	4	struct jbg_enc_state encoder
TYPE	179:1	179:1	5	struct jbg_enc_state
TYPE_NAME	179:1	179:8	6	struct jbg_enc_state
LEAF_NODE	179:1	179:1	7	struct
LEAF_NODE	179:8	179:8	7	jbg_enc_state
NAME	179:22	179:22	5	encoder
LEAF_NODE	179:22	179:22	6	encoder
LEAF_NODE	179:29	179:29	4	;
EXPR_STATEMENT	181:1	181:22	3	( void ) size , ( void ) s ;
EXPR	181:1	181:21	4	( void ) size , ( void ) s
LEAF_NODE	181:1	181:1	5	(
TYPE_NAME	181:2	181:2	5	void
LEAF_NODE	181:2	181:2	6	void
LEAF_NODE	181:6	181:6	5	)
FIELD	181:8	181:8	5	size
LEAF_NODE	181:8	181:8	6	size
LEAF_NODE	181:12	181:12	5	,
LEAF_NODE	181:14	181:14	5	(
TYPE_NAME	181:15	181:15	5	void
LEAF_NODE	181:15	181:15	6	void
LEAF_NODE	181:19	181:19	5	)
FIELD	181:21	181:21	5	s
LEAF_NODE	181:21	181:21	6	s
LEAF_NODE	181:22	181:22	4	;
EXPR_STATEMENT	183:1	189:11	3	jbg_enc_init ( & encoder , dir -> td_imagewidth , dir -> td_imagelength , 1 , & buffer , JBIGOutputBie , tif ) ;
EXPR	183:1	183:1	4	jbg_enc_init ( & encoder , dir -> td_imagewidth , dir -> td_imagelength , 1 , & buffer , JBIGOutputBie , tif )
FUNCTION_CALL	183:1	189:10	5	jbg_enc_init ( & encoder , dir -> td_imagewidth , dir -> td_imagelength , 1 , & buffer , JBIGOutputBie , tif )
CALLEE	183:1	183:1	6	jbg_enc_init
LEAF_NODE	183:1	183:1	7	jbg_enc_init
LEAF_NODE	183:13	183:13	6	(
ARGUMENT	183:14	183:14	6	& encoder
UNARY_EXPR	183:14	183:15	7	& encoder
UNARY_OPERATOR	183:14	183:14	8	&
LEAF_NODE	183:14	183:14	9	&
FIELD	183:15	183:15	8	encoder
LEAF_NODE	183:15	183:15	9	encoder
LEAF_NODE	183:22	183:22	6	,
ARGUMENT	184:7	184:7	6	dir -> td_imagewidth
FIELD	184:7	184:12	7	dir -> td_imagewidth
LEAF_NODE	184:7	184:7	8	dir
LEAF_NODE	184:10	184:10	8	->
LEAF_NODE	184:12	184:12	8	td_imagewidth
LEAF_NODE	184:25	184:25	6	,
ARGUMENT	185:7	185:7	6	dir -> td_imagelength
FIELD	185:7	185:12	7	dir -> td_imagelength
LEAF_NODE	185:7	185:7	8	dir
LEAF_NODE	185:10	185:10	8	->
LEAF_NODE	185:12	185:12	8	td_imagelength
LEAF_NODE	185:26	185:26	6	,
ARGUMENT	186:7	186:7	6	1
FIELD	186:7	186:7	7	1
LEAF_NODE	186:7	186:7	8	1
LEAF_NODE	186:8	186:8	6	,
ARGUMENT	187:7	187:7	6	& buffer
UNARY_EXPR	187:7	187:8	7	& buffer
UNARY_OPERATOR	187:7	187:7	8	&
LEAF_NODE	187:7	187:7	9	&
FIELD	187:8	187:8	8	buffer
LEAF_NODE	187:8	187:8	9	buffer
LEAF_NODE	187:14	187:14	6	,
ARGUMENT	188:7	188:7	6	JBIGOutputBie
FIELD	188:7	188:7	7	JBIGOutputBie
LEAF_NODE	188:7	188:7	8	JBIGOutputBie
LEAF_NODE	188:20	188:20	6	,
ARGUMENT	189:7	189:7	6	tif
FIELD	189:7	189:7	7	tif
LEAF_NODE	189:7	189:7	8	tif
LEAF_NODE	189:10	189:10	6	)
LEAF_NODE	189:11	189:11	4	;
EXPR_STATEMENT	194:1	194:22	3	jbg_enc_out ( & encoder ) ;
EXPR	194:1	194:1	4	jbg_enc_out ( & encoder )
FUNCTION_CALL	194:1	194:21	5	jbg_enc_out ( & encoder )
CALLEE	194:1	194:1	6	jbg_enc_out
LEAF_NODE	194:1	194:1	7	jbg_enc_out
LEAF_NODE	194:12	194:12	6	(
ARGUMENT	194:13	194:13	6	& encoder
UNARY_EXPR	194:13	194:14	7	& encoder
UNARY_OPERATOR	194:13	194:13	8	&
LEAF_NODE	194:13	194:13	9	&
FIELD	194:14	194:14	8	encoder
LEAF_NODE	194:14	194:14	9	encoder
LEAF_NODE	194:21	194:21	6	)
LEAF_NODE	194:22	194:22	4	;
EXPR_STATEMENT	195:1	195:23	3	jbg_enc_free ( & encoder ) ;
EXPR	195:1	195:1	4	jbg_enc_free ( & encoder )
FUNCTION_CALL	195:1	195:22	5	jbg_enc_free ( & encoder )
CALLEE	195:1	195:1	6	jbg_enc_free
LEAF_NODE	195:1	195:1	7	jbg_enc_free
LEAF_NODE	195:13	195:13	6	(
ARGUMENT	195:14	195:14	6	& encoder
UNARY_EXPR	195:14	195:15	7	& encoder
UNARY_OPERATOR	195:14	195:14	8	&
LEAF_NODE	195:14	195:14	9	&
FIELD	195:15	195:15	8	encoder
LEAF_NODE	195:15	195:15	9	encoder
LEAF_NODE	195:22	195:22	6	)
LEAF_NODE	195:23	195:23	4	;
JUMP_STATEMENT	197:1	197:9	3	return 1 ;
KEYWORD	197:1	197:1	4	return
LEAF_NODE	197:1	197:1	5	return
DESTINATION	197:8	197:8	4	1
EXPR	197:8	197:8	5	1
FIELD	197:8	197:8	6	1
LEAF_NODE	197:8	197:8	7	1
LEAF_NODE	197:9	197:9	4	;
LEAF_NODE	198:0	198:0	2	}
FUNCTION_DEF	200:0	220:0	1	
RETURN_TYPE	200:0	200:0	2	int
TYPE_NAME	200:0	200:0	3	int
LEAF_NODE	200:0	200:0	4	int
FUNCTION_NAME	200:4	200:4	2	TIFFInitJBIG
LEAF_NODE	200:4	200:4	3	TIFFInitJBIG
PARAMETER_LIST	200:16	200:38	2	( TIFF * tif , int scheme )
LEAF_NODE	200:16	200:16	3	(
PARAMETER_DECL	200:17	200:23	3	TIFF * tif
TYPE	200:17	200:21	4	TIFF *
TYPE_NAME	200:17	200:17	5	TIFF
LEAF_NODE	200:17	200:17	6	TIFF
POINTER	200:21	200:21	5	*
LEAF_NODE	200:21	200:21	6	*
NAME	200:23	200:23	4	tif
LEAF_NODE	200:23	200:23	5	tif
LEAF_NODE	200:26	200:26	3	,
PARAMETER_DECL	200:28	200:32	3	int scheme
TYPE	200:28	200:28	4	int
TYPE_NAME	200:28	200:28	5	int
LEAF_NODE	200:28	200:28	6	int
NAME	200:32	200:32	4	scheme
LEAF_NODE	200:32	200:32	5	scheme
LEAF_NODE	200:38	200:38	3	)
LEAF_NODE	201:0	201:0	2	{
STATEMENTS	202:1	219:1	2	
EXPR_STATEMENT	202:1	202:35	3	assert ( scheme == COMPRESSION_JBIG ) ;
EXPR	202:1	202:1	4	assert ( scheme == COMPRESSION_JBIG )
FUNCTION_CALL	202:1	202:34	5	assert ( scheme == COMPRESSION_JBIG )
CALLEE	202:1	202:1	6	assert
LEAF_NODE	202:1	202:1	7	assert
LEAF_NODE	202:7	202:7	6	(
ARGUMENT	202:8	202:18	6	scheme == COMPRESSION_JBIG
FIELD	202:8	202:8	7	scheme
LEAF_NODE	202:8	202:8	8	scheme
EQ_OPERATOR	202:15	202:15	7	==
LEAF_NODE	202:15	202:15	8	==
FIELD	202:18	202:18	7	COMPRESSION_JBIG
LEAF_NODE	202:18	202:18	8	COMPRESSION_JBIG
LEAF_NODE	202:34	202:34	6	)
LEAF_NODE	202:35	202:35	4	;
EXPR_STATEMENT	209:1	209:32	3	tif -> tif_flags |= TIFF_NOBITREV ;
EXPR	209:1	209:1	4	tif -> tif_flags |= TIFF_NOBITREV
ASSIGN	209:1	209:19	5	tif -> tif_flags |= TIFF_NOBITREV
LVAL	209:1	209:1	6	tif -> tif_flags
FIELD	209:1	209:6	7	tif -> tif_flags
LEAF_NODE	209:1	209:1	8	tif
LEAF_NODE	209:4	209:4	8	->
LEAF_NODE	209:6	209:6	8	tif_flags
ASSIGN_OP	209:16	209:16	6	|=
LEAF_NODE	209:16	209:16	7	|=
RVAL	209:19	209:19	6	TIFF_NOBITREV
FIELD	209:19	209:19	7	TIFF_NOBITREV
LEAF_NODE	209:19	209:19	8	TIFF_NOBITREV
LEAF_NODE	209:32	209:32	4	;
EXPR_STATEMENT	210:1	210:31	3	tif -> tif_flags &= ~TIFF_MAPPED ;
EXPR	210:1	210:1	4	tif -> tif_flags &= ~TIFF_MAPPED
ASSIGN	210:1	210:19	5	tif -> tif_flags &= ~TIFF_MAPPED
LVAL	210:1	210:1	6	tif -> tif_flags
FIELD	210:1	210:6	7	tif -> tif_flags
LEAF_NODE	210:1	210:1	8	tif
LEAF_NODE	210:4	210:4	8	->
LEAF_NODE	210:6	210:6	8	tif_flags
ASSIGN_OP	210:16	210:16	6	&=
LEAF_NODE	210:16	210:16	7	&=
RVAL	210:19	210:19	6	~TIFF_MAPPED
FIELD	210:19	210:19	7	~TIFF_MAPPED
LEAF_NODE	210:19	210:19	8	~TIFF_MAPPED
LEAF_NODE	210:31	210:31	4	;
EXPR_STATEMENT	213:1	213:39	3	tif -> tif_setupdecode = JBIGSetupDecode ;
EXPR	213:1	213:1	4	tif -> tif_setupdecode = JBIGSetupDecode
ASSIGN	213:1	213:24	5	tif -> tif_setupdecode = JBIGSetupDecode
LVAL	213:1	213:1	6	tif -> tif_setupdecode
FIELD	213:1	213:6	7	tif -> tif_setupdecode
LEAF_NODE	213:1	213:1	8	tif
LEAF_NODE	213:4	213:4	8	->
LEAF_NODE	213:6	213:6	8	tif_setupdecode
ASSIGN_OP	213:22	213:22	6	=
LEAF_NODE	213:22	213:22	7	=
RVAL	213:24	213:24	6	JBIGSetupDecode
FIELD	213:24	213:24	7	JBIGSetupDecode
LEAF_NODE	213:24	213:24	8	JBIGSetupDecode
LEAF_NODE	213:39	213:39	4	;
EXPR_STATEMENT	214:1	214:34	3	tif -> tif_decodestrip = JBIGDecode ;
EXPR	214:1	214:1	4	tif -> tif_decodestrip = JBIGDecode
ASSIGN	214:1	214:24	5	tif -> tif_decodestrip = JBIGDecode
LVAL	214:1	214:1	6	tif -> tif_decodestrip
FIELD	214:1	214:6	7	tif -> tif_decodestrip
LEAF_NODE	214:1	214:1	8	tif
LEAF_NODE	214:4	214:4	8	->
LEAF_NODE	214:6	214:6	8	tif_decodestrip
ASSIGN_OP	214:22	214:22	6	=
LEAF_NODE	214:22	214:22	7	=
RVAL	214:24	214:24	6	JBIGDecode
FIELD	214:24	214:24	7	JBIGDecode
LEAF_NODE	214:24	214:24	8	JBIGDecode
LEAF_NODE	214:34	214:34	4	;
EXPR_STATEMENT	216:1	216:39	3	tif -> tif_setupencode = JBIGSetupEncode ;
EXPR	216:1	216:1	4	tif -> tif_setupencode = JBIGSetupEncode
ASSIGN	216:1	216:24	5	tif -> tif_setupencode = JBIGSetupEncode
LVAL	216:1	216:1	6	tif -> tif_setupencode
FIELD	216:1	216:6	7	tif -> tif_setupencode
LEAF_NODE	216:1	216:1	8	tif
LEAF_NODE	216:4	216:4	8	->
LEAF_NODE	216:6	216:6	8	tif_setupencode
ASSIGN_OP	216:22	216:22	6	=
LEAF_NODE	216:22	216:22	7	=
RVAL	216:24	216:24	6	JBIGSetupEncode
FIELD	216:24	216:24	7	JBIGSetupEncode
LEAF_NODE	216:24	216:24	8	JBIGSetupEncode
LEAF_NODE	216:39	216:39	4	;
EXPR_STATEMENT	217:1	217:34	3	tif -> tif_encodestrip = JBIGEncode ;
EXPR	217:1	217:1	4	tif -> tif_encodestrip = JBIGEncode
ASSIGN	217:1	217:24	5	tif -> tif_encodestrip = JBIGEncode
LVAL	217:1	217:1	6	tif -> tif_encodestrip
FIELD	217:1	217:6	7	tif -> tif_encodestrip
LEAF_NODE	217:1	217:1	8	tif
LEAF_NODE	217:4	217:4	8	->
LEAF_NODE	217:6	217:6	8	tif_encodestrip
ASSIGN_OP	217:22	217:22	6	=
LEAF_NODE	217:22	217:22	7	=
RVAL	217:24	217:24	6	JBIGEncode
FIELD	217:24	217:24	7	JBIGEncode
LEAF_NODE	217:24	217:24	8	JBIGEncode
LEAF_NODE	217:34	217:34	4	;
JUMP_STATEMENT	219:1	219:9	3	return 1 ;
KEYWORD	219:1	219:1	4	return
LEAF_NODE	219:1	219:1	5	return
DESTINATION	219:8	219:8	4	1
EXPR	219:8	219:8	5	1
FIELD	219:8	219:8	6	1
LEAF_NODE	219:8	219:8	7	1
LEAF_NODE	219:9	219:9	4	;
LEAF_NODE	220:0	220:0	2	}
