SOURCE_FILE	68:7	1824:0	0	
SIMPLE_DECL	68:7	68:24	1	int outtiled ; outtiled = - 1 ;
VAR_DECL	68:7	68:11	2	int outtiled ; outtiled = - 1
TYPE	68:7	68:7	3	int
TYPE_NAME	68:7	68:7	4	int
LEAF_NODE	68:7	68:7	5	int
NAME	68:11	68:11	3	outtiled
LEAF_NODE	68:11	68:11	4	outtiled
LEAF_NODE	0:0	0:0	3	;
INIT	68:11	68:11	3	outtiled = - 1
ASSIGN	68:11	68:22	4	outtiled = - 1
LVAL	68:11	68:11	5	outtiled
NAME	68:11	68:11	6	outtiled
LEAF_NODE	68:11	68:11	7	outtiled
ASSIGN_OP	68:20	68:20	5	=
LEAF_NODE	68:20	68:20	6	=
RVAL	68:22	68:22	5	- 1
UNARY_EXPR	68:22	68:23	6	- 1
UNARY_OPERATOR	68:22	68:22	7	-
LEAF_NODE	68:22	68:22	8	-
FIELD	68:23	68:23	7	1
LEAF_NODE	68:23	68:23	8	1
LEAF_NODE	68:24	68:24	2	;
SIMPLE_DECL	69:7	69:23	1	uint32 tilewidth ;
VAR_DECL	69:7	69:14	2	uint32 tilewidth
TYPE	69:7	69:7	3	uint32
TYPE_NAME	69:7	69:7	4	uint32
LEAF_NODE	69:7	69:7	5	uint32
NAME	69:14	69:14	3	tilewidth
LEAF_NODE	69:14	69:14	4	tilewidth
LEAF_NODE	69:23	69:23	2	;
SIMPLE_DECL	70:7	70:24	1	uint32 tilelength ;
VAR_DECL	70:7	70:14	2	uint32 tilelength
TYPE	70:7	70:7	3	uint32
TYPE_NAME	70:7	70:7	4	uint32
LEAF_NODE	70:7	70:7	5	uint32
NAME	70:14	70:14	3	tilelength
LEAF_NODE	70:14	70:14	4	tilelength
LEAF_NODE	70:24	70:24	2	;
SIMPLE_DECL	72:7	72:20	1	uint16 config ;
VAR_DECL	72:7	72:14	2	uint16 config
TYPE	72:7	72:7	3	uint16
TYPE_NAME	72:7	72:7	4	uint16
LEAF_NODE	72:7	72:7	5	uint16
NAME	72:14	72:14	3	config
LEAF_NODE	72:14	72:14	4	config
LEAF_NODE	72:20	72:20	2	;
SIMPLE_DECL	73:7	73:25	1	uint16 compression ;
VAR_DECL	73:7	73:14	2	uint16 compression
TYPE	73:7	73:7	3	uint16
TYPE_NAME	73:7	73:7	4	uint16
LEAF_NODE	73:7	73:7	5	uint16
NAME	73:14	73:14	3	compression
LEAF_NODE	73:14	73:14	4	compression
LEAF_NODE	73:25	73:25	2	;
SIMPLE_DECL	74:7	74:23	1	uint16 predictor ;
VAR_DECL	74:7	74:14	2	uint16 predictor
TYPE	74:7	74:7	3	uint16
TYPE_NAME	74:7	74:7	4	uint16
LEAF_NODE	74:7	74:7	5	uint16
NAME	74:14	74:14	3	predictor
LEAF_NODE	74:14	74:14	4	predictor
LEAF_NODE	74:23	74:23	2	;
SIMPLE_DECL	75:7	75:17	1	int preset ;
VAR_DECL	75:7	75:11	2	int preset
TYPE	75:7	75:7	3	int
TYPE_NAME	75:7	75:7	4	int
LEAF_NODE	75:7	75:7	5	int
NAME	75:11	75:11	3	preset
LEAF_NODE	75:11	75:11	4	preset
LEAF_NODE	75:17	75:17	2	;
SIMPLE_DECL	76:7	76:23	1	uint16 fillorder ;
VAR_DECL	76:7	76:14	2	uint16 fillorder
TYPE	76:7	76:7	3	uint16
TYPE_NAME	76:7	76:7	4	uint16
LEAF_NODE	76:7	76:7	5	uint16
NAME	76:14	76:14	3	fillorder
LEAF_NODE	76:14	76:14	4	fillorder
LEAF_NODE	76:23	76:23	2	;
SIMPLE_DECL	77:7	77:25	1	uint16 orientation ;
VAR_DECL	77:7	77:14	2	uint16 orientation
TYPE	77:7	77:7	3	uint16
TYPE_NAME	77:7	77:7	4	uint16
LEAF_NODE	77:7	77:7	5	uint16
NAME	77:14	77:14	3	orientation
LEAF_NODE	77:14	77:14	4	orientation
LEAF_NODE	77:25	77:25	2	;
SIMPLE_DECL	78:7	78:26	1	uint32 rowsperstrip ;
VAR_DECL	78:7	78:14	2	uint32 rowsperstrip
TYPE	78:7	78:7	3	uint32
TYPE_NAME	78:7	78:7	4	uint32
LEAF_NODE	78:7	78:7	5	uint32
NAME	78:14	78:14	3	rowsperstrip
LEAF_NODE	78:14	78:14	4	rowsperstrip
LEAF_NODE	78:26	78:26	2	;
SIMPLE_DECL	79:7	79:20	1	uint32 g3opts ;
VAR_DECL	79:7	79:14	2	uint32 g3opts
TYPE	79:7	79:7	3	uint32
TYPE_NAME	79:7	79:7	4	uint32
LEAF_NODE	79:7	79:7	5	uint32
NAME	79:14	79:14	3	g3opts
LEAF_NODE	79:14	79:14	4	g3opts
LEAF_NODE	79:20	79:20	2	;
SIMPLE_DECL	80:7	80:25	1	int ignore ; ignore = FALSE ;
VAR_DECL	80:7	80:11	2	int ignore ; ignore = FALSE
TYPE	80:7	80:7	3	int
TYPE_NAME	80:7	80:7	4	int
LEAF_NODE	80:7	80:7	5	int
NAME	80:11	80:11	3	ignore
LEAF_NODE	80:11	80:11	4	ignore
LEAF_NODE	0:0	0:0	3	;
INIT	80:11	80:11	3	ignore = FALSE
ASSIGN	80:11	80:20	4	ignore = FALSE
LVAL	80:11	80:11	5	ignore
NAME	80:11	80:11	6	ignore
LEAF_NODE	80:11	80:11	7	ignore
ASSIGN_OP	80:18	80:18	5	=
LEAF_NODE	80:18	80:18	6	=
RVAL	80:20	80:20	5	FALSE
FIELD	80:20	80:20	6	FALSE
LEAF_NODE	80:20	80:20	7	FALSE
LEAF_NODE	80:25	80:25	2	;
SIMPLE_DECL	81:7	81:37	1	uint32 defg3opts ; defg3opts = ( uint32 ) - 1 ;
VAR_DECL	81:7	81:14	2	uint32 defg3opts ; defg3opts = ( uint32 ) - 1
TYPE	81:7	81:7	3	uint32
TYPE_NAME	81:7	81:7	4	uint32
LEAF_NODE	81:7	81:7	5	uint32
NAME	81:14	81:14	3	defg3opts
LEAF_NODE	81:14	81:14	4	defg3opts
LEAF_NODE	0:0	0:0	3	;
INIT	81:14	81:14	3	defg3opts = ( uint32 ) - 1
ASSIGN	81:14	81:26	4	defg3opts = ( uint32 ) - 1
LVAL	81:14	81:14	5	defg3opts
NAME	81:14	81:14	6	defg3opts
LEAF_NODE	81:14	81:14	7	defg3opts
ASSIGN_OP	81:24	81:24	5	=
LEAF_NODE	81:24	81:24	6	=
RVAL	81:26	81:35	5	( uint32 ) - 1
LEAF_NODE	81:26	81:26	6	(
TYPE_NAME	81:27	81:27	6	uint32
LEAF_NODE	81:27	81:27	7	uint32
LEAF_NODE	81:33	81:33	6	)
UNARY_EXPR	81:35	81:36	6	- 1
UNARY_OPERATOR	81:35	81:35	7	-
LEAF_NODE	81:35	81:35	8	-
FIELD	81:36	81:36	7	1
LEAF_NODE	81:36	81:36	8	1
LEAF_NODE	81:37	81:37	2	;
SIMPLE_DECL	82:7	82:23	1	int quality ; quality = 75 ;
VAR_DECL	82:7	82:11	2	int quality ; quality = 75
TYPE	82:7	82:7	3	int
TYPE_NAME	82:7	82:7	4	int
LEAF_NODE	82:7	82:7	5	int
NAME	82:11	82:11	3	quality
LEAF_NODE	82:11	82:11	4	quality
LEAF_NODE	0:0	0:0	3	;
INIT	82:11	82:11	3	quality = 75
ASSIGN	82:11	82:21	4	quality = 75
LVAL	82:11	82:11	5	quality
NAME	82:11	82:11	6	quality
LEAF_NODE	82:11	82:11	7	quality
ASSIGN_OP	82:19	82:19	5	=
LEAF_NODE	82:19	82:19	6	=
RVAL	82:21	82:21	5	75
FIELD	82:21	82:21	6	75
LEAF_NODE	82:21	82:21	7	75
LEAF_NODE	82:23	82:23	2	;
SIMPLE_DECL	83:7	83:44	1	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB ;
VAR_DECL	83:7	83:11	2	int jpegcolormode ; jpegcolormode = JPEGCOLORMODE_RGB
TYPE	83:7	83:7	3	int
TYPE_NAME	83:7	83:7	4	int
LEAF_NODE	83:7	83:7	5	int
NAME	83:11	83:11	3	jpegcolormode
LEAF_NODE	83:11	83:11	4	jpegcolormode
LEAF_NODE	0:0	0:0	3	;
INIT	83:11	83:11	3	jpegcolormode = JPEGCOLORMODE_RGB
ASSIGN	83:11	83:27	4	jpegcolormode = JPEGCOLORMODE_RGB
LVAL	83:11	83:11	5	jpegcolormode
NAME	83:11	83:11	6	jpegcolormode
LEAF_NODE	83:11	83:11	7	jpegcolormode
ASSIGN_OP	83:25	83:25	5	=
LEAF_NODE	83:25	83:25	6	=
RVAL	83:27	83:27	5	JPEGCOLORMODE_RGB
FIELD	83:27	83:27	6	JPEGCOLORMODE_RGB
LEAF_NODE	83:27	83:27	7	JPEGCOLORMODE_RGB
LEAF_NODE	83:44	83:44	2	;
SIMPLE_DECL	84:7	84:42	1	uint16 defcompression ; defcompression = ( uint16 ) - 1 ;
VAR_DECL	84:7	84:14	2	uint16 defcompression ; defcompression = ( uint16 ) - 1
TYPE	84:7	84:7	3	uint16
TYPE_NAME	84:7	84:7	4	uint16
LEAF_NODE	84:7	84:7	5	uint16
NAME	84:14	84:14	3	defcompression
LEAF_NODE	84:14	84:14	4	defcompression
LEAF_NODE	0:0	0:0	3	;
INIT	84:14	84:14	3	defcompression = ( uint16 ) - 1
ASSIGN	84:14	84:31	4	defcompression = ( uint16 ) - 1
LVAL	84:14	84:14	5	defcompression
NAME	84:14	84:14	6	defcompression
LEAF_NODE	84:14	84:14	7	defcompression
ASSIGN_OP	84:29	84:29	5	=
LEAF_NODE	84:29	84:29	6	=
RVAL	84:31	84:40	5	( uint16 ) - 1
LEAF_NODE	84:31	84:31	6	(
TYPE_NAME	84:32	84:32	6	uint16
LEAF_NODE	84:32	84:32	7	uint16
LEAF_NODE	84:38	84:38	6	)
UNARY_EXPR	84:40	84:41	6	- 1
UNARY_OPERATOR	84:40	84:40	7	-
LEAF_NODE	84:40	84:40	8	-
FIELD	84:41	84:41	7	1
LEAF_NODE	84:41	84:41	8	1
LEAF_NODE	84:42	84:42	2	;
SIMPLE_DECL	85:7	85:40	1	uint16 defpredictor ; defpredictor = ( uint16 ) - 1 ;
VAR_DECL	85:7	85:14	2	uint16 defpredictor ; defpredictor = ( uint16 ) - 1
TYPE	85:7	85:7	3	uint16
TYPE_NAME	85:7	85:7	4	uint16
LEAF_NODE	85:7	85:7	5	uint16
NAME	85:14	85:14	3	defpredictor
LEAF_NODE	85:14	85:14	4	defpredictor
LEAF_NODE	0:0	0:0	3	;
INIT	85:14	85:14	3	defpredictor = ( uint16 ) - 1
ASSIGN	85:14	85:29	4	defpredictor = ( uint16 ) - 1
LVAL	85:14	85:14	5	defpredictor
NAME	85:14	85:14	6	defpredictor
LEAF_NODE	85:14	85:14	7	defpredictor
ASSIGN_OP	85:27	85:27	5	=
LEAF_NODE	85:27	85:27	6	=
RVAL	85:29	85:38	5	( uint16 ) - 1
LEAF_NODE	85:29	85:29	6	(
TYPE_NAME	85:30	85:30	6	uint16
LEAF_NODE	85:30	85:30	7	uint16
LEAF_NODE	85:36	85:36	6	)
UNARY_EXPR	85:38	85:39	6	- 1
UNARY_OPERATOR	85:38	85:38	7	-
LEAF_NODE	85:38	85:38	8	-
FIELD	85:39	85:39	7	1
LEAF_NODE	85:39	85:39	8	1
LEAF_NODE	85:40	85:40	2	;
SIMPLE_DECL	86:7	86:26	1	int defpreset ; defpreset = - 1 ;
VAR_DECL	86:7	86:11	2	int defpreset ; defpreset = - 1
TYPE	86:7	86:7	3	int
TYPE_NAME	86:7	86:7	4	int
LEAF_NODE	86:7	86:7	5	int
NAME	86:11	86:11	3	defpreset
LEAF_NODE	86:11	86:11	4	defpreset
LEAF_NODE	0:0	0:0	3	;
INIT	86:11	86:11	3	defpreset = - 1
ASSIGN	86:11	86:24	4	defpreset = - 1
LVAL	86:11	86:11	5	defpreset
NAME	86:11	86:11	6	defpreset
LEAF_NODE	86:11	86:11	7	defpreset
ASSIGN_OP	86:21	86:21	5	=
LEAF_NODE	86:21	86:21	6	=
RVAL	86:24	86:24	5	- 1
UNARY_EXPR	86:24	86:25	6	- 1
UNARY_OPERATOR	86:24	86:24	7	-
LEAF_NODE	86:24	86:24	8	-
FIELD	86:25	86:25	7	1
LEAF_NODE	86:25	86:25	8	1
LEAF_NODE	86:26	86:26	2	;
SIMPLE_DECL	90:7	90:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	90:7	90:12	2	void usage ; usage usage ( void )
TYPE	90:7	90:7	3	void
TYPE_NAME	90:7	90:7	4	void
LEAF_NODE	90:7	90:7	5	void
NAME	90:12	90:12	3	usage
LEAF_NODE	90:12	90:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	90:12	90:12	3	usage usage ( void )
ASSIGN	90:12	90:17	4	usage usage ( void )
LVAL	90:12	90:12	5	usage
NAME	90:12	90:12	6	usage
LEAF_NODE	90:12	90:12	7	usage
ASSIGN_OP	90:12	90:12	5	usage
NAME	90:12	90:12	6	usage
LEAF_NODE	90:12	90:12	7	usage
RVAL	90:17	90:22	5	( void )
LEAF_NODE	90:17	90:17	6	(
EXPR	90:18	90:18	6	void
FIELD	90:18	90:18	7	void
LEAF_NODE	90:18	90:18	8	void
LEAF_NODE	90:22	90:22	6	)
LEAF_NODE	90:23	90:23	2	;
SIMPLE_DECL	92:7	92:23	1	char comma ; comma = ',' ;
VAR_DECL	92:7	92:12	2	char comma ; comma = ','
TYPE	92:7	92:7	3	char
TYPE_NAME	92:7	92:7	4	char
LEAF_NODE	92:7	92:7	5	char
NAME	92:12	92:12	3	comma
LEAF_NODE	92:12	92:12	4	comma
LEAF_NODE	0:0	0:0	3	;
INIT	92:12	92:12	3	comma = ','
ASSIGN	92:12	92:20	4	comma = ','
LVAL	92:12	92:12	5	comma
NAME	92:12	92:12	6	comma
LEAF_NODE	92:12	92:12	7	comma
ASSIGN_OP	92:18	92:18	5	=
LEAF_NODE	92:18	92:18	6	=
RVAL	92:20	92:20	5	','
FIELD	92:20	92:20	6	','
LEAF_NODE	92:20	92:20	7	','
LEAF_NODE	92:23	92:23	2	;
SIMPLE_DECL	93:7	93:24	1	TIFF * bias ; bias = NULL ;
VAR_DECL	93:7	93:13	2	TIFF * bias ; bias = NULL
TYPE	93:7	93:11	3	TIFF *
TYPE_NAME	93:7	93:7	4	TIFF
LEAF_NODE	93:7	93:7	5	TIFF
POINTER	93:11	93:11	4	*
LEAF_NODE	93:11	93:11	5	*
NAME	93:13	93:13	3	bias
LEAF_NODE	93:13	93:13	4	bias
LEAF_NODE	0:0	0:0	3	;
INIT	93:13	93:13	3	bias = NULL
ASSIGN	93:13	93:20	4	bias = NULL
LVAL	93:13	93:13	5	bias
NAME	93:13	93:13	6	bias
LEAF_NODE	93:13	93:13	7	bias
ASSIGN_OP	93:18	93:18	5	=
LEAF_NODE	93:18	93:18	6	=
RVAL	93:20	93:20	5	NULL
FIELD	93:20	93:20	6	NULL
LEAF_NODE	93:20	93:20	7	NULL
LEAF_NODE	93:24	93:24	2	;
SIMPLE_DECL	94:7	94:22	1	int pageNum ; pageNum = 0 ;
VAR_DECL	94:7	94:11	2	int pageNum ; pageNum = 0
TYPE	94:7	94:7	3	int
TYPE_NAME	94:7	94:7	4	int
LEAF_NODE	94:7	94:7	5	int
NAME	94:11	94:11	3	pageNum
LEAF_NODE	94:11	94:11	4	pageNum
LEAF_NODE	0:0	0:0	3	;
INIT	94:11	94:11	3	pageNum = 0
ASSIGN	94:11	94:21	4	pageNum = 0
LVAL	94:11	94:11	5	pageNum
NAME	94:11	94:11	6	pageNum
LEAF_NODE	94:11	94:11	7	pageNum
ASSIGN_OP	94:19	94:19	5	=
LEAF_NODE	94:19	94:19	6	=
RVAL	94:21	94:21	5	0
FIELD	94:21	94:21	6	0
LEAF_NODE	94:21	94:21	7	0
LEAF_NODE	94:22	94:22	2	;
SIMPLE_DECL	95:7	95:24	1	int pageInSeq ; pageInSeq = 0 ;
VAR_DECL	95:7	95:11	2	int pageInSeq ; pageInSeq = 0
TYPE	95:7	95:7	3	int
TYPE_NAME	95:7	95:7	4	int
LEAF_NODE	95:7	95:7	5	int
NAME	95:11	95:11	3	pageInSeq
LEAF_NODE	95:11	95:11	4	pageInSeq
LEAF_NODE	0:0	0:0	3	;
INIT	95:11	95:11	3	pageInSeq = 0
ASSIGN	95:11	95:23	4	pageInSeq = 0
LVAL	95:11	95:11	5	pageInSeq
NAME	95:11	95:11	6	pageInSeq
LEAF_NODE	95:11	95:11	7	pageInSeq
ASSIGN_OP	95:21	95:21	5	=
LEAF_NODE	95:21	95:21	6	=
RVAL	95:23	95:23	5	0
FIELD	95:23	95:23	6	0
LEAF_NODE	95:23	95:23	7	0
LEAF_NODE	95:24	95:24	2	;
FUNCTION_DEF	97:0	125:0	1	
RETURN_TYPE	97:0	97:7	2	static int
LEAF_NODE	97:0	97:0	3	static
TYPE_NAME	97:7	97:7	3	int
LEAF_NODE	97:7	97:7	4	int
FUNCTION_NAME	97:11	97:11	2	nextSrcImage
LEAF_NODE	97:11	97:11	3	nextSrcImage
PARAMETER_LIST	97:24	97:52	2	( TIFF * tif , char * * imageSpec )
LEAF_NODE	97:24	97:24	3	(
PARAMETER_DECL	97:25	97:31	3	TIFF * tif
TYPE	97:25	97:30	4	TIFF *
TYPE_NAME	97:25	97:25	5	TIFF
LEAF_NODE	97:25	97:25	6	TIFF
POINTER	97:30	97:30	5	*
LEAF_NODE	97:30	97:30	6	*
NAME	97:31	97:31	4	tif
LEAF_NODE	97:31	97:31	5	tif
LEAF_NODE	97:34	97:34	3	,
PARAMETER_DECL	97:36	97:43	3	char * * imageSpec
TYPE	97:36	97:41	4	char * *
TYPE_NAME	97:36	97:36	5	char
LEAF_NODE	97:36	97:36	6	char
POINTER	97:41	97:42	5	* *
LEAF_NODE	97:41	97:41	6	*
LEAF_NODE	97:42	97:42	6	*
NAME	97:43	97:43	4	imageSpec
LEAF_NODE	97:43	97:43	5	imageSpec
LEAF_NODE	97:52	97:52	3	)
LEAF_NODE	103:0	103:0	2	{
STATEMENTS	104:1	124:1	2	
SELECTION	104:1	104:27	3	
KEYWORD	104:1	104:1	4	if
LEAF_NODE	104:1	104:1	5	if
LEAF_NODE	104:4	104:4	4	(
CONDITION	104:5	104:5	4	* * imageSpec == comma
EXPR	104:5	104:20	5	* * imageSpec == comma
UNARY_EXPR	104:5	104:7	6	* * imageSpec
UNARY_OPERATOR	104:5	104:5	7	*
LEAF_NODE	104:5	104:5	8	*
UNARY_OPERATOR	104:6	104:6	7	*
LEAF_NODE	104:6	104:6	8	*
FIELD	104:7	104:7	7	imageSpec
LEAF_NODE	104:7	104:7	8	imageSpec
EQ_OPERATOR	104:17	104:17	6	==
LEAF_NODE	104:17	104:17	7	==
FIELD	104:20	104:20	6	comma
LEAF_NODE	104:20	104:20	7	comma
LEAF_NODE	104:25	104:25	4	)
STATEMENTS	104:27	123:1	4	
LEAF_NODE	104:27	104:27	5	{
STATEMENTS	105:2	121:2	5	
SIMPLE_DECL	105:2	105:30	6	char * start ; start = * imageSpec + 1 ;
VAR_DECL	105:2	105:8	7	char * start ; start = * imageSpec + 1
TYPE	105:2	105:7	8	char *
TYPE_NAME	105:2	105:2	9	char
LEAF_NODE	105:2	105:2	10	char
POINTER	105:7	105:7	9	*
LEAF_NODE	105:7	105:7	10	*
NAME	105:8	105:8	8	start
LEAF_NODE	105:8	105:8	9	start
LEAF_NODE	0:0	0:0	8	;
INIT	105:8	105:8	8	start = * imageSpec + 1
ASSIGN	105:8	105:16	9	start = * imageSpec + 1
LVAL	105:8	105:8	10	start
NAME	105:8	105:8	11	start
LEAF_NODE	105:8	105:8	12	start
ASSIGN_OP	105:14	105:14	10	=
LEAF_NODE	105:14	105:14	11	=
RVAL	105:16	105:29	10	* imageSpec + 1
UNARY_EXPR	105:16	105:17	11	* imageSpec
UNARY_OPERATOR	105:16	105:16	12	*
LEAF_NODE	105:16	105:16	13	*
FIELD	105:17	105:17	12	imageSpec
LEAF_NODE	105:17	105:17	13	imageSpec
LEAF_NODE	105:27	105:27	11	+
FIELD	105:29	105:29	11	1
LEAF_NODE	105:29	105:29	12	1
LEAF_NODE	105:30	105:30	7	;
SIMPLE_DECL	106:2	106:56	6	tdir_t nextImage ; nextImage = ( tdir_t ) strtol ( start , imageSpec , 0 ) ;
VAR_DECL	106:2	106:9	7	tdir_t nextImage ; nextImage = ( tdir_t ) strtol ( start , imageSpec , 0 )
TYPE	106:2	106:2	8	tdir_t
TYPE_NAME	106:2	106:2	9	tdir_t
LEAF_NODE	106:2	106:2	10	tdir_t
NAME	106:9	106:9	8	nextImage
LEAF_NODE	106:9	106:9	9	nextImage
LEAF_NODE	0:0	0:0	8	;
INIT	106:9	106:9	8	nextImage = ( tdir_t ) strtol ( start , imageSpec , 0 )
ASSIGN	106:9	106:21	9	nextImage = ( tdir_t ) strtol ( start , imageSpec , 0 )
LVAL	106:9	106:9	10	nextImage
NAME	106:9	106:9	11	nextImage
LEAF_NODE	106:9	106:9	12	nextImage
ASSIGN_OP	106:19	106:19	10	=
LEAF_NODE	106:19	106:19	11	=
RVAL	106:21	106:29	10	( tdir_t ) strtol ( start , imageSpec , 0 )
LEAF_NODE	106:21	106:21	11	(
TYPE_NAME	106:22	106:22	11	tdir_t
LEAF_NODE	106:22	106:22	12	tdir_t
LEAF_NODE	106:28	106:28	11	)
FUNCTION_CALL	106:29	106:55	11	strtol ( start , imageSpec , 0 )
CALLEE	106:29	106:29	12	strtol
LEAF_NODE	106:29	106:29	13	strtol
LEAF_NODE	106:35	106:35	12	(
ARGUMENT	106:36	106:36	12	start
FIELD	106:36	106:36	13	start
LEAF_NODE	106:36	106:36	14	start
LEAF_NODE	106:41	106:41	12	,
ARGUMENT	106:43	106:43	12	imageSpec
FIELD	106:43	106:43	13	imageSpec
LEAF_NODE	106:43	106:43	14	imageSpec
LEAF_NODE	106:52	106:52	12	,
ARGUMENT	106:54	106:54	12	0
FIELD	106:54	106:54	13	0
LEAF_NODE	106:54	106:54	14	0
LEAF_NODE	106:55	106:55	12	)
LEAF_NODE	106:56	106:56	7	;
SELECTION	107:2	107:27	6	
KEYWORD	107:2	107:2	7	if
LEAF_NODE	107:2	107:2	8	if
LEAF_NODE	107:5	107:5	7	(
CONDITION	107:6	107:6	7	start == * imageSpec
EXPR	107:6	107:15	8	start == * imageSpec
FIELD	107:6	107:6	9	start
LEAF_NODE	107:6	107:6	10	start
EQ_OPERATOR	107:12	107:12	9	==
LEAF_NODE	107:12	107:12	10	==
UNARY_EXPR	107:15	107:16	9	* imageSpec
UNARY_OPERATOR	107:15	107:15	10	*
LEAF_NODE	107:15	107:15	11	*
FIELD	107:16	107:16	10	imageSpec
LEAF_NODE	107:16	107:16	11	imageSpec
LEAF_NODE	107:25	107:25	7	)
STATEMENTS	107:27	107:27	7	
EXPR_STATEMENT	107:27	107:65	8	nextImage = TIFFCurrentDirectory ( tif ) ;
EXPR	107:27	107:27	9	nextImage = TIFFCurrentDirectory ( tif )
ASSIGN	107:27	107:39	10	nextImage = TIFFCurrentDirectory ( tif )
LVAL	107:27	107:27	11	nextImage
FIELD	107:27	107:27	12	nextImage
LEAF_NODE	107:27	107:27	13	nextImage
ASSIGN_OP	107:37	107:37	11	=
LEAF_NODE	107:37	107:37	12	=
RVAL	107:39	107:39	11	TIFFCurrentDirectory ( tif )
FUNCTION_CALL	107:39	107:64	12	TIFFCurrentDirectory ( tif )
CALLEE	107:39	107:39	13	TIFFCurrentDirectory
LEAF_NODE	107:39	107:39	14	TIFFCurrentDirectory
LEAF_NODE	107:60	107:60	13	(
ARGUMENT	107:61	107:61	13	tif
FIELD	107:61	107:61	14	tif
LEAF_NODE	107:61	107:61	15	tif
LEAF_NODE	107:64	107:64	13	)
LEAF_NODE	107:65	107:65	9	;
SELECTION	108:2	109:2	6	
KEYWORD	108:2	108:2	7	if
LEAF_NODE	108:2	108:2	8	if
LEAF_NODE	108:5	108:5	7	(
CONDITION	108:6	108:6	7	* * imageSpec
EXPR	108:6	108:6	8	* * imageSpec
UNARY_EXPR	108:6	108:8	9	* * imageSpec
UNARY_OPERATOR	108:6	108:6	10	*
LEAF_NODE	108:6	108:6	11	*
UNARY_OPERATOR	108:7	108:7	10	*
LEAF_NODE	108:7	108:7	11	*
FIELD	108:8	108:8	10	imageSpec
LEAF_NODE	108:8	108:8	11	imageSpec
LEAF_NODE	108:17	108:17	7	)
STATEMENTS	109:2	119:2	7	
LEAF_NODE	109:2	109:2	8	{
STATEMENTS	110:3	113:4	8	
SELECTION	110:3	110:29	9	
KEYWORD	110:3	110:3	10	if
LEAF_NODE	110:3	110:3	11	if
LEAF_NODE	110:6	110:6	10	(
CONDITION	110:7	110:7	10	* * imageSpec == comma
EXPR	110:7	110:22	11	* * imageSpec == comma
UNARY_EXPR	110:7	110:9	12	* * imageSpec
UNARY_OPERATOR	110:7	110:7	13	*
LEAF_NODE	110:7	110:7	14	*
UNARY_OPERATOR	110:8	110:8	13	*
LEAF_NODE	110:8	110:8	14	*
FIELD	110:9	110:9	13	imageSpec
LEAF_NODE	110:9	110:9	14	imageSpec
EQ_OPERATOR	110:19	110:19	12	==
LEAF_NODE	110:19	110:19	13	==
FIELD	110:22	110:22	12	comma
LEAF_NODE	110:22	110:22	13	comma
LEAF_NODE	110:27	110:27	10	)
STATEMENTS	110:29	113:3	10	
LEAF_NODE	110:29	110:29	11	{
STATEMENTS	112:4	112:4	11	
SELECTION	112:4	112:33	12	
KEYWORD	112:4	112:4	13	if
LEAF_NODE	112:4	112:4	14	if
LEAF_NODE	112:7	112:7	13	(
CONDITION	112:8	112:8	13	( * imageSpec ) [ 1 ] == '\0'
EXPR	112:8	112:27	14	( * imageSpec ) [ 1 ] == '\0'
LEAF_NODE	112:8	112:8	15	(
UNARY_EXPR	112:9	112:10	15	* imageSpec
UNARY_OPERATOR	112:9	112:9	16	*
LEAF_NODE	112:9	112:9	17	*
FIELD	112:10	112:10	16	imageSpec
LEAF_NODE	112:10	112:10	17	imageSpec
LEAF_NODE	112:19	112:19	15	)
LEAF_NODE	112:20	112:20	15	[
EXPR	112:21	112:21	15	1
FIELD	112:21	112:21	16	1
LEAF_NODE	112:21	112:21	17	1
LEAF_NODE	112:22	112:22	15	]
EQ_OPERATOR	112:24	112:24	15	==
LEAF_NODE	112:24	112:24	16	==
FIELD	112:27	112:27	15	'\0'
LEAF_NODE	112:27	112:27	16	'\0'
LEAF_NODE	112:31	112:31	13	)
STATEMENTS	112:33	112:33	13	
EXPR_STATEMENT	112:33	112:50	14	* imageSpec = NULL ;
EXPR	112:33	112:33	15	* imageSpec = NULL
ASSIGN	112:33	112:46	16	* imageSpec = NULL
LVAL	112:33	112:33	17	* imageSpec
UNARY_EXPR	112:33	112:34	18	* imageSpec
UNARY_OPERATOR	112:33	112:33	19	*
LEAF_NODE	112:33	112:33	20	*
FIELD	112:34	112:34	19	imageSpec
LEAF_NODE	112:34	112:34	20	imageSpec
ASSIGN_OP	112:44	112:44	17	=
LEAF_NODE	112:44	112:44	18	=
RVAL	112:46	112:46	17	NULL
FIELD	112:46	112:46	18	NULL
LEAF_NODE	112:46	112:46	19	NULL
LEAF_NODE	112:50	112:50	15	;
LEAF_NODE	113:3	113:3	11	}
SELECTION	113:4	113:8	9	
KEYWORD	113:4	113:4	10	else
LEAF_NODE	113:4	113:4	11	else
STATEMENTS	113:8	118:3	10	
LEAF_NODE	113:8	113:8	11	{
STATEMENTS	114:4	117:4	11	
EXPR_STATEMENT	114:4	116:34	12	fprintf ( stderr , "Expected a %c separated image # list after %s\n" , comma , TIFFFileName ( tif ) ) ;
EXPR	114:4	114:4	13	fprintf ( stderr , "Expected a %c separated image # list after %s\n" , comma , TIFFFileName ( tif ) )
FUNCTION_CALL	114:4	116:33	14	fprintf ( stderr , "Expected a %c separated image # list after %s\n" , comma , TIFFFileName ( tif ) )
CALLEE	114:4	114:4	15	fprintf
LEAF_NODE	114:4	114:4	16	fprintf
LEAF_NODE	114:12	114:12	15	(
ARGUMENT	114:13	114:13	15	stderr
FIELD	114:13	114:13	16	stderr
LEAF_NODE	114:13	114:13	17	stderr
LEAF_NODE	114:19	114:19	15	,
ARGUMENT	115:8	115:8	15	"Expected a %c separated image # list after %s\n"
FIELD	115:8	115:8	16	"Expected a %c separated image # list after %s\n"
LEAF_NODE	115:8	115:8	17	"Expected a %c separated image # list after %s\n"
LEAF_NODE	115:57	115:57	15	,
ARGUMENT	116:8	116:8	15	comma
FIELD	116:8	116:8	16	comma
LEAF_NODE	116:8	116:8	17	comma
LEAF_NODE	116:13	116:13	15	,
ARGUMENT	116:15	116:15	15	TIFFFileName ( tif )
FUNCTION_CALL	116:15	116:32	16	TIFFFileName ( tif )
CALLEE	116:15	116:15	17	TIFFFileName
LEAF_NODE	116:15	116:15	18	TIFFFileName
LEAF_NODE	116:28	116:28	17	(
ARGUMENT	116:29	116:29	17	tif
FIELD	116:29	116:29	18	tif
LEAF_NODE	116:29	116:29	19	tif
LEAF_NODE	116:32	116:32	17	)
LEAF_NODE	116:33	116:33	15	)
LEAF_NODE	116:34	116:34	13	;
EXPR_STATEMENT	117:4	117:13	12	exit ( - 4 ) ;
EXPR	117:4	117:4	13	exit ( - 4 )
FUNCTION_CALL	117:4	117:12	14	exit ( - 4 )
CALLEE	117:4	117:4	15	exit
LEAF_NODE	117:4	117:4	16	exit
LEAF_NODE	117:9	117:9	15	(
ARGUMENT	117:10	117:10	15	- 4
UNARY_EXPR	117:10	117:11	16	- 4
UNARY_OPERATOR	117:10	117:10	17	-
LEAF_NODE	117:10	117:10	18	-
FIELD	117:11	117:11	17	4
LEAF_NODE	117:11	117:11	18	4
LEAF_NODE	117:12	117:12	15	)
LEAF_NODE	117:13	117:13	13	;
LEAF_NODE	118:3	118:3	11	}
LEAF_NODE	119:2	119:2	8	}
SELECTION	120:2	120:41	6	
KEYWORD	120:2	120:2	7	if
LEAF_NODE	120:2	120:2	8	if
LEAF_NODE	120:5	120:5	7	(
CONDITION	120:6	120:6	7	TIFFSetDirectory ( tif , nextImage )
EXPR	120:6	120:6	8	TIFFSetDirectory ( tif , nextImage )
FUNCTION_CALL	120:6	120:38	9	TIFFSetDirectory ( tif , nextImage )
CALLEE	120:6	120:6	10	TIFFSetDirectory
LEAF_NODE	120:6	120:6	11	TIFFSetDirectory
LEAF_NODE	120:23	120:23	10	(
ARGUMENT	120:24	120:24	10	tif
FIELD	120:24	120:24	11	tif
LEAF_NODE	120:24	120:24	12	tif
LEAF_NODE	120:27	120:27	10	,
ARGUMENT	120:29	120:29	10	nextImage
FIELD	120:29	120:29	11	nextImage
LEAF_NODE	120:29	120:29	12	nextImage
LEAF_NODE	120:38	120:38	10	)
LEAF_NODE	120:39	120:39	7	)
STATEMENTS	120:41	120:41	7	
JUMP_STATEMENT	120:41	120:49	8	return 1 ;
KEYWORD	120:41	120:41	9	return
LEAF_NODE	120:41	120:41	10	return
DESTINATION	120:48	120:48	9	1
EXPR	120:48	120:48	10	1
FIELD	120:48	120:48	11	1
LEAF_NODE	120:48	120:48	12	1
LEAF_NODE	120:49	120:49	9	;
EXPR_STATEMENT	121:2	122:48	6	fprintf ( stderr , "%s%c%d not found!\n" , TIFFFileName ( tif ) , comma , ( int ) nextImage ) ;
EXPR	121:2	121:2	7	fprintf ( stderr , "%s%c%d not found!\n" , TIFFFileName ( tif ) , comma , ( int ) nextImage )
FUNCTION_CALL	121:2	122:47	8	fprintf ( stderr , "%s%c%d not found!\n" , TIFFFileName ( tif ) , comma , ( int ) nextImage )
CALLEE	121:2	121:2	9	fprintf
LEAF_NODE	121:2	121:2	10	fprintf
LEAF_NODE	121:10	121:10	9	(
ARGUMENT	121:11	121:11	9	stderr
FIELD	121:11	121:11	10	stderr
LEAF_NODE	121:11	121:11	11	stderr
LEAF_NODE	121:17	121:17	9	,
ARGUMENT	121:19	121:19	9	"%s%c%d not found!\n"
FIELD	121:19	121:19	10	"%s%c%d not found!\n"
LEAF_NODE	121:19	121:19	11	"%s%c%d not found!\n"
LEAF_NODE	121:40	121:40	9	,
ARGUMENT	122:6	122:6	9	TIFFFileName ( tif )
FUNCTION_CALL	122:6	122:22	10	TIFFFileName ( tif )
CALLEE	122:6	122:6	11	TIFFFileName
LEAF_NODE	122:6	122:6	12	TIFFFileName
LEAF_NODE	122:18	122:18	11	(
ARGUMENT	122:19	122:19	11	tif
FIELD	122:19	122:19	12	tif
LEAF_NODE	122:19	122:19	13	tif
LEAF_NODE	122:22	122:22	11	)
LEAF_NODE	122:23	122:23	9	,
ARGUMENT	122:25	122:25	9	comma
FIELD	122:25	122:25	10	comma
LEAF_NODE	122:25	122:25	11	comma
LEAF_NODE	122:30	122:30	9	,
ARGUMENT	122:32	122:38	9	( int ) nextImage
LEAF_NODE	122:32	122:32	10	(
TYPE_NAME	122:33	122:33	10	int
LEAF_NODE	122:33	122:33	11	int
LEAF_NODE	122:36	122:36	10	)
FIELD	122:38	122:38	10	nextImage
LEAF_NODE	122:38	122:38	11	nextImage
LEAF_NODE	122:47	122:47	9	)
LEAF_NODE	122:48	122:48	7	;
LEAF_NODE	123:1	123:1	5	}
JUMP_STATEMENT	124:1	124:9	3	return 0 ;
KEYWORD	124:1	124:1	4	return
LEAF_NODE	124:1	124:1	5	return
DESTINATION	124:8	124:8	4	0
EXPR	124:8	124:8	5	0
FIELD	124:8	124:8	6	0
LEAF_NODE	124:8	124:8	7	0
LEAF_NODE	124:9	124:9	4	;
LEAF_NODE	125:0	125:0	2	}
FUNCTION_DEF	128:0	153:0	1	
RETURN_TYPE	128:0	128:11	2	static TIFF *
LEAF_NODE	128:0	128:0	3	static
TYPE_NAME	128:7	128:7	3	TIFF
LEAF_NODE	128:7	128:7	4	TIFF
LEAF_NODE	128:11	128:11	3	*
FUNCTION_NAME	128:13	128:13	2	openSrcImage
LEAF_NODE	128:13	128:13	3	openSrcImage
PARAMETER_LIST	128:26	128:43	2	( char * * imageSpec )
LEAF_NODE	128:26	128:26	3	(
PARAMETER_DECL	128:27	128:34	3	char * * imageSpec
TYPE	128:27	128:32	4	char * *
TYPE_NAME	128:27	128:27	5	char
LEAF_NODE	128:27	128:27	6	char
POINTER	128:32	128:33	5	* *
LEAF_NODE	128:32	128:32	6	*
LEAF_NODE	128:33	128:33	6	*
NAME	128:34	128:34	4	imageSpec
LEAF_NODE	128:34	128:34	5	imageSpec
LEAF_NODE	128:43	128:43	3	)
LEAF_NODE	134:0	134:0	2	{
STATEMENTS	135:1	152:1	2	
SIMPLE_DECL	135:1	135:10	3	TIFF * tif ;
VAR_DECL	135:1	135:7	4	TIFF * tif
TYPE	135:1	135:6	5	TIFF *
TYPE_NAME	135:1	135:1	6	TIFF
LEAF_NODE	135:1	135:1	7	TIFF
POINTER	135:6	135:6	6	*
LEAF_NODE	135:6	135:6	7	*
NAME	135:7	135:7	5	tif
LEAF_NODE	135:7	135:7	6	tif
LEAF_NODE	135:10	135:10	4	;
SIMPLE_DECL	136:1	136:22	3	char * fn ; fn = * imageSpec ;
VAR_DECL	136:1	136:7	4	char * fn ; fn = * imageSpec
TYPE	136:1	136:6	5	char *
TYPE_NAME	136:1	136:1	6	char
LEAF_NODE	136:1	136:1	7	char
POINTER	136:6	136:6	6	*
LEAF_NODE	136:6	136:6	7	*
NAME	136:7	136:7	5	fn
LEAF_NODE	136:7	136:7	6	fn
LEAF_NODE	0:0	0:0	5	;
INIT	136:7	136:7	5	fn = * imageSpec
ASSIGN	136:7	136:12	6	fn = * imageSpec
LVAL	136:7	136:7	7	fn
NAME	136:7	136:7	8	fn
LEAF_NODE	136:7	136:7	9	fn
ASSIGN_OP	136:10	136:10	7	=
LEAF_NODE	136:10	136:10	8	=
RVAL	136:12	136:12	7	* imageSpec
UNARY_EXPR	136:12	136:13	8	* imageSpec
UNARY_OPERATOR	136:12	136:12	9	*
LEAF_NODE	136:12	136:12	10	*
FIELD	136:13	136:13	9	imageSpec
LEAF_NODE	136:13	136:13	10	imageSpec
LEAF_NODE	136:22	136:22	4	;
EXPR_STATEMENT	137:1	137:32	3	* imageSpec = strchr ( fn , comma ) ;
EXPR	137:1	137:1	4	* imageSpec = strchr ( fn , comma )
ASSIGN	137:1	137:14	5	* imageSpec = strchr ( fn , comma )
LVAL	137:1	137:1	6	* imageSpec
UNARY_EXPR	137:1	137:2	7	* imageSpec
UNARY_OPERATOR	137:1	137:1	8	*
LEAF_NODE	137:1	137:1	9	*
FIELD	137:2	137:2	8	imageSpec
LEAF_NODE	137:2	137:2	9	imageSpec
ASSIGN_OP	137:12	137:12	6	=
LEAF_NODE	137:12	137:12	7	=
RVAL	137:14	137:14	6	strchr ( fn , comma )
FUNCTION_CALL	137:14	137:31	7	strchr ( fn , comma )
CALLEE	137:14	137:14	8	strchr
LEAF_NODE	137:14	137:14	9	strchr
LEAF_NODE	137:21	137:21	8	(
ARGUMENT	137:22	137:22	8	fn
FIELD	137:22	137:22	9	fn
LEAF_NODE	137:22	137:22	10	fn
LEAF_NODE	137:24	137:24	8	,
ARGUMENT	137:26	137:26	8	comma
FIELD	137:26	137:26	9	comma
LEAF_NODE	137:26	137:26	10	comma
LEAF_NODE	137:31	137:31	8	)
LEAF_NODE	137:32	137:32	4	;
SELECTION	138:1	138:17	3	
KEYWORD	138:1	138:1	4	if
LEAF_NODE	138:1	138:1	5	if
LEAF_NODE	138:4	138:4	4	(
CONDITION	138:5	138:5	4	* imageSpec
EXPR	138:5	138:5	5	* imageSpec
UNARY_EXPR	138:5	138:6	6	* imageSpec
UNARY_OPERATOR	138:5	138:5	7	*
LEAF_NODE	138:5	138:5	8	*
FIELD	138:6	138:6	7	imageSpec
LEAF_NODE	138:6	138:6	8	imageSpec
LEAF_NODE	138:15	138:15	4	)
STATEMENTS	138:17	150:1	4	
LEAF_NODE	138:17	138:17	5	{
STATEMENTS	139:2	143:2	5	
EXPR_STATEMENT	139:2	139:20	6	* * imageSpec = '\0' ;
EXPR	139:2	139:2	7	* * imageSpec = '\0'
ASSIGN	139:2	139:16	8	* * imageSpec = '\0'
LVAL	139:2	139:2	9	* * imageSpec
UNARY_EXPR	139:2	139:4	10	* * imageSpec
UNARY_OPERATOR	139:2	139:2	11	*
LEAF_NODE	139:2	139:2	12	*
UNARY_OPERATOR	139:3	139:3	11	*
LEAF_NODE	139:3	139:3	12	*
FIELD	139:4	139:4	11	imageSpec
LEAF_NODE	139:4	139:4	12	imageSpec
ASSIGN_OP	139:14	139:14	9	=
LEAF_NODE	139:14	139:14	10	=
RVAL	139:16	139:16	9	'\0'
FIELD	139:16	139:16	10	'\0'
LEAF_NODE	139:16	139:16	11	'\0'
LEAF_NODE	139:20	139:20	7	;
EXPR_STATEMENT	140:2	140:26	6	tif = TIFFOpen ( fn , "r" ) ;
EXPR	140:2	140:2	7	tif = TIFFOpen ( fn , "r" )
ASSIGN	140:2	140:8	8	tif = TIFFOpen ( fn , "r" )
LVAL	140:2	140:2	9	tif
FIELD	140:2	140:2	10	tif
LEAF_NODE	140:2	140:2	11	tif
ASSIGN_OP	140:6	140:6	9	=
LEAF_NODE	140:6	140:6	10	=
RVAL	140:8	140:8	9	TIFFOpen ( fn , "r" )
FUNCTION_CALL	140:8	140:25	10	TIFFOpen ( fn , "r" )
CALLEE	140:8	140:8	11	TIFFOpen
LEAF_NODE	140:8	140:8	12	TIFFOpen
LEAF_NODE	140:17	140:17	11	(
ARGUMENT	140:18	140:18	11	fn
FIELD	140:18	140:18	12	fn
LEAF_NODE	140:18	140:18	13	fn
LEAF_NODE	140:20	140:20	11	,
ARGUMENT	140:22	140:22	11	"r"
FIELD	140:22	140:22	12	"r"
LEAF_NODE	140:22	140:22	13	"r"
LEAF_NODE	140:25	140:25	11	)
LEAF_NODE	140:26	140:26	7	;
SELECTION	142:2	142:24	6	
KEYWORD	142:2	142:2	7	if
LEAF_NODE	142:2	142:2	8	if
LEAF_NODE	142:5	142:5	7	(
CONDITION	142:6	142:6	7	! ( * imageSpec ) [ 1 ]
EXPR	142:6	142:6	8	! ( * imageSpec ) [ 1 ]
UNARY_EXPR	142:6	142:21	9	! ( * imageSpec ) [ 1 ]
UNARY_OPERATOR	142:6	142:6	10	!
LEAF_NODE	142:6	142:6	11	!
LEAF_NODE	142:7	142:7	10	(
UNARY_EXPR	142:8	142:9	10	* imageSpec
UNARY_OPERATOR	142:8	142:8	11	*
LEAF_NODE	142:8	142:8	12	*
FIELD	142:9	142:9	11	imageSpec
LEAF_NODE	142:9	142:9	12	imageSpec
LEAF_NODE	142:18	142:18	10	)
LEAF_NODE	142:19	142:19	10	[
EXPR	142:20	142:20	10	1
FIELD	142:20	142:20	11	1
LEAF_NODE	142:20	142:20	12	1
LEAF_NODE	142:21	142:21	10	]
LEAF_NODE	142:22	142:22	7	)
STATEMENTS	142:24	142:55	7	
LEAF_NODE	142:24	142:24	8	{
STATEMENTS	142:25	142:44	8	
EXPR_STATEMENT	142:25	142:42	9	* imageSpec = NULL ;
EXPR	142:25	142:25	10	* imageSpec = NULL
ASSIGN	142:25	142:38	11	* imageSpec = NULL
LVAL	142:25	142:25	12	* imageSpec
UNARY_EXPR	142:25	142:26	13	* imageSpec
UNARY_OPERATOR	142:25	142:25	14	*
LEAF_NODE	142:25	142:25	15	*
FIELD	142:26	142:26	14	imageSpec
LEAF_NODE	142:26	142:26	15	imageSpec
ASSIGN_OP	142:36	142:36	12	=
LEAF_NODE	142:36	142:36	13	=
RVAL	142:38	142:38	12	NULL
FIELD	142:38	142:38	13	NULL
LEAF_NODE	142:38	142:38	14	NULL
LEAF_NODE	142:42	142:42	10	;
JUMP_STATEMENT	142:44	142:54	9	return tif ;
KEYWORD	142:44	142:44	10	return
LEAF_NODE	142:44	142:44	11	return
DESTINATION	142:51	142:51	10	tif
EXPR	142:51	142:51	11	tif
FIELD	142:51	142:51	12	tif
LEAF_NODE	142:51	142:51	13	tif
LEAF_NODE	142:54	142:54	10	;
LEAF_NODE	142:55	142:55	8	}
SELECTION	143:2	143:11	6	
KEYWORD	143:2	143:2	7	if
LEAF_NODE	143:2	143:2	8	if
LEAF_NODE	143:5	143:5	7	(
CONDITION	143:6	143:6	7	tif
EXPR	143:6	143:6	8	tif
FIELD	143:6	143:6	9	tif
LEAF_NODE	143:6	143:6	10	tif
LEAF_NODE	143:9	143:9	7	)
STATEMENTS	143:11	149:2	7	
LEAF_NODE	143:11	143:11	8	{
STATEMENTS	144:3	145:3	8	
EXPR_STATEMENT	144:3	144:22	9	* * imageSpec = comma ;
EXPR	144:3	144:3	10	* * imageSpec = comma
ASSIGN	144:3	144:17	11	* * imageSpec = comma
LVAL	144:3	144:3	12	* * imageSpec
UNARY_EXPR	144:3	144:5	13	* * imageSpec
UNARY_OPERATOR	144:3	144:3	14	*
LEAF_NODE	144:3	144:3	15	*
UNARY_OPERATOR	144:4	144:4	14	*
LEAF_NODE	144:4	144:4	15	*
FIELD	144:5	144:5	14	imageSpec
LEAF_NODE	144:5	144:5	15	imageSpec
ASSIGN_OP	144:15	144:15	12	=
LEAF_NODE	144:15	144:15	13	=
RVAL	144:17	144:17	12	comma
FIELD	144:17	144:17	13	comma
LEAF_NODE	144:17	144:17	14	comma
LEAF_NODE	144:22	144:22	10	;
SELECTION	145:3	145:38	9	
KEYWORD	145:3	145:3	10	if
LEAF_NODE	145:3	145:3	11	if
LEAF_NODE	145:6	145:6	10	(
CONDITION	145:7	145:7	10	! nextSrcImage ( tif , imageSpec )
EXPR	145:7	145:7	11	! nextSrcImage ( tif , imageSpec )
UNARY_EXPR	145:7	145:8	12	! nextSrcImage ( tif , imageSpec )
UNARY_OPERATOR	145:7	145:7	13	!
LEAF_NODE	145:7	145:7	14	!
FUNCTION_CALL	145:8	145:35	13	nextSrcImage ( tif , imageSpec )
CALLEE	145:8	145:8	14	nextSrcImage
LEAF_NODE	145:8	145:8	15	nextSrcImage
LEAF_NODE	145:20	145:20	14	(
ARGUMENT	145:21	145:21	14	tif
FIELD	145:21	145:21	15	tif
LEAF_NODE	145:21	145:21	16	tif
LEAF_NODE	145:24	145:24	14	,
ARGUMENT	145:26	145:26	14	imageSpec
FIELD	145:26	145:26	15	imageSpec
LEAF_NODE	145:26	145:26	16	imageSpec
LEAF_NODE	145:35	145:35	14	)
LEAF_NODE	145:36	145:36	10	)
STATEMENTS	145:38	148:3	10	
LEAF_NODE	145:38	145:38	11	{
STATEMENTS	146:4	147:4	11	
EXPR_STATEMENT	146:4	146:19	12	TIFFClose ( tif ) ;
EXPR	146:4	146:4	13	TIFFClose ( tif )
FUNCTION_CALL	146:4	146:18	14	TIFFClose ( tif )
CALLEE	146:4	146:4	15	TIFFClose
LEAF_NODE	146:4	146:4	16	TIFFClose
LEAF_NODE	146:14	146:14	15	(
ARGUMENT	146:15	146:15	15	tif
FIELD	146:15	146:15	16	tif
LEAF_NODE	146:15	146:15	17	tif
LEAF_NODE	146:18	146:18	15	)
LEAF_NODE	146:19	146:19	13	;
EXPR_STATEMENT	147:4	147:14	12	tif = NULL ;
EXPR	147:4	147:4	13	tif = NULL
ASSIGN	147:4	147:10	14	tif = NULL
LVAL	147:4	147:4	15	tif
FIELD	147:4	147:4	16	tif
LEAF_NODE	147:4	147:4	17	tif
ASSIGN_OP	147:8	147:8	15	=
LEAF_NODE	147:8	147:8	16	=
RVAL	147:10	147:10	15	NULL
FIELD	147:10	147:10	16	NULL
LEAF_NODE	147:10	147:10	17	NULL
LEAF_NODE	147:14	147:14	13	;
LEAF_NODE	148:3	148:3	11	}
LEAF_NODE	149:2	149:2	8	}
LEAF_NODE	150:1	150:1	5	}
SELECTION	150:2	151:2	3	
KEYWORD	150:2	150:2	4	else
LEAF_NODE	150:2	150:2	5	else
STATEMENTS	151:2	151:2	4	
EXPR_STATEMENT	151:2	151:26	5	tif = TIFFOpen ( fn , "r" ) ;
EXPR	151:2	151:2	6	tif = TIFFOpen ( fn , "r" )
ASSIGN	151:2	151:8	7	tif = TIFFOpen ( fn , "r" )
LVAL	151:2	151:2	8	tif
FIELD	151:2	151:2	9	tif
LEAF_NODE	151:2	151:2	10	tif
ASSIGN_OP	151:6	151:6	8	=
LEAF_NODE	151:6	151:6	9	=
RVAL	151:8	151:8	8	TIFFOpen ( fn , "r" )
FUNCTION_CALL	151:8	151:25	9	TIFFOpen ( fn , "r" )
CALLEE	151:8	151:8	10	TIFFOpen
LEAF_NODE	151:8	151:8	11	TIFFOpen
LEAF_NODE	151:17	151:17	10	(
ARGUMENT	151:18	151:18	10	fn
FIELD	151:18	151:18	11	fn
LEAF_NODE	151:18	151:18	12	fn
LEAF_NODE	151:20	151:20	10	,
ARGUMENT	151:22	151:22	10	"r"
FIELD	151:22	151:22	11	"r"
LEAF_NODE	151:22	151:22	12	"r"
LEAF_NODE	151:25	151:25	10	)
LEAF_NODE	151:26	151:26	6	;
JUMP_STATEMENT	152:1	152:11	3	return tif ;
KEYWORD	152:1	152:1	4	return
LEAF_NODE	152:1	152:1	5	return
DESTINATION	152:8	152:8	4	tif
EXPR	152:8	152:8	5	tif
FIELD	152:8	152:8	6	tif
LEAF_NODE	152:8	152:8	7	tif
LEAF_NODE	152:11	152:11	4	;
LEAF_NODE	153:0	153:0	2	}
FUNCTION_DEF	155:0	317:0	1	
RETURN_TYPE	155:0	155:0	2	int
TYPE_NAME	155:0	155:0	3	int
LEAF_NODE	155:0	155:0	4	int
FUNCTION_NAME	156:0	156:0	2	main
LEAF_NODE	156:0	156:0	3	main
PARAMETER_LIST	156:4	156:27	2	( int argc , char * [ ] argv )
LEAF_NODE	156:4	156:4	3	(
PARAMETER_DECL	156:5	156:9	3	int argc
TYPE	156:5	156:5	4	int
TYPE_NAME	156:5	156:5	5	int
LEAF_NODE	156:5	156:5	6	int
NAME	156:9	156:9	4	argc
LEAF_NODE	156:9	156:9	5	argc
LEAF_NODE	156:13	156:13	3	,
PARAMETER_DECL	156:15	156:21	3	char * [ ] argv
TYPE	156:15	156:25	4	char * [ ]
TYPE_NAME	156:15	156:15	5	char
LEAF_NODE	156:15	156:15	6	char
POINTER	156:19	156:19	5	*
LEAF_NODE	156:19	156:19	6	*
TYPE_SUFFIX	156:25	156:26	5	[ ]
LEAF_NODE	156:25	156:25	6	[
LEAF_NODE	156:26	156:26	6	]
NAME	156:21	156:21	4	argv
LEAF_NODE	156:21	156:21	5	argv
LEAF_NODE	156:27	156:27	3	)
LEAF_NODE	157:0	157:0	2	{
STATEMENTS	158:1	316:1	2	
SIMPLE_DECL	158:1	158:31	3	uint16 defconfig ; defconfig = ( uint16 ) - 1 ;
VAR_DECL	158:1	158:8	4	uint16 defconfig ; defconfig = ( uint16 ) - 1
TYPE	158:1	158:1	5	uint16
TYPE_NAME	158:1	158:1	6	uint16
LEAF_NODE	158:1	158:1	7	uint16
NAME	158:8	158:8	5	defconfig
LEAF_NODE	158:8	158:8	6	defconfig
LEAF_NODE	0:0	0:0	5	;
INIT	158:8	158:8	5	defconfig = ( uint16 ) - 1
ASSIGN	158:8	158:20	6	defconfig = ( uint16 ) - 1
LVAL	158:8	158:8	7	defconfig
NAME	158:8	158:8	8	defconfig
LEAF_NODE	158:8	158:8	9	defconfig
ASSIGN_OP	158:18	158:18	7	=
LEAF_NODE	158:18	158:18	8	=
RVAL	158:20	158:29	7	( uint16 ) - 1
LEAF_NODE	158:20	158:20	8	(
TYPE_NAME	158:21	158:21	8	uint16
LEAF_NODE	158:21	158:21	9	uint16
LEAF_NODE	158:27	158:27	8	)
UNARY_EXPR	158:29	158:30	8	- 1
UNARY_OPERATOR	158:29	158:29	9	-
LEAF_NODE	158:29	158:29	10	-
FIELD	158:30	158:30	9	1
LEAF_NODE	158:30	158:30	10	1
LEAF_NODE	158:31	158:31	4	;
SIMPLE_DECL	159:1	159:24	3	uint16 deffillorder ; deffillorder = 0 ;
VAR_DECL	159:1	159:8	4	uint16 deffillorder ; deffillorder = 0
TYPE	159:1	159:1	5	uint16
TYPE_NAME	159:1	159:1	6	uint16
LEAF_NODE	159:1	159:1	7	uint16
NAME	159:8	159:8	5	deffillorder
LEAF_NODE	159:8	159:8	6	deffillorder
LEAF_NODE	0:0	0:0	5	;
INIT	159:8	159:8	5	deffillorder = 0
ASSIGN	159:8	159:23	6	deffillorder = 0
LVAL	159:8	159:8	7	deffillorder
NAME	159:8	159:8	8	deffillorder
LEAF_NODE	159:8	159:8	9	deffillorder
ASSIGN_OP	159:21	159:21	7	=
LEAF_NODE	159:21	159:21	8	=
RVAL	159:23	159:23	7	0
FIELD	159:23	159:23	8	0
LEAF_NODE	159:23	159:23	9	0
LEAF_NODE	159:24	159:24	4	;
SIMPLE_DECL	160:1	160:34	3	uint32 deftilewidth ; deftilewidth = ( uint32 ) - 1 ;
VAR_DECL	160:1	160:8	4	uint32 deftilewidth ; deftilewidth = ( uint32 ) - 1
TYPE	160:1	160:1	5	uint32
TYPE_NAME	160:1	160:1	6	uint32
LEAF_NODE	160:1	160:1	7	uint32
NAME	160:8	160:8	5	deftilewidth
LEAF_NODE	160:8	160:8	6	deftilewidth
LEAF_NODE	0:0	0:0	5	;
INIT	160:8	160:8	5	deftilewidth = ( uint32 ) - 1
ASSIGN	160:8	160:23	6	deftilewidth = ( uint32 ) - 1
LVAL	160:8	160:8	7	deftilewidth
NAME	160:8	160:8	8	deftilewidth
LEAF_NODE	160:8	160:8	9	deftilewidth
ASSIGN_OP	160:21	160:21	7	=
LEAF_NODE	160:21	160:21	8	=
RVAL	160:23	160:32	7	( uint32 ) - 1
LEAF_NODE	160:23	160:23	8	(
TYPE_NAME	160:24	160:24	8	uint32
LEAF_NODE	160:24	160:24	9	uint32
LEAF_NODE	160:30	160:30	8	)
UNARY_EXPR	160:32	160:33	8	- 1
UNARY_OPERATOR	160:32	160:32	9	-
LEAF_NODE	160:32	160:32	10	-
FIELD	160:33	160:33	9	1
LEAF_NODE	160:33	160:33	10	1
LEAF_NODE	160:34	160:34	4	;
SIMPLE_DECL	161:1	161:35	3	uint32 deftilelength ; deftilelength = ( uint32 ) - 1 ;
VAR_DECL	161:1	161:8	4	uint32 deftilelength ; deftilelength = ( uint32 ) - 1
TYPE	161:1	161:1	5	uint32
TYPE_NAME	161:1	161:1	6	uint32
LEAF_NODE	161:1	161:1	7	uint32
NAME	161:8	161:8	5	deftilelength
LEAF_NODE	161:8	161:8	6	deftilelength
LEAF_NODE	0:0	0:0	5	;
INIT	161:8	161:8	5	deftilelength = ( uint32 ) - 1
ASSIGN	161:8	161:24	6	deftilelength = ( uint32 ) - 1
LVAL	161:8	161:8	7	deftilelength
NAME	161:8	161:8	8	deftilelength
LEAF_NODE	161:8	161:8	9	deftilelength
ASSIGN_OP	161:22	161:22	7	=
LEAF_NODE	161:22	161:22	8	=
RVAL	161:24	161:33	7	( uint32 ) - 1
LEAF_NODE	161:24	161:24	8	(
TYPE_NAME	161:25	161:25	8	uint32
LEAF_NODE	161:25	161:25	9	uint32
LEAF_NODE	161:31	161:31	8	)
UNARY_EXPR	161:33	161:34	8	- 1
UNARY_OPERATOR	161:33	161:33	9	-
LEAF_NODE	161:33	161:33	10	-
FIELD	161:34	161:34	9	1
LEAF_NODE	161:34	161:34	10	1
LEAF_NODE	161:35	161:35	4	;
SIMPLE_DECL	162:1	162:36	3	uint32 defrowsperstrip ; defrowsperstrip = ( uint32 ) 0 ;
VAR_DECL	162:1	162:8	4	uint32 defrowsperstrip ; defrowsperstrip = ( uint32 ) 0
TYPE	162:1	162:1	5	uint32
TYPE_NAME	162:1	162:1	6	uint32
LEAF_NODE	162:1	162:1	7	uint32
NAME	162:8	162:8	5	defrowsperstrip
LEAF_NODE	162:8	162:8	6	defrowsperstrip
LEAF_NODE	0:0	0:0	5	;
INIT	162:8	162:8	5	defrowsperstrip = ( uint32 ) 0
ASSIGN	162:8	162:26	6	defrowsperstrip = ( uint32 ) 0
LVAL	162:8	162:8	7	defrowsperstrip
NAME	162:8	162:8	8	defrowsperstrip
LEAF_NODE	162:8	162:8	9	defrowsperstrip
ASSIGN_OP	162:24	162:24	7	=
LEAF_NODE	162:24	162:24	8	=
RVAL	162:26	162:35	7	( uint32 ) 0
LEAF_NODE	162:26	162:26	8	(
TYPE_NAME	162:27	162:27	8	uint32
LEAF_NODE	162:27	162:27	9	uint32
LEAF_NODE	162:33	162:33	8	)
FIELD	162:35	162:35	8	0
LEAF_NODE	162:35	162:35	9	0
LEAF_NODE	162:36	162:36	4	;
SIMPLE_DECL	163:1	163:18	3	uint64 diroff ; diroff = 0 ;
VAR_DECL	163:1	163:8	4	uint64 diroff ; diroff = 0
TYPE	163:1	163:1	5	uint64
TYPE_NAME	163:1	163:1	6	uint64
LEAF_NODE	163:1	163:1	7	uint64
NAME	163:8	163:8	5	diroff
LEAF_NODE	163:8	163:8	6	diroff
LEAF_NODE	0:0	0:0	5	;
INIT	163:8	163:8	5	diroff = 0
ASSIGN	163:8	163:17	6	diroff = 0
LVAL	163:8	163:8	7	diroff
NAME	163:8	163:8	8	diroff
LEAF_NODE	163:8	163:8	9	diroff
ASSIGN_OP	163:15	163:15	7	=
LEAF_NODE	163:15	163:15	8	=
RVAL	163:17	163:17	7	0
FIELD	163:17	163:17	8	0
LEAF_NODE	163:17	163:17	9	0
LEAF_NODE	163:18	163:18	4	;
SIMPLE_DECL	164:1	164:9	3	TIFF * in ;
VAR_DECL	164:1	164:7	4	TIFF * in
TYPE	164:1	164:5	5	TIFF *
TYPE_NAME	164:1	164:1	6	TIFF
LEAF_NODE	164:1	164:1	7	TIFF
POINTER	164:5	164:5	6	*
LEAF_NODE	164:5	164:5	7	*
NAME	164:7	164:7	5	in
LEAF_NODE	164:7	164:7	6	in
LEAF_NODE	164:9	164:9	4	;
SIMPLE_DECL	165:1	165:10	3	TIFF * out ;
VAR_DECL	165:1	165:7	4	TIFF * out
TYPE	165:1	165:5	5	TIFF *
TYPE_NAME	165:1	165:1	6	TIFF
LEAF_NODE	165:1	165:1	7	TIFF
POINTER	165:5	165:5	6	*
LEAF_NODE	165:5	165:5	7	*
NAME	165:7	165:7	5	out
LEAF_NODE	165:7	165:7	6	out
LEAF_NODE	165:10	165:10	4	;
SIMPLE_DECL	166:1	166:14	3	char [ 10 ] mode ;
VAR_DECL	166:1	166:6	4	char [ 10 ] mode
TYPE	166:1	166:10	5	char [ 10 ]
TYPE_NAME	166:1	166:1	6	char
LEAF_NODE	166:1	166:1	7	char
TYPE_SUFFIX	166:10	166:13	6	[ 10 ]
LEAF_NODE	166:10	166:10	7	[
FIELD	166:11	166:11	7	10
LEAF_NODE	166:11	166:11	8	10
LEAF_NODE	166:13	166:13	7	]
NAME	166:6	166:6	5	mode
LEAF_NODE	166:6	166:6	6	mode
LEAF_NODE	166:14	166:14	4	;
SIMPLE_DECL	167:1	167:16	3	char * mp ; mp = mode ;
VAR_DECL	167:1	167:7	4	char * mp ; mp = mode
TYPE	167:1	167:5	5	char *
TYPE_NAME	167:1	167:1	6	char
LEAF_NODE	167:1	167:1	7	char
POINTER	167:5	167:5	6	*
LEAF_NODE	167:5	167:5	7	*
NAME	167:7	167:7	5	mp
LEAF_NODE	167:7	167:7	6	mp
LEAF_NODE	0:0	0:0	5	;
INIT	167:7	167:7	5	mp = mode
ASSIGN	167:7	167:12	6	mp = mode
LVAL	167:7	167:7	7	mp
NAME	167:7	167:7	8	mp
LEAF_NODE	167:7	167:7	9	mp
ASSIGN_OP	167:10	167:10	7	=
LEAF_NODE	167:10	167:10	8	=
RVAL	167:12	167:12	7	mode
FIELD	167:12	167:12	8	mode
LEAF_NODE	167:12	167:12	9	mode
LEAF_NODE	167:16	167:16	4	;
SIMPLE_DECL	168:1	168:6	3	int c ;
VAR_DECL	168:1	168:5	4	int c
TYPE	168:1	168:1	5	int
TYPE_NAME	168:1	168:1	6	int
LEAF_NODE	168:1	168:1	7	int
NAME	168:5	168:5	5	c
LEAF_NODE	168:5	168:5	6	c
LEAF_NODE	168:6	168:6	4	;
LEAF_NODE	170:1	170:1	3	extern
SIMPLE_DECL	170:8	170:18	3	int optind ;
VAR_DECL	170:8	170:12	4	int optind
TYPE	170:8	170:8	5	int
TYPE_NAME	170:8	170:8	6	int
LEAF_NODE	170:8	170:8	7	int
NAME	170:12	170:12	5	optind
LEAF_NODE	170:12	170:12	6	optind
LEAF_NODE	170:18	170:18	4	;
LEAF_NODE	171:1	171:1	3	extern
SIMPLE_DECL	171:8	171:20	3	char * optarg ;
VAR_DECL	171:8	171:14	4	char * optarg
TYPE	171:8	171:12	5	char *
TYPE_NAME	171:8	171:8	6	char
LEAF_NODE	171:8	171:8	7	char
POINTER	171:12	171:12	6	*
LEAF_NODE	171:12	171:12	7	*
NAME	171:14	171:14	5	optarg
LEAF_NODE	171:14	171:14	6	optarg
LEAF_NODE	171:20	171:20	4	;
EXPR_STATEMENT	174:1	174:12	3	* mp ++ = 'w' ;
EXPR	174:1	174:1	4	* mp ++ = 'w'
ASSIGN	174:1	174:9	5	* mp ++ = 'w'
LVAL	174:1	174:1	6	* mp ++
UNARY_EXPR	174:1	174:2	7	* mp ++
UNARY_OPERATOR	174:1	174:1	8	*
LEAF_NODE	174:1	174:1	9	*
FIELD	174:2	174:4	8	mp ++
LEAF_NODE	174:2	174:2	9	mp
LEAF_NODE	174:4	174:4	9	++
ASSIGN_OP	174:7	174:7	6	=
LEAF_NODE	174:7	174:7	7	=
RVAL	174:9	174:9	6	'w'
FIELD	174:9	174:9	7	'w'
LEAF_NODE	174:9	174:9	8	'w'
LEAF_NODE	174:12	174:12	4	;
EXPR_STATEMENT	175:1	175:11	3	* mp = '\0' ;
EXPR	175:1	175:1	4	* mp = '\0'
ASSIGN	175:1	175:7	5	* mp = '\0'
LVAL	175:1	175:1	6	* mp
UNARY_EXPR	175:1	175:2	7	* mp
UNARY_OPERATOR	175:1	175:1	8	*
LEAF_NODE	175:1	175:1	9	*
FIELD	175:2	175:2	8	mp
LEAF_NODE	175:2	175:2	9	mp
ASSIGN_OP	175:5	175:5	6	=
LEAF_NODE	175:5	175:5	7	=
RVAL	175:7	175:7	6	'\0'
FIELD	175:7	175:7	7	'\0'
LEAF_NODE	175:7	175:7	8	'\0'
LEAF_NODE	175:11	175:11	4	;
ITERATION	176:1	177:2	3	
KEYWORD	176:1	176:1	4	while
LEAF_NODE	176:1	176:1	5	while
LEAF_NODE	176:7	176:7	4	(
CONDITION	176:8	176:8	4	( c = getopt ( argc , argv , ",:b:c:f:l:o:p:r:w:aistBLMC8x" ) ) != - 1
EXPR	176:8	176:68	5	( c = getopt ( argc , argv , ",:b:c:f:l:o:p:r:w:aistBLMC8x" ) ) != - 1
LEAF_NODE	176:8	176:8	6	(
ASSIGN	176:9	176:13	6	c = getopt ( argc , argv , ",:b:c:f:l:o:p:r:w:aistBLMC8x" )
LVAL	176:9	176:9	7	c
FIELD	176:9	176:9	8	c
LEAF_NODE	176:9	176:9	9	c
ASSIGN_OP	176:11	176:11	7	=
LEAF_NODE	176:11	176:11	8	=
RVAL	176:13	176:13	7	getopt ( argc , argv , ",:b:c:f:l:o:p:r:w:aistBLMC8x" )
FUNCTION_CALL	176:13	176:62	8	getopt ( argc , argv , ",:b:c:f:l:o:p:r:w:aistBLMC8x" )
CALLEE	176:13	176:13	9	getopt
LEAF_NODE	176:13	176:13	10	getopt
LEAF_NODE	176:19	176:19	9	(
ARGUMENT	176:20	176:20	9	argc
FIELD	176:20	176:20	10	argc
LEAF_NODE	176:20	176:20	11	argc
LEAF_NODE	176:24	176:24	9	,
ARGUMENT	176:26	176:26	9	argv
FIELD	176:26	176:26	10	argv
LEAF_NODE	176:26	176:26	11	argv
LEAF_NODE	176:30	176:30	9	,
ARGUMENT	176:32	176:32	9	",:b:c:f:l:o:p:r:w:aistBLMC8x"
FIELD	176:32	176:32	10	",:b:c:f:l:o:p:r:w:aistBLMC8x"
LEAF_NODE	176:32	176:32	11	",:b:c:f:l:o:p:r:w:aistBLMC8x"
LEAF_NODE	176:62	176:62	9	)
LEAF_NODE	176:63	176:63	6	)
EQ_OPERATOR	176:65	176:65	6	!=
LEAF_NODE	176:65	176:65	7	!=
UNARY_EXPR	176:68	176:69	6	- 1
UNARY_OPERATOR	176:68	176:68	7	-
LEAF_NODE	176:68	176:68	8	-
FIELD	176:69	176:69	7	1
LEAF_NODE	176:69	176:69	8	1
LEAF_NODE	176:70	176:70	4	)
STATEMENTS	177:2	177:2	4	
SELECTION	177:2	177:13	5	
KEYWORD	177:2	177:2	6	switch
LEAF_NODE	177:2	177:2	7	switch
LEAF_NODE	177:9	177:9	6	(
CONDITION	177:10	177:10	6	c
EXPR	177:10	177:10	7	c
FIELD	177:10	177:10	8	c
LEAF_NODE	177:10	177:10	9	c
LEAF_NODE	177:11	177:11	6	)
STATEMENTS	177:13	270:2	6	
LEAF_NODE	177:13	177:13	7	{
STATEMENTS	178:2	268:3	7	
LEAF_NODE	178:2	178:2	8	case
LEAF_NODE	178:7	178:7	8	','
LEAF_NODE	178:10	178:10	8	:
SELECTION	179:3	179:25	8	
KEYWORD	179:3	179:3	9	if
LEAF_NODE	179:3	179:3	10	if
LEAF_NODE	179:6	179:6	9	(
CONDITION	179:7	179:7	9	optarg [ 0 ] != '='
EXPR	179:7	179:20	10	optarg [ 0 ] != '='
FIELD	179:7	179:15	11	optarg [ 0 ]
LEAF_NODE	179:7	179:7	12	optarg
LEAF_NODE	179:13	179:13	12	[
EXPR	179:14	179:14	12	0
FIELD	179:14	179:14	13	0
LEAF_NODE	179:14	179:14	14	0
LEAF_NODE	179:15	179:15	12	]
EQ_OPERATOR	179:17	179:17	11	!=
LEAF_NODE	179:17	179:17	12	!=
FIELD	179:20	179:20	11	'='
LEAF_NODE	179:20	179:20	12	'='
LEAF_NODE	179:23	179:23	9	)
STATEMENTS	179:25	179:25	9	
EXPR_STATEMENT	179:25	179:32	10	usage ( ) ;
EXPR	179:25	179:25	11	usage ( )
FUNCTION_CALL	179:25	179:31	12	usage ( )
CALLEE	179:25	179:25	13	usage
LEAF_NODE	179:25	179:25	14	usage
LEAF_NODE	179:30	179:30	13	(
LEAF_NODE	179:31	179:31	13	)
LEAF_NODE	179:32	179:32	11	;
EXPR_STATEMENT	180:3	180:20	8	comma = optarg [ 1 ] ;
EXPR	180:3	180:3	9	comma = optarg [ 1 ]
ASSIGN	180:3	180:11	10	comma = optarg [ 1 ]
LVAL	180:3	180:3	11	comma
FIELD	180:3	180:3	12	comma
LEAF_NODE	180:3	180:3	13	comma
ASSIGN_OP	180:9	180:9	11	=
LEAF_NODE	180:9	180:9	12	=
RVAL	180:11	180:11	11	optarg [ 1 ]
FIELD	180:11	180:19	12	optarg [ 1 ]
LEAF_NODE	180:11	180:11	13	optarg
LEAF_NODE	180:17	180:17	13	[
EXPR	180:18	180:18	13	1
FIELD	180:18	180:18	14	1
LEAF_NODE	180:18	180:18	15	1
LEAF_NODE	180:19	180:19	13	]
LEAF_NODE	180:20	180:20	9	;
JUMP_STATEMENT	181:3	181:8	8	break DESTINATION ;
KEYWORD	181:3	181:3	9	break
LEAF_NODE	181:3	181:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	181:8	181:8	9	;
LEAF_NODE	182:2	182:2	8	case
LEAF_NODE	182:7	182:7	8	'b'
LEAF_NODE	182:10	182:10	8	:
SELECTION	183:3	183:13	8	
KEYWORD	183:3	183:3	9	if
LEAF_NODE	183:3	183:3	10	if
LEAF_NODE	183:6	183:6	9	(
CONDITION	183:7	183:7	9	bias
EXPR	183:7	183:7	10	bias
FIELD	183:7	183:7	11	bias
LEAF_NODE	183:7	183:7	12	bias
LEAF_NODE	183:11	183:11	9	)
STATEMENTS	183:13	186:3	9	
LEAF_NODE	183:13	183:13	10	{
STATEMENTS	184:4	185:4	10	
EXPR_STATEMENT	184:4	184:58	11	fputs ( "Only 1 bias image may be specified\n" , stderr ) ;
EXPR	184:4	184:4	12	fputs ( "Only 1 bias image may be specified\n" , stderr )
FUNCTION_CALL	184:4	184:57	13	fputs ( "Only 1 bias image may be specified\n" , stderr )
CALLEE	184:4	184:4	14	fputs
LEAF_NODE	184:4	184:4	15	fputs
LEAF_NODE	184:10	184:10	14	(
ARGUMENT	184:11	184:11	14	"Only 1 bias image may be specified\n"
FIELD	184:11	184:11	15	"Only 1 bias image may be specified\n"
LEAF_NODE	184:11	184:11	16	"Only 1 bias image may be specified\n"
LEAF_NODE	184:49	184:49	14	,
ARGUMENT	184:51	184:51	14	stderr
FIELD	184:51	184:51	15	stderr
LEAF_NODE	184:51	184:51	16	stderr
LEAF_NODE	184:57	184:57	14	)
LEAF_NODE	184:58	184:58	12	;
EXPR_STATEMENT	185:4	185:13	11	exit ( - 2 ) ;
EXPR	185:4	185:4	12	exit ( - 2 )
FUNCTION_CALL	185:4	185:12	13	exit ( - 2 )
CALLEE	185:4	185:4	14	exit
LEAF_NODE	185:4	185:4	15	exit
LEAF_NODE	185:9	185:9	14	(
ARGUMENT	185:10	185:10	14	- 2
UNARY_EXPR	185:10	185:11	15	- 2
UNARY_OPERATOR	185:10	185:10	16	-
LEAF_NODE	185:10	185:10	17	-
FIELD	185:11	185:11	16	2
LEAF_NODE	185:11	185:11	17	2
LEAF_NODE	185:12	185:12	14	)
LEAF_NODE	185:13	185:13	12	;
LEAF_NODE	186:3	186:3	10	}
LEAF_NODE	187:3	187:3	8	{
STATEMENTS	188:4	197:4	8	
SIMPLE_DECL	188:4	188:32	9	uint16 samples ; samples = ( uint16 ) - 1 ;
VAR_DECL	188:4	188:11	10	uint16 samples ; samples = ( uint16 ) - 1
TYPE	188:4	188:4	11	uint16
TYPE_NAME	188:4	188:4	12	uint16
LEAF_NODE	188:4	188:4	13	uint16
NAME	188:11	188:11	11	samples
LEAF_NODE	188:11	188:11	12	samples
LEAF_NODE	0:0	0:0	11	;
INIT	188:11	188:11	11	samples = ( uint16 ) - 1
ASSIGN	188:11	188:21	12	samples = ( uint16 ) - 1
LVAL	188:11	188:11	13	samples
NAME	188:11	188:11	14	samples
LEAF_NODE	188:11	188:11	15	samples
ASSIGN_OP	188:19	188:19	13	=
LEAF_NODE	188:19	188:19	14	=
RVAL	188:21	188:30	13	( uint16 ) - 1
LEAF_NODE	188:21	188:21	14	(
TYPE_NAME	188:22	188:22	14	uint16
LEAF_NODE	188:22	188:22	15	uint16
LEAF_NODE	188:28	188:28	14	)
UNARY_EXPR	188:30	188:31	14	- 1
UNARY_OPERATOR	188:30	188:30	15	-
LEAF_NODE	188:30	188:30	16	-
FIELD	188:31	188:31	15	1
LEAF_NODE	188:31	188:31	16	1
LEAF_NODE	188:32	188:32	10	;
SIMPLE_DECL	189:4	189:27	9	char * biasFn ; biasFn = & optarg ;
VAR_DECL	189:4	189:11	10	char * biasFn ; biasFn = & optarg
TYPE	189:4	189:10	11	char *
TYPE_NAME	189:4	189:4	12	char
LEAF_NODE	189:4	189:4	13	char
POINTER	189:10	189:10	12	*
LEAF_NODE	189:10	189:10	13	*
NAME	189:11	189:11	11	biasFn
LEAF_NODE	189:11	189:11	12	biasFn
LEAF_NODE	0:0	0:0	11	;
INIT	189:11	189:11	11	biasFn = & optarg
ASSIGN	189:11	189:20	12	biasFn = & optarg
LVAL	189:11	189:11	13	biasFn
NAME	189:11	189:11	14	biasFn
LEAF_NODE	189:11	189:11	15	biasFn
ASSIGN_OP	189:18	189:18	13	=
LEAF_NODE	189:18	189:18	14	=
RVAL	189:20	189:20	13	& optarg
UNARY_EXPR	189:20	189:21	14	& optarg
UNARY_OPERATOR	189:20	189:20	15	&
LEAF_NODE	189:20	189:20	16	&
FIELD	189:21	189:21	15	optarg
LEAF_NODE	189:21	189:21	16	optarg
LEAF_NODE	189:27	189:27	10	;
EXPR_STATEMENT	190:4	190:32	9	bias = openSrcImage ( biasFn ) ;
EXPR	190:4	190:4	10	bias = openSrcImage ( biasFn )
ASSIGN	190:4	190:11	11	bias = openSrcImage ( biasFn )
LVAL	190:4	190:4	12	bias
FIELD	190:4	190:4	13	bias
LEAF_NODE	190:4	190:4	14	bias
ASSIGN_OP	190:9	190:9	12	=
LEAF_NODE	190:9	190:9	13	=
RVAL	190:11	190:11	12	openSrcImage ( biasFn )
FUNCTION_CALL	190:11	190:31	13	openSrcImage ( biasFn )
CALLEE	190:11	190:11	14	openSrcImage
LEAF_NODE	190:11	190:11	15	openSrcImage
LEAF_NODE	190:24	190:24	14	(
ARGUMENT	190:25	190:25	14	biasFn
FIELD	190:25	190:25	15	biasFn
LEAF_NODE	190:25	190:25	16	biasFn
LEAF_NODE	190:31	190:31	14	)
LEAF_NODE	190:32	190:32	10	;
SELECTION	191:4	191:15	9	
KEYWORD	191:4	191:4	10	if
LEAF_NODE	191:4	191:4	11	if
LEAF_NODE	191:7	191:7	10	(
CONDITION	191:8	191:8	10	! bias
EXPR	191:8	191:8	11	! bias
UNARY_EXPR	191:8	191:9	12	! bias
UNARY_OPERATOR	191:8	191:8	13	!
LEAF_NODE	191:8	191:8	14	!
FIELD	191:9	191:9	13	bias
LEAF_NODE	191:9	191:9	14	bias
LEAF_NODE	191:13	191:13	10	)
STATEMENTS	191:15	191:15	10	
EXPR_STATEMENT	191:15	191:24	11	exit ( - 5 ) ;
EXPR	191:15	191:15	12	exit ( - 5 )
FUNCTION_CALL	191:15	191:23	13	exit ( - 5 )
CALLEE	191:15	191:15	14	exit
LEAF_NODE	191:15	191:15	15	exit
LEAF_NODE	191:20	191:20	14	(
ARGUMENT	191:21	191:21	14	- 5
UNARY_EXPR	191:21	191:22	15	- 5
UNARY_OPERATOR	191:21	191:21	16	-
LEAF_NODE	191:21	191:21	17	-
FIELD	191:22	191:22	16	5
LEAF_NODE	191:22	191:22	17	5
LEAF_NODE	191:23	191:23	14	)
LEAF_NODE	191:24	191:24	12	;
SELECTION	192:4	192:28	9	
KEYWORD	192:4	192:4	10	if
LEAF_NODE	192:4	192:4	11	if
LEAF_NODE	192:7	192:7	10	(
CONDITION	192:8	192:8	10	TIFFIsTiled ( bias )
EXPR	192:8	192:8	11	TIFFIsTiled ( bias )
FUNCTION_CALL	192:8	192:25	12	TIFFIsTiled ( bias )
CALLEE	192:8	192:8	13	TIFFIsTiled
LEAF_NODE	192:8	192:8	14	TIFFIsTiled
LEAF_NODE	192:20	192:20	13	(
ARGUMENT	192:21	192:21	13	bias
FIELD	192:21	192:21	14	bias
LEAF_NODE	192:21	192:21	15	bias
LEAF_NODE	192:25	192:25	13	)
LEAF_NODE	192:26	192:26	10	)
STATEMENTS	192:28	195:4	10	
LEAF_NODE	192:28	192:28	11	{
STATEMENTS	193:5	194:5	11	
EXPR_STATEMENT	193:5	193:63	12	fputs ( "Bias image must be organized in strips\n" , stderr ) ;
EXPR	193:5	193:5	13	fputs ( "Bias image must be organized in strips\n" , stderr )
FUNCTION_CALL	193:5	193:62	14	fputs ( "Bias image must be organized in strips\n" , stderr )
CALLEE	193:5	193:5	15	fputs
LEAF_NODE	193:5	193:5	16	fputs
LEAF_NODE	193:11	193:11	15	(
ARGUMENT	193:12	193:12	15	"Bias image must be organized in strips\n"
FIELD	193:12	193:12	16	"Bias image must be organized in strips\n"
LEAF_NODE	193:12	193:12	17	"Bias image must be organized in strips\n"
LEAF_NODE	193:54	193:54	15	,
ARGUMENT	193:56	193:56	15	stderr
FIELD	193:56	193:56	16	stderr
LEAF_NODE	193:56	193:56	17	stderr
LEAF_NODE	193:62	193:62	15	)
LEAF_NODE	193:63	193:63	13	;
EXPR_STATEMENT	194:5	194:14	12	exit ( - 7 ) ;
EXPR	194:5	194:5	13	exit ( - 7 )
FUNCTION_CALL	194:5	194:13	14	exit ( - 7 )
CALLEE	194:5	194:5	15	exit
LEAF_NODE	194:5	194:5	16	exit
LEAF_NODE	194:10	194:10	15	(
ARGUMENT	194:11	194:11	15	- 7
UNARY_EXPR	194:11	194:12	16	- 7
UNARY_OPERATOR	194:11	194:11	17	-
LEAF_NODE	194:11	194:11	18	-
FIELD	194:12	194:12	17	7
LEAF_NODE	194:12	194:12	18	7
LEAF_NODE	194:13	194:13	15	)
LEAF_NODE	194:14	194:14	13	;
LEAF_NODE	195:4	195:4	11	}
EXPR_STATEMENT	196:4	196:57	9	TIFFGetField ( bias , TIFFTAG_SAMPLESPERPIXEL , & samples ) ;
EXPR	196:4	196:4	10	TIFFGetField ( bias , TIFFTAG_SAMPLESPERPIXEL , & samples )
FUNCTION_CALL	196:4	196:56	11	TIFFGetField ( bias , TIFFTAG_SAMPLESPERPIXEL , & samples )
CALLEE	196:4	196:4	12	TIFFGetField
LEAF_NODE	196:4	196:4	13	TIFFGetField
LEAF_NODE	196:16	196:16	12	(
ARGUMENT	196:17	196:17	12	bias
FIELD	196:17	196:17	13	bias
LEAF_NODE	196:17	196:17	14	bias
LEAF_NODE	196:21	196:21	12	,
ARGUMENT	196:23	196:23	12	TIFFTAG_SAMPLESPERPIXEL
FIELD	196:23	196:23	13	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	196:23	196:23	14	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	196:46	196:46	12	,
ARGUMENT	196:48	196:48	12	& samples
UNARY_EXPR	196:48	196:49	13	& samples
UNARY_OPERATOR	196:48	196:48	14	&
LEAF_NODE	196:48	196:48	15	&
FIELD	196:49	196:49	14	samples
LEAF_NODE	196:49	196:49	15	samples
LEAF_NODE	196:56	196:56	12	)
LEAF_NODE	196:57	196:57	10	;
SELECTION	197:4	197:22	9	
KEYWORD	197:4	197:4	10	if
LEAF_NODE	197:4	197:4	11	if
LEAF_NODE	197:7	197:7	10	(
CONDITION	197:8	197:8	10	samples != 1
EXPR	197:8	197:19	11	samples != 1
FIELD	197:8	197:8	12	samples
LEAF_NODE	197:8	197:8	13	samples
EQ_OPERATOR	197:16	197:16	12	!=
LEAF_NODE	197:16	197:16	13	!=
FIELD	197:19	197:19	12	1
LEAF_NODE	197:19	197:19	13	1
LEAF_NODE	197:20	197:20	10	)
STATEMENTS	197:22	200:4	10	
LEAF_NODE	197:22	197:22	11	{
STATEMENTS	198:5	199:5	11	
EXPR_STATEMENT	198:5	198:54	12	fputs ( "Bias image must be monochrome\n" , stderr ) ;
EXPR	198:5	198:5	13	fputs ( "Bias image must be monochrome\n" , stderr )
FUNCTION_CALL	198:5	198:53	14	fputs ( "Bias image must be monochrome\n" , stderr )
CALLEE	198:5	198:5	15	fputs
LEAF_NODE	198:5	198:5	16	fputs
LEAF_NODE	198:11	198:11	15	(
ARGUMENT	198:12	198:12	15	"Bias image must be monochrome\n"
FIELD	198:12	198:12	16	"Bias image must be monochrome\n"
LEAF_NODE	198:12	198:12	17	"Bias image must be monochrome\n"
LEAF_NODE	198:45	198:45	15	,
ARGUMENT	198:47	198:47	15	stderr
FIELD	198:47	198:47	16	stderr
LEAF_NODE	198:47	198:47	17	stderr
LEAF_NODE	198:53	198:53	15	)
LEAF_NODE	198:54	198:54	13	;
EXPR_STATEMENT	199:5	199:14	12	exit ( - 7 ) ;
EXPR	199:5	199:5	13	exit ( - 7 )
FUNCTION_CALL	199:5	199:13	14	exit ( - 7 )
CALLEE	199:5	199:5	15	exit
LEAF_NODE	199:5	199:5	16	exit
LEAF_NODE	199:10	199:10	15	(
ARGUMENT	199:11	199:11	15	- 7
UNARY_EXPR	199:11	199:12	16	- 7
UNARY_OPERATOR	199:11	199:11	17	-
LEAF_NODE	199:11	199:11	18	-
FIELD	199:12	199:12	17	7
LEAF_NODE	199:12	199:12	18	7
LEAF_NODE	199:13	199:13	15	)
LEAF_NODE	199:14	199:14	13	;
LEAF_NODE	200:4	200:4	11	}
LEAF_NODE	201:3	201:3	8	}
JUMP_STATEMENT	202:3	202:8	8	break DESTINATION ;
KEYWORD	202:3	202:3	9	break
LEAF_NODE	202:3	202:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	202:8	202:8	9	;
LEAF_NODE	203:2	203:2	8	case
LEAF_NODE	203:7	203:7	8	'a'
LEAF_NODE	203:10	203:10	8	:
EXPR_STATEMENT	204:3	204:16	8	mode [ 0 ] = 'a' ;
EXPR	204:3	204:3	9	mode [ 0 ] = 'a'
ASSIGN	204:3	204:13	10	mode [ 0 ] = 'a'
LVAL	204:3	204:3	11	mode [ 0 ]
FIELD	204:3	204:9	12	mode [ 0 ]
LEAF_NODE	204:3	204:3	13	mode
LEAF_NODE	204:7	204:7	13	[
EXPR	204:8	204:8	13	0
FIELD	204:8	204:8	14	0
LEAF_NODE	204:8	204:8	15	0
LEAF_NODE	204:9	204:9	13	]
ASSIGN_OP	204:11	204:11	11	=
LEAF_NODE	204:11	204:11	12	=
RVAL	204:13	204:13	11	'a'
FIELD	204:13	204:13	12	'a'
LEAF_NODE	204:13	204:13	13	'a'
LEAF_NODE	204:16	204:16	9	;
JUMP_STATEMENT	205:3	205:8	8	break DESTINATION ;
KEYWORD	205:3	205:3	9	break
LEAF_NODE	205:3	205:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	205:8	205:8	9	;
LEAF_NODE	206:2	206:2	8	case
LEAF_NODE	206:7	206:7	8	'c'
LEAF_NODE	206:10	206:10	8	:
SELECTION	207:3	208:4	8	
KEYWORD	207:3	207:3	9	if
LEAF_NODE	207:3	207:3	10	if
LEAF_NODE	207:6	207:6	9	(
CONDITION	207:7	207:7	9	! processCompressOptions ( optarg )
EXPR	207:7	207:7	10	! processCompressOptions ( optarg )
UNARY_EXPR	207:7	207:8	11	! processCompressOptions ( optarg )
UNARY_OPERATOR	207:7	207:7	12	!
LEAF_NODE	207:7	207:7	13	!
FUNCTION_CALL	207:8	207:37	12	processCompressOptions ( optarg )
CALLEE	207:8	207:8	13	processCompressOptions
LEAF_NODE	207:8	207:8	14	processCompressOptions
LEAF_NODE	207:30	207:30	13	(
ARGUMENT	207:31	207:31	13	optarg
FIELD	207:31	207:31	14	optarg
LEAF_NODE	207:31	207:31	15	optarg
LEAF_NODE	207:37	207:37	13	)
LEAF_NODE	207:38	207:38	9	)
STATEMENTS	208:4	208:4	9	
EXPR_STATEMENT	208:4	208:11	10	usage ( ) ;
EXPR	208:4	208:4	11	usage ( )
FUNCTION_CALL	208:4	208:10	12	usage ( )
CALLEE	208:4	208:4	13	usage
LEAF_NODE	208:4	208:4	14	usage
LEAF_NODE	208:9	208:9	13	(
LEAF_NODE	208:10	208:10	13	)
LEAF_NODE	208:11	208:11	11	;
JUMP_STATEMENT	209:3	209:8	8	break DESTINATION ;
KEYWORD	209:3	209:3	9	break
LEAF_NODE	209:3	209:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	209:8	209:8	9	;
LEAF_NODE	210:2	210:2	8	case
LEAF_NODE	210:7	210:7	8	'f'
LEAF_NODE	210:10	210:10	8	:
SELECTION	211:3	212:4	8	
KEYWORD	211:3	211:3	9	if
LEAF_NODE	211:3	211:3	10	if
LEAF_NODE	211:6	211:6	9	(
CONDITION	211:7	211:7	9	streq ( optarg , "lsb2msb" )
EXPR	211:7	211:7	10	streq ( optarg , "lsb2msb" )
FUNCTION_CALL	211:7	211:30	11	streq ( optarg , "lsb2msb" )
CALLEE	211:7	211:7	12	streq
LEAF_NODE	211:7	211:7	13	streq
LEAF_NODE	211:12	211:12	12	(
ARGUMENT	211:13	211:13	12	optarg
FIELD	211:13	211:13	13	optarg
LEAF_NODE	211:13	211:13	14	optarg
LEAF_NODE	211:19	211:19	12	,
ARGUMENT	211:21	211:21	12	"lsb2msb"
FIELD	211:21	211:21	13	"lsb2msb"
LEAF_NODE	211:21	211:21	14	"lsb2msb"
LEAF_NODE	211:30	211:30	12	)
LEAF_NODE	211:31	211:31	9	)
STATEMENTS	212:4	212:4	9	
EXPR_STATEMENT	212:4	212:36	10	deffillorder = FILLORDER_LSB2MSB ;
EXPR	212:4	212:4	11	deffillorder = FILLORDER_LSB2MSB
ASSIGN	212:4	212:19	12	deffillorder = FILLORDER_LSB2MSB
LVAL	212:4	212:4	13	deffillorder
FIELD	212:4	212:4	14	deffillorder
LEAF_NODE	212:4	212:4	15	deffillorder
ASSIGN_OP	212:17	212:17	13	=
LEAF_NODE	212:17	212:17	14	=
RVAL	212:19	212:19	13	FILLORDER_LSB2MSB
FIELD	212:19	212:19	14	FILLORDER_LSB2MSB
LEAF_NODE	212:19	212:19	15	FILLORDER_LSB2MSB
LEAF_NODE	212:36	212:36	11	;
SELECTION	213:3	213:8	8	
KEYWORD	213:3	213:3	9	else
LEAF_NODE	213:3	213:3	10	else
STATEMENTS	213:8	213:8	9	
SELECTION	213:8	214:4	10	
KEYWORD	213:8	213:8	11	if
LEAF_NODE	213:8	213:8	12	if
LEAF_NODE	213:11	213:11	11	(
CONDITION	213:12	213:12	11	streq ( optarg , "msb2lsb" )
EXPR	213:12	213:12	12	streq ( optarg , "msb2lsb" )
FUNCTION_CALL	213:12	213:35	13	streq ( optarg , "msb2lsb" )
CALLEE	213:12	213:12	14	streq
LEAF_NODE	213:12	213:12	15	streq
LEAF_NODE	213:17	213:17	14	(
ARGUMENT	213:18	213:18	14	optarg
FIELD	213:18	213:18	15	optarg
LEAF_NODE	213:18	213:18	16	optarg
LEAF_NODE	213:24	213:24	14	,
ARGUMENT	213:26	213:26	14	"msb2lsb"
FIELD	213:26	213:26	15	"msb2lsb"
LEAF_NODE	213:26	213:26	16	"msb2lsb"
LEAF_NODE	213:35	213:35	14	)
LEAF_NODE	213:36	213:36	11	)
STATEMENTS	214:4	214:4	11	
EXPR_STATEMENT	214:4	214:36	12	deffillorder = FILLORDER_MSB2LSB ;
EXPR	214:4	214:4	13	deffillorder = FILLORDER_MSB2LSB
ASSIGN	214:4	214:19	14	deffillorder = FILLORDER_MSB2LSB
LVAL	214:4	214:4	15	deffillorder
FIELD	214:4	214:4	16	deffillorder
LEAF_NODE	214:4	214:4	17	deffillorder
ASSIGN_OP	214:17	214:17	15	=
LEAF_NODE	214:17	214:17	16	=
RVAL	214:19	214:19	15	FILLORDER_MSB2LSB
FIELD	214:19	214:19	16	FILLORDER_MSB2LSB
LEAF_NODE	214:19	214:19	17	FILLORDER_MSB2LSB
LEAF_NODE	214:36	214:36	13	;
SELECTION	215:3	216:4	8	
KEYWORD	215:3	215:3	9	else
LEAF_NODE	215:3	215:3	10	else
STATEMENTS	216:4	216:4	9	
EXPR_STATEMENT	216:4	216:11	10	usage ( ) ;
EXPR	216:4	216:4	11	usage ( )
FUNCTION_CALL	216:4	216:10	12	usage ( )
CALLEE	216:4	216:4	13	usage
LEAF_NODE	216:4	216:4	14	usage
LEAF_NODE	216:9	216:9	13	(
LEAF_NODE	216:10	216:10	13	)
LEAF_NODE	216:11	216:11	11	;
JUMP_STATEMENT	217:3	217:8	8	break DESTINATION ;
KEYWORD	217:3	217:3	9	break
LEAF_NODE	217:3	217:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	217:8	217:8	9	;
LEAF_NODE	218:2	218:2	8	case
LEAF_NODE	218:7	218:7	8	'i'
LEAF_NODE	218:10	218:10	8	:
EXPR_STATEMENT	219:3	219:16	8	ignore = TRUE ;
EXPR	219:3	219:3	9	ignore = TRUE
ASSIGN	219:3	219:12	10	ignore = TRUE
LVAL	219:3	219:3	11	ignore
FIELD	219:3	219:3	12	ignore
LEAF_NODE	219:3	219:3	13	ignore
ASSIGN_OP	219:10	219:10	11	=
LEAF_NODE	219:10	219:10	12	=
RVAL	219:12	219:12	11	TRUE
FIELD	219:12	219:12	12	TRUE
LEAF_NODE	219:12	219:12	13	TRUE
LEAF_NODE	219:16	219:16	9	;
JUMP_STATEMENT	220:3	220:8	8	break DESTINATION ;
KEYWORD	220:3	220:3	9	break
LEAF_NODE	220:3	220:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	220:8	220:8	9	;
LEAF_NODE	221:2	221:2	8	case
LEAF_NODE	221:7	221:7	8	'l'
LEAF_NODE	221:10	221:10	8	:
EXPR_STATEMENT	222:3	222:18	8	outtiled = TRUE ;
EXPR	222:3	222:3	9	outtiled = TRUE
ASSIGN	222:3	222:14	10	outtiled = TRUE
LVAL	222:3	222:3	11	outtiled
FIELD	222:3	222:3	12	outtiled
LEAF_NODE	222:3	222:3	13	outtiled
ASSIGN_OP	222:12	222:12	11	=
LEAF_NODE	222:12	222:12	12	=
RVAL	222:14	222:14	11	TRUE
FIELD	222:14	222:14	12	TRUE
LEAF_NODE	222:14	222:14	13	TRUE
LEAF_NODE	222:18	222:18	9	;
EXPR_STATEMENT	223:3	223:31	8	deftilelength = atoi ( optarg ) ;
EXPR	223:3	223:3	9	deftilelength = atoi ( optarg )
ASSIGN	223:3	223:19	10	deftilelength = atoi ( optarg )
LVAL	223:3	223:3	11	deftilelength
FIELD	223:3	223:3	12	deftilelength
LEAF_NODE	223:3	223:3	13	deftilelength
ASSIGN_OP	223:17	223:17	11	=
LEAF_NODE	223:17	223:17	12	=
RVAL	223:19	223:19	11	atoi ( optarg )
FUNCTION_CALL	223:19	223:30	12	atoi ( optarg )
CALLEE	223:19	223:19	13	atoi
LEAF_NODE	223:19	223:19	14	atoi
LEAF_NODE	223:23	223:23	13	(
ARGUMENT	223:24	223:24	13	optarg
FIELD	223:24	223:24	14	optarg
LEAF_NODE	223:24	223:24	15	optarg
LEAF_NODE	223:30	223:30	13	)
LEAF_NODE	223:31	223:31	9	;
JUMP_STATEMENT	224:3	224:8	8	break DESTINATION ;
KEYWORD	224:3	224:3	9	break
LEAF_NODE	224:3	224:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	224:8	224:8	9	;
LEAF_NODE	225:2	225:2	8	case
LEAF_NODE	225:7	225:7	8	'o'
LEAF_NODE	225:10	225:10	8	:
EXPR_STATEMENT	226:3	226:36	8	diroff = strtoul ( optarg , NULL , 0 ) ;
EXPR	226:3	226:3	9	diroff = strtoul ( optarg , NULL , 0 )
ASSIGN	226:3	226:12	10	diroff = strtoul ( optarg , NULL , 0 )
LVAL	226:3	226:3	11	diroff
FIELD	226:3	226:3	12	diroff
LEAF_NODE	226:3	226:3	13	diroff
ASSIGN_OP	226:10	226:10	11	=
LEAF_NODE	226:10	226:10	12	=
RVAL	226:12	226:12	11	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	226:12	226:35	12	strtoul ( optarg , NULL , 0 )
CALLEE	226:12	226:12	13	strtoul
LEAF_NODE	226:12	226:12	14	strtoul
LEAF_NODE	226:19	226:19	13	(
ARGUMENT	226:20	226:20	13	optarg
FIELD	226:20	226:20	14	optarg
LEAF_NODE	226:20	226:20	15	optarg
LEAF_NODE	226:26	226:26	13	,
ARGUMENT	226:28	226:28	13	NULL
FIELD	226:28	226:28	14	NULL
LEAF_NODE	226:28	226:28	15	NULL
LEAF_NODE	226:32	226:32	13	,
ARGUMENT	226:34	226:34	13	0
FIELD	226:34	226:34	14	0
LEAF_NODE	226:34	226:34	15	0
LEAF_NODE	226:35	226:35	13	)
LEAF_NODE	226:36	226:36	9	;
JUMP_STATEMENT	227:3	227:8	8	break DESTINATION ;
KEYWORD	227:3	227:3	9	break
LEAF_NODE	227:3	227:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	227:8	227:8	9	;
LEAF_NODE	228:2	228:2	8	case
LEAF_NODE	228:7	228:7	8	'p'
LEAF_NODE	228:10	228:10	8	:
SELECTION	229:3	230:4	8	
KEYWORD	229:3	229:3	9	if
LEAF_NODE	229:3	229:3	10	if
LEAF_NODE	229:6	229:6	9	(
CONDITION	229:7	229:7	9	streq ( optarg , "separate" )
EXPR	229:7	229:7	10	streq ( optarg , "separate" )
FUNCTION_CALL	229:7	229:31	11	streq ( optarg , "separate" )
CALLEE	229:7	229:7	12	streq
LEAF_NODE	229:7	229:7	13	streq
LEAF_NODE	229:12	229:12	12	(
ARGUMENT	229:13	229:13	12	optarg
FIELD	229:13	229:13	13	optarg
LEAF_NODE	229:13	229:13	14	optarg
LEAF_NODE	229:19	229:19	12	,
ARGUMENT	229:21	229:21	12	"separate"
FIELD	229:21	229:21	13	"separate"
LEAF_NODE	229:21	229:21	14	"separate"
LEAF_NODE	229:31	229:31	12	)
LEAF_NODE	229:32	229:32	9	)
STATEMENTS	230:4	230:4	9	
EXPR_STATEMENT	230:4	230:37	10	defconfig = PLANARCONFIG_SEPARATE ;
EXPR	230:4	230:4	11	defconfig = PLANARCONFIG_SEPARATE
ASSIGN	230:4	230:16	12	defconfig = PLANARCONFIG_SEPARATE
LVAL	230:4	230:4	13	defconfig
FIELD	230:4	230:4	14	defconfig
LEAF_NODE	230:4	230:4	15	defconfig
ASSIGN_OP	230:14	230:14	13	=
LEAF_NODE	230:14	230:14	14	=
RVAL	230:16	230:16	13	PLANARCONFIG_SEPARATE
FIELD	230:16	230:16	14	PLANARCONFIG_SEPARATE
LEAF_NODE	230:16	230:16	15	PLANARCONFIG_SEPARATE
LEAF_NODE	230:37	230:37	11	;
SELECTION	231:3	231:8	8	
KEYWORD	231:3	231:3	9	else
LEAF_NODE	231:3	231:3	10	else
STATEMENTS	231:8	231:8	9	
SELECTION	231:8	232:4	10	
KEYWORD	231:8	231:8	11	if
LEAF_NODE	231:8	231:8	12	if
LEAF_NODE	231:11	231:11	11	(
CONDITION	231:12	231:12	11	streq ( optarg , "contig" )
EXPR	231:12	231:12	12	streq ( optarg , "contig" )
FUNCTION_CALL	231:12	231:34	13	streq ( optarg , "contig" )
CALLEE	231:12	231:12	14	streq
LEAF_NODE	231:12	231:12	15	streq
LEAF_NODE	231:17	231:17	14	(
ARGUMENT	231:18	231:18	14	optarg
FIELD	231:18	231:18	15	optarg
LEAF_NODE	231:18	231:18	16	optarg
LEAF_NODE	231:24	231:24	14	,
ARGUMENT	231:26	231:26	14	"contig"
FIELD	231:26	231:26	15	"contig"
LEAF_NODE	231:26	231:26	16	"contig"
LEAF_NODE	231:34	231:34	14	)
LEAF_NODE	231:35	231:35	11	)
STATEMENTS	232:4	232:4	11	
EXPR_STATEMENT	232:4	232:35	12	defconfig = PLANARCONFIG_CONTIG ;
EXPR	232:4	232:4	13	defconfig = PLANARCONFIG_CONTIG
ASSIGN	232:4	232:16	14	defconfig = PLANARCONFIG_CONTIG
LVAL	232:4	232:4	15	defconfig
FIELD	232:4	232:4	16	defconfig
LEAF_NODE	232:4	232:4	17	defconfig
ASSIGN_OP	232:14	232:14	15	=
LEAF_NODE	232:14	232:14	16	=
RVAL	232:16	232:16	15	PLANARCONFIG_CONTIG
FIELD	232:16	232:16	16	PLANARCONFIG_CONTIG
LEAF_NODE	232:16	232:16	17	PLANARCONFIG_CONTIG
LEAF_NODE	232:35	232:35	13	;
SELECTION	233:3	234:4	8	
KEYWORD	233:3	233:3	9	else
LEAF_NODE	233:3	233:3	10	else
STATEMENTS	234:4	234:4	9	
EXPR_STATEMENT	234:4	234:11	10	usage ( ) ;
EXPR	234:4	234:4	11	usage ( )
FUNCTION_CALL	234:4	234:10	12	usage ( )
CALLEE	234:4	234:4	13	usage
LEAF_NODE	234:4	234:4	14	usage
LEAF_NODE	234:9	234:9	13	(
LEAF_NODE	234:10	234:10	13	)
LEAF_NODE	234:11	234:11	11	;
JUMP_STATEMENT	235:3	235:8	8	break DESTINATION ;
KEYWORD	235:3	235:3	9	break
LEAF_NODE	235:3	235:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	235:8	235:8	9	;
LEAF_NODE	236:2	236:2	8	case
LEAF_NODE	236:7	236:7	8	'r'
LEAF_NODE	236:10	236:10	8	:
EXPR_STATEMENT	237:3	237:33	8	defrowsperstrip = atol ( optarg ) ;
EXPR	237:3	237:3	9	defrowsperstrip = atol ( optarg )
ASSIGN	237:3	237:21	10	defrowsperstrip = atol ( optarg )
LVAL	237:3	237:3	11	defrowsperstrip
FIELD	237:3	237:3	12	defrowsperstrip
LEAF_NODE	237:3	237:3	13	defrowsperstrip
ASSIGN_OP	237:19	237:19	11	=
LEAF_NODE	237:19	237:19	12	=
RVAL	237:21	237:21	11	atol ( optarg )
FUNCTION_CALL	237:21	237:32	12	atol ( optarg )
CALLEE	237:21	237:21	13	atol
LEAF_NODE	237:21	237:21	14	atol
LEAF_NODE	237:25	237:25	13	(
ARGUMENT	237:26	237:26	13	optarg
FIELD	237:26	237:26	14	optarg
LEAF_NODE	237:26	237:26	15	optarg
LEAF_NODE	237:32	237:32	13	)
LEAF_NODE	237:33	237:33	9	;
JUMP_STATEMENT	238:3	238:8	8	break DESTINATION ;
KEYWORD	238:3	238:3	9	break
LEAF_NODE	238:3	238:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	238:8	238:8	9	;
LEAF_NODE	239:2	239:2	8	case
LEAF_NODE	239:7	239:7	8	's'
LEAF_NODE	239:10	239:10	8	:
EXPR_STATEMENT	240:3	240:19	8	outtiled = FALSE ;
EXPR	240:3	240:3	9	outtiled = FALSE
ASSIGN	240:3	240:14	10	outtiled = FALSE
LVAL	240:3	240:3	11	outtiled
FIELD	240:3	240:3	12	outtiled
LEAF_NODE	240:3	240:3	13	outtiled
ASSIGN_OP	240:12	240:12	11	=
LEAF_NODE	240:12	240:12	12	=
RVAL	240:14	240:14	11	FALSE
FIELD	240:14	240:14	12	FALSE
LEAF_NODE	240:14	240:14	13	FALSE
LEAF_NODE	240:19	240:19	9	;
JUMP_STATEMENT	241:3	241:8	8	break DESTINATION ;
KEYWORD	241:3	241:3	9	break
LEAF_NODE	241:3	241:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	241:8	241:8	9	;
LEAF_NODE	242:2	242:2	8	case
LEAF_NODE	242:7	242:7	8	't'
LEAF_NODE	242:10	242:10	8	:
EXPR_STATEMENT	243:3	243:18	8	outtiled = TRUE ;
EXPR	243:3	243:3	9	outtiled = TRUE
ASSIGN	243:3	243:14	10	outtiled = TRUE
LVAL	243:3	243:3	11	outtiled
FIELD	243:3	243:3	12	outtiled
LEAF_NODE	243:3	243:3	13	outtiled
ASSIGN_OP	243:12	243:12	11	=
LEAF_NODE	243:12	243:12	12	=
RVAL	243:14	243:14	11	TRUE
FIELD	243:14	243:14	12	TRUE
LEAF_NODE	243:14	243:14	13	TRUE
LEAF_NODE	243:18	243:18	9	;
JUMP_STATEMENT	244:3	244:8	8	break DESTINATION ;
KEYWORD	244:3	244:3	9	break
LEAF_NODE	244:3	244:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	244:8	244:8	9	;
LEAF_NODE	245:2	245:2	8	case
LEAF_NODE	245:7	245:7	8	'w'
LEAF_NODE	245:10	245:10	8	:
EXPR_STATEMENT	246:3	246:18	8	outtiled = TRUE ;
EXPR	246:3	246:3	9	outtiled = TRUE
ASSIGN	246:3	246:14	10	outtiled = TRUE
LVAL	246:3	246:3	11	outtiled
FIELD	246:3	246:3	12	outtiled
LEAF_NODE	246:3	246:3	13	outtiled
ASSIGN_OP	246:12	246:12	11	=
LEAF_NODE	246:12	246:12	12	=
RVAL	246:14	246:14	11	TRUE
FIELD	246:14	246:14	12	TRUE
LEAF_NODE	246:14	246:14	13	TRUE
LEAF_NODE	246:18	246:18	9	;
EXPR_STATEMENT	247:3	247:30	8	deftilewidth = atoi ( optarg ) ;
EXPR	247:3	247:3	9	deftilewidth = atoi ( optarg )
ASSIGN	247:3	247:18	10	deftilewidth = atoi ( optarg )
LVAL	247:3	247:3	11	deftilewidth
FIELD	247:3	247:3	12	deftilewidth
LEAF_NODE	247:3	247:3	13	deftilewidth
ASSIGN_OP	247:16	247:16	11	=
LEAF_NODE	247:16	247:16	12	=
RVAL	247:18	247:18	11	atoi ( optarg )
FUNCTION_CALL	247:18	247:29	12	atoi ( optarg )
CALLEE	247:18	247:18	13	atoi
LEAF_NODE	247:18	247:18	14	atoi
LEAF_NODE	247:22	247:22	13	(
ARGUMENT	247:23	247:23	13	optarg
FIELD	247:23	247:23	14	optarg
LEAF_NODE	247:23	247:23	15	optarg
LEAF_NODE	247:29	247:29	13	)
LEAF_NODE	247:30	247:30	9	;
JUMP_STATEMENT	248:3	248:8	8	break DESTINATION ;
KEYWORD	248:3	248:3	9	break
LEAF_NODE	248:3	248:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	248:8	248:8	9	;
LEAF_NODE	249:2	249:2	8	case
LEAF_NODE	249:7	249:7	8	'B'
LEAF_NODE	249:10	249:10	8	:
EXPR_STATEMENT	250:3	250:14	8	* mp ++ = 'b' ;
EXPR	250:3	250:3	9	* mp ++ = 'b'
ASSIGN	250:3	250:11	10	* mp ++ = 'b'
LVAL	250:3	250:3	11	* mp ++
UNARY_EXPR	250:3	250:4	12	* mp ++
UNARY_OPERATOR	250:3	250:3	13	*
LEAF_NODE	250:3	250:3	14	*
FIELD	250:4	250:6	13	mp ++
LEAF_NODE	250:4	250:4	14	mp
LEAF_NODE	250:6	250:6	14	++
ASSIGN_OP	250:9	250:9	11	=
LEAF_NODE	250:9	250:9	12	=
RVAL	250:11	250:11	11	'b'
FIELD	250:11	250:11	12	'b'
LEAF_NODE	250:11	250:11	13	'b'
LEAF_NODE	250:14	250:14	9	;
EXPR_STATEMENT	250:16	250:26	8	* mp = '\0' ;
EXPR	250:16	250:16	9	* mp = '\0'
ASSIGN	250:16	250:22	10	* mp = '\0'
LVAL	250:16	250:16	11	* mp
UNARY_EXPR	250:16	250:17	12	* mp
UNARY_OPERATOR	250:16	250:16	13	*
LEAF_NODE	250:16	250:16	14	*
FIELD	250:17	250:17	13	mp
LEAF_NODE	250:17	250:17	14	mp
ASSIGN_OP	250:20	250:20	11	=
LEAF_NODE	250:20	250:20	12	=
RVAL	250:22	250:22	11	'\0'
FIELD	250:22	250:22	12	'\0'
LEAF_NODE	250:22	250:22	13	'\0'
LEAF_NODE	250:26	250:26	9	;
JUMP_STATEMENT	251:3	251:8	8	break DESTINATION ;
KEYWORD	251:3	251:3	9	break
LEAF_NODE	251:3	251:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	251:8	251:8	9	;
LEAF_NODE	252:2	252:2	8	case
LEAF_NODE	252:7	252:7	8	'L'
LEAF_NODE	252:10	252:10	8	:
EXPR_STATEMENT	253:3	253:14	8	* mp ++ = 'l' ;
EXPR	253:3	253:3	9	* mp ++ = 'l'
ASSIGN	253:3	253:11	10	* mp ++ = 'l'
LVAL	253:3	253:3	11	* mp ++
UNARY_EXPR	253:3	253:4	12	* mp ++
UNARY_OPERATOR	253:3	253:3	13	*
LEAF_NODE	253:3	253:3	14	*
FIELD	253:4	253:6	13	mp ++
LEAF_NODE	253:4	253:4	14	mp
LEAF_NODE	253:6	253:6	14	++
ASSIGN_OP	253:9	253:9	11	=
LEAF_NODE	253:9	253:9	12	=
RVAL	253:11	253:11	11	'l'
FIELD	253:11	253:11	12	'l'
LEAF_NODE	253:11	253:11	13	'l'
LEAF_NODE	253:14	253:14	9	;
EXPR_STATEMENT	253:16	253:26	8	* mp = '\0' ;
EXPR	253:16	253:16	9	* mp = '\0'
ASSIGN	253:16	253:22	10	* mp = '\0'
LVAL	253:16	253:16	11	* mp
UNARY_EXPR	253:16	253:17	12	* mp
UNARY_OPERATOR	253:16	253:16	13	*
LEAF_NODE	253:16	253:16	14	*
FIELD	253:17	253:17	13	mp
LEAF_NODE	253:17	253:17	14	mp
ASSIGN_OP	253:20	253:20	11	=
LEAF_NODE	253:20	253:20	12	=
RVAL	253:22	253:22	11	'\0'
FIELD	253:22	253:22	12	'\0'
LEAF_NODE	253:22	253:22	13	'\0'
LEAF_NODE	253:26	253:26	9	;
JUMP_STATEMENT	254:3	254:8	8	break DESTINATION ;
KEYWORD	254:3	254:3	9	break
LEAF_NODE	254:3	254:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	254:8	254:8	9	;
LEAF_NODE	255:2	255:2	8	case
LEAF_NODE	255:7	255:7	8	'M'
LEAF_NODE	255:10	255:10	8	:
EXPR_STATEMENT	256:3	256:14	8	* mp ++ = 'm' ;
EXPR	256:3	256:3	9	* mp ++ = 'm'
ASSIGN	256:3	256:11	10	* mp ++ = 'm'
LVAL	256:3	256:3	11	* mp ++
UNARY_EXPR	256:3	256:4	12	* mp ++
UNARY_OPERATOR	256:3	256:3	13	*
LEAF_NODE	256:3	256:3	14	*
FIELD	256:4	256:6	13	mp ++
LEAF_NODE	256:4	256:4	14	mp
LEAF_NODE	256:6	256:6	14	++
ASSIGN_OP	256:9	256:9	11	=
LEAF_NODE	256:9	256:9	12	=
RVAL	256:11	256:11	11	'm'
FIELD	256:11	256:11	12	'm'
LEAF_NODE	256:11	256:11	13	'm'
LEAF_NODE	256:14	256:14	9	;
EXPR_STATEMENT	256:16	256:26	8	* mp = '\0' ;
EXPR	256:16	256:16	9	* mp = '\0'
ASSIGN	256:16	256:22	10	* mp = '\0'
LVAL	256:16	256:16	11	* mp
UNARY_EXPR	256:16	256:17	12	* mp
UNARY_OPERATOR	256:16	256:16	13	*
LEAF_NODE	256:16	256:16	14	*
FIELD	256:17	256:17	13	mp
LEAF_NODE	256:17	256:17	14	mp
ASSIGN_OP	256:20	256:20	11	=
LEAF_NODE	256:20	256:20	12	=
RVAL	256:22	256:22	11	'\0'
FIELD	256:22	256:22	12	'\0'
LEAF_NODE	256:22	256:22	13	'\0'
LEAF_NODE	256:26	256:26	9	;
JUMP_STATEMENT	257:3	257:8	8	break DESTINATION ;
KEYWORD	257:3	257:3	9	break
LEAF_NODE	257:3	257:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	257:8	257:8	9	;
LEAF_NODE	258:2	258:2	8	case
LEAF_NODE	258:7	258:7	8	'C'
LEAF_NODE	258:10	258:10	8	:
EXPR_STATEMENT	259:3	259:14	8	* mp ++ = 'c' ;
EXPR	259:3	259:3	9	* mp ++ = 'c'
ASSIGN	259:3	259:11	10	* mp ++ = 'c'
LVAL	259:3	259:3	11	* mp ++
UNARY_EXPR	259:3	259:4	12	* mp ++
UNARY_OPERATOR	259:3	259:3	13	*
LEAF_NODE	259:3	259:3	14	*
FIELD	259:4	259:6	13	mp ++
LEAF_NODE	259:4	259:4	14	mp
LEAF_NODE	259:6	259:6	14	++
ASSIGN_OP	259:9	259:9	11	=
LEAF_NODE	259:9	259:9	12	=
RVAL	259:11	259:11	11	'c'
FIELD	259:11	259:11	12	'c'
LEAF_NODE	259:11	259:11	13	'c'
LEAF_NODE	259:14	259:14	9	;
EXPR_STATEMENT	259:16	259:26	8	* mp = '\0' ;
EXPR	259:16	259:16	9	* mp = '\0'
ASSIGN	259:16	259:22	10	* mp = '\0'
LVAL	259:16	259:16	11	* mp
UNARY_EXPR	259:16	259:17	12	* mp
UNARY_OPERATOR	259:16	259:16	13	*
LEAF_NODE	259:16	259:16	14	*
FIELD	259:17	259:17	13	mp
LEAF_NODE	259:17	259:17	14	mp
ASSIGN_OP	259:20	259:20	11	=
LEAF_NODE	259:20	259:20	12	=
RVAL	259:22	259:22	11	'\0'
FIELD	259:22	259:22	12	'\0'
LEAF_NODE	259:22	259:22	13	'\0'
LEAF_NODE	259:26	259:26	9	;
JUMP_STATEMENT	260:3	260:8	8	break DESTINATION ;
KEYWORD	260:3	260:3	9	break
LEAF_NODE	260:3	260:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	260:8	260:8	9	;
LEAF_NODE	261:2	261:2	8	case
LEAF_NODE	261:7	261:7	8	'8'
LEAF_NODE	261:10	261:10	8	:
EXPR_STATEMENT	262:3	262:14	8	* mp ++ = '8' ;
EXPR	262:3	262:3	9	* mp ++ = '8'
ASSIGN	262:3	262:11	10	* mp ++ = '8'
LVAL	262:3	262:3	11	* mp ++
UNARY_EXPR	262:3	262:4	12	* mp ++
UNARY_OPERATOR	262:3	262:3	13	*
LEAF_NODE	262:3	262:3	14	*
FIELD	262:4	262:6	13	mp ++
LEAF_NODE	262:4	262:4	14	mp
LEAF_NODE	262:6	262:6	14	++
ASSIGN_OP	262:9	262:9	11	=
LEAF_NODE	262:9	262:9	12	=
RVAL	262:11	262:11	11	'8'
FIELD	262:11	262:11	12	'8'
LEAF_NODE	262:11	262:11	13	'8'
LEAF_NODE	262:14	262:14	9	;
EXPR_STATEMENT	262:16	262:26	8	* mp = '\0' ;
EXPR	262:16	262:16	9	* mp = '\0'
ASSIGN	262:16	262:22	10	* mp = '\0'
LVAL	262:16	262:16	11	* mp
UNARY_EXPR	262:16	262:17	12	* mp
UNARY_OPERATOR	262:16	262:16	13	*
LEAF_NODE	262:16	262:16	14	*
FIELD	262:17	262:17	13	mp
LEAF_NODE	262:17	262:17	14	mp
ASSIGN_OP	262:20	262:20	11	=
LEAF_NODE	262:20	262:20	12	=
RVAL	262:22	262:22	11	'\0'
FIELD	262:22	262:22	12	'\0'
LEAF_NODE	262:22	262:22	13	'\0'
LEAF_NODE	262:26	262:26	9	;
JUMP_STATEMENT	263:3	263:8	8	break DESTINATION ;
KEYWORD	263:3	263:3	9	break
LEAF_NODE	263:3	263:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	263:8	263:8	9	;
LEAF_NODE	264:2	264:2	8	case
LEAF_NODE	264:7	264:7	8	'x'
LEAF_NODE	264:10	264:10	8	:
EXPR_STATEMENT	265:3	265:16	8	pageInSeq = 1 ;
EXPR	265:3	265:3	9	pageInSeq = 1
ASSIGN	265:3	265:15	10	pageInSeq = 1
LVAL	265:3	265:3	11	pageInSeq
FIELD	265:3	265:3	12	pageInSeq
LEAF_NODE	265:3	265:3	13	pageInSeq
ASSIGN_OP	265:13	265:13	11	=
LEAF_NODE	265:13	265:13	12	=
RVAL	265:15	265:15	11	1
FIELD	265:15	265:15	12	1
LEAF_NODE	265:15	265:15	13	1
LEAF_NODE	265:16	265:16	9	;
JUMP_STATEMENT	266:3	266:8	8	break DESTINATION ;
KEYWORD	266:3	266:3	9	break
LEAF_NODE	266:3	266:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	266:8	266:8	9	;
LEAF_NODE	267:2	267:2	8	case
LEAF_NODE	267:7	267:7	8	'?'
LEAF_NODE	267:10	267:10	8	:
EXPR_STATEMENT	268:3	268:10	8	usage ( ) ;
EXPR	268:3	268:3	9	usage ( )
FUNCTION_CALL	268:3	268:9	10	usage ( )
CALLEE	268:3	268:3	11	usage
LEAF_NODE	268:3	268:3	12	usage
LEAF_NODE	268:8	268:8	11	(
LEAF_NODE	268:9	268:9	11	)
LEAF_NODE	268:10	268:10	9	;
LEAF_NODE	270:2	270:2	7	}
SELECTION	271:1	272:2	3	
KEYWORD	271:1	271:1	4	if
LEAF_NODE	271:1	271:1	5	if
LEAF_NODE	271:4	271:4	4	(
CONDITION	271:5	271:5	4	argc - optind < 2
EXPR	271:5	271:21	5	argc - optind < 2
FIELD	271:5	271:5	6	argc
LEAF_NODE	271:5	271:5	7	argc
LEAF_NODE	271:10	271:10	6	-
FIELD	271:12	271:12	6	optind
LEAF_NODE	271:12	271:12	7	optind
REL_OPERATOR	271:19	271:19	6	<
LEAF_NODE	271:19	271:19	7	<
FIELD	271:21	271:21	6	2
LEAF_NODE	271:21	271:21	7	2
LEAF_NODE	271:22	271:22	4	)
STATEMENTS	272:2	272:2	4	
EXPR_STATEMENT	272:2	272:9	5	usage ( ) ;
EXPR	272:2	272:2	6	usage ( )
FUNCTION_CALL	272:2	272:8	7	usage ( )
CALLEE	272:2	272:2	8	usage
LEAF_NODE	272:2	272:2	9	usage
LEAF_NODE	272:7	272:7	8	(
LEAF_NODE	272:8	272:8	8	)
LEAF_NODE	272:9	272:9	6	;
EXPR_STATEMENT	273:1	273:35	3	out = TIFFOpen ( argv [ argc - 1 ] , mode ) ;
EXPR	273:1	273:1	4	out = TIFFOpen ( argv [ argc - 1 ] , mode )
ASSIGN	273:1	273:7	5	out = TIFFOpen ( argv [ argc - 1 ] , mode )
LVAL	273:1	273:1	6	out
FIELD	273:1	273:1	7	out
LEAF_NODE	273:1	273:1	8	out
ASSIGN_OP	273:5	273:5	6	=
LEAF_NODE	273:5	273:5	7	=
RVAL	273:7	273:7	6	TIFFOpen ( argv [ argc - 1 ] , mode )
FUNCTION_CALL	273:7	273:34	7	TIFFOpen ( argv [ argc - 1 ] , mode )
CALLEE	273:7	273:7	8	TIFFOpen
LEAF_NODE	273:7	273:7	9	TIFFOpen
LEAF_NODE	273:15	273:15	8	(
ARGUMENT	273:16	273:16	8	argv [ argc - 1 ]
FIELD	273:16	273:27	9	argv [ argc - 1 ]
LEAF_NODE	273:16	273:16	10	argv
LEAF_NODE	273:20	273:20	10	[
EXPR	273:21	273:26	10	argc - 1
FIELD	273:21	273:21	11	argc
LEAF_NODE	273:21	273:21	12	argc
LEAF_NODE	273:25	273:25	11	-
FIELD	273:26	273:26	11	1
LEAF_NODE	273:26	273:26	12	1
LEAF_NODE	273:27	273:27	10	]
LEAF_NODE	273:28	273:28	8	,
ARGUMENT	273:30	273:30	8	mode
FIELD	273:30	273:30	9	mode
LEAF_NODE	273:30	273:30	10	mode
LEAF_NODE	273:34	273:34	8	)
LEAF_NODE	273:35	273:35	4	;
SELECTION	274:1	275:2	3	
KEYWORD	274:1	274:1	4	if
LEAF_NODE	274:1	274:1	5	if
LEAF_NODE	274:4	274:4	4	(
CONDITION	274:5	274:5	4	out == NULL
EXPR	274:5	274:12	5	out == NULL
FIELD	274:5	274:5	6	out
LEAF_NODE	274:5	274:5	7	out
EQ_OPERATOR	274:9	274:9	6	==
LEAF_NODE	274:9	274:9	7	==
FIELD	274:12	274:12	6	NULL
LEAF_NODE	274:12	274:12	7	NULL
LEAF_NODE	274:16	274:16	4	)
STATEMENTS	275:2	275:2	4	
JUMP_STATEMENT	275:2	275:13	5	return ( - 2 ) ;
KEYWORD	275:2	275:2	6	return
LEAF_NODE	275:2	275:2	7	return
DESTINATION	275:9	275:9	6	( - 2 )
EXPR	275:9	275:12	7	( - 2 )
LEAF_NODE	275:9	275:9	8	(
UNARY_EXPR	275:10	275:11	8	- 2
UNARY_OPERATOR	275:10	275:10	9	-
LEAF_NODE	275:10	275:10	10	-
FIELD	275:11	275:11	9	2
LEAF_NODE	275:11	275:11	10	2
LEAF_NODE	275:12	275:12	8	)
LEAF_NODE	275:13	275:13	6	;
SELECTION	276:1	277:2	3	
KEYWORD	276:1	276:1	4	if
LEAF_NODE	276:1	276:1	5	if
LEAF_NODE	276:4	276:4	4	(
CONDITION	276:5	276:5	4	( argc - optind ) == 2
EXPR	276:5	276:24	5	( argc - optind ) == 2
LEAF_NODE	276:5	276:5	6	(
FIELD	276:6	276:6	6	argc
LEAF_NODE	276:6	276:6	7	argc
LEAF_NODE	276:11	276:11	6	-
FIELD	276:13	276:13	6	optind
LEAF_NODE	276:13	276:13	7	optind
LEAF_NODE	276:19	276:19	6	)
EQ_OPERATOR	276:21	276:21	6	==
LEAF_NODE	276:21	276:21	7	==
FIELD	276:24	276:24	6	2
LEAF_NODE	276:24	276:24	7	2
LEAF_NODE	276:25	276:25	4	)
STATEMENTS	277:2	277:2	4	
EXPR_STATEMENT	277:2	277:14	5	pageNum = - 1 ;
EXPR	277:2	277:2	6	pageNum = - 1
ASSIGN	277:2	277:12	7	pageNum = - 1
LVAL	277:2	277:2	8	pageNum
FIELD	277:2	277:2	9	pageNum
LEAF_NODE	277:2	277:2	10	pageNum
ASSIGN_OP	277:10	277:10	8	=
LEAF_NODE	277:10	277:10	9	=
RVAL	277:12	277:12	8	- 1
UNARY_EXPR	277:12	277:13	9	- 1
UNARY_OPERATOR	277:12	277:12	10	-
LEAF_NODE	277:12	277:12	11	-
FIELD	277:13	277:13	10	1
LEAF_NODE	277:13	277:13	11	1
LEAF_NODE	277:14	277:14	6	;
ITERATION	278:1	278:36	3	
KEYWORD	278:1	278:1	4	for
LEAF_NODE	278:1	278:1	5	for
LEAF_NODE	278:5	278:5	4	(
FOR_INIT	278:6	278:6	4	;
LEAF_NODE	278:6	278:6	5	;
CONDITION	278:8	278:8	4	optind < argc - 1
EXPR	278:8	278:22	5	optind < argc - 1
FIELD	278:8	278:8	6	optind
LEAF_NODE	278:8	278:8	7	optind
REL_OPERATOR	278:15	278:15	6	<
LEAF_NODE	278:15	278:15	7	<
FIELD	278:17	278:17	6	argc
LEAF_NODE	278:17	278:17	7	argc
LEAF_NODE	278:21	278:21	6	-
FIELD	278:22	278:22	6	1
LEAF_NODE	278:22	278:22	7	1
LEAF_NODE	278:24	278:24	4	;
FOR_EXPR	278:26	278:26	4	optind ++
EXPR	278:26	278:26	5	optind ++
FIELD	278:26	278:32	6	optind ++
LEAF_NODE	278:26	278:26	7	optind
LEAF_NODE	278:32	278:32	7	++
LEAF_NODE	278:34	278:34	4	)
STATEMENTS	278:36	313:1	4	
LEAF_NODE	278:36	278:36	5	{
STATEMENTS	279:2	312:2	5	
SIMPLE_DECL	279:2	279:34	6	char * imageCursor ; imageCursor = argv [ optind ] ;
VAR_DECL	279:2	279:8	7	char * imageCursor ; imageCursor = argv [ optind ]
TYPE	279:2	279:7	8	char *
TYPE_NAME	279:2	279:2	9	char
LEAF_NODE	279:2	279:2	10	char
POINTER	279:7	279:7	9	*
LEAF_NODE	279:7	279:7	10	*
NAME	279:8	279:8	8	imageCursor
LEAF_NODE	279:8	279:8	9	imageCursor
LEAF_NODE	0:0	0:0	8	;
INIT	279:8	279:8	8	imageCursor = argv [ optind ]
ASSIGN	279:8	279:22	9	imageCursor = argv [ optind ]
LVAL	279:8	279:8	10	imageCursor
NAME	279:8	279:8	11	imageCursor
LEAF_NODE	279:8	279:8	12	imageCursor
ASSIGN_OP	279:20	279:20	10	=
LEAF_NODE	279:20	279:20	11	=
RVAL	279:22	279:22	10	argv [ optind ]
FIELD	279:22	279:33	11	argv [ optind ]
LEAF_NODE	279:22	279:22	12	argv
LEAF_NODE	279:26	279:26	12	[
EXPR	279:27	279:27	12	optind
FIELD	279:27	279:27	13	optind
LEAF_NODE	279:27	279:27	14	optind
LEAF_NODE	279:33	279:33	12	]
LEAF_NODE	279:34	279:34	7	;
EXPR_STATEMENT	280:2	280:34	6	in = openSrcImage ( & imageCursor ) ;
EXPR	280:2	280:2	7	in = openSrcImage ( & imageCursor )
ASSIGN	280:2	280:7	8	in = openSrcImage ( & imageCursor )
LVAL	280:2	280:2	9	in
FIELD	280:2	280:2	10	in
LEAF_NODE	280:2	280:2	11	in
ASSIGN_OP	280:5	280:5	9	=
LEAF_NODE	280:5	280:5	10	=
RVAL	280:7	280:7	9	openSrcImage ( & imageCursor )
FUNCTION_CALL	280:7	280:33	10	openSrcImage ( & imageCursor )
CALLEE	280:7	280:7	11	openSrcImage
LEAF_NODE	280:7	280:7	12	openSrcImage
LEAF_NODE	280:20	280:20	11	(
ARGUMENT	280:21	280:21	11	& imageCursor
UNARY_EXPR	280:21	280:22	12	& imageCursor
UNARY_OPERATOR	280:21	280:21	13	&
LEAF_NODE	280:21	280:21	14	&
FIELD	280:22	280:22	13	imageCursor
LEAF_NODE	280:22	280:22	14	imageCursor
LEAF_NODE	280:33	280:33	11	)
LEAF_NODE	280:34	280:34	7	;
SELECTION	281:2	281:18	6	
KEYWORD	281:2	281:2	7	if
LEAF_NODE	281:2	281:2	8	if
LEAF_NODE	281:5	281:5	7	(
CONDITION	281:6	281:6	7	in == NULL
EXPR	281:6	281:12	8	in == NULL
FIELD	281:6	281:6	9	in
LEAF_NODE	281:6	281:6	10	in
EQ_OPERATOR	281:9	281:9	9	==
LEAF_NODE	281:9	281:9	10	==
FIELD	281:12	281:12	9	NULL
LEAF_NODE	281:12	281:12	10	NULL
LEAF_NODE	281:16	281:16	7	)
STATEMENTS	281:18	284:2	7	
LEAF_NODE	281:18	281:18	8	{
STATEMENTS	282:3	283:3	8	
EXPR_STATEMENT	282:3	282:24	9	( void ) TIFFClose ( out ) ;
EXPR	282:3	282:10	10	( void ) TIFFClose ( out )
LEAF_NODE	282:3	282:3	11	(
TYPE_NAME	282:4	282:4	11	void
LEAF_NODE	282:4	282:4	12	void
LEAF_NODE	282:8	282:8	11	)
FUNCTION_CALL	282:10	282:23	11	TIFFClose ( out )
CALLEE	282:10	282:10	12	TIFFClose
LEAF_NODE	282:10	282:10	13	TIFFClose
LEAF_NODE	282:19	282:19	12	(
ARGUMENT	282:20	282:20	12	out
FIELD	282:20	282:20	13	out
LEAF_NODE	282:20	282:20	14	out
LEAF_NODE	282:23	282:23	12	)
LEAF_NODE	282:24	282:24	10	;
JUMP_STATEMENT	283:3	283:14	9	return ( - 3 ) ;
KEYWORD	283:3	283:3	10	return
LEAF_NODE	283:3	283:3	11	return
DESTINATION	283:10	283:10	10	( - 3 )
EXPR	283:10	283:13	11	( - 3 )
LEAF_NODE	283:10	283:10	12	(
UNARY_EXPR	283:11	283:12	12	- 3
UNARY_OPERATOR	283:11	283:11	13	-
LEAF_NODE	283:11	283:11	14	-
FIELD	283:12	283:12	13	3
LEAF_NODE	283:12	283:12	14	3
LEAF_NODE	283:13	283:13	12	)
LEAF_NODE	283:14	283:14	10	;
LEAF_NODE	284:2	284:2	8	}
SELECTION	285:2	285:55	6	
KEYWORD	285:2	285:2	7	if
LEAF_NODE	285:2	285:2	8	if
LEAF_NODE	285:5	285:5	7	(
CONDITION	285:6	285:6	7	diroff != 0 && ! TIFFSetSubDirectory ( in , diroff )
EXPR	285:6	285:6	8	diroff != 0 && ! TIFFSetSubDirectory ( in , diroff )
AND	285:6	285:21	9	diroff != 0 && ! TIFFSetSubDirectory ( in , diroff )
EXPR	285:6	285:16	10	diroff != 0
FIELD	285:6	285:6	11	diroff
LEAF_NODE	285:6	285:6	12	diroff
EQ_OPERATOR	285:13	285:13	11	!=
LEAF_NODE	285:13	285:13	12	!=
FIELD	285:16	285:16	11	0
LEAF_NODE	285:16	285:16	12	0
LEAF_NODE	285:18	285:18	10	&&
EXPR	285:21	285:21	10	! TIFFSetSubDirectory ( in , diroff )
UNARY_EXPR	285:21	285:22	11	! TIFFSetSubDirectory ( in , diroff )
UNARY_OPERATOR	285:21	285:21	12	!
LEAF_NODE	285:21	285:21	13	!
FUNCTION_CALL	285:22	285:52	12	TIFFSetSubDirectory ( in , diroff )
CALLEE	285:22	285:22	13	TIFFSetSubDirectory
LEAF_NODE	285:22	285:22	14	TIFFSetSubDirectory
LEAF_NODE	285:41	285:41	13	(
ARGUMENT	285:42	285:42	13	in
FIELD	285:42	285:42	14	in
LEAF_NODE	285:42	285:42	15	in
LEAF_NODE	285:44	285:44	13	,
ARGUMENT	285:46	285:46	13	diroff
FIELD	285:46	285:46	14	diroff
LEAF_NODE	285:46	285:46	15	diroff
LEAF_NODE	285:52	285:52	13	)
LEAF_NODE	285:53	285:53	7	)
STATEMENTS	285:55	291:2	7	
LEAF_NODE	285:55	285:55	8	{
STATEMENTS	286:3	290:3	8	
LEAF_NODE	286:3	286:3	9	TIFFError
LEAF_NODE	286:12	286:12	9	(
LEAF_NODE	286:13	286:13	9	TIFFFileName
LEAF_NODE	286:25	286:25	9	(
LEAF_NODE	286:26	286:26	9	in
LEAF_NODE	286:28	286:28	9	)
LEAF_NODE	286:29	286:29	9	,
LEAF_NODE	287:7	287:7	9	"Error, setting subdirectory at "
LEAF_NODE	287:41	287:41	9	TIFF_UINT64_FORMAT
LEAF_NODE	287:59	287:59	9	,
LEAF_NODE	287:61	287:61	9	diroff
LEAF_NODE	287:67	287:67	9	)
LEAF_NODE	287:68	287:68	9	;
EXPR_STATEMENT	288:3	288:23	9	( void ) TIFFClose ( in ) ;
EXPR	288:3	288:10	10	( void ) TIFFClose ( in )
LEAF_NODE	288:3	288:3	11	(
TYPE_NAME	288:4	288:4	11	void
LEAF_NODE	288:4	288:4	12	void
LEAF_NODE	288:8	288:8	11	)
FUNCTION_CALL	288:10	288:22	11	TIFFClose ( in )
CALLEE	288:10	288:10	12	TIFFClose
LEAF_NODE	288:10	288:10	13	TIFFClose
LEAF_NODE	288:19	288:19	12	(
ARGUMENT	288:20	288:20	12	in
FIELD	288:20	288:20	13	in
LEAF_NODE	288:20	288:20	14	in
LEAF_NODE	288:22	288:22	12	)
LEAF_NODE	288:23	288:23	10	;
EXPR_STATEMENT	289:3	289:24	9	( void ) TIFFClose ( out ) ;
EXPR	289:3	289:10	10	( void ) TIFFClose ( out )
LEAF_NODE	289:3	289:3	11	(
TYPE_NAME	289:4	289:4	11	void
LEAF_NODE	289:4	289:4	12	void
LEAF_NODE	289:8	289:8	11	)
FUNCTION_CALL	289:10	289:23	11	TIFFClose ( out )
CALLEE	289:10	289:10	12	TIFFClose
LEAF_NODE	289:10	289:10	13	TIFFClose
LEAF_NODE	289:19	289:19	12	(
ARGUMENT	289:20	289:20	12	out
FIELD	289:20	289:20	13	out
LEAF_NODE	289:20	289:20	14	out
LEAF_NODE	289:23	289:23	12	)
LEAF_NODE	289:24	289:24	10	;
JUMP_STATEMENT	290:3	290:13	9	return ( 1 ) ;
KEYWORD	290:3	290:3	10	return
LEAF_NODE	290:3	290:3	11	return
DESTINATION	290:10	290:10	10	( 1 )
EXPR	290:10	290:12	11	( 1 )
LEAF_NODE	290:10	290:10	12	(
FIELD	290:11	290:11	12	1
LEAF_NODE	290:11	290:11	13	1
LEAF_NODE	290:12	290:12	12	)
LEAF_NODE	290:13	290:13	10	;
LEAF_NODE	291:2	291:2	8	}
ITERATION	292:2	292:11	6	
KEYWORD	292:2	292:2	7	for
LEAF_NODE	292:2	292:2	8	for
LEAF_NODE	292:6	292:6	7	(
FOR_INIT	292:7	292:7	7	;
LEAF_NODE	292:7	292:7	8	;
LEAF_NODE	0:0	0:0	7	CONDITION
LEAF_NODE	292:8	292:8	7	;
LEAF_NODE	0:0	0:0	7	FOR_EXPR
LEAF_NODE	292:9	292:9	7	)
STATEMENTS	292:11	311:2	7	
LEAF_NODE	292:11	292:11	8	{
STATEMENTS	293:3	309:4	8	
EXPR_STATEMENT	293:3	293:21	9	config = defconfig ;
EXPR	293:3	293:3	10	config = defconfig
ASSIGN	293:3	293:12	11	config = defconfig
LVAL	293:3	293:3	12	config
FIELD	293:3	293:3	13	config
LEAF_NODE	293:3	293:3	14	config
ASSIGN_OP	293:10	293:10	12	=
LEAF_NODE	293:10	293:10	13	=
RVAL	293:12	293:12	12	defconfig
FIELD	293:12	293:12	13	defconfig
LEAF_NODE	293:12	293:12	14	defconfig
LEAF_NODE	293:21	293:21	10	;
EXPR_STATEMENT	294:3	294:31	9	compression = defcompression ;
EXPR	294:3	294:3	10	compression = defcompression
ASSIGN	294:3	294:17	11	compression = defcompression
LVAL	294:3	294:3	12	compression
FIELD	294:3	294:3	13	compression
LEAF_NODE	294:3	294:3	14	compression
ASSIGN_OP	294:15	294:15	12	=
LEAF_NODE	294:15	294:15	13	=
RVAL	294:17	294:17	12	defcompression
FIELD	294:17	294:17	13	defcompression
LEAF_NODE	294:17	294:17	14	defcompression
LEAF_NODE	294:31	294:31	10	;
EXPR_STATEMENT	295:3	295:27	9	predictor = defpredictor ;
EXPR	295:3	295:3	10	predictor = defpredictor
ASSIGN	295:3	295:15	11	predictor = defpredictor
LVAL	295:3	295:3	12	predictor
FIELD	295:3	295:3	13	predictor
LEAF_NODE	295:3	295:3	14	predictor
ASSIGN_OP	295:13	295:13	12	=
LEAF_NODE	295:13	295:13	13	=
RVAL	295:15	295:15	12	defpredictor
FIELD	295:15	295:15	13	defpredictor
LEAF_NODE	295:15	295:15	14	defpredictor
LEAF_NODE	295:27	295:27	10	;
EXPR_STATEMENT	296:24	296:42	9	preset = defpreset ;
EXPR	296:24	296:24	10	preset = defpreset
ASSIGN	296:24	296:33	11	preset = defpreset
LVAL	296:24	296:24	12	preset
FIELD	296:24	296:24	13	preset
LEAF_NODE	296:24	296:24	14	preset
ASSIGN_OP	296:31	296:31	12	=
LEAF_NODE	296:31	296:31	13	=
RVAL	296:33	296:33	12	defpreset
FIELD	296:33	296:33	13	defpreset
LEAF_NODE	296:33	296:33	14	defpreset
LEAF_NODE	296:42	296:42	10	;
EXPR_STATEMENT	297:3	297:27	9	fillorder = deffillorder ;
EXPR	297:3	297:3	10	fillorder = deffillorder
ASSIGN	297:3	297:15	11	fillorder = deffillorder
LVAL	297:3	297:3	12	fillorder
FIELD	297:3	297:3	13	fillorder
LEAF_NODE	297:3	297:3	14	fillorder
ASSIGN_OP	297:13	297:13	12	=
LEAF_NODE	297:13	297:13	13	=
RVAL	297:15	297:15	12	deffillorder
FIELD	297:15	297:15	13	deffillorder
LEAF_NODE	297:15	297:15	14	deffillorder
LEAF_NODE	297:27	297:27	10	;
EXPR_STATEMENT	298:3	298:33	9	rowsperstrip = defrowsperstrip ;
EXPR	298:3	298:3	10	rowsperstrip = defrowsperstrip
ASSIGN	298:3	298:18	11	rowsperstrip = defrowsperstrip
LVAL	298:3	298:3	12	rowsperstrip
FIELD	298:3	298:3	13	rowsperstrip
LEAF_NODE	298:3	298:3	14	rowsperstrip
ASSIGN_OP	298:16	298:16	12	=
LEAF_NODE	298:16	298:16	13	=
RVAL	298:18	298:18	12	defrowsperstrip
FIELD	298:18	298:18	13	defrowsperstrip
LEAF_NODE	298:18	298:18	14	defrowsperstrip
LEAF_NODE	298:33	298:33	10	;
EXPR_STATEMENT	299:3	299:27	9	tilewidth = deftilewidth ;
EXPR	299:3	299:3	10	tilewidth = deftilewidth
ASSIGN	299:3	299:15	11	tilewidth = deftilewidth
LVAL	299:3	299:3	12	tilewidth
FIELD	299:3	299:3	13	tilewidth
LEAF_NODE	299:3	299:3	14	tilewidth
ASSIGN_OP	299:13	299:13	12	=
LEAF_NODE	299:13	299:13	13	=
RVAL	299:15	299:15	12	deftilewidth
FIELD	299:15	299:15	13	deftilewidth
LEAF_NODE	299:15	299:15	14	deftilewidth
LEAF_NODE	299:27	299:27	10	;
EXPR_STATEMENT	300:3	300:29	9	tilelength = deftilelength ;
EXPR	300:3	300:3	10	tilelength = deftilelength
ASSIGN	300:3	300:16	11	tilelength = deftilelength
LVAL	300:3	300:3	12	tilelength
FIELD	300:3	300:3	13	tilelength
LEAF_NODE	300:3	300:3	14	tilelength
ASSIGN_OP	300:14	300:14	12	=
LEAF_NODE	300:14	300:14	13	=
RVAL	300:16	300:16	12	deftilelength
FIELD	300:16	300:16	13	deftilelength
LEAF_NODE	300:16	300:16	14	deftilelength
LEAF_NODE	300:29	300:29	10	;
EXPR_STATEMENT	301:3	301:21	9	g3opts = defg3opts ;
EXPR	301:3	301:3	10	g3opts = defg3opts
ASSIGN	301:3	301:12	11	g3opts = defg3opts
LVAL	301:3	301:3	12	g3opts
FIELD	301:3	301:3	13	g3opts
LEAF_NODE	301:3	301:3	14	g3opts
ASSIGN_OP	301:10	301:10	12	=
LEAF_NODE	301:10	301:10	13	=
RVAL	301:12	301:12	12	defg3opts
FIELD	301:12	301:12	13	defg3opts
LEAF_NODE	301:12	301:12	14	defg3opts
LEAF_NODE	301:21	301:21	10	;
SELECTION	302:3	302:53	9	
KEYWORD	302:3	302:3	10	if
LEAF_NODE	302:3	302:3	11	if
LEAF_NODE	302:6	302:6	10	(
CONDITION	302:7	302:7	10	! tiffcp ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	302:7	302:7	11	! tiffcp ( in , out ) || ! TIFFWriteDirectory ( out )
OR	302:7	302:27	12	! tiffcp ( in , out ) || ! TIFFWriteDirectory ( out )
EXPR	302:7	302:7	13	! tiffcp ( in , out )
UNARY_EXPR	302:7	302:8	14	! tiffcp ( in , out )
UNARY_OPERATOR	302:7	302:7	15	!
LEAF_NODE	302:7	302:7	16	!
FUNCTION_CALL	302:8	302:22	15	tiffcp ( in , out )
CALLEE	302:8	302:8	16	tiffcp
LEAF_NODE	302:8	302:8	17	tiffcp
LEAF_NODE	302:14	302:14	16	(
ARGUMENT	302:15	302:15	16	in
FIELD	302:15	302:15	17	in
LEAF_NODE	302:15	302:15	18	in
LEAF_NODE	302:17	302:17	16	,
ARGUMENT	302:19	302:19	16	out
FIELD	302:19	302:19	17	out
LEAF_NODE	302:19	302:19	18	out
LEAF_NODE	302:22	302:22	16	)
LEAF_NODE	302:24	302:24	13	||
EXPR	302:27	302:27	13	! TIFFWriteDirectory ( out )
UNARY_EXPR	302:27	302:28	14	! TIFFWriteDirectory ( out )
UNARY_OPERATOR	302:27	302:27	15	!
LEAF_NODE	302:27	302:27	16	!
FUNCTION_CALL	302:28	302:50	15	TIFFWriteDirectory ( out )
CALLEE	302:28	302:28	16	TIFFWriteDirectory
LEAF_NODE	302:28	302:28	17	TIFFWriteDirectory
LEAF_NODE	302:46	302:46	16	(
ARGUMENT	302:47	302:47	16	out
FIELD	302:47	302:47	17	out
LEAF_NODE	302:47	302:47	18	out
LEAF_NODE	302:50	302:50	16	)
LEAF_NODE	302:51	302:51	10	)
STATEMENTS	302:53	306:3	10	
LEAF_NODE	302:53	302:53	11	{
STATEMENTS	303:4	305:4	11	
EXPR_STATEMENT	303:4	303:24	12	( void ) TIFFClose ( in ) ;
EXPR	303:4	303:11	13	( void ) TIFFClose ( in )
LEAF_NODE	303:4	303:4	14	(
TYPE_NAME	303:5	303:5	14	void
LEAF_NODE	303:5	303:5	15	void
LEAF_NODE	303:9	303:9	14	)
FUNCTION_CALL	303:11	303:23	14	TIFFClose ( in )
CALLEE	303:11	303:11	15	TIFFClose
LEAF_NODE	303:11	303:11	16	TIFFClose
LEAF_NODE	303:20	303:20	15	(
ARGUMENT	303:21	303:21	15	in
FIELD	303:21	303:21	16	in
LEAF_NODE	303:21	303:21	17	in
LEAF_NODE	303:23	303:23	15	)
LEAF_NODE	303:24	303:24	13	;
EXPR_STATEMENT	304:4	304:25	12	( void ) TIFFClose ( out ) ;
EXPR	304:4	304:11	13	( void ) TIFFClose ( out )
LEAF_NODE	304:4	304:4	14	(
TYPE_NAME	304:5	304:5	14	void
LEAF_NODE	304:5	304:5	15	void
LEAF_NODE	304:9	304:9	14	)
FUNCTION_CALL	304:11	304:24	14	TIFFClose ( out )
CALLEE	304:11	304:11	15	TIFFClose
LEAF_NODE	304:11	304:11	16	TIFFClose
LEAF_NODE	304:20	304:20	15	(
ARGUMENT	304:21	304:21	15	out
FIELD	304:21	304:21	16	out
LEAF_NODE	304:21	304:21	17	out
LEAF_NODE	304:24	304:24	15	)
LEAF_NODE	304:25	304:25	13	;
JUMP_STATEMENT	305:4	305:14	12	return ( 1 ) ;
KEYWORD	305:4	305:4	13	return
LEAF_NODE	305:4	305:4	14	return
DESTINATION	305:11	305:11	13	( 1 )
EXPR	305:11	305:13	14	( 1 )
LEAF_NODE	305:11	305:11	15	(
FIELD	305:12	305:12	15	1
LEAF_NODE	305:12	305:12	16	1
LEAF_NODE	305:13	305:13	15	)
LEAF_NODE	305:14	305:14	13	;
LEAF_NODE	306:3	306:3	11	}
SELECTION	307:3	307:20	9	
KEYWORD	307:3	307:3	10	if
LEAF_NODE	307:3	307:3	11	if
LEAF_NODE	307:6	307:6	10	(
CONDITION	307:7	307:7	10	imageCursor
EXPR	307:7	307:7	11	imageCursor
FIELD	307:7	307:7	12	imageCursor
LEAF_NODE	307:7	307:7	13	imageCursor
LEAF_NODE	307:18	307:18	10	)
STATEMENTS	307:20	309:3	10	
LEAF_NODE	307:20	307:20	11	{
STATEMENTS	308:4	308:4	11	
SELECTION	308:4	308:41	12	
KEYWORD	308:4	308:4	13	if
LEAF_NODE	308:4	308:4	14	if
LEAF_NODE	308:7	308:7	13	(
CONDITION	308:8	308:8	13	! nextSrcImage ( in , & imageCursor )
EXPR	308:8	308:8	14	! nextSrcImage ( in , & imageCursor )
UNARY_EXPR	308:8	308:9	15	! nextSrcImage ( in , & imageCursor )
UNARY_OPERATOR	308:8	308:8	16	!
LEAF_NODE	308:8	308:8	17	!
FUNCTION_CALL	308:9	308:38	16	nextSrcImage ( in , & imageCursor )
CALLEE	308:9	308:9	17	nextSrcImage
LEAF_NODE	308:9	308:9	18	nextSrcImage
LEAF_NODE	308:21	308:21	17	(
ARGUMENT	308:22	308:22	17	in
FIELD	308:22	308:22	18	in
LEAF_NODE	308:22	308:22	19	in
LEAF_NODE	308:24	308:24	17	,
ARGUMENT	308:26	308:26	17	& imageCursor
UNARY_EXPR	308:26	308:27	18	& imageCursor
UNARY_OPERATOR	308:26	308:26	19	&
LEAF_NODE	308:26	308:26	20	&
FIELD	308:27	308:27	19	imageCursor
LEAF_NODE	308:27	308:27	20	imageCursor
LEAF_NODE	308:38	308:38	17	)
LEAF_NODE	308:39	308:39	13	)
STATEMENTS	308:41	308:41	13	
JUMP_STATEMENT	308:41	308:46	14	break DESTINATION ;
KEYWORD	308:41	308:41	15	break
LEAF_NODE	308:41	308:41	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	308:46	308:46	15	;
LEAF_NODE	309:3	309:3	11	}
SELECTION	309:4	310:4	9	
KEYWORD	309:4	309:4	10	else
LEAF_NODE	309:4	309:4	11	else
STATEMENTS	310:4	310:4	10	
SELECTION	310:4	310:32	11	
KEYWORD	310:4	310:4	12	if
LEAF_NODE	310:4	310:4	13	if
LEAF_NODE	310:7	310:7	12	(
CONDITION	310:8	310:8	12	! TIFFReadDirectory ( in )
EXPR	310:8	310:8	13	! TIFFReadDirectory ( in )
UNARY_EXPR	310:8	310:9	14	! TIFFReadDirectory ( in )
UNARY_OPERATOR	310:8	310:8	15	!
LEAF_NODE	310:8	310:8	16	!
FUNCTION_CALL	310:9	310:29	15	TIFFReadDirectory ( in )
CALLEE	310:9	310:9	16	TIFFReadDirectory
LEAF_NODE	310:9	310:9	17	TIFFReadDirectory
LEAF_NODE	310:26	310:26	16	(
ARGUMENT	310:27	310:27	16	in
FIELD	310:27	310:27	17	in
LEAF_NODE	310:27	310:27	18	in
LEAF_NODE	310:29	310:29	16	)
LEAF_NODE	310:30	310:30	12	)
STATEMENTS	310:32	310:32	12	
JUMP_STATEMENT	310:32	310:37	13	break DESTINATION ;
KEYWORD	310:32	310:32	14	break
LEAF_NODE	310:32	310:32	15	break
LEAF_NODE	0:0	0:0	14	DESTINATION
LEAF_NODE	310:37	310:37	14	;
LEAF_NODE	311:2	311:2	8	}
EXPR_STATEMENT	312:2	312:22	6	( void ) TIFFClose ( in ) ;
EXPR	312:2	312:9	7	( void ) TIFFClose ( in )
LEAF_NODE	312:2	312:2	8	(
TYPE_NAME	312:3	312:3	8	void
LEAF_NODE	312:3	312:3	9	void
LEAF_NODE	312:7	312:7	8	)
FUNCTION_CALL	312:9	312:21	8	TIFFClose ( in )
CALLEE	312:9	312:9	9	TIFFClose
LEAF_NODE	312:9	312:9	10	TIFFClose
LEAF_NODE	312:18	312:18	9	(
ARGUMENT	312:19	312:19	9	in
FIELD	312:19	312:19	10	in
LEAF_NODE	312:19	312:19	11	in
LEAF_NODE	312:21	312:21	9	)
LEAF_NODE	312:22	312:22	7	;
LEAF_NODE	313:1	313:1	5	}
EXPR_STATEMENT	315:1	315:22	3	( void ) TIFFClose ( out ) ;
EXPR	315:1	315:8	4	( void ) TIFFClose ( out )
LEAF_NODE	315:1	315:1	5	(
TYPE_NAME	315:2	315:2	5	void
LEAF_NODE	315:2	315:2	6	void
LEAF_NODE	315:6	315:6	5	)
FUNCTION_CALL	315:8	315:21	5	TIFFClose ( out )
CALLEE	315:8	315:8	6	TIFFClose
LEAF_NODE	315:8	315:8	7	TIFFClose
LEAF_NODE	315:17	315:17	6	(
ARGUMENT	315:18	315:18	6	out
FIELD	315:18	315:18	7	out
LEAF_NODE	315:18	315:18	8	out
LEAF_NODE	315:21	315:21	6	)
LEAF_NODE	315:22	315:22	4	;
JUMP_STATEMENT	316:1	316:11	3	return ( 0 ) ;
KEYWORD	316:1	316:1	4	return
LEAF_NODE	316:1	316:1	5	return
DESTINATION	316:8	316:8	4	( 0 )
EXPR	316:8	316:10	5	( 0 )
LEAF_NODE	316:8	316:8	6	(
FIELD	316:9	316:9	6	0
LEAF_NODE	316:9	316:9	7	0
LEAF_NODE	316:10	316:10	6	)
LEAF_NODE	316:11	316:11	4	;
LEAF_NODE	317:0	317:0	2	}
FUNCTION_DEF	319:0	333:0	1	
RETURN_TYPE	319:0	319:7	2	static void
LEAF_NODE	319:0	319:0	3	static
TYPE_NAME	319:7	319:7	3	void
LEAF_NODE	319:7	319:7	4	void
FUNCTION_NAME	320:0	320:0	2	processZIPOptions
LEAF_NODE	320:0	320:0	3	processZIPOptions
PARAMETER_LIST	320:17	320:26	2	( char * cp )
LEAF_NODE	320:17	320:17	3	(
PARAMETER_DECL	320:18	320:24	3	char * cp
TYPE	320:18	320:22	4	char *
TYPE_NAME	320:18	320:18	5	char
LEAF_NODE	320:18	320:18	6	char
POINTER	320:22	320:22	5	*
LEAF_NODE	320:22	320:22	6	*
NAME	320:24	320:24	4	cp
LEAF_NODE	320:24	320:24	5	cp
LEAF_NODE	320:26	320:26	3	)
LEAF_NODE	321:0	321:0	2	{
STATEMENTS	322:1	322:1	2	
SELECTION	322:1	322:31	3	
KEYWORD	322:1	322:1	4	if
LEAF_NODE	322:1	322:1	5	if
LEAF_NODE	322:4	322:4	4	(
CONDITION	322:6	322:6	4	( cp = strchr ( cp , ':' ) )
EXPR	322:6	322:27	5	( cp = strchr ( cp , ':' ) )
LEAF_NODE	322:6	322:6	6	(
ASSIGN	322:7	322:12	6	cp = strchr ( cp , ':' )
LVAL	322:7	322:7	7	cp
FIELD	322:7	322:7	8	cp
LEAF_NODE	322:7	322:7	9	cp
ASSIGN_OP	322:10	322:10	7	=
LEAF_NODE	322:10	322:10	8	=
RVAL	322:12	322:12	7	strchr ( cp , ':' )
FUNCTION_CALL	322:12	322:26	8	strchr ( cp , ':' )
CALLEE	322:12	322:12	9	strchr
LEAF_NODE	322:12	322:12	10	strchr
LEAF_NODE	322:18	322:18	9	(
ARGUMENT	322:19	322:19	9	cp
FIELD	322:19	322:19	10	cp
LEAF_NODE	322:19	322:19	11	cp
LEAF_NODE	322:21	322:21	9	,
ARGUMENT	322:23	322:23	9	':'
FIELD	322:23	322:23	10	':'
LEAF_NODE	322:23	322:23	11	':'
LEAF_NODE	322:26	322:26	9	)
LEAF_NODE	322:27	322:27	6	)
LEAF_NODE	322:29	322:29	4	)
STATEMENTS	322:31	332:1	4	
LEAF_NODE	322:31	322:31	5	{
STATEMENTS	323:2	331:35	5	
ITERATION	323:2	323:5	6	
KEYWORD	323:2	323:2	7	do
LEAF_NODE	323:2	323:2	8	do
LEAF_NODE	331:9	331:9	7	(
CONDITION	331:11	331:11	7	( cp = strchr ( cp , ':' ) )
EXPR	331:11	331:32	8	( cp = strchr ( cp , ':' ) )
LEAF_NODE	331:11	331:11	9	(
ASSIGN	331:12	331:17	9	cp = strchr ( cp , ':' )
LVAL	331:12	331:12	10	cp
FIELD	331:12	331:12	11	cp
LEAF_NODE	331:12	331:12	12	cp
ASSIGN_OP	331:15	331:15	10	=
LEAF_NODE	331:15	331:15	11	=
RVAL	331:17	331:17	10	strchr ( cp , ':' )
FUNCTION_CALL	331:17	331:31	11	strchr ( cp , ':' )
CALLEE	331:17	331:17	12	strchr
LEAF_NODE	331:17	331:17	13	strchr
LEAF_NODE	331:23	331:23	12	(
ARGUMENT	331:24	331:24	12	cp
FIELD	331:24	331:24	13	cp
LEAF_NODE	331:24	331:24	14	cp
LEAF_NODE	331:26	331:26	12	,
ARGUMENT	331:28	331:28	12	':'
FIELD	331:28	331:28	13	':'
LEAF_NODE	331:28	331:28	14	':'
LEAF_NODE	331:31	331:31	12	)
LEAF_NODE	331:32	331:32	9	)
LEAF_NODE	331:34	331:34	7	)
STATEMENTS	323:5	331:2	7	
LEAF_NODE	323:5	323:5	8	{
STATEMENTS	324:3	329:3	8	
EXPR_STATEMENT	324:3	324:7	9	cp ++ ;
EXPR	324:3	324:3	10	cp ++
FIELD	324:3	324:5	11	cp ++
LEAF_NODE	324:3	324:3	12	cp
LEAF_NODE	324:5	324:5	12	++
LEAF_NODE	324:7	324:7	10	;
SELECTION	325:3	326:4	9	
KEYWORD	325:3	325:3	10	if
LEAF_NODE	325:3	325:3	11	if
LEAF_NODE	325:6	325:6	10	(
CONDITION	325:7	325:7	10	isdigit ( ( int ) * cp )
EXPR	325:7	325:7	11	isdigit ( ( int ) * cp )
FUNCTION_CALL	325:7	325:23	12	isdigit ( ( int ) * cp )
CALLEE	325:7	325:7	13	isdigit
LEAF_NODE	325:7	325:7	14	isdigit
LEAF_NODE	325:14	325:14	13	(
ARGUMENT	325:15	325:20	13	( int ) * cp
LEAF_NODE	325:15	325:15	14	(
TYPE_NAME	325:16	325:16	14	int
LEAF_NODE	325:16	325:16	15	int
LEAF_NODE	325:19	325:19	14	)
UNARY_EXPR	325:20	325:21	14	* cp
UNARY_OPERATOR	325:20	325:20	15	*
LEAF_NODE	325:20	325:20	16	*
FIELD	325:21	325:21	15	cp
LEAF_NODE	325:21	325:21	16	cp
LEAF_NODE	325:23	325:23	13	)
LEAF_NODE	325:24	325:24	10	)
STATEMENTS	326:4	326:4	10	
EXPR_STATEMENT	326:4	326:27	11	defpredictor = atoi ( cp ) ;
EXPR	326:4	326:4	12	defpredictor = atoi ( cp )
ASSIGN	326:4	326:19	13	defpredictor = atoi ( cp )
LVAL	326:4	326:4	14	defpredictor
FIELD	326:4	326:4	15	defpredictor
LEAF_NODE	326:4	326:4	16	defpredictor
ASSIGN_OP	326:17	326:17	14	=
LEAF_NODE	326:17	326:17	15	=
RVAL	326:19	326:19	14	atoi ( cp )
FUNCTION_CALL	326:19	326:26	15	atoi ( cp )
CALLEE	326:19	326:19	16	atoi
LEAF_NODE	326:19	326:19	17	atoi
LEAF_NODE	326:23	326:23	16	(
ARGUMENT	326:24	326:24	16	cp
FIELD	326:24	326:24	17	cp
LEAF_NODE	326:24	326:24	18	cp
LEAF_NODE	326:26	326:26	16	)
LEAF_NODE	326:27	326:27	12	;
SELECTION	327:3	327:8	9	
KEYWORD	327:3	327:3	10	else
LEAF_NODE	327:3	327:3	11	else
STATEMENTS	327:8	327:8	10	
SELECTION	327:8	328:4	11	
KEYWORD	327:8	327:8	12	if
LEAF_NODE	327:8	327:8	13	if
LEAF_NODE	327:11	327:11	12	(
CONDITION	327:12	327:12	12	* cp == 'p'
EXPR	327:12	327:19	13	* cp == 'p'
UNARY_EXPR	327:12	327:13	14	* cp
UNARY_OPERATOR	327:12	327:12	15	*
LEAF_NODE	327:12	327:12	16	*
FIELD	327:13	327:13	15	cp
LEAF_NODE	327:13	327:13	16	cp
EQ_OPERATOR	327:16	327:16	14	==
LEAF_NODE	327:16	327:16	15	==
FIELD	327:19	327:19	14	'p'
LEAF_NODE	327:19	327:19	15	'p'
LEAF_NODE	327:22	327:22	12	)
STATEMENTS	328:4	328:4	12	
EXPR_STATEMENT	328:4	328:26	13	defpreset = atoi ( ++ cp ) ;
EXPR	328:4	328:4	14	defpreset = atoi ( ++ cp )
ASSIGN	328:4	328:16	15	defpreset = atoi ( ++ cp )
LVAL	328:4	328:4	16	defpreset
FIELD	328:4	328:4	17	defpreset
LEAF_NODE	328:4	328:4	18	defpreset
ASSIGN_OP	328:14	328:14	16	=
LEAF_NODE	328:14	328:14	17	=
RVAL	328:16	328:16	16	atoi ( ++ cp )
FUNCTION_CALL	328:16	328:25	17	atoi ( ++ cp )
CALLEE	328:16	328:16	18	atoi
LEAF_NODE	328:16	328:16	19	atoi
LEAF_NODE	328:20	328:20	18	(
ARGUMENT	328:21	328:23	18	++ cp
LEAF_NODE	328:21	328:21	19	++
FIELD	328:23	328:23	19	cp
LEAF_NODE	328:23	328:23	20	cp
LEAF_NODE	328:25	328:25	18	)
LEAF_NODE	328:26	328:26	14	;
SELECTION	329:3	330:4	9	
KEYWORD	329:3	329:3	10	else
LEAF_NODE	329:3	329:3	11	else
STATEMENTS	330:4	330:4	10	
EXPR_STATEMENT	330:4	330:11	11	usage ( ) ;
EXPR	330:4	330:4	12	usage ( )
FUNCTION_CALL	330:4	330:10	13	usage ( )
CALLEE	330:4	330:4	14	usage
LEAF_NODE	330:4	330:4	15	usage
LEAF_NODE	330:9	330:9	14	(
LEAF_NODE	330:10	330:10	14	)
LEAF_NODE	330:11	330:11	12	;
LEAF_NODE	331:2	331:2	8	}
LEAF_NODE	331:35	331:35	6	;
LEAF_NODE	332:1	332:1	5	}
LEAF_NODE	333:0	333:0	2	}
FUNCTION_DEF	335:0	353:0	1	
RETURN_TYPE	335:0	335:7	2	static void
LEAF_NODE	335:0	335:0	3	static
TYPE_NAME	335:7	335:7	3	void
LEAF_NODE	335:7	335:7	4	void
FUNCTION_NAME	336:0	336:0	2	processG3Options
LEAF_NODE	336:0	336:0	3	processG3Options
PARAMETER_LIST	336:16	336:25	2	( char * cp )
LEAF_NODE	336:16	336:16	3	(
PARAMETER_DECL	336:17	336:23	3	char * cp
TYPE	336:17	336:21	4	char *
TYPE_NAME	336:17	336:17	5	char
LEAF_NODE	336:17	336:17	6	char
POINTER	336:21	336:21	5	*
LEAF_NODE	336:21	336:21	6	*
NAME	336:23	336:23	4	cp
LEAF_NODE	336:23	336:23	5	cp
LEAF_NODE	336:25	336:25	3	)
LEAF_NODE	337:0	337:0	2	{
STATEMENTS	338:1	338:1	2	
SELECTION	338:1	338:30	3	
KEYWORD	338:1	338:1	4	if
LEAF_NODE	338:1	338:1	5	if
LEAF_NODE	338:3	338:3	4	(
CONDITION	338:5	338:5	4	( cp = strchr ( cp , ':' ) )
EXPR	338:5	338:26	5	( cp = strchr ( cp , ':' ) )
LEAF_NODE	338:5	338:5	6	(
ASSIGN	338:6	338:11	6	cp = strchr ( cp , ':' )
LVAL	338:6	338:6	7	cp
FIELD	338:6	338:6	8	cp
LEAF_NODE	338:6	338:6	9	cp
ASSIGN_OP	338:9	338:9	7	=
LEAF_NODE	338:9	338:9	8	=
RVAL	338:11	338:11	7	strchr ( cp , ':' )
FUNCTION_CALL	338:11	338:25	8	strchr ( cp , ':' )
CALLEE	338:11	338:11	9	strchr
LEAF_NODE	338:11	338:11	10	strchr
LEAF_NODE	338:17	338:17	9	(
ARGUMENT	338:18	338:18	9	cp
FIELD	338:18	338:18	10	cp
LEAF_NODE	338:18	338:18	11	cp
LEAF_NODE	338:20	338:20	9	,
ARGUMENT	338:22	338:22	9	':'
FIELD	338:22	338:22	10	':'
LEAF_NODE	338:22	338:22	11	':'
LEAF_NODE	338:25	338:25	9	)
LEAF_NODE	338:26	338:26	6	)
LEAF_NODE	338:28	338:28	4	)
STATEMENTS	338:30	352:1	4	
LEAF_NODE	338:30	338:30	5	{
STATEMENTS	339:2	351:35	5	
SELECTION	339:2	340:3	6	
KEYWORD	339:2	339:2	7	if
LEAF_NODE	339:2	339:2	8	if
LEAF_NODE	339:5	339:5	7	(
CONDITION	339:6	339:6	7	defg3opts == ( uint32 ) - 1
EXPR	339:6	339:28	8	defg3opts == ( uint32 ) - 1
FIELD	339:6	339:6	9	defg3opts
LEAF_NODE	339:6	339:6	10	defg3opts
EQ_OPERATOR	339:16	339:16	9	==
LEAF_NODE	339:16	339:16	10	==
LEAF_NODE	339:19	339:19	9	(
TYPE_NAME	339:20	339:20	9	uint32
LEAF_NODE	339:20	339:20	10	uint32
LEAF_NODE	339:26	339:26	9	)
UNARY_EXPR	339:28	339:29	9	- 1
UNARY_OPERATOR	339:28	339:28	10	-
LEAF_NODE	339:28	339:28	11	-
FIELD	339:29	339:29	10	1
LEAF_NODE	339:29	339:29	11	1
LEAF_NODE	339:30	339:30	7	)
STATEMENTS	340:3	340:3	7	
EXPR_STATEMENT	340:3	340:16	8	defg3opts = 0 ;
EXPR	340:3	340:3	9	defg3opts = 0
ASSIGN	340:3	340:15	10	defg3opts = 0
LVAL	340:3	340:3	11	defg3opts
FIELD	340:3	340:3	12	defg3opts
LEAF_NODE	340:3	340:3	13	defg3opts
ASSIGN_OP	340:13	340:13	11	=
LEAF_NODE	340:13	340:13	12	=
RVAL	340:15	340:15	11	0
FIELD	340:15	340:15	12	0
LEAF_NODE	340:15	340:15	13	0
LEAF_NODE	340:16	340:16	9	;
ITERATION	341:2	341:5	6	
KEYWORD	341:2	341:2	7	do
LEAF_NODE	341:2	341:2	8	do
LEAF_NODE	351:9	351:9	7	(
CONDITION	351:11	351:11	7	( cp = strchr ( cp , ':' ) )
EXPR	351:11	351:32	8	( cp = strchr ( cp , ':' ) )
LEAF_NODE	351:11	351:11	9	(
ASSIGN	351:12	351:17	9	cp = strchr ( cp , ':' )
LVAL	351:12	351:12	10	cp
FIELD	351:12	351:12	11	cp
LEAF_NODE	351:12	351:12	12	cp
ASSIGN_OP	351:15	351:15	10	=
LEAF_NODE	351:15	351:15	11	=
RVAL	351:17	351:17	10	strchr ( cp , ':' )
FUNCTION_CALL	351:17	351:31	11	strchr ( cp , ':' )
CALLEE	351:17	351:17	12	strchr
LEAF_NODE	351:17	351:17	13	strchr
LEAF_NODE	351:23	351:23	12	(
ARGUMENT	351:24	351:24	12	cp
FIELD	351:24	351:24	13	cp
LEAF_NODE	351:24	351:24	14	cp
LEAF_NODE	351:26	351:26	12	,
ARGUMENT	351:28	351:28	12	':'
FIELD	351:28	351:28	13	':'
LEAF_NODE	351:28	351:28	14	':'
LEAF_NODE	351:31	351:31	12	)
LEAF_NODE	351:32	351:32	9	)
LEAF_NODE	351:34	351:34	7	)
STATEMENTS	341:5	351:2	7	
LEAF_NODE	341:5	341:5	8	{
STATEMENTS	342:3	349:3	8	
EXPR_STATEMENT	342:3	342:7	9	cp ++ ;
EXPR	342:3	342:3	10	cp ++
FIELD	342:3	342:5	11	cp ++
LEAF_NODE	342:3	342:3	12	cp
LEAF_NODE	342:5	342:5	12	++
LEAF_NODE	342:7	342:7	10	;
SELECTION	343:3	344:4	9	
KEYWORD	343:3	343:3	10	if
LEAF_NODE	343:3	343:3	11	if
LEAF_NODE	343:6	343:6	10	(
CONDITION	343:7	343:7	10	strneq ( cp , "1d" , 2 )
EXPR	343:7	343:7	11	strneq ( cp , "1d" , 2 )
FUNCTION_CALL	343:7	343:25	12	strneq ( cp , "1d" , 2 )
CALLEE	343:7	343:7	13	strneq
LEAF_NODE	343:7	343:7	14	strneq
LEAF_NODE	343:13	343:13	13	(
ARGUMENT	343:14	343:14	13	cp
FIELD	343:14	343:14	14	cp
LEAF_NODE	343:14	343:14	15	cp
LEAF_NODE	343:16	343:16	13	,
ARGUMENT	343:18	343:18	13	"1d"
FIELD	343:18	343:18	14	"1d"
LEAF_NODE	343:18	343:18	15	"1d"
LEAF_NODE	343:22	343:22	13	,
ARGUMENT	343:24	343:24	13	2
FIELD	343:24	343:24	14	2
LEAF_NODE	343:24	343:24	15	2
LEAF_NODE	343:25	343:25	13	)
LEAF_NODE	343:26	343:26	10	)
STATEMENTS	344:4	344:4	10	
EXPR_STATEMENT	344:4	344:38	11	defg3opts &= ~GROUP3OPT_2DENCODING ;
EXPR	344:4	344:4	12	defg3opts &= ~GROUP3OPT_2DENCODING
ASSIGN	344:4	344:17	13	defg3opts &= ~GROUP3OPT_2DENCODING
LVAL	344:4	344:4	14	defg3opts
FIELD	344:4	344:4	15	defg3opts
LEAF_NODE	344:4	344:4	16	defg3opts
ASSIGN_OP	344:14	344:14	14	&=
LEAF_NODE	344:14	344:14	15	&=
RVAL	344:17	344:17	14	~GROUP3OPT_2DENCODING
FIELD	344:17	344:17	15	~GROUP3OPT_2DENCODING
LEAF_NODE	344:17	344:17	16	~GROUP3OPT_2DENCODING
LEAF_NODE	344:38	344:38	12	;
SELECTION	345:3	345:8	9	
KEYWORD	345:3	345:3	10	else
LEAF_NODE	345:3	345:3	11	else
STATEMENTS	345:8	345:8	10	
SELECTION	345:8	346:4	11	
KEYWORD	345:8	345:8	12	if
LEAF_NODE	345:8	345:8	13	if
LEAF_NODE	345:11	345:11	12	(
CONDITION	345:12	345:12	12	strneq ( cp , "2d" , 2 )
EXPR	345:12	345:12	13	strneq ( cp , "2d" , 2 )
FUNCTION_CALL	345:12	345:30	14	strneq ( cp , "2d" , 2 )
CALLEE	345:12	345:12	15	strneq
LEAF_NODE	345:12	345:12	16	strneq
LEAF_NODE	345:18	345:18	15	(
ARGUMENT	345:19	345:19	15	cp
FIELD	345:19	345:19	16	cp
LEAF_NODE	345:19	345:19	17	cp
LEAF_NODE	345:21	345:21	15	,
ARGUMENT	345:23	345:23	15	"2d"
FIELD	345:23	345:23	16	"2d"
LEAF_NODE	345:23	345:23	17	"2d"
LEAF_NODE	345:27	345:27	15	,
ARGUMENT	345:29	345:29	15	2
FIELD	345:29	345:29	16	2
LEAF_NODE	345:29	345:29	17	2
LEAF_NODE	345:30	345:30	15	)
LEAF_NODE	345:31	345:31	12	)
STATEMENTS	346:4	346:4	12	
EXPR_STATEMENT	346:4	346:37	13	defg3opts |= GROUP3OPT_2DENCODING ;
EXPR	346:4	346:4	14	defg3opts |= GROUP3OPT_2DENCODING
ASSIGN	346:4	346:17	15	defg3opts |= GROUP3OPT_2DENCODING
LVAL	346:4	346:4	16	defg3opts
FIELD	346:4	346:4	17	defg3opts
LEAF_NODE	346:4	346:4	18	defg3opts
ASSIGN_OP	346:14	346:14	16	|=
LEAF_NODE	346:14	346:14	17	|=
RVAL	346:17	346:17	16	GROUP3OPT_2DENCODING
FIELD	346:17	346:17	17	GROUP3OPT_2DENCODING
LEAF_NODE	346:17	346:17	18	GROUP3OPT_2DENCODING
LEAF_NODE	346:37	346:37	14	;
SELECTION	347:3	347:8	9	
KEYWORD	347:3	347:3	10	else
LEAF_NODE	347:3	347:3	11	else
STATEMENTS	347:8	347:8	10	
SELECTION	347:8	348:4	11	
KEYWORD	347:8	347:8	12	if
LEAF_NODE	347:8	347:8	13	if
LEAF_NODE	347:11	347:11	12	(
CONDITION	347:12	347:12	12	strneq ( cp , "fill" , 4 )
EXPR	347:12	347:12	13	strneq ( cp , "fill" , 4 )
FUNCTION_CALL	347:12	347:32	14	strneq ( cp , "fill" , 4 )
CALLEE	347:12	347:12	15	strneq
LEAF_NODE	347:12	347:12	16	strneq
LEAF_NODE	347:18	347:18	15	(
ARGUMENT	347:19	347:19	15	cp
FIELD	347:19	347:19	16	cp
LEAF_NODE	347:19	347:19	17	cp
LEAF_NODE	347:21	347:21	15	,
ARGUMENT	347:23	347:23	15	"fill"
FIELD	347:23	347:23	16	"fill"
LEAF_NODE	347:23	347:23	17	"fill"
LEAF_NODE	347:29	347:29	15	,
ARGUMENT	347:31	347:31	15	4
FIELD	347:31	347:31	16	4
LEAF_NODE	347:31	347:31	17	4
LEAF_NODE	347:32	347:32	15	)
LEAF_NODE	347:33	347:33	12	)
STATEMENTS	348:4	348:4	12	
EXPR_STATEMENT	348:4	348:35	13	defg3opts |= GROUP3OPT_FILLBITS ;
EXPR	348:4	348:4	14	defg3opts |= GROUP3OPT_FILLBITS
ASSIGN	348:4	348:17	15	defg3opts |= GROUP3OPT_FILLBITS
LVAL	348:4	348:4	16	defg3opts
FIELD	348:4	348:4	17	defg3opts
LEAF_NODE	348:4	348:4	18	defg3opts
ASSIGN_OP	348:14	348:14	16	|=
LEAF_NODE	348:14	348:14	17	|=
RVAL	348:17	348:17	16	GROUP3OPT_FILLBITS
FIELD	348:17	348:17	17	GROUP3OPT_FILLBITS
LEAF_NODE	348:17	348:17	18	GROUP3OPT_FILLBITS
LEAF_NODE	348:35	348:35	14	;
SELECTION	349:3	350:4	9	
KEYWORD	349:3	349:3	10	else
LEAF_NODE	349:3	349:3	11	else
STATEMENTS	350:4	350:4	10	
EXPR_STATEMENT	350:4	350:11	11	usage ( ) ;
EXPR	350:4	350:4	12	usage ( )
FUNCTION_CALL	350:4	350:10	13	usage ( )
CALLEE	350:4	350:4	14	usage
LEAF_NODE	350:4	350:4	15	usage
LEAF_NODE	350:9	350:9	14	(
LEAF_NODE	350:10	350:10	14	)
LEAF_NODE	350:11	350:11	12	;
LEAF_NODE	351:2	351:2	8	}
LEAF_NODE	351:35	351:35	6	;
LEAF_NODE	352:1	352:1	5	}
LEAF_NODE	353:0	353:0	2	}
FUNCTION_DEF	355:0	406:0	1	
RETURN_TYPE	355:0	355:7	2	static int
LEAF_NODE	355:0	355:0	3	static
TYPE_NAME	355:7	355:7	3	int
LEAF_NODE	355:7	355:7	4	int
FUNCTION_NAME	356:0	356:0	2	processCompressOptions
LEAF_NODE	356:0	356:0	3	processCompressOptions
PARAMETER_LIST	356:22	356:32	2	( char * opt )
LEAF_NODE	356:22	356:22	3	(
PARAMETER_DECL	356:23	356:29	3	char * opt
TYPE	356:23	356:27	4	char *
TYPE_NAME	356:23	356:23	5	char
LEAF_NODE	356:23	356:23	6	char
POINTER	356:27	356:27	5	*
LEAF_NODE	356:27	356:27	6	*
NAME	356:29	356:29	4	opt
LEAF_NODE	356:29	356:29	5	opt
LEAF_NODE	356:32	356:32	3	)
LEAF_NODE	357:0	357:0	2	{
STATEMENTS	358:1	405:1	2	
SELECTION	358:1	358:25	3	
KEYWORD	358:1	358:1	4	if
LEAF_NODE	358:1	358:1	5	if
LEAF_NODE	358:4	358:4	4	(
CONDITION	358:5	358:5	4	streq ( opt , "none" )
EXPR	358:5	358:5	5	streq ( opt , "none" )
FUNCTION_CALL	358:5	358:22	6	streq ( opt , "none" )
CALLEE	358:5	358:5	7	streq
LEAF_NODE	358:5	358:5	8	streq
LEAF_NODE	358:10	358:10	7	(
ARGUMENT	358:11	358:11	7	opt
FIELD	358:11	358:11	8	opt
LEAF_NODE	358:11	358:11	9	opt
LEAF_NODE	358:14	358:14	7	,
ARGUMENT	358:16	358:16	7	"none"
FIELD	358:16	358:16	8	"none"
LEAF_NODE	358:16	358:16	9	"none"
LEAF_NODE	358:22	358:22	7	)
LEAF_NODE	358:23	358:23	4	)
STATEMENTS	358:25	360:1	4	
LEAF_NODE	358:25	358:25	5	{
STATEMENTS	359:2	359:2	5	
EXPR_STATEMENT	359:2	359:35	6	defcompression = COMPRESSION_NONE ;
EXPR	359:2	359:2	7	defcompression = COMPRESSION_NONE
ASSIGN	359:2	359:19	8	defcompression = COMPRESSION_NONE
LVAL	359:2	359:2	9	defcompression
FIELD	359:2	359:2	10	defcompression
LEAF_NODE	359:2	359:2	11	defcompression
ASSIGN_OP	359:17	359:17	9	=
LEAF_NODE	359:17	359:17	10	=
RVAL	359:19	359:19	9	COMPRESSION_NONE
FIELD	359:19	359:19	10	COMPRESSION_NONE
LEAF_NODE	359:19	359:19	11	COMPRESSION_NONE
LEAF_NODE	359:35	359:35	7	;
LEAF_NODE	360:1	360:1	5	}
SELECTION	360:3	360:8	3	
KEYWORD	360:3	360:3	4	else
LEAF_NODE	360:3	360:3	5	else
STATEMENTS	360:8	360:8	4	
SELECTION	360:8	360:36	5	
KEYWORD	360:8	360:8	6	if
LEAF_NODE	360:8	360:8	7	if
LEAF_NODE	360:11	360:11	6	(
CONDITION	360:12	360:12	6	streq ( opt , "packbits" )
EXPR	360:12	360:12	7	streq ( opt , "packbits" )
FUNCTION_CALL	360:12	360:33	8	streq ( opt , "packbits" )
CALLEE	360:12	360:12	9	streq
LEAF_NODE	360:12	360:12	10	streq
LEAF_NODE	360:17	360:17	9	(
ARGUMENT	360:18	360:18	9	opt
FIELD	360:18	360:18	10	opt
LEAF_NODE	360:18	360:18	11	opt
LEAF_NODE	360:21	360:21	9	,
ARGUMENT	360:23	360:23	9	"packbits"
FIELD	360:23	360:23	10	"packbits"
LEAF_NODE	360:23	360:23	11	"packbits"
LEAF_NODE	360:33	360:33	9	)
LEAF_NODE	360:34	360:34	6	)
STATEMENTS	360:36	362:1	6	
LEAF_NODE	360:36	360:36	7	{
STATEMENTS	361:2	361:2	7	
EXPR_STATEMENT	361:2	361:39	8	defcompression = COMPRESSION_PACKBITS ;
EXPR	361:2	361:2	9	defcompression = COMPRESSION_PACKBITS
ASSIGN	361:2	361:19	10	defcompression = COMPRESSION_PACKBITS
LVAL	361:2	361:2	11	defcompression
FIELD	361:2	361:2	12	defcompression
LEAF_NODE	361:2	361:2	13	defcompression
ASSIGN_OP	361:17	361:17	11	=
LEAF_NODE	361:17	361:17	12	=
RVAL	361:19	361:19	11	COMPRESSION_PACKBITS
FIELD	361:19	361:19	12	COMPRESSION_PACKBITS
LEAF_NODE	361:19	361:19	13	COMPRESSION_PACKBITS
LEAF_NODE	361:39	361:39	9	;
LEAF_NODE	362:1	362:1	7	}
SELECTION	362:3	362:8	3	
KEYWORD	362:3	362:3	4	else
LEAF_NODE	362:3	362:3	5	else
STATEMENTS	362:8	362:8	4	
SELECTION	362:8	362:36	5	
KEYWORD	362:8	362:8	6	if
LEAF_NODE	362:8	362:8	7	if
LEAF_NODE	362:11	362:11	6	(
CONDITION	362:12	362:12	6	strneq ( opt , "jpeg" , 4 )
EXPR	362:12	362:12	7	strneq ( opt , "jpeg" , 4 )
FUNCTION_CALL	362:12	362:33	8	strneq ( opt , "jpeg" , 4 )
CALLEE	362:12	362:12	9	strneq
LEAF_NODE	362:12	362:12	10	strneq
LEAF_NODE	362:18	362:18	9	(
ARGUMENT	362:19	362:19	9	opt
FIELD	362:19	362:19	10	opt
LEAF_NODE	362:19	362:19	11	opt
LEAF_NODE	362:22	362:22	9	,
ARGUMENT	362:24	362:24	9	"jpeg"
FIELD	362:24	362:24	10	"jpeg"
LEAF_NODE	362:24	362:24	11	"jpeg"
LEAF_NODE	362:30	362:30	9	,
ARGUMENT	362:32	362:32	9	4
FIELD	362:32	362:32	10	4
LEAF_NODE	362:32	362:32	11	4
LEAF_NODE	362:33	362:33	9	)
LEAF_NODE	362:34	362:34	6	)
STATEMENTS	362:36	377:1	6	
LEAF_NODE	362:36	362:36	7	{
STATEMENTS	363:2	366:2	7	
SIMPLE_DECL	363:2	363:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	363:2	363:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	363:2	363:6	10	char *
TYPE_NAME	363:2	363:2	11	char
LEAF_NODE	363:2	363:2	12	char
POINTER	363:6	363:6	11	*
LEAF_NODE	363:6	363:6	12	*
NAME	363:8	363:8	10	cp
LEAF_NODE	363:8	363:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	363:8	363:8	10	cp = strchr ( opt , ':' )
ASSIGN	363:8	363:13	11	cp = strchr ( opt , ':' )
LVAL	363:8	363:8	12	cp
NAME	363:8	363:8	13	cp
LEAF_NODE	363:8	363:8	14	cp
ASSIGN_OP	363:11	363:11	12	=
LEAF_NODE	363:11	363:11	13	=
RVAL	363:13	363:13	12	strchr ( opt , ':' )
FUNCTION_CALL	363:13	363:28	13	strchr ( opt , ':' )
CALLEE	363:13	363:13	14	strchr
LEAF_NODE	363:13	363:13	15	strchr
LEAF_NODE	363:19	363:19	14	(
ARGUMENT	363:20	363:20	14	opt
FIELD	363:20	363:20	15	opt
LEAF_NODE	363:20	363:20	16	opt
LEAF_NODE	363:23	363:23	14	,
ARGUMENT	363:25	363:25	14	':'
FIELD	363:25	363:25	15	':'
LEAF_NODE	363:25	363:25	16	':'
LEAF_NODE	363:28	363:28	14	)
LEAF_NODE	363:29	363:29	9	;
EXPR_STATEMENT	365:2	365:35	8	defcompression = COMPRESSION_JPEG ;
EXPR	365:2	365:2	9	defcompression = COMPRESSION_JPEG
ASSIGN	365:2	365:19	10	defcompression = COMPRESSION_JPEG
LVAL	365:2	365:2	11	defcompression
FIELD	365:2	365:2	12	defcompression
LEAF_NODE	365:2	365:2	13	defcompression
ASSIGN_OP	365:17	365:17	11	=
LEAF_NODE	365:17	365:17	12	=
RVAL	365:19	365:19	11	COMPRESSION_JPEG
FIELD	365:19	365:19	12	COMPRESSION_JPEG
LEAF_NODE	365:19	365:19	13	COMPRESSION_JPEG
LEAF_NODE	365:35	365:35	9	;
ITERATION	366:2	367:2	8	
KEYWORD	366:2	366:2	9	while
LEAF_NODE	366:2	366:2	10	while
LEAF_NODE	366:7	366:7	9	(
CONDITION	366:9	366:9	9	cp
EXPR	366:9	366:9	10	cp
FIELD	366:9	366:9	11	cp
LEAF_NODE	366:9	366:9	12	cp
LEAF_NODE	366:12	366:12	9	)
STATEMENTS	367:2	376:2	9	
LEAF_NODE	367:2	367:2	10	{
STATEMENTS	368:3	375:3	10	
SELECTION	368:3	369:4	11	
KEYWORD	368:3	368:3	12	if
LEAF_NODE	368:3	368:3	13	if
LEAF_NODE	368:6	368:6	12	(
CONDITION	368:7	368:7	12	isdigit ( ( int ) cp [ 1 ] )
EXPR	368:7	368:7	13	isdigit ( ( int ) cp [ 1 ] )
FUNCTION_CALL	368:7	368:25	14	isdigit ( ( int ) cp [ 1 ] )
CALLEE	368:7	368:7	15	isdigit
LEAF_NODE	368:7	368:7	16	isdigit
LEAF_NODE	368:14	368:14	15	(
ARGUMENT	368:15	368:20	15	( int ) cp [ 1 ]
LEAF_NODE	368:15	368:15	16	(
TYPE_NAME	368:16	368:16	16	int
LEAF_NODE	368:16	368:16	17	int
LEAF_NODE	368:19	368:19	16	)
FIELD	368:20	368:24	16	cp [ 1 ]
LEAF_NODE	368:20	368:20	17	cp
LEAF_NODE	368:22	368:22	17	[
EXPR	368:23	368:23	17	1
FIELD	368:23	368:23	18	1
LEAF_NODE	368:23	368:23	19	1
LEAF_NODE	368:24	368:24	17	]
LEAF_NODE	368:25	368:25	15	)
LEAF_NODE	368:26	368:26	12	)
STATEMENTS	369:4	369:4	12	
EXPR_STATEMENT	369:4	369:24	13	quality = atoi ( cp + 1 ) ;
EXPR	369:4	369:4	14	quality = atoi ( cp + 1 )
ASSIGN	369:4	369:14	15	quality = atoi ( cp + 1 )
LVAL	369:4	369:4	16	quality
FIELD	369:4	369:4	17	quality
LEAF_NODE	369:4	369:4	18	quality
ASSIGN_OP	369:12	369:12	16	=
LEAF_NODE	369:12	369:12	17	=
RVAL	369:14	369:14	16	atoi ( cp + 1 )
FUNCTION_CALL	369:14	369:23	17	atoi ( cp + 1 )
CALLEE	369:14	369:14	18	atoi
LEAF_NODE	369:14	369:14	19	atoi
LEAF_NODE	369:18	369:18	18	(
ARGUMENT	369:19	369:22	18	cp + 1
FIELD	369:19	369:19	19	cp
LEAF_NODE	369:19	369:19	20	cp
LEAF_NODE	369:21	369:21	19	+
FIELD	369:22	369:22	19	1
LEAF_NODE	369:22	369:22	20	1
LEAF_NODE	369:23	369:23	18	)
LEAF_NODE	369:24	369:24	14	;
SELECTION	370:3	370:8	11	
KEYWORD	370:3	370:3	12	else
LEAF_NODE	370:3	370:3	13	else
STATEMENTS	370:8	370:8	12	
SELECTION	370:8	371:4	13	
KEYWORD	370:8	370:8	14	if
LEAF_NODE	370:8	370:8	15	if
LEAF_NODE	370:11	370:11	14	(
CONDITION	370:12	370:12	14	cp [ 1 ] == 'r'
EXPR	370:12	370:21	15	cp [ 1 ] == 'r'
FIELD	370:12	370:16	16	cp [ 1 ]
LEAF_NODE	370:12	370:12	17	cp
LEAF_NODE	370:14	370:14	17	[
EXPR	370:15	370:15	17	1
FIELD	370:15	370:15	18	1
LEAF_NODE	370:15	370:15	19	1
LEAF_NODE	370:16	370:16	17	]
EQ_OPERATOR	370:18	370:18	16	==
LEAF_NODE	370:18	370:18	17	==
FIELD	370:21	370:21	16	'r'
LEAF_NODE	370:21	370:21	17	'r'
LEAF_NODE	370:25	370:25	14	)
STATEMENTS	371:4	371:4	14	
EXPR_STATEMENT	371:4	371:37	15	jpegcolormode = JPEGCOLORMODE_RAW ;
EXPR	371:4	371:4	16	jpegcolormode = JPEGCOLORMODE_RAW
ASSIGN	371:4	371:20	17	jpegcolormode = JPEGCOLORMODE_RAW
LVAL	371:4	371:4	18	jpegcolormode
FIELD	371:4	371:4	19	jpegcolormode
LEAF_NODE	371:4	371:4	20	jpegcolormode
ASSIGN_OP	371:18	371:18	18	=
LEAF_NODE	371:18	371:18	19	=
RVAL	371:20	371:20	18	JPEGCOLORMODE_RAW
FIELD	371:20	371:20	19	JPEGCOLORMODE_RAW
LEAF_NODE	371:20	371:20	20	JPEGCOLORMODE_RAW
LEAF_NODE	371:37	371:37	16	;
SELECTION	372:3	373:4	11	
KEYWORD	372:3	372:3	12	else
LEAF_NODE	372:3	372:3	13	else
STATEMENTS	373:4	373:4	12	
EXPR_STATEMENT	373:4	373:11	13	usage ( ) ;
EXPR	373:4	373:4	14	usage ( )
FUNCTION_CALL	373:4	373:10	15	usage ( )
CALLEE	373:4	373:4	16	usage
LEAF_NODE	373:4	373:4	17	usage
LEAF_NODE	373:9	373:9	16	(
LEAF_NODE	373:10	373:10	16	)
LEAF_NODE	373:11	373:11	14	;
EXPR_STATEMENT	375:3	375:24	11	cp = strchr ( cp + 1 , ':' ) ;
EXPR	375:3	375:3	12	cp = strchr ( cp + 1 , ':' )
ASSIGN	375:3	375:8	13	cp = strchr ( cp + 1 , ':' )
LVAL	375:3	375:3	14	cp
FIELD	375:3	375:3	15	cp
LEAF_NODE	375:3	375:3	16	cp
ASSIGN_OP	375:6	375:6	14	=
LEAF_NODE	375:6	375:6	15	=
RVAL	375:8	375:8	14	strchr ( cp + 1 , ':' )
FUNCTION_CALL	375:8	375:23	15	strchr ( cp + 1 , ':' )
CALLEE	375:8	375:8	16	strchr
LEAF_NODE	375:8	375:8	17	strchr
LEAF_NODE	375:14	375:14	16	(
ARGUMENT	375:15	375:18	16	cp + 1
FIELD	375:15	375:15	17	cp
LEAF_NODE	375:15	375:15	18	cp
LEAF_NODE	375:17	375:17	17	+
FIELD	375:18	375:18	17	1
LEAF_NODE	375:18	375:18	18	1
LEAF_NODE	375:19	375:19	16	,
ARGUMENT	375:20	375:20	16	':'
FIELD	375:20	375:20	17	':'
LEAF_NODE	375:20	375:20	18	':'
LEAF_NODE	375:23	375:23	16	)
LEAF_NODE	375:24	375:24	12	;
LEAF_NODE	376:2	376:2	10	}
LEAF_NODE	377:1	377:1	7	}
SELECTION	377:3	377:8	3	
KEYWORD	377:3	377:3	4	else
LEAF_NODE	377:3	377:3	5	else
STATEMENTS	377:8	377:8	4	
SELECTION	377:8	377:34	5	
KEYWORD	377:8	377:8	6	if
LEAF_NODE	377:8	377:8	7	if
LEAF_NODE	377:11	377:11	6	(
CONDITION	377:12	377:12	6	strneq ( opt , "g3" , 2 )
EXPR	377:12	377:12	7	strneq ( opt , "g3" , 2 )
FUNCTION_CALL	377:12	377:31	8	strneq ( opt , "g3" , 2 )
CALLEE	377:12	377:12	9	strneq
LEAF_NODE	377:12	377:12	10	strneq
LEAF_NODE	377:18	377:18	9	(
ARGUMENT	377:19	377:19	9	opt
FIELD	377:19	377:19	10	opt
LEAF_NODE	377:19	377:19	11	opt
LEAF_NODE	377:22	377:22	9	,
ARGUMENT	377:24	377:24	9	"g3"
FIELD	377:24	377:24	10	"g3"
LEAF_NODE	377:24	377:24	11	"g3"
LEAF_NODE	377:28	377:28	9	,
ARGUMENT	377:30	377:30	9	2
FIELD	377:30	377:30	10	2
LEAF_NODE	377:30	377:30	11	2
LEAF_NODE	377:31	377:31	9	)
LEAF_NODE	377:32	377:32	6	)
STATEMENTS	377:34	380:1	6	
LEAF_NODE	377:34	377:34	7	{
STATEMENTS	378:2	379:2	7	
EXPR_STATEMENT	378:2	378:23	8	processG3Options ( opt ) ;
EXPR	378:2	378:2	9	processG3Options ( opt )
FUNCTION_CALL	378:2	378:22	10	processG3Options ( opt )
CALLEE	378:2	378:2	11	processG3Options
LEAF_NODE	378:2	378:2	12	processG3Options
LEAF_NODE	378:18	378:18	11	(
ARGUMENT	378:19	378:19	11	opt
FIELD	378:19	378:19	12	opt
LEAF_NODE	378:19	378:19	13	opt
LEAF_NODE	378:22	378:22	11	)
LEAF_NODE	378:23	378:23	9	;
EXPR_STATEMENT	379:2	379:40	8	defcompression = COMPRESSION_CCITTFAX3 ;
EXPR	379:2	379:2	9	defcompression = COMPRESSION_CCITTFAX3
ASSIGN	379:2	379:19	10	defcompression = COMPRESSION_CCITTFAX3
LVAL	379:2	379:2	11	defcompression
FIELD	379:2	379:2	12	defcompression
LEAF_NODE	379:2	379:2	13	defcompression
ASSIGN_OP	379:17	379:17	11	=
LEAF_NODE	379:17	379:17	12	=
RVAL	379:19	379:19	11	COMPRESSION_CCITTFAX3
FIELD	379:19	379:19	12	COMPRESSION_CCITTFAX3
LEAF_NODE	379:19	379:19	13	COMPRESSION_CCITTFAX3
LEAF_NODE	379:40	379:40	9	;
LEAF_NODE	380:1	380:1	7	}
SELECTION	380:3	380:8	3	
KEYWORD	380:3	380:3	4	else
LEAF_NODE	380:3	380:3	5	else
STATEMENTS	380:8	380:8	4	
SELECTION	380:8	380:30	5	
KEYWORD	380:8	380:8	6	if
LEAF_NODE	380:8	380:8	7	if
LEAF_NODE	380:11	380:11	6	(
CONDITION	380:12	380:12	6	streq ( opt , "g4" )
EXPR	380:12	380:12	7	streq ( opt , "g4" )
FUNCTION_CALL	380:12	380:27	8	streq ( opt , "g4" )
CALLEE	380:12	380:12	9	streq
LEAF_NODE	380:12	380:12	10	streq
LEAF_NODE	380:17	380:17	9	(
ARGUMENT	380:18	380:18	9	opt
FIELD	380:18	380:18	10	opt
LEAF_NODE	380:18	380:18	11	opt
LEAF_NODE	380:21	380:21	9	,
ARGUMENT	380:23	380:23	9	"g4"
FIELD	380:23	380:23	10	"g4"
LEAF_NODE	380:23	380:23	11	"g4"
LEAF_NODE	380:27	380:27	9	)
LEAF_NODE	380:28	380:28	6	)
STATEMENTS	380:30	382:1	6	
LEAF_NODE	380:30	380:30	7	{
STATEMENTS	381:2	381:2	7	
EXPR_STATEMENT	381:2	381:40	8	defcompression = COMPRESSION_CCITTFAX4 ;
EXPR	381:2	381:2	9	defcompression = COMPRESSION_CCITTFAX4
ASSIGN	381:2	381:19	10	defcompression = COMPRESSION_CCITTFAX4
LVAL	381:2	381:2	11	defcompression
FIELD	381:2	381:2	12	defcompression
LEAF_NODE	381:2	381:2	13	defcompression
ASSIGN_OP	381:17	381:17	11	=
LEAF_NODE	381:17	381:17	12	=
RVAL	381:19	381:19	11	COMPRESSION_CCITTFAX4
FIELD	381:19	381:19	12	COMPRESSION_CCITTFAX4
LEAF_NODE	381:19	381:19	13	COMPRESSION_CCITTFAX4
LEAF_NODE	381:40	381:40	9	;
LEAF_NODE	382:1	382:1	7	}
SELECTION	382:3	382:8	3	
KEYWORD	382:3	382:3	4	else
LEAF_NODE	382:3	382:3	5	else
STATEMENTS	382:8	382:8	4	
SELECTION	382:8	382:35	5	
KEYWORD	382:8	382:8	6	if
LEAF_NODE	382:8	382:8	7	if
LEAF_NODE	382:11	382:11	6	(
CONDITION	382:12	382:12	6	strneq ( opt , "lzw" , 3 )
EXPR	382:12	382:12	7	strneq ( opt , "lzw" , 3 )
FUNCTION_CALL	382:12	382:32	8	strneq ( opt , "lzw" , 3 )
CALLEE	382:12	382:12	9	strneq
LEAF_NODE	382:12	382:12	10	strneq
LEAF_NODE	382:18	382:18	9	(
ARGUMENT	382:19	382:19	9	opt
FIELD	382:19	382:19	10	opt
LEAF_NODE	382:19	382:19	11	opt
LEAF_NODE	382:22	382:22	9	,
ARGUMENT	382:24	382:24	9	"lzw"
FIELD	382:24	382:24	10	"lzw"
LEAF_NODE	382:24	382:24	11	"lzw"
LEAF_NODE	382:29	382:29	9	,
ARGUMENT	382:31	382:31	9	3
FIELD	382:31	382:31	10	3
LEAF_NODE	382:31	382:31	11	3
LEAF_NODE	382:32	382:32	9	)
LEAF_NODE	382:33	382:33	6	)
STATEMENTS	382:35	387:1	6	
LEAF_NODE	382:35	382:35	7	{
STATEMENTS	383:2	386:2	7	
SIMPLE_DECL	383:2	383:29	8	char * cp ; cp = strchr ( opt , ':' ) ;
VAR_DECL	383:2	383:8	9	char * cp ; cp = strchr ( opt , ':' )
TYPE	383:2	383:6	10	char *
TYPE_NAME	383:2	383:2	11	char
LEAF_NODE	383:2	383:2	12	char
POINTER	383:6	383:6	11	*
LEAF_NODE	383:6	383:6	12	*
NAME	383:8	383:8	10	cp
LEAF_NODE	383:8	383:8	11	cp
LEAF_NODE	0:0	0:0	10	;
INIT	383:8	383:8	10	cp = strchr ( opt , ':' )
ASSIGN	383:8	383:13	11	cp = strchr ( opt , ':' )
LVAL	383:8	383:8	12	cp
NAME	383:8	383:8	13	cp
LEAF_NODE	383:8	383:8	14	cp
ASSIGN_OP	383:11	383:11	12	=
LEAF_NODE	383:11	383:11	13	=
RVAL	383:13	383:13	12	strchr ( opt , ':' )
FUNCTION_CALL	383:13	383:28	13	strchr ( opt , ':' )
CALLEE	383:13	383:13	14	strchr
LEAF_NODE	383:13	383:13	15	strchr
LEAF_NODE	383:19	383:19	14	(
ARGUMENT	383:20	383:20	14	opt
FIELD	383:20	383:20	15	opt
LEAF_NODE	383:20	383:20	16	opt
LEAF_NODE	383:23	383:23	14	,
ARGUMENT	383:25	383:25	14	':'
FIELD	383:25	383:25	15	':'
LEAF_NODE	383:25	383:25	16	':'
LEAF_NODE	383:28	383:28	14	)
LEAF_NODE	383:29	383:29	9	;
SELECTION	384:2	385:3	8	
KEYWORD	384:2	384:2	9	if
LEAF_NODE	384:2	384:2	10	if
LEAF_NODE	384:5	384:5	9	(
CONDITION	384:6	384:6	9	cp
EXPR	384:6	384:6	10	cp
FIELD	384:6	384:6	11	cp
LEAF_NODE	384:6	384:6	12	cp
LEAF_NODE	384:8	384:8	9	)
STATEMENTS	385:3	385:3	9	
EXPR_STATEMENT	385:3	385:28	10	defpredictor = atoi ( cp + 1 ) ;
EXPR	385:3	385:3	11	defpredictor = atoi ( cp + 1 )
ASSIGN	385:3	385:18	12	defpredictor = atoi ( cp + 1 )
LVAL	385:3	385:3	13	defpredictor
FIELD	385:3	385:3	14	defpredictor
LEAF_NODE	385:3	385:3	15	defpredictor
ASSIGN_OP	385:16	385:16	13	=
LEAF_NODE	385:16	385:16	14	=
RVAL	385:18	385:18	13	atoi ( cp + 1 )
FUNCTION_CALL	385:18	385:27	14	atoi ( cp + 1 )
CALLEE	385:18	385:18	15	atoi
LEAF_NODE	385:18	385:18	16	atoi
LEAF_NODE	385:22	385:22	15	(
ARGUMENT	385:23	385:26	15	cp + 1
FIELD	385:23	385:23	16	cp
LEAF_NODE	385:23	385:23	17	cp
LEAF_NODE	385:25	385:25	16	+
FIELD	385:26	385:26	16	1
LEAF_NODE	385:26	385:26	17	1
LEAF_NODE	385:27	385:27	15	)
LEAF_NODE	385:28	385:28	11	;
EXPR_STATEMENT	386:2	386:34	8	defcompression = COMPRESSION_LZW ;
EXPR	386:2	386:2	9	defcompression = COMPRESSION_LZW
ASSIGN	386:2	386:19	10	defcompression = COMPRESSION_LZW
LVAL	386:2	386:2	11	defcompression
FIELD	386:2	386:2	12	defcompression
LEAF_NODE	386:2	386:2	13	defcompression
ASSIGN_OP	386:17	386:17	11	=
LEAF_NODE	386:17	386:17	12	=
RVAL	386:19	386:19	11	COMPRESSION_LZW
FIELD	386:19	386:19	12	COMPRESSION_LZW
LEAF_NODE	386:19	386:19	13	COMPRESSION_LZW
LEAF_NODE	386:34	386:34	9	;
LEAF_NODE	387:1	387:1	7	}
SELECTION	387:3	387:8	3	
KEYWORD	387:3	387:3	4	else
LEAF_NODE	387:3	387:3	5	else
STATEMENTS	387:8	387:8	4	
SELECTION	387:8	387:35	5	
KEYWORD	387:8	387:8	6	if
LEAF_NODE	387:8	387:8	7	if
LEAF_NODE	387:11	387:11	6	(
CONDITION	387:12	387:12	6	strneq ( opt , "zip" , 3 )
EXPR	387:12	387:12	7	strneq ( opt , "zip" , 3 )
FUNCTION_CALL	387:12	387:32	8	strneq ( opt , "zip" , 3 )
CALLEE	387:12	387:12	9	strneq
LEAF_NODE	387:12	387:12	10	strneq
LEAF_NODE	387:18	387:18	9	(
ARGUMENT	387:19	387:19	9	opt
FIELD	387:19	387:19	10	opt
LEAF_NODE	387:19	387:19	11	opt
LEAF_NODE	387:22	387:22	9	,
ARGUMENT	387:24	387:24	9	"zip"
FIELD	387:24	387:24	10	"zip"
LEAF_NODE	387:24	387:24	11	"zip"
LEAF_NODE	387:29	387:29	9	,
ARGUMENT	387:31	387:31	9	3
FIELD	387:31	387:31	10	3
LEAF_NODE	387:31	387:31	11	3
LEAF_NODE	387:32	387:32	9	)
LEAF_NODE	387:33	387:33	6	)
STATEMENTS	387:35	390:1	6	
LEAF_NODE	387:35	387:35	7	{
STATEMENTS	388:2	389:2	7	
EXPR_STATEMENT	388:2	388:24	8	processZIPOptions ( opt ) ;
EXPR	388:2	388:2	9	processZIPOptions ( opt )
FUNCTION_CALL	388:2	388:23	10	processZIPOptions ( opt )
CALLEE	388:2	388:2	11	processZIPOptions
LEAF_NODE	388:2	388:2	12	processZIPOptions
LEAF_NODE	388:19	388:19	11	(
ARGUMENT	388:20	388:20	11	opt
FIELD	388:20	388:20	12	opt
LEAF_NODE	388:20	388:20	13	opt
LEAF_NODE	388:23	388:23	11	)
LEAF_NODE	388:24	388:24	9	;
EXPR_STATEMENT	389:2	389:44	8	defcompression = COMPRESSION_ADOBE_DEFLATE ;
EXPR	389:2	389:2	9	defcompression = COMPRESSION_ADOBE_DEFLATE
ASSIGN	389:2	389:19	10	defcompression = COMPRESSION_ADOBE_DEFLATE
LVAL	389:2	389:2	11	defcompression
FIELD	389:2	389:2	12	defcompression
LEAF_NODE	389:2	389:2	13	defcompression
ASSIGN_OP	389:17	389:17	11	=
LEAF_NODE	389:17	389:17	12	=
RVAL	389:19	389:19	11	COMPRESSION_ADOBE_DEFLATE
FIELD	389:19	389:19	12	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	389:19	389:19	13	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	389:44	389:44	9	;
LEAF_NODE	390:1	390:1	7	}
SELECTION	390:3	390:8	3	
KEYWORD	390:3	390:3	4	else
LEAF_NODE	390:3	390:3	5	else
STATEMENTS	390:8	390:8	4	
SELECTION	390:8	390:36	5	
KEYWORD	390:8	390:8	6	if
LEAF_NODE	390:8	390:8	7	if
LEAF_NODE	390:11	390:11	6	(
CONDITION	390:12	390:12	6	strneq ( opt , "lzma" , 4 )
EXPR	390:12	390:12	7	strneq ( opt , "lzma" , 4 )
FUNCTION_CALL	390:12	390:33	8	strneq ( opt , "lzma" , 4 )
CALLEE	390:12	390:12	9	strneq
LEAF_NODE	390:12	390:12	10	strneq
LEAF_NODE	390:18	390:18	9	(
ARGUMENT	390:19	390:19	9	opt
FIELD	390:19	390:19	10	opt
LEAF_NODE	390:19	390:19	11	opt
LEAF_NODE	390:22	390:22	9	,
ARGUMENT	390:24	390:24	9	"lzma"
FIELD	390:24	390:24	10	"lzma"
LEAF_NODE	390:24	390:24	11	"lzma"
LEAF_NODE	390:30	390:30	9	,
ARGUMENT	390:32	390:32	9	4
FIELD	390:32	390:32	10	4
LEAF_NODE	390:32	390:32	11	4
LEAF_NODE	390:33	390:33	9	)
LEAF_NODE	390:34	390:34	6	)
STATEMENTS	390:36	393:1	6	
LEAF_NODE	390:36	390:36	7	{
STATEMENTS	391:2	392:2	7	
EXPR_STATEMENT	391:2	391:24	8	processZIPOptions ( opt ) ;
EXPR	391:2	391:2	9	processZIPOptions ( opt )
FUNCTION_CALL	391:2	391:23	10	processZIPOptions ( opt )
CALLEE	391:2	391:2	11	processZIPOptions
LEAF_NODE	391:2	391:2	12	processZIPOptions
LEAF_NODE	391:19	391:19	11	(
ARGUMENT	391:20	391:20	11	opt
FIELD	391:20	391:20	12	opt
LEAF_NODE	391:20	391:20	13	opt
LEAF_NODE	391:23	391:23	11	)
LEAF_NODE	391:24	391:24	9	;
EXPR_STATEMENT	392:2	392:35	8	defcompression = COMPRESSION_LZMA ;
EXPR	392:2	392:2	9	defcompression = COMPRESSION_LZMA
ASSIGN	392:2	392:19	10	defcompression = COMPRESSION_LZMA
LVAL	392:2	392:2	11	defcompression
FIELD	392:2	392:2	12	defcompression
LEAF_NODE	392:2	392:2	13	defcompression
ASSIGN_OP	392:17	392:17	11	=
LEAF_NODE	392:17	392:17	12	=
RVAL	392:19	392:19	11	COMPRESSION_LZMA
FIELD	392:19	392:19	12	COMPRESSION_LZMA
LEAF_NODE	392:19	392:19	13	COMPRESSION_LZMA
LEAF_NODE	392:35	392:35	9	;
LEAF_NODE	393:1	393:1	7	}
SELECTION	393:3	393:8	3	
KEYWORD	393:3	393:3	4	else
LEAF_NODE	393:3	393:3	5	else
STATEMENTS	393:8	393:8	4	
SELECTION	393:8	393:36	5	
KEYWORD	393:8	393:8	6	if
LEAF_NODE	393:8	393:8	7	if
LEAF_NODE	393:11	393:11	6	(
CONDITION	393:12	393:12	6	strneq ( opt , "zstd" , 4 )
EXPR	393:12	393:12	7	strneq ( opt , "zstd" , 4 )
FUNCTION_CALL	393:12	393:33	8	strneq ( opt , "zstd" , 4 )
CALLEE	393:12	393:12	9	strneq
LEAF_NODE	393:12	393:12	10	strneq
LEAF_NODE	393:18	393:18	9	(
ARGUMENT	393:19	393:19	9	opt
FIELD	393:19	393:19	10	opt
LEAF_NODE	393:19	393:19	11	opt
LEAF_NODE	393:22	393:22	9	,
ARGUMENT	393:24	393:24	9	"zstd"
FIELD	393:24	393:24	10	"zstd"
LEAF_NODE	393:24	393:24	11	"zstd"
LEAF_NODE	393:30	393:30	9	,
ARGUMENT	393:32	393:32	9	4
FIELD	393:32	393:32	10	4
LEAF_NODE	393:32	393:32	11	4
LEAF_NODE	393:33	393:33	9	)
LEAF_NODE	393:34	393:34	6	)
STATEMENTS	393:36	396:1	6	
LEAF_NODE	393:36	393:36	7	{
STATEMENTS	394:2	395:2	7	
EXPR_STATEMENT	394:2	394:24	8	processZIPOptions ( opt ) ;
EXPR	394:2	394:2	9	processZIPOptions ( opt )
FUNCTION_CALL	394:2	394:23	10	processZIPOptions ( opt )
CALLEE	394:2	394:2	11	processZIPOptions
LEAF_NODE	394:2	394:2	12	processZIPOptions
LEAF_NODE	394:19	394:19	11	(
ARGUMENT	394:20	394:20	11	opt
FIELD	394:20	394:20	12	opt
LEAF_NODE	394:20	394:20	13	opt
LEAF_NODE	394:23	394:23	11	)
LEAF_NODE	394:24	394:24	9	;
EXPR_STATEMENT	395:2	395:35	8	defcompression = COMPRESSION_ZSTD ;
EXPR	395:2	395:2	9	defcompression = COMPRESSION_ZSTD
ASSIGN	395:2	395:19	10	defcompression = COMPRESSION_ZSTD
LVAL	395:2	395:2	11	defcompression
FIELD	395:2	395:2	12	defcompression
LEAF_NODE	395:2	395:2	13	defcompression
ASSIGN_OP	395:17	395:17	11	=
LEAF_NODE	395:17	395:17	12	=
RVAL	395:19	395:19	11	COMPRESSION_ZSTD
FIELD	395:19	395:19	12	COMPRESSION_ZSTD
LEAF_NODE	395:19	395:19	13	COMPRESSION_ZSTD
LEAF_NODE	395:35	395:35	9	;
LEAF_NODE	396:1	396:1	7	}
SELECTION	396:3	396:8	3	
KEYWORD	396:3	396:3	4	else
LEAF_NODE	396:3	396:3	5	else
STATEMENTS	396:8	396:8	4	
SELECTION	396:8	396:36	5	
KEYWORD	396:8	396:8	6	if
LEAF_NODE	396:8	396:8	7	if
LEAF_NODE	396:11	396:11	6	(
CONDITION	396:12	396:12	6	strneq ( opt , "webp" , 4 )
EXPR	396:12	396:12	7	strneq ( opt , "webp" , 4 )
FUNCTION_CALL	396:12	396:33	8	strneq ( opt , "webp" , 4 )
CALLEE	396:12	396:12	9	strneq
LEAF_NODE	396:12	396:12	10	strneq
LEAF_NODE	396:18	396:18	9	(
ARGUMENT	396:19	396:19	9	opt
FIELD	396:19	396:19	10	opt
LEAF_NODE	396:19	396:19	11	opt
LEAF_NODE	396:22	396:22	9	,
ARGUMENT	396:24	396:24	9	"webp"
FIELD	396:24	396:24	10	"webp"
LEAF_NODE	396:24	396:24	11	"webp"
LEAF_NODE	396:30	396:30	9	,
ARGUMENT	396:32	396:32	9	4
FIELD	396:32	396:32	10	4
LEAF_NODE	396:32	396:32	11	4
LEAF_NODE	396:33	396:33	9	)
LEAF_NODE	396:34	396:34	6	)
STATEMENTS	396:36	399:1	6	
LEAF_NODE	396:36	396:36	7	{
STATEMENTS	397:2	398:2	7	
EXPR_STATEMENT	397:2	397:24	8	processZIPOptions ( opt ) ;
EXPR	397:2	397:2	9	processZIPOptions ( opt )
FUNCTION_CALL	397:2	397:23	10	processZIPOptions ( opt )
CALLEE	397:2	397:2	11	processZIPOptions
LEAF_NODE	397:2	397:2	12	processZIPOptions
LEAF_NODE	397:19	397:19	11	(
ARGUMENT	397:20	397:20	11	opt
FIELD	397:20	397:20	12	opt
LEAF_NODE	397:20	397:20	13	opt
LEAF_NODE	397:23	397:23	11	)
LEAF_NODE	397:24	397:24	9	;
EXPR_STATEMENT	398:2	398:35	8	defcompression = COMPRESSION_WEBP ;
EXPR	398:2	398:2	9	defcompression = COMPRESSION_WEBP
ASSIGN	398:2	398:19	10	defcompression = COMPRESSION_WEBP
LVAL	398:2	398:2	11	defcompression
FIELD	398:2	398:2	12	defcompression
LEAF_NODE	398:2	398:2	13	defcompression
ASSIGN_OP	398:17	398:17	11	=
LEAF_NODE	398:17	398:17	12	=
RVAL	398:19	398:19	11	COMPRESSION_WEBP
FIELD	398:19	398:19	12	COMPRESSION_WEBP
LEAF_NODE	398:19	398:19	13	COMPRESSION_WEBP
LEAF_NODE	398:35	398:35	9	;
LEAF_NODE	399:1	399:1	7	}
SELECTION	399:3	399:8	3	
KEYWORD	399:3	399:3	4	else
LEAF_NODE	399:3	399:3	5	else
STATEMENTS	399:8	399:8	4	
SELECTION	399:8	399:36	5	
KEYWORD	399:8	399:8	6	if
LEAF_NODE	399:8	399:8	7	if
LEAF_NODE	399:11	399:11	6	(
CONDITION	399:12	399:12	6	strneq ( opt , "jbig" , 4 )
EXPR	399:12	399:12	7	strneq ( opt , "jbig" , 4 )
FUNCTION_CALL	399:12	399:33	8	strneq ( opt , "jbig" , 4 )
CALLEE	399:12	399:12	9	strneq
LEAF_NODE	399:12	399:12	10	strneq
LEAF_NODE	399:18	399:18	9	(
ARGUMENT	399:19	399:19	9	opt
FIELD	399:19	399:19	10	opt
LEAF_NODE	399:19	399:19	11	opt
LEAF_NODE	399:22	399:22	9	,
ARGUMENT	399:24	399:24	9	"jbig"
FIELD	399:24	399:24	10	"jbig"
LEAF_NODE	399:24	399:24	11	"jbig"
LEAF_NODE	399:30	399:30	9	,
ARGUMENT	399:32	399:32	9	4
FIELD	399:32	399:32	10	4
LEAF_NODE	399:32	399:32	11	4
LEAF_NODE	399:33	399:33	9	)
LEAF_NODE	399:34	399:34	6	)
STATEMENTS	399:36	401:1	6	
LEAF_NODE	399:36	399:36	7	{
STATEMENTS	400:2	400:2	7	
EXPR_STATEMENT	400:2	400:35	8	defcompression = COMPRESSION_JBIG ;
EXPR	400:2	400:2	9	defcompression = COMPRESSION_JBIG
ASSIGN	400:2	400:19	10	defcompression = COMPRESSION_JBIG
LVAL	400:2	400:2	11	defcompression
FIELD	400:2	400:2	12	defcompression
LEAF_NODE	400:2	400:2	13	defcompression
ASSIGN_OP	400:17	400:17	11	=
LEAF_NODE	400:17	400:17	12	=
RVAL	400:19	400:19	11	COMPRESSION_JBIG
FIELD	400:19	400:19	12	COMPRESSION_JBIG
LEAF_NODE	400:19	400:19	13	COMPRESSION_JBIG
LEAF_NODE	400:35	400:35	9	;
LEAF_NODE	401:1	401:1	7	}
SELECTION	401:3	401:8	3	
KEYWORD	401:3	401:3	4	else
LEAF_NODE	401:3	401:3	5	else
STATEMENTS	401:8	401:8	4	
SELECTION	401:8	401:38	5	
KEYWORD	401:8	401:8	6	if
LEAF_NODE	401:8	401:8	7	if
LEAF_NODE	401:11	401:11	6	(
CONDITION	401:12	401:12	6	strneq ( opt , "sgilog" , 6 )
EXPR	401:12	401:12	7	strneq ( opt , "sgilog" , 6 )
FUNCTION_CALL	401:12	401:35	8	strneq ( opt , "sgilog" , 6 )
CALLEE	401:12	401:12	9	strneq
LEAF_NODE	401:12	401:12	10	strneq
LEAF_NODE	401:18	401:18	9	(
ARGUMENT	401:19	401:19	9	opt
FIELD	401:19	401:19	10	opt
LEAF_NODE	401:19	401:19	11	opt
LEAF_NODE	401:22	401:22	9	,
ARGUMENT	401:24	401:24	9	"sgilog"
FIELD	401:24	401:24	10	"sgilog"
LEAF_NODE	401:24	401:24	11	"sgilog"
LEAF_NODE	401:32	401:32	9	,
ARGUMENT	401:34	401:34	9	6
FIELD	401:34	401:34	10	6
LEAF_NODE	401:34	401:34	11	6
LEAF_NODE	401:35	401:35	9	)
LEAF_NODE	401:36	401:36	6	)
STATEMENTS	401:38	403:1	6	
LEAF_NODE	401:38	401:38	7	{
STATEMENTS	402:2	402:2	7	
EXPR_STATEMENT	402:2	402:37	8	defcompression = COMPRESSION_SGILOG ;
EXPR	402:2	402:2	9	defcompression = COMPRESSION_SGILOG
ASSIGN	402:2	402:19	10	defcompression = COMPRESSION_SGILOG
LVAL	402:2	402:2	11	defcompression
FIELD	402:2	402:2	12	defcompression
LEAF_NODE	402:2	402:2	13	defcompression
ASSIGN_OP	402:17	402:17	11	=
LEAF_NODE	402:17	402:17	12	=
RVAL	402:19	402:19	11	COMPRESSION_SGILOG
FIELD	402:19	402:19	12	COMPRESSION_SGILOG
LEAF_NODE	402:19	402:19	13	COMPRESSION_SGILOG
LEAF_NODE	402:37	402:37	9	;
LEAF_NODE	403:1	403:1	7	}
SELECTION	403:3	404:2	3	
KEYWORD	403:3	403:3	4	else
LEAF_NODE	403:3	403:3	5	else
STATEMENTS	404:2	404:2	4	
JUMP_STATEMENT	404:2	404:12	5	return ( 0 ) ;
KEYWORD	404:2	404:2	6	return
LEAF_NODE	404:2	404:2	7	return
DESTINATION	404:9	404:9	6	( 0 )
EXPR	404:9	404:11	7	( 0 )
LEAF_NODE	404:9	404:9	8	(
FIELD	404:10	404:10	8	0
LEAF_NODE	404:10	404:10	9	0
LEAF_NODE	404:11	404:11	8	)
LEAF_NODE	404:12	404:12	6	;
JUMP_STATEMENT	405:1	405:11	3	return ( 1 ) ;
KEYWORD	405:1	405:1	4	return
LEAF_NODE	405:1	405:1	5	return
DESTINATION	405:8	405:8	4	( 1 )
EXPR	405:8	405:10	5	( 1 )
LEAF_NODE	405:8	405:8	6	(
FIELD	405:9	405:9	6	1
LEAF_NODE	405:9	405:9	7	1
LEAF_NODE	405:10	405:10	6	)
LEAF_NODE	405:11	405:11	4	;
LEAF_NODE	406:0	406:0	2	}
FUNCTION_DEF	472:0	483:0	1	
RETURN_TYPE	472:0	472:7	2	static void
LEAF_NODE	472:0	472:0	3	static
TYPE_NAME	472:7	472:7	3	void
LEAF_NODE	472:7	472:7	4	void
FUNCTION_NAME	473:0	473:0	2	usage
LEAF_NODE	473:0	473:0	3	usage
PARAMETER_LIST	473:5	473:10	2	( void )
LEAF_NODE	473:5	473:5	3	(
PARAMETER_DECL	473:6	473:6	3	void
LEAF_NODE	473:6	473:6	4	void
LEAF_NODE	473:10	473:10	3	)
LEAF_NODE	474:0	474:0	2	{
STATEMENTS	475:1	482:1	2	
SIMPLE_DECL	475:1	475:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	475:1	475:6	4	char [ BUFSIZ ] buf
TYPE	475:1	475:9	5	char [ BUFSIZ ]
TYPE_NAME	475:1	475:1	6	char
LEAF_NODE	475:1	475:1	7	char
TYPE_SUFFIX	475:9	475:16	6	[ BUFSIZ ]
LEAF_NODE	475:9	475:9	7	[
FIELD	475:10	475:10	7	BUFSIZ
LEAF_NODE	475:10	475:10	8	BUFSIZ
LEAF_NODE	475:16	475:16	7	]
NAME	475:6	475:6	5	buf
LEAF_NODE	475:6	475:6	6	buf
LEAF_NODE	475:17	475:17	4	;
SIMPLE_DECL	476:1	476:6	3	int i ;
VAR_DECL	476:1	476:5	4	int i
TYPE	476:1	476:1	5	int
TYPE_NAME	476:1	476:1	6	int
LEAF_NODE	476:1	476:1	7	int
NAME	476:5	476:5	5	i
LEAF_NODE	476:5	476:5	6	i
LEAF_NODE	476:6	476:6	4	;
EXPR_STATEMENT	478:1	478:20	3	setbuf ( stderr , buf ) ;
EXPR	478:1	478:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	478:1	478:19	5	setbuf ( stderr , buf )
CALLEE	478:1	478:1	6	setbuf
LEAF_NODE	478:1	478:1	7	setbuf
LEAF_NODE	478:7	478:7	6	(
ARGUMENT	478:8	478:8	6	stderr
FIELD	478:8	478:8	7	stderr
LEAF_NODE	478:8	478:8	8	stderr
LEAF_NODE	478:14	478:14	6	,
ARGUMENT	478:16	478:16	6	buf
FIELD	478:16	478:16	7	buf
LEAF_NODE	478:16	478:16	8	buf
LEAF_NODE	478:19	478:19	6	)
LEAF_NODE	478:20	478:20	4	;
EXPR_STATEMENT	479:1	479:44	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	479:1	479:1	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	479:1	479:43	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	479:1	479:1	6	fprintf
LEAF_NODE	479:1	479:1	7	fprintf
LEAF_NODE	479:8	479:8	6	(
ARGUMENT	479:9	479:9	6	stderr
FIELD	479:9	479:9	7	stderr
LEAF_NODE	479:9	479:9	8	stderr
LEAF_NODE	479:15	479:15	6	,
ARGUMENT	479:17	479:17	6	"%s\n\n"
FIELD	479:17	479:17	7	"%s\n\n"
LEAF_NODE	479:17	479:17	8	"%s\n\n"
LEAF_NODE	479:25	479:25	6	,
ARGUMENT	479:27	479:27	6	TIFFGetVersion ( )
FUNCTION_CALL	479:27	479:42	7	TIFFGetVersion ( )
CALLEE	479:27	479:27	8	TIFFGetVersion
LEAF_NODE	479:27	479:27	9	TIFFGetVersion
LEAF_NODE	479:41	479:41	8	(
LEAF_NODE	479:42	479:42	8	)
LEAF_NODE	479:43	479:43	6	)
LEAF_NODE	479:44	479:44	4	;
ITERATION	480:1	481:2	3	
KEYWORD	480:1	480:1	4	for
LEAF_NODE	480:1	480:1	5	for
LEAF_NODE	480:5	480:5	4	(
FOR_INIT	480:6	480:11	4	i = 0 ;
EXPR	480:6	480:6	5	i = 0
ASSIGN	480:6	480:10	6	i = 0
LVAL	480:6	480:6	7	i
FIELD	480:6	480:6	8	i
LEAF_NODE	480:6	480:6	9	i
ASSIGN_OP	480:8	480:8	7	=
LEAF_NODE	480:8	480:8	8	=
RVAL	480:10	480:10	7	0
FIELD	480:10	480:10	8	0
LEAF_NODE	480:10	480:10	9	0
LEAF_NODE	480:11	480:11	5	;
CONDITION	480:13	480:13	4	stuff [ i ] != NULL
EXPR	480:13	480:25	5	stuff [ i ] != NULL
FIELD	480:13	480:20	6	stuff [ i ]
LEAF_NODE	480:13	480:13	7	stuff
LEAF_NODE	480:18	480:18	7	[
EXPR	480:19	480:19	7	i
FIELD	480:19	480:19	8	i
LEAF_NODE	480:19	480:19	9	i
LEAF_NODE	480:20	480:20	7	]
EQ_OPERATOR	480:22	480:22	6	!=
LEAF_NODE	480:22	480:22	7	!=
FIELD	480:25	480:25	6	NULL
LEAF_NODE	480:25	480:25	7	NULL
LEAF_NODE	480:29	480:29	4	;
FOR_EXPR	480:31	480:31	4	i ++
EXPR	480:31	480:31	5	i ++
FIELD	480:31	480:32	6	i ++
LEAF_NODE	480:31	480:31	7	i
LEAF_NODE	480:32	480:32	7	++
LEAF_NODE	480:34	480:34	4	)
STATEMENTS	481:2	481:2	4	
EXPR_STATEMENT	481:2	481:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	481:2	481:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	481:2	481:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	481:2	481:2	8	fprintf
LEAF_NODE	481:2	481:2	9	fprintf
LEAF_NODE	481:9	481:9	8	(
ARGUMENT	481:10	481:10	8	stderr
FIELD	481:10	481:10	9	stderr
LEAF_NODE	481:10	481:10	10	stderr
LEAF_NODE	481:16	481:16	8	,
ARGUMENT	481:18	481:18	8	"%s\n"
FIELD	481:18	481:18	9	"%s\n"
LEAF_NODE	481:18	481:18	10	"%s\n"
LEAF_NODE	481:24	481:24	8	,
ARGUMENT	481:26	481:26	8	stuff [ i ]
FIELD	481:26	481:33	9	stuff [ i ]
LEAF_NODE	481:26	481:26	10	stuff
LEAF_NODE	481:31	481:31	10	[
EXPR	481:32	481:32	10	i
FIELD	481:32	481:32	11	i
LEAF_NODE	481:32	481:32	12	i
LEAF_NODE	481:33	481:33	10	]
LEAF_NODE	481:34	481:34	8	)
LEAF_NODE	481:35	481:35	6	;
EXPR_STATEMENT	482:1	482:9	3	exit ( - 1 ) ;
EXPR	482:1	482:1	4	exit ( - 1 )
FUNCTION_CALL	482:1	482:8	5	exit ( - 1 )
CALLEE	482:1	482:1	6	exit
LEAF_NODE	482:1	482:1	7	exit
LEAF_NODE	482:5	482:5	6	(
ARGUMENT	482:6	482:6	6	- 1
UNARY_EXPR	482:6	482:7	7	- 1
UNARY_OPERATOR	482:6	482:6	8	-
LEAF_NODE	482:6	482:6	9	-
FIELD	482:7	482:7	8	1
LEAF_NODE	482:7	482:7	9	1
LEAF_NODE	482:8	482:8	6	)
LEAF_NODE	482:9	482:9	4	;
LEAF_NODE	483:0	483:0	2	}
FUNCTION_DEF	494:0	547:0	1	
RETURN_TYPE	494:0	494:7	2	static void
LEAF_NODE	494:0	494:0	3	static
TYPE_NAME	494:7	494:7	3	void
LEAF_NODE	494:7	494:7	4	void
FUNCTION_NAME	495:0	495:0	2	cpTag
LEAF_NODE	495:0	495:0	3	cpTag
PARAMETER_LIST	495:5	495:70	2	( TIFF * in , TIFF * out , uint16 tag , uint16 count , TIFFDataType type )
LEAF_NODE	495:5	495:5	3	(
PARAMETER_DECL	495:6	495:12	3	TIFF * in
TYPE	495:6	495:10	4	TIFF *
TYPE_NAME	495:6	495:6	5	TIFF
LEAF_NODE	495:6	495:6	6	TIFF
POINTER	495:10	495:10	5	*
LEAF_NODE	495:10	495:10	6	*
NAME	495:12	495:12	4	in
LEAF_NODE	495:12	495:12	5	in
LEAF_NODE	495:14	495:14	3	,
PARAMETER_DECL	495:16	495:22	3	TIFF * out
TYPE	495:16	495:20	4	TIFF *
TYPE_NAME	495:16	495:16	5	TIFF
LEAF_NODE	495:16	495:16	6	TIFF
POINTER	495:20	495:20	5	*
LEAF_NODE	495:20	495:20	6	*
NAME	495:22	495:22	4	out
LEAF_NODE	495:22	495:22	5	out
LEAF_NODE	495:25	495:25	3	,
PARAMETER_DECL	495:27	495:34	3	uint16 tag
TYPE	495:27	495:27	4	uint16
TYPE_NAME	495:27	495:27	5	uint16
LEAF_NODE	495:27	495:27	6	uint16
NAME	495:34	495:34	4	tag
LEAF_NODE	495:34	495:34	5	tag
LEAF_NODE	495:37	495:37	3	,
PARAMETER_DECL	495:39	495:46	3	uint16 count
TYPE	495:39	495:39	4	uint16
TYPE_NAME	495:39	495:39	5	uint16
LEAF_NODE	495:39	495:39	6	uint16
NAME	495:46	495:46	4	count
LEAF_NODE	495:46	495:46	5	count
LEAF_NODE	495:51	495:51	3	,
PARAMETER_DECL	495:53	495:66	3	TIFFDataType type
TYPE	495:53	495:53	4	TIFFDataType
TYPE_NAME	495:53	495:53	5	TIFFDataType
LEAF_NODE	495:53	495:53	6	TIFFDataType
NAME	495:66	495:66	4	type
LEAF_NODE	495:66	495:66	5	type
LEAF_NODE	495:70	495:70	3	)
LEAF_NODE	496:0	496:0	2	{
STATEMENTS	497:1	497:1	2	
SELECTION	497:1	497:15	3	
KEYWORD	497:1	497:1	4	switch
LEAF_NODE	497:1	497:1	5	switch
LEAF_NODE	497:8	497:8	4	(
CONDITION	497:9	497:9	4	type
EXPR	497:9	497:9	5	type
FIELD	497:9	497:9	6	type
LEAF_NODE	497:9	497:9	7	type
LEAF_NODE	497:13	497:13	4	)
STATEMENTS	497:15	546:1	4	
LEAF_NODE	497:15	497:15	5	{
STATEMENTS	498:1	543:2	5	
LABEL	498:1	498:16	6	case TIFF_SHORT :
LEAF_NODE	498:1	498:1	7	case
LEAF_NODE	498:6	498:6	7	TIFF_SHORT
LEAF_NODE	498:16	498:16	7	:
SELECTION	499:2	499:18	6	
KEYWORD	499:2	499:2	7	if
LEAF_NODE	499:2	499:2	8	if
LEAF_NODE	499:5	499:5	7	(
CONDITION	499:6	499:6	7	count == 1
EXPR	499:6	499:15	8	count == 1
FIELD	499:6	499:6	9	count
LEAF_NODE	499:6	499:6	10	count
EQ_OPERATOR	499:12	499:12	9	==
LEAF_NODE	499:12	499:12	10	==
FIELD	499:15	499:15	9	1
LEAF_NODE	499:15	499:15	10	1
LEAF_NODE	499:16	499:16	7	)
STATEMENTS	499:18	502:2	7	
LEAF_NODE	499:18	499:18	8	{
STATEMENTS	500:3	501:3	8	
SIMPLE_DECL	500:3	500:16	9	uint16 shortv ;
VAR_DECL	500:3	500:10	10	uint16 shortv
TYPE	500:3	500:3	11	uint16
TYPE_NAME	500:3	500:3	12	uint16
LEAF_NODE	500:3	500:3	13	uint16
NAME	500:10	500:10	11	shortv
LEAF_NODE	500:10	500:10	12	shortv
LEAF_NODE	500:16	500:16	10	;
EXPR_STATEMENT	501:3	501:25	9	CopyField ( tag , shortv ) ;
EXPR	501:3	501:3	10	CopyField ( tag , shortv )
FUNCTION_CALL	501:3	501:24	11	CopyField ( tag , shortv )
CALLEE	501:3	501:3	12	CopyField
LEAF_NODE	501:3	501:3	13	CopyField
LEAF_NODE	501:12	501:12	12	(
ARGUMENT	501:13	501:13	12	tag
FIELD	501:13	501:13	13	tag
LEAF_NODE	501:13	501:13	14	tag
LEAF_NODE	501:16	501:16	12	,
ARGUMENT	501:18	501:18	12	shortv
FIELD	501:18	501:18	13	shortv
LEAF_NODE	501:18	501:18	14	shortv
LEAF_NODE	501:24	501:24	12	)
LEAF_NODE	501:25	501:25	10	;
LEAF_NODE	502:2	502:2	8	}
SELECTION	502:4	502:9	6	
KEYWORD	502:4	502:4	7	else
LEAF_NODE	502:4	502:4	8	else
STATEMENTS	502:9	502:9	7	
SELECTION	502:9	502:25	8	
KEYWORD	502:9	502:9	9	if
LEAF_NODE	502:9	502:9	10	if
LEAF_NODE	502:12	502:12	9	(
CONDITION	502:13	502:13	9	count == 2
EXPR	502:13	502:22	10	count == 2
FIELD	502:13	502:13	11	count
LEAF_NODE	502:13	502:13	12	count
EQ_OPERATOR	502:19	502:19	11	==
LEAF_NODE	502:19	502:19	12	==
FIELD	502:22	502:22	11	2
LEAF_NODE	502:22	502:22	12	2
LEAF_NODE	502:23	502:23	9	)
STATEMENTS	502:25	505:2	9	
LEAF_NODE	502:25	502:25	10	{
STATEMENTS	503:3	504:3	10	
SIMPLE_DECL	503:3	503:26	11	uint16 shortv1 , uint16 shortv2 ;
INIT_DECL_LIST	503:3	503:3	12	uint16 shortv1 , uint16 shortv2
VAR_DECL	503:3	503:10	13	uint16 shortv1
TYPE	503:3	503:3	14	uint16
TYPE_NAME	503:3	503:3	15	uint16
LEAF_NODE	503:3	503:3	16	uint16
NAME	503:10	503:10	14	shortv1
LEAF_NODE	503:10	503:10	15	shortv1
LEAF_NODE	503:17	503:17	13	,
VAR_DECL	503:3	503:19	13	uint16 shortv2
TYPE	503:3	503:3	14	uint16
TYPE_NAME	503:3	503:3	15	uint16
LEAF_NODE	503:3	503:3	16	uint16
NAME	503:19	503:19	14	shortv2
LEAF_NODE	503:19	503:19	15	shortv2
LEAF_NODE	503:26	503:26	12	;
EXPR_STATEMENT	504:3	504:36	11	CopyField2 ( tag , shortv1 , shortv2 ) ;
EXPR	504:3	504:3	12	CopyField2 ( tag , shortv1 , shortv2 )
FUNCTION_CALL	504:3	504:35	13	CopyField2 ( tag , shortv1 , shortv2 )
CALLEE	504:3	504:3	14	CopyField2
LEAF_NODE	504:3	504:3	15	CopyField2
LEAF_NODE	504:13	504:13	14	(
ARGUMENT	504:14	504:14	14	tag
FIELD	504:14	504:14	15	tag
LEAF_NODE	504:14	504:14	16	tag
LEAF_NODE	504:17	504:17	14	,
ARGUMENT	504:19	504:19	14	shortv1
FIELD	504:19	504:19	15	shortv1
LEAF_NODE	504:19	504:19	16	shortv1
LEAF_NODE	504:26	504:26	14	,
ARGUMENT	504:28	504:28	14	shortv2
FIELD	504:28	504:28	15	shortv2
LEAF_NODE	504:28	504:28	16	shortv2
LEAF_NODE	504:35	504:35	14	)
LEAF_NODE	504:36	504:36	12	;
LEAF_NODE	505:2	505:2	10	}
SELECTION	505:4	505:9	6	
KEYWORD	505:4	505:4	7	else
LEAF_NODE	505:4	505:4	8	else
STATEMENTS	505:9	505:9	7	
SELECTION	505:9	505:25	8	
KEYWORD	505:9	505:9	9	if
LEAF_NODE	505:9	505:9	10	if
LEAF_NODE	505:12	505:12	9	(
CONDITION	505:13	505:13	9	count == 4
EXPR	505:13	505:22	10	count == 4
FIELD	505:13	505:13	11	count
LEAF_NODE	505:13	505:13	12	count
EQ_OPERATOR	505:19	505:19	11	==
LEAF_NODE	505:19	505:19	12	==
FIELD	505:22	505:22	11	4
LEAF_NODE	505:22	505:22	12	4
LEAF_NODE	505:23	505:23	9	)
STATEMENTS	505:25	508:2	9	
LEAF_NODE	505:25	505:25	10	{
STATEMENTS	506:3	507:3	10	
SIMPLE_DECL	506:3	506:28	11	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta ;
INIT_DECL_LIST	506:3	506:3	12	uint16 * tr , uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	506:3	506:11	13	uint16 * tr
TYPE	506:3	506:10	14	uint16 *
TYPE_NAME	506:3	506:3	15	uint16
LEAF_NODE	506:3	506:3	16	uint16
POINTER	506:10	506:10	15	*
LEAF_NODE	506:10	506:10	16	*
NAME	506:11	506:11	14	tr
LEAF_NODE	506:11	506:11	15	tr
LEAF_NODE	506:13	506:13	13	,
INIT_DECL_LIST	506:3	506:3	13	uint16 * tg , uint16 * tb , uint16 * ta
VAR_DECL	506:3	506:16	14	uint16 * tg
TYPE	506:3	506:15	15	uint16 *
TYPE_NAME	506:3	506:3	16	uint16
LEAF_NODE	506:3	506:3	17	uint16
POINTER	506:15	506:15	16	*
LEAF_NODE	506:15	506:15	17	*
NAME	506:16	506:16	15	tg
LEAF_NODE	506:16	506:16	16	tg
LEAF_NODE	506:18	506:18	14	,
INIT_DECL_LIST	506:3	506:3	14	uint16 * tb , uint16 * ta
VAR_DECL	506:3	506:21	15	uint16 * tb
TYPE	506:3	506:20	16	uint16 *
TYPE_NAME	506:3	506:3	17	uint16
LEAF_NODE	506:3	506:3	18	uint16
POINTER	506:20	506:20	17	*
LEAF_NODE	506:20	506:20	18	*
NAME	506:21	506:21	16	tb
LEAF_NODE	506:21	506:21	17	tb
LEAF_NODE	506:23	506:23	15	,
VAR_DECL	506:3	506:26	15	uint16 * ta
TYPE	506:3	506:25	16	uint16 *
TYPE_NAME	506:3	506:3	17	uint16
LEAF_NODE	506:3	506:3	18	uint16
POINTER	506:25	506:25	17	*
LEAF_NODE	506:25	506:25	18	*
NAME	506:26	506:26	16	ta
LEAF_NODE	506:26	506:26	17	ta
LEAF_NODE	506:28	506:28	12	;
EXPR_STATEMENT	507:3	507:34	11	CopyField4 ( tag , tr , tg , tb , ta ) ;
EXPR	507:3	507:3	12	CopyField4 ( tag , tr , tg , tb , ta )
FUNCTION_CALL	507:3	507:33	13	CopyField4 ( tag , tr , tg , tb , ta )
CALLEE	507:3	507:3	14	CopyField4
LEAF_NODE	507:3	507:3	15	CopyField4
LEAF_NODE	507:13	507:13	14	(
ARGUMENT	507:14	507:14	14	tag
FIELD	507:14	507:14	15	tag
LEAF_NODE	507:14	507:14	16	tag
LEAF_NODE	507:17	507:17	14	,
ARGUMENT	507:19	507:19	14	tr
FIELD	507:19	507:19	15	tr
LEAF_NODE	507:19	507:19	16	tr
LEAF_NODE	507:21	507:21	14	,
ARGUMENT	507:23	507:23	14	tg
FIELD	507:23	507:23	15	tg
LEAF_NODE	507:23	507:23	16	tg
LEAF_NODE	507:25	507:25	14	,
ARGUMENT	507:27	507:27	14	tb
FIELD	507:27	507:27	15	tb
LEAF_NODE	507:27	507:27	16	tb
LEAF_NODE	507:29	507:29	14	,
ARGUMENT	507:31	507:31	14	ta
FIELD	507:31	507:31	15	ta
LEAF_NODE	507:31	507:31	16	ta
LEAF_NODE	507:33	507:33	14	)
LEAF_NODE	507:34	507:34	12	;
LEAF_NODE	508:2	508:2	10	}
SELECTION	508:4	508:9	6	
KEYWORD	508:4	508:4	7	else
LEAF_NODE	508:4	508:4	8	else
STATEMENTS	508:9	508:9	7	
SELECTION	508:9	508:35	8	
KEYWORD	508:9	508:9	9	if
LEAF_NODE	508:9	508:9	10	if
LEAF_NODE	508:12	508:12	9	(
CONDITION	508:13	508:13	9	count == ( uint16 ) - 1
EXPR	508:13	508:31	10	count == ( uint16 ) - 1
FIELD	508:13	508:13	11	count
LEAF_NODE	508:13	508:13	12	count
EQ_OPERATOR	508:19	508:19	11	==
LEAF_NODE	508:19	508:19	12	==
LEAF_NODE	508:22	508:22	11	(
TYPE_NAME	508:23	508:23	11	uint16
LEAF_NODE	508:23	508:23	12	uint16
LEAF_NODE	508:29	508:29	11	)
UNARY_EXPR	508:31	508:32	11	- 1
UNARY_OPERATOR	508:31	508:31	12	-
LEAF_NODE	508:31	508:31	13	-
FIELD	508:32	508:32	12	1
LEAF_NODE	508:32	508:32	13	1
LEAF_NODE	508:33	508:33	9	)
STATEMENTS	508:35	512:2	9	
LEAF_NODE	508:35	508:35	10	{
STATEMENTS	509:3	511:3	10	
SIMPLE_DECL	509:3	509:17	11	uint16 shortv1 ;
VAR_DECL	509:3	509:10	12	uint16 shortv1
TYPE	509:3	509:3	13	uint16
TYPE_NAME	509:3	509:3	14	uint16
LEAF_NODE	509:3	509:3	15	uint16
NAME	509:10	509:10	13	shortv1
LEAF_NODE	509:10	509:10	14	shortv1
LEAF_NODE	509:17	509:17	12	;
SIMPLE_DECL	510:3	510:18	11	uint16 * shortav ;
VAR_DECL	510:3	510:11	12	uint16 * shortav
TYPE	510:3	510:9	13	uint16 *
TYPE_NAME	510:3	510:3	14	uint16
LEAF_NODE	510:3	510:3	15	uint16
POINTER	510:9	510:9	14	*
LEAF_NODE	510:9	510:9	15	*
NAME	510:11	510:11	13	shortav
LEAF_NODE	510:11	510:11	14	shortav
LEAF_NODE	510:18	510:18	12	;
EXPR_STATEMENT	511:3	511:36	11	CopyField2 ( tag , shortv1 , shortav ) ;
EXPR	511:3	511:3	12	CopyField2 ( tag , shortv1 , shortav )
FUNCTION_CALL	511:3	511:35	13	CopyField2 ( tag , shortv1 , shortav )
CALLEE	511:3	511:3	14	CopyField2
LEAF_NODE	511:3	511:3	15	CopyField2
LEAF_NODE	511:13	511:13	14	(
ARGUMENT	511:14	511:14	14	tag
FIELD	511:14	511:14	15	tag
LEAF_NODE	511:14	511:14	16	tag
LEAF_NODE	511:17	511:17	14	,
ARGUMENT	511:19	511:19	14	shortv1
FIELD	511:19	511:19	15	shortv1
LEAF_NODE	511:19	511:19	16	shortv1
LEAF_NODE	511:26	511:26	14	,
ARGUMENT	511:28	511:28	14	shortav
FIELD	511:28	511:28	15	shortav
LEAF_NODE	511:28	511:28	16	shortav
LEAF_NODE	511:35	511:35	14	)
LEAF_NODE	511:36	511:36	12	;
LEAF_NODE	512:2	512:2	10	}
JUMP_STATEMENT	513:2	513:7	6	break DESTINATION ;
KEYWORD	513:2	513:2	7	break
LEAF_NODE	513:2	513:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	513:7	513:7	7	;
LABEL	514:1	514:15	6	case TIFF_LONG :
LEAF_NODE	514:1	514:1	7	case
LEAF_NODE	514:6	514:6	7	TIFF_LONG
LEAF_NODE	514:15	514:15	7	:
LEAF_NODE	515:2	515:2	6	{
STATEMENTS	515:4	516:4	6	
SIMPLE_DECL	515:4	515:16	7	uint32 longv ;
VAR_DECL	515:4	515:11	8	uint32 longv
TYPE	515:4	515:4	9	uint32
TYPE_NAME	515:4	515:4	10	uint32
LEAF_NODE	515:4	515:4	11	uint32
NAME	515:11	515:11	9	longv
LEAF_NODE	515:11	515:11	10	longv
LEAF_NODE	515:16	515:16	8	;
EXPR_STATEMENT	516:4	516:25	7	CopyField ( tag , longv ) ;
EXPR	516:4	516:4	8	CopyField ( tag , longv )
FUNCTION_CALL	516:4	516:24	9	CopyField ( tag , longv )
CALLEE	516:4	516:4	10	CopyField
LEAF_NODE	516:4	516:4	11	CopyField
LEAF_NODE	516:13	516:13	10	(
ARGUMENT	516:14	516:14	10	tag
FIELD	516:14	516:14	11	tag
LEAF_NODE	516:14	516:14	12	tag
LEAF_NODE	516:17	516:17	10	,
ARGUMENT	516:19	516:19	10	longv
FIELD	516:19	516:19	11	longv
LEAF_NODE	516:19	516:19	12	longv
LEAF_NODE	516:24	516:24	10	)
LEAF_NODE	516:25	516:25	8	;
LEAF_NODE	517:2	517:2	6	}
JUMP_STATEMENT	518:2	518:7	6	break DESTINATION ;
KEYWORD	518:2	518:2	7	break
LEAF_NODE	518:2	518:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	518:7	518:7	7	;
LABEL	519:1	519:19	6	case TIFF_RATIONAL :
LEAF_NODE	519:1	519:1	7	case
LEAF_NODE	519:6	519:6	7	TIFF_RATIONAL
LEAF_NODE	519:19	519:19	7	:
SELECTION	520:2	520:18	6	
KEYWORD	520:2	520:2	7	if
LEAF_NODE	520:2	520:2	8	if
LEAF_NODE	520:5	520:5	7	(
CONDITION	520:6	520:6	7	count == 1
EXPR	520:6	520:15	8	count == 1
FIELD	520:6	520:6	9	count
LEAF_NODE	520:6	520:6	10	count
EQ_OPERATOR	520:12	520:12	9	==
LEAF_NODE	520:12	520:12	10	==
FIELD	520:15	520:15	9	1
LEAF_NODE	520:15	520:15	10	1
LEAF_NODE	520:16	520:16	7	)
STATEMENTS	520:18	523:2	7	
LEAF_NODE	520:18	520:18	8	{
STATEMENTS	521:3	522:3	8	
SIMPLE_DECL	521:3	521:15	9	float floatv ;
VAR_DECL	521:3	521:9	10	float floatv
TYPE	521:3	521:3	11	float
TYPE_NAME	521:3	521:3	12	float
LEAF_NODE	521:3	521:3	13	float
NAME	521:9	521:9	11	floatv
LEAF_NODE	521:9	521:9	12	floatv
LEAF_NODE	521:15	521:15	10	;
EXPR_STATEMENT	522:3	522:25	9	CopyField ( tag , floatv ) ;
EXPR	522:3	522:3	10	CopyField ( tag , floatv )
FUNCTION_CALL	522:3	522:24	11	CopyField ( tag , floatv )
CALLEE	522:3	522:3	12	CopyField
LEAF_NODE	522:3	522:3	13	CopyField
LEAF_NODE	522:12	522:12	12	(
ARGUMENT	522:13	522:13	12	tag
FIELD	522:13	522:13	13	tag
LEAF_NODE	522:13	522:13	14	tag
LEAF_NODE	522:16	522:16	12	,
ARGUMENT	522:18	522:18	12	floatv
FIELD	522:18	522:18	13	floatv
LEAF_NODE	522:18	522:18	14	floatv
LEAF_NODE	522:24	522:24	12	)
LEAF_NODE	522:25	522:25	10	;
LEAF_NODE	523:2	523:2	8	}
SELECTION	523:4	523:9	6	
KEYWORD	523:4	523:4	7	else
LEAF_NODE	523:4	523:4	8	else
STATEMENTS	523:9	523:9	7	
SELECTION	523:9	523:35	8	
KEYWORD	523:9	523:9	9	if
LEAF_NODE	523:9	523:9	10	if
LEAF_NODE	523:12	523:12	9	(
CONDITION	523:13	523:13	9	count == ( uint16 ) - 1
EXPR	523:13	523:31	10	count == ( uint16 ) - 1
FIELD	523:13	523:13	11	count
LEAF_NODE	523:13	523:13	12	count
EQ_OPERATOR	523:19	523:19	11	==
LEAF_NODE	523:19	523:19	12	==
LEAF_NODE	523:22	523:22	11	(
TYPE_NAME	523:23	523:23	11	uint16
LEAF_NODE	523:23	523:23	12	uint16
LEAF_NODE	523:29	523:29	11	)
UNARY_EXPR	523:31	523:32	11	- 1
UNARY_OPERATOR	523:31	523:31	12	-
LEAF_NODE	523:31	523:31	13	-
FIELD	523:32	523:32	12	1
LEAF_NODE	523:32	523:32	13	1
LEAF_NODE	523:33	523:33	9	)
STATEMENTS	523:35	526:2	9	
LEAF_NODE	523:35	523:35	10	{
STATEMENTS	524:3	525:3	10	
SIMPLE_DECL	524:3	524:17	11	float * floatav ;
VAR_DECL	524:3	524:10	12	float * floatav
TYPE	524:3	524:8	13	float *
TYPE_NAME	524:3	524:3	14	float
LEAF_NODE	524:3	524:3	15	float
POINTER	524:8	524:8	14	*
LEAF_NODE	524:8	524:8	15	*
NAME	524:10	524:10	13	floatav
LEAF_NODE	524:10	524:10	14	floatav
LEAF_NODE	524:17	524:17	12	;
EXPR_STATEMENT	525:3	525:26	11	CopyField ( tag , floatav ) ;
EXPR	525:3	525:3	12	CopyField ( tag , floatav )
FUNCTION_CALL	525:3	525:25	13	CopyField ( tag , floatav )
CALLEE	525:3	525:3	14	CopyField
LEAF_NODE	525:3	525:3	15	CopyField
LEAF_NODE	525:12	525:12	14	(
ARGUMENT	525:13	525:13	14	tag
FIELD	525:13	525:13	15	tag
LEAF_NODE	525:13	525:13	16	tag
LEAF_NODE	525:16	525:16	14	,
ARGUMENT	525:18	525:18	14	floatav
FIELD	525:18	525:18	15	floatav
LEAF_NODE	525:18	525:18	16	floatav
LEAF_NODE	525:25	525:25	14	)
LEAF_NODE	525:26	525:26	12	;
LEAF_NODE	526:2	526:2	10	}
JUMP_STATEMENT	527:2	527:7	6	break DESTINATION ;
KEYWORD	527:2	527:2	7	break
LEAF_NODE	527:2	527:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	527:7	527:7	7	;
LABEL	528:1	528:16	6	case TIFF_ASCII :
LEAF_NODE	528:1	528:1	7	case
LEAF_NODE	528:6	528:6	7	TIFF_ASCII
LEAF_NODE	528:16	528:16	7	:
LEAF_NODE	529:2	529:2	6	{
STATEMENTS	529:4	530:4	6	
SIMPLE_DECL	529:4	529:17	7	char * stringv ;
VAR_DECL	529:4	529:10	8	char * stringv
TYPE	529:4	529:8	9	char *
TYPE_NAME	529:4	529:4	10	char
LEAF_NODE	529:4	529:4	11	char
POINTER	529:8	529:8	10	*
LEAF_NODE	529:8	529:8	11	*
NAME	529:10	529:10	9	stringv
LEAF_NODE	529:10	529:10	10	stringv
LEAF_NODE	529:17	529:17	8	;
EXPR_STATEMENT	530:4	530:27	7	CopyField ( tag , stringv ) ;
EXPR	530:4	530:4	8	CopyField ( tag , stringv )
FUNCTION_CALL	530:4	530:26	9	CopyField ( tag , stringv )
CALLEE	530:4	530:4	10	CopyField
LEAF_NODE	530:4	530:4	11	CopyField
LEAF_NODE	530:13	530:13	10	(
ARGUMENT	530:14	530:14	10	tag
FIELD	530:14	530:14	11	tag
LEAF_NODE	530:14	530:14	12	tag
LEAF_NODE	530:17	530:17	10	,
ARGUMENT	530:19	530:19	10	stringv
FIELD	530:19	530:19	11	stringv
LEAF_NODE	530:19	530:19	12	stringv
LEAF_NODE	530:26	530:26	10	)
LEAF_NODE	530:27	530:27	8	;
LEAF_NODE	531:2	531:2	6	}
JUMP_STATEMENT	532:2	532:7	6	break DESTINATION ;
KEYWORD	532:2	532:2	7	break
LEAF_NODE	532:2	532:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	532:7	532:7	7	;
LABEL	533:1	533:17	6	case TIFF_DOUBLE :
LEAF_NODE	533:1	533:1	7	case
LEAF_NODE	533:6	533:6	7	TIFF_DOUBLE
LEAF_NODE	533:17	533:17	7	:
SELECTION	534:2	534:18	6	
KEYWORD	534:2	534:2	7	if
LEAF_NODE	534:2	534:2	8	if
LEAF_NODE	534:5	534:5	7	(
CONDITION	534:6	534:6	7	count == 1
EXPR	534:6	534:15	8	count == 1
FIELD	534:6	534:6	9	count
LEAF_NODE	534:6	534:6	10	count
EQ_OPERATOR	534:12	534:12	9	==
LEAF_NODE	534:12	534:12	10	==
FIELD	534:15	534:15	9	1
LEAF_NODE	534:15	534:15	10	1
LEAF_NODE	534:16	534:16	7	)
STATEMENTS	534:18	537:2	7	
LEAF_NODE	534:18	534:18	8	{
STATEMENTS	535:3	536:3	8	
SIMPLE_DECL	535:3	535:17	9	double doublev ;
VAR_DECL	535:3	535:10	10	double doublev
TYPE	535:3	535:3	11	double
TYPE_NAME	535:3	535:3	12	double
LEAF_NODE	535:3	535:3	13	double
NAME	535:10	535:10	11	doublev
LEAF_NODE	535:10	535:10	12	doublev
LEAF_NODE	535:17	535:17	10	;
EXPR_STATEMENT	536:3	536:26	9	CopyField ( tag , doublev ) ;
EXPR	536:3	536:3	10	CopyField ( tag , doublev )
FUNCTION_CALL	536:3	536:25	11	CopyField ( tag , doublev )
CALLEE	536:3	536:3	12	CopyField
LEAF_NODE	536:3	536:3	13	CopyField
LEAF_NODE	536:12	536:12	12	(
ARGUMENT	536:13	536:13	12	tag
FIELD	536:13	536:13	13	tag
LEAF_NODE	536:13	536:13	14	tag
LEAF_NODE	536:16	536:16	12	,
ARGUMENT	536:18	536:18	12	doublev
FIELD	536:18	536:18	13	doublev
LEAF_NODE	536:18	536:18	14	doublev
LEAF_NODE	536:25	536:25	12	)
LEAF_NODE	536:26	536:26	10	;
LEAF_NODE	537:2	537:2	8	}
SELECTION	537:4	537:9	6	
KEYWORD	537:4	537:4	7	else
LEAF_NODE	537:4	537:4	8	else
STATEMENTS	537:9	537:9	7	
SELECTION	537:9	537:35	8	
KEYWORD	537:9	537:9	9	if
LEAF_NODE	537:9	537:9	10	if
LEAF_NODE	537:12	537:12	9	(
CONDITION	537:13	537:13	9	count == ( uint16 ) - 1
EXPR	537:13	537:31	10	count == ( uint16 ) - 1
FIELD	537:13	537:13	11	count
LEAF_NODE	537:13	537:13	12	count
EQ_OPERATOR	537:19	537:19	11	==
LEAF_NODE	537:19	537:19	12	==
LEAF_NODE	537:22	537:22	11	(
TYPE_NAME	537:23	537:23	11	uint16
LEAF_NODE	537:23	537:23	12	uint16
LEAF_NODE	537:29	537:29	11	)
UNARY_EXPR	537:31	537:32	11	- 1
UNARY_OPERATOR	537:31	537:31	12	-
LEAF_NODE	537:31	537:31	13	-
FIELD	537:32	537:32	12	1
LEAF_NODE	537:32	537:32	13	1
LEAF_NODE	537:33	537:33	9	)
STATEMENTS	537:35	540:2	9	
LEAF_NODE	537:35	537:35	10	{
STATEMENTS	538:3	539:3	10	
SIMPLE_DECL	538:3	538:19	11	double * doubleav ;
VAR_DECL	538:3	538:11	12	double * doubleav
TYPE	538:3	538:9	13	double *
TYPE_NAME	538:3	538:3	14	double
LEAF_NODE	538:3	538:3	15	double
POINTER	538:9	538:9	14	*
LEAF_NODE	538:9	538:9	15	*
NAME	538:11	538:11	13	doubleav
LEAF_NODE	538:11	538:11	14	doubleav
LEAF_NODE	538:19	538:19	12	;
EXPR_STATEMENT	539:3	539:27	11	CopyField ( tag , doubleav ) ;
EXPR	539:3	539:3	12	CopyField ( tag , doubleav )
FUNCTION_CALL	539:3	539:26	13	CopyField ( tag , doubleav )
CALLEE	539:3	539:3	14	CopyField
LEAF_NODE	539:3	539:3	15	CopyField
LEAF_NODE	539:12	539:12	14	(
ARGUMENT	539:13	539:13	14	tag
FIELD	539:13	539:13	15	tag
LEAF_NODE	539:13	539:13	16	tag
LEAF_NODE	539:16	539:16	14	,
ARGUMENT	539:18	539:18	14	doubleav
FIELD	539:18	539:18	15	doubleav
LEAF_NODE	539:18	539:18	16	doubleav
LEAF_NODE	539:26	539:26	14	)
LEAF_NODE	539:27	539:27	12	;
LEAF_NODE	540:2	540:2	10	}
JUMP_STATEMENT	541:2	541:7	6	break DESTINATION ;
KEYWORD	541:2	541:2	7	break
LEAF_NODE	541:2	541:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	541:7	541:7	7	;
LABEL	542:1	542:8	6	default :
LEAF_NODE	542:1	542:1	7	default
LEAF_NODE	542:8	542:8	7	:
EXPR_STATEMENT	543:2	545:16	6	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type ) ;
EXPR	543:2	543:2	7	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
FUNCTION_CALL	543:2	545:15	8	TIFFError ( TIFFFileName ( in ) , "Data type %d is not supported, tag %d skipped." , tag , type )
CALLEE	543:2	543:2	9	TIFFError
LEAF_NODE	543:2	543:2	10	TIFFError
LEAF_NODE	543:11	543:11	9	(
ARGUMENT	543:12	543:12	9	TIFFFileName ( in )
FUNCTION_CALL	543:12	543:27	10	TIFFFileName ( in )
CALLEE	543:12	543:12	11	TIFFFileName
LEAF_NODE	543:12	543:12	12	TIFFFileName
LEAF_NODE	543:24	543:24	11	(
ARGUMENT	543:25	543:25	11	in
FIELD	543:25	543:25	12	in
LEAF_NODE	543:25	543:25	13	in
LEAF_NODE	543:27	543:27	11	)
LEAF_NODE	543:28	543:28	9	,
ARGUMENT	544:6	544:6	9	"Data type %d is not supported, tag %d skipped."
FIELD	544:6	544:6	10	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	544:6	544:6	11	"Data type %d is not supported, tag %d skipped."
LEAF_NODE	544:54	544:54	9	,
ARGUMENT	545:6	545:6	9	tag
FIELD	545:6	545:6	10	tag
LEAF_NODE	545:6	545:6	11	tag
LEAF_NODE	545:9	545:9	9	,
ARGUMENT	545:11	545:11	9	type
FIELD	545:11	545:11	10	type
LEAF_NODE	545:11	545:11	11	type
LEAF_NODE	545:15	545:15	9	)
LEAF_NODE	545:16	545:16	7	;
LEAF_NODE	546:1	546:1	5	}
LEAF_NODE	547:0	547:0	2	}
SIMPLE_DECL	550:1	550:11	1	uint16 tag ;
VAR_DECL	550:1	550:8	2	uint16 tag
TYPE	550:1	550:1	3	uint16
TYPE_NAME	550:1	550:1	4	uint16
LEAF_NODE	550:1	550:1	5	uint16
NAME	550:8	550:8	3	tag
LEAF_NODE	550:8	550:8	4	tag
LEAF_NODE	550:11	550:11	2	;
SIMPLE_DECL	551:1	551:13	1	uint16 count ;
VAR_DECL	551:1	551:8	2	uint16 count
TYPE	551:1	551:1	3	uint16
TYPE_NAME	551:1	551:1	4	uint16
LEAF_NODE	551:1	551:1	5	uint16
NAME	551:8	551:8	3	count
LEAF_NODE	551:8	551:8	4	count
LEAF_NODE	551:13	551:13	2	;
SIMPLE_DECL	552:1	552:18	1	TIFFDataType type ;
VAR_DECL	552:1	552:14	2	TIFFDataType type
TYPE	552:1	552:1	3	TIFFDataType
TYPE_NAME	552:1	552:1	4	TIFFDataType
LEAF_NODE	552:1	552:1	5	TIFFDataType
NAME	552:14	552:14	3	type
LEAF_NODE	552:14	552:14	4	type
LEAF_NODE	552:18	552:18	2	;
FUNCTION_DEF	598:0	833:0	1	
RETURN_TYPE	598:0	598:7	2	static int
LEAF_NODE	598:0	598:0	3	static
TYPE_NAME	598:7	598:7	3	int
LEAF_NODE	598:7	598:7	4	int
FUNCTION_NAME	599:0	599:0	2	tiffcp
LEAF_NODE	599:0	599:0	3	tiffcp
PARAMETER_LIST	599:6	599:26	2	( TIFF * in , TIFF * out )
LEAF_NODE	599:6	599:6	3	(
PARAMETER_DECL	599:7	599:13	3	TIFF * in
TYPE	599:7	599:11	4	TIFF *
TYPE_NAME	599:7	599:7	5	TIFF
LEAF_NODE	599:7	599:7	6	TIFF
POINTER	599:11	599:11	5	*
LEAF_NODE	599:11	599:11	6	*
NAME	599:13	599:13	4	in
LEAF_NODE	599:13	599:13	5	in
LEAF_NODE	599:15	599:15	3	,
PARAMETER_DECL	599:17	599:23	3	TIFF * out
TYPE	599:17	599:21	4	TIFF *
TYPE_NAME	599:17	599:17	5	TIFF
LEAF_NODE	599:17	599:17	6	TIFF
POINTER	599:21	599:21	5	*
LEAF_NODE	599:21	599:21	6	*
NAME	599:23	599:23	4	out
LEAF_NODE	599:23	599:23	5	out
LEAF_NODE	599:26	599:26	3	)
LEAF_NODE	600:0	600:0	2	{
STATEMENTS	601:1	832:1	2	
SIMPLE_DECL	601:1	601:46	3	uint16 bitspersample ; bitspersample = 1 , uint16 samplesperpixel ; samplesperpixel = 1 ;
INIT_DECL_LIST	601:1	601:1	4	uint16 bitspersample ; bitspersample = 1 , uint16 samplesperpixel ; samplesperpixel = 1
VAR_DECL	601:1	601:8	5	uint16 bitspersample ; bitspersample = 1
TYPE	601:1	601:1	6	uint16
TYPE_NAME	601:1	601:1	7	uint16
LEAF_NODE	601:1	601:1	8	uint16
NAME	601:8	601:8	6	bitspersample
LEAF_NODE	601:8	601:8	7	bitspersample
LEAF_NODE	0:0	0:0	6	;
INIT	601:8	601:8	6	bitspersample = 1
ASSIGN	601:8	601:24	7	bitspersample = 1
LVAL	601:8	601:8	8	bitspersample
NAME	601:8	601:8	9	bitspersample
LEAF_NODE	601:8	601:8	10	bitspersample
ASSIGN_OP	601:22	601:22	8	=
LEAF_NODE	601:22	601:22	9	=
RVAL	601:24	601:24	8	1
FIELD	601:24	601:24	9	1
LEAF_NODE	601:24	601:24	10	1
LEAF_NODE	601:25	601:25	5	,
VAR_DECL	601:1	601:27	5	uint16 samplesperpixel ; samplesperpixel = 1
TYPE	601:1	601:1	6	uint16
TYPE_NAME	601:1	601:1	7	uint16
LEAF_NODE	601:1	601:1	8	uint16
NAME	601:27	601:27	6	samplesperpixel
LEAF_NODE	601:27	601:27	7	samplesperpixel
LEAF_NODE	0:0	0:0	6	;
INIT	601:27	601:27	6	samplesperpixel = 1
ASSIGN	601:27	601:45	7	samplesperpixel = 1
LVAL	601:27	601:27	8	samplesperpixel
NAME	601:27	601:27	9	samplesperpixel
LEAF_NODE	601:27	601:27	10	samplesperpixel
ASSIGN_OP	601:43	601:43	8	=
LEAF_NODE	601:43	601:43	9	=
RVAL	601:45	601:45	8	1
FIELD	601:45	601:45	9	1
LEAF_NODE	601:45	601:45	10	1
LEAF_NODE	601:46	601:46	4	;
SIMPLE_DECL	602:1	602:69	3	uint16 input_compression , uint16 input_photometric ; input_photometric = PHOTOMETRIC_MINISBLACK ;
INIT_DECL_LIST	602:1	602:1	4	uint16 input_compression , uint16 input_photometric ; input_photometric = PHOTOMETRIC_MINISBLACK
VAR_DECL	602:1	602:8	5	uint16 input_compression
TYPE	602:1	602:1	6	uint16
TYPE_NAME	602:1	602:1	7	uint16
LEAF_NODE	602:1	602:1	8	uint16
NAME	602:8	602:8	6	input_compression
LEAF_NODE	602:8	602:8	7	input_compression
LEAF_NODE	602:25	602:25	5	,
VAR_DECL	602:1	602:27	5	uint16 input_photometric ; input_photometric = PHOTOMETRIC_MINISBLACK
TYPE	602:1	602:1	6	uint16
TYPE_NAME	602:1	602:1	7	uint16
LEAF_NODE	602:1	602:1	8	uint16
NAME	602:27	602:27	6	input_photometric
LEAF_NODE	602:27	602:27	7	input_photometric
LEAF_NODE	0:0	0:0	6	;
INIT	602:27	602:27	6	input_photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	602:27	602:47	7	input_photometric = PHOTOMETRIC_MINISBLACK
LVAL	602:27	602:27	8	input_photometric
NAME	602:27	602:27	9	input_photometric
LEAF_NODE	602:27	602:27	10	input_photometric
ASSIGN_OP	602:45	602:45	8	=
LEAF_NODE	602:45	602:45	9	=
RVAL	602:47	602:47	8	PHOTOMETRIC_MINISBLACK
FIELD	602:47	602:47	9	PHOTOMETRIC_MINISBLACK
LEAF_NODE	602:47	602:47	10	PHOTOMETRIC_MINISBLACK
LEAF_NODE	602:69	602:69	4	;
SIMPLE_DECL	603:1	603:12	3	copyFunc cf ;
VAR_DECL	603:1	603:10	4	copyFunc cf
TYPE	603:1	603:1	5	copyFunc
TYPE_NAME	603:1	603:1	6	copyFunc
LEAF_NODE	603:1	603:1	7	copyFunc
NAME	603:10	603:10	5	cf
LEAF_NODE	603:10	603:10	6	cf
LEAF_NODE	603:12	603:12	4	;
SIMPLE_DECL	604:1	604:21	3	uint32 width , uint32 length ;
INIT_DECL_LIST	604:1	604:1	4	uint32 width , uint32 length
VAR_DECL	604:1	604:8	5	uint32 width
TYPE	604:1	604:1	6	uint32
TYPE_NAME	604:1	604:1	7	uint32
LEAF_NODE	604:1	604:1	8	uint32
NAME	604:8	604:8	6	width
LEAF_NODE	604:8	604:8	7	width
LEAF_NODE	604:13	604:13	5	,
VAR_DECL	604:1	604:15	5	uint32 length
TYPE	604:1	604:1	6	uint32
TYPE_NAME	604:1	604:1	7	uint32
LEAF_NODE	604:1	604:1	8	uint32
NAME	604:15	604:15	6	length
LEAF_NODE	604:15	604:15	7	length
LEAF_NODE	604:21	604:21	4	;
SIMPLE_DECL	605:1	605:16	3	struct cpTag * p ;
VAR_DECL	605:1	605:15	4	struct cpTag * p
TYPE	605:1	605:13	5	struct cpTag *
TYPE_NAME	605:1	605:8	6	struct cpTag
LEAF_NODE	605:1	605:1	7	struct
LEAF_NODE	605:8	605:8	7	cpTag
POINTER	605:13	605:13	6	*
LEAF_NODE	605:13	605:13	7	*
NAME	605:15	605:15	5	p
LEAF_NODE	605:15	605:15	6	p
LEAF_NODE	605:16	605:16	4	;
EXPR_STATEMENT	607:1	607:37	3	CopyField ( TIFFTAG_IMAGEWIDTH , width ) ;
EXPR	607:1	607:1	4	CopyField ( TIFFTAG_IMAGEWIDTH , width )
FUNCTION_CALL	607:1	607:36	5	CopyField ( TIFFTAG_IMAGEWIDTH , width )
CALLEE	607:1	607:1	6	CopyField
LEAF_NODE	607:1	607:1	7	CopyField
LEAF_NODE	607:10	607:10	6	(
ARGUMENT	607:11	607:11	6	TIFFTAG_IMAGEWIDTH
FIELD	607:11	607:11	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	607:11	607:11	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	607:29	607:29	6	,
ARGUMENT	607:31	607:31	6	width
FIELD	607:31	607:31	7	width
LEAF_NODE	607:31	607:31	8	width
LEAF_NODE	607:36	607:36	6	)
LEAF_NODE	607:37	607:37	4	;
EXPR_STATEMENT	608:1	608:39	3	CopyField ( TIFFTAG_IMAGELENGTH , length ) ;
EXPR	608:1	608:1	4	CopyField ( TIFFTAG_IMAGELENGTH , length )
FUNCTION_CALL	608:1	608:38	5	CopyField ( TIFFTAG_IMAGELENGTH , length )
CALLEE	608:1	608:1	6	CopyField
LEAF_NODE	608:1	608:1	7	CopyField
LEAF_NODE	608:10	608:10	6	(
ARGUMENT	608:11	608:11	6	TIFFTAG_IMAGELENGTH
FIELD	608:11	608:11	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	608:11	608:11	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	608:30	608:30	6	,
ARGUMENT	608:32	608:32	6	length
FIELD	608:32	608:32	7	length
LEAF_NODE	608:32	608:32	8	length
LEAF_NODE	608:38	608:38	6	)
LEAF_NODE	608:39	608:39	4	;
EXPR_STATEMENT	609:1	609:48	3	CopyField ( TIFFTAG_BITSPERSAMPLE , bitspersample ) ;
EXPR	609:1	609:1	4	CopyField ( TIFFTAG_BITSPERSAMPLE , bitspersample )
FUNCTION_CALL	609:1	609:47	5	CopyField ( TIFFTAG_BITSPERSAMPLE , bitspersample )
CALLEE	609:1	609:1	6	CopyField
LEAF_NODE	609:1	609:1	7	CopyField
LEAF_NODE	609:10	609:10	6	(
ARGUMENT	609:11	609:11	6	TIFFTAG_BITSPERSAMPLE
FIELD	609:11	609:11	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	609:11	609:11	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	609:32	609:32	6	,
ARGUMENT	609:34	609:34	6	bitspersample
FIELD	609:34	609:34	7	bitspersample
LEAF_NODE	609:34	609:34	8	bitspersample
LEAF_NODE	609:47	609:47	6	)
LEAF_NODE	609:48	609:48	4	;
EXPR_STATEMENT	610:1	610:52	3	CopyField ( TIFFTAG_SAMPLESPERPIXEL , samplesperpixel ) ;
EXPR	610:1	610:1	4	CopyField ( TIFFTAG_SAMPLESPERPIXEL , samplesperpixel )
FUNCTION_CALL	610:1	610:51	5	CopyField ( TIFFTAG_SAMPLESPERPIXEL , samplesperpixel )
CALLEE	610:1	610:1	6	CopyField
LEAF_NODE	610:1	610:1	7	CopyField
LEAF_NODE	610:10	610:10	6	(
ARGUMENT	610:11	610:11	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	610:11	610:11	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	610:11	610:11	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	610:34	610:34	6	,
ARGUMENT	610:36	610:36	6	samplesperpixel
FIELD	610:36	610:36	7	samplesperpixel
LEAF_NODE	610:36	610:36	8	samplesperpixel
LEAF_NODE	610:51	610:51	6	)
LEAF_NODE	610:52	610:52	4	;
SELECTION	611:1	612:2	3	
KEYWORD	611:1	611:1	4	if
LEAF_NODE	611:1	611:1	5	if
LEAF_NODE	611:4	611:4	4	(
CONDITION	611:5	611:5	4	compression != ( uint16 ) - 1
EXPR	611:5	611:28	5	compression != ( uint16 ) - 1
FIELD	611:5	611:5	6	compression
LEAF_NODE	611:5	611:5	7	compression
EQ_OPERATOR	611:17	611:17	6	!=
LEAF_NODE	611:17	611:17	7	!=
LEAF_NODE	611:20	611:20	6	(
TYPE_NAME	611:21	611:21	6	uint16
LEAF_NODE	611:21	611:21	7	uint16
LEAF_NODE	611:27	611:27	6	)
UNARY_EXPR	611:28	611:29	6	- 1
UNARY_OPERATOR	611:28	611:28	7	-
LEAF_NODE	611:28	611:28	8	-
FIELD	611:29	611:29	7	1
LEAF_NODE	611:29	611:29	8	1
LEAF_NODE	611:30	611:30	4	)
STATEMENTS	612:2	612:2	4	
EXPR_STATEMENT	612:2	612:53	5	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ;
EXPR	612:2	612:2	6	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	612:2	612:52	7	TIFFSetField ( out , TIFFTAG_COMPRESSION , compression )
CALLEE	612:2	612:2	8	TIFFSetField
LEAF_NODE	612:2	612:2	9	TIFFSetField
LEAF_NODE	612:14	612:14	8	(
ARGUMENT	612:15	612:15	8	out
FIELD	612:15	612:15	9	out
LEAF_NODE	612:15	612:15	10	out
LEAF_NODE	612:18	612:18	8	,
ARGUMENT	612:20	612:20	8	TIFFTAG_COMPRESSION
FIELD	612:20	612:20	9	TIFFTAG_COMPRESSION
LEAF_NODE	612:20	612:20	10	TIFFTAG_COMPRESSION
LEAF_NODE	612:39	612:39	8	,
ARGUMENT	612:41	612:41	8	compression
FIELD	612:41	612:41	9	compression
LEAF_NODE	612:41	612:41	10	compression
LEAF_NODE	612:52	612:52	8	)
LEAF_NODE	612:53	612:53	6	;
SELECTION	613:1	614:2	3	
KEYWORD	613:1	613:1	4	else
LEAF_NODE	613:1	613:1	5	else
STATEMENTS	614:2	614:2	4	
EXPR_STATEMENT	614:2	614:45	5	CopyField ( TIFFTAG_COMPRESSION , compression ) ;
EXPR	614:2	614:2	6	CopyField ( TIFFTAG_COMPRESSION , compression )
FUNCTION_CALL	614:2	614:44	7	CopyField ( TIFFTAG_COMPRESSION , compression )
CALLEE	614:2	614:2	8	CopyField
LEAF_NODE	614:2	614:2	9	CopyField
LEAF_NODE	614:11	614:11	8	(
ARGUMENT	614:12	614:12	8	TIFFTAG_COMPRESSION
FIELD	614:12	614:12	9	TIFFTAG_COMPRESSION
LEAF_NODE	614:12	614:12	10	TIFFTAG_COMPRESSION
LEAF_NODE	614:31	614:31	8	,
ARGUMENT	614:33	614:33	8	compression
FIELD	614:33	614:33	9	compression
LEAF_NODE	614:33	614:33	10	compression
LEAF_NODE	614:44	614:44	8	)
LEAF_NODE	614:45	614:45	6	;
EXPR_STATEMENT	615:1	615:67	3	TIFFGetFieldDefaulted ( in , TIFFTAG_COMPRESSION , & input_compression ) ;
EXPR	615:1	615:1	4	TIFFGetFieldDefaulted ( in , TIFFTAG_COMPRESSION , & input_compression )
FUNCTION_CALL	615:1	615:66	5	TIFFGetFieldDefaulted ( in , TIFFTAG_COMPRESSION , & input_compression )
CALLEE	615:1	615:1	6	TIFFGetFieldDefaulted
LEAF_NODE	615:1	615:1	7	TIFFGetFieldDefaulted
LEAF_NODE	615:22	615:22	6	(
ARGUMENT	615:23	615:23	6	in
FIELD	615:23	615:23	7	in
LEAF_NODE	615:23	615:23	8	in
LEAF_NODE	615:25	615:25	6	,
ARGUMENT	615:27	615:27	6	TIFFTAG_COMPRESSION
FIELD	615:27	615:27	7	TIFFTAG_COMPRESSION
LEAF_NODE	615:27	615:27	8	TIFFTAG_COMPRESSION
LEAF_NODE	615:46	615:46	6	,
ARGUMENT	615:48	615:48	6	& input_compression
UNARY_EXPR	615:48	615:49	7	& input_compression
UNARY_OPERATOR	615:48	615:48	8	&
LEAF_NODE	615:48	615:48	9	&
FIELD	615:49	615:49	8	input_compression
LEAF_NODE	615:49	615:49	9	input_compression
LEAF_NODE	615:66	615:66	6	)
LEAF_NODE	615:67	615:67	4	;
EXPR_STATEMENT	616:1	616:67	3	TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric ) ;
EXPR	616:1	616:1	4	TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric )
FUNCTION_CALL	616:1	616:66	5	TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric )
CALLEE	616:1	616:1	6	TIFFGetFieldDefaulted
LEAF_NODE	616:1	616:1	7	TIFFGetFieldDefaulted
LEAF_NODE	616:22	616:22	6	(
ARGUMENT	616:23	616:23	6	in
FIELD	616:23	616:23	7	in
LEAF_NODE	616:23	616:23	8	in
LEAF_NODE	616:25	616:25	6	,
ARGUMENT	616:27	616:27	6	TIFFTAG_PHOTOMETRIC
FIELD	616:27	616:27	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	616:27	616:27	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	616:46	616:46	6	,
ARGUMENT	616:48	616:48	6	& input_photometric
UNARY_EXPR	616:48	616:49	7	& input_photometric
UNARY_OPERATOR	616:48	616:48	8	&
LEAF_NODE	616:48	616:48	9	&
FIELD	616:49	616:49	8	input_photometric
LEAF_NODE	616:49	616:49	9	input_photometric
LEAF_NODE	616:66	616:66	6	)
LEAF_NODE	616:67	616:67	4	;
SELECTION	617:1	617:44	3	
KEYWORD	617:1	617:1	4	if
LEAF_NODE	617:1	617:1	5	if
LEAF_NODE	617:4	617:4	4	(
CONDITION	617:5	617:5	4	input_compression == COMPRESSION_JPEG
EXPR	617:5	617:26	5	input_compression == COMPRESSION_JPEG
FIELD	617:5	617:5	6	input_compression
LEAF_NODE	617:5	617:5	7	input_compression
EQ_OPERATOR	617:23	617:23	6	==
LEAF_NODE	617:23	617:23	7	==
FIELD	617:26	617:26	6	COMPRESSION_JPEG
LEAF_NODE	617:26	617:26	7	COMPRESSION_JPEG
LEAF_NODE	617:42	617:42	4	)
STATEMENTS	617:44	620:1	4	
LEAF_NODE	617:44	617:44	5	{
STATEMENTS	619:2	619:2	5	
EXPR_STATEMENT	619:2	619:60	6	TIFFSetField ( in , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ;
EXPR	619:2	619:2	7	TIFFSetField ( in , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
FUNCTION_CALL	619:2	619:59	8	TIFFSetField ( in , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB )
CALLEE	619:2	619:2	9	TIFFSetField
LEAF_NODE	619:2	619:2	10	TIFFSetField
LEAF_NODE	619:14	619:14	9	(
ARGUMENT	619:15	619:15	9	in
FIELD	619:15	619:15	10	in
LEAF_NODE	619:15	619:15	11	in
LEAF_NODE	619:17	619:17	9	,
ARGUMENT	619:19	619:19	9	TIFFTAG_JPEGCOLORMODE
FIELD	619:19	619:19	10	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	619:19	619:19	11	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	619:40	619:40	9	,
ARGUMENT	619:42	619:42	9	JPEGCOLORMODE_RGB
FIELD	619:42	619:42	10	JPEGCOLORMODE_RGB
LEAF_NODE	619:42	619:42	11	JPEGCOLORMODE_RGB
LEAF_NODE	619:59	619:59	9	)
LEAF_NODE	619:60	619:60	7	;
LEAF_NODE	620:1	620:1	5	}
SELECTION	620:3	620:8	3	
KEYWORD	620:3	620:3	4	else
LEAF_NODE	620:3	620:3	5	else
STATEMENTS	620:8	620:8	4	
SELECTION	620:8	620:52	5	
KEYWORD	620:8	620:8	6	if
LEAF_NODE	620:8	620:8	7	if
LEAF_NODE	620:11	620:11	6	(
CONDITION	620:12	620:12	6	input_photometric == PHOTOMETRIC_YCBCR
EXPR	620:12	620:33	7	input_photometric == PHOTOMETRIC_YCBCR
FIELD	620:12	620:12	8	input_photometric
LEAF_NODE	620:12	620:12	9	input_photometric
EQ_OPERATOR	620:30	620:30	8	==
LEAF_NODE	620:30	620:30	9	==
FIELD	620:33	620:33	8	PHOTOMETRIC_YCBCR
LEAF_NODE	620:33	620:33	9	PHOTOMETRIC_YCBCR
LEAF_NODE	620:50	620:50	6	)
STATEMENTS	620:52	631:1	6	
LEAF_NODE	620:52	620:52	7	{
STATEMENTS	622:2	626:2	7	
SIMPLE_DECL	622:2	622:38	8	uint16 subsamplinghor , uint16 subsamplingver ;
INIT_DECL_LIST	622:2	622:2	9	uint16 subsamplinghor , uint16 subsamplingver
VAR_DECL	622:2	622:9	10	uint16 subsamplinghor
TYPE	622:2	622:2	11	uint16
TYPE_NAME	622:2	622:2	12	uint16
LEAF_NODE	622:2	622:2	13	uint16
NAME	622:9	622:9	11	subsamplinghor
LEAF_NODE	622:9	622:9	12	subsamplinghor
LEAF_NODE	622:23	622:23	10	,
VAR_DECL	622:2	622:24	10	uint16 subsamplingver
TYPE	622:2	622:2	11	uint16
TYPE_NAME	622:2	622:2	12	uint16
LEAF_NODE	622:2	622:2	13	uint16
NAME	622:24	622:24	11	subsamplingver
LEAF_NODE	622:24	622:24	12	subsamplingver
LEAF_NODE	622:38	622:38	9	;
EXPR_STATEMENT	624:2	625:43	8	TIFFGetFieldDefaulted ( in , TIFFTAG_YCBCRSUBSAMPLING , & subsamplinghor , & subsamplingver ) ;
EXPR	624:2	624:2	9	TIFFGetFieldDefaulted ( in , TIFFTAG_YCBCRSUBSAMPLING , & subsamplinghor , & subsamplingver )
FUNCTION_CALL	624:2	625:42	10	TIFFGetFieldDefaulted ( in , TIFFTAG_YCBCRSUBSAMPLING , & subsamplinghor , & subsamplingver )
CALLEE	624:2	624:2	11	TIFFGetFieldDefaulted
LEAF_NODE	624:2	624:2	12	TIFFGetFieldDefaulted
LEAF_NODE	624:23	624:23	11	(
ARGUMENT	624:24	624:24	11	in
FIELD	624:24	624:24	12	in
LEAF_NODE	624:24	624:24	13	in
LEAF_NODE	624:26	624:26	11	,
ARGUMENT	624:28	624:28	11	TIFFTAG_YCBCRSUBSAMPLING
FIELD	624:28	624:28	12	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	624:28	624:28	13	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	624:52	624:52	11	,
ARGUMENT	625:10	625:10	11	& subsamplinghor
UNARY_EXPR	625:10	625:11	12	& subsamplinghor
UNARY_OPERATOR	625:10	625:10	13	&
LEAF_NODE	625:10	625:10	14	&
FIELD	625:11	625:11	13	subsamplinghor
LEAF_NODE	625:11	625:11	14	subsamplinghor
LEAF_NODE	625:25	625:25	11	,
ARGUMENT	625:27	625:27	11	& subsamplingver
UNARY_EXPR	625:27	625:28	12	& subsamplingver
UNARY_OPERATOR	625:27	625:27	13	&
LEAF_NODE	625:27	625:27	14	&
FIELD	625:28	625:28	13	subsamplingver
LEAF_NODE	625:28	625:28	14	subsamplingver
LEAF_NODE	625:42	625:42	11	)
LEAF_NODE	625:43	625:43	9	;
SELECTION	626:2	626:46	8	
KEYWORD	626:2	626:2	9	if
LEAF_NODE	626:2	626:2	10	if
LEAF_NODE	626:5	626:5	9	(
CONDITION	626:6	626:6	9	subsamplinghor != 1 || subsamplingver != 1
EXPR	626:6	626:6	10	subsamplinghor != 1 || subsamplingver != 1
OR	626:6	626:27	11	subsamplinghor != 1 || subsamplingver != 1
EXPR	626:6	626:22	12	subsamplinghor != 1
FIELD	626:6	626:6	13	subsamplinghor
LEAF_NODE	626:6	626:6	14	subsamplinghor
EQ_OPERATOR	626:20	626:20	13	!=
LEAF_NODE	626:20	626:20	14	!=
FIELD	626:22	626:22	13	1
LEAF_NODE	626:22	626:22	14	1
LEAF_NODE	626:24	626:24	12	||
EXPR	626:27	626:43	12	subsamplingver != 1
FIELD	626:27	626:27	13	subsamplingver
LEAF_NODE	626:27	626:27	14	subsamplingver
EQ_OPERATOR	626:41	626:41	13	!=
LEAF_NODE	626:41	626:41	14	!=
FIELD	626:43	626:43	13	1
LEAF_NODE	626:43	626:43	14	1
LEAF_NODE	626:44	626:44	9	)
STATEMENTS	626:46	630:2	9	
LEAF_NODE	626:46	626:46	10	{
STATEMENTS	627:3	629:3	10	
EXPR_STATEMENT	627:3	628:21	11	fprintf ( stderr , "tiffcp: %s: Can't copy/convert subsampled image.\n" , TIFFFileName ( in ) ) ;
EXPR	627:3	627:3	12	fprintf ( stderr , "tiffcp: %s: Can't copy/convert subsampled image.\n" , TIFFFileName ( in ) )
FUNCTION_CALL	627:3	628:20	13	fprintf ( stderr , "tiffcp: %s: Can't copy/convert subsampled image.\n" , TIFFFileName ( in ) )
CALLEE	627:3	627:3	14	fprintf
LEAF_NODE	627:3	627:3	15	fprintf
LEAF_NODE	627:10	627:10	14	(
ARGUMENT	627:11	627:11	14	stderr
FIELD	627:11	627:11	15	stderr
LEAF_NODE	627:11	627:11	16	stderr
LEAF_NODE	627:17	627:17	14	,
ARGUMENT	627:19	627:19	14	"tiffcp: %s: Can't copy/convert subsampled image.\n"
FIELD	627:19	627:19	15	"tiffcp: %s: Can't copy/convert subsampled image.\n"
LEAF_NODE	627:19	627:19	16	"tiffcp: %s: Can't copy/convert subsampled image.\n"
LEAF_NODE	627:71	627:71	14	,
ARGUMENT	628:4	628:4	14	TIFFFileName ( in )
FUNCTION_CALL	628:4	628:19	15	TIFFFileName ( in )
CALLEE	628:4	628:4	16	TIFFFileName
LEAF_NODE	628:4	628:4	17	TIFFFileName
LEAF_NODE	628:16	628:16	16	(
ARGUMENT	628:17	628:17	16	in
FIELD	628:17	628:17	17	in
LEAF_NODE	628:17	628:17	18	in
LEAF_NODE	628:19	628:19	16	)
LEAF_NODE	628:20	628:20	14	)
LEAF_NODE	628:21	628:21	12	;
JUMP_STATEMENT	629:3	629:15	11	return FALSE ;
KEYWORD	629:3	629:3	12	return
LEAF_NODE	629:3	629:3	13	return
DESTINATION	629:10	629:10	12	FALSE
EXPR	629:10	629:10	13	FALSE
FIELD	629:10	629:10	14	FALSE
LEAF_NODE	629:10	629:10	15	FALSE
LEAF_NODE	629:15	629:15	12	;
LEAF_NODE	630:2	630:2	10	}
LEAF_NODE	631:1	631:1	7	}
SELECTION	632:1	632:38	3	
KEYWORD	632:1	632:1	4	if
LEAF_NODE	632:1	632:1	5	if
LEAF_NODE	632:4	632:4	4	(
CONDITION	632:5	632:5	4	compression == COMPRESSION_JPEG
EXPR	632:5	632:20	5	compression == COMPRESSION_JPEG
FIELD	632:5	632:5	6	compression
LEAF_NODE	632:5	632:5	7	compression
EQ_OPERATOR	632:17	632:17	6	==
LEAF_NODE	632:17	632:17	7	==
FIELD	632:20	632:20	6	COMPRESSION_JPEG
LEAF_NODE	632:20	632:20	7	COMPRESSION_JPEG
LEAF_NODE	632:36	632:36	4	)
STATEMENTS	632:38	638:1	4	
LEAF_NODE	632:38	632:38	5	{
STATEMENTS	633:2	636:2	5	
SELECTION	633:2	635:4	6	
KEYWORD	633:2	633:2	7	if
LEAF_NODE	633:2	633:2	8	if
LEAF_NODE	633:5	633:5	7	(
CONDITION	633:6	633:6	7	input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB
EXPR	633:6	633:6	8	input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB
AND	633:6	634:6	9	input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB
EXPR	633:6	633:27	10	input_photometric == PHOTOMETRIC_RGB
FIELD	633:6	633:6	11	input_photometric
LEAF_NODE	633:6	633:6	12	input_photometric
EQ_OPERATOR	633:24	633:24	11	==
LEAF_NODE	633:24	633:24	12	==
FIELD	633:27	633:27	11	PHOTOMETRIC_RGB
LEAF_NODE	633:27	633:27	12	PHOTOMETRIC_RGB
LEAF_NODE	633:43	633:43	10	&&
EXPR	634:6	634:23	10	jpegcolormode == JPEGCOLORMODE_RGB
FIELD	634:6	634:6	11	jpegcolormode
LEAF_NODE	634:6	634:6	12	jpegcolormode
EQ_OPERATOR	634:20	634:20	11	==
LEAF_NODE	634:20	634:20	12	==
FIELD	634:23	634:23	11	JPEGCOLORMODE_RGB
LEAF_NODE	634:23	634:23	12	JPEGCOLORMODE_RGB
LEAF_NODE	634:40	634:40	7	)
STATEMENTS	635:4	635:4	7	
EXPR_STATEMENT	635:4	635:61	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ;
EXPR	635:4	635:4	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
FUNCTION_CALL	635:4	635:60	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
CALLEE	635:4	635:4	11	TIFFSetField
LEAF_NODE	635:4	635:4	12	TIFFSetField
LEAF_NODE	635:16	635:16	11	(
ARGUMENT	635:17	635:17	11	out
FIELD	635:17	635:17	12	out
LEAF_NODE	635:17	635:17	13	out
LEAF_NODE	635:20	635:20	11	,
ARGUMENT	635:22	635:22	11	TIFFTAG_PHOTOMETRIC
FIELD	635:22	635:22	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	635:22	635:22	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	635:41	635:41	11	,
ARGUMENT	635:43	635:43	11	PHOTOMETRIC_YCBCR
FIELD	635:43	635:43	12	PHOTOMETRIC_YCBCR
LEAF_NODE	635:43	635:43	13	PHOTOMETRIC_YCBCR
LEAF_NODE	635:60	635:60	11	)
LEAF_NODE	635:61	635:61	9	;
SELECTION	636:2	637:4	6	
KEYWORD	636:2	636:2	7	else
LEAF_NODE	636:2	636:2	8	else
STATEMENTS	637:4	637:4	7	
EXPR_STATEMENT	637:4	637:61	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric ) ;
EXPR	637:4	637:4	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric )
FUNCTION_CALL	637:4	637:60	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric )
CALLEE	637:4	637:4	11	TIFFSetField
LEAF_NODE	637:4	637:4	12	TIFFSetField
LEAF_NODE	637:16	637:16	11	(
ARGUMENT	637:17	637:17	11	out
FIELD	637:17	637:17	12	out
LEAF_NODE	637:17	637:17	13	out
LEAF_NODE	637:20	637:20	11	,
ARGUMENT	637:22	637:22	11	TIFFTAG_PHOTOMETRIC
FIELD	637:22	637:22	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	637:22	637:22	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	637:41	637:41	11	,
ARGUMENT	637:43	637:43	11	input_photometric
FIELD	637:43	637:43	12	input_photometric
LEAF_NODE	637:43	637:43	13	input_photometric
LEAF_NODE	637:60	637:60	11	)
LEAF_NODE	637:61	637:61	9	;
LEAF_NODE	638:1	638:1	5	}
SELECTION	639:1	639:6	3	
KEYWORD	639:1	639:1	4	else
LEAF_NODE	639:1	639:1	5	else
STATEMENTS	639:6	639:6	4	
SELECTION	639:6	641:2	5	
KEYWORD	639:6	639:6	6	if
LEAF_NODE	639:6	639:6	7	if
LEAF_NODE	639:9	639:9	6	(
CONDITION	639:10	639:10	6	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
EXPR	639:10	639:10	7	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
OR	639:10	640:8	8	compression == COMPRESSION_SGILOG || compression == COMPRESSION_SGILOG24
EXPR	639:10	639:25	9	compression == COMPRESSION_SGILOG
FIELD	639:10	639:10	10	compression
LEAF_NODE	639:10	639:10	11	compression
EQ_OPERATOR	639:22	639:22	10	==
LEAF_NODE	639:22	639:22	11	==
FIELD	639:25	639:25	10	COMPRESSION_SGILOG
LEAF_NODE	639:25	639:25	11	COMPRESSION_SGILOG
LEAF_NODE	640:5	640:5	9	||
EXPR	640:8	640:23	9	compression == COMPRESSION_SGILOG24
FIELD	640:8	640:8	10	compression
LEAF_NODE	640:8	640:8	11	compression
EQ_OPERATOR	640:20	640:20	10	==
LEAF_NODE	640:20	640:20	11	==
FIELD	640:23	640:23	10	COMPRESSION_SGILOG24
LEAF_NODE	640:23	640:23	11	COMPRESSION_SGILOG24
LEAF_NODE	640:43	640:43	6	)
STATEMENTS	641:2	641:2	6	
EXPR_STATEMENT	641:2	643:44	7	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , samplesperpixel == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV ) ;
EXPR	641:2	641:2	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , samplesperpixel == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
FUNCTION_CALL	641:2	643:43	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , samplesperpixel == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV )
CALLEE	641:2	641:2	10	TIFFSetField
LEAF_NODE	641:2	641:2	11	TIFFSetField
LEAF_NODE	641:14	641:14	10	(
ARGUMENT	641:15	641:15	10	out
FIELD	641:15	641:15	11	out
LEAF_NODE	641:15	641:15	12	out
LEAF_NODE	641:18	641:18	10	,
ARGUMENT	641:20	641:20	10	TIFFTAG_PHOTOMETRIC
FIELD	641:20	641:20	11	TIFFTAG_PHOTOMETRIC
LEAF_NODE	641:20	641:20	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	641:39	641:39	10	,
ARGUMENT	642:6	642:6	10	samplesperpixel == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
COND_EXPR	642:6	643:25	11	samplesperpixel == 1 ? PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV
CONDITION	642:6	642:25	12	samplesperpixel == 1
FIELD	642:6	642:6	13	samplesperpixel
LEAF_NODE	642:6	642:6	14	samplesperpixel
EQ_OPERATOR	642:22	642:22	13	==
LEAF_NODE	642:22	642:22	14	==
FIELD	642:25	642:25	13	1
LEAF_NODE	642:25	642:25	14	1
LEAF_NODE	642:27	642:27	12	?
EXPR	643:6	643:6	12	PHOTOMETRIC_LOGL
FIELD	643:6	643:6	13	PHOTOMETRIC_LOGL
LEAF_NODE	643:6	643:6	14	PHOTOMETRIC_LOGL
LEAF_NODE	643:23	643:23	12	:
FIELD	643:25	643:25	12	PHOTOMETRIC_LOGLUV
LEAF_NODE	643:25	643:25	13	PHOTOMETRIC_LOGLUV
LEAF_NODE	643:43	643:43	10	)
LEAF_NODE	643:44	643:44	8	;
SELECTION	644:1	644:6	3	
KEYWORD	644:1	644:1	4	else
LEAF_NODE	644:1	644:1	5	else
STATEMENTS	644:6	644:6	4	
SELECTION	644:6	645:27	5	
KEYWORD	644:6	644:6	6	if
LEAF_NODE	644:6	644:6	7	if
LEAF_NODE	644:9	644:9	6	(
CONDITION	644:10	644:10	6	input_compression == COMPRESSION_JPEG && samplesperpixel == 3
EXPR	644:10	644:10	7	input_compression == COMPRESSION_JPEG && samplesperpixel == 3
AND	644:10	645:4	8	input_compression == COMPRESSION_JPEG && samplesperpixel == 3
EXPR	644:10	644:31	9	input_compression == COMPRESSION_JPEG
FIELD	644:10	644:10	10	input_compression
LEAF_NODE	644:10	644:10	11	input_compression
EQ_OPERATOR	644:28	644:28	10	==
LEAF_NODE	644:28	644:28	11	==
FIELD	644:31	644:31	10	COMPRESSION_JPEG
LEAF_NODE	644:31	644:31	11	COMPRESSION_JPEG
LEAF_NODE	644:48	644:48	9	&&
EXPR	645:4	645:23	9	samplesperpixel == 3
FIELD	645:4	645:4	10	samplesperpixel
LEAF_NODE	645:4	645:4	11	samplesperpixel
EQ_OPERATOR	645:20	645:20	10	==
LEAF_NODE	645:20	645:20	11	==
FIELD	645:23	645:23	10	3
LEAF_NODE	645:23	645:23	11	3
LEAF_NODE	645:25	645:25	6	)
STATEMENTS	645:27	649:1	6	
LEAF_NODE	645:27	645:27	7	{
STATEMENTS	648:2	648:2	7	
EXPR_STATEMENT	648:2	648:57	8	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_RGB ) ;
EXPR	648:2	648:2	9	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_RGB )
FUNCTION_CALL	648:2	648:56	10	TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_RGB )
CALLEE	648:2	648:2	11	TIFFSetField
LEAF_NODE	648:2	648:2	12	TIFFSetField
LEAF_NODE	648:14	648:14	11	(
ARGUMENT	648:15	648:15	11	out
FIELD	648:15	648:15	12	out
LEAF_NODE	648:15	648:15	13	out
LEAF_NODE	648:18	648:18	11	,
ARGUMENT	648:20	648:20	11	TIFFTAG_PHOTOMETRIC
FIELD	648:20	648:20	12	TIFFTAG_PHOTOMETRIC
LEAF_NODE	648:20	648:20	13	TIFFTAG_PHOTOMETRIC
LEAF_NODE	648:39	648:39	11	,
ARGUMENT	648:41	648:41	11	PHOTOMETRIC_RGB
FIELD	648:41	648:41	12	PHOTOMETRIC_RGB
LEAF_NODE	648:41	648:41	13	PHOTOMETRIC_RGB
LEAF_NODE	648:56	648:56	11	)
LEAF_NODE	648:57	648:57	9	;
LEAF_NODE	649:1	649:1	7	}
SELECTION	650:1	651:2	3	
KEYWORD	650:1	650:1	4	else
LEAF_NODE	650:1	650:1	5	else
STATEMENTS	651:2	651:2	4	
EXPR_STATEMENT	651:2	651:45	5	CopyTag ( TIFFTAG_PHOTOMETRIC , 1 , TIFF_SHORT ) ;
EXPR	651:2	651:2	6	CopyTag ( TIFFTAG_PHOTOMETRIC , 1 , TIFF_SHORT )
FUNCTION_CALL	651:2	651:44	7	CopyTag ( TIFFTAG_PHOTOMETRIC , 1 , TIFF_SHORT )
CALLEE	651:2	651:2	8	CopyTag
LEAF_NODE	651:2	651:2	9	CopyTag
LEAF_NODE	651:9	651:9	8	(
ARGUMENT	651:10	651:10	8	TIFFTAG_PHOTOMETRIC
FIELD	651:10	651:10	9	TIFFTAG_PHOTOMETRIC
LEAF_NODE	651:10	651:10	10	TIFFTAG_PHOTOMETRIC
LEAF_NODE	651:29	651:29	8	,
ARGUMENT	651:31	651:31	8	1
FIELD	651:31	651:31	9	1
LEAF_NODE	651:31	651:31	10	1
LEAF_NODE	651:32	651:32	8	,
ARGUMENT	651:34	651:34	8	TIFF_SHORT
FIELD	651:34	651:34	9	TIFF_SHORT
LEAF_NODE	651:34	651:34	10	TIFF_SHORT
LEAF_NODE	651:44	651:44	8	)
LEAF_NODE	651:45	651:45	6	;
SELECTION	652:1	653:2	3	
KEYWORD	652:1	652:1	4	if
LEAF_NODE	652:1	652:1	5	if
LEAF_NODE	652:4	652:4	4	(
CONDITION	652:5	652:5	4	fillorder != 0
EXPR	652:5	652:18	5	fillorder != 0
FIELD	652:5	652:5	6	fillorder
LEAF_NODE	652:5	652:5	7	fillorder
EQ_OPERATOR	652:15	652:15	6	!=
LEAF_NODE	652:15	652:15	7	!=
FIELD	652:18	652:18	6	0
LEAF_NODE	652:18	652:18	7	0
LEAF_NODE	652:19	652:19	4	)
STATEMENTS	653:2	653:2	4	
EXPR_STATEMENT	653:2	653:49	5	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder ) ;
EXPR	653:2	653:2	6	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
FUNCTION_CALL	653:2	653:48	7	TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder )
CALLEE	653:2	653:2	8	TIFFSetField
LEAF_NODE	653:2	653:2	9	TIFFSetField
LEAF_NODE	653:14	653:14	8	(
ARGUMENT	653:15	653:15	8	out
FIELD	653:15	653:15	9	out
LEAF_NODE	653:15	653:15	10	out
LEAF_NODE	653:18	653:18	8	,
ARGUMENT	653:20	653:20	8	TIFFTAG_FILLORDER
FIELD	653:20	653:20	9	TIFFTAG_FILLORDER
LEAF_NODE	653:20	653:20	10	TIFFTAG_FILLORDER
LEAF_NODE	653:37	653:37	8	,
ARGUMENT	653:39	653:39	8	fillorder
FIELD	653:39	653:39	9	fillorder
LEAF_NODE	653:39	653:39	10	fillorder
LEAF_NODE	653:48	653:48	8	)
LEAF_NODE	653:49	653:49	6	;
SELECTION	654:1	655:2	3	
KEYWORD	654:1	654:1	4	else
LEAF_NODE	654:1	654:1	5	else
STATEMENTS	655:2	655:2	4	
EXPR_STATEMENT	655:2	655:43	5	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT ) ;
EXPR	655:2	655:2	6	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT )
FUNCTION_CALL	655:2	655:42	7	CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT )
CALLEE	655:2	655:2	8	CopyTag
LEAF_NODE	655:2	655:2	9	CopyTag
LEAF_NODE	655:9	655:9	8	(
ARGUMENT	655:10	655:10	8	TIFFTAG_FILLORDER
FIELD	655:10	655:10	9	TIFFTAG_FILLORDER
LEAF_NODE	655:10	655:10	10	TIFFTAG_FILLORDER
LEAF_NODE	655:27	655:27	8	,
ARGUMENT	655:29	655:29	8	1
FIELD	655:29	655:29	9	1
LEAF_NODE	655:29	655:29	10	1
LEAF_NODE	655:30	655:30	8	,
ARGUMENT	655:32	655:32	8	TIFF_SHORT
FIELD	655:32	655:32	9	TIFF_SHORT
LEAF_NODE	655:32	655:32	10	TIFF_SHORT
LEAF_NODE	655:42	655:42	8	)
LEAF_NODE	655:43	655:43	6	;
EXPR_STATEMENT	659:1	659:61	3	TIFFGetFieldDefaulted ( in , TIFFTAG_ORIENTATION , & orientation ) ;
EXPR	659:1	659:1	4	TIFFGetFieldDefaulted ( in , TIFFTAG_ORIENTATION , & orientation )
FUNCTION_CALL	659:1	659:60	5	TIFFGetFieldDefaulted ( in , TIFFTAG_ORIENTATION , & orientation )
CALLEE	659:1	659:1	6	TIFFGetFieldDefaulted
LEAF_NODE	659:1	659:1	7	TIFFGetFieldDefaulted
LEAF_NODE	659:22	659:22	6	(
ARGUMENT	659:23	659:23	6	in
FIELD	659:23	659:23	7	in
LEAF_NODE	659:23	659:23	8	in
LEAF_NODE	659:25	659:25	6	,
ARGUMENT	659:27	659:27	6	TIFFTAG_ORIENTATION
FIELD	659:27	659:27	7	TIFFTAG_ORIENTATION
LEAF_NODE	659:27	659:27	8	TIFFTAG_ORIENTATION
LEAF_NODE	659:46	659:46	6	,
ARGUMENT	659:48	659:48	6	& orientation
UNARY_EXPR	659:48	659:49	7	& orientation
UNARY_OPERATOR	659:48	659:48	8	&
LEAF_NODE	659:48	659:48	9	&
FIELD	659:49	659:49	8	orientation
LEAF_NODE	659:49	659:49	9	orientation
LEAF_NODE	659:60	659:60	6	)
LEAF_NODE	659:61	659:61	4	;
SELECTION	660:1	660:22	3	
KEYWORD	660:1	660:1	4	switch
LEAF_NODE	660:1	660:1	5	switch
LEAF_NODE	660:8	660:8	4	(
CONDITION	660:9	660:9	4	orientation
EXPR	660:9	660:9	5	orientation
FIELD	660:9	660:9	6	orientation
LEAF_NODE	660:9	660:9	7	orientation
LEAF_NODE	660:20	660:20	4	)
STATEMENTS	660:22	678:1	4	
LEAF_NODE	660:22	660:22	5	{
STATEMENTS	661:2	677:3	5	
LABEL	661:2	661:27	6	case ORIENTATION_BOTRIGHT :
LEAF_NODE	661:2	661:2	7	case
LEAF_NODE	661:7	661:7	7	ORIENTATION_BOTRIGHT
LEAF_NODE	661:27	661:27	7	:
LABEL	662:2	662:27	6	case ORIENTATION_RIGHTBOT :
LEAF_NODE	662:2	662:2	7	case
LEAF_NODE	662:7	662:7	7	ORIENTATION_RIGHTBOT
LEAF_NODE	662:27	662:27	7	:
EXPR_STATEMENT	663:3	663:65	6	TIFFWarning ( TIFFFileName ( in ) , "using bottom-left orientation" ) ;
EXPR	663:3	663:3	7	TIFFWarning ( TIFFFileName ( in ) , "using bottom-left orientation" )
FUNCTION_CALL	663:3	663:64	8	TIFFWarning ( TIFFFileName ( in ) , "using bottom-left orientation" )
CALLEE	663:3	663:3	9	TIFFWarning
LEAF_NODE	663:3	663:3	10	TIFFWarning
LEAF_NODE	663:14	663:14	9	(
ARGUMENT	663:15	663:15	9	TIFFFileName ( in )
FUNCTION_CALL	663:15	663:30	10	TIFFFileName ( in )
CALLEE	663:15	663:15	11	TIFFFileName
LEAF_NODE	663:15	663:15	12	TIFFFileName
LEAF_NODE	663:27	663:27	11	(
ARGUMENT	663:28	663:28	11	in
FIELD	663:28	663:28	12	in
LEAF_NODE	663:28	663:28	13	in
LEAF_NODE	663:30	663:30	11	)
LEAF_NODE	663:31	663:31	9	,
ARGUMENT	663:33	663:33	9	"using bottom-left orientation"
FIELD	663:33	663:33	10	"using bottom-left orientation"
LEAF_NODE	663:33	663:33	11	"using bottom-left orientation"
LEAF_NODE	663:64	663:64	9	)
LEAF_NODE	663:65	663:65	7	;
EXPR_STATEMENT	664:3	664:36	6	orientation = ORIENTATION_BOTLEFT ;
EXPR	664:3	664:3	7	orientation = ORIENTATION_BOTLEFT
ASSIGN	664:3	664:17	8	orientation = ORIENTATION_BOTLEFT
LVAL	664:3	664:3	9	orientation
FIELD	664:3	664:3	10	orientation
LEAF_NODE	664:3	664:3	11	orientation
ASSIGN_OP	664:15	664:15	9	=
LEAF_NODE	664:15	664:15	10	=
RVAL	664:17	664:17	9	ORIENTATION_BOTLEFT
FIELD	664:17	664:17	10	ORIENTATION_BOTLEFT
LEAF_NODE	664:17	664:17	11	ORIENTATION_BOTLEFT
LEAF_NODE	664:36	664:36	7	;
LABEL	666:2	666:26	6	case ORIENTATION_LEFTBOT :
LEAF_NODE	666:2	666:2	7	case
LEAF_NODE	666:7	666:7	7	ORIENTATION_LEFTBOT
LEAF_NODE	666:26	666:26	7	:
LABEL	667:2	667:26	6	case ORIENTATION_BOTLEFT :
LEAF_NODE	667:2	667:2	7	case
LEAF_NODE	667:7	667:7	7	ORIENTATION_BOTLEFT
LEAF_NODE	667:26	667:26	7	:
JUMP_STATEMENT	668:3	668:8	6	break DESTINATION ;
KEYWORD	668:3	668:3	7	break
LEAF_NODE	668:3	668:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	668:8	668:8	7	;
LABEL	669:2	669:27	6	case ORIENTATION_TOPRIGHT :
LEAF_NODE	669:2	669:2	7	case
LEAF_NODE	669:7	669:7	7	ORIENTATION_TOPRIGHT
LEAF_NODE	669:27	669:27	7	:
LABEL	670:2	670:27	6	case ORIENTATION_RIGHTTOP :
LEAF_NODE	670:2	670:2	7	case
LEAF_NODE	670:7	670:7	7	ORIENTATION_RIGHTTOP
LEAF_NODE	670:27	670:27	7	:
LABEL	671:2	671:9	6	default :
LEAF_NODE	671:2	671:2	7	default
LEAF_NODE	671:9	671:9	7	:
EXPR_STATEMENT	672:3	672:62	6	TIFFWarning ( TIFFFileName ( in ) , "using top-left orientation" ) ;
EXPR	672:3	672:3	7	TIFFWarning ( TIFFFileName ( in ) , "using top-left orientation" )
FUNCTION_CALL	672:3	672:61	8	TIFFWarning ( TIFFFileName ( in ) , "using top-left orientation" )
CALLEE	672:3	672:3	9	TIFFWarning
LEAF_NODE	672:3	672:3	10	TIFFWarning
LEAF_NODE	672:14	672:14	9	(
ARGUMENT	672:15	672:15	9	TIFFFileName ( in )
FUNCTION_CALL	672:15	672:30	10	TIFFFileName ( in )
CALLEE	672:15	672:15	11	TIFFFileName
LEAF_NODE	672:15	672:15	12	TIFFFileName
LEAF_NODE	672:27	672:27	11	(
ARGUMENT	672:28	672:28	11	in
FIELD	672:28	672:28	12	in
LEAF_NODE	672:28	672:28	13	in
LEAF_NODE	672:30	672:30	11	)
LEAF_NODE	672:31	672:31	9	,
ARGUMENT	672:33	672:33	9	"using top-left orientation"
FIELD	672:33	672:33	10	"using top-left orientation"
LEAF_NODE	672:33	672:33	11	"using top-left orientation"
LEAF_NODE	672:61	672:61	9	)
LEAF_NODE	672:62	672:62	7	;
EXPR_STATEMENT	673:3	673:36	6	orientation = ORIENTATION_TOPLEFT ;
EXPR	673:3	673:3	7	orientation = ORIENTATION_TOPLEFT
ASSIGN	673:3	673:17	8	orientation = ORIENTATION_TOPLEFT
LVAL	673:3	673:3	9	orientation
FIELD	673:3	673:3	10	orientation
LEAF_NODE	673:3	673:3	11	orientation
ASSIGN_OP	673:15	673:15	9	=
LEAF_NODE	673:15	673:15	10	=
RVAL	673:17	673:17	9	ORIENTATION_TOPLEFT
FIELD	673:17	673:17	10	ORIENTATION_TOPLEFT
LEAF_NODE	673:17	673:17	11	ORIENTATION_TOPLEFT
LEAF_NODE	673:36	673:36	7	;
LABEL	675:2	675:26	6	case ORIENTATION_LEFTTOP :
LEAF_NODE	675:2	675:2	7	case
LEAF_NODE	675:7	675:7	7	ORIENTATION_LEFTTOP
LEAF_NODE	675:26	675:26	7	:
LABEL	676:2	676:26	6	case ORIENTATION_TOPLEFT :
LEAF_NODE	676:2	676:2	7	case
LEAF_NODE	676:7	676:7	7	ORIENTATION_TOPLEFT
LEAF_NODE	676:26	676:26	7	:
JUMP_STATEMENT	677:3	677:8	6	break DESTINATION ;
KEYWORD	677:3	677:3	7	break
LEAF_NODE	677:3	677:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	677:8	677:8	7	;
LEAF_NODE	678:1	678:1	5	}
EXPR_STATEMENT	679:1	679:52	3	TIFFSetField ( out , TIFFTAG_ORIENTATION , orientation ) ;
EXPR	679:1	679:1	4	TIFFSetField ( out , TIFFTAG_ORIENTATION , orientation )
FUNCTION_CALL	679:1	679:51	5	TIFFSetField ( out , TIFFTAG_ORIENTATION , orientation )
CALLEE	679:1	679:1	6	TIFFSetField
LEAF_NODE	679:1	679:1	7	TIFFSetField
LEAF_NODE	679:13	679:13	6	(
ARGUMENT	679:14	679:14	6	out
FIELD	679:14	679:14	7	out
LEAF_NODE	679:14	679:14	8	out
LEAF_NODE	679:17	679:17	6	,
ARGUMENT	679:19	679:19	6	TIFFTAG_ORIENTATION
FIELD	679:19	679:19	7	TIFFTAG_ORIENTATION
LEAF_NODE	679:19	679:19	8	TIFFTAG_ORIENTATION
LEAF_NODE	679:38	679:38	6	,
ARGUMENT	679:40	679:40	6	orientation
FIELD	679:40	679:40	7	orientation
LEAF_NODE	679:40	679:40	8	orientation
LEAF_NODE	679:51	679:51	6	)
LEAF_NODE	679:52	679:52	4	;
SELECTION	685:1	686:2	3	
KEYWORD	685:1	685:1	4	if
LEAF_NODE	685:1	685:1	5	if
LEAF_NODE	685:4	685:4	4	(
CONDITION	685:5	685:5	4	outtiled == - 1
EXPR	685:5	685:17	5	outtiled == - 1
FIELD	685:5	685:5	6	outtiled
LEAF_NODE	685:5	685:5	7	outtiled
EQ_OPERATOR	685:14	685:14	6	==
LEAF_NODE	685:14	685:14	7	==
UNARY_EXPR	685:17	685:18	6	- 1
UNARY_OPERATOR	685:17	685:17	7	-
LEAF_NODE	685:17	685:17	8	-
FIELD	685:18	685:18	7	1
LEAF_NODE	685:18	685:18	8	1
LEAF_NODE	685:19	685:19	4	)
STATEMENTS	686:2	686:2	4	
EXPR_STATEMENT	686:2	686:28	5	outtiled = TIFFIsTiled ( in ) ;
EXPR	686:2	686:2	6	outtiled = TIFFIsTiled ( in )
ASSIGN	686:2	686:13	7	outtiled = TIFFIsTiled ( in )
LVAL	686:2	686:2	8	outtiled
FIELD	686:2	686:2	9	outtiled
LEAF_NODE	686:2	686:2	10	outtiled
ASSIGN_OP	686:11	686:11	8	=
LEAF_NODE	686:11	686:11	9	=
RVAL	686:13	686:13	8	TIFFIsTiled ( in )
FUNCTION_CALL	686:13	686:27	9	TIFFIsTiled ( in )
CALLEE	686:13	686:13	10	TIFFIsTiled
LEAF_NODE	686:13	686:13	11	TIFFIsTiled
LEAF_NODE	686:24	686:24	10	(
ARGUMENT	686:25	686:25	10	in
FIELD	686:25	686:25	11	in
LEAF_NODE	686:25	686:25	12	in
LEAF_NODE	686:27	686:27	10	)
LEAF_NODE	686:28	686:28	6	;
SELECTION	687:1	687:15	3	
KEYWORD	687:1	687:1	4	if
LEAF_NODE	687:1	687:1	5	if
LEAF_NODE	687:4	687:4	4	(
CONDITION	687:5	687:5	4	outtiled
EXPR	687:5	687:5	5	outtiled
FIELD	687:5	687:5	6	outtiled
LEAF_NODE	687:5	687:5	7	outtiled
LEAF_NODE	687:13	687:13	4	)
STATEMENTS	687:15	701:1	4	
LEAF_NODE	687:15	687:15	5	{
STATEMENTS	694:2	700:2	5	
SELECTION	694:2	695:3	6	
KEYWORD	694:2	694:2	7	if
LEAF_NODE	694:2	694:2	8	if
LEAF_NODE	694:5	694:5	7	(
CONDITION	694:6	694:6	7	tilewidth == ( uint32 ) - 1
EXPR	694:6	694:28	8	tilewidth == ( uint32 ) - 1
FIELD	694:6	694:6	9	tilewidth
LEAF_NODE	694:6	694:6	10	tilewidth
EQ_OPERATOR	694:16	694:16	9	==
LEAF_NODE	694:16	694:16	10	==
LEAF_NODE	694:19	694:19	9	(
TYPE_NAME	694:20	694:20	9	uint32
LEAF_NODE	694:20	694:20	10	uint32
LEAF_NODE	694:26	694:26	9	)
UNARY_EXPR	694:28	694:29	9	- 1
UNARY_OPERATOR	694:28	694:28	10	-
LEAF_NODE	694:28	694:28	11	-
FIELD	694:29	694:29	10	1
LEAF_NODE	694:29	694:29	11	1
LEAF_NODE	694:30	694:30	7	)
STATEMENTS	695:3	695:3	7	
EXPR_STATEMENT	695:3	695:50	8	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth ) ;
EXPR	695:3	695:3	9	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth )
FUNCTION_CALL	695:3	695:49	10	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth )
CALLEE	695:3	695:3	11	TIFFGetField
LEAF_NODE	695:3	695:3	12	TIFFGetField
LEAF_NODE	695:15	695:15	11	(
ARGUMENT	695:16	695:16	11	in
FIELD	695:16	695:16	12	in
LEAF_NODE	695:16	695:16	13	in
LEAF_NODE	695:18	695:18	11	,
ARGUMENT	695:20	695:20	11	TIFFTAG_TILEWIDTH
FIELD	695:20	695:20	12	TIFFTAG_TILEWIDTH
LEAF_NODE	695:20	695:20	13	TIFFTAG_TILEWIDTH
LEAF_NODE	695:37	695:37	11	,
ARGUMENT	695:39	695:39	11	& tilewidth
UNARY_EXPR	695:39	695:40	12	& tilewidth
UNARY_OPERATOR	695:39	695:39	13	&
LEAF_NODE	695:39	695:39	14	&
FIELD	695:40	695:40	13	tilewidth
LEAF_NODE	695:40	695:40	14	tilewidth
LEAF_NODE	695:49	695:49	11	)
LEAF_NODE	695:50	695:50	9	;
SELECTION	696:2	697:3	6	
KEYWORD	696:2	696:2	7	if
LEAF_NODE	696:2	696:2	8	if
LEAF_NODE	696:5	696:5	7	(
CONDITION	696:6	696:6	7	tilelength == ( uint32 ) - 1
EXPR	696:6	696:29	8	tilelength == ( uint32 ) - 1
FIELD	696:6	696:6	9	tilelength
LEAF_NODE	696:6	696:6	10	tilelength
EQ_OPERATOR	696:17	696:17	9	==
LEAF_NODE	696:17	696:17	10	==
LEAF_NODE	696:20	696:20	9	(
TYPE_NAME	696:21	696:21	9	uint32
LEAF_NODE	696:21	696:21	10	uint32
LEAF_NODE	696:27	696:27	9	)
UNARY_EXPR	696:29	696:30	9	- 1
UNARY_OPERATOR	696:29	696:29	10	-
LEAF_NODE	696:29	696:29	11	-
FIELD	696:30	696:30	10	1
LEAF_NODE	696:30	696:30	11	1
LEAF_NODE	696:31	696:31	7	)
STATEMENTS	697:3	697:3	7	
EXPR_STATEMENT	697:3	697:52	8	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength ) ;
EXPR	697:3	697:3	9	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength )
FUNCTION_CALL	697:3	697:51	10	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength )
CALLEE	697:3	697:3	11	TIFFGetField
LEAF_NODE	697:3	697:3	12	TIFFGetField
LEAF_NODE	697:15	697:15	11	(
ARGUMENT	697:16	697:16	11	in
FIELD	697:16	697:16	12	in
LEAF_NODE	697:16	697:16	13	in
LEAF_NODE	697:18	697:18	11	,
ARGUMENT	697:20	697:20	11	TIFFTAG_TILELENGTH
FIELD	697:20	697:20	12	TIFFTAG_TILELENGTH
LEAF_NODE	697:20	697:20	13	TIFFTAG_TILELENGTH
LEAF_NODE	697:38	697:38	11	,
ARGUMENT	697:40	697:40	11	& tilelength
UNARY_EXPR	697:40	697:41	12	& tilelength
UNARY_OPERATOR	697:40	697:40	13	&
LEAF_NODE	697:40	697:40	14	&
FIELD	697:41	697:41	13	tilelength
LEAF_NODE	697:41	697:41	14	tilelength
LEAF_NODE	697:51	697:51	11	)
LEAF_NODE	697:52	697:52	9	;
EXPR_STATEMENT	698:2	698:51	6	TIFFDefaultTileSize ( out , & tilewidth , & tilelength ) ;
EXPR	698:2	698:2	7	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
FUNCTION_CALL	698:2	698:50	8	TIFFDefaultTileSize ( out , & tilewidth , & tilelength )
CALLEE	698:2	698:2	9	TIFFDefaultTileSize
LEAF_NODE	698:2	698:2	10	TIFFDefaultTileSize
LEAF_NODE	698:21	698:21	9	(
ARGUMENT	698:22	698:22	9	out
FIELD	698:22	698:22	10	out
LEAF_NODE	698:22	698:22	11	out
LEAF_NODE	698:25	698:25	9	,
ARGUMENT	698:27	698:27	9	& tilewidth
UNARY_EXPR	698:27	698:28	10	& tilewidth
UNARY_OPERATOR	698:27	698:27	11	&
LEAF_NODE	698:27	698:27	12	&
FIELD	698:28	698:28	11	tilewidth
LEAF_NODE	698:28	698:28	12	tilewidth
LEAF_NODE	698:37	698:37	9	,
ARGUMENT	698:39	698:39	9	& tilelength
UNARY_EXPR	698:39	698:40	10	& tilelength
UNARY_OPERATOR	698:39	698:39	11	&
LEAF_NODE	698:39	698:39	12	&
FIELD	698:40	698:40	11	tilelength
LEAF_NODE	698:40	698:40	12	tilelength
LEAF_NODE	698:50	698:50	9	)
LEAF_NODE	698:51	698:51	7	;
EXPR_STATEMENT	699:2	699:49	6	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth ) ;
EXPR	699:2	699:2	7	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth )
FUNCTION_CALL	699:2	699:48	8	TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth )
CALLEE	699:2	699:2	9	TIFFSetField
LEAF_NODE	699:2	699:2	10	TIFFSetField
LEAF_NODE	699:14	699:14	9	(
ARGUMENT	699:15	699:15	9	out
FIELD	699:15	699:15	10	out
LEAF_NODE	699:15	699:15	11	out
LEAF_NODE	699:18	699:18	9	,
ARGUMENT	699:20	699:20	9	TIFFTAG_TILEWIDTH
FIELD	699:20	699:20	10	TIFFTAG_TILEWIDTH
LEAF_NODE	699:20	699:20	11	TIFFTAG_TILEWIDTH
LEAF_NODE	699:37	699:37	9	,
ARGUMENT	699:39	699:39	9	tilewidth
FIELD	699:39	699:39	10	tilewidth
LEAF_NODE	699:39	699:39	11	tilewidth
LEAF_NODE	699:48	699:48	9	)
LEAF_NODE	699:49	699:49	7	;
EXPR_STATEMENT	700:2	700:51	6	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength ) ;
EXPR	700:2	700:2	7	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength )
FUNCTION_CALL	700:2	700:50	8	TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength )
CALLEE	700:2	700:2	9	TIFFSetField
LEAF_NODE	700:2	700:2	10	TIFFSetField
LEAF_NODE	700:14	700:14	9	(
ARGUMENT	700:15	700:15	9	out
FIELD	700:15	700:15	10	out
LEAF_NODE	700:15	700:15	11	out
LEAF_NODE	700:18	700:18	9	,
ARGUMENT	700:20	700:20	9	TIFFTAG_TILELENGTH
FIELD	700:20	700:20	10	TIFFTAG_TILELENGTH
LEAF_NODE	700:20	700:20	11	TIFFTAG_TILELENGTH
LEAF_NODE	700:38	700:38	9	,
ARGUMENT	700:40	700:40	9	tilelength
FIELD	700:40	700:40	10	tilelength
LEAF_NODE	700:40	700:40	11	tilelength
LEAF_NODE	700:50	700:50	9	)
LEAF_NODE	700:51	700:51	7	;
LEAF_NODE	701:1	701:1	5	}
SELECTION	701:3	701:8	3	
KEYWORD	701:3	701:3	4	else
LEAF_NODE	701:3	701:3	5	else
STATEMENTS	701:8	719:1	4	
LEAF_NODE	701:8	701:8	5	{
STATEMENTS	707:2	718:2	5	
SELECTION	707:2	707:34	6	
KEYWORD	707:2	707:2	7	if
LEAF_NODE	707:2	707:2	8	if
LEAF_NODE	707:5	707:5	7	(
CONDITION	707:6	707:6	7	rowsperstrip == ( uint32 ) 0
EXPR	707:6	707:31	8	rowsperstrip == ( uint32 ) 0
FIELD	707:6	707:6	9	rowsperstrip
LEAF_NODE	707:6	707:6	10	rowsperstrip
EQ_OPERATOR	707:19	707:19	9	==
LEAF_NODE	707:19	707:19	10	==
LEAF_NODE	707:22	707:22	9	(
TYPE_NAME	707:23	707:23	9	uint32
LEAF_NODE	707:23	707:23	10	uint32
LEAF_NODE	707:29	707:29	9	)
FIELD	707:31	707:31	9	0
LEAF_NODE	707:31	707:31	10	0
LEAF_NODE	707:32	707:32	7	)
STATEMENTS	707:34	715:2	7	
LEAF_NODE	707:34	707:34	8	{
STATEMENTS	708:3	713:3	8	
SELECTION	708:3	709:23	9	
KEYWORD	708:3	708:3	10	if
LEAF_NODE	708:3	708:3	11	if
LEAF_NODE	708:6	708:6	10	(
CONDITION	708:7	708:7	10	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
EXPR	708:7	708:7	11	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_EXPR	708:7	708:8	12	! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
UNARY_OPERATOR	708:7	708:7	13	!
LEAF_NODE	708:7	708:7	14	!
FUNCTION_CALL	708:8	709:20	13	TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	708:8	708:8	14	TIFFGetField
LEAF_NODE	708:8	708:8	15	TIFFGetField
LEAF_NODE	708:20	708:20	14	(
ARGUMENT	708:21	708:21	14	in
FIELD	708:21	708:21	15	in
LEAF_NODE	708:21	708:21	16	in
LEAF_NODE	708:23	708:23	14	,
ARGUMENT	708:25	708:25	14	TIFFTAG_ROWSPERSTRIP
FIELD	708:25	708:25	15	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	708:25	708:25	16	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	708:45	708:45	14	,
ARGUMENT	709:7	709:7	14	& rowsperstrip
UNARY_EXPR	709:7	709:8	15	& rowsperstrip
UNARY_OPERATOR	709:7	709:7	16	&
LEAF_NODE	709:7	709:7	17	&
FIELD	709:8	709:8	16	rowsperstrip
LEAF_NODE	709:8	709:8	17	rowsperstrip
LEAF_NODE	709:20	709:20	14	)
LEAF_NODE	709:21	709:21	10	)
STATEMENTS	709:23	712:3	10	
LEAF_NODE	709:23	709:23	11	{
STATEMENTS	710:4	710:4	11	
EXPR_STATEMENT	710:4	711:47	12	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip ) ;
EXPR	710:4	710:4	13	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
ASSIGN	710:4	711:8	14	rowsperstrip = TIFFDefaultStripSize ( out , rowsperstrip )
LVAL	710:4	710:4	15	rowsperstrip
FIELD	710:4	710:4	16	rowsperstrip
LEAF_NODE	710:4	710:4	17	rowsperstrip
ASSIGN_OP	710:17	710:17	15	=
LEAF_NODE	710:17	710:17	16	=
RVAL	711:8	711:8	15	TIFFDefaultStripSize ( out , rowsperstrip )
FUNCTION_CALL	711:8	711:46	16	TIFFDefaultStripSize ( out , rowsperstrip )
CALLEE	711:8	711:8	17	TIFFDefaultStripSize
LEAF_NODE	711:8	711:8	18	TIFFDefaultStripSize
LEAF_NODE	711:28	711:28	17	(
ARGUMENT	711:29	711:29	17	out
FIELD	711:29	711:29	18	out
LEAF_NODE	711:29	711:29	19	out
LEAF_NODE	711:32	711:32	17	,
ARGUMENT	711:34	711:34	17	rowsperstrip
FIELD	711:34	711:34	18	rowsperstrip
LEAF_NODE	711:34	711:34	19	rowsperstrip
LEAF_NODE	711:46	711:46	17	)
LEAF_NODE	711:47	711:47	13	;
LEAF_NODE	712:3	712:3	11	}
SELECTION	713:3	714:4	9	
KEYWORD	713:3	713:3	10	if
LEAF_NODE	713:3	713:3	11	if
LEAF_NODE	713:6	713:6	10	(
CONDITION	713:7	713:7	10	rowsperstrip > length && rowsperstrip != ( uint32 ) - 1
EXPR	713:7	713:7	11	rowsperstrip > length && rowsperstrip != ( uint32 ) - 1
AND	713:7	713:32	12	rowsperstrip > length && rowsperstrip != ( uint32 ) - 1
EXPR	713:7	713:22	13	rowsperstrip > length
FIELD	713:7	713:7	14	rowsperstrip
LEAF_NODE	713:7	713:7	15	rowsperstrip
REL_OPERATOR	713:20	713:20	14	>
LEAF_NODE	713:20	713:20	15	>
FIELD	713:22	713:22	14	length
LEAF_NODE	713:22	713:22	15	length
LEAF_NODE	713:29	713:29	13	&&
EXPR	713:32	713:56	13	rowsperstrip != ( uint32 ) - 1
FIELD	713:32	713:32	14	rowsperstrip
LEAF_NODE	713:32	713:32	15	rowsperstrip
EQ_OPERATOR	713:45	713:45	14	!=
LEAF_NODE	713:45	713:45	15	!=
LEAF_NODE	713:48	713:48	14	(
TYPE_NAME	713:49	713:49	14	uint32
LEAF_NODE	713:49	713:49	15	uint32
LEAF_NODE	713:55	713:55	14	)
UNARY_EXPR	713:56	713:57	14	- 1
UNARY_OPERATOR	713:56	713:56	15	-
LEAF_NODE	713:56	713:56	16	-
FIELD	713:57	713:57	15	1
LEAF_NODE	713:57	713:57	16	1
LEAF_NODE	713:58	713:58	10	)
STATEMENTS	714:4	714:4	10	
EXPR_STATEMENT	714:4	714:25	11	rowsperstrip = length ;
EXPR	714:4	714:4	12	rowsperstrip = length
ASSIGN	714:4	714:19	13	rowsperstrip = length
LVAL	714:4	714:4	14	rowsperstrip
FIELD	714:4	714:4	15	rowsperstrip
LEAF_NODE	714:4	714:4	16	rowsperstrip
ASSIGN_OP	714:17	714:17	14	=
LEAF_NODE	714:17	714:17	15	=
RVAL	714:19	714:19	14	length
FIELD	714:19	714:19	15	length
LEAF_NODE	714:19	714:19	16	length
LEAF_NODE	714:25	714:25	12	;
LEAF_NODE	715:2	715:2	8	}
SELECTION	716:2	716:7	6	
KEYWORD	716:2	716:2	7	else
LEAF_NODE	716:2	716:2	8	else
STATEMENTS	716:7	716:7	7	
SELECTION	716:7	717:3	8	
KEYWORD	716:7	716:7	9	if
LEAF_NODE	716:7	716:7	10	if
LEAF_NODE	716:10	716:10	9	(
CONDITION	716:11	716:11	9	rowsperstrip == ( uint32 ) - 1
EXPR	716:11	716:36	10	rowsperstrip == ( uint32 ) - 1
FIELD	716:11	716:11	11	rowsperstrip
LEAF_NODE	716:11	716:11	12	rowsperstrip
EQ_OPERATOR	716:24	716:24	11	==
LEAF_NODE	716:24	716:24	12	==
LEAF_NODE	716:27	716:27	11	(
TYPE_NAME	716:28	716:28	11	uint32
LEAF_NODE	716:28	716:28	12	uint32
LEAF_NODE	716:34	716:34	11	)
UNARY_EXPR	716:36	716:37	11	- 1
UNARY_OPERATOR	716:36	716:36	12	-
LEAF_NODE	716:36	716:36	13	-
FIELD	716:37	716:37	12	1
LEAF_NODE	716:37	716:37	13	1
LEAF_NODE	716:38	716:38	9	)
STATEMENTS	717:3	717:3	9	
EXPR_STATEMENT	717:3	717:24	10	rowsperstrip = length ;
EXPR	717:3	717:3	11	rowsperstrip = length
ASSIGN	717:3	717:18	12	rowsperstrip = length
LVAL	717:3	717:3	13	rowsperstrip
FIELD	717:3	717:3	14	rowsperstrip
LEAF_NODE	717:3	717:3	15	rowsperstrip
ASSIGN_OP	717:16	717:16	13	=
LEAF_NODE	717:16	717:16	14	=
RVAL	717:18	717:18	13	length
FIELD	717:18	717:18	14	length
LEAF_NODE	717:18	717:18	15	length
LEAF_NODE	717:24	717:24	11	;
EXPR_STATEMENT	718:2	718:55	6	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	718:2	718:2	7	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	718:2	718:54	8	TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	718:2	718:2	9	TIFFSetField
LEAF_NODE	718:2	718:2	10	TIFFSetField
LEAF_NODE	718:14	718:14	9	(
ARGUMENT	718:15	718:15	9	out
FIELD	718:15	718:15	10	out
LEAF_NODE	718:15	718:15	11	out
LEAF_NODE	718:18	718:18	9	,
ARGUMENT	718:20	718:20	9	TIFFTAG_ROWSPERSTRIP
FIELD	718:20	718:20	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	718:20	718:20	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	718:40	718:40	9	,
ARGUMENT	718:42	718:42	9	rowsperstrip
FIELD	718:42	718:42	10	rowsperstrip
LEAF_NODE	718:42	718:42	11	rowsperstrip
LEAF_NODE	718:54	718:54	9	)
LEAF_NODE	718:55	718:55	7	;
LEAF_NODE	719:1	719:1	5	}
SELECTION	720:1	721:2	3	
KEYWORD	720:1	720:1	4	if
LEAF_NODE	720:1	720:1	5	if
LEAF_NODE	720:4	720:4	4	(
CONDITION	720:5	720:5	4	config != ( uint16 ) - 1
EXPR	720:5	720:24	5	config != ( uint16 ) - 1
FIELD	720:5	720:5	6	config
LEAF_NODE	720:5	720:5	7	config
EQ_OPERATOR	720:12	720:12	6	!=
LEAF_NODE	720:12	720:12	7	!=
LEAF_NODE	720:15	720:15	6	(
TYPE_NAME	720:16	720:16	6	uint16
LEAF_NODE	720:16	720:16	7	uint16
LEAF_NODE	720:22	720:22	6	)
UNARY_EXPR	720:24	720:25	6	- 1
UNARY_OPERATOR	720:24	720:24	7	-
LEAF_NODE	720:24	720:24	8	-
FIELD	720:25	720:25	7	1
LEAF_NODE	720:25	720:25	8	1
LEAF_NODE	720:26	720:26	4	)
STATEMENTS	721:2	721:2	4	
EXPR_STATEMENT	721:2	721:49	5	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config ) ;
EXPR	721:2	721:2	6	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	721:2	721:48	7	TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config )
CALLEE	721:2	721:2	8	TIFFSetField
LEAF_NODE	721:2	721:2	9	TIFFSetField
LEAF_NODE	721:14	721:14	8	(
ARGUMENT	721:15	721:15	8	out
FIELD	721:15	721:15	9	out
LEAF_NODE	721:15	721:15	10	out
LEAF_NODE	721:18	721:18	8	,
ARGUMENT	721:20	721:20	8	TIFFTAG_PLANARCONFIG
FIELD	721:20	721:20	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	721:20	721:20	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	721:40	721:40	8	,
ARGUMENT	721:42	721:42	8	config
FIELD	721:42	721:42	9	config
LEAF_NODE	721:42	721:42	10	config
LEAF_NODE	721:48	721:48	8	)
LEAF_NODE	721:49	721:49	6	;
SELECTION	722:1	723:2	3	
KEYWORD	722:1	722:1	4	else
LEAF_NODE	722:1	722:1	5	else
STATEMENTS	723:2	723:2	4	
EXPR_STATEMENT	723:2	723:41	5	CopyField ( TIFFTAG_PLANARCONFIG , config ) ;
EXPR	723:2	723:2	6	CopyField ( TIFFTAG_PLANARCONFIG , config )
FUNCTION_CALL	723:2	723:40	7	CopyField ( TIFFTAG_PLANARCONFIG , config )
CALLEE	723:2	723:2	8	CopyField
LEAF_NODE	723:2	723:2	9	CopyField
LEAF_NODE	723:11	723:11	8	(
ARGUMENT	723:12	723:12	8	TIFFTAG_PLANARCONFIG
FIELD	723:12	723:12	9	TIFFTAG_PLANARCONFIG
LEAF_NODE	723:12	723:12	10	TIFFTAG_PLANARCONFIG
LEAF_NODE	723:32	723:32	8	,
ARGUMENT	723:34	723:34	8	config
FIELD	723:34	723:34	9	config
LEAF_NODE	723:34	723:34	10	config
LEAF_NODE	723:40	723:40	8	)
LEAF_NODE	723:41	723:41	6	;
SELECTION	724:1	725:2	3	
KEYWORD	724:1	724:1	4	if
LEAF_NODE	724:1	724:1	5	if
LEAF_NODE	724:4	724:4	4	(
CONDITION	724:5	724:5	4	samplesperpixel <= 4
EXPR	724:5	724:24	5	samplesperpixel <= 4
FIELD	724:5	724:5	6	samplesperpixel
LEAF_NODE	724:5	724:5	7	samplesperpixel
REL_OPERATOR	724:21	724:21	6	<=
LEAF_NODE	724:21	724:21	7	<=
FIELD	724:24	724:24	6	4
LEAF_NODE	724:24	724:24	7	4
LEAF_NODE	724:25	724:25	4	)
STATEMENTS	725:2	725:2	4	
EXPR_STATEMENT	725:2	725:50	5	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT ) ;
EXPR	725:2	725:2	6	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT )
FUNCTION_CALL	725:2	725:49	7	CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT )
CALLEE	725:2	725:2	8	CopyTag
LEAF_NODE	725:2	725:2	9	CopyTag
LEAF_NODE	725:9	725:9	8	(
ARGUMENT	725:10	725:10	8	TIFFTAG_TRANSFERFUNCTION
FIELD	725:10	725:10	9	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	725:10	725:10	10	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	725:34	725:34	8	,
ARGUMENT	725:36	725:36	8	4
FIELD	725:36	725:36	9	4
LEAF_NODE	725:36	725:36	10	4
LEAF_NODE	725:37	725:37	8	,
ARGUMENT	725:39	725:39	8	TIFF_SHORT
FIELD	725:39	725:39	9	TIFF_SHORT
LEAF_NODE	725:39	725:39	10	TIFF_SHORT
LEAF_NODE	725:49	725:49	8	)
LEAF_NODE	725:50	725:50	6	;
EXPR_STATEMENT	726:1	726:41	3	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT ) ;
EXPR	726:1	726:1	4	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT )
FUNCTION_CALL	726:1	726:40	5	CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT )
CALLEE	726:1	726:1	6	CopyTag
LEAF_NODE	726:1	726:1	7	CopyTag
LEAF_NODE	726:8	726:8	6	(
ARGUMENT	726:9	726:9	6	TIFFTAG_COLORMAP
FIELD	726:9	726:9	7	TIFFTAG_COLORMAP
LEAF_NODE	726:9	726:9	8	TIFFTAG_COLORMAP
LEAF_NODE	726:25	726:25	6	,
ARGUMENT	726:27	726:27	6	4
FIELD	726:27	726:27	7	4
LEAF_NODE	726:27	726:27	8	4
LEAF_NODE	726:28	726:28	6	,
ARGUMENT	726:30	726:30	6	TIFF_SHORT
FIELD	726:30	726:30	7	TIFF_SHORT
LEAF_NODE	726:30	726:30	8	TIFF_SHORT
LEAF_NODE	726:40	726:40	6	)
LEAF_NODE	726:41	726:41	4	;
SELECTION	728:1	728:22	3	
KEYWORD	728:1	728:1	4	switch
LEAF_NODE	728:1	728:1	5	switch
LEAF_NODE	728:8	728:8	4	(
CONDITION	728:9	728:9	4	compression
EXPR	728:9	728:9	5	compression
FIELD	728:9	728:9	6	compression
LEAF_NODE	728:9	728:9	7	compression
LEAF_NODE	728:20	728:20	4	)
STATEMENTS	728:22	783:1	4	
LEAF_NODE	728:22	728:22	5	{
STATEMENTS	729:2	782:3	5	
LABEL	729:2	729:23	6	case COMPRESSION_JPEG :
LEAF_NODE	729:2	729:2	7	case
LEAF_NODE	729:7	729:7	7	COMPRESSION_JPEG
LEAF_NODE	729:23	729:23	7	:
EXPR_STATEMENT	730:3	730:50	6	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ;
EXPR	730:3	730:3	7	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
FUNCTION_CALL	730:3	730:49	8	TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality )
CALLEE	730:3	730:3	9	TIFFSetField
LEAF_NODE	730:3	730:3	10	TIFFSetField
LEAF_NODE	730:15	730:15	9	(
ARGUMENT	730:16	730:16	9	out
FIELD	730:16	730:16	10	out
LEAF_NODE	730:16	730:16	11	out
LEAF_NODE	730:19	730:19	9	,
ARGUMENT	730:21	730:21	9	TIFFTAG_JPEGQUALITY
FIELD	730:21	730:21	10	TIFFTAG_JPEGQUALITY
LEAF_NODE	730:21	730:21	11	TIFFTAG_JPEGQUALITY
LEAF_NODE	730:40	730:40	9	,
ARGUMENT	730:42	730:42	9	quality
FIELD	730:42	730:42	10	quality
LEAF_NODE	730:42	730:42	11	quality
LEAF_NODE	730:49	730:49	9	)
LEAF_NODE	730:50	730:50	7	;
EXPR_STATEMENT	731:3	731:58	6	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode ) ;
EXPR	731:3	731:3	7	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
FUNCTION_CALL	731:3	731:57	8	TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode )
CALLEE	731:3	731:3	9	TIFFSetField
LEAF_NODE	731:3	731:3	10	TIFFSetField
LEAF_NODE	731:15	731:15	9	(
ARGUMENT	731:16	731:16	9	out
FIELD	731:16	731:16	10	out
LEAF_NODE	731:16	731:16	11	out
LEAF_NODE	731:19	731:19	9	,
ARGUMENT	731:21	731:21	9	TIFFTAG_JPEGCOLORMODE
FIELD	731:21	731:21	10	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	731:21	731:21	11	TIFFTAG_JPEGCOLORMODE
LEAF_NODE	731:42	731:42	9	,
ARGUMENT	731:44	731:44	9	jpegcolormode
FIELD	731:44	731:44	10	jpegcolormode
LEAF_NODE	731:44	731:44	11	jpegcolormode
LEAF_NODE	731:57	731:57	9	)
LEAF_NODE	731:58	731:58	7	;
JUMP_STATEMENT	732:3	732:8	6	break DESTINATION ;
KEYWORD	732:3	732:3	7	break
LEAF_NODE	732:3	732:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	732:8	732:8	7	;
LABEL	733:2	733:23	6	case COMPRESSION_JBIG :
LEAF_NODE	733:2	733:2	7	case
LEAF_NODE	733:7	733:7	7	COMPRESSION_JBIG
LEAF_NODE	733:23	733:23	7	:
EXPR_STATEMENT	734:3	734:47	6	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG ) ;
EXPR	734:3	734:3	7	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
FUNCTION_CALL	734:3	734:46	8	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
CALLEE	734:3	734:3	9	CopyTag
LEAF_NODE	734:3	734:3	10	CopyTag
LEAF_NODE	734:10	734:10	9	(
ARGUMENT	734:11	734:11	9	TIFFTAG_FAXRECVPARAMS
FIELD	734:11	734:11	10	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	734:11	734:11	11	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	734:32	734:32	9	,
ARGUMENT	734:34	734:34	9	1
FIELD	734:34	734:34	10	1
LEAF_NODE	734:34	734:34	11	1
LEAF_NODE	734:35	734:35	9	,
ARGUMENT	734:37	734:37	9	TIFF_LONG
FIELD	734:37	734:37	10	TIFF_LONG
LEAF_NODE	734:37	734:37	11	TIFF_LONG
LEAF_NODE	734:46	734:46	9	)
LEAF_NODE	734:47	734:47	7	;
EXPR_STATEMENT	735:3	735:45	6	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG ) ;
EXPR	735:3	735:3	7	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
FUNCTION_CALL	735:3	735:44	8	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
CALLEE	735:3	735:3	9	CopyTag
LEAF_NODE	735:3	735:3	10	CopyTag
LEAF_NODE	735:10	735:10	9	(
ARGUMENT	735:11	735:11	9	TIFFTAG_FAXRECVTIME
FIELD	735:11	735:11	10	TIFFTAG_FAXRECVTIME
LEAF_NODE	735:11	735:11	11	TIFFTAG_FAXRECVTIME
LEAF_NODE	735:30	735:30	9	,
ARGUMENT	735:32	735:32	9	1
FIELD	735:32	735:32	10	1
LEAF_NODE	735:32	735:32	11	1
LEAF_NODE	735:33	735:33	9	,
ARGUMENT	735:35	735:35	9	TIFF_LONG
FIELD	735:35	735:35	10	TIFF_LONG
LEAF_NODE	735:35	735:35	11	TIFF_LONG
LEAF_NODE	735:44	735:44	9	)
LEAF_NODE	735:45	735:45	7	;
EXPR_STATEMENT	736:3	736:48	6	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII ) ;
EXPR	736:3	736:3	7	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
FUNCTION_CALL	736:3	736:47	8	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
CALLEE	736:3	736:3	9	CopyTag
LEAF_NODE	736:3	736:3	10	CopyTag
LEAF_NODE	736:10	736:10	9	(
ARGUMENT	736:11	736:11	9	TIFFTAG_FAXSUBADDRESS
FIELD	736:11	736:11	10	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	736:11	736:11	11	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	736:32	736:32	9	,
ARGUMENT	736:34	736:34	9	1
FIELD	736:34	736:34	10	1
LEAF_NODE	736:34	736:34	11	1
LEAF_NODE	736:35	736:35	9	,
ARGUMENT	736:37	736:37	9	TIFF_ASCII
FIELD	736:37	736:37	10	TIFF_ASCII
LEAF_NODE	736:37	736:37	11	TIFF_ASCII
LEAF_NODE	736:47	736:47	9	)
LEAF_NODE	736:48	736:48	7	;
EXPR_STATEMENT	737:3	737:41	6	CopyTag ( TIFFTAG_FAXDCS , 1 , TIFF_ASCII ) ;
EXPR	737:3	737:3	7	CopyTag ( TIFFTAG_FAXDCS , 1 , TIFF_ASCII )
FUNCTION_CALL	737:3	737:40	8	CopyTag ( TIFFTAG_FAXDCS , 1 , TIFF_ASCII )
CALLEE	737:3	737:3	9	CopyTag
LEAF_NODE	737:3	737:3	10	CopyTag
LEAF_NODE	737:10	737:10	9	(
ARGUMENT	737:11	737:11	9	TIFFTAG_FAXDCS
FIELD	737:11	737:11	10	TIFFTAG_FAXDCS
LEAF_NODE	737:11	737:11	11	TIFFTAG_FAXDCS
LEAF_NODE	737:25	737:25	9	,
ARGUMENT	737:27	737:27	9	1
FIELD	737:27	737:27	10	1
LEAF_NODE	737:27	737:27	11	1
LEAF_NODE	737:28	737:28	9	,
ARGUMENT	737:30	737:30	9	TIFF_ASCII
FIELD	737:30	737:30	10	TIFF_ASCII
LEAF_NODE	737:30	737:30	11	TIFF_ASCII
LEAF_NODE	737:40	737:40	9	)
LEAF_NODE	737:41	737:41	7	;
JUMP_STATEMENT	738:3	738:8	6	break DESTINATION ;
KEYWORD	738:3	738:3	7	break
LEAF_NODE	738:3	738:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	738:8	738:8	7	;
LABEL	739:2	739:22	6	case COMPRESSION_LZW :
LEAF_NODE	739:2	739:2	7	case
LEAF_NODE	739:7	739:7	7	COMPRESSION_LZW
LEAF_NODE	739:22	739:22	7	:
LABEL	740:2	740:32	6	case COMPRESSION_ADOBE_DEFLATE :
LEAF_NODE	740:2	740:2	7	case
LEAF_NODE	740:7	740:7	7	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	740:32	740:32	7	:
LABEL	741:2	741:26	6	case COMPRESSION_DEFLATE :
LEAF_NODE	741:2	741:2	7	case
LEAF_NODE	741:7	741:7	7	COMPRESSION_DEFLATE
LEAF_NODE	741:26	741:26	7	:
LABEL	742:16	742:37	6	case COMPRESSION_LZMA :
LEAF_NODE	742:16	742:16	7	case
LEAF_NODE	742:21	742:21	7	COMPRESSION_LZMA
LEAF_NODE	742:37	742:37	7	:
LABEL	743:16	743:37	6	case COMPRESSION_ZSTD :
LEAF_NODE	743:16	743:16	7	case
LEAF_NODE	743:21	743:21	7	COMPRESSION_ZSTD
LEAF_NODE	743:37	743:37	7	:
LABEL	744:8	744:29	6	case COMPRESSION_WEBP :
LEAF_NODE	744:8	744:8	7	case
LEAF_NODE	744:13	744:13	7	COMPRESSION_WEBP
LEAF_NODE	744:29	744:29	7	:
SELECTION	745:3	746:4	6	
KEYWORD	745:3	745:3	7	if
LEAF_NODE	745:3	745:3	8	if
LEAF_NODE	745:6	745:6	7	(
CONDITION	745:7	745:7	7	predictor != ( uint16 ) - 1
EXPR	745:7	745:28	8	predictor != ( uint16 ) - 1
FIELD	745:7	745:7	9	predictor
LEAF_NODE	745:7	745:7	10	predictor
EQ_OPERATOR	745:17	745:17	9	!=
LEAF_NODE	745:17	745:17	10	!=
LEAF_NODE	745:20	745:20	9	(
TYPE_NAME	745:21	745:21	9	uint16
LEAF_NODE	745:21	745:21	10	uint16
LEAF_NODE	745:27	745:27	9	)
UNARY_EXPR	745:28	745:29	9	- 1
UNARY_OPERATOR	745:28	745:28	10	-
LEAF_NODE	745:28	745:28	11	-
FIELD	745:29	745:29	10	1
LEAF_NODE	745:29	745:29	11	1
LEAF_NODE	745:30	745:30	7	)
STATEMENTS	746:4	746:4	7	
EXPR_STATEMENT	746:4	746:51	8	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ;
EXPR	746:4	746:4	9	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	746:4	746:50	10	TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor )
CALLEE	746:4	746:4	11	TIFFSetField
LEAF_NODE	746:4	746:4	12	TIFFSetField
LEAF_NODE	746:16	746:16	11	(
ARGUMENT	746:17	746:17	11	out
FIELD	746:17	746:17	12	out
LEAF_NODE	746:17	746:17	13	out
LEAF_NODE	746:20	746:20	11	,
ARGUMENT	746:22	746:22	11	TIFFTAG_PREDICTOR
FIELD	746:22	746:22	12	TIFFTAG_PREDICTOR
LEAF_NODE	746:22	746:22	13	TIFFTAG_PREDICTOR
LEAF_NODE	746:39	746:39	11	,
ARGUMENT	746:41	746:41	11	predictor
FIELD	746:41	746:41	12	predictor
LEAF_NODE	746:41	746:41	13	predictor
LEAF_NODE	746:50	746:50	11	)
LEAF_NODE	746:51	746:51	9	;
SELECTION	747:3	748:4	6	
KEYWORD	747:3	747:3	7	else
LEAF_NODE	747:3	747:3	8	else
STATEMENTS	748:4	748:4	7	
EXPR_STATEMENT	748:4	748:43	8	CopyField ( TIFFTAG_PREDICTOR , predictor ) ;
EXPR	748:4	748:4	9	CopyField ( TIFFTAG_PREDICTOR , predictor )
FUNCTION_CALL	748:4	748:42	10	CopyField ( TIFFTAG_PREDICTOR , predictor )
CALLEE	748:4	748:4	11	CopyField
LEAF_NODE	748:4	748:4	12	CopyField
LEAF_NODE	748:13	748:13	11	(
ARGUMENT	748:14	748:14	11	TIFFTAG_PREDICTOR
FIELD	748:14	748:14	12	TIFFTAG_PREDICTOR
LEAF_NODE	748:14	748:14	13	TIFFTAG_PREDICTOR
LEAF_NODE	748:31	748:31	11	,
ARGUMENT	748:33	748:33	11	predictor
FIELD	748:33	748:33	12	predictor
LEAF_NODE	748:33	748:33	13	predictor
LEAF_NODE	748:42	748:42	11	)
LEAF_NODE	748:43	748:43	9	;
SELECTION	749:3	749:21	6	
KEYWORD	749:3	749:3	7	if
LEAF_NODE	749:3	749:3	8	if
LEAF_NODE	749:6	749:6	7	(
CONDITION	749:7	749:7	7	preset != - 1
EXPR	749:7	749:17	8	preset != - 1
FIELD	749:7	749:7	9	preset
LEAF_NODE	749:7	749:7	10	preset
EQ_OPERATOR	749:14	749:14	9	!=
LEAF_NODE	749:14	749:14	10	!=
UNARY_EXPR	749:17	749:18	9	- 1
UNARY_OPERATOR	749:17	749:17	10	-
LEAF_NODE	749:17	749:17	11	-
FIELD	749:18	749:18	10	1
LEAF_NODE	749:18	749:18	11	1
LEAF_NODE	749:19	749:19	7	)
STATEMENTS	749:21	764:24	7	
LEAF_NODE	749:21	749:21	8	{
STATEMENTS	750:32	757:4	8	
SELECTION	750:32	752:40	9	
KEYWORD	750:32	750:32	10	if
LEAF_NODE	750:32	750:32	11	if
LEAF_NODE	750:35	750:35	10	(
CONDITION	750:36	750:36	10	compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_DEFLATE
EXPR	750:36	750:36	11	compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_DEFLATE
OR	750:36	751:44	12	compression == COMPRESSION_ADOBE_DEFLATE || compression == COMPRESSION_DEFLATE
EXPR	750:36	750:51	13	compression == COMPRESSION_ADOBE_DEFLATE
FIELD	750:36	750:36	14	compression
LEAF_NODE	750:36	750:36	15	compression
EQ_OPERATOR	750:48	750:48	14	==
LEAF_NODE	750:48	750:48	15	==
FIELD	750:51	750:51	14	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	750:51	750:51	15	COMPRESSION_ADOBE_DEFLATE
LEAF_NODE	751:41	751:41	13	||
EXPR	751:44	751:59	13	compression == COMPRESSION_DEFLATE
FIELD	751:44	751:44	14	compression
LEAF_NODE	751:44	751:44	15	compression
EQ_OPERATOR	751:56	751:56	14	==
LEAF_NODE	751:56	751:56	15	==
FIELD	751:59	751:59	14	COMPRESSION_DEFLATE
LEAF_NODE	751:59	751:59	15	COMPRESSION_DEFLATE
LEAF_NODE	751:78	751:78	10	)
STATEMENTS	752:40	752:40	10	
EXPR_STATEMENT	752:40	752:85	11	TIFFSetField ( out , TIFFTAG_ZIPQUALITY , preset ) ;
EXPR	752:40	752:40	12	TIFFSetField ( out , TIFFTAG_ZIPQUALITY , preset )
FUNCTION_CALL	752:40	752:84	13	TIFFSetField ( out , TIFFTAG_ZIPQUALITY , preset )
CALLEE	752:40	752:40	14	TIFFSetField
LEAF_NODE	752:40	752:40	15	TIFFSetField
LEAF_NODE	752:52	752:52	14	(
ARGUMENT	752:53	752:53	14	out
FIELD	752:53	752:53	15	out
LEAF_NODE	752:53	752:53	16	out
LEAF_NODE	752:56	752:56	14	,
ARGUMENT	752:58	752:58	14	TIFFTAG_ZIPQUALITY
FIELD	752:58	752:58	15	TIFFTAG_ZIPQUALITY
LEAF_NODE	752:58	752:58	16	TIFFTAG_ZIPQUALITY
LEAF_NODE	752:76	752:76	14	,
ARGUMENT	752:78	752:78	14	preset
FIELD	752:78	752:78	15	preset
LEAF_NODE	752:78	752:78	16	preset
LEAF_NODE	752:84	752:84	14	)
LEAF_NODE	752:85	752:85	12	;
SELECTION	753:4	753:9	9	
KEYWORD	753:4	753:4	10	else
LEAF_NODE	753:4	753:4	11	else
STATEMENTS	753:9	753:9	10	
SELECTION	753:9	754:5	11	
KEYWORD	753:9	753:9	12	if
LEAF_NODE	753:9	753:9	13	if
LEAF_NODE	753:12	753:12	12	(
CONDITION	753:13	753:13	12	compression == COMPRESSION_LZMA
EXPR	753:13	753:28	13	compression == COMPRESSION_LZMA
FIELD	753:13	753:13	14	compression
LEAF_NODE	753:13	753:13	15	compression
EQ_OPERATOR	753:25	753:25	14	==
LEAF_NODE	753:25	753:25	15	==
FIELD	753:28	753:28	14	COMPRESSION_LZMA
LEAF_NODE	753:28	753:28	15	COMPRESSION_LZMA
LEAF_NODE	753:44	753:44	12	)
STATEMENTS	754:5	754:5	12	
EXPR_STATEMENT	754:5	754:50	13	TIFFSetField ( out , TIFFTAG_LZMAPRESET , preset ) ;
EXPR	754:5	754:5	14	TIFFSetField ( out , TIFFTAG_LZMAPRESET , preset )
FUNCTION_CALL	754:5	754:49	15	TIFFSetField ( out , TIFFTAG_LZMAPRESET , preset )
CALLEE	754:5	754:5	16	TIFFSetField
LEAF_NODE	754:5	754:5	17	TIFFSetField
LEAF_NODE	754:17	754:17	16	(
ARGUMENT	754:18	754:18	16	out
FIELD	754:18	754:18	17	out
LEAF_NODE	754:18	754:18	18	out
LEAF_NODE	754:21	754:21	16	,
ARGUMENT	754:23	754:23	16	TIFFTAG_LZMAPRESET
FIELD	754:23	754:23	17	TIFFTAG_LZMAPRESET
LEAF_NODE	754:23	754:23	18	TIFFTAG_LZMAPRESET
LEAF_NODE	754:41	754:41	16	,
ARGUMENT	754:43	754:43	16	preset
FIELD	754:43	754:43	17	preset
LEAF_NODE	754:43	754:43	18	preset
LEAF_NODE	754:49	754:49	16	)
LEAF_NODE	754:50	754:50	14	;
SELECTION	755:4	755:9	9	
KEYWORD	755:4	755:4	10	else
LEAF_NODE	755:4	755:4	11	else
STATEMENTS	755:9	755:9	10	
SELECTION	755:9	756:5	11	
KEYWORD	755:9	755:9	12	if
LEAF_NODE	755:9	755:9	13	if
LEAF_NODE	755:12	755:12	12	(
CONDITION	755:13	755:13	12	compression == COMPRESSION_ZSTD
EXPR	755:13	755:28	13	compression == COMPRESSION_ZSTD
FIELD	755:13	755:13	14	compression
LEAF_NODE	755:13	755:13	15	compression
EQ_OPERATOR	755:25	755:25	14	==
LEAF_NODE	755:25	755:25	15	==
FIELD	755:28	755:28	14	COMPRESSION_ZSTD
LEAF_NODE	755:28	755:28	15	COMPRESSION_ZSTD
LEAF_NODE	755:44	755:44	12	)
STATEMENTS	756:5	756:5	12	
EXPR_STATEMENT	756:5	756:50	13	TIFFSetField ( out , TIFFTAG_ZSTD_LEVEL , preset ) ;
EXPR	756:5	756:5	14	TIFFSetField ( out , TIFFTAG_ZSTD_LEVEL , preset )
FUNCTION_CALL	756:5	756:49	15	TIFFSetField ( out , TIFFTAG_ZSTD_LEVEL , preset )
CALLEE	756:5	756:5	16	TIFFSetField
LEAF_NODE	756:5	756:5	17	TIFFSetField
LEAF_NODE	756:17	756:17	16	(
ARGUMENT	756:18	756:18	16	out
FIELD	756:18	756:18	17	out
LEAF_NODE	756:18	756:18	18	out
LEAF_NODE	756:21	756:21	16	,
ARGUMENT	756:23	756:23	16	TIFFTAG_ZSTD_LEVEL
FIELD	756:23	756:23	17	TIFFTAG_ZSTD_LEVEL
LEAF_NODE	756:23	756:23	18	TIFFTAG_ZSTD_LEVEL
LEAF_NODE	756:41	756:41	16	,
ARGUMENT	756:43	756:43	16	preset
FIELD	756:43	756:43	17	preset
LEAF_NODE	756:43	756:43	18	preset
LEAF_NODE	756:49	756:49	16	)
LEAF_NODE	756:50	756:50	14	;
SELECTION	757:4	757:9	9	
KEYWORD	757:4	757:4	10	else
LEAF_NODE	757:4	757:4	11	else
STATEMENTS	757:9	757:9	10	
SELECTION	757:9	757:46	11	
KEYWORD	757:9	757:9	12	if
LEAF_NODE	757:9	757:9	13	if
LEAF_NODE	757:12	757:12	12	(
CONDITION	757:13	757:13	12	compression == COMPRESSION_WEBP
EXPR	757:13	757:28	13	compression == COMPRESSION_WEBP
FIELD	757:13	757:13	14	compression
LEAF_NODE	757:13	757:13	15	compression
EQ_OPERATOR	757:25	757:25	14	==
LEAF_NODE	757:25	757:25	15	==
FIELD	757:28	757:28	14	COMPRESSION_WEBP
LEAF_NODE	757:28	757:28	15	COMPRESSION_WEBP
LEAF_NODE	757:44	757:44	12	)
STATEMENTS	757:46	763:4	12	
LEAF_NODE	757:46	757:46	13	{
STATEMENTS	758:5	760:7	13	
SELECTION	758:5	758:24	14	
KEYWORD	758:5	758:5	15	if
LEAF_NODE	758:5	758:5	16	if
LEAF_NODE	758:8	758:8	15	(
CONDITION	758:9	758:9	15	preset == 100
EXPR	758:9	758:19	16	preset == 100
FIELD	758:9	758:9	17	preset
LEAF_NODE	758:9	758:9	18	preset
EQ_OPERATOR	758:16	758:16	17	==
LEAF_NODE	758:16	758:16	18	==
FIELD	758:19	758:19	17	100
LEAF_NODE	758:19	758:19	18	100
LEAF_NODE	758:22	758:22	15	)
STATEMENTS	758:24	760:5	15	
LEAF_NODE	758:24	758:24	16	{
STATEMENTS	759:6	759:6	16	
EXPR_STATEMENT	759:6	759:52	17	TIFFSetField ( out , TIFFTAG_WEBP_LOSSLESS , TRUE ) ;
EXPR	759:6	759:6	18	TIFFSetField ( out , TIFFTAG_WEBP_LOSSLESS , TRUE )
FUNCTION_CALL	759:6	759:51	19	TIFFSetField ( out , TIFFTAG_WEBP_LOSSLESS , TRUE )
CALLEE	759:6	759:6	20	TIFFSetField
LEAF_NODE	759:6	759:6	21	TIFFSetField
LEAF_NODE	759:18	759:18	20	(
ARGUMENT	759:19	759:19	20	out
FIELD	759:19	759:19	21	out
LEAF_NODE	759:19	759:19	22	out
LEAF_NODE	759:22	759:22	20	,
ARGUMENT	759:24	759:24	20	TIFFTAG_WEBP_LOSSLESS
FIELD	759:24	759:24	21	TIFFTAG_WEBP_LOSSLESS
LEAF_NODE	759:24	759:24	22	TIFFTAG_WEBP_LOSSLESS
LEAF_NODE	759:45	759:45	20	,
ARGUMENT	759:47	759:47	20	TRUE
FIELD	759:47	759:47	21	TRUE
LEAF_NODE	759:47	759:47	22	TRUE
LEAF_NODE	759:51	759:51	20	)
LEAF_NODE	759:52	759:52	18	;
LEAF_NODE	760:5	760:5	16	}
SELECTION	760:7	760:12	14	
KEYWORD	760:7	760:7	15	else
LEAF_NODE	760:7	760:7	16	else
STATEMENTS	760:12	762:5	15	
LEAF_NODE	760:12	760:12	16	{
STATEMENTS	761:6	761:6	16	
EXPR_STATEMENT	761:6	761:51	17	TIFFSetField ( out , TIFFTAG_WEBP_LEVEL , preset ) ;
EXPR	761:6	761:6	18	TIFFSetField ( out , TIFFTAG_WEBP_LEVEL , preset )
FUNCTION_CALL	761:6	761:50	19	TIFFSetField ( out , TIFFTAG_WEBP_LEVEL , preset )
CALLEE	761:6	761:6	20	TIFFSetField
LEAF_NODE	761:6	761:6	21	TIFFSetField
LEAF_NODE	761:18	761:18	20	(
ARGUMENT	761:19	761:19	20	out
FIELD	761:19	761:19	21	out
LEAF_NODE	761:19	761:19	22	out
LEAF_NODE	761:22	761:22	20	,
ARGUMENT	761:24	761:24	20	TIFFTAG_WEBP_LEVEL
FIELD	761:24	761:24	21	TIFFTAG_WEBP_LEVEL
LEAF_NODE	761:24	761:24	22	TIFFTAG_WEBP_LEVEL
LEAF_NODE	761:42	761:42	20	,
ARGUMENT	761:44	761:44	20	preset
FIELD	761:44	761:44	21	preset
LEAF_NODE	761:44	761:44	22	preset
LEAF_NODE	761:50	761:50	20	)
LEAF_NODE	761:51	761:51	18	;
LEAF_NODE	762:5	762:5	16	}
LEAF_NODE	763:4	763:4	13	}
LEAF_NODE	764:24	764:24	8	}
JUMP_STATEMENT	765:3	765:8	6	break DESTINATION ;
KEYWORD	765:3	765:3	7	break
LEAF_NODE	765:3	765:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	765:8	765:8	7	;
LABEL	766:2	766:28	6	case COMPRESSION_CCITTFAX3 :
LEAF_NODE	766:2	766:2	7	case
LEAF_NODE	766:7	766:7	7	COMPRESSION_CCITTFAX3
LEAF_NODE	766:28	766:28	7	:
LABEL	767:2	767:28	6	case COMPRESSION_CCITTFAX4 :
LEAF_NODE	767:2	767:2	7	case
LEAF_NODE	767:7	767:7	7	COMPRESSION_CCITTFAX4
LEAF_NODE	767:28	767:28	7	:
SELECTION	768:3	768:45	6	
KEYWORD	768:3	768:3	7	if
LEAF_NODE	768:3	768:3	8	if
LEAF_NODE	768:6	768:6	7	(
CONDITION	768:7	768:7	7	compression == COMPRESSION_CCITTFAX3
EXPR	768:7	768:22	8	compression == COMPRESSION_CCITTFAX3
FIELD	768:7	768:7	9	compression
LEAF_NODE	768:7	768:7	10	compression
EQ_OPERATOR	768:19	768:19	9	==
LEAF_NODE	768:19	768:19	10	==
FIELD	768:22	768:22	9	COMPRESSION_CCITTFAX3
LEAF_NODE	768:22	768:22	10	COMPRESSION_CCITTFAX3
LEAF_NODE	768:43	768:43	7	)
STATEMENTS	768:45	774:3	7	
LEAF_NODE	768:45	768:45	8	{
STATEMENTS	769:4	772:4	8	
SELECTION	769:4	770:5	9	
KEYWORD	769:4	769:4	10	if
LEAF_NODE	769:4	769:4	11	if
LEAF_NODE	769:7	769:7	10	(
CONDITION	769:8	769:8	10	g3opts != ( uint32 ) - 1
EXPR	769:8	769:27	11	g3opts != ( uint32 ) - 1
FIELD	769:8	769:8	12	g3opts
LEAF_NODE	769:8	769:8	13	g3opts
EQ_OPERATOR	769:15	769:15	12	!=
LEAF_NODE	769:15	769:15	13	!=
LEAF_NODE	769:18	769:18	12	(
TYPE_NAME	769:19	769:19	12	uint32
LEAF_NODE	769:19	769:19	13	uint32
LEAF_NODE	769:25	769:25	12	)
UNARY_EXPR	769:27	769:28	12	- 1
UNARY_OPERATOR	769:27	769:27	13	-
LEAF_NODE	769:27	769:27	14	-
FIELD	769:28	769:28	13	1
LEAF_NODE	769:28	769:28	14	1
LEAF_NODE	769:29	769:29	10	)
STATEMENTS	770:5	770:5	10	
EXPR_STATEMENT	770:5	771:16	11	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts ) ;
EXPR	770:5	770:5	12	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
FUNCTION_CALL	770:5	771:15	13	TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , g3opts )
CALLEE	770:5	770:5	14	TIFFSetField
LEAF_NODE	770:5	770:5	15	TIFFSetField
LEAF_NODE	770:17	770:17	14	(
ARGUMENT	770:18	770:18	14	out
FIELD	770:18	770:18	15	out
LEAF_NODE	770:18	770:18	16	out
LEAF_NODE	770:21	770:21	14	,
ARGUMENT	770:23	770:23	14	TIFFTAG_GROUP3OPTIONS
FIELD	770:23	770:23	15	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	770:23	770:23	16	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	770:44	770:44	14	,
ARGUMENT	771:9	771:9	14	g3opts
FIELD	771:9	771:9	15	g3opts
LEAF_NODE	771:9	771:9	16	g3opts
LEAF_NODE	771:15	771:15	14	)
LEAF_NODE	771:16	771:16	12	;
SELECTION	772:4	773:5	9	
KEYWORD	772:4	772:4	10	else
LEAF_NODE	772:4	772:4	11	else
STATEMENTS	773:5	773:5	10	
EXPR_STATEMENT	773:5	773:45	11	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts ) ;
EXPR	773:5	773:5	12	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts )
FUNCTION_CALL	773:5	773:44	13	CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts )
CALLEE	773:5	773:5	14	CopyField
LEAF_NODE	773:5	773:5	15	CopyField
LEAF_NODE	773:14	773:14	14	(
ARGUMENT	773:15	773:15	14	TIFFTAG_GROUP3OPTIONS
FIELD	773:15	773:15	15	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	773:15	773:15	16	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	773:36	773:36	14	,
ARGUMENT	773:38	773:38	14	g3opts
FIELD	773:38	773:38	15	g3opts
LEAF_NODE	773:38	773:38	16	g3opts
LEAF_NODE	773:44	773:44	14	)
LEAF_NODE	773:45	773:45	12	;
LEAF_NODE	774:3	774:3	8	}
SELECTION	774:5	775:4	6	
KEYWORD	774:5	774:5	7	else
LEAF_NODE	774:5	774:5	8	else
STATEMENTS	775:4	775:4	7	
EXPR_STATEMENT	775:4	775:48	8	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG ) ;
EXPR	775:4	775:4	9	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG )
FUNCTION_CALL	775:4	775:47	10	CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG )
CALLEE	775:4	775:4	11	CopyTag
LEAF_NODE	775:4	775:4	12	CopyTag
LEAF_NODE	775:11	775:11	11	(
ARGUMENT	775:12	775:12	11	TIFFTAG_GROUP4OPTIONS
FIELD	775:12	775:12	12	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	775:12	775:12	13	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	775:33	775:33	11	,
ARGUMENT	775:35	775:35	11	1
FIELD	775:35	775:35	12	1
LEAF_NODE	775:35	775:35	13	1
LEAF_NODE	775:36	775:36	11	,
ARGUMENT	775:38	775:38	11	TIFF_LONG
FIELD	775:38	775:38	12	TIFF_LONG
LEAF_NODE	775:38	775:38	13	TIFF_LONG
LEAF_NODE	775:47	775:47	11	)
LEAF_NODE	775:48	775:48	9	;
EXPR_STATEMENT	776:3	776:45	6	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG ) ;
EXPR	776:3	776:3	7	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG )
FUNCTION_CALL	776:3	776:44	8	CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG )
CALLEE	776:3	776:3	9	CopyTag
LEAF_NODE	776:3	776:3	10	CopyTag
LEAF_NODE	776:10	776:10	9	(
ARGUMENT	776:11	776:11	9	TIFFTAG_BADFAXLINES
FIELD	776:11	776:11	10	TIFFTAG_BADFAXLINES
LEAF_NODE	776:11	776:11	11	TIFFTAG_BADFAXLINES
LEAF_NODE	776:30	776:30	9	,
ARGUMENT	776:32	776:32	9	1
FIELD	776:32	776:32	10	1
LEAF_NODE	776:32	776:32	11	1
LEAF_NODE	776:33	776:33	9	,
ARGUMENT	776:35	776:35	9	TIFF_LONG
FIELD	776:35	776:35	10	TIFF_LONG
LEAF_NODE	776:35	776:35	11	TIFF_LONG
LEAF_NODE	776:44	776:44	9	)
LEAF_NODE	776:45	776:45	7	;
EXPR_STATEMENT	777:3	777:46	6	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG ) ;
EXPR	777:3	777:3	7	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG )
FUNCTION_CALL	777:3	777:45	8	CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG )
CALLEE	777:3	777:3	9	CopyTag
LEAF_NODE	777:3	777:3	10	CopyTag
LEAF_NODE	777:10	777:10	9	(
ARGUMENT	777:11	777:11	9	TIFFTAG_CLEANFAXDATA
FIELD	777:11	777:11	10	TIFFTAG_CLEANFAXDATA
LEAF_NODE	777:11	777:11	11	TIFFTAG_CLEANFAXDATA
LEAF_NODE	777:31	777:31	9	,
ARGUMENT	777:33	777:33	9	1
FIELD	777:33	777:33	10	1
LEAF_NODE	777:33	777:33	11	1
LEAF_NODE	777:34	777:34	9	,
ARGUMENT	777:36	777:36	9	TIFF_LONG
FIELD	777:36	777:36	10	TIFF_LONG
LEAF_NODE	777:36	777:36	11	TIFF_LONG
LEAF_NODE	777:45	777:45	9	)
LEAF_NODE	777:46	777:46	7	;
EXPR_STATEMENT	778:3	778:56	6	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG ) ;
EXPR	778:3	778:3	7	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG )
FUNCTION_CALL	778:3	778:55	8	CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG )
CALLEE	778:3	778:3	9	CopyTag
LEAF_NODE	778:3	778:3	10	CopyTag
LEAF_NODE	778:10	778:10	9	(
ARGUMENT	778:11	778:11	9	TIFFTAG_CONSECUTIVEBADFAXLINES
FIELD	778:11	778:11	10	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	778:11	778:11	11	TIFFTAG_CONSECUTIVEBADFAXLINES
LEAF_NODE	778:41	778:41	9	,
ARGUMENT	778:43	778:43	9	1
FIELD	778:43	778:43	10	1
LEAF_NODE	778:43	778:43	11	1
LEAF_NODE	778:44	778:44	9	,
ARGUMENT	778:46	778:46	9	TIFF_LONG
FIELD	778:46	778:46	10	TIFF_LONG
LEAF_NODE	778:46	778:46	11	TIFF_LONG
LEAF_NODE	778:55	778:55	9	)
LEAF_NODE	778:56	778:56	7	;
EXPR_STATEMENT	779:3	779:47	6	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG ) ;
EXPR	779:3	779:3	7	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
FUNCTION_CALL	779:3	779:46	8	CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG )
CALLEE	779:3	779:3	9	CopyTag
LEAF_NODE	779:3	779:3	10	CopyTag
LEAF_NODE	779:10	779:10	9	(
ARGUMENT	779:11	779:11	9	TIFFTAG_FAXRECVPARAMS
FIELD	779:11	779:11	10	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	779:11	779:11	11	TIFFTAG_FAXRECVPARAMS
LEAF_NODE	779:32	779:32	9	,
ARGUMENT	779:34	779:34	9	1
FIELD	779:34	779:34	10	1
LEAF_NODE	779:34	779:34	11	1
LEAF_NODE	779:35	779:35	9	,
ARGUMENT	779:37	779:37	9	TIFF_LONG
FIELD	779:37	779:37	10	TIFF_LONG
LEAF_NODE	779:37	779:37	11	TIFF_LONG
LEAF_NODE	779:46	779:46	9	)
LEAF_NODE	779:47	779:47	7	;
EXPR_STATEMENT	780:3	780:45	6	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG ) ;
EXPR	780:3	780:3	7	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
FUNCTION_CALL	780:3	780:44	8	CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG )
CALLEE	780:3	780:3	9	CopyTag
LEAF_NODE	780:3	780:3	10	CopyTag
LEAF_NODE	780:10	780:10	9	(
ARGUMENT	780:11	780:11	9	TIFFTAG_FAXRECVTIME
FIELD	780:11	780:11	10	TIFFTAG_FAXRECVTIME
LEAF_NODE	780:11	780:11	11	TIFFTAG_FAXRECVTIME
LEAF_NODE	780:30	780:30	9	,
ARGUMENT	780:32	780:32	9	1
FIELD	780:32	780:32	10	1
LEAF_NODE	780:32	780:32	11	1
LEAF_NODE	780:33	780:33	9	,
ARGUMENT	780:35	780:35	9	TIFF_LONG
FIELD	780:35	780:35	10	TIFF_LONG
LEAF_NODE	780:35	780:35	11	TIFF_LONG
LEAF_NODE	780:44	780:44	9	)
LEAF_NODE	780:45	780:45	7	;
EXPR_STATEMENT	781:3	781:48	6	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII ) ;
EXPR	781:3	781:3	7	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
FUNCTION_CALL	781:3	781:47	8	CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII )
CALLEE	781:3	781:3	9	CopyTag
LEAF_NODE	781:3	781:3	10	CopyTag
LEAF_NODE	781:10	781:10	9	(
ARGUMENT	781:11	781:11	9	TIFFTAG_FAXSUBADDRESS
FIELD	781:11	781:11	10	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	781:11	781:11	11	TIFFTAG_FAXSUBADDRESS
LEAF_NODE	781:32	781:32	9	,
ARGUMENT	781:34	781:34	9	1
FIELD	781:34	781:34	10	1
LEAF_NODE	781:34	781:34	11	1
LEAF_NODE	781:35	781:35	9	,
ARGUMENT	781:37	781:37	9	TIFF_ASCII
FIELD	781:37	781:37	10	TIFF_ASCII
LEAF_NODE	781:37	781:37	11	TIFF_ASCII
LEAF_NODE	781:47	781:47	9	)
LEAF_NODE	781:48	781:48	7	;
JUMP_STATEMENT	782:3	782:8	6	break DESTINATION ;
KEYWORD	782:3	782:3	7	break
LEAF_NODE	782:3	782:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	782:8	782:8	7	;
LEAF_NODE	783:1	783:1	5	}
LEAF_NODE	784:1	784:1	3	{
STATEMENTS	785:2	787:2	3	
SIMPLE_DECL	785:2	785:14	4	uint32 len32 ;
VAR_DECL	785:2	785:9	5	uint32 len32
TYPE	785:2	785:2	6	uint32
TYPE_NAME	785:2	785:2	7	uint32
LEAF_NODE	785:2	785:2	8	uint32
NAME	785:9	785:9	6	len32
LEAF_NODE	785:9	785:9	7	len32
LEAF_NODE	785:14	785:14	5	;
SIMPLE_DECL	786:2	786:13	4	void * data ;
VAR_DECL	786:2	786:9	5	void * data
TYPE	786:2	786:7	6	void *
TYPE_NAME	786:2	786:2	7	void
LEAF_NODE	786:2	786:2	8	void
POINTER	786:7	786:7	7	*
LEAF_NODE	786:7	786:7	8	*
NAME	786:9	786:9	6	data
LEAF_NODE	786:9	786:9	7	data
LEAF_NODE	786:13	786:13	5	;
SELECTION	787:2	788:3	4	
KEYWORD	787:2	787:2	5	if
LEAF_NODE	787:2	787:2	6	if
LEAF_NODE	787:5	787:5	5	(
CONDITION	787:6	787:6	5	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
EXPR	787:6	787:6	6	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
FUNCTION_CALL	787:6	787:56	7	TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data )
CALLEE	787:6	787:6	8	TIFFGetField
LEAF_NODE	787:6	787:6	9	TIFFGetField
LEAF_NODE	787:18	787:18	8	(
ARGUMENT	787:19	787:19	8	in
FIELD	787:19	787:19	9	in
LEAF_NODE	787:19	787:19	10	in
LEAF_NODE	787:21	787:21	8	,
ARGUMENT	787:23	787:23	8	TIFFTAG_ICCPROFILE
FIELD	787:23	787:23	9	TIFFTAG_ICCPROFILE
LEAF_NODE	787:23	787:23	10	TIFFTAG_ICCPROFILE
LEAF_NODE	787:41	787:41	8	,
ARGUMENT	787:43	787:43	8	& len32
UNARY_EXPR	787:43	787:44	9	& len32
UNARY_OPERATOR	787:43	787:43	10	&
LEAF_NODE	787:43	787:43	11	&
FIELD	787:44	787:44	10	len32
LEAF_NODE	787:44	787:44	11	len32
LEAF_NODE	787:49	787:49	8	,
ARGUMENT	787:51	787:51	8	& data
UNARY_EXPR	787:51	787:52	9	& data
UNARY_OPERATOR	787:51	787:51	10	&
LEAF_NODE	787:51	787:51	11	&
FIELD	787:52	787:52	10	data
LEAF_NODE	787:52	787:52	11	data
LEAF_NODE	787:56	787:56	8	)
LEAF_NODE	787:57	787:57	5	)
STATEMENTS	788:3	788:3	5	
EXPR_STATEMENT	788:3	788:53	6	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data ) ;
EXPR	788:3	788:3	7	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data )
FUNCTION_CALL	788:3	788:52	8	TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data )
CALLEE	788:3	788:3	9	TIFFSetField
LEAF_NODE	788:3	788:3	10	TIFFSetField
LEAF_NODE	788:15	788:15	9	(
ARGUMENT	788:16	788:16	9	out
FIELD	788:16	788:16	10	out
LEAF_NODE	788:16	788:16	11	out
LEAF_NODE	788:19	788:19	9	,
ARGUMENT	788:21	788:21	9	TIFFTAG_ICCPROFILE
FIELD	788:21	788:21	10	TIFFTAG_ICCPROFILE
LEAF_NODE	788:21	788:21	11	TIFFTAG_ICCPROFILE
LEAF_NODE	788:39	788:39	9	,
ARGUMENT	788:41	788:41	9	len32
FIELD	788:41	788:41	10	len32
LEAF_NODE	788:41	788:41	11	len32
LEAF_NODE	788:46	788:46	9	,
ARGUMENT	788:48	788:48	9	data
FIELD	788:48	788:48	10	data
LEAF_NODE	788:48	788:48	11	data
LEAF_NODE	788:52	788:52	9	)
LEAF_NODE	788:53	788:53	7	;
LEAF_NODE	789:1	789:1	3	}
LEAF_NODE	790:1	790:1	3	{
STATEMENTS	791:2	793:2	3	
SIMPLE_DECL	791:2	791:14	4	uint16 ninks ;
VAR_DECL	791:2	791:9	5	uint16 ninks
TYPE	791:2	791:2	6	uint16
TYPE_NAME	791:2	791:2	7	uint16
LEAF_NODE	791:2	791:2	8	uint16
NAME	791:9	791:9	6	ninks
LEAF_NODE	791:9	791:9	7	ninks
LEAF_NODE	791:14	791:14	5	;
SIMPLE_DECL	792:2	792:22	4	const char * inknames ;
VAR_DECL	792:2	792:14	5	const char * inknames
TYPE	792:2	792:12	6	const char *
TYPE_NAME	792:2	792:8	7	const char
LEAF_NODE	792:2	792:2	8	const
LEAF_NODE	792:8	792:8	8	char
POINTER	792:12	792:12	7	*
LEAF_NODE	792:12	792:12	8	*
NAME	792:14	792:14	6	inknames
LEAF_NODE	792:14	792:14	7	inknames
LEAF_NODE	792:22	792:22	5	;
SELECTION	793:2	793:54	4	
KEYWORD	793:2	793:2	5	if
LEAF_NODE	793:2	793:2	6	if
LEAF_NODE	793:5	793:5	5	(
CONDITION	793:6	793:6	5	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
EXPR	793:6	793:6	6	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
FUNCTION_CALL	793:6	793:51	7	TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks )
CALLEE	793:6	793:6	8	TIFFGetField
LEAF_NODE	793:6	793:6	9	TIFFGetField
LEAF_NODE	793:18	793:18	8	(
ARGUMENT	793:19	793:19	8	in
FIELD	793:19	793:19	9	in
LEAF_NODE	793:19	793:19	10	in
LEAF_NODE	793:21	793:21	8	,
ARGUMENT	793:23	793:23	8	TIFFTAG_NUMBEROFINKS
FIELD	793:23	793:23	9	TIFFTAG_NUMBEROFINKS
LEAF_NODE	793:23	793:23	10	TIFFTAG_NUMBEROFINKS
LEAF_NODE	793:43	793:43	8	,
ARGUMENT	793:45	793:45	8	& ninks
UNARY_EXPR	793:45	793:46	9	& ninks
UNARY_OPERATOR	793:45	793:45	10	&
LEAF_NODE	793:45	793:45	11	&
FIELD	793:46	793:46	10	ninks
LEAF_NODE	793:46	793:46	11	ninks
LEAF_NODE	793:51	793:51	8	)
LEAF_NODE	793:52	793:52	5	)
STATEMENTS	793:54	806:2	5	
LEAF_NODE	793:54	793:54	6	{
STATEMENTS	794:3	795:3	6	
EXPR_STATEMENT	794:3	794:49	7	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks ) ;
EXPR	794:3	794:3	8	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks )
FUNCTION_CALL	794:3	794:48	9	TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks )
CALLEE	794:3	794:3	10	TIFFSetField
LEAF_NODE	794:3	794:3	11	TIFFSetField
LEAF_NODE	794:15	794:15	10	(
ARGUMENT	794:16	794:16	10	out
FIELD	794:16	794:16	11	out
LEAF_NODE	794:16	794:16	12	out
LEAF_NODE	794:19	794:19	10	,
ARGUMENT	794:21	794:21	10	TIFFTAG_NUMBEROFINKS
FIELD	794:21	794:21	11	TIFFTAG_NUMBEROFINKS
LEAF_NODE	794:21	794:21	12	TIFFTAG_NUMBEROFINKS
LEAF_NODE	794:41	794:41	10	,
ARGUMENT	794:43	794:43	10	ninks
FIELD	794:43	794:43	11	ninks
LEAF_NODE	794:43	794:43	12	ninks
LEAF_NODE	794:48	794:48	10	)
LEAF_NODE	794:49	794:49	8	;
SELECTION	795:3	795:54	7	
KEYWORD	795:3	795:3	8	if
LEAF_NODE	795:3	795:3	9	if
LEAF_NODE	795:6	795:6	8	(
CONDITION	795:7	795:7	8	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
EXPR	795:7	795:7	9	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
FUNCTION_CALL	795:7	795:51	10	TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames )
CALLEE	795:7	795:7	11	TIFFGetField
LEAF_NODE	795:7	795:7	12	TIFFGetField
LEAF_NODE	795:19	795:19	11	(
ARGUMENT	795:20	795:20	11	in
FIELD	795:20	795:20	12	in
LEAF_NODE	795:20	795:20	13	in
LEAF_NODE	795:22	795:22	11	,
ARGUMENT	795:24	795:24	11	TIFFTAG_INKNAMES
FIELD	795:24	795:24	12	TIFFTAG_INKNAMES
LEAF_NODE	795:24	795:24	13	TIFFTAG_INKNAMES
LEAF_NODE	795:40	795:40	11	,
ARGUMENT	795:42	795:42	11	& inknames
UNARY_EXPR	795:42	795:43	12	& inknames
UNARY_OPERATOR	795:42	795:42	13	&
LEAF_NODE	795:42	795:42	14	&
FIELD	795:43	795:43	13	inknames
LEAF_NODE	795:43	795:43	14	inknames
LEAF_NODE	795:51	795:51	11	)
LEAF_NODE	795:52	795:52	8	)
STATEMENTS	795:54	805:3	8	
LEAF_NODE	795:54	795:54	9	{
STATEMENTS	796:4	804:4	9	
SIMPLE_DECL	796:4	796:42	10	int inknameslen ; inknameslen = strlen ( inknames ) + 1 ;
VAR_DECL	796:4	796:8	11	int inknameslen ; inknameslen = strlen ( inknames ) + 1
TYPE	796:4	796:4	12	int
TYPE_NAME	796:4	796:4	13	int
LEAF_NODE	796:4	796:4	14	int
NAME	796:8	796:8	12	inknameslen
LEAF_NODE	796:8	796:8	13	inknameslen
LEAF_NODE	0:0	0:0	12	;
INIT	796:8	796:8	12	inknameslen = strlen ( inknames ) + 1
ASSIGN	796:8	796:22	13	inknameslen = strlen ( inknames ) + 1
LVAL	796:8	796:8	14	inknameslen
NAME	796:8	796:8	15	inknameslen
LEAF_NODE	796:8	796:8	16	inknameslen
ASSIGN_OP	796:20	796:20	14	=
LEAF_NODE	796:20	796:20	15	=
RVAL	796:22	796:41	14	strlen ( inknames ) + 1
FUNCTION_CALL	796:22	796:37	15	strlen ( inknames )
CALLEE	796:22	796:22	16	strlen
LEAF_NODE	796:22	796:22	17	strlen
LEAF_NODE	796:28	796:28	16	(
ARGUMENT	796:29	796:29	16	inknames
FIELD	796:29	796:29	17	inknames
LEAF_NODE	796:29	796:29	18	inknames
LEAF_NODE	796:37	796:37	16	)
LEAF_NODE	796:39	796:39	15	+
FIELD	796:41	796:41	15	1
LEAF_NODE	796:41	796:41	16	1
LEAF_NODE	796:42	796:42	11	;
SIMPLE_DECL	797:4	797:29	10	const char * cp ; cp = inknames ;
VAR_DECL	797:4	797:16	11	const char * cp ; cp = inknames
TYPE	797:4	797:14	12	const char *
TYPE_NAME	797:4	797:10	13	const char
LEAF_NODE	797:4	797:4	14	const
LEAF_NODE	797:10	797:10	14	char
POINTER	797:14	797:14	13	*
LEAF_NODE	797:14	797:14	14	*
NAME	797:16	797:16	12	cp
LEAF_NODE	797:16	797:16	13	cp
LEAF_NODE	0:0	0:0	12	;
INIT	797:16	797:16	12	cp = inknames
ASSIGN	797:16	797:21	13	cp = inknames
LVAL	797:16	797:16	14	cp
NAME	797:16	797:16	15	cp
LEAF_NODE	797:16	797:16	16	cp
ASSIGN_OP	797:19	797:19	14	=
LEAF_NODE	797:19	797:19	15	=
RVAL	797:21	797:21	14	inknames
FIELD	797:21	797:21	15	inknames
LEAF_NODE	797:21	797:21	16	inknames
LEAF_NODE	797:29	797:29	11	;
ITERATION	798:4	798:22	10	
KEYWORD	798:4	798:4	11	while
LEAF_NODE	798:4	798:4	12	while
LEAF_NODE	798:10	798:10	11	(
CONDITION	798:11	798:11	11	ninks > 1
EXPR	798:11	798:19	12	ninks > 1
FIELD	798:11	798:11	13	ninks
LEAF_NODE	798:11	798:11	14	ninks
REL_OPERATOR	798:17	798:17	13	>
LEAF_NODE	798:17	798:17	14	>
FIELD	798:19	798:19	13	1
LEAF_NODE	798:19	798:19	14	1
LEAF_NODE	798:20	798:20	11	)
STATEMENTS	798:22	803:4	11	
LEAF_NODE	798:22	798:22	12	{
STATEMENTS	799:5	802:5	12	
EXPR_STATEMENT	799:5	799:26	13	cp = strchr ( cp , '\0' ) ;
EXPR	799:5	799:5	14	cp = strchr ( cp , '\0' )
ASSIGN	799:5	799:10	15	cp = strchr ( cp , '\0' )
LVAL	799:5	799:5	16	cp
FIELD	799:5	799:5	17	cp
LEAF_NODE	799:5	799:5	18	cp
ASSIGN_OP	799:8	799:8	16	=
LEAF_NODE	799:8	799:8	17	=
RVAL	799:10	799:10	16	strchr ( cp , '\0' )
FUNCTION_CALL	799:10	799:25	17	strchr ( cp , '\0' )
CALLEE	799:10	799:10	18	strchr
LEAF_NODE	799:10	799:10	19	strchr
LEAF_NODE	799:16	799:16	18	(
ARGUMENT	799:17	799:17	18	cp
FIELD	799:17	799:17	19	cp
LEAF_NODE	799:17	799:17	20	cp
LEAF_NODE	799:19	799:19	18	,
ARGUMENT	799:21	799:21	18	'\0'
FIELD	799:21	799:21	19	'\0'
LEAF_NODE	799:21	799:21	20	'\0'
LEAF_NODE	799:25	799:25	18	)
LEAF_NODE	799:26	799:26	14	;
EXPR_STATEMENT	800:40	800:44	13	cp ++ ;
EXPR	800:40	800:40	14	cp ++
FIELD	800:40	800:42	15	cp ++
LEAF_NODE	800:40	800:40	16	cp
LEAF_NODE	800:42	800:42	16	++
LEAF_NODE	800:44	800:44	14	;
EXPR_STATEMENT	801:40	801:71	13	inknameslen += ( strlen ( cp ) + 1 ) ;
EXPR	801:40	801:40	14	inknameslen += ( strlen ( cp ) + 1 )
ASSIGN	801:40	801:55	15	inknameslen += ( strlen ( cp ) + 1 )
LVAL	801:40	801:40	16	inknameslen
FIELD	801:40	801:40	17	inknameslen
LEAF_NODE	801:40	801:40	18	inknameslen
ASSIGN_OP	801:52	801:52	16	+=
LEAF_NODE	801:52	801:52	17	+=
RVAL	801:55	801:70	16	( strlen ( cp ) + 1 )
LEAF_NODE	801:55	801:55	17	(
FUNCTION_CALL	801:56	801:65	17	strlen ( cp )
CALLEE	801:56	801:56	18	strlen
LEAF_NODE	801:56	801:56	19	strlen
LEAF_NODE	801:62	801:62	18	(
ARGUMENT	801:63	801:63	18	cp
FIELD	801:63	801:63	19	cp
LEAF_NODE	801:63	801:63	20	cp
LEAF_NODE	801:65	801:65	18	)
LEAF_NODE	801:67	801:67	17	+
FIELD	801:69	801:69	17	1
LEAF_NODE	801:69	801:69	18	1
LEAF_NODE	801:70	801:70	17	)
LEAF_NODE	801:71	801:71	14	;
EXPR_STATEMENT	802:5	802:12	13	ninks -- ;
EXPR	802:5	802:5	14	ninks --
FIELD	802:5	802:10	15	ninks --
LEAF_NODE	802:5	802:5	16	ninks
LEAF_NODE	802:10	802:10	16	--
LEAF_NODE	802:12	802:12	14	;
LEAF_NODE	803:4	803:4	12	}
EXPR_STATEMENT	804:4	804:62	10	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames ) ;
EXPR	804:4	804:4	11	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames )
FUNCTION_CALL	804:4	804:61	12	TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames )
CALLEE	804:4	804:4	13	TIFFSetField
LEAF_NODE	804:4	804:4	14	TIFFSetField
LEAF_NODE	804:16	804:16	13	(
ARGUMENT	804:17	804:17	13	out
FIELD	804:17	804:17	14	out
LEAF_NODE	804:17	804:17	15	out
LEAF_NODE	804:20	804:20	13	,
ARGUMENT	804:22	804:22	13	TIFFTAG_INKNAMES
FIELD	804:22	804:22	14	TIFFTAG_INKNAMES
LEAF_NODE	804:22	804:22	15	TIFFTAG_INKNAMES
LEAF_NODE	804:38	804:38	13	,
ARGUMENT	804:40	804:40	13	inknameslen
FIELD	804:40	804:40	14	inknameslen
LEAF_NODE	804:40	804:40	15	inknameslen
LEAF_NODE	804:51	804:51	13	,
ARGUMENT	804:53	804:53	13	inknames
FIELD	804:53	804:53	14	inknames
LEAF_NODE	804:53	804:53	15	inknames
LEAF_NODE	804:61	804:61	13	)
LEAF_NODE	804:62	804:62	11	;
LEAF_NODE	805:3	805:3	9	}
LEAF_NODE	806:2	806:2	6	}
LEAF_NODE	807:1	807:1	3	}
LEAF_NODE	808:1	808:1	3	{
STATEMENTS	809:2	818:4	3	
SIMPLE_DECL	809:2	809:25	4	unsigned short pg0 , unsigned short pg1 ;
INIT_DECL_LIST	809:2	809:2	5	unsigned short pg0 , unsigned short pg1
VAR_DECL	809:2	809:17	6	unsigned short pg0
TYPE	809:2	809:2	7	unsigned short
TYPE_NAME	809:2	809:11	8	unsigned short
LEAF_NODE	809:2	809:2	9	unsigned
LEAF_NODE	809:11	809:11	9	short
NAME	809:17	809:17	7	pg0
LEAF_NODE	809:17	809:17	8	pg0
LEAF_NODE	809:20	809:20	6	,
VAR_DECL	809:2	809:22	6	unsigned short pg1
TYPE	809:2	809:2	7	unsigned short
TYPE_NAME	809:2	809:11	8	unsigned short
LEAF_NODE	809:2	809:2	9	unsigned
LEAF_NODE	809:11	809:11	9	short
NAME	809:22	809:22	7	pg1
LEAF_NODE	809:22	809:22	8	pg1
LEAF_NODE	809:25	809:25	5	;
SELECTION	811:2	811:22	4	
KEYWORD	811:2	811:2	5	if
LEAF_NODE	811:2	811:2	6	if
LEAF_NODE	811:5	811:5	5	(
CONDITION	811:6	811:6	5	pageInSeq == 1
EXPR	811:6	811:19	6	pageInSeq == 1
FIELD	811:6	811:6	7	pageInSeq
LEAF_NODE	811:6	811:6	8	pageInSeq
EQ_OPERATOR	811:16	811:16	7	==
LEAF_NODE	811:16	811:16	8	==
FIELD	811:19	811:19	7	1
LEAF_NODE	811:19	811:19	8	1
LEAF_NODE	811:20	811:20	5	)
STATEMENTS	811:22	818:2	5	
LEAF_NODE	811:22	811:22	6	{
STATEMENTS	812:3	815:5	6	
SELECTION	812:3	812:46	7	
KEYWORD	812:3	812:3	8	if
LEAF_NODE	812:3	812:3	9	if
LEAF_NODE	812:6	812:6	8	(
CONDITION	812:7	812:7	8	pageNum < 0
EXPR	812:7	812:17	9	pageNum < 0
FIELD	812:7	812:7	10	pageNum
LEAF_NODE	812:7	812:7	11	pageNum
REL_OPERATOR	812:15	812:15	10	<
LEAF_NODE	812:15	812:15	11	<
FIELD	812:17	812:17	10	0
LEAF_NODE	812:17	812:17	11	0
LEAF_NODE	812:18	812:18	8	)
STATEMENTS	812:46	815:3	8	
LEAF_NODE	812:46	812:46	9	{
STATEMENTS	813:4	813:4	9	
SELECTION	813:4	814:5	10	
KEYWORD	813:4	813:4	11	if
LEAF_NODE	813:4	813:4	12	if
LEAF_NODE	813:7	813:7	11	(
CONDITION	813:8	813:8	11	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
EXPR	813:8	813:8	12	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
FUNCTION_CALL	813:8	813:55	13	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
CALLEE	813:8	813:8	14	TIFFGetField
LEAF_NODE	813:8	813:8	15	TIFFGetField
LEAF_NODE	813:20	813:20	14	(
ARGUMENT	813:21	813:21	14	in
FIELD	813:21	813:21	15	in
LEAF_NODE	813:21	813:21	16	in
LEAF_NODE	813:23	813:23	14	,
ARGUMENT	813:25	813:25	14	TIFFTAG_PAGENUMBER
FIELD	813:25	813:25	15	TIFFTAG_PAGENUMBER
LEAF_NODE	813:25	813:25	16	TIFFTAG_PAGENUMBER
LEAF_NODE	813:43	813:43	14	,
ARGUMENT	813:45	813:45	14	& pg0
UNARY_EXPR	813:45	813:46	15	& pg0
UNARY_OPERATOR	813:45	813:45	16	&
LEAF_NODE	813:45	813:45	17	&
FIELD	813:46	813:46	16	pg0
LEAF_NODE	813:46	813:46	17	pg0
LEAF_NODE	813:49	813:49	14	,
ARGUMENT	813:51	813:51	14	& pg1
UNARY_EXPR	813:51	813:52	15	& pg1
UNARY_OPERATOR	813:51	813:51	16	&
LEAF_NODE	813:51	813:51	17	&
FIELD	813:52	813:52	16	pg1
LEAF_NODE	813:52	813:52	17	pg1
LEAF_NODE	813:55	813:55	14	)
LEAF_NODE	813:56	813:56	11	)
STATEMENTS	814:5	814:5	11	
EXPR_STATEMENT	814:5	814:52	12	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 ) ;
EXPR	814:5	814:5	13	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 )
FUNCTION_CALL	814:5	814:51	14	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 )
CALLEE	814:5	814:5	15	TIFFSetField
LEAF_NODE	814:5	814:5	16	TIFFSetField
LEAF_NODE	814:17	814:17	15	(
ARGUMENT	814:18	814:18	15	out
FIELD	814:18	814:18	16	out
LEAF_NODE	814:18	814:18	17	out
LEAF_NODE	814:21	814:21	15	,
ARGUMENT	814:23	814:23	15	TIFFTAG_PAGENUMBER
FIELD	814:23	814:23	16	TIFFTAG_PAGENUMBER
LEAF_NODE	814:23	814:23	17	TIFFTAG_PAGENUMBER
LEAF_NODE	814:41	814:41	15	,
ARGUMENT	814:43	814:43	15	pg0
FIELD	814:43	814:43	16	pg0
LEAF_NODE	814:43	814:43	17	pg0
LEAF_NODE	814:46	814:46	15	,
ARGUMENT	814:48	814:48	15	pg1
FIELD	814:48	814:48	16	pg1
LEAF_NODE	814:48	814:48	17	pg1
LEAF_NODE	814:51	814:51	15	)
LEAF_NODE	814:52	814:52	13	;
LEAF_NODE	815:3	815:3	9	}
SELECTION	815:5	816:4	7	
KEYWORD	815:5	815:5	8	else
LEAF_NODE	815:5	815:5	9	else
STATEMENTS	816:4	816:4	8	
EXPR_STATEMENT	816:4	816:55	9	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 ) ;
EXPR	816:4	816:4	10	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 )
FUNCTION_CALL	816:4	816:54	11	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 )
CALLEE	816:4	816:4	12	TIFFSetField
LEAF_NODE	816:4	816:4	13	TIFFSetField
LEAF_NODE	816:16	816:16	12	(
ARGUMENT	816:17	816:17	12	out
FIELD	816:17	816:17	13	out
LEAF_NODE	816:17	816:17	14	out
LEAF_NODE	816:20	816:20	12	,
ARGUMENT	816:22	816:22	12	TIFFTAG_PAGENUMBER
FIELD	816:22	816:22	13	TIFFTAG_PAGENUMBER
LEAF_NODE	816:22	816:22	14	TIFFTAG_PAGENUMBER
LEAF_NODE	816:40	816:40	12	,
ARGUMENT	816:42	816:42	12	pageNum ++
FIELD	816:42	816:49	13	pageNum ++
LEAF_NODE	816:42	816:42	14	pageNum
LEAF_NODE	816:49	816:49	14	++
LEAF_NODE	816:51	816:51	12	,
ARGUMENT	816:53	816:53	12	0
FIELD	816:53	816:53	13	0
LEAF_NODE	816:53	816:53	14	0
LEAF_NODE	816:54	816:54	12	)
LEAF_NODE	816:55	816:55	10	;
LEAF_NODE	818:2	818:2	6	}
SELECTION	818:4	818:9	4	
KEYWORD	818:4	818:4	5	else
LEAF_NODE	818:4	818:4	6	else
STATEMENTS	818:9	825:2	5	
LEAF_NODE	818:9	818:9	6	{
STATEMENTS	819:3	819:3	6	
SELECTION	819:3	819:57	7	
KEYWORD	819:3	819:3	8	if
LEAF_NODE	819:3	819:3	9	if
LEAF_NODE	819:6	819:6	8	(
CONDITION	819:7	819:7	8	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
EXPR	819:7	819:7	9	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
FUNCTION_CALL	819:7	819:54	10	TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 )
CALLEE	819:7	819:7	11	TIFFGetField
LEAF_NODE	819:7	819:7	12	TIFFGetField
LEAF_NODE	819:19	819:19	11	(
ARGUMENT	819:20	819:20	11	in
FIELD	819:20	819:20	12	in
LEAF_NODE	819:20	819:20	13	in
LEAF_NODE	819:22	819:22	11	,
ARGUMENT	819:24	819:24	11	TIFFTAG_PAGENUMBER
FIELD	819:24	819:24	12	TIFFTAG_PAGENUMBER
LEAF_NODE	819:24	819:24	13	TIFFTAG_PAGENUMBER
LEAF_NODE	819:42	819:42	11	,
ARGUMENT	819:44	819:44	11	& pg0
UNARY_EXPR	819:44	819:45	12	& pg0
UNARY_OPERATOR	819:44	819:44	13	&
LEAF_NODE	819:44	819:44	14	&
FIELD	819:45	819:45	13	pg0
LEAF_NODE	819:45	819:45	14	pg0
LEAF_NODE	819:48	819:48	11	,
ARGUMENT	819:50	819:50	11	& pg1
UNARY_EXPR	819:50	819:51	12	& pg1
UNARY_OPERATOR	819:50	819:50	13	&
LEAF_NODE	819:50	819:50	14	&
FIELD	819:51	819:51	13	pg1
LEAF_NODE	819:51	819:51	14	pg1
LEAF_NODE	819:54	819:54	11	)
LEAF_NODE	819:55	819:55	8	)
STATEMENTS	819:57	824:3	8	
LEAF_NODE	819:57	819:57	9	{
STATEMENTS	820:4	822:4	9	
SELECTION	820:4	821:5	10	
KEYWORD	820:4	820:4	11	if
LEAF_NODE	820:4	820:4	12	if
LEAF_NODE	820:7	820:7	11	(
CONDITION	820:8	820:8	11	pageNum < 0
EXPR	820:8	820:18	12	pageNum < 0
FIELD	820:8	820:8	13	pageNum
LEAF_NODE	820:8	820:8	14	pageNum
REL_OPERATOR	820:16	820:16	13	<
LEAF_NODE	820:16	820:16	14	<
FIELD	820:18	820:18	13	0
LEAF_NODE	820:18	820:18	14	0
LEAF_NODE	820:19	820:19	11	)
STATEMENTS	821:5	821:5	11	
EXPR_STATEMENT	821:5	821:52	12	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 ) ;
EXPR	821:5	821:5	13	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 )
FUNCTION_CALL	821:5	821:51	14	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 )
CALLEE	821:5	821:5	15	TIFFSetField
LEAF_NODE	821:5	821:5	16	TIFFSetField
LEAF_NODE	821:17	821:17	15	(
ARGUMENT	821:18	821:18	15	out
FIELD	821:18	821:18	16	out
LEAF_NODE	821:18	821:18	17	out
LEAF_NODE	821:21	821:21	15	,
ARGUMENT	821:23	821:23	15	TIFFTAG_PAGENUMBER
FIELD	821:23	821:23	16	TIFFTAG_PAGENUMBER
LEAF_NODE	821:23	821:23	17	TIFFTAG_PAGENUMBER
LEAF_NODE	821:41	821:41	15	,
ARGUMENT	821:43	821:43	15	pg0
FIELD	821:43	821:43	16	pg0
LEAF_NODE	821:43	821:43	17	pg0
LEAF_NODE	821:46	821:46	15	,
ARGUMENT	821:48	821:48	15	pg1
FIELD	821:48	821:48	16	pg1
LEAF_NODE	821:48	821:48	17	pg1
LEAF_NODE	821:51	821:51	15	)
LEAF_NODE	821:52	821:52	13	;
SELECTION	822:4	823:5	10	
KEYWORD	822:4	822:4	11	else
LEAF_NODE	822:4	822:4	12	else
STATEMENTS	823:5	823:5	11	
EXPR_STATEMENT	823:5	823:56	12	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 ) ;
EXPR	823:5	823:5	13	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 )
FUNCTION_CALL	823:5	823:55	14	TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 )
CALLEE	823:5	823:5	15	TIFFSetField
LEAF_NODE	823:5	823:5	16	TIFFSetField
LEAF_NODE	823:17	823:17	15	(
ARGUMENT	823:18	823:18	15	out
FIELD	823:18	823:18	16	out
LEAF_NODE	823:18	823:18	17	out
LEAF_NODE	823:21	823:21	15	,
ARGUMENT	823:23	823:23	15	TIFFTAG_PAGENUMBER
FIELD	823:23	823:23	16	TIFFTAG_PAGENUMBER
LEAF_NODE	823:23	823:23	17	TIFFTAG_PAGENUMBER
LEAF_NODE	823:41	823:41	15	,
ARGUMENT	823:43	823:43	15	pageNum ++
FIELD	823:43	823:50	16	pageNum ++
LEAF_NODE	823:43	823:43	17	pageNum
LEAF_NODE	823:50	823:50	17	++
LEAF_NODE	823:52	823:52	15	,
ARGUMENT	823:54	823:54	15	0
FIELD	823:54	823:54	16	0
LEAF_NODE	823:54	823:54	17	0
LEAF_NODE	823:55	823:55	15	)
LEAF_NODE	823:56	823:56	13	;
LEAF_NODE	824:3	824:3	9	}
LEAF_NODE	825:2	825:2	6	}
LEAF_NODE	826:1	826:1	3	}
ITERATION	828:1	829:2	3	
KEYWORD	828:1	828:1	4	for
LEAF_NODE	828:1	828:1	5	for
LEAF_NODE	828:5	828:5	4	(
FOR_INIT	828:6	828:14	4	p = tags ;
EXPR	828:6	828:6	5	p = tags
ASSIGN	828:6	828:10	6	p = tags
LVAL	828:6	828:6	7	p
FIELD	828:6	828:6	8	p
LEAF_NODE	828:6	828:6	9	p
ASSIGN_OP	828:8	828:8	7	=
LEAF_NODE	828:8	828:8	8	=
RVAL	828:10	828:10	7	tags
FIELD	828:10	828:10	8	tags
LEAF_NODE	828:10	828:10	9	tags
LEAF_NODE	828:14	828:14	5	;
CONDITION	828:16	828:16	4	p < & tags [ NTAGS ]
EXPR	828:16	828:20	5	p < & tags [ NTAGS ]
FIELD	828:16	828:16	6	p
LEAF_NODE	828:16	828:16	7	p
REL_OPERATOR	828:18	828:18	6	<
LEAF_NODE	828:18	828:18	7	<
UNARY_EXPR	828:20	828:21	6	& tags [ NTAGS ]
UNARY_OPERATOR	828:20	828:20	7	&
LEAF_NODE	828:20	828:20	8	&
FIELD	828:21	828:31	7	tags [ NTAGS ]
LEAF_NODE	828:21	828:21	8	tags
LEAF_NODE	828:25	828:25	8	[
EXPR	828:26	828:26	8	NTAGS
FIELD	828:26	828:26	9	NTAGS
LEAF_NODE	828:26	828:26	10	NTAGS
LEAF_NODE	828:31	828:31	8	]
LEAF_NODE	828:32	828:32	4	;
FOR_EXPR	828:34	828:34	4	p ++
EXPR	828:34	828:34	5	p ++
FIELD	828:34	828:35	6	p ++
LEAF_NODE	828:34	828:34	7	p
LEAF_NODE	828:35	828:35	7	++
LEAF_NODE	828:37	828:37	4	)
STATEMENTS	829:2	829:2	4	
EXPR_STATEMENT	829:2	829:36	5	CopyTag ( p -> tag , p -> count , p -> type ) ;
EXPR	829:2	829:2	6	CopyTag ( p -> tag , p -> count , p -> type )
FUNCTION_CALL	829:2	829:35	7	CopyTag ( p -> tag , p -> count , p -> type )
CALLEE	829:2	829:2	8	CopyTag
LEAF_NODE	829:2	829:2	9	CopyTag
LEAF_NODE	829:9	829:9	8	(
ARGUMENT	829:10	829:10	8	p -> tag
FIELD	829:10	829:13	9	p -> tag
LEAF_NODE	829:10	829:10	10	p
LEAF_NODE	829:11	829:11	10	->
LEAF_NODE	829:13	829:13	10	tag
LEAF_NODE	829:16	829:16	8	,
ARGUMENT	829:18	829:18	8	p -> count
FIELD	829:18	829:21	9	p -> count
LEAF_NODE	829:18	829:18	10	p
LEAF_NODE	829:19	829:19	10	->
LEAF_NODE	829:21	829:21	10	count
LEAF_NODE	829:26	829:26	8	,
ARGUMENT	829:28	829:28	8	p -> type
FIELD	829:28	829:31	9	p -> type
LEAF_NODE	829:28	829:28	10	p
LEAF_NODE	829:29	829:29	10	->
LEAF_NODE	829:31	829:31	10	type
LEAF_NODE	829:35	829:35	8	)
LEAF_NODE	829:36	829:36	6	;
EXPR_STATEMENT	831:1	831:59	3	cf = pickCopyFunc ( in , out , bitspersample , samplesperpixel ) ;
EXPR	831:1	831:1	4	cf = pickCopyFunc ( in , out , bitspersample , samplesperpixel )
ASSIGN	831:1	831:6	5	cf = pickCopyFunc ( in , out , bitspersample , samplesperpixel )
LVAL	831:1	831:1	6	cf
FIELD	831:1	831:1	7	cf
LEAF_NODE	831:1	831:1	8	cf
ASSIGN_OP	831:4	831:4	6	=
LEAF_NODE	831:4	831:4	7	=
RVAL	831:6	831:6	6	pickCopyFunc ( in , out , bitspersample , samplesperpixel )
FUNCTION_CALL	831:6	831:58	7	pickCopyFunc ( in , out , bitspersample , samplesperpixel )
CALLEE	831:6	831:6	8	pickCopyFunc
LEAF_NODE	831:6	831:6	9	pickCopyFunc
LEAF_NODE	831:18	831:18	8	(
ARGUMENT	831:19	831:19	8	in
FIELD	831:19	831:19	9	in
LEAF_NODE	831:19	831:19	10	in
LEAF_NODE	831:21	831:21	8	,
ARGUMENT	831:23	831:23	8	out
FIELD	831:23	831:23	9	out
LEAF_NODE	831:23	831:23	10	out
LEAF_NODE	831:26	831:26	8	,
ARGUMENT	831:28	831:28	8	bitspersample
FIELD	831:28	831:28	9	bitspersample
LEAF_NODE	831:28	831:28	10	bitspersample
LEAF_NODE	831:41	831:41	8	,
ARGUMENT	831:43	831:43	8	samplesperpixel
FIELD	831:43	831:43	9	samplesperpixel
LEAF_NODE	831:43	831:43	10	samplesperpixel
LEAF_NODE	831:58	831:58	8	)
LEAF_NODE	831:59	831:59	4	;
JUMP_STATEMENT	832:1	832:69	3	return ( cf ? ( * cf ) ( in , out , length , width , samplesperpixel ) : FALSE ) ;
KEYWORD	832:1	832:1	4	return
LEAF_NODE	832:1	832:1	5	return
DESTINATION	832:8	832:8	4	( cf ? ( * cf ) ( in , out , length , width , samplesperpixel ) : FALSE )
EXPR	832:8	832:68	5	( cf ? ( * cf ) ( in , out , length , width , samplesperpixel ) : FALSE )
LEAF_NODE	832:8	832:8	6	(
COND_EXPR	832:9	832:63	6	cf ? ( * cf ) ( in , out , length , width , samplesperpixel ) : FALSE
CONDITION	832:9	832:9	7	cf
FIELD	832:9	832:9	8	cf
LEAF_NODE	832:9	832:9	9	cf
LEAF_NODE	832:12	832:12	7	?
EXPR	832:14	832:14	7	( * cf ) ( in , out , length , width , samplesperpixel )
FUNCTION_CALL	832:14	832:59	8	( * cf ) ( in , out , length , width , samplesperpixel )
CALLEE	832:14	832:18	9	( * cf )
LEAF_NODE	832:14	832:14	10	(
UNARY_EXPR	832:15	832:16	10	* cf
UNARY_OPERATOR	832:15	832:15	11	*
LEAF_NODE	832:15	832:15	12	*
FIELD	832:16	832:16	11	cf
LEAF_NODE	832:16	832:16	12	cf
LEAF_NODE	832:18	832:18	10	)
LEAF_NODE	832:19	832:19	9	(
ARGUMENT	832:20	832:20	9	in
FIELD	832:20	832:20	10	in
LEAF_NODE	832:20	832:20	11	in
LEAF_NODE	832:22	832:22	9	,
ARGUMENT	832:24	832:24	9	out
FIELD	832:24	832:24	10	out
LEAF_NODE	832:24	832:24	11	out
LEAF_NODE	832:27	832:27	9	,
ARGUMENT	832:29	832:29	9	length
FIELD	832:29	832:29	10	length
LEAF_NODE	832:29	832:29	11	length
LEAF_NODE	832:35	832:35	9	,
ARGUMENT	832:37	832:37	9	width
FIELD	832:37	832:37	10	width
LEAF_NODE	832:37	832:37	11	width
LEAF_NODE	832:42	832:42	9	,
ARGUMENT	832:44	832:44	9	samplesperpixel
FIELD	832:44	832:44	10	samplesperpixel
LEAF_NODE	832:44	832:44	11	samplesperpixel
LEAF_NODE	832:59	832:59	9	)
LEAF_NODE	832:61	832:61	7	:
FIELD	832:63	832:63	7	FALSE
LEAF_NODE	832:63	832:63	8	FALSE
LEAF_NODE	832:68	832:68	6	)
LEAF_NODE	832:69	832:69	4	;
LEAF_NODE	833:0	833:0	2	}
FUNCTION_DEF	0:0	885:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	855:0	855:0	2	DECLAREcpFunc
LEAF_NODE	855:0	855:0	3	DECLAREcpFunc
PARAMETER_LIST	855:13	855:34	2	( cpContig2ContigByRow )
LEAF_NODE	855:13	855:13	3	(
PARAMETER_DECL	855:14	855:14	3	cpContig2ContigByRow
LEAF_NODE	855:14	855:14	4	cpContig2ContigByRow
LEAF_NODE	855:34	855:34	3	)
LEAF_NODE	856:0	856:0	2	{
STATEMENTS	857:1	884:1	2	
SIMPLE_DECL	857:1	857:44	3	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in ) ;
VAR_DECL	857:1	857:9	4	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in )
TYPE	857:1	857:1	5	tsize_t
TYPE_NAME	857:1	857:1	6	tsize_t
LEAF_NODE	857:1	857:1	7	tsize_t
NAME	857:9	857:9	5	scanlinesize
LEAF_NODE	857:9	857:9	6	scanlinesize
LEAF_NODE	0:0	0:0	5	;
INIT	857:9	857:9	5	scanlinesize = TIFFScanlineSize ( in )
ASSIGN	857:9	857:24	6	scanlinesize = TIFFScanlineSize ( in )
LVAL	857:9	857:9	7	scanlinesize
NAME	857:9	857:9	8	scanlinesize
LEAF_NODE	857:9	857:9	9	scanlinesize
ASSIGN_OP	857:22	857:22	7	=
LEAF_NODE	857:22	857:22	8	=
RVAL	857:24	857:24	7	TIFFScanlineSize ( in )
FUNCTION_CALL	857:24	857:43	8	TIFFScanlineSize ( in )
CALLEE	857:24	857:24	9	TIFFScanlineSize
LEAF_NODE	857:24	857:24	10	TIFFScanlineSize
LEAF_NODE	857:40	857:40	9	(
ARGUMENT	857:41	857:41	9	in
FIELD	857:41	857:41	10	in
LEAF_NODE	857:41	857:41	11	in
LEAF_NODE	857:43	857:43	9	)
LEAF_NODE	857:44	857:44	4	;
SIMPLE_DECL	858:1	858:12	3	tdata_t buf ;
VAR_DECL	858:1	858:9	4	tdata_t buf
TYPE	858:1	858:1	5	tdata_t
TYPE_NAME	858:1	858:1	6	tdata_t
LEAF_NODE	858:1	858:1	7	tdata_t
NAME	858:9	858:9	5	buf
LEAF_NODE	858:9	858:9	6	buf
LEAF_NODE	858:12	858:12	4	;
SIMPLE_DECL	859:1	859:11	3	uint32 row ;
VAR_DECL	859:1	859:8	4	uint32 row
TYPE	859:1	859:1	5	uint32
TYPE_NAME	859:1	859:1	6	uint32
LEAF_NODE	859:1	859:1	7	uint32
NAME	859:8	859:8	5	row
LEAF_NODE	859:8	859:8	6	row
LEAF_NODE	859:11	859:11	4	;
EXPR_STATEMENT	861:1	861:32	3	buf = _TIFFmalloc ( scanlinesize ) ;
EXPR	861:1	861:1	4	buf = _TIFFmalloc ( scanlinesize )
ASSIGN	861:1	861:7	5	buf = _TIFFmalloc ( scanlinesize )
LVAL	861:1	861:1	6	buf
FIELD	861:1	861:1	7	buf
LEAF_NODE	861:1	861:1	8	buf
ASSIGN_OP	861:5	861:5	6	=
LEAF_NODE	861:5	861:5	7	=
RVAL	861:7	861:7	6	_TIFFmalloc ( scanlinesize )
FUNCTION_CALL	861:7	861:31	7	_TIFFmalloc ( scanlinesize )
CALLEE	861:7	861:7	8	_TIFFmalloc
LEAF_NODE	861:7	861:7	9	_TIFFmalloc
LEAF_NODE	861:18	861:18	8	(
ARGUMENT	861:19	861:19	8	scanlinesize
FIELD	861:19	861:19	9	scanlinesize
LEAF_NODE	861:19	861:19	10	scanlinesize
LEAF_NODE	861:31	861:31	8	)
LEAF_NODE	861:32	861:32	4	;
SELECTION	862:1	863:2	3	
KEYWORD	862:1	862:1	4	if
LEAF_NODE	862:1	862:1	5	if
LEAF_NODE	862:4	862:4	4	(
CONDITION	862:5	862:5	4	! buf
EXPR	862:5	862:5	5	! buf
UNARY_EXPR	862:5	862:6	6	! buf
UNARY_OPERATOR	862:5	862:5	7	!
LEAF_NODE	862:5	862:5	8	!
FIELD	862:6	862:6	7	buf
LEAF_NODE	862:6	862:6	8	buf
LEAF_NODE	862:9	862:9	4	)
STATEMENTS	863:2	863:2	4	
JUMP_STATEMENT	863:2	863:10	5	return 0 ;
KEYWORD	863:2	863:2	6	return
LEAF_NODE	863:2	863:2	7	return
DESTINATION	863:9	863:9	6	0
EXPR	863:9	863:9	7	0
FIELD	863:9	863:9	8	0
LEAF_NODE	863:9	863:9	9	0
LEAF_NODE	863:10	863:10	6	;
EXPR_STATEMENT	864:1	864:34	3	_TIFFmemset ( buf , 0 , scanlinesize ) ;
EXPR	864:1	864:1	4	_TIFFmemset ( buf , 0 , scanlinesize )
FUNCTION_CALL	864:1	864:33	5	_TIFFmemset ( buf , 0 , scanlinesize )
CALLEE	864:1	864:1	6	_TIFFmemset
LEAF_NODE	864:1	864:1	7	_TIFFmemset
LEAF_NODE	864:12	864:12	6	(
ARGUMENT	864:13	864:13	6	buf
FIELD	864:13	864:13	7	buf
LEAF_NODE	864:13	864:13	8	buf
LEAF_NODE	864:16	864:16	6	,
ARGUMENT	864:18	864:18	6	0
FIELD	864:18	864:18	7	0
LEAF_NODE	864:18	864:18	8	0
LEAF_NODE	864:19	864:19	6	,
ARGUMENT	864:21	864:21	6	scanlinesize
FIELD	864:21	864:21	7	scanlinesize
LEAF_NODE	864:21	864:21	8	scanlinesize
LEAF_NODE	864:33	864:33	6	)
LEAF_NODE	864:34	864:34	4	;
EXPR_STATEMENT	865:1	865:18	3	( void ) imagewidth ;
EXPR	865:1	865:8	4	( void ) imagewidth
LEAF_NODE	865:1	865:1	5	(
TYPE_NAME	865:2	865:2	5	void
LEAF_NODE	865:2	865:2	6	void
LEAF_NODE	865:6	865:6	5	)
FIELD	865:8	865:8	5	imagewidth
LEAF_NODE	865:8	865:8	6	imagewidth
LEAF_NODE	865:18	865:18	4	;
EXPR_STATEMENT	865:20	865:30	3	( void ) spp ;
EXPR	865:20	865:27	4	( void ) spp
LEAF_NODE	865:20	865:20	5	(
TYPE_NAME	865:21	865:21	5	void
LEAF_NODE	865:21	865:21	6	void
LEAF_NODE	865:25	865:25	5	)
FIELD	865:27	865:27	5	spp
LEAF_NODE	865:27	865:27	6	spp
LEAF_NODE	865:30	865:30	4	;
ITERATION	866:1	866:41	3	
KEYWORD	866:1	866:1	4	for
LEAF_NODE	866:1	866:1	5	for
LEAF_NODE	866:5	866:5	4	(
FOR_INIT	866:6	866:13	4	row = 0 ;
EXPR	866:6	866:6	5	row = 0
ASSIGN	866:6	866:12	6	row = 0
LVAL	866:6	866:6	7	row
FIELD	866:6	866:6	8	row
LEAF_NODE	866:6	866:6	9	row
ASSIGN_OP	866:10	866:10	7	=
LEAF_NODE	866:10	866:10	8	=
RVAL	866:12	866:12	7	0
FIELD	866:12	866:12	8	0
LEAF_NODE	866:12	866:12	9	0
LEAF_NODE	866:13	866:13	5	;
CONDITION	866:15	866:15	4	row < imagelength
EXPR	866:15	866:21	5	row < imagelength
FIELD	866:15	866:15	6	row
LEAF_NODE	866:15	866:15	7	row
REL_OPERATOR	866:19	866:19	6	<
LEAF_NODE	866:19	866:19	7	<
FIELD	866:21	866:21	6	imagelength
LEAF_NODE	866:21	866:21	7	imagelength
LEAF_NODE	866:32	866:32	4	;
FOR_EXPR	866:34	866:34	4	row ++
EXPR	866:34	866:34	5	row ++
FIELD	866:34	866:37	6	row ++
LEAF_NODE	866:34	866:34	7	row
LEAF_NODE	866:37	866:37	7	++
LEAF_NODE	866:39	866:39	4	)
STATEMENTS	866:41	879:1	4	
LEAF_NODE	866:41	866:41	5	{
STATEMENTS	867:2	873:2	5	
SELECTION	867:2	867:56	6	
KEYWORD	867:2	867:2	7	if
LEAF_NODE	867:2	867:2	8	if
LEAF_NODE	867:5	867:5	7	(
CONDITION	867:6	867:6	7	TIFFReadScanline ( in , buf , row , 0 ) < 0 && ! ignore
EXPR	867:6	867:6	8	TIFFReadScanline ( in , buf , row , 0 ) < 0 && ! ignore
AND	867:6	867:47	9	TIFFReadScanline ( in , buf , row , 0 ) < 0 && ! ignore
EXPR	867:6	867:42	10	TIFFReadScanline ( in , buf , row , 0 ) < 0
FUNCTION_CALL	867:6	867:38	11	TIFFReadScanline ( in , buf , row , 0 )
CALLEE	867:6	867:6	12	TIFFReadScanline
LEAF_NODE	867:6	867:6	13	TIFFReadScanline
LEAF_NODE	867:22	867:22	12	(
ARGUMENT	867:23	867:23	12	in
FIELD	867:23	867:23	13	in
LEAF_NODE	867:23	867:23	14	in
LEAF_NODE	867:25	867:25	12	,
ARGUMENT	867:27	867:27	12	buf
FIELD	867:27	867:27	13	buf
LEAF_NODE	867:27	867:27	14	buf
LEAF_NODE	867:30	867:30	12	,
ARGUMENT	867:32	867:32	12	row
FIELD	867:32	867:32	13	row
LEAF_NODE	867:32	867:32	14	row
LEAF_NODE	867:35	867:35	12	,
ARGUMENT	867:37	867:37	12	0
FIELD	867:37	867:37	13	0
LEAF_NODE	867:37	867:37	14	0
LEAF_NODE	867:38	867:38	12	)
REL_OPERATOR	867:40	867:40	11	<
LEAF_NODE	867:40	867:40	12	<
FIELD	867:42	867:42	11	0
LEAF_NODE	867:42	867:42	12	0
LEAF_NODE	867:44	867:44	10	&&
EXPR	867:47	867:47	10	! ignore
UNARY_EXPR	867:47	867:48	11	! ignore
UNARY_OPERATOR	867:47	867:47	12	!
LEAF_NODE	867:47	867:47	13	!
FIELD	867:48	867:48	12	ignore
LEAF_NODE	867:48	867:48	13	ignore
LEAF_NODE	867:54	867:54	7	)
STATEMENTS	867:56	872:2	7	
LEAF_NODE	867:56	867:56	8	{
STATEMENTS	868:3	871:3	8	
EXPR_STATEMENT	868:3	870:26	9	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row ) ;
EXPR	868:3	868:3	10	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	868:3	870:25	11	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
CALLEE	868:3	868:3	12	TIFFError
LEAF_NODE	868:3	868:3	13	TIFFError
LEAF_NODE	868:12	868:12	12	(
ARGUMENT	868:13	868:13	12	TIFFFileName ( in )
FUNCTION_CALL	868:13	868:28	13	TIFFFileName ( in )
CALLEE	868:13	868:13	14	TIFFFileName
LEAF_NODE	868:13	868:13	15	TIFFFileName
LEAF_NODE	868:25	868:25	14	(
ARGUMENT	868:26	868:26	14	in
FIELD	868:26	868:26	15	in
LEAF_NODE	868:26	868:26	16	in
LEAF_NODE	868:28	868:28	14	)
LEAF_NODE	868:29	868:29	12	,
ARGUMENT	869:6	869:6	12	"Error, can't read scanline %lu"
FIELD	869:6	869:6	13	"Error, can't read scanline %lu"
LEAF_NODE	869:6	869:6	14	"Error, can't read scanline %lu"
LEAF_NODE	869:38	869:38	12	,
ARGUMENT	870:6	870:22	12	( unsigned long ) row
LEAF_NODE	870:6	870:6	13	(
TYPE_NAME	870:7	870:16	13	unsigned long
LEAF_NODE	870:7	870:7	14	unsigned
LEAF_NODE	870:16	870:16	14	long
LEAF_NODE	870:20	870:20	13	)
FIELD	870:22	870:22	13	row
LEAF_NODE	870:22	870:22	14	row
LEAF_NODE	870:25	870:25	12	)
LEAF_NODE	870:26	870:26	10	;
JUMP_STATEMENT	871:3	871:11	9	goto bad ;
KEYWORD	871:3	871:3	10	goto
LEAF_NODE	871:3	871:3	11	goto
DESTINATION	871:8	871:8	10	bad
LEAF_NODE	871:8	871:8	11	bad
LEAF_NODE	871:11	871:11	10	;
LEAF_NODE	872:2	872:2	8	}
SELECTION	873:2	873:47	6	
KEYWORD	873:2	873:2	7	if
LEAF_NODE	873:2	873:2	8	if
LEAF_NODE	873:5	873:5	7	(
CONDITION	873:6	873:6	7	TIFFWriteScanline ( out , buf , row , 0 ) < 0
EXPR	873:6	873:44	8	TIFFWriteScanline ( out , buf , row , 0 ) < 0
FUNCTION_CALL	873:6	873:40	9	TIFFWriteScanline ( out , buf , row , 0 )
CALLEE	873:6	873:6	10	TIFFWriteScanline
LEAF_NODE	873:6	873:6	11	TIFFWriteScanline
LEAF_NODE	873:23	873:23	10	(
ARGUMENT	873:24	873:24	10	out
FIELD	873:24	873:24	11	out
LEAF_NODE	873:24	873:24	12	out
LEAF_NODE	873:27	873:27	10	,
ARGUMENT	873:29	873:29	10	buf
FIELD	873:29	873:29	11	buf
LEAF_NODE	873:29	873:29	12	buf
LEAF_NODE	873:32	873:32	10	,
ARGUMENT	873:34	873:34	10	row
FIELD	873:34	873:34	11	row
LEAF_NODE	873:34	873:34	12	row
LEAF_NODE	873:37	873:37	10	,
ARGUMENT	873:39	873:39	10	0
FIELD	873:39	873:39	11	0
LEAF_NODE	873:39	873:39	12	0
LEAF_NODE	873:40	873:40	10	)
REL_OPERATOR	873:42	873:42	9	<
LEAF_NODE	873:42	873:42	10	<
FIELD	873:44	873:44	9	0
LEAF_NODE	873:44	873:44	10	0
LEAF_NODE	873:45	873:45	7	)
STATEMENTS	873:47	878:2	7	
LEAF_NODE	873:47	873:47	8	{
STATEMENTS	874:3	877:3	8	
EXPR_STATEMENT	874:3	876:26	9	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row ) ;
EXPR	874:3	874:3	10	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	874:3	876:25	11	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
CALLEE	874:3	874:3	12	TIFFError
LEAF_NODE	874:3	874:3	13	TIFFError
LEAF_NODE	874:12	874:12	12	(
ARGUMENT	874:13	874:13	12	TIFFFileName ( out )
FUNCTION_CALL	874:13	874:29	13	TIFFFileName ( out )
CALLEE	874:13	874:13	14	TIFFFileName
LEAF_NODE	874:13	874:13	15	TIFFFileName
LEAF_NODE	874:25	874:25	14	(
ARGUMENT	874:26	874:26	14	out
FIELD	874:26	874:26	15	out
LEAF_NODE	874:26	874:26	16	out
LEAF_NODE	874:29	874:29	14	)
LEAF_NODE	874:30	874:30	12	,
ARGUMENT	875:6	875:6	12	"Error, can't write scanline %lu"
FIELD	875:6	875:6	13	"Error, can't write scanline %lu"
LEAF_NODE	875:6	875:6	14	"Error, can't write scanline %lu"
LEAF_NODE	875:39	875:39	12	,
ARGUMENT	876:6	876:22	12	( unsigned long ) row
LEAF_NODE	876:6	876:6	13	(
TYPE_NAME	876:7	876:16	13	unsigned long
LEAF_NODE	876:7	876:7	14	unsigned
LEAF_NODE	876:16	876:16	14	long
LEAF_NODE	876:20	876:20	13	)
FIELD	876:22	876:22	13	row
LEAF_NODE	876:22	876:22	14	row
LEAF_NODE	876:25	876:25	12	)
LEAF_NODE	876:26	876:26	10	;
JUMP_STATEMENT	877:3	877:11	9	goto bad ;
KEYWORD	877:3	877:3	10	goto
LEAF_NODE	877:3	877:3	11	goto
DESTINATION	877:8	877:8	10	bad
LEAF_NODE	877:8	877:8	11	bad
LEAF_NODE	877:11	877:11	10	;
LEAF_NODE	878:2	878:2	8	}
LEAF_NODE	879:1	879:1	5	}
EXPR_STATEMENT	880:1	880:15	3	_TIFFfree ( buf ) ;
EXPR	880:1	880:1	4	_TIFFfree ( buf )
FUNCTION_CALL	880:1	880:14	5	_TIFFfree ( buf )
CALLEE	880:1	880:1	6	_TIFFfree
LEAF_NODE	880:1	880:1	7	_TIFFfree
LEAF_NODE	880:10	880:10	6	(
ARGUMENT	880:11	880:11	6	buf
FIELD	880:11	880:11	7	buf
LEAF_NODE	880:11	880:11	8	buf
LEAF_NODE	880:14	880:14	6	)
LEAF_NODE	880:15	880:15	4	;
JUMP_STATEMENT	881:1	881:9	3	return 1 ;
KEYWORD	881:1	881:1	4	return
LEAF_NODE	881:1	881:1	5	return
DESTINATION	881:8	881:8	4	1
EXPR	881:8	881:8	5	1
FIELD	881:8	881:8	6	1
LEAF_NODE	881:8	881:8	7	1
LEAF_NODE	881:9	881:9	4	;
LABEL	882:0	882:3	3	bad :
LEAF_NODE	882:0	882:0	4	bad
LEAF_NODE	882:3	882:3	4	:
EXPR_STATEMENT	883:1	883:15	3	_TIFFfree ( buf ) ;
EXPR	883:1	883:1	4	_TIFFfree ( buf )
FUNCTION_CALL	883:1	883:14	5	_TIFFfree ( buf )
CALLEE	883:1	883:1	6	_TIFFfree
LEAF_NODE	883:1	883:1	7	_TIFFfree
LEAF_NODE	883:10	883:10	6	(
ARGUMENT	883:11	883:11	6	buf
FIELD	883:11	883:11	7	buf
LEAF_NODE	883:11	883:11	8	buf
LEAF_NODE	883:14	883:14	6	)
LEAF_NODE	883:15	883:15	4	;
JUMP_STATEMENT	884:1	884:9	3	return 0 ;
KEYWORD	884:1	884:1	4	return
LEAF_NODE	884:1	884:1	5	return
DESTINATION	884:8	884:8	4	0
EXPR	884:8	884:8	5	0
FIELD	884:8	884:8	6	0
LEAF_NODE	884:8	884:8	7	0
LEAF_NODE	884:9	884:9	4	;
LEAF_NODE	885:0	885:0	2	}
FUNCTION_DEF	0:0	989:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	918:0	918:0	2	DECLAREcpFunc
LEAF_NODE	918:0	918:0	3	DECLAREcpFunc
PARAMETER_LIST	918:13	918:35	2	( cpBiasedContig2Contig )
LEAF_NODE	918:13	918:13	3	(
PARAMETER_DECL	918:14	918:14	3	cpBiasedContig2Contig
LEAF_NODE	918:14	918:14	4	cpBiasedContig2Contig
LEAF_NODE	918:35	918:35	3	)
LEAF_NODE	919:0	919:0	2	{
STATEMENTS	920:1	982:3	2	
SELECTION	920:1	920:15	3	
KEYWORD	920:1	920:1	4	if
LEAF_NODE	920:1	920:1	5	if
LEAF_NODE	920:4	920:4	4	(
CONDITION	920:5	920:5	4	spp == 1
EXPR	920:5	920:12	5	spp == 1
FIELD	920:5	920:5	6	spp
LEAF_NODE	920:5	920:5	7	spp
EQ_OPERATOR	920:9	920:9	6	==
LEAF_NODE	920:9	920:9	7	==
FIELD	920:12	920:12	6	1
LEAF_NODE	920:12	920:12	7	1
LEAF_NODE	920:13	920:13	4	)
STATEMENTS	920:15	982:1	4	
LEAF_NODE	920:15	920:15	5	{
STATEMENTS	921:2	981:2	5	
SIMPLE_DECL	921:2	921:43	6	tsize_t biasSize ; biasSize = TIFFScanlineSize ( bias ) ;
VAR_DECL	921:2	921:10	7	tsize_t biasSize ; biasSize = TIFFScanlineSize ( bias )
TYPE	921:2	921:2	8	tsize_t
TYPE_NAME	921:2	921:2	9	tsize_t
LEAF_NODE	921:2	921:2	10	tsize_t
NAME	921:10	921:10	8	biasSize
LEAF_NODE	921:10	921:10	9	biasSize
LEAF_NODE	0:0	0:0	8	;
INIT	921:10	921:10	8	biasSize = TIFFScanlineSize ( bias )
ASSIGN	921:10	921:21	9	biasSize = TIFFScanlineSize ( bias )
LVAL	921:10	921:10	10	biasSize
NAME	921:10	921:10	11	biasSize
LEAF_NODE	921:10	921:10	12	biasSize
ASSIGN_OP	921:19	921:19	10	=
LEAF_NODE	921:19	921:19	11	=
RVAL	921:21	921:21	10	TIFFScanlineSize ( bias )
FUNCTION_CALL	921:21	921:42	11	TIFFScanlineSize ( bias )
CALLEE	921:21	921:21	12	TIFFScanlineSize
LEAF_NODE	921:21	921:21	13	TIFFScanlineSize
LEAF_NODE	921:37	921:37	12	(
ARGUMENT	921:38	921:38	12	bias
FIELD	921:38	921:38	13	bias
LEAF_NODE	921:38	921:38	14	bias
LEAF_NODE	921:42	921:42	12	)
LEAF_NODE	921:43	921:43	7	;
SIMPLE_DECL	922:2	922:40	6	tsize_t bufSize ; bufSize = TIFFScanlineSize ( in ) ;
VAR_DECL	922:2	922:10	7	tsize_t bufSize ; bufSize = TIFFScanlineSize ( in )
TYPE	922:2	922:2	8	tsize_t
TYPE_NAME	922:2	922:2	9	tsize_t
LEAF_NODE	922:2	922:2	10	tsize_t
NAME	922:10	922:10	8	bufSize
LEAF_NODE	922:10	922:10	9	bufSize
LEAF_NODE	0:0	0:0	8	;
INIT	922:10	922:10	8	bufSize = TIFFScanlineSize ( in )
ASSIGN	922:10	922:20	9	bufSize = TIFFScanlineSize ( in )
LVAL	922:10	922:10	10	bufSize
NAME	922:10	922:10	11	bufSize
LEAF_NODE	922:10	922:10	12	bufSize
ASSIGN_OP	922:18	922:18	10	=
LEAF_NODE	922:18	922:18	11	=
RVAL	922:20	922:20	10	TIFFScanlineSize ( in )
FUNCTION_CALL	922:20	922:39	11	TIFFScanlineSize ( in )
CALLEE	922:20	922:20	12	TIFFScanlineSize
LEAF_NODE	922:20	922:20	13	TIFFScanlineSize
LEAF_NODE	922:36	922:36	12	(
ARGUMENT	922:37	922:37	12	in
FIELD	922:37	922:37	13	in
LEAF_NODE	922:37	922:37	14	in
LEAF_NODE	922:39	922:39	12	)
LEAF_NODE	922:40	922:40	7	;
SIMPLE_DECL	923:2	923:22	6	tdata_t buf , tdata_t biasBuf ;
INIT_DECL_LIST	923:2	923:2	7	tdata_t buf , tdata_t biasBuf
VAR_DECL	923:2	923:10	8	tdata_t buf
TYPE	923:2	923:2	9	tdata_t
TYPE_NAME	923:2	923:2	10	tdata_t
LEAF_NODE	923:2	923:2	11	tdata_t
NAME	923:10	923:10	9	buf
LEAF_NODE	923:10	923:10	10	buf
LEAF_NODE	923:13	923:13	8	,
VAR_DECL	923:2	923:15	8	tdata_t biasBuf
TYPE	923:2	923:2	9	tdata_t
TYPE_NAME	923:2	923:2	10	tdata_t
LEAF_NODE	923:2	923:2	11	tdata_t
NAME	923:15	923:15	9	biasBuf
LEAF_NODE	923:15	923:15	10	biasBuf
LEAF_NODE	923:22	923:22	7	;
SIMPLE_DECL	924:2	924:38	6	uint32 biasWidth ; biasWidth = 0 , uint32 biasLength ; biasLength = 0 ;
INIT_DECL_LIST	924:2	924:2	7	uint32 biasWidth ; biasWidth = 0 , uint32 biasLength ; biasLength = 0
VAR_DECL	924:2	924:9	8	uint32 biasWidth ; biasWidth = 0
TYPE	924:2	924:2	9	uint32
TYPE_NAME	924:2	924:2	10	uint32
LEAF_NODE	924:2	924:2	11	uint32
NAME	924:9	924:9	9	biasWidth
LEAF_NODE	924:9	924:9	10	biasWidth
LEAF_NODE	0:0	0:0	9	;
INIT	924:9	924:9	9	biasWidth = 0
ASSIGN	924:9	924:21	10	biasWidth = 0
LVAL	924:9	924:9	11	biasWidth
NAME	924:9	924:9	12	biasWidth
LEAF_NODE	924:9	924:9	13	biasWidth
ASSIGN_OP	924:19	924:19	11	=
LEAF_NODE	924:19	924:19	12	=
RVAL	924:21	924:21	11	0
FIELD	924:21	924:21	12	0
LEAF_NODE	924:21	924:21	13	0
LEAF_NODE	924:22	924:22	8	,
VAR_DECL	924:2	924:24	8	uint32 biasLength ; biasLength = 0
TYPE	924:2	924:2	9	uint32
TYPE_NAME	924:2	924:2	10	uint32
LEAF_NODE	924:2	924:2	11	uint32
NAME	924:24	924:24	9	biasLength
LEAF_NODE	924:24	924:24	10	biasLength
LEAF_NODE	0:0	0:0	9	;
INIT	924:24	924:24	9	biasLength = 0
ASSIGN	924:24	924:37	10	biasLength = 0
LVAL	924:24	924:24	11	biasLength
NAME	924:24	924:24	12	biasLength
LEAF_NODE	924:24	924:24	13	biasLength
ASSIGN_OP	924:35	924:35	11	=
LEAF_NODE	924:35	924:35	12	=
RVAL	924:37	924:37	11	0
FIELD	924:37	924:37	12	0
LEAF_NODE	924:37	924:37	13	0
LEAF_NODE	924:38	924:38	7	;
EXPR_STATEMENT	925:2	925:52	6	TIFFGetField ( bias , TIFFTAG_IMAGEWIDTH , & biasWidth ) ;
EXPR	925:2	925:2	7	TIFFGetField ( bias , TIFFTAG_IMAGEWIDTH , & biasWidth )
FUNCTION_CALL	925:2	925:51	8	TIFFGetField ( bias , TIFFTAG_IMAGEWIDTH , & biasWidth )
CALLEE	925:2	925:2	9	TIFFGetField
LEAF_NODE	925:2	925:2	10	TIFFGetField
LEAF_NODE	925:14	925:14	9	(
ARGUMENT	925:15	925:15	9	bias
FIELD	925:15	925:15	10	bias
LEAF_NODE	925:15	925:15	11	bias
LEAF_NODE	925:19	925:19	9	,
ARGUMENT	925:21	925:21	9	TIFFTAG_IMAGEWIDTH
FIELD	925:21	925:21	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	925:21	925:21	11	TIFFTAG_IMAGEWIDTH
LEAF_NODE	925:39	925:39	9	,
ARGUMENT	925:41	925:41	9	& biasWidth
UNARY_EXPR	925:41	925:42	10	& biasWidth
UNARY_OPERATOR	925:41	925:41	11	&
LEAF_NODE	925:41	925:41	12	&
FIELD	925:42	925:42	11	biasWidth
LEAF_NODE	925:42	925:42	12	biasWidth
LEAF_NODE	925:51	925:51	9	)
LEAF_NODE	925:52	925:52	7	;
EXPR_STATEMENT	926:2	926:54	6	TIFFGetField ( bias , TIFFTAG_IMAGELENGTH , & biasLength ) ;
EXPR	926:2	926:2	7	TIFFGetField ( bias , TIFFTAG_IMAGELENGTH , & biasLength )
FUNCTION_CALL	926:2	926:53	8	TIFFGetField ( bias , TIFFTAG_IMAGELENGTH , & biasLength )
CALLEE	926:2	926:2	9	TIFFGetField
LEAF_NODE	926:2	926:2	10	TIFFGetField
LEAF_NODE	926:14	926:14	9	(
ARGUMENT	926:15	926:15	9	bias
FIELD	926:15	926:15	10	bias
LEAF_NODE	926:15	926:15	11	bias
LEAF_NODE	926:19	926:19	9	,
ARGUMENT	926:21	926:21	9	TIFFTAG_IMAGELENGTH
FIELD	926:21	926:21	10	TIFFTAG_IMAGELENGTH
LEAF_NODE	926:21	926:21	11	TIFFTAG_IMAGELENGTH
LEAF_NODE	926:40	926:40	9	,
ARGUMENT	926:42	926:42	9	& biasLength
UNARY_EXPR	926:42	926:43	10	& biasLength
UNARY_OPERATOR	926:42	926:42	11	&
LEAF_NODE	926:42	926:42	12	&
FIELD	926:43	926:43	11	biasLength
LEAF_NODE	926:43	926:43	12	biasLength
LEAF_NODE	926:53	926:53	9	)
LEAF_NODE	926:54	926:54	7	;
SELECTION	927:2	928:60	6	
KEYWORD	927:2	927:2	7	if
LEAF_NODE	927:2	927:2	8	if
LEAF_NODE	927:5	927:5	7	(
CONDITION	927:6	927:6	7	biasSize == bufSize && imagelength == biasLength && imagewidth == biasWidth
EXPR	927:6	927:6	8	biasSize == bufSize && imagelength == biasLength && imagewidth == biasWidth
AND	927:6	928:6	9	biasSize == bufSize && imagelength == biasLength && imagewidth == biasWidth
EXPR	927:6	927:18	10	biasSize == bufSize
FIELD	927:6	927:6	11	biasSize
LEAF_NODE	927:6	927:6	12	biasSize
EQ_OPERATOR	927:15	927:15	11	==
LEAF_NODE	927:15	927:15	12	==
FIELD	927:18	927:18	11	bufSize
LEAF_NODE	927:18	927:18	12	bufSize
LEAF_NODE	927:26	927:26	10	&&
EXPR	928:6	928:6	10	imagelength == biasLength && imagewidth == biasWidth
AND	928:6	928:35	11	imagelength == biasLength && imagewidth == biasWidth
EXPR	928:6	928:21	12	imagelength == biasLength
FIELD	928:6	928:6	13	imagelength
LEAF_NODE	928:6	928:6	14	imagelength
EQ_OPERATOR	928:18	928:18	13	==
LEAF_NODE	928:18	928:18	14	==
FIELD	928:21	928:21	13	biasLength
LEAF_NODE	928:21	928:21	14	biasLength
LEAF_NODE	928:32	928:32	12	&&
EXPR	928:35	928:49	12	imagewidth == biasWidth
FIELD	928:35	928:35	13	imagewidth
LEAF_NODE	928:35	928:35	14	imagewidth
EQ_OPERATOR	928:46	928:46	13	==
LEAF_NODE	928:46	928:46	14	==
FIELD	928:49	928:49	13	biasWidth
LEAF_NODE	928:49	928:49	14	biasWidth
LEAF_NODE	928:58	928:58	7	)
STATEMENTS	928:60	976:2	7	
LEAF_NODE	928:60	928:60	8	{
STATEMENTS	929:3	970:5	8	
SIMPLE_DECL	929:3	929:24	9	uint16 sampleBits ; sampleBits = 0 ;
VAR_DECL	929:3	929:10	10	uint16 sampleBits ; sampleBits = 0
TYPE	929:3	929:3	11	uint16
TYPE_NAME	929:3	929:3	12	uint16
LEAF_NODE	929:3	929:3	13	uint16
NAME	929:10	929:10	11	sampleBits
LEAF_NODE	929:10	929:10	12	sampleBits
LEAF_NODE	0:0	0:0	11	;
INIT	929:10	929:10	11	sampleBits = 0
ASSIGN	929:10	929:23	12	sampleBits = 0
LVAL	929:10	929:10	13	sampleBits
NAME	929:10	929:10	14	sampleBits
LEAF_NODE	929:10	929:10	15	sampleBits
ASSIGN_OP	929:21	929:21	13	=
LEAF_NODE	929:21	929:21	14	=
RVAL	929:23	929:23	13	0
FIELD	929:23	929:23	14	0
LEAF_NODE	929:23	929:23	15	0
LEAF_NODE	929:24	929:24	10	;
SIMPLE_DECL	930:3	930:23	9	biasFn * subtractLine ;
VAR_DECL	930:3	930:11	10	biasFn * subtractLine
TYPE	930:3	930:10	11	biasFn *
TYPE_NAME	930:3	930:3	12	biasFn
LEAF_NODE	930:3	930:3	13	biasFn
POINTER	930:10	930:10	12	*
LEAF_NODE	930:10	930:10	13	*
NAME	930:11	930:11	11	subtractLine
LEAF_NODE	930:11	930:11	12	subtractLine
LEAF_NODE	930:23	930:23	10	;
EXPR_STATEMENT	931:3	931:55	9	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & sampleBits ) ;
EXPR	931:3	931:3	10	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & sampleBits )
FUNCTION_CALL	931:3	931:54	11	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & sampleBits )
CALLEE	931:3	931:3	12	TIFFGetField
LEAF_NODE	931:3	931:3	13	TIFFGetField
LEAF_NODE	931:15	931:15	12	(
ARGUMENT	931:16	931:16	12	in
FIELD	931:16	931:16	13	in
LEAF_NODE	931:16	931:16	14	in
LEAF_NODE	931:18	931:18	12	,
ARGUMENT	931:20	931:20	12	TIFFTAG_BITSPERSAMPLE
FIELD	931:20	931:20	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	931:20	931:20	14	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	931:41	931:41	12	,
ARGUMENT	931:43	931:43	12	& sampleBits
UNARY_EXPR	931:43	931:44	13	& sampleBits
UNARY_OPERATOR	931:43	931:43	14	&
LEAF_NODE	931:43	931:43	15	&
FIELD	931:44	931:44	14	sampleBits
LEAF_NODE	931:44	931:44	15	sampleBits
LEAF_NODE	931:54	931:54	12	)
LEAF_NODE	931:55	931:55	10	;
EXPR_STATEMENT	932:3	932:45	9	subtractLine = lineSubtractFn ( sampleBits ) ;
EXPR	932:3	932:3	10	subtractLine = lineSubtractFn ( sampleBits )
ASSIGN	932:3	932:18	11	subtractLine = lineSubtractFn ( sampleBits )
LVAL	932:3	932:3	12	subtractLine
FIELD	932:3	932:3	13	subtractLine
LEAF_NODE	932:3	932:3	14	subtractLine
ASSIGN_OP	932:16	932:16	12	=
LEAF_NODE	932:16	932:16	13	=
RVAL	932:18	932:18	12	lineSubtractFn ( sampleBits )
FUNCTION_CALL	932:18	932:44	13	lineSubtractFn ( sampleBits )
CALLEE	932:18	932:18	14	lineSubtractFn
LEAF_NODE	932:18	932:18	15	lineSubtractFn
LEAF_NODE	932:33	932:33	14	(
ARGUMENT	932:34	932:34	14	sampleBits
FIELD	932:34	932:34	15	sampleBits
LEAF_NODE	932:34	932:34	16	sampleBits
LEAF_NODE	932:44	932:44	14	)
LEAF_NODE	932:45	932:45	10	;
SELECTION	933:3	933:21	9	
KEYWORD	933:3	933:3	10	if
LEAF_NODE	933:3	933:3	11	if
LEAF_NODE	933:6	933:6	10	(
CONDITION	933:7	933:7	10	subtractLine
EXPR	933:7	933:7	11	subtractLine
FIELD	933:7	933:7	12	subtractLine
LEAF_NODE	933:7	933:7	13	subtractLine
LEAF_NODE	933:19	933:19	10	)
STATEMENTS	933:21	970:3	10	
LEAF_NODE	933:21	933:21	11	{
STATEMENTS	934:4	969:4	11	
SIMPLE_DECL	934:4	934:14	12	uint32 row ;
VAR_DECL	934:4	934:11	13	uint32 row
TYPE	934:4	934:4	14	uint32
TYPE_NAME	934:4	934:4	15	uint32
LEAF_NODE	934:4	934:4	16	uint32
NAME	934:11	934:11	14	row
LEAF_NODE	934:11	934:11	15	row
LEAF_NODE	934:14	934:14	13	;
EXPR_STATEMENT	935:4	935:30	12	buf = _TIFFmalloc ( bufSize ) ;
EXPR	935:4	935:4	13	buf = _TIFFmalloc ( bufSize )
ASSIGN	935:4	935:10	14	buf = _TIFFmalloc ( bufSize )
LVAL	935:4	935:4	15	buf
FIELD	935:4	935:4	16	buf
LEAF_NODE	935:4	935:4	17	buf
ASSIGN_OP	935:8	935:8	15	=
LEAF_NODE	935:8	935:8	16	=
RVAL	935:10	935:10	15	_TIFFmalloc ( bufSize )
FUNCTION_CALL	935:10	935:29	16	_TIFFmalloc ( bufSize )
CALLEE	935:10	935:10	17	_TIFFmalloc
LEAF_NODE	935:10	935:10	18	_TIFFmalloc
LEAF_NODE	935:21	935:21	17	(
ARGUMENT	935:22	935:22	17	bufSize
FIELD	935:22	935:22	18	bufSize
LEAF_NODE	935:22	935:22	19	bufSize
LEAF_NODE	935:29	935:29	17	)
LEAF_NODE	935:30	935:30	13	;
EXPR_STATEMENT	936:4	936:34	12	biasBuf = _TIFFmalloc ( bufSize ) ;
EXPR	936:4	936:4	13	biasBuf = _TIFFmalloc ( bufSize )
ASSIGN	936:4	936:14	14	biasBuf = _TIFFmalloc ( bufSize )
LVAL	936:4	936:4	15	biasBuf
FIELD	936:4	936:4	16	biasBuf
LEAF_NODE	936:4	936:4	17	biasBuf
ASSIGN_OP	936:12	936:12	15	=
LEAF_NODE	936:12	936:12	16	=
RVAL	936:14	936:14	15	_TIFFmalloc ( bufSize )
FUNCTION_CALL	936:14	936:33	16	_TIFFmalloc ( bufSize )
CALLEE	936:14	936:14	17	_TIFFmalloc
LEAF_NODE	936:14	936:14	18	_TIFFmalloc
LEAF_NODE	936:25	936:25	17	(
ARGUMENT	936:26	936:26	17	bufSize
FIELD	936:26	936:26	18	bufSize
LEAF_NODE	936:26	936:26	19	bufSize
LEAF_NODE	936:33	936:33	17	)
LEAF_NODE	936:34	936:34	13	;
ITERATION	937:4	937:44	12	
KEYWORD	937:4	937:4	13	for
LEAF_NODE	937:4	937:4	14	for
LEAF_NODE	937:8	937:8	13	(
FOR_INIT	937:9	937:16	13	row = 0 ;
EXPR	937:9	937:9	14	row = 0
ASSIGN	937:9	937:15	15	row = 0
LVAL	937:9	937:9	16	row
FIELD	937:9	937:9	17	row
LEAF_NODE	937:9	937:9	18	row
ASSIGN_OP	937:13	937:13	16	=
LEAF_NODE	937:13	937:13	17	=
RVAL	937:15	937:15	16	0
FIELD	937:15	937:15	17	0
LEAF_NODE	937:15	937:15	18	0
LEAF_NODE	937:16	937:16	14	;
CONDITION	937:18	937:18	13	row < imagelength
EXPR	937:18	937:24	14	row < imagelength
FIELD	937:18	937:18	15	row
LEAF_NODE	937:18	937:18	16	row
REL_OPERATOR	937:22	937:22	15	<
LEAF_NODE	937:22	937:22	16	<
FIELD	937:24	937:24	15	imagelength
LEAF_NODE	937:24	937:24	16	imagelength
LEAF_NODE	937:35	937:35	13	;
FOR_EXPR	937:37	937:37	13	row ++
EXPR	937:37	937:37	14	row ++
FIELD	937:37	937:40	15	row ++
LEAF_NODE	937:37	937:37	16	row
LEAF_NODE	937:40	937:40	16	++
LEAF_NODE	937:42	937:42	13	)
STATEMENTS	937:44	959:4	13	
LEAF_NODE	937:44	937:44	14	{
STATEMENTS	938:5	953:5	14	
SELECTION	938:5	939:21	15	
KEYWORD	938:5	938:5	16	if
LEAF_NODE	938:5	938:5	17	if
LEAF_NODE	938:8	938:8	16	(
CONDITION	938:9	938:9	16	TIFFReadScanline ( in , buf , row , 0 ) < 0 && ! ignore
EXPR	938:9	938:9	17	TIFFReadScanline ( in , buf , row , 0 ) < 0 && ! ignore
AND	938:9	939:12	18	TIFFReadScanline ( in , buf , row , 0 ) < 0 && ! ignore
EXPR	938:9	938:45	19	TIFFReadScanline ( in , buf , row , 0 ) < 0
FUNCTION_CALL	938:9	938:41	20	TIFFReadScanline ( in , buf , row , 0 )
CALLEE	938:9	938:9	21	TIFFReadScanline
LEAF_NODE	938:9	938:9	22	TIFFReadScanline
LEAF_NODE	938:25	938:25	21	(
ARGUMENT	938:26	938:26	21	in
FIELD	938:26	938:26	22	in
LEAF_NODE	938:26	938:26	23	in
LEAF_NODE	938:28	938:28	21	,
ARGUMENT	938:30	938:30	21	buf
FIELD	938:30	938:30	22	buf
LEAF_NODE	938:30	938:30	23	buf
LEAF_NODE	938:33	938:33	21	,
ARGUMENT	938:35	938:35	21	row
FIELD	938:35	938:35	22	row
LEAF_NODE	938:35	938:35	23	row
LEAF_NODE	938:38	938:38	21	,
ARGUMENT	938:40	938:40	21	0
FIELD	938:40	938:40	22	0
LEAF_NODE	938:40	938:40	23	0
LEAF_NODE	938:41	938:41	21	)
REL_OPERATOR	938:43	938:43	20	<
LEAF_NODE	938:43	938:43	21	<
FIELD	938:45	938:45	20	0
LEAF_NODE	938:45	938:45	21	0
LEAF_NODE	939:9	939:9	19	&&
EXPR	939:12	939:12	19	! ignore
UNARY_EXPR	939:12	939:13	20	! ignore
UNARY_OPERATOR	939:12	939:12	21	!
LEAF_NODE	939:12	939:12	22	!
FIELD	939:13	939:13	21	ignore
LEAF_NODE	939:13	939:13	22	ignore
LEAF_NODE	939:19	939:19	16	)
STATEMENTS	939:21	944:5	16	
LEAF_NODE	939:21	939:21	17	{
STATEMENTS	940:6	943:6	17	
EXPR_STATEMENT	940:6	942:30	18	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row ) ;
EXPR	940:6	940:6	19	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	940:6	942:29	20	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
CALLEE	940:6	940:6	21	TIFFError
LEAF_NODE	940:6	940:6	22	TIFFError
LEAF_NODE	940:15	940:15	21	(
ARGUMENT	940:16	940:16	21	TIFFFileName ( in )
FUNCTION_CALL	940:16	940:31	22	TIFFFileName ( in )
CALLEE	940:16	940:16	23	TIFFFileName
LEAF_NODE	940:16	940:16	24	TIFFFileName
LEAF_NODE	940:28	940:28	23	(
ARGUMENT	940:29	940:29	23	in
FIELD	940:29	940:29	24	in
LEAF_NODE	940:29	940:29	25	in
LEAF_NODE	940:31	940:31	23	)
LEAF_NODE	940:32	940:32	21	,
ARGUMENT	941:10	941:10	21	"Error, can't read scanline %lu"
FIELD	941:10	941:10	22	"Error, can't read scanline %lu"
LEAF_NODE	941:10	941:10	23	"Error, can't read scanline %lu"
LEAF_NODE	941:42	941:42	21	,
ARGUMENT	942:10	942:26	21	( unsigned long ) row
LEAF_NODE	942:10	942:10	22	(
TYPE_NAME	942:11	942:20	22	unsigned long
LEAF_NODE	942:11	942:11	23	unsigned
LEAF_NODE	942:20	942:20	23	long
LEAF_NODE	942:24	942:24	22	)
FIELD	942:26	942:26	22	row
LEAF_NODE	942:26	942:26	23	row
LEAF_NODE	942:29	942:29	21	)
LEAF_NODE	942:30	942:30	19	;
JUMP_STATEMENT	943:6	943:14	18	goto bad ;
KEYWORD	943:6	943:6	19	goto
LEAF_NODE	943:6	943:6	20	goto
DESTINATION	943:11	943:11	19	bad
LEAF_NODE	943:11	943:11	20	bad
LEAF_NODE	943:14	943:14	19	;
LEAF_NODE	944:5	944:5	17	}
SELECTION	945:5	946:21	15	
KEYWORD	945:5	945:5	16	if
LEAF_NODE	945:5	945:5	17	if
LEAF_NODE	945:8	945:8	16	(
CONDITION	945:9	945:9	16	TIFFReadScanline ( bias , biasBuf , row , 0 ) < 0 && ! ignore
EXPR	945:9	945:9	17	TIFFReadScanline ( bias , biasBuf , row , 0 ) < 0 && ! ignore
AND	945:9	946:12	18	TIFFReadScanline ( bias , biasBuf , row , 0 ) < 0 && ! ignore
EXPR	945:9	945:51	19	TIFFReadScanline ( bias , biasBuf , row , 0 ) < 0
FUNCTION_CALL	945:9	945:47	20	TIFFReadScanline ( bias , biasBuf , row , 0 )
CALLEE	945:9	945:9	21	TIFFReadScanline
LEAF_NODE	945:9	945:9	22	TIFFReadScanline
LEAF_NODE	945:25	945:25	21	(
ARGUMENT	945:26	945:26	21	bias
FIELD	945:26	945:26	22	bias
LEAF_NODE	945:26	945:26	23	bias
LEAF_NODE	945:30	945:30	21	,
ARGUMENT	945:32	945:32	21	biasBuf
FIELD	945:32	945:32	22	biasBuf
LEAF_NODE	945:32	945:32	23	biasBuf
LEAF_NODE	945:39	945:39	21	,
ARGUMENT	945:41	945:41	21	row
FIELD	945:41	945:41	22	row
LEAF_NODE	945:41	945:41	23	row
LEAF_NODE	945:44	945:44	21	,
ARGUMENT	945:46	945:46	21	0
FIELD	945:46	945:46	22	0
LEAF_NODE	945:46	945:46	23	0
LEAF_NODE	945:47	945:47	21	)
REL_OPERATOR	945:49	945:49	20	<
LEAF_NODE	945:49	945:49	21	<
FIELD	945:51	945:51	20	0
LEAF_NODE	945:51	945:51	21	0
LEAF_NODE	946:9	946:9	19	&&
EXPR	946:12	946:12	19	! ignore
UNARY_EXPR	946:12	946:13	20	! ignore
UNARY_OPERATOR	946:12	946:12	21	!
LEAF_NODE	946:12	946:12	22	!
FIELD	946:13	946:13	21	ignore
LEAF_NODE	946:13	946:13	22	ignore
LEAF_NODE	946:19	946:19	16	)
STATEMENTS	946:21	951:5	16	
LEAF_NODE	946:21	946:21	17	{
STATEMENTS	947:6	950:6	17	
EXPR_STATEMENT	947:6	949:30	18	TIFFError ( TIFFFileName ( in ) , "Error, can't read biased scanline %lu" , ( unsigned long ) row ) ;
EXPR	947:6	947:6	19	TIFFError ( TIFFFileName ( in ) , "Error, can't read biased scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	947:6	949:29	20	TIFFError ( TIFFFileName ( in ) , "Error, can't read biased scanline %lu" , ( unsigned long ) row )
CALLEE	947:6	947:6	21	TIFFError
LEAF_NODE	947:6	947:6	22	TIFFError
LEAF_NODE	947:15	947:15	21	(
ARGUMENT	947:16	947:16	21	TIFFFileName ( in )
FUNCTION_CALL	947:16	947:31	22	TIFFFileName ( in )
CALLEE	947:16	947:16	23	TIFFFileName
LEAF_NODE	947:16	947:16	24	TIFFFileName
LEAF_NODE	947:28	947:28	23	(
ARGUMENT	947:29	947:29	23	in
FIELD	947:29	947:29	24	in
LEAF_NODE	947:29	947:29	25	in
LEAF_NODE	947:31	947:31	23	)
LEAF_NODE	947:32	947:32	21	,
ARGUMENT	948:10	948:10	21	"Error, can't read biased scanline %lu"
FIELD	948:10	948:10	22	"Error, can't read biased scanline %lu"
LEAF_NODE	948:10	948:10	23	"Error, can't read biased scanline %lu"
LEAF_NODE	948:49	948:49	21	,
ARGUMENT	949:10	949:26	21	( unsigned long ) row
LEAF_NODE	949:10	949:10	22	(
TYPE_NAME	949:11	949:20	22	unsigned long
LEAF_NODE	949:11	949:11	23	unsigned
LEAF_NODE	949:20	949:20	23	long
LEAF_NODE	949:24	949:24	22	)
FIELD	949:26	949:26	22	row
LEAF_NODE	949:26	949:26	23	row
LEAF_NODE	949:29	949:29	21	)
LEAF_NODE	949:30	949:30	19	;
JUMP_STATEMENT	950:6	950:14	18	goto bad ;
KEYWORD	950:6	950:6	19	goto
LEAF_NODE	950:6	950:6	20	goto
DESTINATION	950:11	950:11	19	bad
LEAF_NODE	950:11	950:11	20	bad
LEAF_NODE	950:14	950:14	19	;
LEAF_NODE	951:5	951:5	17	}
EXPR_STATEMENT	952:5	952:44	15	subtractLine ( buf , biasBuf , imagewidth ) ;
EXPR	952:5	952:5	16	subtractLine ( buf , biasBuf , imagewidth )
FUNCTION_CALL	952:5	952:43	17	subtractLine ( buf , biasBuf , imagewidth )
CALLEE	952:5	952:5	18	subtractLine
LEAF_NODE	952:5	952:5	19	subtractLine
LEAF_NODE	952:18	952:18	18	(
ARGUMENT	952:19	952:19	18	buf
FIELD	952:19	952:19	19	buf
LEAF_NODE	952:19	952:19	20	buf
LEAF_NODE	952:22	952:22	18	,
ARGUMENT	952:24	952:24	18	biasBuf
FIELD	952:24	952:24	19	biasBuf
LEAF_NODE	952:24	952:24	20	biasBuf
LEAF_NODE	952:31	952:31	18	,
ARGUMENT	952:33	952:33	18	imagewidth
FIELD	952:33	952:33	19	imagewidth
LEAF_NODE	952:33	952:33	20	imagewidth
LEAF_NODE	952:43	952:43	18	)
LEAF_NODE	952:44	952:44	16	;
SELECTION	953:5	953:50	15	
KEYWORD	953:5	953:5	16	if
LEAF_NODE	953:5	953:5	17	if
LEAF_NODE	953:8	953:8	16	(
CONDITION	953:9	953:9	16	TIFFWriteScanline ( out , buf , row , 0 ) < 0
EXPR	953:9	953:47	17	TIFFWriteScanline ( out , buf , row , 0 ) < 0
FUNCTION_CALL	953:9	953:43	18	TIFFWriteScanline ( out , buf , row , 0 )
CALLEE	953:9	953:9	19	TIFFWriteScanline
LEAF_NODE	953:9	953:9	20	TIFFWriteScanline
LEAF_NODE	953:26	953:26	19	(
ARGUMENT	953:27	953:27	19	out
FIELD	953:27	953:27	20	out
LEAF_NODE	953:27	953:27	21	out
LEAF_NODE	953:30	953:30	19	,
ARGUMENT	953:32	953:32	19	buf
FIELD	953:32	953:32	20	buf
LEAF_NODE	953:32	953:32	21	buf
LEAF_NODE	953:35	953:35	19	,
ARGUMENT	953:37	953:37	19	row
FIELD	953:37	953:37	20	row
LEAF_NODE	953:37	953:37	21	row
LEAF_NODE	953:40	953:40	19	,
ARGUMENT	953:42	953:42	19	0
FIELD	953:42	953:42	20	0
LEAF_NODE	953:42	953:42	21	0
LEAF_NODE	953:43	953:43	19	)
REL_OPERATOR	953:45	953:45	18	<
LEAF_NODE	953:45	953:45	19	<
FIELD	953:47	953:47	18	0
LEAF_NODE	953:47	953:47	19	0
LEAF_NODE	953:48	953:48	16	)
STATEMENTS	953:50	958:5	16	
LEAF_NODE	953:50	953:50	17	{
STATEMENTS	954:6	957:6	17	
EXPR_STATEMENT	954:6	956:30	18	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row ) ;
EXPR	954:6	954:6	19	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	954:6	956:29	20	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
CALLEE	954:6	954:6	21	TIFFError
LEAF_NODE	954:6	954:6	22	TIFFError
LEAF_NODE	954:15	954:15	21	(
ARGUMENT	954:16	954:16	21	TIFFFileName ( out )
FUNCTION_CALL	954:16	954:32	22	TIFFFileName ( out )
CALLEE	954:16	954:16	23	TIFFFileName
LEAF_NODE	954:16	954:16	24	TIFFFileName
LEAF_NODE	954:28	954:28	23	(
ARGUMENT	954:29	954:29	23	out
FIELD	954:29	954:29	24	out
LEAF_NODE	954:29	954:29	25	out
LEAF_NODE	954:32	954:32	23	)
LEAF_NODE	954:33	954:33	21	,
ARGUMENT	955:10	955:10	21	"Error, can't write scanline %lu"
FIELD	955:10	955:10	22	"Error, can't write scanline %lu"
LEAF_NODE	955:10	955:10	23	"Error, can't write scanline %lu"
LEAF_NODE	955:43	955:43	21	,
ARGUMENT	956:10	956:26	21	( unsigned long ) row
LEAF_NODE	956:10	956:10	22	(
TYPE_NAME	956:11	956:20	22	unsigned long
LEAF_NODE	956:11	956:11	23	unsigned
LEAF_NODE	956:20	956:20	23	long
LEAF_NODE	956:24	956:24	22	)
FIELD	956:26	956:26	22	row
LEAF_NODE	956:26	956:26	23	row
LEAF_NODE	956:29	956:29	21	)
LEAF_NODE	956:30	956:30	19	;
JUMP_STATEMENT	957:6	957:14	18	goto bad ;
KEYWORD	957:6	957:6	19	goto
LEAF_NODE	957:6	957:6	20	goto
DESTINATION	957:11	957:11	19	bad
LEAF_NODE	957:11	957:11	20	bad
LEAF_NODE	957:14	957:14	19	;
LEAF_NODE	958:5	958:5	17	}
LEAF_NODE	959:4	959:4	14	}
EXPR_STATEMENT	961:4	961:18	12	_TIFFfree ( buf ) ;
EXPR	961:4	961:4	13	_TIFFfree ( buf )
FUNCTION_CALL	961:4	961:17	14	_TIFFfree ( buf )
CALLEE	961:4	961:4	15	_TIFFfree
LEAF_NODE	961:4	961:4	16	_TIFFfree
LEAF_NODE	961:13	961:13	15	(
ARGUMENT	961:14	961:14	15	buf
FIELD	961:14	961:14	16	buf
LEAF_NODE	961:14	961:14	17	buf
LEAF_NODE	961:17	961:17	15	)
LEAF_NODE	961:18	961:18	13	;
EXPR_STATEMENT	962:4	962:22	12	_TIFFfree ( biasBuf ) ;
EXPR	962:4	962:4	13	_TIFFfree ( biasBuf )
FUNCTION_CALL	962:4	962:21	14	_TIFFfree ( biasBuf )
CALLEE	962:4	962:4	15	_TIFFfree
LEAF_NODE	962:4	962:4	16	_TIFFfree
LEAF_NODE	962:13	962:13	15	(
ARGUMENT	962:14	962:14	15	biasBuf
FIELD	962:14	962:14	16	biasBuf
LEAF_NODE	962:14	962:14	17	biasBuf
LEAF_NODE	962:21	962:21	15	)
LEAF_NODE	962:22	962:22	13	;
EXPR_STATEMENT	963:4	964:35	12	TIFFSetDirectory ( bias , TIFFCurrentDirectory ( bias ) ) ;
EXPR	963:4	963:4	13	TIFFSetDirectory ( bias , TIFFCurrentDirectory ( bias ) )
FUNCTION_CALL	963:4	964:34	14	TIFFSetDirectory ( bias , TIFFCurrentDirectory ( bias ) )
CALLEE	963:4	963:4	15	TIFFSetDirectory
LEAF_NODE	963:4	963:4	16	TIFFSetDirectory
LEAF_NODE	963:20	963:20	15	(
ARGUMENT	963:21	963:21	15	bias
FIELD	963:21	963:21	16	bias
LEAF_NODE	963:21	963:21	17	bias
LEAF_NODE	963:25	963:25	15	,
ARGUMENT	964:8	964:8	15	TIFFCurrentDirectory ( bias )
FUNCTION_CALL	964:8	964:33	16	TIFFCurrentDirectory ( bias )
CALLEE	964:8	964:8	17	TIFFCurrentDirectory
LEAF_NODE	964:8	964:8	18	TIFFCurrentDirectory
LEAF_NODE	964:28	964:28	17	(
ARGUMENT	964:29	964:29	17	bias
FIELD	964:29	964:29	18	bias
LEAF_NODE	964:29	964:29	19	bias
LEAF_NODE	964:33	964:33	17	)
LEAF_NODE	964:34	964:34	15	)
LEAF_NODE	964:35	964:35	13	;
JUMP_STATEMENT	965:4	965:12	12	return 1 ;
KEYWORD	965:4	965:4	13	return
LEAF_NODE	965:4	965:4	14	return
DESTINATION	965:11	965:11	13	1
EXPR	965:11	965:11	14	1
FIELD	965:11	965:11	15	1
LEAF_NODE	965:11	965:11	16	1
LEAF_NODE	965:12	965:12	13	;
LABEL	966:0	966:3	12	bad :
LEAF_NODE	966:0	966:0	13	bad
LEAF_NODE	966:3	966:3	13	:
EXPR_STATEMENT	967:4	967:18	12	_TIFFfree ( buf ) ;
EXPR	967:4	967:4	13	_TIFFfree ( buf )
FUNCTION_CALL	967:4	967:17	14	_TIFFfree ( buf )
CALLEE	967:4	967:4	15	_TIFFfree
LEAF_NODE	967:4	967:4	16	_TIFFfree
LEAF_NODE	967:13	967:13	15	(
ARGUMENT	967:14	967:14	15	buf
FIELD	967:14	967:14	16	buf
LEAF_NODE	967:14	967:14	17	buf
LEAF_NODE	967:17	967:17	15	)
LEAF_NODE	967:18	967:18	13	;
EXPR_STATEMENT	968:4	968:22	12	_TIFFfree ( biasBuf ) ;
EXPR	968:4	968:4	13	_TIFFfree ( biasBuf )
FUNCTION_CALL	968:4	968:21	14	_TIFFfree ( biasBuf )
CALLEE	968:4	968:4	15	_TIFFfree
LEAF_NODE	968:4	968:4	16	_TIFFfree
LEAF_NODE	968:13	968:13	15	(
ARGUMENT	968:14	968:14	15	biasBuf
FIELD	968:14	968:14	16	biasBuf
LEAF_NODE	968:14	968:14	17	biasBuf
LEAF_NODE	968:21	968:21	15	)
LEAF_NODE	968:22	968:22	13	;
JUMP_STATEMENT	969:4	969:12	12	return 0 ;
KEYWORD	969:4	969:4	13	return
LEAF_NODE	969:4	969:4	14	return
DESTINATION	969:11	969:11	13	0
EXPR	969:11	969:11	14	0
FIELD	969:11	969:11	15	0
LEAF_NODE	969:11	969:11	16	0
LEAF_NODE	969:12	969:12	13	;
LEAF_NODE	970:3	970:3	11	}
SELECTION	970:5	970:10	9	
KEYWORD	970:5	970:5	10	else
LEAF_NODE	970:5	970:5	11	else
STATEMENTS	970:10	975:3	10	
LEAF_NODE	970:10	970:10	11	{
STATEMENTS	971:4	974:4	11	
EXPR_STATEMENT	971:4	973:19	12	TIFFError ( TIFFFileName ( in ) , "No support for biasing %d bit pixels\n" , sampleBits ) ;
EXPR	971:4	971:4	13	TIFFError ( TIFFFileName ( in ) , "No support for biasing %d bit pixels\n" , sampleBits )
FUNCTION_CALL	971:4	973:18	14	TIFFError ( TIFFFileName ( in ) , "No support for biasing %d bit pixels\n" , sampleBits )
CALLEE	971:4	971:4	15	TIFFError
LEAF_NODE	971:4	971:4	16	TIFFError
LEAF_NODE	971:13	971:13	15	(
ARGUMENT	971:14	971:14	15	TIFFFileName ( in )
FUNCTION_CALL	971:14	971:29	16	TIFFFileName ( in )
CALLEE	971:14	971:14	17	TIFFFileName
LEAF_NODE	971:14	971:14	18	TIFFFileName
LEAF_NODE	971:26	971:26	17	(
ARGUMENT	971:27	971:27	17	in
FIELD	971:27	971:27	18	in
LEAF_NODE	971:27	971:27	19	in
LEAF_NODE	971:29	971:29	17	)
LEAF_NODE	971:30	971:30	15	,
ARGUMENT	972:8	972:8	15	"No support for biasing %d bit pixels\n"
FIELD	972:8	972:8	16	"No support for biasing %d bit pixels\n"
LEAF_NODE	972:8	972:8	17	"No support for biasing %d bit pixels\n"
LEAF_NODE	972:48	972:48	15	,
ARGUMENT	973:8	973:8	15	sampleBits
FIELD	973:8	973:8	16	sampleBits
LEAF_NODE	973:8	973:8	17	sampleBits
LEAF_NODE	973:18	973:18	15	)
LEAF_NODE	973:19	973:19	13	;
JUMP_STATEMENT	974:4	974:12	12	return 0 ;
KEYWORD	974:4	974:4	13	return
LEAF_NODE	974:4	974:4	14	return
DESTINATION	974:11	974:11	13	0
EXPR	974:11	974:11	14	0
FIELD	974:11	974:11	15	0
LEAF_NODE	974:11	974:11	16	0
LEAF_NODE	974:12	974:12	13	;
LEAF_NODE	975:3	975:3	11	}
LEAF_NODE	976:2	976:2	8	}
EXPR_STATEMENT	977:2	980:49	6	TIFFError ( TIFFFileName ( in ) , "Bias image %s,%d\nis not the same size as %s,%d\n" , TIFFFileName ( bias ) , TIFFCurrentDirectory ( bias ) , TIFFFileName ( in ) , TIFFCurrentDirectory ( in ) ) ;
EXPR	977:2	977:2	7	TIFFError ( TIFFFileName ( in ) , "Bias image %s,%d\nis not the same size as %s,%d\n" , TIFFFileName ( bias ) , TIFFCurrentDirectory ( bias ) , TIFFFileName ( in ) , TIFFCurrentDirectory ( in ) )
FUNCTION_CALL	977:2	980:48	8	TIFFError ( TIFFFileName ( in ) , "Bias image %s,%d\nis not the same size as %s,%d\n" , TIFFFileName ( bias ) , TIFFCurrentDirectory ( bias ) , TIFFFileName ( in ) , TIFFCurrentDirectory ( in ) )
CALLEE	977:2	977:2	9	TIFFError
LEAF_NODE	977:2	977:2	10	TIFFError
LEAF_NODE	977:11	977:11	9	(
ARGUMENT	977:12	977:12	9	TIFFFileName ( in )
FUNCTION_CALL	977:12	977:27	10	TIFFFileName ( in )
CALLEE	977:12	977:12	11	TIFFFileName
LEAF_NODE	977:12	977:12	12	TIFFFileName
LEAF_NODE	977:24	977:24	11	(
ARGUMENT	977:25	977:25	11	in
FIELD	977:25	977:25	12	in
LEAF_NODE	977:25	977:25	13	in
LEAF_NODE	977:27	977:27	11	)
LEAF_NODE	977:28	977:28	9	,
ARGUMENT	978:6	978:6	9	"Bias image %s,%d\nis not the same size as %s,%d\n"
FIELD	978:6	978:6	10	"Bias image %s,%d\nis not the same size as %s,%d\n"
LEAF_NODE	978:6	978:6	11	"Bias image %s,%d\nis not the same size as %s,%d\n"
LEAF_NODE	978:57	978:57	9	,
ARGUMENT	979:6	979:6	9	TIFFFileName ( bias )
FUNCTION_CALL	979:6	979:23	10	TIFFFileName ( bias )
CALLEE	979:6	979:6	11	TIFFFileName
LEAF_NODE	979:6	979:6	12	TIFFFileName
LEAF_NODE	979:18	979:18	11	(
ARGUMENT	979:19	979:19	11	bias
FIELD	979:19	979:19	12	bias
LEAF_NODE	979:19	979:19	13	bias
LEAF_NODE	979:23	979:23	11	)
LEAF_NODE	979:24	979:24	9	,
ARGUMENT	979:26	979:26	9	TIFFCurrentDirectory ( bias )
FUNCTION_CALL	979:26	979:51	10	TIFFCurrentDirectory ( bias )
CALLEE	979:26	979:26	11	TIFFCurrentDirectory
LEAF_NODE	979:26	979:26	12	TIFFCurrentDirectory
LEAF_NODE	979:46	979:46	11	(
ARGUMENT	979:47	979:47	11	bias
FIELD	979:47	979:47	12	bias
LEAF_NODE	979:47	979:47	13	bias
LEAF_NODE	979:51	979:51	11	)
LEAF_NODE	979:52	979:52	9	,
ARGUMENT	980:6	980:6	9	TIFFFileName ( in )
FUNCTION_CALL	980:6	980:21	10	TIFFFileName ( in )
CALLEE	980:6	980:6	11	TIFFFileName
LEAF_NODE	980:6	980:6	12	TIFFFileName
LEAF_NODE	980:18	980:18	11	(
ARGUMENT	980:19	980:19	11	in
FIELD	980:19	980:19	12	in
LEAF_NODE	980:19	980:19	13	in
LEAF_NODE	980:21	980:21	11	)
LEAF_NODE	980:22	980:22	9	,
ARGUMENT	980:24	980:24	9	TIFFCurrentDirectory ( in )
FUNCTION_CALL	980:24	980:47	10	TIFFCurrentDirectory ( in )
CALLEE	980:24	980:24	11	TIFFCurrentDirectory
LEAF_NODE	980:24	980:24	12	TIFFCurrentDirectory
LEAF_NODE	980:44	980:44	11	(
ARGUMENT	980:45	980:45	11	in
FIELD	980:45	980:45	12	in
LEAF_NODE	980:45	980:45	13	in
LEAF_NODE	980:47	980:47	11	)
LEAF_NODE	980:48	980:48	9	)
LEAF_NODE	980:49	980:49	7	;
JUMP_STATEMENT	981:2	981:10	6	return 0 ;
KEYWORD	981:2	981:2	7	return
LEAF_NODE	981:2	981:2	8	return
DESTINATION	981:9	981:9	7	0
EXPR	981:9	981:9	8	0
FIELD	981:9	981:9	9	0
LEAF_NODE	981:9	981:9	10	0
LEAF_NODE	981:10	981:10	7	;
LEAF_NODE	982:1	982:1	5	}
SELECTION	982:3	982:8	3	
KEYWORD	982:3	982:3	4	else
LEAF_NODE	982:3	982:3	5	else
STATEMENTS	982:8	987:1	4	
LEAF_NODE	982:8	982:8	5	{
STATEMENTS	983:2	986:2	5	
EXPR_STATEMENT	983:2	985:49	6	TIFFError ( TIFFFileName ( in ) , "Can't bias %s,%d as it has >1 Sample/Pixel\n" , TIFFFileName ( in ) , TIFFCurrentDirectory ( in ) ) ;
EXPR	983:2	983:2	7	TIFFError ( TIFFFileName ( in ) , "Can't bias %s,%d as it has >1 Sample/Pixel\n" , TIFFFileName ( in ) , TIFFCurrentDirectory ( in ) )
FUNCTION_CALL	983:2	985:48	8	TIFFError ( TIFFFileName ( in ) , "Can't bias %s,%d as it has >1 Sample/Pixel\n" , TIFFFileName ( in ) , TIFFCurrentDirectory ( in ) )
CALLEE	983:2	983:2	9	TIFFError
LEAF_NODE	983:2	983:2	10	TIFFError
LEAF_NODE	983:11	983:11	9	(
ARGUMENT	983:12	983:12	9	TIFFFileName ( in )
FUNCTION_CALL	983:12	983:27	10	TIFFFileName ( in )
CALLEE	983:12	983:12	11	TIFFFileName
LEAF_NODE	983:12	983:12	12	TIFFFileName
LEAF_NODE	983:24	983:24	11	(
ARGUMENT	983:25	983:25	11	in
FIELD	983:25	983:25	12	in
LEAF_NODE	983:25	983:25	13	in
LEAF_NODE	983:27	983:27	11	)
LEAF_NODE	983:28	983:28	9	,
ARGUMENT	984:6	984:6	9	"Can't bias %s,%d as it has >1 Sample/Pixel\n"
FIELD	984:6	984:6	10	"Can't bias %s,%d as it has >1 Sample/Pixel\n"
LEAF_NODE	984:6	984:6	11	"Can't bias %s,%d as it has >1 Sample/Pixel\n"
LEAF_NODE	984:52	984:52	9	,
ARGUMENT	985:6	985:6	9	TIFFFileName ( in )
FUNCTION_CALL	985:6	985:21	10	TIFFFileName ( in )
CALLEE	985:6	985:6	11	TIFFFileName
LEAF_NODE	985:6	985:6	12	TIFFFileName
LEAF_NODE	985:18	985:18	11	(
ARGUMENT	985:19	985:19	11	in
FIELD	985:19	985:19	12	in
LEAF_NODE	985:19	985:19	13	in
LEAF_NODE	985:21	985:21	11	)
LEAF_NODE	985:22	985:22	9	,
ARGUMENT	985:24	985:24	9	TIFFCurrentDirectory ( in )
FUNCTION_CALL	985:24	985:47	10	TIFFCurrentDirectory ( in )
CALLEE	985:24	985:24	11	TIFFCurrentDirectory
LEAF_NODE	985:24	985:24	12	TIFFCurrentDirectory
LEAF_NODE	985:44	985:44	11	(
ARGUMENT	985:45	985:45	11	in
FIELD	985:45	985:45	12	in
LEAF_NODE	985:45	985:45	13	in
LEAF_NODE	985:47	985:47	11	)
LEAF_NODE	985:48	985:48	9	)
LEAF_NODE	985:49	985:49	7	;
JUMP_STATEMENT	986:2	986:10	6	return 0 ;
KEYWORD	986:2	986:2	7	return
LEAF_NODE	986:2	986:2	8	return
DESTINATION	986:9	986:9	7	0
EXPR	986:9	986:9	8	0
FIELD	986:9	986:9	9	0
LEAF_NODE	986:9	986:9	10	0
LEAF_NODE	986:10	986:10	7	;
LEAF_NODE	987:1	987:1	5	}
LEAF_NODE	989:0	989:0	2	}
FUNCTION_DEF	0:0	1035:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	995:0	995:0	2	DECLAREcpFunc
LEAF_NODE	995:0	995:0	3	DECLAREcpFunc
PARAMETER_LIST	995:13	995:29	2	( cpDecodedStrips )
LEAF_NODE	995:13	995:13	3	(
PARAMETER_DECL	995:14	995:14	3	cpDecodedStrips
LEAF_NODE	995:14	995:14	4	cpDecodedStrips
LEAF_NODE	995:29	995:29	3	)
LEAF_NODE	996:0	996:0	2	{
STATEMENTS	997:1	1034:1	2	
SIMPLE_DECL	997:1	997:39	3	tsize_t stripsize ; stripsize = TIFFStripSize ( in ) ;
VAR_DECL	997:1	997:9	4	tsize_t stripsize ; stripsize = TIFFStripSize ( in )
TYPE	997:1	997:1	5	tsize_t
TYPE_NAME	997:1	997:1	6	tsize_t
LEAF_NODE	997:1	997:1	7	tsize_t
NAME	997:9	997:9	5	stripsize
LEAF_NODE	997:9	997:9	6	stripsize
LEAF_NODE	0:0	0:0	5	;
INIT	997:9	997:9	5	stripsize = TIFFStripSize ( in )
ASSIGN	997:9	997:22	6	stripsize = TIFFStripSize ( in )
LVAL	997:9	997:9	7	stripsize
NAME	997:9	997:9	8	stripsize
LEAF_NODE	997:9	997:9	9	stripsize
ASSIGN_OP	997:20	997:20	7	=
LEAF_NODE	997:20	997:20	8	=
RVAL	997:22	997:22	7	TIFFStripSize ( in )
FUNCTION_CALL	997:22	997:38	8	TIFFStripSize ( in )
CALLEE	997:22	997:22	9	TIFFStripSize
LEAF_NODE	997:22	997:22	10	TIFFStripSize
LEAF_NODE	997:35	997:35	9	(
ARGUMENT	997:36	997:36	9	in
FIELD	997:36	997:36	10	in
LEAF_NODE	997:36	997:36	11	in
LEAF_NODE	997:38	997:38	9	)
LEAF_NODE	997:39	997:39	4	;
SIMPLE_DECL	998:1	998:37	3	tdata_t buf ; buf = _TIFFmalloc ( stripsize ) ;
VAR_DECL	998:1	998:9	4	tdata_t buf ; buf = _TIFFmalloc ( stripsize )
TYPE	998:1	998:1	5	tdata_t
TYPE_NAME	998:1	998:1	6	tdata_t
LEAF_NODE	998:1	998:1	7	tdata_t
NAME	998:9	998:9	5	buf
LEAF_NODE	998:9	998:9	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	998:9	998:9	5	buf = _TIFFmalloc ( stripsize )
ASSIGN	998:9	998:15	6	buf = _TIFFmalloc ( stripsize )
LVAL	998:9	998:9	7	buf
NAME	998:9	998:9	8	buf
LEAF_NODE	998:9	998:9	9	buf
ASSIGN_OP	998:13	998:13	7	=
LEAF_NODE	998:13	998:13	8	=
RVAL	998:15	998:15	7	_TIFFmalloc ( stripsize )
FUNCTION_CALL	998:15	998:36	8	_TIFFmalloc ( stripsize )
CALLEE	998:15	998:15	9	_TIFFmalloc
LEAF_NODE	998:15	998:15	10	_TIFFmalloc
LEAF_NODE	998:26	998:26	9	(
ARGUMENT	998:27	998:27	9	stripsize
FIELD	998:27	998:27	10	stripsize
LEAF_NODE	998:27	998:27	11	stripsize
LEAF_NODE	998:36	998:36	9	)
LEAF_NODE	998:37	998:37	4	;
EXPR_STATEMENT	1000:1	1000:18	3	( void ) imagewidth ;
EXPR	1000:1	1000:8	4	( void ) imagewidth
LEAF_NODE	1000:1	1000:1	5	(
TYPE_NAME	1000:2	1000:2	5	void
LEAF_NODE	1000:2	1000:2	6	void
LEAF_NODE	1000:6	1000:6	5	)
FIELD	1000:8	1000:8	5	imagewidth
LEAF_NODE	1000:8	1000:8	6	imagewidth
LEAF_NODE	1000:18	1000:18	4	;
EXPR_STATEMENT	1000:20	1000:30	3	( void ) spp ;
EXPR	1000:20	1000:27	4	( void ) spp
LEAF_NODE	1000:20	1000:20	5	(
TYPE_NAME	1000:21	1000:21	5	void
LEAF_NODE	1000:21	1000:21	6	void
LEAF_NODE	1000:25	1000:25	5	)
FIELD	1000:27	1000:27	5	spp
LEAF_NODE	1000:27	1000:27	6	spp
LEAF_NODE	1000:30	1000:30	4	;
SELECTION	1001:1	1001:10	3	
KEYWORD	1001:1	1001:1	4	if
LEAF_NODE	1001:1	1001:1	5	if
LEAF_NODE	1001:4	1001:4	4	(
CONDITION	1001:5	1001:5	4	buf
EXPR	1001:5	1001:5	5	buf
FIELD	1001:5	1001:5	6	buf
LEAF_NODE	1001:5	1001:5	7	buf
LEAF_NODE	1001:8	1001:8	4	)
STATEMENTS	1001:10	1025:1	4	
LEAF_NODE	1001:10	1001:10	5	{
STATEMENTS	1002:2	1024:2	5	
SIMPLE_DECL	1002:2	1002:41	6	tstrip_t s , tstrip_t ns ; ns = TIFFNumberOfStrips ( in ) ;
INIT_DECL_LIST	1002:2	1002:2	7	tstrip_t s , tstrip_t ns ; ns = TIFFNumberOfStrips ( in )
VAR_DECL	1002:2	1002:11	8	tstrip_t s
TYPE	1002:2	1002:2	9	tstrip_t
TYPE_NAME	1002:2	1002:2	10	tstrip_t
LEAF_NODE	1002:2	1002:2	11	tstrip_t
NAME	1002:11	1002:11	9	s
LEAF_NODE	1002:11	1002:11	10	s
LEAF_NODE	1002:12	1002:12	8	,
VAR_DECL	1002:2	1002:14	8	tstrip_t ns ; ns = TIFFNumberOfStrips ( in )
TYPE	1002:2	1002:2	9	tstrip_t
TYPE_NAME	1002:2	1002:2	10	tstrip_t
LEAF_NODE	1002:2	1002:2	11	tstrip_t
NAME	1002:14	1002:14	9	ns
LEAF_NODE	1002:14	1002:14	10	ns
LEAF_NODE	0:0	0:0	9	;
INIT	1002:14	1002:14	9	ns = TIFFNumberOfStrips ( in )
ASSIGN	1002:14	1002:19	10	ns = TIFFNumberOfStrips ( in )
LVAL	1002:14	1002:14	11	ns
NAME	1002:14	1002:14	12	ns
LEAF_NODE	1002:14	1002:14	13	ns
ASSIGN_OP	1002:17	1002:17	11	=
LEAF_NODE	1002:17	1002:17	12	=
RVAL	1002:19	1002:19	11	TIFFNumberOfStrips ( in )
FUNCTION_CALL	1002:19	1002:40	12	TIFFNumberOfStrips ( in )
CALLEE	1002:19	1002:19	13	TIFFNumberOfStrips
LEAF_NODE	1002:19	1002:19	14	TIFFNumberOfStrips
LEAF_NODE	1002:37	1002:37	13	(
ARGUMENT	1002:38	1002:38	13	in
FIELD	1002:38	1002:38	14	in
LEAF_NODE	1002:38	1002:38	15	in
LEAF_NODE	1002:40	1002:40	13	)
LEAF_NODE	1002:41	1002:41	7	;
SIMPLE_DECL	1003:2	1003:16	6	uint32 row ; row = 0 ;
VAR_DECL	1003:2	1003:9	7	uint32 row ; row = 0
TYPE	1003:2	1003:2	8	uint32
TYPE_NAME	1003:2	1003:2	9	uint32
LEAF_NODE	1003:2	1003:2	10	uint32
NAME	1003:9	1003:9	8	row
LEAF_NODE	1003:9	1003:9	9	row
LEAF_NODE	0:0	0:0	8	;
INIT	1003:9	1003:9	8	row = 0
ASSIGN	1003:9	1003:15	9	row = 0
LVAL	1003:9	1003:9	10	row
NAME	1003:9	1003:9	11	row
LEAF_NODE	1003:9	1003:9	12	row
ASSIGN_OP	1003:13	1003:13	10	=
LEAF_NODE	1003:13	1003:13	11	=
RVAL	1003:15	1003:15	10	0
FIELD	1003:15	1003:15	11	0
LEAF_NODE	1003:15	1003:15	12	0
LEAF_NODE	1003:16	1003:16	7	;
EXPR_STATEMENT	1004:2	1004:32	6	_TIFFmemset ( buf , 0 , stripsize ) ;
EXPR	1004:2	1004:2	7	_TIFFmemset ( buf , 0 , stripsize )
FUNCTION_CALL	1004:2	1004:31	8	_TIFFmemset ( buf , 0 , stripsize )
CALLEE	1004:2	1004:2	9	_TIFFmemset
LEAF_NODE	1004:2	1004:2	10	_TIFFmemset
LEAF_NODE	1004:13	1004:13	9	(
ARGUMENT	1004:14	1004:14	9	buf
FIELD	1004:14	1004:14	10	buf
LEAF_NODE	1004:14	1004:14	11	buf
LEAF_NODE	1004:17	1004:17	9	,
ARGUMENT	1004:19	1004:19	9	0
FIELD	1004:19	1004:19	10	0
LEAF_NODE	1004:19	1004:19	11	0
LEAF_NODE	1004:20	1004:20	9	,
ARGUMENT	1004:22	1004:22	9	stripsize
FIELD	1004:22	1004:22	10	stripsize
LEAF_NODE	1004:22	1004:22	11	stripsize
LEAF_NODE	1004:31	1004:31	9	)
LEAF_NODE	1004:32	1004:32	7	;
ITERATION	1005:2	1005:48	6	
KEYWORD	1005:2	1005:2	7	for
LEAF_NODE	1005:2	1005:2	8	for
LEAF_NODE	1005:6	1005:6	7	(
FOR_INIT	1005:7	1005:12	7	s = 0 ;
EXPR	1005:7	1005:7	8	s = 0
ASSIGN	1005:7	1005:11	9	s = 0
LVAL	1005:7	1005:7	10	s
FIELD	1005:7	1005:7	11	s
LEAF_NODE	1005:7	1005:7	12	s
ASSIGN_OP	1005:9	1005:9	10	=
LEAF_NODE	1005:9	1005:9	11	=
RVAL	1005:11	1005:11	10	0
FIELD	1005:11	1005:11	11	0
LEAF_NODE	1005:11	1005:11	12	0
LEAF_NODE	1005:12	1005:12	8	;
CONDITION	1005:14	1005:14	7	s < ns && row < imagelength
EXPR	1005:14	1005:14	8	s < ns && row < imagelength
AND	1005:14	1005:24	9	s < ns && row < imagelength
EXPR	1005:14	1005:18	10	s < ns
FIELD	1005:14	1005:14	11	s
LEAF_NODE	1005:14	1005:14	12	s
REL_OPERATOR	1005:16	1005:16	11	<
LEAF_NODE	1005:16	1005:16	12	<
FIELD	1005:18	1005:18	11	ns
LEAF_NODE	1005:18	1005:18	12	ns
LEAF_NODE	1005:21	1005:21	10	&&
EXPR	1005:24	1005:30	10	row < imagelength
FIELD	1005:24	1005:24	11	row
LEAF_NODE	1005:24	1005:24	12	row
REL_OPERATOR	1005:28	1005:28	11	<
LEAF_NODE	1005:28	1005:28	12	<
FIELD	1005:30	1005:30	11	imagelength
LEAF_NODE	1005:30	1005:30	12	imagelength
LEAF_NODE	1005:41	1005:41	7	;
FOR_EXPR	1005:43	1005:43	7	s ++
EXPR	1005:43	1005:43	8	s ++
FIELD	1005:43	1005:44	9	s ++
LEAF_NODE	1005:43	1005:43	10	s
LEAF_NODE	1005:44	1005:44	10	++
LEAF_NODE	1005:46	1005:46	7	)
STATEMENTS	1005:48	1022:2	7	
LEAF_NODE	1005:48	1005:48	8	{
STATEMENTS	1006:3	1021:3	8	
SIMPLE_DECL	1006:3	1007:56	9	tsize_t cc ; cc = ( row + rowsperstrip > imagelength ) ? TIFFVStripSize ( in , imagelength - row ) : stripsize ;
VAR_DECL	1006:3	1006:11	10	tsize_t cc ; cc = ( row + rowsperstrip > imagelength ) ? TIFFVStripSize ( in , imagelength - row ) : stripsize
TYPE	1006:3	1006:3	11	tsize_t
TYPE_NAME	1006:3	1006:3	12	tsize_t
LEAF_NODE	1006:3	1006:3	13	tsize_t
NAME	1006:11	1006:11	11	cc
LEAF_NODE	1006:11	1006:11	12	cc
LEAF_NODE	0:0	0:0	11	;
INIT	1006:11	1006:11	11	cc = ( row + rowsperstrip > imagelength ) ? TIFFVStripSize ( in , imagelength - row ) : stripsize
ASSIGN	1006:11	1006:16	12	cc = ( row + rowsperstrip > imagelength ) ? TIFFVStripSize ( in , imagelength - row ) : stripsize
LVAL	1006:11	1006:11	13	cc
NAME	1006:11	1006:11	14	cc
LEAF_NODE	1006:11	1006:11	15	cc
ASSIGN_OP	1006:14	1006:14	13	=
LEAF_NODE	1006:14	1006:14	14	=
RVAL	1006:16	1006:16	13	( row + rowsperstrip > imagelength ) ? TIFFVStripSize ( in , imagelength - row ) : stripsize
COND_EXPR	1006:16	1007:47	14	( row + rowsperstrip > imagelength ) ? TIFFVStripSize ( in , imagelength - row ) : stripsize
CONDITION	1006:16	1006:49	15	( row + rowsperstrip > imagelength )
LEAF_NODE	1006:16	1006:16	16	(
FIELD	1006:17	1006:17	16	row
LEAF_NODE	1006:17	1006:17	17	row
LEAF_NODE	1006:21	1006:21	16	+
FIELD	1006:23	1006:23	16	rowsperstrip
LEAF_NODE	1006:23	1006:23	17	rowsperstrip
REL_OPERATOR	1006:36	1006:36	16	>
LEAF_NODE	1006:36	1006:36	17	>
FIELD	1006:38	1006:38	16	imagelength
LEAF_NODE	1006:38	1006:38	17	imagelength
LEAF_NODE	1006:49	1006:49	16	)
LEAF_NODE	1006:51	1006:51	15	?
EXPR	1007:7	1007:7	15	TIFFVStripSize ( in , imagelength - row )
FUNCTION_CALL	1007:7	1007:43	16	TIFFVStripSize ( in , imagelength - row )
CALLEE	1007:7	1007:7	17	TIFFVStripSize
LEAF_NODE	1007:7	1007:7	18	TIFFVStripSize
LEAF_NODE	1007:21	1007:21	17	(
ARGUMENT	1007:22	1007:22	17	in
FIELD	1007:22	1007:22	18	in
LEAF_NODE	1007:22	1007:22	19	in
LEAF_NODE	1007:24	1007:24	17	,
ARGUMENT	1007:26	1007:40	17	imagelength - row
FIELD	1007:26	1007:26	18	imagelength
LEAF_NODE	1007:26	1007:26	19	imagelength
LEAF_NODE	1007:38	1007:38	18	-
FIELD	1007:40	1007:40	18	row
LEAF_NODE	1007:40	1007:40	19	row
LEAF_NODE	1007:43	1007:43	17	)
LEAF_NODE	1007:45	1007:45	15	:
FIELD	1007:47	1007:47	15	stripsize
LEAF_NODE	1007:47	1007:47	16	stripsize
LEAF_NODE	1007:56	1007:56	10	;
SELECTION	1008:3	1009:19	9	
KEYWORD	1008:3	1008:3	10	if
LEAF_NODE	1008:3	1008:3	11	if
LEAF_NODE	1008:6	1008:6	10	(
CONDITION	1008:7	1008:7	10	TIFFReadEncodedStrip ( in , s , buf , cc ) < 0 && ! ignore
EXPR	1008:7	1008:7	11	TIFFReadEncodedStrip ( in , s , buf , cc ) < 0 && ! ignore
AND	1008:7	1009:10	12	TIFFReadEncodedStrip ( in , s , buf , cc ) < 0 && ! ignore
EXPR	1008:7	1008:46	13	TIFFReadEncodedStrip ( in , s , buf , cc ) < 0
FUNCTION_CALL	1008:7	1008:42	14	TIFFReadEncodedStrip ( in , s , buf , cc )
CALLEE	1008:7	1008:7	15	TIFFReadEncodedStrip
LEAF_NODE	1008:7	1008:7	16	TIFFReadEncodedStrip
LEAF_NODE	1008:27	1008:27	15	(
ARGUMENT	1008:28	1008:28	15	in
FIELD	1008:28	1008:28	16	in
LEAF_NODE	1008:28	1008:28	17	in
LEAF_NODE	1008:30	1008:30	15	,
ARGUMENT	1008:32	1008:32	15	s
FIELD	1008:32	1008:32	16	s
LEAF_NODE	1008:32	1008:32	17	s
LEAF_NODE	1008:33	1008:33	15	,
ARGUMENT	1008:35	1008:35	15	buf
FIELD	1008:35	1008:35	16	buf
LEAF_NODE	1008:35	1008:35	17	buf
LEAF_NODE	1008:38	1008:38	15	,
ARGUMENT	1008:40	1008:40	15	cc
FIELD	1008:40	1008:40	16	cc
LEAF_NODE	1008:40	1008:40	17	cc
LEAF_NODE	1008:42	1008:42	15	)
REL_OPERATOR	1008:44	1008:44	14	<
LEAF_NODE	1008:44	1008:44	15	<
FIELD	1008:46	1008:46	14	0
LEAF_NODE	1008:46	1008:46	15	0
LEAF_NODE	1009:7	1009:7	13	&&
EXPR	1009:10	1009:10	13	! ignore
UNARY_EXPR	1009:10	1009:11	14	! ignore
UNARY_OPERATOR	1009:10	1009:10	15	!
LEAF_NODE	1009:10	1009:10	16	!
FIELD	1009:11	1009:11	15	ignore
LEAF_NODE	1009:11	1009:11	16	ignore
LEAF_NODE	1009:17	1009:17	10	)
STATEMENTS	1009:19	1014:3	10	
LEAF_NODE	1009:19	1009:19	11	{
STATEMENTS	1010:4	1013:4	11	
EXPR_STATEMENT	1010:4	1012:26	12	TIFFError ( TIFFFileName ( in ) , "Error, can't read strip %lu" , ( unsigned long ) s ) ;
EXPR	1010:4	1010:4	13	TIFFError ( TIFFFileName ( in ) , "Error, can't read strip %lu" , ( unsigned long ) s )
FUNCTION_CALL	1010:4	1012:25	14	TIFFError ( TIFFFileName ( in ) , "Error, can't read strip %lu" , ( unsigned long ) s )
CALLEE	1010:4	1010:4	15	TIFFError
LEAF_NODE	1010:4	1010:4	16	TIFFError
LEAF_NODE	1010:13	1010:13	15	(
ARGUMENT	1010:14	1010:14	15	TIFFFileName ( in )
FUNCTION_CALL	1010:14	1010:29	16	TIFFFileName ( in )
CALLEE	1010:14	1010:14	17	TIFFFileName
LEAF_NODE	1010:14	1010:14	18	TIFFFileName
LEAF_NODE	1010:26	1010:26	17	(
ARGUMENT	1010:27	1010:27	17	in
FIELD	1010:27	1010:27	18	in
LEAF_NODE	1010:27	1010:27	19	in
LEAF_NODE	1010:29	1010:29	17	)
LEAF_NODE	1010:30	1010:30	15	,
ARGUMENT	1011:8	1011:8	15	"Error, can't read strip %lu"
FIELD	1011:8	1011:8	16	"Error, can't read strip %lu"
LEAF_NODE	1011:8	1011:8	17	"Error, can't read strip %lu"
LEAF_NODE	1011:37	1011:37	15	,
ARGUMENT	1012:8	1012:24	15	( unsigned long ) s
LEAF_NODE	1012:8	1012:8	16	(
TYPE_NAME	1012:9	1012:18	16	unsigned long
LEAF_NODE	1012:9	1012:9	17	unsigned
LEAF_NODE	1012:18	1012:18	17	long
LEAF_NODE	1012:22	1012:22	16	)
FIELD	1012:24	1012:24	16	s
LEAF_NODE	1012:24	1012:24	17	s
LEAF_NODE	1012:25	1012:25	15	)
LEAF_NODE	1012:26	1012:26	13	;
JUMP_STATEMENT	1013:4	1013:12	12	goto bad ;
KEYWORD	1013:4	1013:4	13	goto
LEAF_NODE	1013:4	1013:4	14	goto
DESTINATION	1013:9	1013:9	13	bad
LEAF_NODE	1013:9	1013:9	14	bad
LEAF_NODE	1013:12	1013:12	13	;
LEAF_NODE	1014:3	1014:3	11	}
SELECTION	1015:3	1015:51	9	
KEYWORD	1015:3	1015:3	10	if
LEAF_NODE	1015:3	1015:3	11	if
LEAF_NODE	1015:6	1015:6	10	(
CONDITION	1015:7	1015:7	10	TIFFWriteEncodedStrip ( out , s , buf , cc ) < 0
EXPR	1015:7	1015:48	11	TIFFWriteEncodedStrip ( out , s , buf , cc ) < 0
FUNCTION_CALL	1015:7	1015:44	12	TIFFWriteEncodedStrip ( out , s , buf , cc )
CALLEE	1015:7	1015:7	13	TIFFWriteEncodedStrip
LEAF_NODE	1015:7	1015:7	14	TIFFWriteEncodedStrip
LEAF_NODE	1015:28	1015:28	13	(
ARGUMENT	1015:29	1015:29	13	out
FIELD	1015:29	1015:29	14	out
LEAF_NODE	1015:29	1015:29	15	out
LEAF_NODE	1015:32	1015:32	13	,
ARGUMENT	1015:34	1015:34	13	s
FIELD	1015:34	1015:34	14	s
LEAF_NODE	1015:34	1015:34	15	s
LEAF_NODE	1015:35	1015:35	13	,
ARGUMENT	1015:37	1015:37	13	buf
FIELD	1015:37	1015:37	14	buf
LEAF_NODE	1015:37	1015:37	15	buf
LEAF_NODE	1015:40	1015:40	13	,
ARGUMENT	1015:42	1015:42	13	cc
FIELD	1015:42	1015:42	14	cc
LEAF_NODE	1015:42	1015:42	15	cc
LEAF_NODE	1015:44	1015:44	13	)
REL_OPERATOR	1015:46	1015:46	12	<
LEAF_NODE	1015:46	1015:46	13	<
FIELD	1015:48	1015:48	12	0
LEAF_NODE	1015:48	1015:48	13	0
LEAF_NODE	1015:49	1015:49	10	)
STATEMENTS	1015:51	1020:3	10	
LEAF_NODE	1015:51	1015:51	11	{
STATEMENTS	1016:4	1019:4	11	
EXPR_STATEMENT	1016:4	1018:26	12	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %lu" , ( unsigned long ) s ) ;
EXPR	1016:4	1016:4	13	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %lu" , ( unsigned long ) s )
FUNCTION_CALL	1016:4	1018:25	14	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %lu" , ( unsigned long ) s )
CALLEE	1016:4	1016:4	15	TIFFError
LEAF_NODE	1016:4	1016:4	16	TIFFError
LEAF_NODE	1016:13	1016:13	15	(
ARGUMENT	1016:14	1016:14	15	TIFFFileName ( out )
FUNCTION_CALL	1016:14	1016:30	16	TIFFFileName ( out )
CALLEE	1016:14	1016:14	17	TIFFFileName
LEAF_NODE	1016:14	1016:14	18	TIFFFileName
LEAF_NODE	1016:26	1016:26	17	(
ARGUMENT	1016:27	1016:27	17	out
FIELD	1016:27	1016:27	18	out
LEAF_NODE	1016:27	1016:27	19	out
LEAF_NODE	1016:30	1016:30	17	)
LEAF_NODE	1016:31	1016:31	15	,
ARGUMENT	1017:8	1017:8	15	"Error, can't write strip %lu"
FIELD	1017:8	1017:8	16	"Error, can't write strip %lu"
LEAF_NODE	1017:8	1017:8	17	"Error, can't write strip %lu"
LEAF_NODE	1017:38	1017:38	15	,
ARGUMENT	1018:8	1018:24	15	( unsigned long ) s
LEAF_NODE	1018:8	1018:8	16	(
TYPE_NAME	1018:9	1018:18	16	unsigned long
LEAF_NODE	1018:9	1018:9	17	unsigned
LEAF_NODE	1018:18	1018:18	17	long
LEAF_NODE	1018:22	1018:22	16	)
FIELD	1018:24	1018:24	16	s
LEAF_NODE	1018:24	1018:24	17	s
LEAF_NODE	1018:25	1018:25	15	)
LEAF_NODE	1018:26	1018:26	13	;
JUMP_STATEMENT	1019:4	1019:12	12	goto bad ;
KEYWORD	1019:4	1019:4	13	goto
LEAF_NODE	1019:4	1019:4	14	goto
DESTINATION	1019:9	1019:9	13	bad
LEAF_NODE	1019:9	1019:9	14	bad
LEAF_NODE	1019:12	1019:12	13	;
LEAF_NODE	1020:3	1020:3	11	}
EXPR_STATEMENT	1021:3	1021:22	9	row += rowsperstrip ;
EXPR	1021:3	1021:3	10	row += rowsperstrip
ASSIGN	1021:3	1021:10	11	row += rowsperstrip
LVAL	1021:3	1021:3	12	row
FIELD	1021:3	1021:3	13	row
LEAF_NODE	1021:3	1021:3	14	row
ASSIGN_OP	1021:7	1021:7	12	+=
LEAF_NODE	1021:7	1021:7	13	+=
RVAL	1021:10	1021:10	12	rowsperstrip
FIELD	1021:10	1021:10	13	rowsperstrip
LEAF_NODE	1021:10	1021:10	14	rowsperstrip
LEAF_NODE	1021:22	1021:22	10	;
LEAF_NODE	1022:2	1022:2	8	}
EXPR_STATEMENT	1023:2	1023:16	6	_TIFFfree ( buf ) ;
EXPR	1023:2	1023:2	7	_TIFFfree ( buf )
FUNCTION_CALL	1023:2	1023:15	8	_TIFFfree ( buf )
CALLEE	1023:2	1023:2	9	_TIFFfree
LEAF_NODE	1023:2	1023:2	10	_TIFFfree
LEAF_NODE	1023:11	1023:11	9	(
ARGUMENT	1023:12	1023:12	9	buf
FIELD	1023:12	1023:12	10	buf
LEAF_NODE	1023:12	1023:12	11	buf
LEAF_NODE	1023:15	1023:15	9	)
LEAF_NODE	1023:16	1023:16	7	;
JUMP_STATEMENT	1024:2	1024:10	6	return 1 ;
KEYWORD	1024:2	1024:2	7	return
LEAF_NODE	1024:2	1024:2	8	return
DESTINATION	1024:9	1024:9	7	1
EXPR	1024:9	1024:9	8	1
FIELD	1024:9	1024:9	9	1
LEAF_NODE	1024:9	1024:9	10	1
LEAF_NODE	1024:10	1024:10	7	;
LEAF_NODE	1025:1	1025:1	5	}
SELECTION	1025:3	1025:8	3	
KEYWORD	1025:3	1025:3	4	else
LEAF_NODE	1025:3	1025:3	5	else
STATEMENTS	1025:8	1030:1	4	
LEAF_NODE	1025:8	1025:8	5	{
STATEMENTS	1026:2	1029:2	5	
LEAF_NODE	1026:2	1026:2	6	TIFFError
LEAF_NODE	1026:11	1026:11	6	(
LEAF_NODE	1026:12	1026:12	6	TIFFFileName
LEAF_NODE	1026:24	1026:24	6	(
LEAF_NODE	1026:25	1026:25	6	in
LEAF_NODE	1026:27	1026:27	6	)
LEAF_NODE	1026:28	1026:28	6	,
LEAF_NODE	1027:6	1027:6	6	"Error, can't allocate memory buffer of size %lu "
LEAF_NODE	1028:6	1028:6	6	"to read strips"
LEAF_NODE	1028:22	1028:22	6	,
LEAF_NODE	1028:24	1028:24	6	(
LEAF_NODE	1028:25	1028:25	6	unsigned
LEAF_NODE	1028:34	1028:34	6	long
LEAF_NODE	1028:38	1028:38	6	)
LEAF_NODE	1028:40	1028:40	6	stripsize
LEAF_NODE	1028:49	1028:49	6	)
LEAF_NODE	1028:50	1028:50	6	;
JUMP_STATEMENT	1029:2	1029:10	6	return 0 ;
KEYWORD	1029:2	1029:2	7	return
LEAF_NODE	1029:2	1029:2	8	return
DESTINATION	1029:9	1029:9	7	0
EXPR	1029:9	1029:9	8	0
FIELD	1029:9	1029:9	9	0
LEAF_NODE	1029:9	1029:9	10	0
LEAF_NODE	1029:10	1029:10	7	;
LEAF_NODE	1030:1	1030:1	5	}
LABEL	1032:0	1032:3	3	bad :
LEAF_NODE	1032:0	1032:0	4	bad
LEAF_NODE	1032:3	1032:3	4	:
EXPR_STATEMENT	1033:1	1033:15	3	_TIFFfree ( buf ) ;
EXPR	1033:1	1033:1	4	_TIFFfree ( buf )
FUNCTION_CALL	1033:1	1033:14	5	_TIFFfree ( buf )
CALLEE	1033:1	1033:1	6	_TIFFfree
LEAF_NODE	1033:1	1033:1	7	_TIFFfree
LEAF_NODE	1033:10	1033:10	6	(
ARGUMENT	1033:11	1033:11	6	buf
FIELD	1033:11	1033:11	7	buf
LEAF_NODE	1033:11	1033:11	8	buf
LEAF_NODE	1033:14	1033:14	6	)
LEAF_NODE	1033:15	1033:15	4	;
JUMP_STATEMENT	1034:1	1034:9	3	return 0 ;
KEYWORD	1034:1	1034:1	4	return
LEAF_NODE	1034:1	1034:1	5	return
DESTINATION	1034:8	1034:8	4	0
EXPR	1034:8	1034:8	5	0
FIELD	1034:8	1034:8	6	0
LEAF_NODE	1034:8	1034:8	7	0
LEAF_NODE	1034:9	1034:9	4	;
LEAF_NODE	1035:0	1035:0	2	}
FUNCTION_DEF	0:0	1073:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1040:0	1040:0	2	DECLAREcpFunc
LEAF_NODE	1040:0	1040:0	3	DECLAREcpFunc
PARAMETER_LIST	1040:13	1040:38	2	( cpSeparate2SeparateByRow )
LEAF_NODE	1040:13	1040:13	3	(
PARAMETER_DECL	1040:14	1040:14	3	cpSeparate2SeparateByRow
LEAF_NODE	1040:14	1040:14	4	cpSeparate2SeparateByRow
LEAF_NODE	1040:38	1040:38	3	)
LEAF_NODE	1041:0	1041:0	2	{
STATEMENTS	1042:1	1072:1	2	
SIMPLE_DECL	1042:1	1042:44	3	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in ) ;
VAR_DECL	1042:1	1042:9	4	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in )
TYPE	1042:1	1042:1	5	tsize_t
TYPE_NAME	1042:1	1042:1	6	tsize_t
LEAF_NODE	1042:1	1042:1	7	tsize_t
NAME	1042:9	1042:9	5	scanlinesize
LEAF_NODE	1042:9	1042:9	6	scanlinesize
LEAF_NODE	0:0	0:0	5	;
INIT	1042:9	1042:9	5	scanlinesize = TIFFScanlineSize ( in )
ASSIGN	1042:9	1042:24	6	scanlinesize = TIFFScanlineSize ( in )
LVAL	1042:9	1042:9	7	scanlinesize
NAME	1042:9	1042:9	8	scanlinesize
LEAF_NODE	1042:9	1042:9	9	scanlinesize
ASSIGN_OP	1042:22	1042:22	7	=
LEAF_NODE	1042:22	1042:22	8	=
RVAL	1042:24	1042:24	7	TIFFScanlineSize ( in )
FUNCTION_CALL	1042:24	1042:43	8	TIFFScanlineSize ( in )
CALLEE	1042:24	1042:24	9	TIFFScanlineSize
LEAF_NODE	1042:24	1042:24	10	TIFFScanlineSize
LEAF_NODE	1042:40	1042:40	9	(
ARGUMENT	1042:41	1042:41	9	in
FIELD	1042:41	1042:41	10	in
LEAF_NODE	1042:41	1042:41	11	in
LEAF_NODE	1042:43	1042:43	9	)
LEAF_NODE	1042:44	1042:44	4	;
SIMPLE_DECL	1043:1	1043:12	3	tdata_t buf ;
VAR_DECL	1043:1	1043:9	4	tdata_t buf
TYPE	1043:1	1043:1	5	tdata_t
TYPE_NAME	1043:1	1043:1	6	tdata_t
LEAF_NODE	1043:1	1043:1	7	tdata_t
NAME	1043:9	1043:9	5	buf
LEAF_NODE	1043:9	1043:9	6	buf
LEAF_NODE	1043:12	1043:12	4	;
SIMPLE_DECL	1044:1	1044:11	3	uint32 row ;
VAR_DECL	1044:1	1044:8	4	uint32 row
TYPE	1044:1	1044:1	5	uint32
TYPE_NAME	1044:1	1044:1	6	uint32
LEAF_NODE	1044:1	1044:1	7	uint32
NAME	1044:8	1044:8	5	row
LEAF_NODE	1044:8	1044:8	6	row
LEAF_NODE	1044:11	1044:11	4	;
SIMPLE_DECL	1045:1	1045:12	3	tsample_t s ;
VAR_DECL	1045:1	1045:11	4	tsample_t s
TYPE	1045:1	1045:1	5	tsample_t
TYPE_NAME	1045:1	1045:1	6	tsample_t
LEAF_NODE	1045:1	1045:1	7	tsample_t
NAME	1045:11	1045:11	5	s
LEAF_NODE	1045:11	1045:11	6	s
LEAF_NODE	1045:12	1045:12	4	;
EXPR_STATEMENT	1047:1	1047:18	3	( void ) imagewidth ;
EXPR	1047:1	1047:8	4	( void ) imagewidth
LEAF_NODE	1047:1	1047:1	5	(
TYPE_NAME	1047:2	1047:2	5	void
LEAF_NODE	1047:2	1047:2	6	void
LEAF_NODE	1047:6	1047:6	5	)
FIELD	1047:8	1047:8	5	imagewidth
LEAF_NODE	1047:8	1047:8	6	imagewidth
LEAF_NODE	1047:18	1047:18	4	;
EXPR_STATEMENT	1048:1	1048:32	3	buf = _TIFFmalloc ( scanlinesize ) ;
EXPR	1048:1	1048:1	4	buf = _TIFFmalloc ( scanlinesize )
ASSIGN	1048:1	1048:7	5	buf = _TIFFmalloc ( scanlinesize )
LVAL	1048:1	1048:1	6	buf
FIELD	1048:1	1048:1	7	buf
LEAF_NODE	1048:1	1048:1	8	buf
ASSIGN_OP	1048:5	1048:5	6	=
LEAF_NODE	1048:5	1048:5	7	=
RVAL	1048:7	1048:7	6	_TIFFmalloc ( scanlinesize )
FUNCTION_CALL	1048:7	1048:31	7	_TIFFmalloc ( scanlinesize )
CALLEE	1048:7	1048:7	8	_TIFFmalloc
LEAF_NODE	1048:7	1048:7	9	_TIFFmalloc
LEAF_NODE	1048:18	1048:18	8	(
ARGUMENT	1048:19	1048:19	8	scanlinesize
FIELD	1048:19	1048:19	9	scanlinesize
LEAF_NODE	1048:19	1048:19	10	scanlinesize
LEAF_NODE	1048:31	1048:31	8	)
LEAF_NODE	1048:32	1048:32	4	;
SELECTION	1049:1	1050:2	3	
KEYWORD	1049:1	1049:1	4	if
LEAF_NODE	1049:1	1049:1	5	if
LEAF_NODE	1049:4	1049:4	4	(
CONDITION	1049:5	1049:5	4	! buf
EXPR	1049:5	1049:5	5	! buf
UNARY_EXPR	1049:5	1049:6	6	! buf
UNARY_OPERATOR	1049:5	1049:5	7	!
LEAF_NODE	1049:5	1049:5	8	!
FIELD	1049:6	1049:6	7	buf
LEAF_NODE	1049:6	1049:6	8	buf
LEAF_NODE	1049:9	1049:9	4	)
STATEMENTS	1050:2	1050:2	4	
JUMP_STATEMENT	1050:2	1050:10	5	return 0 ;
KEYWORD	1050:2	1050:2	6	return
LEAF_NODE	1050:2	1050:2	7	return
DESTINATION	1050:9	1050:9	6	0
EXPR	1050:9	1050:9	7	0
FIELD	1050:9	1050:9	8	0
LEAF_NODE	1050:9	1050:9	9	0
LEAF_NODE	1050:10	1050:10	6	;
EXPR_STATEMENT	1051:1	1051:34	3	_TIFFmemset ( buf , 0 , scanlinesize ) ;
EXPR	1051:1	1051:1	4	_TIFFmemset ( buf , 0 , scanlinesize )
FUNCTION_CALL	1051:1	1051:33	5	_TIFFmemset ( buf , 0 , scanlinesize )
CALLEE	1051:1	1051:1	6	_TIFFmemset
LEAF_NODE	1051:1	1051:1	7	_TIFFmemset
LEAF_NODE	1051:12	1051:12	6	(
ARGUMENT	1051:13	1051:13	6	buf
FIELD	1051:13	1051:13	7	buf
LEAF_NODE	1051:13	1051:13	8	buf
LEAF_NODE	1051:16	1051:16	6	,
ARGUMENT	1051:18	1051:18	6	0
FIELD	1051:18	1051:18	7	0
LEAF_NODE	1051:18	1051:18	8	0
LEAF_NODE	1051:19	1051:19	6	,
ARGUMENT	1051:21	1051:21	6	scanlinesize
FIELD	1051:21	1051:21	7	scanlinesize
LEAF_NODE	1051:21	1051:21	8	scanlinesize
LEAF_NODE	1051:33	1051:33	6	)
LEAF_NODE	1051:34	1051:34	4	;
ITERATION	1052:1	1052:27	3	
KEYWORD	1052:1	1052:1	4	for
LEAF_NODE	1052:1	1052:1	5	for
LEAF_NODE	1052:5	1052:5	4	(
FOR_INIT	1052:6	1052:11	4	s = 0 ;
EXPR	1052:6	1052:6	5	s = 0
ASSIGN	1052:6	1052:10	6	s = 0
LVAL	1052:6	1052:6	7	s
FIELD	1052:6	1052:6	8	s
LEAF_NODE	1052:6	1052:6	9	s
ASSIGN_OP	1052:8	1052:8	7	=
LEAF_NODE	1052:8	1052:8	8	=
RVAL	1052:10	1052:10	7	0
FIELD	1052:10	1052:10	8	0
LEAF_NODE	1052:10	1052:10	9	0
LEAF_NODE	1052:11	1052:11	5	;
CONDITION	1052:13	1052:13	4	s < spp
EXPR	1052:13	1052:17	5	s < spp
FIELD	1052:13	1052:13	6	s
LEAF_NODE	1052:13	1052:13	7	s
REL_OPERATOR	1052:15	1052:15	6	<
LEAF_NODE	1052:15	1052:15	7	<
FIELD	1052:17	1052:17	6	spp
LEAF_NODE	1052:17	1052:17	7	spp
LEAF_NODE	1052:20	1052:20	4	;
FOR_EXPR	1052:22	1052:22	4	s ++
EXPR	1052:22	1052:22	5	s ++
FIELD	1052:22	1052:23	6	s ++
LEAF_NODE	1052:22	1052:22	7	s
LEAF_NODE	1052:23	1052:23	7	++
LEAF_NODE	1052:25	1052:25	4	)
STATEMENTS	1052:27	1067:1	4	
LEAF_NODE	1052:27	1052:27	5	{
STATEMENTS	1053:2	1053:2	5	
ITERATION	1053:2	1053:42	6	
KEYWORD	1053:2	1053:2	7	for
LEAF_NODE	1053:2	1053:2	8	for
LEAF_NODE	1053:6	1053:6	7	(
FOR_INIT	1053:7	1053:14	7	row = 0 ;
EXPR	1053:7	1053:7	8	row = 0
ASSIGN	1053:7	1053:13	9	row = 0
LVAL	1053:7	1053:7	10	row
FIELD	1053:7	1053:7	11	row
LEAF_NODE	1053:7	1053:7	12	row
ASSIGN_OP	1053:11	1053:11	10	=
LEAF_NODE	1053:11	1053:11	11	=
RVAL	1053:13	1053:13	10	0
FIELD	1053:13	1053:13	11	0
LEAF_NODE	1053:13	1053:13	12	0
LEAF_NODE	1053:14	1053:14	8	;
CONDITION	1053:16	1053:16	7	row < imagelength
EXPR	1053:16	1053:22	8	row < imagelength
FIELD	1053:16	1053:16	9	row
LEAF_NODE	1053:16	1053:16	10	row
REL_OPERATOR	1053:20	1053:20	9	<
LEAF_NODE	1053:20	1053:20	10	<
FIELD	1053:22	1053:22	9	imagelength
LEAF_NODE	1053:22	1053:22	10	imagelength
LEAF_NODE	1053:33	1053:33	7	;
FOR_EXPR	1053:35	1053:35	7	row ++
EXPR	1053:35	1053:35	8	row ++
FIELD	1053:35	1053:38	9	row ++
LEAF_NODE	1053:35	1053:35	10	row
LEAF_NODE	1053:38	1053:38	10	++
LEAF_NODE	1053:40	1053:40	7	)
STATEMENTS	1053:42	1066:2	7	
LEAF_NODE	1053:42	1053:42	8	{
STATEMENTS	1054:3	1060:3	8	
SELECTION	1054:3	1054:57	9	
KEYWORD	1054:3	1054:3	10	if
LEAF_NODE	1054:3	1054:3	11	if
LEAF_NODE	1054:6	1054:6	10	(
CONDITION	1054:7	1054:7	10	TIFFReadScanline ( in , buf , row , s ) < 0 && ! ignore
EXPR	1054:7	1054:7	11	TIFFReadScanline ( in , buf , row , s ) < 0 && ! ignore
AND	1054:7	1054:48	12	TIFFReadScanline ( in , buf , row , s ) < 0 && ! ignore
EXPR	1054:7	1054:43	13	TIFFReadScanline ( in , buf , row , s ) < 0
FUNCTION_CALL	1054:7	1054:39	14	TIFFReadScanline ( in , buf , row , s )
CALLEE	1054:7	1054:7	15	TIFFReadScanline
LEAF_NODE	1054:7	1054:7	16	TIFFReadScanline
LEAF_NODE	1054:23	1054:23	15	(
ARGUMENT	1054:24	1054:24	15	in
FIELD	1054:24	1054:24	16	in
LEAF_NODE	1054:24	1054:24	17	in
LEAF_NODE	1054:26	1054:26	15	,
ARGUMENT	1054:28	1054:28	15	buf
FIELD	1054:28	1054:28	16	buf
LEAF_NODE	1054:28	1054:28	17	buf
LEAF_NODE	1054:31	1054:31	15	,
ARGUMENT	1054:33	1054:33	15	row
FIELD	1054:33	1054:33	16	row
LEAF_NODE	1054:33	1054:33	17	row
LEAF_NODE	1054:36	1054:36	15	,
ARGUMENT	1054:38	1054:38	15	s
FIELD	1054:38	1054:38	16	s
LEAF_NODE	1054:38	1054:38	17	s
LEAF_NODE	1054:39	1054:39	15	)
REL_OPERATOR	1054:41	1054:41	14	<
LEAF_NODE	1054:41	1054:41	15	<
FIELD	1054:43	1054:43	14	0
LEAF_NODE	1054:43	1054:43	15	0
LEAF_NODE	1054:45	1054:45	13	&&
EXPR	1054:48	1054:48	13	! ignore
UNARY_EXPR	1054:48	1054:49	14	! ignore
UNARY_OPERATOR	1054:48	1054:48	15	!
LEAF_NODE	1054:48	1054:48	16	!
FIELD	1054:49	1054:49	15	ignore
LEAF_NODE	1054:49	1054:49	16	ignore
LEAF_NODE	1054:55	1054:55	10	)
STATEMENTS	1054:57	1059:3	10	
LEAF_NODE	1054:57	1054:57	11	{
STATEMENTS	1055:4	1058:4	11	
EXPR_STATEMENT	1055:4	1057:28	12	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row ) ;
EXPR	1055:4	1055:4	13	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1055:4	1057:27	14	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
CALLEE	1055:4	1055:4	15	TIFFError
LEAF_NODE	1055:4	1055:4	16	TIFFError
LEAF_NODE	1055:13	1055:13	15	(
ARGUMENT	1055:14	1055:14	15	TIFFFileName ( in )
FUNCTION_CALL	1055:14	1055:29	16	TIFFFileName ( in )
CALLEE	1055:14	1055:14	17	TIFFFileName
LEAF_NODE	1055:14	1055:14	18	TIFFFileName
LEAF_NODE	1055:26	1055:26	17	(
ARGUMENT	1055:27	1055:27	17	in
FIELD	1055:27	1055:27	18	in
LEAF_NODE	1055:27	1055:27	19	in
LEAF_NODE	1055:29	1055:29	17	)
LEAF_NODE	1055:30	1055:30	15	,
ARGUMENT	1056:8	1056:8	15	"Error, can't read scanline %lu"
FIELD	1056:8	1056:8	16	"Error, can't read scanline %lu"
LEAF_NODE	1056:8	1056:8	17	"Error, can't read scanline %lu"
LEAF_NODE	1056:40	1056:40	15	,
ARGUMENT	1057:8	1057:24	15	( unsigned long ) row
LEAF_NODE	1057:8	1057:8	16	(
TYPE_NAME	1057:9	1057:18	16	unsigned long
LEAF_NODE	1057:9	1057:9	17	unsigned
LEAF_NODE	1057:18	1057:18	17	long
LEAF_NODE	1057:22	1057:22	16	)
FIELD	1057:24	1057:24	16	row
LEAF_NODE	1057:24	1057:24	17	row
LEAF_NODE	1057:27	1057:27	15	)
LEAF_NODE	1057:28	1057:28	13	;
JUMP_STATEMENT	1058:4	1058:12	12	goto bad ;
KEYWORD	1058:4	1058:4	13	goto
LEAF_NODE	1058:4	1058:4	14	goto
DESTINATION	1058:9	1058:9	13	bad
LEAF_NODE	1058:9	1058:9	14	bad
LEAF_NODE	1058:12	1058:12	13	;
LEAF_NODE	1059:3	1059:3	11	}
SELECTION	1060:3	1060:48	9	
KEYWORD	1060:3	1060:3	10	if
LEAF_NODE	1060:3	1060:3	11	if
LEAF_NODE	1060:6	1060:6	10	(
CONDITION	1060:7	1060:7	10	TIFFWriteScanline ( out , buf , row , s ) < 0
EXPR	1060:7	1060:45	11	TIFFWriteScanline ( out , buf , row , s ) < 0
FUNCTION_CALL	1060:7	1060:41	12	TIFFWriteScanline ( out , buf , row , s )
CALLEE	1060:7	1060:7	13	TIFFWriteScanline
LEAF_NODE	1060:7	1060:7	14	TIFFWriteScanline
LEAF_NODE	1060:24	1060:24	13	(
ARGUMENT	1060:25	1060:25	13	out
FIELD	1060:25	1060:25	14	out
LEAF_NODE	1060:25	1060:25	15	out
LEAF_NODE	1060:28	1060:28	13	,
ARGUMENT	1060:30	1060:30	13	buf
FIELD	1060:30	1060:30	14	buf
LEAF_NODE	1060:30	1060:30	15	buf
LEAF_NODE	1060:33	1060:33	13	,
ARGUMENT	1060:35	1060:35	13	row
FIELD	1060:35	1060:35	14	row
LEAF_NODE	1060:35	1060:35	15	row
LEAF_NODE	1060:38	1060:38	13	,
ARGUMENT	1060:40	1060:40	13	s
FIELD	1060:40	1060:40	14	s
LEAF_NODE	1060:40	1060:40	15	s
LEAF_NODE	1060:41	1060:41	13	)
REL_OPERATOR	1060:43	1060:43	12	<
LEAF_NODE	1060:43	1060:43	13	<
FIELD	1060:45	1060:45	12	0
LEAF_NODE	1060:45	1060:45	13	0
LEAF_NODE	1060:46	1060:46	10	)
STATEMENTS	1060:48	1065:3	10	
LEAF_NODE	1060:48	1060:48	11	{
STATEMENTS	1061:4	1064:4	11	
EXPR_STATEMENT	1061:4	1063:28	12	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row ) ;
EXPR	1061:4	1061:4	13	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1061:4	1063:27	14	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
CALLEE	1061:4	1061:4	15	TIFFError
LEAF_NODE	1061:4	1061:4	16	TIFFError
LEAF_NODE	1061:13	1061:13	15	(
ARGUMENT	1061:14	1061:14	15	TIFFFileName ( out )
FUNCTION_CALL	1061:14	1061:30	16	TIFFFileName ( out )
CALLEE	1061:14	1061:14	17	TIFFFileName
LEAF_NODE	1061:14	1061:14	18	TIFFFileName
LEAF_NODE	1061:26	1061:26	17	(
ARGUMENT	1061:27	1061:27	17	out
FIELD	1061:27	1061:27	18	out
LEAF_NODE	1061:27	1061:27	19	out
LEAF_NODE	1061:30	1061:30	17	)
LEAF_NODE	1061:31	1061:31	15	,
ARGUMENT	1062:8	1062:8	15	"Error, can't write scanline %lu"
FIELD	1062:8	1062:8	16	"Error, can't write scanline %lu"
LEAF_NODE	1062:8	1062:8	17	"Error, can't write scanline %lu"
LEAF_NODE	1062:41	1062:41	15	,
ARGUMENT	1063:8	1063:24	15	( unsigned long ) row
LEAF_NODE	1063:8	1063:8	16	(
TYPE_NAME	1063:9	1063:18	16	unsigned long
LEAF_NODE	1063:9	1063:9	17	unsigned
LEAF_NODE	1063:18	1063:18	17	long
LEAF_NODE	1063:22	1063:22	16	)
FIELD	1063:24	1063:24	16	row
LEAF_NODE	1063:24	1063:24	17	row
LEAF_NODE	1063:27	1063:27	15	)
LEAF_NODE	1063:28	1063:28	13	;
JUMP_STATEMENT	1064:4	1064:12	12	goto bad ;
KEYWORD	1064:4	1064:4	13	goto
LEAF_NODE	1064:4	1064:4	14	goto
DESTINATION	1064:9	1064:9	13	bad
LEAF_NODE	1064:9	1064:9	14	bad
LEAF_NODE	1064:12	1064:12	13	;
LEAF_NODE	1065:3	1065:3	11	}
LEAF_NODE	1066:2	1066:2	8	}
LEAF_NODE	1067:1	1067:1	5	}
EXPR_STATEMENT	1068:1	1068:15	3	_TIFFfree ( buf ) ;
EXPR	1068:1	1068:1	4	_TIFFfree ( buf )
FUNCTION_CALL	1068:1	1068:14	5	_TIFFfree ( buf )
CALLEE	1068:1	1068:1	6	_TIFFfree
LEAF_NODE	1068:1	1068:1	7	_TIFFfree
LEAF_NODE	1068:10	1068:10	6	(
ARGUMENT	1068:11	1068:11	6	buf
FIELD	1068:11	1068:11	7	buf
LEAF_NODE	1068:11	1068:11	8	buf
LEAF_NODE	1068:14	1068:14	6	)
LEAF_NODE	1068:15	1068:15	4	;
JUMP_STATEMENT	1069:1	1069:9	3	return 1 ;
KEYWORD	1069:1	1069:1	4	return
LEAF_NODE	1069:1	1069:1	5	return
DESTINATION	1069:8	1069:8	4	1
EXPR	1069:8	1069:8	5	1
FIELD	1069:8	1069:8	6	1
LEAF_NODE	1069:8	1069:8	7	1
LEAF_NODE	1069:9	1069:9	4	;
LABEL	1070:0	1070:3	3	bad :
LEAF_NODE	1070:0	1070:0	4	bad
LEAF_NODE	1070:3	1070:3	4	:
EXPR_STATEMENT	1071:1	1071:15	3	_TIFFfree ( buf ) ;
EXPR	1071:1	1071:1	4	_TIFFfree ( buf )
FUNCTION_CALL	1071:1	1071:14	5	_TIFFfree ( buf )
CALLEE	1071:1	1071:1	6	_TIFFfree
LEAF_NODE	1071:1	1071:1	7	_TIFFfree
LEAF_NODE	1071:10	1071:10	6	(
ARGUMENT	1071:11	1071:11	6	buf
FIELD	1071:11	1071:11	7	buf
LEAF_NODE	1071:11	1071:11	8	buf
LEAF_NODE	1071:14	1071:14	6	)
LEAF_NODE	1071:15	1071:15	4	;
JUMP_STATEMENT	1072:1	1072:9	3	return 0 ;
KEYWORD	1072:1	1072:1	4	return
LEAF_NODE	1072:1	1072:1	5	return
DESTINATION	1072:8	1072:8	4	0
EXPR	1072:8	1072:8	5	0
FIELD	1072:8	1072:8	6	0
LEAF_NODE	1072:8	1072:8	7	0
LEAF_NODE	1072:9	1072:9	4	;
LEAF_NODE	1073:0	1073:0	2	}
FUNCTION_DEF	0:0	1136:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1078:0	1078:0	2	DECLAREcpFunc
LEAF_NODE	1078:0	1078:0	3	DECLAREcpFunc
PARAMETER_LIST	1078:13	1078:36	2	( cpContig2SeparateByRow )
LEAF_NODE	1078:13	1078:13	3	(
PARAMETER_DECL	1078:14	1078:14	3	cpContig2SeparateByRow
LEAF_NODE	1078:14	1078:14	4	cpContig2SeparateByRow
LEAF_NODE	1078:36	1078:36	3	)
LEAF_NODE	1079:0	1079:0	2	{
STATEMENTS	1080:1	1135:1	2	
SIMPLE_DECL	1080:1	1080:46	3	tsize_t scanlinesizein ; scanlinesizein = TIFFScanlineSize ( in ) ;
VAR_DECL	1080:1	1080:9	4	tsize_t scanlinesizein ; scanlinesizein = TIFFScanlineSize ( in )
TYPE	1080:1	1080:1	5	tsize_t
TYPE_NAME	1080:1	1080:1	6	tsize_t
LEAF_NODE	1080:1	1080:1	7	tsize_t
NAME	1080:9	1080:9	5	scanlinesizein
LEAF_NODE	1080:9	1080:9	6	scanlinesizein
LEAF_NODE	0:0	0:0	5	;
INIT	1080:9	1080:9	5	scanlinesizein = TIFFScanlineSize ( in )
ASSIGN	1080:9	1080:26	6	scanlinesizein = TIFFScanlineSize ( in )
LVAL	1080:9	1080:9	7	scanlinesizein
NAME	1080:9	1080:9	8	scanlinesizein
LEAF_NODE	1080:9	1080:9	9	scanlinesizein
ASSIGN_OP	1080:24	1080:24	7	=
LEAF_NODE	1080:24	1080:24	8	=
RVAL	1080:26	1080:26	7	TIFFScanlineSize ( in )
FUNCTION_CALL	1080:26	1080:45	8	TIFFScanlineSize ( in )
CALLEE	1080:26	1080:26	9	TIFFScanlineSize
LEAF_NODE	1080:26	1080:26	10	TIFFScanlineSize
LEAF_NODE	1080:42	1080:42	9	(
ARGUMENT	1080:43	1080:43	9	in
FIELD	1080:43	1080:43	10	in
LEAF_NODE	1080:43	1080:43	11	in
LEAF_NODE	1080:45	1080:45	9	)
LEAF_NODE	1080:46	1080:46	4	;
SIMPLE_DECL	1081:1	1081:48	3	tsize_t scanlinesizeout ; scanlinesizeout = TIFFScanlineSize ( out ) ;
VAR_DECL	1081:1	1081:9	4	tsize_t scanlinesizeout ; scanlinesizeout = TIFFScanlineSize ( out )
TYPE	1081:1	1081:1	5	tsize_t
TYPE_NAME	1081:1	1081:1	6	tsize_t
LEAF_NODE	1081:1	1081:1	7	tsize_t
NAME	1081:9	1081:9	5	scanlinesizeout
LEAF_NODE	1081:9	1081:9	6	scanlinesizeout
LEAF_NODE	0:0	0:0	5	;
INIT	1081:9	1081:9	5	scanlinesizeout = TIFFScanlineSize ( out )
ASSIGN	1081:9	1081:27	6	scanlinesizeout = TIFFScanlineSize ( out )
LVAL	1081:9	1081:9	7	scanlinesizeout
NAME	1081:9	1081:9	8	scanlinesizeout
LEAF_NODE	1081:9	1081:9	9	scanlinesizeout
ASSIGN_OP	1081:25	1081:25	7	=
LEAF_NODE	1081:25	1081:25	8	=
RVAL	1081:27	1081:27	7	TIFFScanlineSize ( out )
FUNCTION_CALL	1081:27	1081:47	8	TIFFScanlineSize ( out )
CALLEE	1081:27	1081:27	9	TIFFScanlineSize
LEAF_NODE	1081:27	1081:27	10	TIFFScanlineSize
LEAF_NODE	1081:43	1081:43	9	(
ARGUMENT	1081:44	1081:44	9	out
FIELD	1081:44	1081:44	10	out
LEAF_NODE	1081:44	1081:44	11	out
LEAF_NODE	1081:47	1081:47	9	)
LEAF_NODE	1081:48	1081:48	4	;
SIMPLE_DECL	1082:1	1082:14	3	tdata_t inbuf ;
VAR_DECL	1082:1	1082:9	4	tdata_t inbuf
TYPE	1082:1	1082:1	5	tdata_t
TYPE_NAME	1082:1	1082:1	6	tdata_t
LEAF_NODE	1082:1	1082:1	7	tdata_t
NAME	1082:9	1082:9	5	inbuf
LEAF_NODE	1082:9	1082:9	6	inbuf
LEAF_NODE	1082:14	1082:14	4	;
SIMPLE_DECL	1083:1	1083:15	3	tdata_t outbuf ;
VAR_DECL	1083:1	1083:9	4	tdata_t outbuf
TYPE	1083:1	1083:1	5	tdata_t
TYPE_NAME	1083:1	1083:1	6	tdata_t
LEAF_NODE	1083:1	1083:1	7	tdata_t
NAME	1083:9	1083:9	5	outbuf
LEAF_NODE	1083:9	1083:9	6	outbuf
LEAF_NODE	1083:15	1083:15	4	;
LEAF_NODE	1084:1	1084:1	3	register
SIMPLE_DECL	1084:10	1084:27	3	uint8 * inp , uint8 * outp ;
INIT_DECL_LIST	1084:10	1084:10	4	uint8 * inp , uint8 * outp
VAR_DECL	1084:10	1084:17	5	uint8 * inp
TYPE	1084:10	1084:16	6	uint8 *
TYPE_NAME	1084:10	1084:10	7	uint8
LEAF_NODE	1084:10	1084:10	8	uint8
POINTER	1084:16	1084:16	7	*
LEAF_NODE	1084:16	1084:16	8	*
NAME	1084:17	1084:17	6	inp
LEAF_NODE	1084:17	1084:17	7	inp
LEAF_NODE	1084:20	1084:20	5	,
VAR_DECL	1084:10	1084:23	5	uint8 * outp
TYPE	1084:10	1084:22	6	uint8 *
TYPE_NAME	1084:10	1084:10	7	uint8
LEAF_NODE	1084:10	1084:10	8	uint8
POINTER	1084:22	1084:22	7	*
LEAF_NODE	1084:22	1084:22	8	*
NAME	1084:23	1084:23	6	outp
LEAF_NODE	1084:23	1084:23	7	outp
LEAF_NODE	1084:27	1084:27	4	;
LEAF_NODE	1085:1	1085:1	3	register
SIMPLE_DECL	1085:10	1085:18	3	uint32 n ;
VAR_DECL	1085:10	1085:17	4	uint32 n
TYPE	1085:10	1085:10	5	uint32
TYPE_NAME	1085:10	1085:10	6	uint32
LEAF_NODE	1085:10	1085:10	7	uint32
NAME	1085:17	1085:17	5	n
LEAF_NODE	1085:17	1085:17	6	n
LEAF_NODE	1085:18	1085:18	4	;
SIMPLE_DECL	1086:1	1086:11	3	uint32 row ;
VAR_DECL	1086:1	1086:8	4	uint32 row
TYPE	1086:1	1086:1	5	uint32
TYPE_NAME	1086:1	1086:1	6	uint32
LEAF_NODE	1086:1	1086:1	7	uint32
NAME	1086:8	1086:8	5	row
LEAF_NODE	1086:8	1086:8	6	row
LEAF_NODE	1086:11	1086:11	4	;
SIMPLE_DECL	1087:1	1087:12	3	tsample_t s ;
VAR_DECL	1087:1	1087:11	4	tsample_t s
TYPE	1087:1	1087:1	5	tsample_t
TYPE_NAME	1087:1	1087:1	6	tsample_t
LEAF_NODE	1087:1	1087:1	7	tsample_t
NAME	1087:11	1087:11	5	s
LEAF_NODE	1087:11	1087:11	6	s
LEAF_NODE	1087:12	1087:12	4	;
SIMPLE_DECL	1088:8	1088:22	3	uint16 bps ; bps = 0 ;
VAR_DECL	1088:8	1088:15	4	uint16 bps ; bps = 0
TYPE	1088:8	1088:8	5	uint16
TYPE_NAME	1088:8	1088:8	6	uint16
LEAF_NODE	1088:8	1088:8	7	uint16
NAME	1088:15	1088:15	5	bps
LEAF_NODE	1088:15	1088:15	6	bps
LEAF_NODE	0:0	0:0	5	;
INIT	1088:15	1088:15	5	bps = 0
ASSIGN	1088:15	1088:21	6	bps = 0
LVAL	1088:15	1088:15	7	bps
NAME	1088:15	1088:15	8	bps
LEAF_NODE	1088:15	1088:15	9	bps
ASSIGN_OP	1088:19	1088:19	7	=
LEAF_NODE	1088:19	1088:19	8	=
RVAL	1088:21	1088:21	7	0
FIELD	1088:21	1088:21	8	0
LEAF_NODE	1088:21	1088:21	9	0
LEAF_NODE	1088:22	1088:22	4	;
EXPR_STATEMENT	1090:8	1090:60	3	( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	1090:8	1090:15	4	( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps )
LEAF_NODE	1090:8	1090:8	5	(
TYPE_NAME	1090:9	1090:9	5	void
LEAF_NODE	1090:9	1090:9	6	void
LEAF_NODE	1090:13	1090:13	5	)
FUNCTION_CALL	1090:15	1090:59	5	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	1090:15	1090:15	6	TIFFGetField
LEAF_NODE	1090:15	1090:15	7	TIFFGetField
LEAF_NODE	1090:27	1090:27	6	(
ARGUMENT	1090:28	1090:28	6	in
FIELD	1090:28	1090:28	7	in
LEAF_NODE	1090:28	1090:28	8	in
LEAF_NODE	1090:30	1090:30	6	,
ARGUMENT	1090:32	1090:32	6	TIFFTAG_BITSPERSAMPLE
FIELD	1090:32	1090:32	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1090:32	1090:32	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1090:53	1090:53	6	,
ARGUMENT	1090:55	1090:55	6	& bps
UNARY_EXPR	1090:55	1090:56	7	& bps
UNARY_OPERATOR	1090:55	1090:55	8	&
LEAF_NODE	1090:55	1090:55	9	&
FIELD	1090:56	1090:56	8	bps
LEAF_NODE	1090:56	1090:56	9	bps
LEAF_NODE	1090:59	1090:59	6	)
LEAF_NODE	1090:60	1090:60	4	;
SELECTION	1091:8	1092:8	3	
KEYWORD	1091:8	1091:8	4	if
LEAF_NODE	1091:8	1091:8	5	if
LEAF_NODE	1091:10	1091:10	4	(
CONDITION	1091:12	1091:12	4	bps != 8
EXPR	1091:12	1091:19	5	bps != 8
FIELD	1091:12	1091:12	6	bps
LEAF_NODE	1091:12	1091:12	7	bps
EQ_OPERATOR	1091:16	1091:16	6	!=
LEAF_NODE	1091:16	1091:16	7	!=
FIELD	1091:19	1091:19	6	8
LEAF_NODE	1091:19	1091:19	7	8
LEAF_NODE	1091:21	1091:21	4	)
STATEMENTS	1092:8	1097:8	4	
LEAF_NODE	1092:8	1092:8	5	{
STATEMENTS	1093:12	1096:12	5	
EXPR_STATEMENT	1093:12	1095:47	6	TIFFError ( TIFFFileName ( in ) , "Error, can only handle BitsPerSample=8 in %s" , "cpContig2SeparateByRow" ) ;
EXPR	1093:12	1093:12	7	TIFFError ( TIFFFileName ( in ) , "Error, can only handle BitsPerSample=8 in %s" , "cpContig2SeparateByRow" )
FUNCTION_CALL	1093:12	1095:46	8	TIFFError ( TIFFFileName ( in ) , "Error, can only handle BitsPerSample=8 in %s" , "cpContig2SeparateByRow" )
CALLEE	1093:12	1093:12	9	TIFFError
LEAF_NODE	1093:12	1093:12	10	TIFFError
LEAF_NODE	1093:21	1093:21	9	(
ARGUMENT	1093:22	1093:22	9	TIFFFileName ( in )
FUNCTION_CALL	1093:22	1093:37	10	TIFFFileName ( in )
CALLEE	1093:22	1093:22	11	TIFFFileName
LEAF_NODE	1093:22	1093:22	12	TIFFFileName
LEAF_NODE	1093:34	1093:34	11	(
ARGUMENT	1093:35	1093:35	11	in
FIELD	1093:35	1093:35	12	in
LEAF_NODE	1093:35	1093:35	13	in
LEAF_NODE	1093:37	1093:37	11	)
LEAF_NODE	1093:38	1093:38	9	,
ARGUMENT	1094:22	1094:22	9	"Error, can only handle BitsPerSample=8 in %s"
FIELD	1094:22	1094:22	10	"Error, can only handle BitsPerSample=8 in %s"
LEAF_NODE	1094:22	1094:22	11	"Error, can only handle BitsPerSample=8 in %s"
LEAF_NODE	1094:68	1094:68	9	,
ARGUMENT	1095:22	1095:22	9	"cpContig2SeparateByRow"
FIELD	1095:22	1095:22	10	"cpContig2SeparateByRow"
LEAF_NODE	1095:22	1095:22	11	"cpContig2SeparateByRow"
LEAF_NODE	1095:46	1095:46	9	)
LEAF_NODE	1095:47	1095:47	7	;
JUMP_STATEMENT	1096:12	1096:20	6	return 0 ;
KEYWORD	1096:12	1096:12	7	return
LEAF_NODE	1096:12	1096:12	8	return
DESTINATION	1096:19	1096:19	7	0
EXPR	1096:19	1096:19	8	0
FIELD	1096:19	1096:19	9	0
LEAF_NODE	1096:19	1096:19	10	0
LEAF_NODE	1096:20	1096:20	7	;
LEAF_NODE	1097:8	1097:8	5	}
EXPR_STATEMENT	1099:1	1099:36	3	inbuf = _TIFFmalloc ( scanlinesizein ) ;
EXPR	1099:1	1099:1	4	inbuf = _TIFFmalloc ( scanlinesizein )
ASSIGN	1099:1	1099:9	5	inbuf = _TIFFmalloc ( scanlinesizein )
LVAL	1099:1	1099:1	6	inbuf
FIELD	1099:1	1099:1	7	inbuf
LEAF_NODE	1099:1	1099:1	8	inbuf
ASSIGN_OP	1099:7	1099:7	6	=
LEAF_NODE	1099:7	1099:7	7	=
RVAL	1099:9	1099:9	6	_TIFFmalloc ( scanlinesizein )
FUNCTION_CALL	1099:9	1099:35	7	_TIFFmalloc ( scanlinesizein )
CALLEE	1099:9	1099:9	8	_TIFFmalloc
LEAF_NODE	1099:9	1099:9	9	_TIFFmalloc
LEAF_NODE	1099:20	1099:20	8	(
ARGUMENT	1099:21	1099:21	8	scanlinesizein
FIELD	1099:21	1099:21	9	scanlinesizein
LEAF_NODE	1099:21	1099:21	10	scanlinesizein
LEAF_NODE	1099:35	1099:35	8	)
LEAF_NODE	1099:36	1099:36	4	;
EXPR_STATEMENT	1100:1	1100:38	3	outbuf = _TIFFmalloc ( scanlinesizeout ) ;
EXPR	1100:1	1100:1	4	outbuf = _TIFFmalloc ( scanlinesizeout )
ASSIGN	1100:1	1100:10	5	outbuf = _TIFFmalloc ( scanlinesizeout )
LVAL	1100:1	1100:1	6	outbuf
FIELD	1100:1	1100:1	7	outbuf
LEAF_NODE	1100:1	1100:1	8	outbuf
ASSIGN_OP	1100:8	1100:8	6	=
LEAF_NODE	1100:8	1100:8	7	=
RVAL	1100:10	1100:10	6	_TIFFmalloc ( scanlinesizeout )
FUNCTION_CALL	1100:10	1100:37	7	_TIFFmalloc ( scanlinesizeout )
CALLEE	1100:10	1100:10	8	_TIFFmalloc
LEAF_NODE	1100:10	1100:10	9	_TIFFmalloc
LEAF_NODE	1100:21	1100:21	8	(
ARGUMENT	1100:22	1100:22	8	scanlinesizeout
FIELD	1100:22	1100:22	9	scanlinesizeout
LEAF_NODE	1100:22	1100:22	10	scanlinesizeout
LEAF_NODE	1100:37	1100:37	8	)
LEAF_NODE	1100:38	1100:38	4	;
SELECTION	1101:1	1102:2	3	
KEYWORD	1101:1	1101:1	4	if
LEAF_NODE	1101:1	1101:1	5	if
LEAF_NODE	1101:4	1101:4	4	(
CONDITION	1101:5	1101:5	4	! inbuf || ! outbuf
EXPR	1101:5	1101:5	5	! inbuf || ! outbuf
OR	1101:5	1101:15	6	! inbuf || ! outbuf
EXPR	1101:5	1101:5	7	! inbuf
UNARY_EXPR	1101:5	1101:6	8	! inbuf
UNARY_OPERATOR	1101:5	1101:5	9	!
LEAF_NODE	1101:5	1101:5	10	!
FIELD	1101:6	1101:6	9	inbuf
LEAF_NODE	1101:6	1101:6	10	inbuf
LEAF_NODE	1101:12	1101:12	7	||
EXPR	1101:15	1101:15	7	! outbuf
UNARY_EXPR	1101:15	1101:16	8	! outbuf
UNARY_OPERATOR	1101:15	1101:15	9	!
LEAF_NODE	1101:15	1101:15	10	!
FIELD	1101:16	1101:16	9	outbuf
LEAF_NODE	1101:16	1101:16	10	outbuf
LEAF_NODE	1101:22	1101:22	4	)
STATEMENTS	1102:2	1102:2	4	
JUMP_STATEMENT	1102:2	1102:10	5	goto bad ;
KEYWORD	1102:2	1102:2	6	goto
LEAF_NODE	1102:2	1102:2	7	goto
DESTINATION	1102:7	1102:7	6	bad
LEAF_NODE	1102:7	1102:7	7	bad
LEAF_NODE	1102:10	1102:10	6	;
EXPR_STATEMENT	1103:1	1103:38	3	_TIFFmemset ( inbuf , 0 , scanlinesizein ) ;
EXPR	1103:1	1103:1	4	_TIFFmemset ( inbuf , 0 , scanlinesizein )
FUNCTION_CALL	1103:1	1103:37	5	_TIFFmemset ( inbuf , 0 , scanlinesizein )
CALLEE	1103:1	1103:1	6	_TIFFmemset
LEAF_NODE	1103:1	1103:1	7	_TIFFmemset
LEAF_NODE	1103:12	1103:12	6	(
ARGUMENT	1103:13	1103:13	6	inbuf
FIELD	1103:13	1103:13	7	inbuf
LEAF_NODE	1103:13	1103:13	8	inbuf
LEAF_NODE	1103:18	1103:18	6	,
ARGUMENT	1103:20	1103:20	6	0
FIELD	1103:20	1103:20	7	0
LEAF_NODE	1103:20	1103:20	8	0
LEAF_NODE	1103:21	1103:21	6	,
ARGUMENT	1103:23	1103:23	6	scanlinesizein
FIELD	1103:23	1103:23	7	scanlinesizein
LEAF_NODE	1103:23	1103:23	8	scanlinesizein
LEAF_NODE	1103:37	1103:37	6	)
LEAF_NODE	1103:38	1103:38	4	;
EXPR_STATEMENT	1104:1	1104:40	3	_TIFFmemset ( outbuf , 0 , scanlinesizeout ) ;
EXPR	1104:1	1104:1	4	_TIFFmemset ( outbuf , 0 , scanlinesizeout )
FUNCTION_CALL	1104:1	1104:39	5	_TIFFmemset ( outbuf , 0 , scanlinesizeout )
CALLEE	1104:1	1104:1	6	_TIFFmemset
LEAF_NODE	1104:1	1104:1	7	_TIFFmemset
LEAF_NODE	1104:12	1104:12	6	(
ARGUMENT	1104:13	1104:13	6	outbuf
FIELD	1104:13	1104:13	7	outbuf
LEAF_NODE	1104:13	1104:13	8	outbuf
LEAF_NODE	1104:19	1104:19	6	,
ARGUMENT	1104:21	1104:21	6	0
FIELD	1104:21	1104:21	7	0
LEAF_NODE	1104:21	1104:21	8	0
LEAF_NODE	1104:22	1104:22	6	,
ARGUMENT	1104:24	1104:24	6	scanlinesizeout
FIELD	1104:24	1104:24	7	scanlinesizeout
LEAF_NODE	1104:24	1104:24	8	scanlinesizeout
LEAF_NODE	1104:39	1104:39	6	)
LEAF_NODE	1104:40	1104:40	4	;
ITERATION	1106:1	1106:27	3	
KEYWORD	1106:1	1106:1	4	for
LEAF_NODE	1106:1	1106:1	5	for
LEAF_NODE	1106:5	1106:5	4	(
FOR_INIT	1106:6	1106:11	4	s = 0 ;
EXPR	1106:6	1106:6	5	s = 0
ASSIGN	1106:6	1106:10	6	s = 0
LVAL	1106:6	1106:6	7	s
FIELD	1106:6	1106:6	8	s
LEAF_NODE	1106:6	1106:6	9	s
ASSIGN_OP	1106:8	1106:8	7	=
LEAF_NODE	1106:8	1106:8	8	=
RVAL	1106:10	1106:10	7	0
FIELD	1106:10	1106:10	8	0
LEAF_NODE	1106:10	1106:10	9	0
LEAF_NODE	1106:11	1106:11	5	;
CONDITION	1106:13	1106:13	4	s < spp
EXPR	1106:13	1106:17	5	s < spp
FIELD	1106:13	1106:13	6	s
LEAF_NODE	1106:13	1106:13	7	s
REL_OPERATOR	1106:15	1106:15	6	<
LEAF_NODE	1106:15	1106:15	7	<
FIELD	1106:17	1106:17	6	spp
LEAF_NODE	1106:17	1106:17	7	spp
LEAF_NODE	1106:20	1106:20	4	;
FOR_EXPR	1106:22	1106:22	4	s ++
EXPR	1106:22	1106:22	5	s ++
FIELD	1106:22	1106:23	6	s ++
LEAF_NODE	1106:22	1106:22	7	s
LEAF_NODE	1106:23	1106:23	7	++
LEAF_NODE	1106:25	1106:25	4	)
STATEMENTS	1106:27	1128:1	4	
LEAF_NODE	1106:27	1106:27	5	{
STATEMENTS	1107:2	1107:2	5	
ITERATION	1107:2	1107:42	6	
KEYWORD	1107:2	1107:2	7	for
LEAF_NODE	1107:2	1107:2	8	for
LEAF_NODE	1107:6	1107:6	7	(
FOR_INIT	1107:7	1107:14	7	row = 0 ;
EXPR	1107:7	1107:7	8	row = 0
ASSIGN	1107:7	1107:13	9	row = 0
LVAL	1107:7	1107:7	10	row
FIELD	1107:7	1107:7	11	row
LEAF_NODE	1107:7	1107:7	12	row
ASSIGN_OP	1107:11	1107:11	10	=
LEAF_NODE	1107:11	1107:11	11	=
RVAL	1107:13	1107:13	10	0
FIELD	1107:13	1107:13	11	0
LEAF_NODE	1107:13	1107:13	12	0
LEAF_NODE	1107:14	1107:14	8	;
CONDITION	1107:16	1107:16	7	row < imagelength
EXPR	1107:16	1107:22	8	row < imagelength
FIELD	1107:16	1107:16	9	row
LEAF_NODE	1107:16	1107:16	10	row
REL_OPERATOR	1107:20	1107:20	9	<
LEAF_NODE	1107:20	1107:20	10	<
FIELD	1107:22	1107:22	9	imagelength
LEAF_NODE	1107:22	1107:22	10	imagelength
LEAF_NODE	1107:33	1107:33	7	;
FOR_EXPR	1107:35	1107:35	7	row ++
EXPR	1107:35	1107:35	8	row ++
FIELD	1107:35	1107:38	9	row ++
LEAF_NODE	1107:35	1107:35	10	row
LEAF_NODE	1107:38	1107:38	10	++
LEAF_NODE	1107:40	1107:40	7	)
STATEMENTS	1107:42	1127:2	7	
LEAF_NODE	1107:42	1107:42	8	{
STATEMENTS	1108:3	1121:3	8	
SELECTION	1108:3	1109:19	9	
KEYWORD	1108:3	1108:3	10	if
LEAF_NODE	1108:3	1108:3	11	if
LEAF_NODE	1108:6	1108:6	10	(
CONDITION	1108:7	1108:7	10	TIFFReadScanline ( in , inbuf , row , 0 ) < 0 && ! ignore
EXPR	1108:7	1108:7	11	TIFFReadScanline ( in , inbuf , row , 0 ) < 0 && ! ignore
AND	1108:7	1109:10	12	TIFFReadScanline ( in , inbuf , row , 0 ) < 0 && ! ignore
EXPR	1108:7	1108:45	13	TIFFReadScanline ( in , inbuf , row , 0 ) < 0
FUNCTION_CALL	1108:7	1108:41	14	TIFFReadScanline ( in , inbuf , row , 0 )
CALLEE	1108:7	1108:7	15	TIFFReadScanline
LEAF_NODE	1108:7	1108:7	16	TIFFReadScanline
LEAF_NODE	1108:23	1108:23	15	(
ARGUMENT	1108:24	1108:24	15	in
FIELD	1108:24	1108:24	16	in
LEAF_NODE	1108:24	1108:24	17	in
LEAF_NODE	1108:26	1108:26	15	,
ARGUMENT	1108:28	1108:28	15	inbuf
FIELD	1108:28	1108:28	16	inbuf
LEAF_NODE	1108:28	1108:28	17	inbuf
LEAF_NODE	1108:33	1108:33	15	,
ARGUMENT	1108:35	1108:35	15	row
FIELD	1108:35	1108:35	16	row
LEAF_NODE	1108:35	1108:35	17	row
LEAF_NODE	1108:38	1108:38	15	,
ARGUMENT	1108:40	1108:40	15	0
FIELD	1108:40	1108:40	16	0
LEAF_NODE	1108:40	1108:40	17	0
LEAF_NODE	1108:41	1108:41	15	)
REL_OPERATOR	1108:43	1108:43	14	<
LEAF_NODE	1108:43	1108:43	15	<
FIELD	1108:45	1108:45	14	0
LEAF_NODE	1108:45	1108:45	15	0
LEAF_NODE	1109:7	1109:7	13	&&
EXPR	1109:10	1109:10	13	! ignore
UNARY_EXPR	1109:10	1109:11	14	! ignore
UNARY_OPERATOR	1109:10	1109:10	15	!
LEAF_NODE	1109:10	1109:10	16	!
FIELD	1109:11	1109:11	15	ignore
LEAF_NODE	1109:11	1109:11	16	ignore
LEAF_NODE	1109:17	1109:17	10	)
STATEMENTS	1109:19	1114:3	10	
LEAF_NODE	1109:19	1109:19	11	{
STATEMENTS	1110:4	1113:4	11	
EXPR_STATEMENT	1110:4	1112:28	12	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row ) ;
EXPR	1110:4	1110:4	13	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1110:4	1112:27	14	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
CALLEE	1110:4	1110:4	15	TIFFError
LEAF_NODE	1110:4	1110:4	16	TIFFError
LEAF_NODE	1110:13	1110:13	15	(
ARGUMENT	1110:14	1110:14	15	TIFFFileName ( in )
FUNCTION_CALL	1110:14	1110:29	16	TIFFFileName ( in )
CALLEE	1110:14	1110:14	17	TIFFFileName
LEAF_NODE	1110:14	1110:14	18	TIFFFileName
LEAF_NODE	1110:26	1110:26	17	(
ARGUMENT	1110:27	1110:27	17	in
FIELD	1110:27	1110:27	18	in
LEAF_NODE	1110:27	1110:27	19	in
LEAF_NODE	1110:29	1110:29	17	)
LEAF_NODE	1110:30	1110:30	15	,
ARGUMENT	1111:8	1111:8	15	"Error, can't read scanline %lu"
FIELD	1111:8	1111:8	16	"Error, can't read scanline %lu"
LEAF_NODE	1111:8	1111:8	17	"Error, can't read scanline %lu"
LEAF_NODE	1111:40	1111:40	15	,
ARGUMENT	1112:8	1112:24	15	( unsigned long ) row
LEAF_NODE	1112:8	1112:8	16	(
TYPE_NAME	1112:9	1112:18	16	unsigned long
LEAF_NODE	1112:9	1112:9	17	unsigned
LEAF_NODE	1112:18	1112:18	17	long
LEAF_NODE	1112:22	1112:22	16	)
FIELD	1112:24	1112:24	16	row
LEAF_NODE	1112:24	1112:24	17	row
LEAF_NODE	1112:27	1112:27	15	)
LEAF_NODE	1112:28	1112:28	13	;
JUMP_STATEMENT	1113:4	1113:12	12	goto bad ;
KEYWORD	1113:4	1113:4	13	goto
LEAF_NODE	1113:4	1113:4	14	goto
DESTINATION	1113:9	1113:9	13	bad
LEAF_NODE	1113:9	1113:9	14	bad
LEAF_NODE	1113:12	1113:12	13	;
LEAF_NODE	1114:3	1114:3	11	}
EXPR_STATEMENT	1115:3	1115:28	9	inp = ( ( uint8 * ) inbuf ) + s ;
EXPR	1115:3	1115:3	10	inp = ( ( uint8 * ) inbuf ) + s
ASSIGN	1115:3	1115:9	11	inp = ( ( uint8 * ) inbuf ) + s
LVAL	1115:3	1115:3	12	inp
FIELD	1115:3	1115:3	13	inp
LEAF_NODE	1115:3	1115:3	14	inp
ASSIGN_OP	1115:7	1115:7	12	=
LEAF_NODE	1115:7	1115:7	13	=
RVAL	1115:9	1115:27	12	( ( uint8 * ) inbuf ) + s
LEAF_NODE	1115:9	1115:9	13	(
LEAF_NODE	1115:10	1115:10	13	(
TYPE_NAME	1115:11	1115:11	13	uint8
LEAF_NODE	1115:11	1115:11	14	uint8
LEAF_NODE	1115:16	1115:16	13	*
LEAF_NODE	1115:17	1115:17	13	)
FIELD	1115:18	1115:18	13	inbuf
LEAF_NODE	1115:18	1115:18	14	inbuf
LEAF_NODE	1115:23	1115:23	13	)
LEAF_NODE	1115:25	1115:25	13	+
FIELD	1115:27	1115:27	13	s
LEAF_NODE	1115:27	1115:27	14	s
LEAF_NODE	1115:28	1115:28	10	;
EXPR_STATEMENT	1116:3	1116:24	9	outp = ( uint8 * ) outbuf ;
EXPR	1116:3	1116:3	10	outp = ( uint8 * ) outbuf
ASSIGN	1116:3	1116:10	11	outp = ( uint8 * ) outbuf
LVAL	1116:3	1116:3	12	outp
FIELD	1116:3	1116:3	13	outp
LEAF_NODE	1116:3	1116:3	14	outp
ASSIGN_OP	1116:8	1116:8	12	=
LEAF_NODE	1116:8	1116:8	13	=
RVAL	1116:10	1116:18	12	( uint8 * ) outbuf
LEAF_NODE	1116:10	1116:10	13	(
TYPE_NAME	1116:11	1116:11	13	uint8
LEAF_NODE	1116:11	1116:11	14	uint8
LEAF_NODE	1116:16	1116:16	13	*
LEAF_NODE	1116:17	1116:17	13	)
FIELD	1116:18	1116:18	13	outbuf
LEAF_NODE	1116:18	1116:18	14	outbuf
LEAF_NODE	1116:24	1116:24	10	;
ITERATION	1117:3	1117:34	9	
KEYWORD	1117:3	1117:3	10	for
LEAF_NODE	1117:3	1117:3	11	for
LEAF_NODE	1117:7	1117:7	10	(
FOR_INIT	1117:8	1117:22	10	n = imagewidth ;
EXPR	1117:8	1117:8	11	n = imagewidth
ASSIGN	1117:8	1117:12	12	n = imagewidth
LVAL	1117:8	1117:8	13	n
FIELD	1117:8	1117:8	14	n
LEAF_NODE	1117:8	1117:8	15	n
ASSIGN_OP	1117:10	1117:10	13	=
LEAF_NODE	1117:10	1117:10	14	=
RVAL	1117:12	1117:12	13	imagewidth
FIELD	1117:12	1117:12	14	imagewidth
LEAF_NODE	1117:12	1117:12	15	imagewidth
LEAF_NODE	1117:22	1117:22	11	;
CONDITION	1117:24	1117:24	10	n -- > 0
EXPR	1117:24	1117:30	11	n -- > 0
FIELD	1117:24	1117:25	12	n --
LEAF_NODE	1117:24	1117:24	13	n
LEAF_NODE	1117:25	1117:25	13	--
REL_OPERATOR	1117:28	1117:28	12	>
LEAF_NODE	1117:28	1117:28	13	>
FIELD	1117:30	1117:30	12	0
LEAF_NODE	1117:30	1117:30	13	0
LEAF_NODE	1117:31	1117:31	10	;
LEAF_NODE	0:0	0:0	10	FOR_EXPR
LEAF_NODE	1117:32	1117:32	10	)
STATEMENTS	1117:34	1120:3	10	
LEAF_NODE	1117:34	1117:34	11	{
STATEMENTS	1118:4	1119:4	11	
EXPR_STATEMENT	1118:4	1118:18	12	* outp ++ = * inp ;
EXPR	1118:4	1118:4	13	* outp ++ = * inp
ASSIGN	1118:4	1118:14	14	* outp ++ = * inp
LVAL	1118:4	1118:4	15	* outp ++
UNARY_EXPR	1118:4	1118:5	16	* outp ++
UNARY_OPERATOR	1118:4	1118:4	17	*
LEAF_NODE	1118:4	1118:4	18	*
FIELD	1118:5	1118:9	17	outp ++
LEAF_NODE	1118:5	1118:5	18	outp
LEAF_NODE	1118:9	1118:9	18	++
ASSIGN_OP	1118:12	1118:12	15	=
LEAF_NODE	1118:12	1118:12	16	=
RVAL	1118:14	1118:14	15	* inp
UNARY_EXPR	1118:14	1118:15	16	* inp
UNARY_OPERATOR	1118:14	1118:14	17	*
LEAF_NODE	1118:14	1118:14	18	*
FIELD	1118:15	1118:15	17	inp
LEAF_NODE	1118:15	1118:15	18	inp
LEAF_NODE	1118:18	1118:18	13	;
EXPR_STATEMENT	1119:4	1119:14	12	inp += spp ;
EXPR	1119:4	1119:4	13	inp += spp
ASSIGN	1119:4	1119:11	14	inp += spp
LVAL	1119:4	1119:4	15	inp
FIELD	1119:4	1119:4	16	inp
LEAF_NODE	1119:4	1119:4	17	inp
ASSIGN_OP	1119:8	1119:8	15	+=
LEAF_NODE	1119:8	1119:8	16	+=
RVAL	1119:11	1119:11	15	spp
FIELD	1119:11	1119:11	16	spp
LEAF_NODE	1119:11	1119:11	17	spp
LEAF_NODE	1119:14	1119:14	13	;
LEAF_NODE	1120:3	1120:3	11	}
SELECTION	1121:3	1121:51	9	
KEYWORD	1121:3	1121:3	10	if
LEAF_NODE	1121:3	1121:3	11	if
LEAF_NODE	1121:6	1121:6	10	(
CONDITION	1121:7	1121:7	10	TIFFWriteScanline ( out , outbuf , row , s ) < 0
EXPR	1121:7	1121:48	11	TIFFWriteScanline ( out , outbuf , row , s ) < 0
FUNCTION_CALL	1121:7	1121:44	12	TIFFWriteScanline ( out , outbuf , row , s )
CALLEE	1121:7	1121:7	13	TIFFWriteScanline
LEAF_NODE	1121:7	1121:7	14	TIFFWriteScanline
LEAF_NODE	1121:24	1121:24	13	(
ARGUMENT	1121:25	1121:25	13	out
FIELD	1121:25	1121:25	14	out
LEAF_NODE	1121:25	1121:25	15	out
LEAF_NODE	1121:28	1121:28	13	,
ARGUMENT	1121:30	1121:30	13	outbuf
FIELD	1121:30	1121:30	14	outbuf
LEAF_NODE	1121:30	1121:30	15	outbuf
LEAF_NODE	1121:36	1121:36	13	,
ARGUMENT	1121:38	1121:38	13	row
FIELD	1121:38	1121:38	14	row
LEAF_NODE	1121:38	1121:38	15	row
LEAF_NODE	1121:41	1121:41	13	,
ARGUMENT	1121:43	1121:43	13	s
FIELD	1121:43	1121:43	14	s
LEAF_NODE	1121:43	1121:43	15	s
LEAF_NODE	1121:44	1121:44	13	)
REL_OPERATOR	1121:46	1121:46	12	<
LEAF_NODE	1121:46	1121:46	13	<
FIELD	1121:48	1121:48	12	0
LEAF_NODE	1121:48	1121:48	13	0
LEAF_NODE	1121:49	1121:49	10	)
STATEMENTS	1121:51	1126:3	10	
LEAF_NODE	1121:51	1121:51	11	{
STATEMENTS	1122:4	1125:4	11	
EXPR_STATEMENT	1122:4	1124:28	12	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row ) ;
EXPR	1122:4	1122:4	13	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1122:4	1124:27	14	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
CALLEE	1122:4	1122:4	15	TIFFError
LEAF_NODE	1122:4	1122:4	16	TIFFError
LEAF_NODE	1122:13	1122:13	15	(
ARGUMENT	1122:14	1122:14	15	TIFFFileName ( out )
FUNCTION_CALL	1122:14	1122:30	16	TIFFFileName ( out )
CALLEE	1122:14	1122:14	17	TIFFFileName
LEAF_NODE	1122:14	1122:14	18	TIFFFileName
LEAF_NODE	1122:26	1122:26	17	(
ARGUMENT	1122:27	1122:27	17	out
FIELD	1122:27	1122:27	18	out
LEAF_NODE	1122:27	1122:27	19	out
LEAF_NODE	1122:30	1122:30	17	)
LEAF_NODE	1122:31	1122:31	15	,
ARGUMENT	1123:8	1123:8	15	"Error, can't write scanline %lu"
FIELD	1123:8	1123:8	16	"Error, can't write scanline %lu"
LEAF_NODE	1123:8	1123:8	17	"Error, can't write scanline %lu"
LEAF_NODE	1123:41	1123:41	15	,
ARGUMENT	1124:8	1124:24	15	( unsigned long ) row
LEAF_NODE	1124:8	1124:8	16	(
TYPE_NAME	1124:9	1124:18	16	unsigned long
LEAF_NODE	1124:9	1124:9	17	unsigned
LEAF_NODE	1124:18	1124:18	17	long
LEAF_NODE	1124:22	1124:22	16	)
FIELD	1124:24	1124:24	16	row
LEAF_NODE	1124:24	1124:24	17	row
LEAF_NODE	1124:27	1124:27	15	)
LEAF_NODE	1124:28	1124:28	13	;
JUMP_STATEMENT	1125:4	1125:12	12	goto bad ;
KEYWORD	1125:4	1125:4	13	goto
LEAF_NODE	1125:4	1125:4	14	goto
DESTINATION	1125:9	1125:9	13	bad
LEAF_NODE	1125:9	1125:9	14	bad
LEAF_NODE	1125:12	1125:12	13	;
LEAF_NODE	1126:3	1126:3	11	}
LEAF_NODE	1127:2	1127:2	8	}
LEAF_NODE	1128:1	1128:1	5	}
SELECTION	1129:1	1129:12	3	
KEYWORD	1129:1	1129:1	4	if
LEAF_NODE	1129:1	1129:1	5	if
LEAF_NODE	1129:4	1129:4	4	(
CONDITION	1129:5	1129:5	4	inbuf
EXPR	1129:5	1129:5	5	inbuf
FIELD	1129:5	1129:5	6	inbuf
LEAF_NODE	1129:5	1129:5	7	inbuf
LEAF_NODE	1129:10	1129:10	4	)
STATEMENTS	1129:12	1129:12	4	
EXPR_STATEMENT	1129:12	1129:28	5	_TIFFfree ( inbuf ) ;
EXPR	1129:12	1129:12	6	_TIFFfree ( inbuf )
FUNCTION_CALL	1129:12	1129:27	7	_TIFFfree ( inbuf )
CALLEE	1129:12	1129:12	8	_TIFFfree
LEAF_NODE	1129:12	1129:12	9	_TIFFfree
LEAF_NODE	1129:21	1129:21	8	(
ARGUMENT	1129:22	1129:22	8	inbuf
FIELD	1129:22	1129:22	9	inbuf
LEAF_NODE	1129:22	1129:22	10	inbuf
LEAF_NODE	1129:27	1129:27	8	)
LEAF_NODE	1129:28	1129:28	6	;
SELECTION	1130:1	1130:13	3	
KEYWORD	1130:1	1130:1	4	if
LEAF_NODE	1130:1	1130:1	5	if
LEAF_NODE	1130:4	1130:4	4	(
CONDITION	1130:5	1130:5	4	outbuf
EXPR	1130:5	1130:5	5	outbuf
FIELD	1130:5	1130:5	6	outbuf
LEAF_NODE	1130:5	1130:5	7	outbuf
LEAF_NODE	1130:11	1130:11	4	)
STATEMENTS	1130:13	1130:13	4	
EXPR_STATEMENT	1130:13	1130:30	5	_TIFFfree ( outbuf ) ;
EXPR	1130:13	1130:13	6	_TIFFfree ( outbuf )
FUNCTION_CALL	1130:13	1130:29	7	_TIFFfree ( outbuf )
CALLEE	1130:13	1130:13	8	_TIFFfree
LEAF_NODE	1130:13	1130:13	9	_TIFFfree
LEAF_NODE	1130:22	1130:22	8	(
ARGUMENT	1130:23	1130:23	8	outbuf
FIELD	1130:23	1130:23	9	outbuf
LEAF_NODE	1130:23	1130:23	10	outbuf
LEAF_NODE	1130:29	1130:29	8	)
LEAF_NODE	1130:30	1130:30	6	;
JUMP_STATEMENT	1131:1	1131:9	3	return 1 ;
KEYWORD	1131:1	1131:1	4	return
LEAF_NODE	1131:1	1131:1	5	return
DESTINATION	1131:8	1131:8	4	1
EXPR	1131:8	1131:8	5	1
FIELD	1131:8	1131:8	6	1
LEAF_NODE	1131:8	1131:8	7	1
LEAF_NODE	1131:9	1131:9	4	;
LABEL	1132:0	1132:3	3	bad :
LEAF_NODE	1132:0	1132:0	4	bad
LEAF_NODE	1132:3	1132:3	4	:
SELECTION	1133:1	1133:12	3	
KEYWORD	1133:1	1133:1	4	if
LEAF_NODE	1133:1	1133:1	5	if
LEAF_NODE	1133:4	1133:4	4	(
CONDITION	1133:5	1133:5	4	inbuf
EXPR	1133:5	1133:5	5	inbuf
FIELD	1133:5	1133:5	6	inbuf
LEAF_NODE	1133:5	1133:5	7	inbuf
LEAF_NODE	1133:10	1133:10	4	)
STATEMENTS	1133:12	1133:12	4	
EXPR_STATEMENT	1133:12	1133:28	5	_TIFFfree ( inbuf ) ;
EXPR	1133:12	1133:12	6	_TIFFfree ( inbuf )
FUNCTION_CALL	1133:12	1133:27	7	_TIFFfree ( inbuf )
CALLEE	1133:12	1133:12	8	_TIFFfree
LEAF_NODE	1133:12	1133:12	9	_TIFFfree
LEAF_NODE	1133:21	1133:21	8	(
ARGUMENT	1133:22	1133:22	8	inbuf
FIELD	1133:22	1133:22	9	inbuf
LEAF_NODE	1133:22	1133:22	10	inbuf
LEAF_NODE	1133:27	1133:27	8	)
LEAF_NODE	1133:28	1133:28	6	;
SELECTION	1134:1	1134:13	3	
KEYWORD	1134:1	1134:1	4	if
LEAF_NODE	1134:1	1134:1	5	if
LEAF_NODE	1134:4	1134:4	4	(
CONDITION	1134:5	1134:5	4	outbuf
EXPR	1134:5	1134:5	5	outbuf
FIELD	1134:5	1134:5	6	outbuf
LEAF_NODE	1134:5	1134:5	7	outbuf
LEAF_NODE	1134:11	1134:11	4	)
STATEMENTS	1134:13	1134:13	4	
EXPR_STATEMENT	1134:13	1134:30	5	_TIFFfree ( outbuf ) ;
EXPR	1134:13	1134:13	6	_TIFFfree ( outbuf )
FUNCTION_CALL	1134:13	1134:29	7	_TIFFfree ( outbuf )
CALLEE	1134:13	1134:13	8	_TIFFfree
LEAF_NODE	1134:13	1134:13	9	_TIFFfree
LEAF_NODE	1134:22	1134:22	8	(
ARGUMENT	1134:23	1134:23	8	outbuf
FIELD	1134:23	1134:23	9	outbuf
LEAF_NODE	1134:23	1134:23	10	outbuf
LEAF_NODE	1134:29	1134:29	8	)
LEAF_NODE	1134:30	1134:30	6	;
JUMP_STATEMENT	1135:1	1135:9	3	return 0 ;
KEYWORD	1135:1	1135:1	4	return
LEAF_NODE	1135:1	1135:1	5	return
DESTINATION	1135:8	1135:8	4	0
EXPR	1135:8	1135:8	5	0
FIELD	1135:8	1135:8	6	0
LEAF_NODE	1135:8	1135:8	7	0
LEAF_NODE	1135:9	1135:9	4	;
LEAF_NODE	1136:0	1136:0	2	}
FUNCTION_DEF	0:0	1199:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1141:0	1141:0	2	DECLAREcpFunc
LEAF_NODE	1141:0	1141:0	3	DECLAREcpFunc
PARAMETER_LIST	1141:13	1141:36	2	( cpSeparate2ContigByRow )
LEAF_NODE	1141:13	1141:13	3	(
PARAMETER_DECL	1141:14	1141:14	3	cpSeparate2ContigByRow
LEAF_NODE	1141:14	1141:14	4	cpSeparate2ContigByRow
LEAF_NODE	1141:36	1141:36	3	)
LEAF_NODE	1142:0	1142:0	2	{
STATEMENTS	1143:1	1198:1	2	
SIMPLE_DECL	1143:1	1143:46	3	tsize_t scanlinesizein ; scanlinesizein = TIFFScanlineSize ( in ) ;
VAR_DECL	1143:1	1143:9	4	tsize_t scanlinesizein ; scanlinesizein = TIFFScanlineSize ( in )
TYPE	1143:1	1143:1	5	tsize_t
TYPE_NAME	1143:1	1143:1	6	tsize_t
LEAF_NODE	1143:1	1143:1	7	tsize_t
NAME	1143:9	1143:9	5	scanlinesizein
LEAF_NODE	1143:9	1143:9	6	scanlinesizein
LEAF_NODE	0:0	0:0	5	;
INIT	1143:9	1143:9	5	scanlinesizein = TIFFScanlineSize ( in )
ASSIGN	1143:9	1143:26	6	scanlinesizein = TIFFScanlineSize ( in )
LVAL	1143:9	1143:9	7	scanlinesizein
NAME	1143:9	1143:9	8	scanlinesizein
LEAF_NODE	1143:9	1143:9	9	scanlinesizein
ASSIGN_OP	1143:24	1143:24	7	=
LEAF_NODE	1143:24	1143:24	8	=
RVAL	1143:26	1143:26	7	TIFFScanlineSize ( in )
FUNCTION_CALL	1143:26	1143:45	8	TIFFScanlineSize ( in )
CALLEE	1143:26	1143:26	9	TIFFScanlineSize
LEAF_NODE	1143:26	1143:26	10	TIFFScanlineSize
LEAF_NODE	1143:42	1143:42	9	(
ARGUMENT	1143:43	1143:43	9	in
FIELD	1143:43	1143:43	10	in
LEAF_NODE	1143:43	1143:43	11	in
LEAF_NODE	1143:45	1143:45	9	)
LEAF_NODE	1143:46	1143:46	4	;
SIMPLE_DECL	1144:1	1144:48	3	tsize_t scanlinesizeout ; scanlinesizeout = TIFFScanlineSize ( out ) ;
VAR_DECL	1144:1	1144:9	4	tsize_t scanlinesizeout ; scanlinesizeout = TIFFScanlineSize ( out )
TYPE	1144:1	1144:1	5	tsize_t
TYPE_NAME	1144:1	1144:1	6	tsize_t
LEAF_NODE	1144:1	1144:1	7	tsize_t
NAME	1144:9	1144:9	5	scanlinesizeout
LEAF_NODE	1144:9	1144:9	6	scanlinesizeout
LEAF_NODE	0:0	0:0	5	;
INIT	1144:9	1144:9	5	scanlinesizeout = TIFFScanlineSize ( out )
ASSIGN	1144:9	1144:27	6	scanlinesizeout = TIFFScanlineSize ( out )
LVAL	1144:9	1144:9	7	scanlinesizeout
NAME	1144:9	1144:9	8	scanlinesizeout
LEAF_NODE	1144:9	1144:9	9	scanlinesizeout
ASSIGN_OP	1144:25	1144:25	7	=
LEAF_NODE	1144:25	1144:25	8	=
RVAL	1144:27	1144:27	7	TIFFScanlineSize ( out )
FUNCTION_CALL	1144:27	1144:47	8	TIFFScanlineSize ( out )
CALLEE	1144:27	1144:27	9	TIFFScanlineSize
LEAF_NODE	1144:27	1144:27	10	TIFFScanlineSize
LEAF_NODE	1144:43	1144:43	9	(
ARGUMENT	1144:44	1144:44	9	out
FIELD	1144:44	1144:44	10	out
LEAF_NODE	1144:44	1144:44	11	out
LEAF_NODE	1144:47	1144:47	9	)
LEAF_NODE	1144:48	1144:48	4	;
SIMPLE_DECL	1145:1	1145:14	3	tdata_t inbuf ;
VAR_DECL	1145:1	1145:9	4	tdata_t inbuf
TYPE	1145:1	1145:1	5	tdata_t
TYPE_NAME	1145:1	1145:1	6	tdata_t
LEAF_NODE	1145:1	1145:1	7	tdata_t
NAME	1145:9	1145:9	5	inbuf
LEAF_NODE	1145:9	1145:9	6	inbuf
LEAF_NODE	1145:14	1145:14	4	;
SIMPLE_DECL	1146:1	1146:15	3	tdata_t outbuf ;
VAR_DECL	1146:1	1146:9	4	tdata_t outbuf
TYPE	1146:1	1146:1	5	tdata_t
TYPE_NAME	1146:1	1146:1	6	tdata_t
LEAF_NODE	1146:1	1146:1	7	tdata_t
NAME	1146:9	1146:9	5	outbuf
LEAF_NODE	1146:9	1146:9	6	outbuf
LEAF_NODE	1146:15	1146:15	4	;
LEAF_NODE	1147:1	1147:1	3	register
SIMPLE_DECL	1147:10	1147:27	3	uint8 * inp , uint8 * outp ;
INIT_DECL_LIST	1147:10	1147:10	4	uint8 * inp , uint8 * outp
VAR_DECL	1147:10	1147:17	5	uint8 * inp
TYPE	1147:10	1147:16	6	uint8 *
TYPE_NAME	1147:10	1147:10	7	uint8
LEAF_NODE	1147:10	1147:10	8	uint8
POINTER	1147:16	1147:16	7	*
LEAF_NODE	1147:16	1147:16	8	*
NAME	1147:17	1147:17	6	inp
LEAF_NODE	1147:17	1147:17	7	inp
LEAF_NODE	1147:20	1147:20	5	,
VAR_DECL	1147:10	1147:23	5	uint8 * outp
TYPE	1147:10	1147:22	6	uint8 *
TYPE_NAME	1147:10	1147:10	7	uint8
LEAF_NODE	1147:10	1147:10	8	uint8
POINTER	1147:22	1147:22	7	*
LEAF_NODE	1147:22	1147:22	8	*
NAME	1147:23	1147:23	6	outp
LEAF_NODE	1147:23	1147:23	7	outp
LEAF_NODE	1147:27	1147:27	4	;
LEAF_NODE	1148:1	1148:1	3	register
SIMPLE_DECL	1148:10	1148:18	3	uint32 n ;
VAR_DECL	1148:10	1148:17	4	uint32 n
TYPE	1148:10	1148:10	5	uint32
TYPE_NAME	1148:10	1148:10	6	uint32
LEAF_NODE	1148:10	1148:10	7	uint32
NAME	1148:17	1148:17	5	n
LEAF_NODE	1148:17	1148:17	6	n
LEAF_NODE	1148:18	1148:18	4	;
SIMPLE_DECL	1149:1	1149:11	3	uint32 row ;
VAR_DECL	1149:1	1149:8	4	uint32 row
TYPE	1149:1	1149:1	5	uint32
TYPE_NAME	1149:1	1149:1	6	uint32
LEAF_NODE	1149:1	1149:1	7	uint32
NAME	1149:8	1149:8	5	row
LEAF_NODE	1149:8	1149:8	6	row
LEAF_NODE	1149:11	1149:11	4	;
SIMPLE_DECL	1150:1	1150:12	3	tsample_t s ;
VAR_DECL	1150:1	1150:11	4	tsample_t s
TYPE	1150:1	1150:1	5	tsample_t
TYPE_NAME	1150:1	1150:1	6	tsample_t
LEAF_NODE	1150:1	1150:1	7	tsample_t
NAME	1150:11	1150:11	5	s
LEAF_NODE	1150:11	1150:11	6	s
LEAF_NODE	1150:12	1150:12	4	;
SIMPLE_DECL	1151:8	1151:22	3	uint16 bps ; bps = 0 ;
VAR_DECL	1151:8	1151:15	4	uint16 bps ; bps = 0
TYPE	1151:8	1151:8	5	uint16
TYPE_NAME	1151:8	1151:8	6	uint16
LEAF_NODE	1151:8	1151:8	7	uint16
NAME	1151:15	1151:15	5	bps
LEAF_NODE	1151:15	1151:15	6	bps
LEAF_NODE	0:0	0:0	5	;
INIT	1151:15	1151:15	5	bps = 0
ASSIGN	1151:15	1151:21	6	bps = 0
LVAL	1151:15	1151:15	7	bps
NAME	1151:15	1151:15	8	bps
LEAF_NODE	1151:15	1151:15	9	bps
ASSIGN_OP	1151:19	1151:19	7	=
LEAF_NODE	1151:19	1151:19	8	=
RVAL	1151:21	1151:21	7	0
FIELD	1151:21	1151:21	8	0
LEAF_NODE	1151:21	1151:21	9	0
LEAF_NODE	1151:22	1151:22	4	;
EXPR_STATEMENT	1153:8	1153:60	3	( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	1153:8	1153:15	4	( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps )
LEAF_NODE	1153:8	1153:8	5	(
TYPE_NAME	1153:9	1153:9	5	void
LEAF_NODE	1153:9	1153:9	6	void
LEAF_NODE	1153:13	1153:13	5	)
FUNCTION_CALL	1153:15	1153:59	5	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	1153:15	1153:15	6	TIFFGetField
LEAF_NODE	1153:15	1153:15	7	TIFFGetField
LEAF_NODE	1153:27	1153:27	6	(
ARGUMENT	1153:28	1153:28	6	in
FIELD	1153:28	1153:28	7	in
LEAF_NODE	1153:28	1153:28	8	in
LEAF_NODE	1153:30	1153:30	6	,
ARGUMENT	1153:32	1153:32	6	TIFFTAG_BITSPERSAMPLE
FIELD	1153:32	1153:32	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1153:32	1153:32	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1153:53	1153:53	6	,
ARGUMENT	1153:55	1153:55	6	& bps
UNARY_EXPR	1153:55	1153:56	7	& bps
UNARY_OPERATOR	1153:55	1153:55	8	&
LEAF_NODE	1153:55	1153:55	9	&
FIELD	1153:56	1153:56	8	bps
LEAF_NODE	1153:56	1153:56	9	bps
LEAF_NODE	1153:59	1153:59	6	)
LEAF_NODE	1153:60	1153:60	4	;
SELECTION	1154:8	1155:8	3	
KEYWORD	1154:8	1154:8	4	if
LEAF_NODE	1154:8	1154:8	5	if
LEAF_NODE	1154:10	1154:10	4	(
CONDITION	1154:12	1154:12	4	bps != 8
EXPR	1154:12	1154:19	5	bps != 8
FIELD	1154:12	1154:12	6	bps
LEAF_NODE	1154:12	1154:12	7	bps
EQ_OPERATOR	1154:16	1154:16	6	!=
LEAF_NODE	1154:16	1154:16	7	!=
FIELD	1154:19	1154:19	6	8
LEAF_NODE	1154:19	1154:19	7	8
LEAF_NODE	1154:21	1154:21	4	)
STATEMENTS	1155:8	1160:8	4	
LEAF_NODE	1155:8	1155:8	5	{
STATEMENTS	1156:12	1159:12	5	
EXPR_STATEMENT	1156:12	1158:47	6	TIFFError ( TIFFFileName ( in ) , "Error, can only handle BitsPerSample=8 in %s" , "cpSeparate2ContigByRow" ) ;
EXPR	1156:12	1156:12	7	TIFFError ( TIFFFileName ( in ) , "Error, can only handle BitsPerSample=8 in %s" , "cpSeparate2ContigByRow" )
FUNCTION_CALL	1156:12	1158:46	8	TIFFError ( TIFFFileName ( in ) , "Error, can only handle BitsPerSample=8 in %s" , "cpSeparate2ContigByRow" )
CALLEE	1156:12	1156:12	9	TIFFError
LEAF_NODE	1156:12	1156:12	10	TIFFError
LEAF_NODE	1156:21	1156:21	9	(
ARGUMENT	1156:22	1156:22	9	TIFFFileName ( in )
FUNCTION_CALL	1156:22	1156:37	10	TIFFFileName ( in )
CALLEE	1156:22	1156:22	11	TIFFFileName
LEAF_NODE	1156:22	1156:22	12	TIFFFileName
LEAF_NODE	1156:34	1156:34	11	(
ARGUMENT	1156:35	1156:35	11	in
FIELD	1156:35	1156:35	12	in
LEAF_NODE	1156:35	1156:35	13	in
LEAF_NODE	1156:37	1156:37	11	)
LEAF_NODE	1156:38	1156:38	9	,
ARGUMENT	1157:22	1157:22	9	"Error, can only handle BitsPerSample=8 in %s"
FIELD	1157:22	1157:22	10	"Error, can only handle BitsPerSample=8 in %s"
LEAF_NODE	1157:22	1157:22	11	"Error, can only handle BitsPerSample=8 in %s"
LEAF_NODE	1157:68	1157:68	9	,
ARGUMENT	1158:22	1158:22	9	"cpSeparate2ContigByRow"
FIELD	1158:22	1158:22	10	"cpSeparate2ContigByRow"
LEAF_NODE	1158:22	1158:22	11	"cpSeparate2ContigByRow"
LEAF_NODE	1158:46	1158:46	9	)
LEAF_NODE	1158:47	1158:47	7	;
JUMP_STATEMENT	1159:12	1159:20	6	return 0 ;
KEYWORD	1159:12	1159:12	7	return
LEAF_NODE	1159:12	1159:12	8	return
DESTINATION	1159:19	1159:19	7	0
EXPR	1159:19	1159:19	8	0
FIELD	1159:19	1159:19	9	0
LEAF_NODE	1159:19	1159:19	10	0
LEAF_NODE	1159:20	1159:20	7	;
LEAF_NODE	1160:8	1160:8	5	}
EXPR_STATEMENT	1162:1	1162:36	3	inbuf = _TIFFmalloc ( scanlinesizein ) ;
EXPR	1162:1	1162:1	4	inbuf = _TIFFmalloc ( scanlinesizein )
ASSIGN	1162:1	1162:9	5	inbuf = _TIFFmalloc ( scanlinesizein )
LVAL	1162:1	1162:1	6	inbuf
FIELD	1162:1	1162:1	7	inbuf
LEAF_NODE	1162:1	1162:1	8	inbuf
ASSIGN_OP	1162:7	1162:7	6	=
LEAF_NODE	1162:7	1162:7	7	=
RVAL	1162:9	1162:9	6	_TIFFmalloc ( scanlinesizein )
FUNCTION_CALL	1162:9	1162:35	7	_TIFFmalloc ( scanlinesizein )
CALLEE	1162:9	1162:9	8	_TIFFmalloc
LEAF_NODE	1162:9	1162:9	9	_TIFFmalloc
LEAF_NODE	1162:20	1162:20	8	(
ARGUMENT	1162:21	1162:21	8	scanlinesizein
FIELD	1162:21	1162:21	9	scanlinesizein
LEAF_NODE	1162:21	1162:21	10	scanlinesizein
LEAF_NODE	1162:35	1162:35	8	)
LEAF_NODE	1162:36	1162:36	4	;
EXPR_STATEMENT	1163:1	1163:38	3	outbuf = _TIFFmalloc ( scanlinesizeout ) ;
EXPR	1163:1	1163:1	4	outbuf = _TIFFmalloc ( scanlinesizeout )
ASSIGN	1163:1	1163:10	5	outbuf = _TIFFmalloc ( scanlinesizeout )
LVAL	1163:1	1163:1	6	outbuf
FIELD	1163:1	1163:1	7	outbuf
LEAF_NODE	1163:1	1163:1	8	outbuf
ASSIGN_OP	1163:8	1163:8	6	=
LEAF_NODE	1163:8	1163:8	7	=
RVAL	1163:10	1163:10	6	_TIFFmalloc ( scanlinesizeout )
FUNCTION_CALL	1163:10	1163:37	7	_TIFFmalloc ( scanlinesizeout )
CALLEE	1163:10	1163:10	8	_TIFFmalloc
LEAF_NODE	1163:10	1163:10	9	_TIFFmalloc
LEAF_NODE	1163:21	1163:21	8	(
ARGUMENT	1163:22	1163:22	8	scanlinesizeout
FIELD	1163:22	1163:22	9	scanlinesizeout
LEAF_NODE	1163:22	1163:22	10	scanlinesizeout
LEAF_NODE	1163:37	1163:37	8	)
LEAF_NODE	1163:38	1163:38	4	;
SELECTION	1164:1	1165:16	3	
KEYWORD	1164:1	1164:1	4	if
LEAF_NODE	1164:1	1164:1	5	if
LEAF_NODE	1164:4	1164:4	4	(
CONDITION	1164:5	1164:5	4	! inbuf || ! outbuf
EXPR	1164:5	1164:5	5	! inbuf || ! outbuf
OR	1164:5	1164:15	6	! inbuf || ! outbuf
EXPR	1164:5	1164:5	7	! inbuf
UNARY_EXPR	1164:5	1164:6	8	! inbuf
UNARY_OPERATOR	1164:5	1164:5	9	!
LEAF_NODE	1164:5	1164:5	10	!
FIELD	1164:6	1164:6	9	inbuf
LEAF_NODE	1164:6	1164:6	10	inbuf
LEAF_NODE	1164:12	1164:12	7	||
EXPR	1164:15	1164:15	7	! outbuf
UNARY_EXPR	1164:15	1164:16	8	! outbuf
UNARY_OPERATOR	1164:15	1164:15	9	!
LEAF_NODE	1164:15	1164:15	10	!
FIELD	1164:16	1164:16	9	outbuf
LEAF_NODE	1164:16	1164:16	10	outbuf
LEAF_NODE	1164:22	1164:22	4	)
STATEMENTS	1165:16	1165:16	4	
JUMP_STATEMENT	1165:16	1165:24	5	goto bad ;
KEYWORD	1165:16	1165:16	6	goto
LEAF_NODE	1165:16	1165:16	7	goto
DESTINATION	1165:21	1165:21	6	bad
LEAF_NODE	1165:21	1165:21	7	bad
LEAF_NODE	1165:24	1165:24	6	;
EXPR_STATEMENT	1166:1	1166:38	3	_TIFFmemset ( inbuf , 0 , scanlinesizein ) ;
EXPR	1166:1	1166:1	4	_TIFFmemset ( inbuf , 0 , scanlinesizein )
FUNCTION_CALL	1166:1	1166:37	5	_TIFFmemset ( inbuf , 0 , scanlinesizein )
CALLEE	1166:1	1166:1	6	_TIFFmemset
LEAF_NODE	1166:1	1166:1	7	_TIFFmemset
LEAF_NODE	1166:12	1166:12	6	(
ARGUMENT	1166:13	1166:13	6	inbuf
FIELD	1166:13	1166:13	7	inbuf
LEAF_NODE	1166:13	1166:13	8	inbuf
LEAF_NODE	1166:18	1166:18	6	,
ARGUMENT	1166:20	1166:20	6	0
FIELD	1166:20	1166:20	7	0
LEAF_NODE	1166:20	1166:20	8	0
LEAF_NODE	1166:21	1166:21	6	,
ARGUMENT	1166:23	1166:23	6	scanlinesizein
FIELD	1166:23	1166:23	7	scanlinesizein
LEAF_NODE	1166:23	1166:23	8	scanlinesizein
LEAF_NODE	1166:37	1166:37	6	)
LEAF_NODE	1166:38	1166:38	4	;
EXPR_STATEMENT	1167:1	1167:40	3	_TIFFmemset ( outbuf , 0 , scanlinesizeout ) ;
EXPR	1167:1	1167:1	4	_TIFFmemset ( outbuf , 0 , scanlinesizeout )
FUNCTION_CALL	1167:1	1167:39	5	_TIFFmemset ( outbuf , 0 , scanlinesizeout )
CALLEE	1167:1	1167:1	6	_TIFFmemset
LEAF_NODE	1167:1	1167:1	7	_TIFFmemset
LEAF_NODE	1167:12	1167:12	6	(
ARGUMENT	1167:13	1167:13	6	outbuf
FIELD	1167:13	1167:13	7	outbuf
LEAF_NODE	1167:13	1167:13	8	outbuf
LEAF_NODE	1167:19	1167:19	6	,
ARGUMENT	1167:21	1167:21	6	0
FIELD	1167:21	1167:21	7	0
LEAF_NODE	1167:21	1167:21	8	0
LEAF_NODE	1167:22	1167:22	6	,
ARGUMENT	1167:24	1167:24	6	scanlinesizeout
FIELD	1167:24	1167:24	7	scanlinesizeout
LEAF_NODE	1167:24	1167:24	8	scanlinesizeout
LEAF_NODE	1167:39	1167:39	6	)
LEAF_NODE	1167:40	1167:40	4	;
ITERATION	1168:1	1168:41	3	
KEYWORD	1168:1	1168:1	4	for
LEAF_NODE	1168:1	1168:1	5	for
LEAF_NODE	1168:5	1168:5	4	(
FOR_INIT	1168:6	1168:13	4	row = 0 ;
EXPR	1168:6	1168:6	5	row = 0
ASSIGN	1168:6	1168:12	6	row = 0
LVAL	1168:6	1168:6	7	row
FIELD	1168:6	1168:6	8	row
LEAF_NODE	1168:6	1168:6	9	row
ASSIGN_OP	1168:10	1168:10	7	=
LEAF_NODE	1168:10	1168:10	8	=
RVAL	1168:12	1168:12	7	0
FIELD	1168:12	1168:12	8	0
LEAF_NODE	1168:12	1168:12	9	0
LEAF_NODE	1168:13	1168:13	5	;
CONDITION	1168:15	1168:15	4	row < imagelength
EXPR	1168:15	1168:21	5	row < imagelength
FIELD	1168:15	1168:15	6	row
LEAF_NODE	1168:15	1168:15	7	row
REL_OPERATOR	1168:19	1168:19	6	<
LEAF_NODE	1168:19	1168:19	7	<
FIELD	1168:21	1168:21	6	imagelength
LEAF_NODE	1168:21	1168:21	7	imagelength
LEAF_NODE	1168:32	1168:32	4	;
FOR_EXPR	1168:34	1168:34	4	row ++
EXPR	1168:34	1168:34	5	row ++
FIELD	1168:34	1168:37	6	row ++
LEAF_NODE	1168:34	1168:34	7	row
LEAF_NODE	1168:37	1168:37	7	++
LEAF_NODE	1168:39	1168:39	4	)
STATEMENTS	1168:41	1191:1	4	
LEAF_NODE	1168:41	1168:41	5	{
STATEMENTS	1170:2	1185:2	5	
ITERATION	1170:2	1170:28	6	
KEYWORD	1170:2	1170:2	7	for
LEAF_NODE	1170:2	1170:2	8	for
LEAF_NODE	1170:6	1170:6	7	(
FOR_INIT	1170:7	1170:12	7	s = 0 ;
EXPR	1170:7	1170:7	8	s = 0
ASSIGN	1170:7	1170:11	9	s = 0
LVAL	1170:7	1170:7	10	s
FIELD	1170:7	1170:7	11	s
LEAF_NODE	1170:7	1170:7	12	s
ASSIGN_OP	1170:9	1170:9	10	=
LEAF_NODE	1170:9	1170:9	11	=
RVAL	1170:11	1170:11	10	0
FIELD	1170:11	1170:11	11	0
LEAF_NODE	1170:11	1170:11	12	0
LEAF_NODE	1170:12	1170:12	8	;
CONDITION	1170:14	1170:14	7	s < spp
EXPR	1170:14	1170:18	8	s < spp
FIELD	1170:14	1170:14	9	s
LEAF_NODE	1170:14	1170:14	10	s
REL_OPERATOR	1170:16	1170:16	9	<
LEAF_NODE	1170:16	1170:16	10	<
FIELD	1170:18	1170:18	9	spp
LEAF_NODE	1170:18	1170:18	10	spp
LEAF_NODE	1170:21	1170:21	7	;
FOR_EXPR	1170:23	1170:23	7	s ++
EXPR	1170:23	1170:23	8	s ++
FIELD	1170:23	1170:24	9	s ++
LEAF_NODE	1170:23	1170:23	10	s
LEAF_NODE	1170:24	1170:24	10	++
LEAF_NODE	1170:26	1170:26	7	)
STATEMENTS	1170:28	1184:2	7	
LEAF_NODE	1170:28	1170:28	8	{
STATEMENTS	1171:3	1180:3	8	
SELECTION	1171:3	1172:19	9	
KEYWORD	1171:3	1171:3	10	if
LEAF_NODE	1171:3	1171:3	11	if
LEAF_NODE	1171:6	1171:6	10	(
CONDITION	1171:7	1171:7	10	TIFFReadScanline ( in , inbuf , row , s ) < 0 && ! ignore
EXPR	1171:7	1171:7	11	TIFFReadScanline ( in , inbuf , row , s ) < 0 && ! ignore
AND	1171:7	1172:10	12	TIFFReadScanline ( in , inbuf , row , s ) < 0 && ! ignore
EXPR	1171:7	1171:45	13	TIFFReadScanline ( in , inbuf , row , s ) < 0
FUNCTION_CALL	1171:7	1171:41	14	TIFFReadScanline ( in , inbuf , row , s )
CALLEE	1171:7	1171:7	15	TIFFReadScanline
LEAF_NODE	1171:7	1171:7	16	TIFFReadScanline
LEAF_NODE	1171:23	1171:23	15	(
ARGUMENT	1171:24	1171:24	15	in
FIELD	1171:24	1171:24	16	in
LEAF_NODE	1171:24	1171:24	17	in
LEAF_NODE	1171:26	1171:26	15	,
ARGUMENT	1171:28	1171:28	15	inbuf
FIELD	1171:28	1171:28	16	inbuf
LEAF_NODE	1171:28	1171:28	17	inbuf
LEAF_NODE	1171:33	1171:33	15	,
ARGUMENT	1171:35	1171:35	15	row
FIELD	1171:35	1171:35	16	row
LEAF_NODE	1171:35	1171:35	17	row
LEAF_NODE	1171:38	1171:38	15	,
ARGUMENT	1171:40	1171:40	15	s
FIELD	1171:40	1171:40	16	s
LEAF_NODE	1171:40	1171:40	17	s
LEAF_NODE	1171:41	1171:41	15	)
REL_OPERATOR	1171:43	1171:43	14	<
LEAF_NODE	1171:43	1171:43	15	<
FIELD	1171:45	1171:45	14	0
LEAF_NODE	1171:45	1171:45	15	0
LEAF_NODE	1172:7	1172:7	13	&&
EXPR	1172:10	1172:10	13	! ignore
UNARY_EXPR	1172:10	1172:11	14	! ignore
UNARY_OPERATOR	1172:10	1172:10	15	!
LEAF_NODE	1172:10	1172:10	16	!
FIELD	1172:11	1172:11	15	ignore
LEAF_NODE	1172:11	1172:11	16	ignore
LEAF_NODE	1172:17	1172:17	10	)
STATEMENTS	1172:19	1177:3	10	
LEAF_NODE	1172:19	1172:19	11	{
STATEMENTS	1173:4	1176:4	11	
EXPR_STATEMENT	1173:4	1175:28	12	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row ) ;
EXPR	1173:4	1173:4	13	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1173:4	1175:27	14	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
CALLEE	1173:4	1173:4	15	TIFFError
LEAF_NODE	1173:4	1173:4	16	TIFFError
LEAF_NODE	1173:13	1173:13	15	(
ARGUMENT	1173:14	1173:14	15	TIFFFileName ( in )
FUNCTION_CALL	1173:14	1173:29	16	TIFFFileName ( in )
CALLEE	1173:14	1173:14	17	TIFFFileName
LEAF_NODE	1173:14	1173:14	18	TIFFFileName
LEAF_NODE	1173:26	1173:26	17	(
ARGUMENT	1173:27	1173:27	17	in
FIELD	1173:27	1173:27	18	in
LEAF_NODE	1173:27	1173:27	19	in
LEAF_NODE	1173:29	1173:29	17	)
LEAF_NODE	1173:30	1173:30	15	,
ARGUMENT	1174:8	1174:8	15	"Error, can't read scanline %lu"
FIELD	1174:8	1174:8	16	"Error, can't read scanline %lu"
LEAF_NODE	1174:8	1174:8	17	"Error, can't read scanline %lu"
LEAF_NODE	1174:40	1174:40	15	,
ARGUMENT	1175:8	1175:24	15	( unsigned long ) row
LEAF_NODE	1175:8	1175:8	16	(
TYPE_NAME	1175:9	1175:18	16	unsigned long
LEAF_NODE	1175:9	1175:9	17	unsigned
LEAF_NODE	1175:18	1175:18	17	long
LEAF_NODE	1175:22	1175:22	16	)
FIELD	1175:24	1175:24	16	row
LEAF_NODE	1175:24	1175:24	17	row
LEAF_NODE	1175:27	1175:27	15	)
LEAF_NODE	1175:28	1175:28	13	;
JUMP_STATEMENT	1176:4	1176:12	12	goto bad ;
KEYWORD	1176:4	1176:4	13	goto
LEAF_NODE	1176:4	1176:4	14	goto
DESTINATION	1176:9	1176:9	13	bad
LEAF_NODE	1176:9	1176:9	14	bad
LEAF_NODE	1176:12	1176:12	13	;
LEAF_NODE	1177:3	1177:3	11	}
EXPR_STATEMENT	1178:3	1178:22	9	inp = ( uint8 * ) inbuf ;
EXPR	1178:3	1178:3	10	inp = ( uint8 * ) inbuf
ASSIGN	1178:3	1178:9	11	inp = ( uint8 * ) inbuf
LVAL	1178:3	1178:3	12	inp
FIELD	1178:3	1178:3	13	inp
LEAF_NODE	1178:3	1178:3	14	inp
ASSIGN_OP	1178:7	1178:7	12	=
LEAF_NODE	1178:7	1178:7	13	=
RVAL	1178:9	1178:17	12	( uint8 * ) inbuf
LEAF_NODE	1178:9	1178:9	13	(
TYPE_NAME	1178:10	1178:10	13	uint8
LEAF_NODE	1178:10	1178:10	14	uint8
LEAF_NODE	1178:15	1178:15	13	*
LEAF_NODE	1178:16	1178:16	13	)
FIELD	1178:17	1178:17	13	inbuf
LEAF_NODE	1178:17	1178:17	14	inbuf
LEAF_NODE	1178:22	1178:22	10	;
EXPR_STATEMENT	1179:3	1179:30	9	outp = ( ( uint8 * ) outbuf ) + s ;
EXPR	1179:3	1179:3	10	outp = ( ( uint8 * ) outbuf ) + s
ASSIGN	1179:3	1179:10	11	outp = ( ( uint8 * ) outbuf ) + s
LVAL	1179:3	1179:3	12	outp
FIELD	1179:3	1179:3	13	outp
LEAF_NODE	1179:3	1179:3	14	outp
ASSIGN_OP	1179:8	1179:8	12	=
LEAF_NODE	1179:8	1179:8	13	=
RVAL	1179:10	1179:29	12	( ( uint8 * ) outbuf ) + s
LEAF_NODE	1179:10	1179:10	13	(
LEAF_NODE	1179:11	1179:11	13	(
TYPE_NAME	1179:12	1179:12	13	uint8
LEAF_NODE	1179:12	1179:12	14	uint8
LEAF_NODE	1179:17	1179:17	13	*
LEAF_NODE	1179:18	1179:18	13	)
FIELD	1179:19	1179:19	13	outbuf
LEAF_NODE	1179:19	1179:19	14	outbuf
LEAF_NODE	1179:25	1179:25	13	)
LEAF_NODE	1179:27	1179:27	13	+
FIELD	1179:29	1179:29	13	s
LEAF_NODE	1179:29	1179:29	14	s
LEAF_NODE	1179:30	1179:30	10	;
ITERATION	1180:3	1180:34	9	
KEYWORD	1180:3	1180:3	10	for
LEAF_NODE	1180:3	1180:3	11	for
LEAF_NODE	1180:7	1180:7	10	(
FOR_INIT	1180:8	1180:22	10	n = imagewidth ;
EXPR	1180:8	1180:8	11	n = imagewidth
ASSIGN	1180:8	1180:12	12	n = imagewidth
LVAL	1180:8	1180:8	13	n
FIELD	1180:8	1180:8	14	n
LEAF_NODE	1180:8	1180:8	15	n
ASSIGN_OP	1180:10	1180:10	13	=
LEAF_NODE	1180:10	1180:10	14	=
RVAL	1180:12	1180:12	13	imagewidth
FIELD	1180:12	1180:12	14	imagewidth
LEAF_NODE	1180:12	1180:12	15	imagewidth
LEAF_NODE	1180:22	1180:22	11	;
CONDITION	1180:24	1180:24	10	n -- > 0
EXPR	1180:24	1180:30	11	n -- > 0
FIELD	1180:24	1180:25	12	n --
LEAF_NODE	1180:24	1180:24	13	n
LEAF_NODE	1180:25	1180:25	13	--
REL_OPERATOR	1180:28	1180:28	12	>
LEAF_NODE	1180:28	1180:28	13	>
FIELD	1180:30	1180:30	12	0
LEAF_NODE	1180:30	1180:30	13	0
LEAF_NODE	1180:31	1180:31	10	;
LEAF_NODE	0:0	0:0	10	FOR_EXPR
LEAF_NODE	1180:32	1180:32	10	)
STATEMENTS	1180:34	1183:3	10	
LEAF_NODE	1180:34	1180:34	11	{
STATEMENTS	1181:4	1182:4	11	
EXPR_STATEMENT	1181:4	1181:18	12	* outp = * inp ++ ;
EXPR	1181:4	1181:4	13	* outp = * inp ++
ASSIGN	1181:4	1181:12	14	* outp = * inp ++
LVAL	1181:4	1181:4	15	* outp
UNARY_EXPR	1181:4	1181:5	16	* outp
UNARY_OPERATOR	1181:4	1181:4	17	*
LEAF_NODE	1181:4	1181:4	18	*
FIELD	1181:5	1181:5	17	outp
LEAF_NODE	1181:5	1181:5	18	outp
ASSIGN_OP	1181:10	1181:10	15	=
LEAF_NODE	1181:10	1181:10	16	=
RVAL	1181:12	1181:12	15	* inp ++
UNARY_EXPR	1181:12	1181:13	16	* inp ++
UNARY_OPERATOR	1181:12	1181:12	17	*
LEAF_NODE	1181:12	1181:12	18	*
FIELD	1181:13	1181:16	17	inp ++
LEAF_NODE	1181:13	1181:13	18	inp
LEAF_NODE	1181:16	1181:16	18	++
LEAF_NODE	1181:18	1181:18	13	;
EXPR_STATEMENT	1182:4	1182:15	12	outp += spp ;
EXPR	1182:4	1182:4	13	outp += spp
ASSIGN	1182:4	1182:12	14	outp += spp
LVAL	1182:4	1182:4	15	outp
FIELD	1182:4	1182:4	16	outp
LEAF_NODE	1182:4	1182:4	17	outp
ASSIGN_OP	1182:9	1182:9	15	+=
LEAF_NODE	1182:9	1182:9	16	+=
RVAL	1182:12	1182:12	15	spp
FIELD	1182:12	1182:12	16	spp
LEAF_NODE	1182:12	1182:12	17	spp
LEAF_NODE	1182:15	1182:15	13	;
LEAF_NODE	1183:3	1183:3	11	}
LEAF_NODE	1184:2	1184:2	8	}
SELECTION	1185:2	1185:50	6	
KEYWORD	1185:2	1185:2	7	if
LEAF_NODE	1185:2	1185:2	8	if
LEAF_NODE	1185:5	1185:5	7	(
CONDITION	1185:6	1185:6	7	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
EXPR	1185:6	1185:47	8	TIFFWriteScanline ( out , outbuf , row , 0 ) < 0
FUNCTION_CALL	1185:6	1185:43	9	TIFFWriteScanline ( out , outbuf , row , 0 )
CALLEE	1185:6	1185:6	10	TIFFWriteScanline
LEAF_NODE	1185:6	1185:6	11	TIFFWriteScanline
LEAF_NODE	1185:23	1185:23	10	(
ARGUMENT	1185:24	1185:24	10	out
FIELD	1185:24	1185:24	11	out
LEAF_NODE	1185:24	1185:24	12	out
LEAF_NODE	1185:27	1185:27	10	,
ARGUMENT	1185:29	1185:29	10	outbuf
FIELD	1185:29	1185:29	11	outbuf
LEAF_NODE	1185:29	1185:29	12	outbuf
LEAF_NODE	1185:35	1185:35	10	,
ARGUMENT	1185:37	1185:37	10	row
FIELD	1185:37	1185:37	11	row
LEAF_NODE	1185:37	1185:37	12	row
LEAF_NODE	1185:40	1185:40	10	,
ARGUMENT	1185:42	1185:42	10	0
FIELD	1185:42	1185:42	11	0
LEAF_NODE	1185:42	1185:42	12	0
LEAF_NODE	1185:43	1185:43	10	)
REL_OPERATOR	1185:45	1185:45	9	<
LEAF_NODE	1185:45	1185:45	10	<
FIELD	1185:47	1185:47	9	0
LEAF_NODE	1185:47	1185:47	10	0
LEAF_NODE	1185:48	1185:48	7	)
STATEMENTS	1185:50	1190:2	7	
LEAF_NODE	1185:50	1185:50	8	{
STATEMENTS	1186:3	1189:3	8	
EXPR_STATEMENT	1186:3	1188:27	9	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row ) ;
EXPR	1186:3	1186:3	10	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1186:3	1188:26	11	TIFFError ( TIFFFileName ( out ) , "Error, can't write scanline %lu" , ( unsigned long ) row )
CALLEE	1186:3	1186:3	12	TIFFError
LEAF_NODE	1186:3	1186:3	13	TIFFError
LEAF_NODE	1186:12	1186:12	12	(
ARGUMENT	1186:13	1186:13	12	TIFFFileName ( out )
FUNCTION_CALL	1186:13	1186:29	13	TIFFFileName ( out )
CALLEE	1186:13	1186:13	14	TIFFFileName
LEAF_NODE	1186:13	1186:13	15	TIFFFileName
LEAF_NODE	1186:25	1186:25	14	(
ARGUMENT	1186:26	1186:26	14	out
FIELD	1186:26	1186:26	15	out
LEAF_NODE	1186:26	1186:26	16	out
LEAF_NODE	1186:29	1186:29	14	)
LEAF_NODE	1186:30	1186:30	12	,
ARGUMENT	1187:7	1187:7	12	"Error, can't write scanline %lu"
FIELD	1187:7	1187:7	13	"Error, can't write scanline %lu"
LEAF_NODE	1187:7	1187:7	14	"Error, can't write scanline %lu"
LEAF_NODE	1187:40	1187:40	12	,
ARGUMENT	1188:7	1188:23	12	( unsigned long ) row
LEAF_NODE	1188:7	1188:7	13	(
TYPE_NAME	1188:8	1188:17	13	unsigned long
LEAF_NODE	1188:8	1188:8	14	unsigned
LEAF_NODE	1188:17	1188:17	14	long
LEAF_NODE	1188:21	1188:21	13	)
FIELD	1188:23	1188:23	13	row
LEAF_NODE	1188:23	1188:23	14	row
LEAF_NODE	1188:26	1188:26	12	)
LEAF_NODE	1188:27	1188:27	10	;
JUMP_STATEMENT	1189:3	1189:11	9	goto bad ;
KEYWORD	1189:3	1189:3	10	goto
LEAF_NODE	1189:3	1189:3	11	goto
DESTINATION	1189:8	1189:8	10	bad
LEAF_NODE	1189:8	1189:8	11	bad
LEAF_NODE	1189:11	1189:11	10	;
LEAF_NODE	1190:2	1190:2	8	}
LEAF_NODE	1191:1	1191:1	5	}
SELECTION	1192:1	1192:12	3	
KEYWORD	1192:1	1192:1	4	if
LEAF_NODE	1192:1	1192:1	5	if
LEAF_NODE	1192:4	1192:4	4	(
CONDITION	1192:5	1192:5	4	inbuf
EXPR	1192:5	1192:5	5	inbuf
FIELD	1192:5	1192:5	6	inbuf
LEAF_NODE	1192:5	1192:5	7	inbuf
LEAF_NODE	1192:10	1192:10	4	)
STATEMENTS	1192:12	1192:12	4	
EXPR_STATEMENT	1192:12	1192:28	5	_TIFFfree ( inbuf ) ;
EXPR	1192:12	1192:12	6	_TIFFfree ( inbuf )
FUNCTION_CALL	1192:12	1192:27	7	_TIFFfree ( inbuf )
CALLEE	1192:12	1192:12	8	_TIFFfree
LEAF_NODE	1192:12	1192:12	9	_TIFFfree
LEAF_NODE	1192:21	1192:21	8	(
ARGUMENT	1192:22	1192:22	8	inbuf
FIELD	1192:22	1192:22	9	inbuf
LEAF_NODE	1192:22	1192:22	10	inbuf
LEAF_NODE	1192:27	1192:27	8	)
LEAF_NODE	1192:28	1192:28	6	;
SELECTION	1193:1	1193:13	3	
KEYWORD	1193:1	1193:1	4	if
LEAF_NODE	1193:1	1193:1	5	if
LEAF_NODE	1193:4	1193:4	4	(
CONDITION	1193:5	1193:5	4	outbuf
EXPR	1193:5	1193:5	5	outbuf
FIELD	1193:5	1193:5	6	outbuf
LEAF_NODE	1193:5	1193:5	7	outbuf
LEAF_NODE	1193:11	1193:11	4	)
STATEMENTS	1193:13	1193:13	4	
EXPR_STATEMENT	1193:13	1193:30	5	_TIFFfree ( outbuf ) ;
EXPR	1193:13	1193:13	6	_TIFFfree ( outbuf )
FUNCTION_CALL	1193:13	1193:29	7	_TIFFfree ( outbuf )
CALLEE	1193:13	1193:13	8	_TIFFfree
LEAF_NODE	1193:13	1193:13	9	_TIFFfree
LEAF_NODE	1193:22	1193:22	8	(
ARGUMENT	1193:23	1193:23	8	outbuf
FIELD	1193:23	1193:23	9	outbuf
LEAF_NODE	1193:23	1193:23	10	outbuf
LEAF_NODE	1193:29	1193:29	8	)
LEAF_NODE	1193:30	1193:30	6	;
JUMP_STATEMENT	1194:1	1194:9	3	return 1 ;
KEYWORD	1194:1	1194:1	4	return
LEAF_NODE	1194:1	1194:1	5	return
DESTINATION	1194:8	1194:8	4	1
EXPR	1194:8	1194:8	5	1
FIELD	1194:8	1194:8	6	1
LEAF_NODE	1194:8	1194:8	7	1
LEAF_NODE	1194:9	1194:9	4	;
LABEL	1195:0	1195:3	3	bad :
LEAF_NODE	1195:0	1195:0	4	bad
LEAF_NODE	1195:3	1195:3	4	:
SELECTION	1196:1	1196:12	3	
KEYWORD	1196:1	1196:1	4	if
LEAF_NODE	1196:1	1196:1	5	if
LEAF_NODE	1196:4	1196:4	4	(
CONDITION	1196:5	1196:5	4	inbuf
EXPR	1196:5	1196:5	5	inbuf
FIELD	1196:5	1196:5	6	inbuf
LEAF_NODE	1196:5	1196:5	7	inbuf
LEAF_NODE	1196:10	1196:10	4	)
STATEMENTS	1196:12	1196:12	4	
EXPR_STATEMENT	1196:12	1196:28	5	_TIFFfree ( inbuf ) ;
EXPR	1196:12	1196:12	6	_TIFFfree ( inbuf )
FUNCTION_CALL	1196:12	1196:27	7	_TIFFfree ( inbuf )
CALLEE	1196:12	1196:12	8	_TIFFfree
LEAF_NODE	1196:12	1196:12	9	_TIFFfree
LEAF_NODE	1196:21	1196:21	8	(
ARGUMENT	1196:22	1196:22	8	inbuf
FIELD	1196:22	1196:22	9	inbuf
LEAF_NODE	1196:22	1196:22	10	inbuf
LEAF_NODE	1196:27	1196:27	8	)
LEAF_NODE	1196:28	1196:28	6	;
SELECTION	1197:1	1197:13	3	
KEYWORD	1197:1	1197:1	4	if
LEAF_NODE	1197:1	1197:1	5	if
LEAF_NODE	1197:4	1197:4	4	(
CONDITION	1197:5	1197:5	4	outbuf
EXPR	1197:5	1197:5	5	outbuf
FIELD	1197:5	1197:5	6	outbuf
LEAF_NODE	1197:5	1197:5	7	outbuf
LEAF_NODE	1197:11	1197:11	4	)
STATEMENTS	1197:13	1197:13	4	
EXPR_STATEMENT	1197:13	1197:30	5	_TIFFfree ( outbuf ) ;
EXPR	1197:13	1197:13	6	_TIFFfree ( outbuf )
FUNCTION_CALL	1197:13	1197:29	7	_TIFFfree ( outbuf )
CALLEE	1197:13	1197:13	8	_TIFFfree
LEAF_NODE	1197:13	1197:13	9	_TIFFfree
LEAF_NODE	1197:22	1197:22	8	(
ARGUMENT	1197:23	1197:23	8	outbuf
FIELD	1197:23	1197:23	9	outbuf
LEAF_NODE	1197:23	1197:23	10	outbuf
LEAF_NODE	1197:29	1197:29	8	)
LEAF_NODE	1197:30	1197:30	6	;
JUMP_STATEMENT	1198:1	1198:9	3	return 0 ;
KEYWORD	1198:1	1198:1	4	return
LEAF_NODE	1198:1	1198:1	5	return
DESTINATION	1198:8	1198:8	4	0
EXPR	1198:8	1198:8	5	0
FIELD	1198:8	1198:8	6	0
LEAF_NODE	1198:8	1198:8	7	0
LEAF_NODE	1198:9	1198:9	4	;
LEAF_NODE	1199:0	1199:0	2	}
FUNCTION_DEF	1201:0	1212:0	1	
RETURN_TYPE	1201:0	1201:7	2	static void
LEAF_NODE	1201:0	1201:0	3	static
TYPE_NAME	1201:7	1201:7	3	void
LEAF_NODE	1201:7	1201:7	4	void
FUNCTION_NAME	1202:0	1202:0	2	cpStripToTile
LEAF_NODE	1202:0	1202:0	3	cpStripToTile
PARAMETER_LIST	1202:13	1203:55	2	( uint8 * out , uint8 * in , uint32 rows , uint32 cols , int outskew , int64 inskew )
LEAF_NODE	1202:13	1202:13	3	(
PARAMETER_DECL	1202:14	1202:21	3	uint8 * out
TYPE	1202:14	1202:19	4	uint8 *
TYPE_NAME	1202:14	1202:14	5	uint8
LEAF_NODE	1202:14	1202:14	6	uint8
POINTER	1202:19	1202:19	5	*
LEAF_NODE	1202:19	1202:19	6	*
NAME	1202:21	1202:21	4	out
LEAF_NODE	1202:21	1202:21	5	out
LEAF_NODE	1202:24	1202:24	3	,
PARAMETER_DECL	1202:26	1202:33	3	uint8 * in
TYPE	1202:26	1202:31	4	uint8 *
TYPE_NAME	1202:26	1202:26	5	uint8
LEAF_NODE	1202:26	1202:26	6	uint8
POINTER	1202:31	1202:31	5	*
LEAF_NODE	1202:31	1202:31	6	*
NAME	1202:33	1202:33	4	in
LEAF_NODE	1202:33	1202:33	5	in
LEAF_NODE	1202:35	1202:35	3	,
PARAMETER_DECL	1203:4	1203:11	3	uint32 rows
TYPE	1203:4	1203:4	4	uint32
TYPE_NAME	1203:4	1203:4	5	uint32
LEAF_NODE	1203:4	1203:4	6	uint32
NAME	1203:11	1203:11	4	rows
LEAF_NODE	1203:11	1203:11	5	rows
LEAF_NODE	1203:15	1203:15	3	,
PARAMETER_DECL	1203:17	1203:24	3	uint32 cols
TYPE	1203:17	1203:17	4	uint32
TYPE_NAME	1203:17	1203:17	5	uint32
LEAF_NODE	1203:17	1203:17	6	uint32
NAME	1203:24	1203:24	4	cols
LEAF_NODE	1203:24	1203:24	5	cols
LEAF_NODE	1203:28	1203:28	3	,
PARAMETER_DECL	1203:30	1203:34	3	int outskew
TYPE	1203:30	1203:30	4	int
TYPE_NAME	1203:30	1203:30	5	int
LEAF_NODE	1203:30	1203:30	6	int
NAME	1203:34	1203:34	4	outskew
LEAF_NODE	1203:34	1203:34	5	outskew
LEAF_NODE	1203:41	1203:41	3	,
PARAMETER_DECL	1203:43	1203:49	3	int64 inskew
TYPE	1203:43	1203:43	4	int64
TYPE_NAME	1203:43	1203:43	5	int64
LEAF_NODE	1203:43	1203:43	6	int64
NAME	1203:49	1203:49	4	inskew
LEAF_NODE	1203:49	1203:49	5	inskew
LEAF_NODE	1203:55	1203:55	3	)
LEAF_NODE	1204:0	1204:0	2	{
STATEMENTS	1205:1	1205:1	2	
ITERATION	1205:1	1205:20	3	
KEYWORD	1205:1	1205:1	4	while
LEAF_NODE	1205:1	1205:1	5	while
LEAF_NODE	1205:7	1205:7	4	(
CONDITION	1205:8	1205:8	4	rows -- > 0
EXPR	1205:8	1205:17	5	rows -- > 0
FIELD	1205:8	1205:12	6	rows --
LEAF_NODE	1205:8	1205:8	7	rows
LEAF_NODE	1205:12	1205:12	7	--
REL_OPERATOR	1205:15	1205:15	6	>
LEAF_NODE	1205:15	1205:15	7	>
FIELD	1205:17	1205:17	6	0
LEAF_NODE	1205:17	1205:17	7	0
LEAF_NODE	1205:18	1205:18	4	)
STATEMENTS	1205:20	1211:1	4	
LEAF_NODE	1205:20	1205:20	5	{
STATEMENTS	1206:2	1210:2	5	
SIMPLE_DECL	1206:2	1206:17	6	uint32 j ; j = cols ;
VAR_DECL	1206:2	1206:9	7	uint32 j ; j = cols
TYPE	1206:2	1206:2	8	uint32
TYPE_NAME	1206:2	1206:2	9	uint32
LEAF_NODE	1206:2	1206:2	10	uint32
NAME	1206:9	1206:9	8	j
LEAF_NODE	1206:9	1206:9	9	j
LEAF_NODE	0:0	0:0	8	;
INIT	1206:9	1206:9	8	j = cols
ASSIGN	1206:9	1206:13	9	j = cols
LVAL	1206:9	1206:9	10	j
NAME	1206:9	1206:9	11	j
LEAF_NODE	1206:9	1206:9	12	j
ASSIGN_OP	1206:11	1206:11	10	=
LEAF_NODE	1206:11	1206:11	11	=
RVAL	1206:13	1206:13	10	cols
FIELD	1206:13	1206:13	11	cols
LEAF_NODE	1206:13	1206:13	12	cols
LEAF_NODE	1206:17	1206:17	7	;
ITERATION	1207:2	1208:3	6	
KEYWORD	1207:2	1207:2	7	while
LEAF_NODE	1207:2	1207:2	8	while
LEAF_NODE	1207:8	1207:8	7	(
CONDITION	1207:9	1207:9	7	j -- > 0
EXPR	1207:9	1207:15	8	j -- > 0
FIELD	1207:9	1207:10	9	j --
LEAF_NODE	1207:9	1207:9	10	j
LEAF_NODE	1207:10	1207:10	10	--
REL_OPERATOR	1207:13	1207:13	9	>
LEAF_NODE	1207:13	1207:13	10	>
FIELD	1207:15	1207:15	9	0
LEAF_NODE	1207:15	1207:15	10	0
LEAF_NODE	1207:16	1207:16	7	)
STATEMENTS	1208:3	1208:3	7	
EXPR_STATEMENT	1208:3	1208:17	8	* out ++ = * in ++ ;
EXPR	1208:3	1208:3	9	* out ++ = * in ++
ASSIGN	1208:3	1208:12	10	* out ++ = * in ++
LVAL	1208:3	1208:3	11	* out ++
UNARY_EXPR	1208:3	1208:4	12	* out ++
UNARY_OPERATOR	1208:3	1208:3	13	*
LEAF_NODE	1208:3	1208:3	14	*
FIELD	1208:4	1208:7	13	out ++
LEAF_NODE	1208:4	1208:4	14	out
LEAF_NODE	1208:7	1208:7	14	++
ASSIGN_OP	1208:10	1208:10	11	=
LEAF_NODE	1208:10	1208:10	12	=
RVAL	1208:12	1208:12	11	* in ++
UNARY_EXPR	1208:12	1208:13	12	* in ++
UNARY_OPERATOR	1208:12	1208:12	13	*
LEAF_NODE	1208:12	1208:12	14	*
FIELD	1208:13	1208:15	13	in ++
LEAF_NODE	1208:13	1208:13	14	in
LEAF_NODE	1208:15	1208:15	14	++
LEAF_NODE	1208:17	1208:17	9	;
EXPR_STATEMENT	1209:2	1209:16	6	out += outskew ;
EXPR	1209:2	1209:2	7	out += outskew
ASSIGN	1209:2	1209:9	8	out += outskew
LVAL	1209:2	1209:2	9	out
FIELD	1209:2	1209:2	10	out
LEAF_NODE	1209:2	1209:2	11	out
ASSIGN_OP	1209:6	1209:6	9	+=
LEAF_NODE	1209:6	1209:6	10	+=
RVAL	1209:9	1209:9	9	outskew
FIELD	1209:9	1209:9	10	outskew
LEAF_NODE	1209:9	1209:9	11	outskew
LEAF_NODE	1209:16	1209:16	7	;
EXPR_STATEMENT	1210:2	1210:14	6	in += inskew ;
EXPR	1210:2	1210:2	7	in += inskew
ASSIGN	1210:2	1210:8	8	in += inskew
LVAL	1210:2	1210:2	9	in
FIELD	1210:2	1210:2	10	in
LEAF_NODE	1210:2	1210:2	11	in
ASSIGN_OP	1210:5	1210:5	9	+=
LEAF_NODE	1210:5	1210:5	10	+=
RVAL	1210:8	1210:8	9	inskew
FIELD	1210:8	1210:8	10	inskew
LEAF_NODE	1210:8	1210:8	11	inskew
LEAF_NODE	1210:14	1210:14	7	;
LEAF_NODE	1211:1	1211:1	5	}
LEAF_NODE	1212:0	1212:0	2	}
FUNCTION_DEF	1214:0	1233:0	1	
RETURN_TYPE	1214:0	1214:7	2	static void
LEAF_NODE	1214:0	1214:0	3	static
TYPE_NAME	1214:7	1214:7	3	void
LEAF_NODE	1214:7	1214:7	4	void
FUNCTION_NAME	1215:0	1215:0	2	cpContigBufToSeparateBuf
LEAF_NODE	1215:0	1215:0	3	cpContigBufToSeparateBuf
PARAMETER_LIST	1215:24	1217:25	2	( uint8 * out , uint8 * in , uint32 rows , uint32 cols , int outskew , int inskew , tsample_t spp , int bytes_per_sample )
LEAF_NODE	1215:24	1215:24	3	(
PARAMETER_DECL	1215:25	1215:32	3	uint8 * out
TYPE	1215:25	1215:30	4	uint8 *
TYPE_NAME	1215:25	1215:25	5	uint8
LEAF_NODE	1215:25	1215:25	6	uint8
POINTER	1215:30	1215:30	5	*
LEAF_NODE	1215:30	1215:30	6	*
NAME	1215:32	1215:32	4	out
LEAF_NODE	1215:32	1215:32	5	out
LEAF_NODE	1215:35	1215:35	3	,
PARAMETER_DECL	1215:37	1215:44	3	uint8 * in
TYPE	1215:37	1215:42	4	uint8 *
TYPE_NAME	1215:37	1215:37	5	uint8
LEAF_NODE	1215:37	1215:37	6	uint8
POINTER	1215:42	1215:42	5	*
LEAF_NODE	1215:42	1215:42	6	*
NAME	1215:44	1215:44	4	in
LEAF_NODE	1215:44	1215:44	5	in
LEAF_NODE	1215:46	1215:46	3	,
PARAMETER_DECL	1216:4	1216:11	3	uint32 rows
TYPE	1216:4	1216:4	4	uint32
TYPE_NAME	1216:4	1216:4	5	uint32
LEAF_NODE	1216:4	1216:4	6	uint32
NAME	1216:11	1216:11	4	rows
LEAF_NODE	1216:11	1216:11	5	rows
LEAF_NODE	1216:15	1216:15	3	,
PARAMETER_DECL	1216:17	1216:24	3	uint32 cols
TYPE	1216:17	1216:17	4	uint32
TYPE_NAME	1216:17	1216:17	5	uint32
LEAF_NODE	1216:17	1216:17	6	uint32
NAME	1216:24	1216:24	4	cols
LEAF_NODE	1216:24	1216:24	5	cols
LEAF_NODE	1216:28	1216:28	3	,
PARAMETER_DECL	1216:30	1216:34	3	int outskew
TYPE	1216:30	1216:30	4	int
TYPE_NAME	1216:30	1216:30	5	int
LEAF_NODE	1216:30	1216:30	6	int
NAME	1216:34	1216:34	4	outskew
LEAF_NODE	1216:34	1216:34	5	outskew
LEAF_NODE	1216:41	1216:41	3	,
PARAMETER_DECL	1216:43	1216:47	3	int inskew
TYPE	1216:43	1216:43	4	int
TYPE_NAME	1216:43	1216:43	5	int
LEAF_NODE	1216:43	1216:43	6	int
NAME	1216:47	1216:47	4	inskew
LEAF_NODE	1216:47	1216:47	5	inskew
LEAF_NODE	1216:53	1216:53	3	,
PARAMETER_DECL	1216:55	1216:65	3	tsample_t spp
TYPE	1216:55	1216:55	4	tsample_t
TYPE_NAME	1216:55	1216:55	5	tsample_t
LEAF_NODE	1216:55	1216:55	6	tsample_t
NAME	1216:65	1216:65	4	spp
LEAF_NODE	1216:65	1216:65	5	spp
LEAF_NODE	1216:68	1216:68	3	,
PARAMETER_DECL	1217:4	1217:8	3	int bytes_per_sample
TYPE	1217:4	1217:4	4	int
TYPE_NAME	1217:4	1217:4	5	int
LEAF_NODE	1217:4	1217:4	6	int
NAME	1217:8	1217:8	4	bytes_per_sample
LEAF_NODE	1217:8	1217:8	5	bytes_per_sample
LEAF_NODE	1217:25	1217:25	3	)
LEAF_NODE	1218:0	1218:0	2	{
STATEMENTS	1219:1	1219:1	2	
ITERATION	1219:1	1219:20	3	
KEYWORD	1219:1	1219:1	4	while
LEAF_NODE	1219:1	1219:1	5	while
LEAF_NODE	1219:7	1219:7	4	(
CONDITION	1219:8	1219:8	4	rows -- > 0
EXPR	1219:8	1219:17	5	rows -- > 0
FIELD	1219:8	1219:12	6	rows --
LEAF_NODE	1219:8	1219:8	7	rows
LEAF_NODE	1219:12	1219:12	7	--
REL_OPERATOR	1219:15	1219:15	6	>
LEAF_NODE	1219:15	1219:15	7	>
FIELD	1219:17	1219:17	6	0
LEAF_NODE	1219:17	1219:17	7	0
LEAF_NODE	1219:18	1219:18	4	)
STATEMENTS	1219:20	1232:1	4	
LEAF_NODE	1219:20	1219:20	5	{
STATEMENTS	1220:2	1231:2	5	
SIMPLE_DECL	1220:2	1220:17	6	uint32 j ; j = cols ;
VAR_DECL	1220:2	1220:9	7	uint32 j ; j = cols
TYPE	1220:2	1220:2	8	uint32
TYPE_NAME	1220:2	1220:2	9	uint32
LEAF_NODE	1220:2	1220:2	10	uint32
NAME	1220:9	1220:9	8	j
LEAF_NODE	1220:9	1220:9	9	j
LEAF_NODE	0:0	0:0	8	;
INIT	1220:9	1220:9	8	j = cols
ASSIGN	1220:9	1220:13	9	j = cols
LVAL	1220:9	1220:9	10	j
NAME	1220:9	1220:9	11	j
LEAF_NODE	1220:9	1220:9	12	j
ASSIGN_OP	1220:11	1220:11	10	=
LEAF_NODE	1220:11	1220:11	11	=
RVAL	1220:13	1220:13	10	cols
FIELD	1220:13	1220:13	11	cols
LEAF_NODE	1220:13	1220:13	12	cols
LEAF_NODE	1220:17	1220:17	7	;
ITERATION	1221:2	1222:2	6	
KEYWORD	1221:2	1221:2	7	while
LEAF_NODE	1221:2	1221:2	8	while
LEAF_NODE	1221:8	1221:8	7	(
CONDITION	1221:9	1221:9	7	j -- > 0
EXPR	1221:9	1221:15	8	j -- > 0
FIELD	1221:9	1221:10	9	j --
LEAF_NODE	1221:9	1221:9	10	j
LEAF_NODE	1221:10	1221:10	10	--
REL_OPERATOR	1221:13	1221:13	9	>
LEAF_NODE	1221:13	1221:13	10	>
FIELD	1221:15	1221:15	9	0
LEAF_NODE	1221:15	1221:15	10	0
LEAF_NODE	1221:16	1221:16	7	)
STATEMENTS	1222:2	1229:2	7	
LEAF_NODE	1222:2	1222:2	8	{
STATEMENTS	1223:3	1228:3	8	
SIMPLE_DECL	1223:3	1223:27	9	int n ; n = bytes_per_sample ;
VAR_DECL	1223:3	1223:7	10	int n ; n = bytes_per_sample
TYPE	1223:3	1223:3	11	int
TYPE_NAME	1223:3	1223:3	12	int
LEAF_NODE	1223:3	1223:3	13	int
NAME	1223:7	1223:7	11	n
LEAF_NODE	1223:7	1223:7	12	n
LEAF_NODE	0:0	0:0	11	;
INIT	1223:7	1223:7	11	n = bytes_per_sample
ASSIGN	1223:7	1223:11	12	n = bytes_per_sample
LVAL	1223:7	1223:7	13	n
NAME	1223:7	1223:7	14	n
LEAF_NODE	1223:7	1223:7	15	n
ASSIGN_OP	1223:9	1223:9	13	=
LEAF_NODE	1223:9	1223:9	14	=
RVAL	1223:11	1223:11	13	bytes_per_sample
FIELD	1223:11	1223:11	14	bytes_per_sample
LEAF_NODE	1223:11	1223:11	15	bytes_per_sample
LEAF_NODE	1223:27	1223:27	10	;
ITERATION	1225:3	1225:16	9	
KEYWORD	1225:3	1225:3	10	while
LEAF_NODE	1225:3	1225:3	11	while
LEAF_NODE	1225:8	1225:8	10	(
CONDITION	1225:10	1225:10	10	n --
EXPR	1225:10	1225:10	11	n --
FIELD	1225:10	1225:11	12	n --
LEAF_NODE	1225:10	1225:10	13	n
LEAF_NODE	1225:11	1225:11	13	--
LEAF_NODE	1225:14	1225:14	10	)
STATEMENTS	1225:16	1227:3	10	
LEAF_NODE	1225:16	1225:16	11	{
STATEMENTS	1226:4	1226:4	11	
EXPR_STATEMENT	1226:4	1226:18	12	* out ++ = * in ++ ;
EXPR	1226:4	1226:4	13	* out ++ = * in ++
ASSIGN	1226:4	1226:13	14	* out ++ = * in ++
LVAL	1226:4	1226:4	15	* out ++
UNARY_EXPR	1226:4	1226:5	16	* out ++
UNARY_OPERATOR	1226:4	1226:4	17	*
LEAF_NODE	1226:4	1226:4	18	*
FIELD	1226:5	1226:8	17	out ++
LEAF_NODE	1226:5	1226:5	18	out
LEAF_NODE	1226:8	1226:8	18	++
ASSIGN_OP	1226:11	1226:11	15	=
LEAF_NODE	1226:11	1226:11	16	=
RVAL	1226:13	1226:13	15	* in ++
UNARY_EXPR	1226:13	1226:14	16	* in ++
UNARY_OPERATOR	1226:13	1226:13	17	*
LEAF_NODE	1226:13	1226:13	18	*
FIELD	1226:14	1226:16	17	in ++
LEAF_NODE	1226:14	1226:14	18	in
LEAF_NODE	1226:16	1226:16	18	++
LEAF_NODE	1226:18	1226:18	13	;
LEAF_NODE	1227:3	1227:3	11	}
EXPR_STATEMENT	1228:3	1228:35	9	in += ( spp - 1 ) * bytes_per_sample ;
EXPR	1228:3	1228:3	10	in += ( spp - 1 ) * bytes_per_sample
ASSIGN	1228:3	1228:9	11	in += ( spp - 1 ) * bytes_per_sample
LVAL	1228:3	1228:3	12	in
FIELD	1228:3	1228:3	13	in
LEAF_NODE	1228:3	1228:3	14	in
ASSIGN_OP	1228:6	1228:6	12	+=
LEAF_NODE	1228:6	1228:6	13	+=
RVAL	1228:9	1228:19	12	( spp - 1 ) * bytes_per_sample
LEAF_NODE	1228:9	1228:9	13	(
FIELD	1228:10	1228:10	13	spp
LEAF_NODE	1228:10	1228:10	14	spp
LEAF_NODE	1228:13	1228:13	13	-
FIELD	1228:14	1228:14	13	1
LEAF_NODE	1228:14	1228:14	14	1
LEAF_NODE	1228:15	1228:15	13	)
LEAF_NODE	1228:17	1228:17	13	*
FIELD	1228:19	1228:19	13	bytes_per_sample
LEAF_NODE	1228:19	1228:19	14	bytes_per_sample
LEAF_NODE	1228:35	1228:35	10	;
LEAF_NODE	1229:2	1229:2	8	}
EXPR_STATEMENT	1230:2	1230:16	6	out += outskew ;
EXPR	1230:2	1230:2	7	out += outskew
ASSIGN	1230:2	1230:9	8	out += outskew
LVAL	1230:2	1230:2	9	out
FIELD	1230:2	1230:2	10	out
LEAF_NODE	1230:2	1230:2	11	out
ASSIGN_OP	1230:6	1230:6	9	+=
LEAF_NODE	1230:6	1230:6	10	+=
RVAL	1230:9	1230:9	9	outskew
FIELD	1230:9	1230:9	10	outskew
LEAF_NODE	1230:9	1230:9	11	outskew
LEAF_NODE	1230:16	1230:16	7	;
EXPR_STATEMENT	1231:2	1231:14	6	in += inskew ;
EXPR	1231:2	1231:2	7	in += inskew
ASSIGN	1231:2	1231:8	8	in += inskew
LVAL	1231:2	1231:2	9	in
FIELD	1231:2	1231:2	10	in
LEAF_NODE	1231:2	1231:2	11	in
ASSIGN_OP	1231:5	1231:5	9	+=
LEAF_NODE	1231:5	1231:5	10	+=
RVAL	1231:8	1231:8	9	inskew
FIELD	1231:8	1231:8	10	inskew
LEAF_NODE	1231:8	1231:8	11	inskew
LEAF_NODE	1231:14	1231:14	7	;
LEAF_NODE	1232:1	1232:1	5	}
LEAF_NODE	1233:0	1233:0	2	}
FUNCTION_DEF	1235:0	1253:0	1	
RETURN_TYPE	1235:0	1235:7	2	static void
LEAF_NODE	1235:0	1235:0	3	static
TYPE_NAME	1235:7	1235:7	3	void
LEAF_NODE	1235:7	1235:7	4	void
FUNCTION_NAME	1236:0	1236:0	2	cpSeparateBufToContigBuf
LEAF_NODE	1236:0	1236:0	3	cpSeparateBufToContigBuf
PARAMETER_LIST	1236:24	1238:24	2	( uint8 * out , uint8 * in , uint32 rows , uint32 cols , int outskew , int inskew , tsample_t spp , int bytes_per_sample )
LEAF_NODE	1236:24	1236:24	3	(
PARAMETER_DECL	1236:25	1236:32	3	uint8 * out
TYPE	1236:25	1236:30	4	uint8 *
TYPE_NAME	1236:25	1236:25	5	uint8
LEAF_NODE	1236:25	1236:25	6	uint8
POINTER	1236:30	1236:30	5	*
LEAF_NODE	1236:30	1236:30	6	*
NAME	1236:32	1236:32	4	out
LEAF_NODE	1236:32	1236:32	5	out
LEAF_NODE	1236:35	1236:35	3	,
PARAMETER_DECL	1236:37	1236:44	3	uint8 * in
TYPE	1236:37	1236:42	4	uint8 *
TYPE_NAME	1236:37	1236:37	5	uint8
LEAF_NODE	1236:37	1236:37	6	uint8
POINTER	1236:42	1236:42	5	*
LEAF_NODE	1236:42	1236:42	6	*
NAME	1236:44	1236:44	4	in
LEAF_NODE	1236:44	1236:44	5	in
LEAF_NODE	1236:46	1236:46	3	,
PARAMETER_DECL	1237:4	1237:11	3	uint32 rows
TYPE	1237:4	1237:4	4	uint32
TYPE_NAME	1237:4	1237:4	5	uint32
LEAF_NODE	1237:4	1237:4	6	uint32
NAME	1237:11	1237:11	4	rows
LEAF_NODE	1237:11	1237:11	5	rows
LEAF_NODE	1237:15	1237:15	3	,
PARAMETER_DECL	1237:17	1237:24	3	uint32 cols
TYPE	1237:17	1237:17	4	uint32
TYPE_NAME	1237:17	1237:17	5	uint32
LEAF_NODE	1237:17	1237:17	6	uint32
NAME	1237:24	1237:24	4	cols
LEAF_NODE	1237:24	1237:24	5	cols
LEAF_NODE	1237:28	1237:28	3	,
PARAMETER_DECL	1237:30	1237:34	3	int outskew
TYPE	1237:30	1237:30	4	int
TYPE_NAME	1237:30	1237:30	5	int
LEAF_NODE	1237:30	1237:30	6	int
NAME	1237:34	1237:34	4	outskew
LEAF_NODE	1237:34	1237:34	5	outskew
LEAF_NODE	1237:41	1237:41	3	,
PARAMETER_DECL	1237:43	1237:47	3	int inskew
TYPE	1237:43	1237:43	4	int
TYPE_NAME	1237:43	1237:43	5	int
LEAF_NODE	1237:43	1237:43	6	int
NAME	1237:47	1237:47	4	inskew
LEAF_NODE	1237:47	1237:47	5	inskew
LEAF_NODE	1237:53	1237:53	3	,
PARAMETER_DECL	1237:55	1237:65	3	tsample_t spp
TYPE	1237:55	1237:55	4	tsample_t
TYPE_NAME	1237:55	1237:55	5	tsample_t
LEAF_NODE	1237:55	1237:55	6	tsample_t
NAME	1237:65	1237:65	4	spp
LEAF_NODE	1237:65	1237:65	5	spp
LEAF_NODE	1237:68	1237:68	3	,
PARAMETER_DECL	1238:4	1238:8	3	int bytes_per_sample
TYPE	1238:4	1238:4	4	int
TYPE_NAME	1238:4	1238:4	5	int
LEAF_NODE	1238:4	1238:4	6	int
NAME	1238:8	1238:8	4	bytes_per_sample
LEAF_NODE	1238:8	1238:8	5	bytes_per_sample
LEAF_NODE	1238:24	1238:24	3	)
LEAF_NODE	1239:0	1239:0	2	{
STATEMENTS	1240:1	1240:1	2	
ITERATION	1240:1	1240:20	3	
KEYWORD	1240:1	1240:1	4	while
LEAF_NODE	1240:1	1240:1	5	while
LEAF_NODE	1240:7	1240:7	4	(
CONDITION	1240:8	1240:8	4	rows -- > 0
EXPR	1240:8	1240:17	5	rows -- > 0
FIELD	1240:8	1240:12	6	rows --
LEAF_NODE	1240:8	1240:8	7	rows
LEAF_NODE	1240:12	1240:12	7	--
REL_OPERATOR	1240:15	1240:15	6	>
LEAF_NODE	1240:15	1240:15	7	>
FIELD	1240:17	1240:17	6	0
LEAF_NODE	1240:17	1240:17	7	0
LEAF_NODE	1240:18	1240:18	4	)
STATEMENTS	1240:20	1252:1	4	
LEAF_NODE	1240:20	1240:20	5	{
STATEMENTS	1241:2	1251:2	5	
SIMPLE_DECL	1241:2	1241:17	6	uint32 j ; j = cols ;
VAR_DECL	1241:2	1241:9	7	uint32 j ; j = cols
TYPE	1241:2	1241:2	8	uint32
TYPE_NAME	1241:2	1241:2	9	uint32
LEAF_NODE	1241:2	1241:2	10	uint32
NAME	1241:9	1241:9	8	j
LEAF_NODE	1241:9	1241:9	9	j
LEAF_NODE	0:0	0:0	8	;
INIT	1241:9	1241:9	8	j = cols
ASSIGN	1241:9	1241:13	9	j = cols
LVAL	1241:9	1241:9	10	j
NAME	1241:9	1241:9	11	j
LEAF_NODE	1241:9	1241:9	12	j
ASSIGN_OP	1241:11	1241:11	10	=
LEAF_NODE	1241:11	1241:11	11	=
RVAL	1241:13	1241:13	10	cols
FIELD	1241:13	1241:13	11	cols
LEAF_NODE	1241:13	1241:13	12	cols
LEAF_NODE	1241:17	1241:17	7	;
ITERATION	1242:2	1242:18	6	
KEYWORD	1242:2	1242:2	7	while
LEAF_NODE	1242:2	1242:2	8	while
LEAF_NODE	1242:8	1242:8	7	(
CONDITION	1242:9	1242:9	7	j -- > 0
EXPR	1242:9	1242:15	8	j -- > 0
FIELD	1242:9	1242:10	9	j --
LEAF_NODE	1242:9	1242:9	10	j
LEAF_NODE	1242:10	1242:10	10	--
REL_OPERATOR	1242:13	1242:13	9	>
LEAF_NODE	1242:13	1242:13	10	>
FIELD	1242:15	1242:15	9	0
LEAF_NODE	1242:15	1242:15	10	0
LEAF_NODE	1242:16	1242:16	7	)
STATEMENTS	1242:18	1249:2	7	
LEAF_NODE	1242:18	1242:18	8	{
STATEMENTS	1243:3	1248:3	8	
SIMPLE_DECL	1243:3	1243:27	9	int n ; n = bytes_per_sample ;
VAR_DECL	1243:3	1243:7	10	int n ; n = bytes_per_sample
TYPE	1243:3	1243:3	11	int
TYPE_NAME	1243:3	1243:3	12	int
LEAF_NODE	1243:3	1243:3	13	int
NAME	1243:7	1243:7	11	n
LEAF_NODE	1243:7	1243:7	12	n
LEAF_NODE	0:0	0:0	11	;
INIT	1243:7	1243:7	11	n = bytes_per_sample
ASSIGN	1243:7	1243:11	12	n = bytes_per_sample
LVAL	1243:7	1243:7	13	n
NAME	1243:7	1243:7	14	n
LEAF_NODE	1243:7	1243:7	15	n
ASSIGN_OP	1243:9	1243:9	13	=
LEAF_NODE	1243:9	1243:9	14	=
RVAL	1243:11	1243:11	13	bytes_per_sample
FIELD	1243:11	1243:11	14	bytes_per_sample
LEAF_NODE	1243:11	1243:11	15	bytes_per_sample
LEAF_NODE	1243:27	1243:27	10	;
ITERATION	1245:3	1245:16	9	
KEYWORD	1245:3	1245:3	10	while
LEAF_NODE	1245:3	1245:3	11	while
LEAF_NODE	1245:8	1245:8	10	(
CONDITION	1245:10	1245:10	10	n --
EXPR	1245:10	1245:10	11	n --
FIELD	1245:10	1245:11	12	n --
LEAF_NODE	1245:10	1245:10	13	n
LEAF_NODE	1245:11	1245:11	13	--
LEAF_NODE	1245:14	1245:14	10	)
STATEMENTS	1245:16	1247:3	10	
LEAF_NODE	1245:16	1245:16	11	{
STATEMENTS	1246:4	1246:4	11	
EXPR_STATEMENT	1246:4	1246:18	12	* out ++ = * in ++ ;
EXPR	1246:4	1246:4	13	* out ++ = * in ++
ASSIGN	1246:4	1246:13	14	* out ++ = * in ++
LVAL	1246:4	1246:4	15	* out ++
UNARY_EXPR	1246:4	1246:5	16	* out ++
UNARY_OPERATOR	1246:4	1246:4	17	*
LEAF_NODE	1246:4	1246:4	18	*
FIELD	1246:5	1246:8	17	out ++
LEAF_NODE	1246:5	1246:5	18	out
LEAF_NODE	1246:8	1246:8	18	++
ASSIGN_OP	1246:11	1246:11	15	=
LEAF_NODE	1246:11	1246:11	16	=
RVAL	1246:13	1246:13	15	* in ++
UNARY_EXPR	1246:13	1246:14	16	* in ++
UNARY_OPERATOR	1246:13	1246:13	17	*
LEAF_NODE	1246:13	1246:13	18	*
FIELD	1246:14	1246:16	17	in ++
LEAF_NODE	1246:14	1246:14	18	in
LEAF_NODE	1246:16	1246:16	18	++
LEAF_NODE	1246:18	1246:18	13	;
LEAF_NODE	1247:3	1247:3	11	}
EXPR_STATEMENT	1248:3	1248:34	9	out += ( spp - 1 ) * bytes_per_sample ;
EXPR	1248:3	1248:3	10	out += ( spp - 1 ) * bytes_per_sample
ASSIGN	1248:3	1248:10	11	out += ( spp - 1 ) * bytes_per_sample
LVAL	1248:3	1248:3	12	out
FIELD	1248:3	1248:3	13	out
LEAF_NODE	1248:3	1248:3	14	out
ASSIGN_OP	1248:7	1248:7	12	+=
LEAF_NODE	1248:7	1248:7	13	+=
RVAL	1248:10	1248:18	12	( spp - 1 ) * bytes_per_sample
LEAF_NODE	1248:10	1248:10	13	(
FIELD	1248:11	1248:11	13	spp
LEAF_NODE	1248:11	1248:11	14	spp
LEAF_NODE	1248:14	1248:14	13	-
FIELD	1248:15	1248:15	13	1
LEAF_NODE	1248:15	1248:15	14	1
LEAF_NODE	1248:16	1248:16	13	)
LEAF_NODE	1248:17	1248:17	13	*
FIELD	1248:18	1248:18	13	bytes_per_sample
LEAF_NODE	1248:18	1248:18	14	bytes_per_sample
LEAF_NODE	1248:34	1248:34	10	;
LEAF_NODE	1249:2	1249:2	8	}
EXPR_STATEMENT	1250:2	1250:16	6	out += outskew ;
EXPR	1250:2	1250:2	7	out += outskew
ASSIGN	1250:2	1250:9	8	out += outskew
LVAL	1250:2	1250:2	9	out
FIELD	1250:2	1250:2	10	out
LEAF_NODE	1250:2	1250:2	11	out
ASSIGN_OP	1250:6	1250:6	9	+=
LEAF_NODE	1250:6	1250:6	10	+=
RVAL	1250:9	1250:9	9	outskew
FIELD	1250:9	1250:9	10	outskew
LEAF_NODE	1250:9	1250:9	11	outskew
LEAF_NODE	1250:16	1250:16	7	;
EXPR_STATEMENT	1251:2	1251:14	6	in += inskew ;
EXPR	1251:2	1251:2	7	in += inskew
ASSIGN	1251:2	1251:8	8	in += inskew
LVAL	1251:2	1251:2	9	in
FIELD	1251:2	1251:2	10	in
LEAF_NODE	1251:2	1251:2	11	in
ASSIGN_OP	1251:5	1251:5	9	+=
LEAF_NODE	1251:5	1251:5	10	+=
RVAL	1251:8	1251:8	9	inskew
FIELD	1251:8	1251:8	10	inskew
LEAF_NODE	1251:8	1251:8	11	inskew
LEAF_NODE	1251:14	1251:14	7	;
LEAF_NODE	1252:1	1252:1	5	}
LEAF_NODE	1253:0	1253:0	2	}
FUNCTION_DEF	1255:0	1286:0	1	
RETURN_TYPE	1255:0	1255:7	2	static int
LEAF_NODE	1255:0	1255:0	3	static
TYPE_NAME	1255:7	1255:7	3	int
LEAF_NODE	1255:7	1255:7	4	int
FUNCTION_NAME	1256:0	1256:0	2	cpImage
LEAF_NODE	1256:0	1256:0	3	cpImage
PARAMETER_LIST	1256:7	1257:53	2	( TIFF * in , TIFF * out , readFunc fin , writeFunc fout , uint32 imagelength , uint32 imagewidth , tsample_t spp )
LEAF_NODE	1256:7	1256:7	3	(
PARAMETER_DECL	1256:8	1256:14	3	TIFF * in
TYPE	1256:8	1256:12	4	TIFF *
TYPE_NAME	1256:8	1256:8	5	TIFF
LEAF_NODE	1256:8	1256:8	6	TIFF
POINTER	1256:12	1256:12	5	*
LEAF_NODE	1256:12	1256:12	6	*
NAME	1256:14	1256:14	4	in
LEAF_NODE	1256:14	1256:14	5	in
LEAF_NODE	1256:16	1256:16	3	,
PARAMETER_DECL	1256:18	1256:24	3	TIFF * out
TYPE	1256:18	1256:22	4	TIFF *
TYPE_NAME	1256:18	1256:18	5	TIFF
LEAF_NODE	1256:18	1256:18	6	TIFF
POINTER	1256:22	1256:22	5	*
LEAF_NODE	1256:22	1256:22	6	*
NAME	1256:24	1256:24	4	out
LEAF_NODE	1256:24	1256:24	5	out
LEAF_NODE	1256:27	1256:27	3	,
PARAMETER_DECL	1256:29	1256:38	3	readFunc fin
TYPE	1256:29	1256:29	4	readFunc
TYPE_NAME	1256:29	1256:29	5	readFunc
LEAF_NODE	1256:29	1256:29	6	readFunc
NAME	1256:38	1256:38	4	fin
LEAF_NODE	1256:38	1256:38	5	fin
LEAF_NODE	1256:41	1256:41	3	,
PARAMETER_DECL	1256:43	1256:53	3	writeFunc fout
TYPE	1256:43	1256:43	4	writeFunc
TYPE_NAME	1256:43	1256:43	5	writeFunc
LEAF_NODE	1256:43	1256:43	6	writeFunc
NAME	1256:53	1256:53	4	fout
LEAF_NODE	1256:53	1256:53	5	fout
LEAF_NODE	1256:57	1256:57	3	,
PARAMETER_DECL	1257:1	1257:8	3	uint32 imagelength
TYPE	1257:1	1257:1	4	uint32
TYPE_NAME	1257:1	1257:1	5	uint32
LEAF_NODE	1257:1	1257:1	6	uint32
NAME	1257:8	1257:8	4	imagelength
LEAF_NODE	1257:8	1257:8	5	imagelength
LEAF_NODE	1257:19	1257:19	3	,
PARAMETER_DECL	1257:21	1257:28	3	uint32 imagewidth
TYPE	1257:21	1257:21	4	uint32
TYPE_NAME	1257:21	1257:21	5	uint32
LEAF_NODE	1257:21	1257:21	6	uint32
NAME	1257:28	1257:28	4	imagewidth
LEAF_NODE	1257:28	1257:28	5	imagewidth
LEAF_NODE	1257:38	1257:38	3	,
PARAMETER_DECL	1257:40	1257:50	3	tsample_t spp
TYPE	1257:40	1257:40	4	tsample_t
TYPE_NAME	1257:40	1257:40	5	tsample_t
LEAF_NODE	1257:40	1257:40	6	tsample_t
NAME	1257:50	1257:50	4	spp
LEAF_NODE	1257:50	1257:50	5	spp
LEAF_NODE	1257:53	1257:53	3	)
LEAF_NODE	1258:0	1258:0	2	{
STATEMENTS	1259:1	1285:1	2	
SIMPLE_DECL	1259:1	1259:15	3	int status ; status = 0 ;
VAR_DECL	1259:1	1259:5	4	int status ; status = 0
TYPE	1259:1	1259:1	5	int
TYPE_NAME	1259:1	1259:1	6	int
LEAF_NODE	1259:1	1259:1	7	int
NAME	1259:5	1259:5	5	status
LEAF_NODE	1259:5	1259:5	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	1259:5	1259:5	5	status = 0
ASSIGN	1259:5	1259:14	6	status = 0
LVAL	1259:5	1259:5	7	status
NAME	1259:5	1259:5	8	status
LEAF_NODE	1259:5	1259:5	9	status
ASSIGN_OP	1259:12	1259:12	7	=
LEAF_NODE	1259:12	1259:12	8	=
RVAL	1259:14	1259:14	7	0
FIELD	1259:14	1259:14	8	0
LEAF_NODE	1259:14	1259:14	9	0
LEAF_NODE	1259:15	1259:15	4	;
SIMPLE_DECL	1260:1	1260:19	3	tdata_t buf ; buf = NULL ;
VAR_DECL	1260:1	1260:9	4	tdata_t buf ; buf = NULL
TYPE	1260:1	1260:1	5	tdata_t
TYPE_NAME	1260:1	1260:1	6	tdata_t
LEAF_NODE	1260:1	1260:1	7	tdata_t
NAME	1260:9	1260:9	5	buf
LEAF_NODE	1260:9	1260:9	6	buf
LEAF_NODE	0:0	0:0	5	;
INIT	1260:9	1260:9	5	buf = NULL
ASSIGN	1260:9	1260:15	6	buf = NULL
LVAL	1260:9	1260:9	7	buf
NAME	1260:9	1260:9	8	buf
LEAF_NODE	1260:9	1260:9	9	buf
ASSIGN_OP	1260:13	1260:13	7	=
LEAF_NODE	1260:13	1260:13	8	=
RVAL	1260:15	1260:15	7	NULL
FIELD	1260:15	1260:15	8	NULL
LEAF_NODE	1260:15	1260:15	9	NULL
LEAF_NODE	1260:19	1260:19	4	;
SIMPLE_DECL	1261:1	1261:50	3	tsize_t scanlinesize ; scanlinesize = TIFFRasterScanlineSize ( in ) ;
VAR_DECL	1261:1	1261:9	4	tsize_t scanlinesize ; scanlinesize = TIFFRasterScanlineSize ( in )
TYPE	1261:1	1261:1	5	tsize_t
TYPE_NAME	1261:1	1261:1	6	tsize_t
LEAF_NODE	1261:1	1261:1	7	tsize_t
NAME	1261:9	1261:9	5	scanlinesize
LEAF_NODE	1261:9	1261:9	6	scanlinesize
LEAF_NODE	0:0	0:0	5	;
INIT	1261:9	1261:9	5	scanlinesize = TIFFRasterScanlineSize ( in )
ASSIGN	1261:9	1261:24	6	scanlinesize = TIFFRasterScanlineSize ( in )
LVAL	1261:9	1261:9	7	scanlinesize
NAME	1261:9	1261:9	8	scanlinesize
LEAF_NODE	1261:9	1261:9	9	scanlinesize
ASSIGN_OP	1261:22	1261:22	7	=
LEAF_NODE	1261:22	1261:22	8	=
RVAL	1261:24	1261:24	7	TIFFRasterScanlineSize ( in )
FUNCTION_CALL	1261:24	1261:49	8	TIFFRasterScanlineSize ( in )
CALLEE	1261:24	1261:24	9	TIFFRasterScanlineSize
LEAF_NODE	1261:24	1261:24	10	TIFFRasterScanlineSize
LEAF_NODE	1261:46	1261:46	9	(
ARGUMENT	1261:47	1261:47	9	in
FIELD	1261:47	1261:47	10	in
LEAF_NODE	1261:47	1261:47	11	in
LEAF_NODE	1261:49	1261:49	9	)
LEAF_NODE	1261:50	1261:50	4	;
SIMPLE_DECL	1262:1	1262:52	3	tsize_t bytes ; bytes = scanlinesize * ( tsize_t ) imagelength ;
VAR_DECL	1262:1	1262:9	4	tsize_t bytes ; bytes = scanlinesize * ( tsize_t ) imagelength
TYPE	1262:1	1262:1	5	tsize_t
TYPE_NAME	1262:1	1262:1	6	tsize_t
LEAF_NODE	1262:1	1262:1	7	tsize_t
NAME	1262:9	1262:9	5	bytes
LEAF_NODE	1262:9	1262:9	6	bytes
LEAF_NODE	0:0	0:0	5	;
INIT	1262:9	1262:9	5	bytes = scanlinesize * ( tsize_t ) imagelength
ASSIGN	1262:9	1262:17	6	bytes = scanlinesize * ( tsize_t ) imagelength
LVAL	1262:9	1262:9	7	bytes
NAME	1262:9	1262:9	8	bytes
LEAF_NODE	1262:9	1262:9	9	bytes
ASSIGN_OP	1262:15	1262:15	7	=
LEAF_NODE	1262:15	1262:15	8	=
RVAL	1262:17	1262:41	7	scanlinesize * ( tsize_t ) imagelength
FIELD	1262:17	1262:17	8	scanlinesize
LEAF_NODE	1262:17	1262:17	9	scanlinesize
LEAF_NODE	1262:30	1262:30	8	*
LEAF_NODE	1262:32	1262:32	8	(
TYPE_NAME	1262:33	1262:33	8	tsize_t
LEAF_NODE	1262:33	1262:33	9	tsize_t
LEAF_NODE	1262:40	1262:40	8	)
FIELD	1262:41	1262:41	8	imagelength
LEAF_NODE	1262:41	1262:41	9	imagelength
LEAF_NODE	1262:52	1262:52	4	;
SELECTION	1266:1	1268:54	3	
KEYWORD	1266:1	1266:1	4	if
LEAF_NODE	1266:1	1266:1	5	if
LEAF_NODE	1266:4	1266:4	4	(
CONDITION	1266:5	1266:5	4	scanlinesize && imagelength && bytes / ( tsize_t ) imagelength == scanlinesize
EXPR	1266:5	1266:5	5	scanlinesize && imagelength && bytes / ( tsize_t ) imagelength == scanlinesize
AND	1266:5	1267:8	6	scanlinesize && imagelength && bytes / ( tsize_t ) imagelength == scanlinesize
EXPR	1266:5	1266:5	7	scanlinesize
FIELD	1266:5	1266:5	8	scanlinesize
LEAF_NODE	1266:5	1266:5	9	scanlinesize
LEAF_NODE	1267:5	1267:5	7	&&
EXPR	1267:8	1267:8	7	imagelength && bytes / ( tsize_t ) imagelength == scanlinesize
AND	1267:8	1268:8	8	imagelength && bytes / ( tsize_t ) imagelength == scanlinesize
EXPR	1267:8	1267:8	9	imagelength
FIELD	1267:8	1267:8	10	imagelength
LEAF_NODE	1267:8	1267:8	11	imagelength
LEAF_NODE	1268:5	1268:5	9	&&
EXPR	1268:8	1268:40	9	bytes / ( tsize_t ) imagelength == scanlinesize
FIELD	1268:8	1268:8	10	bytes
LEAF_NODE	1268:8	1268:8	11	bytes
LEAF_NODE	1268:14	1268:14	10	/
LEAF_NODE	1268:16	1268:16	10	(
TYPE_NAME	1268:17	1268:17	10	tsize_t
LEAF_NODE	1268:17	1268:17	11	tsize_t
LEAF_NODE	1268:24	1268:24	10	)
FIELD	1268:25	1268:25	10	imagelength
LEAF_NODE	1268:25	1268:25	11	imagelength
EQ_OPERATOR	1268:37	1268:37	10	==
LEAF_NODE	1268:37	1268:37	11	==
FIELD	1268:40	1268:40	10	scanlinesize
LEAF_NODE	1268:40	1268:40	11	scanlinesize
LEAF_NODE	1268:52	1268:52	4	)
STATEMENTS	1268:54	1281:1	4	
LEAF_NODE	1268:54	1268:54	5	{
STATEMENTS	1269:2	1277:4	5	
EXPR_STATEMENT	1269:2	1269:26	6	buf = _TIFFmalloc ( bytes ) ;
EXPR	1269:2	1269:2	7	buf = _TIFFmalloc ( bytes )
ASSIGN	1269:2	1269:8	8	buf = _TIFFmalloc ( bytes )
LVAL	1269:2	1269:2	9	buf
FIELD	1269:2	1269:2	10	buf
LEAF_NODE	1269:2	1269:2	11	buf
ASSIGN_OP	1269:6	1269:6	9	=
LEAF_NODE	1269:6	1269:6	10	=
RVAL	1269:8	1269:8	9	_TIFFmalloc ( bytes )
FUNCTION_CALL	1269:8	1269:25	10	_TIFFmalloc ( bytes )
CALLEE	1269:8	1269:8	11	_TIFFmalloc
LEAF_NODE	1269:8	1269:8	12	_TIFFmalloc
LEAF_NODE	1269:19	1269:19	11	(
ARGUMENT	1269:20	1269:20	11	bytes
FIELD	1269:20	1269:20	12	bytes
LEAF_NODE	1269:20	1269:20	13	bytes
LEAF_NODE	1269:25	1269:25	11	)
LEAF_NODE	1269:26	1269:26	7	;
SELECTION	1270:2	1270:11	6	
KEYWORD	1270:2	1270:2	7	if
LEAF_NODE	1270:2	1270:2	8	if
LEAF_NODE	1270:5	1270:5	7	(
CONDITION	1270:6	1270:6	7	buf
EXPR	1270:6	1270:6	8	buf
FIELD	1270:6	1270:6	9	buf
LEAF_NODE	1270:6	1270:6	10	buf
LEAF_NODE	1270:9	1270:9	7	)
STATEMENTS	1270:11	1277:2	7	
LEAF_NODE	1270:11	1270:11	8	{
STATEMENTS	1271:3	1276:3	8	
SELECTION	1271:3	1272:25	9	
KEYWORD	1271:3	1271:3	10	if
LEAF_NODE	1271:3	1271:3	11	if
LEAF_NODE	1271:6	1271:6	10	(
CONDITION	1271:7	1271:7	10	( * fin ) ( in , ( uint8 * ) buf , imagelength , imagewidth , spp )
EXPR	1271:7	1271:7	11	( * fin ) ( in , ( uint8 * ) buf , imagelength , imagewidth , spp )
FUNCTION_CALL	1271:7	1272:22	12	( * fin ) ( in , ( uint8 * ) buf , imagelength , imagewidth , spp )
CALLEE	1271:7	1271:12	13	( * fin )
LEAF_NODE	1271:7	1271:7	14	(
UNARY_EXPR	1271:8	1271:9	14	* fin
UNARY_OPERATOR	1271:8	1271:8	15	*
LEAF_NODE	1271:8	1271:8	16	*
FIELD	1271:9	1271:9	15	fin
LEAF_NODE	1271:9	1271:9	16	fin
LEAF_NODE	1271:12	1271:12	14	)
LEAF_NODE	1271:13	1271:13	13	(
ARGUMENT	1271:14	1271:14	13	in
FIELD	1271:14	1271:14	14	in
LEAF_NODE	1271:14	1271:14	15	in
LEAF_NODE	1271:16	1271:16	13	,
ARGUMENT	1271:18	1271:26	13	( uint8 * ) buf
LEAF_NODE	1271:18	1271:18	14	(
TYPE_NAME	1271:19	1271:19	14	uint8
LEAF_NODE	1271:19	1271:19	15	uint8
LEAF_NODE	1271:24	1271:24	14	*
LEAF_NODE	1271:25	1271:25	14	)
FIELD	1271:26	1271:26	14	buf
LEAF_NODE	1271:26	1271:26	15	buf
LEAF_NODE	1271:29	1271:29	13	,
ARGUMENT	1271:31	1271:31	13	imagelength
FIELD	1271:31	1271:31	14	imagelength
LEAF_NODE	1271:31	1271:31	15	imagelength
LEAF_NODE	1271:42	1271:42	13	,
ARGUMENT	1272:7	1272:7	13	imagewidth
FIELD	1272:7	1272:7	14	imagewidth
LEAF_NODE	1272:7	1272:7	15	imagewidth
LEAF_NODE	1272:17	1272:17	13	,
ARGUMENT	1272:19	1272:19	13	spp
FIELD	1272:19	1272:19	14	spp
LEAF_NODE	1272:19	1272:19	15	spp
LEAF_NODE	1272:22	1272:22	13	)
LEAF_NODE	1272:23	1272:23	10	)
STATEMENTS	1272:25	1275:3	10	
LEAF_NODE	1272:25	1272:25	11	{
STATEMENTS	1273:4	1273:4	11	
EXPR_STATEMENT	1273:4	1274:37	12	status = ( * fout ) ( out , ( uint8 * ) buf , imagelength , imagewidth , spp ) ;
EXPR	1273:4	1273:4	13	status = ( * fout ) ( out , ( uint8 * ) buf , imagelength , imagewidth , spp )
ASSIGN	1273:4	1273:13	14	status = ( * fout ) ( out , ( uint8 * ) buf , imagelength , imagewidth , spp )
LVAL	1273:4	1273:4	15	status
FIELD	1273:4	1273:4	16	status
LEAF_NODE	1273:4	1273:4	17	status
ASSIGN_OP	1273:11	1273:11	15	=
LEAF_NODE	1273:11	1273:11	16	=
RVAL	1273:13	1273:13	15	( * fout ) ( out , ( uint8 * ) buf , imagelength , imagewidth , spp )
FUNCTION_CALL	1273:13	1274:36	16	( * fout ) ( out , ( uint8 * ) buf , imagelength , imagewidth , spp )
CALLEE	1273:13	1273:19	17	( * fout )
LEAF_NODE	1273:13	1273:13	18	(
UNARY_EXPR	1273:14	1273:15	18	* fout
UNARY_OPERATOR	1273:14	1273:14	19	*
LEAF_NODE	1273:14	1273:14	20	*
FIELD	1273:15	1273:15	19	fout
LEAF_NODE	1273:15	1273:15	20	fout
LEAF_NODE	1273:19	1273:19	18	)
LEAF_NODE	1273:20	1273:20	17	(
ARGUMENT	1273:21	1273:21	17	out
FIELD	1273:21	1273:21	18	out
LEAF_NODE	1273:21	1273:21	19	out
LEAF_NODE	1273:24	1273:24	17	,
ARGUMENT	1273:26	1273:34	17	( uint8 * ) buf
LEAF_NODE	1273:26	1273:26	18	(
TYPE_NAME	1273:27	1273:27	18	uint8
LEAF_NODE	1273:27	1273:27	19	uint8
LEAF_NODE	1273:32	1273:32	18	*
LEAF_NODE	1273:33	1273:33	18	)
FIELD	1273:34	1273:34	18	buf
LEAF_NODE	1273:34	1273:34	19	buf
LEAF_NODE	1273:37	1273:37	17	,
ARGUMENT	1274:8	1274:8	17	imagelength
FIELD	1274:8	1274:8	18	imagelength
LEAF_NODE	1274:8	1274:8	19	imagelength
LEAF_NODE	1274:19	1274:19	17	,
ARGUMENT	1274:21	1274:21	17	imagewidth
FIELD	1274:21	1274:21	18	imagewidth
LEAF_NODE	1274:21	1274:21	19	imagewidth
LEAF_NODE	1274:31	1274:31	17	,
ARGUMENT	1274:33	1274:33	17	spp
FIELD	1274:33	1274:33	18	spp
LEAF_NODE	1274:33	1274:33	19	spp
LEAF_NODE	1274:36	1274:36	17	)
LEAF_NODE	1274:37	1274:37	13	;
LEAF_NODE	1275:3	1275:3	11	}
EXPR_STATEMENT	1276:3	1276:17	9	_TIFFfree ( buf ) ;
EXPR	1276:3	1276:3	10	_TIFFfree ( buf )
FUNCTION_CALL	1276:3	1276:16	11	_TIFFfree ( buf )
CALLEE	1276:3	1276:3	12	_TIFFfree
LEAF_NODE	1276:3	1276:3	13	_TIFFfree
LEAF_NODE	1276:12	1276:12	12	(
ARGUMENT	1276:13	1276:13	12	buf
FIELD	1276:13	1276:13	13	buf
LEAF_NODE	1276:13	1276:13	14	buf
LEAF_NODE	1276:16	1276:16	12	)
LEAF_NODE	1276:17	1276:17	10	;
LEAF_NODE	1277:2	1277:2	8	}
SELECTION	1277:4	1277:9	6	
KEYWORD	1277:4	1277:4	7	else
LEAF_NODE	1277:4	1277:4	8	else
STATEMENTS	1277:9	1280:2	7	
LEAF_NODE	1277:9	1277:9	8	{
STATEMENTS	1278:3	1278:3	8	
EXPR_STATEMENT	1278:3	1279:54	9	TIFFError ( TIFFFileName ( in ) , "Error, can't allocate space for image buffer" ) ;
EXPR	1278:3	1278:3	10	TIFFError ( TIFFFileName ( in ) , "Error, can't allocate space for image buffer" )
FUNCTION_CALL	1278:3	1279:53	11	TIFFError ( TIFFFileName ( in ) , "Error, can't allocate space for image buffer" )
CALLEE	1278:3	1278:3	12	TIFFError
LEAF_NODE	1278:3	1278:3	13	TIFFError
LEAF_NODE	1278:12	1278:12	12	(
ARGUMENT	1278:13	1278:13	12	TIFFFileName ( in )
FUNCTION_CALL	1278:13	1278:28	13	TIFFFileName ( in )
CALLEE	1278:13	1278:13	14	TIFFFileName
LEAF_NODE	1278:13	1278:13	15	TIFFFileName
LEAF_NODE	1278:25	1278:25	14	(
ARGUMENT	1278:26	1278:26	14	in
FIELD	1278:26	1278:26	15	in
LEAF_NODE	1278:26	1278:26	16	in
LEAF_NODE	1278:28	1278:28	14	)
LEAF_NODE	1278:29	1278:29	12	,
ARGUMENT	1279:7	1279:7	12	"Error, can't allocate space for image buffer"
FIELD	1279:7	1279:7	13	"Error, can't allocate space for image buffer"
LEAF_NODE	1279:7	1279:7	14	"Error, can't allocate space for image buffer"
LEAF_NODE	1279:53	1279:53	12	)
LEAF_NODE	1279:54	1279:54	10	;
LEAF_NODE	1280:2	1280:2	8	}
LEAF_NODE	1281:1	1281:1	5	}
SELECTION	1281:3	1281:8	3	
KEYWORD	1281:3	1281:3	4	else
LEAF_NODE	1281:3	1281:3	5	else
STATEMENTS	1281:8	1283:1	4	
LEAF_NODE	1281:8	1281:8	5	{
STATEMENTS	1282:2	1282:2	5	
EXPR_STATEMENT	1282:2	1282:65	6	TIFFError ( TIFFFileName ( in ) , "Error, no space for image buffer" ) ;
EXPR	1282:2	1282:2	7	TIFFError ( TIFFFileName ( in ) , "Error, no space for image buffer" )
FUNCTION_CALL	1282:2	1282:64	8	TIFFError ( TIFFFileName ( in ) , "Error, no space for image buffer" )
CALLEE	1282:2	1282:2	9	TIFFError
LEAF_NODE	1282:2	1282:2	10	TIFFError
LEAF_NODE	1282:11	1282:11	9	(
ARGUMENT	1282:12	1282:12	9	TIFFFileName ( in )
FUNCTION_CALL	1282:12	1282:27	10	TIFFFileName ( in )
CALLEE	1282:12	1282:12	11	TIFFFileName
LEAF_NODE	1282:12	1282:12	12	TIFFFileName
LEAF_NODE	1282:24	1282:24	11	(
ARGUMENT	1282:25	1282:25	11	in
FIELD	1282:25	1282:25	12	in
LEAF_NODE	1282:25	1282:25	13	in
LEAF_NODE	1282:27	1282:27	11	)
LEAF_NODE	1282:28	1282:28	9	,
ARGUMENT	1282:30	1282:30	9	"Error, no space for image buffer"
FIELD	1282:30	1282:30	10	"Error, no space for image buffer"
LEAF_NODE	1282:30	1282:30	11	"Error, no space for image buffer"
LEAF_NODE	1282:64	1282:64	9	)
LEAF_NODE	1282:65	1282:65	7	;
LEAF_NODE	1283:1	1283:1	5	}
JUMP_STATEMENT	1285:1	1285:14	3	return status ;
KEYWORD	1285:1	1285:1	4	return
LEAF_NODE	1285:1	1285:1	5	return
DESTINATION	1285:8	1285:8	4	status
EXPR	1285:8	1285:8	5	status
FIELD	1285:8	1285:8	6	status
LEAF_NODE	1285:8	1285:8	7	status
LEAF_NODE	1285:14	1285:14	4	;
LEAF_NODE	1286:0	1286:0	2	}
FUNCTION_DEF	0:0	1307:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1288:0	1288:0	2	DECLAREreadFunc
LEAF_NODE	1288:0	1288:0	3	DECLAREreadFunc
PARAMETER_LIST	1288:15	1288:42	2	( readContigStripsIntoBuffer )
LEAF_NODE	1288:15	1288:15	3	(
PARAMETER_DECL	1288:16	1288:16	3	readContigStripsIntoBuffer
LEAF_NODE	1288:16	1288:16	4	readContigStripsIntoBuffer
LEAF_NODE	1288:42	1288:42	3	)
LEAF_NODE	1289:0	1289:0	2	{
STATEMENTS	1290:1	1306:1	2	
SIMPLE_DECL	1290:1	1290:44	3	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in ) ;
VAR_DECL	1290:1	1290:9	4	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in )
TYPE	1290:1	1290:1	5	tsize_t
TYPE_NAME	1290:1	1290:1	6	tsize_t
LEAF_NODE	1290:1	1290:1	7	tsize_t
NAME	1290:9	1290:9	5	scanlinesize
LEAF_NODE	1290:9	1290:9	6	scanlinesize
LEAF_NODE	0:0	0:0	5	;
INIT	1290:9	1290:9	5	scanlinesize = TIFFScanlineSize ( in )
ASSIGN	1290:9	1290:24	6	scanlinesize = TIFFScanlineSize ( in )
LVAL	1290:9	1290:9	7	scanlinesize
NAME	1290:9	1290:9	8	scanlinesize
LEAF_NODE	1290:9	1290:9	9	scanlinesize
ASSIGN_OP	1290:22	1290:22	7	=
LEAF_NODE	1290:22	1290:22	8	=
RVAL	1290:24	1290:24	7	TIFFScanlineSize ( in )
FUNCTION_CALL	1290:24	1290:43	8	TIFFScanlineSize ( in )
CALLEE	1290:24	1290:24	9	TIFFScanlineSize
LEAF_NODE	1290:24	1290:24	10	TIFFScanlineSize
LEAF_NODE	1290:40	1290:40	9	(
ARGUMENT	1290:41	1290:41	9	in
FIELD	1290:41	1290:41	10	in
LEAF_NODE	1290:41	1290:41	11	in
LEAF_NODE	1290:43	1290:43	9	)
LEAF_NODE	1290:44	1290:44	4	;
SIMPLE_DECL	1291:1	1291:18	3	uint8 * bufp ; bufp = buf ;
VAR_DECL	1291:1	1291:8	4	uint8 * bufp ; bufp = buf
TYPE	1291:1	1291:6	5	uint8 *
TYPE_NAME	1291:1	1291:1	6	uint8
LEAF_NODE	1291:1	1291:1	7	uint8
POINTER	1291:6	1291:6	6	*
LEAF_NODE	1291:6	1291:6	7	*
NAME	1291:8	1291:8	5	bufp
LEAF_NODE	1291:8	1291:8	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	1291:8	1291:8	5	bufp = buf
ASSIGN	1291:8	1291:15	6	bufp = buf
LVAL	1291:8	1291:8	7	bufp
NAME	1291:8	1291:8	8	bufp
LEAF_NODE	1291:8	1291:8	9	bufp
ASSIGN_OP	1291:13	1291:13	7	=
LEAF_NODE	1291:13	1291:13	8	=
RVAL	1291:15	1291:15	7	buf
FIELD	1291:15	1291:15	8	buf
LEAF_NODE	1291:15	1291:15	9	buf
LEAF_NODE	1291:18	1291:18	4	;
SIMPLE_DECL	1292:1	1292:11	3	uint32 row ;
VAR_DECL	1292:1	1292:8	4	uint32 row
TYPE	1292:1	1292:1	5	uint32
TYPE_NAME	1292:1	1292:1	6	uint32
LEAF_NODE	1292:1	1292:1	7	uint32
NAME	1292:8	1292:8	5	row
LEAF_NODE	1292:8	1292:8	6	row
LEAF_NODE	1292:11	1292:11	4	;
EXPR_STATEMENT	1294:1	1294:18	3	( void ) imagewidth ;
EXPR	1294:1	1294:8	4	( void ) imagewidth
LEAF_NODE	1294:1	1294:1	5	(
TYPE_NAME	1294:2	1294:2	5	void
LEAF_NODE	1294:2	1294:2	6	void
LEAF_NODE	1294:6	1294:6	5	)
FIELD	1294:8	1294:8	5	imagewidth
LEAF_NODE	1294:8	1294:8	6	imagewidth
LEAF_NODE	1294:18	1294:18	4	;
EXPR_STATEMENT	1294:20	1294:30	3	( void ) spp ;
EXPR	1294:20	1294:27	4	( void ) spp
LEAF_NODE	1294:20	1294:20	5	(
TYPE_NAME	1294:21	1294:21	5	void
LEAF_NODE	1294:21	1294:21	6	void
LEAF_NODE	1294:25	1294:25	5	)
FIELD	1294:27	1294:27	5	spp
LEAF_NODE	1294:27	1294:27	6	spp
LEAF_NODE	1294:30	1294:30	4	;
ITERATION	1295:1	1295:41	3	
KEYWORD	1295:1	1295:1	4	for
LEAF_NODE	1295:1	1295:1	5	for
LEAF_NODE	1295:5	1295:5	4	(
FOR_INIT	1295:6	1295:13	4	row = 0 ;
EXPR	1295:6	1295:6	5	row = 0
ASSIGN	1295:6	1295:12	6	row = 0
LVAL	1295:6	1295:6	7	row
FIELD	1295:6	1295:6	8	row
LEAF_NODE	1295:6	1295:6	9	row
ASSIGN_OP	1295:10	1295:10	7	=
LEAF_NODE	1295:10	1295:10	8	=
RVAL	1295:12	1295:12	7	0
FIELD	1295:12	1295:12	8	0
LEAF_NODE	1295:12	1295:12	9	0
LEAF_NODE	1295:13	1295:13	5	;
CONDITION	1295:15	1295:15	4	row < imagelength
EXPR	1295:15	1295:21	5	row < imagelength
FIELD	1295:15	1295:15	6	row
LEAF_NODE	1295:15	1295:15	7	row
REL_OPERATOR	1295:19	1295:19	6	<
LEAF_NODE	1295:19	1295:19	7	<
FIELD	1295:21	1295:21	6	imagelength
LEAF_NODE	1295:21	1295:21	7	imagelength
LEAF_NODE	1295:32	1295:32	4	;
FOR_EXPR	1295:34	1295:34	4	row ++
EXPR	1295:34	1295:34	5	row ++
FIELD	1295:34	1295:37	6	row ++
LEAF_NODE	1295:34	1295:34	7	row
LEAF_NODE	1295:37	1295:37	7	++
LEAF_NODE	1295:39	1295:39	4	)
STATEMENTS	1295:41	1304:1	4	
LEAF_NODE	1295:41	1295:41	5	{
STATEMENTS	1296:2	1303:2	5	
SELECTION	1296:2	1297:18	6	
KEYWORD	1296:2	1296:2	7	if
LEAF_NODE	1296:2	1296:2	8	if
LEAF_NODE	1296:5	1296:5	7	(
CONDITION	1296:6	1296:6	7	TIFFReadScanline ( in , ( tdata_t ) bufp , row , 0 ) < 0 && ! ignore
EXPR	1296:6	1296:6	8	TIFFReadScanline ( in , ( tdata_t ) bufp , row , 0 ) < 0 && ! ignore
AND	1296:6	1297:9	9	TIFFReadScanline ( in , ( tdata_t ) bufp , row , 0 ) < 0 && ! ignore
EXPR	1296:6	1296:53	10	TIFFReadScanline ( in , ( tdata_t ) bufp , row , 0 ) < 0
FUNCTION_CALL	1296:6	1296:49	11	TIFFReadScanline ( in , ( tdata_t ) bufp , row , 0 )
CALLEE	1296:6	1296:6	12	TIFFReadScanline
LEAF_NODE	1296:6	1296:6	13	TIFFReadScanline
LEAF_NODE	1296:22	1296:22	12	(
ARGUMENT	1296:23	1296:23	12	in
FIELD	1296:23	1296:23	13	in
LEAF_NODE	1296:23	1296:23	14	in
LEAF_NODE	1296:25	1296:25	12	,
ARGUMENT	1296:27	1296:37	12	( tdata_t ) bufp
LEAF_NODE	1296:27	1296:27	13	(
TYPE_NAME	1296:28	1296:28	13	tdata_t
LEAF_NODE	1296:28	1296:28	14	tdata_t
LEAF_NODE	1296:35	1296:35	13	)
FIELD	1296:37	1296:37	13	bufp
LEAF_NODE	1296:37	1296:37	14	bufp
LEAF_NODE	1296:41	1296:41	12	,
ARGUMENT	1296:43	1296:43	12	row
FIELD	1296:43	1296:43	13	row
LEAF_NODE	1296:43	1296:43	14	row
LEAF_NODE	1296:46	1296:46	12	,
ARGUMENT	1296:48	1296:48	12	0
FIELD	1296:48	1296:48	13	0
LEAF_NODE	1296:48	1296:48	14	0
LEAF_NODE	1296:49	1296:49	12	)
REL_OPERATOR	1296:51	1296:51	11	<
LEAF_NODE	1296:51	1296:51	12	<
FIELD	1296:53	1296:53	11	0
LEAF_NODE	1296:53	1296:53	12	0
LEAF_NODE	1297:6	1297:6	10	&&
EXPR	1297:9	1297:9	10	! ignore
UNARY_EXPR	1297:9	1297:10	11	! ignore
UNARY_OPERATOR	1297:9	1297:9	12	!
LEAF_NODE	1297:9	1297:9	13	!
FIELD	1297:10	1297:10	12	ignore
LEAF_NODE	1297:10	1297:10	13	ignore
LEAF_NODE	1297:16	1297:16	7	)
STATEMENTS	1297:18	1302:2	7	
LEAF_NODE	1297:18	1297:18	8	{
STATEMENTS	1298:3	1301:3	8	
EXPR_STATEMENT	1298:3	1300:27	9	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row ) ;
EXPR	1298:3	1298:3	10	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1298:3	1300:26	11	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
CALLEE	1298:3	1298:3	12	TIFFError
LEAF_NODE	1298:3	1298:3	13	TIFFError
LEAF_NODE	1298:12	1298:12	12	(
ARGUMENT	1298:13	1298:13	12	TIFFFileName ( in )
FUNCTION_CALL	1298:13	1298:28	13	TIFFFileName ( in )
CALLEE	1298:13	1298:13	14	TIFFFileName
LEAF_NODE	1298:13	1298:13	15	TIFFFileName
LEAF_NODE	1298:25	1298:25	14	(
ARGUMENT	1298:26	1298:26	14	in
FIELD	1298:26	1298:26	15	in
LEAF_NODE	1298:26	1298:26	16	in
LEAF_NODE	1298:28	1298:28	14	)
LEAF_NODE	1298:29	1298:29	12	,
ARGUMENT	1299:7	1299:7	12	"Error, can't read scanline %lu"
FIELD	1299:7	1299:7	13	"Error, can't read scanline %lu"
LEAF_NODE	1299:7	1299:7	14	"Error, can't read scanline %lu"
LEAF_NODE	1299:39	1299:39	12	,
ARGUMENT	1300:7	1300:23	12	( unsigned long ) row
LEAF_NODE	1300:7	1300:7	13	(
TYPE_NAME	1300:8	1300:17	13	unsigned long
LEAF_NODE	1300:8	1300:8	14	unsigned
LEAF_NODE	1300:17	1300:17	14	long
LEAF_NODE	1300:21	1300:21	13	)
FIELD	1300:23	1300:23	13	row
LEAF_NODE	1300:23	1300:23	14	row
LEAF_NODE	1300:26	1300:26	12	)
LEAF_NODE	1300:27	1300:27	10	;
JUMP_STATEMENT	1301:3	1301:11	9	return 0 ;
KEYWORD	1301:3	1301:3	10	return
LEAF_NODE	1301:3	1301:3	11	return
DESTINATION	1301:10	1301:10	10	0
EXPR	1301:10	1301:10	11	0
FIELD	1301:10	1301:10	12	0
LEAF_NODE	1301:10	1301:10	13	0
LEAF_NODE	1301:11	1301:11	10	;
LEAF_NODE	1302:2	1302:2	8	}
EXPR_STATEMENT	1303:2	1303:22	6	bufp += scanlinesize ;
EXPR	1303:2	1303:2	7	bufp += scanlinesize
ASSIGN	1303:2	1303:10	8	bufp += scanlinesize
LVAL	1303:2	1303:2	9	bufp
FIELD	1303:2	1303:2	10	bufp
LEAF_NODE	1303:2	1303:2	11	bufp
ASSIGN_OP	1303:7	1303:7	9	+=
LEAF_NODE	1303:7	1303:7	10	+=
RVAL	1303:10	1303:10	9	scanlinesize
FIELD	1303:10	1303:10	10	scanlinesize
LEAF_NODE	1303:10	1303:10	11	scanlinesize
LEAF_NODE	1303:22	1303:22	7	;
LEAF_NODE	1304:1	1304:1	5	}
JUMP_STATEMENT	1306:1	1306:9	3	return 1 ;
KEYWORD	1306:1	1306:1	4	return
LEAF_NODE	1306:1	1306:1	5	return
DESTINATION	1306:8	1306:8	4	1
EXPR	1306:8	1306:8	5	1
FIELD	1306:8	1306:8	6	1
LEAF_NODE	1306:8	1306:8	7	1
LEAF_NODE	1306:9	1306:9	4	;
LEAF_NODE	1307:0	1307:0	2	}
FUNCTION_DEF	0:0	1351:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1309:0	1309:0	2	DECLAREreadFunc
LEAF_NODE	1309:0	1309:0	3	DECLAREreadFunc
PARAMETER_LIST	1309:15	1309:44	2	( readSeparateStripsIntoBuffer )
LEAF_NODE	1309:15	1309:15	3	(
PARAMETER_DECL	1309:16	1309:16	3	readSeparateStripsIntoBuffer
LEAF_NODE	1309:16	1309:16	4	readSeparateStripsIntoBuffer
LEAF_NODE	1309:44	1309:44	3	)
LEAF_NODE	1310:0	1310:0	2	{
STATEMENTS	1311:1	1350:1	2	
SIMPLE_DECL	1311:1	1311:15	3	int status ; status = 1 ;
VAR_DECL	1311:1	1311:5	4	int status ; status = 1
TYPE	1311:1	1311:1	5	int
TYPE_NAME	1311:1	1311:1	6	int
LEAF_NODE	1311:1	1311:1	7	int
NAME	1311:5	1311:5	5	status
LEAF_NODE	1311:5	1311:5	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	1311:5	1311:5	5	status = 1
ASSIGN	1311:5	1311:14	6	status = 1
LVAL	1311:5	1311:5	7	status
NAME	1311:5	1311:5	8	status
LEAF_NODE	1311:5	1311:5	9	status
ASSIGN_OP	1311:12	1311:12	7	=
LEAF_NODE	1311:12	1311:12	8	=
RVAL	1311:14	1311:14	7	1
FIELD	1311:14	1311:14	8	1
LEAF_NODE	1311:14	1311:14	9	1
LEAF_NODE	1311:15	1311:15	4	;
SIMPLE_DECL	1312:1	1312:44	3	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in ) ;
VAR_DECL	1312:1	1312:9	4	tsize_t scanlinesize ; scanlinesize = TIFFScanlineSize ( in )
TYPE	1312:1	1312:1	5	tsize_t
TYPE_NAME	1312:1	1312:1	6	tsize_t
LEAF_NODE	1312:1	1312:1	7	tsize_t
NAME	1312:9	1312:9	5	scanlinesize
LEAF_NODE	1312:9	1312:9	6	scanlinesize
LEAF_NODE	0:0	0:0	5	;
INIT	1312:9	1312:9	5	scanlinesize = TIFFScanlineSize ( in )
ASSIGN	1312:9	1312:24	6	scanlinesize = TIFFScanlineSize ( in )
LVAL	1312:9	1312:9	7	scanlinesize
NAME	1312:9	1312:9	8	scanlinesize
LEAF_NODE	1312:9	1312:9	9	scanlinesize
ASSIGN_OP	1312:22	1312:22	7	=
LEAF_NODE	1312:22	1312:22	8	=
RVAL	1312:24	1312:24	7	TIFFScanlineSize ( in )
FUNCTION_CALL	1312:24	1312:43	8	TIFFScanlineSize ( in )
CALLEE	1312:24	1312:24	9	TIFFScanlineSize
LEAF_NODE	1312:24	1312:24	10	TIFFScanlineSize
LEAF_NODE	1312:40	1312:40	9	(
ARGUMENT	1312:41	1312:41	9	in
FIELD	1312:41	1312:41	10	in
LEAF_NODE	1312:41	1312:41	11	in
LEAF_NODE	1312:43	1312:43	9	)
LEAF_NODE	1312:44	1312:44	4	;
SIMPLE_DECL	1313:1	1313:17	3	tdata_t scanline ;
VAR_DECL	1313:1	1313:9	4	tdata_t scanline
TYPE	1313:1	1313:1	5	tdata_t
TYPE_NAME	1313:1	1313:1	6	tdata_t
LEAF_NODE	1313:1	1313:1	7	tdata_t
NAME	1313:9	1313:9	5	scanline
LEAF_NODE	1313:9	1313:9	6	scanline
LEAF_NODE	1313:17	1313:17	4	;
SELECTION	1314:1	1315:2	3	
KEYWORD	1314:1	1314:1	4	if
LEAF_NODE	1314:1	1314:1	5	if
LEAF_NODE	1314:4	1314:4	4	(
CONDITION	1314:5	1314:5	4	! scanlinesize
EXPR	1314:5	1314:5	5	! scanlinesize
UNARY_EXPR	1314:5	1314:6	6	! scanlinesize
UNARY_OPERATOR	1314:5	1314:5	7	!
LEAF_NODE	1314:5	1314:5	8	!
FIELD	1314:6	1314:6	7	scanlinesize
LEAF_NODE	1314:6	1314:6	8	scanlinesize
LEAF_NODE	1314:18	1314:18	4	)
STATEMENTS	1315:2	1315:2	4	
JUMP_STATEMENT	1315:2	1315:10	5	return 0 ;
KEYWORD	1315:2	1315:2	6	return
LEAF_NODE	1315:2	1315:2	7	return
DESTINATION	1315:9	1315:9	6	0
EXPR	1315:9	1315:9	7	0
FIELD	1315:9	1315:9	8	0
LEAF_NODE	1315:9	1315:9	9	0
LEAF_NODE	1315:10	1315:10	6	;
EXPR_STATEMENT	1317:1	1317:37	3	scanline = _TIFFmalloc ( scanlinesize ) ;
EXPR	1317:1	1317:1	4	scanline = _TIFFmalloc ( scanlinesize )
ASSIGN	1317:1	1317:12	5	scanline = _TIFFmalloc ( scanlinesize )
LVAL	1317:1	1317:1	6	scanline
FIELD	1317:1	1317:1	7	scanline
LEAF_NODE	1317:1	1317:1	8	scanline
ASSIGN_OP	1317:10	1317:10	6	=
LEAF_NODE	1317:10	1317:10	7	=
RVAL	1317:12	1317:12	6	_TIFFmalloc ( scanlinesize )
FUNCTION_CALL	1317:12	1317:36	7	_TIFFmalloc ( scanlinesize )
CALLEE	1317:12	1317:12	8	_TIFFmalloc
LEAF_NODE	1317:12	1317:12	9	_TIFFmalloc
LEAF_NODE	1317:23	1317:23	8	(
ARGUMENT	1317:24	1317:24	8	scanlinesize
FIELD	1317:24	1317:24	9	scanlinesize
LEAF_NODE	1317:24	1317:24	10	scanlinesize
LEAF_NODE	1317:36	1317:36	8	)
LEAF_NODE	1317:37	1317:37	4	;
SELECTION	1318:1	1319:2	3	
KEYWORD	1318:1	1318:1	4	if
LEAF_NODE	1318:1	1318:1	5	if
LEAF_NODE	1318:4	1318:4	4	(
CONDITION	1318:5	1318:5	4	! scanline
EXPR	1318:5	1318:5	5	! scanline
UNARY_EXPR	1318:5	1318:6	6	! scanline
UNARY_OPERATOR	1318:5	1318:5	7	!
LEAF_NODE	1318:5	1318:5	8	!
FIELD	1318:6	1318:6	7	scanline
LEAF_NODE	1318:6	1318:6	8	scanline
LEAF_NODE	1318:14	1318:14	4	)
STATEMENTS	1319:2	1319:2	4	
JUMP_STATEMENT	1319:2	1319:10	5	return 0 ;
KEYWORD	1319:2	1319:2	6	return
LEAF_NODE	1319:2	1319:2	7	return
DESTINATION	1319:9	1319:9	6	0
EXPR	1319:9	1319:9	7	0
FIELD	1319:9	1319:9	8	0
LEAF_NODE	1319:9	1319:9	9	0
LEAF_NODE	1319:10	1319:10	6	;
EXPR_STATEMENT	1320:1	1320:39	3	_TIFFmemset ( scanline , 0 , scanlinesize ) ;
EXPR	1320:1	1320:1	4	_TIFFmemset ( scanline , 0 , scanlinesize )
FUNCTION_CALL	1320:1	1320:38	5	_TIFFmemset ( scanline , 0 , scanlinesize )
CALLEE	1320:1	1320:1	6	_TIFFmemset
LEAF_NODE	1320:1	1320:1	7	_TIFFmemset
LEAF_NODE	1320:12	1320:12	6	(
ARGUMENT	1320:13	1320:13	6	scanline
FIELD	1320:13	1320:13	7	scanline
LEAF_NODE	1320:13	1320:13	8	scanline
LEAF_NODE	1320:21	1320:21	6	,
ARGUMENT	1320:23	1320:23	6	0
FIELD	1320:23	1320:23	7	0
LEAF_NODE	1320:23	1320:23	8	0
LEAF_NODE	1320:24	1320:24	6	,
ARGUMENT	1320:26	1320:26	6	scanlinesize
FIELD	1320:26	1320:26	7	scanlinesize
LEAF_NODE	1320:26	1320:26	8	scanlinesize
LEAF_NODE	1320:38	1320:38	6	)
LEAF_NODE	1320:39	1320:39	4	;
EXPR_STATEMENT	1321:1	1321:18	3	( void ) imagewidth ;
EXPR	1321:1	1321:8	4	( void ) imagewidth
LEAF_NODE	1321:1	1321:1	5	(
TYPE_NAME	1321:2	1321:2	5	void
LEAF_NODE	1321:2	1321:2	6	void
LEAF_NODE	1321:6	1321:6	5	)
FIELD	1321:8	1321:8	5	imagewidth
LEAF_NODE	1321:8	1321:8	6	imagewidth
LEAF_NODE	1321:18	1321:18	4	;
SELECTION	1322:1	1322:15	3	
KEYWORD	1322:1	1322:1	4	if
LEAF_NODE	1322:1	1322:1	5	if
LEAF_NODE	1322:4	1322:4	4	(
CONDITION	1322:5	1322:5	4	scanline
EXPR	1322:5	1322:5	5	scanline
FIELD	1322:5	1322:5	6	scanline
LEAF_NODE	1322:5	1322:5	7	scanline
LEAF_NODE	1322:13	1322:13	4	)
STATEMENTS	1322:15	1346:1	4	
LEAF_NODE	1322:15	1322:15	5	{
STATEMENTS	1323:2	1326:2	5	
SIMPLE_DECL	1323:2	1323:28	6	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	1323:2	1323:9	7	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	1323:2	1323:7	8	uint8 *
TYPE_NAME	1323:2	1323:2	9	uint8
LEAF_NODE	1323:2	1323:2	10	uint8
POINTER	1323:7	1323:7	9	*
LEAF_NODE	1323:7	1323:7	10	*
NAME	1323:9	1323:9	8	bufp
LEAF_NODE	1323:9	1323:9	9	bufp
LEAF_NODE	0:0	0:0	8	;
INIT	1323:9	1323:9	8	bufp = ( uint8 * ) buf
ASSIGN	1323:9	1323:16	9	bufp = ( uint8 * ) buf
LVAL	1323:9	1323:9	10	bufp
NAME	1323:9	1323:9	11	bufp
LEAF_NODE	1323:9	1323:9	12	bufp
ASSIGN_OP	1323:14	1323:14	10	=
LEAF_NODE	1323:14	1323:14	11	=
RVAL	1323:16	1323:25	10	( uint8 * ) buf
LEAF_NODE	1323:16	1323:16	11	(
TYPE_NAME	1323:17	1323:17	11	uint8
LEAF_NODE	1323:17	1323:17	12	uint8
LEAF_NODE	1323:22	1323:22	11	*
LEAF_NODE	1323:23	1323:23	11	)
FIELD	1323:25	1323:25	11	buf
LEAF_NODE	1323:25	1323:25	12	buf
LEAF_NODE	1323:28	1323:28	7	;
SIMPLE_DECL	1324:2	1324:12	6	uint32 row ;
VAR_DECL	1324:2	1324:9	7	uint32 row
TYPE	1324:2	1324:2	8	uint32
TYPE_NAME	1324:2	1324:2	9	uint32
LEAF_NODE	1324:2	1324:2	10	uint32
NAME	1324:9	1324:9	8	row
LEAF_NODE	1324:9	1324:9	9	row
LEAF_NODE	1324:12	1324:12	7	;
SIMPLE_DECL	1325:2	1325:13	6	tsample_t s ;
VAR_DECL	1325:2	1325:12	7	tsample_t s
TYPE	1325:2	1325:2	8	tsample_t
TYPE_NAME	1325:2	1325:2	9	tsample_t
LEAF_NODE	1325:2	1325:2	10	tsample_t
NAME	1325:12	1325:12	8	s
LEAF_NODE	1325:12	1325:12	9	s
LEAF_NODE	1325:13	1325:13	7	;
ITERATION	1326:2	1326:42	6	
KEYWORD	1326:2	1326:2	7	for
LEAF_NODE	1326:2	1326:2	8	for
LEAF_NODE	1326:6	1326:6	7	(
FOR_INIT	1326:7	1326:14	7	row = 0 ;
EXPR	1326:7	1326:7	8	row = 0
ASSIGN	1326:7	1326:13	9	row = 0
LVAL	1326:7	1326:7	10	row
FIELD	1326:7	1326:7	11	row
LEAF_NODE	1326:7	1326:7	12	row
ASSIGN_OP	1326:11	1326:11	10	=
LEAF_NODE	1326:11	1326:11	11	=
RVAL	1326:13	1326:13	10	0
FIELD	1326:13	1326:13	11	0
LEAF_NODE	1326:13	1326:13	12	0
LEAF_NODE	1326:14	1326:14	8	;
CONDITION	1326:16	1326:16	7	row < imagelength
EXPR	1326:16	1326:22	8	row < imagelength
FIELD	1326:16	1326:16	9	row
LEAF_NODE	1326:16	1326:16	10	row
REL_OPERATOR	1326:20	1326:20	9	<
LEAF_NODE	1326:20	1326:20	10	<
FIELD	1326:22	1326:22	9	imagelength
LEAF_NODE	1326:22	1326:22	10	imagelength
LEAF_NODE	1326:33	1326:33	7	;
FOR_EXPR	1326:35	1326:35	7	row ++
EXPR	1326:35	1326:35	8	row ++
FIELD	1326:35	1326:38	9	row ++
LEAF_NODE	1326:35	1326:35	10	row
LEAF_NODE	1326:38	1326:38	10	++
LEAF_NODE	1326:40	1326:40	7	)
STATEMENTS	1326:42	1345:2	7	
LEAF_NODE	1326:42	1326:42	8	{
STATEMENTS	1328:3	1344:3	8	
ITERATION	1328:3	1328:29	9	
KEYWORD	1328:3	1328:3	10	for
LEAF_NODE	1328:3	1328:3	11	for
LEAF_NODE	1328:7	1328:7	10	(
FOR_INIT	1328:8	1328:13	10	s = 0 ;
EXPR	1328:8	1328:8	11	s = 0
ASSIGN	1328:8	1328:12	12	s = 0
LVAL	1328:8	1328:8	13	s
FIELD	1328:8	1328:8	14	s
LEAF_NODE	1328:8	1328:8	15	s
ASSIGN_OP	1328:10	1328:10	13	=
LEAF_NODE	1328:10	1328:10	14	=
RVAL	1328:12	1328:12	13	0
FIELD	1328:12	1328:12	14	0
LEAF_NODE	1328:12	1328:12	15	0
LEAF_NODE	1328:13	1328:13	11	;
CONDITION	1328:15	1328:15	10	s < spp
EXPR	1328:15	1328:19	11	s < spp
FIELD	1328:15	1328:15	12	s
LEAF_NODE	1328:15	1328:15	13	s
REL_OPERATOR	1328:17	1328:17	12	<
LEAF_NODE	1328:17	1328:17	13	<
FIELD	1328:19	1328:19	12	spp
LEAF_NODE	1328:19	1328:19	13	spp
LEAF_NODE	1328:22	1328:22	10	;
FOR_EXPR	1328:24	1328:24	10	s ++
EXPR	1328:24	1328:24	11	s ++
FIELD	1328:24	1328:25	12	s ++
LEAF_NODE	1328:24	1328:24	13	s
LEAF_NODE	1328:25	1328:25	13	++
LEAF_NODE	1328:27	1328:27	10	)
STATEMENTS	1328:29	1343:3	10	
LEAF_NODE	1328:29	1328:29	11	{
STATEMENTS	1329:4	1341:4	11	
SIMPLE_DECL	1329:4	1329:24	12	uint8 * bp ; bp = bufp + s ;
VAR_DECL	1329:4	1329:11	13	uint8 * bp ; bp = bufp + s
TYPE	1329:4	1329:9	14	uint8 *
TYPE_NAME	1329:4	1329:4	15	uint8
LEAF_NODE	1329:4	1329:4	16	uint8
POINTER	1329:9	1329:9	15	*
LEAF_NODE	1329:9	1329:9	16	*
NAME	1329:11	1329:11	14	bp
LEAF_NODE	1329:11	1329:11	15	bp
LEAF_NODE	0:0	0:0	14	;
INIT	1329:11	1329:11	14	bp = bufp + s
ASSIGN	1329:11	1329:16	15	bp = bufp + s
LVAL	1329:11	1329:11	16	bp
NAME	1329:11	1329:11	17	bp
LEAF_NODE	1329:11	1329:11	18	bp
ASSIGN_OP	1329:14	1329:14	16	=
LEAF_NODE	1329:14	1329:14	17	=
RVAL	1329:16	1329:23	16	bufp + s
FIELD	1329:16	1329:16	17	bufp
LEAF_NODE	1329:16	1329:16	18	bufp
LEAF_NODE	1329:21	1329:21	17	+
FIELD	1329:23	1329:23	17	s
LEAF_NODE	1329:23	1329:23	18	s
LEAF_NODE	1329:24	1329:24	13	;
SIMPLE_DECL	1330:4	1330:28	12	tsize_t n ; n = scanlinesize ;
VAR_DECL	1330:4	1330:12	13	tsize_t n ; n = scanlinesize
TYPE	1330:4	1330:4	14	tsize_t
TYPE_NAME	1330:4	1330:4	15	tsize_t
LEAF_NODE	1330:4	1330:4	16	tsize_t
NAME	1330:12	1330:12	14	n
LEAF_NODE	1330:12	1330:12	15	n
LEAF_NODE	0:0	0:0	14	;
INIT	1330:12	1330:12	14	n = scanlinesize
ASSIGN	1330:12	1330:16	15	n = scanlinesize
LVAL	1330:12	1330:12	16	n
NAME	1330:12	1330:12	17	n
LEAF_NODE	1330:12	1330:12	18	n
ASSIGN_OP	1330:14	1330:14	16	=
LEAF_NODE	1330:14	1330:14	17	=
RVAL	1330:16	1330:16	16	scanlinesize
FIELD	1330:16	1330:16	17	scanlinesize
LEAF_NODE	1330:16	1330:16	18	scanlinesize
LEAF_NODE	1330:28	1330:28	13	;
SIMPLE_DECL	1331:4	1331:26	12	uint8 * sbuf ; sbuf = scanline ;
VAR_DECL	1331:4	1331:11	13	uint8 * sbuf ; sbuf = scanline
TYPE	1331:4	1331:9	14	uint8 *
TYPE_NAME	1331:4	1331:4	15	uint8
LEAF_NODE	1331:4	1331:4	16	uint8
POINTER	1331:9	1331:9	15	*
LEAF_NODE	1331:9	1331:9	16	*
NAME	1331:11	1331:11	14	sbuf
LEAF_NODE	1331:11	1331:11	15	sbuf
LEAF_NODE	0:0	0:0	14	;
INIT	1331:11	1331:11	14	sbuf = scanline
ASSIGN	1331:11	1331:18	15	sbuf = scanline
LVAL	1331:11	1331:11	16	sbuf
NAME	1331:11	1331:11	17	sbuf
LEAF_NODE	1331:11	1331:11	18	sbuf
ASSIGN_OP	1331:16	1331:16	16	=
LEAF_NODE	1331:16	1331:16	17	=
RVAL	1331:18	1331:18	16	scanline
FIELD	1331:18	1331:18	17	scanline
LEAF_NODE	1331:18	1331:18	18	scanline
LEAF_NODE	1331:26	1331:26	13	;
SELECTION	1333:4	1334:20	12	
KEYWORD	1333:4	1333:4	13	if
LEAF_NODE	1333:4	1333:4	14	if
LEAF_NODE	1333:7	1333:7	13	(
CONDITION	1333:8	1333:8	13	TIFFReadScanline ( in , scanline , row , s ) < 0 && ! ignore
EXPR	1333:8	1333:8	14	TIFFReadScanline ( in , scanline , row , s ) < 0 && ! ignore
AND	1333:8	1334:11	15	TIFFReadScanline ( in , scanline , row , s ) < 0 && ! ignore
EXPR	1333:8	1333:49	16	TIFFReadScanline ( in , scanline , row , s ) < 0
FUNCTION_CALL	1333:8	1333:45	17	TIFFReadScanline ( in , scanline , row , s )
CALLEE	1333:8	1333:8	18	TIFFReadScanline
LEAF_NODE	1333:8	1333:8	19	TIFFReadScanline
LEAF_NODE	1333:24	1333:24	18	(
ARGUMENT	1333:25	1333:25	18	in
FIELD	1333:25	1333:25	19	in
LEAF_NODE	1333:25	1333:25	20	in
LEAF_NODE	1333:27	1333:27	18	,
ARGUMENT	1333:29	1333:29	18	scanline
FIELD	1333:29	1333:29	19	scanline
LEAF_NODE	1333:29	1333:29	20	scanline
LEAF_NODE	1333:37	1333:37	18	,
ARGUMENT	1333:39	1333:39	18	row
FIELD	1333:39	1333:39	19	row
LEAF_NODE	1333:39	1333:39	20	row
LEAF_NODE	1333:42	1333:42	18	,
ARGUMENT	1333:44	1333:44	18	s
FIELD	1333:44	1333:44	19	s
LEAF_NODE	1333:44	1333:44	20	s
LEAF_NODE	1333:45	1333:45	18	)
REL_OPERATOR	1333:47	1333:47	17	<
LEAF_NODE	1333:47	1333:47	18	<
FIELD	1333:49	1333:49	17	0
LEAF_NODE	1333:49	1333:49	18	0
LEAF_NODE	1334:8	1334:8	16	&&
EXPR	1334:11	1334:11	16	! ignore
UNARY_EXPR	1334:11	1334:12	17	! ignore
UNARY_OPERATOR	1334:11	1334:11	18	!
LEAF_NODE	1334:11	1334:11	19	!
FIELD	1334:12	1334:12	18	ignore
LEAF_NODE	1334:12	1334:12	19	ignore
LEAF_NODE	1334:18	1334:18	13	)
STATEMENTS	1334:20	1340:4	13	
LEAF_NODE	1334:20	1334:20	14	{
STATEMENTS	1335:5	1339:5	14	
EXPR_STATEMENT	1335:5	1337:29	15	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row ) ;
EXPR	1335:5	1335:5	16	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
FUNCTION_CALL	1335:5	1337:28	17	TIFFError ( TIFFFileName ( in ) , "Error, can't read scanline %lu" , ( unsigned long ) row )
CALLEE	1335:5	1335:5	18	TIFFError
LEAF_NODE	1335:5	1335:5	19	TIFFError
LEAF_NODE	1335:14	1335:14	18	(
ARGUMENT	1335:15	1335:15	18	TIFFFileName ( in )
FUNCTION_CALL	1335:15	1335:30	19	TIFFFileName ( in )
CALLEE	1335:15	1335:15	20	TIFFFileName
LEAF_NODE	1335:15	1335:15	21	TIFFFileName
LEAF_NODE	1335:27	1335:27	20	(
ARGUMENT	1335:28	1335:28	20	in
FIELD	1335:28	1335:28	21	in
LEAF_NODE	1335:28	1335:28	22	in
LEAF_NODE	1335:30	1335:30	20	)
LEAF_NODE	1335:31	1335:31	18	,
ARGUMENT	1336:9	1336:9	18	"Error, can't read scanline %lu"
FIELD	1336:9	1336:9	19	"Error, can't read scanline %lu"
LEAF_NODE	1336:9	1336:9	20	"Error, can't read scanline %lu"
LEAF_NODE	1336:41	1336:41	18	,
ARGUMENT	1337:9	1337:25	18	( unsigned long ) row
LEAF_NODE	1337:9	1337:9	19	(
TYPE_NAME	1337:10	1337:19	19	unsigned long
LEAF_NODE	1337:10	1337:10	20	unsigned
LEAF_NODE	1337:19	1337:19	20	long
LEAF_NODE	1337:23	1337:23	19	)
FIELD	1337:25	1337:25	19	row
LEAF_NODE	1337:25	1337:25	20	row
LEAF_NODE	1337:28	1337:28	18	)
LEAF_NODE	1337:29	1337:29	16	;
EXPR_STATEMENT	1338:9	1338:19	15	status = 0 ;
EXPR	1338:9	1338:9	16	status = 0
ASSIGN	1338:9	1338:18	17	status = 0
LVAL	1338:9	1338:9	18	status
FIELD	1338:9	1338:9	19	status
LEAF_NODE	1338:9	1338:9	20	status
ASSIGN_OP	1338:16	1338:16	18	=
LEAF_NODE	1338:16	1338:16	19	=
RVAL	1338:18	1338:18	18	0
FIELD	1338:18	1338:18	19	0
LEAF_NODE	1338:18	1338:18	20	0
LEAF_NODE	1338:19	1338:19	16	;
JUMP_STATEMENT	1339:5	1339:14	15	goto done ;
KEYWORD	1339:5	1339:5	16	goto
LEAF_NODE	1339:5	1339:5	17	goto
DESTINATION	1339:10	1339:10	16	done
LEAF_NODE	1339:10	1339:10	17	done
LEAF_NODE	1339:14	1339:14	16	;
LEAF_NODE	1340:4	1340:4	14	}
ITERATION	1341:4	1342:5	12	
KEYWORD	1341:4	1341:4	13	while
LEAF_NODE	1341:4	1341:4	14	while
LEAF_NODE	1341:10	1341:10	13	(
CONDITION	1341:11	1341:11	13	n -- > 0
EXPR	1341:11	1341:17	14	n -- > 0
FIELD	1341:11	1341:12	15	n --
LEAF_NODE	1341:11	1341:11	16	n
LEAF_NODE	1341:12	1341:12	16	--
REL_OPERATOR	1341:15	1341:15	15	>
LEAF_NODE	1341:15	1341:15	16	>
FIELD	1341:17	1341:17	15	0
LEAF_NODE	1341:17	1341:17	16	0
LEAF_NODE	1341:18	1341:18	13	)
STATEMENTS	1342:5	1342:5	13	
EXPR_STATEMENT	1342:5	1342:29	14	* bp = * sbuf ++ , bp += spp ;
EXPR	1342:5	1342:20	15	* bp = * sbuf ++ , bp += spp
ASSIGN	1342:5	1342:11	16	* bp = * sbuf ++
LVAL	1342:5	1342:5	17	* bp
UNARY_EXPR	1342:5	1342:6	18	* bp
UNARY_OPERATOR	1342:5	1342:5	19	*
LEAF_NODE	1342:5	1342:5	20	*
FIELD	1342:6	1342:6	19	bp
LEAF_NODE	1342:6	1342:6	20	bp
ASSIGN_OP	1342:9	1342:9	17	=
LEAF_NODE	1342:9	1342:9	18	=
RVAL	1342:11	1342:11	17	* sbuf ++
UNARY_EXPR	1342:11	1342:12	18	* sbuf ++
UNARY_OPERATOR	1342:11	1342:11	19	*
LEAF_NODE	1342:11	1342:11	20	*
FIELD	1342:12	1342:16	19	sbuf ++
LEAF_NODE	1342:12	1342:12	20	sbuf
LEAF_NODE	1342:16	1342:16	20	++
LEAF_NODE	1342:18	1342:18	16	,
ASSIGN	1342:20	1342:26	16	bp += spp
LVAL	1342:20	1342:20	17	bp
FIELD	1342:20	1342:20	18	bp
LEAF_NODE	1342:20	1342:20	19	bp
ASSIGN_OP	1342:23	1342:23	17	+=
LEAF_NODE	1342:23	1342:23	18	+=
RVAL	1342:26	1342:26	17	spp
FIELD	1342:26	1342:26	18	spp
LEAF_NODE	1342:26	1342:26	19	spp
LEAF_NODE	1342:29	1342:29	15	;
LEAF_NODE	1343:3	1343:3	11	}
EXPR_STATEMENT	1344:3	1344:29	9	bufp += scanlinesize * spp ;
EXPR	1344:3	1344:3	10	bufp += scanlinesize * spp
ASSIGN	1344:3	1344:11	11	bufp += scanlinesize * spp
LVAL	1344:3	1344:3	12	bufp
FIELD	1344:3	1344:3	13	bufp
LEAF_NODE	1344:3	1344:3	14	bufp
ASSIGN_OP	1344:8	1344:8	12	+=
LEAF_NODE	1344:8	1344:8	13	+=
RVAL	1344:11	1344:26	12	scanlinesize * spp
FIELD	1344:11	1344:11	13	scanlinesize
LEAF_NODE	1344:11	1344:11	14	scanlinesize
LEAF_NODE	1344:24	1344:24	13	*
FIELD	1344:26	1344:26	13	spp
LEAF_NODE	1344:26	1344:26	14	spp
LEAF_NODE	1344:29	1344:29	10	;
LEAF_NODE	1345:2	1345:2	8	}
LEAF_NODE	1346:1	1346:1	5	}
LABEL	1348:0	1348:4	3	done :
LEAF_NODE	1348:0	1348:0	4	done
LEAF_NODE	1348:4	1348:4	4	:
EXPR_STATEMENT	1349:1	1349:20	3	_TIFFfree ( scanline ) ;
EXPR	1349:1	1349:1	4	_TIFFfree ( scanline )
FUNCTION_CALL	1349:1	1349:19	5	_TIFFfree ( scanline )
CALLEE	1349:1	1349:1	6	_TIFFfree
LEAF_NODE	1349:1	1349:1	7	_TIFFfree
LEAF_NODE	1349:10	1349:10	6	(
ARGUMENT	1349:11	1349:11	6	scanline
FIELD	1349:11	1349:11	7	scanline
LEAF_NODE	1349:11	1349:11	8	scanline
LEAF_NODE	1349:19	1349:19	6	)
LEAF_NODE	1349:20	1349:20	4	;
JUMP_STATEMENT	1350:1	1350:14	3	return status ;
KEYWORD	1350:1	1350:1	4	return
LEAF_NODE	1350:1	1350:1	5	return
DESTINATION	1350:8	1350:8	4	status
EXPR	1350:8	1350:8	5	status
FIELD	1350:8	1350:8	6	status
LEAF_NODE	1350:8	1350:8	7	status
LEAF_NODE	1350:14	1350:14	4	;
LEAF_NODE	1351:0	1351:0	2	}
FUNCTION_DEF	0:0	1405:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1353:0	1353:0	2	DECLAREreadFunc
LEAF_NODE	1353:0	1353:0	3	DECLAREreadFunc
PARAMETER_LIST	1353:15	1353:41	2	( readContigTilesIntoBuffer )
LEAF_NODE	1353:15	1353:15	3	(
PARAMETER_DECL	1353:16	1353:16	3	readContigTilesIntoBuffer
LEAF_NODE	1353:16	1353:16	4	readContigTilesIntoBuffer
LEAF_NODE	1353:41	1353:41	3	)
LEAF_NODE	1354:0	1354:0	2	{
STATEMENTS	1355:1	1404:1	2	
SIMPLE_DECL	1355:1	1355:15	3	int status ; status = 1 ;
VAR_DECL	1355:1	1355:5	4	int status ; status = 1
TYPE	1355:1	1355:1	5	int
TYPE_NAME	1355:1	1355:1	6	int
LEAF_NODE	1355:1	1355:1	7	int
NAME	1355:5	1355:5	5	status
LEAF_NODE	1355:5	1355:5	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	1355:5	1355:5	5	status = 1
ASSIGN	1355:5	1355:14	6	status = 1
LVAL	1355:5	1355:5	7	status
NAME	1355:5	1355:5	8	status
LEAF_NODE	1355:5	1355:5	9	status
ASSIGN_OP	1355:12	1355:12	7	=
LEAF_NODE	1355:12	1355:12	8	=
RVAL	1355:14	1355:14	7	1
FIELD	1355:14	1355:14	8	1
LEAF_NODE	1355:14	1355:14	9	1
LEAF_NODE	1355:15	1355:15	4	;
SIMPLE_DECL	1356:1	1356:36	3	tsize_t tilesize ; tilesize = TIFFTileSize ( in ) ;
VAR_DECL	1356:1	1356:9	4	tsize_t tilesize ; tilesize = TIFFTileSize ( in )
TYPE	1356:1	1356:1	5	tsize_t
TYPE_NAME	1356:1	1356:1	6	tsize_t
LEAF_NODE	1356:1	1356:1	7	tsize_t
NAME	1356:9	1356:9	5	tilesize
LEAF_NODE	1356:9	1356:9	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	1356:9	1356:9	5	tilesize = TIFFTileSize ( in )
ASSIGN	1356:9	1356:20	6	tilesize = TIFFTileSize ( in )
LVAL	1356:9	1356:9	7	tilesize
NAME	1356:9	1356:9	8	tilesize
LEAF_NODE	1356:9	1356:9	9	tilesize
ASSIGN_OP	1356:18	1356:18	7	=
LEAF_NODE	1356:18	1356:18	8	=
RVAL	1356:20	1356:20	7	TIFFTileSize ( in )
FUNCTION_CALL	1356:20	1356:35	8	TIFFTileSize ( in )
CALLEE	1356:20	1356:20	9	TIFFTileSize
LEAF_NODE	1356:20	1356:20	10	TIFFTileSize
LEAF_NODE	1356:32	1356:32	9	(
ARGUMENT	1356:33	1356:33	9	in
FIELD	1356:33	1356:33	10	in
LEAF_NODE	1356:33	1356:33	11	in
LEAF_NODE	1356:35	1356:35	9	)
LEAF_NODE	1356:36	1356:36	4	;
SIMPLE_DECL	1357:1	1357:16	3	tdata_t tilebuf ;
VAR_DECL	1357:1	1357:9	4	tdata_t tilebuf
TYPE	1357:1	1357:1	5	tdata_t
TYPE_NAME	1357:1	1357:1	6	tdata_t
LEAF_NODE	1357:1	1357:1	7	tdata_t
NAME	1357:9	1357:9	5	tilebuf
LEAF_NODE	1357:9	1357:9	6	tilebuf
LEAF_NODE	1357:16	1357:16	4	;
SIMPLE_DECL	1358:1	1358:37	3	uint32 imagew ; imagew = TIFFScanlineSize ( in ) ;
VAR_DECL	1358:1	1358:8	4	uint32 imagew ; imagew = TIFFScanlineSize ( in )
TYPE	1358:1	1358:1	5	uint32
TYPE_NAME	1358:1	1358:1	6	uint32
LEAF_NODE	1358:1	1358:1	7	uint32
NAME	1358:8	1358:8	5	imagew
LEAF_NODE	1358:8	1358:8	6	imagew
LEAF_NODE	0:0	0:0	5	;
INIT	1358:8	1358:8	5	imagew = TIFFScanlineSize ( in )
ASSIGN	1358:8	1358:17	6	imagew = TIFFScanlineSize ( in )
LVAL	1358:8	1358:8	7	imagew
NAME	1358:8	1358:8	8	imagew
LEAF_NODE	1358:8	1358:8	9	imagew
ASSIGN_OP	1358:15	1358:15	7	=
LEAF_NODE	1358:15	1358:15	8	=
RVAL	1358:17	1358:17	7	TIFFScanlineSize ( in )
FUNCTION_CALL	1358:17	1358:36	8	TIFFScanlineSize ( in )
CALLEE	1358:17	1358:17	9	TIFFScanlineSize
LEAF_NODE	1358:17	1358:17	10	TIFFScanlineSize
LEAF_NODE	1358:33	1358:33	9	(
ARGUMENT	1358:34	1358:34	9	in
FIELD	1358:34	1358:34	10	in
LEAF_NODE	1358:34	1358:34	11	in
LEAF_NODE	1358:36	1358:36	9	)
LEAF_NODE	1358:37	1358:37	4	;
SIMPLE_DECL	1359:1	1359:36	3	uint32 tilew ; tilew = TIFFTileRowSize ( in ) ;
VAR_DECL	1359:1	1359:8	4	uint32 tilew ; tilew = TIFFTileRowSize ( in )
TYPE	1359:1	1359:1	5	uint32
TYPE_NAME	1359:1	1359:1	6	uint32
LEAF_NODE	1359:1	1359:1	7	uint32
NAME	1359:8	1359:8	5	tilew
LEAF_NODE	1359:8	1359:8	6	tilew
LEAF_NODE	0:0	0:0	5	;
INIT	1359:8	1359:8	5	tilew = TIFFTileRowSize ( in )
ASSIGN	1359:8	1359:17	6	tilew = TIFFTileRowSize ( in )
LVAL	1359:8	1359:8	7	tilew
NAME	1359:8	1359:8	8	tilew
LEAF_NODE	1359:8	1359:8	9	tilew
ASSIGN_OP	1359:15	1359:15	7	=
LEAF_NODE	1359:15	1359:15	8	=
RVAL	1359:17	1359:17	7	TIFFTileRowSize ( in )
FUNCTION_CALL	1359:17	1359:35	8	TIFFTileRowSize ( in )
CALLEE	1359:17	1359:17	9	TIFFTileRowSize
LEAF_NODE	1359:17	1359:17	10	TIFFTileRowSize
LEAF_NODE	1359:32	1359:32	9	(
ARGUMENT	1359:33	1359:33	9	in
FIELD	1359:33	1359:33	10	in
LEAF_NODE	1359:33	1359:33	11	in
LEAF_NODE	1359:35	1359:35	9	)
LEAF_NODE	1359:36	1359:36	4	;
SIMPLE_DECL	1360:1	1360:43	3	int64 iskew ; iskew = ( int64 ) imagew - ( int64 ) tilew ;
VAR_DECL	1360:1	1360:7	4	int64 iskew ; iskew = ( int64 ) imagew - ( int64 ) tilew
TYPE	1360:1	1360:1	5	int64
TYPE_NAME	1360:1	1360:1	6	int64
LEAF_NODE	1360:1	1360:1	7	int64
NAME	1360:7	1360:7	5	iskew
LEAF_NODE	1360:7	1360:7	6	iskew
LEAF_NODE	0:0	0:0	5	;
INIT	1360:7	1360:7	5	iskew = ( int64 ) imagew - ( int64 ) tilew
ASSIGN	1360:7	1360:15	6	iskew = ( int64 ) imagew - ( int64 ) tilew
LVAL	1360:7	1360:7	7	iskew
NAME	1360:7	1360:7	8	iskew
LEAF_NODE	1360:7	1360:7	9	iskew
ASSIGN_OP	1360:13	1360:13	7	=
LEAF_NODE	1360:13	1360:13	8	=
RVAL	1360:15	1360:38	7	( int64 ) imagew - ( int64 ) tilew
LEAF_NODE	1360:15	1360:15	8	(
TYPE_NAME	1360:16	1360:16	8	int64
LEAF_NODE	1360:16	1360:16	9	int64
LEAF_NODE	1360:21	1360:21	8	)
FIELD	1360:22	1360:22	8	imagew
LEAF_NODE	1360:22	1360:22	9	imagew
LEAF_NODE	1360:29	1360:29	8	-
LEAF_NODE	1360:31	1360:31	8	(
TYPE_NAME	1360:32	1360:32	8	int64
LEAF_NODE	1360:32	1360:32	9	int64
LEAF_NODE	1360:37	1360:37	8	)
FIELD	1360:38	1360:38	8	tilew
LEAF_NODE	1360:38	1360:38	9	tilew
LEAF_NODE	1360:43	1360:43	4	;
SIMPLE_DECL	1361:1	1361:27	3	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	1361:1	1361:8	4	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	1361:1	1361:6	5	uint8 *
TYPE_NAME	1361:1	1361:1	6	uint8
LEAF_NODE	1361:1	1361:1	7	uint8
POINTER	1361:6	1361:6	6	*
LEAF_NODE	1361:6	1361:6	7	*
NAME	1361:8	1361:8	5	bufp
LEAF_NODE	1361:8	1361:8	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	1361:8	1361:8	5	bufp = ( uint8 * ) buf
ASSIGN	1361:8	1361:15	6	bufp = ( uint8 * ) buf
LVAL	1361:8	1361:8	7	bufp
NAME	1361:8	1361:8	8	bufp
LEAF_NODE	1361:8	1361:8	9	bufp
ASSIGN_OP	1361:13	1361:13	7	=
LEAF_NODE	1361:13	1361:13	8	=
RVAL	1361:15	1361:24	7	( uint8 * ) buf
LEAF_NODE	1361:15	1361:15	8	(
TYPE_NAME	1361:16	1361:16	8	uint8
LEAF_NODE	1361:16	1361:16	9	uint8
LEAF_NODE	1361:21	1361:21	8	*
LEAF_NODE	1361:22	1361:22	8	)
FIELD	1361:24	1361:24	8	buf
LEAF_NODE	1361:24	1361:24	9	buf
LEAF_NODE	1361:27	1361:27	4	;
SIMPLE_DECL	1362:1	1362:14	3	uint32 tw , uint32 tl ;
INIT_DECL_LIST	1362:1	1362:1	4	uint32 tw , uint32 tl
VAR_DECL	1362:1	1362:8	5	uint32 tw
TYPE	1362:1	1362:1	6	uint32
TYPE_NAME	1362:1	1362:1	7	uint32
LEAF_NODE	1362:1	1362:1	8	uint32
NAME	1362:8	1362:8	6	tw
LEAF_NODE	1362:8	1362:8	7	tw
LEAF_NODE	1362:10	1362:10	5	,
VAR_DECL	1362:1	1362:12	5	uint32 tl
TYPE	1362:1	1362:1	6	uint32
TYPE_NAME	1362:1	1362:1	7	uint32
LEAF_NODE	1362:1	1362:1	8	uint32
NAME	1362:12	1362:12	6	tl
LEAF_NODE	1362:12	1362:12	7	tl
LEAF_NODE	1362:14	1362:14	4	;
SIMPLE_DECL	1363:1	1363:11	3	uint32 row ;
VAR_DECL	1363:1	1363:8	4	uint32 row
TYPE	1363:1	1363:1	5	uint32
TYPE_NAME	1363:1	1363:1	6	uint32
LEAF_NODE	1363:1	1363:1	7	uint32
NAME	1363:8	1363:8	5	row
LEAF_NODE	1363:8	1363:8	6	row
LEAF_NODE	1363:11	1363:11	4	;
EXPR_STATEMENT	1365:1	1365:11	3	( void ) spp ;
EXPR	1365:1	1365:8	4	( void ) spp
LEAF_NODE	1365:1	1365:1	5	(
TYPE_NAME	1365:2	1365:2	5	void
LEAF_NODE	1365:2	1365:2	6	void
LEAF_NODE	1365:6	1365:6	5	)
FIELD	1365:8	1365:8	5	spp
LEAF_NODE	1365:8	1365:8	6	spp
LEAF_NODE	1365:11	1365:11	4	;
EXPR_STATEMENT	1366:1	1366:32	3	tilebuf = _TIFFmalloc ( tilesize ) ;
EXPR	1366:1	1366:1	4	tilebuf = _TIFFmalloc ( tilesize )
ASSIGN	1366:1	1366:11	5	tilebuf = _TIFFmalloc ( tilesize )
LVAL	1366:1	1366:1	6	tilebuf
FIELD	1366:1	1366:1	7	tilebuf
LEAF_NODE	1366:1	1366:1	8	tilebuf
ASSIGN_OP	1366:9	1366:9	6	=
LEAF_NODE	1366:9	1366:9	7	=
RVAL	1366:11	1366:11	6	_TIFFmalloc ( tilesize )
FUNCTION_CALL	1366:11	1366:31	7	_TIFFmalloc ( tilesize )
CALLEE	1366:11	1366:11	8	_TIFFmalloc
LEAF_NODE	1366:11	1366:11	9	_TIFFmalloc
LEAF_NODE	1366:22	1366:22	8	(
ARGUMENT	1366:23	1366:23	8	tilesize
FIELD	1366:23	1366:23	9	tilesize
LEAF_NODE	1366:23	1366:23	10	tilesize
LEAF_NODE	1366:31	1366:31	8	)
LEAF_NODE	1366:32	1366:32	4	;
SELECTION	1367:1	1368:2	3	
KEYWORD	1367:1	1367:1	4	if
LEAF_NODE	1367:1	1367:1	5	if
LEAF_NODE	1367:4	1367:4	4	(
CONDITION	1367:5	1367:5	4	tilebuf == 0
EXPR	1367:5	1367:16	5	tilebuf == 0
FIELD	1367:5	1367:5	6	tilebuf
LEAF_NODE	1367:5	1367:5	7	tilebuf
EQ_OPERATOR	1367:13	1367:13	6	==
LEAF_NODE	1367:13	1367:13	7	==
FIELD	1367:16	1367:16	6	0
LEAF_NODE	1367:16	1367:16	7	0
LEAF_NODE	1367:17	1367:17	4	)
STATEMENTS	1368:2	1368:2	4	
JUMP_STATEMENT	1368:2	1368:10	5	return 0 ;
KEYWORD	1368:2	1368:2	6	return
LEAF_NODE	1368:2	1368:2	7	return
DESTINATION	1368:9	1368:9	6	0
EXPR	1368:9	1368:9	7	0
FIELD	1368:9	1368:9	8	0
LEAF_NODE	1368:9	1368:9	9	0
LEAF_NODE	1368:10	1368:10	6	;
EXPR_STATEMENT	1369:1	1369:34	3	_TIFFmemset ( tilebuf , 0 , tilesize ) ;
EXPR	1369:1	1369:1	4	_TIFFmemset ( tilebuf , 0 , tilesize )
FUNCTION_CALL	1369:1	1369:33	5	_TIFFmemset ( tilebuf , 0 , tilesize )
CALLEE	1369:1	1369:1	6	_TIFFmemset
LEAF_NODE	1369:1	1369:1	7	_TIFFmemset
LEAF_NODE	1369:12	1369:12	6	(
ARGUMENT	1369:13	1369:13	6	tilebuf
FIELD	1369:13	1369:13	7	tilebuf
LEAF_NODE	1369:13	1369:13	8	tilebuf
LEAF_NODE	1369:20	1369:20	6	,
ARGUMENT	1369:22	1369:22	6	0
FIELD	1369:22	1369:22	7	0
LEAF_NODE	1369:22	1369:22	8	0
LEAF_NODE	1369:23	1369:23	6	,
ARGUMENT	1369:25	1369:25	6	tilesize
FIELD	1369:25	1369:25	7	tilesize
LEAF_NODE	1369:25	1369:25	8	tilesize
LEAF_NODE	1369:33	1369:33	6	)
LEAF_NODE	1369:34	1369:34	4	;
EXPR_STATEMENT	1370:1	1370:48	3	( void ) TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	1370:1	1370:8	4	( void ) TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
LEAF_NODE	1370:1	1370:1	5	(
TYPE_NAME	1370:2	1370:2	5	void
LEAF_NODE	1370:2	1370:2	6	void
LEAF_NODE	1370:6	1370:6	5	)
FUNCTION_CALL	1370:8	1370:47	5	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1370:8	1370:8	6	TIFFGetField
LEAF_NODE	1370:8	1370:8	7	TIFFGetField
LEAF_NODE	1370:20	1370:20	6	(
ARGUMENT	1370:21	1370:21	6	in
FIELD	1370:21	1370:21	7	in
LEAF_NODE	1370:21	1370:21	8	in
LEAF_NODE	1370:23	1370:23	6	,
ARGUMENT	1370:25	1370:25	6	TIFFTAG_TILEWIDTH
FIELD	1370:25	1370:25	7	TIFFTAG_TILEWIDTH
LEAF_NODE	1370:25	1370:25	8	TIFFTAG_TILEWIDTH
LEAF_NODE	1370:42	1370:42	6	,
ARGUMENT	1370:44	1370:44	6	& tw
UNARY_EXPR	1370:44	1370:45	7	& tw
UNARY_OPERATOR	1370:44	1370:44	8	&
LEAF_NODE	1370:44	1370:44	9	&
FIELD	1370:45	1370:45	8	tw
LEAF_NODE	1370:45	1370:45	9	tw
LEAF_NODE	1370:47	1370:47	6	)
LEAF_NODE	1370:48	1370:48	4	;
EXPR_STATEMENT	1371:1	1371:49	3	( void ) TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl ) ;
EXPR	1371:1	1371:8	4	( void ) TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
LEAF_NODE	1371:1	1371:1	5	(
TYPE_NAME	1371:2	1371:2	5	void
LEAF_NODE	1371:2	1371:2	6	void
LEAF_NODE	1371:6	1371:6	5	)
FUNCTION_CALL	1371:8	1371:48	5	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
CALLEE	1371:8	1371:8	6	TIFFGetField
LEAF_NODE	1371:8	1371:8	7	TIFFGetField
LEAF_NODE	1371:20	1371:20	6	(
ARGUMENT	1371:21	1371:21	6	in
FIELD	1371:21	1371:21	7	in
LEAF_NODE	1371:21	1371:21	8	in
LEAF_NODE	1371:23	1371:23	6	,
ARGUMENT	1371:25	1371:25	6	TIFFTAG_TILELENGTH
FIELD	1371:25	1371:25	7	TIFFTAG_TILELENGTH
LEAF_NODE	1371:25	1371:25	8	TIFFTAG_TILELENGTH
LEAF_NODE	1371:43	1371:43	6	,
ARGUMENT	1371:45	1371:45	6	& tl
UNARY_EXPR	1371:45	1371:46	7	& tl
UNARY_OPERATOR	1371:45	1371:45	8	&
LEAF_NODE	1371:45	1371:45	9	&
FIELD	1371:46	1371:46	8	tl
LEAF_NODE	1371:46	1371:46	9	tl
LEAF_NODE	1371:48	1371:48	6	)
LEAF_NODE	1371:49	1371:49	4	;
ITERATION	1373:1	1373:45	3	
KEYWORD	1373:1	1373:1	4	for
LEAF_NODE	1373:1	1373:1	5	for
LEAF_NODE	1373:5	1373:5	4	(
FOR_INIT	1373:6	1373:13	4	row = 0 ;
EXPR	1373:6	1373:6	5	row = 0
ASSIGN	1373:6	1373:12	6	row = 0
LVAL	1373:6	1373:6	7	row
FIELD	1373:6	1373:6	8	row
LEAF_NODE	1373:6	1373:6	9	row
ASSIGN_OP	1373:10	1373:10	7	=
LEAF_NODE	1373:10	1373:10	8	=
RVAL	1373:12	1373:12	7	0
FIELD	1373:12	1373:12	8	0
LEAF_NODE	1373:12	1373:12	9	0
LEAF_NODE	1373:13	1373:13	5	;
CONDITION	1373:15	1373:15	4	row < imagelength
EXPR	1373:15	1373:21	5	row < imagelength
FIELD	1373:15	1373:15	6	row
LEAF_NODE	1373:15	1373:15	7	row
REL_OPERATOR	1373:19	1373:19	6	<
LEAF_NODE	1373:19	1373:19	7	<
FIELD	1373:21	1373:21	6	imagelength
LEAF_NODE	1373:21	1373:21	7	imagelength
LEAF_NODE	1373:32	1373:32	4	;
FOR_EXPR	1373:34	1373:34	4	row += tl
EXPR	1373:34	1373:34	5	row += tl
ASSIGN	1373:34	1373:41	6	row += tl
LVAL	1373:34	1373:34	7	row
FIELD	1373:34	1373:34	8	row
LEAF_NODE	1373:34	1373:34	9	row
ASSIGN_OP	1373:38	1373:38	7	+=
LEAF_NODE	1373:38	1373:38	8	+=
RVAL	1373:41	1373:41	7	tl
FIELD	1373:41	1373:41	8	tl
LEAF_NODE	1373:41	1373:41	9	tl
LEAF_NODE	1373:43	1373:43	4	)
STATEMENTS	1373:45	1401:1	4	
LEAF_NODE	1373:45	1373:45	5	{
STATEMENTS	1374:2	1400:2	5	
SIMPLE_DECL	1374:2	1374:61	6	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
VAR_DECL	1374:2	1374:9	7	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl
TYPE	1374:2	1374:2	8	uint32
TYPE_NAME	1374:2	1374:2	9	uint32
LEAF_NODE	1374:2	1374:2	10	uint32
NAME	1374:9	1374:9	8	nrow
LEAF_NODE	1374:9	1374:9	9	nrow
LEAF_NODE	0:0	0:0	8	;
INIT	1374:9	1374:9	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	1374:9	1374:16	9	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	1374:9	1374:9	10	nrow
NAME	1374:9	1374:9	11	nrow
LEAF_NODE	1374:9	1374:9	12	nrow
ASSIGN_OP	1374:14	1374:14	10	=
LEAF_NODE	1374:14	1374:14	11	=
RVAL	1374:16	1374:16	10	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	1374:16	1374:59	11	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	1374:16	1374:37	12	( row + tl > imagelength )
LEAF_NODE	1374:16	1374:16	13	(
FIELD	1374:17	1374:17	13	row
LEAF_NODE	1374:17	1374:17	14	row
LEAF_NODE	1374:20	1374:20	13	+
FIELD	1374:21	1374:21	13	tl
LEAF_NODE	1374:21	1374:21	14	tl
REL_OPERATOR	1374:24	1374:24	13	>
LEAF_NODE	1374:24	1374:24	14	>
FIELD	1374:26	1374:26	13	imagelength
LEAF_NODE	1374:26	1374:26	14	imagelength
LEAF_NODE	1374:37	1374:37	13	)
LEAF_NODE	1374:39	1374:39	12	?
EXPR	1374:41	1374:53	12	imagelength - row
FIELD	1374:41	1374:41	13	imagelength
LEAF_NODE	1374:41	1374:41	14	imagelength
LEAF_NODE	1374:52	1374:52	13	-
FIELD	1374:53	1374:53	13	row
LEAF_NODE	1374:53	1374:53	14	row
LEAF_NODE	1374:57	1374:57	12	:
FIELD	1374:59	1374:59	12	tl
LEAF_NODE	1374:59	1374:59	13	tl
LEAF_NODE	1374:61	1374:61	7	;
SIMPLE_DECL	1375:2	1375:17	6	uint32 colb ; colb = 0 ;
VAR_DECL	1375:2	1375:9	7	uint32 colb ; colb = 0
TYPE	1375:2	1375:2	8	uint32
TYPE_NAME	1375:2	1375:2	9	uint32
LEAF_NODE	1375:2	1375:2	10	uint32
NAME	1375:9	1375:9	8	colb
LEAF_NODE	1375:9	1375:9	9	colb
LEAF_NODE	0:0	0:0	8	;
INIT	1375:9	1375:9	8	colb = 0
ASSIGN	1375:9	1375:16	9	colb = 0
LVAL	1375:9	1375:9	10	colb
NAME	1375:9	1375:9	11	colb
LEAF_NODE	1375:9	1375:9	12	colb
ASSIGN_OP	1375:14	1375:14	10	=
LEAF_NODE	1375:14	1375:14	11	=
RVAL	1375:16	1375:16	10	0
FIELD	1375:16	1375:16	11	0
LEAF_NODE	1375:16	1375:16	12	0
LEAF_NODE	1375:17	1375:17	7	;
SIMPLE_DECL	1376:2	1376:12	6	uint32 col ;
VAR_DECL	1376:2	1376:9	7	uint32 col
TYPE	1376:2	1376:2	8	uint32
TYPE_NAME	1376:2	1376:2	9	uint32
LEAF_NODE	1376:2	1376:2	10	uint32
NAME	1376:9	1376:9	8	col
LEAF_NODE	1376:9	1376:9	9	col
LEAF_NODE	1376:12	1376:12	7	;
ITERATION	1378:2	1378:62	6	
KEYWORD	1378:2	1378:2	7	for
LEAF_NODE	1378:2	1378:2	8	for
LEAF_NODE	1378:6	1378:6	7	(
FOR_INIT	1378:7	1378:14	7	col = 0 ;
EXPR	1378:7	1378:7	8	col = 0
ASSIGN	1378:7	1378:13	9	col = 0
LVAL	1378:7	1378:7	10	col
FIELD	1378:7	1378:7	11	col
LEAF_NODE	1378:7	1378:7	12	col
ASSIGN_OP	1378:11	1378:11	10	=
LEAF_NODE	1378:11	1378:11	11	=
RVAL	1378:13	1378:13	10	0
FIELD	1378:13	1378:13	11	0
LEAF_NODE	1378:13	1378:13	12	0
LEAF_NODE	1378:14	1378:14	8	;
CONDITION	1378:16	1378:16	7	col < imagewidth && colb < imagew
EXPR	1378:16	1378:16	8	col < imagewidth && colb < imagew
AND	1378:16	1378:36	9	col < imagewidth && colb < imagew
EXPR	1378:16	1378:22	10	col < imagewidth
FIELD	1378:16	1378:16	11	col
LEAF_NODE	1378:16	1378:16	12	col
REL_OPERATOR	1378:20	1378:20	11	<
LEAF_NODE	1378:20	1378:20	12	<
FIELD	1378:22	1378:22	11	imagewidth
LEAF_NODE	1378:22	1378:22	12	imagewidth
LEAF_NODE	1378:33	1378:33	10	&&
EXPR	1378:36	1378:43	10	colb < imagew
FIELD	1378:36	1378:36	11	colb
LEAF_NODE	1378:36	1378:36	12	colb
REL_OPERATOR	1378:41	1378:41	11	<
LEAF_NODE	1378:41	1378:41	12	<
FIELD	1378:43	1378:43	11	imagew
LEAF_NODE	1378:43	1378:43	12	imagew
LEAF_NODE	1378:49	1378:49	7	;
FOR_EXPR	1378:51	1378:51	7	col += tw
EXPR	1378:51	1378:51	8	col += tw
ASSIGN	1378:51	1378:58	9	col += tw
LVAL	1378:51	1378:51	10	col
FIELD	1378:51	1378:51	11	col
LEAF_NODE	1378:51	1378:51	12	col
ASSIGN_OP	1378:55	1378:55	10	+=
LEAF_NODE	1378:55	1378:55	11	+=
RVAL	1378:58	1378:58	10	tw
FIELD	1378:58	1378:58	11	tw
LEAF_NODE	1378:58	1378:58	12	tw
LEAF_NODE	1378:60	1378:60	7	)
STATEMENTS	1378:62	1399:2	7	
LEAF_NODE	1378:62	1378:62	8	{
STATEMENTS	1379:3	1398:3	8	
SELECTION	1379:3	1380:19	9	
KEYWORD	1379:3	1379:3	10	if
LEAF_NODE	1379:3	1379:3	11	if
LEAF_NODE	1379:6	1379:6	10	(
CONDITION	1379:7	1379:7	10	TIFFReadTile ( in , tilebuf , col , row , 0 , 0 ) < 0 && ! ignore
EXPR	1379:7	1379:7	11	TIFFReadTile ( in , tilebuf , col , row , 0 , 0 ) < 0 && ! ignore
AND	1379:7	1380:10	12	TIFFReadTile ( in , tilebuf , col , row , 0 , 0 ) < 0 && ! ignore
EXPR	1379:7	1379:51	13	TIFFReadTile ( in , tilebuf , col , row , 0 , 0 ) < 0
FUNCTION_CALL	1379:7	1379:47	14	TIFFReadTile ( in , tilebuf , col , row , 0 , 0 )
CALLEE	1379:7	1379:7	15	TIFFReadTile
LEAF_NODE	1379:7	1379:7	16	TIFFReadTile
LEAF_NODE	1379:19	1379:19	15	(
ARGUMENT	1379:20	1379:20	15	in
FIELD	1379:20	1379:20	16	in
LEAF_NODE	1379:20	1379:20	17	in
LEAF_NODE	1379:22	1379:22	15	,
ARGUMENT	1379:24	1379:24	15	tilebuf
FIELD	1379:24	1379:24	16	tilebuf
LEAF_NODE	1379:24	1379:24	17	tilebuf
LEAF_NODE	1379:31	1379:31	15	,
ARGUMENT	1379:33	1379:33	15	col
FIELD	1379:33	1379:33	16	col
LEAF_NODE	1379:33	1379:33	17	col
LEAF_NODE	1379:36	1379:36	15	,
ARGUMENT	1379:38	1379:38	15	row
FIELD	1379:38	1379:38	16	row
LEAF_NODE	1379:38	1379:38	17	row
LEAF_NODE	1379:41	1379:41	15	,
ARGUMENT	1379:43	1379:43	15	0
FIELD	1379:43	1379:43	16	0
LEAF_NODE	1379:43	1379:43	17	0
LEAF_NODE	1379:44	1379:44	15	,
ARGUMENT	1379:46	1379:46	15	0
FIELD	1379:46	1379:46	16	0
LEAF_NODE	1379:46	1379:46	17	0
LEAF_NODE	1379:47	1379:47	15	)
REL_OPERATOR	1379:49	1379:49	14	<
LEAF_NODE	1379:49	1379:49	15	<
FIELD	1379:51	1379:51	14	0
LEAF_NODE	1379:51	1379:51	15	0
LEAF_NODE	1380:7	1380:7	13	&&
EXPR	1380:10	1380:10	13	! ignore
UNARY_EXPR	1380:10	1380:11	14	! ignore
UNARY_OPERATOR	1380:10	1380:10	15	!
LEAF_NODE	1380:10	1380:10	16	!
FIELD	1380:11	1380:11	15	ignore
LEAF_NODE	1380:11	1380:11	16	ignore
LEAF_NODE	1380:17	1380:17	10	)
STATEMENTS	1380:19	1387:3	10	
LEAF_NODE	1380:19	1380:19	11	{
STATEMENTS	1381:4	1386:4	11	
EXPR_STATEMENT	1381:4	1384:28	12	TIFFError ( TIFFFileName ( in ) , "Error, can't read tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row ) ;
EXPR	1381:4	1381:4	13	TIFFError ( TIFFFileName ( in ) , "Error, can't read tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row )
FUNCTION_CALL	1381:4	1384:27	14	TIFFError ( TIFFFileName ( in ) , "Error, can't read tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row )
CALLEE	1381:4	1381:4	15	TIFFError
LEAF_NODE	1381:4	1381:4	16	TIFFError
LEAF_NODE	1381:13	1381:13	15	(
ARGUMENT	1381:14	1381:14	15	TIFFFileName ( in )
FUNCTION_CALL	1381:14	1381:29	16	TIFFFileName ( in )
CALLEE	1381:14	1381:14	17	TIFFFileName
LEAF_NODE	1381:14	1381:14	18	TIFFFileName
LEAF_NODE	1381:26	1381:26	17	(
ARGUMENT	1381:27	1381:27	17	in
FIELD	1381:27	1381:27	18	in
LEAF_NODE	1381:27	1381:27	19	in
LEAF_NODE	1381:29	1381:29	17	)
LEAF_NODE	1381:30	1381:30	15	,
ARGUMENT	1382:8	1382:8	15	"Error, can't read tile at %lu %lu"
FIELD	1382:8	1382:8	16	"Error, can't read tile at %lu %lu"
LEAF_NODE	1382:8	1382:8	17	"Error, can't read tile at %lu %lu"
LEAF_NODE	1382:43	1382:43	15	,
ARGUMENT	1383:8	1383:24	15	( unsigned long ) col
LEAF_NODE	1383:8	1383:8	16	(
TYPE_NAME	1383:9	1383:18	16	unsigned long
LEAF_NODE	1383:9	1383:9	17	unsigned
LEAF_NODE	1383:18	1383:18	17	long
LEAF_NODE	1383:22	1383:22	16	)
FIELD	1383:24	1383:24	16	col
LEAF_NODE	1383:24	1383:24	17	col
LEAF_NODE	1383:27	1383:27	15	,
ARGUMENT	1384:8	1384:24	15	( unsigned long ) row
LEAF_NODE	1384:8	1384:8	16	(
TYPE_NAME	1384:9	1384:18	16	unsigned long
LEAF_NODE	1384:9	1384:9	17	unsigned
LEAF_NODE	1384:18	1384:18	17	long
LEAF_NODE	1384:22	1384:22	16	)
FIELD	1384:24	1384:24	16	row
LEAF_NODE	1384:24	1384:24	17	row
LEAF_NODE	1384:27	1384:27	15	)
LEAF_NODE	1384:28	1384:28	13	;
EXPR_STATEMENT	1385:4	1385:14	12	status = 0 ;
EXPR	1385:4	1385:4	13	status = 0
ASSIGN	1385:4	1385:13	14	status = 0
LVAL	1385:4	1385:4	15	status
FIELD	1385:4	1385:4	16	status
LEAF_NODE	1385:4	1385:4	17	status
ASSIGN_OP	1385:11	1385:11	15	=
LEAF_NODE	1385:11	1385:11	16	=
RVAL	1385:13	1385:13	15	0
FIELD	1385:13	1385:13	16	0
LEAF_NODE	1385:13	1385:13	17	0
LEAF_NODE	1385:14	1385:14	13	;
JUMP_STATEMENT	1386:4	1386:13	12	goto done ;
KEYWORD	1386:4	1386:4	13	goto
LEAF_NODE	1386:4	1386:4	14	goto
DESTINATION	1386:9	1386:9	13	done
LEAF_NODE	1386:9	1386:9	14	done
LEAF_NODE	1386:13	1386:13	13	;
LEAF_NODE	1387:3	1387:3	11	}
SELECTION	1388:3	1388:21	9	
KEYWORD	1388:3	1388:3	10	if
LEAF_NODE	1388:3	1388:3	11	if
LEAF_NODE	1388:6	1388:6	10	(
CONDITION	1388:7	1388:7	10	colb > iskew
EXPR	1388:7	1388:14	11	colb > iskew
FIELD	1388:7	1388:7	12	colb
LEAF_NODE	1388:7	1388:7	13	colb
REL_OPERATOR	1388:12	1388:12	12	>
LEAF_NODE	1388:12	1388:12	13	>
FIELD	1388:14	1388:14	12	iskew
LEAF_NODE	1388:14	1388:14	13	iskew
LEAF_NODE	1388:19	1388:19	10	)
STATEMENTS	1388:21	1394:3	10	
LEAF_NODE	1388:21	1388:21	11	{
STATEMENTS	1389:4	1391:4	11	
SIMPLE_DECL	1389:4	1389:32	12	uint32 width ; width = imagew - colb ;
VAR_DECL	1389:4	1389:11	13	uint32 width ; width = imagew - colb
TYPE	1389:4	1389:4	14	uint32
TYPE_NAME	1389:4	1389:4	15	uint32
LEAF_NODE	1389:4	1389:4	16	uint32
NAME	1389:11	1389:11	14	width
LEAF_NODE	1389:11	1389:11	15	width
LEAF_NODE	0:0	0:0	14	;
INIT	1389:11	1389:11	14	width = imagew - colb
ASSIGN	1389:11	1389:19	15	width = imagew - colb
LVAL	1389:11	1389:11	16	width
NAME	1389:11	1389:11	17	width
LEAF_NODE	1389:11	1389:11	18	width
ASSIGN_OP	1389:17	1389:17	16	=
LEAF_NODE	1389:17	1389:17	17	=
RVAL	1389:19	1389:28	16	imagew - colb
FIELD	1389:19	1389:19	17	imagew
LEAF_NODE	1389:19	1389:19	18	imagew
LEAF_NODE	1389:26	1389:26	17	-
FIELD	1389:28	1389:28	17	colb
LEAF_NODE	1389:28	1389:28	18	colb
LEAF_NODE	1389:32	1389:32	13	;
SIMPLE_DECL	1390:4	1390:32	12	uint32 oskew ; oskew = tilew - width ;
VAR_DECL	1390:4	1390:11	13	uint32 oskew ; oskew = tilew - width
TYPE	1390:4	1390:4	14	uint32
TYPE_NAME	1390:4	1390:4	15	uint32
LEAF_NODE	1390:4	1390:4	16	uint32
NAME	1390:11	1390:11	14	oskew
LEAF_NODE	1390:11	1390:11	15	oskew
LEAF_NODE	0:0	0:0	14	;
INIT	1390:11	1390:11	14	oskew = tilew - width
ASSIGN	1390:11	1390:19	15	oskew = tilew - width
LVAL	1390:11	1390:11	16	oskew
NAME	1390:11	1390:11	17	oskew
LEAF_NODE	1390:11	1390:11	18	oskew
ASSIGN_OP	1390:17	1390:17	16	=
LEAF_NODE	1390:17	1390:17	17	=
RVAL	1390:19	1390:27	16	tilew - width
FIELD	1390:19	1390:19	17	tilew
LEAF_NODE	1390:19	1390:19	18	tilew
LEAF_NODE	1390:25	1390:25	17	-
FIELD	1390:27	1390:27	17	width
LEAF_NODE	1390:27	1390:27	18	width
LEAF_NODE	1390:32	1390:32	13	;
EXPR_STATEMENT	1391:4	1393:30	12	cpStripToTile ( bufp + colb , tilebuf , nrow , width , oskew + iskew , oskew ) ;
EXPR	1391:4	1391:4	13	cpStripToTile ( bufp + colb , tilebuf , nrow , width , oskew + iskew , oskew )
FUNCTION_CALL	1391:4	1393:29	14	cpStripToTile ( bufp + colb , tilebuf , nrow , width , oskew + iskew , oskew )
CALLEE	1391:4	1391:4	15	cpStripToTile
LEAF_NODE	1391:4	1391:4	16	cpStripToTile
LEAF_NODE	1391:17	1391:17	15	(
ARGUMENT	1391:18	1391:25	15	bufp + colb
FIELD	1391:18	1391:18	16	bufp
LEAF_NODE	1391:18	1391:18	17	bufp
LEAF_NODE	1391:23	1391:23	16	+
FIELD	1391:25	1391:25	16	colb
LEAF_NODE	1391:25	1391:25	17	colb
LEAF_NODE	1391:29	1391:29	15	,
ARGUMENT	1392:8	1392:8	15	tilebuf
FIELD	1392:8	1392:8	16	tilebuf
LEAF_NODE	1392:8	1392:8	17	tilebuf
LEAF_NODE	1392:15	1392:15	15	,
ARGUMENT	1392:17	1392:17	15	nrow
FIELD	1392:17	1392:17	16	nrow
LEAF_NODE	1392:17	1392:17	17	nrow
LEAF_NODE	1392:21	1392:21	15	,
ARGUMENT	1392:23	1392:23	15	width
FIELD	1392:23	1392:23	16	width
LEAF_NODE	1392:23	1392:23	17	width
LEAF_NODE	1392:28	1392:28	15	,
ARGUMENT	1393:8	1393:16	15	oskew + iskew
FIELD	1393:8	1393:8	16	oskew
LEAF_NODE	1393:8	1393:8	17	oskew
LEAF_NODE	1393:14	1393:14	16	+
FIELD	1393:16	1393:16	16	iskew
LEAF_NODE	1393:16	1393:16	17	iskew
LEAF_NODE	1393:21	1393:21	15	,
ARGUMENT	1393:23	1393:23	15	oskew
FIELD	1393:23	1393:23	16	oskew
LEAF_NODE	1393:23	1393:23	17	oskew
LEAF_NODE	1393:29	1393:29	15	)
LEAF_NODE	1393:30	1393:30	13	;
LEAF_NODE	1394:3	1394:3	11	}
SELECTION	1394:5	1395:4	9	
KEYWORD	1394:5	1394:5	10	else
LEAF_NODE	1394:5	1394:5	11	else
STATEMENTS	1395:4	1395:4	10	
EXPR_STATEMENT	1395:4	1397:17	11	cpStripToTile ( bufp + colb , tilebuf , nrow , tilew , iskew , 0 ) ;
EXPR	1395:4	1395:4	12	cpStripToTile ( bufp + colb , tilebuf , nrow , tilew , iskew , 0 )
FUNCTION_CALL	1395:4	1397:16	13	cpStripToTile ( bufp + colb , tilebuf , nrow , tilew , iskew , 0 )
CALLEE	1395:4	1395:4	14	cpStripToTile
LEAF_NODE	1395:4	1395:4	15	cpStripToTile
LEAF_NODE	1395:17	1395:17	14	(
ARGUMENT	1395:18	1395:25	14	bufp + colb
FIELD	1395:18	1395:18	15	bufp
LEAF_NODE	1395:18	1395:18	16	bufp
LEAF_NODE	1395:23	1395:23	15	+
FIELD	1395:25	1395:25	15	colb
LEAF_NODE	1395:25	1395:25	16	colb
LEAF_NODE	1395:29	1395:29	14	,
ARGUMENT	1396:8	1396:8	14	tilebuf
FIELD	1396:8	1396:8	15	tilebuf
LEAF_NODE	1396:8	1396:8	16	tilebuf
LEAF_NODE	1396:15	1396:15	14	,
ARGUMENT	1396:17	1396:17	14	nrow
FIELD	1396:17	1396:17	15	nrow
LEAF_NODE	1396:17	1396:17	16	nrow
LEAF_NODE	1396:21	1396:21	14	,
ARGUMENT	1396:23	1396:23	14	tilew
FIELD	1396:23	1396:23	15	tilew
LEAF_NODE	1396:23	1396:23	16	tilew
LEAF_NODE	1396:28	1396:28	14	,
ARGUMENT	1397:8	1397:8	14	iskew
FIELD	1397:8	1397:8	15	iskew
LEAF_NODE	1397:8	1397:8	16	iskew
LEAF_NODE	1397:13	1397:13	14	,
ARGUMENT	1397:15	1397:15	14	0
FIELD	1397:15	1397:15	15	0
LEAF_NODE	1397:15	1397:15	16	0
LEAF_NODE	1397:16	1397:16	14	)
LEAF_NODE	1397:17	1397:17	12	;
EXPR_STATEMENT	1398:3	1398:16	9	colb += tilew ;
EXPR	1398:3	1398:3	10	colb += tilew
ASSIGN	1398:3	1398:11	11	colb += tilew
LVAL	1398:3	1398:3	12	colb
FIELD	1398:3	1398:3	13	colb
LEAF_NODE	1398:3	1398:3	14	colb
ASSIGN_OP	1398:8	1398:8	12	+=
LEAF_NODE	1398:8	1398:8	13	+=
RVAL	1398:11	1398:11	12	tilew
FIELD	1398:11	1398:11	13	tilew
LEAF_NODE	1398:11	1398:11	14	tilew
LEAF_NODE	1398:16	1398:16	10	;
LEAF_NODE	1399:2	1399:2	8	}
EXPR_STATEMENT	1400:2	1400:23	6	bufp += imagew * nrow ;
EXPR	1400:2	1400:2	7	bufp += imagew * nrow
ASSIGN	1400:2	1400:10	8	bufp += imagew * nrow
LVAL	1400:2	1400:2	9	bufp
FIELD	1400:2	1400:2	10	bufp
LEAF_NODE	1400:2	1400:2	11	bufp
ASSIGN_OP	1400:7	1400:7	9	+=
LEAF_NODE	1400:7	1400:7	10	+=
RVAL	1400:10	1400:19	9	imagew * nrow
FIELD	1400:10	1400:10	10	imagew
LEAF_NODE	1400:10	1400:10	11	imagew
LEAF_NODE	1400:17	1400:17	10	*
FIELD	1400:19	1400:19	10	nrow
LEAF_NODE	1400:19	1400:19	11	nrow
LEAF_NODE	1400:23	1400:23	7	;
LEAF_NODE	1401:1	1401:1	5	}
LABEL	1402:0	1402:4	3	done :
LEAF_NODE	1402:0	1402:0	4	done
LEAF_NODE	1402:4	1402:4	4	:
EXPR_STATEMENT	1403:1	1403:19	3	_TIFFfree ( tilebuf ) ;
EXPR	1403:1	1403:1	4	_TIFFfree ( tilebuf )
FUNCTION_CALL	1403:1	1403:18	5	_TIFFfree ( tilebuf )
CALLEE	1403:1	1403:1	6	_TIFFfree
LEAF_NODE	1403:1	1403:1	7	_TIFFfree
LEAF_NODE	1403:10	1403:10	6	(
ARGUMENT	1403:11	1403:11	6	tilebuf
FIELD	1403:11	1403:11	7	tilebuf
LEAF_NODE	1403:11	1403:11	8	tilebuf
LEAF_NODE	1403:18	1403:18	6	)
LEAF_NODE	1403:19	1403:19	4	;
JUMP_STATEMENT	1404:1	1404:14	3	return status ;
KEYWORD	1404:1	1404:1	4	return
LEAF_NODE	1404:1	1404:1	5	return
DESTINATION	1404:8	1404:8	4	status
EXPR	1404:8	1404:8	5	status
FIELD	1404:8	1404:8	6	status
LEAF_NODE	1404:8	1404:8	7	status
LEAF_NODE	1404:14	1404:14	4	;
LEAF_NODE	1405:0	1405:0	2	}
FUNCTION_DEF	0:0	1495:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1407:0	1407:0	2	DECLAREreadFunc
LEAF_NODE	1407:0	1407:0	3	DECLAREreadFunc
PARAMETER_LIST	1407:15	1407:43	2	( readSeparateTilesIntoBuffer )
LEAF_NODE	1407:15	1407:15	3	(
PARAMETER_DECL	1407:16	1407:16	3	readSeparateTilesIntoBuffer
LEAF_NODE	1407:16	1407:16	4	readSeparateTilesIntoBuffer
LEAF_NODE	1407:43	1407:43	3	)
LEAF_NODE	1408:0	1408:0	2	{
STATEMENTS	1409:1	1494:1	2	
SIMPLE_DECL	1409:1	1409:15	3	int status ; status = 1 ;
VAR_DECL	1409:1	1409:5	4	int status ; status = 1
TYPE	1409:1	1409:1	5	int
TYPE_NAME	1409:1	1409:1	6	int
LEAF_NODE	1409:1	1409:1	7	int
NAME	1409:5	1409:5	5	status
LEAF_NODE	1409:5	1409:5	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	1409:5	1409:5	5	status = 1
ASSIGN	1409:5	1409:14	6	status = 1
LVAL	1409:5	1409:5	7	status
NAME	1409:5	1409:5	8	status
LEAF_NODE	1409:5	1409:5	9	status
ASSIGN_OP	1409:12	1409:12	7	=
LEAF_NODE	1409:12	1409:12	8	=
RVAL	1409:14	1409:14	7	1
FIELD	1409:14	1409:14	8	1
LEAF_NODE	1409:14	1409:14	9	1
LEAF_NODE	1409:15	1409:15	4	;
SIMPLE_DECL	1410:1	1410:43	3	uint32 imagew ; imagew = TIFFRasterScanlineSize ( in ) ;
VAR_DECL	1410:1	1410:8	4	uint32 imagew ; imagew = TIFFRasterScanlineSize ( in )
TYPE	1410:1	1410:1	5	uint32
TYPE_NAME	1410:1	1410:1	6	uint32
LEAF_NODE	1410:1	1410:1	7	uint32
NAME	1410:8	1410:8	5	imagew
LEAF_NODE	1410:8	1410:8	6	imagew
LEAF_NODE	0:0	0:0	5	;
INIT	1410:8	1410:8	5	imagew = TIFFRasterScanlineSize ( in )
ASSIGN	1410:8	1410:17	6	imagew = TIFFRasterScanlineSize ( in )
LVAL	1410:8	1410:8	7	imagew
NAME	1410:8	1410:8	8	imagew
LEAF_NODE	1410:8	1410:8	9	imagew
ASSIGN_OP	1410:15	1410:15	7	=
LEAF_NODE	1410:15	1410:15	8	=
RVAL	1410:17	1410:17	7	TIFFRasterScanlineSize ( in )
FUNCTION_CALL	1410:17	1410:42	8	TIFFRasterScanlineSize ( in )
CALLEE	1410:17	1410:17	9	TIFFRasterScanlineSize
LEAF_NODE	1410:17	1410:17	10	TIFFRasterScanlineSize
LEAF_NODE	1410:39	1410:39	9	(
ARGUMENT	1410:40	1410:40	9	in
FIELD	1410:40	1410:40	10	in
LEAF_NODE	1410:40	1410:40	11	in
LEAF_NODE	1410:42	1410:42	9	)
LEAF_NODE	1410:43	1410:43	4	;
SIMPLE_DECL	1411:1	1411:35	3	uint32 tilew ; tilew = TIFFTileRowSize ( in ) ;
VAR_DECL	1411:1	1411:8	4	uint32 tilew ; tilew = TIFFTileRowSize ( in )
TYPE	1411:1	1411:1	5	uint32
TYPE_NAME	1411:1	1411:1	6	uint32
LEAF_NODE	1411:1	1411:1	7	uint32
NAME	1411:8	1411:8	5	tilew
LEAF_NODE	1411:8	1411:8	6	tilew
LEAF_NODE	0:0	0:0	5	;
INIT	1411:8	1411:8	5	tilew = TIFFTileRowSize ( in )
ASSIGN	1411:8	1411:16	6	tilew = TIFFTileRowSize ( in )
LVAL	1411:8	1411:8	7	tilew
NAME	1411:8	1411:8	8	tilew
LEAF_NODE	1411:8	1411:8	9	tilew
ASSIGN_OP	1411:14	1411:14	7	=
LEAF_NODE	1411:14	1411:14	8	=
RVAL	1411:16	1411:16	7	TIFFTileRowSize ( in )
FUNCTION_CALL	1411:16	1411:34	8	TIFFTileRowSize ( in )
CALLEE	1411:16	1411:16	9	TIFFTileRowSize
LEAF_NODE	1411:16	1411:16	10	TIFFTileRowSize
LEAF_NODE	1411:31	1411:31	9	(
ARGUMENT	1411:32	1411:32	9	in
FIELD	1411:32	1411:32	10	in
LEAF_NODE	1411:32	1411:32	11	in
LEAF_NODE	1411:34	1411:34	9	)
LEAF_NODE	1411:35	1411:35	4	;
SIMPLE_DECL	1412:1	1412:10	3	int iskew ;
VAR_DECL	1412:1	1412:5	4	int iskew
TYPE	1412:1	1412:1	5	int
TYPE_NAME	1412:1	1412:1	6	int
LEAF_NODE	1412:1	1412:1	7	int
NAME	1412:5	1412:5	5	iskew
LEAF_NODE	1412:5	1412:5	6	iskew
LEAF_NODE	1412:10	1412:10	4	;
SIMPLE_DECL	1413:1	1413:36	3	tsize_t tilesize ; tilesize = TIFFTileSize ( in ) ;
VAR_DECL	1413:1	1413:9	4	tsize_t tilesize ; tilesize = TIFFTileSize ( in )
TYPE	1413:1	1413:1	5	tsize_t
TYPE_NAME	1413:1	1413:1	6	tsize_t
LEAF_NODE	1413:1	1413:1	7	tsize_t
NAME	1413:9	1413:9	5	tilesize
LEAF_NODE	1413:9	1413:9	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	1413:9	1413:9	5	tilesize = TIFFTileSize ( in )
ASSIGN	1413:9	1413:20	6	tilesize = TIFFTileSize ( in )
LVAL	1413:9	1413:9	7	tilesize
NAME	1413:9	1413:9	8	tilesize
LEAF_NODE	1413:9	1413:9	9	tilesize
ASSIGN_OP	1413:18	1413:18	7	=
LEAF_NODE	1413:18	1413:18	8	=
RVAL	1413:20	1413:20	7	TIFFTileSize ( in )
FUNCTION_CALL	1413:20	1413:35	8	TIFFTileSize ( in )
CALLEE	1413:20	1413:20	9	TIFFTileSize
LEAF_NODE	1413:20	1413:20	10	TIFFTileSize
LEAF_NODE	1413:32	1413:32	9	(
ARGUMENT	1413:33	1413:33	9	in
FIELD	1413:33	1413:33	10	in
LEAF_NODE	1413:33	1413:33	11	in
LEAF_NODE	1413:35	1413:35	9	)
LEAF_NODE	1413:36	1413:36	4	;
SIMPLE_DECL	1414:1	1414:16	3	tdata_t tilebuf ;
VAR_DECL	1414:1	1414:9	4	tdata_t tilebuf
TYPE	1414:1	1414:1	5	tdata_t
TYPE_NAME	1414:1	1414:1	6	tdata_t
LEAF_NODE	1414:1	1414:1	7	tdata_t
NAME	1414:9	1414:9	5	tilebuf
LEAF_NODE	1414:9	1414:9	6	tilebuf
LEAF_NODE	1414:16	1414:16	4	;
SIMPLE_DECL	1415:1	1415:27	3	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	1415:1	1415:8	4	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	1415:1	1415:6	5	uint8 *
TYPE_NAME	1415:1	1415:1	6	uint8
LEAF_NODE	1415:1	1415:1	7	uint8
POINTER	1415:6	1415:6	6	*
LEAF_NODE	1415:6	1415:6	7	*
NAME	1415:8	1415:8	5	bufp
LEAF_NODE	1415:8	1415:8	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	1415:8	1415:8	5	bufp = ( uint8 * ) buf
ASSIGN	1415:8	1415:15	6	bufp = ( uint8 * ) buf
LVAL	1415:8	1415:8	7	bufp
NAME	1415:8	1415:8	8	bufp
LEAF_NODE	1415:8	1415:8	9	bufp
ASSIGN_OP	1415:13	1415:13	7	=
LEAF_NODE	1415:13	1415:13	8	=
RVAL	1415:15	1415:24	7	( uint8 * ) buf
LEAF_NODE	1415:15	1415:15	8	(
TYPE_NAME	1415:16	1415:16	8	uint8
LEAF_NODE	1415:16	1415:16	9	uint8
LEAF_NODE	1415:21	1415:21	8	*
LEAF_NODE	1415:22	1415:22	8	)
FIELD	1415:24	1415:24	8	buf
LEAF_NODE	1415:24	1415:24	9	buf
LEAF_NODE	1415:27	1415:27	4	;
SIMPLE_DECL	1416:1	1416:14	3	uint32 tw , uint32 tl ;
INIT_DECL_LIST	1416:1	1416:1	4	uint32 tw , uint32 tl
VAR_DECL	1416:1	1416:8	5	uint32 tw
TYPE	1416:1	1416:1	6	uint32
TYPE_NAME	1416:1	1416:1	7	uint32
LEAF_NODE	1416:1	1416:1	8	uint32
NAME	1416:8	1416:8	6	tw
LEAF_NODE	1416:8	1416:8	7	tw
LEAF_NODE	1416:10	1416:10	5	,
VAR_DECL	1416:1	1416:12	5	uint32 tl
TYPE	1416:1	1416:1	6	uint32
TYPE_NAME	1416:1	1416:1	7	uint32
LEAF_NODE	1416:1	1416:1	8	uint32
NAME	1416:12	1416:12	6	tl
LEAF_NODE	1416:12	1416:12	7	tl
LEAF_NODE	1416:14	1416:14	4	;
SIMPLE_DECL	1417:1	1417:11	3	uint32 row ;
VAR_DECL	1417:1	1417:8	4	uint32 row
TYPE	1417:1	1417:1	5	uint32
TYPE_NAME	1417:1	1417:1	6	uint32
LEAF_NODE	1417:1	1417:1	7	uint32
NAME	1417:8	1417:8	5	row
LEAF_NODE	1417:8	1417:8	6	row
LEAF_NODE	1417:11	1417:11	4	;
SIMPLE_DECL	1418:1	1418:33	3	uint16 bps ; bps = 0 , uint16 bytes_per_sample ;
INIT_DECL_LIST	1418:1	1418:1	4	uint16 bps ; bps = 0 , uint16 bytes_per_sample
VAR_DECL	1418:1	1418:8	5	uint16 bps ; bps = 0
TYPE	1418:1	1418:1	6	uint16
TYPE_NAME	1418:1	1418:1	7	uint16
LEAF_NODE	1418:1	1418:1	8	uint16
NAME	1418:8	1418:8	6	bps
LEAF_NODE	1418:8	1418:8	7	bps
LEAF_NODE	0:0	0:0	6	;
INIT	1418:8	1418:8	6	bps = 0
ASSIGN	1418:8	1418:14	7	bps = 0
LVAL	1418:8	1418:8	8	bps
NAME	1418:8	1418:8	9	bps
LEAF_NODE	1418:8	1418:8	10	bps
ASSIGN_OP	1418:12	1418:12	8	=
LEAF_NODE	1418:12	1418:12	9	=
RVAL	1418:14	1418:14	8	0
FIELD	1418:14	1418:14	9	0
LEAF_NODE	1418:14	1418:14	10	0
LEAF_NODE	1418:15	1418:15	5	,
VAR_DECL	1418:1	1418:17	5	uint16 bytes_per_sample
TYPE	1418:1	1418:1	6	uint16
TYPE_NAME	1418:1	1418:1	7	uint16
LEAF_NODE	1418:1	1418:1	8	uint16
NAME	1418:17	1418:17	6	bytes_per_sample
LEAF_NODE	1418:17	1418:17	7	bytes_per_sample
LEAF_NODE	1418:33	1418:33	4	;
SELECTION	1420:1	1421:1	3	
KEYWORD	1420:1	1420:1	4	if
LEAF_NODE	1420:1	1420:1	5	if
LEAF_NODE	1420:4	1420:4	4	(
CONDITION	1420:5	1420:5	4	spp > ( INT_MAX / tilew )
EXPR	1420:5	1420:27	5	spp > ( INT_MAX / tilew )
FIELD	1420:5	1420:5	6	spp
LEAF_NODE	1420:5	1420:5	7	spp
REL_OPERATOR	1420:9	1420:9	6	>
LEAF_NODE	1420:9	1420:9	7	>
LEAF_NODE	1420:11	1420:11	6	(
FIELD	1420:12	1420:12	6	INT_MAX
LEAF_NODE	1420:12	1420:12	7	INT_MAX
LEAF_NODE	1420:20	1420:20	6	/
FIELD	1420:22	1420:22	6	tilew
LEAF_NODE	1420:22	1420:22	7	tilew
LEAF_NODE	1420:27	1420:27	6	)
LEAF_NODE	1420:28	1420:28	4	)
STATEMENTS	1421:1	1424:1	4	
LEAF_NODE	1421:1	1421:1	5	{
STATEMENTS	1422:2	1423:2	5	
EXPR_STATEMENT	1422:2	1422:113	6	TIFFError ( TIFFFileName ( in ) , "Error, cannot handle that much samples per tile row (Tile Width * Samples/Pixel)" ) ;
EXPR	1422:2	1422:2	7	TIFFError ( TIFFFileName ( in ) , "Error, cannot handle that much samples per tile row (Tile Width * Samples/Pixel)" )
FUNCTION_CALL	1422:2	1422:112	8	TIFFError ( TIFFFileName ( in ) , "Error, cannot handle that much samples per tile row (Tile Width * Samples/Pixel)" )
CALLEE	1422:2	1422:2	9	TIFFError
LEAF_NODE	1422:2	1422:2	10	TIFFError
LEAF_NODE	1422:11	1422:11	9	(
ARGUMENT	1422:12	1422:12	9	TIFFFileName ( in )
FUNCTION_CALL	1422:12	1422:27	10	TIFFFileName ( in )
CALLEE	1422:12	1422:12	11	TIFFFileName
LEAF_NODE	1422:12	1422:12	12	TIFFFileName
LEAF_NODE	1422:24	1422:24	11	(
ARGUMENT	1422:25	1422:25	11	in
FIELD	1422:25	1422:25	12	in
LEAF_NODE	1422:25	1422:25	13	in
LEAF_NODE	1422:27	1422:27	11	)
LEAF_NODE	1422:28	1422:28	9	,
ARGUMENT	1422:30	1422:30	9	"Error, cannot handle that much samples per tile row (Tile Width * Samples/Pixel)"
FIELD	1422:30	1422:30	10	"Error, cannot handle that much samples per tile row (Tile Width * Samples/Pixel)"
LEAF_NODE	1422:30	1422:30	11	"Error, cannot handle that much samples per tile row (Tile Width * Samples/Pixel)"
LEAF_NODE	1422:112	1422:112	9	)
LEAF_NODE	1422:113	1422:113	7	;
JUMP_STATEMENT	1423:2	1423:10	6	return 0 ;
KEYWORD	1423:2	1423:2	7	return
LEAF_NODE	1423:2	1423:2	8	return
DESTINATION	1423:9	1423:9	7	0
EXPR	1423:9	1423:9	8	0
FIELD	1423:9	1423:9	9	0
LEAF_NODE	1423:9	1423:9	10	0
LEAF_NODE	1423:10	1423:10	7	;
LEAF_NODE	1424:1	1424:1	5	}
EXPR_STATEMENT	1425:1	1425:27	3	iskew = imagew - tilew * spp ;
EXPR	1425:1	1425:1	4	iskew = imagew - tilew * spp
ASSIGN	1425:1	1425:9	5	iskew = imagew - tilew * spp
LVAL	1425:1	1425:1	6	iskew
FIELD	1425:1	1425:1	7	iskew
LEAF_NODE	1425:1	1425:1	8	iskew
ASSIGN_OP	1425:7	1425:7	6	=
LEAF_NODE	1425:7	1425:7	7	=
RVAL	1425:9	1425:24	6	imagew - tilew * spp
FIELD	1425:9	1425:9	7	imagew
LEAF_NODE	1425:9	1425:9	8	imagew
LEAF_NODE	1425:16	1425:16	7	-
FIELD	1425:18	1425:18	7	tilew
LEAF_NODE	1425:18	1425:18	8	tilew
LEAF_NODE	1425:23	1425:23	7	*
FIELD	1425:24	1425:24	7	spp
LEAF_NODE	1425:24	1425:24	8	spp
LEAF_NODE	1425:27	1425:27	4	;
EXPR_STATEMENT	1426:1	1426:32	3	tilebuf = _TIFFmalloc ( tilesize ) ;
EXPR	1426:1	1426:1	4	tilebuf = _TIFFmalloc ( tilesize )
ASSIGN	1426:1	1426:11	5	tilebuf = _TIFFmalloc ( tilesize )
LVAL	1426:1	1426:1	6	tilebuf
FIELD	1426:1	1426:1	7	tilebuf
LEAF_NODE	1426:1	1426:1	8	tilebuf
ASSIGN_OP	1426:9	1426:9	6	=
LEAF_NODE	1426:9	1426:9	7	=
RVAL	1426:11	1426:11	6	_TIFFmalloc ( tilesize )
FUNCTION_CALL	1426:11	1426:31	7	_TIFFmalloc ( tilesize )
CALLEE	1426:11	1426:11	8	_TIFFmalloc
LEAF_NODE	1426:11	1426:11	9	_TIFFmalloc
LEAF_NODE	1426:22	1426:22	8	(
ARGUMENT	1426:23	1426:23	8	tilesize
FIELD	1426:23	1426:23	9	tilesize
LEAF_NODE	1426:23	1426:23	10	tilesize
LEAF_NODE	1426:31	1426:31	8	)
LEAF_NODE	1426:32	1426:32	4	;
SELECTION	1427:1	1428:2	3	
KEYWORD	1427:1	1427:1	4	if
LEAF_NODE	1427:1	1427:1	5	if
LEAF_NODE	1427:4	1427:4	4	(
CONDITION	1427:5	1427:5	4	tilebuf == 0
EXPR	1427:5	1427:16	5	tilebuf == 0
FIELD	1427:5	1427:5	6	tilebuf
LEAF_NODE	1427:5	1427:5	7	tilebuf
EQ_OPERATOR	1427:13	1427:13	6	==
LEAF_NODE	1427:13	1427:13	7	==
FIELD	1427:16	1427:16	6	0
LEAF_NODE	1427:16	1427:16	7	0
LEAF_NODE	1427:17	1427:17	4	)
STATEMENTS	1428:2	1428:2	4	
JUMP_STATEMENT	1428:2	1428:10	5	return 0 ;
KEYWORD	1428:2	1428:2	6	return
LEAF_NODE	1428:2	1428:2	7	return
DESTINATION	1428:9	1428:9	6	0
EXPR	1428:9	1428:9	7	0
FIELD	1428:9	1428:9	8	0
LEAF_NODE	1428:9	1428:9	9	0
LEAF_NODE	1428:10	1428:10	6	;
EXPR_STATEMENT	1429:1	1429:34	3	_TIFFmemset ( tilebuf , 0 , tilesize ) ;
EXPR	1429:1	1429:1	4	_TIFFmemset ( tilebuf , 0 , tilesize )
FUNCTION_CALL	1429:1	1429:33	5	_TIFFmemset ( tilebuf , 0 , tilesize )
CALLEE	1429:1	1429:1	6	_TIFFmemset
LEAF_NODE	1429:1	1429:1	7	_TIFFmemset
LEAF_NODE	1429:12	1429:12	6	(
ARGUMENT	1429:13	1429:13	6	tilebuf
FIELD	1429:13	1429:13	7	tilebuf
LEAF_NODE	1429:13	1429:13	8	tilebuf
LEAF_NODE	1429:20	1429:20	6	,
ARGUMENT	1429:22	1429:22	6	0
FIELD	1429:22	1429:22	7	0
LEAF_NODE	1429:22	1429:22	8	0
LEAF_NODE	1429:23	1429:23	6	,
ARGUMENT	1429:25	1429:25	6	tilesize
FIELD	1429:25	1429:25	7	tilesize
LEAF_NODE	1429:25	1429:25	8	tilesize
LEAF_NODE	1429:33	1429:33	6	)
LEAF_NODE	1429:34	1429:34	4	;
EXPR_STATEMENT	1430:1	1430:48	3	( void ) TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	1430:1	1430:8	4	( void ) TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
LEAF_NODE	1430:1	1430:1	5	(
TYPE_NAME	1430:2	1430:2	5	void
LEAF_NODE	1430:2	1430:2	6	void
LEAF_NODE	1430:6	1430:6	5	)
FUNCTION_CALL	1430:8	1430:47	5	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1430:8	1430:8	6	TIFFGetField
LEAF_NODE	1430:8	1430:8	7	TIFFGetField
LEAF_NODE	1430:20	1430:20	6	(
ARGUMENT	1430:21	1430:21	6	in
FIELD	1430:21	1430:21	7	in
LEAF_NODE	1430:21	1430:21	8	in
LEAF_NODE	1430:23	1430:23	6	,
ARGUMENT	1430:25	1430:25	6	TIFFTAG_TILEWIDTH
FIELD	1430:25	1430:25	7	TIFFTAG_TILEWIDTH
LEAF_NODE	1430:25	1430:25	8	TIFFTAG_TILEWIDTH
LEAF_NODE	1430:42	1430:42	6	,
ARGUMENT	1430:44	1430:44	6	& tw
UNARY_EXPR	1430:44	1430:45	7	& tw
UNARY_OPERATOR	1430:44	1430:44	8	&
LEAF_NODE	1430:44	1430:44	9	&
FIELD	1430:45	1430:45	8	tw
LEAF_NODE	1430:45	1430:45	9	tw
LEAF_NODE	1430:47	1430:47	6	)
LEAF_NODE	1430:48	1430:48	4	;
EXPR_STATEMENT	1431:1	1431:49	3	( void ) TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl ) ;
EXPR	1431:1	1431:8	4	( void ) TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
LEAF_NODE	1431:1	1431:1	5	(
TYPE_NAME	1431:2	1431:2	5	void
LEAF_NODE	1431:2	1431:2	6	void
LEAF_NODE	1431:6	1431:6	5	)
FUNCTION_CALL	1431:8	1431:48	5	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
CALLEE	1431:8	1431:8	6	TIFFGetField
LEAF_NODE	1431:8	1431:8	7	TIFFGetField
LEAF_NODE	1431:20	1431:20	6	(
ARGUMENT	1431:21	1431:21	6	in
FIELD	1431:21	1431:21	7	in
LEAF_NODE	1431:21	1431:21	8	in
LEAF_NODE	1431:23	1431:23	6	,
ARGUMENT	1431:25	1431:25	6	TIFFTAG_TILELENGTH
FIELD	1431:25	1431:25	7	TIFFTAG_TILELENGTH
LEAF_NODE	1431:25	1431:25	8	TIFFTAG_TILELENGTH
LEAF_NODE	1431:43	1431:43	6	,
ARGUMENT	1431:45	1431:45	6	& tl
UNARY_EXPR	1431:45	1431:46	7	& tl
UNARY_OPERATOR	1431:45	1431:45	8	&
LEAF_NODE	1431:45	1431:45	9	&
FIELD	1431:46	1431:46	8	tl
LEAF_NODE	1431:46	1431:46	9	tl
LEAF_NODE	1431:48	1431:48	6	)
LEAF_NODE	1431:49	1431:49	4	;
EXPR_STATEMENT	1432:1	1432:53	3	( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	1432:1	1432:8	4	( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps )
LEAF_NODE	1432:1	1432:1	5	(
TYPE_NAME	1432:2	1432:2	5	void
LEAF_NODE	1432:2	1432:2	6	void
LEAF_NODE	1432:6	1432:6	5	)
FUNCTION_CALL	1432:8	1432:52	5	TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	1432:8	1432:8	6	TIFFGetField
LEAF_NODE	1432:8	1432:8	7	TIFFGetField
LEAF_NODE	1432:20	1432:20	6	(
ARGUMENT	1432:21	1432:21	6	in
FIELD	1432:21	1432:21	7	in
LEAF_NODE	1432:21	1432:21	8	in
LEAF_NODE	1432:23	1432:23	6	,
ARGUMENT	1432:25	1432:25	6	TIFFTAG_BITSPERSAMPLE
FIELD	1432:25	1432:25	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1432:25	1432:25	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1432:46	1432:46	6	,
ARGUMENT	1432:48	1432:48	6	& bps
UNARY_EXPR	1432:48	1432:49	7	& bps
UNARY_OPERATOR	1432:48	1432:48	8	&
LEAF_NODE	1432:48	1432:48	9	&
FIELD	1432:49	1432:49	8	bps
LEAF_NODE	1432:49	1432:49	9	bps
LEAF_NODE	1432:52	1432:52	6	)
LEAF_NODE	1432:53	1432:53	4	;
SELECTION	1433:8	1434:8	3	
KEYWORD	1433:8	1433:8	4	if
LEAF_NODE	1433:8	1433:8	5	if
LEAF_NODE	1433:10	1433:10	4	(
CONDITION	1433:12	1433:12	4	bps == 0
EXPR	1433:12	1433:19	5	bps == 0
FIELD	1433:12	1433:12	6	bps
LEAF_NODE	1433:12	1433:12	7	bps
EQ_OPERATOR	1433:16	1433:16	6	==
LEAF_NODE	1433:16	1433:16	7	==
FIELD	1433:19	1433:19	6	0
LEAF_NODE	1433:19	1433:19	7	0
LEAF_NODE	1433:21	1433:21	4	)
STATEMENTS	1434:8	1438:8	4	
LEAF_NODE	1434:8	1434:8	5	{
STATEMENTS	1435:12	1437:12	5	
EXPR_STATEMENT	1435:12	1435:75	6	TIFFError ( TIFFFileName ( in ) , "Error, cannot read BitsPerSample" ) ;
EXPR	1435:12	1435:12	7	TIFFError ( TIFFFileName ( in ) , "Error, cannot read BitsPerSample" )
FUNCTION_CALL	1435:12	1435:74	8	TIFFError ( TIFFFileName ( in ) , "Error, cannot read BitsPerSample" )
CALLEE	1435:12	1435:12	9	TIFFError
LEAF_NODE	1435:12	1435:12	10	TIFFError
LEAF_NODE	1435:21	1435:21	9	(
ARGUMENT	1435:22	1435:22	9	TIFFFileName ( in )
FUNCTION_CALL	1435:22	1435:37	10	TIFFFileName ( in )
CALLEE	1435:22	1435:22	11	TIFFFileName
LEAF_NODE	1435:22	1435:22	12	TIFFFileName
LEAF_NODE	1435:34	1435:34	11	(
ARGUMENT	1435:35	1435:35	11	in
FIELD	1435:35	1435:35	12	in
LEAF_NODE	1435:35	1435:35	13	in
LEAF_NODE	1435:37	1435:37	11	)
LEAF_NODE	1435:38	1435:38	9	,
ARGUMENT	1435:40	1435:40	9	"Error, cannot read BitsPerSample"
FIELD	1435:40	1435:40	10	"Error, cannot read BitsPerSample"
LEAF_NODE	1435:40	1435:40	11	"Error, cannot read BitsPerSample"
LEAF_NODE	1435:74	1435:74	9	)
LEAF_NODE	1435:75	1435:75	7	;
EXPR_STATEMENT	1436:12	1436:22	6	status = 0 ;
EXPR	1436:12	1436:12	7	status = 0
ASSIGN	1436:12	1436:21	8	status = 0
LVAL	1436:12	1436:12	9	status
FIELD	1436:12	1436:12	10	status
LEAF_NODE	1436:12	1436:12	11	status
ASSIGN_OP	1436:19	1436:19	9	=
LEAF_NODE	1436:19	1436:19	10	=
RVAL	1436:21	1436:21	9	0
FIELD	1436:21	1436:21	10	0
LEAF_NODE	1436:21	1436:21	11	0
LEAF_NODE	1436:22	1436:22	7	;
JUMP_STATEMENT	1437:12	1437:21	6	goto done ;
KEYWORD	1437:12	1437:12	7	goto
LEAF_NODE	1437:12	1437:12	8	goto
DESTINATION	1437:17	1437:17	7	done
LEAF_NODE	1437:17	1437:17	8	done
LEAF_NODE	1437:21	1437:21	7	;
LEAF_NODE	1438:8	1438:8	5	}
SELECTION	1439:8	1440:8	3	
KEYWORD	1439:8	1439:8	4	if
LEAF_NODE	1439:8	1439:8	5	if
LEAF_NODE	1439:10	1439:10	4	(
CONDITION	1439:12	1439:12	4	( bps % 8 ) != 0
EXPR	1439:12	1439:25	5	( bps % 8 ) != 0
LEAF_NODE	1439:12	1439:12	6	(
FIELD	1439:13	1439:13	6	bps
LEAF_NODE	1439:13	1439:13	7	bps
LEAF_NODE	1439:17	1439:17	6	%
FIELD	1439:19	1439:19	6	8
LEAF_NODE	1439:19	1439:19	7	8
LEAF_NODE	1439:20	1439:20	6	)
EQ_OPERATOR	1439:22	1439:22	6	!=
LEAF_NODE	1439:22	1439:22	7	!=
FIELD	1439:25	1439:25	6	0
LEAF_NODE	1439:25	1439:25	7	0
LEAF_NODE	1439:27	1439:27	4	)
STATEMENTS	1440:8	1444:8	4	
LEAF_NODE	1440:8	1440:8	5	{
STATEMENTS	1441:12	1443:12	5	
EXPR_STATEMENT	1441:12	1441:105	6	TIFFError ( TIFFFileName ( in ) , "Error, cannot handle BitsPerSample that is not a multiple of 8" ) ;
EXPR	1441:12	1441:12	7	TIFFError ( TIFFFileName ( in ) , "Error, cannot handle BitsPerSample that is not a multiple of 8" )
FUNCTION_CALL	1441:12	1441:104	8	TIFFError ( TIFFFileName ( in ) , "Error, cannot handle BitsPerSample that is not a multiple of 8" )
CALLEE	1441:12	1441:12	9	TIFFError
LEAF_NODE	1441:12	1441:12	10	TIFFError
LEAF_NODE	1441:21	1441:21	9	(
ARGUMENT	1441:22	1441:22	9	TIFFFileName ( in )
FUNCTION_CALL	1441:22	1441:37	10	TIFFFileName ( in )
CALLEE	1441:22	1441:22	11	TIFFFileName
LEAF_NODE	1441:22	1441:22	12	TIFFFileName
LEAF_NODE	1441:34	1441:34	11	(
ARGUMENT	1441:35	1441:35	11	in
FIELD	1441:35	1441:35	12	in
LEAF_NODE	1441:35	1441:35	13	in
LEAF_NODE	1441:37	1441:37	11	)
LEAF_NODE	1441:38	1441:38	9	,
ARGUMENT	1441:40	1441:40	9	"Error, cannot handle BitsPerSample that is not a multiple of 8"
FIELD	1441:40	1441:40	10	"Error, cannot handle BitsPerSample that is not a multiple of 8"
LEAF_NODE	1441:40	1441:40	11	"Error, cannot handle BitsPerSample that is not a multiple of 8"
LEAF_NODE	1441:104	1441:104	9	)
LEAF_NODE	1441:105	1441:105	7	;
EXPR_STATEMENT	1442:12	1442:22	6	status = 0 ;
EXPR	1442:12	1442:12	7	status = 0
ASSIGN	1442:12	1442:21	8	status = 0
LVAL	1442:12	1442:12	9	status
FIELD	1442:12	1442:12	10	status
LEAF_NODE	1442:12	1442:12	11	status
ASSIGN_OP	1442:19	1442:19	9	=
LEAF_NODE	1442:19	1442:19	10	=
RVAL	1442:21	1442:21	9	0
FIELD	1442:21	1442:21	10	0
LEAF_NODE	1442:21	1442:21	11	0
LEAF_NODE	1442:22	1442:22	7	;
JUMP_STATEMENT	1443:12	1443:21	6	goto done ;
KEYWORD	1443:12	1443:12	7	goto
LEAF_NODE	1443:12	1443:12	8	goto
DESTINATION	1443:17	1443:17	7	done
LEAF_NODE	1443:17	1443:17	8	done
LEAF_NODE	1443:21	1443:21	7	;
LEAF_NODE	1444:8	1444:8	5	}
EXPR_STATEMENT	1445:1	1445:25	3	bytes_per_sample = bps / 8 ;
EXPR	1445:1	1445:1	4	bytes_per_sample = bps / 8
ASSIGN	1445:1	1445:20	5	bytes_per_sample = bps / 8
LVAL	1445:1	1445:1	6	bytes_per_sample
FIELD	1445:1	1445:1	7	bytes_per_sample
LEAF_NODE	1445:1	1445:1	8	bytes_per_sample
ASSIGN_OP	1445:18	1445:18	6	=
LEAF_NODE	1445:18	1445:18	7	=
RVAL	1445:20	1445:24	6	bps / 8
FIELD	1445:20	1445:20	7	bps
LEAF_NODE	1445:20	1445:20	8	bps
LEAF_NODE	1445:23	1445:23	7	/
FIELD	1445:24	1445:24	7	8
LEAF_NODE	1445:24	1445:24	8	8
LEAF_NODE	1445:25	1445:25	4	;
ITERATION	1447:1	1447:45	3	
KEYWORD	1447:1	1447:1	4	for
LEAF_NODE	1447:1	1447:1	5	for
LEAF_NODE	1447:5	1447:5	4	(
FOR_INIT	1447:6	1447:13	4	row = 0 ;
EXPR	1447:6	1447:6	5	row = 0
ASSIGN	1447:6	1447:12	6	row = 0
LVAL	1447:6	1447:6	7	row
FIELD	1447:6	1447:6	8	row
LEAF_NODE	1447:6	1447:6	9	row
ASSIGN_OP	1447:10	1447:10	7	=
LEAF_NODE	1447:10	1447:10	8	=
RVAL	1447:12	1447:12	7	0
FIELD	1447:12	1447:12	8	0
LEAF_NODE	1447:12	1447:12	9	0
LEAF_NODE	1447:13	1447:13	5	;
CONDITION	1447:15	1447:15	4	row < imagelength
EXPR	1447:15	1447:21	5	row < imagelength
FIELD	1447:15	1447:15	6	row
LEAF_NODE	1447:15	1447:15	7	row
REL_OPERATOR	1447:19	1447:19	6	<
LEAF_NODE	1447:19	1447:19	7	<
FIELD	1447:21	1447:21	6	imagelength
LEAF_NODE	1447:21	1447:21	7	imagelength
LEAF_NODE	1447:32	1447:32	4	;
FOR_EXPR	1447:34	1447:34	4	row += tl
EXPR	1447:34	1447:34	5	row += tl
ASSIGN	1447:34	1447:41	6	row += tl
LVAL	1447:34	1447:34	7	row
FIELD	1447:34	1447:34	8	row
LEAF_NODE	1447:34	1447:34	9	row
ASSIGN_OP	1447:38	1447:38	7	+=
LEAF_NODE	1447:38	1447:38	8	+=
RVAL	1447:41	1447:41	7	tl
FIELD	1447:41	1447:41	8	tl
LEAF_NODE	1447:41	1447:41	9	tl
LEAF_NODE	1447:43	1447:43	4	)
STATEMENTS	1447:45	1491:1	4	
LEAF_NODE	1447:45	1447:45	5	{
STATEMENTS	1448:2	1490:2	5	
SIMPLE_DECL	1448:2	1448:61	6	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
VAR_DECL	1448:2	1448:9	7	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl
TYPE	1448:2	1448:2	8	uint32
TYPE_NAME	1448:2	1448:2	9	uint32
LEAF_NODE	1448:2	1448:2	10	uint32
NAME	1448:9	1448:9	8	nrow
LEAF_NODE	1448:9	1448:9	9	nrow
LEAF_NODE	0:0	0:0	8	;
INIT	1448:9	1448:9	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	1448:9	1448:16	9	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	1448:9	1448:9	10	nrow
NAME	1448:9	1448:9	11	nrow
LEAF_NODE	1448:9	1448:9	12	nrow
ASSIGN_OP	1448:14	1448:14	10	=
LEAF_NODE	1448:14	1448:14	11	=
RVAL	1448:16	1448:16	10	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	1448:16	1448:59	11	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	1448:16	1448:37	12	( row + tl > imagelength )
LEAF_NODE	1448:16	1448:16	13	(
FIELD	1448:17	1448:17	13	row
LEAF_NODE	1448:17	1448:17	14	row
LEAF_NODE	1448:20	1448:20	13	+
FIELD	1448:21	1448:21	13	tl
LEAF_NODE	1448:21	1448:21	14	tl
REL_OPERATOR	1448:24	1448:24	13	>
LEAF_NODE	1448:24	1448:24	14	>
FIELD	1448:26	1448:26	13	imagelength
LEAF_NODE	1448:26	1448:26	14	imagelength
LEAF_NODE	1448:37	1448:37	13	)
LEAF_NODE	1448:39	1448:39	12	?
EXPR	1448:41	1448:53	12	imagelength - row
FIELD	1448:41	1448:41	13	imagelength
LEAF_NODE	1448:41	1448:41	14	imagelength
LEAF_NODE	1448:52	1448:52	13	-
FIELD	1448:53	1448:53	13	row
LEAF_NODE	1448:53	1448:53	14	row
LEAF_NODE	1448:57	1448:57	12	:
FIELD	1448:59	1448:59	12	tl
LEAF_NODE	1448:59	1448:59	13	tl
LEAF_NODE	1448:61	1448:61	7	;
SIMPLE_DECL	1449:2	1449:17	6	uint32 colb ; colb = 0 ;
VAR_DECL	1449:2	1449:9	7	uint32 colb ; colb = 0
TYPE	1449:2	1449:2	8	uint32
TYPE_NAME	1449:2	1449:2	9	uint32
LEAF_NODE	1449:2	1449:2	10	uint32
NAME	1449:9	1449:9	8	colb
LEAF_NODE	1449:9	1449:9	9	colb
LEAF_NODE	0:0	0:0	8	;
INIT	1449:9	1449:9	8	colb = 0
ASSIGN	1449:9	1449:16	9	colb = 0
LVAL	1449:9	1449:9	10	colb
NAME	1449:9	1449:9	11	colb
LEAF_NODE	1449:9	1449:9	12	colb
ASSIGN_OP	1449:14	1449:14	10	=
LEAF_NODE	1449:14	1449:14	11	=
RVAL	1449:16	1449:16	10	0
FIELD	1449:16	1449:16	11	0
LEAF_NODE	1449:16	1449:16	12	0
LEAF_NODE	1449:17	1449:17	7	;
SIMPLE_DECL	1450:2	1450:12	6	uint32 col ;
VAR_DECL	1450:2	1450:9	7	uint32 col
TYPE	1450:2	1450:2	8	uint32
TYPE_NAME	1450:2	1450:2	9	uint32
LEAF_NODE	1450:2	1450:2	10	uint32
NAME	1450:9	1450:9	8	col
LEAF_NODE	1450:9	1450:9	9	col
LEAF_NODE	1450:12	1450:12	7	;
ITERATION	1452:2	1452:45	6	
KEYWORD	1452:2	1452:2	7	for
LEAF_NODE	1452:2	1452:2	8	for
LEAF_NODE	1452:6	1452:6	7	(
FOR_INIT	1452:7	1452:14	7	col = 0 ;
EXPR	1452:7	1452:7	8	col = 0
ASSIGN	1452:7	1452:13	9	col = 0
LVAL	1452:7	1452:7	10	col
FIELD	1452:7	1452:7	11	col
LEAF_NODE	1452:7	1452:7	12	col
ASSIGN_OP	1452:11	1452:11	10	=
LEAF_NODE	1452:11	1452:11	11	=
RVAL	1452:13	1452:13	10	0
FIELD	1452:13	1452:13	11	0
LEAF_NODE	1452:13	1452:13	12	0
LEAF_NODE	1452:14	1452:14	8	;
CONDITION	1452:16	1452:16	7	col < imagewidth
EXPR	1452:16	1452:22	8	col < imagewidth
FIELD	1452:16	1452:16	9	col
LEAF_NODE	1452:16	1452:16	10	col
REL_OPERATOR	1452:20	1452:20	9	<
LEAF_NODE	1452:20	1452:20	10	<
FIELD	1452:22	1452:22	9	imagewidth
LEAF_NODE	1452:22	1452:22	10	imagewidth
LEAF_NODE	1452:32	1452:32	7	;
FOR_EXPR	1452:34	1452:34	7	col += tw
EXPR	1452:34	1452:34	8	col += tw
ASSIGN	1452:34	1452:41	9	col += tw
LVAL	1452:34	1452:34	10	col
FIELD	1452:34	1452:34	11	col
LEAF_NODE	1452:34	1452:34	12	col
ASSIGN_OP	1452:38	1452:38	10	+=
LEAF_NODE	1452:38	1452:38	11	+=
RVAL	1452:41	1452:41	10	tw
FIELD	1452:41	1452:41	11	tw
LEAF_NODE	1452:41	1452:41	12	tw
LEAF_NODE	1452:43	1452:43	7	)
STATEMENTS	1452:45	1489:2	7	
LEAF_NODE	1452:45	1452:45	8	{
STATEMENTS	1453:3	1488:3	8	
SIMPLE_DECL	1453:3	1453:14	9	tsample_t s ;
VAR_DECL	1453:3	1453:13	10	tsample_t s
TYPE	1453:3	1453:3	11	tsample_t
TYPE_NAME	1453:3	1453:3	12	tsample_t
LEAF_NODE	1453:3	1453:3	13	tsample_t
NAME	1453:13	1453:13	11	s
LEAF_NODE	1453:13	1453:13	12	s
LEAF_NODE	1453:14	1453:14	10	;
ITERATION	1455:3	1455:29	9	
KEYWORD	1455:3	1455:3	10	for
LEAF_NODE	1455:3	1455:3	11	for
LEAF_NODE	1455:7	1455:7	10	(
FOR_INIT	1455:8	1455:13	10	s = 0 ;
EXPR	1455:8	1455:8	11	s = 0
ASSIGN	1455:8	1455:12	12	s = 0
LVAL	1455:8	1455:8	13	s
FIELD	1455:8	1455:8	14	s
LEAF_NODE	1455:8	1455:8	15	s
ASSIGN_OP	1455:10	1455:10	13	=
LEAF_NODE	1455:10	1455:10	14	=
RVAL	1455:12	1455:12	13	0
FIELD	1455:12	1455:12	14	0
LEAF_NODE	1455:12	1455:12	15	0
LEAF_NODE	1455:13	1455:13	11	;
CONDITION	1455:15	1455:15	10	s < spp
EXPR	1455:15	1455:19	11	s < spp
FIELD	1455:15	1455:15	12	s
LEAF_NODE	1455:15	1455:15	13	s
REL_OPERATOR	1455:17	1455:17	12	<
LEAF_NODE	1455:17	1455:17	13	<
FIELD	1455:19	1455:19	12	spp
LEAF_NODE	1455:19	1455:19	13	spp
LEAF_NODE	1455:22	1455:22	10	;
FOR_EXPR	1455:24	1455:24	10	s ++
EXPR	1455:24	1455:24	11	s ++
FIELD	1455:24	1455:25	12	s ++
LEAF_NODE	1455:24	1455:24	13	s
LEAF_NODE	1455:25	1455:25	13	++
LEAF_NODE	1455:27	1455:27	10	)
STATEMENTS	1455:29	1487:3	10	
LEAF_NODE	1455:29	1455:29	11	{
STATEMENTS	1456:4	1481:6	11	
SELECTION	1456:4	1457:20	12	
KEYWORD	1456:4	1456:4	13	if
LEAF_NODE	1456:4	1456:4	14	if
LEAF_NODE	1456:7	1456:7	13	(
CONDITION	1456:8	1456:8	13	TIFFReadTile ( in , tilebuf , col , row , 0 , s ) < 0 && ! ignore
EXPR	1456:8	1456:8	14	TIFFReadTile ( in , tilebuf , col , row , 0 , s ) < 0 && ! ignore
AND	1456:8	1457:11	15	TIFFReadTile ( in , tilebuf , col , row , 0 , s ) < 0 && ! ignore
EXPR	1456:8	1456:52	16	TIFFReadTile ( in , tilebuf , col , row , 0 , s ) < 0
FUNCTION_CALL	1456:8	1456:48	17	TIFFReadTile ( in , tilebuf , col , row , 0 , s )
CALLEE	1456:8	1456:8	18	TIFFReadTile
LEAF_NODE	1456:8	1456:8	19	TIFFReadTile
LEAF_NODE	1456:20	1456:20	18	(
ARGUMENT	1456:21	1456:21	18	in
FIELD	1456:21	1456:21	19	in
LEAF_NODE	1456:21	1456:21	20	in
LEAF_NODE	1456:23	1456:23	18	,
ARGUMENT	1456:25	1456:25	18	tilebuf
FIELD	1456:25	1456:25	19	tilebuf
LEAF_NODE	1456:25	1456:25	20	tilebuf
LEAF_NODE	1456:32	1456:32	18	,
ARGUMENT	1456:34	1456:34	18	col
FIELD	1456:34	1456:34	19	col
LEAF_NODE	1456:34	1456:34	20	col
LEAF_NODE	1456:37	1456:37	18	,
ARGUMENT	1456:39	1456:39	18	row
FIELD	1456:39	1456:39	19	row
LEAF_NODE	1456:39	1456:39	20	row
LEAF_NODE	1456:42	1456:42	18	,
ARGUMENT	1456:44	1456:44	18	0
FIELD	1456:44	1456:44	19	0
LEAF_NODE	1456:44	1456:44	20	0
LEAF_NODE	1456:45	1456:45	18	,
ARGUMENT	1456:47	1456:47	18	s
FIELD	1456:47	1456:47	19	s
LEAF_NODE	1456:47	1456:47	20	s
LEAF_NODE	1456:48	1456:48	18	)
REL_OPERATOR	1456:50	1456:50	17	<
LEAF_NODE	1456:50	1456:50	18	<
FIELD	1456:52	1456:52	17	0
LEAF_NODE	1456:52	1456:52	18	0
LEAF_NODE	1457:8	1457:8	16	&&
EXPR	1457:11	1457:11	16	! ignore
UNARY_EXPR	1457:11	1457:12	17	! ignore
UNARY_OPERATOR	1457:11	1457:11	18	!
LEAF_NODE	1457:11	1457:11	19	!
FIELD	1457:12	1457:12	18	ignore
LEAF_NODE	1457:12	1457:12	19	ignore
LEAF_NODE	1457:18	1457:18	13	)
STATEMENTS	1457:20	1466:4	13	
LEAF_NODE	1457:20	1457:20	14	{
STATEMENTS	1458:5	1465:5	14	
LEAF_NODE	1458:5	1458:5	15	TIFFError
LEAF_NODE	1458:14	1458:14	15	(
LEAF_NODE	1458:15	1458:15	15	TIFFFileName
LEAF_NODE	1458:27	1458:27	15	(
LEAF_NODE	1458:28	1458:28	15	in
LEAF_NODE	1458:30	1458:30	15	)
LEAF_NODE	1458:31	1458:31	15	,
LEAF_NODE	1459:9	1459:9	15	"Error, can't read tile at %lu %lu, "
LEAF_NODE	1460:9	1460:9	15	"sample %lu"
LEAF_NODE	1460:21	1460:21	15	,
LEAF_NODE	1461:9	1461:9	15	(
LEAF_NODE	1461:10	1461:10	15	unsigned
LEAF_NODE	1461:19	1461:19	15	long
LEAF_NODE	1461:23	1461:23	15	)
LEAF_NODE	1461:25	1461:25	15	col
LEAF_NODE	1461:28	1461:28	15	,
LEAF_NODE	1462:9	1462:9	15	(
LEAF_NODE	1462:10	1462:10	15	unsigned
LEAF_NODE	1462:19	1462:19	15	long
LEAF_NODE	1462:23	1462:23	15	)
LEAF_NODE	1462:25	1462:25	15	row
LEAF_NODE	1462:28	1462:28	15	,
LEAF_NODE	1463:9	1463:9	15	(
LEAF_NODE	1463:10	1463:10	15	unsigned
LEAF_NODE	1463:19	1463:19	15	long
LEAF_NODE	1463:23	1463:23	15	)
LEAF_NODE	1463:25	1463:25	15	s
LEAF_NODE	1463:26	1463:26	15	)
LEAF_NODE	1463:27	1463:27	15	;
EXPR_STATEMENT	1464:5	1464:15	15	status = 0 ;
EXPR	1464:5	1464:5	16	status = 0
ASSIGN	1464:5	1464:14	17	status = 0
LVAL	1464:5	1464:5	18	status
FIELD	1464:5	1464:5	19	status
LEAF_NODE	1464:5	1464:5	20	status
ASSIGN_OP	1464:12	1464:12	18	=
LEAF_NODE	1464:12	1464:12	19	=
RVAL	1464:14	1464:14	18	0
FIELD	1464:14	1464:14	19	0
LEAF_NODE	1464:14	1464:14	20	0
LEAF_NODE	1464:15	1464:15	16	;
JUMP_STATEMENT	1465:5	1465:14	15	goto done ;
KEYWORD	1465:5	1465:5	16	goto
LEAF_NODE	1465:5	1465:5	17	goto
DESTINATION	1465:10	1465:10	16	done
LEAF_NODE	1465:10	1465:10	17	done
LEAF_NODE	1465:14	1465:14	16	;
LEAF_NODE	1466:4	1466:4	14	}
SELECTION	1471:4	1471:35	12	
KEYWORD	1471:4	1471:4	13	if
LEAF_NODE	1471:4	1471:4	14	if
LEAF_NODE	1471:7	1471:7	13	(
CONDITION	1471:8	1471:8	13	colb + tilew * spp > imagew
EXPR	1471:8	1471:27	14	colb + tilew * spp > imagew
FIELD	1471:8	1471:8	15	colb
LEAF_NODE	1471:8	1471:8	16	colb
LEAF_NODE	1471:13	1471:13	15	+
FIELD	1471:15	1471:15	15	tilew
LEAF_NODE	1471:15	1471:15	16	tilew
LEAF_NODE	1471:20	1471:20	15	*
FIELD	1471:21	1471:21	15	spp
LEAF_NODE	1471:21	1471:21	16	spp
REL_OPERATOR	1471:25	1471:25	15	>
LEAF_NODE	1471:25	1471:25	16	>
FIELD	1471:27	1471:27	15	imagew
LEAF_NODE	1471:27	1471:27	16	imagew
LEAF_NODE	1471:33	1471:33	13	)
STATEMENTS	1471:35	1481:4	13	
LEAF_NODE	1471:35	1471:35	14	{
STATEMENTS	1472:5	1474:5	14	
SIMPLE_DECL	1472:5	1472:33	15	uint32 width ; width = imagew - colb ;
VAR_DECL	1472:5	1472:12	16	uint32 width ; width = imagew - colb
TYPE	1472:5	1472:5	17	uint32
TYPE_NAME	1472:5	1472:5	18	uint32
LEAF_NODE	1472:5	1472:5	19	uint32
NAME	1472:12	1472:12	17	width
LEAF_NODE	1472:12	1472:12	18	width
LEAF_NODE	0:0	0:0	17	;
INIT	1472:12	1472:12	17	width = imagew - colb
ASSIGN	1472:12	1472:20	18	width = imagew - colb
LVAL	1472:12	1472:12	19	width
NAME	1472:12	1472:12	20	width
LEAF_NODE	1472:12	1472:12	21	width
ASSIGN_OP	1472:18	1472:18	19	=
LEAF_NODE	1472:18	1472:18	20	=
RVAL	1472:20	1472:29	19	imagew - colb
FIELD	1472:20	1472:20	20	imagew
LEAF_NODE	1472:20	1472:20	21	imagew
LEAF_NODE	1472:27	1472:27	20	-
FIELD	1472:29	1472:29	20	colb
LEAF_NODE	1472:29	1472:29	21	colb
LEAF_NODE	1472:33	1472:33	16	;
SIMPLE_DECL	1473:5	1473:34	15	int oskew ; oskew = tilew * spp - width ;
VAR_DECL	1473:5	1473:9	16	int oskew ; oskew = tilew * spp - width
TYPE	1473:5	1473:5	17	int
TYPE_NAME	1473:5	1473:5	18	int
LEAF_NODE	1473:5	1473:5	19	int
NAME	1473:9	1473:9	17	oskew
LEAF_NODE	1473:9	1473:9	18	oskew
LEAF_NODE	0:0	0:0	17	;
INIT	1473:9	1473:9	17	oskew = tilew * spp - width
ASSIGN	1473:9	1473:17	18	oskew = tilew * spp - width
LVAL	1473:9	1473:9	19	oskew
NAME	1473:9	1473:9	20	oskew
LEAF_NODE	1473:9	1473:9	21	oskew
ASSIGN_OP	1473:15	1473:15	19	=
LEAF_NODE	1473:15	1473:15	20	=
RVAL	1473:17	1473:29	19	tilew * spp - width
FIELD	1473:17	1473:17	20	tilew
LEAF_NODE	1473:17	1473:17	21	tilew
LEAF_NODE	1473:22	1473:22	20	*
FIELD	1473:23	1473:23	20	spp
LEAF_NODE	1473:23	1473:23	21	spp
LEAF_NODE	1473:27	1473:27	20	-
FIELD	1473:29	1473:29	20	width
LEAF_NODE	1473:29	1473:29	21	width
LEAF_NODE	1473:34	1473:34	16	;
EXPR_STATEMENT	1474:5	1480:26	15	cpSeparateBufToContigBuf ( bufp + colb + s * bytes_per_sample , tilebuf , nrow , width / ( spp * bytes_per_sample ) , oskew + iskew , oskew / spp , spp , bytes_per_sample ) ;
EXPR	1474:5	1474:5	16	cpSeparateBufToContigBuf ( bufp + colb + s * bytes_per_sample , tilebuf , nrow , width / ( spp * bytes_per_sample ) , oskew + iskew , oskew / spp , spp , bytes_per_sample )
FUNCTION_CALL	1474:5	1480:25	17	cpSeparateBufToContigBuf ( bufp + colb + s * bytes_per_sample , tilebuf , nrow , width / ( spp * bytes_per_sample ) , oskew + iskew , oskew / spp , spp , bytes_per_sample )
CALLEE	1474:5	1474:5	18	cpSeparateBufToContigBuf
LEAF_NODE	1474:5	1474:5	19	cpSeparateBufToContigBuf
LEAF_NODE	1474:29	1474:29	18	(
ARGUMENT	1475:9	1475:21	18	bufp + colb + s * bytes_per_sample
FIELD	1475:9	1475:9	19	bufp
LEAF_NODE	1475:9	1475:9	20	bufp
LEAF_NODE	1475:13	1475:13	19	+
FIELD	1475:14	1475:14	19	colb
LEAF_NODE	1475:14	1475:14	20	colb
LEAF_NODE	1475:18	1475:18	19	+
FIELD	1475:19	1475:19	19	s
LEAF_NODE	1475:19	1475:19	20	s
LEAF_NODE	1475:20	1475:20	19	*
FIELD	1475:21	1475:21	19	bytes_per_sample
LEAF_NODE	1475:21	1475:21	20	bytes_per_sample
LEAF_NODE	1475:37	1475:37	18	,
ARGUMENT	1476:9	1476:9	18	tilebuf
FIELD	1476:9	1476:9	19	tilebuf
LEAF_NODE	1476:9	1476:9	20	tilebuf
LEAF_NODE	1476:16	1476:16	18	,
ARGUMENT	1476:18	1476:18	18	nrow
FIELD	1476:18	1476:18	19	nrow
LEAF_NODE	1476:18	1476:18	20	nrow
LEAF_NODE	1476:22	1476:22	18	,
ARGUMENT	1477:9	1477:36	18	width / ( spp * bytes_per_sample )
FIELD	1477:9	1477:9	19	width
LEAF_NODE	1477:9	1477:9	20	width
LEAF_NODE	1477:14	1477:14	19	/
LEAF_NODE	1477:15	1477:15	19	(
FIELD	1477:16	1477:16	19	spp
LEAF_NODE	1477:16	1477:16	20	spp
LEAF_NODE	1477:19	1477:19	19	*
FIELD	1477:20	1477:20	19	bytes_per_sample
LEAF_NODE	1477:20	1477:20	20	bytes_per_sample
LEAF_NODE	1477:36	1477:36	19	)
LEAF_NODE	1477:37	1477:37	18	,
ARGUMENT	1478:9	1478:17	18	oskew + iskew
FIELD	1478:9	1478:9	19	oskew
LEAF_NODE	1478:9	1478:9	20	oskew
LEAF_NODE	1478:15	1478:15	19	+
FIELD	1478:17	1478:17	19	iskew
LEAF_NODE	1478:17	1478:17	20	iskew
LEAF_NODE	1478:22	1478:22	18	,
ARGUMENT	1479:9	1479:15	18	oskew / spp
FIELD	1479:9	1479:9	19	oskew
LEAF_NODE	1479:9	1479:9	20	oskew
LEAF_NODE	1479:14	1479:14	19	/
FIELD	1479:15	1479:15	19	spp
LEAF_NODE	1479:15	1479:15	20	spp
LEAF_NODE	1479:18	1479:18	18	,
ARGUMENT	1479:20	1479:20	18	spp
FIELD	1479:20	1479:20	19	spp
LEAF_NODE	1479:20	1479:20	20	spp
LEAF_NODE	1479:23	1479:23	18	,
ARGUMENT	1480:9	1480:9	18	bytes_per_sample
FIELD	1480:9	1480:9	19	bytes_per_sample
LEAF_NODE	1480:9	1480:9	20	bytes_per_sample
LEAF_NODE	1480:25	1480:25	18	)
LEAF_NODE	1480:26	1480:26	16	;
LEAF_NODE	1481:4	1481:4	14	}
SELECTION	1481:6	1482:5	12	
KEYWORD	1481:6	1481:6	13	else
LEAF_NODE	1481:6	1481:6	14	else
STATEMENTS	1482:5	1482:5	13	
EXPR_STATEMENT	1482:5	1486:26	14	cpSeparateBufToContigBuf ( bufp + colb + s * bytes_per_sample , tilebuf , nrow , tw , iskew , 0 , spp , bytes_per_sample ) ;
EXPR	1482:5	1482:5	15	cpSeparateBufToContigBuf ( bufp + colb + s * bytes_per_sample , tilebuf , nrow , tw , iskew , 0 , spp , bytes_per_sample )
FUNCTION_CALL	1482:5	1486:25	16	cpSeparateBufToContigBuf ( bufp + colb + s * bytes_per_sample , tilebuf , nrow , tw , iskew , 0 , spp , bytes_per_sample )
CALLEE	1482:5	1482:5	17	cpSeparateBufToContigBuf
LEAF_NODE	1482:5	1482:5	18	cpSeparateBufToContigBuf
LEAF_NODE	1482:29	1482:29	17	(
ARGUMENT	1483:9	1483:21	17	bufp + colb + s * bytes_per_sample
FIELD	1483:9	1483:9	18	bufp
LEAF_NODE	1483:9	1483:9	19	bufp
LEAF_NODE	1483:13	1483:13	18	+
FIELD	1483:14	1483:14	18	colb
LEAF_NODE	1483:14	1483:14	19	colb
LEAF_NODE	1483:18	1483:18	18	+
FIELD	1483:19	1483:19	18	s
LEAF_NODE	1483:19	1483:19	19	s
LEAF_NODE	1483:20	1483:20	18	*
FIELD	1483:21	1483:21	18	bytes_per_sample
LEAF_NODE	1483:21	1483:21	19	bytes_per_sample
LEAF_NODE	1483:37	1483:37	17	,
ARGUMENT	1484:9	1484:9	17	tilebuf
FIELD	1484:9	1484:9	18	tilebuf
LEAF_NODE	1484:9	1484:9	19	tilebuf
LEAF_NODE	1484:16	1484:16	17	,
ARGUMENT	1484:18	1484:18	17	nrow
FIELD	1484:18	1484:18	18	nrow
LEAF_NODE	1484:18	1484:18	19	nrow
LEAF_NODE	1484:22	1484:22	17	,
ARGUMENT	1484:24	1484:24	17	tw
FIELD	1484:24	1484:24	18	tw
LEAF_NODE	1484:24	1484:24	19	tw
LEAF_NODE	1484:26	1484:26	17	,
ARGUMENT	1485:9	1485:9	17	iskew
FIELD	1485:9	1485:9	18	iskew
LEAF_NODE	1485:9	1485:9	19	iskew
LEAF_NODE	1485:14	1485:14	17	,
ARGUMENT	1485:16	1485:16	17	0
FIELD	1485:16	1485:16	18	0
LEAF_NODE	1485:16	1485:16	19	0
LEAF_NODE	1485:17	1485:17	17	,
ARGUMENT	1485:19	1485:19	17	spp
FIELD	1485:19	1485:19	18	spp
LEAF_NODE	1485:19	1485:19	19	spp
LEAF_NODE	1485:22	1485:22	17	,
ARGUMENT	1486:9	1486:9	17	bytes_per_sample
FIELD	1486:9	1486:9	18	bytes_per_sample
LEAF_NODE	1486:9	1486:9	19	bytes_per_sample
LEAF_NODE	1486:25	1486:25	17	)
LEAF_NODE	1486:26	1486:26	15	;
LEAF_NODE	1487:3	1487:3	11	}
EXPR_STATEMENT	1488:3	1488:20	9	colb += tilew * spp ;
EXPR	1488:3	1488:3	10	colb += tilew * spp
ASSIGN	1488:3	1488:11	11	colb += tilew * spp
LVAL	1488:3	1488:3	12	colb
FIELD	1488:3	1488:3	13	colb
LEAF_NODE	1488:3	1488:3	14	colb
ASSIGN_OP	1488:8	1488:8	12	+=
LEAF_NODE	1488:8	1488:8	13	+=
RVAL	1488:11	1488:17	12	tilew * spp
FIELD	1488:11	1488:11	13	tilew
LEAF_NODE	1488:11	1488:11	14	tilew
LEAF_NODE	1488:16	1488:16	13	*
FIELD	1488:17	1488:17	13	spp
LEAF_NODE	1488:17	1488:17	14	spp
LEAF_NODE	1488:20	1488:20	10	;
LEAF_NODE	1489:2	1489:2	8	}
EXPR_STATEMENT	1490:2	1490:23	6	bufp += imagew * nrow ;
EXPR	1490:2	1490:2	7	bufp += imagew * nrow
ASSIGN	1490:2	1490:10	8	bufp += imagew * nrow
LVAL	1490:2	1490:2	9	bufp
FIELD	1490:2	1490:2	10	bufp
LEAF_NODE	1490:2	1490:2	11	bufp
ASSIGN_OP	1490:7	1490:7	9	+=
LEAF_NODE	1490:7	1490:7	10	+=
RVAL	1490:10	1490:19	9	imagew * nrow
FIELD	1490:10	1490:10	10	imagew
LEAF_NODE	1490:10	1490:10	11	imagew
LEAF_NODE	1490:17	1490:17	10	*
FIELD	1490:19	1490:19	10	nrow
LEAF_NODE	1490:19	1490:19	11	nrow
LEAF_NODE	1490:23	1490:23	7	;
LEAF_NODE	1491:1	1491:1	5	}
LABEL	1492:0	1492:4	3	done :
LEAF_NODE	1492:0	1492:0	4	done
LEAF_NODE	1492:4	1492:4	4	:
EXPR_STATEMENT	1493:1	1493:19	3	_TIFFfree ( tilebuf ) ;
EXPR	1493:1	1493:1	4	_TIFFfree ( tilebuf )
FUNCTION_CALL	1493:1	1493:18	5	_TIFFfree ( tilebuf )
CALLEE	1493:1	1493:1	6	_TIFFfree
LEAF_NODE	1493:1	1493:1	7	_TIFFfree
LEAF_NODE	1493:10	1493:10	6	(
ARGUMENT	1493:11	1493:11	6	tilebuf
FIELD	1493:11	1493:11	7	tilebuf
LEAF_NODE	1493:11	1493:11	8	tilebuf
LEAF_NODE	1493:18	1493:18	6	)
LEAF_NODE	1493:19	1493:19	4	;
JUMP_STATEMENT	1494:1	1494:14	3	return status ;
KEYWORD	1494:1	1494:1	4	return
LEAF_NODE	1494:1	1494:1	5	return
DESTINATION	1494:8	1494:8	4	status
EXPR	1494:8	1494:8	5	status
FIELD	1494:8	1494:8	6	status
LEAF_NODE	1494:8	1494:8	7	status
LEAF_NODE	1494:14	1494:14	4	;
LEAF_NODE	1495:0	1495:0	2	}
FUNCTION_DEF	0:0	1516:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1497:0	1497:0	2	DECLAREwriteFunc
LEAF_NODE	1497:0	1497:0	3	DECLAREwriteFunc
PARAMETER_LIST	1497:16	1497:42	2	( writeBufferToContigStrips )
LEAF_NODE	1497:16	1497:16	3	(
PARAMETER_DECL	1497:17	1497:17	3	writeBufferToContigStrips
LEAF_NODE	1497:17	1497:17	4	writeBufferToContigStrips
LEAF_NODE	1497:42	1497:42	3	)
LEAF_NODE	1498:0	1498:0	2	{
STATEMENTS	1499:1	1515:1	2	
SIMPLE_DECL	1499:1	1499:25	3	uint32 row , uint32 rowsperstrip ;
INIT_DECL_LIST	1499:1	1499:1	4	uint32 row , uint32 rowsperstrip
VAR_DECL	1499:1	1499:8	5	uint32 row
TYPE	1499:1	1499:1	6	uint32
TYPE_NAME	1499:1	1499:1	7	uint32
LEAF_NODE	1499:1	1499:1	8	uint32
NAME	1499:8	1499:8	6	row
LEAF_NODE	1499:8	1499:8	7	row
LEAF_NODE	1499:11	1499:11	5	,
VAR_DECL	1499:1	1499:13	5	uint32 rowsperstrip
TYPE	1499:1	1499:1	6	uint32
TYPE_NAME	1499:1	1499:1	7	uint32
LEAF_NODE	1499:1	1499:1	8	uint32
NAME	1499:13	1499:13	6	rowsperstrip
LEAF_NODE	1499:13	1499:13	7	rowsperstrip
LEAF_NODE	1499:25	1499:25	4	;
SIMPLE_DECL	1500:1	1500:19	3	tstrip_t strip ; strip = 0 ;
VAR_DECL	1500:1	1500:10	4	tstrip_t strip ; strip = 0
TYPE	1500:1	1500:1	5	tstrip_t
TYPE_NAME	1500:1	1500:1	6	tstrip_t
LEAF_NODE	1500:1	1500:1	7	tstrip_t
NAME	1500:10	1500:10	5	strip
LEAF_NODE	1500:10	1500:10	6	strip
LEAF_NODE	0:0	0:0	5	;
INIT	1500:10	1500:10	5	strip = 0
ASSIGN	1500:10	1500:18	6	strip = 0
LVAL	1500:10	1500:10	7	strip
NAME	1500:10	1500:10	8	strip
LEAF_NODE	1500:10	1500:10	9	strip
ASSIGN_OP	1500:16	1500:16	7	=
LEAF_NODE	1500:16	1500:16	8	=
RVAL	1500:18	1500:18	7	0
FIELD	1500:18	1500:18	8	0
LEAF_NODE	1500:18	1500:18	9	0
LEAF_NODE	1500:19	1500:19	4	;
EXPR_STATEMENT	1502:1	1502:18	3	( void ) imagewidth ;
EXPR	1502:1	1502:8	4	( void ) imagewidth
LEAF_NODE	1502:1	1502:1	5	(
TYPE_NAME	1502:2	1502:2	5	void
LEAF_NODE	1502:2	1502:2	6	void
LEAF_NODE	1502:6	1502:6	5	)
FIELD	1502:8	1502:8	5	imagewidth
LEAF_NODE	1502:8	1502:8	6	imagewidth
LEAF_NODE	1502:18	1502:18	4	;
EXPR_STATEMENT	1502:20	1502:30	3	( void ) spp ;
EXPR	1502:20	1502:27	4	( void ) spp
LEAF_NODE	1502:20	1502:20	5	(
TYPE_NAME	1502:21	1502:21	5	void
LEAF_NODE	1502:21	1502:21	6	void
LEAF_NODE	1502:25	1502:25	5	)
FIELD	1502:27	1502:27	5	spp
LEAF_NODE	1502:27	1502:27	6	spp
LEAF_NODE	1502:30	1502:30	4	;
EXPR_STATEMENT	1503:1	1503:71	3	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	1503:1	1503:8	4	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
LEAF_NODE	1503:1	1503:1	5	(
TYPE_NAME	1503:2	1503:2	5	void
LEAF_NODE	1503:2	1503:2	6	void
LEAF_NODE	1503:6	1503:6	5	)
FUNCTION_CALL	1503:8	1503:70	5	TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	1503:8	1503:8	6	TIFFGetFieldDefaulted
LEAF_NODE	1503:8	1503:8	7	TIFFGetFieldDefaulted
LEAF_NODE	1503:29	1503:29	6	(
ARGUMENT	1503:30	1503:30	6	out
FIELD	1503:30	1503:30	7	out
LEAF_NODE	1503:30	1503:30	8	out
LEAF_NODE	1503:33	1503:33	6	,
ARGUMENT	1503:35	1503:35	6	TIFFTAG_ROWSPERSTRIP
FIELD	1503:35	1503:35	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1503:35	1503:35	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1503:55	1503:55	6	,
ARGUMENT	1503:57	1503:57	6	& rowsperstrip
UNARY_EXPR	1503:57	1503:58	7	& rowsperstrip
UNARY_OPERATOR	1503:57	1503:57	8	&
LEAF_NODE	1503:57	1503:57	9	&
FIELD	1503:58	1503:58	8	rowsperstrip
LEAF_NODE	1503:58	1503:58	9	rowsperstrip
LEAF_NODE	1503:70	1503:70	6	)
LEAF_NODE	1503:71	1503:71	4	;
ITERATION	1504:1	1504:55	3	
KEYWORD	1504:1	1504:1	4	for
LEAF_NODE	1504:1	1504:1	5	for
LEAF_NODE	1504:5	1504:5	4	(
FOR_INIT	1504:6	1504:13	4	row = 0 ;
EXPR	1504:6	1504:6	5	row = 0
ASSIGN	1504:6	1504:12	6	row = 0
LVAL	1504:6	1504:6	7	row
FIELD	1504:6	1504:6	8	row
LEAF_NODE	1504:6	1504:6	9	row
ASSIGN_OP	1504:10	1504:10	7	=
LEAF_NODE	1504:10	1504:10	8	=
RVAL	1504:12	1504:12	7	0
FIELD	1504:12	1504:12	8	0
LEAF_NODE	1504:12	1504:12	9	0
LEAF_NODE	1504:13	1504:13	5	;
CONDITION	1504:15	1504:15	4	row < imagelength
EXPR	1504:15	1504:21	5	row < imagelength
FIELD	1504:15	1504:15	6	row
LEAF_NODE	1504:15	1504:15	7	row
REL_OPERATOR	1504:19	1504:19	6	<
LEAF_NODE	1504:19	1504:19	7	<
FIELD	1504:21	1504:21	6	imagelength
LEAF_NODE	1504:21	1504:21	7	imagelength
LEAF_NODE	1504:32	1504:32	4	;
FOR_EXPR	1504:34	1504:34	4	row += rowsperstrip
EXPR	1504:34	1504:34	5	row += rowsperstrip
ASSIGN	1504:34	1504:41	6	row += rowsperstrip
LVAL	1504:34	1504:34	7	row
FIELD	1504:34	1504:34	8	row
LEAF_NODE	1504:34	1504:34	9	row
ASSIGN_OP	1504:38	1504:38	7	+=
LEAF_NODE	1504:38	1504:38	8	+=
RVAL	1504:41	1504:41	7	rowsperstrip
FIELD	1504:41	1504:41	8	rowsperstrip
LEAF_NODE	1504:41	1504:41	9	rowsperstrip
LEAF_NODE	1504:53	1504:53	4	)
STATEMENTS	1504:55	1514:1	4	
LEAF_NODE	1504:55	1504:55	5	{
STATEMENTS	1505:2	1513:2	5	
SIMPLE_DECL	1505:2	1506:36	6	uint32 nrows ; nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip ;
VAR_DECL	1505:2	1505:9	7	uint32 nrows ; nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
TYPE	1505:2	1505:2	8	uint32
TYPE_NAME	1505:2	1505:2	9	uint32
LEAF_NODE	1505:2	1505:2	10	uint32
NAME	1505:9	1505:9	8	nrows
LEAF_NODE	1505:9	1505:9	9	nrows
LEAF_NODE	0:0	0:0	8	;
INIT	1505:9	1505:9	8	nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
ASSIGN	1505:9	1505:17	9	nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
LVAL	1505:9	1505:9	10	nrows
NAME	1505:9	1505:9	11	nrows
LEAF_NODE	1505:9	1505:9	12	nrows
ASSIGN_OP	1505:15	1505:15	10	=
LEAF_NODE	1505:15	1505:15	11	=
RVAL	1505:17	1505:17	10	( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
COND_EXPR	1505:17	1506:24	11	( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
CONDITION	1505:17	1505:48	12	( row + rowsperstrip > imagelength )
LEAF_NODE	1505:17	1505:17	13	(
FIELD	1505:18	1505:18	13	row
LEAF_NODE	1505:18	1505:18	14	row
LEAF_NODE	1505:21	1505:21	13	+
FIELD	1505:22	1505:22	13	rowsperstrip
LEAF_NODE	1505:22	1505:22	14	rowsperstrip
REL_OPERATOR	1505:35	1505:35	13	>
LEAF_NODE	1505:35	1505:35	14	>
FIELD	1505:37	1505:37	13	imagelength
LEAF_NODE	1505:37	1505:37	14	imagelength
LEAF_NODE	1505:48	1505:48	13	)
LEAF_NODE	1505:50	1505:50	12	?
EXPR	1506:6	1506:18	12	imagelength - row
FIELD	1506:6	1506:6	13	imagelength
LEAF_NODE	1506:6	1506:6	14	imagelength
LEAF_NODE	1506:17	1506:17	13	-
FIELD	1506:18	1506:18	13	row
LEAF_NODE	1506:18	1506:18	14	row
LEAF_NODE	1506:22	1506:22	12	:
FIELD	1506:24	1506:24	12	rowsperstrip
LEAF_NODE	1506:24	1506:24	13	rowsperstrip
LEAF_NODE	1506:36	1506:36	7	;
SIMPLE_DECL	1507:2	1507:48	6	tsize_t stripsize ; stripsize = TIFFVStripSize ( out , nrows ) ;
VAR_DECL	1507:2	1507:10	7	tsize_t stripsize ; stripsize = TIFFVStripSize ( out , nrows )
TYPE	1507:2	1507:2	8	tsize_t
TYPE_NAME	1507:2	1507:2	9	tsize_t
LEAF_NODE	1507:2	1507:2	10	tsize_t
NAME	1507:10	1507:10	8	stripsize
LEAF_NODE	1507:10	1507:10	9	stripsize
LEAF_NODE	0:0	0:0	8	;
INIT	1507:10	1507:10	8	stripsize = TIFFVStripSize ( out , nrows )
ASSIGN	1507:10	1507:22	9	stripsize = TIFFVStripSize ( out , nrows )
LVAL	1507:10	1507:10	10	stripsize
NAME	1507:10	1507:10	11	stripsize
LEAF_NODE	1507:10	1507:10	12	stripsize
ASSIGN_OP	1507:20	1507:20	10	=
LEAF_NODE	1507:20	1507:20	11	=
RVAL	1507:22	1507:22	10	TIFFVStripSize ( out , nrows )
FUNCTION_CALL	1507:22	1507:47	11	TIFFVStripSize ( out , nrows )
CALLEE	1507:22	1507:22	12	TIFFVStripSize
LEAF_NODE	1507:22	1507:22	13	TIFFVStripSize
LEAF_NODE	1507:36	1507:36	12	(
ARGUMENT	1507:37	1507:37	12	out
FIELD	1507:37	1507:37	13	out
LEAF_NODE	1507:37	1507:37	14	out
LEAF_NODE	1507:40	1507:40	12	,
ARGUMENT	1507:42	1507:42	12	nrows
FIELD	1507:42	1507:42	13	nrows
LEAF_NODE	1507:42	1507:42	14	nrows
LEAF_NODE	1507:47	1507:47	12	)
LEAF_NODE	1507:48	1507:48	7	;
SELECTION	1508:2	1508:63	6	
KEYWORD	1508:2	1508:2	7	if
LEAF_NODE	1508:2	1508:2	8	if
LEAF_NODE	1508:5	1508:5	7	(
CONDITION	1508:6	1508:6	7	TIFFWriteEncodedStrip ( out , strip ++ , buf , stripsize ) < 0
EXPR	1508:6	1508:60	8	TIFFWriteEncodedStrip ( out , strip ++ , buf , stripsize ) < 0
FUNCTION_CALL	1508:6	1508:56	9	TIFFWriteEncodedStrip ( out , strip ++ , buf , stripsize )
CALLEE	1508:6	1508:6	10	TIFFWriteEncodedStrip
LEAF_NODE	1508:6	1508:6	11	TIFFWriteEncodedStrip
LEAF_NODE	1508:27	1508:27	10	(
ARGUMENT	1508:28	1508:28	10	out
FIELD	1508:28	1508:28	11	out
LEAF_NODE	1508:28	1508:28	12	out
LEAF_NODE	1508:31	1508:31	10	,
ARGUMENT	1508:33	1508:33	10	strip ++
FIELD	1508:33	1508:38	11	strip ++
LEAF_NODE	1508:33	1508:33	12	strip
LEAF_NODE	1508:38	1508:38	12	++
LEAF_NODE	1508:40	1508:40	10	,
ARGUMENT	1508:42	1508:42	10	buf
FIELD	1508:42	1508:42	11	buf
LEAF_NODE	1508:42	1508:42	12	buf
LEAF_NODE	1508:45	1508:45	10	,
ARGUMENT	1508:47	1508:47	10	stripsize
FIELD	1508:47	1508:47	11	stripsize
LEAF_NODE	1508:47	1508:47	12	stripsize
LEAF_NODE	1508:56	1508:56	10	)
REL_OPERATOR	1508:58	1508:58	9	<
LEAF_NODE	1508:58	1508:58	10	<
FIELD	1508:60	1508:60	9	0
LEAF_NODE	1508:60	1508:60	10	0
LEAF_NODE	1508:61	1508:61	7	)
STATEMENTS	1508:63	1512:2	7	
LEAF_NODE	1508:63	1508:63	8	{
STATEMENTS	1509:3	1511:3	8	
EXPR_STATEMENT	1509:3	1510:48	9	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 ) ;
EXPR	1509:3	1509:3	10	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
FUNCTION_CALL	1509:3	1510:47	11	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
CALLEE	1509:3	1509:3	12	TIFFError
LEAF_NODE	1509:3	1509:3	13	TIFFError
LEAF_NODE	1509:12	1509:12	12	(
ARGUMENT	1509:13	1509:13	12	TIFFFileName ( out )
FUNCTION_CALL	1509:13	1509:29	13	TIFFFileName ( out )
CALLEE	1509:13	1509:13	14	TIFFFileName
LEAF_NODE	1509:13	1509:13	15	TIFFFileName
LEAF_NODE	1509:25	1509:25	14	(
ARGUMENT	1509:26	1509:26	14	out
FIELD	1509:26	1509:26	15	out
LEAF_NODE	1509:26	1509:26	16	out
LEAF_NODE	1509:29	1509:29	14	)
LEAF_NODE	1509:30	1509:30	12	,
ARGUMENT	1510:7	1510:7	12	"Error, can't write strip %u"
FIELD	1510:7	1510:7	13	"Error, can't write strip %u"
LEAF_NODE	1510:7	1510:7	14	"Error, can't write strip %u"
LEAF_NODE	1510:36	1510:36	12	,
ARGUMENT	1510:38	1510:46	12	strip - 1
FIELD	1510:38	1510:38	13	strip
LEAF_NODE	1510:38	1510:38	14	strip
LEAF_NODE	1510:44	1510:44	13	-
FIELD	1510:46	1510:46	13	1
LEAF_NODE	1510:46	1510:46	14	1
LEAF_NODE	1510:47	1510:47	12	)
LEAF_NODE	1510:48	1510:48	10	;
JUMP_STATEMENT	1511:3	1511:11	9	return 0 ;
KEYWORD	1511:3	1511:3	10	return
LEAF_NODE	1511:3	1511:3	11	return
DESTINATION	1511:10	1511:10	10	0
EXPR	1511:10	1511:10	11	0
FIELD	1511:10	1511:10	12	0
LEAF_NODE	1511:10	1511:10	13	0
LEAF_NODE	1511:11	1511:11	10	;
LEAF_NODE	1512:2	1512:2	8	}
EXPR_STATEMENT	1513:2	1513:18	6	buf += stripsize ;
EXPR	1513:2	1513:2	7	buf += stripsize
ASSIGN	1513:2	1513:9	8	buf += stripsize
LVAL	1513:2	1513:2	9	buf
FIELD	1513:2	1513:2	10	buf
LEAF_NODE	1513:2	1513:2	11	buf
ASSIGN_OP	1513:6	1513:6	9	+=
LEAF_NODE	1513:6	1513:6	10	+=
RVAL	1513:9	1513:9	9	stripsize
FIELD	1513:9	1513:9	10	stripsize
LEAF_NODE	1513:9	1513:9	11	stripsize
LEAF_NODE	1513:18	1513:18	7	;
LEAF_NODE	1514:1	1514:1	5	}
JUMP_STATEMENT	1515:1	1515:9	3	return 1 ;
KEYWORD	1515:1	1515:1	4	return
LEAF_NODE	1515:1	1515:1	5	return
DESTINATION	1515:8	1515:8	4	1
EXPR	1515:8	1515:8	5	1
FIELD	1515:8	1515:8	6	1
LEAF_NODE	1515:8	1515:8	7	1
LEAF_NODE	1515:9	1515:9	4	;
LEAF_NODE	1516:0	1516:0	2	}
FUNCTION_DEF	0:0	1554:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1518:0	1518:0	2	DECLAREwriteFunc
LEAF_NODE	1518:0	1518:0	3	DECLAREwriteFunc
PARAMETER_LIST	1518:16	1518:44	2	( writeBufferToSeparateStrips )
LEAF_NODE	1518:16	1518:16	3	(
PARAMETER_DECL	1518:17	1518:17	3	writeBufferToSeparateStrips
LEAF_NODE	1518:17	1518:17	4	writeBufferToSeparateStrips
LEAF_NODE	1518:44	1518:44	3	)
LEAF_NODE	1519:0	1519:0	2	{
STATEMENTS	1520:1	1552:1	2	
SIMPLE_DECL	1520:1	1520:34	3	uint32 rowsize ; rowsize = imagewidth * spp ;
VAR_DECL	1520:1	1520:8	4	uint32 rowsize ; rowsize = imagewidth * spp
TYPE	1520:1	1520:1	5	uint32
TYPE_NAME	1520:1	1520:1	6	uint32
LEAF_NODE	1520:1	1520:1	7	uint32
NAME	1520:8	1520:8	5	rowsize
LEAF_NODE	1520:8	1520:8	6	rowsize
LEAF_NODE	0:0	0:0	5	;
INIT	1520:8	1520:8	5	rowsize = imagewidth * spp
ASSIGN	1520:8	1520:18	6	rowsize = imagewidth * spp
LVAL	1520:8	1520:8	7	rowsize
NAME	1520:8	1520:8	8	rowsize
LEAF_NODE	1520:8	1520:8	9	rowsize
ASSIGN_OP	1520:16	1520:16	7	=
LEAF_NODE	1520:16	1520:16	8	=
RVAL	1520:18	1520:31	7	imagewidth * spp
FIELD	1520:18	1520:18	8	imagewidth
LEAF_NODE	1520:18	1520:18	9	imagewidth
LEAF_NODE	1520:29	1520:29	8	*
FIELD	1520:31	1520:31	8	spp
LEAF_NODE	1520:31	1520:31	9	spp
LEAF_NODE	1520:34	1520:34	4	;
SIMPLE_DECL	1521:1	1521:20	3	uint32 rowsperstrip ;
VAR_DECL	1521:1	1521:8	4	uint32 rowsperstrip
TYPE	1521:1	1521:1	5	uint32
TYPE_NAME	1521:1	1521:1	6	uint32
LEAF_NODE	1521:1	1521:1	7	uint32
NAME	1521:8	1521:8	5	rowsperstrip
LEAF_NODE	1521:8	1521:8	6	rowsperstrip
LEAF_NODE	1521:20	1521:20	4	;
SIMPLE_DECL	1522:1	1522:39	3	tsize_t stripsize ; stripsize = TIFFStripSize ( out ) ;
VAR_DECL	1522:1	1522:9	4	tsize_t stripsize ; stripsize = TIFFStripSize ( out )
TYPE	1522:1	1522:1	5	tsize_t
TYPE_NAME	1522:1	1522:1	6	tsize_t
LEAF_NODE	1522:1	1522:1	7	tsize_t
NAME	1522:9	1522:9	5	stripsize
LEAF_NODE	1522:9	1522:9	6	stripsize
LEAF_NODE	0:0	0:0	5	;
INIT	1522:9	1522:9	5	stripsize = TIFFStripSize ( out )
ASSIGN	1522:9	1522:21	6	stripsize = TIFFStripSize ( out )
LVAL	1522:9	1522:9	7	stripsize
NAME	1522:9	1522:9	8	stripsize
LEAF_NODE	1522:9	1522:9	9	stripsize
ASSIGN_OP	1522:19	1522:19	7	=
LEAF_NODE	1522:19	1522:19	8	=
RVAL	1522:21	1522:21	7	TIFFStripSize ( out )
FUNCTION_CALL	1522:21	1522:38	8	TIFFStripSize ( out )
CALLEE	1522:21	1522:21	9	TIFFStripSize
LEAF_NODE	1522:21	1522:21	10	TIFFStripSize
LEAF_NODE	1522:34	1522:34	9	(
ARGUMENT	1522:35	1522:35	9	out
FIELD	1522:35	1522:35	10	out
LEAF_NODE	1522:35	1522:35	11	out
LEAF_NODE	1522:38	1522:38	9	)
LEAF_NODE	1522:39	1522:39	4	;
SIMPLE_DECL	1523:1	1523:13	3	tdata_t obuf ;
VAR_DECL	1523:1	1523:9	4	tdata_t obuf
TYPE	1523:1	1523:1	5	tdata_t
TYPE_NAME	1523:1	1523:1	6	tdata_t
LEAF_NODE	1523:1	1523:1	7	tdata_t
NAME	1523:9	1523:9	5	obuf
LEAF_NODE	1523:9	1523:9	6	obuf
LEAF_NODE	1523:13	1523:13	4	;
SIMPLE_DECL	1524:1	1524:19	3	tstrip_t strip ; strip = 0 ;
VAR_DECL	1524:1	1524:10	4	tstrip_t strip ; strip = 0
TYPE	1524:1	1524:1	5	tstrip_t
TYPE_NAME	1524:1	1524:1	6	tstrip_t
LEAF_NODE	1524:1	1524:1	7	tstrip_t
NAME	1524:10	1524:10	5	strip
LEAF_NODE	1524:10	1524:10	6	strip
LEAF_NODE	0:0	0:0	5	;
INIT	1524:10	1524:10	5	strip = 0
ASSIGN	1524:10	1524:18	6	strip = 0
LVAL	1524:10	1524:10	7	strip
NAME	1524:10	1524:10	8	strip
LEAF_NODE	1524:10	1524:10	9	strip
ASSIGN_OP	1524:16	1524:16	7	=
LEAF_NODE	1524:16	1524:16	8	=
RVAL	1524:18	1524:18	7	0
FIELD	1524:18	1524:18	8	0
LEAF_NODE	1524:18	1524:18	9	0
LEAF_NODE	1524:19	1524:19	4	;
SIMPLE_DECL	1525:1	1525:12	3	tsample_t s ;
VAR_DECL	1525:1	1525:11	4	tsample_t s
TYPE	1525:1	1525:1	5	tsample_t
TYPE_NAME	1525:1	1525:1	6	tsample_t
LEAF_NODE	1525:1	1525:1	7	tsample_t
NAME	1525:11	1525:11	5	s
LEAF_NODE	1525:11	1525:11	6	s
LEAF_NODE	1525:12	1525:12	4	;
EXPR_STATEMENT	1527:1	1527:30	3	obuf = _TIFFmalloc ( stripsize ) ;
EXPR	1527:1	1527:1	4	obuf = _TIFFmalloc ( stripsize )
ASSIGN	1527:1	1527:8	5	obuf = _TIFFmalloc ( stripsize )
LVAL	1527:1	1527:1	6	obuf
FIELD	1527:1	1527:1	7	obuf
LEAF_NODE	1527:1	1527:1	8	obuf
ASSIGN_OP	1527:6	1527:6	6	=
LEAF_NODE	1527:6	1527:6	7	=
RVAL	1527:8	1527:8	6	_TIFFmalloc ( stripsize )
FUNCTION_CALL	1527:8	1527:29	7	_TIFFmalloc ( stripsize )
CALLEE	1527:8	1527:8	8	_TIFFmalloc
LEAF_NODE	1527:8	1527:8	9	_TIFFmalloc
LEAF_NODE	1527:19	1527:19	8	(
ARGUMENT	1527:20	1527:20	8	stripsize
FIELD	1527:20	1527:20	9	stripsize
LEAF_NODE	1527:20	1527:20	10	stripsize
LEAF_NODE	1527:29	1527:29	8	)
LEAF_NODE	1527:30	1527:30	4	;
SELECTION	1528:1	1529:2	3	
KEYWORD	1528:1	1528:1	4	if
LEAF_NODE	1528:1	1528:1	5	if
LEAF_NODE	1528:4	1528:4	4	(
CONDITION	1528:5	1528:5	4	obuf == NULL
EXPR	1528:5	1528:13	5	obuf == NULL
FIELD	1528:5	1528:5	6	obuf
LEAF_NODE	1528:5	1528:5	7	obuf
EQ_OPERATOR	1528:10	1528:10	6	==
LEAF_NODE	1528:10	1528:10	7	==
FIELD	1528:13	1528:13	6	NULL
LEAF_NODE	1528:13	1528:13	7	NULL
LEAF_NODE	1528:17	1528:17	4	)
STATEMENTS	1529:2	1529:2	4	
JUMP_STATEMENT	1529:2	1529:12	5	return ( 0 ) ;
KEYWORD	1529:2	1529:2	6	return
LEAF_NODE	1529:2	1529:2	7	return
DESTINATION	1529:9	1529:9	6	( 0 )
EXPR	1529:9	1529:11	7	( 0 )
LEAF_NODE	1529:9	1529:9	8	(
FIELD	1529:10	1529:10	8	0
LEAF_NODE	1529:10	1529:10	9	0
LEAF_NODE	1529:11	1529:11	8	)
LEAF_NODE	1529:12	1529:12	6	;
EXPR_STATEMENT	1530:1	1530:32	3	_TIFFmemset ( obuf , 0 , stripsize ) ;
EXPR	1530:1	1530:1	4	_TIFFmemset ( obuf , 0 , stripsize )
FUNCTION_CALL	1530:1	1530:31	5	_TIFFmemset ( obuf , 0 , stripsize )
CALLEE	1530:1	1530:1	6	_TIFFmemset
LEAF_NODE	1530:1	1530:1	7	_TIFFmemset
LEAF_NODE	1530:12	1530:12	6	(
ARGUMENT	1530:13	1530:13	6	obuf
FIELD	1530:13	1530:13	7	obuf
LEAF_NODE	1530:13	1530:13	8	obuf
LEAF_NODE	1530:17	1530:17	6	,
ARGUMENT	1530:19	1530:19	6	0
FIELD	1530:19	1530:19	7	0
LEAF_NODE	1530:19	1530:19	8	0
LEAF_NODE	1530:20	1530:20	6	,
ARGUMENT	1530:22	1530:22	6	stripsize
FIELD	1530:22	1530:22	7	stripsize
LEAF_NODE	1530:22	1530:22	8	stripsize
LEAF_NODE	1530:31	1530:31	6	)
LEAF_NODE	1530:32	1530:32	4	;
EXPR_STATEMENT	1531:1	1531:71	3	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ;
EXPR	1531:1	1531:8	4	( void ) TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
LEAF_NODE	1531:1	1531:1	5	(
TYPE_NAME	1531:2	1531:2	5	void
LEAF_NODE	1531:2	1531:2	6	void
LEAF_NODE	1531:6	1531:6	5	)
FUNCTION_CALL	1531:8	1531:70	5	TIFFGetFieldDefaulted ( out , TIFFTAG_ROWSPERSTRIP , & rowsperstrip )
CALLEE	1531:8	1531:8	6	TIFFGetFieldDefaulted
LEAF_NODE	1531:8	1531:8	7	TIFFGetFieldDefaulted
LEAF_NODE	1531:29	1531:29	6	(
ARGUMENT	1531:30	1531:30	6	out
FIELD	1531:30	1531:30	7	out
LEAF_NODE	1531:30	1531:30	8	out
LEAF_NODE	1531:33	1531:33	6	,
ARGUMENT	1531:35	1531:35	6	TIFFTAG_ROWSPERSTRIP
FIELD	1531:35	1531:35	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1531:35	1531:35	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1531:55	1531:55	6	,
ARGUMENT	1531:57	1531:57	6	& rowsperstrip
UNARY_EXPR	1531:57	1531:58	7	& rowsperstrip
UNARY_OPERATOR	1531:57	1531:57	8	&
LEAF_NODE	1531:57	1531:57	9	&
FIELD	1531:58	1531:58	8	rowsperstrip
LEAF_NODE	1531:58	1531:58	9	rowsperstrip
LEAF_NODE	1531:70	1531:70	6	)
LEAF_NODE	1531:71	1531:71	4	;
ITERATION	1532:1	1532:27	3	
KEYWORD	1532:1	1532:1	4	for
LEAF_NODE	1532:1	1532:1	5	for
LEAF_NODE	1532:5	1532:5	4	(
FOR_INIT	1532:6	1532:11	4	s = 0 ;
EXPR	1532:6	1532:6	5	s = 0
ASSIGN	1532:6	1532:10	6	s = 0
LVAL	1532:6	1532:6	7	s
FIELD	1532:6	1532:6	8	s
LEAF_NODE	1532:6	1532:6	9	s
ASSIGN_OP	1532:8	1532:8	7	=
LEAF_NODE	1532:8	1532:8	8	=
RVAL	1532:10	1532:10	7	0
FIELD	1532:10	1532:10	8	0
LEAF_NODE	1532:10	1532:10	9	0
LEAF_NODE	1532:11	1532:11	5	;
CONDITION	1532:13	1532:13	4	s < spp
EXPR	1532:13	1532:17	5	s < spp
FIELD	1532:13	1532:13	6	s
LEAF_NODE	1532:13	1532:13	7	s
REL_OPERATOR	1532:15	1532:15	6	<
LEAF_NODE	1532:15	1532:15	7	<
FIELD	1532:17	1532:17	6	spp
LEAF_NODE	1532:17	1532:17	7	spp
LEAF_NODE	1532:20	1532:20	4	;
FOR_EXPR	1532:22	1532:22	4	s ++
EXPR	1532:22	1532:22	5	s ++
FIELD	1532:22	1532:23	6	s ++
LEAF_NODE	1532:22	1532:22	7	s
LEAF_NODE	1532:23	1532:23	7	++
LEAF_NODE	1532:25	1532:25	4	)
STATEMENTS	1532:27	1550:1	4	
LEAF_NODE	1532:27	1532:27	5	{
STATEMENTS	1533:2	1534:2	5	
SIMPLE_DECL	1533:2	1533:12	6	uint32 row ;
VAR_DECL	1533:2	1533:9	7	uint32 row
TYPE	1533:2	1533:2	8	uint32
TYPE_NAME	1533:2	1533:2	9	uint32
LEAF_NODE	1533:2	1533:2	10	uint32
NAME	1533:9	1533:9	8	row
LEAF_NODE	1533:9	1533:9	9	row
LEAF_NODE	1533:12	1533:12	7	;
ITERATION	1534:2	1534:56	6	
KEYWORD	1534:2	1534:2	7	for
LEAF_NODE	1534:2	1534:2	8	for
LEAF_NODE	1534:6	1534:6	7	(
FOR_INIT	1534:7	1534:14	7	row = 0 ;
EXPR	1534:7	1534:7	8	row = 0
ASSIGN	1534:7	1534:13	9	row = 0
LVAL	1534:7	1534:7	10	row
FIELD	1534:7	1534:7	11	row
LEAF_NODE	1534:7	1534:7	12	row
ASSIGN_OP	1534:11	1534:11	10	=
LEAF_NODE	1534:11	1534:11	11	=
RVAL	1534:13	1534:13	10	0
FIELD	1534:13	1534:13	11	0
LEAF_NODE	1534:13	1534:13	12	0
LEAF_NODE	1534:14	1534:14	8	;
CONDITION	1534:16	1534:16	7	row < imagelength
EXPR	1534:16	1534:22	8	row < imagelength
FIELD	1534:16	1534:16	9	row
LEAF_NODE	1534:16	1534:16	10	row
REL_OPERATOR	1534:20	1534:20	9	<
LEAF_NODE	1534:20	1534:20	10	<
FIELD	1534:22	1534:22	9	imagelength
LEAF_NODE	1534:22	1534:22	10	imagelength
LEAF_NODE	1534:33	1534:33	7	;
FOR_EXPR	1534:35	1534:35	7	row += rowsperstrip
EXPR	1534:35	1534:35	8	row += rowsperstrip
ASSIGN	1534:35	1534:42	9	row += rowsperstrip
LVAL	1534:35	1534:35	10	row
FIELD	1534:35	1534:35	11	row
LEAF_NODE	1534:35	1534:35	12	row
ASSIGN_OP	1534:39	1534:39	10	+=
LEAF_NODE	1534:39	1534:39	11	+=
RVAL	1534:42	1534:42	10	rowsperstrip
FIELD	1534:42	1534:42	11	rowsperstrip
LEAF_NODE	1534:42	1534:42	12	rowsperstrip
LEAF_NODE	1534:54	1534:54	7	)
STATEMENTS	1534:56	1549:2	7	
LEAF_NODE	1534:56	1534:56	8	{
STATEMENTS	1535:3	1542:3	8	
SIMPLE_DECL	1535:3	1536:37	9	uint32 nrows ; nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip ;
VAR_DECL	1535:3	1535:10	10	uint32 nrows ; nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
TYPE	1535:3	1535:3	11	uint32
TYPE_NAME	1535:3	1535:3	12	uint32
LEAF_NODE	1535:3	1535:3	13	uint32
NAME	1535:10	1535:10	11	nrows
LEAF_NODE	1535:10	1535:10	12	nrows
LEAF_NODE	0:0	0:0	11	;
INIT	1535:10	1535:10	11	nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
ASSIGN	1535:10	1535:18	12	nrows = ( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
LVAL	1535:10	1535:10	13	nrows
NAME	1535:10	1535:10	14	nrows
LEAF_NODE	1535:10	1535:10	15	nrows
ASSIGN_OP	1535:16	1535:16	13	=
LEAF_NODE	1535:16	1535:16	14	=
RVAL	1535:18	1535:18	13	( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
COND_EXPR	1535:18	1536:25	14	( row + rowsperstrip > imagelength ) ? imagelength - row : rowsperstrip
CONDITION	1535:18	1535:49	15	( row + rowsperstrip > imagelength )
LEAF_NODE	1535:18	1535:18	16	(
FIELD	1535:19	1535:19	16	row
LEAF_NODE	1535:19	1535:19	17	row
LEAF_NODE	1535:22	1535:22	16	+
FIELD	1535:23	1535:23	16	rowsperstrip
LEAF_NODE	1535:23	1535:23	17	rowsperstrip
REL_OPERATOR	1535:36	1535:36	16	>
LEAF_NODE	1535:36	1535:36	17	>
FIELD	1535:38	1535:38	16	imagelength
LEAF_NODE	1535:38	1535:38	17	imagelength
LEAF_NODE	1535:49	1535:49	16	)
LEAF_NODE	1535:51	1535:51	15	?
EXPR	1536:7	1536:19	15	imagelength - row
FIELD	1536:7	1536:7	16	imagelength
LEAF_NODE	1536:7	1536:7	17	imagelength
LEAF_NODE	1536:18	1536:18	16	-
FIELD	1536:19	1536:19	16	row
LEAF_NODE	1536:19	1536:19	17	row
LEAF_NODE	1536:23	1536:23	15	:
FIELD	1536:25	1536:25	15	rowsperstrip
LEAF_NODE	1536:25	1536:25	16	rowsperstrip
LEAF_NODE	1536:37	1536:37	10	;
SIMPLE_DECL	1537:3	1537:49	9	tsize_t stripsize ; stripsize = TIFFVStripSize ( out , nrows ) ;
VAR_DECL	1537:3	1537:11	10	tsize_t stripsize ; stripsize = TIFFVStripSize ( out , nrows )
TYPE	1537:3	1537:3	11	tsize_t
TYPE_NAME	1537:3	1537:3	12	tsize_t
LEAF_NODE	1537:3	1537:3	13	tsize_t
NAME	1537:11	1537:11	11	stripsize
LEAF_NODE	1537:11	1537:11	12	stripsize
LEAF_NODE	0:0	0:0	11	;
INIT	1537:11	1537:11	11	stripsize = TIFFVStripSize ( out , nrows )
ASSIGN	1537:11	1537:23	12	stripsize = TIFFVStripSize ( out , nrows )
LVAL	1537:11	1537:11	13	stripsize
NAME	1537:11	1537:11	14	stripsize
LEAF_NODE	1537:11	1537:11	15	stripsize
ASSIGN_OP	1537:21	1537:21	13	=
LEAF_NODE	1537:21	1537:21	14	=
RVAL	1537:23	1537:23	13	TIFFVStripSize ( out , nrows )
FUNCTION_CALL	1537:23	1537:48	14	TIFFVStripSize ( out , nrows )
CALLEE	1537:23	1537:23	15	TIFFVStripSize
LEAF_NODE	1537:23	1537:23	16	TIFFVStripSize
LEAF_NODE	1537:37	1537:37	15	(
ARGUMENT	1537:38	1537:38	15	out
FIELD	1537:38	1537:38	16	out
LEAF_NODE	1537:38	1537:38	17	out
LEAF_NODE	1537:41	1537:41	15	,
ARGUMENT	1537:43	1537:43	15	nrows
FIELD	1537:43	1537:43	16	nrows
LEAF_NODE	1537:43	1537:43	17	nrows
LEAF_NODE	1537:48	1537:48	15	)
LEAF_NODE	1537:49	1537:49	10	;
EXPR_STATEMENT	1539:3	1541:39	9	cpContigBufToSeparateBuf ( obuf , ( uint8 * ) buf + row * rowsize + s , nrows , imagewidth , 0 , 0 , spp , 1 ) ;
EXPR	1539:3	1539:3	10	cpContigBufToSeparateBuf ( obuf , ( uint8 * ) buf + row * rowsize + s , nrows , imagewidth , 0 , 0 , spp , 1 )
FUNCTION_CALL	1539:3	1541:38	11	cpContigBufToSeparateBuf ( obuf , ( uint8 * ) buf + row * rowsize + s , nrows , imagewidth , 0 , 0 , spp , 1 )
CALLEE	1539:3	1539:3	12	cpContigBufToSeparateBuf
LEAF_NODE	1539:3	1539:3	13	cpContigBufToSeparateBuf
LEAF_NODE	1539:27	1539:27	12	(
ARGUMENT	1540:7	1540:7	12	obuf
FIELD	1540:7	1540:7	13	obuf
LEAF_NODE	1540:7	1540:7	14	obuf
LEAF_NODE	1540:11	1540:11	12	,
ARGUMENT	1540:13	1540:42	12	( uint8 * ) buf + row * rowsize + s
LEAF_NODE	1540:13	1540:13	13	(
TYPE_NAME	1540:14	1540:14	13	uint8
LEAF_NODE	1540:14	1540:14	14	uint8
LEAF_NODE	1540:19	1540:19	13	*
LEAF_NODE	1540:20	1540:20	13	)
FIELD	1540:22	1540:22	13	buf
LEAF_NODE	1540:22	1540:22	14	buf
LEAF_NODE	1540:26	1540:26	13	+
FIELD	1540:28	1540:28	13	row
LEAF_NODE	1540:28	1540:28	14	row
LEAF_NODE	1540:31	1540:31	13	*
FIELD	1540:32	1540:32	13	rowsize
LEAF_NODE	1540:32	1540:32	14	rowsize
LEAF_NODE	1540:40	1540:40	13	+
FIELD	1540:42	1540:42	13	s
LEAF_NODE	1540:42	1540:42	14	s
LEAF_NODE	1540:43	1540:43	12	,
ARGUMENT	1541:7	1541:7	12	nrows
FIELD	1541:7	1541:7	13	nrows
LEAF_NODE	1541:7	1541:7	14	nrows
LEAF_NODE	1541:12	1541:12	12	,
ARGUMENT	1541:14	1541:14	12	imagewidth
FIELD	1541:14	1541:14	13	imagewidth
LEAF_NODE	1541:14	1541:14	14	imagewidth
LEAF_NODE	1541:24	1541:24	12	,
ARGUMENT	1541:26	1541:26	12	0
FIELD	1541:26	1541:26	13	0
LEAF_NODE	1541:26	1541:26	14	0
LEAF_NODE	1541:27	1541:27	12	,
ARGUMENT	1541:29	1541:29	12	0
FIELD	1541:29	1541:29	13	0
LEAF_NODE	1541:29	1541:29	14	0
LEAF_NODE	1541:30	1541:30	12	,
ARGUMENT	1541:32	1541:32	12	spp
FIELD	1541:32	1541:32	13	spp
LEAF_NODE	1541:32	1541:32	14	spp
LEAF_NODE	1541:35	1541:35	12	,
ARGUMENT	1541:37	1541:37	12	1
FIELD	1541:37	1541:37	13	1
LEAF_NODE	1541:37	1541:37	14	1
LEAF_NODE	1541:38	1541:38	12	)
LEAF_NODE	1541:39	1541:39	10	;
SELECTION	1542:3	1542:65	9	
KEYWORD	1542:3	1542:3	10	if
LEAF_NODE	1542:3	1542:3	11	if
LEAF_NODE	1542:6	1542:6	10	(
CONDITION	1542:7	1542:7	10	TIFFWriteEncodedStrip ( out , strip ++ , obuf , stripsize ) < 0
EXPR	1542:7	1542:62	11	TIFFWriteEncodedStrip ( out , strip ++ , obuf , stripsize ) < 0
FUNCTION_CALL	1542:7	1542:58	12	TIFFWriteEncodedStrip ( out , strip ++ , obuf , stripsize )
CALLEE	1542:7	1542:7	13	TIFFWriteEncodedStrip
LEAF_NODE	1542:7	1542:7	14	TIFFWriteEncodedStrip
LEAF_NODE	1542:28	1542:28	13	(
ARGUMENT	1542:29	1542:29	13	out
FIELD	1542:29	1542:29	14	out
LEAF_NODE	1542:29	1542:29	15	out
LEAF_NODE	1542:32	1542:32	13	,
ARGUMENT	1542:34	1542:34	13	strip ++
FIELD	1542:34	1542:39	14	strip ++
LEAF_NODE	1542:34	1542:34	15	strip
LEAF_NODE	1542:39	1542:39	15	++
LEAF_NODE	1542:41	1542:41	13	,
ARGUMENT	1542:43	1542:43	13	obuf
FIELD	1542:43	1542:43	14	obuf
LEAF_NODE	1542:43	1542:43	15	obuf
LEAF_NODE	1542:47	1542:47	13	,
ARGUMENT	1542:49	1542:49	13	stripsize
FIELD	1542:49	1542:49	14	stripsize
LEAF_NODE	1542:49	1542:49	15	stripsize
LEAF_NODE	1542:58	1542:58	13	)
REL_OPERATOR	1542:60	1542:60	12	<
LEAF_NODE	1542:60	1542:60	13	<
FIELD	1542:62	1542:62	12	0
LEAF_NODE	1542:62	1542:62	13	0
LEAF_NODE	1542:63	1542:63	10	)
STATEMENTS	1542:65	1548:3	10	
LEAF_NODE	1542:65	1542:65	11	{
STATEMENTS	1543:4	1547:4	11	
EXPR_STATEMENT	1543:4	1545:18	12	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 ) ;
EXPR	1543:4	1543:4	13	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
FUNCTION_CALL	1543:4	1545:17	14	TIFFError ( TIFFFileName ( out ) , "Error, can't write strip %u" , strip - 1 )
CALLEE	1543:4	1543:4	15	TIFFError
LEAF_NODE	1543:4	1543:4	16	TIFFError
LEAF_NODE	1543:13	1543:13	15	(
ARGUMENT	1543:14	1543:14	15	TIFFFileName ( out )
FUNCTION_CALL	1543:14	1543:30	16	TIFFFileName ( out )
CALLEE	1543:14	1543:14	17	TIFFFileName
LEAF_NODE	1543:14	1543:14	18	TIFFFileName
LEAF_NODE	1543:26	1543:26	17	(
ARGUMENT	1543:27	1543:27	17	out
FIELD	1543:27	1543:27	18	out
LEAF_NODE	1543:27	1543:27	19	out
LEAF_NODE	1543:30	1543:30	17	)
LEAF_NODE	1543:31	1543:31	15	,
ARGUMENT	1544:8	1544:8	15	"Error, can't write strip %u"
FIELD	1544:8	1544:8	16	"Error, can't write strip %u"
LEAF_NODE	1544:8	1544:8	17	"Error, can't write strip %u"
LEAF_NODE	1544:37	1544:37	15	,
ARGUMENT	1545:8	1545:16	15	strip - 1
FIELD	1545:8	1545:8	16	strip
LEAF_NODE	1545:8	1545:8	17	strip
LEAF_NODE	1545:14	1545:14	16	-
FIELD	1545:16	1545:16	16	1
LEAF_NODE	1545:16	1545:16	17	1
LEAF_NODE	1545:17	1545:17	15	)
LEAF_NODE	1545:18	1545:18	13	;
EXPR_STATEMENT	1546:4	1546:19	12	_TIFFfree ( obuf ) ;
EXPR	1546:4	1546:4	13	_TIFFfree ( obuf )
FUNCTION_CALL	1546:4	1546:18	14	_TIFFfree ( obuf )
CALLEE	1546:4	1546:4	15	_TIFFfree
LEAF_NODE	1546:4	1546:4	16	_TIFFfree
LEAF_NODE	1546:13	1546:13	15	(
ARGUMENT	1546:14	1546:14	15	obuf
FIELD	1546:14	1546:14	16	obuf
LEAF_NODE	1546:14	1546:14	17	obuf
LEAF_NODE	1546:18	1546:18	15	)
LEAF_NODE	1546:19	1546:19	13	;
JUMP_STATEMENT	1547:4	1547:12	12	return 0 ;
KEYWORD	1547:4	1547:4	13	return
LEAF_NODE	1547:4	1547:4	14	return
DESTINATION	1547:11	1547:11	13	0
EXPR	1547:11	1547:11	14	0
FIELD	1547:11	1547:11	15	0
LEAF_NODE	1547:11	1547:11	16	0
LEAF_NODE	1547:12	1547:12	13	;
LEAF_NODE	1548:3	1548:3	11	}
LEAF_NODE	1549:2	1549:2	8	}
LEAF_NODE	1550:1	1550:1	5	}
EXPR_STATEMENT	1551:1	1551:16	3	_TIFFfree ( obuf ) ;
EXPR	1551:1	1551:1	4	_TIFFfree ( obuf )
FUNCTION_CALL	1551:1	1551:15	5	_TIFFfree ( obuf )
CALLEE	1551:1	1551:1	6	_TIFFfree
LEAF_NODE	1551:1	1551:1	7	_TIFFfree
LEAF_NODE	1551:10	1551:10	6	(
ARGUMENT	1551:11	1551:11	6	obuf
FIELD	1551:11	1551:11	7	obuf
LEAF_NODE	1551:11	1551:11	8	obuf
LEAF_NODE	1551:15	1551:15	6	)
LEAF_NODE	1551:16	1551:16	4	;
JUMP_STATEMENT	1552:1	1552:9	3	return 1 ;
KEYWORD	1552:1	1552:1	4	return
LEAF_NODE	1552:1	1552:1	5	return
DESTINATION	1552:8	1552:8	4	1
EXPR	1552:8	1552:8	5	1
FIELD	1552:8	1552:8	6	1
LEAF_NODE	1552:8	1552:8	7	1
LEAF_NODE	1552:9	1552:9	4	;
LEAF_NODE	1554:0	1554:0	2	}
FUNCTION_DEF	0:0	1607:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1556:0	1556:0	2	DECLAREwriteFunc
LEAF_NODE	1556:0	1556:0	3	DECLAREwriteFunc
PARAMETER_LIST	1556:16	1556:41	2	( writeBufferToContigTiles )
LEAF_NODE	1556:16	1556:16	3	(
PARAMETER_DECL	1556:17	1556:17	3	writeBufferToContigTiles
LEAF_NODE	1556:17	1556:17	4	writeBufferToContigTiles
LEAF_NODE	1556:41	1556:41	3	)
LEAF_NODE	1557:0	1557:0	2	{
STATEMENTS	1558:1	1606:1	2	
SIMPLE_DECL	1558:1	1558:38	3	uint32 imagew ; imagew = TIFFScanlineSize ( out ) ;
VAR_DECL	1558:1	1558:8	4	uint32 imagew ; imagew = TIFFScanlineSize ( out )
TYPE	1558:1	1558:1	5	uint32
TYPE_NAME	1558:1	1558:1	6	uint32
LEAF_NODE	1558:1	1558:1	7	uint32
NAME	1558:8	1558:8	5	imagew
LEAF_NODE	1558:8	1558:8	6	imagew
LEAF_NODE	0:0	0:0	5	;
INIT	1558:8	1558:8	5	imagew = TIFFScanlineSize ( out )
ASSIGN	1558:8	1558:17	6	imagew = TIFFScanlineSize ( out )
LVAL	1558:8	1558:8	7	imagew
NAME	1558:8	1558:8	8	imagew
LEAF_NODE	1558:8	1558:8	9	imagew
ASSIGN_OP	1558:15	1558:15	7	=
LEAF_NODE	1558:15	1558:15	8	=
RVAL	1558:17	1558:17	7	TIFFScanlineSize ( out )
FUNCTION_CALL	1558:17	1558:37	8	TIFFScanlineSize ( out )
CALLEE	1558:17	1558:17	9	TIFFScanlineSize
LEAF_NODE	1558:17	1558:17	10	TIFFScanlineSize
LEAF_NODE	1558:33	1558:33	9	(
ARGUMENT	1558:34	1558:34	9	out
FIELD	1558:34	1558:34	10	out
LEAF_NODE	1558:34	1558:34	11	out
LEAF_NODE	1558:37	1558:37	9	)
LEAF_NODE	1558:38	1558:38	4	;
SIMPLE_DECL	1559:1	1559:37	3	uint32 tilew ; tilew = TIFFTileRowSize ( out ) ;
VAR_DECL	1559:1	1559:8	4	uint32 tilew ; tilew = TIFFTileRowSize ( out )
TYPE	1559:1	1559:1	5	uint32
TYPE_NAME	1559:1	1559:1	6	uint32
LEAF_NODE	1559:1	1559:1	7	uint32
NAME	1559:8	1559:8	5	tilew
LEAF_NODE	1559:8	1559:8	6	tilew
LEAF_NODE	0:0	0:0	5	;
INIT	1559:8	1559:8	5	tilew = TIFFTileRowSize ( out )
ASSIGN	1559:8	1559:17	6	tilew = TIFFTileRowSize ( out )
LVAL	1559:8	1559:8	7	tilew
NAME	1559:8	1559:8	8	tilew
LEAF_NODE	1559:8	1559:8	9	tilew
ASSIGN_OP	1559:15	1559:15	7	=
LEAF_NODE	1559:15	1559:15	8	=
RVAL	1559:17	1559:17	7	TIFFTileRowSize ( out )
FUNCTION_CALL	1559:17	1559:36	8	TIFFTileRowSize ( out )
CALLEE	1559:17	1559:17	9	TIFFTileRowSize
LEAF_NODE	1559:17	1559:17	10	TIFFTileRowSize
LEAF_NODE	1559:32	1559:32	9	(
ARGUMENT	1559:33	1559:33	9	out
FIELD	1559:33	1559:33	10	out
LEAF_NODE	1559:33	1559:33	11	out
LEAF_NODE	1559:36	1559:36	9	)
LEAF_NODE	1559:37	1559:37	4	;
SIMPLE_DECL	1560:1	1560:27	3	int iskew ; iskew = imagew - tilew ;
VAR_DECL	1560:1	1560:5	4	int iskew ; iskew = imagew - tilew
TYPE	1560:1	1560:1	5	int
TYPE_NAME	1560:1	1560:1	6	int
LEAF_NODE	1560:1	1560:1	7	int
NAME	1560:5	1560:5	5	iskew
LEAF_NODE	1560:5	1560:5	6	iskew
LEAF_NODE	0:0	0:0	5	;
INIT	1560:5	1560:5	5	iskew = imagew - tilew
ASSIGN	1560:5	1560:13	6	iskew = imagew - tilew
LVAL	1560:5	1560:5	7	iskew
NAME	1560:5	1560:5	8	iskew
LEAF_NODE	1560:5	1560:5	9	iskew
ASSIGN_OP	1560:11	1560:11	7	=
LEAF_NODE	1560:11	1560:11	8	=
RVAL	1560:13	1560:22	7	imagew - tilew
FIELD	1560:13	1560:13	8	imagew
LEAF_NODE	1560:13	1560:13	9	imagew
LEAF_NODE	1560:20	1560:20	8	-
FIELD	1560:22	1560:22	8	tilew
LEAF_NODE	1560:22	1560:22	9	tilew
LEAF_NODE	1560:27	1560:27	4	;
SIMPLE_DECL	1561:1	1561:37	3	tsize_t tilesize ; tilesize = TIFFTileSize ( out ) ;
VAR_DECL	1561:1	1561:9	4	tsize_t tilesize ; tilesize = TIFFTileSize ( out )
TYPE	1561:1	1561:1	5	tsize_t
TYPE_NAME	1561:1	1561:1	6	tsize_t
LEAF_NODE	1561:1	1561:1	7	tsize_t
NAME	1561:9	1561:9	5	tilesize
LEAF_NODE	1561:9	1561:9	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	1561:9	1561:9	5	tilesize = TIFFTileSize ( out )
ASSIGN	1561:9	1561:20	6	tilesize = TIFFTileSize ( out )
LVAL	1561:9	1561:9	7	tilesize
NAME	1561:9	1561:9	8	tilesize
LEAF_NODE	1561:9	1561:9	9	tilesize
ASSIGN_OP	1561:18	1561:18	7	=
LEAF_NODE	1561:18	1561:18	8	=
RVAL	1561:20	1561:20	7	TIFFTileSize ( out )
FUNCTION_CALL	1561:20	1561:36	8	TIFFTileSize ( out )
CALLEE	1561:20	1561:20	9	TIFFTileSize
LEAF_NODE	1561:20	1561:20	10	TIFFTileSize
LEAF_NODE	1561:32	1561:32	9	(
ARGUMENT	1561:33	1561:33	9	out
FIELD	1561:33	1561:33	10	out
LEAF_NODE	1561:33	1561:33	11	out
LEAF_NODE	1561:36	1561:36	9	)
LEAF_NODE	1561:37	1561:37	4	;
SIMPLE_DECL	1562:1	1562:13	3	tdata_t obuf ;
VAR_DECL	1562:1	1562:9	4	tdata_t obuf
TYPE	1562:1	1562:1	5	tdata_t
TYPE_NAME	1562:1	1562:1	6	tdata_t
LEAF_NODE	1562:1	1562:1	7	tdata_t
NAME	1562:9	1562:9	5	obuf
LEAF_NODE	1562:9	1562:9	6	obuf
LEAF_NODE	1562:13	1562:13	4	;
SIMPLE_DECL	1563:1	1563:27	3	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	1563:1	1563:8	4	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	1563:1	1563:6	5	uint8 *
TYPE_NAME	1563:1	1563:1	6	uint8
LEAF_NODE	1563:1	1563:1	7	uint8
POINTER	1563:6	1563:6	6	*
LEAF_NODE	1563:6	1563:6	7	*
NAME	1563:8	1563:8	5	bufp
LEAF_NODE	1563:8	1563:8	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	1563:8	1563:8	5	bufp = ( uint8 * ) buf
ASSIGN	1563:8	1563:15	6	bufp = ( uint8 * ) buf
LVAL	1563:8	1563:8	7	bufp
NAME	1563:8	1563:8	8	bufp
LEAF_NODE	1563:8	1563:8	9	bufp
ASSIGN_OP	1563:13	1563:13	7	=
LEAF_NODE	1563:13	1563:13	8	=
RVAL	1563:15	1563:24	7	( uint8 * ) buf
LEAF_NODE	1563:15	1563:15	8	(
TYPE_NAME	1563:16	1563:16	8	uint8
LEAF_NODE	1563:16	1563:16	9	uint8
LEAF_NODE	1563:21	1563:21	8	*
LEAF_NODE	1563:22	1563:22	8	)
FIELD	1563:24	1563:24	8	buf
LEAF_NODE	1563:24	1563:24	9	buf
LEAF_NODE	1563:27	1563:27	4	;
SIMPLE_DECL	1564:1	1564:14	3	uint32 tl , uint32 tw ;
INIT_DECL_LIST	1564:1	1564:1	4	uint32 tl , uint32 tw
VAR_DECL	1564:1	1564:8	5	uint32 tl
TYPE	1564:1	1564:1	6	uint32
TYPE_NAME	1564:1	1564:1	7	uint32
LEAF_NODE	1564:1	1564:1	8	uint32
NAME	1564:8	1564:8	6	tl
LEAF_NODE	1564:8	1564:8	7	tl
LEAF_NODE	1564:10	1564:10	5	,
VAR_DECL	1564:1	1564:12	5	uint32 tw
TYPE	1564:1	1564:1	6	uint32
TYPE_NAME	1564:1	1564:1	7	uint32
LEAF_NODE	1564:1	1564:1	8	uint32
NAME	1564:12	1564:12	6	tw
LEAF_NODE	1564:12	1564:12	7	tw
LEAF_NODE	1564:14	1564:14	4	;
SIMPLE_DECL	1565:1	1565:11	3	uint32 row ;
VAR_DECL	1565:1	1565:8	4	uint32 row
TYPE	1565:1	1565:1	5	uint32
TYPE_NAME	1565:1	1565:1	6	uint32
LEAF_NODE	1565:1	1565:1	7	uint32
NAME	1565:8	1565:8	5	row
LEAF_NODE	1565:8	1565:8	6	row
LEAF_NODE	1565:11	1565:11	4	;
EXPR_STATEMENT	1567:1	1567:11	3	( void ) spp ;
EXPR	1567:1	1567:8	4	( void ) spp
LEAF_NODE	1567:1	1567:1	5	(
TYPE_NAME	1567:2	1567:2	5	void
LEAF_NODE	1567:2	1567:2	6	void
LEAF_NODE	1567:6	1567:6	5	)
FIELD	1567:8	1567:8	5	spp
LEAF_NODE	1567:8	1567:8	6	spp
LEAF_NODE	1567:11	1567:11	4	;
EXPR_STATEMENT	1569:1	1569:38	3	obuf = _TIFFmalloc ( TIFFTileSize ( out ) ) ;
EXPR	1569:1	1569:1	4	obuf = _TIFFmalloc ( TIFFTileSize ( out ) )
ASSIGN	1569:1	1569:8	5	obuf = _TIFFmalloc ( TIFFTileSize ( out ) )
LVAL	1569:1	1569:1	6	obuf
FIELD	1569:1	1569:1	7	obuf
LEAF_NODE	1569:1	1569:1	8	obuf
ASSIGN_OP	1569:6	1569:6	6	=
LEAF_NODE	1569:6	1569:6	7	=
RVAL	1569:8	1569:8	6	_TIFFmalloc ( TIFFTileSize ( out ) )
FUNCTION_CALL	1569:8	1569:37	7	_TIFFmalloc ( TIFFTileSize ( out ) )
CALLEE	1569:8	1569:8	8	_TIFFmalloc
LEAF_NODE	1569:8	1569:8	9	_TIFFmalloc
LEAF_NODE	1569:19	1569:19	8	(
ARGUMENT	1569:20	1569:20	8	TIFFTileSize ( out )
FUNCTION_CALL	1569:20	1569:36	9	TIFFTileSize ( out )
CALLEE	1569:20	1569:20	10	TIFFTileSize
LEAF_NODE	1569:20	1569:20	11	TIFFTileSize
LEAF_NODE	1569:32	1569:32	10	(
ARGUMENT	1569:33	1569:33	10	out
FIELD	1569:33	1569:33	11	out
LEAF_NODE	1569:33	1569:33	12	out
LEAF_NODE	1569:36	1569:36	10	)
LEAF_NODE	1569:37	1569:37	8	)
LEAF_NODE	1569:38	1569:38	4	;
SELECTION	1570:1	1571:2	3	
KEYWORD	1570:1	1570:1	4	if
LEAF_NODE	1570:1	1570:1	5	if
LEAF_NODE	1570:4	1570:4	4	(
CONDITION	1570:5	1570:5	4	obuf == NULL
EXPR	1570:5	1570:13	5	obuf == NULL
FIELD	1570:5	1570:5	6	obuf
LEAF_NODE	1570:5	1570:5	7	obuf
EQ_OPERATOR	1570:10	1570:10	6	==
LEAF_NODE	1570:10	1570:10	7	==
FIELD	1570:13	1570:13	6	NULL
LEAF_NODE	1570:13	1570:13	7	NULL
LEAF_NODE	1570:17	1570:17	4	)
STATEMENTS	1571:2	1571:2	4	
JUMP_STATEMENT	1571:2	1571:10	5	return 0 ;
KEYWORD	1571:2	1571:2	6	return
LEAF_NODE	1571:2	1571:2	7	return
DESTINATION	1571:9	1571:9	6	0
EXPR	1571:9	1571:9	7	0
FIELD	1571:9	1571:9	8	0
LEAF_NODE	1571:9	1571:9	9	0
LEAF_NODE	1571:10	1571:10	6	;
EXPR_STATEMENT	1572:1	1572:31	3	_TIFFmemset ( obuf , 0 , tilesize ) ;
EXPR	1572:1	1572:1	4	_TIFFmemset ( obuf , 0 , tilesize )
FUNCTION_CALL	1572:1	1572:30	5	_TIFFmemset ( obuf , 0 , tilesize )
CALLEE	1572:1	1572:1	6	_TIFFmemset
LEAF_NODE	1572:1	1572:1	7	_TIFFmemset
LEAF_NODE	1572:12	1572:12	6	(
ARGUMENT	1572:13	1572:13	6	obuf
FIELD	1572:13	1572:13	7	obuf
LEAF_NODE	1572:13	1572:13	8	obuf
LEAF_NODE	1572:17	1572:17	6	,
ARGUMENT	1572:19	1572:19	6	0
FIELD	1572:19	1572:19	7	0
LEAF_NODE	1572:19	1572:19	8	0
LEAF_NODE	1572:20	1572:20	6	,
ARGUMENT	1572:22	1572:22	6	tilesize
FIELD	1572:22	1572:22	7	tilesize
LEAF_NODE	1572:22	1572:22	8	tilesize
LEAF_NODE	1572:30	1572:30	6	)
LEAF_NODE	1572:31	1572:31	4	;
EXPR_STATEMENT	1573:1	1573:50	3	( void ) TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl ) ;
EXPR	1573:1	1573:8	4	( void ) TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
LEAF_NODE	1573:1	1573:1	5	(
TYPE_NAME	1573:2	1573:2	5	void
LEAF_NODE	1573:2	1573:2	6	void
LEAF_NODE	1573:6	1573:6	5	)
FUNCTION_CALL	1573:8	1573:49	5	TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
CALLEE	1573:8	1573:8	6	TIFFGetField
LEAF_NODE	1573:8	1573:8	7	TIFFGetField
LEAF_NODE	1573:20	1573:20	6	(
ARGUMENT	1573:21	1573:21	6	out
FIELD	1573:21	1573:21	7	out
LEAF_NODE	1573:21	1573:21	8	out
LEAF_NODE	1573:24	1573:24	6	,
ARGUMENT	1573:26	1573:26	6	TIFFTAG_TILELENGTH
FIELD	1573:26	1573:26	7	TIFFTAG_TILELENGTH
LEAF_NODE	1573:26	1573:26	8	TIFFTAG_TILELENGTH
LEAF_NODE	1573:44	1573:44	6	,
ARGUMENT	1573:46	1573:46	6	& tl
UNARY_EXPR	1573:46	1573:47	7	& tl
UNARY_OPERATOR	1573:46	1573:46	8	&
LEAF_NODE	1573:46	1573:46	9	&
FIELD	1573:47	1573:47	8	tl
LEAF_NODE	1573:47	1573:47	9	tl
LEAF_NODE	1573:49	1573:49	6	)
LEAF_NODE	1573:50	1573:50	4	;
EXPR_STATEMENT	1574:1	1574:49	3	( void ) TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	1574:1	1574:8	4	( void ) TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
LEAF_NODE	1574:1	1574:1	5	(
TYPE_NAME	1574:2	1574:2	5	void
LEAF_NODE	1574:2	1574:2	6	void
LEAF_NODE	1574:6	1574:6	5	)
FUNCTION_CALL	1574:8	1574:48	5	TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1574:8	1574:8	6	TIFFGetField
LEAF_NODE	1574:8	1574:8	7	TIFFGetField
LEAF_NODE	1574:20	1574:20	6	(
ARGUMENT	1574:21	1574:21	6	out
FIELD	1574:21	1574:21	7	out
LEAF_NODE	1574:21	1574:21	8	out
LEAF_NODE	1574:24	1574:24	6	,
ARGUMENT	1574:26	1574:26	6	TIFFTAG_TILEWIDTH
FIELD	1574:26	1574:26	7	TIFFTAG_TILEWIDTH
LEAF_NODE	1574:26	1574:26	8	TIFFTAG_TILEWIDTH
LEAF_NODE	1574:43	1574:43	6	,
ARGUMENT	1574:45	1574:45	6	& tw
UNARY_EXPR	1574:45	1574:46	7	& tw
UNARY_OPERATOR	1574:45	1574:45	8	&
LEAF_NODE	1574:45	1574:45	9	&
FIELD	1574:46	1574:46	8	tw
LEAF_NODE	1574:46	1574:46	9	tw
LEAF_NODE	1574:48	1574:48	6	)
LEAF_NODE	1574:49	1574:49	4	;
ITERATION	1575:1	1575:53	3	
KEYWORD	1575:1	1575:1	4	for
LEAF_NODE	1575:1	1575:1	5	for
LEAF_NODE	1575:5	1575:5	4	(
FOR_INIT	1575:6	1575:13	4	row = 0 ;
EXPR	1575:6	1575:6	5	row = 0
ASSIGN	1575:6	1575:12	6	row = 0
LVAL	1575:6	1575:6	7	row
FIELD	1575:6	1575:6	8	row
LEAF_NODE	1575:6	1575:6	9	row
ASSIGN_OP	1575:10	1575:10	7	=
LEAF_NODE	1575:10	1575:10	8	=
RVAL	1575:12	1575:12	7	0
FIELD	1575:12	1575:12	8	0
LEAF_NODE	1575:12	1575:12	9	0
LEAF_NODE	1575:13	1575:13	5	;
CONDITION	1575:15	1575:15	4	row < imagelength
EXPR	1575:15	1575:21	5	row < imagelength
FIELD	1575:15	1575:15	6	row
LEAF_NODE	1575:15	1575:15	7	row
REL_OPERATOR	1575:19	1575:19	6	<
LEAF_NODE	1575:19	1575:19	7	<
FIELD	1575:21	1575:21	6	imagelength
LEAF_NODE	1575:21	1575:21	7	imagelength
LEAF_NODE	1575:32	1575:32	4	;
FOR_EXPR	1575:34	1575:34	4	row += tilelength
EXPR	1575:34	1575:34	5	row += tilelength
ASSIGN	1575:34	1575:41	6	row += tilelength
LVAL	1575:34	1575:34	7	row
FIELD	1575:34	1575:34	8	row
LEAF_NODE	1575:34	1575:34	9	row
ASSIGN_OP	1575:38	1575:38	7	+=
LEAF_NODE	1575:38	1575:38	8	+=
RVAL	1575:41	1575:41	7	tilelength
FIELD	1575:41	1575:41	8	tilelength
LEAF_NODE	1575:41	1575:41	9	tilelength
LEAF_NODE	1575:51	1575:51	4	)
STATEMENTS	1575:53	1604:1	4	
LEAF_NODE	1575:53	1575:53	5	{
STATEMENTS	1576:2	1603:2	5	
SIMPLE_DECL	1576:2	1576:61	6	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
VAR_DECL	1576:2	1576:9	7	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl
TYPE	1576:2	1576:2	8	uint32
TYPE_NAME	1576:2	1576:2	9	uint32
LEAF_NODE	1576:2	1576:2	10	uint32
NAME	1576:9	1576:9	8	nrow
LEAF_NODE	1576:9	1576:9	9	nrow
LEAF_NODE	0:0	0:0	8	;
INIT	1576:9	1576:9	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	1576:9	1576:16	9	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	1576:9	1576:9	10	nrow
NAME	1576:9	1576:9	11	nrow
LEAF_NODE	1576:9	1576:9	12	nrow
ASSIGN_OP	1576:14	1576:14	10	=
LEAF_NODE	1576:14	1576:14	11	=
RVAL	1576:16	1576:16	10	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	1576:16	1576:59	11	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	1576:16	1576:37	12	( row + tl > imagelength )
LEAF_NODE	1576:16	1576:16	13	(
FIELD	1576:17	1576:17	13	row
LEAF_NODE	1576:17	1576:17	14	row
LEAF_NODE	1576:20	1576:20	13	+
FIELD	1576:21	1576:21	13	tl
LEAF_NODE	1576:21	1576:21	14	tl
REL_OPERATOR	1576:24	1576:24	13	>
LEAF_NODE	1576:24	1576:24	14	>
FIELD	1576:26	1576:26	13	imagelength
LEAF_NODE	1576:26	1576:26	14	imagelength
LEAF_NODE	1576:37	1576:37	13	)
LEAF_NODE	1576:39	1576:39	12	?
EXPR	1576:41	1576:53	12	imagelength - row
FIELD	1576:41	1576:41	13	imagelength
LEAF_NODE	1576:41	1576:41	14	imagelength
LEAF_NODE	1576:52	1576:52	13	-
FIELD	1576:53	1576:53	13	row
LEAF_NODE	1576:53	1576:53	14	row
LEAF_NODE	1576:57	1576:57	12	:
FIELD	1576:59	1576:59	12	tl
LEAF_NODE	1576:59	1576:59	13	tl
LEAF_NODE	1576:61	1576:61	7	;
SIMPLE_DECL	1577:2	1577:17	6	uint32 colb ; colb = 0 ;
VAR_DECL	1577:2	1577:9	7	uint32 colb ; colb = 0
TYPE	1577:2	1577:2	8	uint32
TYPE_NAME	1577:2	1577:2	9	uint32
LEAF_NODE	1577:2	1577:2	10	uint32
NAME	1577:9	1577:9	8	colb
LEAF_NODE	1577:9	1577:9	9	colb
LEAF_NODE	0:0	0:0	8	;
INIT	1577:9	1577:9	8	colb = 0
ASSIGN	1577:9	1577:16	9	colb = 0
LVAL	1577:9	1577:9	10	colb
NAME	1577:9	1577:9	11	colb
LEAF_NODE	1577:9	1577:9	12	colb
ASSIGN_OP	1577:14	1577:14	10	=
LEAF_NODE	1577:14	1577:14	11	=
RVAL	1577:16	1577:16	10	0
FIELD	1577:16	1577:16	11	0
LEAF_NODE	1577:16	1577:16	12	0
LEAF_NODE	1577:17	1577:17	7	;
SIMPLE_DECL	1578:2	1578:12	6	uint32 col ;
VAR_DECL	1578:2	1578:9	7	uint32 col
TYPE	1578:2	1578:2	8	uint32
TYPE_NAME	1578:2	1578:2	9	uint32
LEAF_NODE	1578:2	1578:2	10	uint32
NAME	1578:9	1578:9	8	col
LEAF_NODE	1578:9	1578:9	9	col
LEAF_NODE	1578:12	1578:12	7	;
ITERATION	1580:2	1580:62	6	
KEYWORD	1580:2	1580:2	7	for
LEAF_NODE	1580:2	1580:2	8	for
LEAF_NODE	1580:6	1580:6	7	(
FOR_INIT	1580:7	1580:14	7	col = 0 ;
EXPR	1580:7	1580:7	8	col = 0
ASSIGN	1580:7	1580:13	9	col = 0
LVAL	1580:7	1580:7	10	col
FIELD	1580:7	1580:7	11	col
LEAF_NODE	1580:7	1580:7	12	col
ASSIGN_OP	1580:11	1580:11	10	=
LEAF_NODE	1580:11	1580:11	11	=
RVAL	1580:13	1580:13	10	0
FIELD	1580:13	1580:13	11	0
LEAF_NODE	1580:13	1580:13	12	0
LEAF_NODE	1580:14	1580:14	8	;
CONDITION	1580:16	1580:16	7	col < imagewidth && colb < imagew
EXPR	1580:16	1580:16	8	col < imagewidth && colb < imagew
AND	1580:16	1580:36	9	col < imagewidth && colb < imagew
EXPR	1580:16	1580:22	10	col < imagewidth
FIELD	1580:16	1580:16	11	col
LEAF_NODE	1580:16	1580:16	12	col
REL_OPERATOR	1580:20	1580:20	11	<
LEAF_NODE	1580:20	1580:20	12	<
FIELD	1580:22	1580:22	11	imagewidth
LEAF_NODE	1580:22	1580:22	12	imagewidth
LEAF_NODE	1580:33	1580:33	10	&&
EXPR	1580:36	1580:43	10	colb < imagew
FIELD	1580:36	1580:36	11	colb
LEAF_NODE	1580:36	1580:36	12	colb
REL_OPERATOR	1580:41	1580:41	11	<
LEAF_NODE	1580:41	1580:41	12	<
FIELD	1580:43	1580:43	11	imagew
LEAF_NODE	1580:43	1580:43	12	imagew
LEAF_NODE	1580:49	1580:49	7	;
FOR_EXPR	1580:51	1580:51	7	col += tw
EXPR	1580:51	1580:51	8	col += tw
ASSIGN	1580:51	1580:58	9	col += tw
LVAL	1580:51	1580:51	10	col
FIELD	1580:51	1580:51	11	col
LEAF_NODE	1580:51	1580:51	12	col
ASSIGN_OP	1580:55	1580:55	10	+=
LEAF_NODE	1580:55	1580:55	11	+=
RVAL	1580:58	1580:58	10	tw
FIELD	1580:58	1580:58	11	tw
LEAF_NODE	1580:58	1580:58	12	tw
LEAF_NODE	1580:60	1580:60	7	)
STATEMENTS	1580:62	1602:2	7	
LEAF_NODE	1580:62	1580:62	8	{
STATEMENTS	1585:3	1601:3	8	
SELECTION	1585:3	1585:30	9	
KEYWORD	1585:3	1585:3	10	if
LEAF_NODE	1585:3	1585:3	11	if
LEAF_NODE	1585:6	1585:6	10	(
CONDITION	1585:7	1585:7	10	colb + tilew > imagew
EXPR	1585:7	1585:22	11	colb + tilew > imagew
FIELD	1585:7	1585:7	12	colb
LEAF_NODE	1585:7	1585:7	13	colb
LEAF_NODE	1585:12	1585:12	12	+
FIELD	1585:14	1585:14	12	tilew
LEAF_NODE	1585:14	1585:14	13	tilew
REL_OPERATOR	1585:20	1585:20	12	>
LEAF_NODE	1585:20	1585:20	13	>
FIELD	1585:22	1585:22	12	imagew
LEAF_NODE	1585:22	1585:22	13	imagew
LEAF_NODE	1585:28	1585:28	10	)
STATEMENTS	1585:30	1590:3	10	
LEAF_NODE	1585:30	1585:30	11	{
STATEMENTS	1586:4	1588:4	11	
SIMPLE_DECL	1586:4	1586:32	12	uint32 width ; width = imagew - colb ;
VAR_DECL	1586:4	1586:11	13	uint32 width ; width = imagew - colb
TYPE	1586:4	1586:4	14	uint32
TYPE_NAME	1586:4	1586:4	15	uint32
LEAF_NODE	1586:4	1586:4	16	uint32
NAME	1586:11	1586:11	14	width
LEAF_NODE	1586:11	1586:11	15	width
LEAF_NODE	0:0	0:0	14	;
INIT	1586:11	1586:11	14	width = imagew - colb
ASSIGN	1586:11	1586:19	15	width = imagew - colb
LVAL	1586:11	1586:11	16	width
NAME	1586:11	1586:11	17	width
LEAF_NODE	1586:11	1586:11	18	width
ASSIGN_OP	1586:17	1586:17	16	=
LEAF_NODE	1586:17	1586:17	17	=
RVAL	1586:19	1586:28	16	imagew - colb
FIELD	1586:19	1586:19	17	imagew
LEAF_NODE	1586:19	1586:19	18	imagew
LEAF_NODE	1586:26	1586:26	17	-
FIELD	1586:28	1586:28	17	colb
LEAF_NODE	1586:28	1586:28	18	colb
LEAF_NODE	1586:32	1586:32	13	;
SIMPLE_DECL	1587:4	1587:29	12	int oskew ; oskew = tilew - width ;
VAR_DECL	1587:4	1587:8	13	int oskew ; oskew = tilew - width
TYPE	1587:4	1587:4	14	int
TYPE_NAME	1587:4	1587:4	15	int
LEAF_NODE	1587:4	1587:4	16	int
NAME	1587:8	1587:8	14	oskew
LEAF_NODE	1587:8	1587:8	15	oskew
LEAF_NODE	0:0	0:0	14	;
INIT	1587:8	1587:8	14	oskew = tilew - width
ASSIGN	1587:8	1587:16	15	oskew = tilew - width
LVAL	1587:8	1587:8	16	oskew
NAME	1587:8	1587:8	17	oskew
LEAF_NODE	1587:8	1587:8	18	oskew
ASSIGN_OP	1587:14	1587:14	16	=
LEAF_NODE	1587:14	1587:14	17	=
RVAL	1587:16	1587:24	16	tilew - width
FIELD	1587:16	1587:16	17	tilew
LEAF_NODE	1587:16	1587:16	18	tilew
LEAF_NODE	1587:22	1587:22	17	-
FIELD	1587:24	1587:24	17	width
LEAF_NODE	1587:24	1587:24	18	width
LEAF_NODE	1587:29	1587:29	13	;
EXPR_STATEMENT	1588:4	1589:29	12	cpStripToTile ( obuf , bufp + colb , nrow , width , oskew , oskew + iskew ) ;
EXPR	1588:4	1588:4	13	cpStripToTile ( obuf , bufp + colb , nrow , width , oskew , oskew + iskew )
FUNCTION_CALL	1588:4	1589:28	14	cpStripToTile ( obuf , bufp + colb , nrow , width , oskew , oskew + iskew )
CALLEE	1588:4	1588:4	15	cpStripToTile
LEAF_NODE	1588:4	1588:4	16	cpStripToTile
LEAF_NODE	1588:17	1588:17	15	(
ARGUMENT	1588:18	1588:18	15	obuf
FIELD	1588:18	1588:18	16	obuf
LEAF_NODE	1588:18	1588:18	17	obuf
LEAF_NODE	1588:22	1588:22	15	,
ARGUMENT	1588:24	1588:31	15	bufp + colb
FIELD	1588:24	1588:24	16	bufp
LEAF_NODE	1588:24	1588:24	17	bufp
LEAF_NODE	1588:29	1588:29	16	+
FIELD	1588:31	1588:31	16	colb
LEAF_NODE	1588:31	1588:31	17	colb
LEAF_NODE	1588:35	1588:35	15	,
ARGUMENT	1588:37	1588:37	15	nrow
FIELD	1588:37	1588:37	16	nrow
LEAF_NODE	1588:37	1588:37	17	nrow
LEAF_NODE	1588:41	1588:41	15	,
ARGUMENT	1588:43	1588:43	15	width
FIELD	1588:43	1588:43	16	width
LEAF_NODE	1588:43	1588:43	17	width
LEAF_NODE	1588:48	1588:48	15	,
ARGUMENT	1589:8	1589:8	15	oskew
FIELD	1589:8	1589:8	16	oskew
LEAF_NODE	1589:8	1589:8	17	oskew
LEAF_NODE	1589:13	1589:13	15	,
ARGUMENT	1589:15	1589:23	15	oskew + iskew
FIELD	1589:15	1589:15	16	oskew
LEAF_NODE	1589:15	1589:15	17	oskew
LEAF_NODE	1589:21	1589:21	16	+
FIELD	1589:23	1589:23	16	iskew
LEAF_NODE	1589:23	1589:23	17	iskew
LEAF_NODE	1589:28	1589:28	15	)
LEAF_NODE	1589:29	1589:29	13	;
LEAF_NODE	1590:3	1590:3	11	}
SELECTION	1590:5	1591:4	9	
KEYWORD	1590:5	1590:5	10	else
LEAF_NODE	1590:5	1590:5	11	else
STATEMENTS	1591:4	1591:4	10	
EXPR_STATEMENT	1591:4	1592:17	11	cpStripToTile ( obuf , bufp + colb , nrow , tilew , 0 , iskew ) ;
EXPR	1591:4	1591:4	12	cpStripToTile ( obuf , bufp + colb , nrow , tilew , 0 , iskew )
FUNCTION_CALL	1591:4	1592:16	13	cpStripToTile ( obuf , bufp + colb , nrow , tilew , 0 , iskew )
CALLEE	1591:4	1591:4	14	cpStripToTile
LEAF_NODE	1591:4	1591:4	15	cpStripToTile
LEAF_NODE	1591:17	1591:17	14	(
ARGUMENT	1591:18	1591:18	14	obuf
FIELD	1591:18	1591:18	15	obuf
LEAF_NODE	1591:18	1591:18	16	obuf
LEAF_NODE	1591:22	1591:22	14	,
ARGUMENT	1591:24	1591:31	14	bufp + colb
FIELD	1591:24	1591:24	15	bufp
LEAF_NODE	1591:24	1591:24	16	bufp
LEAF_NODE	1591:29	1591:29	15	+
FIELD	1591:31	1591:31	15	colb
LEAF_NODE	1591:31	1591:31	16	colb
LEAF_NODE	1591:35	1591:35	14	,
ARGUMENT	1591:37	1591:37	14	nrow
FIELD	1591:37	1591:37	15	nrow
LEAF_NODE	1591:37	1591:37	16	nrow
LEAF_NODE	1591:41	1591:41	14	,
ARGUMENT	1591:43	1591:43	14	tilew
FIELD	1591:43	1591:43	15	tilew
LEAF_NODE	1591:43	1591:43	16	tilew
LEAF_NODE	1591:48	1591:48	14	,
ARGUMENT	1592:8	1592:8	14	0
FIELD	1592:8	1592:8	15	0
LEAF_NODE	1592:8	1592:8	16	0
LEAF_NODE	1592:9	1592:9	14	,
ARGUMENT	1592:11	1592:11	14	iskew
FIELD	1592:11	1592:11	15	iskew
LEAF_NODE	1592:11	1592:11	16	iskew
LEAF_NODE	1592:16	1592:16	14	)
LEAF_NODE	1592:17	1592:17	12	;
SELECTION	1593:3	1593:53	9	
KEYWORD	1593:3	1593:3	10	if
LEAF_NODE	1593:3	1593:3	11	if
LEAF_NODE	1593:6	1593:6	10	(
CONDITION	1593:7	1593:7	10	TIFFWriteTile ( out , obuf , col , row , 0 , 0 ) < 0
EXPR	1593:7	1593:50	11	TIFFWriteTile ( out , obuf , col , row , 0 , 0 ) < 0
FUNCTION_CALL	1593:7	1593:46	12	TIFFWriteTile ( out , obuf , col , row , 0 , 0 )
CALLEE	1593:7	1593:7	13	TIFFWriteTile
LEAF_NODE	1593:7	1593:7	14	TIFFWriteTile
LEAF_NODE	1593:20	1593:20	13	(
ARGUMENT	1593:21	1593:21	13	out
FIELD	1593:21	1593:21	14	out
LEAF_NODE	1593:21	1593:21	15	out
LEAF_NODE	1593:24	1593:24	13	,
ARGUMENT	1593:26	1593:26	13	obuf
FIELD	1593:26	1593:26	14	obuf
LEAF_NODE	1593:26	1593:26	15	obuf
LEAF_NODE	1593:30	1593:30	13	,
ARGUMENT	1593:32	1593:32	13	col
FIELD	1593:32	1593:32	14	col
LEAF_NODE	1593:32	1593:32	15	col
LEAF_NODE	1593:35	1593:35	13	,
ARGUMENT	1593:37	1593:37	13	row
FIELD	1593:37	1593:37	14	row
LEAF_NODE	1593:37	1593:37	15	row
LEAF_NODE	1593:40	1593:40	13	,
ARGUMENT	1593:42	1593:42	13	0
FIELD	1593:42	1593:42	14	0
LEAF_NODE	1593:42	1593:42	15	0
LEAF_NODE	1593:43	1593:43	13	,
ARGUMENT	1593:45	1593:45	13	0
FIELD	1593:45	1593:45	14	0
LEAF_NODE	1593:45	1593:45	15	0
LEAF_NODE	1593:46	1593:46	13	)
REL_OPERATOR	1593:48	1593:48	12	<
LEAF_NODE	1593:48	1593:48	13	<
FIELD	1593:50	1593:50	12	0
LEAF_NODE	1593:50	1593:50	13	0
LEAF_NODE	1593:51	1593:51	10	)
STATEMENTS	1593:53	1600:3	10	
LEAF_NODE	1593:53	1593:53	11	{
STATEMENTS	1594:4	1599:4	11	
EXPR_STATEMENT	1594:4	1597:28	12	TIFFError ( TIFFFileName ( out ) , "Error, can't write tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row ) ;
EXPR	1594:4	1594:4	13	TIFFError ( TIFFFileName ( out ) , "Error, can't write tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row )
FUNCTION_CALL	1594:4	1597:27	14	TIFFError ( TIFFFileName ( out ) , "Error, can't write tile at %lu %lu" , ( unsigned long ) col , ( unsigned long ) row )
CALLEE	1594:4	1594:4	15	TIFFError
LEAF_NODE	1594:4	1594:4	16	TIFFError
LEAF_NODE	1594:13	1594:13	15	(
ARGUMENT	1594:14	1594:14	15	TIFFFileName ( out )
FUNCTION_CALL	1594:14	1594:30	16	TIFFFileName ( out )
CALLEE	1594:14	1594:14	17	TIFFFileName
LEAF_NODE	1594:14	1594:14	18	TIFFFileName
LEAF_NODE	1594:26	1594:26	17	(
ARGUMENT	1594:27	1594:27	17	out
FIELD	1594:27	1594:27	18	out
LEAF_NODE	1594:27	1594:27	19	out
LEAF_NODE	1594:30	1594:30	17	)
LEAF_NODE	1594:31	1594:31	15	,
ARGUMENT	1595:8	1595:8	15	"Error, can't write tile at %lu %lu"
FIELD	1595:8	1595:8	16	"Error, can't write tile at %lu %lu"
LEAF_NODE	1595:8	1595:8	17	"Error, can't write tile at %lu %lu"
LEAF_NODE	1595:44	1595:44	15	,
ARGUMENT	1596:8	1596:24	15	( unsigned long ) col
LEAF_NODE	1596:8	1596:8	16	(
TYPE_NAME	1596:9	1596:18	16	unsigned long
LEAF_NODE	1596:9	1596:9	17	unsigned
LEAF_NODE	1596:18	1596:18	17	long
LEAF_NODE	1596:22	1596:22	16	)
FIELD	1596:24	1596:24	16	col
LEAF_NODE	1596:24	1596:24	17	col
LEAF_NODE	1596:27	1596:27	15	,
ARGUMENT	1597:8	1597:24	15	( unsigned long ) row
LEAF_NODE	1597:8	1597:8	16	(
TYPE_NAME	1597:9	1597:18	16	unsigned long
LEAF_NODE	1597:9	1597:9	17	unsigned
LEAF_NODE	1597:18	1597:18	17	long
LEAF_NODE	1597:22	1597:22	16	)
FIELD	1597:24	1597:24	16	row
LEAF_NODE	1597:24	1597:24	17	row
LEAF_NODE	1597:27	1597:27	15	)
LEAF_NODE	1597:28	1597:28	13	;
EXPR_STATEMENT	1598:4	1598:19	12	_TIFFfree ( obuf ) ;
EXPR	1598:4	1598:4	13	_TIFFfree ( obuf )
FUNCTION_CALL	1598:4	1598:18	14	_TIFFfree ( obuf )
CALLEE	1598:4	1598:4	15	_TIFFfree
LEAF_NODE	1598:4	1598:4	16	_TIFFfree
LEAF_NODE	1598:13	1598:13	15	(
ARGUMENT	1598:14	1598:14	15	obuf
FIELD	1598:14	1598:14	16	obuf
LEAF_NODE	1598:14	1598:14	17	obuf
LEAF_NODE	1598:18	1598:18	15	)
LEAF_NODE	1598:19	1598:19	13	;
JUMP_STATEMENT	1599:4	1599:12	12	return 0 ;
KEYWORD	1599:4	1599:4	13	return
LEAF_NODE	1599:4	1599:4	14	return
DESTINATION	1599:11	1599:11	13	0
EXPR	1599:11	1599:11	14	0
FIELD	1599:11	1599:11	15	0
LEAF_NODE	1599:11	1599:11	16	0
LEAF_NODE	1599:12	1599:12	13	;
LEAF_NODE	1600:3	1600:3	11	}
EXPR_STATEMENT	1601:3	1601:16	9	colb += tilew ;
EXPR	1601:3	1601:3	10	colb += tilew
ASSIGN	1601:3	1601:11	11	colb += tilew
LVAL	1601:3	1601:3	12	colb
FIELD	1601:3	1601:3	13	colb
LEAF_NODE	1601:3	1601:3	14	colb
ASSIGN_OP	1601:8	1601:8	12	+=
LEAF_NODE	1601:8	1601:8	13	+=
RVAL	1601:11	1601:11	12	tilew
FIELD	1601:11	1601:11	13	tilew
LEAF_NODE	1601:11	1601:11	14	tilew
LEAF_NODE	1601:16	1601:16	10	;
LEAF_NODE	1602:2	1602:2	8	}
EXPR_STATEMENT	1603:2	1603:23	6	bufp += nrow * imagew ;
EXPR	1603:2	1603:2	7	bufp += nrow * imagew
ASSIGN	1603:2	1603:10	8	bufp += nrow * imagew
LVAL	1603:2	1603:2	9	bufp
FIELD	1603:2	1603:2	10	bufp
LEAF_NODE	1603:2	1603:2	11	bufp
ASSIGN_OP	1603:7	1603:7	9	+=
LEAF_NODE	1603:7	1603:7	10	+=
RVAL	1603:10	1603:17	9	nrow * imagew
FIELD	1603:10	1603:10	10	nrow
LEAF_NODE	1603:10	1603:10	11	nrow
LEAF_NODE	1603:15	1603:15	10	*
FIELD	1603:17	1603:17	10	imagew
LEAF_NODE	1603:17	1603:17	11	imagew
LEAF_NODE	1603:23	1603:23	7	;
LEAF_NODE	1604:1	1604:1	5	}
EXPR_STATEMENT	1605:1	1605:16	3	_TIFFfree ( obuf ) ;
EXPR	1605:1	1605:1	4	_TIFFfree ( obuf )
FUNCTION_CALL	1605:1	1605:15	5	_TIFFfree ( obuf )
CALLEE	1605:1	1605:1	6	_TIFFfree
LEAF_NODE	1605:1	1605:1	7	_TIFFfree
LEAF_NODE	1605:10	1605:10	6	(
ARGUMENT	1605:11	1605:11	6	obuf
FIELD	1605:11	1605:11	7	obuf
LEAF_NODE	1605:11	1605:11	8	obuf
LEAF_NODE	1605:15	1605:15	6	)
LEAF_NODE	1605:16	1605:16	4	;
JUMP_STATEMENT	1606:1	1606:9	3	return 1 ;
KEYWORD	1606:1	1606:1	4	return
LEAF_NODE	1606:1	1606:1	5	return
DESTINATION	1606:8	1606:8	4	1
EXPR	1606:8	1606:8	5	1
FIELD	1606:8	1606:8	6	1
LEAF_NODE	1606:8	1606:8	7	1
LEAF_NODE	1606:9	1606:9	4	;
LEAF_NODE	1607:0	1607:0	2	}
FUNCTION_DEF	0:0	1687:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1609:0	1609:0	2	DECLAREwriteFunc
LEAF_NODE	1609:0	1609:0	3	DECLAREwriteFunc
PARAMETER_LIST	1609:16	1609:43	2	( writeBufferToSeparateTiles )
LEAF_NODE	1609:16	1609:16	3	(
PARAMETER_DECL	1609:17	1609:17	3	writeBufferToSeparateTiles
LEAF_NODE	1609:17	1609:17	4	writeBufferToSeparateTiles
LEAF_NODE	1609:43	1609:43	3	)
LEAF_NODE	1610:0	1610:0	2	{
STATEMENTS	1611:1	1686:1	2	
SIMPLE_DECL	1611:1	1611:38	3	uint32 imagew ; imagew = TIFFScanlineSize ( out ) ;
VAR_DECL	1611:1	1611:8	4	uint32 imagew ; imagew = TIFFScanlineSize ( out )
TYPE	1611:1	1611:1	5	uint32
TYPE_NAME	1611:1	1611:1	6	uint32
LEAF_NODE	1611:1	1611:1	7	uint32
NAME	1611:8	1611:8	5	imagew
LEAF_NODE	1611:8	1611:8	6	imagew
LEAF_NODE	0:0	0:0	5	;
INIT	1611:8	1611:8	5	imagew = TIFFScanlineSize ( out )
ASSIGN	1611:8	1611:17	6	imagew = TIFFScanlineSize ( out )
LVAL	1611:8	1611:8	7	imagew
NAME	1611:8	1611:8	8	imagew
LEAF_NODE	1611:8	1611:8	9	imagew
ASSIGN_OP	1611:15	1611:15	7	=
LEAF_NODE	1611:15	1611:15	8	=
RVAL	1611:17	1611:17	7	TIFFScanlineSize ( out )
FUNCTION_CALL	1611:17	1611:37	8	TIFFScanlineSize ( out )
CALLEE	1611:17	1611:17	9	TIFFScanlineSize
LEAF_NODE	1611:17	1611:17	10	TIFFScanlineSize
LEAF_NODE	1611:33	1611:33	9	(
ARGUMENT	1611:34	1611:34	9	out
FIELD	1611:34	1611:34	10	out
LEAF_NODE	1611:34	1611:34	11	out
LEAF_NODE	1611:37	1611:37	9	)
LEAF_NODE	1611:38	1611:38	4	;
SIMPLE_DECL	1612:1	1612:38	3	tsize_t tilew ; tilew = TIFFTileRowSize ( out ) ;
VAR_DECL	1612:1	1612:9	4	tsize_t tilew ; tilew = TIFFTileRowSize ( out )
TYPE	1612:1	1612:1	5	tsize_t
TYPE_NAME	1612:1	1612:1	6	tsize_t
LEAF_NODE	1612:1	1612:1	7	tsize_t
NAME	1612:9	1612:9	5	tilew
LEAF_NODE	1612:9	1612:9	6	tilew
LEAF_NODE	0:0	0:0	5	;
INIT	1612:9	1612:9	5	tilew = TIFFTileRowSize ( out )
ASSIGN	1612:9	1612:18	6	tilew = TIFFTileRowSize ( out )
LVAL	1612:9	1612:9	7	tilew
NAME	1612:9	1612:9	8	tilew
LEAF_NODE	1612:9	1612:9	9	tilew
ASSIGN_OP	1612:16	1612:16	7	=
LEAF_NODE	1612:16	1612:16	8	=
RVAL	1612:18	1612:18	7	TIFFTileRowSize ( out )
FUNCTION_CALL	1612:18	1612:37	8	TIFFTileRowSize ( out )
CALLEE	1612:18	1612:18	9	TIFFTileRowSize
LEAF_NODE	1612:18	1612:18	10	TIFFTileRowSize
LEAF_NODE	1612:33	1612:33	9	(
ARGUMENT	1612:34	1612:34	9	out
FIELD	1612:34	1612:34	10	out
LEAF_NODE	1612:34	1612:34	11	out
LEAF_NODE	1612:37	1612:37	9	)
LEAF_NODE	1612:38	1612:38	4	;
SIMPLE_DECL	1613:1	1613:45	3	uint32 iimagew ; iimagew = TIFFRasterScanlineSize ( out ) ;
VAR_DECL	1613:1	1613:8	4	uint32 iimagew ; iimagew = TIFFRasterScanlineSize ( out )
TYPE	1613:1	1613:1	5	uint32
TYPE_NAME	1613:1	1613:1	6	uint32
LEAF_NODE	1613:1	1613:1	7	uint32
NAME	1613:8	1613:8	5	iimagew
LEAF_NODE	1613:8	1613:8	6	iimagew
LEAF_NODE	0:0	0:0	5	;
INIT	1613:8	1613:8	5	iimagew = TIFFRasterScanlineSize ( out )
ASSIGN	1613:8	1613:18	6	iimagew = TIFFRasterScanlineSize ( out )
LVAL	1613:8	1613:8	7	iimagew
NAME	1613:8	1613:8	8	iimagew
LEAF_NODE	1613:8	1613:8	9	iimagew
ASSIGN_OP	1613:16	1613:16	7	=
LEAF_NODE	1613:16	1613:16	8	=
RVAL	1613:18	1613:18	7	TIFFRasterScanlineSize ( out )
FUNCTION_CALL	1613:18	1613:44	8	TIFFRasterScanlineSize ( out )
CALLEE	1613:18	1613:18	9	TIFFRasterScanlineSize
LEAF_NODE	1613:18	1613:18	10	TIFFRasterScanlineSize
LEAF_NODE	1613:40	1613:40	9	(
ARGUMENT	1613:41	1613:41	9	out
FIELD	1613:41	1613:41	10	out
LEAF_NODE	1613:41	1613:41	11	out
LEAF_NODE	1613:44	1613:44	9	)
LEAF_NODE	1613:45	1613:45	4	;
SIMPLE_DECL	1614:1	1614:32	3	int iskew ; iskew = iimagew - tilew * spp ;
VAR_DECL	1614:1	1614:5	4	int iskew ; iskew = iimagew - tilew * spp
TYPE	1614:1	1614:1	5	int
TYPE_NAME	1614:1	1614:1	6	int
LEAF_NODE	1614:1	1614:1	7	int
NAME	1614:5	1614:5	5	iskew
LEAF_NODE	1614:5	1614:5	6	iskew
LEAF_NODE	0:0	0:0	5	;
INIT	1614:5	1614:5	5	iskew = iimagew - tilew * spp
ASSIGN	1614:5	1614:13	6	iskew = iimagew - tilew * spp
LVAL	1614:5	1614:5	7	iskew
NAME	1614:5	1614:5	8	iskew
LEAF_NODE	1614:5	1614:5	9	iskew
ASSIGN_OP	1614:11	1614:11	7	=
LEAF_NODE	1614:11	1614:11	8	=
RVAL	1614:13	1614:29	7	iimagew - tilew * spp
FIELD	1614:13	1614:13	8	iimagew
LEAF_NODE	1614:13	1614:13	9	iimagew
LEAF_NODE	1614:21	1614:21	8	-
FIELD	1614:23	1614:23	8	tilew
LEAF_NODE	1614:23	1614:23	9	tilew
LEAF_NODE	1614:28	1614:28	8	*
FIELD	1614:29	1614:29	8	spp
LEAF_NODE	1614:29	1614:29	9	spp
LEAF_NODE	1614:32	1614:32	4	;
SIMPLE_DECL	1615:1	1615:37	3	tsize_t tilesize ; tilesize = TIFFTileSize ( out ) ;
VAR_DECL	1615:1	1615:9	4	tsize_t tilesize ; tilesize = TIFFTileSize ( out )
TYPE	1615:1	1615:1	5	tsize_t
TYPE_NAME	1615:1	1615:1	6	tsize_t
LEAF_NODE	1615:1	1615:1	7	tsize_t
NAME	1615:9	1615:9	5	tilesize
LEAF_NODE	1615:9	1615:9	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	1615:9	1615:9	5	tilesize = TIFFTileSize ( out )
ASSIGN	1615:9	1615:20	6	tilesize = TIFFTileSize ( out )
LVAL	1615:9	1615:9	7	tilesize
NAME	1615:9	1615:9	8	tilesize
LEAF_NODE	1615:9	1615:9	9	tilesize
ASSIGN_OP	1615:18	1615:18	7	=
LEAF_NODE	1615:18	1615:18	8	=
RVAL	1615:20	1615:20	7	TIFFTileSize ( out )
FUNCTION_CALL	1615:20	1615:36	8	TIFFTileSize ( out )
CALLEE	1615:20	1615:20	9	TIFFTileSize
LEAF_NODE	1615:20	1615:20	10	TIFFTileSize
LEAF_NODE	1615:32	1615:32	9	(
ARGUMENT	1615:33	1615:33	9	out
FIELD	1615:33	1615:33	10	out
LEAF_NODE	1615:33	1615:33	11	out
LEAF_NODE	1615:36	1615:36	9	)
LEAF_NODE	1615:37	1615:37	4	;
SIMPLE_DECL	1616:1	1616:13	3	tdata_t obuf ;
VAR_DECL	1616:1	1616:9	4	tdata_t obuf
TYPE	1616:1	1616:1	5	tdata_t
TYPE_NAME	1616:1	1616:1	6	tdata_t
LEAF_NODE	1616:1	1616:1	7	tdata_t
NAME	1616:9	1616:9	5	obuf
LEAF_NODE	1616:9	1616:9	6	obuf
LEAF_NODE	1616:13	1616:13	4	;
SIMPLE_DECL	1617:1	1617:27	3	uint8 * bufp ; bufp = ( uint8 * ) buf ;
VAR_DECL	1617:1	1617:8	4	uint8 * bufp ; bufp = ( uint8 * ) buf
TYPE	1617:1	1617:6	5	uint8 *
TYPE_NAME	1617:1	1617:1	6	uint8
LEAF_NODE	1617:1	1617:1	7	uint8
POINTER	1617:6	1617:6	6	*
LEAF_NODE	1617:6	1617:6	7	*
NAME	1617:8	1617:8	5	bufp
LEAF_NODE	1617:8	1617:8	6	bufp
LEAF_NODE	0:0	0:0	5	;
INIT	1617:8	1617:8	5	bufp = ( uint8 * ) buf
ASSIGN	1617:8	1617:15	6	bufp = ( uint8 * ) buf
LVAL	1617:8	1617:8	7	bufp
NAME	1617:8	1617:8	8	bufp
LEAF_NODE	1617:8	1617:8	9	bufp
ASSIGN_OP	1617:13	1617:13	7	=
LEAF_NODE	1617:13	1617:13	8	=
RVAL	1617:15	1617:24	7	( uint8 * ) buf
LEAF_NODE	1617:15	1617:15	8	(
TYPE_NAME	1617:16	1617:16	8	uint8
LEAF_NODE	1617:16	1617:16	9	uint8
LEAF_NODE	1617:21	1617:21	8	*
LEAF_NODE	1617:22	1617:22	8	)
FIELD	1617:24	1617:24	8	buf
LEAF_NODE	1617:24	1617:24	9	buf
LEAF_NODE	1617:27	1617:27	4	;
SIMPLE_DECL	1618:1	1618:14	3	uint32 tl , uint32 tw ;
INIT_DECL_LIST	1618:1	1618:1	4	uint32 tl , uint32 tw
VAR_DECL	1618:1	1618:8	5	uint32 tl
TYPE	1618:1	1618:1	6	uint32
TYPE_NAME	1618:1	1618:1	7	uint32
LEAF_NODE	1618:1	1618:1	8	uint32
NAME	1618:8	1618:8	6	tl
LEAF_NODE	1618:8	1618:8	7	tl
LEAF_NODE	1618:10	1618:10	5	,
VAR_DECL	1618:1	1618:12	5	uint32 tw
TYPE	1618:1	1618:1	6	uint32
TYPE_NAME	1618:1	1618:1	7	uint32
LEAF_NODE	1618:1	1618:1	8	uint32
NAME	1618:12	1618:12	6	tw
LEAF_NODE	1618:12	1618:12	7	tw
LEAF_NODE	1618:14	1618:14	4	;
SIMPLE_DECL	1619:1	1619:11	3	uint32 row ;
VAR_DECL	1619:1	1619:8	4	uint32 row
TYPE	1619:1	1619:1	5	uint32
TYPE_NAME	1619:1	1619:1	6	uint32
LEAF_NODE	1619:1	1619:1	7	uint32
NAME	1619:8	1619:8	5	row
LEAF_NODE	1619:8	1619:8	6	row
LEAF_NODE	1619:11	1619:11	4	;
SIMPLE_DECL	1620:1	1620:33	3	uint16 bps ; bps = 0 , uint16 bytes_per_sample ;
INIT_DECL_LIST	1620:1	1620:1	4	uint16 bps ; bps = 0 , uint16 bytes_per_sample
VAR_DECL	1620:1	1620:8	5	uint16 bps ; bps = 0
TYPE	1620:1	1620:1	6	uint16
TYPE_NAME	1620:1	1620:1	7	uint16
LEAF_NODE	1620:1	1620:1	8	uint16
NAME	1620:8	1620:8	6	bps
LEAF_NODE	1620:8	1620:8	7	bps
LEAF_NODE	0:0	0:0	6	;
INIT	1620:8	1620:8	6	bps = 0
ASSIGN	1620:8	1620:14	7	bps = 0
LVAL	1620:8	1620:8	8	bps
NAME	1620:8	1620:8	9	bps
LEAF_NODE	1620:8	1620:8	10	bps
ASSIGN_OP	1620:12	1620:12	8	=
LEAF_NODE	1620:12	1620:12	9	=
RVAL	1620:14	1620:14	8	0
FIELD	1620:14	1620:14	9	0
LEAF_NODE	1620:14	1620:14	10	0
LEAF_NODE	1620:15	1620:15	5	,
VAR_DECL	1620:1	1620:17	5	uint16 bytes_per_sample
TYPE	1620:1	1620:1	6	uint16
TYPE_NAME	1620:1	1620:1	7	uint16
LEAF_NODE	1620:1	1620:1	8	uint16
NAME	1620:17	1620:17	6	bytes_per_sample
LEAF_NODE	1620:17	1620:17	7	bytes_per_sample
LEAF_NODE	1620:33	1620:33	4	;
EXPR_STATEMENT	1622:1	1622:38	3	obuf = _TIFFmalloc ( TIFFTileSize ( out ) ) ;
EXPR	1622:1	1622:1	4	obuf = _TIFFmalloc ( TIFFTileSize ( out ) )
ASSIGN	1622:1	1622:8	5	obuf = _TIFFmalloc ( TIFFTileSize ( out ) )
LVAL	1622:1	1622:1	6	obuf
FIELD	1622:1	1622:1	7	obuf
LEAF_NODE	1622:1	1622:1	8	obuf
ASSIGN_OP	1622:6	1622:6	6	=
LEAF_NODE	1622:6	1622:6	7	=
RVAL	1622:8	1622:8	6	_TIFFmalloc ( TIFFTileSize ( out ) )
FUNCTION_CALL	1622:8	1622:37	7	_TIFFmalloc ( TIFFTileSize ( out ) )
CALLEE	1622:8	1622:8	8	_TIFFmalloc
LEAF_NODE	1622:8	1622:8	9	_TIFFmalloc
LEAF_NODE	1622:19	1622:19	8	(
ARGUMENT	1622:20	1622:20	8	TIFFTileSize ( out )
FUNCTION_CALL	1622:20	1622:36	9	TIFFTileSize ( out )
CALLEE	1622:20	1622:20	10	TIFFTileSize
LEAF_NODE	1622:20	1622:20	11	TIFFTileSize
LEAF_NODE	1622:32	1622:32	10	(
ARGUMENT	1622:33	1622:33	10	out
FIELD	1622:33	1622:33	11	out
LEAF_NODE	1622:33	1622:33	12	out
LEAF_NODE	1622:36	1622:36	10	)
LEAF_NODE	1622:37	1622:37	8	)
LEAF_NODE	1622:38	1622:38	4	;
SELECTION	1623:1	1624:2	3	
KEYWORD	1623:1	1623:1	4	if
LEAF_NODE	1623:1	1623:1	5	if
LEAF_NODE	1623:4	1623:4	4	(
CONDITION	1623:5	1623:5	4	obuf == NULL
EXPR	1623:5	1623:13	5	obuf == NULL
FIELD	1623:5	1623:5	6	obuf
LEAF_NODE	1623:5	1623:5	7	obuf
EQ_OPERATOR	1623:10	1623:10	6	==
LEAF_NODE	1623:10	1623:10	7	==
FIELD	1623:13	1623:13	6	NULL
LEAF_NODE	1623:13	1623:13	7	NULL
LEAF_NODE	1623:17	1623:17	4	)
STATEMENTS	1624:2	1624:2	4	
JUMP_STATEMENT	1624:2	1624:10	5	return 0 ;
KEYWORD	1624:2	1624:2	6	return
LEAF_NODE	1624:2	1624:2	7	return
DESTINATION	1624:9	1624:9	6	0
EXPR	1624:9	1624:9	7	0
FIELD	1624:9	1624:9	8	0
LEAF_NODE	1624:9	1624:9	9	0
LEAF_NODE	1624:10	1624:10	6	;
EXPR_STATEMENT	1625:1	1625:31	3	_TIFFmemset ( obuf , 0 , tilesize ) ;
EXPR	1625:1	1625:1	4	_TIFFmemset ( obuf , 0 , tilesize )
FUNCTION_CALL	1625:1	1625:30	5	_TIFFmemset ( obuf , 0 , tilesize )
CALLEE	1625:1	1625:1	6	_TIFFmemset
LEAF_NODE	1625:1	1625:1	7	_TIFFmemset
LEAF_NODE	1625:12	1625:12	6	(
ARGUMENT	1625:13	1625:13	6	obuf
FIELD	1625:13	1625:13	7	obuf
LEAF_NODE	1625:13	1625:13	8	obuf
LEAF_NODE	1625:17	1625:17	6	,
ARGUMENT	1625:19	1625:19	6	0
FIELD	1625:19	1625:19	7	0
LEAF_NODE	1625:19	1625:19	8	0
LEAF_NODE	1625:20	1625:20	6	,
ARGUMENT	1625:22	1625:22	6	tilesize
FIELD	1625:22	1625:22	7	tilesize
LEAF_NODE	1625:22	1625:22	8	tilesize
LEAF_NODE	1625:30	1625:30	6	)
LEAF_NODE	1625:31	1625:31	4	;
EXPR_STATEMENT	1626:1	1626:50	3	( void ) TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl ) ;
EXPR	1626:1	1626:8	4	( void ) TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
LEAF_NODE	1626:1	1626:1	5	(
TYPE_NAME	1626:2	1626:2	5	void
LEAF_NODE	1626:2	1626:2	6	void
LEAF_NODE	1626:6	1626:6	5	)
FUNCTION_CALL	1626:8	1626:49	5	TIFFGetField ( out , TIFFTAG_TILELENGTH , & tl )
CALLEE	1626:8	1626:8	6	TIFFGetField
LEAF_NODE	1626:8	1626:8	7	TIFFGetField
LEAF_NODE	1626:20	1626:20	6	(
ARGUMENT	1626:21	1626:21	6	out
FIELD	1626:21	1626:21	7	out
LEAF_NODE	1626:21	1626:21	8	out
LEAF_NODE	1626:24	1626:24	6	,
ARGUMENT	1626:26	1626:26	6	TIFFTAG_TILELENGTH
FIELD	1626:26	1626:26	7	TIFFTAG_TILELENGTH
LEAF_NODE	1626:26	1626:26	8	TIFFTAG_TILELENGTH
LEAF_NODE	1626:44	1626:44	6	,
ARGUMENT	1626:46	1626:46	6	& tl
UNARY_EXPR	1626:46	1626:47	7	& tl
UNARY_OPERATOR	1626:46	1626:46	8	&
LEAF_NODE	1626:46	1626:46	9	&
FIELD	1626:47	1626:47	8	tl
LEAF_NODE	1626:47	1626:47	9	tl
LEAF_NODE	1626:49	1626:49	6	)
LEAF_NODE	1626:50	1626:50	4	;
EXPR_STATEMENT	1627:1	1627:49	3	( void ) TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	1627:1	1627:8	4	( void ) TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
LEAF_NODE	1627:1	1627:1	5	(
TYPE_NAME	1627:2	1627:2	5	void
LEAF_NODE	1627:2	1627:2	6	void
LEAF_NODE	1627:6	1627:6	5	)
FUNCTION_CALL	1627:8	1627:48	5	TIFFGetField ( out , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1627:8	1627:8	6	TIFFGetField
LEAF_NODE	1627:8	1627:8	7	TIFFGetField
LEAF_NODE	1627:20	1627:20	6	(
ARGUMENT	1627:21	1627:21	6	out
FIELD	1627:21	1627:21	7	out
LEAF_NODE	1627:21	1627:21	8	out
LEAF_NODE	1627:24	1627:24	6	,
ARGUMENT	1627:26	1627:26	6	TIFFTAG_TILEWIDTH
FIELD	1627:26	1627:26	7	TIFFTAG_TILEWIDTH
LEAF_NODE	1627:26	1627:26	8	TIFFTAG_TILEWIDTH
LEAF_NODE	1627:43	1627:43	6	,
ARGUMENT	1627:45	1627:45	6	& tw
UNARY_EXPR	1627:45	1627:46	7	& tw
UNARY_OPERATOR	1627:45	1627:45	8	&
LEAF_NODE	1627:45	1627:45	9	&
FIELD	1627:46	1627:46	8	tw
LEAF_NODE	1627:46	1627:46	9	tw
LEAF_NODE	1627:48	1627:48	6	)
LEAF_NODE	1627:49	1627:49	4	;
EXPR_STATEMENT	1628:1	1628:54	3	( void ) TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps ) ;
EXPR	1628:1	1628:8	4	( void ) TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
LEAF_NODE	1628:1	1628:1	5	(
TYPE_NAME	1628:2	1628:2	5	void
LEAF_NODE	1628:2	1628:2	6	void
LEAF_NODE	1628:6	1628:6	5	)
FUNCTION_CALL	1628:8	1628:53	5	TIFFGetField ( out , TIFFTAG_BITSPERSAMPLE , & bps )
CALLEE	1628:8	1628:8	6	TIFFGetField
LEAF_NODE	1628:8	1628:8	7	TIFFGetField
LEAF_NODE	1628:20	1628:20	6	(
ARGUMENT	1628:21	1628:21	6	out
FIELD	1628:21	1628:21	7	out
LEAF_NODE	1628:21	1628:21	8	out
LEAF_NODE	1628:24	1628:24	6	,
ARGUMENT	1628:26	1628:26	6	TIFFTAG_BITSPERSAMPLE
FIELD	1628:26	1628:26	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1628:26	1628:26	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	1628:47	1628:47	6	,
ARGUMENT	1628:49	1628:49	6	& bps
UNARY_EXPR	1628:49	1628:50	7	& bps
UNARY_OPERATOR	1628:49	1628:49	8	&
LEAF_NODE	1628:49	1628:49	9	&
FIELD	1628:50	1628:50	8	bps
LEAF_NODE	1628:50	1628:50	9	bps
LEAF_NODE	1628:53	1628:53	6	)
LEAF_NODE	1628:54	1628:54	4	;
SELECTION	1629:8	1630:8	3	
KEYWORD	1629:8	1629:8	4	if
LEAF_NODE	1629:8	1629:8	5	if
LEAF_NODE	1629:10	1629:10	4	(
CONDITION	1629:12	1629:12	4	bps == 0
EXPR	1629:12	1629:19	5	bps == 0
FIELD	1629:12	1629:12	6	bps
LEAF_NODE	1629:12	1629:12	7	bps
EQ_OPERATOR	1629:16	1629:16	6	==
LEAF_NODE	1629:16	1629:16	7	==
FIELD	1629:19	1629:19	6	0
LEAF_NODE	1629:19	1629:19	7	0
LEAF_NODE	1629:21	1629:21	4	)
STATEMENTS	1630:8	1634:8	4	
LEAF_NODE	1630:8	1630:8	5	{
STATEMENTS	1631:12	1633:12	5	
EXPR_STATEMENT	1631:12	1631:76	6	TIFFError ( TIFFFileName ( out ) , "Error, cannot read BitsPerSample" ) ;
EXPR	1631:12	1631:12	7	TIFFError ( TIFFFileName ( out ) , "Error, cannot read BitsPerSample" )
FUNCTION_CALL	1631:12	1631:75	8	TIFFError ( TIFFFileName ( out ) , "Error, cannot read BitsPerSample" )
CALLEE	1631:12	1631:12	9	TIFFError
LEAF_NODE	1631:12	1631:12	10	TIFFError
LEAF_NODE	1631:21	1631:21	9	(
ARGUMENT	1631:22	1631:22	9	TIFFFileName ( out )
FUNCTION_CALL	1631:22	1631:38	10	TIFFFileName ( out )
CALLEE	1631:22	1631:22	11	TIFFFileName
LEAF_NODE	1631:22	1631:22	12	TIFFFileName
LEAF_NODE	1631:34	1631:34	11	(
ARGUMENT	1631:35	1631:35	11	out
FIELD	1631:35	1631:35	12	out
LEAF_NODE	1631:35	1631:35	13	out
LEAF_NODE	1631:38	1631:38	11	)
LEAF_NODE	1631:39	1631:39	9	,
ARGUMENT	1631:41	1631:41	9	"Error, cannot read BitsPerSample"
FIELD	1631:41	1631:41	10	"Error, cannot read BitsPerSample"
LEAF_NODE	1631:41	1631:41	11	"Error, cannot read BitsPerSample"
LEAF_NODE	1631:75	1631:75	9	)
LEAF_NODE	1631:76	1631:76	7	;
EXPR_STATEMENT	1632:12	1632:27	6	_TIFFfree ( obuf ) ;
EXPR	1632:12	1632:12	7	_TIFFfree ( obuf )
FUNCTION_CALL	1632:12	1632:26	8	_TIFFfree ( obuf )
CALLEE	1632:12	1632:12	9	_TIFFfree
LEAF_NODE	1632:12	1632:12	10	_TIFFfree
LEAF_NODE	1632:21	1632:21	9	(
ARGUMENT	1632:22	1632:22	9	obuf
FIELD	1632:22	1632:22	10	obuf
LEAF_NODE	1632:22	1632:22	11	obuf
LEAF_NODE	1632:26	1632:26	9	)
LEAF_NODE	1632:27	1632:27	7	;
JUMP_STATEMENT	1633:12	1633:20	6	return 0 ;
KEYWORD	1633:12	1633:12	7	return
LEAF_NODE	1633:12	1633:12	8	return
DESTINATION	1633:19	1633:19	7	0
EXPR	1633:19	1633:19	8	0
FIELD	1633:19	1633:19	9	0
LEAF_NODE	1633:19	1633:19	10	0
LEAF_NODE	1633:20	1633:20	7	;
LEAF_NODE	1634:8	1634:8	5	}
SELECTION	1635:8	1636:8	3	
KEYWORD	1635:8	1635:8	4	if
LEAF_NODE	1635:8	1635:8	5	if
LEAF_NODE	1635:10	1635:10	4	(
CONDITION	1635:12	1635:12	4	( bps % 8 ) != 0
EXPR	1635:12	1635:25	5	( bps % 8 ) != 0
LEAF_NODE	1635:12	1635:12	6	(
FIELD	1635:13	1635:13	6	bps
LEAF_NODE	1635:13	1635:13	7	bps
LEAF_NODE	1635:17	1635:17	6	%
FIELD	1635:19	1635:19	6	8
LEAF_NODE	1635:19	1635:19	7	8
LEAF_NODE	1635:20	1635:20	6	)
EQ_OPERATOR	1635:22	1635:22	6	!=
LEAF_NODE	1635:22	1635:22	7	!=
FIELD	1635:25	1635:25	6	0
LEAF_NODE	1635:25	1635:25	7	0
LEAF_NODE	1635:27	1635:27	4	)
STATEMENTS	1636:8	1640:8	4	
LEAF_NODE	1636:8	1636:8	5	{
STATEMENTS	1637:12	1639:12	5	
EXPR_STATEMENT	1637:12	1637:106	6	TIFFError ( TIFFFileName ( out ) , "Error, cannot handle BitsPerSample that is not a multiple of 8" ) ;
EXPR	1637:12	1637:12	7	TIFFError ( TIFFFileName ( out ) , "Error, cannot handle BitsPerSample that is not a multiple of 8" )
FUNCTION_CALL	1637:12	1637:105	8	TIFFError ( TIFFFileName ( out ) , "Error, cannot handle BitsPerSample that is not a multiple of 8" )
CALLEE	1637:12	1637:12	9	TIFFError
LEAF_NODE	1637:12	1637:12	10	TIFFError
LEAF_NODE	1637:21	1637:21	9	(
ARGUMENT	1637:22	1637:22	9	TIFFFileName ( out )
FUNCTION_CALL	1637:22	1637:38	10	TIFFFileName ( out )
CALLEE	1637:22	1637:22	11	TIFFFileName
LEAF_NODE	1637:22	1637:22	12	TIFFFileName
LEAF_NODE	1637:34	1637:34	11	(
ARGUMENT	1637:35	1637:35	11	out
FIELD	1637:35	1637:35	12	out
LEAF_NODE	1637:35	1637:35	13	out
LEAF_NODE	1637:38	1637:38	11	)
LEAF_NODE	1637:39	1637:39	9	,
ARGUMENT	1637:41	1637:41	9	"Error, cannot handle BitsPerSample that is not a multiple of 8"
FIELD	1637:41	1637:41	10	"Error, cannot handle BitsPerSample that is not a multiple of 8"
LEAF_NODE	1637:41	1637:41	11	"Error, cannot handle BitsPerSample that is not a multiple of 8"
LEAF_NODE	1637:105	1637:105	9	)
LEAF_NODE	1637:106	1637:106	7	;
EXPR_STATEMENT	1638:12	1638:27	6	_TIFFfree ( obuf ) ;
EXPR	1638:12	1638:12	7	_TIFFfree ( obuf )
FUNCTION_CALL	1638:12	1638:26	8	_TIFFfree ( obuf )
CALLEE	1638:12	1638:12	9	_TIFFfree
LEAF_NODE	1638:12	1638:12	10	_TIFFfree
LEAF_NODE	1638:21	1638:21	9	(
ARGUMENT	1638:22	1638:22	9	obuf
FIELD	1638:22	1638:22	10	obuf
LEAF_NODE	1638:22	1638:22	11	obuf
LEAF_NODE	1638:26	1638:26	9	)
LEAF_NODE	1638:27	1638:27	7	;
JUMP_STATEMENT	1639:12	1639:20	6	return 0 ;
KEYWORD	1639:12	1639:12	7	return
LEAF_NODE	1639:12	1639:12	8	return
DESTINATION	1639:19	1639:19	7	0
EXPR	1639:19	1639:19	8	0
FIELD	1639:19	1639:19	9	0
LEAF_NODE	1639:19	1639:19	10	0
LEAF_NODE	1639:20	1639:20	7	;
LEAF_NODE	1640:8	1640:8	5	}
EXPR_STATEMENT	1641:1	1641:25	3	bytes_per_sample = bps / 8 ;
EXPR	1641:1	1641:1	4	bytes_per_sample = bps / 8
ASSIGN	1641:1	1641:20	5	bytes_per_sample = bps / 8
LVAL	1641:1	1641:1	6	bytes_per_sample
FIELD	1641:1	1641:1	7	bytes_per_sample
LEAF_NODE	1641:1	1641:1	8	bytes_per_sample
ASSIGN_OP	1641:18	1641:18	6	=
LEAF_NODE	1641:18	1641:18	7	=
RVAL	1641:20	1641:24	6	bps / 8
FIELD	1641:20	1641:20	7	bps
LEAF_NODE	1641:20	1641:20	8	bps
LEAF_NODE	1641:23	1641:23	7	/
FIELD	1641:24	1641:24	7	8
LEAF_NODE	1641:24	1641:24	8	8
LEAF_NODE	1641:25	1641:25	4	;
ITERATION	1643:1	1643:45	3	
KEYWORD	1643:1	1643:1	4	for
LEAF_NODE	1643:1	1643:1	5	for
LEAF_NODE	1643:5	1643:5	4	(
FOR_INIT	1643:6	1643:13	4	row = 0 ;
EXPR	1643:6	1643:6	5	row = 0
ASSIGN	1643:6	1643:12	6	row = 0
LVAL	1643:6	1643:6	7	row
FIELD	1643:6	1643:6	8	row
LEAF_NODE	1643:6	1643:6	9	row
ASSIGN_OP	1643:10	1643:10	7	=
LEAF_NODE	1643:10	1643:10	8	=
RVAL	1643:12	1643:12	7	0
FIELD	1643:12	1643:12	8	0
LEAF_NODE	1643:12	1643:12	9	0
LEAF_NODE	1643:13	1643:13	5	;
CONDITION	1643:15	1643:15	4	row < imagelength
EXPR	1643:15	1643:21	5	row < imagelength
FIELD	1643:15	1643:15	6	row
LEAF_NODE	1643:15	1643:15	7	row
REL_OPERATOR	1643:19	1643:19	6	<
LEAF_NODE	1643:19	1643:19	7	<
FIELD	1643:21	1643:21	6	imagelength
LEAF_NODE	1643:21	1643:21	7	imagelength
LEAF_NODE	1643:32	1643:32	4	;
FOR_EXPR	1643:34	1643:34	4	row += tl
EXPR	1643:34	1643:34	5	row += tl
ASSIGN	1643:34	1643:41	6	row += tl
LVAL	1643:34	1643:34	7	row
FIELD	1643:34	1643:34	8	row
LEAF_NODE	1643:34	1643:34	9	row
ASSIGN_OP	1643:38	1643:38	7	+=
LEAF_NODE	1643:38	1643:38	8	+=
RVAL	1643:41	1643:41	7	tl
FIELD	1643:41	1643:41	8	tl
LEAF_NODE	1643:41	1643:41	9	tl
LEAF_NODE	1643:43	1643:43	4	)
STATEMENTS	1643:45	1684:1	4	
LEAF_NODE	1643:45	1643:45	5	{
STATEMENTS	1644:2	1683:2	5	
SIMPLE_DECL	1644:2	1644:61	6	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl ;
VAR_DECL	1644:2	1644:9	7	uint32 nrow ; nrow = ( row + tl > imagelength ) ? imagelength - row : tl
TYPE	1644:2	1644:2	8	uint32
TYPE_NAME	1644:2	1644:2	9	uint32
LEAF_NODE	1644:2	1644:2	10	uint32
NAME	1644:9	1644:9	8	nrow
LEAF_NODE	1644:9	1644:9	9	nrow
LEAF_NODE	0:0	0:0	8	;
INIT	1644:9	1644:9	8	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
ASSIGN	1644:9	1644:16	9	nrow = ( row + tl > imagelength ) ? imagelength - row : tl
LVAL	1644:9	1644:9	10	nrow
NAME	1644:9	1644:9	11	nrow
LEAF_NODE	1644:9	1644:9	12	nrow
ASSIGN_OP	1644:14	1644:14	10	=
LEAF_NODE	1644:14	1644:14	11	=
RVAL	1644:16	1644:16	10	( row + tl > imagelength ) ? imagelength - row : tl
COND_EXPR	1644:16	1644:59	11	( row + tl > imagelength ) ? imagelength - row : tl
CONDITION	1644:16	1644:37	12	( row + tl > imagelength )
LEAF_NODE	1644:16	1644:16	13	(
FIELD	1644:17	1644:17	13	row
LEAF_NODE	1644:17	1644:17	14	row
LEAF_NODE	1644:20	1644:20	13	+
FIELD	1644:21	1644:21	13	tl
LEAF_NODE	1644:21	1644:21	14	tl
REL_OPERATOR	1644:24	1644:24	13	>
LEAF_NODE	1644:24	1644:24	14	>
FIELD	1644:26	1644:26	13	imagelength
LEAF_NODE	1644:26	1644:26	14	imagelength
LEAF_NODE	1644:37	1644:37	13	)
LEAF_NODE	1644:39	1644:39	12	?
EXPR	1644:41	1644:53	12	imagelength - row
FIELD	1644:41	1644:41	13	imagelength
LEAF_NODE	1644:41	1644:41	14	imagelength
LEAF_NODE	1644:52	1644:52	13	-
FIELD	1644:53	1644:53	13	row
LEAF_NODE	1644:53	1644:53	14	row
LEAF_NODE	1644:57	1644:57	12	:
FIELD	1644:59	1644:59	12	tl
LEAF_NODE	1644:59	1644:59	13	tl
LEAF_NODE	1644:61	1644:61	7	;
SIMPLE_DECL	1645:2	1645:17	6	uint32 colb ; colb = 0 ;
VAR_DECL	1645:2	1645:9	7	uint32 colb ; colb = 0
TYPE	1645:2	1645:2	8	uint32
TYPE_NAME	1645:2	1645:2	9	uint32
LEAF_NODE	1645:2	1645:2	10	uint32
NAME	1645:9	1645:9	8	colb
LEAF_NODE	1645:9	1645:9	9	colb
LEAF_NODE	0:0	0:0	8	;
INIT	1645:9	1645:9	8	colb = 0
ASSIGN	1645:9	1645:16	9	colb = 0
LVAL	1645:9	1645:9	10	colb
NAME	1645:9	1645:9	11	colb
LEAF_NODE	1645:9	1645:9	12	colb
ASSIGN_OP	1645:14	1645:14	10	=
LEAF_NODE	1645:14	1645:14	11	=
RVAL	1645:16	1645:16	10	0
FIELD	1645:16	1645:16	11	0
LEAF_NODE	1645:16	1645:16	12	0
LEAF_NODE	1645:17	1645:17	7	;
SIMPLE_DECL	1646:2	1646:12	6	uint32 col ;
VAR_DECL	1646:2	1646:9	7	uint32 col
TYPE	1646:2	1646:2	8	uint32
TYPE_NAME	1646:2	1646:2	9	uint32
LEAF_NODE	1646:2	1646:2	10	uint32
NAME	1646:9	1646:9	8	col
LEAF_NODE	1646:9	1646:9	9	col
LEAF_NODE	1646:12	1646:12	7	;
ITERATION	1648:2	1648:45	6	
KEYWORD	1648:2	1648:2	7	for
LEAF_NODE	1648:2	1648:2	8	for
LEAF_NODE	1648:6	1648:6	7	(
FOR_INIT	1648:7	1648:14	7	col = 0 ;
EXPR	1648:7	1648:7	8	col = 0
ASSIGN	1648:7	1648:13	9	col = 0
LVAL	1648:7	1648:7	10	col
FIELD	1648:7	1648:7	11	col
LEAF_NODE	1648:7	1648:7	12	col
ASSIGN_OP	1648:11	1648:11	10	=
LEAF_NODE	1648:11	1648:11	11	=
RVAL	1648:13	1648:13	10	0
FIELD	1648:13	1648:13	11	0
LEAF_NODE	1648:13	1648:13	12	0
LEAF_NODE	1648:14	1648:14	8	;
CONDITION	1648:16	1648:16	7	col < imagewidth
EXPR	1648:16	1648:22	8	col < imagewidth
FIELD	1648:16	1648:16	9	col
LEAF_NODE	1648:16	1648:16	10	col
REL_OPERATOR	1648:20	1648:20	9	<
LEAF_NODE	1648:20	1648:20	10	<
FIELD	1648:22	1648:22	9	imagewidth
LEAF_NODE	1648:22	1648:22	10	imagewidth
LEAF_NODE	1648:32	1648:32	7	;
FOR_EXPR	1648:34	1648:34	7	col += tw
EXPR	1648:34	1648:34	8	col += tw
ASSIGN	1648:34	1648:41	9	col += tw
LVAL	1648:34	1648:34	10	col
FIELD	1648:34	1648:34	11	col
LEAF_NODE	1648:34	1648:34	12	col
ASSIGN_OP	1648:38	1648:38	10	+=
LEAF_NODE	1648:38	1648:38	11	+=
RVAL	1648:41	1648:41	10	tw
FIELD	1648:41	1648:41	11	tw
LEAF_NODE	1648:41	1648:41	12	tw
LEAF_NODE	1648:43	1648:43	7	)
STATEMENTS	1648:45	1682:2	7	
LEAF_NODE	1648:45	1648:45	8	{
STATEMENTS	1649:3	1681:3	8	
SIMPLE_DECL	1649:3	1649:14	9	tsample_t s ;
VAR_DECL	1649:3	1649:13	10	tsample_t s
TYPE	1649:3	1649:3	11	tsample_t
TYPE_NAME	1649:3	1649:3	12	tsample_t
LEAF_NODE	1649:3	1649:3	13	tsample_t
NAME	1649:13	1649:13	11	s
LEAF_NODE	1649:13	1649:13	12	s
LEAF_NODE	1649:14	1649:14	10	;
ITERATION	1650:3	1650:29	9	
KEYWORD	1650:3	1650:3	10	for
LEAF_NODE	1650:3	1650:3	11	for
LEAF_NODE	1650:7	1650:7	10	(
FOR_INIT	1650:8	1650:13	10	s = 0 ;
EXPR	1650:8	1650:8	11	s = 0
ASSIGN	1650:8	1650:12	12	s = 0
LVAL	1650:8	1650:8	13	s
FIELD	1650:8	1650:8	14	s
LEAF_NODE	1650:8	1650:8	15	s
ASSIGN_OP	1650:10	1650:10	13	=
LEAF_NODE	1650:10	1650:10	14	=
RVAL	1650:12	1650:12	13	0
FIELD	1650:12	1650:12	14	0
LEAF_NODE	1650:12	1650:12	15	0
LEAF_NODE	1650:13	1650:13	11	;
CONDITION	1650:15	1650:15	10	s < spp
EXPR	1650:15	1650:19	11	s < spp
FIELD	1650:15	1650:15	12	s
LEAF_NODE	1650:15	1650:15	13	s
REL_OPERATOR	1650:17	1650:17	12	<
LEAF_NODE	1650:17	1650:17	13	<
FIELD	1650:19	1650:19	12	spp
LEAF_NODE	1650:19	1650:19	13	spp
LEAF_NODE	1650:22	1650:22	10	;
FOR_EXPR	1650:24	1650:24	10	s ++
EXPR	1650:24	1650:24	11	s ++
FIELD	1650:24	1650:25	12	s ++
LEAF_NODE	1650:24	1650:24	13	s
LEAF_NODE	1650:25	1650:25	13	++
LEAF_NODE	1650:27	1650:27	10	)
STATEMENTS	1650:29	1680:3	10	
LEAF_NODE	1650:29	1650:29	11	{
STATEMENTS	1655:4	1670:4	11	
SELECTION	1655:4	1655:31	12	
KEYWORD	1655:4	1655:4	13	if
LEAF_NODE	1655:4	1655:4	14	if
LEAF_NODE	1655:7	1655:7	13	(
CONDITION	1655:8	1655:8	13	colb + tilew > imagew
EXPR	1655:8	1655:23	14	colb + tilew > imagew
FIELD	1655:8	1655:8	15	colb
LEAF_NODE	1655:8	1655:8	16	colb
LEAF_NODE	1655:13	1655:13	15	+
FIELD	1655:15	1655:15	15	tilew
LEAF_NODE	1655:15	1655:15	16	tilew
REL_OPERATOR	1655:21	1655:21	15	>
LEAF_NODE	1655:21	1655:21	16	>
FIELD	1655:23	1655:23	15	imagew
LEAF_NODE	1655:23	1655:23	16	imagew
LEAF_NODE	1655:29	1655:29	13	)
STATEMENTS	1655:31	1664:4	13	
LEAF_NODE	1655:31	1655:31	14	{
STATEMENTS	1656:5	1659:5	14	
SIMPLE_DECL	1656:5	1656:35	15	uint32 width ; width = ( imagew - colb ) ;
VAR_DECL	1656:5	1656:12	16	uint32 width ; width = ( imagew - colb )
TYPE	1656:5	1656:5	17	uint32
TYPE_NAME	1656:5	1656:5	18	uint32
LEAF_NODE	1656:5	1656:5	19	uint32
NAME	1656:12	1656:12	17	width
LEAF_NODE	1656:12	1656:12	18	width
LEAF_NODE	0:0	0:0	17	;
INIT	1656:12	1656:12	17	width = ( imagew - colb )
ASSIGN	1656:12	1656:20	18	width = ( imagew - colb )
LVAL	1656:12	1656:12	19	width
NAME	1656:12	1656:12	20	width
LEAF_NODE	1656:12	1656:12	21	width
ASSIGN_OP	1656:18	1656:18	19	=
LEAF_NODE	1656:18	1656:18	20	=
RVAL	1656:20	1656:34	19	( imagew - colb )
LEAF_NODE	1656:20	1656:20	20	(
FIELD	1656:21	1656:21	20	imagew
LEAF_NODE	1656:21	1656:21	21	imagew
LEAF_NODE	1656:28	1656:28	20	-
FIELD	1656:30	1656:30	20	colb
LEAF_NODE	1656:30	1656:30	21	colb
LEAF_NODE	1656:34	1656:34	20	)
LEAF_NODE	1656:35	1656:35	16	;
SIMPLE_DECL	1657:5	1657:30	15	int oskew ; oskew = tilew - width ;
VAR_DECL	1657:5	1657:9	16	int oskew ; oskew = tilew - width
TYPE	1657:5	1657:5	17	int
TYPE_NAME	1657:5	1657:5	18	int
LEAF_NODE	1657:5	1657:5	19	int
NAME	1657:9	1657:9	17	oskew
LEAF_NODE	1657:9	1657:9	18	oskew
LEAF_NODE	0:0	0:0	17	;
INIT	1657:9	1657:9	17	oskew = tilew - width
ASSIGN	1657:9	1657:17	18	oskew = tilew - width
LVAL	1657:9	1657:9	19	oskew
NAME	1657:9	1657:9	20	oskew
LEAF_NODE	1657:9	1657:9	21	oskew
ASSIGN_OP	1657:15	1657:15	19	=
LEAF_NODE	1657:15	1657:15	20	=
RVAL	1657:17	1657:25	19	tilew - width
FIELD	1657:17	1657:17	20	tilew
LEAF_NODE	1657:17	1657:17	21	tilew
LEAF_NODE	1657:23	1657:23	20	-
FIELD	1657:25	1657:25	20	width
LEAF_NODE	1657:25	1657:25	21	width
LEAF_NODE	1657:30	1657:30	16	;
EXPR_STATEMENT	1659:5	1663:26	15	cpContigBufToSeparateBuf ( obuf , bufp + ( colb * spp ) + s , nrow , width / bytes_per_sample , oskew , ( oskew * spp ) + iskew , spp , bytes_per_sample ) ;
EXPR	1659:5	1659:5	16	cpContigBufToSeparateBuf ( obuf , bufp + ( colb * spp ) + s , nrow , width / bytes_per_sample , oskew , ( oskew * spp ) + iskew , spp , bytes_per_sample )
FUNCTION_CALL	1659:5	1663:25	17	cpContigBufToSeparateBuf ( obuf , bufp + ( colb * spp ) + s , nrow , width / bytes_per_sample , oskew , ( oskew * spp ) + iskew , spp , bytes_per_sample )
CALLEE	1659:5	1659:5	18	cpContigBufToSeparateBuf
LEAF_NODE	1659:5	1659:5	19	cpContigBufToSeparateBuf
LEAF_NODE	1659:29	1659:29	18	(
ARGUMENT	1659:30	1659:30	18	obuf
FIELD	1659:30	1659:30	19	obuf
LEAF_NODE	1659:30	1659:30	20	obuf
LEAF_NODE	1659:34	1659:34	18	,
ARGUMENT	1660:9	1660:29	18	bufp + ( colb * spp ) + s
FIELD	1660:9	1660:9	19	bufp
LEAF_NODE	1660:9	1660:9	20	bufp
LEAF_NODE	1660:14	1660:14	19	+
LEAF_NODE	1660:16	1660:16	19	(
FIELD	1660:17	1660:17	19	colb
LEAF_NODE	1660:17	1660:17	20	colb
LEAF_NODE	1660:21	1660:21	19	*
FIELD	1660:22	1660:22	19	spp
LEAF_NODE	1660:22	1660:22	20	spp
LEAF_NODE	1660:25	1660:25	19	)
LEAF_NODE	1660:27	1660:27	19	+
FIELD	1660:29	1660:29	19	s
LEAF_NODE	1660:29	1660:29	20	s
LEAF_NODE	1660:30	1660:30	18	,
ARGUMENT	1661:9	1661:9	18	nrow
FIELD	1661:9	1661:9	19	nrow
LEAF_NODE	1661:9	1661:9	20	nrow
LEAF_NODE	1661:13	1661:13	18	,
ARGUMENT	1661:15	1661:21	18	width / bytes_per_sample
FIELD	1661:15	1661:15	19	width
LEAF_NODE	1661:15	1661:15	20	width
LEAF_NODE	1661:20	1661:20	19	/
FIELD	1661:21	1661:21	19	bytes_per_sample
LEAF_NODE	1661:21	1661:21	20	bytes_per_sample
LEAF_NODE	1661:37	1661:37	18	,
ARGUMENT	1662:9	1662:9	18	oskew
FIELD	1662:9	1662:9	19	oskew
LEAF_NODE	1662:9	1662:9	20	oskew
LEAF_NODE	1662:14	1662:14	18	,
ARGUMENT	1662:16	1662:28	18	( oskew * spp ) + iskew
LEAF_NODE	1662:16	1662:16	19	(
FIELD	1662:17	1662:17	19	oskew
LEAF_NODE	1662:17	1662:17	20	oskew
LEAF_NODE	1662:22	1662:22	19	*
FIELD	1662:23	1662:23	19	spp
LEAF_NODE	1662:23	1662:23	20	spp
LEAF_NODE	1662:26	1662:26	19	)
LEAF_NODE	1662:27	1662:27	19	+
FIELD	1662:28	1662:28	19	iskew
LEAF_NODE	1662:28	1662:28	20	iskew
LEAF_NODE	1662:33	1662:33	18	,
ARGUMENT	1662:35	1662:35	18	spp
FIELD	1662:35	1662:35	19	spp
LEAF_NODE	1662:35	1662:35	20	spp
LEAF_NODE	1662:38	1662:38	18	,
ARGUMENT	1663:9	1663:9	18	bytes_per_sample
FIELD	1663:9	1663:9	19	bytes_per_sample
LEAF_NODE	1663:9	1663:9	20	bytes_per_sample
LEAF_NODE	1663:25	1663:25	18	)
LEAF_NODE	1663:26	1663:26	16	;
LEAF_NODE	1664:4	1664:4	14	}
SELECTION	1664:6	1665:5	12	
KEYWORD	1664:6	1664:6	13	else
LEAF_NODE	1664:6	1664:6	14	else
STATEMENTS	1665:5	1665:5	13	
EXPR_STATEMENT	1665:5	1669:26	14	cpContigBufToSeparateBuf ( obuf , bufp + ( colb * spp ) + s , nrow , tilewidth , 0 , iskew , spp , bytes_per_sample ) ;
EXPR	1665:5	1665:5	15	cpContigBufToSeparateBuf ( obuf , bufp + ( colb * spp ) + s , nrow , tilewidth , 0 , iskew , spp , bytes_per_sample )
FUNCTION_CALL	1665:5	1669:25	16	cpContigBufToSeparateBuf ( obuf , bufp + ( colb * spp ) + s , nrow , tilewidth , 0 , iskew , spp , bytes_per_sample )
CALLEE	1665:5	1665:5	17	cpContigBufToSeparateBuf
LEAF_NODE	1665:5	1665:5	18	cpContigBufToSeparateBuf
LEAF_NODE	1665:29	1665:29	17	(
ARGUMENT	1665:30	1665:30	17	obuf
FIELD	1665:30	1665:30	18	obuf
LEAF_NODE	1665:30	1665:30	19	obuf
LEAF_NODE	1665:34	1665:34	17	,
ARGUMENT	1666:9	1666:29	17	bufp + ( colb * spp ) + s
FIELD	1666:9	1666:9	18	bufp
LEAF_NODE	1666:9	1666:9	19	bufp
LEAF_NODE	1666:14	1666:14	18	+
LEAF_NODE	1666:16	1666:16	18	(
FIELD	1666:17	1666:17	18	colb
LEAF_NODE	1666:17	1666:17	19	colb
LEAF_NODE	1666:21	1666:21	18	*
FIELD	1666:22	1666:22	18	spp
LEAF_NODE	1666:22	1666:22	19	spp
LEAF_NODE	1666:25	1666:25	18	)
LEAF_NODE	1666:27	1666:27	18	+
FIELD	1666:29	1666:29	18	s
LEAF_NODE	1666:29	1666:29	19	s
LEAF_NODE	1666:30	1666:30	17	,
ARGUMENT	1667:9	1667:9	17	nrow
FIELD	1667:9	1667:9	18	nrow
LEAF_NODE	1667:9	1667:9	19	nrow
LEAF_NODE	1667:13	1667:13	17	,
ARGUMENT	1667:15	1667:15	17	tilewidth
FIELD	1667:15	1667:15	18	tilewidth
LEAF_NODE	1667:15	1667:15	19	tilewidth
LEAF_NODE	1667:24	1667:24	17	,
ARGUMENT	1668:9	1668:9	17	0
FIELD	1668:9	1668:9	18	0
LEAF_NODE	1668:9	1668:9	19	0
LEAF_NODE	1668:10	1668:10	17	,
ARGUMENT	1668:12	1668:12	17	iskew
FIELD	1668:12	1668:12	18	iskew
LEAF_NODE	1668:12	1668:12	19	iskew
LEAF_NODE	1668:17	1668:17	17	,
ARGUMENT	1668:19	1668:19	17	spp
FIELD	1668:19	1668:19	18	spp
LEAF_NODE	1668:19	1668:19	19	spp
LEAF_NODE	1668:22	1668:22	17	,
ARGUMENT	1669:9	1669:9	17	bytes_per_sample
FIELD	1669:9	1669:9	18	bytes_per_sample
LEAF_NODE	1669:9	1669:9	19	bytes_per_sample
LEAF_NODE	1669:25	1669:25	17	)
LEAF_NODE	1669:26	1669:26	15	;
SELECTION	1670:4	1670:54	12	
KEYWORD	1670:4	1670:4	13	if
LEAF_NODE	1670:4	1670:4	14	if
LEAF_NODE	1670:7	1670:7	13	(
CONDITION	1670:8	1670:8	13	TIFFWriteTile ( out , obuf , col , row , 0 , s ) < 0
EXPR	1670:8	1670:51	14	TIFFWriteTile ( out , obuf , col , row , 0 , s ) < 0
FUNCTION_CALL	1670:8	1670:47	15	TIFFWriteTile ( out , obuf , col , row , 0 , s )
CALLEE	1670:8	1670:8	16	TIFFWriteTile
LEAF_NODE	1670:8	1670:8	17	TIFFWriteTile
LEAF_NODE	1670:21	1670:21	16	(
ARGUMENT	1670:22	1670:22	16	out
FIELD	1670:22	1670:22	17	out
LEAF_NODE	1670:22	1670:22	18	out
LEAF_NODE	1670:25	1670:25	16	,
ARGUMENT	1670:27	1670:27	16	obuf
FIELD	1670:27	1670:27	17	obuf
LEAF_NODE	1670:27	1670:27	18	obuf
LEAF_NODE	1670:31	1670:31	16	,
ARGUMENT	1670:33	1670:33	16	col
FIELD	1670:33	1670:33	17	col
LEAF_NODE	1670:33	1670:33	18	col
LEAF_NODE	1670:36	1670:36	16	,
ARGUMENT	1670:38	1670:38	16	row
FIELD	1670:38	1670:38	17	row
LEAF_NODE	1670:38	1670:38	18	row
LEAF_NODE	1670:41	1670:41	16	,
ARGUMENT	1670:43	1670:43	16	0
FIELD	1670:43	1670:43	17	0
LEAF_NODE	1670:43	1670:43	18	0
LEAF_NODE	1670:44	1670:44	16	,
ARGUMENT	1670:46	1670:46	16	s
FIELD	1670:46	1670:46	17	s
LEAF_NODE	1670:46	1670:46	18	s
LEAF_NODE	1670:47	1670:47	16	)
REL_OPERATOR	1670:49	1670:49	15	<
LEAF_NODE	1670:49	1670:49	16	<
FIELD	1670:51	1670:51	15	0
LEAF_NODE	1670:51	1670:51	16	0
LEAF_NODE	1670:52	1670:52	13	)
STATEMENTS	1670:54	1679:4	13	
LEAF_NODE	1670:54	1670:54	14	{
STATEMENTS	1671:5	1678:5	14	
LEAF_NODE	1671:5	1671:5	15	TIFFError
LEAF_NODE	1671:14	1671:14	15	(
LEAF_NODE	1671:15	1671:15	15	TIFFFileName
LEAF_NODE	1671:27	1671:27	15	(
LEAF_NODE	1671:28	1671:28	15	out
LEAF_NODE	1671:31	1671:31	15	)
LEAF_NODE	1671:32	1671:32	15	,
LEAF_NODE	1672:9	1672:9	15	"Error, can't write tile at %lu %lu "
LEAF_NODE	1673:9	1673:9	15	"sample %lu"
LEAF_NODE	1673:21	1673:21	15	,
LEAF_NODE	1674:9	1674:9	15	(
LEAF_NODE	1674:10	1674:10	15	unsigned
LEAF_NODE	1674:19	1674:19	15	long
LEAF_NODE	1674:23	1674:23	15	)
LEAF_NODE	1674:25	1674:25	15	col
LEAF_NODE	1674:28	1674:28	15	,
LEAF_NODE	1675:9	1675:9	15	(
LEAF_NODE	1675:10	1675:10	15	unsigned
LEAF_NODE	1675:19	1675:19	15	long
LEAF_NODE	1675:23	1675:23	15	)
LEAF_NODE	1675:25	1675:25	15	row
LEAF_NODE	1675:28	1675:28	15	,
LEAF_NODE	1676:9	1676:9	15	(
LEAF_NODE	1676:10	1676:10	15	unsigned
LEAF_NODE	1676:19	1676:19	15	long
LEAF_NODE	1676:23	1676:23	15	)
LEAF_NODE	1676:25	1676:25	15	s
LEAF_NODE	1676:26	1676:26	15	)
LEAF_NODE	1676:27	1676:27	15	;
EXPR_STATEMENT	1677:5	1677:20	15	_TIFFfree ( obuf ) ;
EXPR	1677:5	1677:5	16	_TIFFfree ( obuf )
FUNCTION_CALL	1677:5	1677:19	17	_TIFFfree ( obuf )
CALLEE	1677:5	1677:5	18	_TIFFfree
LEAF_NODE	1677:5	1677:5	19	_TIFFfree
LEAF_NODE	1677:14	1677:14	18	(
ARGUMENT	1677:15	1677:15	18	obuf
FIELD	1677:15	1677:15	19	obuf
LEAF_NODE	1677:15	1677:15	20	obuf
LEAF_NODE	1677:19	1677:19	18	)
LEAF_NODE	1677:20	1677:20	16	;
JUMP_STATEMENT	1678:5	1678:13	15	return 0 ;
KEYWORD	1678:5	1678:5	16	return
LEAF_NODE	1678:5	1678:5	17	return
DESTINATION	1678:12	1678:12	16	0
EXPR	1678:12	1678:12	17	0
FIELD	1678:12	1678:12	18	0
LEAF_NODE	1678:12	1678:12	19	0
LEAF_NODE	1678:13	1678:13	16	;
LEAF_NODE	1679:4	1679:4	14	}
LEAF_NODE	1680:3	1680:3	11	}
EXPR_STATEMENT	1681:3	1681:16	9	colb += tilew ;
EXPR	1681:3	1681:3	10	colb += tilew
ASSIGN	1681:3	1681:11	11	colb += tilew
LVAL	1681:3	1681:3	12	colb
FIELD	1681:3	1681:3	13	colb
LEAF_NODE	1681:3	1681:3	14	colb
ASSIGN_OP	1681:8	1681:8	12	+=
LEAF_NODE	1681:8	1681:8	13	+=
RVAL	1681:11	1681:11	12	tilew
FIELD	1681:11	1681:11	13	tilew
LEAF_NODE	1681:11	1681:11	14	tilew
LEAF_NODE	1681:16	1681:16	10	;
LEAF_NODE	1682:2	1682:2	8	}
EXPR_STATEMENT	1683:2	1683:24	6	bufp += nrow * iimagew ;
EXPR	1683:2	1683:2	7	bufp += nrow * iimagew
ASSIGN	1683:2	1683:10	8	bufp += nrow * iimagew
LVAL	1683:2	1683:2	9	bufp
FIELD	1683:2	1683:2	10	bufp
LEAF_NODE	1683:2	1683:2	11	bufp
ASSIGN_OP	1683:7	1683:7	9	+=
LEAF_NODE	1683:7	1683:7	10	+=
RVAL	1683:10	1683:17	9	nrow * iimagew
FIELD	1683:10	1683:10	10	nrow
LEAF_NODE	1683:10	1683:10	11	nrow
LEAF_NODE	1683:15	1683:15	10	*
FIELD	1683:17	1683:17	10	iimagew
LEAF_NODE	1683:17	1683:17	11	iimagew
LEAF_NODE	1683:24	1683:24	7	;
LEAF_NODE	1684:1	1684:1	5	}
EXPR_STATEMENT	1685:1	1685:16	3	_TIFFfree ( obuf ) ;
EXPR	1685:1	1685:1	4	_TIFFfree ( obuf )
FUNCTION_CALL	1685:1	1685:15	5	_TIFFfree ( obuf )
CALLEE	1685:1	1685:1	6	_TIFFfree
LEAF_NODE	1685:1	1685:1	7	_TIFFfree
LEAF_NODE	1685:10	1685:10	6	(
ARGUMENT	1685:11	1685:11	6	obuf
FIELD	1685:11	1685:11	7	obuf
LEAF_NODE	1685:11	1685:11	8	obuf
LEAF_NODE	1685:15	1685:15	6	)
LEAF_NODE	1685:16	1685:16	4	;
JUMP_STATEMENT	1686:1	1686:9	3	return 1 ;
KEYWORD	1686:1	1686:1	4	return
LEAF_NODE	1686:1	1686:1	5	return
DESTINATION	1686:8	1686:8	4	1
EXPR	1686:8	1686:8	5	1
FIELD	1686:8	1686:8	6	1
LEAF_NODE	1686:8	1686:8	7	1
LEAF_NODE	1686:9	1686:9	4	;
LEAF_NODE	1687:0	1687:0	2	}
FUNCTION_DEF	0:0	1698:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1692:0	1692:0	2	DECLAREcpFunc
LEAF_NODE	1692:0	1692:0	3	DECLAREcpFunc
PARAMETER_LIST	1692:13	1692:40	2	( cpContigStrips2ContigTiles )
LEAF_NODE	1692:13	1692:13	3	(
PARAMETER_DECL	1692:14	1692:14	3	cpContigStrips2ContigTiles
LEAF_NODE	1692:14	1692:14	4	cpContigStrips2ContigTiles
LEAF_NODE	1692:40	1692:40	3	)
LEAF_NODE	1693:0	1693:0	2	{
STATEMENTS	1694:1	1694:1	2	
JUMP_STATEMENT	1694:1	1697:34	3	return cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1694:1	1694:1	4	return
LEAF_NODE	1694:1	1694:1	5	return
DESTINATION	1694:8	1694:8	4	cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
EXPR	1694:8	1694:8	5	cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1694:8	1697:33	6	cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
CALLEE	1694:8	1694:8	7	cpImage
LEAF_NODE	1694:8	1694:8	8	cpImage
LEAF_NODE	1694:15	1694:15	7	(
ARGUMENT	1694:16	1694:16	7	in
FIELD	1694:16	1694:16	8	in
LEAF_NODE	1694:16	1694:16	9	in
LEAF_NODE	1694:18	1694:18	7	,
ARGUMENT	1694:20	1694:20	7	out
FIELD	1694:20	1694:20	8	out
LEAF_NODE	1694:20	1694:20	9	out
LEAF_NODE	1694:23	1694:23	7	,
ARGUMENT	1695:5	1695:5	7	readContigStripsIntoBuffer
FIELD	1695:5	1695:5	8	readContigStripsIntoBuffer
LEAF_NODE	1695:5	1695:5	9	readContigStripsIntoBuffer
LEAF_NODE	1695:31	1695:31	7	,
ARGUMENT	1696:5	1696:5	7	writeBufferToContigTiles
FIELD	1696:5	1696:5	8	writeBufferToContigTiles
LEAF_NODE	1696:5	1696:5	9	writeBufferToContigTiles
LEAF_NODE	1696:29	1696:29	7	,
ARGUMENT	1697:5	1697:5	7	imagelength
FIELD	1697:5	1697:5	8	imagelength
LEAF_NODE	1697:5	1697:5	9	imagelength
LEAF_NODE	1697:16	1697:16	7	,
ARGUMENT	1697:18	1697:18	7	imagewidth
FIELD	1697:18	1697:18	8	imagewidth
LEAF_NODE	1697:18	1697:18	9	imagewidth
LEAF_NODE	1697:28	1697:28	7	,
ARGUMENT	1697:30	1697:30	7	spp
FIELD	1697:30	1697:30	8	spp
LEAF_NODE	1697:30	1697:30	9	spp
LEAF_NODE	1697:33	1697:33	7	)
LEAF_NODE	1697:34	1697:34	4	;
LEAF_NODE	1698:0	1698:0	2	}
FUNCTION_DEF	0:0	1709:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1703:0	1703:0	2	DECLAREcpFunc
LEAF_NODE	1703:0	1703:0	3	DECLAREcpFunc
PARAMETER_LIST	1703:13	1703:42	2	( cpContigStrips2SeparateTiles )
LEAF_NODE	1703:13	1703:13	3	(
PARAMETER_DECL	1703:14	1703:14	3	cpContigStrips2SeparateTiles
LEAF_NODE	1703:14	1703:14	4	cpContigStrips2SeparateTiles
LEAF_NODE	1703:42	1703:42	3	)
LEAF_NODE	1704:0	1704:0	2	{
STATEMENTS	1705:1	1705:1	2	
JUMP_STATEMENT	1705:1	1708:34	3	return cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1705:1	1705:1	4	return
LEAF_NODE	1705:1	1705:1	5	return
DESTINATION	1705:8	1705:8	4	cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
EXPR	1705:8	1705:8	5	cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1705:8	1708:33	6	cpImage ( in , out , readContigStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
CALLEE	1705:8	1705:8	7	cpImage
LEAF_NODE	1705:8	1705:8	8	cpImage
LEAF_NODE	1705:15	1705:15	7	(
ARGUMENT	1705:16	1705:16	7	in
FIELD	1705:16	1705:16	8	in
LEAF_NODE	1705:16	1705:16	9	in
LEAF_NODE	1705:18	1705:18	7	,
ARGUMENT	1705:20	1705:20	7	out
FIELD	1705:20	1705:20	8	out
LEAF_NODE	1705:20	1705:20	9	out
LEAF_NODE	1705:23	1705:23	7	,
ARGUMENT	1706:5	1706:5	7	readContigStripsIntoBuffer
FIELD	1706:5	1706:5	8	readContigStripsIntoBuffer
LEAF_NODE	1706:5	1706:5	9	readContigStripsIntoBuffer
LEAF_NODE	1706:31	1706:31	7	,
ARGUMENT	1707:5	1707:5	7	writeBufferToSeparateTiles
FIELD	1707:5	1707:5	8	writeBufferToSeparateTiles
LEAF_NODE	1707:5	1707:5	9	writeBufferToSeparateTiles
LEAF_NODE	1707:31	1707:31	7	,
ARGUMENT	1708:5	1708:5	7	imagelength
FIELD	1708:5	1708:5	8	imagelength
LEAF_NODE	1708:5	1708:5	9	imagelength
LEAF_NODE	1708:16	1708:16	7	,
ARGUMENT	1708:18	1708:18	7	imagewidth
FIELD	1708:18	1708:18	8	imagewidth
LEAF_NODE	1708:18	1708:18	9	imagewidth
LEAF_NODE	1708:28	1708:28	7	,
ARGUMENT	1708:30	1708:30	7	spp
FIELD	1708:30	1708:30	8	spp
LEAF_NODE	1708:30	1708:30	9	spp
LEAF_NODE	1708:33	1708:33	7	)
LEAF_NODE	1708:34	1708:34	4	;
LEAF_NODE	1709:0	1709:0	2	}
FUNCTION_DEF	0:0	1720:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1714:0	1714:0	2	DECLAREcpFunc
LEAF_NODE	1714:0	1714:0	3	DECLAREcpFunc
PARAMETER_LIST	1714:13	1714:42	2	( cpSeparateStrips2ContigTiles )
LEAF_NODE	1714:13	1714:13	3	(
PARAMETER_DECL	1714:14	1714:14	3	cpSeparateStrips2ContigTiles
LEAF_NODE	1714:14	1714:14	4	cpSeparateStrips2ContigTiles
LEAF_NODE	1714:42	1714:42	3	)
LEAF_NODE	1715:0	1715:0	2	{
STATEMENTS	1716:1	1716:1	2	
JUMP_STATEMENT	1716:1	1719:34	3	return cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1716:1	1716:1	4	return
LEAF_NODE	1716:1	1716:1	5	return
DESTINATION	1716:8	1716:8	4	cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
EXPR	1716:8	1716:8	5	cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1716:8	1719:33	6	cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
CALLEE	1716:8	1716:8	7	cpImage
LEAF_NODE	1716:8	1716:8	8	cpImage
LEAF_NODE	1716:15	1716:15	7	(
ARGUMENT	1716:16	1716:16	7	in
FIELD	1716:16	1716:16	8	in
LEAF_NODE	1716:16	1716:16	9	in
LEAF_NODE	1716:18	1716:18	7	,
ARGUMENT	1716:20	1716:20	7	out
FIELD	1716:20	1716:20	8	out
LEAF_NODE	1716:20	1716:20	9	out
LEAF_NODE	1716:23	1716:23	7	,
ARGUMENT	1717:5	1717:5	7	readSeparateStripsIntoBuffer
FIELD	1717:5	1717:5	8	readSeparateStripsIntoBuffer
LEAF_NODE	1717:5	1717:5	9	readSeparateStripsIntoBuffer
LEAF_NODE	1717:33	1717:33	7	,
ARGUMENT	1718:5	1718:5	7	writeBufferToContigTiles
FIELD	1718:5	1718:5	8	writeBufferToContigTiles
LEAF_NODE	1718:5	1718:5	9	writeBufferToContigTiles
LEAF_NODE	1718:29	1718:29	7	,
ARGUMENT	1719:5	1719:5	7	imagelength
FIELD	1719:5	1719:5	8	imagelength
LEAF_NODE	1719:5	1719:5	9	imagelength
LEAF_NODE	1719:16	1719:16	7	,
ARGUMENT	1719:18	1719:18	7	imagewidth
FIELD	1719:18	1719:18	8	imagewidth
LEAF_NODE	1719:18	1719:18	9	imagewidth
LEAF_NODE	1719:28	1719:28	7	,
ARGUMENT	1719:30	1719:30	7	spp
FIELD	1719:30	1719:30	8	spp
LEAF_NODE	1719:30	1719:30	9	spp
LEAF_NODE	1719:33	1719:33	7	)
LEAF_NODE	1719:34	1719:34	4	;
LEAF_NODE	1720:0	1720:0	2	}
FUNCTION_DEF	0:0	1731:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1725:0	1725:0	2	DECLAREcpFunc
LEAF_NODE	1725:0	1725:0	3	DECLAREcpFunc
PARAMETER_LIST	1725:13	1725:44	2	( cpSeparateStrips2SeparateTiles )
LEAF_NODE	1725:13	1725:13	3	(
PARAMETER_DECL	1725:14	1725:14	3	cpSeparateStrips2SeparateTiles
LEAF_NODE	1725:14	1725:14	4	cpSeparateStrips2SeparateTiles
LEAF_NODE	1725:44	1725:44	3	)
LEAF_NODE	1726:0	1726:0	2	{
STATEMENTS	1727:1	1727:1	2	
JUMP_STATEMENT	1727:1	1730:34	3	return cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1727:1	1727:1	4	return
LEAF_NODE	1727:1	1727:1	5	return
DESTINATION	1727:8	1727:8	4	cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
EXPR	1727:8	1727:8	5	cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1727:8	1730:33	6	cpImage ( in , out , readSeparateStripsIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
CALLEE	1727:8	1727:8	7	cpImage
LEAF_NODE	1727:8	1727:8	8	cpImage
LEAF_NODE	1727:15	1727:15	7	(
ARGUMENT	1727:16	1727:16	7	in
FIELD	1727:16	1727:16	8	in
LEAF_NODE	1727:16	1727:16	9	in
LEAF_NODE	1727:18	1727:18	7	,
ARGUMENT	1727:20	1727:20	7	out
FIELD	1727:20	1727:20	8	out
LEAF_NODE	1727:20	1727:20	9	out
LEAF_NODE	1727:23	1727:23	7	,
ARGUMENT	1728:5	1728:5	7	readSeparateStripsIntoBuffer
FIELD	1728:5	1728:5	8	readSeparateStripsIntoBuffer
LEAF_NODE	1728:5	1728:5	9	readSeparateStripsIntoBuffer
LEAF_NODE	1728:33	1728:33	7	,
ARGUMENT	1729:5	1729:5	7	writeBufferToSeparateTiles
FIELD	1729:5	1729:5	8	writeBufferToSeparateTiles
LEAF_NODE	1729:5	1729:5	9	writeBufferToSeparateTiles
LEAF_NODE	1729:31	1729:31	7	,
ARGUMENT	1730:5	1730:5	7	imagelength
FIELD	1730:5	1730:5	8	imagelength
LEAF_NODE	1730:5	1730:5	9	imagelength
LEAF_NODE	1730:16	1730:16	7	,
ARGUMENT	1730:18	1730:18	7	imagewidth
FIELD	1730:18	1730:18	8	imagewidth
LEAF_NODE	1730:18	1730:18	9	imagewidth
LEAF_NODE	1730:28	1730:28	7	,
ARGUMENT	1730:30	1730:30	7	spp
FIELD	1730:30	1730:30	8	spp
LEAF_NODE	1730:30	1730:30	9	spp
LEAF_NODE	1730:33	1730:33	7	)
LEAF_NODE	1730:34	1730:34	4	;
LEAF_NODE	1731:0	1731:0	2	}
FUNCTION_DEF	0:0	1742:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1736:0	1736:0	2	DECLAREcpFunc
LEAF_NODE	1736:0	1736:0	3	DECLAREcpFunc
PARAMETER_LIST	1736:13	1736:39	2	( cpContigTiles2ContigTiles )
LEAF_NODE	1736:13	1736:13	3	(
PARAMETER_DECL	1736:14	1736:14	3	cpContigTiles2ContigTiles
LEAF_NODE	1736:14	1736:14	4	cpContigTiles2ContigTiles
LEAF_NODE	1736:39	1736:39	3	)
LEAF_NODE	1737:0	1737:0	2	{
STATEMENTS	1738:1	1738:1	2	
JUMP_STATEMENT	1738:1	1741:34	3	return cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1738:1	1738:1	4	return
LEAF_NODE	1738:1	1738:1	5	return
DESTINATION	1738:8	1738:8	4	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
EXPR	1738:8	1738:8	5	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1738:8	1741:33	6	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
CALLEE	1738:8	1738:8	7	cpImage
LEAF_NODE	1738:8	1738:8	8	cpImage
LEAF_NODE	1738:15	1738:15	7	(
ARGUMENT	1738:16	1738:16	7	in
FIELD	1738:16	1738:16	8	in
LEAF_NODE	1738:16	1738:16	9	in
LEAF_NODE	1738:18	1738:18	7	,
ARGUMENT	1738:20	1738:20	7	out
FIELD	1738:20	1738:20	8	out
LEAF_NODE	1738:20	1738:20	9	out
LEAF_NODE	1738:23	1738:23	7	,
ARGUMENT	1739:5	1739:5	7	readContigTilesIntoBuffer
FIELD	1739:5	1739:5	8	readContigTilesIntoBuffer
LEAF_NODE	1739:5	1739:5	9	readContigTilesIntoBuffer
LEAF_NODE	1739:30	1739:30	7	,
ARGUMENT	1740:5	1740:5	7	writeBufferToContigTiles
FIELD	1740:5	1740:5	8	writeBufferToContigTiles
LEAF_NODE	1740:5	1740:5	9	writeBufferToContigTiles
LEAF_NODE	1740:29	1740:29	7	,
ARGUMENT	1741:5	1741:5	7	imagelength
FIELD	1741:5	1741:5	8	imagelength
LEAF_NODE	1741:5	1741:5	9	imagelength
LEAF_NODE	1741:16	1741:16	7	,
ARGUMENT	1741:18	1741:18	7	imagewidth
FIELD	1741:18	1741:18	8	imagewidth
LEAF_NODE	1741:18	1741:18	9	imagewidth
LEAF_NODE	1741:28	1741:28	7	,
ARGUMENT	1741:30	1741:30	7	spp
FIELD	1741:30	1741:30	8	spp
LEAF_NODE	1741:30	1741:30	9	spp
LEAF_NODE	1741:33	1741:33	7	)
LEAF_NODE	1741:34	1741:34	4	;
LEAF_NODE	1742:0	1742:0	2	}
FUNCTION_DEF	0:0	1753:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1747:0	1747:0	2	DECLAREcpFunc
LEAF_NODE	1747:0	1747:0	3	DECLAREcpFunc
PARAMETER_LIST	1747:13	1747:41	2	( cpContigTiles2SeparateTiles )
LEAF_NODE	1747:13	1747:13	3	(
PARAMETER_DECL	1747:14	1747:14	3	cpContigTiles2SeparateTiles
LEAF_NODE	1747:14	1747:14	4	cpContigTiles2SeparateTiles
LEAF_NODE	1747:41	1747:41	3	)
LEAF_NODE	1748:0	1748:0	2	{
STATEMENTS	1749:1	1749:1	2	
JUMP_STATEMENT	1749:1	1752:34	3	return cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1749:1	1749:1	4	return
LEAF_NODE	1749:1	1749:1	5	return
DESTINATION	1749:8	1749:8	4	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
EXPR	1749:8	1749:8	5	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1749:8	1752:33	6	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
CALLEE	1749:8	1749:8	7	cpImage
LEAF_NODE	1749:8	1749:8	8	cpImage
LEAF_NODE	1749:15	1749:15	7	(
ARGUMENT	1749:16	1749:16	7	in
FIELD	1749:16	1749:16	8	in
LEAF_NODE	1749:16	1749:16	9	in
LEAF_NODE	1749:18	1749:18	7	,
ARGUMENT	1749:20	1749:20	7	out
FIELD	1749:20	1749:20	8	out
LEAF_NODE	1749:20	1749:20	9	out
LEAF_NODE	1749:23	1749:23	7	,
ARGUMENT	1750:5	1750:5	7	readContigTilesIntoBuffer
FIELD	1750:5	1750:5	8	readContigTilesIntoBuffer
LEAF_NODE	1750:5	1750:5	9	readContigTilesIntoBuffer
LEAF_NODE	1750:30	1750:30	7	,
ARGUMENT	1751:5	1751:5	7	writeBufferToSeparateTiles
FIELD	1751:5	1751:5	8	writeBufferToSeparateTiles
LEAF_NODE	1751:5	1751:5	9	writeBufferToSeparateTiles
LEAF_NODE	1751:31	1751:31	7	,
ARGUMENT	1752:5	1752:5	7	imagelength
FIELD	1752:5	1752:5	8	imagelength
LEAF_NODE	1752:5	1752:5	9	imagelength
LEAF_NODE	1752:16	1752:16	7	,
ARGUMENT	1752:18	1752:18	7	imagewidth
FIELD	1752:18	1752:18	8	imagewidth
LEAF_NODE	1752:18	1752:18	9	imagewidth
LEAF_NODE	1752:28	1752:28	7	,
ARGUMENT	1752:30	1752:30	7	spp
FIELD	1752:30	1752:30	8	spp
LEAF_NODE	1752:30	1752:30	9	spp
LEAF_NODE	1752:33	1752:33	7	)
LEAF_NODE	1752:34	1752:34	4	;
LEAF_NODE	1753:0	1753:0	2	}
FUNCTION_DEF	0:0	1764:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1758:0	1758:0	2	DECLAREcpFunc
LEAF_NODE	1758:0	1758:0	3	DECLAREcpFunc
PARAMETER_LIST	1758:13	1758:41	2	( cpSeparateTiles2ContigTiles )
LEAF_NODE	1758:13	1758:13	3	(
PARAMETER_DECL	1758:14	1758:14	3	cpSeparateTiles2ContigTiles
LEAF_NODE	1758:14	1758:14	4	cpSeparateTiles2ContigTiles
LEAF_NODE	1758:41	1758:41	3	)
LEAF_NODE	1759:0	1759:0	2	{
STATEMENTS	1760:1	1760:1	2	
JUMP_STATEMENT	1760:1	1763:34	3	return cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1760:1	1760:1	4	return
LEAF_NODE	1760:1	1760:1	5	return
DESTINATION	1760:8	1760:8	4	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
EXPR	1760:8	1760:8	5	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1760:8	1763:33	6	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigTiles , imagelength , imagewidth , spp )
CALLEE	1760:8	1760:8	7	cpImage
LEAF_NODE	1760:8	1760:8	8	cpImage
LEAF_NODE	1760:15	1760:15	7	(
ARGUMENT	1760:16	1760:16	7	in
FIELD	1760:16	1760:16	8	in
LEAF_NODE	1760:16	1760:16	9	in
LEAF_NODE	1760:18	1760:18	7	,
ARGUMENT	1760:20	1760:20	7	out
FIELD	1760:20	1760:20	8	out
LEAF_NODE	1760:20	1760:20	9	out
LEAF_NODE	1760:23	1760:23	7	,
ARGUMENT	1761:5	1761:5	7	readSeparateTilesIntoBuffer
FIELD	1761:5	1761:5	8	readSeparateTilesIntoBuffer
LEAF_NODE	1761:5	1761:5	9	readSeparateTilesIntoBuffer
LEAF_NODE	1761:32	1761:32	7	,
ARGUMENT	1762:5	1762:5	7	writeBufferToContigTiles
FIELD	1762:5	1762:5	8	writeBufferToContigTiles
LEAF_NODE	1762:5	1762:5	9	writeBufferToContigTiles
LEAF_NODE	1762:29	1762:29	7	,
ARGUMENT	1763:5	1763:5	7	imagelength
FIELD	1763:5	1763:5	8	imagelength
LEAF_NODE	1763:5	1763:5	9	imagelength
LEAF_NODE	1763:16	1763:16	7	,
ARGUMENT	1763:18	1763:18	7	imagewidth
FIELD	1763:18	1763:18	8	imagewidth
LEAF_NODE	1763:18	1763:18	9	imagewidth
LEAF_NODE	1763:28	1763:28	7	,
ARGUMENT	1763:30	1763:30	7	spp
FIELD	1763:30	1763:30	8	spp
LEAF_NODE	1763:30	1763:30	9	spp
LEAF_NODE	1763:33	1763:33	7	)
LEAF_NODE	1763:34	1763:34	4	;
LEAF_NODE	1764:0	1764:0	2	}
FUNCTION_DEF	0:0	1775:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1769:0	1769:0	2	DECLAREcpFunc
LEAF_NODE	1769:0	1769:0	3	DECLAREcpFunc
PARAMETER_LIST	1769:13	1769:43	2	( cpSeparateTiles2SeparateTiles )
LEAF_NODE	1769:13	1769:13	3	(
PARAMETER_DECL	1769:14	1769:14	3	cpSeparateTiles2SeparateTiles
LEAF_NODE	1769:14	1769:14	4	cpSeparateTiles2SeparateTiles
LEAF_NODE	1769:43	1769:43	3	)
LEAF_NODE	1770:0	1770:0	2	{
STATEMENTS	1771:1	1771:1	2	
JUMP_STATEMENT	1771:1	1774:34	3	return cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp ) ;
KEYWORD	1771:1	1771:1	4	return
LEAF_NODE	1771:1	1771:1	5	return
DESTINATION	1771:8	1771:8	4	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
EXPR	1771:8	1771:8	5	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
FUNCTION_CALL	1771:8	1774:33	6	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateTiles , imagelength , imagewidth , spp )
CALLEE	1771:8	1771:8	7	cpImage
LEAF_NODE	1771:8	1771:8	8	cpImage
LEAF_NODE	1771:15	1771:15	7	(
ARGUMENT	1771:16	1771:16	7	in
FIELD	1771:16	1771:16	8	in
LEAF_NODE	1771:16	1771:16	9	in
LEAF_NODE	1771:18	1771:18	7	,
ARGUMENT	1771:20	1771:20	7	out
FIELD	1771:20	1771:20	8	out
LEAF_NODE	1771:20	1771:20	9	out
LEAF_NODE	1771:23	1771:23	7	,
ARGUMENT	1772:5	1772:5	7	readSeparateTilesIntoBuffer
FIELD	1772:5	1772:5	8	readSeparateTilesIntoBuffer
LEAF_NODE	1772:5	1772:5	9	readSeparateTilesIntoBuffer
LEAF_NODE	1772:32	1772:32	7	,
ARGUMENT	1773:5	1773:5	7	writeBufferToSeparateTiles
FIELD	1773:5	1773:5	8	writeBufferToSeparateTiles
LEAF_NODE	1773:5	1773:5	9	writeBufferToSeparateTiles
LEAF_NODE	1773:31	1773:31	7	,
ARGUMENT	1774:5	1774:5	7	imagelength
FIELD	1774:5	1774:5	8	imagelength
LEAF_NODE	1774:5	1774:5	9	imagelength
LEAF_NODE	1774:16	1774:16	7	,
ARGUMENT	1774:18	1774:18	7	imagewidth
FIELD	1774:18	1774:18	8	imagewidth
LEAF_NODE	1774:18	1774:18	9	imagewidth
LEAF_NODE	1774:28	1774:28	7	,
ARGUMENT	1774:30	1774:30	7	spp
FIELD	1774:30	1774:30	8	spp
LEAF_NODE	1774:30	1774:30	9	spp
LEAF_NODE	1774:33	1774:33	7	)
LEAF_NODE	1774:34	1774:34	4	;
LEAF_NODE	1775:0	1775:0	2	}
FUNCTION_DEF	0:0	1786:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1780:0	1780:0	2	DECLAREcpFunc
LEAF_NODE	1780:0	1780:0	3	DECLAREcpFunc
PARAMETER_LIST	1780:13	1780:40	2	( cpContigTiles2ContigStrips )
LEAF_NODE	1780:13	1780:13	3	(
PARAMETER_DECL	1780:14	1780:14	3	cpContigTiles2ContigStrips
LEAF_NODE	1780:14	1780:14	4	cpContigTiles2ContigStrips
LEAF_NODE	1780:40	1780:40	3	)
LEAF_NODE	1781:0	1781:0	2	{
STATEMENTS	1782:1	1782:1	2	
JUMP_STATEMENT	1782:1	1785:34	3	return cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp ) ;
KEYWORD	1782:1	1782:1	4	return
LEAF_NODE	1782:1	1782:1	5	return
DESTINATION	1782:8	1782:8	4	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp )
EXPR	1782:8	1782:8	5	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp )
FUNCTION_CALL	1782:8	1785:33	6	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp )
CALLEE	1782:8	1782:8	7	cpImage
LEAF_NODE	1782:8	1782:8	8	cpImage
LEAF_NODE	1782:15	1782:15	7	(
ARGUMENT	1782:16	1782:16	7	in
FIELD	1782:16	1782:16	8	in
LEAF_NODE	1782:16	1782:16	9	in
LEAF_NODE	1782:18	1782:18	7	,
ARGUMENT	1782:20	1782:20	7	out
FIELD	1782:20	1782:20	8	out
LEAF_NODE	1782:20	1782:20	9	out
LEAF_NODE	1782:23	1782:23	7	,
ARGUMENT	1783:5	1783:5	7	readContigTilesIntoBuffer
FIELD	1783:5	1783:5	8	readContigTilesIntoBuffer
LEAF_NODE	1783:5	1783:5	9	readContigTilesIntoBuffer
LEAF_NODE	1783:30	1783:30	7	,
ARGUMENT	1784:5	1784:5	7	writeBufferToContigStrips
FIELD	1784:5	1784:5	8	writeBufferToContigStrips
LEAF_NODE	1784:5	1784:5	9	writeBufferToContigStrips
LEAF_NODE	1784:30	1784:30	7	,
ARGUMENT	1785:5	1785:5	7	imagelength
FIELD	1785:5	1785:5	8	imagelength
LEAF_NODE	1785:5	1785:5	9	imagelength
LEAF_NODE	1785:16	1785:16	7	,
ARGUMENT	1785:18	1785:18	7	imagewidth
FIELD	1785:18	1785:18	8	imagewidth
LEAF_NODE	1785:18	1785:18	9	imagewidth
LEAF_NODE	1785:28	1785:28	7	,
ARGUMENT	1785:30	1785:30	7	spp
FIELD	1785:30	1785:30	8	spp
LEAF_NODE	1785:30	1785:30	9	spp
LEAF_NODE	1785:33	1785:33	7	)
LEAF_NODE	1785:34	1785:34	4	;
LEAF_NODE	1786:0	1786:0	2	}
FUNCTION_DEF	0:0	1797:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1791:0	1791:0	2	DECLAREcpFunc
LEAF_NODE	1791:0	1791:0	3	DECLAREcpFunc
PARAMETER_LIST	1791:13	1791:42	2	( cpContigTiles2SeparateStrips )
LEAF_NODE	1791:13	1791:13	3	(
PARAMETER_DECL	1791:14	1791:14	3	cpContigTiles2SeparateStrips
LEAF_NODE	1791:14	1791:14	4	cpContigTiles2SeparateStrips
LEAF_NODE	1791:42	1791:42	3	)
LEAF_NODE	1792:0	1792:0	2	{
STATEMENTS	1793:1	1793:1	2	
JUMP_STATEMENT	1793:1	1796:34	3	return cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp ) ;
KEYWORD	1793:1	1793:1	4	return
LEAF_NODE	1793:1	1793:1	5	return
DESTINATION	1793:8	1793:8	4	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp )
EXPR	1793:8	1793:8	5	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp )
FUNCTION_CALL	1793:8	1796:33	6	cpImage ( in , out , readContigTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp )
CALLEE	1793:8	1793:8	7	cpImage
LEAF_NODE	1793:8	1793:8	8	cpImage
LEAF_NODE	1793:15	1793:15	7	(
ARGUMENT	1793:16	1793:16	7	in
FIELD	1793:16	1793:16	8	in
LEAF_NODE	1793:16	1793:16	9	in
LEAF_NODE	1793:18	1793:18	7	,
ARGUMENT	1793:20	1793:20	7	out
FIELD	1793:20	1793:20	8	out
LEAF_NODE	1793:20	1793:20	9	out
LEAF_NODE	1793:23	1793:23	7	,
ARGUMENT	1794:5	1794:5	7	readContigTilesIntoBuffer
FIELD	1794:5	1794:5	8	readContigTilesIntoBuffer
LEAF_NODE	1794:5	1794:5	9	readContigTilesIntoBuffer
LEAF_NODE	1794:30	1794:30	7	,
ARGUMENT	1795:5	1795:5	7	writeBufferToSeparateStrips
FIELD	1795:5	1795:5	8	writeBufferToSeparateStrips
LEAF_NODE	1795:5	1795:5	9	writeBufferToSeparateStrips
LEAF_NODE	1795:32	1795:32	7	,
ARGUMENT	1796:5	1796:5	7	imagelength
FIELD	1796:5	1796:5	8	imagelength
LEAF_NODE	1796:5	1796:5	9	imagelength
LEAF_NODE	1796:16	1796:16	7	,
ARGUMENT	1796:18	1796:18	7	imagewidth
FIELD	1796:18	1796:18	8	imagewidth
LEAF_NODE	1796:18	1796:18	9	imagewidth
LEAF_NODE	1796:28	1796:28	7	,
ARGUMENT	1796:30	1796:30	7	spp
FIELD	1796:30	1796:30	8	spp
LEAF_NODE	1796:30	1796:30	9	spp
LEAF_NODE	1796:33	1796:33	7	)
LEAF_NODE	1796:34	1796:34	4	;
LEAF_NODE	1797:0	1797:0	2	}
FUNCTION_DEF	0:0	1808:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1802:0	1802:0	2	DECLAREcpFunc
LEAF_NODE	1802:0	1802:0	3	DECLAREcpFunc
PARAMETER_LIST	1802:13	1802:42	2	( cpSeparateTiles2ContigStrips )
LEAF_NODE	1802:13	1802:13	3	(
PARAMETER_DECL	1802:14	1802:14	3	cpSeparateTiles2ContigStrips
LEAF_NODE	1802:14	1802:14	4	cpSeparateTiles2ContigStrips
LEAF_NODE	1802:42	1802:42	3	)
LEAF_NODE	1803:0	1803:0	2	{
STATEMENTS	1804:1	1804:1	2	
JUMP_STATEMENT	1804:1	1807:34	3	return cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp ) ;
KEYWORD	1804:1	1804:1	4	return
LEAF_NODE	1804:1	1804:1	5	return
DESTINATION	1804:8	1804:8	4	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp )
EXPR	1804:8	1804:8	5	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp )
FUNCTION_CALL	1804:8	1807:33	6	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToContigStrips , imagelength , imagewidth , spp )
CALLEE	1804:8	1804:8	7	cpImage
LEAF_NODE	1804:8	1804:8	8	cpImage
LEAF_NODE	1804:15	1804:15	7	(
ARGUMENT	1804:16	1804:16	7	in
FIELD	1804:16	1804:16	8	in
LEAF_NODE	1804:16	1804:16	9	in
LEAF_NODE	1804:18	1804:18	7	,
ARGUMENT	1804:20	1804:20	7	out
FIELD	1804:20	1804:20	8	out
LEAF_NODE	1804:20	1804:20	9	out
LEAF_NODE	1804:23	1804:23	7	,
ARGUMENT	1805:5	1805:5	7	readSeparateTilesIntoBuffer
FIELD	1805:5	1805:5	8	readSeparateTilesIntoBuffer
LEAF_NODE	1805:5	1805:5	9	readSeparateTilesIntoBuffer
LEAF_NODE	1805:32	1805:32	7	,
ARGUMENT	1806:5	1806:5	7	writeBufferToContigStrips
FIELD	1806:5	1806:5	8	writeBufferToContigStrips
LEAF_NODE	1806:5	1806:5	9	writeBufferToContigStrips
LEAF_NODE	1806:30	1806:30	7	,
ARGUMENT	1807:5	1807:5	7	imagelength
FIELD	1807:5	1807:5	8	imagelength
LEAF_NODE	1807:5	1807:5	9	imagelength
LEAF_NODE	1807:16	1807:16	7	,
ARGUMENT	1807:18	1807:18	7	imagewidth
FIELD	1807:18	1807:18	8	imagewidth
LEAF_NODE	1807:18	1807:18	9	imagewidth
LEAF_NODE	1807:28	1807:28	7	,
ARGUMENT	1807:30	1807:30	7	spp
FIELD	1807:30	1807:30	8	spp
LEAF_NODE	1807:30	1807:30	9	spp
LEAF_NODE	1807:33	1807:33	7	)
LEAF_NODE	1807:34	1807:34	4	;
LEAF_NODE	1808:0	1808:0	2	}
FUNCTION_DEF	0:0	1819:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	1813:0	1813:0	2	DECLAREcpFunc
LEAF_NODE	1813:0	1813:0	3	DECLAREcpFunc
PARAMETER_LIST	1813:13	1813:44	2	( cpSeparateTiles2SeparateStrips )
LEAF_NODE	1813:13	1813:13	3	(
PARAMETER_DECL	1813:14	1813:14	3	cpSeparateTiles2SeparateStrips
LEAF_NODE	1813:14	1813:14	4	cpSeparateTiles2SeparateStrips
LEAF_NODE	1813:44	1813:44	3	)
LEAF_NODE	1814:0	1814:0	2	{
STATEMENTS	1815:1	1815:1	2	
JUMP_STATEMENT	1815:1	1818:34	3	return cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp ) ;
KEYWORD	1815:1	1815:1	4	return
LEAF_NODE	1815:1	1815:1	5	return
DESTINATION	1815:8	1815:8	4	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp )
EXPR	1815:8	1815:8	5	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp )
FUNCTION_CALL	1815:8	1818:33	6	cpImage ( in , out , readSeparateTilesIntoBuffer , writeBufferToSeparateStrips , imagelength , imagewidth , spp )
CALLEE	1815:8	1815:8	7	cpImage
LEAF_NODE	1815:8	1815:8	8	cpImage
LEAF_NODE	1815:15	1815:15	7	(
ARGUMENT	1815:16	1815:16	7	in
FIELD	1815:16	1815:16	8	in
LEAF_NODE	1815:16	1815:16	9	in
LEAF_NODE	1815:18	1815:18	7	,
ARGUMENT	1815:20	1815:20	7	out
FIELD	1815:20	1815:20	8	out
LEAF_NODE	1815:20	1815:20	9	out
LEAF_NODE	1815:23	1815:23	7	,
ARGUMENT	1816:5	1816:5	7	readSeparateTilesIntoBuffer
FIELD	1816:5	1816:5	8	readSeparateTilesIntoBuffer
LEAF_NODE	1816:5	1816:5	9	readSeparateTilesIntoBuffer
LEAF_NODE	1816:32	1816:32	7	,
ARGUMENT	1817:5	1817:5	7	writeBufferToSeparateStrips
FIELD	1817:5	1817:5	8	writeBufferToSeparateStrips
LEAF_NODE	1817:5	1817:5	9	writeBufferToSeparateStrips
LEAF_NODE	1817:32	1817:32	7	,
ARGUMENT	1818:5	1818:5	7	imagelength
FIELD	1818:5	1818:5	8	imagelength
LEAF_NODE	1818:5	1818:5	9	imagelength
LEAF_NODE	1818:16	1818:16	7	,
ARGUMENT	1818:18	1818:18	7	imagewidth
FIELD	1818:18	1818:18	8	imagewidth
LEAF_NODE	1818:18	1818:18	9	imagewidth
LEAF_NODE	1818:28	1818:28	7	,
ARGUMENT	1818:30	1818:30	7	spp
FIELD	1818:30	1818:30	8	spp
LEAF_NODE	1818:30	1818:30	9	spp
LEAF_NODE	1818:33	1818:33	7	)
LEAF_NODE	1818:34	1818:34	4	;
LEAF_NODE	1819:0	1819:0	2	}
FUNCTION_DEF	1824:0	1928:0	1	
RETURN_TYPE	1824:0	1824:7	2	static copyFunc
LEAF_NODE	1824:0	1824:0	3	static
TYPE_NAME	1824:7	1824:7	3	copyFunc
LEAF_NODE	1824:7	1824:7	4	copyFunc
FUNCTION_NAME	1825:0	1825:0	2	pickCopyFunc
LEAF_NODE	1825:0	1825:0	3	pickCopyFunc
PARAMETER_LIST	1825:12	1825:78	2	( TIFF * in , TIFF * out , uint16 bitspersample , uint16 samplesperpixel )
LEAF_NODE	1825:12	1825:12	3	(
PARAMETER_DECL	1825:13	1825:19	3	TIFF * in
TYPE	1825:13	1825:17	4	TIFF *
TYPE_NAME	1825:13	1825:13	5	TIFF
LEAF_NODE	1825:13	1825:13	6	TIFF
POINTER	1825:17	1825:17	5	*
LEAF_NODE	1825:17	1825:17	6	*
NAME	1825:19	1825:19	4	in
LEAF_NODE	1825:19	1825:19	5	in
LEAF_NODE	1825:21	1825:21	3	,
PARAMETER_DECL	1825:23	1825:29	3	TIFF * out
TYPE	1825:23	1825:27	4	TIFF *
TYPE_NAME	1825:23	1825:23	5	TIFF
LEAF_NODE	1825:23	1825:23	6	TIFF
POINTER	1825:27	1825:27	5	*
LEAF_NODE	1825:27	1825:27	6	*
NAME	1825:29	1825:29	4	out
LEAF_NODE	1825:29	1825:29	5	out
LEAF_NODE	1825:32	1825:32	3	,
PARAMETER_DECL	1825:34	1825:41	3	uint16 bitspersample
TYPE	1825:34	1825:34	4	uint16
TYPE_NAME	1825:34	1825:34	5	uint16
LEAF_NODE	1825:34	1825:34	6	uint16
NAME	1825:41	1825:41	4	bitspersample
LEAF_NODE	1825:41	1825:41	5	bitspersample
LEAF_NODE	1825:54	1825:54	3	,
PARAMETER_DECL	1825:56	1825:63	3	uint16 samplesperpixel
TYPE	1825:56	1825:56	4	uint16
TYPE_NAME	1825:56	1825:56	5	uint16
LEAF_NODE	1825:56	1825:56	6	uint16
NAME	1825:63	1825:63	4	samplesperpixel
LEAF_NODE	1825:63	1825:63	5	samplesperpixel
LEAF_NODE	1825:78	1825:78	3	)
LEAF_NODE	1826:0	1826:0	2	{
STATEMENTS	1827:1	1927:14	2	
SIMPLE_DECL	1827:1	1827:14	3	uint16 shortv ;
VAR_DECL	1827:1	1827:8	4	uint16 shortv
TYPE	1827:1	1827:1	5	uint16
TYPE_NAME	1827:1	1827:1	6	uint16
LEAF_NODE	1827:1	1827:1	7	uint16
NAME	1827:8	1827:8	5	shortv
LEAF_NODE	1827:8	1827:8	6	shortv
LEAF_NODE	1827:14	1827:14	4	;
SIMPLE_DECL	1828:1	1828:20	3	uint32 w , uint32 l , uint32 tw , uint32 tl ;
INIT_DECL_LIST	1828:1	1828:1	4	uint32 w , uint32 l , uint32 tw , uint32 tl
VAR_DECL	1828:1	1828:8	5	uint32 w
TYPE	1828:1	1828:1	6	uint32
TYPE_NAME	1828:1	1828:1	7	uint32
LEAF_NODE	1828:1	1828:1	8	uint32
NAME	1828:8	1828:8	6	w
LEAF_NODE	1828:8	1828:8	7	w
LEAF_NODE	1828:9	1828:9	5	,
INIT_DECL_LIST	1828:1	1828:1	5	uint32 l , uint32 tw , uint32 tl
VAR_DECL	1828:1	1828:11	6	uint32 l
TYPE	1828:1	1828:1	7	uint32
TYPE_NAME	1828:1	1828:1	8	uint32
LEAF_NODE	1828:1	1828:1	9	uint32
NAME	1828:11	1828:11	7	l
LEAF_NODE	1828:11	1828:11	8	l
LEAF_NODE	1828:12	1828:12	6	,
INIT_DECL_LIST	1828:1	1828:1	6	uint32 tw , uint32 tl
VAR_DECL	1828:1	1828:14	7	uint32 tw
TYPE	1828:1	1828:1	8	uint32
TYPE_NAME	1828:1	1828:1	9	uint32
LEAF_NODE	1828:1	1828:1	10	uint32
NAME	1828:14	1828:14	8	tw
LEAF_NODE	1828:14	1828:14	9	tw
LEAF_NODE	1828:16	1828:16	7	,
VAR_DECL	1828:1	1828:18	7	uint32 tl
TYPE	1828:1	1828:1	8	uint32
TYPE_NAME	1828:1	1828:1	9	uint32
LEAF_NODE	1828:1	1828:1	10	uint32
NAME	1828:18	1828:18	8	tl
LEAF_NODE	1828:18	1828:18	9	tl
LEAF_NODE	1828:20	1828:20	4	;
SIMPLE_DECL	1829:1	1829:12	3	int bychunk ;
VAR_DECL	1829:1	1829:5	4	int bychunk
TYPE	1829:1	1829:1	5	int
TYPE_NAME	1829:1	1829:1	6	int
LEAF_NODE	1829:1	1829:1	7	int
NAME	1829:5	1829:5	5	bychunk
LEAF_NODE	1829:5	1829:5	6	bychunk
LEAF_NODE	1829:12	1829:12	4	;
EXPR_STATEMENT	1831:1	1831:64	3	( void ) TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & shortv ) ;
EXPR	1831:1	1831:8	4	( void ) TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & shortv )
LEAF_NODE	1831:1	1831:1	5	(
TYPE_NAME	1831:2	1831:2	5	void
LEAF_NODE	1831:2	1831:2	6	void
LEAF_NODE	1831:6	1831:6	5	)
FUNCTION_CALL	1831:8	1831:63	5	TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & shortv )
CALLEE	1831:8	1831:8	6	TIFFGetFieldDefaulted
LEAF_NODE	1831:8	1831:8	7	TIFFGetFieldDefaulted
LEAF_NODE	1831:29	1831:29	6	(
ARGUMENT	1831:30	1831:30	6	in
FIELD	1831:30	1831:30	7	in
LEAF_NODE	1831:30	1831:30	8	in
LEAF_NODE	1831:32	1831:32	6	,
ARGUMENT	1831:34	1831:34	6	TIFFTAG_PLANARCONFIG
FIELD	1831:34	1831:34	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	1831:34	1831:34	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	1831:54	1831:54	6	,
ARGUMENT	1831:56	1831:56	6	& shortv
UNARY_EXPR	1831:56	1831:57	7	& shortv
UNARY_OPERATOR	1831:56	1831:56	8	&
LEAF_NODE	1831:56	1831:56	9	&
FIELD	1831:57	1831:57	8	shortv
LEAF_NODE	1831:57	1831:57	9	shortv
LEAF_NODE	1831:63	1831:63	6	)
LEAF_NODE	1831:64	1831:64	4	;
SELECTION	1832:1	1832:68	3	
KEYWORD	1832:1	1832:1	4	if
LEAF_NODE	1832:1	1832:1	5	if
LEAF_NODE	1832:4	1832:4	4	(
CONDITION	1832:5	1832:5	4	shortv != config && bitspersample != 8 && samplesperpixel > 1
EXPR	1832:5	1832:5	5	shortv != config && bitspersample != 8 && samplesperpixel > 1
AND	1832:5	1832:25	6	shortv != config && bitspersample != 8 && samplesperpixel > 1
EXPR	1832:5	1832:15	7	shortv != config
FIELD	1832:5	1832:5	8	shortv
LEAF_NODE	1832:5	1832:5	9	shortv
EQ_OPERATOR	1832:12	1832:12	8	!=
LEAF_NODE	1832:12	1832:12	9	!=
FIELD	1832:15	1832:15	8	config
LEAF_NODE	1832:15	1832:15	9	config
LEAF_NODE	1832:22	1832:22	7	&&
EXPR	1832:25	1832:25	7	bitspersample != 8 && samplesperpixel > 1
AND	1832:25	1832:47	8	bitspersample != 8 && samplesperpixel > 1
EXPR	1832:25	1832:42	9	bitspersample != 8
FIELD	1832:25	1832:25	10	bitspersample
LEAF_NODE	1832:25	1832:25	11	bitspersample
EQ_OPERATOR	1832:39	1832:39	10	!=
LEAF_NODE	1832:39	1832:39	11	!=
FIELD	1832:42	1832:42	10	8
LEAF_NODE	1832:42	1832:42	11	8
LEAF_NODE	1832:44	1832:44	9	&&
EXPR	1832:47	1832:65	9	samplesperpixel > 1
FIELD	1832:47	1832:47	10	samplesperpixel
LEAF_NODE	1832:47	1832:47	11	samplesperpixel
REL_OPERATOR	1832:63	1832:63	10	>
LEAF_NODE	1832:63	1832:63	11	>
FIELD	1832:65	1832:65	10	1
LEAF_NODE	1832:65	1832:65	11	1
LEAF_NODE	1832:66	1832:66	4	)
STATEMENTS	1832:68	1837:1	4	
LEAF_NODE	1832:68	1832:68	5	{
STATEMENTS	1833:2	1836:15	5	
EXPR_STATEMENT	1833:2	1835:23	6	fprintf ( stderr , "%s: Cannot handle different planar configuration w/ bits/sample != 8\n" , TIFFFileName ( in ) ) ;
EXPR	1833:2	1833:2	7	fprintf ( stderr , "%s: Cannot handle different planar configuration w/ bits/sample != 8\n" , TIFFFileName ( in ) )
FUNCTION_CALL	1833:2	1835:22	8	fprintf ( stderr , "%s: Cannot handle different planar configuration w/ bits/sample != 8\n" , TIFFFileName ( in ) )
CALLEE	1833:2	1833:2	9	fprintf
LEAF_NODE	1833:2	1833:2	10	fprintf
LEAF_NODE	1833:9	1833:9	9	(
ARGUMENT	1833:10	1833:10	9	stderr
FIELD	1833:10	1833:10	10	stderr
LEAF_NODE	1833:10	1833:10	11	stderr
LEAF_NODE	1833:16	1833:16	9	,
ARGUMENT	1834:6	1834:6	9	"%s: Cannot handle different planar configuration w/ bits/sample != 8\n"
FIELD	1834:6	1834:6	10	"%s: Cannot handle different planar configuration w/ bits/sample != 8\n"
LEAF_NODE	1834:6	1834:6	11	"%s: Cannot handle different planar configuration w/ bits/sample != 8\n"
LEAF_NODE	1834:78	1834:78	9	,
ARGUMENT	1835:6	1835:6	9	TIFFFileName ( in )
FUNCTION_CALL	1835:6	1835:21	10	TIFFFileName ( in )
CALLEE	1835:6	1835:6	11	TIFFFileName
LEAF_NODE	1835:6	1835:6	12	TIFFFileName
LEAF_NODE	1835:18	1835:18	11	(
ARGUMENT	1835:19	1835:19	11	in
FIELD	1835:19	1835:19	12	in
LEAF_NODE	1835:19	1835:19	13	in
LEAF_NODE	1835:21	1835:21	11	)
LEAF_NODE	1835:22	1835:22	9	)
LEAF_NODE	1835:23	1835:23	7	;
LEAF_NODE	1836:2	1836:2	6	return
LEAF_NODE	1836:9	1836:9	6	(
LEAF_NODE	1836:10	1836:10	6	NULL
LEAF_NODE	1836:14	1836:14	6	)
LEAF_NODE	1836:15	1836:15	6	;
LEAF_NODE	1837:1	1837:1	5	}
EXPR_STATEMENT	1838:1	1838:41	3	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & w ) ;
EXPR	1838:1	1838:1	4	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & w )
FUNCTION_CALL	1838:1	1838:40	5	TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & w )
CALLEE	1838:1	1838:1	6	TIFFGetField
LEAF_NODE	1838:1	1838:1	7	TIFFGetField
LEAF_NODE	1838:13	1838:13	6	(
ARGUMENT	1838:14	1838:14	6	in
FIELD	1838:14	1838:14	7	in
LEAF_NODE	1838:14	1838:14	8	in
LEAF_NODE	1838:16	1838:16	6	,
ARGUMENT	1838:18	1838:18	6	TIFFTAG_IMAGEWIDTH
FIELD	1838:18	1838:18	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	1838:18	1838:18	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	1838:36	1838:36	6	,
ARGUMENT	1838:38	1838:38	6	& w
UNARY_EXPR	1838:38	1838:39	7	& w
UNARY_OPERATOR	1838:38	1838:38	8	&
LEAF_NODE	1838:38	1838:38	9	&
FIELD	1838:39	1838:39	8	w
LEAF_NODE	1838:39	1838:39	9	w
LEAF_NODE	1838:40	1838:40	6	)
LEAF_NODE	1838:41	1838:41	4	;
EXPR_STATEMENT	1839:1	1839:42	3	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & l ) ;
EXPR	1839:1	1839:1	4	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & l )
FUNCTION_CALL	1839:1	1839:41	5	TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & l )
CALLEE	1839:1	1839:1	6	TIFFGetField
LEAF_NODE	1839:1	1839:1	7	TIFFGetField
LEAF_NODE	1839:13	1839:13	6	(
ARGUMENT	1839:14	1839:14	6	in
FIELD	1839:14	1839:14	7	in
LEAF_NODE	1839:14	1839:14	8	in
LEAF_NODE	1839:16	1839:16	6	,
ARGUMENT	1839:18	1839:18	6	TIFFTAG_IMAGELENGTH
FIELD	1839:18	1839:18	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	1839:18	1839:18	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	1839:37	1839:37	6	,
ARGUMENT	1839:39	1839:39	6	& l
UNARY_EXPR	1839:39	1839:40	7	& l
UNARY_OPERATOR	1839:39	1839:39	8	&
LEAF_NODE	1839:39	1839:39	9	&
FIELD	1839:40	1839:40	8	l
LEAF_NODE	1839:40	1839:40	9	l
LEAF_NODE	1839:41	1839:41	6	)
LEAF_NODE	1839:42	1839:42	4	;
SELECTION	1840:1	1840:45	3	
KEYWORD	1840:1	1840:1	4	if
LEAF_NODE	1840:1	1840:1	5	if
LEAF_NODE	1840:4	1840:4	4	(
CONDITION	1840:5	1840:5	4	! ( TIFFIsTiled ( out ) || TIFFIsTiled ( in ) )
EXPR	1840:5	1840:5	5	! ( TIFFIsTiled ( out ) || TIFFIsTiled ( in ) )
UNARY_EXPR	1840:5	1840:42	6	! ( TIFFIsTiled ( out ) || TIFFIsTiled ( in ) )
UNARY_OPERATOR	1840:5	1840:5	7	!
LEAF_NODE	1840:5	1840:5	8	!
LEAF_NODE	1840:6	1840:6	7	(
OR	1840:7	1840:27	7	TIFFIsTiled ( out ) || TIFFIsTiled ( in )
EXPR	1840:7	1840:7	8	TIFFIsTiled ( out )
FUNCTION_CALL	1840:7	1840:22	9	TIFFIsTiled ( out )
CALLEE	1840:7	1840:7	10	TIFFIsTiled
LEAF_NODE	1840:7	1840:7	11	TIFFIsTiled
LEAF_NODE	1840:18	1840:18	10	(
ARGUMENT	1840:19	1840:19	10	out
FIELD	1840:19	1840:19	11	out
LEAF_NODE	1840:19	1840:19	12	out
LEAF_NODE	1840:22	1840:22	10	)
LEAF_NODE	1840:24	1840:24	8	||
EXPR	1840:27	1840:27	8	TIFFIsTiled ( in )
FUNCTION_CALL	1840:27	1840:41	9	TIFFIsTiled ( in )
CALLEE	1840:27	1840:27	10	TIFFIsTiled
LEAF_NODE	1840:27	1840:27	11	TIFFIsTiled
LEAF_NODE	1840:38	1840:38	10	(
ARGUMENT	1840:39	1840:39	10	in
FIELD	1840:39	1840:39	11	in
LEAF_NODE	1840:39	1840:39	12	in
LEAF_NODE	1840:41	1840:41	10	)
LEAF_NODE	1840:42	1840:42	7	)
LEAF_NODE	1840:43	1840:43	4	)
STATEMENTS	1840:45	1845:1	4	
LEAF_NODE	1840:45	1840:45	5	{
STATEMENTS	1841:2	1844:2	5	
SIMPLE_DECL	1841:2	1841:28	6	uint32 irps ; irps = ( uint32 ) - 1L ;
VAR_DECL	1841:2	1841:9	7	uint32 irps ; irps = ( uint32 ) - 1L
TYPE	1841:2	1841:2	8	uint32
TYPE_NAME	1841:2	1841:2	9	uint32
LEAF_NODE	1841:2	1841:2	10	uint32
NAME	1841:9	1841:9	8	irps
LEAF_NODE	1841:9	1841:9	9	irps
LEAF_NODE	0:0	0:0	8	;
INIT	1841:9	1841:9	8	irps = ( uint32 ) - 1L
ASSIGN	1841:9	1841:16	9	irps = ( uint32 ) - 1L
LVAL	1841:9	1841:9	10	irps
NAME	1841:9	1841:9	11	irps
LEAF_NODE	1841:9	1841:9	12	irps
ASSIGN_OP	1841:14	1841:14	10	=
LEAF_NODE	1841:14	1841:14	11	=
RVAL	1841:16	1841:25	10	( uint32 ) - 1L
LEAF_NODE	1841:16	1841:16	11	(
TYPE_NAME	1841:17	1841:17	11	uint32
LEAF_NODE	1841:17	1841:17	12	uint32
LEAF_NODE	1841:23	1841:23	11	)
UNARY_EXPR	1841:25	1841:26	11	- 1L
UNARY_OPERATOR	1841:25	1841:25	12	-
LEAF_NODE	1841:25	1841:25	13	-
FIELD	1841:26	1841:26	12	1L
LEAF_NODE	1841:26	1841:26	13	1L
LEAF_NODE	1841:28	1841:28	7	;
EXPR_STATEMENT	1842:2	1842:47	6	TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & irps ) ;
EXPR	1842:2	1842:2	7	TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & irps )
FUNCTION_CALL	1842:2	1842:46	8	TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & irps )
CALLEE	1842:2	1842:2	9	TIFFGetField
LEAF_NODE	1842:2	1842:2	10	TIFFGetField
LEAF_NODE	1842:14	1842:14	9	(
ARGUMENT	1842:15	1842:15	9	in
FIELD	1842:15	1842:15	10	in
LEAF_NODE	1842:15	1842:15	11	in
LEAF_NODE	1842:17	1842:17	9	,
ARGUMENT	1842:19	1842:19	9	TIFFTAG_ROWSPERSTRIP
FIELD	1842:19	1842:19	10	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1842:19	1842:19	11	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	1842:39	1842:39	9	,
ARGUMENT	1842:41	1842:41	9	& irps
UNARY_EXPR	1842:41	1842:42	10	& irps
UNARY_OPERATOR	1842:41	1842:41	11	&
LEAF_NODE	1842:41	1842:41	12	&
FIELD	1842:42	1842:42	11	irps
LEAF_NODE	1842:42	1842:42	12	irps
LEAF_NODE	1842:46	1842:46	9	)
LEAF_NODE	1842:47	1842:47	7	;
EXPR_STATEMENT	1844:2	1844:43	6	bychunk = ! bias && ( rowsperstrip == irps ) ;
EXPR	1844:2	1844:2	7	bychunk = ! bias && ( rowsperstrip == irps )
ASSIGN	1844:2	1844:12	8	bychunk = ! bias && ( rowsperstrip == irps )
LVAL	1844:2	1844:2	9	bychunk
FIELD	1844:2	1844:2	10	bychunk
LEAF_NODE	1844:2	1844:2	11	bychunk
ASSIGN_OP	1844:10	1844:10	9	=
LEAF_NODE	1844:10	1844:10	10	=
RVAL	1844:12	1844:12	9	! bias && ( rowsperstrip == irps )
AND	1844:12	1844:21	10	! bias && ( rowsperstrip == irps )
EXPR	1844:12	1844:12	11	! bias
UNARY_EXPR	1844:12	1844:13	12	! bias
UNARY_OPERATOR	1844:12	1844:12	13	!
LEAF_NODE	1844:12	1844:12	14	!
FIELD	1844:13	1844:13	13	bias
LEAF_NODE	1844:13	1844:13	14	bias
LEAF_NODE	1844:18	1844:18	11	&&
EXPR	1844:21	1844:42	11	( rowsperstrip == irps )
LEAF_NODE	1844:21	1844:21	12	(
FIELD	1844:22	1844:22	12	rowsperstrip
LEAF_NODE	1844:22	1844:22	13	rowsperstrip
EQ_OPERATOR	1844:35	1844:35	12	==
LEAF_NODE	1844:35	1844:35	13	==
FIELD	1844:38	1844:38	12	irps
LEAF_NODE	1844:38	1844:38	13	irps
LEAF_NODE	1844:42	1844:42	12	)
LEAF_NODE	1844:43	1844:43	7	;
LEAF_NODE	1845:1	1845:1	5	}
SELECTION	1845:2	1845:6	3	
KEYWORD	1845:2	1845:2	4	else
LEAF_NODE	1845:2	1845:2	5	else
STATEMENTS	1845:6	1863:1	4	
LEAF_NODE	1845:6	1845:6	5	{
STATEMENTS	1846:2	1858:4	5	
SELECTION	1846:2	1846:12	6	
KEYWORD	1846:2	1846:2	7	if
LEAF_NODE	1846:2	1846:2	8	if
LEAF_NODE	1846:5	1846:5	7	(
CONDITION	1846:6	1846:6	7	bias
EXPR	1846:6	1846:6	8	bias
FIELD	1846:6	1846:6	9	bias
LEAF_NODE	1846:6	1846:6	10	bias
LEAF_NODE	1846:10	1846:10	7	)
STATEMENTS	1846:12	1851:2	7	
LEAF_NODE	1846:12	1846:12	8	{
STATEMENTS	1847:3	1850:16	8	
EXPR_STATEMENT	1847:3	1849:20	9	fprintf ( stderr , "%s: Cannot handle tiled configuration w/bias image\n" , TIFFFileName ( in ) ) ;
EXPR	1847:3	1847:3	10	fprintf ( stderr , "%s: Cannot handle tiled configuration w/bias image\n" , TIFFFileName ( in ) )
FUNCTION_CALL	1847:3	1849:19	11	fprintf ( stderr , "%s: Cannot handle tiled configuration w/bias image\n" , TIFFFileName ( in ) )
CALLEE	1847:3	1847:3	12	fprintf
LEAF_NODE	1847:3	1847:3	13	fprintf
LEAF_NODE	1847:10	1847:10	12	(
ARGUMENT	1847:11	1847:11	12	stderr
FIELD	1847:11	1847:11	13	stderr
LEAF_NODE	1847:11	1847:11	14	stderr
LEAF_NODE	1847:17	1847:17	12	,
ARGUMENT	1848:7	1848:7	12	"%s: Cannot handle tiled configuration w/bias image\n"
FIELD	1848:7	1848:7	13	"%s: Cannot handle tiled configuration w/bias image\n"
LEAF_NODE	1848:7	1848:7	14	"%s: Cannot handle tiled configuration w/bias image\n"
LEAF_NODE	1848:61	1848:61	12	,
ARGUMENT	1849:3	1849:3	12	TIFFFileName ( in )
FUNCTION_CALL	1849:3	1849:18	13	TIFFFileName ( in )
CALLEE	1849:3	1849:3	14	TIFFFileName
LEAF_NODE	1849:3	1849:3	15	TIFFFileName
LEAF_NODE	1849:15	1849:15	14	(
ARGUMENT	1849:16	1849:16	14	in
FIELD	1849:16	1849:16	15	in
LEAF_NODE	1849:16	1849:16	16	in
LEAF_NODE	1849:18	1849:18	14	)
LEAF_NODE	1849:19	1849:19	12	)
LEAF_NODE	1849:20	1849:20	10	;
LEAF_NODE	1850:3	1850:3	9	return
LEAF_NODE	1850:10	1850:10	9	(
LEAF_NODE	1850:11	1850:11	9	NULL
LEAF_NODE	1850:15	1850:15	9	)
LEAF_NODE	1850:16	1850:16	9	;
LEAF_NODE	1851:2	1851:2	8	}
SELECTION	1852:2	1852:24	6	
KEYWORD	1852:2	1852:2	7	if
LEAF_NODE	1852:2	1852:2	8	if
LEAF_NODE	1852:5	1852:5	7	(
CONDITION	1852:6	1852:6	7	TIFFIsTiled ( out )
EXPR	1852:6	1852:6	8	TIFFIsTiled ( out )
FUNCTION_CALL	1852:6	1852:21	9	TIFFIsTiled ( out )
CALLEE	1852:6	1852:6	10	TIFFIsTiled
LEAF_NODE	1852:6	1852:6	11	TIFFIsTiled
LEAF_NODE	1852:17	1852:17	10	(
ARGUMENT	1852:18	1852:18	10	out
FIELD	1852:18	1852:18	11	out
LEAF_NODE	1852:18	1852:18	12	out
LEAF_NODE	1852:21	1852:21	10	)
LEAF_NODE	1852:22	1852:22	7	)
STATEMENTS	1852:24	1858:2	7	
LEAF_NODE	1852:24	1852:24	8	{
STATEMENTS	1853:3	1857:3	8	
SELECTION	1853:3	1854:4	9	
KEYWORD	1853:3	1853:3	10	if
LEAF_NODE	1853:3	1853:3	11	if
LEAF_NODE	1853:6	1853:6	10	(
CONDITION	1853:7	1853:7	10	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
EXPR	1853:7	1853:7	11	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
UNARY_EXPR	1853:7	1853:8	12	! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
UNARY_OPERATOR	1853:7	1853:7	13	!
LEAF_NODE	1853:7	1853:7	14	!
FUNCTION_CALL	1853:8	1853:47	13	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1853:8	1853:8	14	TIFFGetField
LEAF_NODE	1853:8	1853:8	15	TIFFGetField
LEAF_NODE	1853:20	1853:20	14	(
ARGUMENT	1853:21	1853:21	14	in
FIELD	1853:21	1853:21	15	in
LEAF_NODE	1853:21	1853:21	16	in
LEAF_NODE	1853:23	1853:23	14	,
ARGUMENT	1853:25	1853:25	14	TIFFTAG_TILEWIDTH
FIELD	1853:25	1853:25	15	TIFFTAG_TILEWIDTH
LEAF_NODE	1853:25	1853:25	16	TIFFTAG_TILEWIDTH
LEAF_NODE	1853:42	1853:42	14	,
ARGUMENT	1853:44	1853:44	14	& tw
UNARY_EXPR	1853:44	1853:45	15	& tw
UNARY_OPERATOR	1853:44	1853:44	16	&
LEAF_NODE	1853:44	1853:44	17	&
FIELD	1853:45	1853:45	16	tw
LEAF_NODE	1853:45	1853:45	17	tw
LEAF_NODE	1853:47	1853:47	14	)
LEAF_NODE	1853:48	1853:48	10	)
STATEMENTS	1854:4	1854:4	10	
EXPR_STATEMENT	1854:4	1854:10	11	tw = w ;
EXPR	1854:4	1854:4	12	tw = w
ASSIGN	1854:4	1854:9	13	tw = w
LVAL	1854:4	1854:4	14	tw
FIELD	1854:4	1854:4	15	tw
LEAF_NODE	1854:4	1854:4	16	tw
ASSIGN_OP	1854:7	1854:7	14	=
LEAF_NODE	1854:7	1854:7	15	=
RVAL	1854:9	1854:9	14	w
FIELD	1854:9	1854:9	15	w
LEAF_NODE	1854:9	1854:9	16	w
LEAF_NODE	1854:10	1854:10	12	;
SELECTION	1855:3	1856:4	9	
KEYWORD	1855:3	1855:3	10	if
LEAF_NODE	1855:3	1855:3	11	if
LEAF_NODE	1855:6	1855:6	10	(
CONDITION	1855:7	1855:7	10	! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
EXPR	1855:7	1855:7	11	! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
UNARY_EXPR	1855:7	1855:8	12	! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
UNARY_OPERATOR	1855:7	1855:7	13	!
LEAF_NODE	1855:7	1855:7	14	!
FUNCTION_CALL	1855:8	1855:48	13	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
CALLEE	1855:8	1855:8	14	TIFFGetField
LEAF_NODE	1855:8	1855:8	15	TIFFGetField
LEAF_NODE	1855:20	1855:20	14	(
ARGUMENT	1855:21	1855:21	14	in
FIELD	1855:21	1855:21	15	in
LEAF_NODE	1855:21	1855:21	16	in
LEAF_NODE	1855:23	1855:23	14	,
ARGUMENT	1855:25	1855:25	14	TIFFTAG_TILELENGTH
FIELD	1855:25	1855:25	15	TIFFTAG_TILELENGTH
LEAF_NODE	1855:25	1855:25	16	TIFFTAG_TILELENGTH
LEAF_NODE	1855:43	1855:43	14	,
ARGUMENT	1855:45	1855:45	14	& tl
UNARY_EXPR	1855:45	1855:46	15	& tl
UNARY_OPERATOR	1855:45	1855:45	16	&
LEAF_NODE	1855:45	1855:45	17	&
FIELD	1855:46	1855:46	16	tl
LEAF_NODE	1855:46	1855:46	17	tl
LEAF_NODE	1855:48	1855:48	14	)
LEAF_NODE	1855:49	1855:49	10	)
STATEMENTS	1856:4	1856:4	10	
EXPR_STATEMENT	1856:4	1856:10	11	tl = l ;
EXPR	1856:4	1856:4	12	tl = l
ASSIGN	1856:4	1856:9	13	tl = l
LVAL	1856:4	1856:4	14	tl
FIELD	1856:4	1856:4	15	tl
LEAF_NODE	1856:4	1856:4	16	tl
ASSIGN_OP	1856:7	1856:7	14	=
LEAF_NODE	1856:7	1856:7	15	=
RVAL	1856:9	1856:9	14	l
FIELD	1856:9	1856:9	15	l
LEAF_NODE	1856:9	1856:9	16	l
LEAF_NODE	1856:10	1856:10	12	;
EXPR_STATEMENT	1857:3	1857:50	9	bychunk = ( tw == tilewidth && tl == tilelength ) ;
EXPR	1857:3	1857:3	10	bychunk = ( tw == tilewidth && tl == tilelength )
ASSIGN	1857:3	1857:13	11	bychunk = ( tw == tilewidth && tl == tilelength )
LVAL	1857:3	1857:3	12	bychunk
FIELD	1857:3	1857:3	13	bychunk
LEAF_NODE	1857:3	1857:3	14	bychunk
ASSIGN_OP	1857:11	1857:11	12	=
LEAF_NODE	1857:11	1857:11	13	=
RVAL	1857:13	1857:49	12	( tw == tilewidth && tl == tilelength )
LEAF_NODE	1857:13	1857:13	13	(
AND	1857:14	1857:33	13	tw == tilewidth && tl == tilelength
EXPR	1857:14	1857:20	14	tw == tilewidth
FIELD	1857:14	1857:14	15	tw
LEAF_NODE	1857:14	1857:14	16	tw
EQ_OPERATOR	1857:17	1857:17	15	==
LEAF_NODE	1857:17	1857:17	16	==
FIELD	1857:20	1857:20	15	tilewidth
LEAF_NODE	1857:20	1857:20	16	tilewidth
LEAF_NODE	1857:30	1857:30	14	&&
EXPR	1857:33	1857:39	14	tl == tilelength
FIELD	1857:33	1857:33	15	tl
LEAF_NODE	1857:33	1857:33	16	tl
EQ_OPERATOR	1857:36	1857:36	15	==
LEAF_NODE	1857:36	1857:36	16	==
FIELD	1857:39	1857:39	15	tilelength
LEAF_NODE	1857:39	1857:39	16	tilelength
LEAF_NODE	1857:49	1857:49	13	)
LEAF_NODE	1857:50	1857:50	10	;
LEAF_NODE	1858:2	1858:2	8	}
SELECTION	1858:4	1858:9	6	
KEYWORD	1858:4	1858:4	7	else
LEAF_NODE	1858:4	1858:4	8	else
STATEMENTS	1858:9	1862:2	7	
LEAF_NODE	1858:9	1858:9	8	{
STATEMENTS	1859:3	1861:3	8	
EXPR_STATEMENT	1859:3	1859:43	9	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw ) ;
EXPR	1859:3	1859:3	10	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
FUNCTION_CALL	1859:3	1859:42	11	TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw )
CALLEE	1859:3	1859:3	12	TIFFGetField
LEAF_NODE	1859:3	1859:3	13	TIFFGetField
LEAF_NODE	1859:15	1859:15	12	(
ARGUMENT	1859:16	1859:16	12	in
FIELD	1859:16	1859:16	13	in
LEAF_NODE	1859:16	1859:16	14	in
LEAF_NODE	1859:18	1859:18	12	,
ARGUMENT	1859:20	1859:20	12	TIFFTAG_TILEWIDTH
FIELD	1859:20	1859:20	13	TIFFTAG_TILEWIDTH
LEAF_NODE	1859:20	1859:20	14	TIFFTAG_TILEWIDTH
LEAF_NODE	1859:37	1859:37	12	,
ARGUMENT	1859:39	1859:39	12	& tw
UNARY_EXPR	1859:39	1859:40	13	& tw
UNARY_OPERATOR	1859:39	1859:39	14	&
LEAF_NODE	1859:39	1859:39	15	&
FIELD	1859:40	1859:40	14	tw
LEAF_NODE	1859:40	1859:40	15	tw
LEAF_NODE	1859:42	1859:42	12	)
LEAF_NODE	1859:43	1859:43	10	;
EXPR_STATEMENT	1860:3	1860:44	9	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl ) ;
EXPR	1860:3	1860:3	10	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
FUNCTION_CALL	1860:3	1860:43	11	TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl )
CALLEE	1860:3	1860:3	12	TIFFGetField
LEAF_NODE	1860:3	1860:3	13	TIFFGetField
LEAF_NODE	1860:15	1860:15	12	(
ARGUMENT	1860:16	1860:16	12	in
FIELD	1860:16	1860:16	13	in
LEAF_NODE	1860:16	1860:16	14	in
LEAF_NODE	1860:18	1860:18	12	,
ARGUMENT	1860:20	1860:20	12	TIFFTAG_TILELENGTH
FIELD	1860:20	1860:20	13	TIFFTAG_TILELENGTH
LEAF_NODE	1860:20	1860:20	14	TIFFTAG_TILELENGTH
LEAF_NODE	1860:38	1860:38	12	,
ARGUMENT	1860:40	1860:40	12	& tl
UNARY_EXPR	1860:40	1860:41	13	& tl
UNARY_OPERATOR	1860:40	1860:40	14	&
LEAF_NODE	1860:40	1860:40	15	&
FIELD	1860:41	1860:41	14	tl
LEAF_NODE	1860:41	1860:41	15	tl
LEAF_NODE	1860:43	1860:43	12	)
LEAF_NODE	1860:44	1860:44	10	;
EXPR_STATEMENT	1861:3	1861:44	9	bychunk = ( tw == w && tl == rowsperstrip ) ;
EXPR	1861:3	1861:3	10	bychunk = ( tw == w && tl == rowsperstrip )
ASSIGN	1861:3	1861:13	11	bychunk = ( tw == w && tl == rowsperstrip )
LVAL	1861:3	1861:3	12	bychunk
FIELD	1861:3	1861:3	13	bychunk
LEAF_NODE	1861:3	1861:3	14	bychunk
ASSIGN_OP	1861:11	1861:11	12	=
LEAF_NODE	1861:11	1861:11	13	=
RVAL	1861:13	1861:43	12	( tw == w && tl == rowsperstrip )
LEAF_NODE	1861:13	1861:13	13	(
AND	1861:14	1861:25	13	tw == w && tl == rowsperstrip
EXPR	1861:14	1861:20	14	tw == w
FIELD	1861:14	1861:14	15	tw
LEAF_NODE	1861:14	1861:14	16	tw
EQ_OPERATOR	1861:17	1861:17	15	==
LEAF_NODE	1861:17	1861:17	16	==
FIELD	1861:20	1861:20	15	w
LEAF_NODE	1861:20	1861:20	16	w
LEAF_NODE	1861:22	1861:22	14	&&
EXPR	1861:25	1861:31	14	tl == rowsperstrip
FIELD	1861:25	1861:25	15	tl
LEAF_NODE	1861:25	1861:25	16	tl
EQ_OPERATOR	1861:28	1861:28	15	==
LEAF_NODE	1861:28	1861:28	16	==
FIELD	1861:31	1861:31	15	rowsperstrip
LEAF_NODE	1861:31	1861:31	16	rowsperstrip
LEAF_NODE	1861:43	1861:43	13	)
LEAF_NODE	1861:44	1861:44	10	;
LEAF_NODE	1862:2	1862:2	8	}
LEAF_NODE	1863:1	1863:1	5	}
SELECTION	1867:1	1867:70	3	
KEYWORD	1867:1	1867:1	4	switch
LEAF_NODE	1867:1	1867:1	5	switch
LEAF_NODE	1867:7	1867:7	4	(
CONDITION	1867:8	1867:8	4	pack ( shortv , config , TIFFIsTiled ( in ) , TIFFIsTiled ( out ) , bychunk )
EXPR	1867:8	1867:8	5	pack ( shortv , config , TIFFIsTiled ( in ) , TIFFIsTiled ( out ) , bychunk )
FUNCTION_CALL	1867:8	1867:67	6	pack ( shortv , config , TIFFIsTiled ( in ) , TIFFIsTiled ( out ) , bychunk )
CALLEE	1867:8	1867:8	7	pack
LEAF_NODE	1867:8	1867:8	8	pack
LEAF_NODE	1867:12	1867:12	7	(
ARGUMENT	1867:13	1867:13	7	shortv
FIELD	1867:13	1867:13	8	shortv
LEAF_NODE	1867:13	1867:13	9	shortv
LEAF_NODE	1867:19	1867:19	7	,
ARGUMENT	1867:20	1867:20	7	config
FIELD	1867:20	1867:20	8	config
LEAF_NODE	1867:20	1867:20	9	config
LEAF_NODE	1867:26	1867:26	7	,
ARGUMENT	1867:27	1867:27	7	TIFFIsTiled ( in )
FUNCTION_CALL	1867:27	1867:41	8	TIFFIsTiled ( in )
CALLEE	1867:27	1867:27	9	TIFFIsTiled
LEAF_NODE	1867:27	1867:27	10	TIFFIsTiled
LEAF_NODE	1867:38	1867:38	9	(
ARGUMENT	1867:39	1867:39	9	in
FIELD	1867:39	1867:39	10	in
LEAF_NODE	1867:39	1867:39	11	in
LEAF_NODE	1867:41	1867:41	9	)
LEAF_NODE	1867:42	1867:42	7	,
ARGUMENT	1867:43	1867:43	7	TIFFIsTiled ( out )
FUNCTION_CALL	1867:43	1867:58	8	TIFFIsTiled ( out )
CALLEE	1867:43	1867:43	9	TIFFIsTiled
LEAF_NODE	1867:43	1867:43	10	TIFFIsTiled
LEAF_NODE	1867:54	1867:54	9	(
ARGUMENT	1867:55	1867:55	9	out
FIELD	1867:55	1867:55	10	out
LEAF_NODE	1867:55	1867:55	11	out
LEAF_NODE	1867:58	1867:58	9	)
LEAF_NODE	1867:59	1867:59	7	,
ARGUMENT	1867:60	1867:60	7	bychunk
FIELD	1867:60	1867:60	8	bychunk
LEAF_NODE	1867:60	1867:60	9	bychunk
LEAF_NODE	1867:67	1867:67	7	)
LEAF_NODE	1867:68	1867:68	4	)
STATEMENTS	1867:70	1921:1	4	
LEAF_NODE	1867:70	1867:70	5	{
STATEMENTS	1869:2	1920:3	5	
LEAF_NODE	1869:2	1869:2	6	case
LEAF_NODE	1869:7	1869:7	6	pack
LEAF_NODE	1869:11	1869:11	6	(
LEAF_NODE	1869:12	1869:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1869:31	1869:31	6	,
LEAF_NODE	1869:35	1869:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1869:54	1869:54	6	,
LEAF_NODE	1869:58	1869:58	6	F
LEAF_NODE	1869:59	1869:59	6	,
LEAF_NODE	1869:60	1869:60	6	T
LEAF_NODE	1869:61	1869:61	6	,
LEAF_NODE	1869:62	1869:62	6	F
LEAF_NODE	1869:63	1869:63	6	)
LEAF_NODE	1869:64	1869:64	6	:
LEAF_NODE	1870:2	1870:2	6	case
LEAF_NODE	1870:7	1870:7	6	pack
LEAF_NODE	1870:11	1870:11	6	(
LEAF_NODE	1870:12	1870:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1870:31	1870:31	6	,
LEAF_NODE	1870:35	1870:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1870:54	1870:54	6	,
LEAF_NODE	1870:58	1870:58	6	F
LEAF_NODE	1870:59	1870:59	6	,
LEAF_NODE	1870:60	1870:60	6	T
LEAF_NODE	1870:61	1870:61	6	,
LEAF_NODE	1870:62	1870:62	6	T
LEAF_NODE	1870:63	1870:63	6	)
LEAF_NODE	1870:64	1870:64	6	:
JUMP_STATEMENT	1871:3	1871:36	6	return cpContigStrips2ContigTiles ;
KEYWORD	1871:3	1871:3	7	return
LEAF_NODE	1871:3	1871:3	8	return
DESTINATION	1871:10	1871:10	7	cpContigStrips2ContigTiles
EXPR	1871:10	1871:10	8	cpContigStrips2ContigTiles
FIELD	1871:10	1871:10	9	cpContigStrips2ContigTiles
LEAF_NODE	1871:10	1871:10	10	cpContigStrips2ContigTiles
LEAF_NODE	1871:36	1871:36	7	;
LEAF_NODE	1872:2	1872:2	6	case
LEAF_NODE	1872:7	1872:7	6	pack
LEAF_NODE	1872:11	1872:11	6	(
LEAF_NODE	1872:12	1872:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1872:31	1872:31	6	,
LEAF_NODE	1872:35	1872:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1872:56	1872:56	6	,
LEAF_NODE	1872:58	1872:58	6	F
LEAF_NODE	1872:59	1872:59	6	,
LEAF_NODE	1872:60	1872:60	6	T
LEAF_NODE	1872:61	1872:61	6	,
LEAF_NODE	1872:62	1872:62	6	F
LEAF_NODE	1872:63	1872:63	6	)
LEAF_NODE	1872:64	1872:64	6	:
LEAF_NODE	1873:2	1873:2	6	case
LEAF_NODE	1873:7	1873:7	6	pack
LEAF_NODE	1873:11	1873:11	6	(
LEAF_NODE	1873:12	1873:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1873:31	1873:31	6	,
LEAF_NODE	1873:35	1873:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1873:56	1873:56	6	,
LEAF_NODE	1873:58	1873:58	6	F
LEAF_NODE	1873:59	1873:59	6	,
LEAF_NODE	1873:60	1873:60	6	T
LEAF_NODE	1873:61	1873:61	6	,
LEAF_NODE	1873:62	1873:62	6	T
LEAF_NODE	1873:63	1873:63	6	)
LEAF_NODE	1873:64	1873:64	6	:
JUMP_STATEMENT	1874:3	1874:38	6	return cpContigStrips2SeparateTiles ;
KEYWORD	1874:3	1874:3	7	return
LEAF_NODE	1874:3	1874:3	8	return
DESTINATION	1874:10	1874:10	7	cpContigStrips2SeparateTiles
EXPR	1874:10	1874:10	8	cpContigStrips2SeparateTiles
FIELD	1874:10	1874:10	9	cpContigStrips2SeparateTiles
LEAF_NODE	1874:10	1874:10	10	cpContigStrips2SeparateTiles
LEAF_NODE	1874:38	1874:38	7	;
LEAF_NODE	1875:2	1875:2	6	case
LEAF_NODE	1875:7	1875:7	6	pack
LEAF_NODE	1875:11	1875:11	6	(
LEAF_NODE	1875:12	1875:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1875:33	1875:33	6	,
LEAF_NODE	1875:35	1875:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1875:54	1875:54	6	,
LEAF_NODE	1875:58	1875:58	6	F
LEAF_NODE	1875:59	1875:59	6	,
LEAF_NODE	1875:60	1875:60	6	T
LEAF_NODE	1875:61	1875:61	6	,
LEAF_NODE	1875:62	1875:62	6	F
LEAF_NODE	1875:63	1875:63	6	)
LEAF_NODE	1875:64	1875:64	6	:
LEAF_NODE	1876:2	1876:2	6	case
LEAF_NODE	1876:7	1876:7	6	pack
LEAF_NODE	1876:11	1876:11	6	(
LEAF_NODE	1876:12	1876:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1876:33	1876:33	6	,
LEAF_NODE	1876:35	1876:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1876:54	1876:54	6	,
LEAF_NODE	1876:58	1876:58	6	F
LEAF_NODE	1876:59	1876:59	6	,
LEAF_NODE	1876:60	1876:60	6	T
LEAF_NODE	1876:61	1876:61	6	,
LEAF_NODE	1876:62	1876:62	6	T
LEAF_NODE	1876:63	1876:63	6	)
LEAF_NODE	1876:64	1876:64	6	:
JUMP_STATEMENT	1877:3	1877:38	6	return cpSeparateStrips2ContigTiles ;
KEYWORD	1877:3	1877:3	7	return
LEAF_NODE	1877:3	1877:3	8	return
DESTINATION	1877:10	1877:10	7	cpSeparateStrips2ContigTiles
EXPR	1877:10	1877:10	8	cpSeparateStrips2ContigTiles
FIELD	1877:10	1877:10	9	cpSeparateStrips2ContigTiles
LEAF_NODE	1877:10	1877:10	10	cpSeparateStrips2ContigTiles
LEAF_NODE	1877:38	1877:38	7	;
LEAF_NODE	1878:2	1878:2	6	case
LEAF_NODE	1878:7	1878:7	6	pack
LEAF_NODE	1878:11	1878:11	6	(
LEAF_NODE	1878:12	1878:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1878:33	1878:33	6	,
LEAF_NODE	1878:35	1878:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1878:56	1878:56	6	,
LEAF_NODE	1878:58	1878:58	6	F
LEAF_NODE	1878:59	1878:59	6	,
LEAF_NODE	1878:60	1878:60	6	T
LEAF_NODE	1878:61	1878:61	6	,
LEAF_NODE	1878:62	1878:62	6	F
LEAF_NODE	1878:63	1878:63	6	)
LEAF_NODE	1878:64	1878:64	6	:
LEAF_NODE	1879:2	1879:2	6	case
LEAF_NODE	1879:7	1879:7	6	pack
LEAF_NODE	1879:11	1879:11	6	(
LEAF_NODE	1879:12	1879:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1879:33	1879:33	6	,
LEAF_NODE	1879:35	1879:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1879:56	1879:56	6	,
LEAF_NODE	1879:58	1879:58	6	F
LEAF_NODE	1879:59	1879:59	6	,
LEAF_NODE	1879:60	1879:60	6	T
LEAF_NODE	1879:61	1879:61	6	,
LEAF_NODE	1879:62	1879:62	6	T
LEAF_NODE	1879:63	1879:63	6	)
LEAF_NODE	1879:64	1879:64	6	:
JUMP_STATEMENT	1880:3	1880:40	6	return cpSeparateStrips2SeparateTiles ;
KEYWORD	1880:3	1880:3	7	return
LEAF_NODE	1880:3	1880:3	8	return
DESTINATION	1880:10	1880:10	7	cpSeparateStrips2SeparateTiles
EXPR	1880:10	1880:10	8	cpSeparateStrips2SeparateTiles
FIELD	1880:10	1880:10	9	cpSeparateStrips2SeparateTiles
LEAF_NODE	1880:10	1880:10	10	cpSeparateStrips2SeparateTiles
LEAF_NODE	1880:40	1880:40	7	;
LEAF_NODE	1882:2	1882:2	6	case
LEAF_NODE	1882:7	1882:7	6	pack
LEAF_NODE	1882:11	1882:11	6	(
LEAF_NODE	1882:12	1882:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1882:31	1882:31	6	,
LEAF_NODE	1882:35	1882:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1882:54	1882:54	6	,
LEAF_NODE	1882:58	1882:58	6	T
LEAF_NODE	1882:59	1882:59	6	,
LEAF_NODE	1882:60	1882:60	6	T
LEAF_NODE	1882:61	1882:61	6	,
LEAF_NODE	1882:62	1882:62	6	F
LEAF_NODE	1882:63	1882:63	6	)
LEAF_NODE	1882:64	1882:64	6	:
LEAF_NODE	1883:2	1883:2	6	case
LEAF_NODE	1883:7	1883:7	6	pack
LEAF_NODE	1883:11	1883:11	6	(
LEAF_NODE	1883:12	1883:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1883:31	1883:31	6	,
LEAF_NODE	1883:35	1883:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1883:54	1883:54	6	,
LEAF_NODE	1883:58	1883:58	6	T
LEAF_NODE	1883:59	1883:59	6	,
LEAF_NODE	1883:60	1883:60	6	T
LEAF_NODE	1883:61	1883:61	6	,
LEAF_NODE	1883:62	1883:62	6	T
LEAF_NODE	1883:63	1883:63	6	)
LEAF_NODE	1883:64	1883:64	6	:
JUMP_STATEMENT	1884:3	1884:35	6	return cpContigTiles2ContigTiles ;
KEYWORD	1884:3	1884:3	7	return
LEAF_NODE	1884:3	1884:3	8	return
DESTINATION	1884:10	1884:10	7	cpContigTiles2ContigTiles
EXPR	1884:10	1884:10	8	cpContigTiles2ContigTiles
FIELD	1884:10	1884:10	9	cpContigTiles2ContigTiles
LEAF_NODE	1884:10	1884:10	10	cpContigTiles2ContigTiles
LEAF_NODE	1884:35	1884:35	7	;
LEAF_NODE	1885:2	1885:2	6	case
LEAF_NODE	1885:7	1885:7	6	pack
LEAF_NODE	1885:11	1885:11	6	(
LEAF_NODE	1885:12	1885:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1885:31	1885:31	6	,
LEAF_NODE	1885:35	1885:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1885:56	1885:56	6	,
LEAF_NODE	1885:58	1885:58	6	T
LEAF_NODE	1885:59	1885:59	6	,
LEAF_NODE	1885:60	1885:60	6	T
LEAF_NODE	1885:61	1885:61	6	,
LEAF_NODE	1885:62	1885:62	6	F
LEAF_NODE	1885:63	1885:63	6	)
LEAF_NODE	1885:64	1885:64	6	:
LEAF_NODE	1886:2	1886:2	6	case
LEAF_NODE	1886:7	1886:7	6	pack
LEAF_NODE	1886:11	1886:11	6	(
LEAF_NODE	1886:12	1886:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1886:31	1886:31	6	,
LEAF_NODE	1886:35	1886:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1886:56	1886:56	6	,
LEAF_NODE	1886:58	1886:58	6	T
LEAF_NODE	1886:59	1886:59	6	,
LEAF_NODE	1886:60	1886:60	6	T
LEAF_NODE	1886:61	1886:61	6	,
LEAF_NODE	1886:62	1886:62	6	T
LEAF_NODE	1886:63	1886:63	6	)
LEAF_NODE	1886:64	1886:64	6	:
JUMP_STATEMENT	1887:3	1887:37	6	return cpContigTiles2SeparateTiles ;
KEYWORD	1887:3	1887:3	7	return
LEAF_NODE	1887:3	1887:3	8	return
DESTINATION	1887:10	1887:10	7	cpContigTiles2SeparateTiles
EXPR	1887:10	1887:10	8	cpContigTiles2SeparateTiles
FIELD	1887:10	1887:10	9	cpContigTiles2SeparateTiles
LEAF_NODE	1887:10	1887:10	10	cpContigTiles2SeparateTiles
LEAF_NODE	1887:37	1887:37	7	;
LEAF_NODE	1888:2	1888:2	6	case
LEAF_NODE	1888:7	1888:7	6	pack
LEAF_NODE	1888:11	1888:11	6	(
LEAF_NODE	1888:12	1888:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1888:33	1888:33	6	,
LEAF_NODE	1888:35	1888:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1888:54	1888:54	6	,
LEAF_NODE	1888:58	1888:58	6	T
LEAF_NODE	1888:59	1888:59	6	,
LEAF_NODE	1888:60	1888:60	6	T
LEAF_NODE	1888:61	1888:61	6	,
LEAF_NODE	1888:62	1888:62	6	F
LEAF_NODE	1888:63	1888:63	6	)
LEAF_NODE	1888:64	1888:64	6	:
LEAF_NODE	1889:2	1889:2	6	case
LEAF_NODE	1889:7	1889:7	6	pack
LEAF_NODE	1889:11	1889:11	6	(
LEAF_NODE	1889:12	1889:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1889:33	1889:33	6	,
LEAF_NODE	1889:35	1889:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1889:54	1889:54	6	,
LEAF_NODE	1889:58	1889:58	6	T
LEAF_NODE	1889:59	1889:59	6	,
LEAF_NODE	1889:60	1889:60	6	T
LEAF_NODE	1889:61	1889:61	6	,
LEAF_NODE	1889:62	1889:62	6	T
LEAF_NODE	1889:63	1889:63	6	)
LEAF_NODE	1889:64	1889:64	6	:
JUMP_STATEMENT	1890:3	1890:37	6	return cpSeparateTiles2ContigTiles ;
KEYWORD	1890:3	1890:3	7	return
LEAF_NODE	1890:3	1890:3	8	return
DESTINATION	1890:10	1890:10	7	cpSeparateTiles2ContigTiles
EXPR	1890:10	1890:10	8	cpSeparateTiles2ContigTiles
FIELD	1890:10	1890:10	9	cpSeparateTiles2ContigTiles
LEAF_NODE	1890:10	1890:10	10	cpSeparateTiles2ContigTiles
LEAF_NODE	1890:37	1890:37	7	;
LEAF_NODE	1891:2	1891:2	6	case
LEAF_NODE	1891:7	1891:7	6	pack
LEAF_NODE	1891:11	1891:11	6	(
LEAF_NODE	1891:12	1891:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1891:33	1891:33	6	,
LEAF_NODE	1891:35	1891:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1891:56	1891:56	6	,
LEAF_NODE	1891:58	1891:58	6	T
LEAF_NODE	1891:59	1891:59	6	,
LEAF_NODE	1891:60	1891:60	6	T
LEAF_NODE	1891:61	1891:61	6	,
LEAF_NODE	1891:62	1891:62	6	F
LEAF_NODE	1891:63	1891:63	6	)
LEAF_NODE	1891:64	1891:64	6	:
LEAF_NODE	1892:2	1892:2	6	case
LEAF_NODE	1892:7	1892:7	6	pack
LEAF_NODE	1892:11	1892:11	6	(
LEAF_NODE	1892:12	1892:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1892:33	1892:33	6	,
LEAF_NODE	1892:35	1892:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1892:56	1892:56	6	,
LEAF_NODE	1892:58	1892:58	6	T
LEAF_NODE	1892:59	1892:59	6	,
LEAF_NODE	1892:60	1892:60	6	T
LEAF_NODE	1892:61	1892:61	6	,
LEAF_NODE	1892:62	1892:62	6	T
LEAF_NODE	1892:63	1892:63	6	)
LEAF_NODE	1892:64	1892:64	6	:
JUMP_STATEMENT	1893:3	1893:39	6	return cpSeparateTiles2SeparateTiles ;
KEYWORD	1893:3	1893:3	7	return
LEAF_NODE	1893:3	1893:3	8	return
DESTINATION	1893:10	1893:10	7	cpSeparateTiles2SeparateTiles
EXPR	1893:10	1893:10	8	cpSeparateTiles2SeparateTiles
FIELD	1893:10	1893:10	9	cpSeparateTiles2SeparateTiles
LEAF_NODE	1893:10	1893:10	10	cpSeparateTiles2SeparateTiles
LEAF_NODE	1893:39	1893:39	7	;
LEAF_NODE	1895:2	1895:2	6	case
LEAF_NODE	1895:7	1895:7	6	pack
LEAF_NODE	1895:11	1895:11	6	(
LEAF_NODE	1895:12	1895:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1895:31	1895:31	6	,
LEAF_NODE	1895:35	1895:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1895:54	1895:54	6	,
LEAF_NODE	1895:58	1895:58	6	T
LEAF_NODE	1895:59	1895:59	6	,
LEAF_NODE	1895:60	1895:60	6	F
LEAF_NODE	1895:61	1895:61	6	,
LEAF_NODE	1895:62	1895:62	6	F
LEAF_NODE	1895:63	1895:63	6	)
LEAF_NODE	1895:64	1895:64	6	:
LEAF_NODE	1896:2	1896:2	6	case
LEAF_NODE	1896:7	1896:7	6	pack
LEAF_NODE	1896:11	1896:11	6	(
LEAF_NODE	1896:12	1896:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1896:31	1896:31	6	,
LEAF_NODE	1896:35	1896:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1896:54	1896:54	6	,
LEAF_NODE	1896:58	1896:58	6	T
LEAF_NODE	1896:59	1896:59	6	,
LEAF_NODE	1896:60	1896:60	6	F
LEAF_NODE	1896:61	1896:61	6	,
LEAF_NODE	1896:62	1896:62	6	T
LEAF_NODE	1896:63	1896:63	6	)
LEAF_NODE	1896:64	1896:64	6	:
JUMP_STATEMENT	1897:3	1897:36	6	return cpContigTiles2ContigStrips ;
KEYWORD	1897:3	1897:3	7	return
LEAF_NODE	1897:3	1897:3	8	return
DESTINATION	1897:10	1897:10	7	cpContigTiles2ContigStrips
EXPR	1897:10	1897:10	8	cpContigTiles2ContigStrips
FIELD	1897:10	1897:10	9	cpContigTiles2ContigStrips
LEAF_NODE	1897:10	1897:10	10	cpContigTiles2ContigStrips
LEAF_NODE	1897:36	1897:36	7	;
LEAF_NODE	1898:2	1898:2	6	case
LEAF_NODE	1898:7	1898:7	6	pack
LEAF_NODE	1898:11	1898:11	6	(
LEAF_NODE	1898:12	1898:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1898:31	1898:31	6	,
LEAF_NODE	1898:35	1898:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1898:56	1898:56	6	,
LEAF_NODE	1898:58	1898:58	6	T
LEAF_NODE	1898:59	1898:59	6	,
LEAF_NODE	1898:60	1898:60	6	F
LEAF_NODE	1898:61	1898:61	6	,
LEAF_NODE	1898:62	1898:62	6	F
LEAF_NODE	1898:63	1898:63	6	)
LEAF_NODE	1898:64	1898:64	6	:
LEAF_NODE	1899:2	1899:2	6	case
LEAF_NODE	1899:7	1899:7	6	pack
LEAF_NODE	1899:11	1899:11	6	(
LEAF_NODE	1899:12	1899:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1899:31	1899:31	6	,
LEAF_NODE	1899:35	1899:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1899:56	1899:56	6	,
LEAF_NODE	1899:58	1899:58	6	T
LEAF_NODE	1899:59	1899:59	6	,
LEAF_NODE	1899:60	1899:60	6	F
LEAF_NODE	1899:61	1899:61	6	,
LEAF_NODE	1899:62	1899:62	6	T
LEAF_NODE	1899:63	1899:63	6	)
LEAF_NODE	1899:64	1899:64	6	:
JUMP_STATEMENT	1900:3	1900:38	6	return cpContigTiles2SeparateStrips ;
KEYWORD	1900:3	1900:3	7	return
LEAF_NODE	1900:3	1900:3	8	return
DESTINATION	1900:10	1900:10	7	cpContigTiles2SeparateStrips
EXPR	1900:10	1900:10	8	cpContigTiles2SeparateStrips
FIELD	1900:10	1900:10	9	cpContigTiles2SeparateStrips
LEAF_NODE	1900:10	1900:10	10	cpContigTiles2SeparateStrips
LEAF_NODE	1900:38	1900:38	7	;
LEAF_NODE	1901:2	1901:2	6	case
LEAF_NODE	1901:7	1901:7	6	pack
LEAF_NODE	1901:11	1901:11	6	(
LEAF_NODE	1901:12	1901:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1901:33	1901:33	6	,
LEAF_NODE	1901:35	1901:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1901:54	1901:54	6	,
LEAF_NODE	1901:58	1901:58	6	T
LEAF_NODE	1901:59	1901:59	6	,
LEAF_NODE	1901:60	1901:60	6	F
LEAF_NODE	1901:61	1901:61	6	,
LEAF_NODE	1901:62	1901:62	6	F
LEAF_NODE	1901:63	1901:63	6	)
LEAF_NODE	1901:64	1901:64	6	:
LEAF_NODE	1902:2	1902:2	6	case
LEAF_NODE	1902:7	1902:7	6	pack
LEAF_NODE	1902:11	1902:11	6	(
LEAF_NODE	1902:12	1902:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1902:33	1902:33	6	,
LEAF_NODE	1902:35	1902:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1902:54	1902:54	6	,
LEAF_NODE	1902:58	1902:58	6	T
LEAF_NODE	1902:59	1902:59	6	,
LEAF_NODE	1902:60	1902:60	6	F
LEAF_NODE	1902:61	1902:61	6	,
LEAF_NODE	1902:62	1902:62	6	T
LEAF_NODE	1902:63	1902:63	6	)
LEAF_NODE	1902:64	1902:64	6	:
JUMP_STATEMENT	1903:3	1903:38	6	return cpSeparateTiles2ContigStrips ;
KEYWORD	1903:3	1903:3	7	return
LEAF_NODE	1903:3	1903:3	8	return
DESTINATION	1903:10	1903:10	7	cpSeparateTiles2ContigStrips
EXPR	1903:10	1903:10	8	cpSeparateTiles2ContigStrips
FIELD	1903:10	1903:10	9	cpSeparateTiles2ContigStrips
LEAF_NODE	1903:10	1903:10	10	cpSeparateTiles2ContigStrips
LEAF_NODE	1903:38	1903:38	7	;
LEAF_NODE	1904:2	1904:2	6	case
LEAF_NODE	1904:7	1904:7	6	pack
LEAF_NODE	1904:11	1904:11	6	(
LEAF_NODE	1904:12	1904:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1904:33	1904:33	6	,
LEAF_NODE	1904:35	1904:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1904:56	1904:56	6	,
LEAF_NODE	1904:58	1904:58	6	T
LEAF_NODE	1904:59	1904:59	6	,
LEAF_NODE	1904:60	1904:60	6	F
LEAF_NODE	1904:61	1904:61	6	,
LEAF_NODE	1904:62	1904:62	6	F
LEAF_NODE	1904:63	1904:63	6	)
LEAF_NODE	1904:64	1904:64	6	:
LEAF_NODE	1905:2	1905:2	6	case
LEAF_NODE	1905:7	1905:7	6	pack
LEAF_NODE	1905:11	1905:11	6	(
LEAF_NODE	1905:12	1905:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1905:33	1905:33	6	,
LEAF_NODE	1905:35	1905:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1905:56	1905:56	6	,
LEAF_NODE	1905:58	1905:58	6	T
LEAF_NODE	1905:59	1905:59	6	,
LEAF_NODE	1905:60	1905:60	6	F
LEAF_NODE	1905:61	1905:61	6	,
LEAF_NODE	1905:62	1905:62	6	T
LEAF_NODE	1905:63	1905:63	6	)
LEAF_NODE	1905:64	1905:64	6	:
JUMP_STATEMENT	1906:3	1906:40	6	return cpSeparateTiles2SeparateStrips ;
KEYWORD	1906:3	1906:3	7	return
LEAF_NODE	1906:3	1906:3	8	return
DESTINATION	1906:10	1906:10	7	cpSeparateTiles2SeparateStrips
EXPR	1906:10	1906:10	8	cpSeparateTiles2SeparateStrips
FIELD	1906:10	1906:10	9	cpSeparateTiles2SeparateStrips
LEAF_NODE	1906:10	1906:10	10	cpSeparateTiles2SeparateStrips
LEAF_NODE	1906:40	1906:40	7	;
LEAF_NODE	1908:2	1908:2	6	case
LEAF_NODE	1908:7	1908:7	6	pack
LEAF_NODE	1908:11	1908:11	6	(
LEAF_NODE	1908:12	1908:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1908:31	1908:31	6	,
LEAF_NODE	1908:35	1908:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1908:54	1908:54	6	,
LEAF_NODE	1908:58	1908:58	6	F
LEAF_NODE	1908:59	1908:59	6	,
LEAF_NODE	1908:60	1908:60	6	F
LEAF_NODE	1908:61	1908:61	6	,
LEAF_NODE	1908:62	1908:62	6	F
LEAF_NODE	1908:63	1908:63	6	)
LEAF_NODE	1908:64	1908:64	6	:
JUMP_STATEMENT	1909:3	1909:61	6	return bias ? cpBiasedContig2Contig : cpContig2ContigByRow ;
KEYWORD	1909:3	1909:3	7	return
LEAF_NODE	1909:3	1909:3	8	return
DESTINATION	1909:10	1909:10	7	bias ? cpBiasedContig2Contig : cpContig2ContigByRow
EXPR	1909:10	1909:10	8	bias ? cpBiasedContig2Contig : cpContig2ContigByRow
COND_EXPR	1909:10	1909:41	9	bias ? cpBiasedContig2Contig : cpContig2ContigByRow
CONDITION	1909:10	1909:10	10	bias
FIELD	1909:10	1909:10	11	bias
LEAF_NODE	1909:10	1909:10	12	bias
LEAF_NODE	1909:15	1909:15	10	?
EXPR	1909:17	1909:17	10	cpBiasedContig2Contig
FIELD	1909:17	1909:17	11	cpBiasedContig2Contig
LEAF_NODE	1909:17	1909:17	12	cpBiasedContig2Contig
LEAF_NODE	1909:39	1909:39	10	:
FIELD	1909:41	1909:41	10	cpContig2ContigByRow
LEAF_NODE	1909:41	1909:41	11	cpContig2ContigByRow
LEAF_NODE	1909:61	1909:61	7	;
LEAF_NODE	1910:2	1910:2	6	case
LEAF_NODE	1910:7	1910:7	6	pack
LEAF_NODE	1910:11	1910:11	6	(
LEAF_NODE	1910:12	1910:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1910:31	1910:31	6	,
LEAF_NODE	1910:35	1910:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1910:54	1910:54	6	,
LEAF_NODE	1910:58	1910:58	6	F
LEAF_NODE	1910:59	1910:59	6	,
LEAF_NODE	1910:60	1910:60	6	F
LEAF_NODE	1910:61	1910:61	6	,
LEAF_NODE	1910:62	1910:62	6	T
LEAF_NODE	1910:63	1910:63	6	)
LEAF_NODE	1910:64	1910:64	6	:
JUMP_STATEMENT	1911:3	1911:25	6	return cpDecodedStrips ;
KEYWORD	1911:3	1911:3	7	return
LEAF_NODE	1911:3	1911:3	8	return
DESTINATION	1911:10	1911:10	7	cpDecodedStrips
EXPR	1911:10	1911:10	8	cpDecodedStrips
FIELD	1911:10	1911:10	9	cpDecodedStrips
LEAF_NODE	1911:10	1911:10	10	cpDecodedStrips
LEAF_NODE	1911:25	1911:25	7	;
LEAF_NODE	1912:2	1912:2	6	case
LEAF_NODE	1912:7	1912:7	6	pack
LEAF_NODE	1912:11	1912:11	6	(
LEAF_NODE	1912:12	1912:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1912:31	1912:31	6	,
LEAF_NODE	1912:33	1912:33	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1912:54	1912:54	6	,
LEAF_NODE	1912:58	1912:58	6	F
LEAF_NODE	1912:59	1912:59	6	,
LEAF_NODE	1912:60	1912:60	6	F
LEAF_NODE	1912:61	1912:61	6	,
LEAF_NODE	1912:62	1912:62	6	F
LEAF_NODE	1912:63	1912:63	6	)
LEAF_NODE	1912:64	1912:64	6	:
LEAF_NODE	1913:2	1913:2	6	case
LEAF_NODE	1913:7	1913:7	6	pack
LEAF_NODE	1913:11	1913:11	6	(
LEAF_NODE	1913:12	1913:12	6	PLANARCONFIG_CONTIG
LEAF_NODE	1913:31	1913:31	6	,
LEAF_NODE	1913:33	1913:33	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1913:54	1913:54	6	,
LEAF_NODE	1913:58	1913:58	6	F
LEAF_NODE	1913:59	1913:59	6	,
LEAF_NODE	1913:60	1913:60	6	F
LEAF_NODE	1913:61	1913:61	6	,
LEAF_NODE	1913:62	1913:62	6	T
LEAF_NODE	1913:63	1913:63	6	)
LEAF_NODE	1913:64	1913:64	6	:
JUMP_STATEMENT	1914:3	1914:32	6	return cpContig2SeparateByRow ;
KEYWORD	1914:3	1914:3	7	return
LEAF_NODE	1914:3	1914:3	8	return
DESTINATION	1914:10	1914:10	7	cpContig2SeparateByRow
EXPR	1914:10	1914:10	8	cpContig2SeparateByRow
FIELD	1914:10	1914:10	9	cpContig2SeparateByRow
LEAF_NODE	1914:10	1914:10	10	cpContig2SeparateByRow
LEAF_NODE	1914:32	1914:32	7	;
LEAF_NODE	1915:2	1915:2	6	case
LEAF_NODE	1915:7	1915:7	6	pack
LEAF_NODE	1915:11	1915:11	6	(
LEAF_NODE	1915:12	1915:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1915:33	1915:33	6	,
LEAF_NODE	1915:35	1915:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1915:54	1915:54	6	,
LEAF_NODE	1915:58	1915:58	6	F
LEAF_NODE	1915:59	1915:59	6	,
LEAF_NODE	1915:60	1915:60	6	F
LEAF_NODE	1915:61	1915:61	6	,
LEAF_NODE	1915:62	1915:62	6	F
LEAF_NODE	1915:63	1915:63	6	)
LEAF_NODE	1915:64	1915:64	6	:
LEAF_NODE	1916:2	1916:2	6	case
LEAF_NODE	1916:7	1916:7	6	pack
LEAF_NODE	1916:11	1916:11	6	(
LEAF_NODE	1916:12	1916:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1916:33	1916:33	6	,
LEAF_NODE	1916:35	1916:35	6	PLANARCONFIG_CONTIG
LEAF_NODE	1916:54	1916:54	6	,
LEAF_NODE	1916:58	1916:58	6	F
LEAF_NODE	1916:59	1916:59	6	,
LEAF_NODE	1916:60	1916:60	6	F
LEAF_NODE	1916:61	1916:61	6	,
LEAF_NODE	1916:62	1916:62	6	T
LEAF_NODE	1916:63	1916:63	6	)
LEAF_NODE	1916:64	1916:64	6	:
JUMP_STATEMENT	1917:3	1917:32	6	return cpSeparate2ContigByRow ;
KEYWORD	1917:3	1917:3	7	return
LEAF_NODE	1917:3	1917:3	8	return
DESTINATION	1917:10	1917:10	7	cpSeparate2ContigByRow
EXPR	1917:10	1917:10	8	cpSeparate2ContigByRow
FIELD	1917:10	1917:10	9	cpSeparate2ContigByRow
LEAF_NODE	1917:10	1917:10	10	cpSeparate2ContigByRow
LEAF_NODE	1917:32	1917:32	7	;
LEAF_NODE	1918:2	1918:2	6	case
LEAF_NODE	1918:7	1918:7	6	pack
LEAF_NODE	1918:11	1918:11	6	(
LEAF_NODE	1918:12	1918:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1918:33	1918:33	6	,
LEAF_NODE	1918:35	1918:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1918:56	1918:56	6	,
LEAF_NODE	1918:58	1918:58	6	F
LEAF_NODE	1918:59	1918:59	6	,
LEAF_NODE	1918:60	1918:60	6	F
LEAF_NODE	1918:61	1918:61	6	,
LEAF_NODE	1918:62	1918:62	6	F
LEAF_NODE	1918:63	1918:63	6	)
LEAF_NODE	1918:64	1918:64	6	:
LEAF_NODE	1919:2	1919:2	6	case
LEAF_NODE	1919:7	1919:7	6	pack
LEAF_NODE	1919:11	1919:11	6	(
LEAF_NODE	1919:12	1919:12	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1919:33	1919:33	6	,
LEAF_NODE	1919:35	1919:35	6	PLANARCONFIG_SEPARATE
LEAF_NODE	1919:56	1919:56	6	,
LEAF_NODE	1919:58	1919:58	6	F
LEAF_NODE	1919:59	1919:59	6	,
LEAF_NODE	1919:60	1919:60	6	F
LEAF_NODE	1919:61	1919:61	6	,
LEAF_NODE	1919:62	1919:62	6	T
LEAF_NODE	1919:63	1919:63	6	)
LEAF_NODE	1919:64	1919:64	6	:
JUMP_STATEMENT	1920:3	1920:34	6	return cpSeparate2SeparateByRow ;
KEYWORD	1920:3	1920:3	7	return
LEAF_NODE	1920:3	1920:3	8	return
DESTINATION	1920:10	1920:10	7	cpSeparate2SeparateByRow
EXPR	1920:10	1920:10	8	cpSeparate2SeparateByRow
FIELD	1920:10	1920:10	9	cpSeparate2SeparateByRow
LEAF_NODE	1920:10	1920:10	10	cpSeparate2SeparateByRow
LEAF_NODE	1920:34	1920:34	7	;
LEAF_NODE	1921:1	1921:1	5	}
EXPR_STATEMENT	1925:1	1926:22	3	fprintf ( stderr , "tiffcp: %s: Don't know how to copy/convert image.\n" , TIFFFileName ( in ) ) ;
EXPR	1925:1	1925:1	4	fprintf ( stderr , "tiffcp: %s: Don't know how to copy/convert image.\n" , TIFFFileName ( in ) )
FUNCTION_CALL	1925:1	1926:21	5	fprintf ( stderr , "tiffcp: %s: Don't know how to copy/convert image.\n" , TIFFFileName ( in ) )
CALLEE	1925:1	1925:1	6	fprintf
LEAF_NODE	1925:1	1925:1	7	fprintf
LEAF_NODE	1925:8	1925:8	6	(
ARGUMENT	1925:9	1925:9	6	stderr
FIELD	1925:9	1925:9	7	stderr
LEAF_NODE	1925:9	1925:9	8	stderr
LEAF_NODE	1925:15	1925:15	6	,
ARGUMENT	1925:17	1925:17	6	"tiffcp: %s: Don't know how to copy/convert image.\n"
FIELD	1925:17	1925:17	7	"tiffcp: %s: Don't know how to copy/convert image.\n"
LEAF_NODE	1925:17	1925:17	8	"tiffcp: %s: Don't know how to copy/convert image.\n"
LEAF_NODE	1925:70	1925:70	6	,
ARGUMENT	1926:5	1926:5	6	TIFFFileName ( in )
FUNCTION_CALL	1926:5	1926:20	7	TIFFFileName ( in )
CALLEE	1926:5	1926:5	8	TIFFFileName
LEAF_NODE	1926:5	1926:5	9	TIFFFileName
LEAF_NODE	1926:17	1926:17	8	(
ARGUMENT	1926:18	1926:18	8	in
FIELD	1926:18	1926:18	9	in
LEAF_NODE	1926:18	1926:18	10	in
LEAF_NODE	1926:20	1926:20	8	)
LEAF_NODE	1926:21	1926:21	6	)
LEAF_NODE	1926:22	1926:22	4	;
LEAF_NODE	1927:1	1927:1	3	return
LEAF_NODE	1927:8	1927:8	3	(
LEAF_NODE	1927:9	1927:9	3	NULL
LEAF_NODE	1927:13	1927:13	3	)
LEAF_NODE	1927:14	1927:14	3	;
LEAF_NODE	1928:0	1928:0	2	}
