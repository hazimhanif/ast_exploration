SOURCE_FILE	53:0	1632:0	0	
FUNCTION_DEF	53:0	180:0	1	
RETURN_TYPE	53:0	53:7	2	static int
LEAF_NODE	53:0	53:0	3	static
TYPE_NAME	53:7	53:7	3	int
LEAF_NODE	53:7	53:7	4	int
FUNCTION_NAME	53:11	53:11	2	TIFFReadAndRealloc
LEAF_NODE	53:11	53:11	3	TIFFReadAndRealloc
PARAMETER_LIST	53:29	56:50	2	( TIFF * tif , tmsize_t size , tmsize_t rawdata_offset , int is_strip , uint32 strip_or_tile , const char * module )
LEAF_NODE	53:29	53:29	3	(
PARAMETER_DECL	53:31	53:37	3	TIFF * tif
TYPE	53:31	53:35	4	TIFF *
TYPE_NAME	53:31	53:31	5	TIFF
LEAF_NODE	53:31	53:31	6	TIFF
POINTER	53:35	53:35	5	*
LEAF_NODE	53:35	53:35	6	*
NAME	53:37	53:37	4	tif
LEAF_NODE	53:37	53:37	5	tif
LEAF_NODE	53:40	53:40	3	,
PARAMETER_DECL	53:42	53:51	3	tmsize_t size
TYPE	53:42	53:42	4	tmsize_t
TYPE_NAME	53:42	53:42	5	tmsize_t
LEAF_NODE	53:42	53:42	6	tmsize_t
NAME	53:51	53:51	4	size
LEAF_NODE	53:51	53:51	5	size
LEAF_NODE	53:55	53:55	3	,
PARAMETER_DECL	54:31	54:40	3	tmsize_t rawdata_offset
TYPE	54:31	54:31	4	tmsize_t
TYPE_NAME	54:31	54:31	5	tmsize_t
LEAF_NODE	54:31	54:31	6	tmsize_t
NAME	54:40	54:40	4	rawdata_offset
LEAF_NODE	54:40	54:40	5	rawdata_offset
LEAF_NODE	54:54	54:54	3	,
PARAMETER_DECL	55:31	55:35	3	int is_strip
TYPE	55:31	55:31	4	int
TYPE_NAME	55:31	55:31	5	int
LEAF_NODE	55:31	55:31	6	int
NAME	55:35	55:35	4	is_strip
LEAF_NODE	55:35	55:35	5	is_strip
LEAF_NODE	55:43	55:43	3	,
PARAMETER_DECL	55:45	55:52	3	uint32 strip_or_tile
TYPE	55:45	55:45	4	uint32
TYPE_NAME	55:45	55:45	5	uint32
LEAF_NODE	55:45	55:45	6	uint32
NAME	55:52	55:52	4	strip_or_tile
LEAF_NODE	55:52	55:52	5	strip_or_tile
LEAF_NODE	55:65	55:65	3	,
PARAMETER_DECL	56:31	56:43	3	const char * module
TYPE	56:31	56:41	4	const char *
TYPE_NAME	56:31	56:37	5	const char
LEAF_NODE	56:31	56:31	6	const
LEAF_NODE	56:37	56:37	6	char
POINTER	56:41	56:41	5	*
LEAF_NODE	56:41	56:41	6	*
NAME	56:43	56:43	4	module
LEAF_NODE	56:43	56:43	5	module
LEAF_NODE	56:50	56:50	3	)
LEAF_NODE	57:0	57:0	2	{
STATEMENTS	59:8	179:8	2	
SIMPLE_DECL	59:8	59:46	3	tmsize_t threshold ; threshold = INITIAL_THRESHOLD ;
VAR_DECL	59:8	59:17	4	tmsize_t threshold ; threshold = INITIAL_THRESHOLD
TYPE	59:8	59:8	5	tmsize_t
TYPE_NAME	59:8	59:8	6	tmsize_t
LEAF_NODE	59:8	59:8	7	tmsize_t
NAME	59:17	59:17	5	threshold
LEAF_NODE	59:17	59:17	6	threshold
LEAF_NODE	0:0	0:0	5	;
INIT	59:17	59:17	5	threshold = INITIAL_THRESHOLD
ASSIGN	59:17	59:29	6	threshold = INITIAL_THRESHOLD
LVAL	59:17	59:17	7	threshold
NAME	59:17	59:17	8	threshold
LEAF_NODE	59:17	59:17	9	threshold
ASSIGN_OP	59:27	59:27	7	=
LEAF_NODE	59:27	59:27	8	=
RVAL	59:29	59:29	7	INITIAL_THRESHOLD
FIELD	59:29	59:29	8	INITIAL_THRESHOLD
LEAF_NODE	59:29	59:29	9	INITIAL_THRESHOLD
LEAF_NODE	59:46	59:46	4	;
SIMPLE_DECL	61:8	61:33	3	tmsize_t already_read ; already_read = 0 ;
VAR_DECL	61:8	61:17	4	tmsize_t already_read ; already_read = 0
TYPE	61:8	61:8	5	tmsize_t
TYPE_NAME	61:8	61:8	6	tmsize_t
LEAF_NODE	61:8	61:8	7	tmsize_t
NAME	61:17	61:17	5	already_read
LEAF_NODE	61:17	61:17	6	already_read
LEAF_NODE	0:0	0:0	5	;
INIT	61:17	61:17	5	already_read = 0
ASSIGN	61:17	61:32	6	already_read = 0
LVAL	61:17	61:17	7	already_read
NAME	61:17	61:17	8	already_read
LEAF_NODE	61:17	61:17	9	already_read
ASSIGN_OP	61:30	61:30	7	=
LEAF_NODE	61:30	61:30	8	=
RVAL	61:32	61:32	7	0
FIELD	61:32	61:32	8	0
LEAF_NODE	61:32	61:32	9	0
LEAF_NODE	61:33	61:33	4	;
LEAF_NODE	67:8	67:8	3	if
LEAF_NODE	67:10	67:10	3	(
LEAF_NODE	67:12	67:12	3	size
LEAF_NODE	67:17	67:17	3	>
LEAF_NODE	67:19	67:19	3	1000
LEAF_NODE	67:24	67:24	3	*
LEAF_NODE	67:26	67:26	3	1000
LEAF_NODE	67:31	67:31	3	*
LEAF_NODE	67:33	67:33	3	1000
LEAF_NODE	67:38	67:38	3	)
LEAF_NODE	68:8	68:8	3	{
STATEMENTS	69:12	70:12	3	
SIMPLE_DECL	69:12	69:50	4	uint64 filesize ; filesize = TIFFGetFileSize ( tif ) ;
VAR_DECL	69:12	69:19	5	uint64 filesize ; filesize = TIFFGetFileSize ( tif )
TYPE	69:12	69:12	6	uint64
TYPE_NAME	69:12	69:12	7	uint64
LEAF_NODE	69:12	69:12	8	uint64
NAME	69:19	69:19	6	filesize
LEAF_NODE	69:19	69:19	7	filesize
LEAF_NODE	0:0	0:0	6	;
INIT	69:19	69:19	6	filesize = TIFFGetFileSize ( tif )
ASSIGN	69:19	69:30	7	filesize = TIFFGetFileSize ( tif )
LVAL	69:19	69:19	8	filesize
NAME	69:19	69:19	9	filesize
LEAF_NODE	69:19	69:19	10	filesize
ASSIGN_OP	69:28	69:28	8	=
LEAF_NODE	69:28	69:28	9	=
RVAL	69:30	69:30	8	TIFFGetFileSize ( tif )
FUNCTION_CALL	69:30	69:49	9	TIFFGetFileSize ( tif )
CALLEE	69:30	69:30	10	TIFFGetFileSize
LEAF_NODE	69:30	69:30	11	TIFFGetFileSize
LEAF_NODE	69:45	69:45	10	(
ARGUMENT	69:46	69:46	10	tif
FIELD	69:46	69:46	11	tif
LEAF_NODE	69:46	69:46	12	tif
LEAF_NODE	69:49	69:49	10	)
LEAF_NODE	69:50	69:50	5	;
SELECTION	70:12	71:12	4	
KEYWORD	70:12	70:12	5	if
LEAF_NODE	70:12	70:12	6	if
LEAF_NODE	70:14	70:14	5	(
CONDITION	70:16	70:16	5	( uint64 ) size >= filesize
EXPR	70:16	70:32	6	( uint64 ) size >= filesize
LEAF_NODE	70:16	70:16	7	(
TYPE_NAME	70:17	70:17	7	uint64
LEAF_NODE	70:17	70:17	8	uint64
LEAF_NODE	70:23	70:23	7	)
FIELD	70:24	70:24	7	size
LEAF_NODE	70:24	70:24	8	size
REL_OPERATOR	70:29	70:29	7	>=
LEAF_NODE	70:29	70:29	8	>=
FIELD	70:32	70:32	7	filesize
LEAF_NODE	70:32	70:32	8	filesize
LEAF_NODE	70:41	70:41	5	)
STATEMENTS	71:12	75:12	5	
LEAF_NODE	71:12	71:12	6	{
STATEMENTS	72:16	74:16	6	
EXPR_STATEMENT	72:16	73:78	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Chunk size requested is larger than file size." ) ;
EXPR	72:16	72:16	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Chunk size requested is larger than file size." )
FUNCTION_CALL	72:16	73:77	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Chunk size requested is larger than file size." )
CALLEE	72:16	72:16	10	TIFFErrorExt
LEAF_NODE	72:16	72:16	11	TIFFErrorExt
LEAF_NODE	72:28	72:28	10	(
ARGUMENT	72:29	72:29	10	tif -> tif_clientdata
FIELD	72:29	72:34	11	tif -> tif_clientdata
LEAF_NODE	72:29	72:29	12	tif
LEAF_NODE	72:32	72:32	12	->
LEAF_NODE	72:34	72:34	12	tif_clientdata
LEAF_NODE	72:48	72:48	10	,
ARGUMENT	72:50	72:50	10	module
FIELD	72:50	72:50	11	module
LEAF_NODE	72:50	72:50	12	module
LEAF_NODE	72:56	72:56	10	,
ARGUMENT	73:29	73:29	10	"Chunk size requested is larger than file size."
FIELD	73:29	73:29	11	"Chunk size requested is larger than file size."
LEAF_NODE	73:29	73:29	12	"Chunk size requested is larger than file size."
LEAF_NODE	73:77	73:77	10	)
LEAF_NODE	73:78	73:78	8	;
JUMP_STATEMENT	74:16	74:24	7	return 0 ;
KEYWORD	74:16	74:16	8	return
LEAF_NODE	74:16	74:16	9	return
DESTINATION	74:23	74:23	8	0
EXPR	74:23	74:23	9	0
FIELD	74:23	74:23	10	0
LEAF_NODE	74:23	74:23	11	0
LEAF_NODE	74:24	74:24	8	;
LEAF_NODE	75:12	75:12	6	}
LEAF_NODE	76:8	76:8	3	}
ITERATION	85:8	86:8	3	
KEYWORD	85:8	85:8	4	while
LEAF_NODE	85:8	85:8	5	while
LEAF_NODE	85:13	85:13	4	(
CONDITION	85:15	85:15	4	already_read < size
EXPR	85:15	85:30	5	already_read < size
FIELD	85:15	85:15	6	already_read
LEAF_NODE	85:15	85:15	7	already_read
REL_OPERATOR	85:28	85:28	6	<
LEAF_NODE	85:28	85:28	7	<
FIELD	85:30	85:30	6	size
LEAF_NODE	85:30	85:30	7	size
LEAF_NODE	85:35	85:35	4	)
STATEMENTS	86:8	178:8	4	
LEAF_NODE	86:8	86:8	5	{
STATEMENTS	87:12	130:12	5	
SIMPLE_DECL	87:12	87:31	6	tmsize_t bytes_read ;
VAR_DECL	87:12	87:21	7	tmsize_t bytes_read
TYPE	87:12	87:12	8	tmsize_t
TYPE_NAME	87:12	87:12	9	tmsize_t
LEAF_NODE	87:12	87:12	10	tmsize_t
NAME	87:21	87:21	8	bytes_read
LEAF_NODE	87:21	87:21	9	bytes_read
LEAF_NODE	87:31	87:31	7	;
SIMPLE_DECL	88:12	88:50	6	tmsize_t to_read ; to_read = size - already_read ;
VAR_DECL	88:12	88:21	7	tmsize_t to_read ; to_read = size - already_read
TYPE	88:12	88:12	8	tmsize_t
TYPE_NAME	88:12	88:12	9	tmsize_t
LEAF_NODE	88:12	88:12	10	tmsize_t
NAME	88:21	88:21	8	to_read
LEAF_NODE	88:21	88:21	9	to_read
LEAF_NODE	0:0	0:0	8	;
INIT	88:21	88:21	8	to_read = size - already_read
ASSIGN	88:21	88:31	9	to_read = size - already_read
LVAL	88:21	88:21	10	to_read
NAME	88:21	88:21	11	to_read
LEAF_NODE	88:21	88:21	12	to_read
ASSIGN_OP	88:29	88:29	10	=
LEAF_NODE	88:29	88:29	11	=
RVAL	88:31	88:38	10	size - already_read
FIELD	88:31	88:31	11	size
LEAF_NODE	88:31	88:31	12	size
LEAF_NODE	88:36	88:36	11	-
FIELD	88:38	88:38	11	already_read
LEAF_NODE	88:38	88:38	12	already_read
LEAF_NODE	88:50	88:50	7	;
SELECTION	90:12	92:12	6	
KEYWORD	90:12	90:12	7	if
LEAF_NODE	90:12	90:12	8	if
LEAF_NODE	90:14	90:14	7	(
CONDITION	90:16	90:16	7	to_read >= threshold && threshold < MAX_THRESHOLD && already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
EXPR	90:16	90:16	8	to_read >= threshold && threshold < MAX_THRESHOLD && already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
AND	90:16	90:40	9	to_read >= threshold && threshold < MAX_THRESHOLD && already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
EXPR	90:16	90:27	10	to_read >= threshold
FIELD	90:16	90:16	11	to_read
LEAF_NODE	90:16	90:16	12	to_read
REL_OPERATOR	90:24	90:24	11	>=
LEAF_NODE	90:24	90:24	12	>=
FIELD	90:27	90:27	11	threshold
LEAF_NODE	90:27	90:27	12	threshold
LEAF_NODE	90:37	90:37	10	&&
EXPR	90:40	90:40	10	threshold < MAX_THRESHOLD && already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
AND	90:40	91:16	11	threshold < MAX_THRESHOLD && already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
EXPR	90:40	90:52	12	threshold < MAX_THRESHOLD
FIELD	90:40	90:40	13	threshold
LEAF_NODE	90:40	90:40	14	threshold
REL_OPERATOR	90:50	90:50	13	<
LEAF_NODE	90:50	90:50	14	<
FIELD	90:52	90:52	13	MAX_THRESHOLD
LEAF_NODE	90:52	90:52	14	MAX_THRESHOLD
LEAF_NODE	90:66	90:66	12	&&
EXPR	91:16	91:58	12	already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
FIELD	91:16	91:16	13	already_read
LEAF_NODE	91:16	91:16	14	already_read
LEAF_NODE	91:29	91:29	13	+
FIELD	91:31	91:31	13	to_read
LEAF_NODE	91:31	91:31	14	to_read
LEAF_NODE	91:39	91:39	13	+
FIELD	91:41	91:41	13	rawdata_offset
LEAF_NODE	91:41	91:41	14	rawdata_offset
REL_OPERATOR	91:56	91:56	13	>
LEAF_NODE	91:56	91:56	14	>
FIELD	91:58	91:63	13	tif -> tif_rawdatasize
LEAF_NODE	91:58	91:58	14	tif
LEAF_NODE	91:61	91:61	14	->
LEAF_NODE	91:63	91:63	14	tif_rawdatasize
LEAF_NODE	91:79	91:79	7	)
STATEMENTS	92:12	95:12	7	
LEAF_NODE	92:12	92:12	8	{
STATEMENTS	93:16	94:16	8	
EXPR_STATEMENT	93:16	93:35	9	to_read = threshold ;
EXPR	93:16	93:16	10	to_read = threshold
ASSIGN	93:16	93:26	11	to_read = threshold
LVAL	93:16	93:16	12	to_read
FIELD	93:16	93:16	13	to_read
LEAF_NODE	93:16	93:16	14	to_read
ASSIGN_OP	93:24	93:24	12	=
LEAF_NODE	93:24	93:24	13	=
RVAL	93:26	93:26	12	threshold
FIELD	93:26	93:26	13	threshold
LEAF_NODE	93:26	93:26	14	threshold
LEAF_NODE	93:35	93:35	10	;
EXPR_STATEMENT	94:16	94:49	9	threshold *= THRESHOLD_MULTIPLIER ;
EXPR	94:16	94:16	10	threshold *= THRESHOLD_MULTIPLIER
ASSIGN	94:16	94:29	11	threshold *= THRESHOLD_MULTIPLIER
LVAL	94:16	94:16	12	threshold
FIELD	94:16	94:16	13	threshold
LEAF_NODE	94:16	94:16	14	threshold
ASSIGN_OP	94:26	94:26	12	*=
LEAF_NODE	94:26	94:26	13	*=
RVAL	94:29	94:29	12	THRESHOLD_MULTIPLIER
FIELD	94:29	94:29	13	THRESHOLD_MULTIPLIER
LEAF_NODE	94:29	94:29	14	THRESHOLD_MULTIPLIER
LEAF_NODE	94:49	94:49	10	;
LEAF_NODE	95:12	95:12	8	}
SELECTION	97:12	97:80	6	
KEYWORD	97:12	97:12	7	if
LEAF_NODE	97:12	97:12	8	if
LEAF_NODE	97:15	97:15	7	(
CONDITION	97:16	97:16	7	already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
EXPR	97:16	97:58	8	already_read + to_read + rawdata_offset > tif -> tif_rawdatasize
FIELD	97:16	97:16	9	already_read
LEAF_NODE	97:16	97:16	10	already_read
LEAF_NODE	97:29	97:29	9	+
FIELD	97:31	97:31	9	to_read
LEAF_NODE	97:31	97:31	10	to_read
LEAF_NODE	97:39	97:39	9	+
FIELD	97:41	97:41	9	rawdata_offset
LEAF_NODE	97:41	97:41	10	rawdata_offset
REL_OPERATOR	97:56	97:56	9	>
LEAF_NODE	97:56	97:56	10	>
FIELD	97:58	97:63	9	tif -> tif_rawdatasize
LEAF_NODE	97:58	97:58	10	tif
LEAF_NODE	97:61	97:61	10	->
LEAF_NODE	97:63	97:63	10	tif_rawdatasize
LEAF_NODE	97:78	97:78	7	)
STATEMENTS	97:80	120:12	7	
LEAF_NODE	97:80	97:80	8	{
STATEMENTS	98:16	119:16	8	
SIMPLE_DECL	98:16	98:34	9	uint8 * new_rawdata ;
VAR_DECL	98:16	98:23	10	uint8 * new_rawdata
TYPE	98:16	98:21	11	uint8 *
TYPE_NAME	98:16	98:16	12	uint8
LEAF_NODE	98:16	98:16	13	uint8
POINTER	98:21	98:21	12	*
LEAF_NODE	98:21	98:21	13	*
NAME	98:23	98:23	11	new_rawdata
LEAF_NODE	98:23	98:23	12	new_rawdata
LEAF_NODE	98:34	98:34	10	;
EXPR_STATEMENT	99:16	99:61	9	assert ( ( tif -> tif_flags & TIFF_MYBUFFER ) != 0 ) ;
EXPR	99:16	99:16	10	assert ( ( tif -> tif_flags & TIFF_MYBUFFER ) != 0 )
FUNCTION_CALL	99:16	99:60	11	assert ( ( tif -> tif_flags & TIFF_MYBUFFER ) != 0 )
CALLEE	99:16	99:16	12	assert
LEAF_NODE	99:16	99:16	13	assert
LEAF_NODE	99:22	99:22	12	(
ARGUMENT	99:23	99:59	12	( tif -> tif_flags & TIFF_MYBUFFER ) != 0
LEAF_NODE	99:23	99:23	13	(
FIELD	99:24	99:29	13	tif -> tif_flags
LEAF_NODE	99:24	99:24	14	tif
LEAF_NODE	99:27	99:27	14	->
LEAF_NODE	99:29	99:29	14	tif_flags
LEAF_NODE	99:39	99:39	13	&
FIELD	99:41	99:41	13	TIFF_MYBUFFER
LEAF_NODE	99:41	99:41	14	TIFF_MYBUFFER
LEAF_NODE	99:54	99:54	13	)
EQ_OPERATOR	99:56	99:56	13	!=
LEAF_NODE	99:56	99:56	14	!=
FIELD	99:59	99:59	13	0
LEAF_NODE	99:59	99:59	14	0
LEAF_NODE	99:60	99:60	12	)
LEAF_NODE	99:61	99:61	10	;
EXPR_STATEMENT	100:16	101:78	9	tif -> tif_rawdatasize = ( tmsize_t ) TIFFroundup_64 ( ( uint64 ) already_read + to_read + rawdata_offset , 1024 ) ;
EXPR	100:16	100:16	10	tif -> tif_rawdatasize = ( tmsize_t ) TIFFroundup_64 ( ( uint64 ) already_read + to_read + rawdata_offset , 1024 )
ASSIGN	100:16	100:39	11	tif -> tif_rawdatasize = ( tmsize_t ) TIFFroundup_64 ( ( uint64 ) already_read + to_read + rawdata_offset , 1024 )
LVAL	100:16	100:16	12	tif -> tif_rawdatasize
FIELD	100:16	100:21	13	tif -> tif_rawdatasize
LEAF_NODE	100:16	100:16	14	tif
LEAF_NODE	100:19	100:19	14	->
LEAF_NODE	100:21	100:21	14	tif_rawdatasize
ASSIGN_OP	100:37	100:37	12	=
LEAF_NODE	100:37	100:37	13	=
RVAL	100:39	100:49	12	( tmsize_t ) TIFFroundup_64 ( ( uint64 ) already_read + to_read + rawdata_offset , 1024 )
LEAF_NODE	100:39	100:39	13	(
TYPE_NAME	100:40	100:40	13	tmsize_t
LEAF_NODE	100:40	100:40	14	tmsize_t
LEAF_NODE	100:48	100:48	13	)
FUNCTION_CALL	100:49	101:77	13	TIFFroundup_64 ( ( uint64 ) already_read + to_read + rawdata_offset , 1024 )
CALLEE	100:49	100:49	14	TIFFroundup_64
LEAF_NODE	100:49	100:49	15	TIFFroundup_64
LEAF_NODE	100:63	100:63	14	(
ARGUMENT	101:24	101:57	14	( uint64 ) already_read + to_read + rawdata_offset
LEAF_NODE	101:24	101:24	15	(
TYPE_NAME	101:25	101:25	15	uint64
LEAF_NODE	101:25	101:25	16	uint64
LEAF_NODE	101:31	101:31	15	)
FIELD	101:32	101:32	15	already_read
LEAF_NODE	101:32	101:32	16	already_read
LEAF_NODE	101:45	101:45	15	+
FIELD	101:47	101:47	15	to_read
LEAF_NODE	101:47	101:47	16	to_read
LEAF_NODE	101:55	101:55	15	+
FIELD	101:57	101:57	15	rawdata_offset
LEAF_NODE	101:57	101:57	16	rawdata_offset
LEAF_NODE	101:71	101:71	14	,
ARGUMENT	101:73	101:73	14	1024
FIELD	101:73	101:73	15	1024
LEAF_NODE	101:73	101:73	16	1024
LEAF_NODE	101:77	101:77	14	)
LEAF_NODE	101:78	101:78	10	;
SELECTION	102:16	102:45	9	
KEYWORD	102:16	102:16	10	if
LEAF_NODE	102:16	102:16	11	if
LEAF_NODE	102:19	102:19	10	(
CONDITION	102:20	102:20	10	tif -> tif_rawdatasize == 0
EXPR	102:20	102:42	11	tif -> tif_rawdatasize == 0
FIELD	102:20	102:25	12	tif -> tif_rawdatasize
LEAF_NODE	102:20	102:20	13	tif
LEAF_NODE	102:23	102:23	13	->
LEAF_NODE	102:25	102:25	13	tif_rawdatasize
EQ_OPERATOR	102:40	102:40	12	==
LEAF_NODE	102:40	102:40	13	==
FIELD	102:42	102:42	12	0
LEAF_NODE	102:42	102:42	13	0
LEAF_NODE	102:43	102:43	10	)
STATEMENTS	102:45	106:16	10	
LEAF_NODE	102:45	102:45	11	{
STATEMENTS	103:20	105:20	11	
EXPR_STATEMENT	103:20	104:54	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid buffer size" ) ;
EXPR	103:20	103:20	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid buffer size" )
FUNCTION_CALL	103:20	104:53	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid buffer size" )
CALLEE	103:20	103:20	15	TIFFErrorExt
LEAF_NODE	103:20	103:20	16	TIFFErrorExt
LEAF_NODE	103:32	103:32	15	(
ARGUMENT	103:33	103:33	15	tif -> tif_clientdata
FIELD	103:33	103:38	16	tif -> tif_clientdata
LEAF_NODE	103:33	103:33	17	tif
LEAF_NODE	103:36	103:36	17	->
LEAF_NODE	103:38	103:38	17	tif_clientdata
LEAF_NODE	103:52	103:52	15	,
ARGUMENT	103:54	103:54	15	module
FIELD	103:54	103:54	16	module
LEAF_NODE	103:54	103:54	17	module
LEAF_NODE	103:60	103:60	15	,
ARGUMENT	104:32	104:32	15	"Invalid buffer size"
FIELD	104:32	104:32	16	"Invalid buffer size"
LEAF_NODE	104:32	104:32	17	"Invalid buffer size"
LEAF_NODE	104:53	104:53	15	)
LEAF_NODE	104:54	104:54	13	;
JUMP_STATEMENT	105:20	105:28	12	return 0 ;
KEYWORD	105:20	105:20	13	return
LEAF_NODE	105:20	105:20	14	return
DESTINATION	105:27	105:27	13	0
EXPR	105:27	105:27	14	0
FIELD	105:27	105:27	15	0
LEAF_NODE	105:27	105:27	16	0
LEAF_NODE	105:28	105:28	13	;
LEAF_NODE	106:16	106:16	11	}
EXPR_STATEMENT	107:16	108:71	9	new_rawdata = ( uint8 * ) _TIFFrealloc ( tif -> tif_rawdata , tif -> tif_rawdatasize ) ;
EXPR	107:16	107:16	10	new_rawdata = ( uint8 * ) _TIFFrealloc ( tif -> tif_rawdata , tif -> tif_rawdatasize )
ASSIGN	107:16	107:30	11	new_rawdata = ( uint8 * ) _TIFFrealloc ( tif -> tif_rawdata , tif -> tif_rawdatasize )
LVAL	107:16	107:16	12	new_rawdata
FIELD	107:16	107:16	13	new_rawdata
LEAF_NODE	107:16	107:16	14	new_rawdata
ASSIGN_OP	107:28	107:28	12	=
LEAF_NODE	107:28	107:28	13	=
RVAL	107:30	107:39	12	( uint8 * ) _TIFFrealloc ( tif -> tif_rawdata , tif -> tif_rawdatasize )
LEAF_NODE	107:30	107:30	13	(
TYPE_NAME	107:31	107:31	13	uint8
LEAF_NODE	107:31	107:31	14	uint8
LEAF_NODE	107:36	107:36	13	*
LEAF_NODE	107:37	107:37	13	)
FUNCTION_CALL	107:39	108:70	13	_TIFFrealloc ( tif -> tif_rawdata , tif -> tif_rawdatasize )
CALLEE	107:39	107:39	14	_TIFFrealloc
LEAF_NODE	107:39	107:39	15	_TIFFrealloc
LEAF_NODE	107:51	107:51	14	(
ARGUMENT	108:32	108:32	14	tif -> tif_rawdata
FIELD	108:32	108:37	15	tif -> tif_rawdata
LEAF_NODE	108:32	108:32	16	tif
LEAF_NODE	108:35	108:35	16	->
LEAF_NODE	108:37	108:37	16	tif_rawdata
LEAF_NODE	108:48	108:48	14	,
ARGUMENT	108:50	108:50	14	tif -> tif_rawdatasize
FIELD	108:50	108:55	15	tif -> tif_rawdatasize
LEAF_NODE	108:50	108:50	16	tif
LEAF_NODE	108:53	108:53	16	->
LEAF_NODE	108:55	108:55	16	tif_rawdatasize
LEAF_NODE	108:70	108:70	14	)
LEAF_NODE	108:71	108:71	10	;
SELECTION	109:16	110:16	9	
KEYWORD	109:16	109:16	10	if
LEAF_NODE	109:16	109:16	11	if
LEAF_NODE	109:18	109:18	10	(
CONDITION	109:20	109:20	10	new_rawdata == 0
EXPR	109:20	109:35	11	new_rawdata == 0
FIELD	109:20	109:20	12	new_rawdata
LEAF_NODE	109:20	109:20	13	new_rawdata
EQ_OPERATOR	109:32	109:32	12	==
LEAF_NODE	109:32	109:32	13	==
FIELD	109:35	109:35	12	0
LEAF_NODE	109:35	109:35	13	0
LEAF_NODE	109:37	109:37	10	)
STATEMENTS	110:16	118:16	10	
LEAF_NODE	110:16	110:16	11	{
STATEMENTS	111:20	117:20	11	
EXPR_STATEMENT	111:20	113:53	12	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for data buffer at scanline %lu" , ( unsigned long ) tif -> tif_row ) ;
EXPR	111:20	111:20	13	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for data buffer at scanline %lu" , ( unsigned long ) tif -> tif_row )
FUNCTION_CALL	111:20	113:52	14	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for data buffer at scanline %lu" , ( unsigned long ) tif -> tif_row )
CALLEE	111:20	111:20	15	TIFFErrorExt
LEAF_NODE	111:20	111:20	16	TIFFErrorExt
LEAF_NODE	111:32	111:32	15	(
ARGUMENT	111:33	111:33	15	tif -> tif_clientdata
FIELD	111:33	111:38	16	tif -> tif_clientdata
LEAF_NODE	111:33	111:33	17	tif
LEAF_NODE	111:36	111:36	17	->
LEAF_NODE	111:38	111:38	17	tif_clientdata
LEAF_NODE	111:52	111:52	15	,
ARGUMENT	111:54	111:54	15	module
FIELD	111:54	111:54	16	module
LEAF_NODE	111:54	111:54	17	module
LEAF_NODE	111:60	111:60	15	,
ARGUMENT	112:24	112:24	15	"No space for data buffer at scanline %lu"
FIELD	112:24	112:24	16	"No space for data buffer at scanline %lu"
LEAF_NODE	112:24	112:24	17	"No space for data buffer at scanline %lu"
LEAF_NODE	112:66	112:66	15	,
ARGUMENT	113:24	113:40	15	( unsigned long ) tif -> tif_row
LEAF_NODE	113:24	113:24	16	(
TYPE_NAME	113:25	113:34	16	unsigned long
LEAF_NODE	113:25	113:25	17	unsigned
LEAF_NODE	113:34	113:34	17	long
LEAF_NODE	113:38	113:38	16	)
FIELD	113:40	113:45	16	tif -> tif_row
LEAF_NODE	113:40	113:40	17	tif
LEAF_NODE	113:43	113:43	17	->
LEAF_NODE	113:45	113:45	17	tif_row
LEAF_NODE	113:52	113:52	15	)
LEAF_NODE	113:53	113:53	13	;
EXPR_STATEMENT	114:20	114:47	12	_TIFFfree ( tif -> tif_rawdata ) ;
EXPR	114:20	114:20	13	_TIFFfree ( tif -> tif_rawdata )
FUNCTION_CALL	114:20	114:46	14	_TIFFfree ( tif -> tif_rawdata )
CALLEE	114:20	114:20	15	_TIFFfree
LEAF_NODE	114:20	114:20	16	_TIFFfree
LEAF_NODE	114:29	114:29	15	(
ARGUMENT	114:30	114:30	15	tif -> tif_rawdata
FIELD	114:30	114:35	16	tif -> tif_rawdata
LEAF_NODE	114:30	114:30	17	tif
LEAF_NODE	114:33	114:33	17	->
LEAF_NODE	114:35	114:35	17	tif_rawdata
LEAF_NODE	114:46	114:46	15	)
LEAF_NODE	114:47	114:47	13	;
EXPR_STATEMENT	115:20	115:40	12	tif -> tif_rawdata = 0 ;
EXPR	115:20	115:20	13	tif -> tif_rawdata = 0
ASSIGN	115:20	115:39	14	tif -> tif_rawdata = 0
LVAL	115:20	115:20	15	tif -> tif_rawdata
FIELD	115:20	115:25	16	tif -> tif_rawdata
LEAF_NODE	115:20	115:20	17	tif
LEAF_NODE	115:23	115:23	17	->
LEAF_NODE	115:25	115:25	17	tif_rawdata
ASSIGN_OP	115:37	115:37	15	=
LEAF_NODE	115:37	115:37	16	=
RVAL	115:39	115:39	15	0
FIELD	115:39	115:39	16	0
LEAF_NODE	115:39	115:39	17	0
LEAF_NODE	115:40	115:40	13	;
EXPR_STATEMENT	116:20	116:44	12	tif -> tif_rawdatasize = 0 ;
EXPR	116:20	116:20	13	tif -> tif_rawdatasize = 0
ASSIGN	116:20	116:43	14	tif -> tif_rawdatasize = 0
LVAL	116:20	116:20	15	tif -> tif_rawdatasize
FIELD	116:20	116:25	16	tif -> tif_rawdatasize
LEAF_NODE	116:20	116:20	17	tif
LEAF_NODE	116:23	116:23	17	->
LEAF_NODE	116:25	116:25	17	tif_rawdatasize
ASSIGN_OP	116:41	116:41	15	=
LEAF_NODE	116:41	116:41	16	=
RVAL	116:43	116:43	15	0
FIELD	116:43	116:43	16	0
LEAF_NODE	116:43	116:43	17	0
LEAF_NODE	116:44	116:44	13	;
JUMP_STATEMENT	117:20	117:28	12	return 0 ;
KEYWORD	117:20	117:20	13	return
LEAF_NODE	117:20	117:20	14	return
DESTINATION	117:27	117:27	13	0
EXPR	117:27	117:27	14	0
FIELD	117:27	117:27	15	0
LEAF_NODE	117:27	117:27	16	0
LEAF_NODE	117:28	117:28	13	;
LEAF_NODE	118:16	118:16	11	}
EXPR_STATEMENT	119:16	119:46	9	tif -> tif_rawdata = new_rawdata ;
EXPR	119:16	119:16	10	tif -> tif_rawdata = new_rawdata
ASSIGN	119:16	119:35	11	tif -> tif_rawdata = new_rawdata
LVAL	119:16	119:16	12	tif -> tif_rawdata
FIELD	119:16	119:21	13	tif -> tif_rawdata
LEAF_NODE	119:16	119:16	14	tif
LEAF_NODE	119:19	119:19	14	->
LEAF_NODE	119:21	119:21	14	tif_rawdata
ASSIGN_OP	119:33	119:33	12	=
LEAF_NODE	119:33	119:33	13	=
RVAL	119:35	119:35	12	new_rawdata
FIELD	119:35	119:35	13	new_rawdata
LEAF_NODE	119:35	119:35	14	new_rawdata
LEAF_NODE	119:46	119:46	10	;
LEAF_NODE	120:12	120:12	8	}
SELECTION	121:12	122:12	6	
KEYWORD	121:12	121:12	7	if
LEAF_NODE	121:12	121:12	8	if
LEAF_NODE	121:14	121:14	7	(
CONDITION	121:16	121:16	7	tif -> tif_rawdata == NULL
EXPR	121:16	121:36	8	tif -> tif_rawdata == NULL
FIELD	121:16	121:21	9	tif -> tif_rawdata
LEAF_NODE	121:16	121:16	10	tif
LEAF_NODE	121:19	121:19	10	->
LEAF_NODE	121:21	121:21	10	tif_rawdata
EQ_OPERATOR	121:33	121:33	9	==
LEAF_NODE	121:33	121:33	10	==
FIELD	121:36	121:36	9	NULL
LEAF_NODE	121:36	121:36	10	NULL
LEAF_NODE	121:41	121:41	7	)
STATEMENTS	122:12	125:12	7	
LEAF_NODE	122:12	122:12	8	{
STATEMENTS	124:16	124:16	8	
JUMP_STATEMENT	124:16	124:24	9	return 0 ;
KEYWORD	124:16	124:16	10	return
LEAF_NODE	124:16	124:16	11	return
DESTINATION	124:23	124:23	10	0
EXPR	124:23	124:23	11	0
FIELD	124:23	124:23	12	0
LEAF_NODE	124:23	124:23	13	0
LEAF_NODE	124:24	124:24	10	;
LEAF_NODE	125:12	125:12	8	}
EXPR_STATEMENT	127:12	128:74	6	bytes_read = TIFFReadFile ( tif , tif -> tif_rawdata + rawdata_offset + already_read , to_read ) ;
EXPR	127:12	127:12	7	bytes_read = TIFFReadFile ( tif , tif -> tif_rawdata + rawdata_offset + already_read , to_read )
ASSIGN	127:12	127:25	8	bytes_read = TIFFReadFile ( tif , tif -> tif_rawdata + rawdata_offset + already_read , to_read )
LVAL	127:12	127:12	9	bytes_read
FIELD	127:12	127:12	10	bytes_read
LEAF_NODE	127:12	127:12	11	bytes_read
ASSIGN_OP	127:23	127:23	9	=
LEAF_NODE	127:23	127:23	10	=
RVAL	127:25	127:25	9	TIFFReadFile ( tif , tif -> tif_rawdata + rawdata_offset + already_read , to_read )
FUNCTION_CALL	127:25	128:73	10	TIFFReadFile ( tif , tif -> tif_rawdata + rawdata_offset + already_read , to_read )
CALLEE	127:25	127:25	11	TIFFReadFile
LEAF_NODE	127:25	127:25	12	TIFFReadFile
LEAF_NODE	127:37	127:37	11	(
ARGUMENT	127:38	127:38	11	tif
FIELD	127:38	127:38	12	tif
LEAF_NODE	127:38	127:38	13	tif
LEAF_NODE	127:41	127:41	11	,
ARGUMENT	128:16	128:52	11	tif -> tif_rawdata + rawdata_offset + already_read
FIELD	128:16	128:21	12	tif -> tif_rawdata
LEAF_NODE	128:16	128:16	13	tif
LEAF_NODE	128:19	128:19	13	->
LEAF_NODE	128:21	128:21	13	tif_rawdata
LEAF_NODE	128:33	128:33	12	+
FIELD	128:35	128:35	12	rawdata_offset
LEAF_NODE	128:35	128:35	13	rawdata_offset
LEAF_NODE	128:50	128:50	12	+
FIELD	128:52	128:52	12	already_read
LEAF_NODE	128:52	128:52	13	already_read
LEAF_NODE	128:64	128:64	11	,
ARGUMENT	128:66	128:66	11	to_read
FIELD	128:66	128:66	12	to_read
LEAF_NODE	128:66	128:66	13	to_read
LEAF_NODE	128:73	128:73	11	)
LEAF_NODE	128:74	128:74	7	;
EXPR_STATEMENT	129:12	129:38	6	already_read += bytes_read ;
EXPR	129:12	129:12	7	already_read += bytes_read
ASSIGN	129:12	129:28	8	already_read += bytes_read
LVAL	129:12	129:12	9	already_read
FIELD	129:12	129:12	10	already_read
LEAF_NODE	129:12	129:12	11	already_read
ASSIGN_OP	129:25	129:25	9	+=
LEAF_NODE	129:25	129:25	10	+=
RVAL	129:28	129:28	9	bytes_read
FIELD	129:28	129:28	10	bytes_read
LEAF_NODE	129:28	129:28	11	bytes_read
LEAF_NODE	129:38	129:38	7	;
SELECTION	130:12	130:39	6	
KEYWORD	130:12	130:12	7	if
LEAF_NODE	130:12	130:12	8	if
LEAF_NODE	130:15	130:15	7	(
CONDITION	130:16	130:16	7	bytes_read != to_read
EXPR	130:16	130:30	8	bytes_read != to_read
FIELD	130:16	130:16	9	bytes_read
LEAF_NODE	130:16	130:16	10	bytes_read
EQ_OPERATOR	130:27	130:27	9	!=
LEAF_NODE	130:27	130:27	10	!=
FIELD	130:30	130:30	9	to_read
LEAF_NODE	130:30	130:30	10	to_read
LEAF_NODE	130:37	130:37	7	)
STATEMENTS	130:39	177:12	7	
LEAF_NODE	130:39	130:39	8	{
STATEMENTS	131:16	176:16	8	
EXPR_STATEMENT	131:16	132:78	9	memset ( tif -> tif_rawdata + rawdata_offset + already_read , 0 , tif -> tif_rawdatasize - rawdata_offset - already_read ) ;
EXPR	131:16	131:16	10	memset ( tif -> tif_rawdata + rawdata_offset + already_read , 0 , tif -> tif_rawdatasize - rawdata_offset - already_read )
FUNCTION_CALL	131:16	132:77	11	memset ( tif -> tif_rawdata + rawdata_offset + already_read , 0 , tif -> tif_rawdatasize - rawdata_offset - already_read )
CALLEE	131:16	131:16	12	memset
LEAF_NODE	131:16	131:16	13	memset
LEAF_NODE	131:22	131:22	12	(
ARGUMENT	131:24	131:60	12	tif -> tif_rawdata + rawdata_offset + already_read
FIELD	131:24	131:29	13	tif -> tif_rawdata
LEAF_NODE	131:24	131:24	14	tif
LEAF_NODE	131:27	131:27	14	->
LEAF_NODE	131:29	131:29	14	tif_rawdata
LEAF_NODE	131:41	131:41	13	+
FIELD	131:43	131:43	13	rawdata_offset
LEAF_NODE	131:43	131:43	14	rawdata_offset
LEAF_NODE	131:58	131:58	13	+
FIELD	131:60	131:60	13	already_read
LEAF_NODE	131:60	131:60	14	already_read
LEAF_NODE	131:72	131:72	12	,
ARGUMENT	131:74	131:74	12	0
FIELD	131:74	131:74	13	0
LEAF_NODE	131:74	131:74	14	0
LEAF_NODE	131:75	131:75	12	,
ARGUMENT	132:24	132:64	12	tif -> tif_rawdatasize - rawdata_offset - already_read
FIELD	132:24	132:29	13	tif -> tif_rawdatasize
LEAF_NODE	132:24	132:24	14	tif
LEAF_NODE	132:27	132:27	14	->
LEAF_NODE	132:29	132:29	14	tif_rawdatasize
LEAF_NODE	132:45	132:45	13	-
FIELD	132:47	132:47	13	rawdata_offset
LEAF_NODE	132:47	132:47	14	rawdata_offset
LEAF_NODE	132:62	132:62	13	-
FIELD	132:64	132:64	13	already_read
LEAF_NODE	132:64	132:64	14	already_read
LEAF_NODE	132:77	132:77	12	)
LEAF_NODE	132:78	132:78	10	;
SELECTION	134:16	135:16	9	
KEYWORD	134:16	134:16	10	if
LEAF_NODE	134:16	134:16	11	if
LEAF_NODE	134:18	134:18	10	(
CONDITION	134:20	134:20	10	is_strip
EXPR	134:20	134:20	11	is_strip
FIELD	134:20	134:20	12	is_strip
LEAF_NODE	134:20	134:20	13	is_strip
LEAF_NODE	134:29	134:29	10	)
STATEMENTS	135:16	142:16	10	
LEAF_NODE	135:16	135:16	11	{
STATEMENTS	136:20	141:64	11	
LEAF_NODE	136:20	136:20	12	TIFFErrorExt
LEAF_NODE	136:32	136:32	12	(
LEAF_NODE	136:33	136:33	12	tif
LEAF_NODE	136:36	136:36	12	->
LEAF_NODE	136:38	136:38	12	tif_clientdata
LEAF_NODE	136:52	136:52	12	,
LEAF_NODE	136:54	136:54	12	module
LEAF_NODE	136:60	136:60	12	,
LEAF_NODE	137:24	137:24	12	"Read error at scanline %lu; got %I64u bytes, "
LEAF_NODE	138:24	138:24	12	"expected %I64u"
LEAF_NODE	138:40	138:40	12	,
LEAF_NODE	139:40	139:40	12	(
LEAF_NODE	139:41	139:41	12	unsigned
LEAF_NODE	139:50	139:50	12	long
LEAF_NODE	139:54	139:54	12	)
LEAF_NODE	139:56	139:56	12	tif
LEAF_NODE	139:59	139:59	12	->
LEAF_NODE	139:61	139:61	12	tif_row
LEAF_NODE	139:68	139:68	12	,
LEAF_NODE	140:40	140:40	12	(
LEAF_NODE	140:41	140:41	12	unsigned
LEAF_NODE	140:50	140:50	12	__int64
LEAF_NODE	140:57	140:57	12	)
LEAF_NODE	140:59	140:59	12	already_read
LEAF_NODE	140:71	140:71	12	,
LEAF_NODE	141:40	141:40	12	(
LEAF_NODE	141:41	141:41	12	unsigned
LEAF_NODE	141:50	141:50	12	__int64
LEAF_NODE	141:57	141:57	12	)
LEAF_NODE	141:59	141:59	12	size
LEAF_NODE	141:63	141:63	12	)
LEAF_NODE	141:64	141:64	12	;
LEAF_NODE	142:16	142:16	11	}
SELECTION	143:16	144:16	9	
KEYWORD	143:16	143:16	10	else
LEAF_NODE	143:16	143:16	11	else
STATEMENTS	144:16	153:16	10	
LEAF_NODE	144:16	144:16	11	{
STATEMENTS	145:20	152:64	11	
LEAF_NODE	145:20	145:20	12	TIFFErrorExt
LEAF_NODE	145:32	145:32	12	(
LEAF_NODE	145:33	145:33	12	tif
LEAF_NODE	145:36	145:36	12	->
LEAF_NODE	145:38	145:38	12	tif_clientdata
LEAF_NODE	145:52	145:52	12	,
LEAF_NODE	145:54	145:54	12	module
LEAF_NODE	145:60	145:60	12	,
LEAF_NODE	146:24	146:24	12	"Read error at row %lu, col %lu, tile %lu; "
LEAF_NODE	147:24	147:24	12	"got %I64u bytes, expected %I64u"
LEAF_NODE	147:57	147:57	12	,
LEAF_NODE	148:40	148:40	12	(
LEAF_NODE	148:41	148:41	12	unsigned
LEAF_NODE	148:50	148:50	12	long
LEAF_NODE	148:54	148:54	12	)
LEAF_NODE	148:56	148:56	12	tif
LEAF_NODE	148:59	148:59	12	->
LEAF_NODE	148:61	148:61	12	tif_row
LEAF_NODE	148:68	148:68	12	,
LEAF_NODE	149:40	149:40	12	(
LEAF_NODE	149:41	149:41	12	unsigned
LEAF_NODE	149:50	149:50	12	long
LEAF_NODE	149:54	149:54	12	)
LEAF_NODE	149:56	149:56	12	tif
LEAF_NODE	149:59	149:59	12	->
LEAF_NODE	149:61	149:61	12	tif_col
LEAF_NODE	149:68	149:68	12	,
LEAF_NODE	150:40	150:40	12	(
LEAF_NODE	150:41	150:41	12	unsigned
LEAF_NODE	150:50	150:50	12	long
LEAF_NODE	150:54	150:54	12	)
LEAF_NODE	150:56	150:56	12	strip_or_tile
LEAF_NODE	150:69	150:69	12	,
LEAF_NODE	151:40	151:40	12	(
LEAF_NODE	151:41	151:41	12	unsigned
LEAF_NODE	151:50	151:50	12	__int64
LEAF_NODE	151:57	151:57	12	)
LEAF_NODE	151:59	151:59	12	already_read
LEAF_NODE	151:71	151:71	12	,
LEAF_NODE	152:40	152:40	12	(
LEAF_NODE	152:41	152:41	12	unsigned
LEAF_NODE	152:50	152:50	12	__int64
LEAF_NODE	152:57	152:57	12	)
LEAF_NODE	152:59	152:59	12	size
LEAF_NODE	152:63	152:63	12	)
LEAF_NODE	152:64	152:64	12	;
LEAF_NODE	153:16	153:16	11	}
SELECTION	155:16	156:16	9	
KEYWORD	155:16	155:16	10	if
LEAF_NODE	155:16	155:16	11	if
LEAF_NODE	155:18	155:18	10	(
CONDITION	155:20	155:20	10	is_strip
EXPR	155:20	155:20	11	is_strip
FIELD	155:20	155:20	12	is_strip
LEAF_NODE	155:20	155:20	13	is_strip
LEAF_NODE	155:29	155:29	10	)
STATEMENTS	156:16	163:16	10	
LEAF_NODE	156:16	156:16	11	{
STATEMENTS	157:20	162:66	11	
LEAF_NODE	157:20	157:20	12	TIFFErrorExt
LEAF_NODE	157:32	157:32	12	(
LEAF_NODE	157:33	157:33	12	tif
LEAF_NODE	157:36	157:36	12	->
LEAF_NODE	157:38	157:38	12	tif_clientdata
LEAF_NODE	157:52	157:52	12	,
LEAF_NODE	157:54	157:54	12	module
LEAF_NODE	157:60	157:60	12	,
LEAF_NODE	158:24	158:24	12	"Read error at scanline %lu; got %llu bytes, "
LEAF_NODE	159:24	159:24	12	"expected %llu"
LEAF_NODE	159:39	159:39	12	,
LEAF_NODE	160:40	160:40	12	(
LEAF_NODE	160:41	160:41	12	unsigned
LEAF_NODE	160:50	160:50	12	long
LEAF_NODE	160:54	160:54	12	)
LEAF_NODE	160:56	160:56	12	tif
LEAF_NODE	160:59	160:59	12	->
LEAF_NODE	160:61	160:61	12	tif_row
LEAF_NODE	160:68	160:68	12	,
LEAF_NODE	161:40	161:40	12	(
LEAF_NODE	161:41	161:41	12	unsigned
LEAF_NODE	161:50	161:50	12	long
LEAF_NODE	161:55	161:55	12	long
LEAF_NODE	161:59	161:59	12	)
LEAF_NODE	161:61	161:61	12	already_read
LEAF_NODE	161:73	161:73	12	,
LEAF_NODE	162:40	162:40	12	(
LEAF_NODE	162:41	162:41	12	unsigned
LEAF_NODE	162:50	162:50	12	long
LEAF_NODE	162:55	162:55	12	long
LEAF_NODE	162:59	162:59	12	)
LEAF_NODE	162:61	162:61	12	size
LEAF_NODE	162:65	162:65	12	)
LEAF_NODE	162:66	162:66	12	;
LEAF_NODE	163:16	163:16	11	}
SELECTION	164:16	165:16	9	
KEYWORD	164:16	164:16	10	else
LEAF_NODE	164:16	164:16	11	else
STATEMENTS	165:16	174:16	10	
LEAF_NODE	165:16	165:16	11	{
STATEMENTS	166:20	173:66	11	
LEAF_NODE	166:20	166:20	12	TIFFErrorExt
LEAF_NODE	166:32	166:32	12	(
LEAF_NODE	166:33	166:33	12	tif
LEAF_NODE	166:36	166:36	12	->
LEAF_NODE	166:38	166:38	12	tif_clientdata
LEAF_NODE	166:52	166:52	12	,
LEAF_NODE	166:54	166:54	12	module
LEAF_NODE	166:60	166:60	12	,
LEAF_NODE	167:24	167:24	12	"Read error at row %lu, col %lu, tile %lu; "
LEAF_NODE	168:24	168:24	12	"got %llu bytes, expected %llu"
LEAF_NODE	168:55	168:55	12	,
LEAF_NODE	169:40	169:40	12	(
LEAF_NODE	169:41	169:41	12	unsigned
LEAF_NODE	169:50	169:50	12	long
LEAF_NODE	169:54	169:54	12	)
LEAF_NODE	169:56	169:56	12	tif
LEAF_NODE	169:59	169:59	12	->
LEAF_NODE	169:61	169:61	12	tif_row
LEAF_NODE	169:68	169:68	12	,
LEAF_NODE	170:40	170:40	12	(
LEAF_NODE	170:41	170:41	12	unsigned
LEAF_NODE	170:50	170:50	12	long
LEAF_NODE	170:54	170:54	12	)
LEAF_NODE	170:56	170:56	12	tif
LEAF_NODE	170:59	170:59	12	->
LEAF_NODE	170:61	170:61	12	tif_col
LEAF_NODE	170:68	170:68	12	,
LEAF_NODE	171:40	171:40	12	(
LEAF_NODE	171:41	171:41	12	unsigned
LEAF_NODE	171:50	171:50	12	long
LEAF_NODE	171:54	171:54	12	)
LEAF_NODE	171:56	171:56	12	strip_or_tile
LEAF_NODE	171:69	171:69	12	,
LEAF_NODE	172:40	172:40	12	(
LEAF_NODE	172:41	172:41	12	unsigned
LEAF_NODE	172:50	172:50	12	long
LEAF_NODE	172:55	172:55	12	long
LEAF_NODE	172:59	172:59	12	)
LEAF_NODE	172:61	172:61	12	already_read
LEAF_NODE	172:73	172:73	12	,
LEAF_NODE	173:40	173:40	12	(
LEAF_NODE	173:41	173:41	12	unsigned
LEAF_NODE	173:50	173:50	12	long
LEAF_NODE	173:55	173:55	12	long
LEAF_NODE	173:59	173:59	12	)
LEAF_NODE	173:61	173:61	12	size
LEAF_NODE	173:65	173:65	12	)
LEAF_NODE	173:66	173:66	12	;
LEAF_NODE	174:16	174:16	11	}
JUMP_STATEMENT	176:16	176:24	9	return 0 ;
KEYWORD	176:16	176:16	10	return
LEAF_NODE	176:16	176:16	11	return
DESTINATION	176:23	176:23	10	0
EXPR	176:23	176:23	11	0
FIELD	176:23	176:23	12	0
LEAF_NODE	176:23	176:23	13	0
LEAF_NODE	176:24	176:24	10	;
LEAF_NODE	177:12	177:12	8	}
LEAF_NODE	178:8	178:8	5	}
JUMP_STATEMENT	179:8	179:16	3	return 1 ;
KEYWORD	179:8	179:8	4	return
LEAF_NODE	179:8	179:8	5	return
DESTINATION	179:15	179:15	4	1
EXPR	179:15	179:15	5	1
FIELD	179:15	179:15	6	1
LEAF_NODE	179:15	179:15	7	1
LEAF_NODE	179:16	179:16	4	;
LEAF_NODE	180:0	180:0	2	}
FUNCTION_DEF	183:0	318:0	1	
RETURN_TYPE	183:0	183:7	2	static int
LEAF_NODE	183:0	183:0	3	static
TYPE_NAME	183:7	183:7	3	int
LEAF_NODE	183:7	183:7	4	int
FUNCTION_NAME	184:0	184:0	2	TIFFFillStripPartial
LEAF_NODE	184:0	184:0	3	TIFFFillStripPartial
PARAMETER_LIST	184:20	184:77	2	( TIFF * tif , int strip , tmsize_t read_ahead , int restart )
LEAF_NODE	184:20	184:20	3	(
PARAMETER_DECL	184:22	184:28	3	TIFF * tif
TYPE	184:22	184:27	4	TIFF *
TYPE_NAME	184:22	184:22	5	TIFF
LEAF_NODE	184:22	184:22	6	TIFF
POINTER	184:27	184:27	5	*
LEAF_NODE	184:27	184:27	6	*
NAME	184:28	184:28	4	tif
LEAF_NODE	184:28	184:28	5	tif
LEAF_NODE	184:31	184:31	3	,
PARAMETER_DECL	184:33	184:37	3	int strip
TYPE	184:33	184:33	4	int
TYPE_NAME	184:33	184:33	5	int
LEAF_NODE	184:33	184:33	6	int
NAME	184:37	184:37	4	strip
LEAF_NODE	184:37	184:37	5	strip
LEAF_NODE	184:42	184:42	3	,
PARAMETER_DECL	184:44	184:53	3	tmsize_t read_ahead
TYPE	184:44	184:44	4	tmsize_t
TYPE_NAME	184:44	184:44	5	tmsize_t
LEAF_NODE	184:44	184:44	6	tmsize_t
NAME	184:53	184:53	4	read_ahead
LEAF_NODE	184:53	184:53	5	read_ahead
LEAF_NODE	184:63	184:63	3	,
PARAMETER_DECL	184:65	184:69	3	int restart
TYPE	184:65	184:65	4	int
TYPE_NAME	184:65	184:65	5	int
LEAF_NODE	184:65	184:65	6	int
NAME	184:69	184:69	4	restart
LEAF_NODE	184:69	184:69	5	restart
LEAF_NODE	184:77	184:77	3	)
LEAF_NODE	185:0	185:0	2	{
STATEMENTS	186:1	314:8	2	
LEAF_NODE	186:1	186:1	3	static
SIMPLE_DECL	186:8	186:52	3	const char [ ] module ; module = "TIFFFillStripPartial" ;
VAR_DECL	186:8	186:19	4	const char [ ] module ; module = "TIFFFillStripPartial"
TYPE	186:8	186:25	5	const char [ ]
TYPE_NAME	186:8	186:14	6	const char
LEAF_NODE	186:8	186:8	7	const
LEAF_NODE	186:14	186:14	7	char
TYPE_SUFFIX	186:25	186:26	6	[ ]
LEAF_NODE	186:25	186:25	7	[
LEAF_NODE	186:26	186:26	7	]
NAME	186:19	186:19	5	module
LEAF_NODE	186:19	186:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	186:19	186:19	5	module = "TIFFFillStripPartial"
ASSIGN	186:19	186:30	6	module = "TIFFFillStripPartial"
LVAL	186:19	186:19	7	module
NAME	186:19	186:19	8	module
LEAF_NODE	186:19	186:19	9	module
ASSIGN_OP	186:28	186:28	7	=
LEAF_NODE	186:28	186:28	8	=
RVAL	186:30	186:30	7	"TIFFFillStripPartial"
FIELD	186:30	186:30	8	"TIFFFillStripPartial"
LEAF_NODE	186:30	186:30	9	"TIFFFillStripPartial"
LEAF_NODE	186:52	186:52	4	;
LEAF_NODE	187:1	187:1	3	register
SIMPLE_DECL	187:10	187:43	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	187:10	187:25	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	187:10	187:24	5	TIFFDirectory *
TYPE_NAME	187:10	187:10	6	TIFFDirectory
LEAF_NODE	187:10	187:10	7	TIFFDirectory
POINTER	187:24	187:24	6	*
LEAF_NODE	187:24	187:24	7	*
NAME	187:25	187:25	5	td
LEAF_NODE	187:25	187:25	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	187:25	187:25	5	td = & tif -> tif_dir
ASSIGN	187:25	187:30	6	td = & tif -> tif_dir
LVAL	187:25	187:25	7	td
NAME	187:25	187:25	8	td
LEAF_NODE	187:25	187:25	9	td
ASSIGN_OP	187:28	187:28	7	=
LEAF_NODE	187:28	187:28	8	=
RVAL	187:30	187:30	7	& tif -> tif_dir
UNARY_EXPR	187:30	187:31	8	& tif -> tif_dir
UNARY_OPERATOR	187:30	187:30	9	&
LEAF_NODE	187:30	187:30	10	&
FIELD	187:31	187:36	9	tif -> tif_dir
LEAF_NODE	187:31	187:31	10	tif
LEAF_NODE	187:34	187:34	10	->
LEAF_NODE	187:36	187:36	10	tif_dir
LEAF_NODE	187:43	187:43	4	;
SIMPLE_DECL	188:8	188:28	3	tmsize_t unused_data ;
VAR_DECL	188:8	188:17	4	tmsize_t unused_data
TYPE	188:8	188:8	5	tmsize_t
TYPE_NAME	188:8	188:8	6	tmsize_t
LEAF_NODE	188:8	188:8	7	tmsize_t
NAME	188:17	188:17	5	unused_data
LEAF_NODE	188:17	188:17	6	unused_data
LEAF_NODE	188:28	188:28	4	;
SIMPLE_DECL	189:8	189:26	3	uint64 read_offset ;
VAR_DECL	189:8	189:15	4	uint64 read_offset
TYPE	189:8	189:8	5	uint64
TYPE_NAME	189:8	189:8	6	uint64
LEAF_NODE	189:8	189:8	7	uint64
NAME	189:15	189:15	5	read_offset
LEAF_NODE	189:15	189:15	6	read_offset
LEAF_NODE	189:26	189:26	4	;
SIMPLE_DECL	190:8	190:24	3	tmsize_t to_read ;
VAR_DECL	190:8	190:17	4	tmsize_t to_read
TYPE	190:8	190:8	5	tmsize_t
TYPE_NAME	190:8	190:8	6	tmsize_t
LEAF_NODE	190:8	190:8	7	tmsize_t
NAME	190:17	190:17	5	to_read
LEAF_NODE	190:17	190:17	6	to_read
LEAF_NODE	190:24	190:24	4	;
SIMPLE_DECL	191:8	191:31	3	tmsize_t read_ahead_mod ;
VAR_DECL	191:8	191:17	4	tmsize_t read_ahead_mod
TYPE	191:8	191:8	5	tmsize_t
TYPE_NAME	191:8	191:8	6	tmsize_t
LEAF_NODE	191:8	191:8	7	tmsize_t
NAME	191:17	191:17	5	read_ahead_mod
LEAF_NODE	191:17	191:17	6	read_ahead_mod
LEAF_NODE	191:31	191:31	4	;
SELECTION	204:8	205:16	3	
KEYWORD	204:8	204:8	4	if
LEAF_NODE	204:8	204:8	5	if
LEAF_NODE	204:10	204:10	4	(
CONDITION	204:12	204:12	4	read_ahead < TIFF_TMSIZE_T_MAX / 2
EXPR	204:12	204:45	5	read_ahead < TIFF_TMSIZE_T_MAX / 2
FIELD	204:12	204:12	6	read_ahead
LEAF_NODE	204:12	204:12	7	read_ahead
REL_OPERATOR	204:23	204:23	6	<
LEAF_NODE	204:23	204:23	7	<
FIELD	204:25	204:25	6	TIFF_TMSIZE_T_MAX
LEAF_NODE	204:25	204:25	7	TIFF_TMSIZE_T_MAX
LEAF_NODE	204:43	204:43	6	/
FIELD	204:45	204:45	6	2
LEAF_NODE	204:45	204:45	7	2
LEAF_NODE	204:47	204:47	4	)
STATEMENTS	205:16	205:16	4	
EXPR_STATEMENT	205:16	205:47	5	read_ahead_mod = read_ahead * 2 ;
EXPR	205:16	205:16	6	read_ahead_mod = read_ahead * 2
ASSIGN	205:16	205:33	7	read_ahead_mod = read_ahead * 2
LVAL	205:16	205:16	8	read_ahead_mod
FIELD	205:16	205:16	9	read_ahead_mod
LEAF_NODE	205:16	205:16	10	read_ahead_mod
ASSIGN_OP	205:31	205:31	8	=
LEAF_NODE	205:31	205:31	9	=
RVAL	205:33	205:46	8	read_ahead * 2
FIELD	205:33	205:33	9	read_ahead
LEAF_NODE	205:33	205:33	10	read_ahead
LEAF_NODE	205:44	205:44	9	*
FIELD	205:46	205:46	9	2
LEAF_NODE	205:46	205:46	10	2
LEAF_NODE	205:47	205:47	6	;
SELECTION	206:8	207:16	3	
KEYWORD	206:8	206:8	4	else
LEAF_NODE	206:8	206:8	5	else
STATEMENTS	207:16	207:16	4	
EXPR_STATEMENT	207:16	207:43	5	read_ahead_mod = read_ahead ;
EXPR	207:16	207:16	6	read_ahead_mod = read_ahead
ASSIGN	207:16	207:33	7	read_ahead_mod = read_ahead
LVAL	207:16	207:16	8	read_ahead_mod
FIELD	207:16	207:16	9	read_ahead_mod
LEAF_NODE	207:16	207:16	10	read_ahead_mod
ASSIGN_OP	207:31	207:31	8	=
LEAF_NODE	207:31	207:31	9	=
RVAL	207:33	207:33	8	read_ahead
FIELD	207:33	207:33	9	read_ahead
LEAF_NODE	207:33	207:33	10	read_ahead
LEAF_NODE	207:43	207:43	6	;
SELECTION	208:8	208:51	3	
KEYWORD	208:8	208:8	4	if
LEAF_NODE	208:8	208:8	5	if
LEAF_NODE	208:11	208:11	4	(
CONDITION	208:12	208:12	4	read_ahead_mod > tif -> tif_rawdatasize
EXPR	208:12	208:29	5	read_ahead_mod > tif -> tif_rawdatasize
FIELD	208:12	208:12	6	read_ahead_mod
LEAF_NODE	208:12	208:12	7	read_ahead_mod
REL_OPERATOR	208:27	208:27	6	>
LEAF_NODE	208:27	208:27	7	>
FIELD	208:29	208:34	6	tif -> tif_rawdatasize
LEAF_NODE	208:29	208:29	7	tif
LEAF_NODE	208:32	208:32	7	->
LEAF_NODE	208:34	208:34	7	tif_rawdatasize
LEAF_NODE	208:49	208:49	4	)
STATEMENTS	208:51	218:8	4	
LEAF_NODE	208:51	208:51	5	{
STATEMENTS	209:16	212:16	5	
EXPR_STATEMENT	209:16	209:33	6	assert ( restart ) ;
EXPR	209:16	209:16	7	assert ( restart )
FUNCTION_CALL	209:16	209:32	8	assert ( restart )
CALLEE	209:16	209:16	9	assert
LEAF_NODE	209:16	209:16	10	assert
LEAF_NODE	209:22	209:22	9	(
ARGUMENT	209:24	209:24	9	restart
FIELD	209:24	209:24	10	restart
LEAF_NODE	209:24	209:24	11	restart
LEAF_NODE	209:32	209:32	9	)
LEAF_NODE	209:33	209:33	7	;
EXPR_STATEMENT	211:16	211:43	6	tif -> tif_curstrip = NOSTRIP ;
EXPR	211:16	211:16	7	tif -> tif_curstrip = NOSTRIP
ASSIGN	211:16	211:36	8	tif -> tif_curstrip = NOSTRIP
LVAL	211:16	211:16	9	tif -> tif_curstrip
FIELD	211:16	211:21	10	tif -> tif_curstrip
LEAF_NODE	211:16	211:16	11	tif
LEAF_NODE	211:19	211:19	11	->
LEAF_NODE	211:21	211:21	11	tif_curstrip
ASSIGN_OP	211:34	211:34	9	=
LEAF_NODE	211:34	211:34	10	=
RVAL	211:36	211:36	9	NOSTRIP
FIELD	211:36	211:36	10	NOSTRIP
LEAF_NODE	211:36	211:36	11	NOSTRIP
LEAF_NODE	211:43	211:43	7	;
SELECTION	212:16	212:59	6	
KEYWORD	212:16	212:16	7	if
LEAF_NODE	212:16	212:16	8	if
LEAF_NODE	212:19	212:19	7	(
CONDITION	212:20	212:20	7	( tif -> tif_flags & TIFF_MYBUFFER ) == 0
EXPR	212:20	212:56	8	( tif -> tif_flags & TIFF_MYBUFFER ) == 0
LEAF_NODE	212:20	212:20	9	(
FIELD	212:21	212:26	9	tif -> tif_flags
LEAF_NODE	212:21	212:21	10	tif
LEAF_NODE	212:24	212:24	10	->
LEAF_NODE	212:26	212:26	10	tif_flags
LEAF_NODE	212:36	212:36	9	&
FIELD	212:38	212:38	9	TIFF_MYBUFFER
LEAF_NODE	212:38	212:38	10	TIFF_MYBUFFER
LEAF_NODE	212:51	212:51	9	)
EQ_OPERATOR	212:53	212:53	9	==
LEAF_NODE	212:53	212:53	10	==
FIELD	212:56	212:56	9	0
LEAF_NODE	212:56	212:56	10	0
LEAF_NODE	212:57	212:57	7	)
STATEMENTS	212:59	217:16	7	
LEAF_NODE	212:59	212:59	8	{
STATEMENTS	213:24	216:24	8	
EXPR_STATEMENT	213:24	215:59	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold part of strip %lu" , ( unsigned long ) strip ) ;
EXPR	213:24	213:24	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold part of strip %lu" , ( unsigned long ) strip )
FUNCTION_CALL	213:24	215:58	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold part of strip %lu" , ( unsigned long ) strip )
CALLEE	213:24	213:24	12	TIFFErrorExt
LEAF_NODE	213:24	213:24	13	TIFFErrorExt
LEAF_NODE	213:36	213:36	12	(
ARGUMENT	213:37	213:37	12	tif -> tif_clientdata
FIELD	213:37	213:42	13	tif -> tif_clientdata
LEAF_NODE	213:37	213:37	14	tif
LEAF_NODE	213:40	213:40	14	->
LEAF_NODE	213:42	213:42	14	tif_clientdata
LEAF_NODE	213:56	213:56	12	,
ARGUMENT	213:58	213:58	12	module
FIELD	213:58	213:58	13	module
LEAF_NODE	213:58	213:58	14	module
LEAF_NODE	213:64	213:64	12	,
ARGUMENT	214:37	214:37	12	"Data buffer too small to hold part of strip %lu"
FIELD	214:37	214:37	13	"Data buffer too small to hold part of strip %lu"
LEAF_NODE	214:37	214:37	14	"Data buffer too small to hold part of strip %lu"
LEAF_NODE	214:86	214:86	12	,
ARGUMENT	215:37	215:53	12	( unsigned long ) strip
LEAF_NODE	215:37	215:37	13	(
TYPE_NAME	215:38	215:47	13	unsigned long
LEAF_NODE	215:38	215:38	14	unsigned
LEAF_NODE	215:47	215:47	14	long
LEAF_NODE	215:51	215:51	13	)
FIELD	215:53	215:53	13	strip
LEAF_NODE	215:53	215:53	14	strip
LEAF_NODE	215:58	215:58	12	)
LEAF_NODE	215:59	215:59	10	;
JUMP_STATEMENT	216:24	216:34	9	return ( 0 ) ;
KEYWORD	216:24	216:24	10	return
LEAF_NODE	216:24	216:24	11	return
DESTINATION	216:31	216:31	10	( 0 )
EXPR	216:31	216:33	11	( 0 )
LEAF_NODE	216:31	216:31	12	(
FIELD	216:32	216:32	12	0
LEAF_NODE	216:32	216:32	13	0
LEAF_NODE	216:33	216:33	12	)
LEAF_NODE	216:34	216:34	10	;
LEAF_NODE	217:16	217:16	8	}
LEAF_NODE	218:8	218:8	5	}
SELECTION	220:8	221:8	3	
KEYWORD	220:8	220:8	4	if
LEAF_NODE	220:8	220:8	5	if
LEAF_NODE	220:10	220:10	4	(
CONDITION	220:12	220:12	4	restart
EXPR	220:12	220:12	5	restart
FIELD	220:12	220:12	6	restart
LEAF_NODE	220:12	220:12	7	restart
LEAF_NODE	220:20	220:20	4	)
STATEMENTS	221:8	224:8	4	
LEAF_NODE	221:8	221:8	5	{
STATEMENTS	222:16	223:16	5	
EXPR_STATEMENT	222:16	222:42	6	tif -> tif_rawdataloaded = 0 ;
EXPR	222:16	222:16	7	tif -> tif_rawdataloaded = 0
ASSIGN	222:16	222:41	8	tif -> tif_rawdataloaded = 0
LVAL	222:16	222:16	9	tif -> tif_rawdataloaded
FIELD	222:16	222:21	10	tif -> tif_rawdataloaded
LEAF_NODE	222:16	222:16	11	tif
LEAF_NODE	222:19	222:19	11	->
LEAF_NODE	222:21	222:21	11	tif_rawdataloaded
ASSIGN_OP	222:39	222:39	9	=
LEAF_NODE	222:39	222:39	10	=
RVAL	222:41	222:41	9	0
FIELD	222:41	222:41	10	0
LEAF_NODE	222:41	222:41	11	0
LEAF_NODE	222:42	222:42	7	;
EXPR_STATEMENT	223:16	223:39	6	tif -> tif_rawdataoff = 0 ;
EXPR	223:16	223:16	7	tif -> tif_rawdataoff = 0
ASSIGN	223:16	223:38	8	tif -> tif_rawdataoff = 0
LVAL	223:16	223:16	9	tif -> tif_rawdataoff
FIELD	223:16	223:21	10	tif -> tif_rawdataoff
LEAF_NODE	223:16	223:16	11	tif
LEAF_NODE	223:19	223:19	11	->
LEAF_NODE	223:21	223:21	11	tif_rawdataoff
ASSIGN_OP	223:36	223:36	9	=
LEAF_NODE	223:36	223:36	10	=
RVAL	223:38	223:38	9	0
FIELD	223:38	223:38	10	0
LEAF_NODE	223:38	223:38	11	0
LEAF_NODE	223:39	223:39	7	;
LEAF_NODE	224:8	224:8	5	}
SELECTION	230:8	231:16	3	
KEYWORD	230:8	230:8	4	if
LEAF_NODE	230:8	230:8	5	if
LEAF_NODE	230:10	230:10	4	(
CONDITION	230:12	230:12	4	tif -> tif_rawdataloaded > 0
EXPR	230:12	230:37	5	tif -> tif_rawdataloaded > 0
FIELD	230:12	230:17	6	tif -> tif_rawdataloaded
LEAF_NODE	230:12	230:12	7	tif
LEAF_NODE	230:15	230:15	7	->
LEAF_NODE	230:17	230:17	7	tif_rawdataloaded
REL_OPERATOR	230:35	230:35	6	>
LEAF_NODE	230:35	230:35	7	>
FIELD	230:37	230:37	6	0
LEAF_NODE	230:37	230:37	7	0
LEAF_NODE	230:39	230:39	4	)
STATEMENTS	231:16	231:16	4	
EXPR_STATEMENT	231:16	231:90	5	unused_data = tif -> tif_rawdataloaded - ( tif -> tif_rawcp - tif -> tif_rawdata ) ;
EXPR	231:16	231:16	6	unused_data = tif -> tif_rawdataloaded - ( tif -> tif_rawcp - tif -> tif_rawdata )
ASSIGN	231:16	231:30	7	unused_data = tif -> tif_rawdataloaded - ( tif -> tif_rawcp - tif -> tif_rawdata )
LVAL	231:16	231:16	8	unused_data
FIELD	231:16	231:16	9	unused_data
LEAF_NODE	231:16	231:16	10	unused_data
ASSIGN_OP	231:28	231:28	8	=
LEAF_NODE	231:28	231:28	9	=
RVAL	231:30	231:89	8	tif -> tif_rawdataloaded - ( tif -> tif_rawcp - tif -> tif_rawdata )
FIELD	231:30	231:35	9	tif -> tif_rawdataloaded
LEAF_NODE	231:30	231:30	10	tif
LEAF_NODE	231:33	231:33	10	->
LEAF_NODE	231:35	231:35	10	tif_rawdataloaded
LEAF_NODE	231:53	231:53	9	-
LEAF_NODE	231:55	231:55	9	(
FIELD	231:56	231:61	9	tif -> tif_rawcp
LEAF_NODE	231:56	231:56	10	tif
LEAF_NODE	231:59	231:59	10	->
LEAF_NODE	231:61	231:61	10	tif_rawcp
LEAF_NODE	231:71	231:71	9	-
FIELD	231:73	231:78	9	tif -> tif_rawdata
LEAF_NODE	231:73	231:73	10	tif
LEAF_NODE	231:76	231:76	10	->
LEAF_NODE	231:78	231:78	10	tif_rawdata
LEAF_NODE	231:89	231:89	9	)
LEAF_NODE	231:90	231:90	6	;
SELECTION	232:8	233:16	3	
KEYWORD	232:8	232:8	4	else
LEAF_NODE	232:8	232:8	5	else
STATEMENTS	233:16	233:16	4	
EXPR_STATEMENT	233:16	233:31	5	unused_data = 0 ;
EXPR	233:16	233:16	6	unused_data = 0
ASSIGN	233:16	233:30	7	unused_data = 0
LVAL	233:16	233:16	8	unused_data
FIELD	233:16	233:16	9	unused_data
LEAF_NODE	233:16	233:16	10	unused_data
ASSIGN_OP	233:28	233:28	8	=
LEAF_NODE	233:28	233:28	9	=
RVAL	233:30	233:30	8	0
FIELD	233:30	233:30	9	0
LEAF_NODE	233:30	233:30	10	0
LEAF_NODE	233:31	233:31	6	;
SELECTION	235:8	236:8	3	
KEYWORD	235:8	235:8	4	if
LEAF_NODE	235:8	235:8	5	if
LEAF_NODE	235:10	235:10	4	(
CONDITION	235:12	235:12	4	unused_data > 0
EXPR	235:12	235:26	5	unused_data > 0
FIELD	235:12	235:12	6	unused_data
LEAF_NODE	235:12	235:12	7	unused_data
REL_OPERATOR	235:24	235:24	6	>
LEAF_NODE	235:24	235:24	7	>
FIELD	235:26	235:26	6	0
LEAF_NODE	235:26	235:26	7	0
LEAF_NODE	235:28	235:28	4	)
STATEMENTS	236:8	239:8	4	
LEAF_NODE	236:8	236:8	5	{
STATEMENTS	237:2	238:16	5	
EXPR_STATEMENT	237:2	237:45	6	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 ) ;
EXPR	237:2	237:2	7	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 )
FUNCTION_CALL	237:2	237:44	8	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 )
CALLEE	237:2	237:2	9	assert
LEAF_NODE	237:2	237:2	10	assert
LEAF_NODE	237:8	237:8	9	(
ARGUMENT	237:9	237:43	9	( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0
LEAF_NODE	237:9	237:9	10	(
FIELD	237:10	237:15	10	tif -> tif_flags
LEAF_NODE	237:10	237:10	11	tif
LEAF_NODE	237:13	237:13	11	->
LEAF_NODE	237:15	237:15	11	tif_flags
LEAF_NODE	237:24	237:24	10	&
FIELD	237:25	237:25	10	TIFF_BUFFERMMAP
LEAF_NODE	237:25	237:25	11	TIFF_BUFFERMMAP
LEAF_NODE	237:40	237:40	10	)
EQ_OPERATOR	237:41	237:41	10	==
LEAF_NODE	237:41	237:41	11	==
FIELD	237:43	237:43	10	0
LEAF_NODE	237:43	237:43	11	0
LEAF_NODE	237:44	237:44	9	)
LEAF_NODE	237:45	237:45	7	;
EXPR_STATEMENT	238:16	238:72	6	memmove ( tif -> tif_rawdata , tif -> tif_rawcp , unused_data ) ;
EXPR	238:16	238:16	7	memmove ( tif -> tif_rawdata , tif -> tif_rawcp , unused_data )
FUNCTION_CALL	238:16	238:71	8	memmove ( tif -> tif_rawdata , tif -> tif_rawcp , unused_data )
CALLEE	238:16	238:16	9	memmove
LEAF_NODE	238:16	238:16	10	memmove
LEAF_NODE	238:23	238:23	9	(
ARGUMENT	238:25	238:25	9	tif -> tif_rawdata
FIELD	238:25	238:30	10	tif -> tif_rawdata
LEAF_NODE	238:25	238:25	11	tif
LEAF_NODE	238:28	238:28	11	->
LEAF_NODE	238:30	238:30	11	tif_rawdata
LEAF_NODE	238:41	238:41	9	,
ARGUMENT	238:43	238:43	9	tif -> tif_rawcp
FIELD	238:43	238:48	10	tif -> tif_rawcp
LEAF_NODE	238:43	238:43	11	tif
LEAF_NODE	238:46	238:46	11	->
LEAF_NODE	238:48	238:48	11	tif_rawcp
LEAF_NODE	238:57	238:57	9	,
ARGUMENT	238:59	238:59	9	unused_data
FIELD	238:59	238:59	10	unused_data
LEAF_NODE	238:59	238:59	11	unused_data
LEAF_NODE	238:71	238:71	9	)
LEAF_NODE	238:72	238:72	7	;
LEAF_NODE	239:8	239:8	5	}
EXPR_STATEMENT	244:8	245:62	3	read_offset = TIFFGetStrileOffset ( tif , strip ) + tif -> tif_rawdataoff + tif -> tif_rawdataloaded ;
EXPR	244:8	244:8	4	read_offset = TIFFGetStrileOffset ( tif , strip ) + tif -> tif_rawdataoff + tif -> tif_rawdataloaded
ASSIGN	244:8	244:22	5	read_offset = TIFFGetStrileOffset ( tif , strip ) + tif -> tif_rawdataoff + tif -> tif_rawdataloaded
LVAL	244:8	244:8	6	read_offset
FIELD	244:8	244:8	7	read_offset
LEAF_NODE	244:8	244:8	8	read_offset
ASSIGN_OP	244:20	244:20	6	=
LEAF_NODE	244:20	244:20	7	=
RVAL	244:22	245:40	6	TIFFGetStrileOffset ( tif , strip ) + tif -> tif_rawdataoff + tif -> tif_rawdataloaded
FUNCTION_CALL	244:22	244:52	7	TIFFGetStrileOffset ( tif , strip )
CALLEE	244:22	244:22	8	TIFFGetStrileOffset
LEAF_NODE	244:22	244:22	9	TIFFGetStrileOffset
LEAF_NODE	244:41	244:41	8	(
ARGUMENT	244:42	244:42	8	tif
FIELD	244:42	244:42	9	tif
LEAF_NODE	244:42	244:42	10	tif
LEAF_NODE	244:45	244:45	8	,
ARGUMENT	244:47	244:47	8	strip
FIELD	244:47	244:47	9	strip
LEAF_NODE	244:47	244:47	10	strip
LEAF_NODE	244:52	244:52	8	)
LEAF_NODE	245:16	245:16	7	+
FIELD	245:18	245:23	7	tif -> tif_rawdataoff
LEAF_NODE	245:18	245:18	8	tif
LEAF_NODE	245:21	245:21	8	->
LEAF_NODE	245:23	245:23	8	tif_rawdataoff
LEAF_NODE	245:38	245:38	7	+
FIELD	245:40	245:45	7	tif -> tif_rawdataloaded
LEAF_NODE	245:40	245:40	8	tif
LEAF_NODE	245:43	245:43	8	->
LEAF_NODE	245:45	245:45	8	tif_rawdataloaded
LEAF_NODE	245:62	245:62	4	;
SELECTION	247:8	247:39	3	
KEYWORD	247:8	247:8	4	if
LEAF_NODE	247:8	247:8	5	if
LEAF_NODE	247:11	247:11	4	(
CONDITION	247:12	247:12	4	! SeekOK ( tif , read_offset )
EXPR	247:12	247:12	5	! SeekOK ( tif , read_offset )
UNARY_EXPR	247:12	247:13	6	! SeekOK ( tif , read_offset )
UNARY_OPERATOR	247:12	247:12	7	!
LEAF_NODE	247:12	247:12	8	!
FUNCTION_CALL	247:13	247:36	7	SeekOK ( tif , read_offset )
CALLEE	247:13	247:13	8	SeekOK
LEAF_NODE	247:13	247:13	9	SeekOK
LEAF_NODE	247:19	247:19	8	(
ARGUMENT	247:20	247:20	8	tif
FIELD	247:20	247:20	9	tif
LEAF_NODE	247:20	247:20	10	tif
LEAF_NODE	247:23	247:23	8	,
ARGUMENT	247:25	247:25	8	read_offset
FIELD	247:25	247:25	9	read_offset
LEAF_NODE	247:25	247:25	10	read_offset
LEAF_NODE	247:36	247:36	8	)
LEAF_NODE	247:37	247:37	4	)
STATEMENTS	247:39	252:8	4	
LEAF_NODE	247:39	247:39	5	{
STATEMENTS	248:16	251:16	5	
EXPR_STATEMENT	248:16	250:81	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip ) ;
EXPR	248:16	248:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip )
FUNCTION_CALL	248:16	250:80	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip )
CALLEE	248:16	248:16	9	TIFFErrorExt
LEAF_NODE	248:16	248:16	10	TIFFErrorExt
LEAF_NODE	248:28	248:28	9	(
ARGUMENT	248:29	248:29	9	tif -> tif_clientdata
FIELD	248:29	248:34	10	tif -> tif_clientdata
LEAF_NODE	248:29	248:29	11	tif
LEAF_NODE	248:32	248:32	11	->
LEAF_NODE	248:34	248:34	11	tif_clientdata
LEAF_NODE	248:48	248:48	9	,
ARGUMENT	248:50	248:50	9	module
FIELD	248:50	248:50	10	module
LEAF_NODE	248:50	248:50	11	module
LEAF_NODE	248:56	248:56	9	,
ARGUMENT	249:29	249:29	9	"Seek error at scanline %lu, strip %lu"
FIELD	249:29	249:29	10	"Seek error at scanline %lu, strip %lu"
LEAF_NODE	249:29	249:29	11	"Seek error at scanline %lu, strip %lu"
LEAF_NODE	249:68	249:68	9	,
ARGUMENT	250:29	250:45	9	( unsigned long ) tif -> tif_row
LEAF_NODE	250:29	250:29	10	(
TYPE_NAME	250:30	250:39	10	unsigned long
LEAF_NODE	250:30	250:30	11	unsigned
LEAF_NODE	250:39	250:39	11	long
LEAF_NODE	250:43	250:43	10	)
FIELD	250:45	250:50	10	tif -> tif_row
LEAF_NODE	250:45	250:45	11	tif
LEAF_NODE	250:48	250:48	11	->
LEAF_NODE	250:50	250:50	11	tif_row
LEAF_NODE	250:57	250:57	9	,
ARGUMENT	250:59	250:75	9	( unsigned long ) strip
LEAF_NODE	250:59	250:59	10	(
TYPE_NAME	250:60	250:69	10	unsigned long
LEAF_NODE	250:60	250:60	11	unsigned
LEAF_NODE	250:69	250:69	11	long
LEAF_NODE	250:73	250:73	10	)
FIELD	250:75	250:75	10	strip
LEAF_NODE	250:75	250:75	11	strip
LEAF_NODE	250:80	250:80	9	)
LEAF_NODE	250:81	250:81	7	;
JUMP_STATEMENT	251:16	251:24	6	return 0 ;
KEYWORD	251:16	251:16	7	return
LEAF_NODE	251:16	251:16	8	return
DESTINATION	251:23	251:23	7	0
EXPR	251:23	251:23	8	0
FIELD	251:23	251:23	9	0
LEAF_NODE	251:23	251:23	10	0
LEAF_NODE	251:24	251:24	7	;
LEAF_NODE	252:8	252:8	5	}
SELECTION	257:8	258:16	3	
KEYWORD	257:8	257:8	4	if
LEAF_NODE	257:8	257:8	5	if
LEAF_NODE	257:10	257:10	4	(
CONDITION	257:12	257:12	4	read_ahead_mod > tif -> tif_rawdatasize
EXPR	257:12	257:29	5	read_ahead_mod > tif -> tif_rawdatasize
FIELD	257:12	257:12	6	read_ahead_mod
LEAF_NODE	257:12	257:12	7	read_ahead_mod
REL_OPERATOR	257:27	257:27	6	>
LEAF_NODE	257:27	257:27	7	>
FIELD	257:29	257:34	6	tif -> tif_rawdatasize
LEAF_NODE	257:29	257:29	7	tif
LEAF_NODE	257:32	257:32	7	->
LEAF_NODE	257:34	257:34	7	tif_rawdatasize
LEAF_NODE	257:50	257:50	4	)
STATEMENTS	258:16	258:16	4	
EXPR_STATEMENT	258:16	258:54	5	to_read = read_ahead_mod - unused_data ;
EXPR	258:16	258:16	6	to_read = read_ahead_mod - unused_data
ASSIGN	258:16	258:26	7	to_read = read_ahead_mod - unused_data
LVAL	258:16	258:16	8	to_read
FIELD	258:16	258:16	9	to_read
LEAF_NODE	258:16	258:16	10	to_read
ASSIGN_OP	258:24	258:24	8	=
LEAF_NODE	258:24	258:24	9	=
RVAL	258:26	258:43	8	read_ahead_mod - unused_data
FIELD	258:26	258:26	9	read_ahead_mod
LEAF_NODE	258:26	258:26	10	read_ahead_mod
LEAF_NODE	258:41	258:41	9	-
FIELD	258:43	258:43	9	unused_data
LEAF_NODE	258:43	258:43	10	unused_data
LEAF_NODE	258:54	258:54	6	;
SELECTION	259:8	260:16	3	
KEYWORD	259:8	259:8	4	else
LEAF_NODE	259:8	259:8	5	else
STATEMENTS	260:16	260:16	4	
EXPR_STATEMENT	260:16	260:60	5	to_read = tif -> tif_rawdatasize - unused_data ;
EXPR	260:16	260:16	6	to_read = tif -> tif_rawdatasize - unused_data
ASSIGN	260:16	260:26	7	to_read = tif -> tif_rawdatasize - unused_data
LVAL	260:16	260:16	8	to_read
FIELD	260:16	260:16	9	to_read
LEAF_NODE	260:16	260:16	10	to_read
ASSIGN_OP	260:24	260:24	8	=
LEAF_NODE	260:24	260:24	9	=
RVAL	260:26	260:49	8	tif -> tif_rawdatasize - unused_data
FIELD	260:26	260:31	9	tif -> tif_rawdatasize
LEAF_NODE	260:26	260:26	10	tif
LEAF_NODE	260:29	260:29	10	->
LEAF_NODE	260:31	260:31	10	tif_rawdatasize
LEAF_NODE	260:47	260:47	9	-
FIELD	260:49	260:49	9	unused_data
LEAF_NODE	260:49	260:49	10	unused_data
LEAF_NODE	260:60	260:60	6	;
SELECTION	261:8	263:8	3	
KEYWORD	261:8	261:8	4	if
LEAF_NODE	261:8	261:8	5	if
LEAF_NODE	261:10	261:10	4	(
CONDITION	261:12	261:12	4	( uint64 ) to_read > TIFFGetStrileByteCount ( tif , strip ) - tif -> tif_rawdataoff - tif -> tif_rawdataloaded
EXPR	261:12	262:36	5	( uint64 ) to_read > TIFFGetStrileByteCount ( tif , strip ) - tif -> tif_rawdataoff - tif -> tif_rawdataloaded
LEAF_NODE	261:12	261:12	6	(
TYPE_NAME	261:13	261:13	6	uint64
LEAF_NODE	261:13	261:13	7	uint64
LEAF_NODE	261:19	261:19	6	)
FIELD	261:21	261:21	6	to_read
LEAF_NODE	261:21	261:21	7	to_read
REL_OPERATOR	261:29	261:29	6	>
LEAF_NODE	261:29	261:29	7	>
FUNCTION_CALL	261:31	261:64	6	TIFFGetStrileByteCount ( tif , strip )
CALLEE	261:31	261:31	7	TIFFGetStrileByteCount
LEAF_NODE	261:31	261:31	8	TIFFGetStrileByteCount
LEAF_NODE	261:53	261:53	7	(
ARGUMENT	261:54	261:54	7	tif
FIELD	261:54	261:54	8	tif
LEAF_NODE	261:54	261:54	9	tif
LEAF_NODE	261:57	261:57	7	,
ARGUMENT	261:59	261:59	7	strip
FIELD	261:59	261:59	8	strip
LEAF_NODE	261:59	261:59	9	strip
LEAF_NODE	261:64	261:64	7	)
LEAF_NODE	262:12	262:12	6	-
FIELD	262:14	262:19	6	tif -> tif_rawdataoff
LEAF_NODE	262:14	262:14	7	tif
LEAF_NODE	262:17	262:17	7	->
LEAF_NODE	262:19	262:19	7	tif_rawdataoff
LEAF_NODE	262:34	262:34	6	-
FIELD	262:36	262:41	6	tif -> tif_rawdataloaded
LEAF_NODE	262:36	262:36	7	tif
LEAF_NODE	262:39	262:39	7	->
LEAF_NODE	262:41	262:41	7	tif_rawdataloaded
LEAF_NODE	262:59	262:59	4	)
STATEMENTS	263:8	266:8	4	
LEAF_NODE	263:8	263:8	5	{
STATEMENTS	264:16	264:16	5	
EXPR_STATEMENT	264:16	265:70	6	to_read = ( tmsize_t ) TIFFGetStrileByteCount ( tif , strip ) - tif -> tif_rawdataoff - tif -> tif_rawdataloaded ;
EXPR	264:16	264:16	7	to_read = ( tmsize_t ) TIFFGetStrileByteCount ( tif , strip ) - tif -> tif_rawdataoff - tif -> tif_rawdataloaded
ASSIGN	264:16	264:26	8	to_read = ( tmsize_t ) TIFFGetStrileByteCount ( tif , strip ) - tif -> tif_rawdataoff - tif -> tif_rawdataloaded
LVAL	264:16	264:16	9	to_read
FIELD	264:16	264:16	10	to_read
LEAF_NODE	264:16	264:16	11	to_read
ASSIGN_OP	264:24	264:24	9	=
LEAF_NODE	264:24	264:24	10	=
RVAL	264:26	265:48	9	( tmsize_t ) TIFFGetStrileByteCount ( tif , strip ) - tif -> tif_rawdataoff - tif -> tif_rawdataloaded
LEAF_NODE	264:26	264:26	10	(
TYPE_NAME	264:27	264:27	10	tmsize_t
LEAF_NODE	264:27	264:27	11	tmsize_t
LEAF_NODE	264:35	264:35	10	)
FUNCTION_CALL	264:37	264:70	10	TIFFGetStrileByteCount ( tif , strip )
CALLEE	264:37	264:37	11	TIFFGetStrileByteCount
LEAF_NODE	264:37	264:37	12	TIFFGetStrileByteCount
LEAF_NODE	264:59	264:59	11	(
ARGUMENT	264:60	264:60	11	tif
FIELD	264:60	264:60	12	tif
LEAF_NODE	264:60	264:60	13	tif
LEAF_NODE	264:63	264:63	11	,
ARGUMENT	264:65	264:65	11	strip
FIELD	264:65	264:65	12	strip
LEAF_NODE	264:65	264:65	13	strip
LEAF_NODE	264:70	264:70	11	)
LEAF_NODE	265:24	265:24	10	-
FIELD	265:26	265:31	10	tif -> tif_rawdataoff
LEAF_NODE	265:26	265:26	11	tif
LEAF_NODE	265:29	265:29	11	->
LEAF_NODE	265:31	265:31	11	tif_rawdataoff
LEAF_NODE	265:46	265:46	10	-
FIELD	265:48	265:53	10	tif -> tif_rawdataloaded
LEAF_NODE	265:48	265:48	11	tif
LEAF_NODE	265:51	265:51	11	->
LEAF_NODE	265:53	265:53	11	tif_rawdataloaded
LEAF_NODE	265:70	265:70	7	;
LEAF_NODE	266:8	266:8	5	}
EXPR_STATEMENT	268:1	268:44	3	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 ) ;
EXPR	268:1	268:1	4	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 )
FUNCTION_CALL	268:1	268:43	5	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 )
CALLEE	268:1	268:1	6	assert
LEAF_NODE	268:1	268:1	7	assert
LEAF_NODE	268:7	268:7	6	(
ARGUMENT	268:8	268:42	6	( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0
LEAF_NODE	268:8	268:8	7	(
FIELD	268:9	268:14	7	tif -> tif_flags
LEAF_NODE	268:9	268:9	8	tif
LEAF_NODE	268:12	268:12	8	->
LEAF_NODE	268:14	268:14	8	tif_flags
LEAF_NODE	268:23	268:23	7	&
FIELD	268:24	268:24	7	TIFF_BUFFERMMAP
LEAF_NODE	268:24	268:24	8	TIFF_BUFFERMMAP
LEAF_NODE	268:39	268:39	7	)
EQ_OPERATOR	268:40	268:40	7	==
LEAF_NODE	268:40	268:40	8	==
FIELD	268:42	268:42	7	0
LEAF_NODE	268:42	268:42	8	0
LEAF_NODE	268:43	268:43	6	)
LEAF_NODE	268:44	268:44	4	;
SELECTION	269:8	273:8	3	
KEYWORD	269:8	269:8	4	if
LEAF_NODE	269:8	269:8	5	if
LEAF_NODE	269:10	269:10	4	(
CONDITION	269:12	269:12	4	! TIFFReadAndRealloc ( tif , to_read , unused_data , 1 , 0 , module )
EXPR	269:12	269:12	5	! TIFFReadAndRealloc ( tif , to_read , unused_data , 1 , 0 , module )
UNARY_EXPR	269:12	269:13	6	! TIFFReadAndRealloc ( tif , to_read , unused_data , 1 , 0 , module )
UNARY_OPERATOR	269:12	269:12	7	!
LEAF_NODE	269:12	269:12	8	!
FUNCTION_CALL	269:13	272:39	7	TIFFReadAndRealloc ( tif , to_read , unused_data , 1 , 0 , module )
CALLEE	269:13	269:13	8	TIFFReadAndRealloc
LEAF_NODE	269:13	269:13	9	TIFFReadAndRealloc
LEAF_NODE	269:31	269:31	8	(
ARGUMENT	269:33	269:33	8	tif
FIELD	269:33	269:33	9	tif
LEAF_NODE	269:33	269:33	10	tif
LEAF_NODE	269:36	269:36	8	,
ARGUMENT	269:38	269:38	8	to_read
FIELD	269:38	269:38	9	to_read
LEAF_NODE	269:38	269:38	10	to_read
LEAF_NODE	269:45	269:45	8	,
ARGUMENT	269:47	269:47	8	unused_data
FIELD	269:47	269:47	9	unused_data
LEAF_NODE	269:47	269:47	10	unused_data
LEAF_NODE	269:58	269:58	8	,
ARGUMENT	270:33	270:33	8	1
FIELD	270:33	270:33	9	1
LEAF_NODE	270:33	270:33	10	1
LEAF_NODE	270:34	270:34	8	,
ARGUMENT	271:33	271:33	8	0
FIELD	271:33	271:33	9	0
LEAF_NODE	271:33	271:33	10	0
LEAF_NODE	271:34	271:34	8	,
ARGUMENT	272:33	272:33	8	module
FIELD	272:33	272:33	9	module
LEAF_NODE	272:33	272:33	10	module
LEAF_NODE	272:39	272:39	8	)
LEAF_NODE	272:41	272:41	4	)
STATEMENTS	273:8	275:8	4	
LEAF_NODE	273:8	273:8	5	{
STATEMENTS	274:16	274:16	5	
JUMP_STATEMENT	274:16	274:24	6	return 0 ;
KEYWORD	274:16	274:16	7	return
LEAF_NODE	274:16	274:16	8	return
DESTINATION	274:23	274:23	7	0
EXPR	274:23	274:23	8	0
FIELD	274:23	274:23	9	0
LEAF_NODE	274:23	274:23	10	0
LEAF_NODE	274:24	274:24	7	;
LEAF_NODE	275:8	275:8	5	}
EXPR_STATEMENT	277:8	277:89	3	tif -> tif_rawdataoff = tif -> tif_rawdataoff + tif -> tif_rawdataloaded - unused_data ;
EXPR	277:8	277:8	4	tif -> tif_rawdataoff = tif -> tif_rawdataoff + tif -> tif_rawdataloaded - unused_data
ASSIGN	277:8	277:30	5	tif -> tif_rawdataoff = tif -> tif_rawdataoff + tif -> tif_rawdataloaded - unused_data
LVAL	277:8	277:8	6	tif -> tif_rawdataoff
FIELD	277:8	277:13	7	tif -> tif_rawdataoff
LEAF_NODE	277:8	277:8	8	tif
LEAF_NODE	277:11	277:11	8	->
LEAF_NODE	277:13	277:13	8	tif_rawdataoff
ASSIGN_OP	277:28	277:28	6	=
LEAF_NODE	277:28	277:28	7	=
RVAL	277:30	277:77	6	tif -> tif_rawdataoff + tif -> tif_rawdataloaded - unused_data
FIELD	277:30	277:35	7	tif -> tif_rawdataoff
LEAF_NODE	277:30	277:30	8	tif
LEAF_NODE	277:33	277:33	8	->
LEAF_NODE	277:35	277:35	8	tif_rawdataoff
LEAF_NODE	277:50	277:50	7	+
FIELD	277:52	277:57	7	tif -> tif_rawdataloaded
LEAF_NODE	277:52	277:52	8	tif
LEAF_NODE	277:55	277:55	8	->
LEAF_NODE	277:57	277:57	8	tif_rawdataloaded
LEAF_NODE	277:75	277:75	7	-
FIELD	277:77	277:77	7	unused_data
LEAF_NODE	277:77	277:77	8	unused_data
LEAF_NODE	277:89	277:89	4	;
EXPR_STATEMENT	278:8	278:54	3	tif -> tif_rawdataloaded = unused_data + to_read ;
EXPR	278:8	278:8	4	tif -> tif_rawdataloaded = unused_data + to_read
ASSIGN	278:8	278:33	5	tif -> tif_rawdataloaded = unused_data + to_read
LVAL	278:8	278:8	6	tif -> tif_rawdataloaded
FIELD	278:8	278:13	7	tif -> tif_rawdataloaded
LEAF_NODE	278:8	278:8	8	tif
LEAF_NODE	278:11	278:11	8	->
LEAF_NODE	278:13	278:13	8	tif_rawdataloaded
ASSIGN_OP	278:31	278:31	6	=
LEAF_NODE	278:31	278:31	7	=
RVAL	278:33	278:47	6	unused_data + to_read
FIELD	278:33	278:33	7	unused_data
LEAF_NODE	278:33	278:33	8	unused_data
LEAF_NODE	278:45	278:45	7	+
FIELD	278:47	278:47	7	to_read
LEAF_NODE	278:47	278:47	8	to_read
LEAF_NODE	278:54	278:54	4	;
EXPR_STATEMENT	280:8	280:47	3	tif -> tif_rawcc = tif -> tif_rawdataloaded ;
EXPR	280:8	280:8	4	tif -> tif_rawcc = tif -> tif_rawdataloaded
ASSIGN	280:8	280:25	5	tif -> tif_rawcc = tif -> tif_rawdataloaded
LVAL	280:8	280:8	6	tif -> tif_rawcc
FIELD	280:8	280:13	7	tif -> tif_rawcc
LEAF_NODE	280:8	280:8	8	tif
LEAF_NODE	280:11	280:11	8	->
LEAF_NODE	280:13	280:13	8	tif_rawcc
ASSIGN_OP	280:23	280:23	6	=
LEAF_NODE	280:23	280:23	7	=
RVAL	280:25	280:25	6	tif -> tif_rawdataloaded
FIELD	280:25	280:30	7	tif -> tif_rawdataloaded
LEAF_NODE	280:25	280:25	8	tif
LEAF_NODE	280:28	280:28	8	->
LEAF_NODE	280:30	280:30	8	tif_rawdataloaded
LEAF_NODE	280:47	280:47	4	;
EXPR_STATEMENT	281:8	281:41	3	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	281:8	281:8	4	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	281:8	281:25	5	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	281:8	281:8	6	tif -> tif_rawcp
FIELD	281:8	281:13	7	tif -> tif_rawcp
LEAF_NODE	281:8	281:8	8	tif
LEAF_NODE	281:11	281:11	8	->
LEAF_NODE	281:13	281:13	8	tif_rawcp
ASSIGN_OP	281:23	281:23	6	=
LEAF_NODE	281:23	281:23	7	=
RVAL	281:25	281:25	6	tif -> tif_rawdata
FIELD	281:25	281:30	7	tif -> tif_rawdata
LEAF_NODE	281:25	281:25	8	tif
LEAF_NODE	281:28	281:28	8	->
LEAF_NODE	281:30	281:30	8	tif_rawdata
LEAF_NODE	281:41	281:41	4	;
SELECTION	283:8	284:51	3	
KEYWORD	283:8	283:8	4	if
LEAF_NODE	283:8	283:8	5	if
LEAF_NODE	283:11	283:11	4	(
CONDITION	283:12	283:12	4	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	283:12	283:12	5	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	283:12	284:12	6	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	283:12	283:12	7	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	283:12	283:13	8	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	283:12	283:12	9	!
LEAF_NODE	283:12	283:12	10	!
FUNCTION_CALL	283:13	283:46	9	isFillOrder ( tif , td -> td_fillorder )
CALLEE	283:13	283:13	10	isFillOrder
LEAF_NODE	283:13	283:13	11	isFillOrder
LEAF_NODE	283:24	283:24	10	(
ARGUMENT	283:25	283:25	10	tif
FIELD	283:25	283:25	11	tif
LEAF_NODE	283:25	283:25	12	tif
LEAF_NODE	283:28	283:28	10	,
ARGUMENT	283:30	283:30	10	td -> td_fillorder
FIELD	283:30	283:34	11	td -> td_fillorder
LEAF_NODE	283:30	283:30	12	td
LEAF_NODE	283:32	283:32	12	->
LEAF_NODE	283:34	283:34	12	td_fillorder
LEAF_NODE	283:46	283:46	10	)
LEAF_NODE	283:48	283:48	7	&&
EXPR	284:12	284:48	7	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	284:12	284:12	8	(
FIELD	284:13	284:18	8	tif -> tif_flags
LEAF_NODE	284:13	284:13	9	tif
LEAF_NODE	284:16	284:16	9	->
LEAF_NODE	284:18	284:18	9	tif_flags
LEAF_NODE	284:28	284:28	8	&
FIELD	284:30	284:30	8	TIFF_NOBITREV
LEAF_NODE	284:30	284:30	9	TIFF_NOBITREV
LEAF_NODE	284:43	284:43	8	)
EQ_OPERATOR	284:45	284:45	8	==
LEAF_NODE	284:45	284:45	9	==
FIELD	284:48	284:48	8	0
LEAF_NODE	284:48	284:48	9	0
LEAF_NODE	284:49	284:49	4	)
STATEMENTS	284:51	287:1	4	
LEAF_NODE	284:51	284:51	5	{
STATEMENTS	285:2	286:16	5	
EXPR_STATEMENT	285:2	285:45	6	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 ) ;
EXPR	285:2	285:2	7	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 )
FUNCTION_CALL	285:2	285:44	8	assert ( ( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0 )
CALLEE	285:2	285:2	9	assert
LEAF_NODE	285:2	285:2	10	assert
LEAF_NODE	285:8	285:8	9	(
ARGUMENT	285:9	285:43	9	( tif -> tif_flags & TIFF_BUFFERMMAP ) == 0
LEAF_NODE	285:9	285:9	10	(
FIELD	285:10	285:15	10	tif -> tif_flags
LEAF_NODE	285:10	285:10	11	tif
LEAF_NODE	285:13	285:13	11	->
LEAF_NODE	285:15	285:15	11	tif_flags
LEAF_NODE	285:24	285:24	10	&
FIELD	285:25	285:25	10	TIFF_BUFFERMMAP
LEAF_NODE	285:25	285:25	11	TIFF_BUFFERMMAP
LEAF_NODE	285:40	285:40	10	)
EQ_OPERATOR	285:41	285:41	10	==
LEAF_NODE	285:41	285:41	11	==
FIELD	285:43	285:43	10	0
LEAF_NODE	285:43	285:43	11	0
LEAF_NODE	285:44	285:44	9	)
LEAF_NODE	285:45	285:45	7	;
EXPR_STATEMENT	286:16	286:73	6	TIFFReverseBits ( tif -> tif_rawdata + unused_data , to_read ) ;
EXPR	286:16	286:16	7	TIFFReverseBits ( tif -> tif_rawdata + unused_data , to_read )
FUNCTION_CALL	286:16	286:72	8	TIFFReverseBits ( tif -> tif_rawdata + unused_data , to_read )
CALLEE	286:16	286:16	9	TIFFReverseBits
LEAF_NODE	286:16	286:16	10	TIFFReverseBits
LEAF_NODE	286:31	286:31	9	(
ARGUMENT	286:32	286:51	9	tif -> tif_rawdata + unused_data
FIELD	286:32	286:37	10	tif -> tif_rawdata
LEAF_NODE	286:32	286:32	11	tif
LEAF_NODE	286:35	286:35	11	->
LEAF_NODE	286:37	286:37	11	tif_rawdata
LEAF_NODE	286:49	286:49	10	+
FIELD	286:51	286:51	10	unused_data
LEAF_NODE	286:51	286:51	11	unused_data
LEAF_NODE	286:62	286:62	9	,
ARGUMENT	286:64	286:64	9	to_read
FIELD	286:64	286:64	10	to_read
LEAF_NODE	286:64	286:64	11	to_read
LEAF_NODE	286:72	286:72	9	)
LEAF_NODE	286:73	286:73	7	;
LEAF_NODE	287:1	287:1	5	}
SELECTION	293:8	294:8	3	
KEYWORD	293:8	293:8	4	if
LEAF_NODE	293:8	293:8	5	if
LEAF_NODE	293:10	293:10	4	(
CONDITION	293:12	293:12	4	restart
EXPR	293:12	293:12	5	restart
FIELD	293:12	293:12	6	restart
LEAF_NODE	293:12	293:12	7	restart
LEAF_NODE	293:20	293:20	4	)
STATEMENTS	294:8	313:8	4	
LEAF_NODE	294:8	294:8	5	{
STATEMENTS	302:12	312:12	5	
SELECTION	302:12	304:12	6	
KEYWORD	302:12	302:12	7	if
LEAF_NODE	302:12	302:12	8	if
LEAF_NODE	302:14	302:14	7	(
CONDITION	302:16	302:16	7	tif -> tif_dir . td_compression == COMPRESSION_JPEG && ( uint64 ) tif -> tif_rawcc < TIFFGetStrileByteCount ( tif , strip )
EXPR	302:16	302:16	8	tif -> tif_dir . td_compression == COMPRESSION_JPEG && ( uint64 ) tif -> tif_rawcc < TIFFGetStrileByteCount ( tif , strip )
AND	302:16	303:16	9	tif -> tif_dir . td_compression == COMPRESSION_JPEG && ( uint64 ) tif -> tif_rawcc < TIFFGetStrileByteCount ( tif , strip )
EXPR	302:16	302:45	10	tif -> tif_dir . td_compression == COMPRESSION_JPEG
FIELD	302:16	302:29	11	tif -> tif_dir . td_compression
LEAF_NODE	302:16	302:16	12	tif
LEAF_NODE	302:19	302:19	12	->
LEAF_NODE	302:21	302:21	12	tif_dir
LEAF_NODE	302:28	302:28	12	.
LEAF_NODE	302:29	302:29	12	td_compression
EQ_OPERATOR	302:43	302:43	11	==
LEAF_NODE	302:43	302:43	12	==
FIELD	302:45	302:45	11	COMPRESSION_JPEG
LEAF_NODE	302:45	302:45	12	COMPRESSION_JPEG
LEAF_NODE	302:62	302:62	10	&&
EXPR	303:16	303:41	10	( uint64 ) tif -> tif_rawcc < TIFFGetStrileByteCount ( tif , strip )
LEAF_NODE	303:16	303:16	11	(
TYPE_NAME	303:17	303:17	11	uint64
LEAF_NODE	303:17	303:17	12	uint64
LEAF_NODE	303:23	303:23	11	)
FIELD	303:24	303:29	11	tif -> tif_rawcc
LEAF_NODE	303:24	303:24	12	tif
LEAF_NODE	303:27	303:27	12	->
LEAF_NODE	303:29	303:29	12	tif_rawcc
REL_OPERATOR	303:39	303:39	11	<
LEAF_NODE	303:39	303:39	12	<
FUNCTION_CALL	303:41	303:74	11	TIFFGetStrileByteCount ( tif , strip )
CALLEE	303:41	303:41	12	TIFFGetStrileByteCount
LEAF_NODE	303:41	303:41	13	TIFFGetStrileByteCount
LEAF_NODE	303:63	303:63	12	(
ARGUMENT	303:64	303:64	12	tif
FIELD	303:64	303:64	13	tif
LEAF_NODE	303:64	303:64	14	tif
LEAF_NODE	303:67	303:67	12	,
ARGUMENT	303:69	303:69	12	strip
FIELD	303:69	303:69	13	strip
LEAF_NODE	303:69	303:69	14	strip
LEAF_NODE	303:74	303:74	12	)
LEAF_NODE	303:76	303:76	7	)
STATEMENTS	304:12	309:12	7	
LEAF_NODE	304:12	304:12	8	{
STATEMENTS	305:16	305:16	8	
SELECTION	305:16	306:16	9	
KEYWORD	305:16	305:16	10	if
LEAF_NODE	305:16	305:16	11	if
LEAF_NODE	305:18	305:18	10	(
CONDITION	305:20	305:20	10	TIFFJPEGIsFullStripRequired ( tif )
EXPR	305:20	305:20	11	TIFFJPEGIsFullStripRequired ( tif )
FUNCTION_CALL	305:20	305:51	12	TIFFJPEGIsFullStripRequired ( tif )
CALLEE	305:20	305:20	13	TIFFJPEGIsFullStripRequired
LEAF_NODE	305:20	305:20	14	TIFFJPEGIsFullStripRequired
LEAF_NODE	305:47	305:47	13	(
ARGUMENT	305:48	305:48	13	tif
FIELD	305:48	305:48	14	tif
LEAF_NODE	305:48	305:48	15	tif
LEAF_NODE	305:51	305:51	13	)
LEAF_NODE	305:53	305:53	10	)
STATEMENTS	306:16	308:16	10	
LEAF_NODE	306:16	306:16	11	{
STATEMENTS	307:20	307:20	11	
JUMP_STATEMENT	307:20	307:52	12	return TIFFFillStrip ( tif , strip ) ;
KEYWORD	307:20	307:20	13	return
LEAF_NODE	307:20	307:20	14	return
DESTINATION	307:27	307:27	13	TIFFFillStrip ( tif , strip )
EXPR	307:27	307:27	14	TIFFFillStrip ( tif , strip )
FUNCTION_CALL	307:27	307:51	15	TIFFFillStrip ( tif , strip )
CALLEE	307:27	307:27	16	TIFFFillStrip
LEAF_NODE	307:27	307:27	17	TIFFFillStrip
LEAF_NODE	307:40	307:40	16	(
ARGUMENT	307:41	307:41	16	tif
FIELD	307:41	307:41	17	tif
LEAF_NODE	307:41	307:41	18	tif
LEAF_NODE	307:44	307:44	16	,
ARGUMENT	307:46	307:46	16	strip
FIELD	307:46	307:46	17	strip
LEAF_NODE	307:46	307:46	18	strip
LEAF_NODE	307:51	307:51	16	)
LEAF_NODE	307:52	307:52	13	;
LEAF_NODE	308:16	308:16	11	}
LEAF_NODE	309:12	309:12	8	}
JUMP_STATEMENT	312:12	312:45	6	return TIFFStartStrip ( tif , strip ) ;
KEYWORD	312:12	312:12	7	return
LEAF_NODE	312:12	312:12	8	return
DESTINATION	312:19	312:19	7	TIFFStartStrip ( tif , strip )
EXPR	312:19	312:19	8	TIFFStartStrip ( tif , strip )
FUNCTION_CALL	312:19	312:44	9	TIFFStartStrip ( tif , strip )
CALLEE	312:19	312:19	10	TIFFStartStrip
LEAF_NODE	312:19	312:19	11	TIFFStartStrip
LEAF_NODE	312:33	312:33	10	(
ARGUMENT	312:34	312:34	10	tif
FIELD	312:34	312:34	11	tif
LEAF_NODE	312:34	312:34	12	tif
LEAF_NODE	312:37	312:37	10	,
ARGUMENT	312:39	312:39	10	strip
FIELD	312:39	312:39	11	strip
LEAF_NODE	312:39	312:39	12	strip
LEAF_NODE	312:44	312:44	10	)
LEAF_NODE	312:45	312:45	7	;
LEAF_NODE	313:8	313:8	5	}
SELECTION	314:8	315:8	3	
KEYWORD	314:8	314:8	4	else
LEAF_NODE	314:8	314:8	5	else
STATEMENTS	315:8	317:8	4	
LEAF_NODE	315:8	315:8	5	{
STATEMENTS	316:16	316:16	5	
JUMP_STATEMENT	316:16	316:24	6	return 1 ;
KEYWORD	316:16	316:16	7	return
LEAF_NODE	316:16	316:16	8	return
DESTINATION	316:23	316:23	7	1
EXPR	316:23	316:23	8	1
FIELD	316:23	316:23	9	1
LEAF_NODE	316:23	316:23	10	1
LEAF_NODE	316:24	316:24	7	;
LEAF_NODE	317:8	317:8	5	}
LEAF_NODE	318:0	318:0	2	}
FUNCTION_DEF	328:0	457:0	1	
RETURN_TYPE	328:0	328:7	2	static int
LEAF_NODE	328:0	328:0	3	static
TYPE_NAME	328:7	328:7	3	int
LEAF_NODE	328:7	328:7	4	int
FUNCTION_NAME	329:0	329:0	2	TIFFSeek
LEAF_NODE	329:0	329:0	3	TIFFSeek
PARAMETER_LIST	329:8	329:46	2	( TIFF * tif , uint32 row , uint16 sample )
LEAF_NODE	329:8	329:8	3	(
PARAMETER_DECL	329:9	329:15	3	TIFF * tif
TYPE	329:9	329:13	4	TIFF *
TYPE_NAME	329:9	329:9	5	TIFF
LEAF_NODE	329:9	329:9	6	TIFF
POINTER	329:13	329:13	5	*
LEAF_NODE	329:13	329:13	6	*
NAME	329:15	329:15	4	tif
LEAF_NODE	329:15	329:15	5	tif
LEAF_NODE	329:18	329:18	3	,
PARAMETER_DECL	329:20	329:27	3	uint32 row
TYPE	329:20	329:20	4	uint32
TYPE_NAME	329:20	329:20	5	uint32
LEAF_NODE	329:20	329:20	6	uint32
NAME	329:27	329:27	4	row
LEAF_NODE	329:27	329:27	5	row
LEAF_NODE	329:30	329:30	3	,
PARAMETER_DECL	329:32	329:39	3	uint16 sample
TYPE	329:32	329:32	4	uint16
TYPE_NAME	329:32	329:32	5	uint16
LEAF_NODE	329:32	329:32	6	uint16
NAME	329:39	329:39	4	sample
LEAF_NODE	329:39	329:39	5	sample
LEAF_NODE	329:46	329:46	3	)
LEAF_NODE	330:0	330:0	2	{
STATEMENTS	331:1	456:1	2	
LEAF_NODE	331:1	331:1	3	register
SIMPLE_DECL	331:10	331:43	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	331:10	331:25	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	331:10	331:24	5	TIFFDirectory *
TYPE_NAME	331:10	331:10	6	TIFFDirectory
LEAF_NODE	331:10	331:10	7	TIFFDirectory
POINTER	331:24	331:24	6	*
LEAF_NODE	331:24	331:24	7	*
NAME	331:25	331:25	5	td
LEAF_NODE	331:25	331:25	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	331:25	331:25	5	td = & tif -> tif_dir
ASSIGN	331:25	331:30	6	td = & tif -> tif_dir
LVAL	331:25	331:25	7	td
NAME	331:25	331:25	8	td
LEAF_NODE	331:25	331:25	9	td
ASSIGN_OP	331:28	331:28	7	=
LEAF_NODE	331:28	331:28	8	=
RVAL	331:30	331:30	7	& tif -> tif_dir
UNARY_EXPR	331:30	331:31	8	& tif -> tif_dir
UNARY_OPERATOR	331:30	331:30	9	&
LEAF_NODE	331:30	331:30	10	&
FIELD	331:31	331:36	9	tif -> tif_dir
LEAF_NODE	331:31	331:31	10	tif
LEAF_NODE	331:34	331:34	10	->
LEAF_NODE	331:36	331:36	10	tif_dir
LEAF_NODE	331:43	331:43	4	;
SIMPLE_DECL	332:1	332:13	3	uint32 strip ;
VAR_DECL	332:1	332:8	4	uint32 strip
TYPE	332:1	332:1	5	uint32
TYPE_NAME	332:1	332:1	6	uint32
LEAF_NODE	332:1	332:1	7	uint32
NAME	332:8	332:8	5	strip
LEAF_NODE	332:8	332:8	6	strip
LEAF_NODE	332:13	332:13	4	;
SIMPLE_DECL	333:8	333:26	3	int whole_strip ;
VAR_DECL	333:8	333:15	4	int whole_strip
TYPE	333:8	333:8	5	int
TYPE_NAME	333:8	333:8	6	int
LEAF_NODE	333:8	333:8	7	int
NAME	333:15	333:15	5	whole_strip
LEAF_NODE	333:15	333:15	6	whole_strip
LEAF_NODE	333:26	333:26	4	;
SIMPLE_DECL	334:1	334:24	3	tmsize_t read_ahead ; read_ahead = 0 ;
VAR_DECL	334:1	334:10	4	tmsize_t read_ahead ; read_ahead = 0
TYPE	334:1	334:1	5	tmsize_t
TYPE_NAME	334:1	334:1	6	tmsize_t
LEAF_NODE	334:1	334:1	7	tmsize_t
NAME	334:10	334:10	5	read_ahead
LEAF_NODE	334:10	334:10	6	read_ahead
LEAF_NODE	0:0	0:0	5	;
INIT	334:10	334:10	5	read_ahead = 0
ASSIGN	334:10	334:23	6	read_ahead = 0
LVAL	334:10	334:10	7	read_ahead
NAME	334:10	334:10	8	read_ahead
LEAF_NODE	334:10	334:10	9	read_ahead
ASSIGN_OP	334:21	334:21	7	=
LEAF_NODE	334:21	334:21	8	=
RVAL	334:23	334:23	7	0
FIELD	334:23	334:23	8	0
LEAF_NODE	334:23	334:23	9	0
LEAF_NODE	334:24	334:24	4	;
SELECTION	339:1	339:32	3	
KEYWORD	339:1	339:1	4	if
LEAF_NODE	339:1	339:1	5	if
LEAF_NODE	339:4	339:4	4	(
CONDITION	339:5	339:5	4	row >= td -> td_imagelength
EXPR	339:5	339:12	5	row >= td -> td_imagelength
FIELD	339:5	339:5	6	row
LEAF_NODE	339:5	339:5	7	row
REL_OPERATOR	339:9	339:9	6	>=
LEAF_NODE	339:9	339:9	7	>=
FIELD	339:12	339:16	6	td -> td_imagelength
LEAF_NODE	339:12	339:12	7	td
LEAF_NODE	339:14	339:14	7	->
LEAF_NODE	339:16	339:16	7	td_imagelength
LEAF_NODE	339:30	339:30	4	)
STATEMENTS	339:32	345:1	4	
LEAF_NODE	339:32	339:32	5	{
STATEMENTS	340:2	344:2	5	
EXPR_STATEMENT	340:2	343:41	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Row out of range, max %lu" , ( unsigned long ) row , ( unsigned long ) td -> td_imagelength ) ;
EXPR	340:2	340:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Row out of range, max %lu" , ( unsigned long ) row , ( unsigned long ) td -> td_imagelength )
FUNCTION_CALL	340:2	343:40	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Row out of range, max %lu" , ( unsigned long ) row , ( unsigned long ) td -> td_imagelength )
CALLEE	340:2	340:2	9	TIFFErrorExt
LEAF_NODE	340:2	340:2	10	TIFFErrorExt
LEAF_NODE	340:14	340:14	9	(
ARGUMENT	340:15	340:15	9	tif -> tif_clientdata
FIELD	340:15	340:20	10	tif -> tif_clientdata
LEAF_NODE	340:15	340:15	11	tif
LEAF_NODE	340:18	340:18	11	->
LEAF_NODE	340:20	340:20	11	tif_clientdata
LEAF_NODE	340:34	340:34	9	,
ARGUMENT	340:36	340:36	9	tif -> tif_name
FIELD	340:36	340:41	10	tif -> tif_name
LEAF_NODE	340:36	340:36	11	tif
LEAF_NODE	340:39	340:39	11	->
LEAF_NODE	340:41	340:41	11	tif_name
LEAF_NODE	340:49	340:49	9	,
ARGUMENT	341:6	341:6	9	"%lu: Row out of range, max %lu"
FIELD	341:6	341:6	10	"%lu: Row out of range, max %lu"
LEAF_NODE	341:6	341:6	11	"%lu: Row out of range, max %lu"
LEAF_NODE	341:38	341:38	9	,
ARGUMENT	342:6	342:22	9	( unsigned long ) row
LEAF_NODE	342:6	342:6	10	(
TYPE_NAME	342:7	342:16	10	unsigned long
LEAF_NODE	342:7	342:7	11	unsigned
LEAF_NODE	342:16	342:16	11	long
LEAF_NODE	342:20	342:20	10	)
FIELD	342:22	342:22	10	row
LEAF_NODE	342:22	342:22	11	row
LEAF_NODE	342:25	342:25	9	,
ARGUMENT	343:6	343:22	9	( unsigned long ) td -> td_imagelength
LEAF_NODE	343:6	343:6	10	(
TYPE_NAME	343:7	343:16	10	unsigned long
LEAF_NODE	343:7	343:7	11	unsigned
LEAF_NODE	343:16	343:16	11	long
LEAF_NODE	343:20	343:20	10	)
FIELD	343:22	343:26	10	td -> td_imagelength
LEAF_NODE	343:22	343:22	11	td
LEAF_NODE	343:24	343:24	11	->
LEAF_NODE	343:26	343:26	11	td_imagelength
LEAF_NODE	343:40	343:40	9	)
LEAF_NODE	343:41	343:41	7	;
JUMP_STATEMENT	344:2	344:12	6	return ( 0 ) ;
KEYWORD	344:2	344:2	7	return
LEAF_NODE	344:2	344:2	8	return
DESTINATION	344:9	344:9	7	( 0 )
EXPR	344:9	344:11	8	( 0 )
LEAF_NODE	344:9	344:9	9	(
FIELD	344:10	344:10	9	0
LEAF_NODE	344:10	344:10	10	0
LEAF_NODE	344:11	344:11	9	)
LEAF_NODE	344:12	344:12	7	;
LEAF_NODE	345:1	345:1	5	}
SELECTION	346:1	346:51	3	
KEYWORD	346:1	346:1	4	if
LEAF_NODE	346:1	346:1	5	if
LEAF_NODE	346:4	346:4	4	(
CONDITION	346:5	346:5	4	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	346:5	346:28	5	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	346:5	346:9	6	td -> td_planarconfig
LEAF_NODE	346:5	346:5	7	td
LEAF_NODE	346:7	346:7	7	->
LEAF_NODE	346:9	346:9	7	td_planarconfig
EQ_OPERATOR	346:25	346:25	6	==
LEAF_NODE	346:25	346:25	7	==
FIELD	346:28	346:28	6	PLANARCONFIG_SEPARATE
LEAF_NODE	346:28	346:28	7	PLANARCONFIG_SEPARATE
LEAF_NODE	346:49	346:49	4	)
STATEMENTS	346:51	354:1	4	
LEAF_NODE	346:51	346:51	5	{
STATEMENTS	347:2	353:2	5	
SELECTION	347:2	347:40	6	
KEYWORD	347:2	347:2	7	if
LEAF_NODE	347:2	347:2	8	if
LEAF_NODE	347:5	347:5	7	(
CONDITION	347:6	347:6	7	sample >= td -> td_samplesperpixel
EXPR	347:6	347:16	8	sample >= td -> td_samplesperpixel
FIELD	347:6	347:6	9	sample
LEAF_NODE	347:6	347:6	10	sample
REL_OPERATOR	347:13	347:13	9	>=
LEAF_NODE	347:13	347:13	10	>=
FIELD	347:16	347:20	9	td -> td_samplesperpixel
LEAF_NODE	347:16	347:16	10	td
LEAF_NODE	347:18	347:18	10	->
LEAF_NODE	347:20	347:20	10	td_samplesperpixel
LEAF_NODE	347:38	347:38	7	)
STATEMENTS	347:40	352:2	7	
LEAF_NODE	347:40	347:40	8	{
STATEMENTS	348:3	351:3	8	
EXPR_STATEMENT	348:3	350:70	9	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel ) ;
EXPR	348:3	348:3	10	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel )
FUNCTION_CALL	348:3	350:69	11	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "%lu: Sample out of range, max %lu" , ( unsigned long ) sample , ( unsigned long ) td -> td_samplesperpixel )
CALLEE	348:3	348:3	12	TIFFErrorExt
LEAF_NODE	348:3	348:3	13	TIFFErrorExt
LEAF_NODE	348:15	348:15	12	(
ARGUMENT	348:16	348:16	12	tif -> tif_clientdata
FIELD	348:16	348:21	13	tif -> tif_clientdata
LEAF_NODE	348:16	348:16	14	tif
LEAF_NODE	348:19	348:19	14	->
LEAF_NODE	348:21	348:21	14	tif_clientdata
LEAF_NODE	348:35	348:35	12	,
ARGUMENT	348:37	348:37	12	tif -> tif_name
FIELD	348:37	348:42	13	tif -> tif_name
LEAF_NODE	348:37	348:37	14	tif
LEAF_NODE	348:40	348:40	14	->
LEAF_NODE	348:42	348:42	14	tif_name
LEAF_NODE	348:50	348:50	12	,
ARGUMENT	349:7	349:7	12	"%lu: Sample out of range, max %lu"
FIELD	349:7	349:7	13	"%lu: Sample out of range, max %lu"
LEAF_NODE	349:7	349:7	14	"%lu: Sample out of range, max %lu"
LEAF_NODE	349:42	349:42	12	,
ARGUMENT	350:7	350:23	12	( unsigned long ) sample
LEAF_NODE	350:7	350:7	13	(
TYPE_NAME	350:8	350:17	13	unsigned long
LEAF_NODE	350:8	350:8	14	unsigned
LEAF_NODE	350:17	350:17	14	long
LEAF_NODE	350:21	350:21	13	)
FIELD	350:23	350:23	13	sample
LEAF_NODE	350:23	350:23	14	sample
LEAF_NODE	350:29	350:29	12	,
ARGUMENT	350:31	350:47	12	( unsigned long ) td -> td_samplesperpixel
LEAF_NODE	350:31	350:31	13	(
TYPE_NAME	350:32	350:41	13	unsigned long
LEAF_NODE	350:32	350:32	14	unsigned
LEAF_NODE	350:41	350:41	14	long
LEAF_NODE	350:45	350:45	13	)
FIELD	350:47	350:51	13	td -> td_samplesperpixel
LEAF_NODE	350:47	350:47	14	td
LEAF_NODE	350:49	350:49	14	->
LEAF_NODE	350:51	350:51	14	td_samplesperpixel
LEAF_NODE	350:69	350:69	12	)
LEAF_NODE	350:70	350:70	10	;
JUMP_STATEMENT	351:3	351:13	9	return ( 0 ) ;
KEYWORD	351:3	351:3	10	return
LEAF_NODE	351:3	351:3	11	return
DESTINATION	351:10	351:10	10	( 0 )
EXPR	351:10	351:12	11	( 0 )
LEAF_NODE	351:10	351:10	12	(
FIELD	351:11	351:11	12	0
LEAF_NODE	351:11	351:11	13	0
LEAF_NODE	351:12	351:12	12	)
LEAF_NODE	351:13	351:13	10	;
LEAF_NODE	352:2	352:2	8	}
EXPR_STATEMENT	353:2	353:72	6	strip = ( uint32 ) sample * td -> td_stripsperimage + row / td -> td_rowsperstrip ;
EXPR	353:2	353:2	7	strip = ( uint32 ) sample * td -> td_stripsperimage + row / td -> td_rowsperstrip
ASSIGN	353:2	353:10	8	strip = ( uint32 ) sample * td -> td_stripsperimage + row / td -> td_rowsperstrip
LVAL	353:2	353:2	9	strip
FIELD	353:2	353:2	10	strip
LEAF_NODE	353:2	353:2	11	strip
ASSIGN_OP	353:8	353:8	9	=
LEAF_NODE	353:8	353:8	10	=
RVAL	353:10	353:53	9	( uint32 ) sample * td -> td_stripsperimage + row / td -> td_rowsperstrip
LEAF_NODE	353:10	353:10	10	(
TYPE_NAME	353:11	353:11	10	uint32
LEAF_NODE	353:11	353:11	11	uint32
LEAF_NODE	353:17	353:17	10	)
FIELD	353:18	353:18	10	sample
LEAF_NODE	353:18	353:18	11	sample
LEAF_NODE	353:24	353:24	10	*
FIELD	353:25	353:29	10	td -> td_stripsperimage
LEAF_NODE	353:25	353:25	11	td
LEAF_NODE	353:27	353:27	11	->
LEAF_NODE	353:29	353:29	11	td_stripsperimage
LEAF_NODE	353:47	353:47	10	+
FIELD	353:49	353:49	10	row
LEAF_NODE	353:49	353:49	11	row
LEAF_NODE	353:52	353:52	10	/
FIELD	353:53	353:57	10	td -> td_rowsperstrip
LEAF_NODE	353:53	353:53	11	td
LEAF_NODE	353:55	353:55	11	->
LEAF_NODE	353:57	353:57	11	td_rowsperstrip
LEAF_NODE	353:72	353:72	7	;
LEAF_NODE	354:1	354:1	5	}
SELECTION	354:3	355:2	3	
KEYWORD	354:3	354:3	4	else
LEAF_NODE	354:3	354:3	5	else
STATEMENTS	355:2	355:2	4	
EXPR_STATEMENT	355:2	355:35	5	strip = row / td -> td_rowsperstrip ;
EXPR	355:2	355:2	6	strip = row / td -> td_rowsperstrip
ASSIGN	355:2	355:10	7	strip = row / td -> td_rowsperstrip
LVAL	355:2	355:2	8	strip
FIELD	355:2	355:2	9	strip
LEAF_NODE	355:2	355:2	10	strip
ASSIGN_OP	355:8	355:8	8	=
LEAF_NODE	355:8	355:8	9	=
RVAL	355:10	355:16	8	row / td -> td_rowsperstrip
FIELD	355:10	355:10	9	row
LEAF_NODE	355:10	355:10	10	row
LEAF_NODE	355:14	355:14	9	/
FIELD	355:16	355:20	9	td -> td_rowsperstrip
LEAF_NODE	355:16	355:16	10	td
LEAF_NODE	355:18	355:18	10	->
LEAF_NODE	355:20	355:20	10	td_rowsperstrip
LEAF_NODE	355:35	355:35	6	;
EXPR_STATEMENT	362:8	363:32	3	whole_strip = TIFFGetStrileByteCount ( tif , strip ) < 10 || isMapped ( tif ) ;
EXPR	362:8	362:8	4	whole_strip = TIFFGetStrileByteCount ( tif , strip ) < 10 || isMapped ( tif )
ASSIGN	362:8	362:22	5	whole_strip = TIFFGetStrileByteCount ( tif , strip ) < 10 || isMapped ( tif )
LVAL	362:8	362:8	6	whole_strip
FIELD	362:8	362:8	7	whole_strip
LEAF_NODE	362:8	362:8	8	whole_strip
ASSIGN_OP	362:20	362:20	6	=
LEAF_NODE	362:20	362:20	7	=
RVAL	362:22	362:22	6	TIFFGetStrileByteCount ( tif , strip ) < 10 || isMapped ( tif )
OR	362:22	363:19	7	TIFFGetStrileByteCount ( tif , strip ) < 10 || isMapped ( tif )
EXPR	362:22	362:59	8	TIFFGetStrileByteCount ( tif , strip ) < 10
FUNCTION_CALL	362:22	362:55	9	TIFFGetStrileByteCount ( tif , strip )
CALLEE	362:22	362:22	10	TIFFGetStrileByteCount
LEAF_NODE	362:22	362:22	11	TIFFGetStrileByteCount
LEAF_NODE	362:44	362:44	10	(
ARGUMENT	362:45	362:45	10	tif
FIELD	362:45	362:45	11	tif
LEAF_NODE	362:45	362:45	12	tif
LEAF_NODE	362:48	362:48	10	,
ARGUMENT	362:50	362:50	10	strip
FIELD	362:50	362:50	11	strip
LEAF_NODE	362:50	362:50	12	strip
LEAF_NODE	362:55	362:55	10	)
REL_OPERATOR	362:57	362:57	9	<
LEAF_NODE	362:57	362:57	10	<
FIELD	362:59	362:59	9	10
LEAF_NODE	362:59	362:59	10	10
LEAF_NODE	363:16	363:16	8	||
EXPR	363:19	363:19	8	isMapped ( tif )
FUNCTION_CALL	363:19	363:31	9	isMapped ( tif )
CALLEE	363:19	363:19	10	isMapped
LEAF_NODE	363:19	363:19	11	isMapped
LEAF_NODE	363:27	363:27	10	(
ARGUMENT	363:28	363:28	10	tif
FIELD	363:28	363:28	11	tif
LEAF_NODE	363:28	363:28	12	tif
LEAF_NODE	363:31	363:31	10	)
LEAF_NODE	363:32	363:32	4	;
SELECTION	364:8	366:8	3	
KEYWORD	364:8	364:8	4	if
LEAF_NODE	364:8	364:8	5	if
LEAF_NODE	364:10	364:10	4	(
CONDITION	364:12	364:12	4	td -> td_compression == COMPRESSION_LERC || td -> td_compression == COMPRESSION_JBIG
EXPR	364:12	364:12	5	td -> td_compression == COMPRESSION_LERC || td -> td_compression == COMPRESSION_JBIG
OR	364:12	365:12	6	td -> td_compression == COMPRESSION_LERC || td -> td_compression == COMPRESSION_JBIG
EXPR	364:12	364:34	7	td -> td_compression == COMPRESSION_LERC
FIELD	364:12	364:16	8	td -> td_compression
LEAF_NODE	364:12	364:12	9	td
LEAF_NODE	364:14	364:14	9	->
LEAF_NODE	364:16	364:16	9	td_compression
EQ_OPERATOR	364:31	364:31	8	==
LEAF_NODE	364:31	364:31	9	==
FIELD	364:34	364:34	8	COMPRESSION_LERC
LEAF_NODE	364:34	364:34	9	COMPRESSION_LERC
LEAF_NODE	364:51	364:51	7	||
EXPR	365:12	365:34	7	td -> td_compression == COMPRESSION_JBIG
FIELD	365:12	365:16	8	td -> td_compression
LEAF_NODE	365:12	365:12	9	td
LEAF_NODE	365:14	365:14	9	->
LEAF_NODE	365:16	365:16	9	td_compression
EQ_OPERATOR	365:31	365:31	8	==
LEAF_NODE	365:31	365:31	9	==
FIELD	365:34	365:34	8	COMPRESSION_JBIG
LEAF_NODE	365:34	365:34	9	COMPRESSION_JBIG
LEAF_NODE	365:51	365:51	4	)
STATEMENTS	366:8	370:8	4	
LEAF_NODE	366:8	366:8	5	{
STATEMENTS	369:12	369:12	5	
EXPR_STATEMENT	369:12	369:27	6	whole_strip = 1 ;
EXPR	369:12	369:12	7	whole_strip = 1
ASSIGN	369:12	369:26	8	whole_strip = 1
LVAL	369:12	369:12	9	whole_strip
FIELD	369:12	369:12	10	whole_strip
LEAF_NODE	369:12	369:12	11	whole_strip
ASSIGN_OP	369:24	369:24	9	=
LEAF_NODE	369:24	369:24	10	=
RVAL	369:26	369:26	9	1
FIELD	369:26	369:26	10	1
LEAF_NODE	369:26	369:26	11	1
LEAF_NODE	369:27	369:27	7	;
LEAF_NODE	370:8	370:8	5	}
EXPR_STATEMENT	372:8	372:23	3	whole_strip = 1 ;
EXPR	372:8	372:8	4	whole_strip = 1
ASSIGN	372:8	372:22	5	whole_strip = 1
LVAL	372:8	372:8	6	whole_strip
FIELD	372:8	372:8	7	whole_strip
LEAF_NODE	372:8	372:8	8	whole_strip
ASSIGN_OP	372:20	372:20	6	=
LEAF_NODE	372:20	372:20	7	=
RVAL	372:22	372:22	6	1
FIELD	372:22	372:22	7	1
LEAF_NODE	372:22	372:22	8	1
LEAF_NODE	372:23	372:23	4	;
SELECTION	375:8	376:8	3	
KEYWORD	375:8	375:8	4	if
LEAF_NODE	375:8	375:8	5	if
LEAF_NODE	375:10	375:10	4	(
CONDITION	375:12	375:12	4	! whole_strip
EXPR	375:12	375:12	5	! whole_strip
UNARY_EXPR	375:12	375:13	6	! whole_strip
UNARY_OPERATOR	375:12	375:12	7	!
LEAF_NODE	375:12	375:12	8	!
FIELD	375:13	375:13	7	whole_strip
LEAF_NODE	375:13	375:13	8	whole_strip
LEAF_NODE	375:25	375:25	4	)
STATEMENTS	376:8	389:8	4	
LEAF_NODE	376:8	376:8	5	{
STATEMENTS	380:16	385:16	5	
SELECTION	380:16	382:16	6	
KEYWORD	380:16	380:16	7	if
LEAF_NODE	380:16	380:16	8	if
LEAF_NODE	380:18	380:18	7	(
CONDITION	380:20	380:20	7	tif -> tif_scanlinesize < TIFF_TMSIZE_T_MAX / 16 && tif -> tif_scanlinesize * 16 < TIFF_TMSIZE_T_MAX - 5000
EXPR	380:20	380:20	8	tif -> tif_scanlinesize < TIFF_TMSIZE_T_MAX / 16 && tif -> tif_scanlinesize * 16 < TIFF_TMSIZE_T_MAX - 5000
AND	380:20	381:20	9	tif -> tif_scanlinesize < TIFF_TMSIZE_T_MAX / 16 && tif -> tif_scanlinesize * 16 < TIFF_TMSIZE_T_MAX - 5000
EXPR	380:20	380:64	10	tif -> tif_scanlinesize < TIFF_TMSIZE_T_MAX / 16
FIELD	380:20	380:25	11	tif -> tif_scanlinesize
LEAF_NODE	380:20	380:20	12	tif
LEAF_NODE	380:23	380:23	12	->
LEAF_NODE	380:25	380:25	12	tif_scanlinesize
REL_OPERATOR	380:42	380:42	11	<
LEAF_NODE	380:42	380:42	12	<
FIELD	380:44	380:44	11	TIFF_TMSIZE_T_MAX
LEAF_NODE	380:44	380:44	12	TIFF_TMSIZE_T_MAX
LEAF_NODE	380:62	380:62	11	/
FIELD	380:64	380:64	11	16
LEAF_NODE	380:64	380:64	12	16
LEAF_NODE	380:67	380:67	10	&&
EXPR	381:20	381:69	10	tif -> tif_scanlinesize * 16 < TIFF_TMSIZE_T_MAX - 5000
FIELD	381:20	381:25	11	tif -> tif_scanlinesize
LEAF_NODE	381:20	381:20	12	tif
LEAF_NODE	381:23	381:23	12	->
LEAF_NODE	381:25	381:25	12	tif_scanlinesize
LEAF_NODE	381:42	381:42	11	*
FIELD	381:44	381:44	11	16
LEAF_NODE	381:44	381:44	12	16
REL_OPERATOR	381:47	381:47	11	<
LEAF_NODE	381:47	381:47	12	<
FIELD	381:49	381:49	11	TIFF_TMSIZE_T_MAX
LEAF_NODE	381:49	381:49	12	TIFF_TMSIZE_T_MAX
LEAF_NODE	381:67	381:67	11	-
FIELD	381:69	381:69	11	5000
LEAF_NODE	381:69	381:69	12	5000
LEAF_NODE	381:74	381:74	7	)
STATEMENTS	382:16	384:16	7	
LEAF_NODE	382:16	382:16	8	{
STATEMENTS	383:24	383:24	8	
EXPR_STATEMENT	383:24	383:70	9	read_ahead = tif -> tif_scanlinesize * 16 + 5000 ;
EXPR	383:24	383:24	10	read_ahead = tif -> tif_scanlinesize * 16 + 5000
ASSIGN	383:24	383:37	11	read_ahead = tif -> tif_scanlinesize * 16 + 5000
LVAL	383:24	383:24	12	read_ahead
FIELD	383:24	383:24	13	read_ahead
LEAF_NODE	383:24	383:24	14	read_ahead
ASSIGN_OP	383:35	383:35	12	=
LEAF_NODE	383:35	383:35	13	=
RVAL	383:37	383:66	12	tif -> tif_scanlinesize * 16 + 5000
FIELD	383:37	383:42	13	tif -> tif_scanlinesize
LEAF_NODE	383:37	383:37	14	tif
LEAF_NODE	383:40	383:40	14	->
LEAF_NODE	383:42	383:42	14	tif_scanlinesize
LEAF_NODE	383:59	383:59	13	*
FIELD	383:61	383:61	13	16
LEAF_NODE	383:61	383:61	14	16
LEAF_NODE	383:64	383:64	13	+
FIELD	383:66	383:66	13	5000
LEAF_NODE	383:66	383:66	14	5000
LEAF_NODE	383:70	383:70	10	;
LEAF_NODE	384:16	384:16	8	}
SELECTION	385:16	386:16	6	
KEYWORD	385:16	385:16	7	else
LEAF_NODE	385:16	385:16	8	else
STATEMENTS	386:16	388:16	7	
LEAF_NODE	386:16	386:16	8	{
STATEMENTS	387:24	387:24	8	
EXPR_STATEMENT	387:24	387:58	9	read_ahead = tif -> tif_scanlinesize ;
EXPR	387:24	387:24	10	read_ahead = tif -> tif_scanlinesize
ASSIGN	387:24	387:37	11	read_ahead = tif -> tif_scanlinesize
LVAL	387:24	387:24	12	read_ahead
FIELD	387:24	387:24	13	read_ahead
LEAF_NODE	387:24	387:24	14	read_ahead
ASSIGN_OP	387:35	387:35	12	=
LEAF_NODE	387:35	387:35	13	=
RVAL	387:37	387:37	12	tif -> tif_scanlinesize
FIELD	387:37	387:42	13	tif -> tif_scanlinesize
LEAF_NODE	387:37	387:37	14	tif
LEAF_NODE	387:40	387:40	14	->
LEAF_NODE	387:42	387:42	14	tif_scanlinesize
LEAF_NODE	387:58	387:58	10	;
LEAF_NODE	388:16	388:16	8	}
LEAF_NODE	389:8	389:8	5	}
SELECTION	395:1	395:33	3	
KEYWORD	395:1	395:1	4	if
LEAF_NODE	395:1	395:1	5	if
LEAF_NODE	395:4	395:4	4	(
CONDITION	395:5	395:5	4	strip != tif -> tif_curstrip
EXPR	395:5	395:14	5	strip != tif -> tif_curstrip
FIELD	395:5	395:5	6	strip
LEAF_NODE	395:5	395:5	7	strip
EQ_OPERATOR	395:11	395:11	6	!=
LEAF_NODE	395:11	395:11	7	!=
FIELD	395:14	395:19	6	tif -> tif_curstrip
LEAF_NODE	395:14	395:14	7	tif
LEAF_NODE	395:17	395:17	7	->
LEAF_NODE	395:19	395:19	7	tif_curstrip
LEAF_NODE	395:31	395:31	4	)
STATEMENTS	395:33	407:1	4	
LEAF_NODE	395:33	395:33	5	{
STATEMENTS	397:16	402:16	5	
SELECTION	397:16	398:16	6	
KEYWORD	397:16	397:16	7	if
LEAF_NODE	397:16	397:16	8	if
LEAF_NODE	397:18	397:18	7	(
CONDITION	397:20	397:20	7	whole_strip
EXPR	397:20	397:20	8	whole_strip
FIELD	397:20	397:20	9	whole_strip
LEAF_NODE	397:20	397:20	10	whole_strip
LEAF_NODE	397:32	397:32	7	)
STATEMENTS	398:16	401:16	7	
LEAF_NODE	398:16	398:16	8	{
STATEMENTS	399:24	399:24	8	
SELECTION	399:24	400:32	9	
KEYWORD	399:24	399:24	10	if
LEAF_NODE	399:24	399:24	11	if
LEAF_NODE	399:27	399:27	10	(
CONDITION	399:28	399:28	10	! TIFFFillStrip ( tif , strip )
EXPR	399:28	399:28	11	! TIFFFillStrip ( tif , strip )
UNARY_EXPR	399:28	399:29	12	! TIFFFillStrip ( tif , strip )
UNARY_OPERATOR	399:28	399:28	13	!
LEAF_NODE	399:28	399:28	14	!
FUNCTION_CALL	399:29	399:53	13	TIFFFillStrip ( tif , strip )
CALLEE	399:29	399:29	14	TIFFFillStrip
LEAF_NODE	399:29	399:29	15	TIFFFillStrip
LEAF_NODE	399:42	399:42	14	(
ARGUMENT	399:43	399:43	14	tif
FIELD	399:43	399:43	15	tif
LEAF_NODE	399:43	399:43	16	tif
LEAF_NODE	399:46	399:46	14	,
ARGUMENT	399:48	399:48	14	strip
FIELD	399:48	399:48	15	strip
LEAF_NODE	399:48	399:48	16	strip
LEAF_NODE	399:53	399:53	14	)
LEAF_NODE	399:54	399:54	10	)
STATEMENTS	400:32	400:32	10	
JUMP_STATEMENT	400:32	400:42	11	return ( 0 ) ;
KEYWORD	400:32	400:32	12	return
LEAF_NODE	400:32	400:32	13	return
DESTINATION	400:39	400:39	12	( 0 )
EXPR	400:39	400:41	13	( 0 )
LEAF_NODE	400:39	400:39	14	(
FIELD	400:40	400:40	14	0
LEAF_NODE	400:40	400:40	15	0
LEAF_NODE	400:41	400:41	14	)
LEAF_NODE	400:42	400:42	12	;
LEAF_NODE	401:16	401:16	8	}
SELECTION	402:16	403:16	6	
KEYWORD	402:16	402:16	7	else
LEAF_NODE	402:16	402:16	8	else
STATEMENTS	403:16	406:16	7	
LEAF_NODE	403:16	403:16	8	{
STATEMENTS	404:24	404:24	8	
SELECTION	404:24	405:32	9	
KEYWORD	404:24	404:24	10	if
LEAF_NODE	404:24	404:24	11	if
LEAF_NODE	404:26	404:26	10	(
CONDITION	404:28	404:28	10	! TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
EXPR	404:28	404:28	11	! TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
UNARY_EXPR	404:28	404:29	12	! TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
UNARY_OPERATOR	404:28	404:28	13	!
LEAF_NODE	404:28	404:28	14	!
FUNCTION_CALL	404:29	404:72	13	TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
CALLEE	404:29	404:29	14	TIFFFillStripPartial
LEAF_NODE	404:29	404:29	15	TIFFFillStripPartial
LEAF_NODE	404:49	404:49	14	(
ARGUMENT	404:50	404:50	14	tif
FIELD	404:50	404:50	15	tif
LEAF_NODE	404:50	404:50	16	tif
LEAF_NODE	404:53	404:53	14	,
ARGUMENT	404:54	404:54	14	strip
FIELD	404:54	404:54	15	strip
LEAF_NODE	404:54	404:54	16	strip
LEAF_NODE	404:59	404:59	14	,
ARGUMENT	404:60	404:60	14	read_ahead
FIELD	404:60	404:60	15	read_ahead
LEAF_NODE	404:60	404:60	16	read_ahead
LEAF_NODE	404:70	404:70	14	,
ARGUMENT	404:71	404:71	14	1
FIELD	404:71	404:71	15	1
LEAF_NODE	404:71	404:71	16	1
LEAF_NODE	404:72	404:72	14	)
LEAF_NODE	404:74	404:74	10	)
STATEMENTS	405:32	405:32	10	
JUMP_STATEMENT	405:32	405:40	11	return 0 ;
KEYWORD	405:32	405:32	12	return
LEAF_NODE	405:32	405:32	13	return
DESTINATION	405:39	405:39	12	0
EXPR	405:39	405:39	13	0
FIELD	405:39	405:39	14	0
LEAF_NODE	405:39	405:39	15	0
LEAF_NODE	405:40	405:40	12	;
LEAF_NODE	406:16	406:16	8	}
LEAF_NODE	407:1	407:1	5	}
SELECTION	412:8	412:13	3	
KEYWORD	412:8	412:8	4	else
LEAF_NODE	412:8	412:8	5	else
STATEMENTS	412:13	412:13	4	
SELECTION	412:13	413:8	5	
KEYWORD	412:13	412:13	6	if
LEAF_NODE	412:13	412:13	7	if
LEAF_NODE	412:15	412:15	6	(
CONDITION	412:17	412:17	6	! whole_strip
EXPR	412:17	412:17	7	! whole_strip
UNARY_EXPR	412:17	412:18	8	! whole_strip
UNARY_OPERATOR	412:17	412:17	9	!
LEAF_NODE	412:17	412:17	10	!
FIELD	412:18	412:18	9	whole_strip
LEAF_NODE	412:18	412:18	10	whole_strip
LEAF_NODE	412:30	412:30	6	)
STATEMENTS	413:8	420:8	6	
LEAF_NODE	413:8	413:8	7	{
STATEMENTS	414:16	414:16	7	
SELECTION	414:16	416:16	8	
KEYWORD	414:16	414:16	9	if
LEAF_NODE	414:16	414:16	10	if
LEAF_NODE	414:18	414:18	9	(
CONDITION	414:20	414:20	9	( ( tif -> tif_rawdata + tif -> tif_rawdataloaded ) - tif -> tif_rawcp ) < read_ahead && ( uint64 ) tif -> tif_rawdataoff + tif -> tif_rawdataloaded < TIFFGetStrileByteCount ( tif , strip )
EXPR	414:20	414:20	10	( ( tif -> tif_rawdata + tif -> tif_rawdataloaded ) - tif -> tif_rawcp ) < read_ahead && ( uint64 ) tif -> tif_rawdataoff + tif -> tif_rawdataloaded < TIFFGetStrileByteCount ( tif , strip )
AND	414:20	415:23	11	( ( tif -> tif_rawdata + tif -> tif_rawdataloaded ) - tif -> tif_rawcp ) < read_ahead && ( uint64 ) tif -> tif_rawdataoff + tif -> tif_rawdataloaded < TIFFGetStrileByteCount ( tif , strip )
EXPR	414:20	414:85	12	( ( tif -> tif_rawdata + tif -> tif_rawdataloaded ) - tif -> tif_rawcp ) < read_ahead
LEAF_NODE	414:20	414:20	13	(
LEAF_NODE	414:21	414:21	13	(
FIELD	414:22	414:27	13	tif -> tif_rawdata
LEAF_NODE	414:22	414:22	14	tif
LEAF_NODE	414:25	414:25	14	->
LEAF_NODE	414:27	414:27	14	tif_rawdata
LEAF_NODE	414:39	414:39	13	+
FIELD	414:41	414:46	13	tif -> tif_rawdataloaded
LEAF_NODE	414:41	414:41	14	tif
LEAF_NODE	414:44	414:44	14	->
LEAF_NODE	414:46	414:46	14	tif_rawdataloaded
LEAF_NODE	414:63	414:63	13	)
LEAF_NODE	414:65	414:65	13	-
FIELD	414:67	414:72	13	tif -> tif_rawcp
LEAF_NODE	414:67	414:67	14	tif
LEAF_NODE	414:70	414:70	14	->
LEAF_NODE	414:72	414:72	14	tif_rawcp
LEAF_NODE	414:81	414:81	13	)
REL_OPERATOR	414:83	414:83	13	<
LEAF_NODE	414:83	414:83	14	<
FIELD	414:85	414:85	13	read_ahead
LEAF_NODE	414:85	414:85	14	read_ahead
LEAF_NODE	415:20	415:20	12	&&
EXPR	415:23	415:77	12	( uint64 ) tif -> tif_rawdataoff + tif -> tif_rawdataloaded < TIFFGetStrileByteCount ( tif , strip )
LEAF_NODE	415:23	415:23	13	(
TYPE_NAME	415:24	415:24	13	uint64
LEAF_NODE	415:24	415:24	14	uint64
LEAF_NODE	415:30	415:30	13	)
FIELD	415:32	415:37	13	tif -> tif_rawdataoff
LEAF_NODE	415:32	415:32	14	tif
LEAF_NODE	415:35	415:35	14	->
LEAF_NODE	415:37	415:37	14	tif_rawdataoff
LEAF_NODE	415:51	415:51	13	+
FIELD	415:52	415:57	13	tif -> tif_rawdataloaded
LEAF_NODE	415:52	415:52	14	tif
LEAF_NODE	415:55	415:55	14	->
LEAF_NODE	415:57	415:57	14	tif_rawdataloaded
REL_OPERATOR	415:75	415:75	13	<
LEAF_NODE	415:75	415:75	14	<
FUNCTION_CALL	415:77	415:110	13	TIFFGetStrileByteCount ( tif , strip )
CALLEE	415:77	415:77	14	TIFFGetStrileByteCount
LEAF_NODE	415:77	415:77	15	TIFFGetStrileByteCount
LEAF_NODE	415:99	415:99	14	(
ARGUMENT	415:100	415:100	14	tif
FIELD	415:100	415:100	15	tif
LEAF_NODE	415:100	415:100	16	tif
LEAF_NODE	415:103	415:103	14	,
ARGUMENT	415:105	415:105	14	strip
FIELD	415:105	415:105	15	strip
LEAF_NODE	415:105	415:105	16	strip
LEAF_NODE	415:110	415:110	14	)
LEAF_NODE	415:112	415:112	9	)
STATEMENTS	416:16	419:16	9	
LEAF_NODE	416:16	416:16	10	{
STATEMENTS	417:24	417:24	10	
SELECTION	417:24	418:32	11	
KEYWORD	417:24	417:24	12	if
LEAF_NODE	417:24	417:24	13	if
LEAF_NODE	417:26	417:26	12	(
CONDITION	417:28	417:28	12	! TIFFFillStripPartial ( tif , strip , read_ahead , 0 )
EXPR	417:28	417:28	13	! TIFFFillStripPartial ( tif , strip , read_ahead , 0 )
UNARY_EXPR	417:28	417:29	14	! TIFFFillStripPartial ( tif , strip , read_ahead , 0 )
UNARY_OPERATOR	417:28	417:28	15	!
LEAF_NODE	417:28	417:28	16	!
FUNCTION_CALL	417:29	417:72	15	TIFFFillStripPartial ( tif , strip , read_ahead , 0 )
CALLEE	417:29	417:29	16	TIFFFillStripPartial
LEAF_NODE	417:29	417:29	17	TIFFFillStripPartial
LEAF_NODE	417:49	417:49	16	(
ARGUMENT	417:50	417:50	16	tif
FIELD	417:50	417:50	17	tif
LEAF_NODE	417:50	417:50	18	tif
LEAF_NODE	417:53	417:53	16	,
ARGUMENT	417:54	417:54	16	strip
FIELD	417:54	417:54	17	strip
LEAF_NODE	417:54	417:54	18	strip
LEAF_NODE	417:59	417:59	16	,
ARGUMENT	417:60	417:60	16	read_ahead
FIELD	417:60	417:60	17	read_ahead
LEAF_NODE	417:60	417:60	18	read_ahead
LEAF_NODE	417:70	417:70	16	,
ARGUMENT	417:71	417:71	16	0
FIELD	417:71	417:71	17	0
LEAF_NODE	417:71	417:71	18	0
LEAF_NODE	417:72	417:72	16	)
LEAF_NODE	417:74	417:74	12	)
STATEMENTS	418:32	418:32	12	
JUMP_STATEMENT	418:32	418:40	13	return 0 ;
KEYWORD	418:32	418:32	14	return
LEAF_NODE	418:32	418:32	15	return
DESTINATION	418:39	418:39	14	0
EXPR	418:39	418:39	15	0
FIELD	418:39	418:39	16	0
LEAF_NODE	418:39	418:39	17	0
LEAF_NODE	418:40	418:40	14	;
LEAF_NODE	419:16	419:16	10	}
LEAF_NODE	420:8	420:8	7	}
SELECTION	422:8	422:32	3	
KEYWORD	422:8	422:8	4	if
LEAF_NODE	422:8	422:8	5	if
LEAF_NODE	422:11	422:11	4	(
CONDITION	422:12	422:12	4	row < tif -> tif_row
EXPR	422:12	422:18	5	row < tif -> tif_row
FIELD	422:12	422:12	6	row
LEAF_NODE	422:12	422:12	7	row
REL_OPERATOR	422:16	422:16	6	<
LEAF_NODE	422:16	422:16	7	<
FIELD	422:18	422:23	6	tif -> tif_row
LEAF_NODE	422:18	422:18	7	tif
LEAF_NODE	422:21	422:21	7	->
LEAF_NODE	422:23	422:23	7	tif_row
LEAF_NODE	422:30	422:30	4	)
STATEMENTS	422:32	442:1	4	
LEAF_NODE	422:32	422:32	5	{
STATEMENTS	432:16	437:16	5	
SELECTION	432:16	433:16	6	
KEYWORD	432:16	432:16	7	if
LEAF_NODE	432:16	432:16	8	if
LEAF_NODE	432:18	432:18	7	(
CONDITION	432:20	432:20	7	tif -> tif_rawdataoff != 0
EXPR	432:20	432:43	8	tif -> tif_rawdataoff != 0
FIELD	432:20	432:25	9	tif -> tif_rawdataoff
LEAF_NODE	432:20	432:20	10	tif
LEAF_NODE	432:23	432:23	10	->
LEAF_NODE	432:25	432:25	10	tif_rawdataoff
EQ_OPERATOR	432:40	432:40	9	!=
LEAF_NODE	432:40	432:40	10	!=
FIELD	432:43	432:43	9	0
LEAF_NODE	432:43	432:43	10	0
LEAF_NODE	432:45	432:45	7	)
STATEMENTS	433:16	436:16	7	
LEAF_NODE	433:16	433:16	8	{
STATEMENTS	434:24	434:24	8	
SELECTION	434:24	435:32	9	
KEYWORD	434:24	434:24	10	if
LEAF_NODE	434:24	434:24	11	if
LEAF_NODE	434:26	434:26	10	(
CONDITION	434:28	434:28	10	! TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
EXPR	434:28	434:28	11	! TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
UNARY_EXPR	434:28	434:29	12	! TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
UNARY_OPERATOR	434:28	434:28	13	!
LEAF_NODE	434:28	434:28	14	!
FUNCTION_CALL	434:29	434:72	13	TIFFFillStripPartial ( tif , strip , read_ahead , 1 )
CALLEE	434:29	434:29	14	TIFFFillStripPartial
LEAF_NODE	434:29	434:29	15	TIFFFillStripPartial
LEAF_NODE	434:49	434:49	14	(
ARGUMENT	434:50	434:50	14	tif
FIELD	434:50	434:50	15	tif
LEAF_NODE	434:50	434:50	16	tif
LEAF_NODE	434:53	434:53	14	,
ARGUMENT	434:54	434:54	14	strip
FIELD	434:54	434:54	15	strip
LEAF_NODE	434:54	434:54	16	strip
LEAF_NODE	434:59	434:59	14	,
ARGUMENT	434:60	434:60	14	read_ahead
FIELD	434:60	434:60	15	read_ahead
LEAF_NODE	434:60	434:60	16	read_ahead
LEAF_NODE	434:70	434:70	14	,
ARGUMENT	434:71	434:71	14	1
FIELD	434:71	434:71	15	1
LEAF_NODE	434:71	434:71	16	1
LEAF_NODE	434:72	434:72	14	)
LEAF_NODE	434:74	434:74	10	)
STATEMENTS	435:32	435:32	10	
JUMP_STATEMENT	435:32	435:40	11	return 0 ;
KEYWORD	435:32	435:32	12	return
LEAF_NODE	435:32	435:32	13	return
DESTINATION	435:39	435:39	12	0
EXPR	435:39	435:39	13	0
FIELD	435:39	435:39	14	0
LEAF_NODE	435:39	435:39	15	0
LEAF_NODE	435:40	435:40	12	;
LEAF_NODE	436:16	436:16	8	}
SELECTION	437:16	438:16	6	
KEYWORD	437:16	437:16	7	else
LEAF_NODE	437:16	437:16	8	else
STATEMENTS	438:16	441:16	7	
LEAF_NODE	438:16	438:16	8	{
STATEMENTS	439:24	439:24	8	
SELECTION	439:24	440:32	9	
KEYWORD	439:24	439:24	10	if
LEAF_NODE	439:24	439:24	11	if
LEAF_NODE	439:27	439:27	10	(
CONDITION	439:28	439:28	10	! TIFFStartStrip ( tif , strip )
EXPR	439:28	439:28	11	! TIFFStartStrip ( tif , strip )
UNARY_EXPR	439:28	439:29	12	! TIFFStartStrip ( tif , strip )
UNARY_OPERATOR	439:28	439:28	13	!
LEAF_NODE	439:28	439:28	14	!
FUNCTION_CALL	439:29	439:54	13	TIFFStartStrip ( tif , strip )
CALLEE	439:29	439:29	14	TIFFStartStrip
LEAF_NODE	439:29	439:29	15	TIFFStartStrip
LEAF_NODE	439:43	439:43	14	(
ARGUMENT	439:44	439:44	14	tif
FIELD	439:44	439:44	15	tif
LEAF_NODE	439:44	439:44	16	tif
LEAF_NODE	439:47	439:47	14	,
ARGUMENT	439:49	439:49	14	strip
FIELD	439:49	439:49	15	strip
LEAF_NODE	439:49	439:49	16	strip
LEAF_NODE	439:54	439:54	14	)
LEAF_NODE	439:55	439:55	10	)
STATEMENTS	440:32	440:32	10	
JUMP_STATEMENT	440:32	440:42	11	return ( 0 ) ;
KEYWORD	440:32	440:32	12	return
LEAF_NODE	440:32	440:32	13	return
DESTINATION	440:39	440:39	12	( 0 )
EXPR	440:39	440:41	13	( 0 )
LEAF_NODE	440:39	440:39	14	(
FIELD	440:40	440:40	14	0
LEAF_NODE	440:40	440:40	15	0
LEAF_NODE	440:41	440:41	14	)
LEAF_NODE	440:42	440:42	12	;
LEAF_NODE	441:16	441:16	8	}
LEAF_NODE	442:1	442:1	5	}
SELECTION	444:1	444:26	3	
KEYWORD	444:1	444:1	4	if
LEAF_NODE	444:1	444:1	5	if
LEAF_NODE	444:4	444:4	4	(
CONDITION	444:5	444:5	4	row != tif -> tif_row
EXPR	444:5	444:12	5	row != tif -> tif_row
FIELD	444:5	444:5	6	row
LEAF_NODE	444:5	444:5	7	row
EQ_OPERATOR	444:9	444:9	6	!=
LEAF_NODE	444:9	444:9	7	!=
FIELD	444:12	444:17	6	tif -> tif_row
LEAF_NODE	444:12	444:12	7	tif
LEAF_NODE	444:15	444:15	7	->
LEAF_NODE	444:17	444:17	7	tif_row
LEAF_NODE	444:24	444:24	4	)
STATEMENTS	444:26	454:1	4	
LEAF_NODE	444:26	444:26	5	{
STATEMENTS	451:2	453:2	5	
SELECTION	451:2	452:3	6	
KEYWORD	451:2	451:2	7	if
LEAF_NODE	451:2	451:2	8	if
LEAF_NODE	451:5	451:5	7	(
CONDITION	451:6	451:6	7	! ( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
EXPR	451:6	451:6	8	! ( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
UNARY_EXPR	451:6	451:7	9	! ( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
UNARY_OPERATOR	451:6	451:6	10	!
LEAF_NODE	451:6	451:6	11	!
FUNCTION_CALL	451:7	451:47	10	( * tif -> tif_seek ) ( tif , row - tif -> tif_row )
CALLEE	451:7	451:22	11	( * tif -> tif_seek )
LEAF_NODE	451:7	451:7	12	(
UNARY_EXPR	451:8	451:9	12	* tif -> tif_seek
UNARY_OPERATOR	451:8	451:8	13	*
LEAF_NODE	451:8	451:8	14	*
FIELD	451:9	451:14	13	tif -> tif_seek
LEAF_NODE	451:9	451:9	14	tif
LEAF_NODE	451:12	451:12	14	->
LEAF_NODE	451:14	451:14	14	tif_seek
LEAF_NODE	451:22	451:22	12	)
LEAF_NODE	451:23	451:23	11	(
ARGUMENT	451:24	451:24	11	tif
FIELD	451:24	451:24	12	tif
LEAF_NODE	451:24	451:24	13	tif
LEAF_NODE	451:27	451:27	11	,
ARGUMENT	451:29	451:35	11	row - tif -> tif_row
FIELD	451:29	451:29	12	row
LEAF_NODE	451:29	451:29	13	row
LEAF_NODE	451:33	451:33	12	-
FIELD	451:35	451:40	12	tif -> tif_row
LEAF_NODE	451:35	451:35	13	tif
LEAF_NODE	451:38	451:38	13	->
LEAF_NODE	451:40	451:40	13	tif_row
LEAF_NODE	451:47	451:47	11	)
LEAF_NODE	451:48	451:48	7	)
STATEMENTS	452:3	452:3	7	
JUMP_STATEMENT	452:3	452:13	8	return ( 0 ) ;
KEYWORD	452:3	452:3	9	return
LEAF_NODE	452:3	452:3	10	return
DESTINATION	452:10	452:10	9	( 0 )
EXPR	452:10	452:12	10	( 0 )
LEAF_NODE	452:10	452:10	11	(
FIELD	452:11	452:11	11	0
LEAF_NODE	452:11	452:11	12	0
LEAF_NODE	452:12	452:12	11	)
LEAF_NODE	452:13	452:13	9	;
EXPR_STATEMENT	453:2	453:20	6	tif -> tif_row = row ;
EXPR	453:2	453:2	7	tif -> tif_row = row
ASSIGN	453:2	453:17	8	tif -> tif_row = row
LVAL	453:2	453:2	9	tif -> tif_row
FIELD	453:2	453:7	10	tif -> tif_row
LEAF_NODE	453:2	453:2	11	tif
LEAF_NODE	453:5	453:5	11	->
LEAF_NODE	453:7	453:7	11	tif_row
ASSIGN_OP	453:15	453:15	9	=
LEAF_NODE	453:15	453:15	10	=
RVAL	453:17	453:17	9	row
FIELD	453:17	453:17	10	row
LEAF_NODE	453:17	453:17	11	row
LEAF_NODE	453:20	453:20	7	;
LEAF_NODE	454:1	454:1	5	}
JUMP_STATEMENT	456:1	456:11	3	return ( 1 ) ;
KEYWORD	456:1	456:1	4	return
LEAF_NODE	456:1	456:1	5	return
DESTINATION	456:8	456:8	4	( 1 )
EXPR	456:8	456:10	5	( 1 )
LEAF_NODE	456:8	456:8	6	(
FIELD	456:9	456:9	6	1
LEAF_NODE	456:9	456:9	7	1
LEAF_NODE	456:10	456:10	6	)
LEAF_NODE	456:11	456:11	4	;
LEAF_NODE	457:0	457:0	2	}
FUNCTION_DEF	459:0	481:0	1	
RETURN_TYPE	459:0	459:0	2	int
TYPE_NAME	459:0	459:0	3	int
LEAF_NODE	459:0	459:0	4	int
FUNCTION_NAME	460:0	460:0	2	TIFFReadScanline
LEAF_NODE	460:0	460:0	3	TIFFReadScanline
PARAMETER_LIST	460:16	460:64	2	( TIFF * tif , void * buf , uint32 row , uint16 sample )
LEAF_NODE	460:16	460:16	3	(
PARAMETER_DECL	460:17	460:23	3	TIFF * tif
TYPE	460:17	460:21	4	TIFF *
TYPE_NAME	460:17	460:17	5	TIFF
LEAF_NODE	460:17	460:17	6	TIFF
POINTER	460:21	460:21	5	*
LEAF_NODE	460:21	460:21	6	*
NAME	460:23	460:23	4	tif
LEAF_NODE	460:23	460:23	5	tif
LEAF_NODE	460:26	460:26	3	,
PARAMETER_DECL	460:28	460:34	3	void * buf
TYPE	460:28	460:32	4	void *
TYPE_NAME	460:28	460:28	5	void
LEAF_NODE	460:28	460:28	6	void
POINTER	460:32	460:32	5	*
LEAF_NODE	460:32	460:32	6	*
NAME	460:34	460:34	4	buf
LEAF_NODE	460:34	460:34	5	buf
LEAF_NODE	460:37	460:37	3	,
PARAMETER_DECL	460:39	460:46	3	uint32 row
TYPE	460:39	460:39	4	uint32
TYPE_NAME	460:39	460:39	5	uint32
LEAF_NODE	460:39	460:39	6	uint32
NAME	460:46	460:46	4	row
LEAF_NODE	460:46	460:46	5	row
LEAF_NODE	460:49	460:49	3	,
PARAMETER_DECL	460:51	460:58	3	uint16 sample
TYPE	460:51	460:51	4	uint16
TYPE_NAME	460:51	460:51	5	uint16
LEAF_NODE	460:51	460:51	6	uint16
NAME	460:58	460:58	4	sample
LEAF_NODE	460:58	460:58	5	sample
LEAF_NODE	460:64	460:64	3	)
LEAF_NODE	461:0	461:0	2	{
STATEMENTS	462:1	480:1	2	
SIMPLE_DECL	462:1	462:6	3	int e ;
VAR_DECL	462:1	462:5	4	int e
TYPE	462:1	462:1	5	int
TYPE_NAME	462:1	462:1	6	int
LEAF_NODE	462:1	462:1	7	int
NAME	462:5	462:5	5	e
LEAF_NODE	462:5	462:5	6	e
LEAF_NODE	462:6	462:6	4	;
SELECTION	464:1	465:2	3	
KEYWORD	464:1	464:1	4	if
LEAF_NODE	464:1	464:1	5	if
LEAF_NODE	464:4	464:4	4	(
CONDITION	464:5	464:5	4	! TIFFCheckRead ( tif , 0 )
EXPR	464:5	464:5	5	! TIFFCheckRead ( tif , 0 )
UNARY_EXPR	464:5	464:6	6	! TIFFCheckRead ( tif , 0 )
UNARY_OPERATOR	464:5	464:5	7	!
LEAF_NODE	464:5	464:5	8	!
FUNCTION_CALL	464:6	464:26	7	TIFFCheckRead ( tif , 0 )
CALLEE	464:6	464:6	8	TIFFCheckRead
LEAF_NODE	464:6	464:6	9	TIFFCheckRead
LEAF_NODE	464:19	464:19	8	(
ARGUMENT	464:20	464:20	8	tif
FIELD	464:20	464:20	9	tif
LEAF_NODE	464:20	464:20	10	tif
LEAF_NODE	464:23	464:23	8	,
ARGUMENT	464:25	464:25	8	0
FIELD	464:25	464:25	9	0
LEAF_NODE	464:25	464:25	10	0
LEAF_NODE	464:26	464:26	8	)
LEAF_NODE	464:27	464:27	4	)
STATEMENTS	465:2	465:2	4	
JUMP_STATEMENT	465:2	465:13	5	return ( - 1 ) ;
KEYWORD	465:2	465:2	6	return
LEAF_NODE	465:2	465:2	7	return
DESTINATION	465:9	465:9	6	( - 1 )
EXPR	465:9	465:12	7	( - 1 )
LEAF_NODE	465:9	465:9	8	(
UNARY_EXPR	465:10	465:11	8	- 1
UNARY_OPERATOR	465:10	465:10	9	-
LEAF_NODE	465:10	465:10	10	-
FIELD	465:11	465:11	9	1
LEAF_NODE	465:11	465:11	10	1
LEAF_NODE	465:12	465:12	8	)
LEAF_NODE	465:13	465:13	6	;
SELECTION	466:1	466:44	3	
KEYWORD	466:1	466:1	4	if
LEAF_NODE	466:1	466:1	5	if
LEAF_NODE	466:3	466:3	4	(
CONDITION	466:5	466:5	4	( e = TIFFSeek ( tif , row , sample ) ) != 0
EXPR	466:5	466:41	5	( e = TIFFSeek ( tif , row , sample ) ) != 0
LEAF_NODE	466:5	466:5	6	(
ASSIGN	466:6	466:10	6	e = TIFFSeek ( tif , row , sample )
LVAL	466:6	466:6	7	e
FIELD	466:6	466:6	8	e
LEAF_NODE	466:6	466:6	9	e
ASSIGN_OP	466:8	466:8	7	=
LEAF_NODE	466:8	466:8	8	=
RVAL	466:10	466:10	7	TIFFSeek ( tif , row , sample )
FUNCTION_CALL	466:10	466:35	8	TIFFSeek ( tif , row , sample )
CALLEE	466:10	466:10	9	TIFFSeek
LEAF_NODE	466:10	466:10	10	TIFFSeek
LEAF_NODE	466:18	466:18	9	(
ARGUMENT	466:19	466:19	9	tif
FIELD	466:19	466:19	10	tif
LEAF_NODE	466:19	466:19	11	tif
LEAF_NODE	466:22	466:22	9	,
ARGUMENT	466:24	466:24	9	row
FIELD	466:24	466:24	10	row
LEAF_NODE	466:24	466:24	11	row
LEAF_NODE	466:27	466:27	9	,
ARGUMENT	466:29	466:29	9	sample
FIELD	466:29	466:29	10	sample
LEAF_NODE	466:29	466:29	11	sample
LEAF_NODE	466:35	466:35	9	)
LEAF_NODE	466:36	466:36	6	)
EQ_OPERATOR	466:38	466:38	6	!=
LEAF_NODE	466:38	466:38	7	!=
FIELD	466:41	466:41	6	0
LEAF_NODE	466:41	466:41	7	0
LEAF_NODE	466:42	466:42	4	)
STATEMENTS	466:44	479:1	4	
LEAF_NODE	466:44	466:44	5	{
STATEMENTS	470:2	476:2	5	
EXPR_STATEMENT	470:2	471:56	6	e = ( * tif -> tif_decoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample ) ;
EXPR	470:2	470:2	7	e = ( * tif -> tif_decoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
ASSIGN	470:2	470:6	8	e = ( * tif -> tif_decoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
LVAL	470:2	470:2	9	e
FIELD	470:2	470:2	10	e
LEAF_NODE	470:2	470:2	11	e
ASSIGN_OP	470:4	470:4	9	=
LEAF_NODE	470:4	470:4	10	=
RVAL	470:6	470:6	9	( * tif -> tif_decoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
FUNCTION_CALL	470:6	471:55	10	( * tif -> tif_decoderow ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize , sample )
CALLEE	470:6	470:26	11	( * tif -> tif_decoderow )
LEAF_NODE	470:6	470:6	12	(
UNARY_EXPR	470:7	470:8	12	* tif -> tif_decoderow
UNARY_OPERATOR	470:7	470:7	13	*
LEAF_NODE	470:7	470:7	14	*
FIELD	470:8	470:13	13	tif -> tif_decoderow
LEAF_NODE	470:8	470:8	14	tif
LEAF_NODE	470:11	470:11	14	->
LEAF_NODE	470:13	470:13	14	tif_decoderow
LEAF_NODE	470:26	470:26	12	)
LEAF_NODE	471:6	471:6	11	(
ARGUMENT	471:7	471:7	11	tif
FIELD	471:7	471:7	12	tif
LEAF_NODE	471:7	471:7	13	tif
LEAF_NODE	471:10	471:10	11	,
ARGUMENT	471:12	471:21	11	( uint8 * ) buf
LEAF_NODE	471:12	471:12	12	(
TYPE_NAME	471:13	471:13	12	uint8
LEAF_NODE	471:13	471:13	13	uint8
LEAF_NODE	471:18	471:18	12	*
LEAF_NODE	471:19	471:19	12	)
FIELD	471:21	471:21	12	buf
LEAF_NODE	471:21	471:21	13	buf
LEAF_NODE	471:24	471:24	11	,
ARGUMENT	471:26	471:26	11	tif -> tif_scanlinesize
FIELD	471:26	471:31	12	tif -> tif_scanlinesize
LEAF_NODE	471:26	471:26	13	tif
LEAF_NODE	471:29	471:29	13	->
LEAF_NODE	471:31	471:31	13	tif_scanlinesize
LEAF_NODE	471:47	471:47	11	,
ARGUMENT	471:49	471:49	11	sample
FIELD	471:49	471:49	12	sample
LEAF_NODE	471:49	471:49	13	sample
LEAF_NODE	471:55	471:55	11	)
LEAF_NODE	471:56	471:56	7	;
EXPR_STATEMENT	474:2	474:24	6	tif -> tif_row = row + 1 ;
EXPR	474:2	474:2	7	tif -> tif_row = row + 1
ASSIGN	474:2	474:17	8	tif -> tif_row = row + 1
LVAL	474:2	474:2	9	tif -> tif_row
FIELD	474:2	474:7	10	tif -> tif_row
LEAF_NODE	474:2	474:2	11	tif
LEAF_NODE	474:5	474:5	11	->
LEAF_NODE	474:7	474:7	11	tif_row
ASSIGN_OP	474:15	474:15	9	=
LEAF_NODE	474:15	474:15	10	=
RVAL	474:17	474:23	9	row + 1
FIELD	474:17	474:17	10	row
LEAF_NODE	474:17	474:17	11	row
LEAF_NODE	474:21	474:21	10	+
FIELD	474:23	474:23	10	1
LEAF_NODE	474:23	474:23	11	1
LEAF_NODE	474:24	474:24	7	;
SELECTION	476:2	477:3	6	
KEYWORD	476:2	476:2	7	if
LEAF_NODE	476:2	476:2	8	if
LEAF_NODE	476:5	476:5	7	(
CONDITION	476:6	476:6	7	e
EXPR	476:6	476:6	8	e
FIELD	476:6	476:6	9	e
LEAF_NODE	476:6	476:6	10	e
LEAF_NODE	476:7	476:7	7	)
STATEMENTS	477:3	477:3	7	
EXPR_STATEMENT	477:3	478:29	8	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize ) ;
EXPR	477:3	477:3	9	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize )
FUNCTION_CALL	477:3	478:28	10	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) buf , tif -> tif_scanlinesize )
CALLEE	477:3	477:24	11	( * tif -> tif_postdecode )
LEAF_NODE	477:3	477:3	12	(
UNARY_EXPR	477:4	477:5	12	* tif -> tif_postdecode
UNARY_OPERATOR	477:4	477:4	13	*
LEAF_NODE	477:4	477:4	14	*
FIELD	477:5	477:10	13	tif -> tif_postdecode
LEAF_NODE	477:5	477:5	14	tif
LEAF_NODE	477:8	477:8	14	->
LEAF_NODE	477:10	477:10	14	tif_postdecode
LEAF_NODE	477:24	477:24	12	)
LEAF_NODE	477:25	477:25	11	(
ARGUMENT	477:26	477:26	11	tif
FIELD	477:26	477:26	12	tif
LEAF_NODE	477:26	477:26	13	tif
LEAF_NODE	477:29	477:29	11	,
ARGUMENT	477:31	477:40	11	( uint8 * ) buf
LEAF_NODE	477:31	477:31	12	(
TYPE_NAME	477:32	477:32	12	uint8
LEAF_NODE	477:32	477:32	13	uint8
LEAF_NODE	477:37	477:37	12	*
LEAF_NODE	477:38	477:38	12	)
FIELD	477:40	477:40	12	buf
LEAF_NODE	477:40	477:40	13	buf
LEAF_NODE	477:43	477:43	11	,
ARGUMENT	478:7	478:7	11	tif -> tif_scanlinesize
FIELD	478:7	478:12	12	tif -> tif_scanlinesize
LEAF_NODE	478:7	478:7	13	tif
LEAF_NODE	478:10	478:10	13	->
LEAF_NODE	478:12	478:12	13	tif_scanlinesize
LEAF_NODE	478:28	478:28	11	)
LEAF_NODE	478:29	478:29	9	;
LEAF_NODE	479:1	479:1	5	}
JUMP_STATEMENT	480:1	480:24	3	return ( e > 0 ? 1 : - 1 ) ;
KEYWORD	480:1	480:1	4	return
LEAF_NODE	480:1	480:1	5	return
DESTINATION	480:8	480:8	4	( e > 0 ? 1 : - 1 )
EXPR	480:8	480:23	5	( e > 0 ? 1 : - 1 )
LEAF_NODE	480:8	480:8	6	(
COND_EXPR	480:9	480:21	6	e > 0 ? 1 : - 1
CONDITION	480:9	480:13	7	e > 0
FIELD	480:9	480:9	8	e
LEAF_NODE	480:9	480:9	9	e
REL_OPERATOR	480:11	480:11	8	>
LEAF_NODE	480:11	480:11	9	>
FIELD	480:13	480:13	8	0
LEAF_NODE	480:13	480:13	9	0
LEAF_NODE	480:15	480:15	7	?
EXPR	480:17	480:17	7	1
FIELD	480:17	480:17	8	1
LEAF_NODE	480:17	480:17	9	1
LEAF_NODE	480:19	480:19	7	:
UNARY_EXPR	480:21	480:22	7	- 1
UNARY_OPERATOR	480:21	480:21	8	-
LEAF_NODE	480:21	480:21	9	-
FIELD	480:22	480:22	8	1
LEAF_NODE	480:22	480:22	9	1
LEAF_NODE	480:23	480:23	6	)
LEAF_NODE	480:24	480:24	4	;
LEAF_NODE	481:0	481:0	2	}
FUNCTION_DEF	488:0	520:0	1	
RETURN_TYPE	488:0	488:7	2	static tmsize_t
LEAF_NODE	488:0	488:0	3	static
TYPE_NAME	488:7	488:7	3	tmsize_t
LEAF_NODE	488:7	488:7	4	tmsize_t
FUNCTION_NAME	488:16	488:16	2	TIFFReadEncodedStripGetStripSize
LEAF_NODE	488:16	488:16	3	TIFFReadEncodedStripGetStripSize
PARAMETER_LIST	488:48	488:88	2	( TIFF * tif , uint32 strip , uint16 * pplane )
LEAF_NODE	488:48	488:48	3	(
PARAMETER_DECL	488:49	488:55	3	TIFF * tif
TYPE	488:49	488:53	4	TIFF *
TYPE_NAME	488:49	488:49	5	TIFF
LEAF_NODE	488:49	488:49	6	TIFF
POINTER	488:53	488:53	5	*
LEAF_NODE	488:53	488:53	6	*
NAME	488:55	488:55	4	tif
LEAF_NODE	488:55	488:55	5	tif
LEAF_NODE	488:58	488:58	3	,
PARAMETER_DECL	488:60	488:67	3	uint32 strip
TYPE	488:60	488:60	4	uint32
TYPE_NAME	488:60	488:60	5	uint32
LEAF_NODE	488:60	488:60	6	uint32
NAME	488:67	488:67	4	strip
LEAF_NODE	488:67	488:67	5	strip
LEAF_NODE	488:72	488:72	3	,
PARAMETER_DECL	488:74	488:82	3	uint16 * pplane
TYPE	488:74	488:80	4	uint16 *
TYPE_NAME	488:74	488:74	5	uint16
LEAF_NODE	488:74	488:74	6	uint16
POINTER	488:80	488:80	5	*
LEAF_NODE	488:80	488:80	6	*
NAME	488:82	488:82	4	pplane
LEAF_NODE	488:82	488:82	5	pplane
LEAF_NODE	488:88	488:88	3	)
LEAF_NODE	489:0	489:0	2	{
STATEMENTS	490:1	519:1	2	
LEAF_NODE	490:1	490:1	3	static
SIMPLE_DECL	490:8	490:52	3	const char [ ] module ; module = "TIFFReadEncodedStrip" ;
VAR_DECL	490:8	490:19	4	const char [ ] module ; module = "TIFFReadEncodedStrip"
TYPE	490:8	490:25	5	const char [ ]
TYPE_NAME	490:8	490:14	6	const char
LEAF_NODE	490:8	490:8	7	const
LEAF_NODE	490:14	490:14	7	char
TYPE_SUFFIX	490:25	490:26	6	[ ]
LEAF_NODE	490:25	490:25	7	[
LEAF_NODE	490:26	490:26	7	]
NAME	490:19	490:19	5	module
LEAF_NODE	490:19	490:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	490:19	490:19	5	module = "TIFFReadEncodedStrip"
ASSIGN	490:19	490:30	6	module = "TIFFReadEncodedStrip"
LVAL	490:19	490:19	7	module
NAME	490:19	490:19	8	module
LEAF_NODE	490:19	490:19	9	module
ASSIGN_OP	490:28	490:28	7	=
LEAF_NODE	490:28	490:28	8	=
RVAL	490:30	490:30	7	"TIFFReadEncodedStrip"
FIELD	490:30	490:30	8	"TIFFReadEncodedStrip"
LEAF_NODE	490:30	490:30	9	"TIFFReadEncodedStrip"
LEAF_NODE	490:52	490:52	4	;
SIMPLE_DECL	491:1	491:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	491:1	491:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	491:1	491:15	5	TIFFDirectory *
TYPE_NAME	491:1	491:1	6	TIFFDirectory
LEAF_NODE	491:1	491:1	7	TIFFDirectory
POINTER	491:15	491:15	6	*
LEAF_NODE	491:15	491:15	7	*
NAME	491:16	491:16	5	td
LEAF_NODE	491:16	491:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	491:16	491:16	5	td = & tif -> tif_dir
ASSIGN	491:16	491:21	6	td = & tif -> tif_dir
LVAL	491:16	491:16	7	td
NAME	491:16	491:16	8	td
LEAF_NODE	491:16	491:16	9	td
ASSIGN_OP	491:19	491:19	7	=
LEAF_NODE	491:19	491:19	8	=
RVAL	491:21	491:21	7	& tif -> tif_dir
UNARY_EXPR	491:21	491:22	8	& tif -> tif_dir
UNARY_OPERATOR	491:21	491:21	9	&
LEAF_NODE	491:21	491:21	10	&
FIELD	491:22	491:27	9	tif -> tif_dir
LEAF_NODE	491:22	491:22	10	tif
LEAF_NODE	491:25	491:25	10	->
LEAF_NODE	491:27	491:27	10	tif_dir
LEAF_NODE	491:34	491:34	4	;
SIMPLE_DECL	492:1	492:20	3	uint32 rowsperstrip ;
VAR_DECL	492:1	492:8	4	uint32 rowsperstrip
TYPE	492:1	492:1	5	uint32
TYPE_NAME	492:1	492:1	6	uint32
LEAF_NODE	492:1	492:1	7	uint32
NAME	492:8	492:8	5	rowsperstrip
LEAF_NODE	492:8	492:8	6	rowsperstrip
LEAF_NODE	492:20	492:20	4	;
SIMPLE_DECL	493:1	493:22	3	uint32 stripsperplane ;
VAR_DECL	493:1	493:8	4	uint32 stripsperplane
TYPE	493:1	493:1	5	uint32
TYPE_NAME	493:1	493:1	6	uint32
LEAF_NODE	493:1	493:1	7	uint32
NAME	493:8	493:8	5	stripsperplane
LEAF_NODE	493:8	493:8	6	stripsperplane
LEAF_NODE	493:22	493:22	4	;
SIMPLE_DECL	494:1	494:20	3	uint32 stripinplane ;
VAR_DECL	494:1	494:8	4	uint32 stripinplane
TYPE	494:1	494:1	5	uint32
TYPE_NAME	494:1	494:1	6	uint32
LEAF_NODE	494:1	494:1	7	uint32
NAME	494:8	494:8	5	stripinplane
LEAF_NODE	494:8	494:8	6	stripinplane
LEAF_NODE	494:20	494:20	4	;
SIMPLE_DECL	495:1	495:12	3	uint32 rows ;
VAR_DECL	495:1	495:8	4	uint32 rows
TYPE	495:1	495:1	5	uint32
TYPE_NAME	495:1	495:1	6	uint32
LEAF_NODE	495:1	495:1	7	uint32
NAME	495:8	495:8	5	rows
LEAF_NODE	495:8	495:8	6	rows
LEAF_NODE	495:12	495:12	4	;
SIMPLE_DECL	496:1	496:19	3	tmsize_t stripsize ;
VAR_DECL	496:1	496:10	4	tmsize_t stripsize
TYPE	496:1	496:1	5	tmsize_t
TYPE_NAME	496:1	496:1	6	tmsize_t
LEAF_NODE	496:1	496:1	7	tmsize_t
NAME	496:10	496:10	5	stripsize
LEAF_NODE	496:10	496:10	6	stripsize
LEAF_NODE	496:19	496:19	4	;
SELECTION	497:1	498:2	3	
KEYWORD	497:1	497:1	4	if
LEAF_NODE	497:1	497:1	5	if
LEAF_NODE	497:4	497:4	4	(
CONDITION	497:5	497:5	4	! TIFFCheckRead ( tif , 0 )
EXPR	497:5	497:5	5	! TIFFCheckRead ( tif , 0 )
UNARY_EXPR	497:5	497:6	6	! TIFFCheckRead ( tif , 0 )
UNARY_OPERATOR	497:5	497:5	7	!
LEAF_NODE	497:5	497:5	8	!
FUNCTION_CALL	497:6	497:25	7	TIFFCheckRead ( tif , 0 )
CALLEE	497:6	497:6	8	TIFFCheckRead
LEAF_NODE	497:6	497:6	9	TIFFCheckRead
LEAF_NODE	497:19	497:19	8	(
ARGUMENT	497:20	497:20	8	tif
FIELD	497:20	497:20	9	tif
LEAF_NODE	497:20	497:20	10	tif
LEAF_NODE	497:23	497:23	8	,
ARGUMENT	497:24	497:24	8	0
FIELD	497:24	497:24	9	0
LEAF_NODE	497:24	497:24	10	0
LEAF_NODE	497:25	497:25	8	)
LEAF_NODE	497:26	497:26	4	)
STATEMENTS	498:2	498:2	4	
JUMP_STATEMENT	498:2	498:24	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	498:2	498:2	6	return
LEAF_NODE	498:2	498:2	7	return
DESTINATION	498:8	498:8	6	( ( tmsize_t ) ( - 1 ) )
EXPR	498:8	498:23	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	498:8	498:8	8	(
LEAF_NODE	498:9	498:9	8	(
TYPE_NAME	498:10	498:10	8	tmsize_t
LEAF_NODE	498:10	498:10	9	tmsize_t
LEAF_NODE	498:18	498:18	8	)
LEAF_NODE	498:19	498:19	8	(
UNARY_EXPR	498:20	498:21	8	- 1
UNARY_OPERATOR	498:20	498:20	9	-
LEAF_NODE	498:20	498:20	10	-
FIELD	498:21	498:21	9	1
LEAF_NODE	498:21	498:21	10	1
LEAF_NODE	498:22	498:22	8	)
LEAF_NODE	498:23	498:23	8	)
LEAF_NODE	498:24	498:24	6	;
SELECTION	499:1	500:1	3	
KEYWORD	499:1	499:1	4	if
LEAF_NODE	499:1	499:1	5	if
LEAF_NODE	499:4	499:4	4	(
CONDITION	499:5	499:5	4	strip >= td -> td_nstrips
EXPR	499:5	499:12	5	strip >= td -> td_nstrips
FIELD	499:5	499:5	6	strip
LEAF_NODE	499:5	499:5	7	strip
REL_OPERATOR	499:10	499:10	6	>=
LEAF_NODE	499:10	499:10	7	>=
FIELD	499:12	499:16	6	td -> td_nstrips
LEAF_NODE	499:12	499:12	7	td
LEAF_NODE	499:14	499:14	7	->
LEAF_NODE	499:16	499:16	7	td_nstrips
LEAF_NODE	499:26	499:26	4	)
STATEMENTS	500:1	505:1	4	
LEAF_NODE	500:1	500:1	5	{
STATEMENTS	501:2	504:2	5	
EXPR_STATEMENT	501:2	503:36	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Strip out of range, max %lu" , ( unsigned long ) strip , ( unsigned long ) td -> td_nstrips ) ;
EXPR	501:2	501:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Strip out of range, max %lu" , ( unsigned long ) strip , ( unsigned long ) td -> td_nstrips )
FUNCTION_CALL	501:2	503:35	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Strip out of range, max %lu" , ( unsigned long ) strip , ( unsigned long ) td -> td_nstrips )
CALLEE	501:2	501:2	9	TIFFErrorExt
LEAF_NODE	501:2	501:2	10	TIFFErrorExt
LEAF_NODE	501:14	501:14	9	(
ARGUMENT	501:15	501:15	9	tif -> tif_clientdata
FIELD	501:15	501:20	10	tif -> tif_clientdata
LEAF_NODE	501:15	501:15	11	tif
LEAF_NODE	501:18	501:18	11	->
LEAF_NODE	501:20	501:20	11	tif_clientdata
LEAF_NODE	501:34	501:34	9	,
ARGUMENT	501:35	501:35	9	module
FIELD	501:35	501:35	10	module
LEAF_NODE	501:35	501:35	11	module
LEAF_NODE	501:41	501:41	9	,
ARGUMENT	502:6	502:6	9	"%lu: Strip out of range, max %lu"
FIELD	502:6	502:6	10	"%lu: Strip out of range, max %lu"
LEAF_NODE	502:6	502:6	11	"%lu: Strip out of range, max %lu"
LEAF_NODE	502:40	502:40	9	,
ARGUMENT	502:41	502:56	9	( unsigned long ) strip
LEAF_NODE	502:41	502:41	10	(
TYPE_NAME	502:42	502:51	10	unsigned long
LEAF_NODE	502:42	502:42	11	unsigned
LEAF_NODE	502:51	502:51	11	long
LEAF_NODE	502:55	502:55	10	)
FIELD	502:56	502:56	10	strip
LEAF_NODE	502:56	502:56	11	strip
LEAF_NODE	502:61	502:61	9	,
ARGUMENT	503:6	503:21	9	( unsigned long ) td -> td_nstrips
LEAF_NODE	503:6	503:6	10	(
TYPE_NAME	503:7	503:16	10	unsigned long
LEAF_NODE	503:7	503:7	11	unsigned
LEAF_NODE	503:16	503:16	11	long
LEAF_NODE	503:20	503:20	10	)
FIELD	503:21	503:25	10	td -> td_nstrips
LEAF_NODE	503:21	503:21	11	td
LEAF_NODE	503:23	503:23	11	->
LEAF_NODE	503:25	503:25	11	td_nstrips
LEAF_NODE	503:35	503:35	9	)
LEAF_NODE	503:36	503:36	7	;
JUMP_STATEMENT	504:2	504:24	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	504:2	504:2	7	return
LEAF_NODE	504:2	504:2	8	return
DESTINATION	504:8	504:8	7	( ( tmsize_t ) ( - 1 ) )
EXPR	504:8	504:23	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	504:8	504:8	9	(
LEAF_NODE	504:9	504:9	9	(
TYPE_NAME	504:10	504:10	9	tmsize_t
LEAF_NODE	504:10	504:10	10	tmsize_t
LEAF_NODE	504:18	504:18	9	)
LEAF_NODE	504:19	504:19	9	(
UNARY_EXPR	504:20	504:21	9	- 1
UNARY_OPERATOR	504:20	504:20	10	-
LEAF_NODE	504:20	504:20	11	-
FIELD	504:21	504:21	10	1
LEAF_NODE	504:21	504:21	11	1
LEAF_NODE	504:22	504:22	9	)
LEAF_NODE	504:23	504:23	9	)
LEAF_NODE	504:24	504:24	7	;
LEAF_NODE	505:1	505:1	5	}
EXPR_STATEMENT	507:1	507:33	3	rowsperstrip = td -> td_rowsperstrip ;
EXPR	507:1	507:1	4	rowsperstrip = td -> td_rowsperstrip
ASSIGN	507:1	507:14	5	rowsperstrip = td -> td_rowsperstrip
LVAL	507:1	507:1	6	rowsperstrip
FIELD	507:1	507:1	7	rowsperstrip
LEAF_NODE	507:1	507:1	8	rowsperstrip
ASSIGN_OP	507:13	507:13	6	=
LEAF_NODE	507:13	507:13	7	=
RVAL	507:14	507:14	6	td -> td_rowsperstrip
FIELD	507:14	507:18	7	td -> td_rowsperstrip
LEAF_NODE	507:14	507:14	8	td
LEAF_NODE	507:16	507:16	8	->
LEAF_NODE	507:18	507:18	8	td_rowsperstrip
LEAF_NODE	507:33	507:33	4	;
SELECTION	508:1	509:2	3	
KEYWORD	508:1	508:1	4	if
LEAF_NODE	508:1	508:1	5	if
LEAF_NODE	508:4	508:4	4	(
CONDITION	508:5	508:5	4	rowsperstrip > td -> td_imagelength
EXPR	508:5	508:18	5	rowsperstrip > td -> td_imagelength
FIELD	508:5	508:5	6	rowsperstrip
LEAF_NODE	508:5	508:5	7	rowsperstrip
REL_OPERATOR	508:17	508:17	6	>
LEAF_NODE	508:17	508:17	7	>
FIELD	508:18	508:22	6	td -> td_imagelength
LEAF_NODE	508:18	508:18	7	td
LEAF_NODE	508:20	508:20	7	->
LEAF_NODE	508:22	508:22	7	td_imagelength
LEAF_NODE	508:36	508:36	4	)
STATEMENTS	509:2	509:2	4	
EXPR_STATEMENT	509:2	509:33	5	rowsperstrip = td -> td_imagelength ;
EXPR	509:2	509:2	6	rowsperstrip = td -> td_imagelength
ASSIGN	509:2	509:15	7	rowsperstrip = td -> td_imagelength
LVAL	509:2	509:2	8	rowsperstrip
FIELD	509:2	509:2	9	rowsperstrip
LEAF_NODE	509:2	509:2	10	rowsperstrip
ASSIGN_OP	509:14	509:14	8	=
LEAF_NODE	509:14	509:14	9	=
RVAL	509:15	509:15	8	td -> td_imagelength
FIELD	509:15	509:19	9	td -> td_imagelength
LEAF_NODE	509:15	509:15	10	td
LEAF_NODE	509:17	509:17	10	->
LEAF_NODE	509:19	509:19	10	td_imagelength
LEAF_NODE	509:33	509:33	6	;
EXPR_STATEMENT	510:1	510:80	3	stripsperplane = TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip ) ;
EXPR	510:1	510:1	4	stripsperplane = TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
ASSIGN	510:1	510:17	5	stripsperplane = TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
LVAL	510:1	510:1	6	stripsperplane
FIELD	510:1	510:1	7	stripsperplane
LEAF_NODE	510:1	510:1	8	stripsperplane
ASSIGN_OP	510:15	510:15	6	=
LEAF_NODE	510:15	510:15	7	=
RVAL	510:17	510:17	6	TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
FUNCTION_CALL	510:17	510:79	7	TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
CALLEE	510:17	510:17	8	TIFFhowmany_32_maxuint_compat
LEAF_NODE	510:17	510:17	9	TIFFhowmany_32_maxuint_compat
LEAF_NODE	510:46	510:46	8	(
ARGUMENT	510:47	510:47	8	td -> td_imagelength
FIELD	510:47	510:51	9	td -> td_imagelength
LEAF_NODE	510:47	510:47	10	td
LEAF_NODE	510:49	510:49	10	->
LEAF_NODE	510:51	510:51	10	td_imagelength
LEAF_NODE	510:65	510:65	8	,
ARGUMENT	510:67	510:67	8	rowsperstrip
FIELD	510:67	510:67	9	rowsperstrip
LEAF_NODE	510:67	510:67	10	rowsperstrip
LEAF_NODE	510:79	510:79	8	)
LEAF_NODE	510:80	510:80	4	;
EXPR_STATEMENT	511:1	511:36	3	stripinplane = ( strip % stripsperplane ) ;
EXPR	511:1	511:1	4	stripinplane = ( strip % stripsperplane )
ASSIGN	511:1	511:14	5	stripinplane = ( strip % stripsperplane )
LVAL	511:1	511:1	6	stripinplane
FIELD	511:1	511:1	7	stripinplane
LEAF_NODE	511:1	511:1	8	stripinplane
ASSIGN_OP	511:13	511:13	6	=
LEAF_NODE	511:13	511:13	7	=
RVAL	511:14	511:35	6	( strip % stripsperplane )
LEAF_NODE	511:14	511:14	7	(
FIELD	511:15	511:15	7	strip
LEAF_NODE	511:15	511:15	8	strip
LEAF_NODE	511:20	511:20	7	%
FIELD	511:21	511:21	7	stripsperplane
LEAF_NODE	511:21	511:21	8	stripsperplane
LEAF_NODE	511:35	511:35	7	)
LEAF_NODE	511:36	511:36	4	;
SELECTION	512:1	512:14	3	
KEYWORD	512:1	512:1	4	if
LEAF_NODE	512:1	512:1	5	if
LEAF_NODE	512:3	512:3	4	(
CONDITION	512:5	512:5	4	pplane
EXPR	512:5	512:5	5	pplane
FIELD	512:5	512:5	6	pplane
LEAF_NODE	512:5	512:5	7	pplane
LEAF_NODE	512:12	512:12	4	)
STATEMENTS	512:14	512:14	4	
EXPR_STATEMENT	512:14	512:52	5	* pplane = ( uint16 ) ( strip / stripsperplane ) ;
EXPR	512:14	512:14	6	* pplane = ( uint16 ) ( strip / stripsperplane )
ASSIGN	512:14	512:22	7	* pplane = ( uint16 ) ( strip / stripsperplane )
LVAL	512:14	512:14	8	* pplane
UNARY_EXPR	512:14	512:15	9	* pplane
UNARY_OPERATOR	512:14	512:14	10	*
LEAF_NODE	512:14	512:14	11	*
FIELD	512:15	512:15	10	pplane
LEAF_NODE	512:15	512:15	11	pplane
ASSIGN_OP	512:21	512:21	8	=
LEAF_NODE	512:21	512:21	9	=
RVAL	512:22	512:51	8	( uint16 ) ( strip / stripsperplane )
LEAF_NODE	512:22	512:22	9	(
TYPE_NAME	512:23	512:23	9	uint16
LEAF_NODE	512:23	512:23	10	uint16
LEAF_NODE	512:29	512:29	9	)
LEAF_NODE	512:30	512:30	9	(
FIELD	512:31	512:31	9	strip
LEAF_NODE	512:31	512:31	10	strip
LEAF_NODE	512:36	512:36	9	/
FIELD	512:37	512:37	9	stripsperplane
LEAF_NODE	512:37	512:37	10	stripsperplane
LEAF_NODE	512:51	512:51	9	)
LEAF_NODE	512:52	512:52	6	;
EXPR_STATEMENT	513:1	513:50	3	rows = td -> td_imagelength - stripinplane * rowsperstrip ;
EXPR	513:1	513:1	4	rows = td -> td_imagelength - stripinplane * rowsperstrip
ASSIGN	513:1	513:6	5	rows = td -> td_imagelength - stripinplane * rowsperstrip
LVAL	513:1	513:1	6	rows
FIELD	513:1	513:1	7	rows
LEAF_NODE	513:1	513:1	8	rows
ASSIGN_OP	513:5	513:5	6	=
LEAF_NODE	513:5	513:5	7	=
RVAL	513:6	513:38	6	td -> td_imagelength - stripinplane * rowsperstrip
FIELD	513:6	513:10	7	td -> td_imagelength
LEAF_NODE	513:6	513:6	8	td
LEAF_NODE	513:8	513:8	8	->
LEAF_NODE	513:10	513:10	8	td_imagelength
LEAF_NODE	513:24	513:24	7	-
FIELD	513:25	513:25	7	stripinplane
LEAF_NODE	513:25	513:25	8	stripinplane
LEAF_NODE	513:37	513:37	7	*
FIELD	513:38	513:38	7	rowsperstrip
LEAF_NODE	513:38	513:38	8	rowsperstrip
LEAF_NODE	513:50	513:50	4	;
SELECTION	514:1	515:2	3	
KEYWORD	514:1	514:1	4	if
LEAF_NODE	514:1	514:1	5	if
LEAF_NODE	514:4	514:4	4	(
CONDITION	514:5	514:5	4	rows > rowsperstrip
EXPR	514:5	514:10	5	rows > rowsperstrip
FIELD	514:5	514:5	6	rows
LEAF_NODE	514:5	514:5	7	rows
REL_OPERATOR	514:9	514:9	6	>
LEAF_NODE	514:9	514:9	7	>
FIELD	514:10	514:10	6	rowsperstrip
LEAF_NODE	514:10	514:10	7	rowsperstrip
LEAF_NODE	514:22	514:22	4	)
STATEMENTS	515:2	515:2	4	
EXPR_STATEMENT	515:2	515:19	5	rows = rowsperstrip ;
EXPR	515:2	515:2	6	rows = rowsperstrip
ASSIGN	515:2	515:7	7	rows = rowsperstrip
LVAL	515:2	515:2	8	rows
FIELD	515:2	515:2	9	rows
LEAF_NODE	515:2	515:2	10	rows
ASSIGN_OP	515:6	515:6	8	=
LEAF_NODE	515:6	515:6	9	=
RVAL	515:7	515:7	8	rowsperstrip
FIELD	515:7	515:7	9	rowsperstrip
LEAF_NODE	515:7	515:7	10	rowsperstrip
LEAF_NODE	515:19	515:19	6	;
EXPR_STATEMENT	516:1	516:35	3	stripsize = TIFFVStripSize ( tif , rows ) ;
EXPR	516:1	516:1	4	stripsize = TIFFVStripSize ( tif , rows )
ASSIGN	516:1	516:11	5	stripsize = TIFFVStripSize ( tif , rows )
LVAL	516:1	516:1	6	stripsize
FIELD	516:1	516:1	7	stripsize
LEAF_NODE	516:1	516:1	8	stripsize
ASSIGN_OP	516:10	516:10	6	=
LEAF_NODE	516:10	516:10	7	=
RVAL	516:11	516:11	6	TIFFVStripSize ( tif , rows )
FUNCTION_CALL	516:11	516:34	7	TIFFVStripSize ( tif , rows )
CALLEE	516:11	516:11	8	TIFFVStripSize
LEAF_NODE	516:11	516:11	9	TIFFVStripSize
LEAF_NODE	516:25	516:25	8	(
ARGUMENT	516:26	516:26	8	tif
FIELD	516:26	516:26	9	tif
LEAF_NODE	516:26	516:26	10	tif
LEAF_NODE	516:29	516:29	8	,
ARGUMENT	516:30	516:30	8	rows
FIELD	516:30	516:30	9	rows
LEAF_NODE	516:30	516:30	10	rows
LEAF_NODE	516:34	516:34	8	)
LEAF_NODE	516:35	516:35	4	;
SELECTION	517:1	518:2	3	
KEYWORD	517:1	517:1	4	if
LEAF_NODE	517:1	517:1	5	if
LEAF_NODE	517:4	517:4	4	(
CONDITION	517:5	517:5	4	stripsize == 0
EXPR	517:5	517:16	5	stripsize == 0
FIELD	517:5	517:5	6	stripsize
LEAF_NODE	517:5	517:5	7	stripsize
EQ_OPERATOR	517:14	517:14	6	==
LEAF_NODE	517:14	517:14	7	==
FIELD	517:16	517:16	6	0
LEAF_NODE	517:16	517:16	7	0
LEAF_NODE	517:17	517:17	4	)
STATEMENTS	518:2	518:2	4	
JUMP_STATEMENT	518:2	518:24	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	518:2	518:2	6	return
LEAF_NODE	518:2	518:2	7	return
DESTINATION	518:8	518:8	6	( ( tmsize_t ) ( - 1 ) )
EXPR	518:8	518:23	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	518:8	518:8	8	(
LEAF_NODE	518:9	518:9	8	(
TYPE_NAME	518:10	518:10	8	tmsize_t
LEAF_NODE	518:10	518:10	9	tmsize_t
LEAF_NODE	518:18	518:18	8	)
LEAF_NODE	518:19	518:19	8	(
UNARY_EXPR	518:20	518:21	8	- 1
UNARY_OPERATOR	518:20	518:20	9	-
LEAF_NODE	518:20	518:20	10	-
FIELD	518:21	518:21	9	1
LEAF_NODE	518:21	518:21	10	1
LEAF_NODE	518:22	518:22	8	)
LEAF_NODE	518:23	518:23	8	)
LEAF_NODE	518:24	518:24	6	;
JUMP_STATEMENT	519:1	519:17	3	return stripsize ;
KEYWORD	519:1	519:1	4	return
LEAF_NODE	519:1	519:1	5	return
DESTINATION	519:8	519:8	4	stripsize
EXPR	519:8	519:8	5	stripsize
FIELD	519:8	519:8	6	stripsize
LEAF_NODE	519:8	519:8	7	stripsize
LEAF_NODE	519:17	519:17	4	;
LEAF_NODE	520:0	520:0	2	}
FUNCTION_DEF	526:0	563:0	1	
RETURN_TYPE	526:0	526:0	2	tmsize_t
TYPE_NAME	526:0	526:0	3	tmsize_t
LEAF_NODE	526:0	526:0	4	tmsize_t
FUNCTION_NAME	527:0	527:0	2	TIFFReadEncodedStrip
LEAF_NODE	527:0	527:0	3	TIFFReadEncodedStrip
PARAMETER_LIST	527:20	527:70	2	( TIFF * tif , uint32 strip , void * buf , tmsize_t size )
LEAF_NODE	527:20	527:20	3	(
PARAMETER_DECL	527:21	527:27	3	TIFF * tif
TYPE	527:21	527:25	4	TIFF *
TYPE_NAME	527:21	527:21	5	TIFF
LEAF_NODE	527:21	527:21	6	TIFF
POINTER	527:25	527:25	5	*
LEAF_NODE	527:25	527:25	6	*
NAME	527:27	527:27	4	tif
LEAF_NODE	527:27	527:27	5	tif
LEAF_NODE	527:30	527:30	3	,
PARAMETER_DECL	527:32	527:39	3	uint32 strip
TYPE	527:32	527:32	4	uint32
TYPE_NAME	527:32	527:32	5	uint32
LEAF_NODE	527:32	527:32	6	uint32
NAME	527:39	527:39	4	strip
LEAF_NODE	527:39	527:39	5	strip
LEAF_NODE	527:44	527:44	3	,
PARAMETER_DECL	527:46	527:52	3	void * buf
TYPE	527:46	527:50	4	void *
TYPE_NAME	527:46	527:46	5	void
LEAF_NODE	527:46	527:46	6	void
POINTER	527:50	527:50	5	*
LEAF_NODE	527:50	527:50	6	*
NAME	527:52	527:52	4	buf
LEAF_NODE	527:52	527:52	5	buf
LEAF_NODE	527:55	527:55	3	,
PARAMETER_DECL	527:57	527:66	3	tmsize_t size
TYPE	527:57	527:57	4	tmsize_t
TYPE_NAME	527:57	527:57	5	tmsize_t
LEAF_NODE	527:57	527:57	6	tmsize_t
NAME	527:66	527:66	4	size
LEAF_NODE	527:66	527:66	5	size
LEAF_NODE	527:70	527:70	3	)
LEAF_NODE	528:0	528:0	2	{
STATEMENTS	529:1	562:18	2	
LEAF_NODE	529:1	529:1	3	static
SIMPLE_DECL	529:8	529:52	3	const char [ ] module ; module = "TIFFReadEncodedStrip" ;
VAR_DECL	529:8	529:19	4	const char [ ] module ; module = "TIFFReadEncodedStrip"
TYPE	529:8	529:25	5	const char [ ]
TYPE_NAME	529:8	529:14	6	const char
LEAF_NODE	529:8	529:8	7	const
LEAF_NODE	529:14	529:14	7	char
TYPE_SUFFIX	529:25	529:26	6	[ ]
LEAF_NODE	529:25	529:25	7	[
LEAF_NODE	529:26	529:26	7	]
NAME	529:19	529:19	5	module
LEAF_NODE	529:19	529:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	529:19	529:19	5	module = "TIFFReadEncodedStrip"
ASSIGN	529:19	529:30	6	module = "TIFFReadEncodedStrip"
LVAL	529:19	529:19	7	module
NAME	529:19	529:19	8	module
LEAF_NODE	529:19	529:19	9	module
ASSIGN_OP	529:28	529:28	7	=
LEAF_NODE	529:28	529:28	8	=
RVAL	529:30	529:30	7	"TIFFReadEncodedStrip"
FIELD	529:30	529:30	8	"TIFFReadEncodedStrip"
LEAF_NODE	529:30	529:30	9	"TIFFReadEncodedStrip"
LEAF_NODE	529:52	529:52	4	;
SIMPLE_DECL	530:1	530:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	530:1	530:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	530:1	530:15	5	TIFFDirectory *
TYPE_NAME	530:1	530:1	6	TIFFDirectory
LEAF_NODE	530:1	530:1	7	TIFFDirectory
POINTER	530:15	530:15	6	*
LEAF_NODE	530:15	530:15	7	*
NAME	530:16	530:16	5	td
LEAF_NODE	530:16	530:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	530:16	530:16	5	td = & tif -> tif_dir
ASSIGN	530:16	530:21	6	td = & tif -> tif_dir
LVAL	530:16	530:16	7	td
NAME	530:16	530:16	8	td
LEAF_NODE	530:16	530:16	9	td
ASSIGN_OP	530:19	530:19	7	=
LEAF_NODE	530:19	530:19	8	=
RVAL	530:21	530:21	7	& tif -> tif_dir
UNARY_EXPR	530:21	530:22	8	& tif -> tif_dir
UNARY_OPERATOR	530:21	530:21	9	&
LEAF_NODE	530:21	530:21	10	&
FIELD	530:22	530:27	9	tif -> tif_dir
LEAF_NODE	530:22	530:22	10	tif
LEAF_NODE	530:25	530:25	10	->
LEAF_NODE	530:27	530:27	10	tif_dir
LEAF_NODE	530:34	530:34	4	;
SIMPLE_DECL	531:1	531:19	3	tmsize_t stripsize ;
VAR_DECL	531:1	531:10	4	tmsize_t stripsize
TYPE	531:1	531:1	5	tmsize_t
TYPE_NAME	531:1	531:1	6	tmsize_t
LEAF_NODE	531:1	531:1	7	tmsize_t
NAME	531:10	531:10	5	stripsize
LEAF_NODE	531:10	531:10	6	stripsize
LEAF_NODE	531:19	531:19	4	;
SIMPLE_DECL	532:1	532:13	3	uint16 plane ;
VAR_DECL	532:1	532:8	4	uint16 plane
TYPE	532:1	532:1	5	uint16
TYPE_NAME	532:1	532:1	6	uint16
LEAF_NODE	532:1	532:1	7	uint16
NAME	532:8	532:8	5	plane
LEAF_NODE	532:8	532:8	6	plane
LEAF_NODE	532:13	532:13	4	;
EXPR_STATEMENT	534:1	534:63	3	stripsize = TIFFReadEncodedStripGetStripSize ( tif , strip , & plane ) ;
EXPR	534:1	534:1	4	stripsize = TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
ASSIGN	534:1	534:11	5	stripsize = TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
LVAL	534:1	534:1	6	stripsize
FIELD	534:1	534:1	7	stripsize
LEAF_NODE	534:1	534:1	8	stripsize
ASSIGN_OP	534:10	534:10	6	=
LEAF_NODE	534:10	534:10	7	=
RVAL	534:11	534:11	6	TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
FUNCTION_CALL	534:11	534:62	7	TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
CALLEE	534:11	534:11	8	TIFFReadEncodedStripGetStripSize
LEAF_NODE	534:11	534:11	9	TIFFReadEncodedStripGetStripSize
LEAF_NODE	534:43	534:43	8	(
ARGUMENT	534:44	534:44	8	tif
FIELD	534:44	534:44	9	tif
LEAF_NODE	534:44	534:44	10	tif
LEAF_NODE	534:47	534:47	8	,
ARGUMENT	534:49	534:49	8	strip
FIELD	534:49	534:49	9	strip
LEAF_NODE	534:49	534:49	10	strip
LEAF_NODE	534:54	534:54	8	,
ARGUMENT	534:56	534:56	8	& plane
UNARY_EXPR	534:56	534:57	9	& plane
UNARY_OPERATOR	534:56	534:56	10	&
LEAF_NODE	534:56	534:56	11	&
FIELD	534:57	534:57	10	plane
LEAF_NODE	534:57	534:57	11	plane
LEAF_NODE	534:62	534:62	8	)
LEAF_NODE	534:63	534:63	4	;
SELECTION	535:1	536:2	3	
KEYWORD	535:1	535:1	4	if
LEAF_NODE	535:1	535:1	5	if
LEAF_NODE	535:4	535:4	4	(
CONDITION	535:5	535:5	4	stripsize == ( ( tmsize_t ) ( - 1 ) )
EXPR	535:5	535:31	5	stripsize == ( ( tmsize_t ) ( - 1 ) )
FIELD	535:5	535:5	6	stripsize
LEAF_NODE	535:5	535:5	7	stripsize
EQ_OPERATOR	535:14	535:14	6	==
LEAF_NODE	535:14	535:14	7	==
LEAF_NODE	535:16	535:16	6	(
LEAF_NODE	535:17	535:17	6	(
TYPE_NAME	535:18	535:18	6	tmsize_t
LEAF_NODE	535:18	535:18	7	tmsize_t
LEAF_NODE	535:26	535:26	6	)
LEAF_NODE	535:27	535:27	6	(
UNARY_EXPR	535:28	535:29	6	- 1
UNARY_OPERATOR	535:28	535:28	7	-
LEAF_NODE	535:28	535:28	8	-
FIELD	535:29	535:29	7	1
LEAF_NODE	535:29	535:29	8	1
LEAF_NODE	535:30	535:30	6	)
LEAF_NODE	535:31	535:31	6	)
LEAF_NODE	535:32	535:32	4	)
STATEMENTS	536:2	536:2	4	
JUMP_STATEMENT	536:2	536:24	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	536:2	536:2	6	return
LEAF_NODE	536:2	536:2	7	return
DESTINATION	536:8	536:8	6	( ( tmsize_t ) ( - 1 ) )
EXPR	536:8	536:23	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	536:8	536:8	8	(
LEAF_NODE	536:9	536:9	8	(
TYPE_NAME	536:10	536:10	8	tmsize_t
LEAF_NODE	536:10	536:10	9	tmsize_t
LEAF_NODE	536:18	536:18	8	)
LEAF_NODE	536:19	536:19	8	(
UNARY_EXPR	536:20	536:21	8	- 1
UNARY_OPERATOR	536:20	536:20	9	-
LEAF_NODE	536:20	536:20	10	-
FIELD	536:21	536:21	9	1
LEAF_NODE	536:21	536:21	10	1
LEAF_NODE	536:22	536:22	8	)
LEAF_NODE	536:23	536:23	8	)
LEAF_NODE	536:24	536:24	6	;
SELECTION	539:4	543:4	3	
KEYWORD	539:4	539:4	4	if
LEAF_NODE	539:4	539:4	5	if
LEAF_NODE	539:6	539:6	4	(
CONDITION	539:8	539:8	4	td -> td_compression == COMPRESSION_NONE && size != ( tmsize_t ) ( - 1 ) && size >= stripsize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	539:8	539:8	5	td -> td_compression == COMPRESSION_NONE && size != ( tmsize_t ) ( - 1 ) && size >= stripsize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	539:8	540:8	6	td -> td_compression == COMPRESSION_NONE && size != ( tmsize_t ) ( - 1 ) && size >= stripsize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	539:8	539:30	7	td -> td_compression == COMPRESSION_NONE
FIELD	539:8	539:12	8	td -> td_compression
LEAF_NODE	539:8	539:8	9	td
LEAF_NODE	539:10	539:10	9	->
LEAF_NODE	539:12	539:12	9	td_compression
EQ_OPERATOR	539:27	539:27	8	==
LEAF_NODE	539:27	539:27	9	==
FIELD	539:30	539:30	8	COMPRESSION_NONE
LEAF_NODE	539:30	539:30	9	COMPRESSION_NONE
LEAF_NODE	539:47	539:47	7	&&
EXPR	540:8	540:8	7	size != ( tmsize_t ) ( - 1 ) && size >= stripsize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	540:8	540:32	8	size != ( tmsize_t ) ( - 1 ) && size >= stripsize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	540:8	540:27	9	size != ( tmsize_t ) ( - 1 )
FIELD	540:8	540:8	10	size
LEAF_NODE	540:8	540:8	11	size
EQ_OPERATOR	540:12	540:12	10	!=
LEAF_NODE	540:12	540:12	11	!=
LEAF_NODE	540:14	540:14	10	(
TYPE_NAME	540:15	540:15	10	tmsize_t
LEAF_NODE	540:15	540:15	11	tmsize_t
LEAF_NODE	540:23	540:23	10	)
LEAF_NODE	540:24	540:24	10	(
UNARY_EXPR	540:25	540:26	10	- 1
UNARY_OPERATOR	540:25	540:25	11	-
LEAF_NODE	540:25	540:25	12	-
FIELD	540:26	540:26	11	1
LEAF_NODE	540:26	540:26	12	1
LEAF_NODE	540:27	540:27	10	)
LEAF_NODE	540:29	540:29	9	&&
EXPR	540:32	540:32	9	size >= stripsize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	540:32	541:8	10	size >= stripsize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	540:32	540:40	11	size >= stripsize
FIELD	540:32	540:32	12	size
LEAF_NODE	540:32	540:32	13	size
REL_OPERATOR	540:37	540:37	12	>=
LEAF_NODE	540:37	540:37	13	>=
FIELD	540:40	540:40	12	stripsize
LEAF_NODE	540:40	540:40	13	stripsize
LEAF_NODE	540:50	540:50	11	&&
EXPR	541:8	541:8	11	! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	541:8	542:8	12	! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	541:8	541:8	13	! isMapped ( tif )
UNARY_EXPR	541:8	541:9	14	! isMapped ( tif )
UNARY_OPERATOR	541:8	541:8	15	!
LEAF_NODE	541:8	541:8	16	!
FUNCTION_CALL	541:9	541:21	15	isMapped ( tif )
CALLEE	541:9	541:9	16	isMapped
LEAF_NODE	541:9	541:9	17	isMapped
LEAF_NODE	541:17	541:17	16	(
ARGUMENT	541:18	541:18	16	tif
FIELD	541:18	541:18	17	tif
LEAF_NODE	541:18	541:18	18	tif
LEAF_NODE	541:21	541:21	16	)
LEAF_NODE	541:23	541:23	13	&&
EXPR	542:8	542:43	13	( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
LEAF_NODE	542:8	542:8	14	(
LEAF_NODE	542:9	542:9	14	(
FIELD	542:10	542:15	14	tif -> tif_flags
LEAF_NODE	542:10	542:10	15	tif
LEAF_NODE	542:13	542:13	15	->
LEAF_NODE	542:15	542:15	15	tif_flags
LEAF_NODE	542:24	542:24	14	&
FIELD	542:25	542:25	14	TIFF_NOREADRAW
LEAF_NODE	542:25	542:25	15	TIFF_NOREADRAW
LEAF_NODE	542:39	542:39	14	)
EQ_OPERATOR	542:40	542:40	14	==
LEAF_NODE	542:40	542:40	15	==
FIELD	542:42	542:42	14	0
LEAF_NODE	542:42	542:42	15	0
LEAF_NODE	542:43	542:43	14	)
LEAF_NODE	542:45	542:45	4	)
STATEMENTS	543:4	553:4	4	
LEAF_NODE	543:4	543:4	5	{
STATEMENTS	544:8	552:26	5	
SELECTION	544:8	545:12	6	
KEYWORD	544:8	544:8	7	if
LEAF_NODE	544:8	544:8	8	if
LEAF_NODE	544:11	544:11	7	(
CONDITION	544:12	544:12	7	TIFFReadRawStrip1 ( tif , strip , buf , stripsize , module ) != stripsize
EXPR	544:12	544:69	8	TIFFReadRawStrip1 ( tif , strip , buf , stripsize , module ) != stripsize
FUNCTION_CALL	544:12	544:64	9	TIFFReadRawStrip1 ( tif , strip , buf , stripsize , module )
CALLEE	544:12	544:12	10	TIFFReadRawStrip1
LEAF_NODE	544:12	544:12	11	TIFFReadRawStrip1
LEAF_NODE	544:29	544:29	10	(
ARGUMENT	544:30	544:30	10	tif
FIELD	544:30	544:30	11	tif
LEAF_NODE	544:30	544:30	12	tif
LEAF_NODE	544:33	544:33	10	,
ARGUMENT	544:35	544:35	10	strip
FIELD	544:35	544:35	11	strip
LEAF_NODE	544:35	544:35	12	strip
LEAF_NODE	544:40	544:40	10	,
ARGUMENT	544:42	544:42	10	buf
FIELD	544:42	544:42	11	buf
LEAF_NODE	544:42	544:42	12	buf
LEAF_NODE	544:45	544:45	10	,
ARGUMENT	544:47	544:47	10	stripsize
FIELD	544:47	544:47	11	stripsize
LEAF_NODE	544:47	544:47	12	stripsize
LEAF_NODE	544:56	544:56	10	,
ARGUMENT	544:58	544:58	10	module
FIELD	544:58	544:58	11	module
LEAF_NODE	544:58	544:58	12	module
LEAF_NODE	544:64	544:64	10	)
EQ_OPERATOR	544:66	544:66	9	!=
LEAF_NODE	544:66	544:66	10	!=
FIELD	544:69	544:69	9	stripsize
LEAF_NODE	544:69	544:69	10	stripsize
LEAF_NODE	544:78	544:78	7	)
STATEMENTS	545:12	545:12	7	
JUMP_STATEMENT	545:12	545:35	8	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	545:12	545:12	9	return
LEAF_NODE	545:12	545:12	10	return
DESTINATION	545:19	545:19	9	( ( tmsize_t ) ( - 1 ) )
EXPR	545:19	545:34	10	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	545:19	545:19	11	(
LEAF_NODE	545:20	545:20	11	(
TYPE_NAME	545:21	545:21	11	tmsize_t
LEAF_NODE	545:21	545:21	12	tmsize_t
LEAF_NODE	545:29	545:29	11	)
LEAF_NODE	545:30	545:30	11	(
UNARY_EXPR	545:31	545:32	11	- 1
UNARY_OPERATOR	545:31	545:31	12	-
LEAF_NODE	545:31	545:31	13	-
FIELD	545:32	545:32	12	1
LEAF_NODE	545:32	545:32	13	1
LEAF_NODE	545:33	545:33	11	)
LEAF_NODE	545:34	545:34	11	)
LEAF_NODE	545:35	545:35	9	;
SELECTION	547:8	549:12	6	
KEYWORD	547:8	547:8	7	if
LEAF_NODE	547:8	547:8	8	if
LEAF_NODE	547:11	547:11	7	(
CONDITION	547:12	547:12	7	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	547:12	547:12	8	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	547:12	548:12	9	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	547:12	547:12	10	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	547:12	547:13	11	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	547:12	547:12	12	!
LEAF_NODE	547:12	547:12	13	!
FUNCTION_CALL	547:13	547:46	12	isFillOrder ( tif , td -> td_fillorder )
CALLEE	547:13	547:13	13	isFillOrder
LEAF_NODE	547:13	547:13	14	isFillOrder
LEAF_NODE	547:24	547:24	13	(
ARGUMENT	547:25	547:25	13	tif
FIELD	547:25	547:25	14	tif
LEAF_NODE	547:25	547:25	15	tif
LEAF_NODE	547:28	547:28	13	,
ARGUMENT	547:30	547:30	13	td -> td_fillorder
FIELD	547:30	547:34	14	td -> td_fillorder
LEAF_NODE	547:30	547:30	15	td
LEAF_NODE	547:32	547:32	15	->
LEAF_NODE	547:34	547:34	15	td_fillorder
LEAF_NODE	547:46	547:46	13	)
LEAF_NODE	547:48	547:48	10	&&
EXPR	548:12	548:48	10	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	548:12	548:12	11	(
FIELD	548:13	548:18	11	tif -> tif_flags
LEAF_NODE	548:13	548:13	12	tif
LEAF_NODE	548:16	548:16	12	->
LEAF_NODE	548:18	548:18	12	tif_flags
LEAF_NODE	548:28	548:28	11	&
FIELD	548:30	548:30	11	TIFF_NOBITREV
LEAF_NODE	548:30	548:30	12	TIFF_NOBITREV
LEAF_NODE	548:43	548:43	11	)
EQ_OPERATOR	548:45	548:45	11	==
LEAF_NODE	548:45	548:45	12	==
FIELD	548:48	548:48	11	0
LEAF_NODE	548:48	548:48	12	0
LEAF_NODE	548:49	548:49	7	)
STATEMENTS	549:12	549:12	7	
EXPR_STATEMENT	549:12	549:42	8	TIFFReverseBits ( buf , stripsize ) ;
EXPR	549:12	549:12	9	TIFFReverseBits ( buf , stripsize )
FUNCTION_CALL	549:12	549:41	10	TIFFReverseBits ( buf , stripsize )
CALLEE	549:12	549:12	11	TIFFReverseBits
LEAF_NODE	549:12	549:12	12	TIFFReverseBits
LEAF_NODE	549:27	549:27	11	(
ARGUMENT	549:28	549:28	11	buf
FIELD	549:28	549:28	12	buf
LEAF_NODE	549:28	549:28	13	buf
LEAF_NODE	549:31	549:31	11	,
ARGUMENT	549:32	549:32	11	stripsize
FIELD	549:32	549:32	12	stripsize
LEAF_NODE	549:32	549:32	13	stripsize
LEAF_NODE	549:41	549:41	11	)
LEAF_NODE	549:42	549:42	9	;
EXPR_STATEMENT	551:8	551:49	6	( * tif -> tif_postdecode ) ( tif , buf , stripsize ) ;
EXPR	551:8	551:8	7	( * tif -> tif_postdecode ) ( tif , buf , stripsize )
FUNCTION_CALL	551:8	551:48	8	( * tif -> tif_postdecode ) ( tif , buf , stripsize )
CALLEE	551:8	551:29	9	( * tif -> tif_postdecode )
LEAF_NODE	551:8	551:8	10	(
UNARY_EXPR	551:9	551:10	10	* tif -> tif_postdecode
UNARY_OPERATOR	551:9	551:9	11	*
LEAF_NODE	551:9	551:9	12	*
FIELD	551:10	551:15	11	tif -> tif_postdecode
LEAF_NODE	551:10	551:10	12	tif
LEAF_NODE	551:13	551:13	12	->
LEAF_NODE	551:15	551:15	12	tif_postdecode
LEAF_NODE	551:29	551:29	10	)
LEAF_NODE	551:30	551:30	9	(
ARGUMENT	551:31	551:31	9	tif
FIELD	551:31	551:31	10	tif
LEAF_NODE	551:31	551:31	11	tif
LEAF_NODE	551:34	551:34	9	,
ARGUMENT	551:35	551:35	9	buf
FIELD	551:35	551:35	10	buf
LEAF_NODE	551:35	551:35	11	buf
LEAF_NODE	551:38	551:38	9	,
ARGUMENT	551:39	551:39	9	stripsize
FIELD	551:39	551:39	10	stripsize
LEAF_NODE	551:39	551:39	11	stripsize
LEAF_NODE	551:48	551:48	9	)
LEAF_NODE	551:49	551:49	7	;
LEAF_NODE	552:8	552:8	6	return
LEAF_NODE	552:15	552:15	6	(
LEAF_NODE	552:16	552:16	6	stripsize
LEAF_NODE	552:25	552:25	6	)
LEAF_NODE	552:26	552:26	6	;
LEAF_NODE	553:4	553:4	5	}
SELECTION	555:1	556:2	3	
KEYWORD	555:1	555:1	4	if
LEAF_NODE	555:1	555:1	5	if
LEAF_NODE	555:4	555:4	4	(
CONDITION	555:5	555:5	4	( size != ( tmsize_t ) ( - 1 ) ) && ( size < stripsize )
EXPR	555:5	555:5	5	( size != ( tmsize_t ) ( - 1 ) ) && ( size < stripsize )
AND	555:5	555:29	6	( size != ( tmsize_t ) ( - 1 ) ) && ( size < stripsize )
EXPR	555:5	555:26	7	( size != ( tmsize_t ) ( - 1 ) )
LEAF_NODE	555:5	555:5	8	(
FIELD	555:6	555:6	8	size
LEAF_NODE	555:6	555:6	9	size
EQ_OPERATOR	555:10	555:10	8	!=
LEAF_NODE	555:10	555:10	9	!=
LEAF_NODE	555:12	555:12	8	(
TYPE_NAME	555:13	555:13	8	tmsize_t
LEAF_NODE	555:13	555:13	9	tmsize_t
LEAF_NODE	555:21	555:21	8	)
LEAF_NODE	555:22	555:22	8	(
UNARY_EXPR	555:23	555:24	8	- 1
UNARY_OPERATOR	555:23	555:23	9	-
LEAF_NODE	555:23	555:23	10	-
FIELD	555:24	555:24	9	1
LEAF_NODE	555:24	555:24	10	1
LEAF_NODE	555:25	555:25	8	)
LEAF_NODE	555:26	555:26	8	)
LEAF_NODE	555:27	555:27	7	&&
EXPR	555:29	555:44	7	( size < stripsize )
LEAF_NODE	555:29	555:29	8	(
FIELD	555:30	555:30	8	size
LEAF_NODE	555:30	555:30	9	size
REL_OPERATOR	555:34	555:34	8	<
LEAF_NODE	555:34	555:34	9	<
FIELD	555:35	555:35	8	stripsize
LEAF_NODE	555:35	555:35	9	stripsize
LEAF_NODE	555:44	555:44	8	)
LEAF_NODE	555:45	555:45	4	)
STATEMENTS	556:2	556:2	4	
EXPR_STATEMENT	556:2	556:16	5	stripsize = size ;
EXPR	556:2	556:2	6	stripsize = size
ASSIGN	556:2	556:12	7	stripsize = size
LVAL	556:2	556:2	8	stripsize
FIELD	556:2	556:2	9	stripsize
LEAF_NODE	556:2	556:2	10	stripsize
ASSIGN_OP	556:11	556:11	8	=
LEAF_NODE	556:11	556:11	9	=
RVAL	556:12	556:12	8	size
FIELD	556:12	556:12	9	size
LEAF_NODE	556:12	556:12	10	size
LEAF_NODE	556:16	556:16	6	;
SELECTION	557:1	558:2	3	
KEYWORD	557:1	557:1	4	if
LEAF_NODE	557:1	557:1	5	if
LEAF_NODE	557:4	557:4	4	(
CONDITION	557:5	557:5	4	! TIFFFillStrip ( tif , strip )
EXPR	557:5	557:5	5	! TIFFFillStrip ( tif , strip )
UNARY_EXPR	557:5	557:6	6	! TIFFFillStrip ( tif , strip )
UNARY_OPERATOR	557:5	557:5	7	!
LEAF_NODE	557:5	557:5	8	!
FUNCTION_CALL	557:6	557:29	7	TIFFFillStrip ( tif , strip )
CALLEE	557:6	557:6	8	TIFFFillStrip
LEAF_NODE	557:6	557:6	9	TIFFFillStrip
LEAF_NODE	557:19	557:19	8	(
ARGUMENT	557:20	557:20	8	tif
FIELD	557:20	557:20	9	tif
LEAF_NODE	557:20	557:20	10	tif
LEAF_NODE	557:23	557:23	8	,
ARGUMENT	557:24	557:24	8	strip
FIELD	557:24	557:24	9	strip
LEAF_NODE	557:24	557:24	10	strip
LEAF_NODE	557:29	557:29	8	)
LEAF_NODE	557:30	557:30	4	)
STATEMENTS	558:2	558:2	4	
JUMP_STATEMENT	558:2	558:24	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	558:2	558:2	6	return
LEAF_NODE	558:2	558:2	7	return
DESTINATION	558:8	558:8	6	( ( tmsize_t ) ( - 1 ) )
EXPR	558:8	558:23	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	558:8	558:8	8	(
LEAF_NODE	558:9	558:9	8	(
TYPE_NAME	558:10	558:10	8	tmsize_t
LEAF_NODE	558:10	558:10	9	tmsize_t
LEAF_NODE	558:18	558:18	8	)
LEAF_NODE	558:19	558:19	8	(
UNARY_EXPR	558:20	558:21	8	- 1
UNARY_OPERATOR	558:20	558:20	9	-
LEAF_NODE	558:20	558:20	10	-
FIELD	558:21	558:21	9	1
LEAF_NODE	558:21	558:21	10	1
LEAF_NODE	558:22	558:22	8	)
LEAF_NODE	558:23	558:23	8	)
LEAF_NODE	558:24	558:24	6	;
SELECTION	559:1	560:2	3	
KEYWORD	559:1	559:1	4	if
LEAF_NODE	559:1	559:1	5	if
LEAF_NODE	559:4	559:4	4	(
CONDITION	559:5	559:5	4	( * tif -> tif_decodestrip ) ( tif , buf , stripsize , plane ) <= 0
EXPR	559:5	559:55	5	( * tif -> tif_decodestrip ) ( tif , buf , stripsize , plane ) <= 0
FUNCTION_CALL	559:5	559:52	6	( * tif -> tif_decodestrip ) ( tif , buf , stripsize , plane )
CALLEE	559:5	559:27	7	( * tif -> tif_decodestrip )
LEAF_NODE	559:5	559:5	8	(
UNARY_EXPR	559:6	559:7	8	* tif -> tif_decodestrip
UNARY_OPERATOR	559:6	559:6	9	*
LEAF_NODE	559:6	559:6	10	*
FIELD	559:7	559:12	9	tif -> tif_decodestrip
LEAF_NODE	559:7	559:7	10	tif
LEAF_NODE	559:10	559:10	10	->
LEAF_NODE	559:12	559:12	10	tif_decodestrip
LEAF_NODE	559:27	559:27	8	)
LEAF_NODE	559:28	559:28	7	(
ARGUMENT	559:29	559:29	7	tif
FIELD	559:29	559:29	8	tif
LEAF_NODE	559:29	559:29	9	tif
LEAF_NODE	559:32	559:32	7	,
ARGUMENT	559:33	559:33	7	buf
FIELD	559:33	559:33	8	buf
LEAF_NODE	559:33	559:33	9	buf
LEAF_NODE	559:36	559:36	7	,
ARGUMENT	559:37	559:37	7	stripsize
FIELD	559:37	559:37	8	stripsize
LEAF_NODE	559:37	559:37	9	stripsize
LEAF_NODE	559:46	559:46	7	,
ARGUMENT	559:47	559:47	7	plane
FIELD	559:47	559:47	8	plane
LEAF_NODE	559:47	559:47	9	plane
LEAF_NODE	559:52	559:52	7	)
REL_OPERATOR	559:53	559:53	6	<=
LEAF_NODE	559:53	559:53	7	<=
FIELD	559:55	559:55	6	0
LEAF_NODE	559:55	559:55	7	0
LEAF_NODE	559:56	559:56	4	)
STATEMENTS	560:2	560:2	4	
JUMP_STATEMENT	560:2	560:24	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	560:2	560:2	6	return
LEAF_NODE	560:2	560:2	7	return
DESTINATION	560:8	560:8	6	( ( tmsize_t ) ( - 1 ) )
EXPR	560:8	560:23	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	560:8	560:8	8	(
LEAF_NODE	560:9	560:9	8	(
TYPE_NAME	560:10	560:10	8	tmsize_t
LEAF_NODE	560:10	560:10	9	tmsize_t
LEAF_NODE	560:18	560:18	8	)
LEAF_NODE	560:19	560:19	8	(
UNARY_EXPR	560:20	560:21	8	- 1
UNARY_OPERATOR	560:20	560:20	9	-
LEAF_NODE	560:20	560:20	10	-
FIELD	560:21	560:21	9	1
LEAF_NODE	560:21	560:21	10	1
LEAF_NODE	560:22	560:22	8	)
LEAF_NODE	560:23	560:23	8	)
LEAF_NODE	560:24	560:24	6	;
EXPR_STATEMENT	561:1	561:42	3	( * tif -> tif_postdecode ) ( tif , buf , stripsize ) ;
EXPR	561:1	561:1	4	( * tif -> tif_postdecode ) ( tif , buf , stripsize )
FUNCTION_CALL	561:1	561:41	5	( * tif -> tif_postdecode ) ( tif , buf , stripsize )
CALLEE	561:1	561:22	6	( * tif -> tif_postdecode )
LEAF_NODE	561:1	561:1	7	(
UNARY_EXPR	561:2	561:3	7	* tif -> tif_postdecode
UNARY_OPERATOR	561:2	561:2	8	*
LEAF_NODE	561:2	561:2	9	*
FIELD	561:3	561:8	8	tif -> tif_postdecode
LEAF_NODE	561:3	561:3	9	tif
LEAF_NODE	561:6	561:6	9	->
LEAF_NODE	561:8	561:8	9	tif_postdecode
LEAF_NODE	561:22	561:22	7	)
LEAF_NODE	561:23	561:23	6	(
ARGUMENT	561:24	561:24	6	tif
FIELD	561:24	561:24	7	tif
LEAF_NODE	561:24	561:24	8	tif
LEAF_NODE	561:27	561:27	6	,
ARGUMENT	561:28	561:28	6	buf
FIELD	561:28	561:28	7	buf
LEAF_NODE	561:28	561:28	8	buf
LEAF_NODE	561:31	561:31	6	,
ARGUMENT	561:32	561:32	6	stripsize
FIELD	561:32	561:32	7	stripsize
LEAF_NODE	561:32	561:32	8	stripsize
LEAF_NODE	561:41	561:41	6	)
LEAF_NODE	561:42	561:42	4	;
LEAF_NODE	562:1	562:1	3	return
LEAF_NODE	562:7	562:7	3	(
LEAF_NODE	562:8	562:8	3	stripsize
LEAF_NODE	562:17	562:17	3	)
LEAF_NODE	562:18	562:18	3	;
LEAF_NODE	563:0	563:0	2	}
FUNCTION_DEF	571:0	606:0	1	
RETURN_TYPE	571:0	571:0	2	tmsize_t
TYPE_NAME	571:0	571:0	3	tmsize_t
LEAF_NODE	571:0	571:0	4	tmsize_t
FUNCTION_NAME	572:0	572:0	2	_TIFFReadEncodedStripAndAllocBuffer
LEAF_NODE	572:0	572:0	3	_TIFFReadEncodedStripAndAllocBuffer
PARAMETER_LIST	572:35	574:57	2	( TIFF * tif , uint32 strip , void * * buf , tmsize_t bufsizetoalloc , tmsize_t size_to_read )
LEAF_NODE	572:35	572:35	3	(
PARAMETER_DECL	572:36	572:42	3	TIFF * tif
TYPE	572:36	572:40	4	TIFF *
TYPE_NAME	572:36	572:36	5	TIFF
LEAF_NODE	572:36	572:36	6	TIFF
POINTER	572:40	572:40	5	*
LEAF_NODE	572:40	572:40	6	*
NAME	572:42	572:42	4	tif
LEAF_NODE	572:42	572:42	5	tif
LEAF_NODE	572:45	572:45	3	,
PARAMETER_DECL	572:47	572:54	3	uint32 strip
TYPE	572:47	572:47	4	uint32
TYPE_NAME	572:47	572:47	5	uint32
LEAF_NODE	572:47	572:47	6	uint32
NAME	572:54	572:54	4	strip
LEAF_NODE	572:54	572:54	5	strip
LEAF_NODE	572:59	572:59	3	,
PARAMETER_DECL	573:36	573:43	3	void * * buf
TYPE	573:36	573:41	4	void * *
TYPE_NAME	573:36	573:36	5	void
LEAF_NODE	573:36	573:36	6	void
POINTER	573:41	573:42	5	* *
LEAF_NODE	573:41	573:41	6	*
LEAF_NODE	573:42	573:42	6	*
NAME	573:43	573:43	4	buf
LEAF_NODE	573:43	573:43	5	buf
LEAF_NODE	573:46	573:46	3	,
PARAMETER_DECL	573:48	573:57	3	tmsize_t bufsizetoalloc
TYPE	573:48	573:48	4	tmsize_t
TYPE_NAME	573:48	573:48	5	tmsize_t
LEAF_NODE	573:48	573:48	6	tmsize_t
NAME	573:57	573:57	4	bufsizetoalloc
LEAF_NODE	573:57	573:57	5	bufsizetoalloc
LEAF_NODE	573:71	573:71	3	,
PARAMETER_DECL	574:36	574:45	3	tmsize_t size_to_read
TYPE	574:36	574:36	4	tmsize_t
TYPE_NAME	574:36	574:36	5	tmsize_t
LEAF_NODE	574:36	574:36	6	tmsize_t
NAME	574:45	574:45	4	size_to_read
LEAF_NODE	574:45	574:45	5	size_to_read
LEAF_NODE	574:57	574:57	3	)
LEAF_NODE	575:0	575:0	2	{
STATEMENTS	576:4	603:26	2	
SIMPLE_DECL	576:4	576:27	3	tmsize_t this_stripsize ;
VAR_DECL	576:4	576:13	4	tmsize_t this_stripsize
TYPE	576:4	576:4	5	tmsize_t
TYPE_NAME	576:4	576:4	6	tmsize_t
LEAF_NODE	576:4	576:4	7	tmsize_t
NAME	576:13	576:13	5	this_stripsize
LEAF_NODE	576:13	576:13	6	this_stripsize
LEAF_NODE	576:27	576:27	4	;
SIMPLE_DECL	577:4	577:16	3	uint16 plane ;
VAR_DECL	577:4	577:11	4	uint16 plane
TYPE	577:4	577:4	5	uint16
TYPE_NAME	577:4	577:4	6	uint16
LEAF_NODE	577:4	577:4	7	uint16
NAME	577:11	577:11	5	plane
LEAF_NODE	577:11	577:11	6	plane
LEAF_NODE	577:16	577:16	4	;
SELECTION	579:4	580:4	3	
KEYWORD	579:4	579:4	4	if
LEAF_NODE	579:4	579:4	5	if
LEAF_NODE	579:6	579:6	4	(
CONDITION	579:8	579:8	4	* buf != NULL
EXPR	579:8	579:16	5	* buf != NULL
UNARY_EXPR	579:8	579:9	6	* buf
UNARY_OPERATOR	579:8	579:8	7	*
LEAF_NODE	579:8	579:8	8	*
FIELD	579:9	579:9	7	buf
LEAF_NODE	579:9	579:9	8	buf
EQ_OPERATOR	579:13	579:13	6	!=
LEAF_NODE	579:13	579:13	7	!=
FIELD	579:16	579:16	6	NULL
LEAF_NODE	579:16	579:16	7	NULL
LEAF_NODE	579:21	579:21	4	)
STATEMENTS	580:4	582:4	4	
LEAF_NODE	580:4	580:4	5	{
STATEMENTS	581:8	581:8	5	
JUMP_STATEMENT	581:8	581:67	6	return TIFFReadEncodedStrip ( tif , strip , * buf , size_to_read ) ;
KEYWORD	581:8	581:8	7	return
LEAF_NODE	581:8	581:8	8	return
DESTINATION	581:15	581:15	7	TIFFReadEncodedStrip ( tif , strip , * buf , size_to_read )
EXPR	581:15	581:15	8	TIFFReadEncodedStrip ( tif , strip , * buf , size_to_read )
FUNCTION_CALL	581:15	581:66	9	TIFFReadEncodedStrip ( tif , strip , * buf , size_to_read )
CALLEE	581:15	581:15	10	TIFFReadEncodedStrip
LEAF_NODE	581:15	581:15	11	TIFFReadEncodedStrip
LEAF_NODE	581:35	581:35	10	(
ARGUMENT	581:36	581:36	10	tif
FIELD	581:36	581:36	11	tif
LEAF_NODE	581:36	581:36	12	tif
LEAF_NODE	581:39	581:39	10	,
ARGUMENT	581:41	581:41	10	strip
FIELD	581:41	581:41	11	strip
LEAF_NODE	581:41	581:41	12	strip
LEAF_NODE	581:46	581:46	10	,
ARGUMENT	581:48	581:48	10	* buf
UNARY_EXPR	581:48	581:49	11	* buf
UNARY_OPERATOR	581:48	581:48	12	*
LEAF_NODE	581:48	581:48	13	*
FIELD	581:49	581:49	12	buf
LEAF_NODE	581:49	581:49	13	buf
LEAF_NODE	581:52	581:52	10	,
ARGUMENT	581:54	581:54	10	size_to_read
FIELD	581:54	581:54	11	size_to_read
LEAF_NODE	581:54	581:54	12	size_to_read
LEAF_NODE	581:66	581:66	10	)
LEAF_NODE	581:67	581:67	7	;
LEAF_NODE	582:4	582:4	5	}
EXPR_STATEMENT	584:4	584:71	3	this_stripsize = TIFFReadEncodedStripGetStripSize ( tif , strip , & plane ) ;
EXPR	584:4	584:4	4	this_stripsize = TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
ASSIGN	584:4	584:19	5	this_stripsize = TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
LVAL	584:4	584:4	6	this_stripsize
FIELD	584:4	584:4	7	this_stripsize
LEAF_NODE	584:4	584:4	8	this_stripsize
ASSIGN_OP	584:18	584:18	6	=
LEAF_NODE	584:18	584:18	7	=
RVAL	584:19	584:19	6	TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
FUNCTION_CALL	584:19	584:70	7	TIFFReadEncodedStripGetStripSize ( tif , strip , & plane )
CALLEE	584:19	584:19	8	TIFFReadEncodedStripGetStripSize
LEAF_NODE	584:19	584:19	9	TIFFReadEncodedStripGetStripSize
LEAF_NODE	584:51	584:51	8	(
ARGUMENT	584:52	584:52	8	tif
FIELD	584:52	584:52	9	tif
LEAF_NODE	584:52	584:52	10	tif
LEAF_NODE	584:55	584:55	8	,
ARGUMENT	584:57	584:57	8	strip
FIELD	584:57	584:57	9	strip
LEAF_NODE	584:57	584:57	10	strip
LEAF_NODE	584:62	584:62	8	,
ARGUMENT	584:64	584:64	8	& plane
UNARY_EXPR	584:64	584:65	9	& plane
UNARY_OPERATOR	584:64	584:64	10	&
LEAF_NODE	584:64	584:64	11	&
FIELD	584:65	584:65	10	plane
LEAF_NODE	584:65	584:65	11	plane
LEAF_NODE	584:70	584:70	8	)
LEAF_NODE	584:71	584:71	4	;
SELECTION	585:4	586:12	3	
KEYWORD	585:4	585:4	4	if
LEAF_NODE	585:4	585:4	5	if
LEAF_NODE	585:7	585:7	4	(
CONDITION	585:8	585:8	4	this_stripsize == ( ( tmsize_t ) ( - 1 ) )
EXPR	585:8	585:39	5	this_stripsize == ( ( tmsize_t ) ( - 1 ) )
FIELD	585:8	585:8	6	this_stripsize
LEAF_NODE	585:8	585:8	7	this_stripsize
EQ_OPERATOR	585:22	585:22	6	==
LEAF_NODE	585:22	585:22	7	==
LEAF_NODE	585:24	585:24	6	(
LEAF_NODE	585:25	585:25	6	(
TYPE_NAME	585:26	585:26	6	tmsize_t
LEAF_NODE	585:26	585:26	7	tmsize_t
LEAF_NODE	585:34	585:34	6	)
LEAF_NODE	585:35	585:35	6	(
UNARY_EXPR	585:36	585:37	6	- 1
UNARY_OPERATOR	585:36	585:36	7	-
LEAF_NODE	585:36	585:36	8	-
FIELD	585:37	585:37	7	1
LEAF_NODE	585:37	585:37	8	1
LEAF_NODE	585:38	585:38	6	)
LEAF_NODE	585:39	585:39	6	)
LEAF_NODE	585:40	585:40	4	)
STATEMENTS	586:12	586:12	4	
JUMP_STATEMENT	586:12	586:34	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	586:12	586:12	6	return
LEAF_NODE	586:12	586:12	7	return
DESTINATION	586:18	586:18	6	( ( tmsize_t ) ( - 1 ) )
EXPR	586:18	586:33	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	586:18	586:18	8	(
LEAF_NODE	586:19	586:19	8	(
TYPE_NAME	586:20	586:20	8	tmsize_t
LEAF_NODE	586:20	586:20	9	tmsize_t
LEAF_NODE	586:28	586:28	8	)
LEAF_NODE	586:29	586:29	8	(
UNARY_EXPR	586:30	586:31	8	- 1
UNARY_OPERATOR	586:30	586:30	9	-
LEAF_NODE	586:30	586:30	10	-
FIELD	586:31	586:31	9	1
LEAF_NODE	586:31	586:31	10	1
LEAF_NODE	586:32	586:32	8	)
LEAF_NODE	586:33	586:33	8	)
LEAF_NODE	586:34	586:34	6	;
SELECTION	588:4	589:12	3	
KEYWORD	588:4	588:4	4	if
LEAF_NODE	588:4	588:4	5	if
LEAF_NODE	588:7	588:7	4	(
CONDITION	588:8	588:8	4	( size_to_read != ( tmsize_t ) ( - 1 ) ) && ( size_to_read < this_stripsize )
EXPR	588:8	588:8	5	( size_to_read != ( tmsize_t ) ( - 1 ) ) && ( size_to_read < this_stripsize )
AND	588:8	588:40	6	( size_to_read != ( tmsize_t ) ( - 1 ) ) && ( size_to_read < this_stripsize )
EXPR	588:8	588:37	7	( size_to_read != ( tmsize_t ) ( - 1 ) )
LEAF_NODE	588:8	588:8	8	(
FIELD	588:9	588:9	8	size_to_read
LEAF_NODE	588:9	588:9	9	size_to_read
EQ_OPERATOR	588:21	588:21	8	!=
LEAF_NODE	588:21	588:21	9	!=
LEAF_NODE	588:23	588:23	8	(
TYPE_NAME	588:24	588:24	8	tmsize_t
LEAF_NODE	588:24	588:24	9	tmsize_t
LEAF_NODE	588:32	588:32	8	)
LEAF_NODE	588:33	588:33	8	(
UNARY_EXPR	588:34	588:35	8	- 1
UNARY_OPERATOR	588:34	588:34	9	-
LEAF_NODE	588:34	588:34	10	-
FIELD	588:35	588:35	9	1
LEAF_NODE	588:35	588:35	10	1
LEAF_NODE	588:36	588:36	8	)
LEAF_NODE	588:37	588:37	8	)
LEAF_NODE	588:38	588:38	7	&&
EXPR	588:40	588:68	7	( size_to_read < this_stripsize )
LEAF_NODE	588:40	588:40	8	(
FIELD	588:41	588:41	8	size_to_read
LEAF_NODE	588:41	588:41	9	size_to_read
REL_OPERATOR	588:53	588:53	8	<
LEAF_NODE	588:53	588:53	9	<
FIELD	588:54	588:54	8	this_stripsize
LEAF_NODE	588:54	588:54	9	this_stripsize
LEAF_NODE	588:68	588:68	8	)
LEAF_NODE	588:69	588:69	4	)
STATEMENTS	589:12	589:12	4	
EXPR_STATEMENT	589:12	589:39	5	this_stripsize = size_to_read ;
EXPR	589:12	589:12	6	this_stripsize = size_to_read
ASSIGN	589:12	589:27	7	this_stripsize = size_to_read
LVAL	589:12	589:12	8	this_stripsize
FIELD	589:12	589:12	9	this_stripsize
LEAF_NODE	589:12	589:12	10	this_stripsize
ASSIGN_OP	589:26	589:26	8	=
LEAF_NODE	589:26	589:26	9	=
RVAL	589:27	589:27	8	size_to_read
FIELD	589:27	589:27	9	size_to_read
LEAF_NODE	589:27	589:27	10	size_to_read
LEAF_NODE	589:39	589:39	6	;
SELECTION	590:4	591:12	3	
KEYWORD	590:4	590:4	4	if
LEAF_NODE	590:4	590:4	5	if
LEAF_NODE	590:7	590:7	4	(
CONDITION	590:8	590:8	4	! TIFFFillStrip ( tif , strip )
EXPR	590:8	590:8	5	! TIFFFillStrip ( tif , strip )
UNARY_EXPR	590:8	590:9	6	! TIFFFillStrip ( tif , strip )
UNARY_OPERATOR	590:8	590:8	7	!
LEAF_NODE	590:8	590:8	8	!
FUNCTION_CALL	590:9	590:32	7	TIFFFillStrip ( tif , strip )
CALLEE	590:9	590:9	8	TIFFFillStrip
LEAF_NODE	590:9	590:9	9	TIFFFillStrip
LEAF_NODE	590:22	590:22	8	(
ARGUMENT	590:23	590:23	8	tif
FIELD	590:23	590:23	9	tif
LEAF_NODE	590:23	590:23	10	tif
LEAF_NODE	590:26	590:26	8	,
ARGUMENT	590:27	590:27	8	strip
FIELD	590:27	590:27	9	strip
LEAF_NODE	590:27	590:27	10	strip
LEAF_NODE	590:32	590:32	8	)
LEAF_NODE	590:33	590:33	4	)
STATEMENTS	591:12	591:12	4	
JUMP_STATEMENT	591:12	591:34	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	591:12	591:12	6	return
LEAF_NODE	591:12	591:12	7	return
DESTINATION	591:18	591:18	6	( ( tmsize_t ) ( - 1 ) )
EXPR	591:18	591:33	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	591:18	591:18	8	(
LEAF_NODE	591:19	591:19	8	(
TYPE_NAME	591:20	591:20	8	tmsize_t
LEAF_NODE	591:20	591:20	9	tmsize_t
LEAF_NODE	591:28	591:28	8	)
LEAF_NODE	591:29	591:29	8	(
UNARY_EXPR	591:30	591:31	8	- 1
UNARY_OPERATOR	591:30	591:30	9	-
LEAF_NODE	591:30	591:30	10	-
FIELD	591:31	591:31	9	1
LEAF_NODE	591:31	591:31	10	1
LEAF_NODE	591:32	591:32	8	)
LEAF_NODE	591:33	591:33	8	)
LEAF_NODE	591:34	591:34	6	;
EXPR_STATEMENT	593:4	593:38	3	* buf = _TIFFmalloc ( bufsizetoalloc ) ;
EXPR	593:4	593:4	4	* buf = _TIFFmalloc ( bufsizetoalloc )
ASSIGN	593:4	593:11	5	* buf = _TIFFmalloc ( bufsizetoalloc )
LVAL	593:4	593:4	6	* buf
UNARY_EXPR	593:4	593:5	7	* buf
UNARY_OPERATOR	593:4	593:4	8	*
LEAF_NODE	593:4	593:4	9	*
FIELD	593:5	593:5	8	buf
LEAF_NODE	593:5	593:5	9	buf
ASSIGN_OP	593:9	593:9	6	=
LEAF_NODE	593:9	593:9	7	=
RVAL	593:11	593:11	6	_TIFFmalloc ( bufsizetoalloc )
FUNCTION_CALL	593:11	593:37	7	_TIFFmalloc ( bufsizetoalloc )
CALLEE	593:11	593:11	8	_TIFFmalloc
LEAF_NODE	593:11	593:11	9	_TIFFmalloc
LEAF_NODE	593:22	593:22	8	(
ARGUMENT	593:23	593:23	8	bufsizetoalloc
FIELD	593:23	593:23	9	bufsizetoalloc
LEAF_NODE	593:23	593:23	10	bufsizetoalloc
LEAF_NODE	593:37	593:37	8	)
LEAF_NODE	593:38	593:38	4	;
SELECTION	594:4	594:22	3	
KEYWORD	594:4	594:4	4	if
LEAF_NODE	594:4	594:4	5	if
LEAF_NODE	594:7	594:7	4	(
CONDITION	594:8	594:8	4	* buf == NULL
EXPR	594:8	594:16	5	* buf == NULL
UNARY_EXPR	594:8	594:9	6	* buf
UNARY_OPERATOR	594:8	594:8	7	*
LEAF_NODE	594:8	594:8	8	*
FIELD	594:9	594:9	7	buf
LEAF_NODE	594:9	594:9	8	buf
EQ_OPERATOR	594:13	594:13	6	==
LEAF_NODE	594:13	594:13	7	==
FIELD	594:16	594:16	6	NULL
LEAF_NODE	594:16	594:16	7	NULL
LEAF_NODE	594:20	594:20	4	)
STATEMENTS	594:22	597:4	4	
LEAF_NODE	594:22	594:22	5	{
STATEMENTS	595:12	596:12	5	
EXPR_STATEMENT	595:12	595:93	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "No space for strip buffer" ) ;
EXPR	595:12	595:12	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "No space for strip buffer" )
FUNCTION_CALL	595:12	595:92	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "No space for strip buffer" )
CALLEE	595:12	595:12	9	TIFFErrorExt
LEAF_NODE	595:12	595:12	10	TIFFErrorExt
LEAF_NODE	595:24	595:24	9	(
ARGUMENT	595:25	595:25	9	tif -> tif_clientdata
FIELD	595:25	595:30	10	tif -> tif_clientdata
LEAF_NODE	595:25	595:25	11	tif
LEAF_NODE	595:28	595:28	11	->
LEAF_NODE	595:30	595:30	11	tif_clientdata
LEAF_NODE	595:44	595:44	9	,
ARGUMENT	595:46	595:46	9	TIFFFileName ( tif )
FUNCTION_CALL	595:46	595:62	10	TIFFFileName ( tif )
CALLEE	595:46	595:46	11	TIFFFileName
LEAF_NODE	595:46	595:46	12	TIFFFileName
LEAF_NODE	595:58	595:58	11	(
ARGUMENT	595:59	595:59	11	tif
FIELD	595:59	595:59	12	tif
LEAF_NODE	595:59	595:59	13	tif
LEAF_NODE	595:62	595:62	11	)
LEAF_NODE	595:63	595:63	9	,
ARGUMENT	595:65	595:65	9	"No space for strip buffer"
FIELD	595:65	595:65	10	"No space for strip buffer"
LEAF_NODE	595:65	595:65	11	"No space for strip buffer"
LEAF_NODE	595:92	595:92	9	)
LEAF_NODE	595:93	595:93	7	;
JUMP_STATEMENT	596:12	596:34	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	596:12	596:12	7	return
LEAF_NODE	596:12	596:12	8	return
DESTINATION	596:18	596:18	7	( ( tmsize_t ) ( - 1 ) )
EXPR	596:18	596:33	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	596:18	596:18	9	(
LEAF_NODE	596:19	596:19	9	(
TYPE_NAME	596:20	596:20	9	tmsize_t
LEAF_NODE	596:20	596:20	10	tmsize_t
LEAF_NODE	596:28	596:28	9	)
LEAF_NODE	596:29	596:29	9	(
UNARY_EXPR	596:30	596:31	9	- 1
UNARY_OPERATOR	596:30	596:30	10	-
LEAF_NODE	596:30	596:30	11	-
FIELD	596:31	596:31	10	1
LEAF_NODE	596:31	596:31	11	1
LEAF_NODE	596:32	596:32	9	)
LEAF_NODE	596:33	596:33	9	)
LEAF_NODE	596:34	596:34	7	;
LEAF_NODE	597:4	597:4	5	}
EXPR_STATEMENT	598:4	598:40	3	_TIFFmemset ( * buf , 0 , bufsizetoalloc ) ;
EXPR	598:4	598:4	4	_TIFFmemset ( * buf , 0 , bufsizetoalloc )
FUNCTION_CALL	598:4	598:39	5	_TIFFmemset ( * buf , 0 , bufsizetoalloc )
CALLEE	598:4	598:4	6	_TIFFmemset
LEAF_NODE	598:4	598:4	7	_TIFFmemset
LEAF_NODE	598:15	598:15	6	(
ARGUMENT	598:16	598:16	6	* buf
UNARY_EXPR	598:16	598:17	7	* buf
UNARY_OPERATOR	598:16	598:16	8	*
LEAF_NODE	598:16	598:16	9	*
FIELD	598:17	598:17	8	buf
LEAF_NODE	598:17	598:17	9	buf
LEAF_NODE	598:20	598:20	6	,
ARGUMENT	598:22	598:22	6	0
FIELD	598:22	598:22	7	0
LEAF_NODE	598:22	598:22	8	0
LEAF_NODE	598:23	598:23	6	,
ARGUMENT	598:25	598:25	6	bufsizetoalloc
FIELD	598:25	598:25	7	bufsizetoalloc
LEAF_NODE	598:25	598:25	8	bufsizetoalloc
LEAF_NODE	598:39	598:39	6	)
LEAF_NODE	598:40	598:40	4	;
SELECTION	600:4	601:12	3	
KEYWORD	600:4	600:4	4	if
LEAF_NODE	600:4	600:4	5	if
LEAF_NODE	600:7	600:7	4	(
CONDITION	600:8	600:8	4	( * tif -> tif_decodestrip ) ( tif , * buf , this_stripsize , plane ) <= 0
EXPR	600:8	600:64	5	( * tif -> tif_decodestrip ) ( tif , * buf , this_stripsize , plane ) <= 0
FUNCTION_CALL	600:8	600:61	6	( * tif -> tif_decodestrip ) ( tif , * buf , this_stripsize , plane )
CALLEE	600:8	600:30	7	( * tif -> tif_decodestrip )
LEAF_NODE	600:8	600:8	8	(
UNARY_EXPR	600:9	600:10	8	* tif -> tif_decodestrip
UNARY_OPERATOR	600:9	600:9	9	*
LEAF_NODE	600:9	600:9	10	*
FIELD	600:10	600:15	9	tif -> tif_decodestrip
LEAF_NODE	600:10	600:10	10	tif
LEAF_NODE	600:13	600:13	10	->
LEAF_NODE	600:15	600:15	10	tif_decodestrip
LEAF_NODE	600:30	600:30	8	)
LEAF_NODE	600:31	600:31	7	(
ARGUMENT	600:32	600:32	7	tif
FIELD	600:32	600:32	8	tif
LEAF_NODE	600:32	600:32	9	tif
LEAF_NODE	600:35	600:35	7	,
ARGUMENT	600:36	600:36	7	* buf
UNARY_EXPR	600:36	600:37	8	* buf
UNARY_OPERATOR	600:36	600:36	9	*
LEAF_NODE	600:36	600:36	10	*
FIELD	600:37	600:37	9	buf
LEAF_NODE	600:37	600:37	10	buf
LEAF_NODE	600:40	600:40	7	,
ARGUMENT	600:41	600:41	7	this_stripsize
FIELD	600:41	600:41	8	this_stripsize
LEAF_NODE	600:41	600:41	9	this_stripsize
LEAF_NODE	600:55	600:55	7	,
ARGUMENT	600:56	600:56	7	plane
FIELD	600:56	600:56	8	plane
LEAF_NODE	600:56	600:56	9	plane
LEAF_NODE	600:61	600:61	7	)
REL_OPERATOR	600:62	600:62	6	<=
LEAF_NODE	600:62	600:62	7	<=
FIELD	600:64	600:64	6	0
LEAF_NODE	600:64	600:64	7	0
LEAF_NODE	600:65	600:65	4	)
STATEMENTS	601:12	601:12	4	
JUMP_STATEMENT	601:12	601:34	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	601:12	601:12	6	return
LEAF_NODE	601:12	601:12	7	return
DESTINATION	601:18	601:18	6	( ( tmsize_t ) ( - 1 ) )
EXPR	601:18	601:33	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	601:18	601:18	8	(
LEAF_NODE	601:19	601:19	8	(
TYPE_NAME	601:20	601:20	8	tmsize_t
LEAF_NODE	601:20	601:20	9	tmsize_t
LEAF_NODE	601:28	601:28	8	)
LEAF_NODE	601:29	601:29	8	(
UNARY_EXPR	601:30	601:31	8	- 1
UNARY_OPERATOR	601:30	601:30	9	-
LEAF_NODE	601:30	601:30	10	-
FIELD	601:31	601:31	9	1
LEAF_NODE	601:31	601:31	10	1
LEAF_NODE	601:32	601:32	8	)
LEAF_NODE	601:33	601:33	8	)
LEAF_NODE	601:34	601:34	6	;
EXPR_STATEMENT	602:4	602:51	3	( * tif -> tif_postdecode ) ( tif , * buf , this_stripsize ) ;
EXPR	602:4	602:4	4	( * tif -> tif_postdecode ) ( tif , * buf , this_stripsize )
FUNCTION_CALL	602:4	602:50	5	( * tif -> tif_postdecode ) ( tif , * buf , this_stripsize )
CALLEE	602:4	602:25	6	( * tif -> tif_postdecode )
LEAF_NODE	602:4	602:4	7	(
UNARY_EXPR	602:5	602:6	7	* tif -> tif_postdecode
UNARY_OPERATOR	602:5	602:5	8	*
LEAF_NODE	602:5	602:5	9	*
FIELD	602:6	602:11	8	tif -> tif_postdecode
LEAF_NODE	602:6	602:6	9	tif
LEAF_NODE	602:9	602:9	9	->
LEAF_NODE	602:11	602:11	9	tif_postdecode
LEAF_NODE	602:25	602:25	7	)
LEAF_NODE	602:26	602:26	6	(
ARGUMENT	602:27	602:27	6	tif
FIELD	602:27	602:27	7	tif
LEAF_NODE	602:27	602:27	8	tif
LEAF_NODE	602:30	602:30	6	,
ARGUMENT	602:31	602:31	6	* buf
UNARY_EXPR	602:31	602:32	7	* buf
UNARY_OPERATOR	602:31	602:31	8	*
LEAF_NODE	602:31	602:31	9	*
FIELD	602:32	602:32	8	buf
LEAF_NODE	602:32	602:32	9	buf
LEAF_NODE	602:35	602:35	6	,
ARGUMENT	602:36	602:36	6	this_stripsize
FIELD	602:36	602:36	7	this_stripsize
LEAF_NODE	602:36	602:36	8	this_stripsize
LEAF_NODE	602:50	602:50	6	)
LEAF_NODE	602:51	602:51	4	;
LEAF_NODE	603:4	603:4	3	return
LEAF_NODE	603:10	603:10	3	(
LEAF_NODE	603:11	603:11	3	this_stripsize
LEAF_NODE	603:25	603:25	3	)
LEAF_NODE	603:26	603:26	3	;
LEAF_NODE	606:0	606:0	2	}
FUNCTION_DEF	608:0	681:0	1	
RETURN_TYPE	608:0	608:7	2	static tmsize_t
LEAF_NODE	608:0	608:0	3	static
TYPE_NAME	608:7	608:7	3	tmsize_t
LEAF_NODE	608:7	608:7	4	tmsize_t
FUNCTION_NAME	609:0	609:0	2	TIFFReadRawStrip1
LEAF_NODE	609:0	609:0	3	TIFFReadRawStrip1
PARAMETER_LIST	609:17	610:22	2	( TIFF * tif , uint32 strip , void * buf , tmsize_t size , const char * module )
LEAF_NODE	609:17	609:17	3	(
PARAMETER_DECL	609:18	609:24	3	TIFF * tif
TYPE	609:18	609:22	4	TIFF *
TYPE_NAME	609:18	609:18	5	TIFF
LEAF_NODE	609:18	609:18	6	TIFF
POINTER	609:22	609:22	5	*
LEAF_NODE	609:22	609:22	6	*
NAME	609:24	609:24	4	tif
LEAF_NODE	609:24	609:24	5	tif
LEAF_NODE	609:27	609:27	3	,
PARAMETER_DECL	609:29	609:36	3	uint32 strip
TYPE	609:29	609:29	4	uint32
TYPE_NAME	609:29	609:29	5	uint32
LEAF_NODE	609:29	609:29	6	uint32
NAME	609:36	609:36	4	strip
LEAF_NODE	609:36	609:36	5	strip
LEAF_NODE	609:41	609:41	3	,
PARAMETER_DECL	609:43	609:49	3	void * buf
TYPE	609:43	609:47	4	void *
TYPE_NAME	609:43	609:43	5	void
LEAF_NODE	609:43	609:43	6	void
POINTER	609:47	609:47	5	*
LEAF_NODE	609:47	609:47	6	*
NAME	609:49	609:49	4	buf
LEAF_NODE	609:49	609:49	5	buf
LEAF_NODE	609:52	609:52	3	,
PARAMETER_DECL	609:54	609:63	3	tmsize_t size
TYPE	609:54	609:54	4	tmsize_t
TYPE_NAME	609:54	609:54	5	tmsize_t
LEAF_NODE	609:54	609:54	6	tmsize_t
NAME	609:63	609:63	4	size
LEAF_NODE	609:63	609:63	5	size
LEAF_NODE	609:67	609:67	3	,
PARAMETER_DECL	610:4	610:16	3	const char * module
TYPE	610:4	610:14	4	const char *
TYPE_NAME	610:4	610:10	5	const char
LEAF_NODE	610:4	610:4	6	const
LEAF_NODE	610:10	610:10	6	char
POINTER	610:14	610:14	5	*
LEAF_NODE	610:14	610:14	6	*
NAME	610:16	610:16	4	module
LEAF_NODE	610:16	610:16	5	module
LEAF_NODE	610:22	610:22	3	)
LEAF_NODE	611:0	611:0	2	{
STATEMENTS	612:1	680:14	2	
EXPR_STATEMENT	612:1	612:43	3	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 ) ;
EXPR	612:1	612:1	4	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
FUNCTION_CALL	612:1	612:42	5	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
CALLEE	612:1	612:1	6	assert
LEAF_NODE	612:1	612:1	7	assert
LEAF_NODE	612:7	612:7	6	(
ARGUMENT	612:8	612:41	6	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
LEAF_NODE	612:8	612:8	7	(
FIELD	612:9	612:14	7	tif -> tif_flags
LEAF_NODE	612:9	612:9	8	tif
LEAF_NODE	612:12	612:12	8	->
LEAF_NODE	612:14	612:14	8	tif_flags
LEAF_NODE	612:23	612:23	7	&
FIELD	612:24	612:24	7	TIFF_NOREADRAW
LEAF_NODE	612:24	612:24	8	TIFF_NOREADRAW
LEAF_NODE	612:38	612:38	7	)
EQ_OPERATOR	612:39	612:39	7	==
LEAF_NODE	612:39	612:39	8	==
FIELD	612:41	612:41	7	0
LEAF_NODE	612:41	612:41	8	0
LEAF_NODE	612:42	612:42	6	)
LEAF_NODE	612:43	612:43	4	;
SELECTION	613:1	613:21	3	
KEYWORD	613:1	613:1	4	if
LEAF_NODE	613:1	613:1	5	if
LEAF_NODE	613:4	613:4	4	(
CONDITION	613:5	613:5	4	! isMapped ( tif )
EXPR	613:5	613:5	5	! isMapped ( tif )
UNARY_EXPR	613:5	613:6	6	! isMapped ( tif )
UNARY_OPERATOR	613:5	613:5	7	!
LEAF_NODE	613:5	613:5	8	!
FUNCTION_CALL	613:6	613:18	7	isMapped ( tif )
CALLEE	613:6	613:6	8	isMapped
LEAF_NODE	613:6	613:6	9	isMapped
LEAF_NODE	613:14	613:14	8	(
ARGUMENT	613:15	613:15	8	tif
FIELD	613:15	613:15	9	tif
LEAF_NODE	613:15	613:15	10	tif
LEAF_NODE	613:18	613:18	8	)
LEAF_NODE	613:19	613:19	4	)
STATEMENTS	613:21	639:1	4	
LEAF_NODE	613:21	613:21	5	{
STATEMENTS	614:2	623:2	5	
SIMPLE_DECL	614:2	614:13	6	tmsize_t cc ;
VAR_DECL	614:2	614:11	7	tmsize_t cc
TYPE	614:2	614:2	8	tmsize_t
TYPE_NAME	614:2	614:2	9	tmsize_t
LEAF_NODE	614:2	614:2	10	tmsize_t
NAME	614:11	614:11	8	cc
LEAF_NODE	614:11	614:11	9	cc
LEAF_NODE	614:13	614:13	7	;
SELECTION	616:2	616:53	6	
KEYWORD	616:2	616:2	7	if
LEAF_NODE	616:2	616:2	8	if
LEAF_NODE	616:5	616:5	7	(
CONDITION	616:6	616:6	7	! SeekOK ( tif , TIFFGetStrileOffset ( tif , strip ) )
EXPR	616:6	616:6	8	! SeekOK ( tif , TIFFGetStrileOffset ( tif , strip ) )
UNARY_EXPR	616:6	616:7	9	! SeekOK ( tif , TIFFGetStrileOffset ( tif , strip ) )
UNARY_OPERATOR	616:6	616:6	10	!
LEAF_NODE	616:6	616:6	11	!
FUNCTION_CALL	616:7	616:50	10	SeekOK ( tif , TIFFGetStrileOffset ( tif , strip ) )
CALLEE	616:7	616:7	11	SeekOK
LEAF_NODE	616:7	616:7	12	SeekOK
LEAF_NODE	616:13	616:13	11	(
ARGUMENT	616:14	616:14	11	tif
FIELD	616:14	616:14	12	tif
LEAF_NODE	616:14	616:14	13	tif
LEAF_NODE	616:17	616:17	11	,
ARGUMENT	616:19	616:19	11	TIFFGetStrileOffset ( tif , strip )
FUNCTION_CALL	616:19	616:49	12	TIFFGetStrileOffset ( tif , strip )
CALLEE	616:19	616:19	13	TIFFGetStrileOffset
LEAF_NODE	616:19	616:19	14	TIFFGetStrileOffset
LEAF_NODE	616:38	616:38	13	(
ARGUMENT	616:39	616:39	13	tif
FIELD	616:39	616:39	14	tif
LEAF_NODE	616:39	616:39	15	tif
LEAF_NODE	616:42	616:42	13	,
ARGUMENT	616:44	616:44	13	strip
FIELD	616:44	616:44	14	strip
LEAF_NODE	616:44	616:44	15	strip
LEAF_NODE	616:49	616:49	13	)
LEAF_NODE	616:50	616:50	11	)
LEAF_NODE	616:51	616:51	7	)
STATEMENTS	616:53	621:2	7	
LEAF_NODE	616:53	616:53	8	{
STATEMENTS	617:3	620:3	8	
EXPR_STATEMENT	617:3	619:59	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip ) ;
EXPR	617:3	617:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip )
FUNCTION_CALL	617:3	619:58	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip )
CALLEE	617:3	617:3	12	TIFFErrorExt
LEAF_NODE	617:3	617:3	13	TIFFErrorExt
LEAF_NODE	617:15	617:15	12	(
ARGUMENT	617:16	617:16	12	tif -> tif_clientdata
FIELD	617:16	617:21	13	tif -> tif_clientdata
LEAF_NODE	617:16	617:16	14	tif
LEAF_NODE	617:19	617:19	14	->
LEAF_NODE	617:21	617:21	14	tif_clientdata
LEAF_NODE	617:35	617:35	12	,
ARGUMENT	617:37	617:37	12	module
FIELD	617:37	617:37	13	module
LEAF_NODE	617:37	617:37	14	module
LEAF_NODE	617:43	617:43	12	,
ARGUMENT	618:7	618:7	12	"Seek error at scanline %lu, strip %lu"
FIELD	618:7	618:7	13	"Seek error at scanline %lu, strip %lu"
LEAF_NODE	618:7	618:7	14	"Seek error at scanline %lu, strip %lu"
LEAF_NODE	618:46	618:46	12	,
ARGUMENT	619:7	619:23	12	( unsigned long ) tif -> tif_row
LEAF_NODE	619:7	619:7	13	(
TYPE_NAME	619:8	619:17	13	unsigned long
LEAF_NODE	619:8	619:8	14	unsigned
LEAF_NODE	619:17	619:17	14	long
LEAF_NODE	619:21	619:21	13	)
FIELD	619:23	619:28	13	tif -> tif_row
LEAF_NODE	619:23	619:23	14	tif
LEAF_NODE	619:26	619:26	14	->
LEAF_NODE	619:28	619:28	14	tif_row
LEAF_NODE	619:35	619:35	12	,
ARGUMENT	619:37	619:53	12	( unsigned long ) strip
LEAF_NODE	619:37	619:37	13	(
TYPE_NAME	619:38	619:47	13	unsigned long
LEAF_NODE	619:38	619:38	14	unsigned
LEAF_NODE	619:47	619:47	14	long
LEAF_NODE	619:51	619:51	13	)
FIELD	619:53	619:53	13	strip
LEAF_NODE	619:53	619:53	14	strip
LEAF_NODE	619:58	619:58	12	)
LEAF_NODE	619:59	619:59	10	;
JUMP_STATEMENT	620:3	620:26	9	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	620:3	620:3	10	return
LEAF_NODE	620:3	620:3	11	return
DESTINATION	620:10	620:10	10	( ( tmsize_t ) ( - 1 ) )
EXPR	620:10	620:25	11	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	620:10	620:10	12	(
LEAF_NODE	620:11	620:11	12	(
TYPE_NAME	620:12	620:12	12	tmsize_t
LEAF_NODE	620:12	620:12	13	tmsize_t
LEAF_NODE	620:20	620:20	12	)
LEAF_NODE	620:21	620:21	12	(
UNARY_EXPR	620:22	620:23	12	- 1
UNARY_OPERATOR	620:22	620:22	13	-
LEAF_NODE	620:22	620:22	14	-
FIELD	620:23	620:23	13	1
LEAF_NODE	620:23	620:23	14	1
LEAF_NODE	620:24	620:24	12	)
LEAF_NODE	620:25	620:25	12	)
LEAF_NODE	620:26	620:26	10	;
LEAF_NODE	621:2	621:2	8	}
EXPR_STATEMENT	622:2	622:35	6	cc = TIFFReadFile ( tif , buf , size ) ;
EXPR	622:2	622:2	7	cc = TIFFReadFile ( tif , buf , size )
ASSIGN	622:2	622:7	8	cc = TIFFReadFile ( tif , buf , size )
LVAL	622:2	622:2	9	cc
FIELD	622:2	622:2	10	cc
LEAF_NODE	622:2	622:2	11	cc
ASSIGN_OP	622:5	622:5	9	=
LEAF_NODE	622:5	622:5	10	=
RVAL	622:7	622:7	9	TIFFReadFile ( tif , buf , size )
FUNCTION_CALL	622:7	622:34	10	TIFFReadFile ( tif , buf , size )
CALLEE	622:7	622:7	11	TIFFReadFile
LEAF_NODE	622:7	622:7	12	TIFFReadFile
LEAF_NODE	622:19	622:19	11	(
ARGUMENT	622:20	622:20	11	tif
FIELD	622:20	622:20	12	tif
LEAF_NODE	622:20	622:20	13	tif
LEAF_NODE	622:23	622:23	11	,
ARGUMENT	622:25	622:25	11	buf
FIELD	622:25	622:25	12	buf
LEAF_NODE	622:25	622:25	13	buf
LEAF_NODE	622:28	622:28	11	,
ARGUMENT	622:30	622:30	11	size
FIELD	622:30	622:30	12	size
LEAF_NODE	622:30	622:30	13	size
LEAF_NODE	622:34	622:34	11	)
LEAF_NODE	622:35	622:35	7	;
SELECTION	623:2	623:18	6	
KEYWORD	623:2	623:2	7	if
LEAF_NODE	623:2	623:2	8	if
LEAF_NODE	623:5	623:5	7	(
CONDITION	623:6	623:6	7	cc != size
EXPR	623:6	623:12	8	cc != size
FIELD	623:6	623:6	9	cc
LEAF_NODE	623:6	623:6	10	cc
EQ_OPERATOR	623:9	623:9	9	!=
LEAF_NODE	623:9	623:9	10	!=
FIELD	623:12	623:12	9	size
LEAF_NODE	623:12	623:12	10	size
LEAF_NODE	623:16	623:16	7	)
STATEMENTS	623:18	638:2	7	
LEAF_NODE	623:18	623:18	8	{
STATEMENTS	625:3	637:3	8	
EXPR_STATEMENT	625:3	629:33	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at scanline %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) cc , ( unsigned __int64 ) size ) ;
EXPR	625:3	625:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at scanline %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) cc , ( unsigned __int64 ) size )
FUNCTION_CALL	625:3	629:32	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at scanline %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned __int64 ) cc , ( unsigned __int64 ) size )
CALLEE	625:3	625:3	12	TIFFErrorExt
LEAF_NODE	625:3	625:3	13	TIFFErrorExt
LEAF_NODE	625:15	625:15	12	(
ARGUMENT	625:16	625:16	12	tif -> tif_clientdata
FIELD	625:16	625:21	13	tif -> tif_clientdata
LEAF_NODE	625:16	625:16	14	tif
LEAF_NODE	625:19	625:19	14	->
LEAF_NODE	625:21	625:21	14	tif_clientdata
LEAF_NODE	625:35	625:35	12	,
ARGUMENT	625:37	625:37	12	module
FIELD	625:37	625:37	13	module
LEAF_NODE	625:37	625:37	14	module
LEAF_NODE	625:43	625:43	12	,
ARGUMENT	626:2	626:2	12	"Read error at scanline %lu; got %I64u bytes, expected %I64u"
FIELD	626:2	626:2	13	"Read error at scanline %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	626:2	626:2	14	"Read error at scanline %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	626:63	626:63	12	,
ARGUMENT	627:9	627:25	12	( unsigned long ) tif -> tif_row
LEAF_NODE	627:9	627:9	13	(
TYPE_NAME	627:10	627:19	13	unsigned long
LEAF_NODE	627:10	627:10	14	unsigned
LEAF_NODE	627:19	627:19	14	long
LEAF_NODE	627:23	627:23	13	)
FIELD	627:25	627:30	13	tif -> tif_row
LEAF_NODE	627:25	627:25	14	tif
LEAF_NODE	627:28	627:28	14	->
LEAF_NODE	627:30	627:30	14	tif_row
LEAF_NODE	627:37	627:37	12	,
ARGUMENT	628:9	628:28	12	( unsigned __int64 ) cc
LEAF_NODE	628:9	628:9	13	(
TYPE_NAME	628:10	628:19	13	unsigned __int64
LEAF_NODE	628:10	628:10	14	unsigned
LEAF_NODE	628:19	628:19	14	__int64
LEAF_NODE	628:26	628:26	13	)
FIELD	628:28	628:28	13	cc
LEAF_NODE	628:28	628:28	14	cc
LEAF_NODE	628:30	628:30	12	,
ARGUMENT	629:9	629:28	12	( unsigned __int64 ) size
LEAF_NODE	629:9	629:9	13	(
TYPE_NAME	629:10	629:19	13	unsigned __int64
LEAF_NODE	629:10	629:10	14	unsigned
LEAF_NODE	629:19	629:19	14	__int64
LEAF_NODE	629:26	629:26	13	)
FIELD	629:28	629:28	13	size
LEAF_NODE	629:28	629:28	14	size
LEAF_NODE	629:32	629:32	12	)
LEAF_NODE	629:33	629:33	10	;
LEAF_NODE	631:3	631:3	9	TIFFErrorExt
LEAF_NODE	631:15	631:15	9	(
LEAF_NODE	631:16	631:16	9	tif
LEAF_NODE	631:19	631:19	9	->
LEAF_NODE	631:21	631:21	9	tif_clientdata
LEAF_NODE	631:35	631:35	9	,
LEAF_NODE	631:37	631:37	9	module
LEAF_NODE	631:43	631:43	9	,
LEAF_NODE	632:2	632:2	9	"Read error at scanline %lu; got %llu bytes, expected %llu"
LEAF_NODE	632:61	632:61	9	,
LEAF_NODE	633:9	633:9	9	(
LEAF_NODE	633:10	633:10	9	unsigned
LEAF_NODE	633:19	633:19	9	long
LEAF_NODE	633:23	633:23	9	)
LEAF_NODE	633:25	633:25	9	tif
LEAF_NODE	633:28	633:28	9	->
LEAF_NODE	633:30	633:30	9	tif_row
LEAF_NODE	633:37	633:37	9	,
LEAF_NODE	634:9	634:9	9	(
LEAF_NODE	634:10	634:10	9	unsigned
LEAF_NODE	634:19	634:19	9	long
LEAF_NODE	634:24	634:24	9	long
LEAF_NODE	634:28	634:28	9	)
LEAF_NODE	634:30	634:30	9	cc
LEAF_NODE	634:32	634:32	9	,
LEAF_NODE	635:9	635:9	9	(
LEAF_NODE	635:10	635:10	9	unsigned
LEAF_NODE	635:19	635:19	9	long
LEAF_NODE	635:24	635:24	9	long
LEAF_NODE	635:28	635:28	9	)
LEAF_NODE	635:30	635:30	9	size
LEAF_NODE	635:34	635:34	9	)
LEAF_NODE	635:35	635:35	9	;
JUMP_STATEMENT	637:3	637:26	9	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	637:3	637:3	10	return
LEAF_NODE	637:3	637:3	11	return
DESTINATION	637:10	637:10	10	( ( tmsize_t ) ( - 1 ) )
EXPR	637:10	637:25	11	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	637:10	637:10	12	(
LEAF_NODE	637:11	637:11	12	(
TYPE_NAME	637:12	637:12	12	tmsize_t
LEAF_NODE	637:12	637:12	13	tmsize_t
LEAF_NODE	637:20	637:20	12	)
LEAF_NODE	637:21	637:21	12	(
UNARY_EXPR	637:22	637:23	12	- 1
UNARY_OPERATOR	637:22	637:22	13	-
LEAF_NODE	637:22	637:22	14	-
FIELD	637:23	637:23	13	1
LEAF_NODE	637:23	637:23	14	1
LEAF_NODE	637:24	637:24	12	)
LEAF_NODE	637:25	637:25	12	)
LEAF_NODE	637:26	637:26	10	;
LEAF_NODE	638:2	638:2	8	}
LEAF_NODE	639:1	639:1	5	}
SELECTION	639:3	639:8	3	
KEYWORD	639:3	639:3	4	else
LEAF_NODE	639:3	639:3	5	else
STATEMENTS	639:8	679:1	4	
LEAF_NODE	639:8	639:8	5	{
STATEMENTS	640:2	677:2	5	
SIMPLE_DECL	640:2	640:17	6	tmsize_t ma ; ma = 0 ;
VAR_DECL	640:2	640:11	7	tmsize_t ma ; ma = 0
TYPE	640:2	640:2	8	tmsize_t
TYPE_NAME	640:2	640:2	9	tmsize_t
LEAF_NODE	640:2	640:2	10	tmsize_t
NAME	640:11	640:11	8	ma
LEAF_NODE	640:11	640:11	9	ma
LEAF_NODE	0:0	0:0	8	;
INIT	640:11	640:11	8	ma = 0
ASSIGN	640:11	640:16	9	ma = 0
LVAL	640:11	640:11	10	ma
NAME	640:11	640:11	11	ma
LEAF_NODE	640:11	640:11	12	ma
ASSIGN_OP	640:14	640:14	10	=
LEAF_NODE	640:14	640:14	11	=
RVAL	640:16	640:16	10	0
FIELD	640:16	640:16	11	0
LEAF_NODE	640:16	640:16	12	0
LEAF_NODE	640:17	640:17	7	;
SIMPLE_DECL	641:2	641:12	6	tmsize_t n ;
VAR_DECL	641:2	641:11	7	tmsize_t n
TYPE	641:2	641:2	8	tmsize_t
TYPE_NAME	641:2	641:2	9	tmsize_t
LEAF_NODE	641:2	641:2	10	tmsize_t
NAME	641:11	641:11	8	n
LEAF_NODE	641:11	641:11	9	n
LEAF_NODE	641:12	641:12	7	;
SELECTION	642:2	644:16	6	
KEYWORD	642:2	642:2	7	if
LEAF_NODE	642:2	642:2	8	if
LEAF_NODE	642:5	642:5	7	(
CONDITION	642:6	642:6	7	( TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) TIFF_TMSIZE_T_MAX ) || ( ( ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , strip ) ) > tif -> tif_size )
EXPR	642:6	642:6	8	( TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) TIFF_TMSIZE_T_MAX ) || ( ( ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , strip ) ) > tif -> tif_size )
OR	642:6	643:20	9	( TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) TIFF_TMSIZE_T_MAX ) || ( ( ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , strip ) ) > tif -> tif_size )
EXPR	642:6	642:66	10	( TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) TIFF_TMSIZE_T_MAX )
LEAF_NODE	642:6	642:6	11	(
FUNCTION_CALL	642:7	642:37	11	TIFFGetStrileOffset ( tif , strip )
CALLEE	642:7	642:7	12	TIFFGetStrileOffset
LEAF_NODE	642:7	642:7	13	TIFFGetStrileOffset
LEAF_NODE	642:26	642:26	12	(
ARGUMENT	642:27	642:27	12	tif
FIELD	642:27	642:27	13	tif
LEAF_NODE	642:27	642:27	14	tif
LEAF_NODE	642:30	642:30	12	,
ARGUMENT	642:32	642:32	12	strip
FIELD	642:32	642:32	13	strip
LEAF_NODE	642:32	642:32	14	strip
LEAF_NODE	642:37	642:37	12	)
REL_OPERATOR	642:39	642:39	11	>
LEAF_NODE	642:39	642:39	12	>
LEAF_NODE	642:41	642:41	11	(
TYPE_NAME	642:42	642:42	11	uint64
LEAF_NODE	642:42	642:42	12	uint64
LEAF_NODE	642:48	642:48	11	)
FIELD	642:49	642:49	11	TIFF_TMSIZE_T_MAX
LEAF_NODE	642:49	642:49	12	TIFF_TMSIZE_T_MAX
LEAF_NODE	642:66	642:66	11	)
LEAF_NODE	642:67	642:67	10	||
EXPR	643:20	643:81	10	( ( ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , strip ) ) > tif -> tif_size )
LEAF_NODE	643:20	643:20	11	(
LEAF_NODE	643:21	643:21	11	(
ASSIGN	643:22	643:25	11	ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , strip )
LVAL	643:22	643:22	12	ma
FIELD	643:22	643:22	13	ma
LEAF_NODE	643:22	643:22	14	ma
ASSIGN_OP	643:24	643:24	12	=
LEAF_NODE	643:24	643:24	13	=
RVAL	643:25	643:35	12	( tmsize_t ) TIFFGetStrileOffset ( tif , strip )
LEAF_NODE	643:25	643:25	13	(
TYPE_NAME	643:26	643:26	13	tmsize_t
LEAF_NODE	643:26	643:26	14	tmsize_t
LEAF_NODE	643:34	643:34	13	)
FUNCTION_CALL	643:35	643:65	13	TIFFGetStrileOffset ( tif , strip )
CALLEE	643:35	643:35	14	TIFFGetStrileOffset
LEAF_NODE	643:35	643:35	15	TIFFGetStrileOffset
LEAF_NODE	643:54	643:54	14	(
ARGUMENT	643:55	643:55	14	tif
FIELD	643:55	643:55	15	tif
LEAF_NODE	643:55	643:55	16	tif
LEAF_NODE	643:58	643:58	14	,
ARGUMENT	643:60	643:60	14	strip
FIELD	643:60	643:60	15	strip
LEAF_NODE	643:60	643:60	16	strip
LEAF_NODE	643:65	643:65	14	)
LEAF_NODE	643:66	643:66	11	)
REL_OPERATOR	643:67	643:67	11	>
LEAF_NODE	643:67	643:67	12	>
FIELD	643:68	643:73	11	tif -> tif_size
LEAF_NODE	643:68	643:68	12	tif
LEAF_NODE	643:71	643:71	12	->
LEAF_NODE	643:73	643:73	12	tif_size
LEAF_NODE	643:81	643:81	11	)
LEAF_NODE	643:82	643:82	7	)
STATEMENTS	644:16	646:16	7	
LEAF_NODE	644:16	644:16	8	{
STATEMENTS	645:20	645:20	8	
EXPR_STATEMENT	645:20	645:23	9	n = 0 ;
EXPR	645:20	645:20	10	n = 0
ASSIGN	645:20	645:22	11	n = 0
LVAL	645:20	645:20	12	n
FIELD	645:20	645:20	13	n
LEAF_NODE	645:20	645:20	14	n
ASSIGN_OP	645:21	645:21	12	=
LEAF_NODE	645:21	645:21	13	=
RVAL	645:22	645:22	12	0
FIELD	645:22	645:22	13	0
LEAF_NODE	645:22	645:22	14	0
LEAF_NODE	645:23	645:23	10	;
LEAF_NODE	646:16	646:16	8	}
SELECTION	647:16	647:21	6	
KEYWORD	647:16	647:16	7	else
LEAF_NODE	647:16	647:16	8	else
STATEMENTS	647:21	647:21	7	
SELECTION	647:21	648:16	8	
KEYWORD	647:21	647:21	9	if
LEAF_NODE	647:21	647:21	10	if
LEAF_NODE	647:23	647:23	9	(
CONDITION	647:25	647:25	9	ma > TIFF_TMSIZE_T_MAX - size
EXPR	647:25	647:50	10	ma > TIFF_TMSIZE_T_MAX - size
FIELD	647:25	647:25	11	ma
LEAF_NODE	647:25	647:25	12	ma
REL_OPERATOR	647:28	647:28	11	>
LEAF_NODE	647:28	647:28	12	>
FIELD	647:30	647:30	11	TIFF_TMSIZE_T_MAX
LEAF_NODE	647:30	647:30	12	TIFF_TMSIZE_T_MAX
LEAF_NODE	647:48	647:48	11	-
FIELD	647:50	647:50	11	size
LEAF_NODE	647:50	647:50	12	size
LEAF_NODE	647:55	647:55	9	)
STATEMENTS	648:16	650:16	9	
LEAF_NODE	648:16	648:16	10	{
STATEMENTS	649:20	649:20	10	
EXPR_STATEMENT	649:20	649:23	11	n = 0 ;
EXPR	649:20	649:20	12	n = 0
ASSIGN	649:20	649:22	13	n = 0
LVAL	649:20	649:20	14	n
FIELD	649:20	649:20	15	n
LEAF_NODE	649:20	649:20	16	n
ASSIGN_OP	649:21	649:21	14	=
LEAF_NODE	649:21	649:21	15	=
RVAL	649:22	649:22	14	0
FIELD	649:22	649:22	15	0
LEAF_NODE	649:22	649:22	16	0
LEAF_NODE	649:23	649:23	12	;
LEAF_NODE	650:16	650:16	10	}
SELECTION	651:16	652:16	6	
KEYWORD	651:16	651:16	7	else
LEAF_NODE	651:16	651:16	8	else
STATEMENTS	652:16	658:16	7	
LEAF_NODE	652:16	652:16	8	{
STATEMENTS	653:20	656:20	8	
SIMPLE_DECL	653:20	653:39	9	tmsize_t mb ; mb = ma + size ;
VAR_DECL	653:20	653:29	10	tmsize_t mb ; mb = ma + size
TYPE	653:20	653:20	11	tmsize_t
TYPE_NAME	653:20	653:20	12	tmsize_t
LEAF_NODE	653:20	653:20	13	tmsize_t
NAME	653:29	653:29	11	mb
LEAF_NODE	653:29	653:29	12	mb
LEAF_NODE	0:0	0:0	11	;
INIT	653:29	653:29	11	mb = ma + size
ASSIGN	653:29	653:32	12	mb = ma + size
LVAL	653:29	653:29	13	mb
NAME	653:29	653:29	14	mb
LEAF_NODE	653:29	653:29	15	mb
ASSIGN_OP	653:31	653:31	13	=
LEAF_NODE	653:31	653:31	14	=
RVAL	653:32	653:35	13	ma + size
FIELD	653:32	653:32	14	ma
LEAF_NODE	653:32	653:32	15	ma
LEAF_NODE	653:34	653:34	14	+
FIELD	653:35	653:35	14	size
LEAF_NODE	653:35	653:35	15	size
LEAF_NODE	653:39	653:39	10	;
SELECTION	654:20	655:28	9	
KEYWORD	654:20	654:20	10	if
LEAF_NODE	654:20	654:20	11	if
LEAF_NODE	654:23	654:23	10	(
CONDITION	654:24	654:24	10	mb > tif -> tif_size
EXPR	654:24	654:27	11	mb > tif -> tif_size
FIELD	654:24	654:24	12	mb
LEAF_NODE	654:24	654:24	13	mb
REL_OPERATOR	654:26	654:26	12	>
LEAF_NODE	654:26	654:26	13	>
FIELD	654:27	654:32	12	tif -> tif_size
LEAF_NODE	654:27	654:27	13	tif
LEAF_NODE	654:30	654:30	13	->
LEAF_NODE	654:32	654:32	13	tif_size
LEAF_NODE	654:40	654:40	10	)
STATEMENTS	655:28	655:28	10	
EXPR_STATEMENT	655:28	655:46	11	n = tif -> tif_size - ma ;
EXPR	655:28	655:28	12	n = tif -> tif_size - ma
ASSIGN	655:28	655:30	13	n = tif -> tif_size - ma
LVAL	655:28	655:28	14	n
FIELD	655:28	655:28	15	n
LEAF_NODE	655:28	655:28	16	n
ASSIGN_OP	655:29	655:29	14	=
LEAF_NODE	655:29	655:29	15	=
RVAL	655:30	655:44	14	tif -> tif_size - ma
FIELD	655:30	655:35	15	tif -> tif_size
LEAF_NODE	655:30	655:30	16	tif
LEAF_NODE	655:33	655:33	16	->
LEAF_NODE	655:35	655:35	16	tif_size
LEAF_NODE	655:43	655:43	15	-
FIELD	655:44	655:44	15	ma
LEAF_NODE	655:44	655:44	16	ma
LEAF_NODE	655:46	655:46	12	;
SELECTION	656:20	657:28	9	
KEYWORD	656:20	656:20	10	else
LEAF_NODE	656:20	656:20	11	else
STATEMENTS	657:28	657:28	10	
EXPR_STATEMENT	657:28	657:34	11	n = size ;
EXPR	657:28	657:28	12	n = size
ASSIGN	657:28	657:30	13	n = size
LVAL	657:28	657:28	14	n
FIELD	657:28	657:28	15	n
LEAF_NODE	657:28	657:28	16	n
ASSIGN_OP	657:29	657:29	14	=
LEAF_NODE	657:29	657:29	15	=
RVAL	657:30	657:30	14	size
FIELD	657:30	657:30	15	size
LEAF_NODE	657:30	657:30	16	size
LEAF_NODE	657:34	657:34	12	;
LEAF_NODE	658:16	658:16	8	}
SELECTION	659:2	659:15	6	
KEYWORD	659:2	659:2	7	if
LEAF_NODE	659:2	659:2	8	if
LEAF_NODE	659:5	659:5	7	(
CONDITION	659:6	659:6	7	n != size
EXPR	659:6	659:9	8	n != size
FIELD	659:6	659:6	9	n
LEAF_NODE	659:6	659:6	10	n
EQ_OPERATOR	659:7	659:7	9	!=
LEAF_NODE	659:7	659:7	10	!=
FIELD	659:9	659:9	9	size
LEAF_NODE	659:9	659:9	10	size
LEAF_NODE	659:13	659:13	7	)
STATEMENTS	659:15	676:2	7	
LEAF_NODE	659:15	659:15	8	{
STATEMENTS	661:3	675:3	8	
EXPR_STATEMENT	661:3	666:33	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at scanline %lu, strip %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip , ( unsigned __int64 ) n , ( unsigned __int64 ) size ) ;
EXPR	661:3	661:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at scanline %lu, strip %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip , ( unsigned __int64 ) n , ( unsigned __int64 ) size )
FUNCTION_CALL	661:3	666:32	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at scanline %lu, strip %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip , ( unsigned __int64 ) n , ( unsigned __int64 ) size )
CALLEE	661:3	661:3	12	TIFFErrorExt
LEAF_NODE	661:3	661:3	13	TIFFErrorExt
LEAF_NODE	661:15	661:15	12	(
ARGUMENT	661:16	661:16	12	tif -> tif_clientdata
FIELD	661:16	661:21	13	tif -> tif_clientdata
LEAF_NODE	661:16	661:16	14	tif
LEAF_NODE	661:19	661:19	14	->
LEAF_NODE	661:21	661:21	14	tif_clientdata
LEAF_NODE	661:35	661:35	12	,
ARGUMENT	661:37	661:37	12	module
FIELD	661:37	661:37	13	module
LEAF_NODE	661:37	661:37	14	module
LEAF_NODE	661:43	661:43	12	,
ARGUMENT	662:1	662:1	12	"Read error at scanline %lu, strip %lu; got %I64u bytes, expected %I64u"
FIELD	662:1	662:1	13	"Read error at scanline %lu, strip %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	662:1	662:1	14	"Read error at scanline %lu, strip %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	662:73	662:73	12	,
ARGUMENT	663:9	663:25	12	( unsigned long ) tif -> tif_row
LEAF_NODE	663:9	663:9	13	(
TYPE_NAME	663:10	663:19	13	unsigned long
LEAF_NODE	663:10	663:10	14	unsigned
LEAF_NODE	663:19	663:19	14	long
LEAF_NODE	663:23	663:23	13	)
FIELD	663:25	663:30	13	tif -> tif_row
LEAF_NODE	663:25	663:25	14	tif
LEAF_NODE	663:28	663:28	14	->
LEAF_NODE	663:30	663:30	14	tif_row
LEAF_NODE	663:37	663:37	12	,
ARGUMENT	664:9	664:25	12	( unsigned long ) strip
LEAF_NODE	664:9	664:9	13	(
TYPE_NAME	664:10	664:19	13	unsigned long
LEAF_NODE	664:10	664:10	14	unsigned
LEAF_NODE	664:19	664:19	14	long
LEAF_NODE	664:23	664:23	13	)
FIELD	664:25	664:25	13	strip
LEAF_NODE	664:25	664:25	14	strip
LEAF_NODE	664:30	664:30	12	,
ARGUMENT	665:9	665:28	12	( unsigned __int64 ) n
LEAF_NODE	665:9	665:9	13	(
TYPE_NAME	665:10	665:19	13	unsigned __int64
LEAF_NODE	665:10	665:10	14	unsigned
LEAF_NODE	665:19	665:19	14	__int64
LEAF_NODE	665:26	665:26	13	)
FIELD	665:28	665:28	13	n
LEAF_NODE	665:28	665:28	14	n
LEAF_NODE	665:29	665:29	12	,
ARGUMENT	666:9	666:28	12	( unsigned __int64 ) size
LEAF_NODE	666:9	666:9	13	(
TYPE_NAME	666:10	666:19	13	unsigned __int64
LEAF_NODE	666:10	666:10	14	unsigned
LEAF_NODE	666:19	666:19	14	__int64
LEAF_NODE	666:26	666:26	13	)
FIELD	666:28	666:28	13	size
LEAF_NODE	666:28	666:28	14	size
LEAF_NODE	666:32	666:32	12	)
LEAF_NODE	666:33	666:33	10	;
LEAF_NODE	668:3	668:3	9	TIFFErrorExt
LEAF_NODE	668:15	668:15	9	(
LEAF_NODE	668:16	668:16	9	tif
LEAF_NODE	668:19	668:19	9	->
LEAF_NODE	668:21	668:21	9	tif_clientdata
LEAF_NODE	668:35	668:35	9	,
LEAF_NODE	668:37	668:37	9	module
LEAF_NODE	668:43	668:43	9	,
LEAF_NODE	669:1	669:1	9	"Read error at scanline %lu, strip %lu; got %llu bytes, expected %llu"
LEAF_NODE	669:71	669:71	9	,
LEAF_NODE	670:9	670:9	9	(
LEAF_NODE	670:10	670:10	9	unsigned
LEAF_NODE	670:19	670:19	9	long
LEAF_NODE	670:23	670:23	9	)
LEAF_NODE	670:25	670:25	9	tif
LEAF_NODE	670:28	670:28	9	->
LEAF_NODE	670:30	670:30	9	tif_row
LEAF_NODE	670:37	670:37	9	,
LEAF_NODE	671:9	671:9	9	(
LEAF_NODE	671:10	671:10	9	unsigned
LEAF_NODE	671:19	671:19	9	long
LEAF_NODE	671:23	671:23	9	)
LEAF_NODE	671:25	671:25	9	strip
LEAF_NODE	671:30	671:30	9	,
LEAF_NODE	672:9	672:9	9	(
LEAF_NODE	672:10	672:10	9	unsigned
LEAF_NODE	672:19	672:19	9	long
LEAF_NODE	672:24	672:24	9	long
LEAF_NODE	672:28	672:28	9	)
LEAF_NODE	672:30	672:30	9	n
LEAF_NODE	672:31	672:31	9	,
LEAF_NODE	673:9	673:9	9	(
LEAF_NODE	673:10	673:10	9	unsigned
LEAF_NODE	673:19	673:19	9	long
LEAF_NODE	673:24	673:24	9	long
LEAF_NODE	673:28	673:28	9	)
LEAF_NODE	673:30	673:30	9	size
LEAF_NODE	673:34	673:34	9	)
LEAF_NODE	673:35	673:35	9	;
JUMP_STATEMENT	675:3	675:26	9	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	675:3	675:3	10	return
LEAF_NODE	675:3	675:3	11	return
DESTINATION	675:10	675:10	10	( ( tmsize_t ) ( - 1 ) )
EXPR	675:10	675:25	11	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	675:10	675:10	12	(
LEAF_NODE	675:11	675:11	12	(
TYPE_NAME	675:12	675:12	12	tmsize_t
LEAF_NODE	675:12	675:12	13	tmsize_t
LEAF_NODE	675:20	675:20	12	)
LEAF_NODE	675:21	675:21	12	(
UNARY_EXPR	675:22	675:23	12	- 1
UNARY_OPERATOR	675:22	675:22	13	-
LEAF_NODE	675:22	675:22	14	-
FIELD	675:23	675:23	13	1
LEAF_NODE	675:23	675:23	14	1
LEAF_NODE	675:24	675:24	12	)
LEAF_NODE	675:25	675:25	12	)
LEAF_NODE	675:26	675:26	10	;
LEAF_NODE	676:2	676:2	8	}
EXPR_STATEMENT	677:2	678:12	6	_TIFFmemcpy ( buf , tif -> tif_base + ma , size ) ;
EXPR	677:2	677:2	7	_TIFFmemcpy ( buf , tif -> tif_base + ma , size )
FUNCTION_CALL	677:2	678:11	8	_TIFFmemcpy ( buf , tif -> tif_base + ma , size )
CALLEE	677:2	677:2	9	_TIFFmemcpy
LEAF_NODE	677:2	677:2	10	_TIFFmemcpy
LEAF_NODE	677:13	677:13	9	(
ARGUMENT	677:14	677:14	9	buf
FIELD	677:14	677:14	10	buf
LEAF_NODE	677:14	677:14	11	buf
LEAF_NODE	677:17	677:17	9	,
ARGUMENT	677:19	677:35	9	tif -> tif_base + ma
FIELD	677:19	677:24	10	tif -> tif_base
LEAF_NODE	677:19	677:19	11	tif
LEAF_NODE	677:22	677:22	11	->
LEAF_NODE	677:24	677:24	11	tif_base
LEAF_NODE	677:33	677:33	10	+
FIELD	677:35	677:35	10	ma
LEAF_NODE	677:35	677:35	11	ma
LEAF_NODE	677:37	677:37	9	,
ARGUMENT	678:7	678:7	9	size
FIELD	678:7	678:7	10	size
LEAF_NODE	678:7	678:7	11	size
LEAF_NODE	678:11	678:11	9	)
LEAF_NODE	678:12	678:12	7	;
LEAF_NODE	679:1	679:1	5	}
LEAF_NODE	680:1	680:1	3	return
LEAF_NODE	680:8	680:8	3	(
LEAF_NODE	680:9	680:9	3	size
LEAF_NODE	680:13	680:13	3	)
LEAF_NODE	680:14	680:14	3	;
LEAF_NODE	681:0	681:0	2	}
FUNCTION_DEF	683:0	716:0	1	
RETURN_TYPE	683:0	683:7	2	static tmsize_t
LEAF_NODE	683:0	683:0	3	static
TYPE_NAME	683:7	683:7	3	tmsize_t
LEAF_NODE	683:7	683:7	4	tmsize_t
FUNCTION_NAME	684:0	684:0	2	TIFFReadRawStripOrTile2
LEAF_NODE	684:0	684:0	3	TIFFReadRawStripOrTile2
PARAMETER_LIST	684:23	685:57	2	( TIFF * tif , uint32 strip_or_tile , int is_strip , tmsize_t size , const char * module )
LEAF_NODE	684:23	684:23	3	(
PARAMETER_DECL	684:24	684:30	3	TIFF * tif
TYPE	684:24	684:28	4	TIFF *
TYPE_NAME	684:24	684:24	5	TIFF
LEAF_NODE	684:24	684:24	6	TIFF
POINTER	684:28	684:28	5	*
LEAF_NODE	684:28	684:28	6	*
NAME	684:30	684:30	4	tif
LEAF_NODE	684:30	684:30	5	tif
LEAF_NODE	684:33	684:33	3	,
PARAMETER_DECL	684:35	684:42	3	uint32 strip_or_tile
TYPE	684:35	684:35	4	uint32
TYPE_NAME	684:35	684:35	5	uint32
LEAF_NODE	684:35	684:35	6	uint32
NAME	684:42	684:42	4	strip_or_tile
LEAF_NODE	684:42	684:42	5	strip_or_tile
LEAF_NODE	684:55	684:55	3	,
PARAMETER_DECL	684:57	684:61	3	int is_strip
TYPE	684:57	684:57	4	int
TYPE_NAME	684:57	684:57	5	int
LEAF_NODE	684:57	684:57	6	int
NAME	684:61	684:61	4	is_strip
LEAF_NODE	684:61	684:61	5	is_strip
LEAF_NODE	684:69	684:69	3	,
PARAMETER_DECL	685:24	685:33	3	tmsize_t size
TYPE	685:24	685:24	4	tmsize_t
TYPE_NAME	685:24	685:24	5	tmsize_t
LEAF_NODE	685:24	685:24	6	tmsize_t
NAME	685:33	685:33	4	size
LEAF_NODE	685:33	685:33	5	size
LEAF_NODE	685:37	685:37	3	,
PARAMETER_DECL	685:39	685:51	3	const char * module
TYPE	685:39	685:49	4	const char *
TYPE_NAME	685:39	685:45	5	const char
LEAF_NODE	685:39	685:39	6	const
LEAF_NODE	685:45	685:45	6	char
POINTER	685:49	685:49	5	*
LEAF_NODE	685:49	685:49	6	*
NAME	685:51	685:51	4	module
LEAF_NODE	685:51	685:51	5	module
LEAF_NODE	685:57	685:57	3	)
LEAF_NODE	686:0	686:0	2	{
STATEMENTS	687:8	715:21	2	
EXPR_STATEMENT	687:8	687:32	3	assert ( ! isMapped ( tif ) ) ;
EXPR	687:8	687:8	4	assert ( ! isMapped ( tif ) )
FUNCTION_CALL	687:8	687:31	5	assert ( ! isMapped ( tif ) )
CALLEE	687:8	687:8	6	assert
LEAF_NODE	687:8	687:8	7	assert
LEAF_NODE	687:14	687:14	6	(
ARGUMENT	687:16	687:16	6	! isMapped ( tif )
UNARY_EXPR	687:16	687:17	7	! isMapped ( tif )
UNARY_OPERATOR	687:16	687:16	8	!
LEAF_NODE	687:16	687:16	9	!
FUNCTION_CALL	687:17	687:29	8	isMapped ( tif )
CALLEE	687:17	687:17	9	isMapped
LEAF_NODE	687:17	687:17	10	isMapped
LEAF_NODE	687:25	687:25	9	(
ARGUMENT	687:26	687:26	9	tif
FIELD	687:26	687:26	10	tif
LEAF_NODE	687:26	687:26	11	tif
LEAF_NODE	687:29	687:29	9	)
LEAF_NODE	687:31	687:31	6	)
LEAF_NODE	687:32	687:32	4	;
EXPR_STATEMENT	688:8	688:50	3	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 ) ;
EXPR	688:8	688:8	4	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
FUNCTION_CALL	688:8	688:49	5	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
CALLEE	688:8	688:8	6	assert
LEAF_NODE	688:8	688:8	7	assert
LEAF_NODE	688:14	688:14	6	(
ARGUMENT	688:15	688:48	6	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
LEAF_NODE	688:15	688:15	7	(
FIELD	688:16	688:21	7	tif -> tif_flags
LEAF_NODE	688:16	688:16	8	tif
LEAF_NODE	688:19	688:19	8	->
LEAF_NODE	688:21	688:21	8	tif_flags
LEAF_NODE	688:30	688:30	7	&
FIELD	688:31	688:31	7	TIFF_NOREADRAW
LEAF_NODE	688:31	688:31	8	TIFF_NOREADRAW
LEAF_NODE	688:45	688:45	7	)
EQ_OPERATOR	688:46	688:46	7	==
LEAF_NODE	688:46	688:46	8	==
FIELD	688:48	688:48	7	0
LEAF_NODE	688:48	688:48	8	0
LEAF_NODE	688:49	688:49	6	)
LEAF_NODE	688:50	688:50	4	;
SELECTION	690:8	690:67	3	
KEYWORD	690:8	690:8	4	if
LEAF_NODE	690:8	690:8	5	if
LEAF_NODE	690:11	690:11	4	(
CONDITION	690:12	690:12	4	! SeekOK ( tif , TIFFGetStrileOffset ( tif , strip_or_tile ) )
EXPR	690:12	690:12	5	! SeekOK ( tif , TIFFGetStrileOffset ( tif , strip_or_tile ) )
UNARY_EXPR	690:12	690:13	6	! SeekOK ( tif , TIFFGetStrileOffset ( tif , strip_or_tile ) )
UNARY_OPERATOR	690:12	690:12	7	!
LEAF_NODE	690:12	690:12	8	!
FUNCTION_CALL	690:13	690:64	7	SeekOK ( tif , TIFFGetStrileOffset ( tif , strip_or_tile ) )
CALLEE	690:13	690:13	8	SeekOK
LEAF_NODE	690:13	690:13	9	SeekOK
LEAF_NODE	690:19	690:19	8	(
ARGUMENT	690:20	690:20	8	tif
FIELD	690:20	690:20	9	tif
LEAF_NODE	690:20	690:20	10	tif
LEAF_NODE	690:23	690:23	8	,
ARGUMENT	690:25	690:25	8	TIFFGetStrileOffset ( tif , strip_or_tile )
FUNCTION_CALL	690:25	690:63	9	TIFFGetStrileOffset ( tif , strip_or_tile )
CALLEE	690:25	690:25	10	TIFFGetStrileOffset
LEAF_NODE	690:25	690:25	11	TIFFGetStrileOffset
LEAF_NODE	690:44	690:44	10	(
ARGUMENT	690:45	690:45	10	tif
FIELD	690:45	690:45	11	tif
LEAF_NODE	690:45	690:45	12	tif
LEAF_NODE	690:48	690:48	10	,
ARGUMENT	690:50	690:50	10	strip_or_tile
FIELD	690:50	690:50	11	strip_or_tile
LEAF_NODE	690:50	690:50	12	strip_or_tile
LEAF_NODE	690:63	690:63	10	)
LEAF_NODE	690:64	690:64	8	)
LEAF_NODE	690:65	690:65	4	)
STATEMENTS	690:67	707:8	4	
LEAF_NODE	690:67	690:67	5	{
STATEMENTS	691:12	706:12	5	
SELECTION	691:12	692:12	6	
KEYWORD	691:12	691:12	7	if
LEAF_NODE	691:12	691:12	8	if
LEAF_NODE	691:14	691:14	7	(
CONDITION	691:16	691:16	7	is_strip
EXPR	691:16	691:16	8	is_strip
FIELD	691:16	691:16	9	is_strip
LEAF_NODE	691:16	691:16	10	is_strip
LEAF_NODE	691:25	691:25	7	)
STATEMENTS	692:12	697:12	7	
LEAF_NODE	692:12	692:12	8	{
STATEMENTS	693:16	693:16	8	
EXPR_STATEMENT	693:16	696:50	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip_or_tile ) ;
EXPR	693:16	693:16	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip_or_tile )
FUNCTION_CALL	693:16	696:49	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at scanline %lu, strip %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) strip_or_tile )
CALLEE	693:16	693:16	12	TIFFErrorExt
LEAF_NODE	693:16	693:16	13	TIFFErrorExt
LEAF_NODE	693:28	693:28	12	(
ARGUMENT	693:29	693:29	12	tif -> tif_clientdata
FIELD	693:29	693:34	13	tif -> tif_clientdata
LEAF_NODE	693:29	693:29	14	tif
LEAF_NODE	693:32	693:32	14	->
LEAF_NODE	693:34	693:34	14	tif_clientdata
LEAF_NODE	693:48	693:48	12	,
ARGUMENT	693:50	693:50	12	module
FIELD	693:50	693:50	13	module
LEAF_NODE	693:50	693:50	14	module
LEAF_NODE	693:56	693:56	12	,
ARGUMENT	694:20	694:20	12	"Seek error at scanline %lu, strip %lu"
FIELD	694:20	694:20	13	"Seek error at scanline %lu, strip %lu"
LEAF_NODE	694:20	694:20	14	"Seek error at scanline %lu, strip %lu"
LEAF_NODE	694:59	694:59	12	,
ARGUMENT	695:20	695:36	12	( unsigned long ) tif -> tif_row
LEAF_NODE	695:20	695:20	13	(
TYPE_NAME	695:21	695:30	13	unsigned long
LEAF_NODE	695:21	695:21	14	unsigned
LEAF_NODE	695:30	695:30	14	long
LEAF_NODE	695:34	695:34	13	)
FIELD	695:36	695:41	13	tif -> tif_row
LEAF_NODE	695:36	695:36	14	tif
LEAF_NODE	695:39	695:39	14	->
LEAF_NODE	695:41	695:41	14	tif_row
LEAF_NODE	695:48	695:48	12	,
ARGUMENT	696:20	696:36	12	( unsigned long ) strip_or_tile
LEAF_NODE	696:20	696:20	13	(
TYPE_NAME	696:21	696:30	13	unsigned long
LEAF_NODE	696:21	696:21	14	unsigned
LEAF_NODE	696:30	696:30	14	long
LEAF_NODE	696:34	696:34	13	)
FIELD	696:36	696:36	13	strip_or_tile
LEAF_NODE	696:36	696:36	14	strip_or_tile
LEAF_NODE	696:49	696:49	12	)
LEAF_NODE	696:50	696:50	10	;
LEAF_NODE	697:12	697:12	8	}
SELECTION	698:12	699:12	6	
KEYWORD	698:12	698:12	7	else
LEAF_NODE	698:12	698:12	8	else
STATEMENTS	699:12	705:12	7	
LEAF_NODE	699:12	699:12	8	{
STATEMENTS	700:16	700:16	8	
EXPR_STATEMENT	700:16	704:50	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at row %lu, col %lu, tile %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) strip_or_tile ) ;
EXPR	700:16	700:16	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at row %lu, col %lu, tile %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) strip_or_tile )
FUNCTION_CALL	700:16	704:49	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at row %lu, col %lu, tile %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) strip_or_tile )
CALLEE	700:16	700:16	12	TIFFErrorExt
LEAF_NODE	700:16	700:16	13	TIFFErrorExt
LEAF_NODE	700:28	700:28	12	(
ARGUMENT	700:29	700:29	12	tif -> tif_clientdata
FIELD	700:29	700:34	13	tif -> tif_clientdata
LEAF_NODE	700:29	700:29	14	tif
LEAF_NODE	700:32	700:32	14	->
LEAF_NODE	700:34	700:34	14	tif_clientdata
LEAF_NODE	700:48	700:48	12	,
ARGUMENT	700:50	700:50	12	module
FIELD	700:50	700:50	13	module
LEAF_NODE	700:50	700:50	14	module
LEAF_NODE	700:56	700:56	12	,
ARGUMENT	701:20	701:20	12	"Seek error at row %lu, col %lu, tile %lu"
FIELD	701:20	701:20	13	"Seek error at row %lu, col %lu, tile %lu"
LEAF_NODE	701:20	701:20	14	"Seek error at row %lu, col %lu, tile %lu"
LEAF_NODE	701:62	701:62	12	,
ARGUMENT	702:20	702:36	12	( unsigned long ) tif -> tif_row
LEAF_NODE	702:20	702:20	13	(
TYPE_NAME	702:21	702:30	13	unsigned long
LEAF_NODE	702:21	702:21	14	unsigned
LEAF_NODE	702:30	702:30	14	long
LEAF_NODE	702:34	702:34	13	)
FIELD	702:36	702:41	13	tif -> tif_row
LEAF_NODE	702:36	702:36	14	tif
LEAF_NODE	702:39	702:39	14	->
LEAF_NODE	702:41	702:41	14	tif_row
LEAF_NODE	702:48	702:48	12	,
ARGUMENT	703:20	703:36	12	( unsigned long ) tif -> tif_col
LEAF_NODE	703:20	703:20	13	(
TYPE_NAME	703:21	703:30	13	unsigned long
LEAF_NODE	703:21	703:21	14	unsigned
LEAF_NODE	703:30	703:30	14	long
LEAF_NODE	703:34	703:34	13	)
FIELD	703:36	703:41	13	tif -> tif_col
LEAF_NODE	703:36	703:36	14	tif
LEAF_NODE	703:39	703:39	14	->
LEAF_NODE	703:41	703:41	14	tif_col
LEAF_NODE	703:48	703:48	12	,
ARGUMENT	704:20	704:36	12	( unsigned long ) strip_or_tile
LEAF_NODE	704:20	704:20	13	(
TYPE_NAME	704:21	704:30	13	unsigned long
LEAF_NODE	704:21	704:21	14	unsigned
LEAF_NODE	704:30	704:30	14	long
LEAF_NODE	704:34	704:34	13	)
FIELD	704:36	704:36	13	strip_or_tile
LEAF_NODE	704:36	704:36	14	strip_or_tile
LEAF_NODE	704:49	704:49	12	)
LEAF_NODE	704:50	704:50	10	;
LEAF_NODE	705:12	705:12	8	}
JUMP_STATEMENT	706:12	706:35	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	706:12	706:12	7	return
LEAF_NODE	706:12	706:12	8	return
DESTINATION	706:19	706:19	7	( ( tmsize_t ) ( - 1 ) )
EXPR	706:19	706:34	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	706:19	706:19	9	(
LEAF_NODE	706:20	706:20	9	(
TYPE_NAME	706:21	706:21	9	tmsize_t
LEAF_NODE	706:21	706:21	10	tmsize_t
LEAF_NODE	706:29	706:29	9	)
LEAF_NODE	706:30	706:30	9	(
UNARY_EXPR	706:31	706:32	9	- 1
UNARY_OPERATOR	706:31	706:31	10	-
LEAF_NODE	706:31	706:31	11	-
FIELD	706:32	706:32	10	1
LEAF_NODE	706:32	706:32	11	1
LEAF_NODE	706:33	706:33	9	)
LEAF_NODE	706:34	706:34	9	)
LEAF_NODE	706:35	706:35	7	;
LEAF_NODE	707:8	707:8	5	}
SELECTION	709:8	711:8	3	
KEYWORD	709:8	709:8	4	if
LEAF_NODE	709:8	709:8	5	if
LEAF_NODE	709:10	709:10	4	(
CONDITION	709:12	709:12	4	! TIFFReadAndRealloc ( tif , size , 0 , is_strip , strip_or_tile , module )
EXPR	709:12	709:12	5	! TIFFReadAndRealloc ( tif , size , 0 , is_strip , strip_or_tile , module )
UNARY_EXPR	709:12	709:13	6	! TIFFReadAndRealloc ( tif , size , 0 , is_strip , strip_or_tile , module )
UNARY_OPERATOR	709:12	709:12	7	!
LEAF_NODE	709:12	709:12	8	!
FUNCTION_CALL	709:13	710:55	7	TIFFReadAndRealloc ( tif , size , 0 , is_strip , strip_or_tile , module )
CALLEE	709:13	709:13	8	TIFFReadAndRealloc
LEAF_NODE	709:13	709:13	9	TIFFReadAndRealloc
LEAF_NODE	709:31	709:31	8	(
ARGUMENT	709:33	709:33	8	tif
FIELD	709:33	709:33	9	tif
LEAF_NODE	709:33	709:33	10	tif
LEAF_NODE	709:36	709:36	8	,
ARGUMENT	709:38	709:38	8	size
FIELD	709:38	709:38	9	size
LEAF_NODE	709:38	709:38	10	size
LEAF_NODE	709:42	709:42	8	,
ARGUMENT	709:44	709:44	8	0
FIELD	709:44	709:44	9	0
LEAF_NODE	709:44	709:44	10	0
LEAF_NODE	709:45	709:45	8	,
ARGUMENT	709:47	709:47	8	is_strip
FIELD	709:47	709:47	9	is_strip
LEAF_NODE	709:47	709:47	10	is_strip
LEAF_NODE	709:55	709:55	8	,
ARGUMENT	710:33	710:33	8	strip_or_tile
FIELD	710:33	710:33	9	strip_or_tile
LEAF_NODE	710:33	710:33	10	strip_or_tile
LEAF_NODE	710:46	710:46	8	,
ARGUMENT	710:48	710:48	8	module
FIELD	710:48	710:48	9	module
LEAF_NODE	710:48	710:48	10	module
LEAF_NODE	710:55	710:55	8	)
LEAF_NODE	710:57	710:57	4	)
STATEMENTS	711:8	713:8	4	
LEAF_NODE	711:8	711:8	5	{
STATEMENTS	712:12	712:12	5	
JUMP_STATEMENT	712:12	712:35	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	712:12	712:12	7	return
LEAF_NODE	712:12	712:12	8	return
DESTINATION	712:19	712:19	7	( ( tmsize_t ) ( - 1 ) )
EXPR	712:19	712:34	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	712:19	712:19	9	(
LEAF_NODE	712:20	712:20	9	(
TYPE_NAME	712:21	712:21	9	tmsize_t
LEAF_NODE	712:21	712:21	10	tmsize_t
LEAF_NODE	712:29	712:29	9	)
LEAF_NODE	712:30	712:30	9	(
UNARY_EXPR	712:31	712:32	9	- 1
UNARY_OPERATOR	712:31	712:31	10	-
LEAF_NODE	712:31	712:31	11	-
FIELD	712:32	712:32	10	1
LEAF_NODE	712:32	712:32	11	1
LEAF_NODE	712:33	712:33	9	)
LEAF_NODE	712:34	712:34	9	)
LEAF_NODE	712:35	712:35	7	;
LEAF_NODE	713:8	713:8	5	}
LEAF_NODE	715:8	715:8	3	return
LEAF_NODE	715:15	715:15	3	(
LEAF_NODE	715:16	715:16	3	size
LEAF_NODE	715:20	715:20	3	)
LEAF_NODE	715:21	715:21	3	;
LEAF_NODE	716:0	716:0	2	}
FUNCTION_DEF	721:0	753:0	1	
RETURN_TYPE	721:0	721:0	2	tmsize_t
TYPE_NAME	721:0	721:0	3	tmsize_t
LEAF_NODE	721:0	721:0	4	tmsize_t
FUNCTION_NAME	722:0	722:0	2	TIFFReadRawStrip
LEAF_NODE	722:0	722:0	3	TIFFReadRawStrip
PARAMETER_LIST	722:16	722:66	2	( TIFF * tif , uint32 strip , void * buf , tmsize_t size )
LEAF_NODE	722:16	722:16	3	(
PARAMETER_DECL	722:17	722:23	3	TIFF * tif
TYPE	722:17	722:21	4	TIFF *
TYPE_NAME	722:17	722:17	5	TIFF
LEAF_NODE	722:17	722:17	6	TIFF
POINTER	722:21	722:21	5	*
LEAF_NODE	722:21	722:21	6	*
NAME	722:23	722:23	4	tif
LEAF_NODE	722:23	722:23	5	tif
LEAF_NODE	722:26	722:26	3	,
PARAMETER_DECL	722:28	722:35	3	uint32 strip
TYPE	722:28	722:28	4	uint32
TYPE_NAME	722:28	722:28	5	uint32
LEAF_NODE	722:28	722:28	6	uint32
NAME	722:35	722:35	4	strip
LEAF_NODE	722:35	722:35	5	strip
LEAF_NODE	722:40	722:40	3	,
PARAMETER_DECL	722:42	722:48	3	void * buf
TYPE	722:42	722:46	4	void *
TYPE_NAME	722:42	722:42	5	void
LEAF_NODE	722:42	722:42	6	void
POINTER	722:46	722:46	5	*
LEAF_NODE	722:46	722:46	6	*
NAME	722:48	722:48	4	buf
LEAF_NODE	722:48	722:48	5	buf
LEAF_NODE	722:51	722:51	3	,
PARAMETER_DECL	722:53	722:62	3	tmsize_t size
TYPE	722:53	722:53	4	tmsize_t
TYPE_NAME	722:53	722:53	5	tmsize_t
LEAF_NODE	722:53	722:53	6	tmsize_t
NAME	722:62	722:62	4	size
LEAF_NODE	722:62	722:62	5	size
LEAF_NODE	722:66	722:66	3	)
LEAF_NODE	723:0	723:0	2	{
STATEMENTS	724:1	752:1	2	
LEAF_NODE	724:1	724:1	3	static
SIMPLE_DECL	724:8	724:48	3	const char [ ] module ; module = "TIFFReadRawStrip" ;
VAR_DECL	724:8	724:19	4	const char [ ] module ; module = "TIFFReadRawStrip"
TYPE	724:8	724:25	5	const char [ ]
TYPE_NAME	724:8	724:14	6	const char
LEAF_NODE	724:8	724:8	7	const
LEAF_NODE	724:14	724:14	7	char
TYPE_SUFFIX	724:25	724:26	6	[ ]
LEAF_NODE	724:25	724:25	7	[
LEAF_NODE	724:26	724:26	7	]
NAME	724:19	724:19	5	module
LEAF_NODE	724:19	724:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	724:19	724:19	5	module = "TIFFReadRawStrip"
ASSIGN	724:19	724:30	6	module = "TIFFReadRawStrip"
LVAL	724:19	724:19	7	module
NAME	724:19	724:19	8	module
LEAF_NODE	724:19	724:19	9	module
ASSIGN_OP	724:28	724:28	7	=
LEAF_NODE	724:28	724:28	8	=
RVAL	724:30	724:30	7	"TIFFReadRawStrip"
FIELD	724:30	724:30	8	"TIFFReadRawStrip"
LEAF_NODE	724:30	724:30	9	"TIFFReadRawStrip"
LEAF_NODE	724:48	724:48	4	;
SIMPLE_DECL	725:1	725:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	725:1	725:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	725:1	725:15	5	TIFFDirectory *
TYPE_NAME	725:1	725:1	6	TIFFDirectory
LEAF_NODE	725:1	725:1	7	TIFFDirectory
POINTER	725:15	725:15	6	*
LEAF_NODE	725:15	725:15	7	*
NAME	725:16	725:16	5	td
LEAF_NODE	725:16	725:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	725:16	725:16	5	td = & tif -> tif_dir
ASSIGN	725:16	725:21	6	td = & tif -> tif_dir
LVAL	725:16	725:16	7	td
NAME	725:16	725:16	8	td
LEAF_NODE	725:16	725:16	9	td
ASSIGN_OP	725:19	725:19	7	=
LEAF_NODE	725:19	725:19	8	=
RVAL	725:21	725:21	7	& tif -> tif_dir
UNARY_EXPR	725:21	725:22	8	& tif -> tif_dir
UNARY_OPERATOR	725:21	725:21	9	&
LEAF_NODE	725:21	725:21	10	&
FIELD	725:22	725:27	9	tif -> tif_dir
LEAF_NODE	725:22	725:22	10	tif
LEAF_NODE	725:25	725:25	10	->
LEAF_NODE	725:27	725:27	10	tif_dir
LEAF_NODE	725:34	725:34	4	;
SIMPLE_DECL	726:1	726:19	3	uint64 bytecount64 ;
VAR_DECL	726:1	726:8	4	uint64 bytecount64
TYPE	726:1	726:1	5	uint64
TYPE_NAME	726:1	726:1	6	uint64
LEAF_NODE	726:1	726:1	7	uint64
NAME	726:8	726:8	5	bytecount64
LEAF_NODE	726:8	726:8	6	bytecount64
LEAF_NODE	726:19	726:19	4	;
SIMPLE_DECL	727:1	727:20	3	tmsize_t bytecountm ;
VAR_DECL	727:1	727:10	4	tmsize_t bytecountm
TYPE	727:1	727:1	5	tmsize_t
TYPE_NAME	727:1	727:1	6	tmsize_t
LEAF_NODE	727:1	727:1	7	tmsize_t
NAME	727:10	727:10	5	bytecountm
LEAF_NODE	727:10	727:10	6	bytecountm
LEAF_NODE	727:20	727:20	4	;
SELECTION	729:1	730:2	3	
KEYWORD	729:1	729:1	4	if
LEAF_NODE	729:1	729:1	5	if
LEAF_NODE	729:4	729:4	4	(
CONDITION	729:5	729:5	4	! TIFFCheckRead ( tif , 0 )
EXPR	729:5	729:5	5	! TIFFCheckRead ( tif , 0 )
UNARY_EXPR	729:5	729:6	6	! TIFFCheckRead ( tif , 0 )
UNARY_OPERATOR	729:5	729:5	7	!
LEAF_NODE	729:5	729:5	8	!
FUNCTION_CALL	729:6	729:26	7	TIFFCheckRead ( tif , 0 )
CALLEE	729:6	729:6	8	TIFFCheckRead
LEAF_NODE	729:6	729:6	9	TIFFCheckRead
LEAF_NODE	729:19	729:19	8	(
ARGUMENT	729:20	729:20	8	tif
FIELD	729:20	729:20	9	tif
LEAF_NODE	729:20	729:20	10	tif
LEAF_NODE	729:23	729:23	8	,
ARGUMENT	729:25	729:25	8	0
FIELD	729:25	729:25	9	0
LEAF_NODE	729:25	729:25	10	0
LEAF_NODE	729:26	729:26	8	)
LEAF_NODE	729:27	729:27	4	)
STATEMENTS	730:2	730:2	4	
JUMP_STATEMENT	730:2	730:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	730:2	730:2	6	return
LEAF_NODE	730:2	730:2	7	return
DESTINATION	730:9	730:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	730:9	730:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	730:9	730:9	8	(
LEAF_NODE	730:10	730:10	8	(
TYPE_NAME	730:11	730:11	8	tmsize_t
LEAF_NODE	730:11	730:11	9	tmsize_t
LEAF_NODE	730:19	730:19	8	)
LEAF_NODE	730:20	730:20	8	(
UNARY_EXPR	730:21	730:22	8	- 1
UNARY_OPERATOR	730:21	730:21	9	-
LEAF_NODE	730:21	730:21	10	-
FIELD	730:22	730:22	9	1
LEAF_NODE	730:22	730:22	10	1
LEAF_NODE	730:23	730:23	8	)
LEAF_NODE	730:24	730:24	8	)
LEAF_NODE	730:25	730:25	6	;
SELECTION	731:1	731:30	3	
KEYWORD	731:1	731:1	4	if
LEAF_NODE	731:1	731:1	5	if
LEAF_NODE	731:4	731:4	4	(
CONDITION	731:5	731:5	4	strip >= td -> td_nstrips
EXPR	731:5	731:14	5	strip >= td -> td_nstrips
FIELD	731:5	731:5	6	strip
LEAF_NODE	731:5	731:5	7	strip
REL_OPERATOR	731:11	731:11	6	>=
LEAF_NODE	731:11	731:11	7	>=
FIELD	731:14	731:18	6	td -> td_nstrips
LEAF_NODE	731:14	731:14	7	td
LEAF_NODE	731:16	731:16	7	->
LEAF_NODE	731:18	731:18	7	td_nstrips
LEAF_NODE	731:28	731:28	4	)
STATEMENTS	731:30	737:1	4	
LEAF_NODE	731:30	731:30	5	{
STATEMENTS	732:2	736:2	5	
EXPR_STATEMENT	732:2	735:38	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Strip out of range, max %lu" , ( unsigned long ) strip , ( unsigned long ) td -> td_nstrips ) ;
EXPR	732:2	732:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Strip out of range, max %lu" , ( unsigned long ) strip , ( unsigned long ) td -> td_nstrips )
FUNCTION_CALL	732:2	735:37	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Strip out of range, max %lu" , ( unsigned long ) strip , ( unsigned long ) td -> td_nstrips )
CALLEE	732:2	732:2	9	TIFFErrorExt
LEAF_NODE	732:2	732:2	10	TIFFErrorExt
LEAF_NODE	732:14	732:14	9	(
ARGUMENT	732:15	732:15	9	tif -> tif_clientdata
FIELD	732:15	732:20	10	tif -> tif_clientdata
LEAF_NODE	732:15	732:15	11	tif
LEAF_NODE	732:18	732:18	11	->
LEAF_NODE	732:20	732:20	11	tif_clientdata
LEAF_NODE	732:34	732:34	9	,
ARGUMENT	732:36	732:36	9	module
FIELD	732:36	732:36	10	module
LEAF_NODE	732:36	732:36	11	module
LEAF_NODE	732:42	732:42	9	,
ARGUMENT	733:7	733:7	9	"%lu: Strip out of range, max %lu"
FIELD	733:7	733:7	10	"%lu: Strip out of range, max %lu"
LEAF_NODE	733:7	733:7	11	"%lu: Strip out of range, max %lu"
LEAF_NODE	733:41	733:41	9	,
ARGUMENT	734:7	734:23	9	( unsigned long ) strip
LEAF_NODE	734:7	734:7	10	(
TYPE_NAME	734:8	734:17	10	unsigned long
LEAF_NODE	734:8	734:8	11	unsigned
LEAF_NODE	734:17	734:17	11	long
LEAF_NODE	734:21	734:21	10	)
FIELD	734:23	734:23	10	strip
LEAF_NODE	734:23	734:23	11	strip
LEAF_NODE	734:28	734:28	9	,
ARGUMENT	735:7	735:23	9	( unsigned long ) td -> td_nstrips
LEAF_NODE	735:7	735:7	10	(
TYPE_NAME	735:8	735:17	10	unsigned long
LEAF_NODE	735:8	735:8	11	unsigned
LEAF_NODE	735:17	735:17	11	long
LEAF_NODE	735:21	735:21	10	)
FIELD	735:23	735:27	10	td -> td_nstrips
LEAF_NODE	735:23	735:23	11	td
LEAF_NODE	735:25	735:25	11	->
LEAF_NODE	735:27	735:27	11	td_nstrips
LEAF_NODE	735:37	735:37	9	)
LEAF_NODE	735:38	735:38	7	;
JUMP_STATEMENT	736:2	736:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	736:2	736:2	7	return
LEAF_NODE	736:2	736:2	8	return
DESTINATION	736:9	736:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	736:9	736:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	736:9	736:9	9	(
LEAF_NODE	736:10	736:10	9	(
TYPE_NAME	736:11	736:11	9	tmsize_t
LEAF_NODE	736:11	736:11	10	tmsize_t
LEAF_NODE	736:19	736:19	9	)
LEAF_NODE	736:20	736:20	9	(
UNARY_EXPR	736:21	736:22	9	- 1
UNARY_OPERATOR	736:21	736:21	10	-
LEAF_NODE	736:21	736:21	11	-
FIELD	736:22	736:22	10	1
LEAF_NODE	736:22	736:22	11	1
LEAF_NODE	736:23	736:23	9	)
LEAF_NODE	736:24	736:24	9	)
LEAF_NODE	736:25	736:25	7	;
LEAF_NODE	737:1	737:1	5	}
SELECTION	738:1	739:1	3	
KEYWORD	738:1	738:1	4	if
LEAF_NODE	738:1	738:1	5	if
LEAF_NODE	738:4	738:4	4	(
CONDITION	738:5	738:5	4	tif -> tif_flags & TIFF_NOREADRAW
EXPR	738:5	738:20	5	tif -> tif_flags & TIFF_NOREADRAW
FIELD	738:5	738:10	6	tif -> tif_flags
LEAF_NODE	738:5	738:5	7	tif
LEAF_NODE	738:8	738:8	7	->
LEAF_NODE	738:10	738:10	7	tif_flags
LEAF_NODE	738:19	738:19	6	&
FIELD	738:20	738:20	6	TIFF_NOREADRAW
LEAF_NODE	738:20	738:20	7	TIFF_NOREADRAW
LEAF_NODE	738:34	738:34	4	)
STATEMENTS	739:1	743:1	4	
LEAF_NODE	739:1	739:1	5	{
STATEMENTS	740:2	742:2	5	
EXPR_STATEMENT	740:2	741:76	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" ) ;
EXPR	740:2	740:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" )
FUNCTION_CALL	740:2	741:75	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" )
CALLEE	740:2	740:2	9	TIFFErrorExt
LEAF_NODE	740:2	740:2	10	TIFFErrorExt
LEAF_NODE	740:14	740:14	9	(
ARGUMENT	740:15	740:15	9	tif -> tif_clientdata
FIELD	740:15	740:20	10	tif -> tif_clientdata
LEAF_NODE	740:15	740:15	11	tif
LEAF_NODE	740:18	740:18	11	->
LEAF_NODE	740:20	740:20	11	tif_clientdata
LEAF_NODE	740:34	740:34	9	,
ARGUMENT	740:36	740:36	9	module
FIELD	740:36	740:36	10	module
LEAF_NODE	740:36	740:36	11	module
LEAF_NODE	740:42	740:42	9	,
ARGUMENT	741:6	741:6	9	"Compression scheme does not support access to raw uncompressed data"
FIELD	741:6	741:6	10	"Compression scheme does not support access to raw uncompressed data"
LEAF_NODE	741:6	741:6	11	"Compression scheme does not support access to raw uncompressed data"
LEAF_NODE	741:75	741:75	9	)
LEAF_NODE	741:76	741:76	7	;
JUMP_STATEMENT	742:2	742:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	742:2	742:2	7	return
LEAF_NODE	742:2	742:2	8	return
DESTINATION	742:9	742:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	742:9	742:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	742:9	742:9	9	(
LEAF_NODE	742:10	742:10	9	(
TYPE_NAME	742:11	742:11	9	tmsize_t
LEAF_NODE	742:11	742:11	10	tmsize_t
LEAF_NODE	742:19	742:19	9	)
LEAF_NODE	742:20	742:20	9	(
UNARY_EXPR	742:21	742:22	9	- 1
UNARY_OPERATOR	742:21	742:21	10	-
LEAF_NODE	742:21	742:21	11	-
FIELD	742:22	742:22	10	1
LEAF_NODE	742:22	742:22	11	1
LEAF_NODE	742:23	742:23	9	)
LEAF_NODE	742:24	742:24	9	)
LEAF_NODE	742:25	742:25	7	;
LEAF_NODE	743:1	743:1	5	}
EXPR_STATEMENT	744:1	744:49	3	bytecount64 = TIFFGetStrileByteCount ( tif , strip ) ;
EXPR	744:1	744:1	4	bytecount64 = TIFFGetStrileByteCount ( tif , strip )
ASSIGN	744:1	744:15	5	bytecount64 = TIFFGetStrileByteCount ( tif , strip )
LVAL	744:1	744:1	6	bytecount64
FIELD	744:1	744:1	7	bytecount64
LEAF_NODE	744:1	744:1	8	bytecount64
ASSIGN_OP	744:13	744:13	6	=
LEAF_NODE	744:13	744:13	7	=
RVAL	744:15	744:15	6	TIFFGetStrileByteCount ( tif , strip )
FUNCTION_CALL	744:15	744:48	7	TIFFGetStrileByteCount ( tif , strip )
CALLEE	744:15	744:15	8	TIFFGetStrileByteCount
LEAF_NODE	744:15	744:15	9	TIFFGetStrileByteCount
LEAF_NODE	744:37	744:37	8	(
ARGUMENT	744:38	744:38	8	tif
FIELD	744:38	744:38	9	tif
LEAF_NODE	744:38	744:38	10	tif
LEAF_NODE	744:41	744:41	8	,
ARGUMENT	744:43	744:43	8	strip
FIELD	744:43	744:43	9	strip
LEAF_NODE	744:43	744:43	10	strip
LEAF_NODE	744:48	744:48	8	)
LEAF_NODE	744:49	744:49	4	;
SELECTION	745:1	746:2	3	
KEYWORD	745:1	745:1	4	if
LEAF_NODE	745:1	745:1	5	if
LEAF_NODE	745:4	745:4	4	(
CONDITION	745:5	745:5	4	size != ( tmsize_t ) ( - 1 ) && ( uint64 ) size <= bytecount64
EXPR	745:5	745:5	5	size != ( tmsize_t ) ( - 1 ) && ( uint64 ) size <= bytecount64
AND	745:5	745:31	6	size != ( tmsize_t ) ( - 1 ) && ( uint64 ) size <= bytecount64
EXPR	745:5	745:26	7	size != ( tmsize_t ) ( - 1 )
FIELD	745:5	745:5	8	size
LEAF_NODE	745:5	745:5	9	size
EQ_OPERATOR	745:10	745:10	8	!=
LEAF_NODE	745:10	745:10	9	!=
LEAF_NODE	745:13	745:13	8	(
TYPE_NAME	745:14	745:14	8	tmsize_t
LEAF_NODE	745:14	745:14	9	tmsize_t
LEAF_NODE	745:22	745:22	8	)
LEAF_NODE	745:23	745:23	8	(
UNARY_EXPR	745:24	745:25	8	- 1
UNARY_OPERATOR	745:24	745:24	9	-
LEAF_NODE	745:24	745:24	10	-
FIELD	745:25	745:25	9	1
LEAF_NODE	745:25	745:25	10	1
LEAF_NODE	745:26	745:26	8	)
LEAF_NODE	745:28	745:28	7	&&
EXPR	745:31	745:47	7	( uint64 ) size <= bytecount64
LEAF_NODE	745:31	745:31	8	(
TYPE_NAME	745:32	745:32	8	uint64
LEAF_NODE	745:32	745:32	9	uint64
LEAF_NODE	745:38	745:38	8	)
FIELD	745:39	745:39	8	size
LEAF_NODE	745:39	745:39	9	size
REL_OPERATOR	745:44	745:44	8	<=
LEAF_NODE	745:44	745:44	9	<=
FIELD	745:47	745:47	8	bytecount64
LEAF_NODE	745:47	745:47	9	bytecount64
LEAF_NODE	745:58	745:58	4	)
STATEMENTS	746:2	746:2	4	
EXPR_STATEMENT	746:2	746:19	5	bytecountm = size ;
EXPR	746:2	746:2	6	bytecountm = size
ASSIGN	746:2	746:15	7	bytecountm = size
LVAL	746:2	746:2	8	bytecountm
FIELD	746:2	746:2	9	bytecountm
LEAF_NODE	746:2	746:2	10	bytecountm
ASSIGN_OP	746:13	746:13	8	=
LEAF_NODE	746:13	746:13	9	=
RVAL	746:15	746:15	8	size
FIELD	746:15	746:15	9	size
LEAF_NODE	746:15	746:15	10	size
LEAF_NODE	746:19	746:19	6	;
SELECTION	747:1	748:2	3	
KEYWORD	747:1	747:1	4	else
LEAF_NODE	747:1	747:1	5	else
STATEMENTS	748:2	748:2	4	
EXPR_STATEMENT	748:2	748:63	5	bytecountm = _TIFFCastUInt64ToSSize ( tif , bytecount64 , module ) ;
EXPR	748:2	748:2	6	bytecountm = _TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
ASSIGN	748:2	748:15	7	bytecountm = _TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
LVAL	748:2	748:2	8	bytecountm
FIELD	748:2	748:2	9	bytecountm
LEAF_NODE	748:2	748:2	10	bytecountm
ASSIGN_OP	748:13	748:13	8	=
LEAF_NODE	748:13	748:13	9	=
RVAL	748:15	748:15	8	_TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
FUNCTION_CALL	748:15	748:62	9	_TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
CALLEE	748:15	748:15	10	_TIFFCastUInt64ToSSize
LEAF_NODE	748:15	748:15	11	_TIFFCastUInt64ToSSize
LEAF_NODE	748:37	748:37	10	(
ARGUMENT	748:38	748:38	10	tif
FIELD	748:38	748:38	11	tif
LEAF_NODE	748:38	748:38	12	tif
LEAF_NODE	748:41	748:41	10	,
ARGUMENT	748:43	748:43	10	bytecount64
FIELD	748:43	748:43	11	bytecount64
LEAF_NODE	748:43	748:43	12	bytecount64
LEAF_NODE	748:54	748:54	10	,
ARGUMENT	748:56	748:56	10	module
FIELD	748:56	748:56	11	module
LEAF_NODE	748:56	748:56	12	module
LEAF_NODE	748:62	748:62	10	)
LEAF_NODE	748:63	748:63	6	;
SELECTION	749:1	749:23	3	
KEYWORD	749:1	749:1	4	if
LEAF_NODE	749:1	749:1	5	if
LEAF_NODE	749:3	749:3	4	(
CONDITION	749:5	749:5	4	bytecountm == 0
EXPR	749:5	749:19	5	bytecountm == 0
FIELD	749:5	749:5	6	bytecountm
LEAF_NODE	749:5	749:5	7	bytecountm
EQ_OPERATOR	749:16	749:16	6	==
LEAF_NODE	749:16	749:16	7	==
FIELD	749:19	749:19	6	0
LEAF_NODE	749:19	749:19	7	0
LEAF_NODE	749:21	749:21	4	)
STATEMENTS	749:23	751:1	4	
LEAF_NODE	749:23	749:23	5	{
STATEMENTS	750:2	750:2	5	
JUMP_STATEMENT	750:2	750:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	750:2	750:2	7	return
LEAF_NODE	750:2	750:2	8	return
DESTINATION	750:9	750:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	750:9	750:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	750:9	750:9	9	(
LEAF_NODE	750:10	750:10	9	(
TYPE_NAME	750:11	750:11	9	tmsize_t
LEAF_NODE	750:11	750:11	10	tmsize_t
LEAF_NODE	750:19	750:19	9	)
LEAF_NODE	750:20	750:20	9	(
UNARY_EXPR	750:21	750:22	9	- 1
UNARY_OPERATOR	750:21	750:21	10	-
LEAF_NODE	750:21	750:21	11	-
FIELD	750:22	750:22	10	1
LEAF_NODE	750:22	750:22	11	1
LEAF_NODE	750:23	750:23	9	)
LEAF_NODE	750:24	750:24	9	)
LEAF_NODE	750:25	750:25	7	;
LEAF_NODE	751:1	751:1	5	}
JUMP_STATEMENT	752:1	752:64	3	return ( TIFFReadRawStrip1 ( tif , strip , buf , bytecountm , module ) ) ;
KEYWORD	752:1	752:1	4	return
LEAF_NODE	752:1	752:1	5	return
DESTINATION	752:8	752:8	4	( TIFFReadRawStrip1 ( tif , strip , buf , bytecountm , module ) )
EXPR	752:8	752:63	5	( TIFFReadRawStrip1 ( tif , strip , buf , bytecountm , module ) )
LEAF_NODE	752:8	752:8	6	(
FUNCTION_CALL	752:9	752:62	6	TIFFReadRawStrip1 ( tif , strip , buf , bytecountm , module )
CALLEE	752:9	752:9	7	TIFFReadRawStrip1
LEAF_NODE	752:9	752:9	8	TIFFReadRawStrip1
LEAF_NODE	752:26	752:26	7	(
ARGUMENT	752:27	752:27	7	tif
FIELD	752:27	752:27	8	tif
LEAF_NODE	752:27	752:27	9	tif
LEAF_NODE	752:30	752:30	7	,
ARGUMENT	752:32	752:32	7	strip
FIELD	752:32	752:32	8	strip
LEAF_NODE	752:32	752:32	9	strip
LEAF_NODE	752:37	752:37	7	,
ARGUMENT	752:39	752:39	7	buf
FIELD	752:39	752:39	8	buf
LEAF_NODE	752:39	752:39	9	buf
LEAF_NODE	752:42	752:42	7	,
ARGUMENT	752:44	752:44	7	bytecountm
FIELD	752:44	752:44	8	bytecountm
LEAF_NODE	752:44	752:44	9	bytecountm
LEAF_NODE	752:54	752:54	7	,
ARGUMENT	752:56	752:56	7	module
FIELD	752:56	752:56	8	module
LEAF_NODE	752:56	752:56	9	module
LEAF_NODE	752:62	752:62	7	)
LEAF_NODE	752:63	752:63	6	)
LEAF_NODE	752:64	752:64	4	;
LEAF_NODE	753:0	753:0	2	}
FUNCTION_DEF	756:0	759:0	1	
RETURN_TYPE	756:0	756:7	2	static uint64
LEAF_NODE	756:0	756:0	3	static
TYPE_NAME	756:7	756:7	3	uint64
LEAF_NODE	756:7	756:7	4	uint64
FUNCTION_NAME	756:14	756:14	2	NoSantizeSubUInt64
LEAF_NODE	756:14	756:14	3	NoSantizeSubUInt64
PARAMETER_LIST	756:32	756:51	2	( uint64 a , uint64 b )
LEAF_NODE	756:32	756:32	3	(
PARAMETER_DECL	756:33	756:40	3	uint64 a
TYPE	756:33	756:33	4	uint64
TYPE_NAME	756:33	756:33	5	uint64
LEAF_NODE	756:33	756:33	6	uint64
NAME	756:40	756:40	4	a
LEAF_NODE	756:40	756:40	5	a
LEAF_NODE	756:41	756:41	3	,
PARAMETER_DECL	756:43	756:50	3	uint64 b
TYPE	756:43	756:43	4	uint64
TYPE_NAME	756:43	756:43	5	uint64
LEAF_NODE	756:43	756:43	6	uint64
NAME	756:50	756:50	4	b
LEAF_NODE	756:50	756:50	5	b
LEAF_NODE	756:51	756:51	3	)
LEAF_NODE	757:0	757:0	2	{
STATEMENTS	758:4	758:4	2	
JUMP_STATEMENT	758:4	758:16	3	return a - b ;
KEYWORD	758:4	758:4	4	return
LEAF_NODE	758:4	758:4	5	return
DESTINATION	758:11	758:11	4	a - b
EXPR	758:11	758:15	5	a - b
FIELD	758:11	758:11	6	a
LEAF_NODE	758:11	758:11	7	a
LEAF_NODE	758:13	758:13	6	-
FIELD	758:15	758:15	6	b
LEAF_NODE	758:15	758:15	7	b
LEAF_NODE	758:16	758:16	4	;
LEAF_NODE	759:0	759:0	2	}
FUNCTION_DEF	765:0	953:0	1	
RETURN_TYPE	765:0	765:0	2	int
TYPE_NAME	765:0	765:0	3	int
LEAF_NODE	765:0	765:0	4	int
FUNCTION_NAME	766:0	766:0	2	TIFFFillStrip
LEAF_NODE	766:0	766:0	3	TIFFFillStrip
PARAMETER_LIST	766:13	766:37	2	( TIFF * tif , uint32 strip )
LEAF_NODE	766:13	766:13	3	(
PARAMETER_DECL	766:14	766:20	3	TIFF * tif
TYPE	766:14	766:18	4	TIFF *
TYPE_NAME	766:14	766:14	5	TIFF
LEAF_NODE	766:14	766:14	6	TIFF
POINTER	766:18	766:18	5	*
LEAF_NODE	766:18	766:18	6	*
NAME	766:20	766:20	4	tif
LEAF_NODE	766:20	766:20	5	tif
LEAF_NODE	766:23	766:23	3	,
PARAMETER_DECL	766:25	766:32	3	uint32 strip
TYPE	766:25	766:25	4	uint32
TYPE_NAME	766:25	766:25	5	uint32
LEAF_NODE	766:25	766:25	6	uint32
NAME	766:32	766:32	4	strip
LEAF_NODE	766:32	766:32	5	strip
LEAF_NODE	766:37	766:37	3	)
LEAF_NODE	767:0	767:0	2	{
STATEMENTS	768:1	952:1	2	
LEAF_NODE	768:1	768:1	3	static
SIMPLE_DECL	768:8	768:45	3	const char [ ] module ; module = "TIFFFillStrip" ;
VAR_DECL	768:8	768:19	4	const char [ ] module ; module = "TIFFFillStrip"
TYPE	768:8	768:25	5	const char [ ]
TYPE_NAME	768:8	768:14	6	const char
LEAF_NODE	768:8	768:8	7	const
LEAF_NODE	768:14	768:14	7	char
TYPE_SUFFIX	768:25	768:26	6	[ ]
LEAF_NODE	768:25	768:25	7	[
LEAF_NODE	768:26	768:26	7	]
NAME	768:19	768:19	5	module
LEAF_NODE	768:19	768:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	768:19	768:19	5	module = "TIFFFillStrip"
ASSIGN	768:19	768:30	6	module = "TIFFFillStrip"
LVAL	768:19	768:19	7	module
NAME	768:19	768:19	8	module
LEAF_NODE	768:19	768:19	9	module
ASSIGN_OP	768:28	768:28	7	=
LEAF_NODE	768:28	768:28	8	=
RVAL	768:30	768:30	7	"TIFFFillStrip"
FIELD	768:30	768:30	8	"TIFFFillStrip"
LEAF_NODE	768:30	768:30	9	"TIFFFillStrip"
LEAF_NODE	768:45	768:45	4	;
SIMPLE_DECL	769:1	769:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	769:1	769:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	769:1	769:15	5	TIFFDirectory *
TYPE_NAME	769:1	769:1	6	TIFFDirectory
LEAF_NODE	769:1	769:1	7	TIFFDirectory
POINTER	769:15	769:15	6	*
LEAF_NODE	769:15	769:15	7	*
NAME	769:16	769:16	5	td
LEAF_NODE	769:16	769:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	769:16	769:16	5	td = & tif -> tif_dir
ASSIGN	769:16	769:21	6	td = & tif -> tif_dir
LVAL	769:16	769:16	7	td
NAME	769:16	769:16	8	td
LEAF_NODE	769:16	769:16	9	td
ASSIGN_OP	769:19	769:19	7	=
LEAF_NODE	769:19	769:19	8	=
RVAL	769:21	769:21	7	& tif -> tif_dir
UNARY_EXPR	769:21	769:22	8	& tif -> tif_dir
UNARY_OPERATOR	769:21	769:21	9	&
LEAF_NODE	769:21	769:21	10	&
FIELD	769:22	769:27	9	tif -> tif_dir
LEAF_NODE	769:22	769:22	10	tif
LEAF_NODE	769:25	769:25	10	->
LEAF_NODE	769:27	769:27	10	tif_dir
LEAF_NODE	769:34	769:34	4	;
SELECTION	771:1	772:1	3	
KEYWORD	771:1	771:1	4	if
LEAF_NODE	771:1	771:1	5	if
LEAF_NODE	771:4	771:4	4	(
CONDITION	771:5	771:5	4	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
EXPR	771:5	771:38	5	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
LEAF_NODE	771:5	771:5	6	(
FIELD	771:6	771:11	6	tif -> tif_flags
LEAF_NODE	771:6	771:6	7	tif
LEAF_NODE	771:9	771:9	7	->
LEAF_NODE	771:11	771:11	7	tif_flags
LEAF_NODE	771:20	771:20	6	&
FIELD	771:21	771:21	6	TIFF_NOREADRAW
LEAF_NODE	771:21	771:21	7	TIFF_NOREADRAW
LEAF_NODE	771:35	771:35	6	)
EQ_OPERATOR	771:36	771:36	6	==
LEAF_NODE	771:36	771:36	7	==
FIELD	771:38	771:38	6	0
LEAF_NODE	771:38	771:38	7	0
LEAF_NODE	771:39	771:39	4	)
STATEMENTS	772:1	951:1	4	
LEAF_NODE	772:1	772:1	5	{
STATEMENTS	773:2	892:4	5	
SIMPLE_DECL	773:2	773:55	6	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , strip ) ;
VAR_DECL	773:2	773:9	7	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , strip )
TYPE	773:2	773:2	8	uint64
TYPE_NAME	773:2	773:2	9	uint64
LEAF_NODE	773:2	773:2	10	uint64
NAME	773:9	773:9	8	bytecount
LEAF_NODE	773:9	773:9	9	bytecount
LEAF_NODE	0:0	0:0	8	;
INIT	773:9	773:9	8	bytecount = TIFFGetStrileByteCount ( tif , strip )
ASSIGN	773:9	773:21	9	bytecount = TIFFGetStrileByteCount ( tif , strip )
LVAL	773:9	773:9	10	bytecount
NAME	773:9	773:9	11	bytecount
LEAF_NODE	773:9	773:9	12	bytecount
ASSIGN_OP	773:19	773:19	10	=
LEAF_NODE	773:19	773:19	11	=
RVAL	773:21	773:21	10	TIFFGetStrileByteCount ( tif , strip )
FUNCTION_CALL	773:21	773:54	11	TIFFGetStrileByteCount ( tif , strip )
CALLEE	773:21	773:21	12	TIFFGetStrileByteCount
LEAF_NODE	773:21	773:21	13	TIFFGetStrileByteCount
LEAF_NODE	773:43	773:43	12	(
ARGUMENT	773:44	773:44	12	tif
FIELD	773:44	773:44	13	tif
LEAF_NODE	773:44	773:44	14	tif
LEAF_NODE	773:47	773:47	12	,
ARGUMENT	773:49	773:49	12	strip
FIELD	773:49	773:49	13	strip
LEAF_NODE	773:49	773:49	14	strip
LEAF_NODE	773:54	773:54	12	)
LEAF_NODE	773:55	773:55	7	;
SELECTION	774:2	774:61	6	
KEYWORD	774:2	774:2	7	if
LEAF_NODE	774:2	774:2	8	if
LEAF_NODE	774:4	774:4	7	(
CONDITION	774:6	774:6	7	bytecount == 0 || bytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	774:6	774:6	8	bytecount == 0 || bytecount > ( uint64 ) TIFF_INT64_MAX
OR	774:6	774:24	9	bytecount == 0 || bytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	774:6	774:19	10	bytecount == 0
FIELD	774:6	774:6	11	bytecount
LEAF_NODE	774:6	774:6	12	bytecount
EQ_OPERATOR	774:16	774:16	11	==
LEAF_NODE	774:16	774:16	12	==
FIELD	774:19	774:19	11	0
LEAF_NODE	774:19	774:19	12	0
LEAF_NODE	774:21	774:21	10	||
EXPR	774:24	774:44	10	bytecount > ( uint64 ) TIFF_INT64_MAX
FIELD	774:24	774:24	11	bytecount
LEAF_NODE	774:24	774:24	12	bytecount
REL_OPERATOR	774:34	774:34	11	>
LEAF_NODE	774:34	774:34	12	>
LEAF_NODE	774:36	774:36	11	(
TYPE_NAME	774:37	774:37	11	uint64
LEAF_NODE	774:37	774:37	12	uint64
LEAF_NODE	774:43	774:43	11	)
FIELD	774:44	774:44	11	TIFF_INT64_MAX
LEAF_NODE	774:44	774:44	12	TIFF_INT64_MAX
LEAF_NODE	774:59	774:59	7	)
STATEMENTS	774:61	787:2	7	
LEAF_NODE	774:61	774:61	8	{
STATEMENTS	776:3	786:3	8	
EXPR_STATEMENT	776:3	779:31	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid strip byte count %I64u, strip %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip ) ;
EXPR	776:3	776:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid strip byte count %I64u, strip %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip )
FUNCTION_CALL	776:3	779:30	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid strip byte count %I64u, strip %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip )
CALLEE	776:3	776:3	12	TIFFErrorExt
LEAF_NODE	776:3	776:3	13	TIFFErrorExt
LEAF_NODE	776:15	776:15	12	(
ARGUMENT	776:16	776:16	12	tif -> tif_clientdata
FIELD	776:16	776:21	13	tif -> tif_clientdata
LEAF_NODE	776:16	776:16	14	tif
LEAF_NODE	776:19	776:19	14	->
LEAF_NODE	776:21	776:21	14	tif_clientdata
LEAF_NODE	776:35	776:35	12	,
ARGUMENT	776:37	776:37	12	module
FIELD	776:37	776:37	13	module
LEAF_NODE	776:37	776:37	14	module
LEAF_NODE	776:43	776:43	12	,
ARGUMENT	777:4	777:4	12	"Invalid strip byte count %I64u, strip %lu"
FIELD	777:4	777:4	13	"Invalid strip byte count %I64u, strip %lu"
LEAF_NODE	777:4	777:4	14	"Invalid strip byte count %I64u, strip %lu"
LEAF_NODE	777:47	777:47	12	,
ARGUMENT	778:9	778:28	12	( unsigned __int64 ) bytecount
LEAF_NODE	778:9	778:9	13	(
TYPE_NAME	778:10	778:19	13	unsigned __int64
LEAF_NODE	778:10	778:10	14	unsigned
LEAF_NODE	778:19	778:19	14	__int64
LEAF_NODE	778:26	778:26	13	)
FIELD	778:28	778:28	13	bytecount
LEAF_NODE	778:28	778:28	14	bytecount
LEAF_NODE	778:37	778:37	12	,
ARGUMENT	779:9	779:25	12	( unsigned long ) strip
LEAF_NODE	779:9	779:9	13	(
TYPE_NAME	779:10	779:19	13	unsigned long
LEAF_NODE	779:10	779:10	14	unsigned
LEAF_NODE	779:19	779:19	14	long
LEAF_NODE	779:23	779:23	13	)
FIELD	779:25	779:25	13	strip
LEAF_NODE	779:25	779:25	14	strip
LEAF_NODE	779:30	779:30	12	)
LEAF_NODE	779:31	779:31	10	;
LEAF_NODE	781:3	781:3	9	TIFFErrorExt
LEAF_NODE	781:15	781:15	9	(
LEAF_NODE	781:16	781:16	9	tif
LEAF_NODE	781:19	781:19	9	->
LEAF_NODE	781:21	781:21	9	tif_clientdata
LEAF_NODE	781:35	781:35	9	,
LEAF_NODE	781:37	781:37	9	module
LEAF_NODE	781:43	781:43	9	,
LEAF_NODE	782:4	782:4	9	"Invalid strip byte count %llu, strip %lu"
LEAF_NODE	782:46	782:46	9	,
LEAF_NODE	783:9	783:9	9	(
LEAF_NODE	783:10	783:10	9	unsigned
LEAF_NODE	783:19	783:19	9	long
LEAF_NODE	783:24	783:24	9	long
LEAF_NODE	783:28	783:28	9	)
LEAF_NODE	783:30	783:30	9	bytecount
LEAF_NODE	783:39	783:39	9	,
LEAF_NODE	784:9	784:9	9	(
LEAF_NODE	784:10	784:10	9	unsigned
LEAF_NODE	784:19	784:19	9	long
LEAF_NODE	784:23	784:23	9	)
LEAF_NODE	784:25	784:25	9	strip
LEAF_NODE	784:30	784:30	9	)
LEAF_NODE	784:31	784:31	9	;
JUMP_STATEMENT	786:3	786:13	9	return ( 0 ) ;
KEYWORD	786:3	786:3	10	return
LEAF_NODE	786:3	786:3	11	return
DESTINATION	786:10	786:10	10	( 0 )
EXPR	786:10	786:12	11	( 0 )
LEAF_NODE	786:10	786:10	12	(
FIELD	786:11	786:11	12	0
LEAF_NODE	786:11	786:11	13	0
LEAF_NODE	786:12	786:12	12	)
LEAF_NODE	786:13	786:13	10	;
LEAF_NODE	787:2	787:2	8	}
SELECTION	792:16	793:16	6	
KEYWORD	792:16	792:16	7	if
LEAF_NODE	792:16	792:16	8	if
LEAF_NODE	792:18	792:18	7	(
CONDITION	792:20	792:20	7	bytecount > 1024 * 1024
EXPR	792:20	792:39	8	bytecount > 1024 * 1024
FIELD	792:20	792:20	9	bytecount
LEAF_NODE	792:20	792:20	10	bytecount
REL_OPERATOR	792:30	792:30	9	>
LEAF_NODE	792:30	792:30	10	>
FIELD	792:32	792:32	9	1024
LEAF_NODE	792:32	792:32	10	1024
LEAF_NODE	792:37	792:37	9	*
FIELD	792:39	792:39	9	1024
LEAF_NODE	792:39	792:39	10	1024
LEAF_NODE	792:44	792:44	7	)
STATEMENTS	793:16	819:2	7	
LEAF_NODE	793:16	793:16	8	{
STATEMENTS	796:3	797:3	8	
SIMPLE_DECL	796:3	796:42	9	tmsize_t stripsize ; stripsize = TIFFStripSize ( tif ) ;
VAR_DECL	796:3	796:12	10	tmsize_t stripsize ; stripsize = TIFFStripSize ( tif )
TYPE	796:3	796:3	11	tmsize_t
TYPE_NAME	796:3	796:3	12	tmsize_t
LEAF_NODE	796:3	796:3	13	tmsize_t
NAME	796:12	796:12	11	stripsize
LEAF_NODE	796:12	796:12	12	stripsize
LEAF_NODE	0:0	0:0	11	;
INIT	796:12	796:12	11	stripsize = TIFFStripSize ( tif )
ASSIGN	796:12	796:24	12	stripsize = TIFFStripSize ( tif )
LVAL	796:12	796:12	13	stripsize
NAME	796:12	796:12	14	stripsize
LEAF_NODE	796:12	796:12	15	stripsize
ASSIGN_OP	796:22	796:22	13	=
LEAF_NODE	796:22	796:22	14	=
RVAL	796:24	796:24	13	TIFFStripSize ( tif )
FUNCTION_CALL	796:24	796:41	14	TIFFStripSize ( tif )
CALLEE	796:24	796:24	15	TIFFStripSize
LEAF_NODE	796:24	796:24	16	TIFFStripSize
LEAF_NODE	796:37	796:37	15	(
ARGUMENT	796:38	796:38	15	tif
FIELD	796:38	796:38	16	tif
LEAF_NODE	796:38	796:38	17	tif
LEAF_NODE	796:41	796:41	15	)
LEAF_NODE	796:42	796:42	10	;
SELECTION	797:3	799:3	9	
KEYWORD	797:3	797:3	10	if
LEAF_NODE	797:3	797:3	11	if
LEAF_NODE	797:5	797:5	10	(
CONDITION	797:7	797:7	10	stripsize != 0 && ( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
EXPR	797:7	797:7	11	stripsize != 0 && ( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
AND	797:7	798:7	12	stripsize != 0 && ( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
EXPR	797:7	797:20	13	stripsize != 0
FIELD	797:7	797:7	14	stripsize
LEAF_NODE	797:7	797:7	15	stripsize
EQ_OPERATOR	797:17	797:17	14	!=
LEAF_NODE	797:17	797:17	15	!=
FIELD	797:20	797:20	14	0
LEAF_NODE	797:20	797:20	15	0
LEAF_NODE	797:22	797:22	13	&&
EXPR	798:7	798:41	13	( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
LEAF_NODE	798:7	798:7	14	(
FIELD	798:8	798:8	14	bytecount
LEAF_NODE	798:8	798:8	15	bytecount
LEAF_NODE	798:18	798:18	14	-
FIELD	798:20	798:20	14	4096
LEAF_NODE	798:20	798:20	15	4096
LEAF_NODE	798:24	798:24	14	)
LEAF_NODE	798:26	798:26	14	/
FIELD	798:28	798:28	14	10
LEAF_NODE	798:28	798:28	15	10
REL_OPERATOR	798:31	798:31	14	>
LEAF_NODE	798:31	798:31	15	>
LEAF_NODE	798:33	798:33	14	(
TYPE_NAME	798:34	798:34	14	uint64
LEAF_NODE	798:34	798:34	15	uint64
LEAF_NODE	798:40	798:40	14	)
FIELD	798:41	798:41	14	stripsize
LEAF_NODE	798:41	798:41	15	stripsize
LEAF_NODE	798:52	798:52	10	)
STATEMENTS	799:3	818:3	10	
LEAF_NODE	799:3	799:3	11	{
STATEMENTS	800:4	801:4	11	
SIMPLE_DECL	800:4	800:55	12	uint64 newbytecount ; newbytecount = ( uint64 ) stripsize * 10 + 4096 ;
VAR_DECL	800:4	800:11	13	uint64 newbytecount ; newbytecount = ( uint64 ) stripsize * 10 + 4096
TYPE	800:4	800:4	14	uint64
TYPE_NAME	800:4	800:4	15	uint64
LEAF_NODE	800:4	800:4	16	uint64
NAME	800:11	800:11	14	newbytecount
LEAF_NODE	800:11	800:11	15	newbytecount
LEAF_NODE	0:0	0:0	14	;
INIT	800:11	800:11	14	newbytecount = ( uint64 ) stripsize * 10 + 4096
ASSIGN	800:11	800:26	15	newbytecount = ( uint64 ) stripsize * 10 + 4096
LVAL	800:11	800:11	16	newbytecount
NAME	800:11	800:11	17	newbytecount
LEAF_NODE	800:11	800:11	18	newbytecount
ASSIGN_OP	800:24	800:24	16	=
LEAF_NODE	800:24	800:24	17	=
RVAL	800:26	800:51	16	( uint64 ) stripsize * 10 + 4096
LEAF_NODE	800:26	800:26	17	(
TYPE_NAME	800:27	800:27	17	uint64
LEAF_NODE	800:27	800:27	18	uint64
LEAF_NODE	800:33	800:33	17	)
FIELD	800:34	800:34	17	stripsize
LEAF_NODE	800:34	800:34	18	stripsize
LEAF_NODE	800:44	800:44	17	*
FIELD	800:46	800:46	17	10
LEAF_NODE	800:46	800:46	18	10
LEAF_NODE	800:49	800:49	17	+
FIELD	800:51	800:51	17	4096
LEAF_NODE	800:51	800:51	18	4096
LEAF_NODE	800:55	800:55	13	;
SELECTION	801:4	802:4	12	
KEYWORD	801:4	801:4	13	if
LEAF_NODE	801:4	801:4	14	if
LEAF_NODE	801:6	801:6	13	(
CONDITION	801:8	801:8	13	newbytecount == 0 || newbytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	801:8	801:8	14	newbytecount == 0 || newbytecount > ( uint64 ) TIFF_INT64_MAX
OR	801:8	801:29	15	newbytecount == 0 || newbytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	801:8	801:24	16	newbytecount == 0
FIELD	801:8	801:8	17	newbytecount
LEAF_NODE	801:8	801:8	18	newbytecount
EQ_OPERATOR	801:21	801:21	17	==
LEAF_NODE	801:21	801:21	18	==
FIELD	801:24	801:24	17	0
LEAF_NODE	801:24	801:24	18	0
LEAF_NODE	801:26	801:26	16	||
EXPR	801:29	801:52	16	newbytecount > ( uint64 ) TIFF_INT64_MAX
FIELD	801:29	801:29	17	newbytecount
LEAF_NODE	801:29	801:29	18	newbytecount
REL_OPERATOR	801:42	801:42	17	>
LEAF_NODE	801:42	801:42	18	>
LEAF_NODE	801:44	801:44	17	(
TYPE_NAME	801:45	801:45	17	uint64
LEAF_NODE	801:45	801:45	18	uint64
LEAF_NODE	801:51	801:51	17	)
FIELD	801:52	801:52	17	TIFF_INT64_MAX
LEAF_NODE	801:52	801:52	18	TIFF_INT64_MAX
LEAF_NODE	801:67	801:67	13	)
STATEMENTS	802:4	817:4	13	
LEAF_NODE	802:4	802:4	14	{
STATEMENTS	804:5	816:5	14	
EXPR_STATEMENT	804:5	808:42	15	TIFFWarningExt ( tif -> tif_clientdata , module , "Too large strip byte count %I64u, strip %lu. Limiting to %I64u" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip , ( unsigned __int64 ) newbytecount ) ;
EXPR	804:5	804:5	16	TIFFWarningExt ( tif -> tif_clientdata , module , "Too large strip byte count %I64u, strip %lu. Limiting to %I64u" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip , ( unsigned __int64 ) newbytecount )
FUNCTION_CALL	804:5	808:41	17	TIFFWarningExt ( tif -> tif_clientdata , module , "Too large strip byte count %I64u, strip %lu. Limiting to %I64u" , ( unsigned __int64 ) bytecount , ( unsigned long ) strip , ( unsigned __int64 ) newbytecount )
CALLEE	804:5	804:5	18	TIFFWarningExt
LEAF_NODE	804:5	804:5	19	TIFFWarningExt
LEAF_NODE	804:19	804:19	18	(
ARGUMENT	804:20	804:20	18	tif -> tif_clientdata
FIELD	804:20	804:25	19	tif -> tif_clientdata
LEAF_NODE	804:20	804:20	20	tif
LEAF_NODE	804:23	804:23	20	->
LEAF_NODE	804:25	804:25	20	tif_clientdata
LEAF_NODE	804:39	804:39	18	,
ARGUMENT	804:41	804:41	18	module
FIELD	804:41	804:41	19	module
LEAF_NODE	804:41	804:41	20	module
LEAF_NODE	804:47	804:47	18	,
ARGUMENT	805:7	805:7	18	"Too large strip byte count %I64u, strip %lu. Limiting to %I64u"
FIELD	805:7	805:7	19	"Too large strip byte count %I64u, strip %lu. Limiting to %I64u"
LEAF_NODE	805:7	805:7	20	"Too large strip byte count %I64u, strip %lu. Limiting to %I64u"
LEAF_NODE	805:71	805:71	18	,
ARGUMENT	806:10	806:29	18	( unsigned __int64 ) bytecount
LEAF_NODE	806:10	806:10	19	(
TYPE_NAME	806:11	806:20	19	unsigned __int64
LEAF_NODE	806:11	806:11	20	unsigned
LEAF_NODE	806:20	806:20	20	__int64
LEAF_NODE	806:27	806:27	19	)
FIELD	806:29	806:29	19	bytecount
LEAF_NODE	806:29	806:29	20	bytecount
LEAF_NODE	806:38	806:38	18	,
ARGUMENT	807:10	807:26	18	( unsigned long ) strip
LEAF_NODE	807:10	807:10	19	(
TYPE_NAME	807:11	807:20	19	unsigned long
LEAF_NODE	807:11	807:11	20	unsigned
LEAF_NODE	807:20	807:20	20	long
LEAF_NODE	807:24	807:24	19	)
FIELD	807:26	807:26	19	strip
LEAF_NODE	807:26	807:26	20	strip
LEAF_NODE	807:31	807:31	18	,
ARGUMENT	808:10	808:29	18	( unsigned __int64 ) newbytecount
LEAF_NODE	808:10	808:10	19	(
TYPE_NAME	808:11	808:20	19	unsigned __int64
LEAF_NODE	808:11	808:11	20	unsigned
LEAF_NODE	808:20	808:20	20	__int64
LEAF_NODE	808:27	808:27	19	)
FIELD	808:29	808:29	19	newbytecount
LEAF_NODE	808:29	808:29	20	newbytecount
LEAF_NODE	808:41	808:41	18	)
LEAF_NODE	808:42	808:42	16	;
LEAF_NODE	810:5	810:5	15	TIFFErrorExt
LEAF_NODE	810:17	810:17	15	(
LEAF_NODE	810:18	810:18	15	tif
LEAF_NODE	810:21	810:21	15	->
LEAF_NODE	810:23	810:23	15	tif_clientdata
LEAF_NODE	810:37	810:37	15	,
LEAF_NODE	810:39	810:39	15	module
LEAF_NODE	810:45	810:45	15	,
LEAF_NODE	811:7	811:7	15	"Too large strip byte count %llu, strip %lu. Limiting to %llu"
LEAF_NODE	811:69	811:69	15	,
LEAF_NODE	812:10	812:10	15	(
LEAF_NODE	812:11	812:11	15	unsigned
LEAF_NODE	812:20	812:20	15	long
LEAF_NODE	812:25	812:25	15	long
LEAF_NODE	812:29	812:29	15	)
LEAF_NODE	812:31	812:31	15	bytecount
LEAF_NODE	812:40	812:40	15	,
LEAF_NODE	813:10	813:10	15	(
LEAF_NODE	813:11	813:11	15	unsigned
LEAF_NODE	813:20	813:20	15	long
LEAF_NODE	813:24	813:24	15	)
LEAF_NODE	813:26	813:26	15	strip
LEAF_NODE	813:31	813:31	15	,
LEAF_NODE	814:10	814:10	15	(
LEAF_NODE	814:11	814:11	15	unsigned
LEAF_NODE	814:20	814:20	15	long
LEAF_NODE	814:25	814:25	15	long
LEAF_NODE	814:29	814:29	15	)
LEAF_NODE	814:31	814:31	15	newbytecount
LEAF_NODE	814:43	814:43	15	)
LEAF_NODE	814:44	814:44	15	;
EXPR_STATEMENT	816:5	816:29	15	bytecount = newbytecount ;
EXPR	816:5	816:5	16	bytecount = newbytecount
ASSIGN	816:5	816:17	17	bytecount = newbytecount
LVAL	816:5	816:5	18	bytecount
FIELD	816:5	816:5	19	bytecount
LEAF_NODE	816:5	816:5	20	bytecount
ASSIGN_OP	816:15	816:15	18	=
LEAF_NODE	816:15	816:15	19	=
RVAL	816:17	816:17	18	newbytecount
FIELD	816:17	816:17	19	newbytecount
LEAF_NODE	816:17	816:17	20	newbytecount
LEAF_NODE	816:29	816:29	16	;
LEAF_NODE	817:4	817:4	14	}
LEAF_NODE	818:3	818:3	11	}
LEAF_NODE	819:2	819:2	8	}
SELECTION	821:2	821:21	6	
KEYWORD	821:2	821:2	7	if
LEAF_NODE	821:2	821:2	8	if
LEAF_NODE	821:5	821:5	7	(
CONDITION	821:6	821:6	7	isMapped ( tif )
EXPR	821:6	821:6	8	isMapped ( tif )
FUNCTION_CALL	821:6	821:18	9	isMapped ( tif )
CALLEE	821:6	821:6	10	isMapped
LEAF_NODE	821:6	821:6	11	isMapped
LEAF_NODE	821:14	821:14	10	(
ARGUMENT	821:15	821:15	10	tif
FIELD	821:15	821:15	11	tif
LEAF_NODE	821:15	821:15	12	tif
LEAF_NODE	821:18	821:18	10	)
LEAF_NODE	821:19	821:19	7	)
STATEMENTS	821:21	858:2	7	
LEAF_NODE	821:21	821:21	8	{
STATEMENTS	831:3	831:3	8	
SELECTION	831:3	832:76	9	
KEYWORD	831:3	831:3	10	if
LEAF_NODE	831:3	831:3	11	if
LEAF_NODE	831:6	831:6	10	(
CONDITION	831:7	831:7	10	bytecount > ( uint64 ) tif -> tif_size || TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) tif -> tif_size - bytecount
EXPR	831:7	831:7	11	bytecount > ( uint64 ) tif -> tif_size || TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) tif -> tif_size - bytecount
OR	831:7	832:7	12	bytecount > ( uint64 ) tif -> tif_size || TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) tif -> tif_size - bytecount
EXPR	831:7	831:27	13	bytecount > ( uint64 ) tif -> tif_size
FIELD	831:7	831:7	14	bytecount
LEAF_NODE	831:7	831:7	15	bytecount
REL_OPERATOR	831:17	831:17	14	>
LEAF_NODE	831:17	831:17	15	>
LEAF_NODE	831:19	831:19	14	(
TYPE_NAME	831:20	831:20	14	uint64
LEAF_NODE	831:20	831:20	15	uint64
LEAF_NODE	831:26	831:26	14	)
FIELD	831:27	831:32	14	tif -> tif_size
LEAF_NODE	831:27	831:27	15	tif
LEAF_NODE	831:30	831:30	15	->
LEAF_NODE	831:32	831:32	15	tif_size
LEAF_NODE	831:41	831:41	13	||
EXPR	832:7	832:65	13	TIFFGetStrileOffset ( tif , strip ) > ( uint64 ) tif -> tif_size - bytecount
FUNCTION_CALL	832:7	832:37	14	TIFFGetStrileOffset ( tif , strip )
CALLEE	832:7	832:7	15	TIFFGetStrileOffset
LEAF_NODE	832:7	832:7	16	TIFFGetStrileOffset
LEAF_NODE	832:26	832:26	15	(
ARGUMENT	832:27	832:27	15	tif
FIELD	832:27	832:27	16	tif
LEAF_NODE	832:27	832:27	17	tif
LEAF_NODE	832:30	832:30	15	,
ARGUMENT	832:32	832:32	15	strip
FIELD	832:32	832:32	16	strip
LEAF_NODE	832:32	832:32	17	strip
LEAF_NODE	832:37	832:37	15	)
REL_OPERATOR	832:39	832:39	14	>
LEAF_NODE	832:39	832:39	15	>
LEAF_NODE	832:41	832:41	14	(
TYPE_NAME	832:42	832:42	14	uint64
LEAF_NODE	832:42	832:42	15	uint64
LEAF_NODE	832:48	832:48	14	)
FIELD	832:49	832:54	14	tif -> tif_size
LEAF_NODE	832:49	832:49	15	tif
LEAF_NODE	832:52	832:52	15	->
LEAF_NODE	832:54	832:54	15	tif_size
LEAF_NODE	832:63	832:63	14	-
FIELD	832:65	832:65	14	bytecount
LEAF_NODE	832:65	832:65	15	bytecount
LEAF_NODE	832:74	832:74	10	)
STATEMENTS	832:76	857:3	10	
LEAF_NODE	832:76	832:76	11	{
STATEMENTS	839:4	856:4	11	
LEAF_NODE	839:4	839:4	12	TIFFErrorExt
LEAF_NODE	839:16	839:16	12	(
LEAF_NODE	839:17	839:17	12	tif
LEAF_NODE	839:20	839:20	12	->
LEAF_NODE	839:22	839:22	12	tif_clientdata
LEAF_NODE	839:36	839:36	12	,
LEAF_NODE	839:38	839:38	12	module
LEAF_NODE	839:44	839:44	12	,
LEAF_NODE	841:5	841:5	12	"Read error on strip %lu; "
LEAF_NODE	842:5	842:5	12	"got %I64u bytes, expected %I64u"
LEAF_NODE	842:38	842:38	12	,
LEAF_NODE	843:5	843:5	12	(
LEAF_NODE	843:6	843:6	12	unsigned
LEAF_NODE	843:15	843:15	12	long
LEAF_NODE	843:19	843:19	12	)
LEAF_NODE	843:21	843:21	12	strip
LEAF_NODE	843:26	843:26	12	,
LEAF_NODE	844:5	844:5	12	(
LEAF_NODE	844:6	844:6	12	unsigned
LEAF_NODE	844:15	844:15	12	__int64
LEAF_NODE	844:22	844:22	12	)
LEAF_NODE	844:24	844:24	12	NoSantizeSubUInt64
LEAF_NODE	844:42	844:42	12	(
LEAF_NODE	844:43	844:43	12	tif
LEAF_NODE	844:46	844:46	12	->
LEAF_NODE	844:48	844:48	12	tif_size
LEAF_NODE	844:56	844:56	12	,
LEAF_NODE	844:58	844:58	12	TIFFGetStrileOffset
LEAF_NODE	844:77	844:77	12	(
LEAF_NODE	844:78	844:78	12	tif
LEAF_NODE	844:81	844:81	12	,
LEAF_NODE	844:83	844:83	12	strip
LEAF_NODE	844:88	844:88	12	)
LEAF_NODE	844:89	844:89	12	)
LEAF_NODE	844:90	844:90	12	,
LEAF_NODE	845:5	845:5	12	(
LEAF_NODE	845:6	845:6	12	unsigned
LEAF_NODE	845:15	845:15	12	__int64
LEAF_NODE	845:22	845:22	12	)
LEAF_NODE	845:24	845:24	12	bytecount
LEAF_NODE	845:33	845:33	12	)
LEAF_NODE	845:34	845:34	12	;
LEAF_NODE	847:4	847:4	12	TIFFErrorExt
LEAF_NODE	847:16	847:16	12	(
LEAF_NODE	847:17	847:17	12	tif
LEAF_NODE	847:20	847:20	12	->
LEAF_NODE	847:22	847:22	12	tif_clientdata
LEAF_NODE	847:36	847:36	12	,
LEAF_NODE	847:38	847:38	12	module
LEAF_NODE	847:44	847:44	12	,
LEAF_NODE	849:5	849:5	12	"Read error on strip %lu; "
LEAF_NODE	850:5	850:5	12	"got %llu bytes, expected %llu"
LEAF_NODE	850:36	850:36	12	,
LEAF_NODE	851:5	851:5	12	(
LEAF_NODE	851:6	851:6	12	unsigned
LEAF_NODE	851:15	851:15	12	long
LEAF_NODE	851:19	851:19	12	)
LEAF_NODE	851:21	851:21	12	strip
LEAF_NODE	851:26	851:26	12	,
LEAF_NODE	852:5	852:5	12	(
LEAF_NODE	852:6	852:6	12	unsigned
LEAF_NODE	852:15	852:15	12	long
LEAF_NODE	852:20	852:20	12	long
LEAF_NODE	852:24	852:24	12	)
LEAF_NODE	852:26	852:26	12	NoSantizeSubUInt64
LEAF_NODE	852:44	852:44	12	(
LEAF_NODE	852:45	852:45	12	tif
LEAF_NODE	852:48	852:48	12	->
LEAF_NODE	852:50	852:50	12	tif_size
LEAF_NODE	852:58	852:58	12	,
LEAF_NODE	852:60	852:60	12	TIFFGetStrileOffset
LEAF_NODE	852:79	852:79	12	(
LEAF_NODE	852:80	852:80	12	tif
LEAF_NODE	852:83	852:83	12	,
LEAF_NODE	852:85	852:85	12	strip
LEAF_NODE	852:90	852:90	12	)
LEAF_NODE	852:91	852:91	12	)
LEAF_NODE	852:92	852:92	12	,
LEAF_NODE	853:5	853:5	12	(
LEAF_NODE	853:6	853:6	12	unsigned
LEAF_NODE	853:15	853:15	12	long
LEAF_NODE	853:20	853:20	12	long
LEAF_NODE	853:24	853:24	12	)
LEAF_NODE	853:26	853:26	12	bytecount
LEAF_NODE	853:35	853:35	12	)
LEAF_NODE	853:36	853:36	12	;
EXPR_STATEMENT	855:4	855:31	12	tif -> tif_curstrip = NOSTRIP ;
EXPR	855:4	855:4	13	tif -> tif_curstrip = NOSTRIP
ASSIGN	855:4	855:24	14	tif -> tif_curstrip = NOSTRIP
LVAL	855:4	855:4	15	tif -> tif_curstrip
FIELD	855:4	855:9	16	tif -> tif_curstrip
LEAF_NODE	855:4	855:4	17	tif
LEAF_NODE	855:7	855:7	17	->
LEAF_NODE	855:9	855:9	17	tif_curstrip
ASSIGN_OP	855:22	855:22	15	=
LEAF_NODE	855:22	855:22	16	=
RVAL	855:24	855:24	15	NOSTRIP
FIELD	855:24	855:24	16	NOSTRIP
LEAF_NODE	855:24	855:24	17	NOSTRIP
LEAF_NODE	855:31	855:31	13	;
JUMP_STATEMENT	856:4	856:14	12	return ( 0 ) ;
KEYWORD	856:4	856:4	13	return
LEAF_NODE	856:4	856:4	14	return
DESTINATION	856:11	856:11	13	( 0 )
EXPR	856:11	856:13	14	( 0 )
LEAF_NODE	856:11	856:11	15	(
FIELD	856:12	856:12	15	0
LEAF_NODE	856:12	856:12	16	0
LEAF_NODE	856:13	856:13	15	)
LEAF_NODE	856:14	856:14	13	;
LEAF_NODE	857:3	857:3	11	}
LEAF_NODE	858:2	858:2	8	}
SELECTION	860:2	862:44	6	
KEYWORD	860:2	860:2	7	if
LEAF_NODE	860:2	860:2	8	if
LEAF_NODE	860:5	860:5	7	(
CONDITION	860:6	860:6	7	isMapped ( tif ) && ( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
EXPR	860:6	860:6	8	isMapped ( tif ) && ( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
AND	860:6	861:6	9	isMapped ( tif ) && ( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
EXPR	860:6	860:6	10	isMapped ( tif )
FUNCTION_CALL	860:6	860:18	11	isMapped ( tif )
CALLEE	860:6	860:6	12	isMapped
LEAF_NODE	860:6	860:6	13	isMapped
LEAF_NODE	860:14	860:14	12	(
ARGUMENT	860:15	860:15	12	tif
FIELD	860:15	860:15	13	tif
LEAF_NODE	860:15	860:15	14	tif
LEAF_NODE	860:18	860:18	12	)
LEAF_NODE	860:20	860:20	10	&&
EXPR	861:6	862:41	10	( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
LEAF_NODE	861:6	861:6	11	(
OR	861:7	862:9	11	isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV )
EXPR	861:7	861:7	12	isFillOrder ( tif , td -> td_fillorder )
FUNCTION_CALL	861:7	861:40	13	isFillOrder ( tif , td -> td_fillorder )
CALLEE	861:7	861:7	14	isFillOrder
LEAF_NODE	861:7	861:7	15	isFillOrder
LEAF_NODE	861:18	861:18	14	(
ARGUMENT	861:19	861:19	14	tif
FIELD	861:19	861:19	15	tif
LEAF_NODE	861:19	861:19	16	tif
LEAF_NODE	861:22	861:22	14	,
ARGUMENT	861:24	861:24	14	td -> td_fillorder
FIELD	861:24	861:28	15	td -> td_fillorder
LEAF_NODE	861:24	861:24	16	td
LEAF_NODE	861:26	861:26	16	->
LEAF_NODE	861:28	861:28	16	td_fillorder
LEAF_NODE	861:40	861:40	14	)
LEAF_NODE	862:6	862:6	12	||
EXPR	862:9	862:40	12	( tif -> tif_flags & TIFF_NOBITREV )
LEAF_NODE	862:9	862:9	13	(
FIELD	862:10	862:15	13	tif -> tif_flags
LEAF_NODE	862:10	862:10	14	tif
LEAF_NODE	862:13	862:13	14	->
LEAF_NODE	862:15	862:15	14	tif_flags
LEAF_NODE	862:25	862:25	13	&
FIELD	862:27	862:27	13	TIFF_NOBITREV
LEAF_NODE	862:27	862:27	14	TIFF_NOBITREV
LEAF_NODE	862:40	862:40	13	)
LEAF_NODE	862:41	862:41	11	)
LEAF_NODE	862:42	862:42	7	)
STATEMENTS	862:44	892:2	7	
LEAF_NODE	862:44	862:44	8	{
STATEMENTS	874:3	891:3	8	
SELECTION	874:3	874:61	9	
KEYWORD	874:3	874:3	10	if
LEAF_NODE	874:3	874:3	11	if
LEAF_NODE	874:6	874:6	10	(
CONDITION	874:7	874:7	10	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	874:7	874:7	11	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
AND	874:7	874:43	12	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	874:7	874:38	13	( tif -> tif_flags & TIFF_MYBUFFER )
LEAF_NODE	874:7	874:7	14	(
FIELD	874:8	874:13	14	tif -> tif_flags
LEAF_NODE	874:8	874:8	15	tif
LEAF_NODE	874:11	874:11	15	->
LEAF_NODE	874:13	874:13	15	tif_flags
LEAF_NODE	874:23	874:23	14	&
FIELD	874:25	874:25	14	TIFF_MYBUFFER
LEAF_NODE	874:25	874:25	15	TIFF_MYBUFFER
LEAF_NODE	874:38	874:38	14	)
LEAF_NODE	874:40	874:40	13	&&
EXPR	874:43	874:43	13	tif -> tif_rawdata
FIELD	874:43	874:48	14	tif -> tif_rawdata
LEAF_NODE	874:43	874:43	15	tif
LEAF_NODE	874:46	874:46	15	->
LEAF_NODE	874:48	874:48	15	tif_rawdata
LEAF_NODE	874:59	874:59	10	)
STATEMENTS	874:61	878:3	10	
LEAF_NODE	874:61	874:61	11	{
STATEMENTS	875:4	877:4	11	
EXPR_STATEMENT	875:4	875:31	12	_TIFFfree ( tif -> tif_rawdata ) ;
EXPR	875:4	875:4	13	_TIFFfree ( tif -> tif_rawdata )
FUNCTION_CALL	875:4	875:30	14	_TIFFfree ( tif -> tif_rawdata )
CALLEE	875:4	875:4	15	_TIFFfree
LEAF_NODE	875:4	875:4	16	_TIFFfree
LEAF_NODE	875:13	875:13	15	(
ARGUMENT	875:14	875:14	15	tif -> tif_rawdata
FIELD	875:14	875:19	16	tif -> tif_rawdata
LEAF_NODE	875:14	875:14	17	tif
LEAF_NODE	875:17	875:17	17	->
LEAF_NODE	875:19	875:19	17	tif_rawdata
LEAF_NODE	875:30	875:30	15	)
LEAF_NODE	875:31	875:31	13	;
EXPR_STATEMENT	876:4	876:27	12	tif -> tif_rawdata = NULL ;
EXPR	876:4	876:4	13	tif -> tif_rawdata = NULL
ASSIGN	876:4	876:23	14	tif -> tif_rawdata = NULL
LVAL	876:4	876:4	15	tif -> tif_rawdata
FIELD	876:4	876:9	16	tif -> tif_rawdata
LEAF_NODE	876:4	876:4	17	tif
LEAF_NODE	876:7	876:7	17	->
LEAF_NODE	876:9	876:9	17	tif_rawdata
ASSIGN_OP	876:21	876:21	15	=
LEAF_NODE	876:21	876:21	16	=
RVAL	876:23	876:23	15	NULL
FIELD	876:23	876:23	16	NULL
LEAF_NODE	876:23	876:23	17	NULL
LEAF_NODE	876:27	876:27	13	;
EXPR_STATEMENT	877:4	877:28	12	tif -> tif_rawdatasize = 0 ;
EXPR	877:4	877:4	13	tif -> tif_rawdatasize = 0
ASSIGN	877:4	877:27	14	tif -> tif_rawdatasize = 0
LVAL	877:4	877:4	15	tif -> tif_rawdatasize
FIELD	877:4	877:9	16	tif -> tif_rawdatasize
LEAF_NODE	877:4	877:4	17	tif
LEAF_NODE	877:7	877:7	17	->
LEAF_NODE	877:9	877:9	17	tif_rawdatasize
ASSIGN_OP	877:25	877:25	15	=
LEAF_NODE	877:25	877:25	16	=
RVAL	877:27	877:27	15	0
FIELD	877:27	877:27	16	0
LEAF_NODE	877:27	877:27	17	0
LEAF_NODE	877:28	877:28	13	;
LEAF_NODE	878:3	878:3	11	}
EXPR_STATEMENT	879:3	879:35	9	tif -> tif_flags &= ~TIFF_MYBUFFER ;
EXPR	879:3	879:3	10	tif -> tif_flags &= ~TIFF_MYBUFFER
ASSIGN	879:3	879:21	11	tif -> tif_flags &= ~TIFF_MYBUFFER
LVAL	879:3	879:3	12	tif -> tif_flags
FIELD	879:3	879:8	13	tif -> tif_flags
LEAF_NODE	879:3	879:3	14	tif
LEAF_NODE	879:6	879:6	14	->
LEAF_NODE	879:8	879:8	14	tif_flags
ASSIGN_OP	879:18	879:18	12	&=
LEAF_NODE	879:18	879:18	13	&=
RVAL	879:21	879:21	12	~TIFF_MYBUFFER
FIELD	879:21	879:21	13	~TIFF_MYBUFFER
LEAF_NODE	879:21	879:21	14	~TIFF_MYBUFFER
LEAF_NODE	879:35	879:35	10	;
EXPR_STATEMENT	880:3	880:45	9	tif -> tif_rawdatasize = ( tmsize_t ) bytecount ;
EXPR	880:3	880:3	10	tif -> tif_rawdatasize = ( tmsize_t ) bytecount
ASSIGN	880:3	880:26	11	tif -> tif_rawdatasize = ( tmsize_t ) bytecount
LVAL	880:3	880:3	12	tif -> tif_rawdatasize
FIELD	880:3	880:8	13	tif -> tif_rawdatasize
LEAF_NODE	880:3	880:3	14	tif
LEAF_NODE	880:6	880:6	14	->
LEAF_NODE	880:8	880:8	14	tif_rawdatasize
ASSIGN_OP	880:24	880:24	12	=
LEAF_NODE	880:24	880:24	13	=
RVAL	880:26	880:36	12	( tmsize_t ) bytecount
LEAF_NODE	880:26	880:26	13	(
TYPE_NAME	880:27	880:27	13	tmsize_t
LEAF_NODE	880:27	880:27	14	tmsize_t
LEAF_NODE	880:35	880:35	13	)
FIELD	880:36	880:36	13	bytecount
LEAF_NODE	880:36	880:36	14	bytecount
LEAF_NODE	880:45	880:45	10	;
EXPR_STATEMENT	881:3	881:79	9	tif -> tif_rawdata = tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , strip ) ;
EXPR	881:3	881:3	10	tif -> tif_rawdata = tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , strip )
ASSIGN	881:3	881:22	11	tif -> tif_rawdata = tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , strip )
LVAL	881:3	881:3	12	tif -> tif_rawdata
FIELD	881:3	881:8	13	tif -> tif_rawdata
LEAF_NODE	881:3	881:3	14	tif
LEAF_NODE	881:6	881:6	14	->
LEAF_NODE	881:8	881:8	14	tif_rawdata
ASSIGN_OP	881:20	881:20	12	=
LEAF_NODE	881:20	881:20	13	=
RVAL	881:22	881:48	12	tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , strip )
FIELD	881:22	881:27	13	tif -> tif_base
LEAF_NODE	881:22	881:22	14	tif
LEAF_NODE	881:25	881:25	14	->
LEAF_NODE	881:27	881:27	14	tif_base
LEAF_NODE	881:36	881:36	13	+
LEAF_NODE	881:38	881:38	13	(
TYPE_NAME	881:39	881:39	13	tmsize_t
LEAF_NODE	881:39	881:39	14	tmsize_t
LEAF_NODE	881:47	881:47	13	)
FUNCTION_CALL	881:48	881:78	13	TIFFGetStrileOffset ( tif , strip )
CALLEE	881:48	881:48	14	TIFFGetStrileOffset
LEAF_NODE	881:48	881:48	15	TIFFGetStrileOffset
LEAF_NODE	881:67	881:67	14	(
ARGUMENT	881:68	881:68	14	tif
FIELD	881:68	881:68	15	tif
LEAF_NODE	881:68	881:68	16	tif
LEAF_NODE	881:71	881:71	14	,
ARGUMENT	881:73	881:73	14	strip
FIELD	881:73	881:73	15	strip
LEAF_NODE	881:73	881:73	16	strip
LEAF_NODE	881:78	881:78	14	)
LEAF_NODE	881:79	881:79	10	;
EXPR_STATEMENT	882:24	882:47	9	tif -> tif_rawdataoff = 0 ;
EXPR	882:24	882:24	10	tif -> tif_rawdataoff = 0
ASSIGN	882:24	882:46	11	tif -> tif_rawdataoff = 0
LVAL	882:24	882:24	12	tif -> tif_rawdataoff
FIELD	882:24	882:29	13	tif -> tif_rawdataoff
LEAF_NODE	882:24	882:24	14	tif
LEAF_NODE	882:27	882:27	14	->
LEAF_NODE	882:29	882:29	14	tif_rawdataoff
ASSIGN_OP	882:44	882:44	12	=
LEAF_NODE	882:44	882:44	13	=
RVAL	882:46	882:46	12	0
FIELD	882:46	882:46	13	0
LEAF_NODE	882:46	882:46	14	0
LEAF_NODE	882:47	882:47	10	;
EXPR_STATEMENT	883:24	883:69	9	tif -> tif_rawdataloaded = ( tmsize_t ) bytecount ;
EXPR	883:24	883:24	10	tif -> tif_rawdataloaded = ( tmsize_t ) bytecount
ASSIGN	883:24	883:49	11	tif -> tif_rawdataloaded = ( tmsize_t ) bytecount
LVAL	883:24	883:24	12	tif -> tif_rawdataloaded
FIELD	883:24	883:29	13	tif -> tif_rawdataloaded
LEAF_NODE	883:24	883:24	14	tif
LEAF_NODE	883:27	883:27	14	->
LEAF_NODE	883:29	883:29	14	tif_rawdataloaded
ASSIGN_OP	883:47	883:47	12	=
LEAF_NODE	883:47	883:47	13	=
RVAL	883:49	883:60	12	( tmsize_t ) bytecount
LEAF_NODE	883:49	883:49	13	(
TYPE_NAME	883:50	883:50	13	tmsize_t
LEAF_NODE	883:50	883:50	14	tmsize_t
LEAF_NODE	883:58	883:58	13	)
FIELD	883:60	883:60	13	bytecount
LEAF_NODE	883:60	883:60	14	bytecount
LEAF_NODE	883:69	883:69	10	;
EXPR_STATEMENT	891:3	891:36	9	tif -> tif_flags |= TIFF_BUFFERMMAP ;
EXPR	891:3	891:3	10	tif -> tif_flags |= TIFF_BUFFERMMAP
ASSIGN	891:3	891:21	11	tif -> tif_flags |= TIFF_BUFFERMMAP
LVAL	891:3	891:3	12	tif -> tif_flags
FIELD	891:3	891:8	13	tif -> tif_flags
LEAF_NODE	891:3	891:3	14	tif
LEAF_NODE	891:6	891:6	14	->
LEAF_NODE	891:8	891:8	14	tif_flags
ASSIGN_OP	891:18	891:18	12	|=
LEAF_NODE	891:18	891:18	13	|=
RVAL	891:21	891:21	12	TIFF_BUFFERMMAP
FIELD	891:21	891:21	13	TIFF_BUFFERMMAP
LEAF_NODE	891:21	891:21	14	TIFF_BUFFERMMAP
LEAF_NODE	891:36	891:36	10	;
LEAF_NODE	892:2	892:2	8	}
SELECTION	892:4	892:9	6	
KEYWORD	892:4	892:4	7	else
LEAF_NODE	892:4	892:4	8	else
STATEMENTS	892:9	950:16	7	
LEAF_NODE	892:9	892:9	8	{
STATEMENTS	898:3	947:3	8	
SIMPLE_DECL	898:3	898:22	9	tmsize_t bytecountm ;
VAR_DECL	898:3	898:12	10	tmsize_t bytecountm
TYPE	898:3	898:3	11	tmsize_t
TYPE_NAME	898:3	898:3	12	tmsize_t
LEAF_NODE	898:3	898:3	13	tmsize_t
NAME	898:12	898:12	11	bytecountm
LEAF_NODE	898:12	898:12	12	bytecountm
LEAF_NODE	898:22	898:22	10	;
EXPR_STATEMENT	899:3	899:33	9	bytecountm = ( tmsize_t ) bytecount ;
EXPR	899:3	899:3	10	bytecountm = ( tmsize_t ) bytecount
ASSIGN	899:3	899:14	11	bytecountm = ( tmsize_t ) bytecount
LVAL	899:3	899:3	12	bytecountm
FIELD	899:3	899:3	13	bytecountm
LEAF_NODE	899:3	899:3	14	bytecountm
ASSIGN_OP	899:13	899:13	12	=
LEAF_NODE	899:13	899:13	13	=
RVAL	899:14	899:24	12	( tmsize_t ) bytecount
LEAF_NODE	899:14	899:14	13	(
TYPE_NAME	899:15	899:15	13	tmsize_t
LEAF_NODE	899:15	899:15	14	tmsize_t
LEAF_NODE	899:23	899:23	13	)
FIELD	899:24	899:24	13	bytecount
LEAF_NODE	899:24	899:24	14	bytecount
LEAF_NODE	899:33	899:33	10	;
SELECTION	900:3	901:3	9	
KEYWORD	900:3	900:3	10	if
LEAF_NODE	900:3	900:3	11	if
LEAF_NODE	900:6	900:6	10	(
CONDITION	900:7	900:7	10	( uint64 ) bytecountm != bytecount
EXPR	900:7	900:27	11	( uint64 ) bytecountm != bytecount
LEAF_NODE	900:7	900:7	12	(
TYPE_NAME	900:8	900:8	12	uint64
LEAF_NODE	900:8	900:8	13	uint64
LEAF_NODE	900:14	900:14	12	)
FIELD	900:15	900:15	12	bytecountm
LEAF_NODE	900:15	900:15	13	bytecountm
EQ_OPERATOR	900:25	900:25	12	!=
LEAF_NODE	900:25	900:25	13	!=
FIELD	900:27	900:27	12	bytecount
LEAF_NODE	900:27	900:27	13	bytecount
LEAF_NODE	900:36	900:36	10	)
STATEMENTS	901:3	904:3	10	
LEAF_NODE	901:3	901:3	11	{
STATEMENTS	902:4	903:4	11	
EXPR_STATEMENT	902:4	902:63	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" ) ;
EXPR	902:4	902:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
FUNCTION_CALL	902:4	902:62	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
CALLEE	902:4	902:4	15	TIFFErrorExt
LEAF_NODE	902:4	902:4	16	TIFFErrorExt
LEAF_NODE	902:16	902:16	15	(
ARGUMENT	902:17	902:17	15	tif -> tif_clientdata
FIELD	902:17	902:22	16	tif -> tif_clientdata
LEAF_NODE	902:17	902:17	17	tif
LEAF_NODE	902:20	902:20	17	->
LEAF_NODE	902:22	902:22	17	tif_clientdata
LEAF_NODE	902:36	902:36	15	,
ARGUMENT	902:37	902:37	15	module
FIELD	902:37	902:37	16	module
LEAF_NODE	902:37	902:37	17	module
LEAF_NODE	902:43	902:43	15	,
ARGUMENT	902:44	902:44	15	"Integer overflow"
FIELD	902:44	902:44	16	"Integer overflow"
LEAF_NODE	902:44	902:44	17	"Integer overflow"
LEAF_NODE	902:62	902:62	15	)
LEAF_NODE	902:63	902:63	13	;
JUMP_STATEMENT	903:4	903:13	12	return ( 0 ) ;
KEYWORD	903:4	903:4	13	return
LEAF_NODE	903:4	903:4	14	return
DESTINATION	903:10	903:10	13	( 0 )
EXPR	903:10	903:12	14	( 0 )
LEAF_NODE	903:10	903:10	15	(
FIELD	903:11	903:11	15	0
LEAF_NODE	903:11	903:11	16	0
LEAF_NODE	903:12	903:12	15	)
LEAF_NODE	903:13	903:13	13	;
LEAF_NODE	904:3	904:3	11	}
SELECTION	905:3	905:42	9	
KEYWORD	905:3	905:3	10	if
LEAF_NODE	905:3	905:3	11	if
LEAF_NODE	905:6	905:6	10	(
CONDITION	905:7	905:7	10	bytecountm > tif -> tif_rawdatasize
EXPR	905:7	905:20	11	bytecountm > tif -> tif_rawdatasize
FIELD	905:7	905:7	12	bytecountm
LEAF_NODE	905:7	905:7	13	bytecountm
REL_OPERATOR	905:18	905:18	12	>
LEAF_NODE	905:18	905:18	13	>
FIELD	905:20	905:25	12	tif -> tif_rawdatasize
LEAF_NODE	905:20	905:20	13	tif
LEAF_NODE	905:23	905:23	13	->
LEAF_NODE	905:25	905:25	13	tif_rawdatasize
LEAF_NODE	905:40	905:40	10	)
STATEMENTS	905:42	913:3	10	
LEAF_NODE	905:42	905:42	11	{
STATEMENTS	906:4	907:4	11	
EXPR_STATEMENT	906:4	906:31	12	tif -> tif_curstrip = NOSTRIP ;
EXPR	906:4	906:4	13	tif -> tif_curstrip = NOSTRIP
ASSIGN	906:4	906:24	14	tif -> tif_curstrip = NOSTRIP
LVAL	906:4	906:4	15	tif -> tif_curstrip
FIELD	906:4	906:9	16	tif -> tif_curstrip
LEAF_NODE	906:4	906:4	17	tif
LEAF_NODE	906:7	906:7	17	->
LEAF_NODE	906:9	906:9	17	tif_curstrip
ASSIGN_OP	906:22	906:22	15	=
LEAF_NODE	906:22	906:22	16	=
RVAL	906:24	906:24	15	NOSTRIP
FIELD	906:24	906:24	16	NOSTRIP
LEAF_NODE	906:24	906:24	17	NOSTRIP
LEAF_NODE	906:31	906:31	13	;
SELECTION	907:4	907:47	12	
KEYWORD	907:4	907:4	13	if
LEAF_NODE	907:4	907:4	14	if
LEAF_NODE	907:7	907:7	13	(
CONDITION	907:8	907:8	13	( tif -> tif_flags & TIFF_MYBUFFER ) == 0
EXPR	907:8	907:44	14	( tif -> tif_flags & TIFF_MYBUFFER ) == 0
LEAF_NODE	907:8	907:8	15	(
FIELD	907:9	907:14	15	tif -> tif_flags
LEAF_NODE	907:9	907:9	16	tif
LEAF_NODE	907:12	907:12	16	->
LEAF_NODE	907:14	907:14	16	tif_flags
LEAF_NODE	907:24	907:24	15	&
FIELD	907:26	907:26	15	TIFF_MYBUFFER
LEAF_NODE	907:26	907:26	16	TIFF_MYBUFFER
LEAF_NODE	907:39	907:39	15	)
EQ_OPERATOR	907:41	907:41	15	==
LEAF_NODE	907:41	907:41	16	==
FIELD	907:44	907:44	15	0
LEAF_NODE	907:44	907:44	16	0
LEAF_NODE	907:45	907:45	13	)
STATEMENTS	907:47	912:4	13	
LEAF_NODE	907:47	907:47	14	{
STATEMENTS	908:5	911:5	14	
EXPR_STATEMENT	908:5	910:31	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold strip %lu" , ( unsigned long ) strip ) ;
EXPR	908:5	908:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold strip %lu" , ( unsigned long ) strip )
FUNCTION_CALL	908:5	910:30	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold strip %lu" , ( unsigned long ) strip )
CALLEE	908:5	908:5	18	TIFFErrorExt
LEAF_NODE	908:5	908:5	19	TIFFErrorExt
LEAF_NODE	908:17	908:17	18	(
ARGUMENT	908:18	908:18	18	tif -> tif_clientdata
FIELD	908:18	908:23	19	tif -> tif_clientdata
LEAF_NODE	908:18	908:18	20	tif
LEAF_NODE	908:21	908:21	20	->
LEAF_NODE	908:23	908:23	20	tif_clientdata
LEAF_NODE	908:37	908:37	18	,
ARGUMENT	908:39	908:39	18	module
FIELD	908:39	908:39	19	module
LEAF_NODE	908:39	908:39	20	module
LEAF_NODE	908:45	908:45	18	,
ARGUMENT	909:9	909:9	18	"Data buffer too small to hold strip %lu"
FIELD	909:9	909:9	19	"Data buffer too small to hold strip %lu"
LEAF_NODE	909:9	909:9	20	"Data buffer too small to hold strip %lu"
LEAF_NODE	909:50	909:50	18	,
ARGUMENT	910:9	910:25	18	( unsigned long ) strip
LEAF_NODE	910:9	910:9	19	(
TYPE_NAME	910:10	910:19	19	unsigned long
LEAF_NODE	910:10	910:10	20	unsigned
LEAF_NODE	910:19	910:19	20	long
LEAF_NODE	910:23	910:23	19	)
FIELD	910:25	910:25	19	strip
LEAF_NODE	910:25	910:25	20	strip
LEAF_NODE	910:30	910:30	18	)
LEAF_NODE	910:31	910:31	16	;
JUMP_STATEMENT	911:5	911:15	15	return ( 0 ) ;
KEYWORD	911:5	911:5	16	return
LEAF_NODE	911:5	911:5	17	return
DESTINATION	911:12	911:12	16	( 0 )
EXPR	911:12	911:14	17	( 0 )
LEAF_NODE	911:12	911:12	18	(
FIELD	911:13	911:13	18	0
LEAF_NODE	911:13	911:13	19	0
LEAF_NODE	911:14	911:14	18	)
LEAF_NODE	911:15	911:15	16	;
LEAF_NODE	912:4	912:4	14	}
LEAF_NODE	913:3	913:3	11	}
SELECTION	914:3	914:39	9	
KEYWORD	914:3	914:3	10	if
LEAF_NODE	914:3	914:3	11	if
LEAF_NODE	914:6	914:6	10	(
CONDITION	914:7	914:7	10	tif -> tif_flags & TIFF_BUFFERMMAP
EXPR	914:7	914:22	11	tif -> tif_flags & TIFF_BUFFERMMAP
FIELD	914:7	914:12	12	tif -> tif_flags
LEAF_NODE	914:7	914:7	13	tif
LEAF_NODE	914:10	914:10	13	->
LEAF_NODE	914:12	914:12	13	tif_flags
LEAF_NODE	914:21	914:21	12	&
FIELD	914:22	914:22	12	TIFF_BUFFERMMAP
LEAF_NODE	914:22	914:22	13	TIFF_BUFFERMMAP
LEAF_NODE	914:37	914:37	10	)
STATEMENTS	914:39	919:3	10	
LEAF_NODE	914:39	914:39	11	{
STATEMENTS	915:4	918:4	11	
EXPR_STATEMENT	915:4	915:31	12	tif -> tif_curstrip = NOSTRIP ;
EXPR	915:4	915:4	13	tif -> tif_curstrip = NOSTRIP
ASSIGN	915:4	915:24	14	tif -> tif_curstrip = NOSTRIP
LVAL	915:4	915:4	15	tif -> tif_curstrip
FIELD	915:4	915:9	16	tif -> tif_curstrip
LEAF_NODE	915:4	915:4	17	tif
LEAF_NODE	915:7	915:7	17	->
LEAF_NODE	915:9	915:9	17	tif_curstrip
ASSIGN_OP	915:22	915:22	15	=
LEAF_NODE	915:22	915:22	16	=
RVAL	915:24	915:24	15	NOSTRIP
FIELD	915:24	915:24	16	NOSTRIP
LEAF_NODE	915:24	915:24	17	NOSTRIP
LEAF_NODE	915:31	915:31	13	;
EXPR_STATEMENT	916:4	916:27	12	tif -> tif_rawdata = NULL ;
EXPR	916:4	916:4	13	tif -> tif_rawdata = NULL
ASSIGN	916:4	916:23	14	tif -> tif_rawdata = NULL
LVAL	916:4	916:4	15	tif -> tif_rawdata
FIELD	916:4	916:9	16	tif -> tif_rawdata
LEAF_NODE	916:4	916:4	17	tif
LEAF_NODE	916:7	916:7	17	->
LEAF_NODE	916:9	916:9	17	tif_rawdata
ASSIGN_OP	916:21	916:21	15	=
LEAF_NODE	916:21	916:21	16	=
RVAL	916:23	916:23	15	NULL
FIELD	916:23	916:23	16	NULL
LEAF_NODE	916:23	916:23	17	NULL
LEAF_NODE	916:27	916:27	13	;
EXPR_STATEMENT	917:4	917:28	12	tif -> tif_rawdatasize = 0 ;
EXPR	917:4	917:4	13	tif -> tif_rawdatasize = 0
ASSIGN	917:4	917:27	14	tif -> tif_rawdatasize = 0
LVAL	917:4	917:4	15	tif -> tif_rawdatasize
FIELD	917:4	917:9	16	tif -> tif_rawdatasize
LEAF_NODE	917:4	917:4	17	tif
LEAF_NODE	917:7	917:7	17	->
LEAF_NODE	917:9	917:9	17	tif_rawdatasize
ASSIGN_OP	917:25	917:25	15	=
LEAF_NODE	917:25	917:25	16	=
RVAL	917:27	917:27	15	0
FIELD	917:27	917:27	16	0
LEAF_NODE	917:27	917:27	17	0
LEAF_NODE	917:28	917:28	13	;
EXPR_STATEMENT	918:4	918:38	12	tif -> tif_flags &= ~TIFF_BUFFERMMAP ;
EXPR	918:4	918:4	13	tif -> tif_flags &= ~TIFF_BUFFERMMAP
ASSIGN	918:4	918:22	14	tif -> tif_flags &= ~TIFF_BUFFERMMAP
LVAL	918:4	918:4	15	tif -> tif_flags
FIELD	918:4	918:9	16	tif -> tif_flags
LEAF_NODE	918:4	918:4	17	tif
LEAF_NODE	918:7	918:7	17	->
LEAF_NODE	918:9	918:9	17	tif_flags
ASSIGN_OP	918:19	918:19	15	&=
LEAF_NODE	918:19	918:19	16	&=
RVAL	918:22	918:22	15	~TIFF_BUFFERMMAP
FIELD	918:22	918:22	16	~TIFF_BUFFERMMAP
LEAF_NODE	918:22	918:22	17	~TIFF_BUFFERMMAP
LEAF_NODE	918:38	918:38	13	;
LEAF_NODE	919:3	919:3	11	}
SELECTION	921:3	922:3	9	
KEYWORD	921:3	921:3	10	if
LEAF_NODE	921:3	921:3	11	if
LEAF_NODE	921:5	921:5	10	(
CONDITION	921:7	921:7	10	isMapped ( tif )
EXPR	921:7	921:7	11	isMapped ( tif )
FUNCTION_CALL	921:7	921:19	12	isMapped ( tif )
CALLEE	921:7	921:7	13	isMapped
LEAF_NODE	921:7	921:7	14	isMapped
LEAF_NODE	921:15	921:15	13	(
ARGUMENT	921:16	921:16	13	tif
FIELD	921:16	921:16	14	tif
LEAF_NODE	921:16	921:16	15	tif
LEAF_NODE	921:19	921:19	13	)
LEAF_NODE	921:21	921:21	10	)
STATEMENTS	922:3	933:3	10	
LEAF_NODE	922:3	922:3	11	{
STATEMENTS	923:4	928:4	11	
SELECTION	923:4	925:4	12	
KEYWORD	923:4	923:4	13	if
LEAF_NODE	923:4	923:4	14	if
LEAF_NODE	923:7	923:7	13	(
CONDITION	923:8	923:8	13	bytecountm > tif -> tif_rawdatasize && ! TIFFReadBufferSetup ( tif , 0 , bytecountm )
EXPR	923:8	923:8	14	bytecountm > tif -> tif_rawdatasize && ! TIFFReadBufferSetup ( tif , 0 , bytecountm )
AND	923:8	924:8	15	bytecountm > tif -> tif_rawdatasize && ! TIFFReadBufferSetup ( tif , 0 , bytecountm )
EXPR	923:8	923:21	16	bytecountm > tif -> tif_rawdatasize
FIELD	923:8	923:8	17	bytecountm
LEAF_NODE	923:8	923:8	18	bytecountm
REL_OPERATOR	923:19	923:19	17	>
LEAF_NODE	923:19	923:19	18	>
FIELD	923:21	923:26	17	tif -> tif_rawdatasize
LEAF_NODE	923:21	923:21	18	tif
LEAF_NODE	923:24	923:24	18	->
LEAF_NODE	923:26	923:26	18	tif_rawdatasize
LEAF_NODE	923:42	923:42	16	&&
EXPR	924:8	924:8	16	! TIFFReadBufferSetup ( tif , 0 , bytecountm )
UNARY_EXPR	924:8	924:9	17	! TIFFReadBufferSetup ( tif , 0 , bytecountm )
UNARY_OPERATOR	924:8	924:8	18	!
LEAF_NODE	924:8	924:8	19	!
FUNCTION_CALL	924:9	924:47	18	TIFFReadBufferSetup ( tif , 0 , bytecountm )
CALLEE	924:9	924:9	19	TIFFReadBufferSetup
LEAF_NODE	924:9	924:9	20	TIFFReadBufferSetup
LEAF_NODE	924:28	924:28	19	(
ARGUMENT	924:29	924:29	19	tif
FIELD	924:29	924:29	20	tif
LEAF_NODE	924:29	924:29	21	tif
LEAF_NODE	924:32	924:32	19	,
ARGUMENT	924:34	924:34	19	0
FIELD	924:34	924:34	20	0
LEAF_NODE	924:34	924:34	21	0
LEAF_NODE	924:35	924:35	19	,
ARGUMENT	924:37	924:37	19	bytecountm
FIELD	924:37	924:37	20	bytecountm
LEAF_NODE	924:37	924:37	21	bytecountm
LEAF_NODE	924:47	924:47	19	)
LEAF_NODE	924:48	924:48	13	)
STATEMENTS	925:4	927:4	13	
LEAF_NODE	925:4	925:4	14	{
STATEMENTS	926:5	926:5	14	
JUMP_STATEMENT	926:5	926:15	15	return ( 0 ) ;
KEYWORD	926:5	926:5	16	return
LEAF_NODE	926:5	926:5	17	return
DESTINATION	926:12	926:12	16	( 0 )
EXPR	926:12	926:14	17	( 0 )
LEAF_NODE	926:12	926:12	18	(
FIELD	926:13	926:13	18	0
LEAF_NODE	926:13	926:13	19	0
LEAF_NODE	926:14	926:14	18	)
LEAF_NODE	926:15	926:15	16	;
LEAF_NODE	927:4	927:4	14	}
SELECTION	928:4	930:4	12	
KEYWORD	928:4	928:4	13	if
LEAF_NODE	928:4	928:4	14	if
LEAF_NODE	928:7	928:7	13	(
CONDITION	928:8	928:8	13	TIFFReadRawStrip1 ( tif , strip , tif -> tif_rawdata , bytecountm , module ) != bytecountm
EXPR	928:8	929:31	14	TIFFReadRawStrip1 ( tif , strip , tif -> tif_rawdata , bytecountm , module ) != bytecountm
FUNCTION_CALL	928:8	929:26	15	TIFFReadRawStrip1 ( tif , strip , tif -> tif_rawdata , bytecountm , module )
CALLEE	928:8	928:8	16	TIFFReadRawStrip1
LEAF_NODE	928:8	928:8	17	TIFFReadRawStrip1
LEAF_NODE	928:25	928:25	16	(
ARGUMENT	928:26	928:26	16	tif
FIELD	928:26	928:26	17	tif
LEAF_NODE	928:26	928:26	18	tif
LEAF_NODE	928:29	928:29	16	,
ARGUMENT	928:31	928:31	16	strip
FIELD	928:31	928:31	17	strip
LEAF_NODE	928:31	928:31	18	strip
LEAF_NODE	928:36	928:36	16	,
ARGUMENT	928:38	928:38	16	tif -> tif_rawdata
FIELD	928:38	928:43	17	tif -> tif_rawdata
LEAF_NODE	928:38	928:38	18	tif
LEAF_NODE	928:41	928:41	18	->
LEAF_NODE	928:43	928:43	18	tif_rawdata
LEAF_NODE	928:54	928:54	16	,
ARGUMENT	929:8	929:8	16	bytecountm
FIELD	929:8	929:8	17	bytecountm
LEAF_NODE	929:8	929:8	18	bytecountm
LEAF_NODE	929:18	929:18	16	,
ARGUMENT	929:20	929:20	16	module
FIELD	929:20	929:20	17	module
LEAF_NODE	929:20	929:20	18	module
LEAF_NODE	929:26	929:26	16	)
EQ_OPERATOR	929:28	929:28	15	!=
LEAF_NODE	929:28	929:28	16	!=
FIELD	929:31	929:31	15	bytecountm
LEAF_NODE	929:31	929:31	16	bytecountm
LEAF_NODE	929:41	929:41	13	)
STATEMENTS	930:4	932:4	13	
LEAF_NODE	930:4	930:4	14	{
STATEMENTS	931:5	931:5	14	
JUMP_STATEMENT	931:5	931:15	15	return ( 0 ) ;
KEYWORD	931:5	931:5	16	return
LEAF_NODE	931:5	931:5	17	return
DESTINATION	931:12	931:12	16	( 0 )
EXPR	931:12	931:14	17	( 0 )
LEAF_NODE	931:12	931:12	18	(
FIELD	931:13	931:13	18	0
LEAF_NODE	931:13	931:13	19	0
LEAF_NODE	931:14	931:14	18	)
LEAF_NODE	931:15	931:15	16	;
LEAF_NODE	932:4	932:4	14	}
LEAF_NODE	933:3	933:3	11	}
SELECTION	934:3	935:3	9	
KEYWORD	934:3	934:3	10	else
LEAF_NODE	934:3	934:3	11	else
STATEMENTS	935:3	941:3	10	
LEAF_NODE	935:3	935:3	11	{
STATEMENTS	936:4	936:4	11	
SELECTION	936:4	938:4	12	
KEYWORD	936:4	936:4	13	if
LEAF_NODE	936:4	936:4	14	if
LEAF_NODE	936:7	936:7	13	(
CONDITION	936:8	936:8	13	TIFFReadRawStripOrTile2 ( tif , strip , 1 , bytecountm , module ) != bytecountm
EXPR	936:8	937:31	14	TIFFReadRawStripOrTile2 ( tif , strip , 1 , bytecountm , module ) != bytecountm
FUNCTION_CALL	936:8	937:26	15	TIFFReadRawStripOrTile2 ( tif , strip , 1 , bytecountm , module )
CALLEE	936:8	936:8	16	TIFFReadRawStripOrTile2
LEAF_NODE	936:8	936:8	17	TIFFReadRawStripOrTile2
LEAF_NODE	936:31	936:31	16	(
ARGUMENT	936:32	936:32	16	tif
FIELD	936:32	936:32	17	tif
LEAF_NODE	936:32	936:32	18	tif
LEAF_NODE	936:35	936:35	16	,
ARGUMENT	936:37	936:37	16	strip
FIELD	936:37	936:37	17	strip
LEAF_NODE	936:37	936:37	18	strip
LEAF_NODE	936:42	936:42	16	,
ARGUMENT	936:44	936:44	16	1
FIELD	936:44	936:44	17	1
LEAF_NODE	936:44	936:44	18	1
LEAF_NODE	936:45	936:45	16	,
ARGUMENT	937:8	937:8	16	bytecountm
FIELD	937:8	937:8	17	bytecountm
LEAF_NODE	937:8	937:8	18	bytecountm
LEAF_NODE	937:18	937:18	16	,
ARGUMENT	937:20	937:20	16	module
FIELD	937:20	937:20	17	module
LEAF_NODE	937:20	937:20	18	module
LEAF_NODE	937:26	937:26	16	)
EQ_OPERATOR	937:28	937:28	15	!=
LEAF_NODE	937:28	937:28	16	!=
FIELD	937:31	937:31	15	bytecountm
LEAF_NODE	937:31	937:31	16	bytecountm
LEAF_NODE	937:41	937:41	13	)
STATEMENTS	938:4	940:4	13	
LEAF_NODE	938:4	938:4	14	{
STATEMENTS	939:5	939:5	14	
JUMP_STATEMENT	939:5	939:15	15	return ( 0 ) ;
KEYWORD	939:5	939:5	16	return
LEAF_NODE	939:5	939:5	17	return
DESTINATION	939:12	939:12	16	( 0 )
EXPR	939:12	939:14	17	( 0 )
LEAF_NODE	939:12	939:12	18	(
FIELD	939:13	939:13	18	0
LEAF_NODE	939:13	939:13	19	0
LEAF_NODE	939:14	939:14	18	)
LEAF_NODE	939:15	939:15	16	;
LEAF_NODE	940:4	940:4	14	}
LEAF_NODE	941:3	941:3	11	}
EXPR_STATEMENT	944:24	944:47	9	tif -> tif_rawdataoff = 0 ;
EXPR	944:24	944:24	10	tif -> tif_rawdataoff = 0
ASSIGN	944:24	944:46	11	tif -> tif_rawdataoff = 0
LVAL	944:24	944:24	12	tif -> tif_rawdataoff
FIELD	944:24	944:29	13	tif -> tif_rawdataoff
LEAF_NODE	944:24	944:24	14	tif
LEAF_NODE	944:27	944:27	14	->
LEAF_NODE	944:29	944:29	14	tif_rawdataoff
ASSIGN_OP	944:44	944:44	12	=
LEAF_NODE	944:44	944:44	13	=
RVAL	944:46	944:46	12	0
FIELD	944:46	944:46	13	0
LEAF_NODE	944:46	944:46	14	0
LEAF_NODE	944:47	944:47	10	;
EXPR_STATEMENT	945:24	945:59	9	tif -> tif_rawdataloaded = bytecountm ;
EXPR	945:24	945:24	10	tif -> tif_rawdataloaded = bytecountm
ASSIGN	945:24	945:49	11	tif -> tif_rawdataloaded = bytecountm
LVAL	945:24	945:24	12	tif -> tif_rawdataloaded
FIELD	945:24	945:29	13	tif -> tif_rawdataloaded
LEAF_NODE	945:24	945:24	14	tif
LEAF_NODE	945:27	945:27	14	->
LEAF_NODE	945:29	945:29	14	tif_rawdataloaded
ASSIGN_OP	945:47	945:47	12	=
LEAF_NODE	945:47	945:47	13	=
RVAL	945:49	945:49	12	bytecountm
FIELD	945:49	945:49	13	bytecountm
LEAF_NODE	945:49	945:49	14	bytecountm
LEAF_NODE	945:59	945:59	10	;
SELECTION	947:3	949:4	9	
KEYWORD	947:3	947:3	10	if
LEAF_NODE	947:3	947:3	11	if
LEAF_NODE	947:6	947:6	10	(
CONDITION	947:7	947:7	10	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	947:7	947:7	11	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	947:7	948:7	12	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	947:7	947:7	13	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	947:7	947:8	14	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	947:7	947:7	15	!
LEAF_NODE	947:7	947:7	16	!
FUNCTION_CALL	947:8	947:41	15	isFillOrder ( tif , td -> td_fillorder )
CALLEE	947:8	947:8	16	isFillOrder
LEAF_NODE	947:8	947:8	17	isFillOrder
LEAF_NODE	947:19	947:19	16	(
ARGUMENT	947:20	947:20	16	tif
FIELD	947:20	947:20	17	tif
LEAF_NODE	947:20	947:20	18	tif
LEAF_NODE	947:23	947:23	16	,
ARGUMENT	947:25	947:25	16	td -> td_fillorder
FIELD	947:25	947:29	17	td -> td_fillorder
LEAF_NODE	947:25	947:25	18	td
LEAF_NODE	947:27	947:27	18	->
LEAF_NODE	947:29	947:29	18	td_fillorder
LEAF_NODE	947:41	947:41	16	)
LEAF_NODE	947:43	947:43	13	&&
EXPR	948:7	948:43	13	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	948:7	948:7	14	(
FIELD	948:8	948:13	14	tif -> tif_flags
LEAF_NODE	948:8	948:8	15	tif
LEAF_NODE	948:11	948:11	15	->
LEAF_NODE	948:13	948:13	15	tif_flags
LEAF_NODE	948:23	948:23	14	&
FIELD	948:25	948:25	14	TIFF_NOBITREV
LEAF_NODE	948:25	948:25	15	TIFF_NOBITREV
LEAF_NODE	948:38	948:38	14	)
EQ_OPERATOR	948:40	948:40	14	==
LEAF_NODE	948:40	948:40	15	==
FIELD	948:43	948:43	14	0
LEAF_NODE	948:43	948:43	15	0
LEAF_NODE	948:44	948:44	10	)
STATEMENTS	949:4	949:4	10	
EXPR_STATEMENT	949:4	949:49	11	TIFFReverseBits ( tif -> tif_rawdata , bytecountm ) ;
EXPR	949:4	949:4	12	TIFFReverseBits ( tif -> tif_rawdata , bytecountm )
FUNCTION_CALL	949:4	949:48	13	TIFFReverseBits ( tif -> tif_rawdata , bytecountm )
CALLEE	949:4	949:4	14	TIFFReverseBits
LEAF_NODE	949:4	949:4	15	TIFFReverseBits
LEAF_NODE	949:19	949:19	14	(
ARGUMENT	949:20	949:20	14	tif -> tif_rawdata
FIELD	949:20	949:25	15	tif -> tif_rawdata
LEAF_NODE	949:20	949:20	16	tif
LEAF_NODE	949:23	949:23	16	->
LEAF_NODE	949:25	949:25	16	tif_rawdata
LEAF_NODE	949:36	949:36	14	,
ARGUMENT	949:38	949:38	14	bytecountm
FIELD	949:38	949:38	15	bytecountm
LEAF_NODE	949:38	949:38	16	bytecountm
LEAF_NODE	949:48	949:48	14	)
LEAF_NODE	949:49	949:49	12	;
LEAF_NODE	950:16	950:16	8	}
LEAF_NODE	951:1	951:1	5	}
JUMP_STATEMENT	952:1	952:36	3	return ( TIFFStartStrip ( tif , strip ) ) ;
KEYWORD	952:1	952:1	4	return
LEAF_NODE	952:1	952:1	5	return
DESTINATION	952:8	952:8	4	( TIFFStartStrip ( tif , strip ) )
EXPR	952:8	952:35	5	( TIFFStartStrip ( tif , strip ) )
LEAF_NODE	952:8	952:8	6	(
FUNCTION_CALL	952:9	952:34	6	TIFFStartStrip ( tif , strip )
CALLEE	952:9	952:9	7	TIFFStartStrip
LEAF_NODE	952:9	952:9	8	TIFFStartStrip
LEAF_NODE	952:23	952:23	7	(
ARGUMENT	952:24	952:24	7	tif
FIELD	952:24	952:24	8	tif
LEAF_NODE	952:24	952:24	9	tif
LEAF_NODE	952:27	952:27	7	,
ARGUMENT	952:29	952:29	7	strip
FIELD	952:29	952:29	8	strip
LEAF_NODE	952:29	952:29	9	strip
LEAF_NODE	952:34	952:34	7	)
LEAF_NODE	952:35	952:35	6	)
LEAF_NODE	952:36	952:36	4	;
LEAF_NODE	953:0	953:0	2	}
FUNCTION_DEF	964:0	971:0	1	
RETURN_TYPE	964:0	964:0	2	tmsize_t
TYPE_NAME	964:0	964:0	3	tmsize_t
LEAF_NODE	964:0	964:0	4	tmsize_t
FUNCTION_NAME	965:0	965:0	2	TIFFReadTile
LEAF_NODE	965:0	965:0	3	TIFFReadTile
PARAMETER_LIST	965:12	965:73	2	( TIFF * tif , void * buf , uint32 x , uint32 y , uint32 z , uint16 s )
LEAF_NODE	965:12	965:12	3	(
PARAMETER_DECL	965:13	965:19	3	TIFF * tif
TYPE	965:13	965:17	4	TIFF *
TYPE_NAME	965:13	965:13	5	TIFF
LEAF_NODE	965:13	965:13	6	TIFF
POINTER	965:17	965:17	5	*
LEAF_NODE	965:17	965:17	6	*
NAME	965:19	965:19	4	tif
LEAF_NODE	965:19	965:19	5	tif
LEAF_NODE	965:22	965:22	3	,
PARAMETER_DECL	965:24	965:30	3	void * buf
TYPE	965:24	965:28	4	void *
TYPE_NAME	965:24	965:24	5	void
LEAF_NODE	965:24	965:24	6	void
POINTER	965:28	965:28	5	*
LEAF_NODE	965:28	965:28	6	*
NAME	965:30	965:30	4	buf
LEAF_NODE	965:30	965:30	5	buf
LEAF_NODE	965:33	965:33	3	,
PARAMETER_DECL	965:35	965:42	3	uint32 x
TYPE	965:35	965:35	4	uint32
TYPE_NAME	965:35	965:35	5	uint32
LEAF_NODE	965:35	965:35	6	uint32
NAME	965:42	965:42	4	x
LEAF_NODE	965:42	965:42	5	x
LEAF_NODE	965:43	965:43	3	,
PARAMETER_DECL	965:45	965:52	3	uint32 y
TYPE	965:45	965:45	4	uint32
TYPE_NAME	965:45	965:45	5	uint32
LEAF_NODE	965:45	965:45	6	uint32
NAME	965:52	965:52	4	y
LEAF_NODE	965:52	965:52	5	y
LEAF_NODE	965:53	965:53	3	,
PARAMETER_DECL	965:55	965:62	3	uint32 z
TYPE	965:55	965:55	4	uint32
TYPE_NAME	965:55	965:55	5	uint32
LEAF_NODE	965:55	965:55	6	uint32
NAME	965:62	965:62	4	z
LEAF_NODE	965:62	965:62	5	z
LEAF_NODE	965:63	965:63	3	,
PARAMETER_DECL	965:65	965:72	3	uint16 s
TYPE	965:65	965:65	4	uint16
TYPE_NAME	965:65	965:65	5	uint16
LEAF_NODE	965:65	965:65	6	uint16
NAME	965:72	965:72	4	s
LEAF_NODE	965:72	965:72	5	s
LEAF_NODE	965:73	965:73	3	)
LEAF_NODE	966:0	966:0	2	{
STATEMENTS	967:1	969:1	2	
SELECTION	967:1	968:2	3	
KEYWORD	967:1	967:1	4	if
LEAF_NODE	967:1	967:1	5	if
LEAF_NODE	967:4	967:4	4	(
CONDITION	967:5	967:5	4	! TIFFCheckRead ( tif , 1 ) || ! TIFFCheckTile ( tif , x , y , z , s )
EXPR	967:5	967:5	5	! TIFFCheckRead ( tif , 1 ) || ! TIFFCheckTile ( tif , x , y , z , s )
OR	967:5	967:31	6	! TIFFCheckRead ( tif , 1 ) || ! TIFFCheckTile ( tif , x , y , z , s )
EXPR	967:5	967:5	7	! TIFFCheckRead ( tif , 1 )
UNARY_EXPR	967:5	967:6	8	! TIFFCheckRead ( tif , 1 )
UNARY_OPERATOR	967:5	967:5	9	!
LEAF_NODE	967:5	967:5	10	!
FUNCTION_CALL	967:6	967:26	9	TIFFCheckRead ( tif , 1 )
CALLEE	967:6	967:6	10	TIFFCheckRead
LEAF_NODE	967:6	967:6	11	TIFFCheckRead
LEAF_NODE	967:19	967:19	10	(
ARGUMENT	967:20	967:20	10	tif
FIELD	967:20	967:20	11	tif
LEAF_NODE	967:20	967:20	12	tif
LEAF_NODE	967:23	967:23	10	,
ARGUMENT	967:25	967:25	10	1
FIELD	967:25	967:25	11	1
LEAF_NODE	967:25	967:25	12	1
LEAF_NODE	967:26	967:26	10	)
LEAF_NODE	967:28	967:28	7	||
EXPR	967:31	967:31	7	! TIFFCheckTile ( tif , x , y , z , s )
UNARY_EXPR	967:31	967:32	8	! TIFFCheckTile ( tif , x , y , z , s )
UNARY_OPERATOR	967:31	967:31	9	!
LEAF_NODE	967:31	967:31	10	!
FUNCTION_CALL	967:32	967:61	9	TIFFCheckTile ( tif , x , y , z , s )
CALLEE	967:32	967:32	10	TIFFCheckTile
LEAF_NODE	967:32	967:32	11	TIFFCheckTile
LEAF_NODE	967:45	967:45	10	(
ARGUMENT	967:46	967:46	10	tif
FIELD	967:46	967:46	11	tif
LEAF_NODE	967:46	967:46	12	tif
LEAF_NODE	967:49	967:49	10	,
ARGUMENT	967:51	967:51	10	x
FIELD	967:51	967:51	11	x
LEAF_NODE	967:51	967:51	12	x
LEAF_NODE	967:52	967:52	10	,
ARGUMENT	967:54	967:54	10	y
FIELD	967:54	967:54	11	y
LEAF_NODE	967:54	967:54	12	y
LEAF_NODE	967:55	967:55	10	,
ARGUMENT	967:57	967:57	10	z
FIELD	967:57	967:57	11	z
LEAF_NODE	967:57	967:57	12	z
LEAF_NODE	967:58	967:58	10	,
ARGUMENT	967:60	967:60	10	s
FIELD	967:60	967:60	11	s
LEAF_NODE	967:60	967:60	12	s
LEAF_NODE	967:61	967:61	10	)
LEAF_NODE	967:62	967:62	4	)
STATEMENTS	968:2	968:2	4	
JUMP_STATEMENT	968:2	968:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	968:2	968:2	6	return
LEAF_NODE	968:2	968:2	7	return
DESTINATION	968:9	968:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	968:9	968:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	968:9	968:9	8	(
LEAF_NODE	968:10	968:10	8	(
TYPE_NAME	968:11	968:11	8	tmsize_t
LEAF_NODE	968:11	968:11	9	tmsize_t
LEAF_NODE	968:19	968:19	8	)
LEAF_NODE	968:20	968:20	8	(
UNARY_EXPR	968:21	968:22	8	- 1
UNARY_OPERATOR	968:21	968:21	9	-
LEAF_NODE	968:21	968:21	10	-
FIELD	968:22	968:22	9	1
LEAF_NODE	968:22	968:22	10	1
LEAF_NODE	968:23	968:23	8	)
LEAF_NODE	968:24	968:24	8	)
LEAF_NODE	968:25	968:25	6	;
JUMP_STATEMENT	969:1	970:60	3	return ( TIFFReadEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) ) ) ;
KEYWORD	969:1	969:1	4	return
LEAF_NODE	969:1	969:1	5	return
DESTINATION	969:8	969:8	4	( TIFFReadEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) ) )
EXPR	969:8	970:59	5	( TIFFReadEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) ) )
LEAF_NODE	969:8	969:8	6	(
FUNCTION_CALL	969:9	970:58	6	TIFFReadEncodedTile ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , ( tmsize_t ) ( - 1 ) )
CALLEE	969:9	969:9	7	TIFFReadEncodedTile
LEAF_NODE	969:9	969:9	8	TIFFReadEncodedTile
LEAF_NODE	969:28	969:28	7	(
ARGUMENT	969:29	969:29	7	tif
FIELD	969:29	969:29	8	tif
LEAF_NODE	969:29	969:29	9	tif
LEAF_NODE	969:32	969:32	7	,
ARGUMENT	970:5	970:5	7	TIFFComputeTile ( tif , x , y , z , s )
FUNCTION_CALL	970:5	970:36	8	TIFFComputeTile ( tif , x , y , z , s )
CALLEE	970:5	970:5	9	TIFFComputeTile
LEAF_NODE	970:5	970:5	10	TIFFComputeTile
LEAF_NODE	970:20	970:20	9	(
ARGUMENT	970:21	970:21	9	tif
FIELD	970:21	970:21	10	tif
LEAF_NODE	970:21	970:21	11	tif
LEAF_NODE	970:24	970:24	9	,
ARGUMENT	970:26	970:26	9	x
FIELD	970:26	970:26	10	x
LEAF_NODE	970:26	970:26	11	x
LEAF_NODE	970:27	970:27	9	,
ARGUMENT	970:29	970:29	9	y
FIELD	970:29	970:29	10	y
LEAF_NODE	970:29	970:29	11	y
LEAF_NODE	970:30	970:30	9	,
ARGUMENT	970:32	970:32	9	z
FIELD	970:32	970:32	10	z
LEAF_NODE	970:32	970:32	11	z
LEAF_NODE	970:33	970:33	9	,
ARGUMENT	970:35	970:35	9	s
FIELD	970:35	970:35	10	s
LEAF_NODE	970:35	970:35	11	s
LEAF_NODE	970:36	970:36	9	)
LEAF_NODE	970:37	970:37	7	,
ARGUMENT	970:39	970:39	7	buf
FIELD	970:39	970:39	8	buf
LEAF_NODE	970:39	970:39	9	buf
LEAF_NODE	970:42	970:42	7	,
ARGUMENT	970:44	970:57	7	( tmsize_t ) ( - 1 )
LEAF_NODE	970:44	970:44	8	(
TYPE_NAME	970:45	970:45	8	tmsize_t
LEAF_NODE	970:45	970:45	9	tmsize_t
LEAF_NODE	970:53	970:53	8	)
LEAF_NODE	970:54	970:54	8	(
UNARY_EXPR	970:55	970:56	8	- 1
UNARY_OPERATOR	970:55	970:55	9	-
LEAF_NODE	970:55	970:55	10	-
FIELD	970:56	970:56	9	1
LEAF_NODE	970:56	970:56	10	1
LEAF_NODE	970:57	970:57	8	)
LEAF_NODE	970:58	970:58	7	)
LEAF_NODE	970:59	970:59	6	)
LEAF_NODE	970:60	970:60	4	;
LEAF_NODE	971:0	971:0	2	}
FUNCTION_DEF	977:0	1020:0	1	
RETURN_TYPE	977:0	977:0	2	tmsize_t
TYPE_NAME	977:0	977:0	3	tmsize_t
LEAF_NODE	977:0	977:0	4	tmsize_t
FUNCTION_NAME	978:0	978:0	2	TIFFReadEncodedTile
LEAF_NODE	978:0	978:0	3	TIFFReadEncodedTile
PARAMETER_LIST	978:19	978:68	2	( TIFF * tif , uint32 tile , void * buf , tmsize_t size )
LEAF_NODE	978:19	978:19	3	(
PARAMETER_DECL	978:20	978:26	3	TIFF * tif
TYPE	978:20	978:24	4	TIFF *
TYPE_NAME	978:20	978:20	5	TIFF
LEAF_NODE	978:20	978:20	6	TIFF
POINTER	978:24	978:24	5	*
LEAF_NODE	978:24	978:24	6	*
NAME	978:26	978:26	4	tif
LEAF_NODE	978:26	978:26	5	tif
LEAF_NODE	978:29	978:29	3	,
PARAMETER_DECL	978:31	978:38	3	uint32 tile
TYPE	978:31	978:31	4	uint32
TYPE_NAME	978:31	978:31	5	uint32
LEAF_NODE	978:31	978:31	6	uint32
NAME	978:38	978:38	4	tile
LEAF_NODE	978:38	978:38	5	tile
LEAF_NODE	978:42	978:42	3	,
PARAMETER_DECL	978:44	978:50	3	void * buf
TYPE	978:44	978:48	4	void *
TYPE_NAME	978:44	978:44	5	void
LEAF_NODE	978:44	978:44	6	void
POINTER	978:48	978:48	5	*
LEAF_NODE	978:48	978:48	6	*
NAME	978:50	978:50	4	buf
LEAF_NODE	978:50	978:50	5	buf
LEAF_NODE	978:53	978:53	3	,
PARAMETER_DECL	978:55	978:64	3	tmsize_t size
TYPE	978:55	978:55	4	tmsize_t
TYPE_NAME	978:55	978:55	5	tmsize_t
LEAF_NODE	978:55	978:55	6	tmsize_t
NAME	978:64	978:64	4	size
LEAF_NODE	978:64	978:64	5	size
LEAF_NODE	978:68	978:68	3	)
LEAF_NODE	979:0	979:0	2	{
STATEMENTS	980:1	1018:3	2	
LEAF_NODE	980:1	980:1	3	static
SIMPLE_DECL	980:8	980:51	3	const char [ ] module ; module = "TIFFReadEncodedTile" ;
VAR_DECL	980:8	980:19	4	const char [ ] module ; module = "TIFFReadEncodedTile"
TYPE	980:8	980:25	5	const char [ ]
TYPE_NAME	980:8	980:14	6	const char
LEAF_NODE	980:8	980:8	7	const
LEAF_NODE	980:14	980:14	7	char
TYPE_SUFFIX	980:25	980:26	6	[ ]
LEAF_NODE	980:25	980:25	7	[
LEAF_NODE	980:26	980:26	7	]
NAME	980:19	980:19	5	module
LEAF_NODE	980:19	980:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	980:19	980:19	5	module = "TIFFReadEncodedTile"
ASSIGN	980:19	980:30	6	module = "TIFFReadEncodedTile"
LVAL	980:19	980:19	7	module
NAME	980:19	980:19	8	module
LEAF_NODE	980:19	980:19	9	module
ASSIGN_OP	980:28	980:28	7	=
LEAF_NODE	980:28	980:28	8	=
RVAL	980:30	980:30	7	"TIFFReadEncodedTile"
FIELD	980:30	980:30	8	"TIFFReadEncodedTile"
LEAF_NODE	980:30	980:30	9	"TIFFReadEncodedTile"
LEAF_NODE	980:51	980:51	4	;
SIMPLE_DECL	981:1	981:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	981:1	981:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	981:1	981:15	5	TIFFDirectory *
TYPE_NAME	981:1	981:1	6	TIFFDirectory
LEAF_NODE	981:1	981:1	7	TIFFDirectory
POINTER	981:15	981:15	6	*
LEAF_NODE	981:15	981:15	7	*
NAME	981:16	981:16	5	td
LEAF_NODE	981:16	981:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	981:16	981:16	5	td = & tif -> tif_dir
ASSIGN	981:16	981:21	6	td = & tif -> tif_dir
LVAL	981:16	981:16	7	td
NAME	981:16	981:16	8	td
LEAF_NODE	981:16	981:16	9	td
ASSIGN_OP	981:19	981:19	7	=
LEAF_NODE	981:19	981:19	8	=
RVAL	981:21	981:21	7	& tif -> tif_dir
UNARY_EXPR	981:21	981:22	8	& tif -> tif_dir
UNARY_OPERATOR	981:21	981:21	9	&
LEAF_NODE	981:21	981:21	10	&
FIELD	981:22	981:27	9	tif -> tif_dir
LEAF_NODE	981:22	981:22	10	tif
LEAF_NODE	981:25	981:25	10	->
LEAF_NODE	981:27	981:27	10	tif_dir
LEAF_NODE	981:34	981:34	4	;
SIMPLE_DECL	982:1	982:38	3	tmsize_t tilesize ; tilesize = tif -> tif_tilesize ;
VAR_DECL	982:1	982:10	4	tmsize_t tilesize ; tilesize = tif -> tif_tilesize
TYPE	982:1	982:1	5	tmsize_t
TYPE_NAME	982:1	982:1	6	tmsize_t
LEAF_NODE	982:1	982:1	7	tmsize_t
NAME	982:10	982:10	5	tilesize
LEAF_NODE	982:10	982:10	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	982:10	982:10	5	tilesize = tif -> tif_tilesize
ASSIGN	982:10	982:21	6	tilesize = tif -> tif_tilesize
LVAL	982:10	982:10	7	tilesize
NAME	982:10	982:10	8	tilesize
LEAF_NODE	982:10	982:10	9	tilesize
ASSIGN_OP	982:19	982:19	7	=
LEAF_NODE	982:19	982:19	8	=
RVAL	982:21	982:21	7	tif -> tif_tilesize
FIELD	982:21	982:26	8	tif -> tif_tilesize
LEAF_NODE	982:21	982:21	9	tif
LEAF_NODE	982:24	982:24	9	->
LEAF_NODE	982:26	982:26	9	tif_tilesize
LEAF_NODE	982:38	982:38	4	;
SELECTION	984:1	985:2	3	
KEYWORD	984:1	984:1	4	if
LEAF_NODE	984:1	984:1	5	if
LEAF_NODE	984:4	984:4	4	(
CONDITION	984:5	984:5	4	! TIFFCheckRead ( tif , 1 )
EXPR	984:5	984:5	5	! TIFFCheckRead ( tif , 1 )
UNARY_EXPR	984:5	984:6	6	! TIFFCheckRead ( tif , 1 )
UNARY_OPERATOR	984:5	984:5	7	!
LEAF_NODE	984:5	984:5	8	!
FUNCTION_CALL	984:6	984:26	7	TIFFCheckRead ( tif , 1 )
CALLEE	984:6	984:6	8	TIFFCheckRead
LEAF_NODE	984:6	984:6	9	TIFFCheckRead
LEAF_NODE	984:19	984:19	8	(
ARGUMENT	984:20	984:20	8	tif
FIELD	984:20	984:20	9	tif
LEAF_NODE	984:20	984:20	10	tif
LEAF_NODE	984:23	984:23	8	,
ARGUMENT	984:25	984:25	8	1
FIELD	984:25	984:25	9	1
LEAF_NODE	984:25	984:25	10	1
LEAF_NODE	984:26	984:26	8	)
LEAF_NODE	984:27	984:27	4	)
STATEMENTS	985:2	985:2	4	
JUMP_STATEMENT	985:2	985:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	985:2	985:2	6	return
LEAF_NODE	985:2	985:2	7	return
DESTINATION	985:9	985:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	985:9	985:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	985:9	985:9	8	(
LEAF_NODE	985:10	985:10	8	(
TYPE_NAME	985:11	985:11	8	tmsize_t
LEAF_NODE	985:11	985:11	9	tmsize_t
LEAF_NODE	985:19	985:19	8	)
LEAF_NODE	985:20	985:20	8	(
UNARY_EXPR	985:21	985:22	8	- 1
UNARY_OPERATOR	985:21	985:21	9	-
LEAF_NODE	985:21	985:21	10	-
FIELD	985:22	985:22	9	1
LEAF_NODE	985:22	985:22	10	1
LEAF_NODE	985:23	985:23	8	)
LEAF_NODE	985:24	985:24	8	)
LEAF_NODE	985:25	985:25	6	;
SELECTION	986:1	986:29	3	
KEYWORD	986:1	986:1	4	if
LEAF_NODE	986:1	986:1	5	if
LEAF_NODE	986:4	986:4	4	(
CONDITION	986:5	986:5	4	tile >= td -> td_nstrips
EXPR	986:5	986:13	5	tile >= td -> td_nstrips
FIELD	986:5	986:5	6	tile
LEAF_NODE	986:5	986:5	7	tile
REL_OPERATOR	986:10	986:10	6	>=
LEAF_NODE	986:10	986:10	7	>=
FIELD	986:13	986:17	6	td -> td_nstrips
LEAF_NODE	986:13	986:13	7	td
LEAF_NODE	986:15	986:15	7	->
LEAF_NODE	986:17	986:17	7	td_nstrips
LEAF_NODE	986:27	986:27	4	)
STATEMENTS	986:29	991:1	4	
LEAF_NODE	986:29	986:29	5	{
STATEMENTS	987:2	990:2	5	
EXPR_STATEMENT	987:2	989:59	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips ) ;
EXPR	987:2	987:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
FUNCTION_CALL	987:2	989:58	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
CALLEE	987:2	987:2	9	TIFFErrorExt
LEAF_NODE	987:2	987:2	10	TIFFErrorExt
LEAF_NODE	987:14	987:14	9	(
ARGUMENT	987:15	987:15	9	tif -> tif_clientdata
FIELD	987:15	987:20	10	tif -> tif_clientdata
LEAF_NODE	987:15	987:15	11	tif
LEAF_NODE	987:18	987:18	11	->
LEAF_NODE	987:20	987:20	11	tif_clientdata
LEAF_NODE	987:34	987:34	9	,
ARGUMENT	987:36	987:36	9	module
FIELD	987:36	987:36	10	module
LEAF_NODE	987:36	987:36	11	module
LEAF_NODE	987:42	987:42	9	,
ARGUMENT	988:6	988:6	9	"%lu: Tile out of range, max %lu"
FIELD	988:6	988:6	10	"%lu: Tile out of range, max %lu"
LEAF_NODE	988:6	988:6	11	"%lu: Tile out of range, max %lu"
LEAF_NODE	988:39	988:39	9	,
ARGUMENT	989:6	989:22	9	( unsigned long ) tile
LEAF_NODE	989:6	989:6	10	(
TYPE_NAME	989:7	989:16	10	unsigned long
LEAF_NODE	989:7	989:7	11	unsigned
LEAF_NODE	989:16	989:16	11	long
LEAF_NODE	989:20	989:20	10	)
FIELD	989:22	989:22	10	tile
LEAF_NODE	989:22	989:22	11	tile
LEAF_NODE	989:26	989:26	9	,
ARGUMENT	989:28	989:44	9	( unsigned long ) td -> td_nstrips
LEAF_NODE	989:28	989:28	10	(
TYPE_NAME	989:29	989:38	10	unsigned long
LEAF_NODE	989:29	989:29	11	unsigned
LEAF_NODE	989:38	989:38	11	long
LEAF_NODE	989:42	989:42	10	)
FIELD	989:44	989:48	10	td -> td_nstrips
LEAF_NODE	989:44	989:44	11	td
LEAF_NODE	989:46	989:46	11	->
LEAF_NODE	989:48	989:48	11	td_nstrips
LEAF_NODE	989:58	989:58	9	)
LEAF_NODE	989:59	989:59	7	;
JUMP_STATEMENT	990:2	990:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	990:2	990:2	7	return
LEAF_NODE	990:2	990:2	8	return
DESTINATION	990:9	990:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	990:9	990:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	990:9	990:9	9	(
LEAF_NODE	990:10	990:10	9	(
TYPE_NAME	990:11	990:11	9	tmsize_t
LEAF_NODE	990:11	990:11	10	tmsize_t
LEAF_NODE	990:19	990:19	9	)
LEAF_NODE	990:20	990:20	9	(
UNARY_EXPR	990:21	990:22	9	- 1
UNARY_OPERATOR	990:21	990:21	10	-
LEAF_NODE	990:21	990:21	11	-
FIELD	990:22	990:22	10	1
LEAF_NODE	990:22	990:22	11	1
LEAF_NODE	990:23	990:23	9	)
LEAF_NODE	990:24	990:24	9	)
LEAF_NODE	990:25	990:25	7	;
LEAF_NODE	991:1	991:1	5	}
SELECTION	994:4	998:4	3	
KEYWORD	994:4	994:4	4	if
LEAF_NODE	994:4	994:4	5	if
LEAF_NODE	994:6	994:6	4	(
CONDITION	994:8	994:8	4	td -> td_compression == COMPRESSION_NONE && size != ( tmsize_t ) ( - 1 ) && size >= tilesize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	994:8	994:8	5	td -> td_compression == COMPRESSION_NONE && size != ( tmsize_t ) ( - 1 ) && size >= tilesize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	994:8	995:8	6	td -> td_compression == COMPRESSION_NONE && size != ( tmsize_t ) ( - 1 ) && size >= tilesize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	994:8	994:30	7	td -> td_compression == COMPRESSION_NONE
FIELD	994:8	994:12	8	td -> td_compression
LEAF_NODE	994:8	994:8	9	td
LEAF_NODE	994:10	994:10	9	->
LEAF_NODE	994:12	994:12	9	td_compression
EQ_OPERATOR	994:27	994:27	8	==
LEAF_NODE	994:27	994:27	9	==
FIELD	994:30	994:30	8	COMPRESSION_NONE
LEAF_NODE	994:30	994:30	9	COMPRESSION_NONE
LEAF_NODE	994:47	994:47	7	&&
EXPR	995:8	995:8	7	size != ( tmsize_t ) ( - 1 ) && size >= tilesize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	995:8	995:32	8	size != ( tmsize_t ) ( - 1 ) && size >= tilesize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	995:8	995:27	9	size != ( tmsize_t ) ( - 1 )
FIELD	995:8	995:8	10	size
LEAF_NODE	995:8	995:8	11	size
EQ_OPERATOR	995:12	995:12	10	!=
LEAF_NODE	995:12	995:12	11	!=
LEAF_NODE	995:14	995:14	10	(
TYPE_NAME	995:15	995:15	10	tmsize_t
LEAF_NODE	995:15	995:15	11	tmsize_t
LEAF_NODE	995:23	995:23	10	)
LEAF_NODE	995:24	995:24	10	(
UNARY_EXPR	995:25	995:26	10	- 1
UNARY_OPERATOR	995:25	995:25	11	-
LEAF_NODE	995:25	995:25	12	-
FIELD	995:26	995:26	11	1
LEAF_NODE	995:26	995:26	12	1
LEAF_NODE	995:27	995:27	10	)
LEAF_NODE	995:29	995:29	9	&&
EXPR	995:32	995:32	9	size >= tilesize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	995:32	996:8	10	size >= tilesize && ! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	995:32	995:40	11	size >= tilesize
FIELD	995:32	995:32	12	size
LEAF_NODE	995:32	995:32	13	size
REL_OPERATOR	995:37	995:37	12	>=
LEAF_NODE	995:37	995:37	13	>=
FIELD	995:40	995:40	12	tilesize
LEAF_NODE	995:40	995:40	13	tilesize
LEAF_NODE	995:49	995:49	11	&&
EXPR	996:8	996:8	11	! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
AND	996:8	997:8	12	! isMapped ( tif ) && ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
EXPR	996:8	996:8	13	! isMapped ( tif )
UNARY_EXPR	996:8	996:9	14	! isMapped ( tif )
UNARY_OPERATOR	996:8	996:8	15	!
LEAF_NODE	996:8	996:8	16	!
FUNCTION_CALL	996:9	996:21	15	isMapped ( tif )
CALLEE	996:9	996:9	16	isMapped
LEAF_NODE	996:9	996:9	17	isMapped
LEAF_NODE	996:17	996:17	16	(
ARGUMENT	996:18	996:18	16	tif
FIELD	996:18	996:18	17	tif
LEAF_NODE	996:18	996:18	18	tif
LEAF_NODE	996:21	996:21	16	)
LEAF_NODE	996:23	996:23	13	&&
EXPR	997:8	997:43	13	( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
LEAF_NODE	997:8	997:8	14	(
LEAF_NODE	997:9	997:9	14	(
FIELD	997:10	997:15	14	tif -> tif_flags
LEAF_NODE	997:10	997:10	15	tif
LEAF_NODE	997:13	997:13	15	->
LEAF_NODE	997:15	997:15	15	tif_flags
LEAF_NODE	997:24	997:24	14	&
FIELD	997:25	997:25	14	TIFF_NOREADRAW
LEAF_NODE	997:25	997:25	15	TIFF_NOREADRAW
LEAF_NODE	997:39	997:39	14	)
EQ_OPERATOR	997:40	997:40	14	==
LEAF_NODE	997:40	997:40	15	==
FIELD	997:42	997:42	14	0
LEAF_NODE	997:42	997:42	15	0
LEAF_NODE	997:43	997:43	14	)
LEAF_NODE	997:45	997:45	4	)
STATEMENTS	998:4	1008:4	4	
LEAF_NODE	998:4	998:4	5	{
STATEMENTS	999:8	1007:25	5	
SELECTION	999:8	1000:12	6	
KEYWORD	999:8	999:8	7	if
LEAF_NODE	999:8	999:8	8	if
LEAF_NODE	999:11	999:11	7	(
CONDITION	999:12	999:12	7	TIFFReadRawTile1 ( tif , tile , buf , tilesize , module ) != tilesize
EXPR	999:12	999:66	8	TIFFReadRawTile1 ( tif , tile , buf , tilesize , module ) != tilesize
FUNCTION_CALL	999:12	999:61	9	TIFFReadRawTile1 ( tif , tile , buf , tilesize , module )
CALLEE	999:12	999:12	10	TIFFReadRawTile1
LEAF_NODE	999:12	999:12	11	TIFFReadRawTile1
LEAF_NODE	999:28	999:28	10	(
ARGUMENT	999:29	999:29	10	tif
FIELD	999:29	999:29	11	tif
LEAF_NODE	999:29	999:29	12	tif
LEAF_NODE	999:32	999:32	10	,
ARGUMENT	999:34	999:34	10	tile
FIELD	999:34	999:34	11	tile
LEAF_NODE	999:34	999:34	12	tile
LEAF_NODE	999:38	999:38	10	,
ARGUMENT	999:40	999:40	10	buf
FIELD	999:40	999:40	11	buf
LEAF_NODE	999:40	999:40	12	buf
LEAF_NODE	999:43	999:43	10	,
ARGUMENT	999:45	999:45	10	tilesize
FIELD	999:45	999:45	11	tilesize
LEAF_NODE	999:45	999:45	12	tilesize
LEAF_NODE	999:53	999:53	10	,
ARGUMENT	999:55	999:55	10	module
FIELD	999:55	999:55	11	module
LEAF_NODE	999:55	999:55	12	module
LEAF_NODE	999:61	999:61	10	)
EQ_OPERATOR	999:63	999:63	9	!=
LEAF_NODE	999:63	999:63	10	!=
FIELD	999:66	999:66	9	tilesize
LEAF_NODE	999:66	999:66	10	tilesize
LEAF_NODE	999:74	999:74	7	)
STATEMENTS	1000:12	1000:12	7	
JUMP_STATEMENT	1000:12	1000:35	8	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1000:12	1000:12	9	return
LEAF_NODE	1000:12	1000:12	10	return
DESTINATION	1000:19	1000:19	9	( ( tmsize_t ) ( - 1 ) )
EXPR	1000:19	1000:34	10	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1000:19	1000:19	11	(
LEAF_NODE	1000:20	1000:20	11	(
TYPE_NAME	1000:21	1000:21	11	tmsize_t
LEAF_NODE	1000:21	1000:21	12	tmsize_t
LEAF_NODE	1000:29	1000:29	11	)
LEAF_NODE	1000:30	1000:30	11	(
UNARY_EXPR	1000:31	1000:32	11	- 1
UNARY_OPERATOR	1000:31	1000:31	12	-
LEAF_NODE	1000:31	1000:31	13	-
FIELD	1000:32	1000:32	12	1
LEAF_NODE	1000:32	1000:32	13	1
LEAF_NODE	1000:33	1000:33	11	)
LEAF_NODE	1000:34	1000:34	11	)
LEAF_NODE	1000:35	1000:35	9	;
SELECTION	1002:8	1004:12	6	
KEYWORD	1002:8	1002:8	7	if
LEAF_NODE	1002:8	1002:8	8	if
LEAF_NODE	1002:11	1002:11	7	(
CONDITION	1002:12	1002:12	7	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1002:12	1002:12	8	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	1002:12	1003:12	9	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1002:12	1002:12	10	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	1002:12	1002:13	11	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	1002:12	1002:12	12	!
LEAF_NODE	1002:12	1002:12	13	!
FUNCTION_CALL	1002:13	1002:46	12	isFillOrder ( tif , td -> td_fillorder )
CALLEE	1002:13	1002:13	13	isFillOrder
LEAF_NODE	1002:13	1002:13	14	isFillOrder
LEAF_NODE	1002:24	1002:24	13	(
ARGUMENT	1002:25	1002:25	13	tif
FIELD	1002:25	1002:25	14	tif
LEAF_NODE	1002:25	1002:25	15	tif
LEAF_NODE	1002:28	1002:28	13	,
ARGUMENT	1002:30	1002:30	13	td -> td_fillorder
FIELD	1002:30	1002:34	14	td -> td_fillorder
LEAF_NODE	1002:30	1002:30	15	td
LEAF_NODE	1002:32	1002:32	15	->
LEAF_NODE	1002:34	1002:34	15	td_fillorder
LEAF_NODE	1002:46	1002:46	13	)
LEAF_NODE	1002:48	1002:48	10	&&
EXPR	1003:12	1003:48	10	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	1003:12	1003:12	11	(
FIELD	1003:13	1003:18	11	tif -> tif_flags
LEAF_NODE	1003:13	1003:13	12	tif
LEAF_NODE	1003:16	1003:16	12	->
LEAF_NODE	1003:18	1003:18	12	tif_flags
LEAF_NODE	1003:28	1003:28	11	&
FIELD	1003:30	1003:30	11	TIFF_NOBITREV
LEAF_NODE	1003:30	1003:30	12	TIFF_NOBITREV
LEAF_NODE	1003:43	1003:43	11	)
EQ_OPERATOR	1003:45	1003:45	11	==
LEAF_NODE	1003:45	1003:45	12	==
FIELD	1003:48	1003:48	11	0
LEAF_NODE	1003:48	1003:48	12	0
LEAF_NODE	1003:49	1003:49	7	)
STATEMENTS	1004:12	1004:12	7	
EXPR_STATEMENT	1004:12	1004:41	8	TIFFReverseBits ( buf , tilesize ) ;
EXPR	1004:12	1004:12	9	TIFFReverseBits ( buf , tilesize )
FUNCTION_CALL	1004:12	1004:40	10	TIFFReverseBits ( buf , tilesize )
CALLEE	1004:12	1004:12	11	TIFFReverseBits
LEAF_NODE	1004:12	1004:12	12	TIFFReverseBits
LEAF_NODE	1004:27	1004:27	11	(
ARGUMENT	1004:28	1004:28	11	buf
FIELD	1004:28	1004:28	12	buf
LEAF_NODE	1004:28	1004:28	13	buf
LEAF_NODE	1004:31	1004:31	11	,
ARGUMENT	1004:32	1004:32	11	tilesize
FIELD	1004:32	1004:32	12	tilesize
LEAF_NODE	1004:32	1004:32	13	tilesize
LEAF_NODE	1004:40	1004:40	11	)
LEAF_NODE	1004:41	1004:41	9	;
EXPR_STATEMENT	1006:8	1006:48	6	( * tif -> tif_postdecode ) ( tif , buf , tilesize ) ;
EXPR	1006:8	1006:8	7	( * tif -> tif_postdecode ) ( tif , buf , tilesize )
FUNCTION_CALL	1006:8	1006:47	8	( * tif -> tif_postdecode ) ( tif , buf , tilesize )
CALLEE	1006:8	1006:29	9	( * tif -> tif_postdecode )
LEAF_NODE	1006:8	1006:8	10	(
UNARY_EXPR	1006:9	1006:10	10	* tif -> tif_postdecode
UNARY_OPERATOR	1006:9	1006:9	11	*
LEAF_NODE	1006:9	1006:9	12	*
FIELD	1006:10	1006:15	11	tif -> tif_postdecode
LEAF_NODE	1006:10	1006:10	12	tif
LEAF_NODE	1006:13	1006:13	12	->
LEAF_NODE	1006:15	1006:15	12	tif_postdecode
LEAF_NODE	1006:29	1006:29	10	)
LEAF_NODE	1006:30	1006:30	9	(
ARGUMENT	1006:31	1006:31	9	tif
FIELD	1006:31	1006:31	10	tif
LEAF_NODE	1006:31	1006:31	11	tif
LEAF_NODE	1006:34	1006:34	9	,
ARGUMENT	1006:35	1006:35	9	buf
FIELD	1006:35	1006:35	10	buf
LEAF_NODE	1006:35	1006:35	11	buf
LEAF_NODE	1006:38	1006:38	9	,
ARGUMENT	1006:39	1006:39	9	tilesize
FIELD	1006:39	1006:39	10	tilesize
LEAF_NODE	1006:39	1006:39	11	tilesize
LEAF_NODE	1006:47	1006:47	9	)
LEAF_NODE	1006:48	1006:48	7	;
LEAF_NODE	1007:8	1007:8	6	return
LEAF_NODE	1007:15	1007:15	6	(
LEAF_NODE	1007:16	1007:16	6	tilesize
LEAF_NODE	1007:24	1007:24	6	)
LEAF_NODE	1007:25	1007:25	6	;
LEAF_NODE	1008:4	1008:4	5	}
SELECTION	1010:1	1011:2	3	
KEYWORD	1010:1	1010:1	4	if
LEAF_NODE	1010:1	1010:1	5	if
LEAF_NODE	1010:4	1010:4	4	(
CONDITION	1010:5	1010:5	4	size == ( tmsize_t ) ( - 1 )
EXPR	1010:5	1010:26	5	size == ( tmsize_t ) ( - 1 )
FIELD	1010:5	1010:5	6	size
LEAF_NODE	1010:5	1010:5	7	size
EQ_OPERATOR	1010:10	1010:10	6	==
LEAF_NODE	1010:10	1010:10	7	==
LEAF_NODE	1010:13	1010:13	6	(
TYPE_NAME	1010:14	1010:14	6	tmsize_t
LEAF_NODE	1010:14	1010:14	7	tmsize_t
LEAF_NODE	1010:22	1010:22	6	)
LEAF_NODE	1010:23	1010:23	6	(
UNARY_EXPR	1010:24	1010:25	6	- 1
UNARY_OPERATOR	1010:24	1010:24	7	-
LEAF_NODE	1010:24	1010:24	8	-
FIELD	1010:25	1010:25	7	1
LEAF_NODE	1010:25	1010:25	8	1
LEAF_NODE	1010:26	1010:26	6	)
LEAF_NODE	1010:27	1010:27	4	)
STATEMENTS	1011:2	1011:2	4	
EXPR_STATEMENT	1011:2	1011:17	5	size = tilesize ;
EXPR	1011:2	1011:2	6	size = tilesize
ASSIGN	1011:2	1011:9	7	size = tilesize
LVAL	1011:2	1011:2	8	size
FIELD	1011:2	1011:2	9	size
LEAF_NODE	1011:2	1011:2	10	size
ASSIGN_OP	1011:7	1011:7	8	=
LEAF_NODE	1011:7	1011:7	9	=
RVAL	1011:9	1011:9	8	tilesize
FIELD	1011:9	1011:9	9	tilesize
LEAF_NODE	1011:9	1011:9	10	tilesize
LEAF_NODE	1011:17	1011:17	6	;
SELECTION	1012:1	1012:6	3	
KEYWORD	1012:1	1012:1	4	else
LEAF_NODE	1012:1	1012:1	5	else
STATEMENTS	1012:6	1012:6	4	
SELECTION	1012:6	1013:2	5	
KEYWORD	1012:6	1012:6	6	if
LEAF_NODE	1012:6	1012:6	7	if
LEAF_NODE	1012:9	1012:9	6	(
CONDITION	1012:10	1012:10	6	size > tilesize
EXPR	1012:10	1012:17	7	size > tilesize
FIELD	1012:10	1012:10	8	size
LEAF_NODE	1012:10	1012:10	9	size
REL_OPERATOR	1012:15	1012:15	8	>
LEAF_NODE	1012:15	1012:15	9	>
FIELD	1012:17	1012:17	8	tilesize
LEAF_NODE	1012:17	1012:17	9	tilesize
LEAF_NODE	1012:25	1012:25	6	)
STATEMENTS	1013:2	1013:2	6	
EXPR_STATEMENT	1013:2	1013:17	7	size = tilesize ;
EXPR	1013:2	1013:2	8	size = tilesize
ASSIGN	1013:2	1013:9	9	size = tilesize
LVAL	1013:2	1013:2	10	size
FIELD	1013:2	1013:2	11	size
LEAF_NODE	1013:2	1013:2	12	size
ASSIGN_OP	1013:7	1013:7	10	=
LEAF_NODE	1013:7	1013:7	11	=
RVAL	1013:9	1013:9	10	tilesize
FIELD	1013:9	1013:9	11	tilesize
LEAF_NODE	1013:9	1013:9	12	tilesize
LEAF_NODE	1013:17	1013:17	8	;
SELECTION	1014:1	1015:64	3	
KEYWORD	1014:1	1014:1	4	if
LEAF_NODE	1014:1	1014:1	5	if
LEAF_NODE	1014:4	1014:4	4	(
CONDITION	1014:5	1014:5	4	TIFFFillTile ( tif , tile ) && ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) buf , size , ( uint16 ) ( tile / td -> td_stripsperimage ) )
EXPR	1014:5	1014:5	5	TIFFFillTile ( tif , tile ) && ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) buf , size , ( uint16 ) ( tile / td -> td_stripsperimage ) )
AND	1014:5	1014:32	6	TIFFFillTile ( tif , tile ) && ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) buf , size , ( uint16 ) ( tile / td -> td_stripsperimage ) )
EXPR	1014:5	1014:5	7	TIFFFillTile ( tif , tile )
FUNCTION_CALL	1014:5	1014:27	8	TIFFFillTile ( tif , tile )
CALLEE	1014:5	1014:5	9	TIFFFillTile
LEAF_NODE	1014:5	1014:5	10	TIFFFillTile
LEAF_NODE	1014:17	1014:17	9	(
ARGUMENT	1014:18	1014:18	9	tif
FIELD	1014:18	1014:18	10	tif
LEAF_NODE	1014:18	1014:18	11	tif
LEAF_NODE	1014:21	1014:21	9	,
ARGUMENT	1014:23	1014:23	9	tile
FIELD	1014:23	1014:23	10	tile
LEAF_NODE	1014:23	1014:23	11	tile
LEAF_NODE	1014:27	1014:27	9	)
LEAF_NODE	1014:29	1014:29	7	&&
EXPR	1014:32	1014:32	7	( * tif -> tif_decodetile ) ( tif , ( uint8 * ) buf , size , ( uint16 ) ( tile / td -> td_stripsperimage ) )
FUNCTION_CALL	1014:32	1015:61	8	( * tif -> tif_decodetile ) ( tif , ( uint8 * ) buf , size , ( uint16 ) ( tile / td -> td_stripsperimage ) )
CALLEE	1014:32	1014:53	9	( * tif -> tif_decodetile )
LEAF_NODE	1014:32	1014:32	10	(
UNARY_EXPR	1014:33	1014:34	10	* tif -> tif_decodetile
UNARY_OPERATOR	1014:33	1014:33	11	*
LEAF_NODE	1014:33	1014:33	12	*
FIELD	1014:34	1014:39	11	tif -> tif_decodetile
LEAF_NODE	1014:34	1014:34	12	tif
LEAF_NODE	1014:37	1014:37	12	->
LEAF_NODE	1014:39	1014:39	12	tif_decodetile
LEAF_NODE	1014:53	1014:53	10	)
LEAF_NODE	1014:54	1014:54	9	(
ARGUMENT	1014:55	1014:55	9	tif
FIELD	1014:55	1014:55	10	tif
LEAF_NODE	1014:55	1014:55	11	tif
LEAF_NODE	1014:58	1014:58	9	,
ARGUMENT	1015:5	1015:14	9	( uint8 * ) buf
LEAF_NODE	1015:5	1015:5	10	(
TYPE_NAME	1015:6	1015:6	10	uint8
LEAF_NODE	1015:6	1015:6	11	uint8
LEAF_NODE	1015:11	1015:11	10	*
LEAF_NODE	1015:12	1015:12	10	)
FIELD	1015:14	1015:14	10	buf
LEAF_NODE	1015:14	1015:14	11	buf
LEAF_NODE	1015:17	1015:17	9	,
ARGUMENT	1015:19	1015:19	9	size
FIELD	1015:19	1015:19	10	size
LEAF_NODE	1015:19	1015:19	11	size
LEAF_NODE	1015:23	1015:23	9	,
ARGUMENT	1015:25	1015:60	9	( uint16 ) ( tile / td -> td_stripsperimage )
LEAF_NODE	1015:25	1015:25	10	(
TYPE_NAME	1015:26	1015:26	10	uint16
LEAF_NODE	1015:26	1015:26	11	uint16
LEAF_NODE	1015:32	1015:32	10	)
LEAF_NODE	1015:33	1015:33	10	(
FIELD	1015:34	1015:34	10	tile
LEAF_NODE	1015:34	1015:34	11	tile
LEAF_NODE	1015:38	1015:38	10	/
FIELD	1015:39	1015:43	10	td -> td_stripsperimage
LEAF_NODE	1015:39	1015:39	11	td
LEAF_NODE	1015:41	1015:41	11	->
LEAF_NODE	1015:43	1015:43	11	td_stripsperimage
LEAF_NODE	1015:60	1015:60	10	)
LEAF_NODE	1015:61	1015:61	9	)
LEAF_NODE	1015:62	1015:62	4	)
STATEMENTS	1015:64	1018:1	4	
LEAF_NODE	1015:64	1015:64	5	{
STATEMENTS	1016:2	1017:15	5	
EXPR_STATEMENT	1016:2	1016:49	6	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) buf , size ) ;
EXPR	1016:2	1016:2	7	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) buf , size )
FUNCTION_CALL	1016:2	1016:48	8	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) buf , size )
CALLEE	1016:2	1016:23	9	( * tif -> tif_postdecode )
LEAF_NODE	1016:2	1016:2	10	(
UNARY_EXPR	1016:3	1016:4	10	* tif -> tif_postdecode
UNARY_OPERATOR	1016:3	1016:3	11	*
LEAF_NODE	1016:3	1016:3	12	*
FIELD	1016:4	1016:9	11	tif -> tif_postdecode
LEAF_NODE	1016:4	1016:4	12	tif
LEAF_NODE	1016:7	1016:7	12	->
LEAF_NODE	1016:9	1016:9	12	tif_postdecode
LEAF_NODE	1016:23	1016:23	10	)
LEAF_NODE	1016:24	1016:24	9	(
ARGUMENT	1016:25	1016:25	9	tif
FIELD	1016:25	1016:25	10	tif
LEAF_NODE	1016:25	1016:25	11	tif
LEAF_NODE	1016:28	1016:28	9	,
ARGUMENT	1016:30	1016:39	9	( uint8 * ) buf
LEAF_NODE	1016:30	1016:30	10	(
TYPE_NAME	1016:31	1016:31	10	uint8
LEAF_NODE	1016:31	1016:31	11	uint8
LEAF_NODE	1016:36	1016:36	10	*
LEAF_NODE	1016:37	1016:37	10	)
FIELD	1016:39	1016:39	10	buf
LEAF_NODE	1016:39	1016:39	11	buf
LEAF_NODE	1016:42	1016:42	9	,
ARGUMENT	1016:44	1016:44	9	size
FIELD	1016:44	1016:44	10	size
LEAF_NODE	1016:44	1016:44	11	size
LEAF_NODE	1016:48	1016:48	9	)
LEAF_NODE	1016:49	1016:49	7	;
LEAF_NODE	1017:2	1017:2	6	return
LEAF_NODE	1017:9	1017:9	6	(
LEAF_NODE	1017:10	1017:10	6	size
LEAF_NODE	1017:14	1017:14	6	)
LEAF_NODE	1017:15	1017:15	6	;
LEAF_NODE	1018:1	1018:1	5	}
SELECTION	1018:3	1019:2	3	
KEYWORD	1018:3	1018:3	4	else
LEAF_NODE	1018:3	1018:3	5	else
STATEMENTS	1019:2	1019:2	4	
JUMP_STATEMENT	1019:2	1019:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1019:2	1019:2	6	return
LEAF_NODE	1019:2	1019:2	7	return
DESTINATION	1019:9	1019:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	1019:9	1019:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1019:9	1019:9	8	(
LEAF_NODE	1019:10	1019:10	8	(
TYPE_NAME	1019:11	1019:11	8	tmsize_t
LEAF_NODE	1019:11	1019:11	9	tmsize_t
LEAF_NODE	1019:19	1019:19	8	)
LEAF_NODE	1019:20	1019:20	8	(
UNARY_EXPR	1019:21	1019:22	8	- 1
UNARY_OPERATOR	1019:21	1019:21	9	-
LEAF_NODE	1019:21	1019:21	10	-
FIELD	1019:22	1019:22	9	1
LEAF_NODE	1019:22	1019:22	10	1
LEAF_NODE	1019:23	1019:23	8	)
LEAF_NODE	1019:24	1019:24	8	)
LEAF_NODE	1019:25	1019:25	6	;
LEAF_NODE	1020:0	1020:0	2	}
FUNCTION_DEF	1028:0	1039:0	1	
RETURN_TYPE	1028:0	1028:0	2	tmsize_t
TYPE_NAME	1028:0	1028:0	3	tmsize_t
LEAF_NODE	1028:0	1028:0	4	tmsize_t
FUNCTION_NAME	1029:0	1029:0	2	_TIFFReadTileAndAllocBuffer
LEAF_NODE	1029:0	1029:0	3	_TIFFReadTileAndAllocBuffer
PARAMETER_LIST	1029:27	1031:66	2	( TIFF * tif , void * * buf , tmsize_t bufsizetoalloc , uint32 x , uint32 y , uint32 z , uint16 s )
LEAF_NODE	1029:27	1029:27	3	(
PARAMETER_DECL	1029:28	1029:34	3	TIFF * tif
TYPE	1029:28	1029:32	4	TIFF *
TYPE_NAME	1029:28	1029:28	5	TIFF
LEAF_NODE	1029:28	1029:28	6	TIFF
POINTER	1029:32	1029:32	5	*
LEAF_NODE	1029:32	1029:32	6	*
NAME	1029:34	1029:34	4	tif
LEAF_NODE	1029:34	1029:34	5	tif
LEAF_NODE	1029:37	1029:37	3	,
PARAMETER_DECL	1030:28	1030:35	3	void * * buf
TYPE	1030:28	1030:33	4	void * *
TYPE_NAME	1030:28	1030:28	5	void
LEAF_NODE	1030:28	1030:28	6	void
POINTER	1030:33	1030:34	5	* *
LEAF_NODE	1030:33	1030:33	6	*
LEAF_NODE	1030:34	1030:34	6	*
NAME	1030:35	1030:35	4	buf
LEAF_NODE	1030:35	1030:35	5	buf
LEAF_NODE	1030:38	1030:38	3	,
PARAMETER_DECL	1030:40	1030:49	3	tmsize_t bufsizetoalloc
TYPE	1030:40	1030:40	4	tmsize_t
TYPE_NAME	1030:40	1030:40	5	tmsize_t
LEAF_NODE	1030:40	1030:40	6	tmsize_t
NAME	1030:49	1030:49	4	bufsizetoalloc
LEAF_NODE	1030:49	1030:49	5	bufsizetoalloc
LEAF_NODE	1030:63	1030:63	3	,
PARAMETER_DECL	1031:28	1031:35	3	uint32 x
TYPE	1031:28	1031:28	4	uint32
TYPE_NAME	1031:28	1031:28	5	uint32
LEAF_NODE	1031:28	1031:28	6	uint32
NAME	1031:35	1031:35	4	x
LEAF_NODE	1031:35	1031:35	5	x
LEAF_NODE	1031:36	1031:36	3	,
PARAMETER_DECL	1031:38	1031:45	3	uint32 y
TYPE	1031:38	1031:38	4	uint32
TYPE_NAME	1031:38	1031:38	5	uint32
LEAF_NODE	1031:38	1031:38	6	uint32
NAME	1031:45	1031:45	4	y
LEAF_NODE	1031:45	1031:45	5	y
LEAF_NODE	1031:46	1031:46	3	,
PARAMETER_DECL	1031:48	1031:55	3	uint32 z
TYPE	1031:48	1031:48	4	uint32
TYPE_NAME	1031:48	1031:48	5	uint32
LEAF_NODE	1031:48	1031:48	6	uint32
NAME	1031:55	1031:55	4	z
LEAF_NODE	1031:55	1031:55	5	z
LEAF_NODE	1031:56	1031:56	3	,
PARAMETER_DECL	1031:58	1031:65	3	uint16 s
TYPE	1031:58	1031:58	4	uint16
TYPE_NAME	1031:58	1031:58	5	uint16
LEAF_NODE	1031:58	1031:58	6	uint16
NAME	1031:65	1031:65	4	s
LEAF_NODE	1031:65	1031:65	5	s
LEAF_NODE	1031:66	1031:66	3	)
LEAF_NODE	1032:0	1032:0	2	{
STATEMENTS	1033:4	1035:4	2	
SELECTION	1033:4	1034:12	3	
KEYWORD	1033:4	1033:4	4	if
LEAF_NODE	1033:4	1033:4	5	if
LEAF_NODE	1033:7	1033:7	4	(
CONDITION	1033:8	1033:8	4	! TIFFCheckRead ( tif , 1 ) || ! TIFFCheckTile ( tif , x , y , z , s )
EXPR	1033:8	1033:8	5	! TIFFCheckRead ( tif , 1 ) || ! TIFFCheckTile ( tif , x , y , z , s )
OR	1033:8	1033:34	6	! TIFFCheckRead ( tif , 1 ) || ! TIFFCheckTile ( tif , x , y , z , s )
EXPR	1033:8	1033:8	7	! TIFFCheckRead ( tif , 1 )
UNARY_EXPR	1033:8	1033:9	8	! TIFFCheckRead ( tif , 1 )
UNARY_OPERATOR	1033:8	1033:8	9	!
LEAF_NODE	1033:8	1033:8	10	!
FUNCTION_CALL	1033:9	1033:29	9	TIFFCheckRead ( tif , 1 )
CALLEE	1033:9	1033:9	10	TIFFCheckRead
LEAF_NODE	1033:9	1033:9	11	TIFFCheckRead
LEAF_NODE	1033:22	1033:22	10	(
ARGUMENT	1033:23	1033:23	10	tif
FIELD	1033:23	1033:23	11	tif
LEAF_NODE	1033:23	1033:23	12	tif
LEAF_NODE	1033:26	1033:26	10	,
ARGUMENT	1033:28	1033:28	10	1
FIELD	1033:28	1033:28	11	1
LEAF_NODE	1033:28	1033:28	12	1
LEAF_NODE	1033:29	1033:29	10	)
LEAF_NODE	1033:31	1033:31	7	||
EXPR	1033:34	1033:34	7	! TIFFCheckTile ( tif , x , y , z , s )
UNARY_EXPR	1033:34	1033:35	8	! TIFFCheckTile ( tif , x , y , z , s )
UNARY_OPERATOR	1033:34	1033:34	9	!
LEAF_NODE	1033:34	1033:34	10	!
FUNCTION_CALL	1033:35	1033:64	9	TIFFCheckTile ( tif , x , y , z , s )
CALLEE	1033:35	1033:35	10	TIFFCheckTile
LEAF_NODE	1033:35	1033:35	11	TIFFCheckTile
LEAF_NODE	1033:48	1033:48	10	(
ARGUMENT	1033:49	1033:49	10	tif
FIELD	1033:49	1033:49	11	tif
LEAF_NODE	1033:49	1033:49	12	tif
LEAF_NODE	1033:52	1033:52	10	,
ARGUMENT	1033:54	1033:54	10	x
FIELD	1033:54	1033:54	11	x
LEAF_NODE	1033:54	1033:54	12	x
LEAF_NODE	1033:55	1033:55	10	,
ARGUMENT	1033:57	1033:57	10	y
FIELD	1033:57	1033:57	11	y
LEAF_NODE	1033:57	1033:57	12	y
LEAF_NODE	1033:58	1033:58	10	,
ARGUMENT	1033:60	1033:60	10	z
FIELD	1033:60	1033:60	11	z
LEAF_NODE	1033:60	1033:60	12	z
LEAF_NODE	1033:61	1033:61	10	,
ARGUMENT	1033:63	1033:63	10	s
FIELD	1033:63	1033:63	11	s
LEAF_NODE	1033:63	1033:63	12	s
LEAF_NODE	1033:64	1033:64	10	)
LEAF_NODE	1033:65	1033:65	4	)
STATEMENTS	1034:12	1034:12	4	
JUMP_STATEMENT	1034:12	1034:35	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1034:12	1034:12	6	return
LEAF_NODE	1034:12	1034:12	7	return
DESTINATION	1034:19	1034:19	6	( ( tmsize_t ) ( - 1 ) )
EXPR	1034:19	1034:34	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1034:19	1034:19	8	(
LEAF_NODE	1034:20	1034:20	8	(
TYPE_NAME	1034:21	1034:21	8	tmsize_t
LEAF_NODE	1034:21	1034:21	9	tmsize_t
LEAF_NODE	1034:29	1034:29	8	)
LEAF_NODE	1034:30	1034:30	8	(
UNARY_EXPR	1034:31	1034:32	8	- 1
UNARY_OPERATOR	1034:31	1034:31	9	-
LEAF_NODE	1034:31	1034:31	10	-
FIELD	1034:32	1034:32	9	1
LEAF_NODE	1034:32	1034:32	10	1
LEAF_NODE	1034:33	1034:33	8	)
LEAF_NODE	1034:34	1034:34	8	)
LEAF_NODE	1034:35	1034:35	6	;
JUMP_STATEMENT	1035:4	1038:63	3	return ( _TIFFReadEncodedTileAndAllocBuffer ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , bufsizetoalloc , ( tmsize_t ) ( - 1 ) ) ) ;
KEYWORD	1035:4	1035:4	4	return
LEAF_NODE	1035:4	1035:4	5	return
DESTINATION	1035:11	1035:11	4	( _TIFFReadEncodedTileAndAllocBuffer ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , bufsizetoalloc , ( tmsize_t ) ( - 1 ) ) )
EXPR	1035:11	1038:62	5	( _TIFFReadEncodedTileAndAllocBuffer ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , bufsizetoalloc , ( tmsize_t ) ( - 1 ) ) )
LEAF_NODE	1035:11	1035:11	6	(
FUNCTION_CALL	1035:12	1038:61	6	_TIFFReadEncodedTileAndAllocBuffer ( tif , TIFFComputeTile ( tif , x , y , z , s ) , buf , bufsizetoalloc , ( tmsize_t ) ( - 1 ) )
CALLEE	1035:12	1035:12	7	_TIFFReadEncodedTileAndAllocBuffer
LEAF_NODE	1035:12	1035:12	8	_TIFFReadEncodedTileAndAllocBuffer
LEAF_NODE	1035:46	1035:46	7	(
ARGUMENT	1035:47	1035:47	7	tif
FIELD	1035:47	1035:47	8	tif
LEAF_NODE	1035:47	1035:47	9	tif
LEAF_NODE	1035:50	1035:50	7	,
ARGUMENT	1036:47	1036:47	7	TIFFComputeTile ( tif , x , y , z , s )
FUNCTION_CALL	1036:47	1036:78	8	TIFFComputeTile ( tif , x , y , z , s )
CALLEE	1036:47	1036:47	9	TIFFComputeTile
LEAF_NODE	1036:47	1036:47	10	TIFFComputeTile
LEAF_NODE	1036:62	1036:62	9	(
ARGUMENT	1036:63	1036:63	9	tif
FIELD	1036:63	1036:63	10	tif
LEAF_NODE	1036:63	1036:63	11	tif
LEAF_NODE	1036:66	1036:66	9	,
ARGUMENT	1036:68	1036:68	9	x
FIELD	1036:68	1036:68	10	x
LEAF_NODE	1036:68	1036:68	11	x
LEAF_NODE	1036:69	1036:69	9	,
ARGUMENT	1036:71	1036:71	9	y
FIELD	1036:71	1036:71	10	y
LEAF_NODE	1036:71	1036:71	11	y
LEAF_NODE	1036:72	1036:72	9	,
ARGUMENT	1036:74	1036:74	9	z
FIELD	1036:74	1036:74	10	z
LEAF_NODE	1036:74	1036:74	11	z
LEAF_NODE	1036:75	1036:75	9	,
ARGUMENT	1036:77	1036:77	9	s
FIELD	1036:77	1036:77	10	s
LEAF_NODE	1036:77	1036:77	11	s
LEAF_NODE	1036:78	1036:78	9	)
LEAF_NODE	1036:79	1036:79	7	,
ARGUMENT	1037:47	1037:47	7	buf
FIELD	1037:47	1037:47	8	buf
LEAF_NODE	1037:47	1037:47	9	buf
LEAF_NODE	1037:50	1037:50	7	,
ARGUMENT	1037:52	1037:52	7	bufsizetoalloc
FIELD	1037:52	1037:52	8	bufsizetoalloc
LEAF_NODE	1037:52	1037:52	9	bufsizetoalloc
LEAF_NODE	1037:66	1037:66	7	,
ARGUMENT	1038:47	1038:60	7	( tmsize_t ) ( - 1 )
LEAF_NODE	1038:47	1038:47	8	(
TYPE_NAME	1038:48	1038:48	8	tmsize_t
LEAF_NODE	1038:48	1038:48	9	tmsize_t
LEAF_NODE	1038:56	1038:56	8	)
LEAF_NODE	1038:57	1038:57	8	(
UNARY_EXPR	1038:58	1038:59	8	- 1
UNARY_OPERATOR	1038:58	1038:58	9	-
LEAF_NODE	1038:58	1038:58	10	-
FIELD	1038:59	1038:59	9	1
LEAF_NODE	1038:59	1038:59	10	1
LEAF_NODE	1038:60	1038:60	8	)
LEAF_NODE	1038:61	1038:61	7	)
LEAF_NODE	1038:62	1038:62	6	)
LEAF_NODE	1038:63	1038:63	4	;
LEAF_NODE	1039:0	1039:0	2	}
FUNCTION_DEF	1047:0	1091:0	1	
RETURN_TYPE	1047:0	1047:0	2	tmsize_t
TYPE_NAME	1047:0	1047:0	3	tmsize_t
LEAF_NODE	1047:0	1047:0	4	tmsize_t
FUNCTION_NAME	1048:0	1048:0	2	_TIFFReadEncodedTileAndAllocBuffer
LEAF_NODE	1048:0	1048:0	3	_TIFFReadEncodedTileAndAllocBuffer
PARAMETER_LIST	1048:34	1050:57	2	( TIFF * tif , uint32 tile , void * * buf , tmsize_t bufsizetoalloc , tmsize_t size_to_read )
LEAF_NODE	1048:34	1048:34	3	(
PARAMETER_DECL	1048:35	1048:41	3	TIFF * tif
TYPE	1048:35	1048:39	4	TIFF *
TYPE_NAME	1048:35	1048:35	5	TIFF
LEAF_NODE	1048:35	1048:35	6	TIFF
POINTER	1048:39	1048:39	5	*
LEAF_NODE	1048:39	1048:39	6	*
NAME	1048:41	1048:41	4	tif
LEAF_NODE	1048:41	1048:41	5	tif
LEAF_NODE	1048:44	1048:44	3	,
PARAMETER_DECL	1048:46	1048:53	3	uint32 tile
TYPE	1048:46	1048:46	4	uint32
TYPE_NAME	1048:46	1048:46	5	uint32
LEAF_NODE	1048:46	1048:46	6	uint32
NAME	1048:53	1048:53	4	tile
LEAF_NODE	1048:53	1048:53	5	tile
LEAF_NODE	1048:57	1048:57	3	,
PARAMETER_DECL	1049:36	1049:43	3	void * * buf
TYPE	1049:36	1049:41	4	void * *
TYPE_NAME	1049:36	1049:36	5	void
LEAF_NODE	1049:36	1049:36	6	void
POINTER	1049:41	1049:42	5	* *
LEAF_NODE	1049:41	1049:41	6	*
LEAF_NODE	1049:42	1049:42	6	*
NAME	1049:43	1049:43	4	buf
LEAF_NODE	1049:43	1049:43	5	buf
LEAF_NODE	1049:46	1049:46	3	,
PARAMETER_DECL	1049:48	1049:57	3	tmsize_t bufsizetoalloc
TYPE	1049:48	1049:48	4	tmsize_t
TYPE_NAME	1049:48	1049:48	5	tmsize_t
LEAF_NODE	1049:48	1049:48	6	tmsize_t
NAME	1049:57	1049:57	4	bufsizetoalloc
LEAF_NODE	1049:57	1049:57	5	bufsizetoalloc
LEAF_NODE	1049:71	1049:71	3	,
PARAMETER_DECL	1050:36	1050:45	3	tmsize_t size_to_read
TYPE	1050:36	1050:36	4	tmsize_t
TYPE_NAME	1050:36	1050:36	5	tmsize_t
LEAF_NODE	1050:36	1050:36	6	tmsize_t
NAME	1050:45	1050:45	4	size_to_read
LEAF_NODE	1050:45	1050:45	5	size_to_read
LEAF_NODE	1050:57	1050:57	3	)
LEAF_NODE	1051:0	1051:0	2	{
STATEMENTS	1052:4	1089:6	2	
LEAF_NODE	1052:4	1052:4	3	static
SIMPLE_DECL	1052:11	1052:69	3	const char [ ] module ; module = "_TIFFReadEncodedTileAndAllocBuffer" ;
VAR_DECL	1052:11	1052:22	4	const char [ ] module ; module = "_TIFFReadEncodedTileAndAllocBuffer"
TYPE	1052:11	1052:28	5	const char [ ]
TYPE_NAME	1052:11	1052:17	6	const char
LEAF_NODE	1052:11	1052:11	7	const
LEAF_NODE	1052:17	1052:17	7	char
TYPE_SUFFIX	1052:28	1052:29	6	[ ]
LEAF_NODE	1052:28	1052:28	7	[
LEAF_NODE	1052:29	1052:29	7	]
NAME	1052:22	1052:22	5	module
LEAF_NODE	1052:22	1052:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1052:22	1052:22	5	module = "_TIFFReadEncodedTileAndAllocBuffer"
ASSIGN	1052:22	1052:33	6	module = "_TIFFReadEncodedTileAndAllocBuffer"
LVAL	1052:22	1052:22	7	module
NAME	1052:22	1052:22	8	module
LEAF_NODE	1052:22	1052:22	9	module
ASSIGN_OP	1052:31	1052:31	7	=
LEAF_NODE	1052:31	1052:31	8	=
RVAL	1052:33	1052:33	7	"_TIFFReadEncodedTileAndAllocBuffer"
FIELD	1052:33	1052:33	8	"_TIFFReadEncodedTileAndAllocBuffer"
LEAF_NODE	1052:33	1052:33	9	"_TIFFReadEncodedTileAndAllocBuffer"
LEAF_NODE	1052:69	1052:69	4	;
SIMPLE_DECL	1053:4	1053:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1053:4	1053:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1053:4	1053:18	5	TIFFDirectory *
TYPE_NAME	1053:4	1053:4	6	TIFFDirectory
LEAF_NODE	1053:4	1053:4	7	TIFFDirectory
POINTER	1053:18	1053:18	6	*
LEAF_NODE	1053:18	1053:18	7	*
NAME	1053:19	1053:19	5	td
LEAF_NODE	1053:19	1053:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1053:19	1053:19	5	td = & tif -> tif_dir
ASSIGN	1053:19	1053:24	6	td = & tif -> tif_dir
LVAL	1053:19	1053:19	7	td
NAME	1053:19	1053:19	8	td
LEAF_NODE	1053:19	1053:19	9	td
ASSIGN_OP	1053:22	1053:22	7	=
LEAF_NODE	1053:22	1053:22	8	=
RVAL	1053:24	1053:24	7	& tif -> tif_dir
UNARY_EXPR	1053:24	1053:25	8	& tif -> tif_dir
UNARY_OPERATOR	1053:24	1053:24	9	&
LEAF_NODE	1053:24	1053:24	10	&
FIELD	1053:25	1053:30	9	tif -> tif_dir
LEAF_NODE	1053:25	1053:25	10	tif
LEAF_NODE	1053:28	1053:28	10	->
LEAF_NODE	1053:30	1053:30	10	tif_dir
LEAF_NODE	1053:37	1053:37	4	;
SIMPLE_DECL	1054:4	1054:41	3	tmsize_t tilesize ; tilesize = tif -> tif_tilesize ;
VAR_DECL	1054:4	1054:13	4	tmsize_t tilesize ; tilesize = tif -> tif_tilesize
TYPE	1054:4	1054:4	5	tmsize_t
TYPE_NAME	1054:4	1054:4	6	tmsize_t
LEAF_NODE	1054:4	1054:4	7	tmsize_t
NAME	1054:13	1054:13	5	tilesize
LEAF_NODE	1054:13	1054:13	6	tilesize
LEAF_NODE	0:0	0:0	5	;
INIT	1054:13	1054:13	5	tilesize = tif -> tif_tilesize
ASSIGN	1054:13	1054:24	6	tilesize = tif -> tif_tilesize
LVAL	1054:13	1054:13	7	tilesize
NAME	1054:13	1054:13	8	tilesize
LEAF_NODE	1054:13	1054:13	9	tilesize
ASSIGN_OP	1054:22	1054:22	7	=
LEAF_NODE	1054:22	1054:22	8	=
RVAL	1054:24	1054:24	7	tif -> tif_tilesize
FIELD	1054:24	1054:29	8	tif -> tif_tilesize
LEAF_NODE	1054:24	1054:24	9	tif
LEAF_NODE	1054:27	1054:27	9	->
LEAF_NODE	1054:29	1054:29	9	tif_tilesize
LEAF_NODE	1054:41	1054:41	4	;
SELECTION	1056:4	1057:4	3	
KEYWORD	1056:4	1056:4	4	if
LEAF_NODE	1056:4	1056:4	5	if
LEAF_NODE	1056:6	1056:6	4	(
CONDITION	1056:8	1056:8	4	* buf != NULL
EXPR	1056:8	1056:16	5	* buf != NULL
UNARY_EXPR	1056:8	1056:9	6	* buf
UNARY_OPERATOR	1056:8	1056:8	7	*
LEAF_NODE	1056:8	1056:8	8	*
FIELD	1056:9	1056:9	7	buf
LEAF_NODE	1056:9	1056:9	8	buf
EQ_OPERATOR	1056:13	1056:13	6	!=
LEAF_NODE	1056:13	1056:13	7	!=
FIELD	1056:16	1056:16	6	NULL
LEAF_NODE	1056:16	1056:16	7	NULL
LEAF_NODE	1056:21	1056:21	4	)
STATEMENTS	1057:4	1059:4	4	
LEAF_NODE	1057:4	1057:4	5	{
STATEMENTS	1058:8	1058:8	5	
JUMP_STATEMENT	1058:8	1058:65	6	return TIFFReadEncodedTile ( tif , tile , * buf , size_to_read ) ;
KEYWORD	1058:8	1058:8	7	return
LEAF_NODE	1058:8	1058:8	8	return
DESTINATION	1058:15	1058:15	7	TIFFReadEncodedTile ( tif , tile , * buf , size_to_read )
EXPR	1058:15	1058:15	8	TIFFReadEncodedTile ( tif , tile , * buf , size_to_read )
FUNCTION_CALL	1058:15	1058:64	9	TIFFReadEncodedTile ( tif , tile , * buf , size_to_read )
CALLEE	1058:15	1058:15	10	TIFFReadEncodedTile
LEAF_NODE	1058:15	1058:15	11	TIFFReadEncodedTile
LEAF_NODE	1058:34	1058:34	10	(
ARGUMENT	1058:35	1058:35	10	tif
FIELD	1058:35	1058:35	11	tif
LEAF_NODE	1058:35	1058:35	12	tif
LEAF_NODE	1058:38	1058:38	10	,
ARGUMENT	1058:40	1058:40	10	tile
FIELD	1058:40	1058:40	11	tile
LEAF_NODE	1058:40	1058:40	12	tile
LEAF_NODE	1058:44	1058:44	10	,
ARGUMENT	1058:46	1058:46	10	* buf
UNARY_EXPR	1058:46	1058:47	11	* buf
UNARY_OPERATOR	1058:46	1058:46	12	*
LEAF_NODE	1058:46	1058:46	13	*
FIELD	1058:47	1058:47	12	buf
LEAF_NODE	1058:47	1058:47	13	buf
LEAF_NODE	1058:50	1058:50	10	,
ARGUMENT	1058:52	1058:52	10	size_to_read
FIELD	1058:52	1058:52	11	size_to_read
LEAF_NODE	1058:52	1058:52	12	size_to_read
LEAF_NODE	1058:64	1058:64	10	)
LEAF_NODE	1058:65	1058:65	7	;
LEAF_NODE	1059:4	1059:4	5	}
SELECTION	1061:4	1062:12	3	
KEYWORD	1061:4	1061:4	4	if
LEAF_NODE	1061:4	1061:4	5	if
LEAF_NODE	1061:7	1061:7	4	(
CONDITION	1061:8	1061:8	4	! TIFFCheckRead ( tif , 1 )
EXPR	1061:8	1061:8	5	! TIFFCheckRead ( tif , 1 )
UNARY_EXPR	1061:8	1061:9	6	! TIFFCheckRead ( tif , 1 )
UNARY_OPERATOR	1061:8	1061:8	7	!
LEAF_NODE	1061:8	1061:8	8	!
FUNCTION_CALL	1061:9	1061:29	7	TIFFCheckRead ( tif , 1 )
CALLEE	1061:9	1061:9	8	TIFFCheckRead
LEAF_NODE	1061:9	1061:9	9	TIFFCheckRead
LEAF_NODE	1061:22	1061:22	8	(
ARGUMENT	1061:23	1061:23	8	tif
FIELD	1061:23	1061:23	9	tif
LEAF_NODE	1061:23	1061:23	10	tif
LEAF_NODE	1061:26	1061:26	8	,
ARGUMENT	1061:28	1061:28	8	1
FIELD	1061:28	1061:28	9	1
LEAF_NODE	1061:28	1061:28	10	1
LEAF_NODE	1061:29	1061:29	8	)
LEAF_NODE	1061:30	1061:30	4	)
STATEMENTS	1062:12	1062:12	4	
JUMP_STATEMENT	1062:12	1062:35	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1062:12	1062:12	6	return
LEAF_NODE	1062:12	1062:12	7	return
DESTINATION	1062:19	1062:19	6	( ( tmsize_t ) ( - 1 ) )
EXPR	1062:19	1062:34	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1062:19	1062:19	8	(
LEAF_NODE	1062:20	1062:20	8	(
TYPE_NAME	1062:21	1062:21	8	tmsize_t
LEAF_NODE	1062:21	1062:21	9	tmsize_t
LEAF_NODE	1062:29	1062:29	8	)
LEAF_NODE	1062:30	1062:30	8	(
UNARY_EXPR	1062:31	1062:32	8	- 1
UNARY_OPERATOR	1062:31	1062:31	9	-
LEAF_NODE	1062:31	1062:31	10	-
FIELD	1062:32	1062:32	9	1
LEAF_NODE	1062:32	1062:32	10	1
LEAF_NODE	1062:33	1062:33	8	)
LEAF_NODE	1062:34	1062:34	8	)
LEAF_NODE	1062:35	1062:35	6	;
SELECTION	1063:4	1063:32	3	
KEYWORD	1063:4	1063:4	4	if
LEAF_NODE	1063:4	1063:4	5	if
LEAF_NODE	1063:7	1063:7	4	(
CONDITION	1063:8	1063:8	4	tile >= td -> td_nstrips
EXPR	1063:8	1063:16	5	tile >= td -> td_nstrips
FIELD	1063:8	1063:8	6	tile
LEAF_NODE	1063:8	1063:8	7	tile
REL_OPERATOR	1063:13	1063:13	6	>=
LEAF_NODE	1063:13	1063:13	7	>=
FIELD	1063:16	1063:20	6	td -> td_nstrips
LEAF_NODE	1063:16	1063:16	7	td
LEAF_NODE	1063:18	1063:18	7	->
LEAF_NODE	1063:20	1063:20	7	td_nstrips
LEAF_NODE	1063:30	1063:30	4	)
STATEMENTS	1063:32	1068:4	4	
LEAF_NODE	1063:32	1063:32	5	{
STATEMENTS	1064:12	1067:12	5	
EXPR_STATEMENT	1064:12	1066:69	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips ) ;
EXPR	1064:12	1064:12	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
FUNCTION_CALL	1064:12	1066:68	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
CALLEE	1064:12	1064:12	9	TIFFErrorExt
LEAF_NODE	1064:12	1064:12	10	TIFFErrorExt
LEAF_NODE	1064:24	1064:24	9	(
ARGUMENT	1064:25	1064:25	9	tif -> tif_clientdata
FIELD	1064:25	1064:30	10	tif -> tif_clientdata
LEAF_NODE	1064:25	1064:25	11	tif
LEAF_NODE	1064:28	1064:28	11	->
LEAF_NODE	1064:30	1064:30	11	tif_clientdata
LEAF_NODE	1064:44	1064:44	9	,
ARGUMENT	1064:46	1064:46	9	module
FIELD	1064:46	1064:46	10	module
LEAF_NODE	1064:46	1064:46	11	module
LEAF_NODE	1064:52	1064:52	9	,
ARGUMENT	1065:16	1065:16	9	"%lu: Tile out of range, max %lu"
FIELD	1065:16	1065:16	10	"%lu: Tile out of range, max %lu"
LEAF_NODE	1065:16	1065:16	11	"%lu: Tile out of range, max %lu"
LEAF_NODE	1065:49	1065:49	9	,
ARGUMENT	1066:16	1066:32	9	( unsigned long ) tile
LEAF_NODE	1066:16	1066:16	10	(
TYPE_NAME	1066:17	1066:26	10	unsigned long
LEAF_NODE	1066:17	1066:17	11	unsigned
LEAF_NODE	1066:26	1066:26	11	long
LEAF_NODE	1066:30	1066:30	10	)
FIELD	1066:32	1066:32	10	tile
LEAF_NODE	1066:32	1066:32	11	tile
LEAF_NODE	1066:36	1066:36	9	,
ARGUMENT	1066:38	1066:54	9	( unsigned long ) td -> td_nstrips
LEAF_NODE	1066:38	1066:38	10	(
TYPE_NAME	1066:39	1066:48	10	unsigned long
LEAF_NODE	1066:39	1066:39	11	unsigned
LEAF_NODE	1066:48	1066:48	11	long
LEAF_NODE	1066:52	1066:52	10	)
FIELD	1066:54	1066:58	10	td -> td_nstrips
LEAF_NODE	1066:54	1066:54	11	td
LEAF_NODE	1066:56	1066:56	11	->
LEAF_NODE	1066:58	1066:58	11	td_nstrips
LEAF_NODE	1066:68	1066:68	9	)
LEAF_NODE	1066:69	1066:69	7	;
JUMP_STATEMENT	1067:12	1067:35	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1067:12	1067:12	7	return
LEAF_NODE	1067:12	1067:12	8	return
DESTINATION	1067:19	1067:19	7	( ( tmsize_t ) ( - 1 ) )
EXPR	1067:19	1067:34	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1067:19	1067:19	9	(
LEAF_NODE	1067:20	1067:20	9	(
TYPE_NAME	1067:21	1067:21	9	tmsize_t
LEAF_NODE	1067:21	1067:21	10	tmsize_t
LEAF_NODE	1067:29	1067:29	9	)
LEAF_NODE	1067:30	1067:30	9	(
UNARY_EXPR	1067:31	1067:32	9	- 1
UNARY_OPERATOR	1067:31	1067:31	10	-
LEAF_NODE	1067:31	1067:31	11	-
FIELD	1067:32	1067:32	10	1
LEAF_NODE	1067:32	1067:32	11	1
LEAF_NODE	1067:33	1067:33	9	)
LEAF_NODE	1067:34	1067:34	9	)
LEAF_NODE	1067:35	1067:35	7	;
LEAF_NODE	1068:4	1068:4	5	}
SELECTION	1070:4	1071:12	3	
KEYWORD	1070:4	1070:4	4	if
LEAF_NODE	1070:4	1070:4	5	if
LEAF_NODE	1070:7	1070:7	4	(
CONDITION	1070:8	1070:8	4	! TIFFFillTile ( tif , tile )
EXPR	1070:8	1070:8	5	! TIFFFillTile ( tif , tile )
UNARY_EXPR	1070:8	1070:9	6	! TIFFFillTile ( tif , tile )
UNARY_OPERATOR	1070:8	1070:8	7	!
LEAF_NODE	1070:8	1070:8	8	!
FUNCTION_CALL	1070:9	1070:30	7	TIFFFillTile ( tif , tile )
CALLEE	1070:9	1070:9	8	TIFFFillTile
LEAF_NODE	1070:9	1070:9	9	TIFFFillTile
LEAF_NODE	1070:21	1070:21	8	(
ARGUMENT	1070:22	1070:22	8	tif
FIELD	1070:22	1070:22	9	tif
LEAF_NODE	1070:22	1070:22	10	tif
LEAF_NODE	1070:25	1070:25	8	,
ARGUMENT	1070:26	1070:26	8	tile
FIELD	1070:26	1070:26	9	tile
LEAF_NODE	1070:26	1070:26	10	tile
LEAF_NODE	1070:30	1070:30	8	)
LEAF_NODE	1070:31	1070:31	4	)
STATEMENTS	1071:12	1071:12	4	
JUMP_STATEMENT	1071:12	1071:34	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1071:12	1071:12	6	return
LEAF_NODE	1071:12	1071:12	7	return
DESTINATION	1071:18	1071:18	6	( ( tmsize_t ) ( - 1 ) )
EXPR	1071:18	1071:33	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1071:18	1071:18	8	(
LEAF_NODE	1071:19	1071:19	8	(
TYPE_NAME	1071:20	1071:20	8	tmsize_t
LEAF_NODE	1071:20	1071:20	9	tmsize_t
LEAF_NODE	1071:28	1071:28	8	)
LEAF_NODE	1071:29	1071:29	8	(
UNARY_EXPR	1071:30	1071:31	8	- 1
UNARY_OPERATOR	1071:30	1071:30	9	-
LEAF_NODE	1071:30	1071:30	10	-
FIELD	1071:31	1071:31	9	1
LEAF_NODE	1071:31	1071:31	10	1
LEAF_NODE	1071:32	1071:32	8	)
LEAF_NODE	1071:33	1071:33	8	)
LEAF_NODE	1071:34	1071:34	6	;
EXPR_STATEMENT	1073:4	1073:38	3	* buf = _TIFFmalloc ( bufsizetoalloc ) ;
EXPR	1073:4	1073:4	4	* buf = _TIFFmalloc ( bufsizetoalloc )
ASSIGN	1073:4	1073:11	5	* buf = _TIFFmalloc ( bufsizetoalloc )
LVAL	1073:4	1073:4	6	* buf
UNARY_EXPR	1073:4	1073:5	7	* buf
UNARY_OPERATOR	1073:4	1073:4	8	*
LEAF_NODE	1073:4	1073:4	9	*
FIELD	1073:5	1073:5	8	buf
LEAF_NODE	1073:5	1073:5	9	buf
ASSIGN_OP	1073:9	1073:9	6	=
LEAF_NODE	1073:9	1073:9	7	=
RVAL	1073:11	1073:11	6	_TIFFmalloc ( bufsizetoalloc )
FUNCTION_CALL	1073:11	1073:37	7	_TIFFmalloc ( bufsizetoalloc )
CALLEE	1073:11	1073:11	8	_TIFFmalloc
LEAF_NODE	1073:11	1073:11	9	_TIFFmalloc
LEAF_NODE	1073:22	1073:22	8	(
ARGUMENT	1073:23	1073:23	8	bufsizetoalloc
FIELD	1073:23	1073:23	9	bufsizetoalloc
LEAF_NODE	1073:23	1073:23	10	bufsizetoalloc
LEAF_NODE	1073:37	1073:37	8	)
LEAF_NODE	1073:38	1073:38	4	;
SELECTION	1074:4	1074:22	3	
KEYWORD	1074:4	1074:4	4	if
LEAF_NODE	1074:4	1074:4	5	if
LEAF_NODE	1074:7	1074:7	4	(
CONDITION	1074:8	1074:8	4	* buf == NULL
EXPR	1074:8	1074:16	5	* buf == NULL
UNARY_EXPR	1074:8	1074:9	6	* buf
UNARY_OPERATOR	1074:8	1074:8	7	*
LEAF_NODE	1074:8	1074:8	8	*
FIELD	1074:9	1074:9	7	buf
LEAF_NODE	1074:9	1074:9	8	buf
EQ_OPERATOR	1074:13	1074:13	6	==
LEAF_NODE	1074:13	1074:13	7	==
FIELD	1074:16	1074:16	6	NULL
LEAF_NODE	1074:16	1074:16	7	NULL
LEAF_NODE	1074:20	1074:20	4	)
STATEMENTS	1074:22	1078:4	4	
LEAF_NODE	1074:22	1074:22	5	{
STATEMENTS	1075:12	1077:12	5	
EXPR_STATEMENT	1075:12	1076:52	6	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "No space for tile buffer" ) ;
EXPR	1075:12	1075:12	7	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "No space for tile buffer" )
FUNCTION_CALL	1075:12	1076:51	8	TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "No space for tile buffer" )
CALLEE	1075:12	1075:12	9	TIFFErrorExt
LEAF_NODE	1075:12	1075:12	10	TIFFErrorExt
LEAF_NODE	1075:24	1075:24	9	(
ARGUMENT	1075:25	1075:25	9	tif -> tif_clientdata
FIELD	1075:25	1075:30	10	tif -> tif_clientdata
LEAF_NODE	1075:25	1075:25	11	tif
LEAF_NODE	1075:28	1075:28	11	->
LEAF_NODE	1075:30	1075:30	11	tif_clientdata
LEAF_NODE	1075:44	1075:44	9	,
ARGUMENT	1075:46	1075:46	9	TIFFFileName ( tif )
FUNCTION_CALL	1075:46	1075:62	10	TIFFFileName ( tif )
CALLEE	1075:46	1075:46	11	TIFFFileName
LEAF_NODE	1075:46	1075:46	12	TIFFFileName
LEAF_NODE	1075:58	1075:58	11	(
ARGUMENT	1075:59	1075:59	11	tif
FIELD	1075:59	1075:59	12	tif
LEAF_NODE	1075:59	1075:59	13	tif
LEAF_NODE	1075:62	1075:62	11	)
LEAF_NODE	1075:63	1075:63	9	,
ARGUMENT	1076:25	1076:25	9	"No space for tile buffer"
FIELD	1076:25	1076:25	10	"No space for tile buffer"
LEAF_NODE	1076:25	1076:25	11	"No space for tile buffer"
LEAF_NODE	1076:51	1076:51	9	)
LEAF_NODE	1076:52	1076:52	7	;
JUMP_STATEMENT	1077:12	1077:34	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1077:12	1077:12	7	return
LEAF_NODE	1077:12	1077:12	8	return
DESTINATION	1077:18	1077:18	7	( ( tmsize_t ) ( - 1 ) )
EXPR	1077:18	1077:33	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1077:18	1077:18	9	(
LEAF_NODE	1077:19	1077:19	9	(
TYPE_NAME	1077:20	1077:20	9	tmsize_t
LEAF_NODE	1077:20	1077:20	10	tmsize_t
LEAF_NODE	1077:28	1077:28	9	)
LEAF_NODE	1077:29	1077:29	9	(
UNARY_EXPR	1077:30	1077:31	9	- 1
UNARY_OPERATOR	1077:30	1077:30	10	-
LEAF_NODE	1077:30	1077:30	11	-
FIELD	1077:31	1077:31	10	1
LEAF_NODE	1077:31	1077:31	11	1
LEAF_NODE	1077:32	1077:32	9	)
LEAF_NODE	1077:33	1077:33	9	)
LEAF_NODE	1077:34	1077:34	7	;
LEAF_NODE	1078:4	1078:4	5	}
EXPR_STATEMENT	1079:4	1079:40	3	_TIFFmemset ( * buf , 0 , bufsizetoalloc ) ;
EXPR	1079:4	1079:4	4	_TIFFmemset ( * buf , 0 , bufsizetoalloc )
FUNCTION_CALL	1079:4	1079:39	5	_TIFFmemset ( * buf , 0 , bufsizetoalloc )
CALLEE	1079:4	1079:4	6	_TIFFmemset
LEAF_NODE	1079:4	1079:4	7	_TIFFmemset
LEAF_NODE	1079:15	1079:15	6	(
ARGUMENT	1079:16	1079:16	6	* buf
UNARY_EXPR	1079:16	1079:17	7	* buf
UNARY_OPERATOR	1079:16	1079:16	8	*
LEAF_NODE	1079:16	1079:16	9	*
FIELD	1079:17	1079:17	8	buf
LEAF_NODE	1079:17	1079:17	9	buf
LEAF_NODE	1079:20	1079:20	6	,
ARGUMENT	1079:22	1079:22	6	0
FIELD	1079:22	1079:22	7	0
LEAF_NODE	1079:22	1079:22	8	0
LEAF_NODE	1079:23	1079:23	6	,
ARGUMENT	1079:25	1079:25	6	bufsizetoalloc
FIELD	1079:25	1079:25	7	bufsizetoalloc
LEAF_NODE	1079:25	1079:25	8	bufsizetoalloc
LEAF_NODE	1079:39	1079:39	6	)
LEAF_NODE	1079:40	1079:40	4	;
SELECTION	1081:4	1082:8	3	
KEYWORD	1081:4	1081:4	4	if
LEAF_NODE	1081:4	1081:4	5	if
LEAF_NODE	1081:7	1081:7	4	(
CONDITION	1081:8	1081:8	4	size_to_read == ( tmsize_t ) ( - 1 )
EXPR	1081:8	1081:37	5	size_to_read == ( tmsize_t ) ( - 1 )
FIELD	1081:8	1081:8	6	size_to_read
LEAF_NODE	1081:8	1081:8	7	size_to_read
EQ_OPERATOR	1081:21	1081:21	6	==
LEAF_NODE	1081:21	1081:21	7	==
LEAF_NODE	1081:24	1081:24	6	(
TYPE_NAME	1081:25	1081:25	6	tmsize_t
LEAF_NODE	1081:25	1081:25	7	tmsize_t
LEAF_NODE	1081:33	1081:33	6	)
LEAF_NODE	1081:34	1081:34	6	(
UNARY_EXPR	1081:35	1081:36	6	- 1
UNARY_OPERATOR	1081:35	1081:35	7	-
LEAF_NODE	1081:35	1081:35	8	-
FIELD	1081:36	1081:36	7	1
LEAF_NODE	1081:36	1081:36	8	1
LEAF_NODE	1081:37	1081:37	6	)
LEAF_NODE	1081:38	1081:38	4	)
STATEMENTS	1082:8	1082:8	4	
EXPR_STATEMENT	1082:8	1082:31	5	size_to_read = tilesize ;
EXPR	1082:8	1082:8	6	size_to_read = tilesize
ASSIGN	1082:8	1082:23	7	size_to_read = tilesize
LVAL	1082:8	1082:8	8	size_to_read
FIELD	1082:8	1082:8	9	size_to_read
LEAF_NODE	1082:8	1082:8	10	size_to_read
ASSIGN_OP	1082:21	1082:21	8	=
LEAF_NODE	1082:21	1082:21	9	=
RVAL	1082:23	1082:23	8	tilesize
FIELD	1082:23	1082:23	9	tilesize
LEAF_NODE	1082:23	1082:23	10	tilesize
LEAF_NODE	1082:31	1082:31	6	;
SELECTION	1083:4	1083:9	3	
KEYWORD	1083:4	1083:4	4	else
LEAF_NODE	1083:4	1083:4	5	else
STATEMENTS	1083:9	1083:9	4	
SELECTION	1083:9	1084:8	5	
KEYWORD	1083:9	1083:9	6	if
LEAF_NODE	1083:9	1083:9	7	if
LEAF_NODE	1083:12	1083:12	6	(
CONDITION	1083:13	1083:13	6	size_to_read > tilesize
EXPR	1083:13	1083:28	7	size_to_read > tilesize
FIELD	1083:13	1083:13	8	size_to_read
LEAF_NODE	1083:13	1083:13	9	size_to_read
REL_OPERATOR	1083:26	1083:26	8	>
LEAF_NODE	1083:26	1083:26	9	>
FIELD	1083:28	1083:28	8	tilesize
LEAF_NODE	1083:28	1083:28	9	tilesize
LEAF_NODE	1083:36	1083:36	6	)
STATEMENTS	1084:8	1084:8	6	
EXPR_STATEMENT	1084:8	1084:31	7	size_to_read = tilesize ;
EXPR	1084:8	1084:8	8	size_to_read = tilesize
ASSIGN	1084:8	1084:23	9	size_to_read = tilesize
LVAL	1084:8	1084:8	10	size_to_read
FIELD	1084:8	1084:8	11	size_to_read
LEAF_NODE	1084:8	1084:8	12	size_to_read
ASSIGN_OP	1084:21	1084:21	10	=
LEAF_NODE	1084:21	1084:21	11	=
RVAL	1084:23	1084:23	10	tilesize
FIELD	1084:23	1084:23	11	tilesize
LEAF_NODE	1084:23	1084:23	12	tilesize
LEAF_NODE	1084:31	1084:31	8	;
SELECTION	1085:4	1086:76	3	
KEYWORD	1085:4	1085:4	4	if
LEAF_NODE	1085:4	1085:4	5	if
LEAF_NODE	1085:6	1085:6	4	(
CONDITION	1085:8	1085:8	4	( * tif -> tif_decodetile ) ( tif , ( uint8 * ) * buf , size_to_read , ( uint16 ) ( tile / td -> td_stripsperimage ) )
EXPR	1085:8	1085:8	5	( * tif -> tif_decodetile ) ( tif , ( uint8 * ) * buf , size_to_read , ( uint16 ) ( tile / td -> td_stripsperimage ) )
FUNCTION_CALL	1085:8	1086:73	6	( * tif -> tif_decodetile ) ( tif , ( uint8 * ) * buf , size_to_read , ( uint16 ) ( tile / td -> td_stripsperimage ) )
CALLEE	1085:8	1085:29	7	( * tif -> tif_decodetile )
LEAF_NODE	1085:8	1085:8	8	(
UNARY_EXPR	1085:9	1085:10	8	* tif -> tif_decodetile
UNARY_OPERATOR	1085:9	1085:9	9	*
LEAF_NODE	1085:9	1085:9	10	*
FIELD	1085:10	1085:15	9	tif -> tif_decodetile
LEAF_NODE	1085:10	1085:10	10	tif
LEAF_NODE	1085:13	1085:13	10	->
LEAF_NODE	1085:15	1085:15	10	tif_decodetile
LEAF_NODE	1085:29	1085:29	8	)
LEAF_NODE	1085:30	1085:30	7	(
ARGUMENT	1085:31	1085:31	7	tif
FIELD	1085:31	1085:31	8	tif
LEAF_NODE	1085:31	1085:31	9	tif
LEAF_NODE	1085:34	1085:34	7	,
ARGUMENT	1086:8	1086:17	7	( uint8 * ) * buf
LEAF_NODE	1086:8	1086:8	8	(
TYPE_NAME	1086:9	1086:9	8	uint8
LEAF_NODE	1086:9	1086:9	9	uint8
LEAF_NODE	1086:14	1086:14	8	*
LEAF_NODE	1086:15	1086:15	8	)
UNARY_EXPR	1086:17	1086:18	8	* buf
UNARY_OPERATOR	1086:17	1086:17	9	*
LEAF_NODE	1086:17	1086:17	10	*
FIELD	1086:18	1086:18	9	buf
LEAF_NODE	1086:18	1086:18	10	buf
LEAF_NODE	1086:21	1086:21	7	,
ARGUMENT	1086:23	1086:23	7	size_to_read
FIELD	1086:23	1086:23	8	size_to_read
LEAF_NODE	1086:23	1086:23	9	size_to_read
LEAF_NODE	1086:35	1086:35	7	,
ARGUMENT	1086:37	1086:72	7	( uint16 ) ( tile / td -> td_stripsperimage )
LEAF_NODE	1086:37	1086:37	8	(
TYPE_NAME	1086:38	1086:38	8	uint16
LEAF_NODE	1086:38	1086:38	9	uint16
LEAF_NODE	1086:44	1086:44	8	)
LEAF_NODE	1086:45	1086:45	8	(
FIELD	1086:46	1086:46	8	tile
LEAF_NODE	1086:46	1086:46	9	tile
LEAF_NODE	1086:50	1086:50	8	/
FIELD	1086:51	1086:55	8	td -> td_stripsperimage
LEAF_NODE	1086:51	1086:51	9	td
LEAF_NODE	1086:53	1086:53	9	->
LEAF_NODE	1086:55	1086:55	9	td_stripsperimage
LEAF_NODE	1086:72	1086:72	8	)
LEAF_NODE	1086:73	1086:73	7	)
LEAF_NODE	1086:74	1086:74	4	)
STATEMENTS	1086:76	1089:4	4	
LEAF_NODE	1086:76	1086:76	5	{
STATEMENTS	1087:8	1088:29	5	
EXPR_STATEMENT	1087:8	1087:64	6	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) * buf , size_to_read ) ;
EXPR	1087:8	1087:8	7	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) * buf , size_to_read )
FUNCTION_CALL	1087:8	1087:63	8	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) * buf , size_to_read )
CALLEE	1087:8	1087:29	9	( * tif -> tif_postdecode )
LEAF_NODE	1087:8	1087:8	10	(
UNARY_EXPR	1087:9	1087:10	10	* tif -> tif_postdecode
UNARY_OPERATOR	1087:9	1087:9	11	*
LEAF_NODE	1087:9	1087:9	12	*
FIELD	1087:10	1087:15	11	tif -> tif_postdecode
LEAF_NODE	1087:10	1087:10	12	tif
LEAF_NODE	1087:13	1087:13	12	->
LEAF_NODE	1087:15	1087:15	12	tif_postdecode
LEAF_NODE	1087:29	1087:29	10	)
LEAF_NODE	1087:30	1087:30	9	(
ARGUMENT	1087:31	1087:31	9	tif
FIELD	1087:31	1087:31	10	tif
LEAF_NODE	1087:31	1087:31	11	tif
LEAF_NODE	1087:34	1087:34	9	,
ARGUMENT	1087:36	1087:45	9	( uint8 * ) * buf
LEAF_NODE	1087:36	1087:36	10	(
TYPE_NAME	1087:37	1087:37	10	uint8
LEAF_NODE	1087:37	1087:37	11	uint8
LEAF_NODE	1087:42	1087:42	10	*
LEAF_NODE	1087:43	1087:43	10	)
UNARY_EXPR	1087:45	1087:46	10	* buf
UNARY_OPERATOR	1087:45	1087:45	11	*
LEAF_NODE	1087:45	1087:45	12	*
FIELD	1087:46	1087:46	11	buf
LEAF_NODE	1087:46	1087:46	12	buf
LEAF_NODE	1087:49	1087:49	9	,
ARGUMENT	1087:51	1087:51	9	size_to_read
FIELD	1087:51	1087:51	10	size_to_read
LEAF_NODE	1087:51	1087:51	11	size_to_read
LEAF_NODE	1087:63	1087:63	9	)
LEAF_NODE	1087:64	1087:64	7	;
LEAF_NODE	1088:8	1088:8	6	return
LEAF_NODE	1088:15	1088:15	6	(
LEAF_NODE	1088:16	1088:16	6	size_to_read
LEAF_NODE	1088:28	1088:28	6	)
LEAF_NODE	1088:29	1088:29	6	;
LEAF_NODE	1089:4	1089:4	5	}
SELECTION	1089:6	1090:8	3	
KEYWORD	1089:6	1089:6	4	else
LEAF_NODE	1089:6	1089:6	5	else
STATEMENTS	1090:8	1090:8	4	
JUMP_STATEMENT	1090:8	1090:31	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1090:8	1090:8	6	return
LEAF_NODE	1090:8	1090:8	7	return
DESTINATION	1090:15	1090:15	6	( ( tmsize_t ) ( - 1 ) )
EXPR	1090:15	1090:30	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1090:15	1090:15	8	(
LEAF_NODE	1090:16	1090:16	8	(
TYPE_NAME	1090:17	1090:17	8	tmsize_t
LEAF_NODE	1090:17	1090:17	9	tmsize_t
LEAF_NODE	1090:25	1090:25	8	)
LEAF_NODE	1090:26	1090:26	8	(
UNARY_EXPR	1090:27	1090:28	8	- 1
UNARY_OPERATOR	1090:27	1090:27	9	-
LEAF_NODE	1090:27	1090:27	10	-
FIELD	1090:28	1090:28	9	1
LEAF_NODE	1090:28	1090:28	10	1
LEAF_NODE	1090:29	1090:29	8	)
LEAF_NODE	1090:30	1090:30	8	)
LEAF_NODE	1090:31	1090:31	6	;
LEAF_NODE	1091:0	1091:0	2	}
FUNCTION_DEF	1093:0	1161:0	1	
RETURN_TYPE	1093:0	1093:7	2	static tmsize_t
LEAF_NODE	1093:0	1093:0	3	static
TYPE_NAME	1093:7	1093:7	3	tmsize_t
LEAF_NODE	1093:7	1093:7	4	tmsize_t
FUNCTION_NAME	1094:0	1094:0	2	TIFFReadRawTile1
LEAF_NODE	1094:0	1094:0	3	TIFFReadRawTile1
PARAMETER_LIST	1094:16	1094:85	2	( TIFF * tif , uint32 tile , void * buf , tmsize_t size , const char * module )
LEAF_NODE	1094:16	1094:16	3	(
PARAMETER_DECL	1094:17	1094:23	3	TIFF * tif
TYPE	1094:17	1094:21	4	TIFF *
TYPE_NAME	1094:17	1094:17	5	TIFF
LEAF_NODE	1094:17	1094:17	6	TIFF
POINTER	1094:21	1094:21	5	*
LEAF_NODE	1094:21	1094:21	6	*
NAME	1094:23	1094:23	4	tif
LEAF_NODE	1094:23	1094:23	5	tif
LEAF_NODE	1094:26	1094:26	3	,
PARAMETER_DECL	1094:28	1094:35	3	uint32 tile
TYPE	1094:28	1094:28	4	uint32
TYPE_NAME	1094:28	1094:28	5	uint32
LEAF_NODE	1094:28	1094:28	6	uint32
NAME	1094:35	1094:35	4	tile
LEAF_NODE	1094:35	1094:35	5	tile
LEAF_NODE	1094:39	1094:39	3	,
PARAMETER_DECL	1094:41	1094:47	3	void * buf
TYPE	1094:41	1094:45	4	void *
TYPE_NAME	1094:41	1094:41	5	void
LEAF_NODE	1094:41	1094:41	6	void
POINTER	1094:45	1094:45	5	*
LEAF_NODE	1094:45	1094:45	6	*
NAME	1094:47	1094:47	4	buf
LEAF_NODE	1094:47	1094:47	5	buf
LEAF_NODE	1094:50	1094:50	3	,
PARAMETER_DECL	1094:52	1094:61	3	tmsize_t size
TYPE	1094:52	1094:52	4	tmsize_t
TYPE_NAME	1094:52	1094:52	5	tmsize_t
LEAF_NODE	1094:52	1094:52	6	tmsize_t
NAME	1094:61	1094:61	4	size
LEAF_NODE	1094:61	1094:61	5	size
LEAF_NODE	1094:65	1094:65	3	,
PARAMETER_DECL	1094:67	1094:79	3	const char * module
TYPE	1094:67	1094:77	4	const char *
TYPE_NAME	1094:67	1094:73	5	const char
LEAF_NODE	1094:67	1094:67	6	const
LEAF_NODE	1094:73	1094:73	6	char
POINTER	1094:77	1094:77	5	*
LEAF_NODE	1094:77	1094:77	6	*
NAME	1094:79	1094:79	4	module
LEAF_NODE	1094:79	1094:79	5	module
LEAF_NODE	1094:85	1094:85	3	)
LEAF_NODE	1095:0	1095:0	2	{
STATEMENTS	1096:1	1160:14	2	
EXPR_STATEMENT	1096:1	1096:43	3	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 ) ;
EXPR	1096:1	1096:1	4	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
FUNCTION_CALL	1096:1	1096:42	5	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
CALLEE	1096:1	1096:1	6	assert
LEAF_NODE	1096:1	1096:1	7	assert
LEAF_NODE	1096:7	1096:7	6	(
ARGUMENT	1096:8	1096:41	6	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
LEAF_NODE	1096:8	1096:8	7	(
FIELD	1096:9	1096:14	7	tif -> tif_flags
LEAF_NODE	1096:9	1096:9	8	tif
LEAF_NODE	1096:12	1096:12	8	->
LEAF_NODE	1096:14	1096:14	8	tif_flags
LEAF_NODE	1096:23	1096:23	7	&
FIELD	1096:24	1096:24	7	TIFF_NOREADRAW
LEAF_NODE	1096:24	1096:24	8	TIFF_NOREADRAW
LEAF_NODE	1096:38	1096:38	7	)
EQ_OPERATOR	1096:39	1096:39	7	==
LEAF_NODE	1096:39	1096:39	8	==
FIELD	1096:41	1096:41	7	0
LEAF_NODE	1096:41	1096:41	8	0
LEAF_NODE	1096:42	1096:42	6	)
LEAF_NODE	1096:43	1096:43	4	;
SELECTION	1097:1	1097:21	3	
KEYWORD	1097:1	1097:1	4	if
LEAF_NODE	1097:1	1097:1	5	if
LEAF_NODE	1097:4	1097:4	4	(
CONDITION	1097:5	1097:5	4	! isMapped ( tif )
EXPR	1097:5	1097:5	5	! isMapped ( tif )
UNARY_EXPR	1097:5	1097:6	6	! isMapped ( tif )
UNARY_OPERATOR	1097:5	1097:5	7	!
LEAF_NODE	1097:5	1097:5	8	!
FUNCTION_CALL	1097:6	1097:18	7	isMapped ( tif )
CALLEE	1097:6	1097:6	8	isMapped
LEAF_NODE	1097:6	1097:6	9	isMapped
LEAF_NODE	1097:14	1097:14	8	(
ARGUMENT	1097:15	1097:15	8	tif
FIELD	1097:15	1097:15	9	tif
LEAF_NODE	1097:15	1097:15	10	tif
LEAF_NODE	1097:18	1097:18	8	)
LEAF_NODE	1097:19	1097:19	4	)
STATEMENTS	1097:21	1127:1	4	
LEAF_NODE	1097:21	1097:21	5	{
STATEMENTS	1098:2	1109:2	5	
SIMPLE_DECL	1098:2	1098:13	6	tmsize_t cc ;
VAR_DECL	1098:2	1098:11	7	tmsize_t cc
TYPE	1098:2	1098:2	8	tmsize_t
TYPE_NAME	1098:2	1098:2	9	tmsize_t
LEAF_NODE	1098:2	1098:2	10	tmsize_t
NAME	1098:11	1098:11	8	cc
LEAF_NODE	1098:11	1098:11	9	cc
LEAF_NODE	1098:13	1098:13	7	;
SELECTION	1100:2	1100:52	6	
KEYWORD	1100:2	1100:2	7	if
LEAF_NODE	1100:2	1100:2	8	if
LEAF_NODE	1100:5	1100:5	7	(
CONDITION	1100:6	1100:6	7	! SeekOK ( tif , TIFFGetStrileOffset ( tif , tile ) )
EXPR	1100:6	1100:6	8	! SeekOK ( tif , TIFFGetStrileOffset ( tif , tile ) )
UNARY_EXPR	1100:6	1100:7	9	! SeekOK ( tif , TIFFGetStrileOffset ( tif , tile ) )
UNARY_OPERATOR	1100:6	1100:6	10	!
LEAF_NODE	1100:6	1100:6	11	!
FUNCTION_CALL	1100:7	1100:49	10	SeekOK ( tif , TIFFGetStrileOffset ( tif , tile ) )
CALLEE	1100:7	1100:7	11	SeekOK
LEAF_NODE	1100:7	1100:7	12	SeekOK
LEAF_NODE	1100:13	1100:13	11	(
ARGUMENT	1100:14	1100:14	11	tif
FIELD	1100:14	1100:14	12	tif
LEAF_NODE	1100:14	1100:14	13	tif
LEAF_NODE	1100:17	1100:17	11	,
ARGUMENT	1100:19	1100:19	11	TIFFGetStrileOffset ( tif , tile )
FUNCTION_CALL	1100:19	1100:48	12	TIFFGetStrileOffset ( tif , tile )
CALLEE	1100:19	1100:19	13	TIFFGetStrileOffset
LEAF_NODE	1100:19	1100:19	14	TIFFGetStrileOffset
LEAF_NODE	1100:38	1100:38	13	(
ARGUMENT	1100:39	1100:39	13	tif
FIELD	1100:39	1100:39	14	tif
LEAF_NODE	1100:39	1100:39	15	tif
LEAF_NODE	1100:42	1100:42	13	,
ARGUMENT	1100:44	1100:44	13	tile
FIELD	1100:44	1100:44	14	tile
LEAF_NODE	1100:44	1100:44	15	tile
LEAF_NODE	1100:48	1100:48	13	)
LEAF_NODE	1100:49	1100:49	11	)
LEAF_NODE	1100:50	1100:50	7	)
STATEMENTS	1100:52	1107:2	7	
LEAF_NODE	1100:52	1100:52	8	{
STATEMENTS	1101:3	1106:3	8	
EXPR_STATEMENT	1101:3	1105:28	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at row %lu, col %lu, tile %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) tile ) ;
EXPR	1101:3	1101:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at row %lu, col %lu, tile %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) tile )
FUNCTION_CALL	1101:3	1105:27	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Seek error at row %lu, col %lu, tile %lu" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) tile )
CALLEE	1101:3	1101:3	12	TIFFErrorExt
LEAF_NODE	1101:3	1101:3	13	TIFFErrorExt
LEAF_NODE	1101:15	1101:15	12	(
ARGUMENT	1101:16	1101:16	12	tif -> tif_clientdata
FIELD	1101:16	1101:21	13	tif -> tif_clientdata
LEAF_NODE	1101:16	1101:16	14	tif
LEAF_NODE	1101:19	1101:19	14	->
LEAF_NODE	1101:21	1101:21	14	tif_clientdata
LEAF_NODE	1101:35	1101:35	12	,
ARGUMENT	1101:37	1101:37	12	module
FIELD	1101:37	1101:37	13	module
LEAF_NODE	1101:37	1101:37	14	module
LEAF_NODE	1101:43	1101:43	12	,
ARGUMENT	1102:7	1102:7	12	"Seek error at row %lu, col %lu, tile %lu"
FIELD	1102:7	1102:7	13	"Seek error at row %lu, col %lu, tile %lu"
LEAF_NODE	1102:7	1102:7	14	"Seek error at row %lu, col %lu, tile %lu"
LEAF_NODE	1102:49	1102:49	12	,
ARGUMENT	1103:7	1103:23	12	( unsigned long ) tif -> tif_row
LEAF_NODE	1103:7	1103:7	13	(
TYPE_NAME	1103:8	1103:17	13	unsigned long
LEAF_NODE	1103:8	1103:8	14	unsigned
LEAF_NODE	1103:17	1103:17	14	long
LEAF_NODE	1103:21	1103:21	13	)
FIELD	1103:23	1103:28	13	tif -> tif_row
LEAF_NODE	1103:23	1103:23	14	tif
LEAF_NODE	1103:26	1103:26	14	->
LEAF_NODE	1103:28	1103:28	14	tif_row
LEAF_NODE	1103:35	1103:35	12	,
ARGUMENT	1104:7	1104:23	12	( unsigned long ) tif -> tif_col
LEAF_NODE	1104:7	1104:7	13	(
TYPE_NAME	1104:8	1104:17	13	unsigned long
LEAF_NODE	1104:8	1104:8	14	unsigned
LEAF_NODE	1104:17	1104:17	14	long
LEAF_NODE	1104:21	1104:21	13	)
FIELD	1104:23	1104:28	13	tif -> tif_col
LEAF_NODE	1104:23	1104:23	14	tif
LEAF_NODE	1104:26	1104:26	14	->
LEAF_NODE	1104:28	1104:28	14	tif_col
LEAF_NODE	1104:35	1104:35	12	,
ARGUMENT	1105:7	1105:23	12	( unsigned long ) tile
LEAF_NODE	1105:7	1105:7	13	(
TYPE_NAME	1105:8	1105:17	13	unsigned long
LEAF_NODE	1105:8	1105:8	14	unsigned
LEAF_NODE	1105:17	1105:17	14	long
LEAF_NODE	1105:21	1105:21	13	)
FIELD	1105:23	1105:23	13	tile
LEAF_NODE	1105:23	1105:23	14	tile
LEAF_NODE	1105:27	1105:27	12	)
LEAF_NODE	1105:28	1105:28	10	;
JUMP_STATEMENT	1106:3	1106:26	9	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1106:3	1106:3	10	return
LEAF_NODE	1106:3	1106:3	11	return
DESTINATION	1106:10	1106:10	10	( ( tmsize_t ) ( - 1 ) )
EXPR	1106:10	1106:25	11	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1106:10	1106:10	12	(
LEAF_NODE	1106:11	1106:11	12	(
TYPE_NAME	1106:12	1106:12	12	tmsize_t
LEAF_NODE	1106:12	1106:12	13	tmsize_t
LEAF_NODE	1106:20	1106:20	12	)
LEAF_NODE	1106:21	1106:21	12	(
UNARY_EXPR	1106:22	1106:23	12	- 1
UNARY_OPERATOR	1106:22	1106:22	13	-
LEAF_NODE	1106:22	1106:22	14	-
FIELD	1106:23	1106:23	13	1
LEAF_NODE	1106:23	1106:23	14	1
LEAF_NODE	1106:24	1106:24	12	)
LEAF_NODE	1106:25	1106:25	12	)
LEAF_NODE	1106:26	1106:26	10	;
LEAF_NODE	1107:2	1107:2	8	}
EXPR_STATEMENT	1108:2	1108:35	6	cc = TIFFReadFile ( tif , buf , size ) ;
EXPR	1108:2	1108:2	7	cc = TIFFReadFile ( tif , buf , size )
ASSIGN	1108:2	1108:7	8	cc = TIFFReadFile ( tif , buf , size )
LVAL	1108:2	1108:2	9	cc
FIELD	1108:2	1108:2	10	cc
LEAF_NODE	1108:2	1108:2	11	cc
ASSIGN_OP	1108:5	1108:5	9	=
LEAF_NODE	1108:5	1108:5	10	=
RVAL	1108:7	1108:7	9	TIFFReadFile ( tif , buf , size )
FUNCTION_CALL	1108:7	1108:34	10	TIFFReadFile ( tif , buf , size )
CALLEE	1108:7	1108:7	11	TIFFReadFile
LEAF_NODE	1108:7	1108:7	12	TIFFReadFile
LEAF_NODE	1108:19	1108:19	11	(
ARGUMENT	1108:20	1108:20	11	tif
FIELD	1108:20	1108:20	12	tif
LEAF_NODE	1108:20	1108:20	13	tif
LEAF_NODE	1108:23	1108:23	11	,
ARGUMENT	1108:25	1108:25	11	buf
FIELD	1108:25	1108:25	12	buf
LEAF_NODE	1108:25	1108:25	13	buf
LEAF_NODE	1108:28	1108:28	11	,
ARGUMENT	1108:30	1108:30	11	size
FIELD	1108:30	1108:30	12	size
LEAF_NODE	1108:30	1108:30	13	size
LEAF_NODE	1108:34	1108:34	11	)
LEAF_NODE	1108:35	1108:35	7	;
SELECTION	1109:2	1109:18	6	
KEYWORD	1109:2	1109:2	7	if
LEAF_NODE	1109:2	1109:2	8	if
LEAF_NODE	1109:5	1109:5	7	(
CONDITION	1109:6	1109:6	7	cc != size
EXPR	1109:6	1109:12	8	cc != size
FIELD	1109:6	1109:6	9	cc
LEAF_NODE	1109:6	1109:6	10	cc
EQ_OPERATOR	1109:9	1109:9	9	!=
LEAF_NODE	1109:9	1109:9	10	!=
FIELD	1109:12	1109:12	9	size
LEAF_NODE	1109:12	1109:12	10	size
LEAF_NODE	1109:16	1109:16	7	)
STATEMENTS	1109:18	1126:2	7	
LEAF_NODE	1109:18	1109:18	8	{
STATEMENTS	1111:3	1125:3	8	
EXPR_STATEMENT	1111:3	1116:33	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at row %lu, col %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned __int64 ) cc , ( unsigned __int64 ) size ) ;
EXPR	1111:3	1111:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at row %lu, col %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned __int64 ) cc , ( unsigned __int64 ) size )
FUNCTION_CALL	1111:3	1116:32	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at row %lu, col %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned __int64 ) cc , ( unsigned __int64 ) size )
CALLEE	1111:3	1111:3	12	TIFFErrorExt
LEAF_NODE	1111:3	1111:3	13	TIFFErrorExt
LEAF_NODE	1111:15	1111:15	12	(
ARGUMENT	1111:16	1111:16	12	tif -> tif_clientdata
FIELD	1111:16	1111:21	13	tif -> tif_clientdata
LEAF_NODE	1111:16	1111:16	14	tif
LEAF_NODE	1111:19	1111:19	14	->
LEAF_NODE	1111:21	1111:21	14	tif_clientdata
LEAF_NODE	1111:35	1111:35	12	,
ARGUMENT	1111:37	1111:37	12	module
FIELD	1111:37	1111:37	13	module
LEAF_NODE	1111:37	1111:37	14	module
LEAF_NODE	1111:43	1111:43	12	,
ARGUMENT	1112:1	1112:1	12	"Read error at row %lu, col %lu; got %I64u bytes, expected %I64u"
FIELD	1112:1	1112:1	13	"Read error at row %lu, col %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	1112:1	1112:1	14	"Read error at row %lu, col %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	1112:66	1112:66	12	,
ARGUMENT	1113:9	1113:25	12	( unsigned long ) tif -> tif_row
LEAF_NODE	1113:9	1113:9	13	(
TYPE_NAME	1113:10	1113:19	13	unsigned long
LEAF_NODE	1113:10	1113:10	14	unsigned
LEAF_NODE	1113:19	1113:19	14	long
LEAF_NODE	1113:23	1113:23	13	)
FIELD	1113:25	1113:30	13	tif -> tif_row
LEAF_NODE	1113:25	1113:25	14	tif
LEAF_NODE	1113:28	1113:28	14	->
LEAF_NODE	1113:30	1113:30	14	tif_row
LEAF_NODE	1113:37	1113:37	12	,
ARGUMENT	1114:9	1114:25	12	( unsigned long ) tif -> tif_col
LEAF_NODE	1114:9	1114:9	13	(
TYPE_NAME	1114:10	1114:19	13	unsigned long
LEAF_NODE	1114:10	1114:10	14	unsigned
LEAF_NODE	1114:19	1114:19	14	long
LEAF_NODE	1114:23	1114:23	13	)
FIELD	1114:25	1114:30	13	tif -> tif_col
LEAF_NODE	1114:25	1114:25	14	tif
LEAF_NODE	1114:28	1114:28	14	->
LEAF_NODE	1114:30	1114:30	14	tif_col
LEAF_NODE	1114:37	1114:37	12	,
ARGUMENT	1115:9	1115:28	12	( unsigned __int64 ) cc
LEAF_NODE	1115:9	1115:9	13	(
TYPE_NAME	1115:10	1115:19	13	unsigned __int64
LEAF_NODE	1115:10	1115:10	14	unsigned
LEAF_NODE	1115:19	1115:19	14	__int64
LEAF_NODE	1115:26	1115:26	13	)
FIELD	1115:28	1115:28	13	cc
LEAF_NODE	1115:28	1115:28	14	cc
LEAF_NODE	1115:30	1115:30	12	,
ARGUMENT	1116:9	1116:28	12	( unsigned __int64 ) size
LEAF_NODE	1116:9	1116:9	13	(
TYPE_NAME	1116:10	1116:19	13	unsigned __int64
LEAF_NODE	1116:10	1116:10	14	unsigned
LEAF_NODE	1116:19	1116:19	14	__int64
LEAF_NODE	1116:26	1116:26	13	)
FIELD	1116:28	1116:28	13	size
LEAF_NODE	1116:28	1116:28	14	size
LEAF_NODE	1116:32	1116:32	12	)
LEAF_NODE	1116:33	1116:33	10	;
LEAF_NODE	1118:3	1118:3	9	TIFFErrorExt
LEAF_NODE	1118:15	1118:15	9	(
LEAF_NODE	1118:16	1118:16	9	tif
LEAF_NODE	1118:19	1118:19	9	->
LEAF_NODE	1118:21	1118:21	9	tif_clientdata
LEAF_NODE	1118:35	1118:35	9	,
LEAF_NODE	1118:37	1118:37	9	module
LEAF_NODE	1118:43	1118:43	9	,
LEAF_NODE	1119:1	1119:1	9	"Read error at row %lu, col %lu; got %llu bytes, expected %llu"
LEAF_NODE	1119:64	1119:64	9	,
LEAF_NODE	1120:9	1120:9	9	(
LEAF_NODE	1120:10	1120:10	9	unsigned
LEAF_NODE	1120:19	1120:19	9	long
LEAF_NODE	1120:23	1120:23	9	)
LEAF_NODE	1120:25	1120:25	9	tif
LEAF_NODE	1120:28	1120:28	9	->
LEAF_NODE	1120:30	1120:30	9	tif_row
LEAF_NODE	1120:37	1120:37	9	,
LEAF_NODE	1121:9	1121:9	9	(
LEAF_NODE	1121:10	1121:10	9	unsigned
LEAF_NODE	1121:19	1121:19	9	long
LEAF_NODE	1121:23	1121:23	9	)
LEAF_NODE	1121:25	1121:25	9	tif
LEAF_NODE	1121:28	1121:28	9	->
LEAF_NODE	1121:30	1121:30	9	tif_col
LEAF_NODE	1121:37	1121:37	9	,
LEAF_NODE	1122:9	1122:9	9	(
LEAF_NODE	1122:10	1122:10	9	unsigned
LEAF_NODE	1122:19	1122:19	9	long
LEAF_NODE	1122:24	1122:24	9	long
LEAF_NODE	1122:28	1122:28	9	)
LEAF_NODE	1122:30	1122:30	9	cc
LEAF_NODE	1122:32	1122:32	9	,
LEAF_NODE	1123:9	1123:9	9	(
LEAF_NODE	1123:10	1123:10	9	unsigned
LEAF_NODE	1123:19	1123:19	9	long
LEAF_NODE	1123:24	1123:24	9	long
LEAF_NODE	1123:28	1123:28	9	)
LEAF_NODE	1123:30	1123:30	9	size
LEAF_NODE	1123:34	1123:34	9	)
LEAF_NODE	1123:35	1123:35	9	;
JUMP_STATEMENT	1125:3	1125:26	9	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1125:3	1125:3	10	return
LEAF_NODE	1125:3	1125:3	11	return
DESTINATION	1125:10	1125:10	10	( ( tmsize_t ) ( - 1 ) )
EXPR	1125:10	1125:25	11	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1125:10	1125:10	12	(
LEAF_NODE	1125:11	1125:11	12	(
TYPE_NAME	1125:12	1125:12	12	tmsize_t
LEAF_NODE	1125:12	1125:12	13	tmsize_t
LEAF_NODE	1125:20	1125:20	12	)
LEAF_NODE	1125:21	1125:21	12	(
UNARY_EXPR	1125:22	1125:23	12	- 1
UNARY_OPERATOR	1125:22	1125:22	13	-
LEAF_NODE	1125:22	1125:22	14	-
FIELD	1125:23	1125:23	13	1
LEAF_NODE	1125:23	1125:23	14	1
LEAF_NODE	1125:24	1125:24	12	)
LEAF_NODE	1125:25	1125:25	12	)
LEAF_NODE	1125:26	1125:26	10	;
LEAF_NODE	1126:2	1126:2	8	}
LEAF_NODE	1127:1	1127:1	5	}
SELECTION	1127:3	1127:8	3	
KEYWORD	1127:3	1127:3	4	else
LEAF_NODE	1127:3	1127:3	5	else
STATEMENTS	1127:8	1159:1	4	
LEAF_NODE	1127:8	1127:8	5	{
STATEMENTS	1128:2	1158:2	5	
SIMPLE_DECL	1128:2	1128:16	6	tmsize_t ma , tmsize_t mb ;
INIT_DECL_LIST	1128:2	1128:2	7	tmsize_t ma , tmsize_t mb
VAR_DECL	1128:2	1128:11	8	tmsize_t ma
TYPE	1128:2	1128:2	9	tmsize_t
TYPE_NAME	1128:2	1128:2	10	tmsize_t
LEAF_NODE	1128:2	1128:2	11	tmsize_t
NAME	1128:11	1128:11	9	ma
LEAF_NODE	1128:11	1128:11	10	ma
LEAF_NODE	1128:13	1128:13	8	,
VAR_DECL	1128:2	1128:14	8	tmsize_t mb
TYPE	1128:2	1128:2	9	tmsize_t
TYPE_NAME	1128:2	1128:2	10	tmsize_t
LEAF_NODE	1128:2	1128:2	11	tmsize_t
NAME	1128:14	1128:14	9	mb
LEAF_NODE	1128:14	1128:14	10	mb
LEAF_NODE	1128:16	1128:16	7	;
SIMPLE_DECL	1129:2	1129:12	6	tmsize_t n ;
VAR_DECL	1129:2	1129:11	7	tmsize_t n
TYPE	1129:2	1129:2	8	tmsize_t
TYPE_NAME	1129:2	1129:2	9	tmsize_t
LEAF_NODE	1129:2	1129:2	10	tmsize_t
NAME	1129:11	1129:11	8	n
LEAF_NODE	1129:11	1129:11	9	n
LEAF_NODE	1129:12	1129:12	7	;
EXPR_STATEMENT	1130:2	1130:45	6	ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , tile ) ;
EXPR	1130:2	1130:2	7	ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , tile )
ASSIGN	1130:2	1130:5	8	ma = ( tmsize_t ) TIFFGetStrileOffset ( tif , tile )
LVAL	1130:2	1130:2	9	ma
FIELD	1130:2	1130:2	10	ma
LEAF_NODE	1130:2	1130:2	11	ma
ASSIGN_OP	1130:4	1130:4	9	=
LEAF_NODE	1130:4	1130:4	10	=
RVAL	1130:5	1130:15	9	( tmsize_t ) TIFFGetStrileOffset ( tif , tile )
LEAF_NODE	1130:5	1130:5	10	(
TYPE_NAME	1130:6	1130:6	10	tmsize_t
LEAF_NODE	1130:6	1130:6	11	tmsize_t
LEAF_NODE	1130:14	1130:14	10	)
FUNCTION_CALL	1130:15	1130:44	10	TIFFGetStrileOffset ( tif , tile )
CALLEE	1130:15	1130:15	11	TIFFGetStrileOffset
LEAF_NODE	1130:15	1130:15	12	TIFFGetStrileOffset
LEAF_NODE	1130:34	1130:34	11	(
ARGUMENT	1130:35	1130:35	11	tif
FIELD	1130:35	1130:35	12	tif
LEAF_NODE	1130:35	1130:35	13	tif
LEAF_NODE	1130:38	1130:38	11	,
ARGUMENT	1130:40	1130:40	11	tile
FIELD	1130:40	1130:40	12	tile
LEAF_NODE	1130:40	1130:40	13	tile
LEAF_NODE	1130:44	1130:44	11	)
LEAF_NODE	1130:45	1130:45	7	;
EXPR_STATEMENT	1131:2	1131:12	6	mb = ma + size ;
EXPR	1131:2	1131:2	7	mb = ma + size
ASSIGN	1131:2	1131:5	8	mb = ma + size
LVAL	1131:2	1131:2	9	mb
FIELD	1131:2	1131:2	10	mb
LEAF_NODE	1131:2	1131:2	11	mb
ASSIGN_OP	1131:4	1131:4	9	=
LEAF_NODE	1131:4	1131:4	10	=
RVAL	1131:5	1131:8	9	ma + size
FIELD	1131:5	1131:5	10	ma
LEAF_NODE	1131:5	1131:5	11	ma
LEAF_NODE	1131:7	1131:7	10	+
FIELD	1131:8	1131:8	10	size
LEAF_NODE	1131:8	1131:8	11	size
LEAF_NODE	1131:12	1131:12	7	;
SELECTION	1132:2	1133:3	6	
KEYWORD	1132:2	1132:2	7	if
LEAF_NODE	1132:2	1132:2	8	if
LEAF_NODE	1132:5	1132:5	7	(
CONDITION	1132:6	1132:6	7	( TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) TIFF_TMSIZE_T_MAX ) || ( ma > tif -> tif_size )
EXPR	1132:6	1132:6	8	( TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) TIFF_TMSIZE_T_MAX ) || ( ma > tif -> tif_size )
OR	1132:6	1132:68	9	( TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) TIFF_TMSIZE_T_MAX ) || ( ma > tif -> tif_size )
EXPR	1132:6	1132:65	10	( TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) TIFF_TMSIZE_T_MAX )
LEAF_NODE	1132:6	1132:6	11	(
FUNCTION_CALL	1132:7	1132:36	11	TIFFGetStrileOffset ( tif , tile )
CALLEE	1132:7	1132:7	12	TIFFGetStrileOffset
LEAF_NODE	1132:7	1132:7	13	TIFFGetStrileOffset
LEAF_NODE	1132:26	1132:26	12	(
ARGUMENT	1132:27	1132:27	12	tif
FIELD	1132:27	1132:27	13	tif
LEAF_NODE	1132:27	1132:27	14	tif
LEAF_NODE	1132:30	1132:30	12	,
ARGUMENT	1132:32	1132:32	12	tile
FIELD	1132:32	1132:32	13	tile
LEAF_NODE	1132:32	1132:32	14	tile
LEAF_NODE	1132:36	1132:36	12	)
REL_OPERATOR	1132:38	1132:38	11	>
LEAF_NODE	1132:38	1132:38	12	>
LEAF_NODE	1132:40	1132:40	11	(
TYPE_NAME	1132:41	1132:41	11	uint64
LEAF_NODE	1132:41	1132:41	12	uint64
LEAF_NODE	1132:47	1132:47	11	)
FIELD	1132:48	1132:48	11	TIFF_TMSIZE_T_MAX
LEAF_NODE	1132:48	1132:48	12	TIFF_TMSIZE_T_MAX
LEAF_NODE	1132:65	1132:65	11	)
LEAF_NODE	1132:66	1132:66	10	||
EXPR	1132:68	1132:85	10	( ma > tif -> tif_size )
LEAF_NODE	1132:68	1132:68	11	(
FIELD	1132:69	1132:69	11	ma
LEAF_NODE	1132:69	1132:69	12	ma
REL_OPERATOR	1132:71	1132:71	11	>
LEAF_NODE	1132:71	1132:71	12	>
FIELD	1132:72	1132:77	11	tif -> tif_size
LEAF_NODE	1132:72	1132:72	12	tif
LEAF_NODE	1132:75	1132:75	12	->
LEAF_NODE	1132:77	1132:77	12	tif_size
LEAF_NODE	1132:85	1132:85	11	)
LEAF_NODE	1132:86	1132:86	7	)
STATEMENTS	1133:3	1133:3	7	
EXPR_STATEMENT	1133:3	1133:6	8	n = 0 ;
EXPR	1133:3	1133:3	9	n = 0
ASSIGN	1133:3	1133:5	10	n = 0
LVAL	1133:3	1133:3	11	n
FIELD	1133:3	1133:3	12	n
LEAF_NODE	1133:3	1133:3	13	n
ASSIGN_OP	1133:4	1133:4	11	=
LEAF_NODE	1133:4	1133:4	12	=
RVAL	1133:5	1133:5	11	0
FIELD	1133:5	1133:5	12	0
LEAF_NODE	1133:5	1133:5	13	0
LEAF_NODE	1133:6	1133:6	9	;
SELECTION	1134:2	1134:7	6	
KEYWORD	1134:2	1134:2	7	else
LEAF_NODE	1134:2	1134:2	8	else
STATEMENTS	1134:7	1134:7	7	
SELECTION	1134:7	1135:3	8	
KEYWORD	1134:7	1134:7	9	if
LEAF_NODE	1134:7	1134:7	10	if
LEAF_NODE	1134:10	1134:10	9	(
CONDITION	1134:11	1134:11	9	( mb < ma ) || ( mb < size ) || ( mb > tif -> tif_size )
EXPR	1134:11	1134:11	10	( mb < ma ) || ( mb < size ) || ( mb > tif -> tif_size )
OR	1134:11	1134:20	11	( mb < ma ) || ( mb < size ) || ( mb > tif -> tif_size )
EXPR	1134:11	1134:17	12	( mb < ma )
LEAF_NODE	1134:11	1134:11	13	(
FIELD	1134:12	1134:12	13	mb
LEAF_NODE	1134:12	1134:12	14	mb
REL_OPERATOR	1134:14	1134:14	13	<
LEAF_NODE	1134:14	1134:14	14	<
FIELD	1134:15	1134:15	13	ma
LEAF_NODE	1134:15	1134:15	14	ma
LEAF_NODE	1134:17	1134:17	13	)
LEAF_NODE	1134:18	1134:18	12	||
EXPR	1134:20	1134:20	12	( mb < size ) || ( mb > tif -> tif_size )
OR	1134:20	1134:31	13	( mb < size ) || ( mb > tif -> tif_size )
EXPR	1134:20	1134:28	14	( mb < size )
LEAF_NODE	1134:20	1134:20	15	(
FIELD	1134:21	1134:21	15	mb
LEAF_NODE	1134:21	1134:21	16	mb
REL_OPERATOR	1134:23	1134:23	15	<
LEAF_NODE	1134:23	1134:23	16	<
FIELD	1134:24	1134:24	15	size
LEAF_NODE	1134:24	1134:24	16	size
LEAF_NODE	1134:28	1134:28	15	)
LEAF_NODE	1134:29	1134:29	14	||
EXPR	1134:31	1134:48	14	( mb > tif -> tif_size )
LEAF_NODE	1134:31	1134:31	15	(
FIELD	1134:32	1134:32	15	mb
LEAF_NODE	1134:32	1134:32	16	mb
REL_OPERATOR	1134:34	1134:34	15	>
LEAF_NODE	1134:34	1134:34	16	>
FIELD	1134:35	1134:40	15	tif -> tif_size
LEAF_NODE	1134:35	1134:35	16	tif
LEAF_NODE	1134:38	1134:38	16	->
LEAF_NODE	1134:40	1134:40	16	tif_size
LEAF_NODE	1134:48	1134:48	15	)
LEAF_NODE	1134:49	1134:49	9	)
STATEMENTS	1135:3	1135:3	9	
EXPR_STATEMENT	1135:3	1135:21	10	n = tif -> tif_size - ma ;
EXPR	1135:3	1135:3	11	n = tif -> tif_size - ma
ASSIGN	1135:3	1135:5	12	n = tif -> tif_size - ma
LVAL	1135:3	1135:3	13	n
FIELD	1135:3	1135:3	14	n
LEAF_NODE	1135:3	1135:3	15	n
ASSIGN_OP	1135:4	1135:4	13	=
LEAF_NODE	1135:4	1135:4	14	=
RVAL	1135:5	1135:19	13	tif -> tif_size - ma
FIELD	1135:5	1135:10	14	tif -> tif_size
LEAF_NODE	1135:5	1135:5	15	tif
LEAF_NODE	1135:8	1135:8	15	->
LEAF_NODE	1135:10	1135:10	15	tif_size
LEAF_NODE	1135:18	1135:18	14	-
FIELD	1135:19	1135:19	14	ma
LEAF_NODE	1135:19	1135:19	15	ma
LEAF_NODE	1135:21	1135:21	11	;
SELECTION	1136:2	1137:3	6	
KEYWORD	1136:2	1136:2	7	else
LEAF_NODE	1136:2	1136:2	8	else
STATEMENTS	1137:3	1137:3	7	
EXPR_STATEMENT	1137:3	1137:9	8	n = size ;
EXPR	1137:3	1137:3	9	n = size
ASSIGN	1137:3	1137:5	10	n = size
LVAL	1137:3	1137:3	11	n
FIELD	1137:3	1137:3	12	n
LEAF_NODE	1137:3	1137:3	13	n
ASSIGN_OP	1137:4	1137:4	11	=
LEAF_NODE	1137:4	1137:4	12	=
RVAL	1137:5	1137:5	11	size
FIELD	1137:5	1137:5	12	size
LEAF_NODE	1137:5	1137:5	13	size
LEAF_NODE	1137:9	1137:9	9	;
SELECTION	1138:2	1138:15	6	
KEYWORD	1138:2	1138:2	7	if
LEAF_NODE	1138:2	1138:2	8	if
LEAF_NODE	1138:5	1138:5	7	(
CONDITION	1138:6	1138:6	7	n != size
EXPR	1138:6	1138:9	8	n != size
FIELD	1138:6	1138:6	9	n
LEAF_NODE	1138:6	1138:6	10	n
EQ_OPERATOR	1138:7	1138:7	9	!=
LEAF_NODE	1138:7	1138:7	10	!=
FIELD	1138:9	1138:9	9	size
LEAF_NODE	1138:9	1138:9	10	size
LEAF_NODE	1138:13	1138:13	7	)
STATEMENTS	1138:15	1157:2	7	
LEAF_NODE	1138:15	1138:15	8	{
STATEMENTS	1140:3	1156:3	8	
EXPR_STATEMENT	1140:3	1146:33	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at row %lu, col %lu, tile %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) tile , ( unsigned __int64 ) n , ( unsigned __int64 ) size ) ;
EXPR	1140:3	1140:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at row %lu, col %lu, tile %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) tile , ( unsigned __int64 ) n , ( unsigned __int64 ) size )
FUNCTION_CALL	1140:3	1146:32	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Read error at row %lu, col %lu, tile %lu; got %I64u bytes, expected %I64u" , ( unsigned long ) tif -> tif_row , ( unsigned long ) tif -> tif_col , ( unsigned long ) tile , ( unsigned __int64 ) n , ( unsigned __int64 ) size )
CALLEE	1140:3	1140:3	12	TIFFErrorExt
LEAF_NODE	1140:3	1140:3	13	TIFFErrorExt
LEAF_NODE	1140:15	1140:15	12	(
ARGUMENT	1140:16	1140:16	12	tif -> tif_clientdata
FIELD	1140:16	1140:21	13	tif -> tif_clientdata
LEAF_NODE	1140:16	1140:16	14	tif
LEAF_NODE	1140:19	1140:19	14	->
LEAF_NODE	1140:21	1140:21	14	tif_clientdata
LEAF_NODE	1140:35	1140:35	12	,
ARGUMENT	1140:37	1140:37	12	module
FIELD	1140:37	1140:37	13	module
LEAF_NODE	1140:37	1140:37	14	module
LEAF_NODE	1140:43	1140:43	12	,
ARGUMENT	1141:0	1141:0	12	"Read error at row %lu, col %lu, tile %lu; got %I64u bytes, expected %I64u"
FIELD	1141:0	1141:0	13	"Read error at row %lu, col %lu, tile %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	1141:0	1141:0	14	"Read error at row %lu, col %lu, tile %lu; got %I64u bytes, expected %I64u"
LEAF_NODE	1141:75	1141:75	12	,
ARGUMENT	1142:9	1142:25	12	( unsigned long ) tif -> tif_row
LEAF_NODE	1142:9	1142:9	13	(
TYPE_NAME	1142:10	1142:19	13	unsigned long
LEAF_NODE	1142:10	1142:10	14	unsigned
LEAF_NODE	1142:19	1142:19	14	long
LEAF_NODE	1142:23	1142:23	13	)
FIELD	1142:25	1142:30	13	tif -> tif_row
LEAF_NODE	1142:25	1142:25	14	tif
LEAF_NODE	1142:28	1142:28	14	->
LEAF_NODE	1142:30	1142:30	14	tif_row
LEAF_NODE	1142:37	1142:37	12	,
ARGUMENT	1143:9	1143:25	12	( unsigned long ) tif -> tif_col
LEAF_NODE	1143:9	1143:9	13	(
TYPE_NAME	1143:10	1143:19	13	unsigned long
LEAF_NODE	1143:10	1143:10	14	unsigned
LEAF_NODE	1143:19	1143:19	14	long
LEAF_NODE	1143:23	1143:23	13	)
FIELD	1143:25	1143:30	13	tif -> tif_col
LEAF_NODE	1143:25	1143:25	14	tif
LEAF_NODE	1143:28	1143:28	14	->
LEAF_NODE	1143:30	1143:30	14	tif_col
LEAF_NODE	1143:37	1143:37	12	,
ARGUMENT	1144:9	1144:25	12	( unsigned long ) tile
LEAF_NODE	1144:9	1144:9	13	(
TYPE_NAME	1144:10	1144:19	13	unsigned long
LEAF_NODE	1144:10	1144:10	14	unsigned
LEAF_NODE	1144:19	1144:19	14	long
LEAF_NODE	1144:23	1144:23	13	)
FIELD	1144:25	1144:25	13	tile
LEAF_NODE	1144:25	1144:25	14	tile
LEAF_NODE	1144:29	1144:29	12	,
ARGUMENT	1145:9	1145:28	12	( unsigned __int64 ) n
LEAF_NODE	1145:9	1145:9	13	(
TYPE_NAME	1145:10	1145:19	13	unsigned __int64
LEAF_NODE	1145:10	1145:10	14	unsigned
LEAF_NODE	1145:19	1145:19	14	__int64
LEAF_NODE	1145:26	1145:26	13	)
FIELD	1145:28	1145:28	13	n
LEAF_NODE	1145:28	1145:28	14	n
LEAF_NODE	1145:29	1145:29	12	,
ARGUMENT	1146:9	1146:28	12	( unsigned __int64 ) size
LEAF_NODE	1146:9	1146:9	13	(
TYPE_NAME	1146:10	1146:19	13	unsigned __int64
LEAF_NODE	1146:10	1146:10	14	unsigned
LEAF_NODE	1146:19	1146:19	14	__int64
LEAF_NODE	1146:26	1146:26	13	)
FIELD	1146:28	1146:28	13	size
LEAF_NODE	1146:28	1146:28	14	size
LEAF_NODE	1146:32	1146:32	12	)
LEAF_NODE	1146:33	1146:33	10	;
LEAF_NODE	1148:3	1148:3	9	TIFFErrorExt
LEAF_NODE	1148:15	1148:15	9	(
LEAF_NODE	1148:16	1148:16	9	tif
LEAF_NODE	1148:19	1148:19	9	->
LEAF_NODE	1148:21	1148:21	9	tif_clientdata
LEAF_NODE	1148:35	1148:35	9	,
LEAF_NODE	1148:37	1148:37	9	module
LEAF_NODE	1148:43	1148:43	9	,
LEAF_NODE	1149:0	1149:0	9	"Read error at row %lu, col %lu, tile %lu; got %llu bytes, expected %llu"
LEAF_NODE	1149:73	1149:73	9	,
LEAF_NODE	1150:9	1150:9	9	(
LEAF_NODE	1150:10	1150:10	9	unsigned
LEAF_NODE	1150:19	1150:19	9	long
LEAF_NODE	1150:23	1150:23	9	)
LEAF_NODE	1150:25	1150:25	9	tif
LEAF_NODE	1150:28	1150:28	9	->
LEAF_NODE	1150:30	1150:30	9	tif_row
LEAF_NODE	1150:37	1150:37	9	,
LEAF_NODE	1151:9	1151:9	9	(
LEAF_NODE	1151:10	1151:10	9	unsigned
LEAF_NODE	1151:19	1151:19	9	long
LEAF_NODE	1151:23	1151:23	9	)
LEAF_NODE	1151:25	1151:25	9	tif
LEAF_NODE	1151:28	1151:28	9	->
LEAF_NODE	1151:30	1151:30	9	tif_col
LEAF_NODE	1151:37	1151:37	9	,
LEAF_NODE	1152:9	1152:9	9	(
LEAF_NODE	1152:10	1152:10	9	unsigned
LEAF_NODE	1152:19	1152:19	9	long
LEAF_NODE	1152:23	1152:23	9	)
LEAF_NODE	1152:25	1152:25	9	tile
LEAF_NODE	1152:29	1152:29	9	,
LEAF_NODE	1153:9	1153:9	9	(
LEAF_NODE	1153:10	1153:10	9	unsigned
LEAF_NODE	1153:19	1153:19	9	long
LEAF_NODE	1153:24	1153:24	9	long
LEAF_NODE	1153:28	1153:28	9	)
LEAF_NODE	1153:30	1153:30	9	n
LEAF_NODE	1153:31	1153:31	9	,
LEAF_NODE	1154:9	1154:9	9	(
LEAF_NODE	1154:10	1154:10	9	unsigned
LEAF_NODE	1154:19	1154:19	9	long
LEAF_NODE	1154:24	1154:24	9	long
LEAF_NODE	1154:28	1154:28	9	)
LEAF_NODE	1154:30	1154:30	9	size
LEAF_NODE	1154:34	1154:34	9	)
LEAF_NODE	1154:35	1154:35	9	;
JUMP_STATEMENT	1156:3	1156:26	9	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1156:3	1156:3	10	return
LEAF_NODE	1156:3	1156:3	11	return
DESTINATION	1156:10	1156:10	10	( ( tmsize_t ) ( - 1 ) )
EXPR	1156:10	1156:25	11	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1156:10	1156:10	12	(
LEAF_NODE	1156:11	1156:11	12	(
TYPE_NAME	1156:12	1156:12	12	tmsize_t
LEAF_NODE	1156:12	1156:12	13	tmsize_t
LEAF_NODE	1156:20	1156:20	12	)
LEAF_NODE	1156:21	1156:21	12	(
UNARY_EXPR	1156:22	1156:23	12	- 1
UNARY_OPERATOR	1156:22	1156:22	13	-
LEAF_NODE	1156:22	1156:22	14	-
FIELD	1156:23	1156:23	13	1
LEAF_NODE	1156:23	1156:23	14	1
LEAF_NODE	1156:24	1156:24	12	)
LEAF_NODE	1156:25	1156:25	12	)
LEAF_NODE	1156:26	1156:26	10	;
LEAF_NODE	1157:2	1157:2	8	}
EXPR_STATEMENT	1158:2	1158:44	6	_TIFFmemcpy ( buf , tif -> tif_base + ma , size ) ;
EXPR	1158:2	1158:2	7	_TIFFmemcpy ( buf , tif -> tif_base + ma , size )
FUNCTION_CALL	1158:2	1158:43	8	_TIFFmemcpy ( buf , tif -> tif_base + ma , size )
CALLEE	1158:2	1158:2	9	_TIFFmemcpy
LEAF_NODE	1158:2	1158:2	10	_TIFFmemcpy
LEAF_NODE	1158:13	1158:13	9	(
ARGUMENT	1158:14	1158:14	9	buf
FIELD	1158:14	1158:14	10	buf
LEAF_NODE	1158:14	1158:14	11	buf
LEAF_NODE	1158:17	1158:17	9	,
ARGUMENT	1158:19	1158:35	9	tif -> tif_base + ma
FIELD	1158:19	1158:24	10	tif -> tif_base
LEAF_NODE	1158:19	1158:19	11	tif
LEAF_NODE	1158:22	1158:22	11	->
LEAF_NODE	1158:24	1158:24	11	tif_base
LEAF_NODE	1158:33	1158:33	10	+
FIELD	1158:35	1158:35	10	ma
LEAF_NODE	1158:35	1158:35	11	ma
LEAF_NODE	1158:37	1158:37	9	,
ARGUMENT	1158:39	1158:39	9	size
FIELD	1158:39	1158:39	10	size
LEAF_NODE	1158:39	1158:39	11	size
LEAF_NODE	1158:43	1158:43	9	)
LEAF_NODE	1158:44	1158:44	7	;
LEAF_NODE	1159:1	1159:1	5	}
LEAF_NODE	1160:1	1160:1	3	return
LEAF_NODE	1160:8	1160:8	3	(
LEAF_NODE	1160:9	1160:9	3	size
LEAF_NODE	1160:13	1160:13	3	)
LEAF_NODE	1160:14	1160:14	3	;
LEAF_NODE	1161:0	1161:0	2	}
FUNCTION_DEF	1166:0	1197:0	1	
RETURN_TYPE	1166:0	1166:0	2	tmsize_t
TYPE_NAME	1166:0	1166:0	3	tmsize_t
LEAF_NODE	1166:0	1166:0	4	tmsize_t
FUNCTION_NAME	1167:0	1167:0	2	TIFFReadRawTile
LEAF_NODE	1167:0	1167:0	3	TIFFReadRawTile
PARAMETER_LIST	1167:15	1167:64	2	( TIFF * tif , uint32 tile , void * buf , tmsize_t size )
LEAF_NODE	1167:15	1167:15	3	(
PARAMETER_DECL	1167:16	1167:22	3	TIFF * tif
TYPE	1167:16	1167:20	4	TIFF *
TYPE_NAME	1167:16	1167:16	5	TIFF
LEAF_NODE	1167:16	1167:16	6	TIFF
POINTER	1167:20	1167:20	5	*
LEAF_NODE	1167:20	1167:20	6	*
NAME	1167:22	1167:22	4	tif
LEAF_NODE	1167:22	1167:22	5	tif
LEAF_NODE	1167:25	1167:25	3	,
PARAMETER_DECL	1167:27	1167:34	3	uint32 tile
TYPE	1167:27	1167:27	4	uint32
TYPE_NAME	1167:27	1167:27	5	uint32
LEAF_NODE	1167:27	1167:27	6	uint32
NAME	1167:34	1167:34	4	tile
LEAF_NODE	1167:34	1167:34	5	tile
LEAF_NODE	1167:38	1167:38	3	,
PARAMETER_DECL	1167:40	1167:46	3	void * buf
TYPE	1167:40	1167:44	4	void *
TYPE_NAME	1167:40	1167:40	5	void
LEAF_NODE	1167:40	1167:40	6	void
POINTER	1167:44	1167:44	5	*
LEAF_NODE	1167:44	1167:44	6	*
NAME	1167:46	1167:46	4	buf
LEAF_NODE	1167:46	1167:46	5	buf
LEAF_NODE	1167:49	1167:49	3	,
PARAMETER_DECL	1167:51	1167:60	3	tmsize_t size
TYPE	1167:51	1167:51	4	tmsize_t
TYPE_NAME	1167:51	1167:51	5	tmsize_t
LEAF_NODE	1167:51	1167:51	6	tmsize_t
NAME	1167:60	1167:60	4	size
LEAF_NODE	1167:60	1167:60	5	size
LEAF_NODE	1167:64	1167:64	3	)
LEAF_NODE	1168:0	1168:0	2	{
STATEMENTS	1169:1	1196:1	2	
LEAF_NODE	1169:1	1169:1	3	static
SIMPLE_DECL	1169:8	1169:47	3	const char [ ] module ; module = "TIFFReadRawTile" ;
VAR_DECL	1169:8	1169:19	4	const char [ ] module ; module = "TIFFReadRawTile"
TYPE	1169:8	1169:25	5	const char [ ]
TYPE_NAME	1169:8	1169:14	6	const char
LEAF_NODE	1169:8	1169:8	7	const
LEAF_NODE	1169:14	1169:14	7	char
TYPE_SUFFIX	1169:25	1169:26	6	[ ]
LEAF_NODE	1169:25	1169:25	7	[
LEAF_NODE	1169:26	1169:26	7	]
NAME	1169:19	1169:19	5	module
LEAF_NODE	1169:19	1169:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1169:19	1169:19	5	module = "TIFFReadRawTile"
ASSIGN	1169:19	1169:30	6	module = "TIFFReadRawTile"
LVAL	1169:19	1169:19	7	module
NAME	1169:19	1169:19	8	module
LEAF_NODE	1169:19	1169:19	9	module
ASSIGN_OP	1169:28	1169:28	7	=
LEAF_NODE	1169:28	1169:28	8	=
RVAL	1169:30	1169:30	7	"TIFFReadRawTile"
FIELD	1169:30	1169:30	8	"TIFFReadRawTile"
LEAF_NODE	1169:30	1169:30	9	"TIFFReadRawTile"
LEAF_NODE	1169:47	1169:47	4	;
SIMPLE_DECL	1170:1	1170:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1170:1	1170:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1170:1	1170:15	5	TIFFDirectory *
TYPE_NAME	1170:1	1170:1	6	TIFFDirectory
LEAF_NODE	1170:1	1170:1	7	TIFFDirectory
POINTER	1170:15	1170:15	6	*
LEAF_NODE	1170:15	1170:15	7	*
NAME	1170:16	1170:16	5	td
LEAF_NODE	1170:16	1170:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1170:16	1170:16	5	td = & tif -> tif_dir
ASSIGN	1170:16	1170:21	6	td = & tif -> tif_dir
LVAL	1170:16	1170:16	7	td
NAME	1170:16	1170:16	8	td
LEAF_NODE	1170:16	1170:16	9	td
ASSIGN_OP	1170:19	1170:19	7	=
LEAF_NODE	1170:19	1170:19	8	=
RVAL	1170:21	1170:21	7	& tif -> tif_dir
UNARY_EXPR	1170:21	1170:22	8	& tif -> tif_dir
UNARY_OPERATOR	1170:21	1170:21	9	&
LEAF_NODE	1170:21	1170:21	10	&
FIELD	1170:22	1170:27	9	tif -> tif_dir
LEAF_NODE	1170:22	1170:22	10	tif
LEAF_NODE	1170:25	1170:25	10	->
LEAF_NODE	1170:27	1170:27	10	tif_dir
LEAF_NODE	1170:34	1170:34	4	;
SIMPLE_DECL	1171:1	1171:19	3	uint64 bytecount64 ;
VAR_DECL	1171:1	1171:8	4	uint64 bytecount64
TYPE	1171:1	1171:1	5	uint64
TYPE_NAME	1171:1	1171:1	6	uint64
LEAF_NODE	1171:1	1171:1	7	uint64
NAME	1171:8	1171:8	5	bytecount64
LEAF_NODE	1171:8	1171:8	6	bytecount64
LEAF_NODE	1171:19	1171:19	4	;
SIMPLE_DECL	1172:1	1172:20	3	tmsize_t bytecountm ;
VAR_DECL	1172:1	1172:10	4	tmsize_t bytecountm
TYPE	1172:1	1172:1	5	tmsize_t
TYPE_NAME	1172:1	1172:1	6	tmsize_t
LEAF_NODE	1172:1	1172:1	7	tmsize_t
NAME	1172:10	1172:10	5	bytecountm
LEAF_NODE	1172:10	1172:10	6	bytecountm
LEAF_NODE	1172:20	1172:20	4	;
SELECTION	1174:1	1175:2	3	
KEYWORD	1174:1	1174:1	4	if
LEAF_NODE	1174:1	1174:1	5	if
LEAF_NODE	1174:4	1174:4	4	(
CONDITION	1174:5	1174:5	4	! TIFFCheckRead ( tif , 1 )
EXPR	1174:5	1174:5	5	! TIFFCheckRead ( tif , 1 )
UNARY_EXPR	1174:5	1174:6	6	! TIFFCheckRead ( tif , 1 )
UNARY_OPERATOR	1174:5	1174:5	7	!
LEAF_NODE	1174:5	1174:5	8	!
FUNCTION_CALL	1174:6	1174:26	7	TIFFCheckRead ( tif , 1 )
CALLEE	1174:6	1174:6	8	TIFFCheckRead
LEAF_NODE	1174:6	1174:6	9	TIFFCheckRead
LEAF_NODE	1174:19	1174:19	8	(
ARGUMENT	1174:20	1174:20	8	tif
FIELD	1174:20	1174:20	9	tif
LEAF_NODE	1174:20	1174:20	10	tif
LEAF_NODE	1174:23	1174:23	8	,
ARGUMENT	1174:25	1174:25	8	1
FIELD	1174:25	1174:25	9	1
LEAF_NODE	1174:25	1174:25	10	1
LEAF_NODE	1174:26	1174:26	8	)
LEAF_NODE	1174:27	1174:27	4	)
STATEMENTS	1175:2	1175:2	4	
JUMP_STATEMENT	1175:2	1175:25	5	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1175:2	1175:2	6	return
LEAF_NODE	1175:2	1175:2	7	return
DESTINATION	1175:9	1175:9	6	( ( tmsize_t ) ( - 1 ) )
EXPR	1175:9	1175:24	7	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1175:9	1175:9	8	(
LEAF_NODE	1175:10	1175:10	8	(
TYPE_NAME	1175:11	1175:11	8	tmsize_t
LEAF_NODE	1175:11	1175:11	9	tmsize_t
LEAF_NODE	1175:19	1175:19	8	)
LEAF_NODE	1175:20	1175:20	8	(
UNARY_EXPR	1175:21	1175:22	8	- 1
UNARY_OPERATOR	1175:21	1175:21	9	-
LEAF_NODE	1175:21	1175:21	10	-
FIELD	1175:22	1175:22	9	1
LEAF_NODE	1175:22	1175:22	10	1
LEAF_NODE	1175:23	1175:23	8	)
LEAF_NODE	1175:24	1175:24	8	)
LEAF_NODE	1175:25	1175:25	6	;
SELECTION	1176:1	1176:29	3	
KEYWORD	1176:1	1176:1	4	if
LEAF_NODE	1176:1	1176:1	5	if
LEAF_NODE	1176:4	1176:4	4	(
CONDITION	1176:5	1176:5	4	tile >= td -> td_nstrips
EXPR	1176:5	1176:13	5	tile >= td -> td_nstrips
FIELD	1176:5	1176:5	6	tile
LEAF_NODE	1176:5	1176:5	7	tile
REL_OPERATOR	1176:10	1176:10	6	>=
LEAF_NODE	1176:10	1176:10	7	>=
FIELD	1176:13	1176:17	6	td -> td_nstrips
LEAF_NODE	1176:13	1176:13	7	td
LEAF_NODE	1176:15	1176:15	7	->
LEAF_NODE	1176:17	1176:17	7	td_nstrips
LEAF_NODE	1176:27	1176:27	4	)
STATEMENTS	1176:29	1181:1	4	
LEAF_NODE	1176:29	1176:29	5	{
STATEMENTS	1177:2	1180:2	5	
EXPR_STATEMENT	1177:2	1179:59	6	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips ) ;
EXPR	1177:2	1177:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
FUNCTION_CALL	1177:2	1179:58	8	TIFFErrorExt ( tif -> tif_clientdata , module , "%lu: Tile out of range, max %lu" , ( unsigned long ) tile , ( unsigned long ) td -> td_nstrips )
CALLEE	1177:2	1177:2	9	TIFFErrorExt
LEAF_NODE	1177:2	1177:2	10	TIFFErrorExt
LEAF_NODE	1177:14	1177:14	9	(
ARGUMENT	1177:15	1177:15	9	tif -> tif_clientdata
FIELD	1177:15	1177:20	10	tif -> tif_clientdata
LEAF_NODE	1177:15	1177:15	11	tif
LEAF_NODE	1177:18	1177:18	11	->
LEAF_NODE	1177:20	1177:20	11	tif_clientdata
LEAF_NODE	1177:34	1177:34	9	,
ARGUMENT	1177:36	1177:36	9	module
FIELD	1177:36	1177:36	10	module
LEAF_NODE	1177:36	1177:36	11	module
LEAF_NODE	1177:42	1177:42	9	,
ARGUMENT	1178:6	1178:6	9	"%lu: Tile out of range, max %lu"
FIELD	1178:6	1178:6	10	"%lu: Tile out of range, max %lu"
LEAF_NODE	1178:6	1178:6	11	"%lu: Tile out of range, max %lu"
LEAF_NODE	1178:39	1178:39	9	,
ARGUMENT	1179:6	1179:22	9	( unsigned long ) tile
LEAF_NODE	1179:6	1179:6	10	(
TYPE_NAME	1179:7	1179:16	10	unsigned long
LEAF_NODE	1179:7	1179:7	11	unsigned
LEAF_NODE	1179:16	1179:16	11	long
LEAF_NODE	1179:20	1179:20	10	)
FIELD	1179:22	1179:22	10	tile
LEAF_NODE	1179:22	1179:22	11	tile
LEAF_NODE	1179:26	1179:26	9	,
ARGUMENT	1179:28	1179:44	9	( unsigned long ) td -> td_nstrips
LEAF_NODE	1179:28	1179:28	10	(
TYPE_NAME	1179:29	1179:38	10	unsigned long
LEAF_NODE	1179:29	1179:29	11	unsigned
LEAF_NODE	1179:38	1179:38	11	long
LEAF_NODE	1179:42	1179:42	10	)
FIELD	1179:44	1179:48	10	td -> td_nstrips
LEAF_NODE	1179:44	1179:44	11	td
LEAF_NODE	1179:46	1179:46	11	->
LEAF_NODE	1179:48	1179:48	11	td_nstrips
LEAF_NODE	1179:58	1179:58	9	)
LEAF_NODE	1179:59	1179:59	7	;
JUMP_STATEMENT	1180:2	1180:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1180:2	1180:2	7	return
LEAF_NODE	1180:2	1180:2	8	return
DESTINATION	1180:9	1180:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	1180:9	1180:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1180:9	1180:9	9	(
LEAF_NODE	1180:10	1180:10	9	(
TYPE_NAME	1180:11	1180:11	9	tmsize_t
LEAF_NODE	1180:11	1180:11	10	tmsize_t
LEAF_NODE	1180:19	1180:19	9	)
LEAF_NODE	1180:20	1180:20	9	(
UNARY_EXPR	1180:21	1180:22	9	- 1
UNARY_OPERATOR	1180:21	1180:21	10	-
LEAF_NODE	1180:21	1180:21	11	-
FIELD	1180:22	1180:22	10	1
LEAF_NODE	1180:22	1180:22	11	1
LEAF_NODE	1180:23	1180:23	9	)
LEAF_NODE	1180:24	1180:24	9	)
LEAF_NODE	1180:25	1180:25	7	;
LEAF_NODE	1181:1	1181:1	5	}
SELECTION	1182:1	1183:1	3	
KEYWORD	1182:1	1182:1	4	if
LEAF_NODE	1182:1	1182:1	5	if
LEAF_NODE	1182:4	1182:4	4	(
CONDITION	1182:5	1182:5	4	tif -> tif_flags & TIFF_NOREADRAW
EXPR	1182:5	1182:20	5	tif -> tif_flags & TIFF_NOREADRAW
FIELD	1182:5	1182:10	6	tif -> tif_flags
LEAF_NODE	1182:5	1182:5	7	tif
LEAF_NODE	1182:8	1182:8	7	->
LEAF_NODE	1182:10	1182:10	7	tif_flags
LEAF_NODE	1182:19	1182:19	6	&
FIELD	1182:20	1182:20	6	TIFF_NOREADRAW
LEAF_NODE	1182:20	1182:20	7	TIFF_NOREADRAW
LEAF_NODE	1182:34	1182:34	4	)
STATEMENTS	1183:1	1187:1	4	
LEAF_NODE	1183:1	1183:1	5	{
STATEMENTS	1184:2	1186:2	5	
EXPR_STATEMENT	1184:2	1185:72	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" ) ;
EXPR	1184:2	1184:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" )
FUNCTION_CALL	1184:2	1185:71	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" )
CALLEE	1184:2	1184:2	9	TIFFErrorExt
LEAF_NODE	1184:2	1184:2	10	TIFFErrorExt
LEAF_NODE	1184:14	1184:14	9	(
ARGUMENT	1184:15	1184:15	9	tif -> tif_clientdata
FIELD	1184:15	1184:20	10	tif -> tif_clientdata
LEAF_NODE	1184:15	1184:15	11	tif
LEAF_NODE	1184:18	1184:18	11	->
LEAF_NODE	1184:20	1184:20	11	tif_clientdata
LEAF_NODE	1184:34	1184:34	9	,
ARGUMENT	1184:36	1184:36	9	module
FIELD	1184:36	1184:36	10	module
LEAF_NODE	1184:36	1184:36	11	module
LEAF_NODE	1184:42	1184:42	9	,
ARGUMENT	1185:2	1185:2	9	"Compression scheme does not support access to raw uncompressed data"
FIELD	1185:2	1185:2	10	"Compression scheme does not support access to raw uncompressed data"
LEAF_NODE	1185:2	1185:2	11	"Compression scheme does not support access to raw uncompressed data"
LEAF_NODE	1185:71	1185:71	9	)
LEAF_NODE	1185:72	1185:72	7	;
JUMP_STATEMENT	1186:2	1186:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1186:2	1186:2	7	return
LEAF_NODE	1186:2	1186:2	8	return
DESTINATION	1186:9	1186:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	1186:9	1186:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1186:9	1186:9	9	(
LEAF_NODE	1186:10	1186:10	9	(
TYPE_NAME	1186:11	1186:11	9	tmsize_t
LEAF_NODE	1186:11	1186:11	10	tmsize_t
LEAF_NODE	1186:19	1186:19	9	)
LEAF_NODE	1186:20	1186:20	9	(
UNARY_EXPR	1186:21	1186:22	9	- 1
UNARY_OPERATOR	1186:21	1186:21	10	-
LEAF_NODE	1186:21	1186:21	11	-
FIELD	1186:22	1186:22	10	1
LEAF_NODE	1186:22	1186:22	11	1
LEAF_NODE	1186:23	1186:23	9	)
LEAF_NODE	1186:24	1186:24	9	)
LEAF_NODE	1186:25	1186:25	7	;
LEAF_NODE	1187:1	1187:1	5	}
EXPR_STATEMENT	1188:1	1188:48	3	bytecount64 = TIFFGetStrileByteCount ( tif , tile ) ;
EXPR	1188:1	1188:1	4	bytecount64 = TIFFGetStrileByteCount ( tif , tile )
ASSIGN	1188:1	1188:15	5	bytecount64 = TIFFGetStrileByteCount ( tif , tile )
LVAL	1188:1	1188:1	6	bytecount64
FIELD	1188:1	1188:1	7	bytecount64
LEAF_NODE	1188:1	1188:1	8	bytecount64
ASSIGN_OP	1188:13	1188:13	6	=
LEAF_NODE	1188:13	1188:13	7	=
RVAL	1188:15	1188:15	6	TIFFGetStrileByteCount ( tif , tile )
FUNCTION_CALL	1188:15	1188:47	7	TIFFGetStrileByteCount ( tif , tile )
CALLEE	1188:15	1188:15	8	TIFFGetStrileByteCount
LEAF_NODE	1188:15	1188:15	9	TIFFGetStrileByteCount
LEAF_NODE	1188:37	1188:37	8	(
ARGUMENT	1188:38	1188:38	8	tif
FIELD	1188:38	1188:38	9	tif
LEAF_NODE	1188:38	1188:38	10	tif
LEAF_NODE	1188:41	1188:41	8	,
ARGUMENT	1188:43	1188:43	8	tile
FIELD	1188:43	1188:43	9	tile
LEAF_NODE	1188:43	1188:43	10	tile
LEAF_NODE	1188:47	1188:47	8	)
LEAF_NODE	1188:48	1188:48	4	;
SELECTION	1189:1	1190:2	3	
KEYWORD	1189:1	1189:1	4	if
LEAF_NODE	1189:1	1189:1	5	if
LEAF_NODE	1189:4	1189:4	4	(
CONDITION	1189:5	1189:5	4	size != ( tmsize_t ) ( - 1 ) && ( uint64 ) size <= bytecount64
EXPR	1189:5	1189:5	5	size != ( tmsize_t ) ( - 1 ) && ( uint64 ) size <= bytecount64
AND	1189:5	1189:31	6	size != ( tmsize_t ) ( - 1 ) && ( uint64 ) size <= bytecount64
EXPR	1189:5	1189:26	7	size != ( tmsize_t ) ( - 1 )
FIELD	1189:5	1189:5	8	size
LEAF_NODE	1189:5	1189:5	9	size
EQ_OPERATOR	1189:10	1189:10	8	!=
LEAF_NODE	1189:10	1189:10	9	!=
LEAF_NODE	1189:13	1189:13	8	(
TYPE_NAME	1189:14	1189:14	8	tmsize_t
LEAF_NODE	1189:14	1189:14	9	tmsize_t
LEAF_NODE	1189:22	1189:22	8	)
LEAF_NODE	1189:23	1189:23	8	(
UNARY_EXPR	1189:24	1189:25	8	- 1
UNARY_OPERATOR	1189:24	1189:24	9	-
LEAF_NODE	1189:24	1189:24	10	-
FIELD	1189:25	1189:25	9	1
LEAF_NODE	1189:25	1189:25	10	1
LEAF_NODE	1189:26	1189:26	8	)
LEAF_NODE	1189:28	1189:28	7	&&
EXPR	1189:31	1189:47	7	( uint64 ) size <= bytecount64
LEAF_NODE	1189:31	1189:31	8	(
TYPE_NAME	1189:32	1189:32	8	uint64
LEAF_NODE	1189:32	1189:32	9	uint64
LEAF_NODE	1189:38	1189:38	8	)
FIELD	1189:39	1189:39	8	size
LEAF_NODE	1189:39	1189:39	9	size
REL_OPERATOR	1189:44	1189:44	8	<=
LEAF_NODE	1189:44	1189:44	9	<=
FIELD	1189:47	1189:47	8	bytecount64
LEAF_NODE	1189:47	1189:47	9	bytecount64
LEAF_NODE	1189:58	1189:58	4	)
STATEMENTS	1190:2	1190:2	4	
EXPR_STATEMENT	1190:2	1190:19	5	bytecountm = size ;
EXPR	1190:2	1190:2	6	bytecountm = size
ASSIGN	1190:2	1190:15	7	bytecountm = size
LVAL	1190:2	1190:2	8	bytecountm
FIELD	1190:2	1190:2	9	bytecountm
LEAF_NODE	1190:2	1190:2	10	bytecountm
ASSIGN_OP	1190:13	1190:13	8	=
LEAF_NODE	1190:13	1190:13	9	=
RVAL	1190:15	1190:15	8	size
FIELD	1190:15	1190:15	9	size
LEAF_NODE	1190:15	1190:15	10	size
LEAF_NODE	1190:19	1190:19	6	;
SELECTION	1191:1	1192:2	3	
KEYWORD	1191:1	1191:1	4	else
LEAF_NODE	1191:1	1191:1	5	else
STATEMENTS	1192:2	1192:2	4	
EXPR_STATEMENT	1192:2	1192:63	5	bytecountm = _TIFFCastUInt64ToSSize ( tif , bytecount64 , module ) ;
EXPR	1192:2	1192:2	6	bytecountm = _TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
ASSIGN	1192:2	1192:15	7	bytecountm = _TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
LVAL	1192:2	1192:2	8	bytecountm
FIELD	1192:2	1192:2	9	bytecountm
LEAF_NODE	1192:2	1192:2	10	bytecountm
ASSIGN_OP	1192:13	1192:13	8	=
LEAF_NODE	1192:13	1192:13	9	=
RVAL	1192:15	1192:15	8	_TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
FUNCTION_CALL	1192:15	1192:62	9	_TIFFCastUInt64ToSSize ( tif , bytecount64 , module )
CALLEE	1192:15	1192:15	10	_TIFFCastUInt64ToSSize
LEAF_NODE	1192:15	1192:15	11	_TIFFCastUInt64ToSSize
LEAF_NODE	1192:37	1192:37	10	(
ARGUMENT	1192:38	1192:38	10	tif
FIELD	1192:38	1192:38	11	tif
LEAF_NODE	1192:38	1192:38	12	tif
LEAF_NODE	1192:41	1192:41	10	,
ARGUMENT	1192:43	1192:43	10	bytecount64
FIELD	1192:43	1192:43	11	bytecount64
LEAF_NODE	1192:43	1192:43	12	bytecount64
LEAF_NODE	1192:54	1192:54	10	,
ARGUMENT	1192:56	1192:56	10	module
FIELD	1192:56	1192:56	11	module
LEAF_NODE	1192:56	1192:56	12	module
LEAF_NODE	1192:62	1192:62	10	)
LEAF_NODE	1192:63	1192:63	6	;
SELECTION	1193:1	1193:23	3	
KEYWORD	1193:1	1193:1	4	if
LEAF_NODE	1193:1	1193:1	5	if
LEAF_NODE	1193:3	1193:3	4	(
CONDITION	1193:5	1193:5	4	bytecountm == 0
EXPR	1193:5	1193:19	5	bytecountm == 0
FIELD	1193:5	1193:5	6	bytecountm
LEAF_NODE	1193:5	1193:5	7	bytecountm
EQ_OPERATOR	1193:16	1193:16	6	==
LEAF_NODE	1193:16	1193:16	7	==
FIELD	1193:19	1193:19	6	0
LEAF_NODE	1193:19	1193:19	7	0
LEAF_NODE	1193:21	1193:21	4	)
STATEMENTS	1193:23	1195:1	4	
LEAF_NODE	1193:23	1193:23	5	{
STATEMENTS	1194:2	1194:2	5	
JUMP_STATEMENT	1194:2	1194:25	6	return ( ( tmsize_t ) ( - 1 ) ) ;
KEYWORD	1194:2	1194:2	7	return
LEAF_NODE	1194:2	1194:2	8	return
DESTINATION	1194:9	1194:9	7	( ( tmsize_t ) ( - 1 ) )
EXPR	1194:9	1194:24	8	( ( tmsize_t ) ( - 1 ) )
LEAF_NODE	1194:9	1194:9	9	(
LEAF_NODE	1194:10	1194:10	9	(
TYPE_NAME	1194:11	1194:11	9	tmsize_t
LEAF_NODE	1194:11	1194:11	10	tmsize_t
LEAF_NODE	1194:19	1194:19	9	)
LEAF_NODE	1194:20	1194:20	9	(
UNARY_EXPR	1194:21	1194:22	9	- 1
UNARY_OPERATOR	1194:21	1194:21	10	-
LEAF_NODE	1194:21	1194:21	11	-
FIELD	1194:22	1194:22	10	1
LEAF_NODE	1194:22	1194:22	11	1
LEAF_NODE	1194:23	1194:23	9	)
LEAF_NODE	1194:24	1194:24	9	)
LEAF_NODE	1194:25	1194:25	7	;
LEAF_NODE	1195:1	1195:1	5	}
JUMP_STATEMENT	1196:1	1196:62	3	return ( TIFFReadRawTile1 ( tif , tile , buf , bytecountm , module ) ) ;
KEYWORD	1196:1	1196:1	4	return
LEAF_NODE	1196:1	1196:1	5	return
DESTINATION	1196:8	1196:8	4	( TIFFReadRawTile1 ( tif , tile , buf , bytecountm , module ) )
EXPR	1196:8	1196:61	5	( TIFFReadRawTile1 ( tif , tile , buf , bytecountm , module ) )
LEAF_NODE	1196:8	1196:8	6	(
FUNCTION_CALL	1196:9	1196:60	6	TIFFReadRawTile1 ( tif , tile , buf , bytecountm , module )
CALLEE	1196:9	1196:9	7	TIFFReadRawTile1
LEAF_NODE	1196:9	1196:9	8	TIFFReadRawTile1
LEAF_NODE	1196:25	1196:25	7	(
ARGUMENT	1196:26	1196:26	7	tif
FIELD	1196:26	1196:26	8	tif
LEAF_NODE	1196:26	1196:26	9	tif
LEAF_NODE	1196:29	1196:29	7	,
ARGUMENT	1196:31	1196:31	7	tile
FIELD	1196:31	1196:31	8	tile
LEAF_NODE	1196:31	1196:31	9	tile
LEAF_NODE	1196:35	1196:35	7	,
ARGUMENT	1196:37	1196:37	7	buf
FIELD	1196:37	1196:37	8	buf
LEAF_NODE	1196:37	1196:37	9	buf
LEAF_NODE	1196:40	1196:40	7	,
ARGUMENT	1196:42	1196:42	7	bytecountm
FIELD	1196:42	1196:42	8	bytecountm
LEAF_NODE	1196:42	1196:42	9	bytecountm
LEAF_NODE	1196:52	1196:52	7	,
ARGUMENT	1196:54	1196:54	7	module
FIELD	1196:54	1196:54	8	module
LEAF_NODE	1196:54	1196:54	9	module
LEAF_NODE	1196:60	1196:60	7	)
LEAF_NODE	1196:61	1196:61	6	)
LEAF_NODE	1196:62	1196:62	4	;
LEAF_NODE	1197:0	1197:0	2	}
FUNCTION_DEF	1203:0	1366:0	1	
RETURN_TYPE	1203:0	1203:0	2	int
TYPE_NAME	1203:0	1203:0	3	int
LEAF_NODE	1203:0	1203:0	4	int
FUNCTION_NAME	1204:0	1204:0	2	TIFFFillTile
LEAF_NODE	1204:0	1204:0	3	TIFFFillTile
PARAMETER_LIST	1204:12	1204:35	2	( TIFF * tif , uint32 tile )
LEAF_NODE	1204:12	1204:12	3	(
PARAMETER_DECL	1204:13	1204:19	3	TIFF * tif
TYPE	1204:13	1204:17	4	TIFF *
TYPE_NAME	1204:13	1204:13	5	TIFF
LEAF_NODE	1204:13	1204:13	6	TIFF
POINTER	1204:17	1204:17	5	*
LEAF_NODE	1204:17	1204:17	6	*
NAME	1204:19	1204:19	4	tif
LEAF_NODE	1204:19	1204:19	5	tif
LEAF_NODE	1204:22	1204:22	3	,
PARAMETER_DECL	1204:24	1204:31	3	uint32 tile
TYPE	1204:24	1204:24	4	uint32
TYPE_NAME	1204:24	1204:24	5	uint32
LEAF_NODE	1204:24	1204:24	6	uint32
NAME	1204:31	1204:31	4	tile
LEAF_NODE	1204:31	1204:31	5	tile
LEAF_NODE	1204:35	1204:35	3	)
LEAF_NODE	1205:0	1205:0	2	{
STATEMENTS	1206:1	1365:1	2	
LEAF_NODE	1206:1	1206:1	3	static
SIMPLE_DECL	1206:8	1206:44	3	const char [ ] module ; module = "TIFFFillTile" ;
VAR_DECL	1206:8	1206:19	4	const char [ ] module ; module = "TIFFFillTile"
TYPE	1206:8	1206:25	5	const char [ ]
TYPE_NAME	1206:8	1206:14	6	const char
LEAF_NODE	1206:8	1206:8	7	const
LEAF_NODE	1206:14	1206:14	7	char
TYPE_SUFFIX	1206:25	1206:26	6	[ ]
LEAF_NODE	1206:25	1206:25	7	[
LEAF_NODE	1206:26	1206:26	7	]
NAME	1206:19	1206:19	5	module
LEAF_NODE	1206:19	1206:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1206:19	1206:19	5	module = "TIFFFillTile"
ASSIGN	1206:19	1206:30	6	module = "TIFFFillTile"
LVAL	1206:19	1206:19	7	module
NAME	1206:19	1206:19	8	module
LEAF_NODE	1206:19	1206:19	9	module
ASSIGN_OP	1206:28	1206:28	7	=
LEAF_NODE	1206:28	1206:28	8	=
RVAL	1206:30	1206:30	7	"TIFFFillTile"
FIELD	1206:30	1206:30	8	"TIFFFillTile"
LEAF_NODE	1206:30	1206:30	9	"TIFFFillTile"
LEAF_NODE	1206:44	1206:44	4	;
SIMPLE_DECL	1207:1	1207:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1207:1	1207:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1207:1	1207:15	5	TIFFDirectory *
TYPE_NAME	1207:1	1207:1	6	TIFFDirectory
LEAF_NODE	1207:1	1207:1	7	TIFFDirectory
POINTER	1207:15	1207:15	6	*
LEAF_NODE	1207:15	1207:15	7	*
NAME	1207:16	1207:16	5	td
LEAF_NODE	1207:16	1207:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1207:16	1207:16	5	td = & tif -> tif_dir
ASSIGN	1207:16	1207:21	6	td = & tif -> tif_dir
LVAL	1207:16	1207:16	7	td
NAME	1207:16	1207:16	8	td
LEAF_NODE	1207:16	1207:16	9	td
ASSIGN_OP	1207:19	1207:19	7	=
LEAF_NODE	1207:19	1207:19	8	=
RVAL	1207:21	1207:21	7	& tif -> tif_dir
UNARY_EXPR	1207:21	1207:22	8	& tif -> tif_dir
UNARY_OPERATOR	1207:21	1207:21	9	&
LEAF_NODE	1207:21	1207:21	10	&
FIELD	1207:22	1207:27	9	tif -> tif_dir
LEAF_NODE	1207:22	1207:22	10	tif
LEAF_NODE	1207:25	1207:25	10	->
LEAF_NODE	1207:27	1207:27	10	tif_dir
LEAF_NODE	1207:34	1207:34	4	;
SELECTION	1209:1	1210:1	3	
KEYWORD	1209:1	1209:1	4	if
LEAF_NODE	1209:1	1209:1	5	if
LEAF_NODE	1209:4	1209:4	4	(
CONDITION	1209:5	1209:5	4	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
EXPR	1209:5	1209:38	5	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
LEAF_NODE	1209:5	1209:5	6	(
FIELD	1209:6	1209:11	6	tif -> tif_flags
LEAF_NODE	1209:6	1209:6	7	tif
LEAF_NODE	1209:9	1209:9	7	->
LEAF_NODE	1209:11	1209:11	7	tif_flags
LEAF_NODE	1209:20	1209:20	6	&
FIELD	1209:21	1209:21	6	TIFF_NOREADRAW
LEAF_NODE	1209:21	1209:21	7	TIFF_NOREADRAW
LEAF_NODE	1209:35	1209:35	6	)
EQ_OPERATOR	1209:36	1209:36	6	==
LEAF_NODE	1209:36	1209:36	7	==
FIELD	1209:38	1209:38	6	0
LEAF_NODE	1209:38	1209:38	7	0
LEAF_NODE	1209:39	1209:39	4	)
STATEMENTS	1210:1	1364:1	4	
LEAF_NODE	1210:1	1210:1	5	{
STATEMENTS	1211:2	1303:4	5	
SIMPLE_DECL	1211:2	1211:54	6	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , tile ) ;
VAR_DECL	1211:2	1211:9	7	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , tile )
TYPE	1211:2	1211:2	8	uint64
TYPE_NAME	1211:2	1211:2	9	uint64
LEAF_NODE	1211:2	1211:2	10	uint64
NAME	1211:9	1211:9	8	bytecount
LEAF_NODE	1211:9	1211:9	9	bytecount
LEAF_NODE	0:0	0:0	8	;
INIT	1211:9	1211:9	8	bytecount = TIFFGetStrileByteCount ( tif , tile )
ASSIGN	1211:9	1211:21	9	bytecount = TIFFGetStrileByteCount ( tif , tile )
LVAL	1211:9	1211:9	10	bytecount
NAME	1211:9	1211:9	11	bytecount
LEAF_NODE	1211:9	1211:9	12	bytecount
ASSIGN_OP	1211:19	1211:19	10	=
LEAF_NODE	1211:19	1211:19	11	=
RVAL	1211:21	1211:21	10	TIFFGetStrileByteCount ( tif , tile )
FUNCTION_CALL	1211:21	1211:53	11	TIFFGetStrileByteCount ( tif , tile )
CALLEE	1211:21	1211:21	12	TIFFGetStrileByteCount
LEAF_NODE	1211:21	1211:21	13	TIFFGetStrileByteCount
LEAF_NODE	1211:43	1211:43	12	(
ARGUMENT	1211:44	1211:44	12	tif
FIELD	1211:44	1211:44	13	tif
LEAF_NODE	1211:44	1211:44	14	tif
LEAF_NODE	1211:47	1211:47	12	,
ARGUMENT	1211:49	1211:49	12	tile
FIELD	1211:49	1211:49	13	tile
LEAF_NODE	1211:49	1211:49	14	tile
LEAF_NODE	1211:53	1211:53	12	)
LEAF_NODE	1211:54	1211:54	7	;
SELECTION	1212:2	1212:61	6	
KEYWORD	1212:2	1212:2	7	if
LEAF_NODE	1212:2	1212:2	8	if
LEAF_NODE	1212:4	1212:4	7	(
CONDITION	1212:6	1212:6	7	bytecount == 0 || bytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	1212:6	1212:6	8	bytecount == 0 || bytecount > ( uint64 ) TIFF_INT64_MAX
OR	1212:6	1212:24	9	bytecount == 0 || bytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	1212:6	1212:19	10	bytecount == 0
FIELD	1212:6	1212:6	11	bytecount
LEAF_NODE	1212:6	1212:6	12	bytecount
EQ_OPERATOR	1212:16	1212:16	11	==
LEAF_NODE	1212:16	1212:16	12	==
FIELD	1212:19	1212:19	11	0
LEAF_NODE	1212:19	1212:19	12	0
LEAF_NODE	1212:21	1212:21	10	||
EXPR	1212:24	1212:44	10	bytecount > ( uint64 ) TIFF_INT64_MAX
FIELD	1212:24	1212:24	11	bytecount
LEAF_NODE	1212:24	1212:24	12	bytecount
REL_OPERATOR	1212:34	1212:34	11	>
LEAF_NODE	1212:34	1212:34	12	>
LEAF_NODE	1212:36	1212:36	11	(
TYPE_NAME	1212:37	1212:37	11	uint64
LEAF_NODE	1212:37	1212:37	12	uint64
LEAF_NODE	1212:43	1212:43	11	)
FIELD	1212:44	1212:44	11	TIFF_INT64_MAX
LEAF_NODE	1212:44	1212:44	12	TIFF_INT64_MAX
LEAF_NODE	1212:59	1212:59	7	)
STATEMENTS	1212:61	1225:2	7	
LEAF_NODE	1212:61	1212:61	8	{
STATEMENTS	1214:3	1224:3	8	
EXPR_STATEMENT	1214:3	1217:30	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%I64u: Invalid tile byte count, tile %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) tile ) ;
EXPR	1214:3	1214:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%I64u: Invalid tile byte count, tile %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) tile )
FUNCTION_CALL	1214:3	1217:29	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%I64u: Invalid tile byte count, tile %lu" , ( unsigned __int64 ) bytecount , ( unsigned long ) tile )
CALLEE	1214:3	1214:3	12	TIFFErrorExt
LEAF_NODE	1214:3	1214:3	13	TIFFErrorExt
LEAF_NODE	1214:15	1214:15	12	(
ARGUMENT	1214:16	1214:16	12	tif -> tif_clientdata
FIELD	1214:16	1214:21	13	tif -> tif_clientdata
LEAF_NODE	1214:16	1214:16	14	tif
LEAF_NODE	1214:19	1214:19	14	->
LEAF_NODE	1214:21	1214:21	14	tif_clientdata
LEAF_NODE	1214:35	1214:35	12	,
ARGUMENT	1214:37	1214:37	12	module
FIELD	1214:37	1214:37	13	module
LEAF_NODE	1214:37	1214:37	14	module
LEAF_NODE	1214:43	1214:43	12	,
ARGUMENT	1215:4	1215:4	12	"%I64u: Invalid tile byte count, tile %lu"
FIELD	1215:4	1215:4	13	"%I64u: Invalid tile byte count, tile %lu"
LEAF_NODE	1215:4	1215:4	14	"%I64u: Invalid tile byte count, tile %lu"
LEAF_NODE	1215:46	1215:46	12	,
ARGUMENT	1216:9	1216:28	12	( unsigned __int64 ) bytecount
LEAF_NODE	1216:9	1216:9	13	(
TYPE_NAME	1216:10	1216:19	13	unsigned __int64
LEAF_NODE	1216:10	1216:10	14	unsigned
LEAF_NODE	1216:19	1216:19	14	__int64
LEAF_NODE	1216:26	1216:26	13	)
FIELD	1216:28	1216:28	13	bytecount
LEAF_NODE	1216:28	1216:28	14	bytecount
LEAF_NODE	1216:37	1216:37	12	,
ARGUMENT	1217:9	1217:25	12	( unsigned long ) tile
LEAF_NODE	1217:9	1217:9	13	(
TYPE_NAME	1217:10	1217:19	13	unsigned long
LEAF_NODE	1217:10	1217:10	14	unsigned
LEAF_NODE	1217:19	1217:19	14	long
LEAF_NODE	1217:23	1217:23	13	)
FIELD	1217:25	1217:25	13	tile
LEAF_NODE	1217:25	1217:25	14	tile
LEAF_NODE	1217:29	1217:29	12	)
LEAF_NODE	1217:30	1217:30	10	;
LEAF_NODE	1219:3	1219:3	9	TIFFErrorExt
LEAF_NODE	1219:15	1219:15	9	(
LEAF_NODE	1219:16	1219:16	9	tif
LEAF_NODE	1219:19	1219:19	9	->
LEAF_NODE	1219:21	1219:21	9	tif_clientdata
LEAF_NODE	1219:35	1219:35	9	,
LEAF_NODE	1219:37	1219:37	9	module
LEAF_NODE	1219:43	1219:43	9	,
LEAF_NODE	1220:4	1220:4	9	"%llu: Invalid tile byte count, tile %lu"
LEAF_NODE	1220:45	1220:45	9	,
LEAF_NODE	1221:9	1221:9	9	(
LEAF_NODE	1221:10	1221:10	9	unsigned
LEAF_NODE	1221:19	1221:19	9	long
LEAF_NODE	1221:24	1221:24	9	long
LEAF_NODE	1221:28	1221:28	9	)
LEAF_NODE	1221:30	1221:30	9	bytecount
LEAF_NODE	1221:39	1221:39	9	,
LEAF_NODE	1222:9	1222:9	9	(
LEAF_NODE	1222:10	1222:10	9	unsigned
LEAF_NODE	1222:19	1222:19	9	long
LEAF_NODE	1222:23	1222:23	9	)
LEAF_NODE	1222:25	1222:25	9	tile
LEAF_NODE	1222:29	1222:29	9	)
LEAF_NODE	1222:30	1222:30	9	;
JUMP_STATEMENT	1224:3	1224:13	9	return ( 0 ) ;
KEYWORD	1224:3	1224:3	10	return
LEAF_NODE	1224:3	1224:3	11	return
DESTINATION	1224:10	1224:10	10	( 0 )
EXPR	1224:10	1224:12	11	( 0 )
LEAF_NODE	1224:10	1224:10	12	(
FIELD	1224:11	1224:11	12	0
LEAF_NODE	1224:11	1224:11	13	0
LEAF_NODE	1224:12	1224:12	12	)
LEAF_NODE	1224:13	1224:13	10	;
LEAF_NODE	1225:2	1225:2	8	}
SELECTION	1230:16	1231:16	6	
KEYWORD	1230:16	1230:16	7	if
LEAF_NODE	1230:16	1230:16	8	if
LEAF_NODE	1230:18	1230:18	7	(
CONDITION	1230:20	1230:20	7	bytecount > 1024 * 1024
EXPR	1230:20	1230:39	8	bytecount > 1024 * 1024
FIELD	1230:20	1230:20	9	bytecount
LEAF_NODE	1230:20	1230:20	10	bytecount
REL_OPERATOR	1230:30	1230:30	9	>
LEAF_NODE	1230:30	1230:30	10	>
FIELD	1230:32	1230:32	9	1024
LEAF_NODE	1230:32	1230:32	10	1024
LEAF_NODE	1230:37	1230:37	9	*
FIELD	1230:39	1230:39	9	1024
LEAF_NODE	1230:39	1230:39	10	1024
LEAF_NODE	1230:44	1230:44	7	)
STATEMENTS	1231:16	1257:2	7	
LEAF_NODE	1231:16	1231:16	8	{
STATEMENTS	1234:3	1235:3	8	
SIMPLE_DECL	1234:3	1234:41	9	tmsize_t stripsize ; stripsize = TIFFTileSize ( tif ) ;
VAR_DECL	1234:3	1234:12	10	tmsize_t stripsize ; stripsize = TIFFTileSize ( tif )
TYPE	1234:3	1234:3	11	tmsize_t
TYPE_NAME	1234:3	1234:3	12	tmsize_t
LEAF_NODE	1234:3	1234:3	13	tmsize_t
NAME	1234:12	1234:12	11	stripsize
LEAF_NODE	1234:12	1234:12	12	stripsize
LEAF_NODE	0:0	0:0	11	;
INIT	1234:12	1234:12	11	stripsize = TIFFTileSize ( tif )
ASSIGN	1234:12	1234:24	12	stripsize = TIFFTileSize ( tif )
LVAL	1234:12	1234:12	13	stripsize
NAME	1234:12	1234:12	14	stripsize
LEAF_NODE	1234:12	1234:12	15	stripsize
ASSIGN_OP	1234:22	1234:22	13	=
LEAF_NODE	1234:22	1234:22	14	=
RVAL	1234:24	1234:24	13	TIFFTileSize ( tif )
FUNCTION_CALL	1234:24	1234:40	14	TIFFTileSize ( tif )
CALLEE	1234:24	1234:24	15	TIFFTileSize
LEAF_NODE	1234:24	1234:24	16	TIFFTileSize
LEAF_NODE	1234:36	1234:36	15	(
ARGUMENT	1234:37	1234:37	15	tif
FIELD	1234:37	1234:37	16	tif
LEAF_NODE	1234:37	1234:37	17	tif
LEAF_NODE	1234:40	1234:40	15	)
LEAF_NODE	1234:41	1234:41	10	;
SELECTION	1235:3	1237:3	9	
KEYWORD	1235:3	1235:3	10	if
LEAF_NODE	1235:3	1235:3	11	if
LEAF_NODE	1235:5	1235:5	10	(
CONDITION	1235:7	1235:7	10	stripsize != 0 && ( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
EXPR	1235:7	1235:7	11	stripsize != 0 && ( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
AND	1235:7	1236:7	12	stripsize != 0 && ( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
EXPR	1235:7	1235:20	13	stripsize != 0
FIELD	1235:7	1235:7	14	stripsize
LEAF_NODE	1235:7	1235:7	15	stripsize
EQ_OPERATOR	1235:17	1235:17	14	!=
LEAF_NODE	1235:17	1235:17	15	!=
FIELD	1235:20	1235:20	14	0
LEAF_NODE	1235:20	1235:20	15	0
LEAF_NODE	1235:22	1235:22	13	&&
EXPR	1236:7	1236:41	13	( bytecount - 4096 ) / 10 > ( uint64 ) stripsize
LEAF_NODE	1236:7	1236:7	14	(
FIELD	1236:8	1236:8	14	bytecount
LEAF_NODE	1236:8	1236:8	15	bytecount
LEAF_NODE	1236:18	1236:18	14	-
FIELD	1236:20	1236:20	14	4096
LEAF_NODE	1236:20	1236:20	15	4096
LEAF_NODE	1236:24	1236:24	14	)
LEAF_NODE	1236:26	1236:26	14	/
FIELD	1236:28	1236:28	14	10
LEAF_NODE	1236:28	1236:28	15	10
REL_OPERATOR	1236:31	1236:31	14	>
LEAF_NODE	1236:31	1236:31	15	>
LEAF_NODE	1236:33	1236:33	14	(
TYPE_NAME	1236:34	1236:34	14	uint64
LEAF_NODE	1236:34	1236:34	15	uint64
LEAF_NODE	1236:40	1236:40	14	)
FIELD	1236:41	1236:41	14	stripsize
LEAF_NODE	1236:41	1236:41	15	stripsize
LEAF_NODE	1236:52	1236:52	10	)
STATEMENTS	1237:3	1256:3	10	
LEAF_NODE	1237:3	1237:3	11	{
STATEMENTS	1238:4	1239:4	11	
SIMPLE_DECL	1238:4	1238:55	12	uint64 newbytecount ; newbytecount = ( uint64 ) stripsize * 10 + 4096 ;
VAR_DECL	1238:4	1238:11	13	uint64 newbytecount ; newbytecount = ( uint64 ) stripsize * 10 + 4096
TYPE	1238:4	1238:4	14	uint64
TYPE_NAME	1238:4	1238:4	15	uint64
LEAF_NODE	1238:4	1238:4	16	uint64
NAME	1238:11	1238:11	14	newbytecount
LEAF_NODE	1238:11	1238:11	15	newbytecount
LEAF_NODE	0:0	0:0	14	;
INIT	1238:11	1238:11	14	newbytecount = ( uint64 ) stripsize * 10 + 4096
ASSIGN	1238:11	1238:26	15	newbytecount = ( uint64 ) stripsize * 10 + 4096
LVAL	1238:11	1238:11	16	newbytecount
NAME	1238:11	1238:11	17	newbytecount
LEAF_NODE	1238:11	1238:11	18	newbytecount
ASSIGN_OP	1238:24	1238:24	16	=
LEAF_NODE	1238:24	1238:24	17	=
RVAL	1238:26	1238:51	16	( uint64 ) stripsize * 10 + 4096
LEAF_NODE	1238:26	1238:26	17	(
TYPE_NAME	1238:27	1238:27	17	uint64
LEAF_NODE	1238:27	1238:27	18	uint64
LEAF_NODE	1238:33	1238:33	17	)
FIELD	1238:34	1238:34	17	stripsize
LEAF_NODE	1238:34	1238:34	18	stripsize
LEAF_NODE	1238:44	1238:44	17	*
FIELD	1238:46	1238:46	17	10
LEAF_NODE	1238:46	1238:46	18	10
LEAF_NODE	1238:49	1238:49	17	+
FIELD	1238:51	1238:51	17	4096
LEAF_NODE	1238:51	1238:51	18	4096
LEAF_NODE	1238:55	1238:55	13	;
SELECTION	1239:4	1240:4	12	
KEYWORD	1239:4	1239:4	13	if
LEAF_NODE	1239:4	1239:4	14	if
LEAF_NODE	1239:6	1239:6	13	(
CONDITION	1239:8	1239:8	13	newbytecount == 0 || newbytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	1239:8	1239:8	14	newbytecount == 0 || newbytecount > ( uint64 ) TIFF_INT64_MAX
OR	1239:8	1239:29	15	newbytecount == 0 || newbytecount > ( uint64 ) TIFF_INT64_MAX
EXPR	1239:8	1239:24	16	newbytecount == 0
FIELD	1239:8	1239:8	17	newbytecount
LEAF_NODE	1239:8	1239:8	18	newbytecount
EQ_OPERATOR	1239:21	1239:21	17	==
LEAF_NODE	1239:21	1239:21	18	==
FIELD	1239:24	1239:24	17	0
LEAF_NODE	1239:24	1239:24	18	0
LEAF_NODE	1239:26	1239:26	16	||
EXPR	1239:29	1239:52	16	newbytecount > ( uint64 ) TIFF_INT64_MAX
FIELD	1239:29	1239:29	17	newbytecount
LEAF_NODE	1239:29	1239:29	18	newbytecount
REL_OPERATOR	1239:42	1239:42	17	>
LEAF_NODE	1239:42	1239:42	18	>
LEAF_NODE	1239:44	1239:44	17	(
TYPE_NAME	1239:45	1239:45	17	uint64
LEAF_NODE	1239:45	1239:45	18	uint64
LEAF_NODE	1239:51	1239:51	17	)
FIELD	1239:52	1239:52	17	TIFF_INT64_MAX
LEAF_NODE	1239:52	1239:52	18	TIFF_INT64_MAX
LEAF_NODE	1239:67	1239:67	13	)
STATEMENTS	1240:4	1255:4	13	
LEAF_NODE	1240:4	1240:4	14	{
STATEMENTS	1242:5	1254:5	14	
EXPR_STATEMENT	1242:5	1246:42	15	TIFFWarningExt ( tif -> tif_clientdata , module , "Too large tile byte count %I64u, tile %lu. Limiting to %I64u" , ( unsigned __int64 ) bytecount , ( unsigned long ) tile , ( unsigned __int64 ) newbytecount ) ;
EXPR	1242:5	1242:5	16	TIFFWarningExt ( tif -> tif_clientdata , module , "Too large tile byte count %I64u, tile %lu. Limiting to %I64u" , ( unsigned __int64 ) bytecount , ( unsigned long ) tile , ( unsigned __int64 ) newbytecount )
FUNCTION_CALL	1242:5	1246:41	17	TIFFWarningExt ( tif -> tif_clientdata , module , "Too large tile byte count %I64u, tile %lu. Limiting to %I64u" , ( unsigned __int64 ) bytecount , ( unsigned long ) tile , ( unsigned __int64 ) newbytecount )
CALLEE	1242:5	1242:5	18	TIFFWarningExt
LEAF_NODE	1242:5	1242:5	19	TIFFWarningExt
LEAF_NODE	1242:19	1242:19	18	(
ARGUMENT	1242:20	1242:20	18	tif -> tif_clientdata
FIELD	1242:20	1242:25	19	tif -> tif_clientdata
LEAF_NODE	1242:20	1242:20	20	tif
LEAF_NODE	1242:23	1242:23	20	->
LEAF_NODE	1242:25	1242:25	20	tif_clientdata
LEAF_NODE	1242:39	1242:39	18	,
ARGUMENT	1242:41	1242:41	18	module
FIELD	1242:41	1242:41	19	module
LEAF_NODE	1242:41	1242:41	20	module
LEAF_NODE	1242:47	1242:47	18	,
ARGUMENT	1243:7	1243:7	18	"Too large tile byte count %I64u, tile %lu. Limiting to %I64u"
FIELD	1243:7	1243:7	19	"Too large tile byte count %I64u, tile %lu. Limiting to %I64u"
LEAF_NODE	1243:7	1243:7	20	"Too large tile byte count %I64u, tile %lu. Limiting to %I64u"
LEAF_NODE	1243:69	1243:69	18	,
ARGUMENT	1244:10	1244:29	18	( unsigned __int64 ) bytecount
LEAF_NODE	1244:10	1244:10	19	(
TYPE_NAME	1244:11	1244:20	19	unsigned __int64
LEAF_NODE	1244:11	1244:11	20	unsigned
LEAF_NODE	1244:20	1244:20	20	__int64
LEAF_NODE	1244:27	1244:27	19	)
FIELD	1244:29	1244:29	19	bytecount
LEAF_NODE	1244:29	1244:29	20	bytecount
LEAF_NODE	1244:38	1244:38	18	,
ARGUMENT	1245:10	1245:26	18	( unsigned long ) tile
LEAF_NODE	1245:10	1245:10	19	(
TYPE_NAME	1245:11	1245:20	19	unsigned long
LEAF_NODE	1245:11	1245:11	20	unsigned
LEAF_NODE	1245:20	1245:20	20	long
LEAF_NODE	1245:24	1245:24	19	)
FIELD	1245:26	1245:26	19	tile
LEAF_NODE	1245:26	1245:26	20	tile
LEAF_NODE	1245:30	1245:30	18	,
ARGUMENT	1246:10	1246:29	18	( unsigned __int64 ) newbytecount
LEAF_NODE	1246:10	1246:10	19	(
TYPE_NAME	1246:11	1246:20	19	unsigned __int64
LEAF_NODE	1246:11	1246:11	20	unsigned
LEAF_NODE	1246:20	1246:20	20	__int64
LEAF_NODE	1246:27	1246:27	19	)
FIELD	1246:29	1246:29	19	newbytecount
LEAF_NODE	1246:29	1246:29	20	newbytecount
LEAF_NODE	1246:41	1246:41	18	)
LEAF_NODE	1246:42	1246:42	16	;
LEAF_NODE	1248:5	1248:5	15	TIFFErrorExt
LEAF_NODE	1248:17	1248:17	15	(
LEAF_NODE	1248:18	1248:18	15	tif
LEAF_NODE	1248:21	1248:21	15	->
LEAF_NODE	1248:23	1248:23	15	tif_clientdata
LEAF_NODE	1248:37	1248:37	15	,
LEAF_NODE	1248:39	1248:39	15	module
LEAF_NODE	1248:45	1248:45	15	,
LEAF_NODE	1249:7	1249:7	15	"Too large tile byte count %llu, tile %lu. Limiting to %llu"
LEAF_NODE	1249:67	1249:67	15	,
LEAF_NODE	1250:10	1250:10	15	(
LEAF_NODE	1250:11	1250:11	15	unsigned
LEAF_NODE	1250:20	1250:20	15	long
LEAF_NODE	1250:25	1250:25	15	long
LEAF_NODE	1250:29	1250:29	15	)
LEAF_NODE	1250:31	1250:31	15	bytecount
LEAF_NODE	1250:40	1250:40	15	,
LEAF_NODE	1251:10	1251:10	15	(
LEAF_NODE	1251:11	1251:11	15	unsigned
LEAF_NODE	1251:20	1251:20	15	long
LEAF_NODE	1251:24	1251:24	15	)
LEAF_NODE	1251:26	1251:26	15	tile
LEAF_NODE	1251:30	1251:30	15	,
LEAF_NODE	1252:10	1252:10	15	(
LEAF_NODE	1252:11	1252:11	15	unsigned
LEAF_NODE	1252:20	1252:20	15	long
LEAF_NODE	1252:25	1252:25	15	long
LEAF_NODE	1252:29	1252:29	15	)
LEAF_NODE	1252:31	1252:31	15	newbytecount
LEAF_NODE	1252:43	1252:43	15	)
LEAF_NODE	1252:44	1252:44	15	;
EXPR_STATEMENT	1254:5	1254:29	15	bytecount = newbytecount ;
EXPR	1254:5	1254:5	16	bytecount = newbytecount
ASSIGN	1254:5	1254:17	17	bytecount = newbytecount
LVAL	1254:5	1254:5	18	bytecount
FIELD	1254:5	1254:5	19	bytecount
LEAF_NODE	1254:5	1254:5	20	bytecount
ASSIGN_OP	1254:15	1254:15	18	=
LEAF_NODE	1254:15	1254:15	19	=
RVAL	1254:17	1254:17	18	newbytecount
FIELD	1254:17	1254:17	19	newbytecount
LEAF_NODE	1254:17	1254:17	20	newbytecount
LEAF_NODE	1254:29	1254:29	16	;
LEAF_NODE	1255:4	1255:4	14	}
LEAF_NODE	1256:3	1256:3	11	}
LEAF_NODE	1257:2	1257:2	8	}
SELECTION	1259:2	1259:21	6	
KEYWORD	1259:2	1259:2	7	if
LEAF_NODE	1259:2	1259:2	8	if
LEAF_NODE	1259:5	1259:5	7	(
CONDITION	1259:6	1259:6	7	isMapped ( tif )
EXPR	1259:6	1259:6	8	isMapped ( tif )
FUNCTION_CALL	1259:6	1259:18	9	isMapped ( tif )
CALLEE	1259:6	1259:6	10	isMapped
LEAF_NODE	1259:6	1259:6	11	isMapped
LEAF_NODE	1259:14	1259:14	10	(
ARGUMENT	1259:15	1259:15	10	tif
FIELD	1259:15	1259:15	11	tif
LEAF_NODE	1259:15	1259:15	12	tif
LEAF_NODE	1259:18	1259:18	10	)
LEAF_NODE	1259:19	1259:19	7	)
STATEMENTS	1259:21	1274:2	7	
LEAF_NODE	1259:21	1259:21	8	{
STATEMENTS	1269:3	1269:3	8	
SELECTION	1269:3	1270:75	9	
KEYWORD	1269:3	1269:3	10	if
LEAF_NODE	1269:3	1269:3	11	if
LEAF_NODE	1269:6	1269:6	10	(
CONDITION	1269:7	1269:7	10	bytecount > ( uint64 ) tif -> tif_size || TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) tif -> tif_size - bytecount
EXPR	1269:7	1269:7	11	bytecount > ( uint64 ) tif -> tif_size || TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) tif -> tif_size - bytecount
OR	1269:7	1270:7	12	bytecount > ( uint64 ) tif -> tif_size || TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) tif -> tif_size - bytecount
EXPR	1269:7	1269:27	13	bytecount > ( uint64 ) tif -> tif_size
FIELD	1269:7	1269:7	14	bytecount
LEAF_NODE	1269:7	1269:7	15	bytecount
REL_OPERATOR	1269:17	1269:17	14	>
LEAF_NODE	1269:17	1269:17	15	>
LEAF_NODE	1269:19	1269:19	14	(
TYPE_NAME	1269:20	1269:20	14	uint64
LEAF_NODE	1269:20	1269:20	15	uint64
LEAF_NODE	1269:26	1269:26	14	)
FIELD	1269:27	1269:32	14	tif -> tif_size
LEAF_NODE	1269:27	1269:27	15	tif
LEAF_NODE	1269:30	1269:30	15	->
LEAF_NODE	1269:32	1269:32	15	tif_size
LEAF_NODE	1269:41	1269:41	13	||
EXPR	1270:7	1270:64	13	TIFFGetStrileOffset ( tif , tile ) > ( uint64 ) tif -> tif_size - bytecount
FUNCTION_CALL	1270:7	1270:36	14	TIFFGetStrileOffset ( tif , tile )
CALLEE	1270:7	1270:7	15	TIFFGetStrileOffset
LEAF_NODE	1270:7	1270:7	16	TIFFGetStrileOffset
LEAF_NODE	1270:26	1270:26	15	(
ARGUMENT	1270:27	1270:27	15	tif
FIELD	1270:27	1270:27	16	tif
LEAF_NODE	1270:27	1270:27	17	tif
LEAF_NODE	1270:30	1270:30	15	,
ARGUMENT	1270:32	1270:32	15	tile
FIELD	1270:32	1270:32	16	tile
LEAF_NODE	1270:32	1270:32	17	tile
LEAF_NODE	1270:36	1270:36	15	)
REL_OPERATOR	1270:38	1270:38	14	>
LEAF_NODE	1270:38	1270:38	15	>
LEAF_NODE	1270:40	1270:40	14	(
TYPE_NAME	1270:41	1270:41	14	uint64
LEAF_NODE	1270:41	1270:41	15	uint64
LEAF_NODE	1270:47	1270:47	14	)
FIELD	1270:48	1270:53	14	tif -> tif_size
LEAF_NODE	1270:48	1270:48	15	tif
LEAF_NODE	1270:51	1270:51	15	->
LEAF_NODE	1270:53	1270:53	15	tif_size
LEAF_NODE	1270:62	1270:62	14	-
FIELD	1270:64	1270:64	14	bytecount
LEAF_NODE	1270:64	1270:64	15	bytecount
LEAF_NODE	1270:73	1270:73	10	)
STATEMENTS	1270:75	1273:3	10	
LEAF_NODE	1270:75	1270:75	11	{
STATEMENTS	1271:4	1272:4	11	
EXPR_STATEMENT	1271:4	1271:29	12	tif -> tif_curtile = NOTILE ;
EXPR	1271:4	1271:4	13	tif -> tif_curtile = NOTILE
ASSIGN	1271:4	1271:23	14	tif -> tif_curtile = NOTILE
LVAL	1271:4	1271:4	15	tif -> tif_curtile
FIELD	1271:4	1271:9	16	tif -> tif_curtile
LEAF_NODE	1271:4	1271:4	17	tif
LEAF_NODE	1271:7	1271:7	17	->
LEAF_NODE	1271:9	1271:9	17	tif_curtile
ASSIGN_OP	1271:21	1271:21	15	=
LEAF_NODE	1271:21	1271:21	16	=
RVAL	1271:23	1271:23	15	NOTILE
FIELD	1271:23	1271:23	16	NOTILE
LEAF_NODE	1271:23	1271:23	17	NOTILE
LEAF_NODE	1271:29	1271:29	13	;
JUMP_STATEMENT	1272:4	1272:14	12	return ( 0 ) ;
KEYWORD	1272:4	1272:4	13	return
LEAF_NODE	1272:4	1272:4	14	return
DESTINATION	1272:11	1272:11	13	( 0 )
EXPR	1272:11	1272:13	14	( 0 )
LEAF_NODE	1272:11	1272:11	15	(
FIELD	1272:12	1272:12	15	0
LEAF_NODE	1272:12	1272:12	16	0
LEAF_NODE	1272:13	1272:13	15	)
LEAF_NODE	1272:14	1272:14	13	;
LEAF_NODE	1273:3	1273:3	11	}
LEAF_NODE	1274:2	1274:2	8	}
SELECTION	1276:2	1278:45	6	
KEYWORD	1276:2	1276:2	7	if
LEAF_NODE	1276:2	1276:2	8	if
LEAF_NODE	1276:5	1276:5	7	(
CONDITION	1276:6	1276:6	7	isMapped ( tif ) && ( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
EXPR	1276:6	1276:6	8	isMapped ( tif ) && ( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
AND	1276:6	1277:6	9	isMapped ( tif ) && ( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
EXPR	1276:6	1276:6	10	isMapped ( tif )
FUNCTION_CALL	1276:6	1276:18	11	isMapped ( tif )
CALLEE	1276:6	1276:6	12	isMapped
LEAF_NODE	1276:6	1276:6	13	isMapped
LEAF_NODE	1276:14	1276:14	12	(
ARGUMENT	1276:15	1276:15	12	tif
FIELD	1276:15	1276:15	13	tif
LEAF_NODE	1276:15	1276:15	14	tif
LEAF_NODE	1276:18	1276:18	12	)
LEAF_NODE	1276:20	1276:20	10	&&
EXPR	1277:6	1278:42	10	( isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV ) )
LEAF_NODE	1277:6	1277:6	11	(
OR	1277:7	1278:10	11	isFillOrder ( tif , td -> td_fillorder ) || ( tif -> tif_flags & TIFF_NOBITREV )
EXPR	1277:7	1277:7	12	isFillOrder ( tif , td -> td_fillorder )
FUNCTION_CALL	1277:7	1277:40	13	isFillOrder ( tif , td -> td_fillorder )
CALLEE	1277:7	1277:7	14	isFillOrder
LEAF_NODE	1277:7	1277:7	15	isFillOrder
LEAF_NODE	1277:18	1277:18	14	(
ARGUMENT	1277:19	1277:19	14	tif
FIELD	1277:19	1277:19	15	tif
LEAF_NODE	1277:19	1277:19	16	tif
LEAF_NODE	1277:22	1277:22	14	,
ARGUMENT	1277:24	1277:24	14	td -> td_fillorder
FIELD	1277:24	1277:28	15	td -> td_fillorder
LEAF_NODE	1277:24	1277:24	16	td
LEAF_NODE	1277:26	1277:26	16	->
LEAF_NODE	1277:28	1277:28	16	td_fillorder
LEAF_NODE	1277:40	1277:40	14	)
LEAF_NODE	1278:7	1278:7	12	||
EXPR	1278:10	1278:41	12	( tif -> tif_flags & TIFF_NOBITREV )
LEAF_NODE	1278:10	1278:10	13	(
FIELD	1278:11	1278:16	13	tif -> tif_flags
LEAF_NODE	1278:11	1278:11	14	tif
LEAF_NODE	1278:14	1278:14	14	->
LEAF_NODE	1278:16	1278:16	14	tif_flags
LEAF_NODE	1278:26	1278:26	13	&
FIELD	1278:28	1278:28	13	TIFF_NOBITREV
LEAF_NODE	1278:28	1278:28	14	TIFF_NOBITREV
LEAF_NODE	1278:41	1278:41	13	)
LEAF_NODE	1278:42	1278:42	11	)
LEAF_NODE	1278:43	1278:43	7	)
STATEMENTS	1278:45	1303:2	7	
LEAF_NODE	1278:45	1278:45	8	{
STATEMENTS	1290:3	1302:3	8	
SELECTION	1290:3	1290:61	9	
KEYWORD	1290:3	1290:3	10	if
LEAF_NODE	1290:3	1290:3	11	if
LEAF_NODE	1290:6	1290:6	10	(
CONDITION	1290:7	1290:7	10	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	1290:7	1290:7	11	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
AND	1290:7	1290:43	12	( tif -> tif_flags & TIFF_MYBUFFER ) && tif -> tif_rawdata
EXPR	1290:7	1290:38	13	( tif -> tif_flags & TIFF_MYBUFFER )
LEAF_NODE	1290:7	1290:7	14	(
FIELD	1290:8	1290:13	14	tif -> tif_flags
LEAF_NODE	1290:8	1290:8	15	tif
LEAF_NODE	1290:11	1290:11	15	->
LEAF_NODE	1290:13	1290:13	15	tif_flags
LEAF_NODE	1290:23	1290:23	14	&
FIELD	1290:25	1290:25	14	TIFF_MYBUFFER
LEAF_NODE	1290:25	1290:25	15	TIFF_MYBUFFER
LEAF_NODE	1290:38	1290:38	14	)
LEAF_NODE	1290:40	1290:40	13	&&
EXPR	1290:43	1290:43	13	tif -> tif_rawdata
FIELD	1290:43	1290:48	14	tif -> tif_rawdata
LEAF_NODE	1290:43	1290:43	15	tif
LEAF_NODE	1290:46	1290:46	15	->
LEAF_NODE	1290:48	1290:48	15	tif_rawdata
LEAF_NODE	1290:59	1290:59	10	)
STATEMENTS	1290:61	1294:3	10	
LEAF_NODE	1290:61	1290:61	11	{
STATEMENTS	1291:4	1293:4	11	
EXPR_STATEMENT	1291:4	1291:31	12	_TIFFfree ( tif -> tif_rawdata ) ;
EXPR	1291:4	1291:4	13	_TIFFfree ( tif -> tif_rawdata )
FUNCTION_CALL	1291:4	1291:30	14	_TIFFfree ( tif -> tif_rawdata )
CALLEE	1291:4	1291:4	15	_TIFFfree
LEAF_NODE	1291:4	1291:4	16	_TIFFfree
LEAF_NODE	1291:13	1291:13	15	(
ARGUMENT	1291:14	1291:14	15	tif -> tif_rawdata
FIELD	1291:14	1291:19	16	tif -> tif_rawdata
LEAF_NODE	1291:14	1291:14	17	tif
LEAF_NODE	1291:17	1291:17	17	->
LEAF_NODE	1291:19	1291:19	17	tif_rawdata
LEAF_NODE	1291:30	1291:30	15	)
LEAF_NODE	1291:31	1291:31	13	;
EXPR_STATEMENT	1292:4	1292:27	12	tif -> tif_rawdata = NULL ;
EXPR	1292:4	1292:4	13	tif -> tif_rawdata = NULL
ASSIGN	1292:4	1292:23	14	tif -> tif_rawdata = NULL
LVAL	1292:4	1292:4	15	tif -> tif_rawdata
FIELD	1292:4	1292:9	16	tif -> tif_rawdata
LEAF_NODE	1292:4	1292:4	17	tif
LEAF_NODE	1292:7	1292:7	17	->
LEAF_NODE	1292:9	1292:9	17	tif_rawdata
ASSIGN_OP	1292:21	1292:21	15	=
LEAF_NODE	1292:21	1292:21	16	=
RVAL	1292:23	1292:23	15	NULL
FIELD	1292:23	1292:23	16	NULL
LEAF_NODE	1292:23	1292:23	17	NULL
LEAF_NODE	1292:27	1292:27	13	;
EXPR_STATEMENT	1293:4	1293:28	12	tif -> tif_rawdatasize = 0 ;
EXPR	1293:4	1293:4	13	tif -> tif_rawdatasize = 0
ASSIGN	1293:4	1293:27	14	tif -> tif_rawdatasize = 0
LVAL	1293:4	1293:4	15	tif -> tif_rawdatasize
FIELD	1293:4	1293:9	16	tif -> tif_rawdatasize
LEAF_NODE	1293:4	1293:4	17	tif
LEAF_NODE	1293:7	1293:7	17	->
LEAF_NODE	1293:9	1293:9	17	tif_rawdatasize
ASSIGN_OP	1293:25	1293:25	15	=
LEAF_NODE	1293:25	1293:25	16	=
RVAL	1293:27	1293:27	15	0
FIELD	1293:27	1293:27	16	0
LEAF_NODE	1293:27	1293:27	17	0
LEAF_NODE	1293:28	1293:28	13	;
LEAF_NODE	1294:3	1294:3	11	}
EXPR_STATEMENT	1295:3	1295:35	9	tif -> tif_flags &= ~TIFF_MYBUFFER ;
EXPR	1295:3	1295:3	10	tif -> tif_flags &= ~TIFF_MYBUFFER
ASSIGN	1295:3	1295:21	11	tif -> tif_flags &= ~TIFF_MYBUFFER
LVAL	1295:3	1295:3	12	tif -> tif_flags
FIELD	1295:3	1295:8	13	tif -> tif_flags
LEAF_NODE	1295:3	1295:3	14	tif
LEAF_NODE	1295:6	1295:6	14	->
LEAF_NODE	1295:8	1295:8	14	tif_flags
ASSIGN_OP	1295:18	1295:18	12	&=
LEAF_NODE	1295:18	1295:18	13	&=
RVAL	1295:21	1295:21	12	~TIFF_MYBUFFER
FIELD	1295:21	1295:21	13	~TIFF_MYBUFFER
LEAF_NODE	1295:21	1295:21	14	~TIFF_MYBUFFER
LEAF_NODE	1295:35	1295:35	10	;
EXPR_STATEMENT	1297:3	1297:45	9	tif -> tif_rawdatasize = ( tmsize_t ) bytecount ;
EXPR	1297:3	1297:3	10	tif -> tif_rawdatasize = ( tmsize_t ) bytecount
ASSIGN	1297:3	1297:26	11	tif -> tif_rawdatasize = ( tmsize_t ) bytecount
LVAL	1297:3	1297:3	12	tif -> tif_rawdatasize
FIELD	1297:3	1297:8	13	tif -> tif_rawdatasize
LEAF_NODE	1297:3	1297:3	14	tif
LEAF_NODE	1297:6	1297:6	14	->
LEAF_NODE	1297:8	1297:8	14	tif_rawdatasize
ASSIGN_OP	1297:24	1297:24	12	=
LEAF_NODE	1297:24	1297:24	13	=
RVAL	1297:26	1297:36	12	( tmsize_t ) bytecount
LEAF_NODE	1297:26	1297:26	13	(
TYPE_NAME	1297:27	1297:27	13	tmsize_t
LEAF_NODE	1297:27	1297:27	14	tmsize_t
LEAF_NODE	1297:35	1297:35	13	)
FIELD	1297:36	1297:36	13	bytecount
LEAF_NODE	1297:36	1297:36	14	bytecount
LEAF_NODE	1297:45	1297:45	10	;
EXPR_STATEMENT	1298:3	1299:60	9	tif -> tif_rawdata = tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , tile ) ;
EXPR	1298:3	1298:3	10	tif -> tif_rawdata = tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , tile )
ASSIGN	1298:3	1299:4	11	tif -> tif_rawdata = tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , tile )
LVAL	1298:3	1298:3	12	tif -> tif_rawdata
FIELD	1298:3	1298:8	13	tif -> tif_rawdata
LEAF_NODE	1298:3	1298:3	14	tif
LEAF_NODE	1298:6	1298:6	14	->
LEAF_NODE	1298:8	1298:8	14	tif_rawdata
ASSIGN_OP	1298:20	1298:20	12	=
LEAF_NODE	1298:20	1298:20	13	=
RVAL	1299:4	1299:30	12	tif -> tif_base + ( tmsize_t ) TIFFGetStrileOffset ( tif , tile )
FIELD	1299:4	1299:9	13	tif -> tif_base
LEAF_NODE	1299:4	1299:4	14	tif
LEAF_NODE	1299:7	1299:7	14	->
LEAF_NODE	1299:9	1299:9	14	tif_base
LEAF_NODE	1299:18	1299:18	13	+
LEAF_NODE	1299:20	1299:20	13	(
TYPE_NAME	1299:21	1299:21	13	tmsize_t
LEAF_NODE	1299:21	1299:21	14	tmsize_t
LEAF_NODE	1299:29	1299:29	13	)
FUNCTION_CALL	1299:30	1299:59	13	TIFFGetStrileOffset ( tif , tile )
CALLEE	1299:30	1299:30	14	TIFFGetStrileOffset
LEAF_NODE	1299:30	1299:30	15	TIFFGetStrileOffset
LEAF_NODE	1299:49	1299:49	14	(
ARGUMENT	1299:50	1299:50	14	tif
FIELD	1299:50	1299:50	15	tif
LEAF_NODE	1299:50	1299:50	16	tif
LEAF_NODE	1299:53	1299:53	14	,
ARGUMENT	1299:55	1299:55	14	tile
FIELD	1299:55	1299:55	15	tile
LEAF_NODE	1299:55	1299:55	16	tile
LEAF_NODE	1299:59	1299:59	14	)
LEAF_NODE	1299:60	1299:60	10	;
EXPR_STATEMENT	1300:24	1300:47	9	tif -> tif_rawdataoff = 0 ;
EXPR	1300:24	1300:24	10	tif -> tif_rawdataoff = 0
ASSIGN	1300:24	1300:46	11	tif -> tif_rawdataoff = 0
LVAL	1300:24	1300:24	12	tif -> tif_rawdataoff
FIELD	1300:24	1300:29	13	tif -> tif_rawdataoff
LEAF_NODE	1300:24	1300:24	14	tif
LEAF_NODE	1300:27	1300:27	14	->
LEAF_NODE	1300:29	1300:29	14	tif_rawdataoff
ASSIGN_OP	1300:44	1300:44	12	=
LEAF_NODE	1300:44	1300:44	13	=
RVAL	1300:46	1300:46	12	0
FIELD	1300:46	1300:46	13	0
LEAF_NODE	1300:46	1300:46	14	0
LEAF_NODE	1300:47	1300:47	10	;
EXPR_STATEMENT	1301:24	1301:69	9	tif -> tif_rawdataloaded = ( tmsize_t ) bytecount ;
EXPR	1301:24	1301:24	10	tif -> tif_rawdataloaded = ( tmsize_t ) bytecount
ASSIGN	1301:24	1301:49	11	tif -> tif_rawdataloaded = ( tmsize_t ) bytecount
LVAL	1301:24	1301:24	12	tif -> tif_rawdataloaded
FIELD	1301:24	1301:29	13	tif -> tif_rawdataloaded
LEAF_NODE	1301:24	1301:24	14	tif
LEAF_NODE	1301:27	1301:27	14	->
LEAF_NODE	1301:29	1301:29	14	tif_rawdataloaded
ASSIGN_OP	1301:47	1301:47	12	=
LEAF_NODE	1301:47	1301:47	13	=
RVAL	1301:49	1301:60	12	( tmsize_t ) bytecount
LEAF_NODE	1301:49	1301:49	13	(
TYPE_NAME	1301:50	1301:50	13	tmsize_t
LEAF_NODE	1301:50	1301:50	14	tmsize_t
LEAF_NODE	1301:58	1301:58	13	)
FIELD	1301:60	1301:60	13	bytecount
LEAF_NODE	1301:60	1301:60	14	bytecount
LEAF_NODE	1301:69	1301:69	10	;
EXPR_STATEMENT	1302:3	1302:36	9	tif -> tif_flags |= TIFF_BUFFERMMAP ;
EXPR	1302:3	1302:3	10	tif -> tif_flags |= TIFF_BUFFERMMAP
ASSIGN	1302:3	1302:21	11	tif -> tif_flags |= TIFF_BUFFERMMAP
LVAL	1302:3	1302:3	12	tif -> tif_flags
FIELD	1302:3	1302:8	13	tif -> tif_flags
LEAF_NODE	1302:3	1302:3	14	tif
LEAF_NODE	1302:6	1302:6	14	->
LEAF_NODE	1302:8	1302:8	14	tif_flags
ASSIGN_OP	1302:18	1302:18	12	|=
LEAF_NODE	1302:18	1302:18	13	|=
RVAL	1302:21	1302:21	12	TIFF_BUFFERMMAP
FIELD	1302:21	1302:21	13	TIFF_BUFFERMMAP
LEAF_NODE	1302:21	1302:21	14	TIFF_BUFFERMMAP
LEAF_NODE	1302:36	1302:36	10	;
LEAF_NODE	1303:2	1303:2	8	}
SELECTION	1303:4	1303:9	6	
KEYWORD	1303:4	1303:4	7	else
LEAF_NODE	1303:4	1303:4	8	else
STATEMENTS	1303:9	1363:2	7	
LEAF_NODE	1303:9	1303:9	8	{
STATEMENTS	1309:3	1358:3	8	
SIMPLE_DECL	1309:3	1309:22	9	tmsize_t bytecountm ;
VAR_DECL	1309:3	1309:12	10	tmsize_t bytecountm
TYPE	1309:3	1309:3	11	tmsize_t
TYPE_NAME	1309:3	1309:3	12	tmsize_t
LEAF_NODE	1309:3	1309:3	13	tmsize_t
NAME	1309:12	1309:12	11	bytecountm
LEAF_NODE	1309:12	1309:12	12	bytecountm
LEAF_NODE	1309:22	1309:22	10	;
EXPR_STATEMENT	1310:3	1310:33	9	bytecountm = ( tmsize_t ) bytecount ;
EXPR	1310:3	1310:3	10	bytecountm = ( tmsize_t ) bytecount
ASSIGN	1310:3	1310:14	11	bytecountm = ( tmsize_t ) bytecount
LVAL	1310:3	1310:3	12	bytecountm
FIELD	1310:3	1310:3	13	bytecountm
LEAF_NODE	1310:3	1310:3	14	bytecountm
ASSIGN_OP	1310:13	1310:13	12	=
LEAF_NODE	1310:13	1310:13	13	=
RVAL	1310:14	1310:24	12	( tmsize_t ) bytecount
LEAF_NODE	1310:14	1310:14	13	(
TYPE_NAME	1310:15	1310:15	13	tmsize_t
LEAF_NODE	1310:15	1310:15	14	tmsize_t
LEAF_NODE	1310:23	1310:23	13	)
FIELD	1310:24	1310:24	13	bytecount
LEAF_NODE	1310:24	1310:24	14	bytecount
LEAF_NODE	1310:33	1310:33	10	;
SELECTION	1311:3	1312:3	9	
KEYWORD	1311:3	1311:3	10	if
LEAF_NODE	1311:3	1311:3	11	if
LEAF_NODE	1311:6	1311:6	10	(
CONDITION	1311:7	1311:7	10	( uint64 ) bytecountm != bytecount
EXPR	1311:7	1311:27	11	( uint64 ) bytecountm != bytecount
LEAF_NODE	1311:7	1311:7	12	(
TYPE_NAME	1311:8	1311:8	12	uint64
LEAF_NODE	1311:8	1311:8	13	uint64
LEAF_NODE	1311:14	1311:14	12	)
FIELD	1311:15	1311:15	12	bytecountm
LEAF_NODE	1311:15	1311:15	13	bytecountm
EQ_OPERATOR	1311:25	1311:25	12	!=
LEAF_NODE	1311:25	1311:25	13	!=
FIELD	1311:27	1311:27	12	bytecount
LEAF_NODE	1311:27	1311:27	13	bytecount
LEAF_NODE	1311:36	1311:36	10	)
STATEMENTS	1312:3	1315:3	10	
LEAF_NODE	1312:3	1312:3	11	{
STATEMENTS	1313:4	1314:4	11	
EXPR_STATEMENT	1313:4	1313:63	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" ) ;
EXPR	1313:4	1313:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
FUNCTION_CALL	1313:4	1313:62	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Integer overflow" )
CALLEE	1313:4	1313:4	15	TIFFErrorExt
LEAF_NODE	1313:4	1313:4	16	TIFFErrorExt
LEAF_NODE	1313:16	1313:16	15	(
ARGUMENT	1313:17	1313:17	15	tif -> tif_clientdata
FIELD	1313:17	1313:22	16	tif -> tif_clientdata
LEAF_NODE	1313:17	1313:17	17	tif
LEAF_NODE	1313:20	1313:20	17	->
LEAF_NODE	1313:22	1313:22	17	tif_clientdata
LEAF_NODE	1313:36	1313:36	15	,
ARGUMENT	1313:37	1313:37	15	module
FIELD	1313:37	1313:37	16	module
LEAF_NODE	1313:37	1313:37	17	module
LEAF_NODE	1313:43	1313:43	15	,
ARGUMENT	1313:44	1313:44	15	"Integer overflow"
FIELD	1313:44	1313:44	16	"Integer overflow"
LEAF_NODE	1313:44	1313:44	17	"Integer overflow"
LEAF_NODE	1313:62	1313:62	15	)
LEAF_NODE	1313:63	1313:63	13	;
JUMP_STATEMENT	1314:4	1314:13	12	return ( 0 ) ;
KEYWORD	1314:4	1314:4	13	return
LEAF_NODE	1314:4	1314:4	14	return
DESTINATION	1314:10	1314:10	13	( 0 )
EXPR	1314:10	1314:12	14	( 0 )
LEAF_NODE	1314:10	1314:10	15	(
FIELD	1314:11	1314:11	15	0
LEAF_NODE	1314:11	1314:11	16	0
LEAF_NODE	1314:12	1314:12	15	)
LEAF_NODE	1314:13	1314:13	13	;
LEAF_NODE	1315:3	1315:3	11	}
SELECTION	1316:3	1316:42	9	
KEYWORD	1316:3	1316:3	10	if
LEAF_NODE	1316:3	1316:3	11	if
LEAF_NODE	1316:6	1316:6	10	(
CONDITION	1316:7	1316:7	10	bytecountm > tif -> tif_rawdatasize
EXPR	1316:7	1316:20	11	bytecountm > tif -> tif_rawdatasize
FIELD	1316:7	1316:7	12	bytecountm
LEAF_NODE	1316:7	1316:7	13	bytecountm
REL_OPERATOR	1316:18	1316:18	12	>
LEAF_NODE	1316:18	1316:18	13	>
FIELD	1316:20	1316:25	12	tif -> tif_rawdatasize
LEAF_NODE	1316:20	1316:20	13	tif
LEAF_NODE	1316:23	1316:23	13	->
LEAF_NODE	1316:25	1316:25	13	tif_rawdatasize
LEAF_NODE	1316:40	1316:40	10	)
STATEMENTS	1316:42	1324:3	10	
LEAF_NODE	1316:42	1316:42	11	{
STATEMENTS	1317:4	1318:4	11	
EXPR_STATEMENT	1317:4	1317:29	12	tif -> tif_curtile = NOTILE ;
EXPR	1317:4	1317:4	13	tif -> tif_curtile = NOTILE
ASSIGN	1317:4	1317:23	14	tif -> tif_curtile = NOTILE
LVAL	1317:4	1317:4	15	tif -> tif_curtile
FIELD	1317:4	1317:9	16	tif -> tif_curtile
LEAF_NODE	1317:4	1317:4	17	tif
LEAF_NODE	1317:7	1317:7	17	->
LEAF_NODE	1317:9	1317:9	17	tif_curtile
ASSIGN_OP	1317:21	1317:21	15	=
LEAF_NODE	1317:21	1317:21	16	=
RVAL	1317:23	1317:23	15	NOTILE
FIELD	1317:23	1317:23	16	NOTILE
LEAF_NODE	1317:23	1317:23	17	NOTILE
LEAF_NODE	1317:29	1317:29	13	;
SELECTION	1318:4	1318:47	12	
KEYWORD	1318:4	1318:4	13	if
LEAF_NODE	1318:4	1318:4	14	if
LEAF_NODE	1318:7	1318:7	13	(
CONDITION	1318:8	1318:8	13	( tif -> tif_flags & TIFF_MYBUFFER ) == 0
EXPR	1318:8	1318:44	14	( tif -> tif_flags & TIFF_MYBUFFER ) == 0
LEAF_NODE	1318:8	1318:8	15	(
FIELD	1318:9	1318:14	15	tif -> tif_flags
LEAF_NODE	1318:9	1318:9	16	tif
LEAF_NODE	1318:12	1318:12	16	->
LEAF_NODE	1318:14	1318:14	16	tif_flags
LEAF_NODE	1318:24	1318:24	15	&
FIELD	1318:26	1318:26	15	TIFF_MYBUFFER
LEAF_NODE	1318:26	1318:26	16	TIFF_MYBUFFER
LEAF_NODE	1318:39	1318:39	15	)
EQ_OPERATOR	1318:41	1318:41	15	==
LEAF_NODE	1318:41	1318:41	16	==
FIELD	1318:44	1318:44	15	0
LEAF_NODE	1318:44	1318:44	16	0
LEAF_NODE	1318:45	1318:45	13	)
STATEMENTS	1318:47	1323:4	13	
LEAF_NODE	1318:47	1318:47	14	{
STATEMENTS	1319:5	1322:5	14	
EXPR_STATEMENT	1319:5	1321:30	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold tile %lu" , ( unsigned long ) tile ) ;
EXPR	1319:5	1319:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold tile %lu" , ( unsigned long ) tile )
FUNCTION_CALL	1319:5	1321:29	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Data buffer too small to hold tile %lu" , ( unsigned long ) tile )
CALLEE	1319:5	1319:5	18	TIFFErrorExt
LEAF_NODE	1319:5	1319:5	19	TIFFErrorExt
LEAF_NODE	1319:17	1319:17	18	(
ARGUMENT	1319:18	1319:18	18	tif -> tif_clientdata
FIELD	1319:18	1319:23	19	tif -> tif_clientdata
LEAF_NODE	1319:18	1319:18	20	tif
LEAF_NODE	1319:21	1319:21	20	->
LEAF_NODE	1319:23	1319:23	20	tif_clientdata
LEAF_NODE	1319:37	1319:37	18	,
ARGUMENT	1319:39	1319:39	18	module
FIELD	1319:39	1319:39	19	module
LEAF_NODE	1319:39	1319:39	20	module
LEAF_NODE	1319:45	1319:45	18	,
ARGUMENT	1320:9	1320:9	18	"Data buffer too small to hold tile %lu"
FIELD	1320:9	1320:9	19	"Data buffer too small to hold tile %lu"
LEAF_NODE	1320:9	1320:9	20	"Data buffer too small to hold tile %lu"
LEAF_NODE	1320:49	1320:49	18	,
ARGUMENT	1321:9	1321:25	18	( unsigned long ) tile
LEAF_NODE	1321:9	1321:9	19	(
TYPE_NAME	1321:10	1321:19	19	unsigned long
LEAF_NODE	1321:10	1321:10	20	unsigned
LEAF_NODE	1321:19	1321:19	20	long
LEAF_NODE	1321:23	1321:23	19	)
FIELD	1321:25	1321:25	19	tile
LEAF_NODE	1321:25	1321:25	20	tile
LEAF_NODE	1321:29	1321:29	18	)
LEAF_NODE	1321:30	1321:30	16	;
JUMP_STATEMENT	1322:5	1322:15	15	return ( 0 ) ;
KEYWORD	1322:5	1322:5	16	return
LEAF_NODE	1322:5	1322:5	17	return
DESTINATION	1322:12	1322:12	16	( 0 )
EXPR	1322:12	1322:14	17	( 0 )
LEAF_NODE	1322:12	1322:12	18	(
FIELD	1322:13	1322:13	18	0
LEAF_NODE	1322:13	1322:13	19	0
LEAF_NODE	1322:14	1322:14	18	)
LEAF_NODE	1322:15	1322:15	16	;
LEAF_NODE	1323:4	1323:4	14	}
LEAF_NODE	1324:3	1324:3	11	}
SELECTION	1325:3	1325:39	9	
KEYWORD	1325:3	1325:3	10	if
LEAF_NODE	1325:3	1325:3	11	if
LEAF_NODE	1325:6	1325:6	10	(
CONDITION	1325:7	1325:7	10	tif -> tif_flags & TIFF_BUFFERMMAP
EXPR	1325:7	1325:22	11	tif -> tif_flags & TIFF_BUFFERMMAP
FIELD	1325:7	1325:12	12	tif -> tif_flags
LEAF_NODE	1325:7	1325:7	13	tif
LEAF_NODE	1325:10	1325:10	13	->
LEAF_NODE	1325:12	1325:12	13	tif_flags
LEAF_NODE	1325:21	1325:21	12	&
FIELD	1325:22	1325:22	12	TIFF_BUFFERMMAP
LEAF_NODE	1325:22	1325:22	13	TIFF_BUFFERMMAP
LEAF_NODE	1325:37	1325:37	10	)
STATEMENTS	1325:39	1330:3	10	
LEAF_NODE	1325:39	1325:39	11	{
STATEMENTS	1326:4	1329:4	11	
EXPR_STATEMENT	1326:4	1326:29	12	tif -> tif_curtile = NOTILE ;
EXPR	1326:4	1326:4	13	tif -> tif_curtile = NOTILE
ASSIGN	1326:4	1326:23	14	tif -> tif_curtile = NOTILE
LVAL	1326:4	1326:4	15	tif -> tif_curtile
FIELD	1326:4	1326:9	16	tif -> tif_curtile
LEAF_NODE	1326:4	1326:4	17	tif
LEAF_NODE	1326:7	1326:7	17	->
LEAF_NODE	1326:9	1326:9	17	tif_curtile
ASSIGN_OP	1326:21	1326:21	15	=
LEAF_NODE	1326:21	1326:21	16	=
RVAL	1326:23	1326:23	15	NOTILE
FIELD	1326:23	1326:23	16	NOTILE
LEAF_NODE	1326:23	1326:23	17	NOTILE
LEAF_NODE	1326:29	1326:29	13	;
EXPR_STATEMENT	1327:4	1327:27	12	tif -> tif_rawdata = NULL ;
EXPR	1327:4	1327:4	13	tif -> tif_rawdata = NULL
ASSIGN	1327:4	1327:23	14	tif -> tif_rawdata = NULL
LVAL	1327:4	1327:4	15	tif -> tif_rawdata
FIELD	1327:4	1327:9	16	tif -> tif_rawdata
LEAF_NODE	1327:4	1327:4	17	tif
LEAF_NODE	1327:7	1327:7	17	->
LEAF_NODE	1327:9	1327:9	17	tif_rawdata
ASSIGN_OP	1327:21	1327:21	15	=
LEAF_NODE	1327:21	1327:21	16	=
RVAL	1327:23	1327:23	15	NULL
FIELD	1327:23	1327:23	16	NULL
LEAF_NODE	1327:23	1327:23	17	NULL
LEAF_NODE	1327:27	1327:27	13	;
EXPR_STATEMENT	1328:4	1328:28	12	tif -> tif_rawdatasize = 0 ;
EXPR	1328:4	1328:4	13	tif -> tif_rawdatasize = 0
ASSIGN	1328:4	1328:27	14	tif -> tif_rawdatasize = 0
LVAL	1328:4	1328:4	15	tif -> tif_rawdatasize
FIELD	1328:4	1328:9	16	tif -> tif_rawdatasize
LEAF_NODE	1328:4	1328:4	17	tif
LEAF_NODE	1328:7	1328:7	17	->
LEAF_NODE	1328:9	1328:9	17	tif_rawdatasize
ASSIGN_OP	1328:25	1328:25	15	=
LEAF_NODE	1328:25	1328:25	16	=
RVAL	1328:27	1328:27	15	0
FIELD	1328:27	1328:27	16	0
LEAF_NODE	1328:27	1328:27	17	0
LEAF_NODE	1328:28	1328:28	13	;
EXPR_STATEMENT	1329:4	1329:38	12	tif -> tif_flags &= ~TIFF_BUFFERMMAP ;
EXPR	1329:4	1329:4	13	tif -> tif_flags &= ~TIFF_BUFFERMMAP
ASSIGN	1329:4	1329:22	14	tif -> tif_flags &= ~TIFF_BUFFERMMAP
LVAL	1329:4	1329:4	15	tif -> tif_flags
FIELD	1329:4	1329:9	16	tif -> tif_flags
LEAF_NODE	1329:4	1329:4	17	tif
LEAF_NODE	1329:7	1329:7	17	->
LEAF_NODE	1329:9	1329:9	17	tif_flags
ASSIGN_OP	1329:19	1329:19	15	&=
LEAF_NODE	1329:19	1329:19	16	&=
RVAL	1329:22	1329:22	15	~TIFF_BUFFERMMAP
FIELD	1329:22	1329:22	16	~TIFF_BUFFERMMAP
LEAF_NODE	1329:22	1329:22	17	~TIFF_BUFFERMMAP
LEAF_NODE	1329:38	1329:38	13	;
LEAF_NODE	1330:3	1330:3	11	}
SELECTION	1332:3	1333:3	9	
KEYWORD	1332:3	1332:3	10	if
LEAF_NODE	1332:3	1332:3	11	if
LEAF_NODE	1332:5	1332:5	10	(
CONDITION	1332:7	1332:7	10	isMapped ( tif )
EXPR	1332:7	1332:7	11	isMapped ( tif )
FUNCTION_CALL	1332:7	1332:19	12	isMapped ( tif )
CALLEE	1332:7	1332:7	13	isMapped
LEAF_NODE	1332:7	1332:7	14	isMapped
LEAF_NODE	1332:15	1332:15	13	(
ARGUMENT	1332:16	1332:16	13	tif
FIELD	1332:16	1332:16	14	tif
LEAF_NODE	1332:16	1332:16	15	tif
LEAF_NODE	1332:19	1332:19	13	)
LEAF_NODE	1332:21	1332:21	10	)
STATEMENTS	1333:3	1344:3	10	
LEAF_NODE	1333:3	1333:3	11	{
STATEMENTS	1334:4	1339:4	11	
SELECTION	1334:4	1336:4	12	
KEYWORD	1334:4	1334:4	13	if
LEAF_NODE	1334:4	1334:4	14	if
LEAF_NODE	1334:7	1334:7	13	(
CONDITION	1334:8	1334:8	13	bytecountm > tif -> tif_rawdatasize && ! TIFFReadBufferSetup ( tif , 0 , bytecountm )
EXPR	1334:8	1334:8	14	bytecountm > tif -> tif_rawdatasize && ! TIFFReadBufferSetup ( tif , 0 , bytecountm )
AND	1334:8	1335:8	15	bytecountm > tif -> tif_rawdatasize && ! TIFFReadBufferSetup ( tif , 0 , bytecountm )
EXPR	1334:8	1334:21	16	bytecountm > tif -> tif_rawdatasize
FIELD	1334:8	1334:8	17	bytecountm
LEAF_NODE	1334:8	1334:8	18	bytecountm
REL_OPERATOR	1334:19	1334:19	17	>
LEAF_NODE	1334:19	1334:19	18	>
FIELD	1334:21	1334:26	17	tif -> tif_rawdatasize
LEAF_NODE	1334:21	1334:21	18	tif
LEAF_NODE	1334:24	1334:24	18	->
LEAF_NODE	1334:26	1334:26	18	tif_rawdatasize
LEAF_NODE	1334:42	1334:42	16	&&
EXPR	1335:8	1335:8	16	! TIFFReadBufferSetup ( tif , 0 , bytecountm )
UNARY_EXPR	1335:8	1335:9	17	! TIFFReadBufferSetup ( tif , 0 , bytecountm )
UNARY_OPERATOR	1335:8	1335:8	18	!
LEAF_NODE	1335:8	1335:8	19	!
FUNCTION_CALL	1335:9	1335:47	18	TIFFReadBufferSetup ( tif , 0 , bytecountm )
CALLEE	1335:9	1335:9	19	TIFFReadBufferSetup
LEAF_NODE	1335:9	1335:9	20	TIFFReadBufferSetup
LEAF_NODE	1335:28	1335:28	19	(
ARGUMENT	1335:29	1335:29	19	tif
FIELD	1335:29	1335:29	20	tif
LEAF_NODE	1335:29	1335:29	21	tif
LEAF_NODE	1335:32	1335:32	19	,
ARGUMENT	1335:34	1335:34	19	0
FIELD	1335:34	1335:34	20	0
LEAF_NODE	1335:34	1335:34	21	0
LEAF_NODE	1335:35	1335:35	19	,
ARGUMENT	1335:37	1335:37	19	bytecountm
FIELD	1335:37	1335:37	20	bytecountm
LEAF_NODE	1335:37	1335:37	21	bytecountm
LEAF_NODE	1335:47	1335:47	19	)
LEAF_NODE	1335:48	1335:48	13	)
STATEMENTS	1336:4	1338:4	13	
LEAF_NODE	1336:4	1336:4	14	{
STATEMENTS	1337:5	1337:5	14	
JUMP_STATEMENT	1337:5	1337:15	15	return ( 0 ) ;
KEYWORD	1337:5	1337:5	16	return
LEAF_NODE	1337:5	1337:5	17	return
DESTINATION	1337:12	1337:12	16	( 0 )
EXPR	1337:12	1337:14	17	( 0 )
LEAF_NODE	1337:12	1337:12	18	(
FIELD	1337:13	1337:13	18	0
LEAF_NODE	1337:13	1337:13	19	0
LEAF_NODE	1337:14	1337:14	18	)
LEAF_NODE	1337:15	1337:15	16	;
LEAF_NODE	1338:4	1338:4	14	}
SELECTION	1339:4	1341:4	12	
KEYWORD	1339:4	1339:4	13	if
LEAF_NODE	1339:4	1339:4	14	if
LEAF_NODE	1339:7	1339:7	13	(
CONDITION	1339:8	1339:8	13	TIFFReadRawTile1 ( tif , tile , tif -> tif_rawdata , bytecountm , module ) != bytecountm
EXPR	1339:8	1340:31	14	TIFFReadRawTile1 ( tif , tile , tif -> tif_rawdata , bytecountm , module ) != bytecountm
FUNCTION_CALL	1339:8	1340:26	15	TIFFReadRawTile1 ( tif , tile , tif -> tif_rawdata , bytecountm , module )
CALLEE	1339:8	1339:8	16	TIFFReadRawTile1
LEAF_NODE	1339:8	1339:8	17	TIFFReadRawTile1
LEAF_NODE	1339:24	1339:24	16	(
ARGUMENT	1339:25	1339:25	16	tif
FIELD	1339:25	1339:25	17	tif
LEAF_NODE	1339:25	1339:25	18	tif
LEAF_NODE	1339:28	1339:28	16	,
ARGUMENT	1339:30	1339:30	16	tile
FIELD	1339:30	1339:30	17	tile
LEAF_NODE	1339:30	1339:30	18	tile
LEAF_NODE	1339:34	1339:34	16	,
ARGUMENT	1339:36	1339:36	16	tif -> tif_rawdata
FIELD	1339:36	1339:41	17	tif -> tif_rawdata
LEAF_NODE	1339:36	1339:36	18	tif
LEAF_NODE	1339:39	1339:39	18	->
LEAF_NODE	1339:41	1339:41	18	tif_rawdata
LEAF_NODE	1339:52	1339:52	16	,
ARGUMENT	1340:8	1340:8	16	bytecountm
FIELD	1340:8	1340:8	17	bytecountm
LEAF_NODE	1340:8	1340:8	18	bytecountm
LEAF_NODE	1340:18	1340:18	16	,
ARGUMENT	1340:20	1340:20	16	module
FIELD	1340:20	1340:20	17	module
LEAF_NODE	1340:20	1340:20	18	module
LEAF_NODE	1340:26	1340:26	16	)
EQ_OPERATOR	1340:28	1340:28	15	!=
LEAF_NODE	1340:28	1340:28	16	!=
FIELD	1340:31	1340:31	15	bytecountm
LEAF_NODE	1340:31	1340:31	16	bytecountm
LEAF_NODE	1340:41	1340:41	13	)
STATEMENTS	1341:4	1343:4	13	
LEAF_NODE	1341:4	1341:4	14	{
STATEMENTS	1342:5	1342:5	14	
JUMP_STATEMENT	1342:5	1342:15	15	return ( 0 ) ;
KEYWORD	1342:5	1342:5	16	return
LEAF_NODE	1342:5	1342:5	17	return
DESTINATION	1342:12	1342:12	16	( 0 )
EXPR	1342:12	1342:14	17	( 0 )
LEAF_NODE	1342:12	1342:12	18	(
FIELD	1342:13	1342:13	18	0
LEAF_NODE	1342:13	1342:13	19	0
LEAF_NODE	1342:14	1342:14	18	)
LEAF_NODE	1342:15	1342:15	16	;
LEAF_NODE	1343:4	1343:4	14	}
LEAF_NODE	1344:3	1344:3	11	}
SELECTION	1345:3	1346:3	9	
KEYWORD	1345:3	1345:3	10	else
LEAF_NODE	1345:3	1345:3	11	else
STATEMENTS	1346:3	1352:3	10	
LEAF_NODE	1346:3	1346:3	11	{
STATEMENTS	1347:4	1347:4	11	
SELECTION	1347:4	1349:4	12	
KEYWORD	1347:4	1347:4	13	if
LEAF_NODE	1347:4	1347:4	14	if
LEAF_NODE	1347:7	1347:7	13	(
CONDITION	1347:8	1347:8	13	TIFFReadRawStripOrTile2 ( tif , tile , 0 , bytecountm , module ) != bytecountm
EXPR	1347:8	1348:31	14	TIFFReadRawStripOrTile2 ( tif , tile , 0 , bytecountm , module ) != bytecountm
FUNCTION_CALL	1347:8	1348:26	15	TIFFReadRawStripOrTile2 ( tif , tile , 0 , bytecountm , module )
CALLEE	1347:8	1347:8	16	TIFFReadRawStripOrTile2
LEAF_NODE	1347:8	1347:8	17	TIFFReadRawStripOrTile2
LEAF_NODE	1347:31	1347:31	16	(
ARGUMENT	1347:32	1347:32	16	tif
FIELD	1347:32	1347:32	17	tif
LEAF_NODE	1347:32	1347:32	18	tif
LEAF_NODE	1347:35	1347:35	16	,
ARGUMENT	1347:37	1347:37	16	tile
FIELD	1347:37	1347:37	17	tile
LEAF_NODE	1347:37	1347:37	18	tile
LEAF_NODE	1347:41	1347:41	16	,
ARGUMENT	1347:43	1347:43	16	0
FIELD	1347:43	1347:43	17	0
LEAF_NODE	1347:43	1347:43	18	0
LEAF_NODE	1347:44	1347:44	16	,
ARGUMENT	1348:8	1348:8	16	bytecountm
FIELD	1348:8	1348:8	17	bytecountm
LEAF_NODE	1348:8	1348:8	18	bytecountm
LEAF_NODE	1348:18	1348:18	16	,
ARGUMENT	1348:20	1348:20	16	module
FIELD	1348:20	1348:20	17	module
LEAF_NODE	1348:20	1348:20	18	module
LEAF_NODE	1348:26	1348:26	16	)
EQ_OPERATOR	1348:28	1348:28	15	!=
LEAF_NODE	1348:28	1348:28	16	!=
FIELD	1348:31	1348:31	15	bytecountm
LEAF_NODE	1348:31	1348:31	16	bytecountm
LEAF_NODE	1348:41	1348:41	13	)
STATEMENTS	1349:4	1351:4	13	
LEAF_NODE	1349:4	1349:4	14	{
STATEMENTS	1350:5	1350:5	14	
JUMP_STATEMENT	1350:5	1350:15	15	return ( 0 ) ;
KEYWORD	1350:5	1350:5	16	return
LEAF_NODE	1350:5	1350:5	17	return
DESTINATION	1350:12	1350:12	16	( 0 )
EXPR	1350:12	1350:14	17	( 0 )
LEAF_NODE	1350:12	1350:12	18	(
FIELD	1350:13	1350:13	18	0
LEAF_NODE	1350:13	1350:13	19	0
LEAF_NODE	1350:14	1350:14	18	)
LEAF_NODE	1350:15	1350:15	16	;
LEAF_NODE	1351:4	1351:4	14	}
LEAF_NODE	1352:3	1352:3	11	}
EXPR_STATEMENT	1355:24	1355:47	9	tif -> tif_rawdataoff = 0 ;
EXPR	1355:24	1355:24	10	tif -> tif_rawdataoff = 0
ASSIGN	1355:24	1355:46	11	tif -> tif_rawdataoff = 0
LVAL	1355:24	1355:24	12	tif -> tif_rawdataoff
FIELD	1355:24	1355:29	13	tif -> tif_rawdataoff
LEAF_NODE	1355:24	1355:24	14	tif
LEAF_NODE	1355:27	1355:27	14	->
LEAF_NODE	1355:29	1355:29	14	tif_rawdataoff
ASSIGN_OP	1355:44	1355:44	12	=
LEAF_NODE	1355:44	1355:44	13	=
RVAL	1355:46	1355:46	12	0
FIELD	1355:46	1355:46	13	0
LEAF_NODE	1355:46	1355:46	14	0
LEAF_NODE	1355:47	1355:47	10	;
EXPR_STATEMENT	1356:24	1356:59	9	tif -> tif_rawdataloaded = bytecountm ;
EXPR	1356:24	1356:24	10	tif -> tif_rawdataloaded = bytecountm
ASSIGN	1356:24	1356:49	11	tif -> tif_rawdataloaded = bytecountm
LVAL	1356:24	1356:24	12	tif -> tif_rawdataloaded
FIELD	1356:24	1356:29	13	tif -> tif_rawdataloaded
LEAF_NODE	1356:24	1356:24	14	tif
LEAF_NODE	1356:27	1356:27	14	->
LEAF_NODE	1356:29	1356:29	14	tif_rawdataloaded
ASSIGN_OP	1356:47	1356:47	12	=
LEAF_NODE	1356:47	1356:47	13	=
RVAL	1356:49	1356:49	12	bytecountm
FIELD	1356:49	1356:49	13	bytecountm
LEAF_NODE	1356:49	1356:49	14	bytecountm
LEAF_NODE	1356:59	1356:59	10	;
SELECTION	1358:3	1361:4	9	
KEYWORD	1358:3	1358:3	10	if
LEAF_NODE	1358:3	1358:3	11	if
LEAF_NODE	1358:6	1358:6	10	(
CONDITION	1358:7	1358:7	10	tif -> tif_rawdata != NULL && ! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1358:7	1358:7	11	tif -> tif_rawdata != NULL && ! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	1358:7	1359:28	12	tif -> tif_rawdata != NULL && ! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1358:7	1358:27	13	tif -> tif_rawdata != NULL
FIELD	1358:7	1358:12	14	tif -> tif_rawdata
LEAF_NODE	1358:7	1358:7	15	tif
LEAF_NODE	1358:10	1358:10	15	->
LEAF_NODE	1358:12	1358:12	15	tif_rawdata
EQ_OPERATOR	1358:24	1358:24	14	!=
LEAF_NODE	1358:24	1358:24	15	!=
FIELD	1358:27	1358:27	14	NULL
LEAF_NODE	1358:27	1358:27	15	NULL
LEAF_NODE	1358:32	1358:32	13	&&
EXPR	1359:28	1359:28	13	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	1359:28	1360:7	14	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1359:28	1359:28	15	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	1359:28	1359:29	16	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	1359:28	1359:28	17	!
LEAF_NODE	1359:28	1359:28	18	!
FUNCTION_CALL	1359:29	1359:62	17	isFillOrder ( tif , td -> td_fillorder )
CALLEE	1359:29	1359:29	18	isFillOrder
LEAF_NODE	1359:29	1359:29	19	isFillOrder
LEAF_NODE	1359:40	1359:40	18	(
ARGUMENT	1359:41	1359:41	18	tif
FIELD	1359:41	1359:41	19	tif
LEAF_NODE	1359:41	1359:41	20	tif
LEAF_NODE	1359:44	1359:44	18	,
ARGUMENT	1359:46	1359:46	18	td -> td_fillorder
FIELD	1359:46	1359:50	19	td -> td_fillorder
LEAF_NODE	1359:46	1359:46	20	td
LEAF_NODE	1359:48	1359:48	20	->
LEAF_NODE	1359:50	1359:50	20	td_fillorder
LEAF_NODE	1359:62	1359:62	18	)
LEAF_NODE	1359:64	1359:64	15	&&
EXPR	1360:7	1360:43	15	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	1360:7	1360:7	16	(
FIELD	1360:8	1360:13	16	tif -> tif_flags
LEAF_NODE	1360:8	1360:8	17	tif
LEAF_NODE	1360:11	1360:11	17	->
LEAF_NODE	1360:13	1360:13	17	tif_flags
LEAF_NODE	1360:23	1360:23	16	&
FIELD	1360:25	1360:25	16	TIFF_NOBITREV
LEAF_NODE	1360:25	1360:25	17	TIFF_NOBITREV
LEAF_NODE	1360:38	1360:38	16	)
EQ_OPERATOR	1360:40	1360:40	16	==
LEAF_NODE	1360:40	1360:40	17	==
FIELD	1360:43	1360:43	16	0
LEAF_NODE	1360:43	1360:43	17	0
LEAF_NODE	1360:44	1360:44	10	)
STATEMENTS	1361:4	1361:4	10	
EXPR_STATEMENT	1361:4	1362:71	11	TIFFReverseBits ( tif -> tif_rawdata , tif -> tif_rawdataloaded ) ;
EXPR	1361:4	1361:4	12	TIFFReverseBits ( tif -> tif_rawdata , tif -> tif_rawdataloaded )
FUNCTION_CALL	1361:4	1362:70	13	TIFFReverseBits ( tif -> tif_rawdata , tif -> tif_rawdataloaded )
CALLEE	1361:4	1361:4	14	TIFFReverseBits
LEAF_NODE	1361:4	1361:4	15	TIFFReverseBits
LEAF_NODE	1361:19	1361:19	14	(
ARGUMENT	1361:20	1361:20	14	tif -> tif_rawdata
FIELD	1361:20	1361:25	15	tif -> tif_rawdata
LEAF_NODE	1361:20	1361:20	16	tif
LEAF_NODE	1361:23	1361:23	16	->
LEAF_NODE	1361:25	1361:25	16	tif_rawdata
LEAF_NODE	1361:36	1361:36	14	,
ARGUMENT	1362:48	1362:48	14	tif -> tif_rawdataloaded
FIELD	1362:48	1362:53	15	tif -> tif_rawdataloaded
LEAF_NODE	1362:48	1362:48	16	tif
LEAF_NODE	1362:51	1362:51	16	->
LEAF_NODE	1362:53	1362:53	16	tif_rawdataloaded
LEAF_NODE	1362:70	1362:70	14	)
LEAF_NODE	1362:71	1362:71	12	;
LEAF_NODE	1363:2	1363:2	8	}
LEAF_NODE	1364:1	1364:1	5	}
JUMP_STATEMENT	1365:1	1365:34	3	return ( TIFFStartTile ( tif , tile ) ) ;
KEYWORD	1365:1	1365:1	4	return
LEAF_NODE	1365:1	1365:1	5	return
DESTINATION	1365:8	1365:8	4	( TIFFStartTile ( tif , tile ) )
EXPR	1365:8	1365:33	5	( TIFFStartTile ( tif , tile ) )
LEAF_NODE	1365:8	1365:8	6	(
FUNCTION_CALL	1365:9	1365:32	6	TIFFStartTile ( tif , tile )
CALLEE	1365:9	1365:9	7	TIFFStartTile
LEAF_NODE	1365:9	1365:9	8	TIFFStartTile
LEAF_NODE	1365:22	1365:22	7	(
ARGUMENT	1365:23	1365:23	7	tif
FIELD	1365:23	1365:23	8	tif
LEAF_NODE	1365:23	1365:23	9	tif
LEAF_NODE	1365:26	1365:26	7	,
ARGUMENT	1365:28	1365:28	7	tile
FIELD	1365:28	1365:28	8	tile
LEAF_NODE	1365:28	1365:28	9	tile
LEAF_NODE	1365:32	1365:32	7	)
LEAF_NODE	1365:33	1365:33	6	)
LEAF_NODE	1365:34	1365:34	4	;
LEAF_NODE	1366:0	1366:0	2	}
FUNCTION_DEF	1377:0	1415:0	1	
RETURN_TYPE	1377:0	1377:0	2	int
TYPE_NAME	1377:0	1377:0	3	int
LEAF_NODE	1377:0	1377:0	4	int
FUNCTION_NAME	1378:0	1378:0	2	TIFFReadBufferSetup
LEAF_NODE	1378:0	1378:0	3	TIFFReadBufferSetup
PARAMETER_LIST	1378:19	1378:54	2	( TIFF * tif , void * bp , tmsize_t size )
LEAF_NODE	1378:19	1378:19	3	(
PARAMETER_DECL	1378:20	1378:26	3	TIFF * tif
TYPE	1378:20	1378:24	4	TIFF *
TYPE_NAME	1378:20	1378:20	5	TIFF
LEAF_NODE	1378:20	1378:20	6	TIFF
POINTER	1378:24	1378:24	5	*
LEAF_NODE	1378:24	1378:24	6	*
NAME	1378:26	1378:26	4	tif
LEAF_NODE	1378:26	1378:26	5	tif
LEAF_NODE	1378:29	1378:29	3	,
PARAMETER_DECL	1378:31	1378:37	3	void * bp
TYPE	1378:31	1378:35	4	void *
TYPE_NAME	1378:31	1378:31	5	void
LEAF_NODE	1378:31	1378:31	6	void
POINTER	1378:35	1378:35	5	*
LEAF_NODE	1378:35	1378:35	6	*
NAME	1378:37	1378:37	4	bp
LEAF_NODE	1378:37	1378:37	5	bp
LEAF_NODE	1378:39	1378:39	3	,
PARAMETER_DECL	1378:41	1378:50	3	tmsize_t size
TYPE	1378:41	1378:41	4	tmsize_t
TYPE_NAME	1378:41	1378:41	5	tmsize_t
LEAF_NODE	1378:41	1378:41	6	tmsize_t
NAME	1378:50	1378:50	4	size
LEAF_NODE	1378:50	1378:50	5	size
LEAF_NODE	1378:54	1378:54	3	)
LEAF_NODE	1379:0	1379:0	2	{
STATEMENTS	1380:1	1414:1	2	
LEAF_NODE	1380:1	1380:1	3	static
SIMPLE_DECL	1380:8	1380:51	3	const char [ ] module ; module = "TIFFReadBufferSetup" ;
VAR_DECL	1380:8	1380:19	4	const char [ ] module ; module = "TIFFReadBufferSetup"
TYPE	1380:8	1380:25	5	const char [ ]
TYPE_NAME	1380:8	1380:14	6	const char
LEAF_NODE	1380:8	1380:8	7	const
LEAF_NODE	1380:14	1380:14	7	char
TYPE_SUFFIX	1380:25	1380:26	6	[ ]
LEAF_NODE	1380:25	1380:25	7	[
LEAF_NODE	1380:26	1380:26	7	]
NAME	1380:19	1380:19	5	module
LEAF_NODE	1380:19	1380:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1380:19	1380:19	5	module = "TIFFReadBufferSetup"
ASSIGN	1380:19	1380:30	6	module = "TIFFReadBufferSetup"
LVAL	1380:19	1380:19	7	module
NAME	1380:19	1380:19	8	module
LEAF_NODE	1380:19	1380:19	9	module
ASSIGN_OP	1380:28	1380:28	7	=
LEAF_NODE	1380:28	1380:28	8	=
RVAL	1380:30	1380:30	7	"TIFFReadBufferSetup"
FIELD	1380:30	1380:30	8	"TIFFReadBufferSetup"
LEAF_NODE	1380:30	1380:30	9	"TIFFReadBufferSetup"
LEAF_NODE	1380:51	1380:51	4	;
EXPR_STATEMENT	1382:1	1382:43	3	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 ) ;
EXPR	1382:1	1382:1	4	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
FUNCTION_CALL	1382:1	1382:42	5	assert ( ( tif -> tif_flags & TIFF_NOREADRAW ) == 0 )
CALLEE	1382:1	1382:1	6	assert
LEAF_NODE	1382:1	1382:1	7	assert
LEAF_NODE	1382:7	1382:7	6	(
ARGUMENT	1382:8	1382:41	6	( tif -> tif_flags & TIFF_NOREADRAW ) == 0
LEAF_NODE	1382:8	1382:8	7	(
FIELD	1382:9	1382:14	7	tif -> tif_flags
LEAF_NODE	1382:9	1382:9	8	tif
LEAF_NODE	1382:12	1382:12	8	->
LEAF_NODE	1382:14	1382:14	8	tif_flags
LEAF_NODE	1382:23	1382:23	7	&
FIELD	1382:24	1382:24	7	TIFF_NOREADRAW
LEAF_NODE	1382:24	1382:24	8	TIFF_NOREADRAW
LEAF_NODE	1382:38	1382:38	7	)
EQ_OPERATOR	1382:39	1382:39	7	==
LEAF_NODE	1382:39	1382:39	8	==
FIELD	1382:41	1382:41	7	0
LEAF_NODE	1382:41	1382:41	8	0
LEAF_NODE	1382:42	1382:42	6	)
LEAF_NODE	1382:43	1382:43	4	;
EXPR_STATEMENT	1383:1	1383:35	3	tif -> tif_flags &= ~TIFF_BUFFERMMAP ;
EXPR	1383:1	1383:1	4	tif -> tif_flags &= ~TIFF_BUFFERMMAP
ASSIGN	1383:1	1383:19	5	tif -> tif_flags &= ~TIFF_BUFFERMMAP
LVAL	1383:1	1383:1	6	tif -> tif_flags
FIELD	1383:1	1383:6	7	tif -> tif_flags
LEAF_NODE	1383:1	1383:1	8	tif
LEAF_NODE	1383:4	1383:4	8	->
LEAF_NODE	1383:6	1383:6	8	tif_flags
ASSIGN_OP	1383:16	1383:16	6	&=
LEAF_NODE	1383:16	1383:16	7	&=
RVAL	1383:19	1383:19	6	~TIFF_BUFFERMMAP
FIELD	1383:19	1383:19	7	~TIFF_BUFFERMMAP
LEAF_NODE	1383:19	1383:19	8	~TIFF_BUFFERMMAP
LEAF_NODE	1383:35	1383:35	4	;
SELECTION	1385:1	1385:23	3	
KEYWORD	1385:1	1385:1	4	if
LEAF_NODE	1385:1	1385:1	5	if
LEAF_NODE	1385:4	1385:4	4	(
CONDITION	1385:5	1385:5	4	tif -> tif_rawdata
EXPR	1385:5	1385:5	5	tif -> tif_rawdata
FIELD	1385:5	1385:10	6	tif -> tif_rawdata
LEAF_NODE	1385:5	1385:5	7	tif
LEAF_NODE	1385:8	1385:8	7	->
LEAF_NODE	1385:10	1385:10	7	tif_rawdata
LEAF_NODE	1385:21	1385:21	4	)
STATEMENTS	1385:23	1390:1	4	
LEAF_NODE	1385:23	1385:23	5	{
STATEMENTS	1386:2	1389:2	5	
SELECTION	1386:2	1387:3	6	
KEYWORD	1386:2	1386:2	7	if
LEAF_NODE	1386:2	1386:2	8	if
LEAF_NODE	1386:5	1386:5	7	(
CONDITION	1386:6	1386:6	7	tif -> tif_flags & TIFF_MYBUFFER
EXPR	1386:6	1386:23	8	tif -> tif_flags & TIFF_MYBUFFER
FIELD	1386:6	1386:11	9	tif -> tif_flags
LEAF_NODE	1386:6	1386:6	10	tif
LEAF_NODE	1386:9	1386:9	10	->
LEAF_NODE	1386:11	1386:11	10	tif_flags
LEAF_NODE	1386:21	1386:21	9	&
FIELD	1386:23	1386:23	9	TIFF_MYBUFFER
LEAF_NODE	1386:23	1386:23	10	TIFF_MYBUFFER
LEAF_NODE	1386:36	1386:36	7	)
STATEMENTS	1387:3	1387:3	7	
EXPR_STATEMENT	1387:3	1387:30	8	_TIFFfree ( tif -> tif_rawdata ) ;
EXPR	1387:3	1387:3	9	_TIFFfree ( tif -> tif_rawdata )
FUNCTION_CALL	1387:3	1387:29	10	_TIFFfree ( tif -> tif_rawdata )
CALLEE	1387:3	1387:3	11	_TIFFfree
LEAF_NODE	1387:3	1387:3	12	_TIFFfree
LEAF_NODE	1387:12	1387:12	11	(
ARGUMENT	1387:13	1387:13	11	tif -> tif_rawdata
FIELD	1387:13	1387:18	12	tif -> tif_rawdata
LEAF_NODE	1387:13	1387:13	13	tif
LEAF_NODE	1387:16	1387:16	13	->
LEAF_NODE	1387:18	1387:18	13	tif_rawdata
LEAF_NODE	1387:29	1387:29	11	)
LEAF_NODE	1387:30	1387:30	9	;
EXPR_STATEMENT	1388:2	1388:25	6	tif -> tif_rawdata = NULL ;
EXPR	1388:2	1388:2	7	tif -> tif_rawdata = NULL
ASSIGN	1388:2	1388:21	8	tif -> tif_rawdata = NULL
LVAL	1388:2	1388:2	9	tif -> tif_rawdata
FIELD	1388:2	1388:7	10	tif -> tif_rawdata
LEAF_NODE	1388:2	1388:2	11	tif
LEAF_NODE	1388:5	1388:5	11	->
LEAF_NODE	1388:7	1388:7	11	tif_rawdata
ASSIGN_OP	1388:19	1388:19	9	=
LEAF_NODE	1388:19	1388:19	10	=
RVAL	1388:21	1388:21	9	NULL
FIELD	1388:21	1388:21	10	NULL
LEAF_NODE	1388:21	1388:21	11	NULL
LEAF_NODE	1388:25	1388:25	7	;
EXPR_STATEMENT	1389:2	1389:26	6	tif -> tif_rawdatasize = 0 ;
EXPR	1389:2	1389:2	7	tif -> tif_rawdatasize = 0
ASSIGN	1389:2	1389:25	8	tif -> tif_rawdatasize = 0
LVAL	1389:2	1389:2	9	tif -> tif_rawdatasize
FIELD	1389:2	1389:7	10	tif -> tif_rawdatasize
LEAF_NODE	1389:2	1389:2	11	tif
LEAF_NODE	1389:5	1389:5	11	->
LEAF_NODE	1389:7	1389:7	11	tif_rawdatasize
ASSIGN_OP	1389:23	1389:23	9	=
LEAF_NODE	1389:23	1389:23	10	=
RVAL	1389:25	1389:25	9	0
FIELD	1389:25	1389:25	10	0
LEAF_NODE	1389:25	1389:25	11	0
LEAF_NODE	1389:26	1389:26	7	;
LEAF_NODE	1390:1	1390:1	5	}
SELECTION	1391:1	1391:9	3	
KEYWORD	1391:1	1391:1	4	if
LEAF_NODE	1391:1	1391:1	5	if
LEAF_NODE	1391:4	1391:4	4	(
CONDITION	1391:5	1391:5	4	bp
EXPR	1391:5	1391:5	5	bp
FIELD	1391:5	1391:5	6	bp
LEAF_NODE	1391:5	1391:5	7	bp
LEAF_NODE	1391:7	1391:7	4	)
STATEMENTS	1391:9	1395:1	4	
LEAF_NODE	1391:9	1391:9	5	{
STATEMENTS	1392:2	1394:2	5	
EXPR_STATEMENT	1392:2	1392:29	6	tif -> tif_rawdatasize = size ;
EXPR	1392:2	1392:2	7	tif -> tif_rawdatasize = size
ASSIGN	1392:2	1392:25	8	tif -> tif_rawdatasize = size
LVAL	1392:2	1392:2	9	tif -> tif_rawdatasize
FIELD	1392:2	1392:7	10	tif -> tif_rawdatasize
LEAF_NODE	1392:2	1392:2	11	tif
LEAF_NODE	1392:5	1392:5	11	->
LEAF_NODE	1392:7	1392:7	11	tif_rawdatasize
ASSIGN_OP	1392:23	1392:23	9	=
LEAF_NODE	1392:23	1392:23	10	=
RVAL	1392:25	1392:25	9	size
FIELD	1392:25	1392:25	10	size
LEAF_NODE	1392:25	1392:25	11	size
LEAF_NODE	1392:29	1392:29	7	;
EXPR_STATEMENT	1393:2	1393:32	6	tif -> tif_rawdata = ( uint8 * ) bp ;
EXPR	1393:2	1393:2	7	tif -> tif_rawdata = ( uint8 * ) bp
ASSIGN	1393:2	1393:21	8	tif -> tif_rawdata = ( uint8 * ) bp
LVAL	1393:2	1393:2	9	tif -> tif_rawdata
FIELD	1393:2	1393:7	10	tif -> tif_rawdata
LEAF_NODE	1393:2	1393:2	11	tif
LEAF_NODE	1393:5	1393:5	11	->
LEAF_NODE	1393:7	1393:7	11	tif_rawdata
ASSIGN_OP	1393:19	1393:19	9	=
LEAF_NODE	1393:19	1393:19	10	=
RVAL	1393:21	1393:30	9	( uint8 * ) bp
LEAF_NODE	1393:21	1393:21	10	(
TYPE_NAME	1393:22	1393:22	10	uint8
LEAF_NODE	1393:22	1393:22	11	uint8
LEAF_NODE	1393:27	1393:27	10	*
LEAF_NODE	1393:28	1393:28	10	)
FIELD	1393:30	1393:30	10	bp
LEAF_NODE	1393:30	1393:30	11	bp
LEAF_NODE	1393:32	1393:32	7	;
EXPR_STATEMENT	1394:2	1394:34	6	tif -> tif_flags &= ~TIFF_MYBUFFER ;
EXPR	1394:2	1394:2	7	tif -> tif_flags &= ~TIFF_MYBUFFER
ASSIGN	1394:2	1394:20	8	tif -> tif_flags &= ~TIFF_MYBUFFER
LVAL	1394:2	1394:2	9	tif -> tif_flags
FIELD	1394:2	1394:7	10	tif -> tif_flags
LEAF_NODE	1394:2	1394:2	11	tif
LEAF_NODE	1394:5	1394:5	11	->
LEAF_NODE	1394:7	1394:7	11	tif_flags
ASSIGN_OP	1394:17	1394:17	9	&=
LEAF_NODE	1394:17	1394:17	10	&=
RVAL	1394:20	1394:20	9	~TIFF_MYBUFFER
FIELD	1394:20	1394:20	10	~TIFF_MYBUFFER
LEAF_NODE	1394:20	1394:20	11	~TIFF_MYBUFFER
LEAF_NODE	1394:34	1394:34	7	;
LEAF_NODE	1395:1	1395:1	5	}
SELECTION	1395:3	1395:8	3	
KEYWORD	1395:3	1395:3	4	else
LEAF_NODE	1395:3	1395:3	5	else
STATEMENTS	1395:8	1406:1	4	
LEAF_NODE	1395:8	1395:8	5	{
STATEMENTS	1396:2	1405:2	5	
EXPR_STATEMENT	1396:2	1396:69	6	tif -> tif_rawdatasize = ( tmsize_t ) TIFFroundup_64 ( ( uint64 ) size , 1024 ) ;
EXPR	1396:2	1396:2	7	tif -> tif_rawdatasize = ( tmsize_t ) TIFFroundup_64 ( ( uint64 ) size , 1024 )
ASSIGN	1396:2	1396:25	8	tif -> tif_rawdatasize = ( tmsize_t ) TIFFroundup_64 ( ( uint64 ) size , 1024 )
LVAL	1396:2	1396:2	9	tif -> tif_rawdatasize
FIELD	1396:2	1396:7	10	tif -> tif_rawdatasize
LEAF_NODE	1396:2	1396:2	11	tif
LEAF_NODE	1396:5	1396:5	11	->
LEAF_NODE	1396:7	1396:7	11	tif_rawdatasize
ASSIGN_OP	1396:23	1396:23	9	=
LEAF_NODE	1396:23	1396:23	10	=
RVAL	1396:25	1396:35	9	( tmsize_t ) TIFFroundup_64 ( ( uint64 ) size , 1024 )
LEAF_NODE	1396:25	1396:25	10	(
TYPE_NAME	1396:26	1396:26	10	tmsize_t
LEAF_NODE	1396:26	1396:26	11	tmsize_t
LEAF_NODE	1396:34	1396:34	10	)
FUNCTION_CALL	1396:35	1396:68	10	TIFFroundup_64 ( ( uint64 ) size , 1024 )
CALLEE	1396:35	1396:35	11	TIFFroundup_64
LEAF_NODE	1396:35	1396:35	12	TIFFroundup_64
LEAF_NODE	1396:49	1396:49	11	(
ARGUMENT	1396:50	1396:58	11	( uint64 ) size
LEAF_NODE	1396:50	1396:50	12	(
TYPE_NAME	1396:51	1396:51	12	uint64
LEAF_NODE	1396:51	1396:51	13	uint64
LEAF_NODE	1396:57	1396:57	12	)
FIELD	1396:58	1396:58	12	size
LEAF_NODE	1396:58	1396:58	13	size
LEAF_NODE	1396:62	1396:62	11	,
ARGUMENT	1396:64	1396:64	11	1024
FIELD	1396:64	1396:64	12	1024
LEAF_NODE	1396:64	1396:64	13	1024
LEAF_NODE	1396:68	1396:68	11	)
LEAF_NODE	1396:69	1396:69	7	;
SELECTION	1397:2	1397:31	6	
KEYWORD	1397:2	1397:2	7	if
LEAF_NODE	1397:2	1397:2	8	if
LEAF_NODE	1397:5	1397:5	7	(
CONDITION	1397:6	1397:6	7	tif -> tif_rawdatasize == 0
EXPR	1397:6	1397:28	8	tif -> tif_rawdatasize == 0
FIELD	1397:6	1397:11	9	tif -> tif_rawdatasize
LEAF_NODE	1397:6	1397:6	10	tif
LEAF_NODE	1397:9	1397:9	10	->
LEAF_NODE	1397:11	1397:11	10	tif_rawdatasize
EQ_OPERATOR	1397:26	1397:26	9	==
LEAF_NODE	1397:26	1397:26	10	==
FIELD	1397:28	1397:28	9	0
LEAF_NODE	1397:28	1397:28	10	0
LEAF_NODE	1397:29	1397:29	7	)
STATEMENTS	1397:31	1401:2	7	
LEAF_NODE	1397:31	1397:31	8	{
STATEMENTS	1398:6	1400:6	8	
EXPR_STATEMENT	1398:6	1399:27	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid buffer size" ) ;
EXPR	1398:6	1398:6	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid buffer size" )
FUNCTION_CALL	1398:6	1399:26	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid buffer size" )
CALLEE	1398:6	1398:6	12	TIFFErrorExt
LEAF_NODE	1398:6	1398:6	13	TIFFErrorExt
LEAF_NODE	1398:18	1398:18	12	(
ARGUMENT	1398:19	1398:19	12	tif -> tif_clientdata
FIELD	1398:19	1398:24	13	tif -> tif_clientdata
LEAF_NODE	1398:19	1398:19	14	tif
LEAF_NODE	1398:22	1398:22	14	->
LEAF_NODE	1398:24	1398:24	14	tif_clientdata
LEAF_NODE	1398:38	1398:38	12	,
ARGUMENT	1398:40	1398:40	12	module
FIELD	1398:40	1398:40	13	module
LEAF_NODE	1398:40	1398:40	14	module
LEAF_NODE	1398:46	1398:46	12	,
ARGUMENT	1399:5	1399:5	12	"Invalid buffer size"
FIELD	1399:5	1399:5	13	"Invalid buffer size"
LEAF_NODE	1399:5	1399:5	14	"Invalid buffer size"
LEAF_NODE	1399:26	1399:26	12	)
LEAF_NODE	1399:27	1399:27	10	;
JUMP_STATEMENT	1400:6	1400:16	9	return ( 0 ) ;
KEYWORD	1400:6	1400:6	10	return
LEAF_NODE	1400:6	1400:6	11	return
DESTINATION	1400:13	1400:13	10	( 0 )
EXPR	1400:13	1400:15	11	( 0 )
LEAF_NODE	1400:13	1400:13	12	(
FIELD	1400:14	1400:14	12	0
LEAF_NODE	1400:14	1400:14	13	0
LEAF_NODE	1400:15	1400:15	12	)
LEAF_NODE	1400:16	1400:16	10	;
LEAF_NODE	1401:2	1401:2	8	}
EXPR_STATEMENT	1404:2	1404:66	6	tif -> tif_rawdata = ( uint8 * ) _TIFFcalloc ( 1 , tif -> tif_rawdatasize ) ;
EXPR	1404:2	1404:2	7	tif -> tif_rawdata = ( uint8 * ) _TIFFcalloc ( 1 , tif -> tif_rawdatasize )
ASSIGN	1404:2	1404:21	8	tif -> tif_rawdata = ( uint8 * ) _TIFFcalloc ( 1 , tif -> tif_rawdatasize )
LVAL	1404:2	1404:2	9	tif -> tif_rawdata
FIELD	1404:2	1404:7	10	tif -> tif_rawdata
LEAF_NODE	1404:2	1404:2	11	tif
LEAF_NODE	1404:5	1404:5	11	->
LEAF_NODE	1404:7	1404:7	11	tif_rawdata
ASSIGN_OP	1404:19	1404:19	9	=
LEAF_NODE	1404:19	1404:19	10	=
RVAL	1404:21	1404:30	9	( uint8 * ) _TIFFcalloc ( 1 , tif -> tif_rawdatasize )
LEAF_NODE	1404:21	1404:21	10	(
TYPE_NAME	1404:22	1404:22	10	uint8
LEAF_NODE	1404:22	1404:22	11	uint8
LEAF_NODE	1404:27	1404:27	10	*
LEAF_NODE	1404:28	1404:28	10	)
FUNCTION_CALL	1404:30	1404:65	10	_TIFFcalloc ( 1 , tif -> tif_rawdatasize )
CALLEE	1404:30	1404:30	11	_TIFFcalloc
LEAF_NODE	1404:30	1404:30	12	_TIFFcalloc
LEAF_NODE	1404:41	1404:41	11	(
ARGUMENT	1404:42	1404:42	11	1
FIELD	1404:42	1404:42	12	1
LEAF_NODE	1404:42	1404:42	13	1
LEAF_NODE	1404:43	1404:43	11	,
ARGUMENT	1404:45	1404:45	11	tif -> tif_rawdatasize
FIELD	1404:45	1404:50	12	tif -> tif_rawdatasize
LEAF_NODE	1404:45	1404:45	13	tif
LEAF_NODE	1404:48	1404:48	13	->
LEAF_NODE	1404:50	1404:50	13	tif_rawdatasize
LEAF_NODE	1404:65	1404:65	11	)
LEAF_NODE	1404:66	1404:66	7	;
EXPR_STATEMENT	1405:2	1405:33	6	tif -> tif_flags |= TIFF_MYBUFFER ;
EXPR	1405:2	1405:2	7	tif -> tif_flags |= TIFF_MYBUFFER
ASSIGN	1405:2	1405:20	8	tif -> tif_flags |= TIFF_MYBUFFER
LVAL	1405:2	1405:2	9	tif -> tif_flags
FIELD	1405:2	1405:7	10	tif -> tif_flags
LEAF_NODE	1405:2	1405:2	11	tif
LEAF_NODE	1405:5	1405:5	11	->
LEAF_NODE	1405:7	1405:7	11	tif_flags
ASSIGN_OP	1405:17	1405:17	9	|=
LEAF_NODE	1405:17	1405:17	10	|=
RVAL	1405:20	1405:20	9	TIFF_MYBUFFER
FIELD	1405:20	1405:20	10	TIFF_MYBUFFER
LEAF_NODE	1405:20	1405:20	11	TIFF_MYBUFFER
LEAF_NODE	1405:33	1405:33	7	;
LEAF_NODE	1406:1	1406:1	5	}
SELECTION	1407:1	1407:31	3	
KEYWORD	1407:1	1407:1	4	if
LEAF_NODE	1407:1	1407:1	5	if
LEAF_NODE	1407:4	1407:4	4	(
CONDITION	1407:5	1407:5	4	tif -> tif_rawdata == NULL
EXPR	1407:5	1407:25	5	tif -> tif_rawdata == NULL
FIELD	1407:5	1407:10	6	tif -> tif_rawdata
LEAF_NODE	1407:5	1407:5	7	tif
LEAF_NODE	1407:8	1407:8	7	->
LEAF_NODE	1407:10	1407:10	7	tif_rawdata
EQ_OPERATOR	1407:22	1407:22	6	==
LEAF_NODE	1407:22	1407:22	7	==
FIELD	1407:25	1407:25	6	NULL
LEAF_NODE	1407:25	1407:25	7	NULL
LEAF_NODE	1407:29	1407:29	4	)
STATEMENTS	1407:31	1413:1	4	
LEAF_NODE	1407:31	1407:31	5	{
STATEMENTS	1408:2	1412:2	5	
EXPR_STATEMENT	1408:2	1410:35	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for data buffer at scanline %lu" , ( unsigned long ) tif -> tif_row ) ;
EXPR	1408:2	1408:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for data buffer at scanline %lu" , ( unsigned long ) tif -> tif_row )
FUNCTION_CALL	1408:2	1410:34	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for data buffer at scanline %lu" , ( unsigned long ) tif -> tif_row )
CALLEE	1408:2	1408:2	9	TIFFErrorExt
LEAF_NODE	1408:2	1408:2	10	TIFFErrorExt
LEAF_NODE	1408:14	1408:14	9	(
ARGUMENT	1408:15	1408:15	9	tif -> tif_clientdata
FIELD	1408:15	1408:20	10	tif -> tif_clientdata
LEAF_NODE	1408:15	1408:15	11	tif
LEAF_NODE	1408:18	1408:18	11	->
LEAF_NODE	1408:20	1408:20	11	tif_clientdata
LEAF_NODE	1408:34	1408:34	9	,
ARGUMENT	1408:36	1408:36	9	module
FIELD	1408:36	1408:36	10	module
LEAF_NODE	1408:36	1408:36	11	module
LEAF_NODE	1408:42	1408:42	9	,
ARGUMENT	1409:6	1409:6	9	"No space for data buffer at scanline %lu"
FIELD	1409:6	1409:6	10	"No space for data buffer at scanline %lu"
LEAF_NODE	1409:6	1409:6	11	"No space for data buffer at scanline %lu"
LEAF_NODE	1409:48	1409:48	9	,
ARGUMENT	1410:6	1410:22	9	( unsigned long ) tif -> tif_row
LEAF_NODE	1410:6	1410:6	10	(
TYPE_NAME	1410:7	1410:16	10	unsigned long
LEAF_NODE	1410:7	1410:7	11	unsigned
LEAF_NODE	1410:16	1410:16	11	long
LEAF_NODE	1410:20	1410:20	10	)
FIELD	1410:22	1410:27	10	tif -> tif_row
LEAF_NODE	1410:22	1410:22	11	tif
LEAF_NODE	1410:25	1410:25	11	->
LEAF_NODE	1410:27	1410:27	11	tif_row
LEAF_NODE	1410:34	1410:34	9	)
LEAF_NODE	1410:35	1410:35	7	;
EXPR_STATEMENT	1411:2	1411:26	6	tif -> tif_rawdatasize = 0 ;
EXPR	1411:2	1411:2	7	tif -> tif_rawdatasize = 0
ASSIGN	1411:2	1411:25	8	tif -> tif_rawdatasize = 0
LVAL	1411:2	1411:2	9	tif -> tif_rawdatasize
FIELD	1411:2	1411:7	10	tif -> tif_rawdatasize
LEAF_NODE	1411:2	1411:2	11	tif
LEAF_NODE	1411:5	1411:5	11	->
LEAF_NODE	1411:7	1411:7	11	tif_rawdatasize
ASSIGN_OP	1411:23	1411:23	9	=
LEAF_NODE	1411:23	1411:23	10	=
RVAL	1411:25	1411:25	9	0
FIELD	1411:25	1411:25	10	0
LEAF_NODE	1411:25	1411:25	11	0
LEAF_NODE	1411:26	1411:26	7	;
JUMP_STATEMENT	1412:2	1412:12	6	return ( 0 ) ;
KEYWORD	1412:2	1412:2	7	return
LEAF_NODE	1412:2	1412:2	8	return
DESTINATION	1412:9	1412:9	7	( 0 )
EXPR	1412:9	1412:11	8	( 0 )
LEAF_NODE	1412:9	1412:9	9	(
FIELD	1412:10	1412:10	9	0
LEAF_NODE	1412:10	1412:10	10	0
LEAF_NODE	1412:11	1412:11	9	)
LEAF_NODE	1412:12	1412:12	7	;
LEAF_NODE	1413:1	1413:1	5	}
JUMP_STATEMENT	1414:1	1414:11	3	return ( 1 ) ;
KEYWORD	1414:1	1414:1	4	return
LEAF_NODE	1414:1	1414:1	5	return
DESTINATION	1414:8	1414:8	4	( 1 )
EXPR	1414:8	1414:10	5	( 1 )
LEAF_NODE	1414:8	1414:8	6	(
FIELD	1414:9	1414:9	6	1
LEAF_NODE	1414:9	1414:9	7	1
LEAF_NODE	1414:10	1414:10	6	)
LEAF_NODE	1414:11	1414:11	4	;
LEAF_NODE	1415:0	1415:0	2	}
FUNCTION_DEF	1421:0	1450:0	1	
RETURN_TYPE	1421:0	1421:7	2	static int
LEAF_NODE	1421:0	1421:0	3	static
TYPE_NAME	1421:7	1421:7	3	int
LEAF_NODE	1421:7	1421:7	4	int
FUNCTION_NAME	1422:0	1422:0	2	TIFFStartStrip
LEAF_NODE	1422:0	1422:0	3	TIFFStartStrip
PARAMETER_LIST	1422:14	1422:38	2	( TIFF * tif , uint32 strip )
LEAF_NODE	1422:14	1422:14	3	(
PARAMETER_DECL	1422:15	1422:21	3	TIFF * tif
TYPE	1422:15	1422:19	4	TIFF *
TYPE_NAME	1422:15	1422:15	5	TIFF
LEAF_NODE	1422:15	1422:15	6	TIFF
POINTER	1422:19	1422:19	5	*
LEAF_NODE	1422:19	1422:19	6	*
NAME	1422:21	1422:21	4	tif
LEAF_NODE	1422:21	1422:21	5	tif
LEAF_NODE	1422:24	1422:24	3	,
PARAMETER_DECL	1422:26	1422:33	3	uint32 strip
TYPE	1422:26	1422:26	4	uint32
TYPE_NAME	1422:26	1422:26	5	uint32
LEAF_NODE	1422:26	1422:26	6	uint32
NAME	1422:33	1422:33	4	strip
LEAF_NODE	1422:33	1422:33	5	strip
LEAF_NODE	1422:38	1422:38	3	)
LEAF_NODE	1423:0	1423:0	2	{
STATEMENTS	1424:1	1448:1	2	
SIMPLE_DECL	1424:1	1424:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1424:1	1424:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1424:1	1424:15	5	TIFFDirectory *
TYPE_NAME	1424:1	1424:1	6	TIFFDirectory
LEAF_NODE	1424:1	1424:1	7	TIFFDirectory
POINTER	1424:15	1424:15	6	*
LEAF_NODE	1424:15	1424:15	7	*
NAME	1424:16	1424:16	5	td
LEAF_NODE	1424:16	1424:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1424:16	1424:16	5	td = & tif -> tif_dir
ASSIGN	1424:16	1424:21	6	td = & tif -> tif_dir
LVAL	1424:16	1424:16	7	td
NAME	1424:16	1424:16	8	td
LEAF_NODE	1424:16	1424:16	9	td
ASSIGN_OP	1424:19	1424:19	7	=
LEAF_NODE	1424:19	1424:19	8	=
RVAL	1424:21	1424:21	7	& tif -> tif_dir
UNARY_EXPR	1424:21	1424:22	8	& tif -> tif_dir
UNARY_OPERATOR	1424:21	1424:21	9	&
LEAF_NODE	1424:21	1424:21	10	&
FIELD	1424:22	1424:27	9	tif -> tif_dir
LEAF_NODE	1424:22	1424:22	10	tif
LEAF_NODE	1424:25	1424:25	10	->
LEAF_NODE	1424:27	1424:27	10	tif_dir
LEAF_NODE	1424:34	1424:34	4	;
SELECTION	1426:1	1426:46	3	
KEYWORD	1426:1	1426:1	4	if
LEAF_NODE	1426:1	1426:1	5	if
LEAF_NODE	1426:4	1426:4	4	(
CONDITION	1426:5	1426:5	4	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
EXPR	1426:5	1426:43	5	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
LEAF_NODE	1426:5	1426:5	6	(
FIELD	1426:6	1426:11	6	tif -> tif_flags
LEAF_NODE	1426:6	1426:6	7	tif
LEAF_NODE	1426:9	1426:9	7	->
LEAF_NODE	1426:11	1426:11	7	tif_flags
LEAF_NODE	1426:21	1426:21	6	&
FIELD	1426:23	1426:23	6	TIFF_CODERSETUP
LEAF_NODE	1426:23	1426:23	7	TIFF_CODERSETUP
LEAF_NODE	1426:38	1426:38	6	)
EQ_OPERATOR	1426:40	1426:40	6	==
LEAF_NODE	1426:40	1426:40	7	==
FIELD	1426:43	1426:43	6	0
LEAF_NODE	1426:43	1426:43	7	0
LEAF_NODE	1426:44	1426:44	4	)
STATEMENTS	1426:46	1430:1	4	
LEAF_NODE	1426:46	1426:46	5	{
STATEMENTS	1427:2	1429:2	5	
SELECTION	1427:2	1428:3	6	
KEYWORD	1427:2	1427:2	7	if
LEAF_NODE	1427:2	1427:2	8	if
LEAF_NODE	1427:5	1427:5	7	(
CONDITION	1427:6	1427:6	7	! ( * tif -> tif_setupdecode ) ( tif )
EXPR	1427:6	1427:6	8	! ( * tif -> tif_setupdecode ) ( tif )
UNARY_EXPR	1427:6	1427:7	9	! ( * tif -> tif_setupdecode ) ( tif )
UNARY_OPERATOR	1427:6	1427:6	10	!
LEAF_NODE	1427:6	1427:6	11	!
FUNCTION_CALL	1427:7	1427:34	10	( * tif -> tif_setupdecode ) ( tif )
CALLEE	1427:7	1427:29	11	( * tif -> tif_setupdecode )
LEAF_NODE	1427:7	1427:7	12	(
UNARY_EXPR	1427:8	1427:9	12	* tif -> tif_setupdecode
UNARY_OPERATOR	1427:8	1427:8	13	*
LEAF_NODE	1427:8	1427:8	14	*
FIELD	1427:9	1427:14	13	tif -> tif_setupdecode
LEAF_NODE	1427:9	1427:9	14	tif
LEAF_NODE	1427:12	1427:12	14	->
LEAF_NODE	1427:14	1427:14	14	tif_setupdecode
LEAF_NODE	1427:29	1427:29	12	)
LEAF_NODE	1427:30	1427:30	11	(
ARGUMENT	1427:31	1427:31	11	tif
FIELD	1427:31	1427:31	12	tif
LEAF_NODE	1427:31	1427:31	13	tif
LEAF_NODE	1427:34	1427:34	11	)
LEAF_NODE	1427:35	1427:35	7	)
STATEMENTS	1428:3	1428:3	7	
JUMP_STATEMENT	1428:3	1428:13	8	return ( 0 ) ;
KEYWORD	1428:3	1428:3	9	return
LEAF_NODE	1428:3	1428:3	10	return
DESTINATION	1428:10	1428:10	9	( 0 )
EXPR	1428:10	1428:12	10	( 0 )
LEAF_NODE	1428:10	1428:10	11	(
FIELD	1428:11	1428:11	11	0
LEAF_NODE	1428:11	1428:11	12	0
LEAF_NODE	1428:12	1428:12	11	)
LEAF_NODE	1428:13	1428:13	9	;
EXPR_STATEMENT	1429:2	1429:35	6	tif -> tif_flags |= TIFF_CODERSETUP ;
EXPR	1429:2	1429:2	7	tif -> tif_flags |= TIFF_CODERSETUP
ASSIGN	1429:2	1429:20	8	tif -> tif_flags |= TIFF_CODERSETUP
LVAL	1429:2	1429:2	9	tif -> tif_flags
FIELD	1429:2	1429:7	10	tif -> tif_flags
LEAF_NODE	1429:2	1429:2	11	tif
LEAF_NODE	1429:5	1429:5	11	->
LEAF_NODE	1429:7	1429:7	11	tif_flags
ASSIGN_OP	1429:17	1429:17	9	|=
LEAF_NODE	1429:17	1429:17	10	|=
RVAL	1429:20	1429:20	9	TIFF_CODERSETUP
FIELD	1429:20	1429:20	10	TIFF_CODERSETUP
LEAF_NODE	1429:20	1429:20	11	TIFF_CODERSETUP
LEAF_NODE	1429:35	1429:35	7	;
LEAF_NODE	1430:1	1430:1	5	}
EXPR_STATEMENT	1431:1	1431:26	3	tif -> tif_curstrip = strip ;
EXPR	1431:1	1431:1	4	tif -> tif_curstrip = strip
ASSIGN	1431:1	1431:21	5	tif -> tif_curstrip = strip
LVAL	1431:1	1431:1	6	tif -> tif_curstrip
FIELD	1431:1	1431:6	7	tif -> tif_curstrip
LEAF_NODE	1431:1	1431:1	8	tif
LEAF_NODE	1431:4	1431:4	8	->
LEAF_NODE	1431:6	1431:6	8	tif_curstrip
ASSIGN_OP	1431:19	1431:19	6	=
LEAF_NODE	1431:19	1431:19	7	=
RVAL	1431:21	1431:21	6	strip
FIELD	1431:21	1431:21	7	strip
LEAF_NODE	1431:21	1431:21	8	strip
LEAF_NODE	1431:26	1431:26	4	;
EXPR_STATEMENT	1432:1	1432:69	3	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip ;
EXPR	1432:1	1432:1	4	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
ASSIGN	1432:1	1432:16	5	tif -> tif_row = ( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LVAL	1432:1	1432:1	6	tif -> tif_row
FIELD	1432:1	1432:6	7	tif -> tif_row
LEAF_NODE	1432:1	1432:1	8	tif
LEAF_NODE	1432:4	1432:4	8	->
LEAF_NODE	1432:6	1432:6	8	tif_row
ASSIGN_OP	1432:14	1432:14	6	=
LEAF_NODE	1432:14	1432:14	7	=
RVAL	1432:16	1432:50	6	( strip % td -> td_stripsperimage ) * td -> td_rowsperstrip
LEAF_NODE	1432:16	1432:16	7	(
FIELD	1432:17	1432:17	7	strip
LEAF_NODE	1432:17	1432:17	8	strip
LEAF_NODE	1432:23	1432:23	7	%
FIELD	1432:25	1432:29	7	td -> td_stripsperimage
LEAF_NODE	1432:25	1432:25	8	td
LEAF_NODE	1432:27	1432:27	8	->
LEAF_NODE	1432:29	1432:29	8	td_stripsperimage
LEAF_NODE	1432:46	1432:46	7	)
LEAF_NODE	1432:48	1432:48	7	*
FIELD	1432:50	1432:54	7	td -> td_rowsperstrip
LEAF_NODE	1432:50	1432:50	8	td
LEAF_NODE	1432:52	1432:52	8	->
LEAF_NODE	1432:54	1432:54	8	td_rowsperstrip
LEAF_NODE	1432:69	1432:69	4	;
EXPR_STATEMENT	1433:8	1433:41	3	tif -> tif_flags &= ~TIFF_BUF4WRITE ;
EXPR	1433:8	1433:8	4	tif -> tif_flags &= ~TIFF_BUF4WRITE
ASSIGN	1433:8	1433:26	5	tif -> tif_flags &= ~TIFF_BUF4WRITE
LVAL	1433:8	1433:8	6	tif -> tif_flags
FIELD	1433:8	1433:13	7	tif -> tif_flags
LEAF_NODE	1433:8	1433:8	8	tif
LEAF_NODE	1433:11	1433:11	8	->
LEAF_NODE	1433:13	1433:13	8	tif_flags
ASSIGN_OP	1433:23	1433:23	6	&=
LEAF_NODE	1433:23	1433:23	7	&=
RVAL	1433:26	1433:26	6	~TIFF_BUF4WRITE
FIELD	1433:26	1433:26	7	~TIFF_BUF4WRITE
LEAF_NODE	1433:26	1433:26	8	~TIFF_BUF4WRITE
LEAF_NODE	1433:41	1433:41	4	;
SELECTION	1435:1	1436:1	3	
KEYWORD	1435:1	1435:1	4	if
LEAF_NODE	1435:1	1435:1	5	if
LEAF_NODE	1435:4	1435:4	4	(
CONDITION	1435:5	1435:5	4	tif -> tif_flags & TIFF_NOREADRAW
EXPR	1435:5	1435:20	5	tif -> tif_flags & TIFF_NOREADRAW
FIELD	1435:5	1435:10	6	tif -> tif_flags
LEAF_NODE	1435:5	1435:5	7	tif
LEAF_NODE	1435:8	1435:8	7	->
LEAF_NODE	1435:10	1435:10	7	tif_flags
LEAF_NODE	1435:19	1435:19	6	&
FIELD	1435:20	1435:20	6	TIFF_NOREADRAW
LEAF_NODE	1435:20	1435:20	7	TIFF_NOREADRAW
LEAF_NODE	1435:34	1435:34	4	)
STATEMENTS	1436:1	1439:1	4	
LEAF_NODE	1436:1	1436:1	5	{
STATEMENTS	1437:2	1438:2	5	
EXPR_STATEMENT	1437:2	1437:23	6	tif -> tif_rawcp = NULL ;
EXPR	1437:2	1437:2	7	tif -> tif_rawcp = NULL
ASSIGN	1437:2	1437:19	8	tif -> tif_rawcp = NULL
LVAL	1437:2	1437:2	9	tif -> tif_rawcp
FIELD	1437:2	1437:7	10	tif -> tif_rawcp
LEAF_NODE	1437:2	1437:2	11	tif
LEAF_NODE	1437:5	1437:5	11	->
LEAF_NODE	1437:7	1437:7	11	tif_rawcp
ASSIGN_OP	1437:17	1437:17	9	=
LEAF_NODE	1437:17	1437:17	10	=
RVAL	1437:19	1437:19	9	NULL
FIELD	1437:19	1437:19	10	NULL
LEAF_NODE	1437:19	1437:19	11	NULL
LEAF_NODE	1437:23	1437:23	7	;
EXPR_STATEMENT	1438:2	1438:20	6	tif -> tif_rawcc = 0 ;
EXPR	1438:2	1438:2	7	tif -> tif_rawcc = 0
ASSIGN	1438:2	1438:19	8	tif -> tif_rawcc = 0
LVAL	1438:2	1438:2	9	tif -> tif_rawcc
FIELD	1438:2	1438:7	10	tif -> tif_rawcc
LEAF_NODE	1438:2	1438:2	11	tif
LEAF_NODE	1438:5	1438:5	11	->
LEAF_NODE	1438:7	1438:7	11	tif_rawcc
ASSIGN_OP	1438:17	1438:17	9	=
LEAF_NODE	1438:17	1438:17	10	=
RVAL	1438:19	1438:19	9	0
FIELD	1438:19	1438:19	10	0
LEAF_NODE	1438:19	1438:19	11	0
LEAF_NODE	1438:20	1438:20	7	;
LEAF_NODE	1439:1	1439:1	5	}
SELECTION	1440:1	1441:1	3	
KEYWORD	1440:1	1440:1	4	else
LEAF_NODE	1440:1	1440:1	5	else
STATEMENTS	1441:1	1447:1	4	
LEAF_NODE	1441:1	1441:1	5	{
STATEMENTS	1442:2	1445:2	5	
EXPR_STATEMENT	1442:2	1442:35	6	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	1442:2	1442:2	7	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	1442:2	1442:19	8	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	1442:2	1442:2	9	tif -> tif_rawcp
FIELD	1442:2	1442:7	10	tif -> tif_rawcp
LEAF_NODE	1442:2	1442:2	11	tif
LEAF_NODE	1442:5	1442:5	11	->
LEAF_NODE	1442:7	1442:7	11	tif_rawcp
ASSIGN_OP	1442:17	1442:17	9	=
LEAF_NODE	1442:17	1442:17	10	=
RVAL	1442:19	1442:19	9	tif -> tif_rawdata
FIELD	1442:19	1442:24	10	tif -> tif_rawdata
LEAF_NODE	1442:19	1442:19	11	tif
LEAF_NODE	1442:22	1442:22	11	->
LEAF_NODE	1442:24	1442:24	11	tif_rawdata
LEAF_NODE	1442:35	1442:35	7	;
SELECTION	1443:2	1444:3	6	
KEYWORD	1443:2	1443:2	7	if
LEAF_NODE	1443:2	1443:2	8	if
LEAF_NODE	1443:4	1443:4	7	(
CONDITION	1443:6	1443:6	7	tif -> tif_rawdataloaded > 0
EXPR	1443:6	1443:31	8	tif -> tif_rawdataloaded > 0
FIELD	1443:6	1443:11	9	tif -> tif_rawdataloaded
LEAF_NODE	1443:6	1443:6	10	tif
LEAF_NODE	1443:9	1443:9	10	->
LEAF_NODE	1443:11	1443:11	10	tif_rawdataloaded
REL_OPERATOR	1443:29	1443:29	9	>
LEAF_NODE	1443:29	1443:29	10	>
FIELD	1443:31	1443:31	9	0
LEAF_NODE	1443:31	1443:31	10	0
LEAF_NODE	1443:33	1443:33	7	)
STATEMENTS	1444:3	1444:3	7	
EXPR_STATEMENT	1444:3	1444:42	8	tif -> tif_rawcc = tif -> tif_rawdataloaded ;
EXPR	1444:3	1444:3	9	tif -> tif_rawcc = tif -> tif_rawdataloaded
ASSIGN	1444:3	1444:20	10	tif -> tif_rawcc = tif -> tif_rawdataloaded
LVAL	1444:3	1444:3	11	tif -> tif_rawcc
FIELD	1444:3	1444:8	12	tif -> tif_rawcc
LEAF_NODE	1444:3	1444:3	13	tif
LEAF_NODE	1444:6	1444:6	13	->
LEAF_NODE	1444:8	1444:8	13	tif_rawcc
ASSIGN_OP	1444:18	1444:18	11	=
LEAF_NODE	1444:18	1444:18	12	=
RVAL	1444:20	1444:20	11	tif -> tif_rawdataloaded
FIELD	1444:20	1444:25	12	tif -> tif_rawdataloaded
LEAF_NODE	1444:20	1444:20	13	tif
LEAF_NODE	1444:23	1444:23	13	->
LEAF_NODE	1444:25	1444:25	13	tif_rawdataloaded
LEAF_NODE	1444:42	1444:42	9	;
SELECTION	1445:2	1446:3	6	
KEYWORD	1445:2	1445:2	7	else
LEAF_NODE	1445:2	1445:2	8	else
STATEMENTS	1446:3	1446:3	7	
EXPR_STATEMENT	1446:3	1446:64	8	tif -> tif_rawcc = ( tmsize_t ) TIFFGetStrileByteCount ( tif , strip ) ;
EXPR	1446:3	1446:3	9	tif -> tif_rawcc = ( tmsize_t ) TIFFGetStrileByteCount ( tif , strip )
ASSIGN	1446:3	1446:20	10	tif -> tif_rawcc = ( tmsize_t ) TIFFGetStrileByteCount ( tif , strip )
LVAL	1446:3	1446:3	11	tif -> tif_rawcc
FIELD	1446:3	1446:8	12	tif -> tif_rawcc
LEAF_NODE	1446:3	1446:3	13	tif
LEAF_NODE	1446:6	1446:6	13	->
LEAF_NODE	1446:8	1446:8	13	tif_rawcc
ASSIGN_OP	1446:18	1446:18	11	=
LEAF_NODE	1446:18	1446:18	12	=
RVAL	1446:20	1446:30	11	( tmsize_t ) TIFFGetStrileByteCount ( tif , strip )
LEAF_NODE	1446:20	1446:20	12	(
TYPE_NAME	1446:21	1446:21	12	tmsize_t
LEAF_NODE	1446:21	1446:21	13	tmsize_t
LEAF_NODE	1446:29	1446:29	12	)
FUNCTION_CALL	1446:30	1446:63	12	TIFFGetStrileByteCount ( tif , strip )
CALLEE	1446:30	1446:30	13	TIFFGetStrileByteCount
LEAF_NODE	1446:30	1446:30	14	TIFFGetStrileByteCount
LEAF_NODE	1446:52	1446:52	13	(
ARGUMENT	1446:53	1446:53	13	tif
FIELD	1446:53	1446:53	14	tif
LEAF_NODE	1446:53	1446:53	15	tif
LEAF_NODE	1446:56	1446:56	13	,
ARGUMENT	1446:58	1446:58	13	strip
FIELD	1446:58	1446:58	14	strip
LEAF_NODE	1446:58	1446:58	15	strip
LEAF_NODE	1446:63	1446:63	13	)
LEAF_NODE	1446:64	1446:64	9	;
LEAF_NODE	1447:1	1447:1	5	}
JUMP_STATEMENT	1448:1	1449:44	3	return ( ( * tif -> tif_predecode ) ( tif , ( uint16 ) ( strip / td -> td_stripsperimage ) ) ) ;
KEYWORD	1448:1	1448:1	4	return
LEAF_NODE	1448:1	1448:1	5	return
DESTINATION	1448:8	1448:8	4	( ( * tif -> tif_predecode ) ( tif , ( uint16 ) ( strip / td -> td_stripsperimage ) ) )
EXPR	1448:8	1449:43	5	( ( * tif -> tif_predecode ) ( tif , ( uint16 ) ( strip / td -> td_stripsperimage ) ) )
LEAF_NODE	1448:8	1448:8	6	(
FUNCTION_CALL	1448:9	1449:42	6	( * tif -> tif_predecode ) ( tif , ( uint16 ) ( strip / td -> td_stripsperimage ) )
CALLEE	1448:9	1448:29	7	( * tif -> tif_predecode )
LEAF_NODE	1448:9	1448:9	8	(
UNARY_EXPR	1448:10	1448:11	8	* tif -> tif_predecode
UNARY_OPERATOR	1448:10	1448:10	9	*
LEAF_NODE	1448:10	1448:10	10	*
FIELD	1448:11	1448:16	9	tif -> tif_predecode
LEAF_NODE	1448:11	1448:11	10	tif
LEAF_NODE	1448:14	1448:14	10	->
LEAF_NODE	1448:16	1448:16	10	tif_predecode
LEAF_NODE	1448:29	1448:29	8	)
LEAF_NODE	1448:30	1448:30	7	(
ARGUMENT	1448:31	1448:31	7	tif
FIELD	1448:31	1448:31	8	tif
LEAF_NODE	1448:31	1448:31	9	tif
LEAF_NODE	1448:34	1448:34	7	,
ARGUMENT	1449:3	1449:41	7	( uint16 ) ( strip / td -> td_stripsperimage )
LEAF_NODE	1449:3	1449:3	8	(
TYPE_NAME	1449:4	1449:4	8	uint16
LEAF_NODE	1449:4	1449:4	9	uint16
LEAF_NODE	1449:10	1449:10	8	)
LEAF_NODE	1449:11	1449:11	8	(
FIELD	1449:12	1449:12	8	strip
LEAF_NODE	1449:12	1449:12	9	strip
LEAF_NODE	1449:18	1449:18	8	/
FIELD	1449:20	1449:24	8	td -> td_stripsperimage
LEAF_NODE	1449:20	1449:20	9	td
LEAF_NODE	1449:22	1449:22	9	->
LEAF_NODE	1449:24	1449:24	9	td_stripsperimage
LEAF_NODE	1449:41	1449:41	8	)
LEAF_NODE	1449:42	1449:42	7	)
LEAF_NODE	1449:43	1449:43	6	)
LEAF_NODE	1449:44	1449:44	4	;
LEAF_NODE	1450:0	1450:0	2	}
FUNCTION_DEF	1456:0	1497:0	1	
RETURN_TYPE	1456:0	1456:7	2	static int
LEAF_NODE	1456:0	1456:0	3	static
TYPE_NAME	1456:7	1456:7	3	int
LEAF_NODE	1456:7	1456:7	4	int
FUNCTION_NAME	1457:0	1457:0	2	TIFFStartTile
LEAF_NODE	1457:0	1457:0	3	TIFFStartTile
PARAMETER_LIST	1457:13	1457:36	2	( TIFF * tif , uint32 tile )
LEAF_NODE	1457:13	1457:13	3	(
PARAMETER_DECL	1457:14	1457:20	3	TIFF * tif
TYPE	1457:14	1457:18	4	TIFF *
TYPE_NAME	1457:14	1457:14	5	TIFF
LEAF_NODE	1457:14	1457:14	6	TIFF
POINTER	1457:18	1457:18	5	*
LEAF_NODE	1457:18	1457:18	6	*
NAME	1457:20	1457:20	4	tif
LEAF_NODE	1457:20	1457:20	5	tif
LEAF_NODE	1457:23	1457:23	3	,
PARAMETER_DECL	1457:25	1457:32	3	uint32 tile
TYPE	1457:25	1457:25	4	uint32
TYPE_NAME	1457:25	1457:25	5	uint32
LEAF_NODE	1457:25	1457:25	6	uint32
NAME	1457:32	1457:32	4	tile
LEAF_NODE	1457:32	1457:32	5	tile
LEAF_NODE	1457:36	1457:36	3	)
LEAF_NODE	1458:0	1458:0	2	{
STATEMENTS	1459:8	1495:1	2	
LEAF_NODE	1459:8	1459:8	3	static
SIMPLE_DECL	1459:15	1459:52	3	const char [ ] module ; module = "TIFFStartTile" ;
VAR_DECL	1459:15	1459:26	4	const char [ ] module ; module = "TIFFStartTile"
TYPE	1459:15	1459:32	5	const char [ ]
TYPE_NAME	1459:15	1459:21	6	const char
LEAF_NODE	1459:15	1459:15	7	const
LEAF_NODE	1459:21	1459:21	7	char
TYPE_SUFFIX	1459:32	1459:33	6	[ ]
LEAF_NODE	1459:32	1459:32	7	[
LEAF_NODE	1459:33	1459:33	7	]
NAME	1459:26	1459:26	5	module
LEAF_NODE	1459:26	1459:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1459:26	1459:26	5	module = "TIFFStartTile"
ASSIGN	1459:26	1459:37	6	module = "TIFFStartTile"
LVAL	1459:26	1459:26	7	module
NAME	1459:26	1459:26	8	module
LEAF_NODE	1459:26	1459:26	9	module
ASSIGN_OP	1459:35	1459:35	7	=
LEAF_NODE	1459:35	1459:35	8	=
RVAL	1459:37	1459:37	7	"TIFFStartTile"
FIELD	1459:37	1459:37	8	"TIFFStartTile"
LEAF_NODE	1459:37	1459:37	9	"TIFFStartTile"
LEAF_NODE	1459:52	1459:52	4	;
SIMPLE_DECL	1460:1	1460:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1460:1	1460:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1460:1	1460:15	5	TIFFDirectory *
TYPE_NAME	1460:1	1460:1	6	TIFFDirectory
LEAF_NODE	1460:1	1460:1	7	TIFFDirectory
POINTER	1460:15	1460:15	6	*
LEAF_NODE	1460:15	1460:15	7	*
NAME	1460:16	1460:16	5	td
LEAF_NODE	1460:16	1460:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1460:16	1460:16	5	td = & tif -> tif_dir
ASSIGN	1460:16	1460:21	6	td = & tif -> tif_dir
LVAL	1460:16	1460:16	7	td
NAME	1460:16	1460:16	8	td
LEAF_NODE	1460:16	1460:16	9	td
ASSIGN_OP	1460:19	1460:19	7	=
LEAF_NODE	1460:19	1460:19	8	=
RVAL	1460:21	1460:21	7	& tif -> tif_dir
UNARY_EXPR	1460:21	1460:22	8	& tif -> tif_dir
UNARY_OPERATOR	1460:21	1460:21	9	&
LEAF_NODE	1460:21	1460:21	10	&
FIELD	1460:22	1460:27	9	tif -> tif_dir
LEAF_NODE	1460:22	1460:22	10	tif
LEAF_NODE	1460:25	1460:25	10	->
LEAF_NODE	1460:27	1460:27	10	tif_dir
LEAF_NODE	1460:34	1460:34	4	;
SIMPLE_DECL	1461:8	1461:24	3	uint32 howmany32 ;
VAR_DECL	1461:8	1461:15	4	uint32 howmany32
TYPE	1461:8	1461:8	5	uint32
TYPE_NAME	1461:8	1461:8	6	uint32
LEAF_NODE	1461:8	1461:8	7	uint32
NAME	1461:15	1461:15	5	howmany32
LEAF_NODE	1461:15	1461:15	6	howmany32
LEAF_NODE	1461:24	1461:24	4	;
SELECTION	1463:1	1463:46	3	
KEYWORD	1463:1	1463:1	4	if
LEAF_NODE	1463:1	1463:1	5	if
LEAF_NODE	1463:4	1463:4	4	(
CONDITION	1463:5	1463:5	4	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
EXPR	1463:5	1463:43	5	( tif -> tif_flags & TIFF_CODERSETUP ) == 0
LEAF_NODE	1463:5	1463:5	6	(
FIELD	1463:6	1463:11	6	tif -> tif_flags
LEAF_NODE	1463:6	1463:6	7	tif
LEAF_NODE	1463:9	1463:9	7	->
LEAF_NODE	1463:11	1463:11	7	tif_flags
LEAF_NODE	1463:21	1463:21	6	&
FIELD	1463:23	1463:23	6	TIFF_CODERSETUP
LEAF_NODE	1463:23	1463:23	7	TIFF_CODERSETUP
LEAF_NODE	1463:38	1463:38	6	)
EQ_OPERATOR	1463:40	1463:40	6	==
LEAF_NODE	1463:40	1463:40	7	==
FIELD	1463:43	1463:43	6	0
LEAF_NODE	1463:43	1463:43	7	0
LEAF_NODE	1463:44	1463:44	4	)
STATEMENTS	1463:46	1467:1	4	
LEAF_NODE	1463:46	1463:46	5	{
STATEMENTS	1464:2	1466:2	5	
SELECTION	1464:2	1465:3	6	
KEYWORD	1464:2	1464:2	7	if
LEAF_NODE	1464:2	1464:2	8	if
LEAF_NODE	1464:5	1464:5	7	(
CONDITION	1464:6	1464:6	7	! ( * tif -> tif_setupdecode ) ( tif )
EXPR	1464:6	1464:6	8	! ( * tif -> tif_setupdecode ) ( tif )
UNARY_EXPR	1464:6	1464:7	9	! ( * tif -> tif_setupdecode ) ( tif )
UNARY_OPERATOR	1464:6	1464:6	10	!
LEAF_NODE	1464:6	1464:6	11	!
FUNCTION_CALL	1464:7	1464:34	10	( * tif -> tif_setupdecode ) ( tif )
CALLEE	1464:7	1464:29	11	( * tif -> tif_setupdecode )
LEAF_NODE	1464:7	1464:7	12	(
UNARY_EXPR	1464:8	1464:9	12	* tif -> tif_setupdecode
UNARY_OPERATOR	1464:8	1464:8	13	*
LEAF_NODE	1464:8	1464:8	14	*
FIELD	1464:9	1464:14	13	tif -> tif_setupdecode
LEAF_NODE	1464:9	1464:9	14	tif
LEAF_NODE	1464:12	1464:12	14	->
LEAF_NODE	1464:14	1464:14	14	tif_setupdecode
LEAF_NODE	1464:29	1464:29	12	)
LEAF_NODE	1464:30	1464:30	11	(
ARGUMENT	1464:31	1464:31	11	tif
FIELD	1464:31	1464:31	12	tif
LEAF_NODE	1464:31	1464:31	13	tif
LEAF_NODE	1464:34	1464:34	11	)
LEAF_NODE	1464:35	1464:35	7	)
STATEMENTS	1465:3	1465:3	7	
JUMP_STATEMENT	1465:3	1465:13	8	return ( 0 ) ;
KEYWORD	1465:3	1465:3	9	return
LEAF_NODE	1465:3	1465:3	10	return
DESTINATION	1465:10	1465:10	9	( 0 )
EXPR	1465:10	1465:12	10	( 0 )
LEAF_NODE	1465:10	1465:10	11	(
FIELD	1465:11	1465:11	11	0
LEAF_NODE	1465:11	1465:11	12	0
LEAF_NODE	1465:12	1465:12	11	)
LEAF_NODE	1465:13	1465:13	9	;
EXPR_STATEMENT	1466:2	1466:35	6	tif -> tif_flags |= TIFF_CODERSETUP ;
EXPR	1466:2	1466:2	7	tif -> tif_flags |= TIFF_CODERSETUP
ASSIGN	1466:2	1466:20	8	tif -> tif_flags |= TIFF_CODERSETUP
LVAL	1466:2	1466:2	9	tif -> tif_flags
FIELD	1466:2	1466:7	10	tif -> tif_flags
LEAF_NODE	1466:2	1466:2	11	tif
LEAF_NODE	1466:5	1466:5	11	->
LEAF_NODE	1466:7	1466:7	11	tif_flags
ASSIGN_OP	1466:17	1466:17	9	|=
LEAF_NODE	1466:17	1466:17	10	|=
RVAL	1466:20	1466:20	9	TIFF_CODERSETUP
FIELD	1466:20	1466:20	10	TIFF_CODERSETUP
LEAF_NODE	1466:20	1466:20	11	TIFF_CODERSETUP
LEAF_NODE	1466:35	1466:35	7	;
LEAF_NODE	1467:1	1467:1	5	}
EXPR_STATEMENT	1468:1	1468:24	3	tif -> tif_curtile = tile ;
EXPR	1468:1	1468:1	4	tif -> tif_curtile = tile
ASSIGN	1468:1	1468:20	5	tif -> tif_curtile = tile
LVAL	1468:1	1468:1	6	tif -> tif_curtile
FIELD	1468:1	1468:6	7	tif -> tif_curtile
LEAF_NODE	1468:1	1468:1	8	tif
LEAF_NODE	1468:4	1468:4	8	->
LEAF_NODE	1468:6	1468:6	8	tif_curtile
ASSIGN_OP	1468:18	1468:18	6	=
LEAF_NODE	1468:18	1468:18	7	=
RVAL	1468:20	1468:20	6	tile
FIELD	1468:20	1468:20	7	tile
LEAF_NODE	1468:20	1468:20	8	tile
LEAF_NODE	1468:24	1468:24	4	;
EXPR_STATEMENT	1469:8	1469:69	3	howmany32 = TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth ) ;
EXPR	1469:8	1469:8	4	howmany32 = TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
ASSIGN	1469:8	1469:18	5	howmany32 = TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
LVAL	1469:8	1469:8	6	howmany32
FIELD	1469:8	1469:8	7	howmany32
LEAF_NODE	1469:8	1469:8	8	howmany32
ASSIGN_OP	1469:17	1469:17	6	=
LEAF_NODE	1469:17	1469:17	7	=
RVAL	1469:18	1469:18	6	TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
FUNCTION_CALL	1469:18	1469:68	7	TIFFhowmany_32 ( td -> td_imagewidth , td -> td_tilewidth )
CALLEE	1469:18	1469:18	8	TIFFhowmany_32
LEAF_NODE	1469:18	1469:18	9	TIFFhowmany_32
LEAF_NODE	1469:32	1469:32	8	(
ARGUMENT	1469:33	1469:33	8	td -> td_imagewidth
FIELD	1469:33	1469:37	9	td -> td_imagewidth
LEAF_NODE	1469:33	1469:33	10	td
LEAF_NODE	1469:35	1469:35	10	->
LEAF_NODE	1469:37	1469:37	10	td_imagewidth
LEAF_NODE	1469:50	1469:50	8	,
ARGUMENT	1469:52	1469:52	8	td -> td_tilewidth
FIELD	1469:52	1469:56	9	td -> td_tilewidth
LEAF_NODE	1469:52	1469:52	10	td
LEAF_NODE	1469:54	1469:54	10	->
LEAF_NODE	1469:56	1469:56	10	td_tilewidth
LEAF_NODE	1469:68	1469:68	8	)
LEAF_NODE	1469:69	1469:69	4	;
SELECTION	1470:8	1470:28	3	
KEYWORD	1470:8	1470:8	4	if
LEAF_NODE	1470:8	1470:8	5	if
LEAF_NODE	1470:11	1470:11	4	(
CONDITION	1470:12	1470:12	4	howmany32 == 0
EXPR	1470:12	1470:25	5	howmany32 == 0
FIELD	1470:12	1470:12	6	howmany32
LEAF_NODE	1470:12	1470:12	7	howmany32
EQ_OPERATOR	1470:22	1470:22	6	==
LEAF_NODE	1470:22	1470:22	7	==
FIELD	1470:25	1470:25	6	0
LEAF_NODE	1470:25	1470:25	7	0
LEAF_NODE	1470:26	1470:26	4	)
STATEMENTS	1470:28	1473:8	4	
LEAF_NODE	1470:28	1470:28	5	{
STATEMENTS	1471:17	1472:16	5	
EXPR_STATEMENT	1471:17	1471:70	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" ) ;
EXPR	1471:17	1471:17	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
FUNCTION_CALL	1471:17	1471:69	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
CALLEE	1471:17	1471:17	9	TIFFErrorExt
LEAF_NODE	1471:17	1471:17	10	TIFFErrorExt
LEAF_NODE	1471:29	1471:29	9	(
ARGUMENT	1471:30	1471:30	9	tif -> tif_clientdata
FIELD	1471:30	1471:35	10	tif -> tif_clientdata
LEAF_NODE	1471:30	1471:30	11	tif
LEAF_NODE	1471:33	1471:33	11	->
LEAF_NODE	1471:35	1471:35	11	tif_clientdata
LEAF_NODE	1471:49	1471:49	9	,
ARGUMENT	1471:50	1471:50	9	module
FIELD	1471:50	1471:50	10	module
LEAF_NODE	1471:50	1471:50	11	module
LEAF_NODE	1471:56	1471:56	9	,
ARGUMENT	1471:57	1471:57	9	"Zero tiles"
FIELD	1471:57	1471:57	10	"Zero tiles"
LEAF_NODE	1471:57	1471:57	11	"Zero tiles"
LEAF_NODE	1471:69	1471:69	9	)
LEAF_NODE	1471:70	1471:70	7	;
JUMP_STATEMENT	1472:16	1472:24	6	return 0 ;
KEYWORD	1472:16	1472:16	7	return
LEAF_NODE	1472:16	1472:16	8	return
DESTINATION	1472:23	1472:23	7	0
EXPR	1472:23	1472:23	8	0
FIELD	1472:23	1472:23	9	0
LEAF_NODE	1472:23	1472:23	10	0
LEAF_NODE	1472:24	1472:24	7	;
LEAF_NODE	1473:8	1473:8	5	}
EXPR_STATEMENT	1474:1	1474:54	3	tif -> tif_row = ( tile % howmany32 ) * td -> td_tilelength ;
EXPR	1474:1	1474:1	4	tif -> tif_row = ( tile % howmany32 ) * td -> td_tilelength
ASSIGN	1474:1	1474:16	5	tif -> tif_row = ( tile % howmany32 ) * td -> td_tilelength
LVAL	1474:1	1474:1	6	tif -> tif_row
FIELD	1474:1	1474:6	7	tif -> tif_row
LEAF_NODE	1474:1	1474:1	8	tif
LEAF_NODE	1474:4	1474:4	8	->
LEAF_NODE	1474:6	1474:6	8	tif_row
ASSIGN_OP	1474:14	1474:14	6	=
LEAF_NODE	1474:14	1474:14	7	=
RVAL	1474:16	1474:37	6	( tile % howmany32 ) * td -> td_tilelength
LEAF_NODE	1474:16	1474:16	7	(
FIELD	1474:17	1474:17	7	tile
LEAF_NODE	1474:17	1474:17	8	tile
LEAF_NODE	1474:22	1474:22	7	%
FIELD	1474:24	1474:24	7	howmany32
LEAF_NODE	1474:24	1474:24	8	howmany32
LEAF_NODE	1474:33	1474:33	7	)
LEAF_NODE	1474:35	1474:35	7	*
FIELD	1474:37	1474:41	7	td -> td_tilelength
LEAF_NODE	1474:37	1474:37	8	td
LEAF_NODE	1474:39	1474:39	8	->
LEAF_NODE	1474:41	1474:41	8	td_tilelength
LEAF_NODE	1474:54	1474:54	4	;
EXPR_STATEMENT	1475:8	1475:71	3	howmany32 = TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength ) ;
EXPR	1475:8	1475:8	4	howmany32 = TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
ASSIGN	1475:8	1475:18	5	howmany32 = TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
LVAL	1475:8	1475:8	6	howmany32
FIELD	1475:8	1475:8	7	howmany32
LEAF_NODE	1475:8	1475:8	8	howmany32
ASSIGN_OP	1475:17	1475:17	6	=
LEAF_NODE	1475:17	1475:17	7	=
RVAL	1475:18	1475:18	6	TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
FUNCTION_CALL	1475:18	1475:70	7	TIFFhowmany_32 ( td -> td_imagelength , td -> td_tilelength )
CALLEE	1475:18	1475:18	8	TIFFhowmany_32
LEAF_NODE	1475:18	1475:18	9	TIFFhowmany_32
LEAF_NODE	1475:32	1475:32	8	(
ARGUMENT	1475:33	1475:33	8	td -> td_imagelength
FIELD	1475:33	1475:37	9	td -> td_imagelength
LEAF_NODE	1475:33	1475:33	10	td
LEAF_NODE	1475:35	1475:35	10	->
LEAF_NODE	1475:37	1475:37	10	td_imagelength
LEAF_NODE	1475:51	1475:51	8	,
ARGUMENT	1475:53	1475:53	8	td -> td_tilelength
FIELD	1475:53	1475:57	9	td -> td_tilelength
LEAF_NODE	1475:53	1475:53	10	td
LEAF_NODE	1475:55	1475:55	10	->
LEAF_NODE	1475:57	1475:57	10	td_tilelength
LEAF_NODE	1475:70	1475:70	8	)
LEAF_NODE	1475:71	1475:71	4	;
SELECTION	1476:8	1476:28	3	
KEYWORD	1476:8	1476:8	4	if
LEAF_NODE	1476:8	1476:8	5	if
LEAF_NODE	1476:11	1476:11	4	(
CONDITION	1476:12	1476:12	4	howmany32 == 0
EXPR	1476:12	1476:25	5	howmany32 == 0
FIELD	1476:12	1476:12	6	howmany32
LEAF_NODE	1476:12	1476:12	7	howmany32
EQ_OPERATOR	1476:22	1476:22	6	==
LEAF_NODE	1476:22	1476:22	7	==
FIELD	1476:25	1476:25	6	0
LEAF_NODE	1476:25	1476:25	7	0
LEAF_NODE	1476:26	1476:26	4	)
STATEMENTS	1476:28	1479:8	4	
LEAF_NODE	1476:28	1476:28	5	{
STATEMENTS	1477:16	1478:16	5	
EXPR_STATEMENT	1477:16	1477:69	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" ) ;
EXPR	1477:16	1477:16	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
FUNCTION_CALL	1477:16	1477:68	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Zero tiles" )
CALLEE	1477:16	1477:16	9	TIFFErrorExt
LEAF_NODE	1477:16	1477:16	10	TIFFErrorExt
LEAF_NODE	1477:28	1477:28	9	(
ARGUMENT	1477:29	1477:29	9	tif -> tif_clientdata
FIELD	1477:29	1477:34	10	tif -> tif_clientdata
LEAF_NODE	1477:29	1477:29	11	tif
LEAF_NODE	1477:32	1477:32	11	->
LEAF_NODE	1477:34	1477:34	11	tif_clientdata
LEAF_NODE	1477:48	1477:48	9	,
ARGUMENT	1477:49	1477:49	9	module
FIELD	1477:49	1477:49	10	module
LEAF_NODE	1477:49	1477:49	11	module
LEAF_NODE	1477:55	1477:55	9	,
ARGUMENT	1477:56	1477:56	9	"Zero tiles"
FIELD	1477:56	1477:56	10	"Zero tiles"
LEAF_NODE	1477:56	1477:56	11	"Zero tiles"
LEAF_NODE	1477:68	1477:68	9	)
LEAF_NODE	1477:69	1477:69	7	;
JUMP_STATEMENT	1478:16	1478:24	6	return 0 ;
KEYWORD	1478:16	1478:16	7	return
LEAF_NODE	1478:16	1478:16	8	return
DESTINATION	1478:23	1478:23	7	0
EXPR	1478:23	1478:23	8	0
FIELD	1478:23	1478:23	9	0
LEAF_NODE	1478:23	1478:23	10	0
LEAF_NODE	1478:24	1478:24	7	;
LEAF_NODE	1479:8	1479:8	5	}
EXPR_STATEMENT	1480:1	1480:53	3	tif -> tif_col = ( tile % howmany32 ) * td -> td_tilewidth ;
EXPR	1480:1	1480:1	4	tif -> tif_col = ( tile % howmany32 ) * td -> td_tilewidth
ASSIGN	1480:1	1480:16	5	tif -> tif_col = ( tile % howmany32 ) * td -> td_tilewidth
LVAL	1480:1	1480:1	6	tif -> tif_col
FIELD	1480:1	1480:6	7	tif -> tif_col
LEAF_NODE	1480:1	1480:1	8	tif
LEAF_NODE	1480:4	1480:4	8	->
LEAF_NODE	1480:6	1480:6	8	tif_col
ASSIGN_OP	1480:14	1480:14	6	=
LEAF_NODE	1480:14	1480:14	7	=
RVAL	1480:16	1480:37	6	( tile % howmany32 ) * td -> td_tilewidth
LEAF_NODE	1480:16	1480:16	7	(
FIELD	1480:17	1480:17	7	tile
LEAF_NODE	1480:17	1480:17	8	tile
LEAF_NODE	1480:22	1480:22	7	%
FIELD	1480:24	1480:24	7	howmany32
LEAF_NODE	1480:24	1480:24	8	howmany32
LEAF_NODE	1480:33	1480:33	7	)
LEAF_NODE	1480:35	1480:35	7	*
FIELD	1480:37	1480:41	7	td -> td_tilewidth
LEAF_NODE	1480:37	1480:37	8	td
LEAF_NODE	1480:39	1480:39	8	->
LEAF_NODE	1480:41	1480:41	8	td_tilewidth
LEAF_NODE	1480:53	1480:53	4	;
EXPR_STATEMENT	1481:8	1481:41	3	tif -> tif_flags &= ~TIFF_BUF4WRITE ;
EXPR	1481:8	1481:8	4	tif -> tif_flags &= ~TIFF_BUF4WRITE
ASSIGN	1481:8	1481:26	5	tif -> tif_flags &= ~TIFF_BUF4WRITE
LVAL	1481:8	1481:8	6	tif -> tif_flags
FIELD	1481:8	1481:13	7	tif -> tif_flags
LEAF_NODE	1481:8	1481:8	8	tif
LEAF_NODE	1481:11	1481:11	8	->
LEAF_NODE	1481:13	1481:13	8	tif_flags
ASSIGN_OP	1481:23	1481:23	6	&=
LEAF_NODE	1481:23	1481:23	7	&=
RVAL	1481:26	1481:26	6	~TIFF_BUF4WRITE
FIELD	1481:26	1481:26	7	~TIFF_BUF4WRITE
LEAF_NODE	1481:26	1481:26	8	~TIFF_BUF4WRITE
LEAF_NODE	1481:41	1481:41	4	;
SELECTION	1482:1	1483:1	3	
KEYWORD	1482:1	1482:1	4	if
LEAF_NODE	1482:1	1482:1	5	if
LEAF_NODE	1482:4	1482:4	4	(
CONDITION	1482:5	1482:5	4	tif -> tif_flags & TIFF_NOREADRAW
EXPR	1482:5	1482:20	5	tif -> tif_flags & TIFF_NOREADRAW
FIELD	1482:5	1482:10	6	tif -> tif_flags
LEAF_NODE	1482:5	1482:5	7	tif
LEAF_NODE	1482:8	1482:8	7	->
LEAF_NODE	1482:10	1482:10	7	tif_flags
LEAF_NODE	1482:19	1482:19	6	&
FIELD	1482:20	1482:20	6	TIFF_NOREADRAW
LEAF_NODE	1482:20	1482:20	7	TIFF_NOREADRAW
LEAF_NODE	1482:34	1482:34	4	)
STATEMENTS	1483:1	1486:1	4	
LEAF_NODE	1483:1	1483:1	5	{
STATEMENTS	1484:2	1485:2	5	
EXPR_STATEMENT	1484:2	1484:23	6	tif -> tif_rawcp = NULL ;
EXPR	1484:2	1484:2	7	tif -> tif_rawcp = NULL
ASSIGN	1484:2	1484:19	8	tif -> tif_rawcp = NULL
LVAL	1484:2	1484:2	9	tif -> tif_rawcp
FIELD	1484:2	1484:7	10	tif -> tif_rawcp
LEAF_NODE	1484:2	1484:2	11	tif
LEAF_NODE	1484:5	1484:5	11	->
LEAF_NODE	1484:7	1484:7	11	tif_rawcp
ASSIGN_OP	1484:17	1484:17	9	=
LEAF_NODE	1484:17	1484:17	10	=
RVAL	1484:19	1484:19	9	NULL
FIELD	1484:19	1484:19	10	NULL
LEAF_NODE	1484:19	1484:19	11	NULL
LEAF_NODE	1484:23	1484:23	7	;
EXPR_STATEMENT	1485:2	1485:20	6	tif -> tif_rawcc = 0 ;
EXPR	1485:2	1485:2	7	tif -> tif_rawcc = 0
ASSIGN	1485:2	1485:19	8	tif -> tif_rawcc = 0
LVAL	1485:2	1485:2	9	tif -> tif_rawcc
FIELD	1485:2	1485:7	10	tif -> tif_rawcc
LEAF_NODE	1485:2	1485:2	11	tif
LEAF_NODE	1485:5	1485:5	11	->
LEAF_NODE	1485:7	1485:7	11	tif_rawcc
ASSIGN_OP	1485:17	1485:17	9	=
LEAF_NODE	1485:17	1485:17	10	=
RVAL	1485:19	1485:19	9	0
FIELD	1485:19	1485:19	10	0
LEAF_NODE	1485:19	1485:19	11	0
LEAF_NODE	1485:20	1485:20	7	;
LEAF_NODE	1486:1	1486:1	5	}
SELECTION	1487:1	1488:1	3	
KEYWORD	1487:1	1487:1	4	else
LEAF_NODE	1487:1	1487:1	5	else
STATEMENTS	1488:1	1494:1	4	
LEAF_NODE	1488:1	1488:1	5	{
STATEMENTS	1489:2	1492:2	5	
EXPR_STATEMENT	1489:2	1489:35	6	tif -> tif_rawcp = tif -> tif_rawdata ;
EXPR	1489:2	1489:2	7	tif -> tif_rawcp = tif -> tif_rawdata
ASSIGN	1489:2	1489:19	8	tif -> tif_rawcp = tif -> tif_rawdata
LVAL	1489:2	1489:2	9	tif -> tif_rawcp
FIELD	1489:2	1489:7	10	tif -> tif_rawcp
LEAF_NODE	1489:2	1489:2	11	tif
LEAF_NODE	1489:5	1489:5	11	->
LEAF_NODE	1489:7	1489:7	11	tif_rawcp
ASSIGN_OP	1489:17	1489:17	9	=
LEAF_NODE	1489:17	1489:17	10	=
RVAL	1489:19	1489:19	9	tif -> tif_rawdata
FIELD	1489:19	1489:24	10	tif -> tif_rawdata
LEAF_NODE	1489:19	1489:19	11	tif
LEAF_NODE	1489:22	1489:22	11	->
LEAF_NODE	1489:24	1489:24	11	tif_rawdata
LEAF_NODE	1489:35	1489:35	7	;
SELECTION	1490:2	1491:3	6	
KEYWORD	1490:2	1490:2	7	if
LEAF_NODE	1490:2	1490:2	8	if
LEAF_NODE	1490:4	1490:4	7	(
CONDITION	1490:6	1490:6	7	tif -> tif_rawdataloaded > 0
EXPR	1490:6	1490:31	8	tif -> tif_rawdataloaded > 0
FIELD	1490:6	1490:11	9	tif -> tif_rawdataloaded
LEAF_NODE	1490:6	1490:6	10	tif
LEAF_NODE	1490:9	1490:9	10	->
LEAF_NODE	1490:11	1490:11	10	tif_rawdataloaded
REL_OPERATOR	1490:29	1490:29	9	>
LEAF_NODE	1490:29	1490:29	10	>
FIELD	1490:31	1490:31	9	0
LEAF_NODE	1490:31	1490:31	10	0
LEAF_NODE	1490:33	1490:33	7	)
STATEMENTS	1491:3	1491:3	7	
EXPR_STATEMENT	1491:3	1491:42	8	tif -> tif_rawcc = tif -> tif_rawdataloaded ;
EXPR	1491:3	1491:3	9	tif -> tif_rawcc = tif -> tif_rawdataloaded
ASSIGN	1491:3	1491:20	10	tif -> tif_rawcc = tif -> tif_rawdataloaded
LVAL	1491:3	1491:3	11	tif -> tif_rawcc
FIELD	1491:3	1491:8	12	tif -> tif_rawcc
LEAF_NODE	1491:3	1491:3	13	tif
LEAF_NODE	1491:6	1491:6	13	->
LEAF_NODE	1491:8	1491:8	13	tif_rawcc
ASSIGN_OP	1491:18	1491:18	11	=
LEAF_NODE	1491:18	1491:18	12	=
RVAL	1491:20	1491:20	11	tif -> tif_rawdataloaded
FIELD	1491:20	1491:25	12	tif -> tif_rawdataloaded
LEAF_NODE	1491:20	1491:20	13	tif
LEAF_NODE	1491:23	1491:23	13	->
LEAF_NODE	1491:25	1491:25	13	tif_rawdataloaded
LEAF_NODE	1491:42	1491:42	9	;
SELECTION	1492:2	1493:3	6	
KEYWORD	1492:2	1492:2	7	else
LEAF_NODE	1492:2	1492:2	8	else
STATEMENTS	1493:3	1493:3	7	
EXPR_STATEMENT	1493:3	1493:63	8	tif -> tif_rawcc = ( tmsize_t ) TIFFGetStrileByteCount ( tif , tile ) ;
EXPR	1493:3	1493:3	9	tif -> tif_rawcc = ( tmsize_t ) TIFFGetStrileByteCount ( tif , tile )
ASSIGN	1493:3	1493:20	10	tif -> tif_rawcc = ( tmsize_t ) TIFFGetStrileByteCount ( tif , tile )
LVAL	1493:3	1493:3	11	tif -> tif_rawcc
FIELD	1493:3	1493:8	12	tif -> tif_rawcc
LEAF_NODE	1493:3	1493:3	13	tif
LEAF_NODE	1493:6	1493:6	13	->
LEAF_NODE	1493:8	1493:8	13	tif_rawcc
ASSIGN_OP	1493:18	1493:18	11	=
LEAF_NODE	1493:18	1493:18	12	=
RVAL	1493:20	1493:30	11	( tmsize_t ) TIFFGetStrileByteCount ( tif , tile )
LEAF_NODE	1493:20	1493:20	12	(
TYPE_NAME	1493:21	1493:21	12	tmsize_t
LEAF_NODE	1493:21	1493:21	13	tmsize_t
LEAF_NODE	1493:29	1493:29	12	)
FUNCTION_CALL	1493:30	1493:62	12	TIFFGetStrileByteCount ( tif , tile )
CALLEE	1493:30	1493:30	13	TIFFGetStrileByteCount
LEAF_NODE	1493:30	1493:30	14	TIFFGetStrileByteCount
LEAF_NODE	1493:52	1493:52	13	(
ARGUMENT	1493:53	1493:53	13	tif
FIELD	1493:53	1493:53	14	tif
LEAF_NODE	1493:53	1493:53	15	tif
LEAF_NODE	1493:56	1493:56	13	,
ARGUMENT	1493:58	1493:58	13	tile
FIELD	1493:58	1493:58	14	tile
LEAF_NODE	1493:58	1493:58	15	tile
LEAF_NODE	1493:62	1493:62	13	)
LEAF_NODE	1493:63	1493:63	9	;
LEAF_NODE	1494:1	1494:1	5	}
JUMP_STATEMENT	1495:1	1496:41	3	return ( ( * tif -> tif_predecode ) ( tif , ( uint16 ) ( tile / td -> td_stripsperimage ) ) ) ;
KEYWORD	1495:1	1495:1	4	return
LEAF_NODE	1495:1	1495:1	5	return
DESTINATION	1495:8	1495:8	4	( ( * tif -> tif_predecode ) ( tif , ( uint16 ) ( tile / td -> td_stripsperimage ) ) )
EXPR	1495:8	1496:40	5	( ( * tif -> tif_predecode ) ( tif , ( uint16 ) ( tile / td -> td_stripsperimage ) ) )
LEAF_NODE	1495:8	1495:8	6	(
FUNCTION_CALL	1495:9	1496:39	6	( * tif -> tif_predecode ) ( tif , ( uint16 ) ( tile / td -> td_stripsperimage ) )
CALLEE	1495:9	1495:29	7	( * tif -> tif_predecode )
LEAF_NODE	1495:9	1495:9	8	(
UNARY_EXPR	1495:10	1495:11	8	* tif -> tif_predecode
UNARY_OPERATOR	1495:10	1495:10	9	*
LEAF_NODE	1495:10	1495:10	10	*
FIELD	1495:11	1495:16	9	tif -> tif_predecode
LEAF_NODE	1495:11	1495:11	10	tif
LEAF_NODE	1495:14	1495:14	10	->
LEAF_NODE	1495:16	1495:16	10	tif_predecode
LEAF_NODE	1495:29	1495:29	8	)
LEAF_NODE	1495:30	1495:30	7	(
ARGUMENT	1495:31	1495:31	7	tif
FIELD	1495:31	1495:31	8	tif
LEAF_NODE	1495:31	1495:31	9	tif
LEAF_NODE	1495:34	1495:34	7	,
ARGUMENT	1496:3	1496:38	7	( uint16 ) ( tile / td -> td_stripsperimage )
LEAF_NODE	1496:3	1496:3	8	(
TYPE_NAME	1496:4	1496:4	8	uint16
LEAF_NODE	1496:4	1496:4	9	uint16
LEAF_NODE	1496:10	1496:10	8	)
LEAF_NODE	1496:11	1496:11	8	(
FIELD	1496:12	1496:12	8	tile
LEAF_NODE	1496:12	1496:12	9	tile
LEAF_NODE	1496:16	1496:16	8	/
FIELD	1496:17	1496:21	8	td -> td_stripsperimage
LEAF_NODE	1496:17	1496:17	9	td
LEAF_NODE	1496:19	1496:19	9	->
LEAF_NODE	1496:21	1496:21	9	td_stripsperimage
LEAF_NODE	1496:38	1496:38	8	)
LEAF_NODE	1496:39	1496:39	7	)
LEAF_NODE	1496:40	1496:40	6	)
LEAF_NODE	1496:41	1496:41	4	;
LEAF_NODE	1497:0	1497:0	2	}
FUNCTION_DEF	1499:0	1513:0	1	
RETURN_TYPE	1499:0	1499:7	2	static int
LEAF_NODE	1499:0	1499:0	3	static
TYPE_NAME	1499:7	1499:7	3	int
LEAF_NODE	1499:7	1499:7	4	int
FUNCTION_NAME	1500:0	1500:0	2	TIFFCheckRead
LEAF_NODE	1500:0	1500:0	3	TIFFCheckRead
PARAMETER_LIST	1500:13	1500:34	2	( TIFF * tif , int tiles )
LEAF_NODE	1500:13	1500:13	3	(
PARAMETER_DECL	1500:14	1500:20	3	TIFF * tif
TYPE	1500:14	1500:18	4	TIFF *
TYPE_NAME	1500:14	1500:14	5	TIFF
LEAF_NODE	1500:14	1500:14	6	TIFF
POINTER	1500:18	1500:18	5	*
LEAF_NODE	1500:18	1500:18	6	*
NAME	1500:20	1500:20	4	tif
LEAF_NODE	1500:20	1500:20	5	tif
LEAF_NODE	1500:23	1500:23	3	,
PARAMETER_DECL	1500:25	1500:29	3	int tiles
TYPE	1500:25	1500:25	4	int
TYPE_NAME	1500:25	1500:25	5	int
LEAF_NODE	1500:25	1500:25	6	int
NAME	1500:29	1500:29	4	tiles
LEAF_NODE	1500:29	1500:29	5	tiles
LEAF_NODE	1500:34	1500:34	3	)
LEAF_NODE	1501:0	1501:0	2	{
STATEMENTS	1502:1	1512:1	2	
SELECTION	1502:1	1502:32	3	
KEYWORD	1502:1	1502:1	4	if
LEAF_NODE	1502:1	1502:1	5	if
LEAF_NODE	1502:4	1502:4	4	(
CONDITION	1502:5	1502:5	4	tif -> tif_mode == O_WRONLY
EXPR	1502:5	1502:22	5	tif -> tif_mode == O_WRONLY
FIELD	1502:5	1502:10	6	tif -> tif_mode
LEAF_NODE	1502:5	1502:5	7	tif
LEAF_NODE	1502:8	1502:8	7	->
LEAF_NODE	1502:10	1502:10	7	tif_mode
EQ_OPERATOR	1502:19	1502:19	6	==
LEAF_NODE	1502:19	1502:19	7	==
FIELD	1502:22	1502:22	6	O_WRONLY
LEAF_NODE	1502:22	1502:22	7	O_WRONLY
LEAF_NODE	1502:30	1502:30	4	)
STATEMENTS	1502:32	1505:1	4	
LEAF_NODE	1502:32	1502:32	5	{
STATEMENTS	1503:2	1504:2	5	
EXPR_STATEMENT	1503:2	1503:79	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File not open for reading" ) ;
EXPR	1503:2	1503:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File not open for reading" )
FUNCTION_CALL	1503:2	1503:78	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File not open for reading" )
CALLEE	1503:2	1503:2	9	TIFFErrorExt
LEAF_NODE	1503:2	1503:2	10	TIFFErrorExt
LEAF_NODE	1503:14	1503:14	9	(
ARGUMENT	1503:15	1503:15	9	tif -> tif_clientdata
FIELD	1503:15	1503:20	10	tif -> tif_clientdata
LEAF_NODE	1503:15	1503:15	11	tif
LEAF_NODE	1503:18	1503:18	11	->
LEAF_NODE	1503:20	1503:20	11	tif_clientdata
LEAF_NODE	1503:34	1503:34	9	,
ARGUMENT	1503:36	1503:36	9	tif -> tif_name
FIELD	1503:36	1503:41	10	tif -> tif_name
LEAF_NODE	1503:36	1503:36	11	tif
LEAF_NODE	1503:39	1503:39	11	->
LEAF_NODE	1503:41	1503:41	11	tif_name
LEAF_NODE	1503:49	1503:49	9	,
ARGUMENT	1503:51	1503:51	9	"File not open for reading"
FIELD	1503:51	1503:51	10	"File not open for reading"
LEAF_NODE	1503:51	1503:51	11	"File not open for reading"
LEAF_NODE	1503:78	1503:78	9	)
LEAF_NODE	1503:79	1503:79	7	;
JUMP_STATEMENT	1504:2	1504:12	6	return ( 0 ) ;
KEYWORD	1504:2	1504:2	7	return
LEAF_NODE	1504:2	1504:2	8	return
DESTINATION	1504:9	1504:9	7	( 0 )
EXPR	1504:9	1504:11	8	( 0 )
LEAF_NODE	1504:9	1504:9	9	(
FIELD	1504:10	1504:10	9	0
LEAF_NODE	1504:10	1504:10	10	0
LEAF_NODE	1504:11	1504:11	9	)
LEAF_NODE	1504:12	1504:12	7	;
LEAF_NODE	1505:1	1505:1	5	}
SELECTION	1506:1	1506:27	3	
KEYWORD	1506:1	1506:1	4	if
LEAF_NODE	1506:1	1506:1	5	if
LEAF_NODE	1506:4	1506:4	4	(
CONDITION	1506:5	1506:5	4	tiles ^ isTiled ( tif )
EXPR	1506:5	1506:13	5	tiles ^ isTiled ( tif )
FIELD	1506:5	1506:5	6	tiles
LEAF_NODE	1506:5	1506:5	7	tiles
LEAF_NODE	1506:11	1506:11	6	^
FUNCTION_CALL	1506:13	1506:24	6	isTiled ( tif )
CALLEE	1506:13	1506:13	7	isTiled
LEAF_NODE	1506:13	1506:13	8	isTiled
LEAF_NODE	1506:20	1506:20	7	(
ARGUMENT	1506:21	1506:21	7	tif
FIELD	1506:21	1506:21	8	tif
LEAF_NODE	1506:21	1506:21	9	tif
LEAF_NODE	1506:24	1506:24	7	)
LEAF_NODE	1506:25	1506:25	4	)
STATEMENTS	1506:27	1511:1	4	
LEAF_NODE	1506:27	1506:27	5	{
STATEMENTS	1507:2	1510:2	5	
EXPR_STATEMENT	1507:2	1509:50	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , tiles ? "Can not read tiles from a striped image" : "Can not read scanlines from a tiled image" ) ;
EXPR	1507:2	1507:2	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , tiles ? "Can not read tiles from a striped image" : "Can not read scanlines from a tiled image" )
FUNCTION_CALL	1507:2	1509:49	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , tiles ? "Can not read tiles from a striped image" : "Can not read scanlines from a tiled image" )
CALLEE	1507:2	1507:2	9	TIFFErrorExt
LEAF_NODE	1507:2	1507:2	10	TIFFErrorExt
LEAF_NODE	1507:14	1507:14	9	(
ARGUMENT	1507:15	1507:15	9	tif -> tif_clientdata
FIELD	1507:15	1507:20	10	tif -> tif_clientdata
LEAF_NODE	1507:15	1507:15	11	tif
LEAF_NODE	1507:18	1507:18	11	->
LEAF_NODE	1507:20	1507:20	11	tif_clientdata
LEAF_NODE	1507:34	1507:34	9	,
ARGUMENT	1507:36	1507:36	9	tif -> tif_name
FIELD	1507:36	1507:41	10	tif -> tif_name
LEAF_NODE	1507:36	1507:36	11	tif
LEAF_NODE	1507:39	1507:39	11	->
LEAF_NODE	1507:41	1507:41	11	tif_name
LEAF_NODE	1507:49	1507:49	9	,
ARGUMENT	1507:51	1507:51	9	tiles ? "Can not read tiles from a striped image" : "Can not read scanlines from a tiled image"
COND_EXPR	1507:51	1509:6	10	tiles ? "Can not read tiles from a striped image" : "Can not read scanlines from a tiled image"
CONDITION	1507:51	1507:51	11	tiles
FIELD	1507:51	1507:51	12	tiles
LEAF_NODE	1507:51	1507:51	13	tiles
LEAF_NODE	1507:57	1507:57	11	?
EXPR	1508:6	1508:6	11	"Can not read tiles from a striped image"
FIELD	1508:6	1508:6	12	"Can not read tiles from a striped image"
LEAF_NODE	1508:6	1508:6	13	"Can not read tiles from a striped image"
LEAF_NODE	1508:48	1508:48	11	:
FIELD	1509:6	1509:6	11	"Can not read scanlines from a tiled image"
LEAF_NODE	1509:6	1509:6	12	"Can not read scanlines from a tiled image"
LEAF_NODE	1509:49	1509:49	9	)
LEAF_NODE	1509:50	1509:50	7	;
JUMP_STATEMENT	1510:2	1510:12	6	return ( 0 ) ;
KEYWORD	1510:2	1510:2	7	return
LEAF_NODE	1510:2	1510:2	8	return
DESTINATION	1510:9	1510:9	7	( 0 )
EXPR	1510:9	1510:11	8	( 0 )
LEAF_NODE	1510:9	1510:9	9	(
FIELD	1510:10	1510:10	9	0
LEAF_NODE	1510:10	1510:10	10	0
LEAF_NODE	1510:11	1510:11	9	)
LEAF_NODE	1510:12	1510:12	7	;
LEAF_NODE	1511:1	1511:1	5	}
JUMP_STATEMENT	1512:1	1512:11	3	return ( 1 ) ;
KEYWORD	1512:1	1512:1	4	return
LEAF_NODE	1512:1	1512:1	5	return
DESTINATION	1512:8	1512:8	4	( 1 )
EXPR	1512:8	1512:10	5	( 1 )
LEAF_NODE	1512:8	1512:8	6	(
FIELD	1512:9	1512:9	6	1
LEAF_NODE	1512:9	1512:9	7	1
LEAF_NODE	1512:10	1512:10	6	)
LEAF_NODE	1512:11	1512:11	4	;
LEAF_NODE	1513:0	1513:0	2	}
FUNCTION_DEF	1524:0	1600:0	1	
RETURN_TYPE	1524:0	1524:0	2	int
TYPE_NAME	1524:0	1524:0	3	int
LEAF_NODE	1524:0	1524:0	4	int
FUNCTION_NAME	1524:9	1524:9	2	TIFFReadFromUserBuffer
LEAF_NODE	1524:9	1524:9	3	TIFFReadFromUserBuffer
PARAMETER_LIST	1524:31	1526:62	2	( TIFF * tif , uint32 strile , void * inbuf , tmsize_t insize , void * outbuf , tmsize_t outsize )
LEAF_NODE	1524:31	1524:31	3	(
PARAMETER_DECL	1524:32	1524:38	3	TIFF * tif
TYPE	1524:32	1524:36	4	TIFF *
TYPE_NAME	1524:32	1524:32	5	TIFF
LEAF_NODE	1524:32	1524:32	6	TIFF
POINTER	1524:36	1524:36	5	*
LEAF_NODE	1524:36	1524:36	6	*
NAME	1524:38	1524:38	4	tif
LEAF_NODE	1524:38	1524:38	5	tif
LEAF_NODE	1524:41	1524:41	3	,
PARAMETER_DECL	1524:43	1524:50	3	uint32 strile
TYPE	1524:43	1524:43	4	uint32
TYPE_NAME	1524:43	1524:43	5	uint32
LEAF_NODE	1524:43	1524:43	6	uint32
NAME	1524:50	1524:50	4	strile
LEAF_NODE	1524:50	1524:50	5	strile
LEAF_NODE	1524:56	1524:56	3	,
PARAMETER_DECL	1525:32	1525:38	3	void * inbuf
TYPE	1525:32	1525:36	4	void *
TYPE_NAME	1525:32	1525:32	5	void
LEAF_NODE	1525:32	1525:32	6	void
POINTER	1525:36	1525:36	5	*
LEAF_NODE	1525:36	1525:36	6	*
NAME	1525:38	1525:38	4	inbuf
LEAF_NODE	1525:38	1525:38	5	inbuf
LEAF_NODE	1525:43	1525:43	3	,
PARAMETER_DECL	1525:45	1525:54	3	tmsize_t insize
TYPE	1525:45	1525:45	4	tmsize_t
TYPE_NAME	1525:45	1525:45	5	tmsize_t
LEAF_NODE	1525:45	1525:45	6	tmsize_t
NAME	1525:54	1525:54	4	insize
LEAF_NODE	1525:54	1525:54	5	insize
LEAF_NODE	1525:60	1525:60	3	,
PARAMETER_DECL	1526:32	1526:38	3	void * outbuf
TYPE	1526:32	1526:36	4	void *
TYPE_NAME	1526:32	1526:32	5	void
LEAF_NODE	1526:32	1526:32	6	void
POINTER	1526:36	1526:36	5	*
LEAF_NODE	1526:36	1526:36	6	*
NAME	1526:38	1526:38	4	outbuf
LEAF_NODE	1526:38	1526:38	5	outbuf
LEAF_NODE	1526:44	1526:44	3	,
PARAMETER_DECL	1526:46	1526:55	3	tmsize_t outsize
TYPE	1526:46	1526:46	4	tmsize_t
TYPE_NAME	1526:46	1526:46	5	tmsize_t
LEAF_NODE	1526:46	1526:46	6	tmsize_t
NAME	1526:55	1526:55	4	outsize
LEAF_NODE	1526:55	1526:55	5	outsize
LEAF_NODE	1526:62	1526:62	3	)
LEAF_NODE	1527:0	1527:0	2	{
STATEMENTS	1528:4	1599:4	2	
LEAF_NODE	1528:4	1528:4	3	static
SIMPLE_DECL	1528:11	1528:57	3	const char [ ] module ; module = "TIFFReadFromUserBuffer" ;
VAR_DECL	1528:11	1528:22	4	const char [ ] module ; module = "TIFFReadFromUserBuffer"
TYPE	1528:11	1528:28	5	const char [ ]
TYPE_NAME	1528:11	1528:17	6	const char
LEAF_NODE	1528:11	1528:11	7	const
LEAF_NODE	1528:17	1528:17	7	char
TYPE_SUFFIX	1528:28	1528:29	6	[ ]
LEAF_NODE	1528:28	1528:28	7	[
LEAF_NODE	1528:29	1528:29	7	]
NAME	1528:22	1528:22	5	module
LEAF_NODE	1528:22	1528:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1528:22	1528:22	5	module = "TIFFReadFromUserBuffer"
ASSIGN	1528:22	1528:33	6	module = "TIFFReadFromUserBuffer"
LVAL	1528:22	1528:22	7	module
NAME	1528:22	1528:22	8	module
LEAF_NODE	1528:22	1528:22	9	module
ASSIGN_OP	1528:31	1528:31	7	=
LEAF_NODE	1528:31	1528:31	8	=
RVAL	1528:33	1528:33	7	"TIFFReadFromUserBuffer"
FIELD	1528:33	1528:33	8	"TIFFReadFromUserBuffer"
LEAF_NODE	1528:33	1528:33	9	"TIFFReadFromUserBuffer"
LEAF_NODE	1528:57	1528:57	4	;
SIMPLE_DECL	1529:4	1529:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	1529:4	1529:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	1529:4	1529:18	5	TIFFDirectory *
TYPE_NAME	1529:4	1529:4	6	TIFFDirectory
LEAF_NODE	1529:4	1529:4	7	TIFFDirectory
POINTER	1529:18	1529:18	6	*
LEAF_NODE	1529:18	1529:18	7	*
NAME	1529:19	1529:19	5	td
LEAF_NODE	1529:19	1529:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	1529:19	1529:19	5	td = & tif -> tif_dir
ASSIGN	1529:19	1529:24	6	td = & tif -> tif_dir
LVAL	1529:19	1529:19	7	td
NAME	1529:19	1529:19	8	td
LEAF_NODE	1529:19	1529:19	9	td
ASSIGN_OP	1529:22	1529:22	7	=
LEAF_NODE	1529:22	1529:22	8	=
RVAL	1529:24	1529:24	7	& tif -> tif_dir
UNARY_EXPR	1529:24	1529:25	8	& tif -> tif_dir
UNARY_OPERATOR	1529:24	1529:24	9	&
LEAF_NODE	1529:24	1529:24	10	&
FIELD	1529:25	1529:30	9	tif -> tif_dir
LEAF_NODE	1529:25	1529:25	10	tif
LEAF_NODE	1529:28	1529:28	10	->
LEAF_NODE	1529:30	1529:30	10	tif_dir
LEAF_NODE	1529:37	1529:37	4	;
SIMPLE_DECL	1530:4	1530:15	3	int ret ; ret = 1 ;
VAR_DECL	1530:4	1530:8	4	int ret ; ret = 1
TYPE	1530:4	1530:4	5	int
TYPE_NAME	1530:4	1530:4	6	int
LEAF_NODE	1530:4	1530:4	7	int
NAME	1530:8	1530:8	5	ret
LEAF_NODE	1530:8	1530:8	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	1530:8	1530:8	5	ret = 1
ASSIGN	1530:8	1530:14	6	ret = 1
LVAL	1530:8	1530:8	7	ret
NAME	1530:8	1530:8	8	ret
LEAF_NODE	1530:8	1530:8	9	ret
ASSIGN_OP	1530:12	1530:12	7	=
LEAF_NODE	1530:12	1530:12	8	=
RVAL	1530:14	1530:14	7	1
FIELD	1530:14	1530:14	8	1
LEAF_NODE	1530:14	1530:14	9	1
LEAF_NODE	1530:15	1530:15	4	;
SIMPLE_DECL	1531:4	1531:41	3	uint32 old_tif_flags ; old_tif_flags = tif -> tif_flags ;
VAR_DECL	1531:4	1531:11	4	uint32 old_tif_flags ; old_tif_flags = tif -> tif_flags
TYPE	1531:4	1531:4	5	uint32
TYPE_NAME	1531:4	1531:4	6	uint32
LEAF_NODE	1531:4	1531:4	7	uint32
NAME	1531:11	1531:11	5	old_tif_flags
LEAF_NODE	1531:11	1531:11	6	old_tif_flags
LEAF_NODE	0:0	0:0	5	;
INIT	1531:11	1531:11	5	old_tif_flags = tif -> tif_flags
ASSIGN	1531:11	1531:27	6	old_tif_flags = tif -> tif_flags
LVAL	1531:11	1531:11	7	old_tif_flags
NAME	1531:11	1531:11	8	old_tif_flags
LEAF_NODE	1531:11	1531:11	9	old_tif_flags
ASSIGN_OP	1531:25	1531:25	7	=
LEAF_NODE	1531:25	1531:25	8	=
RVAL	1531:27	1531:27	7	tif -> tif_flags
FIELD	1531:27	1531:32	8	tif -> tif_flags
LEAF_NODE	1531:27	1531:27	9	tif
LEAF_NODE	1531:30	1531:30	9	->
LEAF_NODE	1531:32	1531:32	9	tif_flags
LEAF_NODE	1531:41	1531:41	4	;
SIMPLE_DECL	1532:4	1532:51	3	tmsize_t old_rawdatasize ; old_rawdatasize = tif -> tif_rawdatasize ;
VAR_DECL	1532:4	1532:13	4	tmsize_t old_rawdatasize ; old_rawdatasize = tif -> tif_rawdatasize
TYPE	1532:4	1532:4	5	tmsize_t
TYPE_NAME	1532:4	1532:4	6	tmsize_t
LEAF_NODE	1532:4	1532:4	7	tmsize_t
NAME	1532:13	1532:13	5	old_rawdatasize
LEAF_NODE	1532:13	1532:13	6	old_rawdatasize
LEAF_NODE	0:0	0:0	5	;
INIT	1532:13	1532:13	5	old_rawdatasize = tif -> tif_rawdatasize
ASSIGN	1532:13	1532:31	6	old_rawdatasize = tif -> tif_rawdatasize
LVAL	1532:13	1532:13	7	old_rawdatasize
NAME	1532:13	1532:13	8	old_rawdatasize
LEAF_NODE	1532:13	1532:13	9	old_rawdatasize
ASSIGN_OP	1532:29	1532:29	7	=
LEAF_NODE	1532:29	1532:29	8	=
RVAL	1532:31	1532:31	7	tif -> tif_rawdatasize
FIELD	1532:31	1532:36	8	tif -> tif_rawdatasize
LEAF_NODE	1532:31	1532:31	9	tif
LEAF_NODE	1532:34	1532:34	9	->
LEAF_NODE	1532:36	1532:36	9	tif_rawdatasize
LEAF_NODE	1532:51	1532:51	4	;
SIMPLE_DECL	1533:4	1533:40	3	void * old_rawdata ; old_rawdata = tif -> tif_rawdata ;
VAR_DECL	1533:4	1533:10	4	void * old_rawdata ; old_rawdata = tif -> tif_rawdata
TYPE	1533:4	1533:8	5	void *
TYPE_NAME	1533:4	1533:4	6	void
LEAF_NODE	1533:4	1533:4	7	void
POINTER	1533:8	1533:8	6	*
LEAF_NODE	1533:8	1533:8	7	*
NAME	1533:10	1533:10	5	old_rawdata
LEAF_NODE	1533:10	1533:10	6	old_rawdata
LEAF_NODE	0:0	0:0	5	;
INIT	1533:10	1533:10	5	old_rawdata = tif -> tif_rawdata
ASSIGN	1533:10	1533:24	6	old_rawdata = tif -> tif_rawdata
LVAL	1533:10	1533:10	7	old_rawdata
NAME	1533:10	1533:10	8	old_rawdata
LEAF_NODE	1533:10	1533:10	9	old_rawdata
ASSIGN_OP	1533:22	1533:22	7	=
LEAF_NODE	1533:22	1533:22	8	=
RVAL	1533:24	1533:24	7	tif -> tif_rawdata
FIELD	1533:24	1533:29	8	tif -> tif_rawdata
LEAF_NODE	1533:24	1533:24	9	tif
LEAF_NODE	1533:27	1533:27	9	->
LEAF_NODE	1533:29	1533:29	9	tif_rawdata
LEAF_NODE	1533:40	1533:40	4	;
SELECTION	1535:4	1535:35	3	
KEYWORD	1535:4	1535:4	4	if
LEAF_NODE	1535:4	1535:4	5	if
LEAF_NODE	1535:7	1535:7	4	(
CONDITION	1535:8	1535:8	4	tif -> tif_mode == O_WRONLY
EXPR	1535:8	1535:25	5	tif -> tif_mode == O_WRONLY
FIELD	1535:8	1535:13	6	tif -> tif_mode
LEAF_NODE	1535:8	1535:8	7	tif
LEAF_NODE	1535:11	1535:11	7	->
LEAF_NODE	1535:13	1535:13	7	tif_mode
EQ_OPERATOR	1535:22	1535:22	6	==
LEAF_NODE	1535:22	1535:22	7	==
FIELD	1535:25	1535:25	6	O_WRONLY
LEAF_NODE	1535:25	1535:25	7	O_WRONLY
LEAF_NODE	1535:33	1535:33	4	)
STATEMENTS	1535:35	1538:4	4	
LEAF_NODE	1535:35	1535:35	5	{
STATEMENTS	1536:8	1537:8	5	
EXPR_STATEMENT	1536:8	1536:85	6	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File not open for reading" ) ;
EXPR	1536:8	1536:8	7	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File not open for reading" )
FUNCTION_CALL	1536:8	1536:84	8	TIFFErrorExt ( tif -> tif_clientdata , tif -> tif_name , "File not open for reading" )
CALLEE	1536:8	1536:8	9	TIFFErrorExt
LEAF_NODE	1536:8	1536:8	10	TIFFErrorExt
LEAF_NODE	1536:20	1536:20	9	(
ARGUMENT	1536:21	1536:21	9	tif -> tif_clientdata
FIELD	1536:21	1536:26	10	tif -> tif_clientdata
LEAF_NODE	1536:21	1536:21	11	tif
LEAF_NODE	1536:24	1536:24	11	->
LEAF_NODE	1536:26	1536:26	11	tif_clientdata
LEAF_NODE	1536:40	1536:40	9	,
ARGUMENT	1536:42	1536:42	9	tif -> tif_name
FIELD	1536:42	1536:47	10	tif -> tif_name
LEAF_NODE	1536:42	1536:42	11	tif
LEAF_NODE	1536:45	1536:45	11	->
LEAF_NODE	1536:47	1536:47	11	tif_name
LEAF_NODE	1536:55	1536:55	9	,
ARGUMENT	1536:57	1536:57	9	"File not open for reading"
FIELD	1536:57	1536:57	10	"File not open for reading"
LEAF_NODE	1536:57	1536:57	11	"File not open for reading"
LEAF_NODE	1536:84	1536:84	9	)
LEAF_NODE	1536:85	1536:85	7	;
JUMP_STATEMENT	1537:8	1537:16	6	return 0 ;
KEYWORD	1537:8	1537:8	7	return
LEAF_NODE	1537:8	1537:8	8	return
DESTINATION	1537:15	1537:15	7	0
EXPR	1537:15	1537:15	8	0
FIELD	1537:15	1537:15	9	0
LEAF_NODE	1537:15	1537:15	10	0
LEAF_NODE	1537:16	1537:16	7	;
LEAF_NODE	1538:4	1538:4	5	}
SELECTION	1539:4	1540:4	3	
KEYWORD	1539:4	1539:4	4	if
LEAF_NODE	1539:4	1539:4	5	if
LEAF_NODE	1539:7	1539:7	4	(
CONDITION	1539:8	1539:8	4	tif -> tif_flags & TIFF_NOREADRAW
EXPR	1539:8	1539:23	5	tif -> tif_flags & TIFF_NOREADRAW
FIELD	1539:8	1539:13	6	tif -> tif_flags
LEAF_NODE	1539:8	1539:8	7	tif
LEAF_NODE	1539:11	1539:11	7	->
LEAF_NODE	1539:13	1539:13	7	tif_flags
LEAF_NODE	1539:22	1539:22	6	&
FIELD	1539:23	1539:23	6	TIFF_NOREADRAW
LEAF_NODE	1539:23	1539:23	7	TIFF_NOREADRAW
LEAF_NODE	1539:37	1539:37	4	)
STATEMENTS	1540:4	1544:4	4	
LEAF_NODE	1540:4	1540:4	5	{
STATEMENTS	1541:8	1543:8	5	
EXPR_STATEMENT	1541:8	1542:86	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" ) ;
EXPR	1541:8	1541:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" )
FUNCTION_CALL	1541:8	1542:85	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Compression scheme does not support access to raw uncompressed data" )
CALLEE	1541:8	1541:8	9	TIFFErrorExt
LEAF_NODE	1541:8	1541:8	10	TIFFErrorExt
LEAF_NODE	1541:20	1541:20	9	(
ARGUMENT	1541:21	1541:21	9	tif -> tif_clientdata
FIELD	1541:21	1541:26	10	tif -> tif_clientdata
LEAF_NODE	1541:21	1541:21	11	tif
LEAF_NODE	1541:24	1541:24	11	->
LEAF_NODE	1541:26	1541:26	11	tif_clientdata
LEAF_NODE	1541:40	1541:40	9	,
ARGUMENT	1541:42	1541:42	9	module
FIELD	1541:42	1541:42	10	module
LEAF_NODE	1541:42	1541:42	11	module
LEAF_NODE	1541:48	1541:48	9	,
ARGUMENT	1542:16	1542:16	9	"Compression scheme does not support access to raw uncompressed data"
FIELD	1542:16	1542:16	10	"Compression scheme does not support access to raw uncompressed data"
LEAF_NODE	1542:16	1542:16	11	"Compression scheme does not support access to raw uncompressed data"
LEAF_NODE	1542:85	1542:85	9	)
LEAF_NODE	1542:86	1542:86	7	;
JUMP_STATEMENT	1543:8	1543:16	6	return 0 ;
KEYWORD	1543:8	1543:8	7	return
LEAF_NODE	1543:8	1543:8	8	return
DESTINATION	1543:15	1543:15	7	0
EXPR	1543:15	1543:15	8	0
FIELD	1543:15	1543:15	9	0
LEAF_NODE	1543:15	1543:15	10	0
LEAF_NODE	1543:16	1543:16	7	;
LEAF_NODE	1544:4	1544:4	5	}
EXPR_STATEMENT	1546:4	1546:36	3	tif -> tif_flags &= ~TIFF_MYBUFFER ;
EXPR	1546:4	1546:4	4	tif -> tif_flags &= ~TIFF_MYBUFFER
ASSIGN	1546:4	1546:22	5	tif -> tif_flags &= ~TIFF_MYBUFFER
LVAL	1546:4	1546:4	6	tif -> tif_flags
FIELD	1546:4	1546:9	7	tif -> tif_flags
LEAF_NODE	1546:4	1546:4	8	tif
LEAF_NODE	1546:7	1546:7	8	->
LEAF_NODE	1546:9	1546:9	8	tif_flags
ASSIGN_OP	1546:19	1546:19	6	&=
LEAF_NODE	1546:19	1546:19	7	&=
RVAL	1546:22	1546:22	6	~TIFF_MYBUFFER
FIELD	1546:22	1546:22	7	~TIFF_MYBUFFER
LEAF_NODE	1546:22	1546:22	8	~TIFF_MYBUFFER
LEAF_NODE	1546:36	1546:36	4	;
EXPR_STATEMENT	1547:4	1547:37	3	tif -> tif_flags |= TIFF_BUFFERMMAP ;
EXPR	1547:4	1547:4	4	tif -> tif_flags |= TIFF_BUFFERMMAP
ASSIGN	1547:4	1547:22	5	tif -> tif_flags |= TIFF_BUFFERMMAP
LVAL	1547:4	1547:4	6	tif -> tif_flags
FIELD	1547:4	1547:9	7	tif -> tif_flags
LEAF_NODE	1547:4	1547:4	8	tif
LEAF_NODE	1547:7	1547:7	8	->
LEAF_NODE	1547:9	1547:9	8	tif_flags
ASSIGN_OP	1547:19	1547:19	6	|=
LEAF_NODE	1547:19	1547:19	7	|=
RVAL	1547:22	1547:22	6	TIFF_BUFFERMMAP
FIELD	1547:22	1547:22	7	TIFF_BUFFERMMAP
LEAF_NODE	1547:22	1547:22	8	TIFF_BUFFERMMAP
LEAF_NODE	1547:37	1547:37	4	;
EXPR_STATEMENT	1548:4	1548:33	3	tif -> tif_rawdatasize = insize ;
EXPR	1548:4	1548:4	4	tif -> tif_rawdatasize = insize
ASSIGN	1548:4	1548:27	5	tif -> tif_rawdatasize = insize
LVAL	1548:4	1548:4	6	tif -> tif_rawdatasize
FIELD	1548:4	1548:9	7	tif -> tif_rawdatasize
LEAF_NODE	1548:4	1548:4	8	tif
LEAF_NODE	1548:7	1548:7	8	->
LEAF_NODE	1548:9	1548:9	8	tif_rawdatasize
ASSIGN_OP	1548:25	1548:25	6	=
LEAF_NODE	1548:25	1548:25	7	=
RVAL	1548:27	1548:27	6	insize
FIELD	1548:27	1548:27	7	insize
LEAF_NODE	1548:27	1548:27	8	insize
LEAF_NODE	1548:33	1548:33	4	;
EXPR_STATEMENT	1549:4	1549:28	3	tif -> tif_rawdata = inbuf ;
EXPR	1549:4	1549:4	4	tif -> tif_rawdata = inbuf
ASSIGN	1549:4	1549:23	5	tif -> tif_rawdata = inbuf
LVAL	1549:4	1549:4	6	tif -> tif_rawdata
FIELD	1549:4	1549:9	7	tif -> tif_rawdata
LEAF_NODE	1549:4	1549:4	8	tif
LEAF_NODE	1549:7	1549:7	8	->
LEAF_NODE	1549:9	1549:9	8	tif_rawdata
ASSIGN_OP	1549:21	1549:21	6	=
LEAF_NODE	1549:21	1549:21	7	=
RVAL	1549:23	1549:23	6	inbuf
FIELD	1549:23	1549:23	7	inbuf
LEAF_NODE	1549:23	1549:23	8	inbuf
LEAF_NODE	1549:28	1549:28	4	;
EXPR_STATEMENT	1550:4	1550:27	3	tif -> tif_rawdataoff = 0 ;
EXPR	1550:4	1550:4	4	tif -> tif_rawdataoff = 0
ASSIGN	1550:4	1550:26	5	tif -> tif_rawdataoff = 0
LVAL	1550:4	1550:4	6	tif -> tif_rawdataoff
FIELD	1550:4	1550:9	7	tif -> tif_rawdataoff
LEAF_NODE	1550:4	1550:4	8	tif
LEAF_NODE	1550:7	1550:7	8	->
LEAF_NODE	1550:9	1550:9	8	tif_rawdataoff
ASSIGN_OP	1550:24	1550:24	6	=
LEAF_NODE	1550:24	1550:24	7	=
RVAL	1550:26	1550:26	6	0
FIELD	1550:26	1550:26	7	0
LEAF_NODE	1550:26	1550:26	8	0
LEAF_NODE	1550:27	1550:27	4	;
EXPR_STATEMENT	1551:4	1551:35	3	tif -> tif_rawdataloaded = insize ;
EXPR	1551:4	1551:4	4	tif -> tif_rawdataloaded = insize
ASSIGN	1551:4	1551:29	5	tif -> tif_rawdataloaded = insize
LVAL	1551:4	1551:4	6	tif -> tif_rawdataloaded
FIELD	1551:4	1551:9	7	tif -> tif_rawdataloaded
LEAF_NODE	1551:4	1551:4	8	tif
LEAF_NODE	1551:7	1551:7	8	->
LEAF_NODE	1551:9	1551:9	8	tif_rawdataloaded
ASSIGN_OP	1551:27	1551:27	6	=
LEAF_NODE	1551:27	1551:27	7	=
RVAL	1551:29	1551:29	6	insize
FIELD	1551:29	1551:29	7	insize
LEAF_NODE	1551:29	1551:29	8	insize
LEAF_NODE	1551:35	1551:35	4	;
SELECTION	1553:4	1555:4	3	
KEYWORD	1553:4	1553:4	4	if
LEAF_NODE	1553:4	1553:4	5	if
LEAF_NODE	1553:7	1553:7	4	(
CONDITION	1553:8	1553:8	4	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1553:8	1553:8	5	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	1553:8	1554:8	6	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1553:8	1553:8	7	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	1553:8	1553:9	8	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	1553:8	1553:8	9	!
LEAF_NODE	1553:8	1553:8	10	!
FUNCTION_CALL	1553:9	1553:42	9	isFillOrder ( tif , td -> td_fillorder )
CALLEE	1553:9	1553:9	10	isFillOrder
LEAF_NODE	1553:9	1553:9	11	isFillOrder
LEAF_NODE	1553:20	1553:20	10	(
ARGUMENT	1553:21	1553:21	10	tif
FIELD	1553:21	1553:21	11	tif
LEAF_NODE	1553:21	1553:21	12	tif
LEAF_NODE	1553:24	1553:24	10	,
ARGUMENT	1553:26	1553:26	10	td -> td_fillorder
FIELD	1553:26	1553:30	11	td -> td_fillorder
LEAF_NODE	1553:26	1553:26	12	td
LEAF_NODE	1553:28	1553:28	12	->
LEAF_NODE	1553:30	1553:30	12	td_fillorder
LEAF_NODE	1553:42	1553:42	10	)
LEAF_NODE	1553:44	1553:44	7	&&
EXPR	1554:8	1554:44	7	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	1554:8	1554:8	8	(
FIELD	1554:9	1554:14	8	tif -> tif_flags
LEAF_NODE	1554:9	1554:9	9	tif
LEAF_NODE	1554:12	1554:12	9	->
LEAF_NODE	1554:14	1554:14	9	tif_flags
LEAF_NODE	1554:24	1554:24	8	&
FIELD	1554:26	1554:26	8	TIFF_NOBITREV
LEAF_NODE	1554:26	1554:26	9	TIFF_NOBITREV
LEAF_NODE	1554:39	1554:39	8	)
EQ_OPERATOR	1554:41	1554:41	8	==
LEAF_NODE	1554:41	1554:41	9	==
FIELD	1554:44	1554:44	8	0
LEAF_NODE	1554:44	1554:44	9	0
LEAF_NODE	1554:45	1554:45	4	)
STATEMENTS	1555:4	1557:4	4	
LEAF_NODE	1555:4	1555:4	5	{
STATEMENTS	1556:8	1556:8	5	
EXPR_STATEMENT	1556:8	1556:38	6	TIFFReverseBits ( inbuf , insize ) ;
EXPR	1556:8	1556:8	7	TIFFReverseBits ( inbuf , insize )
FUNCTION_CALL	1556:8	1556:37	8	TIFFReverseBits ( inbuf , insize )
CALLEE	1556:8	1556:8	9	TIFFReverseBits
LEAF_NODE	1556:8	1556:8	10	TIFFReverseBits
LEAF_NODE	1556:23	1556:23	9	(
ARGUMENT	1556:24	1556:24	9	inbuf
FIELD	1556:24	1556:24	10	inbuf
LEAF_NODE	1556:24	1556:24	11	inbuf
LEAF_NODE	1556:29	1556:29	9	,
ARGUMENT	1556:31	1556:31	9	insize
FIELD	1556:31	1556:31	10	insize
LEAF_NODE	1556:31	1556:31	11	insize
LEAF_NODE	1556:37	1556:37	9	)
LEAF_NODE	1556:38	1556:38	7	;
LEAF_NODE	1557:4	1557:4	5	}
SELECTION	1559:4	1560:4	3	
KEYWORD	1559:4	1559:4	4	if
LEAF_NODE	1559:4	1559:4	5	if
LEAF_NODE	1559:6	1559:6	4	(
CONDITION	1559:8	1559:8	4	TIFFIsTiled ( tif )
EXPR	1559:8	1559:8	5	TIFFIsTiled ( tif )
FUNCTION_CALL	1559:8	1559:23	6	TIFFIsTiled ( tif )
CALLEE	1559:8	1559:8	7	TIFFIsTiled
LEAF_NODE	1559:8	1559:8	8	TIFFIsTiled
LEAF_NODE	1559:19	1559:19	7	(
ARGUMENT	1559:20	1559:20	7	tif
FIELD	1559:20	1559:20	8	tif
LEAF_NODE	1559:20	1559:20	9	tif
LEAF_NODE	1559:23	1559:23	7	)
LEAF_NODE	1559:25	1559:25	4	)
STATEMENTS	1560:4	1567:4	4	
LEAF_NODE	1560:4	1560:4	5	{
STATEMENTS	1561:8	1561:8	5	
SELECTION	1561:8	1564:8	6	
KEYWORD	1561:8	1561:8	7	if
LEAF_NODE	1561:8	1561:8	8	if
LEAF_NODE	1561:10	1561:10	7	(
CONDITION	1561:12	1561:12	7	! TIFFStartTile ( tif , strile ) || ! ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / td -> td_stripsperimage ) )
EXPR	1561:12	1561:12	8	! TIFFStartTile ( tif , strile ) || ! ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / td -> td_stripsperimage ) )
OR	1561:12	1562:12	9	! TIFFStartTile ( tif , strile ) || ! ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / td -> td_stripsperimage ) )
EXPR	1561:12	1561:12	10	! TIFFStartTile ( tif , strile )
UNARY_EXPR	1561:12	1561:13	11	! TIFFStartTile ( tif , strile )
UNARY_OPERATOR	1561:12	1561:12	12	!
LEAF_NODE	1561:12	1561:12	13	!
FUNCTION_CALL	1561:13	1561:38	12	TIFFStartTile ( tif , strile )
CALLEE	1561:13	1561:13	13	TIFFStartTile
LEAF_NODE	1561:13	1561:13	14	TIFFStartTile
LEAF_NODE	1561:26	1561:26	13	(
ARGUMENT	1561:27	1561:27	13	tif
FIELD	1561:27	1561:27	14	tif
LEAF_NODE	1561:27	1561:27	15	tif
LEAF_NODE	1561:30	1561:30	13	,
ARGUMENT	1561:32	1561:32	13	strile
FIELD	1561:32	1561:32	14	strile
LEAF_NODE	1561:32	1561:32	15	strile
LEAF_NODE	1561:38	1561:38	13	)
LEAF_NODE	1561:40	1561:40	10	||
EXPR	1562:12	1562:12	10	! ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / td -> td_stripsperimage ) )
UNARY_EXPR	1562:12	1562:13	11	! ( * tif -> tif_decodetile ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / td -> td_stripsperimage ) )
UNARY_OPERATOR	1562:12	1562:12	12	!
LEAF_NODE	1562:12	1562:12	13	!
FUNCTION_CALL	1562:13	1563:74	12	( * tif -> tif_decodetile ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / td -> td_stripsperimage ) )
CALLEE	1562:13	1562:34	13	( * tif -> tif_decodetile )
LEAF_NODE	1562:13	1562:13	14	(
UNARY_EXPR	1562:14	1562:15	14	* tif -> tif_decodetile
UNARY_OPERATOR	1562:14	1562:14	15	*
LEAF_NODE	1562:14	1562:14	16	*
FIELD	1562:15	1562:20	15	tif -> tif_decodetile
LEAF_NODE	1562:15	1562:15	16	tif
LEAF_NODE	1562:18	1562:18	16	->
LEAF_NODE	1562:20	1562:20	16	tif_decodetile
LEAF_NODE	1562:34	1562:34	14	)
LEAF_NODE	1562:35	1562:35	13	(
ARGUMENT	1562:36	1562:36	13	tif
FIELD	1562:36	1562:36	14	tif
LEAF_NODE	1562:36	1562:36	15	tif
LEAF_NODE	1562:39	1562:39	13	,
ARGUMENT	1562:41	1562:50	13	( uint8 * ) outbuf
LEAF_NODE	1562:41	1562:41	14	(
TYPE_NAME	1562:42	1562:42	14	uint8
LEAF_NODE	1562:42	1562:42	15	uint8
LEAF_NODE	1562:47	1562:47	14	*
LEAF_NODE	1562:48	1562:48	14	)
FIELD	1562:50	1562:50	14	outbuf
LEAF_NODE	1562:50	1562:50	15	outbuf
LEAF_NODE	1562:56	1562:56	13	,
ARGUMENT	1562:58	1562:58	13	outsize
FIELD	1562:58	1562:58	14	outsize
LEAF_NODE	1562:58	1562:58	15	outsize
LEAF_NODE	1562:65	1562:65	13	,
ARGUMENT	1563:36	1563:73	13	( uint16 ) ( strile / td -> td_stripsperimage )
LEAF_NODE	1563:36	1563:36	14	(
TYPE_NAME	1563:37	1563:37	14	uint16
LEAF_NODE	1563:37	1563:37	15	uint16
LEAF_NODE	1563:43	1563:43	14	)
LEAF_NODE	1563:44	1563:44	14	(
FIELD	1563:45	1563:45	14	strile
LEAF_NODE	1563:45	1563:45	15	strile
LEAF_NODE	1563:51	1563:51	14	/
FIELD	1563:52	1563:56	14	td -> td_stripsperimage
LEAF_NODE	1563:52	1563:52	15	td
LEAF_NODE	1563:54	1563:54	15	->
LEAF_NODE	1563:56	1563:56	15	td_stripsperimage
LEAF_NODE	1563:73	1563:73	14	)
LEAF_NODE	1563:74	1563:74	13	)
LEAF_NODE	1563:76	1563:76	7	)
STATEMENTS	1564:8	1566:8	7	
LEAF_NODE	1564:8	1564:8	8	{
STATEMENTS	1565:12	1565:12	8	
EXPR_STATEMENT	1565:12	1565:19	9	ret = 0 ;
EXPR	1565:12	1565:12	10	ret = 0
ASSIGN	1565:12	1565:18	11	ret = 0
LVAL	1565:12	1565:12	12	ret
FIELD	1565:12	1565:12	13	ret
LEAF_NODE	1565:12	1565:12	14	ret
ASSIGN_OP	1565:16	1565:16	12	=
LEAF_NODE	1565:16	1565:16	13	=
RVAL	1565:18	1565:18	12	0
FIELD	1565:18	1565:18	13	0
LEAF_NODE	1565:18	1565:18	14	0
LEAF_NODE	1565:19	1565:19	10	;
LEAF_NODE	1566:8	1566:8	8	}
LEAF_NODE	1567:4	1567:4	5	}
SELECTION	1568:4	1569:4	3	
KEYWORD	1568:4	1568:4	4	else
LEAF_NODE	1568:4	1568:4	5	else
STATEMENTS	1569:4	1581:4	4	
LEAF_NODE	1569:4	1569:4	5	{
STATEMENTS	1570:8	1575:8	5	
SIMPLE_DECL	1570:8	1570:47	6	uint32 rowsperstrip ; rowsperstrip = td -> td_rowsperstrip ;
VAR_DECL	1570:8	1570:15	7	uint32 rowsperstrip ; rowsperstrip = td -> td_rowsperstrip
TYPE	1570:8	1570:8	8	uint32
TYPE_NAME	1570:8	1570:8	9	uint32
LEAF_NODE	1570:8	1570:8	10	uint32
NAME	1570:15	1570:15	8	rowsperstrip
LEAF_NODE	1570:15	1570:15	9	rowsperstrip
LEAF_NODE	0:0	0:0	8	;
INIT	1570:15	1570:15	8	rowsperstrip = td -> td_rowsperstrip
ASSIGN	1570:15	1570:28	9	rowsperstrip = td -> td_rowsperstrip
LVAL	1570:15	1570:15	10	rowsperstrip
NAME	1570:15	1570:15	11	rowsperstrip
LEAF_NODE	1570:15	1570:15	12	rowsperstrip
ASSIGN_OP	1570:27	1570:27	10	=
LEAF_NODE	1570:27	1570:27	11	=
RVAL	1570:28	1570:28	10	td -> td_rowsperstrip
FIELD	1570:28	1570:32	11	td -> td_rowsperstrip
LEAF_NODE	1570:28	1570:28	12	td
LEAF_NODE	1570:30	1570:30	12	->
LEAF_NODE	1570:32	1570:32	12	td_rowsperstrip
LEAF_NODE	1570:47	1570:47	7	;
SIMPLE_DECL	1571:8	1571:29	6	uint32 stripsperplane ;
VAR_DECL	1571:8	1571:15	7	uint32 stripsperplane
TYPE	1571:8	1571:8	8	uint32
TYPE_NAME	1571:8	1571:8	9	uint32
LEAF_NODE	1571:8	1571:8	10	uint32
NAME	1571:15	1571:15	8	stripsperplane
LEAF_NODE	1571:15	1571:15	9	stripsperplane
LEAF_NODE	1571:29	1571:29	7	;
SELECTION	1572:8	1573:12	6	
KEYWORD	1572:8	1572:8	7	if
LEAF_NODE	1572:8	1572:8	8	if
LEAF_NODE	1572:11	1572:11	7	(
CONDITION	1572:12	1572:12	7	rowsperstrip > td -> td_imagelength
EXPR	1572:12	1572:25	8	rowsperstrip > td -> td_imagelength
FIELD	1572:12	1572:12	9	rowsperstrip
LEAF_NODE	1572:12	1572:12	10	rowsperstrip
REL_OPERATOR	1572:24	1572:24	9	>
LEAF_NODE	1572:24	1572:24	10	>
FIELD	1572:25	1572:29	9	td -> td_imagelength
LEAF_NODE	1572:25	1572:25	10	td
LEAF_NODE	1572:27	1572:27	10	->
LEAF_NODE	1572:29	1572:29	10	td_imagelength
LEAF_NODE	1572:43	1572:43	7	)
STATEMENTS	1573:12	1573:12	7	
EXPR_STATEMENT	1573:12	1573:43	8	rowsperstrip = td -> td_imagelength ;
EXPR	1573:12	1573:12	9	rowsperstrip = td -> td_imagelength
ASSIGN	1573:12	1573:25	10	rowsperstrip = td -> td_imagelength
LVAL	1573:12	1573:12	11	rowsperstrip
FIELD	1573:12	1573:12	12	rowsperstrip
LEAF_NODE	1573:12	1573:12	13	rowsperstrip
ASSIGN_OP	1573:24	1573:24	11	=
LEAF_NODE	1573:24	1573:24	12	=
RVAL	1573:25	1573:25	11	td -> td_imagelength
FIELD	1573:25	1573:29	12	td -> td_imagelength
LEAF_NODE	1573:25	1573:25	13	td
LEAF_NODE	1573:27	1573:27	13	->
LEAF_NODE	1573:29	1573:29	13	td_imagelength
LEAF_NODE	1573:43	1573:43	9	;
EXPR_STATEMENT	1574:8	1574:87	6	stripsperplane = TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip ) ;
EXPR	1574:8	1574:8	7	stripsperplane = TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
ASSIGN	1574:8	1574:24	8	stripsperplane = TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
LVAL	1574:8	1574:8	9	stripsperplane
FIELD	1574:8	1574:8	10	stripsperplane
LEAF_NODE	1574:8	1574:8	11	stripsperplane
ASSIGN_OP	1574:22	1574:22	9	=
LEAF_NODE	1574:22	1574:22	10	=
RVAL	1574:24	1574:24	9	TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
FUNCTION_CALL	1574:24	1574:86	10	TIFFhowmany_32_maxuint_compat ( td -> td_imagelength , rowsperstrip )
CALLEE	1574:24	1574:24	11	TIFFhowmany_32_maxuint_compat
LEAF_NODE	1574:24	1574:24	12	TIFFhowmany_32_maxuint_compat
LEAF_NODE	1574:53	1574:53	11	(
ARGUMENT	1574:54	1574:54	11	td -> td_imagelength
FIELD	1574:54	1574:58	12	td -> td_imagelength
LEAF_NODE	1574:54	1574:54	13	td
LEAF_NODE	1574:56	1574:56	13	->
LEAF_NODE	1574:58	1574:58	13	td_imagelength
LEAF_NODE	1574:72	1574:72	11	,
ARGUMENT	1574:74	1574:74	11	rowsperstrip
FIELD	1574:74	1574:74	12	rowsperstrip
LEAF_NODE	1574:74	1574:74	13	rowsperstrip
LEAF_NODE	1574:86	1574:86	11	)
LEAF_NODE	1574:87	1574:87	7	;
SELECTION	1575:8	1578:8	6	
KEYWORD	1575:8	1575:8	7	if
LEAF_NODE	1575:8	1575:8	8	if
LEAF_NODE	1575:10	1575:10	7	(
CONDITION	1575:12	1575:12	7	! TIFFStartStrip ( tif , strile ) || ! ( * tif -> tif_decodestrip ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / stripsperplane ) )
EXPR	1575:12	1575:12	8	! TIFFStartStrip ( tif , strile ) || ! ( * tif -> tif_decodestrip ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / stripsperplane ) )
OR	1575:12	1576:12	9	! TIFFStartStrip ( tif , strile ) || ! ( * tif -> tif_decodestrip ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / stripsperplane ) )
EXPR	1575:12	1575:12	10	! TIFFStartStrip ( tif , strile )
UNARY_EXPR	1575:12	1575:13	11	! TIFFStartStrip ( tif , strile )
UNARY_OPERATOR	1575:12	1575:12	12	!
LEAF_NODE	1575:12	1575:12	13	!
FUNCTION_CALL	1575:13	1575:39	12	TIFFStartStrip ( tif , strile )
CALLEE	1575:13	1575:13	13	TIFFStartStrip
LEAF_NODE	1575:13	1575:13	14	TIFFStartStrip
LEAF_NODE	1575:27	1575:27	13	(
ARGUMENT	1575:28	1575:28	13	tif
FIELD	1575:28	1575:28	14	tif
LEAF_NODE	1575:28	1575:28	15	tif
LEAF_NODE	1575:31	1575:31	13	,
ARGUMENT	1575:33	1575:33	13	strile
FIELD	1575:33	1575:33	14	strile
LEAF_NODE	1575:33	1575:33	15	strile
LEAF_NODE	1575:39	1575:39	13	)
LEAF_NODE	1575:41	1575:41	10	||
EXPR	1576:12	1576:12	10	! ( * tif -> tif_decodestrip ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / stripsperplane ) )
UNARY_EXPR	1576:12	1576:13	11	! ( * tif -> tif_decodestrip ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / stripsperplane ) )
UNARY_OPERATOR	1576:12	1576:12	12	!
LEAF_NODE	1576:12	1576:12	13	!
FUNCTION_CALL	1576:13	1577:68	12	( * tif -> tif_decodestrip ) ( tif , ( uint8 * ) outbuf , outsize , ( uint16 ) ( strile / stripsperplane ) )
CALLEE	1576:13	1576:35	13	( * tif -> tif_decodestrip )
LEAF_NODE	1576:13	1576:13	14	(
UNARY_EXPR	1576:14	1576:15	14	* tif -> tif_decodestrip
UNARY_OPERATOR	1576:14	1576:14	15	*
LEAF_NODE	1576:14	1576:14	16	*
FIELD	1576:15	1576:20	15	tif -> tif_decodestrip
LEAF_NODE	1576:15	1576:15	16	tif
LEAF_NODE	1576:18	1576:18	16	->
LEAF_NODE	1576:20	1576:20	16	tif_decodestrip
LEAF_NODE	1576:35	1576:35	14	)
LEAF_NODE	1576:36	1576:36	13	(
ARGUMENT	1576:37	1576:37	13	tif
FIELD	1576:37	1576:37	14	tif
LEAF_NODE	1576:37	1576:37	15	tif
LEAF_NODE	1576:40	1576:40	13	,
ARGUMENT	1576:42	1576:51	13	( uint8 * ) outbuf
LEAF_NODE	1576:42	1576:42	14	(
TYPE_NAME	1576:43	1576:43	14	uint8
LEAF_NODE	1576:43	1576:43	15	uint8
LEAF_NODE	1576:48	1576:48	14	*
LEAF_NODE	1576:49	1576:49	14	)
FIELD	1576:51	1576:51	14	outbuf
LEAF_NODE	1576:51	1576:51	15	outbuf
LEAF_NODE	1576:57	1576:57	13	,
ARGUMENT	1576:59	1576:59	13	outsize
FIELD	1576:59	1576:59	14	outsize
LEAF_NODE	1576:59	1576:59	15	outsize
LEAF_NODE	1576:66	1576:66	13	,
ARGUMENT	1577:37	1577:67	13	( uint16 ) ( strile / stripsperplane )
LEAF_NODE	1577:37	1577:37	14	(
TYPE_NAME	1577:38	1577:38	14	uint16
LEAF_NODE	1577:38	1577:38	15	uint16
LEAF_NODE	1577:44	1577:44	14	)
LEAF_NODE	1577:45	1577:45	14	(
FIELD	1577:46	1577:46	14	strile
LEAF_NODE	1577:46	1577:46	15	strile
LEAF_NODE	1577:52	1577:52	14	/
FIELD	1577:53	1577:53	14	stripsperplane
LEAF_NODE	1577:53	1577:53	15	stripsperplane
LEAF_NODE	1577:67	1577:67	14	)
LEAF_NODE	1577:68	1577:68	13	)
LEAF_NODE	1577:70	1577:70	7	)
STATEMENTS	1578:8	1580:8	7	
LEAF_NODE	1578:8	1578:8	8	{
STATEMENTS	1579:12	1579:12	8	
EXPR_STATEMENT	1579:12	1579:19	9	ret = 0 ;
EXPR	1579:12	1579:12	10	ret = 0
ASSIGN	1579:12	1579:18	11	ret = 0
LVAL	1579:12	1579:12	12	ret
FIELD	1579:12	1579:12	13	ret
LEAF_NODE	1579:12	1579:12	14	ret
ASSIGN_OP	1579:16	1579:16	12	=
LEAF_NODE	1579:16	1579:16	13	=
RVAL	1579:18	1579:18	12	0
FIELD	1579:18	1579:18	13	0
LEAF_NODE	1579:18	1579:18	14	0
LEAF_NODE	1579:19	1579:19	10	;
LEAF_NODE	1580:8	1580:8	8	}
LEAF_NODE	1581:4	1581:4	5	}
SELECTION	1582:4	1583:4	3	
KEYWORD	1582:4	1582:4	4	if
LEAF_NODE	1582:4	1582:4	5	if
LEAF_NODE	1582:6	1582:6	4	(
CONDITION	1582:8	1582:8	4	ret
EXPR	1582:8	1582:8	5	ret
FIELD	1582:8	1582:8	6	ret
LEAF_NODE	1582:8	1582:8	7	ret
LEAF_NODE	1582:12	1582:12	4	)
STATEMENTS	1583:4	1585:4	4	
LEAF_NODE	1583:4	1583:4	5	{
STATEMENTS	1584:8	1584:8	5	
EXPR_STATEMENT	1584:8	1584:61	6	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) outbuf , outsize ) ;
EXPR	1584:8	1584:8	7	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) outbuf , outsize )
FUNCTION_CALL	1584:8	1584:60	8	( * tif -> tif_postdecode ) ( tif , ( uint8 * ) outbuf , outsize )
CALLEE	1584:8	1584:29	9	( * tif -> tif_postdecode )
LEAF_NODE	1584:8	1584:8	10	(
UNARY_EXPR	1584:9	1584:10	10	* tif -> tif_postdecode
UNARY_OPERATOR	1584:9	1584:9	11	*
LEAF_NODE	1584:9	1584:9	12	*
FIELD	1584:10	1584:15	11	tif -> tif_postdecode
LEAF_NODE	1584:10	1584:10	12	tif
LEAF_NODE	1584:13	1584:13	12	->
LEAF_NODE	1584:15	1584:15	12	tif_postdecode
LEAF_NODE	1584:29	1584:29	10	)
LEAF_NODE	1584:30	1584:30	9	(
ARGUMENT	1584:31	1584:31	9	tif
FIELD	1584:31	1584:31	10	tif
LEAF_NODE	1584:31	1584:31	11	tif
LEAF_NODE	1584:34	1584:34	9	,
ARGUMENT	1584:36	1584:45	9	( uint8 * ) outbuf
LEAF_NODE	1584:36	1584:36	10	(
TYPE_NAME	1584:37	1584:37	10	uint8
LEAF_NODE	1584:37	1584:37	11	uint8
LEAF_NODE	1584:42	1584:42	10	*
LEAF_NODE	1584:43	1584:43	10	)
FIELD	1584:45	1584:45	10	outbuf
LEAF_NODE	1584:45	1584:45	11	outbuf
LEAF_NODE	1584:51	1584:51	9	,
ARGUMENT	1584:53	1584:53	9	outsize
FIELD	1584:53	1584:53	10	outsize
LEAF_NODE	1584:53	1584:53	11	outsize
LEAF_NODE	1584:60	1584:60	9	)
LEAF_NODE	1584:61	1584:61	7	;
LEAF_NODE	1585:4	1585:4	5	}
SELECTION	1587:4	1589:4	3	
KEYWORD	1587:4	1587:4	4	if
LEAF_NODE	1587:4	1587:4	5	if
LEAF_NODE	1587:7	1587:7	4	(
CONDITION	1587:8	1587:8	4	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1587:8	1587:8	5	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
AND	1587:8	1588:8	6	! isFillOrder ( tif , td -> td_fillorder ) && ( tif -> tif_flags & TIFF_NOBITREV ) == 0
EXPR	1587:8	1587:8	7	! isFillOrder ( tif , td -> td_fillorder )
UNARY_EXPR	1587:8	1587:9	8	! isFillOrder ( tif , td -> td_fillorder )
UNARY_OPERATOR	1587:8	1587:8	9	!
LEAF_NODE	1587:8	1587:8	10	!
FUNCTION_CALL	1587:9	1587:42	9	isFillOrder ( tif , td -> td_fillorder )
CALLEE	1587:9	1587:9	10	isFillOrder
LEAF_NODE	1587:9	1587:9	11	isFillOrder
LEAF_NODE	1587:20	1587:20	10	(
ARGUMENT	1587:21	1587:21	10	tif
FIELD	1587:21	1587:21	11	tif
LEAF_NODE	1587:21	1587:21	12	tif
LEAF_NODE	1587:24	1587:24	10	,
ARGUMENT	1587:26	1587:26	10	td -> td_fillorder
FIELD	1587:26	1587:30	11	td -> td_fillorder
LEAF_NODE	1587:26	1587:26	12	td
LEAF_NODE	1587:28	1587:28	12	->
LEAF_NODE	1587:30	1587:30	12	td_fillorder
LEAF_NODE	1587:42	1587:42	10	)
LEAF_NODE	1587:44	1587:44	7	&&
EXPR	1588:8	1588:44	7	( tif -> tif_flags & TIFF_NOBITREV ) == 0
LEAF_NODE	1588:8	1588:8	8	(
FIELD	1588:9	1588:14	8	tif -> tif_flags
LEAF_NODE	1588:9	1588:9	9	tif
LEAF_NODE	1588:12	1588:12	9	->
LEAF_NODE	1588:14	1588:14	9	tif_flags
LEAF_NODE	1588:24	1588:24	8	&
FIELD	1588:26	1588:26	8	TIFF_NOBITREV
LEAF_NODE	1588:26	1588:26	9	TIFF_NOBITREV
LEAF_NODE	1588:39	1588:39	8	)
EQ_OPERATOR	1588:41	1588:41	8	==
LEAF_NODE	1588:41	1588:41	9	==
FIELD	1588:44	1588:44	8	0
LEAF_NODE	1588:44	1588:44	9	0
LEAF_NODE	1588:45	1588:45	4	)
STATEMENTS	1589:4	1591:4	4	
LEAF_NODE	1589:4	1589:4	5	{
STATEMENTS	1590:8	1590:8	5	
EXPR_STATEMENT	1590:8	1590:38	6	TIFFReverseBits ( inbuf , insize ) ;
EXPR	1590:8	1590:8	7	TIFFReverseBits ( inbuf , insize )
FUNCTION_CALL	1590:8	1590:37	8	TIFFReverseBits ( inbuf , insize )
CALLEE	1590:8	1590:8	9	TIFFReverseBits
LEAF_NODE	1590:8	1590:8	10	TIFFReverseBits
LEAF_NODE	1590:23	1590:23	9	(
ARGUMENT	1590:24	1590:24	9	inbuf
FIELD	1590:24	1590:24	10	inbuf
LEAF_NODE	1590:24	1590:24	11	inbuf
LEAF_NODE	1590:29	1590:29	9	,
ARGUMENT	1590:31	1590:31	9	insize
FIELD	1590:31	1590:31	10	insize
LEAF_NODE	1590:31	1590:31	11	insize
LEAF_NODE	1590:37	1590:37	9	)
LEAF_NODE	1590:38	1590:38	7	;
LEAF_NODE	1591:4	1591:4	5	}
EXPR_STATEMENT	1593:4	1593:34	3	tif -> tif_flags = old_tif_flags ;
EXPR	1593:4	1593:4	4	tif -> tif_flags = old_tif_flags
ASSIGN	1593:4	1593:21	5	tif -> tif_flags = old_tif_flags
LVAL	1593:4	1593:4	6	tif -> tif_flags
FIELD	1593:4	1593:9	7	tif -> tif_flags
LEAF_NODE	1593:4	1593:4	8	tif
LEAF_NODE	1593:7	1593:7	8	->
LEAF_NODE	1593:9	1593:9	8	tif_flags
ASSIGN_OP	1593:19	1593:19	6	=
LEAF_NODE	1593:19	1593:19	7	=
RVAL	1593:21	1593:21	6	old_tif_flags
FIELD	1593:21	1593:21	7	old_tif_flags
LEAF_NODE	1593:21	1593:21	8	old_tif_flags
LEAF_NODE	1593:34	1593:34	4	;
EXPR_STATEMENT	1594:4	1594:42	3	tif -> tif_rawdatasize = old_rawdatasize ;
EXPR	1594:4	1594:4	4	tif -> tif_rawdatasize = old_rawdatasize
ASSIGN	1594:4	1594:27	5	tif -> tif_rawdatasize = old_rawdatasize
LVAL	1594:4	1594:4	6	tif -> tif_rawdatasize
FIELD	1594:4	1594:9	7	tif -> tif_rawdatasize
LEAF_NODE	1594:4	1594:4	8	tif
LEAF_NODE	1594:7	1594:7	8	->
LEAF_NODE	1594:9	1594:9	8	tif_rawdatasize
ASSIGN_OP	1594:25	1594:25	6	=
LEAF_NODE	1594:25	1594:25	7	=
RVAL	1594:27	1594:27	6	old_rawdatasize
FIELD	1594:27	1594:27	7	old_rawdatasize
LEAF_NODE	1594:27	1594:27	8	old_rawdatasize
LEAF_NODE	1594:42	1594:42	4	;
EXPR_STATEMENT	1595:4	1595:34	3	tif -> tif_rawdata = old_rawdata ;
EXPR	1595:4	1595:4	4	tif -> tif_rawdata = old_rawdata
ASSIGN	1595:4	1595:23	5	tif -> tif_rawdata = old_rawdata
LVAL	1595:4	1595:4	6	tif -> tif_rawdata
FIELD	1595:4	1595:9	7	tif -> tif_rawdata
LEAF_NODE	1595:4	1595:4	8	tif
LEAF_NODE	1595:7	1595:7	8	->
LEAF_NODE	1595:9	1595:9	8	tif_rawdata
ASSIGN_OP	1595:21	1595:21	6	=
LEAF_NODE	1595:21	1595:21	7	=
RVAL	1595:23	1595:23	6	old_rawdata
FIELD	1595:23	1595:23	7	old_rawdata
LEAF_NODE	1595:23	1595:23	8	old_rawdata
LEAF_NODE	1595:34	1595:34	4	;
EXPR_STATEMENT	1596:4	1596:27	3	tif -> tif_rawdataoff = 0 ;
EXPR	1596:4	1596:4	4	tif -> tif_rawdataoff = 0
ASSIGN	1596:4	1596:26	5	tif -> tif_rawdataoff = 0
LVAL	1596:4	1596:4	6	tif -> tif_rawdataoff
FIELD	1596:4	1596:9	7	tif -> tif_rawdataoff
LEAF_NODE	1596:4	1596:4	8	tif
LEAF_NODE	1596:7	1596:7	8	->
LEAF_NODE	1596:9	1596:9	8	tif_rawdataoff
ASSIGN_OP	1596:24	1596:24	6	=
LEAF_NODE	1596:24	1596:24	7	=
RVAL	1596:26	1596:26	6	0
FIELD	1596:26	1596:26	7	0
LEAF_NODE	1596:26	1596:26	8	0
LEAF_NODE	1596:27	1596:27	4	;
EXPR_STATEMENT	1597:4	1597:30	3	tif -> tif_rawdataloaded = 0 ;
EXPR	1597:4	1597:4	4	tif -> tif_rawdataloaded = 0
ASSIGN	1597:4	1597:29	5	tif -> tif_rawdataloaded = 0
LVAL	1597:4	1597:4	6	tif -> tif_rawdataloaded
FIELD	1597:4	1597:9	7	tif -> tif_rawdataloaded
LEAF_NODE	1597:4	1597:4	8	tif
LEAF_NODE	1597:7	1597:7	8	->
LEAF_NODE	1597:9	1597:9	8	tif_rawdataloaded
ASSIGN_OP	1597:27	1597:27	6	=
LEAF_NODE	1597:27	1597:27	7	=
RVAL	1597:29	1597:29	6	0
FIELD	1597:29	1597:29	7	0
LEAF_NODE	1597:29	1597:29	8	0
LEAF_NODE	1597:30	1597:30	4	;
JUMP_STATEMENT	1599:4	1599:14	3	return ret ;
KEYWORD	1599:4	1599:4	4	return
LEAF_NODE	1599:4	1599:4	5	return
DESTINATION	1599:11	1599:11	4	ret
EXPR	1599:11	1599:11	5	ret
FIELD	1599:11	1599:11	6	ret
LEAF_NODE	1599:11	1599:11	7	ret
LEAF_NODE	1599:14	1599:14	4	;
LEAF_NODE	1600:0	1600:0	2	}
FUNCTION_DEF	1602:0	1606:0	1	
RETURN_TYPE	1602:0	1602:0	2	void
TYPE_NAME	1602:0	1602:0	3	void
LEAF_NODE	1602:0	1602:0	4	void
FUNCTION_NAME	1603:0	1603:0	2	_TIFFNoPostDecode
LEAF_NODE	1603:0	1603:0	3	_TIFFNoPostDecode
PARAMETER_LIST	1603:17	1603:52	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	1603:17	1603:17	3	(
PARAMETER_DECL	1603:18	1603:24	3	TIFF * tif
TYPE	1603:18	1603:22	4	TIFF *
TYPE_NAME	1603:18	1603:18	5	TIFF
LEAF_NODE	1603:18	1603:18	6	TIFF
POINTER	1603:22	1603:22	5	*
LEAF_NODE	1603:22	1603:22	6	*
NAME	1603:24	1603:24	4	tif
LEAF_NODE	1603:24	1603:24	5	tif
LEAF_NODE	1603:27	1603:27	3	,
PARAMETER_DECL	1603:29	1603:36	3	uint8 * buf
TYPE	1603:29	1603:34	4	uint8 *
TYPE_NAME	1603:29	1603:29	5	uint8
LEAF_NODE	1603:29	1603:29	6	uint8
POINTER	1603:34	1603:34	5	*
LEAF_NODE	1603:34	1603:34	6	*
NAME	1603:36	1603:36	4	buf
LEAF_NODE	1603:36	1603:36	5	buf
LEAF_NODE	1603:39	1603:39	3	,
PARAMETER_DECL	1603:41	1603:50	3	tmsize_t cc
TYPE	1603:41	1603:41	4	tmsize_t
TYPE_NAME	1603:41	1603:41	5	tmsize_t
LEAF_NODE	1603:41	1603:41	6	tmsize_t
NAME	1603:50	1603:50	4	cc
LEAF_NODE	1603:50	1603:50	5	cc
LEAF_NODE	1603:52	1603:52	3	)
LEAF_NODE	1604:0	1604:0	2	{
STATEMENTS	1605:4	1605:28	2	
EXPR_STATEMENT	1605:4	1605:14	3	( void ) tif ;
EXPR	1605:4	1605:11	4	( void ) tif
LEAF_NODE	1605:4	1605:4	5	(
TYPE_NAME	1605:5	1605:5	5	void
LEAF_NODE	1605:5	1605:5	6	void
LEAF_NODE	1605:9	1605:9	5	)
FIELD	1605:11	1605:11	5	tif
LEAF_NODE	1605:11	1605:11	6	tif
LEAF_NODE	1605:14	1605:14	4	;
EXPR_STATEMENT	1605:16	1605:26	3	( void ) buf ;
EXPR	1605:16	1605:23	4	( void ) buf
LEAF_NODE	1605:16	1605:16	5	(
TYPE_NAME	1605:17	1605:17	5	void
LEAF_NODE	1605:17	1605:17	6	void
LEAF_NODE	1605:21	1605:21	5	)
FIELD	1605:23	1605:23	5	buf
LEAF_NODE	1605:23	1605:23	6	buf
LEAF_NODE	1605:26	1605:26	4	;
EXPR_STATEMENT	1605:28	1605:37	3	( void ) cc ;
EXPR	1605:28	1605:35	4	( void ) cc
LEAF_NODE	1605:28	1605:28	5	(
TYPE_NAME	1605:29	1605:29	5	void
LEAF_NODE	1605:29	1605:29	6	void
LEAF_NODE	1605:33	1605:33	5	)
FIELD	1605:35	1605:35	5	cc
LEAF_NODE	1605:35	1605:35	6	cc
LEAF_NODE	1605:37	1605:37	4	;
LEAF_NODE	1606:0	1606:0	2	}
FUNCTION_DEF	1608:0	1614:0	1	
RETURN_TYPE	1608:0	1608:0	2	void
TYPE_NAME	1608:0	1608:0	3	void
LEAF_NODE	1608:0	1608:0	4	void
FUNCTION_NAME	1609:0	1609:0	2	_TIFFSwab16BitData
LEAF_NODE	1609:0	1609:0	3	_TIFFSwab16BitData
PARAMETER_LIST	1609:18	1609:53	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	1609:18	1609:18	3	(
PARAMETER_DECL	1609:19	1609:25	3	TIFF * tif
TYPE	1609:19	1609:23	4	TIFF *
TYPE_NAME	1609:19	1609:19	5	TIFF
LEAF_NODE	1609:19	1609:19	6	TIFF
POINTER	1609:23	1609:23	5	*
LEAF_NODE	1609:23	1609:23	6	*
NAME	1609:25	1609:25	4	tif
LEAF_NODE	1609:25	1609:25	5	tif
LEAF_NODE	1609:28	1609:28	3	,
PARAMETER_DECL	1609:30	1609:37	3	uint8 * buf
TYPE	1609:30	1609:35	4	uint8 *
TYPE_NAME	1609:30	1609:30	5	uint8
LEAF_NODE	1609:30	1609:30	6	uint8
POINTER	1609:35	1609:35	5	*
LEAF_NODE	1609:35	1609:35	6	*
NAME	1609:37	1609:37	4	buf
LEAF_NODE	1609:37	1609:37	5	buf
LEAF_NODE	1609:40	1609:40	3	,
PARAMETER_DECL	1609:42	1609:51	3	tmsize_t cc
TYPE	1609:42	1609:42	4	tmsize_t
TYPE_NAME	1609:42	1609:42	5	tmsize_t
LEAF_NODE	1609:42	1609:42	6	tmsize_t
NAME	1609:51	1609:51	4	cc
LEAF_NODE	1609:51	1609:51	5	cc
LEAF_NODE	1609:53	1609:53	3	)
LEAF_NODE	1610:0	1610:0	2	{
STATEMENTS	1611:4	1613:4	2	
EXPR_STATEMENT	1611:4	1611:14	3	( void ) tif ;
EXPR	1611:4	1611:11	4	( void ) tif
LEAF_NODE	1611:4	1611:4	5	(
TYPE_NAME	1611:5	1611:5	5	void
LEAF_NODE	1611:5	1611:5	6	void
LEAF_NODE	1611:9	1611:9	5	)
FIELD	1611:11	1611:11	5	tif
LEAF_NODE	1611:11	1611:11	6	tif
LEAF_NODE	1611:14	1611:14	4	;
EXPR_STATEMENT	1612:4	1612:25	3	assert ( ( cc & 1 ) == 0 ) ;
EXPR	1612:4	1612:4	4	assert ( ( cc & 1 ) == 0 )
FUNCTION_CALL	1612:4	1612:24	5	assert ( ( cc & 1 ) == 0 )
CALLEE	1612:4	1612:4	6	assert
LEAF_NODE	1612:4	1612:4	7	assert
LEAF_NODE	1612:10	1612:10	6	(
ARGUMENT	1612:11	1612:23	6	( cc & 1 ) == 0
LEAF_NODE	1612:11	1612:11	7	(
FIELD	1612:12	1612:12	7	cc
LEAF_NODE	1612:12	1612:12	8	cc
LEAF_NODE	1612:15	1612:15	7	&
FIELD	1612:17	1612:17	7	1
LEAF_NODE	1612:17	1612:17	8	1
LEAF_NODE	1612:18	1612:18	7	)
EQ_OPERATOR	1612:20	1612:20	7	==
LEAF_NODE	1612:20	1612:20	8	==
FIELD	1612:23	1612:23	7	0
LEAF_NODE	1612:23	1612:23	8	0
LEAF_NODE	1612:24	1612:24	6	)
LEAF_NODE	1612:25	1612:25	4	;
EXPR_STATEMENT	1613:4	1613:45	3	TIFFSwabArrayOfShort ( ( uint16 * ) buf , cc / 2 ) ;
EXPR	1613:4	1613:4	4	TIFFSwabArrayOfShort ( ( uint16 * ) buf , cc / 2 )
FUNCTION_CALL	1613:4	1613:44	5	TIFFSwabArrayOfShort ( ( uint16 * ) buf , cc / 2 )
CALLEE	1613:4	1613:4	6	TIFFSwabArrayOfShort
LEAF_NODE	1613:4	1613:4	7	TIFFSwabArrayOfShort
LEAF_NODE	1613:24	1613:24	6	(
ARGUMENT	1613:25	1613:35	6	( uint16 * ) buf
LEAF_NODE	1613:25	1613:25	7	(
TYPE_NAME	1613:26	1613:26	7	uint16
LEAF_NODE	1613:26	1613:26	8	uint16
LEAF_NODE	1613:32	1613:32	7	*
LEAF_NODE	1613:33	1613:33	7	)
FIELD	1613:35	1613:35	7	buf
LEAF_NODE	1613:35	1613:35	8	buf
LEAF_NODE	1613:38	1613:38	6	,
ARGUMENT	1613:40	1613:43	6	cc / 2
FIELD	1613:40	1613:40	7	cc
LEAF_NODE	1613:40	1613:40	8	cc
LEAF_NODE	1613:42	1613:42	7	/
FIELD	1613:43	1613:43	7	2
LEAF_NODE	1613:43	1613:43	8	2
LEAF_NODE	1613:44	1613:44	6	)
LEAF_NODE	1613:45	1613:45	4	;
LEAF_NODE	1614:0	1614:0	2	}
FUNCTION_DEF	1616:0	1622:0	1	
RETURN_TYPE	1616:0	1616:0	2	void
TYPE_NAME	1616:0	1616:0	3	void
LEAF_NODE	1616:0	1616:0	4	void
FUNCTION_NAME	1617:0	1617:0	2	_TIFFSwab24BitData
LEAF_NODE	1617:0	1617:0	3	_TIFFSwab24BitData
PARAMETER_LIST	1617:18	1617:53	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	1617:18	1617:18	3	(
PARAMETER_DECL	1617:19	1617:25	3	TIFF * tif
TYPE	1617:19	1617:23	4	TIFF *
TYPE_NAME	1617:19	1617:19	5	TIFF
LEAF_NODE	1617:19	1617:19	6	TIFF
POINTER	1617:23	1617:23	5	*
LEAF_NODE	1617:23	1617:23	6	*
NAME	1617:25	1617:25	4	tif
LEAF_NODE	1617:25	1617:25	5	tif
LEAF_NODE	1617:28	1617:28	3	,
PARAMETER_DECL	1617:30	1617:37	3	uint8 * buf
TYPE	1617:30	1617:35	4	uint8 *
TYPE_NAME	1617:30	1617:30	5	uint8
LEAF_NODE	1617:30	1617:30	6	uint8
POINTER	1617:35	1617:35	5	*
LEAF_NODE	1617:35	1617:35	6	*
NAME	1617:37	1617:37	4	buf
LEAF_NODE	1617:37	1617:37	5	buf
LEAF_NODE	1617:40	1617:40	3	,
PARAMETER_DECL	1617:42	1617:51	3	tmsize_t cc
TYPE	1617:42	1617:42	4	tmsize_t
TYPE_NAME	1617:42	1617:42	5	tmsize_t
LEAF_NODE	1617:42	1617:42	6	tmsize_t
NAME	1617:51	1617:51	4	cc
LEAF_NODE	1617:51	1617:51	5	cc
LEAF_NODE	1617:53	1617:53	3	)
LEAF_NODE	1618:0	1618:0	2	{
STATEMENTS	1619:4	1621:4	2	
EXPR_STATEMENT	1619:4	1619:14	3	( void ) tif ;
EXPR	1619:4	1619:11	4	( void ) tif
LEAF_NODE	1619:4	1619:4	5	(
TYPE_NAME	1619:5	1619:5	5	void
LEAF_NODE	1619:5	1619:5	6	void
LEAF_NODE	1619:9	1619:9	5	)
FIELD	1619:11	1619:11	5	tif
LEAF_NODE	1619:11	1619:11	6	tif
LEAF_NODE	1619:14	1619:14	4	;
EXPR_STATEMENT	1620:4	1620:25	3	assert ( ( cc % 3 ) == 0 ) ;
EXPR	1620:4	1620:4	4	assert ( ( cc % 3 ) == 0 )
FUNCTION_CALL	1620:4	1620:24	5	assert ( ( cc % 3 ) == 0 )
CALLEE	1620:4	1620:4	6	assert
LEAF_NODE	1620:4	1620:4	7	assert
LEAF_NODE	1620:10	1620:10	6	(
ARGUMENT	1620:11	1620:23	6	( cc % 3 ) == 0
LEAF_NODE	1620:11	1620:11	7	(
FIELD	1620:12	1620:12	7	cc
LEAF_NODE	1620:12	1620:12	8	cc
LEAF_NODE	1620:15	1620:15	7	%
FIELD	1620:17	1620:17	7	3
LEAF_NODE	1620:17	1620:17	8	3
LEAF_NODE	1620:18	1620:18	7	)
EQ_OPERATOR	1620:20	1620:20	7	==
LEAF_NODE	1620:20	1620:20	8	==
FIELD	1620:23	1620:23	7	0
LEAF_NODE	1620:23	1620:23	8	0
LEAF_NODE	1620:24	1620:24	6	)
LEAF_NODE	1620:25	1620:25	4	;
EXPR_STATEMENT	1621:4	1621:46	3	TIFFSwabArrayOfTriples ( ( uint8 * ) buf , cc / 3 ) ;
EXPR	1621:4	1621:4	4	TIFFSwabArrayOfTriples ( ( uint8 * ) buf , cc / 3 )
FUNCTION_CALL	1621:4	1621:45	5	TIFFSwabArrayOfTriples ( ( uint8 * ) buf , cc / 3 )
CALLEE	1621:4	1621:4	6	TIFFSwabArrayOfTriples
LEAF_NODE	1621:4	1621:4	7	TIFFSwabArrayOfTriples
LEAF_NODE	1621:26	1621:26	6	(
ARGUMENT	1621:27	1621:36	6	( uint8 * ) buf
LEAF_NODE	1621:27	1621:27	7	(
TYPE_NAME	1621:28	1621:28	7	uint8
LEAF_NODE	1621:28	1621:28	8	uint8
LEAF_NODE	1621:33	1621:33	7	*
LEAF_NODE	1621:34	1621:34	7	)
FIELD	1621:36	1621:36	7	buf
LEAF_NODE	1621:36	1621:36	8	buf
LEAF_NODE	1621:39	1621:39	6	,
ARGUMENT	1621:41	1621:44	6	cc / 3
FIELD	1621:41	1621:41	7	cc
LEAF_NODE	1621:41	1621:41	8	cc
LEAF_NODE	1621:43	1621:43	7	/
FIELD	1621:44	1621:44	7	3
LEAF_NODE	1621:44	1621:44	8	3
LEAF_NODE	1621:45	1621:45	6	)
LEAF_NODE	1621:46	1621:46	4	;
LEAF_NODE	1622:0	1622:0	2	}
FUNCTION_DEF	1624:0	1630:0	1	
RETURN_TYPE	1624:0	1624:0	2	void
TYPE_NAME	1624:0	1624:0	3	void
LEAF_NODE	1624:0	1624:0	4	void
FUNCTION_NAME	1625:0	1625:0	2	_TIFFSwab32BitData
LEAF_NODE	1625:0	1625:0	3	_TIFFSwab32BitData
PARAMETER_LIST	1625:18	1625:53	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	1625:18	1625:18	3	(
PARAMETER_DECL	1625:19	1625:25	3	TIFF * tif
TYPE	1625:19	1625:23	4	TIFF *
TYPE_NAME	1625:19	1625:19	5	TIFF
LEAF_NODE	1625:19	1625:19	6	TIFF
POINTER	1625:23	1625:23	5	*
LEAF_NODE	1625:23	1625:23	6	*
NAME	1625:25	1625:25	4	tif
LEAF_NODE	1625:25	1625:25	5	tif
LEAF_NODE	1625:28	1625:28	3	,
PARAMETER_DECL	1625:30	1625:37	3	uint8 * buf
TYPE	1625:30	1625:35	4	uint8 *
TYPE_NAME	1625:30	1625:30	5	uint8
LEAF_NODE	1625:30	1625:30	6	uint8
POINTER	1625:35	1625:35	5	*
LEAF_NODE	1625:35	1625:35	6	*
NAME	1625:37	1625:37	4	buf
LEAF_NODE	1625:37	1625:37	5	buf
LEAF_NODE	1625:40	1625:40	3	,
PARAMETER_DECL	1625:42	1625:51	3	tmsize_t cc
TYPE	1625:42	1625:42	4	tmsize_t
TYPE_NAME	1625:42	1625:42	5	tmsize_t
LEAF_NODE	1625:42	1625:42	6	tmsize_t
NAME	1625:51	1625:51	4	cc
LEAF_NODE	1625:51	1625:51	5	cc
LEAF_NODE	1625:53	1625:53	3	)
LEAF_NODE	1626:0	1626:0	2	{
STATEMENTS	1627:4	1629:4	2	
EXPR_STATEMENT	1627:4	1627:14	3	( void ) tif ;
EXPR	1627:4	1627:11	4	( void ) tif
LEAF_NODE	1627:4	1627:4	5	(
TYPE_NAME	1627:5	1627:5	5	void
LEAF_NODE	1627:5	1627:5	6	void
LEAF_NODE	1627:9	1627:9	5	)
FIELD	1627:11	1627:11	5	tif
LEAF_NODE	1627:11	1627:11	6	tif
LEAF_NODE	1627:14	1627:14	4	;
EXPR_STATEMENT	1628:4	1628:25	3	assert ( ( cc & 3 ) == 0 ) ;
EXPR	1628:4	1628:4	4	assert ( ( cc & 3 ) == 0 )
FUNCTION_CALL	1628:4	1628:24	5	assert ( ( cc & 3 ) == 0 )
CALLEE	1628:4	1628:4	6	assert
LEAF_NODE	1628:4	1628:4	7	assert
LEAF_NODE	1628:10	1628:10	6	(
ARGUMENT	1628:11	1628:23	6	( cc & 3 ) == 0
LEAF_NODE	1628:11	1628:11	7	(
FIELD	1628:12	1628:12	7	cc
LEAF_NODE	1628:12	1628:12	8	cc
LEAF_NODE	1628:15	1628:15	7	&
FIELD	1628:17	1628:17	7	3
LEAF_NODE	1628:17	1628:17	8	3
LEAF_NODE	1628:18	1628:18	7	)
EQ_OPERATOR	1628:20	1628:20	7	==
LEAF_NODE	1628:20	1628:20	8	==
FIELD	1628:23	1628:23	7	0
LEAF_NODE	1628:23	1628:23	8	0
LEAF_NODE	1628:24	1628:24	6	)
LEAF_NODE	1628:25	1628:25	4	;
EXPR_STATEMENT	1629:4	1629:44	3	TIFFSwabArrayOfLong ( ( uint32 * ) buf , cc / 4 ) ;
EXPR	1629:4	1629:4	4	TIFFSwabArrayOfLong ( ( uint32 * ) buf , cc / 4 )
FUNCTION_CALL	1629:4	1629:43	5	TIFFSwabArrayOfLong ( ( uint32 * ) buf , cc / 4 )
CALLEE	1629:4	1629:4	6	TIFFSwabArrayOfLong
LEAF_NODE	1629:4	1629:4	7	TIFFSwabArrayOfLong
LEAF_NODE	1629:23	1629:23	6	(
ARGUMENT	1629:24	1629:34	6	( uint32 * ) buf
LEAF_NODE	1629:24	1629:24	7	(
TYPE_NAME	1629:25	1629:25	7	uint32
LEAF_NODE	1629:25	1629:25	8	uint32
LEAF_NODE	1629:31	1629:31	7	*
LEAF_NODE	1629:32	1629:32	7	)
FIELD	1629:34	1629:34	7	buf
LEAF_NODE	1629:34	1629:34	8	buf
LEAF_NODE	1629:37	1629:37	6	,
ARGUMENT	1629:39	1629:42	6	cc / 4
FIELD	1629:39	1629:39	7	cc
LEAF_NODE	1629:39	1629:39	8	cc
LEAF_NODE	1629:41	1629:41	7	/
FIELD	1629:42	1629:42	7	4
LEAF_NODE	1629:42	1629:42	8	4
LEAF_NODE	1629:43	1629:43	6	)
LEAF_NODE	1629:44	1629:44	4	;
LEAF_NODE	1630:0	1630:0	2	}
FUNCTION_DEF	1632:0	1638:0	1	
RETURN_TYPE	1632:0	1632:0	2	void
TYPE_NAME	1632:0	1632:0	3	void
LEAF_NODE	1632:0	1632:0	4	void
FUNCTION_NAME	1633:0	1633:0	2	_TIFFSwab64BitData
LEAF_NODE	1633:0	1633:0	3	_TIFFSwab64BitData
PARAMETER_LIST	1633:18	1633:53	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	1633:18	1633:18	3	(
PARAMETER_DECL	1633:19	1633:25	3	TIFF * tif
TYPE	1633:19	1633:23	4	TIFF *
TYPE_NAME	1633:19	1633:19	5	TIFF
LEAF_NODE	1633:19	1633:19	6	TIFF
POINTER	1633:23	1633:23	5	*
LEAF_NODE	1633:23	1633:23	6	*
NAME	1633:25	1633:25	4	tif
LEAF_NODE	1633:25	1633:25	5	tif
LEAF_NODE	1633:28	1633:28	3	,
PARAMETER_DECL	1633:30	1633:37	3	uint8 * buf
TYPE	1633:30	1633:35	4	uint8 *
TYPE_NAME	1633:30	1633:30	5	uint8
LEAF_NODE	1633:30	1633:30	6	uint8
POINTER	1633:35	1633:35	5	*
LEAF_NODE	1633:35	1633:35	6	*
NAME	1633:37	1633:37	4	buf
LEAF_NODE	1633:37	1633:37	5	buf
LEAF_NODE	1633:40	1633:40	3	,
PARAMETER_DECL	1633:42	1633:51	3	tmsize_t cc
TYPE	1633:42	1633:42	4	tmsize_t
TYPE_NAME	1633:42	1633:42	5	tmsize_t
LEAF_NODE	1633:42	1633:42	6	tmsize_t
NAME	1633:51	1633:51	4	cc
LEAF_NODE	1633:51	1633:51	5	cc
LEAF_NODE	1633:53	1633:53	3	)
LEAF_NODE	1634:0	1634:0	2	{
STATEMENTS	1635:4	1637:4	2	
EXPR_STATEMENT	1635:4	1635:14	3	( void ) tif ;
EXPR	1635:4	1635:11	4	( void ) tif
LEAF_NODE	1635:4	1635:4	5	(
TYPE_NAME	1635:5	1635:5	5	void
LEAF_NODE	1635:5	1635:5	6	void
LEAF_NODE	1635:9	1635:9	5	)
FIELD	1635:11	1635:11	5	tif
LEAF_NODE	1635:11	1635:11	6	tif
LEAF_NODE	1635:14	1635:14	4	;
EXPR_STATEMENT	1636:4	1636:25	3	assert ( ( cc & 7 ) == 0 ) ;
EXPR	1636:4	1636:4	4	assert ( ( cc & 7 ) == 0 )
FUNCTION_CALL	1636:4	1636:24	5	assert ( ( cc & 7 ) == 0 )
CALLEE	1636:4	1636:4	6	assert
LEAF_NODE	1636:4	1636:4	7	assert
LEAF_NODE	1636:10	1636:10	6	(
ARGUMENT	1636:11	1636:23	6	( cc & 7 ) == 0
LEAF_NODE	1636:11	1636:11	7	(
FIELD	1636:12	1636:12	7	cc
LEAF_NODE	1636:12	1636:12	8	cc
LEAF_NODE	1636:15	1636:15	7	&
FIELD	1636:17	1636:17	7	7
LEAF_NODE	1636:17	1636:17	8	7
LEAF_NODE	1636:18	1636:18	7	)
EQ_OPERATOR	1636:20	1636:20	7	==
LEAF_NODE	1636:20	1636:20	8	==
FIELD	1636:23	1636:23	7	0
LEAF_NODE	1636:23	1636:23	8	0
LEAF_NODE	1636:24	1636:24	6	)
LEAF_NODE	1636:25	1636:25	4	;
EXPR_STATEMENT	1637:4	1637:46	3	TIFFSwabArrayOfDouble ( ( double * ) buf , cc / 8 ) ;
EXPR	1637:4	1637:4	4	TIFFSwabArrayOfDouble ( ( double * ) buf , cc / 8 )
FUNCTION_CALL	1637:4	1637:45	5	TIFFSwabArrayOfDouble ( ( double * ) buf , cc / 8 )
CALLEE	1637:4	1637:4	6	TIFFSwabArrayOfDouble
LEAF_NODE	1637:4	1637:4	7	TIFFSwabArrayOfDouble
LEAF_NODE	1637:25	1637:25	6	(
ARGUMENT	1637:26	1637:36	6	( double * ) buf
LEAF_NODE	1637:26	1637:26	7	(
TYPE_NAME	1637:27	1637:27	7	double
LEAF_NODE	1637:27	1637:27	8	double
LEAF_NODE	1637:33	1637:33	7	*
LEAF_NODE	1637:34	1637:34	7	)
FIELD	1637:36	1637:36	7	buf
LEAF_NODE	1637:36	1637:36	8	buf
LEAF_NODE	1637:39	1637:39	6	,
ARGUMENT	1637:41	1637:44	6	cc / 8
FIELD	1637:41	1637:41	7	cc
LEAF_NODE	1637:41	1637:41	8	cc
LEAF_NODE	1637:43	1637:43	7	/
FIELD	1637:44	1637:44	7	8
LEAF_NODE	1637:44	1637:44	8	8
LEAF_NODE	1637:45	1637:45	6	)
LEAF_NODE	1637:46	1637:46	4	;
LEAF_NODE	1638:0	1638:0	2	}
