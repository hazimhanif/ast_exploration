SOURCE_FILE	34:1	0:0	0	
SIMPLE_DECL	34:1	34:11	1	char * name ;
VAR_DECL	34:1	34:7	2	char * name
TYPE	34:1	34:6	3	char *
TYPE_NAME	34:1	34:1	4	char
LEAF_NODE	34:1	34:1	5	char
POINTER	34:6	34:6	4	*
LEAF_NODE	34:6	34:6	5	*
NAME	34:7	34:7	3	name
LEAF_NODE	34:7	34:7	4	name
LEAF_NODE	34:11	34:11	2	;
SIMPLE_DECL	35:1	35:24	1	unsigned char [ 256 ] runs ;
VAR_DECL	35:1	35:15	2	unsigned char [ 256 ] runs
TYPE	35:1	35:19	3	unsigned char [ 256 ]
TYPE_NAME	35:1	35:10	4	unsigned char
LEAF_NODE	35:1	35:1	5	unsigned
LEAF_NODE	35:10	35:10	5	char
TYPE_SUFFIX	35:19	35:23	4	[ 256 ]
LEAF_NODE	35:19	35:19	5	[
FIELD	35:20	35:20	5	256
LEAF_NODE	35:20	35:20	6	256
LEAF_NODE	35:23	35:23	5	]
NAME	35:15	35:15	3	runs
LEAF_NODE	35:15	35:15	4	runs
LEAF_NODE	35:24	35:24	2	;
SIMPLE_DECL	37:1	37:6	1	int i ;
VAR_DECL	37:1	37:5	2	int i
TYPE	37:1	37:1	3	int
TYPE_NAME	37:1	37:1	4	int
LEAF_NODE	37:1	37:1	5	int
NAME	37:5	37:5	3	i
LEAF_NODE	37:5	37:5	4	i
LEAF_NODE	37:6	37:6	2	;
SIMPLE_DECL	38:1	38:10	1	char * sep ;
VAR_DECL	38:1	38:7	2	char * sep
TYPE	38:1	38:6	3	char *
TYPE_NAME	38:1	38:1	4	char
LEAF_NODE	38:1	38:1	5	char
POINTER	38:6	38:6	4	*
LEAF_NODE	38:6	38:6	5	*
NAME	38:7	38:7	3	sep
LEAF_NODE	38:7	38:7	4	sep
LEAF_NODE	38:10	38:10	2	;
FUNCTION_DEF	0:0	71:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	52:0	52:0	2	main
LEAF_NODE	52:0	52:0	3	main
PARAMETER_LIST	52:4	52:5	2	( )
LEAF_NODE	52:4	52:4	3	(
LEAF_NODE	52:5	52:5	3	)
LEAF_NODE	53:0	53:0	2	{
STATEMENTS	54:1	70:1	2	
LEAF_NODE	54:1	54:1	3	unsigned
LEAF_NODE	54:10	54:10	3	char
EXPR_STATEMENT	54:15	54:27	3	runs [ 2 ] [ 256 ] ;
EXPR	54:15	54:15	4	runs [ 2 ] [ 256 ]
FIELD	54:15	54:26	5	runs [ 2 ] [ 256 ]
LEAF_NODE	54:15	54:15	6	runs
LEAF_NODE	54:19	54:19	6	[
EXPR	54:20	54:20	6	2
FIELD	54:20	54:20	7	2
LEAF_NODE	54:20	54:20	8	2
LEAF_NODE	54:21	54:21	6	]
LEAF_NODE	54:22	54:22	6	[
EXPR	54:23	54:23	6	256
FIELD	54:23	54:23	7	256
LEAF_NODE	54:23	54:23	8	256
LEAF_NODE	54:26	54:26	6	]
LEAF_NODE	54:27	54:27	4	;
EXPR_STATEMENT	56:1	56:38	3	memset ( runs [ 0 ] , 0 , 256 * sizeof ( char ) ) ;
EXPR	56:1	56:1	4	memset ( runs [ 0 ] , 0 , 256 * sizeof ( char ) )
FUNCTION_CALL	56:1	56:37	5	memset ( runs [ 0 ] , 0 , 256 * sizeof ( char ) )
CALLEE	56:1	56:1	6	memset
LEAF_NODE	56:1	56:1	7	memset
LEAF_NODE	56:7	56:7	6	(
ARGUMENT	56:8	56:8	6	runs [ 0 ]
FIELD	56:8	56:14	7	runs [ 0 ]
LEAF_NODE	56:8	56:8	8	runs
LEAF_NODE	56:12	56:12	8	[
EXPR	56:13	56:13	8	0
FIELD	56:13	56:13	9	0
LEAF_NODE	56:13	56:13	10	0
LEAF_NODE	56:14	56:14	8	]
LEAF_NODE	56:15	56:15	6	,
ARGUMENT	56:17	56:17	6	0
FIELD	56:17	56:17	7	0
LEAF_NODE	56:17	56:17	8	0
LEAF_NODE	56:18	56:18	6	,
ARGUMENT	56:20	56:24	6	256 * sizeof ( char )
FIELD	56:20	56:20	7	256
LEAF_NODE	56:20	56:20	8	256
LEAF_NODE	56:23	56:23	7	*
FUNCTION_CALL	56:24	56:36	7	sizeof ( char )
CALLEE	56:24	56:24	8	sizeof
LEAF_NODE	56:24	56:24	9	sizeof
LEAF_NODE	56:31	56:31	8	(
ARGUMENT	56:32	56:32	8	char
FIELD	56:32	56:32	9	char
LEAF_NODE	56:32	56:32	10	char
LEAF_NODE	56:36	56:36	8	)
LEAF_NODE	56:37	56:37	6	)
LEAF_NODE	56:38	56:38	4	;
EXPR_STATEMENT	57:1	57:38	3	memset ( runs [ 1 ] , 0 , 256 * sizeof ( char ) ) ;
EXPR	57:1	57:1	4	memset ( runs [ 1 ] , 0 , 256 * sizeof ( char ) )
FUNCTION_CALL	57:1	57:37	5	memset ( runs [ 1 ] , 0 , 256 * sizeof ( char ) )
CALLEE	57:1	57:1	6	memset
LEAF_NODE	57:1	57:1	7	memset
LEAF_NODE	57:7	57:7	6	(
ARGUMENT	57:8	57:8	6	runs [ 1 ]
FIELD	57:8	57:14	7	runs [ 1 ]
LEAF_NODE	57:8	57:8	8	runs
LEAF_NODE	57:12	57:12	8	[
EXPR	57:13	57:13	8	1
FIELD	57:13	57:13	9	1
LEAF_NODE	57:13	57:13	10	1
LEAF_NODE	57:14	57:14	8	]
LEAF_NODE	57:15	57:15	6	,
ARGUMENT	57:17	57:17	6	0
FIELD	57:17	57:17	7	0
LEAF_NODE	57:17	57:17	8	0
LEAF_NODE	57:18	57:18	6	,
ARGUMENT	57:20	57:24	6	256 * sizeof ( char )
FIELD	57:20	57:20	7	256
LEAF_NODE	57:20	57:20	8	256
LEAF_NODE	57:23	57:23	7	*
FUNCTION_CALL	57:24	57:36	7	sizeof ( char )
CALLEE	57:24	57:24	8	sizeof
LEAF_NODE	57:24	57:24	9	sizeof
LEAF_NODE	57:31	57:31	8	(
ARGUMENT	57:32	57:32	8	char
FIELD	57:32	57:32	9	char
LEAF_NODE	57:32	57:32	10	char
LEAF_NODE	57:36	57:36	8	)
LEAF_NODE	57:37	57:37	6	)
LEAF_NODE	57:38	57:38	4	;
LEAF_NODE	58:1	58:1	3	{
STATEMENTS	58:3	67:3	3	
LEAF_NODE	58:3	58:3	4	register
SIMPLE_DECL	58:12	58:30	4	int run , int runlen , int i ;
INIT_DECL_LIST	58:12	58:12	5	int run , int runlen , int i
VAR_DECL	58:12	58:16	6	int run
TYPE	58:12	58:12	7	int
TYPE_NAME	58:12	58:12	8	int
LEAF_NODE	58:12	58:12	9	int
NAME	58:16	58:16	7	run
LEAF_NODE	58:16	58:16	8	run
LEAF_NODE	58:19	58:19	6	,
INIT_DECL_LIST	58:12	58:12	6	int runlen , int i
VAR_DECL	58:12	58:21	7	int runlen
TYPE	58:12	58:12	8	int
TYPE_NAME	58:12	58:12	9	int
LEAF_NODE	58:12	58:12	10	int
NAME	58:21	58:21	8	runlen
LEAF_NODE	58:21	58:21	9	runlen
LEAF_NODE	58:27	58:27	7	,
VAR_DECL	58:12	58:29	7	int i
TYPE	58:12	58:12	8	int
TYPE_NAME	58:12	58:12	9	int
LEAF_NODE	58:12	58:12	10	int
NAME	58:29	58:29	8	i
LEAF_NODE	58:29	58:29	9	i
LEAF_NODE	58:30	58:30	5	;
EXPR_STATEMENT	59:3	59:13	4	runlen = 1 ;
EXPR	59:3	59:3	5	runlen = 1
ASSIGN	59:3	59:12	6	runlen = 1
LVAL	59:3	59:3	7	runlen
FIELD	59:3	59:3	8	runlen
LEAF_NODE	59:3	59:3	9	runlen
ASSIGN_OP	59:10	59:10	7	=
LEAF_NODE	59:10	59:10	8	=
RVAL	59:12	59:12	7	1
FIELD	59:12	59:12	8	1
LEAF_NODE	59:12	59:12	9	1
LEAF_NODE	59:13	59:13	5	;
ITERATION	60:3	60:54	4	
KEYWORD	60:3	60:3	5	for
LEAF_NODE	60:3	60:3	6	for
LEAF_NODE	60:7	60:7	5	(
FOR_INIT	60:8	60:18	5	run = 0x80 ;
EXPR	60:8	60:8	6	run = 0x80
ASSIGN	60:8	60:14	7	run = 0x80
LVAL	60:8	60:8	8	run
FIELD	60:8	60:8	9	run
LEAF_NODE	60:8	60:8	10	run
ASSIGN_OP	60:12	60:12	8	=
LEAF_NODE	60:12	60:12	9	=
RVAL	60:14	60:14	8	0x80
FIELD	60:14	60:14	9	0x80
LEAF_NODE	60:14	60:14	10	0x80
LEAF_NODE	60:18	60:18	6	;
CONDITION	60:20	60:20	5	run != 0xff
EXPR	60:20	60:27	6	run != 0xff
FIELD	60:20	60:20	7	run
LEAF_NODE	60:20	60:20	8	run
EQ_OPERATOR	60:24	60:24	7	!=
LEAF_NODE	60:24	60:24	8	!=
FIELD	60:27	60:27	7	0xff
LEAF_NODE	60:27	60:27	8	0xff
LEAF_NODE	60:31	60:31	5	;
FOR_EXPR	60:33	60:33	5	run = ( run >> 1 ) | 0x80
EXPR	60:33	60:33	6	run = ( run >> 1 ) | 0x80
ASSIGN	60:33	60:39	7	run = ( run >> 1 ) | 0x80
LVAL	60:33	60:33	8	run
FIELD	60:33	60:33	9	run
LEAF_NODE	60:33	60:33	10	run
ASSIGN_OP	60:37	60:37	8	=
LEAF_NODE	60:37	60:37	9	=
RVAL	60:39	60:39	8	( run >> 1 ) | 0x80
BIT_OR	60:39	60:48	9	( run >> 1 ) | 0x80
BIT_OR_ELEM	60:39	60:46	10	( run >> 1 )
LEAF_NODE	60:39	60:39	11	(
FIELD	60:40	60:40	11	run
LEAF_NODE	60:40	60:40	12	run
LEAF_NODE	60:43	60:43	11	>>
FIELD	60:45	60:45	11	1
LEAF_NODE	60:45	60:45	12	1
LEAF_NODE	60:46	60:46	11	)
LEAF_NODE	60:47	60:47	10	|
BIT_OR_ELEM	60:48	60:48	10	0x80
FIELD	60:48	60:48	11	0x80
LEAF_NODE	60:48	60:48	12	0x80
LEAF_NODE	60:52	60:52	5	)
STATEMENTS	60:54	66:3	5	
LEAF_NODE	60:54	60:54	6	{
STATEMENTS	61:2	65:2	6	
ITERATION	61:2	61:31	7	
KEYWORD	61:2	61:2	8	for
LEAF_NODE	61:2	61:2	9	for
LEAF_NODE	61:6	61:6	8	(
FOR_INIT	61:7	61:16	8	i = run - 1 ;
EXPR	61:7	61:7	9	i = run - 1
ASSIGN	61:7	61:11	10	i = run - 1
LVAL	61:7	61:7	11	i
FIELD	61:7	61:7	12	i
LEAF_NODE	61:7	61:7	13	i
ASSIGN_OP	61:9	61:9	11	=
LEAF_NODE	61:9	61:9	12	=
RVAL	61:11	61:15	11	run - 1
FIELD	61:11	61:11	12	run
LEAF_NODE	61:11	61:11	13	run
LEAF_NODE	61:14	61:14	12	-
FIELD	61:15	61:15	12	1
LEAF_NODE	61:15	61:15	13	1
LEAF_NODE	61:16	61:16	9	;
CONDITION	61:18	61:18	8	i >= 0
EXPR	61:18	61:23	9	i >= 0
FIELD	61:18	61:18	10	i
LEAF_NODE	61:18	61:18	11	i
REL_OPERATOR	61:20	61:20	10	>=
LEAF_NODE	61:20	61:20	11	>=
FIELD	61:23	61:23	10	0
LEAF_NODE	61:23	61:23	11	0
LEAF_NODE	61:24	61:24	8	;
FOR_EXPR	61:26	61:26	8	i --
EXPR	61:26	61:26	9	i --
FIELD	61:26	61:27	10	i --
LEAF_NODE	61:26	61:26	11	i
LEAF_NODE	61:27	61:27	11	--
LEAF_NODE	61:29	61:29	8	)
STATEMENTS	61:31	64:2	8	
LEAF_NODE	61:31	61:31	9	{
STATEMENTS	62:3	63:3	9	
EXPR_STATEMENT	62:3	62:26	10	runs [ 1 ] [ run | i ] = runlen ;
EXPR	62:3	62:3	11	runs [ 1 ] [ run | i ] = runlen
ASSIGN	62:3	62:20	12	runs [ 1 ] [ run | i ] = runlen
LVAL	62:3	62:3	13	runs [ 1 ] [ run | i ]
FIELD	62:3	62:16	14	runs [ 1 ] [ run | i ]
LEAF_NODE	62:3	62:3	15	runs
LEAF_NODE	62:7	62:7	15	[
EXPR	62:8	62:8	15	1
FIELD	62:8	62:8	16	1
LEAF_NODE	62:8	62:8	17	1
LEAF_NODE	62:9	62:9	15	]
LEAF_NODE	62:10	62:10	15	[
EXPR	62:11	62:11	15	run | i
BIT_OR	62:11	62:15	16	run | i
BIT_OR_ELEM	62:11	62:11	17	run
FIELD	62:11	62:11	18	run
LEAF_NODE	62:11	62:11	19	run
LEAF_NODE	62:14	62:14	17	|
BIT_OR_ELEM	62:15	62:15	17	i
FIELD	62:15	62:15	18	i
LEAF_NODE	62:15	62:15	19	i
LEAF_NODE	62:16	62:16	15	]
ASSIGN_OP	62:18	62:18	13	=
LEAF_NODE	62:18	62:18	14	=
RVAL	62:20	62:20	13	runlen
FIELD	62:20	62:20	14	runlen
LEAF_NODE	62:20	62:20	15	runlen
LEAF_NODE	62:26	62:26	11	;
EXPR_STATEMENT	63:3	63:38	10	runs [ 0 ] [ ( ~ ( run | i ) ) & 0xff ] = runlen ;
EXPR	63:3	63:3	11	runs [ 0 ] [ ( ~ ( run | i ) ) & 0xff ] = runlen
ASSIGN	63:3	63:32	12	runs [ 0 ] [ ( ~ ( run | i ) ) & 0xff ] = runlen
LVAL	63:3	63:3	13	runs [ 0 ] [ ( ~ ( run | i ) ) & 0xff ]
FIELD	63:3	63:28	14	runs [ 0 ] [ ( ~ ( run | i ) ) & 0xff ]
LEAF_NODE	63:3	63:3	15	runs
LEAF_NODE	63:7	63:7	15	[
EXPR	63:8	63:8	15	0
FIELD	63:8	63:8	16	0
LEAF_NODE	63:8	63:8	17	0
LEAF_NODE	63:9	63:9	15	]
LEAF_NODE	63:10	63:10	15	[
EXPR	63:11	63:24	15	( ~ ( run | i ) ) & 0xff
LEAF_NODE	63:11	63:11	16	(
UNARY_EXPR	63:12	63:19	16	~ ( run | i )
UNARY_OPERATOR	63:12	63:12	17	~
LEAF_NODE	63:12	63:12	18	~
LEAF_NODE	63:13	63:13	17	(
BIT_OR	63:14	63:18	17	run | i
BIT_OR_ELEM	63:14	63:14	18	run
FIELD	63:14	63:14	19	run
LEAF_NODE	63:14	63:14	20	run
LEAF_NODE	63:17	63:17	18	|
BIT_OR_ELEM	63:18	63:18	18	i
FIELD	63:18	63:18	19	i
LEAF_NODE	63:18	63:18	20	i
LEAF_NODE	63:19	63:19	17	)
LEAF_NODE	63:20	63:20	16	)
LEAF_NODE	63:22	63:22	16	&
FIELD	63:24	63:24	16	0xff
LEAF_NODE	63:24	63:24	17	0xff
LEAF_NODE	63:28	63:28	15	]
ASSIGN_OP	63:30	63:30	13	=
LEAF_NODE	63:30	63:30	14	=
RVAL	63:32	63:32	13	runlen
FIELD	63:32	63:32	14	runlen
LEAF_NODE	63:32	63:32	15	runlen
LEAF_NODE	63:38	63:38	11	;
LEAF_NODE	64:2	64:2	9	}
EXPR_STATEMENT	65:2	65:10	7	runlen ++ ;
EXPR	65:2	65:2	8	runlen ++
FIELD	65:2	65:8	9	runlen ++
LEAF_NODE	65:2	65:2	10	runlen
LEAF_NODE	65:8	65:8	10	++
LEAF_NODE	65:10	65:10	8	;
LEAF_NODE	66:3	66:3	6	}
EXPR_STATEMENT	67:3	67:33	4	runs [ 1 ] [ 0xff ] = runs [ 0 ] [ 0 ] = 8 ;
EXPR	67:3	67:3	5	runs [ 1 ] [ 0xff ] = runs [ 0 ] [ 0 ] = 8
ASSIGN	67:3	67:19	6	runs [ 1 ] [ 0xff ] = runs [ 0 ] [ 0 ] = 8
LVAL	67:3	67:3	7	runs [ 1 ] [ 0xff ]
FIELD	67:3	67:15	8	runs [ 1 ] [ 0xff ]
LEAF_NODE	67:3	67:3	9	runs
LEAF_NODE	67:7	67:7	9	[
EXPR	67:8	67:8	9	1
FIELD	67:8	67:8	10	1
LEAF_NODE	67:8	67:8	11	1
LEAF_NODE	67:9	67:9	9	]
LEAF_NODE	67:10	67:10	9	[
EXPR	67:11	67:11	9	0xff
FIELD	67:11	67:11	10	0xff
LEAF_NODE	67:11	67:11	11	0xff
LEAF_NODE	67:15	67:15	9	]
ASSIGN_OP	67:17	67:17	7	=
LEAF_NODE	67:17	67:17	8	=
RVAL	67:19	67:19	7	runs [ 0 ] [ 0 ] = 8
ASSIGN	67:19	67:32	8	runs [ 0 ] [ 0 ] = 8
LVAL	67:19	67:19	9	runs [ 0 ] [ 0 ]
FIELD	67:19	67:28	10	runs [ 0 ] [ 0 ]
LEAF_NODE	67:19	67:19	11	runs
LEAF_NODE	67:23	67:23	11	[
EXPR	67:24	67:24	11	0
FIELD	67:24	67:24	12	0
LEAF_NODE	67:24	67:24	13	0
LEAF_NODE	67:25	67:25	11	]
LEAF_NODE	67:26	67:26	11	[
EXPR	67:27	67:27	11	0
FIELD	67:27	67:27	12	0
LEAF_NODE	67:27	67:27	13	0
LEAF_NODE	67:28	67:28	11	]
ASSIGN_OP	67:30	67:30	9	=
LEAF_NODE	67:30	67:30	10	=
RVAL	67:32	67:32	9	8
FIELD	67:32	67:32	10	8
LEAF_NODE	67:32	67:32	11	8
LEAF_NODE	67:33	67:33	5	;
LEAF_NODE	68:1	68:1	3	}
EXPR_STATEMENT	69:1	69:28	3	dumparray ( "bruns" , runs [ 0 ] ) ;
EXPR	69:1	69:1	4	dumparray ( "bruns" , runs [ 0 ] )
FUNCTION_CALL	69:1	69:27	5	dumparray ( "bruns" , runs [ 0 ] )
CALLEE	69:1	69:1	6	dumparray
LEAF_NODE	69:1	69:1	7	dumparray
LEAF_NODE	69:10	69:10	6	(
ARGUMENT	69:11	69:11	6	"bruns"
FIELD	69:11	69:11	7	"bruns"
LEAF_NODE	69:11	69:11	8	"bruns"
LEAF_NODE	69:18	69:18	6	,
ARGUMENT	69:20	69:20	6	runs [ 0 ]
FIELD	69:20	69:26	7	runs [ 0 ]
LEAF_NODE	69:20	69:20	8	runs
LEAF_NODE	69:24	69:24	8	[
EXPR	69:25	69:25	8	0
FIELD	69:25	69:25	9	0
LEAF_NODE	69:25	69:25	10	0
LEAF_NODE	69:26	69:26	8	]
LEAF_NODE	69:27	69:27	6	)
LEAF_NODE	69:28	69:28	4	;
EXPR_STATEMENT	70:1	70:28	3	dumparray ( "wruns" , runs [ 1 ] ) ;
EXPR	70:1	70:1	4	dumparray ( "wruns" , runs [ 1 ] )
FUNCTION_CALL	70:1	70:27	5	dumparray ( "wruns" , runs [ 1 ] )
CALLEE	70:1	70:1	6	dumparray
LEAF_NODE	70:1	70:1	7	dumparray
LEAF_NODE	70:10	70:10	6	(
ARGUMENT	70:11	70:11	6	"wruns"
FIELD	70:11	70:11	7	"wruns"
LEAF_NODE	70:11	70:11	8	"wruns"
LEAF_NODE	70:18	70:18	6	,
ARGUMENT	70:20	70:20	6	runs [ 1 ]
FIELD	70:20	70:26	7	runs [ 1 ]
LEAF_NODE	70:20	70:20	8	runs
LEAF_NODE	70:24	70:24	8	[
EXPR	70:25	70:25	8	1
FIELD	70:25	70:25	9	1
LEAF_NODE	70:25	70:25	10	1
LEAF_NODE	70:26	70:26	8	]
LEAF_NODE	70:27	70:27	6	)
LEAF_NODE	70:28	70:28	4	;
LEAF_NODE	71:0	71:0	2	}
