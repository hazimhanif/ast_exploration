SOURCE_FILE	210:11	2597:0	0	
SIMPLE_DECL	210:11	210:32	1	unsigned char boolean ;
VAR_DECL	210:11	210:25	2	unsigned char boolean
TYPE	210:11	210:11	3	unsigned char
TYPE_NAME	210:11	210:20	4	unsigned char
LEAF_NODE	210:11	210:11	5	unsigned
LEAF_NODE	210:20	210:20	5	char
NAME	210:25	210:25	3	boolean
LEAF_NODE	210:25	210:25	4	boolean
LEAF_NODE	210:32	210:32	2	;
SIMPLE_DECL	218:8	218:44	1	struct jpeg_error_mgr jpeg_error_mgr ;
VAR_DECL	218:8	218:30	2	struct jpeg_error_mgr jpeg_error_mgr
TYPE	218:8	218:8	3	struct jpeg_error_mgr
TYPE_NAME	218:8	218:15	4	struct jpeg_error_mgr
LEAF_NODE	218:8	218:8	5	struct
LEAF_NODE	218:15	218:15	5	jpeg_error_mgr
NAME	218:30	218:30	3	jpeg_error_mgr
LEAF_NODE	218:30	218:30	4	jpeg_error_mgr
LEAF_NODE	218:44	218:44	2	;
SIMPLE_DECL	219:8	219:52	1	struct jpeg_common_struct jpeg_common_struct ;
VAR_DECL	219:8	219:34	2	struct jpeg_common_struct jpeg_common_struct
TYPE	219:8	219:8	3	struct jpeg_common_struct
TYPE_NAME	219:8	219:15	4	struct jpeg_common_struct
LEAF_NODE	219:8	219:8	5	struct
LEAF_NODE	219:15	219:15	5	jpeg_common_struct
NAME	219:34	219:34	3	jpeg_common_struct
LEAF_NODE	219:34	219:34	4	jpeg_common_struct
LEAF_NODE	219:52	219:52	2	;
SIMPLE_DECL	220:8	220:60	1	struct jpeg_decompress_struct jpeg_decompress_struct ;
VAR_DECL	220:8	220:38	2	struct jpeg_decompress_struct jpeg_decompress_struct
TYPE	220:8	220:8	3	struct jpeg_decompress_struct
TYPE_NAME	220:8	220:15	4	struct jpeg_decompress_struct
LEAF_NODE	220:8	220:8	5	struct
LEAF_NODE	220:15	220:15	5	jpeg_decompress_struct
NAME	220:38	220:38	3	jpeg_decompress_struct
LEAF_NODE	220:38	220:38	4	jpeg_decompress_struct
LEAF_NODE	220:60	220:60	2	;
SIMPLE_DECL	221:8	221:46	1	struct jpeg_source_mgr jpeg_source_mgr ;
VAR_DECL	221:8	221:31	2	struct jpeg_source_mgr jpeg_source_mgr
TYPE	221:8	221:8	3	struct jpeg_source_mgr
TYPE_NAME	221:8	221:15	4	struct jpeg_source_mgr
LEAF_NODE	221:8	221:8	5	struct
LEAF_NODE	221:15	221:15	5	jpeg_source_mgr
NAME	221:31	221:31	3	jpeg_source_mgr
LEAF_NODE	221:31	221:31	4	jpeg_source_mgr
LEAF_NODE	221:46	221:46	2	;
SIMPLE_DECL	223:8	228:26	1	enum CLASS_NAME BASE_CLASSES { osibsNotSetYet , osibsJpegInterchangeFormat , osibsStrile , osibsEof } OJPEGStateInBufferSource ;
VAR_DECL	223:8	228:2	2	enum CLASS_NAME BASE_CLASSES { osibsNotSetYet , osibsJpegInterchangeFormat , osibsStrile , osibsEof } OJPEGStateInBufferSource
TYPE	223:8	223:8	3	enum CLASS_NAME BASE_CLASSES { osibsNotSetYet , osibsJpegInterchangeFormat , osibsStrile , osibsEof }
CLASS_DEF	223:8	228:0	4	enum CLASS_NAME BASE_CLASSES { osibsNotSetYet , osibsJpegInterchangeFormat , osibsStrile , osibsEof }
LEAF_NODE	223:8	223:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	223:13	223:13	5	{
CLASS_CONTENT	224:1	227:1	5	osibsNotSetYet , osibsJpegInterchangeFormat , osibsStrile , osibsEof
LEAF_NODE	224:1	224:1	6	osibsNotSetYet
LEAF_NODE	224:15	224:15	6	,
LEAF_NODE	225:1	225:1	6	osibsJpegInterchangeFormat
LEAF_NODE	225:27	225:27	6	,
LEAF_NODE	226:1	226:1	6	osibsStrile
LEAF_NODE	226:12	226:12	6	,
LEAF_NODE	227:1	227:1	6	osibsEof
LEAF_NODE	228:0	228:0	5	}
NAME	228:2	228:2	3	OJPEGStateInBufferSource
LEAF_NODE	228:2	228:2	4	OJPEGStateInBufferSource
LEAF_NODE	228:26	228:26	2	;
SIMPLE_DECL	230:8	241:20	1	enum CLASS_NAME BASE_CLASSES { ososSoi , ososQTable0 , ososQTable1 , ososQTable2 , ososQTable3 , ososDcTable0 , ososDcTable1 , ososDcTable2 , ososDcTable3 , ososAcTable0 , ososAcTable1 , ososAcTable2 , ososAcTable3 , ososDri , ososSof , ososSos , ososCompressed , ososRst , ososEoi } OJPEGStateOutState ;
VAR_DECL	230:8	241:2	2	enum CLASS_NAME BASE_CLASSES { ososSoi , ososQTable0 , ososQTable1 , ososQTable2 , ososQTable3 , ososDcTable0 , ososDcTable1 , ososDcTable2 , ososDcTable3 , ososAcTable0 , ososAcTable1 , ososAcTable2 , ososAcTable3 , ososDri , ososSof , ososSos , ososCompressed , ososRst , ososEoi } OJPEGStateOutState
TYPE	230:8	230:8	3	enum CLASS_NAME BASE_CLASSES { ososSoi , ososQTable0 , ososQTable1 , ososQTable2 , ososQTable3 , ososDcTable0 , ososDcTable1 , ososDcTable2 , ososDcTable3 , ososAcTable0 , ososAcTable1 , ososAcTable2 , ososAcTable3 , ososDri , ososSof , ososSos , ososCompressed , ososRst , ososEoi }
CLASS_DEF	230:8	241:0	4	enum CLASS_NAME BASE_CLASSES { ososSoi , ososQTable0 , ososQTable1 , ososQTable2 , ososQTable3 , ososDcTable0 , ososDcTable1 , ososDcTable2 , ososDcTable3 , ososAcTable0 , ososAcTable1 , ososAcTable2 , ososAcTable3 , ososDri , ososSof , ososSos , ososCompressed , ososRst , ososEoi }
LEAF_NODE	230:8	230:8	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	230:13	230:13	5	{
CLASS_CONTENT	231:1	240:1	5	ososSoi , ososQTable0 , ososQTable1 , ososQTable2 , ososQTable3 , ososDcTable0 , ososDcTable1 , ososDcTable2 , ososDcTable3 , ososAcTable0 , ososAcTable1 , ososAcTable2 , ososAcTable3 , ososDri , ososSof , ososSos , ososCompressed , ososRst , ososEoi
LEAF_NODE	231:1	231:1	6	ososSoi
LEAF_NODE	231:8	231:8	6	,
LEAF_NODE	232:1	232:1	6	ososQTable0
LEAF_NODE	232:12	232:12	6	,
LEAF_NODE	232:13	232:13	6	ososQTable1
LEAF_NODE	232:24	232:24	6	,
LEAF_NODE	232:25	232:25	6	ososQTable2
LEAF_NODE	232:36	232:36	6	,
LEAF_NODE	232:37	232:37	6	ososQTable3
LEAF_NODE	232:48	232:48	6	,
LEAF_NODE	233:1	233:1	6	ososDcTable0
LEAF_NODE	233:13	233:13	6	,
LEAF_NODE	233:14	233:14	6	ososDcTable1
LEAF_NODE	233:26	233:26	6	,
LEAF_NODE	233:27	233:27	6	ososDcTable2
LEAF_NODE	233:39	233:39	6	,
LEAF_NODE	233:40	233:40	6	ososDcTable3
LEAF_NODE	233:52	233:52	6	,
LEAF_NODE	234:1	234:1	6	ososAcTable0
LEAF_NODE	234:13	234:13	6	,
LEAF_NODE	234:14	234:14	6	ososAcTable1
LEAF_NODE	234:26	234:26	6	,
LEAF_NODE	234:27	234:27	6	ososAcTable2
LEAF_NODE	234:39	234:39	6	,
LEAF_NODE	234:40	234:40	6	ososAcTable3
LEAF_NODE	234:52	234:52	6	,
LEAF_NODE	235:1	235:1	6	ososDri
LEAF_NODE	235:8	235:8	6	,
LEAF_NODE	236:1	236:1	6	ososSof
LEAF_NODE	236:8	236:8	6	,
LEAF_NODE	237:1	237:1	6	ososSos
LEAF_NODE	237:8	237:8	6	,
LEAF_NODE	238:1	238:1	6	ososCompressed
LEAF_NODE	238:15	238:15	6	,
LEAF_NODE	239:1	239:1	6	ososRst
LEAF_NODE	239:8	239:8	6	,
LEAF_NODE	240:1	240:1	6	ososEoi
LEAF_NODE	241:0	241:0	5	}
NAME	241:2	241:2	3	OJPEGStateOutState
LEAF_NODE	241:2	241:2	4	OJPEGStateOutState
LEAF_NODE	241:20	241:20	2	;
SIMPLE_DECL	243:8	337:12	1	struct CLASS_NAME BASE_CLASSES { TIFF * tif ; int decoder_ok ; int error_in_raw_data_decoding ; JMP_BUF exit_jmpbuf ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; uint64 file_size ; uint32 image_width ; uint32 image_length ; uint32 strile_width ; uint32 strile_length ; uint32 strile_length_total ; uint8 samples_per_pixel ; uint8 plane_sample_offset ; uint8 samples_per_pixel_per_plane ; uint64 jpeg_interchange_format ; uint64 jpeg_interchange_format_length ; uint8 jpeg_proc ; uint8 subsamplingcorrect ; uint8 subsamplingcorrect_done ; uint8 subsampling_tag ; uint8 subsampling_hor ; uint8 subsampling_ver ; uint8 subsampling_force_desubsampling_inside_decompression ; uint8 qtable_offset_count ; uint8 dctable_offset_count ; uint8 actable_offset_count ; uint64 [ 3 ] qtable_offset ; uint64 [ 3 ] dctable_offset ; uint64 [ 3 ] actable_offset ; uint8 * [ 4 ] qtable ; uint8 * [ 4 ] dctable ; uint8 * [ 4 ] actable ; uint16 restart_interval ; uint8 restart_index ; uint8 sof_log ; uint8 sof_marker_id ; uint32 sof_x ; uint32 sof_y ; uint8 [ 3 ] sof_c ; uint8 [ 3 ] sof_hv ; uint8 [ 3 ] sof_tq ; uint8 [ 3 ] sos_cs ; uint8 [ 3 ] sos_tda ; struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ] sos_end ; uint8 readheader_done ; uint8 writeheader_done ; uint16 write_cursample ; uint32 write_curstrile ; uint8 libjpeg_session_active ; uint8 libjpeg_jpeg_query_style ; jpeg_error_mgr libjpeg_jpeg_error_mgr ; jpeg_decompress_struct libjpeg_jpeg_decompress_struct ; jpeg_source_mgr libjpeg_jpeg_source_mgr ; uint8 subsampling_convert_log ; uint32 subsampling_convert_ylinelen ; uint32 subsampling_convert_ylines ; uint32 subsampling_convert_clinelen ; uint32 subsampling_convert_clines ; uint32 subsampling_convert_ybuflen ; uint32 subsampling_convert_cbuflen ; uint32 subsampling_convert_ycbcrbuflen ; uint8 * subsampling_convert_ycbcrbuf ; uint8 * subsampling_convert_ybuf ; uint8 * subsampling_convert_cbbuf ; uint8 * subsampling_convert_crbuf ; uint32 subsampling_convert_ycbcrimagelen ; uint8 * subsampling_convert_ycbcrimage ; uint32 subsampling_convert_clinelenout ; uint32 subsampling_convert_state ; uint32 bytes_per_line ; uint32 lines_per_strile ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint32 in_buffer_strile_count ; uint64 in_buffer_file_pos ; uint8 in_buffer_file_pos_log ; uint64 in_buffer_file_togo ; uint16 in_buffer_togo ; uint8 * in_buffer_cur ; uint8 [ OJPEG_BUFFER ] in_buffer ; OJPEGStateOutState out_state ; uint8 [ OJPEG_BUFFER ] out_buffer ; uint8 * skip_buffer ; } OJPEGState ;
VAR_DECL	243:8	337:2	2	struct CLASS_NAME BASE_CLASSES { TIFF * tif ; int decoder_ok ; int error_in_raw_data_decoding ; JMP_BUF exit_jmpbuf ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; uint64 file_size ; uint32 image_width ; uint32 image_length ; uint32 strile_width ; uint32 strile_length ; uint32 strile_length_total ; uint8 samples_per_pixel ; uint8 plane_sample_offset ; uint8 samples_per_pixel_per_plane ; uint64 jpeg_interchange_format ; uint64 jpeg_interchange_format_length ; uint8 jpeg_proc ; uint8 subsamplingcorrect ; uint8 subsamplingcorrect_done ; uint8 subsampling_tag ; uint8 subsampling_hor ; uint8 subsampling_ver ; uint8 subsampling_force_desubsampling_inside_decompression ; uint8 qtable_offset_count ; uint8 dctable_offset_count ; uint8 actable_offset_count ; uint64 [ 3 ] qtable_offset ; uint64 [ 3 ] dctable_offset ; uint64 [ 3 ] actable_offset ; uint8 * [ 4 ] qtable ; uint8 * [ 4 ] dctable ; uint8 * [ 4 ] actable ; uint16 restart_interval ; uint8 restart_index ; uint8 sof_log ; uint8 sof_marker_id ; uint32 sof_x ; uint32 sof_y ; uint8 [ 3 ] sof_c ; uint8 [ 3 ] sof_hv ; uint8 [ 3 ] sof_tq ; uint8 [ 3 ] sos_cs ; uint8 [ 3 ] sos_tda ; struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ] sos_end ; uint8 readheader_done ; uint8 writeheader_done ; uint16 write_cursample ; uint32 write_curstrile ; uint8 libjpeg_session_active ; uint8 libjpeg_jpeg_query_style ; jpeg_error_mgr libjpeg_jpeg_error_mgr ; jpeg_decompress_struct libjpeg_jpeg_decompress_struct ; jpeg_source_mgr libjpeg_jpeg_source_mgr ; uint8 subsampling_convert_log ; uint32 subsampling_convert_ylinelen ; uint32 subsampling_convert_ylines ; uint32 subsampling_convert_clinelen ; uint32 subsampling_convert_clines ; uint32 subsampling_convert_ybuflen ; uint32 subsampling_convert_cbuflen ; uint32 subsampling_convert_ycbcrbuflen ; uint8 * subsampling_convert_ycbcrbuf ; uint8 * subsampling_convert_ybuf ; uint8 * subsampling_convert_cbbuf ; uint8 * subsampling_convert_crbuf ; uint32 subsampling_convert_ycbcrimagelen ; uint8 * subsampling_convert_ycbcrimage ; uint32 subsampling_convert_clinelenout ; uint32 subsampling_convert_state ; uint32 bytes_per_line ; uint32 lines_per_strile ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint32 in_buffer_strile_count ; uint64 in_buffer_file_pos ; uint8 in_buffer_file_pos_log ; uint64 in_buffer_file_togo ; uint16 in_buffer_togo ; uint8 * in_buffer_cur ; uint8 [ OJPEG_BUFFER ] in_buffer ; OJPEGStateOutState out_state ; uint8 [ OJPEG_BUFFER ] out_buffer ; uint8 * skip_buffer ; } OJPEGState
TYPE	243:8	243:8	3	struct CLASS_NAME BASE_CLASSES { TIFF * tif ; int decoder_ok ; int error_in_raw_data_decoding ; JMP_BUF exit_jmpbuf ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; uint64 file_size ; uint32 image_width ; uint32 image_length ; uint32 strile_width ; uint32 strile_length ; uint32 strile_length_total ; uint8 samples_per_pixel ; uint8 plane_sample_offset ; uint8 samples_per_pixel_per_plane ; uint64 jpeg_interchange_format ; uint64 jpeg_interchange_format_length ; uint8 jpeg_proc ; uint8 subsamplingcorrect ; uint8 subsamplingcorrect_done ; uint8 subsampling_tag ; uint8 subsampling_hor ; uint8 subsampling_ver ; uint8 subsampling_force_desubsampling_inside_decompression ; uint8 qtable_offset_count ; uint8 dctable_offset_count ; uint8 actable_offset_count ; uint64 [ 3 ] qtable_offset ; uint64 [ 3 ] dctable_offset ; uint64 [ 3 ] actable_offset ; uint8 * [ 4 ] qtable ; uint8 * [ 4 ] dctable ; uint8 * [ 4 ] actable ; uint16 restart_interval ; uint8 restart_index ; uint8 sof_log ; uint8 sof_marker_id ; uint32 sof_x ; uint32 sof_y ; uint8 [ 3 ] sof_c ; uint8 [ 3 ] sof_hv ; uint8 [ 3 ] sof_tq ; uint8 [ 3 ] sos_cs ; uint8 [ 3 ] sos_tda ; struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ] sos_end ; uint8 readheader_done ; uint8 writeheader_done ; uint16 write_cursample ; uint32 write_curstrile ; uint8 libjpeg_session_active ; uint8 libjpeg_jpeg_query_style ; jpeg_error_mgr libjpeg_jpeg_error_mgr ; jpeg_decompress_struct libjpeg_jpeg_decompress_struct ; jpeg_source_mgr libjpeg_jpeg_source_mgr ; uint8 subsampling_convert_log ; uint32 subsampling_convert_ylinelen ; uint32 subsampling_convert_ylines ; uint32 subsampling_convert_clinelen ; uint32 subsampling_convert_clines ; uint32 subsampling_convert_ybuflen ; uint32 subsampling_convert_cbuflen ; uint32 subsampling_convert_ycbcrbuflen ; uint8 * subsampling_convert_ycbcrbuf ; uint8 * subsampling_convert_ybuf ; uint8 * subsampling_convert_cbbuf ; uint8 * subsampling_convert_crbuf ; uint32 subsampling_convert_ycbcrimagelen ; uint8 * subsampling_convert_ycbcrimage ; uint32 subsampling_convert_clinelenout ; uint32 subsampling_convert_state ; uint32 bytes_per_line ; uint32 lines_per_strile ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint32 in_buffer_strile_count ; uint64 in_buffer_file_pos ; uint8 in_buffer_file_pos_log ; uint64 in_buffer_file_togo ; uint16 in_buffer_togo ; uint8 * in_buffer_cur ; uint8 [ OJPEG_BUFFER ] in_buffer ; OJPEGStateOutState out_state ; uint8 [ OJPEG_BUFFER ] out_buffer ; uint8 * skip_buffer ; }
CLASS_DEF	243:8	337:0	4	struct CLASS_NAME BASE_CLASSES { TIFF * tif ; int decoder_ok ; int error_in_raw_data_decoding ; JMP_BUF exit_jmpbuf ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; uint64 file_size ; uint32 image_width ; uint32 image_length ; uint32 strile_width ; uint32 strile_length ; uint32 strile_length_total ; uint8 samples_per_pixel ; uint8 plane_sample_offset ; uint8 samples_per_pixel_per_plane ; uint64 jpeg_interchange_format ; uint64 jpeg_interchange_format_length ; uint8 jpeg_proc ; uint8 subsamplingcorrect ; uint8 subsamplingcorrect_done ; uint8 subsampling_tag ; uint8 subsampling_hor ; uint8 subsampling_ver ; uint8 subsampling_force_desubsampling_inside_decompression ; uint8 qtable_offset_count ; uint8 dctable_offset_count ; uint8 actable_offset_count ; uint64 [ 3 ] qtable_offset ; uint64 [ 3 ] dctable_offset ; uint64 [ 3 ] actable_offset ; uint8 * [ 4 ] qtable ; uint8 * [ 4 ] dctable ; uint8 * [ 4 ] actable ; uint16 restart_interval ; uint8 restart_index ; uint8 sof_log ; uint8 sof_marker_id ; uint32 sof_x ; uint32 sof_y ; uint8 [ 3 ] sof_c ; uint8 [ 3 ] sof_hv ; uint8 [ 3 ] sof_tq ; uint8 [ 3 ] sos_cs ; uint8 [ 3 ] sos_tda ; struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ] sos_end ; uint8 readheader_done ; uint8 writeheader_done ; uint16 write_cursample ; uint32 write_curstrile ; uint8 libjpeg_session_active ; uint8 libjpeg_jpeg_query_style ; jpeg_error_mgr libjpeg_jpeg_error_mgr ; jpeg_decompress_struct libjpeg_jpeg_decompress_struct ; jpeg_source_mgr libjpeg_jpeg_source_mgr ; uint8 subsampling_convert_log ; uint32 subsampling_convert_ylinelen ; uint32 subsampling_convert_ylines ; uint32 subsampling_convert_clinelen ; uint32 subsampling_convert_clines ; uint32 subsampling_convert_ybuflen ; uint32 subsampling_convert_cbuflen ; uint32 subsampling_convert_ycbcrbuflen ; uint8 * subsampling_convert_ycbcrbuf ; uint8 * subsampling_convert_ybuf ; uint8 * subsampling_convert_cbbuf ; uint8 * subsampling_convert_crbuf ; uint32 subsampling_convert_ycbcrimagelen ; uint8 * subsampling_convert_ycbcrimage ; uint32 subsampling_convert_clinelenout ; uint32 subsampling_convert_state ; uint32 bytes_per_line ; uint32 lines_per_strile ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint32 in_buffer_strile_count ; uint64 in_buffer_file_pos ; uint8 in_buffer_file_pos_log ; uint64 in_buffer_file_togo ; uint16 in_buffer_togo ; uint8 * in_buffer_cur ; uint8 [ OJPEG_BUFFER ] in_buffer ; OJPEGStateOutState out_state ; uint8 [ OJPEG_BUFFER ] out_buffer ; uint8 * skip_buffer ; }
LEAF_NODE	243:8	243:8	5	struct
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	243:15	243:15	5	{
CLASS_CONTENT	244:1	336:1	5	TIFF * tif ; int decoder_ok ; int error_in_raw_data_decoding ; JMP_BUF exit_jmpbuf ; TIFFVGetMethod vgetparent ; TIFFVSetMethod vsetparent ; TIFFPrintMethod printdir ; uint64 file_size ; uint32 image_width ; uint32 image_length ; uint32 strile_width ; uint32 strile_length ; uint32 strile_length_total ; uint8 samples_per_pixel ; uint8 plane_sample_offset ; uint8 samples_per_pixel_per_plane ; uint64 jpeg_interchange_format ; uint64 jpeg_interchange_format_length ; uint8 jpeg_proc ; uint8 subsamplingcorrect ; uint8 subsamplingcorrect_done ; uint8 subsampling_tag ; uint8 subsampling_hor ; uint8 subsampling_ver ; uint8 subsampling_force_desubsampling_inside_decompression ; uint8 qtable_offset_count ; uint8 dctable_offset_count ; uint8 actable_offset_count ; uint64 [ 3 ] qtable_offset ; uint64 [ 3 ] dctable_offset ; uint64 [ 3 ] actable_offset ; uint8 * [ 4 ] qtable ; uint8 * [ 4 ] dctable ; uint8 * [ 4 ] actable ; uint16 restart_interval ; uint8 restart_index ; uint8 sof_log ; uint8 sof_marker_id ; uint32 sof_x ; uint32 sof_y ; uint8 [ 3 ] sof_c ; uint8 [ 3 ] sof_hv ; uint8 [ 3 ] sof_tq ; uint8 [ 3 ] sos_cs ; uint8 [ 3 ] sos_tda ; struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ] sos_end ; uint8 readheader_done ; uint8 writeheader_done ; uint16 write_cursample ; uint32 write_curstrile ; uint8 libjpeg_session_active ; uint8 libjpeg_jpeg_query_style ; jpeg_error_mgr libjpeg_jpeg_error_mgr ; jpeg_decompress_struct libjpeg_jpeg_decompress_struct ; jpeg_source_mgr libjpeg_jpeg_source_mgr ; uint8 subsampling_convert_log ; uint32 subsampling_convert_ylinelen ; uint32 subsampling_convert_ylines ; uint32 subsampling_convert_clinelen ; uint32 subsampling_convert_clines ; uint32 subsampling_convert_ybuflen ; uint32 subsampling_convert_cbuflen ; uint32 subsampling_convert_ycbcrbuflen ; uint8 * subsampling_convert_ycbcrbuf ; uint8 * subsampling_convert_ybuf ; uint8 * subsampling_convert_cbbuf ; uint8 * subsampling_convert_crbuf ; uint32 subsampling_convert_ycbcrimagelen ; uint8 * subsampling_convert_ycbcrimage ; uint32 subsampling_convert_clinelenout ; uint32 subsampling_convert_state ; uint32 bytes_per_line ; uint32 lines_per_strile ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint32 in_buffer_strile_count ; uint64 in_buffer_file_pos ; uint8 in_buffer_file_pos_log ; uint64 in_buffer_file_togo ; uint16 in_buffer_togo ; uint8 * in_buffer_cur ; uint8 [ OJPEG_BUFFER ] in_buffer ; OJPEGStateOutState out_state ; uint8 [ OJPEG_BUFFER ] out_buffer ; uint8 * skip_buffer ;
SIMPLE_DECL	244:1	244:10	6	TIFF * tif ;
VAR_DECL	244:1	244:7	7	TIFF * tif
TYPE	244:1	244:5	8	TIFF *
TYPE_NAME	244:1	244:1	9	TIFF
LEAF_NODE	244:1	244:1	10	TIFF
POINTER	244:5	244:5	9	*
LEAF_NODE	244:5	244:5	10	*
NAME	244:7	244:7	8	tif
LEAF_NODE	244:7	244:7	9	tif
LEAF_NODE	244:10	244:10	7	;
SIMPLE_DECL	245:8	245:22	6	int decoder_ok ;
VAR_DECL	245:8	245:12	7	int decoder_ok
TYPE	245:8	245:8	8	int
TYPE_NAME	245:8	245:8	9	int
LEAF_NODE	245:8	245:8	10	int
NAME	245:12	245:12	8	decoder_ok
LEAF_NODE	245:12	245:12	9	decoder_ok
LEAF_NODE	245:22	245:22	7	;
SIMPLE_DECL	246:8	246:38	6	int error_in_raw_data_decoding ;
VAR_DECL	246:8	246:12	7	int error_in_raw_data_decoding
TYPE	246:8	246:8	8	int
TYPE_NAME	246:8	246:8	9	int
LEAF_NODE	246:8	246:8	10	int
NAME	246:12	246:12	8	error_in_raw_data_decoding
LEAF_NODE	246:12	246:12	9	error_in_raw_data_decoding
LEAF_NODE	246:38	246:38	7	;
SIMPLE_DECL	248:1	248:20	6	JMP_BUF exit_jmpbuf ;
VAR_DECL	248:1	248:9	7	JMP_BUF exit_jmpbuf
TYPE	248:1	248:1	8	JMP_BUF
TYPE_NAME	248:1	248:1	9	JMP_BUF
LEAF_NODE	248:1	248:1	10	JMP_BUF
NAME	248:9	248:9	8	exit_jmpbuf
LEAF_NODE	248:9	248:9	9	exit_jmpbuf
LEAF_NODE	248:20	248:20	7	;
SIMPLE_DECL	250:1	250:26	6	TIFFVGetMethod vgetparent ;
VAR_DECL	250:1	250:16	7	TIFFVGetMethod vgetparent
TYPE	250:1	250:1	8	TIFFVGetMethod
TYPE_NAME	250:1	250:1	9	TIFFVGetMethod
LEAF_NODE	250:1	250:1	10	TIFFVGetMethod
NAME	250:16	250:16	8	vgetparent
LEAF_NODE	250:16	250:16	9	vgetparent
LEAF_NODE	250:26	250:26	7	;
SIMPLE_DECL	251:1	251:26	6	TIFFVSetMethod vsetparent ;
VAR_DECL	251:1	251:16	7	TIFFVSetMethod vsetparent
TYPE	251:1	251:1	8	TIFFVSetMethod
TYPE_NAME	251:1	251:1	9	TIFFVSetMethod
LEAF_NODE	251:1	251:1	10	TIFFVSetMethod
NAME	251:16	251:16	8	vsetparent
LEAF_NODE	251:16	251:16	9	vsetparent
LEAF_NODE	251:26	251:26	7	;
SIMPLE_DECL	252:1	252:25	6	TIFFPrintMethod printdir ;
VAR_DECL	252:1	252:17	7	TIFFPrintMethod printdir
TYPE	252:1	252:1	8	TIFFPrintMethod
TYPE_NAME	252:1	252:1	9	TIFFPrintMethod
LEAF_NODE	252:1	252:1	10	TIFFPrintMethod
NAME	252:17	252:17	8	printdir
LEAF_NODE	252:17	252:17	9	printdir
LEAF_NODE	252:25	252:25	7	;
SIMPLE_DECL	253:1	253:17	6	uint64 file_size ;
VAR_DECL	253:1	253:8	7	uint64 file_size
TYPE	253:1	253:1	8	uint64
TYPE_NAME	253:1	253:1	9	uint64
LEAF_NODE	253:1	253:1	10	uint64
NAME	253:8	253:8	8	file_size
LEAF_NODE	253:8	253:8	9	file_size
LEAF_NODE	253:17	253:17	7	;
SIMPLE_DECL	254:1	254:19	6	uint32 image_width ;
VAR_DECL	254:1	254:8	7	uint32 image_width
TYPE	254:1	254:1	8	uint32
TYPE_NAME	254:1	254:1	9	uint32
LEAF_NODE	254:1	254:1	10	uint32
NAME	254:8	254:8	8	image_width
LEAF_NODE	254:8	254:8	9	image_width
LEAF_NODE	254:19	254:19	7	;
SIMPLE_DECL	255:1	255:20	6	uint32 image_length ;
VAR_DECL	255:1	255:8	7	uint32 image_length
TYPE	255:1	255:1	8	uint32
TYPE_NAME	255:1	255:1	9	uint32
LEAF_NODE	255:1	255:1	10	uint32
NAME	255:8	255:8	8	image_length
LEAF_NODE	255:8	255:8	9	image_length
LEAF_NODE	255:20	255:20	7	;
SIMPLE_DECL	256:1	256:20	6	uint32 strile_width ;
VAR_DECL	256:1	256:8	7	uint32 strile_width
TYPE	256:1	256:1	8	uint32
TYPE_NAME	256:1	256:1	9	uint32
LEAF_NODE	256:1	256:1	10	uint32
NAME	256:8	256:8	8	strile_width
LEAF_NODE	256:8	256:8	9	strile_width
LEAF_NODE	256:20	256:20	7	;
SIMPLE_DECL	257:1	257:21	6	uint32 strile_length ;
VAR_DECL	257:1	257:8	7	uint32 strile_length
TYPE	257:1	257:1	8	uint32
TYPE_NAME	257:1	257:1	9	uint32
LEAF_NODE	257:1	257:1	10	uint32
NAME	257:8	257:8	8	strile_length
LEAF_NODE	257:8	257:8	9	strile_length
LEAF_NODE	257:21	257:21	7	;
SIMPLE_DECL	258:1	258:27	6	uint32 strile_length_total ;
VAR_DECL	258:1	258:8	7	uint32 strile_length_total
TYPE	258:1	258:1	8	uint32
TYPE_NAME	258:1	258:1	9	uint32
LEAF_NODE	258:1	258:1	10	uint32
NAME	258:8	258:8	8	strile_length_total
LEAF_NODE	258:8	258:8	9	strile_length_total
LEAF_NODE	258:27	258:27	7	;
SIMPLE_DECL	259:1	259:24	6	uint8 samples_per_pixel ;
VAR_DECL	259:1	259:7	7	uint8 samples_per_pixel
TYPE	259:1	259:1	8	uint8
TYPE_NAME	259:1	259:1	9	uint8
LEAF_NODE	259:1	259:1	10	uint8
NAME	259:7	259:7	8	samples_per_pixel
LEAF_NODE	259:7	259:7	9	samples_per_pixel
LEAF_NODE	259:24	259:24	7	;
SIMPLE_DECL	260:1	260:26	6	uint8 plane_sample_offset ;
VAR_DECL	260:1	260:7	7	uint8 plane_sample_offset
TYPE	260:1	260:1	8	uint8
TYPE_NAME	260:1	260:1	9	uint8
LEAF_NODE	260:1	260:1	10	uint8
NAME	260:7	260:7	8	plane_sample_offset
LEAF_NODE	260:7	260:7	9	plane_sample_offset
LEAF_NODE	260:26	260:26	7	;
SIMPLE_DECL	261:1	261:34	6	uint8 samples_per_pixel_per_plane ;
VAR_DECL	261:1	261:7	7	uint8 samples_per_pixel_per_plane
TYPE	261:1	261:1	8	uint8
TYPE_NAME	261:1	261:1	9	uint8
LEAF_NODE	261:1	261:1	10	uint8
NAME	261:7	261:7	8	samples_per_pixel_per_plane
LEAF_NODE	261:7	261:7	9	samples_per_pixel_per_plane
LEAF_NODE	261:34	261:34	7	;
SIMPLE_DECL	262:1	262:31	6	uint64 jpeg_interchange_format ;
VAR_DECL	262:1	262:8	7	uint64 jpeg_interchange_format
TYPE	262:1	262:1	8	uint64
TYPE_NAME	262:1	262:1	9	uint64
LEAF_NODE	262:1	262:1	10	uint64
NAME	262:8	262:8	8	jpeg_interchange_format
LEAF_NODE	262:8	262:8	9	jpeg_interchange_format
LEAF_NODE	262:31	262:31	7	;
SIMPLE_DECL	263:1	263:38	6	uint64 jpeg_interchange_format_length ;
VAR_DECL	263:1	263:8	7	uint64 jpeg_interchange_format_length
TYPE	263:1	263:1	8	uint64
TYPE_NAME	263:1	263:1	9	uint64
LEAF_NODE	263:1	263:1	10	uint64
NAME	263:8	263:8	8	jpeg_interchange_format_length
LEAF_NODE	263:8	263:8	9	jpeg_interchange_format_length
LEAF_NODE	263:38	263:38	7	;
SIMPLE_DECL	264:1	264:16	6	uint8 jpeg_proc ;
VAR_DECL	264:1	264:7	7	uint8 jpeg_proc
TYPE	264:1	264:1	8	uint8
TYPE_NAME	264:1	264:1	9	uint8
LEAF_NODE	264:1	264:1	10	uint8
NAME	264:7	264:7	8	jpeg_proc
LEAF_NODE	264:7	264:7	9	jpeg_proc
LEAF_NODE	264:16	264:16	7	;
SIMPLE_DECL	265:1	265:25	6	uint8 subsamplingcorrect ;
VAR_DECL	265:1	265:7	7	uint8 subsamplingcorrect
TYPE	265:1	265:1	8	uint8
TYPE_NAME	265:1	265:1	9	uint8
LEAF_NODE	265:1	265:1	10	uint8
NAME	265:7	265:7	8	subsamplingcorrect
LEAF_NODE	265:7	265:7	9	subsamplingcorrect
LEAF_NODE	265:25	265:25	7	;
SIMPLE_DECL	266:1	266:30	6	uint8 subsamplingcorrect_done ;
VAR_DECL	266:1	266:7	7	uint8 subsamplingcorrect_done
TYPE	266:1	266:1	8	uint8
TYPE_NAME	266:1	266:1	9	uint8
LEAF_NODE	266:1	266:1	10	uint8
NAME	266:7	266:7	8	subsamplingcorrect_done
LEAF_NODE	266:7	266:7	9	subsamplingcorrect_done
LEAF_NODE	266:30	266:30	7	;
SIMPLE_DECL	267:1	267:22	6	uint8 subsampling_tag ;
VAR_DECL	267:1	267:7	7	uint8 subsampling_tag
TYPE	267:1	267:1	8	uint8
TYPE_NAME	267:1	267:1	9	uint8
LEAF_NODE	267:1	267:1	10	uint8
NAME	267:7	267:7	8	subsampling_tag
LEAF_NODE	267:7	267:7	9	subsampling_tag
LEAF_NODE	267:22	267:22	7	;
SIMPLE_DECL	268:1	268:22	6	uint8 subsampling_hor ;
VAR_DECL	268:1	268:7	7	uint8 subsampling_hor
TYPE	268:1	268:1	8	uint8
TYPE_NAME	268:1	268:1	9	uint8
LEAF_NODE	268:1	268:1	10	uint8
NAME	268:7	268:7	8	subsampling_hor
LEAF_NODE	268:7	268:7	9	subsampling_hor
LEAF_NODE	268:22	268:22	7	;
SIMPLE_DECL	269:1	269:22	6	uint8 subsampling_ver ;
VAR_DECL	269:1	269:7	7	uint8 subsampling_ver
TYPE	269:1	269:1	8	uint8
TYPE_NAME	269:1	269:1	9	uint8
LEAF_NODE	269:1	269:1	10	uint8
NAME	269:7	269:7	8	subsampling_ver
LEAF_NODE	269:7	269:7	9	subsampling_ver
LEAF_NODE	269:22	269:22	7	;
SIMPLE_DECL	270:1	270:59	6	uint8 subsampling_force_desubsampling_inside_decompression ;
VAR_DECL	270:1	270:7	7	uint8 subsampling_force_desubsampling_inside_decompression
TYPE	270:1	270:1	8	uint8
TYPE_NAME	270:1	270:1	9	uint8
LEAF_NODE	270:1	270:1	10	uint8
NAME	270:7	270:7	8	subsampling_force_desubsampling_inside_decompression
LEAF_NODE	270:7	270:7	9	subsampling_force_desubsampling_inside_decompression
LEAF_NODE	270:59	270:59	7	;
SIMPLE_DECL	271:1	271:26	6	uint8 qtable_offset_count ;
VAR_DECL	271:1	271:7	7	uint8 qtable_offset_count
TYPE	271:1	271:1	8	uint8
TYPE_NAME	271:1	271:1	9	uint8
LEAF_NODE	271:1	271:1	10	uint8
NAME	271:7	271:7	8	qtable_offset_count
LEAF_NODE	271:7	271:7	9	qtable_offset_count
LEAF_NODE	271:26	271:26	7	;
SIMPLE_DECL	272:1	272:27	6	uint8 dctable_offset_count ;
VAR_DECL	272:1	272:7	7	uint8 dctable_offset_count
TYPE	272:1	272:1	8	uint8
TYPE_NAME	272:1	272:1	9	uint8
LEAF_NODE	272:1	272:1	10	uint8
NAME	272:7	272:7	8	dctable_offset_count
LEAF_NODE	272:7	272:7	9	dctable_offset_count
LEAF_NODE	272:27	272:27	7	;
SIMPLE_DECL	273:1	273:27	6	uint8 actable_offset_count ;
VAR_DECL	273:1	273:7	7	uint8 actable_offset_count
TYPE	273:1	273:1	8	uint8
TYPE_NAME	273:1	273:1	9	uint8
LEAF_NODE	273:1	273:1	10	uint8
NAME	273:7	273:7	8	actable_offset_count
LEAF_NODE	273:7	273:7	9	actable_offset_count
LEAF_NODE	273:27	273:27	7	;
SIMPLE_DECL	274:1	274:24	6	uint64 [ 3 ] qtable_offset ;
VAR_DECL	274:1	274:8	7	uint64 [ 3 ] qtable_offset
TYPE	274:1	274:21	8	uint64 [ 3 ]
TYPE_NAME	274:1	274:1	9	uint64
LEAF_NODE	274:1	274:1	10	uint64
TYPE_SUFFIX	274:21	274:23	9	[ 3 ]
LEAF_NODE	274:21	274:21	10	[
FIELD	274:22	274:22	10	3
LEAF_NODE	274:22	274:22	11	3
LEAF_NODE	274:23	274:23	10	]
NAME	274:8	274:8	8	qtable_offset
LEAF_NODE	274:8	274:8	9	qtable_offset
LEAF_NODE	274:24	274:24	7	;
SIMPLE_DECL	275:1	275:25	6	uint64 [ 3 ] dctable_offset ;
VAR_DECL	275:1	275:8	7	uint64 [ 3 ] dctable_offset
TYPE	275:1	275:22	8	uint64 [ 3 ]
TYPE_NAME	275:1	275:1	9	uint64
LEAF_NODE	275:1	275:1	10	uint64
TYPE_SUFFIX	275:22	275:24	9	[ 3 ]
LEAF_NODE	275:22	275:22	10	[
FIELD	275:23	275:23	10	3
LEAF_NODE	275:23	275:23	11	3
LEAF_NODE	275:24	275:24	10	]
NAME	275:8	275:8	8	dctable_offset
LEAF_NODE	275:8	275:8	9	dctable_offset
LEAF_NODE	275:25	275:25	7	;
SIMPLE_DECL	276:1	276:25	6	uint64 [ 3 ] actable_offset ;
VAR_DECL	276:1	276:8	7	uint64 [ 3 ] actable_offset
TYPE	276:1	276:22	8	uint64 [ 3 ]
TYPE_NAME	276:1	276:1	9	uint64
LEAF_NODE	276:1	276:1	10	uint64
TYPE_SUFFIX	276:22	276:24	9	[ 3 ]
LEAF_NODE	276:22	276:22	10	[
FIELD	276:23	276:23	10	3
LEAF_NODE	276:23	276:23	11	3
LEAF_NODE	276:24	276:24	10	]
NAME	276:8	276:8	8	actable_offset
LEAF_NODE	276:8	276:8	9	actable_offset
LEAF_NODE	276:25	276:25	7	;
SIMPLE_DECL	277:1	277:17	6	uint8 * [ 4 ] qtable ;
VAR_DECL	277:1	277:8	7	uint8 * [ 4 ] qtable
TYPE	277:1	277:14	8	uint8 * [ 4 ]
TYPE_NAME	277:1	277:1	9	uint8
LEAF_NODE	277:1	277:1	10	uint8
POINTER	277:6	277:6	9	*
LEAF_NODE	277:6	277:6	10	*
TYPE_SUFFIX	277:14	277:16	9	[ 4 ]
LEAF_NODE	277:14	277:14	10	[
FIELD	277:15	277:15	10	4
LEAF_NODE	277:15	277:15	11	4
LEAF_NODE	277:16	277:16	10	]
NAME	277:8	277:8	8	qtable
LEAF_NODE	277:8	277:8	9	qtable
LEAF_NODE	277:17	277:17	7	;
SIMPLE_DECL	278:1	278:18	6	uint8 * [ 4 ] dctable ;
VAR_DECL	278:1	278:8	7	uint8 * [ 4 ] dctable
TYPE	278:1	278:15	8	uint8 * [ 4 ]
TYPE_NAME	278:1	278:1	9	uint8
LEAF_NODE	278:1	278:1	10	uint8
POINTER	278:6	278:6	9	*
LEAF_NODE	278:6	278:6	10	*
TYPE_SUFFIX	278:15	278:17	9	[ 4 ]
LEAF_NODE	278:15	278:15	10	[
FIELD	278:16	278:16	10	4
LEAF_NODE	278:16	278:16	11	4
LEAF_NODE	278:17	278:17	10	]
NAME	278:8	278:8	8	dctable
LEAF_NODE	278:8	278:8	9	dctable
LEAF_NODE	278:18	278:18	7	;
SIMPLE_DECL	279:1	279:18	6	uint8 * [ 4 ] actable ;
VAR_DECL	279:1	279:8	7	uint8 * [ 4 ] actable
TYPE	279:1	279:15	8	uint8 * [ 4 ]
TYPE_NAME	279:1	279:1	9	uint8
LEAF_NODE	279:1	279:1	10	uint8
POINTER	279:6	279:6	9	*
LEAF_NODE	279:6	279:6	10	*
TYPE_SUFFIX	279:15	279:17	9	[ 4 ]
LEAF_NODE	279:15	279:15	10	[
FIELD	279:16	279:16	10	4
LEAF_NODE	279:16	279:16	11	4
LEAF_NODE	279:17	279:17	10	]
NAME	279:8	279:8	8	actable
LEAF_NODE	279:8	279:8	9	actable
LEAF_NODE	279:18	279:18	7	;
SIMPLE_DECL	280:1	280:24	6	uint16 restart_interval ;
VAR_DECL	280:1	280:8	7	uint16 restart_interval
TYPE	280:1	280:1	8	uint16
TYPE_NAME	280:1	280:1	9	uint16
LEAF_NODE	280:1	280:1	10	uint16
NAME	280:8	280:8	8	restart_interval
LEAF_NODE	280:8	280:8	9	restart_interval
LEAF_NODE	280:24	280:24	7	;
SIMPLE_DECL	281:1	281:20	6	uint8 restart_index ;
VAR_DECL	281:1	281:7	7	uint8 restart_index
TYPE	281:1	281:1	8	uint8
TYPE_NAME	281:1	281:1	9	uint8
LEAF_NODE	281:1	281:1	10	uint8
NAME	281:7	281:7	8	restart_index
LEAF_NODE	281:7	281:7	9	restart_index
LEAF_NODE	281:20	281:20	7	;
SIMPLE_DECL	282:1	282:14	6	uint8 sof_log ;
VAR_DECL	282:1	282:7	7	uint8 sof_log
TYPE	282:1	282:1	8	uint8
TYPE_NAME	282:1	282:1	9	uint8
LEAF_NODE	282:1	282:1	10	uint8
NAME	282:7	282:7	8	sof_log
LEAF_NODE	282:7	282:7	9	sof_log
LEAF_NODE	282:14	282:14	7	;
SIMPLE_DECL	283:1	283:20	6	uint8 sof_marker_id ;
VAR_DECL	283:1	283:7	7	uint8 sof_marker_id
TYPE	283:1	283:1	8	uint8
TYPE_NAME	283:1	283:1	9	uint8
LEAF_NODE	283:1	283:1	10	uint8
NAME	283:7	283:7	8	sof_marker_id
LEAF_NODE	283:7	283:7	9	sof_marker_id
LEAF_NODE	283:20	283:20	7	;
SIMPLE_DECL	284:1	284:13	6	uint32 sof_x ;
VAR_DECL	284:1	284:8	7	uint32 sof_x
TYPE	284:1	284:1	8	uint32
TYPE_NAME	284:1	284:1	9	uint32
LEAF_NODE	284:1	284:1	10	uint32
NAME	284:8	284:8	8	sof_x
LEAF_NODE	284:8	284:8	9	sof_x
LEAF_NODE	284:13	284:13	7	;
SIMPLE_DECL	285:1	285:13	6	uint32 sof_y ;
VAR_DECL	285:1	285:8	7	uint32 sof_y
TYPE	285:1	285:1	8	uint32
TYPE_NAME	285:1	285:1	9	uint32
LEAF_NODE	285:1	285:1	10	uint32
NAME	285:8	285:8	8	sof_y
LEAF_NODE	285:8	285:8	9	sof_y
LEAF_NODE	285:13	285:13	7	;
SIMPLE_DECL	286:1	286:15	6	uint8 [ 3 ] sof_c ;
VAR_DECL	286:1	286:7	7	uint8 [ 3 ] sof_c
TYPE	286:1	286:12	8	uint8 [ 3 ]
TYPE_NAME	286:1	286:1	9	uint8
LEAF_NODE	286:1	286:1	10	uint8
TYPE_SUFFIX	286:12	286:14	9	[ 3 ]
LEAF_NODE	286:12	286:12	10	[
FIELD	286:13	286:13	10	3
LEAF_NODE	286:13	286:13	11	3
LEAF_NODE	286:14	286:14	10	]
NAME	286:7	286:7	8	sof_c
LEAF_NODE	286:7	286:7	9	sof_c
LEAF_NODE	286:15	286:15	7	;
SIMPLE_DECL	287:1	287:16	6	uint8 [ 3 ] sof_hv ;
VAR_DECL	287:1	287:7	7	uint8 [ 3 ] sof_hv
TYPE	287:1	287:13	8	uint8 [ 3 ]
TYPE_NAME	287:1	287:1	9	uint8
LEAF_NODE	287:1	287:1	10	uint8
TYPE_SUFFIX	287:13	287:15	9	[ 3 ]
LEAF_NODE	287:13	287:13	10	[
FIELD	287:14	287:14	10	3
LEAF_NODE	287:14	287:14	11	3
LEAF_NODE	287:15	287:15	10	]
NAME	287:7	287:7	8	sof_hv
LEAF_NODE	287:7	287:7	9	sof_hv
LEAF_NODE	287:16	287:16	7	;
SIMPLE_DECL	288:1	288:16	6	uint8 [ 3 ] sof_tq ;
VAR_DECL	288:1	288:7	7	uint8 [ 3 ] sof_tq
TYPE	288:1	288:13	8	uint8 [ 3 ]
TYPE_NAME	288:1	288:1	9	uint8
LEAF_NODE	288:1	288:1	10	uint8
TYPE_SUFFIX	288:13	288:15	9	[ 3 ]
LEAF_NODE	288:13	288:13	10	[
FIELD	288:14	288:14	10	3
LEAF_NODE	288:14	288:14	11	3
LEAF_NODE	288:15	288:15	10	]
NAME	288:7	288:7	8	sof_tq
LEAF_NODE	288:7	288:7	9	sof_tq
LEAF_NODE	288:16	288:16	7	;
SIMPLE_DECL	289:1	289:16	6	uint8 [ 3 ] sos_cs ;
VAR_DECL	289:1	289:7	7	uint8 [ 3 ] sos_cs
TYPE	289:1	289:13	8	uint8 [ 3 ]
TYPE_NAME	289:1	289:1	9	uint8
LEAF_NODE	289:1	289:1	10	uint8
TYPE_SUFFIX	289:13	289:15	9	[ 3 ]
LEAF_NODE	289:13	289:13	10	[
FIELD	289:14	289:14	10	3
LEAF_NODE	289:14	289:14	11	3
LEAF_NODE	289:15	289:15	10	]
NAME	289:7	289:7	8	sos_cs
LEAF_NODE	289:7	289:7	9	sos_cs
LEAF_NODE	289:16	289:16	7	;
SIMPLE_DECL	290:1	290:17	6	uint8 [ 3 ] sos_tda ;
VAR_DECL	290:1	290:7	7	uint8 [ 3 ] sos_tda
TYPE	290:1	290:14	8	uint8 [ 3 ]
TYPE_NAME	290:1	290:1	9	uint8
LEAF_NODE	290:1	290:1	10	uint8
TYPE_SUFFIX	290:14	290:16	9	[ 3 ]
LEAF_NODE	290:14	290:14	10	[
FIELD	290:15	290:15	10	3
LEAF_NODE	290:15	290:15	11	3
LEAF_NODE	290:16	290:16	10	]
NAME	290:7	290:7	8	sos_tda
LEAF_NODE	290:7	290:7	9	sos_tda
LEAF_NODE	290:17	290:17	7	;
SIMPLE_DECL	291:1	297:13	6	struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ] sos_end ;
VAR_DECL	291:1	297:3	7	struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ] sos_end
TYPE	291:1	297:10	8	struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; } [ 3 ]
CLASS_DEF	291:1	297:1	9	struct CLASS_NAME BASE_CLASSES { uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ; }
LEAF_NODE	291:1	291:1	10	struct
LEAF_NODE	0:0	0:0	10	CLASS_NAME
LEAF_NODE	0:0	0:0	10	BASE_CLASSES
LEAF_NODE	291:8	291:8	10	{
CLASS_CONTENT	292:2	296:2	10	uint8 log ; OJPEGStateInBufferSource in_buffer_source ; uint32 in_buffer_next_strile ; uint64 in_buffer_file_pos ; uint64 in_buffer_file_togo ;
SIMPLE_DECL	292:2	292:11	11	uint8 log ;
VAR_DECL	292:2	292:8	12	uint8 log
TYPE	292:2	292:2	13	uint8
TYPE_NAME	292:2	292:2	14	uint8
LEAF_NODE	292:2	292:2	15	uint8
NAME	292:8	292:8	13	log
LEAF_NODE	292:8	292:8	14	log
LEAF_NODE	292:11	292:11	12	;
SIMPLE_DECL	293:2	293:43	11	OJPEGStateInBufferSource in_buffer_source ;
VAR_DECL	293:2	293:27	12	OJPEGStateInBufferSource in_buffer_source
TYPE	293:2	293:2	13	OJPEGStateInBufferSource
TYPE_NAME	293:2	293:2	14	OJPEGStateInBufferSource
LEAF_NODE	293:2	293:2	15	OJPEGStateInBufferSource
NAME	293:27	293:27	13	in_buffer_source
LEAF_NODE	293:27	293:27	14	in_buffer_source
LEAF_NODE	293:43	293:43	12	;
SIMPLE_DECL	294:2	294:30	11	uint32 in_buffer_next_strile ;
VAR_DECL	294:2	294:9	12	uint32 in_buffer_next_strile
TYPE	294:2	294:2	13	uint32
TYPE_NAME	294:2	294:2	14	uint32
LEAF_NODE	294:2	294:2	15	uint32
NAME	294:9	294:9	13	in_buffer_next_strile
LEAF_NODE	294:9	294:9	14	in_buffer_next_strile
LEAF_NODE	294:30	294:30	12	;
SIMPLE_DECL	295:2	295:27	11	uint64 in_buffer_file_pos ;
VAR_DECL	295:2	295:9	12	uint64 in_buffer_file_pos
TYPE	295:2	295:2	13	uint64
TYPE_NAME	295:2	295:2	14	uint64
LEAF_NODE	295:2	295:2	15	uint64
NAME	295:9	295:9	13	in_buffer_file_pos
LEAF_NODE	295:9	295:9	14	in_buffer_file_pos
LEAF_NODE	295:27	295:27	12	;
SIMPLE_DECL	296:2	296:28	11	uint64 in_buffer_file_togo ;
VAR_DECL	296:2	296:9	12	uint64 in_buffer_file_togo
TYPE	296:2	296:2	13	uint64
TYPE_NAME	296:2	296:2	14	uint64
LEAF_NODE	296:2	296:2	15	uint64
NAME	296:9	296:9	13	in_buffer_file_togo
LEAF_NODE	296:9	296:9	14	in_buffer_file_togo
LEAF_NODE	296:28	296:28	12	;
LEAF_NODE	297:1	297:1	10	}
TYPE_SUFFIX	297:10	297:12	9	[ 3 ]
LEAF_NODE	297:10	297:10	10	[
FIELD	297:11	297:11	10	3
LEAF_NODE	297:11	297:11	11	3
LEAF_NODE	297:12	297:12	10	]
NAME	297:3	297:3	8	sos_end
LEAF_NODE	297:3	297:3	9	sos_end
LEAF_NODE	297:13	297:13	7	;
SIMPLE_DECL	298:1	298:22	6	uint8 readheader_done ;
VAR_DECL	298:1	298:7	7	uint8 readheader_done
TYPE	298:1	298:1	8	uint8
TYPE_NAME	298:1	298:1	9	uint8
LEAF_NODE	298:1	298:1	10	uint8
NAME	298:7	298:7	8	readheader_done
LEAF_NODE	298:7	298:7	9	readheader_done
LEAF_NODE	298:22	298:22	7	;
SIMPLE_DECL	299:1	299:23	6	uint8 writeheader_done ;
VAR_DECL	299:1	299:7	7	uint8 writeheader_done
TYPE	299:1	299:1	8	uint8
TYPE_NAME	299:1	299:1	9	uint8
LEAF_NODE	299:1	299:1	10	uint8
NAME	299:7	299:7	8	writeheader_done
LEAF_NODE	299:7	299:7	9	writeheader_done
LEAF_NODE	299:23	299:23	7	;
SIMPLE_DECL	300:1	300:23	6	uint16 write_cursample ;
VAR_DECL	300:1	300:8	7	uint16 write_cursample
TYPE	300:1	300:1	8	uint16
TYPE_NAME	300:1	300:1	9	uint16
LEAF_NODE	300:1	300:1	10	uint16
NAME	300:8	300:8	8	write_cursample
LEAF_NODE	300:8	300:8	9	write_cursample
LEAF_NODE	300:23	300:23	7	;
SIMPLE_DECL	301:1	301:23	6	uint32 write_curstrile ;
VAR_DECL	301:1	301:8	7	uint32 write_curstrile
TYPE	301:1	301:1	8	uint32
TYPE_NAME	301:1	301:1	9	uint32
LEAF_NODE	301:1	301:1	10	uint32
NAME	301:8	301:8	8	write_curstrile
LEAF_NODE	301:8	301:8	9	write_curstrile
LEAF_NODE	301:23	301:23	7	;
SIMPLE_DECL	302:1	302:29	6	uint8 libjpeg_session_active ;
VAR_DECL	302:1	302:7	7	uint8 libjpeg_session_active
TYPE	302:1	302:1	8	uint8
TYPE_NAME	302:1	302:1	9	uint8
LEAF_NODE	302:1	302:1	10	uint8
NAME	302:7	302:7	8	libjpeg_session_active
LEAF_NODE	302:7	302:7	9	libjpeg_session_active
LEAF_NODE	302:29	302:29	7	;
SIMPLE_DECL	303:1	303:31	6	uint8 libjpeg_jpeg_query_style ;
VAR_DECL	303:1	303:7	7	uint8 libjpeg_jpeg_query_style
TYPE	303:1	303:1	8	uint8
TYPE_NAME	303:1	303:1	9	uint8
LEAF_NODE	303:1	303:1	10	uint8
NAME	303:7	303:7	8	libjpeg_jpeg_query_style
LEAF_NODE	303:7	303:7	9	libjpeg_jpeg_query_style
LEAF_NODE	303:31	303:31	7	;
SIMPLE_DECL	304:1	304:38	6	jpeg_error_mgr libjpeg_jpeg_error_mgr ;
VAR_DECL	304:1	304:16	7	jpeg_error_mgr libjpeg_jpeg_error_mgr
TYPE	304:1	304:1	8	jpeg_error_mgr
TYPE_NAME	304:1	304:1	9	jpeg_error_mgr
LEAF_NODE	304:1	304:1	10	jpeg_error_mgr
NAME	304:16	304:16	8	libjpeg_jpeg_error_mgr
LEAF_NODE	304:16	304:16	9	libjpeg_jpeg_error_mgr
LEAF_NODE	304:38	304:38	7	;
SIMPLE_DECL	305:1	305:54	6	jpeg_decompress_struct libjpeg_jpeg_decompress_struct ;
VAR_DECL	305:1	305:24	7	jpeg_decompress_struct libjpeg_jpeg_decompress_struct
TYPE	305:1	305:1	8	jpeg_decompress_struct
TYPE_NAME	305:1	305:1	9	jpeg_decompress_struct
LEAF_NODE	305:1	305:1	10	jpeg_decompress_struct
NAME	305:24	305:24	8	libjpeg_jpeg_decompress_struct
LEAF_NODE	305:24	305:24	9	libjpeg_jpeg_decompress_struct
LEAF_NODE	305:54	305:54	7	;
SIMPLE_DECL	306:1	306:40	6	jpeg_source_mgr libjpeg_jpeg_source_mgr ;
VAR_DECL	306:1	306:17	7	jpeg_source_mgr libjpeg_jpeg_source_mgr
TYPE	306:1	306:1	8	jpeg_source_mgr
TYPE_NAME	306:1	306:1	9	jpeg_source_mgr
LEAF_NODE	306:1	306:1	10	jpeg_source_mgr
NAME	306:17	306:17	8	libjpeg_jpeg_source_mgr
LEAF_NODE	306:17	306:17	9	libjpeg_jpeg_source_mgr
LEAF_NODE	306:40	306:40	7	;
SIMPLE_DECL	307:1	307:30	6	uint8 subsampling_convert_log ;
VAR_DECL	307:1	307:7	7	uint8 subsampling_convert_log
TYPE	307:1	307:1	8	uint8
TYPE_NAME	307:1	307:1	9	uint8
LEAF_NODE	307:1	307:1	10	uint8
NAME	307:7	307:7	8	subsampling_convert_log
LEAF_NODE	307:7	307:7	9	subsampling_convert_log
LEAF_NODE	307:30	307:30	7	;
SIMPLE_DECL	308:1	308:36	6	uint32 subsampling_convert_ylinelen ;
VAR_DECL	308:1	308:8	7	uint32 subsampling_convert_ylinelen
TYPE	308:1	308:1	8	uint32
TYPE_NAME	308:1	308:1	9	uint32
LEAF_NODE	308:1	308:1	10	uint32
NAME	308:8	308:8	8	subsampling_convert_ylinelen
LEAF_NODE	308:8	308:8	9	subsampling_convert_ylinelen
LEAF_NODE	308:36	308:36	7	;
SIMPLE_DECL	309:1	309:34	6	uint32 subsampling_convert_ylines ;
VAR_DECL	309:1	309:8	7	uint32 subsampling_convert_ylines
TYPE	309:1	309:1	8	uint32
TYPE_NAME	309:1	309:1	9	uint32
LEAF_NODE	309:1	309:1	10	uint32
NAME	309:8	309:8	8	subsampling_convert_ylines
LEAF_NODE	309:8	309:8	9	subsampling_convert_ylines
LEAF_NODE	309:34	309:34	7	;
SIMPLE_DECL	310:1	310:36	6	uint32 subsampling_convert_clinelen ;
VAR_DECL	310:1	310:8	7	uint32 subsampling_convert_clinelen
TYPE	310:1	310:1	8	uint32
TYPE_NAME	310:1	310:1	9	uint32
LEAF_NODE	310:1	310:1	10	uint32
NAME	310:8	310:8	8	subsampling_convert_clinelen
LEAF_NODE	310:8	310:8	9	subsampling_convert_clinelen
LEAF_NODE	310:36	310:36	7	;
SIMPLE_DECL	311:1	311:34	6	uint32 subsampling_convert_clines ;
VAR_DECL	311:1	311:8	7	uint32 subsampling_convert_clines
TYPE	311:1	311:1	8	uint32
TYPE_NAME	311:1	311:1	9	uint32
LEAF_NODE	311:1	311:1	10	uint32
NAME	311:8	311:8	8	subsampling_convert_clines
LEAF_NODE	311:8	311:8	9	subsampling_convert_clines
LEAF_NODE	311:34	311:34	7	;
SIMPLE_DECL	312:1	312:35	6	uint32 subsampling_convert_ybuflen ;
VAR_DECL	312:1	312:8	7	uint32 subsampling_convert_ybuflen
TYPE	312:1	312:1	8	uint32
TYPE_NAME	312:1	312:1	9	uint32
LEAF_NODE	312:1	312:1	10	uint32
NAME	312:8	312:8	8	subsampling_convert_ybuflen
LEAF_NODE	312:8	312:8	9	subsampling_convert_ybuflen
LEAF_NODE	312:35	312:35	7	;
SIMPLE_DECL	313:1	313:35	6	uint32 subsampling_convert_cbuflen ;
VAR_DECL	313:1	313:8	7	uint32 subsampling_convert_cbuflen
TYPE	313:1	313:1	8	uint32
TYPE_NAME	313:1	313:1	9	uint32
LEAF_NODE	313:1	313:1	10	uint32
NAME	313:8	313:8	8	subsampling_convert_cbuflen
LEAF_NODE	313:8	313:8	9	subsampling_convert_cbuflen
LEAF_NODE	313:35	313:35	7	;
SIMPLE_DECL	314:1	314:39	6	uint32 subsampling_convert_ycbcrbuflen ;
VAR_DECL	314:1	314:8	7	uint32 subsampling_convert_ycbcrbuflen
TYPE	314:1	314:1	8	uint32
TYPE_NAME	314:1	314:1	9	uint32
LEAF_NODE	314:1	314:1	10	uint32
NAME	314:8	314:8	8	subsampling_convert_ycbcrbuflen
LEAF_NODE	314:8	314:8	9	subsampling_convert_ycbcrbuflen
LEAF_NODE	314:39	314:39	7	;
SIMPLE_DECL	315:1	315:36	6	uint8 * subsampling_convert_ycbcrbuf ;
VAR_DECL	315:1	315:8	7	uint8 * subsampling_convert_ycbcrbuf
TYPE	315:1	315:6	8	uint8 *
TYPE_NAME	315:1	315:1	9	uint8
LEAF_NODE	315:1	315:1	10	uint8
POINTER	315:6	315:6	9	*
LEAF_NODE	315:6	315:6	10	*
NAME	315:8	315:8	8	subsampling_convert_ycbcrbuf
LEAF_NODE	315:8	315:8	9	subsampling_convert_ycbcrbuf
LEAF_NODE	315:36	315:36	7	;
SIMPLE_DECL	316:1	316:32	6	uint8 * subsampling_convert_ybuf ;
VAR_DECL	316:1	316:8	7	uint8 * subsampling_convert_ybuf
TYPE	316:1	316:6	8	uint8 *
TYPE_NAME	316:1	316:1	9	uint8
LEAF_NODE	316:1	316:1	10	uint8
POINTER	316:6	316:6	9	*
LEAF_NODE	316:6	316:6	10	*
NAME	316:8	316:8	8	subsampling_convert_ybuf
LEAF_NODE	316:8	316:8	9	subsampling_convert_ybuf
LEAF_NODE	316:32	316:32	7	;
SIMPLE_DECL	317:1	317:33	6	uint8 * subsampling_convert_cbbuf ;
VAR_DECL	317:1	317:8	7	uint8 * subsampling_convert_cbbuf
TYPE	317:1	317:6	8	uint8 *
TYPE_NAME	317:1	317:1	9	uint8
LEAF_NODE	317:1	317:1	10	uint8
POINTER	317:6	317:6	9	*
LEAF_NODE	317:6	317:6	10	*
NAME	317:8	317:8	8	subsampling_convert_cbbuf
LEAF_NODE	317:8	317:8	9	subsampling_convert_cbbuf
LEAF_NODE	317:33	317:33	7	;
SIMPLE_DECL	318:1	318:33	6	uint8 * subsampling_convert_crbuf ;
VAR_DECL	318:1	318:8	7	uint8 * subsampling_convert_crbuf
TYPE	318:1	318:6	8	uint8 *
TYPE_NAME	318:1	318:1	9	uint8
LEAF_NODE	318:1	318:1	10	uint8
POINTER	318:6	318:6	9	*
LEAF_NODE	318:6	318:6	10	*
NAME	318:8	318:8	8	subsampling_convert_crbuf
LEAF_NODE	318:8	318:8	9	subsampling_convert_crbuf
LEAF_NODE	318:33	318:33	7	;
SIMPLE_DECL	319:1	319:41	6	uint32 subsampling_convert_ycbcrimagelen ;
VAR_DECL	319:1	319:8	7	uint32 subsampling_convert_ycbcrimagelen
TYPE	319:1	319:1	8	uint32
TYPE_NAME	319:1	319:1	9	uint32
LEAF_NODE	319:1	319:1	10	uint32
NAME	319:8	319:8	8	subsampling_convert_ycbcrimagelen
LEAF_NODE	319:8	319:8	9	subsampling_convert_ycbcrimagelen
LEAF_NODE	319:41	319:41	7	;
SIMPLE_DECL	320:1	320:39	6	uint8 * subsampling_convert_ycbcrimage ;
VAR_DECL	320:1	320:9	7	uint8 * subsampling_convert_ycbcrimage
TYPE	320:1	320:7	8	uint8 *
TYPE_NAME	320:1	320:1	9	uint8
LEAF_NODE	320:1	320:1	10	uint8
POINTER	320:7	320:7	9	*
LEAF_NODE	320:7	320:7	10	*
NAME	320:9	320:9	8	subsampling_convert_ycbcrimage
LEAF_NODE	320:9	320:9	9	subsampling_convert_ycbcrimage
LEAF_NODE	320:39	320:39	7	;
SIMPLE_DECL	321:1	321:39	6	uint32 subsampling_convert_clinelenout ;
VAR_DECL	321:1	321:8	7	uint32 subsampling_convert_clinelenout
TYPE	321:1	321:1	8	uint32
TYPE_NAME	321:1	321:1	9	uint32
LEAF_NODE	321:1	321:1	10	uint32
NAME	321:8	321:8	8	subsampling_convert_clinelenout
LEAF_NODE	321:8	321:8	9	subsampling_convert_clinelenout
LEAF_NODE	321:39	321:39	7	;
SIMPLE_DECL	322:1	322:33	6	uint32 subsampling_convert_state ;
VAR_DECL	322:1	322:8	7	uint32 subsampling_convert_state
TYPE	322:1	322:1	8	uint32
TYPE_NAME	322:1	322:1	9	uint32
LEAF_NODE	322:1	322:1	10	uint32
NAME	322:8	322:8	8	subsampling_convert_state
LEAF_NODE	322:8	322:8	9	subsampling_convert_state
LEAF_NODE	322:33	322:33	7	;
SIMPLE_DECL	323:1	323:22	6	uint32 bytes_per_line ;
VAR_DECL	323:1	323:8	7	uint32 bytes_per_line
TYPE	323:1	323:1	8	uint32
TYPE_NAME	323:1	323:1	9	uint32
LEAF_NODE	323:1	323:1	10	uint32
NAME	323:8	323:8	8	bytes_per_line
LEAF_NODE	323:8	323:8	9	bytes_per_line
LEAF_NODE	323:22	323:22	7	;
SIMPLE_DECL	324:1	324:24	6	uint32 lines_per_strile ;
VAR_DECL	324:1	324:8	7	uint32 lines_per_strile
TYPE	324:1	324:1	8	uint32
TYPE_NAME	324:1	324:1	9	uint32
LEAF_NODE	324:1	324:1	10	uint32
NAME	324:8	324:8	8	lines_per_strile
LEAF_NODE	324:8	324:8	9	lines_per_strile
LEAF_NODE	324:24	324:24	7	;
SIMPLE_DECL	325:1	325:42	6	OJPEGStateInBufferSource in_buffer_source ;
VAR_DECL	325:1	325:26	7	OJPEGStateInBufferSource in_buffer_source
TYPE	325:1	325:1	8	OJPEGStateInBufferSource
TYPE_NAME	325:1	325:1	9	OJPEGStateInBufferSource
LEAF_NODE	325:1	325:1	10	OJPEGStateInBufferSource
NAME	325:26	325:26	8	in_buffer_source
LEAF_NODE	325:26	325:26	9	in_buffer_source
LEAF_NODE	325:42	325:42	7	;
SIMPLE_DECL	326:1	326:29	6	uint32 in_buffer_next_strile ;
VAR_DECL	326:1	326:8	7	uint32 in_buffer_next_strile
TYPE	326:1	326:1	8	uint32
TYPE_NAME	326:1	326:1	9	uint32
LEAF_NODE	326:1	326:1	10	uint32
NAME	326:8	326:8	8	in_buffer_next_strile
LEAF_NODE	326:8	326:8	9	in_buffer_next_strile
LEAF_NODE	326:29	326:29	7	;
SIMPLE_DECL	327:1	327:30	6	uint32 in_buffer_strile_count ;
VAR_DECL	327:1	327:8	7	uint32 in_buffer_strile_count
TYPE	327:1	327:1	8	uint32
TYPE_NAME	327:1	327:1	9	uint32
LEAF_NODE	327:1	327:1	10	uint32
NAME	327:8	327:8	8	in_buffer_strile_count
LEAF_NODE	327:8	327:8	9	in_buffer_strile_count
LEAF_NODE	327:30	327:30	7	;
SIMPLE_DECL	328:1	328:26	6	uint64 in_buffer_file_pos ;
VAR_DECL	328:1	328:8	7	uint64 in_buffer_file_pos
TYPE	328:1	328:1	8	uint64
TYPE_NAME	328:1	328:1	9	uint64
LEAF_NODE	328:1	328:1	10	uint64
NAME	328:8	328:8	8	in_buffer_file_pos
LEAF_NODE	328:8	328:8	9	in_buffer_file_pos
LEAF_NODE	328:26	328:26	7	;
SIMPLE_DECL	329:1	329:29	6	uint8 in_buffer_file_pos_log ;
VAR_DECL	329:1	329:7	7	uint8 in_buffer_file_pos_log
TYPE	329:1	329:1	8	uint8
TYPE_NAME	329:1	329:1	9	uint8
LEAF_NODE	329:1	329:1	10	uint8
NAME	329:7	329:7	8	in_buffer_file_pos_log
LEAF_NODE	329:7	329:7	9	in_buffer_file_pos_log
LEAF_NODE	329:29	329:29	7	;
SIMPLE_DECL	330:1	330:27	6	uint64 in_buffer_file_togo ;
VAR_DECL	330:1	330:8	7	uint64 in_buffer_file_togo
TYPE	330:1	330:1	8	uint64
TYPE_NAME	330:1	330:1	9	uint64
LEAF_NODE	330:1	330:1	10	uint64
NAME	330:8	330:8	8	in_buffer_file_togo
LEAF_NODE	330:8	330:8	9	in_buffer_file_togo
LEAF_NODE	330:27	330:27	7	;
SIMPLE_DECL	331:1	331:22	6	uint16 in_buffer_togo ;
VAR_DECL	331:1	331:8	7	uint16 in_buffer_togo
TYPE	331:1	331:1	8	uint16
TYPE_NAME	331:1	331:1	9	uint16
LEAF_NODE	331:1	331:1	10	uint16
NAME	331:8	331:8	8	in_buffer_togo
LEAF_NODE	331:8	331:8	9	in_buffer_togo
LEAF_NODE	331:22	331:22	7	;
SIMPLE_DECL	332:1	332:21	6	uint8 * in_buffer_cur ;
VAR_DECL	332:1	332:8	7	uint8 * in_buffer_cur
TYPE	332:1	332:6	8	uint8 *
TYPE_NAME	332:1	332:1	9	uint8
LEAF_NODE	332:1	332:1	10	uint8
POINTER	332:6	332:6	9	*
LEAF_NODE	332:6	332:6	10	*
NAME	332:8	332:8	8	in_buffer_cur
LEAF_NODE	332:8	332:8	9	in_buffer_cur
LEAF_NODE	332:21	332:21	7	;
SIMPLE_DECL	333:1	333:30	6	uint8 [ OJPEG_BUFFER ] in_buffer ;
VAR_DECL	333:1	333:7	7	uint8 [ OJPEG_BUFFER ] in_buffer
TYPE	333:1	333:16	8	uint8 [ OJPEG_BUFFER ]
TYPE_NAME	333:1	333:1	9	uint8
LEAF_NODE	333:1	333:1	10	uint8
TYPE_SUFFIX	333:16	333:29	9	[ OJPEG_BUFFER ]
LEAF_NODE	333:16	333:16	10	[
FIELD	333:17	333:17	10	OJPEG_BUFFER
LEAF_NODE	333:17	333:17	11	OJPEG_BUFFER
LEAF_NODE	333:29	333:29	10	]
NAME	333:7	333:7	8	in_buffer
LEAF_NODE	333:7	333:7	9	in_buffer
LEAF_NODE	333:30	333:30	7	;
SIMPLE_DECL	334:1	334:29	6	OJPEGStateOutState out_state ;
VAR_DECL	334:1	334:20	7	OJPEGStateOutState out_state
TYPE	334:1	334:1	8	OJPEGStateOutState
TYPE_NAME	334:1	334:1	9	OJPEGStateOutState
LEAF_NODE	334:1	334:1	10	OJPEGStateOutState
NAME	334:20	334:20	8	out_state
LEAF_NODE	334:20	334:20	9	out_state
LEAF_NODE	334:29	334:29	7	;
SIMPLE_DECL	335:1	335:31	6	uint8 [ OJPEG_BUFFER ] out_buffer ;
VAR_DECL	335:1	335:7	7	uint8 [ OJPEG_BUFFER ] out_buffer
TYPE	335:1	335:17	8	uint8 [ OJPEG_BUFFER ]
TYPE_NAME	335:1	335:1	9	uint8
LEAF_NODE	335:1	335:1	10	uint8
TYPE_SUFFIX	335:17	335:30	9	[ OJPEG_BUFFER ]
LEAF_NODE	335:17	335:17	10	[
FIELD	335:18	335:18	10	OJPEG_BUFFER
LEAF_NODE	335:18	335:18	11	OJPEG_BUFFER
LEAF_NODE	335:30	335:30	10	]
NAME	335:7	335:7	8	out_buffer
LEAF_NODE	335:7	335:7	9	out_buffer
LEAF_NODE	335:31	335:31	7	;
SIMPLE_DECL	336:1	336:19	6	uint8 * skip_buffer ;
VAR_DECL	336:1	336:8	7	uint8 * skip_buffer
TYPE	336:1	336:6	8	uint8 *
TYPE_NAME	336:1	336:1	9	uint8
LEAF_NODE	336:1	336:1	10	uint8
POINTER	336:6	336:6	9	*
LEAF_NODE	336:6	336:6	10	*
NAME	336:8	336:8	8	skip_buffer
LEAF_NODE	336:8	336:8	9	skip_buffer
LEAF_NODE	336:19	336:19	7	;
LEAF_NODE	337:0	337:0	5	}
NAME	337:2	337:2	3	OJPEGState
LEAF_NODE	337:2	337:2	4	OJPEGState
LEAF_NODE	337:12	337:12	2	;
SIMPLE_DECL	343:7	343:36	1	int OJPEGFixupTags ; OJPEGFixupTags OJPEGFixupTags ( TIFF * tif ) ;
VAR_DECL	343:7	343:11	2	int OJPEGFixupTags ; OJPEGFixupTags OJPEGFixupTags ( TIFF * tif )
TYPE	343:7	343:7	3	int
TYPE_NAME	343:7	343:7	4	int
LEAF_NODE	343:7	343:7	5	int
NAME	343:11	343:11	3	OJPEGFixupTags
LEAF_NODE	343:11	343:11	4	OJPEGFixupTags
LEAF_NODE	0:0	0:0	3	;
INIT	343:11	343:11	3	OJPEGFixupTags OJPEGFixupTags ( TIFF * tif )
ASSIGN	343:11	343:25	4	OJPEGFixupTags OJPEGFixupTags ( TIFF * tif )
LVAL	343:11	343:11	5	OJPEGFixupTags
NAME	343:11	343:11	6	OJPEGFixupTags
LEAF_NODE	343:11	343:11	7	OJPEGFixupTags
ASSIGN_OP	343:11	343:11	5	OJPEGFixupTags
NAME	343:11	343:11	6	OJPEGFixupTags
LEAF_NODE	343:11	343:11	7	OJPEGFixupTags
RVAL	343:25	343:35	5	( TIFF * tif )
LEAF_NODE	343:25	343:25	6	(
EXPR	343:26	343:32	6	TIFF * tif
FIELD	343:26	343:26	7	TIFF
LEAF_NODE	343:26	343:26	8	TIFF
LEAF_NODE	343:30	343:30	7	*
FIELD	343:32	343:32	7	tif
LEAF_NODE	343:32	343:32	8	tif
LEAF_NODE	343:35	343:35	6	)
LEAF_NODE	343:36	343:36	2	;
SIMPLE_DECL	344:7	344:38	1	int OJPEGSetupDecode ; OJPEGSetupDecode OJPEGSetupDecode ( TIFF * tif ) ;
VAR_DECL	344:7	344:11	2	int OJPEGSetupDecode ; OJPEGSetupDecode OJPEGSetupDecode ( TIFF * tif )
TYPE	344:7	344:7	3	int
TYPE_NAME	344:7	344:7	4	int
LEAF_NODE	344:7	344:7	5	int
NAME	344:11	344:11	3	OJPEGSetupDecode
LEAF_NODE	344:11	344:11	4	OJPEGSetupDecode
LEAF_NODE	0:0	0:0	3	;
INIT	344:11	344:11	3	OJPEGSetupDecode OJPEGSetupDecode ( TIFF * tif )
ASSIGN	344:11	344:27	4	OJPEGSetupDecode OJPEGSetupDecode ( TIFF * tif )
LVAL	344:11	344:11	5	OJPEGSetupDecode
NAME	344:11	344:11	6	OJPEGSetupDecode
LEAF_NODE	344:11	344:11	7	OJPEGSetupDecode
ASSIGN_OP	344:11	344:11	5	OJPEGSetupDecode
NAME	344:11	344:11	6	OJPEGSetupDecode
LEAF_NODE	344:11	344:11	7	OJPEGSetupDecode
RVAL	344:27	344:37	5	( TIFF * tif )
LEAF_NODE	344:27	344:27	6	(
EXPR	344:28	344:34	6	TIFF * tif
FIELD	344:28	344:28	7	TIFF
LEAF_NODE	344:28	344:28	8	TIFF
LEAF_NODE	344:32	344:32	7	*
FIELD	344:34	344:34	7	tif
LEAF_NODE	344:34	344:34	8	tif
LEAF_NODE	344:37	344:37	6	)
LEAF_NODE	344:38	344:38	2	;
SIMPLE_DECL	346:7	346:43	1	int OJPEGPreDecodeSkipRaw ; OJPEGPreDecodeSkipRaw OJPEGPreDecodeSkipRaw ( TIFF * tif ) ;
VAR_DECL	346:7	346:11	2	int OJPEGPreDecodeSkipRaw ; OJPEGPreDecodeSkipRaw OJPEGPreDecodeSkipRaw ( TIFF * tif )
TYPE	346:7	346:7	3	int
TYPE_NAME	346:7	346:7	4	int
LEAF_NODE	346:7	346:7	5	int
NAME	346:11	346:11	3	OJPEGPreDecodeSkipRaw
LEAF_NODE	346:11	346:11	4	OJPEGPreDecodeSkipRaw
LEAF_NODE	0:0	0:0	3	;
INIT	346:11	346:11	3	OJPEGPreDecodeSkipRaw OJPEGPreDecodeSkipRaw ( TIFF * tif )
ASSIGN	346:11	346:32	4	OJPEGPreDecodeSkipRaw OJPEGPreDecodeSkipRaw ( TIFF * tif )
LVAL	346:11	346:11	5	OJPEGPreDecodeSkipRaw
NAME	346:11	346:11	6	OJPEGPreDecodeSkipRaw
LEAF_NODE	346:11	346:11	7	OJPEGPreDecodeSkipRaw
ASSIGN_OP	346:11	346:11	5	OJPEGPreDecodeSkipRaw
NAME	346:11	346:11	6	OJPEGPreDecodeSkipRaw
LEAF_NODE	346:11	346:11	7	OJPEGPreDecodeSkipRaw
RVAL	346:32	346:42	5	( TIFF * tif )
LEAF_NODE	346:32	346:32	6	(
EXPR	346:33	346:39	6	TIFF * tif
FIELD	346:33	346:33	7	TIFF
LEAF_NODE	346:33	346:33	8	TIFF
LEAF_NODE	346:37	346:37	7	*
FIELD	346:39	346:39	7	tif
LEAF_NODE	346:39	346:39	8	tif
LEAF_NODE	346:42	346:42	6	)
LEAF_NODE	346:43	346:43	2	;
SIMPLE_DECL	347:7	347:49	1	int OJPEGPreDecodeSkipScanlines ; OJPEGPreDecodeSkipScanlines OJPEGPreDecodeSkipScanlines ( TIFF * tif ) ;
VAR_DECL	347:7	347:11	2	int OJPEGPreDecodeSkipScanlines ; OJPEGPreDecodeSkipScanlines OJPEGPreDecodeSkipScanlines ( TIFF * tif )
TYPE	347:7	347:7	3	int
TYPE_NAME	347:7	347:7	4	int
LEAF_NODE	347:7	347:7	5	int
NAME	347:11	347:11	3	OJPEGPreDecodeSkipScanlines
LEAF_NODE	347:11	347:11	4	OJPEGPreDecodeSkipScanlines
LEAF_NODE	0:0	0:0	3	;
INIT	347:11	347:11	3	OJPEGPreDecodeSkipScanlines OJPEGPreDecodeSkipScanlines ( TIFF * tif )
ASSIGN	347:11	347:38	4	OJPEGPreDecodeSkipScanlines OJPEGPreDecodeSkipScanlines ( TIFF * tif )
LVAL	347:11	347:11	5	OJPEGPreDecodeSkipScanlines
NAME	347:11	347:11	6	OJPEGPreDecodeSkipScanlines
LEAF_NODE	347:11	347:11	7	OJPEGPreDecodeSkipScanlines
ASSIGN_OP	347:11	347:11	5	OJPEGPreDecodeSkipScanlines
NAME	347:11	347:11	6	OJPEGPreDecodeSkipScanlines
LEAF_NODE	347:11	347:11	7	OJPEGPreDecodeSkipScanlines
RVAL	347:38	347:48	5	( TIFF * tif )
LEAF_NODE	347:38	347:38	6	(
EXPR	347:39	347:45	6	TIFF * tif
FIELD	347:39	347:39	7	TIFF
LEAF_NODE	347:39	347:39	8	TIFF
LEAF_NODE	347:43	347:43	7	*
FIELD	347:45	347:45	7	tif
LEAF_NODE	347:45	347:45	8	tif
LEAF_NODE	347:48	347:48	6	)
LEAF_NODE	347:49	347:49	2	;
SIMPLE_DECL	352:7	352:38	1	int OJPEGSetupEncode ; OJPEGSetupEncode OJPEGSetupEncode ( TIFF * tif ) ;
VAR_DECL	352:7	352:11	2	int OJPEGSetupEncode ; OJPEGSetupEncode OJPEGSetupEncode ( TIFF * tif )
TYPE	352:7	352:7	3	int
TYPE_NAME	352:7	352:7	4	int
LEAF_NODE	352:7	352:7	5	int
NAME	352:11	352:11	3	OJPEGSetupEncode
LEAF_NODE	352:11	352:11	4	OJPEGSetupEncode
LEAF_NODE	0:0	0:0	3	;
INIT	352:11	352:11	3	OJPEGSetupEncode OJPEGSetupEncode ( TIFF * tif )
ASSIGN	352:11	352:27	4	OJPEGSetupEncode OJPEGSetupEncode ( TIFF * tif )
LVAL	352:11	352:11	5	OJPEGSetupEncode
NAME	352:11	352:11	6	OJPEGSetupEncode
LEAF_NODE	352:11	352:11	7	OJPEGSetupEncode
ASSIGN_OP	352:11	352:11	5	OJPEGSetupEncode
NAME	352:11	352:11	6	OJPEGSetupEncode
LEAF_NODE	352:11	352:11	7	OJPEGSetupEncode
RVAL	352:27	352:37	5	( TIFF * tif )
LEAF_NODE	352:27	352:27	6	(
EXPR	352:28	352:34	6	TIFF * tif
FIELD	352:28	352:28	7	TIFF
LEAF_NODE	352:28	352:28	8	TIFF
LEAF_NODE	352:32	352:32	7	*
FIELD	352:34	352:34	7	tif
LEAF_NODE	352:34	352:34	8	tif
LEAF_NODE	352:37	352:37	6	)
LEAF_NODE	352:38	352:38	2	;
SIMPLE_DECL	355:7	355:37	1	int OJPEGPostEncode ; OJPEGPostEncode OJPEGPostEncode ( TIFF * tif ) ;
VAR_DECL	355:7	355:11	2	int OJPEGPostEncode ; OJPEGPostEncode OJPEGPostEncode ( TIFF * tif )
TYPE	355:7	355:7	3	int
TYPE_NAME	355:7	355:7	4	int
LEAF_NODE	355:7	355:7	5	int
NAME	355:11	355:11	3	OJPEGPostEncode
LEAF_NODE	355:11	355:11	4	OJPEGPostEncode
LEAF_NODE	0:0	0:0	3	;
INIT	355:11	355:11	3	OJPEGPostEncode OJPEGPostEncode ( TIFF * tif )
ASSIGN	355:11	355:26	4	OJPEGPostEncode OJPEGPostEncode ( TIFF * tif )
LVAL	355:11	355:11	5	OJPEGPostEncode
NAME	355:11	355:11	6	OJPEGPostEncode
LEAF_NODE	355:11	355:11	7	OJPEGPostEncode
ASSIGN_OP	355:11	355:11	5	OJPEGPostEncode
NAME	355:11	355:11	6	OJPEGPostEncode
LEAF_NODE	355:11	355:11	7	OJPEGPostEncode
RVAL	355:26	355:36	5	( TIFF * tif )
LEAF_NODE	355:26	355:26	6	(
EXPR	355:27	355:33	6	TIFF * tif
FIELD	355:27	355:27	7	TIFF
LEAF_NODE	355:27	355:27	8	TIFF
LEAF_NODE	355:31	355:31	7	*
FIELD	355:33	355:33	7	tif
LEAF_NODE	355:33	355:33	8	tif
LEAF_NODE	355:36	355:36	6	)
LEAF_NODE	355:37	355:37	2	;
SIMPLE_DECL	356:7	356:35	1	void OJPEGCleanup ; OJPEGCleanup OJPEGCleanup ( TIFF * tif ) ;
VAR_DECL	356:7	356:12	2	void OJPEGCleanup ; OJPEGCleanup OJPEGCleanup ( TIFF * tif )
TYPE	356:7	356:7	3	void
TYPE_NAME	356:7	356:7	4	void
LEAF_NODE	356:7	356:7	5	void
NAME	356:12	356:12	3	OJPEGCleanup
LEAF_NODE	356:12	356:12	4	OJPEGCleanup
LEAF_NODE	0:0	0:0	3	;
INIT	356:12	356:12	3	OJPEGCleanup OJPEGCleanup ( TIFF * tif )
ASSIGN	356:12	356:24	4	OJPEGCleanup OJPEGCleanup ( TIFF * tif )
LVAL	356:12	356:12	5	OJPEGCleanup
NAME	356:12	356:12	6	OJPEGCleanup
LEAF_NODE	356:12	356:12	7	OJPEGCleanup
ASSIGN_OP	356:12	356:12	5	OJPEGCleanup
NAME	356:12	356:12	6	OJPEGCleanup
LEAF_NODE	356:12	356:12	7	OJPEGCleanup
RVAL	356:24	356:34	5	( TIFF * tif )
LEAF_NODE	356:24	356:24	6	(
EXPR	356:25	356:31	6	TIFF * tif
FIELD	356:25	356:25	7	TIFF
LEAF_NODE	356:25	356:25	8	TIFF
LEAF_NODE	356:29	356:29	7	*
FIELD	356:31	356:31	7	tif
LEAF_NODE	356:31	356:31	8	tif
LEAF_NODE	356:34	356:34	6	)
LEAF_NODE	356:35	356:35	2	;
SIMPLE_DECL	358:7	358:46	1	void OJPEGSubsamplingCorrect ; OJPEGSubsamplingCorrect OJPEGSubsamplingCorrect ( TIFF * tif ) ;
VAR_DECL	358:7	358:12	2	void OJPEGSubsamplingCorrect ; OJPEGSubsamplingCorrect OJPEGSubsamplingCorrect ( TIFF * tif )
TYPE	358:7	358:7	3	void
TYPE_NAME	358:7	358:7	4	void
LEAF_NODE	358:7	358:7	5	void
NAME	358:12	358:12	3	OJPEGSubsamplingCorrect
LEAF_NODE	358:12	358:12	4	OJPEGSubsamplingCorrect
LEAF_NODE	0:0	0:0	3	;
INIT	358:12	358:12	3	OJPEGSubsamplingCorrect OJPEGSubsamplingCorrect ( TIFF * tif )
ASSIGN	358:12	358:35	4	OJPEGSubsamplingCorrect OJPEGSubsamplingCorrect ( TIFF * tif )
LVAL	358:12	358:12	5	OJPEGSubsamplingCorrect
NAME	358:12	358:12	6	OJPEGSubsamplingCorrect
LEAF_NODE	358:12	358:12	7	OJPEGSubsamplingCorrect
ASSIGN_OP	358:12	358:12	5	OJPEGSubsamplingCorrect
NAME	358:12	358:12	6	OJPEGSubsamplingCorrect
LEAF_NODE	358:12	358:12	7	OJPEGSubsamplingCorrect
RVAL	358:35	358:45	5	( TIFF * tif )
LEAF_NODE	358:35	358:35	6	(
EXPR	358:36	358:42	6	TIFF * tif
FIELD	358:36	358:36	7	TIFF
LEAF_NODE	358:36	358:36	8	TIFF
LEAF_NODE	358:40	358:40	7	*
FIELD	358:42	358:42	7	tif
LEAF_NODE	358:42	358:42	8	tif
LEAF_NODE	358:45	358:45	6	)
LEAF_NODE	358:46	358:46	2	;
SIMPLE_DECL	359:7	359:41	1	int OJPEGReadHeaderInfo ; OJPEGReadHeaderInfo OJPEGReadHeaderInfo ( TIFF * tif ) ;
VAR_DECL	359:7	359:11	2	int OJPEGReadHeaderInfo ; OJPEGReadHeaderInfo OJPEGReadHeaderInfo ( TIFF * tif )
TYPE	359:7	359:7	3	int
TYPE_NAME	359:7	359:7	4	int
LEAF_NODE	359:7	359:7	5	int
NAME	359:11	359:11	3	OJPEGReadHeaderInfo
LEAF_NODE	359:11	359:11	4	OJPEGReadHeaderInfo
LEAF_NODE	0:0	0:0	3	;
INIT	359:11	359:11	3	OJPEGReadHeaderInfo OJPEGReadHeaderInfo ( TIFF * tif )
ASSIGN	359:11	359:30	4	OJPEGReadHeaderInfo OJPEGReadHeaderInfo ( TIFF * tif )
LVAL	359:11	359:11	5	OJPEGReadHeaderInfo
NAME	359:11	359:11	6	OJPEGReadHeaderInfo
LEAF_NODE	359:11	359:11	7	OJPEGReadHeaderInfo
ASSIGN_OP	359:11	359:11	5	OJPEGReadHeaderInfo
NAME	359:11	359:11	6	OJPEGReadHeaderInfo
LEAF_NODE	359:11	359:11	7	OJPEGReadHeaderInfo
RVAL	359:30	359:40	5	( TIFF * tif )
LEAF_NODE	359:30	359:30	6	(
EXPR	359:31	359:37	6	TIFF * tif
FIELD	359:31	359:31	7	TIFF
LEAF_NODE	359:31	359:31	8	TIFF
LEAF_NODE	359:35	359:35	7	*
FIELD	359:37	359:37	7	tif
LEAF_NODE	359:37	359:37	8	tif
LEAF_NODE	359:40	359:40	6	)
LEAF_NODE	359:41	359:41	2	;
SIMPLE_DECL	361:7	361:42	1	int OJPEGWriteHeaderInfo ; OJPEGWriteHeaderInfo OJPEGWriteHeaderInfo ( TIFF * tif ) ;
VAR_DECL	361:7	361:11	2	int OJPEGWriteHeaderInfo ; OJPEGWriteHeaderInfo OJPEGWriteHeaderInfo ( TIFF * tif )
TYPE	361:7	361:7	3	int
TYPE_NAME	361:7	361:7	4	int
LEAF_NODE	361:7	361:7	5	int
NAME	361:11	361:11	3	OJPEGWriteHeaderInfo
LEAF_NODE	361:11	361:11	4	OJPEGWriteHeaderInfo
LEAF_NODE	0:0	0:0	3	;
INIT	361:11	361:11	3	OJPEGWriteHeaderInfo OJPEGWriteHeaderInfo ( TIFF * tif )
ASSIGN	361:11	361:31	4	OJPEGWriteHeaderInfo OJPEGWriteHeaderInfo ( TIFF * tif )
LVAL	361:11	361:11	5	OJPEGWriteHeaderInfo
NAME	361:11	361:11	6	OJPEGWriteHeaderInfo
LEAF_NODE	361:11	361:11	7	OJPEGWriteHeaderInfo
ASSIGN_OP	361:11	361:11	5	OJPEGWriteHeaderInfo
NAME	361:11	361:11	6	OJPEGWriteHeaderInfo
LEAF_NODE	361:11	361:11	7	OJPEGWriteHeaderInfo
RVAL	361:31	361:41	5	( TIFF * tif )
LEAF_NODE	361:31	361:31	6	(
EXPR	361:32	361:38	6	TIFF * tif
FIELD	361:32	361:32	7	TIFF
LEAF_NODE	361:32	361:32	8	TIFF
LEAF_NODE	361:36	361:36	7	*
FIELD	361:38	361:38	7	tif
LEAF_NODE	361:38	361:38	8	tif
LEAF_NODE	361:41	361:41	6	)
LEAF_NODE	361:42	361:42	2	;
SIMPLE_DECL	362:7	362:47	1	void OJPEGLibjpegSessionAbort ; OJPEGLibjpegSessionAbort OJPEGLibjpegSessionAbort ( TIFF * tif ) ;
VAR_DECL	362:7	362:12	2	void OJPEGLibjpegSessionAbort ; OJPEGLibjpegSessionAbort OJPEGLibjpegSessionAbort ( TIFF * tif )
TYPE	362:7	362:7	3	void
TYPE_NAME	362:7	362:7	4	void
LEAF_NODE	362:7	362:7	5	void
NAME	362:12	362:12	3	OJPEGLibjpegSessionAbort
LEAF_NODE	362:12	362:12	4	OJPEGLibjpegSessionAbort
LEAF_NODE	0:0	0:0	3	;
INIT	362:12	362:12	3	OJPEGLibjpegSessionAbort OJPEGLibjpegSessionAbort ( TIFF * tif )
ASSIGN	362:12	362:36	4	OJPEGLibjpegSessionAbort OJPEGLibjpegSessionAbort ( TIFF * tif )
LVAL	362:12	362:12	5	OJPEGLibjpegSessionAbort
NAME	362:12	362:12	6	OJPEGLibjpegSessionAbort
LEAF_NODE	362:12	362:12	7	OJPEGLibjpegSessionAbort
ASSIGN_OP	362:12	362:12	5	OJPEGLibjpegSessionAbort
NAME	362:12	362:12	6	OJPEGLibjpegSessionAbort
LEAF_NODE	362:12	362:12	7	OJPEGLibjpegSessionAbort
RVAL	362:36	362:46	5	( TIFF * tif )
LEAF_NODE	362:36	362:36	6	(
EXPR	362:37	362:43	6	TIFF * tif
FIELD	362:37	362:37	7	TIFF
LEAF_NODE	362:37	362:37	8	TIFF
LEAF_NODE	362:41	362:41	7	*
FIELD	362:43	362:43	7	tif
LEAF_NODE	362:43	362:43	8	tif
LEAF_NODE	362:46	362:46	6	)
LEAF_NODE	362:47	362:47	2	;
SIMPLE_DECL	364:7	364:44	1	int OJPEGReadHeaderInfoSec ; OJPEGReadHeaderInfoSec OJPEGReadHeaderInfoSec ( TIFF * tif ) ;
VAR_DECL	364:7	364:11	2	int OJPEGReadHeaderInfoSec ; OJPEGReadHeaderInfoSec OJPEGReadHeaderInfoSec ( TIFF * tif )
TYPE	364:7	364:7	3	int
TYPE_NAME	364:7	364:7	4	int
LEAF_NODE	364:7	364:7	5	int
NAME	364:11	364:11	3	OJPEGReadHeaderInfoSec
LEAF_NODE	364:11	364:11	4	OJPEGReadHeaderInfoSec
LEAF_NODE	0:0	0:0	3	;
INIT	364:11	364:11	3	OJPEGReadHeaderInfoSec OJPEGReadHeaderInfoSec ( TIFF * tif )
ASSIGN	364:11	364:33	4	OJPEGReadHeaderInfoSec OJPEGReadHeaderInfoSec ( TIFF * tif )
LVAL	364:11	364:11	5	OJPEGReadHeaderInfoSec
NAME	364:11	364:11	6	OJPEGReadHeaderInfoSec
LEAF_NODE	364:11	364:11	7	OJPEGReadHeaderInfoSec
ASSIGN_OP	364:11	364:11	5	OJPEGReadHeaderInfoSec
NAME	364:11	364:11	6	OJPEGReadHeaderInfoSec
LEAF_NODE	364:11	364:11	7	OJPEGReadHeaderInfoSec
RVAL	364:33	364:43	5	( TIFF * tif )
LEAF_NODE	364:33	364:33	6	(
EXPR	364:34	364:40	6	TIFF * tif
FIELD	364:34	364:34	7	TIFF
LEAF_NODE	364:34	364:34	8	TIFF
LEAF_NODE	364:38	364:38	7	*
FIELD	364:40	364:40	7	tif
LEAF_NODE	364:40	364:40	8	tif
LEAF_NODE	364:43	364:43	6	)
LEAF_NODE	364:44	364:44	2	;
SIMPLE_DECL	365:7	365:53	1	int OJPEGReadHeaderInfoSecStreamDri ; OJPEGReadHeaderInfoSecStreamDri OJPEGReadHeaderInfoSecStreamDri ( TIFF * tif ) ;
VAR_DECL	365:7	365:11	2	int OJPEGReadHeaderInfoSecStreamDri ; OJPEGReadHeaderInfoSecStreamDri OJPEGReadHeaderInfoSecStreamDri ( TIFF * tif )
TYPE	365:7	365:7	3	int
TYPE_NAME	365:7	365:7	4	int
LEAF_NODE	365:7	365:7	5	int
NAME	365:11	365:11	3	OJPEGReadHeaderInfoSecStreamDri
LEAF_NODE	365:11	365:11	4	OJPEGReadHeaderInfoSecStreamDri
LEAF_NODE	0:0	0:0	3	;
INIT	365:11	365:11	3	OJPEGReadHeaderInfoSecStreamDri OJPEGReadHeaderInfoSecStreamDri ( TIFF * tif )
ASSIGN	365:11	365:42	4	OJPEGReadHeaderInfoSecStreamDri OJPEGReadHeaderInfoSecStreamDri ( TIFF * tif )
LVAL	365:11	365:11	5	OJPEGReadHeaderInfoSecStreamDri
NAME	365:11	365:11	6	OJPEGReadHeaderInfoSecStreamDri
LEAF_NODE	365:11	365:11	7	OJPEGReadHeaderInfoSecStreamDri
ASSIGN_OP	365:11	365:11	5	OJPEGReadHeaderInfoSecStreamDri
NAME	365:11	365:11	6	OJPEGReadHeaderInfoSecStreamDri
LEAF_NODE	365:11	365:11	7	OJPEGReadHeaderInfoSecStreamDri
RVAL	365:42	365:52	5	( TIFF * tif )
LEAF_NODE	365:42	365:42	6	(
EXPR	365:43	365:49	6	TIFF * tif
FIELD	365:43	365:43	7	TIFF
LEAF_NODE	365:43	365:43	8	TIFF
LEAF_NODE	365:47	365:47	7	*
FIELD	365:49	365:49	7	tif
LEAF_NODE	365:49	365:49	8	tif
LEAF_NODE	365:52	365:52	6	)
LEAF_NODE	365:53	365:53	2	;
SIMPLE_DECL	366:7	366:53	1	int OJPEGReadHeaderInfoSecStreamDqt ; OJPEGReadHeaderInfoSecStreamDqt OJPEGReadHeaderInfoSecStreamDqt ( TIFF * tif ) ;
VAR_DECL	366:7	366:11	2	int OJPEGReadHeaderInfoSecStreamDqt ; OJPEGReadHeaderInfoSecStreamDqt OJPEGReadHeaderInfoSecStreamDqt ( TIFF * tif )
TYPE	366:7	366:7	3	int
TYPE_NAME	366:7	366:7	4	int
LEAF_NODE	366:7	366:7	5	int
NAME	366:11	366:11	3	OJPEGReadHeaderInfoSecStreamDqt
LEAF_NODE	366:11	366:11	4	OJPEGReadHeaderInfoSecStreamDqt
LEAF_NODE	0:0	0:0	3	;
INIT	366:11	366:11	3	OJPEGReadHeaderInfoSecStreamDqt OJPEGReadHeaderInfoSecStreamDqt ( TIFF * tif )
ASSIGN	366:11	366:42	4	OJPEGReadHeaderInfoSecStreamDqt OJPEGReadHeaderInfoSecStreamDqt ( TIFF * tif )
LVAL	366:11	366:11	5	OJPEGReadHeaderInfoSecStreamDqt
NAME	366:11	366:11	6	OJPEGReadHeaderInfoSecStreamDqt
LEAF_NODE	366:11	366:11	7	OJPEGReadHeaderInfoSecStreamDqt
ASSIGN_OP	366:11	366:11	5	OJPEGReadHeaderInfoSecStreamDqt
NAME	366:11	366:11	6	OJPEGReadHeaderInfoSecStreamDqt
LEAF_NODE	366:11	366:11	7	OJPEGReadHeaderInfoSecStreamDqt
RVAL	366:42	366:52	5	( TIFF * tif )
LEAF_NODE	366:42	366:42	6	(
EXPR	366:43	366:49	6	TIFF * tif
FIELD	366:43	366:43	7	TIFF
LEAF_NODE	366:43	366:43	8	TIFF
LEAF_NODE	366:47	366:47	7	*
FIELD	366:49	366:49	7	tif
LEAF_NODE	366:49	366:49	8	tif
LEAF_NODE	366:52	366:52	6	)
LEAF_NODE	366:53	366:53	2	;
SIMPLE_DECL	367:7	367:53	1	int OJPEGReadHeaderInfoSecStreamDht ; OJPEGReadHeaderInfoSecStreamDht OJPEGReadHeaderInfoSecStreamDht ( TIFF * tif ) ;
VAR_DECL	367:7	367:11	2	int OJPEGReadHeaderInfoSecStreamDht ; OJPEGReadHeaderInfoSecStreamDht OJPEGReadHeaderInfoSecStreamDht ( TIFF * tif )
TYPE	367:7	367:7	3	int
TYPE_NAME	367:7	367:7	4	int
LEAF_NODE	367:7	367:7	5	int
NAME	367:11	367:11	3	OJPEGReadHeaderInfoSecStreamDht
LEAF_NODE	367:11	367:11	4	OJPEGReadHeaderInfoSecStreamDht
LEAF_NODE	0:0	0:0	3	;
INIT	367:11	367:11	3	OJPEGReadHeaderInfoSecStreamDht OJPEGReadHeaderInfoSecStreamDht ( TIFF * tif )
ASSIGN	367:11	367:42	4	OJPEGReadHeaderInfoSecStreamDht OJPEGReadHeaderInfoSecStreamDht ( TIFF * tif )
LVAL	367:11	367:11	5	OJPEGReadHeaderInfoSecStreamDht
NAME	367:11	367:11	6	OJPEGReadHeaderInfoSecStreamDht
LEAF_NODE	367:11	367:11	7	OJPEGReadHeaderInfoSecStreamDht
ASSIGN_OP	367:11	367:11	5	OJPEGReadHeaderInfoSecStreamDht
NAME	367:11	367:11	6	OJPEGReadHeaderInfoSecStreamDht
LEAF_NODE	367:11	367:11	7	OJPEGReadHeaderInfoSecStreamDht
RVAL	367:42	367:52	5	( TIFF * tif )
LEAF_NODE	367:42	367:42	6	(
EXPR	367:43	367:49	6	TIFF * tif
FIELD	367:43	367:43	7	TIFF
LEAF_NODE	367:43	367:43	8	TIFF
LEAF_NODE	367:47	367:47	7	*
FIELD	367:49	367:49	7	tif
LEAF_NODE	367:49	367:49	8	tif
LEAF_NODE	367:52	367:52	6	)
LEAF_NODE	367:53	367:53	2	;
SIMPLE_DECL	369:7	369:53	1	int OJPEGReadHeaderInfoSecStreamSos ; OJPEGReadHeaderInfoSecStreamSos OJPEGReadHeaderInfoSecStreamSos ( TIFF * tif ) ;
VAR_DECL	369:7	369:11	2	int OJPEGReadHeaderInfoSecStreamSos ; OJPEGReadHeaderInfoSecStreamSos OJPEGReadHeaderInfoSecStreamSos ( TIFF * tif )
TYPE	369:7	369:7	3	int
TYPE_NAME	369:7	369:7	4	int
LEAF_NODE	369:7	369:7	5	int
NAME	369:11	369:11	3	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	369:11	369:11	4	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	0:0	0:0	3	;
INIT	369:11	369:11	3	OJPEGReadHeaderInfoSecStreamSos OJPEGReadHeaderInfoSecStreamSos ( TIFF * tif )
ASSIGN	369:11	369:42	4	OJPEGReadHeaderInfoSecStreamSos OJPEGReadHeaderInfoSecStreamSos ( TIFF * tif )
LVAL	369:11	369:11	5	OJPEGReadHeaderInfoSecStreamSos
NAME	369:11	369:11	6	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	369:11	369:11	7	OJPEGReadHeaderInfoSecStreamSos
ASSIGN_OP	369:11	369:11	5	OJPEGReadHeaderInfoSecStreamSos
NAME	369:11	369:11	6	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	369:11	369:11	7	OJPEGReadHeaderInfoSecStreamSos
RVAL	369:42	369:52	5	( TIFF * tif )
LEAF_NODE	369:42	369:42	6	(
EXPR	369:43	369:49	6	TIFF * tif
FIELD	369:43	369:43	7	TIFF
LEAF_NODE	369:43	369:43	8	TIFF
LEAF_NODE	369:47	369:47	7	*
FIELD	369:49	369:49	7	tif
LEAF_NODE	369:49	369:49	8	tif
LEAF_NODE	369:52	369:52	6	)
LEAF_NODE	369:53	369:53	2	;
SIMPLE_DECL	370:7	370:56	1	int OJPEGReadHeaderInfoSecTablesQTable ; OJPEGReadHeaderInfoSecTablesQTable OJPEGReadHeaderInfoSecTablesQTable ( TIFF * tif ) ;
VAR_DECL	370:7	370:11	2	int OJPEGReadHeaderInfoSecTablesQTable ; OJPEGReadHeaderInfoSecTablesQTable OJPEGReadHeaderInfoSecTablesQTable ( TIFF * tif )
TYPE	370:7	370:7	3	int
TYPE_NAME	370:7	370:7	4	int
LEAF_NODE	370:7	370:7	5	int
NAME	370:11	370:11	3	OJPEGReadHeaderInfoSecTablesQTable
LEAF_NODE	370:11	370:11	4	OJPEGReadHeaderInfoSecTablesQTable
LEAF_NODE	0:0	0:0	3	;
INIT	370:11	370:11	3	OJPEGReadHeaderInfoSecTablesQTable OJPEGReadHeaderInfoSecTablesQTable ( TIFF * tif )
ASSIGN	370:11	370:45	4	OJPEGReadHeaderInfoSecTablesQTable OJPEGReadHeaderInfoSecTablesQTable ( TIFF * tif )
LVAL	370:11	370:11	5	OJPEGReadHeaderInfoSecTablesQTable
NAME	370:11	370:11	6	OJPEGReadHeaderInfoSecTablesQTable
LEAF_NODE	370:11	370:11	7	OJPEGReadHeaderInfoSecTablesQTable
ASSIGN_OP	370:11	370:11	5	OJPEGReadHeaderInfoSecTablesQTable
NAME	370:11	370:11	6	OJPEGReadHeaderInfoSecTablesQTable
LEAF_NODE	370:11	370:11	7	OJPEGReadHeaderInfoSecTablesQTable
RVAL	370:45	370:55	5	( TIFF * tif )
LEAF_NODE	370:45	370:45	6	(
EXPR	370:46	370:52	6	TIFF * tif
FIELD	370:46	370:46	7	TIFF
LEAF_NODE	370:46	370:46	8	TIFF
LEAF_NODE	370:50	370:50	7	*
FIELD	370:52	370:52	7	tif
LEAF_NODE	370:52	370:52	8	tif
LEAF_NODE	370:55	370:55	6	)
LEAF_NODE	370:56	370:56	2	;
SIMPLE_DECL	371:7	371:57	1	int OJPEGReadHeaderInfoSecTablesDcTable ; OJPEGReadHeaderInfoSecTablesDcTable OJPEGReadHeaderInfoSecTablesDcTable ( TIFF * tif ) ;
VAR_DECL	371:7	371:11	2	int OJPEGReadHeaderInfoSecTablesDcTable ; OJPEGReadHeaderInfoSecTablesDcTable OJPEGReadHeaderInfoSecTablesDcTable ( TIFF * tif )
TYPE	371:7	371:7	3	int
TYPE_NAME	371:7	371:7	4	int
LEAF_NODE	371:7	371:7	5	int
NAME	371:11	371:11	3	OJPEGReadHeaderInfoSecTablesDcTable
LEAF_NODE	371:11	371:11	4	OJPEGReadHeaderInfoSecTablesDcTable
LEAF_NODE	0:0	0:0	3	;
INIT	371:11	371:11	3	OJPEGReadHeaderInfoSecTablesDcTable OJPEGReadHeaderInfoSecTablesDcTable ( TIFF * tif )
ASSIGN	371:11	371:46	4	OJPEGReadHeaderInfoSecTablesDcTable OJPEGReadHeaderInfoSecTablesDcTable ( TIFF * tif )
LVAL	371:11	371:11	5	OJPEGReadHeaderInfoSecTablesDcTable
NAME	371:11	371:11	6	OJPEGReadHeaderInfoSecTablesDcTable
LEAF_NODE	371:11	371:11	7	OJPEGReadHeaderInfoSecTablesDcTable
ASSIGN_OP	371:11	371:11	5	OJPEGReadHeaderInfoSecTablesDcTable
NAME	371:11	371:11	6	OJPEGReadHeaderInfoSecTablesDcTable
LEAF_NODE	371:11	371:11	7	OJPEGReadHeaderInfoSecTablesDcTable
RVAL	371:46	371:56	5	( TIFF * tif )
LEAF_NODE	371:46	371:46	6	(
EXPR	371:47	371:53	6	TIFF * tif
FIELD	371:47	371:47	7	TIFF
LEAF_NODE	371:47	371:47	8	TIFF
LEAF_NODE	371:51	371:51	7	*
FIELD	371:53	371:53	7	tif
LEAF_NODE	371:53	371:53	8	tif
LEAF_NODE	371:56	371:56	6	)
LEAF_NODE	371:57	371:57	2	;
SIMPLE_DECL	372:7	372:57	1	int OJPEGReadHeaderInfoSecTablesAcTable ; OJPEGReadHeaderInfoSecTablesAcTable OJPEGReadHeaderInfoSecTablesAcTable ( TIFF * tif ) ;
VAR_DECL	372:7	372:11	2	int OJPEGReadHeaderInfoSecTablesAcTable ; OJPEGReadHeaderInfoSecTablesAcTable OJPEGReadHeaderInfoSecTablesAcTable ( TIFF * tif )
TYPE	372:7	372:7	3	int
TYPE_NAME	372:7	372:7	4	int
LEAF_NODE	372:7	372:7	5	int
NAME	372:11	372:11	3	OJPEGReadHeaderInfoSecTablesAcTable
LEAF_NODE	372:11	372:11	4	OJPEGReadHeaderInfoSecTablesAcTable
LEAF_NODE	0:0	0:0	3	;
INIT	372:11	372:11	3	OJPEGReadHeaderInfoSecTablesAcTable OJPEGReadHeaderInfoSecTablesAcTable ( TIFF * tif )
ASSIGN	372:11	372:46	4	OJPEGReadHeaderInfoSecTablesAcTable OJPEGReadHeaderInfoSecTablesAcTable ( TIFF * tif )
LVAL	372:11	372:11	5	OJPEGReadHeaderInfoSecTablesAcTable
NAME	372:11	372:11	6	OJPEGReadHeaderInfoSecTablesAcTable
LEAF_NODE	372:11	372:11	7	OJPEGReadHeaderInfoSecTablesAcTable
ASSIGN_OP	372:11	372:11	5	OJPEGReadHeaderInfoSecTablesAcTable
NAME	372:11	372:11	6	OJPEGReadHeaderInfoSecTablesAcTable
LEAF_NODE	372:11	372:11	7	OJPEGReadHeaderInfoSecTablesAcTable
RVAL	372:46	372:56	5	( TIFF * tif )
LEAF_NODE	372:46	372:46	6	(
EXPR	372:47	372:53	6	TIFF * tif
FIELD	372:47	372:47	7	TIFF
LEAF_NODE	372:47	372:47	8	TIFF
LEAF_NODE	372:51	372:51	7	*
FIELD	372:53	372:53	7	tif
LEAF_NODE	372:53	372:53	8	tif
LEAF_NODE	372:56	372:56	6	)
LEAF_NODE	372:57	372:57	2	;
SIMPLE_DECL	374:7	374:46	1	int OJPEGReadBufferFill ; OJPEGReadBufferFill OJPEGReadBufferFill ( OJPEGState * sp ) ;
VAR_DECL	374:7	374:11	2	int OJPEGReadBufferFill ; OJPEGReadBufferFill OJPEGReadBufferFill ( OJPEGState * sp )
TYPE	374:7	374:7	3	int
TYPE_NAME	374:7	374:7	4	int
LEAF_NODE	374:7	374:7	5	int
NAME	374:11	374:11	3	OJPEGReadBufferFill
LEAF_NODE	374:11	374:11	4	OJPEGReadBufferFill
LEAF_NODE	0:0	0:0	3	;
INIT	374:11	374:11	3	OJPEGReadBufferFill OJPEGReadBufferFill ( OJPEGState * sp )
ASSIGN	374:11	374:30	4	OJPEGReadBufferFill OJPEGReadBufferFill ( OJPEGState * sp )
LVAL	374:11	374:11	5	OJPEGReadBufferFill
NAME	374:11	374:11	6	OJPEGReadBufferFill
LEAF_NODE	374:11	374:11	7	OJPEGReadBufferFill
ASSIGN_OP	374:11	374:11	5	OJPEGReadBufferFill
NAME	374:11	374:11	6	OJPEGReadBufferFill
LEAF_NODE	374:11	374:11	7	OJPEGReadBufferFill
RVAL	374:30	374:45	5	( OJPEGState * sp )
LEAF_NODE	374:30	374:30	6	(
EXPR	374:31	374:43	6	OJPEGState * sp
FIELD	374:31	374:31	7	OJPEGState
LEAF_NODE	374:31	374:31	8	OJPEGState
LEAF_NODE	374:41	374:41	7	*
FIELD	374:43	374:43	7	sp
LEAF_NODE	374:43	374:43	8	sp
LEAF_NODE	374:45	374:45	6	)
LEAF_NODE	374:46	374:46	2	;
SIMPLE_DECL	375:7	375:53	1	int OJPEGReadByte ; OJPEGReadByte OJPEGReadByte ( OJPEGState * sp , uint8 * byte ) ;
VAR_DECL	375:7	375:11	2	int OJPEGReadByte ; OJPEGReadByte OJPEGReadByte ( OJPEGState * sp , uint8 * byte )
TYPE	375:7	375:7	3	int
TYPE_NAME	375:7	375:7	4	int
LEAF_NODE	375:7	375:7	5	int
NAME	375:11	375:11	3	OJPEGReadByte
LEAF_NODE	375:11	375:11	4	OJPEGReadByte
LEAF_NODE	0:0	0:0	3	;
INIT	375:11	375:11	3	OJPEGReadByte OJPEGReadByte ( OJPEGState * sp , uint8 * byte )
ASSIGN	375:11	375:24	4	OJPEGReadByte OJPEGReadByte ( OJPEGState * sp , uint8 * byte )
LVAL	375:11	375:11	5	OJPEGReadByte
NAME	375:11	375:11	6	OJPEGReadByte
LEAF_NODE	375:11	375:11	7	OJPEGReadByte
ASSIGN_OP	375:11	375:11	5	OJPEGReadByte
NAME	375:11	375:11	6	OJPEGReadByte
LEAF_NODE	375:11	375:11	7	OJPEGReadByte
RVAL	375:24	375:52	5	( OJPEGState * sp , uint8 * byte )
LEAF_NODE	375:24	375:24	6	(
EXPR	375:25	375:48	6	OJPEGState * sp , uint8 * byte
FIELD	375:25	375:25	7	OJPEGState
LEAF_NODE	375:25	375:25	8	OJPEGState
LEAF_NODE	375:35	375:35	7	*
FIELD	375:37	375:37	7	sp
LEAF_NODE	375:37	375:37	8	sp
LEAF_NODE	375:39	375:39	7	,
FIELD	375:41	375:41	7	uint8
LEAF_NODE	375:41	375:41	8	uint8
LEAF_NODE	375:46	375:46	7	*
FIELD	375:48	375:48	7	byte
LEAF_NODE	375:48	375:48	8	byte
LEAF_NODE	375:52	375:52	6	)
LEAF_NODE	375:53	375:53	2	;
SIMPLE_DECL	376:7	376:57	1	int OJPEGReadBytePeek ; OJPEGReadBytePeek OJPEGReadBytePeek ( OJPEGState * sp , uint8 * byte ) ;
VAR_DECL	376:7	376:11	2	int OJPEGReadBytePeek ; OJPEGReadBytePeek OJPEGReadBytePeek ( OJPEGState * sp , uint8 * byte )
TYPE	376:7	376:7	3	int
TYPE_NAME	376:7	376:7	4	int
LEAF_NODE	376:7	376:7	5	int
NAME	376:11	376:11	3	OJPEGReadBytePeek
LEAF_NODE	376:11	376:11	4	OJPEGReadBytePeek
LEAF_NODE	0:0	0:0	3	;
INIT	376:11	376:11	3	OJPEGReadBytePeek OJPEGReadBytePeek ( OJPEGState * sp , uint8 * byte )
ASSIGN	376:11	376:28	4	OJPEGReadBytePeek OJPEGReadBytePeek ( OJPEGState * sp , uint8 * byte )
LVAL	376:11	376:11	5	OJPEGReadBytePeek
NAME	376:11	376:11	6	OJPEGReadBytePeek
LEAF_NODE	376:11	376:11	7	OJPEGReadBytePeek
ASSIGN_OP	376:11	376:11	5	OJPEGReadBytePeek
NAME	376:11	376:11	6	OJPEGReadBytePeek
LEAF_NODE	376:11	376:11	7	OJPEGReadBytePeek
RVAL	376:28	376:56	5	( OJPEGState * sp , uint8 * byte )
LEAF_NODE	376:28	376:28	6	(
EXPR	376:29	376:52	6	OJPEGState * sp , uint8 * byte
FIELD	376:29	376:29	7	OJPEGState
LEAF_NODE	376:29	376:29	8	OJPEGState
LEAF_NODE	376:39	376:39	7	*
FIELD	376:41	376:41	7	sp
LEAF_NODE	376:41	376:41	8	sp
LEAF_NODE	376:43	376:43	7	,
FIELD	376:45	376:45	7	uint8
LEAF_NODE	376:45	376:45	8	uint8
LEAF_NODE	376:50	376:50	7	*
FIELD	376:52	376:52	7	byte
LEAF_NODE	376:52	376:52	8	byte
LEAF_NODE	376:56	376:56	6	)
LEAF_NODE	376:57	376:57	2	;
SIMPLE_DECL	377:7	377:48	1	void OJPEGReadByteAdvance ; OJPEGReadByteAdvance OJPEGReadByteAdvance ( OJPEGState * sp ) ;
VAR_DECL	377:7	377:12	2	void OJPEGReadByteAdvance ; OJPEGReadByteAdvance OJPEGReadByteAdvance ( OJPEGState * sp )
TYPE	377:7	377:7	3	void
TYPE_NAME	377:7	377:7	4	void
LEAF_NODE	377:7	377:7	5	void
NAME	377:12	377:12	3	OJPEGReadByteAdvance
LEAF_NODE	377:12	377:12	4	OJPEGReadByteAdvance
LEAF_NODE	0:0	0:0	3	;
INIT	377:12	377:12	3	OJPEGReadByteAdvance OJPEGReadByteAdvance ( OJPEGState * sp )
ASSIGN	377:12	377:32	4	OJPEGReadByteAdvance OJPEGReadByteAdvance ( OJPEGState * sp )
LVAL	377:12	377:12	5	OJPEGReadByteAdvance
NAME	377:12	377:12	6	OJPEGReadByteAdvance
LEAF_NODE	377:12	377:12	7	OJPEGReadByteAdvance
ASSIGN_OP	377:12	377:12	5	OJPEGReadByteAdvance
NAME	377:12	377:12	6	OJPEGReadByteAdvance
LEAF_NODE	377:12	377:12	7	OJPEGReadByteAdvance
RVAL	377:32	377:47	5	( OJPEGState * sp )
LEAF_NODE	377:32	377:32	6	(
EXPR	377:33	377:45	6	OJPEGState * sp
FIELD	377:33	377:33	7	OJPEGState
LEAF_NODE	377:33	377:33	8	OJPEGState
LEAF_NODE	377:43	377:43	7	*
FIELD	377:45	377:45	7	sp
LEAF_NODE	377:45	377:45	8	sp
LEAF_NODE	377:47	377:47	6	)
LEAF_NODE	377:48	377:48	2	;
SIMPLE_DECL	378:7	378:54	1	int OJPEGReadWord ; OJPEGReadWord OJPEGReadWord ( OJPEGState * sp , uint16 * word ) ;
VAR_DECL	378:7	378:11	2	int OJPEGReadWord ; OJPEGReadWord OJPEGReadWord ( OJPEGState * sp , uint16 * word )
TYPE	378:7	378:7	3	int
TYPE_NAME	378:7	378:7	4	int
LEAF_NODE	378:7	378:7	5	int
NAME	378:11	378:11	3	OJPEGReadWord
LEAF_NODE	378:11	378:11	4	OJPEGReadWord
LEAF_NODE	0:0	0:0	3	;
INIT	378:11	378:11	3	OJPEGReadWord OJPEGReadWord ( OJPEGState * sp , uint16 * word )
ASSIGN	378:11	378:24	4	OJPEGReadWord OJPEGReadWord ( OJPEGState * sp , uint16 * word )
LVAL	378:11	378:11	5	OJPEGReadWord
NAME	378:11	378:11	6	OJPEGReadWord
LEAF_NODE	378:11	378:11	7	OJPEGReadWord
ASSIGN_OP	378:11	378:11	5	OJPEGReadWord
NAME	378:11	378:11	6	OJPEGReadWord
LEAF_NODE	378:11	378:11	7	OJPEGReadWord
RVAL	378:24	378:53	5	( OJPEGState * sp , uint16 * word )
LEAF_NODE	378:24	378:24	6	(
EXPR	378:25	378:49	6	OJPEGState * sp , uint16 * word
FIELD	378:25	378:25	7	OJPEGState
LEAF_NODE	378:25	378:25	8	OJPEGState
LEAF_NODE	378:35	378:35	7	*
FIELD	378:37	378:37	7	sp
LEAF_NODE	378:37	378:37	8	sp
LEAF_NODE	378:39	378:39	7	,
FIELD	378:41	378:41	7	uint16
LEAF_NODE	378:41	378:41	8	uint16
LEAF_NODE	378:47	378:47	7	*
FIELD	378:49	378:49	7	word
LEAF_NODE	378:49	378:49	8	word
LEAF_NODE	378:53	378:53	6	)
LEAF_NODE	378:54	378:54	2	;
SIMPLE_DECL	395:7	395:86	1	int jpeg_create_decompress_encap ; jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo ) ;
VAR_DECL	395:7	395:11	2	int jpeg_create_decompress_encap ; jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
TYPE	395:7	395:7	3	int
TYPE_NAME	395:7	395:7	4	int
LEAF_NODE	395:7	395:7	5	int
NAME	395:11	395:11	3	jpeg_create_decompress_encap
LEAF_NODE	395:11	395:11	4	jpeg_create_decompress_encap
LEAF_NODE	0:0	0:0	3	;
INIT	395:11	395:11	3	jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
ASSIGN	395:11	395:39	4	jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LVAL	395:11	395:11	5	jpeg_create_decompress_encap
NAME	395:11	395:11	6	jpeg_create_decompress_encap
LEAF_NODE	395:11	395:11	7	jpeg_create_decompress_encap
ASSIGN_OP	395:11	395:11	5	jpeg_create_decompress_encap
NAME	395:11	395:11	6	jpeg_create_decompress_encap
LEAF_NODE	395:11	395:11	7	jpeg_create_decompress_encap
RVAL	395:39	395:85	5	( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LEAF_NODE	395:39	395:39	6	(
EXPR	395:40	395:80	6	OJPEGState * sp , jpeg_decompress_struct * cinfo
FIELD	395:40	395:40	7	OJPEGState
LEAF_NODE	395:40	395:40	8	OJPEGState
LEAF_NODE	395:50	395:50	7	*
FIELD	395:52	395:52	7	sp
LEAF_NODE	395:52	395:52	8	sp
LEAF_NODE	395:54	395:54	7	,
FIELD	395:56	395:56	7	jpeg_decompress_struct
LEAF_NODE	395:56	395:56	8	jpeg_decompress_struct
LEAF_NODE	395:78	395:78	7	*
FIELD	395:80	395:80	7	cinfo
LEAF_NODE	395:80	395:80	8	cinfo
LEAF_NODE	395:85	395:85	6	)
LEAF_NODE	395:86	395:86	2	;
SIMPLE_DECL	397:7	397:85	1	int jpeg_start_decompress_encap ; jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo ) ;
VAR_DECL	397:7	397:11	2	int jpeg_start_decompress_encap ; jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
TYPE	397:7	397:7	3	int
TYPE_NAME	397:7	397:7	4	int
LEAF_NODE	397:7	397:7	5	int
NAME	397:11	397:11	3	jpeg_start_decompress_encap
LEAF_NODE	397:11	397:11	4	jpeg_start_decompress_encap
LEAF_NODE	0:0	0:0	3	;
INIT	397:11	397:11	3	jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
ASSIGN	397:11	397:38	4	jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LVAL	397:11	397:11	5	jpeg_start_decompress_encap
NAME	397:11	397:11	6	jpeg_start_decompress_encap
LEAF_NODE	397:11	397:11	7	jpeg_start_decompress_encap
ASSIGN_OP	397:11	397:11	5	jpeg_start_decompress_encap
NAME	397:11	397:11	6	jpeg_start_decompress_encap
LEAF_NODE	397:11	397:11	7	jpeg_start_decompress_encap
RVAL	397:38	397:84	5	( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LEAF_NODE	397:38	397:38	6	(
EXPR	397:39	397:79	6	OJPEGState * sp , jpeg_decompress_struct * cinfo
FIELD	397:39	397:39	7	OJPEGState
LEAF_NODE	397:39	397:39	8	OJPEGState
LEAF_NODE	397:49	397:49	7	*
FIELD	397:51	397:51	7	sp
LEAF_NODE	397:51	397:51	8	sp
LEAF_NODE	397:53	397:53	7	,
FIELD	397:55	397:55	7	jpeg_decompress_struct
LEAF_NODE	397:55	397:55	8	jpeg_decompress_struct
LEAF_NODE	397:77	397:77	7	*
FIELD	397:79	397:79	7	cinfo
LEAF_NODE	397:79	397:79	8	cinfo
LEAF_NODE	397:84	397:84	6	)
LEAF_NODE	397:85	397:85	2	;
SIMPLE_DECL	400:7	400:40	1	void jpeg_encap_unwind ; jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif ) ;
VAR_DECL	400:7	400:12	2	void jpeg_encap_unwind ; jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif )
TYPE	400:7	400:7	3	void
TYPE_NAME	400:7	400:7	4	void
LEAF_NODE	400:7	400:7	5	void
NAME	400:12	400:12	3	jpeg_encap_unwind
LEAF_NODE	400:12	400:12	4	jpeg_encap_unwind
LEAF_NODE	0:0	0:0	3	;
INIT	400:12	400:12	3	jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif )
ASSIGN	400:12	400:29	4	jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif )
LVAL	400:12	400:12	5	jpeg_encap_unwind
NAME	400:12	400:12	6	jpeg_encap_unwind
LEAF_NODE	400:12	400:12	7	jpeg_encap_unwind
ASSIGN_OP	400:12	400:12	5	jpeg_encap_unwind
NAME	400:12	400:12	6	jpeg_encap_unwind
LEAF_NODE	400:12	400:12	7	jpeg_encap_unwind
RVAL	400:29	400:39	5	( TIFF * tif )
LEAF_NODE	400:29	400:29	6	(
EXPR	400:30	400:36	6	TIFF * tif
FIELD	400:30	400:30	7	TIFF
LEAF_NODE	400:30	400:30	8	TIFF
LEAF_NODE	400:34	400:34	7	*
FIELD	400:36	400:36	7	tif
LEAF_NODE	400:36	400:36	8	tif
LEAF_NODE	400:39	400:39	6	)
LEAF_NODE	400:40	400:40	2	;
SIMPLE_DECL	402:7	402:82	1	int jpeg_create_decompress_encap ; jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * j ) ;
VAR_DECL	402:7	402:11	2	int jpeg_create_decompress_encap ; jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * j )
TYPE	402:7	402:7	3	int
TYPE_NAME	402:7	402:7	4	int
LEAF_NODE	402:7	402:7	5	int
NAME	402:11	402:11	3	jpeg_create_decompress_encap
LEAF_NODE	402:11	402:11	4	jpeg_create_decompress_encap
LEAF_NODE	0:0	0:0	3	;
INIT	402:11	402:11	3	jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * j )
ASSIGN	402:11	402:39	4	jpeg_create_decompress_encap jpeg_create_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * j )
LVAL	402:11	402:11	5	jpeg_create_decompress_encap
NAME	402:11	402:11	6	jpeg_create_decompress_encap
LEAF_NODE	402:11	402:11	7	jpeg_create_decompress_encap
ASSIGN_OP	402:11	402:11	5	jpeg_create_decompress_encap
NAME	402:11	402:11	6	jpeg_create_decompress_encap
LEAF_NODE	402:11	402:11	7	jpeg_create_decompress_encap
RVAL	402:39	402:81	5	( OJPEGState * sp , jpeg_decompress_struct * j )
LEAF_NODE	402:39	402:39	6	(
EXPR	402:40	402:80	6	OJPEGState * sp , jpeg_decompress_struct * j
FIELD	402:40	402:40	7	OJPEGState
LEAF_NODE	402:40	402:40	8	OJPEGState
LEAF_NODE	402:50	402:50	7	*
FIELD	402:52	402:52	7	sp
LEAF_NODE	402:52	402:52	8	sp
LEAF_NODE	402:54	402:54	7	,
FIELD	402:56	402:56	7	jpeg_decompress_struct
LEAF_NODE	402:56	402:56	8	jpeg_decompress_struct
LEAF_NODE	402:78	402:78	7	*
FIELD	402:80	402:80	7	j
LEAF_NODE	402:80	402:80	8	j
LEAF_NODE	402:81	402:81	6	)
LEAF_NODE	402:82	402:82	2	;
SIMPLE_DECL	404:7	404:85	1	int jpeg_start_decompress_encap ; jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo ) ;
VAR_DECL	404:7	404:11	2	int jpeg_start_decompress_encap ; jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
TYPE	404:7	404:7	3	int
TYPE_NAME	404:7	404:7	4	int
LEAF_NODE	404:7	404:7	5	int
NAME	404:11	404:11	3	jpeg_start_decompress_encap
LEAF_NODE	404:11	404:11	4	jpeg_start_decompress_encap
LEAF_NODE	0:0	0:0	3	;
INIT	404:11	404:11	3	jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
ASSIGN	404:11	404:38	4	jpeg_start_decompress_encap jpeg_start_decompress_encap ( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LVAL	404:11	404:11	5	jpeg_start_decompress_encap
NAME	404:11	404:11	6	jpeg_start_decompress_encap
LEAF_NODE	404:11	404:11	7	jpeg_start_decompress_encap
ASSIGN_OP	404:11	404:11	5	jpeg_start_decompress_encap
NAME	404:11	404:11	6	jpeg_start_decompress_encap
LEAF_NODE	404:11	404:11	7	jpeg_start_decompress_encap
RVAL	404:38	404:84	5	( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LEAF_NODE	404:38	404:38	6	(
EXPR	404:39	404:79	6	OJPEGState * sp , jpeg_decompress_struct * cinfo
FIELD	404:39	404:39	7	OJPEGState
LEAF_NODE	404:39	404:39	8	OJPEGState
LEAF_NODE	404:49	404:49	7	*
FIELD	404:51	404:51	7	sp
LEAF_NODE	404:51	404:51	8	sp
LEAF_NODE	404:53	404:53	7	,
FIELD	404:55	404:55	7	jpeg_decompress_struct
LEAF_NODE	404:55	404:55	8	jpeg_decompress_struct
LEAF_NODE	404:77	404:77	7	*
FIELD	404:79	404:79	7	cinfo
LEAF_NODE	404:79	404:79	8	cinfo
LEAF_NODE	404:84	404:84	6	)
LEAF_NODE	404:85	404:85	2	;
SIMPLE_DECL	407:7	407:40	1	void jpeg_encap_unwind ; jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif ) ;
VAR_DECL	407:7	407:12	2	void jpeg_encap_unwind ; jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif )
TYPE	407:7	407:7	3	void
TYPE_NAME	407:7	407:7	4	void
LEAF_NODE	407:7	407:7	5	void
NAME	407:12	407:12	3	jpeg_encap_unwind
LEAF_NODE	407:12	407:12	4	jpeg_encap_unwind
LEAF_NODE	0:0	0:0	3	;
INIT	407:12	407:12	3	jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif )
ASSIGN	407:12	407:29	4	jpeg_encap_unwind jpeg_encap_unwind ( TIFF * tif )
LVAL	407:12	407:12	5	jpeg_encap_unwind
NAME	407:12	407:12	6	jpeg_encap_unwind
LEAF_NODE	407:12	407:12	7	jpeg_encap_unwind
ASSIGN_OP	407:12	407:12	5	jpeg_encap_unwind
NAME	407:12	407:12	6	jpeg_encap_unwind
LEAF_NODE	407:12	407:12	7	jpeg_encap_unwind
RVAL	407:29	407:39	5	( TIFF * tif )
LEAF_NODE	407:29	407:29	6	(
EXPR	407:30	407:36	6	TIFF * tif
FIELD	407:30	407:30	7	TIFF
LEAF_NODE	407:30	407:30	8	TIFF
LEAF_NODE	407:34	407:34	7	*
FIELD	407:36	407:36	7	tif
LEAF_NODE	407:36	407:36	8	tif
LEAF_NODE	407:39	407:39	6	)
LEAF_NODE	407:40	407:40	2	;
SIMPLE_DECL	410:7	410:76	1	void OJPEGLibjpegJpegErrorMgrOutputMessage ; OJPEGLibjpegJpegErrorMgrOutputMessage OJPEGLibjpegJpegErrorMgrOutputMessage ( jpeg_common_struct * cinfo ) ;
VAR_DECL	410:7	410:12	2	void OJPEGLibjpegJpegErrorMgrOutputMessage ; OJPEGLibjpegJpegErrorMgrOutputMessage OJPEGLibjpegJpegErrorMgrOutputMessage ( jpeg_common_struct * cinfo )
TYPE	410:7	410:7	3	void
TYPE_NAME	410:7	410:7	4	void
LEAF_NODE	410:7	410:7	5	void
NAME	410:12	410:12	3	OJPEGLibjpegJpegErrorMgrOutputMessage
LEAF_NODE	410:12	410:12	4	OJPEGLibjpegJpegErrorMgrOutputMessage
LEAF_NODE	0:0	0:0	3	;
INIT	410:12	410:12	3	OJPEGLibjpegJpegErrorMgrOutputMessage OJPEGLibjpegJpegErrorMgrOutputMessage ( jpeg_common_struct * cinfo )
ASSIGN	410:12	410:49	4	OJPEGLibjpegJpegErrorMgrOutputMessage OJPEGLibjpegJpegErrorMgrOutputMessage ( jpeg_common_struct * cinfo )
LVAL	410:12	410:12	5	OJPEGLibjpegJpegErrorMgrOutputMessage
NAME	410:12	410:12	6	OJPEGLibjpegJpegErrorMgrOutputMessage
LEAF_NODE	410:12	410:12	7	OJPEGLibjpegJpegErrorMgrOutputMessage
ASSIGN_OP	410:12	410:12	5	OJPEGLibjpegJpegErrorMgrOutputMessage
NAME	410:12	410:12	6	OJPEGLibjpegJpegErrorMgrOutputMessage
LEAF_NODE	410:12	410:12	7	OJPEGLibjpegJpegErrorMgrOutputMessage
RVAL	410:49	410:75	5	( jpeg_common_struct * cinfo )
LEAF_NODE	410:49	410:49	6	(
EXPR	410:50	410:70	6	jpeg_common_struct * cinfo
FIELD	410:50	410:50	7	jpeg_common_struct
LEAF_NODE	410:50	410:50	8	jpeg_common_struct
LEAF_NODE	410:68	410:68	7	*
FIELD	410:70	410:70	7	cinfo
LEAF_NODE	410:70	410:70	8	cinfo
LEAF_NODE	410:75	410:75	6	)
LEAF_NODE	410:76	410:76	2	;
SIMPLE_DECL	411:7	411:72	1	void OJPEGLibjpegJpegErrorMgrErrorExit ; OJPEGLibjpegJpegErrorMgrErrorExit OJPEGLibjpegJpegErrorMgrErrorExit ( jpeg_common_struct * cinfo ) ;
VAR_DECL	411:7	411:12	2	void OJPEGLibjpegJpegErrorMgrErrorExit ; OJPEGLibjpegJpegErrorMgrErrorExit OJPEGLibjpegJpegErrorMgrErrorExit ( jpeg_common_struct * cinfo )
TYPE	411:7	411:7	3	void
TYPE_NAME	411:7	411:7	4	void
LEAF_NODE	411:7	411:7	5	void
NAME	411:12	411:12	3	OJPEGLibjpegJpegErrorMgrErrorExit
LEAF_NODE	411:12	411:12	4	OJPEGLibjpegJpegErrorMgrErrorExit
LEAF_NODE	0:0	0:0	3	;
INIT	411:12	411:12	3	OJPEGLibjpegJpegErrorMgrErrorExit OJPEGLibjpegJpegErrorMgrErrorExit ( jpeg_common_struct * cinfo )
ASSIGN	411:12	411:45	4	OJPEGLibjpegJpegErrorMgrErrorExit OJPEGLibjpegJpegErrorMgrErrorExit ( jpeg_common_struct * cinfo )
LVAL	411:12	411:12	5	OJPEGLibjpegJpegErrorMgrErrorExit
NAME	411:12	411:12	6	OJPEGLibjpegJpegErrorMgrErrorExit
LEAF_NODE	411:12	411:12	7	OJPEGLibjpegJpegErrorMgrErrorExit
ASSIGN_OP	411:12	411:12	5	OJPEGLibjpegJpegErrorMgrErrorExit
NAME	411:12	411:12	6	OJPEGLibjpegJpegErrorMgrErrorExit
LEAF_NODE	411:12	411:12	7	OJPEGLibjpegJpegErrorMgrErrorExit
RVAL	411:45	411:71	5	( jpeg_common_struct * cinfo )
LEAF_NODE	411:45	411:45	6	(
EXPR	411:46	411:66	6	jpeg_common_struct * cinfo
FIELD	411:46	411:46	7	jpeg_common_struct
LEAF_NODE	411:46	411:46	8	jpeg_common_struct
LEAF_NODE	411:64	411:64	7	*
FIELD	411:66	411:66	7	cinfo
LEAF_NODE	411:66	411:66	8	cinfo
LEAF_NODE	411:71	411:71	6	)
LEAF_NODE	411:72	411:72	2	;
SIMPLE_DECL	412:7	412:78	1	void OJPEGLibjpegJpegSourceMgrInitSource ; OJPEGLibjpegJpegSourceMgrInitSource OJPEGLibjpegJpegSourceMgrInitSource ( jpeg_decompress_struct * cinfo ) ;
VAR_DECL	412:7	412:12	2	void OJPEGLibjpegJpegSourceMgrInitSource ; OJPEGLibjpegJpegSourceMgrInitSource OJPEGLibjpegJpegSourceMgrInitSource ( jpeg_decompress_struct * cinfo )
TYPE	412:7	412:7	3	void
TYPE_NAME	412:7	412:7	4	void
LEAF_NODE	412:7	412:7	5	void
NAME	412:12	412:12	3	OJPEGLibjpegJpegSourceMgrInitSource
LEAF_NODE	412:12	412:12	4	OJPEGLibjpegJpegSourceMgrInitSource
LEAF_NODE	0:0	0:0	3	;
INIT	412:12	412:12	3	OJPEGLibjpegJpegSourceMgrInitSource OJPEGLibjpegJpegSourceMgrInitSource ( jpeg_decompress_struct * cinfo )
ASSIGN	412:12	412:47	4	OJPEGLibjpegJpegSourceMgrInitSource OJPEGLibjpegJpegSourceMgrInitSource ( jpeg_decompress_struct * cinfo )
LVAL	412:12	412:12	5	OJPEGLibjpegJpegSourceMgrInitSource
NAME	412:12	412:12	6	OJPEGLibjpegJpegSourceMgrInitSource
LEAF_NODE	412:12	412:12	7	OJPEGLibjpegJpegSourceMgrInitSource
ASSIGN_OP	412:12	412:12	5	OJPEGLibjpegJpegSourceMgrInitSource
NAME	412:12	412:12	6	OJPEGLibjpegJpegSourceMgrInitSource
LEAF_NODE	412:12	412:12	7	OJPEGLibjpegJpegSourceMgrInitSource
RVAL	412:47	412:77	5	( jpeg_decompress_struct * cinfo )
LEAF_NODE	412:47	412:47	6	(
EXPR	412:48	412:72	6	jpeg_decompress_struct * cinfo
FIELD	412:48	412:48	7	jpeg_decompress_struct
LEAF_NODE	412:48	412:48	8	jpeg_decompress_struct
LEAF_NODE	412:70	412:70	7	*
FIELD	412:72	412:72	7	cinfo
LEAF_NODE	412:72	412:72	8	cinfo
LEAF_NODE	412:77	412:77	6	)
LEAF_NODE	412:78	412:78	2	;
SIMPLE_DECL	413:7	413:86	1	boolean OJPEGLibjpegJpegSourceMgrFillInputBuffer ; OJPEGLibjpegJpegSourceMgrFillInputBuffer OJPEGLibjpegJpegSourceMgrFillInputBuffer ( jpeg_decompress_struct * cinfo ) ;
VAR_DECL	413:7	413:15	2	boolean OJPEGLibjpegJpegSourceMgrFillInputBuffer ; OJPEGLibjpegJpegSourceMgrFillInputBuffer OJPEGLibjpegJpegSourceMgrFillInputBuffer ( jpeg_decompress_struct * cinfo )
TYPE	413:7	413:7	3	boolean
TYPE_NAME	413:7	413:7	4	boolean
LEAF_NODE	413:7	413:7	5	boolean
NAME	413:15	413:15	3	OJPEGLibjpegJpegSourceMgrFillInputBuffer
LEAF_NODE	413:15	413:15	4	OJPEGLibjpegJpegSourceMgrFillInputBuffer
LEAF_NODE	0:0	0:0	3	;
INIT	413:15	413:15	3	OJPEGLibjpegJpegSourceMgrFillInputBuffer OJPEGLibjpegJpegSourceMgrFillInputBuffer ( jpeg_decompress_struct * cinfo )
ASSIGN	413:15	413:55	4	OJPEGLibjpegJpegSourceMgrFillInputBuffer OJPEGLibjpegJpegSourceMgrFillInputBuffer ( jpeg_decompress_struct * cinfo )
LVAL	413:15	413:15	5	OJPEGLibjpegJpegSourceMgrFillInputBuffer
NAME	413:15	413:15	6	OJPEGLibjpegJpegSourceMgrFillInputBuffer
LEAF_NODE	413:15	413:15	7	OJPEGLibjpegJpegSourceMgrFillInputBuffer
ASSIGN_OP	413:15	413:15	5	OJPEGLibjpegJpegSourceMgrFillInputBuffer
NAME	413:15	413:15	6	OJPEGLibjpegJpegSourceMgrFillInputBuffer
LEAF_NODE	413:15	413:15	7	OJPEGLibjpegJpegSourceMgrFillInputBuffer
RVAL	413:55	413:85	5	( jpeg_decompress_struct * cinfo )
LEAF_NODE	413:55	413:55	6	(
EXPR	413:56	413:80	6	jpeg_decompress_struct * cinfo
FIELD	413:56	413:56	7	jpeg_decompress_struct
LEAF_NODE	413:56	413:56	8	jpeg_decompress_struct
LEAF_NODE	413:78	413:78	7	*
FIELD	413:80	413:80	7	cinfo
LEAF_NODE	413:80	413:80	8	cinfo
LEAF_NODE	413:85	413:85	6	)
LEAF_NODE	413:86	413:86	2	;
SIMPLE_DECL	416:7	416:78	1	void OJPEGLibjpegJpegSourceMgrTermSource ; OJPEGLibjpegJpegSourceMgrTermSource OJPEGLibjpegJpegSourceMgrTermSource ( jpeg_decompress_struct * cinfo ) ;
VAR_DECL	416:7	416:12	2	void OJPEGLibjpegJpegSourceMgrTermSource ; OJPEGLibjpegJpegSourceMgrTermSource OJPEGLibjpegJpegSourceMgrTermSource ( jpeg_decompress_struct * cinfo )
TYPE	416:7	416:7	3	void
TYPE_NAME	416:7	416:7	4	void
LEAF_NODE	416:7	416:7	5	void
NAME	416:12	416:12	3	OJPEGLibjpegJpegSourceMgrTermSource
LEAF_NODE	416:12	416:12	4	OJPEGLibjpegJpegSourceMgrTermSource
LEAF_NODE	0:0	0:0	3	;
INIT	416:12	416:12	3	OJPEGLibjpegJpegSourceMgrTermSource OJPEGLibjpegJpegSourceMgrTermSource ( jpeg_decompress_struct * cinfo )
ASSIGN	416:12	416:47	4	OJPEGLibjpegJpegSourceMgrTermSource OJPEGLibjpegJpegSourceMgrTermSource ( jpeg_decompress_struct * cinfo )
LVAL	416:12	416:12	5	OJPEGLibjpegJpegSourceMgrTermSource
NAME	416:12	416:12	6	OJPEGLibjpegJpegSourceMgrTermSource
LEAF_NODE	416:12	416:12	7	OJPEGLibjpegJpegSourceMgrTermSource
ASSIGN_OP	416:12	416:12	5	OJPEGLibjpegJpegSourceMgrTermSource
NAME	416:12	416:12	6	OJPEGLibjpegJpegSourceMgrTermSource
LEAF_NODE	416:12	416:12	7	OJPEGLibjpegJpegSourceMgrTermSource
RVAL	416:47	416:77	5	( jpeg_decompress_struct * cinfo )
LEAF_NODE	416:47	416:47	6	(
EXPR	416:48	416:72	6	jpeg_decompress_struct * cinfo
FIELD	416:48	416:48	7	jpeg_decompress_struct
LEAF_NODE	416:48	416:48	8	jpeg_decompress_struct
LEAF_NODE	416:70	416:70	7	*
FIELD	416:72	416:72	7	cinfo
LEAF_NODE	416:72	416:72	8	cinfo
LEAF_NODE	416:77	416:77	6	)
LEAF_NODE	416:78	416:78	2	;
FUNCTION_DEF	418:0	479:0	1	
RETURN_TYPE	418:0	418:0	2	int
TYPE_NAME	418:0	418:0	3	int
LEAF_NODE	418:0	418:0	4	int
FUNCTION_NAME	419:0	419:0	2	TIFFInitOJPEG
LEAF_NODE	419:0	419:0	3	TIFFInitOJPEG
PARAMETER_LIST	419:13	419:35	2	( TIFF * tif , int scheme )
LEAF_NODE	419:13	419:13	3	(
PARAMETER_DECL	419:14	419:20	3	TIFF * tif
TYPE	419:14	419:18	4	TIFF *
TYPE_NAME	419:14	419:14	5	TIFF
LEAF_NODE	419:14	419:14	6	TIFF
POINTER	419:18	419:18	5	*
LEAF_NODE	419:18	419:18	6	*
NAME	419:20	419:20	4	tif
LEAF_NODE	419:20	419:20	5	tif
LEAF_NODE	419:23	419:23	3	,
PARAMETER_DECL	419:25	419:29	3	int scheme
TYPE	419:25	419:25	4	int
TYPE_NAME	419:25	419:25	5	int
LEAF_NODE	419:25	419:25	6	int
NAME	419:29	419:29	4	scheme
LEAF_NODE	419:29	419:29	5	scheme
LEAF_NODE	419:35	419:35	3	)
LEAF_NODE	420:0	420:0	2	{
STATEMENTS	421:1	478:1	2	
LEAF_NODE	421:1	421:1	3	static
SIMPLE_DECL	421:8	421:43	3	const char [ ] module ; module = "TIFFInitOJPEG" ;
VAR_DECL	421:8	421:19	4	const char [ ] module ; module = "TIFFInitOJPEG"
TYPE	421:8	421:25	5	const char [ ]
TYPE_NAME	421:8	421:14	6	const char
LEAF_NODE	421:8	421:8	7	const
LEAF_NODE	421:14	421:14	7	char
TYPE_SUFFIX	421:25	421:26	6	[ ]
LEAF_NODE	421:25	421:25	7	[
LEAF_NODE	421:26	421:26	7	]
NAME	421:19	421:19	5	module
LEAF_NODE	421:19	421:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	421:19	421:19	5	module = "TIFFInitOJPEG"
ASSIGN	421:19	421:28	6	module = "TIFFInitOJPEG"
LVAL	421:19	421:19	7	module
NAME	421:19	421:19	8	module
LEAF_NODE	421:19	421:19	9	module
ASSIGN_OP	421:27	421:27	7	=
LEAF_NODE	421:27	421:27	8	=
RVAL	421:28	421:28	7	"TIFFInitOJPEG"
FIELD	421:28	421:28	8	"TIFFInitOJPEG"
LEAF_NODE	421:28	421:28	9	"TIFFInitOJPEG"
LEAF_NODE	421:43	421:43	4	;
SIMPLE_DECL	422:1	422:15	3	OJPEGState * sp ;
VAR_DECL	422:1	422:13	4	OJPEGState * sp
TYPE	422:1	422:11	5	OJPEGState *
TYPE_NAME	422:1	422:1	6	OJPEGState
LEAF_NODE	422:1	422:1	7	OJPEGState
POINTER	422:11	422:11	6	*
LEAF_NODE	422:11	422:11	7	*
NAME	422:13	422:13	5	sp
LEAF_NODE	422:13	422:13	6	sp
LEAF_NODE	422:15	422:15	4	;
EXPR_STATEMENT	424:1	424:34	3	assert ( scheme == COMPRESSION_OJPEG ) ;
EXPR	424:1	424:1	4	assert ( scheme == COMPRESSION_OJPEG )
FUNCTION_CALL	424:1	424:33	5	assert ( scheme == COMPRESSION_OJPEG )
CALLEE	424:1	424:1	6	assert
LEAF_NODE	424:1	424:1	7	assert
LEAF_NODE	424:7	424:7	6	(
ARGUMENT	424:8	424:16	6	scheme == COMPRESSION_OJPEG
FIELD	424:8	424:8	7	scheme
LEAF_NODE	424:8	424:8	8	scheme
EQ_OPERATOR	424:14	424:14	7	==
LEAF_NODE	424:14	424:14	8	==
FIELD	424:16	424:16	7	COMPRESSION_OJPEG
LEAF_NODE	424:16	424:16	8	COMPRESSION_OJPEG
LEAF_NODE	424:33	424:33	6	)
LEAF_NODE	424:34	424:34	4	;
SELECTION	429:1	429:71	3	
KEYWORD	429:1	429:1	4	if
LEAF_NODE	429:1	429:1	5	if
LEAF_NODE	429:4	429:4	4	(
CONDITION	429:5	429:5	4	! _TIFFMergeFields ( tif , ojpegFields , TIFFArrayCount ( ojpegFields ) )
EXPR	429:5	429:5	5	! _TIFFMergeFields ( tif , ojpegFields , TIFFArrayCount ( ojpegFields ) )
UNARY_EXPR	429:5	429:6	6	! _TIFFMergeFields ( tif , ojpegFields , TIFFArrayCount ( ojpegFields ) )
UNARY_OPERATOR	429:5	429:5	7	!
LEAF_NODE	429:5	429:5	8	!
FUNCTION_CALL	429:6	429:68	7	_TIFFMergeFields ( tif , ojpegFields , TIFFArrayCount ( ojpegFields ) )
CALLEE	429:6	429:6	8	_TIFFMergeFields
LEAF_NODE	429:6	429:6	9	_TIFFMergeFields
LEAF_NODE	429:22	429:22	8	(
ARGUMENT	429:23	429:23	8	tif
FIELD	429:23	429:23	9	tif
LEAF_NODE	429:23	429:23	10	tif
LEAF_NODE	429:26	429:26	8	,
ARGUMENT	429:28	429:28	8	ojpegFields
FIELD	429:28	429:28	9	ojpegFields
LEAF_NODE	429:28	429:28	10	ojpegFields
LEAF_NODE	429:39	429:39	8	,
ARGUMENT	429:41	429:41	8	TIFFArrayCount ( ojpegFields )
FUNCTION_CALL	429:41	429:67	9	TIFFArrayCount ( ojpegFields )
CALLEE	429:41	429:41	10	TIFFArrayCount
LEAF_NODE	429:41	429:41	11	TIFFArrayCount
LEAF_NODE	429:55	429:55	10	(
ARGUMENT	429:56	429:56	10	ojpegFields
FIELD	429:56	429:56	11	ojpegFields
LEAF_NODE	429:56	429:56	12	ojpegFields
LEAF_NODE	429:67	429:67	10	)
LEAF_NODE	429:68	429:68	8	)
LEAF_NODE	429:69	429:69	4	)
STATEMENTS	429:71	433:1	4	
LEAF_NODE	429:71	429:71	5	{
STATEMENTS	430:2	432:2	5	
EXPR_STATEMENT	430:2	431:52	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging Old JPEG codec-specific tags failed" ) ;
EXPR	430:2	430:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging Old JPEG codec-specific tags failed" )
FUNCTION_CALL	430:2	431:51	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Merging Old JPEG codec-specific tags failed" )
CALLEE	430:2	430:2	9	TIFFErrorExt
LEAF_NODE	430:2	430:2	10	TIFFErrorExt
LEAF_NODE	430:14	430:14	9	(
ARGUMENT	430:15	430:15	9	tif -> tif_clientdata
FIELD	430:15	430:20	10	tif -> tif_clientdata
LEAF_NODE	430:15	430:15	11	tif
LEAF_NODE	430:18	430:18	11	->
LEAF_NODE	430:20	430:20	11	tif_clientdata
LEAF_NODE	430:34	430:34	9	,
ARGUMENT	430:36	430:36	9	module
FIELD	430:36	430:36	10	module
LEAF_NODE	430:36	430:36	11	module
LEAF_NODE	430:42	430:42	9	,
ARGUMENT	431:6	431:6	9	"Merging Old JPEG codec-specific tags failed"
FIELD	431:6	431:6	10	"Merging Old JPEG codec-specific tags failed"
LEAF_NODE	431:6	431:6	11	"Merging Old JPEG codec-specific tags failed"
LEAF_NODE	431:51	431:51	9	)
LEAF_NODE	431:52	431:52	7	;
JUMP_STATEMENT	432:2	432:10	6	return 0 ;
KEYWORD	432:2	432:2	7	return
LEAF_NODE	432:2	432:2	8	return
DESTINATION	432:9	432:9	7	0
EXPR	432:9	432:9	8	0
FIELD	432:9	432:9	9	0
LEAF_NODE	432:9	432:9	10	0
LEAF_NODE	432:10	432:10	7	;
LEAF_NODE	433:1	433:1	5	}
EXPR_STATEMENT	436:1	436:35	3	sp = _TIFFmalloc ( sizeof ( OJPEGState ) ) ;
EXPR	436:1	436:1	4	sp = _TIFFmalloc ( sizeof ( OJPEGState ) )
ASSIGN	436:1	436:4	5	sp = _TIFFmalloc ( sizeof ( OJPEGState ) )
LVAL	436:1	436:1	6	sp
FIELD	436:1	436:1	7	sp
LEAF_NODE	436:1	436:1	8	sp
ASSIGN_OP	436:3	436:3	6	=
LEAF_NODE	436:3	436:3	7	=
RVAL	436:4	436:4	6	_TIFFmalloc ( sizeof ( OJPEGState ) )
FUNCTION_CALL	436:4	436:34	7	_TIFFmalloc ( sizeof ( OJPEGState ) )
CALLEE	436:4	436:4	8	_TIFFmalloc
LEAF_NODE	436:4	436:4	9	_TIFFmalloc
LEAF_NODE	436:15	436:15	8	(
ARGUMENT	436:16	436:16	8	sizeof ( OJPEGState )
FUNCTION_CALL	436:16	436:33	9	sizeof ( OJPEGState )
CALLEE	436:16	436:16	10	sizeof
LEAF_NODE	436:16	436:16	11	sizeof
LEAF_NODE	436:22	436:22	10	(
ARGUMENT	436:23	436:23	10	OJPEGState
FIELD	436:23	436:23	11	OJPEGState
LEAF_NODE	436:23	436:23	12	OJPEGState
LEAF_NODE	436:33	436:33	10	)
LEAF_NODE	436:34	436:34	8	)
LEAF_NODE	436:35	436:35	4	;
SELECTION	437:1	438:1	3	
KEYWORD	437:1	437:1	4	if
LEAF_NODE	437:1	437:1	5	if
LEAF_NODE	437:4	437:4	4	(
CONDITION	437:5	437:5	4	sp == NULL
EXPR	437:5	437:9	5	sp == NULL
FIELD	437:5	437:5	6	sp
LEAF_NODE	437:5	437:5	7	sp
EQ_OPERATOR	437:7	437:7	6	==
LEAF_NODE	437:7	437:7	7	==
FIELD	437:9	437:9	6	NULL
LEAF_NODE	437:9	437:9	7	NULL
LEAF_NODE	437:13	437:13	4	)
STATEMENTS	438:1	441:1	4	
LEAF_NODE	438:1	438:1	5	{
STATEMENTS	439:2	440:2	5	
EXPR_STATEMENT	439:2	439:75	6	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for OJPEG state block" ) ;
EXPR	439:2	439:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for OJPEG state block" )
FUNCTION_CALL	439:2	439:74	8	TIFFErrorExt ( tif -> tif_clientdata , module , "No space for OJPEG state block" )
CALLEE	439:2	439:2	9	TIFFErrorExt
LEAF_NODE	439:2	439:2	10	TIFFErrorExt
LEAF_NODE	439:14	439:14	9	(
ARGUMENT	439:15	439:15	9	tif -> tif_clientdata
FIELD	439:15	439:20	10	tif -> tif_clientdata
LEAF_NODE	439:15	439:15	11	tif
LEAF_NODE	439:18	439:18	11	->
LEAF_NODE	439:20	439:20	11	tif_clientdata
LEAF_NODE	439:34	439:34	9	,
ARGUMENT	439:35	439:35	9	module
FIELD	439:35	439:35	10	module
LEAF_NODE	439:35	439:35	11	module
LEAF_NODE	439:41	439:41	9	,
ARGUMENT	439:42	439:42	9	"No space for OJPEG state block"
FIELD	439:42	439:42	10	"No space for OJPEG state block"
LEAF_NODE	439:42	439:42	11	"No space for OJPEG state block"
LEAF_NODE	439:74	439:74	9	)
LEAF_NODE	439:75	439:75	7	;
JUMP_STATEMENT	440:2	440:11	6	return ( 0 ) ;
KEYWORD	440:2	440:2	7	return
LEAF_NODE	440:2	440:2	8	return
DESTINATION	440:8	440:8	7	( 0 )
EXPR	440:8	440:10	8	( 0 )
LEAF_NODE	440:8	440:8	9	(
FIELD	440:9	440:9	9	0
LEAF_NODE	440:9	440:9	10	0
LEAF_NODE	440:10	440:10	9	)
LEAF_NODE	440:11	440:11	7	;
LEAF_NODE	441:1	441:1	5	}
EXPR_STATEMENT	442:1	442:37	3	_TIFFmemset ( sp , 0 , sizeof ( OJPEGState ) ) ;
EXPR	442:1	442:1	4	_TIFFmemset ( sp , 0 , sizeof ( OJPEGState ) )
FUNCTION_CALL	442:1	442:36	5	_TIFFmemset ( sp , 0 , sizeof ( OJPEGState ) )
CALLEE	442:1	442:1	6	_TIFFmemset
LEAF_NODE	442:1	442:1	7	_TIFFmemset
LEAF_NODE	442:12	442:12	6	(
ARGUMENT	442:13	442:13	6	sp
FIELD	442:13	442:13	7	sp
LEAF_NODE	442:13	442:13	8	sp
LEAF_NODE	442:15	442:15	6	,
ARGUMENT	442:16	442:16	6	0
FIELD	442:16	442:16	7	0
LEAF_NODE	442:16	442:16	8	0
LEAF_NODE	442:17	442:17	6	,
ARGUMENT	442:18	442:18	6	sizeof ( OJPEGState )
FUNCTION_CALL	442:18	442:35	7	sizeof ( OJPEGState )
CALLEE	442:18	442:18	8	sizeof
LEAF_NODE	442:18	442:18	9	sizeof
LEAF_NODE	442:24	442:24	8	(
ARGUMENT	442:25	442:25	8	OJPEGState
FIELD	442:25	442:25	9	OJPEGState
LEAF_NODE	442:25	442:25	10	OJPEGState
LEAF_NODE	442:35	442:35	8	)
LEAF_NODE	442:36	442:36	6	)
LEAF_NODE	442:37	442:37	4	;
EXPR_STATEMENT	443:1	443:12	3	sp -> tif = tif ;
EXPR	443:1	443:1	4	sp -> tif = tif
ASSIGN	443:1	443:9	5	sp -> tif = tif
LVAL	443:1	443:1	6	sp -> tif
FIELD	443:1	443:5	7	sp -> tif
LEAF_NODE	443:1	443:1	8	sp
LEAF_NODE	443:3	443:3	8	->
LEAF_NODE	443:5	443:5	8	tif
ASSIGN_OP	443:8	443:8	6	=
LEAF_NODE	443:8	443:8	7	=
RVAL	443:9	443:9	6	tif
FIELD	443:9	443:9	7	tif
LEAF_NODE	443:9	443:9	8	tif
LEAF_NODE	443:12	443:12	4	;
EXPR_STATEMENT	444:1	444:16	3	sp -> jpeg_proc = 1 ;
EXPR	444:1	444:1	4	sp -> jpeg_proc = 1
ASSIGN	444:1	444:15	5	sp -> jpeg_proc = 1
LVAL	444:1	444:1	6	sp -> jpeg_proc
FIELD	444:1	444:5	7	sp -> jpeg_proc
LEAF_NODE	444:1	444:1	8	sp
LEAF_NODE	444:3	444:3	8	->
LEAF_NODE	444:5	444:5	8	jpeg_proc
ASSIGN_OP	444:14	444:14	6	=
LEAF_NODE	444:14	444:14	7	=
RVAL	444:15	444:15	6	1
FIELD	444:15	444:15	7	1
LEAF_NODE	444:15	444:15	8	1
LEAF_NODE	444:16	444:16	4	;
EXPR_STATEMENT	445:1	445:22	3	sp -> subsampling_hor = 2 ;
EXPR	445:1	445:1	4	sp -> subsampling_hor = 2
ASSIGN	445:1	445:21	5	sp -> subsampling_hor = 2
LVAL	445:1	445:1	6	sp -> subsampling_hor
FIELD	445:1	445:5	7	sp -> subsampling_hor
LEAF_NODE	445:1	445:1	8	sp
LEAF_NODE	445:3	445:3	8	->
LEAF_NODE	445:5	445:5	8	subsampling_hor
ASSIGN_OP	445:20	445:20	6	=
LEAF_NODE	445:20	445:20	7	=
RVAL	445:21	445:21	6	2
FIELD	445:21	445:21	7	2
LEAF_NODE	445:21	445:21	8	2
LEAF_NODE	445:22	445:22	4	;
EXPR_STATEMENT	446:1	446:22	3	sp -> subsampling_ver = 2 ;
EXPR	446:1	446:1	4	sp -> subsampling_ver = 2
ASSIGN	446:1	446:21	5	sp -> subsampling_ver = 2
LVAL	446:1	446:1	6	sp -> subsampling_ver
FIELD	446:1	446:5	7	sp -> subsampling_ver
LEAF_NODE	446:1	446:1	8	sp
LEAF_NODE	446:3	446:3	8	->
LEAF_NODE	446:5	446:5	8	subsampling_ver
ASSIGN_OP	446:20	446:20	6	=
LEAF_NODE	446:20	446:20	7	=
RVAL	446:21	446:21	6	2
FIELD	446:21	446:21	7	2
LEAF_NODE	446:21	446:21	8	2
LEAF_NODE	446:22	446:22	4	;
EXPR_STATEMENT	447:1	447:47	3	TIFFSetField ( tif , TIFFTAG_YCBCRSUBSAMPLING , 2 , 2 ) ;
EXPR	447:1	447:1	4	TIFFSetField ( tif , TIFFTAG_YCBCRSUBSAMPLING , 2 , 2 )
FUNCTION_CALL	447:1	447:46	5	TIFFSetField ( tif , TIFFTAG_YCBCRSUBSAMPLING , 2 , 2 )
CALLEE	447:1	447:1	6	TIFFSetField
LEAF_NODE	447:1	447:1	7	TIFFSetField
LEAF_NODE	447:13	447:13	6	(
ARGUMENT	447:14	447:14	6	tif
FIELD	447:14	447:14	7	tif
LEAF_NODE	447:14	447:14	8	tif
LEAF_NODE	447:17	447:17	6	,
ARGUMENT	447:18	447:18	6	TIFFTAG_YCBCRSUBSAMPLING
FIELD	447:18	447:18	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	447:18	447:18	8	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	447:42	447:42	6	,
ARGUMENT	447:43	447:43	6	2
FIELD	447:43	447:43	7	2
LEAF_NODE	447:43	447:43	8	2
LEAF_NODE	447:44	447:44	6	,
ARGUMENT	447:45	447:45	6	2
FIELD	447:45	447:45	7	2
LEAF_NODE	447:45	447:45	8	2
LEAF_NODE	447:46	447:46	6	)
LEAF_NODE	447:47	447:47	4	;
EXPR_STATEMENT	449:1	449:34	3	tif -> tif_fixuptags = OJPEGFixupTags ;
EXPR	449:1	449:1	4	tif -> tif_fixuptags = OJPEGFixupTags
ASSIGN	449:1	449:20	5	tif -> tif_fixuptags = OJPEGFixupTags
LVAL	449:1	449:1	6	tif -> tif_fixuptags
FIELD	449:1	449:6	7	tif -> tif_fixuptags
LEAF_NODE	449:1	449:1	8	tif
LEAF_NODE	449:4	449:4	8	->
LEAF_NODE	449:6	449:6	8	tif_fixuptags
ASSIGN_OP	449:19	449:19	6	=
LEAF_NODE	449:19	449:19	7	=
RVAL	449:20	449:20	6	OJPEGFixupTags
FIELD	449:20	449:20	7	OJPEGFixupTags
LEAF_NODE	449:20	449:20	8	OJPEGFixupTags
LEAF_NODE	449:34	449:34	4	;
EXPR_STATEMENT	450:1	450:38	3	tif -> tif_setupdecode = OJPEGSetupDecode ;
EXPR	450:1	450:1	4	tif -> tif_setupdecode = OJPEGSetupDecode
ASSIGN	450:1	450:22	5	tif -> tif_setupdecode = OJPEGSetupDecode
LVAL	450:1	450:1	6	tif -> tif_setupdecode
FIELD	450:1	450:6	7	tif -> tif_setupdecode
LEAF_NODE	450:1	450:1	8	tif
LEAF_NODE	450:4	450:4	8	->
LEAF_NODE	450:6	450:6	8	tif_setupdecode
ASSIGN_OP	450:21	450:21	6	=
LEAF_NODE	450:21	450:21	7	=
RVAL	450:22	450:22	6	OJPEGSetupDecode
FIELD	450:22	450:22	7	OJPEGSetupDecode
LEAF_NODE	450:22	450:22	8	OJPEGSetupDecode
LEAF_NODE	450:38	450:38	4	;
EXPR_STATEMENT	451:1	451:34	3	tif -> tif_predecode = OJPEGPreDecode ;
EXPR	451:1	451:1	4	tif -> tif_predecode = OJPEGPreDecode
ASSIGN	451:1	451:20	5	tif -> tif_predecode = OJPEGPreDecode
LVAL	451:1	451:1	6	tif -> tif_predecode
FIELD	451:1	451:6	7	tif -> tif_predecode
LEAF_NODE	451:1	451:1	8	tif
LEAF_NODE	451:4	451:4	8	->
LEAF_NODE	451:6	451:6	8	tif_predecode
ASSIGN_OP	451:19	451:19	6	=
LEAF_NODE	451:19	451:19	7	=
RVAL	451:20	451:20	6	OJPEGPreDecode
FIELD	451:20	451:20	7	OJPEGPreDecode
LEAF_NODE	451:20	451:20	8	OJPEGPreDecode
LEAF_NODE	451:34	451:34	4	;
EXPR_STATEMENT	452:1	452:36	3	tif -> tif_postdecode = OJPEGPostDecode ;
EXPR	452:1	452:1	4	tif -> tif_postdecode = OJPEGPostDecode
ASSIGN	452:1	452:21	5	tif -> tif_postdecode = OJPEGPostDecode
LVAL	452:1	452:1	6	tif -> tif_postdecode
FIELD	452:1	452:6	7	tif -> tif_postdecode
LEAF_NODE	452:1	452:1	8	tif
LEAF_NODE	452:4	452:4	8	->
LEAF_NODE	452:6	452:6	8	tif_postdecode
ASSIGN_OP	452:20	452:20	6	=
LEAF_NODE	452:20	452:20	7	=
RVAL	452:21	452:21	6	OJPEGPostDecode
FIELD	452:21	452:21	7	OJPEGPostDecode
LEAF_NODE	452:21	452:21	8	OJPEGPostDecode
LEAF_NODE	452:36	452:36	4	;
EXPR_STATEMENT	453:1	453:31	3	tif -> tif_decoderow = OJPEGDecode ;
EXPR	453:1	453:1	4	tif -> tif_decoderow = OJPEGDecode
ASSIGN	453:1	453:20	5	tif -> tif_decoderow = OJPEGDecode
LVAL	453:1	453:1	6	tif -> tif_decoderow
FIELD	453:1	453:6	7	tif -> tif_decoderow
LEAF_NODE	453:1	453:1	8	tif
LEAF_NODE	453:4	453:4	8	->
LEAF_NODE	453:6	453:6	8	tif_decoderow
ASSIGN_OP	453:19	453:19	6	=
LEAF_NODE	453:19	453:19	7	=
RVAL	453:20	453:20	6	OJPEGDecode
FIELD	453:20	453:20	7	OJPEGDecode
LEAF_NODE	453:20	453:20	8	OJPEGDecode
LEAF_NODE	453:31	453:31	4	;
EXPR_STATEMENT	454:1	454:33	3	tif -> tif_decodestrip = OJPEGDecode ;
EXPR	454:1	454:1	4	tif -> tif_decodestrip = OJPEGDecode
ASSIGN	454:1	454:22	5	tif -> tif_decodestrip = OJPEGDecode
LVAL	454:1	454:1	6	tif -> tif_decodestrip
FIELD	454:1	454:6	7	tif -> tif_decodestrip
LEAF_NODE	454:1	454:1	8	tif
LEAF_NODE	454:4	454:4	8	->
LEAF_NODE	454:6	454:6	8	tif_decodestrip
ASSIGN_OP	454:21	454:21	6	=
LEAF_NODE	454:21	454:21	7	=
RVAL	454:22	454:22	6	OJPEGDecode
FIELD	454:22	454:22	7	OJPEGDecode
LEAF_NODE	454:22	454:22	8	OJPEGDecode
LEAF_NODE	454:33	454:33	4	;
EXPR_STATEMENT	455:1	455:32	3	tif -> tif_decodetile = OJPEGDecode ;
EXPR	455:1	455:1	4	tif -> tif_decodetile = OJPEGDecode
ASSIGN	455:1	455:21	5	tif -> tif_decodetile = OJPEGDecode
LVAL	455:1	455:1	6	tif -> tif_decodetile
FIELD	455:1	455:6	7	tif -> tif_decodetile
LEAF_NODE	455:1	455:1	8	tif
LEAF_NODE	455:4	455:4	8	->
LEAF_NODE	455:6	455:6	8	tif_decodetile
ASSIGN_OP	455:20	455:20	6	=
LEAF_NODE	455:20	455:20	7	=
RVAL	455:21	455:21	6	OJPEGDecode
FIELD	455:21	455:21	7	OJPEGDecode
LEAF_NODE	455:21	455:21	8	OJPEGDecode
LEAF_NODE	455:32	455:32	4	;
EXPR_STATEMENT	456:1	456:38	3	tif -> tif_setupencode = OJPEGSetupEncode ;
EXPR	456:1	456:1	4	tif -> tif_setupencode = OJPEGSetupEncode
ASSIGN	456:1	456:22	5	tif -> tif_setupencode = OJPEGSetupEncode
LVAL	456:1	456:1	6	tif -> tif_setupencode
FIELD	456:1	456:6	7	tif -> tif_setupencode
LEAF_NODE	456:1	456:1	8	tif
LEAF_NODE	456:4	456:4	8	->
LEAF_NODE	456:6	456:6	8	tif_setupencode
ASSIGN_OP	456:21	456:21	6	=
LEAF_NODE	456:21	456:21	7	=
RVAL	456:22	456:22	6	OJPEGSetupEncode
FIELD	456:22	456:22	7	OJPEGSetupEncode
LEAF_NODE	456:22	456:22	8	OJPEGSetupEncode
LEAF_NODE	456:38	456:38	4	;
EXPR_STATEMENT	457:1	457:34	3	tif -> tif_preencode = OJPEGPreEncode ;
EXPR	457:1	457:1	4	tif -> tif_preencode = OJPEGPreEncode
ASSIGN	457:1	457:20	5	tif -> tif_preencode = OJPEGPreEncode
LVAL	457:1	457:1	6	tif -> tif_preencode
FIELD	457:1	457:6	7	tif -> tif_preencode
LEAF_NODE	457:1	457:1	8	tif
LEAF_NODE	457:4	457:4	8	->
LEAF_NODE	457:6	457:6	8	tif_preencode
ASSIGN_OP	457:19	457:19	6	=
LEAF_NODE	457:19	457:19	7	=
RVAL	457:20	457:20	6	OJPEGPreEncode
FIELD	457:20	457:20	7	OJPEGPreEncode
LEAF_NODE	457:20	457:20	8	OJPEGPreEncode
LEAF_NODE	457:34	457:34	4	;
EXPR_STATEMENT	458:1	458:36	3	tif -> tif_postencode = OJPEGPostEncode ;
EXPR	458:1	458:1	4	tif -> tif_postencode = OJPEGPostEncode
ASSIGN	458:1	458:21	5	tif -> tif_postencode = OJPEGPostEncode
LVAL	458:1	458:1	6	tif -> tif_postencode
FIELD	458:1	458:6	7	tif -> tif_postencode
LEAF_NODE	458:1	458:1	8	tif
LEAF_NODE	458:4	458:4	8	->
LEAF_NODE	458:6	458:6	8	tif_postencode
ASSIGN_OP	458:20	458:20	6	=
LEAF_NODE	458:20	458:20	7	=
RVAL	458:21	458:21	6	OJPEGPostEncode
FIELD	458:21	458:21	7	OJPEGPostEncode
LEAF_NODE	458:21	458:21	8	OJPEGPostEncode
LEAF_NODE	458:36	458:36	4	;
EXPR_STATEMENT	459:1	459:31	3	tif -> tif_encoderow = OJPEGEncode ;
EXPR	459:1	459:1	4	tif -> tif_encoderow = OJPEGEncode
ASSIGN	459:1	459:20	5	tif -> tif_encoderow = OJPEGEncode
LVAL	459:1	459:1	6	tif -> tif_encoderow
FIELD	459:1	459:6	7	tif -> tif_encoderow
LEAF_NODE	459:1	459:1	8	tif
LEAF_NODE	459:4	459:4	8	->
LEAF_NODE	459:6	459:6	8	tif_encoderow
ASSIGN_OP	459:19	459:19	6	=
LEAF_NODE	459:19	459:19	7	=
RVAL	459:20	459:20	6	OJPEGEncode
FIELD	459:20	459:20	7	OJPEGEncode
LEAF_NODE	459:20	459:20	8	OJPEGEncode
LEAF_NODE	459:31	459:31	4	;
EXPR_STATEMENT	460:1	460:33	3	tif -> tif_encodestrip = OJPEGEncode ;
EXPR	460:1	460:1	4	tif -> tif_encodestrip = OJPEGEncode
ASSIGN	460:1	460:22	5	tif -> tif_encodestrip = OJPEGEncode
LVAL	460:1	460:1	6	tif -> tif_encodestrip
FIELD	460:1	460:6	7	tif -> tif_encodestrip
LEAF_NODE	460:1	460:1	8	tif
LEAF_NODE	460:4	460:4	8	->
LEAF_NODE	460:6	460:6	8	tif_encodestrip
ASSIGN_OP	460:21	460:21	6	=
LEAF_NODE	460:21	460:21	7	=
RVAL	460:22	460:22	6	OJPEGEncode
FIELD	460:22	460:22	7	OJPEGEncode
LEAF_NODE	460:22	460:22	8	OJPEGEncode
LEAF_NODE	460:33	460:33	4	;
EXPR_STATEMENT	461:1	461:32	3	tif -> tif_encodetile = OJPEGEncode ;
EXPR	461:1	461:1	4	tif -> tif_encodetile = OJPEGEncode
ASSIGN	461:1	461:21	5	tif -> tif_encodetile = OJPEGEncode
LVAL	461:1	461:1	6	tif -> tif_encodetile
FIELD	461:1	461:6	7	tif -> tif_encodetile
LEAF_NODE	461:1	461:1	8	tif
LEAF_NODE	461:4	461:4	8	->
LEAF_NODE	461:6	461:6	8	tif_encodetile
ASSIGN_OP	461:20	461:20	6	=
LEAF_NODE	461:20	461:20	7	=
RVAL	461:21	461:21	6	OJPEGEncode
FIELD	461:21	461:21	7	OJPEGEncode
LEAF_NODE	461:21	461:21	8	OJPEGEncode
LEAF_NODE	461:32	461:32	4	;
EXPR_STATEMENT	462:1	462:30	3	tif -> tif_cleanup = OJPEGCleanup ;
EXPR	462:1	462:1	4	tif -> tif_cleanup = OJPEGCleanup
ASSIGN	462:1	462:18	5	tif -> tif_cleanup = OJPEGCleanup
LVAL	462:1	462:1	6	tif -> tif_cleanup
FIELD	462:1	462:6	7	tif -> tif_cleanup
LEAF_NODE	462:1	462:1	8	tif
LEAF_NODE	462:4	462:4	8	->
LEAF_NODE	462:6	462:6	8	tif_cleanup
ASSIGN_OP	462:17	462:17	6	=
LEAF_NODE	462:17	462:17	7	=
RVAL	462:18	462:18	6	OJPEGCleanup
FIELD	462:18	462:18	7	OJPEGCleanup
LEAF_NODE	462:18	462:18	8	OJPEGCleanup
LEAF_NODE	462:30	462:30	4	;
EXPR_STATEMENT	463:1	463:25	3	tif -> tif_data = ( uint8 * ) sp ;
EXPR	463:1	463:1	4	tif -> tif_data = ( uint8 * ) sp
ASSIGN	463:1	463:15	5	tif -> tif_data = ( uint8 * ) sp
LVAL	463:1	463:1	6	tif -> tif_data
FIELD	463:1	463:6	7	tif -> tif_data
LEAF_NODE	463:1	463:1	8	tif
LEAF_NODE	463:4	463:4	8	->
LEAF_NODE	463:6	463:6	8	tif_data
ASSIGN_OP	463:14	463:14	6	=
LEAF_NODE	463:14	463:14	7	=
RVAL	463:15	463:23	6	( uint8 * ) sp
LEAF_NODE	463:15	463:15	7	(
TYPE_NAME	463:16	463:16	7	uint8
LEAF_NODE	463:16	463:16	8	uint8
LEAF_NODE	463:21	463:21	7	*
LEAF_NODE	463:22	463:22	7	)
FIELD	463:23	463:23	7	sp
LEAF_NODE	463:23	463:23	8	sp
LEAF_NODE	463:25	463:25	4	;
EXPR_STATEMENT	465:1	465:45	3	sp -> vgetparent = tif -> tif_tagmethods . vgetfield ;
EXPR	465:1	465:1	4	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
ASSIGN	465:1	465:16	5	sp -> vgetparent = tif -> tif_tagmethods . vgetfield
LVAL	465:1	465:1	6	sp -> vgetparent
FIELD	465:1	465:5	7	sp -> vgetparent
LEAF_NODE	465:1	465:1	8	sp
LEAF_NODE	465:3	465:3	8	->
LEAF_NODE	465:5	465:5	8	vgetparent
ASSIGN_OP	465:15	465:15	6	=
LEAF_NODE	465:15	465:15	7	=
RVAL	465:16	465:16	6	tif -> tif_tagmethods . vgetfield
FIELD	465:16	465:36	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	465:16	465:16	8	tif
LEAF_NODE	465:19	465:19	8	->
LEAF_NODE	465:21	465:21	8	tif_tagmethods
LEAF_NODE	465:35	465:35	8	.
LEAF_NODE	465:36	465:36	8	vgetfield
LEAF_NODE	465:45	465:45	4	;
EXPR_STATEMENT	466:1	466:45	3	tif -> tif_tagmethods . vgetfield = OJPEGVGetField ;
EXPR	466:1	466:1	4	tif -> tif_tagmethods . vgetfield = OJPEGVGetField
ASSIGN	466:1	466:31	5	tif -> tif_tagmethods . vgetfield = OJPEGVGetField
LVAL	466:1	466:1	6	tif -> tif_tagmethods . vgetfield
FIELD	466:1	466:21	7	tif -> tif_tagmethods . vgetfield
LEAF_NODE	466:1	466:1	8	tif
LEAF_NODE	466:4	466:4	8	->
LEAF_NODE	466:6	466:6	8	tif_tagmethods
LEAF_NODE	466:20	466:20	8	.
LEAF_NODE	466:21	466:21	8	vgetfield
ASSIGN_OP	466:30	466:30	6	=
LEAF_NODE	466:30	466:30	7	=
RVAL	466:31	466:31	6	OJPEGVGetField
FIELD	466:31	466:31	7	OJPEGVGetField
LEAF_NODE	466:31	466:31	8	OJPEGVGetField
LEAF_NODE	466:45	466:45	4	;
EXPR_STATEMENT	467:1	467:45	3	sp -> vsetparent = tif -> tif_tagmethods . vsetfield ;
EXPR	467:1	467:1	4	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
ASSIGN	467:1	467:16	5	sp -> vsetparent = tif -> tif_tagmethods . vsetfield
LVAL	467:1	467:1	6	sp -> vsetparent
FIELD	467:1	467:5	7	sp -> vsetparent
LEAF_NODE	467:1	467:1	8	sp
LEAF_NODE	467:3	467:3	8	->
LEAF_NODE	467:5	467:5	8	vsetparent
ASSIGN_OP	467:15	467:15	6	=
LEAF_NODE	467:15	467:15	7	=
RVAL	467:16	467:16	6	tif -> tif_tagmethods . vsetfield
FIELD	467:16	467:36	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	467:16	467:16	8	tif
LEAF_NODE	467:19	467:19	8	->
LEAF_NODE	467:21	467:21	8	tif_tagmethods
LEAF_NODE	467:35	467:35	8	.
LEAF_NODE	467:36	467:36	8	vsetfield
LEAF_NODE	467:45	467:45	4	;
EXPR_STATEMENT	468:1	468:45	3	tif -> tif_tagmethods . vsetfield = OJPEGVSetField ;
EXPR	468:1	468:1	4	tif -> tif_tagmethods . vsetfield = OJPEGVSetField
ASSIGN	468:1	468:31	5	tif -> tif_tagmethods . vsetfield = OJPEGVSetField
LVAL	468:1	468:1	6	tif -> tif_tagmethods . vsetfield
FIELD	468:1	468:21	7	tif -> tif_tagmethods . vsetfield
LEAF_NODE	468:1	468:1	8	tif
LEAF_NODE	468:4	468:4	8	->
LEAF_NODE	468:6	468:6	8	tif_tagmethods
LEAF_NODE	468:20	468:20	8	.
LEAF_NODE	468:21	468:21	8	vsetfield
ASSIGN_OP	468:30	468:30	6	=
LEAF_NODE	468:30	468:30	7	=
RVAL	468:31	468:31	6	OJPEGVSetField
FIELD	468:31	468:31	7	OJPEGVSetField
LEAF_NODE	468:31	468:31	8	OJPEGVSetField
LEAF_NODE	468:45	468:45	4	;
EXPR_STATEMENT	469:1	469:42	3	sp -> printdir = tif -> tif_tagmethods . printdir ;
EXPR	469:1	469:1	4	sp -> printdir = tif -> tif_tagmethods . printdir
ASSIGN	469:1	469:14	5	sp -> printdir = tif -> tif_tagmethods . printdir
LVAL	469:1	469:1	6	sp -> printdir
FIELD	469:1	469:5	7	sp -> printdir
LEAF_NODE	469:1	469:1	8	sp
LEAF_NODE	469:3	469:3	8	->
LEAF_NODE	469:5	469:5	8	printdir
ASSIGN_OP	469:13	469:13	6	=
LEAF_NODE	469:13	469:13	7	=
RVAL	469:14	469:14	6	tif -> tif_tagmethods . printdir
FIELD	469:14	469:34	7	tif -> tif_tagmethods . printdir
LEAF_NODE	469:14	469:14	8	tif
LEAF_NODE	469:17	469:17	8	->
LEAF_NODE	469:19	469:19	8	tif_tagmethods
LEAF_NODE	469:33	469:33	8	.
LEAF_NODE	469:34	469:34	8	printdir
LEAF_NODE	469:42	469:42	4	;
EXPR_STATEMENT	470:1	470:43	3	tif -> tif_tagmethods . printdir = OJPEGPrintDir ;
EXPR	470:1	470:1	4	tif -> tif_tagmethods . printdir = OJPEGPrintDir
ASSIGN	470:1	470:30	5	tif -> tif_tagmethods . printdir = OJPEGPrintDir
LVAL	470:1	470:1	6	tif -> tif_tagmethods . printdir
FIELD	470:1	470:21	7	tif -> tif_tagmethods . printdir
LEAF_NODE	470:1	470:1	8	tif
LEAF_NODE	470:4	470:4	8	->
LEAF_NODE	470:6	470:6	8	tif_tagmethods
LEAF_NODE	470:20	470:20	8	.
LEAF_NODE	470:21	470:21	8	printdir
ASSIGN_OP	470:29	470:29	6	=
LEAF_NODE	470:29	470:29	7	=
RVAL	470:30	470:30	6	OJPEGPrintDir
FIELD	470:30	470:30	7	OJPEGPrintDir
LEAF_NODE	470:30	470:30	8	OJPEGPrintDir
LEAF_NODE	470:43	470:43	4	;
EXPR_STATEMENT	477:1	477:31	3	tif -> tif_flags |= TIFF_NOREADRAW ;
EXPR	477:1	477:1	4	tif -> tif_flags |= TIFF_NOREADRAW
ASSIGN	477:1	477:17	5	tif -> tif_flags |= TIFF_NOREADRAW
LVAL	477:1	477:1	6	tif -> tif_flags
FIELD	477:1	477:6	7	tif -> tif_flags
LEAF_NODE	477:1	477:1	8	tif
LEAF_NODE	477:4	477:4	8	->
LEAF_NODE	477:6	477:6	8	tif_flags
ASSIGN_OP	477:15	477:15	6	|=
LEAF_NODE	477:15	477:15	7	|=
RVAL	477:17	477:17	6	TIFF_NOREADRAW
FIELD	477:17	477:17	7	TIFF_NOREADRAW
LEAF_NODE	477:17	477:17	8	TIFF_NOREADRAW
LEAF_NODE	477:31	477:31	4	;
JUMP_STATEMENT	478:1	478:10	3	return ( 1 ) ;
KEYWORD	478:1	478:1	4	return
LEAF_NODE	478:1	478:1	5	return
DESTINATION	478:7	478:7	4	( 1 )
EXPR	478:7	478:9	5	( 1 )
LEAF_NODE	478:7	478:7	6	(
FIELD	478:8	478:8	6	1
LEAF_NODE	478:8	478:8	7	1
LEAF_NODE	478:9	478:9	6	)
LEAF_NODE	478:10	478:10	4	;
LEAF_NODE	479:0	479:0	2	}
FUNCTION_DEF	481:0	521:0	1	
RETURN_TYPE	481:0	481:7	2	static int
LEAF_NODE	481:0	481:0	3	static
TYPE_NAME	481:7	481:7	3	int
LEAF_NODE	481:7	481:7	4	int
FUNCTION_NAME	482:0	482:0	2	OJPEGVGetField
LEAF_NODE	482:0	482:0	3	OJPEGVGetField
PARAMETER_LIST	482:14	482:48	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	482:14	482:14	3	(
PARAMETER_DECL	482:15	482:21	3	TIFF * tif
TYPE	482:15	482:19	4	TIFF *
TYPE_NAME	482:15	482:15	5	TIFF
LEAF_NODE	482:15	482:15	6	TIFF
POINTER	482:19	482:19	5	*
LEAF_NODE	482:19	482:19	6	*
NAME	482:21	482:21	4	tif
LEAF_NODE	482:21	482:21	5	tif
LEAF_NODE	482:24	482:24	3	,
PARAMETER_DECL	482:26	482:33	3	uint32 tag
TYPE	482:26	482:26	4	uint32
TYPE_NAME	482:26	482:26	5	uint32
LEAF_NODE	482:26	482:26	6	uint32
NAME	482:33	482:33	4	tag
LEAF_NODE	482:33	482:33	5	tag
LEAF_NODE	482:36	482:36	3	,
PARAMETER_DECL	482:38	482:46	3	va_list ap
TYPE	482:38	482:38	4	va_list
TYPE_NAME	482:38	482:38	5	va_list
LEAF_NODE	482:38	482:38	6	va_list
NAME	482:46	482:46	4	ap
LEAF_NODE	482:46	482:46	5	ap
LEAF_NODE	482:48	482:48	3	)
LEAF_NODE	483:0	483:0	2	{
STATEMENTS	484:1	520:1	2	
SIMPLE_DECL	484:1	484:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	484:1	484:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	484:1	484:11	5	OJPEGState *
TYPE_NAME	484:1	484:1	6	OJPEGState
LEAF_NODE	484:1	484:1	7	OJPEGState
POINTER	484:11	484:11	6	*
LEAF_NODE	484:11	484:11	7	*
NAME	484:13	484:13	5	sp
LEAF_NODE	484:13	484:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	484:13	484:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	484:13	484:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	484:13	484:13	7	sp
NAME	484:13	484:13	8	sp
LEAF_NODE	484:13	484:13	9	sp
ASSIGN_OP	484:15	484:15	7	=
LEAF_NODE	484:15	484:15	8	=
RVAL	484:16	484:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	484:16	484:16	8	(
TYPE_NAME	484:17	484:17	8	OJPEGState
LEAF_NODE	484:17	484:17	9	OJPEGState
LEAF_NODE	484:27	484:27	8	*
LEAF_NODE	484:28	484:28	8	)
FIELD	484:29	484:34	8	tif -> tif_data
LEAF_NODE	484:29	484:29	9	tif
LEAF_NODE	484:32	484:32	9	->
LEAF_NODE	484:34	484:34	9	tif_data
LEAF_NODE	484:42	484:42	4	;
SELECTION	485:1	486:1	3	
KEYWORD	485:1	485:1	4	switch
LEAF_NODE	485:1	485:1	5	switch
LEAF_NODE	485:7	485:7	4	(
CONDITION	485:8	485:8	4	tag
EXPR	485:8	485:8	5	tag
FIELD	485:8	485:8	6	tag
LEAF_NODE	485:8	485:8	7	tag
LEAF_NODE	485:11	485:11	4	)
STATEMENTS	486:1	519:1	4	
LEAF_NODE	486:1	486:1	5	{
STATEMENTS	487:2	518:3	5	
LABEL	487:2	487:27	6	case TIFFTAG_JPEGIFOFFSET :
LEAF_NODE	487:2	487:2	7	case
LEAF_NODE	487:7	487:7	7	TIFFTAG_JPEGIFOFFSET
LEAF_NODE	487:27	487:27	7	:
LEAF_NODE	488:3	488:3	6	*
LEAF_NODE	488:4	488:4	6	va_arg
LEAF_NODE	488:10	488:10	6	(
LEAF_NODE	488:11	488:11	6	ap
LEAF_NODE	488:13	488:13	6	,
LEAF_NODE	488:14	488:14	6	uint64
LEAF_NODE	488:20	488:20	6	*
LEAF_NODE	488:21	488:21	6	)
LEAF_NODE	488:22	488:22	6	=
EXPR_STATEMENT	488:23	488:58	6	( uint64 ) sp -> jpeg_interchange_format ;
EXPR	488:23	488:31	7	( uint64 ) sp -> jpeg_interchange_format
LEAF_NODE	488:23	488:23	8	(
TYPE_NAME	488:24	488:24	8	uint64
LEAF_NODE	488:24	488:24	9	uint64
LEAF_NODE	488:30	488:30	8	)
FIELD	488:31	488:35	8	sp -> jpeg_interchange_format
LEAF_NODE	488:31	488:31	9	sp
LEAF_NODE	488:33	488:33	9	->
LEAF_NODE	488:35	488:35	9	jpeg_interchange_format
LEAF_NODE	488:58	488:58	7	;
JUMP_STATEMENT	489:3	489:8	6	break DESTINATION ;
KEYWORD	489:3	489:3	7	break
LEAF_NODE	489:3	489:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	489:8	489:8	7	;
LABEL	490:2	490:30	6	case TIFFTAG_JPEGIFBYTECOUNT :
LEAF_NODE	490:2	490:2	7	case
LEAF_NODE	490:7	490:7	7	TIFFTAG_JPEGIFBYTECOUNT
LEAF_NODE	490:30	490:30	7	:
LEAF_NODE	491:3	491:3	6	*
LEAF_NODE	491:4	491:4	6	va_arg
LEAF_NODE	491:10	491:10	6	(
LEAF_NODE	491:11	491:11	6	ap
LEAF_NODE	491:13	491:13	6	,
LEAF_NODE	491:14	491:14	6	uint64
LEAF_NODE	491:20	491:20	6	*
LEAF_NODE	491:21	491:21	6	)
LEAF_NODE	491:22	491:22	6	=
EXPR_STATEMENT	491:23	491:65	6	( uint64 ) sp -> jpeg_interchange_format_length ;
EXPR	491:23	491:31	7	( uint64 ) sp -> jpeg_interchange_format_length
LEAF_NODE	491:23	491:23	8	(
TYPE_NAME	491:24	491:24	8	uint64
LEAF_NODE	491:24	491:24	9	uint64
LEAF_NODE	491:30	491:30	8	)
FIELD	491:31	491:35	8	sp -> jpeg_interchange_format_length
LEAF_NODE	491:31	491:31	9	sp
LEAF_NODE	491:33	491:33	9	->
LEAF_NODE	491:35	491:35	9	jpeg_interchange_format_length
LEAF_NODE	491:65	491:65	7	;
JUMP_STATEMENT	492:3	492:8	6	break DESTINATION ;
KEYWORD	492:3	492:3	7	break
LEAF_NODE	492:3	492:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	492:8	492:8	7	;
LABEL	493:2	493:31	6	case TIFFTAG_YCBCRSUBSAMPLING :
LEAF_NODE	493:2	493:2	7	case
LEAF_NODE	493:7	493:7	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	493:31	493:31	7	:
SELECTION	494:3	495:4	6	
KEYWORD	494:3	494:3	7	if
LEAF_NODE	494:3	494:3	8	if
LEAF_NODE	494:6	494:6	7	(
CONDITION	494:7	494:7	7	sp -> subsamplingcorrect_done == 0
EXPR	494:7	494:36	8	sp -> subsamplingcorrect_done == 0
FIELD	494:7	494:11	9	sp -> subsamplingcorrect_done
LEAF_NODE	494:7	494:7	10	sp
LEAF_NODE	494:9	494:9	10	->
LEAF_NODE	494:11	494:11	10	subsamplingcorrect_done
EQ_OPERATOR	494:34	494:34	9	==
LEAF_NODE	494:34	494:34	10	==
FIELD	494:36	494:36	9	0
LEAF_NODE	494:36	494:36	10	0
LEAF_NODE	494:37	494:37	7	)
STATEMENTS	495:4	495:4	7	
EXPR_STATEMENT	495:4	495:32	8	OJPEGSubsamplingCorrect ( tif ) ;
EXPR	495:4	495:4	9	OJPEGSubsamplingCorrect ( tif )
FUNCTION_CALL	495:4	495:31	10	OJPEGSubsamplingCorrect ( tif )
CALLEE	495:4	495:4	11	OJPEGSubsamplingCorrect
LEAF_NODE	495:4	495:4	12	OJPEGSubsamplingCorrect
LEAF_NODE	495:27	495:27	11	(
ARGUMENT	495:28	495:28	11	tif
FIELD	495:28	495:28	12	tif
LEAF_NODE	495:28	495:28	13	tif
LEAF_NODE	495:31	495:31	11	)
LEAF_NODE	495:32	495:32	9	;
LEAF_NODE	496:3	496:3	6	*
LEAF_NODE	496:4	496:4	6	va_arg
LEAF_NODE	496:10	496:10	6	(
LEAF_NODE	496:11	496:11	6	ap
LEAF_NODE	496:13	496:13	6	,
LEAF_NODE	496:14	496:14	6	uint16
LEAF_NODE	496:20	496:20	6	*
LEAF_NODE	496:21	496:21	6	)
LEAF_NODE	496:22	496:22	6	=
EXPR_STATEMENT	496:23	496:50	6	( uint16 ) sp -> subsampling_hor ;
EXPR	496:23	496:31	7	( uint16 ) sp -> subsampling_hor
LEAF_NODE	496:23	496:23	8	(
TYPE_NAME	496:24	496:24	8	uint16
LEAF_NODE	496:24	496:24	9	uint16
LEAF_NODE	496:30	496:30	8	)
FIELD	496:31	496:35	8	sp -> subsampling_hor
LEAF_NODE	496:31	496:31	9	sp
LEAF_NODE	496:33	496:33	9	->
LEAF_NODE	496:35	496:35	9	subsampling_hor
LEAF_NODE	496:50	496:50	7	;
LEAF_NODE	497:3	497:3	6	*
LEAF_NODE	497:4	497:4	6	va_arg
LEAF_NODE	497:10	497:10	6	(
LEAF_NODE	497:11	497:11	6	ap
LEAF_NODE	497:13	497:13	6	,
LEAF_NODE	497:14	497:14	6	uint16
LEAF_NODE	497:20	497:20	6	*
LEAF_NODE	497:21	497:21	6	)
LEAF_NODE	497:22	497:22	6	=
EXPR_STATEMENT	497:23	497:50	6	( uint16 ) sp -> subsampling_ver ;
EXPR	497:23	497:31	7	( uint16 ) sp -> subsampling_ver
LEAF_NODE	497:23	497:23	8	(
TYPE_NAME	497:24	497:24	8	uint16
LEAF_NODE	497:24	497:24	9	uint16
LEAF_NODE	497:30	497:30	8	)
FIELD	497:31	497:35	8	sp -> subsampling_ver
LEAF_NODE	497:31	497:31	9	sp
LEAF_NODE	497:33	497:33	9	->
LEAF_NODE	497:35	497:35	9	subsampling_ver
LEAF_NODE	497:50	497:50	7	;
JUMP_STATEMENT	498:3	498:8	6	break DESTINATION ;
KEYWORD	498:3	498:3	7	break
LEAF_NODE	498:3	498:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	498:8	498:8	7	;
LABEL	499:2	499:26	6	case TIFFTAG_JPEGQTABLES :
LEAF_NODE	499:2	499:2	7	case
LEAF_NODE	499:7	499:7	7	TIFFTAG_JPEGQTABLES
LEAF_NODE	499:26	499:26	7	:
LEAF_NODE	500:3	500:3	6	*
LEAF_NODE	500:4	500:4	6	va_arg
LEAF_NODE	500:10	500:10	6	(
LEAF_NODE	500:11	500:11	6	ap
LEAF_NODE	500:13	500:13	6	,
LEAF_NODE	500:14	500:14	6	uint32
LEAF_NODE	500:20	500:20	6	*
LEAF_NODE	500:21	500:21	6	)
LEAF_NODE	500:22	500:22	6	=
EXPR_STATEMENT	500:23	500:54	6	( uint32 ) sp -> qtable_offset_count ;
EXPR	500:23	500:31	7	( uint32 ) sp -> qtable_offset_count
LEAF_NODE	500:23	500:23	8	(
TYPE_NAME	500:24	500:24	8	uint32
LEAF_NODE	500:24	500:24	9	uint32
LEAF_NODE	500:30	500:30	8	)
FIELD	500:31	500:35	8	sp -> qtable_offset_count
LEAF_NODE	500:31	500:31	9	sp
LEAF_NODE	500:33	500:33	9	->
LEAF_NODE	500:35	500:35	9	qtable_offset_count
LEAF_NODE	500:54	500:54	7	;
LEAF_NODE	501:3	501:3	6	*
LEAF_NODE	501:4	501:4	6	va_arg
LEAF_NODE	501:10	501:10	6	(
LEAF_NODE	501:11	501:11	6	ap
LEAF_NODE	501:13	501:13	6	,
LEAF_NODE	501:14	501:14	6	void
LEAF_NODE	501:18	501:18	6	*
LEAF_NODE	501:19	501:19	6	*
LEAF_NODE	501:20	501:20	6	)
LEAF_NODE	501:21	501:21	6	=
EXPR_STATEMENT	501:22	501:46	6	( void * ) sp -> qtable_offset ;
EXPR	501:22	501:29	7	( void * ) sp -> qtable_offset
LEAF_NODE	501:22	501:22	8	(
TYPE_NAME	501:23	501:23	8	void
LEAF_NODE	501:23	501:23	9	void
LEAF_NODE	501:27	501:27	8	*
LEAF_NODE	501:28	501:28	8	)
FIELD	501:29	501:33	8	sp -> qtable_offset
LEAF_NODE	501:29	501:29	9	sp
LEAF_NODE	501:31	501:31	9	->
LEAF_NODE	501:33	501:33	9	qtable_offset
LEAF_NODE	501:46	501:46	7	;
JUMP_STATEMENT	502:3	502:8	6	break DESTINATION ;
KEYWORD	502:3	502:3	7	break
LEAF_NODE	502:3	502:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	502:8	502:8	7	;
LABEL	503:2	503:27	6	case TIFFTAG_JPEGDCTABLES :
LEAF_NODE	503:2	503:2	7	case
LEAF_NODE	503:7	503:7	7	TIFFTAG_JPEGDCTABLES
LEAF_NODE	503:27	503:27	7	:
LEAF_NODE	504:3	504:3	6	*
LEAF_NODE	504:4	504:4	6	va_arg
LEAF_NODE	504:10	504:10	6	(
LEAF_NODE	504:11	504:11	6	ap
LEAF_NODE	504:13	504:13	6	,
LEAF_NODE	504:14	504:14	6	uint32
LEAF_NODE	504:20	504:20	6	*
LEAF_NODE	504:21	504:21	6	)
LEAF_NODE	504:22	504:22	6	=
EXPR_STATEMENT	504:23	504:55	6	( uint32 ) sp -> dctable_offset_count ;
EXPR	504:23	504:31	7	( uint32 ) sp -> dctable_offset_count
LEAF_NODE	504:23	504:23	8	(
TYPE_NAME	504:24	504:24	8	uint32
LEAF_NODE	504:24	504:24	9	uint32
LEAF_NODE	504:30	504:30	8	)
FIELD	504:31	504:35	8	sp -> dctable_offset_count
LEAF_NODE	504:31	504:31	9	sp
LEAF_NODE	504:33	504:33	9	->
LEAF_NODE	504:35	504:35	9	dctable_offset_count
LEAF_NODE	504:55	504:55	7	;
LEAF_NODE	505:3	505:3	6	*
LEAF_NODE	505:4	505:4	6	va_arg
LEAF_NODE	505:10	505:10	6	(
LEAF_NODE	505:11	505:11	6	ap
LEAF_NODE	505:13	505:13	6	,
LEAF_NODE	505:14	505:14	6	void
LEAF_NODE	505:18	505:18	6	*
LEAF_NODE	505:19	505:19	6	*
LEAF_NODE	505:20	505:20	6	)
LEAF_NODE	505:21	505:21	6	=
EXPR_STATEMENT	505:22	505:47	6	( void * ) sp -> dctable_offset ;
EXPR	505:22	505:29	7	( void * ) sp -> dctable_offset
LEAF_NODE	505:22	505:22	8	(
TYPE_NAME	505:23	505:23	8	void
LEAF_NODE	505:23	505:23	9	void
LEAF_NODE	505:27	505:27	8	*
LEAF_NODE	505:28	505:28	8	)
FIELD	505:29	505:33	8	sp -> dctable_offset
LEAF_NODE	505:29	505:29	9	sp
LEAF_NODE	505:31	505:31	9	->
LEAF_NODE	505:33	505:33	9	dctable_offset
LEAF_NODE	505:47	505:47	7	;
JUMP_STATEMENT	506:3	506:8	6	break DESTINATION ;
KEYWORD	506:3	506:3	7	break
LEAF_NODE	506:3	506:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	506:8	506:8	7	;
LABEL	507:2	507:27	6	case TIFFTAG_JPEGACTABLES :
LEAF_NODE	507:2	507:2	7	case
LEAF_NODE	507:7	507:7	7	TIFFTAG_JPEGACTABLES
LEAF_NODE	507:27	507:27	7	:
LEAF_NODE	508:3	508:3	6	*
LEAF_NODE	508:4	508:4	6	va_arg
LEAF_NODE	508:10	508:10	6	(
LEAF_NODE	508:11	508:11	6	ap
LEAF_NODE	508:13	508:13	6	,
LEAF_NODE	508:14	508:14	6	uint32
LEAF_NODE	508:20	508:20	6	*
LEAF_NODE	508:21	508:21	6	)
LEAF_NODE	508:22	508:22	6	=
EXPR_STATEMENT	508:23	508:55	6	( uint32 ) sp -> actable_offset_count ;
EXPR	508:23	508:31	7	( uint32 ) sp -> actable_offset_count
LEAF_NODE	508:23	508:23	8	(
TYPE_NAME	508:24	508:24	8	uint32
LEAF_NODE	508:24	508:24	9	uint32
LEAF_NODE	508:30	508:30	8	)
FIELD	508:31	508:35	8	sp -> actable_offset_count
LEAF_NODE	508:31	508:31	9	sp
LEAF_NODE	508:33	508:33	9	->
LEAF_NODE	508:35	508:35	9	actable_offset_count
LEAF_NODE	508:55	508:55	7	;
LEAF_NODE	509:3	509:3	6	*
LEAF_NODE	509:4	509:4	6	va_arg
LEAF_NODE	509:10	509:10	6	(
LEAF_NODE	509:11	509:11	6	ap
LEAF_NODE	509:13	509:13	6	,
LEAF_NODE	509:14	509:14	6	void
LEAF_NODE	509:18	509:18	6	*
LEAF_NODE	509:19	509:19	6	*
LEAF_NODE	509:20	509:20	6	)
LEAF_NODE	509:21	509:21	6	=
EXPR_STATEMENT	509:22	509:47	6	( void * ) sp -> actable_offset ;
EXPR	509:22	509:29	7	( void * ) sp -> actable_offset
LEAF_NODE	509:22	509:22	8	(
TYPE_NAME	509:23	509:23	8	void
LEAF_NODE	509:23	509:23	9	void
LEAF_NODE	509:27	509:27	8	*
LEAF_NODE	509:28	509:28	8	)
FIELD	509:29	509:33	8	sp -> actable_offset
LEAF_NODE	509:29	509:29	9	sp
LEAF_NODE	509:31	509:31	9	->
LEAF_NODE	509:33	509:33	9	actable_offset
LEAF_NODE	509:47	509:47	7	;
JUMP_STATEMENT	510:3	510:8	6	break DESTINATION ;
KEYWORD	510:3	510:3	7	break
LEAF_NODE	510:3	510:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	510:8	510:8	7	;
LABEL	511:2	511:23	6	case TIFFTAG_JPEGPROC :
LEAF_NODE	511:2	511:2	7	case
LEAF_NODE	511:7	511:7	7	TIFFTAG_JPEGPROC
LEAF_NODE	511:23	511:23	7	:
LEAF_NODE	512:3	512:3	6	*
LEAF_NODE	512:4	512:4	6	va_arg
LEAF_NODE	512:10	512:10	6	(
LEAF_NODE	512:11	512:11	6	ap
LEAF_NODE	512:13	512:13	6	,
LEAF_NODE	512:14	512:14	6	uint16
LEAF_NODE	512:20	512:20	6	*
LEAF_NODE	512:21	512:21	6	)
LEAF_NODE	512:22	512:22	6	=
EXPR_STATEMENT	512:23	512:44	6	( uint16 ) sp -> jpeg_proc ;
EXPR	512:23	512:31	7	( uint16 ) sp -> jpeg_proc
LEAF_NODE	512:23	512:23	8	(
TYPE_NAME	512:24	512:24	8	uint16
LEAF_NODE	512:24	512:24	9	uint16
LEAF_NODE	512:30	512:30	8	)
FIELD	512:31	512:35	8	sp -> jpeg_proc
LEAF_NODE	512:31	512:31	9	sp
LEAF_NODE	512:33	512:33	9	->
LEAF_NODE	512:35	512:35	9	jpeg_proc
LEAF_NODE	512:44	512:44	7	;
JUMP_STATEMENT	513:3	513:8	6	break DESTINATION ;
KEYWORD	513:3	513:3	7	break
LEAF_NODE	513:3	513:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	513:8	513:8	7	;
LABEL	514:2	514:34	6	case TIFFTAG_JPEGRESTARTINTERVAL :
LEAF_NODE	514:2	514:2	7	case
LEAF_NODE	514:7	514:7	7	TIFFTAG_JPEGRESTARTINTERVAL
LEAF_NODE	514:34	514:34	7	:
LEAF_NODE	515:3	515:3	6	*
LEAF_NODE	515:4	515:4	6	va_arg
LEAF_NODE	515:10	515:10	6	(
LEAF_NODE	515:11	515:11	6	ap
LEAF_NODE	515:13	515:13	6	,
LEAF_NODE	515:14	515:14	6	uint16
LEAF_NODE	515:20	515:20	6	*
LEAF_NODE	515:21	515:21	6	)
LEAF_NODE	515:22	515:22	6	=
EXPR_STATEMENT	515:23	515:43	6	sp -> restart_interval ;
EXPR	515:23	515:23	7	sp -> restart_interval
FIELD	515:23	515:27	8	sp -> restart_interval
LEAF_NODE	515:23	515:23	9	sp
LEAF_NODE	515:25	515:25	9	->
LEAF_NODE	515:27	515:27	9	restart_interval
LEAF_NODE	515:43	515:43	7	;
JUMP_STATEMENT	516:3	516:8	6	break DESTINATION ;
KEYWORD	516:3	516:3	7	break
LEAF_NODE	516:3	516:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	516:8	516:8	7	;
LABEL	517:2	517:9	6	default :
LEAF_NODE	517:2	517:2	7	default
LEAF_NODE	517:9	517:9	7	:
JUMP_STATEMENT	518:3	518:39	6	return ( * sp -> vgetparent ) ( tif , tag , ap ) ;
KEYWORD	518:3	518:3	7	return
LEAF_NODE	518:3	518:3	8	return
DESTINATION	518:10	518:10	7	( * sp -> vgetparent ) ( tif , tag , ap )
EXPR	518:10	518:10	8	( * sp -> vgetparent ) ( tif , tag , ap )
FUNCTION_CALL	518:10	518:38	9	( * sp -> vgetparent ) ( tif , tag , ap )
CALLEE	518:10	518:26	10	( * sp -> vgetparent )
LEAF_NODE	518:10	518:10	11	(
UNARY_EXPR	518:11	518:12	11	* sp -> vgetparent
UNARY_OPERATOR	518:11	518:11	12	*
LEAF_NODE	518:11	518:11	13	*
FIELD	518:12	518:16	12	sp -> vgetparent
LEAF_NODE	518:12	518:12	13	sp
LEAF_NODE	518:14	518:14	13	->
LEAF_NODE	518:16	518:16	13	vgetparent
LEAF_NODE	518:26	518:26	11	)
LEAF_NODE	518:27	518:27	10	(
ARGUMENT	518:28	518:28	10	tif
FIELD	518:28	518:28	11	tif
LEAF_NODE	518:28	518:28	12	tif
LEAF_NODE	518:31	518:31	10	,
ARGUMENT	518:32	518:32	10	tag
FIELD	518:32	518:32	11	tag
LEAF_NODE	518:32	518:32	12	tag
LEAF_NODE	518:35	518:35	10	,
ARGUMENT	518:36	518:36	10	ap
FIELD	518:36	518:36	11	ap
LEAF_NODE	518:36	518:36	12	ap
LEAF_NODE	518:38	518:38	10	)
LEAF_NODE	518:39	518:39	7	;
LEAF_NODE	519:1	519:1	5	}
JUMP_STATEMENT	520:1	520:11	3	return ( 1 ) ;
KEYWORD	520:1	520:1	4	return
LEAF_NODE	520:1	520:1	5	return
DESTINATION	520:8	520:8	4	( 1 )
EXPR	520:8	520:10	5	( 1 )
LEAF_NODE	520:8	520:8	6	(
FIELD	520:9	520:9	6	1
LEAF_NODE	520:9	520:9	7	1
LEAF_NODE	520:10	520:10	6	)
LEAF_NODE	520:11	520:11	4	;
LEAF_NODE	521:0	521:0	2	}
FUNCTION_DEF	523:0	608:0	1	
RETURN_TYPE	523:0	523:7	2	static int
LEAF_NODE	523:0	523:0	3	static
TYPE_NAME	523:7	523:7	3	int
LEAF_NODE	523:7	523:7	4	int
FUNCTION_NAME	524:0	524:0	2	OJPEGVSetField
LEAF_NODE	524:0	524:0	3	OJPEGVSetField
PARAMETER_LIST	524:14	524:48	2	( TIFF * tif , uint32 tag , va_list ap )
LEAF_NODE	524:14	524:14	3	(
PARAMETER_DECL	524:15	524:21	3	TIFF * tif
TYPE	524:15	524:19	4	TIFF *
TYPE_NAME	524:15	524:15	5	TIFF
LEAF_NODE	524:15	524:15	6	TIFF
POINTER	524:19	524:19	5	*
LEAF_NODE	524:19	524:19	6	*
NAME	524:21	524:21	4	tif
LEAF_NODE	524:21	524:21	5	tif
LEAF_NODE	524:24	524:24	3	,
PARAMETER_DECL	524:26	524:33	3	uint32 tag
TYPE	524:26	524:26	4	uint32
TYPE_NAME	524:26	524:26	5	uint32
LEAF_NODE	524:26	524:26	6	uint32
NAME	524:33	524:33	4	tag
LEAF_NODE	524:33	524:33	5	tag
LEAF_NODE	524:36	524:36	3	,
PARAMETER_DECL	524:38	524:46	3	va_list ap
TYPE	524:38	524:38	4	va_list
TYPE_NAME	524:38	524:38	5	va_list
LEAF_NODE	524:38	524:38	6	va_list
NAME	524:46	524:46	4	ap
LEAF_NODE	524:46	524:46	5	ap
LEAF_NODE	524:48	524:48	3	)
LEAF_NODE	525:0	525:0	2	{
STATEMENTS	526:1	607:1	2	
LEAF_NODE	526:1	526:1	3	static
SIMPLE_DECL	526:8	526:44	3	const char [ ] module ; module = "OJPEGVSetField" ;
VAR_DECL	526:8	526:19	4	const char [ ] module ; module = "OJPEGVSetField"
TYPE	526:8	526:25	5	const char [ ]
TYPE_NAME	526:8	526:14	6	const char
LEAF_NODE	526:8	526:8	7	const
LEAF_NODE	526:14	526:14	7	char
TYPE_SUFFIX	526:25	526:26	6	[ ]
LEAF_NODE	526:25	526:25	7	[
LEAF_NODE	526:26	526:26	7	]
NAME	526:19	526:19	5	module
LEAF_NODE	526:19	526:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	526:19	526:19	5	module = "OJPEGVSetField"
ASSIGN	526:19	526:28	6	module = "OJPEGVSetField"
LVAL	526:19	526:19	7	module
NAME	526:19	526:19	8	module
LEAF_NODE	526:19	526:19	9	module
ASSIGN_OP	526:27	526:27	7	=
LEAF_NODE	526:27	526:27	8	=
RVAL	526:28	526:28	7	"OJPEGVSetField"
FIELD	526:28	526:28	8	"OJPEGVSetField"
LEAF_NODE	526:28	526:28	9	"OJPEGVSetField"
LEAF_NODE	526:44	526:44	4	;
SIMPLE_DECL	527:1	527:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	527:1	527:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	527:1	527:11	5	OJPEGState *
TYPE_NAME	527:1	527:1	6	OJPEGState
LEAF_NODE	527:1	527:1	7	OJPEGState
POINTER	527:11	527:11	6	*
LEAF_NODE	527:11	527:11	7	*
NAME	527:13	527:13	5	sp
LEAF_NODE	527:13	527:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	527:13	527:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	527:13	527:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	527:13	527:13	7	sp
NAME	527:13	527:13	8	sp
LEAF_NODE	527:13	527:13	9	sp
ASSIGN_OP	527:15	527:15	7	=
LEAF_NODE	527:15	527:15	8	=
RVAL	527:16	527:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	527:16	527:16	8	(
TYPE_NAME	527:17	527:17	8	OJPEGState
LEAF_NODE	527:17	527:17	9	OJPEGState
LEAF_NODE	527:27	527:27	8	*
LEAF_NODE	527:28	527:28	8	)
FIELD	527:29	527:34	8	tif -> tif_data
LEAF_NODE	527:29	527:29	9	tif
LEAF_NODE	527:32	527:32	9	->
LEAF_NODE	527:34	527:34	9	tif_data
LEAF_NODE	527:42	527:42	4	;
SIMPLE_DECL	528:1	528:10	3	uint32 ma ;
VAR_DECL	528:1	528:8	4	uint32 ma
TYPE	528:1	528:1	5	uint32
TYPE_NAME	528:1	528:1	6	uint32
LEAF_NODE	528:1	528:1	7	uint32
NAME	528:8	528:8	5	ma
LEAF_NODE	528:8	528:8	6	ma
LEAF_NODE	528:10	528:10	4	;
SIMPLE_DECL	529:1	529:11	3	uint64 * mb ;
VAR_DECL	529:1	529:9	4	uint64 * mb
TYPE	529:1	529:7	5	uint64 *
TYPE_NAME	529:1	529:1	6	uint64
LEAF_NODE	529:1	529:1	7	uint64
POINTER	529:7	529:7	6	*
LEAF_NODE	529:7	529:7	7	*
NAME	529:9	529:9	5	mb
LEAF_NODE	529:9	529:9	6	mb
LEAF_NODE	529:11	529:11	4	;
SIMPLE_DECL	530:1	530:9	3	uint32 n ;
VAR_DECL	530:1	530:8	4	uint32 n
TYPE	530:1	530:1	5	uint32
TYPE_NAME	530:1	530:1	6	uint32
LEAF_NODE	530:1	530:1	7	uint32
NAME	530:8	530:8	5	n
LEAF_NODE	530:8	530:8	6	n
LEAF_NODE	530:9	530:9	4	;
SIMPLE_DECL	531:1	531:21	3	const TIFFField * fip ;
VAR_DECL	531:1	531:18	4	const TIFFField * fip
TYPE	531:1	531:16	5	const TIFFField *
TYPE_NAME	531:1	531:7	6	const TIFFField
LEAF_NODE	531:1	531:1	7	const
LEAF_NODE	531:7	531:7	7	TIFFField
POINTER	531:16	531:16	6	*
LEAF_NODE	531:16	531:16	7	*
NAME	531:18	531:18	5	fip
LEAF_NODE	531:18	531:18	6	fip
LEAF_NODE	531:21	531:21	4	;
SELECTION	533:1	534:1	3	
KEYWORD	533:1	533:1	4	switch
LEAF_NODE	533:1	533:1	5	switch
LEAF_NODE	533:7	533:7	4	(
CONDITION	533:8	533:8	4	tag
EXPR	533:8	533:8	5	tag
FIELD	533:8	533:8	6	tag
LEAF_NODE	533:8	533:8	7	tag
LEAF_NODE	533:11	533:11	4	)
STATEMENTS	534:1	601:1	4	
LEAF_NODE	534:1	534:1	5	{
STATEMENTS	535:2	600:3	5	
LABEL	535:2	535:27	6	case TIFFTAG_JPEGIFOFFSET :
LEAF_NODE	535:2	535:2	7	case
LEAF_NODE	535:7	535:7	7	TIFFTAG_JPEGIFOFFSET
LEAF_NODE	535:27	535:27	7	:
EXPR_STATEMENT	536:3	536:56	6	sp -> jpeg_interchange_format = ( uint64 ) va_arg ( ap , uint64 ) ;
EXPR	536:3	536:3	7	sp -> jpeg_interchange_format = ( uint64 ) va_arg ( ap , uint64 )
ASSIGN	536:3	536:31	8	sp -> jpeg_interchange_format = ( uint64 ) va_arg ( ap , uint64 )
LVAL	536:3	536:3	9	sp -> jpeg_interchange_format
FIELD	536:3	536:7	10	sp -> jpeg_interchange_format
LEAF_NODE	536:3	536:3	11	sp
LEAF_NODE	536:5	536:5	11	->
LEAF_NODE	536:7	536:7	11	jpeg_interchange_format
ASSIGN_OP	536:30	536:30	9	=
LEAF_NODE	536:30	536:30	10	=
RVAL	536:31	536:39	9	( uint64 ) va_arg ( ap , uint64 )
LEAF_NODE	536:31	536:31	10	(
TYPE_NAME	536:32	536:32	10	uint64
LEAF_NODE	536:32	536:32	11	uint64
LEAF_NODE	536:38	536:38	10	)
FUNCTION_CALL	536:39	536:55	10	va_arg ( ap , uint64 )
CALLEE	536:39	536:39	11	va_arg
LEAF_NODE	536:39	536:39	12	va_arg
LEAF_NODE	536:45	536:45	11	(
ARGUMENT	536:46	536:46	11	ap
FIELD	536:46	536:46	12	ap
LEAF_NODE	536:46	536:46	13	ap
LEAF_NODE	536:48	536:48	11	,
ARGUMENT	536:49	536:49	11	uint64
FIELD	536:49	536:49	12	uint64
LEAF_NODE	536:49	536:49	13	uint64
LEAF_NODE	536:55	536:55	11	)
LEAF_NODE	536:56	536:56	7	;
JUMP_STATEMENT	537:3	537:8	6	break DESTINATION ;
KEYWORD	537:3	537:3	7	break
LEAF_NODE	537:3	537:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	537:8	537:8	7	;
LABEL	538:2	538:30	6	case TIFFTAG_JPEGIFBYTECOUNT :
LEAF_NODE	538:2	538:2	7	case
LEAF_NODE	538:7	538:7	7	TIFFTAG_JPEGIFBYTECOUNT
LEAF_NODE	538:30	538:30	7	:
EXPR_STATEMENT	539:3	539:63	6	sp -> jpeg_interchange_format_length = ( uint64 ) va_arg ( ap , uint64 ) ;
EXPR	539:3	539:3	7	sp -> jpeg_interchange_format_length = ( uint64 ) va_arg ( ap , uint64 )
ASSIGN	539:3	539:38	8	sp -> jpeg_interchange_format_length = ( uint64 ) va_arg ( ap , uint64 )
LVAL	539:3	539:3	9	sp -> jpeg_interchange_format_length
FIELD	539:3	539:7	10	sp -> jpeg_interchange_format_length
LEAF_NODE	539:3	539:3	11	sp
LEAF_NODE	539:5	539:5	11	->
LEAF_NODE	539:7	539:7	11	jpeg_interchange_format_length
ASSIGN_OP	539:37	539:37	9	=
LEAF_NODE	539:37	539:37	10	=
RVAL	539:38	539:46	9	( uint64 ) va_arg ( ap , uint64 )
LEAF_NODE	539:38	539:38	10	(
TYPE_NAME	539:39	539:39	10	uint64
LEAF_NODE	539:39	539:39	11	uint64
LEAF_NODE	539:45	539:45	10	)
FUNCTION_CALL	539:46	539:62	10	va_arg ( ap , uint64 )
CALLEE	539:46	539:46	11	va_arg
LEAF_NODE	539:46	539:46	12	va_arg
LEAF_NODE	539:52	539:52	11	(
ARGUMENT	539:53	539:53	11	ap
FIELD	539:53	539:53	12	ap
LEAF_NODE	539:53	539:53	13	ap
LEAF_NODE	539:55	539:55	11	,
ARGUMENT	539:56	539:56	11	uint64
FIELD	539:56	539:56	12	uint64
LEAF_NODE	539:56	539:56	13	uint64
LEAF_NODE	539:62	539:62	11	)
LEAF_NODE	539:63	539:63	7	;
JUMP_STATEMENT	540:3	540:8	6	break DESTINATION ;
KEYWORD	540:3	540:3	7	break
LEAF_NODE	540:3	540:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	540:8	540:8	7	;
LABEL	541:2	541:31	6	case TIFFTAG_YCBCRSUBSAMPLING :
LEAF_NODE	541:2	541:2	7	case
LEAF_NODE	541:7	541:7	7	TIFFTAG_YCBCRSUBSAMPLING
LEAF_NODE	541:31	541:31	7	:
EXPR_STATEMENT	542:3	542:24	6	sp -> subsampling_tag = 1 ;
EXPR	542:3	542:3	7	sp -> subsampling_tag = 1
ASSIGN	542:3	542:23	8	sp -> subsampling_tag = 1
LVAL	542:3	542:3	9	sp -> subsampling_tag
FIELD	542:3	542:7	10	sp -> subsampling_tag
LEAF_NODE	542:3	542:3	11	sp
LEAF_NODE	542:5	542:5	11	->
LEAF_NODE	542:7	542:7	11	subsampling_tag
ASSIGN_OP	542:22	542:22	9	=
LEAF_NODE	542:22	542:22	10	=
RVAL	542:23	542:23	9	1
FIELD	542:23	542:23	10	1
LEAF_NODE	542:23	542:23	11	1
LEAF_NODE	542:24	542:24	7	;
EXPR_STATEMENT	543:3	543:51	6	sp -> subsampling_hor = ( uint8 ) va_arg ( ap , uint16_vap ) ;
EXPR	543:3	543:3	7	sp -> subsampling_hor = ( uint8 ) va_arg ( ap , uint16_vap )
ASSIGN	543:3	543:23	8	sp -> subsampling_hor = ( uint8 ) va_arg ( ap , uint16_vap )
LVAL	543:3	543:3	9	sp -> subsampling_hor
FIELD	543:3	543:7	10	sp -> subsampling_hor
LEAF_NODE	543:3	543:3	11	sp
LEAF_NODE	543:5	543:5	11	->
LEAF_NODE	543:7	543:7	11	subsampling_hor
ASSIGN_OP	543:22	543:22	9	=
LEAF_NODE	543:22	543:22	10	=
RVAL	543:23	543:30	9	( uint8 ) va_arg ( ap , uint16_vap )
LEAF_NODE	543:23	543:23	10	(
TYPE_NAME	543:24	543:24	10	uint8
LEAF_NODE	543:24	543:24	11	uint8
LEAF_NODE	543:29	543:29	10	)
FUNCTION_CALL	543:30	543:50	10	va_arg ( ap , uint16_vap )
CALLEE	543:30	543:30	11	va_arg
LEAF_NODE	543:30	543:30	12	va_arg
LEAF_NODE	543:36	543:36	11	(
ARGUMENT	543:37	543:37	11	ap
FIELD	543:37	543:37	12	ap
LEAF_NODE	543:37	543:37	13	ap
LEAF_NODE	543:39	543:39	11	,
ARGUMENT	543:40	543:40	11	uint16_vap
FIELD	543:40	543:40	12	uint16_vap
LEAF_NODE	543:40	543:40	13	uint16_vap
LEAF_NODE	543:50	543:50	11	)
LEAF_NODE	543:51	543:51	7	;
EXPR_STATEMENT	544:3	544:51	6	sp -> subsampling_ver = ( uint8 ) va_arg ( ap , uint16_vap ) ;
EXPR	544:3	544:3	7	sp -> subsampling_ver = ( uint8 ) va_arg ( ap , uint16_vap )
ASSIGN	544:3	544:23	8	sp -> subsampling_ver = ( uint8 ) va_arg ( ap , uint16_vap )
LVAL	544:3	544:3	9	sp -> subsampling_ver
FIELD	544:3	544:7	10	sp -> subsampling_ver
LEAF_NODE	544:3	544:3	11	sp
LEAF_NODE	544:5	544:5	11	->
LEAF_NODE	544:7	544:7	11	subsampling_ver
ASSIGN_OP	544:22	544:22	9	=
LEAF_NODE	544:22	544:22	10	=
RVAL	544:23	544:30	9	( uint8 ) va_arg ( ap , uint16_vap )
LEAF_NODE	544:23	544:23	10	(
TYPE_NAME	544:24	544:24	10	uint8
LEAF_NODE	544:24	544:24	11	uint8
LEAF_NODE	544:29	544:29	10	)
FUNCTION_CALL	544:30	544:50	10	va_arg ( ap , uint16_vap )
CALLEE	544:30	544:30	11	va_arg
LEAF_NODE	544:30	544:30	12	va_arg
LEAF_NODE	544:36	544:36	11	(
ARGUMENT	544:37	544:37	11	ap
FIELD	544:37	544:37	12	ap
LEAF_NODE	544:37	544:37	13	ap
LEAF_NODE	544:39	544:39	11	,
ARGUMENT	544:40	544:40	11	uint16_vap
FIELD	544:40	544:40	12	uint16_vap
LEAF_NODE	544:40	544:40	13	uint16_vap
LEAF_NODE	544:50	544:50	11	)
LEAF_NODE	544:51	544:51	7	;
EXPR_STATEMENT	545:3	545:58	6	tif -> tif_dir . td_ycbcrsubsampling [ 0 ] = sp -> subsampling_hor ;
EXPR	545:3	545:3	7	tif -> tif_dir . td_ycbcrsubsampling [ 0 ] = sp -> subsampling_hor
ASSIGN	545:3	545:39	8	tif -> tif_dir . td_ycbcrsubsampling [ 0 ] = sp -> subsampling_hor
LVAL	545:3	545:3	9	tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
FIELD	545:3	545:37	10	tif -> tif_dir . td_ycbcrsubsampling [ 0 ]
LEAF_NODE	545:3	545:3	11	tif
LEAF_NODE	545:6	545:6	11	->
LEAF_NODE	545:8	545:8	11	tif_dir
LEAF_NODE	545:15	545:15	11	.
LEAF_NODE	545:16	545:16	11	td_ycbcrsubsampling
LEAF_NODE	545:35	545:35	11	[
EXPR	545:36	545:36	11	0
FIELD	545:36	545:36	12	0
LEAF_NODE	545:36	545:36	13	0
LEAF_NODE	545:37	545:37	11	]
ASSIGN_OP	545:38	545:38	9	=
LEAF_NODE	545:38	545:38	10	=
RVAL	545:39	545:39	9	sp -> subsampling_hor
FIELD	545:39	545:43	10	sp -> subsampling_hor
LEAF_NODE	545:39	545:39	11	sp
LEAF_NODE	545:41	545:41	11	->
LEAF_NODE	545:43	545:43	11	subsampling_hor
LEAF_NODE	545:58	545:58	7	;
EXPR_STATEMENT	546:3	546:58	6	tif -> tif_dir . td_ycbcrsubsampling [ 1 ] = sp -> subsampling_ver ;
EXPR	546:3	546:3	7	tif -> tif_dir . td_ycbcrsubsampling [ 1 ] = sp -> subsampling_ver
ASSIGN	546:3	546:39	8	tif -> tif_dir . td_ycbcrsubsampling [ 1 ] = sp -> subsampling_ver
LVAL	546:3	546:3	9	tif -> tif_dir . td_ycbcrsubsampling [ 1 ]
FIELD	546:3	546:37	10	tif -> tif_dir . td_ycbcrsubsampling [ 1 ]
LEAF_NODE	546:3	546:3	11	tif
LEAF_NODE	546:6	546:6	11	->
LEAF_NODE	546:8	546:8	11	tif_dir
LEAF_NODE	546:15	546:15	11	.
LEAF_NODE	546:16	546:16	11	td_ycbcrsubsampling
LEAF_NODE	546:35	546:35	11	[
EXPR	546:36	546:36	11	1
FIELD	546:36	546:36	12	1
LEAF_NODE	546:36	546:36	13	1
LEAF_NODE	546:37	546:37	11	]
ASSIGN_OP	546:38	546:38	9	=
LEAF_NODE	546:38	546:38	10	=
RVAL	546:39	546:39	9	sp -> subsampling_ver
FIELD	546:39	546:43	10	sp -> subsampling_ver
LEAF_NODE	546:39	546:39	11	sp
LEAF_NODE	546:41	546:41	11	->
LEAF_NODE	546:43	546:43	11	subsampling_ver
LEAF_NODE	546:58	546:58	7	;
JUMP_STATEMENT	547:3	547:8	6	break DESTINATION ;
KEYWORD	547:3	547:3	7	break
LEAF_NODE	547:3	547:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	547:8	547:8	7	;
LABEL	548:2	548:26	6	case TIFFTAG_JPEGQTABLES :
LEAF_NODE	548:2	548:2	7	case
LEAF_NODE	548:7	548:7	7	TIFFTAG_JPEGQTABLES
LEAF_NODE	548:26	548:26	7	:
EXPR_STATEMENT	549:3	549:31	6	ma = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	549:3	549:3	7	ma = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	549:3	549:6	8	ma = ( uint32 ) va_arg ( ap , uint32 )
LVAL	549:3	549:3	9	ma
FIELD	549:3	549:3	10	ma
LEAF_NODE	549:3	549:3	11	ma
ASSIGN_OP	549:5	549:5	9	=
LEAF_NODE	549:5	549:5	10	=
RVAL	549:6	549:14	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	549:6	549:6	10	(
TYPE_NAME	549:7	549:7	10	uint32
LEAF_NODE	549:7	549:7	11	uint32
LEAF_NODE	549:13	549:13	10	)
FUNCTION_CALL	549:14	549:30	10	va_arg ( ap , uint32 )
CALLEE	549:14	549:14	11	va_arg
LEAF_NODE	549:14	549:14	12	va_arg
LEAF_NODE	549:20	549:20	11	(
ARGUMENT	549:21	549:21	11	ap
FIELD	549:21	549:21	12	ap
LEAF_NODE	549:21	549:21	13	ap
LEAF_NODE	549:23	549:23	11	,
ARGUMENT	549:24	549:24	11	uint32
FIELD	549:24	549:24	12	uint32
LEAF_NODE	549:24	549:24	13	uint32
LEAF_NODE	549:30	549:30	11	)
LEAF_NODE	549:31	549:31	7	;
SELECTION	550:3	551:3	6	
KEYWORD	550:3	550:3	7	if
LEAF_NODE	550:3	550:3	8	if
LEAF_NODE	550:6	550:6	7	(
CONDITION	550:7	550:7	7	ma != 0
EXPR	550:7	550:11	8	ma != 0
FIELD	550:7	550:7	9	ma
LEAF_NODE	550:7	550:7	10	ma
EQ_OPERATOR	550:9	550:9	9	!=
LEAF_NODE	550:9	550:9	10	!=
FIELD	550:11	550:11	9	0
LEAF_NODE	550:11	550:11	10	0
LEAF_NODE	550:12	550:12	7	)
STATEMENTS	551:3	561:3	7	
LEAF_NODE	551:3	551:3	8	{
STATEMENTS	552:4	559:4	8	
SELECTION	552:4	553:4	9	
KEYWORD	552:4	552:4	10	if
LEAF_NODE	552:4	552:4	11	if
LEAF_NODE	552:7	552:7	10	(
CONDITION	552:8	552:8	10	ma > 3
EXPR	552:8	552:11	11	ma > 3
FIELD	552:8	552:8	12	ma
LEAF_NODE	552:8	552:8	13	ma
REL_OPERATOR	552:10	552:10	12	>
LEAF_NODE	552:10	552:10	13	>
FIELD	552:11	552:11	12	3
LEAF_NODE	552:11	552:11	13	3
LEAF_NODE	552:12	552:12	10	)
STATEMENTS	553:4	556:4	10	
LEAF_NODE	553:4	553:4	11	{
STATEMENTS	554:5	555:5	11	
EXPR_STATEMENT	554:5	554:83	12	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegQTables tag has incorrect count" ) ;
EXPR	554:5	554:5	13	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegQTables tag has incorrect count" )
FUNCTION_CALL	554:5	554:82	14	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegQTables tag has incorrect count" )
CALLEE	554:5	554:5	15	TIFFErrorExt
LEAF_NODE	554:5	554:5	16	TIFFErrorExt
LEAF_NODE	554:17	554:17	15	(
ARGUMENT	554:18	554:18	15	tif -> tif_clientdata
FIELD	554:18	554:23	16	tif -> tif_clientdata
LEAF_NODE	554:18	554:18	17	tif
LEAF_NODE	554:21	554:21	17	->
LEAF_NODE	554:23	554:23	17	tif_clientdata
LEAF_NODE	554:37	554:37	15	,
ARGUMENT	554:38	554:38	15	module
FIELD	554:38	554:38	16	module
LEAF_NODE	554:38	554:38	17	module
LEAF_NODE	554:44	554:44	15	,
ARGUMENT	554:45	554:45	15	"JpegQTables tag has incorrect count"
FIELD	554:45	554:45	16	"JpegQTables tag has incorrect count"
LEAF_NODE	554:45	554:45	17	"JpegQTables tag has incorrect count"
LEAF_NODE	554:82	554:82	15	)
LEAF_NODE	554:83	554:83	13	;
JUMP_STATEMENT	555:5	555:14	12	return ( 0 ) ;
KEYWORD	555:5	555:5	13	return
LEAF_NODE	555:5	555:5	14	return
DESTINATION	555:11	555:11	13	( 0 )
EXPR	555:11	555:13	14	( 0 )
LEAF_NODE	555:11	555:11	15	(
FIELD	555:12	555:12	15	0
LEAF_NODE	555:12	555:12	16	0
LEAF_NODE	555:13	555:13	15	)
LEAF_NODE	555:14	555:14	13	;
LEAF_NODE	556:4	556:4	11	}
EXPR_STATEMENT	557:4	557:37	9	sp -> qtable_offset_count = ( uint8 ) ma ;
EXPR	557:4	557:4	10	sp -> qtable_offset_count = ( uint8 ) ma
ASSIGN	557:4	557:28	11	sp -> qtable_offset_count = ( uint8 ) ma
LVAL	557:4	557:4	12	sp -> qtable_offset_count
FIELD	557:4	557:8	13	sp -> qtable_offset_count
LEAF_NODE	557:4	557:4	14	sp
LEAF_NODE	557:6	557:6	14	->
LEAF_NODE	557:8	557:8	14	qtable_offset_count
ASSIGN_OP	557:27	557:27	12	=
LEAF_NODE	557:27	557:27	13	=
RVAL	557:28	557:35	12	( uint8 ) ma
LEAF_NODE	557:28	557:28	13	(
TYPE_NAME	557:29	557:29	13	uint8
LEAF_NODE	557:29	557:29	14	uint8
LEAF_NODE	557:34	557:34	13	)
FIELD	557:35	557:35	13	ma
LEAF_NODE	557:35	557:35	14	ma
LEAF_NODE	557:37	557:37	10	;
LEAF_NODE	558:4	558:4	9	mb
LEAF_NODE	558:6	558:6	9	=
LEAF_NODE	558:7	558:7	9	(
LEAF_NODE	558:8	558:8	9	uint64
LEAF_NODE	558:14	558:14	9	*
LEAF_NODE	558:15	558:15	9	)
LEAF_NODE	558:16	558:16	9	va_arg
LEAF_NODE	558:22	558:22	9	(
LEAF_NODE	558:23	558:23	9	ap
LEAF_NODE	558:25	558:25	9	,
LEAF_NODE	558:26	558:26	9	uint64
LEAF_NODE	558:32	558:32	9	*
LEAF_NODE	558:33	558:33	9	)
LEAF_NODE	558:34	558:34	9	;
ITERATION	559:4	560:5	9	
KEYWORD	559:4	559:4	10	for
LEAF_NODE	559:4	559:4	11	for
LEAF_NODE	559:8	559:8	10	(
FOR_INIT	559:9	559:12	10	n = 0 ;
EXPR	559:9	559:9	11	n = 0
ASSIGN	559:9	559:11	12	n = 0
LVAL	559:9	559:9	13	n
FIELD	559:9	559:9	14	n
LEAF_NODE	559:9	559:9	15	n
ASSIGN_OP	559:10	559:10	13	=
LEAF_NODE	559:10	559:10	14	=
RVAL	559:11	559:11	13	0
FIELD	559:11	559:11	14	0
LEAF_NODE	559:11	559:11	15	0
LEAF_NODE	559:12	559:12	11	;
CONDITION	559:14	559:14	10	n < ma
EXPR	559:14	559:16	11	n < ma
FIELD	559:14	559:14	12	n
LEAF_NODE	559:14	559:14	13	n
REL_OPERATOR	559:15	559:15	12	<
LEAF_NODE	559:15	559:15	13	<
FIELD	559:16	559:16	12	ma
LEAF_NODE	559:16	559:16	13	ma
LEAF_NODE	559:18	559:18	10	;
FOR_EXPR	559:20	559:20	10	n ++
EXPR	559:20	559:20	11	n ++
FIELD	559:20	559:21	12	n ++
LEAF_NODE	559:20	559:20	13	n
LEAF_NODE	559:21	559:21	13	++
LEAF_NODE	559:23	559:23	10	)
STATEMENTS	560:5	560:5	10	
EXPR_STATEMENT	560:5	560:31	11	sp -> qtable_offset [ n ] = mb [ n ] ;
EXPR	560:5	560:5	12	sp -> qtable_offset [ n ] = mb [ n ]
ASSIGN	560:5	560:26	13	sp -> qtable_offset [ n ] = mb [ n ]
LVAL	560:5	560:5	14	sp -> qtable_offset [ n ]
FIELD	560:5	560:24	15	sp -> qtable_offset [ n ]
LEAF_NODE	560:5	560:5	16	sp
LEAF_NODE	560:7	560:7	16	->
LEAF_NODE	560:9	560:9	16	qtable_offset
LEAF_NODE	560:22	560:22	16	[
EXPR	560:23	560:23	16	n
FIELD	560:23	560:23	17	n
LEAF_NODE	560:23	560:23	18	n
LEAF_NODE	560:24	560:24	16	]
ASSIGN_OP	560:25	560:25	14	=
LEAF_NODE	560:25	560:25	15	=
RVAL	560:26	560:26	14	mb [ n ]
FIELD	560:26	560:30	15	mb [ n ]
LEAF_NODE	560:26	560:26	16	mb
LEAF_NODE	560:28	560:28	16	[
EXPR	560:29	560:29	16	n
FIELD	560:29	560:29	17	n
LEAF_NODE	560:29	560:29	18	n
LEAF_NODE	560:30	560:30	16	]
LEAF_NODE	560:31	560:31	12	;
LEAF_NODE	561:3	561:3	8	}
JUMP_STATEMENT	562:3	562:8	6	break DESTINATION ;
KEYWORD	562:3	562:3	7	break
LEAF_NODE	562:3	562:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	562:8	562:8	7	;
LABEL	563:2	563:27	6	case TIFFTAG_JPEGDCTABLES :
LEAF_NODE	563:2	563:2	7	case
LEAF_NODE	563:7	563:7	7	TIFFTAG_JPEGDCTABLES
LEAF_NODE	563:27	563:27	7	:
EXPR_STATEMENT	564:3	564:31	6	ma = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	564:3	564:3	7	ma = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	564:3	564:6	8	ma = ( uint32 ) va_arg ( ap , uint32 )
LVAL	564:3	564:3	9	ma
FIELD	564:3	564:3	10	ma
LEAF_NODE	564:3	564:3	11	ma
ASSIGN_OP	564:5	564:5	9	=
LEAF_NODE	564:5	564:5	10	=
RVAL	564:6	564:14	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	564:6	564:6	10	(
TYPE_NAME	564:7	564:7	10	uint32
LEAF_NODE	564:7	564:7	11	uint32
LEAF_NODE	564:13	564:13	10	)
FUNCTION_CALL	564:14	564:30	10	va_arg ( ap , uint32 )
CALLEE	564:14	564:14	11	va_arg
LEAF_NODE	564:14	564:14	12	va_arg
LEAF_NODE	564:20	564:20	11	(
ARGUMENT	564:21	564:21	11	ap
FIELD	564:21	564:21	12	ap
LEAF_NODE	564:21	564:21	13	ap
LEAF_NODE	564:23	564:23	11	,
ARGUMENT	564:24	564:24	11	uint32
FIELD	564:24	564:24	12	uint32
LEAF_NODE	564:24	564:24	13	uint32
LEAF_NODE	564:30	564:30	11	)
LEAF_NODE	564:31	564:31	7	;
SELECTION	565:3	566:3	6	
KEYWORD	565:3	565:3	7	if
LEAF_NODE	565:3	565:3	8	if
LEAF_NODE	565:6	565:6	7	(
CONDITION	565:7	565:7	7	ma != 0
EXPR	565:7	565:11	8	ma != 0
FIELD	565:7	565:7	9	ma
LEAF_NODE	565:7	565:7	10	ma
EQ_OPERATOR	565:9	565:9	9	!=
LEAF_NODE	565:9	565:9	10	!=
FIELD	565:11	565:11	9	0
LEAF_NODE	565:11	565:11	10	0
LEAF_NODE	565:12	565:12	7	)
STATEMENTS	566:3	576:3	7	
LEAF_NODE	566:3	566:3	8	{
STATEMENTS	567:4	574:4	8	
SELECTION	567:4	568:4	9	
KEYWORD	567:4	567:4	10	if
LEAF_NODE	567:4	567:4	11	if
LEAF_NODE	567:7	567:7	10	(
CONDITION	567:8	567:8	10	ma > 3
EXPR	567:8	567:11	11	ma > 3
FIELD	567:8	567:8	12	ma
LEAF_NODE	567:8	567:8	13	ma
REL_OPERATOR	567:10	567:10	12	>
LEAF_NODE	567:10	567:10	13	>
FIELD	567:11	567:11	12	3
LEAF_NODE	567:11	567:11	13	3
LEAF_NODE	567:12	567:12	10	)
STATEMENTS	568:4	571:4	10	
LEAF_NODE	568:4	568:4	11	{
STATEMENTS	569:5	570:5	11	
EXPR_STATEMENT	569:5	569:84	12	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegDcTables tag has incorrect count" ) ;
EXPR	569:5	569:5	13	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegDcTables tag has incorrect count" )
FUNCTION_CALL	569:5	569:83	14	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegDcTables tag has incorrect count" )
CALLEE	569:5	569:5	15	TIFFErrorExt
LEAF_NODE	569:5	569:5	16	TIFFErrorExt
LEAF_NODE	569:17	569:17	15	(
ARGUMENT	569:18	569:18	15	tif -> tif_clientdata
FIELD	569:18	569:23	16	tif -> tif_clientdata
LEAF_NODE	569:18	569:18	17	tif
LEAF_NODE	569:21	569:21	17	->
LEAF_NODE	569:23	569:23	17	tif_clientdata
LEAF_NODE	569:37	569:37	15	,
ARGUMENT	569:38	569:38	15	module
FIELD	569:38	569:38	16	module
LEAF_NODE	569:38	569:38	17	module
LEAF_NODE	569:44	569:44	15	,
ARGUMENT	569:45	569:45	15	"JpegDcTables tag has incorrect count"
FIELD	569:45	569:45	16	"JpegDcTables tag has incorrect count"
LEAF_NODE	569:45	569:45	17	"JpegDcTables tag has incorrect count"
LEAF_NODE	569:83	569:83	15	)
LEAF_NODE	569:84	569:84	13	;
JUMP_STATEMENT	570:5	570:14	12	return ( 0 ) ;
KEYWORD	570:5	570:5	13	return
LEAF_NODE	570:5	570:5	14	return
DESTINATION	570:11	570:11	13	( 0 )
EXPR	570:11	570:13	14	( 0 )
LEAF_NODE	570:11	570:11	15	(
FIELD	570:12	570:12	15	0
LEAF_NODE	570:12	570:12	16	0
LEAF_NODE	570:13	570:13	15	)
LEAF_NODE	570:14	570:14	13	;
LEAF_NODE	571:4	571:4	11	}
EXPR_STATEMENT	572:4	572:38	9	sp -> dctable_offset_count = ( uint8 ) ma ;
EXPR	572:4	572:4	10	sp -> dctable_offset_count = ( uint8 ) ma
ASSIGN	572:4	572:29	11	sp -> dctable_offset_count = ( uint8 ) ma
LVAL	572:4	572:4	12	sp -> dctable_offset_count
FIELD	572:4	572:8	13	sp -> dctable_offset_count
LEAF_NODE	572:4	572:4	14	sp
LEAF_NODE	572:6	572:6	14	->
LEAF_NODE	572:8	572:8	14	dctable_offset_count
ASSIGN_OP	572:28	572:28	12	=
LEAF_NODE	572:28	572:28	13	=
RVAL	572:29	572:36	12	( uint8 ) ma
LEAF_NODE	572:29	572:29	13	(
TYPE_NAME	572:30	572:30	13	uint8
LEAF_NODE	572:30	572:30	14	uint8
LEAF_NODE	572:35	572:35	13	)
FIELD	572:36	572:36	13	ma
LEAF_NODE	572:36	572:36	14	ma
LEAF_NODE	572:38	572:38	10	;
LEAF_NODE	573:4	573:4	9	mb
LEAF_NODE	573:6	573:6	9	=
LEAF_NODE	573:7	573:7	9	(
LEAF_NODE	573:8	573:8	9	uint64
LEAF_NODE	573:14	573:14	9	*
LEAF_NODE	573:15	573:15	9	)
LEAF_NODE	573:16	573:16	9	va_arg
LEAF_NODE	573:22	573:22	9	(
LEAF_NODE	573:23	573:23	9	ap
LEAF_NODE	573:25	573:25	9	,
LEAF_NODE	573:26	573:26	9	uint64
LEAF_NODE	573:32	573:32	9	*
LEAF_NODE	573:33	573:33	9	)
LEAF_NODE	573:34	573:34	9	;
ITERATION	574:4	575:5	9	
KEYWORD	574:4	574:4	10	for
LEAF_NODE	574:4	574:4	11	for
LEAF_NODE	574:8	574:8	10	(
FOR_INIT	574:9	574:12	10	n = 0 ;
EXPR	574:9	574:9	11	n = 0
ASSIGN	574:9	574:11	12	n = 0
LVAL	574:9	574:9	13	n
FIELD	574:9	574:9	14	n
LEAF_NODE	574:9	574:9	15	n
ASSIGN_OP	574:10	574:10	13	=
LEAF_NODE	574:10	574:10	14	=
RVAL	574:11	574:11	13	0
FIELD	574:11	574:11	14	0
LEAF_NODE	574:11	574:11	15	0
LEAF_NODE	574:12	574:12	11	;
CONDITION	574:14	574:14	10	n < ma
EXPR	574:14	574:16	11	n < ma
FIELD	574:14	574:14	12	n
LEAF_NODE	574:14	574:14	13	n
REL_OPERATOR	574:15	574:15	12	<
LEAF_NODE	574:15	574:15	13	<
FIELD	574:16	574:16	12	ma
LEAF_NODE	574:16	574:16	13	ma
LEAF_NODE	574:18	574:18	10	;
FOR_EXPR	574:20	574:20	10	n ++
EXPR	574:20	574:20	11	n ++
FIELD	574:20	574:21	12	n ++
LEAF_NODE	574:20	574:20	13	n
LEAF_NODE	574:21	574:21	13	++
LEAF_NODE	574:23	574:23	10	)
STATEMENTS	575:5	575:5	10	
EXPR_STATEMENT	575:5	575:32	11	sp -> dctable_offset [ n ] = mb [ n ] ;
EXPR	575:5	575:5	12	sp -> dctable_offset [ n ] = mb [ n ]
ASSIGN	575:5	575:27	13	sp -> dctable_offset [ n ] = mb [ n ]
LVAL	575:5	575:5	14	sp -> dctable_offset [ n ]
FIELD	575:5	575:25	15	sp -> dctable_offset [ n ]
LEAF_NODE	575:5	575:5	16	sp
LEAF_NODE	575:7	575:7	16	->
LEAF_NODE	575:9	575:9	16	dctable_offset
LEAF_NODE	575:23	575:23	16	[
EXPR	575:24	575:24	16	n
FIELD	575:24	575:24	17	n
LEAF_NODE	575:24	575:24	18	n
LEAF_NODE	575:25	575:25	16	]
ASSIGN_OP	575:26	575:26	14	=
LEAF_NODE	575:26	575:26	15	=
RVAL	575:27	575:27	14	mb [ n ]
FIELD	575:27	575:31	15	mb [ n ]
LEAF_NODE	575:27	575:27	16	mb
LEAF_NODE	575:29	575:29	16	[
EXPR	575:30	575:30	16	n
FIELD	575:30	575:30	17	n
LEAF_NODE	575:30	575:30	18	n
LEAF_NODE	575:31	575:31	16	]
LEAF_NODE	575:32	575:32	12	;
LEAF_NODE	576:3	576:3	8	}
JUMP_STATEMENT	577:3	577:8	6	break DESTINATION ;
KEYWORD	577:3	577:3	7	break
LEAF_NODE	577:3	577:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	577:8	577:8	7	;
LABEL	578:2	578:27	6	case TIFFTAG_JPEGACTABLES :
LEAF_NODE	578:2	578:2	7	case
LEAF_NODE	578:7	578:7	7	TIFFTAG_JPEGACTABLES
LEAF_NODE	578:27	578:27	7	:
EXPR_STATEMENT	579:3	579:31	6	ma = ( uint32 ) va_arg ( ap , uint32 ) ;
EXPR	579:3	579:3	7	ma = ( uint32 ) va_arg ( ap , uint32 )
ASSIGN	579:3	579:6	8	ma = ( uint32 ) va_arg ( ap , uint32 )
LVAL	579:3	579:3	9	ma
FIELD	579:3	579:3	10	ma
LEAF_NODE	579:3	579:3	11	ma
ASSIGN_OP	579:5	579:5	9	=
LEAF_NODE	579:5	579:5	10	=
RVAL	579:6	579:14	9	( uint32 ) va_arg ( ap , uint32 )
LEAF_NODE	579:6	579:6	10	(
TYPE_NAME	579:7	579:7	10	uint32
LEAF_NODE	579:7	579:7	11	uint32
LEAF_NODE	579:13	579:13	10	)
FUNCTION_CALL	579:14	579:30	10	va_arg ( ap , uint32 )
CALLEE	579:14	579:14	11	va_arg
LEAF_NODE	579:14	579:14	12	va_arg
LEAF_NODE	579:20	579:20	11	(
ARGUMENT	579:21	579:21	11	ap
FIELD	579:21	579:21	12	ap
LEAF_NODE	579:21	579:21	13	ap
LEAF_NODE	579:23	579:23	11	,
ARGUMENT	579:24	579:24	11	uint32
FIELD	579:24	579:24	12	uint32
LEAF_NODE	579:24	579:24	13	uint32
LEAF_NODE	579:30	579:30	11	)
LEAF_NODE	579:31	579:31	7	;
SELECTION	580:3	581:3	6	
KEYWORD	580:3	580:3	7	if
LEAF_NODE	580:3	580:3	8	if
LEAF_NODE	580:6	580:6	7	(
CONDITION	580:7	580:7	7	ma != 0
EXPR	580:7	580:11	8	ma != 0
FIELD	580:7	580:7	9	ma
LEAF_NODE	580:7	580:7	10	ma
EQ_OPERATOR	580:9	580:9	9	!=
LEAF_NODE	580:9	580:9	10	!=
FIELD	580:11	580:11	9	0
LEAF_NODE	580:11	580:11	10	0
LEAF_NODE	580:12	580:12	7	)
STATEMENTS	581:3	591:3	7	
LEAF_NODE	581:3	581:3	8	{
STATEMENTS	582:4	589:4	8	
SELECTION	582:4	583:4	9	
KEYWORD	582:4	582:4	10	if
LEAF_NODE	582:4	582:4	11	if
LEAF_NODE	582:7	582:7	10	(
CONDITION	582:8	582:8	10	ma > 3
EXPR	582:8	582:11	11	ma > 3
FIELD	582:8	582:8	12	ma
LEAF_NODE	582:8	582:8	13	ma
REL_OPERATOR	582:10	582:10	12	>
LEAF_NODE	582:10	582:10	13	>
FIELD	582:11	582:11	12	3
LEAF_NODE	582:11	582:11	13	3
LEAF_NODE	582:12	582:12	10	)
STATEMENTS	583:4	586:4	10	
LEAF_NODE	583:4	583:4	11	{
STATEMENTS	584:5	585:5	11	
EXPR_STATEMENT	584:5	584:84	12	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegAcTables tag has incorrect count" ) ;
EXPR	584:5	584:5	13	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegAcTables tag has incorrect count" )
FUNCTION_CALL	584:5	584:83	14	TIFFErrorExt ( tif -> tif_clientdata , module , "JpegAcTables tag has incorrect count" )
CALLEE	584:5	584:5	15	TIFFErrorExt
LEAF_NODE	584:5	584:5	16	TIFFErrorExt
LEAF_NODE	584:17	584:17	15	(
ARGUMENT	584:18	584:18	15	tif -> tif_clientdata
FIELD	584:18	584:23	16	tif -> tif_clientdata
LEAF_NODE	584:18	584:18	17	tif
LEAF_NODE	584:21	584:21	17	->
LEAF_NODE	584:23	584:23	17	tif_clientdata
LEAF_NODE	584:37	584:37	15	,
ARGUMENT	584:38	584:38	15	module
FIELD	584:38	584:38	16	module
LEAF_NODE	584:38	584:38	17	module
LEAF_NODE	584:44	584:44	15	,
ARGUMENT	584:45	584:45	15	"JpegAcTables tag has incorrect count"
FIELD	584:45	584:45	16	"JpegAcTables tag has incorrect count"
LEAF_NODE	584:45	584:45	17	"JpegAcTables tag has incorrect count"
LEAF_NODE	584:83	584:83	15	)
LEAF_NODE	584:84	584:84	13	;
JUMP_STATEMENT	585:5	585:14	12	return ( 0 ) ;
KEYWORD	585:5	585:5	13	return
LEAF_NODE	585:5	585:5	14	return
DESTINATION	585:11	585:11	13	( 0 )
EXPR	585:11	585:13	14	( 0 )
LEAF_NODE	585:11	585:11	15	(
FIELD	585:12	585:12	15	0
LEAF_NODE	585:12	585:12	16	0
LEAF_NODE	585:13	585:13	15	)
LEAF_NODE	585:14	585:14	13	;
LEAF_NODE	586:4	586:4	11	}
EXPR_STATEMENT	587:4	587:38	9	sp -> actable_offset_count = ( uint8 ) ma ;
EXPR	587:4	587:4	10	sp -> actable_offset_count = ( uint8 ) ma
ASSIGN	587:4	587:29	11	sp -> actable_offset_count = ( uint8 ) ma
LVAL	587:4	587:4	12	sp -> actable_offset_count
FIELD	587:4	587:8	13	sp -> actable_offset_count
LEAF_NODE	587:4	587:4	14	sp
LEAF_NODE	587:6	587:6	14	->
LEAF_NODE	587:8	587:8	14	actable_offset_count
ASSIGN_OP	587:28	587:28	12	=
LEAF_NODE	587:28	587:28	13	=
RVAL	587:29	587:36	12	( uint8 ) ma
LEAF_NODE	587:29	587:29	13	(
TYPE_NAME	587:30	587:30	13	uint8
LEAF_NODE	587:30	587:30	14	uint8
LEAF_NODE	587:35	587:35	13	)
FIELD	587:36	587:36	13	ma
LEAF_NODE	587:36	587:36	14	ma
LEAF_NODE	587:38	587:38	10	;
LEAF_NODE	588:4	588:4	9	mb
LEAF_NODE	588:6	588:6	9	=
LEAF_NODE	588:7	588:7	9	(
LEAF_NODE	588:8	588:8	9	uint64
LEAF_NODE	588:14	588:14	9	*
LEAF_NODE	588:15	588:15	9	)
LEAF_NODE	588:16	588:16	9	va_arg
LEAF_NODE	588:22	588:22	9	(
LEAF_NODE	588:23	588:23	9	ap
LEAF_NODE	588:25	588:25	9	,
LEAF_NODE	588:26	588:26	9	uint64
LEAF_NODE	588:32	588:32	9	*
LEAF_NODE	588:33	588:33	9	)
LEAF_NODE	588:34	588:34	9	;
ITERATION	589:4	590:5	9	
KEYWORD	589:4	589:4	10	for
LEAF_NODE	589:4	589:4	11	for
LEAF_NODE	589:8	589:8	10	(
FOR_INIT	589:9	589:12	10	n = 0 ;
EXPR	589:9	589:9	11	n = 0
ASSIGN	589:9	589:11	12	n = 0
LVAL	589:9	589:9	13	n
FIELD	589:9	589:9	14	n
LEAF_NODE	589:9	589:9	15	n
ASSIGN_OP	589:10	589:10	13	=
LEAF_NODE	589:10	589:10	14	=
RVAL	589:11	589:11	13	0
FIELD	589:11	589:11	14	0
LEAF_NODE	589:11	589:11	15	0
LEAF_NODE	589:12	589:12	11	;
CONDITION	589:14	589:14	10	n < ma
EXPR	589:14	589:16	11	n < ma
FIELD	589:14	589:14	12	n
LEAF_NODE	589:14	589:14	13	n
REL_OPERATOR	589:15	589:15	12	<
LEAF_NODE	589:15	589:15	13	<
FIELD	589:16	589:16	12	ma
LEAF_NODE	589:16	589:16	13	ma
LEAF_NODE	589:18	589:18	10	;
FOR_EXPR	589:20	589:20	10	n ++
EXPR	589:20	589:20	11	n ++
FIELD	589:20	589:21	12	n ++
LEAF_NODE	589:20	589:20	13	n
LEAF_NODE	589:21	589:21	13	++
LEAF_NODE	589:23	589:23	10	)
STATEMENTS	590:5	590:5	10	
EXPR_STATEMENT	590:5	590:32	11	sp -> actable_offset [ n ] = mb [ n ] ;
EXPR	590:5	590:5	12	sp -> actable_offset [ n ] = mb [ n ]
ASSIGN	590:5	590:27	13	sp -> actable_offset [ n ] = mb [ n ]
LVAL	590:5	590:5	14	sp -> actable_offset [ n ]
FIELD	590:5	590:25	15	sp -> actable_offset [ n ]
LEAF_NODE	590:5	590:5	16	sp
LEAF_NODE	590:7	590:7	16	->
LEAF_NODE	590:9	590:9	16	actable_offset
LEAF_NODE	590:23	590:23	16	[
EXPR	590:24	590:24	16	n
FIELD	590:24	590:24	17	n
LEAF_NODE	590:24	590:24	18	n
LEAF_NODE	590:25	590:25	16	]
ASSIGN_OP	590:26	590:26	14	=
LEAF_NODE	590:26	590:26	15	=
RVAL	590:27	590:27	14	mb [ n ]
FIELD	590:27	590:31	15	mb [ n ]
LEAF_NODE	590:27	590:27	16	mb
LEAF_NODE	590:29	590:29	16	[
EXPR	590:30	590:30	16	n
FIELD	590:30	590:30	17	n
LEAF_NODE	590:30	590:30	18	n
LEAF_NODE	590:31	590:31	16	]
LEAF_NODE	590:32	590:32	12	;
LEAF_NODE	591:3	591:3	8	}
JUMP_STATEMENT	592:3	592:8	6	break DESTINATION ;
KEYWORD	592:3	592:3	7	break
LEAF_NODE	592:3	592:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	592:8	592:8	7	;
LABEL	593:2	593:23	6	case TIFFTAG_JPEGPROC :
LEAF_NODE	593:2	593:2	7	case
LEAF_NODE	593:7	593:7	7	TIFFTAG_JPEGPROC
LEAF_NODE	593:23	593:23	7	:
EXPR_STATEMENT	594:3	594:45	6	sp -> jpeg_proc = ( uint8 ) va_arg ( ap , uint16_vap ) ;
EXPR	594:3	594:3	7	sp -> jpeg_proc = ( uint8 ) va_arg ( ap , uint16_vap )
ASSIGN	594:3	594:17	8	sp -> jpeg_proc = ( uint8 ) va_arg ( ap , uint16_vap )
LVAL	594:3	594:3	9	sp -> jpeg_proc
FIELD	594:3	594:7	10	sp -> jpeg_proc
LEAF_NODE	594:3	594:3	11	sp
LEAF_NODE	594:5	594:5	11	->
LEAF_NODE	594:7	594:7	11	jpeg_proc
ASSIGN_OP	594:16	594:16	9	=
LEAF_NODE	594:16	594:16	10	=
RVAL	594:17	594:24	9	( uint8 ) va_arg ( ap , uint16_vap )
LEAF_NODE	594:17	594:17	10	(
TYPE_NAME	594:18	594:18	10	uint8
LEAF_NODE	594:18	594:18	11	uint8
LEAF_NODE	594:23	594:23	10	)
FUNCTION_CALL	594:24	594:44	10	va_arg ( ap , uint16_vap )
CALLEE	594:24	594:24	11	va_arg
LEAF_NODE	594:24	594:24	12	va_arg
LEAF_NODE	594:30	594:30	11	(
ARGUMENT	594:31	594:31	11	ap
FIELD	594:31	594:31	12	ap
LEAF_NODE	594:31	594:31	13	ap
LEAF_NODE	594:33	594:33	11	,
ARGUMENT	594:34	594:34	11	uint16_vap
FIELD	594:34	594:34	12	uint16_vap
LEAF_NODE	594:34	594:34	13	uint16_vap
LEAF_NODE	594:44	594:44	11	)
LEAF_NODE	594:45	594:45	7	;
JUMP_STATEMENT	595:3	595:8	6	break DESTINATION ;
KEYWORD	595:3	595:3	7	break
LEAF_NODE	595:3	595:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	595:8	595:8	7	;
LABEL	596:2	596:34	6	case TIFFTAG_JPEGRESTARTINTERVAL :
LEAF_NODE	596:2	596:2	7	case
LEAF_NODE	596:7	596:7	7	TIFFTAG_JPEGRESTARTINTERVAL
LEAF_NODE	596:34	596:34	7	:
EXPR_STATEMENT	597:3	597:53	6	sp -> restart_interval = ( uint16 ) va_arg ( ap , uint16_vap ) ;
EXPR	597:3	597:3	7	sp -> restart_interval = ( uint16 ) va_arg ( ap , uint16_vap )
ASSIGN	597:3	597:24	8	sp -> restart_interval = ( uint16 ) va_arg ( ap , uint16_vap )
LVAL	597:3	597:3	9	sp -> restart_interval
FIELD	597:3	597:7	10	sp -> restart_interval
LEAF_NODE	597:3	597:3	11	sp
LEAF_NODE	597:5	597:5	11	->
LEAF_NODE	597:7	597:7	11	restart_interval
ASSIGN_OP	597:23	597:23	9	=
LEAF_NODE	597:23	597:23	10	=
RVAL	597:24	597:32	9	( uint16 ) va_arg ( ap , uint16_vap )
LEAF_NODE	597:24	597:24	10	(
TYPE_NAME	597:25	597:25	10	uint16
LEAF_NODE	597:25	597:25	11	uint16
LEAF_NODE	597:31	597:31	10	)
FUNCTION_CALL	597:32	597:52	10	va_arg ( ap , uint16_vap )
CALLEE	597:32	597:32	11	va_arg
LEAF_NODE	597:32	597:32	12	va_arg
LEAF_NODE	597:38	597:38	11	(
ARGUMENT	597:39	597:39	11	ap
FIELD	597:39	597:39	12	ap
LEAF_NODE	597:39	597:39	13	ap
LEAF_NODE	597:41	597:41	11	,
ARGUMENT	597:42	597:42	11	uint16_vap
FIELD	597:42	597:42	12	uint16_vap
LEAF_NODE	597:42	597:42	13	uint16_vap
LEAF_NODE	597:52	597:52	11	)
LEAF_NODE	597:53	597:53	7	;
JUMP_STATEMENT	598:3	598:8	6	break DESTINATION ;
KEYWORD	598:3	598:3	7	break
LEAF_NODE	598:3	598:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	598:8	598:8	7	;
LABEL	599:2	599:9	6	default :
LEAF_NODE	599:2	599:2	7	default
LEAF_NODE	599:9	599:9	7	:
JUMP_STATEMENT	600:3	600:39	6	return ( * sp -> vsetparent ) ( tif , tag , ap ) ;
KEYWORD	600:3	600:3	7	return
LEAF_NODE	600:3	600:3	8	return
DESTINATION	600:10	600:10	7	( * sp -> vsetparent ) ( tif , tag , ap )
EXPR	600:10	600:10	8	( * sp -> vsetparent ) ( tif , tag , ap )
FUNCTION_CALL	600:10	600:38	9	( * sp -> vsetparent ) ( tif , tag , ap )
CALLEE	600:10	600:26	10	( * sp -> vsetparent )
LEAF_NODE	600:10	600:10	11	(
UNARY_EXPR	600:11	600:12	11	* sp -> vsetparent
UNARY_OPERATOR	600:11	600:11	12	*
LEAF_NODE	600:11	600:11	13	*
FIELD	600:12	600:16	12	sp -> vsetparent
LEAF_NODE	600:12	600:12	13	sp
LEAF_NODE	600:14	600:14	13	->
LEAF_NODE	600:16	600:16	13	vsetparent
LEAF_NODE	600:26	600:26	11	)
LEAF_NODE	600:27	600:27	10	(
ARGUMENT	600:28	600:28	10	tif
FIELD	600:28	600:28	11	tif
LEAF_NODE	600:28	600:28	12	tif
LEAF_NODE	600:31	600:31	10	,
ARGUMENT	600:32	600:32	10	tag
FIELD	600:32	600:32	11	tag
LEAF_NODE	600:32	600:32	12	tag
LEAF_NODE	600:35	600:35	10	,
ARGUMENT	600:36	600:36	10	ap
FIELD	600:36	600:36	11	ap
LEAF_NODE	600:36	600:36	12	ap
LEAF_NODE	600:38	600:38	10	)
LEAF_NODE	600:39	600:39	7	;
LEAF_NODE	601:1	601:1	5	}
EXPR_STATEMENT	602:1	602:32	3	fip = TIFFFieldWithTag ( tif , tag ) ;
EXPR	602:1	602:1	4	fip = TIFFFieldWithTag ( tif , tag )
ASSIGN	602:1	602:7	5	fip = TIFFFieldWithTag ( tif , tag )
LVAL	602:1	602:1	6	fip
FIELD	602:1	602:1	7	fip
LEAF_NODE	602:1	602:1	8	fip
ASSIGN_OP	602:5	602:5	6	=
LEAF_NODE	602:5	602:5	7	=
RVAL	602:7	602:7	6	TIFFFieldWithTag ( tif , tag )
FUNCTION_CALL	602:7	602:31	7	TIFFFieldWithTag ( tif , tag )
CALLEE	602:7	602:7	8	TIFFFieldWithTag
LEAF_NODE	602:7	602:7	9	TIFFFieldWithTag
LEAF_NODE	602:23	602:23	8	(
ARGUMENT	602:24	602:24	8	tif
FIELD	602:24	602:24	9	tif
LEAF_NODE	602:24	602:24	10	tif
LEAF_NODE	602:27	602:27	8	,
ARGUMENT	602:28	602:28	8	tag
FIELD	602:28	602:28	9	tag
LEAF_NODE	602:28	602:28	10	tag
LEAF_NODE	602:31	602:31	8	)
LEAF_NODE	602:32	602:32	4	;
SELECTION	603:1	604:5	3	
KEYWORD	603:1	603:1	4	if
LEAF_NODE	603:1	603:1	5	if
LEAF_NODE	603:3	603:3	4	(
CONDITION	603:5	603:5	4	fip == NULL
EXPR	603:5	603:12	5	fip == NULL
FIELD	603:5	603:5	6	fip
LEAF_NODE	603:5	603:5	7	fip
EQ_OPERATOR	603:9	603:9	6	==
LEAF_NODE	603:9	603:9	7	==
FIELD	603:12	603:12	6	NULL
LEAF_NODE	603:12	603:12	7	NULL
LEAF_NODE	603:17	603:17	4	)
STATEMENTS	604:5	604:5	4	
JUMP_STATEMENT	604:5	604:14	5	return ( 0 ) ;
KEYWORD	604:5	604:5	6	return
LEAF_NODE	604:5	604:5	7	return
DESTINATION	604:11	604:11	6	( 0 )
EXPR	604:11	604:13	7	( 0 )
LEAF_NODE	604:11	604:11	8	(
FIELD	604:12	604:12	8	0
LEAF_NODE	604:12	604:12	9	0
LEAF_NODE	604:13	604:13	8	)
LEAF_NODE	604:14	604:14	6	;
EXPR_STATEMENT	605:1	605:36	3	TIFFSetFieldBit ( tif , fip -> field_bit ) ;
EXPR	605:1	605:1	4	TIFFSetFieldBit ( tif , fip -> field_bit )
FUNCTION_CALL	605:1	605:35	5	TIFFSetFieldBit ( tif , fip -> field_bit )
CALLEE	605:1	605:1	6	TIFFSetFieldBit
LEAF_NODE	605:1	605:1	7	TIFFSetFieldBit
LEAF_NODE	605:16	605:16	6	(
ARGUMENT	605:17	605:17	6	tif
FIELD	605:17	605:17	7	tif
LEAF_NODE	605:17	605:17	8	tif
LEAF_NODE	605:20	605:20	6	,
ARGUMENT	605:21	605:21	6	fip -> field_bit
FIELD	605:21	605:26	7	fip -> field_bit
LEAF_NODE	605:21	605:21	8	fip
LEAF_NODE	605:24	605:24	8	->
LEAF_NODE	605:26	605:26	8	field_bit
LEAF_NODE	605:35	605:35	6	)
LEAF_NODE	605:36	605:36	4	;
EXPR_STATEMENT	606:1	606:33	3	tif -> tif_flags |= TIFF_DIRTYDIRECT ;
EXPR	606:1	606:1	4	tif -> tif_flags |= TIFF_DIRTYDIRECT
ASSIGN	606:1	606:17	5	tif -> tif_flags |= TIFF_DIRTYDIRECT
LVAL	606:1	606:1	6	tif -> tif_flags
FIELD	606:1	606:6	7	tif -> tif_flags
LEAF_NODE	606:1	606:1	8	tif
LEAF_NODE	606:4	606:4	8	->
LEAF_NODE	606:6	606:6	8	tif_flags
ASSIGN_OP	606:15	606:15	6	|=
LEAF_NODE	606:15	606:15	7	|=
RVAL	606:17	606:17	6	TIFF_DIRTYDIRECT
FIELD	606:17	606:17	7	TIFF_DIRTYDIRECT
LEAF_NODE	606:17	606:17	8	TIFF_DIRTYDIRECT
LEAF_NODE	606:33	606:33	4	;
JUMP_STATEMENT	607:1	607:10	3	return ( 1 ) ;
KEYWORD	607:1	607:1	4	return
LEAF_NODE	607:1	607:1	5	return
DESTINATION	607:7	607:7	4	( 1 )
EXPR	607:7	607:9	5	( 1 )
LEAF_NODE	607:7	607:7	6	(
FIELD	607:8	607:8	6	1
LEAF_NODE	607:8	607:8	7	1
LEAF_NODE	607:9	607:9	6	)
LEAF_NODE	607:10	607:10	4	;
LEAF_NODE	608:0	608:0	2	}
FUNCTION_DEF	610:0	648:0	1	
RETURN_TYPE	610:0	610:7	2	static void
LEAF_NODE	610:0	610:0	3	static
TYPE_NAME	610:7	610:7	3	void
LEAF_NODE	610:7	610:7	4	void
FUNCTION_NAME	611:0	611:0	2	OJPEGPrintDir
LEAF_NODE	611:0	611:0	3	OJPEGPrintDir
PARAMETER_LIST	611:13	611:45	2	( TIFF * tif , FILE * fd , long flags )
LEAF_NODE	611:13	611:13	3	(
PARAMETER_DECL	611:14	611:20	3	TIFF * tif
TYPE	611:14	611:18	4	TIFF *
TYPE_NAME	611:14	611:14	5	TIFF
LEAF_NODE	611:14	611:14	6	TIFF
POINTER	611:18	611:18	5	*
LEAF_NODE	611:18	611:18	6	*
NAME	611:20	611:20	4	tif
LEAF_NODE	611:20	611:20	5	tif
LEAF_NODE	611:23	611:23	3	,
PARAMETER_DECL	611:25	611:31	3	FILE * fd
TYPE	611:25	611:29	4	FILE *
TYPE_NAME	611:25	611:25	5	FILE
LEAF_NODE	611:25	611:25	6	FILE
POINTER	611:29	611:29	5	*
LEAF_NODE	611:29	611:29	6	*
NAME	611:31	611:31	4	fd
LEAF_NODE	611:31	611:31	5	fd
LEAF_NODE	611:33	611:33	3	,
PARAMETER_DECL	611:35	611:40	3	long flags
TYPE	611:35	611:35	4	long
TYPE_NAME	611:35	611:35	5	long
LEAF_NODE	611:35	611:35	6	long
NAME	611:40	611:40	4	flags
LEAF_NODE	611:40	611:40	5	flags
LEAF_NODE	611:45	611:45	3	)
LEAF_NODE	612:0	612:0	2	{
STATEMENTS	613:1	646:1	2	
SIMPLE_DECL	613:1	613:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	613:1	613:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	613:1	613:11	5	OJPEGState *
TYPE_NAME	613:1	613:1	6	OJPEGState
LEAF_NODE	613:1	613:1	7	OJPEGState
POINTER	613:11	613:11	6	*
LEAF_NODE	613:11	613:11	7	*
NAME	613:13	613:13	5	sp
LEAF_NODE	613:13	613:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	613:13	613:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	613:13	613:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	613:13	613:13	7	sp
NAME	613:13	613:13	8	sp
LEAF_NODE	613:13	613:13	9	sp
ASSIGN_OP	613:15	613:15	7	=
LEAF_NODE	613:15	613:15	8	=
RVAL	613:16	613:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	613:16	613:16	8	(
TYPE_NAME	613:17	613:17	8	OJPEGState
LEAF_NODE	613:17	613:17	9	OJPEGState
LEAF_NODE	613:27	613:27	8	*
LEAF_NODE	613:28	613:28	8	)
FIELD	613:29	613:34	8	tif -> tif_data
LEAF_NODE	613:29	613:29	9	tif
LEAF_NODE	613:32	613:32	9	->
LEAF_NODE	613:34	613:34	9	tif_data
LEAF_NODE	613:42	613:42	4	;
SIMPLE_DECL	614:1	614:8	3	uint8 m ;
VAR_DECL	614:1	614:7	4	uint8 m
TYPE	614:1	614:1	5	uint8
TYPE_NAME	614:1	614:1	6	uint8
LEAF_NODE	614:1	614:1	7	uint8
NAME	614:7	614:7	5	m
LEAF_NODE	614:7	614:7	6	m
LEAF_NODE	614:8	614:8	4	;
EXPR_STATEMENT	615:1	615:12	3	( void ) flags ;
EXPR	615:1	615:7	4	( void ) flags
LEAF_NODE	615:1	615:1	5	(
TYPE_NAME	615:2	615:2	5	void
LEAF_NODE	615:2	615:2	6	void
LEAF_NODE	615:6	615:6	5	)
FIELD	615:7	615:7	5	flags
LEAF_NODE	615:7	615:7	6	flags
LEAF_NODE	615:12	615:12	4	;
EXPR_STATEMENT	616:1	616:17	3	assert ( sp != NULL ) ;
EXPR	616:1	616:1	4	assert ( sp != NULL )
FUNCTION_CALL	616:1	616:16	5	assert ( sp != NULL )
CALLEE	616:1	616:1	6	assert
LEAF_NODE	616:1	616:1	7	assert
LEAF_NODE	616:7	616:7	6	(
ARGUMENT	616:8	616:12	6	sp != NULL
FIELD	616:8	616:8	7	sp
LEAF_NODE	616:8	616:8	8	sp
EQ_OPERATOR	616:10	616:10	7	!=
LEAF_NODE	616:10	616:10	8	!=
FIELD	616:12	616:12	7	NULL
LEAF_NODE	616:12	616:12	8	NULL
LEAF_NODE	616:16	616:16	6	)
LEAF_NODE	616:17	616:17	4	;
SELECTION	617:1	618:2	3	
KEYWORD	617:1	617:1	4	if
LEAF_NODE	617:1	617:1	5	if
LEAF_NODE	617:4	617:4	4	(
CONDITION	617:5	617:5	4	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGINTERCHANGEFORMAT )
EXPR	617:5	617:5	5	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGINTERCHANGEFORMAT )
FUNCTION_CALL	617:5	617:55	6	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGINTERCHANGEFORMAT )
CALLEE	617:5	617:5	7	TIFFFieldSet
LEAF_NODE	617:5	617:5	8	TIFFFieldSet
LEAF_NODE	617:17	617:17	7	(
ARGUMENT	617:18	617:18	7	tif
FIELD	617:18	617:18	8	tif
LEAF_NODE	617:18	617:18	9	tif
LEAF_NODE	617:21	617:21	7	,
ARGUMENT	617:22	617:22	7	FIELD_OJPEG_JPEGINTERCHANGEFORMAT
FIELD	617:22	617:22	8	FIELD_OJPEG_JPEGINTERCHANGEFORMAT
LEAF_NODE	617:22	617:22	9	FIELD_OJPEG_JPEGINTERCHANGEFORMAT
LEAF_NODE	617:55	617:55	7	)
LEAF_NODE	617:56	617:56	4	)
STATEMENTS	618:2	618:2	4	
LEAF_NODE	618:2	618:2	5	fprintf
LEAF_NODE	618:9	618:9	3	(
LEAF_NODE	618:10	618:10	3	fd
LEAF_NODE	618:12	618:12	3	,
LEAF_NODE	618:13	618:13	3	"  JpegInterchangeFormat: "
LEAF_NODE	618:41	618:41	3	TIFF_UINT64_FORMAT
LEAF_NODE	618:60	618:60	3	"\n"
LEAF_NODE	618:64	618:64	3	,
LEAF_NODE	618:65	618:65	3	(
LEAF_NODE	618:66	618:66	3	TIFF_UINT64_T
LEAF_NODE	618:79	618:79	3	)
LEAF_NODE	618:80	618:80	3	sp
LEAF_NODE	618:82	618:82	3	->
LEAF_NODE	618:84	618:84	3	jpeg_interchange_format
LEAF_NODE	618:107	618:107	3	)
LEAF_NODE	618:108	618:108	3	;
SELECTION	619:1	620:2	3	
KEYWORD	619:1	619:1	4	if
LEAF_NODE	619:1	619:1	5	if
LEAF_NODE	619:4	619:4	4	(
CONDITION	619:5	619:5	4	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH )
EXPR	619:5	619:5	5	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH )
FUNCTION_CALL	619:5	619:61	6	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH )
CALLEE	619:5	619:5	7	TIFFFieldSet
LEAF_NODE	619:5	619:5	8	TIFFFieldSet
LEAF_NODE	619:17	619:17	7	(
ARGUMENT	619:18	619:18	7	tif
FIELD	619:18	619:18	8	tif
LEAF_NODE	619:18	619:18	9	tif
LEAF_NODE	619:21	619:21	7	,
ARGUMENT	619:22	619:22	7	FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH
FIELD	619:22	619:22	8	FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH
LEAF_NODE	619:22	619:22	9	FIELD_OJPEG_JPEGINTERCHANGEFORMATLENGTH
LEAF_NODE	619:61	619:61	7	)
LEAF_NODE	619:62	619:62	4	)
STATEMENTS	620:2	620:2	4	
LEAF_NODE	620:2	620:2	5	fprintf
LEAF_NODE	620:9	620:9	3	(
LEAF_NODE	620:10	620:10	3	fd
LEAF_NODE	620:12	620:12	3	,
LEAF_NODE	620:13	620:13	3	"  JpegInterchangeFormatLength: "
LEAF_NODE	620:47	620:47	3	TIFF_UINT64_FORMAT
LEAF_NODE	620:66	620:66	3	"\n"
LEAF_NODE	620:70	620:70	3	,
LEAF_NODE	620:71	620:71	3	(
LEAF_NODE	620:72	620:72	3	TIFF_UINT64_T
LEAF_NODE	620:85	620:85	3	)
LEAF_NODE	620:86	620:86	3	sp
LEAF_NODE	620:88	620:88	3	->
LEAF_NODE	620:90	620:90	3	jpeg_interchange_format_length
LEAF_NODE	620:120	620:120	3	)
LEAF_NODE	620:121	620:121	3	;
SELECTION	621:1	622:1	3	
KEYWORD	621:1	621:1	4	if
LEAF_NODE	621:1	621:1	5	if
LEAF_NODE	621:4	621:4	4	(
CONDITION	621:5	621:5	4	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGQTABLES )
EXPR	621:5	621:5	5	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGQTABLES )
FUNCTION_CALL	621:5	621:45	6	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGQTABLES )
CALLEE	621:5	621:5	7	TIFFFieldSet
LEAF_NODE	621:5	621:5	8	TIFFFieldSet
LEAF_NODE	621:17	621:17	7	(
ARGUMENT	621:18	621:18	7	tif
FIELD	621:18	621:18	8	tif
LEAF_NODE	621:18	621:18	9	tif
LEAF_NODE	621:21	621:21	7	,
ARGUMENT	621:22	621:22	7	FIELD_OJPEG_JPEGQTABLES
FIELD	621:22	621:22	8	FIELD_OJPEG_JPEGQTABLES
LEAF_NODE	621:22	621:22	9	FIELD_OJPEG_JPEGQTABLES
LEAF_NODE	621:45	621:45	7	)
LEAF_NODE	621:46	621:46	4	)
STATEMENTS	622:1	627:1	4	
LEAF_NODE	622:1	622:1	5	{
STATEMENTS	623:2	626:2	5	
EXPR_STATEMENT	623:2	623:30	6	fprintf ( fd , "  JpegQTables:" ) ;
EXPR	623:2	623:2	7	fprintf ( fd , "  JpegQTables:" )
FUNCTION_CALL	623:2	623:29	8	fprintf ( fd , "  JpegQTables:" )
CALLEE	623:2	623:2	9	fprintf
LEAF_NODE	623:2	623:2	10	fprintf
LEAF_NODE	623:9	623:9	9	(
ARGUMENT	623:10	623:10	9	fd
FIELD	623:10	623:10	10	fd
LEAF_NODE	623:10	623:10	11	fd
LEAF_NODE	623:12	623:12	9	,
ARGUMENT	623:13	623:13	9	"  JpegQTables:"
FIELD	623:13	623:13	10	"  JpegQTables:"
LEAF_NODE	623:13	623:13	11	"  JpegQTables:"
LEAF_NODE	623:29	623:29	9	)
LEAF_NODE	623:30	623:30	7	;
ITERATION	624:2	625:3	6	
KEYWORD	624:2	624:2	7	for
LEAF_NODE	624:2	624:2	8	for
LEAF_NODE	624:6	624:6	7	(
FOR_INIT	624:7	624:10	7	m = 0 ;
EXPR	624:7	624:7	8	m = 0
ASSIGN	624:7	624:9	9	m = 0
LVAL	624:7	624:7	10	m
FIELD	624:7	624:7	11	m
LEAF_NODE	624:7	624:7	12	m
ASSIGN_OP	624:8	624:8	10	=
LEAF_NODE	624:8	624:8	11	=
RVAL	624:9	624:9	10	0
FIELD	624:9	624:9	11	0
LEAF_NODE	624:9	624:9	12	0
LEAF_NODE	624:10	624:10	8	;
CONDITION	624:12	624:12	7	m < sp -> qtable_offset_count
EXPR	624:12	624:14	8	m < sp -> qtable_offset_count
FIELD	624:12	624:12	9	m
LEAF_NODE	624:12	624:12	10	m
REL_OPERATOR	624:13	624:13	9	<
LEAF_NODE	624:13	624:13	10	<
FIELD	624:14	624:18	9	sp -> qtable_offset_count
LEAF_NODE	624:14	624:14	10	sp
LEAF_NODE	624:16	624:16	10	->
LEAF_NODE	624:18	624:18	10	qtable_offset_count
LEAF_NODE	624:37	624:37	7	;
FOR_EXPR	624:39	624:39	7	m ++
EXPR	624:39	624:39	8	m ++
FIELD	624:39	624:40	9	m ++
LEAF_NODE	624:39	624:39	10	m
LEAF_NODE	624:40	624:40	10	++
LEAF_NODE	624:42	624:42	7	)
STATEMENTS	625:3	625:3	7	
LEAF_NODE	625:3	625:3	8	fprintf
LEAF_NODE	625:10	625:10	6	(
LEAF_NODE	625:11	625:11	6	fd
LEAF_NODE	625:13	625:13	6	,
LEAF_NODE	625:14	625:14	6	" "
LEAF_NODE	625:18	625:18	6	TIFF_UINT64_FORMAT
LEAF_NODE	625:36	625:36	6	,
LEAF_NODE	625:37	625:37	6	(
LEAF_NODE	625:38	625:38	6	TIFF_UINT64_T
LEAF_NODE	625:51	625:51	6	)
LEAF_NODE	625:52	625:52	6	sp
LEAF_NODE	625:54	625:54	6	->
LEAF_NODE	625:56	625:56	6	qtable_offset
LEAF_NODE	625:69	625:69	6	[
LEAF_NODE	625:70	625:70	6	m
LEAF_NODE	625:71	625:71	6	]
LEAF_NODE	625:72	625:72	6	)
LEAF_NODE	625:73	625:73	6	;
EXPR_STATEMENT	626:2	626:18	6	fprintf ( fd , "\n" ) ;
EXPR	626:2	626:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	626:2	626:17	8	fprintf ( fd , "\n" )
CALLEE	626:2	626:2	9	fprintf
LEAF_NODE	626:2	626:2	10	fprintf
LEAF_NODE	626:9	626:9	9	(
ARGUMENT	626:10	626:10	9	fd
FIELD	626:10	626:10	10	fd
LEAF_NODE	626:10	626:10	11	fd
LEAF_NODE	626:12	626:12	9	,
ARGUMENT	626:13	626:13	9	"\n"
FIELD	626:13	626:13	10	"\n"
LEAF_NODE	626:13	626:13	11	"\n"
LEAF_NODE	626:17	626:17	9	)
LEAF_NODE	626:18	626:18	7	;
LEAF_NODE	627:1	627:1	5	}
SELECTION	628:1	629:1	3	
KEYWORD	628:1	628:1	4	if
LEAF_NODE	628:1	628:1	5	if
LEAF_NODE	628:4	628:4	4	(
CONDITION	628:5	628:5	4	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGDCTABLES )
EXPR	628:5	628:5	5	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGDCTABLES )
FUNCTION_CALL	628:5	628:46	6	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGDCTABLES )
CALLEE	628:5	628:5	7	TIFFFieldSet
LEAF_NODE	628:5	628:5	8	TIFFFieldSet
LEAF_NODE	628:17	628:17	7	(
ARGUMENT	628:18	628:18	7	tif
FIELD	628:18	628:18	8	tif
LEAF_NODE	628:18	628:18	9	tif
LEAF_NODE	628:21	628:21	7	,
ARGUMENT	628:22	628:22	7	FIELD_OJPEG_JPEGDCTABLES
FIELD	628:22	628:22	8	FIELD_OJPEG_JPEGDCTABLES
LEAF_NODE	628:22	628:22	9	FIELD_OJPEG_JPEGDCTABLES
LEAF_NODE	628:46	628:46	7	)
LEAF_NODE	628:47	628:47	4	)
STATEMENTS	629:1	634:1	4	
LEAF_NODE	629:1	629:1	5	{
STATEMENTS	630:2	633:2	5	
EXPR_STATEMENT	630:2	630:31	6	fprintf ( fd , "  JpegDcTables:" ) ;
EXPR	630:2	630:2	7	fprintf ( fd , "  JpegDcTables:" )
FUNCTION_CALL	630:2	630:30	8	fprintf ( fd , "  JpegDcTables:" )
CALLEE	630:2	630:2	9	fprintf
LEAF_NODE	630:2	630:2	10	fprintf
LEAF_NODE	630:9	630:9	9	(
ARGUMENT	630:10	630:10	9	fd
FIELD	630:10	630:10	10	fd
LEAF_NODE	630:10	630:10	11	fd
LEAF_NODE	630:12	630:12	9	,
ARGUMENT	630:13	630:13	9	"  JpegDcTables:"
FIELD	630:13	630:13	10	"  JpegDcTables:"
LEAF_NODE	630:13	630:13	11	"  JpegDcTables:"
LEAF_NODE	630:30	630:30	9	)
LEAF_NODE	630:31	630:31	7	;
ITERATION	631:2	632:3	6	
KEYWORD	631:2	631:2	7	for
LEAF_NODE	631:2	631:2	8	for
LEAF_NODE	631:6	631:6	7	(
FOR_INIT	631:7	631:10	7	m = 0 ;
EXPR	631:7	631:7	8	m = 0
ASSIGN	631:7	631:9	9	m = 0
LVAL	631:7	631:7	10	m
FIELD	631:7	631:7	11	m
LEAF_NODE	631:7	631:7	12	m
ASSIGN_OP	631:8	631:8	10	=
LEAF_NODE	631:8	631:8	11	=
RVAL	631:9	631:9	10	0
FIELD	631:9	631:9	11	0
LEAF_NODE	631:9	631:9	12	0
LEAF_NODE	631:10	631:10	8	;
CONDITION	631:12	631:12	7	m < sp -> dctable_offset_count
EXPR	631:12	631:14	8	m < sp -> dctable_offset_count
FIELD	631:12	631:12	9	m
LEAF_NODE	631:12	631:12	10	m
REL_OPERATOR	631:13	631:13	9	<
LEAF_NODE	631:13	631:13	10	<
FIELD	631:14	631:18	9	sp -> dctable_offset_count
LEAF_NODE	631:14	631:14	10	sp
LEAF_NODE	631:16	631:16	10	->
LEAF_NODE	631:18	631:18	10	dctable_offset_count
LEAF_NODE	631:38	631:38	7	;
FOR_EXPR	631:40	631:40	7	m ++
EXPR	631:40	631:40	8	m ++
FIELD	631:40	631:41	9	m ++
LEAF_NODE	631:40	631:40	10	m
LEAF_NODE	631:41	631:41	10	++
LEAF_NODE	631:43	631:43	7	)
STATEMENTS	632:3	632:3	7	
LEAF_NODE	632:3	632:3	8	fprintf
LEAF_NODE	632:10	632:10	6	(
LEAF_NODE	632:11	632:11	6	fd
LEAF_NODE	632:13	632:13	6	,
LEAF_NODE	632:14	632:14	6	" "
LEAF_NODE	632:18	632:18	6	TIFF_UINT64_FORMAT
LEAF_NODE	632:36	632:36	6	,
LEAF_NODE	632:37	632:37	6	(
LEAF_NODE	632:38	632:38	6	TIFF_UINT64_T
LEAF_NODE	632:51	632:51	6	)
LEAF_NODE	632:52	632:52	6	sp
LEAF_NODE	632:54	632:54	6	->
LEAF_NODE	632:56	632:56	6	dctable_offset
LEAF_NODE	632:70	632:70	6	[
LEAF_NODE	632:71	632:71	6	m
LEAF_NODE	632:72	632:72	6	]
LEAF_NODE	632:73	632:73	6	)
LEAF_NODE	632:74	632:74	6	;
EXPR_STATEMENT	633:2	633:18	6	fprintf ( fd , "\n" ) ;
EXPR	633:2	633:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	633:2	633:17	8	fprintf ( fd , "\n" )
CALLEE	633:2	633:2	9	fprintf
LEAF_NODE	633:2	633:2	10	fprintf
LEAF_NODE	633:9	633:9	9	(
ARGUMENT	633:10	633:10	9	fd
FIELD	633:10	633:10	10	fd
LEAF_NODE	633:10	633:10	11	fd
LEAF_NODE	633:12	633:12	9	,
ARGUMENT	633:13	633:13	9	"\n"
FIELD	633:13	633:13	10	"\n"
LEAF_NODE	633:13	633:13	11	"\n"
LEAF_NODE	633:17	633:17	9	)
LEAF_NODE	633:18	633:18	7	;
LEAF_NODE	634:1	634:1	5	}
SELECTION	635:1	636:1	3	
KEYWORD	635:1	635:1	4	if
LEAF_NODE	635:1	635:1	5	if
LEAF_NODE	635:4	635:4	4	(
CONDITION	635:5	635:5	4	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGACTABLES )
EXPR	635:5	635:5	5	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGACTABLES )
FUNCTION_CALL	635:5	635:46	6	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGACTABLES )
CALLEE	635:5	635:5	7	TIFFFieldSet
LEAF_NODE	635:5	635:5	8	TIFFFieldSet
LEAF_NODE	635:17	635:17	7	(
ARGUMENT	635:18	635:18	7	tif
FIELD	635:18	635:18	8	tif
LEAF_NODE	635:18	635:18	9	tif
LEAF_NODE	635:21	635:21	7	,
ARGUMENT	635:22	635:22	7	FIELD_OJPEG_JPEGACTABLES
FIELD	635:22	635:22	8	FIELD_OJPEG_JPEGACTABLES
LEAF_NODE	635:22	635:22	9	FIELD_OJPEG_JPEGACTABLES
LEAF_NODE	635:46	635:46	7	)
LEAF_NODE	635:47	635:47	4	)
STATEMENTS	636:1	641:1	4	
LEAF_NODE	636:1	636:1	5	{
STATEMENTS	637:2	640:2	5	
EXPR_STATEMENT	637:2	637:31	6	fprintf ( fd , "  JpegAcTables:" ) ;
EXPR	637:2	637:2	7	fprintf ( fd , "  JpegAcTables:" )
FUNCTION_CALL	637:2	637:30	8	fprintf ( fd , "  JpegAcTables:" )
CALLEE	637:2	637:2	9	fprintf
LEAF_NODE	637:2	637:2	10	fprintf
LEAF_NODE	637:9	637:9	9	(
ARGUMENT	637:10	637:10	9	fd
FIELD	637:10	637:10	10	fd
LEAF_NODE	637:10	637:10	11	fd
LEAF_NODE	637:12	637:12	9	,
ARGUMENT	637:13	637:13	9	"  JpegAcTables:"
FIELD	637:13	637:13	10	"  JpegAcTables:"
LEAF_NODE	637:13	637:13	11	"  JpegAcTables:"
LEAF_NODE	637:30	637:30	9	)
LEAF_NODE	637:31	637:31	7	;
ITERATION	638:2	639:3	6	
KEYWORD	638:2	638:2	7	for
LEAF_NODE	638:2	638:2	8	for
LEAF_NODE	638:6	638:6	7	(
FOR_INIT	638:7	638:10	7	m = 0 ;
EXPR	638:7	638:7	8	m = 0
ASSIGN	638:7	638:9	9	m = 0
LVAL	638:7	638:7	10	m
FIELD	638:7	638:7	11	m
LEAF_NODE	638:7	638:7	12	m
ASSIGN_OP	638:8	638:8	10	=
LEAF_NODE	638:8	638:8	11	=
RVAL	638:9	638:9	10	0
FIELD	638:9	638:9	11	0
LEAF_NODE	638:9	638:9	12	0
LEAF_NODE	638:10	638:10	8	;
CONDITION	638:12	638:12	7	m < sp -> actable_offset_count
EXPR	638:12	638:14	8	m < sp -> actable_offset_count
FIELD	638:12	638:12	9	m
LEAF_NODE	638:12	638:12	10	m
REL_OPERATOR	638:13	638:13	9	<
LEAF_NODE	638:13	638:13	10	<
FIELD	638:14	638:18	9	sp -> actable_offset_count
LEAF_NODE	638:14	638:14	10	sp
LEAF_NODE	638:16	638:16	10	->
LEAF_NODE	638:18	638:18	10	actable_offset_count
LEAF_NODE	638:38	638:38	7	;
FOR_EXPR	638:40	638:40	7	m ++
EXPR	638:40	638:40	8	m ++
FIELD	638:40	638:41	9	m ++
LEAF_NODE	638:40	638:40	10	m
LEAF_NODE	638:41	638:41	10	++
LEAF_NODE	638:43	638:43	7	)
STATEMENTS	639:3	639:3	7	
LEAF_NODE	639:3	639:3	8	fprintf
LEAF_NODE	639:10	639:10	6	(
LEAF_NODE	639:11	639:11	6	fd
LEAF_NODE	639:13	639:13	6	,
LEAF_NODE	639:14	639:14	6	" "
LEAF_NODE	639:18	639:18	6	TIFF_UINT64_FORMAT
LEAF_NODE	639:36	639:36	6	,
LEAF_NODE	639:37	639:37	6	(
LEAF_NODE	639:38	639:38	6	TIFF_UINT64_T
LEAF_NODE	639:51	639:51	6	)
LEAF_NODE	639:52	639:52	6	sp
LEAF_NODE	639:54	639:54	6	->
LEAF_NODE	639:56	639:56	6	actable_offset
LEAF_NODE	639:70	639:70	6	[
LEAF_NODE	639:71	639:71	6	m
LEAF_NODE	639:72	639:72	6	]
LEAF_NODE	639:73	639:73	6	)
LEAF_NODE	639:74	639:74	6	;
EXPR_STATEMENT	640:2	640:18	6	fprintf ( fd , "\n" ) ;
EXPR	640:2	640:2	7	fprintf ( fd , "\n" )
FUNCTION_CALL	640:2	640:17	8	fprintf ( fd , "\n" )
CALLEE	640:2	640:2	9	fprintf
LEAF_NODE	640:2	640:2	10	fprintf
LEAF_NODE	640:9	640:9	9	(
ARGUMENT	640:10	640:10	9	fd
FIELD	640:10	640:10	10	fd
LEAF_NODE	640:10	640:10	11	fd
LEAF_NODE	640:12	640:12	9	,
ARGUMENT	640:13	640:13	9	"\n"
FIELD	640:13	640:13	10	"\n"
LEAF_NODE	640:13	640:13	11	"\n"
LEAF_NODE	640:17	640:17	9	)
LEAF_NODE	640:18	640:18	7	;
LEAF_NODE	641:1	641:1	5	}
SELECTION	642:1	643:2	3	
KEYWORD	642:1	642:1	4	if
LEAF_NODE	642:1	642:1	5	if
LEAF_NODE	642:4	642:4	4	(
CONDITION	642:5	642:5	4	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGPROC )
EXPR	642:5	642:5	5	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGPROC )
FUNCTION_CALL	642:5	642:42	6	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGPROC )
CALLEE	642:5	642:5	7	TIFFFieldSet
LEAF_NODE	642:5	642:5	8	TIFFFieldSet
LEAF_NODE	642:17	642:17	7	(
ARGUMENT	642:18	642:18	7	tif
FIELD	642:18	642:18	8	tif
LEAF_NODE	642:18	642:18	9	tif
LEAF_NODE	642:21	642:21	7	,
ARGUMENT	642:22	642:22	7	FIELD_OJPEG_JPEGPROC
FIELD	642:22	642:22	8	FIELD_OJPEG_JPEGPROC
LEAF_NODE	642:22	642:22	9	FIELD_OJPEG_JPEGPROC
LEAF_NODE	642:42	642:42	7	)
LEAF_NODE	642:43	642:43	4	)
STATEMENTS	643:2	643:2	4	
EXPR_STATEMENT	643:2	643:60	5	fprintf ( fd , "  JpegProc: %u\n" , ( unsigned int ) sp -> jpeg_proc ) ;
EXPR	643:2	643:2	6	fprintf ( fd , "  JpegProc: %u\n" , ( unsigned int ) sp -> jpeg_proc )
FUNCTION_CALL	643:2	643:59	7	fprintf ( fd , "  JpegProc: %u\n" , ( unsigned int ) sp -> jpeg_proc )
CALLEE	643:2	643:2	8	fprintf
LEAF_NODE	643:2	643:2	9	fprintf
LEAF_NODE	643:9	643:9	8	(
ARGUMENT	643:10	643:10	8	fd
FIELD	643:10	643:10	9	fd
LEAF_NODE	643:10	643:10	10	fd
LEAF_NODE	643:12	643:12	8	,
ARGUMENT	643:13	643:13	8	"  JpegProc: %u\n"
FIELD	643:13	643:13	9	"  JpegProc: %u\n"
LEAF_NODE	643:13	643:13	10	"  JpegProc: %u\n"
LEAF_NODE	643:31	643:31	8	,
ARGUMENT	643:32	643:46	8	( unsigned int ) sp -> jpeg_proc
LEAF_NODE	643:32	643:32	9	(
TYPE_NAME	643:33	643:42	9	unsigned int
LEAF_NODE	643:33	643:33	10	unsigned
LEAF_NODE	643:42	643:42	10	int
LEAF_NODE	643:45	643:45	9	)
FIELD	643:46	643:50	9	sp -> jpeg_proc
LEAF_NODE	643:46	643:46	10	sp
LEAF_NODE	643:48	643:48	10	->
LEAF_NODE	643:50	643:50	10	jpeg_proc
LEAF_NODE	643:59	643:59	8	)
LEAF_NODE	643:60	643:60	6	;
SELECTION	644:1	645:2	3	
KEYWORD	644:1	644:1	4	if
LEAF_NODE	644:1	644:1	5	if
LEAF_NODE	644:4	644:4	4	(
CONDITION	644:5	644:5	4	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGRESTARTINTERVAL )
EXPR	644:5	644:5	5	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGRESTARTINTERVAL )
FUNCTION_CALL	644:5	644:53	6	TIFFFieldSet ( tif , FIELD_OJPEG_JPEGRESTARTINTERVAL )
CALLEE	644:5	644:5	7	TIFFFieldSet
LEAF_NODE	644:5	644:5	8	TIFFFieldSet
LEAF_NODE	644:17	644:17	7	(
ARGUMENT	644:18	644:18	7	tif
FIELD	644:18	644:18	8	tif
LEAF_NODE	644:18	644:18	9	tif
LEAF_NODE	644:21	644:21	7	,
ARGUMENT	644:22	644:22	7	FIELD_OJPEG_JPEGRESTARTINTERVAL
FIELD	644:22	644:22	8	FIELD_OJPEG_JPEGRESTARTINTERVAL
LEAF_NODE	644:22	644:22	9	FIELD_OJPEG_JPEGRESTARTINTERVAL
LEAF_NODE	644:53	644:53	7	)
LEAF_NODE	644:54	644:54	4	)
STATEMENTS	645:2	645:2	4	
EXPR_STATEMENT	645:2	645:78	5	fprintf ( fd , "  JpegRestartInterval: %u\n" , ( unsigned int ) sp -> restart_interval ) ;
EXPR	645:2	645:2	6	fprintf ( fd , "  JpegRestartInterval: %u\n" , ( unsigned int ) sp -> restart_interval )
FUNCTION_CALL	645:2	645:77	7	fprintf ( fd , "  JpegRestartInterval: %u\n" , ( unsigned int ) sp -> restart_interval )
CALLEE	645:2	645:2	8	fprintf
LEAF_NODE	645:2	645:2	9	fprintf
LEAF_NODE	645:9	645:9	8	(
ARGUMENT	645:10	645:10	8	fd
FIELD	645:10	645:10	9	fd
LEAF_NODE	645:10	645:10	10	fd
LEAF_NODE	645:12	645:12	8	,
ARGUMENT	645:13	645:13	8	"  JpegRestartInterval: %u\n"
FIELD	645:13	645:13	9	"  JpegRestartInterval: %u\n"
LEAF_NODE	645:13	645:13	10	"  JpegRestartInterval: %u\n"
LEAF_NODE	645:42	645:42	8	,
ARGUMENT	645:43	645:57	8	( unsigned int ) sp -> restart_interval
LEAF_NODE	645:43	645:43	9	(
TYPE_NAME	645:44	645:53	9	unsigned int
LEAF_NODE	645:44	645:44	10	unsigned
LEAF_NODE	645:53	645:53	10	int
LEAF_NODE	645:56	645:56	9	)
FIELD	645:57	645:61	9	sp -> restart_interval
LEAF_NODE	645:57	645:57	10	sp
LEAF_NODE	645:59	645:59	10	->
LEAF_NODE	645:61	645:61	10	restart_interval
LEAF_NODE	645:77	645:77	8	)
LEAF_NODE	645:78	645:78	6	;
SELECTION	646:1	647:2	3	
KEYWORD	646:1	646:1	4	if
LEAF_NODE	646:1	646:1	5	if
LEAF_NODE	646:4	646:4	4	(
CONDITION	646:5	646:5	4	sp -> printdir
EXPR	646:5	646:5	5	sp -> printdir
FIELD	646:5	646:9	6	sp -> printdir
LEAF_NODE	646:5	646:5	7	sp
LEAF_NODE	646:7	646:7	7	->
LEAF_NODE	646:9	646:9	7	printdir
LEAF_NODE	646:17	646:17	4	)
STATEMENTS	647:2	647:2	4	
EXPR_STATEMENT	647:2	647:33	5	( * sp -> printdir ) ( tif , fd , flags ) ;
EXPR	647:2	647:2	6	( * sp -> printdir ) ( tif , fd , flags )
FUNCTION_CALL	647:2	647:32	7	( * sp -> printdir ) ( tif , fd , flags )
CALLEE	647:2	647:16	8	( * sp -> printdir )
LEAF_NODE	647:2	647:2	9	(
UNARY_EXPR	647:3	647:4	9	* sp -> printdir
UNARY_OPERATOR	647:3	647:3	10	*
LEAF_NODE	647:3	647:3	11	*
FIELD	647:4	647:8	10	sp -> printdir
LEAF_NODE	647:4	647:4	11	sp
LEAF_NODE	647:6	647:6	11	->
LEAF_NODE	647:8	647:8	11	printdir
LEAF_NODE	647:16	647:16	9	)
LEAF_NODE	647:17	647:17	8	(
ARGUMENT	647:18	647:18	8	tif
FIELD	647:18	647:18	9	tif
LEAF_NODE	647:18	647:18	10	tif
LEAF_NODE	647:21	647:21	8	,
ARGUMENT	647:23	647:23	8	fd
FIELD	647:23	647:23	9	fd
LEAF_NODE	647:23	647:23	10	fd
LEAF_NODE	647:25	647:25	8	,
ARGUMENT	647:27	647:27	8	flags
FIELD	647:27	647:27	9	flags
LEAF_NODE	647:27	647:27	10	flags
LEAF_NODE	647:32	647:32	8	)
LEAF_NODE	647:33	647:33	6	;
LEAF_NODE	648:0	648:0	2	}
FUNCTION_DEF	650:0	655:0	1	
RETURN_TYPE	650:0	650:7	2	static int
LEAF_NODE	650:0	650:0	3	static
TYPE_NAME	650:7	650:7	3	int
LEAF_NODE	650:7	650:7	4	int
FUNCTION_NAME	651:0	651:0	2	OJPEGFixupTags
LEAF_NODE	651:0	651:0	3	OJPEGFixupTags
PARAMETER_LIST	651:14	651:24	2	( TIFF * tif )
LEAF_NODE	651:14	651:14	3	(
PARAMETER_DECL	651:15	651:21	3	TIFF * tif
TYPE	651:15	651:19	4	TIFF *
TYPE_NAME	651:15	651:15	5	TIFF
LEAF_NODE	651:15	651:15	6	TIFF
POINTER	651:19	651:19	5	*
LEAF_NODE	651:19	651:19	6	*
NAME	651:21	651:21	4	tif
LEAF_NODE	651:21	651:21	5	tif
LEAF_NODE	651:24	651:24	3	)
LEAF_NODE	652:0	652:0	2	{
STATEMENTS	653:1	654:1	2	
EXPR_STATEMENT	653:1	653:11	3	( void ) tif ;
EXPR	653:1	653:8	4	( void ) tif
LEAF_NODE	653:1	653:1	5	(
TYPE_NAME	653:2	653:2	5	void
LEAF_NODE	653:2	653:2	6	void
LEAF_NODE	653:6	653:6	5	)
FIELD	653:8	653:8	5	tif
LEAF_NODE	653:8	653:8	6	tif
LEAF_NODE	653:11	653:11	4	;
JUMP_STATEMENT	654:1	654:10	3	return ( 1 ) ;
KEYWORD	654:1	654:1	4	return
LEAF_NODE	654:1	654:1	5	return
DESTINATION	654:7	654:7	4	( 1 )
EXPR	654:7	654:9	5	( 1 )
LEAF_NODE	654:7	654:7	6	(
FIELD	654:8	654:8	6	1
LEAF_NODE	654:8	654:8	7	1
LEAF_NODE	654:9	654:9	6	)
LEAF_NODE	654:10	654:10	4	;
LEAF_NODE	655:0	655:0	2	}
FUNCTION_DEF	657:0	663:0	1	
RETURN_TYPE	657:0	657:7	2	static int
LEAF_NODE	657:0	657:0	3	static
TYPE_NAME	657:7	657:7	3	int
LEAF_NODE	657:7	657:7	4	int
FUNCTION_NAME	658:0	658:0	2	OJPEGSetupDecode
LEAF_NODE	658:0	658:0	3	OJPEGSetupDecode
PARAMETER_LIST	658:16	658:26	2	( TIFF * tif )
LEAF_NODE	658:16	658:16	3	(
PARAMETER_DECL	658:17	658:23	3	TIFF * tif
TYPE	658:17	658:21	4	TIFF *
TYPE_NAME	658:17	658:17	5	TIFF
LEAF_NODE	658:17	658:17	6	TIFF
POINTER	658:21	658:21	5	*
LEAF_NODE	658:21	658:21	6	*
NAME	658:23	658:23	4	tif
LEAF_NODE	658:23	658:23	5	tif
LEAF_NODE	658:26	658:26	3	)
LEAF_NODE	659:0	659:0	2	{
STATEMENTS	660:1	662:1	2	
LEAF_NODE	660:1	660:1	3	static
SIMPLE_DECL	660:8	660:46	3	const char [ ] module ; module = "OJPEGSetupDecode" ;
VAR_DECL	660:8	660:19	4	const char [ ] module ; module = "OJPEGSetupDecode"
TYPE	660:8	660:25	5	const char [ ]
TYPE_NAME	660:8	660:14	6	const char
LEAF_NODE	660:8	660:8	7	const
LEAF_NODE	660:14	660:14	7	char
TYPE_SUFFIX	660:25	660:26	6	[ ]
LEAF_NODE	660:25	660:25	7	[
LEAF_NODE	660:26	660:26	7	]
NAME	660:19	660:19	5	module
LEAF_NODE	660:19	660:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	660:19	660:19	5	module = "OJPEGSetupDecode"
ASSIGN	660:19	660:28	6	module = "OJPEGSetupDecode"
LVAL	660:19	660:19	7	module
NAME	660:19	660:19	8	module
LEAF_NODE	660:19	660:19	9	module
ASSIGN_OP	660:27	660:27	7	=
LEAF_NODE	660:27	660:27	8	=
RVAL	660:28	660:28	7	"OJPEGSetupDecode"
FIELD	660:28	660:28	8	"OJPEGSetupDecode"
LEAF_NODE	660:28	660:28	9	"OJPEGSetupDecode"
LEAF_NODE	660:46	660:46	4	;
EXPR_STATEMENT	661:1	661:189	3	TIFFWarningExt ( tif -> tif_clientdata , module , "Depreciated and troublesome old-style JPEG compression mode, please convert to new-style JPEG compression and notify vendor of writing software" ) ;
EXPR	661:1	661:1	4	TIFFWarningExt ( tif -> tif_clientdata , module , "Depreciated and troublesome old-style JPEG compression mode, please convert to new-style JPEG compression and notify vendor of writing software" )
FUNCTION_CALL	661:1	661:188	5	TIFFWarningExt ( tif -> tif_clientdata , module , "Depreciated and troublesome old-style JPEG compression mode, please convert to new-style JPEG compression and notify vendor of writing software" )
CALLEE	661:1	661:1	6	TIFFWarningExt
LEAF_NODE	661:1	661:1	7	TIFFWarningExt
LEAF_NODE	661:15	661:15	6	(
ARGUMENT	661:16	661:16	6	tif -> tif_clientdata
FIELD	661:16	661:21	7	tif -> tif_clientdata
LEAF_NODE	661:16	661:16	8	tif
LEAF_NODE	661:19	661:19	8	->
LEAF_NODE	661:21	661:21	8	tif_clientdata
LEAF_NODE	661:35	661:35	6	,
ARGUMENT	661:36	661:36	6	module
FIELD	661:36	661:36	7	module
LEAF_NODE	661:36	661:36	8	module
LEAF_NODE	661:42	661:42	6	,
ARGUMENT	661:43	661:43	6	"Depreciated and troublesome old-style JPEG compression mode, please convert to new-style JPEG compression and notify vendor of writing software"
FIELD	661:43	661:43	7	"Depreciated and troublesome old-style JPEG compression mode, please convert to new-style JPEG compression and notify vendor of writing software"
LEAF_NODE	661:43	661:43	8	"Depreciated and troublesome old-style JPEG compression mode, please convert to new-style JPEG compression and notify vendor of writing software"
LEAF_NODE	661:188	661:188	6	)
LEAF_NODE	661:189	661:189	4	;
JUMP_STATEMENT	662:1	662:10	3	return ( 1 ) ;
KEYWORD	662:1	662:1	4	return
LEAF_NODE	662:1	662:1	5	return
DESTINATION	662:7	662:7	4	( 1 )
EXPR	662:7	662:9	5	( 1 )
LEAF_NODE	662:7	662:7	6	(
FIELD	662:8	662:8	6	1
LEAF_NODE	662:8	662:8	7	1
LEAF_NODE	662:9	662:9	6	)
LEAF_NODE	662:10	662:10	4	;
LEAF_NODE	663:0	663:0	2	}
FUNCTION_DEF	665:0	727:0	1	
RETURN_TYPE	665:0	665:7	2	static int
LEAF_NODE	665:0	665:0	3	static
TYPE_NAME	665:7	665:7	3	int
LEAF_NODE	665:7	665:7	4	int
FUNCTION_NAME	666:0	666:0	2	OJPEGPreDecode
LEAF_NODE	666:0	666:0	3	OJPEGPreDecode
PARAMETER_LIST	666:14	666:34	2	( TIFF * tif , uint16 s )
LEAF_NODE	666:14	666:14	3	(
PARAMETER_DECL	666:15	666:21	3	TIFF * tif
TYPE	666:15	666:19	4	TIFF *
TYPE_NAME	666:15	666:15	5	TIFF
LEAF_NODE	666:15	666:15	6	TIFF
POINTER	666:19	666:19	5	*
LEAF_NODE	666:19	666:19	6	*
NAME	666:21	666:21	4	tif
LEAF_NODE	666:21	666:21	5	tif
LEAF_NODE	666:24	666:24	3	,
PARAMETER_DECL	666:26	666:33	3	uint16 s
TYPE	666:26	666:26	4	uint16
TYPE_NAME	666:26	666:26	5	uint16
LEAF_NODE	666:26	666:26	6	uint16
NAME	666:33	666:33	4	s
LEAF_NODE	666:33	666:33	5	s
LEAF_NODE	666:34	666:34	3	)
LEAF_NODE	667:0	667:0	2	{
STATEMENTS	668:1	726:1	2	
SIMPLE_DECL	668:1	668:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	668:1	668:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	668:1	668:11	5	OJPEGState *
TYPE_NAME	668:1	668:1	6	OJPEGState
LEAF_NODE	668:1	668:1	7	OJPEGState
POINTER	668:11	668:11	6	*
LEAF_NODE	668:11	668:11	7	*
NAME	668:13	668:13	5	sp
LEAF_NODE	668:13	668:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	668:13	668:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	668:13	668:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	668:13	668:13	7	sp
NAME	668:13	668:13	8	sp
LEAF_NODE	668:13	668:13	9	sp
ASSIGN_OP	668:15	668:15	7	=
LEAF_NODE	668:15	668:15	8	=
RVAL	668:16	668:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	668:16	668:16	8	(
TYPE_NAME	668:17	668:17	8	OJPEGState
LEAF_NODE	668:17	668:17	9	OJPEGState
LEAF_NODE	668:27	668:27	8	*
LEAF_NODE	668:28	668:28	8	)
FIELD	668:29	668:34	8	tif -> tif_data
LEAF_NODE	668:29	668:29	9	tif
LEAF_NODE	668:32	668:32	9	->
LEAF_NODE	668:34	668:34	9	tif_data
LEAF_NODE	668:42	668:42	4	;
SIMPLE_DECL	669:1	669:9	3	uint32 m ;
VAR_DECL	669:1	669:8	4	uint32 m
TYPE	669:1	669:1	5	uint32
TYPE_NAME	669:1	669:1	6	uint32
LEAF_NODE	669:1	669:1	7	uint32
NAME	669:8	669:8	5	m
LEAF_NODE	669:8	669:8	6	m
LEAF_NODE	669:9	669:9	4	;
SELECTION	670:1	671:2	3	
KEYWORD	670:1	670:1	4	if
LEAF_NODE	670:1	670:1	5	if
LEAF_NODE	670:4	670:4	4	(
CONDITION	670:5	670:5	4	sp -> subsamplingcorrect_done == 0
EXPR	670:5	670:34	5	sp -> subsamplingcorrect_done == 0
FIELD	670:5	670:9	6	sp -> subsamplingcorrect_done
LEAF_NODE	670:5	670:5	7	sp
LEAF_NODE	670:7	670:7	7	->
LEAF_NODE	670:9	670:9	7	subsamplingcorrect_done
EQ_OPERATOR	670:32	670:32	6	==
LEAF_NODE	670:32	670:32	7	==
FIELD	670:34	670:34	6	0
LEAF_NODE	670:34	670:34	7	0
LEAF_NODE	670:35	670:35	4	)
STATEMENTS	671:2	671:2	4	
EXPR_STATEMENT	671:2	671:30	5	OJPEGSubsamplingCorrect ( tif ) ;
EXPR	671:2	671:2	6	OJPEGSubsamplingCorrect ( tif )
FUNCTION_CALL	671:2	671:29	7	OJPEGSubsamplingCorrect ( tif )
CALLEE	671:2	671:2	8	OJPEGSubsamplingCorrect
LEAF_NODE	671:2	671:2	9	OJPEGSubsamplingCorrect
LEAF_NODE	671:25	671:25	8	(
ARGUMENT	671:26	671:26	8	tif
FIELD	671:26	671:26	9	tif
LEAF_NODE	671:26	671:26	10	tif
LEAF_NODE	671:29	671:29	8	)
LEAF_NODE	671:30	671:30	6	;
SELECTION	672:1	673:1	3	
KEYWORD	672:1	672:1	4	if
LEAF_NODE	672:1	672:1	5	if
LEAF_NODE	672:4	672:4	4	(
CONDITION	672:5	672:5	4	sp -> readheader_done == 0
EXPR	672:5	672:26	5	sp -> readheader_done == 0
FIELD	672:5	672:9	6	sp -> readheader_done
LEAF_NODE	672:5	672:5	7	sp
LEAF_NODE	672:7	672:7	7	->
LEAF_NODE	672:9	672:9	7	readheader_done
EQ_OPERATOR	672:24	672:24	6	==
LEAF_NODE	672:24	672:24	7	==
FIELD	672:26	672:26	6	0
LEAF_NODE	672:26	672:26	7	0
LEAF_NODE	672:27	672:27	4	)
STATEMENTS	673:1	676:1	4	
LEAF_NODE	673:1	673:1	5	{
STATEMENTS	674:2	674:2	5	
SELECTION	674:2	675:3	6	
KEYWORD	674:2	674:2	7	if
LEAF_NODE	674:2	674:2	8	if
LEAF_NODE	674:5	674:5	7	(
CONDITION	674:6	674:6	7	OJPEGReadHeaderInfo ( tif ) == 0
EXPR	674:6	674:32	8	OJPEGReadHeaderInfo ( tif ) == 0
FUNCTION_CALL	674:6	674:29	9	OJPEGReadHeaderInfo ( tif )
CALLEE	674:6	674:6	10	OJPEGReadHeaderInfo
LEAF_NODE	674:6	674:6	11	OJPEGReadHeaderInfo
LEAF_NODE	674:25	674:25	10	(
ARGUMENT	674:26	674:26	10	tif
FIELD	674:26	674:26	11	tif
LEAF_NODE	674:26	674:26	12	tif
LEAF_NODE	674:29	674:29	10	)
EQ_OPERATOR	674:30	674:30	9	==
LEAF_NODE	674:30	674:30	10	==
FIELD	674:32	674:32	9	0
LEAF_NODE	674:32	674:32	10	0
LEAF_NODE	674:33	674:33	7	)
STATEMENTS	675:3	675:3	7	
JUMP_STATEMENT	675:3	675:12	8	return ( 0 ) ;
KEYWORD	675:3	675:3	9	return
LEAF_NODE	675:3	675:3	10	return
DESTINATION	675:9	675:9	9	( 0 )
EXPR	675:9	675:11	10	( 0 )
LEAF_NODE	675:9	675:9	11	(
FIELD	675:10	675:10	11	0
LEAF_NODE	675:10	675:10	12	0
LEAF_NODE	675:11	675:11	11	)
LEAF_NODE	675:12	675:12	9	;
LEAF_NODE	676:1	676:1	5	}
SELECTION	677:1	678:1	3	
KEYWORD	677:1	677:1	4	if
LEAF_NODE	677:1	677:1	5	if
LEAF_NODE	677:4	677:4	4	(
CONDITION	677:5	677:5	4	sp -> sos_end [ s ] . log == 0
EXPR	677:5	677:25	5	sp -> sos_end [ s ] . log == 0
FIELD	677:5	677:20	6	sp -> sos_end [ s ] . log
LEAF_NODE	677:5	677:5	7	sp
LEAF_NODE	677:7	677:7	7	->
LEAF_NODE	677:9	677:9	7	sos_end
LEAF_NODE	677:16	677:16	7	[
EXPR	677:17	677:17	7	s
FIELD	677:17	677:17	8	s
LEAF_NODE	677:17	677:17	9	s
LEAF_NODE	677:18	677:18	7	]
LEAF_NODE	677:19	677:19	7	.
LEAF_NODE	677:20	677:20	7	log
EQ_OPERATOR	677:23	677:23	6	==
LEAF_NODE	677:23	677:23	7	==
FIELD	677:25	677:25	6	0
LEAF_NODE	677:25	677:25	7	0
LEAF_NODE	677:26	677:26	4	)
STATEMENTS	678:1	681:1	4	
LEAF_NODE	678:1	678:1	5	{
STATEMENTS	679:2	679:2	5	
SELECTION	679:2	680:3	6	
KEYWORD	679:2	679:2	7	if
LEAF_NODE	679:2	679:2	8	if
LEAF_NODE	679:5	679:5	7	(
CONDITION	679:6	679:6	7	OJPEGReadSecondarySos ( tif , s ) == 0
EXPR	679:6	679:36	8	OJPEGReadSecondarySos ( tif , s ) == 0
FUNCTION_CALL	679:6	679:33	9	OJPEGReadSecondarySos ( tif , s )
CALLEE	679:6	679:6	10	OJPEGReadSecondarySos
LEAF_NODE	679:6	679:6	11	OJPEGReadSecondarySos
LEAF_NODE	679:27	679:27	10	(
ARGUMENT	679:28	679:28	10	tif
FIELD	679:28	679:28	11	tif
LEAF_NODE	679:28	679:28	12	tif
LEAF_NODE	679:31	679:31	10	,
ARGUMENT	679:32	679:32	10	s
FIELD	679:32	679:32	11	s
LEAF_NODE	679:32	679:32	12	s
LEAF_NODE	679:33	679:33	10	)
EQ_OPERATOR	679:34	679:34	9	==
LEAF_NODE	679:34	679:34	10	==
FIELD	679:36	679:36	9	0
LEAF_NODE	679:36	679:36	10	0
LEAF_NODE	679:37	679:37	7	)
STATEMENTS	680:3	680:3	7	
JUMP_STATEMENT	680:3	680:12	8	return ( 0 ) ;
KEYWORD	680:3	680:3	9	return
LEAF_NODE	680:3	680:3	10	return
DESTINATION	680:9	680:9	9	( 0 )
EXPR	680:9	680:11	10	( 0 )
LEAF_NODE	680:9	680:9	11	(
FIELD	680:10	680:10	11	0
LEAF_NODE	680:10	680:10	12	0
LEAF_NODE	680:11	680:11	11	)
LEAF_NODE	680:12	680:12	9	;
LEAF_NODE	681:1	681:1	5	}
SELECTION	682:1	683:2	3	
KEYWORD	682:1	682:1	4	if
LEAF_NODE	682:1	682:1	5	if
LEAF_NODE	682:4	682:4	4	(
CONDITION	682:5	682:5	4	isTiled ( tif )
EXPR	682:5	682:5	5	isTiled ( tif )
FUNCTION_CALL	682:5	682:16	6	isTiled ( tif )
CALLEE	682:5	682:5	7	isTiled
LEAF_NODE	682:5	682:5	8	isTiled
LEAF_NODE	682:12	682:12	7	(
ARGUMENT	682:13	682:13	7	tif
FIELD	682:13	682:13	8	tif
LEAF_NODE	682:13	682:13	9	tif
LEAF_NODE	682:16	682:16	7	)
LEAF_NODE	682:17	682:17	4	)
STATEMENTS	683:2	683:2	4	
EXPR_STATEMENT	683:2	683:20	5	m = tif -> tif_curtile ;
EXPR	683:2	683:2	6	m = tif -> tif_curtile
ASSIGN	683:2	683:4	7	m = tif -> tif_curtile
LVAL	683:2	683:2	8	m
FIELD	683:2	683:2	9	m
LEAF_NODE	683:2	683:2	10	m
ASSIGN_OP	683:3	683:3	8	=
LEAF_NODE	683:3	683:3	9	=
RVAL	683:4	683:4	8	tif -> tif_curtile
FIELD	683:4	683:9	9	tif -> tif_curtile
LEAF_NODE	683:4	683:4	10	tif
LEAF_NODE	683:7	683:7	10	->
LEAF_NODE	683:9	683:9	10	tif_curtile
LEAF_NODE	683:20	683:20	6	;
SELECTION	684:1	685:2	3	
KEYWORD	684:1	684:1	4	else
LEAF_NODE	684:1	684:1	5	else
STATEMENTS	685:2	685:2	4	
EXPR_STATEMENT	685:2	685:21	5	m = tif -> tif_curstrip ;
EXPR	685:2	685:2	6	m = tif -> tif_curstrip
ASSIGN	685:2	685:4	7	m = tif -> tif_curstrip
LVAL	685:2	685:2	8	m
FIELD	685:2	685:2	9	m
LEAF_NODE	685:2	685:2	10	m
ASSIGN_OP	685:3	685:3	8	=
LEAF_NODE	685:3	685:3	9	=
RVAL	685:4	685:4	8	tif -> tif_curstrip
FIELD	685:4	685:9	9	tif -> tif_curstrip
LEAF_NODE	685:4	685:4	10	tif
LEAF_NODE	685:7	685:7	10	->
LEAF_NODE	685:9	685:9	10	tif_curstrip
LEAF_NODE	685:21	685:21	6	;
SELECTION	686:1	687:1	3	
KEYWORD	686:1	686:1	4	if
LEAF_NODE	686:1	686:1	5	if
LEAF_NODE	686:4	686:4	4	(
CONDITION	686:5	686:5	4	( sp -> writeheader_done != 0 ) && ( ( sp -> write_cursample != s ) || ( sp -> write_curstrile > m ) )
EXPR	686:5	686:5	5	( sp -> writeheader_done != 0 ) && ( ( sp -> write_cursample != s ) || ( sp -> write_curstrile > m ) )
AND	686:5	686:34	6	( sp -> writeheader_done != 0 ) && ( ( sp -> write_cursample != s ) || ( sp -> write_curstrile > m ) )
EXPR	686:5	686:29	7	( sp -> writeheader_done != 0 )
LEAF_NODE	686:5	686:5	8	(
FIELD	686:6	686:10	8	sp -> writeheader_done
LEAF_NODE	686:6	686:6	9	sp
LEAF_NODE	686:8	686:8	9	->
LEAF_NODE	686:10	686:10	9	writeheader_done
EQ_OPERATOR	686:26	686:26	8	!=
LEAF_NODE	686:26	686:26	9	!=
FIELD	686:28	686:28	8	0
LEAF_NODE	686:28	686:28	9	0
LEAF_NODE	686:29	686:29	8	)
LEAF_NODE	686:31	686:31	7	&&
EXPR	686:34	686:86	7	( ( sp -> write_cursample != s ) || ( sp -> write_curstrile > m ) )
LEAF_NODE	686:34	686:34	8	(
OR	686:35	686:63	8	( sp -> write_cursample != s ) || ( sp -> write_curstrile > m )
EXPR	686:35	686:58	9	( sp -> write_cursample != s )
LEAF_NODE	686:35	686:35	10	(
FIELD	686:36	686:40	10	sp -> write_cursample
LEAF_NODE	686:36	686:36	11	sp
LEAF_NODE	686:38	686:38	11	->
LEAF_NODE	686:40	686:40	11	write_cursample
EQ_OPERATOR	686:55	686:55	10	!=
LEAF_NODE	686:55	686:55	11	!=
FIELD	686:57	686:57	10	s
LEAF_NODE	686:57	686:57	11	s
LEAF_NODE	686:58	686:58	10	)
LEAF_NODE	686:60	686:60	9	||
EXPR	686:63	686:85	9	( sp -> write_curstrile > m )
LEAF_NODE	686:63	686:63	10	(
FIELD	686:64	686:68	10	sp -> write_curstrile
LEAF_NODE	686:64	686:64	11	sp
LEAF_NODE	686:66	686:66	11	->
LEAF_NODE	686:68	686:68	11	write_curstrile
REL_OPERATOR	686:83	686:83	10	>
LEAF_NODE	686:83	686:83	11	>
FIELD	686:84	686:84	10	m
LEAF_NODE	686:84	686:84	11	m
LEAF_NODE	686:85	686:85	10	)
LEAF_NODE	686:86	686:86	8	)
LEAF_NODE	686:87	686:87	4	)
STATEMENTS	687:1	691:1	4	
LEAF_NODE	687:1	687:1	5	{
STATEMENTS	688:2	690:2	5	
SELECTION	688:2	689:3	6	
KEYWORD	688:2	688:2	7	if
LEAF_NODE	688:2	688:2	8	if
LEAF_NODE	688:5	688:5	7	(
CONDITION	688:6	688:6	7	sp -> libjpeg_session_active != 0
EXPR	688:6	688:34	8	sp -> libjpeg_session_active != 0
FIELD	688:6	688:10	9	sp -> libjpeg_session_active
LEAF_NODE	688:6	688:6	10	sp
LEAF_NODE	688:8	688:8	10	->
LEAF_NODE	688:10	688:10	10	libjpeg_session_active
EQ_OPERATOR	688:32	688:32	9	!=
LEAF_NODE	688:32	688:32	10	!=
FIELD	688:34	688:34	9	0
LEAF_NODE	688:34	688:34	10	0
LEAF_NODE	688:35	688:35	7	)
STATEMENTS	689:3	689:3	7	
EXPR_STATEMENT	689:3	689:32	8	OJPEGLibjpegSessionAbort ( tif ) ;
EXPR	689:3	689:3	9	OJPEGLibjpegSessionAbort ( tif )
FUNCTION_CALL	689:3	689:31	10	OJPEGLibjpegSessionAbort ( tif )
CALLEE	689:3	689:3	11	OJPEGLibjpegSessionAbort
LEAF_NODE	689:3	689:3	12	OJPEGLibjpegSessionAbort
LEAF_NODE	689:27	689:27	11	(
ARGUMENT	689:28	689:28	11	tif
FIELD	689:28	689:28	12	tif
LEAF_NODE	689:28	689:28	13	tif
LEAF_NODE	689:31	689:31	11	)
LEAF_NODE	689:32	689:32	9	;
EXPR_STATEMENT	690:2	690:24	6	sp -> writeheader_done = 0 ;
EXPR	690:2	690:2	7	sp -> writeheader_done = 0
ASSIGN	690:2	690:23	8	sp -> writeheader_done = 0
LVAL	690:2	690:2	9	sp -> writeheader_done
FIELD	690:2	690:6	10	sp -> writeheader_done
LEAF_NODE	690:2	690:2	11	sp
LEAF_NODE	690:4	690:4	11	->
LEAF_NODE	690:6	690:6	11	writeheader_done
ASSIGN_OP	690:22	690:22	9	=
LEAF_NODE	690:22	690:22	10	=
RVAL	690:23	690:23	9	0
FIELD	690:23	690:23	10	0
LEAF_NODE	690:23	690:23	11	0
LEAF_NODE	690:24	690:24	7	;
LEAF_NODE	691:1	691:1	5	}
SELECTION	692:1	693:1	3	
KEYWORD	692:1	692:1	4	if
LEAF_NODE	692:1	692:1	5	if
LEAF_NODE	692:4	692:4	4	(
CONDITION	692:5	692:5	4	sp -> writeheader_done == 0
EXPR	692:5	692:27	5	sp -> writeheader_done == 0
FIELD	692:5	692:9	6	sp -> writeheader_done
LEAF_NODE	692:5	692:5	7	sp
LEAF_NODE	692:7	692:7	7	->
LEAF_NODE	692:9	692:9	7	writeheader_done
EQ_OPERATOR	692:25	692:25	6	==
LEAF_NODE	692:25	692:25	7	==
FIELD	692:27	692:27	6	0
LEAF_NODE	692:27	692:27	7	0
LEAF_NODE	692:28	692:28	4	)
STATEMENTS	693:1	710:1	4	
LEAF_NODE	693:1	693:1	5	{
STATEMENTS	694:2	708:2	5	
EXPR_STATEMENT	694:2	694:34	6	sp -> plane_sample_offset = ( uint8 ) s ;
EXPR	694:2	694:2	7	sp -> plane_sample_offset = ( uint8 ) s
ASSIGN	694:2	694:26	8	sp -> plane_sample_offset = ( uint8 ) s
LVAL	694:2	694:2	9	sp -> plane_sample_offset
FIELD	694:2	694:6	10	sp -> plane_sample_offset
LEAF_NODE	694:2	694:2	11	sp
LEAF_NODE	694:4	694:4	11	->
LEAF_NODE	694:6	694:6	11	plane_sample_offset
ASSIGN_OP	694:25	694:25	9	=
LEAF_NODE	694:25	694:25	10	=
RVAL	694:26	694:33	9	( uint8 ) s
LEAF_NODE	694:26	694:26	10	(
TYPE_NAME	694:27	694:27	10	uint8
LEAF_NODE	694:27	694:27	11	uint8
LEAF_NODE	694:32	694:32	10	)
FIELD	694:33	694:33	10	s
LEAF_NODE	694:33	694:33	11	s
LEAF_NODE	694:34	694:34	7	;
EXPR_STATEMENT	695:2	695:23	6	sp -> write_cursample = s ;
EXPR	695:2	695:2	7	sp -> write_cursample = s
ASSIGN	695:2	695:22	8	sp -> write_cursample = s
LVAL	695:2	695:2	9	sp -> write_cursample
FIELD	695:2	695:6	10	sp -> write_cursample
LEAF_NODE	695:2	695:2	11	sp
LEAF_NODE	695:4	695:4	11	->
LEAF_NODE	695:6	695:6	11	write_cursample
ASSIGN_OP	695:21	695:21	9	=
LEAF_NODE	695:21	695:21	10	=
RVAL	695:22	695:22	9	s
FIELD	695:22	695:22	10	s
LEAF_NODE	695:22	695:22	11	s
LEAF_NODE	695:23	695:23	7	;
EXPR_STATEMENT	696:2	696:54	6	sp -> write_curstrile = s * tif -> tif_dir . td_stripsperimage ;
EXPR	696:2	696:2	7	sp -> write_curstrile = s * tif -> tif_dir . td_stripsperimage
ASSIGN	696:2	696:22	8	sp -> write_curstrile = s * tif -> tif_dir . td_stripsperimage
LVAL	696:2	696:2	9	sp -> write_curstrile
FIELD	696:2	696:6	10	sp -> write_curstrile
LEAF_NODE	696:2	696:2	11	sp
LEAF_NODE	696:4	696:4	11	->
LEAF_NODE	696:6	696:6	11	write_curstrile
ASSIGN_OP	696:21	696:21	9	=
LEAF_NODE	696:21	696:21	10	=
RVAL	696:22	696:24	9	s * tif -> tif_dir . td_stripsperimage
FIELD	696:22	696:22	10	s
LEAF_NODE	696:22	696:22	11	s
LEAF_NODE	696:23	696:23	10	*
FIELD	696:24	696:37	10	tif -> tif_dir . td_stripsperimage
LEAF_NODE	696:24	696:24	11	tif
LEAF_NODE	696:27	696:27	11	->
LEAF_NODE	696:29	696:29	11	tif_dir
LEAF_NODE	696:36	696:36	11	.
LEAF_NODE	696:37	696:37	11	td_stripsperimage
LEAF_NODE	696:54	696:54	7	;
SELECTION	697:2	699:2	6	
KEYWORD	697:2	697:2	7	if
LEAF_NODE	697:2	697:2	8	if
LEAF_NODE	697:5	697:5	7	(
CONDITION	697:6	697:6	7	( sp -> in_buffer_file_pos_log == 0 ) || ( sp -> in_buffer_file_pos - sp -> in_buffer_togo != sp -> sos_end [ s ] . in_buffer_file_pos )
EXPR	697:6	697:6	8	( sp -> in_buffer_file_pos_log == 0 ) || ( sp -> in_buffer_file_pos - sp -> in_buffer_togo != sp -> sos_end [ s ] . in_buffer_file_pos )
OR	697:6	698:6	9	( sp -> in_buffer_file_pos_log == 0 ) || ( sp -> in_buffer_file_pos - sp -> in_buffer_togo != sp -> sos_end [ s ] . in_buffer_file_pos )
EXPR	697:6	697:36	10	( sp -> in_buffer_file_pos_log == 0 )
LEAF_NODE	697:6	697:6	11	(
FIELD	697:7	697:11	11	sp -> in_buffer_file_pos_log
LEAF_NODE	697:7	697:7	12	sp
LEAF_NODE	697:9	697:9	12	->
LEAF_NODE	697:11	697:11	12	in_buffer_file_pos_log
EQ_OPERATOR	697:33	697:33	11	==
LEAF_NODE	697:33	697:33	12	==
FIELD	697:35	697:35	11	0
LEAF_NODE	697:35	697:35	12	0
LEAF_NODE	697:36	697:36	11	)
LEAF_NODE	697:38	697:38	10	||
EXPR	698:6	698:83	10	( sp -> in_buffer_file_pos - sp -> in_buffer_togo != sp -> sos_end [ s ] . in_buffer_file_pos )
LEAF_NODE	698:6	698:6	11	(
FIELD	698:7	698:11	11	sp -> in_buffer_file_pos
LEAF_NODE	698:7	698:7	12	sp
LEAF_NODE	698:9	698:9	12	->
LEAF_NODE	698:11	698:11	12	in_buffer_file_pos
LEAF_NODE	698:29	698:29	11	-
FIELD	698:30	698:34	11	sp -> in_buffer_togo
LEAF_NODE	698:30	698:30	12	sp
LEAF_NODE	698:32	698:32	12	->
LEAF_NODE	698:34	698:34	12	in_buffer_togo
EQ_OPERATOR	698:48	698:48	11	!=
LEAF_NODE	698:48	698:48	12	!=
FIELD	698:50	698:65	11	sp -> sos_end [ s ] . in_buffer_file_pos
LEAF_NODE	698:50	698:50	12	sp
LEAF_NODE	698:52	698:52	12	->
LEAF_NODE	698:54	698:54	12	sos_end
LEAF_NODE	698:61	698:61	12	[
EXPR	698:62	698:62	12	s
FIELD	698:62	698:62	13	s
LEAF_NODE	698:62	698:62	14	s
LEAF_NODE	698:63	698:63	12	]
LEAF_NODE	698:64	698:64	12	.
LEAF_NODE	698:65	698:65	12	in_buffer_file_pos
LEAF_NODE	698:83	698:83	11	)
LEAF_NODE	698:84	698:84	7	)
STATEMENTS	699:2	707:2	7	
LEAF_NODE	699:2	699:2	8	{
STATEMENTS	700:3	706:3	8	
EXPR_STATEMENT	700:3	700:55	9	sp -> in_buffer_source = sp -> sos_end [ s ] . in_buffer_source ;
EXPR	700:3	700:3	10	sp -> in_buffer_source = sp -> sos_end [ s ] . in_buffer_source
ASSIGN	700:3	700:24	11	sp -> in_buffer_source = sp -> sos_end [ s ] . in_buffer_source
LVAL	700:3	700:3	12	sp -> in_buffer_source
FIELD	700:3	700:7	13	sp -> in_buffer_source
LEAF_NODE	700:3	700:3	14	sp
LEAF_NODE	700:5	700:5	14	->
LEAF_NODE	700:7	700:7	14	in_buffer_source
ASSIGN_OP	700:23	700:23	12	=
LEAF_NODE	700:23	700:23	13	=
RVAL	700:24	700:24	12	sp -> sos_end [ s ] . in_buffer_source
FIELD	700:24	700:39	13	sp -> sos_end [ s ] . in_buffer_source
LEAF_NODE	700:24	700:24	14	sp
LEAF_NODE	700:26	700:26	14	->
LEAF_NODE	700:28	700:28	14	sos_end
LEAF_NODE	700:35	700:35	14	[
EXPR	700:36	700:36	14	s
FIELD	700:36	700:36	15	s
LEAF_NODE	700:36	700:36	16	s
LEAF_NODE	700:37	700:37	14	]
LEAF_NODE	700:38	700:38	14	.
LEAF_NODE	700:39	700:39	14	in_buffer_source
LEAF_NODE	700:55	700:55	10	;
EXPR_STATEMENT	701:3	701:65	9	sp -> in_buffer_next_strile = sp -> sos_end [ s ] . in_buffer_next_strile ;
EXPR	701:3	701:3	10	sp -> in_buffer_next_strile = sp -> sos_end [ s ] . in_buffer_next_strile
ASSIGN	701:3	701:29	11	sp -> in_buffer_next_strile = sp -> sos_end [ s ] . in_buffer_next_strile
LVAL	701:3	701:3	12	sp -> in_buffer_next_strile
FIELD	701:3	701:7	13	sp -> in_buffer_next_strile
LEAF_NODE	701:3	701:3	14	sp
LEAF_NODE	701:5	701:5	14	->
LEAF_NODE	701:7	701:7	14	in_buffer_next_strile
ASSIGN_OP	701:28	701:28	12	=
LEAF_NODE	701:28	701:28	13	=
RVAL	701:29	701:29	12	sp -> sos_end [ s ] . in_buffer_next_strile
FIELD	701:29	701:44	13	sp -> sos_end [ s ] . in_buffer_next_strile
LEAF_NODE	701:29	701:29	14	sp
LEAF_NODE	701:31	701:31	14	->
LEAF_NODE	701:33	701:33	14	sos_end
LEAF_NODE	701:40	701:40	14	[
EXPR	701:41	701:41	14	s
FIELD	701:41	701:41	15	s
LEAF_NODE	701:41	701:41	16	s
LEAF_NODE	701:42	701:42	14	]
LEAF_NODE	701:43	701:43	14	.
LEAF_NODE	701:44	701:44	14	in_buffer_next_strile
LEAF_NODE	701:65	701:65	10	;
EXPR_STATEMENT	702:3	702:59	9	sp -> in_buffer_file_pos = sp -> sos_end [ s ] . in_buffer_file_pos ;
EXPR	702:3	702:3	10	sp -> in_buffer_file_pos = sp -> sos_end [ s ] . in_buffer_file_pos
ASSIGN	702:3	702:26	11	sp -> in_buffer_file_pos = sp -> sos_end [ s ] . in_buffer_file_pos
LVAL	702:3	702:3	12	sp -> in_buffer_file_pos
FIELD	702:3	702:7	13	sp -> in_buffer_file_pos
LEAF_NODE	702:3	702:3	14	sp
LEAF_NODE	702:5	702:5	14	->
LEAF_NODE	702:7	702:7	14	in_buffer_file_pos
ASSIGN_OP	702:25	702:25	12	=
LEAF_NODE	702:25	702:25	13	=
RVAL	702:26	702:26	12	sp -> sos_end [ s ] . in_buffer_file_pos
FIELD	702:26	702:41	13	sp -> sos_end [ s ] . in_buffer_file_pos
LEAF_NODE	702:26	702:26	14	sp
LEAF_NODE	702:28	702:28	14	->
LEAF_NODE	702:30	702:30	14	sos_end
LEAF_NODE	702:37	702:37	14	[
EXPR	702:38	702:38	14	s
FIELD	702:38	702:38	15	s
LEAF_NODE	702:38	702:38	16	s
LEAF_NODE	702:39	702:39	14	]
LEAF_NODE	702:40	702:40	14	.
LEAF_NODE	702:41	702:41	14	in_buffer_file_pos
LEAF_NODE	702:59	702:59	10	;
EXPR_STATEMENT	703:3	703:31	9	sp -> in_buffer_file_pos_log = 0 ;
EXPR	703:3	703:3	10	sp -> in_buffer_file_pos_log = 0
ASSIGN	703:3	703:30	11	sp -> in_buffer_file_pos_log = 0
LVAL	703:3	703:3	12	sp -> in_buffer_file_pos_log
FIELD	703:3	703:7	13	sp -> in_buffer_file_pos_log
LEAF_NODE	703:3	703:3	14	sp
LEAF_NODE	703:5	703:5	14	->
LEAF_NODE	703:7	703:7	14	in_buffer_file_pos_log
ASSIGN_OP	703:29	703:29	12	=
LEAF_NODE	703:29	703:29	13	=
RVAL	703:30	703:30	12	0
FIELD	703:30	703:30	13	0
LEAF_NODE	703:30	703:30	14	0
LEAF_NODE	703:31	703:31	10	;
EXPR_STATEMENT	704:3	704:61	9	sp -> in_buffer_file_togo = sp -> sos_end [ s ] . in_buffer_file_togo ;
EXPR	704:3	704:3	10	sp -> in_buffer_file_togo = sp -> sos_end [ s ] . in_buffer_file_togo
ASSIGN	704:3	704:27	11	sp -> in_buffer_file_togo = sp -> sos_end [ s ] . in_buffer_file_togo
LVAL	704:3	704:3	12	sp -> in_buffer_file_togo
FIELD	704:3	704:7	13	sp -> in_buffer_file_togo
LEAF_NODE	704:3	704:3	14	sp
LEAF_NODE	704:5	704:5	14	->
LEAF_NODE	704:7	704:7	14	in_buffer_file_togo
ASSIGN_OP	704:26	704:26	12	=
LEAF_NODE	704:26	704:26	13	=
RVAL	704:27	704:27	12	sp -> sos_end [ s ] . in_buffer_file_togo
FIELD	704:27	704:42	13	sp -> sos_end [ s ] . in_buffer_file_togo
LEAF_NODE	704:27	704:27	14	sp
LEAF_NODE	704:29	704:29	14	->
LEAF_NODE	704:31	704:31	14	sos_end
LEAF_NODE	704:38	704:38	14	[
EXPR	704:39	704:39	14	s
FIELD	704:39	704:39	15	s
LEAF_NODE	704:39	704:39	16	s
LEAF_NODE	704:40	704:40	14	]
LEAF_NODE	704:41	704:41	14	.
LEAF_NODE	704:42	704:42	14	in_buffer_file_togo
LEAF_NODE	704:61	704:61	10	;
EXPR_STATEMENT	705:3	705:23	9	sp -> in_buffer_togo = 0 ;
EXPR	705:3	705:3	10	sp -> in_buffer_togo = 0
ASSIGN	705:3	705:22	11	sp -> in_buffer_togo = 0
LVAL	705:3	705:3	12	sp -> in_buffer_togo
FIELD	705:3	705:7	13	sp -> in_buffer_togo
LEAF_NODE	705:3	705:3	14	sp
LEAF_NODE	705:5	705:5	14	->
LEAF_NODE	705:7	705:7	14	in_buffer_togo
ASSIGN_OP	705:21	705:21	12	=
LEAF_NODE	705:21	705:21	13	=
RVAL	705:22	705:22	12	0
FIELD	705:22	705:22	13	0
LEAF_NODE	705:22	705:22	14	0
LEAF_NODE	705:23	705:23	10	;
EXPR_STATEMENT	706:3	706:22	9	sp -> in_buffer_cur = 0 ;
EXPR	706:3	706:3	10	sp -> in_buffer_cur = 0
ASSIGN	706:3	706:21	11	sp -> in_buffer_cur = 0
LVAL	706:3	706:3	12	sp -> in_buffer_cur
FIELD	706:3	706:7	13	sp -> in_buffer_cur
LEAF_NODE	706:3	706:3	14	sp
LEAF_NODE	706:5	706:5	14	->
LEAF_NODE	706:7	706:7	14	in_buffer_cur
ASSIGN_OP	706:20	706:20	12	=
LEAF_NODE	706:20	706:20	13	=
RVAL	706:21	706:21	12	0
FIELD	706:21	706:21	13	0
LEAF_NODE	706:21	706:21	14	0
LEAF_NODE	706:22	706:22	10	;
LEAF_NODE	707:2	707:2	8	}
SELECTION	708:2	709:3	6	
KEYWORD	708:2	708:2	7	if
LEAF_NODE	708:2	708:2	8	if
LEAF_NODE	708:5	708:5	7	(
CONDITION	708:6	708:6	7	OJPEGWriteHeaderInfo ( tif ) == 0
EXPR	708:6	708:33	8	OJPEGWriteHeaderInfo ( tif ) == 0
FUNCTION_CALL	708:6	708:30	9	OJPEGWriteHeaderInfo ( tif )
CALLEE	708:6	708:6	10	OJPEGWriteHeaderInfo
LEAF_NODE	708:6	708:6	11	OJPEGWriteHeaderInfo
LEAF_NODE	708:26	708:26	10	(
ARGUMENT	708:27	708:27	10	tif
FIELD	708:27	708:27	11	tif
LEAF_NODE	708:27	708:27	12	tif
LEAF_NODE	708:30	708:30	10	)
EQ_OPERATOR	708:31	708:31	9	==
LEAF_NODE	708:31	708:31	10	==
FIELD	708:33	708:33	9	0
LEAF_NODE	708:33	708:33	10	0
LEAF_NODE	708:34	708:34	7	)
STATEMENTS	709:3	709:3	7	
JUMP_STATEMENT	709:3	709:12	8	return ( 0 ) ;
KEYWORD	709:3	709:3	9	return
LEAF_NODE	709:3	709:3	10	return
DESTINATION	709:9	709:9	9	( 0 )
EXPR	709:9	709:11	10	( 0 )
LEAF_NODE	709:9	709:9	11	(
FIELD	709:10	709:10	11	0
LEAF_NODE	709:10	709:10	12	0
LEAF_NODE	709:11	709:11	11	)
LEAF_NODE	709:12	709:12	9	;
LEAF_NODE	710:1	710:1	5	}
ITERATION	711:1	712:1	3	
KEYWORD	711:1	711:1	4	while
LEAF_NODE	711:1	711:1	5	while
LEAF_NODE	711:7	711:7	4	(
CONDITION	711:8	711:8	4	sp -> write_curstrile < m
EXPR	711:8	711:28	5	sp -> write_curstrile < m
FIELD	711:8	711:12	6	sp -> write_curstrile
LEAF_NODE	711:8	711:8	7	sp
LEAF_NODE	711:10	711:10	7	->
LEAF_NODE	711:12	711:12	7	write_curstrile
REL_OPERATOR	711:27	711:27	6	<
LEAF_NODE	711:27	711:27	7	<
FIELD	711:28	711:28	6	m
LEAF_NODE	711:28	711:28	7	m
LEAF_NODE	711:29	711:29	4	)
STATEMENTS	712:1	724:1	4	
LEAF_NODE	712:1	712:1	5	{
STATEMENTS	713:2	723:2	5	
SELECTION	713:2	714:2	6	
KEYWORD	713:2	713:2	7	if
LEAF_NODE	713:2	713:2	8	if
LEAF_NODE	713:5	713:5	7	(
CONDITION	713:6	713:6	7	sp -> libjpeg_jpeg_query_style == 0
EXPR	713:6	713:36	8	sp -> libjpeg_jpeg_query_style == 0
FIELD	713:6	713:10	9	sp -> libjpeg_jpeg_query_style
LEAF_NODE	713:6	713:6	10	sp
LEAF_NODE	713:8	713:8	10	->
LEAF_NODE	713:10	713:10	10	libjpeg_jpeg_query_style
EQ_OPERATOR	713:34	713:34	9	==
LEAF_NODE	713:34	713:34	10	==
FIELD	713:36	713:36	9	0
LEAF_NODE	713:36	713:36	10	0
LEAF_NODE	713:37	713:37	7	)
STATEMENTS	714:2	717:2	7	
LEAF_NODE	714:2	714:2	8	{
STATEMENTS	715:3	715:3	8	
SELECTION	715:3	716:4	9	
KEYWORD	715:3	715:3	10	if
LEAF_NODE	715:3	715:3	11	if
LEAF_NODE	715:6	715:6	10	(
CONDITION	715:7	715:7	10	OJPEGPreDecodeSkipRaw ( tif ) == 0
EXPR	715:7	715:35	11	OJPEGPreDecodeSkipRaw ( tif ) == 0
FUNCTION_CALL	715:7	715:32	12	OJPEGPreDecodeSkipRaw ( tif )
CALLEE	715:7	715:7	13	OJPEGPreDecodeSkipRaw
LEAF_NODE	715:7	715:7	14	OJPEGPreDecodeSkipRaw
LEAF_NODE	715:28	715:28	13	(
ARGUMENT	715:29	715:29	13	tif
FIELD	715:29	715:29	14	tif
LEAF_NODE	715:29	715:29	15	tif
LEAF_NODE	715:32	715:32	13	)
EQ_OPERATOR	715:33	715:33	12	==
LEAF_NODE	715:33	715:33	13	==
FIELD	715:35	715:35	12	0
LEAF_NODE	715:35	715:35	13	0
LEAF_NODE	715:36	715:36	10	)
STATEMENTS	716:4	716:4	10	
JUMP_STATEMENT	716:4	716:13	11	return ( 0 ) ;
KEYWORD	716:4	716:4	12	return
LEAF_NODE	716:4	716:4	13	return
DESTINATION	716:10	716:10	12	( 0 )
EXPR	716:10	716:12	13	( 0 )
LEAF_NODE	716:10	716:10	14	(
FIELD	716:11	716:11	14	0
LEAF_NODE	716:11	716:11	15	0
LEAF_NODE	716:12	716:12	14	)
LEAF_NODE	716:13	716:13	12	;
LEAF_NODE	717:2	717:2	8	}
SELECTION	718:2	719:2	6	
KEYWORD	718:2	718:2	7	else
LEAF_NODE	718:2	718:2	8	else
STATEMENTS	719:2	722:2	7	
LEAF_NODE	719:2	719:2	8	{
STATEMENTS	720:3	720:3	8	
SELECTION	720:3	721:4	9	
KEYWORD	720:3	720:3	10	if
LEAF_NODE	720:3	720:3	11	if
LEAF_NODE	720:6	720:6	10	(
CONDITION	720:7	720:7	10	OJPEGPreDecodeSkipScanlines ( tif ) == 0
EXPR	720:7	720:41	11	OJPEGPreDecodeSkipScanlines ( tif ) == 0
FUNCTION_CALL	720:7	720:38	12	OJPEGPreDecodeSkipScanlines ( tif )
CALLEE	720:7	720:7	13	OJPEGPreDecodeSkipScanlines
LEAF_NODE	720:7	720:7	14	OJPEGPreDecodeSkipScanlines
LEAF_NODE	720:34	720:34	13	(
ARGUMENT	720:35	720:35	13	tif
FIELD	720:35	720:35	14	tif
LEAF_NODE	720:35	720:35	15	tif
LEAF_NODE	720:38	720:38	13	)
EQ_OPERATOR	720:39	720:39	12	==
LEAF_NODE	720:39	720:39	13	==
FIELD	720:41	720:41	12	0
LEAF_NODE	720:41	720:41	13	0
LEAF_NODE	720:42	720:42	10	)
STATEMENTS	721:4	721:4	10	
JUMP_STATEMENT	721:4	721:13	11	return ( 0 ) ;
KEYWORD	721:4	721:4	12	return
LEAF_NODE	721:4	721:4	13	return
DESTINATION	721:10	721:10	12	( 0 )
EXPR	721:10	721:12	13	( 0 )
LEAF_NODE	721:10	721:10	14	(
FIELD	721:11	721:11	14	0
LEAF_NODE	721:11	721:11	15	0
LEAF_NODE	721:12	721:12	14	)
LEAF_NODE	721:13	721:13	12	;
LEAF_NODE	722:2	722:2	8	}
EXPR_STATEMENT	723:2	723:23	6	sp -> write_curstrile ++ ;
EXPR	723:2	723:2	7	sp -> write_curstrile ++
FIELD	723:2	723:21	8	sp -> write_curstrile ++
LEAF_NODE	723:2	723:2	9	sp
LEAF_NODE	723:4	723:4	9	->
LEAF_NODE	723:6	723:6	9	write_curstrile
LEAF_NODE	723:21	723:21	9	++
LEAF_NODE	723:23	723:23	7	;
LEAF_NODE	724:1	724:1	5	}
EXPR_STATEMENT	725:1	725:19	3	sp -> decoder_ok = 1 ;
EXPR	725:1	725:1	4	sp -> decoder_ok = 1
ASSIGN	725:1	725:18	5	sp -> decoder_ok = 1
LVAL	725:1	725:1	6	sp -> decoder_ok
FIELD	725:1	725:5	7	sp -> decoder_ok
LEAF_NODE	725:1	725:1	8	sp
LEAF_NODE	725:3	725:3	8	->
LEAF_NODE	725:5	725:5	8	decoder_ok
ASSIGN_OP	725:16	725:16	6	=
LEAF_NODE	725:16	725:16	7	=
RVAL	725:18	725:18	6	1
FIELD	725:18	725:18	7	1
LEAF_NODE	725:18	725:18	8	1
LEAF_NODE	725:19	725:19	4	;
JUMP_STATEMENT	726:1	726:10	3	return ( 1 ) ;
KEYWORD	726:1	726:1	4	return
LEAF_NODE	726:1	726:1	5	return
DESTINATION	726:7	726:7	4	( 1 )
EXPR	726:7	726:9	5	( 1 )
LEAF_NODE	726:7	726:7	6	(
FIELD	726:8	726:8	6	1
LEAF_NODE	726:8	726:8	7	1
LEAF_NODE	726:9	726:9	6	)
LEAF_NODE	726:10	726:10	4	;
LEAF_NODE	727:0	727:0	2	}
FUNCTION_DEF	729:0	761:0	1	
RETURN_TYPE	729:0	729:7	2	static int
LEAF_NODE	729:0	729:0	3	static
TYPE_NAME	729:7	729:7	3	int
LEAF_NODE	729:7	729:7	4	int
FUNCTION_NAME	730:0	730:0	2	OJPEGPreDecodeSkipRaw
LEAF_NODE	730:0	730:0	3	OJPEGPreDecodeSkipRaw
PARAMETER_LIST	730:21	730:31	2	( TIFF * tif )
LEAF_NODE	730:21	730:21	3	(
PARAMETER_DECL	730:22	730:28	3	TIFF * tif
TYPE	730:22	730:26	4	TIFF *
TYPE_NAME	730:22	730:22	5	TIFF
LEAF_NODE	730:22	730:22	6	TIFF
POINTER	730:26	730:26	5	*
LEAF_NODE	730:26	730:26	6	*
NAME	730:28	730:28	4	tif
LEAF_NODE	730:28	730:28	5	tif
LEAF_NODE	730:31	730:31	3	)
LEAF_NODE	731:0	731:0	2	{
STATEMENTS	732:1	760:1	2	
SIMPLE_DECL	732:1	732:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	732:1	732:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	732:1	732:11	5	OJPEGState *
TYPE_NAME	732:1	732:1	6	OJPEGState
LEAF_NODE	732:1	732:1	7	OJPEGState
POINTER	732:11	732:11	6	*
LEAF_NODE	732:11	732:11	7	*
NAME	732:13	732:13	5	sp
LEAF_NODE	732:13	732:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	732:13	732:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	732:13	732:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	732:13	732:13	7	sp
NAME	732:13	732:13	8	sp
LEAF_NODE	732:13	732:13	9	sp
ASSIGN_OP	732:15	732:15	7	=
LEAF_NODE	732:15	732:15	8	=
RVAL	732:16	732:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	732:16	732:16	8	(
TYPE_NAME	732:17	732:17	8	OJPEGState
LEAF_NODE	732:17	732:17	9	OJPEGState
LEAF_NODE	732:27	732:27	8	*
LEAF_NODE	732:28	732:28	8	)
FIELD	732:29	732:34	8	tif -> tif_data
LEAF_NODE	732:29	732:29	9	tif
LEAF_NODE	732:32	732:32	9	->
LEAF_NODE	732:34	732:34	9	tif_data
LEAF_NODE	732:42	732:42	4	;
SIMPLE_DECL	733:1	733:9	3	uint32 m ;
VAR_DECL	733:1	733:8	4	uint32 m
TYPE	733:1	733:1	5	uint32
TYPE_NAME	733:1	733:1	6	uint32
LEAF_NODE	733:1	733:1	7	uint32
NAME	733:8	733:8	5	m
LEAF_NODE	733:8	733:8	6	m
LEAF_NODE	733:9	733:9	4	;
EXPR_STATEMENT	734:1	734:23	3	m = sp -> lines_per_strile ;
EXPR	734:1	734:1	4	m = sp -> lines_per_strile
ASSIGN	734:1	734:3	5	m = sp -> lines_per_strile
LVAL	734:1	734:1	6	m
FIELD	734:1	734:1	7	m
LEAF_NODE	734:1	734:1	8	m
ASSIGN_OP	734:2	734:2	6	=
LEAF_NODE	734:2	734:2	7	=
RVAL	734:3	734:3	6	sp -> lines_per_strile
FIELD	734:3	734:7	7	sp -> lines_per_strile
LEAF_NODE	734:3	734:3	8	sp
LEAF_NODE	734:5	734:5	8	->
LEAF_NODE	734:7	734:7	8	lines_per_strile
LEAF_NODE	734:23	734:23	4	;
SELECTION	735:1	736:1	3	
KEYWORD	735:1	735:1	4	if
LEAF_NODE	735:1	735:1	5	if
LEAF_NODE	735:4	735:4	4	(
CONDITION	735:5	735:5	4	sp -> subsampling_convert_state != 0
EXPR	735:5	735:36	5	sp -> subsampling_convert_state != 0
FIELD	735:5	735:9	6	sp -> subsampling_convert_state
LEAF_NODE	735:5	735:5	7	sp
LEAF_NODE	735:7	735:7	7	->
LEAF_NODE	735:9	735:9	7	subsampling_convert_state
EQ_OPERATOR	735:34	735:34	6	!=
LEAF_NODE	735:34	735:34	7	!=
FIELD	735:36	735:36	6	0
LEAF_NODE	735:36	735:36	7	0
LEAF_NODE	735:37	735:37	4	)
STATEMENTS	736:1	747:1	4	
LEAF_NODE	736:1	736:1	5	{
STATEMENTS	737:2	746:16	5	
SELECTION	737:2	738:2	6	
KEYWORD	737:2	737:2	7	if
LEAF_NODE	737:2	737:2	8	if
LEAF_NODE	737:5	737:5	7	(
CONDITION	737:6	737:6	7	sp -> subsampling_convert_clines - sp -> subsampling_convert_state >= m
EXPR	737:6	737:68	8	sp -> subsampling_convert_clines - sp -> subsampling_convert_state >= m
FIELD	737:6	737:10	9	sp -> subsampling_convert_clines
LEAF_NODE	737:6	737:6	10	sp
LEAF_NODE	737:8	737:8	10	->
LEAF_NODE	737:10	737:10	10	subsampling_convert_clines
LEAF_NODE	737:36	737:36	9	-
FIELD	737:37	737:41	9	sp -> subsampling_convert_state
LEAF_NODE	737:37	737:37	10	sp
LEAF_NODE	737:39	737:39	10	->
LEAF_NODE	737:41	737:41	10	subsampling_convert_state
REL_OPERATOR	737:66	737:66	9	>=
LEAF_NODE	737:66	737:66	10	>=
FIELD	737:68	737:68	9	m
LEAF_NODE	737:68	737:68	10	m
LEAF_NODE	737:69	737:69	7	)
STATEMENTS	738:2	743:2	7	
LEAF_NODE	738:2	738:2	8	{
STATEMENTS	739:3	742:3	8	
EXPR_STATEMENT	739:3	739:35	9	sp -> subsampling_convert_state += m ;
EXPR	739:3	739:3	10	sp -> subsampling_convert_state += m
ASSIGN	739:3	739:34	11	sp -> subsampling_convert_state += m
LVAL	739:3	739:3	12	sp -> subsampling_convert_state
FIELD	739:3	739:7	13	sp -> subsampling_convert_state
LEAF_NODE	739:3	739:3	14	sp
LEAF_NODE	739:5	739:5	14	->
LEAF_NODE	739:7	739:7	14	subsampling_convert_state
ASSIGN_OP	739:32	739:32	12	+=
LEAF_NODE	739:32	739:32	13	+=
RVAL	739:34	739:34	12	m
FIELD	739:34	739:34	13	m
LEAF_NODE	739:34	739:34	14	m
LEAF_NODE	739:35	739:35	10	;
SELECTION	740:3	741:4	9	
KEYWORD	740:3	740:3	10	if
LEAF_NODE	740:3	740:3	11	if
LEAF_NODE	740:6	740:6	10	(
CONDITION	740:7	740:7	10	sp -> subsampling_convert_state == sp -> subsampling_convert_clines
EXPR	740:7	740:38	11	sp -> subsampling_convert_state == sp -> subsampling_convert_clines
FIELD	740:7	740:11	12	sp -> subsampling_convert_state
LEAF_NODE	740:7	740:7	13	sp
LEAF_NODE	740:9	740:9	13	->
LEAF_NODE	740:11	740:11	13	subsampling_convert_state
EQ_OPERATOR	740:36	740:36	12	==
LEAF_NODE	740:36	740:36	13	==
FIELD	740:38	740:42	12	sp -> subsampling_convert_clines
LEAF_NODE	740:38	740:38	13	sp
LEAF_NODE	740:40	740:40	13	->
LEAF_NODE	740:42	740:42	13	subsampling_convert_clines
LEAF_NODE	740:68	740:68	10	)
STATEMENTS	741:4	741:4	10	
EXPR_STATEMENT	741:4	741:35	11	sp -> subsampling_convert_state = 0 ;
EXPR	741:4	741:4	12	sp -> subsampling_convert_state = 0
ASSIGN	741:4	741:34	13	sp -> subsampling_convert_state = 0
LVAL	741:4	741:4	14	sp -> subsampling_convert_state
FIELD	741:4	741:8	15	sp -> subsampling_convert_state
LEAF_NODE	741:4	741:4	16	sp
LEAF_NODE	741:6	741:6	16	->
LEAF_NODE	741:8	741:8	16	subsampling_convert_state
ASSIGN_OP	741:33	741:33	14	=
LEAF_NODE	741:33	741:33	15	=
RVAL	741:34	741:34	14	0
FIELD	741:34	741:34	15	0
LEAF_NODE	741:34	741:34	16	0
LEAF_NODE	741:35	741:35	12	;
JUMP_STATEMENT	742:3	742:12	9	return ( 1 ) ;
KEYWORD	742:3	742:3	10	return
LEAF_NODE	742:3	742:3	11	return
DESTINATION	742:9	742:9	10	( 1 )
EXPR	742:9	742:11	11	( 1 )
LEAF_NODE	742:9	742:9	12	(
FIELD	742:10	742:10	12	1
LEAF_NODE	742:10	742:10	13	1
LEAF_NODE	742:11	742:11	12	)
LEAF_NODE	742:12	742:12	10	;
LEAF_NODE	743:2	743:2	8	}
EXPR_STATEMENT	744:2	744:65	6	m -= sp -> subsampling_convert_clines - sp -> subsampling_convert_state ;
EXPR	744:2	744:2	7	m -= sp -> subsampling_convert_clines - sp -> subsampling_convert_state
ASSIGN	744:2	744:5	8	m -= sp -> subsampling_convert_clines - sp -> subsampling_convert_state
LVAL	744:2	744:2	9	m
FIELD	744:2	744:2	10	m
LEAF_NODE	744:2	744:2	11	m
ASSIGN_OP	744:3	744:3	9	-=
LEAF_NODE	744:3	744:3	10	-=
RVAL	744:5	744:36	9	sp -> subsampling_convert_clines - sp -> subsampling_convert_state
FIELD	744:5	744:9	10	sp -> subsampling_convert_clines
LEAF_NODE	744:5	744:5	11	sp
LEAF_NODE	744:7	744:7	11	->
LEAF_NODE	744:9	744:9	11	subsampling_convert_clines
LEAF_NODE	744:35	744:35	10	-
FIELD	744:36	744:40	10	sp -> subsampling_convert_state
LEAF_NODE	744:36	744:36	11	sp
LEAF_NODE	744:38	744:38	11	->
LEAF_NODE	744:40	744:40	11	subsampling_convert_state
LEAF_NODE	744:65	744:65	7	;
EXPR_STATEMENT	745:2	745:33	6	sp -> subsampling_convert_state = 0 ;
EXPR	745:2	745:2	7	sp -> subsampling_convert_state = 0
ASSIGN	745:2	745:32	8	sp -> subsampling_convert_state = 0
LVAL	745:2	745:2	9	sp -> subsampling_convert_state
FIELD	745:2	745:6	10	sp -> subsampling_convert_state
LEAF_NODE	745:2	745:2	11	sp
LEAF_NODE	745:4	745:4	11	->
LEAF_NODE	745:6	745:6	11	subsampling_convert_state
ASSIGN_OP	745:31	745:31	9	=
LEAF_NODE	745:31	745:31	10	=
RVAL	745:32	745:32	9	0
FIELD	745:32	745:32	10	0
LEAF_NODE	745:32	745:32	11	0
LEAF_NODE	745:33	745:33	7	;
EXPR_STATEMENT	746:16	746:48	6	sp -> error_in_raw_data_decoding = 0 ;
EXPR	746:16	746:16	7	sp -> error_in_raw_data_decoding = 0
ASSIGN	746:16	746:47	8	sp -> error_in_raw_data_decoding = 0
LVAL	746:16	746:16	9	sp -> error_in_raw_data_decoding
FIELD	746:16	746:20	10	sp -> error_in_raw_data_decoding
LEAF_NODE	746:16	746:16	11	sp
LEAF_NODE	746:18	746:18	11	->
LEAF_NODE	746:20	746:20	11	error_in_raw_data_decoding
ASSIGN_OP	746:46	746:46	9	=
LEAF_NODE	746:46	746:46	10	=
RVAL	746:47	746:47	9	0
FIELD	746:47	746:47	10	0
LEAF_NODE	746:47	746:47	11	0
LEAF_NODE	746:48	746:48	7	;
LEAF_NODE	747:1	747:1	5	}
ITERATION	748:1	749:1	3	
KEYWORD	748:1	748:1	4	while
LEAF_NODE	748:1	748:1	5	while
LEAF_NODE	748:7	748:7	4	(
CONDITION	748:8	748:8	4	m >= sp -> subsampling_convert_clines
EXPR	748:8	748:11	5	m >= sp -> subsampling_convert_clines
FIELD	748:8	748:8	6	m
LEAF_NODE	748:8	748:8	7	m
REL_OPERATOR	748:9	748:9	6	>=
LEAF_NODE	748:9	748:9	7	>=
FIELD	748:11	748:15	6	sp -> subsampling_convert_clines
LEAF_NODE	748:11	748:11	7	sp
LEAF_NODE	748:13	748:13	7	->
LEAF_NODE	748:15	748:15	7	subsampling_convert_clines
LEAF_NODE	748:41	748:41	4	)
STATEMENTS	749:1	753:1	4	
LEAF_NODE	749:1	749:1	5	{
STATEMENTS	750:2	752:2	5	
SELECTION	750:2	751:3	6	
KEYWORD	750:2	750:2	7	if
LEAF_NODE	750:2	750:2	8	if
LEAF_NODE	750:5	750:5	7	(
CONDITION	750:6	750:6	7	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 ) == 0
EXPR	750:6	750:131	8	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 ) == 0
FUNCTION_CALL	750:6	750:128	9	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 )
CALLEE	750:6	750:6	10	jpeg_read_raw_data_encap
LEAF_NODE	750:6	750:6	11	jpeg_read_raw_data_encap
LEAF_NODE	750:30	750:30	10	(
ARGUMENT	750:31	750:31	10	sp
FIELD	750:31	750:31	11	sp
LEAF_NODE	750:31	750:31	12	sp
LEAF_NODE	750:33	750:33	10	,
ARGUMENT	750:34	750:34	10	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	750:34	750:70	11	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	750:34	750:34	12	&
LEAF_NODE	750:34	750:34	13	&
LEAF_NODE	750:35	750:35	12	(
FIELD	750:36	750:40	12	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	750:36	750:36	13	sp
LEAF_NODE	750:38	750:38	13	->
LEAF_NODE	750:40	750:40	13	libjpeg_jpeg_decompress_struct
LEAF_NODE	750:70	750:70	12	)
LEAF_NODE	750:71	750:71	10	,
ARGUMENT	750:72	750:72	10	sp -> subsampling_convert_ycbcrimage
FIELD	750:72	750:76	11	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	750:72	750:72	12	sp
LEAF_NODE	750:74	750:74	12	->
LEAF_NODE	750:76	750:76	12	subsampling_convert_ycbcrimage
LEAF_NODE	750:106	750:106	10	,
ARGUMENT	750:107	750:127	10	sp -> subsampling_ver * 8
FIELD	750:107	750:111	11	sp -> subsampling_ver
LEAF_NODE	750:107	750:107	12	sp
LEAF_NODE	750:109	750:109	12	->
LEAF_NODE	750:111	750:111	12	subsampling_ver
LEAF_NODE	750:126	750:126	11	*
FIELD	750:127	750:127	11	8
LEAF_NODE	750:127	750:127	12	8
LEAF_NODE	750:128	750:128	10	)
EQ_OPERATOR	750:129	750:129	9	==
LEAF_NODE	750:129	750:129	10	==
FIELD	750:131	750:131	9	0
LEAF_NODE	750:131	750:131	10	0
LEAF_NODE	750:132	750:132	7	)
STATEMENTS	751:3	751:3	7	
JUMP_STATEMENT	751:3	751:12	8	return ( 0 ) ;
KEYWORD	751:3	751:3	9	return
LEAF_NODE	751:3	751:3	10	return
DESTINATION	751:9	751:9	9	( 0 )
EXPR	751:9	751:11	10	( 0 )
LEAF_NODE	751:9	751:9	11	(
FIELD	751:10	751:10	11	0
LEAF_NODE	751:10	751:10	12	0
LEAF_NODE	751:11	751:11	11	)
LEAF_NODE	751:12	751:12	9	;
EXPR_STATEMENT	752:2	752:35	6	m -= sp -> subsampling_convert_clines ;
EXPR	752:2	752:2	7	m -= sp -> subsampling_convert_clines
ASSIGN	752:2	752:5	8	m -= sp -> subsampling_convert_clines
LVAL	752:2	752:2	9	m
FIELD	752:2	752:2	10	m
LEAF_NODE	752:2	752:2	11	m
ASSIGN_OP	752:3	752:3	9	-=
LEAF_NODE	752:3	752:3	10	-=
RVAL	752:5	752:5	9	sp -> subsampling_convert_clines
FIELD	752:5	752:9	10	sp -> subsampling_convert_clines
LEAF_NODE	752:5	752:5	11	sp
LEAF_NODE	752:7	752:7	11	->
LEAF_NODE	752:9	752:9	11	subsampling_convert_clines
LEAF_NODE	752:35	752:35	7	;
LEAF_NODE	753:1	753:1	5	}
SELECTION	754:1	755:1	3	
KEYWORD	754:1	754:1	4	if
LEAF_NODE	754:1	754:1	5	if
LEAF_NODE	754:4	754:4	4	(
CONDITION	754:5	754:5	4	m > 0
EXPR	754:5	754:7	5	m > 0
FIELD	754:5	754:5	6	m
LEAF_NODE	754:5	754:5	7	m
REL_OPERATOR	754:6	754:6	6	>
LEAF_NODE	754:6	754:6	7	>
FIELD	754:7	754:7	6	0
LEAF_NODE	754:7	754:7	7	0
LEAF_NODE	754:8	754:8	4	)
STATEMENTS	755:1	759:1	4	
LEAF_NODE	755:1	755:1	5	{
STATEMENTS	756:2	758:2	5	
SELECTION	756:2	757:3	6	
KEYWORD	756:2	756:2	7	if
LEAF_NODE	756:2	756:2	8	if
LEAF_NODE	756:5	756:5	7	(
CONDITION	756:6	756:6	7	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 ) == 0
EXPR	756:6	756:131	8	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 ) == 0
FUNCTION_CALL	756:6	756:128	9	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 )
CALLEE	756:6	756:6	10	jpeg_read_raw_data_encap
LEAF_NODE	756:6	756:6	11	jpeg_read_raw_data_encap
LEAF_NODE	756:30	756:30	10	(
ARGUMENT	756:31	756:31	10	sp
FIELD	756:31	756:31	11	sp
LEAF_NODE	756:31	756:31	12	sp
LEAF_NODE	756:33	756:33	10	,
ARGUMENT	756:34	756:34	10	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	756:34	756:70	11	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	756:34	756:34	12	&
LEAF_NODE	756:34	756:34	13	&
LEAF_NODE	756:35	756:35	12	(
FIELD	756:36	756:40	12	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	756:36	756:36	13	sp
LEAF_NODE	756:38	756:38	13	->
LEAF_NODE	756:40	756:40	13	libjpeg_jpeg_decompress_struct
LEAF_NODE	756:70	756:70	12	)
LEAF_NODE	756:71	756:71	10	,
ARGUMENT	756:72	756:72	10	sp -> subsampling_convert_ycbcrimage
FIELD	756:72	756:76	11	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	756:72	756:72	12	sp
LEAF_NODE	756:74	756:74	12	->
LEAF_NODE	756:76	756:76	12	subsampling_convert_ycbcrimage
LEAF_NODE	756:106	756:106	10	,
ARGUMENT	756:107	756:127	10	sp -> subsampling_ver * 8
FIELD	756:107	756:111	11	sp -> subsampling_ver
LEAF_NODE	756:107	756:107	12	sp
LEAF_NODE	756:109	756:109	12	->
LEAF_NODE	756:111	756:111	12	subsampling_ver
LEAF_NODE	756:126	756:126	11	*
FIELD	756:127	756:127	11	8
LEAF_NODE	756:127	756:127	12	8
LEAF_NODE	756:128	756:128	10	)
EQ_OPERATOR	756:129	756:129	9	==
LEAF_NODE	756:129	756:129	10	==
FIELD	756:131	756:131	9	0
LEAF_NODE	756:131	756:131	10	0
LEAF_NODE	756:132	756:132	7	)
STATEMENTS	757:3	757:3	7	
JUMP_STATEMENT	757:3	757:12	8	return ( 0 ) ;
KEYWORD	757:3	757:3	9	return
LEAF_NODE	757:3	757:3	10	return
DESTINATION	757:9	757:9	9	( 0 )
EXPR	757:9	757:11	10	( 0 )
LEAF_NODE	757:9	757:9	11	(
FIELD	757:10	757:10	11	0
LEAF_NODE	757:10	757:10	12	0
LEAF_NODE	757:11	757:11	11	)
LEAF_NODE	757:12	757:12	9	;
EXPR_STATEMENT	758:2	758:33	6	sp -> subsampling_convert_state = m ;
EXPR	758:2	758:2	7	sp -> subsampling_convert_state = m
ASSIGN	758:2	758:32	8	sp -> subsampling_convert_state = m
LVAL	758:2	758:2	9	sp -> subsampling_convert_state
FIELD	758:2	758:6	10	sp -> subsampling_convert_state
LEAF_NODE	758:2	758:2	11	sp
LEAF_NODE	758:4	758:4	11	->
LEAF_NODE	758:6	758:6	11	subsampling_convert_state
ASSIGN_OP	758:31	758:31	9	=
LEAF_NODE	758:31	758:31	10	=
RVAL	758:32	758:32	9	m
FIELD	758:32	758:32	10	m
LEAF_NODE	758:32	758:32	11	m
LEAF_NODE	758:33	758:33	7	;
LEAF_NODE	759:1	759:1	5	}
JUMP_STATEMENT	760:1	760:10	3	return ( 1 ) ;
KEYWORD	760:1	760:1	4	return
LEAF_NODE	760:1	760:1	5	return
DESTINATION	760:7	760:7	4	( 1 )
EXPR	760:7	760:9	5	( 1 )
LEAF_NODE	760:7	760:7	6	(
FIELD	760:8	760:8	6	1
LEAF_NODE	760:8	760:8	7	1
LEAF_NODE	760:9	760:9	6	)
LEAF_NODE	760:10	760:10	4	;
LEAF_NODE	761:0	761:0	2	}
FUNCTION_DEF	763:0	784:0	1	
RETURN_TYPE	763:0	763:7	2	static int
LEAF_NODE	763:0	763:0	3	static
TYPE_NAME	763:7	763:7	3	int
LEAF_NODE	763:7	763:7	4	int
FUNCTION_NAME	764:0	764:0	2	OJPEGPreDecodeSkipScanlines
LEAF_NODE	764:0	764:0	3	OJPEGPreDecodeSkipScanlines
PARAMETER_LIST	764:27	764:37	2	( TIFF * tif )
LEAF_NODE	764:27	764:27	3	(
PARAMETER_DECL	764:28	764:34	3	TIFF * tif
TYPE	764:28	764:32	4	TIFF *
TYPE_NAME	764:28	764:28	5	TIFF
LEAF_NODE	764:28	764:28	6	TIFF
POINTER	764:32	764:32	5	*
LEAF_NODE	764:32	764:32	6	*
NAME	764:34	764:34	4	tif
LEAF_NODE	764:34	764:34	5	tif
LEAF_NODE	764:37	764:37	3	)
LEAF_NODE	765:0	765:0	2	{
STATEMENTS	766:1	783:1	2	
LEAF_NODE	766:1	766:1	3	static
SIMPLE_DECL	766:8	766:57	3	const char [ ] module ; module = "OJPEGPreDecodeSkipScanlines" ;
VAR_DECL	766:8	766:19	4	const char [ ] module ; module = "OJPEGPreDecodeSkipScanlines"
TYPE	766:8	766:25	5	const char [ ]
TYPE_NAME	766:8	766:14	6	const char
LEAF_NODE	766:8	766:8	7	const
LEAF_NODE	766:14	766:14	7	char
TYPE_SUFFIX	766:25	766:26	6	[ ]
LEAF_NODE	766:25	766:25	7	[
LEAF_NODE	766:26	766:26	7	]
NAME	766:19	766:19	5	module
LEAF_NODE	766:19	766:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	766:19	766:19	5	module = "OJPEGPreDecodeSkipScanlines"
ASSIGN	766:19	766:28	6	module = "OJPEGPreDecodeSkipScanlines"
LVAL	766:19	766:19	7	module
NAME	766:19	766:19	8	module
LEAF_NODE	766:19	766:19	9	module
ASSIGN_OP	766:27	766:27	7	=
LEAF_NODE	766:27	766:27	8	=
RVAL	766:28	766:28	7	"OJPEGPreDecodeSkipScanlines"
FIELD	766:28	766:28	8	"OJPEGPreDecodeSkipScanlines"
LEAF_NODE	766:28	766:28	9	"OJPEGPreDecodeSkipScanlines"
LEAF_NODE	766:57	766:57	4	;
SIMPLE_DECL	767:1	767:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	767:1	767:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	767:1	767:11	5	OJPEGState *
TYPE_NAME	767:1	767:1	6	OJPEGState
LEAF_NODE	767:1	767:1	7	OJPEGState
POINTER	767:11	767:11	6	*
LEAF_NODE	767:11	767:11	7	*
NAME	767:13	767:13	5	sp
LEAF_NODE	767:13	767:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	767:13	767:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	767:13	767:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	767:13	767:13	7	sp
NAME	767:13	767:13	8	sp
LEAF_NODE	767:13	767:13	9	sp
ASSIGN_OP	767:15	767:15	7	=
LEAF_NODE	767:15	767:15	8	=
RVAL	767:16	767:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	767:16	767:16	8	(
TYPE_NAME	767:17	767:17	8	OJPEGState
LEAF_NODE	767:17	767:17	9	OJPEGState
LEAF_NODE	767:27	767:27	8	*
LEAF_NODE	767:28	767:28	8	)
FIELD	767:29	767:34	8	tif -> tif_data
LEAF_NODE	767:29	767:29	9	tif
LEAF_NODE	767:32	767:32	9	->
LEAF_NODE	767:34	767:34	9	tif_data
LEAF_NODE	767:42	767:42	4	;
SIMPLE_DECL	768:1	768:9	3	uint32 m ;
VAR_DECL	768:1	768:8	4	uint32 m
TYPE	768:1	768:1	5	uint32
TYPE_NAME	768:1	768:1	6	uint32
LEAF_NODE	768:1	768:1	7	uint32
NAME	768:8	768:8	5	m
LEAF_NODE	768:8	768:8	6	m
LEAF_NODE	768:9	768:9	4	;
SELECTION	769:1	770:1	3	
KEYWORD	769:1	769:1	4	if
LEAF_NODE	769:1	769:1	5	if
LEAF_NODE	769:4	769:4	4	(
CONDITION	769:5	769:5	4	sp -> skip_buffer == NULL
EXPR	769:5	769:22	5	sp -> skip_buffer == NULL
FIELD	769:5	769:9	6	sp -> skip_buffer
LEAF_NODE	769:5	769:5	7	sp
LEAF_NODE	769:7	769:7	7	->
LEAF_NODE	769:9	769:9	7	skip_buffer
EQ_OPERATOR	769:20	769:20	6	==
LEAF_NODE	769:20	769:20	7	==
FIELD	769:22	769:22	6	NULL
LEAF_NODE	769:22	769:22	7	NULL
LEAF_NODE	769:26	769:26	4	)
STATEMENTS	770:1	777:1	4	
LEAF_NODE	770:1	770:1	5	{
STATEMENTS	771:2	772:2	5	
EXPR_STATEMENT	771:2	771:49	6	sp -> skip_buffer = _TIFFmalloc ( sp -> bytes_per_line ) ;
EXPR	771:2	771:2	7	sp -> skip_buffer = _TIFFmalloc ( sp -> bytes_per_line )
ASSIGN	771:2	771:18	8	sp -> skip_buffer = _TIFFmalloc ( sp -> bytes_per_line )
LVAL	771:2	771:2	9	sp -> skip_buffer
FIELD	771:2	771:6	10	sp -> skip_buffer
LEAF_NODE	771:2	771:2	11	sp
LEAF_NODE	771:4	771:4	11	->
LEAF_NODE	771:6	771:6	11	skip_buffer
ASSIGN_OP	771:17	771:17	9	=
LEAF_NODE	771:17	771:17	10	=
RVAL	771:18	771:18	9	_TIFFmalloc ( sp -> bytes_per_line )
FUNCTION_CALL	771:18	771:48	10	_TIFFmalloc ( sp -> bytes_per_line )
CALLEE	771:18	771:18	11	_TIFFmalloc
LEAF_NODE	771:18	771:18	12	_TIFFmalloc
LEAF_NODE	771:29	771:29	11	(
ARGUMENT	771:30	771:30	11	sp -> bytes_per_line
FIELD	771:30	771:34	12	sp -> bytes_per_line
LEAF_NODE	771:30	771:30	13	sp
LEAF_NODE	771:32	771:32	13	->
LEAF_NODE	771:34	771:34	13	bytes_per_line
LEAF_NODE	771:48	771:48	11	)
LEAF_NODE	771:49	771:49	7	;
SELECTION	772:2	773:2	6	
KEYWORD	772:2	772:2	7	if
LEAF_NODE	772:2	772:2	8	if
LEAF_NODE	772:5	772:5	7	(
CONDITION	772:6	772:6	7	sp -> skip_buffer == NULL
EXPR	772:6	772:23	8	sp -> skip_buffer == NULL
FIELD	772:6	772:10	9	sp -> skip_buffer
LEAF_NODE	772:6	772:6	10	sp
LEAF_NODE	772:8	772:8	10	->
LEAF_NODE	772:10	772:10	10	skip_buffer
EQ_OPERATOR	772:21	772:21	9	==
LEAF_NODE	772:21	772:21	10	==
FIELD	772:23	772:23	9	NULL
LEAF_NODE	772:23	772:23	10	NULL
LEAF_NODE	772:27	772:27	7	)
STATEMENTS	773:2	776:2	7	
LEAF_NODE	773:2	773:2	8	{
STATEMENTS	774:3	775:3	8	
EXPR_STATEMENT	774:3	774:59	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	774:3	774:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	774:3	774:58	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	774:3	774:3	12	TIFFErrorExt
LEAF_NODE	774:3	774:3	13	TIFFErrorExt
LEAF_NODE	774:15	774:15	12	(
ARGUMENT	774:16	774:16	12	tif -> tif_clientdata
FIELD	774:16	774:21	13	tif -> tif_clientdata
LEAF_NODE	774:16	774:16	14	tif
LEAF_NODE	774:19	774:19	14	->
LEAF_NODE	774:21	774:21	14	tif_clientdata
LEAF_NODE	774:35	774:35	12	,
ARGUMENT	774:36	774:36	12	module
FIELD	774:36	774:36	13	module
LEAF_NODE	774:36	774:36	14	module
LEAF_NODE	774:42	774:42	12	,
ARGUMENT	774:43	774:43	12	"Out of memory"
FIELD	774:43	774:43	13	"Out of memory"
LEAF_NODE	774:43	774:43	14	"Out of memory"
LEAF_NODE	774:58	774:58	12	)
LEAF_NODE	774:59	774:59	10	;
JUMP_STATEMENT	775:3	775:12	9	return ( 0 ) ;
KEYWORD	775:3	775:3	10	return
LEAF_NODE	775:3	775:3	11	return
DESTINATION	775:9	775:9	10	( 0 )
EXPR	775:9	775:11	11	( 0 )
LEAF_NODE	775:9	775:9	12	(
FIELD	775:10	775:10	12	0
LEAF_NODE	775:10	775:10	13	0
LEAF_NODE	775:11	775:11	12	)
LEAF_NODE	775:12	775:12	10	;
LEAF_NODE	776:2	776:2	8	}
LEAF_NODE	777:1	777:1	5	}
ITERATION	778:1	779:1	3	
KEYWORD	778:1	778:1	4	for
LEAF_NODE	778:1	778:1	5	for
LEAF_NODE	778:5	778:5	4	(
FOR_INIT	778:6	778:9	4	m = 0 ;
EXPR	778:6	778:6	5	m = 0
ASSIGN	778:6	778:8	6	m = 0
LVAL	778:6	778:6	7	m
FIELD	778:6	778:6	8	m
LEAF_NODE	778:6	778:6	9	m
ASSIGN_OP	778:7	778:7	7	=
LEAF_NODE	778:7	778:7	8	=
RVAL	778:8	778:8	7	0
FIELD	778:8	778:8	8	0
LEAF_NODE	778:8	778:8	9	0
LEAF_NODE	778:9	778:9	5	;
CONDITION	778:11	778:11	4	m < sp -> lines_per_strile
EXPR	778:11	778:13	5	m < sp -> lines_per_strile
FIELD	778:11	778:11	6	m
LEAF_NODE	778:11	778:11	7	m
REL_OPERATOR	778:12	778:12	6	<
LEAF_NODE	778:12	778:12	7	<
FIELD	778:13	778:17	6	sp -> lines_per_strile
LEAF_NODE	778:13	778:13	7	sp
LEAF_NODE	778:15	778:15	7	->
LEAF_NODE	778:17	778:17	7	lines_per_strile
LEAF_NODE	778:33	778:33	4	;
FOR_EXPR	778:35	778:35	4	m ++
EXPR	778:35	778:35	5	m ++
FIELD	778:35	778:36	6	m ++
LEAF_NODE	778:35	778:35	7	m
LEAF_NODE	778:36	778:36	7	++
LEAF_NODE	778:38	778:38	4	)
STATEMENTS	779:1	782:1	4	
LEAF_NODE	779:1	779:1	5	{
STATEMENTS	780:2	780:2	5	
SELECTION	780:2	781:3	6	
KEYWORD	780:2	780:2	7	if
LEAF_NODE	780:2	780:2	8	if
LEAF_NODE	780:5	780:5	7	(
CONDITION	780:6	780:6	7	jpeg_read_scanlines_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , & sp -> skip_buffer , 1 ) == 0
EXPR	780:6	780:94	8	jpeg_read_scanlines_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , & sp -> skip_buffer , 1 ) == 0
FUNCTION_CALL	780:6	780:91	9	jpeg_read_scanlines_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , & sp -> skip_buffer , 1 )
CALLEE	780:6	780:6	10	jpeg_read_scanlines_encap
LEAF_NODE	780:6	780:6	11	jpeg_read_scanlines_encap
LEAF_NODE	780:31	780:31	10	(
ARGUMENT	780:32	780:32	10	sp
FIELD	780:32	780:32	11	sp
LEAF_NODE	780:32	780:32	12	sp
LEAF_NODE	780:34	780:34	10	,
ARGUMENT	780:35	780:35	10	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	780:35	780:71	11	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	780:35	780:35	12	&
LEAF_NODE	780:35	780:35	13	&
LEAF_NODE	780:36	780:36	12	(
FIELD	780:37	780:41	12	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	780:37	780:37	13	sp
LEAF_NODE	780:39	780:39	13	->
LEAF_NODE	780:41	780:41	13	libjpeg_jpeg_decompress_struct
LEAF_NODE	780:71	780:71	12	)
LEAF_NODE	780:72	780:72	10	,
ARGUMENT	780:73	780:73	10	& sp -> skip_buffer
UNARY_EXPR	780:73	780:74	11	& sp -> skip_buffer
UNARY_OPERATOR	780:73	780:73	12	&
LEAF_NODE	780:73	780:73	13	&
FIELD	780:74	780:78	12	sp -> skip_buffer
LEAF_NODE	780:74	780:74	13	sp
LEAF_NODE	780:76	780:76	13	->
LEAF_NODE	780:78	780:78	13	skip_buffer
LEAF_NODE	780:89	780:89	10	,
ARGUMENT	780:90	780:90	10	1
FIELD	780:90	780:90	11	1
LEAF_NODE	780:90	780:90	12	1
LEAF_NODE	780:91	780:91	10	)
EQ_OPERATOR	780:92	780:92	9	==
LEAF_NODE	780:92	780:92	10	==
FIELD	780:94	780:94	9	0
LEAF_NODE	780:94	780:94	10	0
LEAF_NODE	780:95	780:95	7	)
STATEMENTS	781:3	781:3	7	
JUMP_STATEMENT	781:3	781:12	8	return ( 0 ) ;
KEYWORD	781:3	781:3	9	return
LEAF_NODE	781:3	781:3	10	return
DESTINATION	781:9	781:9	9	( 0 )
EXPR	781:9	781:11	10	( 0 )
LEAF_NODE	781:9	781:9	11	(
FIELD	781:10	781:10	11	0
LEAF_NODE	781:10	781:10	12	0
LEAF_NODE	781:11	781:11	11	)
LEAF_NODE	781:12	781:12	9	;
LEAF_NODE	782:1	782:1	5	}
JUMP_STATEMENT	783:1	783:10	3	return ( 1 ) ;
KEYWORD	783:1	783:1	4	return
LEAF_NODE	783:1	783:1	5	return
DESTINATION	783:7	783:7	4	( 1 )
EXPR	783:7	783:9	5	( 1 )
LEAF_NODE	783:7	783:7	6	(
FIELD	783:8	783:8	6	1
LEAF_NODE	783:8	783:8	7	1
LEAF_NODE	783:9	783:9	6	)
LEAF_NODE	783:10	783:10	4	;
LEAF_NODE	784:0	784:0	2	}
FUNCTION_DEF	786:0	812:0	1	
RETURN_TYPE	786:0	786:7	2	static int
LEAF_NODE	786:0	786:0	3	static
TYPE_NAME	786:7	786:7	3	int
LEAF_NODE	786:7	786:7	4	int
FUNCTION_NAME	787:0	787:0	2	OJPEGDecode
LEAF_NODE	787:0	787:0	3	OJPEGDecode
PARAMETER_LIST	787:11	787:56	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	787:11	787:11	3	(
PARAMETER_DECL	787:12	787:18	3	TIFF * tif
TYPE	787:12	787:16	4	TIFF *
TYPE_NAME	787:12	787:12	5	TIFF
LEAF_NODE	787:12	787:12	6	TIFF
POINTER	787:16	787:16	5	*
LEAF_NODE	787:16	787:16	6	*
NAME	787:18	787:18	4	tif
LEAF_NODE	787:18	787:18	5	tif
LEAF_NODE	787:21	787:21	3	,
PARAMETER_DECL	787:23	787:30	3	uint8 * buf
TYPE	787:23	787:28	4	uint8 *
TYPE_NAME	787:23	787:23	5	uint8
LEAF_NODE	787:23	787:23	6	uint8
POINTER	787:28	787:28	5	*
LEAF_NODE	787:28	787:28	6	*
NAME	787:30	787:30	4	buf
LEAF_NODE	787:30	787:30	5	buf
LEAF_NODE	787:33	787:33	3	,
PARAMETER_DECL	787:35	787:44	3	tmsize_t cc
TYPE	787:35	787:35	4	tmsize_t
TYPE_NAME	787:35	787:35	5	tmsize_t
LEAF_NODE	787:35	787:35	6	tmsize_t
NAME	787:44	787:44	4	cc
LEAF_NODE	787:44	787:44	5	cc
LEAF_NODE	787:46	787:46	3	,
PARAMETER_DECL	787:48	787:55	3	uint16 s
TYPE	787:48	787:48	4	uint16
TYPE_NAME	787:48	787:48	5	uint16
LEAF_NODE	787:48	787:48	6	uint16
NAME	787:55	787:55	4	s
LEAF_NODE	787:55	787:55	5	s
LEAF_NODE	787:56	787:56	3	)
LEAF_NODE	788:0	788:0	2	{
STATEMENTS	789:8	811:1	2	
LEAF_NODE	789:8	789:8	3	static
SIMPLE_DECL	789:15	789:48	3	const char [ ] module ; module = "OJPEGDecode" ;
VAR_DECL	789:15	789:26	4	const char [ ] module ; module = "OJPEGDecode"
TYPE	789:15	789:32	5	const char [ ]
TYPE_NAME	789:15	789:21	6	const char
LEAF_NODE	789:15	789:15	7	const
LEAF_NODE	789:21	789:21	7	char
TYPE_SUFFIX	789:32	789:33	6	[ ]
LEAF_NODE	789:32	789:32	7	[
LEAF_NODE	789:33	789:33	7	]
NAME	789:26	789:26	5	module
LEAF_NODE	789:26	789:26	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	789:26	789:26	5	module = "OJPEGDecode"
ASSIGN	789:26	789:35	6	module = "OJPEGDecode"
LVAL	789:26	789:26	7	module
NAME	789:26	789:26	8	module
LEAF_NODE	789:26	789:26	9	module
ASSIGN_OP	789:34	789:34	7	=
LEAF_NODE	789:34	789:34	8	=
RVAL	789:35	789:35	7	"OJPEGDecode"
FIELD	789:35	789:35	8	"OJPEGDecode"
LEAF_NODE	789:35	789:35	9	"OJPEGDecode"
LEAF_NODE	789:48	789:48	4	;
SIMPLE_DECL	790:1	790:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	790:1	790:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	790:1	790:11	5	OJPEGState *
TYPE_NAME	790:1	790:1	6	OJPEGState
LEAF_NODE	790:1	790:1	7	OJPEGState
POINTER	790:11	790:11	6	*
LEAF_NODE	790:11	790:11	7	*
NAME	790:13	790:13	5	sp
LEAF_NODE	790:13	790:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	790:13	790:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	790:13	790:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	790:13	790:13	7	sp
NAME	790:13	790:13	8	sp
LEAF_NODE	790:13	790:13	9	sp
ASSIGN_OP	790:15	790:15	7	=
LEAF_NODE	790:15	790:15	8	=
RVAL	790:16	790:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	790:16	790:16	8	(
TYPE_NAME	790:17	790:17	8	OJPEGState
LEAF_NODE	790:17	790:17	9	OJPEGState
LEAF_NODE	790:27	790:27	8	*
LEAF_NODE	790:28	790:28	8	)
FIELD	790:29	790:34	8	tif -> tif_data
LEAF_NODE	790:29	790:29	9	tif
LEAF_NODE	790:32	790:32	9	->
LEAF_NODE	790:34	790:34	9	tif_data
LEAF_NODE	790:42	790:42	4	;
EXPR_STATEMENT	791:1	791:8	3	( void ) s ;
EXPR	791:1	791:7	4	( void ) s
LEAF_NODE	791:1	791:1	5	(
TYPE_NAME	791:2	791:2	5	void
LEAF_NODE	791:2	791:2	6	void
LEAF_NODE	791:6	791:6	5	)
FIELD	791:7	791:7	5	s
LEAF_NODE	791:7	791:7	6	s
LEAF_NODE	791:8	791:8	4	;
SELECTION	792:8	793:8	3	
KEYWORD	792:8	792:8	4	if
LEAF_NODE	792:8	792:8	5	if
LEAF_NODE	792:10	792:10	4	(
CONDITION	792:12	792:12	4	! sp -> decoder_ok
EXPR	792:12	792:12	5	! sp -> decoder_ok
UNARY_EXPR	792:12	792:13	6	! sp -> decoder_ok
UNARY_OPERATOR	792:12	792:12	7	!
LEAF_NODE	792:12	792:12	8	!
FIELD	792:13	792:17	7	sp -> decoder_ok
LEAF_NODE	792:13	792:13	8	sp
LEAF_NODE	792:15	792:15	8	->
LEAF_NODE	792:17	792:17	8	decoder_ok
LEAF_NODE	792:28	792:28	4	)
STATEMENTS	793:8	796:8	4	
LEAF_NODE	793:8	793:8	5	{
STATEMENTS	794:12	795:12	5	
EXPR_STATEMENT	794:12	794:103	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot decode: decoder not correctly initialized" ) ;
EXPR	794:12	794:12	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot decode: decoder not correctly initialized" )
FUNCTION_CALL	794:12	794:102	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot decode: decoder not correctly initialized" )
CALLEE	794:12	794:12	9	TIFFErrorExt
LEAF_NODE	794:12	794:12	10	TIFFErrorExt
LEAF_NODE	794:24	794:24	9	(
ARGUMENT	794:25	794:25	9	tif -> tif_clientdata
FIELD	794:25	794:30	10	tif -> tif_clientdata
LEAF_NODE	794:25	794:25	11	tif
LEAF_NODE	794:28	794:28	11	->
LEAF_NODE	794:30	794:30	11	tif_clientdata
LEAF_NODE	794:44	794:44	9	,
ARGUMENT	794:45	794:45	9	module
FIELD	794:45	794:45	10	module
LEAF_NODE	794:45	794:45	11	module
LEAF_NODE	794:51	794:51	9	,
ARGUMENT	794:52	794:52	9	"Cannot decode: decoder not correctly initialized"
FIELD	794:52	794:52	10	"Cannot decode: decoder not correctly initialized"
LEAF_NODE	794:52	794:52	11	"Cannot decode: decoder not correctly initialized"
LEAF_NODE	794:102	794:102	9	)
LEAF_NODE	794:103	794:103	7	;
JUMP_STATEMENT	795:12	795:20	6	return 0 ;
KEYWORD	795:12	795:12	7	return
LEAF_NODE	795:12	795:12	8	return
DESTINATION	795:19	795:19	7	0
EXPR	795:19	795:19	8	0
FIELD	795:19	795:19	9	0
LEAF_NODE	795:19	795:19	10	0
LEAF_NODE	795:20	795:20	7	;
LEAF_NODE	796:8	796:8	5	}
SELECTION	797:8	798:8	3	
KEYWORD	797:8	797:8	4	if
LEAF_NODE	797:8	797:8	5	if
LEAF_NODE	797:10	797:10	4	(
CONDITION	797:12	797:12	4	sp -> error_in_raw_data_decoding
EXPR	797:12	797:12	5	sp -> error_in_raw_data_decoding
FIELD	797:12	797:16	6	sp -> error_in_raw_data_decoding
LEAF_NODE	797:12	797:12	7	sp
LEAF_NODE	797:14	797:14	7	->
LEAF_NODE	797:16	797:16	7	error_in_raw_data_decoding
LEAF_NODE	797:43	797:43	4	)
STATEMENTS	798:8	800:8	4	
LEAF_NODE	798:8	798:8	5	{
STATEMENTS	799:12	799:12	5	
JUMP_STATEMENT	799:12	799:20	6	return 0 ;
KEYWORD	799:12	799:12	7	return
LEAF_NODE	799:12	799:12	8	return
DESTINATION	799:19	799:19	7	0
EXPR	799:19	799:19	8	0
FIELD	799:19	799:19	9	0
LEAF_NODE	799:19	799:19	10	0
LEAF_NODE	799:20	799:20	7	;
LEAF_NODE	800:8	800:8	5	}
SELECTION	801:1	802:1	3	
KEYWORD	801:1	801:1	4	if
LEAF_NODE	801:1	801:1	5	if
LEAF_NODE	801:4	801:4	4	(
CONDITION	801:5	801:5	4	sp -> libjpeg_jpeg_query_style == 0
EXPR	801:5	801:35	5	sp -> libjpeg_jpeg_query_style == 0
FIELD	801:5	801:9	6	sp -> libjpeg_jpeg_query_style
LEAF_NODE	801:5	801:5	7	sp
LEAF_NODE	801:7	801:7	7	->
LEAF_NODE	801:9	801:9	7	libjpeg_jpeg_query_style
EQ_OPERATOR	801:33	801:33	6	==
LEAF_NODE	801:33	801:33	7	==
FIELD	801:35	801:35	6	0
LEAF_NODE	801:35	801:35	7	0
LEAF_NODE	801:36	801:36	4	)
STATEMENTS	802:1	805:1	4	
LEAF_NODE	802:1	802:1	5	{
STATEMENTS	803:2	803:2	5	
SELECTION	803:2	804:3	6	
KEYWORD	803:2	803:2	7	if
LEAF_NODE	803:2	803:2	8	if
LEAF_NODE	803:5	803:5	7	(
CONDITION	803:6	803:6	7	OJPEGDecodeRaw ( tif , buf , cc ) == 0
EXPR	803:6	803:34	8	OJPEGDecodeRaw ( tif , buf , cc ) == 0
FUNCTION_CALL	803:6	803:31	9	OJPEGDecodeRaw ( tif , buf , cc )
CALLEE	803:6	803:6	10	OJPEGDecodeRaw
LEAF_NODE	803:6	803:6	11	OJPEGDecodeRaw
LEAF_NODE	803:20	803:20	10	(
ARGUMENT	803:21	803:21	10	tif
FIELD	803:21	803:21	11	tif
LEAF_NODE	803:21	803:21	12	tif
LEAF_NODE	803:24	803:24	10	,
ARGUMENT	803:25	803:25	10	buf
FIELD	803:25	803:25	11	buf
LEAF_NODE	803:25	803:25	12	buf
LEAF_NODE	803:28	803:28	10	,
ARGUMENT	803:29	803:29	10	cc
FIELD	803:29	803:29	11	cc
LEAF_NODE	803:29	803:29	12	cc
LEAF_NODE	803:31	803:31	10	)
EQ_OPERATOR	803:32	803:32	9	==
LEAF_NODE	803:32	803:32	10	==
FIELD	803:34	803:34	9	0
LEAF_NODE	803:34	803:34	10	0
LEAF_NODE	803:35	803:35	7	)
STATEMENTS	804:3	804:3	7	
JUMP_STATEMENT	804:3	804:12	8	return ( 0 ) ;
KEYWORD	804:3	804:3	9	return
LEAF_NODE	804:3	804:3	10	return
DESTINATION	804:9	804:9	9	( 0 )
EXPR	804:9	804:11	10	( 0 )
LEAF_NODE	804:9	804:9	11	(
FIELD	804:10	804:10	11	0
LEAF_NODE	804:10	804:10	12	0
LEAF_NODE	804:11	804:11	11	)
LEAF_NODE	804:12	804:12	9	;
LEAF_NODE	805:1	805:1	5	}
SELECTION	806:1	807:1	3	
KEYWORD	806:1	806:1	4	else
LEAF_NODE	806:1	806:1	5	else
STATEMENTS	807:1	810:1	4	
LEAF_NODE	807:1	807:1	5	{
STATEMENTS	808:2	808:2	5	
SELECTION	808:2	809:3	6	
KEYWORD	808:2	808:2	7	if
LEAF_NODE	808:2	808:2	8	if
LEAF_NODE	808:5	808:5	7	(
CONDITION	808:6	808:6	7	OJPEGDecodeScanlines ( tif , buf , cc ) == 0
EXPR	808:6	808:40	8	OJPEGDecodeScanlines ( tif , buf , cc ) == 0
FUNCTION_CALL	808:6	808:37	9	OJPEGDecodeScanlines ( tif , buf , cc )
CALLEE	808:6	808:6	10	OJPEGDecodeScanlines
LEAF_NODE	808:6	808:6	11	OJPEGDecodeScanlines
LEAF_NODE	808:26	808:26	10	(
ARGUMENT	808:27	808:27	10	tif
FIELD	808:27	808:27	11	tif
LEAF_NODE	808:27	808:27	12	tif
LEAF_NODE	808:30	808:30	10	,
ARGUMENT	808:31	808:31	10	buf
FIELD	808:31	808:31	11	buf
LEAF_NODE	808:31	808:31	12	buf
LEAF_NODE	808:34	808:34	10	,
ARGUMENT	808:35	808:35	10	cc
FIELD	808:35	808:35	11	cc
LEAF_NODE	808:35	808:35	12	cc
LEAF_NODE	808:37	808:37	10	)
EQ_OPERATOR	808:38	808:38	9	==
LEAF_NODE	808:38	808:38	10	==
FIELD	808:40	808:40	9	0
LEAF_NODE	808:40	808:40	10	0
LEAF_NODE	808:41	808:41	7	)
STATEMENTS	809:3	809:3	7	
JUMP_STATEMENT	809:3	809:12	8	return ( 0 ) ;
KEYWORD	809:3	809:3	9	return
LEAF_NODE	809:3	809:3	10	return
DESTINATION	809:9	809:9	9	( 0 )
EXPR	809:9	809:11	10	( 0 )
LEAF_NODE	809:9	809:9	11	(
FIELD	809:10	809:10	11	0
LEAF_NODE	809:10	809:10	12	0
LEAF_NODE	809:11	809:11	11	)
LEAF_NODE	809:12	809:12	9	;
LEAF_NODE	810:1	810:1	5	}
JUMP_STATEMENT	811:1	811:10	3	return ( 1 ) ;
KEYWORD	811:1	811:1	4	return
LEAF_NODE	811:1	811:1	5	return
DESTINATION	811:7	811:7	4	( 1 )
EXPR	811:7	811:9	5	( 1 )
LEAF_NODE	811:7	811:7	6	(
FIELD	811:8	811:8	6	1
LEAF_NODE	811:8	811:8	7	1
LEAF_NODE	811:9	811:9	6	)
LEAF_NODE	811:10	811:10	4	;
LEAF_NODE	812:0	812:0	2	}
FUNCTION_DEF	814:0	900:0	1	
RETURN_TYPE	814:0	814:7	2	static int
LEAF_NODE	814:0	814:0	3	static
TYPE_NAME	814:7	814:7	3	int
LEAF_NODE	814:7	814:7	4	int
FUNCTION_NAME	815:0	815:0	2	OJPEGDecodeRaw
LEAF_NODE	815:0	815:0	3	OJPEGDecodeRaw
PARAMETER_LIST	815:14	815:49	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	815:14	815:14	3	(
PARAMETER_DECL	815:15	815:21	3	TIFF * tif
TYPE	815:15	815:19	4	TIFF *
TYPE_NAME	815:15	815:15	5	TIFF
LEAF_NODE	815:15	815:15	6	TIFF
POINTER	815:19	815:19	5	*
LEAF_NODE	815:19	815:19	6	*
NAME	815:21	815:21	4	tif
LEAF_NODE	815:21	815:21	5	tif
LEAF_NODE	815:24	815:24	3	,
PARAMETER_DECL	815:26	815:33	3	uint8 * buf
TYPE	815:26	815:31	4	uint8 *
TYPE_NAME	815:26	815:26	5	uint8
LEAF_NODE	815:26	815:26	6	uint8
POINTER	815:31	815:31	5	*
LEAF_NODE	815:31	815:31	6	*
NAME	815:33	815:33	4	buf
LEAF_NODE	815:33	815:33	5	buf
LEAF_NODE	815:36	815:36	3	,
PARAMETER_DECL	815:38	815:47	3	tmsize_t cc
TYPE	815:38	815:38	4	tmsize_t
TYPE_NAME	815:38	815:38	5	tmsize_t
LEAF_NODE	815:38	815:38	6	tmsize_t
NAME	815:47	815:47	4	cc
LEAF_NODE	815:47	815:47	5	cc
LEAF_NODE	815:49	815:49	3	)
LEAF_NODE	816:0	816:0	2	{
STATEMENTS	817:1	899:1	2	
LEAF_NODE	817:1	817:1	3	static
SIMPLE_DECL	817:8	817:44	3	const char [ ] module ; module = "OJPEGDecodeRaw" ;
VAR_DECL	817:8	817:19	4	const char [ ] module ; module = "OJPEGDecodeRaw"
TYPE	817:8	817:25	5	const char [ ]
TYPE_NAME	817:8	817:14	6	const char
LEAF_NODE	817:8	817:8	7	const
LEAF_NODE	817:14	817:14	7	char
TYPE_SUFFIX	817:25	817:26	6	[ ]
LEAF_NODE	817:25	817:25	7	[
LEAF_NODE	817:26	817:26	7	]
NAME	817:19	817:19	5	module
LEAF_NODE	817:19	817:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	817:19	817:19	5	module = "OJPEGDecodeRaw"
ASSIGN	817:19	817:28	6	module = "OJPEGDecodeRaw"
LVAL	817:19	817:19	7	module
NAME	817:19	817:19	8	module
LEAF_NODE	817:19	817:19	9	module
ASSIGN_OP	817:27	817:27	7	=
LEAF_NODE	817:27	817:27	8	=
RVAL	817:28	817:28	7	"OJPEGDecodeRaw"
FIELD	817:28	817:28	8	"OJPEGDecodeRaw"
LEAF_NODE	817:28	817:28	9	"OJPEGDecodeRaw"
LEAF_NODE	817:44	817:44	4	;
SIMPLE_DECL	818:1	818:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	818:1	818:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	818:1	818:11	5	OJPEGState *
TYPE_NAME	818:1	818:1	6	OJPEGState
LEAF_NODE	818:1	818:1	7	OJPEGState
POINTER	818:11	818:11	6	*
LEAF_NODE	818:11	818:11	7	*
NAME	818:13	818:13	5	sp
LEAF_NODE	818:13	818:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	818:13	818:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	818:13	818:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	818:13	818:13	7	sp
NAME	818:13	818:13	8	sp
LEAF_NODE	818:13	818:13	9	sp
ASSIGN_OP	818:15	818:15	7	=
LEAF_NODE	818:15	818:15	8	=
RVAL	818:16	818:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	818:16	818:16	8	(
TYPE_NAME	818:17	818:17	8	OJPEGState
LEAF_NODE	818:17	818:17	9	OJPEGState
LEAF_NODE	818:27	818:27	8	*
LEAF_NODE	818:28	818:28	8	)
FIELD	818:29	818:34	8	tif -> tif_data
LEAF_NODE	818:29	818:29	9	tif
LEAF_NODE	818:32	818:32	9	->
LEAF_NODE	818:34	818:34	9	tif_data
LEAF_NODE	818:42	818:42	4	;
SIMPLE_DECL	819:1	819:9	3	uint8 * m ;
VAR_DECL	819:1	819:8	4	uint8 * m
TYPE	819:1	819:6	5	uint8 *
TYPE_NAME	819:1	819:1	6	uint8
LEAF_NODE	819:1	819:1	7	uint8
POINTER	819:6	819:6	6	*
LEAF_NODE	819:6	819:6	7	*
NAME	819:8	819:8	5	m
LEAF_NODE	819:8	819:8	6	m
LEAF_NODE	819:9	819:9	4	;
SIMPLE_DECL	820:1	820:11	3	tmsize_t n ;
VAR_DECL	820:1	820:10	4	tmsize_t n
TYPE	820:1	820:1	5	tmsize_t
TYPE_NAME	820:1	820:1	6	tmsize_t
LEAF_NODE	820:1	820:1	7	tmsize_t
NAME	820:10	820:10	5	n
LEAF_NODE	820:10	820:10	6	n
LEAF_NODE	820:11	820:11	4	;
SIMPLE_DECL	821:1	821:10	3	uint8 * oy ;
VAR_DECL	821:1	821:8	4	uint8 * oy
TYPE	821:1	821:6	5	uint8 *
TYPE_NAME	821:1	821:1	6	uint8
LEAF_NODE	821:1	821:1	7	uint8
POINTER	821:6	821:6	6	*
LEAF_NODE	821:6	821:6	7	*
NAME	821:8	821:8	5	oy
LEAF_NODE	821:8	821:8	6	oy
LEAF_NODE	821:10	821:10	4	;
SIMPLE_DECL	822:1	822:11	3	uint8 * ocb ;
VAR_DECL	822:1	822:8	4	uint8 * ocb
TYPE	822:1	822:6	5	uint8 *
TYPE_NAME	822:1	822:1	6	uint8
LEAF_NODE	822:1	822:1	7	uint8
POINTER	822:6	822:6	6	*
LEAF_NODE	822:6	822:6	7	*
NAME	822:8	822:8	5	ocb
LEAF_NODE	822:8	822:8	6	ocb
LEAF_NODE	822:11	822:11	4	;
SIMPLE_DECL	823:1	823:11	3	uint8 * ocr ;
VAR_DECL	823:1	823:8	4	uint8 * ocr
TYPE	823:1	823:6	5	uint8 *
TYPE_NAME	823:1	823:1	6	uint8
LEAF_NODE	823:1	823:1	7	uint8
POINTER	823:6	823:6	6	*
LEAF_NODE	823:6	823:6	7	*
NAME	823:8	823:8	5	ocr
LEAF_NODE	823:8	823:8	6	ocr
LEAF_NODE	823:11	823:11	4	;
SIMPLE_DECL	824:1	824:9	3	uint8 * p ;
VAR_DECL	824:1	824:8	4	uint8 * p
TYPE	824:1	824:6	5	uint8 *
TYPE_NAME	824:1	824:1	6	uint8
LEAF_NODE	824:1	824:1	7	uint8
POINTER	824:6	824:6	6	*
LEAF_NODE	824:6	824:6	7	*
NAME	824:8	824:8	5	p
LEAF_NODE	824:8	824:8	6	p
LEAF_NODE	824:9	824:9	4	;
SIMPLE_DECL	825:1	825:9	3	uint32 q ;
VAR_DECL	825:1	825:8	4	uint32 q
TYPE	825:1	825:1	5	uint32
TYPE_NAME	825:1	825:1	6	uint32
LEAF_NODE	825:1	825:1	7	uint32
NAME	825:8	825:8	5	q
LEAF_NODE	825:8	825:8	6	q
LEAF_NODE	825:9	825:9	4	;
SIMPLE_DECL	826:1	826:9	3	uint8 * r ;
VAR_DECL	826:1	826:8	4	uint8 * r
TYPE	826:1	826:6	5	uint8 *
TYPE_NAME	826:1	826:1	6	uint8
LEAF_NODE	826:1	826:1	7	uint8
POINTER	826:6	826:6	6	*
LEAF_NODE	826:6	826:6	7	*
NAME	826:8	826:8	5	r
LEAF_NODE	826:8	826:8	6	r
LEAF_NODE	826:9	826:9	4	;
SIMPLE_DECL	827:1	827:12	3	uint8 sx , uint8 sy ;
INIT_DECL_LIST	827:1	827:1	4	uint8 sx , uint8 sy
VAR_DECL	827:1	827:7	5	uint8 sx
TYPE	827:1	827:1	6	uint8
TYPE_NAME	827:1	827:1	7	uint8
LEAF_NODE	827:1	827:1	8	uint8
NAME	827:7	827:7	6	sx
LEAF_NODE	827:7	827:7	7	sx
LEAF_NODE	827:9	827:9	5	,
VAR_DECL	827:1	827:10	5	uint8 sy
TYPE	827:1	827:1	6	uint8
TYPE_NAME	827:1	827:1	7	uint8
LEAF_NODE	827:1	827:1	8	uint8
NAME	827:10	827:10	6	sy
LEAF_NODE	827:10	827:10	7	sy
LEAF_NODE	827:12	827:12	4	;
SELECTION	828:1	829:1	3	
KEYWORD	828:1	828:1	4	if
LEAF_NODE	828:1	828:1	5	if
LEAF_NODE	828:4	828:4	4	(
CONDITION	828:5	828:5	4	cc % sp -> bytes_per_line != 0
EXPR	828:5	828:28	5	cc % sp -> bytes_per_line != 0
FIELD	828:5	828:5	6	cc
LEAF_NODE	828:5	828:5	7	cc
LEAF_NODE	828:7	828:7	6	%
FIELD	828:8	828:12	6	sp -> bytes_per_line
LEAF_NODE	828:8	828:8	7	sp
LEAF_NODE	828:10	828:10	7	->
LEAF_NODE	828:12	828:12	7	bytes_per_line
EQ_OPERATOR	828:26	828:26	6	!=
LEAF_NODE	828:26	828:26	7	!=
FIELD	828:28	828:28	6	0
LEAF_NODE	828:28	828:28	7	0
LEAF_NODE	828:29	828:29	4	)
STATEMENTS	829:1	832:1	4	
LEAF_NODE	829:1	829:1	5	{
STATEMENTS	830:2	831:2	5	
EXPR_STATEMENT	830:2	830:73	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanline not read" ) ;
EXPR	830:2	830:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanline not read" )
FUNCTION_CALL	830:2	830:72	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanline not read" )
CALLEE	830:2	830:2	9	TIFFErrorExt
LEAF_NODE	830:2	830:2	10	TIFFErrorExt
LEAF_NODE	830:14	830:14	9	(
ARGUMENT	830:15	830:15	9	tif -> tif_clientdata
FIELD	830:15	830:20	10	tif -> tif_clientdata
LEAF_NODE	830:15	830:15	11	tif
LEAF_NODE	830:18	830:18	11	->
LEAF_NODE	830:20	830:20	11	tif_clientdata
LEAF_NODE	830:34	830:34	9	,
ARGUMENT	830:35	830:35	9	module
FIELD	830:35	830:35	10	module
LEAF_NODE	830:35	830:35	11	module
LEAF_NODE	830:41	830:41	9	,
ARGUMENT	830:42	830:42	9	"Fractional scanline not read"
FIELD	830:42	830:42	10	"Fractional scanline not read"
LEAF_NODE	830:42	830:42	11	"Fractional scanline not read"
LEAF_NODE	830:72	830:72	9	)
LEAF_NODE	830:73	830:73	7	;
JUMP_STATEMENT	831:2	831:11	6	return ( 0 ) ;
KEYWORD	831:2	831:2	7	return
LEAF_NODE	831:2	831:2	8	return
DESTINATION	831:8	831:8	7	( 0 )
EXPR	831:8	831:10	8	( 0 )
LEAF_NODE	831:8	831:8	9	(
FIELD	831:9	831:9	9	0
LEAF_NODE	831:9	831:9	10	0
LEAF_NODE	831:10	831:10	9	)
LEAF_NODE	831:11	831:11	7	;
LEAF_NODE	832:1	832:1	5	}
EXPR_STATEMENT	833:1	833:13	3	assert ( cc > 0 ) ;
EXPR	833:1	833:1	4	assert ( cc > 0 )
FUNCTION_CALL	833:1	833:12	5	assert ( cc > 0 )
CALLEE	833:1	833:1	6	assert
LEAF_NODE	833:1	833:1	7	assert
LEAF_NODE	833:7	833:7	6	(
ARGUMENT	833:8	833:11	6	cc > 0
FIELD	833:8	833:8	7	cc
LEAF_NODE	833:8	833:8	8	cc
REL_OPERATOR	833:10	833:10	7	>
LEAF_NODE	833:10	833:10	8	>
FIELD	833:11	833:11	7	0
LEAF_NODE	833:11	833:11	8	0
LEAF_NODE	833:12	833:12	6	)
LEAF_NODE	833:13	833:13	4	;
EXPR_STATEMENT	834:1	834:6	3	m = buf ;
EXPR	834:1	834:1	4	m = buf
ASSIGN	834:1	834:3	5	m = buf
LVAL	834:1	834:1	6	m
FIELD	834:1	834:1	7	m
LEAF_NODE	834:1	834:1	8	m
ASSIGN_OP	834:2	834:2	6	=
LEAF_NODE	834:2	834:2	7	=
RVAL	834:3	834:3	6	buf
FIELD	834:3	834:3	7	buf
LEAF_NODE	834:3	834:3	8	buf
LEAF_NODE	834:6	834:6	4	;
EXPR_STATEMENT	835:1	835:5	3	n = cc ;
EXPR	835:1	835:1	4	n = cc
ASSIGN	835:1	835:3	5	n = cc
LVAL	835:1	835:1	6	n
FIELD	835:1	835:1	7	n
LEAF_NODE	835:1	835:1	8	n
ASSIGN_OP	835:2	835:2	6	=
LEAF_NODE	835:2	835:2	7	=
RVAL	835:3	835:3	6	cc
FIELD	835:3	835:3	7	cc
LEAF_NODE	835:3	835:3	8	cc
LEAF_NODE	835:5	835:5	4	;
ITERATION	836:1	837:1	3	
KEYWORD	836:1	836:1	4	do
LEAF_NODE	836:1	836:1	5	do
LEAF_NODE	898:8	898:8	4	(
CONDITION	898:9	898:9	4	n > 0
EXPR	898:9	898:11	5	n > 0
FIELD	898:9	898:9	6	n
LEAF_NODE	898:9	898:9	7	n
REL_OPERATOR	898:10	898:10	6	>
LEAF_NODE	898:10	898:10	7	>
FIELD	898:11	898:11	6	0
LEAF_NODE	898:11	898:11	7	0
LEAF_NODE	898:12	898:12	4	)
STATEMENTS	837:1	898:1	4	
LEAF_NODE	837:1	837:1	5	{
STATEMENTS	838:2	897:2	5	
SELECTION	838:2	839:2	6	
KEYWORD	838:2	838:2	7	if
LEAF_NODE	838:2	838:2	8	if
LEAF_NODE	838:5	838:5	7	(
CONDITION	838:6	838:6	7	sp -> subsampling_convert_state == 0
EXPR	838:6	838:37	8	sp -> subsampling_convert_state == 0
FIELD	838:6	838:10	9	sp -> subsampling_convert_state
LEAF_NODE	838:6	838:6	10	sp
LEAF_NODE	838:8	838:8	10	->
LEAF_NODE	838:10	838:10	10	subsampling_convert_state
EQ_OPERATOR	838:35	838:35	9	==
LEAF_NODE	838:35	838:35	10	==
FIELD	838:37	838:37	9	0
LEAF_NODE	838:37	838:37	10	0
LEAF_NODE	838:38	838:38	7	)
STATEMENTS	839:2	875:2	7	
LEAF_NODE	839:2	839:2	8	{
STATEMENTS	840:3	870:3	8	
SIMPLE_DECL	840:3	840:76	9	const jpeg_decompress_struct * cinfo ; cinfo = & sp -> libjpeg_jpeg_decompress_struct ;
VAR_DECL	840:3	840:33	10	const jpeg_decompress_struct * cinfo ; cinfo = & sp -> libjpeg_jpeg_decompress_struct
TYPE	840:3	840:31	11	const jpeg_decompress_struct *
TYPE_NAME	840:3	840:9	12	const jpeg_decompress_struct
LEAF_NODE	840:3	840:3	13	const
LEAF_NODE	840:9	840:9	13	jpeg_decompress_struct
POINTER	840:31	840:31	12	*
LEAF_NODE	840:31	840:31	13	*
NAME	840:33	840:33	11	cinfo
LEAF_NODE	840:33	840:33	12	cinfo
LEAF_NODE	0:0	0:0	11	;
INIT	840:33	840:33	11	cinfo = & sp -> libjpeg_jpeg_decompress_struct
ASSIGN	840:33	840:41	12	cinfo = & sp -> libjpeg_jpeg_decompress_struct
LVAL	840:33	840:33	13	cinfo
NAME	840:33	840:33	14	cinfo
LEAF_NODE	840:33	840:33	15	cinfo
ASSIGN_OP	840:39	840:39	13	=
LEAF_NODE	840:39	840:39	14	=
RVAL	840:41	840:41	13	& sp -> libjpeg_jpeg_decompress_struct
UNARY_EXPR	840:41	840:42	14	& sp -> libjpeg_jpeg_decompress_struct
UNARY_OPERATOR	840:41	840:41	15	&
LEAF_NODE	840:41	840:41	16	&
FIELD	840:42	840:46	15	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	840:42	840:42	16	sp
LEAF_NODE	840:44	840:44	16	->
LEAF_NODE	840:46	840:46	16	libjpeg_jpeg_decompress_struct
LEAF_NODE	840:76	840:76	10	;
SIMPLE_DECL	841:3	841:16	9	int width ; width = 0 ;
VAR_DECL	841:3	841:7	10	int width ; width = 0
TYPE	841:3	841:3	11	int
TYPE_NAME	841:3	841:3	12	int
LEAF_NODE	841:3	841:3	13	int
NAME	841:7	841:7	11	width
LEAF_NODE	841:7	841:7	12	width
LEAF_NODE	0:0	0:0	11	;
INIT	841:7	841:7	11	width = 0
ASSIGN	841:7	841:15	12	width = 0
LVAL	841:7	841:7	13	width
NAME	841:7	841:7	14	width
LEAF_NODE	841:7	841:7	15	width
ASSIGN_OP	841:13	841:13	13	=
LEAF_NODE	841:13	841:13	14	=
RVAL	841:15	841:15	13	0
FIELD	841:15	841:15	14	0
LEAF_NODE	841:15	841:15	15	0
LEAF_NODE	841:16	841:16	10	;
SIMPLE_DECL	842:3	842:25	9	int last_col_width ; last_col_width = 0 ;
VAR_DECL	842:3	842:7	10	int last_col_width ; last_col_width = 0
TYPE	842:3	842:3	11	int
TYPE_NAME	842:3	842:3	12	int
LEAF_NODE	842:3	842:3	13	int
NAME	842:7	842:7	11	last_col_width
LEAF_NODE	842:7	842:7	12	last_col_width
LEAF_NODE	0:0	0:0	11	;
INIT	842:7	842:7	11	last_col_width = 0
ASSIGN	842:7	842:24	12	last_col_width = 0
LVAL	842:7	842:7	13	last_col_width
NAME	842:7	842:7	14	last_col_width
LEAF_NODE	842:7	842:7	15	last_col_width
ASSIGN_OP	842:22	842:22	13	=
LEAF_NODE	842:22	842:22	14	=
RVAL	842:24	842:24	13	0
FIELD	842:24	842:24	14	0
LEAF_NODE	842:24	842:24	15	0
LEAF_NODE	842:25	842:25	10	;
SIMPLE_DECL	843:3	843:17	9	int jpeg_bytes ;
VAR_DECL	843:3	843:7	10	int jpeg_bytes
TYPE	843:3	843:3	11	int
TYPE_NAME	843:3	843:3	12	int
LEAF_NODE	843:3	843:3	13	int
NAME	843:7	843:7	11	jpeg_bytes
LEAF_NODE	843:7	843:7	12	jpeg_bytes
LEAF_NODE	843:17	843:17	10	;
SIMPLE_DECL	844:3	844:21	9	int expected_bytes ;
VAR_DECL	844:3	844:7	10	int expected_bytes
TYPE	844:3	844:3	11	int
TYPE_NAME	844:3	844:3	12	int
LEAF_NODE	844:3	844:3	13	int
NAME	844:7	844:7	11	expected_bytes
LEAF_NODE	844:7	844:7	12	expected_bytes
LEAF_NODE	844:21	844:21	10	;
SIMPLE_DECL	845:3	845:8	9	int i ;
VAR_DECL	845:3	845:7	10	int i
TYPE	845:3	845:3	11	int
TYPE_NAME	845:3	845:3	12	int
LEAF_NODE	845:3	845:3	13	int
NAME	845:7	845:7	11	i
LEAF_NODE	845:7	845:7	12	i
LEAF_NODE	845:8	845:8	10	;
SELECTION	846:3	847:3	9	
KEYWORD	846:3	846:3	10	if
LEAF_NODE	846:3	846:3	11	if
LEAF_NODE	846:6	846:6	10	(
CONDITION	846:7	846:7	10	cinfo -> MCUs_per_row == 0
EXPR	846:7	846:30	11	cinfo -> MCUs_per_row == 0
FIELD	846:7	846:14	12	cinfo -> MCUs_per_row
LEAF_NODE	846:7	846:7	13	cinfo
LEAF_NODE	846:12	846:12	13	->
LEAF_NODE	846:14	846:14	13	MCUs_per_row
EQ_OPERATOR	846:27	846:27	12	==
LEAF_NODE	846:27	846:27	13	==
FIELD	846:30	846:30	12	0
LEAF_NODE	846:30	846:30	13	0
LEAF_NODE	846:31	846:31	10	)
STATEMENTS	847:3	850:3	10	
LEAF_NODE	847:3	847:3	11	{
STATEMENTS	848:4	849:4	11	
EXPR_STATEMENT	848:4	848:38	12	sp -> error_in_raw_data_decoding = 1 ;
EXPR	848:4	848:4	13	sp -> error_in_raw_data_decoding = 1
ASSIGN	848:4	848:37	14	sp -> error_in_raw_data_decoding = 1
LVAL	848:4	848:4	15	sp -> error_in_raw_data_decoding
FIELD	848:4	848:8	16	sp -> error_in_raw_data_decoding
LEAF_NODE	848:4	848:4	17	sp
LEAF_NODE	848:6	848:6	17	->
LEAF_NODE	848:8	848:8	17	error_in_raw_data_decoding
ASSIGN_OP	848:35	848:35	15	=
LEAF_NODE	848:35	848:35	16	=
RVAL	848:37	848:37	15	1
FIELD	848:37	848:37	16	1
LEAF_NODE	848:37	848:37	17	1
LEAF_NODE	848:38	848:38	13	;
JUMP_STATEMENT	849:4	849:12	12	return 0 ;
KEYWORD	849:4	849:4	13	return
LEAF_NODE	849:4	849:4	14	return
DESTINATION	849:11	849:11	13	0
EXPR	849:11	849:11	14	0
FIELD	849:11	849:11	15	0
LEAF_NODE	849:11	849:11	16	0
LEAF_NODE	849:12	849:12	13	;
LEAF_NODE	850:3	850:3	11	}
ITERATION	851:3	852:3	9	
KEYWORD	851:3	851:3	10	for
LEAF_NODE	851:3	851:3	11	for
LEAF_NODE	851:7	851:7	10	(
FOR_INIT	851:8	851:13	10	i = 0 ;
EXPR	851:8	851:8	11	i = 0
ASSIGN	851:8	851:12	12	i = 0
LVAL	851:8	851:8	13	i
FIELD	851:8	851:8	14	i
LEAF_NODE	851:8	851:8	15	i
ASSIGN_OP	851:10	851:10	13	=
LEAF_NODE	851:10	851:10	14	=
RVAL	851:12	851:12	13	0
FIELD	851:12	851:12	14	0
LEAF_NODE	851:12	851:12	15	0
LEAF_NODE	851:13	851:13	11	;
CONDITION	851:15	851:15	10	i < cinfo -> comps_in_scan
EXPR	851:15	851:19	11	i < cinfo -> comps_in_scan
FIELD	851:15	851:15	12	i
LEAF_NODE	851:15	851:15	13	i
REL_OPERATOR	851:17	851:17	12	<
LEAF_NODE	851:17	851:17	13	<
FIELD	851:19	851:26	12	cinfo -> comps_in_scan
LEAF_NODE	851:19	851:19	13	cinfo
LEAF_NODE	851:24	851:24	13	->
LEAF_NODE	851:26	851:26	13	comps_in_scan
LEAF_NODE	851:39	851:39	10	;
FOR_EXPR	851:41	851:41	10	++ i
EXPR	851:41	851:43	11	++ i
LEAF_NODE	851:41	851:41	12	++
FIELD	851:43	851:43	12	i
LEAF_NODE	851:43	851:43	13	i
LEAF_NODE	851:44	851:44	10	)
STATEMENTS	852:3	861:3	10	
LEAF_NODE	852:3	852:3	11	{
STATEMENTS	853:4	859:4	11	
SIMPLE_DECL	853:4	853:61	12	const jpeg_component_info * info ; info = cinfo -> cur_comp_info [ i ] ;
VAR_DECL	853:4	853:31	13	const jpeg_component_info * info ; info = cinfo -> cur_comp_info [ i ]
TYPE	853:4	853:29	14	const jpeg_component_info *
TYPE_NAME	853:4	853:10	15	const jpeg_component_info
LEAF_NODE	853:4	853:4	16	const
LEAF_NODE	853:10	853:10	16	jpeg_component_info
POINTER	853:29	853:29	15	*
LEAF_NODE	853:29	853:29	16	*
NAME	853:31	853:31	14	info
LEAF_NODE	853:31	853:31	15	info
LEAF_NODE	0:0	0:0	14	;
INIT	853:31	853:31	14	info = cinfo -> cur_comp_info [ i ]
ASSIGN	853:31	853:38	15	info = cinfo -> cur_comp_info [ i ]
LVAL	853:31	853:31	16	info
NAME	853:31	853:31	17	info
LEAF_NODE	853:31	853:31	18	info
ASSIGN_OP	853:36	853:36	16	=
LEAF_NODE	853:36	853:36	17	=
RVAL	853:38	853:38	16	cinfo -> cur_comp_info [ i ]
FIELD	853:38	853:60	17	cinfo -> cur_comp_info [ i ]
LEAF_NODE	853:38	853:38	18	cinfo
LEAF_NODE	853:43	853:43	18	->
LEAF_NODE	853:45	853:45	18	cur_comp_info
LEAF_NODE	853:58	853:58	18	[
EXPR	853:59	853:59	18	i
FIELD	853:59	853:59	19	i
LEAF_NODE	853:59	853:59	20	i
LEAF_NODE	853:60	853:60	18	]
LEAF_NODE	853:61	853:61	13	;
EXPR_STATEMENT	855:4	855:54	12	width += info -> MCU_width * info -> DCT_h_scaled_size ;
EXPR	855:4	855:4	13	width += info -> MCU_width * info -> DCT_h_scaled_size
ASSIGN	855:4	855:13	14	width += info -> MCU_width * info -> DCT_h_scaled_size
LVAL	855:4	855:4	15	width
FIELD	855:4	855:4	16	width
LEAF_NODE	855:4	855:4	17	width
ASSIGN_OP	855:10	855:10	15	+=
LEAF_NODE	855:10	855:10	16	+=
RVAL	855:13	855:31	15	info -> MCU_width * info -> DCT_h_scaled_size
FIELD	855:13	855:19	16	info -> MCU_width
LEAF_NODE	855:13	855:13	17	info
LEAF_NODE	855:17	855:17	17	->
LEAF_NODE	855:19	855:19	17	MCU_width
LEAF_NODE	855:29	855:29	16	*
FIELD	855:31	855:37	16	info -> DCT_h_scaled_size
LEAF_NODE	855:31	855:31	17	info
LEAF_NODE	855:35	855:35	17	->
LEAF_NODE	855:37	855:37	17	DCT_h_scaled_size
LEAF_NODE	855:54	855:54	13	;
EXPR_STATEMENT	856:4	856:68	12	last_col_width += info -> last_col_width * info -> DCT_h_scaled_size ;
EXPR	856:4	856:4	13	last_col_width += info -> last_col_width * info -> DCT_h_scaled_size
ASSIGN	856:4	856:22	14	last_col_width += info -> last_col_width * info -> DCT_h_scaled_size
LVAL	856:4	856:4	15	last_col_width
FIELD	856:4	856:4	16	last_col_width
LEAF_NODE	856:4	856:4	17	last_col_width
ASSIGN_OP	856:19	856:19	15	+=
LEAF_NODE	856:19	856:19	16	+=
RVAL	856:22	856:45	15	info -> last_col_width * info -> DCT_h_scaled_size
FIELD	856:22	856:28	16	info -> last_col_width
LEAF_NODE	856:22	856:22	17	info
LEAF_NODE	856:26	856:26	17	->
LEAF_NODE	856:28	856:28	17	last_col_width
LEAF_NODE	856:43	856:43	16	*
FIELD	856:45	856:51	16	info -> DCT_h_scaled_size
LEAF_NODE	856:45	856:45	17	info
LEAF_NODE	856:49	856:49	17	->
LEAF_NODE	856:51	856:51	17	DCT_h_scaled_size
LEAF_NODE	856:68	856:68	13	;
EXPR_STATEMENT	858:4	858:52	12	width += info -> MCU_width * info -> DCT_scaled_size ;
EXPR	858:4	858:4	13	width += info -> MCU_width * info -> DCT_scaled_size
ASSIGN	858:4	858:13	14	width += info -> MCU_width * info -> DCT_scaled_size
LVAL	858:4	858:4	15	width
FIELD	858:4	858:4	16	width
LEAF_NODE	858:4	858:4	17	width
ASSIGN_OP	858:10	858:10	15	+=
LEAF_NODE	858:10	858:10	16	+=
RVAL	858:13	858:31	15	info -> MCU_width * info -> DCT_scaled_size
FIELD	858:13	858:19	16	info -> MCU_width
LEAF_NODE	858:13	858:13	17	info
LEAF_NODE	858:17	858:17	17	->
LEAF_NODE	858:19	858:19	17	MCU_width
LEAF_NODE	858:29	858:29	16	*
FIELD	858:31	858:37	16	info -> DCT_scaled_size
LEAF_NODE	858:31	858:31	17	info
LEAF_NODE	858:35	858:35	17	->
LEAF_NODE	858:37	858:37	17	DCT_scaled_size
LEAF_NODE	858:52	858:52	13	;
EXPR_STATEMENT	859:4	859:66	12	last_col_width += info -> last_col_width * info -> DCT_scaled_size ;
EXPR	859:4	859:4	13	last_col_width += info -> last_col_width * info -> DCT_scaled_size
ASSIGN	859:4	859:22	14	last_col_width += info -> last_col_width * info -> DCT_scaled_size
LVAL	859:4	859:4	15	last_col_width
FIELD	859:4	859:4	16	last_col_width
LEAF_NODE	859:4	859:4	17	last_col_width
ASSIGN_OP	859:19	859:19	15	+=
LEAF_NODE	859:19	859:19	16	+=
RVAL	859:22	859:45	15	info -> last_col_width * info -> DCT_scaled_size
FIELD	859:22	859:28	16	info -> last_col_width
LEAF_NODE	859:22	859:22	17	info
LEAF_NODE	859:26	859:26	17	->
LEAF_NODE	859:28	859:28	17	last_col_width
LEAF_NODE	859:43	859:43	16	*
FIELD	859:45	859:51	16	info -> DCT_scaled_size
LEAF_NODE	859:45	859:45	17	info
LEAF_NODE	859:49	859:49	17	->
LEAF_NODE	859:51	859:51	17	DCT_scaled_size
LEAF_NODE	859:66	859:66	13	;
LEAF_NODE	861:3	861:3	11	}
EXPR_STATEMENT	862:3	862:66	9	jpeg_bytes = ( cinfo -> MCUs_per_row - 1 ) * width + last_col_width ;
EXPR	862:3	862:3	10	jpeg_bytes = ( cinfo -> MCUs_per_row - 1 ) * width + last_col_width
ASSIGN	862:3	862:16	11	jpeg_bytes = ( cinfo -> MCUs_per_row - 1 ) * width + last_col_width
LVAL	862:3	862:3	12	jpeg_bytes
FIELD	862:3	862:3	13	jpeg_bytes
LEAF_NODE	862:3	862:3	14	jpeg_bytes
ASSIGN_OP	862:14	862:14	12	=
LEAF_NODE	862:14	862:14	13	=
RVAL	862:16	862:52	12	( cinfo -> MCUs_per_row - 1 ) * width + last_col_width
LEAF_NODE	862:16	862:16	13	(
FIELD	862:17	862:24	13	cinfo -> MCUs_per_row
LEAF_NODE	862:17	862:17	14	cinfo
LEAF_NODE	862:22	862:22	14	->
LEAF_NODE	862:24	862:24	14	MCUs_per_row
LEAF_NODE	862:37	862:37	13	-
FIELD	862:39	862:39	13	1
LEAF_NODE	862:39	862:39	14	1
LEAF_NODE	862:40	862:40	13	)
LEAF_NODE	862:42	862:42	13	*
FIELD	862:44	862:44	13	width
LEAF_NODE	862:44	862:44	14	width
LEAF_NODE	862:50	862:50	13	+
FIELD	862:52	862:52	13	last_col_width
LEAF_NODE	862:52	862:52	14	last_col_width
LEAF_NODE	862:66	862:66	10	;
LEAF_NODE	863:3	863:3	9	expected_bytes
LEAF_NODE	863:18	863:18	9	=
LEAF_NODE	863:20	863:20	9	sp
LEAF_NODE	863:22	863:22	9	->
LEAF_NODE	863:24	863:24	9	subsampling_convert_clinelenout
EXPR_STATEMENT	863:56	863:99	9	* sp -> subsampling_ver * sp -> subsampling_hor ;
EXPR	863:56	863:80	10	* sp -> subsampling_ver * sp -> subsampling_hor
UNARY_EXPR	863:56	863:58	11	* sp -> subsampling_ver
UNARY_OPERATOR	863:56	863:56	12	*
LEAF_NODE	863:56	863:56	13	*
FIELD	863:58	863:62	12	sp -> subsampling_ver
LEAF_NODE	863:58	863:58	13	sp
LEAF_NODE	863:60	863:60	13	->
LEAF_NODE	863:62	863:62	13	subsampling_ver
LEAF_NODE	863:78	863:78	11	*
FIELD	863:80	863:84	11	sp -> subsampling_hor
LEAF_NODE	863:80	863:80	12	sp
LEAF_NODE	863:82	863:82	12	->
LEAF_NODE	863:84	863:84	12	subsampling_hor
LEAF_NODE	863:99	863:99	10	;
SELECTION	864:3	865:3	9	
KEYWORD	864:3	864:3	10	if
LEAF_NODE	864:3	864:3	11	if
LEAF_NODE	864:6	864:6	10	(
CONDITION	864:7	864:7	10	jpeg_bytes != expected_bytes
EXPR	864:7	864:21	11	jpeg_bytes != expected_bytes
FIELD	864:7	864:7	12	jpeg_bytes
LEAF_NODE	864:7	864:7	13	jpeg_bytes
EQ_OPERATOR	864:18	864:18	12	!=
LEAF_NODE	864:18	864:18	13	!=
FIELD	864:21	864:21	12	expected_bytes
LEAF_NODE	864:21	864:21	13	expected_bytes
LEAF_NODE	864:35	864:35	10	)
STATEMENTS	865:3	869:3	10	
LEAF_NODE	865:3	865:3	11	{
STATEMENTS	866:4	868:4	11	
EXPR_STATEMENT	866:4	866:87	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Inconsistent number of MCU in codestream" ) ;
EXPR	866:4	866:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Inconsistent number of MCU in codestream" )
FUNCTION_CALL	866:4	866:86	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Inconsistent number of MCU in codestream" )
CALLEE	866:4	866:4	15	TIFFErrorExt
LEAF_NODE	866:4	866:4	16	TIFFErrorExt
LEAF_NODE	866:16	866:16	15	(
ARGUMENT	866:17	866:17	15	tif -> tif_clientdata
FIELD	866:17	866:22	16	tif -> tif_clientdata
LEAF_NODE	866:17	866:17	17	tif
LEAF_NODE	866:20	866:20	17	->
LEAF_NODE	866:22	866:22	17	tif_clientdata
LEAF_NODE	866:36	866:36	15	,
ARGUMENT	866:37	866:37	15	module
FIELD	866:37	866:37	16	module
LEAF_NODE	866:37	866:37	17	module
LEAF_NODE	866:43	866:43	15	,
ARGUMENT	866:44	866:44	15	"Inconsistent number of MCU in codestream"
FIELD	866:44	866:44	16	"Inconsistent number of MCU in codestream"
LEAF_NODE	866:44	866:44	17	"Inconsistent number of MCU in codestream"
LEAF_NODE	866:86	866:86	15	)
LEAF_NODE	866:87	866:87	13	;
EXPR_STATEMENT	867:4	867:38	12	sp -> error_in_raw_data_decoding = 1 ;
EXPR	867:4	867:4	13	sp -> error_in_raw_data_decoding = 1
ASSIGN	867:4	867:37	14	sp -> error_in_raw_data_decoding = 1
LVAL	867:4	867:4	15	sp -> error_in_raw_data_decoding
FIELD	867:4	867:8	16	sp -> error_in_raw_data_decoding
LEAF_NODE	867:4	867:4	17	sp
LEAF_NODE	867:6	867:6	17	->
LEAF_NODE	867:8	867:8	17	error_in_raw_data_decoding
ASSIGN_OP	867:35	867:35	15	=
LEAF_NODE	867:35	867:35	16	=
RVAL	867:37	867:37	15	1
FIELD	867:37	867:37	16	1
LEAF_NODE	867:37	867:37	17	1
LEAF_NODE	867:38	867:38	13	;
JUMP_STATEMENT	868:4	868:13	12	return ( 0 ) ;
KEYWORD	868:4	868:4	13	return
LEAF_NODE	868:4	868:4	14	return
DESTINATION	868:10	868:10	13	( 0 )
EXPR	868:10	868:12	14	( 0 )
LEAF_NODE	868:10	868:10	15	(
FIELD	868:11	868:11	15	0
LEAF_NODE	868:11	868:11	16	0
LEAF_NODE	868:12	868:12	15	)
LEAF_NODE	868:13	868:13	13	;
LEAF_NODE	869:3	869:3	11	}
SELECTION	870:3	871:3	9	
KEYWORD	870:3	870:3	10	if
LEAF_NODE	870:3	870:3	11	if
LEAF_NODE	870:6	870:6	10	(
CONDITION	870:7	870:7	10	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 ) == 0
EXPR	870:7	870:132	11	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 ) == 0
FUNCTION_CALL	870:7	870:129	12	jpeg_read_raw_data_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , sp -> subsampling_convert_ycbcrimage , sp -> subsampling_ver * 8 )
CALLEE	870:7	870:7	13	jpeg_read_raw_data_encap
LEAF_NODE	870:7	870:7	14	jpeg_read_raw_data_encap
LEAF_NODE	870:31	870:31	13	(
ARGUMENT	870:32	870:32	13	sp
FIELD	870:32	870:32	14	sp
LEAF_NODE	870:32	870:32	15	sp
LEAF_NODE	870:34	870:34	13	,
ARGUMENT	870:35	870:35	13	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	870:35	870:71	14	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	870:35	870:35	15	&
LEAF_NODE	870:35	870:35	16	&
LEAF_NODE	870:36	870:36	15	(
FIELD	870:37	870:41	15	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	870:37	870:37	16	sp
LEAF_NODE	870:39	870:39	16	->
LEAF_NODE	870:41	870:41	16	libjpeg_jpeg_decompress_struct
LEAF_NODE	870:71	870:71	15	)
LEAF_NODE	870:72	870:72	13	,
ARGUMENT	870:73	870:73	13	sp -> subsampling_convert_ycbcrimage
FIELD	870:73	870:77	14	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	870:73	870:73	15	sp
LEAF_NODE	870:75	870:75	15	->
LEAF_NODE	870:77	870:77	15	subsampling_convert_ycbcrimage
LEAF_NODE	870:107	870:107	13	,
ARGUMENT	870:108	870:128	13	sp -> subsampling_ver * 8
FIELD	870:108	870:112	14	sp -> subsampling_ver
LEAF_NODE	870:108	870:108	15	sp
LEAF_NODE	870:110	870:110	15	->
LEAF_NODE	870:112	870:112	15	subsampling_ver
LEAF_NODE	870:127	870:127	14	*
FIELD	870:128	870:128	14	8
LEAF_NODE	870:128	870:128	15	8
LEAF_NODE	870:129	870:129	13	)
EQ_OPERATOR	870:130	870:130	12	==
LEAF_NODE	870:130	870:130	13	==
FIELD	870:132	870:132	12	0
LEAF_NODE	870:132	870:132	13	0
LEAF_NODE	870:133	870:133	10	)
STATEMENTS	871:3	874:3	10	
LEAF_NODE	871:3	871:3	11	{
STATEMENTS	872:4	873:4	11	
EXPR_STATEMENT	872:4	872:38	12	sp -> error_in_raw_data_decoding = 1 ;
EXPR	872:4	872:4	13	sp -> error_in_raw_data_decoding = 1
ASSIGN	872:4	872:37	14	sp -> error_in_raw_data_decoding = 1
LVAL	872:4	872:4	15	sp -> error_in_raw_data_decoding
FIELD	872:4	872:8	16	sp -> error_in_raw_data_decoding
LEAF_NODE	872:4	872:4	17	sp
LEAF_NODE	872:6	872:6	17	->
LEAF_NODE	872:8	872:8	17	error_in_raw_data_decoding
ASSIGN_OP	872:35	872:35	15	=
LEAF_NODE	872:35	872:35	16	=
RVAL	872:37	872:37	15	1
FIELD	872:37	872:37	16	1
LEAF_NODE	872:37	872:37	17	1
LEAF_NODE	872:38	872:38	13	;
JUMP_STATEMENT	873:4	873:13	12	return ( 0 ) ;
KEYWORD	873:4	873:4	13	return
LEAF_NODE	873:4	873:4	14	return
DESTINATION	873:10	873:10	13	( 0 )
EXPR	873:10	873:12	14	( 0 )
LEAF_NODE	873:10	873:10	15	(
FIELD	873:11	873:11	15	0
LEAF_NODE	873:11	873:11	16	0
LEAF_NODE	873:12	873:12	15	)
LEAF_NODE	873:13	873:13	13	;
LEAF_NODE	874:3	874:3	11	}
LEAF_NODE	875:2	875:2	8	}
LEAF_NODE	876:2	876:2	6	oy
LEAF_NODE	876:4	876:4	6	=
LEAF_NODE	876:5	876:5	6	sp
LEAF_NODE	876:7	876:7	6	->
LEAF_NODE	876:9	876:9	6	subsampling_convert_ybuf
LEAF_NODE	876:33	876:33	6	+
LEAF_NODE	876:34	876:34	6	sp
LEAF_NODE	876:36	876:36	6	->
LEAF_NODE	876:38	876:38	6	subsampling_convert_state
EXPR_STATEMENT	876:63	876:116	6	* sp -> subsampling_ver * sp -> subsampling_convert_ylinelen ;
EXPR	876:63	876:84	7	* sp -> subsampling_ver * sp -> subsampling_convert_ylinelen
UNARY_EXPR	876:63	876:64	8	* sp -> subsampling_ver
UNARY_OPERATOR	876:63	876:63	9	*
LEAF_NODE	876:63	876:63	10	*
FIELD	876:64	876:68	9	sp -> subsampling_ver
LEAF_NODE	876:64	876:64	10	sp
LEAF_NODE	876:66	876:66	10	->
LEAF_NODE	876:68	876:68	10	subsampling_ver
LEAF_NODE	876:83	876:83	8	*
FIELD	876:84	876:88	8	sp -> subsampling_convert_ylinelen
LEAF_NODE	876:84	876:84	9	sp
LEAF_NODE	876:86	876:86	9	->
LEAF_NODE	876:88	876:88	9	subsampling_convert_ylinelen
LEAF_NODE	876:116	876:116	7	;
EXPR_STATEMENT	877:2	877:98	6	ocb = sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen ;
EXPR	877:2	877:2	7	ocb = sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen
ASSIGN	877:2	877:6	8	ocb = sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen
LVAL	877:2	877:2	9	ocb
FIELD	877:2	877:2	10	ocb
LEAF_NODE	877:2	877:2	11	ocb
ASSIGN_OP	877:5	877:5	9	=
LEAF_NODE	877:5	877:5	10	=
RVAL	877:6	877:66	9	sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen
FIELD	877:6	877:10	10	sp -> subsampling_convert_cbbuf
LEAF_NODE	877:6	877:6	11	sp
LEAF_NODE	877:8	877:8	11	->
LEAF_NODE	877:10	877:10	11	subsampling_convert_cbbuf
LEAF_NODE	877:35	877:35	10	+
FIELD	877:36	877:40	10	sp -> subsampling_convert_state
LEAF_NODE	877:36	877:36	11	sp
LEAF_NODE	877:38	877:38	11	->
LEAF_NODE	877:40	877:40	11	subsampling_convert_state
LEAF_NODE	877:65	877:65	10	*
FIELD	877:66	877:70	10	sp -> subsampling_convert_clinelen
LEAF_NODE	877:66	877:66	11	sp
LEAF_NODE	877:68	877:68	11	->
LEAF_NODE	877:70	877:70	11	subsampling_convert_clinelen
LEAF_NODE	877:98	877:98	7	;
EXPR_STATEMENT	878:2	878:98	6	ocr = sp -> subsampling_convert_crbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen ;
EXPR	878:2	878:2	7	ocr = sp -> subsampling_convert_crbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen
ASSIGN	878:2	878:6	8	ocr = sp -> subsampling_convert_crbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen
LVAL	878:2	878:2	9	ocr
FIELD	878:2	878:2	10	ocr
LEAF_NODE	878:2	878:2	11	ocr
ASSIGN_OP	878:5	878:5	9	=
LEAF_NODE	878:5	878:5	10	=
RVAL	878:6	878:66	9	sp -> subsampling_convert_crbuf + sp -> subsampling_convert_state * sp -> subsampling_convert_clinelen
FIELD	878:6	878:10	10	sp -> subsampling_convert_crbuf
LEAF_NODE	878:6	878:6	11	sp
LEAF_NODE	878:8	878:8	11	->
LEAF_NODE	878:10	878:10	11	subsampling_convert_crbuf
LEAF_NODE	878:35	878:35	10	+
FIELD	878:36	878:40	10	sp -> subsampling_convert_state
LEAF_NODE	878:36	878:36	11	sp
LEAF_NODE	878:38	878:38	11	->
LEAF_NODE	878:40	878:40	11	subsampling_convert_state
LEAF_NODE	878:65	878:65	10	*
FIELD	878:66	878:70	10	sp -> subsampling_convert_clinelen
LEAF_NODE	878:66	878:66	11	sp
LEAF_NODE	878:68	878:68	11	->
LEAF_NODE	878:70	878:70	11	subsampling_convert_clinelen
LEAF_NODE	878:98	878:98	7	;
EXPR_STATEMENT	879:2	879:5	6	p = m ;
EXPR	879:2	879:2	7	p = m
ASSIGN	879:2	879:4	8	p = m
LVAL	879:2	879:2	9	p
FIELD	879:2	879:2	10	p
LEAF_NODE	879:2	879:2	11	p
ASSIGN_OP	879:3	879:3	9	=
LEAF_NODE	879:3	879:3	10	=
RVAL	879:4	879:4	9	m
FIELD	879:4	879:4	10	m
LEAF_NODE	879:4	879:4	11	m
LEAF_NODE	879:5	879:5	7	;
ITERATION	880:2	881:2	6	
KEYWORD	880:2	880:2	7	for
LEAF_NODE	880:2	880:2	8	for
LEAF_NODE	880:6	880:6	7	(
FOR_INIT	880:7	880:10	7	q = 0 ;
EXPR	880:7	880:7	8	q = 0
ASSIGN	880:7	880:9	9	q = 0
LVAL	880:7	880:7	10	q
FIELD	880:7	880:7	11	q
LEAF_NODE	880:7	880:7	12	q
ASSIGN_OP	880:8	880:8	10	=
LEAF_NODE	880:8	880:8	11	=
RVAL	880:9	880:9	10	0
FIELD	880:9	880:9	11	0
LEAF_NODE	880:9	880:9	12	0
LEAF_NODE	880:10	880:10	8	;
CONDITION	880:12	880:12	7	q < sp -> subsampling_convert_clinelenout
EXPR	880:12	880:14	8	q < sp -> subsampling_convert_clinelenout
FIELD	880:12	880:12	9	q
LEAF_NODE	880:12	880:12	10	q
REL_OPERATOR	880:13	880:13	9	<
LEAF_NODE	880:13	880:13	10	<
FIELD	880:14	880:18	9	sp -> subsampling_convert_clinelenout
LEAF_NODE	880:14	880:14	10	sp
LEAF_NODE	880:16	880:16	10	->
LEAF_NODE	880:18	880:18	10	subsampling_convert_clinelenout
LEAF_NODE	880:49	880:49	7	;
FOR_EXPR	880:51	880:51	7	q ++
EXPR	880:51	880:51	8	q ++
FIELD	880:51	880:52	9	q ++
LEAF_NODE	880:51	880:51	10	q
LEAF_NODE	880:52	880:52	10	++
LEAF_NODE	880:54	880:54	7	)
STATEMENTS	881:2	892:2	7	
LEAF_NODE	881:2	881:2	8	{
STATEMENTS	882:3	891:3	8	
EXPR_STATEMENT	882:3	882:7	9	r = oy ;
EXPR	882:3	882:3	10	r = oy
ASSIGN	882:3	882:5	11	r = oy
LVAL	882:3	882:3	12	r
FIELD	882:3	882:3	13	r
LEAF_NODE	882:3	882:3	14	r
ASSIGN_OP	882:4	882:4	12	=
LEAF_NODE	882:4	882:4	13	=
RVAL	882:5	882:5	12	oy
FIELD	882:5	882:5	13	oy
LEAF_NODE	882:5	882:5	14	oy
LEAF_NODE	882:7	882:7	10	;
ITERATION	883:3	884:3	9	
KEYWORD	883:3	883:3	10	for
LEAF_NODE	883:3	883:3	11	for
LEAF_NODE	883:7	883:7	10	(
FOR_INIT	883:8	883:12	10	sy = 0 ;
EXPR	883:8	883:8	11	sy = 0
ASSIGN	883:8	883:11	12	sy = 0
LVAL	883:8	883:8	13	sy
FIELD	883:8	883:8	14	sy
LEAF_NODE	883:8	883:8	15	sy
ASSIGN_OP	883:10	883:10	13	=
LEAF_NODE	883:10	883:10	14	=
RVAL	883:11	883:11	13	0
FIELD	883:11	883:11	14	0
LEAF_NODE	883:11	883:11	15	0
LEAF_NODE	883:12	883:12	11	;
CONDITION	883:14	883:14	10	sy < sp -> subsampling_ver
EXPR	883:14	883:17	11	sy < sp -> subsampling_ver
FIELD	883:14	883:14	12	sy
LEAF_NODE	883:14	883:14	13	sy
REL_OPERATOR	883:16	883:16	12	<
LEAF_NODE	883:16	883:16	13	<
FIELD	883:17	883:21	12	sp -> subsampling_ver
LEAF_NODE	883:17	883:17	13	sp
LEAF_NODE	883:19	883:19	13	->
LEAF_NODE	883:21	883:21	13	subsampling_ver
LEAF_NODE	883:36	883:36	10	;
FOR_EXPR	883:38	883:38	10	sy ++
EXPR	883:38	883:38	11	sy ++
FIELD	883:38	883:40	12	sy ++
LEAF_NODE	883:38	883:38	13	sy
LEAF_NODE	883:40	883:40	13	++
LEAF_NODE	883:42	883:42	10	)
STATEMENTS	884:3	888:3	10	
LEAF_NODE	884:3	884:3	11	{
STATEMENTS	885:4	887:4	11	
ITERATION	885:4	886:5	12	
KEYWORD	885:4	885:4	13	for
LEAF_NODE	885:4	885:4	14	for
LEAF_NODE	885:8	885:8	13	(
FOR_INIT	885:9	885:13	13	sx = 0 ;
EXPR	885:9	885:9	14	sx = 0
ASSIGN	885:9	885:12	15	sx = 0
LVAL	885:9	885:9	16	sx
FIELD	885:9	885:9	17	sx
LEAF_NODE	885:9	885:9	18	sx
ASSIGN_OP	885:11	885:11	16	=
LEAF_NODE	885:11	885:11	17	=
RVAL	885:12	885:12	16	0
FIELD	885:12	885:12	17	0
LEAF_NODE	885:12	885:12	18	0
LEAF_NODE	885:13	885:13	14	;
CONDITION	885:15	885:15	13	sx < sp -> subsampling_hor
EXPR	885:15	885:18	14	sx < sp -> subsampling_hor
FIELD	885:15	885:15	15	sx
LEAF_NODE	885:15	885:15	16	sx
REL_OPERATOR	885:17	885:17	15	<
LEAF_NODE	885:17	885:17	16	<
FIELD	885:18	885:22	15	sp -> subsampling_hor
LEAF_NODE	885:18	885:18	16	sp
LEAF_NODE	885:20	885:20	16	->
LEAF_NODE	885:22	885:22	16	subsampling_hor
LEAF_NODE	885:37	885:37	13	;
FOR_EXPR	885:39	885:39	13	sx ++
EXPR	885:39	885:39	14	sx ++
FIELD	885:39	885:41	15	sx ++
LEAF_NODE	885:39	885:39	16	sx
LEAF_NODE	885:41	885:41	16	++
LEAF_NODE	885:43	885:43	13	)
STATEMENTS	886:5	886:5	13	
EXPR_STATEMENT	886:5	886:14	14	* p ++ = * r ++ ;
EXPR	886:5	886:5	15	* p ++ = * r ++
ASSIGN	886:5	886:10	16	* p ++ = * r ++
LVAL	886:5	886:5	17	* p ++
UNARY_EXPR	886:5	886:6	18	* p ++
UNARY_OPERATOR	886:5	886:5	19	*
LEAF_NODE	886:5	886:5	20	*
FIELD	886:6	886:7	19	p ++
LEAF_NODE	886:6	886:6	20	p
LEAF_NODE	886:7	886:7	20	++
ASSIGN_OP	886:9	886:9	17	=
LEAF_NODE	886:9	886:9	18	=
RVAL	886:10	886:10	17	* r ++
UNARY_EXPR	886:10	886:11	18	* r ++
UNARY_OPERATOR	886:10	886:10	19	*
LEAF_NODE	886:10	886:10	20	*
FIELD	886:11	886:12	19	r ++
LEAF_NODE	886:11	886:11	20	r
LEAF_NODE	886:12	886:12	20	++
LEAF_NODE	886:14	886:14	15	;
EXPR_STATEMENT	887:4	887:59	12	r += sp -> subsampling_convert_ylinelen - sp -> subsampling_hor ;
EXPR	887:4	887:4	13	r += sp -> subsampling_convert_ylinelen - sp -> subsampling_hor
ASSIGN	887:4	887:7	14	r += sp -> subsampling_convert_ylinelen - sp -> subsampling_hor
LVAL	887:4	887:4	15	r
FIELD	887:4	887:4	16	r
LEAF_NODE	887:4	887:4	17	r
ASSIGN_OP	887:5	887:5	15	+=
LEAF_NODE	887:5	887:5	16	+=
RVAL	887:7	887:40	15	sp -> subsampling_convert_ylinelen - sp -> subsampling_hor
FIELD	887:7	887:11	16	sp -> subsampling_convert_ylinelen
LEAF_NODE	887:7	887:7	17	sp
LEAF_NODE	887:9	887:9	17	->
LEAF_NODE	887:11	887:11	17	subsampling_convert_ylinelen
LEAF_NODE	887:39	887:39	16	-
FIELD	887:40	887:44	16	sp -> subsampling_hor
LEAF_NODE	887:40	887:40	17	sp
LEAF_NODE	887:42	887:42	17	->
LEAF_NODE	887:44	887:44	17	subsampling_hor
LEAF_NODE	887:59	887:59	13	;
LEAF_NODE	888:3	888:3	11	}
EXPR_STATEMENT	889:3	889:26	9	oy += sp -> subsampling_hor ;
EXPR	889:3	889:3	10	oy += sp -> subsampling_hor
ASSIGN	889:3	889:7	11	oy += sp -> subsampling_hor
LVAL	889:3	889:3	12	oy
FIELD	889:3	889:3	13	oy
LEAF_NODE	889:3	889:3	14	oy
ASSIGN_OP	889:5	889:5	12	+=
LEAF_NODE	889:5	889:5	13	+=
RVAL	889:7	889:7	12	sp -> subsampling_hor
FIELD	889:7	889:11	13	sp -> subsampling_hor
LEAF_NODE	889:7	889:7	14	sp
LEAF_NODE	889:9	889:9	14	->
LEAF_NODE	889:11	889:11	14	subsampling_hor
LEAF_NODE	889:26	889:26	10	;
EXPR_STATEMENT	890:3	890:14	9	* p ++ = * ocb ++ ;
EXPR	890:3	890:3	10	* p ++ = * ocb ++
ASSIGN	890:3	890:8	11	* p ++ = * ocb ++
LVAL	890:3	890:3	12	* p ++
UNARY_EXPR	890:3	890:4	13	* p ++
UNARY_OPERATOR	890:3	890:3	14	*
LEAF_NODE	890:3	890:3	15	*
FIELD	890:4	890:5	14	p ++
LEAF_NODE	890:4	890:4	15	p
LEAF_NODE	890:5	890:5	15	++
ASSIGN_OP	890:7	890:7	12	=
LEAF_NODE	890:7	890:7	13	=
RVAL	890:8	890:8	12	* ocb ++
UNARY_EXPR	890:8	890:9	13	* ocb ++
UNARY_OPERATOR	890:8	890:8	14	*
LEAF_NODE	890:8	890:8	15	*
FIELD	890:9	890:12	14	ocb ++
LEAF_NODE	890:9	890:9	15	ocb
LEAF_NODE	890:12	890:12	15	++
LEAF_NODE	890:14	890:14	10	;
EXPR_STATEMENT	891:3	891:14	9	* p ++ = * ocr ++ ;
EXPR	891:3	891:3	10	* p ++ = * ocr ++
ASSIGN	891:3	891:8	11	* p ++ = * ocr ++
LVAL	891:3	891:3	12	* p ++
UNARY_EXPR	891:3	891:4	13	* p ++
UNARY_OPERATOR	891:3	891:3	14	*
LEAF_NODE	891:3	891:3	15	*
FIELD	891:4	891:5	14	p ++
LEAF_NODE	891:4	891:4	15	p
LEAF_NODE	891:5	891:5	15	++
ASSIGN_OP	891:7	891:7	12	=
LEAF_NODE	891:7	891:7	13	=
RVAL	891:8	891:8	12	* ocr ++
UNARY_EXPR	891:8	891:9	13	* ocr ++
UNARY_OPERATOR	891:8	891:8	14	*
LEAF_NODE	891:8	891:8	15	*
FIELD	891:9	891:12	14	ocr ++
LEAF_NODE	891:9	891:9	15	ocr
LEAF_NODE	891:12	891:12	15	++
LEAF_NODE	891:14	891:14	10	;
LEAF_NODE	892:2	892:2	8	}
EXPR_STATEMENT	893:2	893:33	6	sp -> subsampling_convert_state ++ ;
EXPR	893:2	893:2	7	sp -> subsampling_convert_state ++
FIELD	893:2	893:31	8	sp -> subsampling_convert_state ++
LEAF_NODE	893:2	893:2	9	sp
LEAF_NODE	893:4	893:4	9	->
LEAF_NODE	893:6	893:6	9	subsampling_convert_state
LEAF_NODE	893:31	893:31	9	++
LEAF_NODE	893:33	893:33	7	;
SELECTION	894:2	895:3	6	
KEYWORD	894:2	894:2	7	if
LEAF_NODE	894:2	894:2	8	if
LEAF_NODE	894:5	894:5	7	(
CONDITION	894:6	894:6	7	sp -> subsampling_convert_state == sp -> subsampling_convert_clines
EXPR	894:6	894:37	8	sp -> subsampling_convert_state == sp -> subsampling_convert_clines
FIELD	894:6	894:10	9	sp -> subsampling_convert_state
LEAF_NODE	894:6	894:6	10	sp
LEAF_NODE	894:8	894:8	10	->
LEAF_NODE	894:10	894:10	10	subsampling_convert_state
EQ_OPERATOR	894:35	894:35	9	==
LEAF_NODE	894:35	894:35	10	==
FIELD	894:37	894:41	9	sp -> subsampling_convert_clines
LEAF_NODE	894:37	894:37	10	sp
LEAF_NODE	894:39	894:39	10	->
LEAF_NODE	894:41	894:41	10	subsampling_convert_clines
LEAF_NODE	894:67	894:67	7	)
STATEMENTS	895:3	895:3	7	
EXPR_STATEMENT	895:3	895:34	8	sp -> subsampling_convert_state = 0 ;
EXPR	895:3	895:3	9	sp -> subsampling_convert_state = 0
ASSIGN	895:3	895:33	10	sp -> subsampling_convert_state = 0
LVAL	895:3	895:3	11	sp -> subsampling_convert_state
FIELD	895:3	895:7	12	sp -> subsampling_convert_state
LEAF_NODE	895:3	895:3	13	sp
LEAF_NODE	895:5	895:5	13	->
LEAF_NODE	895:7	895:7	13	subsampling_convert_state
ASSIGN_OP	895:32	895:32	11	=
LEAF_NODE	895:32	895:32	12	=
RVAL	895:33	895:33	11	0
FIELD	895:33	895:33	12	0
LEAF_NODE	895:33	895:33	13	0
LEAF_NODE	895:34	895:34	9	;
EXPR_STATEMENT	896:2	896:23	6	m += sp -> bytes_per_line ;
EXPR	896:2	896:2	7	m += sp -> bytes_per_line
ASSIGN	896:2	896:5	8	m += sp -> bytes_per_line
LVAL	896:2	896:2	9	m
FIELD	896:2	896:2	10	m
LEAF_NODE	896:2	896:2	11	m
ASSIGN_OP	896:3	896:3	9	+=
LEAF_NODE	896:3	896:3	10	+=
RVAL	896:5	896:5	9	sp -> bytes_per_line
FIELD	896:5	896:9	10	sp -> bytes_per_line
LEAF_NODE	896:5	896:5	11	sp
LEAF_NODE	896:7	896:7	11	->
LEAF_NODE	896:9	896:9	11	bytes_per_line
LEAF_NODE	896:23	896:23	7	;
EXPR_STATEMENT	897:2	897:23	6	n -= sp -> bytes_per_line ;
EXPR	897:2	897:2	7	n -= sp -> bytes_per_line
ASSIGN	897:2	897:5	8	n -= sp -> bytes_per_line
LVAL	897:2	897:2	9	n
FIELD	897:2	897:2	10	n
LEAF_NODE	897:2	897:2	11	n
ASSIGN_OP	897:3	897:3	9	-=
LEAF_NODE	897:3	897:3	10	-=
RVAL	897:5	897:5	9	sp -> bytes_per_line
FIELD	897:5	897:9	10	sp -> bytes_per_line
LEAF_NODE	897:5	897:5	11	sp
LEAF_NODE	897:7	897:7	11	->
LEAF_NODE	897:9	897:9	11	bytes_per_line
LEAF_NODE	897:23	897:23	7	;
LEAF_NODE	898:1	898:1	5	}
LEAF_NODE	898:13	898:13	3	;
JUMP_STATEMENT	899:1	899:10	3	return ( 1 ) ;
KEYWORD	899:1	899:1	4	return
LEAF_NODE	899:1	899:1	5	return
DESTINATION	899:7	899:7	4	( 1 )
EXPR	899:7	899:9	5	( 1 )
LEAF_NODE	899:7	899:7	6	(
FIELD	899:8	899:8	6	1
LEAF_NODE	899:8	899:8	7	1
LEAF_NODE	899:9	899:9	6	)
LEAF_NODE	899:10	899:10	4	;
LEAF_NODE	900:0	900:0	2	}
FUNCTION_DEF	902:0	925:0	1	
RETURN_TYPE	902:0	902:7	2	static int
LEAF_NODE	902:0	902:0	3	static
TYPE_NAME	902:7	902:7	3	int
LEAF_NODE	902:7	902:7	4	int
FUNCTION_NAME	903:0	903:0	2	OJPEGDecodeScanlines
LEAF_NODE	903:0	903:0	3	OJPEGDecodeScanlines
PARAMETER_LIST	903:20	903:55	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	903:20	903:20	3	(
PARAMETER_DECL	903:21	903:27	3	TIFF * tif
TYPE	903:21	903:25	4	TIFF *
TYPE_NAME	903:21	903:21	5	TIFF
LEAF_NODE	903:21	903:21	6	TIFF
POINTER	903:25	903:25	5	*
LEAF_NODE	903:25	903:25	6	*
NAME	903:27	903:27	4	tif
LEAF_NODE	903:27	903:27	5	tif
LEAF_NODE	903:30	903:30	3	,
PARAMETER_DECL	903:32	903:39	3	uint8 * buf
TYPE	903:32	903:37	4	uint8 *
TYPE_NAME	903:32	903:32	5	uint8
LEAF_NODE	903:32	903:32	6	uint8
POINTER	903:37	903:37	5	*
LEAF_NODE	903:37	903:37	6	*
NAME	903:39	903:39	4	buf
LEAF_NODE	903:39	903:39	5	buf
LEAF_NODE	903:42	903:42	3	,
PARAMETER_DECL	903:44	903:53	3	tmsize_t cc
TYPE	903:44	903:44	4	tmsize_t
TYPE_NAME	903:44	903:44	5	tmsize_t
LEAF_NODE	903:44	903:44	6	tmsize_t
NAME	903:53	903:53	4	cc
LEAF_NODE	903:53	903:53	5	cc
LEAF_NODE	903:55	903:55	3	)
LEAF_NODE	904:0	904:0	2	{
STATEMENTS	905:1	924:1	2	
LEAF_NODE	905:1	905:1	3	static
SIMPLE_DECL	905:8	905:50	3	const char [ ] module ; module = "OJPEGDecodeScanlines" ;
VAR_DECL	905:8	905:19	4	const char [ ] module ; module = "OJPEGDecodeScanlines"
TYPE	905:8	905:25	5	const char [ ]
TYPE_NAME	905:8	905:14	6	const char
LEAF_NODE	905:8	905:8	7	const
LEAF_NODE	905:14	905:14	7	char
TYPE_SUFFIX	905:25	905:26	6	[ ]
LEAF_NODE	905:25	905:25	7	[
LEAF_NODE	905:26	905:26	7	]
NAME	905:19	905:19	5	module
LEAF_NODE	905:19	905:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	905:19	905:19	5	module = "OJPEGDecodeScanlines"
ASSIGN	905:19	905:28	6	module = "OJPEGDecodeScanlines"
LVAL	905:19	905:19	7	module
NAME	905:19	905:19	8	module
LEAF_NODE	905:19	905:19	9	module
ASSIGN_OP	905:27	905:27	7	=
LEAF_NODE	905:27	905:27	8	=
RVAL	905:28	905:28	7	"OJPEGDecodeScanlines"
FIELD	905:28	905:28	8	"OJPEGDecodeScanlines"
LEAF_NODE	905:28	905:28	9	"OJPEGDecodeScanlines"
LEAF_NODE	905:50	905:50	4	;
SIMPLE_DECL	906:1	906:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	906:1	906:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	906:1	906:11	5	OJPEGState *
TYPE_NAME	906:1	906:1	6	OJPEGState
LEAF_NODE	906:1	906:1	7	OJPEGState
POINTER	906:11	906:11	6	*
LEAF_NODE	906:11	906:11	7	*
NAME	906:13	906:13	5	sp
LEAF_NODE	906:13	906:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	906:13	906:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	906:13	906:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	906:13	906:13	7	sp
NAME	906:13	906:13	8	sp
LEAF_NODE	906:13	906:13	9	sp
ASSIGN_OP	906:15	906:15	7	=
LEAF_NODE	906:15	906:15	8	=
RVAL	906:16	906:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	906:16	906:16	8	(
TYPE_NAME	906:17	906:17	8	OJPEGState
LEAF_NODE	906:17	906:17	9	OJPEGState
LEAF_NODE	906:27	906:27	8	*
LEAF_NODE	906:28	906:28	8	)
FIELD	906:29	906:34	8	tif -> tif_data
LEAF_NODE	906:29	906:29	9	tif
LEAF_NODE	906:32	906:32	9	->
LEAF_NODE	906:34	906:34	9	tif_data
LEAF_NODE	906:42	906:42	4	;
SIMPLE_DECL	907:1	907:9	3	uint8 * m ;
VAR_DECL	907:1	907:8	4	uint8 * m
TYPE	907:1	907:6	5	uint8 *
TYPE_NAME	907:1	907:1	6	uint8
LEAF_NODE	907:1	907:1	7	uint8
POINTER	907:6	907:6	6	*
LEAF_NODE	907:6	907:6	7	*
NAME	907:8	907:8	5	m
LEAF_NODE	907:8	907:8	6	m
LEAF_NODE	907:9	907:9	4	;
SIMPLE_DECL	908:1	908:11	3	tmsize_t n ;
VAR_DECL	908:1	908:10	4	tmsize_t n
TYPE	908:1	908:1	5	tmsize_t
TYPE_NAME	908:1	908:1	6	tmsize_t
LEAF_NODE	908:1	908:1	7	tmsize_t
NAME	908:10	908:10	5	n
LEAF_NODE	908:10	908:10	6	n
LEAF_NODE	908:11	908:11	4	;
SELECTION	909:1	910:1	3	
KEYWORD	909:1	909:1	4	if
LEAF_NODE	909:1	909:1	5	if
LEAF_NODE	909:4	909:4	4	(
CONDITION	909:5	909:5	4	cc % sp -> bytes_per_line != 0
EXPR	909:5	909:28	5	cc % sp -> bytes_per_line != 0
FIELD	909:5	909:5	6	cc
LEAF_NODE	909:5	909:5	7	cc
LEAF_NODE	909:7	909:7	6	%
FIELD	909:8	909:12	6	sp -> bytes_per_line
LEAF_NODE	909:8	909:8	7	sp
LEAF_NODE	909:10	909:10	7	->
LEAF_NODE	909:12	909:12	7	bytes_per_line
EQ_OPERATOR	909:26	909:26	6	!=
LEAF_NODE	909:26	909:26	7	!=
FIELD	909:28	909:28	6	0
LEAF_NODE	909:28	909:28	7	0
LEAF_NODE	909:29	909:29	4	)
STATEMENTS	910:1	913:1	4	
LEAF_NODE	910:1	910:1	5	{
STATEMENTS	911:2	912:2	5	
EXPR_STATEMENT	911:2	911:73	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanline not read" ) ;
EXPR	911:2	911:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanline not read" )
FUNCTION_CALL	911:2	911:72	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Fractional scanline not read" )
CALLEE	911:2	911:2	9	TIFFErrorExt
LEAF_NODE	911:2	911:2	10	TIFFErrorExt
LEAF_NODE	911:14	911:14	9	(
ARGUMENT	911:15	911:15	9	tif -> tif_clientdata
FIELD	911:15	911:20	10	tif -> tif_clientdata
LEAF_NODE	911:15	911:15	11	tif
LEAF_NODE	911:18	911:18	11	->
LEAF_NODE	911:20	911:20	11	tif_clientdata
LEAF_NODE	911:34	911:34	9	,
ARGUMENT	911:35	911:35	9	module
FIELD	911:35	911:35	10	module
LEAF_NODE	911:35	911:35	11	module
LEAF_NODE	911:41	911:41	9	,
ARGUMENT	911:42	911:42	9	"Fractional scanline not read"
FIELD	911:42	911:42	10	"Fractional scanline not read"
LEAF_NODE	911:42	911:42	11	"Fractional scanline not read"
LEAF_NODE	911:72	911:72	9	)
LEAF_NODE	911:73	911:73	7	;
JUMP_STATEMENT	912:2	912:11	6	return ( 0 ) ;
KEYWORD	912:2	912:2	7	return
LEAF_NODE	912:2	912:2	8	return
DESTINATION	912:8	912:8	7	( 0 )
EXPR	912:8	912:10	8	( 0 )
LEAF_NODE	912:8	912:8	9	(
FIELD	912:9	912:9	9	0
LEAF_NODE	912:9	912:9	10	0
LEAF_NODE	912:10	912:10	9	)
LEAF_NODE	912:11	912:11	7	;
LEAF_NODE	913:1	913:1	5	}
EXPR_STATEMENT	914:1	914:13	3	assert ( cc > 0 ) ;
EXPR	914:1	914:1	4	assert ( cc > 0 )
FUNCTION_CALL	914:1	914:12	5	assert ( cc > 0 )
CALLEE	914:1	914:1	6	assert
LEAF_NODE	914:1	914:1	7	assert
LEAF_NODE	914:7	914:7	6	(
ARGUMENT	914:8	914:11	6	cc > 0
FIELD	914:8	914:8	7	cc
LEAF_NODE	914:8	914:8	8	cc
REL_OPERATOR	914:10	914:10	7	>
LEAF_NODE	914:10	914:10	8	>
FIELD	914:11	914:11	7	0
LEAF_NODE	914:11	914:11	8	0
LEAF_NODE	914:12	914:12	6	)
LEAF_NODE	914:13	914:13	4	;
EXPR_STATEMENT	915:1	915:6	3	m = buf ;
EXPR	915:1	915:1	4	m = buf
ASSIGN	915:1	915:3	5	m = buf
LVAL	915:1	915:1	6	m
FIELD	915:1	915:1	7	m
LEAF_NODE	915:1	915:1	8	m
ASSIGN_OP	915:2	915:2	6	=
LEAF_NODE	915:2	915:2	7	=
RVAL	915:3	915:3	6	buf
FIELD	915:3	915:3	7	buf
LEAF_NODE	915:3	915:3	8	buf
LEAF_NODE	915:6	915:6	4	;
EXPR_STATEMENT	916:1	916:5	3	n = cc ;
EXPR	916:1	916:1	4	n = cc
ASSIGN	916:1	916:3	5	n = cc
LVAL	916:1	916:1	6	n
FIELD	916:1	916:1	7	n
LEAF_NODE	916:1	916:1	8	n
ASSIGN_OP	916:2	916:2	6	=
LEAF_NODE	916:2	916:2	7	=
RVAL	916:3	916:3	6	cc
FIELD	916:3	916:3	7	cc
LEAF_NODE	916:3	916:3	8	cc
LEAF_NODE	916:5	916:5	4	;
ITERATION	917:1	918:1	3	
KEYWORD	917:1	917:1	4	do
LEAF_NODE	917:1	917:1	5	do
LEAF_NODE	923:8	923:8	4	(
CONDITION	923:9	923:9	4	n > 0
EXPR	923:9	923:11	5	n > 0
FIELD	923:9	923:9	6	n
LEAF_NODE	923:9	923:9	7	n
REL_OPERATOR	923:10	923:10	6	>
LEAF_NODE	923:10	923:10	7	>
FIELD	923:11	923:11	6	0
LEAF_NODE	923:11	923:11	7	0
LEAF_NODE	923:12	923:12	4	)
STATEMENTS	918:1	923:1	4	
LEAF_NODE	918:1	918:1	5	{
STATEMENTS	919:2	922:2	5	
SELECTION	919:2	920:3	6	
KEYWORD	919:2	919:2	7	if
LEAF_NODE	919:2	919:2	8	if
LEAF_NODE	919:5	919:5	7	(
CONDITION	919:6	919:6	7	jpeg_read_scanlines_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , & m , 1 ) == 0
EXPR	919:6	919:80	8	jpeg_read_scanlines_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , & m , 1 ) == 0
FUNCTION_CALL	919:6	919:77	9	jpeg_read_scanlines_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , & m , 1 )
CALLEE	919:6	919:6	10	jpeg_read_scanlines_encap
LEAF_NODE	919:6	919:6	11	jpeg_read_scanlines_encap
LEAF_NODE	919:31	919:31	10	(
ARGUMENT	919:32	919:32	10	sp
FIELD	919:32	919:32	11	sp
LEAF_NODE	919:32	919:32	12	sp
LEAF_NODE	919:34	919:34	10	,
ARGUMENT	919:35	919:35	10	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	919:35	919:71	11	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	919:35	919:35	12	&
LEAF_NODE	919:35	919:35	13	&
LEAF_NODE	919:36	919:36	12	(
FIELD	919:37	919:41	12	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	919:37	919:37	13	sp
LEAF_NODE	919:39	919:39	13	->
LEAF_NODE	919:41	919:41	13	libjpeg_jpeg_decompress_struct
LEAF_NODE	919:71	919:71	12	)
LEAF_NODE	919:72	919:72	10	,
ARGUMENT	919:73	919:73	10	& m
UNARY_EXPR	919:73	919:74	11	& m
UNARY_OPERATOR	919:73	919:73	12	&
LEAF_NODE	919:73	919:73	13	&
FIELD	919:74	919:74	12	m
LEAF_NODE	919:74	919:74	13	m
LEAF_NODE	919:75	919:75	10	,
ARGUMENT	919:76	919:76	10	1
FIELD	919:76	919:76	11	1
LEAF_NODE	919:76	919:76	12	1
LEAF_NODE	919:77	919:77	10	)
EQ_OPERATOR	919:78	919:78	9	==
LEAF_NODE	919:78	919:78	10	==
FIELD	919:80	919:80	9	0
LEAF_NODE	919:80	919:80	10	0
LEAF_NODE	919:81	919:81	7	)
STATEMENTS	920:3	920:3	7	
JUMP_STATEMENT	920:3	920:12	8	return ( 0 ) ;
KEYWORD	920:3	920:3	9	return
LEAF_NODE	920:3	920:3	10	return
DESTINATION	920:9	920:9	9	( 0 )
EXPR	920:9	920:11	10	( 0 )
LEAF_NODE	920:9	920:9	11	(
FIELD	920:10	920:10	11	0
LEAF_NODE	920:10	920:10	12	0
LEAF_NODE	920:11	920:11	11	)
LEAF_NODE	920:12	920:12	9	;
EXPR_STATEMENT	921:2	921:23	6	m += sp -> bytes_per_line ;
EXPR	921:2	921:2	7	m += sp -> bytes_per_line
ASSIGN	921:2	921:5	8	m += sp -> bytes_per_line
LVAL	921:2	921:2	9	m
FIELD	921:2	921:2	10	m
LEAF_NODE	921:2	921:2	11	m
ASSIGN_OP	921:3	921:3	9	+=
LEAF_NODE	921:3	921:3	10	+=
RVAL	921:5	921:5	9	sp -> bytes_per_line
FIELD	921:5	921:9	10	sp -> bytes_per_line
LEAF_NODE	921:5	921:5	11	sp
LEAF_NODE	921:7	921:7	11	->
LEAF_NODE	921:9	921:9	11	bytes_per_line
LEAF_NODE	921:23	921:23	7	;
EXPR_STATEMENT	922:2	922:23	6	n -= sp -> bytes_per_line ;
EXPR	922:2	922:2	7	n -= sp -> bytes_per_line
ASSIGN	922:2	922:5	8	n -= sp -> bytes_per_line
LVAL	922:2	922:2	9	n
FIELD	922:2	922:2	10	n
LEAF_NODE	922:2	922:2	11	n
ASSIGN_OP	922:3	922:3	9	-=
LEAF_NODE	922:3	922:3	10	-=
RVAL	922:5	922:5	9	sp -> bytes_per_line
FIELD	922:5	922:9	10	sp -> bytes_per_line
LEAF_NODE	922:5	922:5	11	sp
LEAF_NODE	922:7	922:7	11	->
LEAF_NODE	922:9	922:9	11	bytes_per_line
LEAF_NODE	922:23	922:23	7	;
LEAF_NODE	923:1	923:1	5	}
LEAF_NODE	923:13	923:13	3	;
JUMP_STATEMENT	924:1	924:10	3	return ( 1 ) ;
KEYWORD	924:1	924:1	4	return
LEAF_NODE	924:1	924:1	5	return
DESTINATION	924:7	924:7	4	( 1 )
EXPR	924:7	924:9	5	( 1 )
LEAF_NODE	924:7	924:7	6	(
FIELD	924:8	924:8	6	1
LEAF_NODE	924:8	924:8	7	1
LEAF_NODE	924:9	924:9	6	)
LEAF_NODE	924:10	924:10	4	;
LEAF_NODE	925:0	925:0	2	}
FUNCTION_DEF	927:0	940:0	1	
RETURN_TYPE	927:0	927:7	2	static void
LEAF_NODE	927:0	927:0	3	static
TYPE_NAME	927:7	927:7	3	void
LEAF_NODE	927:7	927:7	4	void
FUNCTION_NAME	928:0	928:0	2	OJPEGPostDecode
LEAF_NODE	928:0	928:0	3	OJPEGPostDecode
PARAMETER_LIST	928:15	928:50	2	( TIFF * tif , uint8 * buf , tmsize_t cc )
LEAF_NODE	928:15	928:15	3	(
PARAMETER_DECL	928:16	928:22	3	TIFF * tif
TYPE	928:16	928:20	4	TIFF *
TYPE_NAME	928:16	928:16	5	TIFF
LEAF_NODE	928:16	928:16	6	TIFF
POINTER	928:20	928:20	5	*
LEAF_NODE	928:20	928:20	6	*
NAME	928:22	928:22	4	tif
LEAF_NODE	928:22	928:22	5	tif
LEAF_NODE	928:25	928:25	3	,
PARAMETER_DECL	928:27	928:34	3	uint8 * buf
TYPE	928:27	928:32	4	uint8 *
TYPE_NAME	928:27	928:27	5	uint8
LEAF_NODE	928:27	928:27	6	uint8
POINTER	928:32	928:32	5	*
LEAF_NODE	928:32	928:32	6	*
NAME	928:34	928:34	4	buf
LEAF_NODE	928:34	928:34	5	buf
LEAF_NODE	928:37	928:37	3	,
PARAMETER_DECL	928:39	928:48	3	tmsize_t cc
TYPE	928:39	928:39	4	tmsize_t
TYPE_NAME	928:39	928:39	5	tmsize_t
LEAF_NODE	928:39	928:39	6	tmsize_t
NAME	928:48	928:48	4	cc
LEAF_NODE	928:48	928:48	5	cc
LEAF_NODE	928:50	928:50	3	)
LEAF_NODE	929:0	929:0	2	{
STATEMENTS	930:1	934:1	2	
SIMPLE_DECL	930:1	930:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	930:1	930:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	930:1	930:11	5	OJPEGState *
TYPE_NAME	930:1	930:1	6	OJPEGState
LEAF_NODE	930:1	930:1	7	OJPEGState
POINTER	930:11	930:11	6	*
LEAF_NODE	930:11	930:11	7	*
NAME	930:13	930:13	5	sp
LEAF_NODE	930:13	930:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	930:13	930:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	930:13	930:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	930:13	930:13	7	sp
NAME	930:13	930:13	8	sp
LEAF_NODE	930:13	930:13	9	sp
ASSIGN_OP	930:15	930:15	7	=
LEAF_NODE	930:15	930:15	8	=
RVAL	930:16	930:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	930:16	930:16	8	(
TYPE_NAME	930:17	930:17	8	OJPEGState
LEAF_NODE	930:17	930:17	9	OJPEGState
LEAF_NODE	930:27	930:27	8	*
LEAF_NODE	930:28	930:28	8	)
FIELD	930:29	930:34	8	tif -> tif_data
LEAF_NODE	930:29	930:29	9	tif
LEAF_NODE	930:32	930:32	9	->
LEAF_NODE	930:34	930:34	9	tif_data
LEAF_NODE	930:42	930:42	4	;
EXPR_STATEMENT	931:1	931:10	3	( void ) buf ;
EXPR	931:1	931:7	4	( void ) buf
LEAF_NODE	931:1	931:1	5	(
TYPE_NAME	931:2	931:2	5	void
LEAF_NODE	931:2	931:2	6	void
LEAF_NODE	931:6	931:6	5	)
FIELD	931:7	931:7	5	buf
LEAF_NODE	931:7	931:7	6	buf
LEAF_NODE	931:10	931:10	4	;
EXPR_STATEMENT	932:1	932:9	3	( void ) cc ;
EXPR	932:1	932:7	4	( void ) cc
LEAF_NODE	932:1	932:1	5	(
TYPE_NAME	932:2	932:2	5	void
LEAF_NODE	932:2	932:2	6	void
LEAF_NODE	932:6	932:6	5	)
FIELD	932:7	932:7	5	cc
LEAF_NODE	932:7	932:7	6	cc
LEAF_NODE	932:9	932:9	4	;
EXPR_STATEMENT	933:1	933:22	3	sp -> write_curstrile ++ ;
EXPR	933:1	933:1	4	sp -> write_curstrile ++
FIELD	933:1	933:20	5	sp -> write_curstrile ++
LEAF_NODE	933:1	933:1	6	sp
LEAF_NODE	933:3	933:3	6	->
LEAF_NODE	933:5	933:5	6	write_curstrile
LEAF_NODE	933:20	933:20	6	++
LEAF_NODE	933:22	933:22	4	;
SELECTION	934:1	935:1	3	
KEYWORD	934:1	934:1	4	if
LEAF_NODE	934:1	934:1	5	if
LEAF_NODE	934:4	934:4	4	(
CONDITION	934:5	934:5	4	sp -> write_curstrile % tif -> tif_dir . td_stripsperimage == 0
EXPR	934:5	934:57	5	sp -> write_curstrile % tif -> tif_dir . td_stripsperimage == 0
FIELD	934:5	934:9	6	sp -> write_curstrile
LEAF_NODE	934:5	934:5	7	sp
LEAF_NODE	934:7	934:7	7	->
LEAF_NODE	934:9	934:9	7	write_curstrile
LEAF_NODE	934:24	934:24	6	%
FIELD	934:25	934:38	6	tif -> tif_dir . td_stripsperimage
LEAF_NODE	934:25	934:25	7	tif
LEAF_NODE	934:28	934:28	7	->
LEAF_NODE	934:30	934:30	7	tif_dir
LEAF_NODE	934:37	934:37	7	.
LEAF_NODE	934:38	934:38	7	td_stripsperimage
EQ_OPERATOR	934:55	934:55	6	==
LEAF_NODE	934:55	934:55	7	==
FIELD	934:57	934:57	6	0
LEAF_NODE	934:57	934:57	7	0
LEAF_NODE	934:58	934:58	4	)
STATEMENTS	935:1	939:1	4	
LEAF_NODE	935:1	935:1	5	{
STATEMENTS	936:2	938:2	5	
EXPR_STATEMENT	936:2	936:39	6	assert ( sp -> libjpeg_session_active != 0 ) ;
EXPR	936:2	936:2	7	assert ( sp -> libjpeg_session_active != 0 )
FUNCTION_CALL	936:2	936:38	8	assert ( sp -> libjpeg_session_active != 0 )
CALLEE	936:2	936:2	9	assert
LEAF_NODE	936:2	936:2	10	assert
LEAF_NODE	936:8	936:8	9	(
ARGUMENT	936:9	936:37	9	sp -> libjpeg_session_active != 0
FIELD	936:9	936:13	10	sp -> libjpeg_session_active
LEAF_NODE	936:9	936:9	11	sp
LEAF_NODE	936:11	936:11	11	->
LEAF_NODE	936:13	936:13	11	libjpeg_session_active
EQ_OPERATOR	936:35	936:35	10	!=
LEAF_NODE	936:35	936:35	11	!=
FIELD	936:37	936:37	10	0
LEAF_NODE	936:37	936:37	11	0
LEAF_NODE	936:38	936:38	9	)
LEAF_NODE	936:39	936:39	7	;
EXPR_STATEMENT	937:2	937:31	6	OJPEGLibjpegSessionAbort ( tif ) ;
EXPR	937:2	937:2	7	OJPEGLibjpegSessionAbort ( tif )
FUNCTION_CALL	937:2	937:30	8	OJPEGLibjpegSessionAbort ( tif )
CALLEE	937:2	937:2	9	OJPEGLibjpegSessionAbort
LEAF_NODE	937:2	937:2	10	OJPEGLibjpegSessionAbort
LEAF_NODE	937:26	937:26	9	(
ARGUMENT	937:27	937:27	9	tif
FIELD	937:27	937:27	10	tif
LEAF_NODE	937:27	937:27	11	tif
LEAF_NODE	937:30	937:30	9	)
LEAF_NODE	937:31	937:31	7	;
EXPR_STATEMENT	938:2	938:24	6	sp -> writeheader_done = 0 ;
EXPR	938:2	938:2	7	sp -> writeheader_done = 0
ASSIGN	938:2	938:23	8	sp -> writeheader_done = 0
LVAL	938:2	938:2	9	sp -> writeheader_done
FIELD	938:2	938:6	10	sp -> writeheader_done
LEAF_NODE	938:2	938:2	11	sp
LEAF_NODE	938:4	938:4	11	->
LEAF_NODE	938:6	938:6	11	writeheader_done
ASSIGN_OP	938:22	938:22	9	=
LEAF_NODE	938:22	938:22	10	=
RVAL	938:23	938:23	9	0
FIELD	938:23	938:23	10	0
LEAF_NODE	938:23	938:23	11	0
LEAF_NODE	938:24	938:24	7	;
LEAF_NODE	939:1	939:1	5	}
LEAF_NODE	940:0	940:0	2	}
FUNCTION_DEF	942:0	948:0	1	
RETURN_TYPE	942:0	942:7	2	static int
LEAF_NODE	942:0	942:0	3	static
TYPE_NAME	942:7	942:7	3	int
LEAF_NODE	942:7	942:7	4	int
FUNCTION_NAME	943:0	943:0	2	OJPEGSetupEncode
LEAF_NODE	943:0	943:0	3	OJPEGSetupEncode
PARAMETER_LIST	943:16	943:26	2	( TIFF * tif )
LEAF_NODE	943:16	943:16	3	(
PARAMETER_DECL	943:17	943:23	3	TIFF * tif
TYPE	943:17	943:21	4	TIFF *
TYPE_NAME	943:17	943:17	5	TIFF
LEAF_NODE	943:17	943:17	6	TIFF
POINTER	943:21	943:21	5	*
LEAF_NODE	943:21	943:21	6	*
NAME	943:23	943:23	4	tif
LEAF_NODE	943:23	943:23	5	tif
LEAF_NODE	943:26	943:26	3	)
LEAF_NODE	944:0	944:0	2	{
STATEMENTS	945:1	947:1	2	
LEAF_NODE	945:1	945:1	3	static
SIMPLE_DECL	945:8	945:46	3	const char [ ] module ; module = "OJPEGSetupEncode" ;
VAR_DECL	945:8	945:19	4	const char [ ] module ; module = "OJPEGSetupEncode"
TYPE	945:8	945:25	5	const char [ ]
TYPE_NAME	945:8	945:14	6	const char
LEAF_NODE	945:8	945:8	7	const
LEAF_NODE	945:14	945:14	7	char
TYPE_SUFFIX	945:25	945:26	6	[ ]
LEAF_NODE	945:25	945:25	7	[
LEAF_NODE	945:26	945:26	7	]
NAME	945:19	945:19	5	module
LEAF_NODE	945:19	945:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	945:19	945:19	5	module = "OJPEGSetupEncode"
ASSIGN	945:19	945:28	6	module = "OJPEGSetupEncode"
LVAL	945:19	945:19	7	module
NAME	945:19	945:19	8	module
LEAF_NODE	945:19	945:19	9	module
ASSIGN_OP	945:27	945:27	7	=
LEAF_NODE	945:27	945:27	8	=
RVAL	945:28	945:28	7	"OJPEGSetupEncode"
FIELD	945:28	945:28	8	"OJPEGSetupEncode"
LEAF_NODE	945:28	945:28	9	"OJPEGSetupEncode"
LEAF_NODE	945:46	945:46	4	;
EXPR_STATEMENT	946:1	946:112	3	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" ) ;
EXPR	946:1	946:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
FUNCTION_CALL	946:1	946:111	5	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
CALLEE	946:1	946:1	6	TIFFErrorExt
LEAF_NODE	946:1	946:1	7	TIFFErrorExt
LEAF_NODE	946:13	946:13	6	(
ARGUMENT	946:14	946:14	6	tif -> tif_clientdata
FIELD	946:14	946:19	7	tif -> tif_clientdata
LEAF_NODE	946:14	946:14	8	tif
LEAF_NODE	946:17	946:17	8	->
LEAF_NODE	946:19	946:19	8	tif_clientdata
LEAF_NODE	946:33	946:33	6	,
ARGUMENT	946:34	946:34	6	module
FIELD	946:34	946:34	7	module
LEAF_NODE	946:34	946:34	8	module
LEAF_NODE	946:40	946:40	6	,
ARGUMENT	946:41	946:41	6	"OJPEG encoding not supported; use new-style JPEG compression instead"
FIELD	946:41	946:41	7	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	946:41	946:41	8	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	946:111	946:111	6	)
LEAF_NODE	946:112	946:112	4	;
JUMP_STATEMENT	947:1	947:10	3	return ( 0 ) ;
KEYWORD	947:1	947:1	4	return
LEAF_NODE	947:1	947:1	5	return
DESTINATION	947:7	947:7	4	( 0 )
EXPR	947:7	947:9	5	( 0 )
LEAF_NODE	947:7	947:7	6	(
FIELD	947:8	947:8	6	0
LEAF_NODE	947:8	947:8	7	0
LEAF_NODE	947:9	947:9	6	)
LEAF_NODE	947:10	947:10	4	;
LEAF_NODE	948:0	948:0	2	}
FUNCTION_DEF	950:0	957:0	1	
RETURN_TYPE	950:0	950:7	2	static int
LEAF_NODE	950:0	950:0	3	static
TYPE_NAME	950:7	950:7	3	int
LEAF_NODE	950:7	950:7	4	int
FUNCTION_NAME	951:0	951:0	2	OJPEGPreEncode
LEAF_NODE	951:0	951:0	3	OJPEGPreEncode
PARAMETER_LIST	951:14	951:34	2	( TIFF * tif , uint16 s )
LEAF_NODE	951:14	951:14	3	(
PARAMETER_DECL	951:15	951:21	3	TIFF * tif
TYPE	951:15	951:19	4	TIFF *
TYPE_NAME	951:15	951:15	5	TIFF
LEAF_NODE	951:15	951:15	6	TIFF
POINTER	951:19	951:19	5	*
LEAF_NODE	951:19	951:19	6	*
NAME	951:21	951:21	4	tif
LEAF_NODE	951:21	951:21	5	tif
LEAF_NODE	951:24	951:24	3	,
PARAMETER_DECL	951:26	951:33	3	uint16 s
TYPE	951:26	951:26	4	uint16
TYPE_NAME	951:26	951:26	5	uint16
LEAF_NODE	951:26	951:26	6	uint16
NAME	951:33	951:33	4	s
LEAF_NODE	951:33	951:33	5	s
LEAF_NODE	951:34	951:34	3	)
LEAF_NODE	952:0	952:0	2	{
STATEMENTS	953:1	956:1	2	
LEAF_NODE	953:1	953:1	3	static
SIMPLE_DECL	953:8	953:44	3	const char [ ] module ; module = "OJPEGPreEncode" ;
VAR_DECL	953:8	953:19	4	const char [ ] module ; module = "OJPEGPreEncode"
TYPE	953:8	953:25	5	const char [ ]
TYPE_NAME	953:8	953:14	6	const char
LEAF_NODE	953:8	953:8	7	const
LEAF_NODE	953:14	953:14	7	char
TYPE_SUFFIX	953:25	953:26	6	[ ]
LEAF_NODE	953:25	953:25	7	[
LEAF_NODE	953:26	953:26	7	]
NAME	953:19	953:19	5	module
LEAF_NODE	953:19	953:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	953:19	953:19	5	module = "OJPEGPreEncode"
ASSIGN	953:19	953:28	6	module = "OJPEGPreEncode"
LVAL	953:19	953:19	7	module
NAME	953:19	953:19	8	module
LEAF_NODE	953:19	953:19	9	module
ASSIGN_OP	953:27	953:27	7	=
LEAF_NODE	953:27	953:27	8	=
RVAL	953:28	953:28	7	"OJPEGPreEncode"
FIELD	953:28	953:28	8	"OJPEGPreEncode"
LEAF_NODE	953:28	953:28	9	"OJPEGPreEncode"
LEAF_NODE	953:44	953:44	4	;
EXPR_STATEMENT	954:1	954:8	3	( void ) s ;
EXPR	954:1	954:7	4	( void ) s
LEAF_NODE	954:1	954:1	5	(
TYPE_NAME	954:2	954:2	5	void
LEAF_NODE	954:2	954:2	6	void
LEAF_NODE	954:6	954:6	5	)
FIELD	954:7	954:7	5	s
LEAF_NODE	954:7	954:7	6	s
LEAF_NODE	954:8	954:8	4	;
EXPR_STATEMENT	955:1	955:112	3	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" ) ;
EXPR	955:1	955:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
FUNCTION_CALL	955:1	955:111	5	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
CALLEE	955:1	955:1	6	TIFFErrorExt
LEAF_NODE	955:1	955:1	7	TIFFErrorExt
LEAF_NODE	955:13	955:13	6	(
ARGUMENT	955:14	955:14	6	tif -> tif_clientdata
FIELD	955:14	955:19	7	tif -> tif_clientdata
LEAF_NODE	955:14	955:14	8	tif
LEAF_NODE	955:17	955:17	8	->
LEAF_NODE	955:19	955:19	8	tif_clientdata
LEAF_NODE	955:33	955:33	6	,
ARGUMENT	955:34	955:34	6	module
FIELD	955:34	955:34	7	module
LEAF_NODE	955:34	955:34	8	module
LEAF_NODE	955:40	955:40	6	,
ARGUMENT	955:41	955:41	6	"OJPEG encoding not supported; use new-style JPEG compression instead"
FIELD	955:41	955:41	7	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	955:41	955:41	8	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	955:111	955:111	6	)
LEAF_NODE	955:112	955:112	4	;
JUMP_STATEMENT	956:1	956:10	3	return ( 0 ) ;
KEYWORD	956:1	956:1	4	return
LEAF_NODE	956:1	956:1	5	return
DESTINATION	956:7	956:7	4	( 0 )
EXPR	956:7	956:9	5	( 0 )
LEAF_NODE	956:7	956:7	6	(
FIELD	956:8	956:8	6	0
LEAF_NODE	956:8	956:8	7	0
LEAF_NODE	956:9	956:9	6	)
LEAF_NODE	956:10	956:10	4	;
LEAF_NODE	957:0	957:0	2	}
FUNCTION_DEF	959:0	968:0	1	
RETURN_TYPE	959:0	959:7	2	static int
LEAF_NODE	959:0	959:0	3	static
TYPE_NAME	959:7	959:7	3	int
LEAF_NODE	959:7	959:7	4	int
FUNCTION_NAME	960:0	960:0	2	OJPEGEncode
LEAF_NODE	960:0	960:0	3	OJPEGEncode
PARAMETER_LIST	960:11	960:56	2	( TIFF * tif , uint8 * buf , tmsize_t cc , uint16 s )
LEAF_NODE	960:11	960:11	3	(
PARAMETER_DECL	960:12	960:18	3	TIFF * tif
TYPE	960:12	960:16	4	TIFF *
TYPE_NAME	960:12	960:12	5	TIFF
LEAF_NODE	960:12	960:12	6	TIFF
POINTER	960:16	960:16	5	*
LEAF_NODE	960:16	960:16	6	*
NAME	960:18	960:18	4	tif
LEAF_NODE	960:18	960:18	5	tif
LEAF_NODE	960:21	960:21	3	,
PARAMETER_DECL	960:23	960:30	3	uint8 * buf
TYPE	960:23	960:28	4	uint8 *
TYPE_NAME	960:23	960:23	5	uint8
LEAF_NODE	960:23	960:23	6	uint8
POINTER	960:28	960:28	5	*
LEAF_NODE	960:28	960:28	6	*
NAME	960:30	960:30	4	buf
LEAF_NODE	960:30	960:30	5	buf
LEAF_NODE	960:33	960:33	3	,
PARAMETER_DECL	960:35	960:44	3	tmsize_t cc
TYPE	960:35	960:35	4	tmsize_t
TYPE_NAME	960:35	960:35	5	tmsize_t
LEAF_NODE	960:35	960:35	6	tmsize_t
NAME	960:44	960:44	4	cc
LEAF_NODE	960:44	960:44	5	cc
LEAF_NODE	960:46	960:46	3	,
PARAMETER_DECL	960:48	960:55	3	uint16 s
TYPE	960:48	960:48	4	uint16
TYPE_NAME	960:48	960:48	5	uint16
LEAF_NODE	960:48	960:48	6	uint16
NAME	960:55	960:55	4	s
LEAF_NODE	960:55	960:55	5	s
LEAF_NODE	960:56	960:56	3	)
LEAF_NODE	961:0	961:0	2	{
STATEMENTS	962:1	967:1	2	
LEAF_NODE	962:1	962:1	3	static
SIMPLE_DECL	962:8	962:41	3	const char [ ] module ; module = "OJPEGEncode" ;
VAR_DECL	962:8	962:19	4	const char [ ] module ; module = "OJPEGEncode"
TYPE	962:8	962:25	5	const char [ ]
TYPE_NAME	962:8	962:14	6	const char
LEAF_NODE	962:8	962:8	7	const
LEAF_NODE	962:14	962:14	7	char
TYPE_SUFFIX	962:25	962:26	6	[ ]
LEAF_NODE	962:25	962:25	7	[
LEAF_NODE	962:26	962:26	7	]
NAME	962:19	962:19	5	module
LEAF_NODE	962:19	962:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	962:19	962:19	5	module = "OJPEGEncode"
ASSIGN	962:19	962:28	6	module = "OJPEGEncode"
LVAL	962:19	962:19	7	module
NAME	962:19	962:19	8	module
LEAF_NODE	962:19	962:19	9	module
ASSIGN_OP	962:27	962:27	7	=
LEAF_NODE	962:27	962:27	8	=
RVAL	962:28	962:28	7	"OJPEGEncode"
FIELD	962:28	962:28	8	"OJPEGEncode"
LEAF_NODE	962:28	962:28	9	"OJPEGEncode"
LEAF_NODE	962:41	962:41	4	;
EXPR_STATEMENT	963:1	963:10	3	( void ) buf ;
EXPR	963:1	963:7	4	( void ) buf
LEAF_NODE	963:1	963:1	5	(
TYPE_NAME	963:2	963:2	5	void
LEAF_NODE	963:2	963:2	6	void
LEAF_NODE	963:6	963:6	5	)
FIELD	963:7	963:7	5	buf
LEAF_NODE	963:7	963:7	6	buf
LEAF_NODE	963:10	963:10	4	;
EXPR_STATEMENT	964:1	964:9	3	( void ) cc ;
EXPR	964:1	964:7	4	( void ) cc
LEAF_NODE	964:1	964:1	5	(
TYPE_NAME	964:2	964:2	5	void
LEAF_NODE	964:2	964:2	6	void
LEAF_NODE	964:6	964:6	5	)
FIELD	964:7	964:7	5	cc
LEAF_NODE	964:7	964:7	6	cc
LEAF_NODE	964:9	964:9	4	;
EXPR_STATEMENT	965:1	965:8	3	( void ) s ;
EXPR	965:1	965:7	4	( void ) s
LEAF_NODE	965:1	965:1	5	(
TYPE_NAME	965:2	965:2	5	void
LEAF_NODE	965:2	965:2	6	void
LEAF_NODE	965:6	965:6	5	)
FIELD	965:7	965:7	5	s
LEAF_NODE	965:7	965:7	6	s
LEAF_NODE	965:8	965:8	4	;
EXPR_STATEMENT	966:1	966:112	3	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" ) ;
EXPR	966:1	966:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
FUNCTION_CALL	966:1	966:111	5	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
CALLEE	966:1	966:1	6	TIFFErrorExt
LEAF_NODE	966:1	966:1	7	TIFFErrorExt
LEAF_NODE	966:13	966:13	6	(
ARGUMENT	966:14	966:14	6	tif -> tif_clientdata
FIELD	966:14	966:19	7	tif -> tif_clientdata
LEAF_NODE	966:14	966:14	8	tif
LEAF_NODE	966:17	966:17	8	->
LEAF_NODE	966:19	966:19	8	tif_clientdata
LEAF_NODE	966:33	966:33	6	,
ARGUMENT	966:34	966:34	6	module
FIELD	966:34	966:34	7	module
LEAF_NODE	966:34	966:34	8	module
LEAF_NODE	966:40	966:40	6	,
ARGUMENT	966:41	966:41	6	"OJPEG encoding not supported; use new-style JPEG compression instead"
FIELD	966:41	966:41	7	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	966:41	966:41	8	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	966:111	966:111	6	)
LEAF_NODE	966:112	966:112	4	;
JUMP_STATEMENT	967:1	967:10	3	return ( 0 ) ;
KEYWORD	967:1	967:1	4	return
LEAF_NODE	967:1	967:1	5	return
DESTINATION	967:7	967:7	4	( 0 )
EXPR	967:7	967:9	5	( 0 )
LEAF_NODE	967:7	967:7	6	(
FIELD	967:8	967:8	6	0
LEAF_NODE	967:8	967:8	7	0
LEAF_NODE	967:9	967:9	6	)
LEAF_NODE	967:10	967:10	4	;
LEAF_NODE	968:0	968:0	2	}
FUNCTION_DEF	970:0	976:0	1	
RETURN_TYPE	970:0	970:7	2	static int
LEAF_NODE	970:0	970:0	3	static
TYPE_NAME	970:7	970:7	3	int
LEAF_NODE	970:7	970:7	4	int
FUNCTION_NAME	971:0	971:0	2	OJPEGPostEncode
LEAF_NODE	971:0	971:0	3	OJPEGPostEncode
PARAMETER_LIST	971:15	971:25	2	( TIFF * tif )
LEAF_NODE	971:15	971:15	3	(
PARAMETER_DECL	971:16	971:22	3	TIFF * tif
TYPE	971:16	971:20	4	TIFF *
TYPE_NAME	971:16	971:16	5	TIFF
LEAF_NODE	971:16	971:16	6	TIFF
POINTER	971:20	971:20	5	*
LEAF_NODE	971:20	971:20	6	*
NAME	971:22	971:22	4	tif
LEAF_NODE	971:22	971:22	5	tif
LEAF_NODE	971:25	971:25	3	)
LEAF_NODE	972:0	972:0	2	{
STATEMENTS	973:1	975:1	2	
LEAF_NODE	973:1	973:1	3	static
SIMPLE_DECL	973:8	973:45	3	const char [ ] module ; module = "OJPEGPostEncode" ;
VAR_DECL	973:8	973:19	4	const char [ ] module ; module = "OJPEGPostEncode"
TYPE	973:8	973:25	5	const char [ ]
TYPE_NAME	973:8	973:14	6	const char
LEAF_NODE	973:8	973:8	7	const
LEAF_NODE	973:14	973:14	7	char
TYPE_SUFFIX	973:25	973:26	6	[ ]
LEAF_NODE	973:25	973:25	7	[
LEAF_NODE	973:26	973:26	7	]
NAME	973:19	973:19	5	module
LEAF_NODE	973:19	973:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	973:19	973:19	5	module = "OJPEGPostEncode"
ASSIGN	973:19	973:28	6	module = "OJPEGPostEncode"
LVAL	973:19	973:19	7	module
NAME	973:19	973:19	8	module
LEAF_NODE	973:19	973:19	9	module
ASSIGN_OP	973:27	973:27	7	=
LEAF_NODE	973:27	973:27	8	=
RVAL	973:28	973:28	7	"OJPEGPostEncode"
FIELD	973:28	973:28	8	"OJPEGPostEncode"
LEAF_NODE	973:28	973:28	9	"OJPEGPostEncode"
LEAF_NODE	973:45	973:45	4	;
EXPR_STATEMENT	974:1	974:112	3	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" ) ;
EXPR	974:1	974:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
FUNCTION_CALL	974:1	974:111	5	TIFFErrorExt ( tif -> tif_clientdata , module , "OJPEG encoding not supported; use new-style JPEG compression instead" )
CALLEE	974:1	974:1	6	TIFFErrorExt
LEAF_NODE	974:1	974:1	7	TIFFErrorExt
LEAF_NODE	974:13	974:13	6	(
ARGUMENT	974:14	974:14	6	tif -> tif_clientdata
FIELD	974:14	974:19	7	tif -> tif_clientdata
LEAF_NODE	974:14	974:14	8	tif
LEAF_NODE	974:17	974:17	8	->
LEAF_NODE	974:19	974:19	8	tif_clientdata
LEAF_NODE	974:33	974:33	6	,
ARGUMENT	974:34	974:34	6	module
FIELD	974:34	974:34	7	module
LEAF_NODE	974:34	974:34	8	module
LEAF_NODE	974:40	974:40	6	,
ARGUMENT	974:41	974:41	6	"OJPEG encoding not supported; use new-style JPEG compression instead"
FIELD	974:41	974:41	7	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	974:41	974:41	8	"OJPEG encoding not supported; use new-style JPEG compression instead"
LEAF_NODE	974:111	974:111	6	)
LEAF_NODE	974:112	974:112	4	;
JUMP_STATEMENT	975:1	975:10	3	return ( 0 ) ;
KEYWORD	975:1	975:1	4	return
LEAF_NODE	975:1	975:1	5	return
DESTINATION	975:7	975:7	4	( 0 )
EXPR	975:7	975:9	5	( 0 )
LEAF_NODE	975:7	975:7	6	(
FIELD	975:8	975:8	6	0
LEAF_NODE	975:8	975:8	7	0
LEAF_NODE	975:9	975:9	6	)
LEAF_NODE	975:10	975:10	4	;
LEAF_NODE	976:0	976:0	2	}
FUNCTION_DEF	978:0	1023:0	1	
RETURN_TYPE	978:0	978:7	2	static void
LEAF_NODE	978:0	978:0	3	static
TYPE_NAME	978:7	978:7	3	void
LEAF_NODE	978:7	978:7	4	void
FUNCTION_NAME	979:0	979:0	2	OJPEGCleanup
LEAF_NODE	979:0	979:0	3	OJPEGCleanup
PARAMETER_LIST	979:12	979:22	2	( TIFF * tif )
LEAF_NODE	979:12	979:12	3	(
PARAMETER_DECL	979:13	979:19	3	TIFF * tif
TYPE	979:13	979:17	4	TIFF *
TYPE_NAME	979:13	979:13	5	TIFF
LEAF_NODE	979:13	979:13	6	TIFF
POINTER	979:17	979:17	5	*
LEAF_NODE	979:17	979:17	6	*
NAME	979:19	979:19	4	tif
LEAF_NODE	979:19	979:19	5	tif
LEAF_NODE	979:22	979:22	3	)
LEAF_NODE	980:0	980:0	2	{
STATEMENTS	981:1	982:1	2	
SIMPLE_DECL	981:1	981:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	981:1	981:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	981:1	981:11	5	OJPEGState *
TYPE_NAME	981:1	981:1	6	OJPEGState
LEAF_NODE	981:1	981:1	7	OJPEGState
POINTER	981:11	981:11	6	*
LEAF_NODE	981:11	981:11	7	*
NAME	981:13	981:13	5	sp
LEAF_NODE	981:13	981:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	981:13	981:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	981:13	981:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	981:13	981:13	7	sp
NAME	981:13	981:13	8	sp
LEAF_NODE	981:13	981:13	9	sp
ASSIGN_OP	981:15	981:15	7	=
LEAF_NODE	981:15	981:15	8	=
RVAL	981:16	981:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	981:16	981:16	8	(
TYPE_NAME	981:17	981:17	8	OJPEGState
LEAF_NODE	981:17	981:17	9	OJPEGState
LEAF_NODE	981:27	981:27	8	*
LEAF_NODE	981:28	981:28	8	)
FIELD	981:29	981:34	8	tif -> tif_data
LEAF_NODE	981:29	981:29	9	tif
LEAF_NODE	981:32	981:32	9	->
LEAF_NODE	981:34	981:34	9	tif_data
LEAF_NODE	981:42	981:42	4	;
SELECTION	982:1	983:1	3	
KEYWORD	982:1	982:1	4	if
LEAF_NODE	982:1	982:1	5	if
LEAF_NODE	982:4	982:4	4	(
CONDITION	982:5	982:5	4	sp != 0
EXPR	982:5	982:9	5	sp != 0
FIELD	982:5	982:5	6	sp
LEAF_NODE	982:5	982:5	7	sp
EQ_OPERATOR	982:7	982:7	6	!=
LEAF_NODE	982:7	982:7	7	!=
FIELD	982:9	982:9	6	0
LEAF_NODE	982:9	982:9	7	0
LEAF_NODE	982:10	982:10	4	)
STATEMENTS	983:1	1022:1	4	
LEAF_NODE	983:1	983:1	5	{
STATEMENTS	984:2	1021:2	5	
EXPR_STATEMENT	984:2	984:46	6	tif -> tif_tagmethods . vgetfield = sp -> vgetparent ;
EXPR	984:2	984:2	7	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
ASSIGN	984:2	984:32	8	tif -> tif_tagmethods . vgetfield = sp -> vgetparent
LVAL	984:2	984:2	9	tif -> tif_tagmethods . vgetfield
FIELD	984:2	984:22	10	tif -> tif_tagmethods . vgetfield
LEAF_NODE	984:2	984:2	11	tif
LEAF_NODE	984:5	984:5	11	->
LEAF_NODE	984:7	984:7	11	tif_tagmethods
LEAF_NODE	984:21	984:21	11	.
LEAF_NODE	984:22	984:22	11	vgetfield
ASSIGN_OP	984:31	984:31	9	=
LEAF_NODE	984:31	984:31	10	=
RVAL	984:32	984:32	9	sp -> vgetparent
FIELD	984:32	984:36	10	sp -> vgetparent
LEAF_NODE	984:32	984:32	11	sp
LEAF_NODE	984:34	984:34	11	->
LEAF_NODE	984:36	984:36	11	vgetparent
LEAF_NODE	984:46	984:46	7	;
EXPR_STATEMENT	985:2	985:46	6	tif -> tif_tagmethods . vsetfield = sp -> vsetparent ;
EXPR	985:2	985:2	7	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
ASSIGN	985:2	985:32	8	tif -> tif_tagmethods . vsetfield = sp -> vsetparent
LVAL	985:2	985:2	9	tif -> tif_tagmethods . vsetfield
FIELD	985:2	985:22	10	tif -> tif_tagmethods . vsetfield
LEAF_NODE	985:2	985:2	11	tif
LEAF_NODE	985:5	985:5	11	->
LEAF_NODE	985:7	985:7	11	tif_tagmethods
LEAF_NODE	985:21	985:21	11	.
LEAF_NODE	985:22	985:22	11	vsetfield
ASSIGN_OP	985:31	985:31	9	=
LEAF_NODE	985:31	985:31	10	=
RVAL	985:32	985:32	9	sp -> vsetparent
FIELD	985:32	985:36	10	sp -> vsetparent
LEAF_NODE	985:32	985:32	11	sp
LEAF_NODE	985:34	985:34	11	->
LEAF_NODE	985:36	985:36	11	vsetparent
LEAF_NODE	985:46	985:46	7	;
EXPR_STATEMENT	986:2	986:43	6	tif -> tif_tagmethods . printdir = sp -> printdir ;
EXPR	986:2	986:2	7	tif -> tif_tagmethods . printdir = sp -> printdir
ASSIGN	986:2	986:31	8	tif -> tif_tagmethods . printdir = sp -> printdir
LVAL	986:2	986:2	9	tif -> tif_tagmethods . printdir
FIELD	986:2	986:22	10	tif -> tif_tagmethods . printdir
LEAF_NODE	986:2	986:2	11	tif
LEAF_NODE	986:5	986:5	11	->
LEAF_NODE	986:7	986:7	11	tif_tagmethods
LEAF_NODE	986:21	986:21	11	.
LEAF_NODE	986:22	986:22	11	printdir
ASSIGN_OP	986:30	986:30	9	=
LEAF_NODE	986:30	986:30	10	=
RVAL	986:31	986:31	9	sp -> printdir
FIELD	986:31	986:35	10	sp -> printdir
LEAF_NODE	986:31	986:31	11	sp
LEAF_NODE	986:33	986:33	11	->
LEAF_NODE	986:35	986:35	11	printdir
LEAF_NODE	986:43	986:43	7	;
SELECTION	987:2	988:3	6	
KEYWORD	987:2	987:2	7	if
LEAF_NODE	987:2	987:2	8	if
LEAF_NODE	987:5	987:5	7	(
CONDITION	987:6	987:6	7	sp -> qtable [ 0 ] != 0
EXPR	987:6	987:21	8	sp -> qtable [ 0 ] != 0
FIELD	987:6	987:18	9	sp -> qtable [ 0 ]
LEAF_NODE	987:6	987:6	10	sp
LEAF_NODE	987:8	987:8	10	->
LEAF_NODE	987:10	987:10	10	qtable
LEAF_NODE	987:16	987:16	10	[
EXPR	987:17	987:17	10	0
FIELD	987:17	987:17	11	0
LEAF_NODE	987:17	987:17	12	0
LEAF_NODE	987:18	987:18	10	]
EQ_OPERATOR	987:19	987:19	9	!=
LEAF_NODE	987:19	987:19	10	!=
FIELD	987:21	987:21	9	0
LEAF_NODE	987:21	987:21	10	0
LEAF_NODE	987:22	987:22	7	)
STATEMENTS	988:3	988:3	7	
EXPR_STATEMENT	988:3	988:27	8	_TIFFfree ( sp -> qtable [ 0 ] ) ;
EXPR	988:3	988:3	9	_TIFFfree ( sp -> qtable [ 0 ] )
FUNCTION_CALL	988:3	988:26	10	_TIFFfree ( sp -> qtable [ 0 ] )
CALLEE	988:3	988:3	11	_TIFFfree
LEAF_NODE	988:3	988:3	12	_TIFFfree
LEAF_NODE	988:12	988:12	11	(
ARGUMENT	988:13	988:13	11	sp -> qtable [ 0 ]
FIELD	988:13	988:25	12	sp -> qtable [ 0 ]
LEAF_NODE	988:13	988:13	13	sp
LEAF_NODE	988:15	988:15	13	->
LEAF_NODE	988:17	988:17	13	qtable
LEAF_NODE	988:23	988:23	13	[
EXPR	988:24	988:24	13	0
FIELD	988:24	988:24	14	0
LEAF_NODE	988:24	988:24	15	0
LEAF_NODE	988:25	988:25	13	]
LEAF_NODE	988:26	988:26	11	)
LEAF_NODE	988:27	988:27	9	;
SELECTION	989:2	990:3	6	
KEYWORD	989:2	989:2	7	if
LEAF_NODE	989:2	989:2	8	if
LEAF_NODE	989:5	989:5	7	(
CONDITION	989:6	989:6	7	sp -> qtable [ 1 ] != 0
EXPR	989:6	989:21	8	sp -> qtable [ 1 ] != 0
FIELD	989:6	989:18	9	sp -> qtable [ 1 ]
LEAF_NODE	989:6	989:6	10	sp
LEAF_NODE	989:8	989:8	10	->
LEAF_NODE	989:10	989:10	10	qtable
LEAF_NODE	989:16	989:16	10	[
EXPR	989:17	989:17	10	1
FIELD	989:17	989:17	11	1
LEAF_NODE	989:17	989:17	12	1
LEAF_NODE	989:18	989:18	10	]
EQ_OPERATOR	989:19	989:19	9	!=
LEAF_NODE	989:19	989:19	10	!=
FIELD	989:21	989:21	9	0
LEAF_NODE	989:21	989:21	10	0
LEAF_NODE	989:22	989:22	7	)
STATEMENTS	990:3	990:3	7	
EXPR_STATEMENT	990:3	990:27	8	_TIFFfree ( sp -> qtable [ 1 ] ) ;
EXPR	990:3	990:3	9	_TIFFfree ( sp -> qtable [ 1 ] )
FUNCTION_CALL	990:3	990:26	10	_TIFFfree ( sp -> qtable [ 1 ] )
CALLEE	990:3	990:3	11	_TIFFfree
LEAF_NODE	990:3	990:3	12	_TIFFfree
LEAF_NODE	990:12	990:12	11	(
ARGUMENT	990:13	990:13	11	sp -> qtable [ 1 ]
FIELD	990:13	990:25	12	sp -> qtable [ 1 ]
LEAF_NODE	990:13	990:13	13	sp
LEAF_NODE	990:15	990:15	13	->
LEAF_NODE	990:17	990:17	13	qtable
LEAF_NODE	990:23	990:23	13	[
EXPR	990:24	990:24	13	1
FIELD	990:24	990:24	14	1
LEAF_NODE	990:24	990:24	15	1
LEAF_NODE	990:25	990:25	13	]
LEAF_NODE	990:26	990:26	11	)
LEAF_NODE	990:27	990:27	9	;
SELECTION	991:2	992:3	6	
KEYWORD	991:2	991:2	7	if
LEAF_NODE	991:2	991:2	8	if
LEAF_NODE	991:5	991:5	7	(
CONDITION	991:6	991:6	7	sp -> qtable [ 2 ] != 0
EXPR	991:6	991:21	8	sp -> qtable [ 2 ] != 0
FIELD	991:6	991:18	9	sp -> qtable [ 2 ]
LEAF_NODE	991:6	991:6	10	sp
LEAF_NODE	991:8	991:8	10	->
LEAF_NODE	991:10	991:10	10	qtable
LEAF_NODE	991:16	991:16	10	[
EXPR	991:17	991:17	10	2
FIELD	991:17	991:17	11	2
LEAF_NODE	991:17	991:17	12	2
LEAF_NODE	991:18	991:18	10	]
EQ_OPERATOR	991:19	991:19	9	!=
LEAF_NODE	991:19	991:19	10	!=
FIELD	991:21	991:21	9	0
LEAF_NODE	991:21	991:21	10	0
LEAF_NODE	991:22	991:22	7	)
STATEMENTS	992:3	992:3	7	
EXPR_STATEMENT	992:3	992:27	8	_TIFFfree ( sp -> qtable [ 2 ] ) ;
EXPR	992:3	992:3	9	_TIFFfree ( sp -> qtable [ 2 ] )
FUNCTION_CALL	992:3	992:26	10	_TIFFfree ( sp -> qtable [ 2 ] )
CALLEE	992:3	992:3	11	_TIFFfree
LEAF_NODE	992:3	992:3	12	_TIFFfree
LEAF_NODE	992:12	992:12	11	(
ARGUMENT	992:13	992:13	11	sp -> qtable [ 2 ]
FIELD	992:13	992:25	12	sp -> qtable [ 2 ]
LEAF_NODE	992:13	992:13	13	sp
LEAF_NODE	992:15	992:15	13	->
LEAF_NODE	992:17	992:17	13	qtable
LEAF_NODE	992:23	992:23	13	[
EXPR	992:24	992:24	13	2
FIELD	992:24	992:24	14	2
LEAF_NODE	992:24	992:24	15	2
LEAF_NODE	992:25	992:25	13	]
LEAF_NODE	992:26	992:26	11	)
LEAF_NODE	992:27	992:27	9	;
SELECTION	993:2	994:3	6	
KEYWORD	993:2	993:2	7	if
LEAF_NODE	993:2	993:2	8	if
LEAF_NODE	993:5	993:5	7	(
CONDITION	993:6	993:6	7	sp -> qtable [ 3 ] != 0
EXPR	993:6	993:21	8	sp -> qtable [ 3 ] != 0
FIELD	993:6	993:18	9	sp -> qtable [ 3 ]
LEAF_NODE	993:6	993:6	10	sp
LEAF_NODE	993:8	993:8	10	->
LEAF_NODE	993:10	993:10	10	qtable
LEAF_NODE	993:16	993:16	10	[
EXPR	993:17	993:17	10	3
FIELD	993:17	993:17	11	3
LEAF_NODE	993:17	993:17	12	3
LEAF_NODE	993:18	993:18	10	]
EQ_OPERATOR	993:19	993:19	9	!=
LEAF_NODE	993:19	993:19	10	!=
FIELD	993:21	993:21	9	0
LEAF_NODE	993:21	993:21	10	0
LEAF_NODE	993:22	993:22	7	)
STATEMENTS	994:3	994:3	7	
EXPR_STATEMENT	994:3	994:27	8	_TIFFfree ( sp -> qtable [ 3 ] ) ;
EXPR	994:3	994:3	9	_TIFFfree ( sp -> qtable [ 3 ] )
FUNCTION_CALL	994:3	994:26	10	_TIFFfree ( sp -> qtable [ 3 ] )
CALLEE	994:3	994:3	11	_TIFFfree
LEAF_NODE	994:3	994:3	12	_TIFFfree
LEAF_NODE	994:12	994:12	11	(
ARGUMENT	994:13	994:13	11	sp -> qtable [ 3 ]
FIELD	994:13	994:25	12	sp -> qtable [ 3 ]
LEAF_NODE	994:13	994:13	13	sp
LEAF_NODE	994:15	994:15	13	->
LEAF_NODE	994:17	994:17	13	qtable
LEAF_NODE	994:23	994:23	13	[
EXPR	994:24	994:24	13	3
FIELD	994:24	994:24	14	3
LEAF_NODE	994:24	994:24	15	3
LEAF_NODE	994:25	994:25	13	]
LEAF_NODE	994:26	994:26	11	)
LEAF_NODE	994:27	994:27	9	;
SELECTION	995:2	996:3	6	
KEYWORD	995:2	995:2	7	if
LEAF_NODE	995:2	995:2	8	if
LEAF_NODE	995:5	995:5	7	(
CONDITION	995:6	995:6	7	sp -> dctable [ 0 ] != 0
EXPR	995:6	995:22	8	sp -> dctable [ 0 ] != 0
FIELD	995:6	995:19	9	sp -> dctable [ 0 ]
LEAF_NODE	995:6	995:6	10	sp
LEAF_NODE	995:8	995:8	10	->
LEAF_NODE	995:10	995:10	10	dctable
LEAF_NODE	995:17	995:17	10	[
EXPR	995:18	995:18	10	0
FIELD	995:18	995:18	11	0
LEAF_NODE	995:18	995:18	12	0
LEAF_NODE	995:19	995:19	10	]
EQ_OPERATOR	995:20	995:20	9	!=
LEAF_NODE	995:20	995:20	10	!=
FIELD	995:22	995:22	9	0
LEAF_NODE	995:22	995:22	10	0
LEAF_NODE	995:23	995:23	7	)
STATEMENTS	996:3	996:3	7	
EXPR_STATEMENT	996:3	996:28	8	_TIFFfree ( sp -> dctable [ 0 ] ) ;
EXPR	996:3	996:3	9	_TIFFfree ( sp -> dctable [ 0 ] )
FUNCTION_CALL	996:3	996:27	10	_TIFFfree ( sp -> dctable [ 0 ] )
CALLEE	996:3	996:3	11	_TIFFfree
LEAF_NODE	996:3	996:3	12	_TIFFfree
LEAF_NODE	996:12	996:12	11	(
ARGUMENT	996:13	996:13	11	sp -> dctable [ 0 ]
FIELD	996:13	996:26	12	sp -> dctable [ 0 ]
LEAF_NODE	996:13	996:13	13	sp
LEAF_NODE	996:15	996:15	13	->
LEAF_NODE	996:17	996:17	13	dctable
LEAF_NODE	996:24	996:24	13	[
EXPR	996:25	996:25	13	0
FIELD	996:25	996:25	14	0
LEAF_NODE	996:25	996:25	15	0
LEAF_NODE	996:26	996:26	13	]
LEAF_NODE	996:27	996:27	11	)
LEAF_NODE	996:28	996:28	9	;
SELECTION	997:2	998:3	6	
KEYWORD	997:2	997:2	7	if
LEAF_NODE	997:2	997:2	8	if
LEAF_NODE	997:5	997:5	7	(
CONDITION	997:6	997:6	7	sp -> dctable [ 1 ] != 0
EXPR	997:6	997:22	8	sp -> dctable [ 1 ] != 0
FIELD	997:6	997:19	9	sp -> dctable [ 1 ]
LEAF_NODE	997:6	997:6	10	sp
LEAF_NODE	997:8	997:8	10	->
LEAF_NODE	997:10	997:10	10	dctable
LEAF_NODE	997:17	997:17	10	[
EXPR	997:18	997:18	10	1
FIELD	997:18	997:18	11	1
LEAF_NODE	997:18	997:18	12	1
LEAF_NODE	997:19	997:19	10	]
EQ_OPERATOR	997:20	997:20	9	!=
LEAF_NODE	997:20	997:20	10	!=
FIELD	997:22	997:22	9	0
LEAF_NODE	997:22	997:22	10	0
LEAF_NODE	997:23	997:23	7	)
STATEMENTS	998:3	998:3	7	
EXPR_STATEMENT	998:3	998:28	8	_TIFFfree ( sp -> dctable [ 1 ] ) ;
EXPR	998:3	998:3	9	_TIFFfree ( sp -> dctable [ 1 ] )
FUNCTION_CALL	998:3	998:27	10	_TIFFfree ( sp -> dctable [ 1 ] )
CALLEE	998:3	998:3	11	_TIFFfree
LEAF_NODE	998:3	998:3	12	_TIFFfree
LEAF_NODE	998:12	998:12	11	(
ARGUMENT	998:13	998:13	11	sp -> dctable [ 1 ]
FIELD	998:13	998:26	12	sp -> dctable [ 1 ]
LEAF_NODE	998:13	998:13	13	sp
LEAF_NODE	998:15	998:15	13	->
LEAF_NODE	998:17	998:17	13	dctable
LEAF_NODE	998:24	998:24	13	[
EXPR	998:25	998:25	13	1
FIELD	998:25	998:25	14	1
LEAF_NODE	998:25	998:25	15	1
LEAF_NODE	998:26	998:26	13	]
LEAF_NODE	998:27	998:27	11	)
LEAF_NODE	998:28	998:28	9	;
SELECTION	999:2	1000:3	6	
KEYWORD	999:2	999:2	7	if
LEAF_NODE	999:2	999:2	8	if
LEAF_NODE	999:5	999:5	7	(
CONDITION	999:6	999:6	7	sp -> dctable [ 2 ] != 0
EXPR	999:6	999:22	8	sp -> dctable [ 2 ] != 0
FIELD	999:6	999:19	9	sp -> dctable [ 2 ]
LEAF_NODE	999:6	999:6	10	sp
LEAF_NODE	999:8	999:8	10	->
LEAF_NODE	999:10	999:10	10	dctable
LEAF_NODE	999:17	999:17	10	[
EXPR	999:18	999:18	10	2
FIELD	999:18	999:18	11	2
LEAF_NODE	999:18	999:18	12	2
LEAF_NODE	999:19	999:19	10	]
EQ_OPERATOR	999:20	999:20	9	!=
LEAF_NODE	999:20	999:20	10	!=
FIELD	999:22	999:22	9	0
LEAF_NODE	999:22	999:22	10	0
LEAF_NODE	999:23	999:23	7	)
STATEMENTS	1000:3	1000:3	7	
EXPR_STATEMENT	1000:3	1000:28	8	_TIFFfree ( sp -> dctable [ 2 ] ) ;
EXPR	1000:3	1000:3	9	_TIFFfree ( sp -> dctable [ 2 ] )
FUNCTION_CALL	1000:3	1000:27	10	_TIFFfree ( sp -> dctable [ 2 ] )
CALLEE	1000:3	1000:3	11	_TIFFfree
LEAF_NODE	1000:3	1000:3	12	_TIFFfree
LEAF_NODE	1000:12	1000:12	11	(
ARGUMENT	1000:13	1000:13	11	sp -> dctable [ 2 ]
FIELD	1000:13	1000:26	12	sp -> dctable [ 2 ]
LEAF_NODE	1000:13	1000:13	13	sp
LEAF_NODE	1000:15	1000:15	13	->
LEAF_NODE	1000:17	1000:17	13	dctable
LEAF_NODE	1000:24	1000:24	13	[
EXPR	1000:25	1000:25	13	2
FIELD	1000:25	1000:25	14	2
LEAF_NODE	1000:25	1000:25	15	2
LEAF_NODE	1000:26	1000:26	13	]
LEAF_NODE	1000:27	1000:27	11	)
LEAF_NODE	1000:28	1000:28	9	;
SELECTION	1001:2	1002:3	6	
KEYWORD	1001:2	1001:2	7	if
LEAF_NODE	1001:2	1001:2	8	if
LEAF_NODE	1001:5	1001:5	7	(
CONDITION	1001:6	1001:6	7	sp -> dctable [ 3 ] != 0
EXPR	1001:6	1001:22	8	sp -> dctable [ 3 ] != 0
FIELD	1001:6	1001:19	9	sp -> dctable [ 3 ]
LEAF_NODE	1001:6	1001:6	10	sp
LEAF_NODE	1001:8	1001:8	10	->
LEAF_NODE	1001:10	1001:10	10	dctable
LEAF_NODE	1001:17	1001:17	10	[
EXPR	1001:18	1001:18	10	3
FIELD	1001:18	1001:18	11	3
LEAF_NODE	1001:18	1001:18	12	3
LEAF_NODE	1001:19	1001:19	10	]
EQ_OPERATOR	1001:20	1001:20	9	!=
LEAF_NODE	1001:20	1001:20	10	!=
FIELD	1001:22	1001:22	9	0
LEAF_NODE	1001:22	1001:22	10	0
LEAF_NODE	1001:23	1001:23	7	)
STATEMENTS	1002:3	1002:3	7	
EXPR_STATEMENT	1002:3	1002:28	8	_TIFFfree ( sp -> dctable [ 3 ] ) ;
EXPR	1002:3	1002:3	9	_TIFFfree ( sp -> dctable [ 3 ] )
FUNCTION_CALL	1002:3	1002:27	10	_TIFFfree ( sp -> dctable [ 3 ] )
CALLEE	1002:3	1002:3	11	_TIFFfree
LEAF_NODE	1002:3	1002:3	12	_TIFFfree
LEAF_NODE	1002:12	1002:12	11	(
ARGUMENT	1002:13	1002:13	11	sp -> dctable [ 3 ]
FIELD	1002:13	1002:26	12	sp -> dctable [ 3 ]
LEAF_NODE	1002:13	1002:13	13	sp
LEAF_NODE	1002:15	1002:15	13	->
LEAF_NODE	1002:17	1002:17	13	dctable
LEAF_NODE	1002:24	1002:24	13	[
EXPR	1002:25	1002:25	13	3
FIELD	1002:25	1002:25	14	3
LEAF_NODE	1002:25	1002:25	15	3
LEAF_NODE	1002:26	1002:26	13	]
LEAF_NODE	1002:27	1002:27	11	)
LEAF_NODE	1002:28	1002:28	9	;
SELECTION	1003:2	1004:3	6	
KEYWORD	1003:2	1003:2	7	if
LEAF_NODE	1003:2	1003:2	8	if
LEAF_NODE	1003:5	1003:5	7	(
CONDITION	1003:6	1003:6	7	sp -> actable [ 0 ] != 0
EXPR	1003:6	1003:22	8	sp -> actable [ 0 ] != 0
FIELD	1003:6	1003:19	9	sp -> actable [ 0 ]
LEAF_NODE	1003:6	1003:6	10	sp
LEAF_NODE	1003:8	1003:8	10	->
LEAF_NODE	1003:10	1003:10	10	actable
LEAF_NODE	1003:17	1003:17	10	[
EXPR	1003:18	1003:18	10	0
FIELD	1003:18	1003:18	11	0
LEAF_NODE	1003:18	1003:18	12	0
LEAF_NODE	1003:19	1003:19	10	]
EQ_OPERATOR	1003:20	1003:20	9	!=
LEAF_NODE	1003:20	1003:20	10	!=
FIELD	1003:22	1003:22	9	0
LEAF_NODE	1003:22	1003:22	10	0
LEAF_NODE	1003:23	1003:23	7	)
STATEMENTS	1004:3	1004:3	7	
EXPR_STATEMENT	1004:3	1004:28	8	_TIFFfree ( sp -> actable [ 0 ] ) ;
EXPR	1004:3	1004:3	9	_TIFFfree ( sp -> actable [ 0 ] )
FUNCTION_CALL	1004:3	1004:27	10	_TIFFfree ( sp -> actable [ 0 ] )
CALLEE	1004:3	1004:3	11	_TIFFfree
LEAF_NODE	1004:3	1004:3	12	_TIFFfree
LEAF_NODE	1004:12	1004:12	11	(
ARGUMENT	1004:13	1004:13	11	sp -> actable [ 0 ]
FIELD	1004:13	1004:26	12	sp -> actable [ 0 ]
LEAF_NODE	1004:13	1004:13	13	sp
LEAF_NODE	1004:15	1004:15	13	->
LEAF_NODE	1004:17	1004:17	13	actable
LEAF_NODE	1004:24	1004:24	13	[
EXPR	1004:25	1004:25	13	0
FIELD	1004:25	1004:25	14	0
LEAF_NODE	1004:25	1004:25	15	0
LEAF_NODE	1004:26	1004:26	13	]
LEAF_NODE	1004:27	1004:27	11	)
LEAF_NODE	1004:28	1004:28	9	;
SELECTION	1005:2	1006:3	6	
KEYWORD	1005:2	1005:2	7	if
LEAF_NODE	1005:2	1005:2	8	if
LEAF_NODE	1005:5	1005:5	7	(
CONDITION	1005:6	1005:6	7	sp -> actable [ 1 ] != 0
EXPR	1005:6	1005:22	8	sp -> actable [ 1 ] != 0
FIELD	1005:6	1005:19	9	sp -> actable [ 1 ]
LEAF_NODE	1005:6	1005:6	10	sp
LEAF_NODE	1005:8	1005:8	10	->
LEAF_NODE	1005:10	1005:10	10	actable
LEAF_NODE	1005:17	1005:17	10	[
EXPR	1005:18	1005:18	10	1
FIELD	1005:18	1005:18	11	1
LEAF_NODE	1005:18	1005:18	12	1
LEAF_NODE	1005:19	1005:19	10	]
EQ_OPERATOR	1005:20	1005:20	9	!=
LEAF_NODE	1005:20	1005:20	10	!=
FIELD	1005:22	1005:22	9	0
LEAF_NODE	1005:22	1005:22	10	0
LEAF_NODE	1005:23	1005:23	7	)
STATEMENTS	1006:3	1006:3	7	
EXPR_STATEMENT	1006:3	1006:28	8	_TIFFfree ( sp -> actable [ 1 ] ) ;
EXPR	1006:3	1006:3	9	_TIFFfree ( sp -> actable [ 1 ] )
FUNCTION_CALL	1006:3	1006:27	10	_TIFFfree ( sp -> actable [ 1 ] )
CALLEE	1006:3	1006:3	11	_TIFFfree
LEAF_NODE	1006:3	1006:3	12	_TIFFfree
LEAF_NODE	1006:12	1006:12	11	(
ARGUMENT	1006:13	1006:13	11	sp -> actable [ 1 ]
FIELD	1006:13	1006:26	12	sp -> actable [ 1 ]
LEAF_NODE	1006:13	1006:13	13	sp
LEAF_NODE	1006:15	1006:15	13	->
LEAF_NODE	1006:17	1006:17	13	actable
LEAF_NODE	1006:24	1006:24	13	[
EXPR	1006:25	1006:25	13	1
FIELD	1006:25	1006:25	14	1
LEAF_NODE	1006:25	1006:25	15	1
LEAF_NODE	1006:26	1006:26	13	]
LEAF_NODE	1006:27	1006:27	11	)
LEAF_NODE	1006:28	1006:28	9	;
SELECTION	1007:2	1008:3	6	
KEYWORD	1007:2	1007:2	7	if
LEAF_NODE	1007:2	1007:2	8	if
LEAF_NODE	1007:5	1007:5	7	(
CONDITION	1007:6	1007:6	7	sp -> actable [ 2 ] != 0
EXPR	1007:6	1007:22	8	sp -> actable [ 2 ] != 0
FIELD	1007:6	1007:19	9	sp -> actable [ 2 ]
LEAF_NODE	1007:6	1007:6	10	sp
LEAF_NODE	1007:8	1007:8	10	->
LEAF_NODE	1007:10	1007:10	10	actable
LEAF_NODE	1007:17	1007:17	10	[
EXPR	1007:18	1007:18	10	2
FIELD	1007:18	1007:18	11	2
LEAF_NODE	1007:18	1007:18	12	2
LEAF_NODE	1007:19	1007:19	10	]
EQ_OPERATOR	1007:20	1007:20	9	!=
LEAF_NODE	1007:20	1007:20	10	!=
FIELD	1007:22	1007:22	9	0
LEAF_NODE	1007:22	1007:22	10	0
LEAF_NODE	1007:23	1007:23	7	)
STATEMENTS	1008:3	1008:3	7	
EXPR_STATEMENT	1008:3	1008:28	8	_TIFFfree ( sp -> actable [ 2 ] ) ;
EXPR	1008:3	1008:3	9	_TIFFfree ( sp -> actable [ 2 ] )
FUNCTION_CALL	1008:3	1008:27	10	_TIFFfree ( sp -> actable [ 2 ] )
CALLEE	1008:3	1008:3	11	_TIFFfree
LEAF_NODE	1008:3	1008:3	12	_TIFFfree
LEAF_NODE	1008:12	1008:12	11	(
ARGUMENT	1008:13	1008:13	11	sp -> actable [ 2 ]
FIELD	1008:13	1008:26	12	sp -> actable [ 2 ]
LEAF_NODE	1008:13	1008:13	13	sp
LEAF_NODE	1008:15	1008:15	13	->
LEAF_NODE	1008:17	1008:17	13	actable
LEAF_NODE	1008:24	1008:24	13	[
EXPR	1008:25	1008:25	13	2
FIELD	1008:25	1008:25	14	2
LEAF_NODE	1008:25	1008:25	15	2
LEAF_NODE	1008:26	1008:26	13	]
LEAF_NODE	1008:27	1008:27	11	)
LEAF_NODE	1008:28	1008:28	9	;
SELECTION	1009:2	1010:3	6	
KEYWORD	1009:2	1009:2	7	if
LEAF_NODE	1009:2	1009:2	8	if
LEAF_NODE	1009:5	1009:5	7	(
CONDITION	1009:6	1009:6	7	sp -> actable [ 3 ] != 0
EXPR	1009:6	1009:22	8	sp -> actable [ 3 ] != 0
FIELD	1009:6	1009:19	9	sp -> actable [ 3 ]
LEAF_NODE	1009:6	1009:6	10	sp
LEAF_NODE	1009:8	1009:8	10	->
LEAF_NODE	1009:10	1009:10	10	actable
LEAF_NODE	1009:17	1009:17	10	[
EXPR	1009:18	1009:18	10	3
FIELD	1009:18	1009:18	11	3
LEAF_NODE	1009:18	1009:18	12	3
LEAF_NODE	1009:19	1009:19	10	]
EQ_OPERATOR	1009:20	1009:20	9	!=
LEAF_NODE	1009:20	1009:20	10	!=
FIELD	1009:22	1009:22	9	0
LEAF_NODE	1009:22	1009:22	10	0
LEAF_NODE	1009:23	1009:23	7	)
STATEMENTS	1010:3	1010:3	7	
EXPR_STATEMENT	1010:3	1010:28	8	_TIFFfree ( sp -> actable [ 3 ] ) ;
EXPR	1010:3	1010:3	9	_TIFFfree ( sp -> actable [ 3 ] )
FUNCTION_CALL	1010:3	1010:27	10	_TIFFfree ( sp -> actable [ 3 ] )
CALLEE	1010:3	1010:3	11	_TIFFfree
LEAF_NODE	1010:3	1010:3	12	_TIFFfree
LEAF_NODE	1010:12	1010:12	11	(
ARGUMENT	1010:13	1010:13	11	sp -> actable [ 3 ]
FIELD	1010:13	1010:26	12	sp -> actable [ 3 ]
LEAF_NODE	1010:13	1010:13	13	sp
LEAF_NODE	1010:15	1010:15	13	->
LEAF_NODE	1010:17	1010:17	13	actable
LEAF_NODE	1010:24	1010:24	13	[
EXPR	1010:25	1010:25	13	3
FIELD	1010:25	1010:25	14	3
LEAF_NODE	1010:25	1010:25	15	3
LEAF_NODE	1010:26	1010:26	13	]
LEAF_NODE	1010:27	1010:27	11	)
LEAF_NODE	1010:28	1010:28	9	;
SELECTION	1011:2	1012:3	6	
KEYWORD	1011:2	1011:2	7	if
LEAF_NODE	1011:2	1011:2	8	if
LEAF_NODE	1011:5	1011:5	7	(
CONDITION	1011:6	1011:6	7	sp -> libjpeg_session_active != 0
EXPR	1011:6	1011:34	8	sp -> libjpeg_session_active != 0
FIELD	1011:6	1011:10	9	sp -> libjpeg_session_active
LEAF_NODE	1011:6	1011:6	10	sp
LEAF_NODE	1011:8	1011:8	10	->
LEAF_NODE	1011:10	1011:10	10	libjpeg_session_active
EQ_OPERATOR	1011:32	1011:32	9	!=
LEAF_NODE	1011:32	1011:32	10	!=
FIELD	1011:34	1011:34	9	0
LEAF_NODE	1011:34	1011:34	10	0
LEAF_NODE	1011:35	1011:35	7	)
STATEMENTS	1012:3	1012:3	7	
EXPR_STATEMENT	1012:3	1012:32	8	OJPEGLibjpegSessionAbort ( tif ) ;
EXPR	1012:3	1012:3	9	OJPEGLibjpegSessionAbort ( tif )
FUNCTION_CALL	1012:3	1012:31	10	OJPEGLibjpegSessionAbort ( tif )
CALLEE	1012:3	1012:3	11	OJPEGLibjpegSessionAbort
LEAF_NODE	1012:3	1012:3	12	OJPEGLibjpegSessionAbort
LEAF_NODE	1012:27	1012:27	11	(
ARGUMENT	1012:28	1012:28	11	tif
FIELD	1012:28	1012:28	12	tif
LEAF_NODE	1012:28	1012:28	13	tif
LEAF_NODE	1012:31	1012:31	11	)
LEAF_NODE	1012:32	1012:32	9	;
SELECTION	1013:2	1014:3	6	
KEYWORD	1013:2	1013:2	7	if
LEAF_NODE	1013:2	1013:2	8	if
LEAF_NODE	1013:5	1013:5	7	(
CONDITION	1013:6	1013:6	7	sp -> subsampling_convert_ycbcrbuf != 0
EXPR	1013:6	1013:40	8	sp -> subsampling_convert_ycbcrbuf != 0
FIELD	1013:6	1013:10	9	sp -> subsampling_convert_ycbcrbuf
LEAF_NODE	1013:6	1013:6	10	sp
LEAF_NODE	1013:8	1013:8	10	->
LEAF_NODE	1013:10	1013:10	10	subsampling_convert_ycbcrbuf
EQ_OPERATOR	1013:38	1013:38	9	!=
LEAF_NODE	1013:38	1013:38	10	!=
FIELD	1013:40	1013:40	9	0
LEAF_NODE	1013:40	1013:40	10	0
LEAF_NODE	1013:41	1013:41	7	)
STATEMENTS	1014:3	1014:3	7	
EXPR_STATEMENT	1014:3	1014:46	8	_TIFFfree ( sp -> subsampling_convert_ycbcrbuf ) ;
EXPR	1014:3	1014:3	9	_TIFFfree ( sp -> subsampling_convert_ycbcrbuf )
FUNCTION_CALL	1014:3	1014:45	10	_TIFFfree ( sp -> subsampling_convert_ycbcrbuf )
CALLEE	1014:3	1014:3	11	_TIFFfree
LEAF_NODE	1014:3	1014:3	12	_TIFFfree
LEAF_NODE	1014:12	1014:12	11	(
ARGUMENT	1014:13	1014:13	11	sp -> subsampling_convert_ycbcrbuf
FIELD	1014:13	1014:17	12	sp -> subsampling_convert_ycbcrbuf
LEAF_NODE	1014:13	1014:13	13	sp
LEAF_NODE	1014:15	1014:15	13	->
LEAF_NODE	1014:17	1014:17	13	subsampling_convert_ycbcrbuf
LEAF_NODE	1014:45	1014:45	11	)
LEAF_NODE	1014:46	1014:46	9	;
SELECTION	1015:2	1016:3	6	
KEYWORD	1015:2	1015:2	7	if
LEAF_NODE	1015:2	1015:2	8	if
LEAF_NODE	1015:5	1015:5	7	(
CONDITION	1015:6	1015:6	7	sp -> subsampling_convert_ycbcrimage != 0
EXPR	1015:6	1015:42	8	sp -> subsampling_convert_ycbcrimage != 0
FIELD	1015:6	1015:10	9	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1015:6	1015:6	10	sp
LEAF_NODE	1015:8	1015:8	10	->
LEAF_NODE	1015:10	1015:10	10	subsampling_convert_ycbcrimage
EQ_OPERATOR	1015:40	1015:40	9	!=
LEAF_NODE	1015:40	1015:40	10	!=
FIELD	1015:42	1015:42	9	0
LEAF_NODE	1015:42	1015:42	10	0
LEAF_NODE	1015:43	1015:43	7	)
STATEMENTS	1016:3	1016:3	7	
EXPR_STATEMENT	1016:3	1016:48	8	_TIFFfree ( sp -> subsampling_convert_ycbcrimage ) ;
EXPR	1016:3	1016:3	9	_TIFFfree ( sp -> subsampling_convert_ycbcrimage )
FUNCTION_CALL	1016:3	1016:47	10	_TIFFfree ( sp -> subsampling_convert_ycbcrimage )
CALLEE	1016:3	1016:3	11	_TIFFfree
LEAF_NODE	1016:3	1016:3	12	_TIFFfree
LEAF_NODE	1016:12	1016:12	11	(
ARGUMENT	1016:13	1016:13	11	sp -> subsampling_convert_ycbcrimage
FIELD	1016:13	1016:17	12	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1016:13	1016:13	13	sp
LEAF_NODE	1016:15	1016:15	13	->
LEAF_NODE	1016:17	1016:17	13	subsampling_convert_ycbcrimage
LEAF_NODE	1016:47	1016:47	11	)
LEAF_NODE	1016:48	1016:48	9	;
SELECTION	1017:2	1018:3	6	
KEYWORD	1017:2	1017:2	7	if
LEAF_NODE	1017:2	1017:2	8	if
LEAF_NODE	1017:5	1017:5	7	(
CONDITION	1017:6	1017:6	7	sp -> skip_buffer != 0
EXPR	1017:6	1017:23	8	sp -> skip_buffer != 0
FIELD	1017:6	1017:10	9	sp -> skip_buffer
LEAF_NODE	1017:6	1017:6	10	sp
LEAF_NODE	1017:8	1017:8	10	->
LEAF_NODE	1017:10	1017:10	10	skip_buffer
EQ_OPERATOR	1017:21	1017:21	9	!=
LEAF_NODE	1017:21	1017:21	10	!=
FIELD	1017:23	1017:23	9	0
LEAF_NODE	1017:23	1017:23	10	0
LEAF_NODE	1017:24	1017:24	7	)
STATEMENTS	1018:3	1018:3	7	
EXPR_STATEMENT	1018:3	1018:29	8	_TIFFfree ( sp -> skip_buffer ) ;
EXPR	1018:3	1018:3	9	_TIFFfree ( sp -> skip_buffer )
FUNCTION_CALL	1018:3	1018:28	10	_TIFFfree ( sp -> skip_buffer )
CALLEE	1018:3	1018:3	11	_TIFFfree
LEAF_NODE	1018:3	1018:3	12	_TIFFfree
LEAF_NODE	1018:12	1018:12	11	(
ARGUMENT	1018:13	1018:13	11	sp -> skip_buffer
FIELD	1018:13	1018:17	12	sp -> skip_buffer
LEAF_NODE	1018:13	1018:13	13	sp
LEAF_NODE	1018:15	1018:15	13	->
LEAF_NODE	1018:17	1018:17	13	skip_buffer
LEAF_NODE	1018:28	1018:28	11	)
LEAF_NODE	1018:29	1018:29	9	;
EXPR_STATEMENT	1019:2	1019:15	6	_TIFFfree ( sp ) ;
EXPR	1019:2	1019:2	7	_TIFFfree ( sp )
FUNCTION_CALL	1019:2	1019:14	8	_TIFFfree ( sp )
CALLEE	1019:2	1019:2	9	_TIFFfree
LEAF_NODE	1019:2	1019:2	10	_TIFFfree
LEAF_NODE	1019:11	1019:11	9	(
ARGUMENT	1019:12	1019:12	9	sp
FIELD	1019:12	1019:12	10	sp
LEAF_NODE	1019:12	1019:12	11	sp
LEAF_NODE	1019:14	1019:14	9	)
LEAF_NODE	1019:15	1019:15	7	;
EXPR_STATEMENT	1020:2	1020:20	6	tif -> tif_data = NULL ;
EXPR	1020:2	1020:2	7	tif -> tif_data = NULL
ASSIGN	1020:2	1020:16	8	tif -> tif_data = NULL
LVAL	1020:2	1020:2	9	tif -> tif_data
FIELD	1020:2	1020:7	10	tif -> tif_data
LEAF_NODE	1020:2	1020:2	11	tif
LEAF_NODE	1020:5	1020:5	11	->
LEAF_NODE	1020:7	1020:7	11	tif_data
ASSIGN_OP	1020:15	1020:15	9	=
LEAF_NODE	1020:15	1020:15	10	=
RVAL	1020:16	1020:16	9	NULL
FIELD	1020:16	1020:16	10	NULL
LEAF_NODE	1020:16	1020:16	11	NULL
LEAF_NODE	1020:20	1020:20	7	;
EXPR_STATEMENT	1021:2	1021:38	6	_TIFFSetDefaultCompressionState ( tif ) ;
EXPR	1021:2	1021:2	7	_TIFFSetDefaultCompressionState ( tif )
FUNCTION_CALL	1021:2	1021:37	8	_TIFFSetDefaultCompressionState ( tif )
CALLEE	1021:2	1021:2	9	_TIFFSetDefaultCompressionState
LEAF_NODE	1021:2	1021:2	10	_TIFFSetDefaultCompressionState
LEAF_NODE	1021:33	1021:33	9	(
ARGUMENT	1021:34	1021:34	9	tif
FIELD	1021:34	1021:34	10	tif
LEAF_NODE	1021:34	1021:34	11	tif
LEAF_NODE	1021:37	1021:37	9	)
LEAF_NODE	1021:38	1021:38	7	;
LEAF_NODE	1022:1	1022:1	5	}
LEAF_NODE	1023:0	1023:0	2	}
FUNCTION_DEF	1025:0	1077:0	1	
RETURN_TYPE	1025:0	1025:7	2	static void
LEAF_NODE	1025:0	1025:0	3	static
TYPE_NAME	1025:7	1025:7	3	void
LEAF_NODE	1025:7	1025:7	4	void
FUNCTION_NAME	1026:0	1026:0	2	OJPEGSubsamplingCorrect
LEAF_NODE	1026:0	1026:0	3	OJPEGSubsamplingCorrect
PARAMETER_LIST	1026:23	1026:33	2	( TIFF * tif )
LEAF_NODE	1026:23	1026:23	3	(
PARAMETER_DECL	1026:24	1026:30	3	TIFF * tif
TYPE	1026:24	1026:28	4	TIFF *
TYPE_NAME	1026:24	1026:24	5	TIFF
LEAF_NODE	1026:24	1026:24	6	TIFF
POINTER	1026:28	1026:28	5	*
LEAF_NODE	1026:28	1026:28	6	*
NAME	1026:30	1026:30	4	tif
LEAF_NODE	1026:30	1026:30	5	tif
LEAF_NODE	1026:33	1026:33	3	)
LEAF_NODE	1027:0	1027:0	2	{
STATEMENTS	1028:1	1076:1	2	
LEAF_NODE	1028:1	1028:1	3	static
SIMPLE_DECL	1028:8	1028:53	3	const char [ ] module ; module = "OJPEGSubsamplingCorrect" ;
VAR_DECL	1028:8	1028:19	4	const char [ ] module ; module = "OJPEGSubsamplingCorrect"
TYPE	1028:8	1028:25	5	const char [ ]
TYPE_NAME	1028:8	1028:14	6	const char
LEAF_NODE	1028:8	1028:8	7	const
LEAF_NODE	1028:14	1028:14	7	char
TYPE_SUFFIX	1028:25	1028:26	6	[ ]
LEAF_NODE	1028:25	1028:25	7	[
LEAF_NODE	1028:26	1028:26	7	]
NAME	1028:19	1028:19	5	module
LEAF_NODE	1028:19	1028:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1028:19	1028:19	5	module = "OJPEGSubsamplingCorrect"
ASSIGN	1028:19	1028:28	6	module = "OJPEGSubsamplingCorrect"
LVAL	1028:19	1028:19	7	module
NAME	1028:19	1028:19	8	module
LEAF_NODE	1028:19	1028:19	9	module
ASSIGN_OP	1028:27	1028:27	7	=
LEAF_NODE	1028:27	1028:27	8	=
RVAL	1028:28	1028:28	7	"OJPEGSubsamplingCorrect"
FIELD	1028:28	1028:28	8	"OJPEGSubsamplingCorrect"
LEAF_NODE	1028:28	1028:28	9	"OJPEGSubsamplingCorrect"
LEAF_NODE	1028:53	1028:53	4	;
SIMPLE_DECL	1029:1	1029:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1029:1	1029:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1029:1	1029:11	5	OJPEGState *
TYPE_NAME	1029:1	1029:1	6	OJPEGState
LEAF_NODE	1029:1	1029:1	7	OJPEGState
POINTER	1029:11	1029:11	6	*
LEAF_NODE	1029:11	1029:11	7	*
NAME	1029:13	1029:13	5	sp
LEAF_NODE	1029:13	1029:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1029:13	1029:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1029:13	1029:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1029:13	1029:13	7	sp
NAME	1029:13	1029:13	8	sp
LEAF_NODE	1029:13	1029:13	9	sp
ASSIGN_OP	1029:15	1029:15	7	=
LEAF_NODE	1029:15	1029:15	8	=
RVAL	1029:16	1029:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1029:16	1029:16	8	(
TYPE_NAME	1029:17	1029:17	8	OJPEGState
LEAF_NODE	1029:17	1029:17	9	OJPEGState
LEAF_NODE	1029:27	1029:27	8	*
LEAF_NODE	1029:28	1029:28	8	)
FIELD	1029:29	1029:34	8	tif -> tif_data
LEAF_NODE	1029:29	1029:29	9	tif
LEAF_NODE	1029:32	1029:32	9	->
LEAF_NODE	1029:34	1029:34	9	tif_data
LEAF_NODE	1029:42	1029:42	4	;
SIMPLE_DECL	1030:1	1030:9	3	uint8 mh ;
VAR_DECL	1030:1	1030:7	4	uint8 mh
TYPE	1030:1	1030:1	5	uint8
TYPE_NAME	1030:1	1030:1	6	uint8
LEAF_NODE	1030:1	1030:1	7	uint8
NAME	1030:7	1030:7	5	mh
LEAF_NODE	1030:7	1030:7	6	mh
LEAF_NODE	1030:9	1030:9	4	;
SIMPLE_DECL	1031:1	1031:9	3	uint8 mv ;
VAR_DECL	1031:1	1031:7	4	uint8 mv
TYPE	1031:1	1031:1	5	uint8
TYPE_NAME	1031:1	1031:1	6	uint8
LEAF_NODE	1031:1	1031:1	7	uint8
NAME	1031:7	1031:7	5	mv
LEAF_NODE	1031:7	1031:7	6	mv
LEAF_NODE	1031:9	1031:9	4	;
EXPR_STATEMENT	1033:1	1033:39	3	assert ( sp -> subsamplingcorrect_done == 0 ) ;
EXPR	1033:1	1033:1	4	assert ( sp -> subsamplingcorrect_done == 0 )
FUNCTION_CALL	1033:1	1033:38	5	assert ( sp -> subsamplingcorrect_done == 0 )
CALLEE	1033:1	1033:1	6	assert
LEAF_NODE	1033:1	1033:1	7	assert
LEAF_NODE	1033:7	1033:7	6	(
ARGUMENT	1033:8	1033:37	6	sp -> subsamplingcorrect_done == 0
FIELD	1033:8	1033:12	7	sp -> subsamplingcorrect_done
LEAF_NODE	1033:8	1033:8	8	sp
LEAF_NODE	1033:10	1033:10	8	->
LEAF_NODE	1033:12	1033:12	8	subsamplingcorrect_done
EQ_OPERATOR	1033:35	1033:35	7	==
LEAF_NODE	1033:35	1033:35	8	==
FIELD	1033:37	1033:37	7	0
LEAF_NODE	1033:37	1033:37	8	0
LEAF_NODE	1033:38	1033:38	6	)
LEAF_NODE	1033:39	1033:39	4	;
SELECTION	1034:1	1036:1	3	
KEYWORD	1034:1	1034:1	4	if
LEAF_NODE	1034:1	1034:1	5	if
LEAF_NODE	1034:4	1034:4	4	(
CONDITION	1034:5	1034:5	4	( tif -> tif_dir . td_samplesperpixel != 3 ) || ( ( tif -> tif_dir . td_photometric != PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_photometric != PHOTOMETRIC_ITULAB ) )
EXPR	1034:5	1034:5	5	( tif -> tif_dir . td_samplesperpixel != 3 ) || ( ( tif -> tif_dir . td_photometric != PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_photometric != PHOTOMETRIC_ITULAB ) )
OR	1034:5	1034:45	6	( tif -> tif_dir . td_samplesperpixel != 3 ) || ( ( tif -> tif_dir . td_photometric != PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_photometric != PHOTOMETRIC_ITULAB ) )
EXPR	1034:5	1034:40	7	( tif -> tif_dir . td_samplesperpixel != 3 )
LEAF_NODE	1034:5	1034:5	8	(
FIELD	1034:6	1034:19	8	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1034:6	1034:6	9	tif
LEAF_NODE	1034:9	1034:9	9	->
LEAF_NODE	1034:11	1034:11	9	tif_dir
LEAF_NODE	1034:18	1034:18	9	.
LEAF_NODE	1034:19	1034:19	9	td_samplesperpixel
EQ_OPERATOR	1034:37	1034:37	8	!=
LEAF_NODE	1034:37	1034:37	9	!=
FIELD	1034:39	1034:39	8	3
LEAF_NODE	1034:39	1034:39	9	3
LEAF_NODE	1034:40	1034:40	8	)
LEAF_NODE	1034:42	1034:42	7	||
EXPR	1034:45	1035:54	7	( ( tif -> tif_dir . td_photometric != PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_photometric != PHOTOMETRIC_ITULAB ) )
LEAF_NODE	1034:45	1034:45	8	(
AND	1034:46	1035:5	8	( tif -> tif_dir . td_photometric != PHOTOMETRIC_YCBCR ) && ( tif -> tif_dir . td_photometric != PHOTOMETRIC_ITULAB )
EXPR	1034:46	1034:93	9	( tif -> tif_dir . td_photometric != PHOTOMETRIC_YCBCR )
LEAF_NODE	1034:46	1034:46	10	(
FIELD	1034:47	1034:60	10	tif -> tif_dir . td_photometric
LEAF_NODE	1034:47	1034:47	11	tif
LEAF_NODE	1034:50	1034:50	11	->
LEAF_NODE	1034:52	1034:52	11	tif_dir
LEAF_NODE	1034:59	1034:59	11	.
LEAF_NODE	1034:60	1034:60	11	td_photometric
EQ_OPERATOR	1034:74	1034:74	10	!=
LEAF_NODE	1034:74	1034:74	11	!=
FIELD	1034:76	1034:76	10	PHOTOMETRIC_YCBCR
LEAF_NODE	1034:76	1034:76	11	PHOTOMETRIC_YCBCR
LEAF_NODE	1034:93	1034:93	10	)
LEAF_NODE	1034:95	1034:95	9	&&
EXPR	1035:5	1035:53	9	( tif -> tif_dir . td_photometric != PHOTOMETRIC_ITULAB )
LEAF_NODE	1035:5	1035:5	10	(
FIELD	1035:6	1035:19	10	tif -> tif_dir . td_photometric
LEAF_NODE	1035:6	1035:6	11	tif
LEAF_NODE	1035:9	1035:9	11	->
LEAF_NODE	1035:11	1035:11	11	tif_dir
LEAF_NODE	1035:18	1035:18	11	.
LEAF_NODE	1035:19	1035:19	11	td_photometric
EQ_OPERATOR	1035:33	1035:33	10	!=
LEAF_NODE	1035:33	1035:33	11	!=
FIELD	1035:35	1035:35	10	PHOTOMETRIC_ITULAB
LEAF_NODE	1035:35	1035:35	11	PHOTOMETRIC_ITULAB
LEAF_NODE	1035:53	1035:53	10	)
LEAF_NODE	1035:54	1035:54	8	)
LEAF_NODE	1035:55	1035:55	4	)
STATEMENTS	1036:1	1042:1	4	
LEAF_NODE	1036:1	1036:1	5	{
STATEMENTS	1037:2	1041:2	5	
SELECTION	1037:2	1038:3	6	
KEYWORD	1037:2	1037:2	7	if
LEAF_NODE	1037:2	1037:2	8	if
LEAF_NODE	1037:5	1037:5	7	(
CONDITION	1037:6	1037:6	7	sp -> subsampling_tag != 0
EXPR	1037:6	1037:27	8	sp -> subsampling_tag != 0
FIELD	1037:6	1037:10	9	sp -> subsampling_tag
LEAF_NODE	1037:6	1037:6	10	sp
LEAF_NODE	1037:8	1037:8	10	->
LEAF_NODE	1037:10	1037:10	10	subsampling_tag
EQ_OPERATOR	1037:25	1037:25	9	!=
LEAF_NODE	1037:25	1037:25	10	!=
FIELD	1037:27	1037:27	9	0
LEAF_NODE	1037:27	1037:27	10	0
LEAF_NODE	1037:28	1037:28	7	)
STATEMENTS	1038:3	1038:3	7	
EXPR_STATEMENT	1038:3	1038:123	8	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag not appropriate for this Photometric and/or SamplesPerPixel" ) ;
EXPR	1038:3	1038:3	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag not appropriate for this Photometric and/or SamplesPerPixel" )
FUNCTION_CALL	1038:3	1038:122	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag not appropriate for this Photometric and/or SamplesPerPixel" )
CALLEE	1038:3	1038:3	11	TIFFWarningExt
LEAF_NODE	1038:3	1038:3	12	TIFFWarningExt
LEAF_NODE	1038:17	1038:17	11	(
ARGUMENT	1038:18	1038:18	11	tif -> tif_clientdata
FIELD	1038:18	1038:23	12	tif -> tif_clientdata
LEAF_NODE	1038:18	1038:18	13	tif
LEAF_NODE	1038:21	1038:21	13	->
LEAF_NODE	1038:23	1038:23	13	tif_clientdata
LEAF_NODE	1038:37	1038:37	11	,
ARGUMENT	1038:38	1038:38	11	module
FIELD	1038:38	1038:38	12	module
LEAF_NODE	1038:38	1038:38	13	module
LEAF_NODE	1038:44	1038:44	11	,
ARGUMENT	1038:45	1038:45	11	"Subsampling tag not appropriate for this Photometric and/or SamplesPerPixel"
FIELD	1038:45	1038:45	12	"Subsampling tag not appropriate for this Photometric and/or SamplesPerPixel"
LEAF_NODE	1038:45	1038:45	13	"Subsampling tag not appropriate for this Photometric and/or SamplesPerPixel"
LEAF_NODE	1038:122	1038:122	11	)
LEAF_NODE	1038:123	1038:123	9	;
EXPR_STATEMENT	1039:2	1039:23	6	sp -> subsampling_hor = 1 ;
EXPR	1039:2	1039:2	7	sp -> subsampling_hor = 1
ASSIGN	1039:2	1039:22	8	sp -> subsampling_hor = 1
LVAL	1039:2	1039:2	9	sp -> subsampling_hor
FIELD	1039:2	1039:6	10	sp -> subsampling_hor
LEAF_NODE	1039:2	1039:2	11	sp
LEAF_NODE	1039:4	1039:4	11	->
LEAF_NODE	1039:6	1039:6	11	subsampling_hor
ASSIGN_OP	1039:21	1039:21	9	=
LEAF_NODE	1039:21	1039:21	10	=
RVAL	1039:22	1039:22	9	1
FIELD	1039:22	1039:22	10	1
LEAF_NODE	1039:22	1039:22	11	1
LEAF_NODE	1039:23	1039:23	7	;
EXPR_STATEMENT	1040:2	1040:23	6	sp -> subsampling_ver = 1 ;
EXPR	1040:2	1040:2	7	sp -> subsampling_ver = 1
ASSIGN	1040:2	1040:22	8	sp -> subsampling_ver = 1
LVAL	1040:2	1040:2	9	sp -> subsampling_ver
FIELD	1040:2	1040:6	10	sp -> subsampling_ver
LEAF_NODE	1040:2	1040:2	11	sp
LEAF_NODE	1040:4	1040:4	11	->
LEAF_NODE	1040:6	1040:6	11	subsampling_ver
ASSIGN_OP	1040:21	1040:21	9	=
LEAF_NODE	1040:21	1040:21	10	=
RVAL	1040:22	1040:22	9	1
FIELD	1040:22	1040:22	10	1
LEAF_NODE	1040:22	1040:22	11	1
LEAF_NODE	1040:23	1040:23	7	;
EXPR_STATEMENT	1041:2	1041:60	6	sp -> subsampling_force_desubsampling_inside_decompression = 0 ;
EXPR	1041:2	1041:2	7	sp -> subsampling_force_desubsampling_inside_decompression = 0
ASSIGN	1041:2	1041:59	8	sp -> subsampling_force_desubsampling_inside_decompression = 0
LVAL	1041:2	1041:2	9	sp -> subsampling_force_desubsampling_inside_decompression
FIELD	1041:2	1041:6	10	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1041:2	1041:2	11	sp
LEAF_NODE	1041:4	1041:4	11	->
LEAF_NODE	1041:6	1041:6	11	subsampling_force_desubsampling_inside_decompression
ASSIGN_OP	1041:58	1041:58	9	=
LEAF_NODE	1041:58	1041:58	10	=
RVAL	1041:59	1041:59	9	0
FIELD	1041:59	1041:59	10	0
LEAF_NODE	1041:59	1041:59	11	0
LEAF_NODE	1041:60	1041:60	7	;
LEAF_NODE	1042:1	1042:1	5	}
SELECTION	1043:1	1044:1	3	
KEYWORD	1043:1	1043:1	4	else
LEAF_NODE	1043:1	1043:1	5	else
STATEMENTS	1044:1	1075:1	4	
LEAF_NODE	1044:1	1044:1	5	{
STATEMENTS	1045:2	1070:2	5	
EXPR_STATEMENT	1045:2	1045:31	6	sp -> subsamplingcorrect_done = 1 ;
EXPR	1045:2	1045:2	7	sp -> subsamplingcorrect_done = 1
ASSIGN	1045:2	1045:30	8	sp -> subsamplingcorrect_done = 1
LVAL	1045:2	1045:2	9	sp -> subsamplingcorrect_done
FIELD	1045:2	1045:6	10	sp -> subsamplingcorrect_done
LEAF_NODE	1045:2	1045:2	11	sp
LEAF_NODE	1045:4	1045:4	11	->
LEAF_NODE	1045:6	1045:6	11	subsamplingcorrect_done
ASSIGN_OP	1045:29	1045:29	9	=
LEAF_NODE	1045:29	1045:29	10	=
RVAL	1045:30	1045:30	9	1
FIELD	1045:30	1045:30	10	1
LEAF_NODE	1045:30	1045:30	11	1
LEAF_NODE	1045:31	1045:31	7	;
EXPR_STATEMENT	1046:2	1046:24	6	mh = sp -> subsampling_hor ;
EXPR	1046:2	1046:2	7	mh = sp -> subsampling_hor
ASSIGN	1046:2	1046:5	8	mh = sp -> subsampling_hor
LVAL	1046:2	1046:2	9	mh
FIELD	1046:2	1046:2	10	mh
LEAF_NODE	1046:2	1046:2	11	mh
ASSIGN_OP	1046:4	1046:4	9	=
LEAF_NODE	1046:4	1046:4	10	=
RVAL	1046:5	1046:5	9	sp -> subsampling_hor
FIELD	1046:5	1046:9	10	sp -> subsampling_hor
LEAF_NODE	1046:5	1046:5	11	sp
LEAF_NODE	1046:7	1046:7	11	->
LEAF_NODE	1046:9	1046:9	11	subsampling_hor
LEAF_NODE	1046:24	1046:24	7	;
EXPR_STATEMENT	1047:2	1047:24	6	mv = sp -> subsampling_ver ;
EXPR	1047:2	1047:2	7	mv = sp -> subsampling_ver
ASSIGN	1047:2	1047:5	8	mv = sp -> subsampling_ver
LVAL	1047:2	1047:2	9	mv
FIELD	1047:2	1047:2	10	mv
LEAF_NODE	1047:2	1047:2	11	mv
ASSIGN_OP	1047:4	1047:4	9	=
LEAF_NODE	1047:4	1047:4	10	=
RVAL	1047:5	1047:5	9	sp -> subsampling_ver
FIELD	1047:5	1047:9	10	sp -> subsampling_ver
LEAF_NODE	1047:5	1047:5	11	sp
LEAF_NODE	1047:7	1047:7	11	->
LEAF_NODE	1047:9	1047:9	11	subsampling_ver
LEAF_NODE	1047:24	1047:24	7	;
EXPR_STATEMENT	1048:2	1048:26	6	sp -> subsamplingcorrect = 1 ;
EXPR	1048:2	1048:2	7	sp -> subsamplingcorrect = 1
ASSIGN	1048:2	1048:25	8	sp -> subsamplingcorrect = 1
LVAL	1048:2	1048:2	9	sp -> subsamplingcorrect
FIELD	1048:2	1048:6	10	sp -> subsamplingcorrect
LEAF_NODE	1048:2	1048:2	11	sp
LEAF_NODE	1048:4	1048:4	11	->
LEAF_NODE	1048:6	1048:6	11	subsamplingcorrect
ASSIGN_OP	1048:24	1048:24	9	=
LEAF_NODE	1048:24	1048:24	10	=
RVAL	1048:25	1048:25	9	1
FIELD	1048:25	1048:25	10	1
LEAF_NODE	1048:25	1048:25	11	1
LEAF_NODE	1048:26	1048:26	7	;
EXPR_STATEMENT	1049:2	1049:29	6	OJPEGReadHeaderInfoSec ( tif ) ;
EXPR	1049:2	1049:2	7	OJPEGReadHeaderInfoSec ( tif )
FUNCTION_CALL	1049:2	1049:28	8	OJPEGReadHeaderInfoSec ( tif )
CALLEE	1049:2	1049:2	9	OJPEGReadHeaderInfoSec
LEAF_NODE	1049:2	1049:2	10	OJPEGReadHeaderInfoSec
LEAF_NODE	1049:24	1049:24	9	(
ARGUMENT	1049:25	1049:25	9	tif
FIELD	1049:25	1049:25	10	tif
LEAF_NODE	1049:25	1049:25	11	tif
LEAF_NODE	1049:28	1049:28	9	)
LEAF_NODE	1049:29	1049:29	7	;
SELECTION	1050:2	1051:2	6	
KEYWORD	1050:2	1050:2	7	if
LEAF_NODE	1050:2	1050:2	8	if
LEAF_NODE	1050:5	1050:5	7	(
CONDITION	1050:6	1050:6	7	sp -> subsampling_force_desubsampling_inside_decompression != 0
EXPR	1050:6	1050:64	8	sp -> subsampling_force_desubsampling_inside_decompression != 0
FIELD	1050:6	1050:10	9	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1050:6	1050:6	10	sp
LEAF_NODE	1050:8	1050:8	10	->
LEAF_NODE	1050:10	1050:10	10	subsampling_force_desubsampling_inside_decompression
EQ_OPERATOR	1050:62	1050:62	9	!=
LEAF_NODE	1050:62	1050:62	10	!=
FIELD	1050:64	1050:64	9	0
LEAF_NODE	1050:64	1050:64	10	0
LEAF_NODE	1050:65	1050:65	7	)
STATEMENTS	1051:2	1054:2	7	
LEAF_NODE	1051:2	1051:2	8	{
STATEMENTS	1052:3	1053:3	8	
EXPR_STATEMENT	1052:3	1052:24	9	sp -> subsampling_hor = 1 ;
EXPR	1052:3	1052:3	10	sp -> subsampling_hor = 1
ASSIGN	1052:3	1052:23	11	sp -> subsampling_hor = 1
LVAL	1052:3	1052:3	12	sp -> subsampling_hor
FIELD	1052:3	1052:7	13	sp -> subsampling_hor
LEAF_NODE	1052:3	1052:3	14	sp
LEAF_NODE	1052:5	1052:5	14	->
LEAF_NODE	1052:7	1052:7	14	subsampling_hor
ASSIGN_OP	1052:22	1052:22	12	=
LEAF_NODE	1052:22	1052:22	13	=
RVAL	1052:23	1052:23	12	1
FIELD	1052:23	1052:23	13	1
LEAF_NODE	1052:23	1052:23	14	1
LEAF_NODE	1052:24	1052:24	10	;
EXPR_STATEMENT	1053:3	1053:24	9	sp -> subsampling_ver = 1 ;
EXPR	1053:3	1053:3	10	sp -> subsampling_ver = 1
ASSIGN	1053:3	1053:23	11	sp -> subsampling_ver = 1
LVAL	1053:3	1053:3	12	sp -> subsampling_ver
FIELD	1053:3	1053:7	13	sp -> subsampling_ver
LEAF_NODE	1053:3	1053:3	14	sp
LEAF_NODE	1053:5	1053:5	14	->
LEAF_NODE	1053:7	1053:7	14	subsampling_ver
ASSIGN_OP	1053:22	1053:22	12	=
LEAF_NODE	1053:22	1053:22	13	=
RVAL	1053:23	1053:23	12	1
FIELD	1053:23	1053:23	13	1
LEAF_NODE	1053:23	1053:23	14	1
LEAF_NODE	1053:24	1053:24	10	;
LEAF_NODE	1054:2	1054:2	8	}
EXPR_STATEMENT	1055:2	1055:26	6	sp -> subsamplingcorrect = 0 ;
EXPR	1055:2	1055:2	7	sp -> subsamplingcorrect = 0
ASSIGN	1055:2	1055:25	8	sp -> subsamplingcorrect = 0
LVAL	1055:2	1055:2	9	sp -> subsamplingcorrect
FIELD	1055:2	1055:6	10	sp -> subsamplingcorrect
LEAF_NODE	1055:2	1055:2	11	sp
LEAF_NODE	1055:4	1055:4	11	->
LEAF_NODE	1055:6	1055:6	11	subsamplingcorrect
ASSIGN_OP	1055:24	1055:24	9	=
LEAF_NODE	1055:24	1055:24	10	=
RVAL	1055:25	1055:25	9	0
FIELD	1055:25	1055:25	10	0
LEAF_NODE	1055:25	1055:25	11	0
LEAF_NODE	1055:26	1055:26	7	;
SELECTION	1056:2	1057:2	6	
KEYWORD	1056:2	1056:2	7	if
LEAF_NODE	1056:2	1056:2	8	if
LEAF_NODE	1056:5	1056:5	7	(
CONDITION	1056:6	1056:6	7	( ( sp -> subsampling_hor != mh ) || ( sp -> subsampling_ver != mv ) ) && ( sp -> subsampling_force_desubsampling_inside_decompression == 0 )
EXPR	1056:6	1056:6	8	( ( sp -> subsampling_hor != mh ) || ( sp -> subsampling_ver != mv ) ) && ( sp -> subsampling_force_desubsampling_inside_decompression == 0 )
AND	1056:6	1056:66	9	( ( sp -> subsampling_hor != mh ) || ( sp -> subsampling_ver != mv ) ) && ( sp -> subsampling_force_desubsampling_inside_decompression == 0 )
EXPR	1056:6	1056:61	10	( ( sp -> subsampling_hor != mh ) || ( sp -> subsampling_ver != mv ) )
LEAF_NODE	1056:6	1056:6	11	(
OR	1056:7	1056:36	11	( sp -> subsampling_hor != mh ) || ( sp -> subsampling_ver != mv )
EXPR	1056:7	1056:31	12	( sp -> subsampling_hor != mh )
LEAF_NODE	1056:7	1056:7	13	(
FIELD	1056:8	1056:12	13	sp -> subsampling_hor
LEAF_NODE	1056:8	1056:8	14	sp
LEAF_NODE	1056:10	1056:10	14	->
LEAF_NODE	1056:12	1056:12	14	subsampling_hor
EQ_OPERATOR	1056:27	1056:27	13	!=
LEAF_NODE	1056:27	1056:27	14	!=
FIELD	1056:29	1056:29	13	mh
LEAF_NODE	1056:29	1056:29	14	mh
LEAF_NODE	1056:31	1056:31	13	)
LEAF_NODE	1056:33	1056:33	12	||
EXPR	1056:36	1056:60	12	( sp -> subsampling_ver != mv )
LEAF_NODE	1056:36	1056:36	13	(
FIELD	1056:37	1056:41	13	sp -> subsampling_ver
LEAF_NODE	1056:37	1056:37	14	sp
LEAF_NODE	1056:39	1056:39	14	->
LEAF_NODE	1056:41	1056:41	14	subsampling_ver
EQ_OPERATOR	1056:56	1056:56	13	!=
LEAF_NODE	1056:56	1056:56	14	!=
FIELD	1056:58	1056:58	13	mv
LEAF_NODE	1056:58	1056:58	14	mv
LEAF_NODE	1056:60	1056:60	13	)
LEAF_NODE	1056:61	1056:61	11	)
LEAF_NODE	1056:63	1056:63	10	&&
EXPR	1056:66	1056:126	10	( sp -> subsampling_force_desubsampling_inside_decompression == 0 )
LEAF_NODE	1056:66	1056:66	11	(
FIELD	1056:67	1056:71	11	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1056:67	1056:67	12	sp
LEAF_NODE	1056:69	1056:69	12	->
LEAF_NODE	1056:71	1056:71	12	subsampling_force_desubsampling_inside_decompression
EQ_OPERATOR	1056:123	1056:123	11	==
LEAF_NODE	1056:123	1056:123	12	==
FIELD	1056:125	1056:125	11	0
LEAF_NODE	1056:125	1056:125	12	0
LEAF_NODE	1056:126	1056:126	11	)
LEAF_NODE	1056:127	1056:127	7	)
STATEMENTS	1057:2	1062:2	7	
LEAF_NODE	1057:2	1057:2	8	{
STATEMENTS	1058:3	1060:3	8	
SELECTION	1058:3	1059:4	9	
KEYWORD	1058:3	1058:3	10	if
LEAF_NODE	1058:3	1058:3	11	if
LEAF_NODE	1058:6	1058:6	10	(
CONDITION	1058:7	1058:7	10	sp -> subsampling_tag == 0
EXPR	1058:7	1058:28	11	sp -> subsampling_tag == 0
FIELD	1058:7	1058:11	12	sp -> subsampling_tag
LEAF_NODE	1058:7	1058:7	13	sp
LEAF_NODE	1058:9	1058:9	13	->
LEAF_NODE	1058:11	1058:11	13	subsampling_tag
EQ_OPERATOR	1058:26	1058:26	12	==
LEAF_NODE	1058:26	1058:26	13	==
FIELD	1058:28	1058:28	12	0
LEAF_NODE	1058:28	1058:28	13	0
LEAF_NODE	1058:29	1058:29	10	)
STATEMENTS	1059:4	1059:4	10	
EXPR_STATEMENT	1059:4	1059:243	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag is not set, yet subsampling inside JPEG data [%d,%d] does not match default values [2,2]; assuming subsampling inside JPEG data is correct" , sp -> subsampling_hor , sp -> subsampling_ver ) ;
EXPR	1059:4	1059:4	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag is not set, yet subsampling inside JPEG data [%d,%d] does not match default values [2,2]; assuming subsampling inside JPEG data is correct" , sp -> subsampling_hor , sp -> subsampling_ver )
FUNCTION_CALL	1059:4	1059:242	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag is not set, yet subsampling inside JPEG data [%d,%d] does not match default values [2,2]; assuming subsampling inside JPEG data is correct" , sp -> subsampling_hor , sp -> subsampling_ver )
CALLEE	1059:4	1059:4	14	TIFFWarningExt
LEAF_NODE	1059:4	1059:4	15	TIFFWarningExt
LEAF_NODE	1059:18	1059:18	14	(
ARGUMENT	1059:19	1059:19	14	tif -> tif_clientdata
FIELD	1059:19	1059:24	15	tif -> tif_clientdata
LEAF_NODE	1059:19	1059:19	16	tif
LEAF_NODE	1059:22	1059:22	16	->
LEAF_NODE	1059:24	1059:24	16	tif_clientdata
LEAF_NODE	1059:38	1059:38	14	,
ARGUMENT	1059:39	1059:39	14	module
FIELD	1059:39	1059:39	15	module
LEAF_NODE	1059:39	1059:39	16	module
LEAF_NODE	1059:45	1059:45	14	,
ARGUMENT	1059:46	1059:46	14	"Subsampling tag is not set, yet subsampling inside JPEG data [%d,%d] does not match default values [2,2]; assuming subsampling inside JPEG data is correct"
FIELD	1059:46	1059:46	15	"Subsampling tag is not set, yet subsampling inside JPEG data [%d,%d] does not match default values [2,2]; assuming subsampling inside JPEG data is correct"
LEAF_NODE	1059:46	1059:46	16	"Subsampling tag is not set, yet subsampling inside JPEG data [%d,%d] does not match default values [2,2]; assuming subsampling inside JPEG data is correct"
LEAF_NODE	1059:202	1059:202	14	,
ARGUMENT	1059:203	1059:203	14	sp -> subsampling_hor
FIELD	1059:203	1059:207	15	sp -> subsampling_hor
LEAF_NODE	1059:203	1059:203	16	sp
LEAF_NODE	1059:205	1059:205	16	->
LEAF_NODE	1059:207	1059:207	16	subsampling_hor
LEAF_NODE	1059:222	1059:222	14	,
ARGUMENT	1059:223	1059:223	14	sp -> subsampling_ver
FIELD	1059:223	1059:227	15	sp -> subsampling_ver
LEAF_NODE	1059:223	1059:223	16	sp
LEAF_NODE	1059:225	1059:225	16	->
LEAF_NODE	1059:227	1059:227	16	subsampling_ver
LEAF_NODE	1059:242	1059:242	14	)
LEAF_NODE	1059:243	1059:243	12	;
SELECTION	1060:3	1061:4	9	
KEYWORD	1060:3	1060:3	10	else
LEAF_NODE	1060:3	1060:3	11	else
STATEMENTS	1061:4	1061:4	10	
EXPR_STATEMENT	1061:4	1061:227	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling inside JPEG data [%d,%d] does not match subsampling tag values [%d,%d]; assuming subsampling inside JPEG data is correct" , sp -> subsampling_hor , sp -> subsampling_ver , mh , mv ) ;
EXPR	1061:4	1061:4	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling inside JPEG data [%d,%d] does not match subsampling tag values [%d,%d]; assuming subsampling inside JPEG data is correct" , sp -> subsampling_hor , sp -> subsampling_ver , mh , mv )
FUNCTION_CALL	1061:4	1061:226	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling inside JPEG data [%d,%d] does not match subsampling tag values [%d,%d]; assuming subsampling inside JPEG data is correct" , sp -> subsampling_hor , sp -> subsampling_ver , mh , mv )
CALLEE	1061:4	1061:4	14	TIFFWarningExt
LEAF_NODE	1061:4	1061:4	15	TIFFWarningExt
LEAF_NODE	1061:18	1061:18	14	(
ARGUMENT	1061:19	1061:19	14	tif -> tif_clientdata
FIELD	1061:19	1061:24	15	tif -> tif_clientdata
LEAF_NODE	1061:19	1061:19	16	tif
LEAF_NODE	1061:22	1061:22	16	->
LEAF_NODE	1061:24	1061:24	16	tif_clientdata
LEAF_NODE	1061:38	1061:38	14	,
ARGUMENT	1061:39	1061:39	14	module
FIELD	1061:39	1061:39	15	module
LEAF_NODE	1061:39	1061:39	16	module
LEAF_NODE	1061:45	1061:45	14	,
ARGUMENT	1061:46	1061:46	14	"Subsampling inside JPEG data [%d,%d] does not match subsampling tag values [%d,%d]; assuming subsampling inside JPEG data is correct"
FIELD	1061:46	1061:46	15	"Subsampling inside JPEG data [%d,%d] does not match subsampling tag values [%d,%d]; assuming subsampling inside JPEG data is correct"
LEAF_NODE	1061:46	1061:46	16	"Subsampling inside JPEG data [%d,%d] does not match subsampling tag values [%d,%d]; assuming subsampling inside JPEG data is correct"
LEAF_NODE	1061:180	1061:180	14	,
ARGUMENT	1061:181	1061:181	14	sp -> subsampling_hor
FIELD	1061:181	1061:185	15	sp -> subsampling_hor
LEAF_NODE	1061:181	1061:181	16	sp
LEAF_NODE	1061:183	1061:183	16	->
LEAF_NODE	1061:185	1061:185	16	subsampling_hor
LEAF_NODE	1061:200	1061:200	14	,
ARGUMENT	1061:201	1061:201	14	sp -> subsampling_ver
FIELD	1061:201	1061:205	15	sp -> subsampling_ver
LEAF_NODE	1061:201	1061:201	16	sp
LEAF_NODE	1061:203	1061:203	16	->
LEAF_NODE	1061:205	1061:205	16	subsampling_ver
LEAF_NODE	1061:220	1061:220	14	,
ARGUMENT	1061:221	1061:221	14	mh
FIELD	1061:221	1061:221	15	mh
LEAF_NODE	1061:221	1061:221	16	mh
LEAF_NODE	1061:223	1061:223	14	,
ARGUMENT	1061:224	1061:224	14	mv
FIELD	1061:224	1061:224	15	mv
LEAF_NODE	1061:224	1061:224	16	mv
LEAF_NODE	1061:226	1061:226	14	)
LEAF_NODE	1061:227	1061:227	12	;
LEAF_NODE	1062:2	1062:2	8	}
SELECTION	1063:2	1064:2	6	
KEYWORD	1063:2	1063:2	7	if
LEAF_NODE	1063:2	1063:2	8	if
LEAF_NODE	1063:5	1063:5	7	(
CONDITION	1063:6	1063:6	7	sp -> subsampling_force_desubsampling_inside_decompression != 0
EXPR	1063:6	1063:64	8	sp -> subsampling_force_desubsampling_inside_decompression != 0
FIELD	1063:6	1063:10	9	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1063:6	1063:6	10	sp
LEAF_NODE	1063:8	1063:8	10	->
LEAF_NODE	1063:10	1063:10	10	subsampling_force_desubsampling_inside_decompression
EQ_OPERATOR	1063:62	1063:62	9	!=
LEAF_NODE	1063:62	1063:62	10	!=
FIELD	1063:64	1063:64	9	0
LEAF_NODE	1063:64	1063:64	10	0
LEAF_NODE	1063:65	1063:65	7	)
STATEMENTS	1064:2	1069:2	7	
LEAF_NODE	1064:2	1064:2	8	{
STATEMENTS	1065:3	1067:3	8	
SELECTION	1065:3	1066:4	9	
KEYWORD	1065:3	1065:3	10	if
LEAF_NODE	1065:3	1065:3	11	if
LEAF_NODE	1065:6	1065:6	10	(
CONDITION	1065:7	1065:7	10	sp -> subsampling_tag == 0
EXPR	1065:7	1065:28	11	sp -> subsampling_tag == 0
FIELD	1065:7	1065:11	12	sp -> subsampling_tag
LEAF_NODE	1065:7	1065:7	13	sp
LEAF_NODE	1065:9	1065:9	13	->
LEAF_NODE	1065:11	1065:11	13	subsampling_tag
EQ_OPERATOR	1065:26	1065:26	12	==
LEAF_NODE	1065:26	1065:26	13	==
FIELD	1065:28	1065:28	12	0
LEAF_NODE	1065:28	1065:28	13	0
LEAF_NODE	1065:29	1065:29	10	)
STATEMENTS	1066:4	1066:4	10	
EXPR_STATEMENT	1066:4	1066:278	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag is not set, yet subsampling inside JPEG data does not match default values [2,2] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression" ) ;
EXPR	1066:4	1066:4	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag is not set, yet subsampling inside JPEG data does not match default values [2,2] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression" )
FUNCTION_CALL	1066:4	1066:277	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling tag is not set, yet subsampling inside JPEG data does not match default values [2,2] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression" )
CALLEE	1066:4	1066:4	14	TIFFWarningExt
LEAF_NODE	1066:4	1066:4	15	TIFFWarningExt
LEAF_NODE	1066:18	1066:18	14	(
ARGUMENT	1066:19	1066:19	14	tif -> tif_clientdata
FIELD	1066:19	1066:24	15	tif -> tif_clientdata
LEAF_NODE	1066:19	1066:19	16	tif
LEAF_NODE	1066:22	1066:22	16	->
LEAF_NODE	1066:24	1066:24	16	tif_clientdata
LEAF_NODE	1066:38	1066:38	14	,
ARGUMENT	1066:39	1066:39	14	module
FIELD	1066:39	1066:39	15	module
LEAF_NODE	1066:39	1066:39	16	module
LEAF_NODE	1066:45	1066:45	14	,
ARGUMENT	1066:46	1066:46	14	"Subsampling tag is not set, yet subsampling inside JPEG data does not match default values [2,2] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression"
FIELD	1066:46	1066:46	15	"Subsampling tag is not set, yet subsampling inside JPEG data does not match default values [2,2] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression"
LEAF_NODE	1066:46	1066:46	16	"Subsampling tag is not set, yet subsampling inside JPEG data does not match default values [2,2] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression"
LEAF_NODE	1066:277	1066:277	14	)
LEAF_NODE	1066:278	1066:278	12	;
SELECTION	1067:3	1068:4	9	
KEYWORD	1067:3	1067:3	10	else
LEAF_NODE	1067:3	1067:3	11	else
STATEMENTS	1068:4	1068:4	10	
EXPR_STATEMENT	1068:4	1068:262	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling inside JPEG data does not match subsampling tag values [%d,%d] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression" , mh , mv ) ;
EXPR	1068:4	1068:4	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling inside JPEG data does not match subsampling tag values [%d,%d] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression" , mh , mv )
FUNCTION_CALL	1068:4	1068:261	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling inside JPEG data does not match subsampling tag values [%d,%d] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression" , mh , mv )
CALLEE	1068:4	1068:4	14	TIFFWarningExt
LEAF_NODE	1068:4	1068:4	15	TIFFWarningExt
LEAF_NODE	1068:18	1068:18	14	(
ARGUMENT	1068:19	1068:19	14	tif -> tif_clientdata
FIELD	1068:19	1068:24	15	tif -> tif_clientdata
LEAF_NODE	1068:19	1068:19	16	tif
LEAF_NODE	1068:22	1068:22	16	->
LEAF_NODE	1068:24	1068:24	16	tif_clientdata
LEAF_NODE	1068:38	1068:38	14	,
ARGUMENT	1068:39	1068:39	14	module
FIELD	1068:39	1068:39	15	module
LEAF_NODE	1068:39	1068:39	16	module
LEAF_NODE	1068:45	1068:45	14	,
ARGUMENT	1068:46	1068:46	14	"Subsampling inside JPEG data does not match subsampling tag values [%d,%d] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression"
FIELD	1068:46	1068:46	15	"Subsampling inside JPEG data does not match subsampling tag values [%d,%d] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression"
LEAF_NODE	1068:46	1068:46	16	"Subsampling inside JPEG data does not match subsampling tag values [%d,%d] (nor any other values allowed in TIFF); assuming subsampling inside JPEG data is correct and desubsampling inside JPEG decompression"
LEAF_NODE	1068:255	1068:255	14	,
ARGUMENT	1068:256	1068:256	14	mh
FIELD	1068:256	1068:256	15	mh
LEAF_NODE	1068:256	1068:256	16	mh
LEAF_NODE	1068:258	1068:258	14	,
ARGUMENT	1068:259	1068:259	14	mv
FIELD	1068:259	1068:259	15	mv
LEAF_NODE	1068:259	1068:259	16	mv
LEAF_NODE	1068:261	1068:261	14	)
LEAF_NODE	1068:262	1068:262	12	;
LEAF_NODE	1069:2	1069:2	8	}
SELECTION	1070:2	1071:2	6	
KEYWORD	1070:2	1070:2	7	if
LEAF_NODE	1070:2	1070:2	8	if
LEAF_NODE	1070:5	1070:5	7	(
CONDITION	1070:6	1070:6	7	sp -> subsampling_force_desubsampling_inside_decompression == 0
EXPR	1070:6	1070:64	8	sp -> subsampling_force_desubsampling_inside_decompression == 0
FIELD	1070:6	1070:10	9	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1070:6	1070:6	10	sp
LEAF_NODE	1070:8	1070:8	10	->
LEAF_NODE	1070:10	1070:10	10	subsampling_force_desubsampling_inside_decompression
EQ_OPERATOR	1070:62	1070:62	9	==
LEAF_NODE	1070:62	1070:62	10	==
FIELD	1070:64	1070:64	9	0
LEAF_NODE	1070:64	1070:64	10	0
LEAF_NODE	1070:65	1070:65	7	)
STATEMENTS	1071:2	1074:2	7	
LEAF_NODE	1071:2	1071:2	8	{
STATEMENTS	1072:3	1072:3	8	
SELECTION	1072:3	1073:4	9	
KEYWORD	1072:3	1072:3	10	if
LEAF_NODE	1072:3	1072:3	11	if
LEAF_NODE	1072:6	1072:6	10	(
CONDITION	1072:7	1072:7	10	sp -> subsampling_hor < sp -> subsampling_ver
EXPR	1072:7	1072:27	11	sp -> subsampling_hor < sp -> subsampling_ver
FIELD	1072:7	1072:11	12	sp -> subsampling_hor
LEAF_NODE	1072:7	1072:7	13	sp
LEAF_NODE	1072:9	1072:9	13	->
LEAF_NODE	1072:11	1072:11	13	subsampling_hor
REL_OPERATOR	1072:26	1072:26	12	<
LEAF_NODE	1072:26	1072:26	13	<
FIELD	1072:27	1072:31	12	sp -> subsampling_ver
LEAF_NODE	1072:27	1072:27	13	sp
LEAF_NODE	1072:29	1072:29	13	->
LEAF_NODE	1072:31	1072:31	13	subsampling_ver
LEAF_NODE	1072:46	1072:46	10	)
STATEMENTS	1073:4	1073:4	10	
EXPR_STATEMENT	1073:4	1073:139	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling values [%d,%d] are not allowed in TIFF" , sp -> subsampling_hor , sp -> subsampling_ver ) ;
EXPR	1073:4	1073:4	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling values [%d,%d] are not allowed in TIFF" , sp -> subsampling_hor , sp -> subsampling_ver )
FUNCTION_CALL	1073:4	1073:138	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Subsampling values [%d,%d] are not allowed in TIFF" , sp -> subsampling_hor , sp -> subsampling_ver )
CALLEE	1073:4	1073:4	14	TIFFWarningExt
LEAF_NODE	1073:4	1073:4	15	TIFFWarningExt
LEAF_NODE	1073:18	1073:18	14	(
ARGUMENT	1073:19	1073:19	14	tif -> tif_clientdata
FIELD	1073:19	1073:24	15	tif -> tif_clientdata
LEAF_NODE	1073:19	1073:19	16	tif
LEAF_NODE	1073:22	1073:22	16	->
LEAF_NODE	1073:24	1073:24	16	tif_clientdata
LEAF_NODE	1073:38	1073:38	14	,
ARGUMENT	1073:39	1073:39	14	module
FIELD	1073:39	1073:39	15	module
LEAF_NODE	1073:39	1073:39	16	module
LEAF_NODE	1073:45	1073:45	14	,
ARGUMENT	1073:46	1073:46	14	"Subsampling values [%d,%d] are not allowed in TIFF"
FIELD	1073:46	1073:46	15	"Subsampling values [%d,%d] are not allowed in TIFF"
LEAF_NODE	1073:46	1073:46	16	"Subsampling values [%d,%d] are not allowed in TIFF"
LEAF_NODE	1073:98	1073:98	14	,
ARGUMENT	1073:99	1073:99	14	sp -> subsampling_hor
FIELD	1073:99	1073:103	15	sp -> subsampling_hor
LEAF_NODE	1073:99	1073:99	16	sp
LEAF_NODE	1073:101	1073:101	16	->
LEAF_NODE	1073:103	1073:103	16	subsampling_hor
LEAF_NODE	1073:118	1073:118	14	,
ARGUMENT	1073:119	1073:119	14	sp -> subsampling_ver
FIELD	1073:119	1073:123	15	sp -> subsampling_ver
LEAF_NODE	1073:119	1073:119	16	sp
LEAF_NODE	1073:121	1073:121	16	->
LEAF_NODE	1073:123	1073:123	16	subsampling_ver
LEAF_NODE	1073:138	1073:138	14	)
LEAF_NODE	1073:139	1073:139	12	;
LEAF_NODE	1074:2	1074:2	8	}
LEAF_NODE	1075:1	1075:1	5	}
EXPR_STATEMENT	1076:1	1076:30	3	sp -> subsamplingcorrect_done = 1 ;
EXPR	1076:1	1076:1	4	sp -> subsamplingcorrect_done = 1
ASSIGN	1076:1	1076:29	5	sp -> subsamplingcorrect_done = 1
LVAL	1076:1	1076:1	6	sp -> subsamplingcorrect_done
FIELD	1076:1	1076:5	7	sp -> subsamplingcorrect_done
LEAF_NODE	1076:1	1076:1	8	sp
LEAF_NODE	1076:3	1076:3	8	->
LEAF_NODE	1076:5	1076:5	8	subsamplingcorrect_done
ASSIGN_OP	1076:28	1076:28	6	=
LEAF_NODE	1076:28	1076:28	7	=
RVAL	1076:29	1076:29	6	1
FIELD	1076:29	1076:29	7	1
LEAF_NODE	1076:29	1076:29	8	1
LEAF_NODE	1076:30	1076:30	4	;
LEAF_NODE	1077:0	1077:0	2	}
FUNCTION_DEF	1079:0	1145:0	1	
RETURN_TYPE	1079:0	1079:7	2	static int
LEAF_NODE	1079:0	1079:0	3	static
TYPE_NAME	1079:7	1079:7	3	int
LEAF_NODE	1079:7	1079:7	4	int
FUNCTION_NAME	1080:0	1080:0	2	OJPEGReadHeaderInfo
LEAF_NODE	1080:0	1080:0	3	OJPEGReadHeaderInfo
PARAMETER_LIST	1080:19	1080:29	2	( TIFF * tif )
LEAF_NODE	1080:19	1080:19	3	(
PARAMETER_DECL	1080:20	1080:26	3	TIFF * tif
TYPE	1080:20	1080:24	4	TIFF *
TYPE_NAME	1080:20	1080:20	5	TIFF
LEAF_NODE	1080:20	1080:20	6	TIFF
POINTER	1080:24	1080:24	5	*
LEAF_NODE	1080:24	1080:24	6	*
NAME	1080:26	1080:26	4	tif
LEAF_NODE	1080:26	1080:26	5	tif
LEAF_NODE	1080:29	1080:29	3	)
LEAF_NODE	1081:0	1081:0	2	{
STATEMENTS	1082:1	1144:1	2	
LEAF_NODE	1082:1	1082:1	3	static
SIMPLE_DECL	1082:8	1082:49	3	const char [ ] module ; module = "OJPEGReadHeaderInfo" ;
VAR_DECL	1082:8	1082:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfo"
TYPE	1082:8	1082:25	5	const char [ ]
TYPE_NAME	1082:8	1082:14	6	const char
LEAF_NODE	1082:8	1082:8	7	const
LEAF_NODE	1082:14	1082:14	7	char
TYPE_SUFFIX	1082:25	1082:26	6	[ ]
LEAF_NODE	1082:25	1082:25	7	[
LEAF_NODE	1082:26	1082:26	7	]
NAME	1082:19	1082:19	5	module
LEAF_NODE	1082:19	1082:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1082:19	1082:19	5	module = "OJPEGReadHeaderInfo"
ASSIGN	1082:19	1082:28	6	module = "OJPEGReadHeaderInfo"
LVAL	1082:19	1082:19	7	module
NAME	1082:19	1082:19	8	module
LEAF_NODE	1082:19	1082:19	9	module
ASSIGN_OP	1082:27	1082:27	7	=
LEAF_NODE	1082:27	1082:27	8	=
RVAL	1082:28	1082:28	7	"OJPEGReadHeaderInfo"
FIELD	1082:28	1082:28	8	"OJPEGReadHeaderInfo"
LEAF_NODE	1082:28	1082:28	9	"OJPEGReadHeaderInfo"
LEAF_NODE	1082:49	1082:49	4	;
SIMPLE_DECL	1083:1	1083:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1083:1	1083:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1083:1	1083:11	5	OJPEGState *
TYPE_NAME	1083:1	1083:1	6	OJPEGState
LEAF_NODE	1083:1	1083:1	7	OJPEGState
POINTER	1083:11	1083:11	6	*
LEAF_NODE	1083:11	1083:11	7	*
NAME	1083:13	1083:13	5	sp
LEAF_NODE	1083:13	1083:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1083:13	1083:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1083:13	1083:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1083:13	1083:13	7	sp
NAME	1083:13	1083:13	8	sp
LEAF_NODE	1083:13	1083:13	9	sp
ASSIGN_OP	1083:15	1083:15	7	=
LEAF_NODE	1083:15	1083:15	8	=
RVAL	1083:16	1083:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1083:16	1083:16	8	(
TYPE_NAME	1083:17	1083:17	8	OJPEGState
LEAF_NODE	1083:17	1083:17	9	OJPEGState
LEAF_NODE	1083:27	1083:27	8	*
LEAF_NODE	1083:28	1083:28	8	)
FIELD	1083:29	1083:34	8	tif -> tif_data
LEAF_NODE	1083:29	1083:29	9	tif
LEAF_NODE	1083:32	1083:32	9	->
LEAF_NODE	1083:34	1083:34	9	tif_data
LEAF_NODE	1083:42	1083:42	4	;
EXPR_STATEMENT	1084:1	1084:31	3	assert ( sp -> readheader_done == 0 ) ;
EXPR	1084:1	1084:1	4	assert ( sp -> readheader_done == 0 )
FUNCTION_CALL	1084:1	1084:30	5	assert ( sp -> readheader_done == 0 )
CALLEE	1084:1	1084:1	6	assert
LEAF_NODE	1084:1	1084:1	7	assert
LEAF_NODE	1084:7	1084:7	6	(
ARGUMENT	1084:8	1084:29	6	sp -> readheader_done == 0
FIELD	1084:8	1084:12	7	sp -> readheader_done
LEAF_NODE	1084:8	1084:8	8	sp
LEAF_NODE	1084:10	1084:10	8	->
LEAF_NODE	1084:12	1084:12	8	readheader_done
EQ_OPERATOR	1084:27	1084:27	7	==
LEAF_NODE	1084:27	1084:27	8	==
FIELD	1084:29	1084:29	7	0
LEAF_NODE	1084:29	1084:29	8	0
LEAF_NODE	1084:30	1084:30	6	)
LEAF_NODE	1084:31	1084:31	4	;
EXPR_STATEMENT	1085:1	1085:43	3	sp -> image_width = tif -> tif_dir . td_imagewidth ;
EXPR	1085:1	1085:1	4	sp -> image_width = tif -> tif_dir . td_imagewidth
ASSIGN	1085:1	1085:17	5	sp -> image_width = tif -> tif_dir . td_imagewidth
LVAL	1085:1	1085:1	6	sp -> image_width
FIELD	1085:1	1085:5	7	sp -> image_width
LEAF_NODE	1085:1	1085:1	8	sp
LEAF_NODE	1085:3	1085:3	8	->
LEAF_NODE	1085:5	1085:5	8	image_width
ASSIGN_OP	1085:16	1085:16	6	=
LEAF_NODE	1085:16	1085:16	7	=
RVAL	1085:17	1085:17	6	tif -> tif_dir . td_imagewidth
FIELD	1085:17	1085:30	7	tif -> tif_dir . td_imagewidth
LEAF_NODE	1085:17	1085:17	8	tif
LEAF_NODE	1085:20	1085:20	8	->
LEAF_NODE	1085:22	1085:22	8	tif_dir
LEAF_NODE	1085:29	1085:29	8	.
LEAF_NODE	1085:30	1085:30	8	td_imagewidth
LEAF_NODE	1085:43	1085:43	4	;
EXPR_STATEMENT	1086:1	1086:45	3	sp -> image_length = tif -> tif_dir . td_imagelength ;
EXPR	1086:1	1086:1	4	sp -> image_length = tif -> tif_dir . td_imagelength
ASSIGN	1086:1	1086:18	5	sp -> image_length = tif -> tif_dir . td_imagelength
LVAL	1086:1	1086:1	6	sp -> image_length
FIELD	1086:1	1086:5	7	sp -> image_length
LEAF_NODE	1086:1	1086:1	8	sp
LEAF_NODE	1086:3	1086:3	8	->
LEAF_NODE	1086:5	1086:5	8	image_length
ASSIGN_OP	1086:17	1086:17	6	=
LEAF_NODE	1086:17	1086:17	7	=
RVAL	1086:18	1086:18	6	tif -> tif_dir . td_imagelength
FIELD	1086:18	1086:31	7	tif -> tif_dir . td_imagelength
LEAF_NODE	1086:18	1086:18	8	tif
LEAF_NODE	1086:21	1086:21	8	->
LEAF_NODE	1086:23	1086:23	8	tif_dir
LEAF_NODE	1086:30	1086:30	8	.
LEAF_NODE	1086:31	1086:31	8	td_imagelength
LEAF_NODE	1086:45	1086:45	4	;
SELECTION	1087:1	1088:1	3	
KEYWORD	1087:1	1087:1	4	if
LEAF_NODE	1087:1	1087:1	5	if
LEAF_NODE	1087:4	1087:4	4	(
CONDITION	1087:5	1087:5	4	isTiled ( tif )
EXPR	1087:5	1087:5	5	isTiled ( tif )
FUNCTION_CALL	1087:5	1087:16	6	isTiled ( tif )
CALLEE	1087:5	1087:5	7	isTiled
LEAF_NODE	1087:5	1087:5	8	isTiled
LEAF_NODE	1087:12	1087:12	7	(
ARGUMENT	1087:13	1087:13	7	tif
FIELD	1087:13	1087:13	8	tif
LEAF_NODE	1087:13	1087:13	9	tif
LEAF_NODE	1087:16	1087:16	7	)
LEAF_NODE	1087:17	1087:17	4	)
STATEMENTS	1088:1	1092:1	4	
LEAF_NODE	1088:1	1088:1	5	{
STATEMENTS	1089:2	1091:2	5	
EXPR_STATEMENT	1089:2	1089:44	6	sp -> strile_width = tif -> tif_dir . td_tilewidth ;
EXPR	1089:2	1089:2	7	sp -> strile_width = tif -> tif_dir . td_tilewidth
ASSIGN	1089:2	1089:19	8	sp -> strile_width = tif -> tif_dir . td_tilewidth
LVAL	1089:2	1089:2	9	sp -> strile_width
FIELD	1089:2	1089:6	10	sp -> strile_width
LEAF_NODE	1089:2	1089:2	11	sp
LEAF_NODE	1089:4	1089:4	11	->
LEAF_NODE	1089:6	1089:6	11	strile_width
ASSIGN_OP	1089:18	1089:18	9	=
LEAF_NODE	1089:18	1089:18	10	=
RVAL	1089:19	1089:19	9	tif -> tif_dir . td_tilewidth
FIELD	1089:19	1089:32	10	tif -> tif_dir . td_tilewidth
LEAF_NODE	1089:19	1089:19	11	tif
LEAF_NODE	1089:22	1089:22	11	->
LEAF_NODE	1089:24	1089:24	11	tif_dir
LEAF_NODE	1089:31	1089:31	11	.
LEAF_NODE	1089:32	1089:32	11	td_tilewidth
LEAF_NODE	1089:44	1089:44	7	;
EXPR_STATEMENT	1090:2	1090:46	6	sp -> strile_length = tif -> tif_dir . td_tilelength ;
EXPR	1090:2	1090:2	7	sp -> strile_length = tif -> tif_dir . td_tilelength
ASSIGN	1090:2	1090:20	8	sp -> strile_length = tif -> tif_dir . td_tilelength
LVAL	1090:2	1090:2	9	sp -> strile_length
FIELD	1090:2	1090:6	10	sp -> strile_length
LEAF_NODE	1090:2	1090:2	11	sp
LEAF_NODE	1090:4	1090:4	11	->
LEAF_NODE	1090:6	1090:6	11	strile_length
ASSIGN_OP	1090:19	1090:19	9	=
LEAF_NODE	1090:19	1090:19	10	=
RVAL	1090:20	1090:20	9	tif -> tif_dir . td_tilelength
FIELD	1090:20	1090:33	10	tif -> tif_dir . td_tilelength
LEAF_NODE	1090:20	1090:20	11	tif
LEAF_NODE	1090:23	1090:23	11	->
LEAF_NODE	1090:25	1090:25	11	tif_dir
LEAF_NODE	1090:32	1090:32	11	.
LEAF_NODE	1090:33	1090:33	11	td_tilelength
LEAF_NODE	1090:46	1090:46	7	;
EXPR_STATEMENT	1091:2	1091:102	6	sp -> strile_length_total = ( ( sp -> image_length + sp -> strile_length - 1 ) / sp -> strile_length ) * sp -> strile_length ;
EXPR	1091:2	1091:2	7	sp -> strile_length_total = ( ( sp -> image_length + sp -> strile_length - 1 ) / sp -> strile_length ) * sp -> strile_length
ASSIGN	1091:2	1091:26	8	sp -> strile_length_total = ( ( sp -> image_length + sp -> strile_length - 1 ) / sp -> strile_length ) * sp -> strile_length
LVAL	1091:2	1091:2	9	sp -> strile_length_total
FIELD	1091:2	1091:6	10	sp -> strile_length_total
LEAF_NODE	1091:2	1091:2	11	sp
LEAF_NODE	1091:4	1091:4	11	->
LEAF_NODE	1091:6	1091:6	11	strile_length_total
ASSIGN_OP	1091:25	1091:25	9	=
LEAF_NODE	1091:25	1091:25	10	=
RVAL	1091:26	1091:85	9	( ( sp -> image_length + sp -> strile_length - 1 ) / sp -> strile_length ) * sp -> strile_length
LEAF_NODE	1091:26	1091:26	10	(
LEAF_NODE	1091:27	1091:27	10	(
FIELD	1091:28	1091:32	10	sp -> image_length
LEAF_NODE	1091:28	1091:28	11	sp
LEAF_NODE	1091:30	1091:30	11	->
LEAF_NODE	1091:32	1091:32	11	image_length
LEAF_NODE	1091:44	1091:44	10	+
FIELD	1091:45	1091:49	10	sp -> strile_length
LEAF_NODE	1091:45	1091:45	11	sp
LEAF_NODE	1091:47	1091:47	11	->
LEAF_NODE	1091:49	1091:49	11	strile_length
LEAF_NODE	1091:62	1091:62	10	-
FIELD	1091:63	1091:63	10	1
LEAF_NODE	1091:63	1091:63	11	1
LEAF_NODE	1091:64	1091:64	10	)
LEAF_NODE	1091:65	1091:65	10	/
FIELD	1091:66	1091:70	10	sp -> strile_length
LEAF_NODE	1091:66	1091:66	11	sp
LEAF_NODE	1091:68	1091:68	11	->
LEAF_NODE	1091:70	1091:70	11	strile_length
LEAF_NODE	1091:83	1091:83	10	)
LEAF_NODE	1091:84	1091:84	10	*
FIELD	1091:85	1091:89	10	sp -> strile_length
LEAF_NODE	1091:85	1091:85	11	sp
LEAF_NODE	1091:87	1091:87	11	->
LEAF_NODE	1091:89	1091:89	11	strile_length
LEAF_NODE	1091:102	1091:102	7	;
LEAF_NODE	1092:1	1092:1	5	}
SELECTION	1093:1	1094:1	3	
KEYWORD	1093:1	1093:1	4	else
LEAF_NODE	1093:1	1093:1	5	else
STATEMENTS	1094:1	1098:1	4	
LEAF_NODE	1094:1	1094:1	5	{
STATEMENTS	1095:2	1097:2	5	
EXPR_STATEMENT	1095:2	1095:34	6	sp -> strile_width = sp -> image_width ;
EXPR	1095:2	1095:2	7	sp -> strile_width = sp -> image_width
ASSIGN	1095:2	1095:19	8	sp -> strile_width = sp -> image_width
LVAL	1095:2	1095:2	9	sp -> strile_width
FIELD	1095:2	1095:6	10	sp -> strile_width
LEAF_NODE	1095:2	1095:2	11	sp
LEAF_NODE	1095:4	1095:4	11	->
LEAF_NODE	1095:6	1095:6	11	strile_width
ASSIGN_OP	1095:18	1095:18	9	=
LEAF_NODE	1095:18	1095:18	10	=
RVAL	1095:19	1095:19	9	sp -> image_width
FIELD	1095:19	1095:23	10	sp -> image_width
LEAF_NODE	1095:19	1095:19	11	sp
LEAF_NODE	1095:21	1095:21	11	->
LEAF_NODE	1095:23	1095:23	11	image_width
LEAF_NODE	1095:34	1095:34	7	;
EXPR_STATEMENT	1096:2	1096:48	6	sp -> strile_length = tif -> tif_dir . td_rowsperstrip ;
EXPR	1096:2	1096:2	7	sp -> strile_length = tif -> tif_dir . td_rowsperstrip
ASSIGN	1096:2	1096:20	8	sp -> strile_length = tif -> tif_dir . td_rowsperstrip
LVAL	1096:2	1096:2	9	sp -> strile_length
FIELD	1096:2	1096:6	10	sp -> strile_length
LEAF_NODE	1096:2	1096:2	11	sp
LEAF_NODE	1096:4	1096:4	11	->
LEAF_NODE	1096:6	1096:6	11	strile_length
ASSIGN_OP	1096:19	1096:19	9	=
LEAF_NODE	1096:19	1096:19	10	=
RVAL	1096:20	1096:20	9	tif -> tif_dir . td_rowsperstrip
FIELD	1096:20	1096:33	10	tif -> tif_dir . td_rowsperstrip
LEAF_NODE	1096:20	1096:20	11	tif
LEAF_NODE	1096:23	1096:23	11	->
LEAF_NODE	1096:25	1096:25	11	tif_dir
LEAF_NODE	1096:32	1096:32	11	.
LEAF_NODE	1096:33	1096:33	11	td_rowsperstrip
LEAF_NODE	1096:48	1096:48	7	;
EXPR_STATEMENT	1097:2	1097:42	6	sp -> strile_length_total = sp -> image_length ;
EXPR	1097:2	1097:2	7	sp -> strile_length_total = sp -> image_length
ASSIGN	1097:2	1097:26	8	sp -> strile_length_total = sp -> image_length
LVAL	1097:2	1097:2	9	sp -> strile_length_total
FIELD	1097:2	1097:6	10	sp -> strile_length_total
LEAF_NODE	1097:2	1097:2	11	sp
LEAF_NODE	1097:4	1097:4	11	->
LEAF_NODE	1097:6	1097:6	11	strile_length_total
ASSIGN_OP	1097:25	1097:25	9	=
LEAF_NODE	1097:25	1097:25	10	=
RVAL	1097:26	1097:26	9	sp -> image_length
FIELD	1097:26	1097:30	10	sp -> image_length
LEAF_NODE	1097:26	1097:26	11	sp
LEAF_NODE	1097:28	1097:28	11	->
LEAF_NODE	1097:30	1097:30	11	image_length
LEAF_NODE	1097:42	1097:42	7	;
LEAF_NODE	1098:1	1098:1	5	}
SELECTION	1099:1	1100:1	3	
KEYWORD	1099:1	1099:1	4	if
LEAF_NODE	1099:1	1099:1	5	if
LEAF_NODE	1099:4	1099:4	4	(
CONDITION	1099:5	1099:5	4	tif -> tif_dir . td_samplesperpixel == 1
EXPR	1099:5	1099:38	5	tif -> tif_dir . td_samplesperpixel == 1
FIELD	1099:5	1099:18	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1099:5	1099:5	7	tif
LEAF_NODE	1099:8	1099:8	7	->
LEAF_NODE	1099:10	1099:10	7	tif_dir
LEAF_NODE	1099:17	1099:17	7	.
LEAF_NODE	1099:18	1099:18	7	td_samplesperpixel
EQ_OPERATOR	1099:36	1099:36	6	==
LEAF_NODE	1099:36	1099:36	7	==
FIELD	1099:38	1099:38	6	1
LEAF_NODE	1099:38	1099:38	7	1
LEAF_NODE	1099:39	1099:39	4	)
STATEMENTS	1100:1	1106:1	4	
LEAF_NODE	1100:1	1100:1	5	{
STATEMENTS	1101:2	1105:2	5	
EXPR_STATEMENT	1101:2	1101:25	6	sp -> samples_per_pixel = 1 ;
EXPR	1101:2	1101:2	7	sp -> samples_per_pixel = 1
ASSIGN	1101:2	1101:24	8	sp -> samples_per_pixel = 1
LVAL	1101:2	1101:2	9	sp -> samples_per_pixel
FIELD	1101:2	1101:6	10	sp -> samples_per_pixel
LEAF_NODE	1101:2	1101:2	11	sp
LEAF_NODE	1101:4	1101:4	11	->
LEAF_NODE	1101:6	1101:6	11	samples_per_pixel
ASSIGN_OP	1101:23	1101:23	9	=
LEAF_NODE	1101:23	1101:23	10	=
RVAL	1101:24	1101:24	9	1
FIELD	1101:24	1101:24	10	1
LEAF_NODE	1101:24	1101:24	11	1
LEAF_NODE	1101:25	1101:25	7	;
EXPR_STATEMENT	1102:2	1102:27	6	sp -> plane_sample_offset = 0 ;
EXPR	1102:2	1102:2	7	sp -> plane_sample_offset = 0
ASSIGN	1102:2	1102:26	8	sp -> plane_sample_offset = 0
LVAL	1102:2	1102:2	9	sp -> plane_sample_offset
FIELD	1102:2	1102:6	10	sp -> plane_sample_offset
LEAF_NODE	1102:2	1102:2	11	sp
LEAF_NODE	1102:4	1102:4	11	->
LEAF_NODE	1102:6	1102:6	11	plane_sample_offset
ASSIGN_OP	1102:25	1102:25	9	=
LEAF_NODE	1102:25	1102:25	10	=
RVAL	1102:26	1102:26	9	0
FIELD	1102:26	1102:26	10	0
LEAF_NODE	1102:26	1102:26	11	0
LEAF_NODE	1102:27	1102:27	7	;
EXPR_STATEMENT	1103:2	1103:55	6	sp -> samples_per_pixel_per_plane = sp -> samples_per_pixel ;
EXPR	1103:2	1103:2	7	sp -> samples_per_pixel_per_plane = sp -> samples_per_pixel
ASSIGN	1103:2	1103:34	8	sp -> samples_per_pixel_per_plane = sp -> samples_per_pixel
LVAL	1103:2	1103:2	9	sp -> samples_per_pixel_per_plane
FIELD	1103:2	1103:6	10	sp -> samples_per_pixel_per_plane
LEAF_NODE	1103:2	1103:2	11	sp
LEAF_NODE	1103:4	1103:4	11	->
LEAF_NODE	1103:6	1103:6	11	samples_per_pixel_per_plane
ASSIGN_OP	1103:33	1103:33	9	=
LEAF_NODE	1103:33	1103:33	10	=
RVAL	1103:34	1103:34	9	sp -> samples_per_pixel
FIELD	1103:34	1103:38	10	sp -> samples_per_pixel
LEAF_NODE	1103:34	1103:34	11	sp
LEAF_NODE	1103:36	1103:36	11	->
LEAF_NODE	1103:38	1103:38	11	samples_per_pixel
LEAF_NODE	1103:55	1103:55	7	;
EXPR_STATEMENT	1104:2	1104:23	6	sp -> subsampling_hor = 1 ;
EXPR	1104:2	1104:2	7	sp -> subsampling_hor = 1
ASSIGN	1104:2	1104:22	8	sp -> subsampling_hor = 1
LVAL	1104:2	1104:2	9	sp -> subsampling_hor
FIELD	1104:2	1104:6	10	sp -> subsampling_hor
LEAF_NODE	1104:2	1104:2	11	sp
LEAF_NODE	1104:4	1104:4	11	->
LEAF_NODE	1104:6	1104:6	11	subsampling_hor
ASSIGN_OP	1104:21	1104:21	9	=
LEAF_NODE	1104:21	1104:21	10	=
RVAL	1104:22	1104:22	9	1
FIELD	1104:22	1104:22	10	1
LEAF_NODE	1104:22	1104:22	11	1
LEAF_NODE	1104:23	1104:23	7	;
EXPR_STATEMENT	1105:2	1105:23	6	sp -> subsampling_ver = 1 ;
EXPR	1105:2	1105:2	7	sp -> subsampling_ver = 1
ASSIGN	1105:2	1105:22	8	sp -> subsampling_ver = 1
LVAL	1105:2	1105:2	9	sp -> subsampling_ver
FIELD	1105:2	1105:6	10	sp -> subsampling_ver
LEAF_NODE	1105:2	1105:2	11	sp
LEAF_NODE	1105:4	1105:4	11	->
LEAF_NODE	1105:6	1105:6	11	subsampling_ver
ASSIGN_OP	1105:21	1105:21	9	=
LEAF_NODE	1105:21	1105:21	10	=
RVAL	1105:22	1105:22	9	1
FIELD	1105:22	1105:22	10	1
LEAF_NODE	1105:22	1105:22	11	1
LEAF_NODE	1105:23	1105:23	7	;
LEAF_NODE	1106:1	1106:1	5	}
SELECTION	1107:1	1108:1	3	
KEYWORD	1107:1	1107:1	4	else
LEAF_NODE	1107:1	1107:1	5	else
STATEMENTS	1108:1	1120:1	4	
LEAF_NODE	1108:1	1108:1	5	{
STATEMENTS	1109:2	1118:2	5	
SELECTION	1109:2	1110:2	6	
KEYWORD	1109:2	1109:2	7	if
LEAF_NODE	1109:2	1109:2	8	if
LEAF_NODE	1109:5	1109:5	7	(
CONDITION	1109:6	1109:6	7	tif -> tif_dir . td_samplesperpixel != 3
EXPR	1109:6	1109:39	8	tif -> tif_dir . td_samplesperpixel != 3
FIELD	1109:6	1109:19	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	1109:6	1109:6	10	tif
LEAF_NODE	1109:9	1109:9	10	->
LEAF_NODE	1109:11	1109:11	10	tif_dir
LEAF_NODE	1109:18	1109:18	10	.
LEAF_NODE	1109:19	1109:19	10	td_samplesperpixel
EQ_OPERATOR	1109:37	1109:37	9	!=
LEAF_NODE	1109:37	1109:37	10	!=
FIELD	1109:39	1109:39	9	3
LEAF_NODE	1109:39	1109:39	10	3
LEAF_NODE	1109:40	1109:40	7	)
STATEMENTS	1110:2	1113:2	7	
LEAF_NODE	1110:2	1110:2	8	{
STATEMENTS	1111:3	1112:3	8	
EXPR_STATEMENT	1111:3	1111:128	9	TIFFErrorExt ( tif -> tif_clientdata , module , "SamplesPerPixel %d not supported for this compression scheme" , sp -> samples_per_pixel ) ;
EXPR	1111:3	1111:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "SamplesPerPixel %d not supported for this compression scheme" , sp -> samples_per_pixel )
FUNCTION_CALL	1111:3	1111:127	11	TIFFErrorExt ( tif -> tif_clientdata , module , "SamplesPerPixel %d not supported for this compression scheme" , sp -> samples_per_pixel )
CALLEE	1111:3	1111:3	12	TIFFErrorExt
LEAF_NODE	1111:3	1111:3	13	TIFFErrorExt
LEAF_NODE	1111:15	1111:15	12	(
ARGUMENT	1111:16	1111:16	12	tif -> tif_clientdata
FIELD	1111:16	1111:21	13	tif -> tif_clientdata
LEAF_NODE	1111:16	1111:16	14	tif
LEAF_NODE	1111:19	1111:19	14	->
LEAF_NODE	1111:21	1111:21	14	tif_clientdata
LEAF_NODE	1111:35	1111:35	12	,
ARGUMENT	1111:36	1111:36	12	module
FIELD	1111:36	1111:36	13	module
LEAF_NODE	1111:36	1111:36	14	module
LEAF_NODE	1111:42	1111:42	12	,
ARGUMENT	1111:43	1111:43	12	"SamplesPerPixel %d not supported for this compression scheme"
FIELD	1111:43	1111:43	13	"SamplesPerPixel %d not supported for this compression scheme"
LEAF_NODE	1111:43	1111:43	14	"SamplesPerPixel %d not supported for this compression scheme"
LEAF_NODE	1111:105	1111:105	12	,
ARGUMENT	1111:106	1111:106	12	sp -> samples_per_pixel
FIELD	1111:106	1111:110	13	sp -> samples_per_pixel
LEAF_NODE	1111:106	1111:106	14	sp
LEAF_NODE	1111:108	1111:108	14	->
LEAF_NODE	1111:110	1111:110	14	samples_per_pixel
LEAF_NODE	1111:127	1111:127	12	)
LEAF_NODE	1111:128	1111:128	10	;
JUMP_STATEMENT	1112:3	1112:12	9	return ( 0 ) ;
KEYWORD	1112:3	1112:3	10	return
LEAF_NODE	1112:3	1112:3	11	return
DESTINATION	1112:9	1112:9	10	( 0 )
EXPR	1112:9	1112:11	11	( 0 )
LEAF_NODE	1112:9	1112:9	12	(
FIELD	1112:10	1112:10	12	0
LEAF_NODE	1112:10	1112:10	13	0
LEAF_NODE	1112:11	1112:11	12	)
LEAF_NODE	1112:12	1112:12	10	;
LEAF_NODE	1113:2	1113:2	8	}
EXPR_STATEMENT	1114:2	1114:25	6	sp -> samples_per_pixel = 3 ;
EXPR	1114:2	1114:2	7	sp -> samples_per_pixel = 3
ASSIGN	1114:2	1114:24	8	sp -> samples_per_pixel = 3
LVAL	1114:2	1114:2	9	sp -> samples_per_pixel
FIELD	1114:2	1114:6	10	sp -> samples_per_pixel
LEAF_NODE	1114:2	1114:2	11	sp
LEAF_NODE	1114:4	1114:4	11	->
LEAF_NODE	1114:6	1114:6	11	samples_per_pixel
ASSIGN_OP	1114:23	1114:23	9	=
LEAF_NODE	1114:23	1114:23	10	=
RVAL	1114:24	1114:24	9	3
FIELD	1114:24	1114:24	10	3
LEAF_NODE	1114:24	1114:24	11	3
LEAF_NODE	1114:25	1114:25	7	;
EXPR_STATEMENT	1115:2	1115:27	6	sp -> plane_sample_offset = 0 ;
EXPR	1115:2	1115:2	7	sp -> plane_sample_offset = 0
ASSIGN	1115:2	1115:26	8	sp -> plane_sample_offset = 0
LVAL	1115:2	1115:2	9	sp -> plane_sample_offset
FIELD	1115:2	1115:6	10	sp -> plane_sample_offset
LEAF_NODE	1115:2	1115:2	11	sp
LEAF_NODE	1115:4	1115:4	11	->
LEAF_NODE	1115:6	1115:6	11	plane_sample_offset
ASSIGN_OP	1115:25	1115:25	9	=
LEAF_NODE	1115:25	1115:25	10	=
RVAL	1115:26	1115:26	9	0
FIELD	1115:26	1115:26	10	0
LEAF_NODE	1115:26	1115:26	11	0
LEAF_NODE	1115:27	1115:27	7	;
SELECTION	1116:2	1117:3	6	
KEYWORD	1116:2	1116:2	7	if
LEAF_NODE	1116:2	1116:2	8	if
LEAF_NODE	1116:5	1116:5	7	(
CONDITION	1116:6	1116:6	7	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG
EXPR	1116:6	1116:36	8	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG
FIELD	1116:6	1116:19	9	tif -> tif_dir . td_planarconfig
LEAF_NODE	1116:6	1116:6	10	tif
LEAF_NODE	1116:9	1116:9	10	->
LEAF_NODE	1116:11	1116:11	10	tif_dir
LEAF_NODE	1116:18	1116:18	10	.
LEAF_NODE	1116:19	1116:19	10	td_planarconfig
EQ_OPERATOR	1116:34	1116:34	9	==
LEAF_NODE	1116:34	1116:34	10	==
FIELD	1116:36	1116:36	9	PLANARCONFIG_CONTIG
LEAF_NODE	1116:36	1116:36	10	PLANARCONFIG_CONTIG
LEAF_NODE	1116:55	1116:55	7	)
STATEMENTS	1117:3	1117:3	7	
EXPR_STATEMENT	1117:3	1117:36	8	sp -> samples_per_pixel_per_plane = 3 ;
EXPR	1117:3	1117:3	9	sp -> samples_per_pixel_per_plane = 3
ASSIGN	1117:3	1117:35	10	sp -> samples_per_pixel_per_plane = 3
LVAL	1117:3	1117:3	11	sp -> samples_per_pixel_per_plane
FIELD	1117:3	1117:7	12	sp -> samples_per_pixel_per_plane
LEAF_NODE	1117:3	1117:3	13	sp
LEAF_NODE	1117:5	1117:5	13	->
LEAF_NODE	1117:7	1117:7	13	samples_per_pixel_per_plane
ASSIGN_OP	1117:34	1117:34	11	=
LEAF_NODE	1117:34	1117:34	12	=
RVAL	1117:35	1117:35	11	3
FIELD	1117:35	1117:35	12	3
LEAF_NODE	1117:35	1117:35	13	3
LEAF_NODE	1117:36	1117:36	9	;
SELECTION	1118:2	1119:3	6	
KEYWORD	1118:2	1118:2	7	else
LEAF_NODE	1118:2	1118:2	8	else
STATEMENTS	1119:3	1119:3	7	
EXPR_STATEMENT	1119:3	1119:36	8	sp -> samples_per_pixel_per_plane = 1 ;
EXPR	1119:3	1119:3	9	sp -> samples_per_pixel_per_plane = 1
ASSIGN	1119:3	1119:35	10	sp -> samples_per_pixel_per_plane = 1
LVAL	1119:3	1119:3	11	sp -> samples_per_pixel_per_plane
FIELD	1119:3	1119:7	12	sp -> samples_per_pixel_per_plane
LEAF_NODE	1119:3	1119:3	13	sp
LEAF_NODE	1119:5	1119:5	13	->
LEAF_NODE	1119:7	1119:7	13	samples_per_pixel_per_plane
ASSIGN_OP	1119:34	1119:34	11	=
LEAF_NODE	1119:34	1119:34	12	=
RVAL	1119:35	1119:35	11	1
FIELD	1119:35	1119:35	12	1
LEAF_NODE	1119:35	1119:35	13	1
LEAF_NODE	1119:36	1119:36	9	;
LEAF_NODE	1120:1	1120:1	5	}
SELECTION	1121:1	1122:1	3	
KEYWORD	1121:1	1121:1	4	if
LEAF_NODE	1121:1	1121:1	5	if
LEAF_NODE	1121:4	1121:4	4	(
CONDITION	1121:5	1121:5	4	sp -> strile_length < sp -> image_length
EXPR	1121:5	1121:23	5	sp -> strile_length < sp -> image_length
FIELD	1121:5	1121:9	6	sp -> strile_length
LEAF_NODE	1121:5	1121:5	7	sp
LEAF_NODE	1121:7	1121:7	7	->
LEAF_NODE	1121:9	1121:9	7	strile_length
REL_OPERATOR	1121:22	1121:22	6	<
LEAF_NODE	1121:22	1121:22	7	<
FIELD	1121:23	1121:27	6	sp -> image_length
LEAF_NODE	1121:23	1121:23	7	sp
LEAF_NODE	1121:25	1121:25	7	->
LEAF_NODE	1121:27	1121:27	7	image_length
LEAF_NODE	1121:39	1121:39	4	)
STATEMENTS	1122:1	1135:1	4	
LEAF_NODE	1122:1	1122:1	5	{
STATEMENTS	1123:2	1134:2	5	
SELECTION	1123:2	1125:2	6	
KEYWORD	1123:2	1123:2	7	if
LEAF_NODE	1123:2	1123:2	8	if
LEAF_NODE	1123:5	1123:5	7	(
CONDITION	1123:6	1123:6	7	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) ) || ( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
EXPR	1123:6	1123:6	8	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) ) || ( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
OR	1123:6	1124:6	9	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) ) || ( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
EXPR	1123:6	1123:87	10	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) )
LEAF_NODE	1123:6	1123:6	11	(
AND	1123:7	1123:35	11	( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 )
EXPR	1123:7	1123:30	12	( sp -> subsampling_hor != 1 )
LEAF_NODE	1123:7	1123:7	13	(
FIELD	1123:8	1123:12	13	sp -> subsampling_hor
LEAF_NODE	1123:8	1123:8	14	sp
LEAF_NODE	1123:10	1123:10	14	->
LEAF_NODE	1123:12	1123:12	14	subsampling_hor
EQ_OPERATOR	1123:27	1123:27	13	!=
LEAF_NODE	1123:27	1123:27	14	!=
FIELD	1123:29	1123:29	13	1
LEAF_NODE	1123:29	1123:29	14	1
LEAF_NODE	1123:30	1123:30	13	)
LEAF_NODE	1123:32	1123:32	12	&&
EXPR	1123:35	1123:35	12	( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 )
AND	1123:35	1123:63	13	( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 )
EXPR	1123:35	1123:58	14	( sp -> subsampling_hor != 2 )
LEAF_NODE	1123:35	1123:35	15	(
FIELD	1123:36	1123:40	15	sp -> subsampling_hor
LEAF_NODE	1123:36	1123:36	16	sp
LEAF_NODE	1123:38	1123:38	16	->
LEAF_NODE	1123:40	1123:40	16	subsampling_hor
EQ_OPERATOR	1123:55	1123:55	15	!=
LEAF_NODE	1123:55	1123:55	16	!=
FIELD	1123:57	1123:57	15	2
LEAF_NODE	1123:57	1123:57	16	2
LEAF_NODE	1123:58	1123:58	15	)
LEAF_NODE	1123:60	1123:60	14	&&
EXPR	1123:63	1123:86	14	( sp -> subsampling_hor != 4 )
LEAF_NODE	1123:63	1123:63	15	(
FIELD	1123:64	1123:68	15	sp -> subsampling_hor
LEAF_NODE	1123:64	1123:64	16	sp
LEAF_NODE	1123:66	1123:66	16	->
LEAF_NODE	1123:68	1123:68	16	subsampling_hor
EQ_OPERATOR	1123:83	1123:83	15	!=
LEAF_NODE	1123:83	1123:83	16	!=
FIELD	1123:85	1123:85	15	4
LEAF_NODE	1123:85	1123:85	16	4
LEAF_NODE	1123:86	1123:86	15	)
LEAF_NODE	1123:87	1123:87	11	)
LEAF_NODE	1123:89	1123:89	10	||
EXPR	1124:6	1124:87	10	( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
LEAF_NODE	1124:6	1124:6	11	(
AND	1124:7	1124:35	11	( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 )
EXPR	1124:7	1124:30	12	( sp -> subsampling_ver != 1 )
LEAF_NODE	1124:7	1124:7	13	(
FIELD	1124:8	1124:12	13	sp -> subsampling_ver
LEAF_NODE	1124:8	1124:8	14	sp
LEAF_NODE	1124:10	1124:10	14	->
LEAF_NODE	1124:12	1124:12	14	subsampling_ver
EQ_OPERATOR	1124:27	1124:27	13	!=
LEAF_NODE	1124:27	1124:27	14	!=
FIELD	1124:29	1124:29	13	1
LEAF_NODE	1124:29	1124:29	14	1
LEAF_NODE	1124:30	1124:30	13	)
LEAF_NODE	1124:32	1124:32	12	&&
EXPR	1124:35	1124:35	12	( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 )
AND	1124:35	1124:63	13	( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 )
EXPR	1124:35	1124:58	14	( sp -> subsampling_ver != 2 )
LEAF_NODE	1124:35	1124:35	15	(
FIELD	1124:36	1124:40	15	sp -> subsampling_ver
LEAF_NODE	1124:36	1124:36	16	sp
LEAF_NODE	1124:38	1124:38	16	->
LEAF_NODE	1124:40	1124:40	16	subsampling_ver
EQ_OPERATOR	1124:55	1124:55	15	!=
LEAF_NODE	1124:55	1124:55	16	!=
FIELD	1124:57	1124:57	15	2
LEAF_NODE	1124:57	1124:57	16	2
LEAF_NODE	1124:58	1124:58	15	)
LEAF_NODE	1124:60	1124:60	14	&&
EXPR	1124:63	1124:86	14	( sp -> subsampling_ver != 4 )
LEAF_NODE	1124:63	1124:63	15	(
FIELD	1124:64	1124:68	15	sp -> subsampling_ver
LEAF_NODE	1124:64	1124:64	16	sp
LEAF_NODE	1124:66	1124:66	16	->
LEAF_NODE	1124:68	1124:68	16	subsampling_ver
EQ_OPERATOR	1124:83	1124:83	15	!=
LEAF_NODE	1124:83	1124:83	16	!=
FIELD	1124:85	1124:85	15	4
LEAF_NODE	1124:85	1124:85	16	4
LEAF_NODE	1124:86	1124:86	15	)
LEAF_NODE	1124:87	1124:87	11	)
LEAF_NODE	1124:88	1124:88	7	)
STATEMENTS	1125:2	1128:2	7	
LEAF_NODE	1125:2	1125:2	8	{
STATEMENTS	1126:3	1127:3	8	
EXPR_STATEMENT	1126:3	1126:72	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid subsampling values" ) ;
EXPR	1126:3	1126:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid subsampling values" )
FUNCTION_CALL	1126:3	1126:71	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid subsampling values" )
CALLEE	1126:3	1126:3	12	TIFFErrorExt
LEAF_NODE	1126:3	1126:3	13	TIFFErrorExt
LEAF_NODE	1126:15	1126:15	12	(
ARGUMENT	1126:16	1126:16	12	tif -> tif_clientdata
FIELD	1126:16	1126:21	13	tif -> tif_clientdata
LEAF_NODE	1126:16	1126:16	14	tif
LEAF_NODE	1126:19	1126:19	14	->
LEAF_NODE	1126:21	1126:21	14	tif_clientdata
LEAF_NODE	1126:35	1126:35	12	,
ARGUMENT	1126:36	1126:36	12	module
FIELD	1126:36	1126:36	13	module
LEAF_NODE	1126:36	1126:36	14	module
LEAF_NODE	1126:42	1126:42	12	,
ARGUMENT	1126:43	1126:43	12	"Invalid subsampling values"
FIELD	1126:43	1126:43	13	"Invalid subsampling values"
LEAF_NODE	1126:43	1126:43	14	"Invalid subsampling values"
LEAF_NODE	1126:71	1126:71	12	)
LEAF_NODE	1126:72	1126:72	10	;
JUMP_STATEMENT	1127:3	1127:12	9	return ( 0 ) ;
KEYWORD	1127:3	1127:3	10	return
LEAF_NODE	1127:3	1127:3	11	return
DESTINATION	1127:9	1127:9	10	( 0 )
EXPR	1127:9	1127:11	11	( 0 )
LEAF_NODE	1127:9	1127:9	12	(
FIELD	1127:10	1127:10	12	0
LEAF_NODE	1127:10	1127:10	13	0
LEAF_NODE	1127:11	1127:11	12	)
LEAF_NODE	1127:12	1127:12	10	;
LEAF_NODE	1128:2	1128:2	8	}
SELECTION	1129:2	1130:2	6	
KEYWORD	1129:2	1129:2	7	if
LEAF_NODE	1129:2	1129:2	8	if
LEAF_NODE	1129:5	1129:5	7	(
CONDITION	1129:6	1129:6	7	sp -> strile_length % ( sp -> subsampling_ver * 8 ) != 0
EXPR	1129:6	1129:49	8	sp -> strile_length % ( sp -> subsampling_ver * 8 ) != 0
FIELD	1129:6	1129:10	9	sp -> strile_length
LEAF_NODE	1129:6	1129:6	10	sp
LEAF_NODE	1129:8	1129:8	10	->
LEAF_NODE	1129:10	1129:10	10	strile_length
LEAF_NODE	1129:23	1129:23	9	%
LEAF_NODE	1129:24	1129:24	9	(
FIELD	1129:25	1129:29	9	sp -> subsampling_ver
LEAF_NODE	1129:25	1129:25	10	sp
LEAF_NODE	1129:27	1129:27	10	->
LEAF_NODE	1129:29	1129:29	10	subsampling_ver
LEAF_NODE	1129:44	1129:44	9	*
FIELD	1129:45	1129:45	9	8
LEAF_NODE	1129:45	1129:45	10	8
LEAF_NODE	1129:46	1129:46	9	)
EQ_OPERATOR	1129:47	1129:47	9	!=
LEAF_NODE	1129:47	1129:47	10	!=
FIELD	1129:49	1129:49	9	0
LEAF_NODE	1129:49	1129:49	10	0
LEAF_NODE	1129:50	1129:50	7	)
STATEMENTS	1130:2	1133:2	7	
LEAF_NODE	1130:2	1130:2	8	{
STATEMENTS	1131:3	1132:3	8	
EXPR_STATEMENT	1131:3	1131:107	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Incompatible vertical subsampling and image strip/tile length" ) ;
EXPR	1131:3	1131:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Incompatible vertical subsampling and image strip/tile length" )
FUNCTION_CALL	1131:3	1131:106	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Incompatible vertical subsampling and image strip/tile length" )
CALLEE	1131:3	1131:3	12	TIFFErrorExt
LEAF_NODE	1131:3	1131:3	13	TIFFErrorExt
LEAF_NODE	1131:15	1131:15	12	(
ARGUMENT	1131:16	1131:16	12	tif -> tif_clientdata
FIELD	1131:16	1131:21	13	tif -> tif_clientdata
LEAF_NODE	1131:16	1131:16	14	tif
LEAF_NODE	1131:19	1131:19	14	->
LEAF_NODE	1131:21	1131:21	14	tif_clientdata
LEAF_NODE	1131:35	1131:35	12	,
ARGUMENT	1131:36	1131:36	12	module
FIELD	1131:36	1131:36	13	module
LEAF_NODE	1131:36	1131:36	14	module
LEAF_NODE	1131:42	1131:42	12	,
ARGUMENT	1131:43	1131:43	12	"Incompatible vertical subsampling and image strip/tile length"
FIELD	1131:43	1131:43	13	"Incompatible vertical subsampling and image strip/tile length"
LEAF_NODE	1131:43	1131:43	14	"Incompatible vertical subsampling and image strip/tile length"
LEAF_NODE	1131:106	1131:106	12	)
LEAF_NODE	1131:107	1131:107	10	;
JUMP_STATEMENT	1132:3	1132:12	9	return ( 0 ) ;
KEYWORD	1132:3	1132:3	10	return
LEAF_NODE	1132:3	1132:3	11	return
DESTINATION	1132:9	1132:9	10	( 0 )
EXPR	1132:9	1132:11	11	( 0 )
LEAF_NODE	1132:9	1132:9	12	(
FIELD	1132:10	1132:10	12	0
LEAF_NODE	1132:10	1132:10	13	0
LEAF_NODE	1132:11	1132:11	12	)
LEAF_NODE	1132:12	1132:12	10	;
LEAF_NODE	1133:2	1133:2	8	}
EXPR_STATEMENT	1134:2	1134:145	6	sp -> restart_interval = ( uint16 ) ( ( ( sp -> strile_width + sp -> subsampling_hor * 8 - 1 ) / ( sp -> subsampling_hor * 8 ) ) * ( sp -> strile_length / ( sp -> subsampling_ver * 8 ) ) ) ;
EXPR	1134:2	1134:2	7	sp -> restart_interval = ( uint16 ) ( ( ( sp -> strile_width + sp -> subsampling_hor * 8 - 1 ) / ( sp -> subsampling_hor * 8 ) ) * ( sp -> strile_length / ( sp -> subsampling_ver * 8 ) ) )
ASSIGN	1134:2	1134:23	8	sp -> restart_interval = ( uint16 ) ( ( ( sp -> strile_width + sp -> subsampling_hor * 8 - 1 ) / ( sp -> subsampling_hor * 8 ) ) * ( sp -> strile_length / ( sp -> subsampling_ver * 8 ) ) )
LVAL	1134:2	1134:2	9	sp -> restart_interval
FIELD	1134:2	1134:6	10	sp -> restart_interval
LEAF_NODE	1134:2	1134:2	11	sp
LEAF_NODE	1134:4	1134:4	11	->
LEAF_NODE	1134:6	1134:6	11	restart_interval
ASSIGN_OP	1134:22	1134:22	9	=
LEAF_NODE	1134:22	1134:22	10	=
RVAL	1134:23	1134:144	9	( uint16 ) ( ( ( sp -> strile_width + sp -> subsampling_hor * 8 - 1 ) / ( sp -> subsampling_hor * 8 ) ) * ( sp -> strile_length / ( sp -> subsampling_ver * 8 ) ) )
LEAF_NODE	1134:23	1134:23	10	(
TYPE_NAME	1134:24	1134:24	10	uint16
LEAF_NODE	1134:24	1134:24	11	uint16
LEAF_NODE	1134:30	1134:30	10	)
LEAF_NODE	1134:31	1134:31	10	(
LEAF_NODE	1134:32	1134:32	10	(
LEAF_NODE	1134:33	1134:33	10	(
FIELD	1134:34	1134:38	10	sp -> strile_width
LEAF_NODE	1134:34	1134:34	11	sp
LEAF_NODE	1134:36	1134:36	11	->
LEAF_NODE	1134:38	1134:38	11	strile_width
LEAF_NODE	1134:50	1134:50	10	+
FIELD	1134:51	1134:55	10	sp -> subsampling_hor
LEAF_NODE	1134:51	1134:51	11	sp
LEAF_NODE	1134:53	1134:53	11	->
LEAF_NODE	1134:55	1134:55	11	subsampling_hor
LEAF_NODE	1134:70	1134:70	10	*
FIELD	1134:71	1134:71	10	8
LEAF_NODE	1134:71	1134:71	11	8
LEAF_NODE	1134:72	1134:72	10	-
FIELD	1134:73	1134:73	10	1
LEAF_NODE	1134:73	1134:73	11	1
LEAF_NODE	1134:74	1134:74	10	)
LEAF_NODE	1134:75	1134:75	10	/
LEAF_NODE	1134:76	1134:76	10	(
FIELD	1134:77	1134:81	10	sp -> subsampling_hor
LEAF_NODE	1134:77	1134:77	11	sp
LEAF_NODE	1134:79	1134:79	11	->
LEAF_NODE	1134:81	1134:81	11	subsampling_hor
LEAF_NODE	1134:96	1134:96	10	*
FIELD	1134:97	1134:97	10	8
LEAF_NODE	1134:97	1134:97	11	8
LEAF_NODE	1134:98	1134:98	10	)
LEAF_NODE	1134:99	1134:99	10	)
LEAF_NODE	1134:100	1134:100	10	*
LEAF_NODE	1134:101	1134:101	10	(
FIELD	1134:102	1134:106	10	sp -> strile_length
LEAF_NODE	1134:102	1134:102	11	sp
LEAF_NODE	1134:104	1134:104	11	->
LEAF_NODE	1134:106	1134:106	11	strile_length
LEAF_NODE	1134:119	1134:119	10	/
LEAF_NODE	1134:120	1134:120	10	(
FIELD	1134:121	1134:125	10	sp -> subsampling_ver
LEAF_NODE	1134:121	1134:121	11	sp
LEAF_NODE	1134:123	1134:123	11	->
LEAF_NODE	1134:125	1134:125	11	subsampling_ver
LEAF_NODE	1134:140	1134:140	10	*
FIELD	1134:141	1134:141	10	8
LEAF_NODE	1134:141	1134:141	11	8
LEAF_NODE	1134:142	1134:142	10	)
LEAF_NODE	1134:143	1134:143	10	)
LEAF_NODE	1134:144	1134:144	10	)
LEAF_NODE	1134:145	1134:145	7	;
LEAF_NODE	1135:1	1135:1	5	}
SELECTION	1136:1	1137:2	3	
KEYWORD	1136:1	1136:1	4	if
LEAF_NODE	1136:1	1136:1	5	if
LEAF_NODE	1136:4	1136:4	4	(
CONDITION	1136:5	1136:5	4	OJPEGReadHeaderInfoSec ( tif ) == 0
EXPR	1136:5	1136:34	5	OJPEGReadHeaderInfoSec ( tif ) == 0
FUNCTION_CALL	1136:5	1136:31	6	OJPEGReadHeaderInfoSec ( tif )
CALLEE	1136:5	1136:5	7	OJPEGReadHeaderInfoSec
LEAF_NODE	1136:5	1136:5	8	OJPEGReadHeaderInfoSec
LEAF_NODE	1136:27	1136:27	7	(
ARGUMENT	1136:28	1136:28	7	tif
FIELD	1136:28	1136:28	8	tif
LEAF_NODE	1136:28	1136:28	9	tif
LEAF_NODE	1136:31	1136:31	7	)
EQ_OPERATOR	1136:32	1136:32	6	==
LEAF_NODE	1136:32	1136:32	7	==
FIELD	1136:34	1136:34	6	0
LEAF_NODE	1136:34	1136:34	7	0
LEAF_NODE	1136:35	1136:35	4	)
STATEMENTS	1137:2	1137:2	4	
JUMP_STATEMENT	1137:2	1137:11	5	return ( 0 ) ;
KEYWORD	1137:2	1137:2	6	return
LEAF_NODE	1137:2	1137:2	7	return
DESTINATION	1137:8	1137:8	6	( 0 )
EXPR	1137:8	1137:10	7	( 0 )
LEAF_NODE	1137:8	1137:8	8	(
FIELD	1137:9	1137:9	8	0
LEAF_NODE	1137:9	1137:9	9	0
LEAF_NODE	1137:10	1137:10	8	)
LEAF_NODE	1137:11	1137:11	6	;
EXPR_STATEMENT	1138:1	1138:21	3	sp -> sos_end [ 0 ] . log = 1 ;
EXPR	1138:1	1138:1	4	sp -> sos_end [ 0 ] . log = 1
ASSIGN	1138:1	1138:20	5	sp -> sos_end [ 0 ] . log = 1
LVAL	1138:1	1138:1	6	sp -> sos_end [ 0 ] . log
FIELD	1138:1	1138:16	7	sp -> sos_end [ 0 ] . log
LEAF_NODE	1138:1	1138:1	8	sp
LEAF_NODE	1138:3	1138:3	8	->
LEAF_NODE	1138:5	1138:5	8	sos_end
LEAF_NODE	1138:12	1138:12	8	[
EXPR	1138:13	1138:13	8	0
FIELD	1138:13	1138:13	9	0
LEAF_NODE	1138:13	1138:13	10	0
LEAF_NODE	1138:14	1138:14	8	]
LEAF_NODE	1138:15	1138:15	8	.
LEAF_NODE	1138:16	1138:16	8	log
ASSIGN_OP	1138:19	1138:19	6	=
LEAF_NODE	1138:19	1138:19	7	=
RVAL	1138:20	1138:20	6	1
FIELD	1138:20	1138:20	7	1
LEAF_NODE	1138:20	1138:20	8	1
LEAF_NODE	1138:21	1138:21	4	;
EXPR_STATEMENT	1139:1	1139:53	3	sp -> sos_end [ 0 ] . in_buffer_source = sp -> in_buffer_source ;
EXPR	1139:1	1139:1	4	sp -> sos_end [ 0 ] . in_buffer_source = sp -> in_buffer_source
ASSIGN	1139:1	1139:33	5	sp -> sos_end [ 0 ] . in_buffer_source = sp -> in_buffer_source
LVAL	1139:1	1139:1	6	sp -> sos_end [ 0 ] . in_buffer_source
FIELD	1139:1	1139:16	7	sp -> sos_end [ 0 ] . in_buffer_source
LEAF_NODE	1139:1	1139:1	8	sp
LEAF_NODE	1139:3	1139:3	8	->
LEAF_NODE	1139:5	1139:5	8	sos_end
LEAF_NODE	1139:12	1139:12	8	[
EXPR	1139:13	1139:13	8	0
FIELD	1139:13	1139:13	9	0
LEAF_NODE	1139:13	1139:13	10	0
LEAF_NODE	1139:14	1139:14	8	]
LEAF_NODE	1139:15	1139:15	8	.
LEAF_NODE	1139:16	1139:16	8	in_buffer_source
ASSIGN_OP	1139:32	1139:32	6	=
LEAF_NODE	1139:32	1139:32	7	=
RVAL	1139:33	1139:33	6	sp -> in_buffer_source
FIELD	1139:33	1139:37	7	sp -> in_buffer_source
LEAF_NODE	1139:33	1139:33	8	sp
LEAF_NODE	1139:35	1139:35	8	->
LEAF_NODE	1139:37	1139:37	8	in_buffer_source
LEAF_NODE	1139:53	1139:53	4	;
EXPR_STATEMENT	1140:1	1140:63	3	sp -> sos_end [ 0 ] . in_buffer_next_strile = sp -> in_buffer_next_strile ;
EXPR	1140:1	1140:1	4	sp -> sos_end [ 0 ] . in_buffer_next_strile = sp -> in_buffer_next_strile
ASSIGN	1140:1	1140:38	5	sp -> sos_end [ 0 ] . in_buffer_next_strile = sp -> in_buffer_next_strile
LVAL	1140:1	1140:1	6	sp -> sos_end [ 0 ] . in_buffer_next_strile
FIELD	1140:1	1140:16	7	sp -> sos_end [ 0 ] . in_buffer_next_strile
LEAF_NODE	1140:1	1140:1	8	sp
LEAF_NODE	1140:3	1140:3	8	->
LEAF_NODE	1140:5	1140:5	8	sos_end
LEAF_NODE	1140:12	1140:12	8	[
EXPR	1140:13	1140:13	8	0
FIELD	1140:13	1140:13	9	0
LEAF_NODE	1140:13	1140:13	10	0
LEAF_NODE	1140:14	1140:14	8	]
LEAF_NODE	1140:15	1140:15	8	.
LEAF_NODE	1140:16	1140:16	8	in_buffer_next_strile
ASSIGN_OP	1140:37	1140:37	6	=
LEAF_NODE	1140:37	1140:37	7	=
RVAL	1140:38	1140:38	6	sp -> in_buffer_next_strile
FIELD	1140:38	1140:42	7	sp -> in_buffer_next_strile
LEAF_NODE	1140:38	1140:38	8	sp
LEAF_NODE	1140:40	1140:40	8	->
LEAF_NODE	1140:42	1140:42	8	in_buffer_next_strile
LEAF_NODE	1140:63	1140:63	4	;
EXPR_STATEMENT	1141:1	1141:76	3	sp -> sos_end [ 0 ] . in_buffer_file_pos = sp -> in_buffer_file_pos - sp -> in_buffer_togo ;
EXPR	1141:1	1141:1	4	sp -> sos_end [ 0 ] . in_buffer_file_pos = sp -> in_buffer_file_pos - sp -> in_buffer_togo
ASSIGN	1141:1	1141:35	5	sp -> sos_end [ 0 ] . in_buffer_file_pos = sp -> in_buffer_file_pos - sp -> in_buffer_togo
LVAL	1141:1	1141:1	6	sp -> sos_end [ 0 ] . in_buffer_file_pos
FIELD	1141:1	1141:16	7	sp -> sos_end [ 0 ] . in_buffer_file_pos
LEAF_NODE	1141:1	1141:1	8	sp
LEAF_NODE	1141:3	1141:3	8	->
LEAF_NODE	1141:5	1141:5	8	sos_end
LEAF_NODE	1141:12	1141:12	8	[
EXPR	1141:13	1141:13	8	0
FIELD	1141:13	1141:13	9	0
LEAF_NODE	1141:13	1141:13	10	0
LEAF_NODE	1141:14	1141:14	8	]
LEAF_NODE	1141:15	1141:15	8	.
LEAF_NODE	1141:16	1141:16	8	in_buffer_file_pos
ASSIGN_OP	1141:34	1141:34	6	=
LEAF_NODE	1141:34	1141:34	7	=
RVAL	1141:35	1141:58	6	sp -> in_buffer_file_pos - sp -> in_buffer_togo
FIELD	1141:35	1141:39	7	sp -> in_buffer_file_pos
LEAF_NODE	1141:35	1141:35	8	sp
LEAF_NODE	1141:37	1141:37	8	->
LEAF_NODE	1141:39	1141:39	8	in_buffer_file_pos
LEAF_NODE	1141:57	1141:57	7	-
FIELD	1141:58	1141:62	7	sp -> in_buffer_togo
LEAF_NODE	1141:58	1141:58	8	sp
LEAF_NODE	1141:60	1141:60	8	->
LEAF_NODE	1141:62	1141:62	8	in_buffer_togo
LEAF_NODE	1141:76	1141:76	4	;
EXPR_STATEMENT	1142:1	1142:78	3	sp -> sos_end [ 0 ] . in_buffer_file_togo = sp -> in_buffer_file_togo + sp -> in_buffer_togo ;
EXPR	1142:1	1142:1	4	sp -> sos_end [ 0 ] . in_buffer_file_togo = sp -> in_buffer_file_togo + sp -> in_buffer_togo
ASSIGN	1142:1	1142:36	5	sp -> sos_end [ 0 ] . in_buffer_file_togo = sp -> in_buffer_file_togo + sp -> in_buffer_togo
LVAL	1142:1	1142:1	6	sp -> sos_end [ 0 ] . in_buffer_file_togo
FIELD	1142:1	1142:16	7	sp -> sos_end [ 0 ] . in_buffer_file_togo
LEAF_NODE	1142:1	1142:1	8	sp
LEAF_NODE	1142:3	1142:3	8	->
LEAF_NODE	1142:5	1142:5	8	sos_end
LEAF_NODE	1142:12	1142:12	8	[
EXPR	1142:13	1142:13	8	0
FIELD	1142:13	1142:13	9	0
LEAF_NODE	1142:13	1142:13	10	0
LEAF_NODE	1142:14	1142:14	8	]
LEAF_NODE	1142:15	1142:15	8	.
LEAF_NODE	1142:16	1142:16	8	in_buffer_file_togo
ASSIGN_OP	1142:35	1142:35	6	=
LEAF_NODE	1142:35	1142:35	7	=
RVAL	1142:36	1142:60	6	sp -> in_buffer_file_togo + sp -> in_buffer_togo
FIELD	1142:36	1142:40	7	sp -> in_buffer_file_togo
LEAF_NODE	1142:36	1142:36	8	sp
LEAF_NODE	1142:38	1142:38	8	->
LEAF_NODE	1142:40	1142:40	8	in_buffer_file_togo
LEAF_NODE	1142:59	1142:59	7	+
FIELD	1142:60	1142:64	7	sp -> in_buffer_togo
LEAF_NODE	1142:60	1142:60	8	sp
LEAF_NODE	1142:62	1142:62	8	->
LEAF_NODE	1142:64	1142:64	8	in_buffer_togo
LEAF_NODE	1142:78	1142:78	4	;
EXPR_STATEMENT	1143:1	1143:22	3	sp -> readheader_done = 1 ;
EXPR	1143:1	1143:1	4	sp -> readheader_done = 1
ASSIGN	1143:1	1143:21	5	sp -> readheader_done = 1
LVAL	1143:1	1143:1	6	sp -> readheader_done
FIELD	1143:1	1143:5	7	sp -> readheader_done
LEAF_NODE	1143:1	1143:1	8	sp
LEAF_NODE	1143:3	1143:3	8	->
LEAF_NODE	1143:5	1143:5	8	readheader_done
ASSIGN_OP	1143:20	1143:20	6	=
LEAF_NODE	1143:20	1143:20	7	=
RVAL	1143:21	1143:21	6	1
FIELD	1143:21	1143:21	7	1
LEAF_NODE	1143:21	1143:21	8	1
LEAF_NODE	1143:22	1143:22	4	;
JUMP_STATEMENT	1144:1	1144:10	3	return ( 1 ) ;
KEYWORD	1144:1	1144:1	4	return
LEAF_NODE	1144:1	1144:1	5	return
DESTINATION	1144:7	1144:7	4	( 1 )
EXPR	1144:7	1144:9	5	( 1 )
LEAF_NODE	1144:7	1144:7	6	(
FIELD	1144:8	1144:8	6	1
LEAF_NODE	1144:8	1144:8	7	1
LEAF_NODE	1144:9	1144:9	6	)
LEAF_NODE	1144:10	1144:10	4	;
LEAF_NODE	1145:0	1145:0	2	}
FUNCTION_DEF	1147:0	1195:0	1	
RETURN_TYPE	1147:0	1147:7	2	static int
LEAF_NODE	1147:0	1147:0	3	static
TYPE_NAME	1147:7	1147:7	3	int
LEAF_NODE	1147:7	1147:7	4	int
FUNCTION_NAME	1148:0	1148:0	2	OJPEGReadSecondarySos
LEAF_NODE	1148:0	1148:0	3	OJPEGReadSecondarySos
PARAMETER_LIST	1148:21	1148:41	2	( TIFF * tif , uint16 s )
LEAF_NODE	1148:21	1148:21	3	(
PARAMETER_DECL	1148:22	1148:28	3	TIFF * tif
TYPE	1148:22	1148:26	4	TIFF *
TYPE_NAME	1148:22	1148:22	5	TIFF
LEAF_NODE	1148:22	1148:22	6	TIFF
POINTER	1148:26	1148:26	5	*
LEAF_NODE	1148:26	1148:26	6	*
NAME	1148:28	1148:28	4	tif
LEAF_NODE	1148:28	1148:28	5	tif
LEAF_NODE	1148:31	1148:31	3	,
PARAMETER_DECL	1148:33	1148:40	3	uint16 s
TYPE	1148:33	1148:33	4	uint16
TYPE_NAME	1148:33	1148:33	5	uint16
LEAF_NODE	1148:33	1148:33	6	uint16
NAME	1148:40	1148:40	4	s
LEAF_NODE	1148:40	1148:40	5	s
LEAF_NODE	1148:41	1148:41	3	)
LEAF_NODE	1149:0	1149:0	2	{
STATEMENTS	1150:1	1194:1	2	
SIMPLE_DECL	1150:1	1150:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1150:1	1150:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1150:1	1150:11	5	OJPEGState *
TYPE_NAME	1150:1	1150:1	6	OJPEGState
LEAF_NODE	1150:1	1150:1	7	OJPEGState
POINTER	1150:11	1150:11	6	*
LEAF_NODE	1150:11	1150:11	7	*
NAME	1150:13	1150:13	5	sp
LEAF_NODE	1150:13	1150:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1150:13	1150:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1150:13	1150:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1150:13	1150:13	7	sp
NAME	1150:13	1150:13	8	sp
LEAF_NODE	1150:13	1150:13	9	sp
ASSIGN_OP	1150:15	1150:15	7	=
LEAF_NODE	1150:15	1150:15	8	=
RVAL	1150:16	1150:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1150:16	1150:16	8	(
TYPE_NAME	1150:17	1150:17	8	OJPEGState
LEAF_NODE	1150:17	1150:17	9	OJPEGState
LEAF_NODE	1150:27	1150:27	8	*
LEAF_NODE	1150:28	1150:28	8	)
FIELD	1150:29	1150:34	8	tif -> tif_data
LEAF_NODE	1150:29	1150:29	9	tif
LEAF_NODE	1150:32	1150:32	9	->
LEAF_NODE	1150:34	1150:34	9	tif_data
LEAF_NODE	1150:42	1150:42	4	;
SIMPLE_DECL	1151:1	1151:8	3	uint8 m ;
VAR_DECL	1151:1	1151:7	4	uint8 m
TYPE	1151:1	1151:1	5	uint8
TYPE_NAME	1151:1	1151:1	6	uint8
LEAF_NODE	1151:1	1151:1	7	uint8
NAME	1151:7	1151:7	5	m
LEAF_NODE	1151:7	1151:7	6	m
LEAF_NODE	1151:8	1151:8	4	;
EXPR_STATEMENT	1152:1	1152:12	3	assert ( s > 0 ) ;
EXPR	1152:1	1152:1	4	assert ( s > 0 )
FUNCTION_CALL	1152:1	1152:11	5	assert ( s > 0 )
CALLEE	1152:1	1152:1	6	assert
LEAF_NODE	1152:1	1152:1	7	assert
LEAF_NODE	1152:7	1152:7	6	(
ARGUMENT	1152:8	1152:10	6	s > 0
FIELD	1152:8	1152:8	7	s
LEAF_NODE	1152:8	1152:8	8	s
REL_OPERATOR	1152:9	1152:9	7	>
LEAF_NODE	1152:9	1152:9	8	>
FIELD	1152:10	1152:10	7	0
LEAF_NODE	1152:10	1152:10	8	0
LEAF_NODE	1152:11	1152:11	6	)
LEAF_NODE	1152:12	1152:12	4	;
EXPR_STATEMENT	1153:1	1153:12	3	assert ( s < 3 ) ;
EXPR	1153:1	1153:1	4	assert ( s < 3 )
FUNCTION_CALL	1153:1	1153:11	5	assert ( s < 3 )
CALLEE	1153:1	1153:1	6	assert
LEAF_NODE	1153:1	1153:1	7	assert
LEAF_NODE	1153:7	1153:7	6	(
ARGUMENT	1153:8	1153:10	6	s < 3
FIELD	1153:8	1153:8	7	s
LEAF_NODE	1153:8	1153:8	8	s
REL_OPERATOR	1153:9	1153:9	7	<
LEAF_NODE	1153:9	1153:9	8	<
FIELD	1153:10	1153:10	7	3
LEAF_NODE	1153:10	1153:10	8	3
LEAF_NODE	1153:11	1153:11	6	)
LEAF_NODE	1153:12	1153:12	4	;
EXPR_STATEMENT	1154:1	1154:30	3	assert ( sp -> sos_end [ 0 ] . log != 0 ) ;
EXPR	1154:1	1154:1	4	assert ( sp -> sos_end [ 0 ] . log != 0 )
FUNCTION_CALL	1154:1	1154:29	5	assert ( sp -> sos_end [ 0 ] . log != 0 )
CALLEE	1154:1	1154:1	6	assert
LEAF_NODE	1154:1	1154:1	7	assert
LEAF_NODE	1154:7	1154:7	6	(
ARGUMENT	1154:8	1154:28	6	sp -> sos_end [ 0 ] . log != 0
FIELD	1154:8	1154:23	7	sp -> sos_end [ 0 ] . log
LEAF_NODE	1154:8	1154:8	8	sp
LEAF_NODE	1154:10	1154:10	8	->
LEAF_NODE	1154:12	1154:12	8	sos_end
LEAF_NODE	1154:19	1154:19	8	[
EXPR	1154:20	1154:20	8	0
FIELD	1154:20	1154:20	9	0
LEAF_NODE	1154:20	1154:20	10	0
LEAF_NODE	1154:21	1154:21	8	]
LEAF_NODE	1154:22	1154:22	8	.
LEAF_NODE	1154:23	1154:23	8	log
EQ_OPERATOR	1154:26	1154:26	7	!=
LEAF_NODE	1154:26	1154:26	8	!=
FIELD	1154:28	1154:28	7	0
LEAF_NODE	1154:28	1154:28	8	0
LEAF_NODE	1154:29	1154:29	6	)
LEAF_NODE	1154:30	1154:30	4	;
EXPR_STATEMENT	1155:1	1155:30	3	assert ( sp -> sos_end [ s ] . log == 0 ) ;
EXPR	1155:1	1155:1	4	assert ( sp -> sos_end [ s ] . log == 0 )
FUNCTION_CALL	1155:1	1155:29	5	assert ( sp -> sos_end [ s ] . log == 0 )
CALLEE	1155:1	1155:1	6	assert
LEAF_NODE	1155:1	1155:1	7	assert
LEAF_NODE	1155:7	1155:7	6	(
ARGUMENT	1155:8	1155:28	6	sp -> sos_end [ s ] . log == 0
FIELD	1155:8	1155:23	7	sp -> sos_end [ s ] . log
LEAF_NODE	1155:8	1155:8	8	sp
LEAF_NODE	1155:10	1155:10	8	->
LEAF_NODE	1155:12	1155:12	8	sos_end
LEAF_NODE	1155:19	1155:19	8	[
EXPR	1155:20	1155:20	8	s
FIELD	1155:20	1155:20	9	s
LEAF_NODE	1155:20	1155:20	10	s
LEAF_NODE	1155:21	1155:21	8	]
LEAF_NODE	1155:22	1155:22	8	.
LEAF_NODE	1155:23	1155:23	8	log
EQ_OPERATOR	1155:26	1155:26	7	==
LEAF_NODE	1155:26	1155:26	8	==
FIELD	1155:28	1155:28	7	0
LEAF_NODE	1155:28	1155:28	8	0
LEAF_NODE	1155:29	1155:29	6	)
LEAF_NODE	1155:30	1155:30	4	;
EXPR_STATEMENT	1156:1	1156:37	3	sp -> plane_sample_offset = ( uint8 ) ( s - 1 ) ;
EXPR	1156:1	1156:1	4	sp -> plane_sample_offset = ( uint8 ) ( s - 1 )
ASSIGN	1156:1	1156:25	5	sp -> plane_sample_offset = ( uint8 ) ( s - 1 )
LVAL	1156:1	1156:1	6	sp -> plane_sample_offset
FIELD	1156:1	1156:5	7	sp -> plane_sample_offset
LEAF_NODE	1156:1	1156:1	8	sp
LEAF_NODE	1156:3	1156:3	8	->
LEAF_NODE	1156:5	1156:5	8	plane_sample_offset
ASSIGN_OP	1156:24	1156:24	6	=
LEAF_NODE	1156:24	1156:24	7	=
RVAL	1156:25	1156:36	6	( uint8 ) ( s - 1 )
LEAF_NODE	1156:25	1156:25	7	(
TYPE_NAME	1156:26	1156:26	7	uint8
LEAF_NODE	1156:26	1156:26	8	uint8
LEAF_NODE	1156:31	1156:31	7	)
LEAF_NODE	1156:32	1156:32	7	(
FIELD	1156:33	1156:33	7	s
LEAF_NODE	1156:33	1156:33	8	s
LEAF_NODE	1156:34	1156:34	7	-
FIELD	1156:35	1156:35	7	1
LEAF_NODE	1156:35	1156:35	8	1
LEAF_NODE	1156:36	1156:36	7	)
LEAF_NODE	1156:37	1156:37	4	;
ITERATION	1157:1	1158:2	3	
KEYWORD	1157:1	1157:1	4	while
LEAF_NODE	1157:1	1157:1	5	while
LEAF_NODE	1157:6	1157:6	4	(
CONDITION	1157:7	1157:7	4	sp -> sos_end [ sp -> plane_sample_offset ] . log == 0
EXPR	1157:7	1157:49	5	sp -> sos_end [ sp -> plane_sample_offset ] . log == 0
FIELD	1157:7	1157:44	6	sp -> sos_end [ sp -> plane_sample_offset ] . log
LEAF_NODE	1157:7	1157:7	7	sp
LEAF_NODE	1157:9	1157:9	7	->
LEAF_NODE	1157:11	1157:11	7	sos_end
LEAF_NODE	1157:18	1157:18	7	[
EXPR	1157:19	1157:19	7	sp -> plane_sample_offset
FIELD	1157:19	1157:23	8	sp -> plane_sample_offset
LEAF_NODE	1157:19	1157:19	9	sp
LEAF_NODE	1157:21	1157:21	9	->
LEAF_NODE	1157:23	1157:23	9	plane_sample_offset
LEAF_NODE	1157:42	1157:42	7	]
LEAF_NODE	1157:43	1157:43	7	.
LEAF_NODE	1157:44	1157:44	7	log
EQ_OPERATOR	1157:47	1157:47	6	==
LEAF_NODE	1157:47	1157:47	7	==
FIELD	1157:49	1157:49	6	0
LEAF_NODE	1157:49	1157:49	7	0
LEAF_NODE	1157:50	1157:50	4	)
STATEMENTS	1158:2	1158:2	4	
EXPR_STATEMENT	1158:2	1158:27	5	sp -> plane_sample_offset -- ;
EXPR	1158:2	1158:2	6	sp -> plane_sample_offset --
FIELD	1158:2	1158:25	7	sp -> plane_sample_offset --
LEAF_NODE	1158:2	1158:2	8	sp
LEAF_NODE	1158:4	1158:4	8	->
LEAF_NODE	1158:6	1158:6	8	plane_sample_offset
LEAF_NODE	1158:25	1158:25	8	--
LEAF_NODE	1158:27	1158:27	6	;
EXPR_STATEMENT	1159:1	1159:75	3	sp -> in_buffer_source = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source ;
EXPR	1159:1	1159:1	4	sp -> in_buffer_source = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source
ASSIGN	1159:1	1159:22	5	sp -> in_buffer_source = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source
LVAL	1159:1	1159:1	6	sp -> in_buffer_source
FIELD	1159:1	1159:5	7	sp -> in_buffer_source
LEAF_NODE	1159:1	1159:1	8	sp
LEAF_NODE	1159:3	1159:3	8	->
LEAF_NODE	1159:5	1159:5	8	in_buffer_source
ASSIGN_OP	1159:21	1159:21	6	=
LEAF_NODE	1159:21	1159:21	7	=
RVAL	1159:22	1159:22	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source
FIELD	1159:22	1159:59	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source
LEAF_NODE	1159:22	1159:22	8	sp
LEAF_NODE	1159:24	1159:24	8	->
LEAF_NODE	1159:26	1159:26	8	sos_end
LEAF_NODE	1159:33	1159:33	8	[
EXPR	1159:34	1159:34	8	sp -> plane_sample_offset
FIELD	1159:34	1159:38	9	sp -> plane_sample_offset
LEAF_NODE	1159:34	1159:34	10	sp
LEAF_NODE	1159:36	1159:36	10	->
LEAF_NODE	1159:38	1159:38	10	plane_sample_offset
LEAF_NODE	1159:57	1159:57	8	]
LEAF_NODE	1159:58	1159:58	8	.
LEAF_NODE	1159:59	1159:59	8	in_buffer_source
LEAF_NODE	1159:75	1159:75	4	;
EXPR_STATEMENT	1160:1	1160:85	3	sp -> in_buffer_next_strile = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile ;
EXPR	1160:1	1160:1	4	sp -> in_buffer_next_strile = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile
ASSIGN	1160:1	1160:27	5	sp -> in_buffer_next_strile = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile
LVAL	1160:1	1160:1	6	sp -> in_buffer_next_strile
FIELD	1160:1	1160:5	7	sp -> in_buffer_next_strile
LEAF_NODE	1160:1	1160:1	8	sp
LEAF_NODE	1160:3	1160:3	8	->
LEAF_NODE	1160:5	1160:5	8	in_buffer_next_strile
ASSIGN_OP	1160:26	1160:26	6	=
LEAF_NODE	1160:26	1160:26	7	=
RVAL	1160:27	1160:27	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile
FIELD	1160:27	1160:64	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile
LEAF_NODE	1160:27	1160:27	8	sp
LEAF_NODE	1160:29	1160:29	8	->
LEAF_NODE	1160:31	1160:31	8	sos_end
LEAF_NODE	1160:38	1160:38	8	[
EXPR	1160:39	1160:39	8	sp -> plane_sample_offset
FIELD	1160:39	1160:43	9	sp -> plane_sample_offset
LEAF_NODE	1160:39	1160:39	10	sp
LEAF_NODE	1160:41	1160:41	10	->
LEAF_NODE	1160:43	1160:43	10	plane_sample_offset
LEAF_NODE	1160:62	1160:62	8	]
LEAF_NODE	1160:63	1160:63	8	.
LEAF_NODE	1160:64	1160:64	8	in_buffer_next_strile
LEAF_NODE	1160:85	1160:85	4	;
EXPR_STATEMENT	1161:1	1161:79	3	sp -> in_buffer_file_pos = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos ;
EXPR	1161:1	1161:1	4	sp -> in_buffer_file_pos = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos
ASSIGN	1161:1	1161:24	5	sp -> in_buffer_file_pos = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos
LVAL	1161:1	1161:1	6	sp -> in_buffer_file_pos
FIELD	1161:1	1161:5	7	sp -> in_buffer_file_pos
LEAF_NODE	1161:1	1161:1	8	sp
LEAF_NODE	1161:3	1161:3	8	->
LEAF_NODE	1161:5	1161:5	8	in_buffer_file_pos
ASSIGN_OP	1161:23	1161:23	6	=
LEAF_NODE	1161:23	1161:23	7	=
RVAL	1161:24	1161:24	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos
FIELD	1161:24	1161:61	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos
LEAF_NODE	1161:24	1161:24	8	sp
LEAF_NODE	1161:26	1161:26	8	->
LEAF_NODE	1161:28	1161:28	8	sos_end
LEAF_NODE	1161:35	1161:35	8	[
EXPR	1161:36	1161:36	8	sp -> plane_sample_offset
FIELD	1161:36	1161:40	9	sp -> plane_sample_offset
LEAF_NODE	1161:36	1161:36	10	sp
LEAF_NODE	1161:38	1161:38	10	->
LEAF_NODE	1161:40	1161:40	10	plane_sample_offset
LEAF_NODE	1161:59	1161:59	8	]
LEAF_NODE	1161:60	1161:60	8	.
LEAF_NODE	1161:61	1161:61	8	in_buffer_file_pos
LEAF_NODE	1161:79	1161:79	4	;
EXPR_STATEMENT	1162:1	1162:29	3	sp -> in_buffer_file_pos_log = 0 ;
EXPR	1162:1	1162:1	4	sp -> in_buffer_file_pos_log = 0
ASSIGN	1162:1	1162:28	5	sp -> in_buffer_file_pos_log = 0
LVAL	1162:1	1162:1	6	sp -> in_buffer_file_pos_log
FIELD	1162:1	1162:5	7	sp -> in_buffer_file_pos_log
LEAF_NODE	1162:1	1162:1	8	sp
LEAF_NODE	1162:3	1162:3	8	->
LEAF_NODE	1162:5	1162:5	8	in_buffer_file_pos_log
ASSIGN_OP	1162:27	1162:27	6	=
LEAF_NODE	1162:27	1162:27	7	=
RVAL	1162:28	1162:28	6	0
FIELD	1162:28	1162:28	7	0
LEAF_NODE	1162:28	1162:28	8	0
LEAF_NODE	1162:29	1162:29	4	;
EXPR_STATEMENT	1163:1	1163:81	3	sp -> in_buffer_file_togo = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo ;
EXPR	1163:1	1163:1	4	sp -> in_buffer_file_togo = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo
ASSIGN	1163:1	1163:25	5	sp -> in_buffer_file_togo = sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo
LVAL	1163:1	1163:1	6	sp -> in_buffer_file_togo
FIELD	1163:1	1163:5	7	sp -> in_buffer_file_togo
LEAF_NODE	1163:1	1163:1	8	sp
LEAF_NODE	1163:3	1163:3	8	->
LEAF_NODE	1163:5	1163:5	8	in_buffer_file_togo
ASSIGN_OP	1163:24	1163:24	6	=
LEAF_NODE	1163:24	1163:24	7	=
RVAL	1163:25	1163:25	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo
FIELD	1163:25	1163:62	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo
LEAF_NODE	1163:25	1163:25	8	sp
LEAF_NODE	1163:27	1163:27	8	->
LEAF_NODE	1163:29	1163:29	8	sos_end
LEAF_NODE	1163:36	1163:36	8	[
EXPR	1163:37	1163:37	8	sp -> plane_sample_offset
FIELD	1163:37	1163:41	9	sp -> plane_sample_offset
LEAF_NODE	1163:37	1163:37	10	sp
LEAF_NODE	1163:39	1163:39	10	->
LEAF_NODE	1163:41	1163:41	10	plane_sample_offset
LEAF_NODE	1163:60	1163:60	8	]
LEAF_NODE	1163:61	1163:61	8	.
LEAF_NODE	1163:62	1163:62	8	in_buffer_file_togo
LEAF_NODE	1163:81	1163:81	4	;
EXPR_STATEMENT	1164:1	1164:21	3	sp -> in_buffer_togo = 0 ;
EXPR	1164:1	1164:1	4	sp -> in_buffer_togo = 0
ASSIGN	1164:1	1164:20	5	sp -> in_buffer_togo = 0
LVAL	1164:1	1164:1	6	sp -> in_buffer_togo
FIELD	1164:1	1164:5	7	sp -> in_buffer_togo
LEAF_NODE	1164:1	1164:1	8	sp
LEAF_NODE	1164:3	1164:3	8	->
LEAF_NODE	1164:5	1164:5	8	in_buffer_togo
ASSIGN_OP	1164:19	1164:19	6	=
LEAF_NODE	1164:19	1164:19	7	=
RVAL	1164:20	1164:20	6	0
FIELD	1164:20	1164:20	7	0
LEAF_NODE	1164:20	1164:20	8	0
LEAF_NODE	1164:21	1164:21	4	;
EXPR_STATEMENT	1165:1	1165:20	3	sp -> in_buffer_cur = 0 ;
EXPR	1165:1	1165:1	4	sp -> in_buffer_cur = 0
ASSIGN	1165:1	1165:19	5	sp -> in_buffer_cur = 0
LVAL	1165:1	1165:1	6	sp -> in_buffer_cur
FIELD	1165:1	1165:5	7	sp -> in_buffer_cur
LEAF_NODE	1165:1	1165:1	8	sp
LEAF_NODE	1165:3	1165:3	8	->
LEAF_NODE	1165:5	1165:5	8	in_buffer_cur
ASSIGN_OP	1165:18	1165:18	6	=
LEAF_NODE	1165:18	1165:18	7	=
RVAL	1165:19	1165:19	6	0
FIELD	1165:19	1165:19	7	0
LEAF_NODE	1165:19	1165:19	8	0
LEAF_NODE	1165:20	1165:20	4	;
ITERATION	1166:1	1167:1	3	
KEYWORD	1166:1	1166:1	4	while
LEAF_NODE	1166:1	1166:1	5	while
LEAF_NODE	1166:6	1166:6	4	(
CONDITION	1166:7	1166:7	4	sp -> plane_sample_offset < s
EXPR	1166:7	1166:31	5	sp -> plane_sample_offset < s
FIELD	1166:7	1166:11	6	sp -> plane_sample_offset
LEAF_NODE	1166:7	1166:7	7	sp
LEAF_NODE	1166:9	1166:9	7	->
LEAF_NODE	1166:11	1166:11	7	plane_sample_offset
REL_OPERATOR	1166:30	1166:30	6	<
LEAF_NODE	1166:30	1166:30	7	<
FIELD	1166:31	1166:31	6	s
LEAF_NODE	1166:31	1166:31	7	s
LEAF_NODE	1166:32	1166:32	4	)
STATEMENTS	1167:1	1193:1	4	
LEAF_NODE	1167:1	1167:1	5	{
STATEMENTS	1168:2	1192:2	5	
ITERATION	1168:2	1169:2	6	
KEYWORD	1168:2	1168:2	7	do
LEAF_NODE	1168:2	1168:2	8	do
LEAF_NODE	1184:9	1184:9	7	(
CONDITION	1184:10	1184:10	7	1
EXPR	1184:10	1184:10	8	1
FIELD	1184:10	1184:10	9	1
LEAF_NODE	1184:10	1184:10	10	1
LEAF_NODE	1184:11	1184:11	7	)
STATEMENTS	1169:2	1184:2	7	
LEAF_NODE	1169:2	1169:2	8	{
STATEMENTS	1170:3	1172:3	8	
SELECTION	1170:3	1171:4	9	
KEYWORD	1170:3	1170:3	10	if
LEAF_NODE	1170:3	1170:3	11	if
LEAF_NODE	1170:6	1170:6	10	(
CONDITION	1170:7	1170:7	10	OJPEGReadByte ( sp , & m ) == 0
EXPR	1170:7	1170:29	11	OJPEGReadByte ( sp , & m ) == 0
FUNCTION_CALL	1170:7	1170:26	12	OJPEGReadByte ( sp , & m )
CALLEE	1170:7	1170:7	13	OJPEGReadByte
LEAF_NODE	1170:7	1170:7	14	OJPEGReadByte
LEAF_NODE	1170:20	1170:20	13	(
ARGUMENT	1170:21	1170:21	13	sp
FIELD	1170:21	1170:21	14	sp
LEAF_NODE	1170:21	1170:21	15	sp
LEAF_NODE	1170:23	1170:23	13	,
ARGUMENT	1170:24	1170:24	13	& m
UNARY_EXPR	1170:24	1170:25	14	& m
UNARY_OPERATOR	1170:24	1170:24	15	&
LEAF_NODE	1170:24	1170:24	16	&
FIELD	1170:25	1170:25	15	m
LEAF_NODE	1170:25	1170:25	16	m
LEAF_NODE	1170:26	1170:26	13	)
EQ_OPERATOR	1170:27	1170:27	12	==
LEAF_NODE	1170:27	1170:27	13	==
FIELD	1170:29	1170:29	12	0
LEAF_NODE	1170:29	1170:29	13	0
LEAF_NODE	1170:30	1170:30	10	)
STATEMENTS	1171:4	1171:4	10	
JUMP_STATEMENT	1171:4	1171:13	11	return ( 0 ) ;
KEYWORD	1171:4	1171:4	12	return
LEAF_NODE	1171:4	1171:4	13	return
DESTINATION	1171:10	1171:10	12	( 0 )
EXPR	1171:10	1171:12	13	( 0 )
LEAF_NODE	1171:10	1171:10	14	(
FIELD	1171:11	1171:11	14	0
LEAF_NODE	1171:11	1171:11	15	0
LEAF_NODE	1171:12	1171:12	14	)
LEAF_NODE	1171:13	1171:13	12	;
SELECTION	1172:3	1173:3	9	
KEYWORD	1172:3	1172:3	10	if
LEAF_NODE	1172:3	1172:3	11	if
LEAF_NODE	1172:6	1172:6	10	(
CONDITION	1172:7	1172:7	10	m == 255
EXPR	1172:7	1172:10	11	m == 255
FIELD	1172:7	1172:7	12	m
LEAF_NODE	1172:7	1172:7	13	m
EQ_OPERATOR	1172:8	1172:8	12	==
LEAF_NODE	1172:8	1172:8	13	==
FIELD	1172:10	1172:10	12	255
LEAF_NODE	1172:10	1172:10	13	255
LEAF_NODE	1172:13	1172:13	10	)
STATEMENTS	1173:3	1183:3	10	
LEAF_NODE	1173:3	1173:3	11	{
STATEMENTS	1174:4	1181:4	11	
ITERATION	1174:4	1175:4	12	
KEYWORD	1174:4	1174:4	13	do
LEAF_NODE	1174:4	1174:4	14	do
LEAF_NODE	1180:11	1180:11	13	(
CONDITION	1180:12	1180:12	13	1
EXPR	1180:12	1180:12	14	1
FIELD	1180:12	1180:12	15	1
LEAF_NODE	1180:12	1180:12	16	1
LEAF_NODE	1180:13	1180:13	13	)
STATEMENTS	1175:4	1180:4	13	
LEAF_NODE	1175:4	1175:4	14	{
STATEMENTS	1176:5	1178:5	14	
SELECTION	1176:5	1177:6	15	
KEYWORD	1176:5	1176:5	16	if
LEAF_NODE	1176:5	1176:5	17	if
LEAF_NODE	1176:8	1176:8	16	(
CONDITION	1176:9	1176:9	16	OJPEGReadByte ( sp , & m ) == 0
EXPR	1176:9	1176:31	17	OJPEGReadByte ( sp , & m ) == 0
FUNCTION_CALL	1176:9	1176:28	18	OJPEGReadByte ( sp , & m )
CALLEE	1176:9	1176:9	19	OJPEGReadByte
LEAF_NODE	1176:9	1176:9	20	OJPEGReadByte
LEAF_NODE	1176:22	1176:22	19	(
ARGUMENT	1176:23	1176:23	19	sp
FIELD	1176:23	1176:23	20	sp
LEAF_NODE	1176:23	1176:23	21	sp
LEAF_NODE	1176:25	1176:25	19	,
ARGUMENT	1176:26	1176:26	19	& m
UNARY_EXPR	1176:26	1176:27	20	& m
UNARY_OPERATOR	1176:26	1176:26	21	&
LEAF_NODE	1176:26	1176:26	22	&
FIELD	1176:27	1176:27	21	m
LEAF_NODE	1176:27	1176:27	22	m
LEAF_NODE	1176:28	1176:28	19	)
EQ_OPERATOR	1176:29	1176:29	18	==
LEAF_NODE	1176:29	1176:29	19	==
FIELD	1176:31	1176:31	18	0
LEAF_NODE	1176:31	1176:31	19	0
LEAF_NODE	1176:32	1176:32	16	)
STATEMENTS	1177:6	1177:6	16	
JUMP_STATEMENT	1177:6	1177:15	17	return ( 0 ) ;
KEYWORD	1177:6	1177:6	18	return
LEAF_NODE	1177:6	1177:6	19	return
DESTINATION	1177:12	1177:12	18	( 0 )
EXPR	1177:12	1177:14	19	( 0 )
LEAF_NODE	1177:12	1177:12	20	(
FIELD	1177:13	1177:13	20	0
LEAF_NODE	1177:13	1177:13	21	0
LEAF_NODE	1177:14	1177:14	20	)
LEAF_NODE	1177:15	1177:15	18	;
SELECTION	1178:5	1179:6	15	
KEYWORD	1178:5	1178:5	16	if
LEAF_NODE	1178:5	1178:5	17	if
LEAF_NODE	1178:8	1178:8	16	(
CONDITION	1178:9	1178:9	16	m != 255
EXPR	1178:9	1178:12	17	m != 255
FIELD	1178:9	1178:9	18	m
LEAF_NODE	1178:9	1178:9	19	m
EQ_OPERATOR	1178:10	1178:10	18	!=
LEAF_NODE	1178:10	1178:10	19	!=
FIELD	1178:12	1178:12	18	255
LEAF_NODE	1178:12	1178:12	19	255
LEAF_NODE	1178:15	1178:15	16	)
STATEMENTS	1179:6	1179:6	16	
JUMP_STATEMENT	1179:6	1179:11	17	break DESTINATION ;
KEYWORD	1179:6	1179:6	18	break
LEAF_NODE	1179:6	1179:6	19	break
LEAF_NODE	0:0	0:0	18	DESTINATION
LEAF_NODE	1179:11	1179:11	18	;
LEAF_NODE	1180:4	1180:4	14	}
LEAF_NODE	1180:14	1180:14	12	;
SELECTION	1181:4	1182:5	12	
KEYWORD	1181:4	1181:4	13	if
LEAF_NODE	1181:4	1181:4	14	if
LEAF_NODE	1181:7	1181:7	13	(
CONDITION	1181:8	1181:8	13	m == JPEG_MARKER_SOS
EXPR	1181:8	1181:11	14	m == JPEG_MARKER_SOS
FIELD	1181:8	1181:8	15	m
LEAF_NODE	1181:8	1181:8	16	m
EQ_OPERATOR	1181:9	1181:9	15	==
LEAF_NODE	1181:9	1181:9	16	==
FIELD	1181:11	1181:11	15	JPEG_MARKER_SOS
LEAF_NODE	1181:11	1181:11	16	JPEG_MARKER_SOS
LEAF_NODE	1181:26	1181:26	13	)
STATEMENTS	1182:5	1182:5	13	
JUMP_STATEMENT	1182:5	1182:10	14	break DESTINATION ;
KEYWORD	1182:5	1182:5	15	break
LEAF_NODE	1182:5	1182:5	16	break
LEAF_NODE	0:0	0:0	15	DESTINATION
LEAF_NODE	1182:10	1182:10	15	;
LEAF_NODE	1183:3	1183:3	11	}
LEAF_NODE	1184:2	1184:2	8	}
LEAF_NODE	1184:12	1184:12	6	;
EXPR_STATEMENT	1185:2	1185:27	6	sp -> plane_sample_offset ++ ;
EXPR	1185:2	1185:2	7	sp -> plane_sample_offset ++
FIELD	1185:2	1185:25	8	sp -> plane_sample_offset ++
LEAF_NODE	1185:2	1185:2	9	sp
LEAF_NODE	1185:4	1185:4	9	->
LEAF_NODE	1185:6	1185:6	9	plane_sample_offset
LEAF_NODE	1185:25	1185:25	9	++
LEAF_NODE	1185:27	1185:27	7	;
SELECTION	1186:2	1187:3	6	
KEYWORD	1186:2	1186:2	7	if
LEAF_NODE	1186:2	1186:2	8	if
LEAF_NODE	1186:5	1186:5	7	(
CONDITION	1186:6	1186:6	7	OJPEGReadHeaderInfoSecStreamSos ( tif ) == 0
EXPR	1186:6	1186:44	8	OJPEGReadHeaderInfoSecStreamSos ( tif ) == 0
FUNCTION_CALL	1186:6	1186:41	9	OJPEGReadHeaderInfoSecStreamSos ( tif )
CALLEE	1186:6	1186:6	10	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	1186:6	1186:6	11	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	1186:37	1186:37	10	(
ARGUMENT	1186:38	1186:38	10	tif
FIELD	1186:38	1186:38	11	tif
LEAF_NODE	1186:38	1186:38	12	tif
LEAF_NODE	1186:41	1186:41	10	)
EQ_OPERATOR	1186:42	1186:42	9	==
LEAF_NODE	1186:42	1186:42	10	==
FIELD	1186:44	1186:44	9	0
LEAF_NODE	1186:44	1186:44	10	0
LEAF_NODE	1186:45	1186:45	7	)
STATEMENTS	1187:3	1187:3	7	
JUMP_STATEMENT	1187:3	1187:12	8	return ( 0 ) ;
KEYWORD	1187:3	1187:3	9	return
LEAF_NODE	1187:3	1187:3	10	return
DESTINATION	1187:9	1187:9	9	( 0 )
EXPR	1187:9	1187:11	10	( 0 )
LEAF_NODE	1187:9	1187:9	11	(
FIELD	1187:10	1187:10	11	0
LEAF_NODE	1187:10	1187:10	12	0
LEAF_NODE	1187:11	1187:11	11	)
LEAF_NODE	1187:12	1187:12	9	;
EXPR_STATEMENT	1188:2	1188:44	6	sp -> sos_end [ sp -> plane_sample_offset ] . log = 1 ;
EXPR	1188:2	1188:2	7	sp -> sos_end [ sp -> plane_sample_offset ] . log = 1
ASSIGN	1188:2	1188:43	8	sp -> sos_end [ sp -> plane_sample_offset ] . log = 1
LVAL	1188:2	1188:2	9	sp -> sos_end [ sp -> plane_sample_offset ] . log
FIELD	1188:2	1188:39	10	sp -> sos_end [ sp -> plane_sample_offset ] . log
LEAF_NODE	1188:2	1188:2	11	sp
LEAF_NODE	1188:4	1188:4	11	->
LEAF_NODE	1188:6	1188:6	11	sos_end
LEAF_NODE	1188:13	1188:13	11	[
EXPR	1188:14	1188:14	11	sp -> plane_sample_offset
FIELD	1188:14	1188:18	12	sp -> plane_sample_offset
LEAF_NODE	1188:14	1188:14	13	sp
LEAF_NODE	1188:16	1188:16	13	->
LEAF_NODE	1188:18	1188:18	13	plane_sample_offset
LEAF_NODE	1188:37	1188:37	11	]
LEAF_NODE	1188:38	1188:38	11	.
LEAF_NODE	1188:39	1188:39	11	log
ASSIGN_OP	1188:42	1188:42	9	=
LEAF_NODE	1188:42	1188:42	10	=
RVAL	1188:43	1188:43	9	1
FIELD	1188:43	1188:43	10	1
LEAF_NODE	1188:43	1188:43	11	1
LEAF_NODE	1188:44	1188:44	7	;
EXPR_STATEMENT	1189:2	1189:76	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source = sp -> in_buffer_source ;
EXPR	1189:2	1189:2	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source = sp -> in_buffer_source
ASSIGN	1189:2	1189:56	8	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source = sp -> in_buffer_source
LVAL	1189:2	1189:2	9	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source
FIELD	1189:2	1189:39	10	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_source
LEAF_NODE	1189:2	1189:2	11	sp
LEAF_NODE	1189:4	1189:4	11	->
LEAF_NODE	1189:6	1189:6	11	sos_end
LEAF_NODE	1189:13	1189:13	11	[
EXPR	1189:14	1189:14	11	sp -> plane_sample_offset
FIELD	1189:14	1189:18	12	sp -> plane_sample_offset
LEAF_NODE	1189:14	1189:14	13	sp
LEAF_NODE	1189:16	1189:16	13	->
LEAF_NODE	1189:18	1189:18	13	plane_sample_offset
LEAF_NODE	1189:37	1189:37	11	]
LEAF_NODE	1189:38	1189:38	11	.
LEAF_NODE	1189:39	1189:39	11	in_buffer_source
ASSIGN_OP	1189:55	1189:55	9	=
LEAF_NODE	1189:55	1189:55	10	=
RVAL	1189:56	1189:56	9	sp -> in_buffer_source
FIELD	1189:56	1189:60	10	sp -> in_buffer_source
LEAF_NODE	1189:56	1189:56	11	sp
LEAF_NODE	1189:58	1189:58	11	->
LEAF_NODE	1189:60	1189:60	11	in_buffer_source
LEAF_NODE	1189:76	1189:76	7	;
EXPR_STATEMENT	1190:2	1190:86	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile = sp -> in_buffer_next_strile ;
EXPR	1190:2	1190:2	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile = sp -> in_buffer_next_strile
ASSIGN	1190:2	1190:61	8	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile = sp -> in_buffer_next_strile
LVAL	1190:2	1190:2	9	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile
FIELD	1190:2	1190:39	10	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_next_strile
LEAF_NODE	1190:2	1190:2	11	sp
LEAF_NODE	1190:4	1190:4	11	->
LEAF_NODE	1190:6	1190:6	11	sos_end
LEAF_NODE	1190:13	1190:13	11	[
EXPR	1190:14	1190:14	11	sp -> plane_sample_offset
FIELD	1190:14	1190:18	12	sp -> plane_sample_offset
LEAF_NODE	1190:14	1190:14	13	sp
LEAF_NODE	1190:16	1190:16	13	->
LEAF_NODE	1190:18	1190:18	13	plane_sample_offset
LEAF_NODE	1190:37	1190:37	11	]
LEAF_NODE	1190:38	1190:38	11	.
LEAF_NODE	1190:39	1190:39	11	in_buffer_next_strile
ASSIGN_OP	1190:60	1190:60	9	=
LEAF_NODE	1190:60	1190:60	10	=
RVAL	1190:61	1190:61	9	sp -> in_buffer_next_strile
FIELD	1190:61	1190:65	10	sp -> in_buffer_next_strile
LEAF_NODE	1190:61	1190:61	11	sp
LEAF_NODE	1190:63	1190:63	11	->
LEAF_NODE	1190:65	1190:65	11	in_buffer_next_strile
LEAF_NODE	1190:86	1190:86	7	;
EXPR_STATEMENT	1191:2	1191:99	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos = sp -> in_buffer_file_pos - sp -> in_buffer_togo ;
EXPR	1191:2	1191:2	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos = sp -> in_buffer_file_pos - sp -> in_buffer_togo
ASSIGN	1191:2	1191:58	8	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos = sp -> in_buffer_file_pos - sp -> in_buffer_togo
LVAL	1191:2	1191:2	9	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos
FIELD	1191:2	1191:39	10	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_pos
LEAF_NODE	1191:2	1191:2	11	sp
LEAF_NODE	1191:4	1191:4	11	->
LEAF_NODE	1191:6	1191:6	11	sos_end
LEAF_NODE	1191:13	1191:13	11	[
EXPR	1191:14	1191:14	11	sp -> plane_sample_offset
FIELD	1191:14	1191:18	12	sp -> plane_sample_offset
LEAF_NODE	1191:14	1191:14	13	sp
LEAF_NODE	1191:16	1191:16	13	->
LEAF_NODE	1191:18	1191:18	13	plane_sample_offset
LEAF_NODE	1191:37	1191:37	11	]
LEAF_NODE	1191:38	1191:38	11	.
LEAF_NODE	1191:39	1191:39	11	in_buffer_file_pos
ASSIGN_OP	1191:57	1191:57	9	=
LEAF_NODE	1191:57	1191:57	10	=
RVAL	1191:58	1191:81	9	sp -> in_buffer_file_pos - sp -> in_buffer_togo
FIELD	1191:58	1191:62	10	sp -> in_buffer_file_pos
LEAF_NODE	1191:58	1191:58	11	sp
LEAF_NODE	1191:60	1191:60	11	->
LEAF_NODE	1191:62	1191:62	11	in_buffer_file_pos
LEAF_NODE	1191:80	1191:80	10	-
FIELD	1191:81	1191:85	10	sp -> in_buffer_togo
LEAF_NODE	1191:81	1191:81	11	sp
LEAF_NODE	1191:83	1191:83	11	->
LEAF_NODE	1191:85	1191:85	11	in_buffer_togo
LEAF_NODE	1191:99	1191:99	7	;
EXPR_STATEMENT	1192:2	1192:101	6	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo = sp -> in_buffer_file_togo + sp -> in_buffer_togo ;
EXPR	1192:2	1192:2	7	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo = sp -> in_buffer_file_togo + sp -> in_buffer_togo
ASSIGN	1192:2	1192:59	8	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo = sp -> in_buffer_file_togo + sp -> in_buffer_togo
LVAL	1192:2	1192:2	9	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo
FIELD	1192:2	1192:39	10	sp -> sos_end [ sp -> plane_sample_offset ] . in_buffer_file_togo
LEAF_NODE	1192:2	1192:2	11	sp
LEAF_NODE	1192:4	1192:4	11	->
LEAF_NODE	1192:6	1192:6	11	sos_end
LEAF_NODE	1192:13	1192:13	11	[
EXPR	1192:14	1192:14	11	sp -> plane_sample_offset
FIELD	1192:14	1192:18	12	sp -> plane_sample_offset
LEAF_NODE	1192:14	1192:14	13	sp
LEAF_NODE	1192:16	1192:16	13	->
LEAF_NODE	1192:18	1192:18	13	plane_sample_offset
LEAF_NODE	1192:37	1192:37	11	]
LEAF_NODE	1192:38	1192:38	11	.
LEAF_NODE	1192:39	1192:39	11	in_buffer_file_togo
ASSIGN_OP	1192:58	1192:58	9	=
LEAF_NODE	1192:58	1192:58	10	=
RVAL	1192:59	1192:83	9	sp -> in_buffer_file_togo + sp -> in_buffer_togo
FIELD	1192:59	1192:63	10	sp -> in_buffer_file_togo
LEAF_NODE	1192:59	1192:59	11	sp
LEAF_NODE	1192:61	1192:61	11	->
LEAF_NODE	1192:63	1192:63	11	in_buffer_file_togo
LEAF_NODE	1192:82	1192:82	10	+
FIELD	1192:83	1192:87	10	sp -> in_buffer_togo
LEAF_NODE	1192:83	1192:83	11	sp
LEAF_NODE	1192:85	1192:85	11	->
LEAF_NODE	1192:87	1192:87	11	in_buffer_togo
LEAF_NODE	1192:101	1192:101	7	;
LEAF_NODE	1193:1	1193:1	5	}
JUMP_STATEMENT	1194:1	1194:10	3	return ( 1 ) ;
KEYWORD	1194:1	1194:1	4	return
LEAF_NODE	1194:1	1194:1	5	return
DESTINATION	1194:7	1194:7	4	( 1 )
EXPR	1194:7	1194:9	5	( 1 )
LEAF_NODE	1194:7	1194:7	6	(
FIELD	1194:8	1194:8	6	1
LEAF_NODE	1194:8	1194:8	7	1
LEAF_NODE	1194:9	1194:9	6	)
LEAF_NODE	1194:10	1194:10	4	;
LEAF_NODE	1195:0	1195:0	2	}
FUNCTION_DEF	1197:0	1296:0	1	
RETURN_TYPE	1197:0	1197:7	2	static int
LEAF_NODE	1197:0	1197:0	3	static
TYPE_NAME	1197:7	1197:7	3	int
LEAF_NODE	1197:7	1197:7	4	int
FUNCTION_NAME	1198:0	1198:0	2	OJPEGWriteHeaderInfo
LEAF_NODE	1198:0	1198:0	3	OJPEGWriteHeaderInfo
PARAMETER_LIST	1198:20	1198:30	2	( TIFF * tif )
LEAF_NODE	1198:20	1198:20	3	(
PARAMETER_DECL	1198:21	1198:27	3	TIFF * tif
TYPE	1198:21	1198:25	4	TIFF *
TYPE_NAME	1198:21	1198:21	5	TIFF
LEAF_NODE	1198:21	1198:21	6	TIFF
POINTER	1198:25	1198:25	5	*
LEAF_NODE	1198:25	1198:25	6	*
NAME	1198:27	1198:27	4	tif
LEAF_NODE	1198:27	1198:27	5	tif
LEAF_NODE	1198:30	1198:30	3	)
LEAF_NODE	1199:0	1199:0	2	{
STATEMENTS	1200:1	1295:1	2	
LEAF_NODE	1200:1	1200:1	3	static
SIMPLE_DECL	1200:8	1200:50	3	const char [ ] module ; module = "OJPEGWriteHeaderInfo" ;
VAR_DECL	1200:8	1200:19	4	const char [ ] module ; module = "OJPEGWriteHeaderInfo"
TYPE	1200:8	1200:25	5	const char [ ]
TYPE_NAME	1200:8	1200:14	6	const char
LEAF_NODE	1200:8	1200:8	7	const
LEAF_NODE	1200:14	1200:14	7	char
TYPE_SUFFIX	1200:25	1200:26	6	[ ]
LEAF_NODE	1200:25	1200:25	7	[
LEAF_NODE	1200:26	1200:26	7	]
NAME	1200:19	1200:19	5	module
LEAF_NODE	1200:19	1200:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1200:19	1200:19	5	module = "OJPEGWriteHeaderInfo"
ASSIGN	1200:19	1200:28	6	module = "OJPEGWriteHeaderInfo"
LVAL	1200:19	1200:19	7	module
NAME	1200:19	1200:19	8	module
LEAF_NODE	1200:19	1200:19	9	module
ASSIGN_OP	1200:27	1200:27	7	=
LEAF_NODE	1200:27	1200:27	8	=
RVAL	1200:28	1200:28	7	"OJPEGWriteHeaderInfo"
FIELD	1200:28	1200:28	8	"OJPEGWriteHeaderInfo"
LEAF_NODE	1200:28	1200:28	9	"OJPEGWriteHeaderInfo"
LEAF_NODE	1200:50	1200:50	4	;
SIMPLE_DECL	1201:1	1201:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1201:1	1201:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1201:1	1201:11	5	OJPEGState *
TYPE_NAME	1201:1	1201:1	6	OJPEGState
LEAF_NODE	1201:1	1201:1	7	OJPEGState
POINTER	1201:11	1201:11	6	*
LEAF_NODE	1201:11	1201:11	7	*
NAME	1201:13	1201:13	5	sp
LEAF_NODE	1201:13	1201:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1201:13	1201:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1201:13	1201:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1201:13	1201:13	7	sp
NAME	1201:13	1201:13	8	sp
LEAF_NODE	1201:13	1201:13	9	sp
ASSIGN_OP	1201:15	1201:15	7	=
LEAF_NODE	1201:15	1201:15	8	=
RVAL	1201:16	1201:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1201:16	1201:16	8	(
TYPE_NAME	1201:17	1201:17	8	OJPEGState
LEAF_NODE	1201:17	1201:17	9	OJPEGState
LEAF_NODE	1201:27	1201:27	8	*
LEAF_NODE	1201:28	1201:28	8	)
FIELD	1201:29	1201:34	8	tif -> tif_data
LEAF_NODE	1201:29	1201:29	9	tif
LEAF_NODE	1201:32	1201:32	9	->
LEAF_NODE	1201:34	1201:34	9	tif_data
LEAF_NODE	1201:42	1201:42	4	;
SIMPLE_DECL	1202:1	1202:10	3	uint8 * m ;
VAR_DECL	1202:1	1202:9	4	uint8 * m
TYPE	1202:1	1202:7	5	uint8 *
TYPE_NAME	1202:1	1202:1	6	uint8
LEAF_NODE	1202:1	1202:1	7	uint8
POINTER	1202:7	1202:7	6	*
LEAF_NODE	1202:7	1202:7	7	*
NAME	1202:9	1202:9	5	m
LEAF_NODE	1202:9	1202:9	6	m
LEAF_NODE	1202:10	1202:10	4	;
SIMPLE_DECL	1203:1	1203:9	3	uint32 n ;
VAR_DECL	1203:1	1203:8	4	uint32 n
TYPE	1203:1	1203:1	5	uint32
TYPE_NAME	1203:1	1203:1	6	uint32
LEAF_NODE	1203:1	1203:1	7	uint32
NAME	1203:8	1203:8	5	n
LEAF_NODE	1203:8	1203:8	6	n
LEAF_NODE	1203:9	1203:9	4	;
SELECTION	1205:1	1206:2	3	
KEYWORD	1205:1	1205:1	4	if
LEAF_NODE	1205:1	1205:1	5	if
LEAF_NODE	1205:4	1205:4	4	(
CONDITION	1205:5	1205:5	4	sp -> libjpeg_session_active != 0
EXPR	1205:5	1205:35	5	sp -> libjpeg_session_active != 0
FIELD	1205:5	1205:9	6	sp -> libjpeg_session_active
LEAF_NODE	1205:5	1205:5	7	sp
LEAF_NODE	1205:7	1205:7	7	->
LEAF_NODE	1205:9	1205:9	7	libjpeg_session_active
EQ_OPERATOR	1205:32	1205:32	6	!=
LEAF_NODE	1205:32	1205:32	7	!=
FIELD	1205:35	1205:35	6	0
LEAF_NODE	1205:35	1205:35	7	0
LEAF_NODE	1205:36	1205:36	4	)
STATEMENTS	1206:2	1206:2	4	
JUMP_STATEMENT	1206:2	1206:10	5	return 0 ;
KEYWORD	1206:2	1206:2	6	return
LEAF_NODE	1206:2	1206:2	7	return
DESTINATION	1206:9	1206:9	6	0
EXPR	1206:9	1206:9	7	0
FIELD	1206:9	1206:9	8	0
LEAF_NODE	1206:9	1206:9	9	0
LEAF_NODE	1206:10	1206:10	6	;
EXPR_STATEMENT	1207:1	1207:22	3	sp -> out_state = ososSoi ;
EXPR	1207:1	1207:1	4	sp -> out_state = ososSoi
ASSIGN	1207:1	1207:15	5	sp -> out_state = ososSoi
LVAL	1207:1	1207:1	6	sp -> out_state
FIELD	1207:1	1207:5	7	sp -> out_state
LEAF_NODE	1207:1	1207:1	8	sp
LEAF_NODE	1207:3	1207:3	8	->
LEAF_NODE	1207:5	1207:5	8	out_state
ASSIGN_OP	1207:14	1207:14	6	=
LEAF_NODE	1207:14	1207:14	7	=
RVAL	1207:15	1207:15	6	ososSoi
FIELD	1207:15	1207:15	7	ososSoi
LEAF_NODE	1207:15	1207:15	8	ososSoi
LEAF_NODE	1207:22	1207:22	4	;
EXPR_STATEMENT	1208:1	1208:20	3	sp -> restart_index = 0 ;
EXPR	1208:1	1208:1	4	sp -> restart_index = 0
ASSIGN	1208:1	1208:19	5	sp -> restart_index = 0
LVAL	1208:1	1208:1	6	sp -> restart_index
FIELD	1208:1	1208:5	7	sp -> restart_index
LEAF_NODE	1208:1	1208:1	8	sp
LEAF_NODE	1208:3	1208:3	8	->
LEAF_NODE	1208:5	1208:5	8	restart_index
ASSIGN_OP	1208:18	1208:18	6	=
LEAF_NODE	1208:18	1208:18	7	=
RVAL	1208:19	1208:19	6	0
FIELD	1208:19	1208:19	7	0
LEAF_NODE	1208:19	1208:19	8	0
LEAF_NODE	1208:20	1208:20	4	;
EXPR_STATEMENT	1209:1	1209:46	3	jpeg_std_error ( & ( sp -> libjpeg_jpeg_error_mgr ) ) ;
EXPR	1209:1	1209:1	4	jpeg_std_error ( & ( sp -> libjpeg_jpeg_error_mgr ) )
FUNCTION_CALL	1209:1	1209:45	5	jpeg_std_error ( & ( sp -> libjpeg_jpeg_error_mgr ) )
CALLEE	1209:1	1209:1	6	jpeg_std_error
LEAF_NODE	1209:1	1209:1	7	jpeg_std_error
LEAF_NODE	1209:15	1209:15	6	(
ARGUMENT	1209:16	1209:16	6	& ( sp -> libjpeg_jpeg_error_mgr )
UNARY_EXPR	1209:16	1209:44	7	& ( sp -> libjpeg_jpeg_error_mgr )
UNARY_OPERATOR	1209:16	1209:16	8	&
LEAF_NODE	1209:16	1209:16	9	&
LEAF_NODE	1209:17	1209:17	8	(
FIELD	1209:18	1209:22	8	sp -> libjpeg_jpeg_error_mgr
LEAF_NODE	1209:18	1209:18	9	sp
LEAF_NODE	1209:20	1209:20	9	->
LEAF_NODE	1209:22	1209:22	9	libjpeg_jpeg_error_mgr
LEAF_NODE	1209:44	1209:44	8	)
LEAF_NODE	1209:45	1209:45	6	)
LEAF_NODE	1209:46	1209:46	4	;
EXPR_STATEMENT	1210:1	1210:80	3	sp -> libjpeg_jpeg_error_mgr . output_message = OJPEGLibjpegJpegErrorMgrOutputMessage ;
EXPR	1210:1	1210:1	4	sp -> libjpeg_jpeg_error_mgr . output_message = OJPEGLibjpegJpegErrorMgrOutputMessage
ASSIGN	1210:1	1210:43	5	sp -> libjpeg_jpeg_error_mgr . output_message = OJPEGLibjpegJpegErrorMgrOutputMessage
LVAL	1210:1	1210:1	6	sp -> libjpeg_jpeg_error_mgr . output_message
FIELD	1210:1	1210:28	7	sp -> libjpeg_jpeg_error_mgr . output_message
LEAF_NODE	1210:1	1210:1	8	sp
LEAF_NODE	1210:3	1210:3	8	->
LEAF_NODE	1210:5	1210:5	8	libjpeg_jpeg_error_mgr
LEAF_NODE	1210:27	1210:27	8	.
LEAF_NODE	1210:28	1210:28	8	output_message
ASSIGN_OP	1210:42	1210:42	6	=
LEAF_NODE	1210:42	1210:42	7	=
RVAL	1210:43	1210:43	6	OJPEGLibjpegJpegErrorMgrOutputMessage
FIELD	1210:43	1210:43	7	OJPEGLibjpegJpegErrorMgrOutputMessage
LEAF_NODE	1210:43	1210:43	8	OJPEGLibjpegJpegErrorMgrOutputMessage
LEAF_NODE	1210:80	1210:80	4	;
EXPR_STATEMENT	1211:1	1211:72	3	sp -> libjpeg_jpeg_error_mgr . error_exit = OJPEGLibjpegJpegErrorMgrErrorExit ;
EXPR	1211:1	1211:1	4	sp -> libjpeg_jpeg_error_mgr . error_exit = OJPEGLibjpegJpegErrorMgrErrorExit
ASSIGN	1211:1	1211:39	5	sp -> libjpeg_jpeg_error_mgr . error_exit = OJPEGLibjpegJpegErrorMgrErrorExit
LVAL	1211:1	1211:1	6	sp -> libjpeg_jpeg_error_mgr . error_exit
FIELD	1211:1	1211:28	7	sp -> libjpeg_jpeg_error_mgr . error_exit
LEAF_NODE	1211:1	1211:1	8	sp
LEAF_NODE	1211:3	1211:3	8	->
LEAF_NODE	1211:5	1211:5	8	libjpeg_jpeg_error_mgr
LEAF_NODE	1211:27	1211:27	8	.
LEAF_NODE	1211:28	1211:28	8	error_exit
ASSIGN_OP	1211:38	1211:38	6	=
LEAF_NODE	1211:38	1211:38	7	=
RVAL	1211:39	1211:39	6	OJPEGLibjpegJpegErrorMgrErrorExit
FIELD	1211:39	1211:39	7	OJPEGLibjpegJpegErrorMgrErrorExit
LEAF_NODE	1211:39	1211:39	8	OJPEGLibjpegJpegErrorMgrErrorExit
LEAF_NODE	1211:72	1211:72	4	;
EXPR_STATEMENT	1212:1	1212:69	3	sp -> libjpeg_jpeg_decompress_struct . err = & ( sp -> libjpeg_jpeg_error_mgr ) ;
EXPR	1212:1	1212:1	4	sp -> libjpeg_jpeg_decompress_struct . err = & ( sp -> libjpeg_jpeg_error_mgr )
ASSIGN	1212:1	1212:40	5	sp -> libjpeg_jpeg_decompress_struct . err = & ( sp -> libjpeg_jpeg_error_mgr )
LVAL	1212:1	1212:1	6	sp -> libjpeg_jpeg_decompress_struct . err
FIELD	1212:1	1212:36	7	sp -> libjpeg_jpeg_decompress_struct . err
LEAF_NODE	1212:1	1212:1	8	sp
LEAF_NODE	1212:3	1212:3	8	->
LEAF_NODE	1212:5	1212:5	8	libjpeg_jpeg_decompress_struct
LEAF_NODE	1212:35	1212:35	8	.
LEAF_NODE	1212:36	1212:36	8	err
ASSIGN_OP	1212:39	1212:39	6	=
LEAF_NODE	1212:39	1212:39	7	=
RVAL	1212:40	1212:40	6	& ( sp -> libjpeg_jpeg_error_mgr )
UNARY_EXPR	1212:40	1212:68	7	& ( sp -> libjpeg_jpeg_error_mgr )
UNARY_OPERATOR	1212:40	1212:40	8	&
LEAF_NODE	1212:40	1212:40	9	&
LEAF_NODE	1212:41	1212:41	8	(
FIELD	1212:42	1212:46	8	sp -> libjpeg_jpeg_error_mgr
LEAF_NODE	1212:42	1212:42	9	sp
LEAF_NODE	1212:44	1212:44	9	->
LEAF_NODE	1212:46	1212:46	9	libjpeg_jpeg_error_mgr
LEAF_NODE	1212:68	1212:68	8	)
LEAF_NODE	1212:69	1212:69	4	;
EXPR_STATEMENT	1213:1	1213:58	3	sp -> libjpeg_jpeg_decompress_struct . client_data = ( void * ) tif ;
EXPR	1213:1	1213:1	4	sp -> libjpeg_jpeg_decompress_struct . client_data = ( void * ) tif
ASSIGN	1213:1	1213:48	5	sp -> libjpeg_jpeg_decompress_struct . client_data = ( void * ) tif
LVAL	1213:1	1213:1	6	sp -> libjpeg_jpeg_decompress_struct . client_data
FIELD	1213:1	1213:36	7	sp -> libjpeg_jpeg_decompress_struct . client_data
LEAF_NODE	1213:1	1213:1	8	sp
LEAF_NODE	1213:3	1213:3	8	->
LEAF_NODE	1213:5	1213:5	8	libjpeg_jpeg_decompress_struct
LEAF_NODE	1213:35	1213:35	8	.
LEAF_NODE	1213:36	1213:36	8	client_data
ASSIGN_OP	1213:47	1213:47	6	=
LEAF_NODE	1213:47	1213:47	7	=
RVAL	1213:48	1213:55	6	( void * ) tif
LEAF_NODE	1213:48	1213:48	7	(
TYPE_NAME	1213:49	1213:49	7	void
LEAF_NODE	1213:49	1213:49	8	void
LEAF_NODE	1213:53	1213:53	7	*
LEAF_NODE	1213:54	1213:54	7	)
FIELD	1213:55	1213:55	7	tif
LEAF_NODE	1213:55	1213:55	8	tif
LEAF_NODE	1213:58	1213:58	4	;
SELECTION	1214:1	1215:2	3	
KEYWORD	1214:1	1214:1	4	if
LEAF_NODE	1214:1	1214:1	5	if
LEAF_NODE	1214:4	1214:4	4	(
CONDITION	1214:5	1214:5	4	jpeg_create_decompress_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) ) == 0
EXPR	1214:5	1214:77	5	jpeg_create_decompress_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) ) == 0
FUNCTION_CALL	1214:5	1214:74	6	jpeg_create_decompress_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) )
CALLEE	1214:5	1214:5	7	jpeg_create_decompress_encap
LEAF_NODE	1214:5	1214:5	8	jpeg_create_decompress_encap
LEAF_NODE	1214:33	1214:33	7	(
ARGUMENT	1214:34	1214:34	7	sp
FIELD	1214:34	1214:34	8	sp
LEAF_NODE	1214:34	1214:34	9	sp
LEAF_NODE	1214:36	1214:36	7	,
ARGUMENT	1214:37	1214:37	7	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	1214:37	1214:73	8	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	1214:37	1214:37	9	&
LEAF_NODE	1214:37	1214:37	10	&
LEAF_NODE	1214:38	1214:38	9	(
FIELD	1214:39	1214:43	9	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	1214:39	1214:39	10	sp
LEAF_NODE	1214:41	1214:41	10	->
LEAF_NODE	1214:43	1214:43	10	libjpeg_jpeg_decompress_struct
LEAF_NODE	1214:73	1214:73	9	)
LEAF_NODE	1214:74	1214:74	7	)
EQ_OPERATOR	1214:75	1214:75	6	==
LEAF_NODE	1214:75	1214:75	7	==
FIELD	1214:77	1214:77	6	0
LEAF_NODE	1214:77	1214:77	7	0
LEAF_NODE	1214:78	1214:78	4	)
STATEMENTS	1215:2	1215:2	4	
JUMP_STATEMENT	1215:2	1215:11	5	return ( 0 ) ;
KEYWORD	1215:2	1215:2	6	return
LEAF_NODE	1215:2	1215:2	7	return
DESTINATION	1215:8	1215:8	6	( 0 )
EXPR	1215:8	1215:10	7	( 0 )
LEAF_NODE	1215:8	1215:8	8	(
FIELD	1215:9	1215:9	8	0
LEAF_NODE	1215:9	1215:9	9	0
LEAF_NODE	1215:10	1215:10	8	)
LEAF_NODE	1215:11	1215:11	6	;
EXPR_STATEMENT	1216:1	1216:29	3	sp -> libjpeg_session_active = 1 ;
EXPR	1216:1	1216:1	4	sp -> libjpeg_session_active = 1
ASSIGN	1216:1	1216:28	5	sp -> libjpeg_session_active = 1
LVAL	1216:1	1216:1	6	sp -> libjpeg_session_active
FIELD	1216:1	1216:5	7	sp -> libjpeg_session_active
LEAF_NODE	1216:1	1216:1	8	sp
LEAF_NODE	1216:3	1216:3	8	->
LEAF_NODE	1216:5	1216:5	8	libjpeg_session_active
ASSIGN_OP	1216:27	1216:27	6	=
LEAF_NODE	1216:27	1216:27	7	=
RVAL	1216:28	1216:28	6	1
FIELD	1216:28	1216:28	7	1
LEAF_NODE	1216:28	1216:28	8	1
LEAF_NODE	1216:29	1216:29	4	;
EXPR_STATEMENT	1217:1	1217:46	3	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer = 0 ;
EXPR	1217:1	1217:1	4	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer = 0
ASSIGN	1217:1	1217:45	5	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer = 0
LVAL	1217:1	1217:1	6	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer
FIELD	1217:1	1217:29	7	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer
LEAF_NODE	1217:1	1217:1	8	sp
LEAF_NODE	1217:3	1217:3	8	->
LEAF_NODE	1217:5	1217:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	1217:28	1217:28	8	.
LEAF_NODE	1217:29	1217:29	8	bytes_in_buffer
ASSIGN_OP	1217:44	1217:44	6	=
LEAF_NODE	1217:44	1217:44	7	=
RVAL	1217:45	1217:45	6	0
FIELD	1217:45	1217:45	7	0
LEAF_NODE	1217:45	1217:45	8	0
LEAF_NODE	1217:46	1217:46	4	;
EXPR_STATEMENT	1218:1	1218:76	3	sp -> libjpeg_jpeg_source_mgr . init_source = OJPEGLibjpegJpegSourceMgrInitSource ;
EXPR	1218:1	1218:1	4	sp -> libjpeg_jpeg_source_mgr . init_source = OJPEGLibjpegJpegSourceMgrInitSource
ASSIGN	1218:1	1218:41	5	sp -> libjpeg_jpeg_source_mgr . init_source = OJPEGLibjpegJpegSourceMgrInitSource
LVAL	1218:1	1218:1	6	sp -> libjpeg_jpeg_source_mgr . init_source
FIELD	1218:1	1218:29	7	sp -> libjpeg_jpeg_source_mgr . init_source
LEAF_NODE	1218:1	1218:1	8	sp
LEAF_NODE	1218:3	1218:3	8	->
LEAF_NODE	1218:5	1218:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	1218:28	1218:28	8	.
LEAF_NODE	1218:29	1218:29	8	init_source
ASSIGN_OP	1218:40	1218:40	6	=
LEAF_NODE	1218:40	1218:40	7	=
RVAL	1218:41	1218:41	6	OJPEGLibjpegJpegSourceMgrInitSource
FIELD	1218:41	1218:41	7	OJPEGLibjpegJpegSourceMgrInitSource
LEAF_NODE	1218:41	1218:41	8	OJPEGLibjpegJpegSourceMgrInitSource
LEAF_NODE	1218:76	1218:76	4	;
EXPR_STATEMENT	1219:1	1219:87	3	sp -> libjpeg_jpeg_source_mgr . fill_input_buffer = OJPEGLibjpegJpegSourceMgrFillInputBuffer ;
EXPR	1219:1	1219:1	4	sp -> libjpeg_jpeg_source_mgr . fill_input_buffer = OJPEGLibjpegJpegSourceMgrFillInputBuffer
ASSIGN	1219:1	1219:47	5	sp -> libjpeg_jpeg_source_mgr . fill_input_buffer = OJPEGLibjpegJpegSourceMgrFillInputBuffer
LVAL	1219:1	1219:1	6	sp -> libjpeg_jpeg_source_mgr . fill_input_buffer
FIELD	1219:1	1219:29	7	sp -> libjpeg_jpeg_source_mgr . fill_input_buffer
LEAF_NODE	1219:1	1219:1	8	sp
LEAF_NODE	1219:3	1219:3	8	->
LEAF_NODE	1219:5	1219:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	1219:28	1219:28	8	.
LEAF_NODE	1219:29	1219:29	8	fill_input_buffer
ASSIGN_OP	1219:46	1219:46	6	=
LEAF_NODE	1219:46	1219:46	7	=
RVAL	1219:47	1219:47	6	OJPEGLibjpegJpegSourceMgrFillInputBuffer
FIELD	1219:47	1219:47	7	OJPEGLibjpegJpegSourceMgrFillInputBuffer
LEAF_NODE	1219:47	1219:47	8	OJPEGLibjpegJpegSourceMgrFillInputBuffer
LEAF_NODE	1219:87	1219:87	4	;
EXPR_STATEMENT	1220:1	1220:83	3	sp -> libjpeg_jpeg_source_mgr . skip_input_data = OJPEGLibjpegJpegSourceMgrSkipInputData ;
EXPR	1220:1	1220:1	4	sp -> libjpeg_jpeg_source_mgr . skip_input_data = OJPEGLibjpegJpegSourceMgrSkipInputData
ASSIGN	1220:1	1220:45	5	sp -> libjpeg_jpeg_source_mgr . skip_input_data = OJPEGLibjpegJpegSourceMgrSkipInputData
LVAL	1220:1	1220:1	6	sp -> libjpeg_jpeg_source_mgr . skip_input_data
FIELD	1220:1	1220:29	7	sp -> libjpeg_jpeg_source_mgr . skip_input_data
LEAF_NODE	1220:1	1220:1	8	sp
LEAF_NODE	1220:3	1220:3	8	->
LEAF_NODE	1220:5	1220:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	1220:28	1220:28	8	.
LEAF_NODE	1220:29	1220:29	8	skip_input_data
ASSIGN_OP	1220:44	1220:44	6	=
LEAF_NODE	1220:44	1220:44	7	=
RVAL	1220:45	1220:45	6	OJPEGLibjpegJpegSourceMgrSkipInputData
FIELD	1220:45	1220:45	7	OJPEGLibjpegJpegSourceMgrSkipInputData
LEAF_NODE	1220:45	1220:45	8	OJPEGLibjpegJpegSourceMgrSkipInputData
LEAF_NODE	1220:83	1220:83	4	;
EXPR_STATEMENT	1221:1	1221:87	3	sp -> libjpeg_jpeg_source_mgr . resync_to_restart = OJPEGLibjpegJpegSourceMgrResyncToRestart ;
EXPR	1221:1	1221:1	4	sp -> libjpeg_jpeg_source_mgr . resync_to_restart = OJPEGLibjpegJpegSourceMgrResyncToRestart
ASSIGN	1221:1	1221:47	5	sp -> libjpeg_jpeg_source_mgr . resync_to_restart = OJPEGLibjpegJpegSourceMgrResyncToRestart
LVAL	1221:1	1221:1	6	sp -> libjpeg_jpeg_source_mgr . resync_to_restart
FIELD	1221:1	1221:29	7	sp -> libjpeg_jpeg_source_mgr . resync_to_restart
LEAF_NODE	1221:1	1221:1	8	sp
LEAF_NODE	1221:3	1221:3	8	->
LEAF_NODE	1221:5	1221:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	1221:28	1221:28	8	.
LEAF_NODE	1221:29	1221:29	8	resync_to_restart
ASSIGN_OP	1221:46	1221:46	6	=
LEAF_NODE	1221:46	1221:46	7	=
RVAL	1221:47	1221:47	6	OJPEGLibjpegJpegSourceMgrResyncToRestart
FIELD	1221:47	1221:47	7	OJPEGLibjpegJpegSourceMgrResyncToRestart
LEAF_NODE	1221:47	1221:47	8	OJPEGLibjpegJpegSourceMgrResyncToRestart
LEAF_NODE	1221:87	1221:87	4	;
EXPR_STATEMENT	1222:1	1222:76	3	sp -> libjpeg_jpeg_source_mgr . term_source = OJPEGLibjpegJpegSourceMgrTermSource ;
EXPR	1222:1	1222:1	4	sp -> libjpeg_jpeg_source_mgr . term_source = OJPEGLibjpegJpegSourceMgrTermSource
ASSIGN	1222:1	1222:41	5	sp -> libjpeg_jpeg_source_mgr . term_source = OJPEGLibjpegJpegSourceMgrTermSource
LVAL	1222:1	1222:1	6	sp -> libjpeg_jpeg_source_mgr . term_source
FIELD	1222:1	1222:29	7	sp -> libjpeg_jpeg_source_mgr . term_source
LEAF_NODE	1222:1	1222:1	8	sp
LEAF_NODE	1222:3	1222:3	8	->
LEAF_NODE	1222:5	1222:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	1222:28	1222:28	8	.
LEAF_NODE	1222:29	1222:29	8	term_source
ASSIGN_OP	1222:40	1222:40	6	=
LEAF_NODE	1222:40	1222:40	7	=
RVAL	1222:41	1222:41	6	OJPEGLibjpegJpegSourceMgrTermSource
FIELD	1222:41	1222:41	7	OJPEGLibjpegJpegSourceMgrTermSource
LEAF_NODE	1222:41	1222:41	8	OJPEGLibjpegJpegSourceMgrTermSource
LEAF_NODE	1222:76	1222:76	4	;
EXPR_STATEMENT	1223:1	1223:70	3	sp -> libjpeg_jpeg_decompress_struct . src = & ( sp -> libjpeg_jpeg_source_mgr ) ;
EXPR	1223:1	1223:1	4	sp -> libjpeg_jpeg_decompress_struct . src = & ( sp -> libjpeg_jpeg_source_mgr )
ASSIGN	1223:1	1223:40	5	sp -> libjpeg_jpeg_decompress_struct . src = & ( sp -> libjpeg_jpeg_source_mgr )
LVAL	1223:1	1223:1	6	sp -> libjpeg_jpeg_decompress_struct . src
FIELD	1223:1	1223:36	7	sp -> libjpeg_jpeg_decompress_struct . src
LEAF_NODE	1223:1	1223:1	8	sp
LEAF_NODE	1223:3	1223:3	8	->
LEAF_NODE	1223:5	1223:5	8	libjpeg_jpeg_decompress_struct
LEAF_NODE	1223:35	1223:35	8	.
LEAF_NODE	1223:36	1223:36	8	src
ASSIGN_OP	1223:39	1223:39	6	=
LEAF_NODE	1223:39	1223:39	7	=
RVAL	1223:40	1223:40	6	& ( sp -> libjpeg_jpeg_source_mgr )
UNARY_EXPR	1223:40	1223:69	7	& ( sp -> libjpeg_jpeg_source_mgr )
UNARY_OPERATOR	1223:40	1223:40	8	&
LEAF_NODE	1223:40	1223:40	9	&
LEAF_NODE	1223:41	1223:41	8	(
FIELD	1223:42	1223:46	8	sp -> libjpeg_jpeg_source_mgr
LEAF_NODE	1223:42	1223:42	9	sp
LEAF_NODE	1223:44	1223:44	9	->
LEAF_NODE	1223:46	1223:46	9	libjpeg_jpeg_source_mgr
LEAF_NODE	1223:69	1223:69	8	)
LEAF_NODE	1223:70	1223:70	4	;
SELECTION	1224:1	1225:2	3	
KEYWORD	1224:1	1224:1	4	if
LEAF_NODE	1224:1	1224:1	5	if
LEAF_NODE	1224:4	1224:4	4	(
CONDITION	1224:5	1224:5	4	jpeg_read_header_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , 1 ) == 0
EXPR	1224:5	1224:73	5	jpeg_read_header_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , 1 ) == 0
FUNCTION_CALL	1224:5	1224:70	6	jpeg_read_header_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) , 1 )
CALLEE	1224:5	1224:5	7	jpeg_read_header_encap
LEAF_NODE	1224:5	1224:5	8	jpeg_read_header_encap
LEAF_NODE	1224:27	1224:27	7	(
ARGUMENT	1224:28	1224:28	7	sp
FIELD	1224:28	1224:28	8	sp
LEAF_NODE	1224:28	1224:28	9	sp
LEAF_NODE	1224:30	1224:30	7	,
ARGUMENT	1224:31	1224:31	7	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	1224:31	1224:67	8	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	1224:31	1224:31	9	&
LEAF_NODE	1224:31	1224:31	10	&
LEAF_NODE	1224:32	1224:32	9	(
FIELD	1224:33	1224:37	9	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	1224:33	1224:33	10	sp
LEAF_NODE	1224:35	1224:35	10	->
LEAF_NODE	1224:37	1224:37	10	libjpeg_jpeg_decompress_struct
LEAF_NODE	1224:67	1224:67	9	)
LEAF_NODE	1224:68	1224:68	7	,
ARGUMENT	1224:69	1224:69	7	1
FIELD	1224:69	1224:69	8	1
LEAF_NODE	1224:69	1224:69	9	1
LEAF_NODE	1224:70	1224:70	7	)
EQ_OPERATOR	1224:71	1224:71	6	==
LEAF_NODE	1224:71	1224:71	7	==
FIELD	1224:73	1224:73	6	0
LEAF_NODE	1224:73	1224:73	7	0
LEAF_NODE	1224:74	1224:74	4	)
STATEMENTS	1225:2	1225:2	4	
JUMP_STATEMENT	1225:2	1225:11	5	return ( 0 ) ;
KEYWORD	1225:2	1225:2	6	return
LEAF_NODE	1225:2	1225:2	7	return
DESTINATION	1225:8	1225:8	6	( 0 )
EXPR	1225:8	1225:10	7	( 0 )
LEAF_NODE	1225:8	1225:8	8	(
FIELD	1225:9	1225:9	8	0
LEAF_NODE	1225:9	1225:9	9	0
LEAF_NODE	1225:10	1225:10	8	)
LEAF_NODE	1225:11	1225:11	6	;
SELECTION	1226:1	1227:1	3	
KEYWORD	1226:1	1226:1	4	if
LEAF_NODE	1226:1	1226:1	5	if
LEAF_NODE	1226:4	1226:4	4	(
CONDITION	1226:5	1226:5	4	( sp -> subsampling_force_desubsampling_inside_decompression == 0 ) && ( sp -> samples_per_pixel_per_plane > 1 )
EXPR	1226:5	1226:5	5	( sp -> subsampling_force_desubsampling_inside_decompression == 0 ) && ( sp -> samples_per_pixel_per_plane > 1 )
AND	1226:5	1226:70	6	( sp -> subsampling_force_desubsampling_inside_decompression == 0 ) && ( sp -> samples_per_pixel_per_plane > 1 )
EXPR	1226:5	1226:65	7	( sp -> subsampling_force_desubsampling_inside_decompression == 0 )
LEAF_NODE	1226:5	1226:5	8	(
FIELD	1226:6	1226:10	8	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1226:6	1226:6	9	sp
LEAF_NODE	1226:8	1226:8	9	->
LEAF_NODE	1226:10	1226:10	9	subsampling_force_desubsampling_inside_decompression
EQ_OPERATOR	1226:62	1226:62	8	==
LEAF_NODE	1226:62	1226:62	9	==
FIELD	1226:64	1226:64	8	0
LEAF_NODE	1226:64	1226:64	9	0
LEAF_NODE	1226:65	1226:65	8	)
LEAF_NODE	1226:67	1226:67	7	&&
EXPR	1226:70	1226:104	7	( sp -> samples_per_pixel_per_plane > 1 )
LEAF_NODE	1226:70	1226:70	8	(
FIELD	1226:71	1226:75	8	sp -> samples_per_pixel_per_plane
LEAF_NODE	1226:71	1226:71	9	sp
LEAF_NODE	1226:73	1226:73	9	->
LEAF_NODE	1226:75	1226:75	9	samples_per_pixel_per_plane
REL_OPERATOR	1226:102	1226:102	8	>
LEAF_NODE	1226:102	1226:102	9	>
FIELD	1226:103	1226:103	8	1
LEAF_NODE	1226:103	1226:103	9	1
LEAF_NODE	1226:104	1226:104	8	)
LEAF_NODE	1226:105	1226:105	4	)
STATEMENTS	1227:1	1283:1	4	
LEAF_NODE	1227:1	1227:1	5	{
STATEMENTS	1228:2	1233:2	5	
EXPR_STATEMENT	1228:2	1228:51	6	sp -> libjpeg_jpeg_decompress_struct . raw_data_out = 1 ;
EXPR	1228:2	1228:2	7	sp -> libjpeg_jpeg_decompress_struct . raw_data_out = 1
ASSIGN	1228:2	1228:50	8	sp -> libjpeg_jpeg_decompress_struct . raw_data_out = 1
LVAL	1228:2	1228:2	9	sp -> libjpeg_jpeg_decompress_struct . raw_data_out
FIELD	1228:2	1228:37	10	sp -> libjpeg_jpeg_decompress_struct . raw_data_out
LEAF_NODE	1228:2	1228:2	11	sp
LEAF_NODE	1228:4	1228:4	11	->
LEAF_NODE	1228:6	1228:6	11	libjpeg_jpeg_decompress_struct
LEAF_NODE	1228:36	1228:36	11	.
LEAF_NODE	1228:37	1228:37	11	raw_data_out
ASSIGN_OP	1228:49	1228:49	9	=
LEAF_NODE	1228:49	1228:49	10	=
RVAL	1228:50	1228:50	9	1
FIELD	1228:50	1228:50	10	1
LEAF_NODE	1228:50	1228:50	11	1
LEAF_NODE	1228:51	1228:51	7	;
EXPR_STATEMENT	1230:2	1230:62	6	sp -> libjpeg_jpeg_decompress_struct . do_fancy_upsampling = FALSE ;
EXPR	1230:2	1230:2	7	sp -> libjpeg_jpeg_decompress_struct . do_fancy_upsampling = FALSE
ASSIGN	1230:2	1230:57	8	sp -> libjpeg_jpeg_decompress_struct . do_fancy_upsampling = FALSE
LVAL	1230:2	1230:2	9	sp -> libjpeg_jpeg_decompress_struct . do_fancy_upsampling
FIELD	1230:2	1230:37	10	sp -> libjpeg_jpeg_decompress_struct . do_fancy_upsampling
LEAF_NODE	1230:2	1230:2	11	sp
LEAF_NODE	1230:4	1230:4	11	->
LEAF_NODE	1230:6	1230:6	11	libjpeg_jpeg_decompress_struct
LEAF_NODE	1230:36	1230:36	11	.
LEAF_NODE	1230:37	1230:37	11	do_fancy_upsampling
ASSIGN_OP	1230:56	1230:56	9	=
LEAF_NODE	1230:56	1230:56	10	=
RVAL	1230:57	1230:57	9	FALSE
FIELD	1230:57	1230:57	10	FALSE
LEAF_NODE	1230:57	1230:57	11	FALSE
LEAF_NODE	1230:62	1230:62	7	;
EXPR_STATEMENT	1232:2	1232:32	6	sp -> libjpeg_jpeg_query_style = 0 ;
EXPR	1232:2	1232:2	7	sp -> libjpeg_jpeg_query_style = 0
ASSIGN	1232:2	1232:31	8	sp -> libjpeg_jpeg_query_style = 0
LVAL	1232:2	1232:2	9	sp -> libjpeg_jpeg_query_style
FIELD	1232:2	1232:6	10	sp -> libjpeg_jpeg_query_style
LEAF_NODE	1232:2	1232:2	11	sp
LEAF_NODE	1232:4	1232:4	11	->
LEAF_NODE	1232:6	1232:6	11	libjpeg_jpeg_query_style
ASSIGN_OP	1232:30	1232:30	9	=
LEAF_NODE	1232:30	1232:30	10	=
RVAL	1232:31	1232:31	9	0
FIELD	1232:31	1232:31	10	0
LEAF_NODE	1232:31	1232:31	11	0
LEAF_NODE	1232:32	1232:32	7	;
SELECTION	1233:2	1234:2	6	
KEYWORD	1233:2	1233:2	7	if
LEAF_NODE	1233:2	1233:2	8	if
LEAF_NODE	1233:5	1233:5	7	(
CONDITION	1233:6	1233:6	7	sp -> subsampling_convert_log == 0
EXPR	1233:6	1233:35	8	sp -> subsampling_convert_log == 0
FIELD	1233:6	1233:10	9	sp -> subsampling_convert_log
LEAF_NODE	1233:6	1233:6	10	sp
LEAF_NODE	1233:8	1233:8	10	->
LEAF_NODE	1233:10	1233:10	10	subsampling_convert_log
EQ_OPERATOR	1233:33	1233:33	9	==
LEAF_NODE	1233:33	1233:33	10	==
FIELD	1233:35	1233:35	9	0
LEAF_NODE	1233:35	1233:35	10	0
LEAF_NODE	1233:36	1233:36	7	)
STATEMENTS	1234:2	1282:2	7	
LEAF_NODE	1234:2	1234:2	8	{
STATEMENTS	1235:3	1281:3	8	
EXPR_STATEMENT	1235:3	1235:46	9	assert ( sp -> subsampling_convert_ycbcrbuf == 0 ) ;
EXPR	1235:3	1235:3	10	assert ( sp -> subsampling_convert_ycbcrbuf == 0 )
FUNCTION_CALL	1235:3	1235:45	11	assert ( sp -> subsampling_convert_ycbcrbuf == 0 )
CALLEE	1235:3	1235:3	12	assert
LEAF_NODE	1235:3	1235:3	13	assert
LEAF_NODE	1235:9	1235:9	12	(
ARGUMENT	1235:10	1235:44	12	sp -> subsampling_convert_ycbcrbuf == 0
FIELD	1235:10	1235:14	13	sp -> subsampling_convert_ycbcrbuf
LEAF_NODE	1235:10	1235:10	14	sp
LEAF_NODE	1235:12	1235:12	14	->
LEAF_NODE	1235:14	1235:14	14	subsampling_convert_ycbcrbuf
EQ_OPERATOR	1235:42	1235:42	13	==
LEAF_NODE	1235:42	1235:42	14	==
FIELD	1235:44	1235:44	13	0
LEAF_NODE	1235:44	1235:44	14	0
LEAF_NODE	1235:45	1235:45	12	)
LEAF_NODE	1235:46	1235:46	10	;
EXPR_STATEMENT	1236:3	1236:48	9	assert ( sp -> subsampling_convert_ycbcrimage == 0 ) ;
EXPR	1236:3	1236:3	10	assert ( sp -> subsampling_convert_ycbcrimage == 0 )
FUNCTION_CALL	1236:3	1236:47	11	assert ( sp -> subsampling_convert_ycbcrimage == 0 )
CALLEE	1236:3	1236:3	12	assert
LEAF_NODE	1236:3	1236:3	13	assert
LEAF_NODE	1236:9	1236:9	12	(
ARGUMENT	1236:10	1236:46	12	sp -> subsampling_convert_ycbcrimage == 0
FIELD	1236:10	1236:14	13	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1236:10	1236:10	14	sp
LEAF_NODE	1236:12	1236:12	14	->
LEAF_NODE	1236:14	1236:14	14	subsampling_convert_ycbcrimage
EQ_OPERATOR	1236:44	1236:44	13	==
LEAF_NODE	1236:44	1236:44	14	==
FIELD	1236:46	1236:46	13	0
LEAF_NODE	1236:46	1236:46	14	0
LEAF_NODE	1236:47	1236:47	12	)
LEAF_NODE	1236:48	1236:48	10	;
LEAF_NODE	1237:3	1237:3	9	sp
LEAF_NODE	1237:5	1237:5	9	->
LEAF_NODE	1237:7	1237:7	9	subsampling_convert_ylinelen
LEAF_NODE	1237:35	1237:35	9	=
LEAF_NODE	1237:36	1237:36	9	(
LEAF_NODE	1237:37	1237:37	9	(
LEAF_NODE	1237:38	1237:38	9	sp
LEAF_NODE	1237:40	1237:40	9	->
LEAF_NODE	1237:42	1237:42	9	strile_width
LEAF_NODE	1237:54	1237:54	9	+
LEAF_NODE	1237:55	1237:55	9	sp
LEAF_NODE	1237:57	1237:57	9	->
LEAF_NODE	1237:59	1237:59	9	subsampling_hor
LEAF_NODE	1237:74	1237:74	9	*
LEAF_NODE	1237:75	1237:75	9	8
LEAF_NODE	1237:76	1237:76	9	-
LEAF_NODE	1237:77	1237:77	9	1
LEAF_NODE	1237:78	1237:78	9	)
LEAF_NODE	1237:79	1237:79	9	/
LEAF_NODE	1237:80	1237:80	9	(
LEAF_NODE	1237:81	1237:81	9	sp
LEAF_NODE	1237:83	1237:83	9	->
LEAF_NODE	1237:85	1237:85	9	subsampling_hor
LEAF_NODE	1237:100	1237:100	9	*
LEAF_NODE	1237:101	1237:101	9	8
LEAF_NODE	1237:102	1237:102	9	)
LEAF_NODE	1237:103	1237:103	9	*
LEAF_NODE	1237:104	1237:104	9	sp
LEAF_NODE	1237:106	1237:106	9	->
LEAF_NODE	1237:108	1237:108	9	subsampling_hor
LEAF_NODE	1237:123	1237:123	9	*
LEAF_NODE	1237:124	1237:124	9	8
LEAF_NODE	1237:125	1237:125	9	)
LEAF_NODE	1237:126	1237:126	9	;
EXPR_STATEMENT	1238:3	1238:55	9	sp -> subsampling_convert_ylines = sp -> subsampling_ver * 8 ;
EXPR	1238:3	1238:3	10	sp -> subsampling_convert_ylines = sp -> subsampling_ver * 8
ASSIGN	1238:3	1238:34	11	sp -> subsampling_convert_ylines = sp -> subsampling_ver * 8
LVAL	1238:3	1238:3	12	sp -> subsampling_convert_ylines
FIELD	1238:3	1238:7	13	sp -> subsampling_convert_ylines
LEAF_NODE	1238:3	1238:3	14	sp
LEAF_NODE	1238:5	1238:5	14	->
LEAF_NODE	1238:7	1238:7	14	subsampling_convert_ylines
ASSIGN_OP	1238:33	1238:33	12	=
LEAF_NODE	1238:33	1238:33	13	=
RVAL	1238:34	1238:54	12	sp -> subsampling_ver * 8
FIELD	1238:34	1238:38	13	sp -> subsampling_ver
LEAF_NODE	1238:34	1238:34	14	sp
LEAF_NODE	1238:36	1238:36	14	->
LEAF_NODE	1238:38	1238:38	14	subsampling_ver
LEAF_NODE	1238:53	1238:53	13	*
FIELD	1238:54	1238:54	13	8
LEAF_NODE	1238:54	1238:54	14	8
LEAF_NODE	1238:55	1238:55	10	;
EXPR_STATEMENT	1239:3	1239:88	9	sp -> subsampling_convert_clinelen = sp -> subsampling_convert_ylinelen / sp -> subsampling_hor ;
EXPR	1239:3	1239:3	10	sp -> subsampling_convert_clinelen = sp -> subsampling_convert_ylinelen / sp -> subsampling_hor
ASSIGN	1239:3	1239:36	11	sp -> subsampling_convert_clinelen = sp -> subsampling_convert_ylinelen / sp -> subsampling_hor
LVAL	1239:3	1239:3	12	sp -> subsampling_convert_clinelen
FIELD	1239:3	1239:7	13	sp -> subsampling_convert_clinelen
LEAF_NODE	1239:3	1239:3	14	sp
LEAF_NODE	1239:5	1239:5	14	->
LEAF_NODE	1239:7	1239:7	14	subsampling_convert_clinelen
ASSIGN_OP	1239:35	1239:35	12	=
LEAF_NODE	1239:35	1239:35	13	=
RVAL	1239:36	1239:69	12	sp -> subsampling_convert_ylinelen / sp -> subsampling_hor
FIELD	1239:36	1239:40	13	sp -> subsampling_convert_ylinelen
LEAF_NODE	1239:36	1239:36	14	sp
LEAF_NODE	1239:38	1239:38	14	->
LEAF_NODE	1239:40	1239:40	14	subsampling_convert_ylinelen
LEAF_NODE	1239:68	1239:68	13	/
FIELD	1239:69	1239:73	13	sp -> subsampling_hor
LEAF_NODE	1239:69	1239:69	14	sp
LEAF_NODE	1239:71	1239:71	14	->
LEAF_NODE	1239:73	1239:73	14	subsampling_hor
LEAF_NODE	1239:88	1239:88	10	;
EXPR_STATEMENT	1240:3	1240:35	9	sp -> subsampling_convert_clines = 8 ;
EXPR	1240:3	1240:3	10	sp -> subsampling_convert_clines = 8
ASSIGN	1240:3	1240:34	11	sp -> subsampling_convert_clines = 8
LVAL	1240:3	1240:3	12	sp -> subsampling_convert_clines
FIELD	1240:3	1240:7	13	sp -> subsampling_convert_clines
LEAF_NODE	1240:3	1240:3	14	sp
LEAF_NODE	1240:5	1240:5	14	->
LEAF_NODE	1240:7	1240:7	14	subsampling_convert_clines
ASSIGN_OP	1240:33	1240:33	12	=
LEAF_NODE	1240:33	1240:33	13	=
RVAL	1240:34	1240:34	12	8
FIELD	1240:34	1240:34	13	8
LEAF_NODE	1240:34	1240:34	14	8
LEAF_NODE	1240:35	1240:35	10	;
EXPR_STATEMENT	1241:3	1241:98	9	sp -> subsampling_convert_ybuflen = sp -> subsampling_convert_ylinelen * sp -> subsampling_convert_ylines ;
EXPR	1241:3	1241:3	10	sp -> subsampling_convert_ybuflen = sp -> subsampling_convert_ylinelen * sp -> subsampling_convert_ylines
ASSIGN	1241:3	1241:35	11	sp -> subsampling_convert_ybuflen = sp -> subsampling_convert_ylinelen * sp -> subsampling_convert_ylines
LVAL	1241:3	1241:3	12	sp -> subsampling_convert_ybuflen
FIELD	1241:3	1241:7	13	sp -> subsampling_convert_ybuflen
LEAF_NODE	1241:3	1241:3	14	sp
LEAF_NODE	1241:5	1241:5	14	->
LEAF_NODE	1241:7	1241:7	14	subsampling_convert_ybuflen
ASSIGN_OP	1241:34	1241:34	12	=
LEAF_NODE	1241:34	1241:34	13	=
RVAL	1241:35	1241:68	12	sp -> subsampling_convert_ylinelen * sp -> subsampling_convert_ylines
FIELD	1241:35	1241:39	13	sp -> subsampling_convert_ylinelen
LEAF_NODE	1241:35	1241:35	14	sp
LEAF_NODE	1241:37	1241:37	14	->
LEAF_NODE	1241:39	1241:39	14	subsampling_convert_ylinelen
LEAF_NODE	1241:67	1241:67	13	*
FIELD	1241:68	1241:72	13	sp -> subsampling_convert_ylines
LEAF_NODE	1241:68	1241:68	14	sp
LEAF_NODE	1241:70	1241:70	14	->
LEAF_NODE	1241:72	1241:72	14	subsampling_convert_ylines
LEAF_NODE	1241:98	1241:98	10	;
EXPR_STATEMENT	1242:3	1242:98	9	sp -> subsampling_convert_cbuflen = sp -> subsampling_convert_clinelen * sp -> subsampling_convert_clines ;
EXPR	1242:3	1242:3	10	sp -> subsampling_convert_cbuflen = sp -> subsampling_convert_clinelen * sp -> subsampling_convert_clines
ASSIGN	1242:3	1242:35	11	sp -> subsampling_convert_cbuflen = sp -> subsampling_convert_clinelen * sp -> subsampling_convert_clines
LVAL	1242:3	1242:3	12	sp -> subsampling_convert_cbuflen
FIELD	1242:3	1242:7	13	sp -> subsampling_convert_cbuflen
LEAF_NODE	1242:3	1242:3	14	sp
LEAF_NODE	1242:5	1242:5	14	->
LEAF_NODE	1242:7	1242:7	14	subsampling_convert_cbuflen
ASSIGN_OP	1242:34	1242:34	12	=
LEAF_NODE	1242:34	1242:34	13	=
RVAL	1242:35	1242:68	12	sp -> subsampling_convert_clinelen * sp -> subsampling_convert_clines
FIELD	1242:35	1242:39	13	sp -> subsampling_convert_clinelen
LEAF_NODE	1242:35	1242:35	14	sp
LEAF_NODE	1242:37	1242:37	14	->
LEAF_NODE	1242:39	1242:39	14	subsampling_convert_clinelen
LEAF_NODE	1242:67	1242:67	13	*
FIELD	1242:68	1242:72	13	sp -> subsampling_convert_clines
LEAF_NODE	1242:68	1242:68	14	sp
LEAF_NODE	1242:70	1242:70	14	->
LEAF_NODE	1242:72	1242:72	14	subsampling_convert_clines
LEAF_NODE	1242:98	1242:98	10	;
EXPR_STATEMENT	1243:3	1243:104	9	sp -> subsampling_convert_ycbcrbuflen = sp -> subsampling_convert_ybuflen + 2 * sp -> subsampling_convert_cbuflen ;
EXPR	1243:3	1243:3	10	sp -> subsampling_convert_ycbcrbuflen = sp -> subsampling_convert_ybuflen + 2 * sp -> subsampling_convert_cbuflen
ASSIGN	1243:3	1243:39	11	sp -> subsampling_convert_ycbcrbuflen = sp -> subsampling_convert_ybuflen + 2 * sp -> subsampling_convert_cbuflen
LVAL	1243:3	1243:3	12	sp -> subsampling_convert_ycbcrbuflen
FIELD	1243:3	1243:7	13	sp -> subsampling_convert_ycbcrbuflen
LEAF_NODE	1243:3	1243:3	14	sp
LEAF_NODE	1243:5	1243:5	14	->
LEAF_NODE	1243:7	1243:7	14	subsampling_convert_ycbcrbuflen
ASSIGN_OP	1243:38	1243:38	12	=
LEAF_NODE	1243:38	1243:38	13	=
RVAL	1243:39	1243:73	12	sp -> subsampling_convert_ybuflen + 2 * sp -> subsampling_convert_cbuflen
FIELD	1243:39	1243:43	13	sp -> subsampling_convert_ybuflen
LEAF_NODE	1243:39	1243:39	14	sp
LEAF_NODE	1243:41	1243:41	14	->
LEAF_NODE	1243:43	1243:43	14	subsampling_convert_ybuflen
LEAF_NODE	1243:70	1243:70	13	+
FIELD	1243:71	1243:71	13	2
LEAF_NODE	1243:71	1243:71	14	2
LEAF_NODE	1243:72	1243:72	13	*
FIELD	1243:73	1243:77	13	sp -> subsampling_convert_cbuflen
LEAF_NODE	1243:73	1243:73	14	sp
LEAF_NODE	1243:75	1243:75	14	->
LEAF_NODE	1243:77	1243:77	14	subsampling_convert_cbuflen
LEAF_NODE	1243:104	1243:104	10	;
EXPR_STATEMENT	1250:3	1250:87	9	sp -> subsampling_convert_ycbcrbuf = _TIFFcalloc ( 1 , sp -> subsampling_convert_ycbcrbuflen ) ;
EXPR	1250:3	1250:3	10	sp -> subsampling_convert_ycbcrbuf = _TIFFcalloc ( 1 , sp -> subsampling_convert_ycbcrbuflen )
ASSIGN	1250:3	1250:36	11	sp -> subsampling_convert_ycbcrbuf = _TIFFcalloc ( 1 , sp -> subsampling_convert_ycbcrbuflen )
LVAL	1250:3	1250:3	12	sp -> subsampling_convert_ycbcrbuf
FIELD	1250:3	1250:7	13	sp -> subsampling_convert_ycbcrbuf
LEAF_NODE	1250:3	1250:3	14	sp
LEAF_NODE	1250:5	1250:5	14	->
LEAF_NODE	1250:7	1250:7	14	subsampling_convert_ycbcrbuf
ASSIGN_OP	1250:35	1250:35	12	=
LEAF_NODE	1250:35	1250:35	13	=
RVAL	1250:36	1250:36	12	_TIFFcalloc ( 1 , sp -> subsampling_convert_ycbcrbuflen )
FUNCTION_CALL	1250:36	1250:86	13	_TIFFcalloc ( 1 , sp -> subsampling_convert_ycbcrbuflen )
CALLEE	1250:36	1250:36	14	_TIFFcalloc
LEAF_NODE	1250:36	1250:36	15	_TIFFcalloc
LEAF_NODE	1250:47	1250:47	14	(
ARGUMENT	1250:48	1250:48	14	1
FIELD	1250:48	1250:48	15	1
LEAF_NODE	1250:48	1250:48	16	1
LEAF_NODE	1250:49	1250:49	14	,
ARGUMENT	1250:51	1250:51	14	sp -> subsampling_convert_ycbcrbuflen
FIELD	1250:51	1250:55	15	sp -> subsampling_convert_ycbcrbuflen
LEAF_NODE	1250:51	1250:51	16	sp
LEAF_NODE	1250:53	1250:53	16	->
LEAF_NODE	1250:55	1250:55	16	subsampling_convert_ycbcrbuflen
LEAF_NODE	1250:86	1250:86	14	)
LEAF_NODE	1250:87	1250:87	10	;
SELECTION	1251:3	1252:3	9	
KEYWORD	1251:3	1251:3	10	if
LEAF_NODE	1251:3	1251:3	11	if
LEAF_NODE	1251:6	1251:6	10	(
CONDITION	1251:7	1251:7	10	sp -> subsampling_convert_ycbcrbuf == 0
EXPR	1251:7	1251:41	11	sp -> subsampling_convert_ycbcrbuf == 0
FIELD	1251:7	1251:11	12	sp -> subsampling_convert_ycbcrbuf
LEAF_NODE	1251:7	1251:7	13	sp
LEAF_NODE	1251:9	1251:9	13	->
LEAF_NODE	1251:11	1251:11	13	subsampling_convert_ycbcrbuf
EQ_OPERATOR	1251:39	1251:39	12	==
LEAF_NODE	1251:39	1251:39	13	==
FIELD	1251:41	1251:41	12	0
LEAF_NODE	1251:41	1251:41	13	0
LEAF_NODE	1251:42	1251:42	10	)
STATEMENTS	1252:3	1255:3	10	
LEAF_NODE	1252:3	1252:3	11	{
STATEMENTS	1253:4	1254:4	11	
EXPR_STATEMENT	1253:4	1253:60	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1253:4	1253:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1253:4	1253:59	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1253:4	1253:4	15	TIFFErrorExt
LEAF_NODE	1253:4	1253:4	16	TIFFErrorExt
LEAF_NODE	1253:16	1253:16	15	(
ARGUMENT	1253:17	1253:17	15	tif -> tif_clientdata
FIELD	1253:17	1253:22	16	tif -> tif_clientdata
LEAF_NODE	1253:17	1253:17	17	tif
LEAF_NODE	1253:20	1253:20	17	->
LEAF_NODE	1253:22	1253:22	17	tif_clientdata
LEAF_NODE	1253:36	1253:36	15	,
ARGUMENT	1253:37	1253:37	15	module
FIELD	1253:37	1253:37	16	module
LEAF_NODE	1253:37	1253:37	17	module
LEAF_NODE	1253:43	1253:43	15	,
ARGUMENT	1253:44	1253:44	15	"Out of memory"
FIELD	1253:44	1253:44	16	"Out of memory"
LEAF_NODE	1253:44	1253:44	17	"Out of memory"
LEAF_NODE	1253:59	1253:59	15	)
LEAF_NODE	1253:60	1253:60	13	;
JUMP_STATEMENT	1254:4	1254:13	12	return ( 0 ) ;
KEYWORD	1254:4	1254:4	13	return
LEAF_NODE	1254:4	1254:4	14	return
DESTINATION	1254:10	1254:10	13	( 0 )
EXPR	1254:10	1254:12	14	( 0 )
LEAF_NODE	1254:10	1254:10	15	(
FIELD	1254:11	1254:11	15	0
LEAF_NODE	1254:11	1254:11	16	0
LEAF_NODE	1254:12	1254:12	15	)
LEAF_NODE	1254:13	1254:13	13	;
LEAF_NODE	1255:3	1255:3	11	}
EXPR_STATEMENT	1256:3	1256:64	9	sp -> subsampling_convert_ybuf = sp -> subsampling_convert_ycbcrbuf ;
EXPR	1256:3	1256:3	10	sp -> subsampling_convert_ybuf = sp -> subsampling_convert_ycbcrbuf
ASSIGN	1256:3	1256:32	11	sp -> subsampling_convert_ybuf = sp -> subsampling_convert_ycbcrbuf
LVAL	1256:3	1256:3	12	sp -> subsampling_convert_ybuf
FIELD	1256:3	1256:7	13	sp -> subsampling_convert_ybuf
LEAF_NODE	1256:3	1256:3	14	sp
LEAF_NODE	1256:5	1256:5	14	->
LEAF_NODE	1256:7	1256:7	14	subsampling_convert_ybuf
ASSIGN_OP	1256:31	1256:31	12	=
LEAF_NODE	1256:31	1256:31	13	=
RVAL	1256:32	1256:32	12	sp -> subsampling_convert_ycbcrbuf
FIELD	1256:32	1256:36	13	sp -> subsampling_convert_ycbcrbuf
LEAF_NODE	1256:32	1256:32	14	sp
LEAF_NODE	1256:34	1256:34	14	->
LEAF_NODE	1256:36	1256:36	14	subsampling_convert_ycbcrbuf
LEAF_NODE	1256:64	1256:64	10	;
EXPR_STATEMENT	1257:3	1257:93	9	sp -> subsampling_convert_cbbuf = sp -> subsampling_convert_ybuf + sp -> subsampling_convert_ybuflen ;
EXPR	1257:3	1257:3	10	sp -> subsampling_convert_cbbuf = sp -> subsampling_convert_ybuf + sp -> subsampling_convert_ybuflen
ASSIGN	1257:3	1257:33	11	sp -> subsampling_convert_cbbuf = sp -> subsampling_convert_ybuf + sp -> subsampling_convert_ybuflen
LVAL	1257:3	1257:3	12	sp -> subsampling_convert_cbbuf
FIELD	1257:3	1257:7	13	sp -> subsampling_convert_cbbuf
LEAF_NODE	1257:3	1257:3	14	sp
LEAF_NODE	1257:5	1257:5	14	->
LEAF_NODE	1257:7	1257:7	14	subsampling_convert_cbbuf
ASSIGN_OP	1257:32	1257:32	12	=
LEAF_NODE	1257:32	1257:32	13	=
RVAL	1257:33	1257:62	12	sp -> subsampling_convert_ybuf + sp -> subsampling_convert_ybuflen
FIELD	1257:33	1257:37	13	sp -> subsampling_convert_ybuf
LEAF_NODE	1257:33	1257:33	14	sp
LEAF_NODE	1257:35	1257:35	14	->
LEAF_NODE	1257:37	1257:37	14	subsampling_convert_ybuf
LEAF_NODE	1257:61	1257:61	13	+
FIELD	1257:62	1257:66	13	sp -> subsampling_convert_ybuflen
LEAF_NODE	1257:62	1257:62	14	sp
LEAF_NODE	1257:64	1257:64	14	->
LEAF_NODE	1257:66	1257:66	14	subsampling_convert_ybuflen
LEAF_NODE	1257:93	1257:93	10	;
EXPR_STATEMENT	1258:3	1258:94	9	sp -> subsampling_convert_crbuf = sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_cbuflen ;
EXPR	1258:3	1258:3	10	sp -> subsampling_convert_crbuf = sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_cbuflen
ASSIGN	1258:3	1258:33	11	sp -> subsampling_convert_crbuf = sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_cbuflen
LVAL	1258:3	1258:3	12	sp -> subsampling_convert_crbuf
FIELD	1258:3	1258:7	13	sp -> subsampling_convert_crbuf
LEAF_NODE	1258:3	1258:3	14	sp
LEAF_NODE	1258:5	1258:5	14	->
LEAF_NODE	1258:7	1258:7	14	subsampling_convert_crbuf
ASSIGN_OP	1258:32	1258:32	12	=
LEAF_NODE	1258:32	1258:32	13	=
RVAL	1258:33	1258:63	12	sp -> subsampling_convert_cbbuf + sp -> subsampling_convert_cbuflen
FIELD	1258:33	1258:37	13	sp -> subsampling_convert_cbbuf
LEAF_NODE	1258:33	1258:33	14	sp
LEAF_NODE	1258:35	1258:35	14	->
LEAF_NODE	1258:37	1258:37	14	subsampling_convert_cbbuf
LEAF_NODE	1258:62	1258:62	13	+
FIELD	1258:63	1258:67	13	sp -> subsampling_convert_cbuflen
LEAF_NODE	1258:63	1258:63	14	sp
LEAF_NODE	1258:65	1258:65	14	->
LEAF_NODE	1258:67	1258:67	14	subsampling_convert_cbuflen
LEAF_NODE	1258:94	1258:94	10	;
EXPR_STATEMENT	1259:3	1259:106	9	sp -> subsampling_convert_ycbcrimagelen = 3 + sp -> subsampling_convert_ylines + 2 * sp -> subsampling_convert_clines ;
EXPR	1259:3	1259:3	10	sp -> subsampling_convert_ycbcrimagelen = 3 + sp -> subsampling_convert_ylines + 2 * sp -> subsampling_convert_clines
ASSIGN	1259:3	1259:41	11	sp -> subsampling_convert_ycbcrimagelen = 3 + sp -> subsampling_convert_ylines + 2 * sp -> subsampling_convert_clines
LVAL	1259:3	1259:3	12	sp -> subsampling_convert_ycbcrimagelen
FIELD	1259:3	1259:7	13	sp -> subsampling_convert_ycbcrimagelen
LEAF_NODE	1259:3	1259:3	14	sp
LEAF_NODE	1259:5	1259:5	14	->
LEAF_NODE	1259:7	1259:7	14	subsampling_convert_ycbcrimagelen
ASSIGN_OP	1259:40	1259:40	12	=
LEAF_NODE	1259:40	1259:40	13	=
RVAL	1259:41	1259:76	12	3 + sp -> subsampling_convert_ylines + 2 * sp -> subsampling_convert_clines
FIELD	1259:41	1259:41	13	3
LEAF_NODE	1259:41	1259:41	14	3
LEAF_NODE	1259:42	1259:42	13	+
FIELD	1259:43	1259:47	13	sp -> subsampling_convert_ylines
LEAF_NODE	1259:43	1259:43	14	sp
LEAF_NODE	1259:45	1259:45	14	->
LEAF_NODE	1259:47	1259:47	14	subsampling_convert_ylines
LEAF_NODE	1259:73	1259:73	13	+
FIELD	1259:74	1259:74	13	2
LEAF_NODE	1259:74	1259:74	14	2
LEAF_NODE	1259:75	1259:75	13	*
FIELD	1259:76	1259:80	13	sp -> subsampling_convert_clines
LEAF_NODE	1259:76	1259:76	14	sp
LEAF_NODE	1259:78	1259:78	14	->
LEAF_NODE	1259:80	1259:80	14	subsampling_convert_clines
LEAF_NODE	1259:106	1259:106	10	;
LEAF_NODE	1260:3	1260:3	9	sp
LEAF_NODE	1260:5	1260:5	9	->
LEAF_NODE	1260:7	1260:7	9	subsampling_convert_ycbcrimage
LEAF_NODE	1260:37	1260:37	9	=
LEAF_NODE	1260:38	1260:38	9	_TIFFmalloc
LEAF_NODE	1260:49	1260:49	9	(
LEAF_NODE	1260:50	1260:50	9	sp
LEAF_NODE	1260:52	1260:52	9	->
LEAF_NODE	1260:54	1260:54	9	subsampling_convert_ycbcrimagelen
LEAF_NODE	1260:87	1260:87	9	*
LEAF_NODE	1260:88	1260:88	9	sizeof
LEAF_NODE	1260:94	1260:94	9	(
LEAF_NODE	1260:95	1260:95	9	uint8
LEAF_NODE	1260:100	1260:100	9	*
LEAF_NODE	1260:101	1260:101	9	)
LEAF_NODE	1260:102	1260:102	9	)
LEAF_NODE	1260:103	1260:103	9	;
SELECTION	1261:3	1262:3	9	
KEYWORD	1261:3	1261:3	10	if
LEAF_NODE	1261:3	1261:3	11	if
LEAF_NODE	1261:6	1261:6	10	(
CONDITION	1261:7	1261:7	10	sp -> subsampling_convert_ycbcrimage == 0
EXPR	1261:7	1261:43	11	sp -> subsampling_convert_ycbcrimage == 0
FIELD	1261:7	1261:11	12	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1261:7	1261:7	13	sp
LEAF_NODE	1261:9	1261:9	13	->
LEAF_NODE	1261:11	1261:11	13	subsampling_convert_ycbcrimage
EQ_OPERATOR	1261:41	1261:41	12	==
LEAF_NODE	1261:41	1261:41	13	==
FIELD	1261:43	1261:43	12	0
LEAF_NODE	1261:43	1261:43	13	0
LEAF_NODE	1261:44	1261:44	10	)
STATEMENTS	1262:3	1265:3	10	
LEAF_NODE	1262:3	1262:3	11	{
STATEMENTS	1263:4	1264:4	11	
EXPR_STATEMENT	1263:4	1263:60	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1263:4	1263:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1263:4	1263:59	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1263:4	1263:4	15	TIFFErrorExt
LEAF_NODE	1263:4	1263:4	16	TIFFErrorExt
LEAF_NODE	1263:16	1263:16	15	(
ARGUMENT	1263:17	1263:17	15	tif -> tif_clientdata
FIELD	1263:17	1263:22	16	tif -> tif_clientdata
LEAF_NODE	1263:17	1263:17	17	tif
LEAF_NODE	1263:20	1263:20	17	->
LEAF_NODE	1263:22	1263:22	17	tif_clientdata
LEAF_NODE	1263:36	1263:36	15	,
ARGUMENT	1263:37	1263:37	15	module
FIELD	1263:37	1263:37	16	module
LEAF_NODE	1263:37	1263:37	17	module
LEAF_NODE	1263:43	1263:43	15	,
ARGUMENT	1263:44	1263:44	15	"Out of memory"
FIELD	1263:44	1263:44	16	"Out of memory"
LEAF_NODE	1263:44	1263:44	17	"Out of memory"
LEAF_NODE	1263:59	1263:59	15	)
LEAF_NODE	1263:60	1263:60	13	;
JUMP_STATEMENT	1264:4	1264:13	12	return ( 0 ) ;
KEYWORD	1264:4	1264:4	13	return
LEAF_NODE	1264:4	1264:4	14	return
DESTINATION	1264:10	1264:10	13	( 0 )
EXPR	1264:10	1264:12	14	( 0 )
LEAF_NODE	1264:10	1264:10	15	(
FIELD	1264:11	1264:11	15	0
LEAF_NODE	1264:11	1264:11	16	0
LEAF_NODE	1264:12	1264:12	15	)
LEAF_NODE	1264:13	1264:13	13	;
LEAF_NODE	1265:3	1265:3	11	}
EXPR_STATEMENT	1266:3	1266:39	9	m = sp -> subsampling_convert_ycbcrimage ;
EXPR	1266:3	1266:3	10	m = sp -> subsampling_convert_ycbcrimage
ASSIGN	1266:3	1266:5	11	m = sp -> subsampling_convert_ycbcrimage
LVAL	1266:3	1266:3	12	m
FIELD	1266:3	1266:3	13	m
LEAF_NODE	1266:3	1266:3	14	m
ASSIGN_OP	1266:4	1266:4	12	=
LEAF_NODE	1266:4	1266:4	13	=
RVAL	1266:5	1266:5	12	sp -> subsampling_convert_ycbcrimage
FIELD	1266:5	1266:9	13	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1266:5	1266:5	14	sp
LEAF_NODE	1266:7	1266:7	14	->
LEAF_NODE	1266:9	1266:9	14	subsampling_convert_ycbcrimage
LEAF_NODE	1266:39	1266:39	10	;
EXPR_STATEMENT	1267:3	1267:54	9	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 ) ;
EXPR	1267:3	1267:3	10	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 )
ASSIGN	1267:3	1267:8	11	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 )
LVAL	1267:3	1267:3	12	* m ++
UNARY_EXPR	1267:3	1267:4	13	* m ++
UNARY_OPERATOR	1267:3	1267:3	14	*
LEAF_NODE	1267:3	1267:3	15	*
FIELD	1267:4	1267:5	14	m ++
LEAF_NODE	1267:4	1267:4	15	m
LEAF_NODE	1267:5	1267:5	15	++
ASSIGN_OP	1267:7	1267:7	12	=
LEAF_NODE	1267:7	1267:7	13	=
RVAL	1267:8	1267:53	12	( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 )
LEAF_NODE	1267:8	1267:8	13	(
TYPE_NAME	1267:9	1267:9	13	uint8
LEAF_NODE	1267:9	1267:9	14	uint8
LEAF_NODE	1267:14	1267:14	13	*
LEAF_NODE	1267:15	1267:15	13	)
LEAF_NODE	1267:16	1267:16	13	(
FIELD	1267:17	1267:21	13	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1267:17	1267:17	14	sp
LEAF_NODE	1267:19	1267:19	14	->
LEAF_NODE	1267:21	1267:21	14	subsampling_convert_ycbcrimage
LEAF_NODE	1267:51	1267:51	13	+
FIELD	1267:52	1267:52	13	3
LEAF_NODE	1267:52	1267:52	14	3
LEAF_NODE	1267:53	1267:53	13	)
LEAF_NODE	1267:54	1267:54	10	;
EXPR_STATEMENT	1268:3	1268:85	9	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines ) ;
EXPR	1268:3	1268:3	10	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines )
ASSIGN	1268:3	1268:8	11	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines )
LVAL	1268:3	1268:3	12	* m ++
UNARY_EXPR	1268:3	1268:4	13	* m ++
UNARY_OPERATOR	1268:3	1268:3	14	*
LEAF_NODE	1268:3	1268:3	15	*
FIELD	1268:4	1268:5	14	m ++
LEAF_NODE	1268:4	1268:4	15	m
LEAF_NODE	1268:5	1268:5	15	++
ASSIGN_OP	1268:7	1268:7	12	=
LEAF_NODE	1268:7	1268:7	13	=
RVAL	1268:8	1268:84	12	( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines )
LEAF_NODE	1268:8	1268:8	13	(
TYPE_NAME	1268:9	1268:9	13	uint8
LEAF_NODE	1268:9	1268:9	14	uint8
LEAF_NODE	1268:14	1268:14	13	*
LEAF_NODE	1268:15	1268:15	13	)
LEAF_NODE	1268:16	1268:16	13	(
FIELD	1268:17	1268:21	13	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1268:17	1268:17	14	sp
LEAF_NODE	1268:19	1268:19	14	->
LEAF_NODE	1268:21	1268:21	14	subsampling_convert_ycbcrimage
LEAF_NODE	1268:51	1268:51	13	+
FIELD	1268:52	1268:52	13	3
LEAF_NODE	1268:52	1268:52	14	3
LEAF_NODE	1268:53	1268:53	13	+
FIELD	1268:54	1268:58	13	sp -> subsampling_convert_ylines
LEAF_NODE	1268:54	1268:54	14	sp
LEAF_NODE	1268:56	1268:56	14	->
LEAF_NODE	1268:58	1268:58	14	subsampling_convert_ylines
LEAF_NODE	1268:84	1268:84	13	)
LEAF_NODE	1268:85	1268:85	10	;
EXPR_STATEMENT	1269:3	1269:116	9	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines + sp -> subsampling_convert_clines ) ;
EXPR	1269:3	1269:3	10	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines + sp -> subsampling_convert_clines )
ASSIGN	1269:3	1269:8	11	* m ++ = ( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines + sp -> subsampling_convert_clines )
LVAL	1269:3	1269:3	12	* m ++
UNARY_EXPR	1269:3	1269:4	13	* m ++
UNARY_OPERATOR	1269:3	1269:3	14	*
LEAF_NODE	1269:3	1269:3	15	*
FIELD	1269:4	1269:5	14	m ++
LEAF_NODE	1269:4	1269:4	15	m
LEAF_NODE	1269:5	1269:5	15	++
ASSIGN_OP	1269:7	1269:7	12	=
LEAF_NODE	1269:7	1269:7	13	=
RVAL	1269:8	1269:115	12	( uint8 * ) ( sp -> subsampling_convert_ycbcrimage + 3 + sp -> subsampling_convert_ylines + sp -> subsampling_convert_clines )
LEAF_NODE	1269:8	1269:8	13	(
TYPE_NAME	1269:9	1269:9	13	uint8
LEAF_NODE	1269:9	1269:9	14	uint8
LEAF_NODE	1269:14	1269:14	13	*
LEAF_NODE	1269:15	1269:15	13	)
LEAF_NODE	1269:16	1269:16	13	(
FIELD	1269:17	1269:21	13	sp -> subsampling_convert_ycbcrimage
LEAF_NODE	1269:17	1269:17	14	sp
LEAF_NODE	1269:19	1269:19	14	->
LEAF_NODE	1269:21	1269:21	14	subsampling_convert_ycbcrimage
LEAF_NODE	1269:51	1269:51	13	+
FIELD	1269:52	1269:52	13	3
LEAF_NODE	1269:52	1269:52	14	3
LEAF_NODE	1269:53	1269:53	13	+
FIELD	1269:54	1269:58	13	sp -> subsampling_convert_ylines
LEAF_NODE	1269:54	1269:54	14	sp
LEAF_NODE	1269:56	1269:56	14	->
LEAF_NODE	1269:58	1269:58	14	subsampling_convert_ylines
LEAF_NODE	1269:84	1269:84	13	+
FIELD	1269:85	1269:89	13	sp -> subsampling_convert_clines
LEAF_NODE	1269:85	1269:85	14	sp
LEAF_NODE	1269:87	1269:87	14	->
LEAF_NODE	1269:89	1269:89	14	subsampling_convert_clines
LEAF_NODE	1269:115	1269:115	13	)
LEAF_NODE	1269:116	1269:116	10	;
ITERATION	1270:3	1271:4	9	
KEYWORD	1270:3	1270:3	10	for
LEAF_NODE	1270:3	1270:3	11	for
LEAF_NODE	1270:7	1270:7	10	(
FOR_INIT	1270:8	1270:11	10	n = 0 ;
EXPR	1270:8	1270:8	11	n = 0
ASSIGN	1270:8	1270:10	12	n = 0
LVAL	1270:8	1270:8	13	n
FIELD	1270:8	1270:8	14	n
LEAF_NODE	1270:8	1270:8	15	n
ASSIGN_OP	1270:9	1270:9	13	=
LEAF_NODE	1270:9	1270:9	14	=
RVAL	1270:10	1270:10	13	0
FIELD	1270:10	1270:10	14	0
LEAF_NODE	1270:10	1270:10	15	0
LEAF_NODE	1270:11	1270:11	11	;
CONDITION	1270:13	1270:13	10	n < sp -> subsampling_convert_ylines
EXPR	1270:13	1270:15	11	n < sp -> subsampling_convert_ylines
FIELD	1270:13	1270:13	12	n
LEAF_NODE	1270:13	1270:13	13	n
REL_OPERATOR	1270:14	1270:14	12	<
LEAF_NODE	1270:14	1270:14	13	<
FIELD	1270:15	1270:19	12	sp -> subsampling_convert_ylines
LEAF_NODE	1270:15	1270:15	13	sp
LEAF_NODE	1270:17	1270:17	13	->
LEAF_NODE	1270:19	1270:19	13	subsampling_convert_ylines
LEAF_NODE	1270:45	1270:45	10	;
FOR_EXPR	1270:47	1270:47	10	n ++
EXPR	1270:47	1270:47	11	n ++
FIELD	1270:47	1270:48	12	n ++
LEAF_NODE	1270:47	1270:47	13	n
LEAF_NODE	1270:48	1270:48	13	++
LEAF_NODE	1270:50	1270:50	10	)
STATEMENTS	1271:4	1271:4	10	
EXPR_STATEMENT	1271:4	1271:72	11	* m ++ = sp -> subsampling_convert_ybuf + n * sp -> subsampling_convert_ylinelen ;
EXPR	1271:4	1271:4	12	* m ++ = sp -> subsampling_convert_ybuf + n * sp -> subsampling_convert_ylinelen
ASSIGN	1271:4	1271:9	13	* m ++ = sp -> subsampling_convert_ybuf + n * sp -> subsampling_convert_ylinelen
LVAL	1271:4	1271:4	14	* m ++
UNARY_EXPR	1271:4	1271:5	15	* m ++
UNARY_OPERATOR	1271:4	1271:4	16	*
LEAF_NODE	1271:4	1271:4	17	*
FIELD	1271:5	1271:6	16	m ++
LEAF_NODE	1271:5	1271:5	17	m
LEAF_NODE	1271:6	1271:6	17	++
ASSIGN_OP	1271:8	1271:8	14	=
LEAF_NODE	1271:8	1271:8	15	=
RVAL	1271:9	1271:40	14	sp -> subsampling_convert_ybuf + n * sp -> subsampling_convert_ylinelen
FIELD	1271:9	1271:13	15	sp -> subsampling_convert_ybuf
LEAF_NODE	1271:9	1271:9	16	sp
LEAF_NODE	1271:11	1271:11	16	->
LEAF_NODE	1271:13	1271:13	16	subsampling_convert_ybuf
LEAF_NODE	1271:37	1271:37	15	+
FIELD	1271:38	1271:38	15	n
LEAF_NODE	1271:38	1271:38	16	n
LEAF_NODE	1271:39	1271:39	15	*
FIELD	1271:40	1271:44	15	sp -> subsampling_convert_ylinelen
LEAF_NODE	1271:40	1271:40	16	sp
LEAF_NODE	1271:42	1271:42	16	->
LEAF_NODE	1271:44	1271:44	16	subsampling_convert_ylinelen
LEAF_NODE	1271:72	1271:72	12	;
ITERATION	1272:3	1273:4	9	
KEYWORD	1272:3	1272:3	10	for
LEAF_NODE	1272:3	1272:3	11	for
LEAF_NODE	1272:7	1272:7	10	(
FOR_INIT	1272:8	1272:11	10	n = 0 ;
EXPR	1272:8	1272:8	11	n = 0
ASSIGN	1272:8	1272:10	12	n = 0
LVAL	1272:8	1272:8	13	n
FIELD	1272:8	1272:8	14	n
LEAF_NODE	1272:8	1272:8	15	n
ASSIGN_OP	1272:9	1272:9	13	=
LEAF_NODE	1272:9	1272:9	14	=
RVAL	1272:10	1272:10	13	0
FIELD	1272:10	1272:10	14	0
LEAF_NODE	1272:10	1272:10	15	0
LEAF_NODE	1272:11	1272:11	11	;
CONDITION	1272:13	1272:13	10	n < sp -> subsampling_convert_clines
EXPR	1272:13	1272:15	11	n < sp -> subsampling_convert_clines
FIELD	1272:13	1272:13	12	n
LEAF_NODE	1272:13	1272:13	13	n
REL_OPERATOR	1272:14	1272:14	12	<
LEAF_NODE	1272:14	1272:14	13	<
FIELD	1272:15	1272:19	12	sp -> subsampling_convert_clines
LEAF_NODE	1272:15	1272:15	13	sp
LEAF_NODE	1272:17	1272:17	13	->
LEAF_NODE	1272:19	1272:19	13	subsampling_convert_clines
LEAF_NODE	1272:45	1272:45	10	;
FOR_EXPR	1272:47	1272:47	10	n ++
EXPR	1272:47	1272:47	11	n ++
FIELD	1272:47	1272:48	12	n ++
LEAF_NODE	1272:47	1272:47	13	n
LEAF_NODE	1272:48	1272:48	13	++
LEAF_NODE	1272:50	1272:50	10	)
STATEMENTS	1273:4	1273:4	10	
EXPR_STATEMENT	1273:4	1273:73	11	* m ++ = sp -> subsampling_convert_cbbuf + n * sp -> subsampling_convert_clinelen ;
EXPR	1273:4	1273:4	12	* m ++ = sp -> subsampling_convert_cbbuf + n * sp -> subsampling_convert_clinelen
ASSIGN	1273:4	1273:9	13	* m ++ = sp -> subsampling_convert_cbbuf + n * sp -> subsampling_convert_clinelen
LVAL	1273:4	1273:4	14	* m ++
UNARY_EXPR	1273:4	1273:5	15	* m ++
UNARY_OPERATOR	1273:4	1273:4	16	*
LEAF_NODE	1273:4	1273:4	17	*
FIELD	1273:5	1273:6	16	m ++
LEAF_NODE	1273:5	1273:5	17	m
LEAF_NODE	1273:6	1273:6	17	++
ASSIGN_OP	1273:8	1273:8	14	=
LEAF_NODE	1273:8	1273:8	15	=
RVAL	1273:9	1273:41	14	sp -> subsampling_convert_cbbuf + n * sp -> subsampling_convert_clinelen
FIELD	1273:9	1273:13	15	sp -> subsampling_convert_cbbuf
LEAF_NODE	1273:9	1273:9	16	sp
LEAF_NODE	1273:11	1273:11	16	->
LEAF_NODE	1273:13	1273:13	16	subsampling_convert_cbbuf
LEAF_NODE	1273:38	1273:38	15	+
FIELD	1273:39	1273:39	15	n
LEAF_NODE	1273:39	1273:39	16	n
LEAF_NODE	1273:40	1273:40	15	*
FIELD	1273:41	1273:45	15	sp -> subsampling_convert_clinelen
LEAF_NODE	1273:41	1273:41	16	sp
LEAF_NODE	1273:43	1273:43	16	->
LEAF_NODE	1273:45	1273:45	16	subsampling_convert_clinelen
LEAF_NODE	1273:73	1273:73	12	;
ITERATION	1274:3	1275:4	9	
KEYWORD	1274:3	1274:3	10	for
LEAF_NODE	1274:3	1274:3	11	for
LEAF_NODE	1274:7	1274:7	10	(
FOR_INIT	1274:8	1274:11	10	n = 0 ;
EXPR	1274:8	1274:8	11	n = 0
ASSIGN	1274:8	1274:10	12	n = 0
LVAL	1274:8	1274:8	13	n
FIELD	1274:8	1274:8	14	n
LEAF_NODE	1274:8	1274:8	15	n
ASSIGN_OP	1274:9	1274:9	13	=
LEAF_NODE	1274:9	1274:9	14	=
RVAL	1274:10	1274:10	13	0
FIELD	1274:10	1274:10	14	0
LEAF_NODE	1274:10	1274:10	15	0
LEAF_NODE	1274:11	1274:11	11	;
CONDITION	1274:13	1274:13	10	n < sp -> subsampling_convert_clines
EXPR	1274:13	1274:15	11	n < sp -> subsampling_convert_clines
FIELD	1274:13	1274:13	12	n
LEAF_NODE	1274:13	1274:13	13	n
REL_OPERATOR	1274:14	1274:14	12	<
LEAF_NODE	1274:14	1274:14	13	<
FIELD	1274:15	1274:19	12	sp -> subsampling_convert_clines
LEAF_NODE	1274:15	1274:15	13	sp
LEAF_NODE	1274:17	1274:17	13	->
LEAF_NODE	1274:19	1274:19	13	subsampling_convert_clines
LEAF_NODE	1274:45	1274:45	10	;
FOR_EXPR	1274:47	1274:47	10	n ++
EXPR	1274:47	1274:47	11	n ++
FIELD	1274:47	1274:48	12	n ++
LEAF_NODE	1274:47	1274:47	13	n
LEAF_NODE	1274:48	1274:48	13	++
LEAF_NODE	1274:50	1274:50	10	)
STATEMENTS	1275:4	1275:4	10	
EXPR_STATEMENT	1275:4	1275:73	11	* m ++ = sp -> subsampling_convert_crbuf + n * sp -> subsampling_convert_clinelen ;
EXPR	1275:4	1275:4	12	* m ++ = sp -> subsampling_convert_crbuf + n * sp -> subsampling_convert_clinelen
ASSIGN	1275:4	1275:9	13	* m ++ = sp -> subsampling_convert_crbuf + n * sp -> subsampling_convert_clinelen
LVAL	1275:4	1275:4	14	* m ++
UNARY_EXPR	1275:4	1275:5	15	* m ++
UNARY_OPERATOR	1275:4	1275:4	16	*
LEAF_NODE	1275:4	1275:4	17	*
FIELD	1275:5	1275:6	16	m ++
LEAF_NODE	1275:5	1275:5	17	m
LEAF_NODE	1275:6	1275:6	17	++
ASSIGN_OP	1275:8	1275:8	14	=
LEAF_NODE	1275:8	1275:8	15	=
RVAL	1275:9	1275:41	14	sp -> subsampling_convert_crbuf + n * sp -> subsampling_convert_clinelen
FIELD	1275:9	1275:13	15	sp -> subsampling_convert_crbuf
LEAF_NODE	1275:9	1275:9	16	sp
LEAF_NODE	1275:11	1275:11	16	->
LEAF_NODE	1275:13	1275:13	16	subsampling_convert_crbuf
LEAF_NODE	1275:38	1275:38	15	+
FIELD	1275:39	1275:39	15	n
LEAF_NODE	1275:39	1275:39	16	n
LEAF_NODE	1275:40	1275:40	15	*
FIELD	1275:41	1275:45	15	sp -> subsampling_convert_clinelen
LEAF_NODE	1275:41	1275:41	16	sp
LEAF_NODE	1275:43	1275:43	16	->
LEAF_NODE	1275:45	1275:45	16	subsampling_convert_clinelen
LEAF_NODE	1275:73	1275:73	12	;
EXPR_STATEMENT	1276:3	1276:133	9	sp -> subsampling_convert_clinelenout = sp -> strile_width / sp -> subsampling_hor + ( ( sp -> strile_width % sp -> subsampling_hor ) != 0 ? 1 : 0 ) ;
EXPR	1276:3	1276:3	10	sp -> subsampling_convert_clinelenout = sp -> strile_width / sp -> subsampling_hor + ( ( sp -> strile_width % sp -> subsampling_hor ) != 0 ? 1 : 0 )
ASSIGN	1276:3	1276:39	11	sp -> subsampling_convert_clinelenout = sp -> strile_width / sp -> subsampling_hor + ( ( sp -> strile_width % sp -> subsampling_hor ) != 0 ? 1 : 0 )
LVAL	1276:3	1276:3	12	sp -> subsampling_convert_clinelenout
FIELD	1276:3	1276:7	13	sp -> subsampling_convert_clinelenout
LEAF_NODE	1276:3	1276:3	14	sp
LEAF_NODE	1276:5	1276:5	14	->
LEAF_NODE	1276:7	1276:7	14	subsampling_convert_clinelenout
ASSIGN_OP	1276:38	1276:38	12	=
LEAF_NODE	1276:38	1276:38	13	=
RVAL	1276:39	1276:132	12	sp -> strile_width / sp -> subsampling_hor + ( ( sp -> strile_width % sp -> subsampling_hor ) != 0 ? 1 : 0 )
FIELD	1276:39	1276:43	13	sp -> strile_width
LEAF_NODE	1276:39	1276:39	14	sp
LEAF_NODE	1276:41	1276:41	14	->
LEAF_NODE	1276:43	1276:43	14	strile_width
LEAF_NODE	1276:55	1276:55	13	/
FIELD	1276:56	1276:60	13	sp -> subsampling_hor
LEAF_NODE	1276:56	1276:56	14	sp
LEAF_NODE	1276:58	1276:58	14	->
LEAF_NODE	1276:60	1276:60	14	subsampling_hor
LEAF_NODE	1276:76	1276:76	13	+
LEAF_NODE	1276:78	1276:78	13	(
COND_EXPR	1276:79	1276:131	13	( sp -> strile_width % sp -> subsampling_hor ) != 0 ? 1 : 0
CONDITION	1276:79	1276:123	14	( sp -> strile_width % sp -> subsampling_hor ) != 0
LEAF_NODE	1276:79	1276:79	15	(
FIELD	1276:80	1276:84	15	sp -> strile_width
LEAF_NODE	1276:80	1276:80	16	sp
LEAF_NODE	1276:82	1276:82	16	->
LEAF_NODE	1276:84	1276:84	16	strile_width
LEAF_NODE	1276:97	1276:97	15	%
FIELD	1276:99	1276:103	15	sp -> subsampling_hor
LEAF_NODE	1276:99	1276:99	16	sp
LEAF_NODE	1276:101	1276:101	16	->
LEAF_NODE	1276:103	1276:103	16	subsampling_hor
LEAF_NODE	1276:118	1276:118	15	)
EQ_OPERATOR	1276:120	1276:120	15	!=
LEAF_NODE	1276:120	1276:120	16	!=
FIELD	1276:123	1276:123	15	0
LEAF_NODE	1276:123	1276:123	16	0
LEAF_NODE	1276:125	1276:125	14	?
EXPR	1276:127	1276:127	14	1
FIELD	1276:127	1276:127	15	1
LEAF_NODE	1276:127	1276:127	16	1
LEAF_NODE	1276:129	1276:129	14	:
FIELD	1276:131	1276:131	14	0
LEAF_NODE	1276:131	1276:131	15	0
LEAF_NODE	1276:132	1276:132	13	)
LEAF_NODE	1276:133	1276:133	10	;
EXPR_STATEMENT	1277:3	1277:34	9	sp -> subsampling_convert_state = 0 ;
EXPR	1277:3	1277:3	10	sp -> subsampling_convert_state = 0
ASSIGN	1277:3	1277:33	11	sp -> subsampling_convert_state = 0
LVAL	1277:3	1277:3	12	sp -> subsampling_convert_state
FIELD	1277:3	1277:7	13	sp -> subsampling_convert_state
LEAF_NODE	1277:3	1277:3	14	sp
LEAF_NODE	1277:5	1277:5	14	->
LEAF_NODE	1277:7	1277:7	14	subsampling_convert_state
ASSIGN_OP	1277:32	1277:32	12	=
LEAF_NODE	1277:32	1277:32	13	=
RVAL	1277:33	1277:33	12	0
FIELD	1277:33	1277:33	13	0
LEAF_NODE	1277:33	1277:33	14	0
LEAF_NODE	1277:34	1277:34	10	;
EXPR_STATEMENT	1278:3	1278:35	9	sp -> error_in_raw_data_decoding = 0 ;
EXPR	1278:3	1278:3	10	sp -> error_in_raw_data_decoding = 0
ASSIGN	1278:3	1278:34	11	sp -> error_in_raw_data_decoding = 0
LVAL	1278:3	1278:3	12	sp -> error_in_raw_data_decoding
FIELD	1278:3	1278:7	13	sp -> error_in_raw_data_decoding
LEAF_NODE	1278:3	1278:3	14	sp
LEAF_NODE	1278:5	1278:5	14	->
LEAF_NODE	1278:7	1278:7	14	error_in_raw_data_decoding
ASSIGN_OP	1278:33	1278:33	12	=
LEAF_NODE	1278:33	1278:33	13	=
RVAL	1278:34	1278:34	12	0
FIELD	1278:34	1278:34	13	0
LEAF_NODE	1278:34	1278:34	14	0
LEAF_NODE	1278:35	1278:35	10	;
EXPR_STATEMENT	1279:3	1279:101	9	sp -> bytes_per_line = sp -> subsampling_convert_clinelenout * ( sp -> subsampling_ver * sp -> subsampling_hor + 2 ) ;
EXPR	1279:3	1279:3	10	sp -> bytes_per_line = sp -> subsampling_convert_clinelenout * ( sp -> subsampling_ver * sp -> subsampling_hor + 2 )
ASSIGN	1279:3	1279:22	11	sp -> bytes_per_line = sp -> subsampling_convert_clinelenout * ( sp -> subsampling_ver * sp -> subsampling_hor + 2 )
LVAL	1279:3	1279:3	12	sp -> bytes_per_line
FIELD	1279:3	1279:7	13	sp -> bytes_per_line
LEAF_NODE	1279:3	1279:3	14	sp
LEAF_NODE	1279:5	1279:5	14	->
LEAF_NODE	1279:7	1279:7	14	bytes_per_line
ASSIGN_OP	1279:21	1279:21	12	=
LEAF_NODE	1279:21	1279:21	13	=
RVAL	1279:22	1279:100	12	sp -> subsampling_convert_clinelenout * ( sp -> subsampling_ver * sp -> subsampling_hor + 2 )
FIELD	1279:22	1279:26	13	sp -> subsampling_convert_clinelenout
LEAF_NODE	1279:22	1279:22	14	sp
LEAF_NODE	1279:24	1279:24	14	->
LEAF_NODE	1279:26	1279:26	14	subsampling_convert_clinelenout
LEAF_NODE	1279:57	1279:57	13	*
LEAF_NODE	1279:58	1279:58	13	(
FIELD	1279:59	1279:63	13	sp -> subsampling_ver
LEAF_NODE	1279:59	1279:59	14	sp
LEAF_NODE	1279:61	1279:61	14	->
LEAF_NODE	1279:63	1279:63	14	subsampling_ver
LEAF_NODE	1279:78	1279:78	13	*
FIELD	1279:79	1279:83	13	sp -> subsampling_hor
LEAF_NODE	1279:79	1279:79	14	sp
LEAF_NODE	1279:81	1279:81	14	->
LEAF_NODE	1279:83	1279:83	14	subsampling_hor
LEAF_NODE	1279:98	1279:98	13	+
FIELD	1279:99	1279:99	13	2
LEAF_NODE	1279:99	1279:99	14	2
LEAF_NODE	1279:100	1279:100	13	)
LEAF_NODE	1279:101	1279:101	10	;
EXPR_STATEMENT	1280:3	1280:120	9	sp -> lines_per_strile = sp -> strile_length / sp -> subsampling_ver + ( ( sp -> strile_length % sp -> subsampling_ver ) != 0 ? 1 : 0 ) ;
EXPR	1280:3	1280:3	10	sp -> lines_per_strile = sp -> strile_length / sp -> subsampling_ver + ( ( sp -> strile_length % sp -> subsampling_ver ) != 0 ? 1 : 0 )
ASSIGN	1280:3	1280:24	11	sp -> lines_per_strile = sp -> strile_length / sp -> subsampling_ver + ( ( sp -> strile_length % sp -> subsampling_ver ) != 0 ? 1 : 0 )
LVAL	1280:3	1280:3	12	sp -> lines_per_strile
FIELD	1280:3	1280:7	13	sp -> lines_per_strile
LEAF_NODE	1280:3	1280:3	14	sp
LEAF_NODE	1280:5	1280:5	14	->
LEAF_NODE	1280:7	1280:7	14	lines_per_strile
ASSIGN_OP	1280:23	1280:23	12	=
LEAF_NODE	1280:23	1280:23	13	=
RVAL	1280:24	1280:119	12	sp -> strile_length / sp -> subsampling_ver + ( ( sp -> strile_length % sp -> subsampling_ver ) != 0 ? 1 : 0 )
FIELD	1280:24	1280:28	13	sp -> strile_length
LEAF_NODE	1280:24	1280:24	14	sp
LEAF_NODE	1280:26	1280:26	14	->
LEAF_NODE	1280:28	1280:28	14	strile_length
LEAF_NODE	1280:41	1280:41	13	/
FIELD	1280:42	1280:46	13	sp -> subsampling_ver
LEAF_NODE	1280:42	1280:42	14	sp
LEAF_NODE	1280:44	1280:44	14	->
LEAF_NODE	1280:46	1280:46	14	subsampling_ver
LEAF_NODE	1280:62	1280:62	13	+
LEAF_NODE	1280:64	1280:64	13	(
COND_EXPR	1280:65	1280:118	13	( sp -> strile_length % sp -> subsampling_ver ) != 0 ? 1 : 0
CONDITION	1280:65	1280:110	14	( sp -> strile_length % sp -> subsampling_ver ) != 0
LEAF_NODE	1280:65	1280:65	15	(
FIELD	1280:66	1280:70	15	sp -> strile_length
LEAF_NODE	1280:66	1280:66	16	sp
LEAF_NODE	1280:68	1280:68	16	->
LEAF_NODE	1280:70	1280:70	16	strile_length
LEAF_NODE	1280:84	1280:84	15	%
FIELD	1280:86	1280:90	15	sp -> subsampling_ver
LEAF_NODE	1280:86	1280:86	16	sp
LEAF_NODE	1280:88	1280:88	16	->
LEAF_NODE	1280:90	1280:90	16	subsampling_ver
LEAF_NODE	1280:105	1280:105	15	)
EQ_OPERATOR	1280:107	1280:107	15	!=
LEAF_NODE	1280:107	1280:107	16	!=
FIELD	1280:110	1280:110	15	0
LEAF_NODE	1280:110	1280:110	16	0
LEAF_NODE	1280:112	1280:112	14	?
EXPR	1280:114	1280:114	14	1
FIELD	1280:114	1280:114	15	1
LEAF_NODE	1280:114	1280:114	16	1
LEAF_NODE	1280:116	1280:116	14	:
FIELD	1280:118	1280:118	14	0
LEAF_NODE	1280:118	1280:118	15	0
LEAF_NODE	1280:119	1280:119	13	)
LEAF_NODE	1280:120	1280:120	10	;
EXPR_STATEMENT	1281:3	1281:32	9	sp -> subsampling_convert_log = 1 ;
EXPR	1281:3	1281:3	10	sp -> subsampling_convert_log = 1
ASSIGN	1281:3	1281:31	11	sp -> subsampling_convert_log = 1
LVAL	1281:3	1281:3	12	sp -> subsampling_convert_log
FIELD	1281:3	1281:7	13	sp -> subsampling_convert_log
LEAF_NODE	1281:3	1281:3	14	sp
LEAF_NODE	1281:5	1281:5	14	->
LEAF_NODE	1281:7	1281:7	14	subsampling_convert_log
ASSIGN_OP	1281:30	1281:30	12	=
LEAF_NODE	1281:30	1281:30	13	=
RVAL	1281:31	1281:31	12	1
FIELD	1281:31	1281:31	13	1
LEAF_NODE	1281:31	1281:31	14	1
LEAF_NODE	1281:32	1281:32	10	;
LEAF_NODE	1282:2	1282:2	8	}
LEAF_NODE	1283:1	1283:1	5	}
SELECTION	1284:1	1285:1	3	
KEYWORD	1284:1	1284:1	4	else
LEAF_NODE	1284:1	1284:1	5	else
STATEMENTS	1285:1	1291:1	4	
LEAF_NODE	1285:1	1285:1	5	{
STATEMENTS	1286:2	1290:2	5	
EXPR_STATEMENT	1286:2	1286:65	6	sp -> libjpeg_jpeg_decompress_struct . jpeg_color_space = JCS_UNKNOWN ;
EXPR	1286:2	1286:2	7	sp -> libjpeg_jpeg_decompress_struct . jpeg_color_space = JCS_UNKNOWN
ASSIGN	1286:2	1286:54	8	sp -> libjpeg_jpeg_decompress_struct . jpeg_color_space = JCS_UNKNOWN
LVAL	1286:2	1286:2	9	sp -> libjpeg_jpeg_decompress_struct . jpeg_color_space
FIELD	1286:2	1286:37	10	sp -> libjpeg_jpeg_decompress_struct . jpeg_color_space
LEAF_NODE	1286:2	1286:2	11	sp
LEAF_NODE	1286:4	1286:4	11	->
LEAF_NODE	1286:6	1286:6	11	libjpeg_jpeg_decompress_struct
LEAF_NODE	1286:36	1286:36	11	.
LEAF_NODE	1286:37	1286:37	11	jpeg_color_space
ASSIGN_OP	1286:53	1286:53	9	=
LEAF_NODE	1286:53	1286:53	10	=
RVAL	1286:54	1286:54	9	JCS_UNKNOWN
FIELD	1286:54	1286:54	10	JCS_UNKNOWN
LEAF_NODE	1286:54	1286:54	11	JCS_UNKNOWN
LEAF_NODE	1286:65	1286:65	7	;
EXPR_STATEMENT	1287:2	1287:64	6	sp -> libjpeg_jpeg_decompress_struct . out_color_space = JCS_UNKNOWN ;
EXPR	1287:2	1287:2	7	sp -> libjpeg_jpeg_decompress_struct . out_color_space = JCS_UNKNOWN
ASSIGN	1287:2	1287:53	8	sp -> libjpeg_jpeg_decompress_struct . out_color_space = JCS_UNKNOWN
LVAL	1287:2	1287:2	9	sp -> libjpeg_jpeg_decompress_struct . out_color_space
FIELD	1287:2	1287:37	10	sp -> libjpeg_jpeg_decompress_struct . out_color_space
LEAF_NODE	1287:2	1287:2	11	sp
LEAF_NODE	1287:4	1287:4	11	->
LEAF_NODE	1287:6	1287:6	11	libjpeg_jpeg_decompress_struct
LEAF_NODE	1287:36	1287:36	11	.
LEAF_NODE	1287:37	1287:37	11	out_color_space
ASSIGN_OP	1287:52	1287:52	9	=
LEAF_NODE	1287:52	1287:52	10	=
RVAL	1287:53	1287:53	9	JCS_UNKNOWN
FIELD	1287:53	1287:53	10	JCS_UNKNOWN
LEAF_NODE	1287:53	1287:53	11	JCS_UNKNOWN
LEAF_NODE	1287:64	1287:64	7	;
EXPR_STATEMENT	1288:2	1288:32	6	sp -> libjpeg_jpeg_query_style = 1 ;
EXPR	1288:2	1288:2	7	sp -> libjpeg_jpeg_query_style = 1
ASSIGN	1288:2	1288:31	8	sp -> libjpeg_jpeg_query_style = 1
LVAL	1288:2	1288:2	9	sp -> libjpeg_jpeg_query_style
FIELD	1288:2	1288:6	10	sp -> libjpeg_jpeg_query_style
LEAF_NODE	1288:2	1288:2	11	sp
LEAF_NODE	1288:4	1288:4	11	->
LEAF_NODE	1288:6	1288:6	11	libjpeg_jpeg_query_style
ASSIGN_OP	1288:30	1288:30	9	=
LEAF_NODE	1288:30	1288:30	10	=
RVAL	1288:31	1288:31	9	1
FIELD	1288:31	1288:31	10	1
LEAF_NODE	1288:31	1288:31	11	1
LEAF_NODE	1288:32	1288:32	7	;
EXPR_STATEMENT	1289:2	1289:69	6	sp -> bytes_per_line = sp -> samples_per_pixel_per_plane * sp -> strile_width ;
EXPR	1289:2	1289:2	7	sp -> bytes_per_line = sp -> samples_per_pixel_per_plane * sp -> strile_width
ASSIGN	1289:2	1289:21	8	sp -> bytes_per_line = sp -> samples_per_pixel_per_plane * sp -> strile_width
LVAL	1289:2	1289:2	9	sp -> bytes_per_line
FIELD	1289:2	1289:6	10	sp -> bytes_per_line
LEAF_NODE	1289:2	1289:2	11	sp
LEAF_NODE	1289:4	1289:4	11	->
LEAF_NODE	1289:6	1289:6	11	bytes_per_line
ASSIGN_OP	1289:20	1289:20	9	=
LEAF_NODE	1289:20	1289:20	10	=
RVAL	1289:21	1289:53	9	sp -> samples_per_pixel_per_plane * sp -> strile_width
FIELD	1289:21	1289:25	10	sp -> samples_per_pixel_per_plane
LEAF_NODE	1289:21	1289:21	11	sp
LEAF_NODE	1289:23	1289:23	11	->
LEAF_NODE	1289:25	1289:25	11	samples_per_pixel_per_plane
LEAF_NODE	1289:52	1289:52	10	*
FIELD	1289:53	1289:57	10	sp -> strile_width
LEAF_NODE	1289:53	1289:53	11	sp
LEAF_NODE	1289:55	1289:55	11	->
LEAF_NODE	1289:57	1289:57	11	strile_width
LEAF_NODE	1289:69	1289:69	7	;
EXPR_STATEMENT	1290:2	1290:40	6	sp -> lines_per_strile = sp -> strile_length ;
EXPR	1290:2	1290:2	7	sp -> lines_per_strile = sp -> strile_length
ASSIGN	1290:2	1290:23	8	sp -> lines_per_strile = sp -> strile_length
LVAL	1290:2	1290:2	9	sp -> lines_per_strile
FIELD	1290:2	1290:6	10	sp -> lines_per_strile
LEAF_NODE	1290:2	1290:2	11	sp
LEAF_NODE	1290:4	1290:4	11	->
LEAF_NODE	1290:6	1290:6	11	lines_per_strile
ASSIGN_OP	1290:22	1290:22	9	=
LEAF_NODE	1290:22	1290:22	10	=
RVAL	1290:23	1290:23	9	sp -> strile_length
FIELD	1290:23	1290:27	10	sp -> strile_length
LEAF_NODE	1290:23	1290:23	11	sp
LEAF_NODE	1290:25	1290:25	11	->
LEAF_NODE	1290:27	1290:27	11	strile_length
LEAF_NODE	1290:40	1290:40	7	;
LEAF_NODE	1291:1	1291:1	5	}
SELECTION	1292:1	1293:2	3	
KEYWORD	1292:1	1292:1	4	if
LEAF_NODE	1292:1	1292:1	5	if
LEAF_NODE	1292:4	1292:4	4	(
CONDITION	1292:5	1292:5	4	jpeg_start_decompress_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) ) == 0
EXPR	1292:5	1292:76	5	jpeg_start_decompress_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) ) == 0
FUNCTION_CALL	1292:5	1292:73	6	jpeg_start_decompress_encap ( sp , & ( sp -> libjpeg_jpeg_decompress_struct ) )
CALLEE	1292:5	1292:5	7	jpeg_start_decompress_encap
LEAF_NODE	1292:5	1292:5	8	jpeg_start_decompress_encap
LEAF_NODE	1292:32	1292:32	7	(
ARGUMENT	1292:33	1292:33	7	sp
FIELD	1292:33	1292:33	8	sp
LEAF_NODE	1292:33	1292:33	9	sp
LEAF_NODE	1292:35	1292:35	7	,
ARGUMENT	1292:36	1292:36	7	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_EXPR	1292:36	1292:72	8	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	1292:36	1292:36	9	&
LEAF_NODE	1292:36	1292:36	10	&
LEAF_NODE	1292:37	1292:37	9	(
FIELD	1292:38	1292:42	9	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	1292:38	1292:38	10	sp
LEAF_NODE	1292:40	1292:40	10	->
LEAF_NODE	1292:42	1292:42	10	libjpeg_jpeg_decompress_struct
LEAF_NODE	1292:72	1292:72	9	)
LEAF_NODE	1292:73	1292:73	7	)
EQ_OPERATOR	1292:74	1292:74	6	==
LEAF_NODE	1292:74	1292:74	7	==
FIELD	1292:76	1292:76	6	0
LEAF_NODE	1292:76	1292:76	7	0
LEAF_NODE	1292:77	1292:77	4	)
STATEMENTS	1293:2	1293:2	4	
JUMP_STATEMENT	1293:2	1293:11	5	return ( 0 ) ;
KEYWORD	1293:2	1293:2	6	return
LEAF_NODE	1293:2	1293:2	7	return
DESTINATION	1293:8	1293:8	6	( 0 )
EXPR	1293:8	1293:10	7	( 0 )
LEAF_NODE	1293:8	1293:8	8	(
FIELD	1293:9	1293:9	8	0
LEAF_NODE	1293:9	1293:9	9	0
LEAF_NODE	1293:10	1293:10	8	)
LEAF_NODE	1293:11	1293:11	6	;
EXPR_STATEMENT	1294:1	1294:23	3	sp -> writeheader_done = 1 ;
EXPR	1294:1	1294:1	4	sp -> writeheader_done = 1
ASSIGN	1294:1	1294:22	5	sp -> writeheader_done = 1
LVAL	1294:1	1294:1	6	sp -> writeheader_done
FIELD	1294:1	1294:5	7	sp -> writeheader_done
LEAF_NODE	1294:1	1294:1	8	sp
LEAF_NODE	1294:3	1294:3	8	->
LEAF_NODE	1294:5	1294:5	8	writeheader_done
ASSIGN_OP	1294:21	1294:21	6	=
LEAF_NODE	1294:21	1294:21	7	=
RVAL	1294:22	1294:22	6	1
FIELD	1294:22	1294:22	7	1
LEAF_NODE	1294:22	1294:22	8	1
LEAF_NODE	1294:23	1294:23	4	;
JUMP_STATEMENT	1295:1	1295:10	3	return ( 1 ) ;
KEYWORD	1295:1	1295:1	4	return
LEAF_NODE	1295:1	1295:1	5	return
DESTINATION	1295:7	1295:7	4	( 1 )
EXPR	1295:7	1295:9	5	( 1 )
LEAF_NODE	1295:7	1295:7	6	(
FIELD	1295:8	1295:8	6	1
LEAF_NODE	1295:8	1295:8	7	1
LEAF_NODE	1295:9	1295:9	6	)
LEAF_NODE	1295:10	1295:10	4	;
LEAF_NODE	1296:0	1296:0	2	}
FUNCTION_DEF	1298:0	1305:0	1	
RETURN_TYPE	1298:0	1298:7	2	static void
LEAF_NODE	1298:0	1298:0	3	static
TYPE_NAME	1298:7	1298:7	3	void
LEAF_NODE	1298:7	1298:7	4	void
FUNCTION_NAME	1299:0	1299:0	2	OJPEGLibjpegSessionAbort
LEAF_NODE	1299:0	1299:0	3	OJPEGLibjpegSessionAbort
PARAMETER_LIST	1299:24	1299:34	2	( TIFF * tif )
LEAF_NODE	1299:24	1299:24	3	(
PARAMETER_DECL	1299:25	1299:31	3	TIFF * tif
TYPE	1299:25	1299:29	4	TIFF *
TYPE_NAME	1299:25	1299:25	5	TIFF
LEAF_NODE	1299:25	1299:25	6	TIFF
POINTER	1299:29	1299:29	5	*
LEAF_NODE	1299:29	1299:29	6	*
NAME	1299:31	1299:31	4	tif
LEAF_NODE	1299:31	1299:31	5	tif
LEAF_NODE	1299:34	1299:34	3	)
LEAF_NODE	1300:0	1300:0	2	{
STATEMENTS	1301:1	1304:1	2	
SIMPLE_DECL	1301:1	1301:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1301:1	1301:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1301:1	1301:11	5	OJPEGState *
TYPE_NAME	1301:1	1301:1	6	OJPEGState
LEAF_NODE	1301:1	1301:1	7	OJPEGState
POINTER	1301:11	1301:11	6	*
LEAF_NODE	1301:11	1301:11	7	*
NAME	1301:13	1301:13	5	sp
LEAF_NODE	1301:13	1301:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1301:13	1301:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1301:13	1301:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1301:13	1301:13	7	sp
NAME	1301:13	1301:13	8	sp
LEAF_NODE	1301:13	1301:13	9	sp
ASSIGN_OP	1301:15	1301:15	7	=
LEAF_NODE	1301:15	1301:15	8	=
RVAL	1301:16	1301:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1301:16	1301:16	8	(
TYPE_NAME	1301:17	1301:17	8	OJPEGState
LEAF_NODE	1301:17	1301:17	9	OJPEGState
LEAF_NODE	1301:27	1301:27	8	*
LEAF_NODE	1301:28	1301:28	8	)
FIELD	1301:29	1301:34	8	tif -> tif_data
LEAF_NODE	1301:29	1301:29	9	tif
LEAF_NODE	1301:32	1301:32	9	->
LEAF_NODE	1301:34	1301:34	9	tif_data
LEAF_NODE	1301:42	1301:42	4	;
EXPR_STATEMENT	1302:1	1302:38	3	assert ( sp -> libjpeg_session_active != 0 ) ;
EXPR	1302:1	1302:1	4	assert ( sp -> libjpeg_session_active != 0 )
FUNCTION_CALL	1302:1	1302:37	5	assert ( sp -> libjpeg_session_active != 0 )
CALLEE	1302:1	1302:1	6	assert
LEAF_NODE	1302:1	1302:1	7	assert
LEAF_NODE	1302:7	1302:7	6	(
ARGUMENT	1302:8	1302:36	6	sp -> libjpeg_session_active != 0
FIELD	1302:8	1302:12	7	sp -> libjpeg_session_active
LEAF_NODE	1302:8	1302:8	8	sp
LEAF_NODE	1302:10	1302:10	8	->
LEAF_NODE	1302:12	1302:12	8	libjpeg_session_active
EQ_OPERATOR	1302:34	1302:34	7	!=
LEAF_NODE	1302:34	1302:34	8	!=
FIELD	1302:36	1302:36	7	0
LEAF_NODE	1302:36	1302:36	8	0
LEAF_NODE	1302:37	1302:37	6	)
LEAF_NODE	1302:38	1302:38	4	;
EXPR_STATEMENT	1303:1	1303:75	3	jpeg_destroy ( ( jpeg_common_struct * ) ( & ( sp -> libjpeg_jpeg_decompress_struct ) ) ) ;
EXPR	1303:1	1303:1	4	jpeg_destroy ( ( jpeg_common_struct * ) ( & ( sp -> libjpeg_jpeg_decompress_struct ) ) )
FUNCTION_CALL	1303:1	1303:74	5	jpeg_destroy ( ( jpeg_common_struct * ) ( & ( sp -> libjpeg_jpeg_decompress_struct ) ) )
CALLEE	1303:1	1303:1	6	jpeg_destroy
LEAF_NODE	1303:1	1303:1	7	jpeg_destroy
LEAF_NODE	1303:13	1303:13	6	(
ARGUMENT	1303:14	1303:73	6	( jpeg_common_struct * ) ( & ( sp -> libjpeg_jpeg_decompress_struct ) )
LEAF_NODE	1303:14	1303:14	7	(
TYPE_NAME	1303:15	1303:15	7	jpeg_common_struct
LEAF_NODE	1303:15	1303:15	8	jpeg_common_struct
LEAF_NODE	1303:33	1303:33	7	*
LEAF_NODE	1303:34	1303:34	7	)
LEAF_NODE	1303:35	1303:35	7	(
UNARY_EXPR	1303:36	1303:72	7	& ( sp -> libjpeg_jpeg_decompress_struct )
UNARY_OPERATOR	1303:36	1303:36	8	&
LEAF_NODE	1303:36	1303:36	9	&
LEAF_NODE	1303:37	1303:37	8	(
FIELD	1303:38	1303:42	8	sp -> libjpeg_jpeg_decompress_struct
LEAF_NODE	1303:38	1303:38	9	sp
LEAF_NODE	1303:40	1303:40	9	->
LEAF_NODE	1303:42	1303:42	9	libjpeg_jpeg_decompress_struct
LEAF_NODE	1303:72	1303:72	8	)
LEAF_NODE	1303:73	1303:73	7	)
LEAF_NODE	1303:74	1303:74	6	)
LEAF_NODE	1303:75	1303:75	4	;
EXPR_STATEMENT	1304:1	1304:29	3	sp -> libjpeg_session_active = 0 ;
EXPR	1304:1	1304:1	4	sp -> libjpeg_session_active = 0
ASSIGN	1304:1	1304:28	5	sp -> libjpeg_session_active = 0
LVAL	1304:1	1304:1	6	sp -> libjpeg_session_active
FIELD	1304:1	1304:5	7	sp -> libjpeg_session_active
LEAF_NODE	1304:1	1304:1	8	sp
LEAF_NODE	1304:3	1304:3	8	->
LEAF_NODE	1304:5	1304:5	8	libjpeg_session_active
ASSIGN_OP	1304:27	1304:27	6	=
LEAF_NODE	1304:27	1304:27	7	=
RVAL	1304:28	1304:28	6	0
FIELD	1304:28	1304:28	7	0
LEAF_NODE	1304:28	1304:28	8	0
LEAF_NODE	1304:29	1304:29	4	;
LEAF_NODE	1305:0	1305:0	2	}
FUNCTION_DEF	1307:0	1438:0	1	
RETURN_TYPE	1307:0	1307:7	2	static int
LEAF_NODE	1307:0	1307:0	3	static
TYPE_NAME	1307:7	1307:7	3	int
LEAF_NODE	1307:7	1307:7	4	int
FUNCTION_NAME	1308:0	1308:0	2	OJPEGReadHeaderInfoSec
LEAF_NODE	1308:0	1308:0	3	OJPEGReadHeaderInfoSec
PARAMETER_LIST	1308:22	1308:32	2	( TIFF * tif )
LEAF_NODE	1308:22	1308:22	3	(
PARAMETER_DECL	1308:23	1308:29	3	TIFF * tif
TYPE	1308:23	1308:27	4	TIFF *
TYPE_NAME	1308:23	1308:23	5	TIFF
LEAF_NODE	1308:23	1308:23	6	TIFF
POINTER	1308:27	1308:27	5	*
LEAF_NODE	1308:27	1308:27	6	*
NAME	1308:29	1308:29	4	tif
LEAF_NODE	1308:29	1308:29	5	tif
LEAF_NODE	1308:32	1308:32	3	)
LEAF_NODE	1309:0	1309:0	2	{
STATEMENTS	1310:1	1437:1	2	
LEAF_NODE	1310:1	1310:1	3	static
SIMPLE_DECL	1310:8	1310:52	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSec" ;
VAR_DECL	1310:8	1310:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSec"
TYPE	1310:8	1310:25	5	const char [ ]
TYPE_NAME	1310:8	1310:14	6	const char
LEAF_NODE	1310:8	1310:8	7	const
LEAF_NODE	1310:14	1310:14	7	char
TYPE_SUFFIX	1310:25	1310:26	6	[ ]
LEAF_NODE	1310:25	1310:25	7	[
LEAF_NODE	1310:26	1310:26	7	]
NAME	1310:19	1310:19	5	module
LEAF_NODE	1310:19	1310:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1310:19	1310:19	5	module = "OJPEGReadHeaderInfoSec"
ASSIGN	1310:19	1310:28	6	module = "OJPEGReadHeaderInfoSec"
LVAL	1310:19	1310:19	7	module
NAME	1310:19	1310:19	8	module
LEAF_NODE	1310:19	1310:19	9	module
ASSIGN_OP	1310:27	1310:27	7	=
LEAF_NODE	1310:27	1310:27	8	=
RVAL	1310:28	1310:28	7	"OJPEGReadHeaderInfoSec"
FIELD	1310:28	1310:28	8	"OJPEGReadHeaderInfoSec"
LEAF_NODE	1310:28	1310:28	9	"OJPEGReadHeaderInfoSec"
LEAF_NODE	1310:52	1310:52	4	;
SIMPLE_DECL	1311:1	1311:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1311:1	1311:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1311:1	1311:11	5	OJPEGState *
TYPE_NAME	1311:1	1311:1	6	OJPEGState
LEAF_NODE	1311:1	1311:1	7	OJPEGState
POINTER	1311:11	1311:11	6	*
LEAF_NODE	1311:11	1311:11	7	*
NAME	1311:13	1311:13	5	sp
LEAF_NODE	1311:13	1311:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1311:13	1311:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1311:13	1311:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1311:13	1311:13	7	sp
NAME	1311:13	1311:13	8	sp
LEAF_NODE	1311:13	1311:13	9	sp
ASSIGN_OP	1311:15	1311:15	7	=
LEAF_NODE	1311:15	1311:15	8	=
RVAL	1311:16	1311:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1311:16	1311:16	8	(
TYPE_NAME	1311:17	1311:17	8	OJPEGState
LEAF_NODE	1311:17	1311:17	9	OJPEGState
LEAF_NODE	1311:27	1311:27	8	*
LEAF_NODE	1311:28	1311:28	8	)
FIELD	1311:29	1311:34	8	tif -> tif_data
LEAF_NODE	1311:29	1311:29	9	tif
LEAF_NODE	1311:32	1311:32	9	->
LEAF_NODE	1311:34	1311:34	9	tif_data
LEAF_NODE	1311:42	1311:42	4	;
SIMPLE_DECL	1312:1	1312:8	3	uint8 m ;
VAR_DECL	1312:1	1312:7	4	uint8 m
TYPE	1312:1	1312:1	5	uint8
TYPE_NAME	1312:1	1312:1	6	uint8
LEAF_NODE	1312:1	1312:1	7	uint8
NAME	1312:7	1312:7	5	m
LEAF_NODE	1312:7	1312:7	6	m
LEAF_NODE	1312:8	1312:8	4	;
SIMPLE_DECL	1313:1	1313:9	3	uint16 n ;
VAR_DECL	1313:1	1313:8	4	uint16 n
TYPE	1313:1	1313:1	5	uint16
TYPE_NAME	1313:1	1313:1	6	uint16
LEAF_NODE	1313:1	1313:1	7	uint16
NAME	1313:8	1313:8	5	n
LEAF_NODE	1313:8	1313:8	6	n
LEAF_NODE	1313:9	1313:9	4	;
SIMPLE_DECL	1314:1	1314:8	3	uint8 o ;
VAR_DECL	1314:1	1314:7	4	uint8 o
TYPE	1314:1	1314:1	5	uint8
TYPE_NAME	1314:1	1314:1	6	uint8
LEAF_NODE	1314:1	1314:1	7	uint8
NAME	1314:7	1314:7	5	o
LEAF_NODE	1314:7	1314:7	6	o
LEAF_NODE	1314:8	1314:8	4	;
SELECTION	1315:1	1316:2	3	
KEYWORD	1315:1	1315:1	4	if
LEAF_NODE	1315:1	1315:1	5	if
LEAF_NODE	1315:4	1315:4	4	(
CONDITION	1315:5	1315:5	4	sp -> file_size == 0
EXPR	1315:5	1315:20	5	sp -> file_size == 0
FIELD	1315:5	1315:9	6	sp -> file_size
LEAF_NODE	1315:5	1315:5	7	sp
LEAF_NODE	1315:7	1315:7	7	->
LEAF_NODE	1315:9	1315:9	7	file_size
EQ_OPERATOR	1315:18	1315:18	6	==
LEAF_NODE	1315:18	1315:18	7	==
FIELD	1315:20	1315:20	6	0
LEAF_NODE	1315:20	1315:20	7	0
LEAF_NODE	1315:21	1315:21	4	)
STATEMENTS	1316:2	1316:2	4	
EXPR_STATEMENT	1316:2	1316:36	5	sp -> file_size = TIFFGetFileSize ( tif ) ;
EXPR	1316:2	1316:2	6	sp -> file_size = TIFFGetFileSize ( tif )
ASSIGN	1316:2	1316:16	7	sp -> file_size = TIFFGetFileSize ( tif )
LVAL	1316:2	1316:2	8	sp -> file_size
FIELD	1316:2	1316:6	9	sp -> file_size
LEAF_NODE	1316:2	1316:2	10	sp
LEAF_NODE	1316:4	1316:4	10	->
LEAF_NODE	1316:6	1316:6	10	file_size
ASSIGN_OP	1316:15	1316:15	8	=
LEAF_NODE	1316:15	1316:15	9	=
RVAL	1316:16	1316:16	8	TIFFGetFileSize ( tif )
FUNCTION_CALL	1316:16	1316:35	9	TIFFGetFileSize ( tif )
CALLEE	1316:16	1316:16	10	TIFFGetFileSize
LEAF_NODE	1316:16	1316:16	11	TIFFGetFileSize
LEAF_NODE	1316:31	1316:31	10	(
ARGUMENT	1316:32	1316:32	10	tif
FIELD	1316:32	1316:32	11	tif
LEAF_NODE	1316:32	1316:32	12	tif
LEAF_NODE	1316:35	1316:35	10	)
LEAF_NODE	1316:36	1316:36	6	;
SELECTION	1317:1	1318:1	3	
KEYWORD	1317:1	1317:1	4	if
LEAF_NODE	1317:1	1317:1	5	if
LEAF_NODE	1317:4	1317:4	4	(
CONDITION	1317:5	1317:5	4	sp -> jpeg_interchange_format != 0
EXPR	1317:5	1317:34	5	sp -> jpeg_interchange_format != 0
FIELD	1317:5	1317:9	6	sp -> jpeg_interchange_format
LEAF_NODE	1317:5	1317:5	7	sp
LEAF_NODE	1317:7	1317:7	7	->
LEAF_NODE	1317:9	1317:9	7	jpeg_interchange_format
EQ_OPERATOR	1317:32	1317:32	6	!=
LEAF_NODE	1317:32	1317:32	7	!=
FIELD	1317:34	1317:34	6	0
LEAF_NODE	1317:34	1317:34	7	0
LEAF_NODE	1317:35	1317:35	4	)
STATEMENTS	1318:1	1331:1	4	
LEAF_NODE	1318:1	1318:1	5	{
STATEMENTS	1319:2	1324:2	5	
SELECTION	1319:2	1320:2	6	
KEYWORD	1319:2	1319:2	7	if
LEAF_NODE	1319:2	1319:2	8	if
LEAF_NODE	1319:5	1319:5	7	(
CONDITION	1319:6	1319:6	7	sp -> jpeg_interchange_format >= sp -> file_size
EXPR	1319:6	1319:35	8	sp -> jpeg_interchange_format >= sp -> file_size
FIELD	1319:6	1319:10	9	sp -> jpeg_interchange_format
LEAF_NODE	1319:6	1319:6	10	sp
LEAF_NODE	1319:8	1319:8	10	->
LEAF_NODE	1319:10	1319:10	10	jpeg_interchange_format
REL_OPERATOR	1319:33	1319:33	9	>=
LEAF_NODE	1319:33	1319:33	10	>=
FIELD	1319:35	1319:39	9	sp -> file_size
LEAF_NODE	1319:35	1319:35	10	sp
LEAF_NODE	1319:37	1319:37	10	->
LEAF_NODE	1319:39	1319:39	10	file_size
LEAF_NODE	1319:48	1319:48	7	)
STATEMENTS	1320:2	1323:2	7	
LEAF_NODE	1320:2	1320:2	8	{
STATEMENTS	1321:3	1322:3	8	
EXPR_STATEMENT	1321:3	1321:32	9	sp -> jpeg_interchange_format = 0 ;
EXPR	1321:3	1321:3	10	sp -> jpeg_interchange_format = 0
ASSIGN	1321:3	1321:31	11	sp -> jpeg_interchange_format = 0
LVAL	1321:3	1321:3	12	sp -> jpeg_interchange_format
FIELD	1321:3	1321:7	13	sp -> jpeg_interchange_format
LEAF_NODE	1321:3	1321:3	14	sp
LEAF_NODE	1321:5	1321:5	14	->
LEAF_NODE	1321:7	1321:7	14	jpeg_interchange_format
ASSIGN_OP	1321:30	1321:30	12	=
LEAF_NODE	1321:30	1321:30	13	=
RVAL	1321:31	1321:31	12	0
FIELD	1321:31	1321:31	13	0
LEAF_NODE	1321:31	1321:31	14	0
LEAF_NODE	1321:32	1321:32	10	;
EXPR_STATEMENT	1322:3	1322:39	9	sp -> jpeg_interchange_format_length = 0 ;
EXPR	1322:3	1322:3	10	sp -> jpeg_interchange_format_length = 0
ASSIGN	1322:3	1322:38	11	sp -> jpeg_interchange_format_length = 0
LVAL	1322:3	1322:3	12	sp -> jpeg_interchange_format_length
FIELD	1322:3	1322:7	13	sp -> jpeg_interchange_format_length
LEAF_NODE	1322:3	1322:3	14	sp
LEAF_NODE	1322:5	1322:5	14	->
LEAF_NODE	1322:7	1322:7	14	jpeg_interchange_format_length
ASSIGN_OP	1322:37	1322:37	12	=
LEAF_NODE	1322:37	1322:37	13	=
RVAL	1322:38	1322:38	12	0
FIELD	1322:38	1322:38	13	0
LEAF_NODE	1322:38	1322:38	14	0
LEAF_NODE	1322:39	1322:39	10	;
LEAF_NODE	1323:2	1323:2	8	}
SELECTION	1324:2	1325:2	6	
KEYWORD	1324:2	1324:2	7	else
LEAF_NODE	1324:2	1324:2	8	else
STATEMENTS	1325:2	1330:2	7	
LEAF_NODE	1325:2	1325:2	8	{
STATEMENTS	1326:3	1326:3	8	
SELECTION	1326:3	1329:4	9	
KEYWORD	1326:3	1326:3	10	if
LEAF_NODE	1326:3	1326:3	11	if
LEAF_NODE	1326:6	1326:6	10	(
CONDITION	1326:7	1326:7	10	( sp -> jpeg_interchange_format_length == 0 ) || ( sp -> jpeg_interchange_format > TIFF_UINT64_MAX - sp -> jpeg_interchange_format_length ) || ( sp -> jpeg_interchange_format + sp -> jpeg_interchange_format_length > sp -> file_size )
EXPR	1326:7	1326:7	11	( sp -> jpeg_interchange_format_length == 0 ) || ( sp -> jpeg_interchange_format > TIFF_UINT64_MAX - sp -> jpeg_interchange_format_length ) || ( sp -> jpeg_interchange_format + sp -> jpeg_interchange_format_length > sp -> file_size )
OR	1326:7	1327:28	12	( sp -> jpeg_interchange_format_length == 0 ) || ( sp -> jpeg_interchange_format > TIFF_UINT64_MAX - sp -> jpeg_interchange_format_length ) || ( sp -> jpeg_interchange_format + sp -> jpeg_interchange_format_length > sp -> file_size )
EXPR	1326:7	1326:45	13	( sp -> jpeg_interchange_format_length == 0 )
LEAF_NODE	1326:7	1326:7	14	(
FIELD	1326:8	1326:12	14	sp -> jpeg_interchange_format_length
LEAF_NODE	1326:8	1326:8	15	sp
LEAF_NODE	1326:10	1326:10	15	->
LEAF_NODE	1326:12	1326:12	15	jpeg_interchange_format_length
EQ_OPERATOR	1326:42	1326:42	14	==
LEAF_NODE	1326:42	1326:42	15	==
FIELD	1326:44	1326:44	14	0
LEAF_NODE	1326:44	1326:44	15	0
LEAF_NODE	1326:45	1326:45	14	)
LEAF_NODE	1326:47	1326:47	13	||
EXPR	1327:28	1327:28	13	( sp -> jpeg_interchange_format > TIFF_UINT64_MAX - sp -> jpeg_interchange_format_length ) || ( sp -> jpeg_interchange_format + sp -> jpeg_interchange_format_length > sp -> file_size )
OR	1327:28	1328:28	14	( sp -> jpeg_interchange_format > TIFF_UINT64_MAX - sp -> jpeg_interchange_format_length ) || ( sp -> jpeg_interchange_format + sp -> jpeg_interchange_format_length > sp -> file_size )
EXPR	1327:28	1327:111	15	( sp -> jpeg_interchange_format > TIFF_UINT64_MAX - sp -> jpeg_interchange_format_length )
LEAF_NODE	1327:28	1327:28	16	(
FIELD	1327:29	1327:33	16	sp -> jpeg_interchange_format
LEAF_NODE	1327:29	1327:29	17	sp
LEAF_NODE	1327:31	1327:31	17	->
LEAF_NODE	1327:33	1327:33	17	jpeg_interchange_format
REL_OPERATOR	1327:57	1327:57	16	>
LEAF_NODE	1327:57	1327:57	17	>
FIELD	1327:59	1327:59	16	TIFF_UINT64_MAX
LEAF_NODE	1327:59	1327:59	17	TIFF_UINT64_MAX
LEAF_NODE	1327:75	1327:75	16	-
FIELD	1327:77	1327:81	16	sp -> jpeg_interchange_format_length
LEAF_NODE	1327:77	1327:77	17	sp
LEAF_NODE	1327:79	1327:79	17	->
LEAF_NODE	1327:81	1327:81	17	jpeg_interchange_format_length
LEAF_NODE	1327:111	1327:111	16	)
LEAF_NODE	1327:113	1327:113	15	||
EXPR	1328:28	1328:105	15	( sp -> jpeg_interchange_format + sp -> jpeg_interchange_format_length > sp -> file_size )
LEAF_NODE	1328:28	1328:28	16	(
FIELD	1328:29	1328:33	16	sp -> jpeg_interchange_format
LEAF_NODE	1328:29	1328:29	17	sp
LEAF_NODE	1328:31	1328:31	17	->
LEAF_NODE	1328:33	1328:33	17	jpeg_interchange_format
LEAF_NODE	1328:56	1328:56	16	+
FIELD	1328:57	1328:61	16	sp -> jpeg_interchange_format_length
LEAF_NODE	1328:57	1328:57	17	sp
LEAF_NODE	1328:59	1328:59	17	->
LEAF_NODE	1328:61	1328:61	17	jpeg_interchange_format_length
REL_OPERATOR	1328:91	1328:91	16	>
LEAF_NODE	1328:91	1328:91	17	>
FIELD	1328:92	1328:96	16	sp -> file_size
LEAF_NODE	1328:92	1328:92	17	sp
LEAF_NODE	1328:94	1328:94	17	->
LEAF_NODE	1328:96	1328:96	17	file_size
LEAF_NODE	1328:105	1328:105	16	)
LEAF_NODE	1328:106	1328:106	10	)
STATEMENTS	1329:4	1329:4	10	
EXPR_STATEMENT	1329:4	1329:80	11	sp -> jpeg_interchange_format_length = sp -> file_size - sp -> jpeg_interchange_format ;
EXPR	1329:4	1329:4	12	sp -> jpeg_interchange_format_length = sp -> file_size - sp -> jpeg_interchange_format
ASSIGN	1329:4	1329:39	13	sp -> jpeg_interchange_format_length = sp -> file_size - sp -> jpeg_interchange_format
LVAL	1329:4	1329:4	14	sp -> jpeg_interchange_format_length
FIELD	1329:4	1329:8	15	sp -> jpeg_interchange_format_length
LEAF_NODE	1329:4	1329:4	16	sp
LEAF_NODE	1329:6	1329:6	16	->
LEAF_NODE	1329:8	1329:8	16	jpeg_interchange_format_length
ASSIGN_OP	1329:38	1329:38	14	=
LEAF_NODE	1329:38	1329:38	15	=
RVAL	1329:39	1329:53	14	sp -> file_size - sp -> jpeg_interchange_format
FIELD	1329:39	1329:43	15	sp -> file_size
LEAF_NODE	1329:39	1329:39	16	sp
LEAF_NODE	1329:41	1329:41	16	->
LEAF_NODE	1329:43	1329:43	16	file_size
LEAF_NODE	1329:52	1329:52	15	-
FIELD	1329:53	1329:57	15	sp -> jpeg_interchange_format
LEAF_NODE	1329:53	1329:53	16	sp
LEAF_NODE	1329:55	1329:55	16	->
LEAF_NODE	1329:57	1329:57	16	jpeg_interchange_format
LEAF_NODE	1329:80	1329:80	12	;
LEAF_NODE	1330:2	1330:2	8	}
LEAF_NODE	1331:1	1331:1	5	}
EXPR_STATEMENT	1332:1	1332:36	3	sp -> in_buffer_source = osibsNotSetYet ;
EXPR	1332:1	1332:1	4	sp -> in_buffer_source = osibsNotSetYet
ASSIGN	1332:1	1332:22	5	sp -> in_buffer_source = osibsNotSetYet
LVAL	1332:1	1332:1	6	sp -> in_buffer_source
FIELD	1332:1	1332:5	7	sp -> in_buffer_source
LEAF_NODE	1332:1	1332:1	8	sp
LEAF_NODE	1332:3	1332:3	8	->
LEAF_NODE	1332:5	1332:5	8	in_buffer_source
ASSIGN_OP	1332:21	1332:21	6	=
LEAF_NODE	1332:21	1332:21	7	=
RVAL	1332:22	1332:22	6	osibsNotSetYet
FIELD	1332:22	1332:22	7	osibsNotSetYet
LEAF_NODE	1332:22	1332:22	8	osibsNotSetYet
LEAF_NODE	1332:36	1332:36	4	;
EXPR_STATEMENT	1333:1	1333:28	3	sp -> in_buffer_next_strile = 0 ;
EXPR	1333:1	1333:1	4	sp -> in_buffer_next_strile = 0
ASSIGN	1333:1	1333:27	5	sp -> in_buffer_next_strile = 0
LVAL	1333:1	1333:1	6	sp -> in_buffer_next_strile
FIELD	1333:1	1333:5	7	sp -> in_buffer_next_strile
LEAF_NODE	1333:1	1333:1	8	sp
LEAF_NODE	1333:3	1333:3	8	->
LEAF_NODE	1333:5	1333:5	8	in_buffer_next_strile
ASSIGN_OP	1333:26	1333:26	6	=
LEAF_NODE	1333:26	1333:26	7	=
RVAL	1333:27	1333:27	6	0
FIELD	1333:27	1333:27	7	0
LEAF_NODE	1333:27	1333:27	8	0
LEAF_NODE	1333:28	1333:28	4	;
EXPR_STATEMENT	1334:1	1334:51	3	sp -> in_buffer_strile_count = tif -> tif_dir . td_nstrips ;
EXPR	1334:1	1334:1	4	sp -> in_buffer_strile_count = tif -> tif_dir . td_nstrips
ASSIGN	1334:1	1334:28	5	sp -> in_buffer_strile_count = tif -> tif_dir . td_nstrips
LVAL	1334:1	1334:1	6	sp -> in_buffer_strile_count
FIELD	1334:1	1334:5	7	sp -> in_buffer_strile_count
LEAF_NODE	1334:1	1334:1	8	sp
LEAF_NODE	1334:3	1334:3	8	->
LEAF_NODE	1334:5	1334:5	8	in_buffer_strile_count
ASSIGN_OP	1334:27	1334:27	6	=
LEAF_NODE	1334:27	1334:27	7	=
RVAL	1334:28	1334:28	6	tif -> tif_dir . td_nstrips
FIELD	1334:28	1334:41	7	tif -> tif_dir . td_nstrips
LEAF_NODE	1334:28	1334:28	8	tif
LEAF_NODE	1334:31	1334:31	8	->
LEAF_NODE	1334:33	1334:33	8	tif_dir
LEAF_NODE	1334:40	1334:40	8	.
LEAF_NODE	1334:41	1334:41	8	td_nstrips
LEAF_NODE	1334:51	1334:51	4	;
EXPR_STATEMENT	1335:1	1335:26	3	sp -> in_buffer_file_togo = 0 ;
EXPR	1335:1	1335:1	4	sp -> in_buffer_file_togo = 0
ASSIGN	1335:1	1335:25	5	sp -> in_buffer_file_togo = 0
LVAL	1335:1	1335:1	6	sp -> in_buffer_file_togo
FIELD	1335:1	1335:5	7	sp -> in_buffer_file_togo
LEAF_NODE	1335:1	1335:1	8	sp
LEAF_NODE	1335:3	1335:3	8	->
LEAF_NODE	1335:5	1335:5	8	in_buffer_file_togo
ASSIGN_OP	1335:24	1335:24	6	=
LEAF_NODE	1335:24	1335:24	7	=
RVAL	1335:25	1335:25	6	0
FIELD	1335:25	1335:25	7	0
LEAF_NODE	1335:25	1335:25	8	0
LEAF_NODE	1335:26	1335:26	4	;
EXPR_STATEMENT	1336:1	1336:21	3	sp -> in_buffer_togo = 0 ;
EXPR	1336:1	1336:1	4	sp -> in_buffer_togo = 0
ASSIGN	1336:1	1336:20	5	sp -> in_buffer_togo = 0
LVAL	1336:1	1336:1	6	sp -> in_buffer_togo
FIELD	1336:1	1336:5	7	sp -> in_buffer_togo
LEAF_NODE	1336:1	1336:1	8	sp
LEAF_NODE	1336:3	1336:3	8	->
LEAF_NODE	1336:5	1336:5	8	in_buffer_togo
ASSIGN_OP	1336:19	1336:19	6	=
LEAF_NODE	1336:19	1336:19	7	=
RVAL	1336:20	1336:20	6	0
FIELD	1336:20	1336:20	7	0
LEAF_NODE	1336:20	1336:20	8	0
LEAF_NODE	1336:21	1336:21	4	;
ITERATION	1337:1	1338:1	3	
KEYWORD	1337:1	1337:1	4	do
LEAF_NODE	1337:1	1337:1	5	do
LEAF_NODE	1414:8	1414:8	4	(
CONDITION	1414:9	1414:9	4	m != JPEG_MARKER_SOS
EXPR	1414:9	1414:12	5	m != JPEG_MARKER_SOS
FIELD	1414:9	1414:9	6	m
LEAF_NODE	1414:9	1414:9	7	m
EQ_OPERATOR	1414:10	1414:10	6	!=
LEAF_NODE	1414:10	1414:10	7	!=
FIELD	1414:12	1414:12	6	JPEG_MARKER_SOS
LEAF_NODE	1414:12	1414:12	7	JPEG_MARKER_SOS
LEAF_NODE	1414:27	1414:27	4	)
STATEMENTS	1338:1	1414:1	4	
LEAF_NODE	1338:1	1338:1	5	{
STATEMENTS	1339:2	1349:2	5	
SELECTION	1339:2	1340:3	6	
KEYWORD	1339:2	1339:2	7	if
LEAF_NODE	1339:2	1339:2	8	if
LEAF_NODE	1339:5	1339:5	7	(
CONDITION	1339:6	1339:6	7	OJPEGReadBytePeek ( sp , & m ) == 0
EXPR	1339:6	1339:32	8	OJPEGReadBytePeek ( sp , & m ) == 0
FUNCTION_CALL	1339:6	1339:29	9	OJPEGReadBytePeek ( sp , & m )
CALLEE	1339:6	1339:6	10	OJPEGReadBytePeek
LEAF_NODE	1339:6	1339:6	11	OJPEGReadBytePeek
LEAF_NODE	1339:23	1339:23	10	(
ARGUMENT	1339:24	1339:24	10	sp
FIELD	1339:24	1339:24	11	sp
LEAF_NODE	1339:24	1339:24	12	sp
LEAF_NODE	1339:26	1339:26	10	,
ARGUMENT	1339:27	1339:27	10	& m
UNARY_EXPR	1339:27	1339:28	11	& m
UNARY_OPERATOR	1339:27	1339:27	12	&
LEAF_NODE	1339:27	1339:27	13	&
FIELD	1339:28	1339:28	12	m
LEAF_NODE	1339:28	1339:28	13	m
LEAF_NODE	1339:29	1339:29	10	)
EQ_OPERATOR	1339:30	1339:30	9	==
LEAF_NODE	1339:30	1339:30	10	==
FIELD	1339:32	1339:32	9	0
LEAF_NODE	1339:32	1339:32	10	0
LEAF_NODE	1339:33	1339:33	7	)
STATEMENTS	1340:3	1340:3	7	
JUMP_STATEMENT	1340:3	1340:12	8	return ( 0 ) ;
KEYWORD	1340:3	1340:3	9	return
LEAF_NODE	1340:3	1340:3	10	return
DESTINATION	1340:9	1340:9	9	( 0 )
EXPR	1340:9	1340:11	10	( 0 )
LEAF_NODE	1340:9	1340:9	11	(
FIELD	1340:10	1340:10	11	0
LEAF_NODE	1340:10	1340:10	12	0
LEAF_NODE	1340:11	1340:11	11	)
LEAF_NODE	1340:12	1340:12	9	;
SELECTION	1341:2	1342:3	6	
KEYWORD	1341:2	1341:2	7	if
LEAF_NODE	1341:2	1341:2	8	if
LEAF_NODE	1341:5	1341:5	7	(
CONDITION	1341:6	1341:6	7	m != 255
EXPR	1341:6	1341:9	8	m != 255
FIELD	1341:6	1341:6	9	m
LEAF_NODE	1341:6	1341:6	10	m
EQ_OPERATOR	1341:7	1341:7	9	!=
LEAF_NODE	1341:7	1341:7	10	!=
FIELD	1341:9	1341:9	9	255
LEAF_NODE	1341:9	1341:9	10	255
LEAF_NODE	1341:12	1341:12	7	)
STATEMENTS	1342:3	1342:3	7	
JUMP_STATEMENT	1342:3	1342:8	8	break DESTINATION ;
KEYWORD	1342:3	1342:3	9	break
LEAF_NODE	1342:3	1342:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	1342:8	1342:8	9	;
EXPR_STATEMENT	1343:2	1343:26	6	OJPEGReadByteAdvance ( sp ) ;
EXPR	1343:2	1343:2	7	OJPEGReadByteAdvance ( sp )
FUNCTION_CALL	1343:2	1343:25	8	OJPEGReadByteAdvance ( sp )
CALLEE	1343:2	1343:2	9	OJPEGReadByteAdvance
LEAF_NODE	1343:2	1343:2	10	OJPEGReadByteAdvance
LEAF_NODE	1343:22	1343:22	9	(
ARGUMENT	1343:23	1343:23	9	sp
FIELD	1343:23	1343:23	10	sp
LEAF_NODE	1343:23	1343:23	11	sp
LEAF_NODE	1343:25	1343:25	9	)
LEAF_NODE	1343:26	1343:26	7	;
ITERATION	1344:2	1345:2	6	
KEYWORD	1344:2	1344:2	7	do
LEAF_NODE	1344:2	1344:2	8	do
LEAF_NODE	1348:9	1348:9	7	(
CONDITION	1348:10	1348:10	7	m == 255
EXPR	1348:10	1348:13	8	m == 255
FIELD	1348:10	1348:10	9	m
LEAF_NODE	1348:10	1348:10	10	m
EQ_OPERATOR	1348:11	1348:11	9	==
LEAF_NODE	1348:11	1348:11	10	==
FIELD	1348:13	1348:13	9	255
LEAF_NODE	1348:13	1348:13	10	255
LEAF_NODE	1348:16	1348:16	7	)
STATEMENTS	1345:2	1348:2	7	
LEAF_NODE	1345:2	1345:2	8	{
STATEMENTS	1346:3	1346:3	8	
SELECTION	1346:3	1347:4	9	
KEYWORD	1346:3	1346:3	10	if
LEAF_NODE	1346:3	1346:3	11	if
LEAF_NODE	1346:6	1346:6	10	(
CONDITION	1346:7	1346:7	10	OJPEGReadByte ( sp , & m ) == 0
EXPR	1346:7	1346:29	11	OJPEGReadByte ( sp , & m ) == 0
FUNCTION_CALL	1346:7	1346:26	12	OJPEGReadByte ( sp , & m )
CALLEE	1346:7	1346:7	13	OJPEGReadByte
LEAF_NODE	1346:7	1346:7	14	OJPEGReadByte
LEAF_NODE	1346:20	1346:20	13	(
ARGUMENT	1346:21	1346:21	13	sp
FIELD	1346:21	1346:21	14	sp
LEAF_NODE	1346:21	1346:21	15	sp
LEAF_NODE	1346:23	1346:23	13	,
ARGUMENT	1346:24	1346:24	13	& m
UNARY_EXPR	1346:24	1346:25	14	& m
UNARY_OPERATOR	1346:24	1346:24	15	&
LEAF_NODE	1346:24	1346:24	16	&
FIELD	1346:25	1346:25	15	m
LEAF_NODE	1346:25	1346:25	16	m
LEAF_NODE	1346:26	1346:26	13	)
EQ_OPERATOR	1346:27	1346:27	12	==
LEAF_NODE	1346:27	1346:27	13	==
FIELD	1346:29	1346:29	12	0
LEAF_NODE	1346:29	1346:29	13	0
LEAF_NODE	1346:30	1346:30	10	)
STATEMENTS	1347:4	1347:4	10	
JUMP_STATEMENT	1347:4	1347:13	11	return ( 0 ) ;
KEYWORD	1347:4	1347:4	12	return
LEAF_NODE	1347:4	1347:4	13	return
DESTINATION	1347:10	1347:10	12	( 0 )
EXPR	1347:10	1347:12	13	( 0 )
LEAF_NODE	1347:10	1347:10	14	(
FIELD	1347:11	1347:11	14	0
LEAF_NODE	1347:11	1347:11	15	0
LEAF_NODE	1347:12	1347:12	14	)
LEAF_NODE	1347:13	1347:13	12	;
LEAF_NODE	1348:2	1348:2	8	}
LEAF_NODE	1348:17	1348:17	6	;
SELECTION	1349:2	1350:2	6	
KEYWORD	1349:2	1349:2	7	switch
LEAF_NODE	1349:2	1349:2	8	switch
LEAF_NODE	1349:8	1349:8	7	(
CONDITION	1349:9	1349:9	7	m
EXPR	1349:9	1349:9	8	m
FIELD	1349:9	1349:9	9	m
LEAF_NODE	1349:9	1349:9	10	m
LEAF_NODE	1349:10	1349:10	7	)
STATEMENTS	1350:2	1413:2	7	
LEAF_NODE	1350:2	1350:2	8	{
STATEMENTS	1351:3	1412:4	8	
LABEL	1351:3	1351:23	9	case JPEG_MARKER_SOI :
LEAF_NODE	1351:3	1351:3	10	case
LEAF_NODE	1351:8	1351:8	10	JPEG_MARKER_SOI
LEAF_NODE	1351:23	1351:23	10	:
JUMP_STATEMENT	1353:4	1353:9	9	break DESTINATION ;
KEYWORD	1353:4	1353:4	10	break
LEAF_NODE	1353:4	1353:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1353:9	1353:9	10	;
LABEL	1354:3	1354:23	9	case JPEG_MARKER_COM :
LEAF_NODE	1354:3	1354:3	10	case
LEAF_NODE	1354:8	1354:8	10	JPEG_MARKER_COM
LEAF_NODE	1354:23	1354:23	10	:
LABEL	1355:3	1355:24	9	case JPEG_MARKER_APP0 :
LEAF_NODE	1355:3	1355:3	10	case
LEAF_NODE	1355:8	1355:8	10	JPEG_MARKER_APP0
LEAF_NODE	1355:24	1355:24	10	:
LEAF_NODE	1356:3	1356:3	9	case
LEAF_NODE	1356:8	1356:8	9	JPEG_MARKER_APP0
LEAF_NODE	1356:24	1356:24	9	+
LABEL	1356:25	1356:26	9	1 :
LEAF_NODE	1356:25	1356:25	10	1
LEAF_NODE	1356:26	1356:26	10	:
LEAF_NODE	1357:3	1357:3	9	case
LEAF_NODE	1357:8	1357:8	9	JPEG_MARKER_APP0
LEAF_NODE	1357:24	1357:24	9	+
LABEL	1357:25	1357:26	9	2 :
LEAF_NODE	1357:25	1357:25	10	2
LEAF_NODE	1357:26	1357:26	10	:
LEAF_NODE	1358:3	1358:3	9	case
LEAF_NODE	1358:8	1358:8	9	JPEG_MARKER_APP0
LEAF_NODE	1358:24	1358:24	9	+
LABEL	1358:25	1358:26	9	3 :
LEAF_NODE	1358:25	1358:25	10	3
LEAF_NODE	1358:26	1358:26	10	:
LEAF_NODE	1359:3	1359:3	9	case
LEAF_NODE	1359:8	1359:8	9	JPEG_MARKER_APP0
LEAF_NODE	1359:24	1359:24	9	+
LABEL	1359:25	1359:26	9	4 :
LEAF_NODE	1359:25	1359:25	10	4
LEAF_NODE	1359:26	1359:26	10	:
LEAF_NODE	1360:3	1360:3	9	case
LEAF_NODE	1360:8	1360:8	9	JPEG_MARKER_APP0
LEAF_NODE	1360:24	1360:24	9	+
LABEL	1360:25	1360:26	9	5 :
LEAF_NODE	1360:25	1360:25	10	5
LEAF_NODE	1360:26	1360:26	10	:
LEAF_NODE	1361:3	1361:3	9	case
LEAF_NODE	1361:8	1361:8	9	JPEG_MARKER_APP0
LEAF_NODE	1361:24	1361:24	9	+
LABEL	1361:25	1361:26	9	6 :
LEAF_NODE	1361:25	1361:25	10	6
LEAF_NODE	1361:26	1361:26	10	:
LEAF_NODE	1362:3	1362:3	9	case
LEAF_NODE	1362:8	1362:8	9	JPEG_MARKER_APP0
LEAF_NODE	1362:24	1362:24	9	+
LABEL	1362:25	1362:26	9	7 :
LEAF_NODE	1362:25	1362:25	10	7
LEAF_NODE	1362:26	1362:26	10	:
LEAF_NODE	1363:3	1363:3	9	case
LEAF_NODE	1363:8	1363:8	9	JPEG_MARKER_APP0
LEAF_NODE	1363:24	1363:24	9	+
LABEL	1363:25	1363:26	9	8 :
LEAF_NODE	1363:25	1363:25	10	8
LEAF_NODE	1363:26	1363:26	10	:
LEAF_NODE	1364:3	1364:3	9	case
LEAF_NODE	1364:8	1364:8	9	JPEG_MARKER_APP0
LEAF_NODE	1364:24	1364:24	9	+
LABEL	1364:25	1364:26	9	9 :
LEAF_NODE	1364:25	1364:25	10	9
LEAF_NODE	1364:26	1364:26	10	:
LEAF_NODE	1365:3	1365:3	9	case
LEAF_NODE	1365:8	1365:8	9	JPEG_MARKER_APP0
LEAF_NODE	1365:24	1365:24	9	+
LABEL	1365:25	1365:27	9	10 :
LEAF_NODE	1365:25	1365:25	10	10
LEAF_NODE	1365:27	1365:27	10	:
LEAF_NODE	1366:3	1366:3	9	case
LEAF_NODE	1366:8	1366:8	9	JPEG_MARKER_APP0
LEAF_NODE	1366:24	1366:24	9	+
LABEL	1366:25	1366:27	9	11 :
LEAF_NODE	1366:25	1366:25	10	11
LEAF_NODE	1366:27	1366:27	10	:
LEAF_NODE	1367:3	1367:3	9	case
LEAF_NODE	1367:8	1367:8	9	JPEG_MARKER_APP0
LEAF_NODE	1367:24	1367:24	9	+
LABEL	1367:25	1367:27	9	12 :
LEAF_NODE	1367:25	1367:25	10	12
LEAF_NODE	1367:27	1367:27	10	:
LEAF_NODE	1368:3	1368:3	9	case
LEAF_NODE	1368:8	1368:8	9	JPEG_MARKER_APP0
LEAF_NODE	1368:24	1368:24	9	+
LABEL	1368:25	1368:27	9	13 :
LEAF_NODE	1368:25	1368:25	10	13
LEAF_NODE	1368:27	1368:27	10	:
LEAF_NODE	1369:3	1369:3	9	case
LEAF_NODE	1369:8	1369:8	9	JPEG_MARKER_APP0
LEAF_NODE	1369:24	1369:24	9	+
LABEL	1369:25	1369:27	9	14 :
LEAF_NODE	1369:25	1369:25	10	14
LEAF_NODE	1369:27	1369:27	10	:
LEAF_NODE	1370:3	1370:3	9	case
LEAF_NODE	1370:8	1370:8	9	JPEG_MARKER_APP0
LEAF_NODE	1370:24	1370:24	9	+
LABEL	1370:25	1370:27	9	15 :
LEAF_NODE	1370:25	1370:25	10	15
LEAF_NODE	1370:27	1370:27	10	:
SELECTION	1372:4	1373:5	9	
KEYWORD	1372:4	1372:4	10	if
LEAF_NODE	1372:4	1372:4	11	if
LEAF_NODE	1372:7	1372:7	10	(
CONDITION	1372:8	1372:8	10	OJPEGReadWord ( sp , & n ) == 0
EXPR	1372:8	1372:30	11	OJPEGReadWord ( sp , & n ) == 0
FUNCTION_CALL	1372:8	1372:27	12	OJPEGReadWord ( sp , & n )
CALLEE	1372:8	1372:8	13	OJPEGReadWord
LEAF_NODE	1372:8	1372:8	14	OJPEGReadWord
LEAF_NODE	1372:21	1372:21	13	(
ARGUMENT	1372:22	1372:22	13	sp
FIELD	1372:22	1372:22	14	sp
LEAF_NODE	1372:22	1372:22	15	sp
LEAF_NODE	1372:24	1372:24	13	,
ARGUMENT	1372:25	1372:25	13	& n
UNARY_EXPR	1372:25	1372:26	14	& n
UNARY_OPERATOR	1372:25	1372:25	15	&
LEAF_NODE	1372:25	1372:25	16	&
FIELD	1372:26	1372:26	15	n
LEAF_NODE	1372:26	1372:26	16	n
LEAF_NODE	1372:27	1372:27	13	)
EQ_OPERATOR	1372:28	1372:28	12	==
LEAF_NODE	1372:28	1372:28	13	==
FIELD	1372:30	1372:30	12	0
LEAF_NODE	1372:30	1372:30	13	0
LEAF_NODE	1372:31	1372:31	10	)
STATEMENTS	1373:5	1373:5	10	
JUMP_STATEMENT	1373:5	1373:14	11	return ( 0 ) ;
KEYWORD	1373:5	1373:5	12	return
LEAF_NODE	1373:5	1373:5	13	return
DESTINATION	1373:11	1373:11	12	( 0 )
EXPR	1373:11	1373:13	13	( 0 )
LEAF_NODE	1373:11	1373:11	14	(
FIELD	1373:12	1373:12	14	0
LEAF_NODE	1373:12	1373:12	15	0
LEAF_NODE	1373:13	1373:13	14	)
LEAF_NODE	1373:14	1373:14	12	;
SELECTION	1374:4	1375:4	9	
KEYWORD	1374:4	1374:4	10	if
LEAF_NODE	1374:4	1374:4	11	if
LEAF_NODE	1374:7	1374:7	10	(
CONDITION	1374:8	1374:8	10	n < 2
EXPR	1374:8	1374:10	11	n < 2
FIELD	1374:8	1374:8	12	n
LEAF_NODE	1374:8	1374:8	13	n
REL_OPERATOR	1374:9	1374:9	12	<
LEAF_NODE	1374:9	1374:9	13	<
FIELD	1374:10	1374:10	12	2
LEAF_NODE	1374:10	1374:10	13	2
LEAF_NODE	1374:11	1374:11	10	)
STATEMENTS	1375:4	1379:4	10	
LEAF_NODE	1375:4	1375:4	11	{
STATEMENTS	1376:5	1378:5	11	
SELECTION	1376:5	1377:6	12	
KEYWORD	1376:5	1376:5	13	if
LEAF_NODE	1376:5	1376:5	14	if
LEAF_NODE	1376:8	1376:8	13	(
CONDITION	1376:9	1376:9	13	sp -> subsamplingcorrect == 0
EXPR	1376:9	1376:33	14	sp -> subsamplingcorrect == 0
FIELD	1376:9	1376:13	15	sp -> subsamplingcorrect
LEAF_NODE	1376:9	1376:9	16	sp
LEAF_NODE	1376:11	1376:11	16	->
LEAF_NODE	1376:13	1376:13	16	subsamplingcorrect
EQ_OPERATOR	1376:31	1376:31	15	==
LEAF_NODE	1376:31	1376:31	16	==
FIELD	1376:33	1376:33	15	0
LEAF_NODE	1376:33	1376:33	16	0
LEAF_NODE	1376:34	1376:34	13	)
STATEMENTS	1377:6	1377:6	13	
EXPR_STATEMENT	1377:6	1377:66	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JPEG data" ) ;
EXPR	1377:6	1377:6	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JPEG data" )
FUNCTION_CALL	1377:6	1377:65	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JPEG data" )
CALLEE	1377:6	1377:6	17	TIFFErrorExt
LEAF_NODE	1377:6	1377:6	18	TIFFErrorExt
LEAF_NODE	1377:18	1377:18	17	(
ARGUMENT	1377:19	1377:19	17	tif -> tif_clientdata
FIELD	1377:19	1377:24	18	tif -> tif_clientdata
LEAF_NODE	1377:19	1377:19	19	tif
LEAF_NODE	1377:22	1377:22	19	->
LEAF_NODE	1377:24	1377:24	19	tif_clientdata
LEAF_NODE	1377:38	1377:38	17	,
ARGUMENT	1377:39	1377:39	17	module
FIELD	1377:39	1377:39	18	module
LEAF_NODE	1377:39	1377:39	19	module
LEAF_NODE	1377:45	1377:45	17	,
ARGUMENT	1377:46	1377:46	17	"Corrupt JPEG data"
FIELD	1377:46	1377:46	18	"Corrupt JPEG data"
LEAF_NODE	1377:46	1377:46	19	"Corrupt JPEG data"
LEAF_NODE	1377:65	1377:65	17	)
LEAF_NODE	1377:66	1377:66	15	;
JUMP_STATEMENT	1378:5	1378:14	12	return ( 0 ) ;
KEYWORD	1378:5	1378:5	13	return
LEAF_NODE	1378:5	1378:5	14	return
DESTINATION	1378:11	1378:11	13	( 0 )
EXPR	1378:11	1378:13	14	( 0 )
LEAF_NODE	1378:11	1378:11	15	(
FIELD	1378:12	1378:12	15	0
LEAF_NODE	1378:12	1378:12	16	0
LEAF_NODE	1378:13	1378:13	15	)
LEAF_NODE	1378:14	1378:14	13	;
LEAF_NODE	1379:4	1379:4	11	}
SELECTION	1380:4	1381:5	9	
KEYWORD	1380:4	1380:4	10	if
LEAF_NODE	1380:4	1380:4	11	if
LEAF_NODE	1380:7	1380:7	10	(
CONDITION	1380:8	1380:8	10	n > 2
EXPR	1380:8	1380:10	11	n > 2
FIELD	1380:8	1380:8	12	n
LEAF_NODE	1380:8	1380:8	13	n
REL_OPERATOR	1380:9	1380:9	12	>
LEAF_NODE	1380:9	1380:9	13	>
FIELD	1380:10	1380:10	12	2
LEAF_NODE	1380:10	1380:10	13	2
LEAF_NODE	1380:11	1380:11	10	)
STATEMENTS	1381:5	1381:5	10	
EXPR_STATEMENT	1381:5	1381:26	11	OJPEGReadSkip ( sp , n - 2 ) ;
EXPR	1381:5	1381:5	12	OJPEGReadSkip ( sp , n - 2 )
FUNCTION_CALL	1381:5	1381:25	13	OJPEGReadSkip ( sp , n - 2 )
CALLEE	1381:5	1381:5	14	OJPEGReadSkip
LEAF_NODE	1381:5	1381:5	15	OJPEGReadSkip
LEAF_NODE	1381:18	1381:18	14	(
ARGUMENT	1381:19	1381:19	14	sp
FIELD	1381:19	1381:19	15	sp
LEAF_NODE	1381:19	1381:19	16	sp
LEAF_NODE	1381:21	1381:21	14	,
ARGUMENT	1381:22	1381:24	14	n - 2
FIELD	1381:22	1381:22	15	n
LEAF_NODE	1381:22	1381:22	16	n
LEAF_NODE	1381:23	1381:23	15	-
FIELD	1381:24	1381:24	15	2
LEAF_NODE	1381:24	1381:24	16	2
LEAF_NODE	1381:25	1381:25	14	)
LEAF_NODE	1381:26	1381:26	12	;
JUMP_STATEMENT	1382:4	1382:9	9	break DESTINATION ;
KEYWORD	1382:4	1382:4	10	break
LEAF_NODE	1382:4	1382:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1382:9	1382:9	10	;
LABEL	1383:3	1383:23	9	case JPEG_MARKER_DRI :
LEAF_NODE	1383:3	1383:3	10	case
LEAF_NODE	1383:8	1383:8	10	JPEG_MARKER_DRI
LEAF_NODE	1383:23	1383:23	10	:
SELECTION	1384:4	1385:5	9	
KEYWORD	1384:4	1384:4	10	if
LEAF_NODE	1384:4	1384:4	11	if
LEAF_NODE	1384:7	1384:7	10	(
CONDITION	1384:8	1384:8	10	OJPEGReadHeaderInfoSecStreamDri ( tif ) == 0
EXPR	1384:8	1384:46	11	OJPEGReadHeaderInfoSecStreamDri ( tif ) == 0
FUNCTION_CALL	1384:8	1384:43	12	OJPEGReadHeaderInfoSecStreamDri ( tif )
CALLEE	1384:8	1384:8	13	OJPEGReadHeaderInfoSecStreamDri
LEAF_NODE	1384:8	1384:8	14	OJPEGReadHeaderInfoSecStreamDri
LEAF_NODE	1384:39	1384:39	13	(
ARGUMENT	1384:40	1384:40	13	tif
FIELD	1384:40	1384:40	14	tif
LEAF_NODE	1384:40	1384:40	15	tif
LEAF_NODE	1384:43	1384:43	13	)
EQ_OPERATOR	1384:44	1384:44	12	==
LEAF_NODE	1384:44	1384:44	13	==
FIELD	1384:46	1384:46	12	0
LEAF_NODE	1384:46	1384:46	13	0
LEAF_NODE	1384:47	1384:47	10	)
STATEMENTS	1385:5	1385:5	10	
JUMP_STATEMENT	1385:5	1385:14	11	return ( 0 ) ;
KEYWORD	1385:5	1385:5	12	return
LEAF_NODE	1385:5	1385:5	13	return
DESTINATION	1385:11	1385:11	12	( 0 )
EXPR	1385:11	1385:13	13	( 0 )
LEAF_NODE	1385:11	1385:11	14	(
FIELD	1385:12	1385:12	14	0
LEAF_NODE	1385:12	1385:12	15	0
LEAF_NODE	1385:13	1385:13	14	)
LEAF_NODE	1385:14	1385:14	12	;
JUMP_STATEMENT	1386:4	1386:9	9	break DESTINATION ;
KEYWORD	1386:4	1386:4	10	break
LEAF_NODE	1386:4	1386:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1386:9	1386:9	10	;
LABEL	1387:3	1387:23	9	case JPEG_MARKER_DQT :
LEAF_NODE	1387:3	1387:3	10	case
LEAF_NODE	1387:8	1387:8	10	JPEG_MARKER_DQT
LEAF_NODE	1387:23	1387:23	10	:
SELECTION	1388:4	1389:5	9	
KEYWORD	1388:4	1388:4	10	if
LEAF_NODE	1388:4	1388:4	11	if
LEAF_NODE	1388:7	1388:7	10	(
CONDITION	1388:8	1388:8	10	OJPEGReadHeaderInfoSecStreamDqt ( tif ) == 0
EXPR	1388:8	1388:46	11	OJPEGReadHeaderInfoSecStreamDqt ( tif ) == 0
FUNCTION_CALL	1388:8	1388:43	12	OJPEGReadHeaderInfoSecStreamDqt ( tif )
CALLEE	1388:8	1388:8	13	OJPEGReadHeaderInfoSecStreamDqt
LEAF_NODE	1388:8	1388:8	14	OJPEGReadHeaderInfoSecStreamDqt
LEAF_NODE	1388:39	1388:39	13	(
ARGUMENT	1388:40	1388:40	13	tif
FIELD	1388:40	1388:40	14	tif
LEAF_NODE	1388:40	1388:40	15	tif
LEAF_NODE	1388:43	1388:43	13	)
EQ_OPERATOR	1388:44	1388:44	12	==
LEAF_NODE	1388:44	1388:44	13	==
FIELD	1388:46	1388:46	12	0
LEAF_NODE	1388:46	1388:46	13	0
LEAF_NODE	1388:47	1388:47	10	)
STATEMENTS	1389:5	1389:5	10	
JUMP_STATEMENT	1389:5	1389:14	11	return ( 0 ) ;
KEYWORD	1389:5	1389:5	12	return
LEAF_NODE	1389:5	1389:5	13	return
DESTINATION	1389:11	1389:11	12	( 0 )
EXPR	1389:11	1389:13	13	( 0 )
LEAF_NODE	1389:11	1389:11	14	(
FIELD	1389:12	1389:12	14	0
LEAF_NODE	1389:12	1389:12	15	0
LEAF_NODE	1389:13	1389:13	14	)
LEAF_NODE	1389:14	1389:14	12	;
JUMP_STATEMENT	1390:4	1390:9	9	break DESTINATION ;
KEYWORD	1390:4	1390:4	10	break
LEAF_NODE	1390:4	1390:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1390:9	1390:9	10	;
LABEL	1391:3	1391:23	9	case JPEG_MARKER_DHT :
LEAF_NODE	1391:3	1391:3	10	case
LEAF_NODE	1391:8	1391:8	10	JPEG_MARKER_DHT
LEAF_NODE	1391:23	1391:23	10	:
SELECTION	1392:4	1393:5	9	
KEYWORD	1392:4	1392:4	10	if
LEAF_NODE	1392:4	1392:4	11	if
LEAF_NODE	1392:7	1392:7	10	(
CONDITION	1392:8	1392:8	10	OJPEGReadHeaderInfoSecStreamDht ( tif ) == 0
EXPR	1392:8	1392:46	11	OJPEGReadHeaderInfoSecStreamDht ( tif ) == 0
FUNCTION_CALL	1392:8	1392:43	12	OJPEGReadHeaderInfoSecStreamDht ( tif )
CALLEE	1392:8	1392:8	13	OJPEGReadHeaderInfoSecStreamDht
LEAF_NODE	1392:8	1392:8	14	OJPEGReadHeaderInfoSecStreamDht
LEAF_NODE	1392:39	1392:39	13	(
ARGUMENT	1392:40	1392:40	13	tif
FIELD	1392:40	1392:40	14	tif
LEAF_NODE	1392:40	1392:40	15	tif
LEAF_NODE	1392:43	1392:43	13	)
EQ_OPERATOR	1392:44	1392:44	12	==
LEAF_NODE	1392:44	1392:44	13	==
FIELD	1392:46	1392:46	12	0
LEAF_NODE	1392:46	1392:46	13	0
LEAF_NODE	1392:47	1392:47	10	)
STATEMENTS	1393:5	1393:5	10	
JUMP_STATEMENT	1393:5	1393:14	11	return ( 0 ) ;
KEYWORD	1393:5	1393:5	12	return
LEAF_NODE	1393:5	1393:5	13	return
DESTINATION	1393:11	1393:11	12	( 0 )
EXPR	1393:11	1393:13	13	( 0 )
LEAF_NODE	1393:11	1393:11	14	(
FIELD	1393:12	1393:12	14	0
LEAF_NODE	1393:12	1393:12	15	0
LEAF_NODE	1393:13	1393:13	14	)
LEAF_NODE	1393:14	1393:14	12	;
JUMP_STATEMENT	1394:4	1394:9	9	break DESTINATION ;
KEYWORD	1394:4	1394:4	10	break
LEAF_NODE	1394:4	1394:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1394:9	1394:9	10	;
LABEL	1395:3	1395:24	9	case JPEG_MARKER_SOF0 :
LEAF_NODE	1395:3	1395:3	10	case
LEAF_NODE	1395:8	1395:8	10	JPEG_MARKER_SOF0
LEAF_NODE	1395:24	1395:24	10	:
LABEL	1396:3	1396:24	9	case JPEG_MARKER_SOF1 :
LEAF_NODE	1396:3	1396:3	10	case
LEAF_NODE	1396:8	1396:8	10	JPEG_MARKER_SOF1
LEAF_NODE	1396:24	1396:24	10	:
LABEL	1397:3	1397:24	9	case JPEG_MARKER_SOF3 :
LEAF_NODE	1397:3	1397:3	10	case
LEAF_NODE	1397:8	1397:8	10	JPEG_MARKER_SOF3
LEAF_NODE	1397:24	1397:24	10	:
SELECTION	1398:4	1399:5	9	
KEYWORD	1398:4	1398:4	10	if
LEAF_NODE	1398:4	1398:4	11	if
LEAF_NODE	1398:7	1398:7	10	(
CONDITION	1398:8	1398:8	10	OJPEGReadHeaderInfoSecStreamSof ( tif , m ) == 0
EXPR	1398:8	1398:48	11	OJPEGReadHeaderInfoSecStreamSof ( tif , m ) == 0
FUNCTION_CALL	1398:8	1398:45	12	OJPEGReadHeaderInfoSecStreamSof ( tif , m )
CALLEE	1398:8	1398:8	13	OJPEGReadHeaderInfoSecStreamSof
LEAF_NODE	1398:8	1398:8	14	OJPEGReadHeaderInfoSecStreamSof
LEAF_NODE	1398:39	1398:39	13	(
ARGUMENT	1398:40	1398:40	13	tif
FIELD	1398:40	1398:40	14	tif
LEAF_NODE	1398:40	1398:40	15	tif
LEAF_NODE	1398:43	1398:43	13	,
ARGUMENT	1398:44	1398:44	13	m
FIELD	1398:44	1398:44	14	m
LEAF_NODE	1398:44	1398:44	15	m
LEAF_NODE	1398:45	1398:45	13	)
EQ_OPERATOR	1398:46	1398:46	12	==
LEAF_NODE	1398:46	1398:46	13	==
FIELD	1398:48	1398:48	12	0
LEAF_NODE	1398:48	1398:48	13	0
LEAF_NODE	1398:49	1398:49	10	)
STATEMENTS	1399:5	1399:5	10	
JUMP_STATEMENT	1399:5	1399:14	11	return ( 0 ) ;
KEYWORD	1399:5	1399:5	12	return
LEAF_NODE	1399:5	1399:5	13	return
DESTINATION	1399:11	1399:11	12	( 0 )
EXPR	1399:11	1399:13	13	( 0 )
LEAF_NODE	1399:11	1399:11	14	(
FIELD	1399:12	1399:12	14	0
LEAF_NODE	1399:12	1399:12	15	0
LEAF_NODE	1399:13	1399:13	14	)
LEAF_NODE	1399:14	1399:14	12	;
SELECTION	1400:4	1401:5	9	
KEYWORD	1400:4	1400:4	10	if
LEAF_NODE	1400:4	1400:4	11	if
LEAF_NODE	1400:7	1400:7	10	(
CONDITION	1400:8	1400:8	10	sp -> subsamplingcorrect != 0
EXPR	1400:8	1400:32	11	sp -> subsamplingcorrect != 0
FIELD	1400:8	1400:12	12	sp -> subsamplingcorrect
LEAF_NODE	1400:8	1400:8	13	sp
LEAF_NODE	1400:10	1400:10	13	->
LEAF_NODE	1400:12	1400:12	13	subsamplingcorrect
EQ_OPERATOR	1400:30	1400:30	12	!=
LEAF_NODE	1400:30	1400:30	13	!=
FIELD	1400:32	1400:32	12	0
LEAF_NODE	1400:32	1400:32	13	0
LEAF_NODE	1400:33	1400:33	10	)
STATEMENTS	1401:5	1401:5	10	
JUMP_STATEMENT	1401:5	1401:14	11	return ( 1 ) ;
KEYWORD	1401:5	1401:5	12	return
LEAF_NODE	1401:5	1401:5	13	return
DESTINATION	1401:11	1401:11	12	( 1 )
EXPR	1401:11	1401:13	13	( 1 )
LEAF_NODE	1401:11	1401:11	14	(
FIELD	1401:12	1401:12	14	1
LEAF_NODE	1401:12	1401:12	15	1
LEAF_NODE	1401:13	1401:13	14	)
LEAF_NODE	1401:14	1401:14	12	;
JUMP_STATEMENT	1402:4	1402:9	9	break DESTINATION ;
KEYWORD	1402:4	1402:4	10	break
LEAF_NODE	1402:4	1402:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1402:9	1402:9	10	;
LABEL	1403:3	1403:23	9	case JPEG_MARKER_SOS :
LEAF_NODE	1403:3	1403:3	10	case
LEAF_NODE	1403:8	1403:8	10	JPEG_MARKER_SOS
LEAF_NODE	1403:23	1403:23	10	:
SELECTION	1404:4	1405:5	9	
KEYWORD	1404:4	1404:4	10	if
LEAF_NODE	1404:4	1404:4	11	if
LEAF_NODE	1404:7	1404:7	10	(
CONDITION	1404:8	1404:8	10	sp -> subsamplingcorrect != 0
EXPR	1404:8	1404:32	11	sp -> subsamplingcorrect != 0
FIELD	1404:8	1404:12	12	sp -> subsamplingcorrect
LEAF_NODE	1404:8	1404:8	13	sp
LEAF_NODE	1404:10	1404:10	13	->
LEAF_NODE	1404:12	1404:12	13	subsamplingcorrect
EQ_OPERATOR	1404:30	1404:30	12	!=
LEAF_NODE	1404:30	1404:30	13	!=
FIELD	1404:32	1404:32	12	0
LEAF_NODE	1404:32	1404:32	13	0
LEAF_NODE	1404:33	1404:33	10	)
STATEMENTS	1405:5	1405:5	10	
JUMP_STATEMENT	1405:5	1405:14	11	return ( 1 ) ;
KEYWORD	1405:5	1405:5	12	return
LEAF_NODE	1405:5	1405:5	13	return
DESTINATION	1405:11	1405:11	12	( 1 )
EXPR	1405:11	1405:13	13	( 1 )
LEAF_NODE	1405:11	1405:11	14	(
FIELD	1405:12	1405:12	14	1
LEAF_NODE	1405:12	1405:12	15	1
LEAF_NODE	1405:13	1405:13	14	)
LEAF_NODE	1405:14	1405:14	12	;
EXPR_STATEMENT	1406:4	1406:38	9	assert ( sp -> plane_sample_offset == 0 ) ;
EXPR	1406:4	1406:4	10	assert ( sp -> plane_sample_offset == 0 )
FUNCTION_CALL	1406:4	1406:37	11	assert ( sp -> plane_sample_offset == 0 )
CALLEE	1406:4	1406:4	12	assert
LEAF_NODE	1406:4	1406:4	13	assert
LEAF_NODE	1406:10	1406:10	12	(
ARGUMENT	1406:11	1406:36	12	sp -> plane_sample_offset == 0
FIELD	1406:11	1406:15	13	sp -> plane_sample_offset
LEAF_NODE	1406:11	1406:11	14	sp
LEAF_NODE	1406:13	1406:13	14	->
LEAF_NODE	1406:15	1406:15	14	plane_sample_offset
EQ_OPERATOR	1406:34	1406:34	13	==
LEAF_NODE	1406:34	1406:34	14	==
FIELD	1406:36	1406:36	13	0
LEAF_NODE	1406:36	1406:36	14	0
LEAF_NODE	1406:37	1406:37	12	)
LEAF_NODE	1406:38	1406:38	10	;
SELECTION	1407:4	1408:5	9	
KEYWORD	1407:4	1407:4	10	if
LEAF_NODE	1407:4	1407:4	11	if
LEAF_NODE	1407:7	1407:7	10	(
CONDITION	1407:8	1407:8	10	OJPEGReadHeaderInfoSecStreamSos ( tif ) == 0
EXPR	1407:8	1407:46	11	OJPEGReadHeaderInfoSecStreamSos ( tif ) == 0
FUNCTION_CALL	1407:8	1407:43	12	OJPEGReadHeaderInfoSecStreamSos ( tif )
CALLEE	1407:8	1407:8	13	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	1407:8	1407:8	14	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	1407:39	1407:39	13	(
ARGUMENT	1407:40	1407:40	13	tif
FIELD	1407:40	1407:40	14	tif
LEAF_NODE	1407:40	1407:40	15	tif
LEAF_NODE	1407:43	1407:43	13	)
EQ_OPERATOR	1407:44	1407:44	12	==
LEAF_NODE	1407:44	1407:44	13	==
FIELD	1407:46	1407:46	12	0
LEAF_NODE	1407:46	1407:46	13	0
LEAF_NODE	1407:47	1407:47	10	)
STATEMENTS	1408:5	1408:5	10	
JUMP_STATEMENT	1408:5	1408:14	11	return ( 0 ) ;
KEYWORD	1408:5	1408:5	12	return
LEAF_NODE	1408:5	1408:5	13	return
DESTINATION	1408:11	1408:11	12	( 0 )
EXPR	1408:11	1408:13	13	( 0 )
LEAF_NODE	1408:11	1408:11	14	(
FIELD	1408:12	1408:12	14	0
LEAF_NODE	1408:12	1408:12	15	0
LEAF_NODE	1408:13	1408:13	14	)
LEAF_NODE	1408:14	1408:14	12	;
JUMP_STATEMENT	1409:4	1409:9	9	break DESTINATION ;
KEYWORD	1409:4	1409:4	10	break
LEAF_NODE	1409:4	1409:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	1409:9	1409:9	10	;
LABEL	1410:3	1410:10	9	default :
LEAF_NODE	1410:3	1410:3	10	default
LEAF_NODE	1410:10	1410:10	10	:
EXPR_STATEMENT	1411:4	1411:84	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Unknown marker type %d in JPEG data" , m ) ;
EXPR	1411:4	1411:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Unknown marker type %d in JPEG data" , m )
FUNCTION_CALL	1411:4	1411:83	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Unknown marker type %d in JPEG data" , m )
CALLEE	1411:4	1411:4	12	TIFFErrorExt
LEAF_NODE	1411:4	1411:4	13	TIFFErrorExt
LEAF_NODE	1411:16	1411:16	12	(
ARGUMENT	1411:17	1411:17	12	tif -> tif_clientdata
FIELD	1411:17	1411:22	13	tif -> tif_clientdata
LEAF_NODE	1411:17	1411:17	14	tif
LEAF_NODE	1411:20	1411:20	14	->
LEAF_NODE	1411:22	1411:22	14	tif_clientdata
LEAF_NODE	1411:36	1411:36	12	,
ARGUMENT	1411:37	1411:37	12	module
FIELD	1411:37	1411:37	13	module
LEAF_NODE	1411:37	1411:37	14	module
LEAF_NODE	1411:43	1411:43	12	,
ARGUMENT	1411:44	1411:44	12	"Unknown marker type %d in JPEG data"
FIELD	1411:44	1411:44	13	"Unknown marker type %d in JPEG data"
LEAF_NODE	1411:44	1411:44	14	"Unknown marker type %d in JPEG data"
LEAF_NODE	1411:81	1411:81	12	,
ARGUMENT	1411:82	1411:82	12	m
FIELD	1411:82	1411:82	13	m
LEAF_NODE	1411:82	1411:82	14	m
LEAF_NODE	1411:83	1411:83	12	)
LEAF_NODE	1411:84	1411:84	10	;
JUMP_STATEMENT	1412:4	1412:13	9	return ( 0 ) ;
KEYWORD	1412:4	1412:4	10	return
LEAF_NODE	1412:4	1412:4	11	return
DESTINATION	1412:10	1412:10	10	( 0 )
EXPR	1412:10	1412:12	11	( 0 )
LEAF_NODE	1412:10	1412:10	12	(
FIELD	1412:11	1412:11	12	0
LEAF_NODE	1412:11	1412:11	13	0
LEAF_NODE	1412:12	1412:12	12	)
LEAF_NODE	1412:13	1412:13	10	;
LEAF_NODE	1413:2	1413:2	8	}
LEAF_NODE	1414:1	1414:1	5	}
LEAF_NODE	1414:28	1414:28	3	;
SELECTION	1415:1	1416:2	3	
KEYWORD	1415:1	1415:1	4	if
LEAF_NODE	1415:1	1415:1	5	if
LEAF_NODE	1415:4	1415:4	4	(
CONDITION	1415:5	1415:5	4	sp -> subsamplingcorrect
EXPR	1415:5	1415:5	5	sp -> subsamplingcorrect
FIELD	1415:5	1415:9	6	sp -> subsamplingcorrect
LEAF_NODE	1415:5	1415:5	7	sp
LEAF_NODE	1415:7	1415:7	7	->
LEAF_NODE	1415:9	1415:9	7	subsamplingcorrect
LEAF_NODE	1415:27	1415:27	4	)
STATEMENTS	1416:2	1416:2	4	
JUMP_STATEMENT	1416:2	1416:11	5	return ( 1 ) ;
KEYWORD	1416:2	1416:2	6	return
LEAF_NODE	1416:2	1416:2	7	return
DESTINATION	1416:8	1416:8	6	( 1 )
EXPR	1416:8	1416:10	7	( 1 )
LEAF_NODE	1416:8	1416:8	8	(
FIELD	1416:9	1416:9	8	1
LEAF_NODE	1416:9	1416:9	9	1
LEAF_NODE	1416:10	1416:10	8	)
LEAF_NODE	1416:11	1416:11	6	;
SELECTION	1417:1	1418:1	3	
KEYWORD	1417:1	1417:1	4	if
LEAF_NODE	1417:1	1417:1	5	if
LEAF_NODE	1417:4	1417:4	4	(
CONDITION	1417:5	1417:5	4	sp -> sof_log == 0
EXPR	1417:5	1417:18	5	sp -> sof_log == 0
FIELD	1417:5	1417:9	6	sp -> sof_log
LEAF_NODE	1417:5	1417:5	7	sp
LEAF_NODE	1417:7	1417:7	7	->
LEAF_NODE	1417:9	1417:9	7	sof_log
EQ_OPERATOR	1417:16	1417:16	6	==
LEAF_NODE	1417:16	1417:16	7	==
FIELD	1417:18	1417:18	6	0
LEAF_NODE	1417:18	1417:18	7	0
LEAF_NODE	1417:19	1417:19	4	)
STATEMENTS	1418:1	1436:1	4	
LEAF_NODE	1418:1	1418:1	5	{
STATEMENTS	1419:2	1434:2	5	
SELECTION	1419:2	1420:3	6	
KEYWORD	1419:2	1419:2	7	if
LEAF_NODE	1419:2	1419:2	8	if
LEAF_NODE	1419:5	1419:5	7	(
CONDITION	1419:6	1419:6	7	OJPEGReadHeaderInfoSecTablesQTable ( tif ) == 0
EXPR	1419:6	1419:47	8	OJPEGReadHeaderInfoSecTablesQTable ( tif ) == 0
FUNCTION_CALL	1419:6	1419:44	9	OJPEGReadHeaderInfoSecTablesQTable ( tif )
CALLEE	1419:6	1419:6	10	OJPEGReadHeaderInfoSecTablesQTable
LEAF_NODE	1419:6	1419:6	11	OJPEGReadHeaderInfoSecTablesQTable
LEAF_NODE	1419:40	1419:40	10	(
ARGUMENT	1419:41	1419:41	10	tif
FIELD	1419:41	1419:41	11	tif
LEAF_NODE	1419:41	1419:41	12	tif
LEAF_NODE	1419:44	1419:44	10	)
EQ_OPERATOR	1419:45	1419:45	9	==
LEAF_NODE	1419:45	1419:45	10	==
FIELD	1419:47	1419:47	9	0
LEAF_NODE	1419:47	1419:47	10	0
LEAF_NODE	1419:48	1419:48	7	)
STATEMENTS	1420:3	1420:3	7	
JUMP_STATEMENT	1420:3	1420:12	8	return ( 0 ) ;
KEYWORD	1420:3	1420:3	9	return
LEAF_NODE	1420:3	1420:3	10	return
DESTINATION	1420:9	1420:9	9	( 0 )
EXPR	1420:9	1420:11	10	( 0 )
LEAF_NODE	1420:9	1420:9	11	(
FIELD	1420:10	1420:10	11	0
LEAF_NODE	1420:10	1420:10	12	0
LEAF_NODE	1420:11	1420:11	11	)
LEAF_NODE	1420:12	1420:12	9	;
EXPR_STATEMENT	1421:2	1421:36	6	sp -> sof_marker_id = JPEG_MARKER_SOF0 ;
EXPR	1421:2	1421:2	7	sp -> sof_marker_id = JPEG_MARKER_SOF0
ASSIGN	1421:2	1421:20	8	sp -> sof_marker_id = JPEG_MARKER_SOF0
LVAL	1421:2	1421:2	9	sp -> sof_marker_id
FIELD	1421:2	1421:6	10	sp -> sof_marker_id
LEAF_NODE	1421:2	1421:2	11	sp
LEAF_NODE	1421:4	1421:4	11	->
LEAF_NODE	1421:6	1421:6	11	sof_marker_id
ASSIGN_OP	1421:19	1421:19	9	=
LEAF_NODE	1421:19	1421:19	10	=
RVAL	1421:20	1421:20	9	JPEG_MARKER_SOF0
FIELD	1421:20	1421:20	10	JPEG_MARKER_SOF0
LEAF_NODE	1421:20	1421:20	11	JPEG_MARKER_SOF0
LEAF_NODE	1421:36	1421:36	7	;
ITERATION	1422:2	1423:3	6	
KEYWORD	1422:2	1422:2	7	for
LEAF_NODE	1422:2	1422:2	8	for
LEAF_NODE	1422:6	1422:6	7	(
FOR_INIT	1422:7	1422:10	7	o = 0 ;
EXPR	1422:7	1422:7	8	o = 0
ASSIGN	1422:7	1422:9	9	o = 0
LVAL	1422:7	1422:7	10	o
FIELD	1422:7	1422:7	11	o
LEAF_NODE	1422:7	1422:7	12	o
ASSIGN_OP	1422:8	1422:8	10	=
LEAF_NODE	1422:8	1422:8	11	=
RVAL	1422:9	1422:9	10	0
FIELD	1422:9	1422:9	11	0
LEAF_NODE	1422:9	1422:9	12	0
LEAF_NODE	1422:10	1422:10	8	;
CONDITION	1422:12	1422:12	7	o < sp -> samples_per_pixel
EXPR	1422:12	1422:14	8	o < sp -> samples_per_pixel
FIELD	1422:12	1422:12	9	o
LEAF_NODE	1422:12	1422:12	10	o
REL_OPERATOR	1422:13	1422:13	9	<
LEAF_NODE	1422:13	1422:13	10	<
FIELD	1422:14	1422:18	9	sp -> samples_per_pixel
LEAF_NODE	1422:14	1422:14	10	sp
LEAF_NODE	1422:16	1422:16	10	->
LEAF_NODE	1422:18	1422:18	10	samples_per_pixel
LEAF_NODE	1422:35	1422:35	7	;
FOR_EXPR	1422:37	1422:37	7	o ++
EXPR	1422:37	1422:37	8	o ++
FIELD	1422:37	1422:38	9	o ++
LEAF_NODE	1422:37	1422:37	10	o
LEAF_NODE	1422:38	1422:38	10	++
LEAF_NODE	1422:40	1422:40	7	)
STATEMENTS	1423:3	1423:3	7	
EXPR_STATEMENT	1423:3	1423:17	8	sp -> sof_c [ o ] = o ;
EXPR	1423:3	1423:3	9	sp -> sof_c [ o ] = o
ASSIGN	1423:3	1423:16	10	sp -> sof_c [ o ] = o
LVAL	1423:3	1423:3	11	sp -> sof_c [ o ]
FIELD	1423:3	1423:14	12	sp -> sof_c [ o ]
LEAF_NODE	1423:3	1423:3	13	sp
LEAF_NODE	1423:5	1423:5	13	->
LEAF_NODE	1423:7	1423:7	13	sof_c
LEAF_NODE	1423:12	1423:12	13	[
EXPR	1423:13	1423:13	13	o
FIELD	1423:13	1423:13	14	o
LEAF_NODE	1423:13	1423:13	15	o
LEAF_NODE	1423:14	1423:14	13	]
ASSIGN_OP	1423:15	1423:15	11	=
LEAF_NODE	1423:15	1423:15	12	=
RVAL	1423:16	1423:16	11	o
FIELD	1423:16	1423:16	12	o
LEAF_NODE	1423:16	1423:16	13	o
LEAF_NODE	1423:17	1423:17	9	;
EXPR_STATEMENT	1424:2	1424:62	6	sp -> sof_hv [ 0 ] = ( ( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver ) ;
EXPR	1424:2	1424:2	7	sp -> sof_hv [ 0 ] = ( ( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver )
ASSIGN	1424:2	1424:16	8	sp -> sof_hv [ 0 ] = ( ( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver )
LVAL	1424:2	1424:2	9	sp -> sof_hv [ 0 ]
FIELD	1424:2	1424:14	10	sp -> sof_hv [ 0 ]
LEAF_NODE	1424:2	1424:2	11	sp
LEAF_NODE	1424:4	1424:4	11	->
LEAF_NODE	1424:6	1424:6	11	sof_hv
LEAF_NODE	1424:12	1424:12	11	[
EXPR	1424:13	1424:13	11	0
FIELD	1424:13	1424:13	12	0
LEAF_NODE	1424:13	1424:13	13	0
LEAF_NODE	1424:14	1424:14	11	]
ASSIGN_OP	1424:15	1424:15	9	=
LEAF_NODE	1424:15	1424:15	10	=
RVAL	1424:16	1424:61	9	( ( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver )
LEAF_NODE	1424:16	1424:16	10	(
BIT_OR	1424:17	1424:42	10	( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver
BIT_OR_ELEM	1424:17	1424:40	11	( sp -> subsampling_hor << 4 )
LEAF_NODE	1424:17	1424:17	12	(
FIELD	1424:18	1424:22	12	sp -> subsampling_hor
LEAF_NODE	1424:18	1424:18	13	sp
LEAF_NODE	1424:20	1424:20	13	->
LEAF_NODE	1424:22	1424:22	13	subsampling_hor
LEAF_NODE	1424:37	1424:37	12	<<
FIELD	1424:39	1424:39	12	4
LEAF_NODE	1424:39	1424:39	13	4
LEAF_NODE	1424:40	1424:40	12	)
LEAF_NODE	1424:41	1424:41	11	|
BIT_OR_ELEM	1424:42	1424:42	11	sp -> subsampling_ver
FIELD	1424:42	1424:46	12	sp -> subsampling_ver
LEAF_NODE	1424:42	1424:42	13	sp
LEAF_NODE	1424:44	1424:44	13	->
LEAF_NODE	1424:46	1424:46	13	subsampling_ver
LEAF_NODE	1424:61	1424:61	10	)
LEAF_NODE	1424:62	1424:62	7	;
ITERATION	1425:2	1426:3	6	
KEYWORD	1425:2	1425:2	7	for
LEAF_NODE	1425:2	1425:2	8	for
LEAF_NODE	1425:6	1425:6	7	(
FOR_INIT	1425:7	1425:10	7	o = 1 ;
EXPR	1425:7	1425:7	8	o = 1
ASSIGN	1425:7	1425:9	9	o = 1
LVAL	1425:7	1425:7	10	o
FIELD	1425:7	1425:7	11	o
LEAF_NODE	1425:7	1425:7	12	o
ASSIGN_OP	1425:8	1425:8	10	=
LEAF_NODE	1425:8	1425:8	11	=
RVAL	1425:9	1425:9	10	1
FIELD	1425:9	1425:9	11	1
LEAF_NODE	1425:9	1425:9	12	1
LEAF_NODE	1425:10	1425:10	8	;
CONDITION	1425:12	1425:12	7	o < sp -> samples_per_pixel
EXPR	1425:12	1425:14	8	o < sp -> samples_per_pixel
FIELD	1425:12	1425:12	9	o
LEAF_NODE	1425:12	1425:12	10	o
REL_OPERATOR	1425:13	1425:13	9	<
LEAF_NODE	1425:13	1425:13	10	<
FIELD	1425:14	1425:18	9	sp -> samples_per_pixel
LEAF_NODE	1425:14	1425:14	10	sp
LEAF_NODE	1425:16	1425:16	10	->
LEAF_NODE	1425:18	1425:18	10	samples_per_pixel
LEAF_NODE	1425:35	1425:35	7	;
FOR_EXPR	1425:37	1425:37	7	o ++
EXPR	1425:37	1425:37	8	o ++
FIELD	1425:37	1425:38	9	o ++
LEAF_NODE	1425:37	1425:37	10	o
LEAF_NODE	1425:38	1425:38	10	++
LEAF_NODE	1425:40	1425:40	7	)
STATEMENTS	1426:3	1426:3	7	
EXPR_STATEMENT	1426:3	1426:19	8	sp -> sof_hv [ o ] = 17 ;
EXPR	1426:3	1426:3	9	sp -> sof_hv [ o ] = 17
ASSIGN	1426:3	1426:17	10	sp -> sof_hv [ o ] = 17
LVAL	1426:3	1426:3	11	sp -> sof_hv [ o ]
FIELD	1426:3	1426:15	12	sp -> sof_hv [ o ]
LEAF_NODE	1426:3	1426:3	13	sp
LEAF_NODE	1426:5	1426:5	13	->
LEAF_NODE	1426:7	1426:7	13	sof_hv
LEAF_NODE	1426:13	1426:13	13	[
EXPR	1426:14	1426:14	13	o
FIELD	1426:14	1426:14	14	o
LEAF_NODE	1426:14	1426:14	15	o
LEAF_NODE	1426:15	1426:15	13	]
ASSIGN_OP	1426:16	1426:16	11	=
LEAF_NODE	1426:16	1426:16	12	=
RVAL	1426:17	1426:17	11	17
FIELD	1426:17	1426:17	12	17
LEAF_NODE	1426:17	1426:17	13	17
LEAF_NODE	1426:19	1426:19	9	;
EXPR_STATEMENT	1427:2	1427:28	6	sp -> sof_x = sp -> strile_width ;
EXPR	1427:2	1427:2	7	sp -> sof_x = sp -> strile_width
ASSIGN	1427:2	1427:12	8	sp -> sof_x = sp -> strile_width
LVAL	1427:2	1427:2	9	sp -> sof_x
FIELD	1427:2	1427:6	10	sp -> sof_x
LEAF_NODE	1427:2	1427:2	11	sp
LEAF_NODE	1427:4	1427:4	11	->
LEAF_NODE	1427:6	1427:6	11	sof_x
ASSIGN_OP	1427:11	1427:11	9	=
LEAF_NODE	1427:11	1427:11	10	=
RVAL	1427:12	1427:12	9	sp -> strile_width
FIELD	1427:12	1427:16	10	sp -> strile_width
LEAF_NODE	1427:12	1427:12	11	sp
LEAF_NODE	1427:14	1427:14	11	->
LEAF_NODE	1427:16	1427:16	11	strile_width
LEAF_NODE	1427:28	1427:28	7	;
EXPR_STATEMENT	1428:2	1428:35	6	sp -> sof_y = sp -> strile_length_total ;
EXPR	1428:2	1428:2	7	sp -> sof_y = sp -> strile_length_total
ASSIGN	1428:2	1428:12	8	sp -> sof_y = sp -> strile_length_total
LVAL	1428:2	1428:2	9	sp -> sof_y
FIELD	1428:2	1428:6	10	sp -> sof_y
LEAF_NODE	1428:2	1428:2	11	sp
LEAF_NODE	1428:4	1428:4	11	->
LEAF_NODE	1428:6	1428:6	11	sof_y
ASSIGN_OP	1428:11	1428:11	9	=
LEAF_NODE	1428:11	1428:11	10	=
RVAL	1428:12	1428:12	9	sp -> strile_length_total
FIELD	1428:12	1428:16	10	sp -> strile_length_total
LEAF_NODE	1428:12	1428:12	11	sp
LEAF_NODE	1428:14	1428:14	11	->
LEAF_NODE	1428:16	1428:16	11	strile_length_total
LEAF_NODE	1428:35	1428:35	7	;
EXPR_STATEMENT	1429:2	1429:15	6	sp -> sof_log = 1 ;
EXPR	1429:2	1429:2	7	sp -> sof_log = 1
ASSIGN	1429:2	1429:14	8	sp -> sof_log = 1
LVAL	1429:2	1429:2	9	sp -> sof_log
FIELD	1429:2	1429:6	10	sp -> sof_log
LEAF_NODE	1429:2	1429:2	11	sp
LEAF_NODE	1429:4	1429:4	11	->
LEAF_NODE	1429:6	1429:6	11	sof_log
ASSIGN_OP	1429:13	1429:13	9	=
LEAF_NODE	1429:13	1429:13	10	=
RVAL	1429:14	1429:14	9	1
FIELD	1429:14	1429:14	10	1
LEAF_NODE	1429:14	1429:14	11	1
LEAF_NODE	1429:15	1429:15	7	;
SELECTION	1430:2	1431:3	6	
KEYWORD	1430:2	1430:2	7	if
LEAF_NODE	1430:2	1430:2	8	if
LEAF_NODE	1430:5	1430:5	7	(
CONDITION	1430:6	1430:6	7	OJPEGReadHeaderInfoSecTablesDcTable ( tif ) == 0
EXPR	1430:6	1430:48	8	OJPEGReadHeaderInfoSecTablesDcTable ( tif ) == 0
FUNCTION_CALL	1430:6	1430:45	9	OJPEGReadHeaderInfoSecTablesDcTable ( tif )
CALLEE	1430:6	1430:6	10	OJPEGReadHeaderInfoSecTablesDcTable
LEAF_NODE	1430:6	1430:6	11	OJPEGReadHeaderInfoSecTablesDcTable
LEAF_NODE	1430:41	1430:41	10	(
ARGUMENT	1430:42	1430:42	10	tif
FIELD	1430:42	1430:42	11	tif
LEAF_NODE	1430:42	1430:42	12	tif
LEAF_NODE	1430:45	1430:45	10	)
EQ_OPERATOR	1430:46	1430:46	9	==
LEAF_NODE	1430:46	1430:46	10	==
FIELD	1430:48	1430:48	9	0
LEAF_NODE	1430:48	1430:48	10	0
LEAF_NODE	1430:49	1430:49	7	)
STATEMENTS	1431:3	1431:3	7	
JUMP_STATEMENT	1431:3	1431:12	8	return ( 0 ) ;
KEYWORD	1431:3	1431:3	9	return
LEAF_NODE	1431:3	1431:3	10	return
DESTINATION	1431:9	1431:9	9	( 0 )
EXPR	1431:9	1431:11	10	( 0 )
LEAF_NODE	1431:9	1431:9	11	(
FIELD	1431:10	1431:10	11	0
LEAF_NODE	1431:10	1431:10	12	0
LEAF_NODE	1431:11	1431:11	11	)
LEAF_NODE	1431:12	1431:12	9	;
SELECTION	1432:2	1433:3	6	
KEYWORD	1432:2	1432:2	7	if
LEAF_NODE	1432:2	1432:2	8	if
LEAF_NODE	1432:5	1432:5	7	(
CONDITION	1432:6	1432:6	7	OJPEGReadHeaderInfoSecTablesAcTable ( tif ) == 0
EXPR	1432:6	1432:48	8	OJPEGReadHeaderInfoSecTablesAcTable ( tif ) == 0
FUNCTION_CALL	1432:6	1432:45	9	OJPEGReadHeaderInfoSecTablesAcTable ( tif )
CALLEE	1432:6	1432:6	10	OJPEGReadHeaderInfoSecTablesAcTable
LEAF_NODE	1432:6	1432:6	11	OJPEGReadHeaderInfoSecTablesAcTable
LEAF_NODE	1432:41	1432:41	10	(
ARGUMENT	1432:42	1432:42	10	tif
FIELD	1432:42	1432:42	11	tif
LEAF_NODE	1432:42	1432:42	12	tif
LEAF_NODE	1432:45	1432:45	10	)
EQ_OPERATOR	1432:46	1432:46	9	==
LEAF_NODE	1432:46	1432:46	10	==
FIELD	1432:48	1432:48	9	0
LEAF_NODE	1432:48	1432:48	10	0
LEAF_NODE	1432:49	1432:49	7	)
STATEMENTS	1433:3	1433:3	7	
JUMP_STATEMENT	1433:3	1433:12	8	return ( 0 ) ;
KEYWORD	1433:3	1433:3	9	return
LEAF_NODE	1433:3	1433:3	10	return
DESTINATION	1433:9	1433:9	9	( 0 )
EXPR	1433:9	1433:11	10	( 0 )
LEAF_NODE	1433:9	1433:9	11	(
FIELD	1433:10	1433:10	11	0
LEAF_NODE	1433:10	1433:10	12	0
LEAF_NODE	1433:11	1433:11	11	)
LEAF_NODE	1433:12	1433:12	9	;
ITERATION	1434:2	1435:3	6	
KEYWORD	1434:2	1434:2	7	for
LEAF_NODE	1434:2	1434:2	8	for
LEAF_NODE	1434:6	1434:6	7	(
FOR_INIT	1434:7	1434:10	7	o = 1 ;
EXPR	1434:7	1434:7	8	o = 1
ASSIGN	1434:7	1434:9	9	o = 1
LVAL	1434:7	1434:7	10	o
FIELD	1434:7	1434:7	11	o
LEAF_NODE	1434:7	1434:7	12	o
ASSIGN_OP	1434:8	1434:8	10	=
LEAF_NODE	1434:8	1434:8	11	=
RVAL	1434:9	1434:9	10	1
FIELD	1434:9	1434:9	11	1
LEAF_NODE	1434:9	1434:9	12	1
LEAF_NODE	1434:10	1434:10	8	;
CONDITION	1434:12	1434:12	7	o < sp -> samples_per_pixel
EXPR	1434:12	1434:14	8	o < sp -> samples_per_pixel
FIELD	1434:12	1434:12	9	o
LEAF_NODE	1434:12	1434:12	10	o
REL_OPERATOR	1434:13	1434:13	9	<
LEAF_NODE	1434:13	1434:13	10	<
FIELD	1434:14	1434:18	9	sp -> samples_per_pixel
LEAF_NODE	1434:14	1434:14	10	sp
LEAF_NODE	1434:16	1434:16	10	->
LEAF_NODE	1434:18	1434:18	10	samples_per_pixel
LEAF_NODE	1434:35	1434:35	7	;
FOR_EXPR	1434:37	1434:37	7	o ++
EXPR	1434:37	1434:37	8	o ++
FIELD	1434:37	1434:38	9	o ++
LEAF_NODE	1434:37	1434:37	10	o
LEAF_NODE	1434:38	1434:38	10	++
LEAF_NODE	1434:40	1434:40	7	)
STATEMENTS	1435:3	1435:3	7	
EXPR_STATEMENT	1435:3	1435:18	8	sp -> sos_cs [ o ] = o ;
EXPR	1435:3	1435:3	9	sp -> sos_cs [ o ] = o
ASSIGN	1435:3	1435:17	10	sp -> sos_cs [ o ] = o
LVAL	1435:3	1435:3	11	sp -> sos_cs [ o ]
FIELD	1435:3	1435:15	12	sp -> sos_cs [ o ]
LEAF_NODE	1435:3	1435:3	13	sp
LEAF_NODE	1435:5	1435:5	13	->
LEAF_NODE	1435:7	1435:7	13	sos_cs
LEAF_NODE	1435:13	1435:13	13	[
EXPR	1435:14	1435:14	13	o
FIELD	1435:14	1435:14	14	o
LEAF_NODE	1435:14	1435:14	15	o
LEAF_NODE	1435:15	1435:15	13	]
ASSIGN_OP	1435:16	1435:16	11	=
LEAF_NODE	1435:16	1435:16	12	=
RVAL	1435:17	1435:17	11	o
FIELD	1435:17	1435:17	12	o
LEAF_NODE	1435:17	1435:17	13	o
LEAF_NODE	1435:18	1435:18	9	;
LEAF_NODE	1436:1	1436:1	5	}
JUMP_STATEMENT	1437:1	1437:10	3	return ( 1 ) ;
KEYWORD	1437:1	1437:1	4	return
LEAF_NODE	1437:1	1437:1	5	return
DESTINATION	1437:7	1437:7	4	( 1 )
EXPR	1437:7	1437:9	5	( 1 )
LEAF_NODE	1437:7	1437:7	6	(
FIELD	1437:8	1437:8	6	1
LEAF_NODE	1437:8	1437:8	7	1
LEAF_NODE	1437:9	1437:9	6	)
LEAF_NODE	1437:10	1437:10	4	;
LEAF_NODE	1438:0	1438:0	2	}
FUNCTION_DEF	1440:0	1459:0	1	
RETURN_TYPE	1440:0	1440:7	2	static int
LEAF_NODE	1440:0	1440:0	3	static
TYPE_NAME	1440:7	1440:7	3	int
LEAF_NODE	1440:7	1440:7	4	int
FUNCTION_NAME	1441:0	1441:0	2	OJPEGReadHeaderInfoSecStreamDri
LEAF_NODE	1441:0	1441:0	3	OJPEGReadHeaderInfoSecStreamDri
PARAMETER_LIST	1441:31	1441:41	2	( TIFF * tif )
LEAF_NODE	1441:31	1441:31	3	(
PARAMETER_DECL	1441:32	1441:38	3	TIFF * tif
TYPE	1441:32	1441:36	4	TIFF *
TYPE_NAME	1441:32	1441:32	5	TIFF
LEAF_NODE	1441:32	1441:32	6	TIFF
POINTER	1441:36	1441:36	5	*
LEAF_NODE	1441:36	1441:36	6	*
NAME	1441:38	1441:38	4	tif
LEAF_NODE	1441:38	1441:38	5	tif
LEAF_NODE	1441:41	1441:41	3	)
LEAF_NODE	1442:0	1442:0	2	{
STATEMENTS	1445:1	1458:1	2	
LEAF_NODE	1445:1	1445:1	3	static
SIMPLE_DECL	1445:8	1445:61	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamDri" ;
VAR_DECL	1445:8	1445:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamDri"
TYPE	1445:8	1445:25	5	const char [ ]
TYPE_NAME	1445:8	1445:14	6	const char
LEAF_NODE	1445:8	1445:8	7	const
LEAF_NODE	1445:14	1445:14	7	char
TYPE_SUFFIX	1445:25	1445:26	6	[ ]
LEAF_NODE	1445:25	1445:25	7	[
LEAF_NODE	1445:26	1445:26	7	]
NAME	1445:19	1445:19	5	module
LEAF_NODE	1445:19	1445:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1445:19	1445:19	5	module = "OJPEGReadHeaderInfoSecStreamDri"
ASSIGN	1445:19	1445:28	6	module = "OJPEGReadHeaderInfoSecStreamDri"
LVAL	1445:19	1445:19	7	module
NAME	1445:19	1445:19	8	module
LEAF_NODE	1445:19	1445:19	9	module
ASSIGN_OP	1445:27	1445:27	7	=
LEAF_NODE	1445:27	1445:27	8	=
RVAL	1445:28	1445:28	7	"OJPEGReadHeaderInfoSecStreamDri"
FIELD	1445:28	1445:28	8	"OJPEGReadHeaderInfoSecStreamDri"
LEAF_NODE	1445:28	1445:28	9	"OJPEGReadHeaderInfoSecStreamDri"
LEAF_NODE	1445:61	1445:61	4	;
SIMPLE_DECL	1446:1	1446:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1446:1	1446:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1446:1	1446:11	5	OJPEGState *
TYPE_NAME	1446:1	1446:1	6	OJPEGState
LEAF_NODE	1446:1	1446:1	7	OJPEGState
POINTER	1446:11	1446:11	6	*
LEAF_NODE	1446:11	1446:11	7	*
NAME	1446:13	1446:13	5	sp
LEAF_NODE	1446:13	1446:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1446:13	1446:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1446:13	1446:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1446:13	1446:13	7	sp
NAME	1446:13	1446:13	8	sp
LEAF_NODE	1446:13	1446:13	9	sp
ASSIGN_OP	1446:15	1446:15	7	=
LEAF_NODE	1446:15	1446:15	8	=
RVAL	1446:16	1446:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1446:16	1446:16	8	(
TYPE_NAME	1446:17	1446:17	8	OJPEGState
LEAF_NODE	1446:17	1446:17	9	OJPEGState
LEAF_NODE	1446:27	1446:27	8	*
LEAF_NODE	1446:28	1446:28	8	)
FIELD	1446:29	1446:34	8	tif -> tif_data
LEAF_NODE	1446:29	1446:29	9	tif
LEAF_NODE	1446:32	1446:32	9	->
LEAF_NODE	1446:34	1446:34	9	tif_data
LEAF_NODE	1446:42	1446:42	4	;
SIMPLE_DECL	1447:1	1447:9	3	uint16 m ;
VAR_DECL	1447:1	1447:8	4	uint16 m
TYPE	1447:1	1447:1	5	uint16
TYPE_NAME	1447:1	1447:1	6	uint16
LEAF_NODE	1447:1	1447:1	7	uint16
NAME	1447:8	1447:8	5	m
LEAF_NODE	1447:8	1447:8	6	m
LEAF_NODE	1447:9	1447:9	4	;
SELECTION	1448:1	1449:2	3	
KEYWORD	1448:1	1448:1	4	if
LEAF_NODE	1448:1	1448:1	5	if
LEAF_NODE	1448:4	1448:4	4	(
CONDITION	1448:5	1448:5	4	OJPEGReadWord ( sp , & m ) == 0
EXPR	1448:5	1448:27	5	OJPEGReadWord ( sp , & m ) == 0
FUNCTION_CALL	1448:5	1448:24	6	OJPEGReadWord ( sp , & m )
CALLEE	1448:5	1448:5	7	OJPEGReadWord
LEAF_NODE	1448:5	1448:5	8	OJPEGReadWord
LEAF_NODE	1448:18	1448:18	7	(
ARGUMENT	1448:19	1448:19	7	sp
FIELD	1448:19	1448:19	8	sp
LEAF_NODE	1448:19	1448:19	9	sp
LEAF_NODE	1448:21	1448:21	7	,
ARGUMENT	1448:22	1448:22	7	& m
UNARY_EXPR	1448:22	1448:23	8	& m
UNARY_OPERATOR	1448:22	1448:22	9	&
LEAF_NODE	1448:22	1448:22	10	&
FIELD	1448:23	1448:23	9	m
LEAF_NODE	1448:23	1448:23	10	m
LEAF_NODE	1448:24	1448:24	7	)
EQ_OPERATOR	1448:25	1448:25	6	==
LEAF_NODE	1448:25	1448:25	7	==
FIELD	1448:27	1448:27	6	0
LEAF_NODE	1448:27	1448:27	7	0
LEAF_NODE	1448:28	1448:28	4	)
STATEMENTS	1449:2	1449:2	4	
JUMP_STATEMENT	1449:2	1449:11	5	return ( 0 ) ;
KEYWORD	1449:2	1449:2	6	return
LEAF_NODE	1449:2	1449:2	7	return
DESTINATION	1449:8	1449:8	6	( 0 )
EXPR	1449:8	1449:10	7	( 0 )
LEAF_NODE	1449:8	1449:8	8	(
FIELD	1449:9	1449:9	8	0
LEAF_NODE	1449:9	1449:9	9	0
LEAF_NODE	1449:10	1449:10	8	)
LEAF_NODE	1449:11	1449:11	6	;
SELECTION	1450:1	1451:1	3	
KEYWORD	1450:1	1450:1	4	if
LEAF_NODE	1450:1	1450:1	5	if
LEAF_NODE	1450:4	1450:4	4	(
CONDITION	1450:5	1450:5	4	m != 4
EXPR	1450:5	1450:8	5	m != 4
FIELD	1450:5	1450:5	6	m
LEAF_NODE	1450:5	1450:5	7	m
EQ_OPERATOR	1450:6	1450:6	6	!=
LEAF_NODE	1450:6	1450:6	7	!=
FIELD	1450:8	1450:8	6	4
LEAF_NODE	1450:8	1450:8	7	4
LEAF_NODE	1450:9	1450:9	4	)
STATEMENTS	1451:1	1454:1	4	
LEAF_NODE	1451:1	1451:1	5	{
STATEMENTS	1452:2	1453:2	5	
EXPR_STATEMENT	1452:2	1452:76	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DRI marker in JPEG data" ) ;
EXPR	1452:2	1452:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DRI marker in JPEG data" )
FUNCTION_CALL	1452:2	1452:75	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DRI marker in JPEG data" )
CALLEE	1452:2	1452:2	9	TIFFErrorExt
LEAF_NODE	1452:2	1452:2	10	TIFFErrorExt
LEAF_NODE	1452:14	1452:14	9	(
ARGUMENT	1452:15	1452:15	9	tif -> tif_clientdata
FIELD	1452:15	1452:20	10	tif -> tif_clientdata
LEAF_NODE	1452:15	1452:15	11	tif
LEAF_NODE	1452:18	1452:18	11	->
LEAF_NODE	1452:20	1452:20	11	tif_clientdata
LEAF_NODE	1452:34	1452:34	9	,
ARGUMENT	1452:35	1452:35	9	module
FIELD	1452:35	1452:35	10	module
LEAF_NODE	1452:35	1452:35	11	module
LEAF_NODE	1452:41	1452:41	9	,
ARGUMENT	1452:42	1452:42	9	"Corrupt DRI marker in JPEG data"
FIELD	1452:42	1452:42	10	"Corrupt DRI marker in JPEG data"
LEAF_NODE	1452:42	1452:42	11	"Corrupt DRI marker in JPEG data"
LEAF_NODE	1452:75	1452:75	9	)
LEAF_NODE	1452:76	1452:76	7	;
JUMP_STATEMENT	1453:2	1453:11	6	return ( 0 ) ;
KEYWORD	1453:2	1453:2	7	return
LEAF_NODE	1453:2	1453:2	8	return
DESTINATION	1453:8	1453:8	7	( 0 )
EXPR	1453:8	1453:10	8	( 0 )
LEAF_NODE	1453:8	1453:8	9	(
FIELD	1453:9	1453:9	9	0
LEAF_NODE	1453:9	1453:9	10	0
LEAF_NODE	1453:10	1453:10	9	)
LEAF_NODE	1453:11	1453:11	7	;
LEAF_NODE	1454:1	1454:1	5	}
SELECTION	1455:1	1456:2	3	
KEYWORD	1455:1	1455:1	4	if
LEAF_NODE	1455:1	1455:1	5	if
LEAF_NODE	1455:4	1455:4	4	(
CONDITION	1455:5	1455:5	4	OJPEGReadWord ( sp , & m ) == 0
EXPR	1455:5	1455:27	5	OJPEGReadWord ( sp , & m ) == 0
FUNCTION_CALL	1455:5	1455:24	6	OJPEGReadWord ( sp , & m )
CALLEE	1455:5	1455:5	7	OJPEGReadWord
LEAF_NODE	1455:5	1455:5	8	OJPEGReadWord
LEAF_NODE	1455:18	1455:18	7	(
ARGUMENT	1455:19	1455:19	7	sp
FIELD	1455:19	1455:19	8	sp
LEAF_NODE	1455:19	1455:19	9	sp
LEAF_NODE	1455:21	1455:21	7	,
ARGUMENT	1455:22	1455:22	7	& m
UNARY_EXPR	1455:22	1455:23	8	& m
UNARY_OPERATOR	1455:22	1455:22	9	&
LEAF_NODE	1455:22	1455:22	10	&
FIELD	1455:23	1455:23	9	m
LEAF_NODE	1455:23	1455:23	10	m
LEAF_NODE	1455:24	1455:24	7	)
EQ_OPERATOR	1455:25	1455:25	6	==
LEAF_NODE	1455:25	1455:25	7	==
FIELD	1455:27	1455:27	6	0
LEAF_NODE	1455:27	1455:27	7	0
LEAF_NODE	1455:28	1455:28	4	)
STATEMENTS	1456:2	1456:2	4	
JUMP_STATEMENT	1456:2	1456:11	5	return ( 0 ) ;
KEYWORD	1456:2	1456:2	6	return
LEAF_NODE	1456:2	1456:2	7	return
DESTINATION	1456:8	1456:8	6	( 0 )
EXPR	1456:8	1456:10	7	( 0 )
LEAF_NODE	1456:8	1456:8	8	(
FIELD	1456:9	1456:9	8	0
LEAF_NODE	1456:9	1456:9	9	0
LEAF_NODE	1456:10	1456:10	8	)
LEAF_NODE	1456:11	1456:11	6	;
EXPR_STATEMENT	1457:1	1457:23	3	sp -> restart_interval = m ;
EXPR	1457:1	1457:1	4	sp -> restart_interval = m
ASSIGN	1457:1	1457:22	5	sp -> restart_interval = m
LVAL	1457:1	1457:1	6	sp -> restart_interval
FIELD	1457:1	1457:5	7	sp -> restart_interval
LEAF_NODE	1457:1	1457:1	8	sp
LEAF_NODE	1457:3	1457:3	8	->
LEAF_NODE	1457:5	1457:5	8	restart_interval
ASSIGN_OP	1457:21	1457:21	6	=
LEAF_NODE	1457:21	1457:21	7	=
RVAL	1457:22	1457:22	6	m
FIELD	1457:22	1457:22	7	m
LEAF_NODE	1457:22	1457:22	8	m
LEAF_NODE	1457:23	1457:23	4	;
JUMP_STATEMENT	1458:1	1458:10	3	return ( 1 ) ;
KEYWORD	1458:1	1458:1	4	return
LEAF_NODE	1458:1	1458:1	5	return
DESTINATION	1458:7	1458:7	4	( 1 )
EXPR	1458:7	1458:9	5	( 1 )
LEAF_NODE	1458:7	1458:7	6	(
FIELD	1458:8	1458:8	6	1
LEAF_NODE	1458:8	1458:8	7	1
LEAF_NODE	1458:9	1458:9	6	)
LEAF_NODE	1458:10	1458:10	4	;
LEAF_NODE	1459:0	1459:0	2	}
FUNCTION_DEF	1461:0	1521:0	1	
RETURN_TYPE	1461:0	1461:7	2	static int
LEAF_NODE	1461:0	1461:0	3	static
TYPE_NAME	1461:7	1461:7	3	int
LEAF_NODE	1461:7	1461:7	4	int
FUNCTION_NAME	1462:0	1462:0	2	OJPEGReadHeaderInfoSecStreamDqt
LEAF_NODE	1462:0	1462:0	3	OJPEGReadHeaderInfoSecStreamDqt
PARAMETER_LIST	1462:31	1462:41	2	( TIFF * tif )
LEAF_NODE	1462:31	1462:31	3	(
PARAMETER_DECL	1462:32	1462:38	3	TIFF * tif
TYPE	1462:32	1462:36	4	TIFF *
TYPE_NAME	1462:32	1462:32	5	TIFF
LEAF_NODE	1462:32	1462:32	6	TIFF
POINTER	1462:36	1462:36	5	*
LEAF_NODE	1462:36	1462:36	6	*
NAME	1462:38	1462:38	4	tif
LEAF_NODE	1462:38	1462:38	5	tif
LEAF_NODE	1462:41	1462:41	3	)
LEAF_NODE	1463:0	1463:0	2	{
STATEMENTS	1465:1	1520:1	2	
LEAF_NODE	1465:1	1465:1	3	static
SIMPLE_DECL	1465:8	1465:61	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamDqt" ;
VAR_DECL	1465:8	1465:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamDqt"
TYPE	1465:8	1465:25	5	const char [ ]
TYPE_NAME	1465:8	1465:14	6	const char
LEAF_NODE	1465:8	1465:8	7	const
LEAF_NODE	1465:14	1465:14	7	char
TYPE_SUFFIX	1465:25	1465:26	6	[ ]
LEAF_NODE	1465:25	1465:25	7	[
LEAF_NODE	1465:26	1465:26	7	]
NAME	1465:19	1465:19	5	module
LEAF_NODE	1465:19	1465:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1465:19	1465:19	5	module = "OJPEGReadHeaderInfoSecStreamDqt"
ASSIGN	1465:19	1465:28	6	module = "OJPEGReadHeaderInfoSecStreamDqt"
LVAL	1465:19	1465:19	7	module
NAME	1465:19	1465:19	8	module
LEAF_NODE	1465:19	1465:19	9	module
ASSIGN_OP	1465:27	1465:27	7	=
LEAF_NODE	1465:27	1465:27	8	=
RVAL	1465:28	1465:28	7	"OJPEGReadHeaderInfoSecStreamDqt"
FIELD	1465:28	1465:28	8	"OJPEGReadHeaderInfoSecStreamDqt"
LEAF_NODE	1465:28	1465:28	9	"OJPEGReadHeaderInfoSecStreamDqt"
LEAF_NODE	1465:61	1465:61	4	;
SIMPLE_DECL	1466:1	1466:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1466:1	1466:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1466:1	1466:11	5	OJPEGState *
TYPE_NAME	1466:1	1466:1	6	OJPEGState
LEAF_NODE	1466:1	1466:1	7	OJPEGState
POINTER	1466:11	1466:11	6	*
LEAF_NODE	1466:11	1466:11	7	*
NAME	1466:13	1466:13	5	sp
LEAF_NODE	1466:13	1466:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1466:13	1466:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1466:13	1466:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1466:13	1466:13	7	sp
NAME	1466:13	1466:13	8	sp
LEAF_NODE	1466:13	1466:13	9	sp
ASSIGN_OP	1466:15	1466:15	7	=
LEAF_NODE	1466:15	1466:15	8	=
RVAL	1466:16	1466:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1466:16	1466:16	8	(
TYPE_NAME	1466:17	1466:17	8	OJPEGState
LEAF_NODE	1466:17	1466:17	9	OJPEGState
LEAF_NODE	1466:27	1466:27	8	*
LEAF_NODE	1466:28	1466:28	8	)
FIELD	1466:29	1466:34	8	tif -> tif_data
LEAF_NODE	1466:29	1466:29	9	tif
LEAF_NODE	1466:32	1466:32	9	->
LEAF_NODE	1466:34	1466:34	9	tif_data
LEAF_NODE	1466:42	1466:42	4	;
SIMPLE_DECL	1467:1	1467:9	3	uint16 m ;
VAR_DECL	1467:1	1467:8	4	uint16 m
TYPE	1467:1	1467:1	5	uint16
TYPE_NAME	1467:1	1467:1	6	uint16
LEAF_NODE	1467:1	1467:1	7	uint16
NAME	1467:8	1467:8	5	m
LEAF_NODE	1467:8	1467:8	6	m
LEAF_NODE	1467:9	1467:9	4	;
SIMPLE_DECL	1468:1	1468:10	3	uint32 na ;
VAR_DECL	1468:1	1468:8	4	uint32 na
TYPE	1468:1	1468:1	5	uint32
TYPE_NAME	1468:1	1468:1	6	uint32
LEAF_NODE	1468:1	1468:1	7	uint32
NAME	1468:8	1468:8	5	na
LEAF_NODE	1468:8	1468:8	6	na
LEAF_NODE	1468:10	1468:10	4	;
SIMPLE_DECL	1469:1	1469:10	3	uint8 * nb ;
VAR_DECL	1469:1	1469:8	4	uint8 * nb
TYPE	1469:1	1469:6	5	uint8 *
TYPE_NAME	1469:1	1469:1	6	uint8
LEAF_NODE	1469:1	1469:1	7	uint8
POINTER	1469:6	1469:6	6	*
LEAF_NODE	1469:6	1469:6	7	*
NAME	1469:8	1469:8	5	nb
LEAF_NODE	1469:8	1469:8	6	nb
LEAF_NODE	1469:10	1469:10	4	;
SIMPLE_DECL	1470:1	1470:8	3	uint8 o ;
VAR_DECL	1470:1	1470:7	4	uint8 o
TYPE	1470:1	1470:1	5	uint8
TYPE_NAME	1470:1	1470:1	6	uint8
LEAF_NODE	1470:1	1470:1	7	uint8
NAME	1470:7	1470:7	5	o
LEAF_NODE	1470:7	1470:7	6	o
LEAF_NODE	1470:8	1470:8	4	;
SELECTION	1471:1	1472:2	3	
KEYWORD	1471:1	1471:1	4	if
LEAF_NODE	1471:1	1471:1	5	if
LEAF_NODE	1471:4	1471:4	4	(
CONDITION	1471:5	1471:5	4	OJPEGReadWord ( sp , & m ) == 0
EXPR	1471:5	1471:27	5	OJPEGReadWord ( sp , & m ) == 0
FUNCTION_CALL	1471:5	1471:24	6	OJPEGReadWord ( sp , & m )
CALLEE	1471:5	1471:5	7	OJPEGReadWord
LEAF_NODE	1471:5	1471:5	8	OJPEGReadWord
LEAF_NODE	1471:18	1471:18	7	(
ARGUMENT	1471:19	1471:19	7	sp
FIELD	1471:19	1471:19	8	sp
LEAF_NODE	1471:19	1471:19	9	sp
LEAF_NODE	1471:21	1471:21	7	,
ARGUMENT	1471:22	1471:22	7	& m
UNARY_EXPR	1471:22	1471:23	8	& m
UNARY_OPERATOR	1471:22	1471:22	9	&
LEAF_NODE	1471:22	1471:22	10	&
FIELD	1471:23	1471:23	9	m
LEAF_NODE	1471:23	1471:23	10	m
LEAF_NODE	1471:24	1471:24	7	)
EQ_OPERATOR	1471:25	1471:25	6	==
LEAF_NODE	1471:25	1471:25	7	==
FIELD	1471:27	1471:27	6	0
LEAF_NODE	1471:27	1471:27	7	0
LEAF_NODE	1471:28	1471:28	4	)
STATEMENTS	1472:2	1472:2	4	
JUMP_STATEMENT	1472:2	1472:11	5	return ( 0 ) ;
KEYWORD	1472:2	1472:2	6	return
LEAF_NODE	1472:2	1472:2	7	return
DESTINATION	1472:8	1472:8	6	( 0 )
EXPR	1472:8	1472:10	7	( 0 )
LEAF_NODE	1472:8	1472:8	8	(
FIELD	1472:9	1472:9	8	0
LEAF_NODE	1472:9	1472:9	9	0
LEAF_NODE	1472:10	1472:10	8	)
LEAF_NODE	1472:11	1472:11	6	;
SELECTION	1473:1	1474:1	3	
KEYWORD	1473:1	1473:1	4	if
LEAF_NODE	1473:1	1473:1	5	if
LEAF_NODE	1473:4	1473:4	4	(
CONDITION	1473:5	1473:5	4	m <= 2
EXPR	1473:5	1473:8	5	m <= 2
FIELD	1473:5	1473:5	6	m
LEAF_NODE	1473:5	1473:5	7	m
REL_OPERATOR	1473:6	1473:6	6	<=
LEAF_NODE	1473:6	1473:6	7	<=
FIELD	1473:8	1473:8	6	2
LEAF_NODE	1473:8	1473:8	7	2
LEAF_NODE	1473:9	1473:9	4	)
STATEMENTS	1474:1	1478:1	4	
LEAF_NODE	1474:1	1474:1	5	{
STATEMENTS	1475:2	1477:2	5	
SELECTION	1475:2	1476:3	6	
KEYWORD	1475:2	1475:2	7	if
LEAF_NODE	1475:2	1475:2	8	if
LEAF_NODE	1475:5	1475:5	7	(
CONDITION	1475:6	1475:6	7	sp -> subsamplingcorrect == 0
EXPR	1475:6	1475:30	8	sp -> subsamplingcorrect == 0
FIELD	1475:6	1475:10	9	sp -> subsamplingcorrect
LEAF_NODE	1475:6	1475:6	10	sp
LEAF_NODE	1475:8	1475:8	10	->
LEAF_NODE	1475:10	1475:10	10	subsamplingcorrect
EQ_OPERATOR	1475:28	1475:28	9	==
LEAF_NODE	1475:28	1475:28	10	==
FIELD	1475:30	1475:30	9	0
LEAF_NODE	1475:30	1475:30	10	0
LEAF_NODE	1475:31	1475:31	7	)
STATEMENTS	1476:3	1476:3	7	
EXPR_STATEMENT	1476:3	1476:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" ) ;
EXPR	1476:3	1476:3	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" )
FUNCTION_CALL	1476:3	1476:76	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" )
CALLEE	1476:3	1476:3	11	TIFFErrorExt
LEAF_NODE	1476:3	1476:3	12	TIFFErrorExt
LEAF_NODE	1476:15	1476:15	11	(
ARGUMENT	1476:16	1476:16	11	tif -> tif_clientdata
FIELD	1476:16	1476:21	12	tif -> tif_clientdata
LEAF_NODE	1476:16	1476:16	13	tif
LEAF_NODE	1476:19	1476:19	13	->
LEAF_NODE	1476:21	1476:21	13	tif_clientdata
LEAF_NODE	1476:35	1476:35	11	,
ARGUMENT	1476:36	1476:36	11	module
FIELD	1476:36	1476:36	12	module
LEAF_NODE	1476:36	1476:36	13	module
LEAF_NODE	1476:42	1476:42	11	,
ARGUMENT	1476:43	1476:43	11	"Corrupt DQT marker in JPEG data"
FIELD	1476:43	1476:43	12	"Corrupt DQT marker in JPEG data"
LEAF_NODE	1476:43	1476:43	13	"Corrupt DQT marker in JPEG data"
LEAF_NODE	1476:76	1476:76	11	)
LEAF_NODE	1476:77	1476:77	9	;
JUMP_STATEMENT	1477:2	1477:11	6	return ( 0 ) ;
KEYWORD	1477:2	1477:2	7	return
LEAF_NODE	1477:2	1477:2	8	return
DESTINATION	1477:8	1477:8	7	( 0 )
EXPR	1477:8	1477:10	8	( 0 )
LEAF_NODE	1477:8	1477:8	9	(
FIELD	1477:9	1477:9	9	0
LEAF_NODE	1477:9	1477:9	10	0
LEAF_NODE	1477:10	1477:10	9	)
LEAF_NODE	1477:11	1477:11	7	;
LEAF_NODE	1478:1	1478:1	5	}
SELECTION	1479:1	1480:2	3	
KEYWORD	1479:1	1479:1	4	if
LEAF_NODE	1479:1	1479:1	5	if
LEAF_NODE	1479:4	1479:4	4	(
CONDITION	1479:5	1479:5	4	sp -> subsamplingcorrect != 0
EXPR	1479:5	1479:29	5	sp -> subsamplingcorrect != 0
FIELD	1479:5	1479:9	6	sp -> subsamplingcorrect
LEAF_NODE	1479:5	1479:5	7	sp
LEAF_NODE	1479:7	1479:7	7	->
LEAF_NODE	1479:9	1479:9	7	subsamplingcorrect
EQ_OPERATOR	1479:27	1479:27	6	!=
LEAF_NODE	1479:27	1479:27	7	!=
FIELD	1479:29	1479:29	6	0
LEAF_NODE	1479:29	1479:29	7	0
LEAF_NODE	1479:30	1479:30	4	)
STATEMENTS	1480:2	1480:2	4	
EXPR_STATEMENT	1480:2	1480:23	5	OJPEGReadSkip ( sp , m - 2 ) ;
EXPR	1480:2	1480:2	6	OJPEGReadSkip ( sp , m - 2 )
FUNCTION_CALL	1480:2	1480:22	7	OJPEGReadSkip ( sp , m - 2 )
CALLEE	1480:2	1480:2	8	OJPEGReadSkip
LEAF_NODE	1480:2	1480:2	9	OJPEGReadSkip
LEAF_NODE	1480:15	1480:15	8	(
ARGUMENT	1480:16	1480:16	8	sp
FIELD	1480:16	1480:16	9	sp
LEAF_NODE	1480:16	1480:16	10	sp
LEAF_NODE	1480:18	1480:18	8	,
ARGUMENT	1480:19	1480:21	8	m - 2
FIELD	1480:19	1480:19	9	m
LEAF_NODE	1480:19	1480:19	10	m
LEAF_NODE	1480:20	1480:20	9	-
FIELD	1480:21	1480:21	9	2
LEAF_NODE	1480:21	1480:21	10	2
LEAF_NODE	1480:22	1480:22	8	)
LEAF_NODE	1480:23	1480:23	6	;
SELECTION	1481:1	1482:1	3	
KEYWORD	1481:1	1481:1	4	else
LEAF_NODE	1481:1	1481:1	5	else
STATEMENTS	1482:1	1519:1	4	
LEAF_NODE	1482:1	1482:1	5	{
STATEMENTS	1483:2	1518:14	5	
EXPR_STATEMENT	1483:2	1483:6	6	m -= 2 ;
EXPR	1483:2	1483:2	7	m -= 2
ASSIGN	1483:2	1483:5	8	m -= 2
LVAL	1483:2	1483:2	9	m
FIELD	1483:2	1483:2	10	m
LEAF_NODE	1483:2	1483:2	11	m
ASSIGN_OP	1483:3	1483:3	9	-=
LEAF_NODE	1483:3	1483:3	10	-=
RVAL	1483:5	1483:5	9	2
FIELD	1483:5	1483:5	10	2
LEAF_NODE	1483:5	1483:5	11	2
LEAF_NODE	1483:6	1483:6	7	;
ITERATION	1484:2	1485:2	6	
KEYWORD	1484:2	1484:2	7	do
LEAF_NODE	1484:2	1484:2	8	do
LEAF_NODE	1518:9	1518:9	7	(
CONDITION	1518:10	1518:10	7	m > 0
EXPR	1518:10	1518:12	8	m > 0
FIELD	1518:10	1518:10	9	m
LEAF_NODE	1518:10	1518:10	10	m
REL_OPERATOR	1518:11	1518:11	9	>
LEAF_NODE	1518:11	1518:11	10	>
FIELD	1518:12	1518:12	9	0
LEAF_NODE	1518:12	1518:12	10	0
LEAF_NODE	1518:13	1518:13	7	)
STATEMENTS	1485:2	1518:2	7	
LEAF_NODE	1485:2	1485:2	8	{
STATEMENTS	1486:3	1517:3	8	
SELECTION	1486:3	1487:3	9	
KEYWORD	1486:3	1486:3	10	if
LEAF_NODE	1486:3	1486:3	11	if
LEAF_NODE	1486:6	1486:6	10	(
CONDITION	1486:7	1486:7	10	m < 65
EXPR	1486:7	1486:9	11	m < 65
FIELD	1486:7	1486:7	12	m
LEAF_NODE	1486:7	1486:7	13	m
REL_OPERATOR	1486:8	1486:8	12	<
LEAF_NODE	1486:8	1486:8	13	<
FIELD	1486:9	1486:9	12	65
LEAF_NODE	1486:9	1486:9	13	65
LEAF_NODE	1486:11	1486:11	10	)
STATEMENTS	1487:3	1490:3	10	
LEAF_NODE	1487:3	1487:3	11	{
STATEMENTS	1488:4	1489:4	11	
EXPR_STATEMENT	1488:4	1488:78	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" ) ;
EXPR	1488:4	1488:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" )
FUNCTION_CALL	1488:4	1488:77	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" )
CALLEE	1488:4	1488:4	15	TIFFErrorExt
LEAF_NODE	1488:4	1488:4	16	TIFFErrorExt
LEAF_NODE	1488:16	1488:16	15	(
ARGUMENT	1488:17	1488:17	15	tif -> tif_clientdata
FIELD	1488:17	1488:22	16	tif -> tif_clientdata
LEAF_NODE	1488:17	1488:17	17	tif
LEAF_NODE	1488:20	1488:20	17	->
LEAF_NODE	1488:22	1488:22	17	tif_clientdata
LEAF_NODE	1488:36	1488:36	15	,
ARGUMENT	1488:37	1488:37	15	module
FIELD	1488:37	1488:37	16	module
LEAF_NODE	1488:37	1488:37	17	module
LEAF_NODE	1488:43	1488:43	15	,
ARGUMENT	1488:44	1488:44	15	"Corrupt DQT marker in JPEG data"
FIELD	1488:44	1488:44	16	"Corrupt DQT marker in JPEG data"
LEAF_NODE	1488:44	1488:44	17	"Corrupt DQT marker in JPEG data"
LEAF_NODE	1488:77	1488:77	15	)
LEAF_NODE	1488:78	1488:78	13	;
JUMP_STATEMENT	1489:4	1489:13	12	return ( 0 ) ;
KEYWORD	1489:4	1489:4	13	return
LEAF_NODE	1489:4	1489:4	14	return
DESTINATION	1489:10	1489:10	13	( 0 )
EXPR	1489:10	1489:12	14	( 0 )
LEAF_NODE	1489:10	1489:10	15	(
FIELD	1489:11	1489:11	15	0
LEAF_NODE	1489:11	1489:11	16	0
LEAF_NODE	1489:12	1489:12	15	)
LEAF_NODE	1489:13	1489:13	13	;
LEAF_NODE	1490:3	1490:3	11	}
EXPR_STATEMENT	1491:3	1491:23	9	na = sizeof ( uint32 ) + 69 ;
EXPR	1491:3	1491:3	10	na = sizeof ( uint32 ) + 69
ASSIGN	1491:3	1491:6	11	na = sizeof ( uint32 ) + 69
LVAL	1491:3	1491:3	12	na
FIELD	1491:3	1491:3	13	na
LEAF_NODE	1491:3	1491:3	14	na
ASSIGN_OP	1491:5	1491:5	12	=
LEAF_NODE	1491:5	1491:5	13	=
RVAL	1491:6	1491:21	12	sizeof ( uint32 ) + 69
FUNCTION_CALL	1491:6	1491:19	13	sizeof ( uint32 )
CALLEE	1491:6	1491:6	14	sizeof
LEAF_NODE	1491:6	1491:6	15	sizeof
LEAF_NODE	1491:12	1491:12	14	(
ARGUMENT	1491:13	1491:13	14	uint32
FIELD	1491:13	1491:13	15	uint32
LEAF_NODE	1491:13	1491:13	16	uint32
LEAF_NODE	1491:19	1491:19	14	)
LEAF_NODE	1491:20	1491:20	13	+
FIELD	1491:21	1491:21	13	69
LEAF_NODE	1491:21	1491:21	14	69
LEAF_NODE	1491:23	1491:23	10	;
EXPR_STATEMENT	1492:3	1492:21	9	nb = _TIFFmalloc ( na ) ;
EXPR	1492:3	1492:3	10	nb = _TIFFmalloc ( na )
ASSIGN	1492:3	1492:6	11	nb = _TIFFmalloc ( na )
LVAL	1492:3	1492:3	12	nb
FIELD	1492:3	1492:3	13	nb
LEAF_NODE	1492:3	1492:3	14	nb
ASSIGN_OP	1492:5	1492:5	12	=
LEAF_NODE	1492:5	1492:5	13	=
RVAL	1492:6	1492:6	12	_TIFFmalloc ( na )
FUNCTION_CALL	1492:6	1492:20	13	_TIFFmalloc ( na )
CALLEE	1492:6	1492:6	14	_TIFFmalloc
LEAF_NODE	1492:6	1492:6	15	_TIFFmalloc
LEAF_NODE	1492:17	1492:17	14	(
ARGUMENT	1492:18	1492:18	14	na
FIELD	1492:18	1492:18	15	na
LEAF_NODE	1492:18	1492:18	16	na
LEAF_NODE	1492:20	1492:20	14	)
LEAF_NODE	1492:21	1492:21	10	;
SELECTION	1493:3	1494:3	9	
KEYWORD	1493:3	1493:3	10	if
LEAF_NODE	1493:3	1493:3	11	if
LEAF_NODE	1493:6	1493:6	10	(
CONDITION	1493:7	1493:7	10	nb == 0
EXPR	1493:7	1493:11	11	nb == 0
FIELD	1493:7	1493:7	12	nb
LEAF_NODE	1493:7	1493:7	13	nb
EQ_OPERATOR	1493:9	1493:9	12	==
LEAF_NODE	1493:9	1493:9	13	==
FIELD	1493:11	1493:11	12	0
LEAF_NODE	1493:11	1493:11	13	0
LEAF_NODE	1493:12	1493:12	10	)
STATEMENTS	1494:3	1497:3	10	
LEAF_NODE	1494:3	1494:3	11	{
STATEMENTS	1495:4	1496:4	11	
EXPR_STATEMENT	1495:4	1495:60	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1495:4	1495:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1495:4	1495:59	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1495:4	1495:4	15	TIFFErrorExt
LEAF_NODE	1495:4	1495:4	16	TIFFErrorExt
LEAF_NODE	1495:16	1495:16	15	(
ARGUMENT	1495:17	1495:17	15	tif -> tif_clientdata
FIELD	1495:17	1495:22	16	tif -> tif_clientdata
LEAF_NODE	1495:17	1495:17	17	tif
LEAF_NODE	1495:20	1495:20	17	->
LEAF_NODE	1495:22	1495:22	17	tif_clientdata
LEAF_NODE	1495:36	1495:36	15	,
ARGUMENT	1495:37	1495:37	15	module
FIELD	1495:37	1495:37	16	module
LEAF_NODE	1495:37	1495:37	17	module
LEAF_NODE	1495:43	1495:43	15	,
ARGUMENT	1495:44	1495:44	15	"Out of memory"
FIELD	1495:44	1495:44	16	"Out of memory"
LEAF_NODE	1495:44	1495:44	17	"Out of memory"
LEAF_NODE	1495:59	1495:59	15	)
LEAF_NODE	1495:60	1495:60	13	;
JUMP_STATEMENT	1496:4	1496:13	12	return ( 0 ) ;
KEYWORD	1496:4	1496:4	13	return
LEAF_NODE	1496:4	1496:4	14	return
DESTINATION	1496:10	1496:10	13	( 0 )
EXPR	1496:10	1496:12	14	( 0 )
LEAF_NODE	1496:10	1496:10	15	(
FIELD	1496:11	1496:11	15	0
LEAF_NODE	1496:11	1496:11	16	0
LEAF_NODE	1496:12	1496:12	15	)
LEAF_NODE	1496:13	1496:13	13	;
LEAF_NODE	1497:3	1497:3	11	}
LEAF_NODE	1498:3	1498:3	9	*
EXPR_STATEMENT	1498:4	1498:18	9	( uint32 * ) nb = na ;
EXPR	1498:4	1498:4	10	( uint32 * ) nb = na
ASSIGN	1498:4	1498:16	11	( uint32 * ) nb = na
LVAL	1498:4	1498:13	12	( uint32 * ) nb
LEAF_NODE	1498:4	1498:4	13	(
TYPE_NAME	1498:5	1498:5	13	uint32
LEAF_NODE	1498:5	1498:5	14	uint32
LEAF_NODE	1498:11	1498:11	13	*
LEAF_NODE	1498:12	1498:12	13	)
FIELD	1498:13	1498:13	13	nb
LEAF_NODE	1498:13	1498:13	14	nb
ASSIGN_OP	1498:15	1498:15	12	=
LEAF_NODE	1498:15	1498:15	13	=
RVAL	1498:16	1498:16	12	na
FIELD	1498:16	1498:16	13	na
LEAF_NODE	1498:16	1498:16	14	na
LEAF_NODE	1498:18	1498:18	10	;
EXPR_STATEMENT	1499:3	1499:25	9	nb [ sizeof ( uint32 ) ] = 255 ;
EXPR	1499:3	1499:3	10	nb [ sizeof ( uint32 ) ] = 255
ASSIGN	1499:3	1499:22	11	nb [ sizeof ( uint32 ) ] = 255
LVAL	1499:3	1499:3	12	nb [ sizeof ( uint32 ) ]
FIELD	1499:3	1499:20	13	nb [ sizeof ( uint32 ) ]
LEAF_NODE	1499:3	1499:3	14	nb
LEAF_NODE	1499:5	1499:5	14	[
EXPR	1499:6	1499:6	14	sizeof ( uint32 )
FUNCTION_CALL	1499:6	1499:19	15	sizeof ( uint32 )
CALLEE	1499:6	1499:6	16	sizeof
LEAF_NODE	1499:6	1499:6	17	sizeof
LEAF_NODE	1499:12	1499:12	16	(
ARGUMENT	1499:13	1499:13	16	uint32
FIELD	1499:13	1499:13	17	uint32
LEAF_NODE	1499:13	1499:13	18	uint32
LEAF_NODE	1499:19	1499:19	16	)
LEAF_NODE	1499:20	1499:20	14	]
ASSIGN_OP	1499:21	1499:21	12	=
LEAF_NODE	1499:21	1499:21	13	=
RVAL	1499:22	1499:22	12	255
FIELD	1499:22	1499:22	13	255
LEAF_NODE	1499:22	1499:22	14	255
LEAF_NODE	1499:25	1499:25	10	;
EXPR_STATEMENT	1500:3	1500:39	9	nb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DQT ;
EXPR	1500:3	1500:3	10	nb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DQT
ASSIGN	1500:3	1500:24	11	nb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DQT
LVAL	1500:3	1500:3	12	nb [ sizeof ( uint32 ) + 1 ]
FIELD	1500:3	1500:22	13	nb [ sizeof ( uint32 ) + 1 ]
LEAF_NODE	1500:3	1500:3	14	nb
LEAF_NODE	1500:5	1500:5	14	[
EXPR	1500:6	1500:21	14	sizeof ( uint32 ) + 1
FUNCTION_CALL	1500:6	1500:19	15	sizeof ( uint32 )
CALLEE	1500:6	1500:6	16	sizeof
LEAF_NODE	1500:6	1500:6	17	sizeof
LEAF_NODE	1500:12	1500:12	16	(
ARGUMENT	1500:13	1500:13	16	uint32
FIELD	1500:13	1500:13	17	uint32
LEAF_NODE	1500:13	1500:13	18	uint32
LEAF_NODE	1500:19	1500:19	16	)
LEAF_NODE	1500:20	1500:20	15	+
FIELD	1500:21	1500:21	15	1
LEAF_NODE	1500:21	1500:21	16	1
LEAF_NODE	1500:22	1500:22	14	]
ASSIGN_OP	1500:23	1500:23	12	=
LEAF_NODE	1500:23	1500:23	13	=
RVAL	1500:24	1500:24	12	JPEG_MARKER_DQT
FIELD	1500:24	1500:24	13	JPEG_MARKER_DQT
LEAF_NODE	1500:24	1500:24	14	JPEG_MARKER_DQT
LEAF_NODE	1500:39	1500:39	10	;
EXPR_STATEMENT	1501:3	1501:25	9	nb [ sizeof ( uint32 ) + 2 ] = 0 ;
EXPR	1501:3	1501:3	10	nb [ sizeof ( uint32 ) + 2 ] = 0
ASSIGN	1501:3	1501:24	11	nb [ sizeof ( uint32 ) + 2 ] = 0
LVAL	1501:3	1501:3	12	nb [ sizeof ( uint32 ) + 2 ]
FIELD	1501:3	1501:22	13	nb [ sizeof ( uint32 ) + 2 ]
LEAF_NODE	1501:3	1501:3	14	nb
LEAF_NODE	1501:5	1501:5	14	[
EXPR	1501:6	1501:21	14	sizeof ( uint32 ) + 2
FUNCTION_CALL	1501:6	1501:19	15	sizeof ( uint32 )
CALLEE	1501:6	1501:6	16	sizeof
LEAF_NODE	1501:6	1501:6	17	sizeof
LEAF_NODE	1501:12	1501:12	16	(
ARGUMENT	1501:13	1501:13	16	uint32
FIELD	1501:13	1501:13	17	uint32
LEAF_NODE	1501:13	1501:13	18	uint32
LEAF_NODE	1501:19	1501:19	16	)
LEAF_NODE	1501:20	1501:20	15	+
FIELD	1501:21	1501:21	15	2
LEAF_NODE	1501:21	1501:21	16	2
LEAF_NODE	1501:22	1501:22	14	]
ASSIGN_OP	1501:23	1501:23	12	=
LEAF_NODE	1501:23	1501:23	13	=
RVAL	1501:24	1501:24	12	0
FIELD	1501:24	1501:24	13	0
LEAF_NODE	1501:24	1501:24	14	0
LEAF_NODE	1501:25	1501:25	10	;
EXPR_STATEMENT	1502:3	1502:26	9	nb [ sizeof ( uint32 ) + 3 ] = 67 ;
EXPR	1502:3	1502:3	10	nb [ sizeof ( uint32 ) + 3 ] = 67
ASSIGN	1502:3	1502:24	11	nb [ sizeof ( uint32 ) + 3 ] = 67
LVAL	1502:3	1502:3	12	nb [ sizeof ( uint32 ) + 3 ]
FIELD	1502:3	1502:22	13	nb [ sizeof ( uint32 ) + 3 ]
LEAF_NODE	1502:3	1502:3	14	nb
LEAF_NODE	1502:5	1502:5	14	[
EXPR	1502:6	1502:21	14	sizeof ( uint32 ) + 3
FUNCTION_CALL	1502:6	1502:19	15	sizeof ( uint32 )
CALLEE	1502:6	1502:6	16	sizeof
LEAF_NODE	1502:6	1502:6	17	sizeof
LEAF_NODE	1502:12	1502:12	16	(
ARGUMENT	1502:13	1502:13	16	uint32
FIELD	1502:13	1502:13	17	uint32
LEAF_NODE	1502:13	1502:13	18	uint32
LEAF_NODE	1502:19	1502:19	16	)
LEAF_NODE	1502:20	1502:20	15	+
FIELD	1502:21	1502:21	15	3
LEAF_NODE	1502:21	1502:21	16	3
LEAF_NODE	1502:22	1502:22	14	]
ASSIGN_OP	1502:23	1502:23	12	=
LEAF_NODE	1502:23	1502:23	13	=
RVAL	1502:24	1502:24	12	67
FIELD	1502:24	1502:24	13	67
LEAF_NODE	1502:24	1502:24	14	67
LEAF_NODE	1502:26	1502:26	10	;
SELECTION	1503:3	1503:55	9	
KEYWORD	1503:3	1503:3	10	if
LEAF_NODE	1503:3	1503:3	11	if
LEAF_NODE	1503:6	1503:6	10	(
CONDITION	1503:7	1503:7	10	OJPEGReadBlock ( sp , 65 , & nb [ sizeof ( uint32 ) + 4 ] ) == 0
EXPR	1503:7	1503:52	11	OJPEGReadBlock ( sp , 65 , & nb [ sizeof ( uint32 ) + 4 ] ) == 0
FUNCTION_CALL	1503:7	1503:49	12	OJPEGReadBlock ( sp , 65 , & nb [ sizeof ( uint32 ) + 4 ] )
CALLEE	1503:7	1503:7	13	OJPEGReadBlock
LEAF_NODE	1503:7	1503:7	14	OJPEGReadBlock
LEAF_NODE	1503:21	1503:21	13	(
ARGUMENT	1503:22	1503:22	13	sp
FIELD	1503:22	1503:22	14	sp
LEAF_NODE	1503:22	1503:22	15	sp
LEAF_NODE	1503:24	1503:24	13	,
ARGUMENT	1503:25	1503:25	13	65
FIELD	1503:25	1503:25	14	65
LEAF_NODE	1503:25	1503:25	15	65
LEAF_NODE	1503:27	1503:27	13	,
ARGUMENT	1503:28	1503:28	13	& nb [ sizeof ( uint32 ) + 4 ]
UNARY_EXPR	1503:28	1503:29	14	& nb [ sizeof ( uint32 ) + 4 ]
UNARY_OPERATOR	1503:28	1503:28	15	&
LEAF_NODE	1503:28	1503:28	16	&
FIELD	1503:29	1503:48	15	nb [ sizeof ( uint32 ) + 4 ]
LEAF_NODE	1503:29	1503:29	16	nb
LEAF_NODE	1503:31	1503:31	16	[
EXPR	1503:32	1503:47	16	sizeof ( uint32 ) + 4
FUNCTION_CALL	1503:32	1503:45	17	sizeof ( uint32 )
CALLEE	1503:32	1503:32	18	sizeof
LEAF_NODE	1503:32	1503:32	19	sizeof
LEAF_NODE	1503:38	1503:38	18	(
ARGUMENT	1503:39	1503:39	18	uint32
FIELD	1503:39	1503:39	19	uint32
LEAF_NODE	1503:39	1503:39	20	uint32
LEAF_NODE	1503:45	1503:45	18	)
LEAF_NODE	1503:46	1503:46	17	+
FIELD	1503:47	1503:47	17	4
LEAF_NODE	1503:47	1503:47	18	4
LEAF_NODE	1503:48	1503:48	16	]
LEAF_NODE	1503:49	1503:49	13	)
EQ_OPERATOR	1503:50	1503:50	12	==
LEAF_NODE	1503:50	1503:50	13	==
FIELD	1503:52	1503:52	12	0
LEAF_NODE	1503:52	1503:52	13	0
LEAF_NODE	1503:53	1503:53	10	)
STATEMENTS	1503:55	1506:3	10	
LEAF_NODE	1503:55	1503:55	11	{
STATEMENTS	1504:4	1505:4	11	
EXPR_STATEMENT	1504:4	1504:17	12	_TIFFfree ( nb ) ;
EXPR	1504:4	1504:4	13	_TIFFfree ( nb )
FUNCTION_CALL	1504:4	1504:16	14	_TIFFfree ( nb )
CALLEE	1504:4	1504:4	15	_TIFFfree
LEAF_NODE	1504:4	1504:4	16	_TIFFfree
LEAF_NODE	1504:13	1504:13	15	(
ARGUMENT	1504:14	1504:14	15	nb
FIELD	1504:14	1504:14	16	nb
LEAF_NODE	1504:14	1504:14	17	nb
LEAF_NODE	1504:16	1504:16	15	)
LEAF_NODE	1504:17	1504:17	13	;
JUMP_STATEMENT	1505:4	1505:13	12	return ( 0 ) ;
KEYWORD	1505:4	1505:4	13	return
LEAF_NODE	1505:4	1505:4	14	return
DESTINATION	1505:10	1505:10	13	( 0 )
EXPR	1505:10	1505:12	14	( 0 )
LEAF_NODE	1505:10	1505:10	15	(
FIELD	1505:11	1505:11	15	0
LEAF_NODE	1505:11	1505:11	16	0
LEAF_NODE	1505:12	1505:12	15	)
LEAF_NODE	1505:13	1505:13	13	;
LEAF_NODE	1506:3	1506:3	11	}
EXPR_STATEMENT	1507:3	1507:28	9	o = nb [ sizeof ( uint32 ) + 4 ] & 15 ;
EXPR	1507:3	1507:3	10	o = nb [ sizeof ( uint32 ) + 4 ] & 15
ASSIGN	1507:3	1507:5	11	o = nb [ sizeof ( uint32 ) + 4 ] & 15
LVAL	1507:3	1507:3	12	o
FIELD	1507:3	1507:3	13	o
LEAF_NODE	1507:3	1507:3	14	o
ASSIGN_OP	1507:4	1507:4	12	=
LEAF_NODE	1507:4	1507:4	13	=
RVAL	1507:5	1507:26	12	nb [ sizeof ( uint32 ) + 4 ] & 15
FIELD	1507:5	1507:24	13	nb [ sizeof ( uint32 ) + 4 ]
LEAF_NODE	1507:5	1507:5	14	nb
LEAF_NODE	1507:7	1507:7	14	[
EXPR	1507:8	1507:23	14	sizeof ( uint32 ) + 4
FUNCTION_CALL	1507:8	1507:21	15	sizeof ( uint32 )
CALLEE	1507:8	1507:8	16	sizeof
LEAF_NODE	1507:8	1507:8	17	sizeof
LEAF_NODE	1507:14	1507:14	16	(
ARGUMENT	1507:15	1507:15	16	uint32
FIELD	1507:15	1507:15	17	uint32
LEAF_NODE	1507:15	1507:15	18	uint32
LEAF_NODE	1507:21	1507:21	16	)
LEAF_NODE	1507:22	1507:22	15	+
FIELD	1507:23	1507:23	15	4
LEAF_NODE	1507:23	1507:23	16	4
LEAF_NODE	1507:24	1507:24	14	]
LEAF_NODE	1507:25	1507:25	13	&
FIELD	1507:26	1507:26	13	15
LEAF_NODE	1507:26	1507:26	14	15
LEAF_NODE	1507:28	1507:28	10	;
SELECTION	1508:3	1509:3	9	
KEYWORD	1508:3	1508:3	10	if
LEAF_NODE	1508:3	1508:3	11	if
LEAF_NODE	1508:6	1508:6	10	(
CONDITION	1508:7	1508:7	10	3 < o
EXPR	1508:7	1508:9	11	3 < o
FIELD	1508:7	1508:7	12	3
LEAF_NODE	1508:7	1508:7	13	3
REL_OPERATOR	1508:8	1508:8	12	<
LEAF_NODE	1508:8	1508:8	13	<
FIELD	1508:9	1508:9	12	o
LEAF_NODE	1508:9	1508:9	13	o
LEAF_NODE	1508:10	1508:10	10	)
STATEMENTS	1509:3	1513:3	10	
LEAF_NODE	1509:3	1509:3	11	{
STATEMENTS	1510:4	1512:4	11	
EXPR_STATEMENT	1510:4	1510:78	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" ) ;
EXPR	1510:4	1510:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" )
FUNCTION_CALL	1510:4	1510:77	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DQT marker in JPEG data" )
CALLEE	1510:4	1510:4	15	TIFFErrorExt
LEAF_NODE	1510:4	1510:4	16	TIFFErrorExt
LEAF_NODE	1510:16	1510:16	15	(
ARGUMENT	1510:17	1510:17	15	tif -> tif_clientdata
FIELD	1510:17	1510:22	16	tif -> tif_clientdata
LEAF_NODE	1510:17	1510:17	17	tif
LEAF_NODE	1510:20	1510:20	17	->
LEAF_NODE	1510:22	1510:22	17	tif_clientdata
LEAF_NODE	1510:36	1510:36	15	,
ARGUMENT	1510:37	1510:37	15	module
FIELD	1510:37	1510:37	16	module
LEAF_NODE	1510:37	1510:37	17	module
LEAF_NODE	1510:43	1510:43	15	,
ARGUMENT	1510:44	1510:44	15	"Corrupt DQT marker in JPEG data"
FIELD	1510:44	1510:44	16	"Corrupt DQT marker in JPEG data"
LEAF_NODE	1510:44	1510:44	17	"Corrupt DQT marker in JPEG data"
LEAF_NODE	1510:77	1510:77	15	)
LEAF_NODE	1510:78	1510:78	13	;
EXPR_STATEMENT	1511:4	1511:17	12	_TIFFfree ( nb ) ;
EXPR	1511:4	1511:4	13	_TIFFfree ( nb )
FUNCTION_CALL	1511:4	1511:16	14	_TIFFfree ( nb )
CALLEE	1511:4	1511:4	15	_TIFFfree
LEAF_NODE	1511:4	1511:4	16	_TIFFfree
LEAF_NODE	1511:13	1511:13	15	(
ARGUMENT	1511:14	1511:14	15	nb
FIELD	1511:14	1511:14	16	nb
LEAF_NODE	1511:14	1511:14	17	nb
LEAF_NODE	1511:16	1511:16	15	)
LEAF_NODE	1511:17	1511:17	13	;
JUMP_STATEMENT	1512:4	1512:13	12	return ( 0 ) ;
KEYWORD	1512:4	1512:4	13	return
LEAF_NODE	1512:4	1512:4	14	return
DESTINATION	1512:10	1512:10	13	( 0 )
EXPR	1512:10	1512:12	14	( 0 )
LEAF_NODE	1512:10	1512:10	15	(
FIELD	1512:11	1512:11	15	0
LEAF_NODE	1512:11	1512:11	16	0
LEAF_NODE	1512:12	1512:12	15	)
LEAF_NODE	1512:13	1512:13	13	;
LEAF_NODE	1513:3	1513:3	11	}
SELECTION	1514:3	1515:4	9	
KEYWORD	1514:3	1514:3	10	if
LEAF_NODE	1514:3	1514:3	11	if
LEAF_NODE	1514:6	1514:6	10	(
CONDITION	1514:7	1514:7	10	sp -> qtable [ o ] != 0
EXPR	1514:7	1514:22	11	sp -> qtable [ o ] != 0
FIELD	1514:7	1514:19	12	sp -> qtable [ o ]
LEAF_NODE	1514:7	1514:7	13	sp
LEAF_NODE	1514:9	1514:9	13	->
LEAF_NODE	1514:11	1514:11	13	qtable
LEAF_NODE	1514:17	1514:17	13	[
EXPR	1514:18	1514:18	13	o
FIELD	1514:18	1514:18	14	o
LEAF_NODE	1514:18	1514:18	15	o
LEAF_NODE	1514:19	1514:19	13	]
EQ_OPERATOR	1514:20	1514:20	12	!=
LEAF_NODE	1514:20	1514:20	13	!=
FIELD	1514:22	1514:22	12	0
LEAF_NODE	1514:22	1514:22	13	0
LEAF_NODE	1514:23	1514:23	10	)
STATEMENTS	1515:4	1515:4	10	
EXPR_STATEMENT	1515:4	1515:28	11	_TIFFfree ( sp -> qtable [ o ] ) ;
EXPR	1515:4	1515:4	12	_TIFFfree ( sp -> qtable [ o ] )
FUNCTION_CALL	1515:4	1515:27	13	_TIFFfree ( sp -> qtable [ o ] )
CALLEE	1515:4	1515:4	14	_TIFFfree
LEAF_NODE	1515:4	1515:4	15	_TIFFfree
LEAF_NODE	1515:13	1515:13	14	(
ARGUMENT	1515:14	1515:14	14	sp -> qtable [ o ]
FIELD	1515:14	1515:26	15	sp -> qtable [ o ]
LEAF_NODE	1515:14	1515:14	16	sp
LEAF_NODE	1515:16	1515:16	16	->
LEAF_NODE	1515:18	1515:18	16	qtable
LEAF_NODE	1515:24	1515:24	16	[
EXPR	1515:25	1515:25	16	o
FIELD	1515:25	1515:25	17	o
LEAF_NODE	1515:25	1515:25	18	o
LEAF_NODE	1515:26	1515:26	16	]
LEAF_NODE	1515:27	1515:27	14	)
LEAF_NODE	1515:28	1515:28	12	;
EXPR_STATEMENT	1516:3	1516:19	9	sp -> qtable [ o ] = nb ;
EXPR	1516:3	1516:3	10	sp -> qtable [ o ] = nb
ASSIGN	1516:3	1516:17	11	sp -> qtable [ o ] = nb
LVAL	1516:3	1516:3	12	sp -> qtable [ o ]
FIELD	1516:3	1516:15	13	sp -> qtable [ o ]
LEAF_NODE	1516:3	1516:3	14	sp
LEAF_NODE	1516:5	1516:5	14	->
LEAF_NODE	1516:7	1516:7	14	qtable
LEAF_NODE	1516:13	1516:13	14	[
EXPR	1516:14	1516:14	14	o
FIELD	1516:14	1516:14	15	o
LEAF_NODE	1516:14	1516:14	16	o
LEAF_NODE	1516:15	1516:15	14	]
ASSIGN_OP	1516:16	1516:16	12	=
LEAF_NODE	1516:16	1516:16	13	=
RVAL	1516:17	1516:17	12	nb
FIELD	1516:17	1516:17	13	nb
LEAF_NODE	1516:17	1516:17	14	nb
LEAF_NODE	1516:19	1516:19	10	;
EXPR_STATEMENT	1517:3	1517:8	9	m -= 65 ;
EXPR	1517:3	1517:3	10	m -= 65
ASSIGN	1517:3	1517:6	11	m -= 65
LVAL	1517:3	1517:3	12	m
FIELD	1517:3	1517:3	13	m
LEAF_NODE	1517:3	1517:3	14	m
ASSIGN_OP	1517:4	1517:4	12	-=
LEAF_NODE	1517:4	1517:4	13	-=
RVAL	1517:6	1517:6	12	65
FIELD	1517:6	1517:6	13	65
LEAF_NODE	1517:6	1517:6	14	65
LEAF_NODE	1517:8	1517:8	10	;
LEAF_NODE	1518:2	1518:2	8	}
LEAF_NODE	1518:14	1518:14	6	;
LEAF_NODE	1519:1	1519:1	5	}
JUMP_STATEMENT	1520:1	1520:10	3	return ( 1 ) ;
KEYWORD	1520:1	1520:1	4	return
LEAF_NODE	1520:1	1520:1	5	return
DESTINATION	1520:7	1520:7	4	( 1 )
EXPR	1520:7	1520:9	5	( 1 )
LEAF_NODE	1520:7	1520:7	6	(
FIELD	1520:8	1520:8	6	1
LEAF_NODE	1520:8	1520:8	7	1
LEAF_NODE	1520:9	1520:9	6	)
LEAF_NODE	1520:10	1520:10	4	;
LEAF_NODE	1521:0	1521:0	2	}
FUNCTION_DEF	1523:0	1598:0	1	
RETURN_TYPE	1523:0	1523:7	2	static int
LEAF_NODE	1523:0	1523:0	3	static
TYPE_NAME	1523:7	1523:7	3	int
LEAF_NODE	1523:7	1523:7	4	int
FUNCTION_NAME	1524:0	1524:0	2	OJPEGReadHeaderInfoSecStreamDht
LEAF_NODE	1524:0	1524:0	3	OJPEGReadHeaderInfoSecStreamDht
PARAMETER_LIST	1524:31	1524:41	2	( TIFF * tif )
LEAF_NODE	1524:31	1524:31	3	(
PARAMETER_DECL	1524:32	1524:38	3	TIFF * tif
TYPE	1524:32	1524:36	4	TIFF *
TYPE_NAME	1524:32	1524:32	5	TIFF
LEAF_NODE	1524:32	1524:32	6	TIFF
POINTER	1524:36	1524:36	5	*
LEAF_NODE	1524:36	1524:36	6	*
NAME	1524:38	1524:38	4	tif
LEAF_NODE	1524:38	1524:38	5	tif
LEAF_NODE	1524:41	1524:41	3	)
LEAF_NODE	1525:0	1525:0	2	{
STATEMENTS	1528:1	1597:1	2	
LEAF_NODE	1528:1	1528:1	3	static
SIMPLE_DECL	1528:8	1528:61	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamDht" ;
VAR_DECL	1528:8	1528:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamDht"
TYPE	1528:8	1528:25	5	const char [ ]
TYPE_NAME	1528:8	1528:14	6	const char
LEAF_NODE	1528:8	1528:8	7	const
LEAF_NODE	1528:14	1528:14	7	char
TYPE_SUFFIX	1528:25	1528:26	6	[ ]
LEAF_NODE	1528:25	1528:25	7	[
LEAF_NODE	1528:26	1528:26	7	]
NAME	1528:19	1528:19	5	module
LEAF_NODE	1528:19	1528:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1528:19	1528:19	5	module = "OJPEGReadHeaderInfoSecStreamDht"
ASSIGN	1528:19	1528:28	6	module = "OJPEGReadHeaderInfoSecStreamDht"
LVAL	1528:19	1528:19	7	module
NAME	1528:19	1528:19	8	module
LEAF_NODE	1528:19	1528:19	9	module
ASSIGN_OP	1528:27	1528:27	7	=
LEAF_NODE	1528:27	1528:27	8	=
RVAL	1528:28	1528:28	7	"OJPEGReadHeaderInfoSecStreamDht"
FIELD	1528:28	1528:28	8	"OJPEGReadHeaderInfoSecStreamDht"
LEAF_NODE	1528:28	1528:28	9	"OJPEGReadHeaderInfoSecStreamDht"
LEAF_NODE	1528:61	1528:61	4	;
SIMPLE_DECL	1529:1	1529:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1529:1	1529:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1529:1	1529:11	5	OJPEGState *
TYPE_NAME	1529:1	1529:1	6	OJPEGState
LEAF_NODE	1529:1	1529:1	7	OJPEGState
POINTER	1529:11	1529:11	6	*
LEAF_NODE	1529:11	1529:11	7	*
NAME	1529:13	1529:13	5	sp
LEAF_NODE	1529:13	1529:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1529:13	1529:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1529:13	1529:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1529:13	1529:13	7	sp
NAME	1529:13	1529:13	8	sp
LEAF_NODE	1529:13	1529:13	9	sp
ASSIGN_OP	1529:15	1529:15	7	=
LEAF_NODE	1529:15	1529:15	8	=
RVAL	1529:16	1529:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1529:16	1529:16	8	(
TYPE_NAME	1529:17	1529:17	8	OJPEGState
LEAF_NODE	1529:17	1529:17	9	OJPEGState
LEAF_NODE	1529:27	1529:27	8	*
LEAF_NODE	1529:28	1529:28	8	)
FIELD	1529:29	1529:34	8	tif -> tif_data
LEAF_NODE	1529:29	1529:29	9	tif
LEAF_NODE	1529:32	1529:32	9	->
LEAF_NODE	1529:34	1529:34	9	tif_data
LEAF_NODE	1529:42	1529:42	4	;
SIMPLE_DECL	1530:1	1530:9	3	uint16 m ;
VAR_DECL	1530:1	1530:8	4	uint16 m
TYPE	1530:1	1530:1	5	uint16
TYPE_NAME	1530:1	1530:1	6	uint16
LEAF_NODE	1530:1	1530:1	7	uint16
NAME	1530:8	1530:8	5	m
LEAF_NODE	1530:8	1530:8	6	m
LEAF_NODE	1530:9	1530:9	4	;
SIMPLE_DECL	1531:1	1531:10	3	uint32 na ;
VAR_DECL	1531:1	1531:8	4	uint32 na
TYPE	1531:1	1531:1	5	uint32
TYPE_NAME	1531:1	1531:1	6	uint32
LEAF_NODE	1531:1	1531:1	7	uint32
NAME	1531:8	1531:8	5	na
LEAF_NODE	1531:8	1531:8	6	na
LEAF_NODE	1531:10	1531:10	4	;
SIMPLE_DECL	1532:1	1532:10	3	uint8 * nb ;
VAR_DECL	1532:1	1532:8	4	uint8 * nb
TYPE	1532:1	1532:6	5	uint8 *
TYPE_NAME	1532:1	1532:1	6	uint8
LEAF_NODE	1532:1	1532:1	7	uint8
POINTER	1532:6	1532:6	6	*
LEAF_NODE	1532:6	1532:6	7	*
NAME	1532:8	1532:8	5	nb
LEAF_NODE	1532:8	1532:8	6	nb
LEAF_NODE	1532:10	1532:10	4	;
SIMPLE_DECL	1533:1	1533:8	3	uint8 o ;
VAR_DECL	1533:1	1533:7	4	uint8 o
TYPE	1533:1	1533:1	5	uint8
TYPE_NAME	1533:1	1533:1	6	uint8
LEAF_NODE	1533:1	1533:1	7	uint8
NAME	1533:7	1533:7	5	o
LEAF_NODE	1533:7	1533:7	6	o
LEAF_NODE	1533:8	1533:8	4	;
SELECTION	1534:1	1535:2	3	
KEYWORD	1534:1	1534:1	4	if
LEAF_NODE	1534:1	1534:1	5	if
LEAF_NODE	1534:4	1534:4	4	(
CONDITION	1534:5	1534:5	4	OJPEGReadWord ( sp , & m ) == 0
EXPR	1534:5	1534:27	5	OJPEGReadWord ( sp , & m ) == 0
FUNCTION_CALL	1534:5	1534:24	6	OJPEGReadWord ( sp , & m )
CALLEE	1534:5	1534:5	7	OJPEGReadWord
LEAF_NODE	1534:5	1534:5	8	OJPEGReadWord
LEAF_NODE	1534:18	1534:18	7	(
ARGUMENT	1534:19	1534:19	7	sp
FIELD	1534:19	1534:19	8	sp
LEAF_NODE	1534:19	1534:19	9	sp
LEAF_NODE	1534:21	1534:21	7	,
ARGUMENT	1534:22	1534:22	7	& m
UNARY_EXPR	1534:22	1534:23	8	& m
UNARY_OPERATOR	1534:22	1534:22	9	&
LEAF_NODE	1534:22	1534:22	10	&
FIELD	1534:23	1534:23	9	m
LEAF_NODE	1534:23	1534:23	10	m
LEAF_NODE	1534:24	1534:24	7	)
EQ_OPERATOR	1534:25	1534:25	6	==
LEAF_NODE	1534:25	1534:25	7	==
FIELD	1534:27	1534:27	6	0
LEAF_NODE	1534:27	1534:27	7	0
LEAF_NODE	1534:28	1534:28	4	)
STATEMENTS	1535:2	1535:2	4	
JUMP_STATEMENT	1535:2	1535:11	5	return ( 0 ) ;
KEYWORD	1535:2	1535:2	6	return
LEAF_NODE	1535:2	1535:2	7	return
DESTINATION	1535:8	1535:8	6	( 0 )
EXPR	1535:8	1535:10	7	( 0 )
LEAF_NODE	1535:8	1535:8	8	(
FIELD	1535:9	1535:9	8	0
LEAF_NODE	1535:9	1535:9	9	0
LEAF_NODE	1535:10	1535:10	8	)
LEAF_NODE	1535:11	1535:11	6	;
SELECTION	1536:1	1537:1	3	
KEYWORD	1536:1	1536:1	4	if
LEAF_NODE	1536:1	1536:1	5	if
LEAF_NODE	1536:4	1536:4	4	(
CONDITION	1536:5	1536:5	4	m <= 2
EXPR	1536:5	1536:8	5	m <= 2
FIELD	1536:5	1536:5	6	m
LEAF_NODE	1536:5	1536:5	7	m
REL_OPERATOR	1536:6	1536:6	6	<=
LEAF_NODE	1536:6	1536:6	7	<=
FIELD	1536:8	1536:8	6	2
LEAF_NODE	1536:8	1536:8	7	2
LEAF_NODE	1536:9	1536:9	4	)
STATEMENTS	1537:1	1541:1	4	
LEAF_NODE	1537:1	1537:1	5	{
STATEMENTS	1538:2	1540:2	5	
SELECTION	1538:2	1539:3	6	
KEYWORD	1538:2	1538:2	7	if
LEAF_NODE	1538:2	1538:2	8	if
LEAF_NODE	1538:5	1538:5	7	(
CONDITION	1538:6	1538:6	7	sp -> subsamplingcorrect == 0
EXPR	1538:6	1538:30	8	sp -> subsamplingcorrect == 0
FIELD	1538:6	1538:10	9	sp -> subsamplingcorrect
LEAF_NODE	1538:6	1538:6	10	sp
LEAF_NODE	1538:8	1538:8	10	->
LEAF_NODE	1538:10	1538:10	10	subsamplingcorrect
EQ_OPERATOR	1538:28	1538:28	9	==
LEAF_NODE	1538:28	1538:28	10	==
FIELD	1538:30	1538:30	9	0
LEAF_NODE	1538:30	1538:30	10	0
LEAF_NODE	1538:31	1538:31	7	)
STATEMENTS	1539:3	1539:3	7	
EXPR_STATEMENT	1539:3	1539:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" ) ;
EXPR	1539:3	1539:3	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
FUNCTION_CALL	1539:3	1539:76	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
CALLEE	1539:3	1539:3	11	TIFFErrorExt
LEAF_NODE	1539:3	1539:3	12	TIFFErrorExt
LEAF_NODE	1539:15	1539:15	11	(
ARGUMENT	1539:16	1539:16	11	tif -> tif_clientdata
FIELD	1539:16	1539:21	12	tif -> tif_clientdata
LEAF_NODE	1539:16	1539:16	13	tif
LEAF_NODE	1539:19	1539:19	13	->
LEAF_NODE	1539:21	1539:21	13	tif_clientdata
LEAF_NODE	1539:35	1539:35	11	,
ARGUMENT	1539:36	1539:36	11	module
FIELD	1539:36	1539:36	12	module
LEAF_NODE	1539:36	1539:36	13	module
LEAF_NODE	1539:42	1539:42	11	,
ARGUMENT	1539:43	1539:43	11	"Corrupt DHT marker in JPEG data"
FIELD	1539:43	1539:43	12	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1539:43	1539:43	13	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1539:76	1539:76	11	)
LEAF_NODE	1539:77	1539:77	9	;
JUMP_STATEMENT	1540:2	1540:11	6	return ( 0 ) ;
KEYWORD	1540:2	1540:2	7	return
LEAF_NODE	1540:2	1540:2	8	return
DESTINATION	1540:8	1540:8	7	( 0 )
EXPR	1540:8	1540:10	8	( 0 )
LEAF_NODE	1540:8	1540:8	9	(
FIELD	1540:9	1540:9	9	0
LEAF_NODE	1540:9	1540:9	10	0
LEAF_NODE	1540:10	1540:10	9	)
LEAF_NODE	1540:11	1540:11	7	;
LEAF_NODE	1541:1	1541:1	5	}
SELECTION	1542:1	1543:1	3	
KEYWORD	1542:1	1542:1	4	if
LEAF_NODE	1542:1	1542:1	5	if
LEAF_NODE	1542:4	1542:4	4	(
CONDITION	1542:5	1542:5	4	sp -> subsamplingcorrect != 0
EXPR	1542:5	1542:29	5	sp -> subsamplingcorrect != 0
FIELD	1542:5	1542:9	6	sp -> subsamplingcorrect
LEAF_NODE	1542:5	1542:5	7	sp
LEAF_NODE	1542:7	1542:7	7	->
LEAF_NODE	1542:9	1542:9	7	subsamplingcorrect
EQ_OPERATOR	1542:27	1542:27	6	!=
LEAF_NODE	1542:27	1542:27	7	!=
FIELD	1542:29	1542:29	6	0
LEAF_NODE	1542:29	1542:29	7	0
LEAF_NODE	1542:30	1542:30	4	)
STATEMENTS	1543:1	1545:1	4	
LEAF_NODE	1543:1	1543:1	5	{
STATEMENTS	1544:2	1544:2	5	
EXPR_STATEMENT	1544:2	1544:23	6	OJPEGReadSkip ( sp , m - 2 ) ;
EXPR	1544:2	1544:2	7	OJPEGReadSkip ( sp , m - 2 )
FUNCTION_CALL	1544:2	1544:22	8	OJPEGReadSkip ( sp , m - 2 )
CALLEE	1544:2	1544:2	9	OJPEGReadSkip
LEAF_NODE	1544:2	1544:2	10	OJPEGReadSkip
LEAF_NODE	1544:15	1544:15	9	(
ARGUMENT	1544:16	1544:16	9	sp
FIELD	1544:16	1544:16	10	sp
LEAF_NODE	1544:16	1544:16	11	sp
LEAF_NODE	1544:18	1544:18	9	,
ARGUMENT	1544:19	1544:21	9	m - 2
FIELD	1544:19	1544:19	10	m
LEAF_NODE	1544:19	1544:19	11	m
LEAF_NODE	1544:20	1544:20	10	-
FIELD	1544:21	1544:21	10	2
LEAF_NODE	1544:21	1544:21	11	2
LEAF_NODE	1544:22	1544:22	9	)
LEAF_NODE	1544:23	1544:23	7	;
LEAF_NODE	1545:1	1545:1	5	}
SELECTION	1546:1	1547:1	3	
KEYWORD	1546:1	1546:1	4	else
LEAF_NODE	1546:1	1546:1	5	else
STATEMENTS	1547:1	1596:1	4	
LEAF_NODE	1547:1	1547:1	5	{
STATEMENTS	1548:2	1577:2	5	
EXPR_STATEMENT	1548:2	1548:23	6	na = sizeof ( uint32 ) + 2 + m ;
EXPR	1548:2	1548:2	7	na = sizeof ( uint32 ) + 2 + m
ASSIGN	1548:2	1548:5	8	na = sizeof ( uint32 ) + 2 + m
LVAL	1548:2	1548:2	9	na
FIELD	1548:2	1548:2	10	na
LEAF_NODE	1548:2	1548:2	11	na
ASSIGN_OP	1548:4	1548:4	9	=
LEAF_NODE	1548:4	1548:4	10	=
RVAL	1548:5	1548:22	9	sizeof ( uint32 ) + 2 + m
FUNCTION_CALL	1548:5	1548:18	10	sizeof ( uint32 )
CALLEE	1548:5	1548:5	11	sizeof
LEAF_NODE	1548:5	1548:5	12	sizeof
LEAF_NODE	1548:11	1548:11	11	(
ARGUMENT	1548:12	1548:12	11	uint32
FIELD	1548:12	1548:12	12	uint32
LEAF_NODE	1548:12	1548:12	13	uint32
LEAF_NODE	1548:18	1548:18	11	)
LEAF_NODE	1548:19	1548:19	10	+
FIELD	1548:20	1548:20	10	2
LEAF_NODE	1548:20	1548:20	11	2
LEAF_NODE	1548:21	1548:21	10	+
FIELD	1548:22	1548:22	10	m
LEAF_NODE	1548:22	1548:22	11	m
LEAF_NODE	1548:23	1548:23	7	;
EXPR_STATEMENT	1549:2	1549:20	6	nb = _TIFFmalloc ( na ) ;
EXPR	1549:2	1549:2	7	nb = _TIFFmalloc ( na )
ASSIGN	1549:2	1549:5	8	nb = _TIFFmalloc ( na )
LVAL	1549:2	1549:2	9	nb
FIELD	1549:2	1549:2	10	nb
LEAF_NODE	1549:2	1549:2	11	nb
ASSIGN_OP	1549:4	1549:4	9	=
LEAF_NODE	1549:4	1549:4	10	=
RVAL	1549:5	1549:5	9	_TIFFmalloc ( na )
FUNCTION_CALL	1549:5	1549:19	10	_TIFFmalloc ( na )
CALLEE	1549:5	1549:5	11	_TIFFmalloc
LEAF_NODE	1549:5	1549:5	12	_TIFFmalloc
LEAF_NODE	1549:16	1549:16	11	(
ARGUMENT	1549:17	1549:17	11	na
FIELD	1549:17	1549:17	12	na
LEAF_NODE	1549:17	1549:17	13	na
LEAF_NODE	1549:19	1549:19	11	)
LEAF_NODE	1549:20	1549:20	7	;
SELECTION	1550:2	1551:2	6	
KEYWORD	1550:2	1550:2	7	if
LEAF_NODE	1550:2	1550:2	8	if
LEAF_NODE	1550:5	1550:5	7	(
CONDITION	1550:6	1550:6	7	nb == 0
EXPR	1550:6	1550:10	8	nb == 0
FIELD	1550:6	1550:6	9	nb
LEAF_NODE	1550:6	1550:6	10	nb
EQ_OPERATOR	1550:8	1550:8	9	==
LEAF_NODE	1550:8	1550:8	10	==
FIELD	1550:10	1550:10	9	0
LEAF_NODE	1550:10	1550:10	10	0
LEAF_NODE	1550:11	1550:11	7	)
STATEMENTS	1551:2	1554:2	7	
LEAF_NODE	1551:2	1551:2	8	{
STATEMENTS	1552:3	1553:3	8	
EXPR_STATEMENT	1552:3	1552:59	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1552:3	1552:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1552:3	1552:58	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1552:3	1552:3	12	TIFFErrorExt
LEAF_NODE	1552:3	1552:3	13	TIFFErrorExt
LEAF_NODE	1552:15	1552:15	12	(
ARGUMENT	1552:16	1552:16	12	tif -> tif_clientdata
FIELD	1552:16	1552:21	13	tif -> tif_clientdata
LEAF_NODE	1552:16	1552:16	14	tif
LEAF_NODE	1552:19	1552:19	14	->
LEAF_NODE	1552:21	1552:21	14	tif_clientdata
LEAF_NODE	1552:35	1552:35	12	,
ARGUMENT	1552:36	1552:36	12	module
FIELD	1552:36	1552:36	13	module
LEAF_NODE	1552:36	1552:36	14	module
LEAF_NODE	1552:42	1552:42	12	,
ARGUMENT	1552:43	1552:43	12	"Out of memory"
FIELD	1552:43	1552:43	13	"Out of memory"
LEAF_NODE	1552:43	1552:43	14	"Out of memory"
LEAF_NODE	1552:58	1552:58	12	)
LEAF_NODE	1552:59	1552:59	10	;
JUMP_STATEMENT	1553:3	1553:12	9	return ( 0 ) ;
KEYWORD	1553:3	1553:3	10	return
LEAF_NODE	1553:3	1553:3	11	return
DESTINATION	1553:9	1553:9	10	( 0 )
EXPR	1553:9	1553:11	11	( 0 )
LEAF_NODE	1553:9	1553:9	12	(
FIELD	1553:10	1553:10	12	0
LEAF_NODE	1553:10	1553:10	13	0
LEAF_NODE	1553:11	1553:11	12	)
LEAF_NODE	1553:12	1553:12	10	;
LEAF_NODE	1554:2	1554:2	8	}
LEAF_NODE	1555:2	1555:2	6	*
EXPR_STATEMENT	1555:3	1555:17	6	( uint32 * ) nb = na ;
EXPR	1555:3	1555:3	7	( uint32 * ) nb = na
ASSIGN	1555:3	1555:15	8	( uint32 * ) nb = na
LVAL	1555:3	1555:12	9	( uint32 * ) nb
LEAF_NODE	1555:3	1555:3	10	(
TYPE_NAME	1555:4	1555:4	10	uint32
LEAF_NODE	1555:4	1555:4	11	uint32
LEAF_NODE	1555:10	1555:10	10	*
LEAF_NODE	1555:11	1555:11	10	)
FIELD	1555:12	1555:12	10	nb
LEAF_NODE	1555:12	1555:12	11	nb
ASSIGN_OP	1555:14	1555:14	9	=
LEAF_NODE	1555:14	1555:14	10	=
RVAL	1555:15	1555:15	9	na
FIELD	1555:15	1555:15	10	na
LEAF_NODE	1555:15	1555:15	11	na
LEAF_NODE	1555:17	1555:17	7	;
EXPR_STATEMENT	1556:2	1556:24	6	nb [ sizeof ( uint32 ) ] = 255 ;
EXPR	1556:2	1556:2	7	nb [ sizeof ( uint32 ) ] = 255
ASSIGN	1556:2	1556:21	8	nb [ sizeof ( uint32 ) ] = 255
LVAL	1556:2	1556:2	9	nb [ sizeof ( uint32 ) ]
FIELD	1556:2	1556:19	10	nb [ sizeof ( uint32 ) ]
LEAF_NODE	1556:2	1556:2	11	nb
LEAF_NODE	1556:4	1556:4	11	[
EXPR	1556:5	1556:5	11	sizeof ( uint32 )
FUNCTION_CALL	1556:5	1556:18	12	sizeof ( uint32 )
CALLEE	1556:5	1556:5	13	sizeof
LEAF_NODE	1556:5	1556:5	14	sizeof
LEAF_NODE	1556:11	1556:11	13	(
ARGUMENT	1556:12	1556:12	13	uint32
FIELD	1556:12	1556:12	14	uint32
LEAF_NODE	1556:12	1556:12	15	uint32
LEAF_NODE	1556:18	1556:18	13	)
LEAF_NODE	1556:19	1556:19	11	]
ASSIGN_OP	1556:20	1556:20	9	=
LEAF_NODE	1556:20	1556:20	10	=
RVAL	1556:21	1556:21	9	255
FIELD	1556:21	1556:21	10	255
LEAF_NODE	1556:21	1556:21	11	255
LEAF_NODE	1556:24	1556:24	7	;
EXPR_STATEMENT	1557:2	1557:38	6	nb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT ;
EXPR	1557:2	1557:2	7	nb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT
ASSIGN	1557:2	1557:23	8	nb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT
LVAL	1557:2	1557:2	9	nb [ sizeof ( uint32 ) + 1 ]
FIELD	1557:2	1557:21	10	nb [ sizeof ( uint32 ) + 1 ]
LEAF_NODE	1557:2	1557:2	11	nb
LEAF_NODE	1557:4	1557:4	11	[
EXPR	1557:5	1557:20	11	sizeof ( uint32 ) + 1
FUNCTION_CALL	1557:5	1557:18	12	sizeof ( uint32 )
CALLEE	1557:5	1557:5	13	sizeof
LEAF_NODE	1557:5	1557:5	14	sizeof
LEAF_NODE	1557:11	1557:11	13	(
ARGUMENT	1557:12	1557:12	13	uint32
FIELD	1557:12	1557:12	14	uint32
LEAF_NODE	1557:12	1557:12	15	uint32
LEAF_NODE	1557:18	1557:18	13	)
LEAF_NODE	1557:19	1557:19	12	+
FIELD	1557:20	1557:20	12	1
LEAF_NODE	1557:20	1557:20	13	1
LEAF_NODE	1557:21	1557:21	11	]
ASSIGN_OP	1557:22	1557:22	9	=
LEAF_NODE	1557:22	1557:22	10	=
RVAL	1557:23	1557:23	9	JPEG_MARKER_DHT
FIELD	1557:23	1557:23	10	JPEG_MARKER_DHT
LEAF_NODE	1557:23	1557:23	11	JPEG_MARKER_DHT
LEAF_NODE	1557:38	1557:38	7	;
EXPR_STATEMENT	1558:2	1558:29	6	nb [ sizeof ( uint32 ) + 2 ] = ( m >> 8 ) ;
EXPR	1558:2	1558:2	7	nb [ sizeof ( uint32 ) + 2 ] = ( m >> 8 )
ASSIGN	1558:2	1558:23	8	nb [ sizeof ( uint32 ) + 2 ] = ( m >> 8 )
LVAL	1558:2	1558:2	9	nb [ sizeof ( uint32 ) + 2 ]
FIELD	1558:2	1558:21	10	nb [ sizeof ( uint32 ) + 2 ]
LEAF_NODE	1558:2	1558:2	11	nb
LEAF_NODE	1558:4	1558:4	11	[
EXPR	1558:5	1558:20	11	sizeof ( uint32 ) + 2
FUNCTION_CALL	1558:5	1558:18	12	sizeof ( uint32 )
CALLEE	1558:5	1558:5	13	sizeof
LEAF_NODE	1558:5	1558:5	14	sizeof
LEAF_NODE	1558:11	1558:11	13	(
ARGUMENT	1558:12	1558:12	13	uint32
FIELD	1558:12	1558:12	14	uint32
LEAF_NODE	1558:12	1558:12	15	uint32
LEAF_NODE	1558:18	1558:18	13	)
LEAF_NODE	1558:19	1558:19	12	+
FIELD	1558:20	1558:20	12	2
LEAF_NODE	1558:20	1558:20	13	2
LEAF_NODE	1558:21	1558:21	11	]
ASSIGN_OP	1558:22	1558:22	9	=
LEAF_NODE	1558:22	1558:22	10	=
RVAL	1558:23	1558:28	9	( m >> 8 )
LEAF_NODE	1558:23	1558:23	10	(
FIELD	1558:24	1558:24	10	m
LEAF_NODE	1558:24	1558:24	11	m
LEAF_NODE	1558:25	1558:25	10	>>
FIELD	1558:27	1558:27	10	8
LEAF_NODE	1558:27	1558:27	11	8
LEAF_NODE	1558:28	1558:28	10	)
LEAF_NODE	1558:29	1558:29	7	;
EXPR_STATEMENT	1559:2	1559:30	6	nb [ sizeof ( uint32 ) + 3 ] = ( m & 255 ) ;
EXPR	1559:2	1559:2	7	nb [ sizeof ( uint32 ) + 3 ] = ( m & 255 )
ASSIGN	1559:2	1559:23	8	nb [ sizeof ( uint32 ) + 3 ] = ( m & 255 )
LVAL	1559:2	1559:2	9	nb [ sizeof ( uint32 ) + 3 ]
FIELD	1559:2	1559:21	10	nb [ sizeof ( uint32 ) + 3 ]
LEAF_NODE	1559:2	1559:2	11	nb
LEAF_NODE	1559:4	1559:4	11	[
EXPR	1559:5	1559:20	11	sizeof ( uint32 ) + 3
FUNCTION_CALL	1559:5	1559:18	12	sizeof ( uint32 )
CALLEE	1559:5	1559:5	13	sizeof
LEAF_NODE	1559:5	1559:5	14	sizeof
LEAF_NODE	1559:11	1559:11	13	(
ARGUMENT	1559:12	1559:12	13	uint32
FIELD	1559:12	1559:12	14	uint32
LEAF_NODE	1559:12	1559:12	15	uint32
LEAF_NODE	1559:18	1559:18	13	)
LEAF_NODE	1559:19	1559:19	12	+
FIELD	1559:20	1559:20	12	3
LEAF_NODE	1559:20	1559:20	13	3
LEAF_NODE	1559:21	1559:21	11	]
ASSIGN_OP	1559:22	1559:22	9	=
LEAF_NODE	1559:22	1559:22	10	=
RVAL	1559:23	1559:29	9	( m & 255 )
LEAF_NODE	1559:23	1559:23	10	(
FIELD	1559:24	1559:24	10	m
LEAF_NODE	1559:24	1559:24	11	m
LEAF_NODE	1559:25	1559:25	10	&
FIELD	1559:26	1559:26	10	255
LEAF_NODE	1559:26	1559:26	11	255
LEAF_NODE	1559:29	1559:29	10	)
LEAF_NODE	1559:30	1559:30	7	;
SELECTION	1560:2	1560:55	6	
KEYWORD	1560:2	1560:2	7	if
LEAF_NODE	1560:2	1560:2	8	if
LEAF_NODE	1560:5	1560:5	7	(
CONDITION	1560:6	1560:6	7	OJPEGReadBlock ( sp , m - 2 , & nb [ sizeof ( uint32 ) + 4 ] ) == 0
EXPR	1560:6	1560:52	8	OJPEGReadBlock ( sp , m - 2 , & nb [ sizeof ( uint32 ) + 4 ] ) == 0
FUNCTION_CALL	1560:6	1560:49	9	OJPEGReadBlock ( sp , m - 2 , & nb [ sizeof ( uint32 ) + 4 ] )
CALLEE	1560:6	1560:6	10	OJPEGReadBlock
LEAF_NODE	1560:6	1560:6	11	OJPEGReadBlock
LEAF_NODE	1560:20	1560:20	10	(
ARGUMENT	1560:21	1560:21	10	sp
FIELD	1560:21	1560:21	11	sp
LEAF_NODE	1560:21	1560:21	12	sp
LEAF_NODE	1560:23	1560:23	10	,
ARGUMENT	1560:24	1560:26	10	m - 2
FIELD	1560:24	1560:24	11	m
LEAF_NODE	1560:24	1560:24	12	m
LEAF_NODE	1560:25	1560:25	11	-
FIELD	1560:26	1560:26	11	2
LEAF_NODE	1560:26	1560:26	12	2
LEAF_NODE	1560:27	1560:27	10	,
ARGUMENT	1560:28	1560:28	10	& nb [ sizeof ( uint32 ) + 4 ]
UNARY_EXPR	1560:28	1560:29	11	& nb [ sizeof ( uint32 ) + 4 ]
UNARY_OPERATOR	1560:28	1560:28	12	&
LEAF_NODE	1560:28	1560:28	13	&
FIELD	1560:29	1560:48	12	nb [ sizeof ( uint32 ) + 4 ]
LEAF_NODE	1560:29	1560:29	13	nb
LEAF_NODE	1560:31	1560:31	13	[
EXPR	1560:32	1560:47	13	sizeof ( uint32 ) + 4
FUNCTION_CALL	1560:32	1560:45	14	sizeof ( uint32 )
CALLEE	1560:32	1560:32	15	sizeof
LEAF_NODE	1560:32	1560:32	16	sizeof
LEAF_NODE	1560:38	1560:38	15	(
ARGUMENT	1560:39	1560:39	15	uint32
FIELD	1560:39	1560:39	16	uint32
LEAF_NODE	1560:39	1560:39	17	uint32
LEAF_NODE	1560:45	1560:45	15	)
LEAF_NODE	1560:46	1560:46	14	+
FIELD	1560:47	1560:47	14	4
LEAF_NODE	1560:47	1560:47	15	4
LEAF_NODE	1560:48	1560:48	13	]
LEAF_NODE	1560:49	1560:49	10	)
EQ_OPERATOR	1560:50	1560:50	9	==
LEAF_NODE	1560:50	1560:50	10	==
FIELD	1560:52	1560:52	9	0
LEAF_NODE	1560:52	1560:52	10	0
LEAF_NODE	1560:53	1560:53	7	)
STATEMENTS	1560:55	1563:16	7	
LEAF_NODE	1560:55	1560:55	8	{
STATEMENTS	1561:24	1562:3	8	
EXPR_STATEMENT	1561:24	1561:37	9	_TIFFfree ( nb ) ;
EXPR	1561:24	1561:24	10	_TIFFfree ( nb )
FUNCTION_CALL	1561:24	1561:36	11	_TIFFfree ( nb )
CALLEE	1561:24	1561:24	12	_TIFFfree
LEAF_NODE	1561:24	1561:24	13	_TIFFfree
LEAF_NODE	1561:33	1561:33	12	(
ARGUMENT	1561:34	1561:34	12	nb
FIELD	1561:34	1561:34	13	nb
LEAF_NODE	1561:34	1561:34	14	nb
LEAF_NODE	1561:36	1561:36	12	)
LEAF_NODE	1561:37	1561:37	10	;
JUMP_STATEMENT	1562:3	1562:12	9	return ( 0 ) ;
KEYWORD	1562:3	1562:3	10	return
LEAF_NODE	1562:3	1562:3	11	return
DESTINATION	1562:9	1562:9	10	( 0 )
EXPR	1562:9	1562:11	11	( 0 )
LEAF_NODE	1562:9	1562:9	12	(
FIELD	1562:10	1562:10	12	0
LEAF_NODE	1562:10	1562:10	13	0
LEAF_NODE	1562:11	1562:11	12	)
LEAF_NODE	1562:12	1562:12	10	;
LEAF_NODE	1563:16	1563:16	8	}
EXPR_STATEMENT	1564:2	1564:24	6	o = nb [ sizeof ( uint32 ) + 4 ] ;
EXPR	1564:2	1564:2	7	o = nb [ sizeof ( uint32 ) + 4 ]
ASSIGN	1564:2	1564:4	8	o = nb [ sizeof ( uint32 ) + 4 ]
LVAL	1564:2	1564:2	9	o
FIELD	1564:2	1564:2	10	o
LEAF_NODE	1564:2	1564:2	11	o
ASSIGN_OP	1564:3	1564:3	9	=
LEAF_NODE	1564:3	1564:3	10	=
RVAL	1564:4	1564:4	9	nb [ sizeof ( uint32 ) + 4 ]
FIELD	1564:4	1564:23	10	nb [ sizeof ( uint32 ) + 4 ]
LEAF_NODE	1564:4	1564:4	11	nb
LEAF_NODE	1564:6	1564:6	11	[
EXPR	1564:7	1564:22	11	sizeof ( uint32 ) + 4
FUNCTION_CALL	1564:7	1564:20	12	sizeof ( uint32 )
CALLEE	1564:7	1564:7	13	sizeof
LEAF_NODE	1564:7	1564:7	14	sizeof
LEAF_NODE	1564:13	1564:13	13	(
ARGUMENT	1564:14	1564:14	13	uint32
FIELD	1564:14	1564:14	14	uint32
LEAF_NODE	1564:14	1564:14	15	uint32
LEAF_NODE	1564:20	1564:20	13	)
LEAF_NODE	1564:21	1564:21	12	+
FIELD	1564:22	1564:22	12	4
LEAF_NODE	1564:22	1564:22	13	4
LEAF_NODE	1564:23	1564:23	11	]
LEAF_NODE	1564:24	1564:24	7	;
SELECTION	1565:2	1566:2	6	
KEYWORD	1565:2	1565:2	7	if
LEAF_NODE	1565:2	1565:2	8	if
LEAF_NODE	1565:5	1565:5	7	(
CONDITION	1565:6	1565:6	7	( o & 240 ) == 0
EXPR	1565:6	1565:15	8	( o & 240 ) == 0
LEAF_NODE	1565:6	1565:6	9	(
FIELD	1565:7	1565:7	9	o
LEAF_NODE	1565:7	1565:7	10	o
LEAF_NODE	1565:8	1565:8	9	&
FIELD	1565:9	1565:9	9	240
LEAF_NODE	1565:9	1565:9	10	240
LEAF_NODE	1565:12	1565:12	9	)
EQ_OPERATOR	1565:13	1565:13	9	==
LEAF_NODE	1565:13	1565:13	10	==
FIELD	1565:15	1565:15	9	0
LEAF_NODE	1565:15	1565:15	10	0
LEAF_NODE	1565:16	1565:16	7	)
STATEMENTS	1566:2	1576:2	7	
LEAF_NODE	1566:2	1566:2	8	{
STATEMENTS	1567:3	1575:3	8	
SELECTION	1567:3	1568:3	9	
KEYWORD	1567:3	1567:3	10	if
LEAF_NODE	1567:3	1567:3	11	if
LEAF_NODE	1567:6	1567:6	10	(
CONDITION	1567:7	1567:7	10	3 < o
EXPR	1567:7	1567:9	11	3 < o
FIELD	1567:7	1567:7	12	3
LEAF_NODE	1567:7	1567:7	13	3
REL_OPERATOR	1567:8	1567:8	12	<
LEAF_NODE	1567:8	1567:8	13	<
FIELD	1567:9	1567:9	12	o
LEAF_NODE	1567:9	1567:9	13	o
LEAF_NODE	1567:10	1567:10	10	)
STATEMENTS	1568:3	1572:3	10	
LEAF_NODE	1568:3	1568:3	11	{
STATEMENTS	1569:4	1571:4	11	
EXPR_STATEMENT	1569:4	1569:78	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" ) ;
EXPR	1569:4	1569:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
FUNCTION_CALL	1569:4	1569:77	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
CALLEE	1569:4	1569:4	15	TIFFErrorExt
LEAF_NODE	1569:4	1569:4	16	TIFFErrorExt
LEAF_NODE	1569:16	1569:16	15	(
ARGUMENT	1569:17	1569:17	15	tif -> tif_clientdata
FIELD	1569:17	1569:22	16	tif -> tif_clientdata
LEAF_NODE	1569:17	1569:17	17	tif
LEAF_NODE	1569:20	1569:20	17	->
LEAF_NODE	1569:22	1569:22	17	tif_clientdata
LEAF_NODE	1569:36	1569:36	15	,
ARGUMENT	1569:37	1569:37	15	module
FIELD	1569:37	1569:37	16	module
LEAF_NODE	1569:37	1569:37	17	module
LEAF_NODE	1569:43	1569:43	15	,
ARGUMENT	1569:44	1569:44	15	"Corrupt DHT marker in JPEG data"
FIELD	1569:44	1569:44	16	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1569:44	1569:44	17	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1569:77	1569:77	15	)
LEAF_NODE	1569:78	1569:78	13	;
EXPR_STATEMENT	1570:32	1570:45	12	_TIFFfree ( nb ) ;
EXPR	1570:32	1570:32	13	_TIFFfree ( nb )
FUNCTION_CALL	1570:32	1570:44	14	_TIFFfree ( nb )
CALLEE	1570:32	1570:32	15	_TIFFfree
LEAF_NODE	1570:32	1570:32	16	_TIFFfree
LEAF_NODE	1570:41	1570:41	15	(
ARGUMENT	1570:42	1570:42	15	nb
FIELD	1570:42	1570:42	16	nb
LEAF_NODE	1570:42	1570:42	17	nb
LEAF_NODE	1570:44	1570:44	15	)
LEAF_NODE	1570:45	1570:45	13	;
JUMP_STATEMENT	1571:4	1571:13	12	return ( 0 ) ;
KEYWORD	1571:4	1571:4	13	return
LEAF_NODE	1571:4	1571:4	14	return
DESTINATION	1571:10	1571:10	13	( 0 )
EXPR	1571:10	1571:12	14	( 0 )
LEAF_NODE	1571:10	1571:10	15	(
FIELD	1571:11	1571:11	15	0
LEAF_NODE	1571:11	1571:11	16	0
LEAF_NODE	1571:12	1571:12	15	)
LEAF_NODE	1571:13	1571:13	13	;
LEAF_NODE	1572:3	1572:3	11	}
SELECTION	1573:3	1574:4	9	
KEYWORD	1573:3	1573:3	10	if
LEAF_NODE	1573:3	1573:3	11	if
LEAF_NODE	1573:6	1573:6	10	(
CONDITION	1573:7	1573:7	10	sp -> dctable [ o ] != 0
EXPR	1573:7	1573:23	11	sp -> dctable [ o ] != 0
FIELD	1573:7	1573:20	12	sp -> dctable [ o ]
LEAF_NODE	1573:7	1573:7	13	sp
LEAF_NODE	1573:9	1573:9	13	->
LEAF_NODE	1573:11	1573:11	13	dctable
LEAF_NODE	1573:18	1573:18	13	[
EXPR	1573:19	1573:19	13	o
FIELD	1573:19	1573:19	14	o
LEAF_NODE	1573:19	1573:19	15	o
LEAF_NODE	1573:20	1573:20	13	]
EQ_OPERATOR	1573:21	1573:21	12	!=
LEAF_NODE	1573:21	1573:21	13	!=
FIELD	1573:23	1573:23	12	0
LEAF_NODE	1573:23	1573:23	13	0
LEAF_NODE	1573:24	1573:24	10	)
STATEMENTS	1574:4	1574:4	10	
EXPR_STATEMENT	1574:4	1574:29	11	_TIFFfree ( sp -> dctable [ o ] ) ;
EXPR	1574:4	1574:4	12	_TIFFfree ( sp -> dctable [ o ] )
FUNCTION_CALL	1574:4	1574:28	13	_TIFFfree ( sp -> dctable [ o ] )
CALLEE	1574:4	1574:4	14	_TIFFfree
LEAF_NODE	1574:4	1574:4	15	_TIFFfree
LEAF_NODE	1574:13	1574:13	14	(
ARGUMENT	1574:14	1574:14	14	sp -> dctable [ o ]
FIELD	1574:14	1574:27	15	sp -> dctable [ o ]
LEAF_NODE	1574:14	1574:14	16	sp
LEAF_NODE	1574:16	1574:16	16	->
LEAF_NODE	1574:18	1574:18	16	dctable
LEAF_NODE	1574:25	1574:25	16	[
EXPR	1574:26	1574:26	16	o
FIELD	1574:26	1574:26	17	o
LEAF_NODE	1574:26	1574:26	18	o
LEAF_NODE	1574:27	1574:27	16	]
LEAF_NODE	1574:28	1574:28	14	)
LEAF_NODE	1574:29	1574:29	12	;
EXPR_STATEMENT	1575:3	1575:20	9	sp -> dctable [ o ] = nb ;
EXPR	1575:3	1575:3	10	sp -> dctable [ o ] = nb
ASSIGN	1575:3	1575:18	11	sp -> dctable [ o ] = nb
LVAL	1575:3	1575:3	12	sp -> dctable [ o ]
FIELD	1575:3	1575:16	13	sp -> dctable [ o ]
LEAF_NODE	1575:3	1575:3	14	sp
LEAF_NODE	1575:5	1575:5	14	->
LEAF_NODE	1575:7	1575:7	14	dctable
LEAF_NODE	1575:14	1575:14	14	[
EXPR	1575:15	1575:15	14	o
FIELD	1575:15	1575:15	15	o
LEAF_NODE	1575:15	1575:15	16	o
LEAF_NODE	1575:16	1575:16	14	]
ASSIGN_OP	1575:17	1575:17	12	=
LEAF_NODE	1575:17	1575:17	13	=
RVAL	1575:18	1575:18	12	nb
FIELD	1575:18	1575:18	13	nb
LEAF_NODE	1575:18	1575:18	14	nb
LEAF_NODE	1575:20	1575:20	10	;
LEAF_NODE	1576:2	1576:2	8	}
SELECTION	1577:2	1578:2	6	
KEYWORD	1577:2	1577:2	7	else
LEAF_NODE	1577:2	1577:2	8	else
STATEMENTS	1578:2	1595:2	7	
LEAF_NODE	1578:2	1578:2	8	{
STATEMENTS	1579:3	1594:3	8	
SELECTION	1579:3	1580:3	9	
KEYWORD	1579:3	1579:3	10	if
LEAF_NODE	1579:3	1579:3	11	if
LEAF_NODE	1579:6	1579:6	10	(
CONDITION	1579:7	1579:7	10	( o & 240 ) != 16
EXPR	1579:7	1579:16	11	( o & 240 ) != 16
LEAF_NODE	1579:7	1579:7	12	(
FIELD	1579:8	1579:8	12	o
LEAF_NODE	1579:8	1579:8	13	o
LEAF_NODE	1579:9	1579:9	12	&
FIELD	1579:10	1579:10	12	240
LEAF_NODE	1579:10	1579:10	13	240
LEAF_NODE	1579:13	1579:13	12	)
EQ_OPERATOR	1579:14	1579:14	12	!=
LEAF_NODE	1579:14	1579:14	13	!=
FIELD	1579:16	1579:16	12	16
LEAF_NODE	1579:16	1579:16	13	16
LEAF_NODE	1579:18	1579:18	10	)
STATEMENTS	1580:3	1584:3	10	
LEAF_NODE	1580:3	1580:3	11	{
STATEMENTS	1581:4	1583:4	11	
EXPR_STATEMENT	1581:4	1581:78	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" ) ;
EXPR	1581:4	1581:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
FUNCTION_CALL	1581:4	1581:77	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
CALLEE	1581:4	1581:4	15	TIFFErrorExt
LEAF_NODE	1581:4	1581:4	16	TIFFErrorExt
LEAF_NODE	1581:16	1581:16	15	(
ARGUMENT	1581:17	1581:17	15	tif -> tif_clientdata
FIELD	1581:17	1581:22	16	tif -> tif_clientdata
LEAF_NODE	1581:17	1581:17	17	tif
LEAF_NODE	1581:20	1581:20	17	->
LEAF_NODE	1581:22	1581:22	17	tif_clientdata
LEAF_NODE	1581:36	1581:36	15	,
ARGUMENT	1581:37	1581:37	15	module
FIELD	1581:37	1581:37	16	module
LEAF_NODE	1581:37	1581:37	17	module
LEAF_NODE	1581:43	1581:43	15	,
ARGUMENT	1581:44	1581:44	15	"Corrupt DHT marker in JPEG data"
FIELD	1581:44	1581:44	16	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1581:44	1581:44	17	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1581:77	1581:77	15	)
LEAF_NODE	1581:78	1581:78	13	;
EXPR_STATEMENT	1582:32	1582:45	12	_TIFFfree ( nb ) ;
EXPR	1582:32	1582:32	13	_TIFFfree ( nb )
FUNCTION_CALL	1582:32	1582:44	14	_TIFFfree ( nb )
CALLEE	1582:32	1582:32	15	_TIFFfree
LEAF_NODE	1582:32	1582:32	16	_TIFFfree
LEAF_NODE	1582:41	1582:41	15	(
ARGUMENT	1582:42	1582:42	15	nb
FIELD	1582:42	1582:42	16	nb
LEAF_NODE	1582:42	1582:42	17	nb
LEAF_NODE	1582:44	1582:44	15	)
LEAF_NODE	1582:45	1582:45	13	;
JUMP_STATEMENT	1583:4	1583:13	12	return ( 0 ) ;
KEYWORD	1583:4	1583:4	13	return
LEAF_NODE	1583:4	1583:4	14	return
DESTINATION	1583:10	1583:10	13	( 0 )
EXPR	1583:10	1583:12	14	( 0 )
LEAF_NODE	1583:10	1583:10	15	(
FIELD	1583:11	1583:11	15	0
LEAF_NODE	1583:11	1583:11	16	0
LEAF_NODE	1583:12	1583:12	15	)
LEAF_NODE	1583:13	1583:13	13	;
LEAF_NODE	1584:3	1584:3	11	}
EXPR_STATEMENT	1585:3	1585:8	9	o &= 15 ;
EXPR	1585:3	1585:3	10	o &= 15
ASSIGN	1585:3	1585:6	11	o &= 15
LVAL	1585:3	1585:3	12	o
FIELD	1585:3	1585:3	13	o
LEAF_NODE	1585:3	1585:3	14	o
ASSIGN_OP	1585:4	1585:4	12	&=
LEAF_NODE	1585:4	1585:4	13	&=
RVAL	1585:6	1585:6	12	15
FIELD	1585:6	1585:6	13	15
LEAF_NODE	1585:6	1585:6	14	15
LEAF_NODE	1585:8	1585:8	10	;
SELECTION	1586:3	1587:3	9	
KEYWORD	1586:3	1586:3	10	if
LEAF_NODE	1586:3	1586:3	11	if
LEAF_NODE	1586:6	1586:6	10	(
CONDITION	1586:7	1586:7	10	3 < o
EXPR	1586:7	1586:9	11	3 < o
FIELD	1586:7	1586:7	12	3
LEAF_NODE	1586:7	1586:7	13	3
REL_OPERATOR	1586:8	1586:8	12	<
LEAF_NODE	1586:8	1586:8	13	<
FIELD	1586:9	1586:9	12	o
LEAF_NODE	1586:9	1586:9	13	o
LEAF_NODE	1586:10	1586:10	10	)
STATEMENTS	1587:3	1591:3	10	
LEAF_NODE	1587:3	1587:3	11	{
STATEMENTS	1588:4	1590:4	11	
EXPR_STATEMENT	1588:4	1588:78	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" ) ;
EXPR	1588:4	1588:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
FUNCTION_CALL	1588:4	1588:77	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt DHT marker in JPEG data" )
CALLEE	1588:4	1588:4	15	TIFFErrorExt
LEAF_NODE	1588:4	1588:4	16	TIFFErrorExt
LEAF_NODE	1588:16	1588:16	15	(
ARGUMENT	1588:17	1588:17	15	tif -> tif_clientdata
FIELD	1588:17	1588:22	16	tif -> tif_clientdata
LEAF_NODE	1588:17	1588:17	17	tif
LEAF_NODE	1588:20	1588:20	17	->
LEAF_NODE	1588:22	1588:22	17	tif_clientdata
LEAF_NODE	1588:36	1588:36	15	,
ARGUMENT	1588:37	1588:37	15	module
FIELD	1588:37	1588:37	16	module
LEAF_NODE	1588:37	1588:37	17	module
LEAF_NODE	1588:43	1588:43	15	,
ARGUMENT	1588:44	1588:44	15	"Corrupt DHT marker in JPEG data"
FIELD	1588:44	1588:44	16	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1588:44	1588:44	17	"Corrupt DHT marker in JPEG data"
LEAF_NODE	1588:77	1588:77	15	)
LEAF_NODE	1588:78	1588:78	13	;
EXPR_STATEMENT	1589:32	1589:45	12	_TIFFfree ( nb ) ;
EXPR	1589:32	1589:32	13	_TIFFfree ( nb )
FUNCTION_CALL	1589:32	1589:44	14	_TIFFfree ( nb )
CALLEE	1589:32	1589:32	15	_TIFFfree
LEAF_NODE	1589:32	1589:32	16	_TIFFfree
LEAF_NODE	1589:41	1589:41	15	(
ARGUMENT	1589:42	1589:42	15	nb
FIELD	1589:42	1589:42	16	nb
LEAF_NODE	1589:42	1589:42	17	nb
LEAF_NODE	1589:44	1589:44	15	)
LEAF_NODE	1589:45	1589:45	13	;
JUMP_STATEMENT	1590:4	1590:13	12	return ( 0 ) ;
KEYWORD	1590:4	1590:4	13	return
LEAF_NODE	1590:4	1590:4	14	return
DESTINATION	1590:10	1590:10	13	( 0 )
EXPR	1590:10	1590:12	14	( 0 )
LEAF_NODE	1590:10	1590:10	15	(
FIELD	1590:11	1590:11	15	0
LEAF_NODE	1590:11	1590:11	16	0
LEAF_NODE	1590:12	1590:12	15	)
LEAF_NODE	1590:13	1590:13	13	;
LEAF_NODE	1591:3	1591:3	11	}
SELECTION	1592:3	1593:4	9	
KEYWORD	1592:3	1592:3	10	if
LEAF_NODE	1592:3	1592:3	11	if
LEAF_NODE	1592:6	1592:6	10	(
CONDITION	1592:7	1592:7	10	sp -> actable [ o ] != 0
EXPR	1592:7	1592:23	11	sp -> actable [ o ] != 0
FIELD	1592:7	1592:20	12	sp -> actable [ o ]
LEAF_NODE	1592:7	1592:7	13	sp
LEAF_NODE	1592:9	1592:9	13	->
LEAF_NODE	1592:11	1592:11	13	actable
LEAF_NODE	1592:18	1592:18	13	[
EXPR	1592:19	1592:19	13	o
FIELD	1592:19	1592:19	14	o
LEAF_NODE	1592:19	1592:19	15	o
LEAF_NODE	1592:20	1592:20	13	]
EQ_OPERATOR	1592:21	1592:21	12	!=
LEAF_NODE	1592:21	1592:21	13	!=
FIELD	1592:23	1592:23	12	0
LEAF_NODE	1592:23	1592:23	13	0
LEAF_NODE	1592:24	1592:24	10	)
STATEMENTS	1593:4	1593:4	10	
EXPR_STATEMENT	1593:4	1593:29	11	_TIFFfree ( sp -> actable [ o ] ) ;
EXPR	1593:4	1593:4	12	_TIFFfree ( sp -> actable [ o ] )
FUNCTION_CALL	1593:4	1593:28	13	_TIFFfree ( sp -> actable [ o ] )
CALLEE	1593:4	1593:4	14	_TIFFfree
LEAF_NODE	1593:4	1593:4	15	_TIFFfree
LEAF_NODE	1593:13	1593:13	14	(
ARGUMENT	1593:14	1593:14	14	sp -> actable [ o ]
FIELD	1593:14	1593:27	15	sp -> actable [ o ]
LEAF_NODE	1593:14	1593:14	16	sp
LEAF_NODE	1593:16	1593:16	16	->
LEAF_NODE	1593:18	1593:18	16	actable
LEAF_NODE	1593:25	1593:25	16	[
EXPR	1593:26	1593:26	16	o
FIELD	1593:26	1593:26	17	o
LEAF_NODE	1593:26	1593:26	18	o
LEAF_NODE	1593:27	1593:27	16	]
LEAF_NODE	1593:28	1593:28	14	)
LEAF_NODE	1593:29	1593:29	12	;
EXPR_STATEMENT	1594:3	1594:20	9	sp -> actable [ o ] = nb ;
EXPR	1594:3	1594:3	10	sp -> actable [ o ] = nb
ASSIGN	1594:3	1594:18	11	sp -> actable [ o ] = nb
LVAL	1594:3	1594:3	12	sp -> actable [ o ]
FIELD	1594:3	1594:16	13	sp -> actable [ o ]
LEAF_NODE	1594:3	1594:3	14	sp
LEAF_NODE	1594:5	1594:5	14	->
LEAF_NODE	1594:7	1594:7	14	actable
LEAF_NODE	1594:14	1594:14	14	[
EXPR	1594:15	1594:15	14	o
FIELD	1594:15	1594:15	15	o
LEAF_NODE	1594:15	1594:15	16	o
LEAF_NODE	1594:16	1594:16	14	]
ASSIGN_OP	1594:17	1594:17	12	=
LEAF_NODE	1594:17	1594:17	13	=
RVAL	1594:18	1594:18	12	nb
FIELD	1594:18	1594:18	13	nb
LEAF_NODE	1594:18	1594:18	14	nb
LEAF_NODE	1594:20	1594:20	10	;
LEAF_NODE	1595:2	1595:2	8	}
LEAF_NODE	1596:1	1596:1	5	}
JUMP_STATEMENT	1597:1	1597:10	3	return ( 1 ) ;
KEYWORD	1597:1	1597:1	4	return
LEAF_NODE	1597:1	1597:1	5	return
DESTINATION	1597:7	1597:7	4	( 1 )
EXPR	1597:7	1597:9	5	( 1 )
LEAF_NODE	1597:7	1597:7	6	(
FIELD	1597:8	1597:8	6	1
LEAF_NODE	1597:8	1597:8	7	1
LEAF_NODE	1597:9	1597:9	6	)
LEAF_NODE	1597:10	1597:10	4	;
LEAF_NODE	1598:0	1598:0	2	}
FUNCTION_DEF	1600:0	1750:0	1	
RETURN_TYPE	1600:0	1600:7	2	static int
LEAF_NODE	1600:0	1600:0	3	static
TYPE_NAME	1600:7	1600:7	3	int
LEAF_NODE	1600:7	1600:7	4	int
FUNCTION_NAME	1601:0	1601:0	2	OJPEGReadHeaderInfoSecStreamSof
LEAF_NODE	1601:0	1601:0	3	OJPEGReadHeaderInfoSecStreamSof
PARAMETER_LIST	1601:31	1601:58	2	( TIFF * tif , uint8 marker_id )
LEAF_NODE	1601:31	1601:31	3	(
PARAMETER_DECL	1601:32	1601:38	3	TIFF * tif
TYPE	1601:32	1601:36	4	TIFF *
TYPE_NAME	1601:32	1601:32	5	TIFF
LEAF_NODE	1601:32	1601:32	6	TIFF
POINTER	1601:36	1601:36	5	*
LEAF_NODE	1601:36	1601:36	6	*
NAME	1601:38	1601:38	4	tif
LEAF_NODE	1601:38	1601:38	5	tif
LEAF_NODE	1601:41	1601:41	3	,
PARAMETER_DECL	1601:43	1601:49	3	uint8 marker_id
TYPE	1601:43	1601:43	4	uint8
TYPE_NAME	1601:43	1601:43	5	uint8
LEAF_NODE	1601:43	1601:43	6	uint8
NAME	1601:49	1601:49	4	marker_id
LEAF_NODE	1601:49	1601:49	5	marker_id
LEAF_NODE	1601:58	1601:58	3	)
LEAF_NODE	1602:0	1602:0	2	{
STATEMENTS	1604:1	1749:1	2	
LEAF_NODE	1604:1	1604:1	3	static
SIMPLE_DECL	1604:8	1604:61	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamSof" ;
VAR_DECL	1604:8	1604:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamSof"
TYPE	1604:8	1604:25	5	const char [ ]
TYPE_NAME	1604:8	1604:14	6	const char
LEAF_NODE	1604:8	1604:8	7	const
LEAF_NODE	1604:14	1604:14	7	char
TYPE_SUFFIX	1604:25	1604:26	6	[ ]
LEAF_NODE	1604:25	1604:25	7	[
LEAF_NODE	1604:26	1604:26	7	]
NAME	1604:19	1604:19	5	module
LEAF_NODE	1604:19	1604:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1604:19	1604:19	5	module = "OJPEGReadHeaderInfoSecStreamSof"
ASSIGN	1604:19	1604:28	6	module = "OJPEGReadHeaderInfoSecStreamSof"
LVAL	1604:19	1604:19	7	module
NAME	1604:19	1604:19	8	module
LEAF_NODE	1604:19	1604:19	9	module
ASSIGN_OP	1604:27	1604:27	7	=
LEAF_NODE	1604:27	1604:27	8	=
RVAL	1604:28	1604:28	7	"OJPEGReadHeaderInfoSecStreamSof"
FIELD	1604:28	1604:28	8	"OJPEGReadHeaderInfoSecStreamSof"
LEAF_NODE	1604:28	1604:28	9	"OJPEGReadHeaderInfoSecStreamSof"
LEAF_NODE	1604:61	1604:61	4	;
SIMPLE_DECL	1605:1	1605:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1605:1	1605:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1605:1	1605:11	5	OJPEGState *
TYPE_NAME	1605:1	1605:1	6	OJPEGState
LEAF_NODE	1605:1	1605:1	7	OJPEGState
POINTER	1605:11	1605:11	6	*
LEAF_NODE	1605:11	1605:11	7	*
NAME	1605:13	1605:13	5	sp
LEAF_NODE	1605:13	1605:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1605:13	1605:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1605:13	1605:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1605:13	1605:13	7	sp
NAME	1605:13	1605:13	8	sp
LEAF_NODE	1605:13	1605:13	9	sp
ASSIGN_OP	1605:15	1605:15	7	=
LEAF_NODE	1605:15	1605:15	8	=
RVAL	1605:16	1605:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1605:16	1605:16	8	(
TYPE_NAME	1605:17	1605:17	8	OJPEGState
LEAF_NODE	1605:17	1605:17	9	OJPEGState
LEAF_NODE	1605:27	1605:27	8	*
LEAF_NODE	1605:28	1605:28	8	)
FIELD	1605:29	1605:34	8	tif -> tif_data
LEAF_NODE	1605:29	1605:29	9	tif
LEAF_NODE	1605:32	1605:32	9	->
LEAF_NODE	1605:34	1605:34	9	tif_data
LEAF_NODE	1605:42	1605:42	4	;
SIMPLE_DECL	1606:1	1606:9	3	uint16 m ;
VAR_DECL	1606:1	1606:8	4	uint16 m
TYPE	1606:1	1606:1	5	uint16
TYPE_NAME	1606:1	1606:1	6	uint16
LEAF_NODE	1606:1	1606:1	7	uint16
NAME	1606:8	1606:8	5	m
LEAF_NODE	1606:8	1606:8	6	m
LEAF_NODE	1606:9	1606:9	4	;
SIMPLE_DECL	1607:1	1607:9	3	uint16 n ;
VAR_DECL	1607:1	1607:8	4	uint16 n
TYPE	1607:1	1607:1	5	uint16
TYPE_NAME	1607:1	1607:1	6	uint16
LEAF_NODE	1607:1	1607:1	7	uint16
NAME	1607:8	1607:8	5	n
LEAF_NODE	1607:8	1607:8	6	n
LEAF_NODE	1607:9	1607:9	4	;
SIMPLE_DECL	1608:1	1608:8	3	uint8 o ;
VAR_DECL	1608:1	1608:7	4	uint8 o
TYPE	1608:1	1608:1	5	uint8
TYPE_NAME	1608:1	1608:1	6	uint8
LEAF_NODE	1608:1	1608:1	7	uint8
NAME	1608:7	1608:7	5	o
LEAF_NODE	1608:7	1608:7	6	o
LEAF_NODE	1608:8	1608:8	4	;
SIMPLE_DECL	1609:1	1609:9	3	uint16 p ;
VAR_DECL	1609:1	1609:8	4	uint16 p
TYPE	1609:1	1609:1	5	uint16
TYPE_NAME	1609:1	1609:1	6	uint16
LEAF_NODE	1609:1	1609:1	7	uint16
NAME	1609:8	1609:8	5	p
LEAF_NODE	1609:8	1609:8	6	p
LEAF_NODE	1609:9	1609:9	4	;
SIMPLE_DECL	1610:1	1610:9	3	uint16 q ;
VAR_DECL	1610:1	1610:8	4	uint16 q
TYPE	1610:1	1610:1	5	uint16
TYPE_NAME	1610:1	1610:1	6	uint16
LEAF_NODE	1610:1	1610:1	7	uint16
NAME	1610:8	1610:8	5	q
LEAF_NODE	1610:8	1610:8	6	q
LEAF_NODE	1610:9	1610:9	4	;
SELECTION	1611:1	1612:1	3	
KEYWORD	1611:1	1611:1	4	if
LEAF_NODE	1611:1	1611:1	5	if
LEAF_NODE	1611:4	1611:4	4	(
CONDITION	1611:5	1611:5	4	sp -> sof_log != 0
EXPR	1611:5	1611:18	5	sp -> sof_log != 0
FIELD	1611:5	1611:9	6	sp -> sof_log
LEAF_NODE	1611:5	1611:5	7	sp
LEAF_NODE	1611:7	1611:7	7	->
LEAF_NODE	1611:9	1611:9	7	sof_log
EQ_OPERATOR	1611:16	1611:16	6	!=
LEAF_NODE	1611:16	1611:16	7	!=
FIELD	1611:18	1611:18	6	0
LEAF_NODE	1611:18	1611:18	7	0
LEAF_NODE	1611:19	1611:19	4	)
STATEMENTS	1612:1	1615:1	4	
LEAF_NODE	1612:1	1612:1	5	{
STATEMENTS	1613:2	1614:2	5	
EXPR_STATEMENT	1613:2	1613:62	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JPEG data" ) ;
EXPR	1613:2	1613:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JPEG data" )
FUNCTION_CALL	1613:2	1613:61	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JPEG data" )
CALLEE	1613:2	1613:2	9	TIFFErrorExt
LEAF_NODE	1613:2	1613:2	10	TIFFErrorExt
LEAF_NODE	1613:14	1613:14	9	(
ARGUMENT	1613:15	1613:15	9	tif -> tif_clientdata
FIELD	1613:15	1613:20	10	tif -> tif_clientdata
LEAF_NODE	1613:15	1613:15	11	tif
LEAF_NODE	1613:18	1613:18	11	->
LEAF_NODE	1613:20	1613:20	11	tif_clientdata
LEAF_NODE	1613:34	1613:34	9	,
ARGUMENT	1613:35	1613:35	9	module
FIELD	1613:35	1613:35	10	module
LEAF_NODE	1613:35	1613:35	11	module
LEAF_NODE	1613:41	1613:41	9	,
ARGUMENT	1613:42	1613:42	9	"Corrupt JPEG data"
FIELD	1613:42	1613:42	10	"Corrupt JPEG data"
LEAF_NODE	1613:42	1613:42	11	"Corrupt JPEG data"
LEAF_NODE	1613:61	1613:61	9	)
LEAF_NODE	1613:62	1613:62	7	;
JUMP_STATEMENT	1614:2	1614:11	6	return ( 0 ) ;
KEYWORD	1614:2	1614:2	7	return
LEAF_NODE	1614:2	1614:2	8	return
DESTINATION	1614:8	1614:8	7	( 0 )
EXPR	1614:8	1614:10	8	( 0 )
LEAF_NODE	1614:8	1614:8	9	(
FIELD	1614:9	1614:9	9	0
LEAF_NODE	1614:9	1614:9	10	0
LEAF_NODE	1614:10	1614:10	9	)
LEAF_NODE	1614:11	1614:11	7	;
LEAF_NODE	1615:1	1615:1	5	}
SELECTION	1616:1	1617:2	3	
KEYWORD	1616:1	1616:1	4	if
LEAF_NODE	1616:1	1616:1	5	if
LEAF_NODE	1616:4	1616:4	4	(
CONDITION	1616:5	1616:5	4	sp -> subsamplingcorrect == 0
EXPR	1616:5	1616:29	5	sp -> subsamplingcorrect == 0
FIELD	1616:5	1616:9	6	sp -> subsamplingcorrect
LEAF_NODE	1616:5	1616:5	7	sp
LEAF_NODE	1616:7	1616:7	7	->
LEAF_NODE	1616:9	1616:9	7	subsamplingcorrect
EQ_OPERATOR	1616:27	1616:27	6	==
LEAF_NODE	1616:27	1616:27	7	==
FIELD	1616:29	1616:29	6	0
LEAF_NODE	1616:29	1616:29	7	0
LEAF_NODE	1616:30	1616:30	4	)
STATEMENTS	1617:2	1617:2	4	
EXPR_STATEMENT	1617:2	1617:29	5	sp -> sof_marker_id = marker_id ;
EXPR	1617:2	1617:2	6	sp -> sof_marker_id = marker_id
ASSIGN	1617:2	1617:20	7	sp -> sof_marker_id = marker_id
LVAL	1617:2	1617:2	8	sp -> sof_marker_id
FIELD	1617:2	1617:6	9	sp -> sof_marker_id
LEAF_NODE	1617:2	1617:2	10	sp
LEAF_NODE	1617:4	1617:4	10	->
LEAF_NODE	1617:6	1617:6	10	sof_marker_id
ASSIGN_OP	1617:19	1617:19	8	=
LEAF_NODE	1617:19	1617:19	9	=
RVAL	1617:20	1617:20	8	marker_id
FIELD	1617:20	1617:20	9	marker_id
LEAF_NODE	1617:20	1617:20	10	marker_id
LEAF_NODE	1617:29	1617:29	6	;
SELECTION	1619:1	1620:2	3	
KEYWORD	1619:1	1619:1	4	if
LEAF_NODE	1619:1	1619:1	5	if
LEAF_NODE	1619:4	1619:4	4	(
CONDITION	1619:5	1619:5	4	OJPEGReadWord ( sp , & m ) == 0
EXPR	1619:5	1619:27	5	OJPEGReadWord ( sp , & m ) == 0
FUNCTION_CALL	1619:5	1619:24	6	OJPEGReadWord ( sp , & m )
CALLEE	1619:5	1619:5	7	OJPEGReadWord
LEAF_NODE	1619:5	1619:5	8	OJPEGReadWord
LEAF_NODE	1619:18	1619:18	7	(
ARGUMENT	1619:19	1619:19	7	sp
FIELD	1619:19	1619:19	8	sp
LEAF_NODE	1619:19	1619:19	9	sp
LEAF_NODE	1619:21	1619:21	7	,
ARGUMENT	1619:22	1619:22	7	& m
UNARY_EXPR	1619:22	1619:23	8	& m
UNARY_OPERATOR	1619:22	1619:22	9	&
LEAF_NODE	1619:22	1619:22	10	&
FIELD	1619:23	1619:23	9	m
LEAF_NODE	1619:23	1619:23	10	m
LEAF_NODE	1619:24	1619:24	7	)
EQ_OPERATOR	1619:25	1619:25	6	==
LEAF_NODE	1619:25	1619:25	7	==
FIELD	1619:27	1619:27	6	0
LEAF_NODE	1619:27	1619:27	7	0
LEAF_NODE	1619:28	1619:28	4	)
STATEMENTS	1620:2	1620:2	4	
JUMP_STATEMENT	1620:2	1620:11	5	return ( 0 ) ;
KEYWORD	1620:2	1620:2	6	return
LEAF_NODE	1620:2	1620:2	7	return
DESTINATION	1620:8	1620:8	6	( 0 )
EXPR	1620:8	1620:10	7	( 0 )
LEAF_NODE	1620:8	1620:8	8	(
FIELD	1620:9	1620:9	8	0
LEAF_NODE	1620:9	1620:9	9	0
LEAF_NODE	1620:10	1620:10	8	)
LEAF_NODE	1620:11	1620:11	6	;
SELECTION	1621:1	1622:1	3	
KEYWORD	1621:1	1621:1	4	if
LEAF_NODE	1621:1	1621:1	5	if
LEAF_NODE	1621:4	1621:4	4	(
CONDITION	1621:5	1621:5	4	m < 11
EXPR	1621:5	1621:7	5	m < 11
FIELD	1621:5	1621:5	6	m
LEAF_NODE	1621:5	1621:5	7	m
REL_OPERATOR	1621:6	1621:6	6	<
LEAF_NODE	1621:6	1621:6	7	<
FIELD	1621:7	1621:7	6	11
LEAF_NODE	1621:7	1621:7	7	11
LEAF_NODE	1621:9	1621:9	4	)
STATEMENTS	1622:1	1626:1	4	
LEAF_NODE	1622:1	1622:1	5	{
STATEMENTS	1623:2	1625:2	5	
SELECTION	1623:2	1624:3	6	
KEYWORD	1623:2	1623:2	7	if
LEAF_NODE	1623:2	1623:2	8	if
LEAF_NODE	1623:5	1623:5	7	(
CONDITION	1623:6	1623:6	7	sp -> subsamplingcorrect == 0
EXPR	1623:6	1623:30	8	sp -> subsamplingcorrect == 0
FIELD	1623:6	1623:10	9	sp -> subsamplingcorrect
LEAF_NODE	1623:6	1623:6	10	sp
LEAF_NODE	1623:8	1623:8	10	->
LEAF_NODE	1623:10	1623:10	10	subsamplingcorrect
EQ_OPERATOR	1623:28	1623:28	9	==
LEAF_NODE	1623:28	1623:28	10	==
FIELD	1623:30	1623:30	9	0
LEAF_NODE	1623:30	1623:30	10	0
LEAF_NODE	1623:31	1623:31	7	)
STATEMENTS	1624:3	1624:3	7	
EXPR_STATEMENT	1624:3	1624:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" ) ;
EXPR	1624:3	1624:3	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" )
FUNCTION_CALL	1624:3	1624:76	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" )
CALLEE	1624:3	1624:3	11	TIFFErrorExt
LEAF_NODE	1624:3	1624:3	12	TIFFErrorExt
LEAF_NODE	1624:15	1624:15	11	(
ARGUMENT	1624:16	1624:16	11	tif -> tif_clientdata
FIELD	1624:16	1624:21	12	tif -> tif_clientdata
LEAF_NODE	1624:16	1624:16	13	tif
LEAF_NODE	1624:19	1624:19	13	->
LEAF_NODE	1624:21	1624:21	13	tif_clientdata
LEAF_NODE	1624:35	1624:35	11	,
ARGUMENT	1624:36	1624:36	11	module
FIELD	1624:36	1624:36	12	module
LEAF_NODE	1624:36	1624:36	13	module
LEAF_NODE	1624:42	1624:42	11	,
ARGUMENT	1624:43	1624:43	11	"Corrupt SOF marker in JPEG data"
FIELD	1624:43	1624:43	12	"Corrupt SOF marker in JPEG data"
LEAF_NODE	1624:43	1624:43	13	"Corrupt SOF marker in JPEG data"
LEAF_NODE	1624:76	1624:76	11	)
LEAF_NODE	1624:77	1624:77	9	;
JUMP_STATEMENT	1625:2	1625:11	6	return ( 0 ) ;
KEYWORD	1625:2	1625:2	7	return
LEAF_NODE	1625:2	1625:2	8	return
DESTINATION	1625:8	1625:8	7	( 0 )
EXPR	1625:8	1625:10	8	( 0 )
LEAF_NODE	1625:8	1625:8	9	(
FIELD	1625:9	1625:9	9	0
LEAF_NODE	1625:9	1625:9	10	0
LEAF_NODE	1625:10	1625:10	9	)
LEAF_NODE	1625:11	1625:11	7	;
LEAF_NODE	1626:1	1626:1	5	}
EXPR_STATEMENT	1627:1	1627:5	3	m -= 8 ;
EXPR	1627:1	1627:1	4	m -= 8
ASSIGN	1627:1	1627:4	5	m -= 8
LVAL	1627:1	1627:1	6	m
FIELD	1627:1	1627:1	7	m
LEAF_NODE	1627:1	1627:1	8	m
ASSIGN_OP	1627:2	1627:2	6	-=
LEAF_NODE	1627:2	1627:2	7	-=
RVAL	1627:4	1627:4	6	8
FIELD	1627:4	1627:4	7	8
LEAF_NODE	1627:4	1627:4	8	8
LEAF_NODE	1627:5	1627:5	4	;
SELECTION	1628:1	1629:1	3	
KEYWORD	1628:1	1628:1	4	if
LEAF_NODE	1628:1	1628:1	5	if
LEAF_NODE	1628:4	1628:4	4	(
CONDITION	1628:5	1628:5	4	m % 3 != 0
EXPR	1628:5	1628:10	5	m % 3 != 0
FIELD	1628:5	1628:5	6	m
LEAF_NODE	1628:5	1628:5	7	m
LEAF_NODE	1628:6	1628:6	6	%
FIELD	1628:7	1628:7	6	3
LEAF_NODE	1628:7	1628:7	7	3
EQ_OPERATOR	1628:8	1628:8	6	!=
LEAF_NODE	1628:8	1628:8	7	!=
FIELD	1628:10	1628:10	6	0
LEAF_NODE	1628:10	1628:10	7	0
LEAF_NODE	1628:11	1628:11	4	)
STATEMENTS	1629:1	1633:1	4	
LEAF_NODE	1629:1	1629:1	5	{
STATEMENTS	1630:2	1632:2	5	
SELECTION	1630:2	1631:3	6	
KEYWORD	1630:2	1630:2	7	if
LEAF_NODE	1630:2	1630:2	8	if
LEAF_NODE	1630:5	1630:5	7	(
CONDITION	1630:6	1630:6	7	sp -> subsamplingcorrect == 0
EXPR	1630:6	1630:30	8	sp -> subsamplingcorrect == 0
FIELD	1630:6	1630:10	9	sp -> subsamplingcorrect
LEAF_NODE	1630:6	1630:6	10	sp
LEAF_NODE	1630:8	1630:8	10	->
LEAF_NODE	1630:10	1630:10	10	subsamplingcorrect
EQ_OPERATOR	1630:28	1630:28	9	==
LEAF_NODE	1630:28	1630:28	10	==
FIELD	1630:30	1630:30	9	0
LEAF_NODE	1630:30	1630:30	10	0
LEAF_NODE	1630:31	1630:31	7	)
STATEMENTS	1631:3	1631:3	7	
EXPR_STATEMENT	1631:3	1631:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" ) ;
EXPR	1631:3	1631:3	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" )
FUNCTION_CALL	1631:3	1631:76	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" )
CALLEE	1631:3	1631:3	11	TIFFErrorExt
LEAF_NODE	1631:3	1631:3	12	TIFFErrorExt
LEAF_NODE	1631:15	1631:15	11	(
ARGUMENT	1631:16	1631:16	11	tif -> tif_clientdata
FIELD	1631:16	1631:21	12	tif -> tif_clientdata
LEAF_NODE	1631:16	1631:16	13	tif
LEAF_NODE	1631:19	1631:19	13	->
LEAF_NODE	1631:21	1631:21	13	tif_clientdata
LEAF_NODE	1631:35	1631:35	11	,
ARGUMENT	1631:36	1631:36	11	module
FIELD	1631:36	1631:36	12	module
LEAF_NODE	1631:36	1631:36	13	module
LEAF_NODE	1631:42	1631:42	11	,
ARGUMENT	1631:43	1631:43	11	"Corrupt SOF marker in JPEG data"
FIELD	1631:43	1631:43	12	"Corrupt SOF marker in JPEG data"
LEAF_NODE	1631:43	1631:43	13	"Corrupt SOF marker in JPEG data"
LEAF_NODE	1631:76	1631:76	11	)
LEAF_NODE	1631:77	1631:77	9	;
JUMP_STATEMENT	1632:2	1632:11	6	return ( 0 ) ;
KEYWORD	1632:2	1632:2	7	return
LEAF_NODE	1632:2	1632:2	8	return
DESTINATION	1632:8	1632:8	7	( 0 )
EXPR	1632:8	1632:10	8	( 0 )
LEAF_NODE	1632:8	1632:8	9	(
FIELD	1632:9	1632:9	9	0
LEAF_NODE	1632:9	1632:9	10	0
LEAF_NODE	1632:10	1632:10	9	)
LEAF_NODE	1632:11	1632:11	7	;
LEAF_NODE	1633:1	1633:1	5	}
EXPR_STATEMENT	1634:1	1634:6	3	n = m / 3 ;
EXPR	1634:1	1634:1	4	n = m / 3
ASSIGN	1634:1	1634:3	5	n = m / 3
LVAL	1634:1	1634:1	6	n
FIELD	1634:1	1634:1	7	n
LEAF_NODE	1634:1	1634:1	8	n
ASSIGN_OP	1634:2	1634:2	6	=
LEAF_NODE	1634:2	1634:2	7	=
RVAL	1634:3	1634:5	6	m / 3
FIELD	1634:3	1634:3	7	m
LEAF_NODE	1634:3	1634:3	8	m
LEAF_NODE	1634:4	1634:4	7	/
FIELD	1634:5	1634:5	7	3
LEAF_NODE	1634:5	1634:5	8	3
LEAF_NODE	1634:6	1634:6	4	;
SELECTION	1635:1	1636:1	3	
KEYWORD	1635:1	1635:1	4	if
LEAF_NODE	1635:1	1635:1	5	if
LEAF_NODE	1635:4	1635:4	4	(
CONDITION	1635:5	1635:5	4	sp -> subsamplingcorrect == 0
EXPR	1635:5	1635:29	5	sp -> subsamplingcorrect == 0
FIELD	1635:5	1635:9	6	sp -> subsamplingcorrect
LEAF_NODE	1635:5	1635:5	7	sp
LEAF_NODE	1635:7	1635:7	7	->
LEAF_NODE	1635:9	1635:9	7	subsamplingcorrect
EQ_OPERATOR	1635:27	1635:27	6	==
LEAF_NODE	1635:27	1635:27	7	==
FIELD	1635:29	1635:29	6	0
LEAF_NODE	1635:29	1635:29	7	0
LEAF_NODE	1635:30	1635:30	4	)
STATEMENTS	1636:1	1642:1	4	
LEAF_NODE	1636:1	1636:1	5	{
STATEMENTS	1637:2	1637:2	5	
SELECTION	1637:2	1638:2	6	
KEYWORD	1637:2	1637:2	7	if
LEAF_NODE	1637:2	1637:2	8	if
LEAF_NODE	1637:5	1637:5	7	(
CONDITION	1637:6	1637:6	7	n != sp -> samples_per_pixel
EXPR	1637:6	1637:9	8	n != sp -> samples_per_pixel
FIELD	1637:6	1637:6	9	n
LEAF_NODE	1637:6	1637:6	10	n
EQ_OPERATOR	1637:7	1637:7	9	!=
LEAF_NODE	1637:7	1637:7	10	!=
FIELD	1637:9	1637:13	9	sp -> samples_per_pixel
LEAF_NODE	1637:9	1637:9	10	sp
LEAF_NODE	1637:11	1637:11	10	->
LEAF_NODE	1637:13	1637:13	10	samples_per_pixel
LEAF_NODE	1637:30	1637:30	7	)
STATEMENTS	1638:2	1641:2	7	
LEAF_NODE	1638:2	1638:2	8	{
STATEMENTS	1639:3	1640:3	8	
EXPR_STATEMENT	1639:3	1639:105	9	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected number of samples" ) ;
EXPR	1639:3	1639:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected number of samples" )
FUNCTION_CALL	1639:3	1639:104	11	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected number of samples" )
CALLEE	1639:3	1639:3	12	TIFFErrorExt
LEAF_NODE	1639:3	1639:3	13	TIFFErrorExt
LEAF_NODE	1639:15	1639:15	12	(
ARGUMENT	1639:16	1639:16	12	tif -> tif_clientdata
FIELD	1639:16	1639:21	13	tif -> tif_clientdata
LEAF_NODE	1639:16	1639:16	14	tif
LEAF_NODE	1639:19	1639:19	14	->
LEAF_NODE	1639:21	1639:21	14	tif_clientdata
LEAF_NODE	1639:35	1639:35	12	,
ARGUMENT	1639:36	1639:36	12	module
FIELD	1639:36	1639:36	13	module
LEAF_NODE	1639:36	1639:36	14	module
LEAF_NODE	1639:42	1639:42	12	,
ARGUMENT	1639:43	1639:43	12	"JPEG compressed data indicates unexpected number of samples"
FIELD	1639:43	1639:43	13	"JPEG compressed data indicates unexpected number of samples"
LEAF_NODE	1639:43	1639:43	14	"JPEG compressed data indicates unexpected number of samples"
LEAF_NODE	1639:104	1639:104	12	)
LEAF_NODE	1639:105	1639:105	10	;
JUMP_STATEMENT	1640:3	1640:12	9	return ( 0 ) ;
KEYWORD	1640:3	1640:3	10	return
LEAF_NODE	1640:3	1640:3	11	return
DESTINATION	1640:9	1640:9	10	( 0 )
EXPR	1640:9	1640:11	11	( 0 )
LEAF_NODE	1640:9	1640:9	12	(
FIELD	1640:10	1640:10	12	0
LEAF_NODE	1640:10	1640:10	13	0
LEAF_NODE	1640:11	1640:11	12	)
LEAF_NODE	1640:12	1640:12	10	;
LEAF_NODE	1641:2	1641:2	8	}
LEAF_NODE	1642:1	1642:1	5	}
SELECTION	1644:1	1645:2	3	
KEYWORD	1644:1	1644:1	4	if
LEAF_NODE	1644:1	1644:1	5	if
LEAF_NODE	1644:4	1644:4	4	(
CONDITION	1644:5	1644:5	4	OJPEGReadByte ( sp , & o ) == 0
EXPR	1644:5	1644:27	5	OJPEGReadByte ( sp , & o ) == 0
FUNCTION_CALL	1644:5	1644:24	6	OJPEGReadByte ( sp , & o )
CALLEE	1644:5	1644:5	7	OJPEGReadByte
LEAF_NODE	1644:5	1644:5	8	OJPEGReadByte
LEAF_NODE	1644:18	1644:18	7	(
ARGUMENT	1644:19	1644:19	7	sp
FIELD	1644:19	1644:19	8	sp
LEAF_NODE	1644:19	1644:19	9	sp
LEAF_NODE	1644:21	1644:21	7	,
ARGUMENT	1644:22	1644:22	7	& o
UNARY_EXPR	1644:22	1644:23	8	& o
UNARY_OPERATOR	1644:22	1644:22	9	&
LEAF_NODE	1644:22	1644:22	10	&
FIELD	1644:23	1644:23	9	o
LEAF_NODE	1644:23	1644:23	10	o
LEAF_NODE	1644:24	1644:24	7	)
EQ_OPERATOR	1644:25	1644:25	6	==
LEAF_NODE	1644:25	1644:25	7	==
FIELD	1644:27	1644:27	6	0
LEAF_NODE	1644:27	1644:27	7	0
LEAF_NODE	1644:28	1644:28	4	)
STATEMENTS	1645:2	1645:2	4	
JUMP_STATEMENT	1645:2	1645:11	5	return ( 0 ) ;
KEYWORD	1645:2	1645:2	6	return
LEAF_NODE	1645:2	1645:2	7	return
DESTINATION	1645:8	1645:8	6	( 0 )
EXPR	1645:8	1645:10	7	( 0 )
LEAF_NODE	1645:8	1645:8	8	(
FIELD	1645:9	1645:9	8	0
LEAF_NODE	1645:9	1645:9	9	0
LEAF_NODE	1645:10	1645:10	8	)
LEAF_NODE	1645:11	1645:11	6	;
SELECTION	1646:1	1647:1	3	
KEYWORD	1646:1	1646:1	4	if
LEAF_NODE	1646:1	1646:1	5	if
LEAF_NODE	1646:4	1646:4	4	(
CONDITION	1646:5	1646:5	4	o != 8
EXPR	1646:5	1646:8	5	o != 8
FIELD	1646:5	1646:5	6	o
LEAF_NODE	1646:5	1646:5	7	o
EQ_OPERATOR	1646:6	1646:6	6	!=
LEAF_NODE	1646:6	1646:6	7	!=
FIELD	1646:8	1646:8	6	8
LEAF_NODE	1646:8	1646:8	7	8
LEAF_NODE	1646:9	1646:9	4	)
STATEMENTS	1647:1	1651:1	4	
LEAF_NODE	1647:1	1647:1	5	{
STATEMENTS	1648:2	1650:2	5	
SELECTION	1648:2	1649:3	6	
KEYWORD	1648:2	1648:2	7	if
LEAF_NODE	1648:2	1648:2	8	if
LEAF_NODE	1648:5	1648:5	7	(
CONDITION	1648:6	1648:6	7	sp -> subsamplingcorrect == 0
EXPR	1648:6	1648:30	8	sp -> subsamplingcorrect == 0
FIELD	1648:6	1648:10	9	sp -> subsamplingcorrect
LEAF_NODE	1648:6	1648:6	10	sp
LEAF_NODE	1648:8	1648:8	10	->
LEAF_NODE	1648:10	1648:10	10	subsamplingcorrect
EQ_OPERATOR	1648:28	1648:28	9	==
LEAF_NODE	1648:28	1648:28	10	==
FIELD	1648:30	1648:30	9	0
LEAF_NODE	1648:30	1648:30	10	0
LEAF_NODE	1648:31	1648:31	7	)
STATEMENTS	1649:3	1649:3	7	
EXPR_STATEMENT	1649:3	1649:113	8	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected number of bits per sample" ) ;
EXPR	1649:3	1649:3	9	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected number of bits per sample" )
FUNCTION_CALL	1649:3	1649:112	10	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected number of bits per sample" )
CALLEE	1649:3	1649:3	11	TIFFErrorExt
LEAF_NODE	1649:3	1649:3	12	TIFFErrorExt
LEAF_NODE	1649:15	1649:15	11	(
ARGUMENT	1649:16	1649:16	11	tif -> tif_clientdata
FIELD	1649:16	1649:21	12	tif -> tif_clientdata
LEAF_NODE	1649:16	1649:16	13	tif
LEAF_NODE	1649:19	1649:19	13	->
LEAF_NODE	1649:21	1649:21	13	tif_clientdata
LEAF_NODE	1649:35	1649:35	11	,
ARGUMENT	1649:36	1649:36	11	module
FIELD	1649:36	1649:36	12	module
LEAF_NODE	1649:36	1649:36	13	module
LEAF_NODE	1649:42	1649:42	11	,
ARGUMENT	1649:43	1649:43	11	"JPEG compressed data indicates unexpected number of bits per sample"
FIELD	1649:43	1649:43	12	"JPEG compressed data indicates unexpected number of bits per sample"
LEAF_NODE	1649:43	1649:43	13	"JPEG compressed data indicates unexpected number of bits per sample"
LEAF_NODE	1649:112	1649:112	11	)
LEAF_NODE	1649:113	1649:113	9	;
JUMP_STATEMENT	1650:2	1650:11	6	return ( 0 ) ;
KEYWORD	1650:2	1650:2	7	return
LEAF_NODE	1650:2	1650:2	8	return
DESTINATION	1650:8	1650:8	7	( 0 )
EXPR	1650:8	1650:10	8	( 0 )
LEAF_NODE	1650:8	1650:8	9	(
FIELD	1650:9	1650:9	9	0
LEAF_NODE	1650:9	1650:9	10	0
LEAF_NODE	1650:10	1650:10	9	)
LEAF_NODE	1650:11	1650:11	7	;
LEAF_NODE	1651:1	1651:1	5	}
SELECTION	1653:1	1654:2	3	
KEYWORD	1653:1	1653:1	4	if
LEAF_NODE	1653:1	1653:1	5	if
LEAF_NODE	1653:4	1653:4	4	(
CONDITION	1653:5	1653:5	4	sp -> subsamplingcorrect
EXPR	1653:5	1653:5	5	sp -> subsamplingcorrect
FIELD	1653:5	1653:9	6	sp -> subsamplingcorrect
LEAF_NODE	1653:5	1653:5	7	sp
LEAF_NODE	1653:7	1653:7	7	->
LEAF_NODE	1653:9	1653:9	7	subsamplingcorrect
LEAF_NODE	1653:27	1653:27	4	)
STATEMENTS	1654:2	1654:2	4	
EXPR_STATEMENT	1654:2	1654:21	5	OJPEGReadSkip ( sp , 4 ) ;
EXPR	1654:2	1654:2	6	OJPEGReadSkip ( sp , 4 )
FUNCTION_CALL	1654:2	1654:20	7	OJPEGReadSkip ( sp , 4 )
CALLEE	1654:2	1654:2	8	OJPEGReadSkip
LEAF_NODE	1654:2	1654:2	9	OJPEGReadSkip
LEAF_NODE	1654:15	1654:15	8	(
ARGUMENT	1654:16	1654:16	8	sp
FIELD	1654:16	1654:16	9	sp
LEAF_NODE	1654:16	1654:16	10	sp
LEAF_NODE	1654:18	1654:18	8	,
ARGUMENT	1654:19	1654:19	8	4
FIELD	1654:19	1654:19	9	4
LEAF_NODE	1654:19	1654:19	10	4
LEAF_NODE	1654:20	1654:20	8	)
LEAF_NODE	1654:21	1654:21	6	;
SELECTION	1655:1	1656:1	3	
KEYWORD	1655:1	1655:1	4	else
LEAF_NODE	1655:1	1655:1	5	else
STATEMENTS	1656:1	1680:1	4	
LEAF_NODE	1656:1	1656:1	5	{
STATEMENTS	1658:2	1679:2	5	
SELECTION	1658:2	1659:3	6	
KEYWORD	1658:2	1658:2	7	if
LEAF_NODE	1658:2	1658:2	8	if
LEAF_NODE	1658:5	1658:5	7	(
CONDITION	1658:6	1658:6	7	OJPEGReadWord ( sp , & p ) == 0
EXPR	1658:6	1658:28	8	OJPEGReadWord ( sp , & p ) == 0
FUNCTION_CALL	1658:6	1658:25	9	OJPEGReadWord ( sp , & p )
CALLEE	1658:6	1658:6	10	OJPEGReadWord
LEAF_NODE	1658:6	1658:6	11	OJPEGReadWord
LEAF_NODE	1658:19	1658:19	10	(
ARGUMENT	1658:20	1658:20	10	sp
FIELD	1658:20	1658:20	11	sp
LEAF_NODE	1658:20	1658:20	12	sp
LEAF_NODE	1658:22	1658:22	10	,
ARGUMENT	1658:23	1658:23	10	& p
UNARY_EXPR	1658:23	1658:24	11	& p
UNARY_OPERATOR	1658:23	1658:23	12	&
LEAF_NODE	1658:23	1658:23	13	&
FIELD	1658:24	1658:24	12	p
LEAF_NODE	1658:24	1658:24	13	p
LEAF_NODE	1658:25	1658:25	10	)
EQ_OPERATOR	1658:26	1658:26	9	==
LEAF_NODE	1658:26	1658:26	10	==
FIELD	1658:28	1658:28	9	0
LEAF_NODE	1658:28	1658:28	10	0
LEAF_NODE	1658:29	1658:29	7	)
STATEMENTS	1659:3	1659:3	7	
JUMP_STATEMENT	1659:3	1659:12	8	return ( 0 ) ;
KEYWORD	1659:3	1659:3	9	return
LEAF_NODE	1659:3	1659:3	10	return
DESTINATION	1659:9	1659:9	9	( 0 )
EXPR	1659:9	1659:11	10	( 0 )
LEAF_NODE	1659:9	1659:9	11	(
FIELD	1659:10	1659:10	11	0
LEAF_NODE	1659:10	1659:10	12	0
LEAF_NODE	1659:11	1659:11	11	)
LEAF_NODE	1659:12	1659:12	9	;
SELECTION	1660:2	1661:2	6	
KEYWORD	1660:2	1660:2	7	if
LEAF_NODE	1660:2	1660:2	8	if
LEAF_NODE	1660:5	1660:5	7	(
CONDITION	1660:6	1660:6	7	( ( uint32 ) p < sp -> image_length ) && ( ( uint32 ) p < sp -> strile_length_total )
EXPR	1660:6	1660:6	8	( ( uint32 ) p < sp -> image_length ) && ( ( uint32 ) p < sp -> strile_length_total )
AND	1660:6	1660:38	9	( ( uint32 ) p < sp -> image_length ) && ( ( uint32 ) p < sp -> strile_length_total )
EXPR	1660:6	1660:33	10	( ( uint32 ) p < sp -> image_length )
LEAF_NODE	1660:6	1660:6	11	(
LEAF_NODE	1660:7	1660:7	11	(
TYPE_NAME	1660:8	1660:8	11	uint32
LEAF_NODE	1660:8	1660:8	12	uint32
LEAF_NODE	1660:14	1660:14	11	)
FIELD	1660:15	1660:15	11	p
LEAF_NODE	1660:15	1660:15	12	p
REL_OPERATOR	1660:16	1660:16	11	<
LEAF_NODE	1660:16	1660:16	12	<
FIELD	1660:17	1660:21	11	sp -> image_length
LEAF_NODE	1660:17	1660:17	12	sp
LEAF_NODE	1660:19	1660:19	12	->
LEAF_NODE	1660:21	1660:21	12	image_length
LEAF_NODE	1660:33	1660:33	11	)
LEAF_NODE	1660:35	1660:35	10	&&
EXPR	1660:38	1660:72	10	( ( uint32 ) p < sp -> strile_length_total )
LEAF_NODE	1660:38	1660:38	11	(
LEAF_NODE	1660:39	1660:39	11	(
TYPE_NAME	1660:40	1660:40	11	uint32
LEAF_NODE	1660:40	1660:40	12	uint32
LEAF_NODE	1660:46	1660:46	11	)
FIELD	1660:47	1660:47	11	p
LEAF_NODE	1660:47	1660:47	12	p
REL_OPERATOR	1660:48	1660:48	11	<
LEAF_NODE	1660:48	1660:48	12	<
FIELD	1660:49	1660:53	11	sp -> strile_length_total
LEAF_NODE	1660:49	1660:49	12	sp
LEAF_NODE	1660:51	1660:51	12	->
LEAF_NODE	1660:53	1660:53	12	strile_length_total
LEAF_NODE	1660:72	1660:72	11	)
LEAF_NODE	1660:73	1660:73	7	)
STATEMENTS	1661:2	1664:2	7	
LEAF_NODE	1661:2	1661:2	8	{
STATEMENTS	1662:3	1663:3	8	
EXPR_STATEMENT	1662:3	1662:94	9	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected height" ) ;
EXPR	1662:3	1662:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected height" )
FUNCTION_CALL	1662:3	1662:93	11	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected height" )
CALLEE	1662:3	1662:3	12	TIFFErrorExt
LEAF_NODE	1662:3	1662:3	13	TIFFErrorExt
LEAF_NODE	1662:15	1662:15	12	(
ARGUMENT	1662:16	1662:16	12	tif -> tif_clientdata
FIELD	1662:16	1662:21	13	tif -> tif_clientdata
LEAF_NODE	1662:16	1662:16	14	tif
LEAF_NODE	1662:19	1662:19	14	->
LEAF_NODE	1662:21	1662:21	14	tif_clientdata
LEAF_NODE	1662:35	1662:35	12	,
ARGUMENT	1662:36	1662:36	12	module
FIELD	1662:36	1662:36	13	module
LEAF_NODE	1662:36	1662:36	14	module
LEAF_NODE	1662:42	1662:42	12	,
ARGUMENT	1662:43	1662:43	12	"JPEG compressed data indicates unexpected height"
FIELD	1662:43	1662:43	13	"JPEG compressed data indicates unexpected height"
LEAF_NODE	1662:43	1662:43	14	"JPEG compressed data indicates unexpected height"
LEAF_NODE	1662:93	1662:93	12	)
LEAF_NODE	1662:94	1662:94	10	;
JUMP_STATEMENT	1663:3	1663:12	9	return ( 0 ) ;
KEYWORD	1663:3	1663:3	10	return
LEAF_NODE	1663:3	1663:3	11	return
DESTINATION	1663:9	1663:9	10	( 0 )
EXPR	1663:9	1663:11	11	( 0 )
LEAF_NODE	1663:9	1663:9	12	(
FIELD	1663:10	1663:10	12	0
LEAF_NODE	1663:10	1663:10	13	0
LEAF_NODE	1663:11	1663:11	12	)
LEAF_NODE	1663:12	1663:12	10	;
LEAF_NODE	1664:2	1664:2	8	}
EXPR_STATEMENT	1665:2	1665:13	6	sp -> sof_y = p ;
EXPR	1665:2	1665:2	7	sp -> sof_y = p
ASSIGN	1665:2	1665:12	8	sp -> sof_y = p
LVAL	1665:2	1665:2	9	sp -> sof_y
FIELD	1665:2	1665:6	10	sp -> sof_y
LEAF_NODE	1665:2	1665:2	11	sp
LEAF_NODE	1665:4	1665:4	11	->
LEAF_NODE	1665:6	1665:6	11	sof_y
ASSIGN_OP	1665:11	1665:11	9	=
LEAF_NODE	1665:11	1665:11	10	=
RVAL	1665:12	1665:12	9	p
FIELD	1665:12	1665:12	10	p
LEAF_NODE	1665:12	1665:12	11	p
LEAF_NODE	1665:13	1665:13	7	;
SELECTION	1667:2	1668:3	6	
KEYWORD	1667:2	1667:2	7	if
LEAF_NODE	1667:2	1667:2	8	if
LEAF_NODE	1667:5	1667:5	7	(
CONDITION	1667:6	1667:6	7	OJPEGReadWord ( sp , & p ) == 0
EXPR	1667:6	1667:28	8	OJPEGReadWord ( sp , & p ) == 0
FUNCTION_CALL	1667:6	1667:25	9	OJPEGReadWord ( sp , & p )
CALLEE	1667:6	1667:6	10	OJPEGReadWord
LEAF_NODE	1667:6	1667:6	11	OJPEGReadWord
LEAF_NODE	1667:19	1667:19	10	(
ARGUMENT	1667:20	1667:20	10	sp
FIELD	1667:20	1667:20	11	sp
LEAF_NODE	1667:20	1667:20	12	sp
LEAF_NODE	1667:22	1667:22	10	,
ARGUMENT	1667:23	1667:23	10	& p
UNARY_EXPR	1667:23	1667:24	11	& p
UNARY_OPERATOR	1667:23	1667:23	12	&
LEAF_NODE	1667:23	1667:23	13	&
FIELD	1667:24	1667:24	12	p
LEAF_NODE	1667:24	1667:24	13	p
LEAF_NODE	1667:25	1667:25	10	)
EQ_OPERATOR	1667:26	1667:26	9	==
LEAF_NODE	1667:26	1667:26	10	==
FIELD	1667:28	1667:28	9	0
LEAF_NODE	1667:28	1667:28	10	0
LEAF_NODE	1667:29	1667:29	7	)
STATEMENTS	1668:3	1668:3	7	
JUMP_STATEMENT	1668:3	1668:12	8	return ( 0 ) ;
KEYWORD	1668:3	1668:3	9	return
LEAF_NODE	1668:3	1668:3	10	return
DESTINATION	1668:9	1668:9	9	( 0 )
EXPR	1668:9	1668:11	10	( 0 )
LEAF_NODE	1668:9	1668:9	11	(
FIELD	1668:10	1668:10	11	0
LEAF_NODE	1668:10	1668:10	12	0
LEAF_NODE	1668:11	1668:11	11	)
LEAF_NODE	1668:12	1668:12	9	;
SELECTION	1669:2	1670:2	6	
KEYWORD	1669:2	1669:2	7	if
LEAF_NODE	1669:2	1669:2	8	if
LEAF_NODE	1669:5	1669:5	7	(
CONDITION	1669:6	1669:6	7	( ( uint32 ) p < sp -> image_width ) && ( ( uint32 ) p < sp -> strile_width )
EXPR	1669:6	1669:6	8	( ( uint32 ) p < sp -> image_width ) && ( ( uint32 ) p < sp -> strile_width )
AND	1669:6	1669:37	9	( ( uint32 ) p < sp -> image_width ) && ( ( uint32 ) p < sp -> strile_width )
EXPR	1669:6	1669:32	10	( ( uint32 ) p < sp -> image_width )
LEAF_NODE	1669:6	1669:6	11	(
LEAF_NODE	1669:7	1669:7	11	(
TYPE_NAME	1669:8	1669:8	11	uint32
LEAF_NODE	1669:8	1669:8	12	uint32
LEAF_NODE	1669:14	1669:14	11	)
FIELD	1669:15	1669:15	11	p
LEAF_NODE	1669:15	1669:15	12	p
REL_OPERATOR	1669:16	1669:16	11	<
LEAF_NODE	1669:16	1669:16	12	<
FIELD	1669:17	1669:21	11	sp -> image_width
LEAF_NODE	1669:17	1669:17	12	sp
LEAF_NODE	1669:19	1669:19	12	->
LEAF_NODE	1669:21	1669:21	12	image_width
LEAF_NODE	1669:32	1669:32	11	)
LEAF_NODE	1669:34	1669:34	10	&&
EXPR	1669:37	1669:64	10	( ( uint32 ) p < sp -> strile_width )
LEAF_NODE	1669:37	1669:37	11	(
LEAF_NODE	1669:38	1669:38	11	(
TYPE_NAME	1669:39	1669:39	11	uint32
LEAF_NODE	1669:39	1669:39	12	uint32
LEAF_NODE	1669:45	1669:45	11	)
FIELD	1669:46	1669:46	11	p
LEAF_NODE	1669:46	1669:46	12	p
REL_OPERATOR	1669:47	1669:47	11	<
LEAF_NODE	1669:47	1669:47	12	<
FIELD	1669:48	1669:52	11	sp -> strile_width
LEAF_NODE	1669:48	1669:48	12	sp
LEAF_NODE	1669:50	1669:50	12	->
LEAF_NODE	1669:52	1669:52	12	strile_width
LEAF_NODE	1669:64	1669:64	11	)
LEAF_NODE	1669:65	1669:65	7	)
STATEMENTS	1670:2	1673:2	7	
LEAF_NODE	1670:2	1670:2	8	{
STATEMENTS	1671:3	1672:3	8	
EXPR_STATEMENT	1671:3	1671:93	9	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected width" ) ;
EXPR	1671:3	1671:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected width" )
FUNCTION_CALL	1671:3	1671:92	11	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected width" )
CALLEE	1671:3	1671:3	12	TIFFErrorExt
LEAF_NODE	1671:3	1671:3	13	TIFFErrorExt
LEAF_NODE	1671:15	1671:15	12	(
ARGUMENT	1671:16	1671:16	12	tif -> tif_clientdata
FIELD	1671:16	1671:21	13	tif -> tif_clientdata
LEAF_NODE	1671:16	1671:16	14	tif
LEAF_NODE	1671:19	1671:19	14	->
LEAF_NODE	1671:21	1671:21	14	tif_clientdata
LEAF_NODE	1671:35	1671:35	12	,
ARGUMENT	1671:36	1671:36	12	module
FIELD	1671:36	1671:36	13	module
LEAF_NODE	1671:36	1671:36	14	module
LEAF_NODE	1671:42	1671:42	12	,
ARGUMENT	1671:43	1671:43	12	"JPEG compressed data indicates unexpected width"
FIELD	1671:43	1671:43	13	"JPEG compressed data indicates unexpected width"
LEAF_NODE	1671:43	1671:43	14	"JPEG compressed data indicates unexpected width"
LEAF_NODE	1671:92	1671:92	12	)
LEAF_NODE	1671:93	1671:93	10	;
JUMP_STATEMENT	1672:3	1672:12	9	return ( 0 ) ;
KEYWORD	1672:3	1672:3	10	return
LEAF_NODE	1672:3	1672:3	11	return
DESTINATION	1672:9	1672:9	10	( 0 )
EXPR	1672:9	1672:11	11	( 0 )
LEAF_NODE	1672:9	1672:9	12	(
FIELD	1672:10	1672:10	12	0
LEAF_NODE	1672:10	1672:10	13	0
LEAF_NODE	1672:11	1672:11	12	)
LEAF_NODE	1672:12	1672:12	10	;
LEAF_NODE	1673:2	1673:2	8	}
SELECTION	1674:2	1675:2	6	
KEYWORD	1674:2	1674:2	7	if
LEAF_NODE	1674:2	1674:2	8	if
LEAF_NODE	1674:5	1674:5	7	(
CONDITION	1674:6	1674:6	7	( uint32 ) p > sp -> strile_width
EXPR	1674:6	1674:16	8	( uint32 ) p > sp -> strile_width
LEAF_NODE	1674:6	1674:6	9	(
TYPE_NAME	1674:7	1674:7	9	uint32
LEAF_NODE	1674:7	1674:7	10	uint32
LEAF_NODE	1674:13	1674:13	9	)
FIELD	1674:14	1674:14	9	p
LEAF_NODE	1674:14	1674:14	10	p
REL_OPERATOR	1674:15	1674:15	9	>
LEAF_NODE	1674:15	1674:15	10	>
FIELD	1674:16	1674:20	9	sp -> strile_width
LEAF_NODE	1674:16	1674:16	10	sp
LEAF_NODE	1674:18	1674:18	10	->
LEAF_NODE	1674:20	1674:20	10	strile_width
LEAF_NODE	1674:32	1674:32	7	)
STATEMENTS	1675:2	1678:2	7	
LEAF_NODE	1675:2	1675:2	8	{
STATEMENTS	1676:3	1677:3	8	
EXPR_STATEMENT	1676:3	1676:107	9	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data image width exceeds expected image width" ) ;
EXPR	1676:3	1676:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data image width exceeds expected image width" )
FUNCTION_CALL	1676:3	1676:106	11	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data image width exceeds expected image width" )
CALLEE	1676:3	1676:3	12	TIFFErrorExt
LEAF_NODE	1676:3	1676:3	13	TIFFErrorExt
LEAF_NODE	1676:15	1676:15	12	(
ARGUMENT	1676:16	1676:16	12	tif -> tif_clientdata
FIELD	1676:16	1676:21	13	tif -> tif_clientdata
LEAF_NODE	1676:16	1676:16	14	tif
LEAF_NODE	1676:19	1676:19	14	->
LEAF_NODE	1676:21	1676:21	14	tif_clientdata
LEAF_NODE	1676:35	1676:35	12	,
ARGUMENT	1676:36	1676:36	12	module
FIELD	1676:36	1676:36	13	module
LEAF_NODE	1676:36	1676:36	14	module
LEAF_NODE	1676:42	1676:42	12	,
ARGUMENT	1676:43	1676:43	12	"JPEG compressed data image width exceeds expected image width"
FIELD	1676:43	1676:43	13	"JPEG compressed data image width exceeds expected image width"
LEAF_NODE	1676:43	1676:43	14	"JPEG compressed data image width exceeds expected image width"
LEAF_NODE	1676:106	1676:106	12	)
LEAF_NODE	1676:107	1676:107	10	;
JUMP_STATEMENT	1677:3	1677:12	9	return ( 0 ) ;
KEYWORD	1677:3	1677:3	10	return
LEAF_NODE	1677:3	1677:3	11	return
DESTINATION	1677:9	1677:9	10	( 0 )
EXPR	1677:9	1677:11	11	( 0 )
LEAF_NODE	1677:9	1677:9	12	(
FIELD	1677:10	1677:10	12	0
LEAF_NODE	1677:10	1677:10	13	0
LEAF_NODE	1677:11	1677:11	12	)
LEAF_NODE	1677:12	1677:12	10	;
LEAF_NODE	1678:2	1678:2	8	}
EXPR_STATEMENT	1679:2	1679:13	6	sp -> sof_x = p ;
EXPR	1679:2	1679:2	7	sp -> sof_x = p
ASSIGN	1679:2	1679:12	8	sp -> sof_x = p
LVAL	1679:2	1679:2	9	sp -> sof_x
FIELD	1679:2	1679:6	10	sp -> sof_x
LEAF_NODE	1679:2	1679:2	11	sp
LEAF_NODE	1679:4	1679:4	11	->
LEAF_NODE	1679:6	1679:6	11	sof_x
ASSIGN_OP	1679:11	1679:11	9	=
LEAF_NODE	1679:11	1679:11	10	=
RVAL	1679:12	1679:12	9	p
FIELD	1679:12	1679:12	10	p
LEAF_NODE	1679:12	1679:12	11	p
LEAF_NODE	1679:13	1679:13	7	;
LEAF_NODE	1680:1	1680:1	5	}
SELECTION	1682:1	1683:2	3	
KEYWORD	1682:1	1682:1	4	if
LEAF_NODE	1682:1	1682:1	5	if
LEAF_NODE	1682:4	1682:4	4	(
CONDITION	1682:5	1682:5	4	OJPEGReadByte ( sp , & o ) == 0
EXPR	1682:5	1682:27	5	OJPEGReadByte ( sp , & o ) == 0
FUNCTION_CALL	1682:5	1682:24	6	OJPEGReadByte ( sp , & o )
CALLEE	1682:5	1682:5	7	OJPEGReadByte
LEAF_NODE	1682:5	1682:5	8	OJPEGReadByte
LEAF_NODE	1682:18	1682:18	7	(
ARGUMENT	1682:19	1682:19	7	sp
FIELD	1682:19	1682:19	8	sp
LEAF_NODE	1682:19	1682:19	9	sp
LEAF_NODE	1682:21	1682:21	7	,
ARGUMENT	1682:22	1682:22	7	& o
UNARY_EXPR	1682:22	1682:23	8	& o
UNARY_OPERATOR	1682:22	1682:22	9	&
LEAF_NODE	1682:22	1682:22	10	&
FIELD	1682:23	1682:23	9	o
LEAF_NODE	1682:23	1682:23	10	o
LEAF_NODE	1682:24	1682:24	7	)
EQ_OPERATOR	1682:25	1682:25	6	==
LEAF_NODE	1682:25	1682:25	7	==
FIELD	1682:27	1682:27	6	0
LEAF_NODE	1682:27	1682:27	7	0
LEAF_NODE	1682:28	1682:28	4	)
STATEMENTS	1683:2	1683:2	4	
JUMP_STATEMENT	1683:2	1683:11	5	return ( 0 ) ;
KEYWORD	1683:2	1683:2	6	return
LEAF_NODE	1683:2	1683:2	7	return
DESTINATION	1683:8	1683:8	6	( 0 )
EXPR	1683:8	1683:10	7	( 0 )
LEAF_NODE	1683:8	1683:8	8	(
FIELD	1683:9	1683:9	8	0
LEAF_NODE	1683:9	1683:9	9	0
LEAF_NODE	1683:10	1683:10	8	)
LEAF_NODE	1683:11	1683:11	6	;
SELECTION	1684:1	1685:1	3	
KEYWORD	1684:1	1684:1	4	if
LEAF_NODE	1684:1	1684:1	5	if
LEAF_NODE	1684:4	1684:4	4	(
CONDITION	1684:5	1684:5	4	o != n
EXPR	1684:5	1684:8	5	o != n
FIELD	1684:5	1684:5	6	o
LEAF_NODE	1684:5	1684:5	7	o
EQ_OPERATOR	1684:6	1684:6	6	!=
LEAF_NODE	1684:6	1684:6	7	!=
FIELD	1684:8	1684:8	6	n
LEAF_NODE	1684:8	1684:8	7	n
LEAF_NODE	1684:9	1684:9	4	)
STATEMENTS	1685:1	1689:1	4	
LEAF_NODE	1685:1	1685:1	5	{
STATEMENTS	1686:2	1688:2	5	
SELECTION	1686:2	1687:3	6	
KEYWORD	1686:2	1686:2	7	if
LEAF_NODE	1686:2	1686:2	8	if
LEAF_NODE	1686:5	1686:5	7	(
CONDITION	1686:6	1686:6	7	sp -> subsamplingcorrect == 0
EXPR	1686:6	1686:30	8	sp -> subsamplingcorrect == 0
FIELD	1686:6	1686:10	9	sp -> subsamplingcorrect
LEAF_NODE	1686:6	1686:6	10	sp
LEAF_NODE	1686:8	1686:8	10	->
LEAF_NODE	1686:10	1686:10	10	subsamplingcorrect
EQ_OPERATOR	1686:28	1686:28	9	==
LEAF_NODE	1686:28	1686:28	10	==
FIELD	1686:30	1686:30	9	0
LEAF_NODE	1686:30	1686:30	10	0
LEAF_NODE	1686:31	1686:31	7	)
STATEMENTS	1687:3	1687:3	7	
EXPR_STATEMENT	1687:3	1687:77	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" ) ;
EXPR	1687:3	1687:3	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" )
FUNCTION_CALL	1687:3	1687:76	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOF marker in JPEG data" )
CALLEE	1687:3	1687:3	11	TIFFErrorExt
LEAF_NODE	1687:3	1687:3	12	TIFFErrorExt
LEAF_NODE	1687:15	1687:15	11	(
ARGUMENT	1687:16	1687:16	11	tif -> tif_clientdata
FIELD	1687:16	1687:21	12	tif -> tif_clientdata
LEAF_NODE	1687:16	1687:16	13	tif
LEAF_NODE	1687:19	1687:19	13	->
LEAF_NODE	1687:21	1687:21	13	tif_clientdata
LEAF_NODE	1687:35	1687:35	11	,
ARGUMENT	1687:36	1687:36	11	module
FIELD	1687:36	1687:36	12	module
LEAF_NODE	1687:36	1687:36	13	module
LEAF_NODE	1687:42	1687:42	11	,
ARGUMENT	1687:43	1687:43	11	"Corrupt SOF marker in JPEG data"
FIELD	1687:43	1687:43	12	"Corrupt SOF marker in JPEG data"
LEAF_NODE	1687:43	1687:43	13	"Corrupt SOF marker in JPEG data"
LEAF_NODE	1687:76	1687:76	11	)
LEAF_NODE	1687:77	1687:77	9	;
JUMP_STATEMENT	1688:2	1688:11	6	return ( 0 ) ;
KEYWORD	1688:2	1688:2	7	return
LEAF_NODE	1688:2	1688:2	8	return
DESTINATION	1688:8	1688:8	7	( 0 )
EXPR	1688:8	1688:10	8	( 0 )
LEAF_NODE	1688:8	1688:8	9	(
FIELD	1688:9	1688:9	9	0
LEAF_NODE	1688:9	1688:9	10	0
LEAF_NODE	1688:10	1688:10	9	)
LEAF_NODE	1688:11	1688:11	7	;
LEAF_NODE	1689:1	1689:1	5	}
ITERATION	1692:1	1693:1	3	
KEYWORD	1692:1	1692:1	4	for
LEAF_NODE	1692:1	1692:1	5	for
LEAF_NODE	1692:5	1692:5	4	(
FOR_INIT	1692:6	1692:9	4	q = 0 ;
EXPR	1692:6	1692:6	5	q = 0
ASSIGN	1692:6	1692:8	6	q = 0
LVAL	1692:6	1692:6	7	q
FIELD	1692:6	1692:6	8	q
LEAF_NODE	1692:6	1692:6	9	q
ASSIGN_OP	1692:7	1692:7	7	=
LEAF_NODE	1692:7	1692:7	8	=
RVAL	1692:8	1692:8	7	0
FIELD	1692:8	1692:8	8	0
LEAF_NODE	1692:8	1692:8	9	0
LEAF_NODE	1692:9	1692:9	5	;
CONDITION	1692:11	1692:11	4	q < n
EXPR	1692:11	1692:13	5	q < n
FIELD	1692:11	1692:11	6	q
LEAF_NODE	1692:11	1692:11	7	q
REL_OPERATOR	1692:12	1692:12	6	<
LEAF_NODE	1692:12	1692:12	7	<
FIELD	1692:13	1692:13	6	n
LEAF_NODE	1692:13	1692:13	7	n
LEAF_NODE	1692:14	1692:14	4	;
FOR_EXPR	1692:16	1692:16	4	q ++
EXPR	1692:16	1692:16	5	q ++
FIELD	1692:16	1692:17	6	q ++
LEAF_NODE	1692:16	1692:16	7	q
LEAF_NODE	1692:17	1692:17	7	++
LEAF_NODE	1692:19	1692:19	4	)
STATEMENTS	1693:1	1746:1	4	
LEAF_NODE	1693:1	1693:1	5	{
STATEMENTS	1695:2	1744:2	5	
SELECTION	1695:2	1696:3	6	
KEYWORD	1695:2	1695:2	7	if
LEAF_NODE	1695:2	1695:2	8	if
LEAF_NODE	1695:5	1695:5	7	(
CONDITION	1695:6	1695:6	7	OJPEGReadByte ( sp , & o ) == 0
EXPR	1695:6	1695:28	8	OJPEGReadByte ( sp , & o ) == 0
FUNCTION_CALL	1695:6	1695:25	9	OJPEGReadByte ( sp , & o )
CALLEE	1695:6	1695:6	10	OJPEGReadByte
LEAF_NODE	1695:6	1695:6	11	OJPEGReadByte
LEAF_NODE	1695:19	1695:19	10	(
ARGUMENT	1695:20	1695:20	10	sp
FIELD	1695:20	1695:20	11	sp
LEAF_NODE	1695:20	1695:20	12	sp
LEAF_NODE	1695:22	1695:22	10	,
ARGUMENT	1695:23	1695:23	10	& o
UNARY_EXPR	1695:23	1695:24	11	& o
UNARY_OPERATOR	1695:23	1695:23	12	&
LEAF_NODE	1695:23	1695:23	13	&
FIELD	1695:24	1695:24	12	o
LEAF_NODE	1695:24	1695:24	13	o
LEAF_NODE	1695:25	1695:25	10	)
EQ_OPERATOR	1695:26	1695:26	9	==
LEAF_NODE	1695:26	1695:26	10	==
FIELD	1695:28	1695:28	9	0
LEAF_NODE	1695:28	1695:28	10	0
LEAF_NODE	1695:29	1695:29	7	)
STATEMENTS	1696:3	1696:3	7	
JUMP_STATEMENT	1696:3	1696:12	8	return ( 0 ) ;
KEYWORD	1696:3	1696:3	9	return
LEAF_NODE	1696:3	1696:3	10	return
DESTINATION	1696:9	1696:9	9	( 0 )
EXPR	1696:9	1696:11	10	( 0 )
LEAF_NODE	1696:9	1696:9	11	(
FIELD	1696:10	1696:10	11	0
LEAF_NODE	1696:10	1696:10	12	0
LEAF_NODE	1696:11	1696:11	11	)
LEAF_NODE	1696:12	1696:12	9	;
SELECTION	1697:2	1698:3	6	
KEYWORD	1697:2	1697:2	7	if
LEAF_NODE	1697:2	1697:2	8	if
LEAF_NODE	1697:5	1697:5	7	(
CONDITION	1697:6	1697:6	7	sp -> subsamplingcorrect == 0
EXPR	1697:6	1697:30	8	sp -> subsamplingcorrect == 0
FIELD	1697:6	1697:10	9	sp -> subsamplingcorrect
LEAF_NODE	1697:6	1697:6	10	sp
LEAF_NODE	1697:8	1697:8	10	->
LEAF_NODE	1697:10	1697:10	10	subsamplingcorrect
EQ_OPERATOR	1697:28	1697:28	9	==
LEAF_NODE	1697:28	1697:28	10	==
FIELD	1697:30	1697:30	9	0
LEAF_NODE	1697:30	1697:30	10	0
LEAF_NODE	1697:31	1697:31	7	)
STATEMENTS	1698:3	1698:3	7	
EXPR_STATEMENT	1698:3	1698:17	8	sp -> sof_c [ q ] = o ;
EXPR	1698:3	1698:3	9	sp -> sof_c [ q ] = o
ASSIGN	1698:3	1698:16	10	sp -> sof_c [ q ] = o
LVAL	1698:3	1698:3	11	sp -> sof_c [ q ]
FIELD	1698:3	1698:14	12	sp -> sof_c [ q ]
LEAF_NODE	1698:3	1698:3	13	sp
LEAF_NODE	1698:5	1698:5	13	->
LEAF_NODE	1698:7	1698:7	13	sof_c
LEAF_NODE	1698:12	1698:12	13	[
EXPR	1698:13	1698:13	13	q
FIELD	1698:13	1698:13	14	q
LEAF_NODE	1698:13	1698:13	15	q
LEAF_NODE	1698:14	1698:14	13	]
ASSIGN_OP	1698:15	1698:15	11	=
LEAF_NODE	1698:15	1698:15	12	=
RVAL	1698:16	1698:16	11	o
FIELD	1698:16	1698:16	12	o
LEAF_NODE	1698:16	1698:16	13	o
LEAF_NODE	1698:17	1698:17	9	;
SELECTION	1700:2	1701:3	6	
KEYWORD	1700:2	1700:2	7	if
LEAF_NODE	1700:2	1700:2	8	if
LEAF_NODE	1700:5	1700:5	7	(
CONDITION	1700:6	1700:6	7	OJPEGReadByte ( sp , & o ) == 0
EXPR	1700:6	1700:28	8	OJPEGReadByte ( sp , & o ) == 0
FUNCTION_CALL	1700:6	1700:25	9	OJPEGReadByte ( sp , & o )
CALLEE	1700:6	1700:6	10	OJPEGReadByte
LEAF_NODE	1700:6	1700:6	11	OJPEGReadByte
LEAF_NODE	1700:19	1700:19	10	(
ARGUMENT	1700:20	1700:20	10	sp
FIELD	1700:20	1700:20	11	sp
LEAF_NODE	1700:20	1700:20	12	sp
LEAF_NODE	1700:22	1700:22	10	,
ARGUMENT	1700:23	1700:23	10	& o
UNARY_EXPR	1700:23	1700:24	11	& o
UNARY_OPERATOR	1700:23	1700:23	12	&
LEAF_NODE	1700:23	1700:23	13	&
FIELD	1700:24	1700:24	12	o
LEAF_NODE	1700:24	1700:24	13	o
LEAF_NODE	1700:25	1700:25	10	)
EQ_OPERATOR	1700:26	1700:26	9	==
LEAF_NODE	1700:26	1700:26	10	==
FIELD	1700:28	1700:28	9	0
LEAF_NODE	1700:28	1700:28	10	0
LEAF_NODE	1700:29	1700:29	7	)
STATEMENTS	1701:3	1701:3	7	
JUMP_STATEMENT	1701:3	1701:12	8	return ( 0 ) ;
KEYWORD	1701:3	1701:3	9	return
LEAF_NODE	1701:3	1701:3	10	return
DESTINATION	1701:9	1701:9	9	( 0 )
EXPR	1701:9	1701:11	10	( 0 )
LEAF_NODE	1701:9	1701:9	11	(
FIELD	1701:10	1701:10	11	0
LEAF_NODE	1701:10	1701:10	12	0
LEAF_NODE	1701:11	1701:11	11	)
LEAF_NODE	1701:12	1701:12	9	;
SELECTION	1702:2	1703:2	6	
KEYWORD	1702:2	1702:2	7	if
LEAF_NODE	1702:2	1702:2	8	if
LEAF_NODE	1702:5	1702:5	7	(
CONDITION	1702:6	1702:6	7	sp -> subsamplingcorrect != 0
EXPR	1702:6	1702:30	8	sp -> subsamplingcorrect != 0
FIELD	1702:6	1702:10	9	sp -> subsamplingcorrect
LEAF_NODE	1702:6	1702:6	10	sp
LEAF_NODE	1702:8	1702:8	10	->
LEAF_NODE	1702:10	1702:10	10	subsamplingcorrect
EQ_OPERATOR	1702:28	1702:28	9	!=
LEAF_NODE	1702:28	1702:28	10	!=
FIELD	1702:30	1702:30	9	0
LEAF_NODE	1702:30	1702:30	10	0
LEAF_NODE	1702:31	1702:31	7	)
STATEMENTS	1703:2	1717:2	7	
LEAF_NODE	1703:2	1703:2	8	{
STATEMENTS	1704:3	1712:3	8	
SELECTION	1704:3	1705:3	9	
KEYWORD	1704:3	1704:3	10	if
LEAF_NODE	1704:3	1704:3	11	if
LEAF_NODE	1704:6	1704:6	10	(
CONDITION	1704:7	1704:7	10	q == 0
EXPR	1704:7	1704:10	11	q == 0
FIELD	1704:7	1704:7	12	q
LEAF_NODE	1704:7	1704:7	13	q
EQ_OPERATOR	1704:8	1704:8	12	==
LEAF_NODE	1704:8	1704:8	13	==
FIELD	1704:10	1704:10	12	0
LEAF_NODE	1704:10	1704:10	13	0
LEAF_NODE	1704:11	1704:11	10	)
STATEMENTS	1705:3	1711:3	10	
LEAF_NODE	1705:3	1705:3	11	{
STATEMENTS	1706:4	1708:4	11	
EXPR_STATEMENT	1706:4	1706:30	12	sp -> subsampling_hor = ( o >> 4 ) ;
EXPR	1706:4	1706:4	13	sp -> subsampling_hor = ( o >> 4 )
ASSIGN	1706:4	1706:24	14	sp -> subsampling_hor = ( o >> 4 )
LVAL	1706:4	1706:4	15	sp -> subsampling_hor
FIELD	1706:4	1706:8	16	sp -> subsampling_hor
LEAF_NODE	1706:4	1706:4	17	sp
LEAF_NODE	1706:6	1706:6	17	->
LEAF_NODE	1706:8	1706:8	17	subsampling_hor
ASSIGN_OP	1706:23	1706:23	15	=
LEAF_NODE	1706:23	1706:23	16	=
RVAL	1706:24	1706:29	15	( o >> 4 )
LEAF_NODE	1706:24	1706:24	16	(
FIELD	1706:25	1706:25	16	o
LEAF_NODE	1706:25	1706:25	17	o
LEAF_NODE	1706:26	1706:26	16	>>
FIELD	1706:28	1706:28	16	4
LEAF_NODE	1706:28	1706:28	17	4
LEAF_NODE	1706:29	1706:29	16	)
LEAF_NODE	1706:30	1706:30	13	;
EXPR_STATEMENT	1707:4	1707:30	12	sp -> subsampling_ver = ( o & 15 ) ;
EXPR	1707:4	1707:4	13	sp -> subsampling_ver = ( o & 15 )
ASSIGN	1707:4	1707:24	14	sp -> subsampling_ver = ( o & 15 )
LVAL	1707:4	1707:4	15	sp -> subsampling_ver
FIELD	1707:4	1707:8	16	sp -> subsampling_ver
LEAF_NODE	1707:4	1707:4	17	sp
LEAF_NODE	1707:6	1707:6	17	->
LEAF_NODE	1707:8	1707:8	17	subsampling_ver
ASSIGN_OP	1707:23	1707:23	15	=
LEAF_NODE	1707:23	1707:23	16	=
RVAL	1707:24	1707:29	15	( o & 15 )
LEAF_NODE	1707:24	1707:24	16	(
FIELD	1707:25	1707:25	16	o
LEAF_NODE	1707:25	1707:25	17	o
LEAF_NODE	1707:26	1707:26	16	&
FIELD	1707:27	1707:27	16	15
LEAF_NODE	1707:27	1707:27	17	15
LEAF_NODE	1707:29	1707:29	16	)
LEAF_NODE	1707:30	1707:30	13	;
SELECTION	1708:4	1710:5	12	
KEYWORD	1708:4	1708:4	13	if
LEAF_NODE	1708:4	1708:4	14	if
LEAF_NODE	1708:7	1708:7	13	(
CONDITION	1708:8	1708:8	13	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) ) || ( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
EXPR	1708:8	1708:8	14	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) ) || ( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
OR	1708:8	1709:5	15	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) ) || ( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
EXPR	1708:8	1708:89	16	( ( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 ) )
LEAF_NODE	1708:8	1708:8	17	(
AND	1708:9	1708:37	17	( sp -> subsampling_hor != 1 ) && ( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 )
EXPR	1708:9	1708:32	18	( sp -> subsampling_hor != 1 )
LEAF_NODE	1708:9	1708:9	19	(
FIELD	1708:10	1708:14	19	sp -> subsampling_hor
LEAF_NODE	1708:10	1708:10	20	sp
LEAF_NODE	1708:12	1708:12	20	->
LEAF_NODE	1708:14	1708:14	20	subsampling_hor
EQ_OPERATOR	1708:29	1708:29	19	!=
LEAF_NODE	1708:29	1708:29	20	!=
FIELD	1708:31	1708:31	19	1
LEAF_NODE	1708:31	1708:31	20	1
LEAF_NODE	1708:32	1708:32	19	)
LEAF_NODE	1708:34	1708:34	18	&&
EXPR	1708:37	1708:37	18	( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 )
AND	1708:37	1708:65	19	( sp -> subsampling_hor != 2 ) && ( sp -> subsampling_hor != 4 )
EXPR	1708:37	1708:60	20	( sp -> subsampling_hor != 2 )
LEAF_NODE	1708:37	1708:37	21	(
FIELD	1708:38	1708:42	21	sp -> subsampling_hor
LEAF_NODE	1708:38	1708:38	22	sp
LEAF_NODE	1708:40	1708:40	22	->
LEAF_NODE	1708:42	1708:42	22	subsampling_hor
EQ_OPERATOR	1708:57	1708:57	21	!=
LEAF_NODE	1708:57	1708:57	22	!=
FIELD	1708:59	1708:59	21	2
LEAF_NODE	1708:59	1708:59	22	2
LEAF_NODE	1708:60	1708:60	21	)
LEAF_NODE	1708:62	1708:62	20	&&
EXPR	1708:65	1708:88	20	( sp -> subsampling_hor != 4 )
LEAF_NODE	1708:65	1708:65	21	(
FIELD	1708:66	1708:70	21	sp -> subsampling_hor
LEAF_NODE	1708:66	1708:66	22	sp
LEAF_NODE	1708:68	1708:68	22	->
LEAF_NODE	1708:70	1708:70	22	subsampling_hor
EQ_OPERATOR	1708:85	1708:85	21	!=
LEAF_NODE	1708:85	1708:85	22	!=
FIELD	1708:87	1708:87	21	4
LEAF_NODE	1708:87	1708:87	22	4
LEAF_NODE	1708:88	1708:88	21	)
LEAF_NODE	1708:89	1708:89	17	)
LEAF_NODE	1708:91	1708:91	16	||
EXPR	1709:5	1709:86	16	( ( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 ) )
LEAF_NODE	1709:5	1709:5	17	(
AND	1709:6	1709:34	17	( sp -> subsampling_ver != 1 ) && ( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 )
EXPR	1709:6	1709:29	18	( sp -> subsampling_ver != 1 )
LEAF_NODE	1709:6	1709:6	19	(
FIELD	1709:7	1709:11	19	sp -> subsampling_ver
LEAF_NODE	1709:7	1709:7	20	sp
LEAF_NODE	1709:9	1709:9	20	->
LEAF_NODE	1709:11	1709:11	20	subsampling_ver
EQ_OPERATOR	1709:26	1709:26	19	!=
LEAF_NODE	1709:26	1709:26	20	!=
FIELD	1709:28	1709:28	19	1
LEAF_NODE	1709:28	1709:28	20	1
LEAF_NODE	1709:29	1709:29	19	)
LEAF_NODE	1709:31	1709:31	18	&&
EXPR	1709:34	1709:34	18	( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 )
AND	1709:34	1709:62	19	( sp -> subsampling_ver != 2 ) && ( sp -> subsampling_ver != 4 )
EXPR	1709:34	1709:57	20	( sp -> subsampling_ver != 2 )
LEAF_NODE	1709:34	1709:34	21	(
FIELD	1709:35	1709:39	21	sp -> subsampling_ver
LEAF_NODE	1709:35	1709:35	22	sp
LEAF_NODE	1709:37	1709:37	22	->
LEAF_NODE	1709:39	1709:39	22	subsampling_ver
EQ_OPERATOR	1709:54	1709:54	21	!=
LEAF_NODE	1709:54	1709:54	22	!=
FIELD	1709:56	1709:56	21	2
LEAF_NODE	1709:56	1709:56	22	2
LEAF_NODE	1709:57	1709:57	21	)
LEAF_NODE	1709:59	1709:59	20	&&
EXPR	1709:62	1709:85	20	( sp -> subsampling_ver != 4 )
LEAF_NODE	1709:62	1709:62	21	(
FIELD	1709:63	1709:67	21	sp -> subsampling_ver
LEAF_NODE	1709:63	1709:63	22	sp
LEAF_NODE	1709:65	1709:65	22	->
LEAF_NODE	1709:67	1709:67	22	subsampling_ver
EQ_OPERATOR	1709:82	1709:82	21	!=
LEAF_NODE	1709:82	1709:82	22	!=
FIELD	1709:84	1709:84	21	4
LEAF_NODE	1709:84	1709:84	22	4
LEAF_NODE	1709:85	1709:85	21	)
LEAF_NODE	1709:86	1709:86	17	)
LEAF_NODE	1709:87	1709:87	13	)
STATEMENTS	1710:5	1710:5	13	
EXPR_STATEMENT	1710:5	1710:63	14	sp -> subsampling_force_desubsampling_inside_decompression = 1 ;
EXPR	1710:5	1710:5	15	sp -> subsampling_force_desubsampling_inside_decompression = 1
ASSIGN	1710:5	1710:62	16	sp -> subsampling_force_desubsampling_inside_decompression = 1
LVAL	1710:5	1710:5	17	sp -> subsampling_force_desubsampling_inside_decompression
FIELD	1710:5	1710:9	18	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1710:5	1710:5	19	sp
LEAF_NODE	1710:7	1710:7	19	->
LEAF_NODE	1710:9	1710:9	19	subsampling_force_desubsampling_inside_decompression
ASSIGN_OP	1710:61	1710:61	17	=
LEAF_NODE	1710:61	1710:61	18	=
RVAL	1710:62	1710:62	17	1
FIELD	1710:62	1710:62	18	1
LEAF_NODE	1710:62	1710:62	19	1
LEAF_NODE	1710:63	1710:63	15	;
LEAF_NODE	1711:3	1711:3	11	}
SELECTION	1712:3	1713:3	9	
KEYWORD	1712:3	1712:3	10	else
LEAF_NODE	1712:3	1712:3	11	else
STATEMENTS	1713:3	1716:3	10	
LEAF_NODE	1713:3	1713:3	11	{
STATEMENTS	1714:4	1714:4	11	
SELECTION	1714:4	1715:5	12	
KEYWORD	1714:4	1714:4	13	if
LEAF_NODE	1714:4	1714:4	14	if
LEAF_NODE	1714:7	1714:7	13	(
CONDITION	1714:8	1714:8	13	o != 17
EXPR	1714:8	1714:11	14	o != 17
FIELD	1714:8	1714:8	15	o
LEAF_NODE	1714:8	1714:8	16	o
EQ_OPERATOR	1714:9	1714:9	15	!=
LEAF_NODE	1714:9	1714:9	16	!=
FIELD	1714:11	1714:11	15	17
LEAF_NODE	1714:11	1714:11	16	17
LEAF_NODE	1714:13	1714:13	13	)
STATEMENTS	1715:5	1715:5	13	
EXPR_STATEMENT	1715:5	1715:63	14	sp -> subsampling_force_desubsampling_inside_decompression = 1 ;
EXPR	1715:5	1715:5	15	sp -> subsampling_force_desubsampling_inside_decompression = 1
ASSIGN	1715:5	1715:62	16	sp -> subsampling_force_desubsampling_inside_decompression = 1
LVAL	1715:5	1715:5	17	sp -> subsampling_force_desubsampling_inside_decompression
FIELD	1715:5	1715:9	18	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1715:5	1715:5	19	sp
LEAF_NODE	1715:7	1715:7	19	->
LEAF_NODE	1715:9	1715:9	19	subsampling_force_desubsampling_inside_decompression
ASSIGN_OP	1715:61	1715:61	17	=
LEAF_NODE	1715:61	1715:61	18	=
RVAL	1715:62	1715:62	17	1
FIELD	1715:62	1715:62	18	1
LEAF_NODE	1715:62	1715:62	19	1
LEAF_NODE	1715:63	1715:63	15	;
LEAF_NODE	1716:3	1716:3	11	}
LEAF_NODE	1717:2	1717:2	8	}
SELECTION	1718:2	1719:2	6	
KEYWORD	1718:2	1718:2	7	else
LEAF_NODE	1718:2	1718:2	8	else
STATEMENTS	1719:2	1740:2	7	
LEAF_NODE	1719:2	1719:2	8	{
STATEMENTS	1720:3	1721:3	8	
EXPR_STATEMENT	1720:3	1720:18	9	sp -> sof_hv [ q ] = o ;
EXPR	1720:3	1720:3	10	sp -> sof_hv [ q ] = o
ASSIGN	1720:3	1720:17	11	sp -> sof_hv [ q ] = o
LVAL	1720:3	1720:3	12	sp -> sof_hv [ q ]
FIELD	1720:3	1720:15	13	sp -> sof_hv [ q ]
LEAF_NODE	1720:3	1720:3	14	sp
LEAF_NODE	1720:5	1720:5	14	->
LEAF_NODE	1720:7	1720:7	14	sof_hv
LEAF_NODE	1720:13	1720:13	14	[
EXPR	1720:14	1720:14	14	q
FIELD	1720:14	1720:14	15	q
LEAF_NODE	1720:14	1720:14	16	q
LEAF_NODE	1720:15	1720:15	14	]
ASSIGN_OP	1720:16	1720:16	12	=
LEAF_NODE	1720:16	1720:16	13	=
RVAL	1720:17	1720:17	12	o
FIELD	1720:17	1720:17	13	o
LEAF_NODE	1720:17	1720:17	14	o
LEAF_NODE	1720:18	1720:18	10	;
SELECTION	1721:3	1722:3	9	
KEYWORD	1721:3	1721:3	10	if
LEAF_NODE	1721:3	1721:3	11	if
LEAF_NODE	1721:6	1721:6	10	(
CONDITION	1721:7	1721:7	10	sp -> subsampling_force_desubsampling_inside_decompression == 0
EXPR	1721:7	1721:65	11	sp -> subsampling_force_desubsampling_inside_decompression == 0
FIELD	1721:7	1721:11	12	sp -> subsampling_force_desubsampling_inside_decompression
LEAF_NODE	1721:7	1721:7	13	sp
LEAF_NODE	1721:9	1721:9	13	->
LEAF_NODE	1721:11	1721:11	13	subsampling_force_desubsampling_inside_decompression
EQ_OPERATOR	1721:63	1721:63	12	==
LEAF_NODE	1721:63	1721:63	13	==
FIELD	1721:65	1721:65	12	0
LEAF_NODE	1721:65	1721:65	13	0
LEAF_NODE	1721:66	1721:66	10	)
STATEMENTS	1722:3	1739:3	10	
LEAF_NODE	1722:3	1722:3	11	{
STATEMENTS	1723:4	1731:4	11	
SELECTION	1723:4	1724:4	12	
KEYWORD	1723:4	1723:4	13	if
LEAF_NODE	1723:4	1723:4	14	if
LEAF_NODE	1723:7	1723:7	13	(
CONDITION	1723:8	1723:8	13	q == 0
EXPR	1723:8	1723:11	14	q == 0
FIELD	1723:8	1723:8	15	q
LEAF_NODE	1723:8	1723:8	16	q
EQ_OPERATOR	1723:9	1723:9	15	==
LEAF_NODE	1723:9	1723:9	16	==
FIELD	1723:11	1723:11	15	0
LEAF_NODE	1723:11	1723:11	16	0
LEAF_NODE	1723:12	1723:12	13	)
STATEMENTS	1724:4	1730:4	13	
LEAF_NODE	1724:4	1724:4	14	{
STATEMENTS	1725:5	1725:5	14	
SELECTION	1725:5	1726:5	15	
KEYWORD	1725:5	1725:5	16	if
LEAF_NODE	1725:5	1725:5	17	if
LEAF_NODE	1725:8	1725:8	16	(
CONDITION	1725:9	1725:9	16	o != ( ( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver )
EXPR	1725:9	1725:57	17	o != ( ( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver )
FIELD	1725:9	1725:9	18	o
LEAF_NODE	1725:9	1725:9	19	o
EQ_OPERATOR	1725:10	1725:10	18	!=
LEAF_NODE	1725:10	1725:10	19	!=
LEAF_NODE	1725:12	1725:12	18	(
BIT_OR	1725:13	1725:38	18	( sp -> subsampling_hor << 4 ) | sp -> subsampling_ver
BIT_OR_ELEM	1725:13	1725:36	19	( sp -> subsampling_hor << 4 )
LEAF_NODE	1725:13	1725:13	20	(
FIELD	1725:14	1725:18	20	sp -> subsampling_hor
LEAF_NODE	1725:14	1725:14	21	sp
LEAF_NODE	1725:16	1725:16	21	->
LEAF_NODE	1725:18	1725:18	21	subsampling_hor
LEAF_NODE	1725:33	1725:33	20	<<
FIELD	1725:35	1725:35	20	4
LEAF_NODE	1725:35	1725:35	21	4
LEAF_NODE	1725:36	1725:36	20	)
LEAF_NODE	1725:37	1725:37	19	|
BIT_OR_ELEM	1725:38	1725:38	19	sp -> subsampling_ver
FIELD	1725:38	1725:42	20	sp -> subsampling_ver
LEAF_NODE	1725:38	1725:38	21	sp
LEAF_NODE	1725:40	1725:40	21	->
LEAF_NODE	1725:42	1725:42	21	subsampling_ver
LEAF_NODE	1725:57	1725:57	18	)
LEAF_NODE	1725:58	1725:58	16	)
STATEMENTS	1726:5	1729:5	16	
LEAF_NODE	1726:5	1726:5	17	{
STATEMENTS	1727:6	1728:6	17	
EXPR_STATEMENT	1727:6	1727:109	18	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected subsampling values" ) ;
EXPR	1727:6	1727:6	19	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected subsampling values" )
FUNCTION_CALL	1727:6	1727:108	20	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected subsampling values" )
CALLEE	1727:6	1727:6	21	TIFFErrorExt
LEAF_NODE	1727:6	1727:6	22	TIFFErrorExt
LEAF_NODE	1727:18	1727:18	21	(
ARGUMENT	1727:19	1727:19	21	tif -> tif_clientdata
FIELD	1727:19	1727:24	22	tif -> tif_clientdata
LEAF_NODE	1727:19	1727:19	23	tif
LEAF_NODE	1727:22	1727:22	23	->
LEAF_NODE	1727:24	1727:24	23	tif_clientdata
LEAF_NODE	1727:38	1727:38	21	,
ARGUMENT	1727:39	1727:39	21	module
FIELD	1727:39	1727:39	22	module
LEAF_NODE	1727:39	1727:39	23	module
LEAF_NODE	1727:45	1727:45	21	,
ARGUMENT	1727:46	1727:46	21	"JPEG compressed data indicates unexpected subsampling values"
FIELD	1727:46	1727:46	22	"JPEG compressed data indicates unexpected subsampling values"
LEAF_NODE	1727:46	1727:46	23	"JPEG compressed data indicates unexpected subsampling values"
LEAF_NODE	1727:108	1727:108	21	)
LEAF_NODE	1727:109	1727:109	19	;
JUMP_STATEMENT	1728:6	1728:15	18	return ( 0 ) ;
KEYWORD	1728:6	1728:6	19	return
LEAF_NODE	1728:6	1728:6	20	return
DESTINATION	1728:12	1728:12	19	( 0 )
EXPR	1728:12	1728:14	20	( 0 )
LEAF_NODE	1728:12	1728:12	21	(
FIELD	1728:13	1728:13	21	0
LEAF_NODE	1728:13	1728:13	22	0
LEAF_NODE	1728:14	1728:14	21	)
LEAF_NODE	1728:15	1728:15	19	;
LEAF_NODE	1729:5	1729:5	17	}
LEAF_NODE	1730:4	1730:4	14	}
SELECTION	1731:4	1732:4	12	
KEYWORD	1731:4	1731:4	13	else
LEAF_NODE	1731:4	1731:4	14	else
STATEMENTS	1732:4	1738:4	13	
LEAF_NODE	1732:4	1732:4	14	{
STATEMENTS	1733:5	1733:5	14	
SELECTION	1733:5	1734:5	15	
KEYWORD	1733:5	1733:5	16	if
LEAF_NODE	1733:5	1733:5	17	if
LEAF_NODE	1733:8	1733:8	16	(
CONDITION	1733:9	1733:9	16	o != 17
EXPR	1733:9	1733:12	17	o != 17
FIELD	1733:9	1733:9	18	o
LEAF_NODE	1733:9	1733:9	19	o
EQ_OPERATOR	1733:10	1733:10	18	!=
LEAF_NODE	1733:10	1733:10	19	!=
FIELD	1733:12	1733:12	18	17
LEAF_NODE	1733:12	1733:12	19	17
LEAF_NODE	1733:14	1733:14	16	)
STATEMENTS	1734:5	1737:5	16	
LEAF_NODE	1734:5	1734:5	17	{
STATEMENTS	1735:6	1736:6	17	
EXPR_STATEMENT	1735:6	1735:109	18	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected subsampling values" ) ;
EXPR	1735:6	1735:6	19	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected subsampling values" )
FUNCTION_CALL	1735:6	1735:108	20	TIFFErrorExt ( tif -> tif_clientdata , module , "JPEG compressed data indicates unexpected subsampling values" )
CALLEE	1735:6	1735:6	21	TIFFErrorExt
LEAF_NODE	1735:6	1735:6	22	TIFFErrorExt
LEAF_NODE	1735:18	1735:18	21	(
ARGUMENT	1735:19	1735:19	21	tif -> tif_clientdata
FIELD	1735:19	1735:24	22	tif -> tif_clientdata
LEAF_NODE	1735:19	1735:19	23	tif
LEAF_NODE	1735:22	1735:22	23	->
LEAF_NODE	1735:24	1735:24	23	tif_clientdata
LEAF_NODE	1735:38	1735:38	21	,
ARGUMENT	1735:39	1735:39	21	module
FIELD	1735:39	1735:39	22	module
LEAF_NODE	1735:39	1735:39	23	module
LEAF_NODE	1735:45	1735:45	21	,
ARGUMENT	1735:46	1735:46	21	"JPEG compressed data indicates unexpected subsampling values"
FIELD	1735:46	1735:46	22	"JPEG compressed data indicates unexpected subsampling values"
LEAF_NODE	1735:46	1735:46	23	"JPEG compressed data indicates unexpected subsampling values"
LEAF_NODE	1735:108	1735:108	21	)
LEAF_NODE	1735:109	1735:109	19	;
JUMP_STATEMENT	1736:6	1736:15	18	return ( 0 ) ;
KEYWORD	1736:6	1736:6	19	return
LEAF_NODE	1736:6	1736:6	20	return
DESTINATION	1736:12	1736:12	19	( 0 )
EXPR	1736:12	1736:14	20	( 0 )
LEAF_NODE	1736:12	1736:12	21	(
FIELD	1736:13	1736:13	21	0
LEAF_NODE	1736:13	1736:13	22	0
LEAF_NODE	1736:14	1736:14	21	)
LEAF_NODE	1736:15	1736:15	19	;
LEAF_NODE	1737:5	1737:5	17	}
LEAF_NODE	1738:4	1738:4	14	}
LEAF_NODE	1739:3	1739:3	11	}
LEAF_NODE	1740:2	1740:2	8	}
SELECTION	1742:2	1743:3	6	
KEYWORD	1742:2	1742:2	7	if
LEAF_NODE	1742:2	1742:2	8	if
LEAF_NODE	1742:5	1742:5	7	(
CONDITION	1742:6	1742:6	7	OJPEGReadByte ( sp , & o ) == 0
EXPR	1742:6	1742:28	8	OJPEGReadByte ( sp , & o ) == 0
FUNCTION_CALL	1742:6	1742:25	9	OJPEGReadByte ( sp , & o )
CALLEE	1742:6	1742:6	10	OJPEGReadByte
LEAF_NODE	1742:6	1742:6	11	OJPEGReadByte
LEAF_NODE	1742:19	1742:19	10	(
ARGUMENT	1742:20	1742:20	10	sp
FIELD	1742:20	1742:20	11	sp
LEAF_NODE	1742:20	1742:20	12	sp
LEAF_NODE	1742:22	1742:22	10	,
ARGUMENT	1742:23	1742:23	10	& o
UNARY_EXPR	1742:23	1742:24	11	& o
UNARY_OPERATOR	1742:23	1742:23	12	&
LEAF_NODE	1742:23	1742:23	13	&
FIELD	1742:24	1742:24	12	o
LEAF_NODE	1742:24	1742:24	13	o
LEAF_NODE	1742:25	1742:25	10	)
EQ_OPERATOR	1742:26	1742:26	9	==
LEAF_NODE	1742:26	1742:26	10	==
FIELD	1742:28	1742:28	9	0
LEAF_NODE	1742:28	1742:28	10	0
LEAF_NODE	1742:29	1742:29	7	)
STATEMENTS	1743:3	1743:3	7	
JUMP_STATEMENT	1743:3	1743:12	8	return ( 0 ) ;
KEYWORD	1743:3	1743:3	9	return
LEAF_NODE	1743:3	1743:3	10	return
DESTINATION	1743:9	1743:9	9	( 0 )
EXPR	1743:9	1743:11	10	( 0 )
LEAF_NODE	1743:9	1743:9	11	(
FIELD	1743:10	1743:10	11	0
LEAF_NODE	1743:10	1743:10	12	0
LEAF_NODE	1743:11	1743:11	11	)
LEAF_NODE	1743:12	1743:12	9	;
SELECTION	1744:2	1745:3	6	
KEYWORD	1744:2	1744:2	7	if
LEAF_NODE	1744:2	1744:2	8	if
LEAF_NODE	1744:5	1744:5	7	(
CONDITION	1744:6	1744:6	7	sp -> subsamplingcorrect == 0
EXPR	1744:6	1744:30	8	sp -> subsamplingcorrect == 0
FIELD	1744:6	1744:10	9	sp -> subsamplingcorrect
LEAF_NODE	1744:6	1744:6	10	sp
LEAF_NODE	1744:8	1744:8	10	->
LEAF_NODE	1744:10	1744:10	10	subsamplingcorrect
EQ_OPERATOR	1744:28	1744:28	9	==
LEAF_NODE	1744:28	1744:28	10	==
FIELD	1744:30	1744:30	9	0
LEAF_NODE	1744:30	1744:30	10	0
LEAF_NODE	1744:31	1744:31	7	)
STATEMENTS	1745:3	1745:3	7	
EXPR_STATEMENT	1745:3	1745:18	8	sp -> sof_tq [ q ] = o ;
EXPR	1745:3	1745:3	9	sp -> sof_tq [ q ] = o
ASSIGN	1745:3	1745:17	10	sp -> sof_tq [ q ] = o
LVAL	1745:3	1745:3	11	sp -> sof_tq [ q ]
FIELD	1745:3	1745:15	12	sp -> sof_tq [ q ]
LEAF_NODE	1745:3	1745:3	13	sp
LEAF_NODE	1745:5	1745:5	13	->
LEAF_NODE	1745:7	1745:7	13	sof_tq
LEAF_NODE	1745:13	1745:13	13	[
EXPR	1745:14	1745:14	13	q
FIELD	1745:14	1745:14	14	q
LEAF_NODE	1745:14	1745:14	15	q
LEAF_NODE	1745:15	1745:15	13	]
ASSIGN_OP	1745:16	1745:16	11	=
LEAF_NODE	1745:16	1745:16	12	=
RVAL	1745:17	1745:17	11	o
FIELD	1745:17	1745:17	12	o
LEAF_NODE	1745:17	1745:17	13	o
LEAF_NODE	1745:18	1745:18	9	;
LEAF_NODE	1746:1	1746:1	5	}
SELECTION	1747:1	1748:2	3	
KEYWORD	1747:1	1747:1	4	if
LEAF_NODE	1747:1	1747:1	5	if
LEAF_NODE	1747:4	1747:4	4	(
CONDITION	1747:5	1747:5	4	sp -> subsamplingcorrect == 0
EXPR	1747:5	1747:29	5	sp -> subsamplingcorrect == 0
FIELD	1747:5	1747:9	6	sp -> subsamplingcorrect
LEAF_NODE	1747:5	1747:5	7	sp
LEAF_NODE	1747:7	1747:7	7	->
LEAF_NODE	1747:9	1747:9	7	subsamplingcorrect
EQ_OPERATOR	1747:27	1747:27	6	==
LEAF_NODE	1747:27	1747:27	7	==
FIELD	1747:29	1747:29	6	0
LEAF_NODE	1747:29	1747:29	7	0
LEAF_NODE	1747:30	1747:30	4	)
STATEMENTS	1748:2	1748:2	4	
EXPR_STATEMENT	1748:2	1748:15	5	sp -> sof_log = 1 ;
EXPR	1748:2	1748:2	6	sp -> sof_log = 1
ASSIGN	1748:2	1748:14	7	sp -> sof_log = 1
LVAL	1748:2	1748:2	8	sp -> sof_log
FIELD	1748:2	1748:6	9	sp -> sof_log
LEAF_NODE	1748:2	1748:2	10	sp
LEAF_NODE	1748:4	1748:4	10	->
LEAF_NODE	1748:6	1748:6	10	sof_log
ASSIGN_OP	1748:13	1748:13	8	=
LEAF_NODE	1748:13	1748:13	9	=
RVAL	1748:14	1748:14	8	1
FIELD	1748:14	1748:14	9	1
LEAF_NODE	1748:14	1748:14	10	1
LEAF_NODE	1748:15	1748:15	6	;
JUMP_STATEMENT	1749:1	1749:10	3	return ( 1 ) ;
KEYWORD	1749:1	1749:1	4	return
LEAF_NODE	1749:1	1749:1	5	return
DESTINATION	1749:7	1749:7	4	( 1 )
EXPR	1749:7	1749:9	5	( 1 )
LEAF_NODE	1749:7	1749:7	6	(
FIELD	1749:8	1749:8	6	1
LEAF_NODE	1749:8	1749:8	7	1
LEAF_NODE	1749:9	1749:9	6	)
LEAF_NODE	1749:10	1749:10	4	;
LEAF_NODE	1750:0	1750:0	2	}
FUNCTION_DEF	1752:0	1798:0	1	
RETURN_TYPE	1752:0	1752:7	2	static int
LEAF_NODE	1752:0	1752:0	3	static
TYPE_NAME	1752:7	1752:7	3	int
LEAF_NODE	1752:7	1752:7	4	int
FUNCTION_NAME	1753:0	1753:0	2	OJPEGReadHeaderInfoSecStreamSos
LEAF_NODE	1753:0	1753:0	3	OJPEGReadHeaderInfoSecStreamSos
PARAMETER_LIST	1753:31	1753:41	2	( TIFF * tif )
LEAF_NODE	1753:31	1753:31	3	(
PARAMETER_DECL	1753:32	1753:38	3	TIFF * tif
TYPE	1753:32	1753:36	4	TIFF *
TYPE_NAME	1753:32	1753:32	5	TIFF
LEAF_NODE	1753:32	1753:32	6	TIFF
POINTER	1753:36	1753:36	5	*
LEAF_NODE	1753:36	1753:36	6	*
NAME	1753:38	1753:38	4	tif
LEAF_NODE	1753:38	1753:38	5	tif
LEAF_NODE	1753:41	1753:41	3	)
LEAF_NODE	1754:0	1754:0	2	{
STATEMENTS	1756:1	1797:1	2	
LEAF_NODE	1756:1	1756:1	3	static
SIMPLE_DECL	1756:8	1756:61	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamSos" ;
VAR_DECL	1756:8	1756:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecStreamSos"
TYPE	1756:8	1756:25	5	const char [ ]
TYPE_NAME	1756:8	1756:14	6	const char
LEAF_NODE	1756:8	1756:8	7	const
LEAF_NODE	1756:14	1756:14	7	char
TYPE_SUFFIX	1756:25	1756:26	6	[ ]
LEAF_NODE	1756:25	1756:25	7	[
LEAF_NODE	1756:26	1756:26	7	]
NAME	1756:19	1756:19	5	module
LEAF_NODE	1756:19	1756:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1756:19	1756:19	5	module = "OJPEGReadHeaderInfoSecStreamSos"
ASSIGN	1756:19	1756:28	6	module = "OJPEGReadHeaderInfoSecStreamSos"
LVAL	1756:19	1756:19	7	module
NAME	1756:19	1756:19	8	module
LEAF_NODE	1756:19	1756:19	9	module
ASSIGN_OP	1756:27	1756:27	7	=
LEAF_NODE	1756:27	1756:27	8	=
RVAL	1756:28	1756:28	7	"OJPEGReadHeaderInfoSecStreamSos"
FIELD	1756:28	1756:28	8	"OJPEGReadHeaderInfoSecStreamSos"
LEAF_NODE	1756:28	1756:28	9	"OJPEGReadHeaderInfoSecStreamSos"
LEAF_NODE	1756:61	1756:61	4	;
SIMPLE_DECL	1757:1	1757:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1757:1	1757:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1757:1	1757:11	5	OJPEGState *
TYPE_NAME	1757:1	1757:1	6	OJPEGState
LEAF_NODE	1757:1	1757:1	7	OJPEGState
POINTER	1757:11	1757:11	6	*
LEAF_NODE	1757:11	1757:11	7	*
NAME	1757:13	1757:13	5	sp
LEAF_NODE	1757:13	1757:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1757:13	1757:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1757:13	1757:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1757:13	1757:13	7	sp
NAME	1757:13	1757:13	8	sp
LEAF_NODE	1757:13	1757:13	9	sp
ASSIGN_OP	1757:15	1757:15	7	=
LEAF_NODE	1757:15	1757:15	8	=
RVAL	1757:16	1757:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1757:16	1757:16	8	(
TYPE_NAME	1757:17	1757:17	8	OJPEGState
LEAF_NODE	1757:17	1757:17	9	OJPEGState
LEAF_NODE	1757:27	1757:27	8	*
LEAF_NODE	1757:28	1757:28	8	)
FIELD	1757:29	1757:34	8	tif -> tif_data
LEAF_NODE	1757:29	1757:29	9	tif
LEAF_NODE	1757:32	1757:32	9	->
LEAF_NODE	1757:34	1757:34	9	tif_data
LEAF_NODE	1757:42	1757:42	4	;
SIMPLE_DECL	1758:1	1758:9	3	uint16 m ;
VAR_DECL	1758:1	1758:8	4	uint16 m
TYPE	1758:1	1758:1	5	uint16
TYPE_NAME	1758:1	1758:1	6	uint16
LEAF_NODE	1758:1	1758:1	7	uint16
NAME	1758:8	1758:8	5	m
LEAF_NODE	1758:8	1758:8	6	m
LEAF_NODE	1758:9	1758:9	4	;
SIMPLE_DECL	1759:1	1759:8	3	uint8 n ;
VAR_DECL	1759:1	1759:7	4	uint8 n
TYPE	1759:1	1759:1	5	uint8
TYPE_NAME	1759:1	1759:1	6	uint8
LEAF_NODE	1759:1	1759:1	7	uint8
NAME	1759:7	1759:7	5	n
LEAF_NODE	1759:7	1759:7	6	n
LEAF_NODE	1759:8	1759:8	4	;
SIMPLE_DECL	1760:1	1760:8	3	uint8 o ;
VAR_DECL	1760:1	1760:7	4	uint8 o
TYPE	1760:1	1760:1	5	uint8
TYPE_NAME	1760:1	1760:1	6	uint8
LEAF_NODE	1760:1	1760:1	7	uint8
NAME	1760:7	1760:7	5	o
LEAF_NODE	1760:7	1760:7	6	o
LEAF_NODE	1760:8	1760:8	4	;
EXPR_STATEMENT	1761:1	1761:34	3	assert ( sp -> subsamplingcorrect == 0 ) ;
EXPR	1761:1	1761:1	4	assert ( sp -> subsamplingcorrect == 0 )
FUNCTION_CALL	1761:1	1761:33	5	assert ( sp -> subsamplingcorrect == 0 )
CALLEE	1761:1	1761:1	6	assert
LEAF_NODE	1761:1	1761:1	7	assert
LEAF_NODE	1761:7	1761:7	6	(
ARGUMENT	1761:8	1761:32	6	sp -> subsamplingcorrect == 0
FIELD	1761:8	1761:12	7	sp -> subsamplingcorrect
LEAF_NODE	1761:8	1761:8	8	sp
LEAF_NODE	1761:10	1761:10	8	->
LEAF_NODE	1761:12	1761:12	8	subsamplingcorrect
EQ_OPERATOR	1761:30	1761:30	7	==
LEAF_NODE	1761:30	1761:30	8	==
FIELD	1761:32	1761:32	7	0
LEAF_NODE	1761:32	1761:32	8	0
LEAF_NODE	1761:33	1761:33	6	)
LEAF_NODE	1761:34	1761:34	4	;
SELECTION	1762:1	1763:1	3	
KEYWORD	1762:1	1762:1	4	if
LEAF_NODE	1762:1	1762:1	5	if
LEAF_NODE	1762:4	1762:4	4	(
CONDITION	1762:5	1762:5	4	sp -> sof_log == 0
EXPR	1762:5	1762:18	5	sp -> sof_log == 0
FIELD	1762:5	1762:9	6	sp -> sof_log
LEAF_NODE	1762:5	1762:5	7	sp
LEAF_NODE	1762:7	1762:7	7	->
LEAF_NODE	1762:9	1762:9	7	sof_log
EQ_OPERATOR	1762:16	1762:16	6	==
LEAF_NODE	1762:16	1762:16	7	==
FIELD	1762:18	1762:18	6	0
LEAF_NODE	1762:18	1762:18	7	0
LEAF_NODE	1762:19	1762:19	4	)
STATEMENTS	1763:1	1766:1	4	
LEAF_NODE	1763:1	1763:1	5	{
STATEMENTS	1764:2	1765:2	5	
EXPR_STATEMENT	1764:2	1764:76	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" ) ;
EXPR	1764:2	1764:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" )
FUNCTION_CALL	1764:2	1764:75	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" )
CALLEE	1764:2	1764:2	9	TIFFErrorExt
LEAF_NODE	1764:2	1764:2	10	TIFFErrorExt
LEAF_NODE	1764:14	1764:14	9	(
ARGUMENT	1764:15	1764:15	9	tif -> tif_clientdata
FIELD	1764:15	1764:20	10	tif -> tif_clientdata
LEAF_NODE	1764:15	1764:15	11	tif
LEAF_NODE	1764:18	1764:18	11	->
LEAF_NODE	1764:20	1764:20	11	tif_clientdata
LEAF_NODE	1764:34	1764:34	9	,
ARGUMENT	1764:35	1764:35	9	module
FIELD	1764:35	1764:35	10	module
LEAF_NODE	1764:35	1764:35	11	module
LEAF_NODE	1764:41	1764:41	9	,
ARGUMENT	1764:42	1764:42	9	"Corrupt SOS marker in JPEG data"
FIELD	1764:42	1764:42	10	"Corrupt SOS marker in JPEG data"
LEAF_NODE	1764:42	1764:42	11	"Corrupt SOS marker in JPEG data"
LEAF_NODE	1764:75	1764:75	9	)
LEAF_NODE	1764:76	1764:76	7	;
JUMP_STATEMENT	1765:2	1765:11	6	return ( 0 ) ;
KEYWORD	1765:2	1765:2	7	return
LEAF_NODE	1765:2	1765:2	8	return
DESTINATION	1765:8	1765:8	7	( 0 )
EXPR	1765:8	1765:10	8	( 0 )
LEAF_NODE	1765:8	1765:8	9	(
FIELD	1765:9	1765:9	9	0
LEAF_NODE	1765:9	1765:9	10	0
LEAF_NODE	1765:10	1765:10	9	)
LEAF_NODE	1765:11	1765:11	7	;
LEAF_NODE	1766:1	1766:1	5	}
SELECTION	1768:1	1769:2	3	
KEYWORD	1768:1	1768:1	4	if
LEAF_NODE	1768:1	1768:1	5	if
LEAF_NODE	1768:4	1768:4	4	(
CONDITION	1768:5	1768:5	4	OJPEGReadWord ( sp , & m ) == 0
EXPR	1768:5	1768:27	5	OJPEGReadWord ( sp , & m ) == 0
FUNCTION_CALL	1768:5	1768:24	6	OJPEGReadWord ( sp , & m )
CALLEE	1768:5	1768:5	7	OJPEGReadWord
LEAF_NODE	1768:5	1768:5	8	OJPEGReadWord
LEAF_NODE	1768:18	1768:18	7	(
ARGUMENT	1768:19	1768:19	7	sp
FIELD	1768:19	1768:19	8	sp
LEAF_NODE	1768:19	1768:19	9	sp
LEAF_NODE	1768:21	1768:21	7	,
ARGUMENT	1768:22	1768:22	7	& m
UNARY_EXPR	1768:22	1768:23	8	& m
UNARY_OPERATOR	1768:22	1768:22	9	&
LEAF_NODE	1768:22	1768:22	10	&
FIELD	1768:23	1768:23	9	m
LEAF_NODE	1768:23	1768:23	10	m
LEAF_NODE	1768:24	1768:24	7	)
EQ_OPERATOR	1768:25	1768:25	6	==
LEAF_NODE	1768:25	1768:25	7	==
FIELD	1768:27	1768:27	6	0
LEAF_NODE	1768:27	1768:27	7	0
LEAF_NODE	1768:28	1768:28	4	)
STATEMENTS	1769:2	1769:2	4	
JUMP_STATEMENT	1769:2	1769:11	5	return ( 0 ) ;
KEYWORD	1769:2	1769:2	6	return
LEAF_NODE	1769:2	1769:2	7	return
DESTINATION	1769:8	1769:8	6	( 0 )
EXPR	1769:8	1769:10	7	( 0 )
LEAF_NODE	1769:8	1769:8	8	(
FIELD	1769:9	1769:9	8	0
LEAF_NODE	1769:9	1769:9	9	0
LEAF_NODE	1769:10	1769:10	8	)
LEAF_NODE	1769:11	1769:11	6	;
SELECTION	1770:1	1771:1	3	
KEYWORD	1770:1	1770:1	4	if
LEAF_NODE	1770:1	1770:1	5	if
LEAF_NODE	1770:4	1770:4	4	(
CONDITION	1770:5	1770:5	4	m != 6 + sp -> samples_per_pixel_per_plane * 2
EXPR	1770:5	1770:42	5	m != 6 + sp -> samples_per_pixel_per_plane * 2
FIELD	1770:5	1770:5	6	m
LEAF_NODE	1770:5	1770:5	7	m
EQ_OPERATOR	1770:6	1770:6	6	!=
LEAF_NODE	1770:6	1770:6	7	!=
FIELD	1770:8	1770:8	6	6
LEAF_NODE	1770:8	1770:8	7	6
LEAF_NODE	1770:9	1770:9	6	+
FIELD	1770:10	1770:14	6	sp -> samples_per_pixel_per_plane
LEAF_NODE	1770:10	1770:10	7	sp
LEAF_NODE	1770:12	1770:12	7	->
LEAF_NODE	1770:14	1770:14	7	samples_per_pixel_per_plane
LEAF_NODE	1770:41	1770:41	6	*
FIELD	1770:42	1770:42	6	2
LEAF_NODE	1770:42	1770:42	7	2
LEAF_NODE	1770:43	1770:43	4	)
STATEMENTS	1771:1	1774:1	4	
LEAF_NODE	1771:1	1771:1	5	{
STATEMENTS	1772:2	1773:2	5	
EXPR_STATEMENT	1772:2	1772:76	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" ) ;
EXPR	1772:2	1772:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" )
FUNCTION_CALL	1772:2	1772:75	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" )
CALLEE	1772:2	1772:2	9	TIFFErrorExt
LEAF_NODE	1772:2	1772:2	10	TIFFErrorExt
LEAF_NODE	1772:14	1772:14	9	(
ARGUMENT	1772:15	1772:15	9	tif -> tif_clientdata
FIELD	1772:15	1772:20	10	tif -> tif_clientdata
LEAF_NODE	1772:15	1772:15	11	tif
LEAF_NODE	1772:18	1772:18	11	->
LEAF_NODE	1772:20	1772:20	11	tif_clientdata
LEAF_NODE	1772:34	1772:34	9	,
ARGUMENT	1772:35	1772:35	9	module
FIELD	1772:35	1772:35	10	module
LEAF_NODE	1772:35	1772:35	11	module
LEAF_NODE	1772:41	1772:41	9	,
ARGUMENT	1772:42	1772:42	9	"Corrupt SOS marker in JPEG data"
FIELD	1772:42	1772:42	10	"Corrupt SOS marker in JPEG data"
LEAF_NODE	1772:42	1772:42	11	"Corrupt SOS marker in JPEG data"
LEAF_NODE	1772:75	1772:75	9	)
LEAF_NODE	1772:76	1772:76	7	;
JUMP_STATEMENT	1773:2	1773:11	6	return ( 0 ) ;
KEYWORD	1773:2	1773:2	7	return
LEAF_NODE	1773:2	1773:2	8	return
DESTINATION	1773:8	1773:8	7	( 0 )
EXPR	1773:8	1773:10	8	( 0 )
LEAF_NODE	1773:8	1773:8	9	(
FIELD	1773:9	1773:9	9	0
LEAF_NODE	1773:9	1773:9	10	0
LEAF_NODE	1773:10	1773:10	9	)
LEAF_NODE	1773:11	1773:11	7	;
LEAF_NODE	1774:1	1774:1	5	}
SELECTION	1776:1	1777:2	3	
KEYWORD	1776:1	1776:1	4	if
LEAF_NODE	1776:1	1776:1	5	if
LEAF_NODE	1776:4	1776:4	4	(
CONDITION	1776:5	1776:5	4	OJPEGReadByte ( sp , & n ) == 0
EXPR	1776:5	1776:27	5	OJPEGReadByte ( sp , & n ) == 0
FUNCTION_CALL	1776:5	1776:24	6	OJPEGReadByte ( sp , & n )
CALLEE	1776:5	1776:5	7	OJPEGReadByte
LEAF_NODE	1776:5	1776:5	8	OJPEGReadByte
LEAF_NODE	1776:18	1776:18	7	(
ARGUMENT	1776:19	1776:19	7	sp
FIELD	1776:19	1776:19	8	sp
LEAF_NODE	1776:19	1776:19	9	sp
LEAF_NODE	1776:21	1776:21	7	,
ARGUMENT	1776:22	1776:22	7	& n
UNARY_EXPR	1776:22	1776:23	8	& n
UNARY_OPERATOR	1776:22	1776:22	9	&
LEAF_NODE	1776:22	1776:22	10	&
FIELD	1776:23	1776:23	9	n
LEAF_NODE	1776:23	1776:23	10	n
LEAF_NODE	1776:24	1776:24	7	)
EQ_OPERATOR	1776:25	1776:25	6	==
LEAF_NODE	1776:25	1776:25	7	==
FIELD	1776:27	1776:27	6	0
LEAF_NODE	1776:27	1776:27	7	0
LEAF_NODE	1776:28	1776:28	4	)
STATEMENTS	1777:2	1777:2	4	
JUMP_STATEMENT	1777:2	1777:11	5	return ( 0 ) ;
KEYWORD	1777:2	1777:2	6	return
LEAF_NODE	1777:2	1777:2	7	return
DESTINATION	1777:8	1777:8	6	( 0 )
EXPR	1777:8	1777:10	7	( 0 )
LEAF_NODE	1777:8	1777:8	8	(
FIELD	1777:9	1777:9	8	0
LEAF_NODE	1777:9	1777:9	9	0
LEAF_NODE	1777:10	1777:10	8	)
LEAF_NODE	1777:11	1777:11	6	;
SELECTION	1778:1	1779:1	3	
KEYWORD	1778:1	1778:1	4	if
LEAF_NODE	1778:1	1778:1	5	if
LEAF_NODE	1778:4	1778:4	4	(
CONDITION	1778:5	1778:5	4	n != sp -> samples_per_pixel_per_plane
EXPR	1778:5	1778:8	5	n != sp -> samples_per_pixel_per_plane
FIELD	1778:5	1778:5	6	n
LEAF_NODE	1778:5	1778:5	7	n
EQ_OPERATOR	1778:6	1778:6	6	!=
LEAF_NODE	1778:6	1778:6	7	!=
FIELD	1778:8	1778:12	6	sp -> samples_per_pixel_per_plane
LEAF_NODE	1778:8	1778:8	7	sp
LEAF_NODE	1778:10	1778:10	7	->
LEAF_NODE	1778:12	1778:12	7	samples_per_pixel_per_plane
LEAF_NODE	1778:39	1778:39	4	)
STATEMENTS	1779:1	1782:1	4	
LEAF_NODE	1779:1	1779:1	5	{
STATEMENTS	1780:2	1781:2	5	
EXPR_STATEMENT	1780:2	1780:76	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" ) ;
EXPR	1780:2	1780:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" )
FUNCTION_CALL	1780:2	1780:75	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt SOS marker in JPEG data" )
CALLEE	1780:2	1780:2	9	TIFFErrorExt
LEAF_NODE	1780:2	1780:2	10	TIFFErrorExt
LEAF_NODE	1780:14	1780:14	9	(
ARGUMENT	1780:15	1780:15	9	tif -> tif_clientdata
FIELD	1780:15	1780:20	10	tif -> tif_clientdata
LEAF_NODE	1780:15	1780:15	11	tif
LEAF_NODE	1780:18	1780:18	11	->
LEAF_NODE	1780:20	1780:20	11	tif_clientdata
LEAF_NODE	1780:34	1780:34	9	,
ARGUMENT	1780:35	1780:35	9	module
FIELD	1780:35	1780:35	10	module
LEAF_NODE	1780:35	1780:35	11	module
LEAF_NODE	1780:41	1780:41	9	,
ARGUMENT	1780:42	1780:42	9	"Corrupt SOS marker in JPEG data"
FIELD	1780:42	1780:42	10	"Corrupt SOS marker in JPEG data"
LEAF_NODE	1780:42	1780:42	11	"Corrupt SOS marker in JPEG data"
LEAF_NODE	1780:75	1780:75	9	)
LEAF_NODE	1780:76	1780:76	7	;
JUMP_STATEMENT	1781:2	1781:11	6	return ( 0 ) ;
KEYWORD	1781:2	1781:2	7	return
LEAF_NODE	1781:2	1781:2	8	return
DESTINATION	1781:8	1781:8	7	( 0 )
EXPR	1781:8	1781:10	8	( 0 )
LEAF_NODE	1781:8	1781:8	9	(
FIELD	1781:9	1781:9	9	0
LEAF_NODE	1781:9	1781:9	10	0
LEAF_NODE	1781:10	1781:10	9	)
LEAF_NODE	1781:11	1781:11	7	;
LEAF_NODE	1782:1	1782:1	5	}
ITERATION	1784:1	1785:1	3	
KEYWORD	1784:1	1784:1	4	for
LEAF_NODE	1784:1	1784:1	5	for
LEAF_NODE	1784:5	1784:5	4	(
FOR_INIT	1784:6	1784:9	4	o = 0 ;
EXPR	1784:6	1784:6	5	o = 0
ASSIGN	1784:6	1784:8	6	o = 0
LVAL	1784:6	1784:6	7	o
FIELD	1784:6	1784:6	8	o
LEAF_NODE	1784:6	1784:6	9	o
ASSIGN_OP	1784:7	1784:7	7	=
LEAF_NODE	1784:7	1784:7	8	=
RVAL	1784:8	1784:8	7	0
FIELD	1784:8	1784:8	8	0
LEAF_NODE	1784:8	1784:8	9	0
LEAF_NODE	1784:9	1784:9	5	;
CONDITION	1784:11	1784:11	4	o < sp -> samples_per_pixel_per_plane
EXPR	1784:11	1784:13	5	o < sp -> samples_per_pixel_per_plane
FIELD	1784:11	1784:11	6	o
LEAF_NODE	1784:11	1784:11	7	o
REL_OPERATOR	1784:12	1784:12	6	<
LEAF_NODE	1784:12	1784:12	7	<
FIELD	1784:13	1784:17	6	sp -> samples_per_pixel_per_plane
LEAF_NODE	1784:13	1784:13	7	sp
LEAF_NODE	1784:15	1784:15	7	->
LEAF_NODE	1784:17	1784:17	7	samples_per_pixel_per_plane
LEAF_NODE	1784:44	1784:44	4	;
FOR_EXPR	1784:46	1784:46	4	o ++
EXPR	1784:46	1784:46	5	o ++
FIELD	1784:46	1784:47	6	o ++
LEAF_NODE	1784:46	1784:46	7	o
LEAF_NODE	1784:47	1784:47	7	++
LEAF_NODE	1784:49	1784:49	4	)
STATEMENTS	1785:1	1794:1	4	
LEAF_NODE	1785:1	1785:1	5	{
STATEMENTS	1787:2	1793:2	5	
SELECTION	1787:2	1788:3	6	
KEYWORD	1787:2	1787:2	7	if
LEAF_NODE	1787:2	1787:2	8	if
LEAF_NODE	1787:5	1787:5	7	(
CONDITION	1787:6	1787:6	7	OJPEGReadByte ( sp , & n ) == 0
EXPR	1787:6	1787:28	8	OJPEGReadByte ( sp , & n ) == 0
FUNCTION_CALL	1787:6	1787:25	9	OJPEGReadByte ( sp , & n )
CALLEE	1787:6	1787:6	10	OJPEGReadByte
LEAF_NODE	1787:6	1787:6	11	OJPEGReadByte
LEAF_NODE	1787:19	1787:19	10	(
ARGUMENT	1787:20	1787:20	10	sp
FIELD	1787:20	1787:20	11	sp
LEAF_NODE	1787:20	1787:20	12	sp
LEAF_NODE	1787:22	1787:22	10	,
ARGUMENT	1787:23	1787:23	10	& n
UNARY_EXPR	1787:23	1787:24	11	& n
UNARY_OPERATOR	1787:23	1787:23	12	&
LEAF_NODE	1787:23	1787:23	13	&
FIELD	1787:24	1787:24	12	n
LEAF_NODE	1787:24	1787:24	13	n
LEAF_NODE	1787:25	1787:25	10	)
EQ_OPERATOR	1787:26	1787:26	9	==
LEAF_NODE	1787:26	1787:26	10	==
FIELD	1787:28	1787:28	9	0
LEAF_NODE	1787:28	1787:28	10	0
LEAF_NODE	1787:29	1787:29	7	)
STATEMENTS	1788:3	1788:3	7	
JUMP_STATEMENT	1788:3	1788:12	8	return ( 0 ) ;
KEYWORD	1788:3	1788:3	9	return
LEAF_NODE	1788:3	1788:3	10	return
DESTINATION	1788:9	1788:9	9	( 0 )
EXPR	1788:9	1788:11	10	( 0 )
LEAF_NODE	1788:9	1788:9	11	(
FIELD	1788:10	1788:10	11	0
LEAF_NODE	1788:10	1788:10	12	0
LEAF_NODE	1788:11	1788:11	11	)
LEAF_NODE	1788:12	1788:12	9	;
EXPR_STATEMENT	1789:2	1789:41	6	sp -> sos_cs [ sp -> plane_sample_offset + o ] = n ;
EXPR	1789:2	1789:2	7	sp -> sos_cs [ sp -> plane_sample_offset + o ] = n
ASSIGN	1789:2	1789:40	8	sp -> sos_cs [ sp -> plane_sample_offset + o ] = n
LVAL	1789:2	1789:2	9	sp -> sos_cs [ sp -> plane_sample_offset + o ]
FIELD	1789:2	1789:38	10	sp -> sos_cs [ sp -> plane_sample_offset + o ]
LEAF_NODE	1789:2	1789:2	11	sp
LEAF_NODE	1789:4	1789:4	11	->
LEAF_NODE	1789:6	1789:6	11	sos_cs
LEAF_NODE	1789:12	1789:12	11	[
EXPR	1789:13	1789:37	11	sp -> plane_sample_offset + o
FIELD	1789:13	1789:17	12	sp -> plane_sample_offset
LEAF_NODE	1789:13	1789:13	13	sp
LEAF_NODE	1789:15	1789:15	13	->
LEAF_NODE	1789:17	1789:17	13	plane_sample_offset
LEAF_NODE	1789:36	1789:36	12	+
FIELD	1789:37	1789:37	12	o
LEAF_NODE	1789:37	1789:37	13	o
LEAF_NODE	1789:38	1789:38	11	]
ASSIGN_OP	1789:39	1789:39	9	=
LEAF_NODE	1789:39	1789:39	10	=
RVAL	1789:40	1789:40	9	n
FIELD	1789:40	1789:40	10	n
LEAF_NODE	1789:40	1789:40	11	n
LEAF_NODE	1789:41	1789:41	7	;
SELECTION	1791:2	1792:3	6	
KEYWORD	1791:2	1791:2	7	if
LEAF_NODE	1791:2	1791:2	8	if
LEAF_NODE	1791:5	1791:5	7	(
CONDITION	1791:6	1791:6	7	OJPEGReadByte ( sp , & n ) == 0
EXPR	1791:6	1791:28	8	OJPEGReadByte ( sp , & n ) == 0
FUNCTION_CALL	1791:6	1791:25	9	OJPEGReadByte ( sp , & n )
CALLEE	1791:6	1791:6	10	OJPEGReadByte
LEAF_NODE	1791:6	1791:6	11	OJPEGReadByte
LEAF_NODE	1791:19	1791:19	10	(
ARGUMENT	1791:20	1791:20	10	sp
FIELD	1791:20	1791:20	11	sp
LEAF_NODE	1791:20	1791:20	12	sp
LEAF_NODE	1791:22	1791:22	10	,
ARGUMENT	1791:23	1791:23	10	& n
UNARY_EXPR	1791:23	1791:24	11	& n
UNARY_OPERATOR	1791:23	1791:23	12	&
LEAF_NODE	1791:23	1791:23	13	&
FIELD	1791:24	1791:24	12	n
LEAF_NODE	1791:24	1791:24	13	n
LEAF_NODE	1791:25	1791:25	10	)
EQ_OPERATOR	1791:26	1791:26	9	==
LEAF_NODE	1791:26	1791:26	10	==
FIELD	1791:28	1791:28	9	0
LEAF_NODE	1791:28	1791:28	10	0
LEAF_NODE	1791:29	1791:29	7	)
STATEMENTS	1792:3	1792:3	7	
JUMP_STATEMENT	1792:3	1792:12	8	return ( 0 ) ;
KEYWORD	1792:3	1792:3	9	return
LEAF_NODE	1792:3	1792:3	10	return
DESTINATION	1792:9	1792:9	9	( 0 )
EXPR	1792:9	1792:11	10	( 0 )
LEAF_NODE	1792:9	1792:9	11	(
FIELD	1792:10	1792:10	11	0
LEAF_NODE	1792:10	1792:10	12	0
LEAF_NODE	1792:11	1792:11	11	)
LEAF_NODE	1792:12	1792:12	9	;
EXPR_STATEMENT	1793:2	1793:42	6	sp -> sos_tda [ sp -> plane_sample_offset + o ] = n ;
EXPR	1793:2	1793:2	7	sp -> sos_tda [ sp -> plane_sample_offset + o ] = n
ASSIGN	1793:2	1793:41	8	sp -> sos_tda [ sp -> plane_sample_offset + o ] = n
LVAL	1793:2	1793:2	9	sp -> sos_tda [ sp -> plane_sample_offset + o ]
FIELD	1793:2	1793:39	10	sp -> sos_tda [ sp -> plane_sample_offset + o ]
LEAF_NODE	1793:2	1793:2	11	sp
LEAF_NODE	1793:4	1793:4	11	->
LEAF_NODE	1793:6	1793:6	11	sos_tda
LEAF_NODE	1793:13	1793:13	11	[
EXPR	1793:14	1793:38	11	sp -> plane_sample_offset + o
FIELD	1793:14	1793:18	12	sp -> plane_sample_offset
LEAF_NODE	1793:14	1793:14	13	sp
LEAF_NODE	1793:16	1793:16	13	->
LEAF_NODE	1793:18	1793:18	13	plane_sample_offset
LEAF_NODE	1793:37	1793:37	12	+
FIELD	1793:38	1793:38	12	o
LEAF_NODE	1793:38	1793:38	13	o
LEAF_NODE	1793:39	1793:39	11	]
ASSIGN_OP	1793:40	1793:40	9	=
LEAF_NODE	1793:40	1793:40	10	=
RVAL	1793:41	1793:41	9	n
FIELD	1793:41	1793:41	10	n
LEAF_NODE	1793:41	1793:41	11	n
LEAF_NODE	1793:42	1793:42	7	;
LEAF_NODE	1794:1	1794:1	5	}
EXPR_STATEMENT	1796:1	1796:20	3	OJPEGReadSkip ( sp , 3 ) ;
EXPR	1796:1	1796:1	4	OJPEGReadSkip ( sp , 3 )
FUNCTION_CALL	1796:1	1796:19	5	OJPEGReadSkip ( sp , 3 )
CALLEE	1796:1	1796:1	6	OJPEGReadSkip
LEAF_NODE	1796:1	1796:1	7	OJPEGReadSkip
LEAF_NODE	1796:14	1796:14	6	(
ARGUMENT	1796:15	1796:15	6	sp
FIELD	1796:15	1796:15	7	sp
LEAF_NODE	1796:15	1796:15	8	sp
LEAF_NODE	1796:17	1796:17	6	,
ARGUMENT	1796:18	1796:18	6	3
FIELD	1796:18	1796:18	7	3
LEAF_NODE	1796:18	1796:18	8	3
LEAF_NODE	1796:19	1796:19	6	)
LEAF_NODE	1796:20	1796:20	4	;
JUMP_STATEMENT	1797:1	1797:10	3	return ( 1 ) ;
KEYWORD	1797:1	1797:1	4	return
LEAF_NODE	1797:1	1797:1	5	return
DESTINATION	1797:7	1797:7	4	( 1 )
EXPR	1797:7	1797:9	5	( 1 )
LEAF_NODE	1797:7	1797:7	6	(
FIELD	1797:8	1797:8	6	1
LEAF_NODE	1797:8	1797:8	7	1
LEAF_NODE	1797:9	1797:9	6	)
LEAF_NODE	1797:10	1797:10	4	;
LEAF_NODE	1798:0	1798:0	2	}
FUNCTION_DEF	1800:0	1857:0	1	
RETURN_TYPE	1800:0	1800:7	2	static int
LEAF_NODE	1800:0	1800:0	3	static
TYPE_NAME	1800:7	1800:7	3	int
LEAF_NODE	1800:7	1800:7	4	int
FUNCTION_NAME	1801:0	1801:0	2	OJPEGReadHeaderInfoSecTablesQTable
LEAF_NODE	1801:0	1801:0	3	OJPEGReadHeaderInfoSecTablesQTable
PARAMETER_LIST	1801:34	1801:44	2	( TIFF * tif )
LEAF_NODE	1801:34	1801:34	3	(
PARAMETER_DECL	1801:35	1801:41	3	TIFF * tif
TYPE	1801:35	1801:39	4	TIFF *
TYPE_NAME	1801:35	1801:35	5	TIFF
LEAF_NODE	1801:35	1801:35	6	TIFF
POINTER	1801:39	1801:39	5	*
LEAF_NODE	1801:39	1801:39	6	*
NAME	1801:41	1801:41	4	tif
LEAF_NODE	1801:41	1801:41	5	tif
LEAF_NODE	1801:44	1801:44	3	)
LEAF_NODE	1802:0	1802:0	2	{
STATEMENTS	1803:1	1856:1	2	
LEAF_NODE	1803:1	1803:1	3	static
SIMPLE_DECL	1803:8	1803:64	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecTablesQTable" ;
VAR_DECL	1803:8	1803:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecTablesQTable"
TYPE	1803:8	1803:25	5	const char [ ]
TYPE_NAME	1803:8	1803:14	6	const char
LEAF_NODE	1803:8	1803:8	7	const
LEAF_NODE	1803:14	1803:14	7	char
TYPE_SUFFIX	1803:25	1803:26	6	[ ]
LEAF_NODE	1803:25	1803:25	7	[
LEAF_NODE	1803:26	1803:26	7	]
NAME	1803:19	1803:19	5	module
LEAF_NODE	1803:19	1803:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1803:19	1803:19	5	module = "OJPEGReadHeaderInfoSecTablesQTable"
ASSIGN	1803:19	1803:28	6	module = "OJPEGReadHeaderInfoSecTablesQTable"
LVAL	1803:19	1803:19	7	module
NAME	1803:19	1803:19	8	module
LEAF_NODE	1803:19	1803:19	9	module
ASSIGN_OP	1803:27	1803:27	7	=
LEAF_NODE	1803:27	1803:27	8	=
RVAL	1803:28	1803:28	7	"OJPEGReadHeaderInfoSecTablesQTable"
FIELD	1803:28	1803:28	8	"OJPEGReadHeaderInfoSecTablesQTable"
LEAF_NODE	1803:28	1803:28	9	"OJPEGReadHeaderInfoSecTablesQTable"
LEAF_NODE	1803:64	1803:64	4	;
SIMPLE_DECL	1804:1	1804:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1804:1	1804:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1804:1	1804:11	5	OJPEGState *
TYPE_NAME	1804:1	1804:1	6	OJPEGState
LEAF_NODE	1804:1	1804:1	7	OJPEGState
POINTER	1804:11	1804:11	6	*
LEAF_NODE	1804:11	1804:11	7	*
NAME	1804:13	1804:13	5	sp
LEAF_NODE	1804:13	1804:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1804:13	1804:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1804:13	1804:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1804:13	1804:13	7	sp
NAME	1804:13	1804:13	8	sp
LEAF_NODE	1804:13	1804:13	9	sp
ASSIGN_OP	1804:15	1804:15	7	=
LEAF_NODE	1804:15	1804:15	8	=
RVAL	1804:16	1804:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1804:16	1804:16	8	(
TYPE_NAME	1804:17	1804:17	8	OJPEGState
LEAF_NODE	1804:17	1804:17	9	OJPEGState
LEAF_NODE	1804:27	1804:27	8	*
LEAF_NODE	1804:28	1804:28	8	)
FIELD	1804:29	1804:34	8	tif -> tif_data
LEAF_NODE	1804:29	1804:29	9	tif
LEAF_NODE	1804:32	1804:32	9	->
LEAF_NODE	1804:34	1804:34	9	tif_data
LEAF_NODE	1804:42	1804:42	4	;
SIMPLE_DECL	1805:1	1805:8	3	uint8 m ;
VAR_DECL	1805:1	1805:7	4	uint8 m
TYPE	1805:1	1805:1	5	uint8
TYPE_NAME	1805:1	1805:1	6	uint8
LEAF_NODE	1805:1	1805:1	7	uint8
NAME	1805:7	1805:7	5	m
LEAF_NODE	1805:7	1805:7	6	m
LEAF_NODE	1805:8	1805:8	4	;
SIMPLE_DECL	1806:1	1806:8	3	uint8 n ;
VAR_DECL	1806:1	1806:7	4	uint8 n
TYPE	1806:1	1806:1	5	uint8
TYPE_NAME	1806:1	1806:1	6	uint8
LEAF_NODE	1806:1	1806:1	7	uint8
NAME	1806:7	1806:7	5	n
LEAF_NODE	1806:7	1806:7	6	n
LEAF_NODE	1806:8	1806:8	4	;
SIMPLE_DECL	1807:1	1807:10	3	uint32 oa ;
VAR_DECL	1807:1	1807:8	4	uint32 oa
TYPE	1807:1	1807:1	5	uint32
TYPE_NAME	1807:1	1807:1	6	uint32
LEAF_NODE	1807:1	1807:1	7	uint32
NAME	1807:8	1807:8	5	oa
LEAF_NODE	1807:8	1807:8	6	oa
LEAF_NODE	1807:10	1807:10	4	;
SIMPLE_DECL	1808:1	1808:10	3	uint8 * ob ;
VAR_DECL	1808:1	1808:8	4	uint8 * ob
TYPE	1808:1	1808:6	5	uint8 *
TYPE_NAME	1808:1	1808:1	6	uint8
LEAF_NODE	1808:1	1808:1	7	uint8
POINTER	1808:6	1808:6	6	*
LEAF_NODE	1808:6	1808:6	7	*
NAME	1808:8	1808:8	5	ob
LEAF_NODE	1808:8	1808:8	6	ob
LEAF_NODE	1808:10	1808:10	4	;
SIMPLE_DECL	1809:1	1809:9	3	uint32 p ;
VAR_DECL	1809:1	1809:8	4	uint32 p
TYPE	1809:1	1809:1	5	uint32
TYPE_NAME	1809:1	1809:1	6	uint32
LEAF_NODE	1809:1	1809:1	7	uint32
NAME	1809:8	1809:8	5	p
LEAF_NODE	1809:8	1809:8	6	p
LEAF_NODE	1809:9	1809:9	4	;
SELECTION	1810:1	1811:1	3	
KEYWORD	1810:1	1810:1	4	if
LEAF_NODE	1810:1	1810:1	5	if
LEAF_NODE	1810:4	1810:4	4	(
CONDITION	1810:5	1810:5	4	sp -> qtable_offset [ 0 ] == 0
EXPR	1810:5	1810:27	5	sp -> qtable_offset [ 0 ] == 0
FIELD	1810:5	1810:24	6	sp -> qtable_offset [ 0 ]
LEAF_NODE	1810:5	1810:5	7	sp
LEAF_NODE	1810:7	1810:7	7	->
LEAF_NODE	1810:9	1810:9	7	qtable_offset
LEAF_NODE	1810:22	1810:22	7	[
EXPR	1810:23	1810:23	7	0
FIELD	1810:23	1810:23	8	0
LEAF_NODE	1810:23	1810:23	9	0
LEAF_NODE	1810:24	1810:24	7	]
EQ_OPERATOR	1810:25	1810:25	6	==
LEAF_NODE	1810:25	1810:25	7	==
FIELD	1810:27	1810:27	6	0
LEAF_NODE	1810:27	1810:27	7	0
LEAF_NODE	1810:28	1810:28	4	)
STATEMENTS	1811:1	1814:1	4	
LEAF_NODE	1811:1	1811:1	5	{
STATEMENTS	1812:2	1813:2	5	
EXPR_STATEMENT	1812:2	1812:64	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" ) ;
EXPR	1812:2	1812:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" )
FUNCTION_CALL	1812:2	1812:63	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" )
CALLEE	1812:2	1812:2	9	TIFFErrorExt
LEAF_NODE	1812:2	1812:2	10	TIFFErrorExt
LEAF_NODE	1812:14	1812:14	9	(
ARGUMENT	1812:15	1812:15	9	tif -> tif_clientdata
FIELD	1812:15	1812:20	10	tif -> tif_clientdata
LEAF_NODE	1812:15	1812:15	11	tif
LEAF_NODE	1812:18	1812:18	11	->
LEAF_NODE	1812:20	1812:20	11	tif_clientdata
LEAF_NODE	1812:34	1812:34	9	,
ARGUMENT	1812:35	1812:35	9	module
FIELD	1812:35	1812:35	10	module
LEAF_NODE	1812:35	1812:35	11	module
LEAF_NODE	1812:41	1812:41	9	,
ARGUMENT	1812:42	1812:42	9	"Missing JPEG tables"
FIELD	1812:42	1812:42	10	"Missing JPEG tables"
LEAF_NODE	1812:42	1812:42	11	"Missing JPEG tables"
LEAF_NODE	1812:63	1812:63	9	)
LEAF_NODE	1812:64	1812:64	7	;
JUMP_STATEMENT	1813:2	1813:11	6	return ( 0 ) ;
KEYWORD	1813:2	1813:2	7	return
LEAF_NODE	1813:2	1813:2	8	return
DESTINATION	1813:8	1813:8	7	( 0 )
EXPR	1813:8	1813:10	8	( 0 )
LEAF_NODE	1813:8	1813:8	9	(
FIELD	1813:9	1813:9	9	0
LEAF_NODE	1813:9	1813:9	10	0
LEAF_NODE	1813:10	1813:10	9	)
LEAF_NODE	1813:11	1813:11	7	;
LEAF_NODE	1814:1	1814:1	5	}
EXPR_STATEMENT	1815:1	1815:29	3	sp -> in_buffer_file_pos_log = 0 ;
EXPR	1815:1	1815:1	4	sp -> in_buffer_file_pos_log = 0
ASSIGN	1815:1	1815:28	5	sp -> in_buffer_file_pos_log = 0
LVAL	1815:1	1815:1	6	sp -> in_buffer_file_pos_log
FIELD	1815:1	1815:5	7	sp -> in_buffer_file_pos_log
LEAF_NODE	1815:1	1815:1	8	sp
LEAF_NODE	1815:3	1815:3	8	->
LEAF_NODE	1815:5	1815:5	8	in_buffer_file_pos_log
ASSIGN_OP	1815:27	1815:27	6	=
LEAF_NODE	1815:27	1815:27	7	=
RVAL	1815:28	1815:28	6	0
FIELD	1815:28	1815:28	7	0
LEAF_NODE	1815:28	1815:28	8	0
LEAF_NODE	1815:29	1815:29	4	;
ITERATION	1816:1	1817:1	3	
KEYWORD	1816:1	1816:1	4	for
LEAF_NODE	1816:1	1816:1	5	for
LEAF_NODE	1816:5	1816:5	4	(
FOR_INIT	1816:6	1816:9	4	m = 0 ;
EXPR	1816:6	1816:6	5	m = 0
ASSIGN	1816:6	1816:8	6	m = 0
LVAL	1816:6	1816:6	7	m
FIELD	1816:6	1816:6	8	m
LEAF_NODE	1816:6	1816:6	9	m
ASSIGN_OP	1816:7	1816:7	7	=
LEAF_NODE	1816:7	1816:7	8	=
RVAL	1816:8	1816:8	7	0
FIELD	1816:8	1816:8	8	0
LEAF_NODE	1816:8	1816:8	9	0
LEAF_NODE	1816:9	1816:9	5	;
CONDITION	1816:11	1816:11	4	m < sp -> samples_per_pixel
EXPR	1816:11	1816:13	5	m < sp -> samples_per_pixel
FIELD	1816:11	1816:11	6	m
LEAF_NODE	1816:11	1816:11	7	m
REL_OPERATOR	1816:12	1816:12	6	<
LEAF_NODE	1816:12	1816:12	7	<
FIELD	1816:13	1816:17	6	sp -> samples_per_pixel
LEAF_NODE	1816:13	1816:13	7	sp
LEAF_NODE	1816:15	1816:15	7	->
LEAF_NODE	1816:17	1816:17	7	samples_per_pixel
LEAF_NODE	1816:34	1816:34	4	;
FOR_EXPR	1816:36	1816:36	4	m ++
EXPR	1816:36	1816:36	5	m ++
FIELD	1816:36	1816:37	6	m ++
LEAF_NODE	1816:36	1816:36	7	m
LEAF_NODE	1816:37	1816:37	7	++
LEAF_NODE	1816:39	1816:39	4	)
STATEMENTS	1817:1	1855:1	4	
LEAF_NODE	1817:1	1817:1	5	{
STATEMENTS	1818:2	1853:2	5	
SELECTION	1818:2	1819:2	6	
KEYWORD	1818:2	1818:2	7	if
LEAF_NODE	1818:2	1818:2	8	if
LEAF_NODE	1818:5	1818:5	7	(
CONDITION	1818:6	1818:6	7	( sp -> qtable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> qtable_offset [ m ] != sp -> qtable_offset [ m - 1 ] ) )
EXPR	1818:6	1818:6	8	( sp -> qtable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> qtable_offset [ m ] != sp -> qtable_offset [ m - 1 ] ) )
AND	1818:6	1818:35	9	( sp -> qtable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> qtable_offset [ m ] != sp -> qtable_offset [ m - 1 ] ) )
EXPR	1818:6	1818:30	10	( sp -> qtable_offset [ m ] != 0 )
LEAF_NODE	1818:6	1818:6	11	(
FIELD	1818:7	1818:26	11	sp -> qtable_offset [ m ]
LEAF_NODE	1818:7	1818:7	12	sp
LEAF_NODE	1818:9	1818:9	12	->
LEAF_NODE	1818:11	1818:11	12	qtable_offset
LEAF_NODE	1818:24	1818:24	12	[
EXPR	1818:25	1818:25	12	m
FIELD	1818:25	1818:25	13	m
LEAF_NODE	1818:25	1818:25	14	m
LEAF_NODE	1818:26	1818:26	12	]
EQ_OPERATOR	1818:27	1818:27	11	!=
LEAF_NODE	1818:27	1818:27	12	!=
FIELD	1818:29	1818:29	11	0
LEAF_NODE	1818:29	1818:29	12	0
LEAF_NODE	1818:30	1818:30	11	)
LEAF_NODE	1818:32	1818:32	10	&&
EXPR	1818:35	1818:92	10	( ( m == 0 ) || ( sp -> qtable_offset [ m ] != sp -> qtable_offset [ m - 1 ] ) )
LEAF_NODE	1818:35	1818:35	11	(
OR	1818:36	1818:46	11	( m == 0 ) || ( sp -> qtable_offset [ m ] != sp -> qtable_offset [ m - 1 ] )
EXPR	1818:36	1818:41	12	( m == 0 )
LEAF_NODE	1818:36	1818:36	13	(
FIELD	1818:37	1818:37	13	m
LEAF_NODE	1818:37	1818:37	14	m
EQ_OPERATOR	1818:38	1818:38	13	==
LEAF_NODE	1818:38	1818:38	14	==
FIELD	1818:40	1818:40	13	0
LEAF_NODE	1818:40	1818:40	14	0
LEAF_NODE	1818:41	1818:41	13	)
LEAF_NODE	1818:43	1818:43	12	||
EXPR	1818:46	1818:91	12	( sp -> qtable_offset [ m ] != sp -> qtable_offset [ m - 1 ] )
LEAF_NODE	1818:46	1818:46	13	(
FIELD	1818:47	1818:66	13	sp -> qtable_offset [ m ]
LEAF_NODE	1818:47	1818:47	14	sp
LEAF_NODE	1818:49	1818:49	14	->
LEAF_NODE	1818:51	1818:51	14	qtable_offset
LEAF_NODE	1818:64	1818:64	14	[
EXPR	1818:65	1818:65	14	m
FIELD	1818:65	1818:65	15	m
LEAF_NODE	1818:65	1818:65	16	m
LEAF_NODE	1818:66	1818:66	14	]
EQ_OPERATOR	1818:67	1818:67	13	!=
LEAF_NODE	1818:67	1818:67	14	!=
FIELD	1818:69	1818:90	13	sp -> qtable_offset [ m - 1 ]
LEAF_NODE	1818:69	1818:69	14	sp
LEAF_NODE	1818:71	1818:71	14	->
LEAF_NODE	1818:73	1818:73	14	qtable_offset
LEAF_NODE	1818:86	1818:86	14	[
EXPR	1818:87	1818:89	14	m - 1
FIELD	1818:87	1818:87	15	m
LEAF_NODE	1818:87	1818:87	16	m
LEAF_NODE	1818:88	1818:88	15	-
FIELD	1818:89	1818:89	15	1
LEAF_NODE	1818:89	1818:89	16	1
LEAF_NODE	1818:90	1818:90	14	]
LEAF_NODE	1818:91	1818:91	13	)
LEAF_NODE	1818:92	1818:92	11	)
LEAF_NODE	1818:93	1818:93	7	)
STATEMENTS	1819:2	1852:2	7	
LEAF_NODE	1819:2	1819:2	8	{
STATEMENTS	1820:3	1851:3	8	
ITERATION	1820:3	1821:3	9	
KEYWORD	1820:3	1820:3	10	for
LEAF_NODE	1820:3	1820:3	11	for
LEAF_NODE	1820:7	1820:7	10	(
FOR_INIT	1820:8	1820:11	10	n = 0 ;
EXPR	1820:8	1820:8	11	n = 0
ASSIGN	1820:8	1820:10	12	n = 0
LVAL	1820:8	1820:8	13	n
FIELD	1820:8	1820:8	14	n
LEAF_NODE	1820:8	1820:8	15	n
ASSIGN_OP	1820:9	1820:9	13	=
LEAF_NODE	1820:9	1820:9	14	=
RVAL	1820:10	1820:10	13	0
FIELD	1820:10	1820:10	14	0
LEAF_NODE	1820:10	1820:10	15	0
LEAF_NODE	1820:11	1820:11	11	;
CONDITION	1820:13	1820:13	10	n < m - 1
EXPR	1820:13	1820:17	11	n < m - 1
FIELD	1820:13	1820:13	12	n
LEAF_NODE	1820:13	1820:13	13	n
REL_OPERATOR	1820:14	1820:14	12	<
LEAF_NODE	1820:14	1820:14	13	<
FIELD	1820:15	1820:15	12	m
LEAF_NODE	1820:15	1820:15	13	m
LEAF_NODE	1820:16	1820:16	12	-
FIELD	1820:17	1820:17	12	1
LEAF_NODE	1820:17	1820:17	13	1
LEAF_NODE	1820:18	1820:18	10	;
FOR_EXPR	1820:20	1820:20	10	n ++
EXPR	1820:20	1820:20	11	n ++
FIELD	1820:20	1820:21	12	n ++
LEAF_NODE	1820:20	1820:20	13	n
LEAF_NODE	1820:21	1820:21	13	++
LEAF_NODE	1820:23	1820:23	10	)
STATEMENTS	1821:3	1827:3	10	
LEAF_NODE	1821:3	1821:3	11	{
STATEMENTS	1822:4	1822:4	11	
SELECTION	1822:4	1823:4	12	
KEYWORD	1822:4	1822:4	13	if
LEAF_NODE	1822:4	1822:4	14	if
LEAF_NODE	1822:7	1822:7	13	(
CONDITION	1822:8	1822:8	13	sp -> qtable_offset [ m ] == sp -> qtable_offset [ n ]
EXPR	1822:8	1822:30	14	sp -> qtable_offset [ m ] == sp -> qtable_offset [ n ]
FIELD	1822:8	1822:27	15	sp -> qtable_offset [ m ]
LEAF_NODE	1822:8	1822:8	16	sp
LEAF_NODE	1822:10	1822:10	16	->
LEAF_NODE	1822:12	1822:12	16	qtable_offset
LEAF_NODE	1822:25	1822:25	16	[
EXPR	1822:26	1822:26	16	m
FIELD	1822:26	1822:26	17	m
LEAF_NODE	1822:26	1822:26	18	m
LEAF_NODE	1822:27	1822:27	16	]
EQ_OPERATOR	1822:28	1822:28	15	==
LEAF_NODE	1822:28	1822:28	16	==
FIELD	1822:30	1822:49	15	sp -> qtable_offset [ n ]
LEAF_NODE	1822:30	1822:30	16	sp
LEAF_NODE	1822:32	1822:32	16	->
LEAF_NODE	1822:34	1822:34	16	qtable_offset
LEAF_NODE	1822:47	1822:47	16	[
EXPR	1822:48	1822:48	16	n
FIELD	1822:48	1822:48	17	n
LEAF_NODE	1822:48	1822:48	18	n
LEAF_NODE	1822:49	1822:49	16	]
LEAF_NODE	1822:50	1822:50	13	)
STATEMENTS	1823:4	1826:4	13	
LEAF_NODE	1823:4	1823:4	14	{
STATEMENTS	1824:5	1825:5	14	
EXPR_STATEMENT	1824:5	1824:77	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegQTables tag value" ) ;
EXPR	1824:5	1824:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegQTables tag value" )
FUNCTION_CALL	1824:5	1824:76	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegQTables tag value" )
CALLEE	1824:5	1824:5	18	TIFFErrorExt
LEAF_NODE	1824:5	1824:5	19	TIFFErrorExt
LEAF_NODE	1824:17	1824:17	18	(
ARGUMENT	1824:18	1824:18	18	tif -> tif_clientdata
FIELD	1824:18	1824:23	19	tif -> tif_clientdata
LEAF_NODE	1824:18	1824:18	20	tif
LEAF_NODE	1824:21	1824:21	20	->
LEAF_NODE	1824:23	1824:23	20	tif_clientdata
LEAF_NODE	1824:37	1824:37	18	,
ARGUMENT	1824:38	1824:38	18	module
FIELD	1824:38	1824:38	19	module
LEAF_NODE	1824:38	1824:38	20	module
LEAF_NODE	1824:44	1824:44	18	,
ARGUMENT	1824:45	1824:45	18	"Corrupt JpegQTables tag value"
FIELD	1824:45	1824:45	19	"Corrupt JpegQTables tag value"
LEAF_NODE	1824:45	1824:45	20	"Corrupt JpegQTables tag value"
LEAF_NODE	1824:76	1824:76	18	)
LEAF_NODE	1824:77	1824:77	16	;
JUMP_STATEMENT	1825:5	1825:14	15	return ( 0 ) ;
KEYWORD	1825:5	1825:5	16	return
LEAF_NODE	1825:5	1825:5	17	return
DESTINATION	1825:11	1825:11	16	( 0 )
EXPR	1825:11	1825:13	17	( 0 )
LEAF_NODE	1825:11	1825:11	18	(
FIELD	1825:12	1825:12	18	0
LEAF_NODE	1825:12	1825:12	19	0
LEAF_NODE	1825:13	1825:13	18	)
LEAF_NODE	1825:14	1825:14	16	;
LEAF_NODE	1826:4	1826:4	14	}
LEAF_NODE	1827:3	1827:3	11	}
EXPR_STATEMENT	1828:3	1828:23	9	oa = sizeof ( uint32 ) + 69 ;
EXPR	1828:3	1828:3	10	oa = sizeof ( uint32 ) + 69
ASSIGN	1828:3	1828:6	11	oa = sizeof ( uint32 ) + 69
LVAL	1828:3	1828:3	12	oa
FIELD	1828:3	1828:3	13	oa
LEAF_NODE	1828:3	1828:3	14	oa
ASSIGN_OP	1828:5	1828:5	12	=
LEAF_NODE	1828:5	1828:5	13	=
RVAL	1828:6	1828:21	12	sizeof ( uint32 ) + 69
FUNCTION_CALL	1828:6	1828:19	13	sizeof ( uint32 )
CALLEE	1828:6	1828:6	14	sizeof
LEAF_NODE	1828:6	1828:6	15	sizeof
LEAF_NODE	1828:12	1828:12	14	(
ARGUMENT	1828:13	1828:13	14	uint32
FIELD	1828:13	1828:13	15	uint32
LEAF_NODE	1828:13	1828:13	16	uint32
LEAF_NODE	1828:19	1828:19	14	)
LEAF_NODE	1828:20	1828:20	13	+
FIELD	1828:21	1828:21	13	69
LEAF_NODE	1828:21	1828:21	14	69
LEAF_NODE	1828:23	1828:23	10	;
EXPR_STATEMENT	1829:3	1829:21	9	ob = _TIFFmalloc ( oa ) ;
EXPR	1829:3	1829:3	10	ob = _TIFFmalloc ( oa )
ASSIGN	1829:3	1829:6	11	ob = _TIFFmalloc ( oa )
LVAL	1829:3	1829:3	12	ob
FIELD	1829:3	1829:3	13	ob
LEAF_NODE	1829:3	1829:3	14	ob
ASSIGN_OP	1829:5	1829:5	12	=
LEAF_NODE	1829:5	1829:5	13	=
RVAL	1829:6	1829:6	12	_TIFFmalloc ( oa )
FUNCTION_CALL	1829:6	1829:20	13	_TIFFmalloc ( oa )
CALLEE	1829:6	1829:6	14	_TIFFmalloc
LEAF_NODE	1829:6	1829:6	15	_TIFFmalloc
LEAF_NODE	1829:17	1829:17	14	(
ARGUMENT	1829:18	1829:18	14	oa
FIELD	1829:18	1829:18	15	oa
LEAF_NODE	1829:18	1829:18	16	oa
LEAF_NODE	1829:20	1829:20	14	)
LEAF_NODE	1829:21	1829:21	10	;
SELECTION	1830:3	1831:3	9	
KEYWORD	1830:3	1830:3	10	if
LEAF_NODE	1830:3	1830:3	11	if
LEAF_NODE	1830:6	1830:6	10	(
CONDITION	1830:7	1830:7	10	ob == 0
EXPR	1830:7	1830:11	11	ob == 0
FIELD	1830:7	1830:7	12	ob
LEAF_NODE	1830:7	1830:7	13	ob
EQ_OPERATOR	1830:9	1830:9	12	==
LEAF_NODE	1830:9	1830:9	13	==
FIELD	1830:11	1830:11	12	0
LEAF_NODE	1830:11	1830:11	13	0
LEAF_NODE	1830:12	1830:12	10	)
STATEMENTS	1831:3	1834:3	10	
LEAF_NODE	1831:3	1831:3	11	{
STATEMENTS	1832:4	1833:4	11	
EXPR_STATEMENT	1832:4	1832:60	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1832:4	1832:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1832:4	1832:59	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1832:4	1832:4	15	TIFFErrorExt
LEAF_NODE	1832:4	1832:4	16	TIFFErrorExt
LEAF_NODE	1832:16	1832:16	15	(
ARGUMENT	1832:17	1832:17	15	tif -> tif_clientdata
FIELD	1832:17	1832:22	16	tif -> tif_clientdata
LEAF_NODE	1832:17	1832:17	17	tif
LEAF_NODE	1832:20	1832:20	17	->
LEAF_NODE	1832:22	1832:22	17	tif_clientdata
LEAF_NODE	1832:36	1832:36	15	,
ARGUMENT	1832:37	1832:37	15	module
FIELD	1832:37	1832:37	16	module
LEAF_NODE	1832:37	1832:37	17	module
LEAF_NODE	1832:43	1832:43	15	,
ARGUMENT	1832:44	1832:44	15	"Out of memory"
FIELD	1832:44	1832:44	16	"Out of memory"
LEAF_NODE	1832:44	1832:44	17	"Out of memory"
LEAF_NODE	1832:59	1832:59	15	)
LEAF_NODE	1832:60	1832:60	13	;
JUMP_STATEMENT	1833:4	1833:13	12	return ( 0 ) ;
KEYWORD	1833:4	1833:4	13	return
LEAF_NODE	1833:4	1833:4	14	return
DESTINATION	1833:10	1833:10	13	( 0 )
EXPR	1833:10	1833:12	14	( 0 )
LEAF_NODE	1833:10	1833:10	15	(
FIELD	1833:11	1833:11	15	0
LEAF_NODE	1833:11	1833:11	16	0
LEAF_NODE	1833:12	1833:12	15	)
LEAF_NODE	1833:13	1833:13	13	;
LEAF_NODE	1834:3	1834:3	11	}
LEAF_NODE	1835:3	1835:3	9	*
EXPR_STATEMENT	1835:4	1835:18	9	( uint32 * ) ob = oa ;
EXPR	1835:4	1835:4	10	( uint32 * ) ob = oa
ASSIGN	1835:4	1835:16	11	( uint32 * ) ob = oa
LVAL	1835:4	1835:13	12	( uint32 * ) ob
LEAF_NODE	1835:4	1835:4	13	(
TYPE_NAME	1835:5	1835:5	13	uint32
LEAF_NODE	1835:5	1835:5	14	uint32
LEAF_NODE	1835:11	1835:11	13	*
LEAF_NODE	1835:12	1835:12	13	)
FIELD	1835:13	1835:13	13	ob
LEAF_NODE	1835:13	1835:13	14	ob
ASSIGN_OP	1835:15	1835:15	12	=
LEAF_NODE	1835:15	1835:15	13	=
RVAL	1835:16	1835:16	12	oa
FIELD	1835:16	1835:16	13	oa
LEAF_NODE	1835:16	1835:16	14	oa
LEAF_NODE	1835:18	1835:18	10	;
EXPR_STATEMENT	1836:3	1836:25	9	ob [ sizeof ( uint32 ) ] = 255 ;
EXPR	1836:3	1836:3	10	ob [ sizeof ( uint32 ) ] = 255
ASSIGN	1836:3	1836:22	11	ob [ sizeof ( uint32 ) ] = 255
LVAL	1836:3	1836:3	12	ob [ sizeof ( uint32 ) ]
FIELD	1836:3	1836:20	13	ob [ sizeof ( uint32 ) ]
LEAF_NODE	1836:3	1836:3	14	ob
LEAF_NODE	1836:5	1836:5	14	[
EXPR	1836:6	1836:6	14	sizeof ( uint32 )
FUNCTION_CALL	1836:6	1836:19	15	sizeof ( uint32 )
CALLEE	1836:6	1836:6	16	sizeof
LEAF_NODE	1836:6	1836:6	17	sizeof
LEAF_NODE	1836:12	1836:12	16	(
ARGUMENT	1836:13	1836:13	16	uint32
FIELD	1836:13	1836:13	17	uint32
LEAF_NODE	1836:13	1836:13	18	uint32
LEAF_NODE	1836:19	1836:19	16	)
LEAF_NODE	1836:20	1836:20	14	]
ASSIGN_OP	1836:21	1836:21	12	=
LEAF_NODE	1836:21	1836:21	13	=
RVAL	1836:22	1836:22	12	255
FIELD	1836:22	1836:22	13	255
LEAF_NODE	1836:22	1836:22	14	255
LEAF_NODE	1836:25	1836:25	10	;
EXPR_STATEMENT	1837:3	1837:39	9	ob [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DQT ;
EXPR	1837:3	1837:3	10	ob [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DQT
ASSIGN	1837:3	1837:24	11	ob [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DQT
LVAL	1837:3	1837:3	12	ob [ sizeof ( uint32 ) + 1 ]
FIELD	1837:3	1837:22	13	ob [ sizeof ( uint32 ) + 1 ]
LEAF_NODE	1837:3	1837:3	14	ob
LEAF_NODE	1837:5	1837:5	14	[
EXPR	1837:6	1837:21	14	sizeof ( uint32 ) + 1
FUNCTION_CALL	1837:6	1837:19	15	sizeof ( uint32 )
CALLEE	1837:6	1837:6	16	sizeof
LEAF_NODE	1837:6	1837:6	17	sizeof
LEAF_NODE	1837:12	1837:12	16	(
ARGUMENT	1837:13	1837:13	16	uint32
FIELD	1837:13	1837:13	17	uint32
LEAF_NODE	1837:13	1837:13	18	uint32
LEAF_NODE	1837:19	1837:19	16	)
LEAF_NODE	1837:20	1837:20	15	+
FIELD	1837:21	1837:21	15	1
LEAF_NODE	1837:21	1837:21	16	1
LEAF_NODE	1837:22	1837:22	14	]
ASSIGN_OP	1837:23	1837:23	12	=
LEAF_NODE	1837:23	1837:23	13	=
RVAL	1837:24	1837:24	12	JPEG_MARKER_DQT
FIELD	1837:24	1837:24	13	JPEG_MARKER_DQT
LEAF_NODE	1837:24	1837:24	14	JPEG_MARKER_DQT
LEAF_NODE	1837:39	1837:39	10	;
EXPR_STATEMENT	1838:3	1838:25	9	ob [ sizeof ( uint32 ) + 2 ] = 0 ;
EXPR	1838:3	1838:3	10	ob [ sizeof ( uint32 ) + 2 ] = 0
ASSIGN	1838:3	1838:24	11	ob [ sizeof ( uint32 ) + 2 ] = 0
LVAL	1838:3	1838:3	12	ob [ sizeof ( uint32 ) + 2 ]
FIELD	1838:3	1838:22	13	ob [ sizeof ( uint32 ) + 2 ]
LEAF_NODE	1838:3	1838:3	14	ob
LEAF_NODE	1838:5	1838:5	14	[
EXPR	1838:6	1838:21	14	sizeof ( uint32 ) + 2
FUNCTION_CALL	1838:6	1838:19	15	sizeof ( uint32 )
CALLEE	1838:6	1838:6	16	sizeof
LEAF_NODE	1838:6	1838:6	17	sizeof
LEAF_NODE	1838:12	1838:12	16	(
ARGUMENT	1838:13	1838:13	16	uint32
FIELD	1838:13	1838:13	17	uint32
LEAF_NODE	1838:13	1838:13	18	uint32
LEAF_NODE	1838:19	1838:19	16	)
LEAF_NODE	1838:20	1838:20	15	+
FIELD	1838:21	1838:21	15	2
LEAF_NODE	1838:21	1838:21	16	2
LEAF_NODE	1838:22	1838:22	14	]
ASSIGN_OP	1838:23	1838:23	12	=
LEAF_NODE	1838:23	1838:23	13	=
RVAL	1838:24	1838:24	12	0
FIELD	1838:24	1838:24	13	0
LEAF_NODE	1838:24	1838:24	14	0
LEAF_NODE	1838:25	1838:25	10	;
EXPR_STATEMENT	1839:3	1839:26	9	ob [ sizeof ( uint32 ) + 3 ] = 67 ;
EXPR	1839:3	1839:3	10	ob [ sizeof ( uint32 ) + 3 ] = 67
ASSIGN	1839:3	1839:24	11	ob [ sizeof ( uint32 ) + 3 ] = 67
LVAL	1839:3	1839:3	12	ob [ sizeof ( uint32 ) + 3 ]
FIELD	1839:3	1839:22	13	ob [ sizeof ( uint32 ) + 3 ]
LEAF_NODE	1839:3	1839:3	14	ob
LEAF_NODE	1839:5	1839:5	14	[
EXPR	1839:6	1839:21	14	sizeof ( uint32 ) + 3
FUNCTION_CALL	1839:6	1839:19	15	sizeof ( uint32 )
CALLEE	1839:6	1839:6	16	sizeof
LEAF_NODE	1839:6	1839:6	17	sizeof
LEAF_NODE	1839:12	1839:12	16	(
ARGUMENT	1839:13	1839:13	16	uint32
FIELD	1839:13	1839:13	17	uint32
LEAF_NODE	1839:13	1839:13	18	uint32
LEAF_NODE	1839:19	1839:19	16	)
LEAF_NODE	1839:20	1839:20	15	+
FIELD	1839:21	1839:21	15	3
LEAF_NODE	1839:21	1839:21	16	3
LEAF_NODE	1839:22	1839:22	14	]
ASSIGN_OP	1839:23	1839:23	12	=
LEAF_NODE	1839:23	1839:23	13	=
RVAL	1839:24	1839:24	12	67
FIELD	1839:24	1839:24	13	67
LEAF_NODE	1839:24	1839:24	14	67
LEAF_NODE	1839:26	1839:26	10	;
EXPR_STATEMENT	1840:3	1840:25	9	ob [ sizeof ( uint32 ) + 4 ] = m ;
EXPR	1840:3	1840:3	10	ob [ sizeof ( uint32 ) + 4 ] = m
ASSIGN	1840:3	1840:24	11	ob [ sizeof ( uint32 ) + 4 ] = m
LVAL	1840:3	1840:3	12	ob [ sizeof ( uint32 ) + 4 ]
FIELD	1840:3	1840:22	13	ob [ sizeof ( uint32 ) + 4 ]
LEAF_NODE	1840:3	1840:3	14	ob
LEAF_NODE	1840:5	1840:5	14	[
EXPR	1840:6	1840:21	14	sizeof ( uint32 ) + 4
FUNCTION_CALL	1840:6	1840:19	15	sizeof ( uint32 )
CALLEE	1840:6	1840:6	16	sizeof
LEAF_NODE	1840:6	1840:6	17	sizeof
LEAF_NODE	1840:12	1840:12	16	(
ARGUMENT	1840:13	1840:13	16	uint32
FIELD	1840:13	1840:13	17	uint32
LEAF_NODE	1840:13	1840:13	18	uint32
LEAF_NODE	1840:19	1840:19	16	)
LEAF_NODE	1840:20	1840:20	15	+
FIELD	1840:21	1840:21	15	4
LEAF_NODE	1840:21	1840:21	16	4
LEAF_NODE	1840:22	1840:22	14	]
ASSIGN_OP	1840:23	1840:23	12	=
LEAF_NODE	1840:23	1840:23	13	=
RVAL	1840:24	1840:24	12	m
FIELD	1840:24	1840:24	13	m
LEAF_NODE	1840:24	1840:24	14	m
LEAF_NODE	1840:25	1840:25	10	;
EXPR_STATEMENT	1841:3	1841:50	9	TIFFSeekFile ( tif , sp -> qtable_offset [ m ] , SEEK_SET ) ;
EXPR	1841:3	1841:3	10	TIFFSeekFile ( tif , sp -> qtable_offset [ m ] , SEEK_SET )
FUNCTION_CALL	1841:3	1841:49	11	TIFFSeekFile ( tif , sp -> qtable_offset [ m ] , SEEK_SET )
CALLEE	1841:3	1841:3	12	TIFFSeekFile
LEAF_NODE	1841:3	1841:3	13	TIFFSeekFile
LEAF_NODE	1841:15	1841:15	12	(
ARGUMENT	1841:16	1841:16	12	tif
FIELD	1841:16	1841:16	13	tif
LEAF_NODE	1841:16	1841:16	14	tif
LEAF_NODE	1841:19	1841:19	12	,
ARGUMENT	1841:20	1841:20	12	sp -> qtable_offset [ m ]
FIELD	1841:20	1841:39	13	sp -> qtable_offset [ m ]
LEAF_NODE	1841:20	1841:20	14	sp
LEAF_NODE	1841:22	1841:22	14	->
LEAF_NODE	1841:24	1841:24	14	qtable_offset
LEAF_NODE	1841:37	1841:37	14	[
EXPR	1841:38	1841:38	14	m
FIELD	1841:38	1841:38	15	m
LEAF_NODE	1841:38	1841:38	16	m
LEAF_NODE	1841:39	1841:39	14	]
LEAF_NODE	1841:40	1841:40	12	,
ARGUMENT	1841:41	1841:41	12	SEEK_SET
FIELD	1841:41	1841:41	13	SEEK_SET
LEAF_NODE	1841:41	1841:41	14	SEEK_SET
LEAF_NODE	1841:49	1841:49	12	)
LEAF_NODE	1841:50	1841:50	10	;
EXPR_STATEMENT	1842:3	1842:55	9	p = ( uint32 ) TIFFReadFile ( tif , & ob [ sizeof ( uint32 ) + 5 ] , 64 ) ;
EXPR	1842:3	1842:3	10	p = ( uint32 ) TIFFReadFile ( tif , & ob [ sizeof ( uint32 ) + 5 ] , 64 )
ASSIGN	1842:3	1842:5	11	p = ( uint32 ) TIFFReadFile ( tif , & ob [ sizeof ( uint32 ) + 5 ] , 64 )
LVAL	1842:3	1842:3	12	p
FIELD	1842:3	1842:3	13	p
LEAF_NODE	1842:3	1842:3	14	p
ASSIGN_OP	1842:4	1842:4	12	=
LEAF_NODE	1842:4	1842:4	13	=
RVAL	1842:5	1842:13	12	( uint32 ) TIFFReadFile ( tif , & ob [ sizeof ( uint32 ) + 5 ] , 64 )
LEAF_NODE	1842:5	1842:5	13	(
TYPE_NAME	1842:6	1842:6	13	uint32
LEAF_NODE	1842:6	1842:6	14	uint32
LEAF_NODE	1842:12	1842:12	13	)
FUNCTION_CALL	1842:13	1842:54	13	TIFFReadFile ( tif , & ob [ sizeof ( uint32 ) + 5 ] , 64 )
CALLEE	1842:13	1842:13	14	TIFFReadFile
LEAF_NODE	1842:13	1842:13	15	TIFFReadFile
LEAF_NODE	1842:25	1842:25	14	(
ARGUMENT	1842:26	1842:26	14	tif
FIELD	1842:26	1842:26	15	tif
LEAF_NODE	1842:26	1842:26	16	tif
LEAF_NODE	1842:29	1842:29	14	,
ARGUMENT	1842:30	1842:30	14	& ob [ sizeof ( uint32 ) + 5 ]
UNARY_EXPR	1842:30	1842:31	15	& ob [ sizeof ( uint32 ) + 5 ]
UNARY_OPERATOR	1842:30	1842:30	16	&
LEAF_NODE	1842:30	1842:30	17	&
FIELD	1842:31	1842:50	16	ob [ sizeof ( uint32 ) + 5 ]
LEAF_NODE	1842:31	1842:31	17	ob
LEAF_NODE	1842:33	1842:33	17	[
EXPR	1842:34	1842:49	17	sizeof ( uint32 ) + 5
FUNCTION_CALL	1842:34	1842:47	18	sizeof ( uint32 )
CALLEE	1842:34	1842:34	19	sizeof
LEAF_NODE	1842:34	1842:34	20	sizeof
LEAF_NODE	1842:40	1842:40	19	(
ARGUMENT	1842:41	1842:41	19	uint32
FIELD	1842:41	1842:41	20	uint32
LEAF_NODE	1842:41	1842:41	21	uint32
LEAF_NODE	1842:47	1842:47	19	)
LEAF_NODE	1842:48	1842:48	18	+
FIELD	1842:49	1842:49	18	5
LEAF_NODE	1842:49	1842:49	19	5
LEAF_NODE	1842:50	1842:50	17	]
LEAF_NODE	1842:51	1842:51	14	,
ARGUMENT	1842:52	1842:52	14	64
FIELD	1842:52	1842:52	15	64
LEAF_NODE	1842:52	1842:52	16	64
LEAF_NODE	1842:54	1842:54	14	)
LEAF_NODE	1842:55	1842:55	10	;
SELECTION	1843:3	1844:24	9	
KEYWORD	1843:3	1843:3	10	if
LEAF_NODE	1843:3	1843:3	11	if
LEAF_NODE	1843:6	1843:6	10	(
CONDITION	1843:7	1843:7	10	p != 64
EXPR	1843:7	1843:10	11	p != 64
FIELD	1843:7	1843:7	12	p
LEAF_NODE	1843:7	1843:7	13	p
EQ_OPERATOR	1843:8	1843:8	12	!=
LEAF_NODE	1843:8	1843:8	13	!=
FIELD	1843:10	1843:10	12	64
LEAF_NODE	1843:10	1843:10	13	64
LEAF_NODE	1843:12	1843:12	10	)
STATEMENTS	1844:24	1847:24	10	
LEAF_NODE	1844:24	1844:24	11	{
STATEMENTS	1845:32	1846:4	11	
EXPR_STATEMENT	1845:32	1845:45	12	_TIFFfree ( ob ) ;
EXPR	1845:32	1845:32	13	_TIFFfree ( ob )
FUNCTION_CALL	1845:32	1845:44	14	_TIFFfree ( ob )
CALLEE	1845:32	1845:32	15	_TIFFfree
LEAF_NODE	1845:32	1845:32	16	_TIFFfree
LEAF_NODE	1845:41	1845:41	15	(
ARGUMENT	1845:42	1845:42	15	ob
FIELD	1845:42	1845:42	16	ob
LEAF_NODE	1845:42	1845:42	17	ob
LEAF_NODE	1845:44	1845:44	15	)
LEAF_NODE	1845:45	1845:45	13	;
JUMP_STATEMENT	1846:4	1846:13	12	return ( 0 ) ;
KEYWORD	1846:4	1846:4	13	return
LEAF_NODE	1846:4	1846:4	14	return
DESTINATION	1846:10	1846:10	13	( 0 )
EXPR	1846:10	1846:12	14	( 0 )
LEAF_NODE	1846:10	1846:10	15	(
FIELD	1846:11	1846:11	15	0
LEAF_NODE	1846:11	1846:11	16	0
LEAF_NODE	1846:12	1846:12	15	)
LEAF_NODE	1846:13	1846:13	13	;
LEAF_NODE	1847:24	1847:24	11	}
SELECTION	1848:3	1849:4	9	
KEYWORD	1848:3	1848:3	10	if
LEAF_NODE	1848:3	1848:3	11	if
LEAF_NODE	1848:6	1848:6	10	(
CONDITION	1848:7	1848:7	10	sp -> qtable [ m ] != 0
EXPR	1848:7	1848:22	11	sp -> qtable [ m ] != 0
FIELD	1848:7	1848:19	12	sp -> qtable [ m ]
LEAF_NODE	1848:7	1848:7	13	sp
LEAF_NODE	1848:9	1848:9	13	->
LEAF_NODE	1848:11	1848:11	13	qtable
LEAF_NODE	1848:17	1848:17	13	[
EXPR	1848:18	1848:18	13	m
FIELD	1848:18	1848:18	14	m
LEAF_NODE	1848:18	1848:18	15	m
LEAF_NODE	1848:19	1848:19	13	]
EQ_OPERATOR	1848:20	1848:20	12	!=
LEAF_NODE	1848:20	1848:20	13	!=
FIELD	1848:22	1848:22	12	0
LEAF_NODE	1848:22	1848:22	13	0
LEAF_NODE	1848:23	1848:23	10	)
STATEMENTS	1849:4	1849:4	10	
EXPR_STATEMENT	1849:4	1849:28	11	_TIFFfree ( sp -> qtable [ m ] ) ;
EXPR	1849:4	1849:4	12	_TIFFfree ( sp -> qtable [ m ] )
FUNCTION_CALL	1849:4	1849:27	13	_TIFFfree ( sp -> qtable [ m ] )
CALLEE	1849:4	1849:4	14	_TIFFfree
LEAF_NODE	1849:4	1849:4	15	_TIFFfree
LEAF_NODE	1849:13	1849:13	14	(
ARGUMENT	1849:14	1849:14	14	sp -> qtable [ m ]
FIELD	1849:14	1849:26	15	sp -> qtable [ m ]
LEAF_NODE	1849:14	1849:14	16	sp
LEAF_NODE	1849:16	1849:16	16	->
LEAF_NODE	1849:18	1849:18	16	qtable
LEAF_NODE	1849:24	1849:24	16	[
EXPR	1849:25	1849:25	16	m
FIELD	1849:25	1849:25	17	m
LEAF_NODE	1849:25	1849:25	18	m
LEAF_NODE	1849:26	1849:26	16	]
LEAF_NODE	1849:27	1849:27	14	)
LEAF_NODE	1849:28	1849:28	12	;
EXPR_STATEMENT	1850:3	1850:19	9	sp -> qtable [ m ] = ob ;
EXPR	1850:3	1850:3	10	sp -> qtable [ m ] = ob
ASSIGN	1850:3	1850:17	11	sp -> qtable [ m ] = ob
LVAL	1850:3	1850:3	12	sp -> qtable [ m ]
FIELD	1850:3	1850:15	13	sp -> qtable [ m ]
LEAF_NODE	1850:3	1850:3	14	sp
LEAF_NODE	1850:5	1850:5	14	->
LEAF_NODE	1850:7	1850:7	14	qtable
LEAF_NODE	1850:13	1850:13	14	[
EXPR	1850:14	1850:14	14	m
FIELD	1850:14	1850:14	15	m
LEAF_NODE	1850:14	1850:14	16	m
LEAF_NODE	1850:15	1850:15	14	]
ASSIGN_OP	1850:16	1850:16	12	=
LEAF_NODE	1850:16	1850:16	13	=
RVAL	1850:17	1850:17	12	ob
FIELD	1850:17	1850:17	13	ob
LEAF_NODE	1850:17	1850:17	14	ob
LEAF_NODE	1850:19	1850:19	10	;
EXPR_STATEMENT	1851:3	1851:18	9	sp -> sof_tq [ m ] = m ;
EXPR	1851:3	1851:3	10	sp -> sof_tq [ m ] = m
ASSIGN	1851:3	1851:17	11	sp -> sof_tq [ m ] = m
LVAL	1851:3	1851:3	12	sp -> sof_tq [ m ]
FIELD	1851:3	1851:15	13	sp -> sof_tq [ m ]
LEAF_NODE	1851:3	1851:3	14	sp
LEAF_NODE	1851:5	1851:5	14	->
LEAF_NODE	1851:7	1851:7	14	sof_tq
LEAF_NODE	1851:13	1851:13	14	[
EXPR	1851:14	1851:14	14	m
FIELD	1851:14	1851:14	15	m
LEAF_NODE	1851:14	1851:14	16	m
LEAF_NODE	1851:15	1851:15	14	]
ASSIGN_OP	1851:16	1851:16	12	=
LEAF_NODE	1851:16	1851:16	13	=
RVAL	1851:17	1851:17	12	m
FIELD	1851:17	1851:17	13	m
LEAF_NODE	1851:17	1851:17	14	m
LEAF_NODE	1851:18	1851:18	10	;
LEAF_NODE	1852:2	1852:2	8	}
SELECTION	1853:2	1854:3	6	
KEYWORD	1853:2	1853:2	7	else
LEAF_NODE	1853:2	1853:2	8	else
STATEMENTS	1854:3	1854:3	7	
EXPR_STATEMENT	1854:3	1854:32	8	sp -> sof_tq [ m ] = sp -> sof_tq [ m - 1 ] ;
EXPR	1854:3	1854:3	9	sp -> sof_tq [ m ] = sp -> sof_tq [ m - 1 ]
ASSIGN	1854:3	1854:17	10	sp -> sof_tq [ m ] = sp -> sof_tq [ m - 1 ]
LVAL	1854:3	1854:3	11	sp -> sof_tq [ m ]
FIELD	1854:3	1854:15	12	sp -> sof_tq [ m ]
LEAF_NODE	1854:3	1854:3	13	sp
LEAF_NODE	1854:5	1854:5	13	->
LEAF_NODE	1854:7	1854:7	13	sof_tq
LEAF_NODE	1854:13	1854:13	13	[
EXPR	1854:14	1854:14	13	m
FIELD	1854:14	1854:14	14	m
LEAF_NODE	1854:14	1854:14	15	m
LEAF_NODE	1854:15	1854:15	13	]
ASSIGN_OP	1854:16	1854:16	11	=
LEAF_NODE	1854:16	1854:16	12	=
RVAL	1854:17	1854:17	11	sp -> sof_tq [ m - 1 ]
FIELD	1854:17	1854:31	12	sp -> sof_tq [ m - 1 ]
LEAF_NODE	1854:17	1854:17	13	sp
LEAF_NODE	1854:19	1854:19	13	->
LEAF_NODE	1854:21	1854:21	13	sof_tq
LEAF_NODE	1854:27	1854:27	13	[
EXPR	1854:28	1854:30	13	m - 1
FIELD	1854:28	1854:28	14	m
LEAF_NODE	1854:28	1854:28	15	m
LEAF_NODE	1854:29	1854:29	14	-
FIELD	1854:30	1854:30	14	1
LEAF_NODE	1854:30	1854:30	15	1
LEAF_NODE	1854:31	1854:31	13	]
LEAF_NODE	1854:32	1854:32	9	;
LEAF_NODE	1855:1	1855:1	5	}
JUMP_STATEMENT	1856:1	1856:10	3	return ( 1 ) ;
KEYWORD	1856:1	1856:1	4	return
LEAF_NODE	1856:1	1856:1	5	return
DESTINATION	1856:7	1856:7	4	( 1 )
EXPR	1856:7	1856:9	5	( 1 )
LEAF_NODE	1856:7	1856:7	6	(
FIELD	1856:8	1856:8	6	1
LEAF_NODE	1856:8	1856:8	7	1
LEAF_NODE	1856:9	1856:9	6	)
LEAF_NODE	1856:10	1856:10	4	;
LEAF_NODE	1857:0	1857:0	2	}
FUNCTION_DEF	1859:0	1926:0	1	
RETURN_TYPE	1859:0	1859:7	2	static int
LEAF_NODE	1859:0	1859:0	3	static
TYPE_NAME	1859:7	1859:7	3	int
LEAF_NODE	1859:7	1859:7	4	int
FUNCTION_NAME	1860:0	1860:0	2	OJPEGReadHeaderInfoSecTablesDcTable
LEAF_NODE	1860:0	1860:0	3	OJPEGReadHeaderInfoSecTablesDcTable
PARAMETER_LIST	1860:35	1860:45	2	( TIFF * tif )
LEAF_NODE	1860:35	1860:35	3	(
PARAMETER_DECL	1860:36	1860:42	3	TIFF * tif
TYPE	1860:36	1860:40	4	TIFF *
TYPE_NAME	1860:36	1860:36	5	TIFF
LEAF_NODE	1860:36	1860:36	6	TIFF
POINTER	1860:40	1860:40	5	*
LEAF_NODE	1860:40	1860:40	6	*
NAME	1860:42	1860:42	4	tif
LEAF_NODE	1860:42	1860:42	5	tif
LEAF_NODE	1860:45	1860:45	3	)
LEAF_NODE	1861:0	1861:0	2	{
STATEMENTS	1862:1	1925:1	2	
LEAF_NODE	1862:1	1862:1	3	static
SIMPLE_DECL	1862:8	1862:65	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecTablesDcTable" ;
VAR_DECL	1862:8	1862:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecTablesDcTable"
TYPE	1862:8	1862:25	5	const char [ ]
TYPE_NAME	1862:8	1862:14	6	const char
LEAF_NODE	1862:8	1862:8	7	const
LEAF_NODE	1862:14	1862:14	7	char
TYPE_SUFFIX	1862:25	1862:26	6	[ ]
LEAF_NODE	1862:25	1862:25	7	[
LEAF_NODE	1862:26	1862:26	7	]
NAME	1862:19	1862:19	5	module
LEAF_NODE	1862:19	1862:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1862:19	1862:19	5	module = "OJPEGReadHeaderInfoSecTablesDcTable"
ASSIGN	1862:19	1862:28	6	module = "OJPEGReadHeaderInfoSecTablesDcTable"
LVAL	1862:19	1862:19	7	module
NAME	1862:19	1862:19	8	module
LEAF_NODE	1862:19	1862:19	9	module
ASSIGN_OP	1862:27	1862:27	7	=
LEAF_NODE	1862:27	1862:27	8	=
RVAL	1862:28	1862:28	7	"OJPEGReadHeaderInfoSecTablesDcTable"
FIELD	1862:28	1862:28	8	"OJPEGReadHeaderInfoSecTablesDcTable"
LEAF_NODE	1862:28	1862:28	9	"OJPEGReadHeaderInfoSecTablesDcTable"
LEAF_NODE	1862:65	1862:65	4	;
SIMPLE_DECL	1863:1	1863:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1863:1	1863:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1863:1	1863:11	5	OJPEGState *
TYPE_NAME	1863:1	1863:1	6	OJPEGState
LEAF_NODE	1863:1	1863:1	7	OJPEGState
POINTER	1863:11	1863:11	6	*
LEAF_NODE	1863:11	1863:11	7	*
NAME	1863:13	1863:13	5	sp
LEAF_NODE	1863:13	1863:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1863:13	1863:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1863:13	1863:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1863:13	1863:13	7	sp
NAME	1863:13	1863:13	8	sp
LEAF_NODE	1863:13	1863:13	9	sp
ASSIGN_OP	1863:15	1863:15	7	=
LEAF_NODE	1863:15	1863:15	8	=
RVAL	1863:16	1863:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1863:16	1863:16	8	(
TYPE_NAME	1863:17	1863:17	8	OJPEGState
LEAF_NODE	1863:17	1863:17	9	OJPEGState
LEAF_NODE	1863:27	1863:27	8	*
LEAF_NODE	1863:28	1863:28	8	)
FIELD	1863:29	1863:34	8	tif -> tif_data
LEAF_NODE	1863:29	1863:29	9	tif
LEAF_NODE	1863:32	1863:32	9	->
LEAF_NODE	1863:34	1863:34	9	tif_data
LEAF_NODE	1863:42	1863:42	4	;
SIMPLE_DECL	1864:1	1864:8	3	uint8 m ;
VAR_DECL	1864:1	1864:7	4	uint8 m
TYPE	1864:1	1864:1	5	uint8
TYPE_NAME	1864:1	1864:1	6	uint8
LEAF_NODE	1864:1	1864:1	7	uint8
NAME	1864:7	1864:7	5	m
LEAF_NODE	1864:7	1864:7	6	m
LEAF_NODE	1864:8	1864:8	4	;
SIMPLE_DECL	1865:1	1865:8	3	uint8 n ;
VAR_DECL	1865:1	1865:7	4	uint8 n
TYPE	1865:1	1865:1	5	uint8
TYPE_NAME	1865:1	1865:1	6	uint8
LEAF_NODE	1865:1	1865:1	7	uint8
NAME	1865:7	1865:7	5	n
LEAF_NODE	1865:7	1865:7	6	n
LEAF_NODE	1865:8	1865:8	4	;
SIMPLE_DECL	1866:1	1866:12	3	uint8 [ 16 ] o ;
VAR_DECL	1866:1	1866:7	4	uint8 [ 16 ] o
TYPE	1866:1	1866:8	5	uint8 [ 16 ]
TYPE_NAME	1866:1	1866:1	6	uint8
LEAF_NODE	1866:1	1866:1	7	uint8
TYPE_SUFFIX	1866:8	1866:11	6	[ 16 ]
LEAF_NODE	1866:8	1866:8	7	[
FIELD	1866:9	1866:9	7	16
LEAF_NODE	1866:9	1866:9	8	16
LEAF_NODE	1866:11	1866:11	7	]
NAME	1866:7	1866:7	5	o
LEAF_NODE	1866:7	1866:7	6	o
LEAF_NODE	1866:12	1866:12	4	;
SIMPLE_DECL	1867:1	1867:9	3	uint32 p ;
VAR_DECL	1867:1	1867:8	4	uint32 p
TYPE	1867:1	1867:1	5	uint32
TYPE_NAME	1867:1	1867:1	6	uint32
LEAF_NODE	1867:1	1867:1	7	uint32
NAME	1867:8	1867:8	5	p
LEAF_NODE	1867:8	1867:8	6	p
LEAF_NODE	1867:9	1867:9	4	;
SIMPLE_DECL	1868:1	1868:9	3	uint32 q ;
VAR_DECL	1868:1	1868:8	4	uint32 q
TYPE	1868:1	1868:1	5	uint32
TYPE_NAME	1868:1	1868:1	6	uint32
LEAF_NODE	1868:1	1868:1	7	uint32
NAME	1868:8	1868:8	5	q
LEAF_NODE	1868:8	1868:8	6	q
LEAF_NODE	1868:9	1868:9	4	;
SIMPLE_DECL	1869:1	1869:10	3	uint32 ra ;
VAR_DECL	1869:1	1869:8	4	uint32 ra
TYPE	1869:1	1869:1	5	uint32
TYPE_NAME	1869:1	1869:1	6	uint32
LEAF_NODE	1869:1	1869:1	7	uint32
NAME	1869:8	1869:8	5	ra
LEAF_NODE	1869:8	1869:8	6	ra
LEAF_NODE	1869:10	1869:10	4	;
SIMPLE_DECL	1870:1	1870:10	3	uint8 * rb ;
VAR_DECL	1870:1	1870:8	4	uint8 * rb
TYPE	1870:1	1870:6	5	uint8 *
TYPE_NAME	1870:1	1870:1	6	uint8
LEAF_NODE	1870:1	1870:1	7	uint8
POINTER	1870:6	1870:6	6	*
LEAF_NODE	1870:6	1870:6	7	*
NAME	1870:8	1870:8	5	rb
LEAF_NODE	1870:8	1870:8	6	rb
LEAF_NODE	1870:10	1870:10	4	;
SELECTION	1871:1	1872:1	3	
KEYWORD	1871:1	1871:1	4	if
LEAF_NODE	1871:1	1871:1	5	if
LEAF_NODE	1871:4	1871:4	4	(
CONDITION	1871:5	1871:5	4	sp -> dctable_offset [ 0 ] == 0
EXPR	1871:5	1871:28	5	sp -> dctable_offset [ 0 ] == 0
FIELD	1871:5	1871:25	6	sp -> dctable_offset [ 0 ]
LEAF_NODE	1871:5	1871:5	7	sp
LEAF_NODE	1871:7	1871:7	7	->
LEAF_NODE	1871:9	1871:9	7	dctable_offset
LEAF_NODE	1871:23	1871:23	7	[
EXPR	1871:24	1871:24	7	0
FIELD	1871:24	1871:24	8	0
LEAF_NODE	1871:24	1871:24	9	0
LEAF_NODE	1871:25	1871:25	7	]
EQ_OPERATOR	1871:26	1871:26	6	==
LEAF_NODE	1871:26	1871:26	7	==
FIELD	1871:28	1871:28	6	0
LEAF_NODE	1871:28	1871:28	7	0
LEAF_NODE	1871:29	1871:29	4	)
STATEMENTS	1872:1	1875:1	4	
LEAF_NODE	1872:1	1872:1	5	{
STATEMENTS	1873:2	1874:2	5	
EXPR_STATEMENT	1873:2	1873:64	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" ) ;
EXPR	1873:2	1873:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" )
FUNCTION_CALL	1873:2	1873:63	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" )
CALLEE	1873:2	1873:2	9	TIFFErrorExt
LEAF_NODE	1873:2	1873:2	10	TIFFErrorExt
LEAF_NODE	1873:14	1873:14	9	(
ARGUMENT	1873:15	1873:15	9	tif -> tif_clientdata
FIELD	1873:15	1873:20	10	tif -> tif_clientdata
LEAF_NODE	1873:15	1873:15	11	tif
LEAF_NODE	1873:18	1873:18	11	->
LEAF_NODE	1873:20	1873:20	11	tif_clientdata
LEAF_NODE	1873:34	1873:34	9	,
ARGUMENT	1873:35	1873:35	9	module
FIELD	1873:35	1873:35	10	module
LEAF_NODE	1873:35	1873:35	11	module
LEAF_NODE	1873:41	1873:41	9	,
ARGUMENT	1873:42	1873:42	9	"Missing JPEG tables"
FIELD	1873:42	1873:42	10	"Missing JPEG tables"
LEAF_NODE	1873:42	1873:42	11	"Missing JPEG tables"
LEAF_NODE	1873:63	1873:63	9	)
LEAF_NODE	1873:64	1873:64	7	;
JUMP_STATEMENT	1874:2	1874:11	6	return ( 0 ) ;
KEYWORD	1874:2	1874:2	7	return
LEAF_NODE	1874:2	1874:2	8	return
DESTINATION	1874:8	1874:8	7	( 0 )
EXPR	1874:8	1874:10	8	( 0 )
LEAF_NODE	1874:8	1874:8	9	(
FIELD	1874:9	1874:9	9	0
LEAF_NODE	1874:9	1874:9	10	0
LEAF_NODE	1874:10	1874:10	9	)
LEAF_NODE	1874:11	1874:11	7	;
LEAF_NODE	1875:1	1875:1	5	}
EXPR_STATEMENT	1876:1	1876:29	3	sp -> in_buffer_file_pos_log = 0 ;
EXPR	1876:1	1876:1	4	sp -> in_buffer_file_pos_log = 0
ASSIGN	1876:1	1876:28	5	sp -> in_buffer_file_pos_log = 0
LVAL	1876:1	1876:1	6	sp -> in_buffer_file_pos_log
FIELD	1876:1	1876:5	7	sp -> in_buffer_file_pos_log
LEAF_NODE	1876:1	1876:1	8	sp
LEAF_NODE	1876:3	1876:3	8	->
LEAF_NODE	1876:5	1876:5	8	in_buffer_file_pos_log
ASSIGN_OP	1876:27	1876:27	6	=
LEAF_NODE	1876:27	1876:27	7	=
RVAL	1876:28	1876:28	6	0
FIELD	1876:28	1876:28	7	0
LEAF_NODE	1876:28	1876:28	8	0
LEAF_NODE	1876:29	1876:29	4	;
ITERATION	1877:1	1878:1	3	
KEYWORD	1877:1	1877:1	4	for
LEAF_NODE	1877:1	1877:1	5	for
LEAF_NODE	1877:5	1877:5	4	(
FOR_INIT	1877:6	1877:9	4	m = 0 ;
EXPR	1877:6	1877:6	5	m = 0
ASSIGN	1877:6	1877:8	6	m = 0
LVAL	1877:6	1877:6	7	m
FIELD	1877:6	1877:6	8	m
LEAF_NODE	1877:6	1877:6	9	m
ASSIGN_OP	1877:7	1877:7	7	=
LEAF_NODE	1877:7	1877:7	8	=
RVAL	1877:8	1877:8	7	0
FIELD	1877:8	1877:8	8	0
LEAF_NODE	1877:8	1877:8	9	0
LEAF_NODE	1877:9	1877:9	5	;
CONDITION	1877:11	1877:11	4	m < sp -> samples_per_pixel
EXPR	1877:11	1877:13	5	m < sp -> samples_per_pixel
FIELD	1877:11	1877:11	6	m
LEAF_NODE	1877:11	1877:11	7	m
REL_OPERATOR	1877:12	1877:12	6	<
LEAF_NODE	1877:12	1877:12	7	<
FIELD	1877:13	1877:17	6	sp -> samples_per_pixel
LEAF_NODE	1877:13	1877:13	7	sp
LEAF_NODE	1877:15	1877:15	7	->
LEAF_NODE	1877:17	1877:17	7	samples_per_pixel
LEAF_NODE	1877:34	1877:34	4	;
FOR_EXPR	1877:36	1877:36	4	m ++
EXPR	1877:36	1877:36	5	m ++
FIELD	1877:36	1877:37	6	m ++
LEAF_NODE	1877:36	1877:36	7	m
LEAF_NODE	1877:37	1877:37	7	++
LEAF_NODE	1877:39	1877:39	4	)
STATEMENTS	1878:1	1924:1	4	
LEAF_NODE	1878:1	1878:1	5	{
STATEMENTS	1879:2	1922:2	5	
SELECTION	1879:2	1880:2	6	
KEYWORD	1879:2	1879:2	7	if
LEAF_NODE	1879:2	1879:2	8	if
LEAF_NODE	1879:5	1879:5	7	(
CONDITION	1879:6	1879:6	7	( sp -> dctable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> dctable_offset [ m ] != sp -> dctable_offset [ m - 1 ] ) )
EXPR	1879:6	1879:6	8	( sp -> dctable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> dctable_offset [ m ] != sp -> dctable_offset [ m - 1 ] ) )
AND	1879:6	1879:36	9	( sp -> dctable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> dctable_offset [ m ] != sp -> dctable_offset [ m - 1 ] ) )
EXPR	1879:6	1879:31	10	( sp -> dctable_offset [ m ] != 0 )
LEAF_NODE	1879:6	1879:6	11	(
FIELD	1879:7	1879:27	11	sp -> dctable_offset [ m ]
LEAF_NODE	1879:7	1879:7	12	sp
LEAF_NODE	1879:9	1879:9	12	->
LEAF_NODE	1879:11	1879:11	12	dctable_offset
LEAF_NODE	1879:25	1879:25	12	[
EXPR	1879:26	1879:26	12	m
FIELD	1879:26	1879:26	13	m
LEAF_NODE	1879:26	1879:26	14	m
LEAF_NODE	1879:27	1879:27	12	]
EQ_OPERATOR	1879:28	1879:28	11	!=
LEAF_NODE	1879:28	1879:28	12	!=
FIELD	1879:30	1879:30	11	0
LEAF_NODE	1879:30	1879:30	12	0
LEAF_NODE	1879:31	1879:31	11	)
LEAF_NODE	1879:33	1879:33	10	&&
EXPR	1879:36	1879:95	10	( ( m == 0 ) || ( sp -> dctable_offset [ m ] != sp -> dctable_offset [ m - 1 ] ) )
LEAF_NODE	1879:36	1879:36	11	(
OR	1879:37	1879:47	11	( m == 0 ) || ( sp -> dctable_offset [ m ] != sp -> dctable_offset [ m - 1 ] )
EXPR	1879:37	1879:42	12	( m == 0 )
LEAF_NODE	1879:37	1879:37	13	(
FIELD	1879:38	1879:38	13	m
LEAF_NODE	1879:38	1879:38	14	m
EQ_OPERATOR	1879:39	1879:39	13	==
LEAF_NODE	1879:39	1879:39	14	==
FIELD	1879:41	1879:41	13	0
LEAF_NODE	1879:41	1879:41	14	0
LEAF_NODE	1879:42	1879:42	13	)
LEAF_NODE	1879:44	1879:44	12	||
EXPR	1879:47	1879:94	12	( sp -> dctable_offset [ m ] != sp -> dctable_offset [ m - 1 ] )
LEAF_NODE	1879:47	1879:47	13	(
FIELD	1879:48	1879:68	13	sp -> dctable_offset [ m ]
LEAF_NODE	1879:48	1879:48	14	sp
LEAF_NODE	1879:50	1879:50	14	->
LEAF_NODE	1879:52	1879:52	14	dctable_offset
LEAF_NODE	1879:66	1879:66	14	[
EXPR	1879:67	1879:67	14	m
FIELD	1879:67	1879:67	15	m
LEAF_NODE	1879:67	1879:67	16	m
LEAF_NODE	1879:68	1879:68	14	]
EQ_OPERATOR	1879:69	1879:69	13	!=
LEAF_NODE	1879:69	1879:69	14	!=
FIELD	1879:71	1879:93	13	sp -> dctable_offset [ m - 1 ]
LEAF_NODE	1879:71	1879:71	14	sp
LEAF_NODE	1879:73	1879:73	14	->
LEAF_NODE	1879:75	1879:75	14	dctable_offset
LEAF_NODE	1879:89	1879:89	14	[
EXPR	1879:90	1879:92	14	m - 1
FIELD	1879:90	1879:90	15	m
LEAF_NODE	1879:90	1879:90	16	m
LEAF_NODE	1879:91	1879:91	15	-
FIELD	1879:92	1879:92	15	1
LEAF_NODE	1879:92	1879:92	16	1
LEAF_NODE	1879:93	1879:93	14	]
LEAF_NODE	1879:94	1879:94	13	)
LEAF_NODE	1879:95	1879:95	11	)
LEAF_NODE	1879:96	1879:96	7	)
STATEMENTS	1880:2	1921:2	7	
LEAF_NODE	1880:2	1880:2	8	{
STATEMENTS	1881:3	1920:3	8	
ITERATION	1881:3	1882:3	9	
KEYWORD	1881:3	1881:3	10	for
LEAF_NODE	1881:3	1881:3	11	for
LEAF_NODE	1881:7	1881:7	10	(
FOR_INIT	1881:8	1881:11	10	n = 0 ;
EXPR	1881:8	1881:8	11	n = 0
ASSIGN	1881:8	1881:10	12	n = 0
LVAL	1881:8	1881:8	13	n
FIELD	1881:8	1881:8	14	n
LEAF_NODE	1881:8	1881:8	15	n
ASSIGN_OP	1881:9	1881:9	13	=
LEAF_NODE	1881:9	1881:9	14	=
RVAL	1881:10	1881:10	13	0
FIELD	1881:10	1881:10	14	0
LEAF_NODE	1881:10	1881:10	15	0
LEAF_NODE	1881:11	1881:11	11	;
CONDITION	1881:13	1881:13	10	n < m - 1
EXPR	1881:13	1881:17	11	n < m - 1
FIELD	1881:13	1881:13	12	n
LEAF_NODE	1881:13	1881:13	13	n
REL_OPERATOR	1881:14	1881:14	12	<
LEAF_NODE	1881:14	1881:14	13	<
FIELD	1881:15	1881:15	12	m
LEAF_NODE	1881:15	1881:15	13	m
LEAF_NODE	1881:16	1881:16	12	-
FIELD	1881:17	1881:17	12	1
LEAF_NODE	1881:17	1881:17	13	1
LEAF_NODE	1881:18	1881:18	10	;
FOR_EXPR	1881:20	1881:20	10	n ++
EXPR	1881:20	1881:20	11	n ++
FIELD	1881:20	1881:21	12	n ++
LEAF_NODE	1881:20	1881:20	13	n
LEAF_NODE	1881:21	1881:21	13	++
LEAF_NODE	1881:23	1881:23	10	)
STATEMENTS	1882:3	1888:3	10	
LEAF_NODE	1882:3	1882:3	11	{
STATEMENTS	1883:4	1883:4	11	
SELECTION	1883:4	1884:4	12	
KEYWORD	1883:4	1883:4	13	if
LEAF_NODE	1883:4	1883:4	14	if
LEAF_NODE	1883:7	1883:7	13	(
CONDITION	1883:8	1883:8	13	sp -> dctable_offset [ m ] == sp -> dctable_offset [ n ]
EXPR	1883:8	1883:31	14	sp -> dctable_offset [ m ] == sp -> dctable_offset [ n ]
FIELD	1883:8	1883:28	15	sp -> dctable_offset [ m ]
LEAF_NODE	1883:8	1883:8	16	sp
LEAF_NODE	1883:10	1883:10	16	->
LEAF_NODE	1883:12	1883:12	16	dctable_offset
LEAF_NODE	1883:26	1883:26	16	[
EXPR	1883:27	1883:27	16	m
FIELD	1883:27	1883:27	17	m
LEAF_NODE	1883:27	1883:27	18	m
LEAF_NODE	1883:28	1883:28	16	]
EQ_OPERATOR	1883:29	1883:29	15	==
LEAF_NODE	1883:29	1883:29	16	==
FIELD	1883:31	1883:51	15	sp -> dctable_offset [ n ]
LEAF_NODE	1883:31	1883:31	16	sp
LEAF_NODE	1883:33	1883:33	16	->
LEAF_NODE	1883:35	1883:35	16	dctable_offset
LEAF_NODE	1883:49	1883:49	16	[
EXPR	1883:50	1883:50	16	n
FIELD	1883:50	1883:50	17	n
LEAF_NODE	1883:50	1883:50	18	n
LEAF_NODE	1883:51	1883:51	16	]
LEAF_NODE	1883:52	1883:52	13	)
STATEMENTS	1884:4	1887:4	13	
LEAF_NODE	1884:4	1884:4	14	{
STATEMENTS	1885:5	1886:5	14	
EXPR_STATEMENT	1885:5	1885:78	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegDcTables tag value" ) ;
EXPR	1885:5	1885:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegDcTables tag value" )
FUNCTION_CALL	1885:5	1885:77	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegDcTables tag value" )
CALLEE	1885:5	1885:5	18	TIFFErrorExt
LEAF_NODE	1885:5	1885:5	19	TIFFErrorExt
LEAF_NODE	1885:17	1885:17	18	(
ARGUMENT	1885:18	1885:18	18	tif -> tif_clientdata
FIELD	1885:18	1885:23	19	tif -> tif_clientdata
LEAF_NODE	1885:18	1885:18	20	tif
LEAF_NODE	1885:21	1885:21	20	->
LEAF_NODE	1885:23	1885:23	20	tif_clientdata
LEAF_NODE	1885:37	1885:37	18	,
ARGUMENT	1885:38	1885:38	18	module
FIELD	1885:38	1885:38	19	module
LEAF_NODE	1885:38	1885:38	20	module
LEAF_NODE	1885:44	1885:44	18	,
ARGUMENT	1885:45	1885:45	18	"Corrupt JpegDcTables tag value"
FIELD	1885:45	1885:45	19	"Corrupt JpegDcTables tag value"
LEAF_NODE	1885:45	1885:45	20	"Corrupt JpegDcTables tag value"
LEAF_NODE	1885:77	1885:77	18	)
LEAF_NODE	1885:78	1885:78	16	;
JUMP_STATEMENT	1886:5	1886:14	15	return ( 0 ) ;
KEYWORD	1886:5	1886:5	16	return
LEAF_NODE	1886:5	1886:5	17	return
DESTINATION	1886:11	1886:11	16	( 0 )
EXPR	1886:11	1886:13	17	( 0 )
LEAF_NODE	1886:11	1886:11	18	(
FIELD	1886:12	1886:12	18	0
LEAF_NODE	1886:12	1886:12	19	0
LEAF_NODE	1886:13	1886:13	18	)
LEAF_NODE	1886:14	1886:14	16	;
LEAF_NODE	1887:4	1887:4	14	}
LEAF_NODE	1888:3	1888:3	11	}
EXPR_STATEMENT	1889:3	1889:51	9	TIFFSeekFile ( tif , sp -> dctable_offset [ m ] , SEEK_SET ) ;
EXPR	1889:3	1889:3	10	TIFFSeekFile ( tif , sp -> dctable_offset [ m ] , SEEK_SET )
FUNCTION_CALL	1889:3	1889:50	11	TIFFSeekFile ( tif , sp -> dctable_offset [ m ] , SEEK_SET )
CALLEE	1889:3	1889:3	12	TIFFSeekFile
LEAF_NODE	1889:3	1889:3	13	TIFFSeekFile
LEAF_NODE	1889:15	1889:15	12	(
ARGUMENT	1889:16	1889:16	12	tif
FIELD	1889:16	1889:16	13	tif
LEAF_NODE	1889:16	1889:16	14	tif
LEAF_NODE	1889:19	1889:19	12	,
ARGUMENT	1889:20	1889:20	12	sp -> dctable_offset [ m ]
FIELD	1889:20	1889:40	13	sp -> dctable_offset [ m ]
LEAF_NODE	1889:20	1889:20	14	sp
LEAF_NODE	1889:22	1889:22	14	->
LEAF_NODE	1889:24	1889:24	14	dctable_offset
LEAF_NODE	1889:38	1889:38	14	[
EXPR	1889:39	1889:39	14	m
FIELD	1889:39	1889:39	15	m
LEAF_NODE	1889:39	1889:39	16	m
LEAF_NODE	1889:40	1889:40	14	]
LEAF_NODE	1889:41	1889:41	12	,
ARGUMENT	1889:42	1889:42	12	SEEK_SET
FIELD	1889:42	1889:42	13	SEEK_SET
LEAF_NODE	1889:42	1889:42	14	SEEK_SET
LEAF_NODE	1889:50	1889:50	12	)
LEAF_NODE	1889:51	1889:51	10	;
EXPR_STATEMENT	1890:3	1890:35	9	p = ( uint32 ) TIFFReadFile ( tif , o , 16 ) ;
EXPR	1890:3	1890:3	10	p = ( uint32 ) TIFFReadFile ( tif , o , 16 )
ASSIGN	1890:3	1890:5	11	p = ( uint32 ) TIFFReadFile ( tif , o , 16 )
LVAL	1890:3	1890:3	12	p
FIELD	1890:3	1890:3	13	p
LEAF_NODE	1890:3	1890:3	14	p
ASSIGN_OP	1890:4	1890:4	12	=
LEAF_NODE	1890:4	1890:4	13	=
RVAL	1890:5	1890:13	12	( uint32 ) TIFFReadFile ( tif , o , 16 )
LEAF_NODE	1890:5	1890:5	13	(
TYPE_NAME	1890:6	1890:6	13	uint32
LEAF_NODE	1890:6	1890:6	14	uint32
LEAF_NODE	1890:12	1890:12	13	)
FUNCTION_CALL	1890:13	1890:34	13	TIFFReadFile ( tif , o , 16 )
CALLEE	1890:13	1890:13	14	TIFFReadFile
LEAF_NODE	1890:13	1890:13	15	TIFFReadFile
LEAF_NODE	1890:25	1890:25	14	(
ARGUMENT	1890:26	1890:26	14	tif
FIELD	1890:26	1890:26	15	tif
LEAF_NODE	1890:26	1890:26	16	tif
LEAF_NODE	1890:29	1890:29	14	,
ARGUMENT	1890:30	1890:30	14	o
FIELD	1890:30	1890:30	15	o
LEAF_NODE	1890:30	1890:30	16	o
LEAF_NODE	1890:31	1890:31	14	,
ARGUMENT	1890:32	1890:32	14	16
FIELD	1890:32	1890:32	15	16
LEAF_NODE	1890:32	1890:32	16	16
LEAF_NODE	1890:34	1890:34	14	)
LEAF_NODE	1890:35	1890:35	10	;
SELECTION	1891:3	1892:4	9	
KEYWORD	1891:3	1891:3	10	if
LEAF_NODE	1891:3	1891:3	11	if
LEAF_NODE	1891:6	1891:6	10	(
CONDITION	1891:7	1891:7	10	p != 16
EXPR	1891:7	1891:10	11	p != 16
FIELD	1891:7	1891:7	12	p
LEAF_NODE	1891:7	1891:7	13	p
EQ_OPERATOR	1891:8	1891:8	12	!=
LEAF_NODE	1891:8	1891:8	13	!=
FIELD	1891:10	1891:10	12	16
LEAF_NODE	1891:10	1891:10	13	16
LEAF_NODE	1891:12	1891:12	10	)
STATEMENTS	1892:4	1892:4	10	
JUMP_STATEMENT	1892:4	1892:13	11	return ( 0 ) ;
KEYWORD	1892:4	1892:4	12	return
LEAF_NODE	1892:4	1892:4	13	return
DESTINATION	1892:10	1892:10	12	( 0 )
EXPR	1892:10	1892:12	13	( 0 )
LEAF_NODE	1892:10	1892:10	14	(
FIELD	1892:11	1892:11	14	0
LEAF_NODE	1892:11	1892:11	15	0
LEAF_NODE	1892:12	1892:12	14	)
LEAF_NODE	1892:13	1892:13	12	;
EXPR_STATEMENT	1893:3	1893:6	9	q = 0 ;
EXPR	1893:3	1893:3	10	q = 0
ASSIGN	1893:3	1893:5	11	q = 0
LVAL	1893:3	1893:3	12	q
FIELD	1893:3	1893:3	13	q
LEAF_NODE	1893:3	1893:3	14	q
ASSIGN_OP	1893:4	1893:4	12	=
LEAF_NODE	1893:4	1893:4	13	=
RVAL	1893:5	1893:5	12	0
FIELD	1893:5	1893:5	13	0
LEAF_NODE	1893:5	1893:5	14	0
LEAF_NODE	1893:6	1893:6	10	;
ITERATION	1894:3	1895:4	9	
KEYWORD	1894:3	1894:3	10	for
LEAF_NODE	1894:3	1894:3	11	for
LEAF_NODE	1894:7	1894:7	10	(
FOR_INIT	1894:8	1894:11	10	n = 0 ;
EXPR	1894:8	1894:8	11	n = 0
ASSIGN	1894:8	1894:10	12	n = 0
LVAL	1894:8	1894:8	13	n
FIELD	1894:8	1894:8	14	n
LEAF_NODE	1894:8	1894:8	15	n
ASSIGN_OP	1894:9	1894:9	13	=
LEAF_NODE	1894:9	1894:9	14	=
RVAL	1894:10	1894:10	13	0
FIELD	1894:10	1894:10	14	0
LEAF_NODE	1894:10	1894:10	15	0
LEAF_NODE	1894:11	1894:11	11	;
CONDITION	1894:13	1894:13	10	n < 16
EXPR	1894:13	1894:15	11	n < 16
FIELD	1894:13	1894:13	12	n
LEAF_NODE	1894:13	1894:13	13	n
REL_OPERATOR	1894:14	1894:14	12	<
LEAF_NODE	1894:14	1894:14	13	<
FIELD	1894:15	1894:15	12	16
LEAF_NODE	1894:15	1894:15	13	16
LEAF_NODE	1894:17	1894:17	10	;
FOR_EXPR	1894:19	1894:19	10	n ++
EXPR	1894:19	1894:19	11	n ++
FIELD	1894:19	1894:20	12	n ++
LEAF_NODE	1894:19	1894:19	13	n
LEAF_NODE	1894:20	1894:20	13	++
LEAF_NODE	1894:22	1894:22	10	)
STATEMENTS	1895:4	1895:4	10	
EXPR_STATEMENT	1895:4	1895:11	11	q += o [ n ] ;
EXPR	1895:4	1895:4	12	q += o [ n ]
ASSIGN	1895:4	1895:7	13	q += o [ n ]
LVAL	1895:4	1895:4	14	q
FIELD	1895:4	1895:4	15	q
LEAF_NODE	1895:4	1895:4	16	q
ASSIGN_OP	1895:5	1895:5	14	+=
LEAF_NODE	1895:5	1895:5	15	+=
RVAL	1895:7	1895:7	14	o [ n ]
FIELD	1895:7	1895:10	15	o [ n ]
LEAF_NODE	1895:7	1895:7	16	o
LEAF_NODE	1895:8	1895:8	16	[
EXPR	1895:9	1895:9	16	n
FIELD	1895:9	1895:9	17	n
LEAF_NODE	1895:9	1895:9	18	n
LEAF_NODE	1895:10	1895:10	16	]
LEAF_NODE	1895:11	1895:11	12	;
EXPR_STATEMENT	1896:3	1896:25	9	ra = sizeof ( uint32 ) + 21 + q ;
EXPR	1896:3	1896:3	10	ra = sizeof ( uint32 ) + 21 + q
ASSIGN	1896:3	1896:6	11	ra = sizeof ( uint32 ) + 21 + q
LVAL	1896:3	1896:3	12	ra
FIELD	1896:3	1896:3	13	ra
LEAF_NODE	1896:3	1896:3	14	ra
ASSIGN_OP	1896:5	1896:5	12	=
LEAF_NODE	1896:5	1896:5	13	=
RVAL	1896:6	1896:24	12	sizeof ( uint32 ) + 21 + q
FUNCTION_CALL	1896:6	1896:19	13	sizeof ( uint32 )
CALLEE	1896:6	1896:6	14	sizeof
LEAF_NODE	1896:6	1896:6	15	sizeof
LEAF_NODE	1896:12	1896:12	14	(
ARGUMENT	1896:13	1896:13	14	uint32
FIELD	1896:13	1896:13	15	uint32
LEAF_NODE	1896:13	1896:13	16	uint32
LEAF_NODE	1896:19	1896:19	14	)
LEAF_NODE	1896:20	1896:20	13	+
FIELD	1896:21	1896:21	13	21
LEAF_NODE	1896:21	1896:21	14	21
LEAF_NODE	1896:23	1896:23	13	+
FIELD	1896:24	1896:24	13	q
LEAF_NODE	1896:24	1896:24	14	q
LEAF_NODE	1896:25	1896:25	10	;
EXPR_STATEMENT	1897:3	1897:21	9	rb = _TIFFmalloc ( ra ) ;
EXPR	1897:3	1897:3	10	rb = _TIFFmalloc ( ra )
ASSIGN	1897:3	1897:6	11	rb = _TIFFmalloc ( ra )
LVAL	1897:3	1897:3	12	rb
FIELD	1897:3	1897:3	13	rb
LEAF_NODE	1897:3	1897:3	14	rb
ASSIGN_OP	1897:5	1897:5	12	=
LEAF_NODE	1897:5	1897:5	13	=
RVAL	1897:6	1897:6	12	_TIFFmalloc ( ra )
FUNCTION_CALL	1897:6	1897:20	13	_TIFFmalloc ( ra )
CALLEE	1897:6	1897:6	14	_TIFFmalloc
LEAF_NODE	1897:6	1897:6	15	_TIFFmalloc
LEAF_NODE	1897:17	1897:17	14	(
ARGUMENT	1897:18	1897:18	14	ra
FIELD	1897:18	1897:18	15	ra
LEAF_NODE	1897:18	1897:18	16	ra
LEAF_NODE	1897:20	1897:20	14	)
LEAF_NODE	1897:21	1897:21	10	;
SELECTION	1898:3	1899:3	9	
KEYWORD	1898:3	1898:3	10	if
LEAF_NODE	1898:3	1898:3	11	if
LEAF_NODE	1898:6	1898:6	10	(
CONDITION	1898:7	1898:7	10	rb == 0
EXPR	1898:7	1898:11	11	rb == 0
FIELD	1898:7	1898:7	12	rb
LEAF_NODE	1898:7	1898:7	13	rb
EQ_OPERATOR	1898:9	1898:9	12	==
LEAF_NODE	1898:9	1898:9	13	==
FIELD	1898:11	1898:11	12	0
LEAF_NODE	1898:11	1898:11	13	0
LEAF_NODE	1898:12	1898:12	10	)
STATEMENTS	1899:3	1902:3	10	
LEAF_NODE	1899:3	1899:3	11	{
STATEMENTS	1900:4	1901:4	11	
EXPR_STATEMENT	1900:4	1900:60	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1900:4	1900:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1900:4	1900:59	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1900:4	1900:4	15	TIFFErrorExt
LEAF_NODE	1900:4	1900:4	16	TIFFErrorExt
LEAF_NODE	1900:16	1900:16	15	(
ARGUMENT	1900:17	1900:17	15	tif -> tif_clientdata
FIELD	1900:17	1900:22	16	tif -> tif_clientdata
LEAF_NODE	1900:17	1900:17	17	tif
LEAF_NODE	1900:20	1900:20	17	->
LEAF_NODE	1900:22	1900:22	17	tif_clientdata
LEAF_NODE	1900:36	1900:36	15	,
ARGUMENT	1900:37	1900:37	15	module
FIELD	1900:37	1900:37	16	module
LEAF_NODE	1900:37	1900:37	17	module
LEAF_NODE	1900:43	1900:43	15	,
ARGUMENT	1900:44	1900:44	15	"Out of memory"
FIELD	1900:44	1900:44	16	"Out of memory"
LEAF_NODE	1900:44	1900:44	17	"Out of memory"
LEAF_NODE	1900:59	1900:59	15	)
LEAF_NODE	1900:60	1900:60	13	;
JUMP_STATEMENT	1901:4	1901:13	12	return ( 0 ) ;
KEYWORD	1901:4	1901:4	13	return
LEAF_NODE	1901:4	1901:4	14	return
DESTINATION	1901:10	1901:10	13	( 0 )
EXPR	1901:10	1901:12	14	( 0 )
LEAF_NODE	1901:10	1901:10	15	(
FIELD	1901:11	1901:11	15	0
LEAF_NODE	1901:11	1901:11	16	0
LEAF_NODE	1901:12	1901:12	15	)
LEAF_NODE	1901:13	1901:13	13	;
LEAF_NODE	1902:3	1902:3	11	}
LEAF_NODE	1903:3	1903:3	9	*
EXPR_STATEMENT	1903:4	1903:18	9	( uint32 * ) rb = ra ;
EXPR	1903:4	1903:4	10	( uint32 * ) rb = ra
ASSIGN	1903:4	1903:16	11	( uint32 * ) rb = ra
LVAL	1903:4	1903:13	12	( uint32 * ) rb
LEAF_NODE	1903:4	1903:4	13	(
TYPE_NAME	1903:5	1903:5	13	uint32
LEAF_NODE	1903:5	1903:5	14	uint32
LEAF_NODE	1903:11	1903:11	13	*
LEAF_NODE	1903:12	1903:12	13	)
FIELD	1903:13	1903:13	13	rb
LEAF_NODE	1903:13	1903:13	14	rb
ASSIGN_OP	1903:15	1903:15	12	=
LEAF_NODE	1903:15	1903:15	13	=
RVAL	1903:16	1903:16	12	ra
FIELD	1903:16	1903:16	13	ra
LEAF_NODE	1903:16	1903:16	14	ra
LEAF_NODE	1903:18	1903:18	10	;
EXPR_STATEMENT	1904:3	1904:25	9	rb [ sizeof ( uint32 ) ] = 255 ;
EXPR	1904:3	1904:3	10	rb [ sizeof ( uint32 ) ] = 255
ASSIGN	1904:3	1904:22	11	rb [ sizeof ( uint32 ) ] = 255
LVAL	1904:3	1904:3	12	rb [ sizeof ( uint32 ) ]
FIELD	1904:3	1904:20	13	rb [ sizeof ( uint32 ) ]
LEAF_NODE	1904:3	1904:3	14	rb
LEAF_NODE	1904:5	1904:5	14	[
EXPR	1904:6	1904:6	14	sizeof ( uint32 )
FUNCTION_CALL	1904:6	1904:19	15	sizeof ( uint32 )
CALLEE	1904:6	1904:6	16	sizeof
LEAF_NODE	1904:6	1904:6	17	sizeof
LEAF_NODE	1904:12	1904:12	16	(
ARGUMENT	1904:13	1904:13	16	uint32
FIELD	1904:13	1904:13	17	uint32
LEAF_NODE	1904:13	1904:13	18	uint32
LEAF_NODE	1904:19	1904:19	16	)
LEAF_NODE	1904:20	1904:20	14	]
ASSIGN_OP	1904:21	1904:21	12	=
LEAF_NODE	1904:21	1904:21	13	=
RVAL	1904:22	1904:22	12	255
FIELD	1904:22	1904:22	13	255
LEAF_NODE	1904:22	1904:22	14	255
LEAF_NODE	1904:25	1904:25	10	;
EXPR_STATEMENT	1905:3	1905:39	9	rb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT ;
EXPR	1905:3	1905:3	10	rb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT
ASSIGN	1905:3	1905:24	11	rb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT
LVAL	1905:3	1905:3	12	rb [ sizeof ( uint32 ) + 1 ]
FIELD	1905:3	1905:22	13	rb [ sizeof ( uint32 ) + 1 ]
LEAF_NODE	1905:3	1905:3	14	rb
LEAF_NODE	1905:5	1905:5	14	[
EXPR	1905:6	1905:21	14	sizeof ( uint32 ) + 1
FUNCTION_CALL	1905:6	1905:19	15	sizeof ( uint32 )
CALLEE	1905:6	1905:6	16	sizeof
LEAF_NODE	1905:6	1905:6	17	sizeof
LEAF_NODE	1905:12	1905:12	16	(
ARGUMENT	1905:13	1905:13	16	uint32
FIELD	1905:13	1905:13	17	uint32
LEAF_NODE	1905:13	1905:13	18	uint32
LEAF_NODE	1905:19	1905:19	16	)
LEAF_NODE	1905:20	1905:20	15	+
FIELD	1905:21	1905:21	15	1
LEAF_NODE	1905:21	1905:21	16	1
LEAF_NODE	1905:22	1905:22	14	]
ASSIGN_OP	1905:23	1905:23	12	=
LEAF_NODE	1905:23	1905:23	13	=
RVAL	1905:24	1905:24	12	JPEG_MARKER_DHT
FIELD	1905:24	1905:24	13	JPEG_MARKER_DHT
LEAF_NODE	1905:24	1905:24	14	JPEG_MARKER_DHT
LEAF_NODE	1905:39	1905:39	10	;
EXPR_STATEMENT	1906:3	1906:42	9	rb [ sizeof ( uint32 ) + 2 ] = ( uint8 ) ( ( 19 + q ) >> 8 ) ;
EXPR	1906:3	1906:3	10	rb [ sizeof ( uint32 ) + 2 ] = ( uint8 ) ( ( 19 + q ) >> 8 )
ASSIGN	1906:3	1906:24	11	rb [ sizeof ( uint32 ) + 2 ] = ( uint8 ) ( ( 19 + q ) >> 8 )
LVAL	1906:3	1906:3	12	rb [ sizeof ( uint32 ) + 2 ]
FIELD	1906:3	1906:22	13	rb [ sizeof ( uint32 ) + 2 ]
LEAF_NODE	1906:3	1906:3	14	rb
LEAF_NODE	1906:5	1906:5	14	[
EXPR	1906:6	1906:21	14	sizeof ( uint32 ) + 2
FUNCTION_CALL	1906:6	1906:19	15	sizeof ( uint32 )
CALLEE	1906:6	1906:6	16	sizeof
LEAF_NODE	1906:6	1906:6	17	sizeof
LEAF_NODE	1906:12	1906:12	16	(
ARGUMENT	1906:13	1906:13	16	uint32
FIELD	1906:13	1906:13	17	uint32
LEAF_NODE	1906:13	1906:13	18	uint32
LEAF_NODE	1906:19	1906:19	16	)
LEAF_NODE	1906:20	1906:20	15	+
FIELD	1906:21	1906:21	15	2
LEAF_NODE	1906:21	1906:21	16	2
LEAF_NODE	1906:22	1906:22	14	]
ASSIGN_OP	1906:23	1906:23	12	=
LEAF_NODE	1906:23	1906:23	13	=
RVAL	1906:24	1906:41	12	( uint8 ) ( ( 19 + q ) >> 8 )
LEAF_NODE	1906:24	1906:24	13	(
TYPE_NAME	1906:25	1906:25	13	uint8
LEAF_NODE	1906:25	1906:25	14	uint8
LEAF_NODE	1906:30	1906:30	13	)
LEAF_NODE	1906:31	1906:31	13	(
LEAF_NODE	1906:32	1906:32	13	(
FIELD	1906:33	1906:33	13	19
LEAF_NODE	1906:33	1906:33	14	19
LEAF_NODE	1906:35	1906:35	13	+
FIELD	1906:36	1906:36	13	q
LEAF_NODE	1906:36	1906:36	14	q
LEAF_NODE	1906:37	1906:37	13	)
LEAF_NODE	1906:38	1906:38	13	>>
FIELD	1906:40	1906:40	13	8
LEAF_NODE	1906:40	1906:40	14	8
LEAF_NODE	1906:41	1906:41	13	)
LEAF_NODE	1906:42	1906:42	10	;
EXPR_STATEMENT	1907:3	1907:36	9	rb [ sizeof ( uint32 ) + 3 ] = ( ( 19 + q ) & 255 ) ;
EXPR	1907:3	1907:3	10	rb [ sizeof ( uint32 ) + 3 ] = ( ( 19 + q ) & 255 )
ASSIGN	1907:3	1907:24	11	rb [ sizeof ( uint32 ) + 3 ] = ( ( 19 + q ) & 255 )
LVAL	1907:3	1907:3	12	rb [ sizeof ( uint32 ) + 3 ]
FIELD	1907:3	1907:22	13	rb [ sizeof ( uint32 ) + 3 ]
LEAF_NODE	1907:3	1907:3	14	rb
LEAF_NODE	1907:5	1907:5	14	[
EXPR	1907:6	1907:21	14	sizeof ( uint32 ) + 3
FUNCTION_CALL	1907:6	1907:19	15	sizeof ( uint32 )
CALLEE	1907:6	1907:6	16	sizeof
LEAF_NODE	1907:6	1907:6	17	sizeof
LEAF_NODE	1907:12	1907:12	16	(
ARGUMENT	1907:13	1907:13	16	uint32
FIELD	1907:13	1907:13	17	uint32
LEAF_NODE	1907:13	1907:13	18	uint32
LEAF_NODE	1907:19	1907:19	16	)
LEAF_NODE	1907:20	1907:20	15	+
FIELD	1907:21	1907:21	15	3
LEAF_NODE	1907:21	1907:21	16	3
LEAF_NODE	1907:22	1907:22	14	]
ASSIGN_OP	1907:23	1907:23	12	=
LEAF_NODE	1907:23	1907:23	13	=
RVAL	1907:24	1907:35	12	( ( 19 + q ) & 255 )
LEAF_NODE	1907:24	1907:24	13	(
LEAF_NODE	1907:25	1907:25	13	(
FIELD	1907:26	1907:26	13	19
LEAF_NODE	1907:26	1907:26	14	19
LEAF_NODE	1907:28	1907:28	13	+
FIELD	1907:29	1907:29	13	q
LEAF_NODE	1907:29	1907:29	14	q
LEAF_NODE	1907:30	1907:30	13	)
LEAF_NODE	1907:31	1907:31	13	&
FIELD	1907:32	1907:32	13	255
LEAF_NODE	1907:32	1907:32	14	255
LEAF_NODE	1907:35	1907:35	13	)
LEAF_NODE	1907:36	1907:36	10	;
EXPR_STATEMENT	1908:3	1908:25	9	rb [ sizeof ( uint32 ) + 4 ] = m ;
EXPR	1908:3	1908:3	10	rb [ sizeof ( uint32 ) + 4 ] = m
ASSIGN	1908:3	1908:24	11	rb [ sizeof ( uint32 ) + 4 ] = m
LVAL	1908:3	1908:3	12	rb [ sizeof ( uint32 ) + 4 ]
FIELD	1908:3	1908:22	13	rb [ sizeof ( uint32 ) + 4 ]
LEAF_NODE	1908:3	1908:3	14	rb
LEAF_NODE	1908:5	1908:5	14	[
EXPR	1908:6	1908:21	14	sizeof ( uint32 ) + 4
FUNCTION_CALL	1908:6	1908:19	15	sizeof ( uint32 )
CALLEE	1908:6	1908:6	16	sizeof
LEAF_NODE	1908:6	1908:6	17	sizeof
LEAF_NODE	1908:12	1908:12	16	(
ARGUMENT	1908:13	1908:13	16	uint32
FIELD	1908:13	1908:13	17	uint32
LEAF_NODE	1908:13	1908:13	18	uint32
LEAF_NODE	1908:19	1908:19	16	)
LEAF_NODE	1908:20	1908:20	15	+
FIELD	1908:21	1908:21	15	4
LEAF_NODE	1908:21	1908:21	16	4
LEAF_NODE	1908:22	1908:22	14	]
ASSIGN_OP	1908:23	1908:23	12	=
LEAF_NODE	1908:23	1908:23	13	=
RVAL	1908:24	1908:24	12	m
FIELD	1908:24	1908:24	13	m
LEAF_NODE	1908:24	1908:24	14	m
LEAF_NODE	1908:25	1908:25	10	;
ITERATION	1909:3	1910:4	9	
KEYWORD	1909:3	1909:3	10	for
LEAF_NODE	1909:3	1909:3	11	for
LEAF_NODE	1909:7	1909:7	10	(
FOR_INIT	1909:8	1909:11	10	n = 0 ;
EXPR	1909:8	1909:8	11	n = 0
ASSIGN	1909:8	1909:10	12	n = 0
LVAL	1909:8	1909:8	13	n
FIELD	1909:8	1909:8	14	n
LEAF_NODE	1909:8	1909:8	15	n
ASSIGN_OP	1909:9	1909:9	13	=
LEAF_NODE	1909:9	1909:9	14	=
RVAL	1909:10	1909:10	13	0
FIELD	1909:10	1909:10	14	0
LEAF_NODE	1909:10	1909:10	15	0
LEAF_NODE	1909:11	1909:11	11	;
CONDITION	1909:13	1909:13	10	n < 16
EXPR	1909:13	1909:15	11	n < 16
FIELD	1909:13	1909:13	12	n
LEAF_NODE	1909:13	1909:13	13	n
REL_OPERATOR	1909:14	1909:14	12	<
LEAF_NODE	1909:14	1909:14	13	<
FIELD	1909:15	1909:15	12	16
LEAF_NODE	1909:15	1909:15	13	16
LEAF_NODE	1909:17	1909:17	10	;
FOR_EXPR	1909:19	1909:19	10	n ++
EXPR	1909:19	1909:19	11	n ++
FIELD	1909:19	1909:20	12	n ++
LEAF_NODE	1909:19	1909:19	13	n
LEAF_NODE	1909:20	1909:20	13	++
LEAF_NODE	1909:22	1909:22	10	)
STATEMENTS	1910:4	1910:4	10	
EXPR_STATEMENT	1910:4	1910:31	11	rb [ sizeof ( uint32 ) + 5 + n ] = o [ n ] ;
EXPR	1910:4	1910:4	12	rb [ sizeof ( uint32 ) + 5 + n ] = o [ n ]
ASSIGN	1910:4	1910:27	13	rb [ sizeof ( uint32 ) + 5 + n ] = o [ n ]
LVAL	1910:4	1910:4	14	rb [ sizeof ( uint32 ) + 5 + n ]
FIELD	1910:4	1910:25	15	rb [ sizeof ( uint32 ) + 5 + n ]
LEAF_NODE	1910:4	1910:4	16	rb
LEAF_NODE	1910:6	1910:6	16	[
EXPR	1910:7	1910:24	16	sizeof ( uint32 ) + 5 + n
FUNCTION_CALL	1910:7	1910:20	17	sizeof ( uint32 )
CALLEE	1910:7	1910:7	18	sizeof
LEAF_NODE	1910:7	1910:7	19	sizeof
LEAF_NODE	1910:13	1910:13	18	(
ARGUMENT	1910:14	1910:14	18	uint32
FIELD	1910:14	1910:14	19	uint32
LEAF_NODE	1910:14	1910:14	20	uint32
LEAF_NODE	1910:20	1910:20	18	)
LEAF_NODE	1910:21	1910:21	17	+
FIELD	1910:22	1910:22	17	5
LEAF_NODE	1910:22	1910:22	18	5
LEAF_NODE	1910:23	1910:23	17	+
FIELD	1910:24	1910:24	17	n
LEAF_NODE	1910:24	1910:24	18	n
LEAF_NODE	1910:25	1910:25	16	]
ASSIGN_OP	1910:26	1910:26	14	=
LEAF_NODE	1910:26	1910:26	15	=
RVAL	1910:27	1910:27	14	o [ n ]
FIELD	1910:27	1910:30	15	o [ n ]
LEAF_NODE	1910:27	1910:27	16	o
LEAF_NODE	1910:28	1910:28	16	[
EXPR	1910:29	1910:29	16	n
FIELD	1910:29	1910:29	17	n
LEAF_NODE	1910:29	1910:29	18	n
LEAF_NODE	1910:30	1910:30	16	]
LEAF_NODE	1910:31	1910:31	12	;
EXPR_STATEMENT	1911:3	1911:57	9	p = ( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q ) ;
EXPR	1911:3	1911:3	10	p = ( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
ASSIGN	1911:3	1911:5	11	p = ( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
LVAL	1911:3	1911:3	12	p
FIELD	1911:3	1911:3	13	p
LEAF_NODE	1911:3	1911:3	14	p
ASSIGN_OP	1911:4	1911:4	12	=
LEAF_NODE	1911:4	1911:4	13	=
RVAL	1911:5	1911:13	12	( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
LEAF_NODE	1911:5	1911:5	13	(
TYPE_NAME	1911:6	1911:6	13	uint32
LEAF_NODE	1911:6	1911:6	14	uint32
LEAF_NODE	1911:12	1911:12	13	)
FUNCTION_CALL	1911:13	1911:56	13	TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
CALLEE	1911:13	1911:13	14	TIFFReadFile
LEAF_NODE	1911:13	1911:13	15	TIFFReadFile
LEAF_NODE	1911:25	1911:25	14	(
ARGUMENT	1911:26	1911:26	14	tif
FIELD	1911:26	1911:26	15	tif
LEAF_NODE	1911:26	1911:26	16	tif
LEAF_NODE	1911:29	1911:29	14	,
ARGUMENT	1911:30	1911:30	14	& ( rb [ sizeof ( uint32 ) + 21 ] )
UNARY_EXPR	1911:30	1911:53	15	& ( rb [ sizeof ( uint32 ) + 21 ] )
UNARY_OPERATOR	1911:30	1911:30	16	&
LEAF_NODE	1911:30	1911:30	17	&
LEAF_NODE	1911:31	1911:31	16	(
FIELD	1911:32	1911:52	16	rb [ sizeof ( uint32 ) + 21 ]
LEAF_NODE	1911:32	1911:32	17	rb
LEAF_NODE	1911:34	1911:34	17	[
EXPR	1911:35	1911:50	17	sizeof ( uint32 ) + 21
FUNCTION_CALL	1911:35	1911:48	18	sizeof ( uint32 )
CALLEE	1911:35	1911:35	19	sizeof
LEAF_NODE	1911:35	1911:35	20	sizeof
LEAF_NODE	1911:41	1911:41	19	(
ARGUMENT	1911:42	1911:42	19	uint32
FIELD	1911:42	1911:42	20	uint32
LEAF_NODE	1911:42	1911:42	21	uint32
LEAF_NODE	1911:48	1911:48	19	)
LEAF_NODE	1911:49	1911:49	18	+
FIELD	1911:50	1911:50	18	21
LEAF_NODE	1911:50	1911:50	19	21
LEAF_NODE	1911:52	1911:52	17	]
LEAF_NODE	1911:53	1911:53	16	)
LEAF_NODE	1911:54	1911:54	14	,
ARGUMENT	1911:55	1911:55	14	q
FIELD	1911:55	1911:55	15	q
LEAF_NODE	1911:55	1911:55	16	q
LEAF_NODE	1911:56	1911:56	14	)
LEAF_NODE	1911:57	1911:57	10	;
SELECTION	1912:3	1913:24	9	
KEYWORD	1912:3	1912:3	10	if
LEAF_NODE	1912:3	1912:3	11	if
LEAF_NODE	1912:6	1912:6	10	(
CONDITION	1912:7	1912:7	10	p != q
EXPR	1912:7	1912:10	11	p != q
FIELD	1912:7	1912:7	12	p
LEAF_NODE	1912:7	1912:7	13	p
EQ_OPERATOR	1912:8	1912:8	12	!=
LEAF_NODE	1912:8	1912:8	13	!=
FIELD	1912:10	1912:10	12	q
LEAF_NODE	1912:10	1912:10	13	q
LEAF_NODE	1912:11	1912:11	10	)
STATEMENTS	1913:24	1916:24	10	
LEAF_NODE	1913:24	1913:24	11	{
STATEMENTS	1914:32	1915:4	11	
EXPR_STATEMENT	1914:32	1914:45	12	_TIFFfree ( rb ) ;
EXPR	1914:32	1914:32	13	_TIFFfree ( rb )
FUNCTION_CALL	1914:32	1914:44	14	_TIFFfree ( rb )
CALLEE	1914:32	1914:32	15	_TIFFfree
LEAF_NODE	1914:32	1914:32	16	_TIFFfree
LEAF_NODE	1914:41	1914:41	15	(
ARGUMENT	1914:42	1914:42	15	rb
FIELD	1914:42	1914:42	16	rb
LEAF_NODE	1914:42	1914:42	17	rb
LEAF_NODE	1914:44	1914:44	15	)
LEAF_NODE	1914:45	1914:45	13	;
JUMP_STATEMENT	1915:4	1915:13	12	return ( 0 ) ;
KEYWORD	1915:4	1915:4	13	return
LEAF_NODE	1915:4	1915:4	14	return
DESTINATION	1915:10	1915:10	13	( 0 )
EXPR	1915:10	1915:12	14	( 0 )
LEAF_NODE	1915:10	1915:10	15	(
FIELD	1915:11	1915:11	15	0
LEAF_NODE	1915:11	1915:11	16	0
LEAF_NODE	1915:12	1915:12	15	)
LEAF_NODE	1915:13	1915:13	13	;
LEAF_NODE	1916:24	1916:24	11	}
SELECTION	1917:3	1918:4	9	
KEYWORD	1917:3	1917:3	10	if
LEAF_NODE	1917:3	1917:3	11	if
LEAF_NODE	1917:6	1917:6	10	(
CONDITION	1917:7	1917:7	10	sp -> dctable [ m ] != 0
EXPR	1917:7	1917:23	11	sp -> dctable [ m ] != 0
FIELD	1917:7	1917:20	12	sp -> dctable [ m ]
LEAF_NODE	1917:7	1917:7	13	sp
LEAF_NODE	1917:9	1917:9	13	->
LEAF_NODE	1917:11	1917:11	13	dctable
LEAF_NODE	1917:18	1917:18	13	[
EXPR	1917:19	1917:19	13	m
FIELD	1917:19	1917:19	14	m
LEAF_NODE	1917:19	1917:19	15	m
LEAF_NODE	1917:20	1917:20	13	]
EQ_OPERATOR	1917:21	1917:21	12	!=
LEAF_NODE	1917:21	1917:21	13	!=
FIELD	1917:23	1917:23	12	0
LEAF_NODE	1917:23	1917:23	13	0
LEAF_NODE	1917:24	1917:24	10	)
STATEMENTS	1918:4	1918:4	10	
EXPR_STATEMENT	1918:4	1918:29	11	_TIFFfree ( sp -> dctable [ m ] ) ;
EXPR	1918:4	1918:4	12	_TIFFfree ( sp -> dctable [ m ] )
FUNCTION_CALL	1918:4	1918:28	13	_TIFFfree ( sp -> dctable [ m ] )
CALLEE	1918:4	1918:4	14	_TIFFfree
LEAF_NODE	1918:4	1918:4	15	_TIFFfree
LEAF_NODE	1918:13	1918:13	14	(
ARGUMENT	1918:14	1918:14	14	sp -> dctable [ m ]
FIELD	1918:14	1918:27	15	sp -> dctable [ m ]
LEAF_NODE	1918:14	1918:14	16	sp
LEAF_NODE	1918:16	1918:16	16	->
LEAF_NODE	1918:18	1918:18	16	dctable
LEAF_NODE	1918:25	1918:25	16	[
EXPR	1918:26	1918:26	16	m
FIELD	1918:26	1918:26	17	m
LEAF_NODE	1918:26	1918:26	18	m
LEAF_NODE	1918:27	1918:27	16	]
LEAF_NODE	1918:28	1918:28	14	)
LEAF_NODE	1918:29	1918:29	12	;
EXPR_STATEMENT	1919:3	1919:20	9	sp -> dctable [ m ] = rb ;
EXPR	1919:3	1919:3	10	sp -> dctable [ m ] = rb
ASSIGN	1919:3	1919:18	11	sp -> dctable [ m ] = rb
LVAL	1919:3	1919:3	12	sp -> dctable [ m ]
FIELD	1919:3	1919:16	13	sp -> dctable [ m ]
LEAF_NODE	1919:3	1919:3	14	sp
LEAF_NODE	1919:5	1919:5	14	->
LEAF_NODE	1919:7	1919:7	14	dctable
LEAF_NODE	1919:14	1919:14	14	[
EXPR	1919:15	1919:15	14	m
FIELD	1919:15	1919:15	15	m
LEAF_NODE	1919:15	1919:15	16	m
LEAF_NODE	1919:16	1919:16	14	]
ASSIGN_OP	1919:17	1919:17	12	=
LEAF_NODE	1919:17	1919:17	13	=
RVAL	1919:18	1919:18	12	rb
FIELD	1919:18	1919:18	13	rb
LEAF_NODE	1919:18	1919:18	14	rb
LEAF_NODE	1919:20	1919:20	10	;
EXPR_STATEMENT	1920:3	1920:24	9	sp -> sos_tda [ m ] = ( m << 4 ) ;
EXPR	1920:3	1920:3	10	sp -> sos_tda [ m ] = ( m << 4 )
ASSIGN	1920:3	1920:18	11	sp -> sos_tda [ m ] = ( m << 4 )
LVAL	1920:3	1920:3	12	sp -> sos_tda [ m ]
FIELD	1920:3	1920:16	13	sp -> sos_tda [ m ]
LEAF_NODE	1920:3	1920:3	14	sp
LEAF_NODE	1920:5	1920:5	14	->
LEAF_NODE	1920:7	1920:7	14	sos_tda
LEAF_NODE	1920:14	1920:14	14	[
EXPR	1920:15	1920:15	14	m
FIELD	1920:15	1920:15	15	m
LEAF_NODE	1920:15	1920:15	16	m
LEAF_NODE	1920:16	1920:16	14	]
ASSIGN_OP	1920:17	1920:17	12	=
LEAF_NODE	1920:17	1920:17	13	=
RVAL	1920:18	1920:23	12	( m << 4 )
LEAF_NODE	1920:18	1920:18	13	(
FIELD	1920:19	1920:19	13	m
LEAF_NODE	1920:19	1920:19	14	m
LEAF_NODE	1920:20	1920:20	13	<<
FIELD	1920:22	1920:22	13	4
LEAF_NODE	1920:22	1920:22	14	4
LEAF_NODE	1920:23	1920:23	13	)
LEAF_NODE	1920:24	1920:24	10	;
LEAF_NODE	1921:2	1921:2	8	}
SELECTION	1922:2	1923:3	6	
KEYWORD	1922:2	1922:2	7	else
LEAF_NODE	1922:2	1922:2	8	else
STATEMENTS	1923:3	1923:3	7	
EXPR_STATEMENT	1923:3	1923:34	8	sp -> sos_tda [ m ] = sp -> sos_tda [ m - 1 ] ;
EXPR	1923:3	1923:3	9	sp -> sos_tda [ m ] = sp -> sos_tda [ m - 1 ]
ASSIGN	1923:3	1923:18	10	sp -> sos_tda [ m ] = sp -> sos_tda [ m - 1 ]
LVAL	1923:3	1923:3	11	sp -> sos_tda [ m ]
FIELD	1923:3	1923:16	12	sp -> sos_tda [ m ]
LEAF_NODE	1923:3	1923:3	13	sp
LEAF_NODE	1923:5	1923:5	13	->
LEAF_NODE	1923:7	1923:7	13	sos_tda
LEAF_NODE	1923:14	1923:14	13	[
EXPR	1923:15	1923:15	13	m
FIELD	1923:15	1923:15	14	m
LEAF_NODE	1923:15	1923:15	15	m
LEAF_NODE	1923:16	1923:16	13	]
ASSIGN_OP	1923:17	1923:17	11	=
LEAF_NODE	1923:17	1923:17	12	=
RVAL	1923:18	1923:18	11	sp -> sos_tda [ m - 1 ]
FIELD	1923:18	1923:33	12	sp -> sos_tda [ m - 1 ]
LEAF_NODE	1923:18	1923:18	13	sp
LEAF_NODE	1923:20	1923:20	13	->
LEAF_NODE	1923:22	1923:22	13	sos_tda
LEAF_NODE	1923:29	1923:29	13	[
EXPR	1923:30	1923:32	13	m - 1
FIELD	1923:30	1923:30	14	m
LEAF_NODE	1923:30	1923:30	15	m
LEAF_NODE	1923:31	1923:31	14	-
FIELD	1923:32	1923:32	14	1
LEAF_NODE	1923:32	1923:32	15	1
LEAF_NODE	1923:33	1923:33	13	]
LEAF_NODE	1923:34	1923:34	9	;
LEAF_NODE	1924:1	1924:1	5	}
JUMP_STATEMENT	1925:1	1925:10	3	return ( 1 ) ;
KEYWORD	1925:1	1925:1	4	return
LEAF_NODE	1925:1	1925:1	5	return
DESTINATION	1925:7	1925:7	4	( 1 )
EXPR	1925:7	1925:9	5	( 1 )
LEAF_NODE	1925:7	1925:7	6	(
FIELD	1925:8	1925:8	6	1
LEAF_NODE	1925:8	1925:8	7	1
LEAF_NODE	1925:9	1925:9	6	)
LEAF_NODE	1925:10	1925:10	4	;
LEAF_NODE	1926:0	1926:0	2	}
FUNCTION_DEF	1928:0	1995:0	1	
RETURN_TYPE	1928:0	1928:7	2	static int
LEAF_NODE	1928:0	1928:0	3	static
TYPE_NAME	1928:7	1928:7	3	int
LEAF_NODE	1928:7	1928:7	4	int
FUNCTION_NAME	1929:0	1929:0	2	OJPEGReadHeaderInfoSecTablesAcTable
LEAF_NODE	1929:0	1929:0	3	OJPEGReadHeaderInfoSecTablesAcTable
PARAMETER_LIST	1929:35	1929:45	2	( TIFF * tif )
LEAF_NODE	1929:35	1929:35	3	(
PARAMETER_DECL	1929:36	1929:42	3	TIFF * tif
TYPE	1929:36	1929:40	4	TIFF *
TYPE_NAME	1929:36	1929:36	5	TIFF
LEAF_NODE	1929:36	1929:36	6	TIFF
POINTER	1929:40	1929:40	5	*
LEAF_NODE	1929:40	1929:40	6	*
NAME	1929:42	1929:42	4	tif
LEAF_NODE	1929:42	1929:42	5	tif
LEAF_NODE	1929:45	1929:45	3	)
LEAF_NODE	1930:0	1930:0	2	{
STATEMENTS	1931:1	1994:1	2	
LEAF_NODE	1931:1	1931:1	3	static
SIMPLE_DECL	1931:8	1931:65	3	const char [ ] module ; module = "OJPEGReadHeaderInfoSecTablesAcTable" ;
VAR_DECL	1931:8	1931:19	4	const char [ ] module ; module = "OJPEGReadHeaderInfoSecTablesAcTable"
TYPE	1931:8	1931:25	5	const char [ ]
TYPE_NAME	1931:8	1931:14	6	const char
LEAF_NODE	1931:8	1931:8	7	const
LEAF_NODE	1931:14	1931:14	7	char
TYPE_SUFFIX	1931:25	1931:26	6	[ ]
LEAF_NODE	1931:25	1931:25	7	[
LEAF_NODE	1931:26	1931:26	7	]
NAME	1931:19	1931:19	5	module
LEAF_NODE	1931:19	1931:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	1931:19	1931:19	5	module = "OJPEGReadHeaderInfoSecTablesAcTable"
ASSIGN	1931:19	1931:28	6	module = "OJPEGReadHeaderInfoSecTablesAcTable"
LVAL	1931:19	1931:19	7	module
NAME	1931:19	1931:19	8	module
LEAF_NODE	1931:19	1931:19	9	module
ASSIGN_OP	1931:27	1931:27	7	=
LEAF_NODE	1931:27	1931:27	8	=
RVAL	1931:28	1931:28	7	"OJPEGReadHeaderInfoSecTablesAcTable"
FIELD	1931:28	1931:28	8	"OJPEGReadHeaderInfoSecTablesAcTable"
LEAF_NODE	1931:28	1931:28	9	"OJPEGReadHeaderInfoSecTablesAcTable"
LEAF_NODE	1931:65	1931:65	4	;
SIMPLE_DECL	1932:1	1932:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	1932:1	1932:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	1932:1	1932:11	5	OJPEGState *
TYPE_NAME	1932:1	1932:1	6	OJPEGState
LEAF_NODE	1932:1	1932:1	7	OJPEGState
POINTER	1932:11	1932:11	6	*
LEAF_NODE	1932:11	1932:11	7	*
NAME	1932:13	1932:13	5	sp
LEAF_NODE	1932:13	1932:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	1932:13	1932:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	1932:13	1932:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	1932:13	1932:13	7	sp
NAME	1932:13	1932:13	8	sp
LEAF_NODE	1932:13	1932:13	9	sp
ASSIGN_OP	1932:15	1932:15	7	=
LEAF_NODE	1932:15	1932:15	8	=
RVAL	1932:16	1932:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	1932:16	1932:16	8	(
TYPE_NAME	1932:17	1932:17	8	OJPEGState
LEAF_NODE	1932:17	1932:17	9	OJPEGState
LEAF_NODE	1932:27	1932:27	8	*
LEAF_NODE	1932:28	1932:28	8	)
FIELD	1932:29	1932:34	8	tif -> tif_data
LEAF_NODE	1932:29	1932:29	9	tif
LEAF_NODE	1932:32	1932:32	9	->
LEAF_NODE	1932:34	1932:34	9	tif_data
LEAF_NODE	1932:42	1932:42	4	;
SIMPLE_DECL	1933:1	1933:8	3	uint8 m ;
VAR_DECL	1933:1	1933:7	4	uint8 m
TYPE	1933:1	1933:1	5	uint8
TYPE_NAME	1933:1	1933:1	6	uint8
LEAF_NODE	1933:1	1933:1	7	uint8
NAME	1933:7	1933:7	5	m
LEAF_NODE	1933:7	1933:7	6	m
LEAF_NODE	1933:8	1933:8	4	;
SIMPLE_DECL	1934:1	1934:8	3	uint8 n ;
VAR_DECL	1934:1	1934:7	4	uint8 n
TYPE	1934:1	1934:1	5	uint8
TYPE_NAME	1934:1	1934:1	6	uint8
LEAF_NODE	1934:1	1934:1	7	uint8
NAME	1934:7	1934:7	5	n
LEAF_NODE	1934:7	1934:7	6	n
LEAF_NODE	1934:8	1934:8	4	;
SIMPLE_DECL	1935:1	1935:12	3	uint8 [ 16 ] o ;
VAR_DECL	1935:1	1935:7	4	uint8 [ 16 ] o
TYPE	1935:1	1935:8	5	uint8 [ 16 ]
TYPE_NAME	1935:1	1935:1	6	uint8
LEAF_NODE	1935:1	1935:1	7	uint8
TYPE_SUFFIX	1935:8	1935:11	6	[ 16 ]
LEAF_NODE	1935:8	1935:8	7	[
FIELD	1935:9	1935:9	7	16
LEAF_NODE	1935:9	1935:9	8	16
LEAF_NODE	1935:11	1935:11	7	]
NAME	1935:7	1935:7	5	o
LEAF_NODE	1935:7	1935:7	6	o
LEAF_NODE	1935:12	1935:12	4	;
SIMPLE_DECL	1936:1	1936:9	3	uint32 p ;
VAR_DECL	1936:1	1936:8	4	uint32 p
TYPE	1936:1	1936:1	5	uint32
TYPE_NAME	1936:1	1936:1	6	uint32
LEAF_NODE	1936:1	1936:1	7	uint32
NAME	1936:8	1936:8	5	p
LEAF_NODE	1936:8	1936:8	6	p
LEAF_NODE	1936:9	1936:9	4	;
SIMPLE_DECL	1937:1	1937:9	3	uint32 q ;
VAR_DECL	1937:1	1937:8	4	uint32 q
TYPE	1937:1	1937:1	5	uint32
TYPE_NAME	1937:1	1937:1	6	uint32
LEAF_NODE	1937:1	1937:1	7	uint32
NAME	1937:8	1937:8	5	q
LEAF_NODE	1937:8	1937:8	6	q
LEAF_NODE	1937:9	1937:9	4	;
SIMPLE_DECL	1938:1	1938:10	3	uint32 ra ;
VAR_DECL	1938:1	1938:8	4	uint32 ra
TYPE	1938:1	1938:1	5	uint32
TYPE_NAME	1938:1	1938:1	6	uint32
LEAF_NODE	1938:1	1938:1	7	uint32
NAME	1938:8	1938:8	5	ra
LEAF_NODE	1938:8	1938:8	6	ra
LEAF_NODE	1938:10	1938:10	4	;
SIMPLE_DECL	1939:1	1939:10	3	uint8 * rb ;
VAR_DECL	1939:1	1939:8	4	uint8 * rb
TYPE	1939:1	1939:6	5	uint8 *
TYPE_NAME	1939:1	1939:1	6	uint8
LEAF_NODE	1939:1	1939:1	7	uint8
POINTER	1939:6	1939:6	6	*
LEAF_NODE	1939:6	1939:6	7	*
NAME	1939:8	1939:8	5	rb
LEAF_NODE	1939:8	1939:8	6	rb
LEAF_NODE	1939:10	1939:10	4	;
SELECTION	1940:1	1941:1	3	
KEYWORD	1940:1	1940:1	4	if
LEAF_NODE	1940:1	1940:1	5	if
LEAF_NODE	1940:4	1940:4	4	(
CONDITION	1940:5	1940:5	4	sp -> actable_offset [ 0 ] == 0
EXPR	1940:5	1940:28	5	sp -> actable_offset [ 0 ] == 0
FIELD	1940:5	1940:25	6	sp -> actable_offset [ 0 ]
LEAF_NODE	1940:5	1940:5	7	sp
LEAF_NODE	1940:7	1940:7	7	->
LEAF_NODE	1940:9	1940:9	7	actable_offset
LEAF_NODE	1940:23	1940:23	7	[
EXPR	1940:24	1940:24	7	0
FIELD	1940:24	1940:24	8	0
LEAF_NODE	1940:24	1940:24	9	0
LEAF_NODE	1940:25	1940:25	7	]
EQ_OPERATOR	1940:26	1940:26	6	==
LEAF_NODE	1940:26	1940:26	7	==
FIELD	1940:28	1940:28	6	0
LEAF_NODE	1940:28	1940:28	7	0
LEAF_NODE	1940:29	1940:29	4	)
STATEMENTS	1941:1	1944:1	4	
LEAF_NODE	1941:1	1941:1	5	{
STATEMENTS	1942:2	1943:2	5	
EXPR_STATEMENT	1942:2	1942:64	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" ) ;
EXPR	1942:2	1942:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" )
FUNCTION_CALL	1942:2	1942:63	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Missing JPEG tables" )
CALLEE	1942:2	1942:2	9	TIFFErrorExt
LEAF_NODE	1942:2	1942:2	10	TIFFErrorExt
LEAF_NODE	1942:14	1942:14	9	(
ARGUMENT	1942:15	1942:15	9	tif -> tif_clientdata
FIELD	1942:15	1942:20	10	tif -> tif_clientdata
LEAF_NODE	1942:15	1942:15	11	tif
LEAF_NODE	1942:18	1942:18	11	->
LEAF_NODE	1942:20	1942:20	11	tif_clientdata
LEAF_NODE	1942:34	1942:34	9	,
ARGUMENT	1942:35	1942:35	9	module
FIELD	1942:35	1942:35	10	module
LEAF_NODE	1942:35	1942:35	11	module
LEAF_NODE	1942:41	1942:41	9	,
ARGUMENT	1942:42	1942:42	9	"Missing JPEG tables"
FIELD	1942:42	1942:42	10	"Missing JPEG tables"
LEAF_NODE	1942:42	1942:42	11	"Missing JPEG tables"
LEAF_NODE	1942:63	1942:63	9	)
LEAF_NODE	1942:64	1942:64	7	;
JUMP_STATEMENT	1943:2	1943:11	6	return ( 0 ) ;
KEYWORD	1943:2	1943:2	7	return
LEAF_NODE	1943:2	1943:2	8	return
DESTINATION	1943:8	1943:8	7	( 0 )
EXPR	1943:8	1943:10	8	( 0 )
LEAF_NODE	1943:8	1943:8	9	(
FIELD	1943:9	1943:9	9	0
LEAF_NODE	1943:9	1943:9	10	0
LEAF_NODE	1943:10	1943:10	9	)
LEAF_NODE	1943:11	1943:11	7	;
LEAF_NODE	1944:1	1944:1	5	}
EXPR_STATEMENT	1945:1	1945:29	3	sp -> in_buffer_file_pos_log = 0 ;
EXPR	1945:1	1945:1	4	sp -> in_buffer_file_pos_log = 0
ASSIGN	1945:1	1945:28	5	sp -> in_buffer_file_pos_log = 0
LVAL	1945:1	1945:1	6	sp -> in_buffer_file_pos_log
FIELD	1945:1	1945:5	7	sp -> in_buffer_file_pos_log
LEAF_NODE	1945:1	1945:1	8	sp
LEAF_NODE	1945:3	1945:3	8	->
LEAF_NODE	1945:5	1945:5	8	in_buffer_file_pos_log
ASSIGN_OP	1945:27	1945:27	6	=
LEAF_NODE	1945:27	1945:27	7	=
RVAL	1945:28	1945:28	6	0
FIELD	1945:28	1945:28	7	0
LEAF_NODE	1945:28	1945:28	8	0
LEAF_NODE	1945:29	1945:29	4	;
ITERATION	1946:1	1947:1	3	
KEYWORD	1946:1	1946:1	4	for
LEAF_NODE	1946:1	1946:1	5	for
LEAF_NODE	1946:5	1946:5	4	(
FOR_INIT	1946:6	1946:9	4	m = 0 ;
EXPR	1946:6	1946:6	5	m = 0
ASSIGN	1946:6	1946:8	6	m = 0
LVAL	1946:6	1946:6	7	m
FIELD	1946:6	1946:6	8	m
LEAF_NODE	1946:6	1946:6	9	m
ASSIGN_OP	1946:7	1946:7	7	=
LEAF_NODE	1946:7	1946:7	8	=
RVAL	1946:8	1946:8	7	0
FIELD	1946:8	1946:8	8	0
LEAF_NODE	1946:8	1946:8	9	0
LEAF_NODE	1946:9	1946:9	5	;
CONDITION	1946:11	1946:11	4	m < sp -> samples_per_pixel
EXPR	1946:11	1946:13	5	m < sp -> samples_per_pixel
FIELD	1946:11	1946:11	6	m
LEAF_NODE	1946:11	1946:11	7	m
REL_OPERATOR	1946:12	1946:12	6	<
LEAF_NODE	1946:12	1946:12	7	<
FIELD	1946:13	1946:17	6	sp -> samples_per_pixel
LEAF_NODE	1946:13	1946:13	7	sp
LEAF_NODE	1946:15	1946:15	7	->
LEAF_NODE	1946:17	1946:17	7	samples_per_pixel
LEAF_NODE	1946:34	1946:34	4	;
FOR_EXPR	1946:36	1946:36	4	m ++
EXPR	1946:36	1946:36	5	m ++
FIELD	1946:36	1946:37	6	m ++
LEAF_NODE	1946:36	1946:36	7	m
LEAF_NODE	1946:37	1946:37	7	++
LEAF_NODE	1946:39	1946:39	4	)
STATEMENTS	1947:1	1993:1	4	
LEAF_NODE	1947:1	1947:1	5	{
STATEMENTS	1948:2	1991:2	5	
SELECTION	1948:2	1949:2	6	
KEYWORD	1948:2	1948:2	7	if
LEAF_NODE	1948:2	1948:2	8	if
LEAF_NODE	1948:5	1948:5	7	(
CONDITION	1948:6	1948:6	7	( sp -> actable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> actable_offset [ m ] != sp -> actable_offset [ m - 1 ] ) )
EXPR	1948:6	1948:6	8	( sp -> actable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> actable_offset [ m ] != sp -> actable_offset [ m - 1 ] ) )
AND	1948:6	1948:36	9	( sp -> actable_offset [ m ] != 0 ) && ( ( m == 0 ) || ( sp -> actable_offset [ m ] != sp -> actable_offset [ m - 1 ] ) )
EXPR	1948:6	1948:31	10	( sp -> actable_offset [ m ] != 0 )
LEAF_NODE	1948:6	1948:6	11	(
FIELD	1948:7	1948:27	11	sp -> actable_offset [ m ]
LEAF_NODE	1948:7	1948:7	12	sp
LEAF_NODE	1948:9	1948:9	12	->
LEAF_NODE	1948:11	1948:11	12	actable_offset
LEAF_NODE	1948:25	1948:25	12	[
EXPR	1948:26	1948:26	12	m
FIELD	1948:26	1948:26	13	m
LEAF_NODE	1948:26	1948:26	14	m
LEAF_NODE	1948:27	1948:27	12	]
EQ_OPERATOR	1948:28	1948:28	11	!=
LEAF_NODE	1948:28	1948:28	12	!=
FIELD	1948:30	1948:30	11	0
LEAF_NODE	1948:30	1948:30	12	0
LEAF_NODE	1948:31	1948:31	11	)
LEAF_NODE	1948:33	1948:33	10	&&
EXPR	1948:36	1948:95	10	( ( m == 0 ) || ( sp -> actable_offset [ m ] != sp -> actable_offset [ m - 1 ] ) )
LEAF_NODE	1948:36	1948:36	11	(
OR	1948:37	1948:47	11	( m == 0 ) || ( sp -> actable_offset [ m ] != sp -> actable_offset [ m - 1 ] )
EXPR	1948:37	1948:42	12	( m == 0 )
LEAF_NODE	1948:37	1948:37	13	(
FIELD	1948:38	1948:38	13	m
LEAF_NODE	1948:38	1948:38	14	m
EQ_OPERATOR	1948:39	1948:39	13	==
LEAF_NODE	1948:39	1948:39	14	==
FIELD	1948:41	1948:41	13	0
LEAF_NODE	1948:41	1948:41	14	0
LEAF_NODE	1948:42	1948:42	13	)
LEAF_NODE	1948:44	1948:44	12	||
EXPR	1948:47	1948:94	12	( sp -> actable_offset [ m ] != sp -> actable_offset [ m - 1 ] )
LEAF_NODE	1948:47	1948:47	13	(
FIELD	1948:48	1948:68	13	sp -> actable_offset [ m ]
LEAF_NODE	1948:48	1948:48	14	sp
LEAF_NODE	1948:50	1948:50	14	->
LEAF_NODE	1948:52	1948:52	14	actable_offset
LEAF_NODE	1948:66	1948:66	14	[
EXPR	1948:67	1948:67	14	m
FIELD	1948:67	1948:67	15	m
LEAF_NODE	1948:67	1948:67	16	m
LEAF_NODE	1948:68	1948:68	14	]
EQ_OPERATOR	1948:69	1948:69	13	!=
LEAF_NODE	1948:69	1948:69	14	!=
FIELD	1948:71	1948:93	13	sp -> actable_offset [ m - 1 ]
LEAF_NODE	1948:71	1948:71	14	sp
LEAF_NODE	1948:73	1948:73	14	->
LEAF_NODE	1948:75	1948:75	14	actable_offset
LEAF_NODE	1948:89	1948:89	14	[
EXPR	1948:90	1948:92	14	m - 1
FIELD	1948:90	1948:90	15	m
LEAF_NODE	1948:90	1948:90	16	m
LEAF_NODE	1948:91	1948:91	15	-
FIELD	1948:92	1948:92	15	1
LEAF_NODE	1948:92	1948:92	16	1
LEAF_NODE	1948:93	1948:93	14	]
LEAF_NODE	1948:94	1948:94	13	)
LEAF_NODE	1948:95	1948:95	11	)
LEAF_NODE	1948:96	1948:96	7	)
STATEMENTS	1949:2	1990:2	7	
LEAF_NODE	1949:2	1949:2	8	{
STATEMENTS	1950:3	1989:3	8	
ITERATION	1950:3	1951:3	9	
KEYWORD	1950:3	1950:3	10	for
LEAF_NODE	1950:3	1950:3	11	for
LEAF_NODE	1950:7	1950:7	10	(
FOR_INIT	1950:8	1950:11	10	n = 0 ;
EXPR	1950:8	1950:8	11	n = 0
ASSIGN	1950:8	1950:10	12	n = 0
LVAL	1950:8	1950:8	13	n
FIELD	1950:8	1950:8	14	n
LEAF_NODE	1950:8	1950:8	15	n
ASSIGN_OP	1950:9	1950:9	13	=
LEAF_NODE	1950:9	1950:9	14	=
RVAL	1950:10	1950:10	13	0
FIELD	1950:10	1950:10	14	0
LEAF_NODE	1950:10	1950:10	15	0
LEAF_NODE	1950:11	1950:11	11	;
CONDITION	1950:13	1950:13	10	n < m - 1
EXPR	1950:13	1950:17	11	n < m - 1
FIELD	1950:13	1950:13	12	n
LEAF_NODE	1950:13	1950:13	13	n
REL_OPERATOR	1950:14	1950:14	12	<
LEAF_NODE	1950:14	1950:14	13	<
FIELD	1950:15	1950:15	12	m
LEAF_NODE	1950:15	1950:15	13	m
LEAF_NODE	1950:16	1950:16	12	-
FIELD	1950:17	1950:17	12	1
LEAF_NODE	1950:17	1950:17	13	1
LEAF_NODE	1950:18	1950:18	10	;
FOR_EXPR	1950:20	1950:20	10	n ++
EXPR	1950:20	1950:20	11	n ++
FIELD	1950:20	1950:21	12	n ++
LEAF_NODE	1950:20	1950:20	13	n
LEAF_NODE	1950:21	1950:21	13	++
LEAF_NODE	1950:23	1950:23	10	)
STATEMENTS	1951:3	1957:3	10	
LEAF_NODE	1951:3	1951:3	11	{
STATEMENTS	1952:4	1952:4	11	
SELECTION	1952:4	1953:4	12	
KEYWORD	1952:4	1952:4	13	if
LEAF_NODE	1952:4	1952:4	14	if
LEAF_NODE	1952:7	1952:7	13	(
CONDITION	1952:8	1952:8	13	sp -> actable_offset [ m ] == sp -> actable_offset [ n ]
EXPR	1952:8	1952:31	14	sp -> actable_offset [ m ] == sp -> actable_offset [ n ]
FIELD	1952:8	1952:28	15	sp -> actable_offset [ m ]
LEAF_NODE	1952:8	1952:8	16	sp
LEAF_NODE	1952:10	1952:10	16	->
LEAF_NODE	1952:12	1952:12	16	actable_offset
LEAF_NODE	1952:26	1952:26	16	[
EXPR	1952:27	1952:27	16	m
FIELD	1952:27	1952:27	17	m
LEAF_NODE	1952:27	1952:27	18	m
LEAF_NODE	1952:28	1952:28	16	]
EQ_OPERATOR	1952:29	1952:29	15	==
LEAF_NODE	1952:29	1952:29	16	==
FIELD	1952:31	1952:51	15	sp -> actable_offset [ n ]
LEAF_NODE	1952:31	1952:31	16	sp
LEAF_NODE	1952:33	1952:33	16	->
LEAF_NODE	1952:35	1952:35	16	actable_offset
LEAF_NODE	1952:49	1952:49	16	[
EXPR	1952:50	1952:50	16	n
FIELD	1952:50	1952:50	17	n
LEAF_NODE	1952:50	1952:50	18	n
LEAF_NODE	1952:51	1952:51	16	]
LEAF_NODE	1952:52	1952:52	13	)
STATEMENTS	1953:4	1956:4	13	
LEAF_NODE	1953:4	1953:4	14	{
STATEMENTS	1954:5	1955:5	14	
EXPR_STATEMENT	1954:5	1954:78	15	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegAcTables tag value" ) ;
EXPR	1954:5	1954:5	16	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegAcTables tag value" )
FUNCTION_CALL	1954:5	1954:77	17	TIFFErrorExt ( tif -> tif_clientdata , module , "Corrupt JpegAcTables tag value" )
CALLEE	1954:5	1954:5	18	TIFFErrorExt
LEAF_NODE	1954:5	1954:5	19	TIFFErrorExt
LEAF_NODE	1954:17	1954:17	18	(
ARGUMENT	1954:18	1954:18	18	tif -> tif_clientdata
FIELD	1954:18	1954:23	19	tif -> tif_clientdata
LEAF_NODE	1954:18	1954:18	20	tif
LEAF_NODE	1954:21	1954:21	20	->
LEAF_NODE	1954:23	1954:23	20	tif_clientdata
LEAF_NODE	1954:37	1954:37	18	,
ARGUMENT	1954:38	1954:38	18	module
FIELD	1954:38	1954:38	19	module
LEAF_NODE	1954:38	1954:38	20	module
LEAF_NODE	1954:44	1954:44	18	,
ARGUMENT	1954:45	1954:45	18	"Corrupt JpegAcTables tag value"
FIELD	1954:45	1954:45	19	"Corrupt JpegAcTables tag value"
LEAF_NODE	1954:45	1954:45	20	"Corrupt JpegAcTables tag value"
LEAF_NODE	1954:77	1954:77	18	)
LEAF_NODE	1954:78	1954:78	16	;
JUMP_STATEMENT	1955:5	1955:14	15	return ( 0 ) ;
KEYWORD	1955:5	1955:5	16	return
LEAF_NODE	1955:5	1955:5	17	return
DESTINATION	1955:11	1955:11	16	( 0 )
EXPR	1955:11	1955:13	17	( 0 )
LEAF_NODE	1955:11	1955:11	18	(
FIELD	1955:12	1955:12	18	0
LEAF_NODE	1955:12	1955:12	19	0
LEAF_NODE	1955:13	1955:13	18	)
LEAF_NODE	1955:14	1955:14	16	;
LEAF_NODE	1956:4	1956:4	14	}
LEAF_NODE	1957:3	1957:3	11	}
EXPR_STATEMENT	1958:3	1958:51	9	TIFFSeekFile ( tif , sp -> actable_offset [ m ] , SEEK_SET ) ;
EXPR	1958:3	1958:3	10	TIFFSeekFile ( tif , sp -> actable_offset [ m ] , SEEK_SET )
FUNCTION_CALL	1958:3	1958:50	11	TIFFSeekFile ( tif , sp -> actable_offset [ m ] , SEEK_SET )
CALLEE	1958:3	1958:3	12	TIFFSeekFile
LEAF_NODE	1958:3	1958:3	13	TIFFSeekFile
LEAF_NODE	1958:15	1958:15	12	(
ARGUMENT	1958:16	1958:16	12	tif
FIELD	1958:16	1958:16	13	tif
LEAF_NODE	1958:16	1958:16	14	tif
LEAF_NODE	1958:19	1958:19	12	,
ARGUMENT	1958:20	1958:20	12	sp -> actable_offset [ m ]
FIELD	1958:20	1958:40	13	sp -> actable_offset [ m ]
LEAF_NODE	1958:20	1958:20	14	sp
LEAF_NODE	1958:22	1958:22	14	->
LEAF_NODE	1958:24	1958:24	14	actable_offset
LEAF_NODE	1958:38	1958:38	14	[
EXPR	1958:39	1958:39	14	m
FIELD	1958:39	1958:39	15	m
LEAF_NODE	1958:39	1958:39	16	m
LEAF_NODE	1958:40	1958:40	14	]
LEAF_NODE	1958:41	1958:41	12	,
ARGUMENT	1958:42	1958:42	12	SEEK_SET
FIELD	1958:42	1958:42	13	SEEK_SET
LEAF_NODE	1958:42	1958:42	14	SEEK_SET
LEAF_NODE	1958:50	1958:50	12	)
LEAF_NODE	1958:51	1958:51	10	;
EXPR_STATEMENT	1959:3	1959:35	9	p = ( uint32 ) TIFFReadFile ( tif , o , 16 ) ;
EXPR	1959:3	1959:3	10	p = ( uint32 ) TIFFReadFile ( tif , o , 16 )
ASSIGN	1959:3	1959:5	11	p = ( uint32 ) TIFFReadFile ( tif , o , 16 )
LVAL	1959:3	1959:3	12	p
FIELD	1959:3	1959:3	13	p
LEAF_NODE	1959:3	1959:3	14	p
ASSIGN_OP	1959:4	1959:4	12	=
LEAF_NODE	1959:4	1959:4	13	=
RVAL	1959:5	1959:13	12	( uint32 ) TIFFReadFile ( tif , o , 16 )
LEAF_NODE	1959:5	1959:5	13	(
TYPE_NAME	1959:6	1959:6	13	uint32
LEAF_NODE	1959:6	1959:6	14	uint32
LEAF_NODE	1959:12	1959:12	13	)
FUNCTION_CALL	1959:13	1959:34	13	TIFFReadFile ( tif , o , 16 )
CALLEE	1959:13	1959:13	14	TIFFReadFile
LEAF_NODE	1959:13	1959:13	15	TIFFReadFile
LEAF_NODE	1959:25	1959:25	14	(
ARGUMENT	1959:26	1959:26	14	tif
FIELD	1959:26	1959:26	15	tif
LEAF_NODE	1959:26	1959:26	16	tif
LEAF_NODE	1959:29	1959:29	14	,
ARGUMENT	1959:30	1959:30	14	o
FIELD	1959:30	1959:30	15	o
LEAF_NODE	1959:30	1959:30	16	o
LEAF_NODE	1959:31	1959:31	14	,
ARGUMENT	1959:32	1959:32	14	16
FIELD	1959:32	1959:32	15	16
LEAF_NODE	1959:32	1959:32	16	16
LEAF_NODE	1959:34	1959:34	14	)
LEAF_NODE	1959:35	1959:35	10	;
SELECTION	1960:3	1961:4	9	
KEYWORD	1960:3	1960:3	10	if
LEAF_NODE	1960:3	1960:3	11	if
LEAF_NODE	1960:6	1960:6	10	(
CONDITION	1960:7	1960:7	10	p != 16
EXPR	1960:7	1960:10	11	p != 16
FIELD	1960:7	1960:7	12	p
LEAF_NODE	1960:7	1960:7	13	p
EQ_OPERATOR	1960:8	1960:8	12	!=
LEAF_NODE	1960:8	1960:8	13	!=
FIELD	1960:10	1960:10	12	16
LEAF_NODE	1960:10	1960:10	13	16
LEAF_NODE	1960:12	1960:12	10	)
STATEMENTS	1961:4	1961:4	10	
JUMP_STATEMENT	1961:4	1961:13	11	return ( 0 ) ;
KEYWORD	1961:4	1961:4	12	return
LEAF_NODE	1961:4	1961:4	13	return
DESTINATION	1961:10	1961:10	12	( 0 )
EXPR	1961:10	1961:12	13	( 0 )
LEAF_NODE	1961:10	1961:10	14	(
FIELD	1961:11	1961:11	14	0
LEAF_NODE	1961:11	1961:11	15	0
LEAF_NODE	1961:12	1961:12	14	)
LEAF_NODE	1961:13	1961:13	12	;
EXPR_STATEMENT	1962:3	1962:6	9	q = 0 ;
EXPR	1962:3	1962:3	10	q = 0
ASSIGN	1962:3	1962:5	11	q = 0
LVAL	1962:3	1962:3	12	q
FIELD	1962:3	1962:3	13	q
LEAF_NODE	1962:3	1962:3	14	q
ASSIGN_OP	1962:4	1962:4	12	=
LEAF_NODE	1962:4	1962:4	13	=
RVAL	1962:5	1962:5	12	0
FIELD	1962:5	1962:5	13	0
LEAF_NODE	1962:5	1962:5	14	0
LEAF_NODE	1962:6	1962:6	10	;
ITERATION	1963:3	1964:4	9	
KEYWORD	1963:3	1963:3	10	for
LEAF_NODE	1963:3	1963:3	11	for
LEAF_NODE	1963:7	1963:7	10	(
FOR_INIT	1963:8	1963:11	10	n = 0 ;
EXPR	1963:8	1963:8	11	n = 0
ASSIGN	1963:8	1963:10	12	n = 0
LVAL	1963:8	1963:8	13	n
FIELD	1963:8	1963:8	14	n
LEAF_NODE	1963:8	1963:8	15	n
ASSIGN_OP	1963:9	1963:9	13	=
LEAF_NODE	1963:9	1963:9	14	=
RVAL	1963:10	1963:10	13	0
FIELD	1963:10	1963:10	14	0
LEAF_NODE	1963:10	1963:10	15	0
LEAF_NODE	1963:11	1963:11	11	;
CONDITION	1963:13	1963:13	10	n < 16
EXPR	1963:13	1963:15	11	n < 16
FIELD	1963:13	1963:13	12	n
LEAF_NODE	1963:13	1963:13	13	n
REL_OPERATOR	1963:14	1963:14	12	<
LEAF_NODE	1963:14	1963:14	13	<
FIELD	1963:15	1963:15	12	16
LEAF_NODE	1963:15	1963:15	13	16
LEAF_NODE	1963:17	1963:17	10	;
FOR_EXPR	1963:19	1963:19	10	n ++
EXPR	1963:19	1963:19	11	n ++
FIELD	1963:19	1963:20	12	n ++
LEAF_NODE	1963:19	1963:19	13	n
LEAF_NODE	1963:20	1963:20	13	++
LEAF_NODE	1963:22	1963:22	10	)
STATEMENTS	1964:4	1964:4	10	
EXPR_STATEMENT	1964:4	1964:11	11	q += o [ n ] ;
EXPR	1964:4	1964:4	12	q += o [ n ]
ASSIGN	1964:4	1964:7	13	q += o [ n ]
LVAL	1964:4	1964:4	14	q
FIELD	1964:4	1964:4	15	q
LEAF_NODE	1964:4	1964:4	16	q
ASSIGN_OP	1964:5	1964:5	14	+=
LEAF_NODE	1964:5	1964:5	15	+=
RVAL	1964:7	1964:7	14	o [ n ]
FIELD	1964:7	1964:10	15	o [ n ]
LEAF_NODE	1964:7	1964:7	16	o
LEAF_NODE	1964:8	1964:8	16	[
EXPR	1964:9	1964:9	16	n
FIELD	1964:9	1964:9	17	n
LEAF_NODE	1964:9	1964:9	18	n
LEAF_NODE	1964:10	1964:10	16	]
LEAF_NODE	1964:11	1964:11	12	;
EXPR_STATEMENT	1965:3	1965:25	9	ra = sizeof ( uint32 ) + 21 + q ;
EXPR	1965:3	1965:3	10	ra = sizeof ( uint32 ) + 21 + q
ASSIGN	1965:3	1965:6	11	ra = sizeof ( uint32 ) + 21 + q
LVAL	1965:3	1965:3	12	ra
FIELD	1965:3	1965:3	13	ra
LEAF_NODE	1965:3	1965:3	14	ra
ASSIGN_OP	1965:5	1965:5	12	=
LEAF_NODE	1965:5	1965:5	13	=
RVAL	1965:6	1965:24	12	sizeof ( uint32 ) + 21 + q
FUNCTION_CALL	1965:6	1965:19	13	sizeof ( uint32 )
CALLEE	1965:6	1965:6	14	sizeof
LEAF_NODE	1965:6	1965:6	15	sizeof
LEAF_NODE	1965:12	1965:12	14	(
ARGUMENT	1965:13	1965:13	14	uint32
FIELD	1965:13	1965:13	15	uint32
LEAF_NODE	1965:13	1965:13	16	uint32
LEAF_NODE	1965:19	1965:19	14	)
LEAF_NODE	1965:20	1965:20	13	+
FIELD	1965:21	1965:21	13	21
LEAF_NODE	1965:21	1965:21	14	21
LEAF_NODE	1965:23	1965:23	13	+
FIELD	1965:24	1965:24	13	q
LEAF_NODE	1965:24	1965:24	14	q
LEAF_NODE	1965:25	1965:25	10	;
EXPR_STATEMENT	1966:3	1966:21	9	rb = _TIFFmalloc ( ra ) ;
EXPR	1966:3	1966:3	10	rb = _TIFFmalloc ( ra )
ASSIGN	1966:3	1966:6	11	rb = _TIFFmalloc ( ra )
LVAL	1966:3	1966:3	12	rb
FIELD	1966:3	1966:3	13	rb
LEAF_NODE	1966:3	1966:3	14	rb
ASSIGN_OP	1966:5	1966:5	12	=
LEAF_NODE	1966:5	1966:5	13	=
RVAL	1966:6	1966:6	12	_TIFFmalloc ( ra )
FUNCTION_CALL	1966:6	1966:20	13	_TIFFmalloc ( ra )
CALLEE	1966:6	1966:6	14	_TIFFmalloc
LEAF_NODE	1966:6	1966:6	15	_TIFFmalloc
LEAF_NODE	1966:17	1966:17	14	(
ARGUMENT	1966:18	1966:18	14	ra
FIELD	1966:18	1966:18	15	ra
LEAF_NODE	1966:18	1966:18	16	ra
LEAF_NODE	1966:20	1966:20	14	)
LEAF_NODE	1966:21	1966:21	10	;
SELECTION	1967:3	1968:3	9	
KEYWORD	1967:3	1967:3	10	if
LEAF_NODE	1967:3	1967:3	11	if
LEAF_NODE	1967:6	1967:6	10	(
CONDITION	1967:7	1967:7	10	rb == 0
EXPR	1967:7	1967:11	11	rb == 0
FIELD	1967:7	1967:7	12	rb
LEAF_NODE	1967:7	1967:7	13	rb
EQ_OPERATOR	1967:9	1967:9	12	==
LEAF_NODE	1967:9	1967:9	13	==
FIELD	1967:11	1967:11	12	0
LEAF_NODE	1967:11	1967:11	13	0
LEAF_NODE	1967:12	1967:12	10	)
STATEMENTS	1968:3	1971:3	10	
LEAF_NODE	1968:3	1968:3	11	{
STATEMENTS	1969:4	1970:4	11	
EXPR_STATEMENT	1969:4	1969:60	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" ) ;
EXPR	1969:4	1969:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
FUNCTION_CALL	1969:4	1969:59	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory" )
CALLEE	1969:4	1969:4	15	TIFFErrorExt
LEAF_NODE	1969:4	1969:4	16	TIFFErrorExt
LEAF_NODE	1969:16	1969:16	15	(
ARGUMENT	1969:17	1969:17	15	tif -> tif_clientdata
FIELD	1969:17	1969:22	16	tif -> tif_clientdata
LEAF_NODE	1969:17	1969:17	17	tif
LEAF_NODE	1969:20	1969:20	17	->
LEAF_NODE	1969:22	1969:22	17	tif_clientdata
LEAF_NODE	1969:36	1969:36	15	,
ARGUMENT	1969:37	1969:37	15	module
FIELD	1969:37	1969:37	16	module
LEAF_NODE	1969:37	1969:37	17	module
LEAF_NODE	1969:43	1969:43	15	,
ARGUMENT	1969:44	1969:44	15	"Out of memory"
FIELD	1969:44	1969:44	16	"Out of memory"
LEAF_NODE	1969:44	1969:44	17	"Out of memory"
LEAF_NODE	1969:59	1969:59	15	)
LEAF_NODE	1969:60	1969:60	13	;
JUMP_STATEMENT	1970:4	1970:13	12	return ( 0 ) ;
KEYWORD	1970:4	1970:4	13	return
LEAF_NODE	1970:4	1970:4	14	return
DESTINATION	1970:10	1970:10	13	( 0 )
EXPR	1970:10	1970:12	14	( 0 )
LEAF_NODE	1970:10	1970:10	15	(
FIELD	1970:11	1970:11	15	0
LEAF_NODE	1970:11	1970:11	16	0
LEAF_NODE	1970:12	1970:12	15	)
LEAF_NODE	1970:13	1970:13	13	;
LEAF_NODE	1971:3	1971:3	11	}
LEAF_NODE	1972:3	1972:3	9	*
EXPR_STATEMENT	1972:4	1972:18	9	( uint32 * ) rb = ra ;
EXPR	1972:4	1972:4	10	( uint32 * ) rb = ra
ASSIGN	1972:4	1972:16	11	( uint32 * ) rb = ra
LVAL	1972:4	1972:13	12	( uint32 * ) rb
LEAF_NODE	1972:4	1972:4	13	(
TYPE_NAME	1972:5	1972:5	13	uint32
LEAF_NODE	1972:5	1972:5	14	uint32
LEAF_NODE	1972:11	1972:11	13	*
LEAF_NODE	1972:12	1972:12	13	)
FIELD	1972:13	1972:13	13	rb
LEAF_NODE	1972:13	1972:13	14	rb
ASSIGN_OP	1972:15	1972:15	12	=
LEAF_NODE	1972:15	1972:15	13	=
RVAL	1972:16	1972:16	12	ra
FIELD	1972:16	1972:16	13	ra
LEAF_NODE	1972:16	1972:16	14	ra
LEAF_NODE	1972:18	1972:18	10	;
EXPR_STATEMENT	1973:3	1973:25	9	rb [ sizeof ( uint32 ) ] = 255 ;
EXPR	1973:3	1973:3	10	rb [ sizeof ( uint32 ) ] = 255
ASSIGN	1973:3	1973:22	11	rb [ sizeof ( uint32 ) ] = 255
LVAL	1973:3	1973:3	12	rb [ sizeof ( uint32 ) ]
FIELD	1973:3	1973:20	13	rb [ sizeof ( uint32 ) ]
LEAF_NODE	1973:3	1973:3	14	rb
LEAF_NODE	1973:5	1973:5	14	[
EXPR	1973:6	1973:6	14	sizeof ( uint32 )
FUNCTION_CALL	1973:6	1973:19	15	sizeof ( uint32 )
CALLEE	1973:6	1973:6	16	sizeof
LEAF_NODE	1973:6	1973:6	17	sizeof
LEAF_NODE	1973:12	1973:12	16	(
ARGUMENT	1973:13	1973:13	16	uint32
FIELD	1973:13	1973:13	17	uint32
LEAF_NODE	1973:13	1973:13	18	uint32
LEAF_NODE	1973:19	1973:19	16	)
LEAF_NODE	1973:20	1973:20	14	]
ASSIGN_OP	1973:21	1973:21	12	=
LEAF_NODE	1973:21	1973:21	13	=
RVAL	1973:22	1973:22	12	255
FIELD	1973:22	1973:22	13	255
LEAF_NODE	1973:22	1973:22	14	255
LEAF_NODE	1973:25	1973:25	10	;
EXPR_STATEMENT	1974:3	1974:39	9	rb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT ;
EXPR	1974:3	1974:3	10	rb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT
ASSIGN	1974:3	1974:24	11	rb [ sizeof ( uint32 ) + 1 ] = JPEG_MARKER_DHT
LVAL	1974:3	1974:3	12	rb [ sizeof ( uint32 ) + 1 ]
FIELD	1974:3	1974:22	13	rb [ sizeof ( uint32 ) + 1 ]
LEAF_NODE	1974:3	1974:3	14	rb
LEAF_NODE	1974:5	1974:5	14	[
EXPR	1974:6	1974:21	14	sizeof ( uint32 ) + 1
FUNCTION_CALL	1974:6	1974:19	15	sizeof ( uint32 )
CALLEE	1974:6	1974:6	16	sizeof
LEAF_NODE	1974:6	1974:6	17	sizeof
LEAF_NODE	1974:12	1974:12	16	(
ARGUMENT	1974:13	1974:13	16	uint32
FIELD	1974:13	1974:13	17	uint32
LEAF_NODE	1974:13	1974:13	18	uint32
LEAF_NODE	1974:19	1974:19	16	)
LEAF_NODE	1974:20	1974:20	15	+
FIELD	1974:21	1974:21	15	1
LEAF_NODE	1974:21	1974:21	16	1
LEAF_NODE	1974:22	1974:22	14	]
ASSIGN_OP	1974:23	1974:23	12	=
LEAF_NODE	1974:23	1974:23	13	=
RVAL	1974:24	1974:24	12	JPEG_MARKER_DHT
FIELD	1974:24	1974:24	13	JPEG_MARKER_DHT
LEAF_NODE	1974:24	1974:24	14	JPEG_MARKER_DHT
LEAF_NODE	1974:39	1974:39	10	;
EXPR_STATEMENT	1975:3	1975:42	9	rb [ sizeof ( uint32 ) + 2 ] = ( uint8 ) ( ( 19 + q ) >> 8 ) ;
EXPR	1975:3	1975:3	10	rb [ sizeof ( uint32 ) + 2 ] = ( uint8 ) ( ( 19 + q ) >> 8 )
ASSIGN	1975:3	1975:24	11	rb [ sizeof ( uint32 ) + 2 ] = ( uint8 ) ( ( 19 + q ) >> 8 )
LVAL	1975:3	1975:3	12	rb [ sizeof ( uint32 ) + 2 ]
FIELD	1975:3	1975:22	13	rb [ sizeof ( uint32 ) + 2 ]
LEAF_NODE	1975:3	1975:3	14	rb
LEAF_NODE	1975:5	1975:5	14	[
EXPR	1975:6	1975:21	14	sizeof ( uint32 ) + 2
FUNCTION_CALL	1975:6	1975:19	15	sizeof ( uint32 )
CALLEE	1975:6	1975:6	16	sizeof
LEAF_NODE	1975:6	1975:6	17	sizeof
LEAF_NODE	1975:12	1975:12	16	(
ARGUMENT	1975:13	1975:13	16	uint32
FIELD	1975:13	1975:13	17	uint32
LEAF_NODE	1975:13	1975:13	18	uint32
LEAF_NODE	1975:19	1975:19	16	)
LEAF_NODE	1975:20	1975:20	15	+
FIELD	1975:21	1975:21	15	2
LEAF_NODE	1975:21	1975:21	16	2
LEAF_NODE	1975:22	1975:22	14	]
ASSIGN_OP	1975:23	1975:23	12	=
LEAF_NODE	1975:23	1975:23	13	=
RVAL	1975:24	1975:41	12	( uint8 ) ( ( 19 + q ) >> 8 )
LEAF_NODE	1975:24	1975:24	13	(
TYPE_NAME	1975:25	1975:25	13	uint8
LEAF_NODE	1975:25	1975:25	14	uint8
LEAF_NODE	1975:30	1975:30	13	)
LEAF_NODE	1975:31	1975:31	13	(
LEAF_NODE	1975:32	1975:32	13	(
FIELD	1975:33	1975:33	13	19
LEAF_NODE	1975:33	1975:33	14	19
LEAF_NODE	1975:35	1975:35	13	+
FIELD	1975:36	1975:36	13	q
LEAF_NODE	1975:36	1975:36	14	q
LEAF_NODE	1975:37	1975:37	13	)
LEAF_NODE	1975:38	1975:38	13	>>
FIELD	1975:40	1975:40	13	8
LEAF_NODE	1975:40	1975:40	14	8
LEAF_NODE	1975:41	1975:41	13	)
LEAF_NODE	1975:42	1975:42	10	;
EXPR_STATEMENT	1976:3	1976:36	9	rb [ sizeof ( uint32 ) + 3 ] = ( ( 19 + q ) & 255 ) ;
EXPR	1976:3	1976:3	10	rb [ sizeof ( uint32 ) + 3 ] = ( ( 19 + q ) & 255 )
ASSIGN	1976:3	1976:24	11	rb [ sizeof ( uint32 ) + 3 ] = ( ( 19 + q ) & 255 )
LVAL	1976:3	1976:3	12	rb [ sizeof ( uint32 ) + 3 ]
FIELD	1976:3	1976:22	13	rb [ sizeof ( uint32 ) + 3 ]
LEAF_NODE	1976:3	1976:3	14	rb
LEAF_NODE	1976:5	1976:5	14	[
EXPR	1976:6	1976:21	14	sizeof ( uint32 ) + 3
FUNCTION_CALL	1976:6	1976:19	15	sizeof ( uint32 )
CALLEE	1976:6	1976:6	16	sizeof
LEAF_NODE	1976:6	1976:6	17	sizeof
LEAF_NODE	1976:12	1976:12	16	(
ARGUMENT	1976:13	1976:13	16	uint32
FIELD	1976:13	1976:13	17	uint32
LEAF_NODE	1976:13	1976:13	18	uint32
LEAF_NODE	1976:19	1976:19	16	)
LEAF_NODE	1976:20	1976:20	15	+
FIELD	1976:21	1976:21	15	3
LEAF_NODE	1976:21	1976:21	16	3
LEAF_NODE	1976:22	1976:22	14	]
ASSIGN_OP	1976:23	1976:23	12	=
LEAF_NODE	1976:23	1976:23	13	=
RVAL	1976:24	1976:35	12	( ( 19 + q ) & 255 )
LEAF_NODE	1976:24	1976:24	13	(
LEAF_NODE	1976:25	1976:25	13	(
FIELD	1976:26	1976:26	13	19
LEAF_NODE	1976:26	1976:26	14	19
LEAF_NODE	1976:28	1976:28	13	+
FIELD	1976:29	1976:29	13	q
LEAF_NODE	1976:29	1976:29	14	q
LEAF_NODE	1976:30	1976:30	13	)
LEAF_NODE	1976:31	1976:31	13	&
FIELD	1976:32	1976:32	13	255
LEAF_NODE	1976:32	1976:32	14	255
LEAF_NODE	1976:35	1976:35	13	)
LEAF_NODE	1976:36	1976:36	10	;
EXPR_STATEMENT	1977:3	1977:30	9	rb [ sizeof ( uint32 ) + 4 ] = ( 16 | m ) ;
EXPR	1977:3	1977:3	10	rb [ sizeof ( uint32 ) + 4 ] = ( 16 | m )
ASSIGN	1977:3	1977:24	11	rb [ sizeof ( uint32 ) + 4 ] = ( 16 | m )
LVAL	1977:3	1977:3	12	rb [ sizeof ( uint32 ) + 4 ]
FIELD	1977:3	1977:22	13	rb [ sizeof ( uint32 ) + 4 ]
LEAF_NODE	1977:3	1977:3	14	rb
LEAF_NODE	1977:5	1977:5	14	[
EXPR	1977:6	1977:21	14	sizeof ( uint32 ) + 4
FUNCTION_CALL	1977:6	1977:19	15	sizeof ( uint32 )
CALLEE	1977:6	1977:6	16	sizeof
LEAF_NODE	1977:6	1977:6	17	sizeof
LEAF_NODE	1977:12	1977:12	16	(
ARGUMENT	1977:13	1977:13	16	uint32
FIELD	1977:13	1977:13	17	uint32
LEAF_NODE	1977:13	1977:13	18	uint32
LEAF_NODE	1977:19	1977:19	16	)
LEAF_NODE	1977:20	1977:20	15	+
FIELD	1977:21	1977:21	15	4
LEAF_NODE	1977:21	1977:21	16	4
LEAF_NODE	1977:22	1977:22	14	]
ASSIGN_OP	1977:23	1977:23	12	=
LEAF_NODE	1977:23	1977:23	13	=
RVAL	1977:24	1977:29	12	( 16 | m )
LEAF_NODE	1977:24	1977:24	13	(
BIT_OR	1977:25	1977:28	13	16 | m
BIT_OR_ELEM	1977:25	1977:25	14	16
FIELD	1977:25	1977:25	15	16
LEAF_NODE	1977:25	1977:25	16	16
LEAF_NODE	1977:27	1977:27	14	|
BIT_OR_ELEM	1977:28	1977:28	14	m
FIELD	1977:28	1977:28	15	m
LEAF_NODE	1977:28	1977:28	16	m
LEAF_NODE	1977:29	1977:29	13	)
LEAF_NODE	1977:30	1977:30	10	;
ITERATION	1978:3	1979:4	9	
KEYWORD	1978:3	1978:3	10	for
LEAF_NODE	1978:3	1978:3	11	for
LEAF_NODE	1978:7	1978:7	10	(
FOR_INIT	1978:8	1978:11	10	n = 0 ;
EXPR	1978:8	1978:8	11	n = 0
ASSIGN	1978:8	1978:10	12	n = 0
LVAL	1978:8	1978:8	13	n
FIELD	1978:8	1978:8	14	n
LEAF_NODE	1978:8	1978:8	15	n
ASSIGN_OP	1978:9	1978:9	13	=
LEAF_NODE	1978:9	1978:9	14	=
RVAL	1978:10	1978:10	13	0
FIELD	1978:10	1978:10	14	0
LEAF_NODE	1978:10	1978:10	15	0
LEAF_NODE	1978:11	1978:11	11	;
CONDITION	1978:13	1978:13	10	n < 16
EXPR	1978:13	1978:15	11	n < 16
FIELD	1978:13	1978:13	12	n
LEAF_NODE	1978:13	1978:13	13	n
REL_OPERATOR	1978:14	1978:14	12	<
LEAF_NODE	1978:14	1978:14	13	<
FIELD	1978:15	1978:15	12	16
LEAF_NODE	1978:15	1978:15	13	16
LEAF_NODE	1978:17	1978:17	10	;
FOR_EXPR	1978:19	1978:19	10	n ++
EXPR	1978:19	1978:19	11	n ++
FIELD	1978:19	1978:20	12	n ++
LEAF_NODE	1978:19	1978:19	13	n
LEAF_NODE	1978:20	1978:20	13	++
LEAF_NODE	1978:22	1978:22	10	)
STATEMENTS	1979:4	1979:4	10	
EXPR_STATEMENT	1979:4	1979:31	11	rb [ sizeof ( uint32 ) + 5 + n ] = o [ n ] ;
EXPR	1979:4	1979:4	12	rb [ sizeof ( uint32 ) + 5 + n ] = o [ n ]
ASSIGN	1979:4	1979:27	13	rb [ sizeof ( uint32 ) + 5 + n ] = o [ n ]
LVAL	1979:4	1979:4	14	rb [ sizeof ( uint32 ) + 5 + n ]
FIELD	1979:4	1979:25	15	rb [ sizeof ( uint32 ) + 5 + n ]
LEAF_NODE	1979:4	1979:4	16	rb
LEAF_NODE	1979:6	1979:6	16	[
EXPR	1979:7	1979:24	16	sizeof ( uint32 ) + 5 + n
FUNCTION_CALL	1979:7	1979:20	17	sizeof ( uint32 )
CALLEE	1979:7	1979:7	18	sizeof
LEAF_NODE	1979:7	1979:7	19	sizeof
LEAF_NODE	1979:13	1979:13	18	(
ARGUMENT	1979:14	1979:14	18	uint32
FIELD	1979:14	1979:14	19	uint32
LEAF_NODE	1979:14	1979:14	20	uint32
LEAF_NODE	1979:20	1979:20	18	)
LEAF_NODE	1979:21	1979:21	17	+
FIELD	1979:22	1979:22	17	5
LEAF_NODE	1979:22	1979:22	18	5
LEAF_NODE	1979:23	1979:23	17	+
FIELD	1979:24	1979:24	17	n
LEAF_NODE	1979:24	1979:24	18	n
LEAF_NODE	1979:25	1979:25	16	]
ASSIGN_OP	1979:26	1979:26	14	=
LEAF_NODE	1979:26	1979:26	15	=
RVAL	1979:27	1979:27	14	o [ n ]
FIELD	1979:27	1979:30	15	o [ n ]
LEAF_NODE	1979:27	1979:27	16	o
LEAF_NODE	1979:28	1979:28	16	[
EXPR	1979:29	1979:29	16	n
FIELD	1979:29	1979:29	17	n
LEAF_NODE	1979:29	1979:29	18	n
LEAF_NODE	1979:30	1979:30	16	]
LEAF_NODE	1979:31	1979:31	12	;
EXPR_STATEMENT	1980:3	1980:57	9	p = ( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q ) ;
EXPR	1980:3	1980:3	10	p = ( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
ASSIGN	1980:3	1980:5	11	p = ( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
LVAL	1980:3	1980:3	12	p
FIELD	1980:3	1980:3	13	p
LEAF_NODE	1980:3	1980:3	14	p
ASSIGN_OP	1980:4	1980:4	12	=
LEAF_NODE	1980:4	1980:4	13	=
RVAL	1980:5	1980:13	12	( uint32 ) TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
LEAF_NODE	1980:5	1980:5	13	(
TYPE_NAME	1980:6	1980:6	13	uint32
LEAF_NODE	1980:6	1980:6	14	uint32
LEAF_NODE	1980:12	1980:12	13	)
FUNCTION_CALL	1980:13	1980:56	13	TIFFReadFile ( tif , & ( rb [ sizeof ( uint32 ) + 21 ] ) , q )
CALLEE	1980:13	1980:13	14	TIFFReadFile
LEAF_NODE	1980:13	1980:13	15	TIFFReadFile
LEAF_NODE	1980:25	1980:25	14	(
ARGUMENT	1980:26	1980:26	14	tif
FIELD	1980:26	1980:26	15	tif
LEAF_NODE	1980:26	1980:26	16	tif
LEAF_NODE	1980:29	1980:29	14	,
ARGUMENT	1980:30	1980:30	14	& ( rb [ sizeof ( uint32 ) + 21 ] )
UNARY_EXPR	1980:30	1980:53	15	& ( rb [ sizeof ( uint32 ) + 21 ] )
UNARY_OPERATOR	1980:30	1980:30	16	&
LEAF_NODE	1980:30	1980:30	17	&
LEAF_NODE	1980:31	1980:31	16	(
FIELD	1980:32	1980:52	16	rb [ sizeof ( uint32 ) + 21 ]
LEAF_NODE	1980:32	1980:32	17	rb
LEAF_NODE	1980:34	1980:34	17	[
EXPR	1980:35	1980:50	17	sizeof ( uint32 ) + 21
FUNCTION_CALL	1980:35	1980:48	18	sizeof ( uint32 )
CALLEE	1980:35	1980:35	19	sizeof
LEAF_NODE	1980:35	1980:35	20	sizeof
LEAF_NODE	1980:41	1980:41	19	(
ARGUMENT	1980:42	1980:42	19	uint32
FIELD	1980:42	1980:42	20	uint32
LEAF_NODE	1980:42	1980:42	21	uint32
LEAF_NODE	1980:48	1980:48	19	)
LEAF_NODE	1980:49	1980:49	18	+
FIELD	1980:50	1980:50	18	21
LEAF_NODE	1980:50	1980:50	19	21
LEAF_NODE	1980:52	1980:52	17	]
LEAF_NODE	1980:53	1980:53	16	)
LEAF_NODE	1980:54	1980:54	14	,
ARGUMENT	1980:55	1980:55	14	q
FIELD	1980:55	1980:55	15	q
LEAF_NODE	1980:55	1980:55	16	q
LEAF_NODE	1980:56	1980:56	14	)
LEAF_NODE	1980:57	1980:57	10	;
SELECTION	1981:3	1982:24	9	
KEYWORD	1981:3	1981:3	10	if
LEAF_NODE	1981:3	1981:3	11	if
LEAF_NODE	1981:6	1981:6	10	(
CONDITION	1981:7	1981:7	10	p != q
EXPR	1981:7	1981:10	11	p != q
FIELD	1981:7	1981:7	12	p
LEAF_NODE	1981:7	1981:7	13	p
EQ_OPERATOR	1981:8	1981:8	12	!=
LEAF_NODE	1981:8	1981:8	13	!=
FIELD	1981:10	1981:10	12	q
LEAF_NODE	1981:10	1981:10	13	q
LEAF_NODE	1981:11	1981:11	10	)
STATEMENTS	1982:24	1985:24	10	
LEAF_NODE	1982:24	1982:24	11	{
STATEMENTS	1983:32	1984:4	11	
EXPR_STATEMENT	1983:32	1983:45	12	_TIFFfree ( rb ) ;
EXPR	1983:32	1983:32	13	_TIFFfree ( rb )
FUNCTION_CALL	1983:32	1983:44	14	_TIFFfree ( rb )
CALLEE	1983:32	1983:32	15	_TIFFfree
LEAF_NODE	1983:32	1983:32	16	_TIFFfree
LEAF_NODE	1983:41	1983:41	15	(
ARGUMENT	1983:42	1983:42	15	rb
FIELD	1983:42	1983:42	16	rb
LEAF_NODE	1983:42	1983:42	17	rb
LEAF_NODE	1983:44	1983:44	15	)
LEAF_NODE	1983:45	1983:45	13	;
JUMP_STATEMENT	1984:4	1984:13	12	return ( 0 ) ;
KEYWORD	1984:4	1984:4	13	return
LEAF_NODE	1984:4	1984:4	14	return
DESTINATION	1984:10	1984:10	13	( 0 )
EXPR	1984:10	1984:12	14	( 0 )
LEAF_NODE	1984:10	1984:10	15	(
FIELD	1984:11	1984:11	15	0
LEAF_NODE	1984:11	1984:11	16	0
LEAF_NODE	1984:12	1984:12	15	)
LEAF_NODE	1984:13	1984:13	13	;
LEAF_NODE	1985:24	1985:24	11	}
SELECTION	1986:3	1987:4	9	
KEYWORD	1986:3	1986:3	10	if
LEAF_NODE	1986:3	1986:3	11	if
LEAF_NODE	1986:6	1986:6	10	(
CONDITION	1986:7	1986:7	10	sp -> actable [ m ] != 0
EXPR	1986:7	1986:23	11	sp -> actable [ m ] != 0
FIELD	1986:7	1986:20	12	sp -> actable [ m ]
LEAF_NODE	1986:7	1986:7	13	sp
LEAF_NODE	1986:9	1986:9	13	->
LEAF_NODE	1986:11	1986:11	13	actable
LEAF_NODE	1986:18	1986:18	13	[
EXPR	1986:19	1986:19	13	m
FIELD	1986:19	1986:19	14	m
LEAF_NODE	1986:19	1986:19	15	m
LEAF_NODE	1986:20	1986:20	13	]
EQ_OPERATOR	1986:21	1986:21	12	!=
LEAF_NODE	1986:21	1986:21	13	!=
FIELD	1986:23	1986:23	12	0
LEAF_NODE	1986:23	1986:23	13	0
LEAF_NODE	1986:24	1986:24	10	)
STATEMENTS	1987:4	1987:4	10	
EXPR_STATEMENT	1987:4	1987:29	11	_TIFFfree ( sp -> actable [ m ] ) ;
EXPR	1987:4	1987:4	12	_TIFFfree ( sp -> actable [ m ] )
FUNCTION_CALL	1987:4	1987:28	13	_TIFFfree ( sp -> actable [ m ] )
CALLEE	1987:4	1987:4	14	_TIFFfree
LEAF_NODE	1987:4	1987:4	15	_TIFFfree
LEAF_NODE	1987:13	1987:13	14	(
ARGUMENT	1987:14	1987:14	14	sp -> actable [ m ]
FIELD	1987:14	1987:27	15	sp -> actable [ m ]
LEAF_NODE	1987:14	1987:14	16	sp
LEAF_NODE	1987:16	1987:16	16	->
LEAF_NODE	1987:18	1987:18	16	actable
LEAF_NODE	1987:25	1987:25	16	[
EXPR	1987:26	1987:26	16	m
FIELD	1987:26	1987:26	17	m
LEAF_NODE	1987:26	1987:26	18	m
LEAF_NODE	1987:27	1987:27	16	]
LEAF_NODE	1987:28	1987:28	14	)
LEAF_NODE	1987:29	1987:29	12	;
EXPR_STATEMENT	1988:3	1988:20	9	sp -> actable [ m ] = rb ;
EXPR	1988:3	1988:3	10	sp -> actable [ m ] = rb
ASSIGN	1988:3	1988:18	11	sp -> actable [ m ] = rb
LVAL	1988:3	1988:3	12	sp -> actable [ m ]
FIELD	1988:3	1988:16	13	sp -> actable [ m ]
LEAF_NODE	1988:3	1988:3	14	sp
LEAF_NODE	1988:5	1988:5	14	->
LEAF_NODE	1988:7	1988:7	14	actable
LEAF_NODE	1988:14	1988:14	14	[
EXPR	1988:15	1988:15	14	m
FIELD	1988:15	1988:15	15	m
LEAF_NODE	1988:15	1988:15	16	m
LEAF_NODE	1988:16	1988:16	14	]
ASSIGN_OP	1988:17	1988:17	12	=
LEAF_NODE	1988:17	1988:17	13	=
RVAL	1988:18	1988:18	12	rb
FIELD	1988:18	1988:18	13	rb
LEAF_NODE	1988:18	1988:18	14	rb
LEAF_NODE	1988:20	1988:20	10	;
EXPR_STATEMENT	1989:3	1989:36	9	sp -> sos_tda [ m ] = ( sp -> sos_tda [ m ] | m ) ;
EXPR	1989:3	1989:3	10	sp -> sos_tda [ m ] = ( sp -> sos_tda [ m ] | m )
ASSIGN	1989:3	1989:18	11	sp -> sos_tda [ m ] = ( sp -> sos_tda [ m ] | m )
LVAL	1989:3	1989:3	12	sp -> sos_tda [ m ]
FIELD	1989:3	1989:16	13	sp -> sos_tda [ m ]
LEAF_NODE	1989:3	1989:3	14	sp
LEAF_NODE	1989:5	1989:5	14	->
LEAF_NODE	1989:7	1989:7	14	sos_tda
LEAF_NODE	1989:14	1989:14	14	[
EXPR	1989:15	1989:15	14	m
FIELD	1989:15	1989:15	15	m
LEAF_NODE	1989:15	1989:15	16	m
LEAF_NODE	1989:16	1989:16	14	]
ASSIGN_OP	1989:17	1989:17	12	=
LEAF_NODE	1989:17	1989:17	13	=
RVAL	1989:18	1989:35	12	( sp -> sos_tda [ m ] | m )
LEAF_NODE	1989:18	1989:18	13	(
BIT_OR	1989:19	1989:34	13	sp -> sos_tda [ m ] | m
BIT_OR_ELEM	1989:19	1989:19	14	sp -> sos_tda [ m ]
FIELD	1989:19	1989:32	15	sp -> sos_tda [ m ]
LEAF_NODE	1989:19	1989:19	16	sp
LEAF_NODE	1989:21	1989:21	16	->
LEAF_NODE	1989:23	1989:23	16	sos_tda
LEAF_NODE	1989:30	1989:30	16	[
EXPR	1989:31	1989:31	16	m
FIELD	1989:31	1989:31	17	m
LEAF_NODE	1989:31	1989:31	18	m
LEAF_NODE	1989:32	1989:32	16	]
LEAF_NODE	1989:33	1989:33	14	|
BIT_OR_ELEM	1989:34	1989:34	14	m
FIELD	1989:34	1989:34	15	m
LEAF_NODE	1989:34	1989:34	16	m
LEAF_NODE	1989:35	1989:35	13	)
LEAF_NODE	1989:36	1989:36	10	;
LEAF_NODE	1990:2	1990:2	8	}
SELECTION	1991:2	1992:3	6	
KEYWORD	1991:2	1991:2	7	else
LEAF_NODE	1991:2	1991:2	8	else
STATEMENTS	1992:3	1992:3	7	
EXPR_STATEMENT	1992:3	1992:56	8	sp -> sos_tda [ m ] = ( sp -> sos_tda [ m ] | ( sp -> sos_tda [ m - 1 ] & 15 ) ) ;
EXPR	1992:3	1992:3	9	sp -> sos_tda [ m ] = ( sp -> sos_tda [ m ] | ( sp -> sos_tda [ m - 1 ] & 15 ) )
ASSIGN	1992:3	1992:18	10	sp -> sos_tda [ m ] = ( sp -> sos_tda [ m ] | ( sp -> sos_tda [ m - 1 ] & 15 ) )
LVAL	1992:3	1992:3	11	sp -> sos_tda [ m ]
FIELD	1992:3	1992:16	12	sp -> sos_tda [ m ]
LEAF_NODE	1992:3	1992:3	13	sp
LEAF_NODE	1992:5	1992:5	13	->
LEAF_NODE	1992:7	1992:7	13	sos_tda
LEAF_NODE	1992:14	1992:14	13	[
EXPR	1992:15	1992:15	13	m
FIELD	1992:15	1992:15	14	m
LEAF_NODE	1992:15	1992:15	15	m
LEAF_NODE	1992:16	1992:16	13	]
ASSIGN_OP	1992:17	1992:17	11	=
LEAF_NODE	1992:17	1992:17	12	=
RVAL	1992:18	1992:55	11	( sp -> sos_tda [ m ] | ( sp -> sos_tda [ m - 1 ] & 15 ) )
LEAF_NODE	1992:18	1992:18	12	(
BIT_OR	1992:19	1992:34	12	sp -> sos_tda [ m ] | ( sp -> sos_tda [ m - 1 ] & 15 )
BIT_OR_ELEM	1992:19	1992:19	13	sp -> sos_tda [ m ]
FIELD	1992:19	1992:32	14	sp -> sos_tda [ m ]
LEAF_NODE	1992:19	1992:19	15	sp
LEAF_NODE	1992:21	1992:21	15	->
LEAF_NODE	1992:23	1992:23	15	sos_tda
LEAF_NODE	1992:30	1992:30	15	[
EXPR	1992:31	1992:31	15	m
FIELD	1992:31	1992:31	16	m
LEAF_NODE	1992:31	1992:31	17	m
LEAF_NODE	1992:32	1992:32	15	]
LEAF_NODE	1992:33	1992:33	13	|
BIT_OR_ELEM	1992:34	1992:54	13	( sp -> sos_tda [ m - 1 ] & 15 )
LEAF_NODE	1992:34	1992:34	14	(
FIELD	1992:35	1992:50	14	sp -> sos_tda [ m - 1 ]
LEAF_NODE	1992:35	1992:35	15	sp
LEAF_NODE	1992:37	1992:37	15	->
LEAF_NODE	1992:39	1992:39	15	sos_tda
LEAF_NODE	1992:46	1992:46	15	[
EXPR	1992:47	1992:49	15	m - 1
FIELD	1992:47	1992:47	16	m
LEAF_NODE	1992:47	1992:47	17	m
LEAF_NODE	1992:48	1992:48	16	-
FIELD	1992:49	1992:49	16	1
LEAF_NODE	1992:49	1992:49	17	1
LEAF_NODE	1992:50	1992:50	15	]
LEAF_NODE	1992:51	1992:51	14	&
FIELD	1992:52	1992:52	14	15
LEAF_NODE	1992:52	1992:52	15	15
LEAF_NODE	1992:54	1992:54	14	)
LEAF_NODE	1992:55	1992:55	12	)
LEAF_NODE	1992:56	1992:56	9	;
LEAF_NODE	1993:1	1993:1	5	}
JUMP_STATEMENT	1994:1	1994:10	3	return ( 1 ) ;
KEYWORD	1994:1	1994:1	4	return
LEAF_NODE	1994:1	1994:1	5	return
DESTINATION	1994:7	1994:7	4	( 1 )
EXPR	1994:7	1994:9	5	( 1 )
LEAF_NODE	1994:7	1994:7	6	(
FIELD	1994:8	1994:8	6	1
LEAF_NODE	1994:8	1994:8	7	1
LEAF_NODE	1994:9	1994:9	6	)
LEAF_NODE	1994:10	1994:10	4	;
LEAF_NODE	1995:0	1995:0	2	}
FUNCTION_DEF	1997:0	2080:0	1	
RETURN_TYPE	1997:0	1997:7	2	static int
LEAF_NODE	1997:0	1997:0	3	static
TYPE_NAME	1997:7	1997:7	3	int
LEAF_NODE	1997:7	1997:7	4	int
FUNCTION_NAME	1998:0	1998:0	2	OJPEGReadBufferFill
LEAF_NODE	1998:0	1998:0	3	OJPEGReadBufferFill
PARAMETER_LIST	1998:19	1998:34	2	( OJPEGState * sp )
LEAF_NODE	1998:19	1998:19	3	(
PARAMETER_DECL	1998:20	1998:32	3	OJPEGState * sp
TYPE	1998:20	1998:30	4	OJPEGState *
TYPE_NAME	1998:20	1998:20	5	OJPEGState
LEAF_NODE	1998:20	1998:20	6	OJPEGState
POINTER	1998:30	1998:30	5	*
LEAF_NODE	1998:30	1998:30	6	*
NAME	1998:32	1998:32	4	sp
LEAF_NODE	1998:32	1998:32	5	sp
LEAF_NODE	1998:34	1998:34	3	)
LEAF_NODE	1999:0	1999:0	2	{
STATEMENTS	2000:1	2079:1	2	
SIMPLE_DECL	2000:1	2000:9	3	uint16 m ;
VAR_DECL	2000:1	2000:8	4	uint16 m
TYPE	2000:1	2000:1	5	uint16
TYPE_NAME	2000:1	2000:1	6	uint16
LEAF_NODE	2000:1	2000:1	7	uint16
NAME	2000:8	2000:8	5	m
LEAF_NODE	2000:8	2000:8	6	m
LEAF_NODE	2000:9	2000:9	4	;
SIMPLE_DECL	2001:1	2001:11	3	tmsize_t n ;
VAR_DECL	2001:1	2001:10	4	tmsize_t n
TYPE	2001:1	2001:1	5	tmsize_t
TYPE_NAME	2001:1	2001:1	6	tmsize_t
LEAF_NODE	2001:1	2001:1	7	tmsize_t
NAME	2001:10	2001:10	5	n
LEAF_NODE	2001:10	2001:10	6	n
LEAF_NODE	2001:11	2001:11	4	;
ITERATION	2004:1	2005:1	3	
KEYWORD	2004:1	2004:1	4	do
LEAF_NODE	2004:1	2004:1	5	do
LEAF_NODE	2078:9	2078:9	4	(
CONDITION	2078:10	2078:10	4	1
EXPR	2078:10	2078:10	5	1
FIELD	2078:10	2078:10	6	1
LEAF_NODE	2078:10	2078:10	7	1
LEAF_NODE	2078:11	2078:11	4	)
STATEMENTS	2005:1	2078:1	4	
LEAF_NODE	2005:1	2005:1	5	{
STATEMENTS	2006:2	2031:2	5	
SELECTION	2006:2	2007:2	6	
KEYWORD	2006:2	2006:2	7	if
LEAF_NODE	2006:2	2006:2	8	if
LEAF_NODE	2006:5	2006:5	7	(
CONDITION	2006:6	2006:6	7	sp -> in_buffer_file_togo != 0
EXPR	2006:6	2006:31	8	sp -> in_buffer_file_togo != 0
FIELD	2006:6	2006:10	9	sp -> in_buffer_file_togo
LEAF_NODE	2006:6	2006:6	10	sp
LEAF_NODE	2006:8	2006:8	10	->
LEAF_NODE	2006:10	2006:10	10	in_buffer_file_togo
EQ_OPERATOR	2006:29	2006:29	9	!=
LEAF_NODE	2006:29	2006:29	10	!=
FIELD	2006:31	2006:31	9	0
LEAF_NODE	2006:31	2006:31	10	0
LEAF_NODE	2006:32	2006:32	7	)
STATEMENTS	2007:2	2029:2	7	
LEAF_NODE	2007:2	2007:2	8	{
STATEMENTS	2008:3	2028:3	8	
SELECTION	2008:3	2009:3	9	
KEYWORD	2008:3	2008:3	10	if
LEAF_NODE	2008:3	2008:3	11	if
LEAF_NODE	2008:6	2008:6	10	(
CONDITION	2008:7	2008:7	10	sp -> in_buffer_file_pos_log == 0
EXPR	2008:7	2008:35	11	sp -> in_buffer_file_pos_log == 0
FIELD	2008:7	2008:11	12	sp -> in_buffer_file_pos_log
LEAF_NODE	2008:7	2008:7	13	sp
LEAF_NODE	2008:9	2008:9	13	->
LEAF_NODE	2008:11	2008:11	13	in_buffer_file_pos_log
EQ_OPERATOR	2008:33	2008:33	12	==
LEAF_NODE	2008:33	2008:33	13	==
FIELD	2008:35	2008:35	12	0
LEAF_NODE	2008:35	2008:35	13	0
LEAF_NODE	2008:36	2008:36	10	)
STATEMENTS	2009:3	2012:3	10	
LEAF_NODE	2009:3	2009:3	11	{
STATEMENTS	2010:4	2011:4	11	
EXPR_STATEMENT	2010:4	2010:57	12	TIFFSeekFile ( sp -> tif , sp -> in_buffer_file_pos , SEEK_SET ) ;
EXPR	2010:4	2010:4	13	TIFFSeekFile ( sp -> tif , sp -> in_buffer_file_pos , SEEK_SET )
FUNCTION_CALL	2010:4	2010:56	14	TIFFSeekFile ( sp -> tif , sp -> in_buffer_file_pos , SEEK_SET )
CALLEE	2010:4	2010:4	15	TIFFSeekFile
LEAF_NODE	2010:4	2010:4	16	TIFFSeekFile
LEAF_NODE	2010:16	2010:16	15	(
ARGUMENT	2010:17	2010:17	15	sp -> tif
FIELD	2010:17	2010:21	16	sp -> tif
LEAF_NODE	2010:17	2010:17	17	sp
LEAF_NODE	2010:19	2010:19	17	->
LEAF_NODE	2010:21	2010:21	17	tif
LEAF_NODE	2010:24	2010:24	15	,
ARGUMENT	2010:25	2010:25	15	sp -> in_buffer_file_pos
FIELD	2010:25	2010:29	16	sp -> in_buffer_file_pos
LEAF_NODE	2010:25	2010:25	17	sp
LEAF_NODE	2010:27	2010:27	17	->
LEAF_NODE	2010:29	2010:29	17	in_buffer_file_pos
LEAF_NODE	2010:47	2010:47	15	,
ARGUMENT	2010:48	2010:48	15	SEEK_SET
FIELD	2010:48	2010:48	16	SEEK_SET
LEAF_NODE	2010:48	2010:48	17	SEEK_SET
LEAF_NODE	2010:56	2010:56	15	)
LEAF_NODE	2010:57	2010:57	13	;
EXPR_STATEMENT	2011:4	2011:32	12	sp -> in_buffer_file_pos_log = 1 ;
EXPR	2011:4	2011:4	13	sp -> in_buffer_file_pos_log = 1
ASSIGN	2011:4	2011:31	14	sp -> in_buffer_file_pos_log = 1
LVAL	2011:4	2011:4	15	sp -> in_buffer_file_pos_log
FIELD	2011:4	2011:8	16	sp -> in_buffer_file_pos_log
LEAF_NODE	2011:4	2011:4	17	sp
LEAF_NODE	2011:6	2011:6	17	->
LEAF_NODE	2011:8	2011:8	17	in_buffer_file_pos_log
ASSIGN_OP	2011:30	2011:30	15	=
LEAF_NODE	2011:30	2011:30	16	=
RVAL	2011:31	2011:31	15	1
FIELD	2011:31	2011:31	16	1
LEAF_NODE	2011:31	2011:31	17	1
LEAF_NODE	2011:32	2011:32	13	;
LEAF_NODE	2012:3	2012:3	11	}
EXPR_STATEMENT	2013:3	2013:17	9	m = OJPEG_BUFFER ;
EXPR	2013:3	2013:3	10	m = OJPEG_BUFFER
ASSIGN	2013:3	2013:5	11	m = OJPEG_BUFFER
LVAL	2013:3	2013:3	12	m
FIELD	2013:3	2013:3	13	m
LEAF_NODE	2013:3	2013:3	14	m
ASSIGN_OP	2013:4	2013:4	12	=
LEAF_NODE	2013:4	2013:4	13	=
RVAL	2013:5	2013:5	12	OJPEG_BUFFER
FIELD	2013:5	2013:5	13	OJPEG_BUFFER
LEAF_NODE	2013:5	2013:5	14	OJPEG_BUFFER
LEAF_NODE	2013:17	2013:17	10	;
SELECTION	2014:3	2015:4	9	
KEYWORD	2014:3	2014:3	10	if
LEAF_NODE	2014:3	2014:3	11	if
LEAF_NODE	2014:6	2014:6	10	(
CONDITION	2014:7	2014:7	10	( uint64 ) m > sp -> in_buffer_file_togo
EXPR	2014:7	2014:17	11	( uint64 ) m > sp -> in_buffer_file_togo
LEAF_NODE	2014:7	2014:7	12	(
TYPE_NAME	2014:8	2014:8	12	uint64
LEAF_NODE	2014:8	2014:8	13	uint64
LEAF_NODE	2014:14	2014:14	12	)
FIELD	2014:15	2014:15	12	m
LEAF_NODE	2014:15	2014:15	13	m
REL_OPERATOR	2014:16	2014:16	12	>
LEAF_NODE	2014:16	2014:16	13	>
FIELD	2014:17	2014:21	12	sp -> in_buffer_file_togo
LEAF_NODE	2014:17	2014:17	13	sp
LEAF_NODE	2014:19	2014:19	13	->
LEAF_NODE	2014:21	2014:21	13	in_buffer_file_togo
LEAF_NODE	2014:40	2014:40	10	)
STATEMENTS	2015:4	2015:4	10	
EXPR_STATEMENT	2015:4	2015:37	11	m = ( uint16 ) sp -> in_buffer_file_togo ;
EXPR	2015:4	2015:4	12	m = ( uint16 ) sp -> in_buffer_file_togo
ASSIGN	2015:4	2015:6	13	m = ( uint16 ) sp -> in_buffer_file_togo
LVAL	2015:4	2015:4	14	m
FIELD	2015:4	2015:4	15	m
LEAF_NODE	2015:4	2015:4	16	m
ASSIGN_OP	2015:5	2015:5	14	=
LEAF_NODE	2015:5	2015:5	15	=
RVAL	2015:6	2015:14	14	( uint16 ) sp -> in_buffer_file_togo
LEAF_NODE	2015:6	2015:6	15	(
TYPE_NAME	2015:7	2015:7	15	uint16
LEAF_NODE	2015:7	2015:7	16	uint16
LEAF_NODE	2015:13	2015:13	15	)
FIELD	2015:14	2015:18	15	sp -> in_buffer_file_togo
LEAF_NODE	2015:14	2015:14	16	sp
LEAF_NODE	2015:16	2015:16	16	->
LEAF_NODE	2015:18	2015:18	16	in_buffer_file_togo
LEAF_NODE	2015:37	2015:37	12	;
EXPR_STATEMENT	2016:3	2016:52	9	n = TIFFReadFile ( sp -> tif , sp -> in_buffer , ( tmsize_t ) m ) ;
EXPR	2016:3	2016:3	10	n = TIFFReadFile ( sp -> tif , sp -> in_buffer , ( tmsize_t ) m )
ASSIGN	2016:3	2016:5	11	n = TIFFReadFile ( sp -> tif , sp -> in_buffer , ( tmsize_t ) m )
LVAL	2016:3	2016:3	12	n
FIELD	2016:3	2016:3	13	n
LEAF_NODE	2016:3	2016:3	14	n
ASSIGN_OP	2016:4	2016:4	12	=
LEAF_NODE	2016:4	2016:4	13	=
RVAL	2016:5	2016:5	12	TIFFReadFile ( sp -> tif , sp -> in_buffer , ( tmsize_t ) m )
FUNCTION_CALL	2016:5	2016:51	13	TIFFReadFile ( sp -> tif , sp -> in_buffer , ( tmsize_t ) m )
CALLEE	2016:5	2016:5	14	TIFFReadFile
LEAF_NODE	2016:5	2016:5	15	TIFFReadFile
LEAF_NODE	2016:17	2016:17	14	(
ARGUMENT	2016:18	2016:18	14	sp -> tif
FIELD	2016:18	2016:22	15	sp -> tif
LEAF_NODE	2016:18	2016:18	16	sp
LEAF_NODE	2016:20	2016:20	16	->
LEAF_NODE	2016:22	2016:22	16	tif
LEAF_NODE	2016:25	2016:25	14	,
ARGUMENT	2016:26	2016:26	14	sp -> in_buffer
FIELD	2016:26	2016:30	15	sp -> in_buffer
LEAF_NODE	2016:26	2016:26	16	sp
LEAF_NODE	2016:28	2016:28	16	->
LEAF_NODE	2016:30	2016:30	16	in_buffer
LEAF_NODE	2016:39	2016:39	14	,
ARGUMENT	2016:40	2016:50	14	( tmsize_t ) m
LEAF_NODE	2016:40	2016:40	15	(
TYPE_NAME	2016:41	2016:41	15	tmsize_t
LEAF_NODE	2016:41	2016:41	16	tmsize_t
LEAF_NODE	2016:49	2016:49	15	)
FIELD	2016:50	2016:50	15	m
LEAF_NODE	2016:50	2016:50	16	m
LEAF_NODE	2016:51	2016:51	14	)
LEAF_NODE	2016:52	2016:52	10	;
SELECTION	2017:3	2018:4	9	
KEYWORD	2017:3	2017:3	10	if
LEAF_NODE	2017:3	2017:3	11	if
LEAF_NODE	2017:6	2017:6	10	(
CONDITION	2017:7	2017:7	10	n == 0
EXPR	2017:7	2017:10	11	n == 0
FIELD	2017:7	2017:7	12	n
LEAF_NODE	2017:7	2017:7	13	n
EQ_OPERATOR	2017:8	2017:8	12	==
LEAF_NODE	2017:8	2017:8	13	==
FIELD	2017:10	2017:10	12	0
LEAF_NODE	2017:10	2017:10	13	0
LEAF_NODE	2017:11	2017:11	10	)
STATEMENTS	2018:4	2018:4	10	
JUMP_STATEMENT	2018:4	2018:13	11	return ( 0 ) ;
KEYWORD	2018:4	2018:4	12	return
LEAF_NODE	2018:4	2018:4	13	return
DESTINATION	2018:10	2018:10	12	( 0 )
EXPR	2018:10	2018:12	13	( 0 )
LEAF_NODE	2018:10	2018:10	14	(
FIELD	2018:11	2018:11	14	0
LEAF_NODE	2018:11	2018:11	15	0
LEAF_NODE	2018:12	2018:12	14	)
LEAF_NODE	2018:13	2018:13	12	;
EXPR_STATEMENT	2019:3	2019:14	9	assert ( n > 0 ) ;
EXPR	2019:3	2019:3	10	assert ( n > 0 )
FUNCTION_CALL	2019:3	2019:13	11	assert ( n > 0 )
CALLEE	2019:3	2019:3	12	assert
LEAF_NODE	2019:3	2019:3	13	assert
LEAF_NODE	2019:9	2019:9	12	(
ARGUMENT	2019:10	2019:12	12	n > 0
FIELD	2019:10	2019:10	13	n
LEAF_NODE	2019:10	2019:10	14	n
REL_OPERATOR	2019:11	2019:11	13	>
LEAF_NODE	2019:11	2019:11	14	>
FIELD	2019:12	2019:12	13	0
LEAF_NODE	2019:12	2019:12	14	0
LEAF_NODE	2019:13	2019:13	12	)
LEAF_NODE	2019:14	2019:14	10	;
EXPR_STATEMENT	2020:3	2020:26	9	assert ( n <= OJPEG_BUFFER ) ;
EXPR	2020:3	2020:3	10	assert ( n <= OJPEG_BUFFER )
FUNCTION_CALL	2020:3	2020:25	11	assert ( n <= OJPEG_BUFFER )
CALLEE	2020:3	2020:3	12	assert
LEAF_NODE	2020:3	2020:3	13	assert
LEAF_NODE	2020:9	2020:9	12	(
ARGUMENT	2020:10	2020:13	12	n <= OJPEG_BUFFER
FIELD	2020:10	2020:10	13	n
LEAF_NODE	2020:10	2020:10	14	n
REL_OPERATOR	2020:11	2020:11	13	<=
LEAF_NODE	2020:11	2020:11	14	<=
FIELD	2020:13	2020:13	13	OJPEG_BUFFER
LEAF_NODE	2020:13	2020:13	14	OJPEG_BUFFER
LEAF_NODE	2020:25	2020:25	12	)
LEAF_NODE	2020:26	2020:26	10	;
EXPR_STATEMENT	2021:3	2021:18	9	assert ( n < 65536 ) ;
EXPR	2021:3	2021:3	10	assert ( n < 65536 )
FUNCTION_CALL	2021:3	2021:17	11	assert ( n < 65536 )
CALLEE	2021:3	2021:3	12	assert
LEAF_NODE	2021:3	2021:3	13	assert
LEAF_NODE	2021:9	2021:9	12	(
ARGUMENT	2021:10	2021:12	12	n < 65536
FIELD	2021:10	2021:10	13	n
LEAF_NODE	2021:10	2021:10	14	n
REL_OPERATOR	2021:11	2021:11	13	<
LEAF_NODE	2021:11	2021:11	14	<
FIELD	2021:12	2021:12	13	65536
LEAF_NODE	2021:12	2021:12	14	65536
LEAF_NODE	2021:17	2021:17	12	)
LEAF_NODE	2021:18	2021:18	10	;
EXPR_STATEMENT	2022:3	2022:45	9	assert ( ( uint64 ) n <= sp -> in_buffer_file_togo ) ;
EXPR	2022:3	2022:3	10	assert ( ( uint64 ) n <= sp -> in_buffer_file_togo )
FUNCTION_CALL	2022:3	2022:44	11	assert ( ( uint64 ) n <= sp -> in_buffer_file_togo )
CALLEE	2022:3	2022:3	12	assert
LEAF_NODE	2022:3	2022:3	13	assert
LEAF_NODE	2022:9	2022:9	12	(
ARGUMENT	2022:10	2022:21	12	( uint64 ) n <= sp -> in_buffer_file_togo
LEAF_NODE	2022:10	2022:10	13	(
TYPE_NAME	2022:11	2022:11	13	uint64
LEAF_NODE	2022:11	2022:11	14	uint64
LEAF_NODE	2022:17	2022:17	13	)
FIELD	2022:18	2022:18	13	n
LEAF_NODE	2022:18	2022:18	14	n
REL_OPERATOR	2022:19	2022:19	13	<=
LEAF_NODE	2022:19	2022:19	14	<=
FIELD	2022:21	2022:25	13	sp -> in_buffer_file_togo
LEAF_NODE	2022:21	2022:21	14	sp
LEAF_NODE	2022:23	2022:23	14	->
LEAF_NODE	2022:25	2022:25	14	in_buffer_file_togo
LEAF_NODE	2022:44	2022:44	12	)
LEAF_NODE	2022:45	2022:45	10	;
EXPR_STATEMENT	2023:3	2023:14	9	m = ( uint16 ) n ;
EXPR	2023:3	2023:3	10	m = ( uint16 ) n
ASSIGN	2023:3	2023:5	11	m = ( uint16 ) n
LVAL	2023:3	2023:3	12	m
FIELD	2023:3	2023:3	13	m
LEAF_NODE	2023:3	2023:3	14	m
ASSIGN_OP	2023:4	2023:4	12	=
LEAF_NODE	2023:4	2023:4	13	=
RVAL	2023:5	2023:13	12	( uint16 ) n
LEAF_NODE	2023:5	2023:5	13	(
TYPE_NAME	2023:6	2023:6	13	uint16
LEAF_NODE	2023:6	2023:6	14	uint16
LEAF_NODE	2023:12	2023:12	13	)
FIELD	2023:13	2023:13	13	n
LEAF_NODE	2023:13	2023:13	14	n
LEAF_NODE	2023:14	2023:14	10	;
EXPR_STATEMENT	2024:3	2024:23	9	sp -> in_buffer_togo = m ;
EXPR	2024:3	2024:3	10	sp -> in_buffer_togo = m
ASSIGN	2024:3	2024:22	11	sp -> in_buffer_togo = m
LVAL	2024:3	2024:3	12	sp -> in_buffer_togo
FIELD	2024:3	2024:7	13	sp -> in_buffer_togo
LEAF_NODE	2024:3	2024:3	14	sp
LEAF_NODE	2024:5	2024:5	14	->
LEAF_NODE	2024:7	2024:7	14	in_buffer_togo
ASSIGN_OP	2024:21	2024:21	12	=
LEAF_NODE	2024:21	2024:21	13	=
RVAL	2024:22	2024:22	12	m
FIELD	2024:22	2024:22	13	m
LEAF_NODE	2024:22	2024:22	14	m
LEAF_NODE	2024:23	2024:23	10	;
EXPR_STATEMENT	2025:3	2025:34	9	sp -> in_buffer_cur = sp -> in_buffer ;
EXPR	2025:3	2025:3	10	sp -> in_buffer_cur = sp -> in_buffer
ASSIGN	2025:3	2025:21	11	sp -> in_buffer_cur = sp -> in_buffer
LVAL	2025:3	2025:3	12	sp -> in_buffer_cur
FIELD	2025:3	2025:7	13	sp -> in_buffer_cur
LEAF_NODE	2025:3	2025:3	14	sp
LEAF_NODE	2025:5	2025:5	14	->
LEAF_NODE	2025:7	2025:7	14	in_buffer_cur
ASSIGN_OP	2025:20	2025:20	12	=
LEAF_NODE	2025:20	2025:20	13	=
RVAL	2025:21	2025:21	12	sp -> in_buffer
FIELD	2025:21	2025:25	13	sp -> in_buffer
LEAF_NODE	2025:21	2025:21	14	sp
LEAF_NODE	2025:23	2025:23	14	->
LEAF_NODE	2025:25	2025:25	14	in_buffer
LEAF_NODE	2025:34	2025:34	10	;
EXPR_STATEMENT	2026:3	2026:29	9	sp -> in_buffer_file_togo -= m ;
EXPR	2026:3	2026:3	10	sp -> in_buffer_file_togo -= m
ASSIGN	2026:3	2026:28	11	sp -> in_buffer_file_togo -= m
LVAL	2026:3	2026:3	12	sp -> in_buffer_file_togo
FIELD	2026:3	2026:7	13	sp -> in_buffer_file_togo
LEAF_NODE	2026:3	2026:3	14	sp
LEAF_NODE	2026:5	2026:5	14	->
LEAF_NODE	2026:7	2026:7	14	in_buffer_file_togo
ASSIGN_OP	2026:26	2026:26	12	-=
LEAF_NODE	2026:26	2026:26	13	-=
RVAL	2026:28	2026:28	12	m
FIELD	2026:28	2026:28	13	m
LEAF_NODE	2026:28	2026:28	14	m
LEAF_NODE	2026:29	2026:29	10	;
EXPR_STATEMENT	2027:3	2027:28	9	sp -> in_buffer_file_pos += m ;
EXPR	2027:3	2027:3	10	sp -> in_buffer_file_pos += m
ASSIGN	2027:3	2027:27	11	sp -> in_buffer_file_pos += m
LVAL	2027:3	2027:3	12	sp -> in_buffer_file_pos
FIELD	2027:3	2027:7	13	sp -> in_buffer_file_pos
LEAF_NODE	2027:3	2027:3	14	sp
LEAF_NODE	2027:5	2027:5	14	->
LEAF_NODE	2027:7	2027:7	14	in_buffer_file_pos
ASSIGN_OP	2027:25	2027:25	12	+=
LEAF_NODE	2027:25	2027:25	13	+=
RVAL	2027:27	2027:27	12	m
FIELD	2027:27	2027:27	13	m
LEAF_NODE	2027:27	2027:27	14	m
LEAF_NODE	2027:28	2027:28	10	;
JUMP_STATEMENT	2028:3	2028:8	9	break DESTINATION ;
KEYWORD	2028:3	2028:3	10	break
LEAF_NODE	2028:3	2028:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2028:8	2028:8	10	;
LEAF_NODE	2029:2	2029:2	8	}
EXPR_STATEMENT	2030:2	2030:30	6	sp -> in_buffer_file_pos_log = 0 ;
EXPR	2030:2	2030:2	7	sp -> in_buffer_file_pos_log = 0
ASSIGN	2030:2	2030:29	8	sp -> in_buffer_file_pos_log = 0
LVAL	2030:2	2030:2	9	sp -> in_buffer_file_pos_log
FIELD	2030:2	2030:6	10	sp -> in_buffer_file_pos_log
LEAF_NODE	2030:2	2030:2	11	sp
LEAF_NODE	2030:4	2030:4	11	->
LEAF_NODE	2030:6	2030:6	11	in_buffer_file_pos_log
ASSIGN_OP	2030:28	2030:28	9	=
LEAF_NODE	2030:28	2030:28	10	=
RVAL	2030:29	2030:29	9	0
FIELD	2030:29	2030:29	10	0
LEAF_NODE	2030:29	2030:29	11	0
LEAF_NODE	2030:30	2030:30	7	;
SELECTION	2031:2	2032:2	6	
KEYWORD	2031:2	2031:2	7	switch
LEAF_NODE	2031:2	2031:2	8	switch
LEAF_NODE	2031:8	2031:8	7	(
CONDITION	2031:9	2031:9	7	sp -> in_buffer_source
EXPR	2031:9	2031:9	8	sp -> in_buffer_source
FIELD	2031:9	2031:13	9	sp -> in_buffer_source
LEAF_NODE	2031:9	2031:9	10	sp
LEAF_NODE	2031:11	2031:11	10	->
LEAF_NODE	2031:13	2031:13	10	in_buffer_source
LEAF_NODE	2031:29	2031:29	7	)
STATEMENTS	2032:2	2077:2	7	
LEAF_NODE	2032:2	2032:2	8	{
STATEMENTS	2033:3	2076:4	8	
LABEL	2033:3	2033:22	9	case osibsNotSetYet :
LEAF_NODE	2033:3	2033:3	10	case
LEAF_NODE	2033:8	2033:8	10	osibsNotSetYet
LEAF_NODE	2033:22	2033:22	10	:
SELECTION	2034:4	2035:4	9	
KEYWORD	2034:4	2034:4	10	if
LEAF_NODE	2034:4	2034:4	11	if
LEAF_NODE	2034:7	2034:7	10	(
CONDITION	2034:8	2034:8	10	sp -> jpeg_interchange_format != 0
EXPR	2034:8	2034:37	11	sp -> jpeg_interchange_format != 0
FIELD	2034:8	2034:12	12	sp -> jpeg_interchange_format
LEAF_NODE	2034:8	2034:8	13	sp
LEAF_NODE	2034:10	2034:10	13	->
LEAF_NODE	2034:12	2034:12	13	jpeg_interchange_format
EQ_OPERATOR	2034:35	2034:35	12	!=
LEAF_NODE	2034:35	2034:35	13	!=
FIELD	2034:37	2034:37	12	0
LEAF_NODE	2034:37	2034:37	13	0
LEAF_NODE	2034:38	2034:38	10	)
STATEMENTS	2035:4	2038:4	10	
LEAF_NODE	2035:4	2035:4	11	{
STATEMENTS	2036:5	2037:5	11	
EXPR_STATEMENT	2036:5	2036:55	12	sp -> in_buffer_file_pos = sp -> jpeg_interchange_format ;
EXPR	2036:5	2036:5	13	sp -> in_buffer_file_pos = sp -> jpeg_interchange_format
ASSIGN	2036:5	2036:28	14	sp -> in_buffer_file_pos = sp -> jpeg_interchange_format
LVAL	2036:5	2036:5	15	sp -> in_buffer_file_pos
FIELD	2036:5	2036:9	16	sp -> in_buffer_file_pos
LEAF_NODE	2036:5	2036:5	17	sp
LEAF_NODE	2036:7	2036:7	17	->
LEAF_NODE	2036:9	2036:9	17	in_buffer_file_pos
ASSIGN_OP	2036:27	2036:27	15	=
LEAF_NODE	2036:27	2036:27	16	=
RVAL	2036:28	2036:28	15	sp -> jpeg_interchange_format
FIELD	2036:28	2036:32	16	sp -> jpeg_interchange_format
LEAF_NODE	2036:28	2036:28	17	sp
LEAF_NODE	2036:30	2036:30	17	->
LEAF_NODE	2036:32	2036:32	17	jpeg_interchange_format
LEAF_NODE	2036:55	2036:55	13	;
EXPR_STATEMENT	2037:5	2037:63	12	sp -> in_buffer_file_togo = sp -> jpeg_interchange_format_length ;
EXPR	2037:5	2037:5	13	sp -> in_buffer_file_togo = sp -> jpeg_interchange_format_length
ASSIGN	2037:5	2037:29	14	sp -> in_buffer_file_togo = sp -> jpeg_interchange_format_length
LVAL	2037:5	2037:5	15	sp -> in_buffer_file_togo
FIELD	2037:5	2037:9	16	sp -> in_buffer_file_togo
LEAF_NODE	2037:5	2037:5	17	sp
LEAF_NODE	2037:7	2037:7	17	->
LEAF_NODE	2037:9	2037:9	17	in_buffer_file_togo
ASSIGN_OP	2037:28	2037:28	15	=
LEAF_NODE	2037:28	2037:28	16	=
RVAL	2037:29	2037:29	15	sp -> jpeg_interchange_format_length
FIELD	2037:29	2037:33	16	sp -> jpeg_interchange_format_length
LEAF_NODE	2037:29	2037:29	17	sp
LEAF_NODE	2037:31	2037:31	17	->
LEAF_NODE	2037:33	2037:33	17	jpeg_interchange_format_length
LEAF_NODE	2037:63	2037:63	13	;
LEAF_NODE	2038:4	2038:4	11	}
EXPR_STATEMENT	2039:4	2039:51	9	sp -> in_buffer_source = osibsJpegInterchangeFormat ;
EXPR	2039:4	2039:4	10	sp -> in_buffer_source = osibsJpegInterchangeFormat
ASSIGN	2039:4	2039:25	11	sp -> in_buffer_source = osibsJpegInterchangeFormat
LVAL	2039:4	2039:4	12	sp -> in_buffer_source
FIELD	2039:4	2039:8	13	sp -> in_buffer_source
LEAF_NODE	2039:4	2039:4	14	sp
LEAF_NODE	2039:6	2039:6	14	->
LEAF_NODE	2039:8	2039:8	14	in_buffer_source
ASSIGN_OP	2039:24	2039:24	12	=
LEAF_NODE	2039:24	2039:24	13	=
RVAL	2039:25	2039:25	12	osibsJpegInterchangeFormat
FIELD	2039:25	2039:25	13	osibsJpegInterchangeFormat
LEAF_NODE	2039:25	2039:25	14	osibsJpegInterchangeFormat
LEAF_NODE	2039:51	2039:51	10	;
JUMP_STATEMENT	2040:4	2040:9	9	break DESTINATION ;
KEYWORD	2040:4	2040:4	10	break
LEAF_NODE	2040:4	2040:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2040:9	2040:9	10	;
LABEL	2041:3	2041:34	9	case osibsJpegInterchangeFormat :
LEAF_NODE	2041:3	2041:3	10	case
LEAF_NODE	2041:8	2041:8	10	osibsJpegInterchangeFormat
LEAF_NODE	2041:34	2041:34	10	:
EXPR_STATEMENT	2042:4	2042:36	9	sp -> in_buffer_source = osibsStrile ;
EXPR	2042:4	2042:4	10	sp -> in_buffer_source = osibsStrile
ASSIGN	2042:4	2042:25	11	sp -> in_buffer_source = osibsStrile
LVAL	2042:4	2042:4	12	sp -> in_buffer_source
FIELD	2042:4	2042:8	13	sp -> in_buffer_source
LEAF_NODE	2042:4	2042:4	14	sp
LEAF_NODE	2042:6	2042:6	14	->
LEAF_NODE	2042:8	2042:8	14	in_buffer_source
ASSIGN_OP	2042:24	2042:24	12	=
LEAF_NODE	2042:24	2042:24	13	=
RVAL	2042:25	2042:25	12	osibsStrile
FIELD	2042:25	2042:25	13	osibsStrile
LEAF_NODE	2042:25	2042:25	14	osibsStrile
LEAF_NODE	2042:36	2042:36	10	;
JUMP_STATEMENT	2043:32	2043:37	9	break DESTINATION ;
KEYWORD	2043:32	2043:32	10	break
LEAF_NODE	2043:32	2043:32	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2043:37	2043:37	10	;
LABEL	2044:3	2044:19	9	case osibsStrile :
LEAF_NODE	2044:3	2044:3	10	case
LEAF_NODE	2044:8	2044:8	10	osibsStrile
LEAF_NODE	2044:19	2044:19	10	:
SELECTION	2045:4	2046:5	9	
KEYWORD	2045:4	2045:4	10	if
LEAF_NODE	2045:4	2045:4	11	if
LEAF_NODE	2045:7	2045:7	10	(
CONDITION	2045:8	2045:8	10	sp -> in_buffer_next_strile == sp -> in_buffer_strile_count
EXPR	2045:8	2045:35	11	sp -> in_buffer_next_strile == sp -> in_buffer_strile_count
FIELD	2045:8	2045:12	12	sp -> in_buffer_next_strile
LEAF_NODE	2045:8	2045:8	13	sp
LEAF_NODE	2045:10	2045:10	13	->
LEAF_NODE	2045:12	2045:12	13	in_buffer_next_strile
EQ_OPERATOR	2045:33	2045:33	12	==
LEAF_NODE	2045:33	2045:33	13	==
FIELD	2045:35	2045:39	12	sp -> in_buffer_strile_count
LEAF_NODE	2045:35	2045:35	13	sp
LEAF_NODE	2045:37	2045:37	13	->
LEAF_NODE	2045:39	2045:39	13	in_buffer_strile_count
LEAF_NODE	2045:61	2045:61	10	)
STATEMENTS	2046:5	2046:5	10	
EXPR_STATEMENT	2046:5	2046:34	11	sp -> in_buffer_source = osibsEof ;
EXPR	2046:5	2046:5	12	sp -> in_buffer_source = osibsEof
ASSIGN	2046:5	2046:26	13	sp -> in_buffer_source = osibsEof
LVAL	2046:5	2046:5	14	sp -> in_buffer_source
FIELD	2046:5	2046:9	15	sp -> in_buffer_source
LEAF_NODE	2046:5	2046:5	16	sp
LEAF_NODE	2046:7	2046:7	16	->
LEAF_NODE	2046:9	2046:9	16	in_buffer_source
ASSIGN_OP	2046:25	2046:25	14	=
LEAF_NODE	2046:25	2046:25	15	=
RVAL	2046:26	2046:26	14	osibsEof
FIELD	2046:26	2046:26	15	osibsEof
LEAF_NODE	2046:26	2046:26	16	osibsEof
LEAF_NODE	2046:34	2046:34	12	;
SELECTION	2047:4	2048:4	9	
KEYWORD	2047:4	2047:4	10	else
LEAF_NODE	2047:4	2047:4	11	else
STATEMENTS	2048:4	2073:4	10	
LEAF_NODE	2048:4	2048:4	11	{
STATEMENTS	2049:5	2072:5	11	
SIMPLE_DECL	2049:5	2049:16	12	int err ; err = 0 ;
VAR_DECL	2049:5	2049:9	13	int err ; err = 0
TYPE	2049:5	2049:5	14	int
TYPE_NAME	2049:5	2049:5	15	int
LEAF_NODE	2049:5	2049:5	16	int
NAME	2049:9	2049:9	14	err
LEAF_NODE	2049:9	2049:9	15	err
LEAF_NODE	0:0	0:0	14	;
INIT	2049:9	2049:9	14	err = 0
ASSIGN	2049:9	2049:15	15	err = 0
LVAL	2049:9	2049:9	16	err
NAME	2049:9	2049:9	17	err
LEAF_NODE	2049:9	2049:9	18	err
ASSIGN_OP	2049:13	2049:13	16	=
LEAF_NODE	2049:13	2049:13	17	=
RVAL	2049:15	2049:15	16	0
FIELD	2049:15	2049:15	17	0
LEAF_NODE	2049:15	2049:15	18	0
LEAF_NODE	2049:16	2049:16	13	;
EXPR_STATEMENT	2050:5	2050:96	12	sp -> in_buffer_file_pos = TIFFGetStrileOffsetWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err ) ;
EXPR	2050:5	2050:5	13	sp -> in_buffer_file_pos = TIFFGetStrileOffsetWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
ASSIGN	2050:5	2050:28	14	sp -> in_buffer_file_pos = TIFFGetStrileOffsetWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
LVAL	2050:5	2050:5	15	sp -> in_buffer_file_pos
FIELD	2050:5	2050:9	16	sp -> in_buffer_file_pos
LEAF_NODE	2050:5	2050:5	17	sp
LEAF_NODE	2050:7	2050:7	17	->
LEAF_NODE	2050:9	2050:9	17	in_buffer_file_pos
ASSIGN_OP	2050:27	2050:27	15	=
LEAF_NODE	2050:27	2050:27	16	=
RVAL	2050:28	2050:28	15	TIFFGetStrileOffsetWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
FUNCTION_CALL	2050:28	2050:95	16	TIFFGetStrileOffsetWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
CALLEE	2050:28	2050:28	17	TIFFGetStrileOffsetWithErr
LEAF_NODE	2050:28	2050:28	18	TIFFGetStrileOffsetWithErr
LEAF_NODE	2050:54	2050:54	17	(
ARGUMENT	2050:55	2050:55	17	sp -> tif
FIELD	2050:55	2050:59	18	sp -> tif
LEAF_NODE	2050:55	2050:55	19	sp
LEAF_NODE	2050:57	2050:57	19	->
LEAF_NODE	2050:59	2050:59	19	tif
LEAF_NODE	2050:62	2050:62	17	,
ARGUMENT	2050:64	2050:64	17	sp -> in_buffer_next_strile
FIELD	2050:64	2050:68	18	sp -> in_buffer_next_strile
LEAF_NODE	2050:64	2050:64	19	sp
LEAF_NODE	2050:66	2050:66	19	->
LEAF_NODE	2050:68	2050:68	19	in_buffer_next_strile
LEAF_NODE	2050:89	2050:89	17	,
ARGUMENT	2050:91	2050:91	17	& err
UNARY_EXPR	2050:91	2050:92	18	& err
UNARY_OPERATOR	2050:91	2050:91	19	&
LEAF_NODE	2050:91	2050:91	20	&
FIELD	2050:92	2050:92	19	err
LEAF_NODE	2050:92	2050:92	20	err
LEAF_NODE	2050:95	2050:95	17	)
LEAF_NODE	2050:96	2050:96	13	;
SELECTION	2051:5	2052:6	12	
KEYWORD	2051:5	2051:5	13	if
LEAF_NODE	2051:5	2051:5	14	if
LEAF_NODE	2051:7	2051:7	13	(
CONDITION	2051:9	2051:9	13	err
EXPR	2051:9	2051:9	14	err
FIELD	2051:9	2051:9	15	err
LEAF_NODE	2051:9	2051:9	16	err
LEAF_NODE	2051:13	2051:13	13	)
STATEMENTS	2052:6	2052:6	13	
JUMP_STATEMENT	2052:6	2052:14	14	return 0 ;
KEYWORD	2052:6	2052:6	15	return
LEAF_NODE	2052:6	2052:6	16	return
DESTINATION	2052:13	2052:13	15	0
EXPR	2052:13	2052:13	16	0
FIELD	2052:13	2052:13	17	0
LEAF_NODE	2052:13	2052:13	18	0
LEAF_NODE	2052:14	2052:14	15	;
SELECTION	2053:5	2054:5	12	
KEYWORD	2053:5	2053:5	13	if
LEAF_NODE	2053:5	2053:5	14	if
LEAF_NODE	2053:8	2053:8	13	(
CONDITION	2053:9	2053:9	13	sp -> in_buffer_file_pos != 0
EXPR	2053:9	2053:33	14	sp -> in_buffer_file_pos != 0
FIELD	2053:9	2053:13	15	sp -> in_buffer_file_pos
LEAF_NODE	2053:9	2053:9	16	sp
LEAF_NODE	2053:11	2053:11	16	->
LEAF_NODE	2053:13	2053:13	16	in_buffer_file_pos
EQ_OPERATOR	2053:31	2053:31	15	!=
LEAF_NODE	2053:31	2053:31	16	!=
FIELD	2053:33	2053:33	15	0
LEAF_NODE	2053:33	2053:33	16	0
LEAF_NODE	2053:34	2053:34	13	)
STATEMENTS	2054:5	2071:5	13	
LEAF_NODE	2054:5	2054:5	14	{
STATEMENTS	2055:6	2062:6	14	
SIMPLE_DECL	2055:6	2055:96	15	uint64 bytecount ; bytecount = TIFFGetStrileByteCountWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err ) ;
VAR_DECL	2055:6	2055:13	16	uint64 bytecount ; bytecount = TIFFGetStrileByteCountWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
TYPE	2055:6	2055:6	17	uint64
TYPE_NAME	2055:6	2055:6	18	uint64
LEAF_NODE	2055:6	2055:6	19	uint64
NAME	2055:13	2055:13	17	bytecount
LEAF_NODE	2055:13	2055:13	18	bytecount
LEAF_NODE	0:0	0:0	17	;
INIT	2055:13	2055:13	17	bytecount = TIFFGetStrileByteCountWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
ASSIGN	2055:13	2055:25	18	bytecount = TIFFGetStrileByteCountWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
LVAL	2055:13	2055:13	19	bytecount
NAME	2055:13	2055:13	20	bytecount
LEAF_NODE	2055:13	2055:13	21	bytecount
ASSIGN_OP	2055:23	2055:23	19	=
LEAF_NODE	2055:23	2055:23	20	=
RVAL	2055:25	2055:25	19	TIFFGetStrileByteCountWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
FUNCTION_CALL	2055:25	2055:95	20	TIFFGetStrileByteCountWithErr ( sp -> tif , sp -> in_buffer_next_strile , & err )
CALLEE	2055:25	2055:25	21	TIFFGetStrileByteCountWithErr
LEAF_NODE	2055:25	2055:25	22	TIFFGetStrileByteCountWithErr
LEAF_NODE	2055:54	2055:54	21	(
ARGUMENT	2055:55	2055:55	21	sp -> tif
FIELD	2055:55	2055:59	22	sp -> tif
LEAF_NODE	2055:55	2055:55	23	sp
LEAF_NODE	2055:57	2055:57	23	->
LEAF_NODE	2055:59	2055:59	23	tif
LEAF_NODE	2055:62	2055:62	21	,
ARGUMENT	2055:64	2055:64	21	sp -> in_buffer_next_strile
FIELD	2055:64	2055:68	22	sp -> in_buffer_next_strile
LEAF_NODE	2055:64	2055:64	23	sp
LEAF_NODE	2055:66	2055:66	23	->
LEAF_NODE	2055:68	2055:68	23	in_buffer_next_strile
LEAF_NODE	2055:89	2055:89	21	,
ARGUMENT	2055:91	2055:91	21	& err
UNARY_EXPR	2055:91	2055:92	22	& err
UNARY_OPERATOR	2055:91	2055:91	23	&
LEAF_NODE	2055:91	2055:91	24	&
FIELD	2055:92	2055:92	23	err
LEAF_NODE	2055:92	2055:92	24	err
LEAF_NODE	2055:95	2055:95	21	)
LEAF_NODE	2055:96	2055:96	16	;
SELECTION	2056:6	2057:7	15	
KEYWORD	2056:6	2056:6	16	if
LEAF_NODE	2056:6	2056:6	17	if
LEAF_NODE	2056:8	2056:8	16	(
CONDITION	2056:10	2056:10	16	err
EXPR	2056:10	2056:10	17	err
FIELD	2056:10	2056:10	18	err
LEAF_NODE	2056:10	2056:10	19	err
LEAF_NODE	2056:14	2056:14	16	)
STATEMENTS	2057:7	2057:7	16	
JUMP_STATEMENT	2057:7	2057:15	17	return 0 ;
KEYWORD	2057:7	2057:7	18	return
LEAF_NODE	2057:7	2057:7	19	return
DESTINATION	2057:14	2057:14	18	0
EXPR	2057:14	2057:14	19	0
FIELD	2057:14	2057:14	20	0
LEAF_NODE	2057:14	2057:14	21	0
LEAF_NODE	2057:15	2057:15	18	;
SELECTION	2058:6	2059:7	15	
KEYWORD	2058:6	2058:6	16	if
LEAF_NODE	2058:6	2058:6	17	if
LEAF_NODE	2058:9	2058:9	16	(
CONDITION	2058:10	2058:10	16	sp -> in_buffer_file_pos >= sp -> file_size
EXPR	2058:10	2058:34	17	sp -> in_buffer_file_pos >= sp -> file_size
FIELD	2058:10	2058:14	18	sp -> in_buffer_file_pos
LEAF_NODE	2058:10	2058:10	19	sp
LEAF_NODE	2058:12	2058:12	19	->
LEAF_NODE	2058:14	2058:14	19	in_buffer_file_pos
REL_OPERATOR	2058:32	2058:32	18	>=
LEAF_NODE	2058:32	2058:32	19	>=
FIELD	2058:34	2058:38	18	sp -> file_size
LEAF_NODE	2058:34	2058:34	19	sp
LEAF_NODE	2058:36	2058:36	19	->
LEAF_NODE	2058:38	2058:38	19	file_size
LEAF_NODE	2058:47	2058:47	16	)
STATEMENTS	2059:7	2059:7	16	
EXPR_STATEMENT	2059:7	2059:31	17	sp -> in_buffer_file_pos = 0 ;
EXPR	2059:7	2059:7	18	sp -> in_buffer_file_pos = 0
ASSIGN	2059:7	2059:30	19	sp -> in_buffer_file_pos = 0
LVAL	2059:7	2059:7	20	sp -> in_buffer_file_pos
FIELD	2059:7	2059:11	21	sp -> in_buffer_file_pos
LEAF_NODE	2059:7	2059:7	22	sp
LEAF_NODE	2059:9	2059:9	22	->
LEAF_NODE	2059:11	2059:11	22	in_buffer_file_pos
ASSIGN_OP	2059:29	2059:29	20	=
LEAF_NODE	2059:29	2059:29	21	=
RVAL	2059:30	2059:30	20	0
FIELD	2059:30	2059:30	21	0
LEAF_NODE	2059:30	2059:30	22	0
LEAF_NODE	2059:31	2059:31	18	;
SELECTION	2060:6	2060:11	15	
KEYWORD	2060:6	2060:6	16	else
LEAF_NODE	2060:6	2060:6	17	else
STATEMENTS	2060:11	2060:11	16	
SELECTION	2060:11	2061:7	17	
KEYWORD	2060:11	2060:11	18	if
LEAF_NODE	2060:11	2060:11	19	if
LEAF_NODE	2060:14	2060:14	18	(
CONDITION	2060:15	2060:15	18	bytecount == 0
EXPR	2060:15	2060:26	19	bytecount == 0
FIELD	2060:15	2060:15	20	bytecount
LEAF_NODE	2060:15	2060:15	21	bytecount
EQ_OPERATOR	2060:24	2060:24	20	==
LEAF_NODE	2060:24	2060:24	21	==
FIELD	2060:26	2060:26	20	0
LEAF_NODE	2060:26	2060:26	21	0
LEAF_NODE	2060:27	2060:27	18	)
STATEMENTS	2061:7	2061:7	18	
EXPR_STATEMENT	2061:7	2061:67	19	sp -> in_buffer_file_togo = sp -> file_size - sp -> in_buffer_file_pos ;
EXPR	2061:7	2061:7	20	sp -> in_buffer_file_togo = sp -> file_size - sp -> in_buffer_file_pos
ASSIGN	2061:7	2061:31	21	sp -> in_buffer_file_togo = sp -> file_size - sp -> in_buffer_file_pos
LVAL	2061:7	2061:7	22	sp -> in_buffer_file_togo
FIELD	2061:7	2061:11	23	sp -> in_buffer_file_togo
LEAF_NODE	2061:7	2061:7	24	sp
LEAF_NODE	2061:9	2061:9	24	->
LEAF_NODE	2061:11	2061:11	24	in_buffer_file_togo
ASSIGN_OP	2061:30	2061:30	22	=
LEAF_NODE	2061:30	2061:30	23	=
RVAL	2061:31	2061:45	22	sp -> file_size - sp -> in_buffer_file_pos
FIELD	2061:31	2061:35	23	sp -> file_size
LEAF_NODE	2061:31	2061:31	24	sp
LEAF_NODE	2061:33	2061:33	24	->
LEAF_NODE	2061:35	2061:35	24	file_size
LEAF_NODE	2061:44	2061:44	23	-
FIELD	2061:45	2061:49	23	sp -> in_buffer_file_pos
LEAF_NODE	2061:45	2061:45	24	sp
LEAF_NODE	2061:47	2061:47	24	->
LEAF_NODE	2061:49	2061:49	24	in_buffer_file_pos
LEAF_NODE	2061:67	2061:67	20	;
SELECTION	2062:6	2063:6	15	
KEYWORD	2062:6	2062:6	16	else
LEAF_NODE	2062:6	2062:6	17	else
STATEMENTS	2063:6	2070:6	16	
LEAF_NODE	2063:6	2063:6	17	{
STATEMENTS	2064:7	2067:7	17	
EXPR_STATEMENT	2064:7	2064:40	18	sp -> in_buffer_file_togo = bytecount ;
EXPR	2064:7	2064:7	19	sp -> in_buffer_file_togo = bytecount
ASSIGN	2064:7	2064:31	20	sp -> in_buffer_file_togo = bytecount
LVAL	2064:7	2064:7	21	sp -> in_buffer_file_togo
FIELD	2064:7	2064:11	22	sp -> in_buffer_file_togo
LEAF_NODE	2064:7	2064:7	23	sp
LEAF_NODE	2064:9	2064:9	23	->
LEAF_NODE	2064:11	2064:11	23	in_buffer_file_togo
ASSIGN_OP	2064:30	2064:30	21	=
LEAF_NODE	2064:30	2064:30	22	=
RVAL	2064:31	2064:31	21	bytecount
FIELD	2064:31	2064:31	22	bytecount
LEAF_NODE	2064:31	2064:31	23	bytecount
LEAF_NODE	2064:40	2064:40	19	;
SELECTION	2065:7	2066:8	18	
KEYWORD	2065:7	2065:7	19	if
LEAF_NODE	2065:7	2065:7	20	if
LEAF_NODE	2065:10	2065:10	19	(
CONDITION	2065:11	2065:11	19	sp -> in_buffer_file_togo == 0
EXPR	2065:11	2065:36	20	sp -> in_buffer_file_togo == 0
FIELD	2065:11	2065:15	21	sp -> in_buffer_file_togo
LEAF_NODE	2065:11	2065:11	22	sp
LEAF_NODE	2065:13	2065:13	22	->
LEAF_NODE	2065:15	2065:15	22	in_buffer_file_togo
EQ_OPERATOR	2065:34	2065:34	21	==
LEAF_NODE	2065:34	2065:34	22	==
FIELD	2065:36	2065:36	21	0
LEAF_NODE	2065:36	2065:36	22	0
LEAF_NODE	2065:37	2065:37	19	)
STATEMENTS	2066:8	2066:8	19	
EXPR_STATEMENT	2066:8	2066:32	20	sp -> in_buffer_file_pos = 0 ;
EXPR	2066:8	2066:8	21	sp -> in_buffer_file_pos = 0
ASSIGN	2066:8	2066:31	22	sp -> in_buffer_file_pos = 0
LVAL	2066:8	2066:8	23	sp -> in_buffer_file_pos
FIELD	2066:8	2066:12	24	sp -> in_buffer_file_pos
LEAF_NODE	2066:8	2066:8	25	sp
LEAF_NODE	2066:10	2066:10	25	->
LEAF_NODE	2066:12	2066:12	25	in_buffer_file_pos
ASSIGN_OP	2066:30	2066:30	23	=
LEAF_NODE	2066:30	2066:30	24	=
RVAL	2066:31	2066:31	23	0
FIELD	2066:31	2066:31	24	0
LEAF_NODE	2066:31	2066:31	25	0
LEAF_NODE	2066:32	2066:32	21	;
SELECTION	2067:7	2067:12	18	
KEYWORD	2067:7	2067:7	19	else
LEAF_NODE	2067:7	2067:7	20	else
STATEMENTS	2067:12	2067:12	19	
SELECTION	2067:12	2069:8	20	
KEYWORD	2067:12	2067:12	21	if
LEAF_NODE	2067:12	2067:12	22	if
LEAF_NODE	2067:15	2067:15	21	(
CONDITION	2067:16	2067:16	21	sp -> in_buffer_file_pos > TIFF_UINT64_MAX - sp -> in_buffer_file_togo || sp -> in_buffer_file_pos + sp -> in_buffer_file_togo > sp -> file_size
EXPR	2067:16	2067:16	22	sp -> in_buffer_file_pos > TIFF_UINT64_MAX - sp -> in_buffer_file_togo || sp -> in_buffer_file_pos + sp -> in_buffer_file_togo > sp -> file_size
OR	2067:16	2068:64	23	sp -> in_buffer_file_pos > TIFF_UINT64_MAX - sp -> in_buffer_file_togo || sp -> in_buffer_file_pos + sp -> in_buffer_file_togo > sp -> file_size
EXPR	2067:16	2067:59	24	sp -> in_buffer_file_pos > TIFF_UINT64_MAX - sp -> in_buffer_file_togo
FIELD	2067:16	2067:20	25	sp -> in_buffer_file_pos
LEAF_NODE	2067:16	2067:16	26	sp
LEAF_NODE	2067:18	2067:18	26	->
LEAF_NODE	2067:20	2067:20	26	in_buffer_file_pos
REL_OPERATOR	2067:39	2067:39	25	>
LEAF_NODE	2067:39	2067:39	26	>
FIELD	2067:41	2067:41	25	TIFF_UINT64_MAX
LEAF_NODE	2067:41	2067:41	26	TIFF_UINT64_MAX
LEAF_NODE	2067:57	2067:57	25	-
FIELD	2067:59	2067:63	25	sp -> in_buffer_file_togo
LEAF_NODE	2067:59	2067:59	26	sp
LEAF_NODE	2067:61	2067:61	26	->
LEAF_NODE	2067:63	2067:63	26	in_buffer_file_togo
LEAF_NODE	2067:83	2067:83	24	||
EXPR	2068:64	2068:111	24	sp -> in_buffer_file_pos + sp -> in_buffer_file_togo > sp -> file_size
FIELD	2068:64	2068:68	25	sp -> in_buffer_file_pos
LEAF_NODE	2068:64	2068:64	26	sp
LEAF_NODE	2068:66	2068:66	26	->
LEAF_NODE	2068:68	2068:68	26	in_buffer_file_pos
LEAF_NODE	2068:86	2068:86	25	+
FIELD	2068:87	2068:91	25	sp -> in_buffer_file_togo
LEAF_NODE	2068:87	2068:87	26	sp
LEAF_NODE	2068:89	2068:89	26	->
LEAF_NODE	2068:91	2068:91	26	in_buffer_file_togo
REL_OPERATOR	2068:110	2068:110	25	>
LEAF_NODE	2068:110	2068:110	26	>
FIELD	2068:111	2068:115	25	sp -> file_size
LEAF_NODE	2068:111	2068:111	26	sp
LEAF_NODE	2068:113	2068:113	26	->
LEAF_NODE	2068:115	2068:115	26	file_size
LEAF_NODE	2068:124	2068:124	21	)
STATEMENTS	2069:8	2069:8	21	
EXPR_STATEMENT	2069:8	2069:68	22	sp -> in_buffer_file_togo = sp -> file_size - sp -> in_buffer_file_pos ;
EXPR	2069:8	2069:8	23	sp -> in_buffer_file_togo = sp -> file_size - sp -> in_buffer_file_pos
ASSIGN	2069:8	2069:32	24	sp -> in_buffer_file_togo = sp -> file_size - sp -> in_buffer_file_pos
LVAL	2069:8	2069:8	25	sp -> in_buffer_file_togo
FIELD	2069:8	2069:12	26	sp -> in_buffer_file_togo
LEAF_NODE	2069:8	2069:8	27	sp
LEAF_NODE	2069:10	2069:10	27	->
LEAF_NODE	2069:12	2069:12	27	in_buffer_file_togo
ASSIGN_OP	2069:31	2069:31	25	=
LEAF_NODE	2069:31	2069:31	26	=
RVAL	2069:32	2069:46	25	sp -> file_size - sp -> in_buffer_file_pos
FIELD	2069:32	2069:36	26	sp -> file_size
LEAF_NODE	2069:32	2069:32	27	sp
LEAF_NODE	2069:34	2069:34	27	->
LEAF_NODE	2069:36	2069:36	27	file_size
LEAF_NODE	2069:45	2069:45	26	-
FIELD	2069:46	2069:50	26	sp -> in_buffer_file_pos
LEAF_NODE	2069:46	2069:46	27	sp
LEAF_NODE	2069:48	2069:48	27	->
LEAF_NODE	2069:50	2069:50	27	in_buffer_file_pos
LEAF_NODE	2069:68	2069:68	23	;
LEAF_NODE	2070:6	2070:6	17	}
LEAF_NODE	2071:5	2071:5	14	}
EXPR_STATEMENT	2072:5	2072:32	12	sp -> in_buffer_next_strile ++ ;
EXPR	2072:5	2072:5	13	sp -> in_buffer_next_strile ++
FIELD	2072:5	2072:30	14	sp -> in_buffer_next_strile ++
LEAF_NODE	2072:5	2072:5	15	sp
LEAF_NODE	2072:7	2072:7	15	->
LEAF_NODE	2072:9	2072:9	15	in_buffer_next_strile
LEAF_NODE	2072:30	2072:30	15	++
LEAF_NODE	2072:32	2072:32	13	;
LEAF_NODE	2073:4	2073:4	11	}
JUMP_STATEMENT	2074:4	2074:9	9	break DESTINATION ;
KEYWORD	2074:4	2074:4	10	break
LEAF_NODE	2074:4	2074:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2074:9	2074:9	10	;
LABEL	2075:3	2075:10	9	default :
LEAF_NODE	2075:3	2075:3	10	default
LEAF_NODE	2075:10	2075:10	10	:
JUMP_STATEMENT	2076:4	2076:13	9	return ( 0 ) ;
KEYWORD	2076:4	2076:4	10	return
LEAF_NODE	2076:4	2076:4	11	return
DESTINATION	2076:10	2076:10	10	( 0 )
EXPR	2076:10	2076:12	11	( 0 )
LEAF_NODE	2076:10	2076:10	12	(
FIELD	2076:11	2076:11	12	0
LEAF_NODE	2076:11	2076:11	13	0
LEAF_NODE	2076:12	2076:12	12	)
LEAF_NODE	2076:13	2076:13	10	;
LEAF_NODE	2077:2	2077:2	8	}
LEAF_NODE	2078:1	2078:1	5	}
LEAF_NODE	2078:12	2078:12	3	;
JUMP_STATEMENT	2079:1	2079:10	3	return ( 1 ) ;
KEYWORD	2079:1	2079:1	4	return
LEAF_NODE	2079:1	2079:1	5	return
DESTINATION	2079:7	2079:7	4	( 1 )
EXPR	2079:7	2079:9	5	( 1 )
LEAF_NODE	2079:7	2079:7	6	(
FIELD	2079:8	2079:8	6	1
LEAF_NODE	2079:8	2079:8	7	1
LEAF_NODE	2079:9	2079:9	6	)
LEAF_NODE	2079:10	2079:10	4	;
LEAF_NODE	2080:0	2080:0	2	}
FUNCTION_DEF	2082:0	2095:0	1	
RETURN_TYPE	2082:0	2082:7	2	static int
LEAF_NODE	2082:0	2082:0	3	static
TYPE_NAME	2082:7	2082:7	3	int
LEAF_NODE	2082:7	2082:7	4	int
FUNCTION_NAME	2083:0	2083:0	2	OJPEGReadByte
LEAF_NODE	2083:0	2083:0	3	OJPEGReadByte
PARAMETER_LIST	2083:13	2083:41	2	( OJPEGState * sp , uint8 * byte )
LEAF_NODE	2083:13	2083:13	3	(
PARAMETER_DECL	2083:14	2083:26	3	OJPEGState * sp
TYPE	2083:14	2083:24	4	OJPEGState *
TYPE_NAME	2083:14	2083:14	5	OJPEGState
LEAF_NODE	2083:14	2083:14	6	OJPEGState
POINTER	2083:24	2083:24	5	*
LEAF_NODE	2083:24	2083:24	6	*
NAME	2083:26	2083:26	4	sp
LEAF_NODE	2083:26	2083:26	5	sp
LEAF_NODE	2083:28	2083:28	3	,
PARAMETER_DECL	2083:30	2083:37	3	uint8 * byte
TYPE	2083:30	2083:35	4	uint8 *
TYPE_NAME	2083:30	2083:30	5	uint8
LEAF_NODE	2083:30	2083:30	6	uint8
POINTER	2083:35	2083:35	5	*
LEAF_NODE	2083:35	2083:35	6	*
NAME	2083:37	2083:37	4	byte
LEAF_NODE	2083:37	2083:37	5	byte
LEAF_NODE	2083:41	2083:41	3	)
LEAF_NODE	2084:0	2084:0	2	{
STATEMENTS	2085:1	2094:1	2	
SELECTION	2085:1	2086:1	3	
KEYWORD	2085:1	2085:1	4	if
LEAF_NODE	2085:1	2085:1	5	if
LEAF_NODE	2085:4	2085:4	4	(
CONDITION	2085:5	2085:5	4	sp -> in_buffer_togo == 0
EXPR	2085:5	2085:25	5	sp -> in_buffer_togo == 0
FIELD	2085:5	2085:9	6	sp -> in_buffer_togo
LEAF_NODE	2085:5	2085:5	7	sp
LEAF_NODE	2085:7	2085:7	7	->
LEAF_NODE	2085:9	2085:9	7	in_buffer_togo
EQ_OPERATOR	2085:23	2085:23	6	==
LEAF_NODE	2085:23	2085:23	7	==
FIELD	2085:25	2085:25	6	0
LEAF_NODE	2085:25	2085:25	7	0
LEAF_NODE	2085:26	2085:26	4	)
STATEMENTS	2086:1	2090:1	4	
LEAF_NODE	2086:1	2086:1	5	{
STATEMENTS	2087:2	2089:2	5	
SELECTION	2087:2	2088:3	6	
KEYWORD	2087:2	2087:2	7	if
LEAF_NODE	2087:2	2087:2	8	if
LEAF_NODE	2087:5	2087:5	7	(
CONDITION	2087:6	2087:6	7	OJPEGReadBufferFill ( sp ) == 0
EXPR	2087:6	2087:31	8	OJPEGReadBufferFill ( sp ) == 0
FUNCTION_CALL	2087:6	2087:28	9	OJPEGReadBufferFill ( sp )
CALLEE	2087:6	2087:6	10	OJPEGReadBufferFill
LEAF_NODE	2087:6	2087:6	11	OJPEGReadBufferFill
LEAF_NODE	2087:25	2087:25	10	(
ARGUMENT	2087:26	2087:26	10	sp
FIELD	2087:26	2087:26	11	sp
LEAF_NODE	2087:26	2087:26	12	sp
LEAF_NODE	2087:28	2087:28	10	)
EQ_OPERATOR	2087:29	2087:29	9	==
LEAF_NODE	2087:29	2087:29	10	==
FIELD	2087:31	2087:31	9	0
LEAF_NODE	2087:31	2087:31	10	0
LEAF_NODE	2087:32	2087:32	7	)
STATEMENTS	2088:3	2088:3	7	
JUMP_STATEMENT	2088:3	2088:12	8	return ( 0 ) ;
KEYWORD	2088:3	2088:3	9	return
LEAF_NODE	2088:3	2088:3	10	return
DESTINATION	2088:9	2088:9	9	( 0 )
EXPR	2088:9	2088:11	10	( 0 )
LEAF_NODE	2088:9	2088:9	11	(
FIELD	2088:10	2088:10	11	0
LEAF_NODE	2088:10	2088:10	12	0
LEAF_NODE	2088:11	2088:11	11	)
LEAF_NODE	2088:12	2088:12	9	;
EXPR_STATEMENT	2089:2	2089:30	6	assert ( sp -> in_buffer_togo > 0 ) ;
EXPR	2089:2	2089:2	7	assert ( sp -> in_buffer_togo > 0 )
FUNCTION_CALL	2089:2	2089:29	8	assert ( sp -> in_buffer_togo > 0 )
CALLEE	2089:2	2089:2	9	assert
LEAF_NODE	2089:2	2089:2	10	assert
LEAF_NODE	2089:8	2089:8	9	(
ARGUMENT	2089:9	2089:28	9	sp -> in_buffer_togo > 0
FIELD	2089:9	2089:13	10	sp -> in_buffer_togo
LEAF_NODE	2089:9	2089:9	11	sp
LEAF_NODE	2089:11	2089:11	11	->
LEAF_NODE	2089:13	2089:13	11	in_buffer_togo
REL_OPERATOR	2089:27	2089:27	10	>
LEAF_NODE	2089:27	2089:27	11	>
FIELD	2089:28	2089:28	10	0
LEAF_NODE	2089:28	2089:28	11	0
LEAF_NODE	2089:29	2089:29	9	)
LEAF_NODE	2089:30	2089:30	7	;
LEAF_NODE	2090:1	2090:1	5	}
EXPR_STATEMENT	2091:1	2091:27	3	* byte = * ( sp -> in_buffer_cur ) ;
EXPR	2091:1	2091:1	4	* byte = * ( sp -> in_buffer_cur )
ASSIGN	2091:1	2091:7	5	* byte = * ( sp -> in_buffer_cur )
LVAL	2091:1	2091:1	6	* byte
UNARY_EXPR	2091:1	2091:2	7	* byte
UNARY_OPERATOR	2091:1	2091:1	8	*
LEAF_NODE	2091:1	2091:1	9	*
FIELD	2091:2	2091:2	8	byte
LEAF_NODE	2091:2	2091:2	9	byte
ASSIGN_OP	2091:6	2091:6	6	=
LEAF_NODE	2091:6	2091:6	7	=
RVAL	2091:7	2091:7	6	* ( sp -> in_buffer_cur )
UNARY_EXPR	2091:7	2091:26	7	* ( sp -> in_buffer_cur )
UNARY_OPERATOR	2091:7	2091:7	8	*
LEAF_NODE	2091:7	2091:7	9	*
LEAF_NODE	2091:8	2091:8	8	(
FIELD	2091:9	2091:13	8	sp -> in_buffer_cur
LEAF_NODE	2091:9	2091:9	9	sp
LEAF_NODE	2091:11	2091:11	9	->
LEAF_NODE	2091:13	2091:13	9	in_buffer_cur
LEAF_NODE	2091:26	2091:26	8	)
LEAF_NODE	2091:27	2091:27	4	;
EXPR_STATEMENT	2092:1	2092:20	3	sp -> in_buffer_cur ++ ;
EXPR	2092:1	2092:1	4	sp -> in_buffer_cur ++
FIELD	2092:1	2092:18	5	sp -> in_buffer_cur ++
LEAF_NODE	2092:1	2092:1	6	sp
LEAF_NODE	2092:3	2092:3	6	->
LEAF_NODE	2092:5	2092:5	6	in_buffer_cur
LEAF_NODE	2092:18	2092:18	6	++
LEAF_NODE	2092:20	2092:20	4	;
EXPR_STATEMENT	2093:1	2093:21	3	sp -> in_buffer_togo -- ;
EXPR	2093:1	2093:1	4	sp -> in_buffer_togo --
FIELD	2093:1	2093:19	5	sp -> in_buffer_togo --
LEAF_NODE	2093:1	2093:1	6	sp
LEAF_NODE	2093:3	2093:3	6	->
LEAF_NODE	2093:5	2093:5	6	in_buffer_togo
LEAF_NODE	2093:19	2093:19	6	--
LEAF_NODE	2093:21	2093:21	4	;
JUMP_STATEMENT	2094:1	2094:10	3	return ( 1 ) ;
KEYWORD	2094:1	2094:1	4	return
LEAF_NODE	2094:1	2094:1	5	return
DESTINATION	2094:7	2094:7	4	( 1 )
EXPR	2094:7	2094:9	5	( 1 )
LEAF_NODE	2094:7	2094:7	6	(
FIELD	2094:8	2094:8	6	1
LEAF_NODE	2094:8	2094:8	7	1
LEAF_NODE	2094:9	2094:9	6	)
LEAF_NODE	2094:10	2094:10	4	;
LEAF_NODE	2095:0	2095:0	2	}
FUNCTION_DEF	2097:0	2108:0	1	
RETURN_TYPE	2097:0	2097:7	2	static int
LEAF_NODE	2097:0	2097:0	3	static
TYPE_NAME	2097:7	2097:7	3	int
LEAF_NODE	2097:7	2097:7	4	int
FUNCTION_NAME	2098:0	2098:0	2	OJPEGReadBytePeek
LEAF_NODE	2098:0	2098:0	3	OJPEGReadBytePeek
PARAMETER_LIST	2098:17	2098:45	2	( OJPEGState * sp , uint8 * byte )
LEAF_NODE	2098:17	2098:17	3	(
PARAMETER_DECL	2098:18	2098:30	3	OJPEGState * sp
TYPE	2098:18	2098:28	4	OJPEGState *
TYPE_NAME	2098:18	2098:18	5	OJPEGState
LEAF_NODE	2098:18	2098:18	6	OJPEGState
POINTER	2098:28	2098:28	5	*
LEAF_NODE	2098:28	2098:28	6	*
NAME	2098:30	2098:30	4	sp
LEAF_NODE	2098:30	2098:30	5	sp
LEAF_NODE	2098:32	2098:32	3	,
PARAMETER_DECL	2098:34	2098:41	3	uint8 * byte
TYPE	2098:34	2098:39	4	uint8 *
TYPE_NAME	2098:34	2098:34	5	uint8
LEAF_NODE	2098:34	2098:34	6	uint8
POINTER	2098:39	2098:39	5	*
LEAF_NODE	2098:39	2098:39	6	*
NAME	2098:41	2098:41	4	byte
LEAF_NODE	2098:41	2098:41	5	byte
LEAF_NODE	2098:45	2098:45	3	)
LEAF_NODE	2099:0	2099:0	2	{
STATEMENTS	2100:1	2107:1	2	
SELECTION	2100:1	2101:1	3	
KEYWORD	2100:1	2100:1	4	if
LEAF_NODE	2100:1	2100:1	5	if
LEAF_NODE	2100:4	2100:4	4	(
CONDITION	2100:5	2100:5	4	sp -> in_buffer_togo == 0
EXPR	2100:5	2100:25	5	sp -> in_buffer_togo == 0
FIELD	2100:5	2100:9	6	sp -> in_buffer_togo
LEAF_NODE	2100:5	2100:5	7	sp
LEAF_NODE	2100:7	2100:7	7	->
LEAF_NODE	2100:9	2100:9	7	in_buffer_togo
EQ_OPERATOR	2100:23	2100:23	6	==
LEAF_NODE	2100:23	2100:23	7	==
FIELD	2100:25	2100:25	6	0
LEAF_NODE	2100:25	2100:25	7	0
LEAF_NODE	2100:26	2100:26	4	)
STATEMENTS	2101:1	2105:1	4	
LEAF_NODE	2101:1	2101:1	5	{
STATEMENTS	2102:2	2104:2	5	
SELECTION	2102:2	2103:3	6	
KEYWORD	2102:2	2102:2	7	if
LEAF_NODE	2102:2	2102:2	8	if
LEAF_NODE	2102:5	2102:5	7	(
CONDITION	2102:6	2102:6	7	OJPEGReadBufferFill ( sp ) == 0
EXPR	2102:6	2102:31	8	OJPEGReadBufferFill ( sp ) == 0
FUNCTION_CALL	2102:6	2102:28	9	OJPEGReadBufferFill ( sp )
CALLEE	2102:6	2102:6	10	OJPEGReadBufferFill
LEAF_NODE	2102:6	2102:6	11	OJPEGReadBufferFill
LEAF_NODE	2102:25	2102:25	10	(
ARGUMENT	2102:26	2102:26	10	sp
FIELD	2102:26	2102:26	11	sp
LEAF_NODE	2102:26	2102:26	12	sp
LEAF_NODE	2102:28	2102:28	10	)
EQ_OPERATOR	2102:29	2102:29	9	==
LEAF_NODE	2102:29	2102:29	10	==
FIELD	2102:31	2102:31	9	0
LEAF_NODE	2102:31	2102:31	10	0
LEAF_NODE	2102:32	2102:32	7	)
STATEMENTS	2103:3	2103:3	7	
JUMP_STATEMENT	2103:3	2103:12	8	return ( 0 ) ;
KEYWORD	2103:3	2103:3	9	return
LEAF_NODE	2103:3	2103:3	10	return
DESTINATION	2103:9	2103:9	9	( 0 )
EXPR	2103:9	2103:11	10	( 0 )
LEAF_NODE	2103:9	2103:9	11	(
FIELD	2103:10	2103:10	11	0
LEAF_NODE	2103:10	2103:10	12	0
LEAF_NODE	2103:11	2103:11	11	)
LEAF_NODE	2103:12	2103:12	9	;
EXPR_STATEMENT	2104:2	2104:30	6	assert ( sp -> in_buffer_togo > 0 ) ;
EXPR	2104:2	2104:2	7	assert ( sp -> in_buffer_togo > 0 )
FUNCTION_CALL	2104:2	2104:29	8	assert ( sp -> in_buffer_togo > 0 )
CALLEE	2104:2	2104:2	9	assert
LEAF_NODE	2104:2	2104:2	10	assert
LEAF_NODE	2104:8	2104:8	9	(
ARGUMENT	2104:9	2104:28	9	sp -> in_buffer_togo > 0
FIELD	2104:9	2104:13	10	sp -> in_buffer_togo
LEAF_NODE	2104:9	2104:9	11	sp
LEAF_NODE	2104:11	2104:11	11	->
LEAF_NODE	2104:13	2104:13	11	in_buffer_togo
REL_OPERATOR	2104:27	2104:27	10	>
LEAF_NODE	2104:27	2104:27	11	>
FIELD	2104:28	2104:28	10	0
LEAF_NODE	2104:28	2104:28	11	0
LEAF_NODE	2104:29	2104:29	9	)
LEAF_NODE	2104:30	2104:30	7	;
LEAF_NODE	2105:1	2105:1	5	}
EXPR_STATEMENT	2106:1	2106:27	3	* byte = * ( sp -> in_buffer_cur ) ;
EXPR	2106:1	2106:1	4	* byte = * ( sp -> in_buffer_cur )
ASSIGN	2106:1	2106:7	5	* byte = * ( sp -> in_buffer_cur )
LVAL	2106:1	2106:1	6	* byte
UNARY_EXPR	2106:1	2106:2	7	* byte
UNARY_OPERATOR	2106:1	2106:1	8	*
LEAF_NODE	2106:1	2106:1	9	*
FIELD	2106:2	2106:2	8	byte
LEAF_NODE	2106:2	2106:2	9	byte
ASSIGN_OP	2106:6	2106:6	6	=
LEAF_NODE	2106:6	2106:6	7	=
RVAL	2106:7	2106:7	6	* ( sp -> in_buffer_cur )
UNARY_EXPR	2106:7	2106:26	7	* ( sp -> in_buffer_cur )
UNARY_OPERATOR	2106:7	2106:7	8	*
LEAF_NODE	2106:7	2106:7	9	*
LEAF_NODE	2106:8	2106:8	8	(
FIELD	2106:9	2106:13	8	sp -> in_buffer_cur
LEAF_NODE	2106:9	2106:9	9	sp
LEAF_NODE	2106:11	2106:11	9	->
LEAF_NODE	2106:13	2106:13	9	in_buffer_cur
LEAF_NODE	2106:26	2106:26	8	)
LEAF_NODE	2106:27	2106:27	4	;
JUMP_STATEMENT	2107:1	2107:10	3	return ( 1 ) ;
KEYWORD	2107:1	2107:1	4	return
LEAF_NODE	2107:1	2107:1	5	return
DESTINATION	2107:7	2107:7	4	( 1 )
EXPR	2107:7	2107:9	5	( 1 )
LEAF_NODE	2107:7	2107:7	6	(
FIELD	2107:8	2107:8	6	1
LEAF_NODE	2107:8	2107:8	7	1
LEAF_NODE	2107:9	2107:9	6	)
LEAF_NODE	2107:10	2107:10	4	;
LEAF_NODE	2108:0	2108:0	2	}
FUNCTION_DEF	2110:0	2116:0	1	
RETURN_TYPE	2110:0	2110:7	2	static void
LEAF_NODE	2110:0	2110:0	3	static
TYPE_NAME	2110:7	2110:7	3	void
LEAF_NODE	2110:7	2110:7	4	void
FUNCTION_NAME	2111:0	2111:0	2	OJPEGReadByteAdvance
LEAF_NODE	2111:0	2111:0	3	OJPEGReadByteAdvance
PARAMETER_LIST	2111:20	2111:35	2	( OJPEGState * sp )
LEAF_NODE	2111:20	2111:20	3	(
PARAMETER_DECL	2111:21	2111:33	3	OJPEGState * sp
TYPE	2111:21	2111:31	4	OJPEGState *
TYPE_NAME	2111:21	2111:21	5	OJPEGState
LEAF_NODE	2111:21	2111:21	6	OJPEGState
POINTER	2111:31	2111:31	5	*
LEAF_NODE	2111:31	2111:31	6	*
NAME	2111:33	2111:33	4	sp
LEAF_NODE	2111:33	2111:33	5	sp
LEAF_NODE	2111:35	2111:35	3	)
LEAF_NODE	2112:0	2112:0	2	{
STATEMENTS	2113:1	2115:1	2	
EXPR_STATEMENT	2113:1	2113:29	3	assert ( sp -> in_buffer_togo > 0 ) ;
EXPR	2113:1	2113:1	4	assert ( sp -> in_buffer_togo > 0 )
FUNCTION_CALL	2113:1	2113:28	5	assert ( sp -> in_buffer_togo > 0 )
CALLEE	2113:1	2113:1	6	assert
LEAF_NODE	2113:1	2113:1	7	assert
LEAF_NODE	2113:7	2113:7	6	(
ARGUMENT	2113:8	2113:27	6	sp -> in_buffer_togo > 0
FIELD	2113:8	2113:12	7	sp -> in_buffer_togo
LEAF_NODE	2113:8	2113:8	8	sp
LEAF_NODE	2113:10	2113:10	8	->
LEAF_NODE	2113:12	2113:12	8	in_buffer_togo
REL_OPERATOR	2113:26	2113:26	7	>
LEAF_NODE	2113:26	2113:26	8	>
FIELD	2113:27	2113:27	7	0
LEAF_NODE	2113:27	2113:27	8	0
LEAF_NODE	2113:28	2113:28	6	)
LEAF_NODE	2113:29	2113:29	4	;
EXPR_STATEMENT	2114:1	2114:20	3	sp -> in_buffer_cur ++ ;
EXPR	2114:1	2114:1	4	sp -> in_buffer_cur ++
FIELD	2114:1	2114:18	5	sp -> in_buffer_cur ++
LEAF_NODE	2114:1	2114:1	6	sp
LEAF_NODE	2114:3	2114:3	6	->
LEAF_NODE	2114:5	2114:5	6	in_buffer_cur
LEAF_NODE	2114:18	2114:18	6	++
LEAF_NODE	2114:20	2114:20	4	;
EXPR_STATEMENT	2115:1	2115:21	3	sp -> in_buffer_togo -- ;
EXPR	2115:1	2115:1	4	sp -> in_buffer_togo --
FIELD	2115:1	2115:19	5	sp -> in_buffer_togo --
LEAF_NODE	2115:1	2115:1	6	sp
LEAF_NODE	2115:3	2115:3	6	->
LEAF_NODE	2115:5	2115:5	6	in_buffer_togo
LEAF_NODE	2115:19	2115:19	6	--
LEAF_NODE	2115:21	2115:21	4	;
LEAF_NODE	2116:0	2116:0	2	}
FUNCTION_DEF	2118:0	2129:0	1	
RETURN_TYPE	2118:0	2118:7	2	static int
LEAF_NODE	2118:0	2118:0	3	static
TYPE_NAME	2118:7	2118:7	3	int
LEAF_NODE	2118:7	2118:7	4	int
FUNCTION_NAME	2119:0	2119:0	2	OJPEGReadWord
LEAF_NODE	2119:0	2119:0	3	OJPEGReadWord
PARAMETER_LIST	2119:13	2119:42	2	( OJPEGState * sp , uint16 * word )
LEAF_NODE	2119:13	2119:13	3	(
PARAMETER_DECL	2119:14	2119:26	3	OJPEGState * sp
TYPE	2119:14	2119:24	4	OJPEGState *
TYPE_NAME	2119:14	2119:14	5	OJPEGState
LEAF_NODE	2119:14	2119:14	6	OJPEGState
POINTER	2119:24	2119:24	5	*
LEAF_NODE	2119:24	2119:24	6	*
NAME	2119:26	2119:26	4	sp
LEAF_NODE	2119:26	2119:26	5	sp
LEAF_NODE	2119:28	2119:28	3	,
PARAMETER_DECL	2119:30	2119:38	3	uint16 * word
TYPE	2119:30	2119:36	4	uint16 *
TYPE_NAME	2119:30	2119:30	5	uint16
LEAF_NODE	2119:30	2119:30	6	uint16
POINTER	2119:36	2119:36	5	*
LEAF_NODE	2119:36	2119:36	6	*
NAME	2119:38	2119:38	4	word
LEAF_NODE	2119:38	2119:38	5	word
LEAF_NODE	2119:42	2119:42	3	)
LEAF_NODE	2120:0	2120:0	2	{
STATEMENTS	2121:1	2128:1	2	
SIMPLE_DECL	2121:1	2121:8	3	uint8 m ;
VAR_DECL	2121:1	2121:7	4	uint8 m
TYPE	2121:1	2121:1	5	uint8
TYPE_NAME	2121:1	2121:1	6	uint8
LEAF_NODE	2121:1	2121:1	7	uint8
NAME	2121:7	2121:7	5	m
LEAF_NODE	2121:7	2121:7	6	m
LEAF_NODE	2121:8	2121:8	4	;
SELECTION	2122:1	2123:2	3	
KEYWORD	2122:1	2122:1	4	if
LEAF_NODE	2122:1	2122:1	5	if
LEAF_NODE	2122:4	2122:4	4	(
CONDITION	2122:5	2122:5	4	OJPEGReadByte ( sp , & m ) == 0
EXPR	2122:5	2122:27	5	OJPEGReadByte ( sp , & m ) == 0
FUNCTION_CALL	2122:5	2122:24	6	OJPEGReadByte ( sp , & m )
CALLEE	2122:5	2122:5	7	OJPEGReadByte
LEAF_NODE	2122:5	2122:5	8	OJPEGReadByte
LEAF_NODE	2122:18	2122:18	7	(
ARGUMENT	2122:19	2122:19	7	sp
FIELD	2122:19	2122:19	8	sp
LEAF_NODE	2122:19	2122:19	9	sp
LEAF_NODE	2122:21	2122:21	7	,
ARGUMENT	2122:22	2122:22	7	& m
UNARY_EXPR	2122:22	2122:23	8	& m
UNARY_OPERATOR	2122:22	2122:22	9	&
LEAF_NODE	2122:22	2122:22	10	&
FIELD	2122:23	2122:23	9	m
LEAF_NODE	2122:23	2122:23	10	m
LEAF_NODE	2122:24	2122:24	7	)
EQ_OPERATOR	2122:25	2122:25	6	==
LEAF_NODE	2122:25	2122:25	7	==
FIELD	2122:27	2122:27	6	0
LEAF_NODE	2122:27	2122:27	7	0
LEAF_NODE	2122:28	2122:28	4	)
STATEMENTS	2123:2	2123:2	4	
JUMP_STATEMENT	2123:2	2123:11	5	return ( 0 ) ;
KEYWORD	2123:2	2123:2	6	return
LEAF_NODE	2123:2	2123:2	7	return
DESTINATION	2123:8	2123:8	6	( 0 )
EXPR	2123:8	2123:10	7	( 0 )
LEAF_NODE	2123:8	2123:8	8	(
FIELD	2123:9	2123:9	8	0
LEAF_NODE	2123:9	2123:9	9	0
LEAF_NODE	2123:10	2123:10	8	)
LEAF_NODE	2123:11	2123:11	6	;
EXPR_STATEMENT	2124:1	2124:13	3	* word = ( m << 8 ) ;
EXPR	2124:1	2124:1	4	* word = ( m << 8 )
ASSIGN	2124:1	2124:7	5	* word = ( m << 8 )
LVAL	2124:1	2124:1	6	* word
UNARY_EXPR	2124:1	2124:2	7	* word
UNARY_OPERATOR	2124:1	2124:1	8	*
LEAF_NODE	2124:1	2124:1	9	*
FIELD	2124:2	2124:2	8	word
LEAF_NODE	2124:2	2124:2	9	word
ASSIGN_OP	2124:6	2124:6	6	=
LEAF_NODE	2124:6	2124:6	7	=
RVAL	2124:7	2124:12	6	( m << 8 )
LEAF_NODE	2124:7	2124:7	7	(
FIELD	2124:8	2124:8	7	m
LEAF_NODE	2124:8	2124:8	8	m
LEAF_NODE	2124:9	2124:9	7	<<
FIELD	2124:11	2124:11	7	8
LEAF_NODE	2124:11	2124:11	8	8
LEAF_NODE	2124:12	2124:12	7	)
LEAF_NODE	2124:13	2124:13	4	;
SELECTION	2125:1	2126:2	3	
KEYWORD	2125:1	2125:1	4	if
LEAF_NODE	2125:1	2125:1	5	if
LEAF_NODE	2125:4	2125:4	4	(
CONDITION	2125:5	2125:5	4	OJPEGReadByte ( sp , & m ) == 0
EXPR	2125:5	2125:27	5	OJPEGReadByte ( sp , & m ) == 0
FUNCTION_CALL	2125:5	2125:24	6	OJPEGReadByte ( sp , & m )
CALLEE	2125:5	2125:5	7	OJPEGReadByte
LEAF_NODE	2125:5	2125:5	8	OJPEGReadByte
LEAF_NODE	2125:18	2125:18	7	(
ARGUMENT	2125:19	2125:19	7	sp
FIELD	2125:19	2125:19	8	sp
LEAF_NODE	2125:19	2125:19	9	sp
LEAF_NODE	2125:21	2125:21	7	,
ARGUMENT	2125:22	2125:22	7	& m
UNARY_EXPR	2125:22	2125:23	8	& m
UNARY_OPERATOR	2125:22	2125:22	9	&
LEAF_NODE	2125:22	2125:22	10	&
FIELD	2125:23	2125:23	9	m
LEAF_NODE	2125:23	2125:23	10	m
LEAF_NODE	2125:24	2125:24	7	)
EQ_OPERATOR	2125:25	2125:25	6	==
LEAF_NODE	2125:25	2125:25	7	==
FIELD	2125:27	2125:27	6	0
LEAF_NODE	2125:27	2125:27	7	0
LEAF_NODE	2125:28	2125:28	4	)
STATEMENTS	2126:2	2126:2	4	
JUMP_STATEMENT	2126:2	2126:11	5	return ( 0 ) ;
KEYWORD	2126:2	2126:2	6	return
LEAF_NODE	2126:2	2126:2	7	return
DESTINATION	2126:8	2126:8	6	( 0 )
EXPR	2126:8	2126:10	7	( 0 )
LEAF_NODE	2126:8	2126:8	8	(
FIELD	2126:9	2126:9	8	0
LEAF_NODE	2126:9	2126:9	9	0
LEAF_NODE	2126:10	2126:10	8	)
LEAF_NODE	2126:11	2126:11	6	;
EXPR_STATEMENT	2127:1	2127:9	3	* word |= m ;
EXPR	2127:1	2127:1	4	* word |= m
ASSIGN	2127:1	2127:8	5	* word |= m
LVAL	2127:1	2127:1	6	* word
UNARY_EXPR	2127:1	2127:2	7	* word
UNARY_OPERATOR	2127:1	2127:1	8	*
LEAF_NODE	2127:1	2127:1	9	*
FIELD	2127:2	2127:2	8	word
LEAF_NODE	2127:2	2127:2	9	word
ASSIGN_OP	2127:6	2127:6	6	|=
LEAF_NODE	2127:6	2127:6	7	|=
RVAL	2127:8	2127:8	6	m
FIELD	2127:8	2127:8	7	m
LEAF_NODE	2127:8	2127:8	8	m
LEAF_NODE	2127:9	2127:9	4	;
JUMP_STATEMENT	2128:1	2128:10	3	return ( 1 ) ;
KEYWORD	2128:1	2128:1	4	return
LEAF_NODE	2128:1	2128:1	5	return
DESTINATION	2128:7	2128:7	4	( 1 )
EXPR	2128:7	2128:9	5	( 1 )
LEAF_NODE	2128:7	2128:7	6	(
FIELD	2128:8	2128:8	6	1
LEAF_NODE	2128:8	2128:8	7	1
LEAF_NODE	2128:9	2128:9	6	)
LEAF_NODE	2128:10	2128:10	4	;
LEAF_NODE	2129:0	2129:0	2	}
FUNCTION_DEF	2131:0	2158:0	1	
RETURN_TYPE	2131:0	2131:7	2	static int
LEAF_NODE	2131:0	2131:0	3	static
TYPE_NAME	2131:7	2131:7	3	int
LEAF_NODE	2131:7	2131:7	4	int
FUNCTION_NAME	2132:0	2132:0	2	OJPEGReadBlock
LEAF_NODE	2132:0	2132:0	3	OJPEGReadBlock
PARAMETER_LIST	2132:14	2132:52	2	( OJPEGState * sp , uint16 len , void * mem )
LEAF_NODE	2132:14	2132:14	3	(
PARAMETER_DECL	2132:15	2132:27	3	OJPEGState * sp
TYPE	2132:15	2132:25	4	OJPEGState *
TYPE_NAME	2132:15	2132:15	5	OJPEGState
LEAF_NODE	2132:15	2132:15	6	OJPEGState
POINTER	2132:25	2132:25	5	*
LEAF_NODE	2132:25	2132:25	6	*
NAME	2132:27	2132:27	4	sp
LEAF_NODE	2132:27	2132:27	5	sp
LEAF_NODE	2132:29	2132:29	3	,
PARAMETER_DECL	2132:31	2132:38	3	uint16 len
TYPE	2132:31	2132:31	4	uint16
TYPE_NAME	2132:31	2132:31	5	uint16
LEAF_NODE	2132:31	2132:31	6	uint16
NAME	2132:38	2132:38	4	len
LEAF_NODE	2132:38	2132:38	5	len
LEAF_NODE	2132:41	2132:41	3	,
PARAMETER_DECL	2132:43	2132:49	3	void * mem
TYPE	2132:43	2132:47	4	void *
TYPE_NAME	2132:43	2132:43	5	void
LEAF_NODE	2132:43	2132:43	6	void
POINTER	2132:47	2132:47	5	*
LEAF_NODE	2132:47	2132:47	6	*
NAME	2132:49	2132:49	4	mem
LEAF_NODE	2132:49	2132:49	5	mem
LEAF_NODE	2132:52	2132:52	3	)
LEAF_NODE	2133:0	2133:0	2	{
STATEMENTS	2134:1	2157:1	2	
SIMPLE_DECL	2134:1	2134:12	3	uint16 mlen ;
VAR_DECL	2134:1	2134:8	4	uint16 mlen
TYPE	2134:1	2134:1	5	uint16
TYPE_NAME	2134:1	2134:1	6	uint16
LEAF_NODE	2134:1	2134:1	7	uint16
NAME	2134:8	2134:8	5	mlen
LEAF_NODE	2134:8	2134:8	6	mlen
LEAF_NODE	2134:12	2134:12	4	;
SIMPLE_DECL	2135:1	2135:12	3	uint8 * mmem ;
VAR_DECL	2135:1	2135:8	4	uint8 * mmem
TYPE	2135:1	2135:6	5	uint8 *
TYPE_NAME	2135:1	2135:1	6	uint8
LEAF_NODE	2135:1	2135:1	7	uint8
POINTER	2135:6	2135:6	6	*
LEAF_NODE	2135:6	2135:6	7	*
NAME	2135:8	2135:8	5	mmem
LEAF_NODE	2135:8	2135:8	6	mmem
LEAF_NODE	2135:12	2135:12	4	;
SIMPLE_DECL	2136:1	2136:9	3	uint16 n ;
VAR_DECL	2136:1	2136:8	4	uint16 n
TYPE	2136:1	2136:1	5	uint16
TYPE_NAME	2136:1	2136:1	6	uint16
LEAF_NODE	2136:1	2136:1	7	uint16
NAME	2136:8	2136:8	5	n
LEAF_NODE	2136:8	2136:8	6	n
LEAF_NODE	2136:9	2136:9	4	;
EXPR_STATEMENT	2137:1	2137:14	3	assert ( len > 0 ) ;
EXPR	2137:1	2137:1	4	assert ( len > 0 )
FUNCTION_CALL	2137:1	2137:13	5	assert ( len > 0 )
CALLEE	2137:1	2137:1	6	assert
LEAF_NODE	2137:1	2137:1	7	assert
LEAF_NODE	2137:7	2137:7	6	(
ARGUMENT	2137:8	2137:12	6	len > 0
FIELD	2137:8	2137:8	7	len
LEAF_NODE	2137:8	2137:8	8	len
REL_OPERATOR	2137:11	2137:11	7	>
LEAF_NODE	2137:11	2137:11	8	>
FIELD	2137:12	2137:12	7	0
LEAF_NODE	2137:12	2137:12	8	0
LEAF_NODE	2137:13	2137:13	6	)
LEAF_NODE	2137:14	2137:14	4	;
EXPR_STATEMENT	2138:1	2138:9	3	mlen = len ;
EXPR	2138:1	2138:1	4	mlen = len
ASSIGN	2138:1	2138:6	5	mlen = len
LVAL	2138:1	2138:1	6	mlen
FIELD	2138:1	2138:1	7	mlen
LEAF_NODE	2138:1	2138:1	8	mlen
ASSIGN_OP	2138:5	2138:5	6	=
LEAF_NODE	2138:5	2138:5	7	=
RVAL	2138:6	2138:6	6	len
FIELD	2138:6	2138:6	7	len
LEAF_NODE	2138:6	2138:6	8	len
LEAF_NODE	2138:9	2138:9	4	;
EXPR_STATEMENT	2139:1	2139:9	3	mmem = mem ;
EXPR	2139:1	2139:1	4	mmem = mem
ASSIGN	2139:1	2139:6	5	mmem = mem
LVAL	2139:1	2139:1	6	mmem
FIELD	2139:1	2139:1	7	mmem
LEAF_NODE	2139:1	2139:1	8	mmem
ASSIGN_OP	2139:5	2139:5	6	=
LEAF_NODE	2139:5	2139:5	7	=
RVAL	2139:6	2139:6	6	mem
FIELD	2139:6	2139:6	7	mem
LEAF_NODE	2139:6	2139:6	8	mem
LEAF_NODE	2139:9	2139:9	4	;
ITERATION	2140:1	2141:1	3	
KEYWORD	2140:1	2140:1	4	do
LEAF_NODE	2140:1	2140:1	5	do
LEAF_NODE	2156:8	2156:8	4	(
CONDITION	2156:9	2156:9	4	mlen > 0
EXPR	2156:9	2156:14	5	mlen > 0
FIELD	2156:9	2156:9	6	mlen
LEAF_NODE	2156:9	2156:9	7	mlen
REL_OPERATOR	2156:13	2156:13	6	>
LEAF_NODE	2156:13	2156:13	7	>
FIELD	2156:14	2156:14	6	0
LEAF_NODE	2156:14	2156:14	7	0
LEAF_NODE	2156:15	2156:15	4	)
STATEMENTS	2141:1	2156:1	4	
LEAF_NODE	2141:1	2141:1	5	{
STATEMENTS	2142:2	2155:2	5	
SELECTION	2142:2	2143:2	6	
KEYWORD	2142:2	2142:2	7	if
LEAF_NODE	2142:2	2142:2	8	if
LEAF_NODE	2142:5	2142:5	7	(
CONDITION	2142:6	2142:6	7	sp -> in_buffer_togo == 0
EXPR	2142:6	2142:26	8	sp -> in_buffer_togo == 0
FIELD	2142:6	2142:10	9	sp -> in_buffer_togo
LEAF_NODE	2142:6	2142:6	10	sp
LEAF_NODE	2142:8	2142:8	10	->
LEAF_NODE	2142:10	2142:10	10	in_buffer_togo
EQ_OPERATOR	2142:24	2142:24	9	==
LEAF_NODE	2142:24	2142:24	10	==
FIELD	2142:26	2142:26	9	0
LEAF_NODE	2142:26	2142:26	10	0
LEAF_NODE	2142:27	2142:27	7	)
STATEMENTS	2143:2	2147:2	7	
LEAF_NODE	2143:2	2143:2	8	{
STATEMENTS	2144:3	2146:3	8	
SELECTION	2144:3	2145:4	9	
KEYWORD	2144:3	2144:3	10	if
LEAF_NODE	2144:3	2144:3	11	if
LEAF_NODE	2144:6	2144:6	10	(
CONDITION	2144:7	2144:7	10	OJPEGReadBufferFill ( sp ) == 0
EXPR	2144:7	2144:32	11	OJPEGReadBufferFill ( sp ) == 0
FUNCTION_CALL	2144:7	2144:29	12	OJPEGReadBufferFill ( sp )
CALLEE	2144:7	2144:7	13	OJPEGReadBufferFill
LEAF_NODE	2144:7	2144:7	14	OJPEGReadBufferFill
LEAF_NODE	2144:26	2144:26	13	(
ARGUMENT	2144:27	2144:27	13	sp
FIELD	2144:27	2144:27	14	sp
LEAF_NODE	2144:27	2144:27	15	sp
LEAF_NODE	2144:29	2144:29	13	)
EQ_OPERATOR	2144:30	2144:30	12	==
LEAF_NODE	2144:30	2144:30	13	==
FIELD	2144:32	2144:32	12	0
LEAF_NODE	2144:32	2144:32	13	0
LEAF_NODE	2144:33	2144:33	10	)
STATEMENTS	2145:4	2145:4	10	
JUMP_STATEMENT	2145:4	2145:13	11	return ( 0 ) ;
KEYWORD	2145:4	2145:4	12	return
LEAF_NODE	2145:4	2145:4	13	return
DESTINATION	2145:10	2145:10	12	( 0 )
EXPR	2145:10	2145:12	13	( 0 )
LEAF_NODE	2145:10	2145:10	14	(
FIELD	2145:11	2145:11	14	0
LEAF_NODE	2145:11	2145:11	15	0
LEAF_NODE	2145:12	2145:12	14	)
LEAF_NODE	2145:13	2145:13	12	;
EXPR_STATEMENT	2146:3	2146:31	9	assert ( sp -> in_buffer_togo > 0 ) ;
EXPR	2146:3	2146:3	10	assert ( sp -> in_buffer_togo > 0 )
FUNCTION_CALL	2146:3	2146:30	11	assert ( sp -> in_buffer_togo > 0 )
CALLEE	2146:3	2146:3	12	assert
LEAF_NODE	2146:3	2146:3	13	assert
LEAF_NODE	2146:9	2146:9	12	(
ARGUMENT	2146:10	2146:29	12	sp -> in_buffer_togo > 0
FIELD	2146:10	2146:14	13	sp -> in_buffer_togo
LEAF_NODE	2146:10	2146:10	14	sp
LEAF_NODE	2146:12	2146:12	14	->
LEAF_NODE	2146:14	2146:14	14	in_buffer_togo
REL_OPERATOR	2146:28	2146:28	13	>
LEAF_NODE	2146:28	2146:28	14	>
FIELD	2146:29	2146:29	13	0
LEAF_NODE	2146:29	2146:29	14	0
LEAF_NODE	2146:30	2146:30	12	)
LEAF_NODE	2146:31	2146:31	10	;
LEAF_NODE	2147:2	2147:2	8	}
EXPR_STATEMENT	2148:2	2148:8	6	n = mlen ;
EXPR	2148:2	2148:2	7	n = mlen
ASSIGN	2148:2	2148:4	8	n = mlen
LVAL	2148:2	2148:2	9	n
FIELD	2148:2	2148:2	10	n
LEAF_NODE	2148:2	2148:2	11	n
ASSIGN_OP	2148:3	2148:3	9	=
LEAF_NODE	2148:3	2148:3	10	=
RVAL	2148:4	2148:4	9	mlen
FIELD	2148:4	2148:4	10	mlen
LEAF_NODE	2148:4	2148:4	11	mlen
LEAF_NODE	2148:8	2148:8	7	;
SELECTION	2149:2	2150:3	6	
KEYWORD	2149:2	2149:2	7	if
LEAF_NODE	2149:2	2149:2	8	if
LEAF_NODE	2149:5	2149:5	7	(
CONDITION	2149:6	2149:6	7	n > sp -> in_buffer_togo
EXPR	2149:6	2149:8	8	n > sp -> in_buffer_togo
FIELD	2149:6	2149:6	9	n
LEAF_NODE	2149:6	2149:6	10	n
REL_OPERATOR	2149:7	2149:7	9	>
LEAF_NODE	2149:7	2149:7	10	>
FIELD	2149:8	2149:12	9	sp -> in_buffer_togo
LEAF_NODE	2149:8	2149:8	10	sp
LEAF_NODE	2149:10	2149:10	10	->
LEAF_NODE	2149:12	2149:12	10	in_buffer_togo
LEAF_NODE	2149:26	2149:26	7	)
STATEMENTS	2150:3	2150:3	7	
EXPR_STATEMENT	2150:3	2150:23	8	n = sp -> in_buffer_togo ;
EXPR	2150:3	2150:3	9	n = sp -> in_buffer_togo
ASSIGN	2150:3	2150:5	10	n = sp -> in_buffer_togo
LVAL	2150:3	2150:3	11	n
FIELD	2150:3	2150:3	12	n
LEAF_NODE	2150:3	2150:3	13	n
ASSIGN_OP	2150:4	2150:4	11	=
LEAF_NODE	2150:4	2150:4	12	=
RVAL	2150:5	2150:5	11	sp -> in_buffer_togo
FIELD	2150:5	2150:9	12	sp -> in_buffer_togo
LEAF_NODE	2150:5	2150:5	13	sp
LEAF_NODE	2150:7	2150:7	13	->
LEAF_NODE	2150:9	2150:9	13	in_buffer_togo
LEAF_NODE	2150:23	2150:23	9	;
EXPR_STATEMENT	2151:2	2151:39	6	_TIFFmemcpy ( mmem , sp -> in_buffer_cur , n ) ;
EXPR	2151:2	2151:2	7	_TIFFmemcpy ( mmem , sp -> in_buffer_cur , n )
FUNCTION_CALL	2151:2	2151:38	8	_TIFFmemcpy ( mmem , sp -> in_buffer_cur , n )
CALLEE	2151:2	2151:2	9	_TIFFmemcpy
LEAF_NODE	2151:2	2151:2	10	_TIFFmemcpy
LEAF_NODE	2151:13	2151:13	9	(
ARGUMENT	2151:14	2151:14	9	mmem
FIELD	2151:14	2151:14	10	mmem
LEAF_NODE	2151:14	2151:14	11	mmem
LEAF_NODE	2151:18	2151:18	9	,
ARGUMENT	2151:19	2151:19	9	sp -> in_buffer_cur
FIELD	2151:19	2151:23	10	sp -> in_buffer_cur
LEAF_NODE	2151:19	2151:19	11	sp
LEAF_NODE	2151:21	2151:21	11	->
LEAF_NODE	2151:23	2151:23	11	in_buffer_cur
LEAF_NODE	2151:36	2151:36	9	,
ARGUMENT	2151:37	2151:37	9	n
FIELD	2151:37	2151:37	10	n
LEAF_NODE	2151:37	2151:37	11	n
LEAF_NODE	2151:38	2151:38	9	)
LEAF_NODE	2151:39	2151:39	7	;
EXPR_STATEMENT	2152:2	2152:22	6	sp -> in_buffer_cur += n ;
EXPR	2152:2	2152:2	7	sp -> in_buffer_cur += n
ASSIGN	2152:2	2152:21	8	sp -> in_buffer_cur += n
LVAL	2152:2	2152:2	9	sp -> in_buffer_cur
FIELD	2152:2	2152:6	10	sp -> in_buffer_cur
LEAF_NODE	2152:2	2152:2	11	sp
LEAF_NODE	2152:4	2152:4	11	->
LEAF_NODE	2152:6	2152:6	11	in_buffer_cur
ASSIGN_OP	2152:19	2152:19	9	+=
LEAF_NODE	2152:19	2152:19	10	+=
RVAL	2152:21	2152:21	9	n
FIELD	2152:21	2152:21	10	n
LEAF_NODE	2152:21	2152:21	11	n
LEAF_NODE	2152:22	2152:22	7	;
EXPR_STATEMENT	2153:2	2153:23	6	sp -> in_buffer_togo -= n ;
EXPR	2153:2	2153:2	7	sp -> in_buffer_togo -= n
ASSIGN	2153:2	2153:22	8	sp -> in_buffer_togo -= n
LVAL	2153:2	2153:2	9	sp -> in_buffer_togo
FIELD	2153:2	2153:6	10	sp -> in_buffer_togo
LEAF_NODE	2153:2	2153:2	11	sp
LEAF_NODE	2153:4	2153:4	11	->
LEAF_NODE	2153:6	2153:6	11	in_buffer_togo
ASSIGN_OP	2153:20	2153:20	9	-=
LEAF_NODE	2153:20	2153:20	10	-=
RVAL	2153:22	2153:22	9	n
FIELD	2153:22	2153:22	10	n
LEAF_NODE	2153:22	2153:22	11	n
LEAF_NODE	2153:23	2153:23	7	;
EXPR_STATEMENT	2154:2	2154:9	6	mlen -= n ;
EXPR	2154:2	2154:2	7	mlen -= n
ASSIGN	2154:2	2154:8	8	mlen -= n
LVAL	2154:2	2154:2	9	mlen
FIELD	2154:2	2154:2	10	mlen
LEAF_NODE	2154:2	2154:2	11	mlen
ASSIGN_OP	2154:6	2154:6	9	-=
LEAF_NODE	2154:6	2154:6	10	-=
RVAL	2154:8	2154:8	9	n
FIELD	2154:8	2154:8	10	n
LEAF_NODE	2154:8	2154:8	11	n
LEAF_NODE	2154:9	2154:9	7	;
EXPR_STATEMENT	2155:2	2155:9	6	mmem += n ;
EXPR	2155:2	2155:2	7	mmem += n
ASSIGN	2155:2	2155:8	8	mmem += n
LVAL	2155:2	2155:2	9	mmem
FIELD	2155:2	2155:2	10	mmem
LEAF_NODE	2155:2	2155:2	11	mmem
ASSIGN_OP	2155:6	2155:6	9	+=
LEAF_NODE	2155:6	2155:6	10	+=
RVAL	2155:8	2155:8	9	n
FIELD	2155:8	2155:8	10	n
LEAF_NODE	2155:8	2155:8	11	n
LEAF_NODE	2155:9	2155:9	7	;
LEAF_NODE	2156:1	2156:1	5	}
LEAF_NODE	2156:16	2156:16	3	;
JUMP_STATEMENT	2157:1	2157:10	3	return ( 1 ) ;
KEYWORD	2157:1	2157:1	4	return
LEAF_NODE	2157:1	2157:1	5	return
DESTINATION	2157:7	2157:7	4	( 1 )
EXPR	2157:7	2157:9	5	( 1 )
LEAF_NODE	2157:7	2157:7	6	(
FIELD	2157:8	2157:8	6	1
LEAF_NODE	2157:8	2157:8	7	1
LEAF_NODE	2157:9	2157:9	6	)
LEAF_NODE	2157:10	2157:10	4	;
LEAF_NODE	2158:0	2158:0	2	}
FUNCTION_DEF	2160:0	2188:0	1	
RETURN_TYPE	2160:0	2160:7	2	static void
LEAF_NODE	2160:0	2160:0	3	static
TYPE_NAME	2160:7	2160:7	3	void
LEAF_NODE	2160:7	2160:7	4	void
FUNCTION_NAME	2161:0	2161:0	2	OJPEGReadSkip
LEAF_NODE	2161:0	2161:0	3	OJPEGReadSkip
PARAMETER_LIST	2161:13	2161:40	2	( OJPEGState * sp , uint16 len )
LEAF_NODE	2161:13	2161:13	3	(
PARAMETER_DECL	2161:14	2161:26	3	OJPEGState * sp
TYPE	2161:14	2161:24	4	OJPEGState *
TYPE_NAME	2161:14	2161:14	5	OJPEGState
LEAF_NODE	2161:14	2161:14	6	OJPEGState
POINTER	2161:24	2161:24	5	*
LEAF_NODE	2161:24	2161:24	6	*
NAME	2161:26	2161:26	4	sp
LEAF_NODE	2161:26	2161:26	5	sp
LEAF_NODE	2161:28	2161:28	3	,
PARAMETER_DECL	2161:30	2161:37	3	uint16 len
TYPE	2161:30	2161:30	4	uint16
TYPE_NAME	2161:30	2161:30	5	uint16
LEAF_NODE	2161:30	2161:30	6	uint16
NAME	2161:37	2161:37	4	len
LEAF_NODE	2161:37	2161:37	5	len
LEAF_NODE	2161:40	2161:40	3	)
LEAF_NODE	2162:0	2162:0	2	{
STATEMENTS	2163:1	2172:1	2	
SIMPLE_DECL	2163:1	2163:9	3	uint16 m ;
VAR_DECL	2163:1	2163:8	4	uint16 m
TYPE	2163:1	2163:1	5	uint16
TYPE_NAME	2163:1	2163:1	6	uint16
LEAF_NODE	2163:1	2163:1	7	uint16
NAME	2163:8	2163:8	5	m
LEAF_NODE	2163:8	2163:8	6	m
LEAF_NODE	2163:9	2163:9	4	;
SIMPLE_DECL	2164:1	2164:9	3	uint16 n ;
VAR_DECL	2164:1	2164:8	4	uint16 n
TYPE	2164:1	2164:1	5	uint16
TYPE_NAME	2164:1	2164:1	6	uint16
LEAF_NODE	2164:1	2164:1	7	uint16
NAME	2164:8	2164:8	5	n
LEAF_NODE	2164:8	2164:8	6	n
LEAF_NODE	2164:9	2164:9	4	;
EXPR_STATEMENT	2165:1	2165:6	3	m = len ;
EXPR	2165:1	2165:1	4	m = len
ASSIGN	2165:1	2165:3	5	m = len
LVAL	2165:1	2165:1	6	m
FIELD	2165:1	2165:1	7	m
LEAF_NODE	2165:1	2165:1	8	m
ASSIGN_OP	2165:2	2165:2	6	=
LEAF_NODE	2165:2	2165:2	7	=
RVAL	2165:3	2165:3	6	len
FIELD	2165:3	2165:3	7	len
LEAF_NODE	2165:3	2165:3	8	len
LEAF_NODE	2165:6	2165:6	4	;
EXPR_STATEMENT	2166:1	2166:4	3	n = m ;
EXPR	2166:1	2166:1	4	n = m
ASSIGN	2166:1	2166:3	5	n = m
LVAL	2166:1	2166:1	6	n
FIELD	2166:1	2166:1	7	n
LEAF_NODE	2166:1	2166:1	8	n
ASSIGN_OP	2166:2	2166:2	6	=
LEAF_NODE	2166:2	2166:2	7	=
RVAL	2166:3	2166:3	6	m
FIELD	2166:3	2166:3	7	m
LEAF_NODE	2166:3	2166:3	8	m
LEAF_NODE	2166:4	2166:4	4	;
SELECTION	2167:1	2168:2	3	
KEYWORD	2167:1	2167:1	4	if
LEAF_NODE	2167:1	2167:1	5	if
LEAF_NODE	2167:4	2167:4	4	(
CONDITION	2167:5	2167:5	4	n > sp -> in_buffer_togo
EXPR	2167:5	2167:7	5	n > sp -> in_buffer_togo
FIELD	2167:5	2167:5	6	n
LEAF_NODE	2167:5	2167:5	7	n
REL_OPERATOR	2167:6	2167:6	6	>
LEAF_NODE	2167:6	2167:6	7	>
FIELD	2167:7	2167:11	6	sp -> in_buffer_togo
LEAF_NODE	2167:7	2167:7	7	sp
LEAF_NODE	2167:9	2167:9	7	->
LEAF_NODE	2167:11	2167:11	7	in_buffer_togo
LEAF_NODE	2167:25	2167:25	4	)
STATEMENTS	2168:2	2168:2	4	
EXPR_STATEMENT	2168:2	2168:22	5	n = sp -> in_buffer_togo ;
EXPR	2168:2	2168:2	6	n = sp -> in_buffer_togo
ASSIGN	2168:2	2168:4	7	n = sp -> in_buffer_togo
LVAL	2168:2	2168:2	8	n
FIELD	2168:2	2168:2	9	n
LEAF_NODE	2168:2	2168:2	10	n
ASSIGN_OP	2168:3	2168:3	8	=
LEAF_NODE	2168:3	2168:3	9	=
RVAL	2168:4	2168:4	8	sp -> in_buffer_togo
FIELD	2168:4	2168:8	9	sp -> in_buffer_togo
LEAF_NODE	2168:4	2168:4	10	sp
LEAF_NODE	2168:6	2168:6	10	->
LEAF_NODE	2168:8	2168:8	10	in_buffer_togo
LEAF_NODE	2168:22	2168:22	6	;
EXPR_STATEMENT	2169:1	2169:21	3	sp -> in_buffer_cur += n ;
EXPR	2169:1	2169:1	4	sp -> in_buffer_cur += n
ASSIGN	2169:1	2169:20	5	sp -> in_buffer_cur += n
LVAL	2169:1	2169:1	6	sp -> in_buffer_cur
FIELD	2169:1	2169:5	7	sp -> in_buffer_cur
LEAF_NODE	2169:1	2169:1	8	sp
LEAF_NODE	2169:3	2169:3	8	->
LEAF_NODE	2169:5	2169:5	8	in_buffer_cur
ASSIGN_OP	2169:18	2169:18	6	+=
LEAF_NODE	2169:18	2169:18	7	+=
RVAL	2169:20	2169:20	6	n
FIELD	2169:20	2169:20	7	n
LEAF_NODE	2169:20	2169:20	8	n
LEAF_NODE	2169:21	2169:21	4	;
EXPR_STATEMENT	2170:1	2170:22	3	sp -> in_buffer_togo -= n ;
EXPR	2170:1	2170:1	4	sp -> in_buffer_togo -= n
ASSIGN	2170:1	2170:21	5	sp -> in_buffer_togo -= n
LVAL	2170:1	2170:1	6	sp -> in_buffer_togo
FIELD	2170:1	2170:5	7	sp -> in_buffer_togo
LEAF_NODE	2170:1	2170:1	8	sp
LEAF_NODE	2170:3	2170:3	8	->
LEAF_NODE	2170:5	2170:5	8	in_buffer_togo
ASSIGN_OP	2170:19	2170:19	6	-=
LEAF_NODE	2170:19	2170:19	7	-=
RVAL	2170:21	2170:21	6	n
FIELD	2170:21	2170:21	7	n
LEAF_NODE	2170:21	2170:21	8	n
LEAF_NODE	2170:22	2170:22	4	;
EXPR_STATEMENT	2171:1	2171:5	3	m -= n ;
EXPR	2171:1	2171:1	4	m -= n
ASSIGN	2171:1	2171:4	5	m -= n
LVAL	2171:1	2171:1	6	m
FIELD	2171:1	2171:1	7	m
LEAF_NODE	2171:1	2171:1	8	m
ASSIGN_OP	2171:2	2171:2	6	-=
LEAF_NODE	2171:2	2171:2	7	-=
RVAL	2171:4	2171:4	6	n
FIELD	2171:4	2171:4	7	n
LEAF_NODE	2171:4	2171:4	8	n
LEAF_NODE	2171:5	2171:5	4	;
SELECTION	2172:1	2173:1	3	
KEYWORD	2172:1	2172:1	4	if
LEAF_NODE	2172:1	2172:1	5	if
LEAF_NODE	2172:4	2172:4	4	(
CONDITION	2172:5	2172:5	4	m > 0
EXPR	2172:5	2172:7	5	m > 0
FIELD	2172:5	2172:5	6	m
LEAF_NODE	2172:5	2172:5	7	m
REL_OPERATOR	2172:6	2172:6	6	>
LEAF_NODE	2172:6	2172:6	7	>
FIELD	2172:7	2172:7	6	0
LEAF_NODE	2172:7	2172:7	7	0
LEAF_NODE	2172:8	2172:8	4	)
STATEMENTS	2173:1	2187:1	4	
LEAF_NODE	2173:1	2173:1	5	{
STATEMENTS	2174:2	2180:2	5	
EXPR_STATEMENT	2174:2	2174:31	6	assert ( sp -> in_buffer_togo == 0 ) ;
EXPR	2174:2	2174:2	7	assert ( sp -> in_buffer_togo == 0 )
FUNCTION_CALL	2174:2	2174:30	8	assert ( sp -> in_buffer_togo == 0 )
CALLEE	2174:2	2174:2	9	assert
LEAF_NODE	2174:2	2174:2	10	assert
LEAF_NODE	2174:8	2174:8	9	(
ARGUMENT	2174:9	2174:29	9	sp -> in_buffer_togo == 0
FIELD	2174:9	2174:13	10	sp -> in_buffer_togo
LEAF_NODE	2174:9	2174:9	11	sp
LEAF_NODE	2174:11	2174:11	11	->
LEAF_NODE	2174:13	2174:13	11	in_buffer_togo
EQ_OPERATOR	2174:27	2174:27	10	==
LEAF_NODE	2174:27	2174:27	11	==
FIELD	2174:29	2174:29	10	0
LEAF_NODE	2174:29	2174:29	11	0
LEAF_NODE	2174:30	2174:30	9	)
LEAF_NODE	2174:31	2174:31	7	;
EXPR_STATEMENT	2175:2	2175:5	6	n = m ;
EXPR	2175:2	2175:2	7	n = m
ASSIGN	2175:2	2175:4	8	n = m
LVAL	2175:2	2175:2	9	n
FIELD	2175:2	2175:2	10	n
LEAF_NODE	2175:2	2175:2	11	n
ASSIGN_OP	2175:3	2175:3	9	=
LEAF_NODE	2175:3	2175:3	10	=
RVAL	2175:4	2175:4	9	m
FIELD	2175:4	2175:4	10	m
LEAF_NODE	2175:4	2175:4	11	m
LEAF_NODE	2175:5	2175:5	7	;
SELECTION	2176:2	2177:3	6	
KEYWORD	2176:2	2176:2	7	if
LEAF_NODE	2176:2	2176:2	8	if
LEAF_NODE	2176:5	2176:5	7	(
CONDITION	2176:6	2176:6	7	( uint64 ) n > sp -> in_buffer_file_togo
EXPR	2176:6	2176:16	8	( uint64 ) n > sp -> in_buffer_file_togo
LEAF_NODE	2176:6	2176:6	9	(
TYPE_NAME	2176:7	2176:7	9	uint64
LEAF_NODE	2176:7	2176:7	10	uint64
LEAF_NODE	2176:13	2176:13	9	)
FIELD	2176:14	2176:14	9	n
LEAF_NODE	2176:14	2176:14	10	n
REL_OPERATOR	2176:15	2176:15	9	>
LEAF_NODE	2176:15	2176:15	10	>
FIELD	2176:16	2176:20	9	sp -> in_buffer_file_togo
LEAF_NODE	2176:16	2176:16	10	sp
LEAF_NODE	2176:18	2176:18	10	->
LEAF_NODE	2176:20	2176:20	10	in_buffer_file_togo
LEAF_NODE	2176:39	2176:39	7	)
STATEMENTS	2177:3	2177:3	7	
EXPR_STATEMENT	2177:3	2177:36	8	n = ( uint16 ) sp -> in_buffer_file_togo ;
EXPR	2177:3	2177:3	9	n = ( uint16 ) sp -> in_buffer_file_togo
ASSIGN	2177:3	2177:5	10	n = ( uint16 ) sp -> in_buffer_file_togo
LVAL	2177:3	2177:3	11	n
FIELD	2177:3	2177:3	12	n
LEAF_NODE	2177:3	2177:3	13	n
ASSIGN_OP	2177:4	2177:4	11	=
LEAF_NODE	2177:4	2177:4	12	=
RVAL	2177:5	2177:13	11	( uint16 ) sp -> in_buffer_file_togo
LEAF_NODE	2177:5	2177:5	12	(
TYPE_NAME	2177:6	2177:6	12	uint16
LEAF_NODE	2177:6	2177:6	13	uint16
LEAF_NODE	2177:12	2177:12	12	)
FIELD	2177:13	2177:17	12	sp -> in_buffer_file_togo
LEAF_NODE	2177:13	2177:13	13	sp
LEAF_NODE	2177:15	2177:15	13	->
LEAF_NODE	2177:17	2177:17	13	in_buffer_file_togo
LEAF_NODE	2177:36	2177:36	9	;
EXPR_STATEMENT	2178:2	2178:27	6	sp -> in_buffer_file_pos += n ;
EXPR	2178:2	2178:2	7	sp -> in_buffer_file_pos += n
ASSIGN	2178:2	2178:26	8	sp -> in_buffer_file_pos += n
LVAL	2178:2	2178:2	9	sp -> in_buffer_file_pos
FIELD	2178:2	2178:6	10	sp -> in_buffer_file_pos
LEAF_NODE	2178:2	2178:2	11	sp
LEAF_NODE	2178:4	2178:4	11	->
LEAF_NODE	2178:6	2178:6	11	in_buffer_file_pos
ASSIGN_OP	2178:24	2178:24	9	+=
LEAF_NODE	2178:24	2178:24	10	+=
RVAL	2178:26	2178:26	9	n
FIELD	2178:26	2178:26	10	n
LEAF_NODE	2178:26	2178:26	11	n
LEAF_NODE	2178:27	2178:27	7	;
EXPR_STATEMENT	2179:2	2179:28	6	sp -> in_buffer_file_togo -= n ;
EXPR	2179:2	2179:2	7	sp -> in_buffer_file_togo -= n
ASSIGN	2179:2	2179:27	8	sp -> in_buffer_file_togo -= n
LVAL	2179:2	2179:2	9	sp -> in_buffer_file_togo
FIELD	2179:2	2179:6	10	sp -> in_buffer_file_togo
LEAF_NODE	2179:2	2179:2	11	sp
LEAF_NODE	2179:4	2179:4	11	->
LEAF_NODE	2179:6	2179:6	11	in_buffer_file_togo
ASSIGN_OP	2179:25	2179:25	9	-=
LEAF_NODE	2179:25	2179:25	10	-=
RVAL	2179:27	2179:27	9	n
FIELD	2179:27	2179:27	10	n
LEAF_NODE	2179:27	2179:27	11	n
LEAF_NODE	2179:28	2179:28	7	;
EXPR_STATEMENT	2180:2	2180:30	6	sp -> in_buffer_file_pos_log = 0 ;
EXPR	2180:2	2180:2	7	sp -> in_buffer_file_pos_log = 0
ASSIGN	2180:2	2180:29	8	sp -> in_buffer_file_pos_log = 0
LVAL	2180:2	2180:2	9	sp -> in_buffer_file_pos_log
FIELD	2180:2	2180:6	10	sp -> in_buffer_file_pos_log
LEAF_NODE	2180:2	2180:2	11	sp
LEAF_NODE	2180:4	2180:4	11	->
LEAF_NODE	2180:6	2180:6	11	in_buffer_file_pos_log
ASSIGN_OP	2180:28	2180:28	9	=
LEAF_NODE	2180:28	2180:28	10	=
RVAL	2180:29	2180:29	9	0
FIELD	2180:29	2180:29	10	0
LEAF_NODE	2180:29	2180:29	11	0
LEAF_NODE	2180:30	2180:30	7	;
LEAF_NODE	2187:1	2187:1	5	}
LEAF_NODE	2188:0	2188:0	2	}
FUNCTION_DEF	2190:0	2261:0	1	
RETURN_TYPE	2190:0	2190:7	2	static int
LEAF_NODE	2190:0	2190:0	3	static
TYPE_NAME	2190:7	2190:7	3	int
LEAF_NODE	2190:7	2190:7	4	int
FUNCTION_NAME	2191:0	2191:0	2	OJPEGWriteStream
LEAF_NODE	2191:0	2191:0	3	OJPEGWriteStream
PARAMETER_LIST	2191:16	2191:51	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2191:16	2191:16	3	(
PARAMETER_DECL	2191:17	2191:23	3	TIFF * tif
TYPE	2191:17	2191:21	4	TIFF *
TYPE_NAME	2191:17	2191:17	5	TIFF
LEAF_NODE	2191:17	2191:17	6	TIFF
POINTER	2191:21	2191:21	5	*
LEAF_NODE	2191:21	2191:21	6	*
NAME	2191:23	2191:23	4	tif
LEAF_NODE	2191:23	2191:23	5	tif
LEAF_NODE	2191:26	2191:26	3	,
PARAMETER_DECL	2191:28	2191:35	3	void * * mem
TYPE	2191:28	2191:32	4	void * *
TYPE_NAME	2191:28	2191:28	5	void
LEAF_NODE	2191:28	2191:28	6	void
POINTER	2191:32	2191:33	5	* *
LEAF_NODE	2191:32	2191:32	6	*
LEAF_NODE	2191:33	2191:33	6	*
NAME	2191:35	2191:35	4	mem
LEAF_NODE	2191:35	2191:35	5	mem
LEAF_NODE	2191:38	2191:38	3	,
PARAMETER_DECL	2191:40	2191:48	3	uint32 * len
TYPE	2191:40	2191:46	4	uint32 *
TYPE_NAME	2191:40	2191:40	5	uint32
LEAF_NODE	2191:40	2191:40	6	uint32
POINTER	2191:46	2191:46	5	*
LEAF_NODE	2191:46	2191:46	6	*
NAME	2191:48	2191:48	4	len
LEAF_NODE	2191:48	2191:48	5	len
LEAF_NODE	2191:51	2191:51	3	)
LEAF_NODE	2192:0	2192:0	2	{
STATEMENTS	2193:1	2260:1	2	
SIMPLE_DECL	2193:1	2193:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2193:1	2193:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2193:1	2193:11	5	OJPEGState *
TYPE_NAME	2193:1	2193:1	6	OJPEGState
LEAF_NODE	2193:1	2193:1	7	OJPEGState
POINTER	2193:11	2193:11	6	*
LEAF_NODE	2193:11	2193:11	7	*
NAME	2193:13	2193:13	5	sp
LEAF_NODE	2193:13	2193:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2193:13	2193:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2193:13	2193:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2193:13	2193:13	7	sp
NAME	2193:13	2193:13	8	sp
LEAF_NODE	2193:13	2193:13	9	sp
ASSIGN_OP	2193:15	2193:15	7	=
LEAF_NODE	2193:15	2193:15	8	=
RVAL	2193:16	2193:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2193:16	2193:16	8	(
TYPE_NAME	2193:17	2193:17	8	OJPEGState
LEAF_NODE	2193:17	2193:17	9	OJPEGState
LEAF_NODE	2193:27	2193:27	8	*
LEAF_NODE	2193:28	2193:28	8	)
FIELD	2193:29	2193:34	8	tif -> tif_data
LEAF_NODE	2193:29	2193:29	9	tif
LEAF_NODE	2193:32	2193:32	9	->
LEAF_NODE	2193:34	2193:34	9	tif_data
LEAF_NODE	2193:42	2193:42	4	;
EXPR_STATEMENT	2194:1	2194:7	3	* len = 0 ;
EXPR	2194:1	2194:1	4	* len = 0
ASSIGN	2194:1	2194:6	5	* len = 0
LVAL	2194:1	2194:1	6	* len
UNARY_EXPR	2194:1	2194:2	7	* len
UNARY_OPERATOR	2194:1	2194:1	8	*
LEAF_NODE	2194:1	2194:1	9	*
FIELD	2194:2	2194:2	8	len
LEAF_NODE	2194:2	2194:2	9	len
ASSIGN_OP	2194:5	2194:5	6	=
LEAF_NODE	2194:5	2194:5	7	=
RVAL	2194:6	2194:6	6	0
FIELD	2194:6	2194:6	7	0
LEAF_NODE	2194:6	2194:6	8	0
LEAF_NODE	2194:7	2194:7	4	;
ITERATION	2195:1	2196:1	3	
KEYWORD	2195:1	2195:1	4	do
LEAF_NODE	2195:1	2195:1	5	do
LEAF_NODE	2259:9	2259:9	4	(
CONDITION	2259:10	2259:10	4	* len == 0
EXPR	2259:10	2259:16	5	* len == 0
UNARY_EXPR	2259:10	2259:11	6	* len
UNARY_OPERATOR	2259:10	2259:10	7	*
LEAF_NODE	2259:10	2259:10	8	*
FIELD	2259:11	2259:11	7	len
LEAF_NODE	2259:11	2259:11	8	len
EQ_OPERATOR	2259:14	2259:14	6	==
LEAF_NODE	2259:14	2259:14	7	==
FIELD	2259:16	2259:16	6	0
LEAF_NODE	2259:16	2259:16	7	0
LEAF_NODE	2259:17	2259:17	4	)
STATEMENTS	2196:1	2259:1	4	
LEAF_NODE	2196:1	2196:1	5	{
STATEMENTS	2197:2	2198:2	5	
EXPR_STATEMENT	2197:2	2197:32	6	assert ( sp -> out_state <= ososEoi ) ;
EXPR	2197:2	2197:2	7	assert ( sp -> out_state <= ososEoi )
FUNCTION_CALL	2197:2	2197:31	8	assert ( sp -> out_state <= ososEoi )
CALLEE	2197:2	2197:2	9	assert
LEAF_NODE	2197:2	2197:2	10	assert
LEAF_NODE	2197:8	2197:8	9	(
ARGUMENT	2197:9	2197:24	9	sp -> out_state <= ososEoi
FIELD	2197:9	2197:13	10	sp -> out_state
LEAF_NODE	2197:9	2197:9	11	sp
LEAF_NODE	2197:11	2197:11	11	->
LEAF_NODE	2197:13	2197:13	11	out_state
REL_OPERATOR	2197:22	2197:22	10	<=
LEAF_NODE	2197:22	2197:22	11	<=
FIELD	2197:24	2197:24	10	ososEoi
LEAF_NODE	2197:24	2197:24	11	ososEoi
LEAF_NODE	2197:31	2197:31	9	)
LEAF_NODE	2197:32	2197:32	7	;
SELECTION	2198:2	2199:2	6	
KEYWORD	2198:2	2198:2	7	switch
LEAF_NODE	2198:2	2198:2	8	switch
LEAF_NODE	2198:8	2198:8	7	(
CONDITION	2198:9	2198:9	7	sp -> out_state
EXPR	2198:9	2198:9	8	sp -> out_state
FIELD	2198:9	2198:13	9	sp -> out_state
LEAF_NODE	2198:9	2198:9	10	sp
LEAF_NODE	2198:11	2198:11	10	->
LEAF_NODE	2198:13	2198:13	10	out_state
LEAF_NODE	2198:22	2198:22	7	)
STATEMENTS	2199:2	2258:2	7	
LEAF_NODE	2199:2	2199:2	8	{
STATEMENTS	2200:3	2257:4	8	
LABEL	2200:3	2200:15	9	case ososSoi :
LEAF_NODE	2200:3	2200:3	10	case
LEAF_NODE	2200:8	2200:8	10	ososSoi
LEAF_NODE	2200:15	2200:15	10	:
EXPR_STATEMENT	2201:4	2201:36	9	OJPEGWriteStreamSoi ( tif , mem , len ) ;
EXPR	2201:4	2201:4	10	OJPEGWriteStreamSoi ( tif , mem , len )
FUNCTION_CALL	2201:4	2201:35	11	OJPEGWriteStreamSoi ( tif , mem , len )
CALLEE	2201:4	2201:4	12	OJPEGWriteStreamSoi
LEAF_NODE	2201:4	2201:4	13	OJPEGWriteStreamSoi
LEAF_NODE	2201:23	2201:23	12	(
ARGUMENT	2201:24	2201:24	12	tif
FIELD	2201:24	2201:24	13	tif
LEAF_NODE	2201:24	2201:24	14	tif
LEAF_NODE	2201:27	2201:27	12	,
ARGUMENT	2201:28	2201:28	12	mem
FIELD	2201:28	2201:28	13	mem
LEAF_NODE	2201:28	2201:28	14	mem
LEAF_NODE	2201:31	2201:31	12	,
ARGUMENT	2201:32	2201:32	12	len
FIELD	2201:32	2201:32	13	len
LEAF_NODE	2201:32	2201:32	14	len
LEAF_NODE	2201:35	2201:35	12	)
LEAF_NODE	2201:36	2201:36	10	;
JUMP_STATEMENT	2202:4	2202:9	9	break DESTINATION ;
KEYWORD	2202:4	2202:4	10	break
LEAF_NODE	2202:4	2202:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2202:9	2202:9	10	;
LABEL	2203:3	2203:19	9	case ososQTable0 :
LEAF_NODE	2203:3	2203:3	10	case
LEAF_NODE	2203:8	2203:8	10	ososQTable0
LEAF_NODE	2203:19	2203:19	10	:
EXPR_STATEMENT	2204:4	2204:41	9	OJPEGWriteStreamQTable ( tif , 0 , mem , len ) ;
EXPR	2204:4	2204:4	10	OJPEGWriteStreamQTable ( tif , 0 , mem , len )
FUNCTION_CALL	2204:4	2204:40	11	OJPEGWriteStreamQTable ( tif , 0 , mem , len )
CALLEE	2204:4	2204:4	12	OJPEGWriteStreamQTable
LEAF_NODE	2204:4	2204:4	13	OJPEGWriteStreamQTable
LEAF_NODE	2204:26	2204:26	12	(
ARGUMENT	2204:27	2204:27	12	tif
FIELD	2204:27	2204:27	13	tif
LEAF_NODE	2204:27	2204:27	14	tif
LEAF_NODE	2204:30	2204:30	12	,
ARGUMENT	2204:31	2204:31	12	0
FIELD	2204:31	2204:31	13	0
LEAF_NODE	2204:31	2204:31	14	0
LEAF_NODE	2204:32	2204:32	12	,
ARGUMENT	2204:33	2204:33	12	mem
FIELD	2204:33	2204:33	13	mem
LEAF_NODE	2204:33	2204:33	14	mem
LEAF_NODE	2204:36	2204:36	12	,
ARGUMENT	2204:37	2204:37	12	len
FIELD	2204:37	2204:37	13	len
LEAF_NODE	2204:37	2204:37	14	len
LEAF_NODE	2204:40	2204:40	12	)
LEAF_NODE	2204:41	2204:41	10	;
JUMP_STATEMENT	2205:4	2205:9	9	break DESTINATION ;
KEYWORD	2205:4	2205:4	10	break
LEAF_NODE	2205:4	2205:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2205:9	2205:9	10	;
LABEL	2206:3	2206:19	9	case ososQTable1 :
LEAF_NODE	2206:3	2206:3	10	case
LEAF_NODE	2206:8	2206:8	10	ososQTable1
LEAF_NODE	2206:19	2206:19	10	:
EXPR_STATEMENT	2207:4	2207:41	9	OJPEGWriteStreamQTable ( tif , 1 , mem , len ) ;
EXPR	2207:4	2207:4	10	OJPEGWriteStreamQTable ( tif , 1 , mem , len )
FUNCTION_CALL	2207:4	2207:40	11	OJPEGWriteStreamQTable ( tif , 1 , mem , len )
CALLEE	2207:4	2207:4	12	OJPEGWriteStreamQTable
LEAF_NODE	2207:4	2207:4	13	OJPEGWriteStreamQTable
LEAF_NODE	2207:26	2207:26	12	(
ARGUMENT	2207:27	2207:27	12	tif
FIELD	2207:27	2207:27	13	tif
LEAF_NODE	2207:27	2207:27	14	tif
LEAF_NODE	2207:30	2207:30	12	,
ARGUMENT	2207:31	2207:31	12	1
FIELD	2207:31	2207:31	13	1
LEAF_NODE	2207:31	2207:31	14	1
LEAF_NODE	2207:32	2207:32	12	,
ARGUMENT	2207:33	2207:33	12	mem
FIELD	2207:33	2207:33	13	mem
LEAF_NODE	2207:33	2207:33	14	mem
LEAF_NODE	2207:36	2207:36	12	,
ARGUMENT	2207:37	2207:37	12	len
FIELD	2207:37	2207:37	13	len
LEAF_NODE	2207:37	2207:37	14	len
LEAF_NODE	2207:40	2207:40	12	)
LEAF_NODE	2207:41	2207:41	10	;
JUMP_STATEMENT	2208:4	2208:9	9	break DESTINATION ;
KEYWORD	2208:4	2208:4	10	break
LEAF_NODE	2208:4	2208:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2208:9	2208:9	10	;
LABEL	2209:3	2209:19	9	case ososQTable2 :
LEAF_NODE	2209:3	2209:3	10	case
LEAF_NODE	2209:8	2209:8	10	ososQTable2
LEAF_NODE	2209:19	2209:19	10	:
EXPR_STATEMENT	2210:4	2210:41	9	OJPEGWriteStreamQTable ( tif , 2 , mem , len ) ;
EXPR	2210:4	2210:4	10	OJPEGWriteStreamQTable ( tif , 2 , mem , len )
FUNCTION_CALL	2210:4	2210:40	11	OJPEGWriteStreamQTable ( tif , 2 , mem , len )
CALLEE	2210:4	2210:4	12	OJPEGWriteStreamQTable
LEAF_NODE	2210:4	2210:4	13	OJPEGWriteStreamQTable
LEAF_NODE	2210:26	2210:26	12	(
ARGUMENT	2210:27	2210:27	12	tif
FIELD	2210:27	2210:27	13	tif
LEAF_NODE	2210:27	2210:27	14	tif
LEAF_NODE	2210:30	2210:30	12	,
ARGUMENT	2210:31	2210:31	12	2
FIELD	2210:31	2210:31	13	2
LEAF_NODE	2210:31	2210:31	14	2
LEAF_NODE	2210:32	2210:32	12	,
ARGUMENT	2210:33	2210:33	12	mem
FIELD	2210:33	2210:33	13	mem
LEAF_NODE	2210:33	2210:33	14	mem
LEAF_NODE	2210:36	2210:36	12	,
ARGUMENT	2210:37	2210:37	12	len
FIELD	2210:37	2210:37	13	len
LEAF_NODE	2210:37	2210:37	14	len
LEAF_NODE	2210:40	2210:40	12	)
LEAF_NODE	2210:41	2210:41	10	;
JUMP_STATEMENT	2211:4	2211:9	9	break DESTINATION ;
KEYWORD	2211:4	2211:4	10	break
LEAF_NODE	2211:4	2211:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2211:9	2211:9	10	;
LABEL	2212:3	2212:19	9	case ososQTable3 :
LEAF_NODE	2212:3	2212:3	10	case
LEAF_NODE	2212:8	2212:8	10	ososQTable3
LEAF_NODE	2212:19	2212:19	10	:
EXPR_STATEMENT	2213:4	2213:41	9	OJPEGWriteStreamQTable ( tif , 3 , mem , len ) ;
EXPR	2213:4	2213:4	10	OJPEGWriteStreamQTable ( tif , 3 , mem , len )
FUNCTION_CALL	2213:4	2213:40	11	OJPEGWriteStreamQTable ( tif , 3 , mem , len )
CALLEE	2213:4	2213:4	12	OJPEGWriteStreamQTable
LEAF_NODE	2213:4	2213:4	13	OJPEGWriteStreamQTable
LEAF_NODE	2213:26	2213:26	12	(
ARGUMENT	2213:27	2213:27	12	tif
FIELD	2213:27	2213:27	13	tif
LEAF_NODE	2213:27	2213:27	14	tif
LEAF_NODE	2213:30	2213:30	12	,
ARGUMENT	2213:31	2213:31	12	3
FIELD	2213:31	2213:31	13	3
LEAF_NODE	2213:31	2213:31	14	3
LEAF_NODE	2213:32	2213:32	12	,
ARGUMENT	2213:33	2213:33	12	mem
FIELD	2213:33	2213:33	13	mem
LEAF_NODE	2213:33	2213:33	14	mem
LEAF_NODE	2213:36	2213:36	12	,
ARGUMENT	2213:37	2213:37	12	len
FIELD	2213:37	2213:37	13	len
LEAF_NODE	2213:37	2213:37	14	len
LEAF_NODE	2213:40	2213:40	12	)
LEAF_NODE	2213:41	2213:41	10	;
JUMP_STATEMENT	2214:4	2214:9	9	break DESTINATION ;
KEYWORD	2214:4	2214:4	10	break
LEAF_NODE	2214:4	2214:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2214:9	2214:9	10	;
LABEL	2215:3	2215:20	9	case ososDcTable0 :
LEAF_NODE	2215:3	2215:3	10	case
LEAF_NODE	2215:8	2215:8	10	ososDcTable0
LEAF_NODE	2215:20	2215:20	10	:
EXPR_STATEMENT	2216:4	2216:42	9	OJPEGWriteStreamDcTable ( tif , 0 , mem , len ) ;
EXPR	2216:4	2216:4	10	OJPEGWriteStreamDcTable ( tif , 0 , mem , len )
FUNCTION_CALL	2216:4	2216:41	11	OJPEGWriteStreamDcTable ( tif , 0 , mem , len )
CALLEE	2216:4	2216:4	12	OJPEGWriteStreamDcTable
LEAF_NODE	2216:4	2216:4	13	OJPEGWriteStreamDcTable
LEAF_NODE	2216:27	2216:27	12	(
ARGUMENT	2216:28	2216:28	12	tif
FIELD	2216:28	2216:28	13	tif
LEAF_NODE	2216:28	2216:28	14	tif
LEAF_NODE	2216:31	2216:31	12	,
ARGUMENT	2216:32	2216:32	12	0
FIELD	2216:32	2216:32	13	0
LEAF_NODE	2216:32	2216:32	14	0
LEAF_NODE	2216:33	2216:33	12	,
ARGUMENT	2216:34	2216:34	12	mem
FIELD	2216:34	2216:34	13	mem
LEAF_NODE	2216:34	2216:34	14	mem
LEAF_NODE	2216:37	2216:37	12	,
ARGUMENT	2216:38	2216:38	12	len
FIELD	2216:38	2216:38	13	len
LEAF_NODE	2216:38	2216:38	14	len
LEAF_NODE	2216:41	2216:41	12	)
LEAF_NODE	2216:42	2216:42	10	;
JUMP_STATEMENT	2217:4	2217:9	9	break DESTINATION ;
KEYWORD	2217:4	2217:4	10	break
LEAF_NODE	2217:4	2217:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2217:9	2217:9	10	;
LABEL	2218:3	2218:20	9	case ososDcTable1 :
LEAF_NODE	2218:3	2218:3	10	case
LEAF_NODE	2218:8	2218:8	10	ososDcTable1
LEAF_NODE	2218:20	2218:20	10	:
EXPR_STATEMENT	2219:4	2219:42	9	OJPEGWriteStreamDcTable ( tif , 1 , mem , len ) ;
EXPR	2219:4	2219:4	10	OJPEGWriteStreamDcTable ( tif , 1 , mem , len )
FUNCTION_CALL	2219:4	2219:41	11	OJPEGWriteStreamDcTable ( tif , 1 , mem , len )
CALLEE	2219:4	2219:4	12	OJPEGWriteStreamDcTable
LEAF_NODE	2219:4	2219:4	13	OJPEGWriteStreamDcTable
LEAF_NODE	2219:27	2219:27	12	(
ARGUMENT	2219:28	2219:28	12	tif
FIELD	2219:28	2219:28	13	tif
LEAF_NODE	2219:28	2219:28	14	tif
LEAF_NODE	2219:31	2219:31	12	,
ARGUMENT	2219:32	2219:32	12	1
FIELD	2219:32	2219:32	13	1
LEAF_NODE	2219:32	2219:32	14	1
LEAF_NODE	2219:33	2219:33	12	,
ARGUMENT	2219:34	2219:34	12	mem
FIELD	2219:34	2219:34	13	mem
LEAF_NODE	2219:34	2219:34	14	mem
LEAF_NODE	2219:37	2219:37	12	,
ARGUMENT	2219:38	2219:38	12	len
FIELD	2219:38	2219:38	13	len
LEAF_NODE	2219:38	2219:38	14	len
LEAF_NODE	2219:41	2219:41	12	)
LEAF_NODE	2219:42	2219:42	10	;
JUMP_STATEMENT	2220:4	2220:9	9	break DESTINATION ;
KEYWORD	2220:4	2220:4	10	break
LEAF_NODE	2220:4	2220:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2220:9	2220:9	10	;
LABEL	2221:3	2221:20	9	case ososDcTable2 :
LEAF_NODE	2221:3	2221:3	10	case
LEAF_NODE	2221:8	2221:8	10	ososDcTable2
LEAF_NODE	2221:20	2221:20	10	:
EXPR_STATEMENT	2222:4	2222:42	9	OJPEGWriteStreamDcTable ( tif , 2 , mem , len ) ;
EXPR	2222:4	2222:4	10	OJPEGWriteStreamDcTable ( tif , 2 , mem , len )
FUNCTION_CALL	2222:4	2222:41	11	OJPEGWriteStreamDcTable ( tif , 2 , mem , len )
CALLEE	2222:4	2222:4	12	OJPEGWriteStreamDcTable
LEAF_NODE	2222:4	2222:4	13	OJPEGWriteStreamDcTable
LEAF_NODE	2222:27	2222:27	12	(
ARGUMENT	2222:28	2222:28	12	tif
FIELD	2222:28	2222:28	13	tif
LEAF_NODE	2222:28	2222:28	14	tif
LEAF_NODE	2222:31	2222:31	12	,
ARGUMENT	2222:32	2222:32	12	2
FIELD	2222:32	2222:32	13	2
LEAF_NODE	2222:32	2222:32	14	2
LEAF_NODE	2222:33	2222:33	12	,
ARGUMENT	2222:34	2222:34	12	mem
FIELD	2222:34	2222:34	13	mem
LEAF_NODE	2222:34	2222:34	14	mem
LEAF_NODE	2222:37	2222:37	12	,
ARGUMENT	2222:38	2222:38	12	len
FIELD	2222:38	2222:38	13	len
LEAF_NODE	2222:38	2222:38	14	len
LEAF_NODE	2222:41	2222:41	12	)
LEAF_NODE	2222:42	2222:42	10	;
JUMP_STATEMENT	2223:4	2223:9	9	break DESTINATION ;
KEYWORD	2223:4	2223:4	10	break
LEAF_NODE	2223:4	2223:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2223:9	2223:9	10	;
LABEL	2224:3	2224:20	9	case ososDcTable3 :
LEAF_NODE	2224:3	2224:3	10	case
LEAF_NODE	2224:8	2224:8	10	ososDcTable3
LEAF_NODE	2224:20	2224:20	10	:
EXPR_STATEMENT	2225:4	2225:42	9	OJPEGWriteStreamDcTable ( tif , 3 , mem , len ) ;
EXPR	2225:4	2225:4	10	OJPEGWriteStreamDcTable ( tif , 3 , mem , len )
FUNCTION_CALL	2225:4	2225:41	11	OJPEGWriteStreamDcTable ( tif , 3 , mem , len )
CALLEE	2225:4	2225:4	12	OJPEGWriteStreamDcTable
LEAF_NODE	2225:4	2225:4	13	OJPEGWriteStreamDcTable
LEAF_NODE	2225:27	2225:27	12	(
ARGUMENT	2225:28	2225:28	12	tif
FIELD	2225:28	2225:28	13	tif
LEAF_NODE	2225:28	2225:28	14	tif
LEAF_NODE	2225:31	2225:31	12	,
ARGUMENT	2225:32	2225:32	12	3
FIELD	2225:32	2225:32	13	3
LEAF_NODE	2225:32	2225:32	14	3
LEAF_NODE	2225:33	2225:33	12	,
ARGUMENT	2225:34	2225:34	12	mem
FIELD	2225:34	2225:34	13	mem
LEAF_NODE	2225:34	2225:34	14	mem
LEAF_NODE	2225:37	2225:37	12	,
ARGUMENT	2225:38	2225:38	12	len
FIELD	2225:38	2225:38	13	len
LEAF_NODE	2225:38	2225:38	14	len
LEAF_NODE	2225:41	2225:41	12	)
LEAF_NODE	2225:42	2225:42	10	;
JUMP_STATEMENT	2226:4	2226:9	9	break DESTINATION ;
KEYWORD	2226:4	2226:4	10	break
LEAF_NODE	2226:4	2226:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2226:9	2226:9	10	;
LABEL	2227:3	2227:20	9	case ososAcTable0 :
LEAF_NODE	2227:3	2227:3	10	case
LEAF_NODE	2227:8	2227:8	10	ososAcTable0
LEAF_NODE	2227:20	2227:20	10	:
EXPR_STATEMENT	2228:4	2228:42	9	OJPEGWriteStreamAcTable ( tif , 0 , mem , len ) ;
EXPR	2228:4	2228:4	10	OJPEGWriteStreamAcTable ( tif , 0 , mem , len )
FUNCTION_CALL	2228:4	2228:41	11	OJPEGWriteStreamAcTable ( tif , 0 , mem , len )
CALLEE	2228:4	2228:4	12	OJPEGWriteStreamAcTable
LEAF_NODE	2228:4	2228:4	13	OJPEGWriteStreamAcTable
LEAF_NODE	2228:27	2228:27	12	(
ARGUMENT	2228:28	2228:28	12	tif
FIELD	2228:28	2228:28	13	tif
LEAF_NODE	2228:28	2228:28	14	tif
LEAF_NODE	2228:31	2228:31	12	,
ARGUMENT	2228:32	2228:32	12	0
FIELD	2228:32	2228:32	13	0
LEAF_NODE	2228:32	2228:32	14	0
LEAF_NODE	2228:33	2228:33	12	,
ARGUMENT	2228:34	2228:34	12	mem
FIELD	2228:34	2228:34	13	mem
LEAF_NODE	2228:34	2228:34	14	mem
LEAF_NODE	2228:37	2228:37	12	,
ARGUMENT	2228:38	2228:38	12	len
FIELD	2228:38	2228:38	13	len
LEAF_NODE	2228:38	2228:38	14	len
LEAF_NODE	2228:41	2228:41	12	)
LEAF_NODE	2228:42	2228:42	10	;
JUMP_STATEMENT	2229:4	2229:9	9	break DESTINATION ;
KEYWORD	2229:4	2229:4	10	break
LEAF_NODE	2229:4	2229:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2229:9	2229:9	10	;
LABEL	2230:3	2230:20	9	case ososAcTable1 :
LEAF_NODE	2230:3	2230:3	10	case
LEAF_NODE	2230:8	2230:8	10	ososAcTable1
LEAF_NODE	2230:20	2230:20	10	:
EXPR_STATEMENT	2231:4	2231:42	9	OJPEGWriteStreamAcTable ( tif , 1 , mem , len ) ;
EXPR	2231:4	2231:4	10	OJPEGWriteStreamAcTable ( tif , 1 , mem , len )
FUNCTION_CALL	2231:4	2231:41	11	OJPEGWriteStreamAcTable ( tif , 1 , mem , len )
CALLEE	2231:4	2231:4	12	OJPEGWriteStreamAcTable
LEAF_NODE	2231:4	2231:4	13	OJPEGWriteStreamAcTable
LEAF_NODE	2231:27	2231:27	12	(
ARGUMENT	2231:28	2231:28	12	tif
FIELD	2231:28	2231:28	13	tif
LEAF_NODE	2231:28	2231:28	14	tif
LEAF_NODE	2231:31	2231:31	12	,
ARGUMENT	2231:32	2231:32	12	1
FIELD	2231:32	2231:32	13	1
LEAF_NODE	2231:32	2231:32	14	1
LEAF_NODE	2231:33	2231:33	12	,
ARGUMENT	2231:34	2231:34	12	mem
FIELD	2231:34	2231:34	13	mem
LEAF_NODE	2231:34	2231:34	14	mem
LEAF_NODE	2231:37	2231:37	12	,
ARGUMENT	2231:38	2231:38	12	len
FIELD	2231:38	2231:38	13	len
LEAF_NODE	2231:38	2231:38	14	len
LEAF_NODE	2231:41	2231:41	12	)
LEAF_NODE	2231:42	2231:42	10	;
JUMP_STATEMENT	2232:4	2232:9	9	break DESTINATION ;
KEYWORD	2232:4	2232:4	10	break
LEAF_NODE	2232:4	2232:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2232:9	2232:9	10	;
LABEL	2233:3	2233:20	9	case ososAcTable2 :
LEAF_NODE	2233:3	2233:3	10	case
LEAF_NODE	2233:8	2233:8	10	ososAcTable2
LEAF_NODE	2233:20	2233:20	10	:
EXPR_STATEMENT	2234:4	2234:42	9	OJPEGWriteStreamAcTable ( tif , 2 , mem , len ) ;
EXPR	2234:4	2234:4	10	OJPEGWriteStreamAcTable ( tif , 2 , mem , len )
FUNCTION_CALL	2234:4	2234:41	11	OJPEGWriteStreamAcTable ( tif , 2 , mem , len )
CALLEE	2234:4	2234:4	12	OJPEGWriteStreamAcTable
LEAF_NODE	2234:4	2234:4	13	OJPEGWriteStreamAcTable
LEAF_NODE	2234:27	2234:27	12	(
ARGUMENT	2234:28	2234:28	12	tif
FIELD	2234:28	2234:28	13	tif
LEAF_NODE	2234:28	2234:28	14	tif
LEAF_NODE	2234:31	2234:31	12	,
ARGUMENT	2234:32	2234:32	12	2
FIELD	2234:32	2234:32	13	2
LEAF_NODE	2234:32	2234:32	14	2
LEAF_NODE	2234:33	2234:33	12	,
ARGUMENT	2234:34	2234:34	12	mem
FIELD	2234:34	2234:34	13	mem
LEAF_NODE	2234:34	2234:34	14	mem
LEAF_NODE	2234:37	2234:37	12	,
ARGUMENT	2234:38	2234:38	12	len
FIELD	2234:38	2234:38	13	len
LEAF_NODE	2234:38	2234:38	14	len
LEAF_NODE	2234:41	2234:41	12	)
LEAF_NODE	2234:42	2234:42	10	;
JUMP_STATEMENT	2235:4	2235:9	9	break DESTINATION ;
KEYWORD	2235:4	2235:4	10	break
LEAF_NODE	2235:4	2235:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2235:9	2235:9	10	;
LABEL	2236:3	2236:20	9	case ososAcTable3 :
LEAF_NODE	2236:3	2236:3	10	case
LEAF_NODE	2236:8	2236:8	10	ososAcTable3
LEAF_NODE	2236:20	2236:20	10	:
EXPR_STATEMENT	2237:4	2237:42	9	OJPEGWriteStreamAcTable ( tif , 3 , mem , len ) ;
EXPR	2237:4	2237:4	10	OJPEGWriteStreamAcTable ( tif , 3 , mem , len )
FUNCTION_CALL	2237:4	2237:41	11	OJPEGWriteStreamAcTable ( tif , 3 , mem , len )
CALLEE	2237:4	2237:4	12	OJPEGWriteStreamAcTable
LEAF_NODE	2237:4	2237:4	13	OJPEGWriteStreamAcTable
LEAF_NODE	2237:27	2237:27	12	(
ARGUMENT	2237:28	2237:28	12	tif
FIELD	2237:28	2237:28	13	tif
LEAF_NODE	2237:28	2237:28	14	tif
LEAF_NODE	2237:31	2237:31	12	,
ARGUMENT	2237:32	2237:32	12	3
FIELD	2237:32	2237:32	13	3
LEAF_NODE	2237:32	2237:32	14	3
LEAF_NODE	2237:33	2237:33	12	,
ARGUMENT	2237:34	2237:34	12	mem
FIELD	2237:34	2237:34	13	mem
LEAF_NODE	2237:34	2237:34	14	mem
LEAF_NODE	2237:37	2237:37	12	,
ARGUMENT	2237:38	2237:38	12	len
FIELD	2237:38	2237:38	13	len
LEAF_NODE	2237:38	2237:38	14	len
LEAF_NODE	2237:41	2237:41	12	)
LEAF_NODE	2237:42	2237:42	10	;
JUMP_STATEMENT	2238:4	2238:9	9	break DESTINATION ;
KEYWORD	2238:4	2238:4	10	break
LEAF_NODE	2238:4	2238:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2238:9	2238:9	10	;
LABEL	2239:3	2239:15	9	case ososDri :
LEAF_NODE	2239:3	2239:3	10	case
LEAF_NODE	2239:8	2239:8	10	ososDri
LEAF_NODE	2239:15	2239:15	10	:
EXPR_STATEMENT	2240:4	2240:36	9	OJPEGWriteStreamDri ( tif , mem , len ) ;
EXPR	2240:4	2240:4	10	OJPEGWriteStreamDri ( tif , mem , len )
FUNCTION_CALL	2240:4	2240:35	11	OJPEGWriteStreamDri ( tif , mem , len )
CALLEE	2240:4	2240:4	12	OJPEGWriteStreamDri
LEAF_NODE	2240:4	2240:4	13	OJPEGWriteStreamDri
LEAF_NODE	2240:23	2240:23	12	(
ARGUMENT	2240:24	2240:24	12	tif
FIELD	2240:24	2240:24	13	tif
LEAF_NODE	2240:24	2240:24	14	tif
LEAF_NODE	2240:27	2240:27	12	,
ARGUMENT	2240:28	2240:28	12	mem
FIELD	2240:28	2240:28	13	mem
LEAF_NODE	2240:28	2240:28	14	mem
LEAF_NODE	2240:31	2240:31	12	,
ARGUMENT	2240:32	2240:32	12	len
FIELD	2240:32	2240:32	13	len
LEAF_NODE	2240:32	2240:32	14	len
LEAF_NODE	2240:35	2240:35	12	)
LEAF_NODE	2240:36	2240:36	10	;
JUMP_STATEMENT	2241:4	2241:9	9	break DESTINATION ;
KEYWORD	2241:4	2241:4	10	break
LEAF_NODE	2241:4	2241:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2241:9	2241:9	10	;
LABEL	2242:3	2242:15	9	case ososSof :
LEAF_NODE	2242:3	2242:3	10	case
LEAF_NODE	2242:8	2242:8	10	ososSof
LEAF_NODE	2242:15	2242:15	10	:
EXPR_STATEMENT	2243:4	2243:36	9	OJPEGWriteStreamSof ( tif , mem , len ) ;
EXPR	2243:4	2243:4	10	OJPEGWriteStreamSof ( tif , mem , len )
FUNCTION_CALL	2243:4	2243:35	11	OJPEGWriteStreamSof ( tif , mem , len )
CALLEE	2243:4	2243:4	12	OJPEGWriteStreamSof
LEAF_NODE	2243:4	2243:4	13	OJPEGWriteStreamSof
LEAF_NODE	2243:23	2243:23	12	(
ARGUMENT	2243:24	2243:24	12	tif
FIELD	2243:24	2243:24	13	tif
LEAF_NODE	2243:24	2243:24	14	tif
LEAF_NODE	2243:27	2243:27	12	,
ARGUMENT	2243:28	2243:28	12	mem
FIELD	2243:28	2243:28	13	mem
LEAF_NODE	2243:28	2243:28	14	mem
LEAF_NODE	2243:31	2243:31	12	,
ARGUMENT	2243:32	2243:32	12	len
FIELD	2243:32	2243:32	13	len
LEAF_NODE	2243:32	2243:32	14	len
LEAF_NODE	2243:35	2243:35	12	)
LEAF_NODE	2243:36	2243:36	10	;
JUMP_STATEMENT	2244:4	2244:9	9	break DESTINATION ;
KEYWORD	2244:4	2244:4	10	break
LEAF_NODE	2244:4	2244:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2244:9	2244:9	10	;
LABEL	2245:3	2245:15	9	case ososSos :
LEAF_NODE	2245:3	2245:3	10	case
LEAF_NODE	2245:8	2245:8	10	ososSos
LEAF_NODE	2245:15	2245:15	10	:
EXPR_STATEMENT	2246:4	2246:36	9	OJPEGWriteStreamSos ( tif , mem , len ) ;
EXPR	2246:4	2246:4	10	OJPEGWriteStreamSos ( tif , mem , len )
FUNCTION_CALL	2246:4	2246:35	11	OJPEGWriteStreamSos ( tif , mem , len )
CALLEE	2246:4	2246:4	12	OJPEGWriteStreamSos
LEAF_NODE	2246:4	2246:4	13	OJPEGWriteStreamSos
LEAF_NODE	2246:23	2246:23	12	(
ARGUMENT	2246:24	2246:24	12	tif
FIELD	2246:24	2246:24	13	tif
LEAF_NODE	2246:24	2246:24	14	tif
LEAF_NODE	2246:27	2246:27	12	,
ARGUMENT	2246:28	2246:28	12	mem
FIELD	2246:28	2246:28	13	mem
LEAF_NODE	2246:28	2246:28	14	mem
LEAF_NODE	2246:31	2246:31	12	,
ARGUMENT	2246:32	2246:32	12	len
FIELD	2246:32	2246:32	13	len
LEAF_NODE	2246:32	2246:32	14	len
LEAF_NODE	2246:35	2246:35	12	)
LEAF_NODE	2246:36	2246:36	10	;
JUMP_STATEMENT	2247:4	2247:9	9	break DESTINATION ;
KEYWORD	2247:4	2247:4	10	break
LEAF_NODE	2247:4	2247:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2247:9	2247:9	10	;
LABEL	2248:3	2248:22	9	case ososCompressed :
LEAF_NODE	2248:3	2248:3	10	case
LEAF_NODE	2248:8	2248:8	10	ososCompressed
LEAF_NODE	2248:22	2248:22	10	:
SELECTION	2249:4	2250:5	9	
KEYWORD	2249:4	2249:4	10	if
LEAF_NODE	2249:4	2249:4	11	if
LEAF_NODE	2249:7	2249:7	10	(
CONDITION	2249:8	2249:8	10	OJPEGWriteStreamCompressed ( tif , mem , len ) == 0
EXPR	2249:8	2249:49	11	OJPEGWriteStreamCompressed ( tif , mem , len ) == 0
FUNCTION_CALL	2249:8	2249:46	12	OJPEGWriteStreamCompressed ( tif , mem , len )
CALLEE	2249:8	2249:8	13	OJPEGWriteStreamCompressed
LEAF_NODE	2249:8	2249:8	14	OJPEGWriteStreamCompressed
LEAF_NODE	2249:34	2249:34	13	(
ARGUMENT	2249:35	2249:35	13	tif
FIELD	2249:35	2249:35	14	tif
LEAF_NODE	2249:35	2249:35	15	tif
LEAF_NODE	2249:38	2249:38	13	,
ARGUMENT	2249:39	2249:39	13	mem
FIELD	2249:39	2249:39	14	mem
LEAF_NODE	2249:39	2249:39	15	mem
LEAF_NODE	2249:42	2249:42	13	,
ARGUMENT	2249:43	2249:43	13	len
FIELD	2249:43	2249:43	14	len
LEAF_NODE	2249:43	2249:43	15	len
LEAF_NODE	2249:46	2249:46	13	)
EQ_OPERATOR	2249:47	2249:47	12	==
LEAF_NODE	2249:47	2249:47	13	==
FIELD	2249:49	2249:49	12	0
LEAF_NODE	2249:49	2249:49	13	0
LEAF_NODE	2249:50	2249:50	10	)
STATEMENTS	2250:5	2250:5	10	
JUMP_STATEMENT	2250:5	2250:14	11	return ( 0 ) ;
KEYWORD	2250:5	2250:5	12	return
LEAF_NODE	2250:5	2250:5	13	return
DESTINATION	2250:11	2250:11	12	( 0 )
EXPR	2250:11	2250:13	13	( 0 )
LEAF_NODE	2250:11	2250:11	14	(
FIELD	2250:12	2250:12	14	0
LEAF_NODE	2250:12	2250:12	15	0
LEAF_NODE	2250:13	2250:13	14	)
LEAF_NODE	2250:14	2250:14	12	;
JUMP_STATEMENT	2251:4	2251:9	9	break DESTINATION ;
KEYWORD	2251:4	2251:4	10	break
LEAF_NODE	2251:4	2251:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2251:9	2251:9	10	;
LABEL	2252:3	2252:15	9	case ososRst :
LEAF_NODE	2252:3	2252:3	10	case
LEAF_NODE	2252:8	2252:8	10	ososRst
LEAF_NODE	2252:15	2252:15	10	:
EXPR_STATEMENT	2253:4	2253:36	9	OJPEGWriteStreamRst ( tif , mem , len ) ;
EXPR	2253:4	2253:4	10	OJPEGWriteStreamRst ( tif , mem , len )
FUNCTION_CALL	2253:4	2253:35	11	OJPEGWriteStreamRst ( tif , mem , len )
CALLEE	2253:4	2253:4	12	OJPEGWriteStreamRst
LEAF_NODE	2253:4	2253:4	13	OJPEGWriteStreamRst
LEAF_NODE	2253:23	2253:23	12	(
ARGUMENT	2253:24	2253:24	12	tif
FIELD	2253:24	2253:24	13	tif
LEAF_NODE	2253:24	2253:24	14	tif
LEAF_NODE	2253:27	2253:27	12	,
ARGUMENT	2253:28	2253:28	12	mem
FIELD	2253:28	2253:28	13	mem
LEAF_NODE	2253:28	2253:28	14	mem
LEAF_NODE	2253:31	2253:31	12	,
ARGUMENT	2253:32	2253:32	12	len
FIELD	2253:32	2253:32	13	len
LEAF_NODE	2253:32	2253:32	14	len
LEAF_NODE	2253:35	2253:35	12	)
LEAF_NODE	2253:36	2253:36	10	;
JUMP_STATEMENT	2254:4	2254:9	9	break DESTINATION ;
KEYWORD	2254:4	2254:4	10	break
LEAF_NODE	2254:4	2254:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2254:9	2254:9	10	;
LABEL	2255:3	2255:15	9	case ososEoi :
LEAF_NODE	2255:3	2255:3	10	case
LEAF_NODE	2255:8	2255:8	10	ososEoi
LEAF_NODE	2255:15	2255:15	10	:
EXPR_STATEMENT	2256:4	2256:36	9	OJPEGWriteStreamEoi ( tif , mem , len ) ;
EXPR	2256:4	2256:4	10	OJPEGWriteStreamEoi ( tif , mem , len )
FUNCTION_CALL	2256:4	2256:35	11	OJPEGWriteStreamEoi ( tif , mem , len )
CALLEE	2256:4	2256:4	12	OJPEGWriteStreamEoi
LEAF_NODE	2256:4	2256:4	13	OJPEGWriteStreamEoi
LEAF_NODE	2256:23	2256:23	12	(
ARGUMENT	2256:24	2256:24	12	tif
FIELD	2256:24	2256:24	13	tif
LEAF_NODE	2256:24	2256:24	14	tif
LEAF_NODE	2256:27	2256:27	12	,
ARGUMENT	2256:28	2256:28	12	mem
FIELD	2256:28	2256:28	13	mem
LEAF_NODE	2256:28	2256:28	14	mem
LEAF_NODE	2256:31	2256:31	12	,
ARGUMENT	2256:32	2256:32	12	len
FIELD	2256:32	2256:32	13	len
LEAF_NODE	2256:32	2256:32	14	len
LEAF_NODE	2256:35	2256:35	12	)
LEAF_NODE	2256:36	2256:36	10	;
JUMP_STATEMENT	2257:4	2257:9	9	break DESTINATION ;
KEYWORD	2257:4	2257:4	10	break
LEAF_NODE	2257:4	2257:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2257:9	2257:9	10	;
LEAF_NODE	2258:2	2258:2	8	}
LEAF_NODE	2259:1	2259:1	5	}
LEAF_NODE	2259:18	2259:18	3	;
JUMP_STATEMENT	2260:1	2260:10	3	return ( 1 ) ;
KEYWORD	2260:1	2260:1	4	return
LEAF_NODE	2260:1	2260:1	5	return
DESTINATION	2260:7	2260:7	4	( 1 )
EXPR	2260:7	2260:9	5	( 1 )
LEAF_NODE	2260:7	2260:7	6	(
FIELD	2260:8	2260:8	6	1
LEAF_NODE	2260:8	2260:8	7	1
LEAF_NODE	2260:9	2260:9	6	)
LEAF_NODE	2260:10	2260:10	4	;
LEAF_NODE	2261:0	2261:0	2	}
FUNCTION_DEF	2263:0	2273:0	1	
RETURN_TYPE	2263:0	2263:7	2	static void
LEAF_NODE	2263:0	2263:0	3	static
TYPE_NAME	2263:7	2263:7	3	void
LEAF_NODE	2263:7	2263:7	4	void
FUNCTION_NAME	2264:0	2264:0	2	OJPEGWriteStreamSoi
LEAF_NODE	2264:0	2264:0	3	OJPEGWriteStreamSoi
PARAMETER_LIST	2264:19	2264:54	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2264:19	2264:19	3	(
PARAMETER_DECL	2264:20	2264:26	3	TIFF * tif
TYPE	2264:20	2264:24	4	TIFF *
TYPE_NAME	2264:20	2264:20	5	TIFF
LEAF_NODE	2264:20	2264:20	6	TIFF
POINTER	2264:24	2264:24	5	*
LEAF_NODE	2264:24	2264:24	6	*
NAME	2264:26	2264:26	4	tif
LEAF_NODE	2264:26	2264:26	5	tif
LEAF_NODE	2264:29	2264:29	3	,
PARAMETER_DECL	2264:31	2264:38	3	void * * mem
TYPE	2264:31	2264:35	4	void * *
TYPE_NAME	2264:31	2264:31	5	void
LEAF_NODE	2264:31	2264:31	6	void
POINTER	2264:35	2264:36	5	* *
LEAF_NODE	2264:35	2264:35	6	*
LEAF_NODE	2264:36	2264:36	6	*
NAME	2264:38	2264:38	4	mem
LEAF_NODE	2264:38	2264:38	5	mem
LEAF_NODE	2264:41	2264:41	3	,
PARAMETER_DECL	2264:43	2264:51	3	uint32 * len
TYPE	2264:43	2264:49	4	uint32 *
TYPE_NAME	2264:43	2264:43	5	uint32
LEAF_NODE	2264:43	2264:43	6	uint32
POINTER	2264:49	2264:49	5	*
LEAF_NODE	2264:49	2264:49	6	*
NAME	2264:51	2264:51	4	len
LEAF_NODE	2264:51	2264:51	5	len
LEAF_NODE	2264:54	2264:54	3	)
LEAF_NODE	2265:0	2265:0	2	{
STATEMENTS	2266:1	2272:1	2	
SIMPLE_DECL	2266:1	2266:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2266:1	2266:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2266:1	2266:11	5	OJPEGState *
TYPE_NAME	2266:1	2266:1	6	OJPEGState
LEAF_NODE	2266:1	2266:1	7	OJPEGState
POINTER	2266:11	2266:11	6	*
LEAF_NODE	2266:11	2266:11	7	*
NAME	2266:13	2266:13	5	sp
LEAF_NODE	2266:13	2266:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2266:13	2266:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2266:13	2266:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2266:13	2266:13	7	sp
NAME	2266:13	2266:13	8	sp
LEAF_NODE	2266:13	2266:13	9	sp
ASSIGN_OP	2266:15	2266:15	7	=
LEAF_NODE	2266:15	2266:15	8	=
RVAL	2266:16	2266:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2266:16	2266:16	8	(
TYPE_NAME	2266:17	2266:17	8	OJPEGState
LEAF_NODE	2266:17	2266:17	9	OJPEGState
LEAF_NODE	2266:27	2266:27	8	*
LEAF_NODE	2266:28	2266:28	8	)
FIELD	2266:29	2266:34	8	tif -> tif_data
LEAF_NODE	2266:29	2266:29	9	tif
LEAF_NODE	2266:32	2266:32	9	->
LEAF_NODE	2266:34	2266:34	9	tif_data
LEAF_NODE	2266:42	2266:42	4	;
EXPR_STATEMENT	2267:1	2267:24	3	assert ( OJPEG_BUFFER >= 2 ) ;
EXPR	2267:1	2267:1	4	assert ( OJPEG_BUFFER >= 2 )
FUNCTION_CALL	2267:1	2267:23	5	assert ( OJPEG_BUFFER >= 2 )
CALLEE	2267:1	2267:1	6	assert
LEAF_NODE	2267:1	2267:1	7	assert
LEAF_NODE	2267:7	2267:7	6	(
ARGUMENT	2267:8	2267:22	6	OJPEG_BUFFER >= 2
FIELD	2267:8	2267:8	7	OJPEG_BUFFER
LEAF_NODE	2267:8	2267:8	8	OJPEG_BUFFER
REL_OPERATOR	2267:20	2267:20	7	>=
LEAF_NODE	2267:20	2267:20	8	>=
FIELD	2267:22	2267:22	7	2
LEAF_NODE	2267:22	2267:22	8	2
LEAF_NODE	2267:23	2267:23	6	)
LEAF_NODE	2267:24	2267:24	4	;
EXPR_STATEMENT	2268:1	2268:22	3	sp -> out_buffer [ 0 ] = 255 ;
EXPR	2268:1	2268:1	4	sp -> out_buffer [ 0 ] = 255
ASSIGN	2268:1	2268:19	5	sp -> out_buffer [ 0 ] = 255
LVAL	2268:1	2268:1	6	sp -> out_buffer [ 0 ]
FIELD	2268:1	2268:17	7	sp -> out_buffer [ 0 ]
LEAF_NODE	2268:1	2268:1	8	sp
LEAF_NODE	2268:3	2268:3	8	->
LEAF_NODE	2268:5	2268:5	8	out_buffer
LEAF_NODE	2268:15	2268:15	8	[
EXPR	2268:16	2268:16	8	0
FIELD	2268:16	2268:16	9	0
LEAF_NODE	2268:16	2268:16	10	0
LEAF_NODE	2268:17	2268:17	8	]
ASSIGN_OP	2268:18	2268:18	6	=
LEAF_NODE	2268:18	2268:18	7	=
RVAL	2268:19	2268:19	6	255
FIELD	2268:19	2268:19	7	255
LEAF_NODE	2268:19	2268:19	8	255
LEAF_NODE	2268:22	2268:22	4	;
EXPR_STATEMENT	2269:1	2269:34	3	sp -> out_buffer [ 1 ] = JPEG_MARKER_SOI ;
EXPR	2269:1	2269:1	4	sp -> out_buffer [ 1 ] = JPEG_MARKER_SOI
ASSIGN	2269:1	2269:19	5	sp -> out_buffer [ 1 ] = JPEG_MARKER_SOI
LVAL	2269:1	2269:1	6	sp -> out_buffer [ 1 ]
FIELD	2269:1	2269:17	7	sp -> out_buffer [ 1 ]
LEAF_NODE	2269:1	2269:1	8	sp
LEAF_NODE	2269:3	2269:3	8	->
LEAF_NODE	2269:5	2269:5	8	out_buffer
LEAF_NODE	2269:15	2269:15	8	[
EXPR	2269:16	2269:16	8	1
FIELD	2269:16	2269:16	9	1
LEAF_NODE	2269:16	2269:16	10	1
LEAF_NODE	2269:17	2269:17	8	]
ASSIGN_OP	2269:18	2269:18	6	=
LEAF_NODE	2269:18	2269:18	7	=
RVAL	2269:19	2269:19	6	JPEG_MARKER_SOI
FIELD	2269:19	2269:19	7	JPEG_MARKER_SOI
LEAF_NODE	2269:19	2269:19	8	JPEG_MARKER_SOI
LEAF_NODE	2269:34	2269:34	4	;
EXPR_STATEMENT	2270:1	2270:7	3	* len = 2 ;
EXPR	2270:1	2270:1	4	* len = 2
ASSIGN	2270:1	2270:6	5	* len = 2
LVAL	2270:1	2270:1	6	* len
UNARY_EXPR	2270:1	2270:2	7	* len
UNARY_OPERATOR	2270:1	2270:1	8	*
LEAF_NODE	2270:1	2270:1	9	*
FIELD	2270:2	2270:2	8	len
LEAF_NODE	2270:2	2270:2	9	len
ASSIGN_OP	2270:5	2270:5	6	=
LEAF_NODE	2270:5	2270:5	7	=
RVAL	2270:6	2270:6	6	2
FIELD	2270:6	2270:6	7	2
LEAF_NODE	2270:6	2270:6	8	2
LEAF_NODE	2270:7	2270:7	4	;
EXPR_STATEMENT	2271:1	2271:27	3	* mem = ( void * ) sp -> out_buffer ;
EXPR	2271:1	2271:1	4	* mem = ( void * ) sp -> out_buffer
ASSIGN	2271:1	2271:6	5	* mem = ( void * ) sp -> out_buffer
LVAL	2271:1	2271:1	6	* mem
UNARY_EXPR	2271:1	2271:2	7	* mem
UNARY_OPERATOR	2271:1	2271:1	8	*
LEAF_NODE	2271:1	2271:1	9	*
FIELD	2271:2	2271:2	8	mem
LEAF_NODE	2271:2	2271:2	9	mem
ASSIGN_OP	2271:5	2271:5	6	=
LEAF_NODE	2271:5	2271:5	7	=
RVAL	2271:6	2271:13	6	( void * ) sp -> out_buffer
LEAF_NODE	2271:6	2271:6	7	(
TYPE_NAME	2271:7	2271:7	7	void
LEAF_NODE	2271:7	2271:7	8	void
LEAF_NODE	2271:11	2271:11	7	*
LEAF_NODE	2271:12	2271:12	7	)
FIELD	2271:13	2271:17	7	sp -> out_buffer
LEAF_NODE	2271:13	2271:13	8	sp
LEAF_NODE	2271:15	2271:15	8	->
LEAF_NODE	2271:17	2271:17	8	out_buffer
LEAF_NODE	2271:27	2271:27	4	;
EXPR_STATEMENT	2272:1	2272:16	3	sp -> out_state ++ ;
EXPR	2272:1	2272:1	4	sp -> out_state ++
FIELD	2272:1	2272:14	5	sp -> out_state ++
LEAF_NODE	2272:1	2272:1	6	sp
LEAF_NODE	2272:3	2272:3	6	->
LEAF_NODE	2272:5	2272:5	6	out_state
LEAF_NODE	2272:14	2272:14	6	++
LEAF_NODE	2272:16	2272:16	4	;
LEAF_NODE	2273:0	2273:0	2	}
FUNCTION_DEF	2275:0	2285:0	1	
RETURN_TYPE	2275:0	2275:7	2	static void
LEAF_NODE	2275:0	2275:0	3	static
TYPE_NAME	2275:7	2275:7	3	void
LEAF_NODE	2275:7	2275:7	4	void
FUNCTION_NAME	2276:0	2276:0	2	OJPEGWriteStreamQTable
LEAF_NODE	2276:0	2276:0	3	OJPEGWriteStreamQTable
PARAMETER_LIST	2276:22	2276:76	2	( TIFF * tif , uint8 table_index , void * * mem , uint32 * len )
LEAF_NODE	2276:22	2276:22	3	(
PARAMETER_DECL	2276:23	2276:29	3	TIFF * tif
TYPE	2276:23	2276:27	4	TIFF *
TYPE_NAME	2276:23	2276:23	5	TIFF
LEAF_NODE	2276:23	2276:23	6	TIFF
POINTER	2276:27	2276:27	5	*
LEAF_NODE	2276:27	2276:27	6	*
NAME	2276:29	2276:29	4	tif
LEAF_NODE	2276:29	2276:29	5	tif
LEAF_NODE	2276:32	2276:32	3	,
PARAMETER_DECL	2276:34	2276:40	3	uint8 table_index
TYPE	2276:34	2276:34	4	uint8
TYPE_NAME	2276:34	2276:34	5	uint8
LEAF_NODE	2276:34	2276:34	6	uint8
NAME	2276:40	2276:40	4	table_index
LEAF_NODE	2276:40	2276:40	5	table_index
LEAF_NODE	2276:51	2276:51	3	,
PARAMETER_DECL	2276:53	2276:60	3	void * * mem
TYPE	2276:53	2276:57	4	void * *
TYPE_NAME	2276:53	2276:53	5	void
LEAF_NODE	2276:53	2276:53	6	void
POINTER	2276:57	2276:58	5	* *
LEAF_NODE	2276:57	2276:57	6	*
LEAF_NODE	2276:58	2276:58	6	*
NAME	2276:60	2276:60	4	mem
LEAF_NODE	2276:60	2276:60	5	mem
LEAF_NODE	2276:63	2276:63	3	,
PARAMETER_DECL	2276:65	2276:73	3	uint32 * len
TYPE	2276:65	2276:71	4	uint32 *
TYPE_NAME	2276:65	2276:65	5	uint32
LEAF_NODE	2276:65	2276:65	6	uint32
POINTER	2276:71	2276:71	5	*
LEAF_NODE	2276:71	2276:71	6	*
NAME	2276:73	2276:73	4	len
LEAF_NODE	2276:73	2276:73	5	len
LEAF_NODE	2276:76	2276:76	3	)
LEAF_NODE	2277:0	2277:0	2	{
STATEMENTS	2278:1	2284:1	2	
SIMPLE_DECL	2278:1	2278:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2278:1	2278:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2278:1	2278:11	5	OJPEGState *
TYPE_NAME	2278:1	2278:1	6	OJPEGState
LEAF_NODE	2278:1	2278:1	7	OJPEGState
POINTER	2278:11	2278:11	6	*
LEAF_NODE	2278:11	2278:11	7	*
NAME	2278:13	2278:13	5	sp
LEAF_NODE	2278:13	2278:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2278:13	2278:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2278:13	2278:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2278:13	2278:13	7	sp
NAME	2278:13	2278:13	8	sp
LEAF_NODE	2278:13	2278:13	9	sp
ASSIGN_OP	2278:15	2278:15	7	=
LEAF_NODE	2278:15	2278:15	8	=
RVAL	2278:16	2278:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2278:16	2278:16	8	(
TYPE_NAME	2278:17	2278:17	8	OJPEGState
LEAF_NODE	2278:17	2278:17	9	OJPEGState
LEAF_NODE	2278:27	2278:27	8	*
LEAF_NODE	2278:28	2278:28	8	)
FIELD	2278:29	2278:34	8	tif -> tif_data
LEAF_NODE	2278:29	2278:29	9	tif
LEAF_NODE	2278:32	2278:32	9	->
LEAF_NODE	2278:34	2278:34	9	tif_data
LEAF_NODE	2278:42	2278:42	4	;
SELECTION	2279:1	2280:1	3	
KEYWORD	2279:1	2279:1	4	if
LEAF_NODE	2279:1	2279:1	5	if
LEAF_NODE	2279:4	2279:4	4	(
CONDITION	2279:5	2279:5	4	sp -> qtable [ table_index ] != 0
EXPR	2279:5	2279:30	5	sp -> qtable [ table_index ] != 0
FIELD	2279:5	2279:27	6	sp -> qtable [ table_index ]
LEAF_NODE	2279:5	2279:5	7	sp
LEAF_NODE	2279:7	2279:7	7	->
LEAF_NODE	2279:9	2279:9	7	qtable
LEAF_NODE	2279:15	2279:15	7	[
EXPR	2279:16	2279:16	7	table_index
FIELD	2279:16	2279:16	8	table_index
LEAF_NODE	2279:16	2279:16	9	table_index
LEAF_NODE	2279:27	2279:27	7	]
EQ_OPERATOR	2279:28	2279:28	6	!=
LEAF_NODE	2279:28	2279:28	7	!=
FIELD	2279:30	2279:30	6	0
LEAF_NODE	2279:30	2279:30	7	0
LEAF_NODE	2279:31	2279:31	4	)
STATEMENTS	2280:1	2283:1	4	
LEAF_NODE	2280:1	2280:1	5	{
STATEMENTS	2281:2	2282:2	5	
EXPR_STATEMENT	2281:2	2281:54	6	* mem = ( void * ) ( sp -> qtable [ table_index ] + sizeof ( uint32 ) ) ;
EXPR	2281:2	2281:2	7	* mem = ( void * ) ( sp -> qtable [ table_index ] + sizeof ( uint32 ) )
ASSIGN	2281:2	2281:7	8	* mem = ( void * ) ( sp -> qtable [ table_index ] + sizeof ( uint32 ) )
LVAL	2281:2	2281:2	9	* mem
UNARY_EXPR	2281:2	2281:3	10	* mem
UNARY_OPERATOR	2281:2	2281:2	11	*
LEAF_NODE	2281:2	2281:2	12	*
FIELD	2281:3	2281:3	11	mem
LEAF_NODE	2281:3	2281:3	12	mem
ASSIGN_OP	2281:6	2281:6	9	=
LEAF_NODE	2281:6	2281:6	10	=
RVAL	2281:7	2281:53	9	( void * ) ( sp -> qtable [ table_index ] + sizeof ( uint32 ) )
LEAF_NODE	2281:7	2281:7	10	(
TYPE_NAME	2281:8	2281:8	10	void
LEAF_NODE	2281:8	2281:8	11	void
LEAF_NODE	2281:12	2281:12	10	*
LEAF_NODE	2281:13	2281:13	10	)
LEAF_NODE	2281:14	2281:14	10	(
FIELD	2281:15	2281:37	10	sp -> qtable [ table_index ]
LEAF_NODE	2281:15	2281:15	11	sp
LEAF_NODE	2281:17	2281:17	11	->
LEAF_NODE	2281:19	2281:19	11	qtable
LEAF_NODE	2281:25	2281:25	11	[
EXPR	2281:26	2281:26	11	table_index
FIELD	2281:26	2281:26	12	table_index
LEAF_NODE	2281:26	2281:26	13	table_index
LEAF_NODE	2281:37	2281:37	11	]
LEAF_NODE	2281:38	2281:38	10	+
FUNCTION_CALL	2281:39	2281:52	10	sizeof ( uint32 )
CALLEE	2281:39	2281:39	11	sizeof
LEAF_NODE	2281:39	2281:39	12	sizeof
LEAF_NODE	2281:45	2281:45	11	(
ARGUMENT	2281:46	2281:46	11	uint32
FIELD	2281:46	2281:46	12	uint32
LEAF_NODE	2281:46	2281:46	13	uint32
LEAF_NODE	2281:52	2281:52	11	)
LEAF_NODE	2281:53	2281:53	10	)
LEAF_NODE	2281:54	2281:54	7	;
EXPR_STATEMENT	2282:2	2282:57	6	* len = * ( ( uint32 * ) sp -> qtable [ table_index ] ) - sizeof ( uint32 ) ;
EXPR	2282:2	2282:2	7	* len = * ( ( uint32 * ) sp -> qtable [ table_index ] ) - sizeof ( uint32 )
ASSIGN	2282:2	2282:7	8	* len = * ( ( uint32 * ) sp -> qtable [ table_index ] ) - sizeof ( uint32 )
LVAL	2282:2	2282:2	9	* len
UNARY_EXPR	2282:2	2282:3	10	* len
UNARY_OPERATOR	2282:2	2282:2	11	*
LEAF_NODE	2282:2	2282:2	12	*
FIELD	2282:3	2282:3	11	len
LEAF_NODE	2282:3	2282:3	12	len
ASSIGN_OP	2282:6	2282:6	9	=
LEAF_NODE	2282:6	2282:6	10	=
RVAL	2282:7	2282:43	9	* ( ( uint32 * ) sp -> qtable [ table_index ] ) - sizeof ( uint32 )
UNARY_EXPR	2282:7	2282:41	10	* ( ( uint32 * ) sp -> qtable [ table_index ] )
UNARY_OPERATOR	2282:7	2282:7	11	*
LEAF_NODE	2282:7	2282:7	12	*
LEAF_NODE	2282:8	2282:8	11	(
LEAF_NODE	2282:9	2282:9	11	(
TYPE_NAME	2282:10	2282:10	11	uint32
LEAF_NODE	2282:10	2282:10	12	uint32
LEAF_NODE	2282:16	2282:16	11	*
LEAF_NODE	2282:17	2282:17	11	)
FIELD	2282:18	2282:40	11	sp -> qtable [ table_index ]
LEAF_NODE	2282:18	2282:18	12	sp
LEAF_NODE	2282:20	2282:20	12	->
LEAF_NODE	2282:22	2282:22	12	qtable
LEAF_NODE	2282:28	2282:28	12	[
EXPR	2282:29	2282:29	12	table_index
FIELD	2282:29	2282:29	13	table_index
LEAF_NODE	2282:29	2282:29	14	table_index
LEAF_NODE	2282:40	2282:40	12	]
LEAF_NODE	2282:41	2282:41	11	)
LEAF_NODE	2282:42	2282:42	10	-
FUNCTION_CALL	2282:43	2282:56	10	sizeof ( uint32 )
CALLEE	2282:43	2282:43	11	sizeof
LEAF_NODE	2282:43	2282:43	12	sizeof
LEAF_NODE	2282:49	2282:49	11	(
ARGUMENT	2282:50	2282:50	11	uint32
FIELD	2282:50	2282:50	12	uint32
LEAF_NODE	2282:50	2282:50	13	uint32
LEAF_NODE	2282:56	2282:56	11	)
LEAF_NODE	2282:57	2282:57	7	;
LEAF_NODE	2283:1	2283:1	5	}
EXPR_STATEMENT	2284:1	2284:16	3	sp -> out_state ++ ;
EXPR	2284:1	2284:1	4	sp -> out_state ++
FIELD	2284:1	2284:14	5	sp -> out_state ++
LEAF_NODE	2284:1	2284:1	6	sp
LEAF_NODE	2284:3	2284:3	6	->
LEAF_NODE	2284:5	2284:5	6	out_state
LEAF_NODE	2284:14	2284:14	6	++
LEAF_NODE	2284:16	2284:16	4	;
LEAF_NODE	2285:0	2285:0	2	}
FUNCTION_DEF	2287:0	2297:0	1	
RETURN_TYPE	2287:0	2287:7	2	static void
LEAF_NODE	2287:0	2287:0	3	static
TYPE_NAME	2287:7	2287:7	3	void
LEAF_NODE	2287:7	2287:7	4	void
FUNCTION_NAME	2288:0	2288:0	2	OJPEGWriteStreamDcTable
LEAF_NODE	2288:0	2288:0	3	OJPEGWriteStreamDcTable
PARAMETER_LIST	2288:23	2288:77	2	( TIFF * tif , uint8 table_index , void * * mem , uint32 * len )
LEAF_NODE	2288:23	2288:23	3	(
PARAMETER_DECL	2288:24	2288:30	3	TIFF * tif
TYPE	2288:24	2288:28	4	TIFF *
TYPE_NAME	2288:24	2288:24	5	TIFF
LEAF_NODE	2288:24	2288:24	6	TIFF
POINTER	2288:28	2288:28	5	*
LEAF_NODE	2288:28	2288:28	6	*
NAME	2288:30	2288:30	4	tif
LEAF_NODE	2288:30	2288:30	5	tif
LEAF_NODE	2288:33	2288:33	3	,
PARAMETER_DECL	2288:35	2288:41	3	uint8 table_index
TYPE	2288:35	2288:35	4	uint8
TYPE_NAME	2288:35	2288:35	5	uint8
LEAF_NODE	2288:35	2288:35	6	uint8
NAME	2288:41	2288:41	4	table_index
LEAF_NODE	2288:41	2288:41	5	table_index
LEAF_NODE	2288:52	2288:52	3	,
PARAMETER_DECL	2288:54	2288:61	3	void * * mem
TYPE	2288:54	2288:58	4	void * *
TYPE_NAME	2288:54	2288:54	5	void
LEAF_NODE	2288:54	2288:54	6	void
POINTER	2288:58	2288:59	5	* *
LEAF_NODE	2288:58	2288:58	6	*
LEAF_NODE	2288:59	2288:59	6	*
NAME	2288:61	2288:61	4	mem
LEAF_NODE	2288:61	2288:61	5	mem
LEAF_NODE	2288:64	2288:64	3	,
PARAMETER_DECL	2288:66	2288:74	3	uint32 * len
TYPE	2288:66	2288:72	4	uint32 *
TYPE_NAME	2288:66	2288:66	5	uint32
LEAF_NODE	2288:66	2288:66	6	uint32
POINTER	2288:72	2288:72	5	*
LEAF_NODE	2288:72	2288:72	6	*
NAME	2288:74	2288:74	4	len
LEAF_NODE	2288:74	2288:74	5	len
LEAF_NODE	2288:77	2288:77	3	)
LEAF_NODE	2289:0	2289:0	2	{
STATEMENTS	2290:1	2296:1	2	
SIMPLE_DECL	2290:1	2290:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2290:1	2290:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2290:1	2290:11	5	OJPEGState *
TYPE_NAME	2290:1	2290:1	6	OJPEGState
LEAF_NODE	2290:1	2290:1	7	OJPEGState
POINTER	2290:11	2290:11	6	*
LEAF_NODE	2290:11	2290:11	7	*
NAME	2290:13	2290:13	5	sp
LEAF_NODE	2290:13	2290:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2290:13	2290:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2290:13	2290:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2290:13	2290:13	7	sp
NAME	2290:13	2290:13	8	sp
LEAF_NODE	2290:13	2290:13	9	sp
ASSIGN_OP	2290:15	2290:15	7	=
LEAF_NODE	2290:15	2290:15	8	=
RVAL	2290:16	2290:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2290:16	2290:16	8	(
TYPE_NAME	2290:17	2290:17	8	OJPEGState
LEAF_NODE	2290:17	2290:17	9	OJPEGState
LEAF_NODE	2290:27	2290:27	8	*
LEAF_NODE	2290:28	2290:28	8	)
FIELD	2290:29	2290:34	8	tif -> tif_data
LEAF_NODE	2290:29	2290:29	9	tif
LEAF_NODE	2290:32	2290:32	9	->
LEAF_NODE	2290:34	2290:34	9	tif_data
LEAF_NODE	2290:42	2290:42	4	;
SELECTION	2291:1	2292:1	3	
KEYWORD	2291:1	2291:1	4	if
LEAF_NODE	2291:1	2291:1	5	if
LEAF_NODE	2291:4	2291:4	4	(
CONDITION	2291:5	2291:5	4	sp -> dctable [ table_index ] != 0
EXPR	2291:5	2291:31	5	sp -> dctable [ table_index ] != 0
FIELD	2291:5	2291:28	6	sp -> dctable [ table_index ]
LEAF_NODE	2291:5	2291:5	7	sp
LEAF_NODE	2291:7	2291:7	7	->
LEAF_NODE	2291:9	2291:9	7	dctable
LEAF_NODE	2291:16	2291:16	7	[
EXPR	2291:17	2291:17	7	table_index
FIELD	2291:17	2291:17	8	table_index
LEAF_NODE	2291:17	2291:17	9	table_index
LEAF_NODE	2291:28	2291:28	7	]
EQ_OPERATOR	2291:29	2291:29	6	!=
LEAF_NODE	2291:29	2291:29	7	!=
FIELD	2291:31	2291:31	6	0
LEAF_NODE	2291:31	2291:31	7	0
LEAF_NODE	2291:32	2291:32	4	)
STATEMENTS	2292:1	2295:1	4	
LEAF_NODE	2292:1	2292:1	5	{
STATEMENTS	2293:2	2294:2	5	
EXPR_STATEMENT	2293:2	2293:55	6	* mem = ( void * ) ( sp -> dctable [ table_index ] + sizeof ( uint32 ) ) ;
EXPR	2293:2	2293:2	7	* mem = ( void * ) ( sp -> dctable [ table_index ] + sizeof ( uint32 ) )
ASSIGN	2293:2	2293:7	8	* mem = ( void * ) ( sp -> dctable [ table_index ] + sizeof ( uint32 ) )
LVAL	2293:2	2293:2	9	* mem
UNARY_EXPR	2293:2	2293:3	10	* mem
UNARY_OPERATOR	2293:2	2293:2	11	*
LEAF_NODE	2293:2	2293:2	12	*
FIELD	2293:3	2293:3	11	mem
LEAF_NODE	2293:3	2293:3	12	mem
ASSIGN_OP	2293:6	2293:6	9	=
LEAF_NODE	2293:6	2293:6	10	=
RVAL	2293:7	2293:54	9	( void * ) ( sp -> dctable [ table_index ] + sizeof ( uint32 ) )
LEAF_NODE	2293:7	2293:7	10	(
TYPE_NAME	2293:8	2293:8	10	void
LEAF_NODE	2293:8	2293:8	11	void
LEAF_NODE	2293:12	2293:12	10	*
LEAF_NODE	2293:13	2293:13	10	)
LEAF_NODE	2293:14	2293:14	10	(
FIELD	2293:15	2293:38	10	sp -> dctable [ table_index ]
LEAF_NODE	2293:15	2293:15	11	sp
LEAF_NODE	2293:17	2293:17	11	->
LEAF_NODE	2293:19	2293:19	11	dctable
LEAF_NODE	2293:26	2293:26	11	[
EXPR	2293:27	2293:27	11	table_index
FIELD	2293:27	2293:27	12	table_index
LEAF_NODE	2293:27	2293:27	13	table_index
LEAF_NODE	2293:38	2293:38	11	]
LEAF_NODE	2293:39	2293:39	10	+
FUNCTION_CALL	2293:40	2293:53	10	sizeof ( uint32 )
CALLEE	2293:40	2293:40	11	sizeof
LEAF_NODE	2293:40	2293:40	12	sizeof
LEAF_NODE	2293:46	2293:46	11	(
ARGUMENT	2293:47	2293:47	11	uint32
FIELD	2293:47	2293:47	12	uint32
LEAF_NODE	2293:47	2293:47	13	uint32
LEAF_NODE	2293:53	2293:53	11	)
LEAF_NODE	2293:54	2293:54	10	)
LEAF_NODE	2293:55	2293:55	7	;
EXPR_STATEMENT	2294:2	2294:58	6	* len = * ( ( uint32 * ) sp -> dctable [ table_index ] ) - sizeof ( uint32 ) ;
EXPR	2294:2	2294:2	7	* len = * ( ( uint32 * ) sp -> dctable [ table_index ] ) - sizeof ( uint32 )
ASSIGN	2294:2	2294:7	8	* len = * ( ( uint32 * ) sp -> dctable [ table_index ] ) - sizeof ( uint32 )
LVAL	2294:2	2294:2	9	* len
UNARY_EXPR	2294:2	2294:3	10	* len
UNARY_OPERATOR	2294:2	2294:2	11	*
LEAF_NODE	2294:2	2294:2	12	*
FIELD	2294:3	2294:3	11	len
LEAF_NODE	2294:3	2294:3	12	len
ASSIGN_OP	2294:6	2294:6	9	=
LEAF_NODE	2294:6	2294:6	10	=
RVAL	2294:7	2294:44	9	* ( ( uint32 * ) sp -> dctable [ table_index ] ) - sizeof ( uint32 )
UNARY_EXPR	2294:7	2294:42	10	* ( ( uint32 * ) sp -> dctable [ table_index ] )
UNARY_OPERATOR	2294:7	2294:7	11	*
LEAF_NODE	2294:7	2294:7	12	*
LEAF_NODE	2294:8	2294:8	11	(
LEAF_NODE	2294:9	2294:9	11	(
TYPE_NAME	2294:10	2294:10	11	uint32
LEAF_NODE	2294:10	2294:10	12	uint32
LEAF_NODE	2294:16	2294:16	11	*
LEAF_NODE	2294:17	2294:17	11	)
FIELD	2294:18	2294:41	11	sp -> dctable [ table_index ]
LEAF_NODE	2294:18	2294:18	12	sp
LEAF_NODE	2294:20	2294:20	12	->
LEAF_NODE	2294:22	2294:22	12	dctable
LEAF_NODE	2294:29	2294:29	12	[
EXPR	2294:30	2294:30	12	table_index
FIELD	2294:30	2294:30	13	table_index
LEAF_NODE	2294:30	2294:30	14	table_index
LEAF_NODE	2294:41	2294:41	12	]
LEAF_NODE	2294:42	2294:42	11	)
LEAF_NODE	2294:43	2294:43	10	-
FUNCTION_CALL	2294:44	2294:57	10	sizeof ( uint32 )
CALLEE	2294:44	2294:44	11	sizeof
LEAF_NODE	2294:44	2294:44	12	sizeof
LEAF_NODE	2294:50	2294:50	11	(
ARGUMENT	2294:51	2294:51	11	uint32
FIELD	2294:51	2294:51	12	uint32
LEAF_NODE	2294:51	2294:51	13	uint32
LEAF_NODE	2294:57	2294:57	11	)
LEAF_NODE	2294:58	2294:58	7	;
LEAF_NODE	2295:1	2295:1	5	}
EXPR_STATEMENT	2296:1	2296:16	3	sp -> out_state ++ ;
EXPR	2296:1	2296:1	4	sp -> out_state ++
FIELD	2296:1	2296:14	5	sp -> out_state ++
LEAF_NODE	2296:1	2296:1	6	sp
LEAF_NODE	2296:3	2296:3	6	->
LEAF_NODE	2296:5	2296:5	6	out_state
LEAF_NODE	2296:14	2296:14	6	++
LEAF_NODE	2296:16	2296:16	4	;
LEAF_NODE	2297:0	2297:0	2	}
FUNCTION_DEF	2299:0	2309:0	1	
RETURN_TYPE	2299:0	2299:7	2	static void
LEAF_NODE	2299:0	2299:0	3	static
TYPE_NAME	2299:7	2299:7	3	void
LEAF_NODE	2299:7	2299:7	4	void
FUNCTION_NAME	2300:0	2300:0	2	OJPEGWriteStreamAcTable
LEAF_NODE	2300:0	2300:0	3	OJPEGWriteStreamAcTable
PARAMETER_LIST	2300:23	2300:77	2	( TIFF * tif , uint8 table_index , void * * mem , uint32 * len )
LEAF_NODE	2300:23	2300:23	3	(
PARAMETER_DECL	2300:24	2300:30	3	TIFF * tif
TYPE	2300:24	2300:28	4	TIFF *
TYPE_NAME	2300:24	2300:24	5	TIFF
LEAF_NODE	2300:24	2300:24	6	TIFF
POINTER	2300:28	2300:28	5	*
LEAF_NODE	2300:28	2300:28	6	*
NAME	2300:30	2300:30	4	tif
LEAF_NODE	2300:30	2300:30	5	tif
LEAF_NODE	2300:33	2300:33	3	,
PARAMETER_DECL	2300:35	2300:41	3	uint8 table_index
TYPE	2300:35	2300:35	4	uint8
TYPE_NAME	2300:35	2300:35	5	uint8
LEAF_NODE	2300:35	2300:35	6	uint8
NAME	2300:41	2300:41	4	table_index
LEAF_NODE	2300:41	2300:41	5	table_index
LEAF_NODE	2300:52	2300:52	3	,
PARAMETER_DECL	2300:54	2300:61	3	void * * mem
TYPE	2300:54	2300:58	4	void * *
TYPE_NAME	2300:54	2300:54	5	void
LEAF_NODE	2300:54	2300:54	6	void
POINTER	2300:58	2300:59	5	* *
LEAF_NODE	2300:58	2300:58	6	*
LEAF_NODE	2300:59	2300:59	6	*
NAME	2300:61	2300:61	4	mem
LEAF_NODE	2300:61	2300:61	5	mem
LEAF_NODE	2300:64	2300:64	3	,
PARAMETER_DECL	2300:66	2300:74	3	uint32 * len
TYPE	2300:66	2300:72	4	uint32 *
TYPE_NAME	2300:66	2300:66	5	uint32
LEAF_NODE	2300:66	2300:66	6	uint32
POINTER	2300:72	2300:72	5	*
LEAF_NODE	2300:72	2300:72	6	*
NAME	2300:74	2300:74	4	len
LEAF_NODE	2300:74	2300:74	5	len
LEAF_NODE	2300:77	2300:77	3	)
LEAF_NODE	2301:0	2301:0	2	{
STATEMENTS	2302:1	2308:1	2	
SIMPLE_DECL	2302:1	2302:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2302:1	2302:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2302:1	2302:11	5	OJPEGState *
TYPE_NAME	2302:1	2302:1	6	OJPEGState
LEAF_NODE	2302:1	2302:1	7	OJPEGState
POINTER	2302:11	2302:11	6	*
LEAF_NODE	2302:11	2302:11	7	*
NAME	2302:13	2302:13	5	sp
LEAF_NODE	2302:13	2302:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2302:13	2302:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2302:13	2302:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2302:13	2302:13	7	sp
NAME	2302:13	2302:13	8	sp
LEAF_NODE	2302:13	2302:13	9	sp
ASSIGN_OP	2302:15	2302:15	7	=
LEAF_NODE	2302:15	2302:15	8	=
RVAL	2302:16	2302:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2302:16	2302:16	8	(
TYPE_NAME	2302:17	2302:17	8	OJPEGState
LEAF_NODE	2302:17	2302:17	9	OJPEGState
LEAF_NODE	2302:27	2302:27	8	*
LEAF_NODE	2302:28	2302:28	8	)
FIELD	2302:29	2302:34	8	tif -> tif_data
LEAF_NODE	2302:29	2302:29	9	tif
LEAF_NODE	2302:32	2302:32	9	->
LEAF_NODE	2302:34	2302:34	9	tif_data
LEAF_NODE	2302:42	2302:42	4	;
SELECTION	2303:1	2304:1	3	
KEYWORD	2303:1	2303:1	4	if
LEAF_NODE	2303:1	2303:1	5	if
LEAF_NODE	2303:4	2303:4	4	(
CONDITION	2303:5	2303:5	4	sp -> actable [ table_index ] != 0
EXPR	2303:5	2303:31	5	sp -> actable [ table_index ] != 0
FIELD	2303:5	2303:28	6	sp -> actable [ table_index ]
LEAF_NODE	2303:5	2303:5	7	sp
LEAF_NODE	2303:7	2303:7	7	->
LEAF_NODE	2303:9	2303:9	7	actable
LEAF_NODE	2303:16	2303:16	7	[
EXPR	2303:17	2303:17	7	table_index
FIELD	2303:17	2303:17	8	table_index
LEAF_NODE	2303:17	2303:17	9	table_index
LEAF_NODE	2303:28	2303:28	7	]
EQ_OPERATOR	2303:29	2303:29	6	!=
LEAF_NODE	2303:29	2303:29	7	!=
FIELD	2303:31	2303:31	6	0
LEAF_NODE	2303:31	2303:31	7	0
LEAF_NODE	2303:32	2303:32	4	)
STATEMENTS	2304:1	2307:1	4	
LEAF_NODE	2304:1	2304:1	5	{
STATEMENTS	2305:2	2306:2	5	
EXPR_STATEMENT	2305:2	2305:55	6	* mem = ( void * ) ( sp -> actable [ table_index ] + sizeof ( uint32 ) ) ;
EXPR	2305:2	2305:2	7	* mem = ( void * ) ( sp -> actable [ table_index ] + sizeof ( uint32 ) )
ASSIGN	2305:2	2305:7	8	* mem = ( void * ) ( sp -> actable [ table_index ] + sizeof ( uint32 ) )
LVAL	2305:2	2305:2	9	* mem
UNARY_EXPR	2305:2	2305:3	10	* mem
UNARY_OPERATOR	2305:2	2305:2	11	*
LEAF_NODE	2305:2	2305:2	12	*
FIELD	2305:3	2305:3	11	mem
LEAF_NODE	2305:3	2305:3	12	mem
ASSIGN_OP	2305:6	2305:6	9	=
LEAF_NODE	2305:6	2305:6	10	=
RVAL	2305:7	2305:54	9	( void * ) ( sp -> actable [ table_index ] + sizeof ( uint32 ) )
LEAF_NODE	2305:7	2305:7	10	(
TYPE_NAME	2305:8	2305:8	10	void
LEAF_NODE	2305:8	2305:8	11	void
LEAF_NODE	2305:12	2305:12	10	*
LEAF_NODE	2305:13	2305:13	10	)
LEAF_NODE	2305:14	2305:14	10	(
FIELD	2305:15	2305:38	10	sp -> actable [ table_index ]
LEAF_NODE	2305:15	2305:15	11	sp
LEAF_NODE	2305:17	2305:17	11	->
LEAF_NODE	2305:19	2305:19	11	actable
LEAF_NODE	2305:26	2305:26	11	[
EXPR	2305:27	2305:27	11	table_index
FIELD	2305:27	2305:27	12	table_index
LEAF_NODE	2305:27	2305:27	13	table_index
LEAF_NODE	2305:38	2305:38	11	]
LEAF_NODE	2305:39	2305:39	10	+
FUNCTION_CALL	2305:40	2305:53	10	sizeof ( uint32 )
CALLEE	2305:40	2305:40	11	sizeof
LEAF_NODE	2305:40	2305:40	12	sizeof
LEAF_NODE	2305:46	2305:46	11	(
ARGUMENT	2305:47	2305:47	11	uint32
FIELD	2305:47	2305:47	12	uint32
LEAF_NODE	2305:47	2305:47	13	uint32
LEAF_NODE	2305:53	2305:53	11	)
LEAF_NODE	2305:54	2305:54	10	)
LEAF_NODE	2305:55	2305:55	7	;
EXPR_STATEMENT	2306:2	2306:58	6	* len = * ( ( uint32 * ) sp -> actable [ table_index ] ) - sizeof ( uint32 ) ;
EXPR	2306:2	2306:2	7	* len = * ( ( uint32 * ) sp -> actable [ table_index ] ) - sizeof ( uint32 )
ASSIGN	2306:2	2306:7	8	* len = * ( ( uint32 * ) sp -> actable [ table_index ] ) - sizeof ( uint32 )
LVAL	2306:2	2306:2	9	* len
UNARY_EXPR	2306:2	2306:3	10	* len
UNARY_OPERATOR	2306:2	2306:2	11	*
LEAF_NODE	2306:2	2306:2	12	*
FIELD	2306:3	2306:3	11	len
LEAF_NODE	2306:3	2306:3	12	len
ASSIGN_OP	2306:6	2306:6	9	=
LEAF_NODE	2306:6	2306:6	10	=
RVAL	2306:7	2306:44	9	* ( ( uint32 * ) sp -> actable [ table_index ] ) - sizeof ( uint32 )
UNARY_EXPR	2306:7	2306:42	10	* ( ( uint32 * ) sp -> actable [ table_index ] )
UNARY_OPERATOR	2306:7	2306:7	11	*
LEAF_NODE	2306:7	2306:7	12	*
LEAF_NODE	2306:8	2306:8	11	(
LEAF_NODE	2306:9	2306:9	11	(
TYPE_NAME	2306:10	2306:10	11	uint32
LEAF_NODE	2306:10	2306:10	12	uint32
LEAF_NODE	2306:16	2306:16	11	*
LEAF_NODE	2306:17	2306:17	11	)
FIELD	2306:18	2306:41	11	sp -> actable [ table_index ]
LEAF_NODE	2306:18	2306:18	12	sp
LEAF_NODE	2306:20	2306:20	12	->
LEAF_NODE	2306:22	2306:22	12	actable
LEAF_NODE	2306:29	2306:29	12	[
EXPR	2306:30	2306:30	12	table_index
FIELD	2306:30	2306:30	13	table_index
LEAF_NODE	2306:30	2306:30	14	table_index
LEAF_NODE	2306:41	2306:41	12	]
LEAF_NODE	2306:42	2306:42	11	)
LEAF_NODE	2306:43	2306:43	10	-
FUNCTION_CALL	2306:44	2306:57	10	sizeof ( uint32 )
CALLEE	2306:44	2306:44	11	sizeof
LEAF_NODE	2306:44	2306:44	12	sizeof
LEAF_NODE	2306:50	2306:50	11	(
ARGUMENT	2306:51	2306:51	11	uint32
FIELD	2306:51	2306:51	12	uint32
LEAF_NODE	2306:51	2306:51	13	uint32
LEAF_NODE	2306:57	2306:57	11	)
LEAF_NODE	2306:58	2306:58	7	;
LEAF_NODE	2307:1	2307:1	5	}
EXPR_STATEMENT	2308:1	2308:16	3	sp -> out_state ++ ;
EXPR	2308:1	2308:1	4	sp -> out_state ++
FIELD	2308:1	2308:14	5	sp -> out_state ++
LEAF_NODE	2308:1	2308:1	6	sp
LEAF_NODE	2308:3	2308:3	6	->
LEAF_NODE	2308:5	2308:5	6	out_state
LEAF_NODE	2308:14	2308:14	6	++
LEAF_NODE	2308:16	2308:16	4	;
LEAF_NODE	2309:0	2309:0	2	}
FUNCTION_DEF	2311:0	2328:0	1	
RETURN_TYPE	2311:0	2311:7	2	static void
LEAF_NODE	2311:0	2311:0	3	static
TYPE_NAME	2311:7	2311:7	3	void
LEAF_NODE	2311:7	2311:7	4	void
FUNCTION_NAME	2312:0	2312:0	2	OJPEGWriteStreamDri
LEAF_NODE	2312:0	2312:0	3	OJPEGWriteStreamDri
PARAMETER_LIST	2312:19	2312:54	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2312:19	2312:19	3	(
PARAMETER_DECL	2312:20	2312:26	3	TIFF * tif
TYPE	2312:20	2312:24	4	TIFF *
TYPE_NAME	2312:20	2312:20	5	TIFF
LEAF_NODE	2312:20	2312:20	6	TIFF
POINTER	2312:24	2312:24	5	*
LEAF_NODE	2312:24	2312:24	6	*
NAME	2312:26	2312:26	4	tif
LEAF_NODE	2312:26	2312:26	5	tif
LEAF_NODE	2312:29	2312:29	3	,
PARAMETER_DECL	2312:31	2312:38	3	void * * mem
TYPE	2312:31	2312:35	4	void * *
TYPE_NAME	2312:31	2312:31	5	void
LEAF_NODE	2312:31	2312:31	6	void
POINTER	2312:35	2312:36	5	* *
LEAF_NODE	2312:35	2312:35	6	*
LEAF_NODE	2312:36	2312:36	6	*
NAME	2312:38	2312:38	4	mem
LEAF_NODE	2312:38	2312:38	5	mem
LEAF_NODE	2312:41	2312:41	3	,
PARAMETER_DECL	2312:43	2312:51	3	uint32 * len
TYPE	2312:43	2312:49	4	uint32 *
TYPE_NAME	2312:43	2312:43	5	uint32
LEAF_NODE	2312:43	2312:43	6	uint32
POINTER	2312:49	2312:49	5	*
LEAF_NODE	2312:49	2312:49	6	*
NAME	2312:51	2312:51	4	len
LEAF_NODE	2312:51	2312:51	5	len
LEAF_NODE	2312:54	2312:54	3	)
LEAF_NODE	2313:0	2313:0	2	{
STATEMENTS	2314:1	2327:1	2	
SIMPLE_DECL	2314:1	2314:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2314:1	2314:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2314:1	2314:11	5	OJPEGState *
TYPE_NAME	2314:1	2314:1	6	OJPEGState
LEAF_NODE	2314:1	2314:1	7	OJPEGState
POINTER	2314:11	2314:11	6	*
LEAF_NODE	2314:11	2314:11	7	*
NAME	2314:13	2314:13	5	sp
LEAF_NODE	2314:13	2314:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2314:13	2314:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2314:13	2314:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2314:13	2314:13	7	sp
NAME	2314:13	2314:13	8	sp
LEAF_NODE	2314:13	2314:13	9	sp
ASSIGN_OP	2314:15	2314:15	7	=
LEAF_NODE	2314:15	2314:15	8	=
RVAL	2314:16	2314:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2314:16	2314:16	8	(
TYPE_NAME	2314:17	2314:17	8	OJPEGState
LEAF_NODE	2314:17	2314:17	9	OJPEGState
LEAF_NODE	2314:27	2314:27	8	*
LEAF_NODE	2314:28	2314:28	8	)
FIELD	2314:29	2314:34	8	tif -> tif_data
LEAF_NODE	2314:29	2314:29	9	tif
LEAF_NODE	2314:32	2314:32	9	->
LEAF_NODE	2314:34	2314:34	9	tif_data
LEAF_NODE	2314:42	2314:42	4	;
EXPR_STATEMENT	2315:1	2315:24	3	assert ( OJPEG_BUFFER >= 6 ) ;
EXPR	2315:1	2315:1	4	assert ( OJPEG_BUFFER >= 6 )
FUNCTION_CALL	2315:1	2315:23	5	assert ( OJPEG_BUFFER >= 6 )
CALLEE	2315:1	2315:1	6	assert
LEAF_NODE	2315:1	2315:1	7	assert
LEAF_NODE	2315:7	2315:7	6	(
ARGUMENT	2315:8	2315:22	6	OJPEG_BUFFER >= 6
FIELD	2315:8	2315:8	7	OJPEG_BUFFER
LEAF_NODE	2315:8	2315:8	8	OJPEG_BUFFER
REL_OPERATOR	2315:20	2315:20	7	>=
LEAF_NODE	2315:20	2315:20	8	>=
FIELD	2315:22	2315:22	7	6
LEAF_NODE	2315:22	2315:22	8	6
LEAF_NODE	2315:23	2315:23	6	)
LEAF_NODE	2315:24	2315:24	4	;
SELECTION	2316:1	2317:1	3	
KEYWORD	2316:1	2316:1	4	if
LEAF_NODE	2316:1	2316:1	5	if
LEAF_NODE	2316:4	2316:4	4	(
CONDITION	2316:5	2316:5	4	sp -> restart_interval != 0
EXPR	2316:5	2316:27	5	sp -> restart_interval != 0
FIELD	2316:5	2316:9	6	sp -> restart_interval
LEAF_NODE	2316:5	2316:5	7	sp
LEAF_NODE	2316:7	2316:7	7	->
LEAF_NODE	2316:9	2316:9	7	restart_interval
EQ_OPERATOR	2316:25	2316:25	6	!=
LEAF_NODE	2316:25	2316:25	7	!=
FIELD	2316:27	2316:27	6	0
LEAF_NODE	2316:27	2316:27	7	0
LEAF_NODE	2316:28	2316:28	4	)
STATEMENTS	2317:1	2326:1	4	
LEAF_NODE	2317:1	2317:1	5	{
STATEMENTS	2318:2	2325:2	5	
EXPR_STATEMENT	2318:2	2318:23	6	sp -> out_buffer [ 0 ] = 255 ;
EXPR	2318:2	2318:2	7	sp -> out_buffer [ 0 ] = 255
ASSIGN	2318:2	2318:20	8	sp -> out_buffer [ 0 ] = 255
LVAL	2318:2	2318:2	9	sp -> out_buffer [ 0 ]
FIELD	2318:2	2318:18	10	sp -> out_buffer [ 0 ]
LEAF_NODE	2318:2	2318:2	11	sp
LEAF_NODE	2318:4	2318:4	11	->
LEAF_NODE	2318:6	2318:6	11	out_buffer
LEAF_NODE	2318:16	2318:16	11	[
EXPR	2318:17	2318:17	11	0
FIELD	2318:17	2318:17	12	0
LEAF_NODE	2318:17	2318:17	13	0
LEAF_NODE	2318:18	2318:18	11	]
ASSIGN_OP	2318:19	2318:19	9	=
LEAF_NODE	2318:19	2318:19	10	=
RVAL	2318:20	2318:20	9	255
FIELD	2318:20	2318:20	10	255
LEAF_NODE	2318:20	2318:20	11	255
LEAF_NODE	2318:23	2318:23	7	;
EXPR_STATEMENT	2319:2	2319:35	6	sp -> out_buffer [ 1 ] = JPEG_MARKER_DRI ;
EXPR	2319:2	2319:2	7	sp -> out_buffer [ 1 ] = JPEG_MARKER_DRI
ASSIGN	2319:2	2319:20	8	sp -> out_buffer [ 1 ] = JPEG_MARKER_DRI
LVAL	2319:2	2319:2	9	sp -> out_buffer [ 1 ]
FIELD	2319:2	2319:18	10	sp -> out_buffer [ 1 ]
LEAF_NODE	2319:2	2319:2	11	sp
LEAF_NODE	2319:4	2319:4	11	->
LEAF_NODE	2319:6	2319:6	11	out_buffer
LEAF_NODE	2319:16	2319:16	11	[
EXPR	2319:17	2319:17	11	1
FIELD	2319:17	2319:17	12	1
LEAF_NODE	2319:17	2319:17	13	1
LEAF_NODE	2319:18	2319:18	11	]
ASSIGN_OP	2319:19	2319:19	9	=
LEAF_NODE	2319:19	2319:19	10	=
RVAL	2319:20	2319:20	9	JPEG_MARKER_DRI
FIELD	2319:20	2319:20	10	JPEG_MARKER_DRI
LEAF_NODE	2319:20	2319:20	11	JPEG_MARKER_DRI
LEAF_NODE	2319:35	2319:35	7	;
EXPR_STATEMENT	2320:2	2320:21	6	sp -> out_buffer [ 2 ] = 0 ;
EXPR	2320:2	2320:2	7	sp -> out_buffer [ 2 ] = 0
ASSIGN	2320:2	2320:20	8	sp -> out_buffer [ 2 ] = 0
LVAL	2320:2	2320:2	9	sp -> out_buffer [ 2 ]
FIELD	2320:2	2320:18	10	sp -> out_buffer [ 2 ]
LEAF_NODE	2320:2	2320:2	11	sp
LEAF_NODE	2320:4	2320:4	11	->
LEAF_NODE	2320:6	2320:6	11	out_buffer
LEAF_NODE	2320:16	2320:16	11	[
EXPR	2320:17	2320:17	11	2
FIELD	2320:17	2320:17	12	2
LEAF_NODE	2320:17	2320:17	13	2
LEAF_NODE	2320:18	2320:18	11	]
ASSIGN_OP	2320:19	2320:19	9	=
LEAF_NODE	2320:19	2320:19	10	=
RVAL	2320:20	2320:20	9	0
FIELD	2320:20	2320:20	10	0
LEAF_NODE	2320:20	2320:20	11	0
LEAF_NODE	2320:21	2320:21	7	;
EXPR_STATEMENT	2321:2	2321:21	6	sp -> out_buffer [ 3 ] = 4 ;
EXPR	2321:2	2321:2	7	sp -> out_buffer [ 3 ] = 4
ASSIGN	2321:2	2321:20	8	sp -> out_buffer [ 3 ] = 4
LVAL	2321:2	2321:2	9	sp -> out_buffer [ 3 ]
FIELD	2321:2	2321:18	10	sp -> out_buffer [ 3 ]
LEAF_NODE	2321:2	2321:2	11	sp
LEAF_NODE	2321:4	2321:4	11	->
LEAF_NODE	2321:6	2321:6	11	out_buffer
LEAF_NODE	2321:16	2321:16	11	[
EXPR	2321:17	2321:17	11	3
FIELD	2321:17	2321:17	12	3
LEAF_NODE	2321:17	2321:17	13	3
LEAF_NODE	2321:18	2321:18	11	]
ASSIGN_OP	2321:19	2321:19	9	=
LEAF_NODE	2321:19	2321:19	10	=
RVAL	2321:20	2321:20	9	4
FIELD	2321:20	2321:20	10	4
LEAF_NODE	2321:20	2321:20	11	4
LEAF_NODE	2321:21	2321:21	7	;
EXPR_STATEMENT	2322:2	2322:45	6	sp -> out_buffer [ 4 ] = ( sp -> restart_interval >> 8 ) ;
EXPR	2322:2	2322:2	7	sp -> out_buffer [ 4 ] = ( sp -> restart_interval >> 8 )
ASSIGN	2322:2	2322:20	8	sp -> out_buffer [ 4 ] = ( sp -> restart_interval >> 8 )
LVAL	2322:2	2322:2	9	sp -> out_buffer [ 4 ]
FIELD	2322:2	2322:18	10	sp -> out_buffer [ 4 ]
LEAF_NODE	2322:2	2322:2	11	sp
LEAF_NODE	2322:4	2322:4	11	->
LEAF_NODE	2322:6	2322:6	11	out_buffer
LEAF_NODE	2322:16	2322:16	11	[
EXPR	2322:17	2322:17	11	4
FIELD	2322:17	2322:17	12	4
LEAF_NODE	2322:17	2322:17	13	4
LEAF_NODE	2322:18	2322:18	11	]
ASSIGN_OP	2322:19	2322:19	9	=
LEAF_NODE	2322:19	2322:19	10	=
RVAL	2322:20	2322:44	9	( sp -> restart_interval >> 8 )
LEAF_NODE	2322:20	2322:20	10	(
FIELD	2322:21	2322:25	10	sp -> restart_interval
LEAF_NODE	2322:21	2322:21	11	sp
LEAF_NODE	2322:23	2322:23	11	->
LEAF_NODE	2322:25	2322:25	11	restart_interval
LEAF_NODE	2322:41	2322:41	10	>>
FIELD	2322:43	2322:43	10	8
LEAF_NODE	2322:43	2322:43	11	8
LEAF_NODE	2322:44	2322:44	10	)
LEAF_NODE	2322:45	2322:45	7	;
EXPR_STATEMENT	2323:2	2323:46	6	sp -> out_buffer [ 5 ] = ( sp -> restart_interval & 255 ) ;
EXPR	2323:2	2323:2	7	sp -> out_buffer [ 5 ] = ( sp -> restart_interval & 255 )
ASSIGN	2323:2	2323:20	8	sp -> out_buffer [ 5 ] = ( sp -> restart_interval & 255 )
LVAL	2323:2	2323:2	9	sp -> out_buffer [ 5 ]
FIELD	2323:2	2323:18	10	sp -> out_buffer [ 5 ]
LEAF_NODE	2323:2	2323:2	11	sp
LEAF_NODE	2323:4	2323:4	11	->
LEAF_NODE	2323:6	2323:6	11	out_buffer
LEAF_NODE	2323:16	2323:16	11	[
EXPR	2323:17	2323:17	11	5
FIELD	2323:17	2323:17	12	5
LEAF_NODE	2323:17	2323:17	13	5
LEAF_NODE	2323:18	2323:18	11	]
ASSIGN_OP	2323:19	2323:19	9	=
LEAF_NODE	2323:19	2323:19	10	=
RVAL	2323:20	2323:45	9	( sp -> restart_interval & 255 )
LEAF_NODE	2323:20	2323:20	10	(
FIELD	2323:21	2323:25	10	sp -> restart_interval
LEAF_NODE	2323:21	2323:21	11	sp
LEAF_NODE	2323:23	2323:23	11	->
LEAF_NODE	2323:25	2323:25	11	restart_interval
LEAF_NODE	2323:41	2323:41	10	&
FIELD	2323:42	2323:42	10	255
LEAF_NODE	2323:42	2323:42	11	255
LEAF_NODE	2323:45	2323:45	10	)
LEAF_NODE	2323:46	2323:46	7	;
EXPR_STATEMENT	2324:2	2324:8	6	* len = 6 ;
EXPR	2324:2	2324:2	7	* len = 6
ASSIGN	2324:2	2324:7	8	* len = 6
LVAL	2324:2	2324:2	9	* len
UNARY_EXPR	2324:2	2324:3	10	* len
UNARY_OPERATOR	2324:2	2324:2	11	*
LEAF_NODE	2324:2	2324:2	12	*
FIELD	2324:3	2324:3	11	len
LEAF_NODE	2324:3	2324:3	12	len
ASSIGN_OP	2324:6	2324:6	9	=
LEAF_NODE	2324:6	2324:6	10	=
RVAL	2324:7	2324:7	9	6
FIELD	2324:7	2324:7	10	6
LEAF_NODE	2324:7	2324:7	11	6
LEAF_NODE	2324:8	2324:8	7	;
EXPR_STATEMENT	2325:2	2325:28	6	* mem = ( void * ) sp -> out_buffer ;
EXPR	2325:2	2325:2	7	* mem = ( void * ) sp -> out_buffer
ASSIGN	2325:2	2325:7	8	* mem = ( void * ) sp -> out_buffer
LVAL	2325:2	2325:2	9	* mem
UNARY_EXPR	2325:2	2325:3	10	* mem
UNARY_OPERATOR	2325:2	2325:2	11	*
LEAF_NODE	2325:2	2325:2	12	*
FIELD	2325:3	2325:3	11	mem
LEAF_NODE	2325:3	2325:3	12	mem
ASSIGN_OP	2325:6	2325:6	9	=
LEAF_NODE	2325:6	2325:6	10	=
RVAL	2325:7	2325:14	9	( void * ) sp -> out_buffer
LEAF_NODE	2325:7	2325:7	10	(
TYPE_NAME	2325:8	2325:8	10	void
LEAF_NODE	2325:8	2325:8	11	void
LEAF_NODE	2325:12	2325:12	10	*
LEAF_NODE	2325:13	2325:13	10	)
FIELD	2325:14	2325:18	10	sp -> out_buffer
LEAF_NODE	2325:14	2325:14	11	sp
LEAF_NODE	2325:16	2325:16	11	->
LEAF_NODE	2325:18	2325:18	11	out_buffer
LEAF_NODE	2325:28	2325:28	7	;
LEAF_NODE	2326:1	2326:1	5	}
EXPR_STATEMENT	2327:1	2327:16	3	sp -> out_state ++ ;
EXPR	2327:1	2327:1	4	sp -> out_state ++
FIELD	2327:1	2327:14	5	sp -> out_state ++
LEAF_NODE	2327:1	2327:1	6	sp
LEAF_NODE	2327:3	2327:3	6	->
LEAF_NODE	2327:5	2327:5	6	out_state
LEAF_NODE	2327:14	2327:14	6	++
LEAF_NODE	2327:16	2327:16	4	;
LEAF_NODE	2328:0	2328:0	2	}
FUNCTION_DEF	2330:0	2364:0	1	
RETURN_TYPE	2330:0	2330:7	2	static void
LEAF_NODE	2330:0	2330:0	3	static
TYPE_NAME	2330:7	2330:7	3	void
LEAF_NODE	2330:7	2330:7	4	void
FUNCTION_NAME	2331:0	2331:0	2	OJPEGWriteStreamSof
LEAF_NODE	2331:0	2331:0	3	OJPEGWriteStreamSof
PARAMETER_LIST	2331:19	2331:54	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2331:19	2331:19	3	(
PARAMETER_DECL	2331:20	2331:26	3	TIFF * tif
TYPE	2331:20	2331:24	4	TIFF *
TYPE_NAME	2331:20	2331:20	5	TIFF
LEAF_NODE	2331:20	2331:20	6	TIFF
POINTER	2331:24	2331:24	5	*
LEAF_NODE	2331:24	2331:24	6	*
NAME	2331:26	2331:26	4	tif
LEAF_NODE	2331:26	2331:26	5	tif
LEAF_NODE	2331:29	2331:29	3	,
PARAMETER_DECL	2331:31	2331:38	3	void * * mem
TYPE	2331:31	2331:35	4	void * *
TYPE_NAME	2331:31	2331:31	5	void
LEAF_NODE	2331:31	2331:31	6	void
POINTER	2331:35	2331:36	5	* *
LEAF_NODE	2331:35	2331:35	6	*
LEAF_NODE	2331:36	2331:36	6	*
NAME	2331:38	2331:38	4	mem
LEAF_NODE	2331:38	2331:38	5	mem
LEAF_NODE	2331:41	2331:41	3	,
PARAMETER_DECL	2331:43	2331:51	3	uint32 * len
TYPE	2331:43	2331:49	4	uint32 *
TYPE_NAME	2331:43	2331:43	5	uint32
LEAF_NODE	2331:43	2331:43	6	uint32
POINTER	2331:49	2331:49	5	*
LEAF_NODE	2331:49	2331:49	6	*
NAME	2331:51	2331:51	4	len
LEAF_NODE	2331:51	2331:51	5	len
LEAF_NODE	2331:54	2331:54	3	)
LEAF_NODE	2332:0	2332:0	2	{
STATEMENTS	2333:1	2363:1	2	
SIMPLE_DECL	2333:1	2333:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2333:1	2333:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2333:1	2333:11	5	OJPEGState *
TYPE_NAME	2333:1	2333:1	6	OJPEGState
LEAF_NODE	2333:1	2333:1	7	OJPEGState
POINTER	2333:11	2333:11	6	*
LEAF_NODE	2333:11	2333:11	7	*
NAME	2333:13	2333:13	5	sp
LEAF_NODE	2333:13	2333:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2333:13	2333:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2333:13	2333:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2333:13	2333:13	7	sp
NAME	2333:13	2333:13	8	sp
LEAF_NODE	2333:13	2333:13	9	sp
ASSIGN_OP	2333:15	2333:15	7	=
LEAF_NODE	2333:15	2333:15	8	=
RVAL	2333:16	2333:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2333:16	2333:16	8	(
TYPE_NAME	2333:17	2333:17	8	OJPEGState
LEAF_NODE	2333:17	2333:17	9	OJPEGState
LEAF_NODE	2333:27	2333:27	8	*
LEAF_NODE	2333:28	2333:28	8	)
FIELD	2333:29	2333:34	8	tif -> tif_data
LEAF_NODE	2333:29	2333:29	9	tif
LEAF_NODE	2333:32	2333:32	9	->
LEAF_NODE	2333:34	2333:34	9	tif_data
LEAF_NODE	2333:42	2333:42	4	;
SIMPLE_DECL	2334:1	2334:8	3	uint8 m ;
VAR_DECL	2334:1	2334:7	4	uint8 m
TYPE	2334:1	2334:1	5	uint8
TYPE_NAME	2334:1	2334:1	6	uint8
LEAF_NODE	2334:1	2334:1	7	uint8
NAME	2334:7	2334:7	5	m
LEAF_NODE	2334:7	2334:7	6	m
LEAF_NODE	2334:8	2334:8	4	;
EXPR_STATEMENT	2335:1	2335:60	3	assert ( OJPEG_BUFFER >= 2 + 8 + sp -> samples_per_pixel_per_plane * 3 ) ;
EXPR	2335:1	2335:1	4	assert ( OJPEG_BUFFER >= 2 + 8 + sp -> samples_per_pixel_per_plane * 3 )
FUNCTION_CALL	2335:1	2335:59	5	assert ( OJPEG_BUFFER >= 2 + 8 + sp -> samples_per_pixel_per_plane * 3 )
CALLEE	2335:1	2335:1	6	assert
LEAF_NODE	2335:1	2335:1	7	assert
LEAF_NODE	2335:7	2335:7	6	(
ARGUMENT	2335:8	2335:58	6	OJPEG_BUFFER >= 2 + 8 + sp -> samples_per_pixel_per_plane * 3
FIELD	2335:8	2335:8	7	OJPEG_BUFFER
LEAF_NODE	2335:8	2335:8	8	OJPEG_BUFFER
REL_OPERATOR	2335:20	2335:20	7	>=
LEAF_NODE	2335:20	2335:20	8	>=
FIELD	2335:22	2335:22	7	2
LEAF_NODE	2335:22	2335:22	8	2
LEAF_NODE	2335:23	2335:23	7	+
FIELD	2335:24	2335:24	7	8
LEAF_NODE	2335:24	2335:24	8	8
LEAF_NODE	2335:25	2335:25	7	+
FIELD	2335:26	2335:30	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2335:26	2335:26	8	sp
LEAF_NODE	2335:28	2335:28	8	->
LEAF_NODE	2335:30	2335:30	8	samples_per_pixel_per_plane
LEAF_NODE	2335:57	2335:57	7	*
FIELD	2335:58	2335:58	7	3
LEAF_NODE	2335:58	2335:58	8	3
LEAF_NODE	2335:59	2335:59	6	)
LEAF_NODE	2335:60	2335:60	4	;
EXPR_STATEMENT	2336:1	2336:49	3	assert ( 255 >= 8 + sp -> samples_per_pixel_per_plane * 3 ) ;
EXPR	2336:1	2336:1	4	assert ( 255 >= 8 + sp -> samples_per_pixel_per_plane * 3 )
FUNCTION_CALL	2336:1	2336:48	5	assert ( 255 >= 8 + sp -> samples_per_pixel_per_plane * 3 )
CALLEE	2336:1	2336:1	6	assert
LEAF_NODE	2336:1	2336:1	7	assert
LEAF_NODE	2336:7	2336:7	6	(
ARGUMENT	2336:8	2336:47	6	255 >= 8 + sp -> samples_per_pixel_per_plane * 3
FIELD	2336:8	2336:8	7	255
LEAF_NODE	2336:8	2336:8	8	255
REL_OPERATOR	2336:11	2336:11	7	>=
LEAF_NODE	2336:11	2336:11	8	>=
FIELD	2336:13	2336:13	7	8
LEAF_NODE	2336:13	2336:13	8	8
LEAF_NODE	2336:14	2336:14	7	+
FIELD	2336:15	2336:19	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2336:15	2336:15	8	sp
LEAF_NODE	2336:17	2336:17	8	->
LEAF_NODE	2336:19	2336:19	8	samples_per_pixel_per_plane
LEAF_NODE	2336:46	2336:46	7	*
FIELD	2336:47	2336:47	7	3
LEAF_NODE	2336:47	2336:47	8	3
LEAF_NODE	2336:48	2336:48	6	)
LEAF_NODE	2336:49	2336:49	4	;
EXPR_STATEMENT	2337:1	2337:22	3	sp -> out_buffer [ 0 ] = 255 ;
EXPR	2337:1	2337:1	4	sp -> out_buffer [ 0 ] = 255
ASSIGN	2337:1	2337:19	5	sp -> out_buffer [ 0 ] = 255
LVAL	2337:1	2337:1	6	sp -> out_buffer [ 0 ]
FIELD	2337:1	2337:17	7	sp -> out_buffer [ 0 ]
LEAF_NODE	2337:1	2337:1	8	sp
LEAF_NODE	2337:3	2337:3	8	->
LEAF_NODE	2337:5	2337:5	8	out_buffer
LEAF_NODE	2337:15	2337:15	8	[
EXPR	2337:16	2337:16	8	0
FIELD	2337:16	2337:16	9	0
LEAF_NODE	2337:16	2337:16	10	0
LEAF_NODE	2337:17	2337:17	8	]
ASSIGN_OP	2337:18	2337:18	6	=
LEAF_NODE	2337:18	2337:18	7	=
RVAL	2337:19	2337:19	6	255
FIELD	2337:19	2337:19	7	255
LEAF_NODE	2337:19	2337:19	8	255
LEAF_NODE	2337:22	2337:22	4	;
EXPR_STATEMENT	2338:1	2338:36	3	sp -> out_buffer [ 1 ] = sp -> sof_marker_id ;
EXPR	2338:1	2338:1	4	sp -> out_buffer [ 1 ] = sp -> sof_marker_id
ASSIGN	2338:1	2338:19	5	sp -> out_buffer [ 1 ] = sp -> sof_marker_id
LVAL	2338:1	2338:1	6	sp -> out_buffer [ 1 ]
FIELD	2338:1	2338:17	7	sp -> out_buffer [ 1 ]
LEAF_NODE	2338:1	2338:1	8	sp
LEAF_NODE	2338:3	2338:3	8	->
LEAF_NODE	2338:5	2338:5	8	out_buffer
LEAF_NODE	2338:15	2338:15	8	[
EXPR	2338:16	2338:16	8	1
FIELD	2338:16	2338:16	9	1
LEAF_NODE	2338:16	2338:16	10	1
LEAF_NODE	2338:17	2338:17	8	]
ASSIGN_OP	2338:18	2338:18	6	=
LEAF_NODE	2338:18	2338:18	7	=
RVAL	2338:19	2338:19	6	sp -> sof_marker_id
FIELD	2338:19	2338:23	7	sp -> sof_marker_id
LEAF_NODE	2338:19	2338:19	8	sp
LEAF_NODE	2338:21	2338:21	8	->
LEAF_NODE	2338:23	2338:23	8	sof_marker_id
LEAF_NODE	2338:36	2338:36	4	;
EXPR_STATEMENT	2340:1	2340:20	3	sp -> out_buffer [ 2 ] = 0 ;
EXPR	2340:1	2340:1	4	sp -> out_buffer [ 2 ] = 0
ASSIGN	2340:1	2340:19	5	sp -> out_buffer [ 2 ] = 0
LVAL	2340:1	2340:1	6	sp -> out_buffer [ 2 ]
FIELD	2340:1	2340:17	7	sp -> out_buffer [ 2 ]
LEAF_NODE	2340:1	2340:1	8	sp
LEAF_NODE	2340:3	2340:3	8	->
LEAF_NODE	2340:5	2340:5	8	out_buffer
LEAF_NODE	2340:15	2340:15	8	[
EXPR	2340:16	2340:16	8	2
FIELD	2340:16	2340:16	9	2
LEAF_NODE	2340:16	2340:16	10	2
LEAF_NODE	2340:17	2340:17	8	]
ASSIGN_OP	2340:18	2340:18	6	=
LEAF_NODE	2340:18	2340:18	7	=
RVAL	2340:19	2340:19	6	0
FIELD	2340:19	2340:19	7	0
LEAF_NODE	2340:19	2340:19	8	0
LEAF_NODE	2340:20	2340:20	4	;
EXPR_STATEMENT	2341:1	2341:54	3	sp -> out_buffer [ 3 ] = 8 + sp -> samples_per_pixel_per_plane * 3 ;
EXPR	2341:1	2341:1	4	sp -> out_buffer [ 3 ] = 8 + sp -> samples_per_pixel_per_plane * 3
ASSIGN	2341:1	2341:19	5	sp -> out_buffer [ 3 ] = 8 + sp -> samples_per_pixel_per_plane * 3
LVAL	2341:1	2341:1	6	sp -> out_buffer [ 3 ]
FIELD	2341:1	2341:17	7	sp -> out_buffer [ 3 ]
LEAF_NODE	2341:1	2341:1	8	sp
LEAF_NODE	2341:3	2341:3	8	->
LEAF_NODE	2341:5	2341:5	8	out_buffer
LEAF_NODE	2341:15	2341:15	8	[
EXPR	2341:16	2341:16	8	3
FIELD	2341:16	2341:16	9	3
LEAF_NODE	2341:16	2341:16	10	3
LEAF_NODE	2341:17	2341:17	8	]
ASSIGN_OP	2341:18	2341:18	6	=
LEAF_NODE	2341:18	2341:18	7	=
RVAL	2341:19	2341:53	6	8 + sp -> samples_per_pixel_per_plane * 3
FIELD	2341:19	2341:19	7	8
LEAF_NODE	2341:19	2341:19	8	8
LEAF_NODE	2341:20	2341:20	7	+
FIELD	2341:21	2341:25	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2341:21	2341:21	8	sp
LEAF_NODE	2341:23	2341:23	8	->
LEAF_NODE	2341:25	2341:25	8	samples_per_pixel_per_plane
LEAF_NODE	2341:52	2341:52	7	*
FIELD	2341:53	2341:53	7	3
LEAF_NODE	2341:53	2341:53	8	3
LEAF_NODE	2341:54	2341:54	4	;
EXPR_STATEMENT	2343:1	2343:20	3	sp -> out_buffer [ 4 ] = 8 ;
EXPR	2343:1	2343:1	4	sp -> out_buffer [ 4 ] = 8
ASSIGN	2343:1	2343:19	5	sp -> out_buffer [ 4 ] = 8
LVAL	2343:1	2343:1	6	sp -> out_buffer [ 4 ]
FIELD	2343:1	2343:17	7	sp -> out_buffer [ 4 ]
LEAF_NODE	2343:1	2343:1	8	sp
LEAF_NODE	2343:3	2343:3	8	->
LEAF_NODE	2343:5	2343:5	8	out_buffer
LEAF_NODE	2343:15	2343:15	8	[
EXPR	2343:16	2343:16	8	4
FIELD	2343:16	2343:16	9	4
LEAF_NODE	2343:16	2343:16	10	4
LEAF_NODE	2343:17	2343:17	8	]
ASSIGN_OP	2343:18	2343:18	6	=
LEAF_NODE	2343:18	2343:18	7	=
RVAL	2343:19	2343:19	6	8
FIELD	2343:19	2343:19	7	8
LEAF_NODE	2343:19	2343:19	8	8
LEAF_NODE	2343:20	2343:20	4	;
EXPR_STATEMENT	2345:1	2345:40	3	sp -> out_buffer [ 5 ] = ( uint8 ) ( sp -> sof_y >> 8 ) ;
EXPR	2345:1	2345:1	4	sp -> out_buffer [ 5 ] = ( uint8 ) ( sp -> sof_y >> 8 )
ASSIGN	2345:1	2345:19	5	sp -> out_buffer [ 5 ] = ( uint8 ) ( sp -> sof_y >> 8 )
LVAL	2345:1	2345:1	6	sp -> out_buffer [ 5 ]
FIELD	2345:1	2345:17	7	sp -> out_buffer [ 5 ]
LEAF_NODE	2345:1	2345:1	8	sp
LEAF_NODE	2345:3	2345:3	8	->
LEAF_NODE	2345:5	2345:5	8	out_buffer
LEAF_NODE	2345:15	2345:15	8	[
EXPR	2345:16	2345:16	8	5
FIELD	2345:16	2345:16	9	5
LEAF_NODE	2345:16	2345:16	10	5
LEAF_NODE	2345:17	2345:17	8	]
ASSIGN_OP	2345:18	2345:18	6	=
LEAF_NODE	2345:18	2345:18	7	=
RVAL	2345:19	2345:39	6	( uint8 ) ( sp -> sof_y >> 8 )
LEAF_NODE	2345:19	2345:19	7	(
TYPE_NAME	2345:20	2345:20	7	uint8
LEAF_NODE	2345:20	2345:20	8	uint8
LEAF_NODE	2345:25	2345:25	7	)
LEAF_NODE	2345:26	2345:26	7	(
FIELD	2345:27	2345:31	7	sp -> sof_y
LEAF_NODE	2345:27	2345:27	8	sp
LEAF_NODE	2345:29	2345:29	8	->
LEAF_NODE	2345:31	2345:31	8	sof_y
LEAF_NODE	2345:36	2345:36	7	>>
FIELD	2345:38	2345:38	7	8
LEAF_NODE	2345:38	2345:38	8	8
LEAF_NODE	2345:39	2345:39	7	)
LEAF_NODE	2345:40	2345:40	4	;
EXPR_STATEMENT	2346:1	2346:34	3	sp -> out_buffer [ 6 ] = ( sp -> sof_y & 255 ) ;
EXPR	2346:1	2346:1	4	sp -> out_buffer [ 6 ] = ( sp -> sof_y & 255 )
ASSIGN	2346:1	2346:19	5	sp -> out_buffer [ 6 ] = ( sp -> sof_y & 255 )
LVAL	2346:1	2346:1	6	sp -> out_buffer [ 6 ]
FIELD	2346:1	2346:17	7	sp -> out_buffer [ 6 ]
LEAF_NODE	2346:1	2346:1	8	sp
LEAF_NODE	2346:3	2346:3	8	->
LEAF_NODE	2346:5	2346:5	8	out_buffer
LEAF_NODE	2346:15	2346:15	8	[
EXPR	2346:16	2346:16	8	6
FIELD	2346:16	2346:16	9	6
LEAF_NODE	2346:16	2346:16	10	6
LEAF_NODE	2346:17	2346:17	8	]
ASSIGN_OP	2346:18	2346:18	6	=
LEAF_NODE	2346:18	2346:18	7	=
RVAL	2346:19	2346:33	6	( sp -> sof_y & 255 )
LEAF_NODE	2346:19	2346:19	7	(
FIELD	2346:20	2346:24	7	sp -> sof_y
LEAF_NODE	2346:20	2346:20	8	sp
LEAF_NODE	2346:22	2346:22	8	->
LEAF_NODE	2346:24	2346:24	8	sof_y
LEAF_NODE	2346:29	2346:29	7	&
FIELD	2346:30	2346:30	7	255
LEAF_NODE	2346:30	2346:30	8	255
LEAF_NODE	2346:33	2346:33	7	)
LEAF_NODE	2346:34	2346:34	4	;
EXPR_STATEMENT	2348:1	2348:40	3	sp -> out_buffer [ 7 ] = ( uint8 ) ( sp -> sof_x >> 8 ) ;
EXPR	2348:1	2348:1	4	sp -> out_buffer [ 7 ] = ( uint8 ) ( sp -> sof_x >> 8 )
ASSIGN	2348:1	2348:19	5	sp -> out_buffer [ 7 ] = ( uint8 ) ( sp -> sof_x >> 8 )
LVAL	2348:1	2348:1	6	sp -> out_buffer [ 7 ]
FIELD	2348:1	2348:17	7	sp -> out_buffer [ 7 ]
LEAF_NODE	2348:1	2348:1	8	sp
LEAF_NODE	2348:3	2348:3	8	->
LEAF_NODE	2348:5	2348:5	8	out_buffer
LEAF_NODE	2348:15	2348:15	8	[
EXPR	2348:16	2348:16	8	7
FIELD	2348:16	2348:16	9	7
LEAF_NODE	2348:16	2348:16	10	7
LEAF_NODE	2348:17	2348:17	8	]
ASSIGN_OP	2348:18	2348:18	6	=
LEAF_NODE	2348:18	2348:18	7	=
RVAL	2348:19	2348:39	6	( uint8 ) ( sp -> sof_x >> 8 )
LEAF_NODE	2348:19	2348:19	7	(
TYPE_NAME	2348:20	2348:20	7	uint8
LEAF_NODE	2348:20	2348:20	8	uint8
LEAF_NODE	2348:25	2348:25	7	)
LEAF_NODE	2348:26	2348:26	7	(
FIELD	2348:27	2348:31	7	sp -> sof_x
LEAF_NODE	2348:27	2348:27	8	sp
LEAF_NODE	2348:29	2348:29	8	->
LEAF_NODE	2348:31	2348:31	8	sof_x
LEAF_NODE	2348:36	2348:36	7	>>
FIELD	2348:38	2348:38	7	8
LEAF_NODE	2348:38	2348:38	8	8
LEAF_NODE	2348:39	2348:39	7	)
LEAF_NODE	2348:40	2348:40	4	;
EXPR_STATEMENT	2349:1	2349:34	3	sp -> out_buffer [ 8 ] = ( sp -> sof_x & 255 ) ;
EXPR	2349:1	2349:1	4	sp -> out_buffer [ 8 ] = ( sp -> sof_x & 255 )
ASSIGN	2349:1	2349:19	5	sp -> out_buffer [ 8 ] = ( sp -> sof_x & 255 )
LVAL	2349:1	2349:1	6	sp -> out_buffer [ 8 ]
FIELD	2349:1	2349:17	7	sp -> out_buffer [ 8 ]
LEAF_NODE	2349:1	2349:1	8	sp
LEAF_NODE	2349:3	2349:3	8	->
LEAF_NODE	2349:5	2349:5	8	out_buffer
LEAF_NODE	2349:15	2349:15	8	[
EXPR	2349:16	2349:16	8	8
FIELD	2349:16	2349:16	9	8
LEAF_NODE	2349:16	2349:16	10	8
LEAF_NODE	2349:17	2349:17	8	]
ASSIGN_OP	2349:18	2349:18	6	=
LEAF_NODE	2349:18	2349:18	7	=
RVAL	2349:19	2349:33	6	( sp -> sof_x & 255 )
LEAF_NODE	2349:19	2349:19	7	(
FIELD	2349:20	2349:24	7	sp -> sof_x
LEAF_NODE	2349:20	2349:20	8	sp
LEAF_NODE	2349:22	2349:22	8	->
LEAF_NODE	2349:24	2349:24	8	sof_x
LEAF_NODE	2349:29	2349:29	7	&
FIELD	2349:30	2349:30	7	255
LEAF_NODE	2349:30	2349:30	8	255
LEAF_NODE	2349:33	2349:33	7	)
LEAF_NODE	2349:34	2349:34	4	;
EXPR_STATEMENT	2351:1	2351:50	3	sp -> out_buffer [ 9 ] = sp -> samples_per_pixel_per_plane ;
EXPR	2351:1	2351:1	4	sp -> out_buffer [ 9 ] = sp -> samples_per_pixel_per_plane
ASSIGN	2351:1	2351:19	5	sp -> out_buffer [ 9 ] = sp -> samples_per_pixel_per_plane
LVAL	2351:1	2351:1	6	sp -> out_buffer [ 9 ]
FIELD	2351:1	2351:17	7	sp -> out_buffer [ 9 ]
LEAF_NODE	2351:1	2351:1	8	sp
LEAF_NODE	2351:3	2351:3	8	->
LEAF_NODE	2351:5	2351:5	8	out_buffer
LEAF_NODE	2351:15	2351:15	8	[
EXPR	2351:16	2351:16	8	9
FIELD	2351:16	2351:16	9	9
LEAF_NODE	2351:16	2351:16	10	9
LEAF_NODE	2351:17	2351:17	8	]
ASSIGN_OP	2351:18	2351:18	6	=
LEAF_NODE	2351:18	2351:18	7	=
RVAL	2351:19	2351:19	6	sp -> samples_per_pixel_per_plane
FIELD	2351:19	2351:23	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2351:19	2351:19	8	sp
LEAF_NODE	2351:21	2351:21	8	->
LEAF_NODE	2351:23	2351:23	8	samples_per_pixel_per_plane
LEAF_NODE	2351:50	2351:50	4	;
ITERATION	2352:1	2353:1	3	
KEYWORD	2352:1	2352:1	4	for
LEAF_NODE	2352:1	2352:1	5	for
LEAF_NODE	2352:5	2352:5	4	(
FOR_INIT	2352:6	2352:9	4	m = 0 ;
EXPR	2352:6	2352:6	5	m = 0
ASSIGN	2352:6	2352:8	6	m = 0
LVAL	2352:6	2352:6	7	m
FIELD	2352:6	2352:6	8	m
LEAF_NODE	2352:6	2352:6	9	m
ASSIGN_OP	2352:7	2352:7	7	=
LEAF_NODE	2352:7	2352:7	8	=
RVAL	2352:8	2352:8	7	0
FIELD	2352:8	2352:8	8	0
LEAF_NODE	2352:8	2352:8	9	0
LEAF_NODE	2352:9	2352:9	5	;
CONDITION	2352:11	2352:11	4	m < sp -> samples_per_pixel_per_plane
EXPR	2352:11	2352:13	5	m < sp -> samples_per_pixel_per_plane
FIELD	2352:11	2352:11	6	m
LEAF_NODE	2352:11	2352:11	7	m
REL_OPERATOR	2352:12	2352:12	6	<
LEAF_NODE	2352:12	2352:12	7	<
FIELD	2352:13	2352:17	6	sp -> samples_per_pixel_per_plane
LEAF_NODE	2352:13	2352:13	7	sp
LEAF_NODE	2352:15	2352:15	7	->
LEAF_NODE	2352:17	2352:17	7	samples_per_pixel_per_plane
LEAF_NODE	2352:44	2352:44	4	;
FOR_EXPR	2352:46	2352:46	4	m ++
EXPR	2352:46	2352:46	5	m ++
FIELD	2352:46	2352:47	6	m ++
LEAF_NODE	2352:46	2352:46	7	m
LEAF_NODE	2352:47	2352:47	7	++
LEAF_NODE	2352:49	2352:49	4	)
STATEMENTS	2353:1	2360:1	4	
LEAF_NODE	2353:1	2353:1	5	{
STATEMENTS	2355:2	2359:2	5	
EXPR_STATEMENT	2355:2	2355:61	6	sp -> out_buffer [ 10 + m * 3 ] = sp -> sof_c [ sp -> plane_sample_offset + m ] ;
EXPR	2355:2	2355:2	7	sp -> out_buffer [ 10 + m * 3 ] = sp -> sof_c [ sp -> plane_sample_offset + m ]
ASSIGN	2355:2	2355:25	8	sp -> out_buffer [ 10 + m * 3 ] = sp -> sof_c [ sp -> plane_sample_offset + m ]
LVAL	2355:2	2355:2	9	sp -> out_buffer [ 10 + m * 3 ]
FIELD	2355:2	2355:23	10	sp -> out_buffer [ 10 + m * 3 ]
LEAF_NODE	2355:2	2355:2	11	sp
LEAF_NODE	2355:4	2355:4	11	->
LEAF_NODE	2355:6	2355:6	11	out_buffer
LEAF_NODE	2355:16	2355:16	11	[
EXPR	2355:17	2355:22	11	10 + m * 3
FIELD	2355:17	2355:17	12	10
LEAF_NODE	2355:17	2355:17	13	10
LEAF_NODE	2355:19	2355:19	12	+
FIELD	2355:20	2355:20	12	m
LEAF_NODE	2355:20	2355:20	13	m
LEAF_NODE	2355:21	2355:21	12	*
FIELD	2355:22	2355:22	12	3
LEAF_NODE	2355:22	2355:22	13	3
LEAF_NODE	2355:23	2355:23	11	]
ASSIGN_OP	2355:24	2355:24	9	=
LEAF_NODE	2355:24	2355:24	10	=
RVAL	2355:25	2355:25	9	sp -> sof_c [ sp -> plane_sample_offset + m ]
FIELD	2355:25	2355:60	10	sp -> sof_c [ sp -> plane_sample_offset + m ]
LEAF_NODE	2355:25	2355:25	11	sp
LEAF_NODE	2355:27	2355:27	11	->
LEAF_NODE	2355:29	2355:29	11	sof_c
LEAF_NODE	2355:34	2355:34	11	[
EXPR	2355:35	2355:59	11	sp -> plane_sample_offset + m
FIELD	2355:35	2355:39	12	sp -> plane_sample_offset
LEAF_NODE	2355:35	2355:35	13	sp
LEAF_NODE	2355:37	2355:37	13	->
LEAF_NODE	2355:39	2355:39	13	plane_sample_offset
LEAF_NODE	2355:58	2355:58	12	+
FIELD	2355:59	2355:59	12	m
LEAF_NODE	2355:59	2355:59	13	m
LEAF_NODE	2355:60	2355:60	11	]
LEAF_NODE	2355:61	2355:61	7	;
EXPR_STATEMENT	2357:2	2357:64	6	sp -> out_buffer [ 10 + m * 3 + 1 ] = sp -> sof_hv [ sp -> plane_sample_offset + m ] ;
EXPR	2357:2	2357:2	7	sp -> out_buffer [ 10 + m * 3 + 1 ] = sp -> sof_hv [ sp -> plane_sample_offset + m ]
ASSIGN	2357:2	2357:27	8	sp -> out_buffer [ 10 + m * 3 + 1 ] = sp -> sof_hv [ sp -> plane_sample_offset + m ]
LVAL	2357:2	2357:2	9	sp -> out_buffer [ 10 + m * 3 + 1 ]
FIELD	2357:2	2357:25	10	sp -> out_buffer [ 10 + m * 3 + 1 ]
LEAF_NODE	2357:2	2357:2	11	sp
LEAF_NODE	2357:4	2357:4	11	->
LEAF_NODE	2357:6	2357:6	11	out_buffer
LEAF_NODE	2357:16	2357:16	11	[
EXPR	2357:17	2357:24	11	10 + m * 3 + 1
FIELD	2357:17	2357:17	12	10
LEAF_NODE	2357:17	2357:17	13	10
LEAF_NODE	2357:19	2357:19	12	+
FIELD	2357:20	2357:20	12	m
LEAF_NODE	2357:20	2357:20	13	m
LEAF_NODE	2357:21	2357:21	12	*
FIELD	2357:22	2357:22	12	3
LEAF_NODE	2357:22	2357:22	13	3
LEAF_NODE	2357:23	2357:23	12	+
FIELD	2357:24	2357:24	12	1
LEAF_NODE	2357:24	2357:24	13	1
LEAF_NODE	2357:25	2357:25	11	]
ASSIGN_OP	2357:26	2357:26	9	=
LEAF_NODE	2357:26	2357:26	10	=
RVAL	2357:27	2357:27	9	sp -> sof_hv [ sp -> plane_sample_offset + m ]
FIELD	2357:27	2357:63	10	sp -> sof_hv [ sp -> plane_sample_offset + m ]
LEAF_NODE	2357:27	2357:27	11	sp
LEAF_NODE	2357:29	2357:29	11	->
LEAF_NODE	2357:31	2357:31	11	sof_hv
LEAF_NODE	2357:37	2357:37	11	[
EXPR	2357:38	2357:62	11	sp -> plane_sample_offset + m
FIELD	2357:38	2357:42	12	sp -> plane_sample_offset
LEAF_NODE	2357:38	2357:38	13	sp
LEAF_NODE	2357:40	2357:40	13	->
LEAF_NODE	2357:42	2357:42	13	plane_sample_offset
LEAF_NODE	2357:61	2357:61	12	+
FIELD	2357:62	2357:62	12	m
LEAF_NODE	2357:62	2357:62	13	m
LEAF_NODE	2357:63	2357:63	11	]
LEAF_NODE	2357:64	2357:64	7	;
EXPR_STATEMENT	2359:2	2359:64	6	sp -> out_buffer [ 10 + m * 3 + 2 ] = sp -> sof_tq [ sp -> plane_sample_offset + m ] ;
EXPR	2359:2	2359:2	7	sp -> out_buffer [ 10 + m * 3 + 2 ] = sp -> sof_tq [ sp -> plane_sample_offset + m ]
ASSIGN	2359:2	2359:27	8	sp -> out_buffer [ 10 + m * 3 + 2 ] = sp -> sof_tq [ sp -> plane_sample_offset + m ]
LVAL	2359:2	2359:2	9	sp -> out_buffer [ 10 + m * 3 + 2 ]
FIELD	2359:2	2359:25	10	sp -> out_buffer [ 10 + m * 3 + 2 ]
LEAF_NODE	2359:2	2359:2	11	sp
LEAF_NODE	2359:4	2359:4	11	->
LEAF_NODE	2359:6	2359:6	11	out_buffer
LEAF_NODE	2359:16	2359:16	11	[
EXPR	2359:17	2359:24	11	10 + m * 3 + 2
FIELD	2359:17	2359:17	12	10
LEAF_NODE	2359:17	2359:17	13	10
LEAF_NODE	2359:19	2359:19	12	+
FIELD	2359:20	2359:20	12	m
LEAF_NODE	2359:20	2359:20	13	m
LEAF_NODE	2359:21	2359:21	12	*
FIELD	2359:22	2359:22	12	3
LEAF_NODE	2359:22	2359:22	13	3
LEAF_NODE	2359:23	2359:23	12	+
FIELD	2359:24	2359:24	12	2
LEAF_NODE	2359:24	2359:24	13	2
LEAF_NODE	2359:25	2359:25	11	]
ASSIGN_OP	2359:26	2359:26	9	=
LEAF_NODE	2359:26	2359:26	10	=
RVAL	2359:27	2359:27	9	sp -> sof_tq [ sp -> plane_sample_offset + m ]
FIELD	2359:27	2359:63	10	sp -> sof_tq [ sp -> plane_sample_offset + m ]
LEAF_NODE	2359:27	2359:27	11	sp
LEAF_NODE	2359:29	2359:29	11	->
LEAF_NODE	2359:31	2359:31	11	sof_tq
LEAF_NODE	2359:37	2359:37	11	[
EXPR	2359:38	2359:62	11	sp -> plane_sample_offset + m
FIELD	2359:38	2359:42	12	sp -> plane_sample_offset
LEAF_NODE	2359:38	2359:38	13	sp
LEAF_NODE	2359:40	2359:40	13	->
LEAF_NODE	2359:42	2359:42	13	plane_sample_offset
LEAF_NODE	2359:61	2359:61	12	+
FIELD	2359:62	2359:62	12	m
LEAF_NODE	2359:62	2359:62	13	m
LEAF_NODE	2359:63	2359:63	11	]
LEAF_NODE	2359:64	2359:64	7	;
LEAF_NODE	2360:1	2360:1	5	}
EXPR_STATEMENT	2361:1	2361:42	3	* len = 10 + sp -> samples_per_pixel_per_plane * 3 ;
EXPR	2361:1	2361:1	4	* len = 10 + sp -> samples_per_pixel_per_plane * 3
ASSIGN	2361:1	2361:6	5	* len = 10 + sp -> samples_per_pixel_per_plane * 3
LVAL	2361:1	2361:1	6	* len
UNARY_EXPR	2361:1	2361:2	7	* len
UNARY_OPERATOR	2361:1	2361:1	8	*
LEAF_NODE	2361:1	2361:1	9	*
FIELD	2361:2	2361:2	8	len
LEAF_NODE	2361:2	2361:2	9	len
ASSIGN_OP	2361:5	2361:5	6	=
LEAF_NODE	2361:5	2361:5	7	=
RVAL	2361:6	2361:41	6	10 + sp -> samples_per_pixel_per_plane * 3
FIELD	2361:6	2361:6	7	10
LEAF_NODE	2361:6	2361:6	8	10
LEAF_NODE	2361:8	2361:8	7	+
FIELD	2361:9	2361:13	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2361:9	2361:9	8	sp
LEAF_NODE	2361:11	2361:11	8	->
LEAF_NODE	2361:13	2361:13	8	samples_per_pixel_per_plane
LEAF_NODE	2361:40	2361:40	7	*
FIELD	2361:41	2361:41	7	3
LEAF_NODE	2361:41	2361:41	8	3
LEAF_NODE	2361:42	2361:42	4	;
EXPR_STATEMENT	2362:1	2362:27	3	* mem = ( void * ) sp -> out_buffer ;
EXPR	2362:1	2362:1	4	* mem = ( void * ) sp -> out_buffer
ASSIGN	2362:1	2362:6	5	* mem = ( void * ) sp -> out_buffer
LVAL	2362:1	2362:1	6	* mem
UNARY_EXPR	2362:1	2362:2	7	* mem
UNARY_OPERATOR	2362:1	2362:1	8	*
LEAF_NODE	2362:1	2362:1	9	*
FIELD	2362:2	2362:2	8	mem
LEAF_NODE	2362:2	2362:2	9	mem
ASSIGN_OP	2362:5	2362:5	6	=
LEAF_NODE	2362:5	2362:5	7	=
RVAL	2362:6	2362:13	6	( void * ) sp -> out_buffer
LEAF_NODE	2362:6	2362:6	7	(
TYPE_NAME	2362:7	2362:7	7	void
LEAF_NODE	2362:7	2362:7	8	void
LEAF_NODE	2362:11	2362:11	7	*
LEAF_NODE	2362:12	2362:12	7	)
FIELD	2362:13	2362:17	7	sp -> out_buffer
LEAF_NODE	2362:13	2362:13	8	sp
LEAF_NODE	2362:15	2362:15	8	->
LEAF_NODE	2362:17	2362:17	8	out_buffer
LEAF_NODE	2362:27	2362:27	4	;
EXPR_STATEMENT	2363:1	2363:16	3	sp -> out_state ++ ;
EXPR	2363:1	2363:1	4	sp -> out_state ++
FIELD	2363:1	2363:14	5	sp -> out_state ++
LEAF_NODE	2363:1	2363:1	6	sp
LEAF_NODE	2363:3	2363:3	6	->
LEAF_NODE	2363:5	2363:5	6	out_state
LEAF_NODE	2363:14	2363:14	6	++
LEAF_NODE	2363:16	2363:16	4	;
LEAF_NODE	2364:0	2364:0	2	}
FUNCTION_DEF	2366:0	2396:0	1	
RETURN_TYPE	2366:0	2366:7	2	static void
LEAF_NODE	2366:0	2366:0	3	static
TYPE_NAME	2366:7	2366:7	3	void
LEAF_NODE	2366:7	2366:7	4	void
FUNCTION_NAME	2367:0	2367:0	2	OJPEGWriteStreamSos
LEAF_NODE	2367:0	2367:0	3	OJPEGWriteStreamSos
PARAMETER_LIST	2367:19	2367:54	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2367:19	2367:19	3	(
PARAMETER_DECL	2367:20	2367:26	3	TIFF * tif
TYPE	2367:20	2367:24	4	TIFF *
TYPE_NAME	2367:20	2367:20	5	TIFF
LEAF_NODE	2367:20	2367:20	6	TIFF
POINTER	2367:24	2367:24	5	*
LEAF_NODE	2367:24	2367:24	6	*
NAME	2367:26	2367:26	4	tif
LEAF_NODE	2367:26	2367:26	5	tif
LEAF_NODE	2367:29	2367:29	3	,
PARAMETER_DECL	2367:31	2367:38	3	void * * mem
TYPE	2367:31	2367:35	4	void * *
TYPE_NAME	2367:31	2367:31	5	void
LEAF_NODE	2367:31	2367:31	6	void
POINTER	2367:35	2367:36	5	* *
LEAF_NODE	2367:35	2367:35	6	*
LEAF_NODE	2367:36	2367:36	6	*
NAME	2367:38	2367:38	4	mem
LEAF_NODE	2367:38	2367:38	5	mem
LEAF_NODE	2367:41	2367:41	3	,
PARAMETER_DECL	2367:43	2367:51	3	uint32 * len
TYPE	2367:43	2367:49	4	uint32 *
TYPE_NAME	2367:43	2367:43	5	uint32
LEAF_NODE	2367:43	2367:43	6	uint32
POINTER	2367:49	2367:49	5	*
LEAF_NODE	2367:49	2367:49	6	*
NAME	2367:51	2367:51	4	len
LEAF_NODE	2367:51	2367:51	5	len
LEAF_NODE	2367:54	2367:54	3	)
LEAF_NODE	2368:0	2368:0	2	{
STATEMENTS	2369:1	2395:1	2	
SIMPLE_DECL	2369:1	2369:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2369:1	2369:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2369:1	2369:11	5	OJPEGState *
TYPE_NAME	2369:1	2369:1	6	OJPEGState
LEAF_NODE	2369:1	2369:1	7	OJPEGState
POINTER	2369:11	2369:11	6	*
LEAF_NODE	2369:11	2369:11	7	*
NAME	2369:13	2369:13	5	sp
LEAF_NODE	2369:13	2369:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2369:13	2369:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2369:13	2369:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2369:13	2369:13	7	sp
NAME	2369:13	2369:13	8	sp
LEAF_NODE	2369:13	2369:13	9	sp
ASSIGN_OP	2369:15	2369:15	7	=
LEAF_NODE	2369:15	2369:15	8	=
RVAL	2369:16	2369:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2369:16	2369:16	8	(
TYPE_NAME	2369:17	2369:17	8	OJPEGState
LEAF_NODE	2369:17	2369:17	9	OJPEGState
LEAF_NODE	2369:27	2369:27	8	*
LEAF_NODE	2369:28	2369:28	8	)
FIELD	2369:29	2369:34	8	tif -> tif_data
LEAF_NODE	2369:29	2369:29	9	tif
LEAF_NODE	2369:32	2369:32	9	->
LEAF_NODE	2369:34	2369:34	9	tif_data
LEAF_NODE	2369:42	2369:42	4	;
SIMPLE_DECL	2370:1	2370:8	3	uint8 m ;
VAR_DECL	2370:1	2370:7	4	uint8 m
TYPE	2370:1	2370:1	5	uint8
TYPE_NAME	2370:1	2370:1	6	uint8
LEAF_NODE	2370:1	2370:1	7	uint8
NAME	2370:7	2370:7	5	m
LEAF_NODE	2370:7	2370:7	6	m
LEAF_NODE	2370:8	2370:8	4	;
EXPR_STATEMENT	2371:1	2371:60	3	assert ( OJPEG_BUFFER >= 2 + 6 + sp -> samples_per_pixel_per_plane * 2 ) ;
EXPR	2371:1	2371:1	4	assert ( OJPEG_BUFFER >= 2 + 6 + sp -> samples_per_pixel_per_plane * 2 )
FUNCTION_CALL	2371:1	2371:59	5	assert ( OJPEG_BUFFER >= 2 + 6 + sp -> samples_per_pixel_per_plane * 2 )
CALLEE	2371:1	2371:1	6	assert
LEAF_NODE	2371:1	2371:1	7	assert
LEAF_NODE	2371:7	2371:7	6	(
ARGUMENT	2371:8	2371:58	6	OJPEG_BUFFER >= 2 + 6 + sp -> samples_per_pixel_per_plane * 2
FIELD	2371:8	2371:8	7	OJPEG_BUFFER
LEAF_NODE	2371:8	2371:8	8	OJPEG_BUFFER
REL_OPERATOR	2371:20	2371:20	7	>=
LEAF_NODE	2371:20	2371:20	8	>=
FIELD	2371:22	2371:22	7	2
LEAF_NODE	2371:22	2371:22	8	2
LEAF_NODE	2371:23	2371:23	7	+
FIELD	2371:24	2371:24	7	6
LEAF_NODE	2371:24	2371:24	8	6
LEAF_NODE	2371:25	2371:25	7	+
FIELD	2371:26	2371:30	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2371:26	2371:26	8	sp
LEAF_NODE	2371:28	2371:28	8	->
LEAF_NODE	2371:30	2371:30	8	samples_per_pixel_per_plane
LEAF_NODE	2371:57	2371:57	7	*
FIELD	2371:58	2371:58	7	2
LEAF_NODE	2371:58	2371:58	8	2
LEAF_NODE	2371:59	2371:59	6	)
LEAF_NODE	2371:60	2371:60	4	;
EXPR_STATEMENT	2372:1	2372:49	3	assert ( 255 >= 6 + sp -> samples_per_pixel_per_plane * 2 ) ;
EXPR	2372:1	2372:1	4	assert ( 255 >= 6 + sp -> samples_per_pixel_per_plane * 2 )
FUNCTION_CALL	2372:1	2372:48	5	assert ( 255 >= 6 + sp -> samples_per_pixel_per_plane * 2 )
CALLEE	2372:1	2372:1	6	assert
LEAF_NODE	2372:1	2372:1	7	assert
LEAF_NODE	2372:7	2372:7	6	(
ARGUMENT	2372:8	2372:47	6	255 >= 6 + sp -> samples_per_pixel_per_plane * 2
FIELD	2372:8	2372:8	7	255
LEAF_NODE	2372:8	2372:8	8	255
REL_OPERATOR	2372:11	2372:11	7	>=
LEAF_NODE	2372:11	2372:11	8	>=
FIELD	2372:13	2372:13	7	6
LEAF_NODE	2372:13	2372:13	8	6
LEAF_NODE	2372:14	2372:14	7	+
FIELD	2372:15	2372:19	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2372:15	2372:15	8	sp
LEAF_NODE	2372:17	2372:17	8	->
LEAF_NODE	2372:19	2372:19	8	samples_per_pixel_per_plane
LEAF_NODE	2372:46	2372:46	7	*
FIELD	2372:47	2372:47	7	2
LEAF_NODE	2372:47	2372:47	8	2
LEAF_NODE	2372:48	2372:48	6	)
LEAF_NODE	2372:49	2372:49	4	;
EXPR_STATEMENT	2373:1	2373:22	3	sp -> out_buffer [ 0 ] = 255 ;
EXPR	2373:1	2373:1	4	sp -> out_buffer [ 0 ] = 255
ASSIGN	2373:1	2373:19	5	sp -> out_buffer [ 0 ] = 255
LVAL	2373:1	2373:1	6	sp -> out_buffer [ 0 ]
FIELD	2373:1	2373:17	7	sp -> out_buffer [ 0 ]
LEAF_NODE	2373:1	2373:1	8	sp
LEAF_NODE	2373:3	2373:3	8	->
LEAF_NODE	2373:5	2373:5	8	out_buffer
LEAF_NODE	2373:15	2373:15	8	[
EXPR	2373:16	2373:16	8	0
FIELD	2373:16	2373:16	9	0
LEAF_NODE	2373:16	2373:16	10	0
LEAF_NODE	2373:17	2373:17	8	]
ASSIGN_OP	2373:18	2373:18	6	=
LEAF_NODE	2373:18	2373:18	7	=
RVAL	2373:19	2373:19	6	255
FIELD	2373:19	2373:19	7	255
LEAF_NODE	2373:19	2373:19	8	255
LEAF_NODE	2373:22	2373:22	4	;
EXPR_STATEMENT	2374:1	2374:34	3	sp -> out_buffer [ 1 ] = JPEG_MARKER_SOS ;
EXPR	2374:1	2374:1	4	sp -> out_buffer [ 1 ] = JPEG_MARKER_SOS
ASSIGN	2374:1	2374:19	5	sp -> out_buffer [ 1 ] = JPEG_MARKER_SOS
LVAL	2374:1	2374:1	6	sp -> out_buffer [ 1 ]
FIELD	2374:1	2374:17	7	sp -> out_buffer [ 1 ]
LEAF_NODE	2374:1	2374:1	8	sp
LEAF_NODE	2374:3	2374:3	8	->
LEAF_NODE	2374:5	2374:5	8	out_buffer
LEAF_NODE	2374:15	2374:15	8	[
EXPR	2374:16	2374:16	8	1
FIELD	2374:16	2374:16	9	1
LEAF_NODE	2374:16	2374:16	10	1
LEAF_NODE	2374:17	2374:17	8	]
ASSIGN_OP	2374:18	2374:18	6	=
LEAF_NODE	2374:18	2374:18	7	=
RVAL	2374:19	2374:19	6	JPEG_MARKER_SOS
FIELD	2374:19	2374:19	7	JPEG_MARKER_SOS
LEAF_NODE	2374:19	2374:19	8	JPEG_MARKER_SOS
LEAF_NODE	2374:34	2374:34	4	;
EXPR_STATEMENT	2376:1	2376:20	3	sp -> out_buffer [ 2 ] = 0 ;
EXPR	2376:1	2376:1	4	sp -> out_buffer [ 2 ] = 0
ASSIGN	2376:1	2376:19	5	sp -> out_buffer [ 2 ] = 0
LVAL	2376:1	2376:1	6	sp -> out_buffer [ 2 ]
FIELD	2376:1	2376:17	7	sp -> out_buffer [ 2 ]
LEAF_NODE	2376:1	2376:1	8	sp
LEAF_NODE	2376:3	2376:3	8	->
LEAF_NODE	2376:5	2376:5	8	out_buffer
LEAF_NODE	2376:15	2376:15	8	[
EXPR	2376:16	2376:16	8	2
FIELD	2376:16	2376:16	9	2
LEAF_NODE	2376:16	2376:16	10	2
LEAF_NODE	2376:17	2376:17	8	]
ASSIGN_OP	2376:18	2376:18	6	=
LEAF_NODE	2376:18	2376:18	7	=
RVAL	2376:19	2376:19	6	0
FIELD	2376:19	2376:19	7	0
LEAF_NODE	2376:19	2376:19	8	0
LEAF_NODE	2376:20	2376:20	4	;
EXPR_STATEMENT	2377:1	2377:54	3	sp -> out_buffer [ 3 ] = 6 + sp -> samples_per_pixel_per_plane * 2 ;
EXPR	2377:1	2377:1	4	sp -> out_buffer [ 3 ] = 6 + sp -> samples_per_pixel_per_plane * 2
ASSIGN	2377:1	2377:19	5	sp -> out_buffer [ 3 ] = 6 + sp -> samples_per_pixel_per_plane * 2
LVAL	2377:1	2377:1	6	sp -> out_buffer [ 3 ]
FIELD	2377:1	2377:17	7	sp -> out_buffer [ 3 ]
LEAF_NODE	2377:1	2377:1	8	sp
LEAF_NODE	2377:3	2377:3	8	->
LEAF_NODE	2377:5	2377:5	8	out_buffer
LEAF_NODE	2377:15	2377:15	8	[
EXPR	2377:16	2377:16	8	3
FIELD	2377:16	2377:16	9	3
LEAF_NODE	2377:16	2377:16	10	3
LEAF_NODE	2377:17	2377:17	8	]
ASSIGN_OP	2377:18	2377:18	6	=
LEAF_NODE	2377:18	2377:18	7	=
RVAL	2377:19	2377:53	6	6 + sp -> samples_per_pixel_per_plane * 2
FIELD	2377:19	2377:19	7	6
LEAF_NODE	2377:19	2377:19	8	6
LEAF_NODE	2377:20	2377:20	7	+
FIELD	2377:21	2377:25	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2377:21	2377:21	8	sp
LEAF_NODE	2377:23	2377:23	8	->
LEAF_NODE	2377:25	2377:25	8	samples_per_pixel_per_plane
LEAF_NODE	2377:52	2377:52	7	*
FIELD	2377:53	2377:53	7	2
LEAF_NODE	2377:53	2377:53	8	2
LEAF_NODE	2377:54	2377:54	4	;
EXPR_STATEMENT	2379:1	2379:50	3	sp -> out_buffer [ 4 ] = sp -> samples_per_pixel_per_plane ;
EXPR	2379:1	2379:1	4	sp -> out_buffer [ 4 ] = sp -> samples_per_pixel_per_plane
ASSIGN	2379:1	2379:19	5	sp -> out_buffer [ 4 ] = sp -> samples_per_pixel_per_plane
LVAL	2379:1	2379:1	6	sp -> out_buffer [ 4 ]
FIELD	2379:1	2379:17	7	sp -> out_buffer [ 4 ]
LEAF_NODE	2379:1	2379:1	8	sp
LEAF_NODE	2379:3	2379:3	8	->
LEAF_NODE	2379:5	2379:5	8	out_buffer
LEAF_NODE	2379:15	2379:15	8	[
EXPR	2379:16	2379:16	8	4
FIELD	2379:16	2379:16	9	4
LEAF_NODE	2379:16	2379:16	10	4
LEAF_NODE	2379:17	2379:17	8	]
ASSIGN_OP	2379:18	2379:18	6	=
LEAF_NODE	2379:18	2379:18	7	=
RVAL	2379:19	2379:19	6	sp -> samples_per_pixel_per_plane
FIELD	2379:19	2379:23	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2379:19	2379:19	8	sp
LEAF_NODE	2379:21	2379:21	8	->
LEAF_NODE	2379:23	2379:23	8	samples_per_pixel_per_plane
LEAF_NODE	2379:50	2379:50	4	;
ITERATION	2380:1	2381:1	3	
KEYWORD	2380:1	2380:1	4	for
LEAF_NODE	2380:1	2380:1	5	for
LEAF_NODE	2380:5	2380:5	4	(
FOR_INIT	2380:6	2380:9	4	m = 0 ;
EXPR	2380:6	2380:6	5	m = 0
ASSIGN	2380:6	2380:8	6	m = 0
LVAL	2380:6	2380:6	7	m
FIELD	2380:6	2380:6	8	m
LEAF_NODE	2380:6	2380:6	9	m
ASSIGN_OP	2380:7	2380:7	7	=
LEAF_NODE	2380:7	2380:7	8	=
RVAL	2380:8	2380:8	7	0
FIELD	2380:8	2380:8	8	0
LEAF_NODE	2380:8	2380:8	9	0
LEAF_NODE	2380:9	2380:9	5	;
CONDITION	2380:11	2380:11	4	m < sp -> samples_per_pixel_per_plane
EXPR	2380:11	2380:13	5	m < sp -> samples_per_pixel_per_plane
FIELD	2380:11	2380:11	6	m
LEAF_NODE	2380:11	2380:11	7	m
REL_OPERATOR	2380:12	2380:12	6	<
LEAF_NODE	2380:12	2380:12	7	<
FIELD	2380:13	2380:17	6	sp -> samples_per_pixel_per_plane
LEAF_NODE	2380:13	2380:13	7	sp
LEAF_NODE	2380:15	2380:15	7	->
LEAF_NODE	2380:17	2380:17	7	samples_per_pixel_per_plane
LEAF_NODE	2380:44	2380:44	4	;
FOR_EXPR	2380:46	2380:46	4	m ++
EXPR	2380:46	2380:46	5	m ++
FIELD	2380:46	2380:47	6	m ++
LEAF_NODE	2380:46	2380:46	7	m
LEAF_NODE	2380:47	2380:47	7	++
LEAF_NODE	2380:49	2380:49	4	)
STATEMENTS	2381:1	2386:1	4	
LEAF_NODE	2381:1	2381:1	5	{
STATEMENTS	2383:2	2385:2	5	
EXPR_STATEMENT	2383:2	2383:61	6	sp -> out_buffer [ 5 + m * 2 ] = sp -> sos_cs [ sp -> plane_sample_offset + m ] ;
EXPR	2383:2	2383:2	7	sp -> out_buffer [ 5 + m * 2 ] = sp -> sos_cs [ sp -> plane_sample_offset + m ]
ASSIGN	2383:2	2383:24	8	sp -> out_buffer [ 5 + m * 2 ] = sp -> sos_cs [ sp -> plane_sample_offset + m ]
LVAL	2383:2	2383:2	9	sp -> out_buffer [ 5 + m * 2 ]
FIELD	2383:2	2383:22	10	sp -> out_buffer [ 5 + m * 2 ]
LEAF_NODE	2383:2	2383:2	11	sp
LEAF_NODE	2383:4	2383:4	11	->
LEAF_NODE	2383:6	2383:6	11	out_buffer
LEAF_NODE	2383:16	2383:16	11	[
EXPR	2383:17	2383:21	11	5 + m * 2
FIELD	2383:17	2383:17	12	5
LEAF_NODE	2383:17	2383:17	13	5
LEAF_NODE	2383:18	2383:18	12	+
FIELD	2383:19	2383:19	12	m
LEAF_NODE	2383:19	2383:19	13	m
LEAF_NODE	2383:20	2383:20	12	*
FIELD	2383:21	2383:21	12	2
LEAF_NODE	2383:21	2383:21	13	2
LEAF_NODE	2383:22	2383:22	11	]
ASSIGN_OP	2383:23	2383:23	9	=
LEAF_NODE	2383:23	2383:23	10	=
RVAL	2383:24	2383:24	9	sp -> sos_cs [ sp -> plane_sample_offset + m ]
FIELD	2383:24	2383:60	10	sp -> sos_cs [ sp -> plane_sample_offset + m ]
LEAF_NODE	2383:24	2383:24	11	sp
LEAF_NODE	2383:26	2383:26	11	->
LEAF_NODE	2383:28	2383:28	11	sos_cs
LEAF_NODE	2383:34	2383:34	11	[
EXPR	2383:35	2383:59	11	sp -> plane_sample_offset + m
FIELD	2383:35	2383:39	12	sp -> plane_sample_offset
LEAF_NODE	2383:35	2383:35	13	sp
LEAF_NODE	2383:37	2383:37	13	->
LEAF_NODE	2383:39	2383:39	13	plane_sample_offset
LEAF_NODE	2383:58	2383:58	12	+
FIELD	2383:59	2383:59	12	m
LEAF_NODE	2383:59	2383:59	13	m
LEAF_NODE	2383:60	2383:60	11	]
LEAF_NODE	2383:61	2383:61	7	;
EXPR_STATEMENT	2385:2	2385:64	6	sp -> out_buffer [ 5 + m * 2 + 1 ] = sp -> sos_tda [ sp -> plane_sample_offset + m ] ;
EXPR	2385:2	2385:2	7	sp -> out_buffer [ 5 + m * 2 + 1 ] = sp -> sos_tda [ sp -> plane_sample_offset + m ]
ASSIGN	2385:2	2385:26	8	sp -> out_buffer [ 5 + m * 2 + 1 ] = sp -> sos_tda [ sp -> plane_sample_offset + m ]
LVAL	2385:2	2385:2	9	sp -> out_buffer [ 5 + m * 2 + 1 ]
FIELD	2385:2	2385:24	10	sp -> out_buffer [ 5 + m * 2 + 1 ]
LEAF_NODE	2385:2	2385:2	11	sp
LEAF_NODE	2385:4	2385:4	11	->
LEAF_NODE	2385:6	2385:6	11	out_buffer
LEAF_NODE	2385:16	2385:16	11	[
EXPR	2385:17	2385:23	11	5 + m * 2 + 1
FIELD	2385:17	2385:17	12	5
LEAF_NODE	2385:17	2385:17	13	5
LEAF_NODE	2385:18	2385:18	12	+
FIELD	2385:19	2385:19	12	m
LEAF_NODE	2385:19	2385:19	13	m
LEAF_NODE	2385:20	2385:20	12	*
FIELD	2385:21	2385:21	12	2
LEAF_NODE	2385:21	2385:21	13	2
LEAF_NODE	2385:22	2385:22	12	+
FIELD	2385:23	2385:23	12	1
LEAF_NODE	2385:23	2385:23	13	1
LEAF_NODE	2385:24	2385:24	11	]
ASSIGN_OP	2385:25	2385:25	9	=
LEAF_NODE	2385:25	2385:25	10	=
RVAL	2385:26	2385:26	9	sp -> sos_tda [ sp -> plane_sample_offset + m ]
FIELD	2385:26	2385:63	10	sp -> sos_tda [ sp -> plane_sample_offset + m ]
LEAF_NODE	2385:26	2385:26	11	sp
LEAF_NODE	2385:28	2385:28	11	->
LEAF_NODE	2385:30	2385:30	11	sos_tda
LEAF_NODE	2385:37	2385:37	11	[
EXPR	2385:38	2385:62	11	sp -> plane_sample_offset + m
FIELD	2385:38	2385:42	12	sp -> plane_sample_offset
LEAF_NODE	2385:38	2385:38	13	sp
LEAF_NODE	2385:40	2385:40	13	->
LEAF_NODE	2385:42	2385:42	13	plane_sample_offset
LEAF_NODE	2385:61	2385:61	12	+
FIELD	2385:62	2385:62	12	m
LEAF_NODE	2385:62	2385:62	13	m
LEAF_NODE	2385:63	2385:63	11	]
LEAF_NODE	2385:64	2385:64	7	;
LEAF_NODE	2386:1	2386:1	5	}
EXPR_STATEMENT	2388:1	2388:54	3	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 ] = 0 ;
EXPR	2388:1	2388:1	4	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 ] = 0
ASSIGN	2388:1	2388:53	5	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 ] = 0
LVAL	2388:1	2388:1	6	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 ]
FIELD	2388:1	2388:51	7	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 ]
LEAF_NODE	2388:1	2388:1	8	sp
LEAF_NODE	2388:3	2388:3	8	->
LEAF_NODE	2388:5	2388:5	8	out_buffer
LEAF_NODE	2388:15	2388:15	8	[
EXPR	2388:16	2388:50	8	5 + sp -> samples_per_pixel_per_plane * 2
FIELD	2388:16	2388:16	9	5
LEAF_NODE	2388:16	2388:16	10	5
LEAF_NODE	2388:17	2388:17	9	+
FIELD	2388:18	2388:22	9	sp -> samples_per_pixel_per_plane
LEAF_NODE	2388:18	2388:18	10	sp
LEAF_NODE	2388:20	2388:20	10	->
LEAF_NODE	2388:22	2388:22	10	samples_per_pixel_per_plane
LEAF_NODE	2388:49	2388:49	9	*
FIELD	2388:50	2388:50	9	2
LEAF_NODE	2388:50	2388:50	10	2
LEAF_NODE	2388:51	2388:51	8	]
ASSIGN_OP	2388:52	2388:52	6	=
LEAF_NODE	2388:52	2388:52	7	=
RVAL	2388:53	2388:53	6	0
FIELD	2388:53	2388:53	7	0
LEAF_NODE	2388:53	2388:53	8	0
LEAF_NODE	2388:54	2388:54	4	;
EXPR_STATEMENT	2390:1	2390:57	3	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 1 ] = 63 ;
EXPR	2390:1	2390:1	4	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 1 ] = 63
ASSIGN	2390:1	2390:55	5	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 1 ] = 63
LVAL	2390:1	2390:1	6	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 1 ]
FIELD	2390:1	2390:53	7	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 1 ]
LEAF_NODE	2390:1	2390:1	8	sp
LEAF_NODE	2390:3	2390:3	8	->
LEAF_NODE	2390:5	2390:5	8	out_buffer
LEAF_NODE	2390:15	2390:15	8	[
EXPR	2390:16	2390:52	8	5 + sp -> samples_per_pixel_per_plane * 2 + 1
FIELD	2390:16	2390:16	9	5
LEAF_NODE	2390:16	2390:16	10	5
LEAF_NODE	2390:17	2390:17	9	+
FIELD	2390:18	2390:22	9	sp -> samples_per_pixel_per_plane
LEAF_NODE	2390:18	2390:18	10	sp
LEAF_NODE	2390:20	2390:20	10	->
LEAF_NODE	2390:22	2390:22	10	samples_per_pixel_per_plane
LEAF_NODE	2390:49	2390:49	9	*
FIELD	2390:50	2390:50	9	2
LEAF_NODE	2390:50	2390:50	10	2
LEAF_NODE	2390:51	2390:51	9	+
FIELD	2390:52	2390:52	9	1
LEAF_NODE	2390:52	2390:52	10	1
LEAF_NODE	2390:53	2390:53	8	]
ASSIGN_OP	2390:54	2390:54	6	=
LEAF_NODE	2390:54	2390:54	7	=
RVAL	2390:55	2390:55	6	63
FIELD	2390:55	2390:55	7	63
LEAF_NODE	2390:55	2390:55	8	63
LEAF_NODE	2390:57	2390:57	4	;
EXPR_STATEMENT	2392:1	2392:56	3	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 2 ] = 0 ;
EXPR	2392:1	2392:1	4	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 2 ] = 0
ASSIGN	2392:1	2392:55	5	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 2 ] = 0
LVAL	2392:1	2392:1	6	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 2 ]
FIELD	2392:1	2392:53	7	sp -> out_buffer [ 5 + sp -> samples_per_pixel_per_plane * 2 + 2 ]
LEAF_NODE	2392:1	2392:1	8	sp
LEAF_NODE	2392:3	2392:3	8	->
LEAF_NODE	2392:5	2392:5	8	out_buffer
LEAF_NODE	2392:15	2392:15	8	[
EXPR	2392:16	2392:52	8	5 + sp -> samples_per_pixel_per_plane * 2 + 2
FIELD	2392:16	2392:16	9	5
LEAF_NODE	2392:16	2392:16	10	5
LEAF_NODE	2392:17	2392:17	9	+
FIELD	2392:18	2392:22	9	sp -> samples_per_pixel_per_plane
LEAF_NODE	2392:18	2392:18	10	sp
LEAF_NODE	2392:20	2392:20	10	->
LEAF_NODE	2392:22	2392:22	10	samples_per_pixel_per_plane
LEAF_NODE	2392:49	2392:49	9	*
FIELD	2392:50	2392:50	9	2
LEAF_NODE	2392:50	2392:50	10	2
LEAF_NODE	2392:51	2392:51	9	+
FIELD	2392:52	2392:52	9	2
LEAF_NODE	2392:52	2392:52	10	2
LEAF_NODE	2392:53	2392:53	8	]
ASSIGN_OP	2392:54	2392:54	6	=
LEAF_NODE	2392:54	2392:54	7	=
RVAL	2392:55	2392:55	6	0
FIELD	2392:55	2392:55	7	0
LEAF_NODE	2392:55	2392:55	8	0
LEAF_NODE	2392:56	2392:56	4	;
EXPR_STATEMENT	2393:1	2393:41	3	* len = 8 + sp -> samples_per_pixel_per_plane * 2 ;
EXPR	2393:1	2393:1	4	* len = 8 + sp -> samples_per_pixel_per_plane * 2
ASSIGN	2393:1	2393:6	5	* len = 8 + sp -> samples_per_pixel_per_plane * 2
LVAL	2393:1	2393:1	6	* len
UNARY_EXPR	2393:1	2393:2	7	* len
UNARY_OPERATOR	2393:1	2393:1	8	*
LEAF_NODE	2393:1	2393:1	9	*
FIELD	2393:2	2393:2	8	len
LEAF_NODE	2393:2	2393:2	9	len
ASSIGN_OP	2393:5	2393:5	6	=
LEAF_NODE	2393:5	2393:5	7	=
RVAL	2393:6	2393:40	6	8 + sp -> samples_per_pixel_per_plane * 2
FIELD	2393:6	2393:6	7	8
LEAF_NODE	2393:6	2393:6	8	8
LEAF_NODE	2393:7	2393:7	7	+
FIELD	2393:8	2393:12	7	sp -> samples_per_pixel_per_plane
LEAF_NODE	2393:8	2393:8	8	sp
LEAF_NODE	2393:10	2393:10	8	->
LEAF_NODE	2393:12	2393:12	8	samples_per_pixel_per_plane
LEAF_NODE	2393:39	2393:39	7	*
FIELD	2393:40	2393:40	7	2
LEAF_NODE	2393:40	2393:40	8	2
LEAF_NODE	2393:41	2393:41	4	;
EXPR_STATEMENT	2394:1	2394:27	3	* mem = ( void * ) sp -> out_buffer ;
EXPR	2394:1	2394:1	4	* mem = ( void * ) sp -> out_buffer
ASSIGN	2394:1	2394:6	5	* mem = ( void * ) sp -> out_buffer
LVAL	2394:1	2394:1	6	* mem
UNARY_EXPR	2394:1	2394:2	7	* mem
UNARY_OPERATOR	2394:1	2394:1	8	*
LEAF_NODE	2394:1	2394:1	9	*
FIELD	2394:2	2394:2	8	mem
LEAF_NODE	2394:2	2394:2	9	mem
ASSIGN_OP	2394:5	2394:5	6	=
LEAF_NODE	2394:5	2394:5	7	=
RVAL	2394:6	2394:13	6	( void * ) sp -> out_buffer
LEAF_NODE	2394:6	2394:6	7	(
TYPE_NAME	2394:7	2394:7	7	void
LEAF_NODE	2394:7	2394:7	8	void
LEAF_NODE	2394:11	2394:11	7	*
LEAF_NODE	2394:12	2394:12	7	)
FIELD	2394:13	2394:17	7	sp -> out_buffer
LEAF_NODE	2394:13	2394:13	8	sp
LEAF_NODE	2394:15	2394:15	8	->
LEAF_NODE	2394:17	2394:17	8	out_buffer
LEAF_NODE	2394:27	2394:27	4	;
EXPR_STATEMENT	2395:1	2395:16	3	sp -> out_state ++ ;
EXPR	2395:1	2395:1	4	sp -> out_state ++
FIELD	2395:1	2395:14	5	sp -> out_state ++
LEAF_NODE	2395:1	2395:1	6	sp
LEAF_NODE	2395:3	2395:3	6	->
LEAF_NODE	2395:5	2395:5	6	out_state
LEAF_NODE	2395:14	2395:14	6	++
LEAF_NODE	2395:16	2395:16	4	;
LEAF_NODE	2396:0	2396:0	2	}
FUNCTION_DEF	2398:0	2429:0	1	
RETURN_TYPE	2398:0	2398:7	2	static int
LEAF_NODE	2398:0	2398:0	3	static
TYPE_NAME	2398:7	2398:7	3	int
LEAF_NODE	2398:7	2398:7	4	int
FUNCTION_NAME	2399:0	2399:0	2	OJPEGWriteStreamCompressed
LEAF_NODE	2399:0	2399:0	3	OJPEGWriteStreamCompressed
PARAMETER_LIST	2399:26	2399:61	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2399:26	2399:26	3	(
PARAMETER_DECL	2399:27	2399:33	3	TIFF * tif
TYPE	2399:27	2399:31	4	TIFF *
TYPE_NAME	2399:27	2399:27	5	TIFF
LEAF_NODE	2399:27	2399:27	6	TIFF
POINTER	2399:31	2399:31	5	*
LEAF_NODE	2399:31	2399:31	6	*
NAME	2399:33	2399:33	4	tif
LEAF_NODE	2399:33	2399:33	5	tif
LEAF_NODE	2399:36	2399:36	3	,
PARAMETER_DECL	2399:38	2399:45	3	void * * mem
TYPE	2399:38	2399:42	4	void * *
TYPE_NAME	2399:38	2399:38	5	void
LEAF_NODE	2399:38	2399:38	6	void
POINTER	2399:42	2399:43	5	* *
LEAF_NODE	2399:42	2399:42	6	*
LEAF_NODE	2399:43	2399:43	6	*
NAME	2399:45	2399:45	4	mem
LEAF_NODE	2399:45	2399:45	5	mem
LEAF_NODE	2399:48	2399:48	3	,
PARAMETER_DECL	2399:50	2399:58	3	uint32 * len
TYPE	2399:50	2399:56	4	uint32 *
TYPE_NAME	2399:50	2399:50	5	uint32
LEAF_NODE	2399:50	2399:50	6	uint32
POINTER	2399:56	2399:56	5	*
LEAF_NODE	2399:56	2399:56	6	*
NAME	2399:58	2399:58	4	len
LEAF_NODE	2399:58	2399:58	5	len
LEAF_NODE	2399:61	2399:61	3	)
LEAF_NODE	2400:0	2400:0	2	{
STATEMENTS	2401:1	2428:1	2	
SIMPLE_DECL	2401:1	2401:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2401:1	2401:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2401:1	2401:11	5	OJPEGState *
TYPE_NAME	2401:1	2401:1	6	OJPEGState
LEAF_NODE	2401:1	2401:1	7	OJPEGState
POINTER	2401:11	2401:11	6	*
LEAF_NODE	2401:11	2401:11	7	*
NAME	2401:13	2401:13	5	sp
LEAF_NODE	2401:13	2401:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2401:13	2401:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2401:13	2401:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2401:13	2401:13	7	sp
NAME	2401:13	2401:13	8	sp
LEAF_NODE	2401:13	2401:13	9	sp
ASSIGN_OP	2401:15	2401:15	7	=
LEAF_NODE	2401:15	2401:15	8	=
RVAL	2401:16	2401:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2401:16	2401:16	8	(
TYPE_NAME	2401:17	2401:17	8	OJPEGState
LEAF_NODE	2401:17	2401:17	9	OJPEGState
LEAF_NODE	2401:27	2401:27	8	*
LEAF_NODE	2401:28	2401:28	8	)
FIELD	2401:29	2401:34	8	tif -> tif_data
LEAF_NODE	2401:29	2401:29	9	tif
LEAF_NODE	2401:32	2401:32	9	->
LEAF_NODE	2401:34	2401:34	9	tif_data
LEAF_NODE	2401:42	2401:42	4	;
SELECTION	2402:1	2403:1	3	
KEYWORD	2402:1	2402:1	4	if
LEAF_NODE	2402:1	2402:1	5	if
LEAF_NODE	2402:4	2402:4	4	(
CONDITION	2402:5	2402:5	4	sp -> in_buffer_togo == 0
EXPR	2402:5	2402:25	5	sp -> in_buffer_togo == 0
FIELD	2402:5	2402:9	6	sp -> in_buffer_togo
LEAF_NODE	2402:5	2402:5	7	sp
LEAF_NODE	2402:7	2402:7	7	->
LEAF_NODE	2402:9	2402:9	7	in_buffer_togo
EQ_OPERATOR	2402:23	2402:23	6	==
LEAF_NODE	2402:23	2402:23	7	==
FIELD	2402:25	2402:25	6	0
LEAF_NODE	2402:25	2402:25	7	0
LEAF_NODE	2402:26	2402:26	4	)
STATEMENTS	2403:1	2407:1	4	
LEAF_NODE	2403:1	2403:1	5	{
STATEMENTS	2404:2	2406:2	5	
SELECTION	2404:2	2405:3	6	
KEYWORD	2404:2	2404:2	7	if
LEAF_NODE	2404:2	2404:2	8	if
LEAF_NODE	2404:5	2404:5	7	(
CONDITION	2404:6	2404:6	7	OJPEGReadBufferFill ( sp ) == 0
EXPR	2404:6	2404:31	8	OJPEGReadBufferFill ( sp ) == 0
FUNCTION_CALL	2404:6	2404:28	9	OJPEGReadBufferFill ( sp )
CALLEE	2404:6	2404:6	10	OJPEGReadBufferFill
LEAF_NODE	2404:6	2404:6	11	OJPEGReadBufferFill
LEAF_NODE	2404:25	2404:25	10	(
ARGUMENT	2404:26	2404:26	10	sp
FIELD	2404:26	2404:26	11	sp
LEAF_NODE	2404:26	2404:26	12	sp
LEAF_NODE	2404:28	2404:28	10	)
EQ_OPERATOR	2404:29	2404:29	9	==
LEAF_NODE	2404:29	2404:29	10	==
FIELD	2404:31	2404:31	9	0
LEAF_NODE	2404:31	2404:31	10	0
LEAF_NODE	2404:32	2404:32	7	)
STATEMENTS	2405:3	2405:3	7	
JUMP_STATEMENT	2405:3	2405:12	8	return ( 0 ) ;
KEYWORD	2405:3	2405:3	9	return
LEAF_NODE	2405:3	2405:3	10	return
DESTINATION	2405:9	2405:9	9	( 0 )
EXPR	2405:9	2405:11	10	( 0 )
LEAF_NODE	2405:9	2405:9	11	(
FIELD	2405:10	2405:10	11	0
LEAF_NODE	2405:10	2405:10	12	0
LEAF_NODE	2405:11	2405:11	11	)
LEAF_NODE	2405:12	2405:12	9	;
EXPR_STATEMENT	2406:2	2406:30	6	assert ( sp -> in_buffer_togo > 0 ) ;
EXPR	2406:2	2406:2	7	assert ( sp -> in_buffer_togo > 0 )
FUNCTION_CALL	2406:2	2406:29	8	assert ( sp -> in_buffer_togo > 0 )
CALLEE	2406:2	2406:2	9	assert
LEAF_NODE	2406:2	2406:2	10	assert
LEAF_NODE	2406:8	2406:8	9	(
ARGUMENT	2406:9	2406:28	9	sp -> in_buffer_togo > 0
FIELD	2406:9	2406:13	10	sp -> in_buffer_togo
LEAF_NODE	2406:9	2406:9	11	sp
LEAF_NODE	2406:11	2406:11	11	->
LEAF_NODE	2406:13	2406:13	11	in_buffer_togo
REL_OPERATOR	2406:27	2406:27	10	>
LEAF_NODE	2406:27	2406:27	11	>
FIELD	2406:28	2406:28	10	0
LEAF_NODE	2406:28	2406:28	11	0
LEAF_NODE	2406:29	2406:29	9	)
LEAF_NODE	2406:30	2406:30	7	;
LEAF_NODE	2407:1	2407:1	5	}
EXPR_STATEMENT	2408:1	2408:24	3	* len = sp -> in_buffer_togo ;
EXPR	2408:1	2408:1	4	* len = sp -> in_buffer_togo
ASSIGN	2408:1	2408:6	5	* len = sp -> in_buffer_togo
LVAL	2408:1	2408:1	6	* len
UNARY_EXPR	2408:1	2408:2	7	* len
UNARY_OPERATOR	2408:1	2408:1	8	*
LEAF_NODE	2408:1	2408:1	9	*
FIELD	2408:2	2408:2	8	len
LEAF_NODE	2408:2	2408:2	9	len
ASSIGN_OP	2408:5	2408:5	6	=
LEAF_NODE	2408:5	2408:5	7	=
RVAL	2408:6	2408:6	6	sp -> in_buffer_togo
FIELD	2408:6	2408:10	7	sp -> in_buffer_togo
LEAF_NODE	2408:6	2408:6	8	sp
LEAF_NODE	2408:8	2408:8	8	->
LEAF_NODE	2408:10	2408:10	8	in_buffer_togo
LEAF_NODE	2408:24	2408:24	4	;
EXPR_STATEMENT	2409:1	2409:30	3	* mem = ( void * ) sp -> in_buffer_cur ;
EXPR	2409:1	2409:1	4	* mem = ( void * ) sp -> in_buffer_cur
ASSIGN	2409:1	2409:6	5	* mem = ( void * ) sp -> in_buffer_cur
LVAL	2409:1	2409:1	6	* mem
UNARY_EXPR	2409:1	2409:2	7	* mem
UNARY_OPERATOR	2409:1	2409:1	8	*
LEAF_NODE	2409:1	2409:1	9	*
FIELD	2409:2	2409:2	8	mem
LEAF_NODE	2409:2	2409:2	9	mem
ASSIGN_OP	2409:5	2409:5	6	=
LEAF_NODE	2409:5	2409:5	7	=
RVAL	2409:6	2409:13	6	( void * ) sp -> in_buffer_cur
LEAF_NODE	2409:6	2409:6	7	(
TYPE_NAME	2409:7	2409:7	7	void
LEAF_NODE	2409:7	2409:7	8	void
LEAF_NODE	2409:11	2409:11	7	*
LEAF_NODE	2409:12	2409:12	7	)
FIELD	2409:13	2409:17	7	sp -> in_buffer_cur
LEAF_NODE	2409:13	2409:13	8	sp
LEAF_NODE	2409:15	2409:15	8	->
LEAF_NODE	2409:17	2409:17	8	in_buffer_cur
LEAF_NODE	2409:30	2409:30	4	;
EXPR_STATEMENT	2410:1	2410:21	3	sp -> in_buffer_togo = 0 ;
EXPR	2410:1	2410:1	4	sp -> in_buffer_togo = 0
ASSIGN	2410:1	2410:20	5	sp -> in_buffer_togo = 0
LVAL	2410:1	2410:1	6	sp -> in_buffer_togo
FIELD	2410:1	2410:5	7	sp -> in_buffer_togo
LEAF_NODE	2410:1	2410:1	8	sp
LEAF_NODE	2410:3	2410:3	8	->
LEAF_NODE	2410:5	2410:5	8	in_buffer_togo
ASSIGN_OP	2410:19	2410:19	6	=
LEAF_NODE	2410:19	2410:19	7	=
RVAL	2410:20	2410:20	6	0
FIELD	2410:20	2410:20	7	0
LEAF_NODE	2410:20	2410:20	8	0
LEAF_NODE	2410:21	2410:21	4	;
SELECTION	2411:1	2412:1	3	
KEYWORD	2411:1	2411:1	4	if
LEAF_NODE	2411:1	2411:1	5	if
LEAF_NODE	2411:4	2411:4	4	(
CONDITION	2411:5	2411:5	4	sp -> in_buffer_file_togo == 0
EXPR	2411:5	2411:30	5	sp -> in_buffer_file_togo == 0
FIELD	2411:5	2411:9	6	sp -> in_buffer_file_togo
LEAF_NODE	2411:5	2411:5	7	sp
LEAF_NODE	2411:7	2411:7	7	->
LEAF_NODE	2411:9	2411:9	7	in_buffer_file_togo
EQ_OPERATOR	2411:28	2411:28	6	==
LEAF_NODE	2411:28	2411:28	7	==
FIELD	2411:30	2411:30	6	0
LEAF_NODE	2411:30	2411:30	7	0
LEAF_NODE	2411:31	2411:31	4	)
STATEMENTS	2412:1	2427:1	4	
LEAF_NODE	2412:1	2412:1	5	{
STATEMENTS	2413:2	2413:2	5	
SELECTION	2413:2	2414:2	6	
KEYWORD	2413:2	2413:2	7	switch
LEAF_NODE	2413:2	2413:2	8	switch
LEAF_NODE	2413:8	2413:8	7	(
CONDITION	2413:9	2413:9	7	sp -> in_buffer_source
EXPR	2413:9	2413:9	8	sp -> in_buffer_source
FIELD	2413:9	2413:13	9	sp -> in_buffer_source
LEAF_NODE	2413:9	2413:9	10	sp
LEAF_NODE	2413:11	2413:11	10	->
LEAF_NODE	2413:13	2413:13	10	in_buffer_source
LEAF_NODE	2413:29	2413:29	7	)
STATEMENTS	2414:2	2426:2	7	
LEAF_NODE	2414:2	2414:2	8	{
STATEMENTS	2415:3	2425:4	8	
LABEL	2415:3	2415:19	9	case osibsStrile :
LEAF_NODE	2415:3	2415:3	10	case
LEAF_NODE	2415:8	2415:8	10	osibsStrile
LEAF_NODE	2415:19	2415:19	10	:
SELECTION	2416:4	2417:5	9	
KEYWORD	2416:4	2416:4	10	if
LEAF_NODE	2416:4	2416:4	11	if
LEAF_NODE	2416:7	2416:7	10	(
CONDITION	2416:8	2416:8	10	sp -> in_buffer_next_strile < sp -> in_buffer_strile_count
EXPR	2416:8	2416:34	11	sp -> in_buffer_next_strile < sp -> in_buffer_strile_count
FIELD	2416:8	2416:12	12	sp -> in_buffer_next_strile
LEAF_NODE	2416:8	2416:8	13	sp
LEAF_NODE	2416:10	2416:10	13	->
LEAF_NODE	2416:12	2416:12	13	in_buffer_next_strile
REL_OPERATOR	2416:33	2416:33	12	<
LEAF_NODE	2416:33	2416:33	13	<
FIELD	2416:34	2416:38	12	sp -> in_buffer_strile_count
LEAF_NODE	2416:34	2416:34	13	sp
LEAF_NODE	2416:36	2416:36	13	->
LEAF_NODE	2416:38	2416:38	13	in_buffer_strile_count
LEAF_NODE	2416:60	2416:60	10	)
STATEMENTS	2417:5	2417:5	10	
EXPR_STATEMENT	2417:5	2417:26	11	sp -> out_state = ososRst ;
EXPR	2417:5	2417:5	12	sp -> out_state = ososRst
ASSIGN	2417:5	2417:19	13	sp -> out_state = ososRst
LVAL	2417:5	2417:5	14	sp -> out_state
FIELD	2417:5	2417:9	15	sp -> out_state
LEAF_NODE	2417:5	2417:5	16	sp
LEAF_NODE	2417:7	2417:7	16	->
LEAF_NODE	2417:9	2417:9	16	out_state
ASSIGN_OP	2417:18	2417:18	14	=
LEAF_NODE	2417:18	2417:18	15	=
RVAL	2417:19	2417:19	14	ososRst
FIELD	2417:19	2417:19	15	ososRst
LEAF_NODE	2417:19	2417:19	16	ososRst
LEAF_NODE	2417:26	2417:26	12	;
SELECTION	2418:4	2419:5	9	
KEYWORD	2418:4	2418:4	10	else
LEAF_NODE	2418:4	2418:4	11	else
STATEMENTS	2419:5	2419:5	10	
EXPR_STATEMENT	2419:5	2419:26	11	sp -> out_state = ososEoi ;
EXPR	2419:5	2419:5	12	sp -> out_state = ososEoi
ASSIGN	2419:5	2419:19	13	sp -> out_state = ososEoi
LVAL	2419:5	2419:5	14	sp -> out_state
FIELD	2419:5	2419:9	15	sp -> out_state
LEAF_NODE	2419:5	2419:5	16	sp
LEAF_NODE	2419:7	2419:7	16	->
LEAF_NODE	2419:9	2419:9	16	out_state
ASSIGN_OP	2419:18	2419:18	14	=
LEAF_NODE	2419:18	2419:18	15	=
RVAL	2419:19	2419:19	14	ososEoi
FIELD	2419:19	2419:19	15	ososEoi
LEAF_NODE	2419:19	2419:19	16	ososEoi
LEAF_NODE	2419:26	2419:26	12	;
JUMP_STATEMENT	2420:4	2420:9	9	break DESTINATION ;
KEYWORD	2420:4	2420:4	10	break
LEAF_NODE	2420:4	2420:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2420:9	2420:9	10	;
LABEL	2421:3	2421:16	9	case osibsEof :
LEAF_NODE	2421:3	2421:3	10	case
LEAF_NODE	2421:8	2421:8	10	osibsEof
LEAF_NODE	2421:16	2421:16	10	:
EXPR_STATEMENT	2422:4	2422:25	9	sp -> out_state = ososEoi ;
EXPR	2422:4	2422:4	10	sp -> out_state = ososEoi
ASSIGN	2422:4	2422:18	11	sp -> out_state = ososEoi
LVAL	2422:4	2422:4	12	sp -> out_state
FIELD	2422:4	2422:8	13	sp -> out_state
LEAF_NODE	2422:4	2422:4	14	sp
LEAF_NODE	2422:6	2422:6	14	->
LEAF_NODE	2422:8	2422:8	14	out_state
ASSIGN_OP	2422:17	2422:17	12	=
LEAF_NODE	2422:17	2422:17	13	=
RVAL	2422:18	2422:18	12	ososEoi
FIELD	2422:18	2422:18	13	ososEoi
LEAF_NODE	2422:18	2422:18	14	ososEoi
LEAF_NODE	2422:25	2422:25	10	;
JUMP_STATEMENT	2423:4	2423:9	9	break DESTINATION ;
KEYWORD	2423:4	2423:4	10	break
LEAF_NODE	2423:4	2423:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2423:9	2423:9	10	;
LABEL	2424:3	2424:10	9	default :
LEAF_NODE	2424:3	2424:3	10	default
LEAF_NODE	2424:10	2424:10	10	:
JUMP_STATEMENT	2425:4	2425:9	9	break DESTINATION ;
KEYWORD	2425:4	2425:4	10	break
LEAF_NODE	2425:4	2425:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2425:9	2425:9	10	;
LEAF_NODE	2426:2	2426:2	8	}
LEAF_NODE	2427:1	2427:1	5	}
JUMP_STATEMENT	2428:1	2428:10	3	return ( 1 ) ;
KEYWORD	2428:1	2428:1	4	return
LEAF_NODE	2428:1	2428:1	5	return
DESTINATION	2428:7	2428:7	4	( 1 )
EXPR	2428:7	2428:9	5	( 1 )
LEAF_NODE	2428:7	2428:7	6	(
FIELD	2428:8	2428:8	6	1
LEAF_NODE	2428:8	2428:8	7	1
LEAF_NODE	2428:9	2428:9	6	)
LEAF_NODE	2428:10	2428:10	4	;
LEAF_NODE	2429:0	2429:0	2	}
FUNCTION_DEF	2431:0	2444:0	1	
RETURN_TYPE	2431:0	2431:7	2	static void
LEAF_NODE	2431:0	2431:0	3	static
TYPE_NAME	2431:7	2431:7	3	void
LEAF_NODE	2431:7	2431:7	4	void
FUNCTION_NAME	2432:0	2432:0	2	OJPEGWriteStreamRst
LEAF_NODE	2432:0	2432:0	3	OJPEGWriteStreamRst
PARAMETER_LIST	2432:19	2432:54	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2432:19	2432:19	3	(
PARAMETER_DECL	2432:20	2432:26	3	TIFF * tif
TYPE	2432:20	2432:24	4	TIFF *
TYPE_NAME	2432:20	2432:20	5	TIFF
LEAF_NODE	2432:20	2432:20	6	TIFF
POINTER	2432:24	2432:24	5	*
LEAF_NODE	2432:24	2432:24	6	*
NAME	2432:26	2432:26	4	tif
LEAF_NODE	2432:26	2432:26	5	tif
LEAF_NODE	2432:29	2432:29	3	,
PARAMETER_DECL	2432:31	2432:38	3	void * * mem
TYPE	2432:31	2432:35	4	void * *
TYPE_NAME	2432:31	2432:31	5	void
LEAF_NODE	2432:31	2432:31	6	void
POINTER	2432:35	2432:36	5	* *
LEAF_NODE	2432:35	2432:35	6	*
LEAF_NODE	2432:36	2432:36	6	*
NAME	2432:38	2432:38	4	mem
LEAF_NODE	2432:38	2432:38	5	mem
LEAF_NODE	2432:41	2432:41	3	,
PARAMETER_DECL	2432:43	2432:51	3	uint32 * len
TYPE	2432:43	2432:49	4	uint32 *
TYPE_NAME	2432:43	2432:43	5	uint32
LEAF_NODE	2432:43	2432:43	6	uint32
POINTER	2432:49	2432:49	5	*
LEAF_NODE	2432:49	2432:49	6	*
NAME	2432:51	2432:51	4	len
LEAF_NODE	2432:51	2432:51	5	len
LEAF_NODE	2432:54	2432:54	3	)
LEAF_NODE	2433:0	2433:0	2	{
STATEMENTS	2434:1	2443:1	2	
SIMPLE_DECL	2434:1	2434:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2434:1	2434:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2434:1	2434:11	5	OJPEGState *
TYPE_NAME	2434:1	2434:1	6	OJPEGState
LEAF_NODE	2434:1	2434:1	7	OJPEGState
POINTER	2434:11	2434:11	6	*
LEAF_NODE	2434:11	2434:11	7	*
NAME	2434:13	2434:13	5	sp
LEAF_NODE	2434:13	2434:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2434:13	2434:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2434:13	2434:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2434:13	2434:13	7	sp
NAME	2434:13	2434:13	8	sp
LEAF_NODE	2434:13	2434:13	9	sp
ASSIGN_OP	2434:15	2434:15	7	=
LEAF_NODE	2434:15	2434:15	8	=
RVAL	2434:16	2434:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2434:16	2434:16	8	(
TYPE_NAME	2434:17	2434:17	8	OJPEGState
LEAF_NODE	2434:17	2434:17	9	OJPEGState
LEAF_NODE	2434:27	2434:27	8	*
LEAF_NODE	2434:28	2434:28	8	)
FIELD	2434:29	2434:34	8	tif -> tif_data
LEAF_NODE	2434:29	2434:29	9	tif
LEAF_NODE	2434:32	2434:32	9	->
LEAF_NODE	2434:34	2434:34	9	tif_data
LEAF_NODE	2434:42	2434:42	4	;
EXPR_STATEMENT	2435:1	2435:24	3	assert ( OJPEG_BUFFER >= 2 ) ;
EXPR	2435:1	2435:1	4	assert ( OJPEG_BUFFER >= 2 )
FUNCTION_CALL	2435:1	2435:23	5	assert ( OJPEG_BUFFER >= 2 )
CALLEE	2435:1	2435:1	6	assert
LEAF_NODE	2435:1	2435:1	7	assert
LEAF_NODE	2435:7	2435:7	6	(
ARGUMENT	2435:8	2435:22	6	OJPEG_BUFFER >= 2
FIELD	2435:8	2435:8	7	OJPEG_BUFFER
LEAF_NODE	2435:8	2435:8	8	OJPEG_BUFFER
REL_OPERATOR	2435:20	2435:20	7	>=
LEAF_NODE	2435:20	2435:20	8	>=
FIELD	2435:22	2435:22	7	2
LEAF_NODE	2435:22	2435:22	8	2
LEAF_NODE	2435:23	2435:23	6	)
LEAF_NODE	2435:24	2435:24	4	;
EXPR_STATEMENT	2436:1	2436:22	3	sp -> out_buffer [ 0 ] = 255 ;
EXPR	2436:1	2436:1	4	sp -> out_buffer [ 0 ] = 255
ASSIGN	2436:1	2436:19	5	sp -> out_buffer [ 0 ] = 255
LVAL	2436:1	2436:1	6	sp -> out_buffer [ 0 ]
FIELD	2436:1	2436:17	7	sp -> out_buffer [ 0 ]
LEAF_NODE	2436:1	2436:1	8	sp
LEAF_NODE	2436:3	2436:3	8	->
LEAF_NODE	2436:5	2436:5	8	out_buffer
LEAF_NODE	2436:15	2436:15	8	[
EXPR	2436:16	2436:16	8	0
FIELD	2436:16	2436:16	9	0
LEAF_NODE	2436:16	2436:16	10	0
LEAF_NODE	2436:17	2436:17	8	]
ASSIGN_OP	2436:18	2436:18	6	=
LEAF_NODE	2436:18	2436:18	7	=
RVAL	2436:19	2436:19	6	255
FIELD	2436:19	2436:19	7	255
LEAF_NODE	2436:19	2436:19	8	255
LEAF_NODE	2436:22	2436:22	4	;
EXPR_STATEMENT	2437:1	2437:53	3	sp -> out_buffer [ 1 ] = JPEG_MARKER_RST0 + sp -> restart_index ;
EXPR	2437:1	2437:1	4	sp -> out_buffer [ 1 ] = JPEG_MARKER_RST0 + sp -> restart_index
ASSIGN	2437:1	2437:19	5	sp -> out_buffer [ 1 ] = JPEG_MARKER_RST0 + sp -> restart_index
LVAL	2437:1	2437:1	6	sp -> out_buffer [ 1 ]
FIELD	2437:1	2437:17	7	sp -> out_buffer [ 1 ]
LEAF_NODE	2437:1	2437:1	8	sp
LEAF_NODE	2437:3	2437:3	8	->
LEAF_NODE	2437:5	2437:5	8	out_buffer
LEAF_NODE	2437:15	2437:15	8	[
EXPR	2437:16	2437:16	8	1
FIELD	2437:16	2437:16	9	1
LEAF_NODE	2437:16	2437:16	10	1
LEAF_NODE	2437:17	2437:17	8	]
ASSIGN_OP	2437:18	2437:18	6	=
LEAF_NODE	2437:18	2437:18	7	=
RVAL	2437:19	2437:36	6	JPEG_MARKER_RST0 + sp -> restart_index
FIELD	2437:19	2437:19	7	JPEG_MARKER_RST0
LEAF_NODE	2437:19	2437:19	8	JPEG_MARKER_RST0
LEAF_NODE	2437:35	2437:35	7	+
FIELD	2437:36	2437:40	7	sp -> restart_index
LEAF_NODE	2437:36	2437:36	8	sp
LEAF_NODE	2437:38	2437:38	8	->
LEAF_NODE	2437:40	2437:40	8	restart_index
LEAF_NODE	2437:53	2437:53	4	;
EXPR_STATEMENT	2438:1	2438:20	3	sp -> restart_index ++ ;
EXPR	2438:1	2438:1	4	sp -> restart_index ++
FIELD	2438:1	2438:18	5	sp -> restart_index ++
LEAF_NODE	2438:1	2438:1	6	sp
LEAF_NODE	2438:3	2438:3	6	->
LEAF_NODE	2438:5	2438:5	6	restart_index
LEAF_NODE	2438:18	2438:18	6	++
LEAF_NODE	2438:20	2438:20	4	;
SELECTION	2439:1	2440:2	3	
KEYWORD	2439:1	2439:1	4	if
LEAF_NODE	2439:1	2439:1	5	if
LEAF_NODE	2439:4	2439:4	4	(
CONDITION	2439:5	2439:5	4	sp -> restart_index == 8
EXPR	2439:5	2439:24	5	sp -> restart_index == 8
FIELD	2439:5	2439:9	6	sp -> restart_index
LEAF_NODE	2439:5	2439:5	7	sp
LEAF_NODE	2439:7	2439:7	7	->
LEAF_NODE	2439:9	2439:9	7	restart_index
EQ_OPERATOR	2439:22	2439:22	6	==
LEAF_NODE	2439:22	2439:22	7	==
FIELD	2439:24	2439:24	6	8
LEAF_NODE	2439:24	2439:24	7	8
LEAF_NODE	2439:25	2439:25	4	)
STATEMENTS	2440:2	2440:2	4	
EXPR_STATEMENT	2440:2	2440:21	5	sp -> restart_index = 0 ;
EXPR	2440:2	2440:2	6	sp -> restart_index = 0
ASSIGN	2440:2	2440:20	7	sp -> restart_index = 0
LVAL	2440:2	2440:2	8	sp -> restart_index
FIELD	2440:2	2440:6	9	sp -> restart_index
LEAF_NODE	2440:2	2440:2	10	sp
LEAF_NODE	2440:4	2440:4	10	->
LEAF_NODE	2440:6	2440:6	10	restart_index
ASSIGN_OP	2440:19	2440:19	8	=
LEAF_NODE	2440:19	2440:19	9	=
RVAL	2440:20	2440:20	8	0
FIELD	2440:20	2440:20	9	0
LEAF_NODE	2440:20	2440:20	10	0
LEAF_NODE	2440:21	2440:21	6	;
EXPR_STATEMENT	2441:1	2441:7	3	* len = 2 ;
EXPR	2441:1	2441:1	4	* len = 2
ASSIGN	2441:1	2441:6	5	* len = 2
LVAL	2441:1	2441:1	6	* len
UNARY_EXPR	2441:1	2441:2	7	* len
UNARY_OPERATOR	2441:1	2441:1	8	*
LEAF_NODE	2441:1	2441:1	9	*
FIELD	2441:2	2441:2	8	len
LEAF_NODE	2441:2	2441:2	9	len
ASSIGN_OP	2441:5	2441:5	6	=
LEAF_NODE	2441:5	2441:5	7	=
RVAL	2441:6	2441:6	6	2
FIELD	2441:6	2441:6	7	2
LEAF_NODE	2441:6	2441:6	8	2
LEAF_NODE	2441:7	2441:7	4	;
EXPR_STATEMENT	2442:1	2442:27	3	* mem = ( void * ) sp -> out_buffer ;
EXPR	2442:1	2442:1	4	* mem = ( void * ) sp -> out_buffer
ASSIGN	2442:1	2442:6	5	* mem = ( void * ) sp -> out_buffer
LVAL	2442:1	2442:1	6	* mem
UNARY_EXPR	2442:1	2442:2	7	* mem
UNARY_OPERATOR	2442:1	2442:1	8	*
LEAF_NODE	2442:1	2442:1	9	*
FIELD	2442:2	2442:2	8	mem
LEAF_NODE	2442:2	2442:2	9	mem
ASSIGN_OP	2442:5	2442:5	6	=
LEAF_NODE	2442:5	2442:5	7	=
RVAL	2442:6	2442:13	6	( void * ) sp -> out_buffer
LEAF_NODE	2442:6	2442:6	7	(
TYPE_NAME	2442:7	2442:7	7	void
LEAF_NODE	2442:7	2442:7	8	void
LEAF_NODE	2442:11	2442:11	7	*
LEAF_NODE	2442:12	2442:12	7	)
FIELD	2442:13	2442:17	7	sp -> out_buffer
LEAF_NODE	2442:13	2442:13	8	sp
LEAF_NODE	2442:15	2442:15	8	->
LEAF_NODE	2442:17	2442:17	8	out_buffer
LEAF_NODE	2442:27	2442:27	4	;
EXPR_STATEMENT	2443:1	2443:29	3	sp -> out_state = ososCompressed ;
EXPR	2443:1	2443:1	4	sp -> out_state = ososCompressed
ASSIGN	2443:1	2443:15	5	sp -> out_state = ososCompressed
LVAL	2443:1	2443:1	6	sp -> out_state
FIELD	2443:1	2443:5	7	sp -> out_state
LEAF_NODE	2443:1	2443:1	8	sp
LEAF_NODE	2443:3	2443:3	8	->
LEAF_NODE	2443:5	2443:5	8	out_state
ASSIGN_OP	2443:14	2443:14	6	=
LEAF_NODE	2443:14	2443:14	7	=
RVAL	2443:15	2443:15	6	ososCompressed
FIELD	2443:15	2443:15	7	ososCompressed
LEAF_NODE	2443:15	2443:15	8	ososCompressed
LEAF_NODE	2443:29	2443:29	4	;
LEAF_NODE	2444:0	2444:0	2	}
FUNCTION_DEF	2446:0	2455:0	1	
RETURN_TYPE	2446:0	2446:7	2	static void
LEAF_NODE	2446:0	2446:0	3	static
TYPE_NAME	2446:7	2446:7	3	void
LEAF_NODE	2446:7	2446:7	4	void
FUNCTION_NAME	2447:0	2447:0	2	OJPEGWriteStreamEoi
LEAF_NODE	2447:0	2447:0	3	OJPEGWriteStreamEoi
PARAMETER_LIST	2447:19	2447:54	2	( TIFF * tif , void * * mem , uint32 * len )
LEAF_NODE	2447:19	2447:19	3	(
PARAMETER_DECL	2447:20	2447:26	3	TIFF * tif
TYPE	2447:20	2447:24	4	TIFF *
TYPE_NAME	2447:20	2447:20	5	TIFF
LEAF_NODE	2447:20	2447:20	6	TIFF
POINTER	2447:24	2447:24	5	*
LEAF_NODE	2447:24	2447:24	6	*
NAME	2447:26	2447:26	4	tif
LEAF_NODE	2447:26	2447:26	5	tif
LEAF_NODE	2447:29	2447:29	3	,
PARAMETER_DECL	2447:31	2447:38	3	void * * mem
TYPE	2447:31	2447:35	4	void * *
TYPE_NAME	2447:31	2447:31	5	void
LEAF_NODE	2447:31	2447:31	6	void
POINTER	2447:35	2447:36	5	* *
LEAF_NODE	2447:35	2447:35	6	*
LEAF_NODE	2447:36	2447:36	6	*
NAME	2447:38	2447:38	4	mem
LEAF_NODE	2447:38	2447:38	5	mem
LEAF_NODE	2447:41	2447:41	3	,
PARAMETER_DECL	2447:43	2447:51	3	uint32 * len
TYPE	2447:43	2447:49	4	uint32 *
TYPE_NAME	2447:43	2447:43	5	uint32
LEAF_NODE	2447:43	2447:43	6	uint32
POINTER	2447:49	2447:49	5	*
LEAF_NODE	2447:49	2447:49	6	*
NAME	2447:51	2447:51	4	len
LEAF_NODE	2447:51	2447:51	5	len
LEAF_NODE	2447:54	2447:54	3	)
LEAF_NODE	2448:0	2448:0	2	{
STATEMENTS	2449:1	2454:1	2	
SIMPLE_DECL	2449:1	2449:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2449:1	2449:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2449:1	2449:11	5	OJPEGState *
TYPE_NAME	2449:1	2449:1	6	OJPEGState
LEAF_NODE	2449:1	2449:1	7	OJPEGState
POINTER	2449:11	2449:11	6	*
LEAF_NODE	2449:11	2449:11	7	*
NAME	2449:13	2449:13	5	sp
LEAF_NODE	2449:13	2449:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2449:13	2449:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2449:13	2449:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2449:13	2449:13	7	sp
NAME	2449:13	2449:13	8	sp
LEAF_NODE	2449:13	2449:13	9	sp
ASSIGN_OP	2449:15	2449:15	7	=
LEAF_NODE	2449:15	2449:15	8	=
RVAL	2449:16	2449:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2449:16	2449:16	8	(
TYPE_NAME	2449:17	2449:17	8	OJPEGState
LEAF_NODE	2449:17	2449:17	9	OJPEGState
LEAF_NODE	2449:27	2449:27	8	*
LEAF_NODE	2449:28	2449:28	8	)
FIELD	2449:29	2449:34	8	tif -> tif_data
LEAF_NODE	2449:29	2449:29	9	tif
LEAF_NODE	2449:32	2449:32	9	->
LEAF_NODE	2449:34	2449:34	9	tif_data
LEAF_NODE	2449:42	2449:42	4	;
EXPR_STATEMENT	2450:1	2450:24	3	assert ( OJPEG_BUFFER >= 2 ) ;
EXPR	2450:1	2450:1	4	assert ( OJPEG_BUFFER >= 2 )
FUNCTION_CALL	2450:1	2450:23	5	assert ( OJPEG_BUFFER >= 2 )
CALLEE	2450:1	2450:1	6	assert
LEAF_NODE	2450:1	2450:1	7	assert
LEAF_NODE	2450:7	2450:7	6	(
ARGUMENT	2450:8	2450:22	6	OJPEG_BUFFER >= 2
FIELD	2450:8	2450:8	7	OJPEG_BUFFER
LEAF_NODE	2450:8	2450:8	8	OJPEG_BUFFER
REL_OPERATOR	2450:20	2450:20	7	>=
LEAF_NODE	2450:20	2450:20	8	>=
FIELD	2450:22	2450:22	7	2
LEAF_NODE	2450:22	2450:22	8	2
LEAF_NODE	2450:23	2450:23	6	)
LEAF_NODE	2450:24	2450:24	4	;
EXPR_STATEMENT	2451:1	2451:22	3	sp -> out_buffer [ 0 ] = 255 ;
EXPR	2451:1	2451:1	4	sp -> out_buffer [ 0 ] = 255
ASSIGN	2451:1	2451:19	5	sp -> out_buffer [ 0 ] = 255
LVAL	2451:1	2451:1	6	sp -> out_buffer [ 0 ]
FIELD	2451:1	2451:17	7	sp -> out_buffer [ 0 ]
LEAF_NODE	2451:1	2451:1	8	sp
LEAF_NODE	2451:3	2451:3	8	->
LEAF_NODE	2451:5	2451:5	8	out_buffer
LEAF_NODE	2451:15	2451:15	8	[
EXPR	2451:16	2451:16	8	0
FIELD	2451:16	2451:16	9	0
LEAF_NODE	2451:16	2451:16	10	0
LEAF_NODE	2451:17	2451:17	8	]
ASSIGN_OP	2451:18	2451:18	6	=
LEAF_NODE	2451:18	2451:18	7	=
RVAL	2451:19	2451:19	6	255
FIELD	2451:19	2451:19	7	255
LEAF_NODE	2451:19	2451:19	8	255
LEAF_NODE	2451:22	2451:22	4	;
EXPR_STATEMENT	2452:1	2452:34	3	sp -> out_buffer [ 1 ] = JPEG_MARKER_EOI ;
EXPR	2452:1	2452:1	4	sp -> out_buffer [ 1 ] = JPEG_MARKER_EOI
ASSIGN	2452:1	2452:19	5	sp -> out_buffer [ 1 ] = JPEG_MARKER_EOI
LVAL	2452:1	2452:1	6	sp -> out_buffer [ 1 ]
FIELD	2452:1	2452:17	7	sp -> out_buffer [ 1 ]
LEAF_NODE	2452:1	2452:1	8	sp
LEAF_NODE	2452:3	2452:3	8	->
LEAF_NODE	2452:5	2452:5	8	out_buffer
LEAF_NODE	2452:15	2452:15	8	[
EXPR	2452:16	2452:16	8	1
FIELD	2452:16	2452:16	9	1
LEAF_NODE	2452:16	2452:16	10	1
LEAF_NODE	2452:17	2452:17	8	]
ASSIGN_OP	2452:18	2452:18	6	=
LEAF_NODE	2452:18	2452:18	7	=
RVAL	2452:19	2452:19	6	JPEG_MARKER_EOI
FIELD	2452:19	2452:19	7	JPEG_MARKER_EOI
LEAF_NODE	2452:19	2452:19	8	JPEG_MARKER_EOI
LEAF_NODE	2452:34	2452:34	4	;
EXPR_STATEMENT	2453:1	2453:7	3	* len = 2 ;
EXPR	2453:1	2453:1	4	* len = 2
ASSIGN	2453:1	2453:6	5	* len = 2
LVAL	2453:1	2453:1	6	* len
UNARY_EXPR	2453:1	2453:2	7	* len
UNARY_OPERATOR	2453:1	2453:1	8	*
LEAF_NODE	2453:1	2453:1	9	*
FIELD	2453:2	2453:2	8	len
LEAF_NODE	2453:2	2453:2	9	len
ASSIGN_OP	2453:5	2453:5	6	=
LEAF_NODE	2453:5	2453:5	7	=
RVAL	2453:6	2453:6	6	2
FIELD	2453:6	2453:6	7	2
LEAF_NODE	2453:6	2453:6	8	2
LEAF_NODE	2453:7	2453:7	4	;
EXPR_STATEMENT	2454:1	2454:27	3	* mem = ( void * ) sp -> out_buffer ;
EXPR	2454:1	2454:1	4	* mem = ( void * ) sp -> out_buffer
ASSIGN	2454:1	2454:6	5	* mem = ( void * ) sp -> out_buffer
LVAL	2454:1	2454:1	6	* mem
UNARY_EXPR	2454:1	2454:2	7	* mem
UNARY_OPERATOR	2454:1	2454:1	8	*
LEAF_NODE	2454:1	2454:1	9	*
FIELD	2454:2	2454:2	8	mem
LEAF_NODE	2454:2	2454:2	9	mem
ASSIGN_OP	2454:5	2454:5	6	=
LEAF_NODE	2454:5	2454:5	7	=
RVAL	2454:6	2454:13	6	( void * ) sp -> out_buffer
LEAF_NODE	2454:6	2454:6	7	(
TYPE_NAME	2454:7	2454:7	7	void
LEAF_NODE	2454:7	2454:7	8	void
LEAF_NODE	2454:11	2454:11	7	*
LEAF_NODE	2454:12	2454:12	7	)
FIELD	2454:13	2454:17	7	sp -> out_buffer
LEAF_NODE	2454:13	2454:13	8	sp
LEAF_NODE	2454:15	2454:15	8	->
LEAF_NODE	2454:17	2454:17	8	out_buffer
LEAF_NODE	2454:27	2454:27	4	;
LEAF_NODE	2455:0	2455:0	2	}
FUNCTION_DEF	2458:0	2467:0	1	
RETURN_TYPE	2458:0	2458:7	2	static int
LEAF_NODE	2458:0	2458:0	3	static
TYPE_NAME	2458:7	2458:7	3	int
LEAF_NODE	2458:7	2458:7	4	int
FUNCTION_NAME	2459:0	2459:0	2	jpeg_create_decompress_encap
LEAF_NODE	2459:0	2459:0	3	jpeg_create_decompress_encap
PARAMETER_LIST	2459:28	2459:74	2	( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LEAF_NODE	2459:28	2459:28	3	(
PARAMETER_DECL	2459:29	2459:41	3	OJPEGState * sp
TYPE	2459:29	2459:39	4	OJPEGState *
TYPE_NAME	2459:29	2459:29	5	OJPEGState
LEAF_NODE	2459:29	2459:29	6	OJPEGState
POINTER	2459:39	2459:39	5	*
LEAF_NODE	2459:39	2459:39	6	*
NAME	2459:41	2459:41	4	sp
LEAF_NODE	2459:41	2459:41	5	sp
LEAF_NODE	2459:43	2459:43	3	,
PARAMETER_DECL	2459:45	2459:69	3	jpeg_decompress_struct * cinfo
TYPE	2459:45	2459:67	4	jpeg_decompress_struct *
TYPE_NAME	2459:45	2459:45	5	jpeg_decompress_struct
LEAF_NODE	2459:45	2459:45	6	jpeg_decompress_struct
POINTER	2459:67	2459:67	5	*
LEAF_NODE	2459:67	2459:67	6	*
NAME	2459:69	2459:69	4	cinfo
LEAF_NODE	2459:69	2459:69	5	cinfo
LEAF_NODE	2459:74	2459:74	3	)
LEAF_NODE	2460:0	2460:0	2	{
STATEMENTS	2461:1	2463:1	2	
SELECTION	2461:1	2462:2	3	
KEYWORD	2461:1	2461:1	4	if
LEAF_NODE	2461:1	2461:1	5	if
LEAF_NODE	2461:3	2461:3	4	(
CONDITION	2461:5	2461:5	4	SETJMP ( sp -> exit_jmpbuf )
EXPR	2461:5	2461:5	5	SETJMP ( sp -> exit_jmpbuf )
FUNCTION_CALL	2461:5	2461:27	6	SETJMP ( sp -> exit_jmpbuf )
CALLEE	2461:5	2461:5	7	SETJMP
LEAF_NODE	2461:5	2461:5	8	SETJMP
LEAF_NODE	2461:11	2461:11	7	(
ARGUMENT	2461:12	2461:12	7	sp -> exit_jmpbuf
FIELD	2461:12	2461:16	8	sp -> exit_jmpbuf
LEAF_NODE	2461:12	2461:12	9	sp
LEAF_NODE	2461:14	2461:14	9	->
LEAF_NODE	2461:16	2461:16	9	exit_jmpbuf
LEAF_NODE	2461:27	2461:27	7	)
LEAF_NODE	2461:29	2461:29	4	)
STATEMENTS	2462:2	2462:2	4	
JUMP_STATEMENT	2462:2	2462:10	5	return 0 ;
KEYWORD	2462:2	2462:2	6	return
LEAF_NODE	2462:2	2462:2	7	return
DESTINATION	2462:9	2462:9	6	0
EXPR	2462:9	2462:9	7	0
FIELD	2462:9	2462:9	8	0
LEAF_NODE	2462:9	2462:9	9	0
LEAF_NODE	2462:10	2462:10	6	;
SELECTION	2463:1	2463:6	3	
KEYWORD	2463:1	2463:1	4	else
LEAF_NODE	2463:1	2463:1	5	else
STATEMENTS	2463:6	2466:1	4	
LEAF_NODE	2463:6	2463:6	5	{
STATEMENTS	2464:2	2465:2	5	
EXPR_STATEMENT	2464:2	2464:31	6	jpeg_create_decompress ( cinfo ) ;
EXPR	2464:2	2464:2	7	jpeg_create_decompress ( cinfo )
FUNCTION_CALL	2464:2	2464:30	8	jpeg_create_decompress ( cinfo )
CALLEE	2464:2	2464:2	9	jpeg_create_decompress
LEAF_NODE	2464:2	2464:2	10	jpeg_create_decompress
LEAF_NODE	2464:24	2464:24	9	(
ARGUMENT	2464:25	2464:25	9	cinfo
FIELD	2464:25	2464:25	10	cinfo
LEAF_NODE	2464:25	2464:25	11	cinfo
LEAF_NODE	2464:30	2464:30	9	)
LEAF_NODE	2464:31	2464:31	7	;
JUMP_STATEMENT	2465:2	2465:10	6	return 1 ;
KEYWORD	2465:2	2465:2	7	return
LEAF_NODE	2465:2	2465:2	8	return
DESTINATION	2465:9	2465:9	7	1
EXPR	2465:9	2465:9	8	1
FIELD	2465:9	2465:9	9	1
LEAF_NODE	2465:9	2465:9	10	1
LEAF_NODE	2465:10	2465:10	7	;
LEAF_NODE	2466:1	2466:1	5	}
LEAF_NODE	2467:0	2467:0	2	}
FUNCTION_DEF	2471:0	2480:0	1	
RETURN_TYPE	2471:0	2471:7	2	static int
LEAF_NODE	2471:0	2471:0	3	static
TYPE_NAME	2471:7	2471:7	3	int
LEAF_NODE	2471:7	2471:7	4	int
FUNCTION_NAME	2472:0	2472:0	2	jpeg_read_header_encap
LEAF_NODE	2472:0	2472:0	3	jpeg_read_header_encap
PARAMETER_LIST	2472:22	2472:89	2	( OJPEGState * sp , jpeg_decompress_struct * cinfo , uint8 require_image )
LEAF_NODE	2472:22	2472:22	3	(
PARAMETER_DECL	2472:23	2472:35	3	OJPEGState * sp
TYPE	2472:23	2472:33	4	OJPEGState *
TYPE_NAME	2472:23	2472:23	5	OJPEGState
LEAF_NODE	2472:23	2472:23	6	OJPEGState
POINTER	2472:33	2472:33	5	*
LEAF_NODE	2472:33	2472:33	6	*
NAME	2472:35	2472:35	4	sp
LEAF_NODE	2472:35	2472:35	5	sp
LEAF_NODE	2472:37	2472:37	3	,
PARAMETER_DECL	2472:39	2472:63	3	jpeg_decompress_struct * cinfo
TYPE	2472:39	2472:61	4	jpeg_decompress_struct *
TYPE_NAME	2472:39	2472:39	5	jpeg_decompress_struct
LEAF_NODE	2472:39	2472:39	6	jpeg_decompress_struct
POINTER	2472:61	2472:61	5	*
LEAF_NODE	2472:61	2472:61	6	*
NAME	2472:63	2472:63	4	cinfo
LEAF_NODE	2472:63	2472:63	5	cinfo
LEAF_NODE	2472:68	2472:68	3	,
PARAMETER_DECL	2472:70	2472:76	3	uint8 require_image
TYPE	2472:70	2472:70	4	uint8
TYPE_NAME	2472:70	2472:70	5	uint8
LEAF_NODE	2472:70	2472:70	6	uint8
NAME	2472:76	2472:76	4	require_image
LEAF_NODE	2472:76	2472:76	5	require_image
LEAF_NODE	2472:89	2472:89	3	)
LEAF_NODE	2473:0	2473:0	2	{
STATEMENTS	2474:1	2476:1	2	
SELECTION	2474:1	2475:2	3	
KEYWORD	2474:1	2474:1	4	if
LEAF_NODE	2474:1	2474:1	5	if
LEAF_NODE	2474:3	2474:3	4	(
CONDITION	2474:5	2474:5	4	SETJMP ( sp -> exit_jmpbuf )
EXPR	2474:5	2474:5	5	SETJMP ( sp -> exit_jmpbuf )
FUNCTION_CALL	2474:5	2474:27	6	SETJMP ( sp -> exit_jmpbuf )
CALLEE	2474:5	2474:5	7	SETJMP
LEAF_NODE	2474:5	2474:5	8	SETJMP
LEAF_NODE	2474:11	2474:11	7	(
ARGUMENT	2474:12	2474:12	7	sp -> exit_jmpbuf
FIELD	2474:12	2474:16	8	sp -> exit_jmpbuf
LEAF_NODE	2474:12	2474:12	9	sp
LEAF_NODE	2474:14	2474:14	9	->
LEAF_NODE	2474:16	2474:16	9	exit_jmpbuf
LEAF_NODE	2474:27	2474:27	7	)
LEAF_NODE	2474:29	2474:29	4	)
STATEMENTS	2475:2	2475:2	4	
JUMP_STATEMENT	2475:2	2475:10	5	return 0 ;
KEYWORD	2475:2	2475:2	6	return
LEAF_NODE	2475:2	2475:2	7	return
DESTINATION	2475:9	2475:9	6	0
EXPR	2475:9	2475:9	7	0
FIELD	2475:9	2475:9	8	0
LEAF_NODE	2475:9	2475:9	9	0
LEAF_NODE	2475:10	2475:10	6	;
SELECTION	2476:1	2476:6	3	
KEYWORD	2476:1	2476:1	4	else
LEAF_NODE	2476:1	2476:1	5	else
STATEMENTS	2476:6	2479:1	4	
LEAF_NODE	2476:6	2476:6	5	{
STATEMENTS	2477:2	2478:2	5	
EXPR_STATEMENT	2477:2	2477:39	6	jpeg_read_header ( cinfo , require_image ) ;
EXPR	2477:2	2477:2	7	jpeg_read_header ( cinfo , require_image )
FUNCTION_CALL	2477:2	2477:38	8	jpeg_read_header ( cinfo , require_image )
CALLEE	2477:2	2477:2	9	jpeg_read_header
LEAF_NODE	2477:2	2477:2	10	jpeg_read_header
LEAF_NODE	2477:18	2477:18	9	(
ARGUMENT	2477:19	2477:19	9	cinfo
FIELD	2477:19	2477:19	10	cinfo
LEAF_NODE	2477:19	2477:19	11	cinfo
LEAF_NODE	2477:24	2477:24	9	,
ARGUMENT	2477:25	2477:25	9	require_image
FIELD	2477:25	2477:25	10	require_image
LEAF_NODE	2477:25	2477:25	11	require_image
LEAF_NODE	2477:38	2477:38	9	)
LEAF_NODE	2477:39	2477:39	7	;
JUMP_STATEMENT	2478:2	2478:10	6	return 1 ;
KEYWORD	2478:2	2478:2	7	return
LEAF_NODE	2478:2	2478:2	8	return
DESTINATION	2478:9	2478:9	7	1
EXPR	2478:9	2478:9	8	1
FIELD	2478:9	2478:9	9	1
LEAF_NODE	2478:9	2478:9	10	1
LEAF_NODE	2478:10	2478:10	7	;
LEAF_NODE	2479:1	2479:1	5	}
LEAF_NODE	2480:0	2480:0	2	}
FUNCTION_DEF	2484:0	2493:0	1	
RETURN_TYPE	2484:0	2484:7	2	static int
LEAF_NODE	2484:0	2484:0	3	static
TYPE_NAME	2484:7	2484:7	3	int
LEAF_NODE	2484:7	2484:7	4	int
FUNCTION_NAME	2485:0	2485:0	2	jpeg_start_decompress_encap
LEAF_NODE	2485:0	2485:0	3	jpeg_start_decompress_encap
PARAMETER_LIST	2485:27	2485:73	2	( OJPEGState * sp , jpeg_decompress_struct * cinfo )
LEAF_NODE	2485:27	2485:27	3	(
PARAMETER_DECL	2485:28	2485:40	3	OJPEGState * sp
TYPE	2485:28	2485:38	4	OJPEGState *
TYPE_NAME	2485:28	2485:28	5	OJPEGState
LEAF_NODE	2485:28	2485:28	6	OJPEGState
POINTER	2485:38	2485:38	5	*
LEAF_NODE	2485:38	2485:38	6	*
NAME	2485:40	2485:40	4	sp
LEAF_NODE	2485:40	2485:40	5	sp
LEAF_NODE	2485:42	2485:42	3	,
PARAMETER_DECL	2485:44	2485:68	3	jpeg_decompress_struct * cinfo
TYPE	2485:44	2485:66	4	jpeg_decompress_struct *
TYPE_NAME	2485:44	2485:44	5	jpeg_decompress_struct
LEAF_NODE	2485:44	2485:44	6	jpeg_decompress_struct
POINTER	2485:66	2485:66	5	*
LEAF_NODE	2485:66	2485:66	6	*
NAME	2485:68	2485:68	4	cinfo
LEAF_NODE	2485:68	2485:68	5	cinfo
LEAF_NODE	2485:73	2485:73	3	)
LEAF_NODE	2486:0	2486:0	2	{
STATEMENTS	2487:1	2489:1	2	
SELECTION	2487:1	2488:2	3	
KEYWORD	2487:1	2487:1	4	if
LEAF_NODE	2487:1	2487:1	5	if
LEAF_NODE	2487:3	2487:3	4	(
CONDITION	2487:5	2487:5	4	SETJMP ( sp -> exit_jmpbuf )
EXPR	2487:5	2487:5	5	SETJMP ( sp -> exit_jmpbuf )
FUNCTION_CALL	2487:5	2487:27	6	SETJMP ( sp -> exit_jmpbuf )
CALLEE	2487:5	2487:5	7	SETJMP
LEAF_NODE	2487:5	2487:5	8	SETJMP
LEAF_NODE	2487:11	2487:11	7	(
ARGUMENT	2487:12	2487:12	7	sp -> exit_jmpbuf
FIELD	2487:12	2487:16	8	sp -> exit_jmpbuf
LEAF_NODE	2487:12	2487:12	9	sp
LEAF_NODE	2487:14	2487:14	9	->
LEAF_NODE	2487:16	2487:16	9	exit_jmpbuf
LEAF_NODE	2487:27	2487:27	7	)
LEAF_NODE	2487:29	2487:29	4	)
STATEMENTS	2488:2	2488:2	4	
JUMP_STATEMENT	2488:2	2488:10	5	return 0 ;
KEYWORD	2488:2	2488:2	6	return
LEAF_NODE	2488:2	2488:2	7	return
DESTINATION	2488:9	2488:9	6	0
EXPR	2488:9	2488:9	7	0
FIELD	2488:9	2488:9	8	0
LEAF_NODE	2488:9	2488:9	9	0
LEAF_NODE	2488:10	2488:10	6	;
SELECTION	2489:1	2489:6	3	
KEYWORD	2489:1	2489:1	4	else
LEAF_NODE	2489:1	2489:1	5	else
STATEMENTS	2489:6	2492:1	4	
LEAF_NODE	2489:6	2489:6	5	{
STATEMENTS	2490:2	2491:2	5	
EXPR_STATEMENT	2490:2	2490:30	6	jpeg_start_decompress ( cinfo ) ;
EXPR	2490:2	2490:2	7	jpeg_start_decompress ( cinfo )
FUNCTION_CALL	2490:2	2490:29	8	jpeg_start_decompress ( cinfo )
CALLEE	2490:2	2490:2	9	jpeg_start_decompress
LEAF_NODE	2490:2	2490:2	10	jpeg_start_decompress
LEAF_NODE	2490:23	2490:23	9	(
ARGUMENT	2490:24	2490:24	9	cinfo
FIELD	2490:24	2490:24	10	cinfo
LEAF_NODE	2490:24	2490:24	11	cinfo
LEAF_NODE	2490:29	2490:29	9	)
LEAF_NODE	2490:30	2490:30	7	;
JUMP_STATEMENT	2491:2	2491:10	6	return 1 ;
KEYWORD	2491:2	2491:2	7	return
LEAF_NODE	2491:2	2491:2	8	return
DESTINATION	2491:9	2491:9	7	1
EXPR	2491:9	2491:9	8	1
FIELD	2491:9	2491:9	9	1
LEAF_NODE	2491:9	2491:9	10	1
LEAF_NODE	2491:10	2491:10	7	;
LEAF_NODE	2492:1	2492:1	5	}
LEAF_NODE	2493:0	2493:0	2	}
FUNCTION_DEF	2497:0	2506:0	1	
RETURN_TYPE	2497:0	2497:7	2	static int
LEAF_NODE	2497:0	2497:0	3	static
TYPE_NAME	2497:7	2497:7	3	int
LEAF_NODE	2497:7	2497:7	4	int
FUNCTION_NAME	2498:0	2498:0	2	jpeg_read_scanlines_encap
LEAF_NODE	2498:0	2498:0	3	jpeg_read_scanlines_encap
PARAMETER_LIST	2498:25	2498:106	2	( OJPEGState * sp , jpeg_decompress_struct * cinfo , void * scanlines , uint32 max_lines )
LEAF_NODE	2498:25	2498:25	3	(
PARAMETER_DECL	2498:26	2498:38	3	OJPEGState * sp
TYPE	2498:26	2498:36	4	OJPEGState *
TYPE_NAME	2498:26	2498:26	5	OJPEGState
LEAF_NODE	2498:26	2498:26	6	OJPEGState
POINTER	2498:36	2498:36	5	*
LEAF_NODE	2498:36	2498:36	6	*
NAME	2498:38	2498:38	4	sp
LEAF_NODE	2498:38	2498:38	5	sp
LEAF_NODE	2498:40	2498:40	3	,
PARAMETER_DECL	2498:42	2498:66	3	jpeg_decompress_struct * cinfo
TYPE	2498:42	2498:64	4	jpeg_decompress_struct *
TYPE_NAME	2498:42	2498:42	5	jpeg_decompress_struct
LEAF_NODE	2498:42	2498:42	6	jpeg_decompress_struct
POINTER	2498:64	2498:64	5	*
LEAF_NODE	2498:64	2498:64	6	*
NAME	2498:66	2498:66	4	cinfo
LEAF_NODE	2498:66	2498:66	5	cinfo
LEAF_NODE	2498:71	2498:71	3	,
PARAMETER_DECL	2498:73	2498:79	3	void * scanlines
TYPE	2498:73	2498:77	4	void *
TYPE_NAME	2498:73	2498:73	5	void
LEAF_NODE	2498:73	2498:73	6	void
POINTER	2498:77	2498:77	5	*
LEAF_NODE	2498:77	2498:77	6	*
NAME	2498:79	2498:79	4	scanlines
LEAF_NODE	2498:79	2498:79	5	scanlines
LEAF_NODE	2498:88	2498:88	3	,
PARAMETER_DECL	2498:90	2498:97	3	uint32 max_lines
TYPE	2498:90	2498:90	4	uint32
TYPE_NAME	2498:90	2498:90	5	uint32
LEAF_NODE	2498:90	2498:90	6	uint32
NAME	2498:97	2498:97	4	max_lines
LEAF_NODE	2498:97	2498:97	5	max_lines
LEAF_NODE	2498:106	2498:106	3	)
LEAF_NODE	2499:0	2499:0	2	{
STATEMENTS	2500:1	2502:1	2	
SELECTION	2500:1	2501:2	3	
KEYWORD	2500:1	2500:1	4	if
LEAF_NODE	2500:1	2500:1	5	if
LEAF_NODE	2500:3	2500:3	4	(
CONDITION	2500:5	2500:5	4	SETJMP ( sp -> exit_jmpbuf )
EXPR	2500:5	2500:5	5	SETJMP ( sp -> exit_jmpbuf )
FUNCTION_CALL	2500:5	2500:27	6	SETJMP ( sp -> exit_jmpbuf )
CALLEE	2500:5	2500:5	7	SETJMP
LEAF_NODE	2500:5	2500:5	8	SETJMP
LEAF_NODE	2500:11	2500:11	7	(
ARGUMENT	2500:12	2500:12	7	sp -> exit_jmpbuf
FIELD	2500:12	2500:16	8	sp -> exit_jmpbuf
LEAF_NODE	2500:12	2500:12	9	sp
LEAF_NODE	2500:14	2500:14	9	->
LEAF_NODE	2500:16	2500:16	9	exit_jmpbuf
LEAF_NODE	2500:27	2500:27	7	)
LEAF_NODE	2500:29	2500:29	4	)
STATEMENTS	2501:2	2501:2	4	
JUMP_STATEMENT	2501:2	2501:10	5	return 0 ;
KEYWORD	2501:2	2501:2	6	return
LEAF_NODE	2501:2	2501:2	7	return
DESTINATION	2501:9	2501:9	6	0
EXPR	2501:9	2501:9	7	0
FIELD	2501:9	2501:9	8	0
LEAF_NODE	2501:9	2501:9	9	0
LEAF_NODE	2501:10	2501:10	6	;
SELECTION	2502:1	2502:6	3	
KEYWORD	2502:1	2502:1	4	else
LEAF_NODE	2502:1	2502:1	5	else
STATEMENTS	2502:6	2505:1	4	
LEAF_NODE	2502:6	2502:6	5	{
STATEMENTS	2503:2	2504:2	5	
EXPR_STATEMENT	2503:2	2503:48	6	jpeg_read_scanlines ( cinfo , scanlines , max_lines ) ;
EXPR	2503:2	2503:2	7	jpeg_read_scanlines ( cinfo , scanlines , max_lines )
FUNCTION_CALL	2503:2	2503:47	8	jpeg_read_scanlines ( cinfo , scanlines , max_lines )
CALLEE	2503:2	2503:2	9	jpeg_read_scanlines
LEAF_NODE	2503:2	2503:2	10	jpeg_read_scanlines
LEAF_NODE	2503:21	2503:21	9	(
ARGUMENT	2503:22	2503:22	9	cinfo
FIELD	2503:22	2503:22	10	cinfo
LEAF_NODE	2503:22	2503:22	11	cinfo
LEAF_NODE	2503:27	2503:27	9	,
ARGUMENT	2503:28	2503:28	9	scanlines
FIELD	2503:28	2503:28	10	scanlines
LEAF_NODE	2503:28	2503:28	11	scanlines
LEAF_NODE	2503:37	2503:37	9	,
ARGUMENT	2503:38	2503:38	9	max_lines
FIELD	2503:38	2503:38	10	max_lines
LEAF_NODE	2503:38	2503:38	11	max_lines
LEAF_NODE	2503:47	2503:47	9	)
LEAF_NODE	2503:48	2503:48	7	;
JUMP_STATEMENT	2504:2	2504:10	6	return 1 ;
KEYWORD	2504:2	2504:2	7	return
LEAF_NODE	2504:2	2504:2	8	return
DESTINATION	2504:9	2504:9	7	1
EXPR	2504:9	2504:9	8	1
FIELD	2504:9	2504:9	9	1
LEAF_NODE	2504:9	2504:9	10	1
LEAF_NODE	2504:10	2504:10	7	;
LEAF_NODE	2505:1	2505:1	5	}
LEAF_NODE	2506:0	2506:0	2	}
FUNCTION_DEF	2510:0	2519:0	1	
RETURN_TYPE	2510:0	2510:7	2	static int
LEAF_NODE	2510:0	2510:0	3	static
TYPE_NAME	2510:7	2510:7	3	int
LEAF_NODE	2510:7	2510:7	4	int
FUNCTION_NAME	2511:0	2511:0	2	jpeg_read_raw_data_encap
LEAF_NODE	2511:0	2511:0	3	jpeg_read_raw_data_encap
PARAMETER_LIST	2511:24	2511:100	2	( OJPEGState * sp , jpeg_decompress_struct * cinfo , void * data , uint32 max_lines )
LEAF_NODE	2511:24	2511:24	3	(
PARAMETER_DECL	2511:25	2511:37	3	OJPEGState * sp
TYPE	2511:25	2511:35	4	OJPEGState *
TYPE_NAME	2511:25	2511:25	5	OJPEGState
LEAF_NODE	2511:25	2511:25	6	OJPEGState
POINTER	2511:35	2511:35	5	*
LEAF_NODE	2511:35	2511:35	6	*
NAME	2511:37	2511:37	4	sp
LEAF_NODE	2511:37	2511:37	5	sp
LEAF_NODE	2511:39	2511:39	3	,
PARAMETER_DECL	2511:41	2511:65	3	jpeg_decompress_struct * cinfo
TYPE	2511:41	2511:63	4	jpeg_decompress_struct *
TYPE_NAME	2511:41	2511:41	5	jpeg_decompress_struct
LEAF_NODE	2511:41	2511:41	6	jpeg_decompress_struct
POINTER	2511:63	2511:63	5	*
LEAF_NODE	2511:63	2511:63	6	*
NAME	2511:65	2511:65	4	cinfo
LEAF_NODE	2511:65	2511:65	5	cinfo
LEAF_NODE	2511:70	2511:70	3	,
PARAMETER_DECL	2511:72	2511:78	3	void * data
TYPE	2511:72	2511:76	4	void *
TYPE_NAME	2511:72	2511:72	5	void
LEAF_NODE	2511:72	2511:72	6	void
POINTER	2511:76	2511:76	5	*
LEAF_NODE	2511:76	2511:76	6	*
NAME	2511:78	2511:78	4	data
LEAF_NODE	2511:78	2511:78	5	data
LEAF_NODE	2511:82	2511:82	3	,
PARAMETER_DECL	2511:84	2511:91	3	uint32 max_lines
TYPE	2511:84	2511:84	4	uint32
TYPE_NAME	2511:84	2511:84	5	uint32
LEAF_NODE	2511:84	2511:84	6	uint32
NAME	2511:91	2511:91	4	max_lines
LEAF_NODE	2511:91	2511:91	5	max_lines
LEAF_NODE	2511:100	2511:100	3	)
LEAF_NODE	2512:0	2512:0	2	{
STATEMENTS	2513:1	2515:1	2	
SELECTION	2513:1	2514:2	3	
KEYWORD	2513:1	2513:1	4	if
LEAF_NODE	2513:1	2513:1	5	if
LEAF_NODE	2513:3	2513:3	4	(
CONDITION	2513:5	2513:5	4	SETJMP ( sp -> exit_jmpbuf )
EXPR	2513:5	2513:5	5	SETJMP ( sp -> exit_jmpbuf )
FUNCTION_CALL	2513:5	2513:27	6	SETJMP ( sp -> exit_jmpbuf )
CALLEE	2513:5	2513:5	7	SETJMP
LEAF_NODE	2513:5	2513:5	8	SETJMP
LEAF_NODE	2513:11	2513:11	7	(
ARGUMENT	2513:12	2513:12	7	sp -> exit_jmpbuf
FIELD	2513:12	2513:16	8	sp -> exit_jmpbuf
LEAF_NODE	2513:12	2513:12	9	sp
LEAF_NODE	2513:14	2513:14	9	->
LEAF_NODE	2513:16	2513:16	9	exit_jmpbuf
LEAF_NODE	2513:27	2513:27	7	)
LEAF_NODE	2513:29	2513:29	4	)
STATEMENTS	2514:2	2514:2	4	
JUMP_STATEMENT	2514:2	2514:10	5	return 0 ;
KEYWORD	2514:2	2514:2	6	return
LEAF_NODE	2514:2	2514:2	7	return
DESTINATION	2514:9	2514:9	6	0
EXPR	2514:9	2514:9	7	0
FIELD	2514:9	2514:9	8	0
LEAF_NODE	2514:9	2514:9	9	0
LEAF_NODE	2514:10	2514:10	6	;
SELECTION	2515:1	2515:6	3	
KEYWORD	2515:1	2515:1	4	else
LEAF_NODE	2515:1	2515:1	5	else
STATEMENTS	2515:6	2518:1	4	
LEAF_NODE	2515:6	2515:6	5	{
STATEMENTS	2516:2	2517:2	5	
EXPR_STATEMENT	2516:2	2516:42	6	jpeg_read_raw_data ( cinfo , data , max_lines ) ;
EXPR	2516:2	2516:2	7	jpeg_read_raw_data ( cinfo , data , max_lines )
FUNCTION_CALL	2516:2	2516:41	8	jpeg_read_raw_data ( cinfo , data , max_lines )
CALLEE	2516:2	2516:2	9	jpeg_read_raw_data
LEAF_NODE	2516:2	2516:2	10	jpeg_read_raw_data
LEAF_NODE	2516:20	2516:20	9	(
ARGUMENT	2516:21	2516:21	9	cinfo
FIELD	2516:21	2516:21	10	cinfo
LEAF_NODE	2516:21	2516:21	11	cinfo
LEAF_NODE	2516:26	2516:26	9	,
ARGUMENT	2516:27	2516:27	9	data
FIELD	2516:27	2516:27	10	data
LEAF_NODE	2516:27	2516:27	11	data
LEAF_NODE	2516:31	2516:31	9	,
ARGUMENT	2516:32	2516:32	9	max_lines
FIELD	2516:32	2516:32	10	max_lines
LEAF_NODE	2516:32	2516:32	11	max_lines
LEAF_NODE	2516:41	2516:41	9	)
LEAF_NODE	2516:42	2516:42	7	;
JUMP_STATEMENT	2517:2	2517:10	6	return 1 ;
KEYWORD	2517:2	2517:2	7	return
LEAF_NODE	2517:2	2517:2	8	return
DESTINATION	2517:9	2517:9	7	1
EXPR	2517:9	2517:9	8	1
FIELD	2517:9	2517:9	9	1
LEAF_NODE	2517:9	2517:9	10	1
LEAF_NODE	2517:10	2517:10	7	;
LEAF_NODE	2518:1	2518:1	5	}
LEAF_NODE	2519:0	2519:0	2	}
FUNCTION_DEF	2523:0	2528:0	1	
RETURN_TYPE	2523:0	2523:7	2	static void
LEAF_NODE	2523:0	2523:0	3	static
TYPE_NAME	2523:7	2523:7	3	void
LEAF_NODE	2523:7	2523:7	4	void
FUNCTION_NAME	2524:0	2524:0	2	jpeg_encap_unwind
LEAF_NODE	2524:0	2524:0	3	jpeg_encap_unwind
PARAMETER_LIST	2524:17	2524:27	2	( TIFF * tif )
LEAF_NODE	2524:17	2524:17	3	(
PARAMETER_DECL	2524:18	2524:24	3	TIFF * tif
TYPE	2524:18	2524:22	4	TIFF *
TYPE_NAME	2524:18	2524:18	5	TIFF
LEAF_NODE	2524:18	2524:18	6	TIFF
POINTER	2524:22	2524:22	5	*
LEAF_NODE	2524:22	2524:22	6	*
NAME	2524:24	2524:24	4	tif
LEAF_NODE	2524:24	2524:24	5	tif
LEAF_NODE	2524:27	2524:27	3	)
LEAF_NODE	2525:0	2525:0	2	{
STATEMENTS	2526:1	2527:1	2	
SIMPLE_DECL	2526:1	2526:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2526:1	2526:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2526:1	2526:11	5	OJPEGState *
TYPE_NAME	2526:1	2526:1	6	OJPEGState
LEAF_NODE	2526:1	2526:1	7	OJPEGState
POINTER	2526:11	2526:11	6	*
LEAF_NODE	2526:11	2526:11	7	*
NAME	2526:13	2526:13	5	sp
LEAF_NODE	2526:13	2526:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2526:13	2526:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2526:13	2526:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2526:13	2526:13	7	sp
NAME	2526:13	2526:13	8	sp
LEAF_NODE	2526:13	2526:13	9	sp
ASSIGN_OP	2526:15	2526:15	7	=
LEAF_NODE	2526:15	2526:15	8	=
RVAL	2526:16	2526:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2526:16	2526:16	8	(
TYPE_NAME	2526:17	2526:17	8	OJPEGState
LEAF_NODE	2526:17	2526:17	9	OJPEGState
LEAF_NODE	2526:27	2526:27	8	*
LEAF_NODE	2526:28	2526:28	8	)
FIELD	2526:29	2526:34	8	tif -> tif_data
LEAF_NODE	2526:29	2526:29	9	tif
LEAF_NODE	2526:32	2526:32	9	->
LEAF_NODE	2526:34	2526:34	9	tif_data
LEAF_NODE	2526:42	2526:42	4	;
EXPR_STATEMENT	2527:1	2527:27	3	LONGJMP ( sp -> exit_jmpbuf , 1 ) ;
EXPR	2527:1	2527:1	4	LONGJMP ( sp -> exit_jmpbuf , 1 )
FUNCTION_CALL	2527:1	2527:26	5	LONGJMP ( sp -> exit_jmpbuf , 1 )
CALLEE	2527:1	2527:1	6	LONGJMP
LEAF_NODE	2527:1	2527:1	7	LONGJMP
LEAF_NODE	2527:8	2527:8	6	(
ARGUMENT	2527:9	2527:9	6	sp -> exit_jmpbuf
FIELD	2527:9	2527:13	7	sp -> exit_jmpbuf
LEAF_NODE	2527:9	2527:9	8	sp
LEAF_NODE	2527:11	2527:11	8	->
LEAF_NODE	2527:13	2527:13	8	exit_jmpbuf
LEAF_NODE	2527:24	2527:24	6	,
ARGUMENT	2527:25	2527:25	6	1
FIELD	2527:25	2527:25	7	1
LEAF_NODE	2527:25	2527:25	8	1
LEAF_NODE	2527:26	2527:26	6	)
LEAF_NODE	2527:27	2527:27	4	;
LEAF_NODE	2528:0	2528:0	2	}
FUNCTION_DEF	2531:0	2537:0	1	
RETURN_TYPE	2531:0	2531:7	2	static void
LEAF_NODE	2531:0	2531:0	3	static
TYPE_NAME	2531:7	2531:7	3	void
LEAF_NODE	2531:7	2531:7	4	void
FUNCTION_NAME	2532:0	2532:0	2	OJPEGLibjpegJpegErrorMgrOutputMessage
LEAF_NODE	2532:0	2532:0	3	OJPEGLibjpegJpegErrorMgrOutputMessage
PARAMETER_LIST	2532:37	2532:63	2	( jpeg_common_struct * cinfo )
LEAF_NODE	2532:37	2532:37	3	(
PARAMETER_DECL	2532:38	2532:58	3	jpeg_common_struct * cinfo
TYPE	2532:38	2532:56	4	jpeg_common_struct *
TYPE_NAME	2532:38	2532:38	5	jpeg_common_struct
LEAF_NODE	2532:38	2532:38	6	jpeg_common_struct
POINTER	2532:56	2532:56	5	*
LEAF_NODE	2532:56	2532:56	6	*
NAME	2532:58	2532:58	4	cinfo
LEAF_NODE	2532:58	2532:58	5	cinfo
LEAF_NODE	2532:63	2532:63	3	)
LEAF_NODE	2533:0	2533:0	2	{
STATEMENTS	2534:1	2536:1	2	
SIMPLE_DECL	2534:1	2534:29	3	char [ JMSG_LENGTH_MAX ] buffer ;
VAR_DECL	2534:1	2534:6	4	char [ JMSG_LENGTH_MAX ] buffer
TYPE	2534:1	2534:12	5	char [ JMSG_LENGTH_MAX ]
TYPE_NAME	2534:1	2534:1	6	char
LEAF_NODE	2534:1	2534:1	7	char
TYPE_SUFFIX	2534:12	2534:28	6	[ JMSG_LENGTH_MAX ]
LEAF_NODE	2534:12	2534:12	7	[
FIELD	2534:13	2534:13	7	JMSG_LENGTH_MAX
LEAF_NODE	2534:13	2534:13	8	JMSG_LENGTH_MAX
LEAF_NODE	2534:28	2534:28	7	]
NAME	2534:6	2534:6	5	buffer
LEAF_NODE	2534:6	2534:6	6	buffer
LEAF_NODE	2534:29	2534:29	4	;
EXPR_STATEMENT	2535:1	2535:44	3	( * cinfo -> err -> format_message ) ( cinfo , buffer ) ;
EXPR	2535:1	2535:1	4	( * cinfo -> err -> format_message ) ( cinfo , buffer )
FUNCTION_CALL	2535:1	2535:43	5	( * cinfo -> err -> format_message ) ( cinfo , buffer )
CALLEE	2535:1	2535:29	6	( * cinfo -> err -> format_message )
LEAF_NODE	2535:1	2535:1	7	(
UNARY_EXPR	2535:2	2535:3	7	* cinfo -> err -> format_message
UNARY_OPERATOR	2535:2	2535:2	8	*
LEAF_NODE	2535:2	2535:2	9	*
FIELD	2535:3	2535:15	8	cinfo -> err -> format_message
LEAF_NODE	2535:3	2535:3	9	cinfo
LEAF_NODE	2535:8	2535:8	9	->
LEAF_NODE	2535:10	2535:10	9	err
LEAF_NODE	2535:13	2535:13	9	->
LEAF_NODE	2535:15	2535:15	9	format_message
LEAF_NODE	2535:29	2535:29	7	)
LEAF_NODE	2535:30	2535:30	6	(
ARGUMENT	2535:31	2535:31	6	cinfo
FIELD	2535:31	2535:31	7	cinfo
LEAF_NODE	2535:31	2535:31	8	cinfo
LEAF_NODE	2535:36	2535:36	6	,
ARGUMENT	2535:37	2535:37	6	buffer
FIELD	2535:37	2535:37	7	buffer
LEAF_NODE	2535:37	2535:37	8	buffer
LEAF_NODE	2535:43	2535:43	6	)
LEAF_NODE	2535:44	2535:44	4	;
EXPR_STATEMENT	2536:1	2536:84	3	TIFFWarningExt ( ( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata , "LibJpeg" , "%s" , buffer ) ;
EXPR	2536:1	2536:1	4	TIFFWarningExt ( ( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata , "LibJpeg" , "%s" , buffer )
FUNCTION_CALL	2536:1	2536:83	5	TIFFWarningExt ( ( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata , "LibJpeg" , "%s" , buffer )
CALLEE	2536:1	2536:1	6	TIFFWarningExt
LEAF_NODE	2536:1	2536:1	7	TIFFWarningExt
LEAF_NODE	2536:15	2536:15	6	(
ARGUMENT	2536:16	2536:47	6	( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata
LEAF_NODE	2536:16	2536:16	7	(
LEAF_NODE	2536:17	2536:17	7	(
TYPE_NAME	2536:18	2536:18	7	TIFF
LEAF_NODE	2536:18	2536:18	8	TIFF
LEAF_NODE	2536:22	2536:22	7	*
LEAF_NODE	2536:23	2536:23	7	)
LEAF_NODE	2536:24	2536:24	7	(
FIELD	2536:25	2536:32	7	cinfo -> client_data
LEAF_NODE	2536:25	2536:25	8	cinfo
LEAF_NODE	2536:30	2536:30	8	->
LEAF_NODE	2536:32	2536:32	8	client_data
LEAF_NODE	2536:43	2536:43	7	)
LEAF_NODE	2536:44	2536:44	7	)
LEAF_NODE	2536:45	2536:45	7	->
LEAF_NODE	2536:47	2536:47	7	tif_clientdata
LEAF_NODE	2536:61	2536:61	6	,
ARGUMENT	2536:62	2536:62	6	"LibJpeg"
FIELD	2536:62	2536:62	7	"LibJpeg"
LEAF_NODE	2536:62	2536:62	8	"LibJpeg"
LEAF_NODE	2536:71	2536:71	6	,
ARGUMENT	2536:72	2536:72	6	"%s"
FIELD	2536:72	2536:72	7	"%s"
LEAF_NODE	2536:72	2536:72	8	"%s"
LEAF_NODE	2536:76	2536:76	6	,
ARGUMENT	2536:77	2536:77	6	buffer
FIELD	2536:77	2536:77	7	buffer
LEAF_NODE	2536:77	2536:77	8	buffer
LEAF_NODE	2536:83	2536:83	6	)
LEAF_NODE	2536:84	2536:84	4	;
LEAF_NODE	2537:0	2537:0	2	}
FUNCTION_DEF	2539:0	2546:0	1	
RETURN_TYPE	2539:0	2539:7	2	static void
LEAF_NODE	2539:0	2539:0	3	static
TYPE_NAME	2539:7	2539:7	3	void
LEAF_NODE	2539:7	2539:7	4	void
FUNCTION_NAME	2540:0	2540:0	2	OJPEGLibjpegJpegErrorMgrErrorExit
LEAF_NODE	2540:0	2540:0	3	OJPEGLibjpegJpegErrorMgrErrorExit
PARAMETER_LIST	2540:33	2540:59	2	( jpeg_common_struct * cinfo )
LEAF_NODE	2540:33	2540:33	3	(
PARAMETER_DECL	2540:34	2540:54	3	jpeg_common_struct * cinfo
TYPE	2540:34	2540:52	4	jpeg_common_struct *
TYPE_NAME	2540:34	2540:34	5	jpeg_common_struct
LEAF_NODE	2540:34	2540:34	6	jpeg_common_struct
POINTER	2540:52	2540:52	5	*
LEAF_NODE	2540:52	2540:52	6	*
NAME	2540:54	2540:54	4	cinfo
LEAF_NODE	2540:54	2540:54	5	cinfo
LEAF_NODE	2540:59	2540:59	3	)
LEAF_NODE	2541:0	2541:0	2	{
STATEMENTS	2542:1	2545:1	2	
SIMPLE_DECL	2542:1	2542:29	3	char [ JMSG_LENGTH_MAX ] buffer ;
VAR_DECL	2542:1	2542:6	4	char [ JMSG_LENGTH_MAX ] buffer
TYPE	2542:1	2542:12	5	char [ JMSG_LENGTH_MAX ]
TYPE_NAME	2542:1	2542:1	6	char
LEAF_NODE	2542:1	2542:1	7	char
TYPE_SUFFIX	2542:12	2542:28	6	[ JMSG_LENGTH_MAX ]
LEAF_NODE	2542:12	2542:12	7	[
FIELD	2542:13	2542:13	7	JMSG_LENGTH_MAX
LEAF_NODE	2542:13	2542:13	8	JMSG_LENGTH_MAX
LEAF_NODE	2542:28	2542:28	7	]
NAME	2542:6	2542:6	5	buffer
LEAF_NODE	2542:6	2542:6	6	buffer
LEAF_NODE	2542:29	2542:29	4	;
EXPR_STATEMENT	2543:1	2543:44	3	( * cinfo -> err -> format_message ) ( cinfo , buffer ) ;
EXPR	2543:1	2543:1	4	( * cinfo -> err -> format_message ) ( cinfo , buffer )
FUNCTION_CALL	2543:1	2543:43	5	( * cinfo -> err -> format_message ) ( cinfo , buffer )
CALLEE	2543:1	2543:29	6	( * cinfo -> err -> format_message )
LEAF_NODE	2543:1	2543:1	7	(
UNARY_EXPR	2543:2	2543:3	7	* cinfo -> err -> format_message
UNARY_OPERATOR	2543:2	2543:2	8	*
LEAF_NODE	2543:2	2543:2	9	*
FIELD	2543:3	2543:15	8	cinfo -> err -> format_message
LEAF_NODE	2543:3	2543:3	9	cinfo
LEAF_NODE	2543:8	2543:8	9	->
LEAF_NODE	2543:10	2543:10	9	err
LEAF_NODE	2543:13	2543:13	9	->
LEAF_NODE	2543:15	2543:15	9	format_message
LEAF_NODE	2543:29	2543:29	7	)
LEAF_NODE	2543:30	2543:30	6	(
ARGUMENT	2543:31	2543:31	6	cinfo
FIELD	2543:31	2543:31	7	cinfo
LEAF_NODE	2543:31	2543:31	8	cinfo
LEAF_NODE	2543:36	2543:36	6	,
ARGUMENT	2543:37	2543:37	6	buffer
FIELD	2543:37	2543:37	7	buffer
LEAF_NODE	2543:37	2543:37	8	buffer
LEAF_NODE	2543:43	2543:43	6	)
LEAF_NODE	2543:44	2543:44	4	;
EXPR_STATEMENT	2544:1	2544:82	3	TIFFErrorExt ( ( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata , "LibJpeg" , "%s" , buffer ) ;
EXPR	2544:1	2544:1	4	TIFFErrorExt ( ( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata , "LibJpeg" , "%s" , buffer )
FUNCTION_CALL	2544:1	2544:81	5	TIFFErrorExt ( ( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata , "LibJpeg" , "%s" , buffer )
CALLEE	2544:1	2544:1	6	TIFFErrorExt
LEAF_NODE	2544:1	2544:1	7	TIFFErrorExt
LEAF_NODE	2544:13	2544:13	6	(
ARGUMENT	2544:14	2544:45	6	( ( TIFF * ) ( cinfo -> client_data ) ) -> tif_clientdata
LEAF_NODE	2544:14	2544:14	7	(
LEAF_NODE	2544:15	2544:15	7	(
TYPE_NAME	2544:16	2544:16	7	TIFF
LEAF_NODE	2544:16	2544:16	8	TIFF
LEAF_NODE	2544:20	2544:20	7	*
LEAF_NODE	2544:21	2544:21	7	)
LEAF_NODE	2544:22	2544:22	7	(
FIELD	2544:23	2544:30	7	cinfo -> client_data
LEAF_NODE	2544:23	2544:23	8	cinfo
LEAF_NODE	2544:28	2544:28	8	->
LEAF_NODE	2544:30	2544:30	8	client_data
LEAF_NODE	2544:41	2544:41	7	)
LEAF_NODE	2544:42	2544:42	7	)
LEAF_NODE	2544:43	2544:43	7	->
LEAF_NODE	2544:45	2544:45	7	tif_clientdata
LEAF_NODE	2544:59	2544:59	6	,
ARGUMENT	2544:60	2544:60	6	"LibJpeg"
FIELD	2544:60	2544:60	7	"LibJpeg"
LEAF_NODE	2544:60	2544:60	8	"LibJpeg"
LEAF_NODE	2544:69	2544:69	6	,
ARGUMENT	2544:70	2544:70	6	"%s"
FIELD	2544:70	2544:70	7	"%s"
LEAF_NODE	2544:70	2544:70	8	"%s"
LEAF_NODE	2544:74	2544:74	6	,
ARGUMENT	2544:75	2544:75	6	buffer
FIELD	2544:75	2544:75	7	buffer
LEAF_NODE	2544:75	2544:75	8	buffer
LEAF_NODE	2544:81	2544:81	6	)
LEAF_NODE	2544:82	2544:82	4	;
EXPR_STATEMENT	2545:1	2545:47	3	jpeg_encap_unwind ( ( TIFF * ) ( cinfo -> client_data ) ) ;
EXPR	2545:1	2545:1	4	jpeg_encap_unwind ( ( TIFF * ) ( cinfo -> client_data ) )
FUNCTION_CALL	2545:1	2545:46	5	jpeg_encap_unwind ( ( TIFF * ) ( cinfo -> client_data ) )
CALLEE	2545:1	2545:1	6	jpeg_encap_unwind
LEAF_NODE	2545:1	2545:1	7	jpeg_encap_unwind
LEAF_NODE	2545:18	2545:18	6	(
ARGUMENT	2545:19	2545:45	6	( TIFF * ) ( cinfo -> client_data )
LEAF_NODE	2545:19	2545:19	7	(
TYPE_NAME	2545:20	2545:20	7	TIFF
LEAF_NODE	2545:20	2545:20	8	TIFF
LEAF_NODE	2545:24	2545:24	7	*
LEAF_NODE	2545:25	2545:25	7	)
LEAF_NODE	2545:26	2545:26	7	(
FIELD	2545:27	2545:34	7	cinfo -> client_data
LEAF_NODE	2545:27	2545:27	8	cinfo
LEAF_NODE	2545:32	2545:32	8	->
LEAF_NODE	2545:34	2545:34	8	client_data
LEAF_NODE	2545:45	2545:45	7	)
LEAF_NODE	2545:46	2545:46	6	)
LEAF_NODE	2545:47	2545:47	4	;
LEAF_NODE	2546:0	2546:0	2	}
FUNCTION_DEF	2548:0	2552:0	1	
RETURN_TYPE	2548:0	2548:7	2	static void
LEAF_NODE	2548:0	2548:0	3	static
TYPE_NAME	2548:7	2548:7	3	void
LEAF_NODE	2548:7	2548:7	4	void
FUNCTION_NAME	2549:0	2549:0	2	OJPEGLibjpegJpegSourceMgrInitSource
LEAF_NODE	2549:0	2549:0	3	OJPEGLibjpegJpegSourceMgrInitSource
PARAMETER_LIST	2549:35	2549:65	2	( jpeg_decompress_struct * cinfo )
LEAF_NODE	2549:35	2549:35	3	(
PARAMETER_DECL	2549:36	2549:60	3	jpeg_decompress_struct * cinfo
TYPE	2549:36	2549:58	4	jpeg_decompress_struct *
TYPE_NAME	2549:36	2549:36	5	jpeg_decompress_struct
LEAF_NODE	2549:36	2549:36	6	jpeg_decompress_struct
POINTER	2549:58	2549:58	5	*
LEAF_NODE	2549:58	2549:58	6	*
NAME	2549:60	2549:60	4	cinfo
LEAF_NODE	2549:60	2549:60	5	cinfo
LEAF_NODE	2549:65	2549:65	3	)
LEAF_NODE	2550:0	2550:0	2	{
STATEMENTS	2551:1	2551:1	2	
EXPR_STATEMENT	2551:1	2551:12	3	( void ) cinfo ;
EXPR	2551:1	2551:7	4	( void ) cinfo
LEAF_NODE	2551:1	2551:1	5	(
TYPE_NAME	2551:2	2551:2	5	void
LEAF_NODE	2551:2	2551:2	6	void
LEAF_NODE	2551:6	2551:6	5	)
FIELD	2551:7	2551:7	5	cinfo
LEAF_NODE	2551:7	2551:7	6	cinfo
LEAF_NODE	2551:12	2551:12	4	;
LEAF_NODE	2552:0	2552:0	2	}
FUNCTION_DEF	2554:0	2569:0	1	
RETURN_TYPE	2554:0	2554:7	2	static boolean
LEAF_NODE	2554:0	2554:0	3	static
TYPE_NAME	2554:7	2554:7	3	boolean
LEAF_NODE	2554:7	2554:7	4	boolean
FUNCTION_NAME	2555:0	2555:0	2	OJPEGLibjpegJpegSourceMgrFillInputBuffer
LEAF_NODE	2555:0	2555:0	3	OJPEGLibjpegJpegSourceMgrFillInputBuffer
PARAMETER_LIST	2555:40	2555:70	2	( jpeg_decompress_struct * cinfo )
LEAF_NODE	2555:40	2555:40	3	(
PARAMETER_DECL	2555:41	2555:65	3	jpeg_decompress_struct * cinfo
TYPE	2555:41	2555:63	4	jpeg_decompress_struct *
TYPE_NAME	2555:41	2555:41	5	jpeg_decompress_struct
LEAF_NODE	2555:41	2555:41	6	jpeg_decompress_struct
POINTER	2555:63	2555:63	5	*
LEAF_NODE	2555:63	2555:63	6	*
NAME	2555:65	2555:65	4	cinfo
LEAF_NODE	2555:65	2555:65	5	cinfo
LEAF_NODE	2555:70	2555:70	3	)
LEAF_NODE	2556:0	2556:0	2	{
STATEMENTS	2557:1	2568:1	2	
SIMPLE_DECL	2557:1	2557:36	3	TIFF * tif ; tif = ( TIFF * ) cinfo -> client_data ;
VAR_DECL	2557:1	2557:7	4	TIFF * tif ; tif = ( TIFF * ) cinfo -> client_data
TYPE	2557:1	2557:5	5	TIFF *
TYPE_NAME	2557:1	2557:1	6	TIFF
LEAF_NODE	2557:1	2557:1	7	TIFF
POINTER	2557:5	2557:5	6	*
LEAF_NODE	2557:5	2557:5	7	*
NAME	2557:7	2557:7	5	tif
LEAF_NODE	2557:7	2557:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	2557:7	2557:7	5	tif = ( TIFF * ) cinfo -> client_data
ASSIGN	2557:7	2557:11	6	tif = ( TIFF * ) cinfo -> client_data
LVAL	2557:7	2557:7	7	tif
NAME	2557:7	2557:7	8	tif
LEAF_NODE	2557:7	2557:7	9	tif
ASSIGN_OP	2557:10	2557:10	7	=
LEAF_NODE	2557:10	2557:10	8	=
RVAL	2557:11	2557:18	7	( TIFF * ) cinfo -> client_data
LEAF_NODE	2557:11	2557:11	8	(
TYPE_NAME	2557:12	2557:12	8	TIFF
LEAF_NODE	2557:12	2557:12	9	TIFF
LEAF_NODE	2557:16	2557:16	8	*
LEAF_NODE	2557:17	2557:17	8	)
FIELD	2557:18	2557:25	8	cinfo -> client_data
LEAF_NODE	2557:18	2557:18	9	cinfo
LEAF_NODE	2557:23	2557:23	9	->
LEAF_NODE	2557:25	2557:25	9	client_data
LEAF_NODE	2557:36	2557:36	4	;
SIMPLE_DECL	2558:1	2558:42	3	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data ;
VAR_DECL	2558:1	2558:13	4	OJPEGState * sp ; sp = ( OJPEGState * ) tif -> tif_data
TYPE	2558:1	2558:11	5	OJPEGState *
TYPE_NAME	2558:1	2558:1	6	OJPEGState
LEAF_NODE	2558:1	2558:1	7	OJPEGState
POINTER	2558:11	2558:11	6	*
LEAF_NODE	2558:11	2558:11	7	*
NAME	2558:13	2558:13	5	sp
LEAF_NODE	2558:13	2558:13	6	sp
LEAF_NODE	0:0	0:0	5	;
INIT	2558:13	2558:13	5	sp = ( OJPEGState * ) tif -> tif_data
ASSIGN	2558:13	2558:16	6	sp = ( OJPEGState * ) tif -> tif_data
LVAL	2558:13	2558:13	7	sp
NAME	2558:13	2558:13	8	sp
LEAF_NODE	2558:13	2558:13	9	sp
ASSIGN_OP	2558:15	2558:15	7	=
LEAF_NODE	2558:15	2558:15	8	=
RVAL	2558:16	2558:29	7	( OJPEGState * ) tif -> tif_data
LEAF_NODE	2558:16	2558:16	8	(
TYPE_NAME	2558:17	2558:17	8	OJPEGState
LEAF_NODE	2558:17	2558:17	9	OJPEGState
LEAF_NODE	2558:27	2558:27	8	*
LEAF_NODE	2558:28	2558:28	8	)
FIELD	2558:29	2558:34	8	tif -> tif_data
LEAF_NODE	2558:29	2558:29	9	tif
LEAF_NODE	2558:32	2558:32	9	->
LEAF_NODE	2558:34	2558:34	9	tif_data
LEAF_NODE	2558:42	2558:42	4	;
SIMPLE_DECL	2559:1	2559:12	3	void * mem ; mem = 0 ;
VAR_DECL	2559:1	2559:7	4	void * mem ; mem = 0
TYPE	2559:1	2559:5	5	void *
TYPE_NAME	2559:1	2559:1	6	void
LEAF_NODE	2559:1	2559:1	7	void
POINTER	2559:5	2559:5	6	*
LEAF_NODE	2559:5	2559:5	7	*
NAME	2559:7	2559:7	5	mem
LEAF_NODE	2559:7	2559:7	6	mem
LEAF_NODE	0:0	0:0	5	;
INIT	2559:7	2559:7	5	mem = 0
ASSIGN	2559:7	2559:11	6	mem = 0
LVAL	2559:7	2559:7	7	mem
NAME	2559:7	2559:7	8	mem
LEAF_NODE	2559:7	2559:7	9	mem
ASSIGN_OP	2559:10	2559:10	7	=
LEAF_NODE	2559:10	2559:10	8	=
RVAL	2559:11	2559:11	7	0
FIELD	2559:11	2559:11	8	0
LEAF_NODE	2559:11	2559:11	9	0
LEAF_NODE	2559:12	2559:12	4	;
SIMPLE_DECL	2560:1	2560:14	3	uint32 len ; len = 0U ;
VAR_DECL	2560:1	2560:8	4	uint32 len ; len = 0U
TYPE	2560:1	2560:1	5	uint32
TYPE_NAME	2560:1	2560:1	6	uint32
LEAF_NODE	2560:1	2560:1	7	uint32
NAME	2560:8	2560:8	5	len
LEAF_NODE	2560:8	2560:8	6	len
LEAF_NODE	0:0	0:0	5	;
INIT	2560:8	2560:8	5	len = 0U
ASSIGN	2560:8	2560:12	6	len = 0U
LVAL	2560:8	2560:8	7	len
NAME	2560:8	2560:8	8	len
LEAF_NODE	2560:8	2560:8	9	len
ASSIGN_OP	2560:11	2560:11	7	=
LEAF_NODE	2560:11	2560:11	8	=
RVAL	2560:12	2560:12	7	0U
FIELD	2560:12	2560:12	8	0U
LEAF_NODE	2560:12	2560:12	9	0U
LEAF_NODE	2560:14	2560:14	4	;
SELECTION	2561:1	2562:1	3	
KEYWORD	2561:1	2561:1	4	if
LEAF_NODE	2561:1	2561:1	5	if
LEAF_NODE	2561:4	2561:4	4	(
CONDITION	2561:5	2561:5	4	OJPEGWriteStream ( tif , & mem , & len ) == 0
EXPR	2561:5	2561:38	5	OJPEGWriteStream ( tif , & mem , & len ) == 0
FUNCTION_CALL	2561:5	2561:35	6	OJPEGWriteStream ( tif , & mem , & len )
CALLEE	2561:5	2561:5	7	OJPEGWriteStream
LEAF_NODE	2561:5	2561:5	8	OJPEGWriteStream
LEAF_NODE	2561:21	2561:21	7	(
ARGUMENT	2561:22	2561:22	7	tif
FIELD	2561:22	2561:22	8	tif
LEAF_NODE	2561:22	2561:22	9	tif
LEAF_NODE	2561:25	2561:25	7	,
ARGUMENT	2561:26	2561:26	7	& mem
UNARY_EXPR	2561:26	2561:27	8	& mem
UNARY_OPERATOR	2561:26	2561:26	9	&
LEAF_NODE	2561:26	2561:26	10	&
FIELD	2561:27	2561:27	9	mem
LEAF_NODE	2561:27	2561:27	10	mem
LEAF_NODE	2561:30	2561:30	7	,
ARGUMENT	2561:31	2561:31	7	& len
UNARY_EXPR	2561:31	2561:32	8	& len
UNARY_OPERATOR	2561:31	2561:31	9	&
LEAF_NODE	2561:31	2561:31	10	&
FIELD	2561:32	2561:32	9	len
LEAF_NODE	2561:32	2561:32	10	len
LEAF_NODE	2561:35	2561:35	7	)
EQ_OPERATOR	2561:36	2561:36	6	==
LEAF_NODE	2561:36	2561:36	7	==
FIELD	2561:38	2561:38	6	0
LEAF_NODE	2561:38	2561:38	7	0
LEAF_NODE	2561:39	2561:39	4	)
STATEMENTS	2562:1	2565:1	4	
LEAF_NODE	2562:1	2562:1	5	{
STATEMENTS	2563:2	2564:2	5	
EXPR_STATEMENT	2563:2	2563:74	6	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Premature end of JPEG data" ) ;
EXPR	2563:2	2563:2	7	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Premature end of JPEG data" )
FUNCTION_CALL	2563:2	2563:73	8	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Premature end of JPEG data" )
CALLEE	2563:2	2563:2	9	TIFFErrorExt
LEAF_NODE	2563:2	2563:2	10	TIFFErrorExt
LEAF_NODE	2563:14	2563:14	9	(
ARGUMENT	2563:15	2563:15	9	tif -> tif_clientdata
FIELD	2563:15	2563:20	10	tif -> tif_clientdata
LEAF_NODE	2563:15	2563:15	11	tif
LEAF_NODE	2563:18	2563:18	11	->
LEAF_NODE	2563:20	2563:20	11	tif_clientdata
LEAF_NODE	2563:34	2563:34	9	,
ARGUMENT	2563:35	2563:35	9	"LibJpeg"
FIELD	2563:35	2563:35	10	"LibJpeg"
LEAF_NODE	2563:35	2563:35	11	"LibJpeg"
LEAF_NODE	2563:44	2563:44	9	,
ARGUMENT	2563:45	2563:45	9	"Premature end of JPEG data"
FIELD	2563:45	2563:45	10	"Premature end of JPEG data"
LEAF_NODE	2563:45	2563:45	11	"Premature end of JPEG data"
LEAF_NODE	2563:73	2563:73	9	)
LEAF_NODE	2563:74	2563:74	7	;
EXPR_STATEMENT	2564:2	2564:24	6	jpeg_encap_unwind ( tif ) ;
EXPR	2564:2	2564:2	7	jpeg_encap_unwind ( tif )
FUNCTION_CALL	2564:2	2564:23	8	jpeg_encap_unwind ( tif )
CALLEE	2564:2	2564:2	9	jpeg_encap_unwind
LEAF_NODE	2564:2	2564:2	10	jpeg_encap_unwind
LEAF_NODE	2564:19	2564:19	9	(
ARGUMENT	2564:20	2564:20	9	tif
FIELD	2564:20	2564:20	10	tif
LEAF_NODE	2564:20	2564:20	11	tif
LEAF_NODE	2564:23	2564:23	9	)
LEAF_NODE	2564:24	2564:24	7	;
LEAF_NODE	2565:1	2565:1	5	}
EXPR_STATEMENT	2566:1	2566:48	3	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer = len ;
EXPR	2566:1	2566:1	4	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer = len
ASSIGN	2566:1	2566:45	5	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer = len
LVAL	2566:1	2566:1	6	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer
FIELD	2566:1	2566:29	7	sp -> libjpeg_jpeg_source_mgr . bytes_in_buffer
LEAF_NODE	2566:1	2566:1	8	sp
LEAF_NODE	2566:3	2566:3	8	->
LEAF_NODE	2566:5	2566:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	2566:28	2566:28	8	.
LEAF_NODE	2566:29	2566:29	8	bytes_in_buffer
ASSIGN_OP	2566:44	2566:44	6	=
LEAF_NODE	2566:44	2566:44	7	=
RVAL	2566:45	2566:45	6	len
FIELD	2566:45	2566:45	7	len
LEAF_NODE	2566:45	2566:45	8	len
LEAF_NODE	2566:48	2566:48	4	;
EXPR_STATEMENT	2567:1	2567:48	3	sp -> libjpeg_jpeg_source_mgr . next_input_byte = mem ;
EXPR	2567:1	2567:1	4	sp -> libjpeg_jpeg_source_mgr . next_input_byte = mem
ASSIGN	2567:1	2567:45	5	sp -> libjpeg_jpeg_source_mgr . next_input_byte = mem
LVAL	2567:1	2567:1	6	sp -> libjpeg_jpeg_source_mgr . next_input_byte
FIELD	2567:1	2567:29	7	sp -> libjpeg_jpeg_source_mgr . next_input_byte
LEAF_NODE	2567:1	2567:1	8	sp
LEAF_NODE	2567:3	2567:3	8	->
LEAF_NODE	2567:5	2567:5	8	libjpeg_jpeg_source_mgr
LEAF_NODE	2567:28	2567:28	8	.
LEAF_NODE	2567:29	2567:29	8	next_input_byte
ASSIGN_OP	2567:44	2567:44	6	=
LEAF_NODE	2567:44	2567:44	7	=
RVAL	2567:45	2567:45	6	mem
FIELD	2567:45	2567:45	7	mem
LEAF_NODE	2567:45	2567:45	8	mem
LEAF_NODE	2567:48	2567:48	4	;
JUMP_STATEMENT	2568:1	2568:10	3	return ( 1 ) ;
KEYWORD	2568:1	2568:1	4	return
LEAF_NODE	2568:1	2568:1	5	return
DESTINATION	2568:7	2568:7	4	( 1 )
EXPR	2568:7	2568:9	5	( 1 )
LEAF_NODE	2568:7	2568:7	6	(
FIELD	2568:8	2568:8	6	1
LEAF_NODE	2568:8	2568:8	7	1
LEAF_NODE	2568:9	2568:9	6	)
LEAF_NODE	2568:10	2568:10	4	;
LEAF_NODE	2569:0	2569:0	2	}
FUNCTION_DEF	2571:0	2578:0	1	
RETURN_TYPE	2571:0	2571:7	2	static void
LEAF_NODE	2571:0	2571:0	3	static
TYPE_NAME	2571:7	2571:7	3	void
LEAF_NODE	2571:7	2571:7	4	void
FUNCTION_NAME	2572:0	2572:0	2	OJPEGLibjpegJpegSourceMgrSkipInputData
LEAF_NODE	2572:0	2572:0	3	OJPEGLibjpegJpegSourceMgrSkipInputData
PARAMETER_LIST	2572:38	2572:84	2	( jpeg_decompress_struct * cinfo , long num_bytes )
LEAF_NODE	2572:38	2572:38	3	(
PARAMETER_DECL	2572:39	2572:63	3	jpeg_decompress_struct * cinfo
TYPE	2572:39	2572:61	4	jpeg_decompress_struct *
TYPE_NAME	2572:39	2572:39	5	jpeg_decompress_struct
LEAF_NODE	2572:39	2572:39	6	jpeg_decompress_struct
POINTER	2572:61	2572:61	5	*
LEAF_NODE	2572:61	2572:61	6	*
NAME	2572:63	2572:63	4	cinfo
LEAF_NODE	2572:63	2572:63	5	cinfo
LEAF_NODE	2572:68	2572:68	3	,
PARAMETER_DECL	2572:70	2572:75	3	long num_bytes
TYPE	2572:70	2572:70	4	long
TYPE_NAME	2572:70	2572:70	5	long
LEAF_NODE	2572:70	2572:70	6	long
NAME	2572:75	2572:75	4	num_bytes
LEAF_NODE	2572:75	2572:75	5	num_bytes
LEAF_NODE	2572:84	2572:84	3	)
LEAF_NODE	2573:0	2573:0	2	{
STATEMENTS	2574:1	2577:1	2	
SIMPLE_DECL	2574:1	2574:36	3	TIFF * tif ; tif = ( TIFF * ) cinfo -> client_data ;
VAR_DECL	2574:1	2574:7	4	TIFF * tif ; tif = ( TIFF * ) cinfo -> client_data
TYPE	2574:1	2574:5	5	TIFF *
TYPE_NAME	2574:1	2574:1	6	TIFF
LEAF_NODE	2574:1	2574:1	7	TIFF
POINTER	2574:5	2574:5	6	*
LEAF_NODE	2574:5	2574:5	7	*
NAME	2574:7	2574:7	5	tif
LEAF_NODE	2574:7	2574:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	2574:7	2574:7	5	tif = ( TIFF * ) cinfo -> client_data
ASSIGN	2574:7	2574:11	6	tif = ( TIFF * ) cinfo -> client_data
LVAL	2574:7	2574:7	7	tif
NAME	2574:7	2574:7	8	tif
LEAF_NODE	2574:7	2574:7	9	tif
ASSIGN_OP	2574:10	2574:10	7	=
LEAF_NODE	2574:10	2574:10	8	=
RVAL	2574:11	2574:18	7	( TIFF * ) cinfo -> client_data
LEAF_NODE	2574:11	2574:11	8	(
TYPE_NAME	2574:12	2574:12	8	TIFF
LEAF_NODE	2574:12	2574:12	9	TIFF
LEAF_NODE	2574:16	2574:16	8	*
LEAF_NODE	2574:17	2574:17	8	)
FIELD	2574:18	2574:25	8	cinfo -> client_data
LEAF_NODE	2574:18	2574:18	9	cinfo
LEAF_NODE	2574:23	2574:23	9	->
LEAF_NODE	2574:25	2574:25	9	client_data
LEAF_NODE	2574:36	2574:36	4	;
EXPR_STATEMENT	2575:1	2575:16	3	( void ) num_bytes ;
EXPR	2575:1	2575:7	4	( void ) num_bytes
LEAF_NODE	2575:1	2575:1	5	(
TYPE_NAME	2575:2	2575:2	5	void
LEAF_NODE	2575:2	2575:2	6	void
LEAF_NODE	2575:6	2575:6	5	)
FIELD	2575:7	2575:7	5	num_bytes
LEAF_NODE	2575:7	2575:7	6	num_bytes
LEAF_NODE	2575:16	2575:16	4	;
EXPR_STATEMENT	2576:1	2576:63	3	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Unexpected error" ) ;
EXPR	2576:1	2576:1	4	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Unexpected error" )
FUNCTION_CALL	2576:1	2576:62	5	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Unexpected error" )
CALLEE	2576:1	2576:1	6	TIFFErrorExt
LEAF_NODE	2576:1	2576:1	7	TIFFErrorExt
LEAF_NODE	2576:13	2576:13	6	(
ARGUMENT	2576:14	2576:14	6	tif -> tif_clientdata
FIELD	2576:14	2576:19	7	tif -> tif_clientdata
LEAF_NODE	2576:14	2576:14	8	tif
LEAF_NODE	2576:17	2576:17	8	->
LEAF_NODE	2576:19	2576:19	8	tif_clientdata
LEAF_NODE	2576:33	2576:33	6	,
ARGUMENT	2576:34	2576:34	6	"LibJpeg"
FIELD	2576:34	2576:34	7	"LibJpeg"
LEAF_NODE	2576:34	2576:34	8	"LibJpeg"
LEAF_NODE	2576:43	2576:43	6	,
ARGUMENT	2576:44	2576:44	6	"Unexpected error"
FIELD	2576:44	2576:44	7	"Unexpected error"
LEAF_NODE	2576:44	2576:44	8	"Unexpected error"
LEAF_NODE	2576:62	2576:62	6	)
LEAF_NODE	2576:63	2576:63	4	;
EXPR_STATEMENT	2577:1	2577:23	3	jpeg_encap_unwind ( tif ) ;
EXPR	2577:1	2577:1	4	jpeg_encap_unwind ( tif )
FUNCTION_CALL	2577:1	2577:22	5	jpeg_encap_unwind ( tif )
CALLEE	2577:1	2577:1	6	jpeg_encap_unwind
LEAF_NODE	2577:1	2577:1	7	jpeg_encap_unwind
LEAF_NODE	2577:18	2577:18	6	(
ARGUMENT	2577:19	2577:19	6	tif
FIELD	2577:19	2577:19	7	tif
LEAF_NODE	2577:19	2577:19	8	tif
LEAF_NODE	2577:22	2577:22	6	)
LEAF_NODE	2577:23	2577:23	4	;
LEAF_NODE	2578:0	2578:0	2	}
FUNCTION_DEF	2584:0	2592:0	1	
RETURN_TYPE	2584:0	2584:7	2	static boolean
LEAF_NODE	2584:0	2584:0	3	static
TYPE_NAME	2584:7	2584:7	3	boolean
LEAF_NODE	2584:7	2584:7	4	boolean
FUNCTION_NAME	2585:0	2585:0	2	OJPEGLibjpegJpegSourceMgrResyncToRestart
LEAF_NODE	2585:0	2585:0	3	OJPEGLibjpegJpegSourceMgrResyncToRestart
PARAMETER_LIST	2585:40	2585:83	2	( jpeg_decompress_struct * cinfo , int desired )
LEAF_NODE	2585:40	2585:40	3	(
PARAMETER_DECL	2585:41	2585:65	3	jpeg_decompress_struct * cinfo
TYPE	2585:41	2585:63	4	jpeg_decompress_struct *
TYPE_NAME	2585:41	2585:41	5	jpeg_decompress_struct
LEAF_NODE	2585:41	2585:41	6	jpeg_decompress_struct
POINTER	2585:63	2585:63	5	*
LEAF_NODE	2585:63	2585:63	6	*
NAME	2585:65	2585:65	4	cinfo
LEAF_NODE	2585:65	2585:65	5	cinfo
LEAF_NODE	2585:70	2585:70	3	,
PARAMETER_DECL	2585:72	2585:76	3	int desired
TYPE	2585:72	2585:72	4	int
TYPE_NAME	2585:72	2585:72	5	int
LEAF_NODE	2585:72	2585:72	6	int
NAME	2585:76	2585:76	4	desired
LEAF_NODE	2585:76	2585:76	5	desired
LEAF_NODE	2585:83	2585:83	3	)
LEAF_NODE	2586:0	2586:0	2	{
STATEMENTS	2587:1	2591:1	2	
SIMPLE_DECL	2587:1	2587:36	3	TIFF * tif ; tif = ( TIFF * ) cinfo -> client_data ;
VAR_DECL	2587:1	2587:7	4	TIFF * tif ; tif = ( TIFF * ) cinfo -> client_data
TYPE	2587:1	2587:5	5	TIFF *
TYPE_NAME	2587:1	2587:1	6	TIFF
LEAF_NODE	2587:1	2587:1	7	TIFF
POINTER	2587:5	2587:5	6	*
LEAF_NODE	2587:5	2587:5	7	*
NAME	2587:7	2587:7	5	tif
LEAF_NODE	2587:7	2587:7	6	tif
LEAF_NODE	0:0	0:0	5	;
INIT	2587:7	2587:7	5	tif = ( TIFF * ) cinfo -> client_data
ASSIGN	2587:7	2587:11	6	tif = ( TIFF * ) cinfo -> client_data
LVAL	2587:7	2587:7	7	tif
NAME	2587:7	2587:7	8	tif
LEAF_NODE	2587:7	2587:7	9	tif
ASSIGN_OP	2587:10	2587:10	7	=
LEAF_NODE	2587:10	2587:10	8	=
RVAL	2587:11	2587:18	7	( TIFF * ) cinfo -> client_data
LEAF_NODE	2587:11	2587:11	8	(
TYPE_NAME	2587:12	2587:12	8	TIFF
LEAF_NODE	2587:12	2587:12	9	TIFF
LEAF_NODE	2587:16	2587:16	8	*
LEAF_NODE	2587:17	2587:17	8	)
FIELD	2587:18	2587:25	8	cinfo -> client_data
LEAF_NODE	2587:18	2587:18	9	cinfo
LEAF_NODE	2587:23	2587:23	9	->
LEAF_NODE	2587:25	2587:25	9	client_data
LEAF_NODE	2587:36	2587:36	4	;
EXPR_STATEMENT	2588:1	2588:14	3	( void ) desired ;
EXPR	2588:1	2588:7	4	( void ) desired
LEAF_NODE	2588:1	2588:1	5	(
TYPE_NAME	2588:2	2588:2	5	void
LEAF_NODE	2588:2	2588:2	6	void
LEAF_NODE	2588:6	2588:6	5	)
FIELD	2588:7	2588:7	5	desired
LEAF_NODE	2588:7	2588:7	6	desired
LEAF_NODE	2588:14	2588:14	4	;
EXPR_STATEMENT	2589:1	2589:63	3	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Unexpected error" ) ;
EXPR	2589:1	2589:1	4	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Unexpected error" )
FUNCTION_CALL	2589:1	2589:62	5	TIFFErrorExt ( tif -> tif_clientdata , "LibJpeg" , "Unexpected error" )
CALLEE	2589:1	2589:1	6	TIFFErrorExt
LEAF_NODE	2589:1	2589:1	7	TIFFErrorExt
LEAF_NODE	2589:13	2589:13	6	(
ARGUMENT	2589:14	2589:14	6	tif -> tif_clientdata
FIELD	2589:14	2589:19	7	tif -> tif_clientdata
LEAF_NODE	2589:14	2589:14	8	tif
LEAF_NODE	2589:17	2589:17	8	->
LEAF_NODE	2589:19	2589:19	8	tif_clientdata
LEAF_NODE	2589:33	2589:33	6	,
ARGUMENT	2589:34	2589:34	6	"LibJpeg"
FIELD	2589:34	2589:34	7	"LibJpeg"
LEAF_NODE	2589:34	2589:34	8	"LibJpeg"
LEAF_NODE	2589:43	2589:43	6	,
ARGUMENT	2589:44	2589:44	6	"Unexpected error"
FIELD	2589:44	2589:44	7	"Unexpected error"
LEAF_NODE	2589:44	2589:44	8	"Unexpected error"
LEAF_NODE	2589:62	2589:62	6	)
LEAF_NODE	2589:63	2589:63	4	;
EXPR_STATEMENT	2590:1	2590:23	3	jpeg_encap_unwind ( tif ) ;
EXPR	2590:1	2590:1	4	jpeg_encap_unwind ( tif )
FUNCTION_CALL	2590:1	2590:22	5	jpeg_encap_unwind ( tif )
CALLEE	2590:1	2590:1	6	jpeg_encap_unwind
LEAF_NODE	2590:1	2590:1	7	jpeg_encap_unwind
LEAF_NODE	2590:18	2590:18	6	(
ARGUMENT	2590:19	2590:19	6	tif
FIELD	2590:19	2590:19	7	tif
LEAF_NODE	2590:19	2590:19	8	tif
LEAF_NODE	2590:22	2590:22	6	)
LEAF_NODE	2590:23	2590:23	4	;
JUMP_STATEMENT	2591:1	2591:10	3	return ( 0 ) ;
KEYWORD	2591:1	2591:1	4	return
LEAF_NODE	2591:1	2591:1	5	return
DESTINATION	2591:7	2591:7	4	( 0 )
EXPR	2591:7	2591:9	5	( 0 )
LEAF_NODE	2591:7	2591:7	6	(
FIELD	2591:8	2591:8	6	0
LEAF_NODE	2591:8	2591:8	7	0
LEAF_NODE	2591:9	2591:9	6	)
LEAF_NODE	2591:10	2591:10	4	;
LEAF_NODE	2592:0	2592:0	2	}
FUNCTION_DEF	2597:0	2601:0	1	
RETURN_TYPE	2597:0	2597:7	2	static void
LEAF_NODE	2597:0	2597:0	3	static
TYPE_NAME	2597:7	2597:7	3	void
LEAF_NODE	2597:7	2597:7	4	void
FUNCTION_NAME	2598:0	2598:0	2	OJPEGLibjpegJpegSourceMgrTermSource
LEAF_NODE	2598:0	2598:0	3	OJPEGLibjpegJpegSourceMgrTermSource
PARAMETER_LIST	2598:35	2598:65	2	( jpeg_decompress_struct * cinfo )
LEAF_NODE	2598:35	2598:35	3	(
PARAMETER_DECL	2598:36	2598:60	3	jpeg_decompress_struct * cinfo
TYPE	2598:36	2598:58	4	jpeg_decompress_struct *
TYPE_NAME	2598:36	2598:36	5	jpeg_decompress_struct
LEAF_NODE	2598:36	2598:36	6	jpeg_decompress_struct
POINTER	2598:58	2598:58	5	*
LEAF_NODE	2598:58	2598:58	6	*
NAME	2598:60	2598:60	4	cinfo
LEAF_NODE	2598:60	2598:60	5	cinfo
LEAF_NODE	2598:65	2598:65	3	)
LEAF_NODE	2599:0	2599:0	2	{
STATEMENTS	2600:1	2600:1	2	
EXPR_STATEMENT	2600:1	2600:12	3	( void ) cinfo ;
EXPR	2600:1	2600:7	4	( void ) cinfo
LEAF_NODE	2600:1	2600:1	5	(
TYPE_NAME	2600:2	2600:2	5	void
LEAF_NODE	2600:2	2600:2	6	void
LEAF_NODE	2600:6	2600:6	5	)
FIELD	2600:7	2600:7	5	cinfo
LEAF_NODE	2600:7	2600:7	6	cinfo
LEAF_NODE	2600:12	2600:12	4	;
LEAF_NODE	2601:0	2601:0	2	}
