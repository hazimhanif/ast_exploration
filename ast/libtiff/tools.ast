SOURCE_FILE	9:0	115:0	0	
SIMPLE_DECL	9:0	9:16	1	long eRtotal ; eRtotal = 0 ;
VAR_DECL	9:0	9:5	2	long eRtotal ; eRtotal = 0
TYPE	9:0	9:0	3	long
TYPE_NAME	9:0	9:0	4	long
LEAF_NODE	9:0	9:0	5	long
NAME	9:5	9:5	3	eRtotal
LEAF_NODE	9:5	9:5	4	eRtotal
LEAF_NODE	0:0	0:0	3	;
INIT	9:5	9:5	3	eRtotal = 0
ASSIGN	9:5	9:15	4	eRtotal = 0
LVAL	9:5	9:5	5	eRtotal
NAME	9:5	9:5	6	eRtotal
LEAF_NODE	9:5	9:5	7	eRtotal
ASSIGN_OP	9:13	9:13	5	=
LEAF_NODE	9:13	9:13	6	=
RVAL	9:15	9:15	5	0
FIELD	9:15	9:15	6	0
LEAF_NODE	9:15	9:15	7	0
LEAF_NODE	9:16	9:16	2	;
SIMPLE_DECL	10:0	10:16	1	long eGtotal ; eGtotal = 0 ;
VAR_DECL	10:0	10:5	2	long eGtotal ; eGtotal = 0
TYPE	10:0	10:0	3	long
TYPE_NAME	10:0	10:0	4	long
LEAF_NODE	10:0	10:0	5	long
NAME	10:5	10:5	3	eGtotal
LEAF_NODE	10:5	10:5	4	eGtotal
LEAF_NODE	0:0	0:0	3	;
INIT	10:5	10:5	3	eGtotal = 0
ASSIGN	10:5	10:15	4	eGtotal = 0
LVAL	10:5	10:5	5	eGtotal
NAME	10:5	10:5	6	eGtotal
LEAF_NODE	10:5	10:5	7	eGtotal
ASSIGN_OP	10:13	10:13	5	=
LEAF_NODE	10:13	10:13	6	=
RVAL	10:15	10:15	5	0
FIELD	10:15	10:15	6	0
LEAF_NODE	10:15	10:15	7	0
LEAF_NODE	10:16	10:16	2	;
SIMPLE_DECL	11:0	11:16	1	long eBtotal ; eBtotal = 0 ;
VAR_DECL	11:0	11:5	2	long eBtotal ; eBtotal = 0
TYPE	11:0	11:0	3	long
TYPE_NAME	11:0	11:0	4	long
LEAF_NODE	11:0	11:0	5	long
NAME	11:5	11:5	3	eBtotal
LEAF_NODE	11:5	11:5	4	eBtotal
LEAF_NODE	0:0	0:0	3	;
INIT	11:5	11:5	3	eBtotal = 0
ASSIGN	11:5	11:15	4	eBtotal = 0
LVAL	11:5	11:5	5	eBtotal
NAME	11:5	11:5	6	eBtotal
LEAF_NODE	11:5	11:5	7	eBtotal
ASSIGN_OP	11:13	11:13	5	=
LEAF_NODE	11:13	11:13	6	=
RVAL	11:15	11:15	5	0
FIELD	11:15	11:15	6	0
LEAF_NODE	11:15	11:15	7	0
LEAF_NODE	11:16	11:16	2	;
SIMPLE_DECL	12:0	12:20	1	long preveRtotal ; preveRtotal = 0 ;
VAR_DECL	12:0	12:5	2	long preveRtotal ; preveRtotal = 0
TYPE	12:0	12:0	3	long
TYPE_NAME	12:0	12:0	4	long
LEAF_NODE	12:0	12:0	5	long
NAME	12:5	12:5	3	preveRtotal
LEAF_NODE	12:5	12:5	4	preveRtotal
LEAF_NODE	0:0	0:0	3	;
INIT	12:5	12:5	3	preveRtotal = 0
ASSIGN	12:5	12:19	4	preveRtotal = 0
LVAL	12:5	12:5	5	preveRtotal
NAME	12:5	12:5	6	preveRtotal
LEAF_NODE	12:5	12:5	7	preveRtotal
ASSIGN_OP	12:17	12:17	5	=
LEAF_NODE	12:17	12:17	6	=
RVAL	12:19	12:19	5	0
FIELD	12:19	12:19	6	0
LEAF_NODE	12:19	12:19	7	0
LEAF_NODE	12:20	12:20	2	;
SIMPLE_DECL	13:0	13:20	1	long preveGtotal ; preveGtotal = 0 ;
VAR_DECL	13:0	13:5	2	long preveGtotal ; preveGtotal = 0
TYPE	13:0	13:0	3	long
TYPE_NAME	13:0	13:0	4	long
LEAF_NODE	13:0	13:0	5	long
NAME	13:5	13:5	3	preveGtotal
LEAF_NODE	13:5	13:5	4	preveGtotal
LEAF_NODE	0:0	0:0	3	;
INIT	13:5	13:5	3	preveGtotal = 0
ASSIGN	13:5	13:19	4	preveGtotal = 0
LVAL	13:5	13:5	5	preveGtotal
NAME	13:5	13:5	6	preveGtotal
LEAF_NODE	13:5	13:5	7	preveGtotal
ASSIGN_OP	13:17	13:17	5	=
LEAF_NODE	13:17	13:17	6	=
RVAL	13:19	13:19	5	0
FIELD	13:19	13:19	6	0
LEAF_NODE	13:19	13:19	7	0
LEAF_NODE	13:20	13:20	2	;
SIMPLE_DECL	14:0	14:20	1	long preveBtotal ; preveBtotal = 0 ;
VAR_DECL	14:0	14:5	2	long preveBtotal ; preveBtotal = 0
TYPE	14:0	14:0	3	long
TYPE_NAME	14:0	14:0	4	long
LEAF_NODE	14:0	14:0	5	long
NAME	14:5	14:5	3	preveBtotal
LEAF_NODE	14:5	14:5	4	preveBtotal
LEAF_NODE	0:0	0:0	3	;
INIT	14:5	14:5	3	preveBtotal = 0
ASSIGN	14:5	14:19	4	preveBtotal = 0
LVAL	14:5	14:5	5	preveBtotal
NAME	14:5	14:5	6	preveBtotal
LEAF_NODE	14:5	14:5	7	preveBtotal
ASSIGN_OP	14:17	14:17	5	=
LEAF_NODE	14:17	14:17	6	=
RVAL	14:19	14:19	5	0
FIELD	14:19	14:19	6	0
LEAF_NODE	14:19	14:19	7	0
LEAF_NODE	14:20	14:20	2	;
SIMPLE_DECL	15:0	15:28	1	unsigned long AbseRtotal ; AbseRtotal = 0 ;
VAR_DECL	15:0	15:14	2	unsigned long AbseRtotal ; AbseRtotal = 0
TYPE	15:0	15:0	3	unsigned long
TYPE_NAME	15:0	15:9	4	unsigned long
LEAF_NODE	15:0	15:0	5	unsigned
LEAF_NODE	15:9	15:9	5	long
NAME	15:14	15:14	3	AbseRtotal
LEAF_NODE	15:14	15:14	4	AbseRtotal
LEAF_NODE	0:0	0:0	3	;
INIT	15:14	15:14	3	AbseRtotal = 0
ASSIGN	15:14	15:27	4	AbseRtotal = 0
LVAL	15:14	15:14	5	AbseRtotal
NAME	15:14	15:14	6	AbseRtotal
LEAF_NODE	15:14	15:14	7	AbseRtotal
ASSIGN_OP	15:25	15:25	5	=
LEAF_NODE	15:25	15:25	6	=
RVAL	15:27	15:27	5	0
FIELD	15:27	15:27	6	0
LEAF_NODE	15:27	15:27	7	0
LEAF_NODE	15:28	15:28	2	;
SIMPLE_DECL	16:0	16:28	1	unsigned long AbseGtotal ; AbseGtotal = 0 ;
VAR_DECL	16:0	16:14	2	unsigned long AbseGtotal ; AbseGtotal = 0
TYPE	16:0	16:0	3	unsigned long
TYPE_NAME	16:0	16:9	4	unsigned long
LEAF_NODE	16:0	16:0	5	unsigned
LEAF_NODE	16:9	16:9	5	long
NAME	16:14	16:14	3	AbseGtotal
LEAF_NODE	16:14	16:14	4	AbseGtotal
LEAF_NODE	0:0	0:0	3	;
INIT	16:14	16:14	3	AbseGtotal = 0
ASSIGN	16:14	16:27	4	AbseGtotal = 0
LVAL	16:14	16:14	5	AbseGtotal
NAME	16:14	16:14	6	AbseGtotal
LEAF_NODE	16:14	16:14	7	AbseGtotal
ASSIGN_OP	16:25	16:25	5	=
LEAF_NODE	16:25	16:25	6	=
RVAL	16:27	16:27	5	0
FIELD	16:27	16:27	6	0
LEAF_NODE	16:27	16:27	7	0
LEAF_NODE	16:28	16:28	2	;
SIMPLE_DECL	17:0	17:28	1	unsigned long AbseBtotal ; AbseBtotal = 0 ;
VAR_DECL	17:0	17:14	2	unsigned long AbseBtotal ; AbseBtotal = 0
TYPE	17:0	17:0	3	unsigned long
TYPE_NAME	17:0	17:9	4	unsigned long
LEAF_NODE	17:0	17:0	5	unsigned
LEAF_NODE	17:9	17:9	5	long
NAME	17:14	17:14	3	AbseBtotal
LEAF_NODE	17:14	17:14	4	AbseBtotal
LEAF_NODE	0:0	0:0	3	;
INIT	17:14	17:14	3	AbseBtotal = 0
ASSIGN	17:14	17:27	4	AbseBtotal = 0
LVAL	17:14	17:14	5	AbseBtotal
NAME	17:14	17:14	6	AbseBtotal
LEAF_NODE	17:14	17:14	7	AbseBtotal
ASSIGN_OP	17:25	17:25	5	=
LEAF_NODE	17:25	17:25	6	=
RVAL	17:27	17:27	5	0
FIELD	17:27	17:27	6	0
LEAF_NODE	17:27	17:27	7	0
LEAF_NODE	17:28	17:28	2	;
SIMPLE_DECL	18:0	18:24	1	unsigned long eCodes ; eCodes = 0 ;
VAR_DECL	18:0	18:14	2	unsigned long eCodes ; eCodes = 0
TYPE	18:0	18:0	3	unsigned long
TYPE_NAME	18:0	18:9	4	unsigned long
LEAF_NODE	18:0	18:0	5	unsigned
LEAF_NODE	18:9	18:9	5	long
NAME	18:14	18:14	3	eCodes
LEAF_NODE	18:14	18:14	4	eCodes
LEAF_NODE	0:0	0:0	3	;
INIT	18:14	18:14	3	eCodes = 0
ASSIGN	18:14	18:23	4	eCodes = 0
LVAL	18:14	18:14	5	eCodes
NAME	18:14	18:14	6	eCodes
LEAF_NODE	18:14	18:14	7	eCodes
ASSIGN_OP	18:21	18:21	5	=
LEAF_NODE	18:21	18:21	6	=
RVAL	18:23	18:23	5	0
FIELD	18:23	18:23	6	0
LEAF_NODE	18:23	18:23	7	0
LEAF_NODE	18:24	18:24	2	;
SIMPLE_DECL	19:0	19:28	1	unsigned long preveCodes ; preveCodes = 0 ;
VAR_DECL	19:0	19:14	2	unsigned long preveCodes ; preveCodes = 0
TYPE	19:0	19:0	3	unsigned long
TYPE_NAME	19:0	19:9	4	unsigned long
LEAF_NODE	19:0	19:0	5	unsigned
LEAF_NODE	19:9	19:9	5	long
NAME	19:14	19:14	3	preveCodes
LEAF_NODE	19:14	19:14	4	preveCodes
LEAF_NODE	0:0	0:0	3	;
INIT	19:14	19:14	3	preveCodes = 0
ASSIGN	19:14	19:27	4	preveCodes = 0
LVAL	19:14	19:14	5	preveCodes
NAME	19:14	19:14	6	preveCodes
LEAF_NODE	19:14	19:14	7	preveCodes
ASSIGN_OP	19:25	19:25	5	=
LEAF_NODE	19:25	19:25	6	=
RVAL	19:27	19:27	5	0
FIELD	19:27	19:27	6	0
LEAF_NODE	19:27	19:27	7	0
LEAF_NODE	19:28	19:28	2	;
SIMPLE_DECL	20:0	20:23	1	unsigned long eBits ; eBits = 0 ;
VAR_DECL	20:0	20:14	2	unsigned long eBits ; eBits = 0
TYPE	20:0	20:0	3	unsigned long
TYPE_NAME	20:0	20:9	4	unsigned long
LEAF_NODE	20:0	20:0	5	unsigned
LEAF_NODE	20:9	20:9	5	long
NAME	20:14	20:14	3	eBits
LEAF_NODE	20:14	20:14	4	eBits
LEAF_NODE	0:0	0:0	3	;
INIT	20:14	20:14	3	eBits = 0
ASSIGN	20:14	20:22	4	eBits = 0
LVAL	20:14	20:14	5	eBits
NAME	20:14	20:14	6	eBits
LEAF_NODE	20:14	20:14	7	eBits
ASSIGN_OP	20:20	20:20	5	=
LEAF_NODE	20:20	20:20	6	=
RVAL	20:22	20:22	5	0
FIELD	20:22	20:22	6	0
LEAF_NODE	20:22	20:22	7	0
LEAF_NODE	20:23	20:23	2	;
SIMPLE_DECL	21:0	21:27	1	unsigned long preveBits ; preveBits = 0 ;
VAR_DECL	21:0	21:14	2	unsigned long preveBits ; preveBits = 0
TYPE	21:0	21:0	3	unsigned long
TYPE_NAME	21:0	21:9	4	unsigned long
LEAF_NODE	21:0	21:0	5	unsigned
LEAF_NODE	21:9	21:9	5	long
NAME	21:14	21:14	3	preveBits
LEAF_NODE	21:14	21:14	4	preveBits
LEAF_NODE	0:0	0:0	3	;
INIT	21:14	21:14	3	preveBits = 0
ASSIGN	21:14	21:26	4	preveBits = 0
LVAL	21:14	21:14	5	preveBits
NAME	21:14	21:14	6	preveBits
LEAF_NODE	21:14	21:14	7	preveBits
ASSIGN_OP	21:24	21:24	5	=
LEAF_NODE	21:24	21:24	6	=
RVAL	21:26	21:26	5	0
FIELD	21:26	21:26	6	0
LEAF_NODE	21:26	21:26	7	0
LEAF_NODE	21:27	21:27	2	;
SIMPLE_DECL	23:7	23:29	1	void setupLumaTables ; setupLumaTables setupLumaTables ( ) ;
VAR_DECL	23:7	23:12	2	void setupLumaTables ; setupLumaTables setupLumaTables ( )
TYPE	23:7	23:7	3	void
TYPE_NAME	23:7	23:7	4	void
LEAF_NODE	23:7	23:7	5	void
NAME	23:12	23:12	3	setupLumaTables
LEAF_NODE	23:12	23:12	4	setupLumaTables
LEAF_NODE	0:0	0:0	3	;
INIT	23:12	23:12	3	setupLumaTables setupLumaTables ( )
ASSIGN	23:12	23:27	4	setupLumaTables setupLumaTables ( )
LVAL	23:12	23:12	5	setupLumaTables
NAME	23:12	23:12	6	setupLumaTables
LEAF_NODE	23:12	23:12	7	setupLumaTables
ASSIGN_OP	23:12	23:12	5	setupLumaTables
NAME	23:12	23:12	6	setupLumaTables
LEAF_NODE	23:12	23:12	7	setupLumaTables
RVAL	23:27	23:28	5	( )
LEAF_NODE	23:27	23:27	6	(
LEAF_NODE	23:28	23:28	6	)
LEAF_NODE	23:29	23:29	2	;
FUNCTION_DEF	24:0	24:49	1	
RETURN_TYPE	24:0	24:7	2	static int
LEAF_NODE	24:0	24:0	3	static
TYPE_NAME	24:7	24:7	3	int
LEAF_NODE	24:7	24:7	4	int
FUNCTION_NAME	24:11	24:11	2	abs
LEAF_NODE	24:11	24:11	3	abs
PARAMETER_LIST	24:14	24:20	2	( int v )
LEAF_NODE	24:14	24:14	3	(
PARAMETER_DECL	24:15	24:19	3	int v
TYPE	24:15	24:15	4	int
TYPE_NAME	24:15	24:15	5	int
LEAF_NODE	24:15	24:15	6	int
NAME	24:19	24:19	4	v
LEAF_NODE	24:19	24:19	5	v
LEAF_NODE	24:20	24:20	3	)
LEAF_NODE	24:22	24:22	2	{
STATEMENTS	24:24	24:24	2	
JUMP_STATEMENT	24:24	24:47	3	return ( v < 0 ? - v : v ) ;
KEYWORD	24:24	24:24	4	return
LEAF_NODE	24:24	24:24	5	return
DESTINATION	24:31	24:31	4	( v < 0 ? - v : v )
EXPR	24:31	24:46	5	( v < 0 ? - v : v )
LEAF_NODE	24:31	24:31	6	(
COND_EXPR	24:32	24:45	6	v < 0 ? - v : v
CONDITION	24:32	24:36	7	v < 0
FIELD	24:32	24:32	8	v
LEAF_NODE	24:32	24:32	9	v
REL_OPERATOR	24:34	24:34	8	<
LEAF_NODE	24:34	24:34	9	<
FIELD	24:36	24:36	8	0
LEAF_NODE	24:36	24:36	9	0
LEAF_NODE	24:38	24:38	7	?
EXPR	24:40	24:40	7	- v
UNARY_EXPR	24:40	24:41	8	- v
UNARY_OPERATOR	24:40	24:40	9	-
LEAF_NODE	24:40	24:40	10	-
FIELD	24:41	24:41	9	v
LEAF_NODE	24:41	24:41	10	v
LEAF_NODE	24:43	24:43	7	:
FIELD	24:45	24:45	7	v
LEAF_NODE	24:45	24:45	8	v
LEAF_NODE	24:46	24:46	6	)
LEAF_NODE	24:47	24:47	4	;
LEAF_NODE	24:49	24:49	2	}
FUNCTION_DEF	25:0	25:65	1	
RETURN_TYPE	25:0	25:7	2	static double
LEAF_NODE	25:0	25:0	3	static
TYPE_NAME	25:7	25:7	3	double
LEAF_NODE	25:7	25:7	4	double
FUNCTION_NAME	25:14	25:14	2	pct
LEAF_NODE	25:14	25:14	3	pct
PARAMETER_LIST	25:17	25:36	2	( int v , double range )
LEAF_NODE	25:17	25:17	3	(
PARAMETER_DECL	25:18	25:22	3	int v
TYPE	25:18	25:18	4	int
TYPE_NAME	25:18	25:18	5	int
LEAF_NODE	25:18	25:18	6	int
NAME	25:22	25:22	4	v
LEAF_NODE	25:22	25:22	5	v
LEAF_NODE	25:23	25:23	3	,
PARAMETER_DECL	25:24	25:31	3	double range
TYPE	25:24	25:24	4	double
TYPE_NAME	25:24	25:24	5	double
LEAF_NODE	25:24	25:24	6	double
NAME	25:31	25:31	4	range
LEAF_NODE	25:31	25:31	5	range
LEAF_NODE	25:36	25:36	3	)
LEAF_NODE	25:38	25:38	2	{
STATEMENTS	25:40	25:63	2	
LEAF_NODE	25:40	25:40	3	return
LEAF_NODE	25:47	25:47	3	(
LEAF_NODE	25:48	25:48	3	v
LEAF_NODE	25:49	25:49	3	*
LEAF_NODE	25:50	25:50	3	100.
LEAF_NODE	25:55	25:55	3	/
LEAF_NODE	25:57	25:57	3	range
LEAF_NODE	25:62	25:62	3	)
LEAF_NODE	25:63	25:63	3	;
LEAF_NODE	25:65	25:65	2	}
SIMPLE_DECL	28:0	28:12	1	float D1 , float D2 ;
INIT_DECL_LIST	28:0	28:0	2	float D1 , float D2
VAR_DECL	28:0	28:6	3	float D1
TYPE	28:0	28:0	4	float
TYPE_NAME	28:0	28:0	5	float
LEAF_NODE	28:0	28:0	6	float
NAME	28:6	28:6	4	D1
LEAF_NODE	28:6	28:6	5	D1
LEAF_NODE	28:8	28:8	3	,
VAR_DECL	28:0	28:10	3	float D2
TYPE	28:0	28:0	4	float
TYPE_NAME	28:0	28:0	5	float
LEAF_NODE	28:0	28:0	6	float
NAME	28:10	28:10	4	D2
LEAF_NODE	28:10	28:10	5	D2
LEAF_NODE	28:12	28:12	2	;
SIMPLE_DECL	29:0	29:12	1	float D3 , float D4 ;
INIT_DECL_LIST	29:0	29:0	2	float D3 , float D4
VAR_DECL	29:0	29:6	3	float D3
TYPE	29:0	29:0	4	float
TYPE_NAME	29:0	29:0	5	float
LEAF_NODE	29:0	29:0	6	float
NAME	29:6	29:6	4	D3
LEAF_NODE	29:6	29:6	5	D3
LEAF_NODE	29:8	29:8	3	,
VAR_DECL	29:0	29:10	3	float D4
TYPE	29:0	29:0	4	float
TYPE_NAME	29:0	29:0	5	float
LEAF_NODE	29:0	29:0	6	float
NAME	29:10	29:10	4	D4
LEAF_NODE	29:10	29:10	5	D4
LEAF_NODE	29:12	29:12	2	;
SIMPLE_DECL	30:0	30:12	1	float D5 , float D6 ;
INIT_DECL_LIST	30:0	30:0	2	float D5 , float D6
VAR_DECL	30:0	30:6	3	float D5
TYPE	30:0	30:0	4	float
TYPE_NAME	30:0	30:0	5	float
LEAF_NODE	30:0	30:0	6	float
NAME	30:6	30:6	4	D5
LEAF_NODE	30:6	30:6	5	D5
LEAF_NODE	30:8	30:8	3	,
VAR_DECL	30:0	30:10	3	float D6
TYPE	30:0	30:0	4	float
TYPE_NAME	30:0	30:0	5	float
LEAF_NODE	30:0	30:0	6	float
NAME	30:10	30:10	4	D6
LEAF_NODE	30:10	30:10	5	D6
LEAF_NODE	30:12	30:12	2	;
FUNCTION_DEF	32:0	79:0	1	
RETURN_TYPE	32:0	32:0	2	int
TYPE_NAME	32:0	32:0	3	int
LEAF_NODE	32:0	32:0	4	int
FUNCTION_NAME	33:0	33:0	2	main
LEAF_NODE	33:0	33:0	3	main
PARAMETER_LIST	33:4	33:26	2	( int argc , char * * argv )
LEAF_NODE	33:4	33:4	3	(
PARAMETER_DECL	33:5	33:9	3	int argc
TYPE	33:5	33:5	4	int
TYPE_NAME	33:5	33:5	5	int
LEAF_NODE	33:5	33:5	6	int
NAME	33:9	33:9	4	argc
LEAF_NODE	33:9	33:9	5	argc
LEAF_NODE	33:13	33:13	3	,
PARAMETER_DECL	33:15	33:22	3	char * * argv
TYPE	33:15	33:19	4	char * *
TYPE_NAME	33:15	33:15	5	char
LEAF_NODE	33:15	33:15	6	char
POINTER	33:19	33:20	5	* *
LEAF_NODE	33:19	33:19	6	*
LEAF_NODE	33:20	33:20	6	*
NAME	33:22	33:22	4	argv
LEAF_NODE	33:22	33:22	5	argv
LEAF_NODE	33:26	33:26	3	)
LEAF_NODE	34:0	34:0	2	{
STATEMENTS	35:4	78:4	2	
SIMPLE_DECL	35:4	35:15	3	int R , int G , int B ;
INIT_DECL_LIST	35:4	35:4	4	int R , int G , int B
VAR_DECL	35:4	35:8	5	int R
TYPE	35:4	35:4	6	int
TYPE_NAME	35:4	35:4	7	int
LEAF_NODE	35:4	35:4	8	int
NAME	35:8	35:8	6	R
LEAF_NODE	35:8	35:8	7	R
LEAF_NODE	35:9	35:9	5	,
INIT_DECL_LIST	35:4	35:4	5	int G , int B
VAR_DECL	35:4	35:11	6	int G
TYPE	35:4	35:4	7	int
TYPE_NAME	35:4	35:4	8	int
LEAF_NODE	35:4	35:4	9	int
NAME	35:11	35:11	7	G
LEAF_NODE	35:11	35:11	8	G
LEAF_NODE	35:12	35:12	6	,
VAR_DECL	35:4	35:14	6	int B
TYPE	35:4	35:4	7	int
TYPE_NAME	35:4	35:4	8	int
LEAF_NODE	35:4	35:4	9	int
NAME	35:14	35:14	7	B
LEAF_NODE	35:14	35:14	8	B
LEAF_NODE	35:15	35:15	4	;
SELECTION	37:4	37:18	3	
KEYWORD	37:4	37:4	4	if
LEAF_NODE	37:4	37:4	5	if
LEAF_NODE	37:7	37:7	4	(
CONDITION	37:8	37:8	4	argc > 1
EXPR	37:8	37:15	5	argc > 1
FIELD	37:8	37:8	6	argc
LEAF_NODE	37:8	37:8	7	argc
REL_OPERATOR	37:13	37:13	6	>
LEAF_NODE	37:13	37:13	7	>
FIELD	37:15	37:15	6	1
LEAF_NODE	37:15	37:15	7	1
LEAF_NODE	37:16	37:16	4	)
STATEMENTS	37:18	44:4	4	
LEAF_NODE	37:18	37:18	5	{
STATEMENTS	38:1	43:1	5	
EXPR_STATEMENT	38:1	38:22	6	refBlackWhite [ 0 ] = 16 ;
EXPR	38:1	38:1	7	refBlackWhite [ 0 ] = 16
ASSIGN	38:1	38:20	8	refBlackWhite [ 0 ] = 16
LVAL	38:1	38:1	9	refBlackWhite [ 0 ]
FIELD	38:1	38:16	10	refBlackWhite [ 0 ]
LEAF_NODE	38:1	38:1	11	refBlackWhite
LEAF_NODE	38:14	38:14	11	[
EXPR	38:15	38:15	11	0
FIELD	38:15	38:15	12	0
LEAF_NODE	38:15	38:15	13	0
LEAF_NODE	38:16	38:16	11	]
ASSIGN_OP	38:18	38:18	9	=
LEAF_NODE	38:18	38:18	10	=
RVAL	38:20	38:20	9	16
FIELD	38:20	38:20	10	16
LEAF_NODE	38:20	38:20	11	16
LEAF_NODE	38:22	38:22	7	;
EXPR_STATEMENT	39:1	39:23	6	refBlackWhite [ 1 ] = 235 ;
EXPR	39:1	39:1	7	refBlackWhite [ 1 ] = 235
ASSIGN	39:1	39:20	8	refBlackWhite [ 1 ] = 235
LVAL	39:1	39:1	9	refBlackWhite [ 1 ]
FIELD	39:1	39:16	10	refBlackWhite [ 1 ]
LEAF_NODE	39:1	39:1	11	refBlackWhite
LEAF_NODE	39:14	39:14	11	[
EXPR	39:15	39:15	11	1
FIELD	39:15	39:15	12	1
LEAF_NODE	39:15	39:15	13	1
LEAF_NODE	39:16	39:16	11	]
ASSIGN_OP	39:18	39:18	9	=
LEAF_NODE	39:18	39:18	10	=
RVAL	39:20	39:20	9	235
FIELD	39:20	39:20	10	235
LEAF_NODE	39:20	39:20	11	235
LEAF_NODE	39:23	39:23	7	;
EXPR_STATEMENT	40:1	40:23	6	refBlackWhite [ 2 ] = 128 ;
EXPR	40:1	40:1	7	refBlackWhite [ 2 ] = 128
ASSIGN	40:1	40:20	8	refBlackWhite [ 2 ] = 128
LVAL	40:1	40:1	9	refBlackWhite [ 2 ]
FIELD	40:1	40:16	10	refBlackWhite [ 2 ]
LEAF_NODE	40:1	40:1	11	refBlackWhite
LEAF_NODE	40:14	40:14	11	[
EXPR	40:15	40:15	11	2
FIELD	40:15	40:15	12	2
LEAF_NODE	40:15	40:15	13	2
LEAF_NODE	40:16	40:16	11	]
ASSIGN_OP	40:18	40:18	9	=
LEAF_NODE	40:18	40:18	10	=
RVAL	40:20	40:20	9	128
FIELD	40:20	40:20	10	128
LEAF_NODE	40:20	40:20	11	128
LEAF_NODE	40:23	40:23	7	;
EXPR_STATEMENT	41:1	41:23	6	refBlackWhite [ 3 ] = 240 ;
EXPR	41:1	41:1	7	refBlackWhite [ 3 ] = 240
ASSIGN	41:1	41:20	8	refBlackWhite [ 3 ] = 240
LVAL	41:1	41:1	9	refBlackWhite [ 3 ]
FIELD	41:1	41:16	10	refBlackWhite [ 3 ]
LEAF_NODE	41:1	41:1	11	refBlackWhite
LEAF_NODE	41:14	41:14	11	[
EXPR	41:15	41:15	11	3
FIELD	41:15	41:15	12	3
LEAF_NODE	41:15	41:15	13	3
LEAF_NODE	41:16	41:16	11	]
ASSIGN_OP	41:18	41:18	9	=
LEAF_NODE	41:18	41:18	10	=
RVAL	41:20	41:20	9	240
FIELD	41:20	41:20	10	240
LEAF_NODE	41:20	41:20	11	240
LEAF_NODE	41:23	41:23	7	;
EXPR_STATEMENT	42:1	42:23	6	refBlackWhite [ 4 ] = 128 ;
EXPR	42:1	42:1	7	refBlackWhite [ 4 ] = 128
ASSIGN	42:1	42:20	8	refBlackWhite [ 4 ] = 128
LVAL	42:1	42:1	9	refBlackWhite [ 4 ]
FIELD	42:1	42:16	10	refBlackWhite [ 4 ]
LEAF_NODE	42:1	42:1	11	refBlackWhite
LEAF_NODE	42:14	42:14	11	[
EXPR	42:15	42:15	11	4
FIELD	42:15	42:15	12	4
LEAF_NODE	42:15	42:15	13	4
LEAF_NODE	42:16	42:16	11	]
ASSIGN_OP	42:18	42:18	9	=
LEAF_NODE	42:18	42:18	10	=
RVAL	42:20	42:20	9	128
FIELD	42:20	42:20	10	128
LEAF_NODE	42:20	42:20	11	128
LEAF_NODE	42:23	42:23	7	;
EXPR_STATEMENT	43:1	43:23	6	refBlackWhite [ 5 ] = 240 ;
EXPR	43:1	43:1	7	refBlackWhite [ 5 ] = 240
ASSIGN	43:1	43:20	8	refBlackWhite [ 5 ] = 240
LVAL	43:1	43:1	9	refBlackWhite [ 5 ]
FIELD	43:1	43:16	10	refBlackWhite [ 5 ]
LEAF_NODE	43:1	43:1	11	refBlackWhite
LEAF_NODE	43:14	43:14	11	[
EXPR	43:15	43:15	11	5
FIELD	43:15	43:15	12	5
LEAF_NODE	43:15	43:15	13	5
LEAF_NODE	43:16	43:16	11	]
ASSIGN_OP	43:18	43:18	9	=
LEAF_NODE	43:18	43:18	10	=
RVAL	43:20	43:20	9	240
FIELD	43:20	43:20	10	240
LEAF_NODE	43:20	43:20	11	240
LEAF_NODE	43:23	43:23	7	;
LEAF_NODE	44:4	44:4	5	}
EXPR_STATEMENT	45:4	45:22	3	D3 = 2 - 2 * LumaRed ;
EXPR	45:4	45:4	4	D3 = 2 - 2 * LumaRed
ASSIGN	45:4	45:9	5	D3 = 2 - 2 * LumaRed
LVAL	45:4	45:4	6	D3
FIELD	45:4	45:4	7	D3
LEAF_NODE	45:4	45:4	8	D3
ASSIGN_OP	45:7	45:7	6	=
LEAF_NODE	45:7	45:7	7	=
RVAL	45:9	45:15	6	2 - 2 * LumaRed
FIELD	45:9	45:9	7	2
LEAF_NODE	45:9	45:9	8	2
LEAF_NODE	45:11	45:11	7	-
FIELD	45:13	45:13	7	2
LEAF_NODE	45:13	45:13	8	2
LEAF_NODE	45:14	45:14	7	*
FIELD	45:15	45:15	7	LumaRed
LEAF_NODE	45:15	45:15	8	LumaRed
LEAF_NODE	45:22	45:22	4	;
EXPR_STATEMENT	46:4	46:23	3	D4 = 2 - 2 * LumaBlue ;
EXPR	46:4	46:4	4	D4 = 2 - 2 * LumaBlue
ASSIGN	46:4	46:9	5	D4 = 2 - 2 * LumaBlue
LVAL	46:4	46:4	6	D4
FIELD	46:4	46:4	7	D4
LEAF_NODE	46:4	46:4	8	D4
ASSIGN_OP	46:7	46:7	6	=
LEAF_NODE	46:7	46:7	7	=
RVAL	46:9	46:15	6	2 - 2 * LumaBlue
FIELD	46:9	46:9	7	2
LEAF_NODE	46:9	46:9	8	2
LEAF_NODE	46:11	46:11	7	-
FIELD	46:13	46:13	7	2
LEAF_NODE	46:13	46:13	8	2
LEAF_NODE	46:14	46:14	7	*
FIELD	46:15	46:15	7	LumaBlue
LEAF_NODE	46:15	46:15	8	LumaBlue
LEAF_NODE	46:23	46:23	4	;
EXPR_STATEMENT	47:4	47:16	3	D1 = 1. / D3 ;
EXPR	47:4	47:4	4	D1 = 1. / D3
ASSIGN	47:4	47:9	5	D1 = 1. / D3
LVAL	47:4	47:4	6	D1
FIELD	47:4	47:4	7	D1
LEAF_NODE	47:4	47:4	8	D1
ASSIGN_OP	47:7	47:7	6	=
LEAF_NODE	47:7	47:7	7	=
RVAL	47:9	47:14	6	1. / D3
FIELD	47:9	47:9	7	1.
LEAF_NODE	47:9	47:9	8	1.
LEAF_NODE	47:12	47:12	7	/
FIELD	47:14	47:14	7	D3
LEAF_NODE	47:14	47:14	8	D3
LEAF_NODE	47:16	47:16	4	;
EXPR_STATEMENT	48:4	48:16	3	D2 = 1. / D4 ;
EXPR	48:4	48:4	4	D2 = 1. / D4
ASSIGN	48:4	48:9	5	D2 = 1. / D4
LVAL	48:4	48:4	6	D2
FIELD	48:4	48:4	7	D2
LEAF_NODE	48:4	48:4	8	D2
ASSIGN_OP	48:7	48:7	6	=
LEAF_NODE	48:7	48:7	7	=
RVAL	48:9	48:14	6	1. / D4
FIELD	48:9	48:9	7	1.
LEAF_NODE	48:9	48:9	8	1.
LEAF_NODE	48:12	48:12	7	/
FIELD	48:14	48:14	7	D4
LEAF_NODE	48:14	48:14	8	D4
LEAF_NODE	48:16	48:16	4	;
LEAF_NODE	49:4	49:4	3	D5
LEAF_NODE	49:7	49:7	3	=
LEAF_NODE	49:9	49:9	3	D3
EXPR_STATEMENT	49:11	49:31	3	* LumaRed / LumaGreen ;
EXPR	49:11	49:22	4	* LumaRed / LumaGreen
UNARY_EXPR	49:11	49:12	5	* LumaRed
UNARY_OPERATOR	49:11	49:11	6	*
LEAF_NODE	49:11	49:11	7	*
FIELD	49:12	49:12	6	LumaRed
LEAF_NODE	49:12	49:12	7	LumaRed
LEAF_NODE	49:20	49:20	5	/
FIELD	49:22	49:22	5	LumaGreen
LEAF_NODE	49:22	49:22	6	LumaGreen
LEAF_NODE	49:31	49:31	4	;
LEAF_NODE	50:4	50:4	3	D6
LEAF_NODE	50:7	50:7	3	=
LEAF_NODE	50:9	50:9	3	D4
EXPR_STATEMENT	50:11	50:32	3	* LumaBlue / LumaGreen ;
EXPR	50:11	50:23	4	* LumaBlue / LumaGreen
UNARY_EXPR	50:11	50:12	5	* LumaBlue
UNARY_OPERATOR	50:11	50:11	6	*
LEAF_NODE	50:11	50:11	7	*
FIELD	50:12	50:12	6	LumaBlue
LEAF_NODE	50:12	50:12	7	LumaBlue
LEAF_NODE	50:21	50:21	5	/
FIELD	50:23	50:23	5	LumaGreen
LEAF_NODE	50:23	50:23	6	LumaGreen
LEAF_NODE	50:32	50:32	4	;
EXPR_STATEMENT	51:4	51:21	3	setupLumaTables ( ) ;
EXPR	51:4	51:4	4	setupLumaTables ( )
FUNCTION_CALL	51:4	51:20	5	setupLumaTables ( )
CALLEE	51:4	51:4	6	setupLumaTables
LEAF_NODE	51:4	51:4	7	setupLumaTables
LEAF_NODE	51:19	51:19	6	(
LEAF_NODE	51:20	51:20	6	)
LEAF_NODE	51:21	51:21	4	;
ITERATION	52:4	52:30	3	
KEYWORD	52:4	52:4	4	for
LEAF_NODE	52:4	52:4	5	for
LEAF_NODE	52:8	52:8	4	(
FOR_INIT	52:9	52:14	4	R = 0 ;
EXPR	52:9	52:9	5	R = 0
ASSIGN	52:9	52:13	6	R = 0
LVAL	52:9	52:9	7	R
FIELD	52:9	52:9	8	R
LEAF_NODE	52:9	52:9	9	R
ASSIGN_OP	52:11	52:11	7	=
LEAF_NODE	52:11	52:11	8	=
RVAL	52:13	52:13	7	0
FIELD	52:13	52:13	8	0
LEAF_NODE	52:13	52:13	9	0
LEAF_NODE	52:14	52:14	5	;
CONDITION	52:16	52:16	4	R < 256
EXPR	52:16	52:20	5	R < 256
FIELD	52:16	52:16	6	R
LEAF_NODE	52:16	52:16	7	R
REL_OPERATOR	52:18	52:18	6	<
LEAF_NODE	52:18	52:18	7	<
FIELD	52:20	52:20	6	256
LEAF_NODE	52:20	52:20	7	256
LEAF_NODE	52:23	52:23	4	;
FOR_EXPR	52:25	52:25	4	R ++
EXPR	52:25	52:25	5	R ++
FIELD	52:25	52:26	6	R ++
LEAF_NODE	52:25	52:25	7	R
LEAF_NODE	52:26	52:26	7	++
LEAF_NODE	52:28	52:28	4	)
STATEMENTS	52:30	69:4	4	
LEAF_NODE	52:30	52:30	5	{
STATEMENTS	53:1	68:1	5	
ITERATION	53:1	54:5	6	
KEYWORD	53:1	53:1	7	for
LEAF_NODE	53:1	53:1	8	for
LEAF_NODE	53:5	53:5	7	(
FOR_INIT	53:6	53:11	7	G = 0 ;
EXPR	53:6	53:6	8	G = 0
ASSIGN	53:6	53:10	9	G = 0
LVAL	53:6	53:6	10	G
FIELD	53:6	53:6	11	G
LEAF_NODE	53:6	53:6	12	G
ASSIGN_OP	53:8	53:8	10	=
LEAF_NODE	53:8	53:8	11	=
RVAL	53:10	53:10	10	0
FIELD	53:10	53:10	11	0
LEAF_NODE	53:10	53:10	12	0
LEAF_NODE	53:11	53:11	8	;
CONDITION	53:13	53:13	7	G < 256
EXPR	53:13	53:17	8	G < 256
FIELD	53:13	53:13	9	G
LEAF_NODE	53:13	53:13	10	G
REL_OPERATOR	53:15	53:15	9	<
LEAF_NODE	53:15	53:15	10	<
FIELD	53:17	53:17	9	256
LEAF_NODE	53:17	53:17	10	256
LEAF_NODE	53:20	53:20	7	;
FOR_EXPR	53:22	53:22	7	G ++
EXPR	53:22	53:22	8	G ++
FIELD	53:22	53:23	9	G ++
LEAF_NODE	53:22	53:22	10	G
LEAF_NODE	53:23	53:23	10	++
LEAF_NODE	53:25	53:25	7	)
STATEMENTS	54:5	54:5	7	
ITERATION	54:5	55:2	8	
KEYWORD	54:5	54:5	9	for
LEAF_NODE	54:5	54:5	10	for
LEAF_NODE	54:9	54:9	9	(
FOR_INIT	54:10	54:15	9	B = 0 ;
EXPR	54:10	54:10	10	B = 0
ASSIGN	54:10	54:14	11	B = 0
LVAL	54:10	54:10	12	B
FIELD	54:10	54:10	13	B
LEAF_NODE	54:10	54:10	14	B
ASSIGN_OP	54:12	54:12	12	=
LEAF_NODE	54:12	54:12	13	=
RVAL	54:14	54:14	12	0
FIELD	54:14	54:14	13	0
LEAF_NODE	54:14	54:14	14	0
LEAF_NODE	54:15	54:15	10	;
CONDITION	54:17	54:17	9	B < 256
EXPR	54:17	54:21	10	B < 256
FIELD	54:17	54:17	11	B
LEAF_NODE	54:17	54:17	12	B
REL_OPERATOR	54:19	54:19	11	<
LEAF_NODE	54:19	54:19	12	<
FIELD	54:21	54:21	11	256
LEAF_NODE	54:21	54:21	12	256
LEAF_NODE	54:24	54:24	9	;
FOR_EXPR	54:26	54:26	9	B ++
EXPR	54:26	54:26	10	B ++
FIELD	54:26	54:27	11	B ++
LEAF_NODE	54:26	54:26	12	B
LEAF_NODE	54:27	54:27	12	++
LEAF_NODE	54:29	54:29	9	)
STATEMENTS	55:2	55:2	9	
EXPR_STATEMENT	55:2	55:16	10	check ( R , G , B ) ;
EXPR	55:2	55:2	11	check ( R , G , B )
FUNCTION_CALL	55:2	55:15	12	check ( R , G , B )
CALLEE	55:2	55:2	13	check
LEAF_NODE	55:2	55:2	14	check
LEAF_NODE	55:7	55:7	13	(
ARGUMENT	55:8	55:8	13	R
FIELD	55:8	55:8	14	R
LEAF_NODE	55:8	55:8	15	R
LEAF_NODE	55:9	55:9	13	,
ARGUMENT	55:11	55:11	13	G
FIELD	55:11	55:11	14	G
LEAF_NODE	55:11	55:11	15	G
LEAF_NODE	55:12	55:12	13	,
ARGUMENT	55:14	55:14	13	B
FIELD	55:14	55:14	14	B
LEAF_NODE	55:14	55:14	15	B
LEAF_NODE	55:15	55:15	13	)
LEAF_NODE	55:16	55:16	11	;
EXPR_STATEMENT	56:1	63:2	6	printf ( "[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n" , R , eCodes - preveCodes , eCodes , eBits - preveBits , eBits , abs ( AbseRtotal - preveRtotal ) , eRtotal , AbseRtotal , abs ( AbseGtotal - preveGtotal ) , eGtotal , AbseGtotal , abs ( AbseBtotal - preveBtotal ) , eBtotal , AbseBtotal ) ;
EXPR	56:1	56:1	7	printf ( "[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n" , R , eCodes - preveCodes , eCodes , eBits - preveBits , eBits , abs ( AbseRtotal - preveRtotal ) , eRtotal , AbseRtotal , abs ( AbseGtotal - preveGtotal ) , eGtotal , AbseGtotal , abs ( AbseBtotal - preveBtotal ) , eBtotal , AbseBtotal )
FUNCTION_CALL	56:1	63:1	8	printf ( "[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n" , R , eCodes - preveCodes , eCodes , eBits - preveBits , eBits , abs ( AbseRtotal - preveRtotal ) , eRtotal , AbseRtotal , abs ( AbseGtotal - preveGtotal ) , eGtotal , AbseGtotal , abs ( AbseBtotal - preveBtotal ) , eBtotal , AbseBtotal )
CALLEE	56:1	56:1	9	printf
LEAF_NODE	56:1	56:1	10	printf
LEAF_NODE	56:7	56:7	9	(
ARGUMENT	56:8	56:8	9	"[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n"
FIELD	56:8	56:8	10	"[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n"
LEAF_NODE	56:8	56:8	11	"[%3u] c %u/%u b %u/%u (R %u/%d/%u G %u/%d/%u B %u/%d/%u)\n"
LEAF_NODE	57:5	57:5	9	,
ARGUMENT	57:7	57:7	9	R
FIELD	57:7	57:7	10	R
LEAF_NODE	57:7	57:7	11	R
LEAF_NODE	58:5	58:5	9	,
ARGUMENT	58:7	58:16	9	eCodes - preveCodes
FIELD	58:7	58:7	10	eCodes
LEAF_NODE	58:7	58:7	11	eCodes
LEAF_NODE	58:14	58:14	10	-
FIELD	58:16	58:16	10	preveCodes
LEAF_NODE	58:16	58:16	11	preveCodes
LEAF_NODE	58:26	58:26	9	,
ARGUMENT	58:28	58:28	9	eCodes
FIELD	58:28	58:28	10	eCodes
LEAF_NODE	58:28	58:28	11	eCodes
LEAF_NODE	59:5	59:5	9	,
ARGUMENT	59:7	59:15	9	eBits - preveBits
FIELD	59:7	59:7	10	eBits
LEAF_NODE	59:7	59:7	11	eBits
LEAF_NODE	59:13	59:13	10	-
FIELD	59:15	59:15	10	preveBits
LEAF_NODE	59:15	59:15	11	preveBits
LEAF_NODE	59:24	59:24	9	,
ARGUMENT	59:26	59:26	9	eBits
FIELD	59:26	59:26	10	eBits
LEAF_NODE	59:26	59:26	11	eBits
LEAF_NODE	60:5	60:5	9	,
ARGUMENT	60:7	60:7	9	abs ( AbseRtotal - preveRtotal )
FUNCTION_CALL	60:7	60:35	10	abs ( AbseRtotal - preveRtotal )
CALLEE	60:7	60:7	11	abs
LEAF_NODE	60:7	60:7	12	abs
LEAF_NODE	60:10	60:10	11	(
ARGUMENT	60:11	60:24	11	AbseRtotal - preveRtotal
FIELD	60:11	60:11	12	AbseRtotal
LEAF_NODE	60:11	60:11	13	AbseRtotal
LEAF_NODE	60:22	60:22	12	-
FIELD	60:24	60:24	12	preveRtotal
LEAF_NODE	60:24	60:24	13	preveRtotal
LEAF_NODE	60:35	60:35	11	)
LEAF_NODE	60:36	60:36	9	,
ARGUMENT	60:38	60:38	9	eRtotal
FIELD	60:38	60:38	10	eRtotal
LEAF_NODE	60:38	60:38	11	eRtotal
LEAF_NODE	60:46	60:46	9	,
ARGUMENT	60:48	60:48	9	AbseRtotal
FIELD	60:48	60:48	10	AbseRtotal
LEAF_NODE	60:48	60:48	11	AbseRtotal
LEAF_NODE	61:5	61:5	9	,
ARGUMENT	61:7	61:7	9	abs ( AbseGtotal - preveGtotal )
FUNCTION_CALL	61:7	61:35	10	abs ( AbseGtotal - preveGtotal )
CALLEE	61:7	61:7	11	abs
LEAF_NODE	61:7	61:7	12	abs
LEAF_NODE	61:10	61:10	11	(
ARGUMENT	61:11	61:24	11	AbseGtotal - preveGtotal
FIELD	61:11	61:11	12	AbseGtotal
LEAF_NODE	61:11	61:11	13	AbseGtotal
LEAF_NODE	61:22	61:22	12	-
FIELD	61:24	61:24	12	preveGtotal
LEAF_NODE	61:24	61:24	13	preveGtotal
LEAF_NODE	61:35	61:35	11	)
LEAF_NODE	61:36	61:36	9	,
ARGUMENT	61:38	61:38	9	eGtotal
FIELD	61:38	61:38	10	eGtotal
LEAF_NODE	61:38	61:38	11	eGtotal
LEAF_NODE	61:46	61:46	9	,
ARGUMENT	61:48	61:48	9	AbseGtotal
FIELD	61:48	61:48	10	AbseGtotal
LEAF_NODE	61:48	61:48	11	AbseGtotal
LEAF_NODE	62:5	62:5	9	,
ARGUMENT	62:7	62:7	9	abs ( AbseBtotal - preveBtotal )
FUNCTION_CALL	62:7	62:35	10	abs ( AbseBtotal - preveBtotal )
CALLEE	62:7	62:7	11	abs
LEAF_NODE	62:7	62:7	12	abs
LEAF_NODE	62:10	62:10	11	(
ARGUMENT	62:11	62:24	11	AbseBtotal - preveBtotal
FIELD	62:11	62:11	12	AbseBtotal
LEAF_NODE	62:11	62:11	13	AbseBtotal
LEAF_NODE	62:22	62:22	12	-
FIELD	62:24	62:24	12	preveBtotal
LEAF_NODE	62:24	62:24	13	preveBtotal
LEAF_NODE	62:35	62:35	11	)
LEAF_NODE	62:36	62:36	9	,
ARGUMENT	62:38	62:38	9	eBtotal
FIELD	62:38	62:38	10	eBtotal
LEAF_NODE	62:38	62:38	11	eBtotal
LEAF_NODE	62:46	62:46	9	,
ARGUMENT	62:48	62:48	9	AbseBtotal
FIELD	62:48	62:48	10	AbseBtotal
LEAF_NODE	62:48	62:48	11	AbseBtotal
LEAF_NODE	63:1	63:1	9	)
LEAF_NODE	63:2	63:2	7	;
EXPR_STATEMENT	64:1	64:25	6	preveRtotal = AbseRtotal ;
EXPR	64:1	64:1	7	preveRtotal = AbseRtotal
ASSIGN	64:1	64:15	8	preveRtotal = AbseRtotal
LVAL	64:1	64:1	9	preveRtotal
FIELD	64:1	64:1	10	preveRtotal
LEAF_NODE	64:1	64:1	11	preveRtotal
ASSIGN_OP	64:13	64:13	9	=
LEAF_NODE	64:13	64:13	10	=
RVAL	64:15	64:15	9	AbseRtotal
FIELD	64:15	64:15	10	AbseRtotal
LEAF_NODE	64:15	64:15	11	AbseRtotal
LEAF_NODE	64:25	64:25	7	;
EXPR_STATEMENT	65:1	65:25	6	preveGtotal = AbseGtotal ;
EXPR	65:1	65:1	7	preveGtotal = AbseGtotal
ASSIGN	65:1	65:15	8	preveGtotal = AbseGtotal
LVAL	65:1	65:1	9	preveGtotal
FIELD	65:1	65:1	10	preveGtotal
LEAF_NODE	65:1	65:1	11	preveGtotal
ASSIGN_OP	65:13	65:13	9	=
LEAF_NODE	65:13	65:13	10	=
RVAL	65:15	65:15	9	AbseGtotal
FIELD	65:15	65:15	10	AbseGtotal
LEAF_NODE	65:15	65:15	11	AbseGtotal
LEAF_NODE	65:25	65:25	7	;
EXPR_STATEMENT	66:1	66:25	6	preveBtotal = AbseBtotal ;
EXPR	66:1	66:1	7	preveBtotal = AbseBtotal
ASSIGN	66:1	66:15	8	preveBtotal = AbseBtotal
LVAL	66:1	66:1	9	preveBtotal
FIELD	66:1	66:1	10	preveBtotal
LEAF_NODE	66:1	66:1	11	preveBtotal
ASSIGN_OP	66:13	66:13	9	=
LEAF_NODE	66:13	66:13	10	=
RVAL	66:15	66:15	9	AbseBtotal
FIELD	66:15	66:15	10	AbseBtotal
LEAF_NODE	66:15	66:15	11	AbseBtotal
LEAF_NODE	66:25	66:25	7	;
EXPR_STATEMENT	67:1	67:20	6	preveCodes = eCodes ;
EXPR	67:1	67:1	7	preveCodes = eCodes
ASSIGN	67:1	67:14	8	preveCodes = eCodes
LVAL	67:1	67:1	9	preveCodes
FIELD	67:1	67:1	10	preveCodes
LEAF_NODE	67:1	67:1	11	preveCodes
ASSIGN_OP	67:12	67:12	9	=
LEAF_NODE	67:12	67:12	10	=
RVAL	67:14	67:14	9	eCodes
FIELD	67:14	67:14	10	eCodes
LEAF_NODE	67:14	67:14	11	eCodes
LEAF_NODE	67:20	67:20	7	;
EXPR_STATEMENT	68:1	68:18	6	preveBits = eBits ;
EXPR	68:1	68:1	7	preveBits = eBits
ASSIGN	68:1	68:13	8	preveBits = eBits
LVAL	68:1	68:1	9	preveBits
FIELD	68:1	68:1	10	preveBits
LEAF_NODE	68:1	68:1	11	preveBits
ASSIGN_OP	68:11	68:11	9	=
LEAF_NODE	68:11	68:11	10	=
RVAL	68:13	68:13	9	eBits
FIELD	68:13	68:13	10	eBits
LEAF_NODE	68:13	68:13	11	eBits
LEAF_NODE	68:18	68:18	7	;
LEAF_NODE	69:4	69:4	5	}
LEAF_NODE	70:4	70:4	3	printf
LEAF_NODE	70:10	70:10	3	(
LEAF_NODE	70:11	70:11	3	"%u total codes\n"
LEAF_NODE	70:29	70:29	3	,
LEAF_NODE	70:31	70:31	3	256
LEAF_NODE	70:34	70:34	3	*
LEAF_NODE	70:35	70:35	3	256
LEAF_NODE	70:38	70:38	3	*
LEAF_NODE	70:39	70:39	3	256
LEAF_NODE	70:42	70:42	3	)
LEAF_NODE	70:43	70:43	3	;
EXPR_STATEMENT	71:4	77:5	3	printf ( "total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n" , eCodes , eBits , eRtotal , AbseRtotal , eGtotal , AbseGtotal , eBtotal , AbseBtotal ) ;
EXPR	71:4	71:4	4	printf ( "total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n" , eCodes , eBits , eRtotal , AbseRtotal , eGtotal , AbseGtotal , eBtotal , AbseBtotal )
FUNCTION_CALL	71:4	77:4	5	printf ( "total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n" , eCodes , eBits , eRtotal , AbseRtotal , eGtotal , AbseGtotal , eBtotal , AbseBtotal )
CALLEE	71:4	71:4	6	printf
LEAF_NODE	71:4	71:4	7	printf
LEAF_NODE	71:10	71:10	6	(
ARGUMENT	71:11	71:11	6	"total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n"
FIELD	71:11	71:11	7	"total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n"
LEAF_NODE	71:11	71:11	8	"total error: %u codes %u bits (R %d/%u G %d/%u B %d/%u)\n"
LEAF_NODE	72:1	72:1	6	,
ARGUMENT	72:3	72:3	6	eCodes
FIELD	72:3	72:3	7	eCodes
LEAF_NODE	72:3	72:3	8	eCodes
LEAF_NODE	73:1	73:1	6	,
ARGUMENT	73:3	73:3	6	eBits
FIELD	73:3	73:3	7	eBits
LEAF_NODE	73:3	73:3	8	eBits
LEAF_NODE	74:1	74:1	6	,
ARGUMENT	74:3	74:3	6	eRtotal
FIELD	74:3	74:3	7	eRtotal
LEAF_NODE	74:3	74:3	8	eRtotal
LEAF_NODE	74:11	74:11	6	,
ARGUMENT	74:13	74:13	6	AbseRtotal
FIELD	74:13	74:13	7	AbseRtotal
LEAF_NODE	74:13	74:13	8	AbseRtotal
LEAF_NODE	75:1	75:1	6	,
ARGUMENT	75:3	75:3	6	eGtotal
FIELD	75:3	75:3	7	eGtotal
LEAF_NODE	75:3	75:3	8	eGtotal
LEAF_NODE	75:11	75:11	6	,
ARGUMENT	75:13	75:13	6	AbseGtotal
FIELD	75:13	75:13	7	AbseGtotal
LEAF_NODE	75:13	75:13	8	AbseGtotal
LEAF_NODE	76:1	76:1	6	,
ARGUMENT	76:3	76:3	6	eBtotal
FIELD	76:3	76:3	7	eBtotal
LEAF_NODE	76:3	76:3	8	eBtotal
LEAF_NODE	76:11	76:11	6	,
ARGUMENT	76:13	76:13	6	AbseBtotal
FIELD	76:13	76:13	7	AbseBtotal
LEAF_NODE	76:13	76:13	8	AbseBtotal
LEAF_NODE	77:4	77:4	6	)
LEAF_NODE	77:5	77:5	4	;
JUMP_STATEMENT	78:4	78:14	3	return ( 0 ) ;
KEYWORD	78:4	78:4	4	return
LEAF_NODE	78:4	78:4	5	return
DESTINATION	78:11	78:11	4	( 0 )
EXPR	78:11	78:13	5	( 0 )
LEAF_NODE	78:11	78:11	6	(
FIELD	78:12	78:12	6	0
LEAF_NODE	78:12	78:12	7	0
LEAF_NODE	78:13	78:13	6	)
LEAF_NODE	78:14	78:14	4	;
LEAF_NODE	79:0	79:0	2	}
SIMPLE_DECL	81:0	81:14	1	float * lumaRed ;
VAR_DECL	81:0	81:7	2	float * lumaRed
TYPE	81:0	81:6	3	float *
TYPE_NAME	81:0	81:0	4	float
LEAF_NODE	81:0	81:0	5	float
POINTER	81:6	81:6	4	*
LEAF_NODE	81:6	81:6	5	*
NAME	81:7	81:7	3	lumaRed
LEAF_NODE	81:7	81:7	4	lumaRed
LEAF_NODE	81:14	81:14	2	;
SIMPLE_DECL	82:0	82:16	1	float * lumaGreen ;
VAR_DECL	82:0	82:7	2	float * lumaGreen
TYPE	82:0	82:6	3	float *
TYPE_NAME	82:0	82:0	4	float
LEAF_NODE	82:0	82:0	5	float
POINTER	82:6	82:6	4	*
LEAF_NODE	82:6	82:6	5	*
NAME	82:7	82:7	3	lumaGreen
LEAF_NODE	82:7	82:7	4	lumaGreen
LEAF_NODE	82:16	82:16	2	;
SIMPLE_DECL	83:0	83:15	1	float * lumaBlue ;
VAR_DECL	83:0	83:7	2	float * lumaBlue
TYPE	83:0	83:6	3	float *
TYPE_NAME	83:0	83:0	4	float
LEAF_NODE	83:0	83:0	5	float
POINTER	83:6	83:6	4	*
LEAF_NODE	83:6	83:6	5	*
NAME	83:7	83:7	3	lumaBlue
LEAF_NODE	83:7	83:7	4	lumaBlue
LEAF_NODE	83:15	83:15	2	;
FUNCTION_DEF	85:0	93:0	1	
RETURN_TYPE	85:0	85:12	2	static float *
LEAF_NODE	85:0	85:0	3	static
TYPE_NAME	85:7	85:7	3	float
LEAF_NODE	85:7	85:7	4	float
LEAF_NODE	85:12	85:12	3	*
FUNCTION_NAME	86:0	86:0	2	setupLuma
LEAF_NODE	86:0	86:0	3	setupLuma
PARAMETER_LIST	86:9	86:17	2	( float c )
LEAF_NODE	86:9	86:9	3	(
PARAMETER_DECL	86:10	86:16	3	float c
TYPE	86:10	86:10	4	float
TYPE_NAME	86:10	86:10	5	float
LEAF_NODE	86:10	86:10	6	float
NAME	86:16	86:16	4	c
LEAF_NODE	86:16	86:16	5	c
LEAF_NODE	86:17	86:17	3	)
LEAF_NODE	87:0	87:0	2	{
STATEMENTS	88:4	92:14	2	
SIMPLE_DECL	88:4	88:57	3	float * v ; v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) ) ;
VAR_DECL	88:4	88:11	4	float * v ; v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
TYPE	88:4	88:10	5	float *
TYPE_NAME	88:4	88:4	6	float
LEAF_NODE	88:4	88:4	7	float
POINTER	88:10	88:10	6	*
LEAF_NODE	88:10	88:10	7	*
NAME	88:11	88:11	5	v
LEAF_NODE	88:11	88:11	6	v
LEAF_NODE	0:0	0:0	5	;
INIT	88:11	88:11	5	v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
ASSIGN	88:11	88:15	6	v = ( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
LVAL	88:11	88:11	7	v
NAME	88:11	88:11	8	v
LEAF_NODE	88:11	88:11	9	v
ASSIGN_OP	88:13	88:13	7	=
LEAF_NODE	88:13	88:13	8	=
RVAL	88:15	88:24	7	( float * ) _TIFFmalloc ( 256 * sizeof ( float ) )
LEAF_NODE	88:15	88:15	8	(
TYPE_NAME	88:16	88:16	8	float
LEAF_NODE	88:16	88:16	9	float
LEAF_NODE	88:22	88:22	8	*
LEAF_NODE	88:23	88:23	8	)
FUNCTION_CALL	88:24	88:56	8	_TIFFmalloc ( 256 * sizeof ( float ) )
CALLEE	88:24	88:24	9	_TIFFmalloc
LEAF_NODE	88:24	88:24	10	_TIFFmalloc
LEAF_NODE	88:35	88:35	9	(
ARGUMENT	88:36	88:42	9	256 * sizeof ( float )
FIELD	88:36	88:36	10	256
LEAF_NODE	88:36	88:36	11	256
LEAF_NODE	88:40	88:40	10	*
FUNCTION_CALL	88:42	88:55	10	sizeof ( float )
CALLEE	88:42	88:42	11	sizeof
LEAF_NODE	88:42	88:42	12	sizeof
LEAF_NODE	88:49	88:49	11	(
ARGUMENT	88:50	88:50	11	float
FIELD	88:50	88:50	12	float
LEAF_NODE	88:50	88:50	13	float
LEAF_NODE	88:55	88:55	11	)
LEAF_NODE	88:56	88:56	9	)
LEAF_NODE	88:57	88:57	4	;
SIMPLE_DECL	89:4	89:9	3	int i ;
VAR_DECL	89:4	89:8	4	int i
TYPE	89:4	89:4	5	int
TYPE_NAME	89:4	89:4	6	int
LEAF_NODE	89:4	89:4	7	int
NAME	89:8	89:8	5	i
LEAF_NODE	89:8	89:8	6	i
LEAF_NODE	89:9	89:9	4	;
ITERATION	90:4	91:1	3	
KEYWORD	90:4	90:4	4	for
LEAF_NODE	90:4	90:4	5	for
LEAF_NODE	90:8	90:8	4	(
FOR_INIT	90:9	90:14	4	i = 0 ;
EXPR	90:9	90:9	5	i = 0
ASSIGN	90:9	90:13	6	i = 0
LVAL	90:9	90:9	7	i
FIELD	90:9	90:9	8	i
LEAF_NODE	90:9	90:9	9	i
ASSIGN_OP	90:11	90:11	7	=
LEAF_NODE	90:11	90:11	8	=
RVAL	90:13	90:13	7	0
FIELD	90:13	90:13	8	0
LEAF_NODE	90:13	90:13	9	0
LEAF_NODE	90:14	90:14	5	;
CONDITION	90:16	90:16	4	i < 256
EXPR	90:16	90:20	5	i < 256
FIELD	90:16	90:16	6	i
LEAF_NODE	90:16	90:16	7	i
REL_OPERATOR	90:18	90:18	6	<
LEAF_NODE	90:18	90:18	7	<
FIELD	90:20	90:20	6	256
LEAF_NODE	90:20	90:20	7	256
LEAF_NODE	90:23	90:23	4	;
FOR_EXPR	90:25	90:25	4	i ++
EXPR	90:25	90:25	5	i ++
FIELD	90:25	90:26	6	i ++
LEAF_NODE	90:25	90:25	7	i
LEAF_NODE	90:26	90:26	7	++
LEAF_NODE	90:28	90:28	4	)
STATEMENTS	91:1	91:1	4	
EXPR_STATEMENT	91:1	91:13	5	v [ i ] = c * i ;
EXPR	91:1	91:1	6	v [ i ] = c * i
ASSIGN	91:1	91:8	7	v [ i ] = c * i
LVAL	91:1	91:1	8	v [ i ]
FIELD	91:1	91:4	9	v [ i ]
LEAF_NODE	91:1	91:1	10	v
LEAF_NODE	91:2	91:2	10	[
EXPR	91:3	91:3	10	i
FIELD	91:3	91:3	11	i
LEAF_NODE	91:3	91:3	12	i
LEAF_NODE	91:4	91:4	10	]
ASSIGN_OP	91:6	91:6	8	=
LEAF_NODE	91:6	91:6	9	=
RVAL	91:8	91:12	8	c * i
FIELD	91:8	91:8	9	c
LEAF_NODE	91:8	91:8	10	c
LEAF_NODE	91:10	91:10	9	*
FIELD	91:12	91:12	9	i
LEAF_NODE	91:12	91:12	10	i
LEAF_NODE	91:13	91:13	6	;
LEAF_NODE	92:4	92:4	3	return
LEAF_NODE	92:11	92:11	3	(
LEAF_NODE	92:12	92:12	3	v
LEAF_NODE	92:13	92:13	3	)
LEAF_NODE	92:14	92:14	3	;
LEAF_NODE	93:0	93:0	2	}
FUNCTION_DEF	95:0	101:0	1	
RETURN_TYPE	95:0	95:7	2	static void
LEAF_NODE	95:0	95:0	3	static
TYPE_NAME	95:7	95:7	3	void
LEAF_NODE	95:7	95:7	4	void
FUNCTION_NAME	96:0	96:0	2	setupLumaTables
LEAF_NODE	96:0	96:0	3	setupLumaTables
PARAMETER_LIST	96:15	96:20	2	( void )
LEAF_NODE	96:15	96:15	3	(
PARAMETER_DECL	96:16	96:16	3	void
LEAF_NODE	96:16	96:16	4	void
LEAF_NODE	96:20	96:20	3	)
LEAF_NODE	97:0	97:0	2	{
STATEMENTS	98:4	100:4	2	
EXPR_STATEMENT	98:4	98:32	3	lumaRed = setupLuma ( LumaRed ) ;
EXPR	98:4	98:4	4	lumaRed = setupLuma ( LumaRed )
ASSIGN	98:4	98:14	5	lumaRed = setupLuma ( LumaRed )
LVAL	98:4	98:4	6	lumaRed
FIELD	98:4	98:4	7	lumaRed
LEAF_NODE	98:4	98:4	8	lumaRed
ASSIGN_OP	98:12	98:12	6	=
LEAF_NODE	98:12	98:12	7	=
RVAL	98:14	98:14	6	setupLuma ( LumaRed )
FUNCTION_CALL	98:14	98:31	7	setupLuma ( LumaRed )
CALLEE	98:14	98:14	8	setupLuma
LEAF_NODE	98:14	98:14	9	setupLuma
LEAF_NODE	98:23	98:23	8	(
ARGUMENT	98:24	98:24	8	LumaRed
FIELD	98:24	98:24	9	LumaRed
LEAF_NODE	98:24	98:24	10	LumaRed
LEAF_NODE	98:31	98:31	8	)
LEAF_NODE	98:32	98:32	4	;
EXPR_STATEMENT	99:4	99:36	3	lumaGreen = setupLuma ( LumaGreen ) ;
EXPR	99:4	99:4	4	lumaGreen = setupLuma ( LumaGreen )
ASSIGN	99:4	99:16	5	lumaGreen = setupLuma ( LumaGreen )
LVAL	99:4	99:4	6	lumaGreen
FIELD	99:4	99:4	7	lumaGreen
LEAF_NODE	99:4	99:4	8	lumaGreen
ASSIGN_OP	99:14	99:14	6	=
LEAF_NODE	99:14	99:14	7	=
RVAL	99:16	99:16	6	setupLuma ( LumaGreen )
FUNCTION_CALL	99:16	99:35	7	setupLuma ( LumaGreen )
CALLEE	99:16	99:16	8	setupLuma
LEAF_NODE	99:16	99:16	9	setupLuma
LEAF_NODE	99:25	99:25	8	(
ARGUMENT	99:26	99:26	8	LumaGreen
FIELD	99:26	99:26	9	LumaGreen
LEAF_NODE	99:26	99:26	10	LumaGreen
LEAF_NODE	99:35	99:35	8	)
LEAF_NODE	99:36	99:36	4	;
EXPR_STATEMENT	100:4	100:34	3	lumaBlue = setupLuma ( LumaBlue ) ;
EXPR	100:4	100:4	4	lumaBlue = setupLuma ( LumaBlue )
ASSIGN	100:4	100:15	5	lumaBlue = setupLuma ( LumaBlue )
LVAL	100:4	100:4	6	lumaBlue
FIELD	100:4	100:4	7	lumaBlue
LEAF_NODE	100:4	100:4	8	lumaBlue
ASSIGN_OP	100:13	100:13	6	=
LEAF_NODE	100:13	100:13	7	=
RVAL	100:15	100:15	6	setupLuma ( LumaBlue )
FUNCTION_CALL	100:15	100:33	7	setupLuma ( LumaBlue )
CALLEE	100:15	100:15	8	setupLuma
LEAF_NODE	100:15	100:15	9	setupLuma
LEAF_NODE	100:24	100:24	8	(
ARGUMENT	100:25	100:25	8	LumaBlue
FIELD	100:25	100:25	9	LumaBlue
LEAF_NODE	100:25	100:25	10	LumaBlue
LEAF_NODE	100:33	100:33	8	)
LEAF_NODE	100:34	100:34	4	;
LEAF_NODE	101:0	101:0	2	}
FUNCTION_DEF	0:0	108:0	1	
LEAF_NODE	0:0	0:0	2	RETURN_TYPE
FUNCTION_NAME	104:0	104:0	2	V2Code
LEAF_NODE	104:0	104:0	3	V2Code
PARAMETER_LIST	104:6	104:58	2	( float f , unsigned long RB , unsigned long RW , int CR )
LEAF_NODE	104:6	104:6	3	(
PARAMETER_DECL	104:7	104:13	3	float f
TYPE	104:7	104:7	4	float
TYPE_NAME	104:7	104:7	5	float
LEAF_NODE	104:7	104:7	6	float
NAME	104:13	104:13	4	f
LEAF_NODE	104:13	104:13	5	f
LEAF_NODE	104:14	104:14	3	,
PARAMETER_DECL	104:16	104:30	3	unsigned long RB
TYPE	104:16	104:16	4	unsigned long
TYPE_NAME	104:16	104:25	5	unsigned long
LEAF_NODE	104:16	104:16	6	unsigned
LEAF_NODE	104:25	104:25	6	long
NAME	104:30	104:30	4	RB
LEAF_NODE	104:30	104:30	5	RB
LEAF_NODE	104:32	104:32	3	,
PARAMETER_DECL	104:34	104:48	3	unsigned long RW
TYPE	104:34	104:34	4	unsigned long
TYPE_NAME	104:34	104:43	5	unsigned long
LEAF_NODE	104:34	104:34	6	unsigned
LEAF_NODE	104:43	104:43	6	long
NAME	104:48	104:48	4	RW
LEAF_NODE	104:48	104:48	5	RW
LEAF_NODE	104:50	104:50	3	,
PARAMETER_DECL	104:52	104:56	3	int CR
TYPE	104:52	104:52	4	int
TYPE_NAME	104:52	104:52	5	int
LEAF_NODE	104:52	104:52	6	int
NAME	104:56	104:56	4	CR
LEAF_NODE	104:56	104:56	5	CR
LEAF_NODE	104:58	104:58	3	)
LEAF_NODE	105:0	105:0	2	{
STATEMENTS	106:4	107:4	2	
SIMPLE_DECL	106:4	106:61	3	unsigned int c ; c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 ) ;
VAR_DECL	106:4	106:17	4	unsigned int c ; c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
TYPE	106:4	106:4	5	unsigned int
TYPE_NAME	106:4	106:13	6	unsigned int
LEAF_NODE	106:4	106:4	7	unsigned
LEAF_NODE	106:13	106:13	7	int
NAME	106:17	106:17	5	c
LEAF_NODE	106:17	106:17	6	c
LEAF_NODE	0:0	0:0	5	;
INIT	106:17	106:17	5	c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
ASSIGN	106:17	106:21	6	c = ( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
LVAL	106:17	106:17	7	c
NAME	106:17	106:17	8	c
LEAF_NODE	106:17	106:17	9	c
ASSIGN_OP	106:19	106:19	7	=
LEAF_NODE	106:19	106:19	8	=
RVAL	106:21	106:60	7	( unsigned int ) ( ( ( ( f ) * ( RW - RB ) / CR ) + RB ) + .5 )
LEAF_NODE	106:21	106:21	8	(
TYPE_NAME	106:22	106:31	8	unsigned int
LEAF_NODE	106:22	106:22	9	unsigned
LEAF_NODE	106:31	106:31	9	int
LEAF_NODE	106:34	106:34	8	)
LEAF_NODE	106:35	106:35	8	(
LEAF_NODE	106:36	106:36	8	(
LEAF_NODE	106:37	106:37	8	(
LEAF_NODE	106:38	106:38	8	(
TYPE_NAME	106:39	106:39	8	f
LEAF_NODE	106:39	106:39	9	f
LEAF_NODE	106:40	106:40	8	)
UNARY_EXPR	106:41	106:48	8	* ( RW - RB )
UNARY_OPERATOR	106:41	106:41	9	*
LEAF_NODE	106:41	106:41	10	*
LEAF_NODE	106:42	106:42	9	(
FIELD	106:43	106:43	9	RW
LEAF_NODE	106:43	106:43	10	RW
LEAF_NODE	106:45	106:45	9	-
FIELD	106:46	106:46	9	RB
LEAF_NODE	106:46	106:46	10	RB
LEAF_NODE	106:48	106:48	9	)
LEAF_NODE	106:49	106:49	8	/
FIELD	106:50	106:50	8	CR
LEAF_NODE	106:50	106:50	9	CR
LEAF_NODE	106:52	106:52	8	)
LEAF_NODE	106:53	106:53	8	+
FIELD	106:54	106:54	8	RB
LEAF_NODE	106:54	106:54	9	RB
LEAF_NODE	106:56	106:56	8	)
LEAF_NODE	106:57	106:57	8	+
FIELD	106:58	106:58	8	.5
LEAF_NODE	106:58	106:58	9	.5
LEAF_NODE	106:60	106:60	8	)
LEAF_NODE	106:61	106:61	4	;
JUMP_STATEMENT	107:4	107:30	3	return ( c > 255 ? 255 : c ) ;
KEYWORD	107:4	107:4	4	return
LEAF_NODE	107:4	107:4	5	return
DESTINATION	107:11	107:11	4	( c > 255 ? 255 : c )
EXPR	107:11	107:29	5	( c > 255 ? 255 : c )
LEAF_NODE	107:11	107:11	6	(
COND_EXPR	107:12	107:28	6	c > 255 ? 255 : c
CONDITION	107:12	107:16	7	c > 255
FIELD	107:12	107:12	8	c
LEAF_NODE	107:12	107:12	9	c
REL_OPERATOR	107:14	107:14	8	>
LEAF_NODE	107:14	107:14	9	>
FIELD	107:16	107:16	8	255
LEAF_NODE	107:16	107:16	9	255
LEAF_NODE	107:20	107:20	7	?
EXPR	107:22	107:22	7	255
FIELD	107:22	107:22	8	255
LEAF_NODE	107:22	107:22	9	255
LEAF_NODE	107:26	107:26	7	:
FIELD	107:28	107:28	7	c
LEAF_NODE	107:28	107:28	8	c
LEAF_NODE	107:29	107:29	6	)
LEAF_NODE	107:30	107:30	4	;
LEAF_NODE	108:0	108:0	2	}
FUNCTION_DEF	115:0	161:0	1	
RETURN_TYPE	115:0	116:0	2	static void
LEAF_NODE	115:0	115:0	3	static
TYPE_NAME	116:0	116:0	3	void
LEAF_NODE	116:0	116:0	4	void
FUNCTION_NAME	117:0	117:0	2	check
LEAF_NODE	117:0	117:0	3	check
PARAMETER_LIST	117:5	117:25	2	( int R , int G , int B )
LEAF_NODE	117:5	117:5	3	(
PARAMETER_DECL	117:6	117:10	3	int R
TYPE	117:6	117:6	4	int
TYPE_NAME	117:6	117:6	5	int
LEAF_NODE	117:6	117:6	6	int
NAME	117:10	117:10	4	R
LEAF_NODE	117:10	117:10	5	R
LEAF_NODE	117:11	117:11	3	,
PARAMETER_DECL	117:13	117:17	3	int G
TYPE	117:13	117:13	4	int
TYPE_NAME	117:13	117:13	5	int
LEAF_NODE	117:13	117:13	6	int
NAME	117:17	117:17	4	G
LEAF_NODE	117:17	117:17	5	G
LEAF_NODE	117:18	117:18	3	,
PARAMETER_DECL	117:20	117:24	3	int B
TYPE	117:20	117:20	4	int
TYPE_NAME	117:20	117:20	5	int
LEAF_NODE	117:20	117:20	6	int
NAME	117:24	117:24	4	B
LEAF_NODE	117:24	117:24	5	B
LEAF_NODE	117:25	117:25	3	)
LEAF_NODE	118:0	118:0	2	{
STATEMENTS	119:4	160:4	2	
SIMPLE_DECL	119:4	119:19	3	float Y , float Cb , float Cr ;
INIT_DECL_LIST	119:4	119:4	4	float Y , float Cb , float Cr
VAR_DECL	119:4	119:10	5	float Y
TYPE	119:4	119:4	6	float
TYPE_NAME	119:4	119:4	7	float
LEAF_NODE	119:4	119:4	8	float
NAME	119:10	119:10	6	Y
LEAF_NODE	119:10	119:10	7	Y
LEAF_NODE	119:11	119:11	5	,
INIT_DECL_LIST	119:4	119:4	5	float Cb , float Cr
VAR_DECL	119:4	119:13	6	float Cb
TYPE	119:4	119:4	7	float
TYPE_NAME	119:4	119:4	8	float
LEAF_NODE	119:4	119:4	9	float
NAME	119:13	119:13	7	Cb
LEAF_NODE	119:13	119:13	8	Cb
LEAF_NODE	119:15	119:15	6	,
VAR_DECL	119:4	119:17	6	float Cr
TYPE	119:4	119:4	7	float
TYPE_NAME	119:4	119:4	8	float
LEAF_NODE	119:4	119:4	9	float
NAME	119:17	119:17	7	Cr
LEAF_NODE	119:17	119:17	8	Cr
LEAF_NODE	119:19	119:19	4	;
SIMPLE_DECL	120:4	120:20	3	int iY , int iCb , int iCr ;
INIT_DECL_LIST	120:4	120:4	4	int iY , int iCb , int iCr
VAR_DECL	120:4	120:8	5	int iY
TYPE	120:4	120:4	6	int
TYPE_NAME	120:4	120:4	7	int
LEAF_NODE	120:4	120:4	8	int
NAME	120:8	120:8	6	iY
LEAF_NODE	120:8	120:8	7	iY
LEAF_NODE	120:10	120:10	5	,
INIT_DECL_LIST	120:4	120:4	5	int iCb , int iCr
VAR_DECL	120:4	120:12	6	int iCb
TYPE	120:4	120:4	7	int
TYPE_NAME	120:4	120:4	8	int
LEAF_NODE	120:4	120:4	9	int
NAME	120:12	120:12	7	iCb
LEAF_NODE	120:12	120:12	8	iCb
LEAF_NODE	120:15	120:15	6	,
VAR_DECL	120:4	120:17	6	int iCr
TYPE	120:4	120:4	7	int
TYPE_NAME	120:4	120:4	8	int
LEAF_NODE	120:4	120:4	9	int
NAME	120:17	120:17	7	iCr
LEAF_NODE	120:17	120:17	8	iCr
LEAF_NODE	120:20	120:20	4	;
SIMPLE_DECL	121:4	121:22	3	float rY , float rCb , float rCr ;
INIT_DECL_LIST	121:4	121:4	4	float rY , float rCb , float rCr
VAR_DECL	121:4	121:10	5	float rY
TYPE	121:4	121:4	6	float
TYPE_NAME	121:4	121:4	7	float
LEAF_NODE	121:4	121:4	8	float
NAME	121:10	121:10	6	rY
LEAF_NODE	121:10	121:10	7	rY
LEAF_NODE	121:12	121:12	5	,
INIT_DECL_LIST	121:4	121:4	5	float rCb , float rCr
VAR_DECL	121:4	121:14	6	float rCb
TYPE	121:4	121:4	7	float
TYPE_NAME	121:4	121:4	8	float
LEAF_NODE	121:4	121:4	9	float
NAME	121:14	121:14	7	rCb
LEAF_NODE	121:14	121:14	8	rCb
LEAF_NODE	121:17	121:17	6	,
VAR_DECL	121:4	121:19	6	float rCr
TYPE	121:4	121:4	7	float
TYPE_NAME	121:4	121:4	8	float
LEAF_NODE	121:4	121:4	9	float
NAME	121:19	121:19	7	rCr
LEAF_NODE	121:19	121:19	8	rCr
LEAF_NODE	121:22	121:22	4	;
SIMPLE_DECL	122:4	122:20	3	float rR , float rG , float rB ;
INIT_DECL_LIST	122:4	122:4	4	float rR , float rG , float rB
VAR_DECL	122:4	122:10	5	float rR
TYPE	122:4	122:4	6	float
TYPE_NAME	122:4	122:4	7	float
LEAF_NODE	122:4	122:4	8	float
NAME	122:10	122:10	6	rR
LEAF_NODE	122:10	122:10	7	rR
LEAF_NODE	122:12	122:12	5	,
INIT_DECL_LIST	122:4	122:4	5	float rG , float rB
VAR_DECL	122:4	122:14	6	float rG
TYPE	122:4	122:4	7	float
TYPE_NAME	122:4	122:4	8	float
LEAF_NODE	122:4	122:4	9	float
NAME	122:14	122:14	7	rG
LEAF_NODE	122:14	122:14	8	rG
LEAF_NODE	122:16	122:16	6	,
VAR_DECL	122:4	122:18	6	float rB
TYPE	122:4	122:4	7	float
TYPE_NAME	122:4	122:4	8	float
LEAF_NODE	122:4	122:4	9	float
NAME	122:18	122:18	7	rB
LEAF_NODE	122:18	122:18	8	rB
LEAF_NODE	122:20	122:20	4	;
SIMPLE_DECL	123:4	123:18	3	int eR , int eG , int eB ;
INIT_DECL_LIST	123:4	123:4	4	int eR , int eG , int eB
VAR_DECL	123:4	123:8	5	int eR
TYPE	123:4	123:4	6	int
TYPE_NAME	123:4	123:4	7	int
LEAF_NODE	123:4	123:4	8	int
NAME	123:8	123:8	6	eR
LEAF_NODE	123:8	123:8	7	eR
LEAF_NODE	123:10	123:10	5	,
INIT_DECL_LIST	123:4	123:4	5	int eG , int eB
VAR_DECL	123:4	123:12	6	int eG
TYPE	123:4	123:4	7	int
TYPE_NAME	123:4	123:4	8	int
LEAF_NODE	123:4	123:4	9	int
NAME	123:12	123:12	7	eG
LEAF_NODE	123:12	123:12	8	eG
LEAF_NODE	123:14	123:14	6	,
VAR_DECL	123:4	123:16	6	int eB
TYPE	123:4	123:4	7	int
TYPE_NAME	123:4	123:4	8	int
LEAF_NODE	123:4	123:4	9	int
NAME	123:16	123:16	7	eB
LEAF_NODE	123:16	123:16	8	eB
LEAF_NODE	123:18	123:18	4	;
EXPR_STATEMENT	125:4	125:47	3	Y = lumaRed [ R ] + lumaGreen [ G ] + lumaBlue [ B ] ;
EXPR	125:4	125:4	4	Y = lumaRed [ R ] + lumaGreen [ G ] + lumaBlue [ B ]
ASSIGN	125:4	125:8	5	Y = lumaRed [ R ] + lumaGreen [ G ] + lumaBlue [ B ]
LVAL	125:4	125:4	6	Y
FIELD	125:4	125:4	7	Y
LEAF_NODE	125:4	125:4	8	Y
ASSIGN_OP	125:6	125:6	6	=
LEAF_NODE	125:6	125:6	7	=
RVAL	125:8	125:36	6	lumaRed [ R ] + lumaGreen [ G ] + lumaBlue [ B ]
FIELD	125:8	125:17	7	lumaRed [ R ]
LEAF_NODE	125:8	125:8	8	lumaRed
LEAF_NODE	125:15	125:15	8	[
EXPR	125:16	125:16	8	R
FIELD	125:16	125:16	9	R
LEAF_NODE	125:16	125:16	10	R
LEAF_NODE	125:17	125:17	8	]
LEAF_NODE	125:19	125:19	7	+
FIELD	125:21	125:32	7	lumaGreen [ G ]
LEAF_NODE	125:21	125:21	8	lumaGreen
LEAF_NODE	125:30	125:30	8	[
EXPR	125:31	125:31	8	G
FIELD	125:31	125:31	9	G
LEAF_NODE	125:31	125:31	10	G
LEAF_NODE	125:32	125:32	8	]
LEAF_NODE	125:34	125:34	7	+
FIELD	125:36	125:46	7	lumaBlue [ B ]
LEAF_NODE	125:36	125:36	8	lumaBlue
LEAF_NODE	125:44	125:44	8	[
EXPR	125:45	125:45	8	B
FIELD	125:45	125:45	9	B
LEAF_NODE	125:45	125:45	10	B
LEAF_NODE	125:46	125:46	8	]
LEAF_NODE	125:47	125:47	4	;
EXPR_STATEMENT	126:4	126:19	3	Cb = ( B - Y ) * D2 ;
EXPR	126:4	126:4	4	Cb = ( B - Y ) * D2
ASSIGN	126:4	126:9	5	Cb = ( B - Y ) * D2
LVAL	126:4	126:4	6	Cb
FIELD	126:4	126:4	7	Cb
LEAF_NODE	126:4	126:4	8	Cb
ASSIGN_OP	126:7	126:7	6	=
LEAF_NODE	126:7	126:7	7	=
RVAL	126:9	126:17	6	( B - Y ) * D2
LEAF_NODE	126:9	126:9	7	(
FIELD	126:10	126:10	7	B
LEAF_NODE	126:10	126:10	8	B
LEAF_NODE	126:12	126:12	7	-
FIELD	126:14	126:14	7	Y
LEAF_NODE	126:14	126:14	8	Y
LEAF_NODE	126:15	126:15	7	)
LEAF_NODE	126:16	126:16	7	*
FIELD	126:17	126:17	7	D2
LEAF_NODE	126:17	126:17	8	D2
LEAF_NODE	126:19	126:19	4	;
EXPR_STATEMENT	127:4	127:19	3	Cr = ( R - Y ) * D1 ;
EXPR	127:4	127:4	4	Cr = ( R - Y ) * D1
ASSIGN	127:4	127:9	5	Cr = ( R - Y ) * D1
LVAL	127:4	127:4	6	Cr
FIELD	127:4	127:4	7	Cr
LEAF_NODE	127:4	127:4	8	Cr
ASSIGN_OP	127:7	127:7	6	=
LEAF_NODE	127:7	127:7	7	=
RVAL	127:9	127:17	6	( R - Y ) * D1
LEAF_NODE	127:9	127:9	7	(
FIELD	127:10	127:10	7	R
LEAF_NODE	127:10	127:10	8	R
LEAF_NODE	127:12	127:12	7	-
FIELD	127:14	127:14	7	Y
LEAF_NODE	127:14	127:14	8	Y
LEAF_NODE	127:15	127:15	7	)
LEAF_NODE	127:16	127:16	7	*
FIELD	127:17	127:17	7	D1
LEAF_NODE	127:17	127:17	8	D1
LEAF_NODE	127:19	127:19	4	;
EXPR_STATEMENT	128:4	128:59	3	iY = V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) ;
EXPR	128:4	128:4	4	iY = V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
ASSIGN	128:4	128:9	5	iY = V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
LVAL	128:4	128:4	6	iY
FIELD	128:4	128:4	7	iY
LEAF_NODE	128:4	128:4	8	iY
ASSIGN_OP	128:7	128:7	6	=
LEAF_NODE	128:7	128:7	7	=
RVAL	128:9	128:9	6	V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
FUNCTION_CALL	128:9	128:58	7	V2Code ( Y , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
CALLEE	128:9	128:9	8	V2Code
LEAF_NODE	128:9	128:9	9	V2Code
LEAF_NODE	128:15	128:15	8	(
ARGUMENT	128:16	128:16	8	Y
FIELD	128:16	128:16	9	Y
LEAF_NODE	128:16	128:16	10	Y
LEAF_NODE	128:17	128:17	8	,
ARGUMENT	128:19	128:19	8	refBlackWhite [ 0 ]
FIELD	128:19	128:34	9	refBlackWhite [ 0 ]
LEAF_NODE	128:19	128:19	10	refBlackWhite
LEAF_NODE	128:32	128:32	10	[
EXPR	128:33	128:33	10	0
FIELD	128:33	128:33	11	0
LEAF_NODE	128:33	128:33	12	0
LEAF_NODE	128:34	128:34	10	]
LEAF_NODE	128:35	128:35	8	,
ARGUMENT	128:37	128:37	8	refBlackWhite [ 1 ]
FIELD	128:37	128:52	9	refBlackWhite [ 1 ]
LEAF_NODE	128:37	128:37	10	refBlackWhite
LEAF_NODE	128:50	128:50	10	[
EXPR	128:51	128:51	10	1
FIELD	128:51	128:51	11	1
LEAF_NODE	128:51	128:51	12	1
LEAF_NODE	128:52	128:52	10	]
LEAF_NODE	128:53	128:53	8	,
ARGUMENT	128:55	128:55	8	255
FIELD	128:55	128:55	9	255
LEAF_NODE	128:55	128:55	10	255
LEAF_NODE	128:58	128:58	8	)
LEAF_NODE	128:59	128:59	4	;
EXPR_STATEMENT	129:4	129:61	3	iCb = V2Code ( Cb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 ) ;
EXPR	129:4	129:4	4	iCb = V2Code ( Cb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
ASSIGN	129:4	129:10	5	iCb = V2Code ( Cb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
LVAL	129:4	129:4	6	iCb
FIELD	129:4	129:4	7	iCb
LEAF_NODE	129:4	129:4	8	iCb
ASSIGN_OP	129:8	129:8	6	=
LEAF_NODE	129:8	129:8	7	=
RVAL	129:10	129:10	6	V2Code ( Cb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
FUNCTION_CALL	129:10	129:60	7	V2Code ( Cb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
CALLEE	129:10	129:10	8	V2Code
LEAF_NODE	129:10	129:10	9	V2Code
LEAF_NODE	129:16	129:16	8	(
ARGUMENT	129:17	129:17	8	Cb
FIELD	129:17	129:17	9	Cb
LEAF_NODE	129:17	129:17	10	Cb
LEAF_NODE	129:19	129:19	8	,
ARGUMENT	129:21	129:21	8	refBlackWhite [ 2 ]
FIELD	129:21	129:36	9	refBlackWhite [ 2 ]
LEAF_NODE	129:21	129:21	10	refBlackWhite
LEAF_NODE	129:34	129:34	10	[
EXPR	129:35	129:35	10	2
FIELD	129:35	129:35	11	2
LEAF_NODE	129:35	129:35	12	2
LEAF_NODE	129:36	129:36	10	]
LEAF_NODE	129:37	129:37	8	,
ARGUMENT	129:39	129:39	8	refBlackWhite [ 3 ]
FIELD	129:39	129:54	9	refBlackWhite [ 3 ]
LEAF_NODE	129:39	129:39	10	refBlackWhite
LEAF_NODE	129:52	129:52	10	[
EXPR	129:53	129:53	10	3
FIELD	129:53	129:53	11	3
LEAF_NODE	129:53	129:53	12	3
LEAF_NODE	129:54	129:54	10	]
LEAF_NODE	129:55	129:55	8	,
ARGUMENT	129:57	129:57	8	127
FIELD	129:57	129:57	9	127
LEAF_NODE	129:57	129:57	10	127
LEAF_NODE	129:60	129:60	8	)
LEAF_NODE	129:61	129:61	4	;
EXPR_STATEMENT	130:4	130:61	3	iCr = V2Code ( Cr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 ) ;
EXPR	130:4	130:4	4	iCr = V2Code ( Cr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
ASSIGN	130:4	130:10	5	iCr = V2Code ( Cr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
LVAL	130:4	130:4	6	iCr
FIELD	130:4	130:4	7	iCr
LEAF_NODE	130:4	130:4	8	iCr
ASSIGN_OP	130:8	130:8	6	=
LEAF_NODE	130:8	130:8	7	=
RVAL	130:10	130:10	6	V2Code ( Cr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
FUNCTION_CALL	130:10	130:60	7	V2Code ( Cr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
CALLEE	130:10	130:10	8	V2Code
LEAF_NODE	130:10	130:10	9	V2Code
LEAF_NODE	130:16	130:16	8	(
ARGUMENT	130:17	130:17	8	Cr
FIELD	130:17	130:17	9	Cr
LEAF_NODE	130:17	130:17	10	Cr
LEAF_NODE	130:19	130:19	8	,
ARGUMENT	130:21	130:21	8	refBlackWhite [ 4 ]
FIELD	130:21	130:36	9	refBlackWhite [ 4 ]
LEAF_NODE	130:21	130:21	10	refBlackWhite
LEAF_NODE	130:34	130:34	10	[
EXPR	130:35	130:35	10	4
FIELD	130:35	130:35	11	4
LEAF_NODE	130:35	130:35	12	4
LEAF_NODE	130:36	130:36	10	]
LEAF_NODE	130:37	130:37	8	,
ARGUMENT	130:39	130:39	8	refBlackWhite [ 5 ]
FIELD	130:39	130:54	9	refBlackWhite [ 5 ]
LEAF_NODE	130:39	130:39	10	refBlackWhite
LEAF_NODE	130:52	130:52	10	[
EXPR	130:53	130:53	10	5
FIELD	130:53	130:53	11	5
LEAF_NODE	130:53	130:53	12	5
LEAF_NODE	130:54	130:54	10	]
LEAF_NODE	130:55	130:55	8	,
ARGUMENT	130:57	130:57	8	127
FIELD	130:57	130:57	9	127
LEAF_NODE	130:57	130:57	10	127
LEAF_NODE	130:60	130:60	8	)
LEAF_NODE	130:61	130:61	4	;
EXPR_STATEMENT	131:4	131:62	3	rCb = Code2V ( iCb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 ) ;
EXPR	131:4	131:4	4	rCb = Code2V ( iCb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
ASSIGN	131:4	131:10	5	rCb = Code2V ( iCb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
LVAL	131:4	131:4	6	rCb
FIELD	131:4	131:4	7	rCb
LEAF_NODE	131:4	131:4	8	rCb
ASSIGN_OP	131:8	131:8	6	=
LEAF_NODE	131:8	131:8	7	=
RVAL	131:10	131:10	6	Code2V ( iCb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
FUNCTION_CALL	131:10	131:61	7	Code2V ( iCb , refBlackWhite [ 2 ] , refBlackWhite [ 3 ] , 127 )
CALLEE	131:10	131:10	8	Code2V
LEAF_NODE	131:10	131:10	9	Code2V
LEAF_NODE	131:16	131:16	8	(
ARGUMENT	131:17	131:17	8	iCb
FIELD	131:17	131:17	9	iCb
LEAF_NODE	131:17	131:17	10	iCb
LEAF_NODE	131:20	131:20	8	,
ARGUMENT	131:22	131:22	8	refBlackWhite [ 2 ]
FIELD	131:22	131:37	9	refBlackWhite [ 2 ]
LEAF_NODE	131:22	131:22	10	refBlackWhite
LEAF_NODE	131:35	131:35	10	[
EXPR	131:36	131:36	10	2
FIELD	131:36	131:36	11	2
LEAF_NODE	131:36	131:36	12	2
LEAF_NODE	131:37	131:37	10	]
LEAF_NODE	131:38	131:38	8	,
ARGUMENT	131:40	131:40	8	refBlackWhite [ 3 ]
FIELD	131:40	131:55	9	refBlackWhite [ 3 ]
LEAF_NODE	131:40	131:40	10	refBlackWhite
LEAF_NODE	131:53	131:53	10	[
EXPR	131:54	131:54	10	3
FIELD	131:54	131:54	11	3
LEAF_NODE	131:54	131:54	12	3
LEAF_NODE	131:55	131:55	10	]
LEAF_NODE	131:56	131:56	8	,
ARGUMENT	131:58	131:58	8	127
FIELD	131:58	131:58	9	127
LEAF_NODE	131:58	131:58	10	127
LEAF_NODE	131:61	131:61	8	)
LEAF_NODE	131:62	131:62	4	;
EXPR_STATEMENT	132:4	132:62	3	rCr = Code2V ( iCr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 ) ;
EXPR	132:4	132:4	4	rCr = Code2V ( iCr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
ASSIGN	132:4	132:10	5	rCr = Code2V ( iCr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
LVAL	132:4	132:4	6	rCr
FIELD	132:4	132:4	7	rCr
LEAF_NODE	132:4	132:4	8	rCr
ASSIGN_OP	132:8	132:8	6	=
LEAF_NODE	132:8	132:8	7	=
RVAL	132:10	132:10	6	Code2V ( iCr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
FUNCTION_CALL	132:10	132:61	7	Code2V ( iCr , refBlackWhite [ 4 ] , refBlackWhite [ 5 ] , 127 )
CALLEE	132:10	132:10	8	Code2V
LEAF_NODE	132:10	132:10	9	Code2V
LEAF_NODE	132:16	132:16	8	(
ARGUMENT	132:17	132:17	8	iCr
FIELD	132:17	132:17	9	iCr
LEAF_NODE	132:17	132:17	10	iCr
LEAF_NODE	132:20	132:20	8	,
ARGUMENT	132:22	132:22	8	refBlackWhite [ 4 ]
FIELD	132:22	132:37	9	refBlackWhite [ 4 ]
LEAF_NODE	132:22	132:22	10	refBlackWhite
LEAF_NODE	132:35	132:35	10	[
EXPR	132:36	132:36	10	4
FIELD	132:36	132:36	11	4
LEAF_NODE	132:36	132:36	12	4
LEAF_NODE	132:37	132:37	10	]
LEAF_NODE	132:38	132:38	8	,
ARGUMENT	132:40	132:40	8	refBlackWhite [ 5 ]
FIELD	132:40	132:55	9	refBlackWhite [ 5 ]
LEAF_NODE	132:40	132:40	10	refBlackWhite
LEAF_NODE	132:53	132:53	10	[
EXPR	132:54	132:54	10	5
FIELD	132:54	132:54	11	5
LEAF_NODE	132:54	132:54	12	5
LEAF_NODE	132:55	132:55	10	]
LEAF_NODE	132:56	132:56	8	,
ARGUMENT	132:58	132:58	8	127
FIELD	132:58	132:58	9	127
LEAF_NODE	132:58	132:58	10	127
LEAF_NODE	132:61	132:61	8	)
LEAF_NODE	132:62	132:62	4	;
EXPR_STATEMENT	133:4	133:60	3	rY = Code2V ( iY , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 ) ;
EXPR	133:4	133:4	4	rY = Code2V ( iY , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
ASSIGN	133:4	133:9	5	rY = Code2V ( iY , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
LVAL	133:4	133:4	6	rY
FIELD	133:4	133:4	7	rY
LEAF_NODE	133:4	133:4	8	rY
ASSIGN_OP	133:7	133:7	6	=
LEAF_NODE	133:7	133:7	7	=
RVAL	133:9	133:9	6	Code2V ( iY , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
FUNCTION_CALL	133:9	133:59	7	Code2V ( iY , refBlackWhite [ 0 ] , refBlackWhite [ 1 ] , 255 )
CALLEE	133:9	133:9	8	Code2V
LEAF_NODE	133:9	133:9	9	Code2V
LEAF_NODE	133:15	133:15	8	(
ARGUMENT	133:16	133:16	8	iY
FIELD	133:16	133:16	9	iY
LEAF_NODE	133:16	133:16	10	iY
LEAF_NODE	133:18	133:18	8	,
ARGUMENT	133:20	133:20	8	refBlackWhite [ 0 ]
FIELD	133:20	133:35	9	refBlackWhite [ 0 ]
LEAF_NODE	133:20	133:20	10	refBlackWhite
LEAF_NODE	133:33	133:33	10	[
EXPR	133:34	133:34	10	0
FIELD	133:34	133:34	11	0
LEAF_NODE	133:34	133:34	12	0
LEAF_NODE	133:35	133:35	10	]
LEAF_NODE	133:36	133:36	8	,
ARGUMENT	133:38	133:38	8	refBlackWhite [ 1 ]
FIELD	133:38	133:53	9	refBlackWhite [ 1 ]
LEAF_NODE	133:38	133:38	10	refBlackWhite
LEAF_NODE	133:51	133:51	10	[
EXPR	133:52	133:52	10	1
FIELD	133:52	133:52	11	1
LEAF_NODE	133:52	133:52	12	1
LEAF_NODE	133:53	133:53	10	]
LEAF_NODE	133:54	133:54	8	,
ARGUMENT	133:56	133:56	8	255
FIELD	133:56	133:56	9	255
LEAF_NODE	133:56	133:56	10	255
LEAF_NODE	133:59	133:59	8	)
LEAF_NODE	133:60	133:60	4	;
EXPR_STATEMENT	134:4	134:20	3	rR = rY + rCr * D3 ;
EXPR	134:4	134:4	4	rR = rY + rCr * D3
ASSIGN	134:4	134:9	5	rR = rY + rCr * D3
LVAL	134:4	134:4	6	rR
FIELD	134:4	134:4	7	rR
LEAF_NODE	134:4	134:4	8	rR
ASSIGN_OP	134:7	134:7	6	=
LEAF_NODE	134:7	134:7	7	=
RVAL	134:9	134:18	6	rY + rCr * D3
FIELD	134:9	134:9	7	rY
LEAF_NODE	134:9	134:9	8	rY
LEAF_NODE	134:12	134:12	7	+
FIELD	134:14	134:14	7	rCr
LEAF_NODE	134:14	134:14	8	rCr
LEAF_NODE	134:17	134:17	7	*
FIELD	134:18	134:18	7	D3
LEAF_NODE	134:18	134:18	8	D3
LEAF_NODE	134:20	134:20	4	;
EXPR_STATEMENT	135:4	135:20	3	rB = rY + rCb * D4 ;
EXPR	135:4	135:4	4	rB = rY + rCb * D4
ASSIGN	135:4	135:9	5	rB = rY + rCb * D4
LVAL	135:4	135:4	6	rB
FIELD	135:4	135:4	7	rB
LEAF_NODE	135:4	135:4	8	rB
ASSIGN_OP	135:7	135:7	6	=
LEAF_NODE	135:7	135:7	7	=
RVAL	135:9	135:18	6	rY + rCb * D4
FIELD	135:9	135:9	7	rY
LEAF_NODE	135:9	135:9	8	rY
LEAF_NODE	135:12	135:12	7	+
FIELD	135:14	135:14	7	rCb
LEAF_NODE	135:14	135:14	8	rCb
LEAF_NODE	135:17	135:17	7	*
FIELD	135:18	135:18	7	D4
LEAF_NODE	135:18	135:18	8	D4
LEAF_NODE	135:20	135:20	4	;
EXPR_STATEMENT	136:4	136:29	3	rG = rY - rCb * D6 - rCr * D5 ;
EXPR	136:4	136:4	4	rG = rY - rCb * D6 - rCr * D5
ASSIGN	136:4	136:9	5	rG = rY - rCb * D6 - rCr * D5
LVAL	136:4	136:4	6	rG
FIELD	136:4	136:4	7	rG
LEAF_NODE	136:4	136:4	8	rG
ASSIGN_OP	136:7	136:7	6	=
LEAF_NODE	136:7	136:7	7	=
RVAL	136:9	136:27	6	rY - rCb * D6 - rCr * D5
FIELD	136:9	136:9	7	rY
LEAF_NODE	136:9	136:9	8	rY
LEAF_NODE	136:12	136:12	7	-
FIELD	136:14	136:14	7	rCb
LEAF_NODE	136:14	136:14	8	rCb
LEAF_NODE	136:17	136:17	7	*
FIELD	136:18	136:18	7	D6
LEAF_NODE	136:18	136:18	8	D6
LEAF_NODE	136:21	136:21	7	-
FIELD	136:23	136:23	7	rCr
LEAF_NODE	136:23	136:23	8	rCr
LEAF_NODE	136:26	136:26	7	*
FIELD	136:27	136:27	7	D5
LEAF_NODE	136:27	136:27	8	D5
LEAF_NODE	136:29	136:29	4	;
EXPR_STATEMENT	137:4	137:28	3	eR = R - CLAMP ( rR , 0 , 255 ) ;
EXPR	137:4	137:4	4	eR = R - CLAMP ( rR , 0 , 255 )
ASSIGN	137:4	137:9	5	eR = R - CLAMP ( rR , 0 , 255 )
LVAL	137:4	137:4	6	eR
FIELD	137:4	137:4	7	eR
LEAF_NODE	137:4	137:4	8	eR
ASSIGN_OP	137:7	137:7	6	=
LEAF_NODE	137:7	137:7	7	=
RVAL	137:9	137:13	6	R - CLAMP ( rR , 0 , 255 )
FIELD	137:9	137:9	7	R
LEAF_NODE	137:9	137:9	8	R
LEAF_NODE	137:11	137:11	7	-
FUNCTION_CALL	137:13	137:27	7	CLAMP ( rR , 0 , 255 )
CALLEE	137:13	137:13	8	CLAMP
LEAF_NODE	137:13	137:13	9	CLAMP
LEAF_NODE	137:18	137:18	8	(
ARGUMENT	137:19	137:19	8	rR
FIELD	137:19	137:19	9	rR
LEAF_NODE	137:19	137:19	10	rR
LEAF_NODE	137:21	137:21	8	,
ARGUMENT	137:22	137:22	8	0
FIELD	137:22	137:22	9	0
LEAF_NODE	137:22	137:22	10	0
LEAF_NODE	137:23	137:23	8	,
ARGUMENT	137:24	137:24	8	255
FIELD	137:24	137:24	9	255
LEAF_NODE	137:24	137:24	10	255
LEAF_NODE	137:27	137:27	8	)
LEAF_NODE	137:28	137:28	4	;
EXPR_STATEMENT	138:4	138:28	3	eG = G - CLAMP ( rG , 0 , 255 ) ;
EXPR	138:4	138:4	4	eG = G - CLAMP ( rG , 0 , 255 )
ASSIGN	138:4	138:9	5	eG = G - CLAMP ( rG , 0 , 255 )
LVAL	138:4	138:4	6	eG
FIELD	138:4	138:4	7	eG
LEAF_NODE	138:4	138:4	8	eG
ASSIGN_OP	138:7	138:7	6	=
LEAF_NODE	138:7	138:7	7	=
RVAL	138:9	138:13	6	G - CLAMP ( rG , 0 , 255 )
FIELD	138:9	138:9	7	G
LEAF_NODE	138:9	138:9	8	G
LEAF_NODE	138:11	138:11	7	-
FUNCTION_CALL	138:13	138:27	7	CLAMP ( rG , 0 , 255 )
CALLEE	138:13	138:13	8	CLAMP
LEAF_NODE	138:13	138:13	9	CLAMP
LEAF_NODE	138:18	138:18	8	(
ARGUMENT	138:19	138:19	8	rG
FIELD	138:19	138:19	9	rG
LEAF_NODE	138:19	138:19	10	rG
LEAF_NODE	138:21	138:21	8	,
ARGUMENT	138:22	138:22	8	0
FIELD	138:22	138:22	9	0
LEAF_NODE	138:22	138:22	10	0
LEAF_NODE	138:23	138:23	8	,
ARGUMENT	138:24	138:24	8	255
FIELD	138:24	138:24	9	255
LEAF_NODE	138:24	138:24	10	255
LEAF_NODE	138:27	138:27	8	)
LEAF_NODE	138:28	138:28	4	;
EXPR_STATEMENT	139:4	139:28	3	eB = B - CLAMP ( rB , 0 , 255 ) ;
EXPR	139:4	139:4	4	eB = B - CLAMP ( rB , 0 , 255 )
ASSIGN	139:4	139:9	5	eB = B - CLAMP ( rB , 0 , 255 )
LVAL	139:4	139:4	6	eB
FIELD	139:4	139:4	7	eB
LEAF_NODE	139:4	139:4	8	eB
ASSIGN_OP	139:7	139:7	6	=
LEAF_NODE	139:7	139:7	7	=
RVAL	139:9	139:13	6	B - CLAMP ( rB , 0 , 255 )
FIELD	139:9	139:9	7	B
LEAF_NODE	139:9	139:9	8	B
LEAF_NODE	139:11	139:11	7	-
FUNCTION_CALL	139:13	139:27	7	CLAMP ( rB , 0 , 255 )
CALLEE	139:13	139:13	8	CLAMP
LEAF_NODE	139:13	139:13	9	CLAMP
LEAF_NODE	139:18	139:18	8	(
ARGUMENT	139:19	139:19	8	rB
FIELD	139:19	139:19	9	rB
LEAF_NODE	139:19	139:19	10	rB
LEAF_NODE	139:21	139:21	8	,
ARGUMENT	139:22	139:22	8	0
FIELD	139:22	139:22	9	0
LEAF_NODE	139:22	139:22	10	0
LEAF_NODE	139:23	139:23	8	,
ARGUMENT	139:24	139:24	8	255
FIELD	139:24	139:24	9	255
LEAF_NODE	139:24	139:24	10	255
LEAF_NODE	139:27	139:27	8	)
LEAF_NODE	139:28	139:28	4	;
SELECTION	140:4	140:51	3	
KEYWORD	140:4	140:4	4	if
LEAF_NODE	140:4	140:4	5	if
LEAF_NODE	140:7	140:7	4	(
CONDITION	140:8	140:8	4	abs ( eR ) > 1 || abs ( eG ) > 1 || abs ( eB ) > 1
EXPR	140:8	140:8	5	abs ( eR ) > 1 || abs ( eG ) > 1 || abs ( eB ) > 1
OR	140:8	140:23	6	abs ( eR ) > 1 || abs ( eG ) > 1 || abs ( eB ) > 1
EXPR	140:8	140:18	7	abs ( eR ) > 1
FUNCTION_CALL	140:8	140:14	8	abs ( eR )
CALLEE	140:8	140:8	9	abs
LEAF_NODE	140:8	140:8	10	abs
LEAF_NODE	140:11	140:11	9	(
ARGUMENT	140:12	140:12	9	eR
FIELD	140:12	140:12	10	eR
LEAF_NODE	140:12	140:12	11	eR
LEAF_NODE	140:14	140:14	9	)
REL_OPERATOR	140:16	140:16	8	>
LEAF_NODE	140:16	140:16	9	>
FIELD	140:18	140:18	8	1
LEAF_NODE	140:18	140:18	9	1
LEAF_NODE	140:20	140:20	7	||
EXPR	140:23	140:23	7	abs ( eG ) > 1 || abs ( eB ) > 1
OR	140:23	140:38	8	abs ( eG ) > 1 || abs ( eB ) > 1
EXPR	140:23	140:33	9	abs ( eG ) > 1
FUNCTION_CALL	140:23	140:29	10	abs ( eG )
CALLEE	140:23	140:23	11	abs
LEAF_NODE	140:23	140:23	12	abs
LEAF_NODE	140:26	140:26	11	(
ARGUMENT	140:27	140:27	11	eG
FIELD	140:27	140:27	12	eG
LEAF_NODE	140:27	140:27	13	eG
LEAF_NODE	140:29	140:29	11	)
REL_OPERATOR	140:31	140:31	10	>
LEAF_NODE	140:31	140:31	11	>
FIELD	140:33	140:33	10	1
LEAF_NODE	140:33	140:33	11	1
LEAF_NODE	140:35	140:35	9	||
EXPR	140:38	140:48	9	abs ( eB ) > 1
FUNCTION_CALL	140:38	140:44	10	abs ( eB )
CALLEE	140:38	140:38	11	abs
LEAF_NODE	140:38	140:38	12	abs
LEAF_NODE	140:41	140:41	11	(
ARGUMENT	140:42	140:42	11	eB
FIELD	140:42	140:42	12	eB
LEAF_NODE	140:42	140:42	13	eB
LEAF_NODE	140:44	140:44	11	)
REL_OPERATOR	140:46	140:46	10	>
LEAF_NODE	140:46	140:46	11	>
FIELD	140:48	140:48	10	1
LEAF_NODE	140:48	140:48	11	1
LEAF_NODE	140:49	140:49	4	)
STATEMENTS	140:51	151:4	4	
LEAF_NODE	140:51	140:51	5	{
STATEMENTS	141:1	145:1	5	
EXPR_STATEMENT	141:1	141:34	6	printf ( "R %u G %u B %u" , R , G , B ) ;
EXPR	141:1	141:1	7	printf ( "R %u G %u B %u" , R , G , B )
FUNCTION_CALL	141:1	141:33	8	printf ( "R %u G %u B %u" , R , G , B )
CALLEE	141:1	141:1	9	printf
LEAF_NODE	141:1	141:1	10	printf
LEAF_NODE	141:7	141:7	9	(
ARGUMENT	141:8	141:8	9	"R %u G %u B %u"
FIELD	141:8	141:8	10	"R %u G %u B %u"
LEAF_NODE	141:8	141:8	11	"R %u G %u B %u"
LEAF_NODE	141:24	141:24	9	,
ARGUMENT	141:26	141:26	9	R
FIELD	141:26	141:26	10	R
LEAF_NODE	141:26	141:26	11	R
LEAF_NODE	141:27	141:27	9	,
ARGUMENT	141:29	141:29	9	G
FIELD	141:29	141:29	10	G
LEAF_NODE	141:29	141:29	11	G
LEAF_NODE	141:30	141:30	9	,
ARGUMENT	141:32	141:32	9	B
FIELD	141:32	141:32	10	B
LEAF_NODE	141:32	141:32	11	B
LEAF_NODE	141:33	141:33	9	)
LEAF_NODE	141:34	141:34	7	;
EXPR_STATEMENT	142:1	142:39	6	printf ( " Y %g Cb %g Cr %g" , Y , Cb , Cr ) ;
EXPR	142:1	142:1	7	printf ( " Y %g Cb %g Cr %g" , Y , Cb , Cr )
FUNCTION_CALL	142:1	142:38	8	printf ( " Y %g Cb %g Cr %g" , Y , Cb , Cr )
CALLEE	142:1	142:1	9	printf
LEAF_NODE	142:1	142:1	10	printf
LEAF_NODE	142:7	142:7	9	(
ARGUMENT	142:8	142:8	9	" Y %g Cb %g Cr %g"
FIELD	142:8	142:8	10	" Y %g Cb %g Cr %g"
LEAF_NODE	142:8	142:8	11	" Y %g Cb %g Cr %g"
LEAF_NODE	142:27	142:27	9	,
ARGUMENT	142:29	142:29	9	Y
FIELD	142:29	142:29	10	Y
LEAF_NODE	142:29	142:29	11	Y
LEAF_NODE	142:30	142:30	9	,
ARGUMENT	142:32	142:32	9	Cb
FIELD	142:32	142:32	10	Cb
LEAF_NODE	142:32	142:32	11	Cb
LEAF_NODE	142:34	142:34	9	,
ARGUMENT	142:36	142:36	9	Cr
FIELD	142:36	142:36	10	Cr
LEAF_NODE	142:36	142:36	11	Cr
LEAF_NODE	142:38	142:38	9	)
LEAF_NODE	142:39	142:39	7	;
EXPR_STATEMENT	143:1	143:45	6	printf ( " iY %u iCb %u iCr %u" , iY , iCb , iCr ) ;
EXPR	143:1	143:1	7	printf ( " iY %u iCb %u iCr %u" , iY , iCb , iCr )
FUNCTION_CALL	143:1	143:44	8	printf ( " iY %u iCb %u iCr %u" , iY , iCb , iCr )
CALLEE	143:1	143:1	9	printf
LEAF_NODE	143:1	143:1	10	printf
LEAF_NODE	143:7	143:7	9	(
ARGUMENT	143:8	143:8	9	" iY %u iCb %u iCr %u"
FIELD	143:8	143:8	10	" iY %u iCb %u iCr %u"
LEAF_NODE	143:8	143:8	11	" iY %u iCb %u iCr %u"
LEAF_NODE	143:30	143:30	9	,
ARGUMENT	143:32	143:32	9	iY
FIELD	143:32	143:32	10	iY
LEAF_NODE	143:32	143:32	11	iY
LEAF_NODE	143:34	143:34	9	,
ARGUMENT	143:36	143:36	9	iCb
FIELD	143:36	143:36	10	iCb
LEAF_NODE	143:36	143:36	11	iCb
LEAF_NODE	143:39	143:39	9	,
ARGUMENT	143:41	143:41	9	iCr
FIELD	143:41	143:41	10	iCr
LEAF_NODE	143:41	143:41	11	iCr
LEAF_NODE	143:44	143:44	9	)
LEAF_NODE	143:45	143:45	7	;
EXPR_STATEMENT	144:1	144:47	6	printf ( "\n -> Y %g Cb %g Cr %g" , rY , rCb , rCr ) ;
EXPR	144:1	144:1	7	printf ( "\n -> Y %g Cb %g Cr %g" , rY , rCb , rCr )
FUNCTION_CALL	144:1	144:46	8	printf ( "\n -> Y %g Cb %g Cr %g" , rY , rCb , rCr )
CALLEE	144:1	144:1	9	printf
LEAF_NODE	144:1	144:1	10	printf
LEAF_NODE	144:7	144:7	9	(
ARGUMENT	144:8	144:8	9	"\n -> Y %g Cb %g Cr %g"
FIELD	144:8	144:8	10	"\n -> Y %g Cb %g Cr %g"
LEAF_NODE	144:8	144:8	11	"\n -> Y %g Cb %g Cr %g"
LEAF_NODE	144:32	144:32	9	,
ARGUMENT	144:34	144:34	9	rY
FIELD	144:34	144:34	10	rY
LEAF_NODE	144:34	144:34	11	rY
LEAF_NODE	144:36	144:36	9	,
ARGUMENT	144:38	144:38	9	rCb
FIELD	144:38	144:38	10	rCb
LEAF_NODE	144:38	144:38	11	rCb
LEAF_NODE	144:41	144:41	9	,
ARGUMENT	144:43	144:43	9	rCr
FIELD	144:43	144:43	10	rCr
LEAF_NODE	144:43	144:43	11	rCr
LEAF_NODE	144:46	144:46	9	)
LEAF_NODE	144:47	144:47	7	;
EXPR_STATEMENT	145:1	150:2	6	printf ( " R %g (%u) G %g (%u) B %g (%u) E=[%d %d %d])\n" , rR , CLAMP ( rR , 0 , 255 ) , rG , CLAMP ( rG , 0 , 255 ) , rB , CLAMP ( rB , 0 , 255 ) , eR , eG , eB ) ;
EXPR	145:1	145:1	7	printf ( " R %g (%u) G %g (%u) B %g (%u) E=[%d %d %d])\n" , rR , CLAMP ( rR , 0 , 255 ) , rG , CLAMP ( rG , 0 , 255 ) , rB , CLAMP ( rB , 0 , 255 ) , eR , eG , eB )
FUNCTION_CALL	145:1	150:1	8	printf ( " R %g (%u) G %g (%u) B %g (%u) E=[%d %d %d])\n" , rR , CLAMP ( rR , 0 , 255 ) , rG , CLAMP ( rG , 0 , 255 ) , rB , CLAMP ( rB , 0 , 255 ) , eR , eG , eB )
CALLEE	145:1	145:1	9	printf
LEAF_NODE	145:1	145:1	10	printf
LEAF_NODE	145:7	145:7	9	(
ARGUMENT	145:8	145:8	9	" R %g (%u) G %g (%u) B %g (%u) E=[%d %d %d])\n"
FIELD	145:8	145:8	10	" R %g (%u) G %g (%u) B %g (%u) E=[%d %d %d])\n"
LEAF_NODE	145:8	145:8	11	" R %g (%u) G %g (%u) B %g (%u) E=[%d %d %d])\n"
LEAF_NODE	146:5	146:5	9	,
ARGUMENT	146:7	146:7	9	rR
FIELD	146:7	146:7	10	rR
LEAF_NODE	146:7	146:7	11	rR
LEAF_NODE	146:9	146:9	9	,
ARGUMENT	146:11	146:11	9	CLAMP ( rR , 0 , 255 )
FUNCTION_CALL	146:11	146:25	10	CLAMP ( rR , 0 , 255 )
CALLEE	146:11	146:11	11	CLAMP
LEAF_NODE	146:11	146:11	12	CLAMP
LEAF_NODE	146:16	146:16	11	(
ARGUMENT	146:17	146:17	11	rR
FIELD	146:17	146:17	12	rR
LEAF_NODE	146:17	146:17	13	rR
LEAF_NODE	146:19	146:19	11	,
ARGUMENT	146:20	146:20	11	0
FIELD	146:20	146:20	12	0
LEAF_NODE	146:20	146:20	13	0
LEAF_NODE	146:21	146:21	11	,
ARGUMENT	146:22	146:22	11	255
FIELD	146:22	146:22	12	255
LEAF_NODE	146:22	146:22	13	255
LEAF_NODE	146:25	146:25	11	)
LEAF_NODE	147:5	147:5	9	,
ARGUMENT	147:7	147:7	9	rG
FIELD	147:7	147:7	10	rG
LEAF_NODE	147:7	147:7	11	rG
LEAF_NODE	147:9	147:9	9	,
ARGUMENT	147:11	147:11	9	CLAMP ( rG , 0 , 255 )
FUNCTION_CALL	147:11	147:25	10	CLAMP ( rG , 0 , 255 )
CALLEE	147:11	147:11	11	CLAMP
LEAF_NODE	147:11	147:11	12	CLAMP
LEAF_NODE	147:16	147:16	11	(
ARGUMENT	147:17	147:17	11	rG
FIELD	147:17	147:17	12	rG
LEAF_NODE	147:17	147:17	13	rG
LEAF_NODE	147:19	147:19	11	,
ARGUMENT	147:20	147:20	11	0
FIELD	147:20	147:20	12	0
LEAF_NODE	147:20	147:20	13	0
LEAF_NODE	147:21	147:21	11	,
ARGUMENT	147:22	147:22	11	255
FIELD	147:22	147:22	12	255
LEAF_NODE	147:22	147:22	13	255
LEAF_NODE	147:25	147:25	11	)
LEAF_NODE	148:5	148:5	9	,
ARGUMENT	148:7	148:7	9	rB
FIELD	148:7	148:7	10	rB
LEAF_NODE	148:7	148:7	11	rB
LEAF_NODE	148:9	148:9	9	,
ARGUMENT	148:11	148:11	9	CLAMP ( rB , 0 , 255 )
FUNCTION_CALL	148:11	148:25	10	CLAMP ( rB , 0 , 255 )
CALLEE	148:11	148:11	11	CLAMP
LEAF_NODE	148:11	148:11	12	CLAMP
LEAF_NODE	148:16	148:16	11	(
ARGUMENT	148:17	148:17	11	rB
FIELD	148:17	148:17	12	rB
LEAF_NODE	148:17	148:17	13	rB
LEAF_NODE	148:19	148:19	11	,
ARGUMENT	148:20	148:20	11	0
FIELD	148:20	148:20	12	0
LEAF_NODE	148:20	148:20	13	0
LEAF_NODE	148:21	148:21	11	,
ARGUMENT	148:22	148:22	11	255
FIELD	148:22	148:22	12	255
LEAF_NODE	148:22	148:22	13	255
LEAF_NODE	148:25	148:25	11	)
LEAF_NODE	149:5	149:5	9	,
ARGUMENT	149:7	149:7	9	eR
FIELD	149:7	149:7	10	eR
LEAF_NODE	149:7	149:7	11	eR
LEAF_NODE	149:9	149:9	9	,
ARGUMENT	149:11	149:11	9	eG
FIELD	149:11	149:11	10	eG
LEAF_NODE	149:11	149:11	11	eG
LEAF_NODE	149:13	149:13	9	,
ARGUMENT	149:15	149:15	9	eB
FIELD	149:15	149:15	10	eB
LEAF_NODE	149:15	149:15	11	eB
LEAF_NODE	150:1	150:1	9	)
LEAF_NODE	150:2	150:2	7	;
LEAF_NODE	151:4	151:4	5	}
EXPR_STATEMENT	152:4	152:17	3	eRtotal += eR ;
EXPR	152:4	152:4	4	eRtotal += eR
ASSIGN	152:4	152:15	5	eRtotal += eR
LVAL	152:4	152:4	6	eRtotal
FIELD	152:4	152:4	7	eRtotal
LEAF_NODE	152:4	152:4	8	eRtotal
ASSIGN_OP	152:12	152:12	6	+=
LEAF_NODE	152:12	152:12	7	+=
RVAL	152:15	152:15	6	eR
FIELD	152:15	152:15	7	eR
LEAF_NODE	152:15	152:15	8	eR
LEAF_NODE	152:17	152:17	4	;
EXPR_STATEMENT	153:4	153:17	3	eGtotal += eG ;
EXPR	153:4	153:4	4	eGtotal += eG
ASSIGN	153:4	153:15	5	eGtotal += eG
LVAL	153:4	153:4	6	eGtotal
FIELD	153:4	153:4	7	eGtotal
LEAF_NODE	153:4	153:4	8	eGtotal
ASSIGN_OP	153:12	153:12	6	+=
LEAF_NODE	153:12	153:12	7	+=
RVAL	153:15	153:15	6	eG
FIELD	153:15	153:15	7	eG
LEAF_NODE	153:15	153:15	8	eG
LEAF_NODE	153:17	153:17	4	;
EXPR_STATEMENT	154:4	154:17	3	eBtotal += eB ;
EXPR	154:4	154:4	4	eBtotal += eB
ASSIGN	154:4	154:15	5	eBtotal += eB
LVAL	154:4	154:4	6	eBtotal
FIELD	154:4	154:4	7	eBtotal
LEAF_NODE	154:4	154:4	8	eBtotal
ASSIGN_OP	154:12	154:12	6	+=
LEAF_NODE	154:12	154:12	7	+=
RVAL	154:15	154:15	6	eB
FIELD	154:15	154:15	7	eB
LEAF_NODE	154:15	154:15	8	eB
LEAF_NODE	154:17	154:17	4	;
EXPR_STATEMENT	155:4	155:25	3	AbseRtotal += abs ( eR ) ;
EXPR	155:4	155:4	4	AbseRtotal += abs ( eR )
ASSIGN	155:4	155:18	5	AbseRtotal += abs ( eR )
LVAL	155:4	155:4	6	AbseRtotal
FIELD	155:4	155:4	7	AbseRtotal
LEAF_NODE	155:4	155:4	8	AbseRtotal
ASSIGN_OP	155:15	155:15	6	+=
LEAF_NODE	155:15	155:15	7	+=
RVAL	155:18	155:18	6	abs ( eR )
FUNCTION_CALL	155:18	155:24	7	abs ( eR )
CALLEE	155:18	155:18	8	abs
LEAF_NODE	155:18	155:18	9	abs
LEAF_NODE	155:21	155:21	8	(
ARGUMENT	155:22	155:22	8	eR
FIELD	155:22	155:22	9	eR
LEAF_NODE	155:22	155:22	10	eR
LEAF_NODE	155:24	155:24	8	)
LEAF_NODE	155:25	155:25	4	;
EXPR_STATEMENT	156:4	156:25	3	AbseGtotal += abs ( eG ) ;
EXPR	156:4	156:4	4	AbseGtotal += abs ( eG )
ASSIGN	156:4	156:18	5	AbseGtotal += abs ( eG )
LVAL	156:4	156:4	6	AbseGtotal
FIELD	156:4	156:4	7	AbseGtotal
LEAF_NODE	156:4	156:4	8	AbseGtotal
ASSIGN_OP	156:15	156:15	6	+=
LEAF_NODE	156:15	156:15	7	+=
RVAL	156:18	156:18	6	abs ( eG )
FUNCTION_CALL	156:18	156:24	7	abs ( eG )
CALLEE	156:18	156:18	8	abs
LEAF_NODE	156:18	156:18	9	abs
LEAF_NODE	156:21	156:21	8	(
ARGUMENT	156:22	156:22	8	eG
FIELD	156:22	156:22	9	eG
LEAF_NODE	156:22	156:22	10	eG
LEAF_NODE	156:24	156:24	8	)
LEAF_NODE	156:25	156:25	4	;
EXPR_STATEMENT	157:4	157:25	3	AbseBtotal += abs ( eB ) ;
EXPR	157:4	157:4	4	AbseBtotal += abs ( eB )
ASSIGN	157:4	157:18	5	AbseBtotal += abs ( eB )
LVAL	157:4	157:4	6	AbseBtotal
FIELD	157:4	157:4	7	AbseBtotal
LEAF_NODE	157:4	157:4	8	AbseBtotal
ASSIGN_OP	157:15	157:15	6	+=
LEAF_NODE	157:15	157:15	7	+=
RVAL	157:18	157:18	6	abs ( eB )
FUNCTION_CALL	157:18	157:24	7	abs ( eB )
CALLEE	157:18	157:18	8	abs
LEAF_NODE	157:18	157:18	9	abs
LEAF_NODE	157:21	157:21	8	(
ARGUMENT	157:22	157:22	8	eB
FIELD	157:22	157:22	9	eB
LEAF_NODE	157:22	157:22	10	eB
LEAF_NODE	157:24	157:24	8	)
LEAF_NODE	157:25	157:25	4	;
SELECTION	158:4	159:1	3	
KEYWORD	158:4	158:4	4	if
LEAF_NODE	158:4	158:4	5	if
LEAF_NODE	158:7	158:7	4	(
CONDITION	158:8	158:8	4	eR | eG | eB
EXPR	158:8	158:8	5	eR | eG | eB
BIT_OR	158:8	158:13	6	eR | eG | eB
BIT_OR_ELEM	158:8	158:8	7	eR
FIELD	158:8	158:8	8	eR
LEAF_NODE	158:8	158:8	9	eR
LEAF_NODE	158:11	158:11	7	|
BIT_OR_ELEM	158:13	158:13	7	eG | eB
BIT_OR	158:13	158:18	8	eG | eB
BIT_OR_ELEM	158:13	158:13	9	eG
FIELD	158:13	158:13	10	eG
LEAF_NODE	158:13	158:13	11	eG
LEAF_NODE	158:16	158:16	9	|
BIT_OR_ELEM	158:18	158:18	9	eB
FIELD	158:18	158:18	10	eB
LEAF_NODE	158:18	158:18	11	eB
LEAF_NODE	158:20	158:20	4	)
STATEMENTS	159:1	159:1	4	
EXPR_STATEMENT	159:1	159:9	5	eCodes ++ ;
EXPR	159:1	159:1	6	eCodes ++
FIELD	159:1	159:7	7	eCodes ++
LEAF_NODE	159:1	159:1	8	eCodes
LEAF_NODE	159:7	159:7	8	++
LEAF_NODE	159:9	159:9	6	;
EXPR_STATEMENT	160:4	160:40	3	eBits += abs ( eR ) + abs ( eG ) + abs ( eB ) ;
EXPR	160:4	160:4	4	eBits += abs ( eR ) + abs ( eG ) + abs ( eB )
ASSIGN	160:4	160:13	5	eBits += abs ( eR ) + abs ( eG ) + abs ( eB )
LVAL	160:4	160:4	6	eBits
FIELD	160:4	160:4	7	eBits
LEAF_NODE	160:4	160:4	8	eBits
ASSIGN_OP	160:10	160:10	6	+=
LEAF_NODE	160:10	160:10	7	+=
RVAL	160:13	160:33	6	abs ( eR ) + abs ( eG ) + abs ( eB )
FUNCTION_CALL	160:13	160:19	7	abs ( eR )
CALLEE	160:13	160:13	8	abs
LEAF_NODE	160:13	160:13	9	abs
LEAF_NODE	160:16	160:16	8	(
ARGUMENT	160:17	160:17	8	eR
FIELD	160:17	160:17	9	eR
LEAF_NODE	160:17	160:17	10	eR
LEAF_NODE	160:19	160:19	8	)
LEAF_NODE	160:21	160:21	7	+
FUNCTION_CALL	160:23	160:29	7	abs ( eG )
CALLEE	160:23	160:23	8	abs
LEAF_NODE	160:23	160:23	9	abs
LEAF_NODE	160:26	160:26	8	(
ARGUMENT	160:27	160:27	8	eG
FIELD	160:27	160:27	9	eG
LEAF_NODE	160:27	160:27	10	eG
LEAF_NODE	160:29	160:29	8	)
LEAF_NODE	160:31	160:31	7	+
FUNCTION_CALL	160:33	160:39	7	abs ( eB )
CALLEE	160:33	160:33	8	abs
LEAF_NODE	160:33	160:33	9	abs
LEAF_NODE	160:36	160:36	8	(
ARGUMENT	160:37	160:37	8	eB
FIELD	160:37	160:37	9	eB
LEAF_NODE	160:37	160:37	10	eB
LEAF_NODE	160:39	160:39	8	)
LEAF_NODE	160:40	160:40	4	;
LEAF_NODE	161:0	161:0	2	}
