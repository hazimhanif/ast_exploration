SOURCE_FILE	63:7	873:1	0	
SIMPLE_DECL	63:7	68:5	1	union CLASS_NAME BASE_CLASSES { TIFFHeaderClassic classic ; TIFFHeaderBig big ; TIFFHeaderCommon common ; } hdr ;
VAR_DECL	63:7	68:2	2	union CLASS_NAME BASE_CLASSES { TIFFHeaderClassic classic ; TIFFHeaderBig big ; TIFFHeaderCommon common ; } hdr
TYPE	63:7	63:7	3	union CLASS_NAME BASE_CLASSES { TIFFHeaderClassic classic ; TIFFHeaderBig big ; TIFFHeaderCommon common ; }
CLASS_DEF	63:7	68:0	4	union CLASS_NAME BASE_CLASSES { TIFFHeaderClassic classic ; TIFFHeaderBig big ; TIFFHeaderCommon common ; }
LEAF_NODE	63:7	63:7	5	union
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	64:0	64:0	5	{
CLASS_CONTENT	65:1	67:1	5	TIFFHeaderClassic classic ; TIFFHeaderBig big ; TIFFHeaderCommon common ;
SIMPLE_DECL	65:1	65:26	6	TIFFHeaderClassic classic ;
VAR_DECL	65:1	65:19	7	TIFFHeaderClassic classic
TYPE	65:1	65:1	8	TIFFHeaderClassic
TYPE_NAME	65:1	65:1	9	TIFFHeaderClassic
LEAF_NODE	65:1	65:1	10	TIFFHeaderClassic
NAME	65:19	65:19	8	classic
LEAF_NODE	65:19	65:19	9	classic
LEAF_NODE	65:26	65:26	7	;
SIMPLE_DECL	66:1	66:18	6	TIFFHeaderBig big ;
VAR_DECL	66:1	66:15	7	TIFFHeaderBig big
TYPE	66:1	66:1	8	TIFFHeaderBig
TYPE_NAME	66:1	66:1	9	TIFFHeaderBig
LEAF_NODE	66:1	66:1	10	TIFFHeaderBig
NAME	66:15	66:15	8	big
LEAF_NODE	66:15	66:15	9	big
LEAF_NODE	66:18	66:18	7	;
SIMPLE_DECL	67:1	67:24	6	TIFFHeaderCommon common ;
VAR_DECL	67:1	67:18	7	TIFFHeaderCommon common
TYPE	67:1	67:1	8	TIFFHeaderCommon
TYPE_NAME	67:1	67:1	9	TIFFHeaderCommon
LEAF_NODE	67:1	67:1	10	TIFFHeaderCommon
NAME	67:18	67:18	8	common
LEAF_NODE	67:18	67:18	9	common
LEAF_NODE	67:24	67:24	7	;
LEAF_NODE	68:0	68:0	5	}
NAME	68:2	68:2	3	hdr
LEAF_NODE	68:2	68:2	4	hdr
LEAF_NODE	68:5	68:5	2	;
SIMPLE_DECL	69:0	69:13	1	char * appname ;
VAR_DECL	69:0	69:6	2	char * appname
TYPE	69:0	69:4	3	char *
TYPE_NAME	69:0	69:0	4	char
LEAF_NODE	69:0	69:0	5	char
POINTER	69:4	69:4	4	*
LEAF_NODE	69:4	69:4	5	*
NAME	69:6	69:6	3	appname
LEAF_NODE	69:6	69:6	4	appname
LEAF_NODE	69:13	69:13	2	;
SIMPLE_DECL	70:0	70:13	1	char * curfile ;
VAR_DECL	70:0	70:6	2	char * curfile
TYPE	70:0	70:4	3	char *
TYPE_NAME	70:0	70:0	4	char
LEAF_NODE	70:0	70:0	5	char
POINTER	70:4	70:4	4	*
LEAF_NODE	70:4	70:4	5	*
NAME	70:6	70:6	3	curfile
LEAF_NODE	70:6	70:6	4	curfile
LEAF_NODE	70:13	70:13	2	;
SIMPLE_DECL	71:0	71:12	1	int swabflag ;
VAR_DECL	71:0	71:4	2	int swabflag
TYPE	71:0	71:0	3	int
TYPE_NAME	71:0	71:0	4	int
LEAF_NODE	71:0	71:0	5	int
NAME	71:4	71:4	3	swabflag
LEAF_NODE	71:4	71:4	4	swabflag
LEAF_NODE	71:12	71:12	2	;
SIMPLE_DECL	72:0	72:13	1	int bigendian ;
VAR_DECL	72:0	72:4	2	int bigendian
TYPE	72:0	72:0	3	int
TYPE_NAME	72:0	72:0	4	int
LEAF_NODE	72:0	72:0	5	int
NAME	72:4	72:4	3	bigendian
LEAF_NODE	72:4	72:4	4	bigendian
LEAF_NODE	72:13	72:13	2	;
SIMPLE_DECL	73:0	73:11	1	int bigtiff ;
VAR_DECL	73:0	73:4	2	int bigtiff
TYPE	73:0	73:0	3	int
TYPE_NAME	73:0	73:0	4	int
LEAF_NODE	73:0	73:0	5	int
NAME	73:4	73:4	3	bigtiff
LEAF_NODE	73:4	73:4	4	bigtiff
LEAF_NODE	73:11	73:11	2	;
SIMPLE_DECL	74:0	74:20	1	uint32 maxitems ; maxitems = 24 ;
VAR_DECL	74:0	74:7	2	uint32 maxitems ; maxitems = 24
TYPE	74:0	74:0	3	uint32
TYPE_NAME	74:0	74:0	4	uint32
LEAF_NODE	74:0	74:0	5	uint32
NAME	74:7	74:7	3	maxitems
LEAF_NODE	74:7	74:7	4	maxitems
LEAF_NODE	0:0	0:0	3	;
INIT	74:7	74:7	3	maxitems = 24
ASSIGN	74:7	74:18	4	maxitems = 24
LVAL	74:7	74:7	5	maxitems
NAME	74:7	74:7	6	maxitems
LEAF_NODE	74:7	74:7	7	maxitems
ASSIGN_OP	74:16	74:16	5	=
LEAF_NODE	74:16	74:16	6	=
RVAL	74:18	74:18	5	24
FIELD	74:18	74:18	6	24
LEAF_NODE	74:18	74:18	7	24
LEAF_NODE	74:20	74:20	2	;
SIMPLE_DECL	76:0	76:31	1	const char * bytefmt ; bytefmt = "%s%#02x" ;
VAR_DECL	76:0	76:12	2	const char * bytefmt ; bytefmt = "%s%#02x"
TYPE	76:0	76:10	3	const char *
TYPE_NAME	76:0	76:6	4	const char
LEAF_NODE	76:0	76:0	5	const
LEAF_NODE	76:6	76:6	5	char
POINTER	76:10	76:10	4	*
LEAF_NODE	76:10	76:10	5	*
NAME	76:12	76:12	3	bytefmt
LEAF_NODE	76:12	76:12	4	bytefmt
LEAF_NODE	0:0	0:0	3	;
INIT	76:12	76:12	3	bytefmt = "%s%#02x"
ASSIGN	76:12	76:22	4	bytefmt = "%s%#02x"
LVAL	76:12	76:12	5	bytefmt
NAME	76:12	76:12	6	bytefmt
LEAF_NODE	76:12	76:12	7	bytefmt
ASSIGN_OP	76:20	76:20	5	=
LEAF_NODE	76:20	76:20	6	=
RVAL	76:22	76:22	5	"%s%#02x"
FIELD	76:22	76:22	6	"%s%#02x"
LEAF_NODE	76:22	76:22	7	"%s%#02x"
LEAF_NODE	76:31	76:31	2	;
SIMPLE_DECL	77:0	77:29	1	const char * sbytefmt ; sbytefmt = "%s%d" ;
VAR_DECL	77:0	77:12	2	const char * sbytefmt ; sbytefmt = "%s%d"
TYPE	77:0	77:10	3	const char *
TYPE_NAME	77:0	77:6	4	const char
LEAF_NODE	77:0	77:0	5	const
LEAF_NODE	77:6	77:6	5	char
POINTER	77:10	77:10	4	*
LEAF_NODE	77:10	77:10	5	*
NAME	77:12	77:12	3	sbytefmt
LEAF_NODE	77:12	77:12	4	sbytefmt
LEAF_NODE	0:0	0:0	3	;
INIT	77:12	77:12	3	sbytefmt = "%s%d"
ASSIGN	77:12	77:23	4	sbytefmt = "%s%d"
LVAL	77:12	77:12	5	sbytefmt
NAME	77:12	77:12	6	sbytefmt
LEAF_NODE	77:12	77:12	7	sbytefmt
ASSIGN_OP	77:21	77:21	5	=
LEAF_NODE	77:21	77:21	6	=
RVAL	77:23	77:23	5	"%s%d"
FIELD	77:23	77:23	6	"%s%d"
LEAF_NODE	77:23	77:23	7	"%s%d"
LEAF_NODE	77:29	77:29	2	;
SIMPLE_DECL	78:0	78:29	1	const char * shortfmt ; shortfmt = "%s%u" ;
VAR_DECL	78:0	78:12	2	const char * shortfmt ; shortfmt = "%s%u"
TYPE	78:0	78:10	3	const char *
TYPE_NAME	78:0	78:6	4	const char
LEAF_NODE	78:0	78:0	5	const
LEAF_NODE	78:6	78:6	5	char
POINTER	78:10	78:10	4	*
LEAF_NODE	78:10	78:10	5	*
NAME	78:12	78:12	3	shortfmt
LEAF_NODE	78:12	78:12	4	shortfmt
LEAF_NODE	0:0	0:0	3	;
INIT	78:12	78:12	3	shortfmt = "%s%u"
ASSIGN	78:12	78:23	4	shortfmt = "%s%u"
LVAL	78:12	78:12	5	shortfmt
NAME	78:12	78:12	6	shortfmt
LEAF_NODE	78:12	78:12	7	shortfmt
ASSIGN_OP	78:21	78:21	5	=
LEAF_NODE	78:21	78:21	6	=
RVAL	78:23	78:23	5	"%s%u"
FIELD	78:23	78:23	6	"%s%u"
LEAF_NODE	78:23	78:23	7	"%s%u"
LEAF_NODE	78:29	78:29	2	;
SIMPLE_DECL	79:0	79:30	1	const char * sshortfmt ; sshortfmt = "%s%d" ;
VAR_DECL	79:0	79:12	2	const char * sshortfmt ; sshortfmt = "%s%d"
TYPE	79:0	79:10	3	const char *
TYPE_NAME	79:0	79:6	4	const char
LEAF_NODE	79:0	79:0	5	const
LEAF_NODE	79:6	79:6	5	char
POINTER	79:10	79:10	4	*
LEAF_NODE	79:10	79:10	5	*
NAME	79:12	79:12	3	sshortfmt
LEAF_NODE	79:12	79:12	4	sshortfmt
LEAF_NODE	0:0	0:0	3	;
INIT	79:12	79:12	3	sshortfmt = "%s%d"
ASSIGN	79:12	79:24	4	sshortfmt = "%s%d"
LVAL	79:12	79:12	5	sshortfmt
NAME	79:12	79:12	6	sshortfmt
LEAF_NODE	79:12	79:12	7	sshortfmt
ASSIGN_OP	79:22	79:22	5	=
LEAF_NODE	79:22	79:22	6	=
RVAL	79:24	79:24	5	"%s%d"
FIELD	79:24	79:24	6	"%s%d"
LEAF_NODE	79:24	79:24	7	"%s%d"
LEAF_NODE	79:30	79:30	2	;
SIMPLE_DECL	80:0	80:29	1	const char * longfmt ; longfmt = "%s%lu" ;
VAR_DECL	80:0	80:12	2	const char * longfmt ; longfmt = "%s%lu"
TYPE	80:0	80:10	3	const char *
TYPE_NAME	80:0	80:6	4	const char
LEAF_NODE	80:0	80:0	5	const
LEAF_NODE	80:6	80:6	5	char
POINTER	80:10	80:10	4	*
LEAF_NODE	80:10	80:10	5	*
NAME	80:12	80:12	3	longfmt
LEAF_NODE	80:12	80:12	4	longfmt
LEAF_NODE	0:0	0:0	3	;
INIT	80:12	80:12	3	longfmt = "%s%lu"
ASSIGN	80:12	80:22	4	longfmt = "%s%lu"
LVAL	80:12	80:12	5	longfmt
NAME	80:12	80:12	6	longfmt
LEAF_NODE	80:12	80:12	7	longfmt
ASSIGN_OP	80:20	80:20	5	=
LEAF_NODE	80:20	80:20	6	=
RVAL	80:22	80:22	5	"%s%lu"
FIELD	80:22	80:22	6	"%s%lu"
LEAF_NODE	80:22	80:22	7	"%s%lu"
LEAF_NODE	80:29	80:29	2	;
SIMPLE_DECL	81:0	81:30	1	const char * slongfmt ; slongfmt = "%s%ld" ;
VAR_DECL	81:0	81:12	2	const char * slongfmt ; slongfmt = "%s%ld"
TYPE	81:0	81:10	3	const char *
TYPE_NAME	81:0	81:6	4	const char
LEAF_NODE	81:0	81:0	5	const
LEAF_NODE	81:6	81:6	5	char
POINTER	81:10	81:10	4	*
LEAF_NODE	81:10	81:10	5	*
NAME	81:12	81:12	3	slongfmt
LEAF_NODE	81:12	81:12	4	slongfmt
LEAF_NODE	0:0	0:0	3	;
INIT	81:12	81:12	3	slongfmt = "%s%ld"
ASSIGN	81:12	81:23	4	slongfmt = "%s%ld"
LVAL	81:12	81:12	5	slongfmt
NAME	81:12	81:12	6	slongfmt
LEAF_NODE	81:12	81:12	7	slongfmt
ASSIGN_OP	81:21	81:21	5	=
LEAF_NODE	81:21	81:21	6	=
RVAL	81:23	81:23	5	"%s%ld"
FIELD	81:23	81:23	6	"%s%ld"
LEAF_NODE	81:23	81:23	7	"%s%ld"
LEAF_NODE	81:30	81:30	2	;
SIMPLE_DECL	82:0	82:31	1	const char * ifdfmt ; ifdfmt = "%s%#04lx" ;
VAR_DECL	82:0	82:12	2	const char * ifdfmt ; ifdfmt = "%s%#04lx"
TYPE	82:0	82:10	3	const char *
TYPE_NAME	82:0	82:6	4	const char
LEAF_NODE	82:0	82:0	5	const
LEAF_NODE	82:6	82:6	5	char
POINTER	82:10	82:10	4	*
LEAF_NODE	82:10	82:10	5	*
NAME	82:12	82:12	3	ifdfmt
LEAF_NODE	82:12	82:12	4	ifdfmt
LEAF_NODE	0:0	0:0	3	;
INIT	82:12	82:12	3	ifdfmt = "%s%#04lx"
ASSIGN	82:12	82:21	4	ifdfmt = "%s%#04lx"
LVAL	82:12	82:12	5	ifdfmt
NAME	82:12	82:12	6	ifdfmt
LEAF_NODE	82:12	82:12	7	ifdfmt
ASSIGN_OP	82:19	82:19	5	=
LEAF_NODE	82:19	82:19	6	=
RVAL	82:21	82:21	5	"%s%#04lx"
FIELD	82:21	82:21	6	"%s%#04lx"
LEAF_NODE	82:21	82:21	7	"%s%#04lx"
LEAF_NODE	82:31	82:31	2	;
SIMPLE_DECL	84:0	84:32	1	const char * long8fmt ; long8fmt = "%s%I64u" ;
VAR_DECL	84:0	84:12	2	const char * long8fmt ; long8fmt = "%s%I64u"
TYPE	84:0	84:10	3	const char *
TYPE_NAME	84:0	84:6	4	const char
LEAF_NODE	84:0	84:0	5	const
LEAF_NODE	84:6	84:6	5	char
POINTER	84:10	84:10	4	*
LEAF_NODE	84:10	84:10	5	*
NAME	84:12	84:12	3	long8fmt
LEAF_NODE	84:12	84:12	4	long8fmt
LEAF_NODE	0:0	0:0	3	;
INIT	84:12	84:12	3	long8fmt = "%s%I64u"
ASSIGN	84:12	84:23	4	long8fmt = "%s%I64u"
LVAL	84:12	84:12	5	long8fmt
NAME	84:12	84:12	6	long8fmt
LEAF_NODE	84:12	84:12	7	long8fmt
ASSIGN_OP	84:21	84:21	5	=
LEAF_NODE	84:21	84:21	6	=
RVAL	84:23	84:23	5	"%s%I64u"
FIELD	84:23	84:23	6	"%s%I64u"
LEAF_NODE	84:23	84:23	7	"%s%I64u"
LEAF_NODE	84:32	84:32	2	;
SIMPLE_DECL	85:0	85:33	1	const char * slong8fmt ; slong8fmt = "%s%I64d" ;
VAR_DECL	85:0	85:12	2	const char * slong8fmt ; slong8fmt = "%s%I64d"
TYPE	85:0	85:10	3	const char *
TYPE_NAME	85:0	85:6	4	const char
LEAF_NODE	85:0	85:0	5	const
LEAF_NODE	85:6	85:6	5	char
POINTER	85:10	85:10	4	*
LEAF_NODE	85:10	85:10	5	*
NAME	85:12	85:12	3	slong8fmt
LEAF_NODE	85:12	85:12	4	slong8fmt
LEAF_NODE	0:0	0:0	3	;
INIT	85:12	85:12	3	slong8fmt = "%s%I64d"
ASSIGN	85:12	85:24	4	slong8fmt = "%s%I64d"
LVAL	85:12	85:12	5	slong8fmt
NAME	85:12	85:12	6	slong8fmt
LEAF_NODE	85:12	85:12	7	slong8fmt
ASSIGN_OP	85:22	85:22	5	=
LEAF_NODE	85:22	85:22	6	=
RVAL	85:24	85:24	5	"%s%I64d"
FIELD	85:24	85:24	6	"%s%I64d"
LEAF_NODE	85:24	85:24	7	"%s%I64d"
LEAF_NODE	85:33	85:33	2	;
SIMPLE_DECL	86:0	86:34	1	const char * ifd8fmt ; ifd8fmt = "%s%#08I64x" ;
VAR_DECL	86:0	86:12	2	const char * ifd8fmt ; ifd8fmt = "%s%#08I64x"
TYPE	86:0	86:10	3	const char *
TYPE_NAME	86:0	86:6	4	const char
LEAF_NODE	86:0	86:0	5	const
LEAF_NODE	86:6	86:6	5	char
POINTER	86:10	86:10	4	*
LEAF_NODE	86:10	86:10	5	*
NAME	86:12	86:12	3	ifd8fmt
LEAF_NODE	86:12	86:12	4	ifd8fmt
LEAF_NODE	0:0	0:0	3	;
INIT	86:12	86:12	3	ifd8fmt = "%s%#08I64x"
ASSIGN	86:12	86:22	4	ifd8fmt = "%s%#08I64x"
LVAL	86:12	86:12	5	ifd8fmt
NAME	86:12	86:12	6	ifd8fmt
LEAF_NODE	86:12	86:12	7	ifd8fmt
ASSIGN_OP	86:20	86:20	5	=
LEAF_NODE	86:20	86:20	6	=
RVAL	86:22	86:22	5	"%s%#08I64x"
FIELD	86:22	86:22	6	"%s%#08I64x"
LEAF_NODE	86:22	86:22	7	"%s%#08I64x"
LEAF_NODE	86:34	86:34	2	;
SIMPLE_DECL	88:0	88:31	1	const char * long8fmt ; long8fmt = "%s%llu" ;
VAR_DECL	88:0	88:12	2	const char * long8fmt ; long8fmt = "%s%llu"
TYPE	88:0	88:10	3	const char *
TYPE_NAME	88:0	88:6	4	const char
LEAF_NODE	88:0	88:0	5	const
LEAF_NODE	88:6	88:6	5	char
POINTER	88:10	88:10	4	*
LEAF_NODE	88:10	88:10	5	*
NAME	88:12	88:12	3	long8fmt
LEAF_NODE	88:12	88:12	4	long8fmt
LEAF_NODE	0:0	0:0	3	;
INIT	88:12	88:12	3	long8fmt = "%s%llu"
ASSIGN	88:12	88:23	4	long8fmt = "%s%llu"
LVAL	88:12	88:12	5	long8fmt
NAME	88:12	88:12	6	long8fmt
LEAF_NODE	88:12	88:12	7	long8fmt
ASSIGN_OP	88:21	88:21	5	=
LEAF_NODE	88:21	88:21	6	=
RVAL	88:23	88:23	5	"%s%llu"
FIELD	88:23	88:23	6	"%s%llu"
LEAF_NODE	88:23	88:23	7	"%s%llu"
LEAF_NODE	88:31	88:31	2	;
SIMPLE_DECL	89:0	89:32	1	const char * slong8fmt ; slong8fmt = "%s%lld" ;
VAR_DECL	89:0	89:12	2	const char * slong8fmt ; slong8fmt = "%s%lld"
TYPE	89:0	89:10	3	const char *
TYPE_NAME	89:0	89:6	4	const char
LEAF_NODE	89:0	89:0	5	const
LEAF_NODE	89:6	89:6	5	char
POINTER	89:10	89:10	4	*
LEAF_NODE	89:10	89:10	5	*
NAME	89:12	89:12	3	slong8fmt
LEAF_NODE	89:12	89:12	4	slong8fmt
LEAF_NODE	0:0	0:0	3	;
INIT	89:12	89:12	3	slong8fmt = "%s%lld"
ASSIGN	89:12	89:24	4	slong8fmt = "%s%lld"
LVAL	89:12	89:12	5	slong8fmt
NAME	89:12	89:12	6	slong8fmt
LEAF_NODE	89:12	89:12	7	slong8fmt
ASSIGN_OP	89:22	89:22	5	=
LEAF_NODE	89:22	89:22	6	=
RVAL	89:24	89:24	5	"%s%lld"
FIELD	89:24	89:24	6	"%s%lld"
LEAF_NODE	89:24	89:24	7	"%s%lld"
LEAF_NODE	89:32	89:32	2	;
SIMPLE_DECL	90:0	90:33	1	const char * ifd8fmt ; ifd8fmt = "%s%#08llx" ;
VAR_DECL	90:0	90:12	2	const char * ifd8fmt ; ifd8fmt = "%s%#08llx"
TYPE	90:0	90:10	3	const char *
TYPE_NAME	90:0	90:6	4	const char
LEAF_NODE	90:0	90:0	5	const
LEAF_NODE	90:6	90:6	5	char
POINTER	90:10	90:10	4	*
LEAF_NODE	90:10	90:10	5	*
NAME	90:12	90:12	3	ifd8fmt
LEAF_NODE	90:12	90:12	4	ifd8fmt
LEAF_NODE	0:0	0:0	3	;
INIT	90:12	90:12	3	ifd8fmt = "%s%#08llx"
ASSIGN	90:12	90:22	4	ifd8fmt = "%s%#08llx"
LVAL	90:12	90:12	5	ifd8fmt
NAME	90:12	90:12	6	ifd8fmt
LEAF_NODE	90:12	90:12	7	ifd8fmt
ASSIGN_OP	90:20	90:20	5	=
LEAF_NODE	90:20	90:20	6	=
RVAL	90:22	90:22	5	"%s%#08llx"
FIELD	90:22	90:22	6	"%s%#08llx"
LEAF_NODE	90:22	90:22	7	"%s%#08llx"
LEAF_NODE	90:33	90:33	2	;
SIMPLE_DECL	92:0	92:32	1	const char * rationalfmt ; rationalfmt = "%s%g" ;
VAR_DECL	92:0	92:12	2	const char * rationalfmt ; rationalfmt = "%s%g"
TYPE	92:0	92:10	3	const char *
TYPE_NAME	92:0	92:6	4	const char
LEAF_NODE	92:0	92:0	5	const
LEAF_NODE	92:6	92:6	5	char
POINTER	92:10	92:10	4	*
LEAF_NODE	92:10	92:10	5	*
NAME	92:12	92:12	3	rationalfmt
LEAF_NODE	92:12	92:12	4	rationalfmt
LEAF_NODE	0:0	0:0	3	;
INIT	92:12	92:12	3	rationalfmt = "%s%g"
ASSIGN	92:12	92:26	4	rationalfmt = "%s%g"
LVAL	92:12	92:12	5	rationalfmt
NAME	92:12	92:12	6	rationalfmt
LEAF_NODE	92:12	92:12	7	rationalfmt
ASSIGN_OP	92:24	92:24	5	=
LEAF_NODE	92:24	92:24	6	=
RVAL	92:26	92:26	5	"%s%g"
FIELD	92:26	92:26	6	"%s%g"
LEAF_NODE	92:26	92:26	7	"%s%g"
LEAF_NODE	92:32	92:32	2	;
SIMPLE_DECL	93:0	93:33	1	const char * srationalfmt ; srationalfmt = "%s%g" ;
VAR_DECL	93:0	93:12	2	const char * srationalfmt ; srationalfmt = "%s%g"
TYPE	93:0	93:10	3	const char *
TYPE_NAME	93:0	93:6	4	const char
LEAF_NODE	93:0	93:0	5	const
LEAF_NODE	93:6	93:6	5	char
POINTER	93:10	93:10	4	*
LEAF_NODE	93:10	93:10	5	*
NAME	93:12	93:12	3	srationalfmt
LEAF_NODE	93:12	93:12	4	srationalfmt
LEAF_NODE	0:0	0:0	3	;
INIT	93:12	93:12	3	srationalfmt = "%s%g"
ASSIGN	93:12	93:27	4	srationalfmt = "%s%g"
LVAL	93:12	93:12	5	srationalfmt
NAME	93:12	93:12	6	srationalfmt
LEAF_NODE	93:12	93:12	7	srationalfmt
ASSIGN_OP	93:25	93:25	5	=
LEAF_NODE	93:25	93:25	6	=
RVAL	93:27	93:27	5	"%s%g"
FIELD	93:27	93:27	6	"%s%g"
LEAF_NODE	93:27	93:27	7	"%s%g"
LEAF_NODE	93:33	93:33	2	;
SIMPLE_DECL	94:0	94:29	1	const char * floatfmt ; floatfmt = "%s%g" ;
VAR_DECL	94:0	94:12	2	const char * floatfmt ; floatfmt = "%s%g"
TYPE	94:0	94:10	3	const char *
TYPE_NAME	94:0	94:6	4	const char
LEAF_NODE	94:0	94:0	5	const
LEAF_NODE	94:6	94:6	5	char
POINTER	94:10	94:10	4	*
LEAF_NODE	94:10	94:10	5	*
NAME	94:12	94:12	3	floatfmt
LEAF_NODE	94:12	94:12	4	floatfmt
LEAF_NODE	0:0	0:0	3	;
INIT	94:12	94:12	3	floatfmt = "%s%g"
ASSIGN	94:12	94:23	4	floatfmt = "%s%g"
LVAL	94:12	94:12	5	floatfmt
NAME	94:12	94:12	6	floatfmt
LEAF_NODE	94:12	94:12	7	floatfmt
ASSIGN_OP	94:21	94:21	5	=
LEAF_NODE	94:21	94:21	6	=
RVAL	94:23	94:23	5	"%s%g"
FIELD	94:23	94:23	6	"%s%g"
LEAF_NODE	94:23	94:23	7	"%s%g"
LEAF_NODE	94:29	94:29	2	;
SIMPLE_DECL	95:0	95:30	1	const char * doublefmt ; doublefmt = "%s%g" ;
VAR_DECL	95:0	95:12	2	const char * doublefmt ; doublefmt = "%s%g"
TYPE	95:0	95:10	3	const char *
TYPE_NAME	95:0	95:6	4	const char
LEAF_NODE	95:0	95:0	5	const
LEAF_NODE	95:6	95:6	5	char
POINTER	95:10	95:10	4	*
LEAF_NODE	95:10	95:10	5	*
NAME	95:12	95:12	3	doublefmt
LEAF_NODE	95:12	95:12	4	doublefmt
LEAF_NODE	0:0	0:0	3	;
INIT	95:12	95:12	3	doublefmt = "%s%g"
ASSIGN	95:12	95:24	4	doublefmt = "%s%g"
LVAL	95:12	95:12	5	doublefmt
NAME	95:12	95:12	6	doublefmt
LEAF_NODE	95:12	95:12	7	doublefmt
ASSIGN_OP	95:22	95:22	5	=
LEAF_NODE	95:22	95:22	6	=
RVAL	95:24	95:24	5	"%s%g"
FIELD	95:24	95:24	6	"%s%g"
LEAF_NODE	95:24	95:24	7	"%s%g"
LEAF_NODE	95:30	95:30	2	;
SIMPLE_DECL	97:7	97:29	1	void dump ; dump dump ( int , uint64 ) ;
VAR_DECL	97:7	97:12	2	void dump ; dump dump ( int , uint64 )
TYPE	97:7	97:7	3	void
TYPE_NAME	97:7	97:7	4	void
LEAF_NODE	97:7	97:7	5	void
NAME	97:12	97:12	3	dump
LEAF_NODE	97:12	97:12	4	dump
LEAF_NODE	0:0	0:0	3	;
INIT	97:12	97:12	3	dump dump ( int , uint64 )
ASSIGN	97:12	97:16	4	dump dump ( int , uint64 )
LVAL	97:12	97:12	5	dump
NAME	97:12	97:12	6	dump
LEAF_NODE	97:12	97:12	7	dump
ASSIGN_OP	97:12	97:12	5	dump
NAME	97:12	97:12	6	dump
LEAF_NODE	97:12	97:12	7	dump
RVAL	97:16	97:28	5	( int , uint64 )
LEAF_NODE	97:16	97:16	6	(
EXPR	97:17	97:22	6	int , uint64
FIELD	97:17	97:17	7	int
LEAF_NODE	97:17	97:17	8	int
LEAF_NODE	97:20	97:20	7	,
FIELD	97:22	97:22	7	uint64
LEAF_NODE	97:22	97:22	8	uint64
LEAF_NODE	97:28	97:28	6	)
LEAF_NODE	97:29	97:29	2	;
SIMPLE_DECL	100:7	100:17	1	int optind ;
VAR_DECL	100:7	100:11	2	int optind
TYPE	100:7	100:7	3	int
TYPE_NAME	100:7	100:7	4	int
LEAF_NODE	100:7	100:7	5	int
NAME	100:11	100:11	3	optind
LEAF_NODE	100:11	100:11	4	optind
LEAF_NODE	100:17	100:17	2	;
SIMPLE_DECL	101:7	101:19	1	char * optarg ;
VAR_DECL	101:7	101:13	2	char * optarg
TYPE	101:7	101:11	3	char *
TYPE_NAME	101:7	101:7	4	char
LEAF_NODE	101:7	101:7	5	char
POINTER	101:11	101:11	4	*
LEAF_NODE	101:11	101:11	5	*
NAME	101:13	101:13	3	optarg
LEAF_NODE	101:13	101:13	4	optarg
LEAF_NODE	101:19	101:19	2	;
FUNCTION_DEF	104:0	109:0	1	
RETURN_TYPE	104:0	104:0	2	void
TYPE_NAME	104:0	104:0	3	void
LEAF_NODE	104:0	104:0	4	void
FUNCTION_NAME	105:0	105:0	2	usage
LEAF_NODE	105:0	105:0	3	usage
PARAMETER_LIST	105:5	105:6	2	( )
LEAF_NODE	105:5	105:5	3	(
LEAF_NODE	105:6	105:6	3	)
LEAF_NODE	106:0	106:0	2	{
STATEMENTS	107:1	108:1	2	
EXPR_STATEMENT	107:1	107:84	3	fprintf ( stderr , "usage: %s [-h] [-o offset] [-m maxitems] file.tif ...\n" , appname ) ;
EXPR	107:1	107:1	4	fprintf ( stderr , "usage: %s [-h] [-o offset] [-m maxitems] file.tif ...\n" , appname )
FUNCTION_CALL	107:1	107:83	5	fprintf ( stderr , "usage: %s [-h] [-o offset] [-m maxitems] file.tif ...\n" , appname )
CALLEE	107:1	107:1	6	fprintf
LEAF_NODE	107:1	107:1	7	fprintf
LEAF_NODE	107:8	107:8	6	(
ARGUMENT	107:9	107:9	6	stderr
FIELD	107:9	107:9	7	stderr
LEAF_NODE	107:9	107:9	8	stderr
LEAF_NODE	107:15	107:15	6	,
ARGUMENT	107:17	107:17	6	"usage: %s [-h] [-o offset] [-m maxitems] file.tif ...\n"
FIELD	107:17	107:17	7	"usage: %s [-h] [-o offset] [-m maxitems] file.tif ...\n"
LEAF_NODE	107:17	107:17	8	"usage: %s [-h] [-o offset] [-m maxitems] file.tif ...\n"
LEAF_NODE	107:74	107:74	6	,
ARGUMENT	107:76	107:76	6	appname
FIELD	107:76	107:76	7	appname
LEAF_NODE	107:76	107:76	8	appname
LEAF_NODE	107:83	107:83	6	)
LEAF_NODE	107:84	107:84	4	;
EXPR_STATEMENT	108:1	108:9	3	exit ( - 1 ) ;
EXPR	108:1	108:1	4	exit ( - 1 )
FUNCTION_CALL	108:1	108:8	5	exit ( - 1 )
CALLEE	108:1	108:1	6	exit
LEAF_NODE	108:1	108:1	7	exit
LEAF_NODE	108:5	108:5	6	(
ARGUMENT	108:6	108:6	6	- 1
UNARY_EXPR	108:6	108:7	7	- 1
UNARY_OPERATOR	108:6	108:6	8	-
LEAF_NODE	108:6	108:6	9	-
FIELD	108:7	108:7	8	1
LEAF_NODE	108:7	108:7	9	1
LEAF_NODE	108:8	108:8	6	)
LEAF_NODE	108:9	108:9	4	;
LEAF_NODE	109:0	109:0	2	}
FUNCTION_DEF	111:0	156:0	1	
RETURN_TYPE	111:0	111:0	2	int
TYPE_NAME	111:0	111:0	3	int
LEAF_NODE	111:0	111:0	4	int
FUNCTION_NAME	112:0	112:0	2	main
LEAF_NODE	112:0	112:0	3	main
PARAMETER_LIST	112:4	112:27	2	( int argc , char * [ ] argv )
LEAF_NODE	112:4	112:4	3	(
PARAMETER_DECL	112:5	112:9	3	int argc
TYPE	112:5	112:5	4	int
TYPE_NAME	112:5	112:5	5	int
LEAF_NODE	112:5	112:5	6	int
NAME	112:9	112:9	4	argc
LEAF_NODE	112:9	112:9	5	argc
LEAF_NODE	112:13	112:13	3	,
PARAMETER_DECL	112:15	112:21	3	char * [ ] argv
TYPE	112:15	112:25	4	char * [ ]
TYPE_NAME	112:15	112:15	5	char
LEAF_NODE	112:15	112:15	6	char
POINTER	112:19	112:19	5	*
LEAF_NODE	112:19	112:19	6	*
TYPE_SUFFIX	112:25	112:26	5	[ ]
LEAF_NODE	112:25	112:25	6	[
LEAF_NODE	112:26	112:26	6	]
NAME	112:21	112:21	4	argv
LEAF_NODE	112:21	112:21	5	argv
LEAF_NODE	112:27	112:27	3	)
LEAF_NODE	113:0	113:0	2	{
STATEMENTS	114:1	155:1	2	
SIMPLE_DECL	114:1	114:16	3	int one ; one = 1 , int fd ;
INIT_DECL_LIST	114:1	114:1	4	int one ; one = 1 , int fd
VAR_DECL	114:1	114:5	5	int one ; one = 1
TYPE	114:1	114:1	6	int
TYPE_NAME	114:1	114:1	7	int
LEAF_NODE	114:1	114:1	8	int
NAME	114:5	114:5	6	one
LEAF_NODE	114:5	114:5	7	one
LEAF_NODE	0:0	0:0	6	;
INIT	114:5	114:5	6	one = 1
ASSIGN	114:5	114:11	7	one = 1
LVAL	114:5	114:5	8	one
NAME	114:5	114:5	9	one
LEAF_NODE	114:5	114:5	10	one
ASSIGN_OP	114:9	114:9	8	=
LEAF_NODE	114:9	114:9	9	=
RVAL	114:11	114:11	8	1
FIELD	114:11	114:11	9	1
LEAF_NODE	114:11	114:11	10	1
LEAF_NODE	114:12	114:12	5	,
VAR_DECL	114:1	114:14	5	int fd
TYPE	114:1	114:1	6	int
TYPE_NAME	114:1	114:1	7	int
LEAF_NODE	114:1	114:1	8	int
NAME	114:14	114:14	6	fd
LEAF_NODE	114:14	114:14	7	fd
LEAF_NODE	114:16	114:16	4	;
SIMPLE_DECL	115:1	115:31	3	int multiplefiles ; multiplefiles = ( argc > 1 ) ;
VAR_DECL	115:1	115:5	4	int multiplefiles ; multiplefiles = ( argc > 1 )
TYPE	115:1	115:1	5	int
TYPE_NAME	115:1	115:1	6	int
LEAF_NODE	115:1	115:1	7	int
NAME	115:5	115:5	5	multiplefiles
LEAF_NODE	115:5	115:5	6	multiplefiles
LEAF_NODE	0:0	0:0	5	;
INIT	115:5	115:5	5	multiplefiles = ( argc > 1 )
ASSIGN	115:5	115:21	6	multiplefiles = ( argc > 1 )
LVAL	115:5	115:5	7	multiplefiles
NAME	115:5	115:5	8	multiplefiles
LEAF_NODE	115:5	115:5	9	multiplefiles
ASSIGN_OP	115:19	115:19	7	=
LEAF_NODE	115:19	115:19	8	=
RVAL	115:21	115:30	7	( argc > 1 )
LEAF_NODE	115:21	115:21	8	(
FIELD	115:22	115:22	8	argc
LEAF_NODE	115:22	115:22	9	argc
REL_OPERATOR	115:27	115:27	8	>
LEAF_NODE	115:27	115:27	9	>
FIELD	115:29	115:29	8	1
LEAF_NODE	115:29	115:29	9	1
LEAF_NODE	115:30	115:30	8	)
LEAF_NODE	115:31	115:31	4	;
SIMPLE_DECL	116:1	116:6	3	int c ;
VAR_DECL	116:1	116:5	4	int c
TYPE	116:1	116:1	5	int
TYPE_NAME	116:1	116:1	6	int
LEAF_NODE	116:1	116:1	7	int
NAME	116:5	116:5	5	c
LEAF_NODE	116:5	116:5	6	c
LEAF_NODE	116:6	116:6	4	;
SIMPLE_DECL	117:1	117:18	3	uint64 diroff ; diroff = 0 ;
VAR_DECL	117:1	117:8	4	uint64 diroff ; diroff = 0
TYPE	117:1	117:1	5	uint64
TYPE_NAME	117:1	117:1	6	uint64
LEAF_NODE	117:1	117:1	7	uint64
NAME	117:8	117:8	5	diroff
LEAF_NODE	117:8	117:8	6	diroff
LEAF_NODE	0:0	0:0	5	;
INIT	117:8	117:8	5	diroff = 0
ASSIGN	117:8	117:17	6	diroff = 0
LVAL	117:8	117:8	7	diroff
NAME	117:8	117:8	8	diroff
LEAF_NODE	117:8	117:8	9	diroff
ASSIGN_OP	117:15	117:15	7	=
LEAF_NODE	117:15	117:15	8	=
RVAL	117:17	117:17	7	0
FIELD	117:17	117:17	8	0
LEAF_NODE	117:17	117:17	9	0
LEAF_NODE	117:18	117:18	4	;
LEAF_NODE	118:1	118:1	3	bigendian
LEAF_NODE	118:11	118:11	3	=
LEAF_NODE	118:13	118:13	3	(
LEAF_NODE	118:14	118:14	3	*
LEAF_NODE	118:15	118:15	3	(
LEAF_NODE	118:16	118:16	3	char
LEAF_NODE	118:21	118:21	3	*
LEAF_NODE	118:22	118:22	3	)
LEAF_NODE	118:23	118:23	3	&
LEAF_NODE	118:24	118:24	3	one
LEAF_NODE	118:28	118:28	3	==
LEAF_NODE	118:31	118:31	3	0
LEAF_NODE	118:32	118:32	3	)
LEAF_NODE	118:33	118:33	3	;
EXPR_STATEMENT	120:1	120:18	3	appname = argv [ 0 ] ;
EXPR	120:1	120:1	4	appname = argv [ 0 ]
ASSIGN	120:1	120:11	5	appname = argv [ 0 ]
LVAL	120:1	120:1	6	appname
FIELD	120:1	120:1	7	appname
LEAF_NODE	120:1	120:1	8	appname
ASSIGN_OP	120:9	120:9	6	=
LEAF_NODE	120:9	120:9	7	=
RVAL	120:11	120:11	6	argv [ 0 ]
FIELD	120:11	120:17	7	argv [ 0 ]
LEAF_NODE	120:11	120:11	8	argv
LEAF_NODE	120:15	120:15	8	[
EXPR	120:16	120:16	8	0
FIELD	120:16	120:16	9	0
LEAF_NODE	120:16	120:16	10	0
LEAF_NODE	120:17	120:17	8	]
LEAF_NODE	120:18	120:18	4	;
ITERATION	121:1	121:49	3	
KEYWORD	121:1	121:1	4	while
LEAF_NODE	121:1	121:1	5	while
LEAF_NODE	121:7	121:7	4	(
CONDITION	121:8	121:8	4	( c = getopt ( argc , argv , "m:o:h" ) ) != - 1
EXPR	121:8	121:45	5	( c = getopt ( argc , argv , "m:o:h" ) ) != - 1
LEAF_NODE	121:8	121:8	6	(
ASSIGN	121:9	121:13	6	c = getopt ( argc , argv , "m:o:h" )
LVAL	121:9	121:9	7	c
FIELD	121:9	121:9	8	c
LEAF_NODE	121:9	121:9	9	c
ASSIGN_OP	121:11	121:11	7	=
LEAF_NODE	121:11	121:11	8	=
RVAL	121:13	121:13	7	getopt ( argc , argv , "m:o:h" )
FUNCTION_CALL	121:13	121:39	8	getopt ( argc , argv , "m:o:h" )
CALLEE	121:13	121:13	9	getopt
LEAF_NODE	121:13	121:13	10	getopt
LEAF_NODE	121:19	121:19	9	(
ARGUMENT	121:20	121:20	9	argc
FIELD	121:20	121:20	10	argc
LEAF_NODE	121:20	121:20	11	argc
LEAF_NODE	121:24	121:24	9	,
ARGUMENT	121:26	121:26	9	argv
FIELD	121:26	121:26	10	argv
LEAF_NODE	121:26	121:26	11	argv
LEAF_NODE	121:30	121:30	9	,
ARGUMENT	121:32	121:32	9	"m:o:h"
FIELD	121:32	121:32	10	"m:o:h"
LEAF_NODE	121:32	121:32	11	"m:o:h"
LEAF_NODE	121:39	121:39	9	)
LEAF_NODE	121:40	121:40	6	)
EQ_OPERATOR	121:42	121:42	6	!=
LEAF_NODE	121:42	121:42	7	!=
UNARY_EXPR	121:45	121:46	6	- 1
UNARY_OPERATOR	121:45	121:45	7	-
LEAF_NODE	121:45	121:45	8	-
FIELD	121:46	121:46	7	1
LEAF_NODE	121:46	121:46	8	1
LEAF_NODE	121:47	121:47	4	)
STATEMENTS	121:49	138:1	4	
LEAF_NODE	121:49	121:49	5	{
STATEMENTS	122:2	122:2	5	
SELECTION	122:2	122:13	6	
KEYWORD	122:2	122:2	7	switch
LEAF_NODE	122:2	122:2	8	switch
LEAF_NODE	122:9	122:9	7	(
CONDITION	122:10	122:10	7	c
EXPR	122:10	122:10	8	c
FIELD	122:10	122:10	9	c
LEAF_NODE	122:10	122:10	10	c
LEAF_NODE	122:11	122:11	7	)
STATEMENTS	122:13	137:2	7	
LEAF_NODE	122:13	122:13	8	{
STATEMENTS	123:2	136:3	8	
LEAF_NODE	123:2	123:2	9	case
LEAF_NODE	123:7	123:7	9	'h'
LEAF_NODE	123:10	123:10	9	:
EXPR_STATEMENT	124:3	124:21	9	shortfmt = "%s%#x" ;
EXPR	124:3	124:3	10	shortfmt = "%s%#x"
ASSIGN	124:3	124:14	11	shortfmt = "%s%#x"
LVAL	124:3	124:3	12	shortfmt
FIELD	124:3	124:3	13	shortfmt
LEAF_NODE	124:3	124:3	14	shortfmt
ASSIGN_OP	124:12	124:12	12	=
LEAF_NODE	124:12	124:12	13	=
RVAL	124:14	124:14	12	"%s%#x"
FIELD	124:14	124:14	13	"%s%#x"
LEAF_NODE	124:14	124:14	14	"%s%#x"
LEAF_NODE	124:21	124:21	10	;
EXPR_STATEMENT	125:3	125:22	9	sshortfmt = "%s%#x" ;
EXPR	125:3	125:3	10	sshortfmt = "%s%#x"
ASSIGN	125:3	125:15	11	sshortfmt = "%s%#x"
LVAL	125:3	125:3	12	sshortfmt
FIELD	125:3	125:3	13	sshortfmt
LEAF_NODE	125:3	125:3	14	sshortfmt
ASSIGN_OP	125:13	125:13	12	=
LEAF_NODE	125:13	125:13	13	=
RVAL	125:15	125:15	12	"%s%#x"
FIELD	125:15	125:15	13	"%s%#x"
LEAF_NODE	125:15	125:15	14	"%s%#x"
LEAF_NODE	125:22	125:22	10	;
EXPR_STATEMENT	126:3	126:21	9	longfmt = "%s%#lx" ;
EXPR	126:3	126:3	10	longfmt = "%s%#lx"
ASSIGN	126:3	126:13	11	longfmt = "%s%#lx"
LVAL	126:3	126:3	12	longfmt
FIELD	126:3	126:3	13	longfmt
LEAF_NODE	126:3	126:3	14	longfmt
ASSIGN_OP	126:11	126:11	12	=
LEAF_NODE	126:11	126:11	13	=
RVAL	126:13	126:13	12	"%s%#lx"
FIELD	126:13	126:13	13	"%s%#lx"
LEAF_NODE	126:13	126:13	14	"%s%#lx"
LEAF_NODE	126:21	126:21	10	;
EXPR_STATEMENT	127:3	127:22	9	slongfmt = "%s%#lx" ;
EXPR	127:3	127:3	10	slongfmt = "%s%#lx"
ASSIGN	127:3	127:14	11	slongfmt = "%s%#lx"
LVAL	127:3	127:3	12	slongfmt
FIELD	127:3	127:3	13	slongfmt
LEAF_NODE	127:3	127:3	14	slongfmt
ASSIGN_OP	127:12	127:12	12	=
LEAF_NODE	127:12	127:12	13	=
RVAL	127:14	127:14	12	"%s%#lx"
FIELD	127:14	127:14	13	"%s%#lx"
LEAF_NODE	127:14	127:14	14	"%s%#lx"
LEAF_NODE	127:22	127:22	10	;
JUMP_STATEMENT	128:3	128:8	9	break DESTINATION ;
KEYWORD	128:3	128:3	10	break
LEAF_NODE	128:3	128:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	128:8	128:8	10	;
LEAF_NODE	129:2	129:2	9	case
LEAF_NODE	129:7	129:7	9	'o'
LEAF_NODE	129:10	129:10	9	:
EXPR_STATEMENT	130:3	130:45	9	diroff = ( uint64 ) strtoul ( optarg , NULL , 0 ) ;
EXPR	130:3	130:3	10	diroff = ( uint64 ) strtoul ( optarg , NULL , 0 )
ASSIGN	130:3	130:12	11	diroff = ( uint64 ) strtoul ( optarg , NULL , 0 )
LVAL	130:3	130:3	12	diroff
FIELD	130:3	130:3	13	diroff
LEAF_NODE	130:3	130:3	14	diroff
ASSIGN_OP	130:10	130:10	12	=
LEAF_NODE	130:10	130:10	13	=
RVAL	130:12	130:21	12	( uint64 ) strtoul ( optarg , NULL , 0 )
LEAF_NODE	130:12	130:12	13	(
TYPE_NAME	130:13	130:13	13	uint64
LEAF_NODE	130:13	130:13	14	uint64
LEAF_NODE	130:19	130:19	13	)
FUNCTION_CALL	130:21	130:44	13	strtoul ( optarg , NULL , 0 )
CALLEE	130:21	130:21	14	strtoul
LEAF_NODE	130:21	130:21	15	strtoul
LEAF_NODE	130:28	130:28	14	(
ARGUMENT	130:29	130:29	14	optarg
FIELD	130:29	130:29	15	optarg
LEAF_NODE	130:29	130:29	16	optarg
LEAF_NODE	130:35	130:35	14	,
ARGUMENT	130:37	130:37	14	NULL
FIELD	130:37	130:37	15	NULL
LEAF_NODE	130:37	130:37	16	NULL
LEAF_NODE	130:41	130:41	14	,
ARGUMENT	130:43	130:43	14	0
FIELD	130:43	130:43	15	0
LEAF_NODE	130:43	130:43	16	0
LEAF_NODE	130:44	130:44	14	)
LEAF_NODE	130:45	130:45	10	;
JUMP_STATEMENT	131:3	131:8	9	break DESTINATION ;
KEYWORD	131:3	131:3	10	break
LEAF_NODE	131:3	131:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	131:8	131:8	10	;
LEAF_NODE	132:2	132:2	9	case
LEAF_NODE	132:7	132:7	9	'm'
LEAF_NODE	132:10	132:10	9	:
EXPR_STATEMENT	133:3	133:38	9	maxitems = strtoul ( optarg , NULL , 0 ) ;
EXPR	133:3	133:3	10	maxitems = strtoul ( optarg , NULL , 0 )
ASSIGN	133:3	133:14	11	maxitems = strtoul ( optarg , NULL , 0 )
LVAL	133:3	133:3	12	maxitems
FIELD	133:3	133:3	13	maxitems
LEAF_NODE	133:3	133:3	14	maxitems
ASSIGN_OP	133:12	133:12	12	=
LEAF_NODE	133:12	133:12	13	=
RVAL	133:14	133:14	12	strtoul ( optarg , NULL , 0 )
FUNCTION_CALL	133:14	133:37	13	strtoul ( optarg , NULL , 0 )
CALLEE	133:14	133:14	14	strtoul
LEAF_NODE	133:14	133:14	15	strtoul
LEAF_NODE	133:21	133:21	14	(
ARGUMENT	133:22	133:22	14	optarg
FIELD	133:22	133:22	15	optarg
LEAF_NODE	133:22	133:22	16	optarg
LEAF_NODE	133:28	133:28	14	,
ARGUMENT	133:30	133:30	14	NULL
FIELD	133:30	133:30	15	NULL
LEAF_NODE	133:30	133:30	16	NULL
LEAF_NODE	133:34	133:34	14	,
ARGUMENT	133:36	133:36	14	0
FIELD	133:36	133:36	15	0
LEAF_NODE	133:36	133:36	16	0
LEAF_NODE	133:37	133:37	14	)
LEAF_NODE	133:38	133:38	10	;
JUMP_STATEMENT	134:3	134:8	9	break DESTINATION ;
KEYWORD	134:3	134:3	10	break
LEAF_NODE	134:3	134:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	134:8	134:8	10	;
LABEL	135:2	135:9	9	default :
LEAF_NODE	135:2	135:2	10	default
LEAF_NODE	135:9	135:9	10	:
EXPR_STATEMENT	136:3	136:10	9	usage ( ) ;
EXPR	136:3	136:3	10	usage ( )
FUNCTION_CALL	136:3	136:9	11	usage ( )
CALLEE	136:3	136:3	12	usage
LEAF_NODE	136:3	136:3	13	usage
LEAF_NODE	136:8	136:8	12	(
LEAF_NODE	136:9	136:9	12	)
LEAF_NODE	136:10	136:10	10	;
LEAF_NODE	137:2	137:2	8	}
LEAF_NODE	138:1	138:1	5	}
SELECTION	139:1	140:2	3	
KEYWORD	139:1	139:1	4	if
LEAF_NODE	139:1	139:1	5	if
LEAF_NODE	139:4	139:4	4	(
CONDITION	139:5	139:5	4	optind >= argc
EXPR	139:5	139:15	5	optind >= argc
FIELD	139:5	139:5	6	optind
LEAF_NODE	139:5	139:5	7	optind
REL_OPERATOR	139:12	139:12	6	>=
LEAF_NODE	139:12	139:12	7	>=
FIELD	139:15	139:15	6	argc
LEAF_NODE	139:15	139:15	7	argc
LEAF_NODE	139:19	139:19	4	)
STATEMENTS	140:2	140:2	4	
EXPR_STATEMENT	140:2	140:9	5	usage ( ) ;
EXPR	140:2	140:2	6	usage ( )
FUNCTION_CALL	140:2	140:8	7	usage ( )
CALLEE	140:2	140:2	8	usage
LEAF_NODE	140:2	140:2	9	usage
LEAF_NODE	140:7	140:7	8	(
LEAF_NODE	140:8	140:8	8	)
LEAF_NODE	140:9	140:9	6	;
ITERATION	141:1	141:33	3	
KEYWORD	141:1	141:1	4	for
LEAF_NODE	141:1	141:1	5	for
LEAF_NODE	141:5	141:5	4	(
FOR_INIT	141:6	141:6	4	;
LEAF_NODE	141:6	141:6	5	;
CONDITION	141:8	141:8	4	optind < argc
EXPR	141:8	141:17	5	optind < argc
FIELD	141:8	141:8	6	optind
LEAF_NODE	141:8	141:8	7	optind
REL_OPERATOR	141:15	141:15	6	<
LEAF_NODE	141:15	141:15	7	<
FIELD	141:17	141:17	6	argc
LEAF_NODE	141:17	141:17	7	argc
LEAF_NODE	141:21	141:21	4	;
FOR_EXPR	141:23	141:23	4	optind ++
EXPR	141:23	141:23	5	optind ++
FIELD	141:23	141:29	6	optind ++
LEAF_NODE	141:23	141:23	7	optind
LEAF_NODE	141:29	141:29	7	++
LEAF_NODE	141:31	141:31	4	)
STATEMENTS	141:33	154:1	4	
LEAF_NODE	141:33	141:33	5	{
STATEMENTS	142:2	153:2	5	
EXPR_STATEMENT	142:2	142:47	6	fd = open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 ) ;
EXPR	142:2	142:2	7	fd = open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
ASSIGN	142:2	142:7	8	fd = open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
LVAL	142:2	142:2	9	fd
FIELD	142:2	142:2	10	fd
LEAF_NODE	142:2	142:2	11	fd
ASSIGN_OP	142:5	142:5	9	=
LEAF_NODE	142:5	142:5	10	=
RVAL	142:7	142:7	9	open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
FUNCTION_CALL	142:7	142:46	10	open ( argv [ optind ] , O_RDONLY | O_BINARY , 0 )
CALLEE	142:7	142:7	11	open
LEAF_NODE	142:7	142:7	12	open
LEAF_NODE	142:11	142:11	11	(
ARGUMENT	142:12	142:12	11	argv [ optind ]
FIELD	142:12	142:23	12	argv [ optind ]
LEAF_NODE	142:12	142:12	13	argv
LEAF_NODE	142:16	142:16	13	[
EXPR	142:17	142:17	13	optind
FIELD	142:17	142:17	14	optind
LEAF_NODE	142:17	142:17	15	optind
LEAF_NODE	142:23	142:23	13	]
LEAF_NODE	142:24	142:24	11	,
ARGUMENT	142:26	142:26	11	O_RDONLY | O_BINARY
BIT_OR	142:26	142:35	12	O_RDONLY | O_BINARY
BIT_OR_ELEM	142:26	142:26	13	O_RDONLY
FIELD	142:26	142:26	14	O_RDONLY
LEAF_NODE	142:26	142:26	15	O_RDONLY
LEAF_NODE	142:34	142:34	13	|
BIT_OR_ELEM	142:35	142:35	13	O_BINARY
FIELD	142:35	142:35	14	O_BINARY
LEAF_NODE	142:35	142:35	15	O_BINARY
LEAF_NODE	142:43	142:43	11	,
ARGUMENT	142:45	142:45	11	0
FIELD	142:45	142:45	12	0
LEAF_NODE	142:45	142:45	13	0
LEAF_NODE	142:46	142:46	11	)
LEAF_NODE	142:47	142:47	7	;
SELECTION	143:2	143:14	6	
KEYWORD	143:2	143:2	7	if
LEAF_NODE	143:2	143:2	8	if
LEAF_NODE	143:5	143:5	7	(
CONDITION	143:6	143:6	7	fd < 0
EXPR	143:6	143:11	8	fd < 0
FIELD	143:6	143:6	9	fd
LEAF_NODE	143:6	143:6	10	fd
REL_OPERATOR	143:9	143:9	9	<
LEAF_NODE	143:9	143:9	10	<
FIELD	143:11	143:11	9	0
LEAF_NODE	143:11	143:11	10	0
LEAF_NODE	143:12	143:12	7	)
STATEMENTS	143:14	146:2	7	
LEAF_NODE	143:14	143:14	8	{
STATEMENTS	144:3	145:3	8	
EXPR_STATEMENT	144:3	144:18	9	perror ( argv [ 0 ] ) ;
EXPR	144:3	144:3	10	perror ( argv [ 0 ] )
FUNCTION_CALL	144:3	144:17	11	perror ( argv [ 0 ] )
CALLEE	144:3	144:3	12	perror
LEAF_NODE	144:3	144:3	13	perror
LEAF_NODE	144:9	144:9	12	(
ARGUMENT	144:10	144:10	12	argv [ 0 ]
FIELD	144:10	144:16	13	argv [ 0 ]
LEAF_NODE	144:10	144:10	14	argv
LEAF_NODE	144:14	144:14	14	[
EXPR	144:15	144:15	14	0
FIELD	144:15	144:15	15	0
LEAF_NODE	144:15	144:15	16	0
LEAF_NODE	144:16	144:16	14	]
LEAF_NODE	144:17	144:17	12	)
LEAF_NODE	144:18	144:18	10	;
JUMP_STATEMENT	145:3	145:14	9	return ( - 1 ) ;
KEYWORD	145:3	145:3	10	return
LEAF_NODE	145:3	145:3	11	return
DESTINATION	145:10	145:10	10	( - 1 )
EXPR	145:10	145:13	11	( - 1 )
LEAF_NODE	145:10	145:10	12	(
UNARY_EXPR	145:11	145:12	12	- 1
UNARY_OPERATOR	145:11	145:11	13	-
LEAF_NODE	145:11	145:11	14	-
FIELD	145:12	145:12	13	1
LEAF_NODE	145:12	145:12	14	1
LEAF_NODE	145:13	145:13	12	)
LEAF_NODE	145:14	145:14	10	;
LEAF_NODE	146:2	146:2	8	}
SELECTION	147:2	148:3	6	
KEYWORD	147:2	147:2	7	if
LEAF_NODE	147:2	147:2	8	if
LEAF_NODE	147:5	147:5	7	(
CONDITION	147:6	147:6	7	multiplefiles
EXPR	147:6	147:6	8	multiplefiles
FIELD	147:6	147:6	9	multiplefiles
LEAF_NODE	147:6	147:6	10	multiplefiles
LEAF_NODE	147:19	147:19	7	)
STATEMENTS	148:3	148:3	7	
EXPR_STATEMENT	148:3	148:32	8	printf ( "%s:\n" , argv [ optind ] ) ;
EXPR	148:3	148:3	9	printf ( "%s:\n" , argv [ optind ] )
FUNCTION_CALL	148:3	148:31	10	printf ( "%s:\n" , argv [ optind ] )
CALLEE	148:3	148:3	11	printf
LEAF_NODE	148:3	148:3	12	printf
LEAF_NODE	148:9	148:9	11	(
ARGUMENT	148:10	148:10	11	"%s:\n"
FIELD	148:10	148:10	12	"%s:\n"
LEAF_NODE	148:10	148:10	13	"%s:\n"
LEAF_NODE	148:17	148:17	11	,
ARGUMENT	148:19	148:19	11	argv [ optind ]
FIELD	148:19	148:30	12	argv [ optind ]
LEAF_NODE	148:19	148:19	13	argv
LEAF_NODE	148:23	148:23	13	[
EXPR	148:24	148:24	13	optind
FIELD	148:24	148:24	14	optind
LEAF_NODE	148:24	148:24	15	optind
LEAF_NODE	148:30	148:30	13	]
LEAF_NODE	148:31	148:31	11	)
LEAF_NODE	148:32	148:32	9	;
EXPR_STATEMENT	149:2	149:24	6	curfile = argv [ optind ] ;
EXPR	149:2	149:2	7	curfile = argv [ optind ]
ASSIGN	149:2	149:12	8	curfile = argv [ optind ]
LVAL	149:2	149:2	9	curfile
FIELD	149:2	149:2	10	curfile
LEAF_NODE	149:2	149:2	11	curfile
ASSIGN_OP	149:10	149:10	9	=
LEAF_NODE	149:10	149:10	10	=
RVAL	149:12	149:12	9	argv [ optind ]
FIELD	149:12	149:23	10	argv [ optind ]
LEAF_NODE	149:12	149:12	11	argv
LEAF_NODE	149:16	149:16	11	[
EXPR	149:17	149:17	11	optind
FIELD	149:17	149:17	12	optind
LEAF_NODE	149:17	149:17	13	optind
LEAF_NODE	149:23	149:23	11	]
LEAF_NODE	149:24	149:24	7	;
EXPR_STATEMENT	150:2	150:14	6	swabflag = 0 ;
EXPR	150:2	150:2	7	swabflag = 0
ASSIGN	150:2	150:13	8	swabflag = 0
LVAL	150:2	150:2	9	swabflag
FIELD	150:2	150:2	10	swabflag
LEAF_NODE	150:2	150:2	11	swabflag
ASSIGN_OP	150:11	150:11	9	=
LEAF_NODE	150:11	150:11	10	=
RVAL	150:13	150:13	9	0
FIELD	150:13	150:13	10	0
LEAF_NODE	150:13	150:13	11	0
LEAF_NODE	150:14	150:14	7	;
EXPR_STATEMENT	151:2	151:13	6	bigtiff = 0 ;
EXPR	151:2	151:2	7	bigtiff = 0
ASSIGN	151:2	151:12	8	bigtiff = 0
LVAL	151:2	151:2	9	bigtiff
FIELD	151:2	151:2	10	bigtiff
LEAF_NODE	151:2	151:2	11	bigtiff
ASSIGN_OP	151:10	151:10	9	=
LEAF_NODE	151:10	151:10	10	=
RVAL	151:12	151:12	9	0
FIELD	151:12	151:12	10	0
LEAF_NODE	151:12	151:12	11	0
LEAF_NODE	151:13	151:13	7	;
EXPR_STATEMENT	152:2	152:18	6	dump ( fd , diroff ) ;
EXPR	152:2	152:2	7	dump ( fd , diroff )
FUNCTION_CALL	152:2	152:17	8	dump ( fd , diroff )
CALLEE	152:2	152:2	9	dump
LEAF_NODE	152:2	152:2	10	dump
LEAF_NODE	152:6	152:6	9	(
ARGUMENT	152:7	152:7	9	fd
FIELD	152:7	152:7	10	fd
LEAF_NODE	152:7	152:7	11	fd
LEAF_NODE	152:9	152:9	9	,
ARGUMENT	152:11	152:11	9	diroff
FIELD	152:11	152:11	10	diroff
LEAF_NODE	152:11	152:11	11	diroff
LEAF_NODE	152:17	152:17	9	)
LEAF_NODE	152:18	152:18	7	;
EXPR_STATEMENT	153:2	153:11	6	close ( fd ) ;
EXPR	153:2	153:2	7	close ( fd )
FUNCTION_CALL	153:2	153:10	8	close ( fd )
CALLEE	153:2	153:2	9	close
LEAF_NODE	153:2	153:2	10	close
LEAF_NODE	153:7	153:7	9	(
ARGUMENT	153:8	153:8	9	fd
FIELD	153:8	153:8	10	fd
LEAF_NODE	153:8	153:8	11	fd
LEAF_NODE	153:10	153:10	9	)
LEAF_NODE	153:11	153:11	7	;
LEAF_NODE	154:1	154:1	5	}
JUMP_STATEMENT	155:1	155:11	3	return ( 0 ) ;
KEYWORD	155:1	155:1	4	return
LEAF_NODE	155:1	155:1	5	return
DESTINATION	155:8	155:8	4	( 0 )
EXPR	155:8	155:10	5	( 0 )
LEAF_NODE	155:8	155:8	6	(
FIELD	155:9	155:9	6	0
LEAF_NODE	155:9	155:9	7	0
LEAF_NODE	155:10	155:10	6	)
LEAF_NODE	155:11	155:11	4	;
LEAF_NODE	156:0	156:0	2	}
FUNCTION_DEF	165:0	265:0	1	
RETURN_TYPE	165:0	165:7	2	static void
LEAF_NODE	165:0	165:0	3	static
TYPE_NAME	165:7	165:7	3	void
LEAF_NODE	165:7	165:7	4	void
FUNCTION_NAME	166:0	166:0	2	dump
LEAF_NODE	166:0	166:0	3	dump
PARAMETER_LIST	166:4	166:26	2	( int fd , uint64 diroff )
LEAF_NODE	166:4	166:4	3	(
PARAMETER_DECL	166:5	166:9	3	int fd
TYPE	166:5	166:5	4	int
TYPE_NAME	166:5	166:5	5	int
LEAF_NODE	166:5	166:5	6	int
NAME	166:9	166:9	4	fd
LEAF_NODE	166:9	166:9	5	fd
LEAF_NODE	166:11	166:11	3	,
PARAMETER_DECL	166:13	166:20	3	uint64 diroff
TYPE	166:13	166:13	4	uint64
TYPE_NAME	166:13	166:13	5	uint64
LEAF_NODE	166:13	166:13	6	uint64
NAME	166:20	166:20	4	diroff
LEAF_NODE	166:20	166:20	5	diroff
LEAF_NODE	166:26	166:26	3	)
LEAF_NODE	167:0	167:0	2	{
STATEMENTS	168:1	263:1	2	
LEAF_NODE	168:1	168:1	3	unsigned
EXPR_STATEMENT	168:10	168:14	3	i , j ;
EXPR	168:10	168:13	4	i , j
FIELD	168:10	168:10	5	i
LEAF_NODE	168:10	168:10	6	i
LEAF_NODE	168:11	168:11	5	,
FIELD	168:13	168:13	5	j
LEAF_NODE	168:13	168:13	6	j
LEAF_NODE	168:14	168:14	4	;
SIMPLE_DECL	169:1	169:30	3	uint64 * visited_diroff ; visited_diroff = NULL ;
VAR_DECL	169:1	169:9	4	uint64 * visited_diroff ; visited_diroff = NULL
TYPE	169:1	169:7	5	uint64 *
TYPE_NAME	169:1	169:1	6	uint64
LEAF_NODE	169:1	169:1	7	uint64
POINTER	169:7	169:7	6	*
LEAF_NODE	169:7	169:7	7	*
NAME	169:9	169:9	5	visited_diroff
LEAF_NODE	169:9	169:9	6	visited_diroff
LEAF_NODE	0:0	0:0	5	;
INIT	169:9	169:9	5	visited_diroff = NULL
ASSIGN	169:9	169:26	6	visited_diroff = NULL
LVAL	169:9	169:9	7	visited_diroff
NAME	169:9	169:9	8	visited_diroff
LEAF_NODE	169:9	169:9	9	visited_diroff
ASSIGN_OP	169:24	169:24	7	=
LEAF_NODE	169:24	169:24	8	=
RVAL	169:26	169:26	7	NULL
FIELD	169:26	169:26	8	NULL
LEAF_NODE	169:26	169:26	9	NULL
LEAF_NODE	169:30	169:30	4	;
SIMPLE_DECL	170:1	170:35	3	unsigned int count_visited_dir ; count_visited_dir = 0 ;
VAR_DECL	170:1	170:14	4	unsigned int count_visited_dir ; count_visited_dir = 0
TYPE	170:1	170:1	5	unsigned int
TYPE_NAME	170:1	170:10	6	unsigned int
LEAF_NODE	170:1	170:1	7	unsigned
LEAF_NODE	170:10	170:10	7	int
NAME	170:14	170:14	5	count_visited_dir
LEAF_NODE	170:14	170:14	6	count_visited_dir
LEAF_NODE	0:0	0:0	5	;
INIT	170:14	170:14	5	count_visited_dir = 0
ASSIGN	170:14	170:34	6	count_visited_dir = 0
LVAL	170:14	170:14	7	count_visited_dir
NAME	170:14	170:14	8	count_visited_dir
LEAF_NODE	170:14	170:14	9	count_visited_dir
ASSIGN_OP	170:32	170:32	7	=
LEAF_NODE	170:32	170:32	8	=
RVAL	170:34	170:34	7	0
FIELD	170:34	170:34	8	0
LEAF_NODE	170:34	170:34	9	0
LEAF_NODE	170:35	170:35	4	;
EXPR_STATEMENT	172:1	172:38	3	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) 0 , 0 ) ;
EXPR	172:1	172:1	4	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) 0 , 0 )
FUNCTION_CALL	172:1	172:37	5	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) 0 , 0 )
CALLEE	172:1	172:1	6	_TIFF_lseek_f
LEAF_NODE	172:1	172:1	7	_TIFF_lseek_f
LEAF_NODE	172:14	172:14	6	(
ARGUMENT	172:15	172:15	6	fd
FIELD	172:15	172:15	7	fd
LEAF_NODE	172:15	172:15	8	fd
LEAF_NODE	172:17	172:17	6	,
ARGUMENT	172:19	172:33	6	( _TIFF_off_t ) 0
LEAF_NODE	172:19	172:19	7	(
TYPE_NAME	172:20	172:20	7	_TIFF_off_t
LEAF_NODE	172:20	172:20	8	_TIFF_off_t
LEAF_NODE	172:31	172:31	7	)
FIELD	172:33	172:33	7	0
LEAF_NODE	172:33	172:33	8	0
LEAF_NODE	172:34	172:34	6	,
ARGUMENT	172:36	172:36	6	0
FIELD	172:36	172:36	7	0
LEAF_NODE	172:36	172:36	8	0
LEAF_NODE	172:37	172:37	6	)
LEAF_NODE	172:38	172:38	4	;
SELECTION	173:1	174:2	3	
KEYWORD	173:1	173:1	4	if
LEAF_NODE	173:1	173:1	5	if
LEAF_NODE	173:4	173:4	4	(
CONDITION	173:5	173:5	4	read ( fd , ( char * ) & hdr , sizeof ( TIFFHeaderCommon ) ) != sizeof ( TIFFHeaderCommon )
EXPR	173:5	173:58	5	read ( fd , ( char * ) & hdr , sizeof ( TIFFHeaderCommon ) ) != sizeof ( TIFFHeaderCommon )
FUNCTION_CALL	173:5	173:53	6	read ( fd , ( char * ) & hdr , sizeof ( TIFFHeaderCommon ) )
CALLEE	173:5	173:5	7	read
LEAF_NODE	173:5	173:5	8	read
LEAF_NODE	173:9	173:9	7	(
ARGUMENT	173:10	173:10	7	fd
FIELD	173:10	173:10	8	fd
LEAF_NODE	173:10	173:10	9	fd
LEAF_NODE	173:12	173:12	7	,
ARGUMENT	173:14	173:22	7	( char * ) & hdr
LEAF_NODE	173:14	173:14	8	(
TYPE_NAME	173:15	173:15	8	char
LEAF_NODE	173:15	173:15	9	char
LEAF_NODE	173:19	173:19	8	*
LEAF_NODE	173:20	173:20	8	)
UNARY_EXPR	173:22	173:23	8	& hdr
UNARY_OPERATOR	173:22	173:22	9	&
LEAF_NODE	173:22	173:22	10	&
FIELD	173:23	173:23	9	hdr
LEAF_NODE	173:23	173:23	10	hdr
LEAF_NODE	173:26	173:26	7	,
ARGUMENT	173:28	173:28	7	sizeof ( TIFFHeaderCommon )
FUNCTION_CALL	173:28	173:52	8	sizeof ( TIFFHeaderCommon )
CALLEE	173:28	173:28	9	sizeof
LEAF_NODE	173:28	173:28	10	sizeof
LEAF_NODE	173:35	173:35	9	(
ARGUMENT	173:36	173:36	9	TIFFHeaderCommon
FIELD	173:36	173:36	10	TIFFHeaderCommon
LEAF_NODE	173:36	173:36	11	TIFFHeaderCommon
LEAF_NODE	173:52	173:52	9	)
LEAF_NODE	173:53	173:53	7	)
EQ_OPERATOR	173:55	173:55	6	!=
LEAF_NODE	173:55	173:55	7	!=
FUNCTION_CALL	173:58	173:82	6	sizeof ( TIFFHeaderCommon )
CALLEE	173:58	173:58	7	sizeof
LEAF_NODE	173:58	173:58	8	sizeof
LEAF_NODE	173:65	173:65	7	(
ARGUMENT	173:66	173:66	7	TIFFHeaderCommon
FIELD	173:66	173:66	8	TIFFHeaderCommon
LEAF_NODE	173:66	173:66	9	TIFFHeaderCommon
LEAF_NODE	173:82	173:82	7	)
LEAF_NODE	173:83	173:83	4	)
STATEMENTS	174:2	174:2	4	
EXPR_STATEMENT	174:2	174:26	5	ReadError ( "TIFF header" ) ;
EXPR	174:2	174:2	6	ReadError ( "TIFF header" )
FUNCTION_CALL	174:2	174:25	7	ReadError ( "TIFF header" )
CALLEE	174:2	174:2	8	ReadError
LEAF_NODE	174:2	174:2	9	ReadError
LEAF_NODE	174:11	174:11	8	(
ARGUMENT	174:12	174:12	8	"TIFF header"
FIELD	174:12	174:12	9	"TIFF header"
LEAF_NODE	174:12	174:12	10	"TIFF header"
LEAF_NODE	174:25	174:25	8	)
LEAF_NODE	174:26	174:26	6	;
LEAF_NODE	175:1	175:1	3	if
LEAF_NODE	175:4	175:4	3	(
LEAF_NODE	175:5	175:5	3	hdr
LEAF_NODE	175:8	175:8	3	.
LEAF_NODE	175:9	175:9	3	common
LEAF_NODE	175:15	175:15	3	.
LEAF_NODE	175:16	175:16	3	tiff_magic
LEAF_NODE	175:27	175:27	3	!=
LEAF_NODE	175:30	175:30	3	TIFF_BIGENDIAN
LEAF_NODE	176:5	176:5	3	&&
LEAF_NODE	176:8	176:8	3	hdr
LEAF_NODE	176:11	176:11	3	.
LEAF_NODE	176:12	176:12	3	common
LEAF_NODE	176:18	176:18	3	.
LEAF_NODE	176:19	176:19	3	tiff_magic
LEAF_NODE	176:30	176:30	3	!=
LEAF_NODE	176:33	176:33	3	TIFF_LITTLEENDIAN
LEAF_NODE	176:51	176:51	3	&&
LEAF_NODE	179:5	179:5	3	MDI_BIGENDIAN
LEAF_NODE	179:19	179:19	3	!=
LEAF_NODE	179:22	179:22	3	hdr
LEAF_NODE	179:25	179:25	3	.
LEAF_NODE	179:26	179:26	3	common
LEAF_NODE	179:32	179:32	3	.
LEAF_NODE	179:33	179:33	3	tiff_magic
LEAF_NODE	181:5	181:5	3	MDI_LITTLEENDIAN
LEAF_NODE	181:22	181:22	3	!=
LEAF_NODE	181:25	181:25	3	hdr
LEAF_NODE	181:28	181:28	3	.
LEAF_NODE	181:29	181:29	3	common
LEAF_NODE	181:35	181:35	3	.
LEAF_NODE	181:36	181:36	3	tiff_magic
LEAF_NODE	183:4	183:4	3	)
LEAF_NODE	183:6	183:6	3	{
STATEMENTS	184:2	184:2	3	
EXPR_STATEMENT	184:2	185:51	4	Fatal ( "Not a TIFF or MDI file, bad magic number %u (%#x)" , hdr . common . tiff_magic , hdr . common . tiff_magic ) ;
EXPR	184:2	184:2	5	Fatal ( "Not a TIFF or MDI file, bad magic number %u (%#x)" , hdr . common . tiff_magic , hdr . common . tiff_magic )
FUNCTION_CALL	184:2	185:50	6	Fatal ( "Not a TIFF or MDI file, bad magic number %u (%#x)" , hdr . common . tiff_magic , hdr . common . tiff_magic )
CALLEE	184:2	184:2	7	Fatal
LEAF_NODE	184:2	184:2	8	Fatal
LEAF_NODE	184:7	184:7	7	(
ARGUMENT	184:8	184:8	7	"Not a TIFF or MDI file, bad magic number %u (%#x)"
FIELD	184:8	184:8	8	"Not a TIFF or MDI file, bad magic number %u (%#x)"
LEAF_NODE	184:8	184:8	9	"Not a TIFF or MDI file, bad magic number %u (%#x)"
LEAF_NODE	184:59	184:59	7	,
ARGUMENT	185:6	185:6	7	hdr . common . tiff_magic
FIELD	185:6	185:17	8	hdr . common . tiff_magic
LEAF_NODE	185:6	185:6	9	hdr
LEAF_NODE	185:9	185:9	9	.
LEAF_NODE	185:10	185:10	9	common
LEAF_NODE	185:16	185:16	9	.
LEAF_NODE	185:17	185:17	9	tiff_magic
LEAF_NODE	185:27	185:27	7	,
ARGUMENT	185:29	185:29	7	hdr . common . tiff_magic
FIELD	185:29	185:40	8	hdr . common . tiff_magic
LEAF_NODE	185:29	185:29	9	hdr
LEAF_NODE	185:32	185:32	9	.
LEAF_NODE	185:33	185:33	9	common
LEAF_NODE	185:39	185:39	9	.
LEAF_NODE	185:40	185:40	9	tiff_magic
LEAF_NODE	185:50	185:50	7	)
LEAF_NODE	185:51	185:51	5	;
LEAF_NODE	186:1	186:1	3	}
SELECTION	187:1	189:2	3	
KEYWORD	187:1	187:1	4	if
LEAF_NODE	187:1	187:1	5	if
LEAF_NODE	187:4	187:4	4	(
CONDITION	187:5	187:5	4	hdr . common . tiff_magic == TIFF_BIGENDIAN || hdr . common . tiff_magic == MDI_BIGENDIAN
EXPR	187:5	187:5	5	hdr . common . tiff_magic == TIFF_BIGENDIAN || hdr . common . tiff_magic == MDI_BIGENDIAN
OR	187:5	188:8	6	hdr . common . tiff_magic == TIFF_BIGENDIAN || hdr . common . tiff_magic == MDI_BIGENDIAN
EXPR	187:5	187:30	7	hdr . common . tiff_magic == TIFF_BIGENDIAN
FIELD	187:5	187:16	8	hdr . common . tiff_magic
LEAF_NODE	187:5	187:5	9	hdr
LEAF_NODE	187:8	187:8	9	.
LEAF_NODE	187:9	187:9	9	common
LEAF_NODE	187:15	187:15	9	.
LEAF_NODE	187:16	187:16	9	tiff_magic
EQ_OPERATOR	187:27	187:27	8	==
LEAF_NODE	187:27	187:27	9	==
FIELD	187:30	187:30	8	TIFF_BIGENDIAN
LEAF_NODE	187:30	187:30	9	TIFF_BIGENDIAN
LEAF_NODE	188:5	188:5	7	||
EXPR	188:8	188:33	7	hdr . common . tiff_magic == MDI_BIGENDIAN
FIELD	188:8	188:19	8	hdr . common . tiff_magic
LEAF_NODE	188:8	188:8	9	hdr
LEAF_NODE	188:11	188:11	9	.
LEAF_NODE	188:12	188:12	9	common
LEAF_NODE	188:18	188:18	9	.
LEAF_NODE	188:19	188:19	9	tiff_magic
EQ_OPERATOR	188:30	188:30	8	==
LEAF_NODE	188:30	188:30	9	==
FIELD	188:33	188:33	8	MDI_BIGENDIAN
LEAF_NODE	188:33	188:33	9	MDI_BIGENDIAN
LEAF_NODE	188:46	188:46	4	)
STATEMENTS	189:2	189:2	4	
EXPR_STATEMENT	189:2	189:23	5	swabflag = ! bigendian ;
EXPR	189:2	189:2	6	swabflag = ! bigendian
ASSIGN	189:2	189:13	7	swabflag = ! bigendian
LVAL	189:2	189:2	8	swabflag
FIELD	189:2	189:2	9	swabflag
LEAF_NODE	189:2	189:2	10	swabflag
ASSIGN_OP	189:11	189:11	8	=
LEAF_NODE	189:11	189:11	9	=
RVAL	189:13	189:13	8	! bigendian
UNARY_EXPR	189:13	189:14	9	! bigendian
UNARY_OPERATOR	189:13	189:13	10	!
LEAF_NODE	189:13	189:13	11	!
FIELD	189:14	189:14	10	bigendian
LEAF_NODE	189:14	189:14	11	bigendian
LEAF_NODE	189:23	189:23	6	;
SELECTION	190:1	191:2	3	
KEYWORD	190:1	190:1	4	else
LEAF_NODE	190:1	190:1	5	else
STATEMENTS	191:2	191:2	4	
EXPR_STATEMENT	191:2	191:22	5	swabflag = bigendian ;
EXPR	191:2	191:2	6	swabflag = bigendian
ASSIGN	191:2	191:13	7	swabflag = bigendian
LVAL	191:2	191:2	8	swabflag
FIELD	191:2	191:2	9	swabflag
LEAF_NODE	191:2	191:2	10	swabflag
ASSIGN_OP	191:11	191:11	8	=
LEAF_NODE	191:11	191:11	9	=
RVAL	191:13	191:13	8	bigendian
FIELD	191:13	191:13	9	bigendian
LEAF_NODE	191:13	191:13	10	bigendian
LEAF_NODE	191:22	191:22	6	;
SELECTION	192:1	193:2	3	
KEYWORD	192:1	192:1	4	if
LEAF_NODE	192:1	192:1	5	if
LEAF_NODE	192:4	192:4	4	(
CONDITION	192:5	192:5	4	swabflag
EXPR	192:5	192:5	5	swabflag
FIELD	192:5	192:5	6	swabflag
LEAF_NODE	192:5	192:5	7	swabflag
LEAF_NODE	192:13	192:13	4	)
STATEMENTS	193:2	193:2	4	
EXPR_STATEMENT	193:2	193:41	5	TIFFSwabShort ( & hdr . common . tiff_version ) ;
EXPR	193:2	193:2	6	TIFFSwabShort ( & hdr . common . tiff_version )
FUNCTION_CALL	193:2	193:40	7	TIFFSwabShort ( & hdr . common . tiff_version )
CALLEE	193:2	193:2	8	TIFFSwabShort
LEAF_NODE	193:2	193:2	9	TIFFSwabShort
LEAF_NODE	193:15	193:15	8	(
ARGUMENT	193:16	193:16	8	& hdr . common . tiff_version
UNARY_EXPR	193:16	193:17	9	& hdr . common . tiff_version
UNARY_OPERATOR	193:16	193:16	10	&
LEAF_NODE	193:16	193:16	11	&
FIELD	193:17	193:28	10	hdr . common . tiff_version
LEAF_NODE	193:17	193:17	11	hdr
LEAF_NODE	193:20	193:20	11	.
LEAF_NODE	193:21	193:21	11	common
LEAF_NODE	193:27	193:27	11	.
LEAF_NODE	193:28	193:28	11	tiff_version
LEAF_NODE	193:40	193:40	8	)
LEAF_NODE	193:41	193:41	6	;
SELECTION	194:1	195:1	3	
KEYWORD	194:1	194:1	4	if
LEAF_NODE	194:1	194:1	5	if
LEAF_NODE	194:4	194:4	4	(
CONDITION	194:5	194:5	4	hdr . common . tiff_version == 42
EXPR	194:5	194:30	5	hdr . common . tiff_version == 42
FIELD	194:5	194:16	6	hdr . common . tiff_version
LEAF_NODE	194:5	194:5	7	hdr
LEAF_NODE	194:8	194:8	7	.
LEAF_NODE	194:9	194:9	7	common
LEAF_NODE	194:15	194:15	7	.
LEAF_NODE	194:16	194:16	7	tiff_version
EQ_OPERATOR	194:28	194:28	6	==
LEAF_NODE	194:28	194:28	7	==
FIELD	194:30	194:30	6	42
LEAF_NODE	194:30	194:30	7	42
LEAF_NODE	194:32	194:32	4	)
STATEMENTS	195:1	206:1	4	
LEAF_NODE	195:1	195:1	5	{
STATEMENTS	196:2	204:2	5	
SELECTION	196:2	197:3	6	
KEYWORD	196:2	196:2	7	if
LEAF_NODE	196:2	196:2	8	if
LEAF_NODE	196:5	196:5	7	(
CONDITION	196:6	196:6	7	read ( fd , ( char * ) & hdr . classic . tiff_diroff , 4 ) != 4
EXPR	196:6	196:55	8	read ( fd , ( char * ) & hdr . classic . tiff_diroff , 4 ) != 4
FUNCTION_CALL	196:6	196:50	9	read ( fd , ( char * ) & hdr . classic . tiff_diroff , 4 )
CALLEE	196:6	196:6	10	read
LEAF_NODE	196:6	196:6	11	read
LEAF_NODE	196:10	196:10	10	(
ARGUMENT	196:11	196:11	10	fd
FIELD	196:11	196:11	11	fd
LEAF_NODE	196:11	196:11	12	fd
LEAF_NODE	196:13	196:13	10	,
ARGUMENT	196:15	196:23	10	( char * ) & hdr . classic . tiff_diroff
LEAF_NODE	196:15	196:15	11	(
TYPE_NAME	196:16	196:16	11	char
LEAF_NODE	196:16	196:16	12	char
LEAF_NODE	196:20	196:20	11	*
LEAF_NODE	196:21	196:21	11	)
UNARY_EXPR	196:23	196:24	11	& hdr . classic . tiff_diroff
UNARY_OPERATOR	196:23	196:23	12	&
LEAF_NODE	196:23	196:23	13	&
FIELD	196:24	196:36	12	hdr . classic . tiff_diroff
LEAF_NODE	196:24	196:24	13	hdr
LEAF_NODE	196:27	196:27	13	.
LEAF_NODE	196:28	196:28	13	classic
LEAF_NODE	196:35	196:35	13	.
LEAF_NODE	196:36	196:36	13	tiff_diroff
LEAF_NODE	196:47	196:47	10	,
ARGUMENT	196:49	196:49	10	4
FIELD	196:49	196:49	11	4
LEAF_NODE	196:49	196:49	12	4
LEAF_NODE	196:50	196:50	10	)
EQ_OPERATOR	196:52	196:52	9	!=
LEAF_NODE	196:52	196:52	10	!=
FIELD	196:55	196:55	9	4
LEAF_NODE	196:55	196:55	10	4
LEAF_NODE	196:56	196:56	7	)
STATEMENTS	197:3	197:3	7	
EXPR_STATEMENT	197:3	197:27	8	ReadError ( "TIFF header" ) ;
EXPR	197:3	197:3	9	ReadError ( "TIFF header" )
FUNCTION_CALL	197:3	197:26	10	ReadError ( "TIFF header" )
CALLEE	197:3	197:3	11	ReadError
LEAF_NODE	197:3	197:3	12	ReadError
LEAF_NODE	197:12	197:12	11	(
ARGUMENT	197:13	197:13	11	"TIFF header"
FIELD	197:13	197:13	12	"TIFF header"
LEAF_NODE	197:13	197:13	13	"TIFF header"
LEAF_NODE	197:26	197:26	11	)
LEAF_NODE	197:27	197:27	9	;
SELECTION	198:2	199:3	6	
KEYWORD	198:2	198:2	7	if
LEAF_NODE	198:2	198:2	8	if
LEAF_NODE	198:5	198:5	7	(
CONDITION	198:6	198:6	7	swabflag
EXPR	198:6	198:6	8	swabflag
FIELD	198:6	198:6	9	swabflag
LEAF_NODE	198:6	198:6	10	swabflag
LEAF_NODE	198:14	198:14	7	)
STATEMENTS	199:3	199:3	7	
EXPR_STATEMENT	199:3	199:41	8	TIFFSwabLong ( & hdr . classic . tiff_diroff ) ;
EXPR	199:3	199:3	9	TIFFSwabLong ( & hdr . classic . tiff_diroff )
FUNCTION_CALL	199:3	199:40	10	TIFFSwabLong ( & hdr . classic . tiff_diroff )
CALLEE	199:3	199:3	11	TIFFSwabLong
LEAF_NODE	199:3	199:3	12	TIFFSwabLong
LEAF_NODE	199:15	199:15	11	(
ARGUMENT	199:16	199:16	11	& hdr . classic . tiff_diroff
UNARY_EXPR	199:16	199:17	12	& hdr . classic . tiff_diroff
UNARY_OPERATOR	199:16	199:16	13	&
LEAF_NODE	199:16	199:16	14	&
FIELD	199:17	199:29	13	hdr . classic . tiff_diroff
LEAF_NODE	199:17	199:17	14	hdr
LEAF_NODE	199:20	199:20	14	.
LEAF_NODE	199:21	199:21	14	classic
LEAF_NODE	199:28	199:28	14	.
LEAF_NODE	199:29	199:29	14	tiff_diroff
LEAF_NODE	199:40	199:40	11	)
LEAF_NODE	199:41	199:41	9	;
EXPR_STATEMENT	200:2	203:23	6	printf ( "Magic: %#x <%s-endian> Version: %#x <%s>\n" , hdr . classic . tiff_magic , hdr . classic . tiff_magic == TIFF_BIGENDIAN ? "big" : "little" , 42 , "ClassicTIFF" ) ;
EXPR	200:2	200:2	7	printf ( "Magic: %#x <%s-endian> Version: %#x <%s>\n" , hdr . classic . tiff_magic , hdr . classic . tiff_magic == TIFF_BIGENDIAN ? "big" : "little" , 42 , "ClassicTIFF" )
FUNCTION_CALL	200:2	203:22	8	printf ( "Magic: %#x <%s-endian> Version: %#x <%s>\n" , hdr . classic . tiff_magic , hdr . classic . tiff_magic == TIFF_BIGENDIAN ? "big" : "little" , 42 , "ClassicTIFF" )
CALLEE	200:2	200:2	9	printf
LEAF_NODE	200:2	200:2	10	printf
LEAF_NODE	200:8	200:8	9	(
ARGUMENT	200:9	200:9	9	"Magic: %#x <%s-endian> Version: %#x <%s>\n"
FIELD	200:9	200:9	10	"Magic: %#x <%s-endian> Version: %#x <%s>\n"
LEAF_NODE	200:9	200:9	11	"Magic: %#x <%s-endian> Version: %#x <%s>\n"
LEAF_NODE	200:53	200:53	9	,
ARGUMENT	201:6	201:6	9	hdr . classic . tiff_magic
FIELD	201:6	201:18	10	hdr . classic . tiff_magic
LEAF_NODE	201:6	201:6	11	hdr
LEAF_NODE	201:9	201:9	11	.
LEAF_NODE	201:10	201:10	11	classic
LEAF_NODE	201:17	201:17	11	.
LEAF_NODE	201:18	201:18	11	tiff_magic
LEAF_NODE	201:28	201:28	9	,
ARGUMENT	202:6	202:6	9	hdr . classic . tiff_magic == TIFF_BIGENDIAN ? "big" : "little"
COND_EXPR	202:6	202:57	10	hdr . classic . tiff_magic == TIFF_BIGENDIAN ? "big" : "little"
CONDITION	202:6	202:32	11	hdr . classic . tiff_magic == TIFF_BIGENDIAN
FIELD	202:6	202:18	12	hdr . classic . tiff_magic
LEAF_NODE	202:6	202:6	13	hdr
LEAF_NODE	202:9	202:9	13	.
LEAF_NODE	202:10	202:10	13	classic
LEAF_NODE	202:17	202:17	13	.
LEAF_NODE	202:18	202:18	13	tiff_magic
EQ_OPERATOR	202:29	202:29	12	==
LEAF_NODE	202:29	202:29	13	==
FIELD	202:32	202:32	12	TIFF_BIGENDIAN
LEAF_NODE	202:32	202:32	13	TIFF_BIGENDIAN
LEAF_NODE	202:47	202:47	11	?
EXPR	202:49	202:49	11	"big"
FIELD	202:49	202:49	12	"big"
LEAF_NODE	202:49	202:49	13	"big"
LEAF_NODE	202:55	202:55	11	:
FIELD	202:57	202:57	11	"little"
LEAF_NODE	202:57	202:57	12	"little"
LEAF_NODE	202:65	202:65	9	,
ARGUMENT	203:6	203:6	9	42
FIELD	203:6	203:6	10	42
LEAF_NODE	203:6	203:6	11	42
LEAF_NODE	203:8	203:8	9	,
ARGUMENT	203:9	203:9	9	"ClassicTIFF"
FIELD	203:9	203:9	10	"ClassicTIFF"
LEAF_NODE	203:9	203:9	11	"ClassicTIFF"
LEAF_NODE	203:22	203:22	9	)
LEAF_NODE	203:23	203:23	7	;
SELECTION	204:2	205:3	6	
KEYWORD	204:2	204:2	7	if
LEAF_NODE	204:2	204:2	8	if
LEAF_NODE	204:5	204:5	7	(
CONDITION	204:6	204:6	7	diroff == 0
EXPR	204:6	204:16	8	diroff == 0
FIELD	204:6	204:6	9	diroff
LEAF_NODE	204:6	204:6	10	diroff
EQ_OPERATOR	204:13	204:13	9	==
LEAF_NODE	204:13	204:13	10	==
FIELD	204:16	204:16	9	0
LEAF_NODE	204:16	204:16	10	0
LEAF_NODE	204:17	204:17	7	)
STATEMENTS	205:3	205:3	7	
EXPR_STATEMENT	205:3	205:35	8	diroff = hdr . classic . tiff_diroff ;
EXPR	205:3	205:3	9	diroff = hdr . classic . tiff_diroff
ASSIGN	205:3	205:12	10	diroff = hdr . classic . tiff_diroff
LVAL	205:3	205:3	11	diroff
FIELD	205:3	205:3	12	diroff
LEAF_NODE	205:3	205:3	13	diroff
ASSIGN_OP	205:10	205:10	11	=
LEAF_NODE	205:10	205:10	12	=
RVAL	205:12	205:12	11	hdr . classic . tiff_diroff
FIELD	205:12	205:24	12	hdr . classic . tiff_diroff
LEAF_NODE	205:12	205:12	13	hdr
LEAF_NODE	205:15	205:15	13	.
LEAF_NODE	205:16	205:16	13	classic
LEAF_NODE	205:23	205:23	13	.
LEAF_NODE	205:24	205:24	13	tiff_diroff
LEAF_NODE	205:35	205:35	9	;
LEAF_NODE	206:1	206:1	5	}
SELECTION	207:1	207:6	3	
KEYWORD	207:1	207:1	4	else
LEAF_NODE	207:1	207:1	5	else
STATEMENTS	207:6	207:6	4	
SELECTION	207:6	208:1	5	
KEYWORD	207:6	207:6	6	if
LEAF_NODE	207:6	207:6	7	if
LEAF_NODE	207:9	207:9	6	(
CONDITION	207:10	207:10	6	hdr . common . tiff_version == 43
EXPR	207:10	207:35	7	hdr . common . tiff_version == 43
FIELD	207:10	207:21	8	hdr . common . tiff_version
LEAF_NODE	207:10	207:10	9	hdr
LEAF_NODE	207:13	207:13	9	.
LEAF_NODE	207:14	207:14	9	common
LEAF_NODE	207:20	207:20	9	.
LEAF_NODE	207:21	207:21	9	tiff_version
EQ_OPERATOR	207:33	207:33	8	==
LEAF_NODE	207:33	207:33	9	==
FIELD	207:35	207:35	8	43
LEAF_NODE	207:35	207:35	9	43
LEAF_NODE	207:37	207:37	6	)
STATEMENTS	208:1	226:1	6	
LEAF_NODE	208:1	208:1	7	{
STATEMENTS	209:2	225:2	7	
SELECTION	209:2	210:3	8	
KEYWORD	209:2	209:2	9	if
LEAF_NODE	209:2	209:2	10	if
LEAF_NODE	209:5	209:5	9	(
CONDITION	209:6	209:6	9	read ( fd , ( char * ) & hdr . big . tiff_offsetsize , 12 ) != 12
EXPR	209:6	209:56	10	read ( fd , ( char * ) & hdr . big . tiff_offsetsize , 12 ) != 12
FUNCTION_CALL	209:6	209:51	11	read ( fd , ( char * ) & hdr . big . tiff_offsetsize , 12 )
CALLEE	209:6	209:6	12	read
LEAF_NODE	209:6	209:6	13	read
LEAF_NODE	209:10	209:10	12	(
ARGUMENT	209:11	209:11	12	fd
FIELD	209:11	209:11	13	fd
LEAF_NODE	209:11	209:11	14	fd
LEAF_NODE	209:13	209:13	12	,
ARGUMENT	209:15	209:23	12	( char * ) & hdr . big . tiff_offsetsize
LEAF_NODE	209:15	209:15	13	(
TYPE_NAME	209:16	209:16	13	char
LEAF_NODE	209:16	209:16	14	char
LEAF_NODE	209:20	209:20	13	*
LEAF_NODE	209:21	209:21	13	)
UNARY_EXPR	209:23	209:24	13	& hdr . big . tiff_offsetsize
UNARY_OPERATOR	209:23	209:23	14	&
LEAF_NODE	209:23	209:23	15	&
FIELD	209:24	209:32	14	hdr . big . tiff_offsetsize
LEAF_NODE	209:24	209:24	15	hdr
LEAF_NODE	209:27	209:27	15	.
LEAF_NODE	209:28	209:28	15	big
LEAF_NODE	209:31	209:31	15	.
LEAF_NODE	209:32	209:32	15	tiff_offsetsize
LEAF_NODE	209:47	209:47	12	,
ARGUMENT	209:49	209:49	12	12
FIELD	209:49	209:49	13	12
LEAF_NODE	209:49	209:49	14	12
LEAF_NODE	209:51	209:51	12	)
EQ_OPERATOR	209:53	209:53	11	!=
LEAF_NODE	209:53	209:53	12	!=
FIELD	209:56	209:56	11	12
LEAF_NODE	209:56	209:56	12	12
LEAF_NODE	209:58	209:58	9	)
STATEMENTS	210:3	210:3	9	
EXPR_STATEMENT	210:3	210:27	10	ReadError ( "TIFF header" ) ;
EXPR	210:3	210:3	11	ReadError ( "TIFF header" )
FUNCTION_CALL	210:3	210:26	12	ReadError ( "TIFF header" )
CALLEE	210:3	210:3	13	ReadError
LEAF_NODE	210:3	210:3	14	ReadError
LEAF_NODE	210:12	210:12	13	(
ARGUMENT	210:13	210:13	13	"TIFF header"
FIELD	210:13	210:13	14	"TIFF header"
LEAF_NODE	210:13	210:13	15	"TIFF header"
LEAF_NODE	210:26	210:26	13	)
LEAF_NODE	210:27	210:27	11	;
SELECTION	211:2	212:2	8	
KEYWORD	211:2	211:2	9	if
LEAF_NODE	211:2	211:2	10	if
LEAF_NODE	211:5	211:5	9	(
CONDITION	211:6	211:6	9	swabflag
EXPR	211:6	211:6	10	swabflag
FIELD	211:6	211:6	11	swabflag
LEAF_NODE	211:6	211:6	12	swabflag
LEAF_NODE	211:14	211:14	9	)
STATEMENTS	212:2	216:2	9	
LEAF_NODE	212:2	212:2	10	{
STATEMENTS	213:3	215:3	10	
EXPR_STATEMENT	213:3	213:42	11	TIFFSwabShort ( & hdr . big . tiff_offsetsize ) ;
EXPR	213:3	213:3	12	TIFFSwabShort ( & hdr . big . tiff_offsetsize )
FUNCTION_CALL	213:3	213:41	13	TIFFSwabShort ( & hdr . big . tiff_offsetsize )
CALLEE	213:3	213:3	14	TIFFSwabShort
LEAF_NODE	213:3	213:3	15	TIFFSwabShort
LEAF_NODE	213:16	213:16	14	(
ARGUMENT	213:17	213:17	14	& hdr . big . tiff_offsetsize
UNARY_EXPR	213:17	213:18	15	& hdr . big . tiff_offsetsize
UNARY_OPERATOR	213:17	213:17	16	&
LEAF_NODE	213:17	213:17	17	&
FIELD	213:18	213:26	16	hdr . big . tiff_offsetsize
LEAF_NODE	213:18	213:18	17	hdr
LEAF_NODE	213:21	213:21	17	.
LEAF_NODE	213:22	213:22	17	big
LEAF_NODE	213:25	213:25	17	.
LEAF_NODE	213:26	213:26	17	tiff_offsetsize
LEAF_NODE	213:41	213:41	14	)
LEAF_NODE	213:42	213:42	12	;
EXPR_STATEMENT	214:3	214:38	11	TIFFSwabShort ( & hdr . big . tiff_unused ) ;
EXPR	214:3	214:3	12	TIFFSwabShort ( & hdr . big . tiff_unused )
FUNCTION_CALL	214:3	214:37	13	TIFFSwabShort ( & hdr . big . tiff_unused )
CALLEE	214:3	214:3	14	TIFFSwabShort
LEAF_NODE	214:3	214:3	15	TIFFSwabShort
LEAF_NODE	214:16	214:16	14	(
ARGUMENT	214:17	214:17	14	& hdr . big . tiff_unused
UNARY_EXPR	214:17	214:18	15	& hdr . big . tiff_unused
UNARY_OPERATOR	214:17	214:17	16	&
LEAF_NODE	214:17	214:17	17	&
FIELD	214:18	214:26	16	hdr . big . tiff_unused
LEAF_NODE	214:18	214:18	17	hdr
LEAF_NODE	214:21	214:21	17	.
LEAF_NODE	214:22	214:22	17	big
LEAF_NODE	214:25	214:25	17	.
LEAF_NODE	214:26	214:26	17	tiff_unused
LEAF_NODE	214:37	214:37	14	)
LEAF_NODE	214:38	214:38	12	;
EXPR_STATEMENT	215:3	215:38	11	TIFFSwabLong8 ( & hdr . big . tiff_diroff ) ;
EXPR	215:3	215:3	12	TIFFSwabLong8 ( & hdr . big . tiff_diroff )
FUNCTION_CALL	215:3	215:37	13	TIFFSwabLong8 ( & hdr . big . tiff_diroff )
CALLEE	215:3	215:3	14	TIFFSwabLong8
LEAF_NODE	215:3	215:3	15	TIFFSwabLong8
LEAF_NODE	215:16	215:16	14	(
ARGUMENT	215:17	215:17	14	& hdr . big . tiff_diroff
UNARY_EXPR	215:17	215:18	15	& hdr . big . tiff_diroff
UNARY_OPERATOR	215:17	215:17	16	&
LEAF_NODE	215:17	215:17	17	&
FIELD	215:18	215:26	16	hdr . big . tiff_diroff
LEAF_NODE	215:18	215:18	17	hdr
LEAF_NODE	215:21	215:21	17	.
LEAF_NODE	215:22	215:22	17	big
LEAF_NODE	215:25	215:25	17	.
LEAF_NODE	215:26	215:26	17	tiff_diroff
LEAF_NODE	215:37	215:37	14	)
LEAF_NODE	215:38	215:38	12	;
LEAF_NODE	216:2	216:2	10	}
EXPR_STATEMENT	217:2	220:19	8	printf ( "Magic: %#x <%s-endian> Version: %#x <%s>\n" , hdr . big . tiff_magic , hdr . big . tiff_magic == TIFF_BIGENDIAN ? "big" : "little" , 43 , "BigTIFF" ) ;
EXPR	217:2	217:2	9	printf ( "Magic: %#x <%s-endian> Version: %#x <%s>\n" , hdr . big . tiff_magic , hdr . big . tiff_magic == TIFF_BIGENDIAN ? "big" : "little" , 43 , "BigTIFF" )
FUNCTION_CALL	217:2	220:18	10	printf ( "Magic: %#x <%s-endian> Version: %#x <%s>\n" , hdr . big . tiff_magic , hdr . big . tiff_magic == TIFF_BIGENDIAN ? "big" : "little" , 43 , "BigTIFF" )
CALLEE	217:2	217:2	11	printf
LEAF_NODE	217:2	217:2	12	printf
LEAF_NODE	217:8	217:8	11	(
ARGUMENT	217:9	217:9	11	"Magic: %#x <%s-endian> Version: %#x <%s>\n"
FIELD	217:9	217:9	12	"Magic: %#x <%s-endian> Version: %#x <%s>\n"
LEAF_NODE	217:9	217:9	13	"Magic: %#x <%s-endian> Version: %#x <%s>\n"
LEAF_NODE	217:53	217:53	11	,
ARGUMENT	218:6	218:6	11	hdr . big . tiff_magic
FIELD	218:6	218:14	12	hdr . big . tiff_magic
LEAF_NODE	218:6	218:6	13	hdr
LEAF_NODE	218:9	218:9	13	.
LEAF_NODE	218:10	218:10	13	big
LEAF_NODE	218:13	218:13	13	.
LEAF_NODE	218:14	218:14	13	tiff_magic
LEAF_NODE	218:24	218:24	11	,
ARGUMENT	219:6	219:6	11	hdr . big . tiff_magic == TIFF_BIGENDIAN ? "big" : "little"
COND_EXPR	219:6	219:53	12	hdr . big . tiff_magic == TIFF_BIGENDIAN ? "big" : "little"
CONDITION	219:6	219:28	13	hdr . big . tiff_magic == TIFF_BIGENDIAN
FIELD	219:6	219:14	14	hdr . big . tiff_magic
LEAF_NODE	219:6	219:6	15	hdr
LEAF_NODE	219:9	219:9	15	.
LEAF_NODE	219:10	219:10	15	big
LEAF_NODE	219:13	219:13	15	.
LEAF_NODE	219:14	219:14	15	tiff_magic
EQ_OPERATOR	219:25	219:25	14	==
LEAF_NODE	219:25	219:25	15	==
FIELD	219:28	219:28	14	TIFF_BIGENDIAN
LEAF_NODE	219:28	219:28	15	TIFF_BIGENDIAN
LEAF_NODE	219:43	219:43	13	?
EXPR	219:45	219:45	13	"big"
FIELD	219:45	219:45	14	"big"
LEAF_NODE	219:45	219:45	15	"big"
LEAF_NODE	219:51	219:51	13	:
FIELD	219:53	219:53	13	"little"
LEAF_NODE	219:53	219:53	14	"little"
LEAF_NODE	219:61	219:61	11	,
ARGUMENT	220:6	220:6	11	43
FIELD	220:6	220:6	12	43
LEAF_NODE	220:6	220:6	13	43
LEAF_NODE	220:8	220:8	11	,
ARGUMENT	220:9	220:9	11	"BigTIFF"
FIELD	220:9	220:9	12	"BigTIFF"
LEAF_NODE	220:9	220:9	13	"BigTIFF"
LEAF_NODE	220:18	220:18	11	)
LEAF_NODE	220:19	220:19	9	;
EXPR_STATEMENT	221:2	222:50	8	printf ( "OffsetSize: %#x Unused: %#x\n" , hdr . big . tiff_offsetsize , hdr . big . tiff_unused ) ;
EXPR	221:2	221:2	9	printf ( "OffsetSize: %#x Unused: %#x\n" , hdr . big . tiff_offsetsize , hdr . big . tiff_unused )
FUNCTION_CALL	221:2	222:49	10	printf ( "OffsetSize: %#x Unused: %#x\n" , hdr . big . tiff_offsetsize , hdr . big . tiff_unused )
CALLEE	221:2	221:2	11	printf
LEAF_NODE	221:2	221:2	12	printf
LEAF_NODE	221:8	221:8	11	(
ARGUMENT	221:9	221:9	11	"OffsetSize: %#x Unused: %#x\n"
FIELD	221:9	221:9	12	"OffsetSize: %#x Unused: %#x\n"
LEAF_NODE	221:9	221:9	13	"OffsetSize: %#x Unused: %#x\n"
LEAF_NODE	221:40	221:40	11	,
ARGUMENT	222:6	222:6	11	hdr . big . tiff_offsetsize
FIELD	222:6	222:14	12	hdr . big . tiff_offsetsize
LEAF_NODE	222:6	222:6	13	hdr
LEAF_NODE	222:9	222:9	13	.
LEAF_NODE	222:10	222:10	13	big
LEAF_NODE	222:13	222:13	13	.
LEAF_NODE	222:14	222:14	13	tiff_offsetsize
LEAF_NODE	222:29	222:29	11	,
ARGUMENT	222:30	222:30	11	hdr . big . tiff_unused
FIELD	222:30	222:38	12	hdr . big . tiff_unused
LEAF_NODE	222:30	222:30	13	hdr
LEAF_NODE	222:33	222:33	13	.
LEAF_NODE	222:34	222:34	13	big
LEAF_NODE	222:37	222:37	13	.
LEAF_NODE	222:38	222:38	13	tiff_unused
LEAF_NODE	222:49	222:49	11	)
LEAF_NODE	222:50	222:50	9	;
SELECTION	223:2	224:3	8	
KEYWORD	223:2	223:2	9	if
LEAF_NODE	223:2	223:2	10	if
LEAF_NODE	223:5	223:5	9	(
CONDITION	223:6	223:6	9	diroff == 0
EXPR	223:6	223:16	10	diroff == 0
FIELD	223:6	223:6	11	diroff
LEAF_NODE	223:6	223:6	12	diroff
EQ_OPERATOR	223:13	223:13	11	==
LEAF_NODE	223:13	223:13	12	==
FIELD	223:16	223:16	11	0
LEAF_NODE	223:16	223:16	12	0
LEAF_NODE	223:17	223:17	9	)
STATEMENTS	224:3	224:3	9	
EXPR_STATEMENT	224:3	224:31	10	diroff = hdr . big . tiff_diroff ;
EXPR	224:3	224:3	11	diroff = hdr . big . tiff_diroff
ASSIGN	224:3	224:12	12	diroff = hdr . big . tiff_diroff
LVAL	224:3	224:3	13	diroff
FIELD	224:3	224:3	14	diroff
LEAF_NODE	224:3	224:3	15	diroff
ASSIGN_OP	224:10	224:10	13	=
LEAF_NODE	224:10	224:10	14	=
RVAL	224:12	224:12	13	hdr . big . tiff_diroff
FIELD	224:12	224:20	14	hdr . big . tiff_diroff
LEAF_NODE	224:12	224:12	15	hdr
LEAF_NODE	224:15	224:15	15	.
LEAF_NODE	224:16	224:16	15	big
LEAF_NODE	224:19	224:19	15	.
LEAF_NODE	224:20	224:20	15	tiff_diroff
LEAF_NODE	224:31	224:31	11	;
EXPR_STATEMENT	225:2	225:13	8	bigtiff = 1 ;
EXPR	225:2	225:2	9	bigtiff = 1
ASSIGN	225:2	225:12	10	bigtiff = 1
LVAL	225:2	225:2	11	bigtiff
FIELD	225:2	225:2	12	bigtiff
LEAF_NODE	225:2	225:2	13	bigtiff
ASSIGN_OP	225:10	225:10	11	=
LEAF_NODE	225:10	225:10	12	=
RVAL	225:12	225:12	11	1
FIELD	225:12	225:12	12	1
LEAF_NODE	225:12	225:12	13	1
LEAF_NODE	225:13	225:13	9	;
LEAF_NODE	226:1	226:1	7	}
SELECTION	227:1	228:2	3	
KEYWORD	227:1	227:1	4	else
LEAF_NODE	227:1	227:1	5	else
STATEMENTS	228:2	228:2	4	
EXPR_STATEMENT	228:2	229:55	5	Fatal ( "Not a TIFF file, bad version number %u (%#x)" , hdr . common . tiff_version , hdr . common . tiff_version ) ;
EXPR	228:2	228:2	6	Fatal ( "Not a TIFF file, bad version number %u (%#x)" , hdr . common . tiff_version , hdr . common . tiff_version )
FUNCTION_CALL	228:2	229:54	7	Fatal ( "Not a TIFF file, bad version number %u (%#x)" , hdr . common . tiff_version , hdr . common . tiff_version )
CALLEE	228:2	228:2	8	Fatal
LEAF_NODE	228:2	228:2	9	Fatal
LEAF_NODE	228:7	228:7	8	(
ARGUMENT	228:8	228:8	8	"Not a TIFF file, bad version number %u (%#x)"
FIELD	228:8	228:8	9	"Not a TIFF file, bad version number %u (%#x)"
LEAF_NODE	228:8	228:8	10	"Not a TIFF file, bad version number %u (%#x)"
LEAF_NODE	228:54	228:54	8	,
ARGUMENT	229:6	229:6	8	hdr . common . tiff_version
FIELD	229:6	229:17	9	hdr . common . tiff_version
LEAF_NODE	229:6	229:6	10	hdr
LEAF_NODE	229:9	229:9	10	.
LEAF_NODE	229:10	229:10	10	common
LEAF_NODE	229:16	229:16	10	.
LEAF_NODE	229:17	229:17	10	tiff_version
LEAF_NODE	229:29	229:29	8	,
ARGUMENT	229:31	229:31	8	hdr . common . tiff_version
FIELD	229:31	229:42	9	hdr . common . tiff_version
LEAF_NODE	229:31	229:31	10	hdr
LEAF_NODE	229:34	229:34	10	.
LEAF_NODE	229:35	229:35	10	common
LEAF_NODE	229:41	229:41	10	.
LEAF_NODE	229:42	229:42	10	tiff_version
LEAF_NODE	229:54	229:54	8	)
LEAF_NODE	229:55	229:55	6	;
ITERATION	230:1	230:31	3	
KEYWORD	230:1	230:1	4	for
LEAF_NODE	230:1	230:1	5	for
LEAF_NODE	230:5	230:5	4	(
FOR_INIT	230:6	230:11	4	i = 0 ;
EXPR	230:6	230:6	5	i = 0
ASSIGN	230:6	230:10	6	i = 0
LVAL	230:6	230:6	7	i
FIELD	230:6	230:6	8	i
LEAF_NODE	230:6	230:6	9	i
ASSIGN_OP	230:8	230:8	7	=
LEAF_NODE	230:8	230:8	8	=
RVAL	230:10	230:10	7	0
FIELD	230:10	230:10	8	0
LEAF_NODE	230:10	230:10	9	0
LEAF_NODE	230:11	230:11	5	;
CONDITION	230:13	230:13	4	diroff != 0
EXPR	230:13	230:23	5	diroff != 0
FIELD	230:13	230:13	6	diroff
LEAF_NODE	230:13	230:13	7	diroff
EQ_OPERATOR	230:20	230:20	6	!=
LEAF_NODE	230:20	230:20	7	!=
FIELD	230:23	230:23	6	0
LEAF_NODE	230:23	230:23	7	0
LEAF_NODE	230:24	230:24	4	;
FOR_EXPR	230:26	230:26	4	i ++
EXPR	230:26	230:26	5	i ++
FIELD	230:26	230:27	6	i ++
LEAF_NODE	230:26	230:26	7	i
LEAF_NODE	230:27	230:27	7	++
LEAF_NODE	230:29	230:29	4	)
STATEMENTS	230:31	262:1	4	
LEAF_NODE	230:31	230:31	5	{
STATEMENTS	231:2	261:2	5	
ITERATION	231:2	232:2	6	
KEYWORD	231:2	231:2	7	for
LEAF_NODE	231:2	231:2	8	for
LEAF_NODE	231:5	231:5	7	(
FOR_INIT	231:6	231:9	7	j = 0 ;
EXPR	231:6	231:6	8	j = 0
ASSIGN	231:6	231:8	9	j = 0
LVAL	231:6	231:6	10	j
FIELD	231:6	231:6	11	j
LEAF_NODE	231:6	231:6	12	j
ASSIGN_OP	231:7	231:7	10	=
LEAF_NODE	231:7	231:7	11	=
RVAL	231:8	231:8	10	0
FIELD	231:8	231:8	11	0
LEAF_NODE	231:8	231:8	12	0
LEAF_NODE	231:9	231:9	8	;
CONDITION	231:11	231:11	7	j < count_visited_dir
EXPR	231:11	231:13	8	j < count_visited_dir
FIELD	231:11	231:11	9	j
LEAF_NODE	231:11	231:11	10	j
REL_OPERATOR	231:12	231:12	9	<
LEAF_NODE	231:12	231:12	10	<
FIELD	231:13	231:13	9	count_visited_dir
LEAF_NODE	231:13	231:13	10	count_visited_dir
LEAF_NODE	231:30	231:30	7	;
FOR_EXPR	231:32	231:32	7	j ++
EXPR	231:32	231:32	8	j ++
FIELD	231:32	231:33	9	j ++
LEAF_NODE	231:32	231:32	10	j
LEAF_NODE	231:33	231:33	10	++
LEAF_NODE	231:35	231:35	7	)
STATEMENTS	232:2	238:2	7	
LEAF_NODE	232:2	232:2	8	{
STATEMENTS	233:6	233:6	8	
SELECTION	233:6	234:6	9	
KEYWORD	233:6	233:6	10	if
LEAF_NODE	233:6	233:6	11	if
LEAF_NODE	233:8	233:8	10	(
CONDITION	233:10	233:10	10	visited_diroff [ j ] == diroff
EXPR	233:10	233:31	11	visited_diroff [ j ] == diroff
FIELD	233:10	233:26	12	visited_diroff [ j ]
LEAF_NODE	233:10	233:10	13	visited_diroff
LEAF_NODE	233:24	233:24	13	[
EXPR	233:25	233:25	13	j
FIELD	233:25	233:25	14	j
LEAF_NODE	233:25	233:25	15	j
LEAF_NODE	233:26	233:26	13	]
EQ_OPERATOR	233:28	233:28	12	==
LEAF_NODE	233:28	233:28	13	==
FIELD	233:31	233:31	12	diroff
LEAF_NODE	233:31	233:31	13	diroff
LEAF_NODE	233:38	233:38	10	)
STATEMENTS	234:6	237:6	10	
LEAF_NODE	234:6	234:6	11	{
STATEMENTS	235:3	236:3	11	
EXPR_STATEMENT	235:3	235:23	12	free ( visited_diroff ) ;
EXPR	235:3	235:3	13	free ( visited_diroff )
FUNCTION_CALL	235:3	235:22	14	free ( visited_diroff )
CALLEE	235:3	235:3	15	free
LEAF_NODE	235:3	235:3	16	free
LEAF_NODE	235:7	235:7	15	(
ARGUMENT	235:8	235:8	15	visited_diroff
FIELD	235:8	235:8	16	visited_diroff
LEAF_NODE	235:8	235:8	17	visited_diroff
LEAF_NODE	235:22	235:22	15	)
LEAF_NODE	235:23	235:23	13	;
EXPR_STATEMENT	236:3	236:59	12	Fatal ( "Cycle detected in chaining of TIFF directories!" ) ;
EXPR	236:3	236:3	13	Fatal ( "Cycle detected in chaining of TIFF directories!" )
FUNCTION_CALL	236:3	236:58	14	Fatal ( "Cycle detected in chaining of TIFF directories!" )
CALLEE	236:3	236:3	15	Fatal
LEAF_NODE	236:3	236:3	16	Fatal
LEAF_NODE	236:8	236:8	15	(
ARGUMENT	236:9	236:9	15	"Cycle detected in chaining of TIFF directories!"
FIELD	236:9	236:9	16	"Cycle detected in chaining of TIFF directories!"
LEAF_NODE	236:9	236:9	17	"Cycle detected in chaining of TIFF directories!"
LEAF_NODE	236:58	236:58	15	)
LEAF_NODE	236:59	236:59	13	;
LEAF_NODE	237:6	237:6	11	}
LEAF_NODE	238:2	238:2	8	}
LEAF_NODE	239:16	239:16	6	{
STATEMENTS	240:20	249:20	6	
SIMPLE_DECL	240:20	240:37	7	size_t alloc_size ;
VAR_DECL	240:20	240:27	8	size_t alloc_size
TYPE	240:20	240:20	9	size_t
TYPE_NAME	240:20	240:20	10	size_t
LEAF_NODE	240:20	240:20	11	size_t
NAME	240:27	240:27	9	alloc_size
LEAF_NODE	240:27	240:27	10	alloc_size
LEAF_NODE	240:37	240:37	8	;
EXPR_STATEMENT	241:20	242:63	7	alloc_size = TIFFSafeMultiply ( tmsize_t , ( count_visited_dir + 1 ) , sizeof ( uint64 ) ) ;
EXPR	241:20	241:20	8	alloc_size = TIFFSafeMultiply ( tmsize_t , ( count_visited_dir + 1 ) , sizeof ( uint64 ) )
ASSIGN	241:20	241:31	9	alloc_size = TIFFSafeMultiply ( tmsize_t , ( count_visited_dir + 1 ) , sizeof ( uint64 ) )
LVAL	241:20	241:20	10	alloc_size
FIELD	241:20	241:20	11	alloc_size
LEAF_NODE	241:20	241:20	12	alloc_size
ASSIGN_OP	241:30	241:30	10	=
LEAF_NODE	241:30	241:30	11	=
RVAL	241:31	241:31	10	TIFFSafeMultiply ( tmsize_t , ( count_visited_dir + 1 ) , sizeof ( uint64 ) )
FUNCTION_CALL	241:31	242:62	11	TIFFSafeMultiply ( tmsize_t , ( count_visited_dir + 1 ) , sizeof ( uint64 ) )
CALLEE	241:31	241:31	12	TIFFSafeMultiply
LEAF_NODE	241:31	241:31	13	TIFFSafeMultiply
LEAF_NODE	241:47	241:47	12	(
ARGUMENT	241:48	241:48	12	tmsize_t
FIELD	241:48	241:48	13	tmsize_t
LEAF_NODE	241:48	241:48	14	tmsize_t
LEAF_NODE	241:56	241:56	12	,
ARGUMENT	241:57	241:79	12	( count_visited_dir + 1 )
LEAF_NODE	241:57	241:57	13	(
FIELD	241:58	241:58	13	count_visited_dir
LEAF_NODE	241:58	241:58	14	count_visited_dir
LEAF_NODE	241:76	241:76	13	+
FIELD	241:78	241:78	13	1
LEAF_NODE	241:78	241:78	14	1
LEAF_NODE	241:79	241:79	13	)
LEAF_NODE	241:80	241:80	12	,
ARGUMENT	242:48	242:48	12	sizeof ( uint64 )
FUNCTION_CALL	242:48	242:61	13	sizeof ( uint64 )
CALLEE	242:48	242:48	14	sizeof
LEAF_NODE	242:48	242:48	15	sizeof
LEAF_NODE	242:54	242:54	14	(
ARGUMENT	242:55	242:55	14	uint64
FIELD	242:55	242:55	15	uint64
LEAF_NODE	242:55	242:55	16	uint64
LEAF_NODE	242:61	242:61	14	)
LEAF_NODE	242:62	242:62	12	)
LEAF_NODE	242:63	242:63	8	;
SELECTION	243:20	244:20	7	
KEYWORD	243:20	243:20	8	if
LEAF_NODE	243:20	243:20	9	if
LEAF_NODE	243:23	243:23	8	(
CONDITION	243:24	243:24	8	alloc_size == 0
EXPR	243:24	243:38	9	alloc_size == 0
FIELD	243:24	243:24	10	alloc_size
LEAF_NODE	243:24	243:24	11	alloc_size
EQ_OPERATOR	243:35	243:35	10	==
LEAF_NODE	243:35	243:35	11	==
FIELD	243:38	243:38	10	0
LEAF_NODE	243:38	243:38	11	0
LEAF_NODE	243:39	243:39	8	)
STATEMENTS	244:20	248:20	8	
LEAF_NODE	244:20	244:20	9	{
STATEMENTS	245:24	247:24	9	
SELECTION	245:24	246:28	10	
KEYWORD	245:24	245:24	11	if
LEAF_NODE	245:24	245:24	12	if
LEAF_NODE	245:27	245:27	11	(
CONDITION	245:28	245:28	11	visited_diroff
EXPR	245:28	245:28	12	visited_diroff
FIELD	245:28	245:28	13	visited_diroff
LEAF_NODE	245:28	245:28	14	visited_diroff
LEAF_NODE	245:42	245:42	11	)
STATEMENTS	246:28	246:28	11	
EXPR_STATEMENT	246:28	246:48	12	free ( visited_diroff ) ;
EXPR	246:28	246:28	13	free ( visited_diroff )
FUNCTION_CALL	246:28	246:47	14	free ( visited_diroff )
CALLEE	246:28	246:28	15	free
LEAF_NODE	246:28	246:28	16	free
LEAF_NODE	246:32	246:32	15	(
ARGUMENT	246:33	246:33	15	visited_diroff
FIELD	246:33	246:33	16	visited_diroff
LEAF_NODE	246:33	246:33	17	visited_diroff
LEAF_NODE	246:47	246:47	15	)
LEAF_NODE	246:48	246:48	13	;
EXPR_STATEMENT	247:24	247:42	10	visited_diroff = 0 ;
EXPR	247:24	247:24	11	visited_diroff = 0
ASSIGN	247:24	247:41	12	visited_diroff = 0
LVAL	247:24	247:24	13	visited_diroff
FIELD	247:24	247:24	14	visited_diroff
LEAF_NODE	247:24	247:24	15	visited_diroff
ASSIGN_OP	247:39	247:39	13	=
LEAF_NODE	247:39	247:39	14	=
RVAL	247:41	247:41	13	0
FIELD	247:41	247:41	14	0
LEAF_NODE	247:41	247:41	15	0
LEAF_NODE	247:42	247:42	11	;
LEAF_NODE	248:20	248:20	9	}
SELECTION	249:20	250:20	7	
KEYWORD	249:20	249:20	8	else
LEAF_NODE	249:20	249:20	9	else
STATEMENTS	250:20	252:20	8	
LEAF_NODE	250:20	250:20	9	{
STATEMENTS	251:24	251:24	9	
EXPR_STATEMENT	251:24	251:85	10	visited_diroff = ( uint64 * ) realloc ( visited_diroff , alloc_size ) ;
EXPR	251:24	251:24	11	visited_diroff = ( uint64 * ) realloc ( visited_diroff , alloc_size )
ASSIGN	251:24	251:41	12	visited_diroff = ( uint64 * ) realloc ( visited_diroff , alloc_size )
LVAL	251:24	251:24	13	visited_diroff
FIELD	251:24	251:24	14	visited_diroff
LEAF_NODE	251:24	251:24	15	visited_diroff
ASSIGN_OP	251:39	251:39	13	=
LEAF_NODE	251:39	251:39	14	=
RVAL	251:41	251:51	13	( uint64 * ) realloc ( visited_diroff , alloc_size )
LEAF_NODE	251:41	251:41	14	(
TYPE_NAME	251:42	251:42	14	uint64
LEAF_NODE	251:42	251:42	15	uint64
LEAF_NODE	251:48	251:48	14	*
LEAF_NODE	251:49	251:49	14	)
FUNCTION_CALL	251:51	251:84	14	realloc ( visited_diroff , alloc_size )
CALLEE	251:51	251:51	15	realloc
LEAF_NODE	251:51	251:51	16	realloc
LEAF_NODE	251:58	251:58	15	(
ARGUMENT	251:59	251:59	15	visited_diroff
FIELD	251:59	251:59	16	visited_diroff
LEAF_NODE	251:59	251:59	17	visited_diroff
LEAF_NODE	251:73	251:73	15	,
ARGUMENT	251:74	251:74	15	alloc_size
FIELD	251:74	251:74	16	alloc_size
LEAF_NODE	251:74	251:74	17	alloc_size
LEAF_NODE	251:84	251:84	15	)
LEAF_NODE	251:85	251:85	11	;
LEAF_NODE	252:20	252:20	9	}
LEAF_NODE	253:16	253:16	6	}
SELECTION	254:2	255:6	6	
KEYWORD	254:2	254:2	7	if
LEAF_NODE	254:2	254:2	8	if
LEAF_NODE	254:4	254:4	7	(
CONDITION	254:6	254:6	7	! visited_diroff
EXPR	254:6	254:6	8	! visited_diroff
UNARY_EXPR	254:6	254:7	9	! visited_diroff
UNARY_OPERATOR	254:6	254:6	10	!
LEAF_NODE	254:6	254:6	11	!
FIELD	254:7	254:7	10	visited_diroff
LEAF_NODE	254:7	254:7	11	visited_diroff
LEAF_NODE	254:22	254:22	7	)
STATEMENTS	255:6	255:6	7	
EXPR_STATEMENT	255:6	255:28	8	Fatal ( "Out of memory" ) ;
EXPR	255:6	255:6	9	Fatal ( "Out of memory" )
FUNCTION_CALL	255:6	255:27	10	Fatal ( "Out of memory" )
CALLEE	255:6	255:6	11	Fatal
LEAF_NODE	255:6	255:6	12	Fatal
LEAF_NODE	255:11	255:11	11	(
ARGUMENT	255:12	255:12	11	"Out of memory"
FIELD	255:12	255:12	12	"Out of memory"
LEAF_NODE	255:12	255:12	13	"Out of memory"
LEAF_NODE	255:27	255:27	11	)
LEAF_NODE	255:28	255:28	9	;
EXPR_STATEMENT	256:2	256:44	6	visited_diroff [ count_visited_dir ] = diroff ;
EXPR	256:2	256:2	7	visited_diroff [ count_visited_dir ] = diroff
ASSIGN	256:2	256:38	8	visited_diroff [ count_visited_dir ] = diroff
LVAL	256:2	256:2	9	visited_diroff [ count_visited_dir ]
FIELD	256:2	256:34	10	visited_diroff [ count_visited_dir ]
LEAF_NODE	256:2	256:2	11	visited_diroff
LEAF_NODE	256:16	256:16	11	[
EXPR	256:17	256:17	11	count_visited_dir
FIELD	256:17	256:17	12	count_visited_dir
LEAF_NODE	256:17	256:17	13	count_visited_dir
LEAF_NODE	256:34	256:34	11	]
ASSIGN_OP	256:36	256:36	9	=
LEAF_NODE	256:36	256:36	10	=
RVAL	256:38	256:38	9	diroff
FIELD	256:38	256:38	10	diroff
LEAF_NODE	256:38	256:38	11	diroff
LEAF_NODE	256:44	256:44	7	;
EXPR_STATEMENT	257:2	257:22	6	count_visited_dir ++ ;
EXPR	257:2	257:2	7	count_visited_dir ++
FIELD	257:2	257:20	8	count_visited_dir ++
LEAF_NODE	257:2	257:2	9	count_visited_dir
LEAF_NODE	257:20	257:20	9	++
LEAF_NODE	257:22	257:22	7	;
SELECTION	259:2	260:3	6	
KEYWORD	259:2	259:2	7	if
LEAF_NODE	259:2	259:2	8	if
LEAF_NODE	259:5	259:5	7	(
CONDITION	259:6	259:6	7	i > 0
EXPR	259:6	259:10	8	i > 0
FIELD	259:6	259:6	9	i
LEAF_NODE	259:6	259:6	10	i
REL_OPERATOR	259:8	259:8	9	>
LEAF_NODE	259:8	259:8	10	>
FIELD	259:10	259:10	9	0
LEAF_NODE	259:10	259:10	10	0
LEAF_NODE	259:11	259:11	7	)
STATEMENTS	260:3	260:3	7	
EXPR_STATEMENT	260:3	260:16	8	putchar ( '\n' ) ;
EXPR	260:3	260:3	9	putchar ( '\n' )
FUNCTION_CALL	260:3	260:15	10	putchar ( '\n' )
CALLEE	260:3	260:3	11	putchar
LEAF_NODE	260:3	260:3	12	putchar
LEAF_NODE	260:10	260:10	11	(
ARGUMENT	260:11	260:11	11	'\n'
FIELD	260:11	260:11	12	'\n'
LEAF_NODE	260:11	260:11	13	'\n'
LEAF_NODE	260:15	260:15	11	)
LEAF_NODE	260:16	260:16	9	;
EXPR_STATEMENT	261:2	261:39	6	diroff = ReadDirectory ( fd , i , diroff ) ;
EXPR	261:2	261:2	7	diroff = ReadDirectory ( fd , i , diroff )
ASSIGN	261:2	261:11	8	diroff = ReadDirectory ( fd , i , diroff )
LVAL	261:2	261:2	9	diroff
FIELD	261:2	261:2	10	diroff
LEAF_NODE	261:2	261:2	11	diroff
ASSIGN_OP	261:9	261:9	9	=
LEAF_NODE	261:9	261:9	10	=
RVAL	261:11	261:11	9	ReadDirectory ( fd , i , diroff )
FUNCTION_CALL	261:11	261:38	10	ReadDirectory ( fd , i , diroff )
CALLEE	261:11	261:11	11	ReadDirectory
LEAF_NODE	261:11	261:11	12	ReadDirectory
LEAF_NODE	261:24	261:24	11	(
ARGUMENT	261:25	261:25	11	fd
FIELD	261:25	261:25	12	fd
LEAF_NODE	261:25	261:25	13	fd
LEAF_NODE	261:27	261:27	11	,
ARGUMENT	261:29	261:29	11	i
FIELD	261:29	261:29	12	i
LEAF_NODE	261:29	261:29	13	i
LEAF_NODE	261:30	261:30	11	,
ARGUMENT	261:32	261:32	11	diroff
FIELD	261:32	261:32	12	diroff
LEAF_NODE	261:32	261:32	13	diroff
LEAF_NODE	261:38	261:38	11	)
LEAF_NODE	261:39	261:39	7	;
LEAF_NODE	262:1	262:1	5	}
SELECTION	263:1	264:5	3	
KEYWORD	263:1	263:1	4	if
LEAF_NODE	263:1	263:1	5	if
LEAF_NODE	263:3	263:3	4	(
CONDITION	263:5	263:5	4	visited_diroff
EXPR	263:5	263:5	5	visited_diroff
FIELD	263:5	263:5	6	visited_diroff
LEAF_NODE	263:5	263:5	7	visited_diroff
LEAF_NODE	263:20	263:20	4	)
STATEMENTS	264:5	264:5	4	
EXPR_STATEMENT	264:5	264:25	5	free ( visited_diroff ) ;
EXPR	264:5	264:5	6	free ( visited_diroff )
FUNCTION_CALL	264:5	264:24	7	free ( visited_diroff )
CALLEE	264:5	264:5	8	free
LEAF_NODE	264:5	264:5	9	free
LEAF_NODE	264:9	264:9	8	(
ARGUMENT	264:10	264:10	8	visited_diroff
FIELD	264:10	264:10	9	visited_diroff
LEAF_NODE	264:10	264:10	10	visited_diroff
LEAF_NODE	264:24	264:24	8	)
LEAF_NODE	264:25	264:25	6	;
LEAF_NODE	265:0	265:0	2	}
FUNCTION_DEF	298:0	542:0	1	
RETURN_TYPE	298:0	298:7	2	static uint64
LEAF_NODE	298:0	298:0	3	static
TYPE_NAME	298:7	298:7	3	uint64
LEAF_NODE	298:7	298:7	4	uint64
FUNCTION_NAME	299:0	299:0	2	ReadDirectory
LEAF_NODE	299:0	299:0	3	ReadDirectory
PARAMETER_LIST	299:13	299:49	2	( int fd , unsigned int ix , uint64 off )
LEAF_NODE	299:13	299:13	3	(
PARAMETER_DECL	299:14	299:18	3	int fd
TYPE	299:14	299:14	4	int
TYPE_NAME	299:14	299:14	5	int
LEAF_NODE	299:14	299:14	6	int
NAME	299:18	299:18	4	fd
LEAF_NODE	299:18	299:18	5	fd
LEAF_NODE	299:20	299:20	3	,
PARAMETER_DECL	299:22	299:35	3	unsigned int ix
TYPE	299:22	299:22	4	unsigned int
TYPE_NAME	299:22	299:31	5	unsigned int
LEAF_NODE	299:22	299:22	6	unsigned
LEAF_NODE	299:31	299:31	6	int
NAME	299:35	299:35	4	ix
LEAF_NODE	299:35	299:35	5	ix
LEAF_NODE	299:37	299:37	3	,
PARAMETER_DECL	299:39	299:46	3	uint64 off
TYPE	299:39	299:39	4	uint64
TYPE_NAME	299:39	299:39	5	uint64
LEAF_NODE	299:39	299:39	6	uint64
NAME	299:46	299:46	4	off
LEAF_NODE	299:46	299:46	5	off
LEAF_NODE	299:49	299:49	3	)
LEAF_NODE	300:0	300:0	2	{
STATEMENTS	301:1	541:20	2	
SIMPLE_DECL	301:1	301:16	3	uint16 dircount ;
VAR_DECL	301:1	301:8	4	uint16 dircount
TYPE	301:1	301:1	5	uint16
TYPE_NAME	301:1	301:1	6	uint16
LEAF_NODE	301:1	301:1	7	uint16
NAME	301:8	301:8	5	dircount
LEAF_NODE	301:8	301:8	6	dircount
LEAF_NODE	301:16	301:16	4	;
SIMPLE_DECL	302:1	302:20	3	uint32 direntrysize ;
VAR_DECL	302:1	302:8	4	uint32 direntrysize
TYPE	302:1	302:1	5	uint32
TYPE_NAME	302:1	302:1	6	uint32
LEAF_NODE	302:1	302:1	7	uint32
NAME	302:8	302:8	5	direntrysize
LEAF_NODE	302:8	302:8	6	direntrysize
LEAF_NODE	302:20	302:20	4	;
SIMPLE_DECL	303:1	303:20	3	void * dirmem ; dirmem = NULL ;
VAR_DECL	303:1	303:7	4	void * dirmem ; dirmem = NULL
TYPE	303:1	303:5	5	void *
TYPE_NAME	303:1	303:1	6	void
LEAF_NODE	303:1	303:1	7	void
POINTER	303:5	303:5	6	*
LEAF_NODE	303:5	303:5	7	*
NAME	303:7	303:7	5	dirmem
LEAF_NODE	303:7	303:7	6	dirmem
LEAF_NODE	0:0	0:0	5	;
INIT	303:7	303:7	5	dirmem = NULL
ASSIGN	303:7	303:16	6	dirmem = NULL
LVAL	303:7	303:7	7	dirmem
NAME	303:7	303:7	8	dirmem
LEAF_NODE	303:7	303:7	9	dirmem
ASSIGN_OP	303:14	303:14	7	=
LEAF_NODE	303:14	303:14	8	=
RVAL	303:16	303:16	7	NULL
FIELD	303:16	303:16	8	NULL
LEAF_NODE	303:16	303:16	9	NULL
LEAF_NODE	303:20	303:20	4	;
SIMPLE_DECL	304:1	304:22	3	uint64 nextdiroff ; nextdiroff = 0 ;
VAR_DECL	304:1	304:8	4	uint64 nextdiroff ; nextdiroff = 0
TYPE	304:1	304:1	5	uint64
TYPE_NAME	304:1	304:1	6	uint64
LEAF_NODE	304:1	304:1	7	uint64
NAME	304:8	304:8	5	nextdiroff
LEAF_NODE	304:8	304:8	6	nextdiroff
LEAF_NODE	0:0	0:0	5	;
INIT	304:8	304:8	5	nextdiroff = 0
ASSIGN	304:8	304:21	6	nextdiroff = 0
LVAL	304:8	304:8	7	nextdiroff
NAME	304:8	304:8	8	nextdiroff
LEAF_NODE	304:8	304:8	9	nextdiroff
ASSIGN_OP	304:19	304:19	7	=
LEAF_NODE	304:19	304:19	8	=
RVAL	304:21	304:21	7	0
FIELD	304:21	304:21	8	0
LEAF_NODE	304:21	304:21	9	0
LEAF_NODE	304:22	304:22	4	;
SIMPLE_DECL	305:1	305:9	3	uint32 n ;
VAR_DECL	305:1	305:8	4	uint32 n
TYPE	305:1	305:1	5	uint32
TYPE_NAME	305:1	305:1	6	uint32
LEAF_NODE	305:1	305:1	7	uint32
NAME	305:8	305:8	5	n
LEAF_NODE	305:8	305:8	6	n
LEAF_NODE	305:9	305:9	4	;
SIMPLE_DECL	306:1	306:10	3	uint8 * dp ;
VAR_DECL	306:1	306:8	4	uint8 * dp
TYPE	306:1	306:6	5	uint8 *
TYPE_NAME	306:1	306:1	6	uint8
LEAF_NODE	306:1	306:1	7	uint8
POINTER	306:6	306:6	6	*
LEAF_NODE	306:6	306:6	7	*
NAME	306:8	306:8	5	dp
LEAF_NODE	306:8	306:8	6	dp
LEAF_NODE	306:10	306:10	4	;
SELECTION	308:1	309:2	3	
KEYWORD	308:1	308:1	4	if
LEAF_NODE	308:1	308:1	5	if
LEAF_NODE	308:4	308:4	4	(
CONDITION	308:5	308:5	4	off == 0
EXPR	308:5	308:12	5	off == 0
FIELD	308:5	308:5	6	off
LEAF_NODE	308:5	308:5	7	off
EQ_OPERATOR	308:9	308:9	6	==
LEAF_NODE	308:9	308:9	7	==
FIELD	308:12	308:12	6	0
LEAF_NODE	308:12	308:12	7	0
LEAF_NODE	308:13	308:13	4	)
STATEMENTS	309:2	309:2	4	
JUMP_STATEMENT	309:2	309:11	5	goto done ;
KEYWORD	309:2	309:2	6	goto
LEAF_NODE	309:2	309:2	7	goto
DESTINATION	309:7	309:7	6	done
LEAF_NODE	309:7	309:7	7	done
LEAF_NODE	309:11	309:11	6	;
SELECTION	310:1	310:72	3	
KEYWORD	310:1	310:1	4	if
LEAF_NODE	310:1	310:1	5	if
LEAF_NODE	310:4	310:4	4	(
CONDITION	310:5	310:5	4	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) off , SEEK_SET ) != ( _TIFF_off_t ) off
EXPR	310:5	310:67	5	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) off , SEEK_SET ) != ( _TIFF_off_t ) off
FUNCTION_CALL	310:5	310:49	6	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) off , SEEK_SET )
CALLEE	310:5	310:5	7	_TIFF_lseek_f
LEAF_NODE	310:5	310:5	8	_TIFF_lseek_f
LEAF_NODE	310:18	310:18	7	(
ARGUMENT	310:19	310:19	7	fd
FIELD	310:19	310:19	8	fd
LEAF_NODE	310:19	310:19	9	fd
LEAF_NODE	310:21	310:21	7	,
ARGUMENT	310:23	310:36	7	( _TIFF_off_t ) off
LEAF_NODE	310:23	310:23	8	(
TYPE_NAME	310:24	310:24	8	_TIFF_off_t
LEAF_NODE	310:24	310:24	9	_TIFF_off_t
LEAF_NODE	310:35	310:35	8	)
FIELD	310:36	310:36	8	off
LEAF_NODE	310:36	310:36	9	off
LEAF_NODE	310:39	310:39	7	,
ARGUMENT	310:41	310:41	7	SEEK_SET
FIELD	310:41	310:41	8	SEEK_SET
LEAF_NODE	310:41	310:41	9	SEEK_SET
LEAF_NODE	310:49	310:49	7	)
EQ_OPERATOR	310:51	310:51	6	!=
LEAF_NODE	310:51	310:51	7	!=
LEAF_NODE	310:54	310:54	6	(
TYPE_NAME	310:55	310:55	6	_TIFF_off_t
LEAF_NODE	310:55	310:55	7	_TIFF_off_t
LEAF_NODE	310:66	310:66	6	)
FIELD	310:67	310:67	6	off
LEAF_NODE	310:67	310:67	7	off
LEAF_NODE	310:70	310:70	4	)
STATEMENTS	310:72	313:1	4	
LEAF_NODE	310:72	310:72	5	{
STATEMENTS	311:2	312:2	5	
EXPR_STATEMENT	311:2	311:46	6	Fatal ( "Seek error accessing TIFF directory" ) ;
EXPR	311:2	311:2	7	Fatal ( "Seek error accessing TIFF directory" )
FUNCTION_CALL	311:2	311:45	8	Fatal ( "Seek error accessing TIFF directory" )
CALLEE	311:2	311:2	9	Fatal
LEAF_NODE	311:2	311:2	10	Fatal
LEAF_NODE	311:7	311:7	9	(
ARGUMENT	311:8	311:8	9	"Seek error accessing TIFF directory"
FIELD	311:8	311:8	10	"Seek error accessing TIFF directory"
LEAF_NODE	311:8	311:8	11	"Seek error accessing TIFF directory"
LEAF_NODE	311:45	311:45	9	)
LEAF_NODE	311:46	311:46	7	;
JUMP_STATEMENT	312:2	312:11	6	goto done ;
KEYWORD	312:2	312:2	7	goto
LEAF_NODE	312:2	312:2	8	goto
DESTINATION	312:7	312:7	7	done
LEAF_NODE	312:7	312:7	8	done
LEAF_NODE	312:11	312:11	7	;
LEAF_NODE	313:1	313:1	5	}
SELECTION	314:1	314:15	3	
KEYWORD	314:1	314:1	4	if
LEAF_NODE	314:1	314:1	5	if
LEAF_NODE	314:4	314:4	4	(
CONDITION	314:5	314:5	4	! bigtiff
EXPR	314:5	314:5	5	! bigtiff
UNARY_EXPR	314:5	314:6	6	! bigtiff
UNARY_OPERATOR	314:5	314:5	7	!
LEAF_NODE	314:5	314:5	8	!
FIELD	314:6	314:6	7	bigtiff
LEAF_NODE	314:6	314:6	8	bigtiff
LEAF_NODE	314:13	314:13	4	)
STATEMENTS	314:15	322:1	4	
LEAF_NODE	314:15	314:15	5	{
STATEMENTS	315:2	321:2	5	
SELECTION	315:2	315:71	6	
KEYWORD	315:2	315:2	7	if
LEAF_NODE	315:2	315:2	8	if
LEAF_NODE	315:5	315:5	7	(
CONDITION	315:6	315:6	7	read ( fd , ( char * ) & dircount , sizeof ( uint16 ) ) != sizeof ( uint16 )
EXPR	315:6	315:54	8	read ( fd , ( char * ) & dircount , sizeof ( uint16 ) ) != sizeof ( uint16 )
FUNCTION_CALL	315:6	315:49	9	read ( fd , ( char * ) & dircount , sizeof ( uint16 ) )
CALLEE	315:6	315:6	10	read
LEAF_NODE	315:6	315:6	11	read
LEAF_NODE	315:10	315:10	10	(
ARGUMENT	315:11	315:11	10	fd
FIELD	315:11	315:11	11	fd
LEAF_NODE	315:11	315:11	12	fd
LEAF_NODE	315:13	315:13	10	,
ARGUMENT	315:15	315:23	10	( char * ) & dircount
LEAF_NODE	315:15	315:15	11	(
TYPE_NAME	315:16	315:16	11	char
LEAF_NODE	315:16	315:16	12	char
LEAF_NODE	315:20	315:20	11	*
LEAF_NODE	315:21	315:21	11	)
UNARY_EXPR	315:23	315:24	11	& dircount
UNARY_OPERATOR	315:23	315:23	12	&
LEAF_NODE	315:23	315:23	13	&
FIELD	315:24	315:24	12	dircount
LEAF_NODE	315:24	315:24	13	dircount
LEAF_NODE	315:32	315:32	10	,
ARGUMENT	315:34	315:34	10	sizeof ( uint16 )
FUNCTION_CALL	315:34	315:48	11	sizeof ( uint16 )
CALLEE	315:34	315:34	12	sizeof
LEAF_NODE	315:34	315:34	13	sizeof
LEAF_NODE	315:41	315:41	12	(
ARGUMENT	315:42	315:42	12	uint16
FIELD	315:42	315:42	13	uint16
LEAF_NODE	315:42	315:42	14	uint16
LEAF_NODE	315:48	315:48	12	)
LEAF_NODE	315:49	315:49	10	)
EQ_OPERATOR	315:51	315:51	9	!=
LEAF_NODE	315:51	315:51	10	!=
FUNCTION_CALL	315:54	315:68	9	sizeof ( uint16 )
CALLEE	315:54	315:54	10	sizeof
LEAF_NODE	315:54	315:54	11	sizeof
LEAF_NODE	315:61	315:61	10	(
ARGUMENT	315:62	315:62	10	uint16
FIELD	315:62	315:62	11	uint16
LEAF_NODE	315:62	315:62	12	uint16
LEAF_NODE	315:68	315:68	10	)
LEAF_NODE	315:69	315:69	7	)
STATEMENTS	315:71	318:2	7	
LEAF_NODE	315:71	315:71	8	{
STATEMENTS	316:3	317:3	8	
EXPR_STATEMENT	316:3	316:31	9	ReadError ( "directory count" ) ;
EXPR	316:3	316:3	10	ReadError ( "directory count" )
FUNCTION_CALL	316:3	316:30	11	ReadError ( "directory count" )
CALLEE	316:3	316:3	12	ReadError
LEAF_NODE	316:3	316:3	13	ReadError
LEAF_NODE	316:12	316:12	12	(
ARGUMENT	316:13	316:13	12	"directory count"
FIELD	316:13	316:13	13	"directory count"
LEAF_NODE	316:13	316:13	14	"directory count"
LEAF_NODE	316:30	316:30	12	)
LEAF_NODE	316:31	316:31	10	;
JUMP_STATEMENT	317:3	317:12	9	goto done ;
KEYWORD	317:3	317:3	10	goto
LEAF_NODE	317:3	317:3	11	goto
DESTINATION	317:8	317:8	10	done
LEAF_NODE	317:8	317:8	11	done
LEAF_NODE	317:12	317:12	10	;
LEAF_NODE	318:2	318:2	8	}
SELECTION	319:2	320:3	6	
KEYWORD	319:2	319:2	7	if
LEAF_NODE	319:2	319:2	8	if
LEAF_NODE	319:5	319:5	7	(
CONDITION	319:6	319:6	7	swabflag
EXPR	319:6	319:6	8	swabflag
FIELD	319:6	319:6	9	swabflag
LEAF_NODE	319:6	319:6	10	swabflag
LEAF_NODE	319:14	319:14	7	)
STATEMENTS	320:3	320:3	7	
EXPR_STATEMENT	320:3	320:27	8	TIFFSwabShort ( & dircount ) ;
EXPR	320:3	320:3	9	TIFFSwabShort ( & dircount )
FUNCTION_CALL	320:3	320:26	10	TIFFSwabShort ( & dircount )
CALLEE	320:3	320:3	11	TIFFSwabShort
LEAF_NODE	320:3	320:3	12	TIFFSwabShort
LEAF_NODE	320:16	320:16	11	(
ARGUMENT	320:17	320:17	11	& dircount
UNARY_EXPR	320:17	320:18	12	& dircount
UNARY_OPERATOR	320:17	320:17	13	&
LEAF_NODE	320:17	320:17	14	&
FIELD	320:18	320:18	13	dircount
LEAF_NODE	320:18	320:18	14	dircount
LEAF_NODE	320:26	320:26	11	)
LEAF_NODE	320:27	320:27	9	;
EXPR_STATEMENT	321:2	321:19	6	direntrysize = 12 ;
EXPR	321:2	321:2	7	direntrysize = 12
ASSIGN	321:2	321:17	8	direntrysize = 12
LVAL	321:2	321:2	9	direntrysize
FIELD	321:2	321:2	10	direntrysize
LEAF_NODE	321:2	321:2	11	direntrysize
ASSIGN_OP	321:15	321:15	9	=
LEAF_NODE	321:15	321:15	10	=
RVAL	321:17	321:17	9	12
FIELD	321:17	321:17	10	12
LEAF_NODE	321:17	321:17	11	12
LEAF_NODE	321:19	321:19	7	;
LEAF_NODE	322:1	322:1	5	}
SELECTION	322:3	322:8	3	
KEYWORD	322:3	322:3	4	else
LEAF_NODE	322:3	322:3	5	else
STATEMENTS	322:8	336:1	4	
LEAF_NODE	322:8	322:8	5	{
STATEMENTS	323:2	335:2	5	
SIMPLE_DECL	323:2	323:23	6	uint64 dircount64 ; dircount64 = 0 ;
VAR_DECL	323:2	323:9	7	uint64 dircount64 ; dircount64 = 0
TYPE	323:2	323:2	8	uint64
TYPE_NAME	323:2	323:2	9	uint64
LEAF_NODE	323:2	323:2	10	uint64
NAME	323:9	323:9	8	dircount64
LEAF_NODE	323:9	323:9	9	dircount64
LEAF_NODE	0:0	0:0	8	;
INIT	323:9	323:9	8	dircount64 = 0
ASSIGN	323:9	323:22	9	dircount64 = 0
LVAL	323:9	323:9	10	dircount64
NAME	323:9	323:9	11	dircount64
LEAF_NODE	323:9	323:9	12	dircount64
ASSIGN_OP	323:20	323:20	10	=
LEAF_NODE	323:20	323:20	11	=
RVAL	323:22	323:22	10	0
FIELD	323:22	323:22	11	0
LEAF_NODE	323:22	323:22	12	0
LEAF_NODE	323:23	323:23	7	;
SELECTION	324:2	324:73	6	
KEYWORD	324:2	324:2	7	if
LEAF_NODE	324:2	324:2	8	if
LEAF_NODE	324:5	324:5	7	(
CONDITION	324:6	324:6	7	read ( fd , ( char * ) & dircount64 , sizeof ( uint64 ) ) != sizeof ( uint64 )
EXPR	324:6	324:56	8	read ( fd , ( char * ) & dircount64 , sizeof ( uint64 ) ) != sizeof ( uint64 )
FUNCTION_CALL	324:6	324:51	9	read ( fd , ( char * ) & dircount64 , sizeof ( uint64 ) )
CALLEE	324:6	324:6	10	read
LEAF_NODE	324:6	324:6	11	read
LEAF_NODE	324:10	324:10	10	(
ARGUMENT	324:11	324:11	10	fd
FIELD	324:11	324:11	11	fd
LEAF_NODE	324:11	324:11	12	fd
LEAF_NODE	324:13	324:13	10	,
ARGUMENT	324:15	324:23	10	( char * ) & dircount64
LEAF_NODE	324:15	324:15	11	(
TYPE_NAME	324:16	324:16	11	char
LEAF_NODE	324:16	324:16	12	char
LEAF_NODE	324:20	324:20	11	*
LEAF_NODE	324:21	324:21	11	)
UNARY_EXPR	324:23	324:24	11	& dircount64
UNARY_OPERATOR	324:23	324:23	12	&
LEAF_NODE	324:23	324:23	13	&
FIELD	324:24	324:24	12	dircount64
LEAF_NODE	324:24	324:24	13	dircount64
LEAF_NODE	324:34	324:34	10	,
ARGUMENT	324:36	324:36	10	sizeof ( uint64 )
FUNCTION_CALL	324:36	324:50	11	sizeof ( uint64 )
CALLEE	324:36	324:36	12	sizeof
LEAF_NODE	324:36	324:36	13	sizeof
LEAF_NODE	324:43	324:43	12	(
ARGUMENT	324:44	324:44	12	uint64
FIELD	324:44	324:44	13	uint64
LEAF_NODE	324:44	324:44	14	uint64
LEAF_NODE	324:50	324:50	12	)
LEAF_NODE	324:51	324:51	10	)
EQ_OPERATOR	324:53	324:53	9	!=
LEAF_NODE	324:53	324:53	10	!=
FUNCTION_CALL	324:56	324:70	9	sizeof ( uint64 )
CALLEE	324:56	324:56	10	sizeof
LEAF_NODE	324:56	324:56	11	sizeof
LEAF_NODE	324:63	324:63	10	(
ARGUMENT	324:64	324:64	10	uint64
FIELD	324:64	324:64	11	uint64
LEAF_NODE	324:64	324:64	12	uint64
LEAF_NODE	324:70	324:70	10	)
LEAF_NODE	324:71	324:71	7	)
STATEMENTS	324:73	327:2	7	
LEAF_NODE	324:73	324:73	8	{
STATEMENTS	325:3	326:3	8	
EXPR_STATEMENT	325:3	325:31	9	ReadError ( "directory count" ) ;
EXPR	325:3	325:3	10	ReadError ( "directory count" )
FUNCTION_CALL	325:3	325:30	11	ReadError ( "directory count" )
CALLEE	325:3	325:3	12	ReadError
LEAF_NODE	325:3	325:3	13	ReadError
LEAF_NODE	325:12	325:12	12	(
ARGUMENT	325:13	325:13	12	"directory count"
FIELD	325:13	325:13	13	"directory count"
LEAF_NODE	325:13	325:13	14	"directory count"
LEAF_NODE	325:30	325:30	12	)
LEAF_NODE	325:31	325:31	10	;
JUMP_STATEMENT	326:3	326:12	9	goto done ;
KEYWORD	326:3	326:3	10	goto
LEAF_NODE	326:3	326:3	11	goto
DESTINATION	326:8	326:8	10	done
LEAF_NODE	326:8	326:8	11	done
LEAF_NODE	326:12	326:12	10	;
LEAF_NODE	327:2	327:2	8	}
SELECTION	328:2	329:3	6	
KEYWORD	328:2	328:2	7	if
LEAF_NODE	328:2	328:2	8	if
LEAF_NODE	328:5	328:5	7	(
CONDITION	328:6	328:6	7	swabflag
EXPR	328:6	328:6	8	swabflag
FIELD	328:6	328:6	9	swabflag
LEAF_NODE	328:6	328:6	10	swabflag
LEAF_NODE	328:14	328:14	7	)
STATEMENTS	329:3	329:3	7	
EXPR_STATEMENT	329:3	329:29	8	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	329:3	329:3	9	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	329:3	329:28	10	TIFFSwabLong8 ( & dircount64 )
CALLEE	329:3	329:3	11	TIFFSwabLong8
LEAF_NODE	329:3	329:3	12	TIFFSwabLong8
LEAF_NODE	329:16	329:16	11	(
ARGUMENT	329:17	329:17	11	& dircount64
UNARY_EXPR	329:17	329:18	12	& dircount64
UNARY_OPERATOR	329:17	329:17	13	&
LEAF_NODE	329:17	329:17	14	&
FIELD	329:18	329:18	13	dircount64
LEAF_NODE	329:18	329:18	14	dircount64
LEAF_NODE	329:28	329:28	11	)
LEAF_NODE	329:29	329:29	9	;
SELECTION	330:2	330:25	6	
KEYWORD	330:2	330:2	7	if
LEAF_NODE	330:2	330:2	8	if
LEAF_NODE	330:5	330:5	7	(
CONDITION	330:6	330:6	7	dircount64 > 0xFFFF
EXPR	330:6	330:17	8	dircount64 > 0xFFFF
FIELD	330:6	330:6	9	dircount64
LEAF_NODE	330:6	330:6	10	dircount64
REL_OPERATOR	330:16	330:16	9	>
LEAF_NODE	330:16	330:16	10	>
FIELD	330:17	330:17	9	0xFFFF
LEAF_NODE	330:17	330:17	10	0xFFFF
LEAF_NODE	330:23	330:23	7	)
STATEMENTS	330:25	333:2	7	
LEAF_NODE	330:25	330:25	8	{
STATEMENTS	331:3	332:3	8	
EXPR_STATEMENT	331:3	331:50	9	Error ( "Sanity check on directory count failed" ) ;
EXPR	331:3	331:3	10	Error ( "Sanity check on directory count failed" )
FUNCTION_CALL	331:3	331:49	11	Error ( "Sanity check on directory count failed" )
CALLEE	331:3	331:3	12	Error
LEAF_NODE	331:3	331:3	13	Error
LEAF_NODE	331:8	331:8	12	(
ARGUMENT	331:9	331:9	12	"Sanity check on directory count failed"
FIELD	331:9	331:9	13	"Sanity check on directory count failed"
LEAF_NODE	331:9	331:9	14	"Sanity check on directory count failed"
LEAF_NODE	331:49	331:49	12	)
LEAF_NODE	331:50	331:50	10	;
JUMP_STATEMENT	332:3	332:12	9	goto done ;
KEYWORD	332:3	332:3	10	goto
LEAF_NODE	332:3	332:3	11	goto
DESTINATION	332:8	332:8	10	done
LEAF_NODE	332:8	332:8	11	done
LEAF_NODE	332:12	332:12	10	;
LEAF_NODE	333:2	333:2	8	}
EXPR_STATEMENT	334:2	334:31	6	dircount = ( uint16 ) dircount64 ;
EXPR	334:2	334:2	7	dircount = ( uint16 ) dircount64
ASSIGN	334:2	334:13	8	dircount = ( uint16 ) dircount64
LVAL	334:2	334:2	9	dircount
FIELD	334:2	334:2	10	dircount
LEAF_NODE	334:2	334:2	11	dircount
ASSIGN_OP	334:11	334:11	9	=
LEAF_NODE	334:11	334:11	10	=
RVAL	334:13	334:21	9	( uint16 ) dircount64
LEAF_NODE	334:13	334:13	10	(
TYPE_NAME	334:14	334:14	10	uint16
LEAF_NODE	334:14	334:14	11	uint16
LEAF_NODE	334:20	334:20	10	)
FIELD	334:21	334:21	10	dircount64
LEAF_NODE	334:21	334:21	11	dircount64
LEAF_NODE	334:31	334:31	7	;
EXPR_STATEMENT	335:2	335:19	6	direntrysize = 20 ;
EXPR	335:2	335:2	7	direntrysize = 20
ASSIGN	335:2	335:17	8	direntrysize = 20
LVAL	335:2	335:2	9	direntrysize
FIELD	335:2	335:2	10	direntrysize
LEAF_NODE	335:2	335:2	11	direntrysize
ASSIGN_OP	335:15	335:15	9	=
LEAF_NODE	335:15	335:15	10	=
RVAL	335:17	335:17	9	20
FIELD	335:17	335:17	10	20
LEAF_NODE	335:17	335:17	11	20
LEAF_NODE	335:19	335:19	7	;
LEAF_NODE	336:1	336:1	5	}
EXPR_STATEMENT	337:1	337:71	3	dirmem = _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , dircount , direntrysize ) ) ;
EXPR	337:1	337:1	4	dirmem = _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , dircount , direntrysize ) )
ASSIGN	337:1	337:10	5	dirmem = _TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , dircount , direntrysize ) )
LVAL	337:1	337:1	6	dirmem
FIELD	337:1	337:1	7	dirmem
LEAF_NODE	337:1	337:1	8	dirmem
ASSIGN_OP	337:8	337:8	6	=
LEAF_NODE	337:8	337:8	7	=
RVAL	337:10	337:10	6	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , dircount , direntrysize ) )
FUNCTION_CALL	337:10	337:70	7	_TIFFmalloc ( TIFFSafeMultiply ( tmsize_t , dircount , direntrysize ) )
CALLEE	337:10	337:10	8	_TIFFmalloc
LEAF_NODE	337:10	337:10	9	_TIFFmalloc
LEAF_NODE	337:21	337:21	8	(
ARGUMENT	337:22	337:22	8	TIFFSafeMultiply ( tmsize_t , dircount , direntrysize )
FUNCTION_CALL	337:22	337:69	9	TIFFSafeMultiply ( tmsize_t , dircount , direntrysize )
CALLEE	337:22	337:22	10	TIFFSafeMultiply
LEAF_NODE	337:22	337:22	11	TIFFSafeMultiply
LEAF_NODE	337:38	337:38	10	(
ARGUMENT	337:39	337:39	10	tmsize_t
FIELD	337:39	337:39	11	tmsize_t
LEAF_NODE	337:39	337:39	12	tmsize_t
LEAF_NODE	337:47	337:47	10	,
ARGUMENT	337:48	337:48	10	dircount
FIELD	337:48	337:48	11	dircount
LEAF_NODE	337:48	337:48	12	dircount
LEAF_NODE	337:56	337:56	10	,
ARGUMENT	337:57	337:57	10	direntrysize
FIELD	337:57	337:57	11	direntrysize
LEAF_NODE	337:57	337:57	12	direntrysize
LEAF_NODE	337:69	337:69	10	)
LEAF_NODE	337:70	337:70	8	)
LEAF_NODE	337:71	337:71	4	;
SELECTION	338:1	338:21	3	
KEYWORD	338:1	338:1	4	if
LEAF_NODE	338:1	338:1	5	if
LEAF_NODE	338:4	338:4	4	(
CONDITION	338:5	338:5	4	dirmem == NULL
EXPR	338:5	338:15	5	dirmem == NULL
FIELD	338:5	338:5	6	dirmem
LEAF_NODE	338:5	338:5	7	dirmem
EQ_OPERATOR	338:12	338:12	6	==
LEAF_NODE	338:12	338:12	7	==
FIELD	338:15	338:15	6	NULL
LEAF_NODE	338:15	338:15	7	NULL
LEAF_NODE	338:19	338:19	4	)
STATEMENTS	338:21	341:1	4	
LEAF_NODE	338:21	338:21	5	{
STATEMENTS	339:2	340:2	5	
EXPR_STATEMENT	339:2	339:38	6	Fatal ( "No space for TIFF directory" ) ;
EXPR	339:2	339:2	7	Fatal ( "No space for TIFF directory" )
FUNCTION_CALL	339:2	339:37	8	Fatal ( "No space for TIFF directory" )
CALLEE	339:2	339:2	9	Fatal
LEAF_NODE	339:2	339:2	10	Fatal
LEAF_NODE	339:7	339:7	9	(
ARGUMENT	339:8	339:8	9	"No space for TIFF directory"
FIELD	339:8	339:8	10	"No space for TIFF directory"
LEAF_NODE	339:8	339:8	11	"No space for TIFF directory"
LEAF_NODE	339:37	339:37	9	)
LEAF_NODE	339:38	339:38	7	;
JUMP_STATEMENT	340:2	340:11	6	goto done ;
KEYWORD	340:2	340:2	7	goto
LEAF_NODE	340:2	340:2	8	goto
DESTINATION	340:7	340:7	7	done
LEAF_NODE	340:7	340:7	8	done
LEAF_NODE	340:11	340:11	7	;
LEAF_NODE	341:1	341:1	5	}
EXPR_STATEMENT	342:1	342:52	3	n = read ( fd , ( char * ) dirmem , dircount * direntrysize ) ;
EXPR	342:1	342:1	4	n = read ( fd , ( char * ) dirmem , dircount * direntrysize )
ASSIGN	342:1	342:5	5	n = read ( fd , ( char * ) dirmem , dircount * direntrysize )
LVAL	342:1	342:1	6	n
FIELD	342:1	342:1	7	n
LEAF_NODE	342:1	342:1	8	n
ASSIGN_OP	342:3	342:3	6	=
LEAF_NODE	342:3	342:3	7	=
RVAL	342:5	342:5	6	read ( fd , ( char * ) dirmem , dircount * direntrysize )
FUNCTION_CALL	342:5	342:51	7	read ( fd , ( char * ) dirmem , dircount * direntrysize )
CALLEE	342:5	342:5	8	read
LEAF_NODE	342:5	342:5	9	read
LEAF_NODE	342:9	342:9	8	(
ARGUMENT	342:10	342:10	8	fd
FIELD	342:10	342:10	9	fd
LEAF_NODE	342:10	342:10	10	fd
LEAF_NODE	342:12	342:12	8	,
ARGUMENT	342:14	342:22	8	( char * ) dirmem
LEAF_NODE	342:14	342:14	9	(
TYPE_NAME	342:15	342:15	9	char
LEAF_NODE	342:15	342:15	10	char
LEAF_NODE	342:19	342:19	9	*
LEAF_NODE	342:20	342:20	9	)
FIELD	342:22	342:22	9	dirmem
LEAF_NODE	342:22	342:22	10	dirmem
LEAF_NODE	342:28	342:28	8	,
ARGUMENT	342:30	342:39	8	dircount * direntrysize
FIELD	342:30	342:30	9	dircount
LEAF_NODE	342:30	342:30	10	dircount
LEAF_NODE	342:38	342:38	9	*
FIELD	342:39	342:39	9	direntrysize
LEAF_NODE	342:39	342:39	10	direntrysize
LEAF_NODE	342:51	342:51	8	)
LEAF_NODE	342:52	342:52	4	;
SELECTION	343:1	343:33	3	
KEYWORD	343:1	343:1	4	if
LEAF_NODE	343:1	343:1	5	if
LEAF_NODE	343:4	343:4	4	(
CONDITION	343:5	343:5	4	n != dircount * direntrysize
EXPR	343:5	343:19	5	n != dircount * direntrysize
FIELD	343:5	343:5	6	n
LEAF_NODE	343:5	343:5	7	n
EQ_OPERATOR	343:7	343:7	6	!=
LEAF_NODE	343:7	343:7	7	!=
FIELD	343:10	343:10	6	dircount
LEAF_NODE	343:10	343:10	7	dircount
LEAF_NODE	343:18	343:18	6	*
FIELD	343:19	343:19	6	direntrysize
LEAF_NODE	343:19	343:19	7	direntrysize
LEAF_NODE	343:31	343:31	4	)
STATEMENTS	343:33	355:1	4	
LEAF_NODE	343:33	343:33	5	{
STATEMENTS	344:2	354:2	5	
EXPR_STATEMENT	344:2	344:19	6	n /= direntrysize ;
EXPR	344:2	344:2	7	n /= direntrysize
ASSIGN	344:2	344:7	8	n /= direntrysize
LVAL	344:2	344:2	9	n
FIELD	344:2	344:2	10	n
LEAF_NODE	344:2	344:2	11	n
ASSIGN_OP	344:4	344:4	9	/=
LEAF_NODE	344:4	344:4	10	/=
RVAL	344:7	344:7	9	direntrysize
FIELD	344:7	344:7	10	direntrysize
LEAF_NODE	344:7	344:7	11	direntrysize
LEAF_NODE	344:19	344:19	7	;
EXPR_STATEMENT	345:2	348:59	6	Error ( "Could only read %lu of %u entries in directory at offset %#I64x" , ( unsigned long ) n , dircount , ( unsigned __int64 ) off ) ;
EXPR	345:2	345:2	7	Error ( "Could only read %lu of %u entries in directory at offset %#I64x" , ( unsigned long ) n , dircount , ( unsigned __int64 ) off )
FUNCTION_CALL	345:2	348:58	8	Error ( "Could only read %lu of %u entries in directory at offset %#I64x" , ( unsigned long ) n , dircount , ( unsigned __int64 ) off )
CALLEE	345:2	345:2	9	Error
LEAF_NODE	345:2	345:2	10	Error
LEAF_NODE	345:7	345:7	9	(
ARGUMENT	347:5	347:5	9	"Could only read %lu of %u entries in directory at offset %#I64x"
FIELD	347:5	347:5	10	"Could only read %lu of %u entries in directory at offset %#I64x"
LEAF_NODE	347:5	347:5	11	"Could only read %lu of %u entries in directory at offset %#I64x"
LEAF_NODE	347:70	347:70	9	,
ARGUMENT	348:8	348:23	9	( unsigned long ) n
LEAF_NODE	348:8	348:8	10	(
TYPE_NAME	348:9	348:18	10	unsigned long
LEAF_NODE	348:9	348:9	11	unsigned
LEAF_NODE	348:18	348:18	11	long
LEAF_NODE	348:22	348:22	10	)
FIELD	348:23	348:23	10	n
LEAF_NODE	348:23	348:23	11	n
LEAF_NODE	348:24	348:24	9	,
ARGUMENT	348:26	348:26	9	dircount
FIELD	348:26	348:26	10	dircount
LEAF_NODE	348:26	348:26	11	dircount
LEAF_NODE	348:34	348:34	9	,
ARGUMENT	348:36	348:55	9	( unsigned __int64 ) off
LEAF_NODE	348:36	348:36	10	(
TYPE_NAME	348:37	348:46	10	unsigned __int64
LEAF_NODE	348:37	348:37	11	unsigned
LEAF_NODE	348:46	348:46	11	__int64
LEAF_NODE	348:53	348:53	10	)
FIELD	348:55	348:55	10	off
LEAF_NODE	348:55	348:55	11	off
LEAF_NODE	348:58	348:58	9	)
LEAF_NODE	348:59	348:59	7	;
LEAF_NODE	350:5	350:5	6	"Could only read %lu of %u entries in directory at offset %#llx"
LEAF_NODE	350:69	350:69	6	,
LEAF_NODE	351:8	351:8	6	(
LEAF_NODE	351:9	351:9	6	unsigned
LEAF_NODE	351:18	351:18	6	long
LEAF_NODE	351:22	351:22	6	)
LEAF_NODE	351:23	351:23	6	n
LEAF_NODE	351:24	351:24	6	,
LEAF_NODE	351:26	351:26	6	dircount
LEAF_NODE	351:34	351:34	6	,
LEAF_NODE	351:36	351:36	6	(
LEAF_NODE	351:37	351:37	6	unsigned
LEAF_NODE	351:46	351:46	6	long
LEAF_NODE	351:51	351:51	6	long
LEAF_NODE	351:55	351:55	6	)
LEAF_NODE	351:57	351:57	6	off
LEAF_NODE	351:60	351:60	6	)
LEAF_NODE	351:61	351:61	6	;
EXPR_STATEMENT	353:2	353:14	6	dircount = n ;
EXPR	353:2	353:2	7	dircount = n
ASSIGN	353:2	353:13	8	dircount = n
LVAL	353:2	353:2	9	dircount
FIELD	353:2	353:2	10	dircount
LEAF_NODE	353:2	353:2	11	dircount
ASSIGN_OP	353:11	353:11	9	=
LEAF_NODE	353:11	353:11	10	=
RVAL	353:13	353:13	9	n
FIELD	353:13	353:13	10	n
LEAF_NODE	353:13	353:13	11	n
LEAF_NODE	353:14	353:14	7	;
EXPR_STATEMENT	354:2	354:16	6	nextdiroff = 0 ;
EXPR	354:2	354:2	7	nextdiroff = 0
ASSIGN	354:2	354:15	8	nextdiroff = 0
LVAL	354:2	354:2	9	nextdiroff
FIELD	354:2	354:2	10	nextdiroff
LEAF_NODE	354:2	354:2	11	nextdiroff
ASSIGN_OP	354:13	354:13	9	=
LEAF_NODE	354:13	354:13	10	=
RVAL	354:15	354:15	9	0
FIELD	354:15	354:15	10	0
LEAF_NODE	354:15	354:15	11	0
LEAF_NODE	354:16	354:16	7	;
LEAF_NODE	355:1	355:1	5	}
SELECTION	355:3	355:8	3	
KEYWORD	355:3	355:3	4	else
LEAF_NODE	355:3	355:3	5	else
STATEMENTS	355:8	369:1	4	
LEAF_NODE	355:8	355:8	5	{
STATEMENTS	356:2	363:4	5	
SELECTION	356:2	356:16	6	
KEYWORD	356:2	356:2	7	if
LEAF_NODE	356:2	356:2	8	if
LEAF_NODE	356:5	356:5	7	(
CONDITION	356:6	356:6	7	! bigtiff
EXPR	356:6	356:6	8	! bigtiff
UNARY_EXPR	356:6	356:7	9	! bigtiff
UNARY_OPERATOR	356:6	356:6	10	!
LEAF_NODE	356:6	356:6	11	!
FIELD	356:7	356:7	10	bigtiff
LEAF_NODE	356:7	356:7	11	bigtiff
LEAF_NODE	356:14	356:14	7	)
STATEMENTS	356:16	363:2	7	
LEAF_NODE	356:16	356:16	8	{
STATEMENTS	357:3	362:3	8	
SIMPLE_DECL	357:3	357:22	9	uint32 nextdiroff32 ;
VAR_DECL	357:3	357:10	10	uint32 nextdiroff32
TYPE	357:3	357:3	11	uint32
TYPE_NAME	357:3	357:3	12	uint32
LEAF_NODE	357:3	357:3	13	uint32
NAME	357:10	357:10	11	nextdiroff32
LEAF_NODE	357:10	357:10	12	nextdiroff32
LEAF_NODE	357:22	357:22	10	;
SELECTION	358:3	359:4	9	
KEYWORD	358:3	358:3	10	if
LEAF_NODE	358:3	358:3	11	if
LEAF_NODE	358:6	358:6	10	(
CONDITION	358:7	358:7	10	read ( fd , ( char * ) & nextdiroff32 , sizeof ( uint32 ) ) != sizeof ( uint32 )
EXPR	358:7	358:59	11	read ( fd , ( char * ) & nextdiroff32 , sizeof ( uint32 ) ) != sizeof ( uint32 )
FUNCTION_CALL	358:7	358:54	12	read ( fd , ( char * ) & nextdiroff32 , sizeof ( uint32 ) )
CALLEE	358:7	358:7	13	read
LEAF_NODE	358:7	358:7	14	read
LEAF_NODE	358:11	358:11	13	(
ARGUMENT	358:12	358:12	13	fd
FIELD	358:12	358:12	14	fd
LEAF_NODE	358:12	358:12	15	fd
LEAF_NODE	358:14	358:14	13	,
ARGUMENT	358:16	358:24	13	( char * ) & nextdiroff32
LEAF_NODE	358:16	358:16	14	(
TYPE_NAME	358:17	358:17	14	char
LEAF_NODE	358:17	358:17	15	char
LEAF_NODE	358:21	358:21	14	*
LEAF_NODE	358:22	358:22	14	)
UNARY_EXPR	358:24	358:25	14	& nextdiroff32
UNARY_OPERATOR	358:24	358:24	15	&
LEAF_NODE	358:24	358:24	16	&
FIELD	358:25	358:25	15	nextdiroff32
LEAF_NODE	358:25	358:25	16	nextdiroff32
LEAF_NODE	358:37	358:37	13	,
ARGUMENT	358:39	358:39	13	sizeof ( uint32 )
FUNCTION_CALL	358:39	358:53	14	sizeof ( uint32 )
CALLEE	358:39	358:39	15	sizeof
LEAF_NODE	358:39	358:39	16	sizeof
LEAF_NODE	358:46	358:46	15	(
ARGUMENT	358:47	358:47	15	uint32
FIELD	358:47	358:47	16	uint32
LEAF_NODE	358:47	358:47	17	uint32
LEAF_NODE	358:53	358:53	15	)
LEAF_NODE	358:54	358:54	13	)
EQ_OPERATOR	358:56	358:56	12	!=
LEAF_NODE	358:56	358:56	13	!=
FUNCTION_CALL	358:59	358:73	12	sizeof ( uint32 )
CALLEE	358:59	358:59	13	sizeof
LEAF_NODE	358:59	358:59	14	sizeof
LEAF_NODE	358:66	358:66	13	(
ARGUMENT	358:67	358:67	13	uint32
FIELD	358:67	358:67	14	uint32
LEAF_NODE	358:67	358:67	15	uint32
LEAF_NODE	358:73	358:73	13	)
LEAF_NODE	358:74	358:74	10	)
STATEMENTS	359:4	359:4	10	
EXPR_STATEMENT	359:4	359:20	11	nextdiroff32 = 0 ;
EXPR	359:4	359:4	12	nextdiroff32 = 0
ASSIGN	359:4	359:19	13	nextdiroff32 = 0
LVAL	359:4	359:4	14	nextdiroff32
FIELD	359:4	359:4	15	nextdiroff32
LEAF_NODE	359:4	359:4	16	nextdiroff32
ASSIGN_OP	359:17	359:17	14	=
LEAF_NODE	359:17	359:17	15	=
RVAL	359:19	359:19	14	0
FIELD	359:19	359:19	15	0
LEAF_NODE	359:19	359:19	16	0
LEAF_NODE	359:20	359:20	12	;
SELECTION	360:3	361:4	9	
KEYWORD	360:3	360:3	10	if
LEAF_NODE	360:3	360:3	11	if
LEAF_NODE	360:6	360:6	10	(
CONDITION	360:7	360:7	10	swabflag
EXPR	360:7	360:7	11	swabflag
FIELD	360:7	360:7	12	swabflag
LEAF_NODE	360:7	360:7	13	swabflag
LEAF_NODE	360:15	360:15	10	)
STATEMENTS	361:4	361:4	10	
EXPR_STATEMENT	361:4	361:31	11	TIFFSwabLong ( & nextdiroff32 ) ;
EXPR	361:4	361:4	12	TIFFSwabLong ( & nextdiroff32 )
FUNCTION_CALL	361:4	361:30	13	TIFFSwabLong ( & nextdiroff32 )
CALLEE	361:4	361:4	14	TIFFSwabLong
LEAF_NODE	361:4	361:4	15	TIFFSwabLong
LEAF_NODE	361:16	361:16	14	(
ARGUMENT	361:17	361:17	14	& nextdiroff32
UNARY_EXPR	361:17	361:18	15	& nextdiroff32
UNARY_OPERATOR	361:17	361:17	16	&
LEAF_NODE	361:17	361:17	17	&
FIELD	361:18	361:18	16	nextdiroff32
LEAF_NODE	361:18	361:18	17	nextdiroff32
LEAF_NODE	361:30	361:30	14	)
LEAF_NODE	361:31	361:31	12	;
EXPR_STATEMENT	362:3	362:28	9	nextdiroff = nextdiroff32 ;
EXPR	362:3	362:3	10	nextdiroff = nextdiroff32
ASSIGN	362:3	362:16	11	nextdiroff = nextdiroff32
LVAL	362:3	362:3	12	nextdiroff
FIELD	362:3	362:3	13	nextdiroff
LEAF_NODE	362:3	362:3	14	nextdiroff
ASSIGN_OP	362:14	362:14	12	=
LEAF_NODE	362:14	362:14	13	=
RVAL	362:16	362:16	12	nextdiroff32
FIELD	362:16	362:16	13	nextdiroff32
LEAF_NODE	362:16	362:16	14	nextdiroff32
LEAF_NODE	362:28	362:28	10	;
LEAF_NODE	363:2	363:2	8	}
SELECTION	363:4	363:9	6	
KEYWORD	363:4	363:4	7	else
LEAF_NODE	363:4	363:4	8	else
STATEMENTS	363:9	368:2	7	
LEAF_NODE	363:9	363:9	8	{
STATEMENTS	364:3	366:3	8	
SELECTION	364:3	365:4	9	
KEYWORD	364:3	364:3	10	if
LEAF_NODE	364:3	364:3	11	if
LEAF_NODE	364:6	364:6	10	(
CONDITION	364:7	364:7	10	read ( fd , ( char * ) & nextdiroff , sizeof ( uint64 ) ) != sizeof ( uint64 )
EXPR	364:7	364:57	11	read ( fd , ( char * ) & nextdiroff , sizeof ( uint64 ) ) != sizeof ( uint64 )
FUNCTION_CALL	364:7	364:52	12	read ( fd , ( char * ) & nextdiroff , sizeof ( uint64 ) )
CALLEE	364:7	364:7	13	read
LEAF_NODE	364:7	364:7	14	read
LEAF_NODE	364:11	364:11	13	(
ARGUMENT	364:12	364:12	13	fd
FIELD	364:12	364:12	14	fd
LEAF_NODE	364:12	364:12	15	fd
LEAF_NODE	364:14	364:14	13	,
ARGUMENT	364:16	364:24	13	( char * ) & nextdiroff
LEAF_NODE	364:16	364:16	14	(
TYPE_NAME	364:17	364:17	14	char
LEAF_NODE	364:17	364:17	15	char
LEAF_NODE	364:21	364:21	14	*
LEAF_NODE	364:22	364:22	14	)
UNARY_EXPR	364:24	364:25	14	& nextdiroff
UNARY_OPERATOR	364:24	364:24	15	&
LEAF_NODE	364:24	364:24	16	&
FIELD	364:25	364:25	15	nextdiroff
LEAF_NODE	364:25	364:25	16	nextdiroff
LEAF_NODE	364:35	364:35	13	,
ARGUMENT	364:37	364:37	13	sizeof ( uint64 )
FUNCTION_CALL	364:37	364:51	14	sizeof ( uint64 )
CALLEE	364:37	364:37	15	sizeof
LEAF_NODE	364:37	364:37	16	sizeof
LEAF_NODE	364:44	364:44	15	(
ARGUMENT	364:45	364:45	15	uint64
FIELD	364:45	364:45	16	uint64
LEAF_NODE	364:45	364:45	17	uint64
LEAF_NODE	364:51	364:51	15	)
LEAF_NODE	364:52	364:52	13	)
EQ_OPERATOR	364:54	364:54	12	!=
LEAF_NODE	364:54	364:54	13	!=
FUNCTION_CALL	364:57	364:71	12	sizeof ( uint64 )
CALLEE	364:57	364:57	13	sizeof
LEAF_NODE	364:57	364:57	14	sizeof
LEAF_NODE	364:64	364:64	13	(
ARGUMENT	364:65	364:65	13	uint64
FIELD	364:65	364:65	14	uint64
LEAF_NODE	364:65	364:65	15	uint64
LEAF_NODE	364:71	364:71	13	)
LEAF_NODE	364:72	364:72	10	)
STATEMENTS	365:4	365:4	10	
EXPR_STATEMENT	365:4	365:18	11	nextdiroff = 0 ;
EXPR	365:4	365:4	12	nextdiroff = 0
ASSIGN	365:4	365:17	13	nextdiroff = 0
LVAL	365:4	365:4	14	nextdiroff
FIELD	365:4	365:4	15	nextdiroff
LEAF_NODE	365:4	365:4	16	nextdiroff
ASSIGN_OP	365:15	365:15	14	=
LEAF_NODE	365:15	365:15	15	=
RVAL	365:17	365:17	14	0
FIELD	365:17	365:17	15	0
LEAF_NODE	365:17	365:17	16	0
LEAF_NODE	365:18	365:18	12	;
SELECTION	366:3	367:4	9	
KEYWORD	366:3	366:3	10	if
LEAF_NODE	366:3	366:3	11	if
LEAF_NODE	366:6	366:6	10	(
CONDITION	366:7	366:7	10	swabflag
EXPR	366:7	366:7	11	swabflag
FIELD	366:7	366:7	12	swabflag
LEAF_NODE	366:7	366:7	13	swabflag
LEAF_NODE	366:15	366:15	10	)
STATEMENTS	367:4	367:4	10	
EXPR_STATEMENT	367:4	367:30	11	TIFFSwabLong8 ( & nextdiroff ) ;
EXPR	367:4	367:4	12	TIFFSwabLong8 ( & nextdiroff )
FUNCTION_CALL	367:4	367:29	13	TIFFSwabLong8 ( & nextdiroff )
CALLEE	367:4	367:4	14	TIFFSwabLong8
LEAF_NODE	367:4	367:4	15	TIFFSwabLong8
LEAF_NODE	367:17	367:17	14	(
ARGUMENT	367:18	367:18	14	& nextdiroff
UNARY_EXPR	367:18	367:19	15	& nextdiroff
UNARY_OPERATOR	367:18	367:18	16	&
LEAF_NODE	367:18	367:18	17	&
FIELD	367:19	367:19	16	nextdiroff
LEAF_NODE	367:19	367:19	17	nextdiroff
LEAF_NODE	367:29	367:29	14	)
LEAF_NODE	367:30	367:30	12	;
LEAF_NODE	368:2	368:2	8	}
LEAF_NODE	369:1	369:1	5	}
EXPR_STATEMENT	371:1	373:64	3	printf ( "Directory %u: offset %I64u (%#I64x) next %I64u (%#I64x)\n" , ix , ( unsigned __int64 ) off , ( unsigned __int64 ) off , ( unsigned __int64 ) nextdiroff , ( unsigned __int64 ) nextdiroff ) ;
EXPR	371:1	371:1	4	printf ( "Directory %u: offset %I64u (%#I64x) next %I64u (%#I64x)\n" , ix , ( unsigned __int64 ) off , ( unsigned __int64 ) off , ( unsigned __int64 ) nextdiroff , ( unsigned __int64 ) nextdiroff )
FUNCTION_CALL	371:1	373:63	5	printf ( "Directory %u: offset %I64u (%#I64x) next %I64u (%#I64x)\n" , ix , ( unsigned __int64 ) off , ( unsigned __int64 ) off , ( unsigned __int64 ) nextdiroff , ( unsigned __int64 ) nextdiroff )
CALLEE	371:1	371:1	6	printf
LEAF_NODE	371:1	371:1	7	printf
LEAF_NODE	371:7	371:7	6	(
ARGUMENT	371:8	371:8	6	"Directory %u: offset %I64u (%#I64x) next %I64u (%#I64x)\n"
FIELD	371:8	371:8	7	"Directory %u: offset %I64u (%#I64x) next %I64u (%#I64x)\n"
LEAF_NODE	371:8	371:8	8	"Directory %u: offset %I64u (%#I64x) next %I64u (%#I64x)\n"
LEAF_NODE	371:67	371:67	6	,
ARGUMENT	371:69	371:69	6	ix
FIELD	371:69	371:69	7	ix
LEAF_NODE	371:69	371:69	8	ix
LEAF_NODE	371:71	371:71	6	,
ARGUMENT	372:5	372:23	6	( unsigned __int64 ) off
LEAF_NODE	372:5	372:5	7	(
TYPE_NAME	372:6	372:15	7	unsigned __int64
LEAF_NODE	372:6	372:6	8	unsigned
LEAF_NODE	372:15	372:15	8	__int64
LEAF_NODE	372:22	372:22	7	)
FIELD	372:23	372:23	7	off
LEAF_NODE	372:23	372:23	8	off
LEAF_NODE	372:26	372:26	6	,
ARGUMENT	372:28	372:46	6	( unsigned __int64 ) off
LEAF_NODE	372:28	372:28	7	(
TYPE_NAME	372:29	372:38	7	unsigned __int64
LEAF_NODE	372:29	372:29	8	unsigned
LEAF_NODE	372:38	372:38	8	__int64
LEAF_NODE	372:45	372:45	7	)
FIELD	372:46	372:46	7	off
LEAF_NODE	372:46	372:46	8	off
LEAF_NODE	372:49	372:49	6	,
ARGUMENT	373:5	373:23	6	( unsigned __int64 ) nextdiroff
LEAF_NODE	373:5	373:5	7	(
TYPE_NAME	373:6	373:15	7	unsigned __int64
LEAF_NODE	373:6	373:6	8	unsigned
LEAF_NODE	373:15	373:15	8	__int64
LEAF_NODE	373:22	373:22	7	)
FIELD	373:23	373:23	7	nextdiroff
LEAF_NODE	373:23	373:23	8	nextdiroff
LEAF_NODE	373:33	373:33	6	,
ARGUMENT	373:35	373:53	6	( unsigned __int64 ) nextdiroff
LEAF_NODE	373:35	373:35	7	(
TYPE_NAME	373:36	373:45	7	unsigned __int64
LEAF_NODE	373:36	373:36	8	unsigned
LEAF_NODE	373:45	373:45	8	__int64
LEAF_NODE	373:52	373:52	7	)
FIELD	373:53	373:53	7	nextdiroff
LEAF_NODE	373:53	373:53	8	nextdiroff
LEAF_NODE	373:63	373:63	6	)
LEAF_NODE	373:64	373:64	4	;
LEAF_NODE	375:1	375:1	3	printf
LEAF_NODE	375:7	375:7	3	(
LEAF_NODE	375:8	375:8	3	"Directory %u: offset %llu (%#llx) next %llu (%#llx)\n"
LEAF_NODE	375:63	375:63	3	,
LEAF_NODE	375:65	375:65	3	ix
LEAF_NODE	375:67	375:67	3	,
LEAF_NODE	376:5	376:5	3	(
LEAF_NODE	376:6	376:6	3	unsigned
LEAF_NODE	376:15	376:15	3	long
LEAF_NODE	376:20	376:20	3	long
LEAF_NODE	376:24	376:24	3	)
LEAF_NODE	376:25	376:25	3	off
LEAF_NODE	376:28	376:28	3	,
LEAF_NODE	376:30	376:30	3	(
LEAF_NODE	376:31	376:31	3	unsigned
LEAF_NODE	376:40	376:40	3	long
LEAF_NODE	376:45	376:45	3	long
LEAF_NODE	376:49	376:49	3	)
LEAF_NODE	376:50	376:50	3	off
LEAF_NODE	376:53	376:53	3	,
LEAF_NODE	377:5	377:5	3	(
LEAF_NODE	377:6	377:6	3	unsigned
LEAF_NODE	377:15	377:15	3	long
LEAF_NODE	377:20	377:20	3	long
LEAF_NODE	377:24	377:24	3	)
LEAF_NODE	377:25	377:25	3	nextdiroff
LEAF_NODE	377:35	377:35	3	,
LEAF_NODE	377:37	377:37	3	(
LEAF_NODE	377:38	377:38	3	unsigned
LEAF_NODE	377:47	377:47	3	long
LEAF_NODE	377:52	377:52	3	long
LEAF_NODE	377:56	377:56	3	)
LEAF_NODE	377:57	377:57	3	nextdiroff
LEAF_NODE	377:67	377:67	3	)
LEAF_NODE	377:68	377:68	3	;
ITERATION	379:1	379:53	3	
KEYWORD	379:1	379:1	4	for
LEAF_NODE	379:1	379:1	5	for
LEAF_NODE	379:5	379:5	4	(
FOR_INIT	379:6	379:39	4	dp = ( uint8 * ) dirmem , n = dircount ;
EXPR	379:6	379:27	5	dp = ( uint8 * ) dirmem , n = dircount
ASSIGN	379:6	379:11	6	dp = ( uint8 * ) dirmem
LVAL	379:6	379:6	7	dp
FIELD	379:6	379:6	8	dp
LEAF_NODE	379:6	379:6	9	dp
ASSIGN_OP	379:9	379:9	7	=
LEAF_NODE	379:9	379:9	8	=
RVAL	379:11	379:19	7	( uint8 * ) dirmem
LEAF_NODE	379:11	379:11	8	(
TYPE_NAME	379:12	379:12	8	uint8
LEAF_NODE	379:12	379:12	9	uint8
LEAF_NODE	379:17	379:17	8	*
LEAF_NODE	379:18	379:18	8	)
FIELD	379:19	379:19	8	dirmem
LEAF_NODE	379:19	379:19	9	dirmem
LEAF_NODE	379:25	379:25	6	,
ASSIGN	379:27	379:31	6	n = dircount
LVAL	379:27	379:27	7	n
FIELD	379:27	379:27	8	n
LEAF_NODE	379:27	379:27	9	n
ASSIGN_OP	379:29	379:29	7	=
LEAF_NODE	379:29	379:29	8	=
RVAL	379:31	379:31	7	dircount
FIELD	379:31	379:31	8	dircount
LEAF_NODE	379:31	379:31	9	dircount
LEAF_NODE	379:39	379:39	5	;
CONDITION	379:41	379:41	4	n > 0
EXPR	379:41	379:45	5	n > 0
FIELD	379:41	379:41	6	n
LEAF_NODE	379:41	379:41	7	n
REL_OPERATOR	379:43	379:43	6	>
LEAF_NODE	379:43	379:43	7	>
FIELD	379:45	379:45	6	0
LEAF_NODE	379:45	379:45	7	0
LEAF_NODE	379:46	379:46	4	;
FOR_EXPR	379:48	379:48	4	n --
EXPR	379:48	379:48	5	n --
FIELD	379:48	379:49	6	n --
LEAF_NODE	379:48	379:48	7	n
LEAF_NODE	379:49	379:49	7	--
LEAF_NODE	379:51	379:51	4	)
STATEMENTS	379:53	537:1	4	
LEAF_NODE	379:53	379:53	5	{
STATEMENTS	380:2	536:2	5	
SIMPLE_DECL	380:2	380:12	6	uint16 tag ;
VAR_DECL	380:2	380:9	7	uint16 tag
TYPE	380:2	380:2	8	uint16
TYPE_NAME	380:2	380:2	9	uint16
LEAF_NODE	380:2	380:2	10	uint16
NAME	380:9	380:9	8	tag
LEAF_NODE	380:9	380:9	9	tag
LEAF_NODE	380:12	380:12	7	;
SIMPLE_DECL	381:2	381:13	6	uint16 type ;
VAR_DECL	381:2	381:9	7	uint16 type
TYPE	381:2	381:2	8	uint16
TYPE_NAME	381:2	381:2	9	uint16
LEAF_NODE	381:2	381:2	10	uint16
NAME	381:9	381:9	8	type
LEAF_NODE	381:9	381:9	9	type
LEAF_NODE	381:13	381:13	7	;
SIMPLE_DECL	382:2	382:18	6	uint16 typewidth ;
VAR_DECL	382:2	382:9	7	uint16 typewidth
TYPE	382:2	382:2	8	uint16
TYPE_NAME	382:2	382:2	9	uint16
LEAF_NODE	382:2	382:2	10	uint16
NAME	382:9	382:9	8	typewidth
LEAF_NODE	382:9	382:9	9	typewidth
LEAF_NODE	382:18	382:18	7	;
SIMPLE_DECL	383:2	383:14	6	uint64 count ;
VAR_DECL	383:2	383:9	7	uint64 count
TYPE	383:2	383:2	8	uint64
TYPE_NAME	383:2	383:2	9	uint64
LEAF_NODE	383:2	383:2	10	uint64
NAME	383:9	383:9	8	count
LEAF_NODE	383:9	383:9	9	count
LEAF_NODE	383:14	383:14	7	;
SIMPLE_DECL	384:2	384:17	6	uint64 datasize ;
VAR_DECL	384:2	384:9	7	uint64 datasize
TYPE	384:2	384:2	8	uint64
TYPE_NAME	384:2	384:2	9	uint64
LEAF_NODE	384:2	384:2	10	uint64
NAME	384:9	384:9	8	datasize
LEAF_NODE	384:9	384:9	9	datasize
LEAF_NODE	384:17	384:17	7	;
SIMPLE_DECL	385:2	385:14	6	int datafits ;
VAR_DECL	385:2	385:6	7	int datafits
TYPE	385:2	385:2	8	int
TYPE_NAME	385:2	385:2	9	int
LEAF_NODE	385:2	385:2	10	int
NAME	385:6	385:6	8	datafits
LEAF_NODE	385:6	385:6	9	datafits
LEAF_NODE	385:14	385:14	7	;
SIMPLE_DECL	386:2	386:15	6	void * datamem ;
VAR_DECL	386:2	386:8	7	void * datamem
TYPE	386:2	386:6	8	void *
TYPE_NAME	386:2	386:2	9	void
LEAF_NODE	386:2	386:2	10	void
POINTER	386:6	386:6	9	*
LEAF_NODE	386:6	386:6	10	*
NAME	386:8	386:8	8	datamem
LEAF_NODE	386:8	386:8	9	datamem
LEAF_NODE	386:15	386:15	7	;
SIMPLE_DECL	387:2	387:19	6	uint64 dataoffset ;
VAR_DECL	387:2	387:9	7	uint64 dataoffset
TYPE	387:2	387:2	8	uint64
TYPE_NAME	387:2	387:2	9	uint64
LEAF_NODE	387:2	387:2	10	uint64
NAME	387:9	387:9	8	dataoffset
LEAF_NODE	387:9	387:9	9	dataoffset
LEAF_NODE	387:19	387:19	7	;
SIMPLE_DECL	388:2	388:19	6	int datatruncated ;
VAR_DECL	388:2	388:6	7	int datatruncated
TYPE	388:2	388:2	8	int
TYPE_NAME	388:2	388:2	9	int
LEAF_NODE	388:2	388:2	10	int
NAME	388:6	388:6	8	datatruncated
LEAF_NODE	388:6	388:6	9	datatruncated
LEAF_NODE	388:19	388:19	7	;
SIMPLE_DECL	389:16	389:36	6	int datasizeoverflow ;
VAR_DECL	389:16	389:20	7	int datasizeoverflow
TYPE	389:16	389:16	8	int
TYPE_NAME	389:16	389:16	9	int
LEAF_NODE	389:16	389:16	10	int
NAME	389:20	389:20	8	datasizeoverflow
LEAF_NODE	389:20	389:20	9	datasizeoverflow
LEAF_NODE	389:36	389:36	7	;
LEAF_NODE	391:2	391:2	6	tag
LEAF_NODE	391:6	391:6	6	=
LEAF_NODE	391:8	391:8	6	*
EXPR_STATEMENT	391:9	391:20	6	( uint16 * ) dp ;
EXPR	391:9	391:18	7	( uint16 * ) dp
LEAF_NODE	391:9	391:9	8	(
TYPE_NAME	391:10	391:10	8	uint16
LEAF_NODE	391:10	391:10	9	uint16
LEAF_NODE	391:16	391:16	8	*
LEAF_NODE	391:17	391:17	8	)
FIELD	391:18	391:18	8	dp
LEAF_NODE	391:18	391:18	9	dp
LEAF_NODE	391:20	391:20	7	;
SELECTION	392:2	393:3	6	
KEYWORD	392:2	392:2	7	if
LEAF_NODE	392:2	392:2	8	if
LEAF_NODE	392:5	392:5	7	(
CONDITION	392:6	392:6	7	swabflag
EXPR	392:6	392:6	8	swabflag
FIELD	392:6	392:6	9	swabflag
LEAF_NODE	392:6	392:6	10	swabflag
LEAF_NODE	392:14	392:14	7	)
STATEMENTS	393:3	393:3	7	
EXPR_STATEMENT	393:3	393:22	8	TIFFSwabShort ( & tag ) ;
EXPR	393:3	393:3	9	TIFFSwabShort ( & tag )
FUNCTION_CALL	393:3	393:21	10	TIFFSwabShort ( & tag )
CALLEE	393:3	393:3	11	TIFFSwabShort
LEAF_NODE	393:3	393:3	12	TIFFSwabShort
LEAF_NODE	393:16	393:16	11	(
ARGUMENT	393:17	393:17	11	& tag
UNARY_EXPR	393:17	393:18	12	& tag
UNARY_OPERATOR	393:17	393:17	13	&
LEAF_NODE	393:17	393:17	14	&
FIELD	393:18	393:18	13	tag
LEAF_NODE	393:18	393:18	14	tag
LEAF_NODE	393:21	393:21	11	)
LEAF_NODE	393:22	393:22	9	;
EXPR_STATEMENT	394:2	394:22	6	dp += sizeof ( uint16 ) ;
EXPR	394:2	394:2	7	dp += sizeof ( uint16 )
ASSIGN	394:2	394:8	8	dp += sizeof ( uint16 )
LVAL	394:2	394:2	9	dp
FIELD	394:2	394:2	10	dp
LEAF_NODE	394:2	394:2	11	dp
ASSIGN_OP	394:5	394:5	9	+=
LEAF_NODE	394:5	394:5	10	+=
RVAL	394:8	394:8	9	sizeof ( uint16 )
FUNCTION_CALL	394:8	394:21	10	sizeof ( uint16 )
CALLEE	394:8	394:8	11	sizeof
LEAF_NODE	394:8	394:8	12	sizeof
LEAF_NODE	394:14	394:14	11	(
ARGUMENT	394:15	394:15	11	uint16
FIELD	394:15	394:15	12	uint16
LEAF_NODE	394:15	394:15	13	uint16
LEAF_NODE	394:21	394:21	11	)
LEAF_NODE	394:22	394:22	7	;
LEAF_NODE	395:2	395:2	6	type
LEAF_NODE	395:7	395:7	6	=
LEAF_NODE	395:9	395:9	6	*
EXPR_STATEMENT	395:10	395:21	6	( uint16 * ) dp ;
EXPR	395:10	395:19	7	( uint16 * ) dp
LEAF_NODE	395:10	395:10	8	(
TYPE_NAME	395:11	395:11	8	uint16
LEAF_NODE	395:11	395:11	9	uint16
LEAF_NODE	395:17	395:17	8	*
LEAF_NODE	395:18	395:18	8	)
FIELD	395:19	395:19	8	dp
LEAF_NODE	395:19	395:19	9	dp
LEAF_NODE	395:21	395:21	7	;
EXPR_STATEMENT	396:2	396:22	6	dp += sizeof ( uint16 ) ;
EXPR	396:2	396:2	7	dp += sizeof ( uint16 )
ASSIGN	396:2	396:8	8	dp += sizeof ( uint16 )
LVAL	396:2	396:2	9	dp
FIELD	396:2	396:2	10	dp
LEAF_NODE	396:2	396:2	11	dp
ASSIGN_OP	396:5	396:5	9	+=
LEAF_NODE	396:5	396:5	10	+=
RVAL	396:8	396:8	9	sizeof ( uint16 )
FUNCTION_CALL	396:8	396:21	10	sizeof ( uint16 )
CALLEE	396:8	396:8	11	sizeof
LEAF_NODE	396:8	396:8	12	sizeof
LEAF_NODE	396:14	396:14	11	(
ARGUMENT	396:15	396:15	11	uint16
FIELD	396:15	396:15	12	uint16
LEAF_NODE	396:15	396:15	13	uint16
LEAF_NODE	396:21	396:21	11	)
LEAF_NODE	396:22	396:22	7	;
SELECTION	397:2	398:3	6	
KEYWORD	397:2	397:2	7	if
LEAF_NODE	397:2	397:2	8	if
LEAF_NODE	397:5	397:5	7	(
CONDITION	397:6	397:6	7	swabflag
EXPR	397:6	397:6	8	swabflag
FIELD	397:6	397:6	9	swabflag
LEAF_NODE	397:6	397:6	10	swabflag
LEAF_NODE	397:14	397:14	7	)
STATEMENTS	398:3	398:3	7	
EXPR_STATEMENT	398:3	398:23	8	TIFFSwabShort ( & type ) ;
EXPR	398:3	398:3	9	TIFFSwabShort ( & type )
FUNCTION_CALL	398:3	398:22	10	TIFFSwabShort ( & type )
CALLEE	398:3	398:3	11	TIFFSwabShort
LEAF_NODE	398:3	398:3	12	TIFFSwabShort
LEAF_NODE	398:16	398:16	11	(
ARGUMENT	398:17	398:17	11	& type
UNARY_EXPR	398:17	398:18	12	& type
UNARY_OPERATOR	398:17	398:17	13	&
LEAF_NODE	398:17	398:17	14	&
FIELD	398:18	398:18	13	type
LEAF_NODE	398:18	398:18	14	type
LEAF_NODE	398:22	398:22	11	)
LEAF_NODE	398:23	398:23	9	;
EXPR_STATEMENT	399:2	399:23	6	PrintTag ( stdout , tag ) ;
EXPR	399:2	399:2	7	PrintTag ( stdout , tag )
FUNCTION_CALL	399:2	399:22	8	PrintTag ( stdout , tag )
CALLEE	399:2	399:2	9	PrintTag
LEAF_NODE	399:2	399:2	10	PrintTag
LEAF_NODE	399:10	399:10	9	(
ARGUMENT	399:11	399:11	9	stdout
FIELD	399:11	399:11	10	stdout
LEAF_NODE	399:11	399:11	11	stdout
LEAF_NODE	399:17	399:17	9	,
ARGUMENT	399:19	399:19	9	tag
FIELD	399:19	399:19	10	tag
LEAF_NODE	399:19	399:19	11	tag
LEAF_NODE	399:22	399:22	9	)
LEAF_NODE	399:23	399:23	7	;
EXPR_STATEMENT	400:2	400:14	6	putchar ( ' ' ) ;
EXPR	400:2	400:2	7	putchar ( ' ' )
FUNCTION_CALL	400:2	400:13	8	putchar ( ' ' )
CALLEE	400:2	400:2	9	putchar
LEAF_NODE	400:2	400:2	10	putchar
LEAF_NODE	400:9	400:9	9	(
ARGUMENT	400:10	400:10	9	' '
FIELD	400:10	400:10	10	' '
LEAF_NODE	400:10	400:10	11	' '
LEAF_NODE	400:13	400:13	9	)
LEAF_NODE	400:14	400:14	7	;
EXPR_STATEMENT	401:2	401:25	6	PrintType ( stdout , type ) ;
EXPR	401:2	401:2	7	PrintType ( stdout , type )
FUNCTION_CALL	401:2	401:24	8	PrintType ( stdout , type )
CALLEE	401:2	401:2	9	PrintType
LEAF_NODE	401:2	401:2	10	PrintType
LEAF_NODE	401:11	401:11	9	(
ARGUMENT	401:12	401:12	9	stdout
FIELD	401:12	401:12	10	stdout
LEAF_NODE	401:12	401:12	11	stdout
LEAF_NODE	401:18	401:18	9	,
ARGUMENT	401:20	401:20	9	type
FIELD	401:20	401:20	10	type
LEAF_NODE	401:20	401:20	11	type
LEAF_NODE	401:24	401:24	9	)
LEAF_NODE	401:25	401:25	7	;
EXPR_STATEMENT	402:2	402:14	6	putchar ( ' ' ) ;
EXPR	402:2	402:2	7	putchar ( ' ' )
FUNCTION_CALL	402:2	402:13	8	putchar ( ' ' )
CALLEE	402:2	402:2	9	putchar
LEAF_NODE	402:2	402:2	10	putchar
LEAF_NODE	402:9	402:9	9	(
ARGUMENT	402:10	402:10	9	' '
FIELD	402:10	402:10	10	' '
LEAF_NODE	402:10	402:10	11	' '
LEAF_NODE	402:13	402:13	9	)
LEAF_NODE	402:14	402:14	7	;
SELECTION	403:2	404:2	6	
KEYWORD	403:2	403:2	7	if
LEAF_NODE	403:2	403:2	8	if
LEAF_NODE	403:5	403:5	7	(
CONDITION	403:6	403:6	7	! bigtiff
EXPR	403:6	403:6	8	! bigtiff
UNARY_EXPR	403:6	403:7	9	! bigtiff
UNARY_OPERATOR	403:6	403:6	10	!
LEAF_NODE	403:6	403:6	11	!
FIELD	403:7	403:7	10	bigtiff
LEAF_NODE	403:7	403:7	11	bigtiff
LEAF_NODE	403:14	403:14	7	)
STATEMENTS	404:2	411:2	7	
LEAF_NODE	404:2	404:2	8	{
STATEMENTS	405:3	410:3	8	
SIMPLE_DECL	405:3	405:17	9	uint32 count32 ;
VAR_DECL	405:3	405:10	10	uint32 count32
TYPE	405:3	405:3	11	uint32
TYPE_NAME	405:3	405:3	12	uint32
LEAF_NODE	405:3	405:3	13	uint32
NAME	405:10	405:10	11	count32
LEAF_NODE	405:10	405:10	12	count32
LEAF_NODE	405:17	405:17	10	;
LEAF_NODE	406:3	406:3	9	count32
LEAF_NODE	406:11	406:11	9	=
LEAF_NODE	406:13	406:13	9	*
EXPR_STATEMENT	406:14	406:25	9	( uint32 * ) dp ;
EXPR	406:14	406:23	10	( uint32 * ) dp
LEAF_NODE	406:14	406:14	11	(
TYPE_NAME	406:15	406:15	11	uint32
LEAF_NODE	406:15	406:15	12	uint32
LEAF_NODE	406:21	406:21	11	*
LEAF_NODE	406:22	406:22	11	)
FIELD	406:23	406:23	11	dp
LEAF_NODE	406:23	406:23	12	dp
LEAF_NODE	406:25	406:25	10	;
SELECTION	407:3	408:4	9	
KEYWORD	407:3	407:3	10	if
LEAF_NODE	407:3	407:3	11	if
LEAF_NODE	407:6	407:6	10	(
CONDITION	407:7	407:7	10	swabflag
EXPR	407:7	407:7	11	swabflag
FIELD	407:7	407:7	12	swabflag
LEAF_NODE	407:7	407:7	13	swabflag
LEAF_NODE	407:15	407:15	10	)
STATEMENTS	408:4	408:4	10	
EXPR_STATEMENT	408:4	408:26	11	TIFFSwabLong ( & count32 ) ;
EXPR	408:4	408:4	12	TIFFSwabLong ( & count32 )
FUNCTION_CALL	408:4	408:25	13	TIFFSwabLong ( & count32 )
CALLEE	408:4	408:4	14	TIFFSwabLong
LEAF_NODE	408:4	408:4	15	TIFFSwabLong
LEAF_NODE	408:16	408:16	14	(
ARGUMENT	408:17	408:17	14	& count32
UNARY_EXPR	408:17	408:18	15	& count32
UNARY_OPERATOR	408:17	408:17	16	&
LEAF_NODE	408:17	408:17	17	&
FIELD	408:18	408:18	16	count32
LEAF_NODE	408:18	408:18	17	count32
LEAF_NODE	408:25	408:25	14	)
LEAF_NODE	408:26	408:26	12	;
EXPR_STATEMENT	409:3	409:23	9	dp += sizeof ( uint32 ) ;
EXPR	409:3	409:3	10	dp += sizeof ( uint32 )
ASSIGN	409:3	409:9	11	dp += sizeof ( uint32 )
LVAL	409:3	409:3	12	dp
FIELD	409:3	409:3	13	dp
LEAF_NODE	409:3	409:3	14	dp
ASSIGN_OP	409:6	409:6	12	+=
LEAF_NODE	409:6	409:6	13	+=
RVAL	409:9	409:9	12	sizeof ( uint32 )
FUNCTION_CALL	409:9	409:22	13	sizeof ( uint32 )
CALLEE	409:9	409:9	14	sizeof
LEAF_NODE	409:9	409:9	15	sizeof
LEAF_NODE	409:15	409:15	14	(
ARGUMENT	409:16	409:16	14	uint32
FIELD	409:16	409:16	15	uint32
LEAF_NODE	409:16	409:16	16	uint32
LEAF_NODE	409:22	409:22	14	)
LEAF_NODE	409:23	409:23	10	;
EXPR_STATEMENT	410:3	410:18	9	count = count32 ;
EXPR	410:3	410:3	10	count = count32
ASSIGN	410:3	410:11	11	count = count32
LVAL	410:3	410:3	12	count
FIELD	410:3	410:3	13	count
LEAF_NODE	410:3	410:3	14	count
ASSIGN_OP	410:9	410:9	12	=
LEAF_NODE	410:9	410:9	13	=
RVAL	410:11	410:11	12	count32
FIELD	410:11	410:11	13	count32
LEAF_NODE	410:11	410:11	14	count32
LEAF_NODE	410:18	410:18	10	;
LEAF_NODE	411:2	411:2	8	}
SELECTION	412:2	413:2	6	
KEYWORD	412:2	412:2	7	else
LEAF_NODE	412:2	412:2	8	else
STATEMENTS	413:2	418:2	7	
LEAF_NODE	413:2	413:2	8	{
STATEMENTS	414:3	417:3	8	
EXPR_STATEMENT	414:3	414:37	9	memcpy ( & count , dp , sizeof ( uint64 ) ) ;
EXPR	414:3	414:3	10	memcpy ( & count , dp , sizeof ( uint64 ) )
FUNCTION_CALL	414:3	414:36	11	memcpy ( & count , dp , sizeof ( uint64 ) )
CALLEE	414:3	414:3	12	memcpy
LEAF_NODE	414:3	414:3	13	memcpy
LEAF_NODE	414:9	414:9	12	(
ARGUMENT	414:10	414:10	12	& count
UNARY_EXPR	414:10	414:11	13	& count
UNARY_OPERATOR	414:10	414:10	14	&
LEAF_NODE	414:10	414:10	15	&
FIELD	414:11	414:11	14	count
LEAF_NODE	414:11	414:11	15	count
LEAF_NODE	414:16	414:16	12	,
ARGUMENT	414:18	414:18	12	dp
FIELD	414:18	414:18	13	dp
LEAF_NODE	414:18	414:18	14	dp
LEAF_NODE	414:20	414:20	12	,
ARGUMENT	414:22	414:22	12	sizeof ( uint64 )
FUNCTION_CALL	414:22	414:35	13	sizeof ( uint64 )
CALLEE	414:22	414:22	14	sizeof
LEAF_NODE	414:22	414:22	15	sizeof
LEAF_NODE	414:28	414:28	14	(
ARGUMENT	414:29	414:29	14	uint64
FIELD	414:29	414:29	15	uint64
LEAF_NODE	414:29	414:29	16	uint64
LEAF_NODE	414:35	414:35	14	)
LEAF_NODE	414:36	414:36	12	)
LEAF_NODE	414:37	414:37	10	;
SELECTION	415:3	416:4	9	
KEYWORD	415:3	415:3	10	if
LEAF_NODE	415:3	415:3	11	if
LEAF_NODE	415:6	415:6	10	(
CONDITION	415:7	415:7	10	swabflag
EXPR	415:7	415:7	11	swabflag
FIELD	415:7	415:7	12	swabflag
LEAF_NODE	415:7	415:7	13	swabflag
LEAF_NODE	415:15	415:15	10	)
STATEMENTS	416:4	416:4	10	
EXPR_STATEMENT	416:4	416:25	11	TIFFSwabLong8 ( & count ) ;
EXPR	416:4	416:4	12	TIFFSwabLong8 ( & count )
FUNCTION_CALL	416:4	416:24	13	TIFFSwabLong8 ( & count )
CALLEE	416:4	416:4	14	TIFFSwabLong8
LEAF_NODE	416:4	416:4	15	TIFFSwabLong8
LEAF_NODE	416:17	416:17	14	(
ARGUMENT	416:18	416:18	14	& count
UNARY_EXPR	416:18	416:19	15	& count
UNARY_OPERATOR	416:18	416:18	16	&
LEAF_NODE	416:18	416:18	17	&
FIELD	416:19	416:19	16	count
LEAF_NODE	416:19	416:19	17	count
LEAF_NODE	416:24	416:24	14	)
LEAF_NODE	416:25	416:25	12	;
EXPR_STATEMENT	417:3	417:23	9	dp += sizeof ( uint64 ) ;
EXPR	417:3	417:3	10	dp += sizeof ( uint64 )
ASSIGN	417:3	417:9	11	dp += sizeof ( uint64 )
LVAL	417:3	417:3	12	dp
FIELD	417:3	417:3	13	dp
LEAF_NODE	417:3	417:3	14	dp
ASSIGN_OP	417:6	417:6	12	+=
LEAF_NODE	417:6	417:6	13	+=
RVAL	417:9	417:9	12	sizeof ( uint64 )
FUNCTION_CALL	417:9	417:22	13	sizeof ( uint64 )
CALLEE	417:9	417:9	14	sizeof
LEAF_NODE	417:9	417:9	15	sizeof
LEAF_NODE	417:15	417:15	14	(
ARGUMENT	417:16	417:16	14	uint64
FIELD	417:16	417:16	15	uint64
LEAF_NODE	417:16	417:16	16	uint64
LEAF_NODE	417:22	417:22	14	)
LEAF_NODE	417:23	417:23	10	;
LEAF_NODE	418:2	418:2	8	}
EXPR_STATEMENT	420:2	420:43	6	printf ( "%I64u<" , ( unsigned __int64 ) count ) ;
EXPR	420:2	420:2	7	printf ( "%I64u<" , ( unsigned __int64 ) count )
FUNCTION_CALL	420:2	420:42	8	printf ( "%I64u<" , ( unsigned __int64 ) count )
CALLEE	420:2	420:2	9	printf
LEAF_NODE	420:2	420:2	10	printf
LEAF_NODE	420:8	420:8	9	(
ARGUMENT	420:9	420:9	9	"%I64u<"
FIELD	420:9	420:9	10	"%I64u<"
LEAF_NODE	420:9	420:9	11	"%I64u<"
LEAF_NODE	420:17	420:17	9	,
ARGUMENT	420:19	420:37	9	( unsigned __int64 ) count
LEAF_NODE	420:19	420:19	10	(
TYPE_NAME	420:20	420:29	10	unsigned __int64
LEAF_NODE	420:20	420:20	11	unsigned
LEAF_NODE	420:29	420:29	11	__int64
LEAF_NODE	420:36	420:36	10	)
FIELD	420:37	420:37	10	count
LEAF_NODE	420:37	420:37	11	count
LEAF_NODE	420:42	420:42	9	)
LEAF_NODE	420:43	420:43	7	;
LEAF_NODE	422:2	422:2	6	printf
LEAF_NODE	422:8	422:8	6	(
LEAF_NODE	422:9	422:9	6	"%llu<"
LEAF_NODE	422:16	422:16	6	,
LEAF_NODE	422:18	422:18	6	(
LEAF_NODE	422:19	422:19	6	unsigned
LEAF_NODE	422:28	422:28	6	long
LEAF_NODE	422:33	422:33	6	long
LEAF_NODE	422:37	422:37	6	)
LEAF_NODE	422:38	422:38	6	count
LEAF_NODE	422:43	422:43	6	)
LEAF_NODE	422:44	422:44	6	;
SELECTION	424:2	425:3	6	
KEYWORD	424:2	424:2	7	if
LEAF_NODE	424:2	424:2	8	if
LEAF_NODE	424:5	424:5	7	(
CONDITION	424:6	424:6	7	type >= NWIDTHS
EXPR	424:6	424:14	8	type >= NWIDTHS
FIELD	424:6	424:6	9	type
LEAF_NODE	424:6	424:6	10	type
REL_OPERATOR	424:11	424:11	9	>=
LEAF_NODE	424:11	424:11	10	>=
FIELD	424:14	424:14	9	NWIDTHS
LEAF_NODE	424:14	424:14	10	NWIDTHS
LEAF_NODE	424:21	424:21	7	)
STATEMENTS	425:3	425:3	7	
EXPR_STATEMENT	425:3	425:16	8	typewidth = 0 ;
EXPR	425:3	425:3	9	typewidth = 0
ASSIGN	425:3	425:15	10	typewidth = 0
LVAL	425:3	425:3	11	typewidth
FIELD	425:3	425:3	12	typewidth
LEAF_NODE	425:3	425:3	13	typewidth
ASSIGN_OP	425:13	425:13	11	=
LEAF_NODE	425:13	425:13	12	=
RVAL	425:15	425:15	11	0
FIELD	425:15	425:15	12	0
LEAF_NODE	425:15	425:15	13	0
LEAF_NODE	425:16	425:16	9	;
SELECTION	426:2	427:3	6	
KEYWORD	426:2	426:2	7	else
LEAF_NODE	426:2	426:2	8	else
STATEMENTS	427:3	427:3	7	
EXPR_STATEMENT	427:3	427:30	8	typewidth = datawidth [ type ] ;
EXPR	427:3	427:3	9	typewidth = datawidth [ type ]
ASSIGN	427:3	427:15	10	typewidth = datawidth [ type ]
LVAL	427:3	427:3	11	typewidth
FIELD	427:3	427:3	12	typewidth
LEAF_NODE	427:3	427:3	13	typewidth
ASSIGN_OP	427:13	427:13	11	=
LEAF_NODE	427:13	427:13	12	=
RVAL	427:15	427:15	11	datawidth [ type ]
FIELD	427:15	427:29	12	datawidth [ type ]
LEAF_NODE	427:15	427:15	13	datawidth
LEAF_NODE	427:24	427:24	13	[
EXPR	427:25	427:25	13	type
FIELD	427:25	427:25	14	type
LEAF_NODE	427:25	427:25	15	type
LEAF_NODE	427:29	427:29	13	]
LEAF_NODE	427:30	427:30	9	;
EXPR_STATEMENT	428:2	428:55	6	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth ) ;
EXPR	428:2	428:2	7	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth )
ASSIGN	428:2	428:13	8	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth )
LVAL	428:2	428:2	9	datasize
FIELD	428:2	428:2	10	datasize
LEAF_NODE	428:2	428:2	11	datasize
ASSIGN_OP	428:11	428:11	9	=
LEAF_NODE	428:11	428:11	10	=
RVAL	428:13	428:13	9	TIFFSafeMultiply ( tmsize_t , count , typewidth )
FUNCTION_CALL	428:13	428:54	10	TIFFSafeMultiply ( tmsize_t , count , typewidth )
CALLEE	428:13	428:13	11	TIFFSafeMultiply
LEAF_NODE	428:13	428:13	12	TIFFSafeMultiply
LEAF_NODE	428:29	428:29	11	(
ARGUMENT	428:30	428:30	11	tmsize_t
FIELD	428:30	428:30	12	tmsize_t
LEAF_NODE	428:30	428:30	13	tmsize_t
LEAF_NODE	428:38	428:38	11	,
ARGUMENT	428:39	428:39	11	count
FIELD	428:39	428:39	12	count
LEAF_NODE	428:39	428:39	13	count
LEAF_NODE	428:44	428:44	11	,
ARGUMENT	428:45	428:45	11	typewidth
FIELD	428:45	428:45	12	typewidth
LEAF_NODE	428:45	428:45	13	typewidth
LEAF_NODE	428:54	428:54	11	)
LEAF_NODE	428:55	428:55	7	;
EXPR_STATEMENT	429:16	429:83	6	datasizeoverflow = ( typewidth > 0 && datasize / typewidth != count ) ;
EXPR	429:16	429:16	7	datasizeoverflow = ( typewidth > 0 && datasize / typewidth != count )
ASSIGN	429:16	429:35	8	datasizeoverflow = ( typewidth > 0 && datasize / typewidth != count )
LVAL	429:16	429:16	9	datasizeoverflow
FIELD	429:16	429:16	10	datasizeoverflow
LEAF_NODE	429:16	429:16	11	datasizeoverflow
ASSIGN_OP	429:33	429:33	9	=
LEAF_NODE	429:33	429:33	10	=
RVAL	429:35	429:82	9	( typewidth > 0 && datasize / typewidth != count )
LEAF_NODE	429:35	429:35	10	(
AND	429:36	429:53	10	typewidth > 0 && datasize / typewidth != count
EXPR	429:36	429:48	11	typewidth > 0
FIELD	429:36	429:36	12	typewidth
LEAF_NODE	429:36	429:36	13	typewidth
REL_OPERATOR	429:46	429:46	12	>
LEAF_NODE	429:46	429:46	13	>
FIELD	429:48	429:48	12	0
LEAF_NODE	429:48	429:48	13	0
LEAF_NODE	429:50	429:50	11	&&
EXPR	429:53	429:77	11	datasize / typewidth != count
FIELD	429:53	429:53	12	datasize
LEAF_NODE	429:53	429:53	13	datasize
LEAF_NODE	429:62	429:62	12	/
FIELD	429:64	429:64	12	typewidth
LEAF_NODE	429:64	429:64	13	typewidth
EQ_OPERATOR	429:74	429:74	12	!=
LEAF_NODE	429:74	429:74	13	!=
FIELD	429:77	429:77	12	count
LEAF_NODE	429:77	429:77	13	count
LEAF_NODE	429:82	429:82	10	)
LEAF_NODE	429:83	429:83	7	;
EXPR_STATEMENT	430:2	430:14	6	datafits = 1 ;
EXPR	430:2	430:2	7	datafits = 1
ASSIGN	430:2	430:13	8	datafits = 1
LVAL	430:2	430:2	9	datafits
FIELD	430:2	430:2	10	datafits
LEAF_NODE	430:2	430:2	11	datafits
ASSIGN_OP	430:11	430:11	9	=
LEAF_NODE	430:11	430:11	10	=
RVAL	430:13	430:13	9	1
FIELD	430:13	430:13	10	1
LEAF_NODE	430:13	430:13	11	1
LEAF_NODE	430:14	430:14	7	;
EXPR_STATEMENT	431:2	431:14	6	datamem = dp ;
EXPR	431:2	431:2	7	datamem = dp
ASSIGN	431:2	431:12	8	datamem = dp
LVAL	431:2	431:2	9	datamem
FIELD	431:2	431:2	10	datamem
LEAF_NODE	431:2	431:2	11	datamem
ASSIGN_OP	431:10	431:10	9	=
LEAF_NODE	431:10	431:10	10	=
RVAL	431:12	431:12	9	dp
FIELD	431:12	431:12	10	dp
LEAF_NODE	431:12	431:12	11	dp
LEAF_NODE	431:14	431:14	7	;
EXPR_STATEMENT	432:2	432:16	6	dataoffset = 0 ;
EXPR	432:2	432:2	7	dataoffset = 0
ASSIGN	432:2	432:15	8	dataoffset = 0
LVAL	432:2	432:2	9	dataoffset
FIELD	432:2	432:2	10	dataoffset
LEAF_NODE	432:2	432:2	11	dataoffset
ASSIGN_OP	432:13	432:13	9	=
LEAF_NODE	432:13	432:13	10	=
RVAL	432:15	432:15	9	0
FIELD	432:15	432:15	10	0
LEAF_NODE	432:15	432:15	11	0
LEAF_NODE	432:16	432:16	7	;
EXPR_STATEMENT	433:2	433:19	6	datatruncated = 0 ;
EXPR	433:2	433:2	7	datatruncated = 0
ASSIGN	433:2	433:18	8	datatruncated = 0
LVAL	433:2	433:2	9	datatruncated
FIELD	433:2	433:2	10	datatruncated
LEAF_NODE	433:2	433:2	11	datatruncated
ASSIGN_OP	433:16	433:16	9	=
LEAF_NODE	433:16	433:16	10	=
RVAL	433:18	433:18	9	0
FIELD	433:18	433:18	10	0
LEAF_NODE	433:18	433:18	11	0
LEAF_NODE	433:19	433:19	7	;
SELECTION	434:2	435:2	6	
KEYWORD	434:2	434:2	7	if
LEAF_NODE	434:2	434:2	8	if
LEAF_NODE	434:5	434:5	7	(
CONDITION	434:6	434:6	7	! bigtiff
EXPR	434:6	434:6	8	! bigtiff
UNARY_EXPR	434:6	434:7	9	! bigtiff
UNARY_OPERATOR	434:6	434:6	10	!
LEAF_NODE	434:6	434:6	11	!
FIELD	434:7	434:7	10	bigtiff
LEAF_NODE	434:7	434:7	11	bigtiff
LEAF_NODE	434:14	434:14	7	)
STATEMENTS	435:2	447:2	7	
LEAF_NODE	435:2	435:2	8	{
STATEMENTS	436:3	446:3	8	
SELECTION	436:3	437:3	9	
KEYWORD	436:3	436:3	10	if
LEAF_NODE	436:3	436:3	11	if
LEAF_NODE	436:6	436:6	10	(
CONDITION	436:7	436:7	10	datasizeoverflow || datasize > 4
EXPR	436:7	436:7	11	datasizeoverflow || datasize > 4
OR	436:7	436:27	12	datasizeoverflow || datasize > 4
EXPR	436:7	436:7	13	datasizeoverflow
FIELD	436:7	436:7	14	datasizeoverflow
LEAF_NODE	436:7	436:7	15	datasizeoverflow
LEAF_NODE	436:24	436:24	13	||
EXPR	436:27	436:36	13	datasize > 4
FIELD	436:27	436:27	14	datasize
LEAF_NODE	436:27	436:27	15	datasize
REL_OPERATOR	436:35	436:35	14	>
LEAF_NODE	436:35	436:35	15	>
FIELD	436:36	436:36	14	4
LEAF_NODE	436:36	436:36	15	4
LEAF_NODE	436:37	436:37	10	)
STATEMENTS	437:3	445:3	10	
LEAF_NODE	437:3	437:3	11	{
STATEMENTS	438:4	444:4	11	
SIMPLE_DECL	438:4	438:23	12	uint32 dataoffset32 ;
VAR_DECL	438:4	438:11	13	uint32 dataoffset32
TYPE	438:4	438:4	14	uint32
TYPE_NAME	438:4	438:4	15	uint32
LEAF_NODE	438:4	438:4	16	uint32
NAME	438:11	438:11	14	dataoffset32
LEAF_NODE	438:11	438:11	15	dataoffset32
LEAF_NODE	438:23	438:23	13	;
EXPR_STATEMENT	439:4	439:16	12	datafits = 0 ;
EXPR	439:4	439:4	13	datafits = 0
ASSIGN	439:4	439:15	14	datafits = 0
LVAL	439:4	439:4	15	datafits
FIELD	439:4	439:4	16	datafits
LEAF_NODE	439:4	439:4	17	datafits
ASSIGN_OP	439:13	439:13	15	=
LEAF_NODE	439:13	439:13	16	=
RVAL	439:15	439:15	15	0
FIELD	439:15	439:15	16	0
LEAF_NODE	439:15	439:15	17	0
LEAF_NODE	439:16	439:16	13	;
EXPR_STATEMENT	440:4	440:18	12	datamem = NULL ;
EXPR	440:4	440:4	13	datamem = NULL
ASSIGN	440:4	440:14	14	datamem = NULL
LVAL	440:4	440:4	15	datamem
FIELD	440:4	440:4	16	datamem
LEAF_NODE	440:4	440:4	17	datamem
ASSIGN_OP	440:12	440:12	15	=
LEAF_NODE	440:12	440:12	16	=
RVAL	440:14	440:14	15	NULL
FIELD	440:14	440:14	16	NULL
LEAF_NODE	440:14	440:14	17	NULL
LEAF_NODE	440:18	440:18	13	;
LEAF_NODE	441:4	441:4	12	dataoffset32
LEAF_NODE	441:17	441:17	12	=
LEAF_NODE	441:19	441:19	12	*
EXPR_STATEMENT	441:20	441:31	12	( uint32 * ) dp ;
EXPR	441:20	441:29	13	( uint32 * ) dp
LEAF_NODE	441:20	441:20	14	(
TYPE_NAME	441:21	441:21	14	uint32
LEAF_NODE	441:21	441:21	15	uint32
LEAF_NODE	441:27	441:27	14	*
LEAF_NODE	441:28	441:28	14	)
FIELD	441:29	441:29	14	dp
LEAF_NODE	441:29	441:29	15	dp
LEAF_NODE	441:31	441:31	13	;
SELECTION	442:4	443:5	12	
KEYWORD	442:4	442:4	13	if
LEAF_NODE	442:4	442:4	14	if
LEAF_NODE	442:7	442:7	13	(
CONDITION	442:8	442:8	13	swabflag
EXPR	442:8	442:8	14	swabflag
FIELD	442:8	442:8	15	swabflag
LEAF_NODE	442:8	442:8	16	swabflag
LEAF_NODE	442:16	442:16	13	)
STATEMENTS	443:5	443:5	13	
EXPR_STATEMENT	443:5	443:32	14	TIFFSwabLong ( & dataoffset32 ) ;
EXPR	443:5	443:5	15	TIFFSwabLong ( & dataoffset32 )
FUNCTION_CALL	443:5	443:31	16	TIFFSwabLong ( & dataoffset32 )
CALLEE	443:5	443:5	17	TIFFSwabLong
LEAF_NODE	443:5	443:5	18	TIFFSwabLong
LEAF_NODE	443:17	443:17	17	(
ARGUMENT	443:18	443:18	17	& dataoffset32
UNARY_EXPR	443:18	443:19	18	& dataoffset32
UNARY_OPERATOR	443:18	443:18	19	&
LEAF_NODE	443:18	443:18	20	&
FIELD	443:19	443:19	19	dataoffset32
LEAF_NODE	443:19	443:19	20	dataoffset32
LEAF_NODE	443:31	443:31	17	)
LEAF_NODE	443:32	443:32	15	;
EXPR_STATEMENT	444:4	444:29	12	dataoffset = dataoffset32 ;
EXPR	444:4	444:4	13	dataoffset = dataoffset32
ASSIGN	444:4	444:17	14	dataoffset = dataoffset32
LVAL	444:4	444:4	15	dataoffset
FIELD	444:4	444:4	16	dataoffset
LEAF_NODE	444:4	444:4	17	dataoffset
ASSIGN_OP	444:15	444:15	15	=
LEAF_NODE	444:15	444:15	16	=
RVAL	444:17	444:17	15	dataoffset32
FIELD	444:17	444:17	16	dataoffset32
LEAF_NODE	444:17	444:17	17	dataoffset32
LEAF_NODE	444:29	444:29	13	;
LEAF_NODE	445:3	445:3	11	}
EXPR_STATEMENT	446:3	446:23	9	dp += sizeof ( uint32 ) ;
EXPR	446:3	446:3	10	dp += sizeof ( uint32 )
ASSIGN	446:3	446:9	11	dp += sizeof ( uint32 )
LVAL	446:3	446:3	12	dp
FIELD	446:3	446:3	13	dp
LEAF_NODE	446:3	446:3	14	dp
ASSIGN_OP	446:6	446:6	12	+=
LEAF_NODE	446:6	446:6	13	+=
RVAL	446:9	446:9	12	sizeof ( uint32 )
FUNCTION_CALL	446:9	446:22	13	sizeof ( uint32 )
CALLEE	446:9	446:9	14	sizeof
LEAF_NODE	446:9	446:9	15	sizeof
LEAF_NODE	446:15	446:15	14	(
ARGUMENT	446:16	446:16	14	uint32
FIELD	446:16	446:16	15	uint32
LEAF_NODE	446:16	446:16	16	uint32
LEAF_NODE	446:22	446:22	14	)
LEAF_NODE	446:23	446:23	10	;
LEAF_NODE	447:2	447:2	8	}
SELECTION	448:2	449:2	6	
KEYWORD	448:2	448:2	7	else
LEAF_NODE	448:2	448:2	8	else
STATEMENTS	449:2	459:2	7	
LEAF_NODE	449:2	449:2	8	{
STATEMENTS	450:3	458:3	8	
SELECTION	450:3	451:3	9	
KEYWORD	450:3	450:3	10	if
LEAF_NODE	450:3	450:3	11	if
LEAF_NODE	450:6	450:6	10	(
CONDITION	450:7	450:7	10	datasizeoverflow || datasize > 8
EXPR	450:7	450:7	11	datasizeoverflow || datasize > 8
OR	450:7	450:27	12	datasizeoverflow || datasize > 8
EXPR	450:7	450:7	13	datasizeoverflow
FIELD	450:7	450:7	14	datasizeoverflow
LEAF_NODE	450:7	450:7	15	datasizeoverflow
LEAF_NODE	450:24	450:24	13	||
EXPR	450:27	450:36	13	datasize > 8
FIELD	450:27	450:27	14	datasize
LEAF_NODE	450:27	450:27	15	datasize
REL_OPERATOR	450:35	450:35	14	>
LEAF_NODE	450:35	450:35	15	>
FIELD	450:36	450:36	14	8
LEAF_NODE	450:36	450:36	15	8
LEAF_NODE	450:37	450:37	10	)
STATEMENTS	451:3	457:3	10	
LEAF_NODE	451:3	451:3	11	{
STATEMENTS	452:4	455:4	11	
EXPR_STATEMENT	452:4	452:16	12	datafits = 0 ;
EXPR	452:4	452:4	13	datafits = 0
ASSIGN	452:4	452:15	14	datafits = 0
LVAL	452:4	452:4	15	datafits
FIELD	452:4	452:4	16	datafits
LEAF_NODE	452:4	452:4	17	datafits
ASSIGN_OP	452:13	452:13	15	=
LEAF_NODE	452:13	452:13	16	=
RVAL	452:15	452:15	15	0
FIELD	452:15	452:15	16	0
LEAF_NODE	452:15	452:15	17	0
LEAF_NODE	452:16	452:16	13	;
EXPR_STATEMENT	453:4	453:18	12	datamem = NULL ;
EXPR	453:4	453:4	13	datamem = NULL
ASSIGN	453:4	453:14	14	datamem = NULL
LVAL	453:4	453:4	15	datamem
FIELD	453:4	453:4	16	datamem
LEAF_NODE	453:4	453:4	17	datamem
ASSIGN_OP	453:12	453:12	15	=
LEAF_NODE	453:12	453:12	16	=
RVAL	453:14	453:14	15	NULL
FIELD	453:14	453:14	16	NULL
LEAF_NODE	453:14	453:14	17	NULL
LEAF_NODE	453:18	453:18	13	;
LEAF_NODE	454:4	454:4	12	dataoffset
LEAF_NODE	454:15	454:15	12	=
LEAF_NODE	454:17	454:17	12	*
EXPR_STATEMENT	454:18	454:29	12	( uint64 * ) dp ;
EXPR	454:18	454:27	13	( uint64 * ) dp
LEAF_NODE	454:18	454:18	14	(
TYPE_NAME	454:19	454:19	14	uint64
LEAF_NODE	454:19	454:19	15	uint64
LEAF_NODE	454:25	454:25	14	*
LEAF_NODE	454:26	454:26	14	)
FIELD	454:27	454:27	14	dp
LEAF_NODE	454:27	454:27	15	dp
LEAF_NODE	454:29	454:29	13	;
SELECTION	455:4	456:5	12	
KEYWORD	455:4	455:4	13	if
LEAF_NODE	455:4	455:4	14	if
LEAF_NODE	455:7	455:7	13	(
CONDITION	455:8	455:8	13	swabflag
EXPR	455:8	455:8	14	swabflag
FIELD	455:8	455:8	15	swabflag
LEAF_NODE	455:8	455:8	16	swabflag
LEAF_NODE	455:16	455:16	13	)
STATEMENTS	456:5	456:5	13	
EXPR_STATEMENT	456:5	456:31	14	TIFFSwabLong8 ( & dataoffset ) ;
EXPR	456:5	456:5	15	TIFFSwabLong8 ( & dataoffset )
FUNCTION_CALL	456:5	456:30	16	TIFFSwabLong8 ( & dataoffset )
CALLEE	456:5	456:5	17	TIFFSwabLong8
LEAF_NODE	456:5	456:5	18	TIFFSwabLong8
LEAF_NODE	456:18	456:18	17	(
ARGUMENT	456:19	456:19	17	& dataoffset
UNARY_EXPR	456:19	456:20	18	& dataoffset
UNARY_OPERATOR	456:19	456:19	19	&
LEAF_NODE	456:19	456:19	20	&
FIELD	456:20	456:20	19	dataoffset
LEAF_NODE	456:20	456:20	20	dataoffset
LEAF_NODE	456:30	456:30	17	)
LEAF_NODE	456:31	456:31	15	;
LEAF_NODE	457:3	457:3	11	}
EXPR_STATEMENT	458:3	458:23	9	dp += sizeof ( uint64 ) ;
EXPR	458:3	458:3	10	dp += sizeof ( uint64 )
ASSIGN	458:3	458:9	11	dp += sizeof ( uint64 )
LVAL	458:3	458:3	12	dp
FIELD	458:3	458:3	13	dp
LEAF_NODE	458:3	458:3	14	dp
ASSIGN_OP	458:6	458:6	12	+=
LEAF_NODE	458:6	458:6	13	+=
RVAL	458:9	458:9	12	sizeof ( uint64 )
FUNCTION_CALL	458:9	458:22	13	sizeof ( uint64 )
CALLEE	458:9	458:9	14	sizeof
LEAF_NODE	458:9	458:9	15	sizeof
LEAF_NODE	458:15	458:15	14	(
ARGUMENT	458:16	458:16	14	uint64
FIELD	458:16	458:16	15	uint64
LEAF_NODE	458:16	458:16	16	uint64
LEAF_NODE	458:22	458:22	14	)
LEAF_NODE	458:23	458:23	10	;
LEAF_NODE	459:2	459:2	8	}
SELECTION	460:2	461:2	6	
KEYWORD	460:2	460:2	7	if
LEAF_NODE	460:2	460:2	8	if
LEAF_NODE	460:5	460:5	7	(
CONDITION	460:6	460:6	7	datasizeoverflow || datasize > 0x10000
EXPR	460:6	460:6	8	datasizeoverflow || datasize > 0x10000
OR	460:6	460:26	9	datasizeoverflow || datasize > 0x10000
EXPR	460:6	460:6	10	datasizeoverflow
FIELD	460:6	460:6	11	datasizeoverflow
LEAF_NODE	460:6	460:6	12	datasizeoverflow
LEAF_NODE	460:23	460:23	10	||
EXPR	460:26	460:35	10	datasize > 0x10000
FIELD	460:26	460:26	11	datasize
LEAF_NODE	460:26	460:26	12	datasize
REL_OPERATOR	460:34	460:34	11	>
LEAF_NODE	460:34	460:34	12	>
FIELD	460:35	460:35	11	0x10000
LEAF_NODE	460:35	460:35	12	0x10000
LEAF_NODE	460:42	460:42	7	)
STATEMENTS	461:2	465:2	7	
LEAF_NODE	461:2	461:2	8	{
STATEMENTS	462:3	464:3	8	
EXPR_STATEMENT	462:3	462:20	9	datatruncated = 1 ;
EXPR	462:3	462:3	10	datatruncated = 1
ASSIGN	462:3	462:19	11	datatruncated = 1
LVAL	462:3	462:3	12	datatruncated
FIELD	462:3	462:3	13	datatruncated
LEAF_NODE	462:3	462:3	14	datatruncated
ASSIGN_OP	462:17	462:17	12	=
LEAF_NODE	462:17	462:17	13	=
RVAL	462:19	462:19	12	1
FIELD	462:19	462:19	13	1
LEAF_NODE	462:19	462:19	14	1
LEAF_NODE	462:20	462:20	10	;
EXPR_STATEMENT	463:3	463:28	9	count = 0x10000 / typewidth ;
EXPR	463:3	463:3	10	count = 0x10000 / typewidth
ASSIGN	463:3	463:11	11	count = 0x10000 / typewidth
LVAL	463:3	463:3	12	count
FIELD	463:3	463:3	13	count
LEAF_NODE	463:3	463:3	14	count
ASSIGN_OP	463:9	463:9	12	=
LEAF_NODE	463:9	463:9	13	=
RVAL	463:11	463:19	12	0x10000 / typewidth
FIELD	463:11	463:11	13	0x10000
LEAF_NODE	463:11	463:11	14	0x10000
LEAF_NODE	463:18	463:18	13	/
FIELD	463:19	463:19	13	typewidth
LEAF_NODE	463:19	463:19	14	typewidth
LEAF_NODE	463:28	463:28	10	;
EXPR_STATEMENT	464:3	464:56	9	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth ) ;
EXPR	464:3	464:3	10	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth )
ASSIGN	464:3	464:14	11	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth )
LVAL	464:3	464:3	12	datasize
FIELD	464:3	464:3	13	datasize
LEAF_NODE	464:3	464:3	14	datasize
ASSIGN_OP	464:12	464:12	12	=
LEAF_NODE	464:12	464:12	13	=
RVAL	464:14	464:14	12	TIFFSafeMultiply ( tmsize_t , count , typewidth )
FUNCTION_CALL	464:14	464:55	13	TIFFSafeMultiply ( tmsize_t , count , typewidth )
CALLEE	464:14	464:14	14	TIFFSafeMultiply
LEAF_NODE	464:14	464:14	15	TIFFSafeMultiply
LEAF_NODE	464:30	464:30	14	(
ARGUMENT	464:31	464:31	14	tmsize_t
FIELD	464:31	464:31	15	tmsize_t
LEAF_NODE	464:31	464:31	16	tmsize_t
LEAF_NODE	464:39	464:39	14	,
ARGUMENT	464:40	464:40	14	count
FIELD	464:40	464:40	15	count
LEAF_NODE	464:40	464:40	16	count
LEAF_NODE	464:45	464:45	14	,
ARGUMENT	464:46	464:46	14	typewidth
FIELD	464:46	464:46	15	typewidth
LEAF_NODE	464:46	464:46	16	typewidth
LEAF_NODE	464:55	464:55	14	)
LEAF_NODE	464:56	464:56	10	;
LEAF_NODE	465:2	465:2	8	}
SELECTION	466:2	467:2	6	
KEYWORD	466:2	466:2	7	if
LEAF_NODE	466:2	466:2	8	if
LEAF_NODE	466:5	466:5	7	(
CONDITION	466:6	466:6	7	count > maxitems
EXPR	466:6	466:12	8	count > maxitems
FIELD	466:6	466:6	9	count
LEAF_NODE	466:6	466:6	10	count
REL_OPERATOR	466:11	466:11	9	>
LEAF_NODE	466:11	466:11	10	>
FIELD	466:12	466:12	9	maxitems
LEAF_NODE	466:12	466:12	10	maxitems
LEAF_NODE	466:20	466:20	7	)
STATEMENTS	467:2	471:2	7	
LEAF_NODE	467:2	467:2	8	{
STATEMENTS	468:3	470:24	8	
EXPR_STATEMENT	468:3	468:20	9	datatruncated = 1 ;
EXPR	468:3	468:3	10	datatruncated = 1
ASSIGN	468:3	468:19	11	datatruncated = 1
LVAL	468:3	468:3	12	datatruncated
FIELD	468:3	468:3	13	datatruncated
LEAF_NODE	468:3	468:3	14	datatruncated
ASSIGN_OP	468:17	468:17	12	=
LEAF_NODE	468:17	468:17	13	=
RVAL	468:19	468:19	12	1
FIELD	468:19	468:19	13	1
LEAF_NODE	468:19	468:19	14	1
LEAF_NODE	468:20	468:20	10	;
EXPR_STATEMENT	469:3	469:19	9	count = maxitems ;
EXPR	469:3	469:3	10	count = maxitems
ASSIGN	469:3	469:11	11	count = maxitems
LVAL	469:3	469:3	12	count
FIELD	469:3	469:3	13	count
LEAF_NODE	469:3	469:3	14	count
ASSIGN_OP	469:9	469:9	12	=
LEAF_NODE	469:9	469:9	13	=
RVAL	469:11	469:11	12	maxitems
FIELD	469:11	469:11	13	maxitems
LEAF_NODE	469:11	469:11	14	maxitems
LEAF_NODE	469:19	469:19	10	;
EXPR_STATEMENT	470:24	470:77	9	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth ) ;
EXPR	470:24	470:24	10	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth )
ASSIGN	470:24	470:35	11	datasize = TIFFSafeMultiply ( tmsize_t , count , typewidth )
LVAL	470:24	470:24	12	datasize
FIELD	470:24	470:24	13	datasize
LEAF_NODE	470:24	470:24	14	datasize
ASSIGN_OP	470:33	470:33	12	=
LEAF_NODE	470:33	470:33	13	=
RVAL	470:35	470:35	12	TIFFSafeMultiply ( tmsize_t , count , typewidth )
FUNCTION_CALL	470:35	470:76	13	TIFFSafeMultiply ( tmsize_t , count , typewidth )
CALLEE	470:35	470:35	14	TIFFSafeMultiply
LEAF_NODE	470:35	470:35	15	TIFFSafeMultiply
LEAF_NODE	470:51	470:51	14	(
ARGUMENT	470:52	470:52	14	tmsize_t
FIELD	470:52	470:52	15	tmsize_t
LEAF_NODE	470:52	470:52	16	tmsize_t
LEAF_NODE	470:60	470:60	14	,
ARGUMENT	470:61	470:61	14	count
FIELD	470:61	470:61	15	count
LEAF_NODE	470:61	470:61	16	count
LEAF_NODE	470:66	470:66	14	,
ARGUMENT	470:67	470:67	14	typewidth
FIELD	470:67	470:67	15	typewidth
LEAF_NODE	470:67	470:67	16	typewidth
LEAF_NODE	470:76	470:76	14	)
LEAF_NODE	470:77	470:77	10	;
LEAF_NODE	471:2	471:2	8	}
SELECTION	472:2	473:2	6	
KEYWORD	472:2	472:2	7	if
LEAF_NODE	472:2	472:2	8	if
LEAF_NODE	472:5	472:5	7	(
CONDITION	472:6	472:6	7	! datafits
EXPR	472:6	472:6	8	! datafits
UNARY_EXPR	472:6	472:7	9	! datafits
UNARY_OPERATOR	472:6	472:6	10	!
LEAF_NODE	472:6	472:6	11	!
FIELD	472:7	472:7	10	datafits
LEAF_NODE	472:7	472:7	11	datafits
LEAF_NODE	472:15	472:15	7	)
STATEMENTS	473:2	493:2	7	
LEAF_NODE	473:2	473:2	8	{
STATEMENTS	474:3	491:5	8	
EXPR_STATEMENT	474:3	474:34	9	datamem = _TIFFmalloc ( datasize ) ;
EXPR	474:3	474:3	10	datamem = _TIFFmalloc ( datasize )
ASSIGN	474:3	474:13	11	datamem = _TIFFmalloc ( datasize )
LVAL	474:3	474:3	12	datamem
FIELD	474:3	474:3	13	datamem
LEAF_NODE	474:3	474:3	14	datamem
ASSIGN_OP	474:11	474:11	12	=
LEAF_NODE	474:11	474:11	13	=
RVAL	474:13	474:13	12	_TIFFmalloc ( datasize )
FUNCTION_CALL	474:13	474:33	13	_TIFFmalloc ( datasize )
CALLEE	474:13	474:13	14	_TIFFmalloc
LEAF_NODE	474:13	474:13	15	_TIFFmalloc
LEAF_NODE	474:24	474:24	14	(
ARGUMENT	474:25	474:25	14	datasize
FIELD	474:25	474:25	15	datasize
LEAF_NODE	474:25	474:25	16	datasize
LEAF_NODE	474:33	474:33	14	)
LEAF_NODE	474:34	474:34	10	;
SELECTION	475:3	475:16	9	
KEYWORD	475:3	475:3	10	if
LEAF_NODE	475:3	475:3	11	if
LEAF_NODE	475:6	475:6	10	(
CONDITION	475:7	475:7	10	datamem
EXPR	475:7	475:7	11	datamem
FIELD	475:7	475:7	12	datamem
LEAF_NODE	475:7	475:7	13	datamem
LEAF_NODE	475:14	475:14	10	)
STATEMENTS	475:16	491:3	10	
LEAF_NODE	475:16	475:16	11	{
STATEMENTS	476:4	484:4	11	
SELECTION	476:4	478:4	12	
KEYWORD	476:4	476:4	13	if
LEAF_NODE	476:4	476:4	14	if
LEAF_NODE	476:7	476:7	13	(
CONDITION	476:8	476:8	13	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) dataoffset , 0 ) != ( _TIFF_off_t ) dataoffset
EXPR	476:8	477:21	14	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) dataoffset , 0 ) != ( _TIFF_off_t ) dataoffset
FUNCTION_CALL	476:8	476:52	15	_TIFF_lseek_f ( fd , ( _TIFF_off_t ) dataoffset , 0 )
CALLEE	476:8	476:8	16	_TIFF_lseek_f
LEAF_NODE	476:8	476:8	17	_TIFF_lseek_f
LEAF_NODE	476:21	476:21	16	(
ARGUMENT	476:22	476:22	16	fd
FIELD	476:22	476:22	17	fd
LEAF_NODE	476:22	476:22	18	fd
LEAF_NODE	476:24	476:24	16	,
ARGUMENT	476:26	476:39	16	( _TIFF_off_t ) dataoffset
LEAF_NODE	476:26	476:26	17	(
TYPE_NAME	476:27	476:27	17	_TIFF_off_t
LEAF_NODE	476:27	476:27	18	_TIFF_off_t
LEAF_NODE	476:38	476:38	17	)
FIELD	476:39	476:39	17	dataoffset
LEAF_NODE	476:39	476:39	18	dataoffset
LEAF_NODE	476:49	476:49	16	,
ARGUMENT	476:51	476:51	16	0
FIELD	476:51	476:51	17	0
LEAF_NODE	476:51	476:51	18	0
LEAF_NODE	476:52	476:52	16	)
EQ_OPERATOR	476:54	476:54	15	!=
LEAF_NODE	476:54	476:54	16	!=
LEAF_NODE	477:8	477:8	15	(
TYPE_NAME	477:9	477:9	15	_TIFF_off_t
LEAF_NODE	477:9	477:9	16	_TIFF_off_t
LEAF_NODE	477:20	477:20	15	)
FIELD	477:21	477:21	15	dataoffset
LEAF_NODE	477:21	477:21	16	dataoffset
LEAF_NODE	477:31	477:31	13	)
STATEMENTS	478:4	483:4	13	
LEAF_NODE	478:4	478:4	14	{
STATEMENTS	479:5	482:5	14	
EXPR_STATEMENT	479:5	480:45	15	Error ( "Seek error accessing tag %u value" , tag ) ;
EXPR	479:5	479:5	16	Error ( "Seek error accessing tag %u value" , tag )
FUNCTION_CALL	479:5	480:44	17	Error ( "Seek error accessing tag %u value" , tag )
CALLEE	479:5	479:5	18	Error
LEAF_NODE	479:5	479:5	19	Error
LEAF_NODE	479:10	479:10	18	(
ARGUMENT	480:4	480:4	18	"Seek error accessing tag %u value"
FIELD	480:4	480:4	19	"Seek error accessing tag %u value"
LEAF_NODE	480:4	480:4	20	"Seek error accessing tag %u value"
LEAF_NODE	480:39	480:39	18	,
ARGUMENT	480:41	480:41	18	tag
FIELD	480:41	480:41	19	tag
LEAF_NODE	480:41	480:41	20	tag
LEAF_NODE	480:44	480:44	18	)
LEAF_NODE	480:45	480:45	16	;
EXPR_STATEMENT	481:5	481:23	15	_TIFFfree ( datamem ) ;
EXPR	481:5	481:5	16	_TIFFfree ( datamem )
FUNCTION_CALL	481:5	481:22	17	_TIFFfree ( datamem )
CALLEE	481:5	481:5	18	_TIFFfree
LEAF_NODE	481:5	481:5	19	_TIFFfree
LEAF_NODE	481:14	481:14	18	(
ARGUMENT	481:15	481:15	18	datamem
FIELD	481:15	481:15	19	datamem
LEAF_NODE	481:15	481:15	20	datamem
LEAF_NODE	481:22	481:22	18	)
LEAF_NODE	481:23	481:23	16	;
EXPR_STATEMENT	482:5	482:19	15	datamem = NULL ;
EXPR	482:5	482:5	16	datamem = NULL
ASSIGN	482:5	482:15	17	datamem = NULL
LVAL	482:5	482:5	18	datamem
FIELD	482:5	482:5	19	datamem
LEAF_NODE	482:5	482:5	20	datamem
ASSIGN_OP	482:13	482:13	18	=
LEAF_NODE	482:13	482:13	19	=
RVAL	482:15	482:15	18	NULL
FIELD	482:15	482:15	19	NULL
LEAF_NODE	482:15	482:15	20	NULL
LEAF_NODE	482:19	482:19	16	;
LEAF_NODE	483:4	483:4	14	}
SELECTION	484:4	484:9	12	
KEYWORD	484:4	484:4	13	else
LEAF_NODE	484:4	484:4	14	else
STATEMENTS	484:9	484:9	13	
SELECTION	484:9	485:4	14	
KEYWORD	484:9	484:9	15	if
LEAF_NODE	484:9	484:9	16	if
LEAF_NODE	484:12	484:12	15	(
CONDITION	484:13	484:13	15	read ( fd , datamem , ( size_t ) datasize ) != ( TIFF_SSIZE_T ) datasize
EXPR	484:13	484:66	16	read ( fd , datamem , ( size_t ) datasize ) != ( TIFF_SSIZE_T ) datasize
FUNCTION_CALL	484:13	484:47	17	read ( fd , datamem , ( size_t ) datasize )
CALLEE	484:13	484:13	18	read
LEAF_NODE	484:13	484:13	19	read
LEAF_NODE	484:17	484:17	18	(
ARGUMENT	484:18	484:18	18	fd
FIELD	484:18	484:18	19	fd
LEAF_NODE	484:18	484:18	20	fd
LEAF_NODE	484:20	484:20	18	,
ARGUMENT	484:22	484:22	18	datamem
FIELD	484:22	484:22	19	datamem
LEAF_NODE	484:22	484:22	20	datamem
LEAF_NODE	484:29	484:29	18	,
ARGUMENT	484:31	484:39	18	( size_t ) datasize
LEAF_NODE	484:31	484:31	19	(
TYPE_NAME	484:32	484:32	19	size_t
LEAF_NODE	484:32	484:32	20	size_t
LEAF_NODE	484:38	484:38	19	)
FIELD	484:39	484:39	19	datasize
LEAF_NODE	484:39	484:39	20	datasize
LEAF_NODE	484:47	484:47	18	)
EQ_OPERATOR	484:49	484:49	17	!=
LEAF_NODE	484:49	484:49	18	!=
LEAF_NODE	484:52	484:52	17	(
TYPE_NAME	484:53	484:53	17	TIFF_SSIZE_T
LEAF_NODE	484:53	484:53	18	TIFF_SSIZE_T
LEAF_NODE	484:65	484:65	17	)
FIELD	484:66	484:66	17	datasize
LEAF_NODE	484:66	484:66	18	datasize
LEAF_NODE	484:74	484:74	15	)
STATEMENTS	485:4	490:4	15	
LEAF_NODE	485:4	485:4	16	{
STATEMENTS	486:5	489:5	16	
EXPR_STATEMENT	486:5	487:45	17	Error ( "Read error accessing tag %u value" , tag ) ;
EXPR	486:5	486:5	18	Error ( "Read error accessing tag %u value" , tag )
FUNCTION_CALL	486:5	487:44	19	Error ( "Read error accessing tag %u value" , tag )
CALLEE	486:5	486:5	20	Error
LEAF_NODE	486:5	486:5	21	Error
LEAF_NODE	486:10	486:10	20	(
ARGUMENT	487:4	487:4	20	"Read error accessing tag %u value"
FIELD	487:4	487:4	21	"Read error accessing tag %u value"
LEAF_NODE	487:4	487:4	22	"Read error accessing tag %u value"
LEAF_NODE	487:39	487:39	20	,
ARGUMENT	487:41	487:41	20	tag
FIELD	487:41	487:41	21	tag
LEAF_NODE	487:41	487:41	22	tag
LEAF_NODE	487:44	487:44	20	)
LEAF_NODE	487:45	487:45	18	;
EXPR_STATEMENT	488:5	488:23	17	_TIFFfree ( datamem ) ;
EXPR	488:5	488:5	18	_TIFFfree ( datamem )
FUNCTION_CALL	488:5	488:22	19	_TIFFfree ( datamem )
CALLEE	488:5	488:5	20	_TIFFfree
LEAF_NODE	488:5	488:5	21	_TIFFfree
LEAF_NODE	488:14	488:14	20	(
ARGUMENT	488:15	488:15	20	datamem
FIELD	488:15	488:15	21	datamem
LEAF_NODE	488:15	488:15	22	datamem
LEAF_NODE	488:22	488:22	20	)
LEAF_NODE	488:23	488:23	18	;
EXPR_STATEMENT	489:5	489:19	17	datamem = NULL ;
EXPR	489:5	489:5	18	datamem = NULL
ASSIGN	489:5	489:15	19	datamem = NULL
LVAL	489:5	489:5	20	datamem
FIELD	489:5	489:5	21	datamem
LEAF_NODE	489:5	489:5	22	datamem
ASSIGN_OP	489:13	489:13	20	=
LEAF_NODE	489:13	489:13	21	=
RVAL	489:15	489:15	20	NULL
FIELD	489:15	489:15	21	NULL
LEAF_NODE	489:15	489:15	22	NULL
LEAF_NODE	489:19	489:19	18	;
LEAF_NODE	490:4	490:4	16	}
LEAF_NODE	491:3	491:3	11	}
SELECTION	491:5	492:4	9	
KEYWORD	491:5	491:5	10	else
LEAF_NODE	491:5	491:5	11	else
STATEMENTS	492:4	492:4	10	
EXPR_STATEMENT	492:4	492:45	11	Error ( "No space for data for tag %u" , tag ) ;
EXPR	492:4	492:4	12	Error ( "No space for data for tag %u" , tag )
FUNCTION_CALL	492:4	492:44	13	Error ( "No space for data for tag %u" , tag )
CALLEE	492:4	492:4	14	Error
LEAF_NODE	492:4	492:4	15	Error
LEAF_NODE	492:9	492:9	14	(
ARGUMENT	492:10	492:10	14	"No space for data for tag %u"
FIELD	492:10	492:10	15	"No space for data for tag %u"
LEAF_NODE	492:10	492:10	16	"No space for data for tag %u"
LEAF_NODE	492:40	492:40	14	,
ARGUMENT	492:41	492:41	14	tag
FIELD	492:41	492:41	15	tag
LEAF_NODE	492:41	492:41	16	tag
LEAF_NODE	492:44	492:44	14	)
LEAF_NODE	492:45	492:45	12	;
LEAF_NODE	493:2	493:2	8	}
SELECTION	494:2	495:2	6	
KEYWORD	494:2	494:2	7	if
LEAF_NODE	494:2	494:2	8	if
LEAF_NODE	494:5	494:5	7	(
CONDITION	494:6	494:6	7	datamem
EXPR	494:6	494:6	8	datamem
FIELD	494:6	494:6	9	datamem
LEAF_NODE	494:6	494:6	10	datamem
LEAF_NODE	494:13	494:13	7	)
STATEMENTS	495:2	535:2	7	
LEAF_NODE	495:2	495:2	8	{
STATEMENTS	496:3	530:3	8	
SELECTION	496:3	497:3	9	
KEYWORD	496:3	496:3	10	if
LEAF_NODE	496:3	496:3	11	if
LEAF_NODE	496:6	496:6	10	(
CONDITION	496:7	496:7	10	swabflag
EXPR	496:7	496:7	11	swabflag
FIELD	496:7	496:7	12	swabflag
LEAF_NODE	496:7	496:7	13	swabflag
LEAF_NODE	496:15	496:15	10	)
STATEMENTS	497:3	526:3	10	
LEAF_NODE	497:3	497:3	11	{
STATEMENTS	498:4	498:4	11	
SELECTION	498:4	499:4	12	
KEYWORD	498:4	498:4	13	switch
LEAF_NODE	498:4	498:4	14	switch
LEAF_NODE	498:11	498:11	13	(
CONDITION	498:12	498:12	13	type
EXPR	498:12	498:12	14	type
FIELD	498:12	498:12	15	type
LEAF_NODE	498:12	498:12	16	type
LEAF_NODE	498:16	498:16	13	)
STATEMENTS	499:4	525:4	13	
LEAF_NODE	499:4	499:4	14	{
STATEMENTS	500:5	524:6	14	
LABEL	500:5	500:19	15	case TIFF_BYTE :
LEAF_NODE	500:5	500:5	16	case
LEAF_NODE	500:10	500:10	16	TIFF_BYTE
LEAF_NODE	500:19	500:19	16	:
LABEL	501:5	501:20	15	case TIFF_ASCII :
LEAF_NODE	501:5	501:5	16	case
LEAF_NODE	501:10	501:10	16	TIFF_ASCII
LEAF_NODE	501:20	501:20	16	:
LABEL	502:5	502:20	15	case TIFF_SBYTE :
LEAF_NODE	502:5	502:5	16	case
LEAF_NODE	502:10	502:10	16	TIFF_SBYTE
LEAF_NODE	502:20	502:20	16	:
LABEL	503:5	503:24	15	case TIFF_UNDEFINED :
LEAF_NODE	503:5	503:5	16	case
LEAF_NODE	503:10	503:10	16	TIFF_UNDEFINED
LEAF_NODE	503:24	503:24	16	:
JUMP_STATEMENT	504:6	504:11	15	break DESTINATION ;
KEYWORD	504:6	504:6	16	break
LEAF_NODE	504:6	504:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	504:11	504:11	16	;
LABEL	505:5	505:20	15	case TIFF_SHORT :
LEAF_NODE	505:5	505:5	16	case
LEAF_NODE	505:10	505:10	16	TIFF_SHORT
LEAF_NODE	505:20	505:20	16	:
LABEL	506:5	506:21	15	case TIFF_SSHORT :
LEAF_NODE	506:5	506:5	16	case
LEAF_NODE	506:10	506:10	16	TIFF_SSHORT
LEAF_NODE	506:21	506:21	16	:
EXPR_STATEMENT	507:6	507:60	15	TIFFSwabArrayOfShort ( ( uint16 * ) datamem , ( tmsize_t ) count ) ;
EXPR	507:6	507:6	16	TIFFSwabArrayOfShort ( ( uint16 * ) datamem , ( tmsize_t ) count )
FUNCTION_CALL	507:6	507:59	17	TIFFSwabArrayOfShort ( ( uint16 * ) datamem , ( tmsize_t ) count )
CALLEE	507:6	507:6	18	TIFFSwabArrayOfShort
LEAF_NODE	507:6	507:6	19	TIFFSwabArrayOfShort
LEAF_NODE	507:26	507:26	18	(
ARGUMENT	507:27	507:36	18	( uint16 * ) datamem
LEAF_NODE	507:27	507:27	19	(
TYPE_NAME	507:28	507:28	19	uint16
LEAF_NODE	507:28	507:28	20	uint16
LEAF_NODE	507:34	507:34	19	*
LEAF_NODE	507:35	507:35	19	)
FIELD	507:36	507:36	19	datamem
LEAF_NODE	507:36	507:36	20	datamem
LEAF_NODE	507:43	507:43	18	,
ARGUMENT	507:44	507:54	18	( tmsize_t ) count
LEAF_NODE	507:44	507:44	19	(
TYPE_NAME	507:45	507:45	19	tmsize_t
LEAF_NODE	507:45	507:45	20	tmsize_t
LEAF_NODE	507:53	507:53	19	)
FIELD	507:54	507:54	19	count
LEAF_NODE	507:54	507:54	20	count
LEAF_NODE	507:59	507:59	18	)
LEAF_NODE	507:60	507:60	16	;
JUMP_STATEMENT	508:6	508:11	15	break DESTINATION ;
KEYWORD	508:6	508:6	16	break
LEAF_NODE	508:6	508:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	508:11	508:11	16	;
LABEL	509:5	509:19	15	case TIFF_LONG :
LEAF_NODE	509:5	509:5	16	case
LEAF_NODE	509:10	509:10	16	TIFF_LONG
LEAF_NODE	509:19	509:19	16	:
LABEL	510:5	510:20	15	case TIFF_SLONG :
LEAF_NODE	510:5	510:5	16	case
LEAF_NODE	510:10	510:10	16	TIFF_SLONG
LEAF_NODE	510:20	510:20	16	:
LABEL	511:5	511:20	15	case TIFF_FLOAT :
LEAF_NODE	511:5	511:5	16	case
LEAF_NODE	511:10	511:10	16	TIFF_FLOAT
LEAF_NODE	511:20	511:20	16	:
LABEL	512:5	512:18	15	case TIFF_IFD :
LEAF_NODE	512:5	512:5	16	case
LEAF_NODE	512:10	512:10	16	TIFF_IFD
LEAF_NODE	512:18	512:18	16	:
EXPR_STATEMENT	513:6	513:59	15	TIFFSwabArrayOfLong ( ( uint32 * ) datamem , ( tmsize_t ) count ) ;
EXPR	513:6	513:6	16	TIFFSwabArrayOfLong ( ( uint32 * ) datamem , ( tmsize_t ) count )
FUNCTION_CALL	513:6	513:58	17	TIFFSwabArrayOfLong ( ( uint32 * ) datamem , ( tmsize_t ) count )
CALLEE	513:6	513:6	18	TIFFSwabArrayOfLong
LEAF_NODE	513:6	513:6	19	TIFFSwabArrayOfLong
LEAF_NODE	513:25	513:25	18	(
ARGUMENT	513:26	513:35	18	( uint32 * ) datamem
LEAF_NODE	513:26	513:26	19	(
TYPE_NAME	513:27	513:27	19	uint32
LEAF_NODE	513:27	513:27	20	uint32
LEAF_NODE	513:33	513:33	19	*
LEAF_NODE	513:34	513:34	19	)
FIELD	513:35	513:35	19	datamem
LEAF_NODE	513:35	513:35	20	datamem
LEAF_NODE	513:42	513:42	18	,
ARGUMENT	513:43	513:53	18	( tmsize_t ) count
LEAF_NODE	513:43	513:43	19	(
TYPE_NAME	513:44	513:44	19	tmsize_t
LEAF_NODE	513:44	513:44	20	tmsize_t
LEAF_NODE	513:52	513:52	19	)
FIELD	513:53	513:53	19	count
LEAF_NODE	513:53	513:53	20	count
LEAF_NODE	513:58	513:58	18	)
LEAF_NODE	513:59	513:59	16	;
JUMP_STATEMENT	514:6	514:11	15	break DESTINATION ;
KEYWORD	514:6	514:6	16	break
LEAF_NODE	514:6	514:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	514:11	514:11	16	;
LABEL	515:5	515:23	15	case TIFF_RATIONAL :
LEAF_NODE	515:5	515:5	16	case
LEAF_NODE	515:10	515:10	16	TIFF_RATIONAL
LEAF_NODE	515:23	515:23	16	:
LABEL	516:5	516:24	15	case TIFF_SRATIONAL :
LEAF_NODE	516:5	516:5	16	case
LEAF_NODE	516:10	516:10	16	TIFF_SRATIONAL
LEAF_NODE	516:24	516:24	16	:
EXPR_STATEMENT	517:6	517:61	15	TIFFSwabArrayOfLong ( ( uint32 * ) datamem , ( tmsize_t ) count * 2 ) ;
EXPR	517:6	517:6	16	TIFFSwabArrayOfLong ( ( uint32 * ) datamem , ( tmsize_t ) count * 2 )
FUNCTION_CALL	517:6	517:60	17	TIFFSwabArrayOfLong ( ( uint32 * ) datamem , ( tmsize_t ) count * 2 )
CALLEE	517:6	517:6	18	TIFFSwabArrayOfLong
LEAF_NODE	517:6	517:6	19	TIFFSwabArrayOfLong
LEAF_NODE	517:25	517:25	18	(
ARGUMENT	517:26	517:35	18	( uint32 * ) datamem
LEAF_NODE	517:26	517:26	19	(
TYPE_NAME	517:27	517:27	19	uint32
LEAF_NODE	517:27	517:27	20	uint32
LEAF_NODE	517:33	517:33	19	*
LEAF_NODE	517:34	517:34	19	)
FIELD	517:35	517:35	19	datamem
LEAF_NODE	517:35	517:35	20	datamem
LEAF_NODE	517:42	517:42	18	,
ARGUMENT	517:43	517:59	18	( tmsize_t ) count * 2
LEAF_NODE	517:43	517:43	19	(
TYPE_NAME	517:44	517:44	19	tmsize_t
LEAF_NODE	517:44	517:44	20	tmsize_t
LEAF_NODE	517:52	517:52	19	)
FIELD	517:53	517:53	19	count
LEAF_NODE	517:53	517:53	20	count
LEAF_NODE	517:58	517:58	19	*
FIELD	517:59	517:59	19	2
LEAF_NODE	517:59	517:59	20	2
LEAF_NODE	517:60	517:60	18	)
LEAF_NODE	517:61	517:61	16	;
JUMP_STATEMENT	518:6	518:11	15	break DESTINATION ;
KEYWORD	518:6	518:6	16	break
LEAF_NODE	518:6	518:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	518:11	518:11	16	;
LABEL	519:5	519:21	15	case TIFF_DOUBLE :
LEAF_NODE	519:5	519:5	16	case
LEAF_NODE	519:10	519:10	16	TIFF_DOUBLE
LEAF_NODE	519:21	519:21	16	:
LABEL	520:5	520:20	15	case TIFF_LONG8 :
LEAF_NODE	520:5	520:5	16	case
LEAF_NODE	520:10	520:10	16	TIFF_LONG8
LEAF_NODE	520:20	520:20	16	:
LABEL	521:5	521:21	15	case TIFF_SLONG8 :
LEAF_NODE	521:5	521:5	16	case
LEAF_NODE	521:10	521:10	16	TIFF_SLONG8
LEAF_NODE	521:21	521:21	16	:
LABEL	522:5	522:19	15	case TIFF_IFD8 :
LEAF_NODE	522:5	522:5	16	case
LEAF_NODE	522:10	522:10	16	TIFF_IFD8
LEAF_NODE	522:19	522:19	16	:
EXPR_STATEMENT	523:6	523:60	15	TIFFSwabArrayOfLong8 ( ( uint64 * ) datamem , ( tmsize_t ) count ) ;
EXPR	523:6	523:6	16	TIFFSwabArrayOfLong8 ( ( uint64 * ) datamem , ( tmsize_t ) count )
FUNCTION_CALL	523:6	523:59	17	TIFFSwabArrayOfLong8 ( ( uint64 * ) datamem , ( tmsize_t ) count )
CALLEE	523:6	523:6	18	TIFFSwabArrayOfLong8
LEAF_NODE	523:6	523:6	19	TIFFSwabArrayOfLong8
LEAF_NODE	523:26	523:26	18	(
ARGUMENT	523:27	523:36	18	( uint64 * ) datamem
LEAF_NODE	523:27	523:27	19	(
TYPE_NAME	523:28	523:28	19	uint64
LEAF_NODE	523:28	523:28	20	uint64
LEAF_NODE	523:34	523:34	19	*
LEAF_NODE	523:35	523:35	19	)
FIELD	523:36	523:36	19	datamem
LEAF_NODE	523:36	523:36	20	datamem
LEAF_NODE	523:43	523:43	18	,
ARGUMENT	523:44	523:54	18	( tmsize_t ) count
LEAF_NODE	523:44	523:44	19	(
TYPE_NAME	523:45	523:45	19	tmsize_t
LEAF_NODE	523:45	523:45	20	tmsize_t
LEAF_NODE	523:53	523:53	19	)
FIELD	523:54	523:54	19	count
LEAF_NODE	523:54	523:54	20	count
LEAF_NODE	523:59	523:59	18	)
LEAF_NODE	523:60	523:60	16	;
JUMP_STATEMENT	524:6	524:11	15	break DESTINATION ;
KEYWORD	524:6	524:6	16	break
LEAF_NODE	524:6	524:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	524:11	524:11	16	;
LEAF_NODE	525:4	525:4	14	}
LEAF_NODE	526:3	526:3	11	}
EXPR_STATEMENT	527:3	527:47	9	PrintData ( stdout , type , ( uint32 ) count , datamem ) ;
EXPR	527:3	527:3	10	PrintData ( stdout , type , ( uint32 ) count , datamem )
FUNCTION_CALL	527:3	527:46	11	PrintData ( stdout , type , ( uint32 ) count , datamem )
CALLEE	527:3	527:3	12	PrintData
LEAF_NODE	527:3	527:3	13	PrintData
LEAF_NODE	527:12	527:12	12	(
ARGUMENT	527:13	527:13	12	stdout
FIELD	527:13	527:13	13	stdout
LEAF_NODE	527:13	527:13	14	stdout
LEAF_NODE	527:19	527:19	12	,
ARGUMENT	527:20	527:20	12	type
FIELD	527:20	527:20	13	type
LEAF_NODE	527:20	527:20	14	type
LEAF_NODE	527:24	527:24	12	,
ARGUMENT	527:25	527:33	12	( uint32 ) count
LEAF_NODE	527:25	527:25	13	(
TYPE_NAME	527:26	527:26	13	uint32
LEAF_NODE	527:26	527:26	14	uint32
LEAF_NODE	527:32	527:32	13	)
FIELD	527:33	527:33	13	count
LEAF_NODE	527:33	527:33	14	count
LEAF_NODE	527:38	527:38	12	,
ARGUMENT	527:39	527:39	12	datamem
FIELD	527:39	527:39	13	datamem
LEAF_NODE	527:39	527:39	14	datamem
LEAF_NODE	527:46	527:46	12	)
LEAF_NODE	527:47	527:47	10	;
SELECTION	528:3	529:4	9	
KEYWORD	528:3	528:3	10	if
LEAF_NODE	528:3	528:3	11	if
LEAF_NODE	528:6	528:6	10	(
CONDITION	528:7	528:7	10	datatruncated
EXPR	528:7	528:7	11	datatruncated
FIELD	528:7	528:7	12	datatruncated
LEAF_NODE	528:7	528:7	13	datatruncated
LEAF_NODE	528:20	528:20	10	)
STATEMENTS	529:4	529:4	10	
EXPR_STATEMENT	529:4	529:18	11	printf ( " ..." ) ;
EXPR	529:4	529:4	12	printf ( " ..." )
FUNCTION_CALL	529:4	529:17	13	printf ( " ..." )
CALLEE	529:4	529:4	14	printf
LEAF_NODE	529:4	529:4	15	printf
LEAF_NODE	529:10	529:10	14	(
ARGUMENT	529:11	529:11	14	" ..."
FIELD	529:11	529:11	15	" ..."
LEAF_NODE	529:11	529:11	16	" ..."
LEAF_NODE	529:17	529:17	14	)
LEAF_NODE	529:18	529:18	12	;
SELECTION	530:3	531:32	9	
KEYWORD	530:3	530:3	10	if
LEAF_NODE	530:3	530:3	11	if
LEAF_NODE	530:6	530:6	10	(
CONDITION	530:7	530:7	10	! datafits
EXPR	530:7	530:7	11	! datafits
UNARY_EXPR	530:7	530:8	12	! datafits
UNARY_OPERATOR	530:7	530:7	13	!
LEAF_NODE	530:7	530:7	14	!
FIELD	530:8	530:8	13	datafits
LEAF_NODE	530:8	530:8	14	datafits
LEAF_NODE	530:16	530:16	10	)
STATEMENTS	531:32	534:32	10	
LEAF_NODE	531:32	531:32	11	{
STATEMENTS	532:40	533:40	11	
EXPR_STATEMENT	532:40	532:58	12	_TIFFfree ( datamem ) ;
EXPR	532:40	532:40	13	_TIFFfree ( datamem )
FUNCTION_CALL	532:40	532:57	14	_TIFFfree ( datamem )
CALLEE	532:40	532:40	15	_TIFFfree
LEAF_NODE	532:40	532:40	16	_TIFFfree
LEAF_NODE	532:49	532:49	15	(
ARGUMENT	532:50	532:50	15	datamem
FIELD	532:50	532:50	16	datamem
LEAF_NODE	532:50	532:50	17	datamem
LEAF_NODE	532:57	532:57	15	)
LEAF_NODE	532:58	532:58	13	;
EXPR_STATEMENT	533:40	533:54	12	datamem = NULL ;
EXPR	533:40	533:40	13	datamem = NULL
ASSIGN	533:40	533:50	14	datamem = NULL
LVAL	533:40	533:40	15	datamem
FIELD	533:40	533:40	16	datamem
LEAF_NODE	533:40	533:40	17	datamem
ASSIGN_OP	533:48	533:48	15	=
LEAF_NODE	533:48	533:48	16	=
RVAL	533:50	533:50	15	NULL
FIELD	533:50	533:50	16	NULL
LEAF_NODE	533:50	533:50	17	NULL
LEAF_NODE	533:54	533:54	13	;
LEAF_NODE	534:32	534:32	11	}
LEAF_NODE	535:2	535:2	8	}
EXPR_STATEMENT	536:2	536:15	6	printf ( ">\n" ) ;
EXPR	536:2	536:2	7	printf ( ">\n" )
FUNCTION_CALL	536:2	536:14	8	printf ( ">\n" )
CALLEE	536:2	536:2	9	printf
LEAF_NODE	536:2	536:2	10	printf
LEAF_NODE	536:8	536:8	9	(
ARGUMENT	536:9	536:9	9	">\n"
FIELD	536:9	536:9	10	">\n"
LEAF_NODE	536:9	536:9	11	">\n"
LEAF_NODE	536:14	536:14	9	)
LEAF_NODE	536:15	536:15	7	;
LEAF_NODE	537:1	537:1	5	}
LABEL	538:0	538:4	3	done :
LEAF_NODE	538:0	538:0	4	done
LEAF_NODE	538:4	538:4	4	:
SELECTION	539:1	540:2	3	
KEYWORD	539:1	539:1	4	if
LEAF_NODE	539:1	539:1	5	if
LEAF_NODE	539:4	539:4	4	(
CONDITION	539:5	539:5	4	dirmem
EXPR	539:5	539:5	5	dirmem
FIELD	539:5	539:5	6	dirmem
LEAF_NODE	539:5	539:5	7	dirmem
LEAF_NODE	539:11	539:11	4	)
STATEMENTS	540:2	540:2	4	
EXPR_STATEMENT	540:2	540:27	5	_TIFFfree ( ( char * ) dirmem ) ;
EXPR	540:2	540:2	6	_TIFFfree ( ( char * ) dirmem )
FUNCTION_CALL	540:2	540:26	7	_TIFFfree ( ( char * ) dirmem )
CALLEE	540:2	540:2	8	_TIFFfree
LEAF_NODE	540:2	540:2	9	_TIFFfree
LEAF_NODE	540:11	540:11	8	(
ARGUMENT	540:12	540:20	8	( char * ) dirmem
LEAF_NODE	540:12	540:12	9	(
TYPE_NAME	540:13	540:13	9	char
LEAF_NODE	540:13	540:13	10	char
LEAF_NODE	540:18	540:18	9	*
LEAF_NODE	540:19	540:19	9	)
FIELD	540:20	540:20	9	dirmem
LEAF_NODE	540:20	540:20	10	dirmem
LEAF_NODE	540:26	540:26	8	)
LEAF_NODE	540:27	540:27	6	;
LEAF_NODE	541:1	541:1	3	return
LEAF_NODE	541:8	541:8	3	(
LEAF_NODE	541:9	541:9	3	nextdiroff
LEAF_NODE	541:19	541:19	3	)
LEAF_NODE	541:20	541:20	3	;
LEAF_NODE	542:0	542:0	2	}
SIMPLE_DECL	545:1	545:11	1	uint16 tag ;
VAR_DECL	545:1	545:8	2	uint16 tag
TYPE	545:1	545:1	3	uint16
TYPE_NAME	545:1	545:1	4	uint16
LEAF_NODE	545:1	545:1	5	uint16
NAME	545:8	545:8	3	tag
LEAF_NODE	545:8	545:8	4	tag
LEAF_NODE	545:11	545:11	2	;
SIMPLE_DECL	546:1	546:17	1	const char * name ;
VAR_DECL	546:1	546:13	2	const char * name
TYPE	546:1	546:11	3	const char *
TYPE_NAME	546:1	546:7	4	const char
LEAF_NODE	546:1	546:1	5	const
LEAF_NODE	546:7	546:7	5	char
POINTER	546:11	546:11	4	*
LEAF_NODE	546:11	546:11	5	*
NAME	546:13	546:13	3	name
LEAF_NODE	546:13	546:13	4	name
LEAF_NODE	546:17	546:17	2	;
FUNCTION_DEF	642:0	653:0	1	
RETURN_TYPE	642:0	642:7	2	static void
LEAF_NODE	642:0	642:0	3	static
TYPE_NAME	642:7	642:7	3	void
LEAF_NODE	642:7	642:7	4	void
FUNCTION_NAME	643:0	643:0	2	PrintTag
LEAF_NODE	643:0	643:0	3	PrintTag
PARAMETER_LIST	643:8	643:29	2	( FILE * fd , uint16 tag )
LEAF_NODE	643:8	643:8	3	(
PARAMETER_DECL	643:9	643:15	3	FILE * fd
TYPE	643:9	643:13	4	FILE *
TYPE_NAME	643:9	643:9	5	FILE
LEAF_NODE	643:9	643:9	6	FILE
POINTER	643:13	643:13	5	*
LEAF_NODE	643:13	643:13	6	*
NAME	643:15	643:15	4	fd
LEAF_NODE	643:15	643:15	5	fd
LEAF_NODE	643:17	643:17	3	,
PARAMETER_DECL	643:19	643:26	3	uint16 tag
TYPE	643:19	643:19	4	uint16
TYPE_NAME	643:19	643:19	5	uint16
LEAF_NODE	643:19	643:19	6	uint16
NAME	643:26	643:26	4	tag
LEAF_NODE	643:26	643:26	5	tag
LEAF_NODE	643:29	643:29	3	)
LEAF_NODE	644:0	644:0	2	{
STATEMENTS	645:1	652:1	2	
SIMPLE_DECL	645:1	645:25	3	const struct tagname * tp ;
VAR_DECL	645:1	645:23	4	const struct tagname * tp
TYPE	645:1	645:22	5	const struct tagname *
TYPE_NAME	645:1	645:14	6	const struct tagname
LEAF_NODE	645:1	645:1	7	const
LEAF_NODE	645:7	645:7	7	struct
LEAF_NODE	645:14	645:14	7	tagname
POINTER	645:22	645:22	6	*
LEAF_NODE	645:22	645:22	7	*
NAME	645:23	645:23	5	tp
LEAF_NODE	645:23	645:23	6	tp
LEAF_NODE	645:25	645:25	4	;
ITERATION	647:1	648:2	3	
KEYWORD	647:1	647:1	4	for
LEAF_NODE	647:1	647:1	5	for
LEAF_NODE	647:5	647:5	4	(
FOR_INIT	647:6	647:19	4	tp = tagnames ;
EXPR	647:6	647:6	5	tp = tagnames
ASSIGN	647:6	647:11	6	tp = tagnames
LVAL	647:6	647:6	7	tp
FIELD	647:6	647:6	8	tp
LEAF_NODE	647:6	647:6	9	tp
ASSIGN_OP	647:9	647:9	7	=
LEAF_NODE	647:9	647:9	8	=
RVAL	647:11	647:11	7	tagnames
FIELD	647:11	647:11	8	tagnames
LEAF_NODE	647:11	647:11	9	tagnames
LEAF_NODE	647:19	647:19	5	;
CONDITION	647:21	647:21	4	tp < & tagnames [ NTAGS ]
EXPR	647:21	647:26	5	tp < & tagnames [ NTAGS ]
FIELD	647:21	647:21	6	tp
LEAF_NODE	647:21	647:21	7	tp
REL_OPERATOR	647:24	647:24	6	<
LEAF_NODE	647:24	647:24	7	<
UNARY_EXPR	647:26	647:27	6	& tagnames [ NTAGS ]
UNARY_OPERATOR	647:26	647:26	7	&
LEAF_NODE	647:26	647:26	8	&
FIELD	647:27	647:41	7	tagnames [ NTAGS ]
LEAF_NODE	647:27	647:27	8	tagnames
LEAF_NODE	647:35	647:35	8	[
EXPR	647:36	647:36	8	NTAGS
FIELD	647:36	647:36	9	NTAGS
LEAF_NODE	647:36	647:36	10	NTAGS
LEAF_NODE	647:41	647:41	8	]
LEAF_NODE	647:42	647:42	4	;
FOR_EXPR	647:44	647:44	4	tp ++
EXPR	647:44	647:44	5	tp ++
FIELD	647:44	647:46	6	tp ++
LEAF_NODE	647:44	647:44	7	tp
LEAF_NODE	647:46	647:46	7	++
LEAF_NODE	647:48	647:48	4	)
STATEMENTS	648:2	648:2	4	
SELECTION	648:2	648:22	5	
KEYWORD	648:2	648:2	6	if
LEAF_NODE	648:2	648:2	7	if
LEAF_NODE	648:5	648:5	6	(
CONDITION	648:6	648:6	6	tp -> tag == tag
EXPR	648:6	648:17	7	tp -> tag == tag
FIELD	648:6	648:10	8	tp -> tag
LEAF_NODE	648:6	648:6	9	tp
LEAF_NODE	648:8	648:8	9	->
LEAF_NODE	648:10	648:10	9	tag
EQ_OPERATOR	648:14	648:14	8	==
LEAF_NODE	648:14	648:14	9	==
FIELD	648:17	648:17	8	tag
LEAF_NODE	648:17	648:17	9	tag
LEAF_NODE	648:20	648:20	6	)
STATEMENTS	648:22	651:2	6	
LEAF_NODE	648:22	648:22	7	{
STATEMENTS	649:3	650:3	7	
EXPR_STATEMENT	649:3	649:40	8	fprintf ( fd , "%s (%u)" , tp -> name , tag ) ;
EXPR	649:3	649:3	9	fprintf ( fd , "%s (%u)" , tp -> name , tag )
FUNCTION_CALL	649:3	649:39	10	fprintf ( fd , "%s (%u)" , tp -> name , tag )
CALLEE	649:3	649:3	11	fprintf
LEAF_NODE	649:3	649:3	12	fprintf
LEAF_NODE	649:10	649:10	11	(
ARGUMENT	649:11	649:11	11	fd
FIELD	649:11	649:11	12	fd
LEAF_NODE	649:11	649:11	13	fd
LEAF_NODE	649:13	649:13	11	,
ARGUMENT	649:15	649:15	11	"%s (%u)"
FIELD	649:15	649:15	12	"%s (%u)"
LEAF_NODE	649:15	649:15	13	"%s (%u)"
LEAF_NODE	649:24	649:24	11	,
ARGUMENT	649:26	649:26	11	tp -> name
FIELD	649:26	649:30	12	tp -> name
LEAF_NODE	649:26	649:26	13	tp
LEAF_NODE	649:28	649:28	13	->
LEAF_NODE	649:30	649:30	13	name
LEAF_NODE	649:34	649:34	11	,
ARGUMENT	649:36	649:36	11	tag
FIELD	649:36	649:36	12	tag
LEAF_NODE	649:36	649:36	13	tag
LEAF_NODE	649:39	649:39	11	)
LEAF_NODE	649:40	649:40	9	;
JUMP_STATEMENT	650:3	650:9	8	return DESTINATION ;
KEYWORD	650:3	650:3	9	return
LEAF_NODE	650:3	650:3	10	return
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	650:9	650:9	9	;
LEAF_NODE	651:2	651:2	7	}
EXPR_STATEMENT	652:1	652:34	3	fprintf ( fd , "%u (%#x)" , tag , tag ) ;
EXPR	652:1	652:1	4	fprintf ( fd , "%u (%#x)" , tag , tag )
FUNCTION_CALL	652:1	652:33	5	fprintf ( fd , "%u (%#x)" , tag , tag )
CALLEE	652:1	652:1	6	fprintf
LEAF_NODE	652:1	652:1	7	fprintf
LEAF_NODE	652:8	652:8	6	(
ARGUMENT	652:9	652:9	6	fd
FIELD	652:9	652:9	7	fd
LEAF_NODE	652:9	652:9	8	fd
LEAF_NODE	652:11	652:11	6	,
ARGUMENT	652:13	652:13	6	"%u (%#x)"
FIELD	652:13	652:13	7	"%u (%#x)"
LEAF_NODE	652:13	652:13	8	"%u (%#x)"
LEAF_NODE	652:23	652:23	6	,
ARGUMENT	652:25	652:25	6	tag
FIELD	652:25	652:25	7	tag
LEAF_NODE	652:25	652:25	8	tag
LEAF_NODE	652:28	652:28	6	,
ARGUMENT	652:30	652:30	6	tag
FIELD	652:30	652:30	7	tag
LEAF_NODE	652:30	652:30	8	tag
LEAF_NODE	652:33	652:33	6	)
LEAF_NODE	652:34	652:34	4	;
LEAF_NODE	653:0	653:0	2	}
FUNCTION_DEF	655:0	685:0	1	
RETURN_TYPE	655:0	655:7	2	static void
LEAF_NODE	655:0	655:0	3	static
TYPE_NAME	655:7	655:7	3	void
LEAF_NODE	655:7	655:7	4	void
FUNCTION_NAME	656:0	656:0	2	PrintType
LEAF_NODE	656:0	656:0	3	PrintType
PARAMETER_LIST	656:9	656:31	2	( FILE * fd , uint16 type )
LEAF_NODE	656:9	656:9	3	(
PARAMETER_DECL	656:10	656:16	3	FILE * fd
TYPE	656:10	656:14	4	FILE *
TYPE_NAME	656:10	656:10	5	FILE
LEAF_NODE	656:10	656:10	6	FILE
POINTER	656:14	656:14	5	*
LEAF_NODE	656:14	656:14	6	*
NAME	656:16	656:16	4	fd
LEAF_NODE	656:16	656:16	5	fd
LEAF_NODE	656:18	656:18	3	,
PARAMETER_DECL	656:20	656:27	3	uint16 type
TYPE	656:20	656:20	4	uint16
TYPE_NAME	656:20	656:20	5	uint16
LEAF_NODE	656:20	656:20	6	uint16
NAME	656:27	656:27	4	type
LEAF_NODE	656:27	656:27	5	type
LEAF_NODE	656:31	656:31	3	)
LEAF_NODE	657:0	657:0	2	{
STATEMENTS	658:1	683:1	2	
LEAF_NODE	658:1	658:1	3	static
LEAF_NODE	658:8	658:8	3	const
LEAF_NODE	658:14	658:14	3	char
LEAF_NODE	658:19	658:19	3	*
LEAF_NODE	658:20	658:20	3	typenames
LEAF_NODE	658:29	658:29	3	[
LEAF_NODE	658:30	658:30	3	]
LEAF_NODE	658:32	658:32	3	=
LEAF_NODE	658:34	658:34	3	{
STATEMENTS	659:5	677:5	3	
LEAF_NODE	659:5	659:5	4	"0"
LEAF_NODE	659:8	659:8	4	,
LEAF_NODE	660:5	660:5	4	"BYTE"
LEAF_NODE	660:11	660:11	4	,
LEAF_NODE	661:5	661:5	4	"ASCII"
LEAF_NODE	661:12	661:12	4	,
LEAF_NODE	662:5	662:5	4	"SHORT"
LEAF_NODE	662:12	662:12	4	,
LEAF_NODE	663:5	663:5	4	"LONG"
LEAF_NODE	663:11	663:11	4	,
LEAF_NODE	664:5	664:5	4	"RATIONAL"
LEAF_NODE	664:15	664:15	4	,
LEAF_NODE	665:5	665:5	4	"SBYTE"
LEAF_NODE	665:12	665:12	4	,
LEAF_NODE	666:5	666:5	4	"UNDEFINED"
LEAF_NODE	666:16	666:16	4	,
LEAF_NODE	667:5	667:5	4	"SSHORT"
LEAF_NODE	667:13	667:13	4	,
LEAF_NODE	668:5	668:5	4	"SLONG"
LEAF_NODE	668:12	668:12	4	,
LEAF_NODE	669:5	669:5	4	"SRATIONAL"
LEAF_NODE	669:16	669:16	4	,
LEAF_NODE	670:5	670:5	4	"FLOAT"
LEAF_NODE	670:12	670:12	4	,
LEAF_NODE	671:5	671:5	4	"DOUBLE"
LEAF_NODE	671:13	671:13	4	,
LEAF_NODE	672:5	672:5	4	"IFD"
LEAF_NODE	672:10	672:10	4	,
LEAF_NODE	673:5	673:5	4	"14"
LEAF_NODE	673:9	673:9	4	,
LEAF_NODE	674:5	674:5	4	"15"
LEAF_NODE	674:9	674:9	4	,
LEAF_NODE	675:5	675:5	4	"LONG8"
LEAF_NODE	675:12	675:12	4	,
LEAF_NODE	676:5	676:5	4	"SLONG8"
LEAF_NODE	676:13	676:13	4	,
LEAF_NODE	677:5	677:5	4	"IFD8"
LEAF_NODE	678:1	678:1	3	}
LEAF_NODE	678:2	678:2	3	;
SELECTION	681:1	682:2	3	
KEYWORD	681:1	681:1	4	if
LEAF_NODE	681:1	681:1	5	if
LEAF_NODE	681:4	681:4	4	(
CONDITION	681:5	681:5	4	type < NTYPES
EXPR	681:5	681:12	5	type < NTYPES
FIELD	681:5	681:5	6	type
LEAF_NODE	681:5	681:5	7	type
REL_OPERATOR	681:10	681:10	6	<
LEAF_NODE	681:10	681:10	7	<
FIELD	681:12	681:12	6	NTYPES
LEAF_NODE	681:12	681:12	7	NTYPES
LEAF_NODE	681:18	681:18	4	)
STATEMENTS	682:2	682:2	4	
EXPR_STATEMENT	682:2	682:47	5	fprintf ( fd , "%s (%u)" , typenames [ type ] , type ) ;
EXPR	682:2	682:2	6	fprintf ( fd , "%s (%u)" , typenames [ type ] , type )
FUNCTION_CALL	682:2	682:46	7	fprintf ( fd , "%s (%u)" , typenames [ type ] , type )
CALLEE	682:2	682:2	8	fprintf
LEAF_NODE	682:2	682:2	9	fprintf
LEAF_NODE	682:9	682:9	8	(
ARGUMENT	682:10	682:10	8	fd
FIELD	682:10	682:10	9	fd
LEAF_NODE	682:10	682:10	10	fd
LEAF_NODE	682:12	682:12	8	,
ARGUMENT	682:14	682:14	8	"%s (%u)"
FIELD	682:14	682:14	9	"%s (%u)"
LEAF_NODE	682:14	682:14	10	"%s (%u)"
LEAF_NODE	682:23	682:23	8	,
ARGUMENT	682:25	682:25	8	typenames [ type ]
FIELD	682:25	682:39	9	typenames [ type ]
LEAF_NODE	682:25	682:25	10	typenames
LEAF_NODE	682:34	682:34	10	[
EXPR	682:35	682:35	10	type
FIELD	682:35	682:35	11	type
LEAF_NODE	682:35	682:35	12	type
LEAF_NODE	682:39	682:39	10	]
LEAF_NODE	682:40	682:40	8	,
ARGUMENT	682:42	682:42	8	type
FIELD	682:42	682:42	9	type
LEAF_NODE	682:42	682:42	10	type
LEAF_NODE	682:46	682:46	8	)
LEAF_NODE	682:47	682:47	6	;
SELECTION	683:1	684:2	3	
KEYWORD	683:1	683:1	4	else
LEAF_NODE	683:1	683:1	5	else
STATEMENTS	684:2	684:2	4	
EXPR_STATEMENT	684:2	684:37	5	fprintf ( fd , "%u (%#x)" , type , type ) ;
EXPR	684:2	684:2	6	fprintf ( fd , "%u (%#x)" , type , type )
FUNCTION_CALL	684:2	684:36	7	fprintf ( fd , "%u (%#x)" , type , type )
CALLEE	684:2	684:2	8	fprintf
LEAF_NODE	684:2	684:2	9	fprintf
LEAF_NODE	684:9	684:9	8	(
ARGUMENT	684:10	684:10	8	fd
FIELD	684:10	684:10	9	fd
LEAF_NODE	684:10	684:10	10	fd
LEAF_NODE	684:12	684:12	8	,
ARGUMENT	684:14	684:14	8	"%u (%#x)"
FIELD	684:14	684:14	9	"%u (%#x)"
LEAF_NODE	684:14	684:14	10	"%u (%#x)"
LEAF_NODE	684:24	684:24	8	,
ARGUMENT	684:26	684:26	8	type
FIELD	684:26	684:26	9	type
LEAF_NODE	684:26	684:26	10	type
LEAF_NODE	684:30	684:30	8	,
ARGUMENT	684:32	684:32	8	type
FIELD	684:32	684:32	9	type
LEAF_NODE	684:32	684:32	10	type
LEAF_NODE	684:36	684:36	8	)
LEAF_NODE	684:37	684:37	6	;
LEAF_NODE	685:0	685:0	2	}
FUNCTION_DEF	690:0	710:0	1	
RETURN_TYPE	690:0	690:7	2	static void
LEAF_NODE	690:0	690:0	3	static
TYPE_NAME	690:7	690:7	3	void
LEAF_NODE	690:7	690:7	4	void
FUNCTION_NAME	691:0	691:0	2	PrintASCII
LEAF_NODE	691:0	691:0	3	PrintASCII
PARAMETER_LIST	691:10	691:55	2	( FILE * fd , uint32 cc , const unsigned char * cp )
LEAF_NODE	691:10	691:10	3	(
PARAMETER_DECL	691:11	691:17	3	FILE * fd
TYPE	691:11	691:15	4	FILE *
TYPE_NAME	691:11	691:11	5	FILE
LEAF_NODE	691:11	691:11	6	FILE
POINTER	691:15	691:15	5	*
LEAF_NODE	691:15	691:15	6	*
NAME	691:17	691:17	4	fd
LEAF_NODE	691:17	691:17	5	fd
LEAF_NODE	691:19	691:19	3	,
PARAMETER_DECL	691:21	691:28	3	uint32 cc
TYPE	691:21	691:21	4	uint32
TYPE_NAME	691:21	691:21	5	uint32
LEAF_NODE	691:21	691:21	6	uint32
NAME	691:28	691:28	4	cc
LEAF_NODE	691:28	691:28	5	cc
LEAF_NODE	691:30	691:30	3	,
PARAMETER_DECL	691:32	691:53	3	const unsigned char * cp
TYPE	691:32	691:51	4	const unsigned char *
TYPE_NAME	691:32	691:47	5	const unsigned char
LEAF_NODE	691:32	691:32	6	const
LEAF_NODE	691:38	691:38	6	unsigned
LEAF_NODE	691:47	691:47	6	char
POINTER	691:51	691:51	5	*
LEAF_NODE	691:51	691:51	6	*
NAME	691:53	691:53	4	cp
LEAF_NODE	691:53	691:53	5	cp
LEAF_NODE	691:55	691:55	3	)
LEAF_NODE	692:0	692:0	2	{
STATEMENTS	693:1	693:1	2	
ITERATION	693:1	693:28	3	
KEYWORD	693:1	693:1	4	for
LEAF_NODE	693:1	693:1	5	for
LEAF_NODE	693:5	693:5	4	(
FOR_INIT	693:6	693:6	4	;
LEAF_NODE	693:6	693:6	5	;
CONDITION	693:8	693:8	4	cc > 0
EXPR	693:8	693:13	5	cc > 0
FIELD	693:8	693:8	6	cc
LEAF_NODE	693:8	693:8	7	cc
REL_OPERATOR	693:11	693:11	6	>
LEAF_NODE	693:11	693:11	7	>
FIELD	693:13	693:13	6	0
LEAF_NODE	693:13	693:13	7	0
LEAF_NODE	693:14	693:14	4	;
FOR_EXPR	693:16	693:16	4	cc -- , cp ++
EXPR	693:16	693:22	5	cc -- , cp ++
FIELD	693:16	693:18	6	cc --
LEAF_NODE	693:16	693:16	7	cc
LEAF_NODE	693:18	693:18	7	--
LEAF_NODE	693:20	693:20	6	,
FIELD	693:22	693:24	6	cp ++
LEAF_NODE	693:22	693:22	7	cp
LEAF_NODE	693:24	693:24	7	++
LEAF_NODE	693:26	693:26	4	)
STATEMENTS	693:28	709:1	4	
LEAF_NODE	693:28	693:28	5	{
STATEMENTS	694:2	707:2	5	
SIMPLE_DECL	694:2	694:16	6	const char * tp ;
VAR_DECL	694:2	694:14	7	const char * tp
TYPE	694:2	694:12	8	const char *
TYPE_NAME	694:2	694:8	9	const char
LEAF_NODE	694:2	694:2	10	const
LEAF_NODE	694:8	694:8	10	char
POINTER	694:12	694:12	9	*
LEAF_NODE	694:12	694:12	10	*
NAME	694:14	694:14	8	tp
LEAF_NODE	694:14	694:14	9	tp
LEAF_NODE	694:16	694:16	7	;
SELECTION	696:2	696:20	6	
KEYWORD	696:2	696:2	7	if
LEAF_NODE	696:2	696:2	8	if
LEAF_NODE	696:5	696:5	7	(
CONDITION	696:6	696:6	7	isprint ( * cp )
EXPR	696:6	696:6	8	isprint ( * cp )
FUNCTION_CALL	696:6	696:17	9	isprint ( * cp )
CALLEE	696:6	696:6	10	isprint
LEAF_NODE	696:6	696:6	11	isprint
LEAF_NODE	696:13	696:13	10	(
ARGUMENT	696:14	696:14	10	* cp
UNARY_EXPR	696:14	696:15	11	* cp
UNARY_OPERATOR	696:14	696:14	12	*
LEAF_NODE	696:14	696:14	13	*
FIELD	696:15	696:15	12	cp
LEAF_NODE	696:15	696:15	13	cp
LEAF_NODE	696:17	696:17	10	)
LEAF_NODE	696:18	696:18	7	)
STATEMENTS	696:20	699:2	7	
LEAF_NODE	696:20	696:20	8	{
STATEMENTS	697:3	698:3	8	
EXPR_STATEMENT	697:3	697:17	9	fputc ( * cp , fd ) ;
EXPR	697:3	697:3	10	fputc ( * cp , fd )
FUNCTION_CALL	697:3	697:16	11	fputc ( * cp , fd )
CALLEE	697:3	697:3	12	fputc
LEAF_NODE	697:3	697:3	13	fputc
LEAF_NODE	697:8	697:8	12	(
ARGUMENT	697:9	697:9	12	* cp
UNARY_EXPR	697:9	697:10	13	* cp
UNARY_OPERATOR	697:9	697:9	14	*
LEAF_NODE	697:9	697:9	15	*
FIELD	697:10	697:10	14	cp
LEAF_NODE	697:10	697:10	15	cp
LEAF_NODE	697:12	697:12	12	,
ARGUMENT	697:14	697:14	12	fd
FIELD	697:14	697:14	13	fd
LEAF_NODE	697:14	697:14	14	fd
LEAF_NODE	697:16	697:16	12	)
LEAF_NODE	697:17	697:17	10	;
JUMP_STATEMENT	698:3	698:11	9	continue DESTINATION ;
KEYWORD	698:3	698:3	10	continue
LEAF_NODE	698:3	698:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	698:11	698:11	10	;
LEAF_NODE	699:2	699:2	8	}
ITERATION	700:2	701:3	6	
KEYWORD	700:2	700:2	7	for
LEAF_NODE	700:2	700:2	8	for
LEAF_NODE	700:6	700:6	7	(
FOR_INIT	700:7	700:29	7	tp = "\tt\bb\rr\nn\vv" ;
EXPR	700:7	700:7	8	tp = "\tt\bb\rr\nn\vv"
ASSIGN	700:7	700:12	9	tp = "\tt\bb\rr\nn\vv"
LVAL	700:7	700:7	10	tp
FIELD	700:7	700:7	11	tp
LEAF_NODE	700:7	700:7	12	tp
ASSIGN_OP	700:10	700:10	10	=
LEAF_NODE	700:10	700:10	11	=
RVAL	700:12	700:12	10	"\tt\bb\rr\nn\vv"
FIELD	700:12	700:12	11	"\tt\bb\rr\nn\vv"
LEAF_NODE	700:12	700:12	12	"\tt\bb\rr\nn\vv"
LEAF_NODE	700:29	700:29	8	;
CONDITION	700:31	700:31	7	* tp
EXPR	700:31	700:31	8	* tp
UNARY_EXPR	700:31	700:32	9	* tp
UNARY_OPERATOR	700:31	700:31	10	*
LEAF_NODE	700:31	700:31	11	*
FIELD	700:32	700:32	10	tp
LEAF_NODE	700:32	700:32	11	tp
LEAF_NODE	700:34	700:34	7	;
FOR_EXPR	700:36	700:36	7	tp ++
EXPR	700:36	700:36	8	tp ++
FIELD	700:36	700:38	9	tp ++
LEAF_NODE	700:36	700:36	10	tp
LEAF_NODE	700:38	700:38	10	++
LEAF_NODE	700:40	700:40	7	)
STATEMENTS	701:3	701:3	7	
SELECTION	701:3	702:4	8	
KEYWORD	701:3	701:3	9	if
LEAF_NODE	701:3	701:3	10	if
LEAF_NODE	701:6	701:6	9	(
CONDITION	701:7	701:7	9	* tp ++ == * cp
EXPR	701:7	701:16	10	* tp ++ == * cp
UNARY_EXPR	701:7	701:8	11	* tp ++
UNARY_OPERATOR	701:7	701:7	12	*
LEAF_NODE	701:7	701:7	13	*
FIELD	701:8	701:10	12	tp ++
LEAF_NODE	701:8	701:8	13	tp
LEAF_NODE	701:10	701:10	13	++
EQ_OPERATOR	701:13	701:13	11	==
LEAF_NODE	701:13	701:13	12	==
UNARY_EXPR	701:16	701:17	11	* cp
UNARY_OPERATOR	701:16	701:16	12	*
LEAF_NODE	701:16	701:16	13	*
FIELD	701:17	701:17	12	cp
LEAF_NODE	701:17	701:17	13	cp
LEAF_NODE	701:19	701:19	9	)
STATEMENTS	702:4	702:4	9	
JUMP_STATEMENT	702:4	702:9	10	break DESTINATION ;
KEYWORD	702:4	702:4	11	break
LEAF_NODE	702:4	702:4	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	702:9	702:9	11	;
SELECTION	703:2	704:3	6	
KEYWORD	703:2	703:2	7	if
LEAF_NODE	703:2	703:2	8	if
LEAF_NODE	703:5	703:5	7	(
CONDITION	703:6	703:6	7	* tp
EXPR	703:6	703:6	8	* tp
UNARY_EXPR	703:6	703:7	9	* tp
UNARY_OPERATOR	703:6	703:6	10	*
LEAF_NODE	703:6	703:6	11	*
FIELD	703:7	703:7	10	tp
LEAF_NODE	703:7	703:7	11	tp
LEAF_NODE	703:9	703:9	7	)
STATEMENTS	704:3	704:3	7	
EXPR_STATEMENT	704:3	704:27	8	fprintf ( fd , "\\%c" , * tp ) ;
EXPR	704:3	704:3	9	fprintf ( fd , "\\%c" , * tp )
FUNCTION_CALL	704:3	704:26	10	fprintf ( fd , "\\%c" , * tp )
CALLEE	704:3	704:3	11	fprintf
LEAF_NODE	704:3	704:3	12	fprintf
LEAF_NODE	704:10	704:10	11	(
ARGUMENT	704:11	704:11	11	fd
FIELD	704:11	704:11	12	fd
LEAF_NODE	704:11	704:11	13	fd
LEAF_NODE	704:13	704:13	11	,
ARGUMENT	704:15	704:15	11	"\\%c"
FIELD	704:15	704:15	12	"\\%c"
LEAF_NODE	704:15	704:15	13	"\\%c"
LEAF_NODE	704:21	704:21	11	,
ARGUMENT	704:23	704:23	11	* tp
UNARY_EXPR	704:23	704:24	12	* tp
UNARY_OPERATOR	704:23	704:23	13	*
LEAF_NODE	704:23	704:23	14	*
FIELD	704:24	704:24	13	tp
LEAF_NODE	704:24	704:24	14	tp
LEAF_NODE	704:26	704:26	11	)
LEAF_NODE	704:27	704:27	9	;
SELECTION	705:2	705:7	6	
KEYWORD	705:2	705:2	7	else
LEAF_NODE	705:2	705:2	8	else
STATEMENTS	705:7	705:7	7	
SELECTION	705:7	706:3	8	
KEYWORD	705:7	705:7	9	if
LEAF_NODE	705:7	705:7	10	if
LEAF_NODE	705:10	705:10	9	(
CONDITION	705:11	705:11	9	* cp
EXPR	705:11	705:11	10	* cp
UNARY_EXPR	705:11	705:12	11	* cp
UNARY_OPERATOR	705:11	705:11	12	*
LEAF_NODE	705:11	705:11	13	*
FIELD	705:12	705:12	12	cp
LEAF_NODE	705:12	705:12	13	cp
LEAF_NODE	705:14	705:14	9	)
STATEMENTS	706:3	706:3	9	
EXPR_STATEMENT	706:3	706:29	10	fprintf ( fd , "\\%03o" , * cp ) ;
EXPR	706:3	706:3	11	fprintf ( fd , "\\%03o" , * cp )
FUNCTION_CALL	706:3	706:28	12	fprintf ( fd , "\\%03o" , * cp )
CALLEE	706:3	706:3	13	fprintf
LEAF_NODE	706:3	706:3	14	fprintf
LEAF_NODE	706:10	706:10	13	(
ARGUMENT	706:11	706:11	13	fd
FIELD	706:11	706:11	14	fd
LEAF_NODE	706:11	706:11	15	fd
LEAF_NODE	706:13	706:13	13	,
ARGUMENT	706:15	706:15	13	"\\%03o"
FIELD	706:15	706:15	14	"\\%03o"
LEAF_NODE	706:15	706:15	15	"\\%03o"
LEAF_NODE	706:23	706:23	13	,
ARGUMENT	706:25	706:25	13	* cp
UNARY_EXPR	706:25	706:26	14	* cp
UNARY_OPERATOR	706:25	706:25	15	*
LEAF_NODE	706:25	706:25	16	*
FIELD	706:26	706:26	15	cp
LEAF_NODE	706:26	706:26	16	cp
LEAF_NODE	706:28	706:28	13	)
LEAF_NODE	706:29	706:29	11	;
SELECTION	707:2	708:3	6	
KEYWORD	707:2	707:2	7	else
LEAF_NODE	707:2	707:2	8	else
STATEMENTS	708:3	708:3	7	
EXPR_STATEMENT	708:3	708:21	8	fprintf ( fd , "\\0" ) ;
EXPR	708:3	708:3	9	fprintf ( fd , "\\0" )
FUNCTION_CALL	708:3	708:20	10	fprintf ( fd , "\\0" )
CALLEE	708:3	708:3	11	fprintf
LEAF_NODE	708:3	708:3	12	fprintf
LEAF_NODE	708:10	708:10	11	(
ARGUMENT	708:11	708:11	11	fd
FIELD	708:11	708:11	12	fd
LEAF_NODE	708:11	708:11	13	fd
LEAF_NODE	708:13	708:13	11	,
ARGUMENT	708:15	708:15	11	"\\0"
FIELD	708:15	708:15	12	"\\0"
LEAF_NODE	708:15	708:15	13	"\\0"
LEAF_NODE	708:20	708:20	11	)
LEAF_NODE	708:21	708:21	9	;
LEAF_NODE	709:1	709:1	5	}
LEAF_NODE	710:0	710:0	2	}
FUNCTION_DEF	712:0	843:0	1	
RETURN_TYPE	712:0	712:7	2	static void
LEAF_NODE	712:0	712:0	3	static
TYPE_NAME	712:7	712:7	3	void
LEAF_NODE	712:7	712:7	4	void
FUNCTION_NAME	713:0	713:0	2	PrintData
LEAF_NODE	713:0	713:0	3	PrintData
PARAMETER_LIST	713:9	713:66	2	( FILE * fd , uint16 type , uint32 count , unsigned char * data )
LEAF_NODE	713:9	713:9	3	(
PARAMETER_DECL	713:10	713:16	3	FILE * fd
TYPE	713:10	713:14	4	FILE *
TYPE_NAME	713:10	713:10	5	FILE
LEAF_NODE	713:10	713:10	6	FILE
POINTER	713:14	713:14	5	*
LEAF_NODE	713:14	713:14	6	*
NAME	713:16	713:16	4	fd
LEAF_NODE	713:16	713:16	5	fd
LEAF_NODE	713:18	713:18	3	,
PARAMETER_DECL	713:20	713:27	3	uint16 type
TYPE	713:20	713:20	4	uint16
TYPE_NAME	713:20	713:20	5	uint16
LEAF_NODE	713:20	713:20	6	uint16
NAME	713:27	713:27	4	type
LEAF_NODE	713:27	713:27	5	type
LEAF_NODE	713:31	713:31	3	,
PARAMETER_DECL	713:33	713:40	3	uint32 count
TYPE	713:33	713:33	4	uint32
TYPE_NAME	713:33	713:33	5	uint32
LEAF_NODE	713:33	713:33	6	uint32
NAME	713:40	713:40	4	count
LEAF_NODE	713:40	713:40	5	count
LEAF_NODE	713:45	713:45	3	,
PARAMETER_DECL	713:47	713:62	3	unsigned char * data
TYPE	713:47	713:60	4	unsigned char *
TYPE_NAME	713:47	713:56	5	unsigned char
LEAF_NODE	713:47	713:47	6	unsigned
LEAF_NODE	713:56	713:56	6	char
POINTER	713:60	713:60	5	*
LEAF_NODE	713:60	713:60	6	*
NAME	713:62	713:62	4	data
LEAF_NODE	713:62	713:62	5	data
LEAF_NODE	713:66	713:66	3	)
LEAF_NODE	714:0	714:0	2	{
STATEMENTS	715:1	717:1	2	
SIMPLE_DECL	715:1	715:15	3	char * sep ; sep = "" ;
VAR_DECL	715:1	715:7	4	char * sep ; sep = ""
TYPE	715:1	715:5	5	char *
TYPE_NAME	715:1	715:1	6	char
LEAF_NODE	715:1	715:1	7	char
POINTER	715:5	715:5	6	*
LEAF_NODE	715:5	715:5	7	*
NAME	715:7	715:7	5	sep
LEAF_NODE	715:7	715:7	6	sep
LEAF_NODE	0:0	0:0	5	;
INIT	715:7	715:7	5	sep = ""
ASSIGN	715:7	715:13	6	sep = ""
LVAL	715:7	715:7	7	sep
NAME	715:7	715:7	8	sep
LEAF_NODE	715:7	715:7	9	sep
ASSIGN_OP	715:11	715:11	7	=
LEAF_NODE	715:11	715:11	8	=
RVAL	715:13	715:13	7	""
FIELD	715:13	715:13	8	""
LEAF_NODE	715:13	715:13	9	""
LEAF_NODE	715:15	715:15	4	;
SELECTION	717:1	717:15	3	
KEYWORD	717:1	717:1	4	switch
LEAF_NODE	717:1	717:1	5	switch
LEAF_NODE	717:8	717:8	4	(
CONDITION	717:9	717:9	4	type
EXPR	717:9	717:9	5	type
FIELD	717:9	717:9	6	type
LEAF_NODE	717:9	717:9	7	type
LEAF_NODE	717:13	717:13	4	)
STATEMENTS	717:15	842:1	4	
LEAF_NODE	717:15	717:15	5	{
STATEMENTS	718:1	841:1	5	
LABEL	718:1	718:15	6	case TIFF_BYTE :
LEAF_NODE	718:1	718:1	7	case
LEAF_NODE	718:6	718:6	7	TIFF_BYTE
LEAF_NODE	718:15	718:15	7	:
ITERATION	719:2	720:3	6	
KEYWORD	719:2	719:2	7	while
LEAF_NODE	719:2	719:2	8	while
LEAF_NODE	719:8	719:8	7	(
CONDITION	719:9	719:9	7	count -- > 0
EXPR	719:9	719:19	8	count -- > 0
FIELD	719:9	719:14	9	count --
LEAF_NODE	719:9	719:9	10	count
LEAF_NODE	719:14	719:14	10	--
REL_OPERATOR	719:17	719:17	9	>
LEAF_NODE	719:17	719:17	10	>
FIELD	719:19	719:19	9	0
LEAF_NODE	719:19	719:19	10	0
LEAF_NODE	719:20	719:20	7	)
STATEMENTS	720:3	720:3	7	
EXPR_STATEMENT	720:3	720:48	8	fprintf ( fd , bytefmt , sep , * data ++ ) , sep = " " ;
EXPR	720:3	720:39	9	fprintf ( fd , bytefmt , sep , * data ++ ) , sep = " "
FUNCTION_CALL	720:3	720:36	10	fprintf ( fd , bytefmt , sep , * data ++ )
CALLEE	720:3	720:3	11	fprintf
LEAF_NODE	720:3	720:3	12	fprintf
LEAF_NODE	720:10	720:10	11	(
ARGUMENT	720:11	720:11	11	fd
FIELD	720:11	720:11	12	fd
LEAF_NODE	720:11	720:11	13	fd
LEAF_NODE	720:13	720:13	11	,
ARGUMENT	720:15	720:15	11	bytefmt
FIELD	720:15	720:15	12	bytefmt
LEAF_NODE	720:15	720:15	13	bytefmt
LEAF_NODE	720:22	720:22	11	,
ARGUMENT	720:24	720:24	11	sep
FIELD	720:24	720:24	12	sep
LEAF_NODE	720:24	720:24	13	sep
LEAF_NODE	720:27	720:27	11	,
ARGUMENT	720:29	720:29	11	* data ++
UNARY_EXPR	720:29	720:30	12	* data ++
UNARY_OPERATOR	720:29	720:29	13	*
LEAF_NODE	720:29	720:29	14	*
FIELD	720:30	720:34	13	data ++
LEAF_NODE	720:30	720:30	14	data
LEAF_NODE	720:34	720:34	14	++
LEAF_NODE	720:36	720:36	11	)
LEAF_NODE	720:37	720:37	10	,
ASSIGN	720:39	720:45	10	sep = " "
LVAL	720:39	720:39	11	sep
FIELD	720:39	720:39	12	sep
LEAF_NODE	720:39	720:39	13	sep
ASSIGN_OP	720:43	720:43	11	=
LEAF_NODE	720:43	720:43	12	=
RVAL	720:45	720:45	11	" "
FIELD	720:45	720:45	12	" "
LEAF_NODE	720:45	720:45	13	" "
LEAF_NODE	720:48	720:48	9	;
JUMP_STATEMENT	721:2	721:7	6	break DESTINATION ;
KEYWORD	721:2	721:2	7	break
LEAF_NODE	721:2	721:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	721:7	721:7	7	;
LABEL	722:1	722:16	6	case TIFF_SBYTE :
LEAF_NODE	722:1	722:1	7	case
LEAF_NODE	722:6	722:6	7	TIFF_SBYTE
LEAF_NODE	722:16	722:16	7	:
ITERATION	723:2	724:3	6	
KEYWORD	723:2	723:2	7	while
LEAF_NODE	723:2	723:2	8	while
LEAF_NODE	723:8	723:8	7	(
CONDITION	723:9	723:9	7	count -- > 0
EXPR	723:9	723:19	8	count -- > 0
FIELD	723:9	723:14	9	count --
LEAF_NODE	723:9	723:9	10	count
LEAF_NODE	723:14	723:14	10	--
REL_OPERATOR	723:17	723:17	9	>
LEAF_NODE	723:17	723:17	10	>
FIELD	723:19	723:19	9	0
LEAF_NODE	723:19	723:19	10	0
LEAF_NODE	723:20	723:20	7	)
STATEMENTS	724:3	724:3	7	
LEAF_NODE	724:3	724:3	8	fprintf
LEAF_NODE	724:10	724:10	6	(
LEAF_NODE	724:11	724:11	6	fd
LEAF_NODE	724:13	724:13	6	,
LEAF_NODE	724:15	724:15	6	sbytefmt
LEAF_NODE	724:23	724:23	6	,
LEAF_NODE	724:25	724:25	6	sep
LEAF_NODE	724:28	724:28	6	,
LEAF_NODE	724:30	724:30	6	*
LEAF_NODE	724:31	724:31	6	(
LEAF_NODE	724:32	724:32	6	char
LEAF_NODE	724:37	724:37	6	*
LEAF_NODE	724:38	724:38	6	)
LEAF_NODE	724:39	724:39	6	data
LEAF_NODE	724:43	724:43	6	++
LEAF_NODE	724:45	724:45	6	)
LEAF_NODE	724:46	724:46	6	,
EXPR_STATEMENT	724:48	724:57	6	sep = " " ;
EXPR	724:48	724:48	7	sep = " "
ASSIGN	724:48	724:54	8	sep = " "
LVAL	724:48	724:48	9	sep
FIELD	724:48	724:48	10	sep
LEAF_NODE	724:48	724:48	11	sep
ASSIGN_OP	724:52	724:52	9	=
LEAF_NODE	724:52	724:52	10	=
RVAL	724:54	724:54	9	" "
FIELD	724:54	724:54	10	" "
LEAF_NODE	724:54	724:54	11	" "
LEAF_NODE	724:57	724:57	7	;
JUMP_STATEMENT	725:2	725:7	6	break DESTINATION ;
KEYWORD	725:2	725:2	7	break
LEAF_NODE	725:2	725:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	725:7	725:7	7	;
LABEL	726:1	726:20	6	case TIFF_UNDEFINED :
LEAF_NODE	726:1	726:1	7	case
LEAF_NODE	726:6	726:6	7	TIFF_UNDEFINED
LEAF_NODE	726:20	726:20	7	:
ITERATION	727:2	728:3	6	
KEYWORD	727:2	727:2	7	while
LEAF_NODE	727:2	727:2	8	while
LEAF_NODE	727:8	727:8	7	(
CONDITION	727:9	727:9	7	count -- > 0
EXPR	727:9	727:19	8	count -- > 0
FIELD	727:9	727:14	9	count --
LEAF_NODE	727:9	727:9	10	count
LEAF_NODE	727:14	727:14	10	--
REL_OPERATOR	727:17	727:17	9	>
LEAF_NODE	727:17	727:17	10	>
FIELD	727:19	727:19	9	0
LEAF_NODE	727:19	727:19	10	0
LEAF_NODE	727:20	727:20	7	)
STATEMENTS	728:3	728:3	7	
EXPR_STATEMENT	728:3	728:48	8	fprintf ( fd , bytefmt , sep , * data ++ ) , sep = " " ;
EXPR	728:3	728:39	9	fprintf ( fd , bytefmt , sep , * data ++ ) , sep = " "
FUNCTION_CALL	728:3	728:36	10	fprintf ( fd , bytefmt , sep , * data ++ )
CALLEE	728:3	728:3	11	fprintf
LEAF_NODE	728:3	728:3	12	fprintf
LEAF_NODE	728:10	728:10	11	(
ARGUMENT	728:11	728:11	11	fd
FIELD	728:11	728:11	12	fd
LEAF_NODE	728:11	728:11	13	fd
LEAF_NODE	728:13	728:13	11	,
ARGUMENT	728:15	728:15	11	bytefmt
FIELD	728:15	728:15	12	bytefmt
LEAF_NODE	728:15	728:15	13	bytefmt
LEAF_NODE	728:22	728:22	11	,
ARGUMENT	728:24	728:24	11	sep
FIELD	728:24	728:24	12	sep
LEAF_NODE	728:24	728:24	13	sep
LEAF_NODE	728:27	728:27	11	,
ARGUMENT	728:29	728:29	11	* data ++
UNARY_EXPR	728:29	728:30	12	* data ++
UNARY_OPERATOR	728:29	728:29	13	*
LEAF_NODE	728:29	728:29	14	*
FIELD	728:30	728:34	13	data ++
LEAF_NODE	728:30	728:30	14	data
LEAF_NODE	728:34	728:34	14	++
LEAF_NODE	728:36	728:36	11	)
LEAF_NODE	728:37	728:37	10	,
ASSIGN	728:39	728:45	10	sep = " "
LVAL	728:39	728:39	11	sep
FIELD	728:39	728:39	12	sep
LEAF_NODE	728:39	728:39	13	sep
ASSIGN_OP	728:43	728:43	11	=
LEAF_NODE	728:43	728:43	12	=
RVAL	728:45	728:45	11	" "
FIELD	728:45	728:45	12	" "
LEAF_NODE	728:45	728:45	13	" "
LEAF_NODE	728:48	728:48	9	;
JUMP_STATEMENT	729:2	729:7	6	break DESTINATION ;
KEYWORD	729:2	729:2	7	break
LEAF_NODE	729:2	729:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	729:7	729:7	7	;
LABEL	730:1	730:16	6	case TIFF_ASCII :
LEAF_NODE	730:1	730:1	7	case
LEAF_NODE	730:6	730:6	7	TIFF_ASCII
LEAF_NODE	730:16	730:16	7	:
EXPR_STATEMENT	731:2	731:29	6	PrintASCII ( fd , count , data ) ;
EXPR	731:2	731:2	7	PrintASCII ( fd , count , data )
FUNCTION_CALL	731:2	731:28	8	PrintASCII ( fd , count , data )
CALLEE	731:2	731:2	9	PrintASCII
LEAF_NODE	731:2	731:2	10	PrintASCII
LEAF_NODE	731:12	731:12	9	(
ARGUMENT	731:13	731:13	9	fd
FIELD	731:13	731:13	10	fd
LEAF_NODE	731:13	731:13	11	fd
LEAF_NODE	731:15	731:15	9	,
ARGUMENT	731:17	731:17	9	count
FIELD	731:17	731:17	10	count
LEAF_NODE	731:17	731:17	11	count
LEAF_NODE	731:22	731:22	9	,
ARGUMENT	731:24	731:24	9	data
FIELD	731:24	731:24	10	data
LEAF_NODE	731:24	731:24	11	data
LEAF_NODE	731:28	731:28	9	)
LEAF_NODE	731:29	731:29	7	;
JUMP_STATEMENT	732:2	732:7	6	break DESTINATION ;
KEYWORD	732:2	732:2	7	break
LEAF_NODE	732:2	732:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	732:7	732:7	7	;
LABEL	733:1	733:16	6	case TIFF_SHORT :
LEAF_NODE	733:1	733:1	7	case
LEAF_NODE	733:6	733:6	7	TIFF_SHORT
LEAF_NODE	733:16	733:16	7	:
LEAF_NODE	733:18	733:18	6	{
STATEMENTS	734:2	737:2	6	
SIMPLE_DECL	734:2	734:28	7	uint16 * wp ; wp = ( uint16 * ) data ;
VAR_DECL	734:2	734:10	8	uint16 * wp ; wp = ( uint16 * ) data
TYPE	734:2	734:9	9	uint16 *
TYPE_NAME	734:2	734:2	10	uint16
LEAF_NODE	734:2	734:2	11	uint16
POINTER	734:9	734:9	10	*
LEAF_NODE	734:9	734:9	11	*
NAME	734:10	734:10	9	wp
LEAF_NODE	734:10	734:10	10	wp
LEAF_NODE	0:0	0:0	9	;
INIT	734:10	734:10	9	wp = ( uint16 * ) data
ASSIGN	734:10	734:15	10	wp = ( uint16 * ) data
LVAL	734:10	734:10	11	wp
NAME	734:10	734:10	12	wp
LEAF_NODE	734:10	734:10	13	wp
ASSIGN_OP	734:13	734:13	11	=
LEAF_NODE	734:13	734:13	12	=
RVAL	734:15	734:24	11	( uint16 * ) data
LEAF_NODE	734:15	734:15	12	(
TYPE_NAME	734:16	734:16	12	uint16
LEAF_NODE	734:16	734:16	13	uint16
LEAF_NODE	734:22	734:22	12	*
LEAF_NODE	734:23	734:23	12	)
FIELD	734:24	734:24	12	data
LEAF_NODE	734:24	734:24	13	data
LEAF_NODE	734:28	734:28	8	;
ITERATION	735:2	736:3	7	
KEYWORD	735:2	735:2	8	while
LEAF_NODE	735:2	735:2	9	while
LEAF_NODE	735:8	735:8	8	(
CONDITION	735:9	735:9	8	count -- > 0
EXPR	735:9	735:19	9	count -- > 0
FIELD	735:9	735:14	10	count --
LEAF_NODE	735:9	735:9	11	count
LEAF_NODE	735:14	735:14	11	--
REL_OPERATOR	735:17	735:17	10	>
LEAF_NODE	735:17	735:17	11	>
FIELD	735:19	735:19	10	0
LEAF_NODE	735:19	735:19	11	0
LEAF_NODE	735:20	735:20	8	)
STATEMENTS	736:3	736:3	8	
EXPR_STATEMENT	736:3	736:47	9	fprintf ( fd , shortfmt , sep , * wp ++ ) , sep = " " ;
EXPR	736:3	736:38	10	fprintf ( fd , shortfmt , sep , * wp ++ ) , sep = " "
FUNCTION_CALL	736:3	736:35	11	fprintf ( fd , shortfmt , sep , * wp ++ )
CALLEE	736:3	736:3	12	fprintf
LEAF_NODE	736:3	736:3	13	fprintf
LEAF_NODE	736:10	736:10	12	(
ARGUMENT	736:11	736:11	12	fd
FIELD	736:11	736:11	13	fd
LEAF_NODE	736:11	736:11	14	fd
LEAF_NODE	736:13	736:13	12	,
ARGUMENT	736:15	736:15	12	shortfmt
FIELD	736:15	736:15	13	shortfmt
LEAF_NODE	736:15	736:15	14	shortfmt
LEAF_NODE	736:23	736:23	12	,
ARGUMENT	736:25	736:25	12	sep
FIELD	736:25	736:25	13	sep
LEAF_NODE	736:25	736:25	14	sep
LEAF_NODE	736:28	736:28	12	,
ARGUMENT	736:30	736:30	12	* wp ++
UNARY_EXPR	736:30	736:31	13	* wp ++
UNARY_OPERATOR	736:30	736:30	14	*
LEAF_NODE	736:30	736:30	15	*
FIELD	736:31	736:33	14	wp ++
LEAF_NODE	736:31	736:31	15	wp
LEAF_NODE	736:33	736:33	15	++
LEAF_NODE	736:35	736:35	12	)
LEAF_NODE	736:36	736:36	11	,
ASSIGN	736:38	736:44	11	sep = " "
LVAL	736:38	736:38	12	sep
FIELD	736:38	736:38	13	sep
LEAF_NODE	736:38	736:38	14	sep
ASSIGN_OP	736:42	736:42	12	=
LEAF_NODE	736:42	736:42	13	=
RVAL	736:44	736:44	12	" "
FIELD	736:44	736:44	13	" "
LEAF_NODE	736:44	736:44	14	" "
LEAF_NODE	736:47	736:47	10	;
JUMP_STATEMENT	737:2	737:7	7	break DESTINATION ;
KEYWORD	737:2	737:2	8	break
LEAF_NODE	737:2	737:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	737:7	737:7	8	;
LEAF_NODE	738:1	738:1	6	}
LABEL	739:1	739:17	6	case TIFF_SSHORT :
LEAF_NODE	739:1	739:1	7	case
LEAF_NODE	739:6	739:6	7	TIFF_SSHORT
LEAF_NODE	739:17	739:17	7	:
LEAF_NODE	739:19	739:19	6	{
STATEMENTS	740:2	743:2	6	
SIMPLE_DECL	740:2	740:26	7	int16 * wp ; wp = ( int16 * ) data ;
VAR_DECL	740:2	740:9	8	int16 * wp ; wp = ( int16 * ) data
TYPE	740:2	740:8	9	int16 *
TYPE_NAME	740:2	740:2	10	int16
LEAF_NODE	740:2	740:2	11	int16
POINTER	740:8	740:8	10	*
LEAF_NODE	740:8	740:8	11	*
NAME	740:9	740:9	9	wp
LEAF_NODE	740:9	740:9	10	wp
LEAF_NODE	0:0	0:0	9	;
INIT	740:9	740:9	9	wp = ( int16 * ) data
ASSIGN	740:9	740:14	10	wp = ( int16 * ) data
LVAL	740:9	740:9	11	wp
NAME	740:9	740:9	12	wp
LEAF_NODE	740:9	740:9	13	wp
ASSIGN_OP	740:12	740:12	11	=
LEAF_NODE	740:12	740:12	12	=
RVAL	740:14	740:22	11	( int16 * ) data
LEAF_NODE	740:14	740:14	12	(
TYPE_NAME	740:15	740:15	12	int16
LEAF_NODE	740:15	740:15	13	int16
LEAF_NODE	740:20	740:20	12	*
LEAF_NODE	740:21	740:21	12	)
FIELD	740:22	740:22	12	data
LEAF_NODE	740:22	740:22	13	data
LEAF_NODE	740:26	740:26	8	;
ITERATION	741:2	742:3	7	
KEYWORD	741:2	741:2	8	while
LEAF_NODE	741:2	741:2	9	while
LEAF_NODE	741:8	741:8	8	(
CONDITION	741:9	741:9	8	count -- > 0
EXPR	741:9	741:19	9	count -- > 0
FIELD	741:9	741:14	10	count --
LEAF_NODE	741:9	741:9	11	count
LEAF_NODE	741:14	741:14	11	--
REL_OPERATOR	741:17	741:17	10	>
LEAF_NODE	741:17	741:17	11	>
FIELD	741:19	741:19	10	0
LEAF_NODE	741:19	741:19	11	0
LEAF_NODE	741:20	741:20	8	)
STATEMENTS	742:3	742:3	8	
EXPR_STATEMENT	742:3	742:48	9	fprintf ( fd , sshortfmt , sep , * wp ++ ) , sep = " " ;
EXPR	742:3	742:39	10	fprintf ( fd , sshortfmt , sep , * wp ++ ) , sep = " "
FUNCTION_CALL	742:3	742:36	11	fprintf ( fd , sshortfmt , sep , * wp ++ )
CALLEE	742:3	742:3	12	fprintf
LEAF_NODE	742:3	742:3	13	fprintf
LEAF_NODE	742:10	742:10	12	(
ARGUMENT	742:11	742:11	12	fd
FIELD	742:11	742:11	13	fd
LEAF_NODE	742:11	742:11	14	fd
LEAF_NODE	742:13	742:13	12	,
ARGUMENT	742:15	742:15	12	sshortfmt
FIELD	742:15	742:15	13	sshortfmt
LEAF_NODE	742:15	742:15	14	sshortfmt
LEAF_NODE	742:24	742:24	12	,
ARGUMENT	742:26	742:26	12	sep
FIELD	742:26	742:26	13	sep
LEAF_NODE	742:26	742:26	14	sep
LEAF_NODE	742:29	742:29	12	,
ARGUMENT	742:31	742:31	12	* wp ++
UNARY_EXPR	742:31	742:32	13	* wp ++
UNARY_OPERATOR	742:31	742:31	14	*
LEAF_NODE	742:31	742:31	15	*
FIELD	742:32	742:34	14	wp ++
LEAF_NODE	742:32	742:32	15	wp
LEAF_NODE	742:34	742:34	15	++
LEAF_NODE	742:36	742:36	12	)
LEAF_NODE	742:37	742:37	11	,
ASSIGN	742:39	742:45	11	sep = " "
LVAL	742:39	742:39	12	sep
FIELD	742:39	742:39	13	sep
LEAF_NODE	742:39	742:39	14	sep
ASSIGN_OP	742:43	742:43	12	=
LEAF_NODE	742:43	742:43	13	=
RVAL	742:45	742:45	12	" "
FIELD	742:45	742:45	13	" "
LEAF_NODE	742:45	742:45	14	" "
LEAF_NODE	742:48	742:48	10	;
JUMP_STATEMENT	743:2	743:7	7	break DESTINATION ;
KEYWORD	743:2	743:2	8	break
LEAF_NODE	743:2	743:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	743:7	743:7	8	;
LEAF_NODE	744:1	744:1	6	}
LABEL	745:1	745:15	6	case TIFF_LONG :
LEAF_NODE	745:1	745:1	7	case
LEAF_NODE	745:6	745:6	7	TIFF_LONG
LEAF_NODE	745:15	745:15	7	:
LEAF_NODE	745:17	745:17	6	{
STATEMENTS	746:2	751:2	6	
SIMPLE_DECL	746:2	746:28	7	uint32 * lp ; lp = ( uint32 * ) data ;
VAR_DECL	746:2	746:10	8	uint32 * lp ; lp = ( uint32 * ) data
TYPE	746:2	746:9	9	uint32 *
TYPE_NAME	746:2	746:2	10	uint32
LEAF_NODE	746:2	746:2	11	uint32
POINTER	746:9	746:9	10	*
LEAF_NODE	746:9	746:9	11	*
NAME	746:10	746:10	9	lp
LEAF_NODE	746:10	746:10	10	lp
LEAF_NODE	0:0	0:0	9	;
INIT	746:10	746:10	9	lp = ( uint32 * ) data
ASSIGN	746:10	746:15	10	lp = ( uint32 * ) data
LVAL	746:10	746:10	11	lp
NAME	746:10	746:10	12	lp
LEAF_NODE	746:10	746:10	13	lp
ASSIGN_OP	746:13	746:13	11	=
LEAF_NODE	746:13	746:13	12	=
RVAL	746:15	746:24	11	( uint32 * ) data
LEAF_NODE	746:15	746:15	12	(
TYPE_NAME	746:16	746:16	12	uint32
LEAF_NODE	746:16	746:16	13	uint32
LEAF_NODE	746:22	746:22	12	*
LEAF_NODE	746:23	746:23	12	)
FIELD	746:24	746:24	12	data
LEAF_NODE	746:24	746:24	13	data
LEAF_NODE	746:28	746:28	8	;
ITERATION	747:2	747:22	7	
KEYWORD	747:2	747:2	8	while
LEAF_NODE	747:2	747:2	9	while
LEAF_NODE	747:8	747:8	8	(
CONDITION	747:9	747:9	8	count -- > 0
EXPR	747:9	747:19	9	count -- > 0
FIELD	747:9	747:14	10	count --
LEAF_NODE	747:9	747:9	11	count
LEAF_NODE	747:14	747:14	11	--
REL_OPERATOR	747:17	747:17	10	>
LEAF_NODE	747:17	747:17	11	>
FIELD	747:19	747:19	10	0
LEAF_NODE	747:19	747:19	11	0
LEAF_NODE	747:20	747:20	8	)
STATEMENTS	747:22	750:2	8	
LEAF_NODE	747:22	747:22	9	{
STATEMENTS	748:3	749:3	9	
EXPR_STATEMENT	748:3	748:51	10	fprintf ( fd , longfmt , sep , ( unsigned long ) * lp ++ ) ;
EXPR	748:3	748:3	11	fprintf ( fd , longfmt , sep , ( unsigned long ) * lp ++ )
FUNCTION_CALL	748:3	748:50	12	fprintf ( fd , longfmt , sep , ( unsigned long ) * lp ++ )
CALLEE	748:3	748:3	13	fprintf
LEAF_NODE	748:3	748:3	14	fprintf
LEAF_NODE	748:10	748:10	13	(
ARGUMENT	748:11	748:11	13	fd
FIELD	748:11	748:11	14	fd
LEAF_NODE	748:11	748:11	15	fd
LEAF_NODE	748:13	748:13	13	,
ARGUMENT	748:15	748:15	13	longfmt
FIELD	748:15	748:15	14	longfmt
LEAF_NODE	748:15	748:15	15	longfmt
LEAF_NODE	748:22	748:22	13	,
ARGUMENT	748:24	748:24	13	sep
FIELD	748:24	748:24	14	sep
LEAF_NODE	748:24	748:24	15	sep
LEAF_NODE	748:27	748:27	13	,
ARGUMENT	748:29	748:45	13	( unsigned long ) * lp ++
LEAF_NODE	748:29	748:29	14	(
TYPE_NAME	748:30	748:39	14	unsigned long
LEAF_NODE	748:30	748:30	15	unsigned
LEAF_NODE	748:39	748:39	15	long
LEAF_NODE	748:43	748:43	14	)
UNARY_EXPR	748:45	748:46	14	* lp ++
UNARY_OPERATOR	748:45	748:45	15	*
LEAF_NODE	748:45	748:45	16	*
FIELD	748:46	748:48	15	lp ++
LEAF_NODE	748:46	748:46	16	lp
LEAF_NODE	748:48	748:48	16	++
LEAF_NODE	748:50	748:50	13	)
LEAF_NODE	748:51	748:51	11	;
EXPR_STATEMENT	749:3	749:12	10	sep = " " ;
EXPR	749:3	749:3	11	sep = " "
ASSIGN	749:3	749:9	12	sep = " "
LVAL	749:3	749:3	13	sep
FIELD	749:3	749:3	14	sep
LEAF_NODE	749:3	749:3	15	sep
ASSIGN_OP	749:7	749:7	13	=
LEAF_NODE	749:7	749:7	14	=
RVAL	749:9	749:9	13	" "
FIELD	749:9	749:9	14	" "
LEAF_NODE	749:9	749:9	15	" "
LEAF_NODE	749:12	749:12	11	;
LEAF_NODE	750:2	750:2	9	}
JUMP_STATEMENT	751:2	751:7	7	break DESTINATION ;
KEYWORD	751:2	751:2	8	break
LEAF_NODE	751:2	751:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	751:7	751:7	8	;
LEAF_NODE	752:1	752:1	6	}
LABEL	753:1	753:16	6	case TIFF_SLONG :
LEAF_NODE	753:1	753:1	7	case
LEAF_NODE	753:6	753:6	7	TIFF_SLONG
LEAF_NODE	753:16	753:16	7	:
LEAF_NODE	753:18	753:18	6	{
STATEMENTS	754:2	757:2	6	
SIMPLE_DECL	754:2	754:26	7	int32 * lp ; lp = ( int32 * ) data ;
VAR_DECL	754:2	754:9	8	int32 * lp ; lp = ( int32 * ) data
TYPE	754:2	754:8	9	int32 *
TYPE_NAME	754:2	754:2	10	int32
LEAF_NODE	754:2	754:2	11	int32
POINTER	754:8	754:8	10	*
LEAF_NODE	754:8	754:8	11	*
NAME	754:9	754:9	9	lp
LEAF_NODE	754:9	754:9	10	lp
LEAF_NODE	0:0	0:0	9	;
INIT	754:9	754:9	9	lp = ( int32 * ) data
ASSIGN	754:9	754:14	10	lp = ( int32 * ) data
LVAL	754:9	754:9	11	lp
NAME	754:9	754:9	12	lp
LEAF_NODE	754:9	754:9	13	lp
ASSIGN_OP	754:12	754:12	11	=
LEAF_NODE	754:12	754:12	12	=
RVAL	754:14	754:22	11	( int32 * ) data
LEAF_NODE	754:14	754:14	12	(
TYPE_NAME	754:15	754:15	12	int32
LEAF_NODE	754:15	754:15	13	int32
LEAF_NODE	754:20	754:20	12	*
LEAF_NODE	754:21	754:21	12	)
FIELD	754:22	754:22	12	data
LEAF_NODE	754:22	754:22	13	data
LEAF_NODE	754:26	754:26	8	;
ITERATION	755:2	756:3	7	
KEYWORD	755:2	755:2	8	while
LEAF_NODE	755:2	755:2	9	while
LEAF_NODE	755:8	755:8	8	(
CONDITION	755:9	755:9	8	count -- > 0
EXPR	755:9	755:19	9	count -- > 0
FIELD	755:9	755:14	10	count --
LEAF_NODE	755:9	755:9	11	count
LEAF_NODE	755:14	755:14	11	--
REL_OPERATOR	755:17	755:17	10	>
LEAF_NODE	755:17	755:17	11	>
FIELD	755:19	755:19	10	0
LEAF_NODE	755:19	755:19	11	0
LEAF_NODE	755:20	755:20	8	)
STATEMENTS	756:3	756:3	8	
EXPR_STATEMENT	756:3	756:54	9	fprintf ( fd , slongfmt , sep , ( long ) * lp ++ ) , sep = " " ;
EXPR	756:3	756:45	10	fprintf ( fd , slongfmt , sep , ( long ) * lp ++ ) , sep = " "
FUNCTION_CALL	756:3	756:42	11	fprintf ( fd , slongfmt , sep , ( long ) * lp ++ )
CALLEE	756:3	756:3	12	fprintf
LEAF_NODE	756:3	756:3	13	fprintf
LEAF_NODE	756:10	756:10	12	(
ARGUMENT	756:11	756:11	12	fd
FIELD	756:11	756:11	13	fd
LEAF_NODE	756:11	756:11	14	fd
LEAF_NODE	756:13	756:13	12	,
ARGUMENT	756:15	756:15	12	slongfmt
FIELD	756:15	756:15	13	slongfmt
LEAF_NODE	756:15	756:15	14	slongfmt
LEAF_NODE	756:23	756:23	12	,
ARGUMENT	756:25	756:25	12	sep
FIELD	756:25	756:25	13	sep
LEAF_NODE	756:25	756:25	14	sep
LEAF_NODE	756:28	756:28	12	,
ARGUMENT	756:30	756:37	12	( long ) * lp ++
LEAF_NODE	756:30	756:30	13	(
TYPE_NAME	756:31	756:31	13	long
LEAF_NODE	756:31	756:31	14	long
LEAF_NODE	756:35	756:35	13	)
UNARY_EXPR	756:37	756:38	13	* lp ++
UNARY_OPERATOR	756:37	756:37	14	*
LEAF_NODE	756:37	756:37	15	*
FIELD	756:38	756:40	14	lp ++
LEAF_NODE	756:38	756:38	15	lp
LEAF_NODE	756:40	756:40	15	++
LEAF_NODE	756:42	756:42	12	)
LEAF_NODE	756:43	756:43	11	,
ASSIGN	756:45	756:51	11	sep = " "
LVAL	756:45	756:45	12	sep
FIELD	756:45	756:45	13	sep
LEAF_NODE	756:45	756:45	14	sep
ASSIGN_OP	756:49	756:49	12	=
LEAF_NODE	756:49	756:49	13	=
RVAL	756:51	756:51	12	" "
FIELD	756:51	756:51	13	" "
LEAF_NODE	756:51	756:51	14	" "
LEAF_NODE	756:54	756:54	10	;
JUMP_STATEMENT	757:2	757:7	7	break DESTINATION ;
KEYWORD	757:2	757:2	8	break
LEAF_NODE	757:2	757:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	757:7	757:7	8	;
LEAF_NODE	758:1	758:1	6	}
LABEL	759:1	759:16	6	case TIFF_LONG8 :
LEAF_NODE	759:1	759:1	7	case
LEAF_NODE	759:6	759:6	7	TIFF_LONG8
LEAF_NODE	759:16	759:16	7	:
LEAF_NODE	759:18	759:18	6	{
STATEMENTS	760:2	768:2	6	
SIMPLE_DECL	760:2	760:29	7	uint64 * llp ; llp = ( uint64 * ) data ;
VAR_DECL	760:2	760:10	8	uint64 * llp ; llp = ( uint64 * ) data
TYPE	760:2	760:9	9	uint64 *
TYPE_NAME	760:2	760:2	10	uint64
LEAF_NODE	760:2	760:2	11	uint64
POINTER	760:9	760:9	10	*
LEAF_NODE	760:9	760:9	11	*
NAME	760:10	760:10	9	llp
LEAF_NODE	760:10	760:10	10	llp
LEAF_NODE	0:0	0:0	9	;
INIT	760:10	760:10	9	llp = ( uint64 * ) data
ASSIGN	760:10	760:16	10	llp = ( uint64 * ) data
LVAL	760:10	760:10	11	llp
NAME	760:10	760:10	12	llp
LEAF_NODE	760:10	760:10	13	llp
ASSIGN_OP	760:14	760:14	11	=
LEAF_NODE	760:14	760:14	12	=
RVAL	760:16	760:25	11	( uint64 * ) data
LEAF_NODE	760:16	760:16	12	(
TYPE_NAME	760:17	760:17	12	uint64
LEAF_NODE	760:17	760:17	13	uint64
LEAF_NODE	760:23	760:23	12	*
LEAF_NODE	760:24	760:24	12	)
FIELD	760:25	760:25	12	data
LEAF_NODE	760:25	760:25	13	data
LEAF_NODE	760:29	760:29	8	;
ITERATION	761:2	761:22	7	
KEYWORD	761:2	761:2	8	while
LEAF_NODE	761:2	761:2	9	while
LEAF_NODE	761:8	761:8	8	(
CONDITION	761:9	761:9	8	count -- > 0
EXPR	761:9	761:19	9	count -- > 0
FIELD	761:9	761:14	10	count --
LEAF_NODE	761:9	761:9	11	count
LEAF_NODE	761:14	761:14	11	--
REL_OPERATOR	761:17	761:17	10	>
LEAF_NODE	761:17	761:17	11	>
FIELD	761:19	761:19	10	0
LEAF_NODE	761:19	761:19	11	0
LEAF_NODE	761:20	761:20	8	)
STATEMENTS	761:22	767:2	8	
LEAF_NODE	761:22	761:22	9	{
STATEMENTS	762:24	766:3	9	
SIMPLE_DECL	762:24	762:34	10	uint64 val ;
VAR_DECL	762:24	762:31	11	uint64 val
TYPE	762:24	762:24	12	uint64
TYPE_NAME	762:24	762:24	13	uint64
LEAF_NODE	762:24	762:24	14	uint64
NAME	762:31	762:31	12	val
LEAF_NODE	762:31	762:31	13	val
LEAF_NODE	762:34	762:34	11	;
EXPR_STATEMENT	763:24	763:57	10	memcpy ( & val , llp , sizeof ( uint64 ) ) ;
EXPR	763:24	763:24	11	memcpy ( & val , llp , sizeof ( uint64 ) )
FUNCTION_CALL	763:24	763:56	12	memcpy ( & val , llp , sizeof ( uint64 ) )
CALLEE	763:24	763:24	13	memcpy
LEAF_NODE	763:24	763:24	14	memcpy
LEAF_NODE	763:30	763:30	13	(
ARGUMENT	763:31	763:31	13	& val
UNARY_EXPR	763:31	763:32	14	& val
UNARY_OPERATOR	763:31	763:31	15	&
LEAF_NODE	763:31	763:31	16	&
FIELD	763:32	763:32	15	val
LEAF_NODE	763:32	763:32	16	val
LEAF_NODE	763:35	763:35	13	,
ARGUMENT	763:37	763:37	13	llp
FIELD	763:37	763:37	14	llp
LEAF_NODE	763:37	763:37	15	llp
LEAF_NODE	763:40	763:40	13	,
ARGUMENT	763:42	763:42	13	sizeof ( uint64 )
FUNCTION_CALL	763:42	763:55	14	sizeof ( uint64 )
CALLEE	763:42	763:42	15	sizeof
LEAF_NODE	763:42	763:42	16	sizeof
LEAF_NODE	763:48	763:48	15	(
ARGUMENT	763:49	763:49	15	uint64
FIELD	763:49	763:49	16	uint64
LEAF_NODE	763:49	763:49	17	uint64
LEAF_NODE	763:55	763:55	15	)
LEAF_NODE	763:56	763:56	13	)
LEAF_NODE	763:57	763:57	11	;
EXPR_STATEMENT	764:24	764:30	10	llp ++ ;
EXPR	764:24	764:24	11	llp ++
FIELD	764:24	764:28	12	llp ++
LEAF_NODE	764:24	764:24	13	llp
LEAF_NODE	764:28	764:28	13	++
LEAF_NODE	764:30	764:30	11	;
EXPR_STATEMENT	765:3	765:34	10	fprintf ( fd , long8fmt , sep , val ) ;
EXPR	765:3	765:3	11	fprintf ( fd , long8fmt , sep , val )
FUNCTION_CALL	765:3	765:33	12	fprintf ( fd , long8fmt , sep , val )
CALLEE	765:3	765:3	13	fprintf
LEAF_NODE	765:3	765:3	14	fprintf
LEAF_NODE	765:10	765:10	13	(
ARGUMENT	765:11	765:11	13	fd
FIELD	765:11	765:11	14	fd
LEAF_NODE	765:11	765:11	15	fd
LEAF_NODE	765:13	765:13	13	,
ARGUMENT	765:15	765:15	13	long8fmt
FIELD	765:15	765:15	14	long8fmt
LEAF_NODE	765:15	765:15	15	long8fmt
LEAF_NODE	765:23	765:23	13	,
ARGUMENT	765:25	765:25	13	sep
FIELD	765:25	765:25	14	sep
LEAF_NODE	765:25	765:25	15	sep
LEAF_NODE	765:28	765:28	13	,
ARGUMENT	765:30	765:30	13	val
FIELD	765:30	765:30	14	val
LEAF_NODE	765:30	765:30	15	val
LEAF_NODE	765:33	765:33	13	)
LEAF_NODE	765:34	765:34	11	;
EXPR_STATEMENT	766:3	766:12	10	sep = " " ;
EXPR	766:3	766:3	11	sep = " "
ASSIGN	766:3	766:9	12	sep = " "
LVAL	766:3	766:3	13	sep
FIELD	766:3	766:3	14	sep
LEAF_NODE	766:3	766:3	15	sep
ASSIGN_OP	766:7	766:7	13	=
LEAF_NODE	766:7	766:7	14	=
RVAL	766:9	766:9	13	" "
FIELD	766:9	766:9	14	" "
LEAF_NODE	766:9	766:9	15	" "
LEAF_NODE	766:12	766:12	11	;
LEAF_NODE	767:2	767:2	9	}
JUMP_STATEMENT	768:2	768:7	7	break DESTINATION ;
KEYWORD	768:2	768:2	8	break
LEAF_NODE	768:2	768:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	768:7	768:7	8	;
LEAF_NODE	769:1	769:1	6	}
LABEL	770:1	770:17	6	case TIFF_SLONG8 :
LEAF_NODE	770:1	770:1	7	case
LEAF_NODE	770:6	770:6	7	TIFF_SLONG8
LEAF_NODE	770:17	770:17	7	:
LEAF_NODE	770:19	770:19	6	{
STATEMENTS	771:2	779:2	6	
SIMPLE_DECL	771:2	771:27	7	int64 * llp ; llp = ( int64 * ) data ;
VAR_DECL	771:2	771:9	8	int64 * llp ; llp = ( int64 * ) data
TYPE	771:2	771:8	9	int64 *
TYPE_NAME	771:2	771:2	10	int64
LEAF_NODE	771:2	771:2	11	int64
POINTER	771:8	771:8	10	*
LEAF_NODE	771:8	771:8	11	*
NAME	771:9	771:9	9	llp
LEAF_NODE	771:9	771:9	10	llp
LEAF_NODE	0:0	0:0	9	;
INIT	771:9	771:9	9	llp = ( int64 * ) data
ASSIGN	771:9	771:15	10	llp = ( int64 * ) data
LVAL	771:9	771:9	11	llp
NAME	771:9	771:9	12	llp
LEAF_NODE	771:9	771:9	13	llp
ASSIGN_OP	771:13	771:13	11	=
LEAF_NODE	771:13	771:13	12	=
RVAL	771:15	771:23	11	( int64 * ) data
LEAF_NODE	771:15	771:15	12	(
TYPE_NAME	771:16	771:16	12	int64
LEAF_NODE	771:16	771:16	13	int64
LEAF_NODE	771:21	771:21	12	*
LEAF_NODE	771:22	771:22	12	)
FIELD	771:23	771:23	12	data
LEAF_NODE	771:23	771:23	13	data
LEAF_NODE	771:27	771:27	8	;
ITERATION	772:2	772:22	7	
KEYWORD	772:2	772:2	8	while
LEAF_NODE	772:2	772:2	9	while
LEAF_NODE	772:8	772:8	8	(
CONDITION	772:9	772:9	8	count -- > 0
EXPR	772:9	772:19	9	count -- > 0
FIELD	772:9	772:14	10	count --
LEAF_NODE	772:9	772:9	11	count
LEAF_NODE	772:14	772:14	11	--
REL_OPERATOR	772:17	772:17	10	>
LEAF_NODE	772:17	772:17	11	>
FIELD	772:19	772:19	10	0
LEAF_NODE	772:19	772:19	11	0
LEAF_NODE	772:20	772:20	8	)
STATEMENTS	772:22	778:16	8	
LEAF_NODE	772:22	772:22	9	{
STATEMENTS	773:24	777:24	9	
SIMPLE_DECL	773:24	773:33	10	int64 val ;
VAR_DECL	773:24	773:30	11	int64 val
TYPE	773:24	773:24	12	int64
TYPE_NAME	773:24	773:24	13	int64
LEAF_NODE	773:24	773:24	14	int64
NAME	773:30	773:30	12	val
LEAF_NODE	773:30	773:30	13	val
LEAF_NODE	773:33	773:33	11	;
EXPR_STATEMENT	774:24	774:56	10	memcpy ( & val , llp , sizeof ( int64 ) ) ;
EXPR	774:24	774:24	11	memcpy ( & val , llp , sizeof ( int64 ) )
FUNCTION_CALL	774:24	774:55	12	memcpy ( & val , llp , sizeof ( int64 ) )
CALLEE	774:24	774:24	13	memcpy
LEAF_NODE	774:24	774:24	14	memcpy
LEAF_NODE	774:30	774:30	13	(
ARGUMENT	774:31	774:31	13	& val
UNARY_EXPR	774:31	774:32	14	& val
UNARY_OPERATOR	774:31	774:31	15	&
LEAF_NODE	774:31	774:31	16	&
FIELD	774:32	774:32	15	val
LEAF_NODE	774:32	774:32	16	val
LEAF_NODE	774:35	774:35	13	,
ARGUMENT	774:37	774:37	13	llp
FIELD	774:37	774:37	14	llp
LEAF_NODE	774:37	774:37	15	llp
LEAF_NODE	774:40	774:40	13	,
ARGUMENT	774:42	774:42	13	sizeof ( int64 )
FUNCTION_CALL	774:42	774:54	14	sizeof ( int64 )
CALLEE	774:42	774:42	15	sizeof
LEAF_NODE	774:42	774:42	16	sizeof
LEAF_NODE	774:48	774:48	15	(
ARGUMENT	774:49	774:49	15	int64
FIELD	774:49	774:49	16	int64
LEAF_NODE	774:49	774:49	17	int64
LEAF_NODE	774:54	774:54	15	)
LEAF_NODE	774:55	774:55	13	)
LEAF_NODE	774:56	774:56	11	;
EXPR_STATEMENT	775:24	775:30	10	llp ++ ;
EXPR	775:24	775:24	11	llp ++
FIELD	775:24	775:28	12	llp ++
LEAF_NODE	775:24	775:24	13	llp
LEAF_NODE	775:28	775:28	13	++
LEAF_NODE	775:30	775:30	11	;
EXPR_STATEMENT	776:24	776:56	10	fprintf ( fd , slong8fmt , sep , val ) ;
EXPR	776:24	776:24	11	fprintf ( fd , slong8fmt , sep , val )
FUNCTION_CALL	776:24	776:55	12	fprintf ( fd , slong8fmt , sep , val )
CALLEE	776:24	776:24	13	fprintf
LEAF_NODE	776:24	776:24	14	fprintf
LEAF_NODE	776:31	776:31	13	(
ARGUMENT	776:32	776:32	13	fd
FIELD	776:32	776:32	14	fd
LEAF_NODE	776:32	776:32	15	fd
LEAF_NODE	776:34	776:34	13	,
ARGUMENT	776:36	776:36	13	slong8fmt
FIELD	776:36	776:36	14	slong8fmt
LEAF_NODE	776:36	776:36	15	slong8fmt
LEAF_NODE	776:45	776:45	13	,
ARGUMENT	776:47	776:47	13	sep
FIELD	776:47	776:47	14	sep
LEAF_NODE	776:47	776:47	15	sep
LEAF_NODE	776:50	776:50	13	,
ARGUMENT	776:52	776:52	13	val
FIELD	776:52	776:52	14	val
LEAF_NODE	776:52	776:52	15	val
LEAF_NODE	776:55	776:55	13	)
LEAF_NODE	776:56	776:56	11	;
EXPR_STATEMENT	777:24	777:33	10	sep = " " ;
EXPR	777:24	777:24	11	sep = " "
ASSIGN	777:24	777:30	12	sep = " "
LVAL	777:24	777:24	13	sep
FIELD	777:24	777:24	14	sep
LEAF_NODE	777:24	777:24	15	sep
ASSIGN_OP	777:28	777:28	13	=
LEAF_NODE	777:28	777:28	14	=
RVAL	777:30	777:30	13	" "
FIELD	777:30	777:30	14	" "
LEAF_NODE	777:30	777:30	15	" "
LEAF_NODE	777:33	777:33	11	;
LEAF_NODE	778:16	778:16	9	}
JUMP_STATEMENT	779:2	779:7	7	break DESTINATION ;
KEYWORD	779:2	779:2	8	break
LEAF_NODE	779:2	779:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	779:7	779:7	8	;
LEAF_NODE	780:1	780:1	6	}
LABEL	781:1	781:19	6	case TIFF_RATIONAL :
LEAF_NODE	781:1	781:1	7	case
LEAF_NODE	781:6	781:6	7	TIFF_RATIONAL
LEAF_NODE	781:19	781:19	7	:
LEAF_NODE	781:21	781:21	6	{
STATEMENTS	782:2	794:2	6	
SIMPLE_DECL	782:2	782:28	7	uint32 * lp ; lp = ( uint32 * ) data ;
VAR_DECL	782:2	782:10	8	uint32 * lp ; lp = ( uint32 * ) data
TYPE	782:2	782:9	9	uint32 *
TYPE_NAME	782:2	782:2	10	uint32
LEAF_NODE	782:2	782:2	11	uint32
POINTER	782:9	782:9	10	*
LEAF_NODE	782:9	782:9	11	*
NAME	782:10	782:10	9	lp
LEAF_NODE	782:10	782:10	10	lp
LEAF_NODE	0:0	0:0	9	;
INIT	782:10	782:10	9	lp = ( uint32 * ) data
ASSIGN	782:10	782:15	10	lp = ( uint32 * ) data
LVAL	782:10	782:10	11	lp
NAME	782:10	782:10	12	lp
LEAF_NODE	782:10	782:10	13	lp
ASSIGN_OP	782:13	782:13	11	=
LEAF_NODE	782:13	782:13	12	=
RVAL	782:15	782:24	11	( uint32 * ) data
LEAF_NODE	782:15	782:15	12	(
TYPE_NAME	782:16	782:16	12	uint32
LEAF_NODE	782:16	782:16	13	uint32
LEAF_NODE	782:22	782:22	12	*
LEAF_NODE	782:23	782:23	12	)
FIELD	782:24	782:24	12	data
LEAF_NODE	782:24	782:24	13	data
LEAF_NODE	782:28	782:28	8	;
ITERATION	783:2	783:22	7	
KEYWORD	783:2	783:2	8	while
LEAF_NODE	783:2	783:2	9	while
LEAF_NODE	783:8	783:8	8	(
CONDITION	783:9	783:9	8	count -- > 0
EXPR	783:9	783:19	9	count -- > 0
FIELD	783:9	783:14	10	count --
LEAF_NODE	783:9	783:9	11	count
LEAF_NODE	783:14	783:14	11	--
REL_OPERATOR	783:17	783:17	10	>
LEAF_NODE	783:17	783:17	11	>
FIELD	783:19	783:19	10	0
LEAF_NODE	783:19	783:19	11	0
LEAF_NODE	783:20	783:20	8	)
STATEMENTS	783:22	793:2	8	
LEAF_NODE	783:22	783:22	9	{
STATEMENTS	784:3	792:3	9	
SELECTION	784:3	785:4	10	
KEYWORD	784:3	784:3	11	if
LEAF_NODE	784:3	784:3	12	if
LEAF_NODE	784:6	784:6	11	(
CONDITION	784:7	784:7	11	lp [ 1 ] == 0
EXPR	784:7	784:16	12	lp [ 1 ] == 0
FIELD	784:7	784:11	13	lp [ 1 ]
LEAF_NODE	784:7	784:7	14	lp
LEAF_NODE	784:9	784:9	14	[
EXPR	784:10	784:10	14	1
FIELD	784:10	784:10	15	1
LEAF_NODE	784:10	784:10	16	1
LEAF_NODE	784:11	784:11	14	]
EQ_OPERATOR	784:13	784:13	13	==
LEAF_NODE	784:13	784:13	14	==
FIELD	784:16	784:16	13	0
LEAF_NODE	784:16	784:16	14	0
LEAF_NODE	784:17	784:17	11	)
STATEMENTS	785:4	785:4	11	
EXPR_STATEMENT	785:4	787:30	12	fprintf ( fd , "%sNan (%lu/%lu)" , sep , ( unsigned long ) lp [ 0 ] , ( unsigned long ) lp [ 1 ] ) ;
EXPR	785:4	785:4	13	fprintf ( fd , "%sNan (%lu/%lu)" , sep , ( unsigned long ) lp [ 0 ] , ( unsigned long ) lp [ 1 ] )
FUNCTION_CALL	785:4	787:29	14	fprintf ( fd , "%sNan (%lu/%lu)" , sep , ( unsigned long ) lp [ 0 ] , ( unsigned long ) lp [ 1 ] )
CALLEE	785:4	785:4	15	fprintf
LEAF_NODE	785:4	785:4	16	fprintf
LEAF_NODE	785:11	785:11	15	(
ARGUMENT	785:12	785:12	15	fd
FIELD	785:12	785:12	16	fd
LEAF_NODE	785:12	785:12	17	fd
LEAF_NODE	785:14	785:14	15	,
ARGUMENT	785:16	785:16	15	"%sNan (%lu/%lu)"
FIELD	785:16	785:16	16	"%sNan (%lu/%lu)"
LEAF_NODE	785:16	785:16	17	"%sNan (%lu/%lu)"
LEAF_NODE	785:33	785:33	15	,
ARGUMENT	785:35	785:35	15	sep
FIELD	785:35	785:35	16	sep
LEAF_NODE	785:35	785:35	17	sep
LEAF_NODE	785:38	785:38	15	,
ARGUMENT	786:8	786:24	15	( unsigned long ) lp [ 0 ]
LEAF_NODE	786:8	786:8	16	(
TYPE_NAME	786:9	786:18	16	unsigned long
LEAF_NODE	786:9	786:9	17	unsigned
LEAF_NODE	786:18	786:18	17	long
LEAF_NODE	786:22	786:22	16	)
FIELD	786:24	786:28	16	lp [ 0 ]
LEAF_NODE	786:24	786:24	17	lp
LEAF_NODE	786:26	786:26	17	[
EXPR	786:27	786:27	17	0
FIELD	786:27	786:27	18	0
LEAF_NODE	786:27	786:27	19	0
LEAF_NODE	786:28	786:28	17	]
LEAF_NODE	786:29	786:29	15	,
ARGUMENT	787:8	787:24	15	( unsigned long ) lp [ 1 ]
LEAF_NODE	787:8	787:8	16	(
TYPE_NAME	787:9	787:18	16	unsigned long
LEAF_NODE	787:9	787:9	17	unsigned
LEAF_NODE	787:18	787:18	17	long
LEAF_NODE	787:22	787:22	16	)
FIELD	787:24	787:28	16	lp [ 1 ]
LEAF_NODE	787:24	787:24	17	lp
LEAF_NODE	787:26	787:26	17	[
EXPR	787:27	787:27	17	1
FIELD	787:27	787:27	18	1
LEAF_NODE	787:27	787:27	19	1
LEAF_NODE	787:28	787:28	17	]
LEAF_NODE	787:29	787:29	15	)
LEAF_NODE	787:30	787:30	13	;
SELECTION	788:3	789:4	10	
KEYWORD	788:3	788:3	11	else
LEAF_NODE	788:3	788:3	12	else
STATEMENTS	789:4	789:4	11	
EXPR_STATEMENT	789:4	790:38	12	fprintf ( fd , rationalfmt , sep , ( double ) lp [ 0 ] / ( double ) lp [ 1 ] ) ;
EXPR	789:4	789:4	13	fprintf ( fd , rationalfmt , sep , ( double ) lp [ 0 ] / ( double ) lp [ 1 ] )
FUNCTION_CALL	789:4	790:37	14	fprintf ( fd , rationalfmt , sep , ( double ) lp [ 0 ] / ( double ) lp [ 1 ] )
CALLEE	789:4	789:4	15	fprintf
LEAF_NODE	789:4	789:4	16	fprintf
LEAF_NODE	789:11	789:11	15	(
ARGUMENT	789:12	789:12	15	fd
FIELD	789:12	789:12	16	fd
LEAF_NODE	789:12	789:12	17	fd
LEAF_NODE	789:14	789:14	15	,
ARGUMENT	789:16	789:16	15	rationalfmt
FIELD	789:16	789:16	16	rationalfmt
LEAF_NODE	789:16	789:16	17	rationalfmt
LEAF_NODE	789:27	789:27	15	,
ARGUMENT	789:29	789:29	15	sep
FIELD	789:29	789:29	16	sep
LEAF_NODE	789:29	789:29	17	sep
LEAF_NODE	789:32	789:32	15	,
ARGUMENT	790:8	790:32	15	( double ) lp [ 0 ] / ( double ) lp [ 1 ]
LEAF_NODE	790:8	790:8	16	(
TYPE_NAME	790:9	790:9	16	double
LEAF_NODE	790:9	790:9	17	double
LEAF_NODE	790:15	790:15	16	)
FIELD	790:16	790:20	16	lp [ 0 ]
LEAF_NODE	790:16	790:16	17	lp
LEAF_NODE	790:18	790:18	17	[
EXPR	790:19	790:19	17	0
FIELD	790:19	790:19	18	0
LEAF_NODE	790:19	790:19	19	0
LEAF_NODE	790:20	790:20	17	]
LEAF_NODE	790:22	790:22	16	/
LEAF_NODE	790:24	790:24	16	(
TYPE_NAME	790:25	790:25	16	double
LEAF_NODE	790:25	790:25	17	double
LEAF_NODE	790:31	790:31	16	)
FIELD	790:32	790:36	16	lp [ 1 ]
LEAF_NODE	790:32	790:32	17	lp
LEAF_NODE	790:34	790:34	17	[
EXPR	790:35	790:35	17	1
FIELD	790:35	790:35	18	1
LEAF_NODE	790:35	790:35	19	1
LEAF_NODE	790:36	790:36	17	]
LEAF_NODE	790:37	790:37	15	)
LEAF_NODE	790:38	790:38	13	;
EXPR_STATEMENT	791:3	791:12	10	sep = " " ;
EXPR	791:3	791:3	11	sep = " "
ASSIGN	791:3	791:9	12	sep = " "
LVAL	791:3	791:3	13	sep
FIELD	791:3	791:3	14	sep
LEAF_NODE	791:3	791:3	15	sep
ASSIGN_OP	791:7	791:7	13	=
LEAF_NODE	791:7	791:7	14	=
RVAL	791:9	791:9	13	" "
FIELD	791:9	791:9	14	" "
LEAF_NODE	791:9	791:9	15	" "
LEAF_NODE	791:12	791:12	11	;
EXPR_STATEMENT	792:3	792:10	10	lp += 2 ;
EXPR	792:3	792:3	11	lp += 2
ASSIGN	792:3	792:9	12	lp += 2
LVAL	792:3	792:3	13	lp
FIELD	792:3	792:3	14	lp
LEAF_NODE	792:3	792:3	15	lp
ASSIGN_OP	792:6	792:6	13	+=
LEAF_NODE	792:6	792:6	14	+=
RVAL	792:9	792:9	13	2
FIELD	792:9	792:9	14	2
LEAF_NODE	792:9	792:9	15	2
LEAF_NODE	792:10	792:10	11	;
LEAF_NODE	793:2	793:2	9	}
JUMP_STATEMENT	794:2	794:7	7	break DESTINATION ;
KEYWORD	794:2	794:2	8	break
LEAF_NODE	794:2	794:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	794:7	794:7	8	;
LEAF_NODE	795:1	795:1	6	}
LABEL	796:1	796:20	6	case TIFF_SRATIONAL :
LEAF_NODE	796:1	796:1	7	case
LEAF_NODE	796:6	796:6	7	TIFF_SRATIONAL
LEAF_NODE	796:20	796:20	7	:
LEAF_NODE	796:22	796:22	6	{
STATEMENTS	797:2	808:2	6	
SIMPLE_DECL	797:2	797:26	7	int32 * lp ; lp = ( int32 * ) data ;
VAR_DECL	797:2	797:9	8	int32 * lp ; lp = ( int32 * ) data
TYPE	797:2	797:8	9	int32 *
TYPE_NAME	797:2	797:2	10	int32
LEAF_NODE	797:2	797:2	11	int32
POINTER	797:8	797:8	10	*
LEAF_NODE	797:8	797:8	11	*
NAME	797:9	797:9	9	lp
LEAF_NODE	797:9	797:9	10	lp
LEAF_NODE	0:0	0:0	9	;
INIT	797:9	797:9	9	lp = ( int32 * ) data
ASSIGN	797:9	797:14	10	lp = ( int32 * ) data
LVAL	797:9	797:9	11	lp
NAME	797:9	797:9	12	lp
LEAF_NODE	797:9	797:9	13	lp
ASSIGN_OP	797:12	797:12	11	=
LEAF_NODE	797:12	797:12	12	=
RVAL	797:14	797:22	11	( int32 * ) data
LEAF_NODE	797:14	797:14	12	(
TYPE_NAME	797:15	797:15	12	int32
LEAF_NODE	797:15	797:15	13	int32
LEAF_NODE	797:20	797:20	12	*
LEAF_NODE	797:21	797:21	12	)
FIELD	797:22	797:22	12	data
LEAF_NODE	797:22	797:22	13	data
LEAF_NODE	797:26	797:26	8	;
ITERATION	798:2	798:22	7	
KEYWORD	798:2	798:2	8	while
LEAF_NODE	798:2	798:2	9	while
LEAF_NODE	798:8	798:8	8	(
CONDITION	798:9	798:9	8	count -- > 0
EXPR	798:9	798:19	9	count -- > 0
FIELD	798:9	798:14	10	count --
LEAF_NODE	798:9	798:9	11	count
LEAF_NODE	798:14	798:14	11	--
REL_OPERATOR	798:17	798:17	10	>
LEAF_NODE	798:17	798:17	11	>
FIELD	798:19	798:19	10	0
LEAF_NODE	798:19	798:19	11	0
LEAF_NODE	798:20	798:20	8	)
STATEMENTS	798:22	807:2	8	
LEAF_NODE	798:22	798:22	9	{
STATEMENTS	799:3	806:3	9	
SELECTION	799:3	800:4	10	
KEYWORD	799:3	799:3	11	if
LEAF_NODE	799:3	799:3	12	if
LEAF_NODE	799:6	799:6	11	(
CONDITION	799:7	799:7	11	lp [ 1 ] == 0
EXPR	799:7	799:16	12	lp [ 1 ] == 0
FIELD	799:7	799:11	13	lp [ 1 ]
LEAF_NODE	799:7	799:7	14	lp
LEAF_NODE	799:9	799:9	14	[
EXPR	799:10	799:10	14	1
FIELD	799:10	799:10	15	1
LEAF_NODE	799:10	799:10	16	1
LEAF_NODE	799:11	799:11	14	]
EQ_OPERATOR	799:13	799:13	13	==
LEAF_NODE	799:13	799:13	14	==
FIELD	799:16	799:16	13	0
LEAF_NODE	799:16	799:16	14	0
LEAF_NODE	799:17	799:17	11	)
STATEMENTS	800:4	800:4	11	
EXPR_STATEMENT	800:4	801:35	12	fprintf ( fd , "%sNan (%ld/%ld)" , sep , ( long ) lp [ 0 ] , ( long ) lp [ 1 ] ) ;
EXPR	800:4	800:4	13	fprintf ( fd , "%sNan (%ld/%ld)" , sep , ( long ) lp [ 0 ] , ( long ) lp [ 1 ] )
FUNCTION_CALL	800:4	801:34	14	fprintf ( fd , "%sNan (%ld/%ld)" , sep , ( long ) lp [ 0 ] , ( long ) lp [ 1 ] )
CALLEE	800:4	800:4	15	fprintf
LEAF_NODE	800:4	800:4	16	fprintf
LEAF_NODE	800:11	800:11	15	(
ARGUMENT	800:12	800:12	15	fd
FIELD	800:12	800:12	16	fd
LEAF_NODE	800:12	800:12	17	fd
LEAF_NODE	800:14	800:14	15	,
ARGUMENT	800:16	800:16	15	"%sNan (%ld/%ld)"
FIELD	800:16	800:16	16	"%sNan (%ld/%ld)"
LEAF_NODE	800:16	800:16	17	"%sNan (%ld/%ld)"
LEAF_NODE	800:33	800:33	15	,
ARGUMENT	800:35	800:35	15	sep
FIELD	800:35	800:35	16	sep
LEAF_NODE	800:35	800:35	17	sep
LEAF_NODE	800:38	800:38	15	,
ARGUMENT	801:8	801:15	15	( long ) lp [ 0 ]
LEAF_NODE	801:8	801:8	16	(
TYPE_NAME	801:9	801:9	16	long
LEAF_NODE	801:9	801:9	17	long
LEAF_NODE	801:13	801:13	16	)
FIELD	801:15	801:19	16	lp [ 0 ]
LEAF_NODE	801:15	801:15	17	lp
LEAF_NODE	801:17	801:17	17	[
EXPR	801:18	801:18	17	0
FIELD	801:18	801:18	18	0
LEAF_NODE	801:18	801:18	19	0
LEAF_NODE	801:19	801:19	17	]
LEAF_NODE	801:20	801:20	15	,
ARGUMENT	801:22	801:29	15	( long ) lp [ 1 ]
LEAF_NODE	801:22	801:22	16	(
TYPE_NAME	801:23	801:23	16	long
LEAF_NODE	801:23	801:23	17	long
LEAF_NODE	801:27	801:27	16	)
FIELD	801:29	801:33	16	lp [ 1 ]
LEAF_NODE	801:29	801:29	17	lp
LEAF_NODE	801:31	801:31	17	[
EXPR	801:32	801:32	17	1
FIELD	801:32	801:32	18	1
LEAF_NODE	801:32	801:32	19	1
LEAF_NODE	801:33	801:33	17	]
LEAF_NODE	801:34	801:34	15	)
LEAF_NODE	801:35	801:35	13	;
SELECTION	802:3	803:4	10	
KEYWORD	802:3	802:3	11	else
LEAF_NODE	802:3	802:3	12	else
STATEMENTS	803:4	803:4	11	
EXPR_STATEMENT	803:4	804:38	12	fprintf ( fd , srationalfmt , sep , ( double ) lp [ 0 ] / ( double ) lp [ 1 ] ) ;
EXPR	803:4	803:4	13	fprintf ( fd , srationalfmt , sep , ( double ) lp [ 0 ] / ( double ) lp [ 1 ] )
FUNCTION_CALL	803:4	804:37	14	fprintf ( fd , srationalfmt , sep , ( double ) lp [ 0 ] / ( double ) lp [ 1 ] )
CALLEE	803:4	803:4	15	fprintf
LEAF_NODE	803:4	803:4	16	fprintf
LEAF_NODE	803:11	803:11	15	(
ARGUMENT	803:12	803:12	15	fd
FIELD	803:12	803:12	16	fd
LEAF_NODE	803:12	803:12	17	fd
LEAF_NODE	803:14	803:14	15	,
ARGUMENT	803:16	803:16	15	srationalfmt
FIELD	803:16	803:16	16	srationalfmt
LEAF_NODE	803:16	803:16	17	srationalfmt
LEAF_NODE	803:28	803:28	15	,
ARGUMENT	803:30	803:30	15	sep
FIELD	803:30	803:30	16	sep
LEAF_NODE	803:30	803:30	17	sep
LEAF_NODE	803:33	803:33	15	,
ARGUMENT	804:8	804:32	15	( double ) lp [ 0 ] / ( double ) lp [ 1 ]
LEAF_NODE	804:8	804:8	16	(
TYPE_NAME	804:9	804:9	16	double
LEAF_NODE	804:9	804:9	17	double
LEAF_NODE	804:15	804:15	16	)
FIELD	804:16	804:20	16	lp [ 0 ]
LEAF_NODE	804:16	804:16	17	lp
LEAF_NODE	804:18	804:18	17	[
EXPR	804:19	804:19	17	0
FIELD	804:19	804:19	18	0
LEAF_NODE	804:19	804:19	19	0
LEAF_NODE	804:20	804:20	17	]
LEAF_NODE	804:22	804:22	16	/
LEAF_NODE	804:24	804:24	16	(
TYPE_NAME	804:25	804:25	16	double
LEAF_NODE	804:25	804:25	17	double
LEAF_NODE	804:31	804:31	16	)
FIELD	804:32	804:36	16	lp [ 1 ]
LEAF_NODE	804:32	804:32	17	lp
LEAF_NODE	804:34	804:34	17	[
EXPR	804:35	804:35	17	1
FIELD	804:35	804:35	18	1
LEAF_NODE	804:35	804:35	19	1
LEAF_NODE	804:36	804:36	17	]
LEAF_NODE	804:37	804:37	15	)
LEAF_NODE	804:38	804:38	13	;
EXPR_STATEMENT	805:3	805:12	10	sep = " " ;
EXPR	805:3	805:3	11	sep = " "
ASSIGN	805:3	805:9	12	sep = " "
LVAL	805:3	805:3	13	sep
FIELD	805:3	805:3	14	sep
LEAF_NODE	805:3	805:3	15	sep
ASSIGN_OP	805:7	805:7	13	=
LEAF_NODE	805:7	805:7	14	=
RVAL	805:9	805:9	13	" "
FIELD	805:9	805:9	14	" "
LEAF_NODE	805:9	805:9	15	" "
LEAF_NODE	805:12	805:12	11	;
EXPR_STATEMENT	806:3	806:10	10	lp += 2 ;
EXPR	806:3	806:3	11	lp += 2
ASSIGN	806:3	806:9	12	lp += 2
LVAL	806:3	806:3	13	lp
FIELD	806:3	806:3	14	lp
LEAF_NODE	806:3	806:3	15	lp
ASSIGN_OP	806:6	806:6	13	+=
LEAF_NODE	806:6	806:6	14	+=
RVAL	806:9	806:9	13	2
FIELD	806:9	806:9	14	2
LEAF_NODE	806:9	806:9	15	2
LEAF_NODE	806:10	806:10	11	;
LEAF_NODE	807:2	807:2	9	}
JUMP_STATEMENT	808:2	808:7	7	break DESTINATION ;
KEYWORD	808:2	808:2	8	break
LEAF_NODE	808:2	808:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	808:7	808:7	8	;
LEAF_NODE	809:1	809:1	6	}
LABEL	810:1	810:16	6	case TIFF_FLOAT :
LEAF_NODE	810:1	810:1	7	case
LEAF_NODE	810:6	810:6	7	TIFF_FLOAT
LEAF_NODE	810:16	810:16	7	:
LEAF_NODE	810:18	810:18	6	{
STATEMENTS	811:2	814:2	6	
SIMPLE_DECL	811:2	811:27	7	float * fp ; fp = ( float * ) data ;
VAR_DECL	811:2	811:9	8	float * fp ; fp = ( float * ) data
TYPE	811:2	811:8	9	float *
TYPE_NAME	811:2	811:2	10	float
LEAF_NODE	811:2	811:2	11	float
POINTER	811:8	811:8	10	*
LEAF_NODE	811:8	811:8	11	*
NAME	811:9	811:9	9	fp
LEAF_NODE	811:9	811:9	10	fp
LEAF_NODE	0:0	0:0	9	;
INIT	811:9	811:9	9	fp = ( float * ) data
ASSIGN	811:9	811:14	10	fp = ( float * ) data
LVAL	811:9	811:9	11	fp
NAME	811:9	811:9	12	fp
LEAF_NODE	811:9	811:9	13	fp
ASSIGN_OP	811:12	811:12	11	=
LEAF_NODE	811:12	811:12	12	=
RVAL	811:14	811:23	11	( float * ) data
LEAF_NODE	811:14	811:14	12	(
TYPE_NAME	811:15	811:15	12	float
LEAF_NODE	811:15	811:15	13	float
LEAF_NODE	811:21	811:21	12	*
LEAF_NODE	811:22	811:22	12	)
FIELD	811:23	811:23	12	data
LEAF_NODE	811:23	811:23	13	data
LEAF_NODE	811:27	811:27	8	;
ITERATION	812:2	813:3	7	
KEYWORD	812:2	812:2	8	while
LEAF_NODE	812:2	812:2	9	while
LEAF_NODE	812:8	812:8	8	(
CONDITION	812:9	812:9	8	count -- > 0
EXPR	812:9	812:19	9	count -- > 0
FIELD	812:9	812:14	10	count --
LEAF_NODE	812:9	812:9	11	count
LEAF_NODE	812:14	812:14	11	--
REL_OPERATOR	812:17	812:17	10	>
LEAF_NODE	812:17	812:17	11	>
FIELD	812:19	812:19	10	0
LEAF_NODE	812:19	812:19	11	0
LEAF_NODE	812:20	812:20	8	)
STATEMENTS	813:3	813:3	8	
EXPR_STATEMENT	813:3	813:47	9	fprintf ( fd , floatfmt , sep , * fp ++ ) , sep = " " ;
EXPR	813:3	813:38	10	fprintf ( fd , floatfmt , sep , * fp ++ ) , sep = " "
FUNCTION_CALL	813:3	813:35	11	fprintf ( fd , floatfmt , sep , * fp ++ )
CALLEE	813:3	813:3	12	fprintf
LEAF_NODE	813:3	813:3	13	fprintf
LEAF_NODE	813:10	813:10	12	(
ARGUMENT	813:11	813:11	12	fd
FIELD	813:11	813:11	13	fd
LEAF_NODE	813:11	813:11	14	fd
LEAF_NODE	813:13	813:13	12	,
ARGUMENT	813:15	813:15	12	floatfmt
FIELD	813:15	813:15	13	floatfmt
LEAF_NODE	813:15	813:15	14	floatfmt
LEAF_NODE	813:23	813:23	12	,
ARGUMENT	813:25	813:25	12	sep
FIELD	813:25	813:25	13	sep
LEAF_NODE	813:25	813:25	14	sep
LEAF_NODE	813:28	813:28	12	,
ARGUMENT	813:30	813:30	12	* fp ++
UNARY_EXPR	813:30	813:31	13	* fp ++
UNARY_OPERATOR	813:30	813:30	14	*
LEAF_NODE	813:30	813:30	15	*
FIELD	813:31	813:33	14	fp ++
LEAF_NODE	813:31	813:31	15	fp
LEAF_NODE	813:33	813:33	15	++
LEAF_NODE	813:35	813:35	12	)
LEAF_NODE	813:36	813:36	11	,
ASSIGN	813:38	813:44	11	sep = " "
LVAL	813:38	813:38	12	sep
FIELD	813:38	813:38	13	sep
LEAF_NODE	813:38	813:38	14	sep
ASSIGN_OP	813:42	813:42	12	=
LEAF_NODE	813:42	813:42	13	=
RVAL	813:44	813:44	12	" "
FIELD	813:44	813:44	13	" "
LEAF_NODE	813:44	813:44	14	" "
LEAF_NODE	813:47	813:47	10	;
JUMP_STATEMENT	814:2	814:7	7	break DESTINATION ;
KEYWORD	814:2	814:2	8	break
LEAF_NODE	814:2	814:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	814:7	814:7	8	;
LEAF_NODE	815:1	815:1	6	}
LABEL	816:1	816:17	6	case TIFF_DOUBLE :
LEAF_NODE	816:1	816:1	7	case
LEAF_NODE	816:6	816:6	7	TIFF_DOUBLE
LEAF_NODE	816:17	816:17	7	:
LEAF_NODE	816:19	816:19	6	{
STATEMENTS	817:2	820:2	6	
SIMPLE_DECL	817:2	817:29	7	double * dp ; dp = ( double * ) data ;
VAR_DECL	817:2	817:10	8	double * dp ; dp = ( double * ) data
TYPE	817:2	817:9	9	double *
TYPE_NAME	817:2	817:2	10	double
LEAF_NODE	817:2	817:2	11	double
POINTER	817:9	817:9	10	*
LEAF_NODE	817:9	817:9	11	*
NAME	817:10	817:10	9	dp
LEAF_NODE	817:10	817:10	10	dp
LEAF_NODE	0:0	0:0	9	;
INIT	817:10	817:10	9	dp = ( double * ) data
ASSIGN	817:10	817:15	10	dp = ( double * ) data
LVAL	817:10	817:10	11	dp
NAME	817:10	817:10	12	dp
LEAF_NODE	817:10	817:10	13	dp
ASSIGN_OP	817:13	817:13	11	=
LEAF_NODE	817:13	817:13	12	=
RVAL	817:15	817:25	11	( double * ) data
LEAF_NODE	817:15	817:15	12	(
TYPE_NAME	817:16	817:16	12	double
LEAF_NODE	817:16	817:16	13	double
LEAF_NODE	817:23	817:23	12	*
LEAF_NODE	817:24	817:24	12	)
FIELD	817:25	817:25	12	data
LEAF_NODE	817:25	817:25	13	data
LEAF_NODE	817:29	817:29	8	;
ITERATION	818:2	819:3	7	
KEYWORD	818:2	818:2	8	while
LEAF_NODE	818:2	818:2	9	while
LEAF_NODE	818:8	818:8	8	(
CONDITION	818:9	818:9	8	count -- > 0
EXPR	818:9	818:19	9	count -- > 0
FIELD	818:9	818:14	10	count --
LEAF_NODE	818:9	818:9	11	count
LEAF_NODE	818:14	818:14	11	--
REL_OPERATOR	818:17	818:17	10	>
LEAF_NODE	818:17	818:17	11	>
FIELD	818:19	818:19	10	0
LEAF_NODE	818:19	818:19	11	0
LEAF_NODE	818:20	818:20	8	)
STATEMENTS	819:3	819:3	8	
EXPR_STATEMENT	819:3	819:48	9	fprintf ( fd , doublefmt , sep , * dp ++ ) , sep = " " ;
EXPR	819:3	819:39	10	fprintf ( fd , doublefmt , sep , * dp ++ ) , sep = " "
FUNCTION_CALL	819:3	819:36	11	fprintf ( fd , doublefmt , sep , * dp ++ )
CALLEE	819:3	819:3	12	fprintf
LEAF_NODE	819:3	819:3	13	fprintf
LEAF_NODE	819:10	819:10	12	(
ARGUMENT	819:11	819:11	12	fd
FIELD	819:11	819:11	13	fd
LEAF_NODE	819:11	819:11	14	fd
LEAF_NODE	819:13	819:13	12	,
ARGUMENT	819:15	819:15	12	doublefmt
FIELD	819:15	819:15	13	doublefmt
LEAF_NODE	819:15	819:15	14	doublefmt
LEAF_NODE	819:24	819:24	12	,
ARGUMENT	819:26	819:26	12	sep
FIELD	819:26	819:26	13	sep
LEAF_NODE	819:26	819:26	14	sep
LEAF_NODE	819:29	819:29	12	,
ARGUMENT	819:31	819:31	12	* dp ++
UNARY_EXPR	819:31	819:32	13	* dp ++
UNARY_OPERATOR	819:31	819:31	14	*
LEAF_NODE	819:31	819:31	15	*
FIELD	819:32	819:34	14	dp ++
LEAF_NODE	819:32	819:32	15	dp
LEAF_NODE	819:34	819:34	15	++
LEAF_NODE	819:36	819:36	12	)
LEAF_NODE	819:37	819:37	11	,
ASSIGN	819:39	819:45	11	sep = " "
LVAL	819:39	819:39	12	sep
FIELD	819:39	819:39	13	sep
LEAF_NODE	819:39	819:39	14	sep
ASSIGN_OP	819:43	819:43	12	=
LEAF_NODE	819:43	819:43	13	=
RVAL	819:45	819:45	12	" "
FIELD	819:45	819:45	13	" "
LEAF_NODE	819:45	819:45	14	" "
LEAF_NODE	819:48	819:48	10	;
JUMP_STATEMENT	820:2	820:7	7	break DESTINATION ;
KEYWORD	820:2	820:2	8	break
LEAF_NODE	820:2	820:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	820:7	820:7	8	;
LEAF_NODE	821:1	821:1	6	}
LABEL	822:1	822:14	6	case TIFF_IFD :
LEAF_NODE	822:1	822:1	7	case
LEAF_NODE	822:6	822:6	7	TIFF_IFD
LEAF_NODE	822:14	822:14	7	:
LEAF_NODE	822:16	822:16	6	{
STATEMENTS	823:2	828:2	6	
SIMPLE_DECL	823:2	823:28	7	uint32 * lp ; lp = ( uint32 * ) data ;
VAR_DECL	823:2	823:10	8	uint32 * lp ; lp = ( uint32 * ) data
TYPE	823:2	823:9	9	uint32 *
TYPE_NAME	823:2	823:2	10	uint32
LEAF_NODE	823:2	823:2	11	uint32
POINTER	823:9	823:9	10	*
LEAF_NODE	823:9	823:9	11	*
NAME	823:10	823:10	9	lp
LEAF_NODE	823:10	823:10	10	lp
LEAF_NODE	0:0	0:0	9	;
INIT	823:10	823:10	9	lp = ( uint32 * ) data
ASSIGN	823:10	823:15	10	lp = ( uint32 * ) data
LVAL	823:10	823:10	11	lp
NAME	823:10	823:10	12	lp
LEAF_NODE	823:10	823:10	13	lp
ASSIGN_OP	823:13	823:13	11	=
LEAF_NODE	823:13	823:13	12	=
RVAL	823:15	823:24	11	( uint32 * ) data
LEAF_NODE	823:15	823:15	12	(
TYPE_NAME	823:16	823:16	12	uint32
LEAF_NODE	823:16	823:16	13	uint32
LEAF_NODE	823:22	823:22	12	*
LEAF_NODE	823:23	823:23	12	)
FIELD	823:24	823:24	12	data
LEAF_NODE	823:24	823:24	13	data
LEAF_NODE	823:28	823:28	8	;
ITERATION	824:2	824:22	7	
KEYWORD	824:2	824:2	8	while
LEAF_NODE	824:2	824:2	9	while
LEAF_NODE	824:8	824:8	8	(
CONDITION	824:9	824:9	8	count -- > 0
EXPR	824:9	824:19	9	count -- > 0
FIELD	824:9	824:14	10	count --
LEAF_NODE	824:9	824:9	11	count
LEAF_NODE	824:14	824:14	11	--
REL_OPERATOR	824:17	824:17	10	>
LEAF_NODE	824:17	824:17	11	>
FIELD	824:19	824:19	10	0
LEAF_NODE	824:19	824:19	11	0
LEAF_NODE	824:20	824:20	8	)
STATEMENTS	824:22	827:2	8	
LEAF_NODE	824:22	824:22	9	{
STATEMENTS	825:3	826:3	9	
EXPR_STATEMENT	825:3	825:50	10	fprintf ( fd , ifdfmt , sep , ( unsigned long ) * lp ++ ) ;
EXPR	825:3	825:3	11	fprintf ( fd , ifdfmt , sep , ( unsigned long ) * lp ++ )
FUNCTION_CALL	825:3	825:49	12	fprintf ( fd , ifdfmt , sep , ( unsigned long ) * lp ++ )
CALLEE	825:3	825:3	13	fprintf
LEAF_NODE	825:3	825:3	14	fprintf
LEAF_NODE	825:10	825:10	13	(
ARGUMENT	825:11	825:11	13	fd
FIELD	825:11	825:11	14	fd
LEAF_NODE	825:11	825:11	15	fd
LEAF_NODE	825:13	825:13	13	,
ARGUMENT	825:15	825:15	13	ifdfmt
FIELD	825:15	825:15	14	ifdfmt
LEAF_NODE	825:15	825:15	15	ifdfmt
LEAF_NODE	825:21	825:21	13	,
ARGUMENT	825:23	825:23	13	sep
FIELD	825:23	825:23	14	sep
LEAF_NODE	825:23	825:23	15	sep
LEAF_NODE	825:26	825:26	13	,
ARGUMENT	825:28	825:44	13	( unsigned long ) * lp ++
LEAF_NODE	825:28	825:28	14	(
TYPE_NAME	825:29	825:38	14	unsigned long
LEAF_NODE	825:29	825:29	15	unsigned
LEAF_NODE	825:38	825:38	15	long
LEAF_NODE	825:42	825:42	14	)
UNARY_EXPR	825:44	825:45	14	* lp ++
UNARY_OPERATOR	825:44	825:44	15	*
LEAF_NODE	825:44	825:44	16	*
FIELD	825:45	825:47	15	lp ++
LEAF_NODE	825:45	825:45	16	lp
LEAF_NODE	825:47	825:47	16	++
LEAF_NODE	825:49	825:49	13	)
LEAF_NODE	825:50	825:50	11	;
EXPR_STATEMENT	826:3	826:12	10	sep = " " ;
EXPR	826:3	826:3	11	sep = " "
ASSIGN	826:3	826:9	12	sep = " "
LVAL	826:3	826:3	13	sep
FIELD	826:3	826:3	14	sep
LEAF_NODE	826:3	826:3	15	sep
ASSIGN_OP	826:7	826:7	13	=
LEAF_NODE	826:7	826:7	14	=
RVAL	826:9	826:9	13	" "
FIELD	826:9	826:9	14	" "
LEAF_NODE	826:9	826:9	15	" "
LEAF_NODE	826:12	826:12	11	;
LEAF_NODE	827:2	827:2	9	}
JUMP_STATEMENT	828:2	828:7	7	break DESTINATION ;
KEYWORD	828:2	828:2	8	break
LEAF_NODE	828:2	828:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	828:7	828:7	8	;
LEAF_NODE	829:1	829:1	6	}
LABEL	830:1	830:15	6	case TIFF_IFD8 :
LEAF_NODE	830:1	830:1	7	case
LEAF_NODE	830:6	830:6	7	TIFF_IFD8
LEAF_NODE	830:15	830:15	7	:
LEAF_NODE	830:17	830:17	6	{
STATEMENTS	831:2	840:2	6	
SIMPLE_DECL	831:2	831:29	7	uint64 * llp ; llp = ( uint64 * ) data ;
VAR_DECL	831:2	831:10	8	uint64 * llp ; llp = ( uint64 * ) data
TYPE	831:2	831:9	9	uint64 *
TYPE_NAME	831:2	831:2	10	uint64
LEAF_NODE	831:2	831:2	11	uint64
POINTER	831:9	831:9	10	*
LEAF_NODE	831:9	831:9	11	*
NAME	831:10	831:10	9	llp
LEAF_NODE	831:10	831:10	10	llp
LEAF_NODE	0:0	0:0	9	;
INIT	831:10	831:10	9	llp = ( uint64 * ) data
ASSIGN	831:10	831:16	10	llp = ( uint64 * ) data
LVAL	831:10	831:10	11	llp
NAME	831:10	831:10	12	llp
LEAF_NODE	831:10	831:10	13	llp
ASSIGN_OP	831:14	831:14	11	=
LEAF_NODE	831:14	831:14	12	=
RVAL	831:16	831:25	11	( uint64 * ) data
LEAF_NODE	831:16	831:16	12	(
TYPE_NAME	831:17	831:17	12	uint64
LEAF_NODE	831:17	831:17	13	uint64
LEAF_NODE	831:23	831:23	12	*
LEAF_NODE	831:24	831:24	12	)
FIELD	831:25	831:25	12	data
LEAF_NODE	831:25	831:25	13	data
LEAF_NODE	831:29	831:29	8	;
ITERATION	832:2	832:22	7	
KEYWORD	832:2	832:2	8	while
LEAF_NODE	832:2	832:2	9	while
LEAF_NODE	832:8	832:8	8	(
CONDITION	832:9	832:9	8	count -- > 0
EXPR	832:9	832:19	9	count -- > 0
FIELD	832:9	832:14	10	count --
LEAF_NODE	832:9	832:9	11	count
LEAF_NODE	832:14	832:14	11	--
REL_OPERATOR	832:17	832:17	10	>
LEAF_NODE	832:17	832:17	11	>
FIELD	832:19	832:19	10	0
LEAF_NODE	832:19	832:19	11	0
LEAF_NODE	832:20	832:20	8	)
STATEMENTS	832:22	839:2	8	
LEAF_NODE	832:22	832:22	9	{
STATEMENTS	834:3	838:3	9	
EXPR_STATEMENT	834:3	834:55	10	fprintf ( fd , ifd8fmt , sep , ( unsigned __int64 ) * llp ++ ) ;
EXPR	834:3	834:3	11	fprintf ( fd , ifd8fmt , sep , ( unsigned __int64 ) * llp ++ )
FUNCTION_CALL	834:3	834:54	12	fprintf ( fd , ifd8fmt , sep , ( unsigned __int64 ) * llp ++ )
CALLEE	834:3	834:3	13	fprintf
LEAF_NODE	834:3	834:3	14	fprintf
LEAF_NODE	834:10	834:10	13	(
ARGUMENT	834:11	834:11	13	fd
FIELD	834:11	834:11	14	fd
LEAF_NODE	834:11	834:11	15	fd
LEAF_NODE	834:13	834:13	13	,
ARGUMENT	834:15	834:15	13	ifd8fmt
FIELD	834:15	834:15	14	ifd8fmt
LEAF_NODE	834:15	834:15	15	ifd8fmt
LEAF_NODE	834:22	834:22	13	,
ARGUMENT	834:24	834:24	13	sep
FIELD	834:24	834:24	14	sep
LEAF_NODE	834:24	834:24	15	sep
LEAF_NODE	834:27	834:27	13	,
ARGUMENT	834:29	834:48	13	( unsigned __int64 ) * llp ++
LEAF_NODE	834:29	834:29	14	(
TYPE_NAME	834:30	834:39	14	unsigned __int64
LEAF_NODE	834:30	834:30	15	unsigned
LEAF_NODE	834:39	834:39	15	__int64
LEAF_NODE	834:46	834:46	14	)
UNARY_EXPR	834:48	834:49	14	* llp ++
UNARY_OPERATOR	834:48	834:48	15	*
LEAF_NODE	834:48	834:48	16	*
FIELD	834:49	834:52	15	llp ++
LEAF_NODE	834:49	834:49	16	llp
LEAF_NODE	834:52	834:52	16	++
LEAF_NODE	834:54	834:54	13	)
LEAF_NODE	834:55	834:55	11	;
LEAF_NODE	836:3	836:3	10	fprintf
LEAF_NODE	836:10	836:10	10	(
LEAF_NODE	836:11	836:11	10	fd
LEAF_NODE	836:13	836:13	10	,
LEAF_NODE	836:15	836:15	10	ifd8fmt
LEAF_NODE	836:22	836:22	10	,
LEAF_NODE	836:24	836:24	10	sep
LEAF_NODE	836:27	836:27	10	,
LEAF_NODE	836:29	836:29	10	(
LEAF_NODE	836:30	836:30	10	unsigned
LEAF_NODE	836:39	836:39	10	long
LEAF_NODE	836:44	836:44	10	long
LEAF_NODE	836:48	836:48	10	)
LEAF_NODE	836:50	836:50	10	*
LEAF_NODE	836:51	836:51	10	llp
LEAF_NODE	836:54	836:54	10	++
LEAF_NODE	836:56	836:56	10	)
LEAF_NODE	836:57	836:57	10	;
EXPR_STATEMENT	838:3	838:12	10	sep = " " ;
EXPR	838:3	838:3	11	sep = " "
ASSIGN	838:3	838:9	12	sep = " "
LVAL	838:3	838:3	13	sep
FIELD	838:3	838:3	14	sep
LEAF_NODE	838:3	838:3	15	sep
ASSIGN_OP	838:7	838:7	13	=
LEAF_NODE	838:7	838:7	14	=
RVAL	838:9	838:9	13	" "
FIELD	838:9	838:9	14	" "
LEAF_NODE	838:9	838:9	15	" "
LEAF_NODE	838:12	838:12	11	;
LEAF_NODE	839:2	839:2	9	}
JUMP_STATEMENT	840:2	840:7	7	break DESTINATION ;
KEYWORD	840:2	840:2	8	break
LEAF_NODE	840:2	840:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	840:7	840:7	8	;
LEAF_NODE	841:1	841:1	6	}
LEAF_NODE	842:1	842:1	5	}
LEAF_NODE	843:0	843:0	2	}
FUNCTION_DEF	845:0	849:0	1	
RETURN_TYPE	845:0	845:7	2	static void
LEAF_NODE	845:0	845:0	3	static
TYPE_NAME	845:7	845:7	3	void
LEAF_NODE	845:7	845:7	4	void
FUNCTION_NAME	846:0	846:0	2	ReadError
LEAF_NODE	846:0	846:0	3	ReadError
PARAMETER_LIST	846:9	846:20	2	( char * what )
LEAF_NODE	846:9	846:9	3	(
PARAMETER_DECL	846:10	846:16	3	char * what
TYPE	846:10	846:14	4	char *
TYPE_NAME	846:10	846:10	5	char
LEAF_NODE	846:10	846:10	6	char
POINTER	846:14	846:14	5	*
LEAF_NODE	846:14	846:14	6	*
NAME	846:16	846:16	4	what
LEAF_NODE	846:16	846:16	5	what
LEAF_NODE	846:20	846:20	3	)
LEAF_NODE	847:0	847:0	2	{
STATEMENTS	848:1	848:1	2	
EXPR_STATEMENT	848:1	848:38	3	Fatal ( "Error while reading %s" , what ) ;
EXPR	848:1	848:1	4	Fatal ( "Error while reading %s" , what )
FUNCTION_CALL	848:1	848:37	5	Fatal ( "Error while reading %s" , what )
CALLEE	848:1	848:1	6	Fatal
LEAF_NODE	848:1	848:1	7	Fatal
LEAF_NODE	848:6	848:6	6	(
ARGUMENT	848:7	848:7	6	"Error while reading %s"
FIELD	848:7	848:7	7	"Error while reading %s"
LEAF_NODE	848:7	848:7	8	"Error while reading %s"
LEAF_NODE	848:31	848:31	6	,
ARGUMENT	848:33	848:33	6	what
FIELD	848:33	848:33	7	what
LEAF_NODE	848:33	848:33	8	what
LEAF_NODE	848:37	848:37	6	)
LEAF_NODE	848:38	848:38	4	;
LEAF_NODE	849:0	849:0	2	}
FUNCTION_DEF	853:0	859:0	1	
RETURN_TYPE	853:0	853:7	2	static void
LEAF_NODE	853:0	853:0	3	static
TYPE_NAME	853:7	853:7	3	void
LEAF_NODE	853:7	853:7	4	void
FUNCTION_NAME	854:0	854:0	2	vError
LEAF_NODE	854:0	854:0	3	vError
PARAMETER_LIST	854:6	854:44	2	( FILE * fd , const char * fmt , va_list ap )
LEAF_NODE	854:6	854:6	3	(
PARAMETER_DECL	854:7	854:13	3	FILE * fd
TYPE	854:7	854:11	4	FILE *
TYPE_NAME	854:7	854:7	5	FILE
LEAF_NODE	854:7	854:7	6	FILE
POINTER	854:11	854:11	5	*
LEAF_NODE	854:11	854:11	6	*
NAME	854:13	854:13	4	fd
LEAF_NODE	854:13	854:13	5	fd
LEAF_NODE	854:15	854:15	3	,
PARAMETER_DECL	854:17	854:29	3	const char * fmt
TYPE	854:17	854:27	4	const char *
TYPE_NAME	854:17	854:23	5	const char
LEAF_NODE	854:17	854:17	6	const
LEAF_NODE	854:23	854:23	6	char
POINTER	854:27	854:27	5	*
LEAF_NODE	854:27	854:27	6	*
NAME	854:29	854:29	4	fmt
LEAF_NODE	854:29	854:29	5	fmt
LEAF_NODE	854:32	854:32	3	,
PARAMETER_DECL	854:34	854:42	3	va_list ap
TYPE	854:34	854:34	4	va_list
TYPE_NAME	854:34	854:34	5	va_list
LEAF_NODE	854:34	854:34	6	va_list
NAME	854:42	854:42	4	ap
LEAF_NODE	854:42	854:42	5	ap
LEAF_NODE	854:44	854:44	3	)
LEAF_NODE	855:0	855:0	2	{
STATEMENTS	856:1	858:1	2	
EXPR_STATEMENT	856:1	856:29	3	fprintf ( fd , "%s: " , curfile ) ;
EXPR	856:1	856:1	4	fprintf ( fd , "%s: " , curfile )
FUNCTION_CALL	856:1	856:28	5	fprintf ( fd , "%s: " , curfile )
CALLEE	856:1	856:1	6	fprintf
LEAF_NODE	856:1	856:1	7	fprintf
LEAF_NODE	856:8	856:8	6	(
ARGUMENT	856:9	856:9	6	fd
FIELD	856:9	856:9	7	fd
LEAF_NODE	856:9	856:9	8	fd
LEAF_NODE	856:11	856:11	6	,
ARGUMENT	856:13	856:13	6	"%s: "
FIELD	856:13	856:13	7	"%s: "
LEAF_NODE	856:13	856:13	8	"%s: "
LEAF_NODE	856:19	856:19	6	,
ARGUMENT	856:21	856:21	6	curfile
FIELD	856:21	856:21	7	curfile
LEAF_NODE	856:21	856:21	8	curfile
LEAF_NODE	856:28	856:28	6	)
LEAF_NODE	856:29	856:29	4	;
EXPR_STATEMENT	857:1	857:22	3	vfprintf ( fd , fmt , ap ) ;
EXPR	857:1	857:1	4	vfprintf ( fd , fmt , ap )
FUNCTION_CALL	857:1	857:21	5	vfprintf ( fd , fmt , ap )
CALLEE	857:1	857:1	6	vfprintf
LEAF_NODE	857:1	857:1	7	vfprintf
LEAF_NODE	857:9	857:9	6	(
ARGUMENT	857:10	857:10	6	fd
FIELD	857:10	857:10	7	fd
LEAF_NODE	857:10	857:10	8	fd
LEAF_NODE	857:12	857:12	6	,
ARGUMENT	857:14	857:14	6	fmt
FIELD	857:14	857:14	7	fmt
LEAF_NODE	857:14	857:14	8	fmt
LEAF_NODE	857:17	857:17	6	,
ARGUMENT	857:19	857:19	6	ap
FIELD	857:19	857:19	7	ap
LEAF_NODE	857:19	857:19	8	ap
LEAF_NODE	857:21	857:21	6	)
LEAF_NODE	857:22	857:22	4	;
EXPR_STATEMENT	858:1	858:19	3	fprintf ( fd , ".\n" ) ;
EXPR	858:1	858:1	4	fprintf ( fd , ".\n" )
FUNCTION_CALL	858:1	858:18	5	fprintf ( fd , ".\n" )
CALLEE	858:1	858:1	6	fprintf
LEAF_NODE	858:1	858:1	7	fprintf
LEAF_NODE	858:8	858:8	6	(
ARGUMENT	858:9	858:9	6	fd
FIELD	858:9	858:9	7	fd
LEAF_NODE	858:9	858:9	8	fd
LEAF_NODE	858:11	858:11	6	,
ARGUMENT	858:13	858:13	6	".\n"
FIELD	858:13	858:13	7	".\n"
LEAF_NODE	858:13	858:13	8	".\n"
LEAF_NODE	858:18	858:18	6	)
LEAF_NODE	858:19	858:19	4	;
LEAF_NODE	859:0	859:0	2	}
SIMPLE_DECL	864:1	864:11	1	va_list ap ;
VAR_DECL	864:1	864:9	2	va_list ap
TYPE	864:1	864:1	3	va_list
TYPE_NAME	864:1	864:1	4	va_list
LEAF_NODE	864:1	864:1	5	va_list
NAME	864:9	864:9	3	ap
LEAF_NODE	864:9	864:9	4	ap
LEAF_NODE	864:11	864:11	2	;
SIMPLE_DECL	873:1	873:11	1	va_list ap ;
VAR_DECL	873:1	873:9	2	va_list ap
TYPE	873:1	873:1	3	va_list
TYPE_NAME	873:1	873:1	4	va_list
LEAF_NODE	873:1	873:1	5	va_list
NAME	873:9	873:9	3	ap
LEAF_NODE	873:9	873:9	4	ap
LEAF_NODE	873:11	873:11	2	;
