SOURCE_FILE	59:0	330:0	0	
FUNCTION_DEF	59:0	218:0	1	
RETURN_TYPE	59:0	59:0	2	HDIB
TYPE_NAME	59:0	59:0	3	HDIB
LEAF_NODE	59:0	59:0	4	HDIB
FUNCTION_NAME	59:5	59:5	2	LoadTIFFinDIB
LEAF_NODE	59:5	59:5	3	LoadTIFFinDIB
PARAMETER_LIST	59:18	59:35	2	( LPSTR lpFileName )
LEAF_NODE	59:18	59:18	3	(
PARAMETER_DECL	59:19	59:25	3	LPSTR lpFileName
TYPE	59:19	59:19	4	LPSTR
TYPE_NAME	59:19	59:19	5	LPSTR
LEAF_NODE	59:19	59:19	6	LPSTR
NAME	59:25	59:25	4	lpFileName
LEAF_NODE	59:25	59:25	5	lpFileName
LEAF_NODE	59:35	59:35	3	)
LEAF_NODE	60:0	60:0	2	{
STATEMENTS	61:4	215:7	2	
SIMPLE_DECL	61:4	61:22	3	TIFF * tif ;
VAR_DECL	61:4	61:19	4	TIFF * tif
TYPE	61:4	61:18	5	TIFF *
TYPE_NAME	61:4	61:4	6	TIFF
LEAF_NODE	61:4	61:4	7	TIFF
POINTER	61:18	61:18	6	*
LEAF_NODE	61:18	61:18	7	*
NAME	61:19	61:19	5	tif
LEAF_NODE	61:19	61:19	6	tif
LEAF_NODE	61:22	61:22	4	;
SIMPLE_DECL	62:4	62:29	3	unsigned long imageLength ;
VAR_DECL	62:4	62:18	4	unsigned long imageLength
TYPE	62:4	62:4	5	unsigned long
TYPE_NAME	62:4	62:13	6	unsigned long
LEAF_NODE	62:4	62:4	7	unsigned
LEAF_NODE	62:13	62:13	7	long
NAME	62:18	62:18	5	imageLength
LEAF_NODE	62:18	62:18	6	imageLength
LEAF_NODE	62:29	62:29	4	;
SIMPLE_DECL	63:4	63:28	3	unsigned long imageWidth ;
VAR_DECL	63:4	63:18	4	unsigned long imageWidth
TYPE	63:4	63:4	5	unsigned long
TYPE_NAME	63:4	63:13	6	unsigned long
LEAF_NODE	63:4	63:4	7	unsigned
LEAF_NODE	63:13	63:13	7	long
NAME	63:18	63:18	5	imageWidth
LEAF_NODE	63:18	63:18	6	imageWidth
LEAF_NODE	63:28	63:28	4	;
SIMPLE_DECL	64:4	64:31	3	unsigned int BitsPerSample ;
VAR_DECL	64:4	64:18	4	unsigned int BitsPerSample
TYPE	64:4	64:4	5	unsigned int
TYPE_NAME	64:4	64:13	6	unsigned int
LEAF_NODE	64:4	64:4	7	unsigned
LEAF_NODE	64:13	64:13	7	int
NAME	64:18	64:18	5	BitsPerSample
LEAF_NODE	64:18	64:18	6	BitsPerSample
LEAF_NODE	64:31	64:31	4	;
SIMPLE_DECL	65:4	65:26	3	unsigned long LineSize ;
VAR_DECL	65:4	65:18	4	unsigned long LineSize
TYPE	65:4	65:4	5	unsigned long
TYPE_NAME	65:4	65:13	6	unsigned long
LEAF_NODE	65:4	65:4	7	unsigned
LEAF_NODE	65:13	65:13	7	long
NAME	65:18	65:18	5	LineSize
LEAF_NODE	65:18	65:18	6	LineSize
LEAF_NODE	65:26	65:26	4	;
SIMPLE_DECL	66:4	66:32	3	unsigned int SamplePerPixel ;
VAR_DECL	66:4	66:18	4	unsigned int SamplePerPixel
TYPE	66:4	66:4	5	unsigned int
TYPE_NAME	66:4	66:13	6	unsigned int
LEAF_NODE	66:4	66:4	7	unsigned
LEAF_NODE	66:13	66:13	7	int
NAME	66:18	66:18	5	SamplePerPixel
LEAF_NODE	66:18	66:18	6	SamplePerPixel
LEAF_NODE	66:32	66:32	4	;
SIMPLE_DECL	67:4	67:30	3	unsigned long RowsPerStrip ;
VAR_DECL	67:4	67:18	4	unsigned long RowsPerStrip
TYPE	67:4	67:4	5	unsigned long
TYPE_NAME	67:4	67:13	6	unsigned long
LEAF_NODE	67:4	67:4	7	unsigned
LEAF_NODE	67:13	67:13	7	long
NAME	67:18	67:18	5	RowsPerStrip
LEAF_NODE	67:18	67:18	6	RowsPerStrip
LEAF_NODE	67:30	67:30	4	;
SIMPLE_DECL	68:4	68:43	3	int PhotometricInterpretation ;
VAR_DECL	68:4	68:18	4	int PhotometricInterpretation
TYPE	68:4	68:4	5	int
TYPE_NAME	68:4	68:4	6	int
LEAF_NODE	68:4	68:4	7	int
NAME	68:18	68:18	5	PhotometricInterpretation
LEAF_NODE	68:18	68:18	6	PhotometricInterpretation
LEAF_NODE	68:43	68:43	4	;
SIMPLE_DECL	69:4	69:22	3	long nrow ;
VAR_DECL	69:4	69:18	4	long nrow
TYPE	69:4	69:4	5	long
TYPE_NAME	69:4	69:4	6	long
LEAF_NODE	69:4	69:4	7	long
NAME	69:18	69:18	5	nrow
LEAF_NODE	69:18	69:18	6	nrow
LEAF_NODE	69:22	69:22	4	;
SIMPLE_DECL	70:1	70:18	3	unsigned long row ;
VAR_DECL	70:1	70:15	4	unsigned long row
TYPE	70:1	70:1	5	unsigned long
TYPE_NAME	70:1	70:10	6	unsigned long
LEAF_NODE	70:1	70:1	7	unsigned
LEAF_NODE	70:10	70:10	7	long
NAME	70:15	70:15	5	row
LEAF_NODE	70:15	70:15	6	row
LEAF_NODE	70:18	70:18	4	;
SIMPLE_DECL	71:4	71:22	3	char * buf ;
VAR_DECL	71:4	71:19	4	char * buf
TYPE	71:4	71:18	5	char *
TYPE_NAME	71:4	71:4	6	char
LEAF_NODE	71:4	71:4	7	char
POINTER	71:18	71:18	6	*
LEAF_NODE	71:18	71:18	7	*
NAME	71:19	71:19	5	buf
LEAF_NODE	71:19	71:19	6	buf
LEAF_NODE	71:22	71:22	4	;
SIMPLE_DECL	72:4	72:28	3	LPBITMAPINFOHEADER lpDIB ;
VAR_DECL	72:4	72:23	4	LPBITMAPINFOHEADER lpDIB
TYPE	72:4	72:4	5	LPBITMAPINFOHEADER
TYPE_NAME	72:4	72:4	6	LPBITMAPINFOHEADER
LEAF_NODE	72:4	72:4	7	LPBITMAPINFOHEADER
NAME	72:23	72:23	5	lpDIB
LEAF_NODE	72:23	72:23	6	lpDIB
LEAF_NODE	72:28	72:28	4	;
SIMPLE_DECL	73:4	73:22	3	HDIB hDIB ;
VAR_DECL	73:4	73:18	4	HDIB hDIB
TYPE	73:4	73:4	5	HDIB
TYPE_NAME	73:4	73:4	6	HDIB
LEAF_NODE	73:4	73:4	7	HDIB
NAME	73:18	73:18	5	hDIB
LEAF_NODE	73:18	73:18	6	hDIB
LEAF_NODE	73:22	73:22	4	;
SIMPLE_DECL	74:4	74:25	3	char * lpBits ;
VAR_DECL	74:4	74:19	4	char * lpBits
TYPE	74:4	74:18	5	char *
TYPE_NAME	74:4	74:4	6	char
LEAF_NODE	74:4	74:4	7	char
POINTER	74:18	74:18	6	*
LEAF_NODE	74:18	74:18	7	*
NAME	74:19	74:19	5	lpBits
LEAF_NODE	74:19	74:19	6	lpBits
LEAF_NODE	74:25	74:25	4	;
SIMPLE_DECL	75:4	75:24	3	HGLOBAL hStrip ;
VAR_DECL	75:4	75:18	4	HGLOBAL hStrip
TYPE	75:4	75:4	5	HGLOBAL
TYPE_NAME	75:4	75:4	6	HGLOBAL
LEAF_NODE	75:4	75:4	7	HGLOBAL
NAME	75:18	75:18	5	hStrip
LEAF_NODE	75:18	75:18	6	hStrip
LEAF_NODE	75:24	75:24	4	;
SIMPLE_DECL	76:4	76:21	3	int i , int l ;
INIT_DECL_LIST	76:4	76:4	4	int i , int l
VAR_DECL	76:4	76:18	5	int i
TYPE	76:4	76:4	6	int
TYPE_NAME	76:4	76:4	7	int
LEAF_NODE	76:4	76:4	8	int
NAME	76:18	76:18	6	i
LEAF_NODE	76:18	76:18	7	i
LEAF_NODE	76:19	76:19	5	,
VAR_DECL	76:4	76:20	5	int l
TYPE	76:4	76:4	6	int
TYPE_NAME	76:4	76:4	7	int
LEAF_NODE	76:4	76:4	8	int
NAME	76:20	76:20	6	l
LEAF_NODE	76:20	76:20	7	l
LEAF_NODE	76:21	76:21	4	;
SIMPLE_DECL	77:4	77:23	3	int Align ;
VAR_DECL	77:4	77:18	4	int Align
TYPE	77:4	77:4	5	int
TYPE_NAME	77:4	77:4	6	int
LEAF_NODE	77:4	77:4	7	int
NAME	77:18	77:18	5	Align
LEAF_NODE	77:18	77:18	6	Align
LEAF_NODE	77:23	77:23	4	;
EXPR_STATEMENT	79:4	79:35	3	tif = TIFFOpen ( lpFileName , "r" ) ;
EXPR	79:4	79:4	4	tif = TIFFOpen ( lpFileName , "r" )
ASSIGN	79:4	79:10	5	tif = TIFFOpen ( lpFileName , "r" )
LVAL	79:4	79:4	6	tif
FIELD	79:4	79:4	7	tif
LEAF_NODE	79:4	79:4	8	tif
ASSIGN_OP	79:8	79:8	6	=
LEAF_NODE	79:8	79:8	7	=
RVAL	79:10	79:10	6	TIFFOpen ( lpFileName , "r" )
FUNCTION_CALL	79:10	79:34	7	TIFFOpen ( lpFileName , "r" )
CALLEE	79:10	79:10	8	TIFFOpen
LEAF_NODE	79:10	79:10	9	TIFFOpen
LEAF_NODE	79:18	79:18	8	(
ARGUMENT	79:19	79:19	8	lpFileName
FIELD	79:19	79:19	9	lpFileName
LEAF_NODE	79:19	79:19	10	lpFileName
LEAF_NODE	79:29	79:29	8	,
ARGUMENT	79:31	79:31	8	"r"
FIELD	79:31	79:31	9	"r"
LEAF_NODE	79:31	79:31	10	"r"
LEAF_NODE	79:34	79:34	8	)
LEAF_NODE	79:35	79:35	4	;
SELECTION	81:4	82:8	3	
KEYWORD	81:4	81:4	4	if
LEAF_NODE	81:4	81:4	5	if
LEAF_NODE	81:7	81:7	4	(
CONDITION	81:8	81:8	4	! tif
EXPR	81:8	81:8	5	! tif
UNARY_EXPR	81:8	81:9	6	! tif
UNARY_OPERATOR	81:8	81:8	7	!
LEAF_NODE	81:8	81:8	8	!
FIELD	81:9	81:9	7	tif
LEAF_NODE	81:9	81:9	8	tif
LEAF_NODE	81:12	81:12	4	)
STATEMENTS	82:8	82:8	4	
JUMP_STATEMENT	82:8	82:26	5	goto TiffOpenError ;
KEYWORD	82:8	82:8	6	goto
LEAF_NODE	82:8	82:8	7	goto
DESTINATION	82:13	82:13	6	TiffOpenError
LEAF_NODE	82:13	82:13	7	TiffOpenError
LEAF_NODE	82:26	82:26	6	;
EXPR_STATEMENT	84:4	84:54	3	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & imageWidth ) ;
EXPR	84:4	84:4	4	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & imageWidth )
FUNCTION_CALL	84:4	84:53	5	TIFFGetField ( tif , TIFFTAG_IMAGEWIDTH , & imageWidth )
CALLEE	84:4	84:4	6	TIFFGetField
LEAF_NODE	84:4	84:4	7	TIFFGetField
LEAF_NODE	84:16	84:16	6	(
ARGUMENT	84:17	84:17	6	tif
FIELD	84:17	84:17	7	tif
LEAF_NODE	84:17	84:17	8	tif
LEAF_NODE	84:20	84:20	6	,
ARGUMENT	84:22	84:22	6	TIFFTAG_IMAGEWIDTH
FIELD	84:22	84:22	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	84:22	84:22	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	84:40	84:40	6	,
ARGUMENT	84:42	84:42	6	& imageWidth
UNARY_EXPR	84:42	84:43	7	& imageWidth
UNARY_OPERATOR	84:42	84:42	8	&
LEAF_NODE	84:42	84:42	9	&
FIELD	84:43	84:43	8	imageWidth
LEAF_NODE	84:43	84:43	9	imageWidth
LEAF_NODE	84:53	84:53	6	)
LEAF_NODE	84:54	84:54	4	;
EXPR_STATEMENT	85:4	85:56	3	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & imageLength ) ;
EXPR	85:4	85:4	4	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & imageLength )
FUNCTION_CALL	85:4	85:55	5	TIFFGetField ( tif , TIFFTAG_IMAGELENGTH , & imageLength )
CALLEE	85:4	85:4	6	TIFFGetField
LEAF_NODE	85:4	85:4	7	TIFFGetField
LEAF_NODE	85:16	85:16	6	(
ARGUMENT	85:17	85:17	6	tif
FIELD	85:17	85:17	7	tif
LEAF_NODE	85:17	85:17	8	tif
LEAF_NODE	85:20	85:20	6	,
ARGUMENT	85:22	85:22	6	TIFFTAG_IMAGELENGTH
FIELD	85:22	85:22	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	85:22	85:22	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	85:41	85:41	6	,
ARGUMENT	85:43	85:43	6	& imageLength
UNARY_EXPR	85:43	85:44	7	& imageLength
UNARY_OPERATOR	85:43	85:43	8	&
LEAF_NODE	85:43	85:43	9	&
FIELD	85:44	85:44	8	imageLength
LEAF_NODE	85:44	85:44	9	imageLength
LEAF_NODE	85:55	85:55	6	)
LEAF_NODE	85:56	85:56	4	;
EXPR_STATEMENT	86:4	86:60	3	TIFFGetField ( tif , TIFFTAG_BITSPERSAMPLE , & BitsPerSample ) ;
EXPR	86:4	86:4	4	TIFFGetField ( tif , TIFFTAG_BITSPERSAMPLE , & BitsPerSample )
FUNCTION_CALL	86:4	86:59	5	TIFFGetField ( tif , TIFFTAG_BITSPERSAMPLE , & BitsPerSample )
CALLEE	86:4	86:4	6	TIFFGetField
LEAF_NODE	86:4	86:4	7	TIFFGetField
LEAF_NODE	86:16	86:16	6	(
ARGUMENT	86:17	86:17	6	tif
FIELD	86:17	86:17	7	tif
LEAF_NODE	86:17	86:17	8	tif
LEAF_NODE	86:20	86:20	6	,
ARGUMENT	86:22	86:22	6	TIFFTAG_BITSPERSAMPLE
FIELD	86:22	86:22	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	86:22	86:22	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	86:43	86:43	6	,
ARGUMENT	86:45	86:45	6	& BitsPerSample
UNARY_EXPR	86:45	86:46	7	& BitsPerSample
UNARY_OPERATOR	86:45	86:45	8	&
LEAF_NODE	86:45	86:45	9	&
FIELD	86:46	86:46	8	BitsPerSample
LEAF_NODE	86:46	86:46	9	BitsPerSample
LEAF_NODE	86:59	86:59	6	)
LEAF_NODE	86:60	86:60	4	;
EXPR_STATEMENT	87:4	87:58	3	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & RowsPerStrip ) ;
EXPR	87:4	87:4	4	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & RowsPerStrip )
FUNCTION_CALL	87:4	87:57	5	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & RowsPerStrip )
CALLEE	87:4	87:4	6	TIFFGetField
LEAF_NODE	87:4	87:4	7	TIFFGetField
LEAF_NODE	87:16	87:16	6	(
ARGUMENT	87:17	87:17	6	tif
FIELD	87:17	87:17	7	tif
LEAF_NODE	87:17	87:17	8	tif
LEAF_NODE	87:20	87:20	6	,
ARGUMENT	87:22	87:22	6	TIFFTAG_ROWSPERSTRIP
FIELD	87:22	87:22	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	87:22	87:22	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	87:42	87:42	6	,
ARGUMENT	87:44	87:44	6	& RowsPerStrip
UNARY_EXPR	87:44	87:45	7	& RowsPerStrip
UNARY_OPERATOR	87:44	87:44	8	&
LEAF_NODE	87:44	87:44	9	&
FIELD	87:45	87:45	8	RowsPerStrip
LEAF_NODE	87:45	87:45	9	RowsPerStrip
LEAF_NODE	87:57	87:57	6	)
LEAF_NODE	87:58	87:58	4	;
EXPR_STATEMENT	88:4	88:58	3	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & RowsPerStrip ) ;
EXPR	88:4	88:4	4	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & RowsPerStrip )
FUNCTION_CALL	88:4	88:57	5	TIFFGetField ( tif , TIFFTAG_ROWSPERSTRIP , & RowsPerStrip )
CALLEE	88:4	88:4	6	TIFFGetField
LEAF_NODE	88:4	88:4	7	TIFFGetField
LEAF_NODE	88:16	88:16	6	(
ARGUMENT	88:17	88:17	6	tif
FIELD	88:17	88:17	7	tif
LEAF_NODE	88:17	88:17	8	tif
LEAF_NODE	88:20	88:20	6	,
ARGUMENT	88:22	88:22	6	TIFFTAG_ROWSPERSTRIP
FIELD	88:22	88:22	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	88:22	88:22	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	88:42	88:42	6	,
ARGUMENT	88:44	88:44	6	& RowsPerStrip
UNARY_EXPR	88:44	88:45	7	& RowsPerStrip
UNARY_OPERATOR	88:44	88:44	8	&
LEAF_NODE	88:44	88:44	9	&
FIELD	88:45	88:45	8	RowsPerStrip
LEAF_NODE	88:45	88:45	9	RowsPerStrip
LEAF_NODE	88:57	88:57	6	)
LEAF_NODE	88:58	88:58	4	;
EXPR_STATEMENT	89:4	89:70	3	TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & PhotometricInterpretation ) ;
EXPR	89:4	89:4	4	TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & PhotometricInterpretation )
FUNCTION_CALL	89:4	89:69	5	TIFFGetField ( tif , TIFFTAG_PHOTOMETRIC , & PhotometricInterpretation )
CALLEE	89:4	89:4	6	TIFFGetField
LEAF_NODE	89:4	89:4	7	TIFFGetField
LEAF_NODE	89:16	89:16	6	(
ARGUMENT	89:17	89:17	6	tif
FIELD	89:17	89:17	7	tif
LEAF_NODE	89:17	89:17	8	tif
LEAF_NODE	89:20	89:20	6	,
ARGUMENT	89:22	89:22	6	TIFFTAG_PHOTOMETRIC
FIELD	89:22	89:22	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	89:22	89:22	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	89:41	89:41	6	,
ARGUMENT	89:43	89:43	6	& PhotometricInterpretation
UNARY_EXPR	89:43	89:44	7	& PhotometricInterpretation
UNARY_OPERATOR	89:43	89:43	8	&
LEAF_NODE	89:43	89:43	9	&
FIELD	89:44	89:44	8	PhotometricInterpretation
LEAF_NODE	89:44	89:44	9	PhotometricInterpretation
LEAF_NODE	89:69	89:69	6	)
LEAF_NODE	89:70	89:70	4	;
EXPR_STATEMENT	91:4	91:36	3	LineSize = TIFFScanlineSize ( tif ) ;
EXPR	91:4	91:4	4	LineSize = TIFFScanlineSize ( tif )
ASSIGN	91:4	91:15	5	LineSize = TIFFScanlineSize ( tif )
LVAL	91:4	91:4	6	LineSize
FIELD	91:4	91:4	7	LineSize
LEAF_NODE	91:4	91:4	8	LineSize
ASSIGN_OP	91:13	91:13	6	=
LEAF_NODE	91:13	91:13	7	=
RVAL	91:15	91:15	6	TIFFScanlineSize ( tif )
FUNCTION_CALL	91:15	91:35	7	TIFFScanlineSize ( tif )
CALLEE	91:15	91:15	8	TIFFScanlineSize
LEAF_NODE	91:15	91:15	9	TIFFScanlineSize
LEAF_NODE	91:31	91:31	8	(
ARGUMENT	91:32	91:32	8	tif
FIELD	91:32	91:32	9	tif
LEAF_NODE	91:32	91:32	10	tif
LEAF_NODE	91:35	91:35	8	)
LEAF_NODE	91:36	91:36	4	;
EXPR_STATEMENT	93:4	93:48	3	SamplePerPixel = ( int ) ( LineSize / imageWidth ) ;
EXPR	93:4	93:4	4	SamplePerPixel = ( int ) ( LineSize / imageWidth )
ASSIGN	93:4	93:21	5	SamplePerPixel = ( int ) ( LineSize / imageWidth )
LVAL	93:4	93:4	6	SamplePerPixel
FIELD	93:4	93:4	7	SamplePerPixel
LEAF_NODE	93:4	93:4	8	SamplePerPixel
ASSIGN_OP	93:19	93:19	6	=
LEAF_NODE	93:19	93:19	7	=
RVAL	93:21	93:47	6	( int ) ( LineSize / imageWidth )
LEAF_NODE	93:21	93:21	7	(
TYPE_NAME	93:22	93:22	7	int
LEAF_NODE	93:22	93:22	8	int
LEAF_NODE	93:25	93:25	7	)
LEAF_NODE	93:27	93:27	7	(
FIELD	93:28	93:28	7	LineSize
LEAF_NODE	93:28	93:28	8	LineSize
LEAF_NODE	93:36	93:36	7	/
FIELD	93:37	93:37	7	imageWidth
LEAF_NODE	93:37	93:37	8	imageWidth
LEAF_NODE	93:47	93:47	7	)
LEAF_NODE	93:48	93:48	4	;
EXPR_STATEMENT	96:4	96:30	3	Align = 4 - ( LineSize % 4 ) ;
EXPR	96:4	96:4	4	Align = 4 - ( LineSize % 4 )
ASSIGN	96:4	96:12	5	Align = 4 - ( LineSize % 4 )
LVAL	96:4	96:4	6	Align
FIELD	96:4	96:4	7	Align
LEAF_NODE	96:4	96:4	8	Align
ASSIGN_OP	96:10	96:10	6	=
LEAF_NODE	96:10	96:10	7	=
RVAL	96:12	96:29	6	4 - ( LineSize % 4 )
FIELD	96:12	96:12	7	4
LEAF_NODE	96:12	96:12	8	4
LEAF_NODE	96:14	96:14	7	-
LEAF_NODE	96:16	96:16	7	(
FIELD	96:17	96:17	7	LineSize
LEAF_NODE	96:17	96:17	8	LineSize
LEAF_NODE	96:26	96:26	7	%
FIELD	96:28	96:28	7	4
LEAF_NODE	96:28	96:28	8	4
LEAF_NODE	96:29	96:29	7	)
LEAF_NODE	96:30	96:30	4	;
SELECTION	97:4	97:20	3	
KEYWORD	97:4	97:4	4	if
LEAF_NODE	97:4	97:4	5	if
LEAF_NODE	97:7	97:7	4	(
CONDITION	97:8	97:8	4	Align == 4
EXPR	97:8	97:17	5	Align == 4
FIELD	97:8	97:8	6	Align
LEAF_NODE	97:8	97:8	7	Align
EQ_OPERATOR	97:14	97:14	6	==
LEAF_NODE	97:14	97:14	7	==
FIELD	97:17	97:17	6	4
LEAF_NODE	97:17	97:17	7	4
LEAF_NODE	97:18	97:18	4	)
STATEMENTS	97:20	97:20	4	
EXPR_STATEMENT	97:20	97:29	5	Align = 0 ;
EXPR	97:20	97:20	6	Align = 0
ASSIGN	97:20	97:28	7	Align = 0
LVAL	97:20	97:20	8	Align
FIELD	97:20	97:20	9	Align
LEAF_NODE	97:20	97:20	10	Align
ASSIGN_OP	97:26	97:26	8	=
LEAF_NODE	97:26	97:26	9	=
RVAL	97:28	97:28	8	0
FIELD	97:28	97:28	9	0
LEAF_NODE	97:28	97:28	10	0
LEAF_NODE	97:29	97:29	6	;
EXPR_STATEMENT	101:4	102:31	3	hDIB = CreateDIB ( ( DWORD ) imageWidth , ( DWORD ) imageLength , ( WORD ) ( BitsPerSample * SamplePerPixel ) ) ;
EXPR	101:4	101:4	4	hDIB = CreateDIB ( ( DWORD ) imageWidth , ( DWORD ) imageLength , ( WORD ) ( BitsPerSample * SamplePerPixel ) )
ASSIGN	101:4	101:11	5	hDIB = CreateDIB ( ( DWORD ) imageWidth , ( DWORD ) imageLength , ( WORD ) ( BitsPerSample * SamplePerPixel ) )
LVAL	101:4	101:4	6	hDIB
FIELD	101:4	101:4	7	hDIB
LEAF_NODE	101:4	101:4	8	hDIB
ASSIGN_OP	101:9	101:9	6	=
LEAF_NODE	101:9	101:9	7	=
RVAL	101:11	101:11	6	CreateDIB ( ( DWORD ) imageWidth , ( DWORD ) imageLength , ( WORD ) ( BitsPerSample * SamplePerPixel ) )
FUNCTION_CALL	101:11	102:30	7	CreateDIB ( ( DWORD ) imageWidth , ( DWORD ) imageLength , ( WORD ) ( BitsPerSample * SamplePerPixel ) )
CALLEE	101:11	101:11	8	CreateDIB
LEAF_NODE	101:11	101:11	9	CreateDIB
LEAF_NODE	101:20	101:20	8	(
ARGUMENT	101:21	101:29	8	( DWORD ) imageWidth
LEAF_NODE	101:21	101:21	9	(
TYPE_NAME	101:22	101:22	9	DWORD
LEAF_NODE	101:22	101:22	10	DWORD
LEAF_NODE	101:27	101:27	9	)
FIELD	101:29	101:29	9	imageWidth
LEAF_NODE	101:29	101:29	10	imageWidth
LEAF_NODE	101:39	101:39	8	,
ARGUMENT	101:41	101:49	8	( DWORD ) imageLength
LEAF_NODE	101:41	101:41	9	(
TYPE_NAME	101:42	101:42	9	DWORD
LEAF_NODE	101:42	101:42	10	DWORD
LEAF_NODE	101:47	101:47	9	)
FIELD	101:49	101:49	9	imageLength
LEAF_NODE	101:49	101:49	10	imageLength
LEAF_NODE	101:60	101:60	8	,
ARGUMENT	101:62	102:29	8	( WORD ) ( BitsPerSample * SamplePerPixel )
LEAF_NODE	101:62	101:62	9	(
TYPE_NAME	101:63	101:63	9	WORD
LEAF_NODE	101:63	101:63	10	WORD
LEAF_NODE	101:67	101:67	9	)
LEAF_NODE	102:0	102:0	9	(
FIELD	102:1	102:1	9	BitsPerSample
LEAF_NODE	102:1	102:1	10	BitsPerSample
LEAF_NODE	102:14	102:14	9	*
FIELD	102:15	102:15	9	SamplePerPixel
LEAF_NODE	102:15	102:15	10	SamplePerPixel
LEAF_NODE	102:29	102:29	9	)
LEAF_NODE	102:30	102:30	8	)
LEAF_NODE	102:31	102:31	4	;
EXPR_STATEMENT	103:4	103:50	3	lpDIB = ( LPBITMAPINFOHEADER ) GlobalLock ( hDIB ) ;
EXPR	103:4	103:4	4	lpDIB = ( LPBITMAPINFOHEADER ) GlobalLock ( hDIB )
ASSIGN	103:4	103:13	5	lpDIB = ( LPBITMAPINFOHEADER ) GlobalLock ( hDIB )
LVAL	103:4	103:4	6	lpDIB
FIELD	103:4	103:4	7	lpDIB
LEAF_NODE	103:4	103:4	8	lpDIB
ASSIGN_OP	103:11	103:11	6	=
LEAF_NODE	103:11	103:11	7	=
RVAL	103:13	103:34	6	( LPBITMAPINFOHEADER ) GlobalLock ( hDIB )
LEAF_NODE	103:13	103:13	7	(
TYPE_NAME	103:14	103:14	7	LPBITMAPINFOHEADER
LEAF_NODE	103:14	103:14	8	LPBITMAPINFOHEADER
LEAF_NODE	103:32	103:32	7	)
FUNCTION_CALL	103:34	103:49	7	GlobalLock ( hDIB )
CALLEE	103:34	103:34	8	GlobalLock
LEAF_NODE	103:34	103:34	9	GlobalLock
LEAF_NODE	103:44	103:44	8	(
ARGUMENT	103:45	103:45	8	hDIB
FIELD	103:45	103:45	9	hDIB
LEAF_NODE	103:45	103:45	10	hDIB
LEAF_NODE	103:49	103:49	8	)
LEAF_NODE	103:50	103:50	4	;
SELECTION	104:4	105:10	3	
KEYWORD	104:4	104:4	4	if
LEAF_NODE	104:4	104:4	5	if
LEAF_NODE	104:7	104:7	4	(
CONDITION	104:8	104:8	4	! lpDIB
EXPR	104:8	104:8	5	! lpDIB
UNARY_EXPR	104:8	104:9	6	! lpDIB
UNARY_OPERATOR	104:8	104:8	7	!
LEAF_NODE	104:8	104:8	8	!
FIELD	104:9	104:9	7	lpDIB
LEAF_NODE	104:9	104:9	8	lpDIB
LEAF_NODE	104:14	104:14	4	)
STATEMENTS	105:10	105:10	4	
JUMP_STATEMENT	105:10	105:29	5	goto OutOfDIBMemory ;
KEYWORD	105:10	105:10	6	goto
LEAF_NODE	105:10	105:10	7	goto
DESTINATION	105:15	105:15	6	OutOfDIBMemory
LEAF_NODE	105:15	105:15	7	OutOfDIBMemory
LEAF_NODE	105:29	105:29	6	;
SELECTION	107:4	108:7	3	
KEYWORD	107:4	107:4	4	if
LEAF_NODE	107:4	107:4	5	if
LEAF_NODE	107:7	107:7	4	(
CONDITION	107:8	107:8	4	lpDIB
EXPR	107:8	107:8	5	lpDIB
FIELD	107:8	107:8	6	lpDIB
LEAF_NODE	107:8	107:8	7	lpDIB
LEAF_NODE	107:13	107:13	4	)
STATEMENTS	108:7	108:7	4	
EXPR_STATEMENT	108:7	108:42	5	lpBits = FindDIBBits ( ( LPSTR ) lpDIB ) ;
EXPR	108:7	108:7	6	lpBits = FindDIBBits ( ( LPSTR ) lpDIB )
ASSIGN	108:7	108:16	7	lpBits = FindDIBBits ( ( LPSTR ) lpDIB )
LVAL	108:7	108:7	8	lpBits
FIELD	108:7	108:7	9	lpBits
LEAF_NODE	108:7	108:7	10	lpBits
ASSIGN_OP	108:14	108:14	8	=
LEAF_NODE	108:14	108:14	9	=
RVAL	108:16	108:16	8	FindDIBBits ( ( LPSTR ) lpDIB )
FUNCTION_CALL	108:16	108:41	9	FindDIBBits ( ( LPSTR ) lpDIB )
CALLEE	108:16	108:16	10	FindDIBBits
LEAF_NODE	108:16	108:16	11	FindDIBBits
LEAF_NODE	108:27	108:27	10	(
ARGUMENT	108:28	108:36	10	( LPSTR ) lpDIB
LEAF_NODE	108:28	108:28	11	(
TYPE_NAME	108:29	108:29	11	LPSTR
LEAF_NODE	108:29	108:29	12	LPSTR
LEAF_NODE	108:34	108:34	11	)
FIELD	108:36	108:36	11	lpDIB
LEAF_NODE	108:36	108:36	12	lpDIB
LEAF_NODE	108:41	108:41	10	)
LEAF_NODE	108:42	108:42	6	;
SELECTION	112:4	113:6	3	
KEYWORD	112:4	112:4	4	if
LEAF_NODE	112:4	112:4	5	if
LEAF_NODE	112:7	112:7	4	(
CONDITION	112:8	112:8	4	lpBits
EXPR	112:8	112:8	5	lpBits
FIELD	112:8	112:8	6	lpBits
LEAF_NODE	112:8	112:8	7	lpBits
LEAF_NODE	112:14	112:14	4	)
STATEMENTS	113:6	203:6	4	
LEAF_NODE	113:6	113:6	5	{
STATEMENTS	114:8	202:8	5	
EXPR_STATEMENT	114:8	114:43	6	lpBits = FindDIBBits ( ( LPSTR ) lpDIB ) ;
EXPR	114:8	114:8	7	lpBits = FindDIBBits ( ( LPSTR ) lpDIB )
ASSIGN	114:8	114:17	8	lpBits = FindDIBBits ( ( LPSTR ) lpDIB )
LVAL	114:8	114:8	9	lpBits
FIELD	114:8	114:8	10	lpBits
LEAF_NODE	114:8	114:8	11	lpBits
ASSIGN_OP	114:15	114:15	9	=
LEAF_NODE	114:15	114:15	10	=
RVAL	114:17	114:17	9	FindDIBBits ( ( LPSTR ) lpDIB )
FUNCTION_CALL	114:17	114:42	10	FindDIBBits ( ( LPSTR ) lpDIB )
CALLEE	114:17	114:17	11	FindDIBBits
LEAF_NODE	114:17	114:17	12	FindDIBBits
LEAF_NODE	114:28	114:28	11	(
ARGUMENT	114:29	114:37	11	( LPSTR ) lpDIB
LEAF_NODE	114:29	114:29	12	(
TYPE_NAME	114:30	114:30	12	LPSTR
LEAF_NODE	114:30	114:30	13	LPSTR
LEAF_NODE	114:35	114:35	12	)
FIELD	114:37	114:37	12	lpDIB
LEAF_NODE	114:37	114:37	13	lpDIB
LEAF_NODE	114:42	114:42	11	)
LEAF_NODE	114:43	114:43	7	;
EXPR_STATEMENT	115:8	115:67	6	lpBits += ( ( imageWidth * SamplePerPixel ) + Align ) * ( imageLength - 1 ) ;
EXPR	115:8	115:8	7	lpBits += ( ( imageWidth * SamplePerPixel ) + Align ) * ( imageLength - 1 )
ASSIGN	115:8	115:16	8	lpBits += ( ( imageWidth * SamplePerPixel ) + Align ) * ( imageLength - 1 )
LVAL	115:8	115:8	9	lpBits
FIELD	115:8	115:8	10	lpBits
LEAF_NODE	115:8	115:8	11	lpBits
ASSIGN_OP	115:14	115:14	9	+=
LEAF_NODE	115:14	115:14	10	+=
RVAL	115:16	115:66	9	( ( imageWidth * SamplePerPixel ) + Align ) * ( imageLength - 1 )
LEAF_NODE	115:16	115:16	10	(
LEAF_NODE	115:17	115:17	10	(
FIELD	115:18	115:18	10	imageWidth
LEAF_NODE	115:18	115:18	11	imageWidth
LEAF_NODE	115:28	115:28	10	*
FIELD	115:29	115:29	10	SamplePerPixel
LEAF_NODE	115:29	115:29	11	SamplePerPixel
LEAF_NODE	115:43	115:43	10	)
LEAF_NODE	115:44	115:44	10	+
FIELD	115:45	115:45	10	Align
LEAF_NODE	115:45	115:45	11	Align
LEAF_NODE	115:50	115:50	10	)
LEAF_NODE	115:51	115:51	10	*
LEAF_NODE	115:52	115:52	10	(
FIELD	115:53	115:53	10	imageLength
LEAF_NODE	115:53	115:53	11	imageLength
LEAF_NODE	115:64	115:64	10	-
FIELD	115:65	115:65	10	1
LEAF_NODE	115:65	115:65	11	1
LEAF_NODE	115:66	115:66	10	)
LEAF_NODE	115:67	115:67	7	;
EXPR_STATEMENT	118:8	118:53	6	hStrip = GlobalAlloc ( GHND , TIFFStripSize ( tif ) ) ;
EXPR	118:8	118:8	7	hStrip = GlobalAlloc ( GHND , TIFFStripSize ( tif ) )
ASSIGN	118:8	118:17	8	hStrip = GlobalAlloc ( GHND , TIFFStripSize ( tif ) )
LVAL	118:8	118:8	9	hStrip
FIELD	118:8	118:8	10	hStrip
LEAF_NODE	118:8	118:8	11	hStrip
ASSIGN_OP	118:15	118:15	9	=
LEAF_NODE	118:15	118:15	10	=
RVAL	118:17	118:17	9	GlobalAlloc ( GHND , TIFFStripSize ( tif ) )
FUNCTION_CALL	118:17	118:52	10	GlobalAlloc ( GHND , TIFFStripSize ( tif ) )
CALLEE	118:17	118:17	11	GlobalAlloc
LEAF_NODE	118:17	118:17	12	GlobalAlloc
LEAF_NODE	118:28	118:28	11	(
ARGUMENT	118:29	118:29	11	GHND
FIELD	118:29	118:29	12	GHND
LEAF_NODE	118:29	118:29	13	GHND
LEAF_NODE	118:33	118:33	11	,
ARGUMENT	118:34	118:34	11	TIFFStripSize ( tif )
FUNCTION_CALL	118:34	118:51	12	TIFFStripSize ( tif )
CALLEE	118:34	118:34	13	TIFFStripSize
LEAF_NODE	118:34	118:34	14	TIFFStripSize
LEAF_NODE	118:47	118:47	13	(
ARGUMENT	118:48	118:48	13	tif
FIELD	118:48	118:48	14	tif
LEAF_NODE	118:48	118:48	15	tif
LEAF_NODE	118:51	118:51	13	)
LEAF_NODE	118:52	118:52	11	)
LEAF_NODE	118:53	118:53	7	;
EXPR_STATEMENT	119:8	119:32	6	buf = GlobalLock ( hStrip ) ;
EXPR	119:8	119:8	7	buf = GlobalLock ( hStrip )
ASSIGN	119:8	119:14	8	buf = GlobalLock ( hStrip )
LVAL	119:8	119:8	9	buf
FIELD	119:8	119:8	10	buf
LEAF_NODE	119:8	119:8	11	buf
ASSIGN_OP	119:12	119:12	9	=
LEAF_NODE	119:12	119:12	10	=
RVAL	119:14	119:14	9	GlobalLock ( hStrip )
FUNCTION_CALL	119:14	119:31	10	GlobalLock ( hStrip )
CALLEE	119:14	119:14	11	GlobalLock
LEAF_NODE	119:14	119:14	12	GlobalLock
LEAF_NODE	119:24	119:24	11	(
ARGUMENT	119:25	119:25	11	hStrip
FIELD	119:25	119:25	12	hStrip
LEAF_NODE	119:25	119:25	13	hStrip
LEAF_NODE	119:31	119:31	11	)
LEAF_NODE	119:32	119:32	7	;
SELECTION	121:8	122:11	6	
KEYWORD	121:8	121:8	7	if
LEAF_NODE	121:8	121:8	8	if
LEAF_NODE	121:11	121:11	7	(
CONDITION	121:12	121:12	7	! buf
EXPR	121:12	121:12	8	! buf
UNARY_EXPR	121:12	121:13	9	! buf
UNARY_OPERATOR	121:12	121:12	10	!
LEAF_NODE	121:12	121:12	11	!
FIELD	121:13	121:13	10	buf
LEAF_NODE	121:13	121:13	11	buf
LEAF_NODE	121:16	121:16	7	)
STATEMENTS	122:11	122:11	7	
JUMP_STATEMENT	122:11	122:30	8	goto OutOfBufMemory ;
KEYWORD	122:11	122:11	9	goto
LEAF_NODE	122:11	122:11	10	goto
DESTINATION	122:16	122:16	9	OutOfBufMemory
LEAF_NODE	122:16	122:16	10	OutOfBufMemory
LEAF_NODE	122:30	122:30	9	;
SELECTION	126:8	127:8	6	
KEYWORD	126:8	126:8	7	if
LEAF_NODE	126:8	126:8	8	if
LEAF_NODE	126:11	126:11	7	(
CONDITION	126:12	126:12	7	PhotometricInterpretation == 3
EXPR	126:12	126:41	8	PhotometricInterpretation == 3
FIELD	126:12	126:12	9	PhotometricInterpretation
LEAF_NODE	126:12	126:12	10	PhotometricInterpretation
EQ_OPERATOR	126:38	126:38	9	==
LEAF_NODE	126:38	126:38	10	==
FIELD	126:41	126:41	9	3
LEAF_NODE	126:41	126:41	10	3
LEAF_NODE	126:42	126:42	7	)
STATEMENTS	127:8	162:8	7	
LEAF_NODE	127:8	127:8	8	{
STATEMENTS	128:10	146:10	8	
SIMPLE_DECL	128:10	128:21	9	uint16 * red ;
VAR_DECL	128:10	128:18	10	uint16 * red
TYPE	128:10	128:16	11	uint16 *
TYPE_NAME	128:10	128:10	12	uint16
LEAF_NODE	128:10	128:10	13	uint16
POINTER	128:16	128:16	12	*
LEAF_NODE	128:16	128:16	13	*
NAME	128:18	128:18	11	red
LEAF_NODE	128:18	128:18	12	red
LEAF_NODE	128:21	128:21	10	;
SIMPLE_DECL	129:10	129:23	9	uint16 * green ;
VAR_DECL	129:10	129:18	10	uint16 * green
TYPE	129:10	129:16	11	uint16 *
TYPE_NAME	129:10	129:10	12	uint16
LEAF_NODE	129:10	129:10	13	uint16
POINTER	129:16	129:16	12	*
LEAF_NODE	129:16	129:16	13	*
NAME	129:18	129:18	11	green
LEAF_NODE	129:18	129:18	12	green
LEAF_NODE	129:23	129:23	10	;
SIMPLE_DECL	130:10	130:22	9	uint16 * blue ;
VAR_DECL	130:10	130:18	10	uint16 * blue
TYPE	130:10	130:16	11	uint16 *
TYPE_NAME	130:10	130:10	12	uint16
LEAF_NODE	130:10	130:10	13	uint16
POINTER	130:16	130:16	12	*
LEAF_NODE	130:16	130:16	13	*
NAME	130:18	130:18	11	blue
LEAF_NODE	130:18	130:18	12	blue
LEAF_NODE	130:22	130:22	10	;
SIMPLE_DECL	131:10	131:17	9	int16 i ;
VAR_DECL	131:10	131:16	10	int16 i
TYPE	131:10	131:10	11	int16
TYPE_NAME	131:10	131:10	12	int16
LEAF_NODE	131:10	131:10	13	int16
NAME	131:16	131:16	11	i
LEAF_NODE	131:16	131:16	12	i
LEAF_NODE	131:17	131:17	10	;
SIMPLE_DECL	132:10	132:28	9	LPBITMAPINFO lpbmi ;
VAR_DECL	132:10	132:23	10	LPBITMAPINFO lpbmi
TYPE	132:10	132:10	11	LPBITMAPINFO
TYPE_NAME	132:10	132:10	12	LPBITMAPINFO
LEAF_NODE	132:10	132:10	13	LPBITMAPINFO
NAME	132:23	132:23	11	lpbmi
LEAF_NODE	132:23	132:23	12	lpbmi
LEAF_NODE	132:28	132:28	10	;
SIMPLE_DECL	133:10	133:29	9	int Palette16Bits ;
VAR_DECL	133:10	133:16	10	int Palette16Bits
TYPE	133:10	133:10	11	int
TYPE_NAME	133:10	133:10	12	int
LEAF_NODE	133:10	133:10	13	int
NAME	133:16	133:16	11	Palette16Bits
LEAF_NODE	133:16	133:16	12	Palette16Bits
LEAF_NODE	133:29	133:29	10	;
EXPR_STATEMENT	135:10	135:66	9	TIFFGetField ( tif , TIFFTAG_COLORMAP , & red , & green , & blue ) ;
EXPR	135:10	135:10	10	TIFFGetField ( tif , TIFFTAG_COLORMAP , & red , & green , & blue )
FUNCTION_CALL	135:10	135:65	11	TIFFGetField ( tif , TIFFTAG_COLORMAP , & red , & green , & blue )
CALLEE	135:10	135:10	12	TIFFGetField
LEAF_NODE	135:10	135:10	13	TIFFGetField
LEAF_NODE	135:22	135:22	12	(
ARGUMENT	135:23	135:23	12	tif
FIELD	135:23	135:23	13	tif
LEAF_NODE	135:23	135:23	14	tif
LEAF_NODE	135:26	135:26	12	,
ARGUMENT	135:28	135:28	12	TIFFTAG_COLORMAP
FIELD	135:28	135:28	13	TIFFTAG_COLORMAP
LEAF_NODE	135:28	135:28	14	TIFFTAG_COLORMAP
LEAF_NODE	135:44	135:44	12	,
ARGUMENT	135:46	135:46	12	& red
UNARY_EXPR	135:46	135:47	13	& red
UNARY_OPERATOR	135:46	135:46	14	&
LEAF_NODE	135:46	135:46	15	&
FIELD	135:47	135:47	14	red
LEAF_NODE	135:47	135:47	15	red
LEAF_NODE	135:50	135:50	12	,
ARGUMENT	135:52	135:52	12	& green
UNARY_EXPR	135:52	135:53	13	& green
UNARY_OPERATOR	135:52	135:52	14	&
LEAF_NODE	135:52	135:52	15	&
FIELD	135:53	135:53	14	green
LEAF_NODE	135:53	135:53	15	green
LEAF_NODE	135:58	135:58	12	,
ARGUMENT	135:60	135:60	12	& blue
UNARY_EXPR	135:60	135:61	13	& blue
UNARY_OPERATOR	135:60	135:60	14	&
LEAF_NODE	135:60	135:60	15	&
FIELD	135:61	135:61	14	blue
LEAF_NODE	135:61	135:61	15	blue
LEAF_NODE	135:65	135:65	12	)
LEAF_NODE	135:66	135:66	10	;
SELECTION	138:10	139:13	9	
KEYWORD	138:10	138:10	10	if
LEAF_NODE	138:10	138:10	11	if
LEAF_NODE	138:13	138:13	10	(
CONDITION	138:14	138:14	10	checkcmap ( 1 << BitsPerSample , red , green , blue ) == 16
EXPR	138:14	138:63	11	checkcmap ( 1 << BitsPerSample , red , green , blue ) == 16
FUNCTION_CALL	138:14	138:58	12	checkcmap ( 1 << BitsPerSample , red , green , blue )
CALLEE	138:14	138:14	13	checkcmap
LEAF_NODE	138:14	138:14	14	checkcmap
LEAF_NODE	138:23	138:23	13	(
ARGUMENT	138:24	138:27	13	1 << BitsPerSample
FIELD	138:24	138:24	14	1
LEAF_NODE	138:24	138:24	15	1
LEAF_NODE	138:25	138:25	14	<<
FIELD	138:27	138:27	14	BitsPerSample
LEAF_NODE	138:27	138:27	15	BitsPerSample
LEAF_NODE	138:40	138:40	13	,
ARGUMENT	138:42	138:42	13	red
FIELD	138:42	138:42	14	red
LEAF_NODE	138:42	138:42	15	red
LEAF_NODE	138:45	138:45	13	,
ARGUMENT	138:47	138:47	13	green
FIELD	138:47	138:47	14	green
LEAF_NODE	138:47	138:47	15	green
LEAF_NODE	138:52	138:52	13	,
ARGUMENT	138:54	138:54	13	blue
FIELD	138:54	138:54	14	blue
LEAF_NODE	138:54	138:54	15	blue
LEAF_NODE	138:58	138:58	13	)
EQ_OPERATOR	138:60	138:60	12	==
LEAF_NODE	138:60	138:60	13	==
FIELD	138:63	138:63	12	16
LEAF_NODE	138:63	138:63	13	16
LEAF_NODE	138:65	138:65	10	)
STATEMENTS	139:13	139:13	10	
EXPR_STATEMENT	139:13	139:33	11	Palette16Bits = TRUE ;
EXPR	139:13	139:13	12	Palette16Bits = TRUE
ASSIGN	139:13	139:29	13	Palette16Bits = TRUE
LVAL	139:13	139:13	14	Palette16Bits
FIELD	139:13	139:13	15	Palette16Bits
LEAF_NODE	139:13	139:13	16	Palette16Bits
ASSIGN_OP	139:27	139:27	14	=
LEAF_NODE	139:27	139:27	15	=
RVAL	139:29	139:29	14	TRUE
FIELD	139:29	139:29	15	TRUE
LEAF_NODE	139:29	139:29	16	TRUE
LEAF_NODE	139:33	139:33	12	;
SELECTION	140:10	141:13	9	
KEYWORD	140:10	140:10	10	else
LEAF_NODE	140:10	140:10	11	else
STATEMENTS	141:13	141:13	10	
EXPR_STATEMENT	141:13	141:34	11	Palette16Bits = FALSE ;
EXPR	141:13	141:13	12	Palette16Bits = FALSE
ASSIGN	141:13	141:29	13	Palette16Bits = FALSE
LVAL	141:13	141:13	14	Palette16Bits
FIELD	141:13	141:13	15	Palette16Bits
LEAF_NODE	141:13	141:13	16	Palette16Bits
ASSIGN_OP	141:27	141:27	14	=
LEAF_NODE	141:27	141:27	15	=
RVAL	141:29	141:29	14	FALSE
FIELD	141:29	141:29	15	FALSE
LEAF_NODE	141:29	141:29	16	FALSE
LEAF_NODE	141:34	141:34	12	;
EXPR_STATEMENT	143:10	143:37	9	lpbmi = ( LPBITMAPINFO ) lpDIB ;
EXPR	143:10	143:10	10	lpbmi = ( LPBITMAPINFO ) lpDIB
ASSIGN	143:10	143:18	11	lpbmi = ( LPBITMAPINFO ) lpDIB
LVAL	143:10	143:10	12	lpbmi
FIELD	143:10	143:10	13	lpbmi
LEAF_NODE	143:10	143:10	14	lpbmi
ASSIGN_OP	143:16	143:16	12	=
LEAF_NODE	143:16	143:16	13	=
RVAL	143:18	143:32	12	( LPBITMAPINFO ) lpDIB
LEAF_NODE	143:18	143:18	13	(
TYPE_NAME	143:19	143:19	13	LPBITMAPINFO
LEAF_NODE	143:19	143:19	14	LPBITMAPINFO
LEAF_NODE	143:31	143:31	13	)
FIELD	143:32	143:32	13	lpDIB
LEAF_NODE	143:32	143:32	14	lpDIB
LEAF_NODE	143:37	143:37	10	;
ITERATION	146:10	147:12	9	
KEYWORD	146:10	146:10	10	for
LEAF_NODE	146:10	146:10	11	for
LEAF_NODE	146:14	146:14	10	(
FOR_INIT	146:15	146:39	10	i = ( 1 << BitsPerSample ) - 1 ;
EXPR	146:15	146:15	11	i = ( 1 << BitsPerSample ) - 1
ASSIGN	146:15	146:19	12	i = ( 1 << BitsPerSample ) - 1
LVAL	146:15	146:15	13	i
FIELD	146:15	146:15	14	i
LEAF_NODE	146:15	146:15	15	i
ASSIGN_OP	146:17	146:17	13	=
LEAF_NODE	146:17	146:17	14	=
RVAL	146:19	146:38	13	( 1 << BitsPerSample ) - 1
LEAF_NODE	146:19	146:19	14	(
FIELD	146:20	146:20	14	1
LEAF_NODE	146:20	146:20	15	1
LEAF_NODE	146:21	146:21	14	<<
FIELD	146:23	146:23	14	BitsPerSample
LEAF_NODE	146:23	146:23	15	BitsPerSample
LEAF_NODE	146:36	146:36	14	)
LEAF_NODE	146:37	146:37	14	-
FIELD	146:38	146:38	14	1
LEAF_NODE	146:38	146:38	15	1
LEAF_NODE	146:39	146:39	11	;
CONDITION	146:41	146:41	10	i >= 0
EXPR	146:41	146:46	11	i >= 0
FIELD	146:41	146:41	12	i
LEAF_NODE	146:41	146:41	13	i
REL_OPERATOR	146:43	146:43	12	>=
LEAF_NODE	146:43	146:43	13	>=
FIELD	146:46	146:46	12	0
LEAF_NODE	146:46	146:46	13	0
LEAF_NODE	146:47	146:47	10	;
FOR_EXPR	146:49	146:49	10	i --
EXPR	146:49	146:49	11	i --
FIELD	146:49	146:50	12	i --
LEAF_NODE	146:49	146:49	13	i
LEAF_NODE	146:50	146:50	13	--
LEAF_NODE	146:52	146:52	10	)
STATEMENTS	147:12	160:12	10	
LEAF_NODE	147:12	147:12	11	{
STATEMENTS	148:13	154:13	11	
SELECTION	148:13	149:16	12	
KEYWORD	148:13	148:13	13	if
LEAF_NODE	148:13	148:13	14	if
LEAF_NODE	148:16	148:16	13	(
CONDITION	148:17	148:17	13	Palette16Bits
EXPR	148:17	148:17	14	Palette16Bits
FIELD	148:17	148:17	15	Palette16Bits
LEAF_NODE	148:17	148:17	16	Palette16Bits
LEAF_NODE	148:30	148:30	13	)
STATEMENTS	149:16	153:16	13	
LEAF_NODE	149:16	149:16	14	{
STATEMENTS	150:18	152:18	14	
EXPR_STATEMENT	150:18	150:64	15	lpbmi -> bmiColors [ i ] . rgbRed = ( BYTE ) CVT ( red [ i ] ) ;
EXPR	150:18	150:18	16	lpbmi -> bmiColors [ i ] . rgbRed = ( BYTE ) CVT ( red [ i ] )
ASSIGN	150:18	150:46	17	lpbmi -> bmiColors [ i ] . rgbRed = ( BYTE ) CVT ( red [ i ] )
LVAL	150:18	150:18	18	lpbmi -> bmiColors [ i ] . rgbRed
FIELD	150:18	150:38	19	lpbmi -> bmiColors [ i ] . rgbRed
LEAF_NODE	150:18	150:18	20	lpbmi
LEAF_NODE	150:23	150:23	20	->
LEAF_NODE	150:25	150:25	20	bmiColors
LEAF_NODE	150:34	150:34	20	[
EXPR	150:35	150:35	20	i
FIELD	150:35	150:35	21	i
LEAF_NODE	150:35	150:35	22	i
LEAF_NODE	150:36	150:36	20	]
LEAF_NODE	150:37	150:37	20	.
LEAF_NODE	150:38	150:38	20	rgbRed
ASSIGN_OP	150:45	150:45	18	=
LEAF_NODE	150:45	150:45	19	=
RVAL	150:46	150:53	18	( BYTE ) CVT ( red [ i ] )
LEAF_NODE	150:46	150:46	19	(
TYPE_NAME	150:47	150:47	19	BYTE
LEAF_NODE	150:47	150:47	20	BYTE
LEAF_NODE	150:51	150:51	19	)
FUNCTION_CALL	150:53	150:63	19	CVT ( red [ i ] )
CALLEE	150:53	150:53	20	CVT
LEAF_NODE	150:53	150:53	21	CVT
LEAF_NODE	150:56	150:56	20	(
ARGUMENT	150:57	150:57	20	red [ i ]
FIELD	150:57	150:62	21	red [ i ]
LEAF_NODE	150:57	150:57	22	red
LEAF_NODE	150:60	150:60	22	[
EXPR	150:61	150:61	22	i
FIELD	150:61	150:61	23	i
LEAF_NODE	150:61	150:61	24	i
LEAF_NODE	150:62	150:62	22	]
LEAF_NODE	150:63	150:63	20	)
LEAF_NODE	150:64	150:64	16	;
EXPR_STATEMENT	151:18	151:69	15	lpbmi -> bmiColors [ i ] . rgbGreen = ( BYTE ) CVT ( green [ i ] ) ;
EXPR	151:18	151:18	16	lpbmi -> bmiColors [ i ] . rgbGreen = ( BYTE ) CVT ( green [ i ] )
ASSIGN	151:18	151:49	17	lpbmi -> bmiColors [ i ] . rgbGreen = ( BYTE ) CVT ( green [ i ] )
LVAL	151:18	151:18	18	lpbmi -> bmiColors [ i ] . rgbGreen
FIELD	151:18	151:38	19	lpbmi -> bmiColors [ i ] . rgbGreen
LEAF_NODE	151:18	151:18	20	lpbmi
LEAF_NODE	151:23	151:23	20	->
LEAF_NODE	151:25	151:25	20	bmiColors
LEAF_NODE	151:34	151:34	20	[
EXPR	151:35	151:35	20	i
FIELD	151:35	151:35	21	i
LEAF_NODE	151:35	151:35	22	i
LEAF_NODE	151:36	151:36	20	]
LEAF_NODE	151:37	151:37	20	.
LEAF_NODE	151:38	151:38	20	rgbGreen
ASSIGN_OP	151:47	151:47	18	=
LEAF_NODE	151:47	151:47	19	=
RVAL	151:49	151:56	18	( BYTE ) CVT ( green [ i ] )
LEAF_NODE	151:49	151:49	19	(
TYPE_NAME	151:50	151:50	19	BYTE
LEAF_NODE	151:50	151:50	20	BYTE
LEAF_NODE	151:54	151:54	19	)
FUNCTION_CALL	151:56	151:68	19	CVT ( green [ i ] )
CALLEE	151:56	151:56	20	CVT
LEAF_NODE	151:56	151:56	21	CVT
LEAF_NODE	151:59	151:59	20	(
ARGUMENT	151:60	151:60	20	green [ i ]
FIELD	151:60	151:67	21	green [ i ]
LEAF_NODE	151:60	151:60	22	green
LEAF_NODE	151:65	151:65	22	[
EXPR	151:66	151:66	22	i
FIELD	151:66	151:66	23	i
LEAF_NODE	151:66	151:66	24	i
LEAF_NODE	151:67	151:67	22	]
LEAF_NODE	151:68	151:68	20	)
LEAF_NODE	151:69	151:69	16	;
EXPR_STATEMENT	152:18	152:67	15	lpbmi -> bmiColors [ i ] . rgbBlue = ( BYTE ) CVT ( blue [ i ] ) ;
EXPR	152:18	152:18	16	lpbmi -> bmiColors [ i ] . rgbBlue = ( BYTE ) CVT ( blue [ i ] )
ASSIGN	152:18	152:48	17	lpbmi -> bmiColors [ i ] . rgbBlue = ( BYTE ) CVT ( blue [ i ] )
LVAL	152:18	152:18	18	lpbmi -> bmiColors [ i ] . rgbBlue
FIELD	152:18	152:38	19	lpbmi -> bmiColors [ i ] . rgbBlue
LEAF_NODE	152:18	152:18	20	lpbmi
LEAF_NODE	152:23	152:23	20	->
LEAF_NODE	152:25	152:25	20	bmiColors
LEAF_NODE	152:34	152:34	20	[
EXPR	152:35	152:35	20	i
FIELD	152:35	152:35	21	i
LEAF_NODE	152:35	152:35	22	i
LEAF_NODE	152:36	152:36	20	]
LEAF_NODE	152:37	152:37	20	.
LEAF_NODE	152:38	152:38	20	rgbBlue
ASSIGN_OP	152:46	152:46	18	=
LEAF_NODE	152:46	152:46	19	=
RVAL	152:48	152:55	18	( BYTE ) CVT ( blue [ i ] )
LEAF_NODE	152:48	152:48	19	(
TYPE_NAME	152:49	152:49	19	BYTE
LEAF_NODE	152:49	152:49	20	BYTE
LEAF_NODE	152:53	152:53	19	)
FUNCTION_CALL	152:55	152:66	19	CVT ( blue [ i ] )
CALLEE	152:55	152:55	20	CVT
LEAF_NODE	152:55	152:55	21	CVT
LEAF_NODE	152:58	152:58	20	(
ARGUMENT	152:59	152:59	20	blue [ i ]
FIELD	152:59	152:65	21	blue [ i ]
LEAF_NODE	152:59	152:59	22	blue
LEAF_NODE	152:63	152:63	22	[
EXPR	152:64	152:64	22	i
FIELD	152:64	152:64	23	i
LEAF_NODE	152:64	152:64	24	i
LEAF_NODE	152:65	152:65	22	]
LEAF_NODE	152:66	152:66	20	)
LEAF_NODE	152:67	152:67	16	;
LEAF_NODE	153:16	153:16	14	}
SELECTION	154:13	155:16	12	
KEYWORD	154:13	154:13	13	else
LEAF_NODE	154:13	154:13	14	else
STATEMENTS	155:16	159:16	13	
LEAF_NODE	155:16	155:16	14	{
STATEMENTS	156:18	158:18	14	
EXPR_STATEMENT	156:18	156:60	15	lpbmi -> bmiColors [ i ] . rgbRed = ( BYTE ) red [ i ] ;
EXPR	156:18	156:18	16	lpbmi -> bmiColors [ i ] . rgbRed = ( BYTE ) red [ i ]
ASSIGN	156:18	156:47	17	lpbmi -> bmiColors [ i ] . rgbRed = ( BYTE ) red [ i ]
LVAL	156:18	156:18	18	lpbmi -> bmiColors [ i ] . rgbRed
FIELD	156:18	156:38	19	lpbmi -> bmiColors [ i ] . rgbRed
LEAF_NODE	156:18	156:18	20	lpbmi
LEAF_NODE	156:23	156:23	20	->
LEAF_NODE	156:25	156:25	20	bmiColors
LEAF_NODE	156:34	156:34	20	[
EXPR	156:35	156:35	20	i
FIELD	156:35	156:35	21	i
LEAF_NODE	156:35	156:35	22	i
LEAF_NODE	156:36	156:36	20	]
LEAF_NODE	156:37	156:37	20	.
LEAF_NODE	156:38	156:38	20	rgbRed
ASSIGN_OP	156:45	156:45	18	=
LEAF_NODE	156:45	156:45	19	=
RVAL	156:47	156:54	18	( BYTE ) red [ i ]
LEAF_NODE	156:47	156:47	19	(
TYPE_NAME	156:48	156:48	19	BYTE
LEAF_NODE	156:48	156:48	20	BYTE
LEAF_NODE	156:52	156:52	19	)
FIELD	156:54	156:59	19	red [ i ]
LEAF_NODE	156:54	156:54	20	red
LEAF_NODE	156:57	156:57	20	[
EXPR	156:58	156:58	20	i
FIELD	156:58	156:58	21	i
LEAF_NODE	156:58	156:58	22	i
LEAF_NODE	156:59	156:59	20	]
LEAF_NODE	156:60	156:60	16	;
EXPR_STATEMENT	157:18	157:64	15	lpbmi -> bmiColors [ i ] . rgbGreen = ( BYTE ) green [ i ] ;
EXPR	157:18	157:18	16	lpbmi -> bmiColors [ i ] . rgbGreen = ( BYTE ) green [ i ]
ASSIGN	157:18	157:49	17	lpbmi -> bmiColors [ i ] . rgbGreen = ( BYTE ) green [ i ]
LVAL	157:18	157:18	18	lpbmi -> bmiColors [ i ] . rgbGreen
FIELD	157:18	157:38	19	lpbmi -> bmiColors [ i ] . rgbGreen
LEAF_NODE	157:18	157:18	20	lpbmi
LEAF_NODE	157:23	157:23	20	->
LEAF_NODE	157:25	157:25	20	bmiColors
LEAF_NODE	157:34	157:34	20	[
EXPR	157:35	157:35	20	i
FIELD	157:35	157:35	21	i
LEAF_NODE	157:35	157:35	22	i
LEAF_NODE	157:36	157:36	20	]
LEAF_NODE	157:37	157:37	20	.
LEAF_NODE	157:38	157:38	20	rgbGreen
ASSIGN_OP	157:47	157:47	18	=
LEAF_NODE	157:47	157:47	19	=
RVAL	157:49	157:56	18	( BYTE ) green [ i ]
LEAF_NODE	157:49	157:49	19	(
TYPE_NAME	157:50	157:50	19	BYTE
LEAF_NODE	157:50	157:50	20	BYTE
LEAF_NODE	157:54	157:54	19	)
FIELD	157:56	157:63	19	green [ i ]
LEAF_NODE	157:56	157:56	20	green
LEAF_NODE	157:61	157:61	20	[
EXPR	157:62	157:62	20	i
FIELD	157:62	157:62	21	i
LEAF_NODE	157:62	157:62	22	i
LEAF_NODE	157:63	157:63	20	]
LEAF_NODE	157:64	157:64	16	;
EXPR_STATEMENT	158:18	158:62	15	lpbmi -> bmiColors [ i ] . rgbBlue = ( BYTE ) blue [ i ] ;
EXPR	158:18	158:18	16	lpbmi -> bmiColors [ i ] . rgbBlue = ( BYTE ) blue [ i ]
ASSIGN	158:18	158:48	17	lpbmi -> bmiColors [ i ] . rgbBlue = ( BYTE ) blue [ i ]
LVAL	158:18	158:18	18	lpbmi -> bmiColors [ i ] . rgbBlue
FIELD	158:18	158:38	19	lpbmi -> bmiColors [ i ] . rgbBlue
LEAF_NODE	158:18	158:18	20	lpbmi
LEAF_NODE	158:23	158:23	20	->
LEAF_NODE	158:25	158:25	20	bmiColors
LEAF_NODE	158:34	158:34	20	[
EXPR	158:35	158:35	20	i
FIELD	158:35	158:35	21	i
LEAF_NODE	158:35	158:35	22	i
LEAF_NODE	158:36	158:36	20	]
LEAF_NODE	158:37	158:37	20	.
LEAF_NODE	158:38	158:38	20	rgbBlue
ASSIGN_OP	158:46	158:46	18	=
LEAF_NODE	158:46	158:46	19	=
RVAL	158:48	158:55	18	( BYTE ) blue [ i ]
LEAF_NODE	158:48	158:48	19	(
TYPE_NAME	158:49	158:49	19	BYTE
LEAF_NODE	158:49	158:49	20	BYTE
LEAF_NODE	158:53	158:53	19	)
FIELD	158:55	158:61	19	blue [ i ]
LEAF_NODE	158:55	158:55	20	blue
LEAF_NODE	158:59	158:59	20	[
EXPR	158:60	158:60	20	i
FIELD	158:60	158:60	21	i
LEAF_NODE	158:60	158:60	22	i
LEAF_NODE	158:61	158:61	20	]
LEAF_NODE	158:62	158:62	16	;
LEAF_NODE	159:16	159:16	14	}
LEAF_NODE	160:12	160:12	11	}
LEAF_NODE	162:8	162:8	8	}
LEAF_NODE	166:0	166:0	6	<=
LEAF_NODE	166:2	166:2	6	>
LEAF_NODE	166:4	166:4	6	BGR
ITERATION	167:8	168:10	6	
KEYWORD	167:8	167:8	7	for
LEAF_NODE	167:8	167:8	8	for
LEAF_NODE	167:12	167:12	7	(
FOR_INIT	167:13	167:20	7	row = 0 ;
EXPR	167:13	167:13	8	row = 0
ASSIGN	167:13	167:19	9	row = 0
LVAL	167:13	167:13	10	row
FIELD	167:13	167:13	11	row
LEAF_NODE	167:13	167:13	12	row
ASSIGN_OP	167:17	167:17	10	=
LEAF_NODE	167:17	167:17	11	=
RVAL	167:19	167:19	10	0
FIELD	167:19	167:19	11	0
LEAF_NODE	167:19	167:19	12	0
LEAF_NODE	167:20	167:20	8	;
CONDITION	167:22	167:22	7	row < imageLength
EXPR	167:22	167:28	8	row < imageLength
FIELD	167:22	167:22	9	row
LEAF_NODE	167:22	167:22	10	row
REL_OPERATOR	167:26	167:26	9	<
LEAF_NODE	167:26	167:26	10	<
FIELD	167:28	167:28	9	imageLength
LEAF_NODE	167:28	167:28	10	imageLength
LEAF_NODE	167:39	167:39	7	;
FOR_EXPR	167:41	167:41	7	row += RowsPerStrip
EXPR	167:41	167:41	8	row += RowsPerStrip
ASSIGN	167:41	167:48	9	row += RowsPerStrip
LVAL	167:41	167:41	10	row
FIELD	167:41	167:41	11	row
LEAF_NODE	167:41	167:41	12	row
ASSIGN_OP	167:45	167:45	10	+=
LEAF_NODE	167:45	167:45	11	+=
RVAL	167:48	167:48	10	RowsPerStrip
FIELD	167:48	167:48	11	RowsPerStrip
LEAF_NODE	167:48	167:48	12	RowsPerStrip
LEAF_NODE	167:60	167:60	7	)
STATEMENTS	168:10	198:10	7	
LEAF_NODE	168:10	168:10	8	{
STATEMENTS	169:12	176:12	8	
EXPR_STATEMENT	169:12	170:13	9	nrow = ( row + RowsPerStrip > imageLength ? imageLength - row : RowsPerStrip ) ;
EXPR	169:12	169:12	10	nrow = ( row + RowsPerStrip > imageLength ? imageLength - row : RowsPerStrip )
ASSIGN	169:12	169:19	11	nrow = ( row + RowsPerStrip > imageLength ? imageLength - row : RowsPerStrip )
LVAL	169:12	169:12	12	nrow
FIELD	169:12	169:12	13	nrow
LEAF_NODE	169:12	169:12	14	nrow
ASSIGN_OP	169:17	169:17	12	=
LEAF_NODE	169:17	169:17	13	=
RVAL	169:19	170:12	12	( row + RowsPerStrip > imageLength ? imageLength - row : RowsPerStrip )
LEAF_NODE	169:19	169:19	13	(
COND_EXPR	169:20	170:0	13	row + RowsPerStrip > imageLength ? imageLength - row : RowsPerStrip
CONDITION	169:20	169:41	14	row + RowsPerStrip > imageLength
FIELD	169:20	169:20	15	row
LEAF_NODE	169:20	169:20	16	row
LEAF_NODE	169:24	169:24	15	+
FIELD	169:26	169:26	15	RowsPerStrip
LEAF_NODE	169:26	169:26	16	RowsPerStrip
REL_OPERATOR	169:39	169:39	15	>
LEAF_NODE	169:39	169:39	16	>
FIELD	169:41	169:41	15	imageLength
LEAF_NODE	169:41	169:41	16	imageLength
LEAF_NODE	169:53	169:53	14	?
EXPR	169:55	169:69	14	imageLength - row
FIELD	169:55	169:55	15	imageLength
LEAF_NODE	169:55	169:55	16	imageLength
LEAF_NODE	169:67	169:67	15	-
FIELD	169:69	169:69	15	row
LEAF_NODE	169:69	169:69	16	row
LEAF_NODE	169:73	169:73	14	:
FIELD	170:0	170:0	14	RowsPerStrip
LEAF_NODE	170:0	170:0	15	RowsPerStrip
LEAF_NODE	170:12	170:12	13	)
LEAF_NODE	170:13	170:13	10	;
SELECTION	171:12	173:18	9	
KEYWORD	171:12	171:12	10	if
LEAF_NODE	171:12	171:12	11	if
LEAF_NODE	171:15	171:15	10	(
CONDITION	171:16	171:16	10	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , row , 0 ) , buf , nrow * LineSize ) == - 1
EXPR	171:16	172:37	11	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , row , 0 ) , buf , nrow * LineSize ) == - 1
FUNCTION_CALL	171:16	172:34	12	TIFFReadEncodedStrip ( tif , TIFFComputeStrip ( tif , row , 0 ) , buf , nrow * LineSize )
CALLEE	171:16	171:16	13	TIFFReadEncodedStrip
LEAF_NODE	171:16	171:16	14	TIFFReadEncodedStrip
LEAF_NODE	171:36	171:36	13	(
ARGUMENT	171:37	171:37	13	tif
FIELD	171:37	171:37	14	tif
LEAF_NODE	171:37	171:37	15	tif
LEAF_NODE	171:40	171:40	13	,
ARGUMENT	171:42	171:42	13	TIFFComputeStrip ( tif , row , 0 )
FUNCTION_CALL	171:42	171:70	14	TIFFComputeStrip ( tif , row , 0 )
CALLEE	171:42	171:42	15	TIFFComputeStrip
LEAF_NODE	171:42	171:42	16	TIFFComputeStrip
LEAF_NODE	171:58	171:58	15	(
ARGUMENT	171:59	171:59	15	tif
FIELD	171:59	171:59	16	tif
LEAF_NODE	171:59	171:59	17	tif
LEAF_NODE	171:62	171:62	15	,
ARGUMENT	171:64	171:64	15	row
FIELD	171:64	171:64	16	row
LEAF_NODE	171:64	171:64	17	row
LEAF_NODE	171:67	171:67	15	,
ARGUMENT	171:69	171:69	15	0
FIELD	171:69	171:69	16	0
LEAF_NODE	171:69	171:69	17	0
LEAF_NODE	171:70	171:70	15	)
LEAF_NODE	171:71	171:71	13	,
ARGUMENT	172:16	172:16	13	buf
FIELD	172:16	172:16	14	buf
LEAF_NODE	172:16	172:16	15	buf
LEAF_NODE	172:19	172:19	13	,
ARGUMENT	172:21	172:26	13	nrow * LineSize
FIELD	172:21	172:21	14	nrow
LEAF_NODE	172:21	172:21	15	nrow
LEAF_NODE	172:25	172:25	14	*
FIELD	172:26	172:26	14	LineSize
LEAF_NODE	172:26	172:26	15	LineSize
LEAF_NODE	172:34	172:34	13	)
EQ_OPERATOR	172:35	172:35	12	==
LEAF_NODE	172:35	172:35	13	==
UNARY_EXPR	172:37	172:38	12	- 1
UNARY_OPERATOR	172:37	172:37	13	-
LEAF_NODE	172:37	172:37	14	-
FIELD	172:38	172:38	13	1
LEAF_NODE	172:38	172:38	14	1
LEAF_NODE	172:39	172:39	10	)
STATEMENTS	173:18	175:18	10	
LEAF_NODE	173:18	173:18	11	{
STATEMENTS	174:21	174:21	11	
JUMP_STATEMENT	174:21	174:39	12	goto TiffReadError ;
KEYWORD	174:21	174:21	13	goto
LEAF_NODE	174:21	174:21	14	goto
DESTINATION	174:26	174:26	13	TiffReadError
LEAF_NODE	174:26	174:26	14	TiffReadError
LEAF_NODE	174:39	174:39	13	;
LEAF_NODE	175:18	175:18	11	}
SELECTION	176:12	177:18	9	
KEYWORD	176:12	176:12	10	else
LEAF_NODE	176:12	176:12	11	else
STATEMENTS	177:18	197:17	10	
LEAF_NODE	177:18	177:18	11	{
STATEMENTS	178:20	178:20	11	
ITERATION	178:20	179:22	12	
KEYWORD	178:20	178:20	13	for
LEAF_NODE	178:20	178:20	14	for
LEAF_NODE	178:24	178:24	13	(
FOR_INIT	178:25	178:30	13	l = 0 ;
EXPR	178:25	178:25	14	l = 0
ASSIGN	178:25	178:29	15	l = 0
LVAL	178:25	178:25	16	l
FIELD	178:25	178:25	17	l
LEAF_NODE	178:25	178:25	18	l
ASSIGN_OP	178:27	178:27	16	=
LEAF_NODE	178:27	178:27	17	=
RVAL	178:29	178:29	16	0
FIELD	178:29	178:29	17	0
LEAF_NODE	178:29	178:29	18	0
LEAF_NODE	178:30	178:30	14	;
CONDITION	178:32	178:32	13	l < nrow
EXPR	178:32	178:36	14	l < nrow
FIELD	178:32	178:32	15	l
LEAF_NODE	178:32	178:32	16	l
REL_OPERATOR	178:34	178:34	15	<
LEAF_NODE	178:34	178:34	16	<
FIELD	178:36	178:36	15	nrow
LEAF_NODE	178:36	178:36	16	nrow
LEAF_NODE	178:40	178:40	13	;
FOR_EXPR	178:42	178:42	13	l ++
EXPR	178:42	178:42	14	l ++
FIELD	178:42	178:43	15	l ++
LEAF_NODE	178:42	178:42	16	l
LEAF_NODE	178:43	178:43	16	++
LEAF_NODE	178:45	178:45	13	)
STATEMENTS	179:22	196:22	13	
LEAF_NODE	179:22	179:22	14	{
STATEMENTS	180:25	194:25	14	
SELECTION	180:25	181:27	15	
KEYWORD	180:25	180:25	16	if
LEAF_NODE	180:25	180:25	17	if
LEAF_NODE	180:28	180:28	16	(
CONDITION	180:29	180:29	16	SamplePerPixel == 3
EXPR	180:29	180:48	17	SamplePerPixel == 3
FIELD	180:29	180:29	18	SamplePerPixel
LEAF_NODE	180:29	180:29	19	SamplePerPixel
EQ_OPERATOR	180:45	180:45	18	==
LEAF_NODE	180:45	180:45	19	==
FIELD	180:48	180:48	18	3
LEAF_NODE	180:48	180:48	19	3
LEAF_NODE	180:49	180:49	16	)
STATEMENTS	181:27	181:27	16	
LEAF_NODE	181:27	181:27	17	for
LEAF_NODE	181:31	181:31	15	(
EXPR_STATEMENT	181:32	181:35	15	i = 0 ;
EXPR	181:32	181:32	16	i = 0
ASSIGN	181:32	181:34	17	i = 0
LVAL	181:32	181:32	18	i
FIELD	181:32	181:32	19	i
LEAF_NODE	181:32	181:32	20	i
ASSIGN_OP	181:33	181:33	18	=
LEAF_NODE	181:33	181:33	19	=
RVAL	181:34	181:34	18	0
FIELD	181:34	181:34	19	0
LEAF_NODE	181:34	181:34	20	0
LEAF_NODE	181:35	181:35	16	;
LEAF_NODE	181:36	181:36	15	i
LEAF_NODE	181:37	181:37	15	<
LEAF_NODE	181:39	181:39	15	(
LEAF_NODE	181:40	181:40	15	int
LEAF_NODE	181:43	181:43	15	)
LEAF_NODE	181:45	181:45	15	(
LEAF_NODE	181:46	181:46	15	imageWidth
LEAF_NODE	181:56	181:56	15	)
LEAF_NODE	181:57	181:57	15	;
LEAF_NODE	181:58	181:58	15	i
LEAF_NODE	181:59	181:59	15	++
LEAF_NODE	181:61	181:61	15	)
LEAF_NODE	182:30	182:30	15	{
STATEMENTS	183:31	188:11	15	
LEAF_NODE	183:31	183:31	16	lpBits
LEAF_NODE	183:37	183:37	16	[
LEAF_NODE	183:38	183:38	16	i
LEAF_NODE	183:39	183:39	16	*
LEAF_NODE	183:40	183:40	16	SamplePerPixel
LEAF_NODE	183:54	183:54	16	+
LEAF_NODE	183:55	183:55	16	0
LEAF_NODE	183:56	183:56	16	]
LEAF_NODE	183:57	183:57	16	=
LEAF_NODE	183:58	183:58	16	buf
LEAF_NODE	183:61	183:61	16	[
LEAF_NODE	183:62	183:62	16	l
LEAF_NODE	183:63	183:63	16	*
LEAF_NODE	183:64	183:64	16	LineSize
LEAF_NODE	183:72	183:72	16	+
LEAF_NODE	183:73	183:73	16	i
LEAF_NODE	183:74	183:74	16	*
LEAF_NODE	183:75	183:75	16	Sample
LEAF_NODE	184:0	184:0	16	PerPixel
LEAF_NODE	184:8	184:8	16	+
LEAF_NODE	184:9	184:9	16	2
LEAF_NODE	184:10	184:10	16	]
LEAF_NODE	184:11	184:11	16	;
LEAF_NODE	185:31	185:31	16	lpBits
LEAF_NODE	185:37	185:37	16	[
LEAF_NODE	185:38	185:38	16	i
LEAF_NODE	185:39	185:39	16	*
LEAF_NODE	185:40	185:40	16	SamplePerPixel
LEAF_NODE	185:54	185:54	16	+
LEAF_NODE	185:55	185:55	16	1
LEAF_NODE	185:56	185:56	16	]
LEAF_NODE	185:57	185:57	16	=
LEAF_NODE	185:58	185:58	16	buf
LEAF_NODE	185:61	185:61	16	[
LEAF_NODE	185:62	185:62	16	l
LEAF_NODE	185:63	185:63	16	*
LEAF_NODE	185:64	185:64	16	LineSize
LEAF_NODE	185:72	185:72	16	+
LEAF_NODE	185:73	185:73	16	i
LEAF_NODE	185:74	185:74	16	*
LEAF_NODE	185:75	185:75	16	Sample
LEAF_NODE	186:0	186:0	16	PerPixel
LEAF_NODE	186:8	186:8	16	+
LEAF_NODE	186:9	186:9	16	1
LEAF_NODE	186:10	186:10	16	]
LEAF_NODE	186:11	186:11	16	;
LEAF_NODE	187:31	187:31	16	lpBits
LEAF_NODE	187:37	187:37	16	[
LEAF_NODE	187:38	187:38	16	i
LEAF_NODE	187:39	187:39	16	*
LEAF_NODE	187:40	187:40	16	SamplePerPixel
LEAF_NODE	187:54	187:54	16	+
LEAF_NODE	187:55	187:55	16	2
LEAF_NODE	187:56	187:56	16	]
LEAF_NODE	187:57	187:57	16	=
LEAF_NODE	187:58	187:58	16	buf
LEAF_NODE	187:61	187:61	16	[
LEAF_NODE	187:62	187:62	16	l
LEAF_NODE	187:63	187:63	16	*
LEAF_NODE	187:64	187:64	16	LineSize
LEAF_NODE	187:72	187:72	16	+
LEAF_NODE	187:73	187:73	16	i
LEAF_NODE	187:74	187:74	16	*
LEAF_NODE	187:75	187:75	16	Sample
LEAF_NODE	188:0	188:0	16	PerPixel
LEAF_NODE	188:8	188:8	16	+
LEAF_NODE	188:9	188:9	16	0
LEAF_NODE	188:10	188:10	16	]
LEAF_NODE	188:11	188:11	16	;
LEAF_NODE	189:30	189:30	15	}
SELECTION	190:25	191:27	15	
KEYWORD	190:25	190:25	16	else
LEAF_NODE	190:25	190:25	17	else
STATEMENTS	191:27	191:27	16	
EXPR_STATEMENT	191:27	192:26	17	memcpy ( lpBits , & buf [ ( int ) ( l * LineSize ) ] , ( int ) imageWidth * SamplePerPixel ) ;
EXPR	191:27	191:27	18	memcpy ( lpBits , & buf [ ( int ) ( l * LineSize ) ] , ( int ) imageWidth * SamplePerPixel )
FUNCTION_CALL	191:27	192:25	19	memcpy ( lpBits , & buf [ ( int ) ( l * LineSize ) ] , ( int ) imageWidth * SamplePerPixel )
CALLEE	191:27	191:27	20	memcpy
LEAF_NODE	191:27	191:27	21	memcpy
LEAF_NODE	191:33	191:33	20	(
ARGUMENT	191:34	191:34	20	lpBits
FIELD	191:34	191:34	21	lpBits
LEAF_NODE	191:34	191:34	22	lpBits
LEAF_NODE	191:40	191:40	20	,
ARGUMENT	191:42	191:42	20	& buf [ ( int ) ( l * LineSize ) ]
UNARY_EXPR	191:42	191:43	21	& buf [ ( int ) ( l * LineSize ) ]
UNARY_OPERATOR	191:42	191:42	22	&
LEAF_NODE	191:42	191:42	23	&
FIELD	191:43	191:65	22	buf [ ( int ) ( l * LineSize ) ]
LEAF_NODE	191:43	191:43	23	buf
LEAF_NODE	191:46	191:46	23	[
EXPR	191:47	191:64	23	( int ) ( l * LineSize )
LEAF_NODE	191:47	191:47	24	(
TYPE_NAME	191:48	191:48	24	int
LEAF_NODE	191:48	191:48	25	int
LEAF_NODE	191:51	191:51	24	)
LEAF_NODE	191:53	191:53	24	(
FIELD	191:54	191:54	24	l
LEAF_NODE	191:54	191:54	25	l
LEAF_NODE	191:55	191:55	24	*
FIELD	191:56	191:56	24	LineSize
LEAF_NODE	191:56	191:56	25	LineSize
LEAF_NODE	191:64	191:64	24	)
LEAF_NODE	191:65	191:65	23	]
LEAF_NODE	191:66	191:66	20	,
ARGUMENT	191:68	192:11	20	( int ) imageWidth * SamplePerPixel
LEAF_NODE	191:68	191:68	21	(
TYPE_NAME	191:69	191:69	21	int
LEAF_NODE	191:69	191:69	22	int
LEAF_NODE	191:72	191:72	21	)
FIELD	192:0	192:0	21	imageWidth
LEAF_NODE	192:0	192:0	22	imageWidth
LEAF_NODE	192:10	192:10	21	*
FIELD	192:11	192:11	21	SamplePerPixel
LEAF_NODE	192:11	192:11	22	SamplePerPixel
LEAF_NODE	192:25	192:25	20	)
LEAF_NODE	192:26	192:26	18	;
EXPR_STATEMENT	194:25	194:64	15	lpBits -= imageWidth * SamplePerPixel + Align ;
EXPR	194:25	194:25	16	lpBits -= imageWidth * SamplePerPixel + Align
ASSIGN	194:25	194:33	17	lpBits -= imageWidth * SamplePerPixel + Align
LVAL	194:25	194:25	18	lpBits
FIELD	194:25	194:25	19	lpBits
LEAF_NODE	194:25	194:25	20	lpBits
ASSIGN_OP	194:31	194:31	18	-=
LEAF_NODE	194:31	194:31	19	-=
RVAL	194:33	194:59	18	imageWidth * SamplePerPixel + Align
FIELD	194:33	194:33	19	imageWidth
LEAF_NODE	194:33	194:33	20	imageWidth
LEAF_NODE	194:43	194:43	19	*
FIELD	194:44	194:44	19	SamplePerPixel
LEAF_NODE	194:44	194:44	20	SamplePerPixel
LEAF_NODE	194:58	194:58	19	+
FIELD	194:59	194:59	19	Align
LEAF_NODE	194:59	194:59	20	Align
LEAF_NODE	194:64	194:64	16	;
LEAF_NODE	196:22	196:22	14	}
LEAF_NODE	197:17	197:17	11	}
LEAF_NODE	198:10	198:10	8	}
EXPR_STATEMENT	199:8	199:28	6	GlobalUnlock ( hStrip ) ;
EXPR	199:8	199:8	7	GlobalUnlock ( hStrip )
FUNCTION_CALL	199:8	199:27	8	GlobalUnlock ( hStrip )
CALLEE	199:8	199:8	9	GlobalUnlock
LEAF_NODE	199:8	199:8	10	GlobalUnlock
LEAF_NODE	199:20	199:20	9	(
ARGUMENT	199:21	199:21	9	hStrip
FIELD	199:21	199:21	10	hStrip
LEAF_NODE	199:21	199:21	11	hStrip
LEAF_NODE	199:27	199:27	9	)
LEAF_NODE	199:28	199:28	7	;
EXPR_STATEMENT	200:8	200:26	6	GlobalFree ( hStrip ) ;
EXPR	200:8	200:8	7	GlobalFree ( hStrip )
FUNCTION_CALL	200:8	200:25	8	GlobalFree ( hStrip )
CALLEE	200:8	200:8	9	GlobalFree
LEAF_NODE	200:8	200:8	10	GlobalFree
LEAF_NODE	200:18	200:18	9	(
ARGUMENT	200:19	200:19	9	hStrip
FIELD	200:19	200:19	10	hStrip
LEAF_NODE	200:19	200:19	11	hStrip
LEAF_NODE	200:25	200:25	9	)
LEAF_NODE	200:26	200:26	7	;
EXPR_STATEMENT	201:8	201:26	6	GlobalUnlock ( hDIB ) ;
EXPR	201:8	201:8	7	GlobalUnlock ( hDIB )
FUNCTION_CALL	201:8	201:25	8	GlobalUnlock ( hDIB )
CALLEE	201:8	201:8	9	GlobalUnlock
LEAF_NODE	201:8	201:8	10	GlobalUnlock
LEAF_NODE	201:20	201:20	9	(
ARGUMENT	201:21	201:21	9	hDIB
FIELD	201:21	201:21	10	hDIB
LEAF_NODE	201:21	201:21	11	hDIB
LEAF_NODE	201:25	201:25	9	)
LEAF_NODE	201:26	201:26	7	;
EXPR_STATEMENT	202:8	202:22	6	TIFFClose ( tif ) ;
EXPR	202:8	202:8	7	TIFFClose ( tif )
FUNCTION_CALL	202:8	202:21	8	TIFFClose ( tif )
CALLEE	202:8	202:8	9	TIFFClose
LEAF_NODE	202:8	202:8	10	TIFFClose
LEAF_NODE	202:17	202:17	9	(
ARGUMENT	202:18	202:18	9	tif
FIELD	202:18	202:18	10	tif
LEAF_NODE	202:18	202:18	11	tif
LEAF_NODE	202:21	202:21	9	)
LEAF_NODE	202:22	202:22	7	;
LEAF_NODE	203:6	203:6	5	}
JUMP_STATEMENT	205:4	205:15	3	return hDIB ;
KEYWORD	205:4	205:4	4	return
LEAF_NODE	205:4	205:4	5	return
DESTINATION	205:11	205:11	4	hDIB
EXPR	205:11	205:11	5	hDIB
FIELD	205:11	205:11	6	hDIB
LEAF_NODE	205:11	205:11	7	hDIB
LEAF_NODE	205:15	205:15	4	;
LABEL	207:4	207:18	3	OutOfBufMemory :
LEAF_NODE	207:4	207:4	4	OutOfBufMemory
LEAF_NODE	207:18	207:18	4	:
LABEL	209:4	209:17	3	TiffReadError :
LEAF_NODE	209:4	209:4	4	TiffReadError
LEAF_NODE	209:17	209:17	4	:
EXPR_STATEMENT	210:7	210:25	3	GlobalUnlock ( hDIB ) ;
EXPR	210:7	210:7	4	GlobalUnlock ( hDIB )
FUNCTION_CALL	210:7	210:24	5	GlobalUnlock ( hDIB )
CALLEE	210:7	210:7	6	GlobalUnlock
LEAF_NODE	210:7	210:7	7	GlobalUnlock
LEAF_NODE	210:19	210:19	6	(
ARGUMENT	210:20	210:20	6	hDIB
FIELD	210:20	210:20	7	hDIB
LEAF_NODE	210:20	210:20	8	hDIB
LEAF_NODE	210:24	210:24	6	)
LEAF_NODE	210:25	210:25	4	;
EXPR_STATEMENT	211:7	211:25	3	GlobalFree ( hStrip ) ;
EXPR	211:7	211:7	4	GlobalFree ( hStrip )
FUNCTION_CALL	211:7	211:24	5	GlobalFree ( hStrip )
CALLEE	211:7	211:7	6	GlobalFree
LEAF_NODE	211:7	211:7	7	GlobalFree
LEAF_NODE	211:17	211:17	6	(
ARGUMENT	211:18	211:18	6	hStrip
FIELD	211:18	211:18	7	hStrip
LEAF_NODE	211:18	211:18	8	hStrip
LEAF_NODE	211:24	211:24	6	)
LEAF_NODE	211:25	211:25	4	;
LABEL	212:4	212:18	3	OutOfDIBMemory :
LEAF_NODE	212:4	212:4	4	OutOfDIBMemory
LEAF_NODE	212:18	212:18	4	:
EXPR_STATEMENT	213:7	213:21	3	TIFFClose ( tif ) ;
EXPR	213:7	213:7	4	TIFFClose ( tif )
FUNCTION_CALL	213:7	213:20	5	TIFFClose ( tif )
CALLEE	213:7	213:7	6	TIFFClose
LEAF_NODE	213:7	213:7	7	TIFFClose
LEAF_NODE	213:16	213:16	6	(
ARGUMENT	213:17	213:17	6	tif
FIELD	213:17	213:17	7	tif
LEAF_NODE	213:17	213:17	8	tif
LEAF_NODE	213:20	213:20	6	)
LEAF_NODE	213:21	213:21	4	;
LABEL	214:4	214:17	3	TiffOpenError :
LEAF_NODE	214:4	214:4	4	TiffOpenError
LEAF_NODE	214:17	214:17	4	:
JUMP_STATEMENT	215:7	215:24	3	return ( HANDLE ) 0 ;
KEYWORD	215:7	215:7	4	return
LEAF_NODE	215:7	215:7	5	return
DESTINATION	215:14	215:14	4	( HANDLE ) 0
EXPR	215:14	215:23	5	( HANDLE ) 0
LEAF_NODE	215:14	215:14	6	(
TYPE_NAME	215:15	215:15	6	HANDLE
LEAF_NODE	215:15	215:15	7	HANDLE
LEAF_NODE	215:21	215:21	6	)
FIELD	215:23	215:23	6	0
LEAF_NODE	215:23	215:23	7	0
LEAF_NODE	215:24	215:24	4	;
LEAF_NODE	218:0	218:0	2	}
FUNCTION_DEF	221:0	228:0	1	
RETURN_TYPE	221:0	221:7	2	static int
LEAF_NODE	221:0	221:0	3	static
TYPE_NAME	221:7	221:7	3	int
LEAF_NODE	221:7	221:7	4	int
FUNCTION_NAME	221:11	221:11	2	checkcmap
LEAF_NODE	221:11	221:11	3	checkcmap
PARAMETER_LIST	221:20	221:59	2	( int n , uint16 * r , uint16 * g , uint16 * b )
LEAF_NODE	221:20	221:20	3	(
PARAMETER_DECL	221:21	221:25	3	int n
TYPE	221:21	221:21	4	int
TYPE_NAME	221:21	221:21	5	int
LEAF_NODE	221:21	221:21	6	int
NAME	221:25	221:25	4	n
LEAF_NODE	221:25	221:25	5	n
LEAF_NODE	221:26	221:26	3	,
PARAMETER_DECL	221:28	221:36	3	uint16 * r
TYPE	221:28	221:34	4	uint16 *
TYPE_NAME	221:28	221:28	5	uint16
LEAF_NODE	221:28	221:28	6	uint16
POINTER	221:34	221:34	5	*
LEAF_NODE	221:34	221:34	6	*
NAME	221:36	221:36	4	r
LEAF_NODE	221:36	221:36	5	r
LEAF_NODE	221:37	221:37	3	,
PARAMETER_DECL	221:39	221:47	3	uint16 * g
TYPE	221:39	221:45	4	uint16 *
TYPE_NAME	221:39	221:39	5	uint16
LEAF_NODE	221:39	221:39	6	uint16
POINTER	221:45	221:45	5	*
LEAF_NODE	221:45	221:45	6	*
NAME	221:47	221:47	4	g
LEAF_NODE	221:47	221:47	5	g
LEAF_NODE	221:48	221:48	3	,
PARAMETER_DECL	221:50	221:58	3	uint16 * b
TYPE	221:50	221:56	4	uint16 *
TYPE_NAME	221:50	221:50	5	uint16
LEAF_NODE	221:50	221:50	6	uint16
POINTER	221:56	221:56	5	*
LEAF_NODE	221:56	221:56	6	*
NAME	221:58	221:58	4	b
LEAF_NODE	221:58	221:58	5	b
LEAF_NODE	221:59	221:59	3	)
LEAF_NODE	222:0	222:0	2	{
STATEMENTS	223:4	227:4	2	
ITERATION	223:4	224:8	3	
KEYWORD	223:4	223:4	4	while
LEAF_NODE	223:4	223:4	5	while
LEAF_NODE	223:10	223:10	4	(
CONDITION	223:11	223:11	4	n -- > 0
EXPR	223:11	223:17	5	n -- > 0
FIELD	223:11	223:12	6	n --
LEAF_NODE	223:11	223:11	7	n
LEAF_NODE	223:12	223:12	7	--
REL_OPERATOR	223:15	223:15	6	>
LEAF_NODE	223:15	223:15	7	>
FIELD	223:17	223:17	6	0
LEAF_NODE	223:17	223:17	7	0
LEAF_NODE	223:18	223:18	4	)
STATEMENTS	224:8	224:8	4	
SELECTION	224:8	225:8	5	
KEYWORD	224:8	224:8	6	if
LEAF_NODE	224:8	224:8	7	if
LEAF_NODE	224:11	224:11	6	(
CONDITION	224:12	224:12	6	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	224:12	224:12	7	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
OR	224:12	224:27	8	* r ++ >= 256 || * g ++ >= 256 || * b ++ >= 256
EXPR	224:12	224:20	9	* r ++ >= 256
UNARY_EXPR	224:12	224:13	10	* r ++
UNARY_OPERATOR	224:12	224:12	11	*
LEAF_NODE	224:12	224:12	12	*
FIELD	224:13	224:14	11	r ++
LEAF_NODE	224:13	224:13	12	r
LEAF_NODE	224:14	224:14	12	++
REL_OPERATOR	224:17	224:17	10	>=
LEAF_NODE	224:17	224:17	11	>=
FIELD	224:20	224:20	10	256
LEAF_NODE	224:20	224:20	11	256
LEAF_NODE	224:24	224:24	9	||
EXPR	224:27	224:27	9	* g ++ >= 256 || * b ++ >= 256
OR	224:27	224:42	10	* g ++ >= 256 || * b ++ >= 256
EXPR	224:27	224:35	11	* g ++ >= 256
UNARY_EXPR	224:27	224:28	12	* g ++
UNARY_OPERATOR	224:27	224:27	13	*
LEAF_NODE	224:27	224:27	14	*
FIELD	224:28	224:29	13	g ++
LEAF_NODE	224:28	224:28	14	g
LEAF_NODE	224:29	224:29	14	++
REL_OPERATOR	224:32	224:32	12	>=
LEAF_NODE	224:32	224:32	13	>=
FIELD	224:35	224:35	12	256
LEAF_NODE	224:35	224:35	13	256
LEAF_NODE	224:39	224:39	11	||
EXPR	224:42	224:50	11	* b ++ >= 256
UNARY_EXPR	224:42	224:43	12	* b ++
UNARY_OPERATOR	224:42	224:42	13	*
LEAF_NODE	224:42	224:42	14	*
FIELD	224:43	224:44	13	b ++
LEAF_NODE	224:43	224:43	14	b
LEAF_NODE	224:44	224:44	14	++
REL_OPERATOR	224:47	224:47	12	>=
LEAF_NODE	224:47	224:47	13	>=
FIELD	224:50	224:50	12	256
LEAF_NODE	224:50	224:50	13	256
LEAF_NODE	224:53	224:53	6	)
STATEMENTS	225:8	225:8	6	
JUMP_STATEMENT	225:8	225:19	7	return ( 16 ) ;
KEYWORD	225:8	225:8	8	return
LEAF_NODE	225:8	225:8	9	return
DESTINATION	225:15	225:15	8	( 16 )
EXPR	225:15	225:18	9	( 16 )
LEAF_NODE	225:15	225:15	10	(
FIELD	225:16	225:16	10	16
LEAF_NODE	225:16	225:16	11	16
LEAF_NODE	225:18	225:18	10	)
LEAF_NODE	225:19	225:19	8	;
JUMP_STATEMENT	227:4	227:14	3	return ( 8 ) ;
KEYWORD	227:4	227:4	4	return
LEAF_NODE	227:4	227:4	5	return
DESTINATION	227:11	227:11	4	( 8 )
EXPR	227:11	227:13	5	( 8 )
LEAF_NODE	227:11	227:11	6	(
FIELD	227:12	227:12	6	8
LEAF_NODE	227:12	227:12	7	8
LEAF_NODE	227:13	227:13	6	)
LEAF_NODE	227:14	227:14	4	;
LEAF_NODE	228:0	228:0	2	}
FUNCTION_DEF	246:0	311:0	1	
RETURN_TYPE	246:0	246:0	2	HDIB
TYPE_NAME	246:0	246:0	3	HDIB
LEAF_NODE	246:0	246:0	4	HDIB
FUNCTION_NAME	246:5	246:5	2	CreateDIB
LEAF_NODE	246:5	246:5	3	CreateDIB
PARAMETER_LIST	246:14	246:60	2	( DWORD dwWidth , DWORD dwHeight , WORD wBitCount )
LEAF_NODE	246:14	246:14	3	(
PARAMETER_DECL	246:15	246:21	3	DWORD dwWidth
TYPE	246:15	246:15	4	DWORD
TYPE_NAME	246:15	246:15	5	DWORD
LEAF_NODE	246:15	246:15	6	DWORD
NAME	246:21	246:21	4	dwWidth
LEAF_NODE	246:21	246:21	5	dwWidth
LEAF_NODE	246:28	246:28	3	,
PARAMETER_DECL	246:30	246:36	3	DWORD dwHeight
TYPE	246:30	246:30	4	DWORD
TYPE_NAME	246:30	246:30	5	DWORD
LEAF_NODE	246:30	246:30	6	DWORD
NAME	246:36	246:36	4	dwHeight
LEAF_NODE	246:36	246:36	5	dwHeight
LEAF_NODE	246:44	246:44	3	,
PARAMETER_DECL	246:46	246:51	3	WORD wBitCount
TYPE	246:46	246:46	4	WORD
TYPE_NAME	246:46	246:46	5	WORD
LEAF_NODE	246:46	246:46	6	WORD
NAME	246:51	246:51	4	wBitCount
LEAF_NODE	246:51	246:51	5	wBitCount
LEAF_NODE	246:60	246:60	3	)
LEAF_NODE	247:0	247:0	2	{
STATEMENTS	248:3	310:3	2	
SIMPLE_DECL	248:3	248:22	3	BITMAPINFOHEADER bi ;
VAR_DECL	248:3	248:20	4	BITMAPINFOHEADER bi
TYPE	248:3	248:3	5	BITMAPINFOHEADER
TYPE_NAME	248:3	248:3	6	BITMAPINFOHEADER
LEAF_NODE	248:3	248:3	7	BITMAPINFOHEADER
NAME	248:20	248:20	5	bi
LEAF_NODE	248:20	248:20	6	bi
LEAF_NODE	248:22	248:22	4	;
SIMPLE_DECL	249:3	249:26	3	LPBITMAPINFOHEADER lpbi ;
VAR_DECL	249:3	249:22	4	LPBITMAPINFOHEADER lpbi
TYPE	249:3	249:3	5	LPBITMAPINFOHEADER
TYPE_NAME	249:3	249:3	6	LPBITMAPINFOHEADER
LEAF_NODE	249:3	249:3	7	LPBITMAPINFOHEADER
NAME	249:22	249:22	5	lpbi
LEAF_NODE	249:22	249:22	6	lpbi
LEAF_NODE	249:26	249:26	4	;
SIMPLE_DECL	250:3	250:14	3	DWORD dwLen ;
VAR_DECL	250:3	250:9	4	DWORD dwLen
TYPE	250:3	250:3	5	DWORD
TYPE_NAME	250:3	250:3	6	DWORD
LEAF_NODE	250:3	250:3	7	DWORD
NAME	250:9	250:9	5	dwLen
LEAF_NODE	250:9	250:9	6	dwLen
LEAF_NODE	250:14	250:14	4	;
SIMPLE_DECL	251:3	251:12	3	HDIB hDIB ;
VAR_DECL	251:3	251:8	4	HDIB hDIB
TYPE	251:3	251:3	5	HDIB
TYPE_NAME	251:3	251:3	6	HDIB
LEAF_NODE	251:3	251:3	7	HDIB
NAME	251:8	251:8	5	hDIB
LEAF_NODE	251:8	251:8	6	hDIB
LEAF_NODE	251:12	251:12	4	;
SIMPLE_DECL	252:3	252:23	3	DWORD dwBytesPerLine ;
VAR_DECL	252:3	252:9	4	DWORD dwBytesPerLine
TYPE	252:3	252:3	5	DWORD
TYPE_NAME	252:3	252:3	6	DWORD
LEAF_NODE	252:3	252:3	7	DWORD
NAME	252:9	252:9	5	dwBytesPerLine
LEAF_NODE	252:9	252:9	6	dwBytesPerLine
LEAF_NODE	252:23	252:23	4	;
SELECTION	256:3	257:6	3	
KEYWORD	256:3	256:3	4	if
LEAF_NODE	256:3	256:3	5	if
LEAF_NODE	256:6	256:6	4	(
CONDITION	256:7	256:7	4	wBitCount <= 1
EXPR	256:7	256:20	5	wBitCount <= 1
FIELD	256:7	256:7	6	wBitCount
LEAF_NODE	256:7	256:7	7	wBitCount
REL_OPERATOR	256:17	256:17	6	<=
LEAF_NODE	256:17	256:17	7	<=
FIELD	256:20	256:20	6	1
LEAF_NODE	256:20	256:20	7	1
LEAF_NODE	256:21	256:21	4	)
STATEMENTS	257:6	257:6	4	
EXPR_STATEMENT	257:6	257:19	5	wBitCount = 1 ;
EXPR	257:6	257:6	6	wBitCount = 1
ASSIGN	257:6	257:18	7	wBitCount = 1
LVAL	257:6	257:6	8	wBitCount
FIELD	257:6	257:6	9	wBitCount
LEAF_NODE	257:6	257:6	10	wBitCount
ASSIGN_OP	257:16	257:16	8	=
LEAF_NODE	257:16	257:16	9	=
RVAL	257:18	257:18	8	1
FIELD	257:18	257:18	9	1
LEAF_NODE	257:18	257:18	10	1
LEAF_NODE	257:19	257:19	6	;
SELECTION	258:3	258:8	3	
KEYWORD	258:3	258:3	4	else
LEAF_NODE	258:3	258:3	5	else
STATEMENTS	258:8	258:8	4	
SELECTION	258:8	259:6	5	
KEYWORD	258:8	258:8	6	if
LEAF_NODE	258:8	258:8	7	if
LEAF_NODE	258:11	258:11	6	(
CONDITION	258:12	258:12	6	wBitCount <= 4
EXPR	258:12	258:25	7	wBitCount <= 4
FIELD	258:12	258:12	8	wBitCount
LEAF_NODE	258:12	258:12	9	wBitCount
REL_OPERATOR	258:22	258:22	8	<=
LEAF_NODE	258:22	258:22	9	<=
FIELD	258:25	258:25	8	4
LEAF_NODE	258:25	258:25	9	4
LEAF_NODE	258:26	258:26	6	)
STATEMENTS	259:6	259:6	6	
EXPR_STATEMENT	259:6	259:19	7	wBitCount = 4 ;
EXPR	259:6	259:6	8	wBitCount = 4
ASSIGN	259:6	259:18	9	wBitCount = 4
LVAL	259:6	259:6	10	wBitCount
FIELD	259:6	259:6	11	wBitCount
LEAF_NODE	259:6	259:6	12	wBitCount
ASSIGN_OP	259:16	259:16	10	=
LEAF_NODE	259:16	259:16	11	=
RVAL	259:18	259:18	10	4
FIELD	259:18	259:18	11	4
LEAF_NODE	259:18	259:18	12	4
LEAF_NODE	259:19	259:19	8	;
SELECTION	260:3	260:8	3	
KEYWORD	260:3	260:3	4	else
LEAF_NODE	260:3	260:3	5	else
STATEMENTS	260:8	260:8	4	
SELECTION	260:8	261:6	5	
KEYWORD	260:8	260:8	6	if
LEAF_NODE	260:8	260:8	7	if
LEAF_NODE	260:11	260:11	6	(
CONDITION	260:12	260:12	6	wBitCount <= 8
EXPR	260:12	260:25	7	wBitCount <= 8
FIELD	260:12	260:12	8	wBitCount
LEAF_NODE	260:12	260:12	9	wBitCount
REL_OPERATOR	260:22	260:22	8	<=
LEAF_NODE	260:22	260:22	9	<=
FIELD	260:25	260:25	8	8
LEAF_NODE	260:25	260:25	9	8
LEAF_NODE	260:26	260:26	6	)
STATEMENTS	261:6	261:6	6	
EXPR_STATEMENT	261:6	261:19	7	wBitCount = 8 ;
EXPR	261:6	261:6	8	wBitCount = 8
ASSIGN	261:6	261:18	9	wBitCount = 8
LVAL	261:6	261:6	10	wBitCount
FIELD	261:6	261:6	11	wBitCount
LEAF_NODE	261:6	261:6	12	wBitCount
ASSIGN_OP	261:16	261:16	10	=
LEAF_NODE	261:16	261:16	11	=
RVAL	261:18	261:18	10	8
FIELD	261:18	261:18	11	8
LEAF_NODE	261:18	261:18	12	8
LEAF_NODE	261:19	261:19	8	;
SELECTION	262:3	262:8	3	
KEYWORD	262:3	262:3	4	else
LEAF_NODE	262:3	262:3	5	else
STATEMENTS	262:8	262:8	4	
SELECTION	262:8	263:6	5	
KEYWORD	262:8	262:8	6	if
LEAF_NODE	262:8	262:8	7	if
LEAF_NODE	262:11	262:11	6	(
CONDITION	262:12	262:12	6	wBitCount <= 24
EXPR	262:12	262:25	7	wBitCount <= 24
FIELD	262:12	262:12	8	wBitCount
LEAF_NODE	262:12	262:12	9	wBitCount
REL_OPERATOR	262:22	262:22	8	<=
LEAF_NODE	262:22	262:22	9	<=
FIELD	262:25	262:25	8	24
LEAF_NODE	262:25	262:25	9	24
LEAF_NODE	262:27	262:27	6	)
STATEMENTS	263:6	263:6	6	
EXPR_STATEMENT	263:6	263:20	7	wBitCount = 24 ;
EXPR	263:6	263:6	8	wBitCount = 24
ASSIGN	263:6	263:18	9	wBitCount = 24
LVAL	263:6	263:6	10	wBitCount
FIELD	263:6	263:6	11	wBitCount
LEAF_NODE	263:6	263:6	12	wBitCount
ASSIGN_OP	263:16	263:16	10	=
LEAF_NODE	263:16	263:16	11	=
RVAL	263:18	263:18	10	24
FIELD	263:18	263:18	11	24
LEAF_NODE	263:18	263:18	12	24
LEAF_NODE	263:20	263:20	8	;
SELECTION	264:3	265:6	3	
KEYWORD	264:3	264:3	4	else
LEAF_NODE	264:3	264:3	5	else
STATEMENTS	265:6	265:6	4	
EXPR_STATEMENT	265:6	265:19	5	wBitCount = 4 ;
EXPR	265:6	265:6	6	wBitCount = 4
ASSIGN	265:6	265:18	7	wBitCount = 4
LVAL	265:6	265:6	8	wBitCount
FIELD	265:6	265:6	9	wBitCount
LEAF_NODE	265:6	265:6	10	wBitCount
ASSIGN_OP	265:16	265:16	8	=
LEAF_NODE	265:16	265:16	9	=
RVAL	265:18	265:18	8	4
FIELD	265:18	265:18	9	4
LEAF_NODE	265:18	265:18	10	4
LEAF_NODE	265:19	265:19	6	;
EXPR_STATEMENT	268:3	268:39	3	bi . biSize = sizeof ( BITMAPINFOHEADER ) ;
EXPR	268:3	268:3	4	bi . biSize = sizeof ( BITMAPINFOHEADER )
ASSIGN	268:3	268:15	5	bi . biSize = sizeof ( BITMAPINFOHEADER )
LVAL	268:3	268:3	6	bi . biSize
FIELD	268:3	268:6	7	bi . biSize
LEAF_NODE	268:3	268:3	8	bi
LEAF_NODE	268:5	268:5	8	.
LEAF_NODE	268:6	268:6	8	biSize
ASSIGN_OP	268:13	268:13	6	=
LEAF_NODE	268:13	268:13	7	=
RVAL	268:15	268:15	6	sizeof ( BITMAPINFOHEADER )
FUNCTION_CALL	268:15	268:38	7	sizeof ( BITMAPINFOHEADER )
CALLEE	268:15	268:15	8	sizeof
LEAF_NODE	268:15	268:15	9	sizeof
LEAF_NODE	268:21	268:21	8	(
ARGUMENT	268:22	268:22	8	BITMAPINFOHEADER
FIELD	268:22	268:22	9	BITMAPINFOHEADER
LEAF_NODE	268:22	268:22	10	BITMAPINFOHEADER
LEAF_NODE	268:38	268:38	8	)
LEAF_NODE	268:39	268:39	4	;
EXPR_STATEMENT	269:3	269:23	3	bi . biWidth = dwWidth ;
EXPR	269:3	269:3	4	bi . biWidth = dwWidth
ASSIGN	269:3	269:16	5	bi . biWidth = dwWidth
LVAL	269:3	269:3	6	bi . biWidth
FIELD	269:3	269:6	7	bi . biWidth
LEAF_NODE	269:3	269:3	8	bi
LEAF_NODE	269:5	269:5	8	.
LEAF_NODE	269:6	269:6	8	biWidth
ASSIGN_OP	269:14	269:14	6	=
LEAF_NODE	269:14	269:14	7	=
RVAL	269:16	269:16	6	dwWidth
FIELD	269:16	269:16	7	dwWidth
LEAF_NODE	269:16	269:16	8	dwWidth
LEAF_NODE	269:23	269:23	4	;
EXPR_STATEMENT	270:3	270:25	3	bi . biHeight = dwHeight ;
EXPR	270:3	270:3	4	bi . biHeight = dwHeight
ASSIGN	270:3	270:17	5	bi . biHeight = dwHeight
LVAL	270:3	270:3	6	bi . biHeight
FIELD	270:3	270:6	7	bi . biHeight
LEAF_NODE	270:3	270:3	8	bi
LEAF_NODE	270:5	270:5	8	.
LEAF_NODE	270:6	270:6	8	biHeight
ASSIGN_OP	270:15	270:15	6	=
LEAF_NODE	270:15	270:15	7	=
RVAL	270:17	270:17	6	dwHeight
FIELD	270:17	270:17	7	dwHeight
LEAF_NODE	270:17	270:17	8	dwHeight
LEAF_NODE	270:25	270:25	4	;
EXPR_STATEMENT	271:3	271:18	3	bi . biPlanes = 1 ;
EXPR	271:3	271:3	4	bi . biPlanes = 1
ASSIGN	271:3	271:17	5	bi . biPlanes = 1
LVAL	271:3	271:3	6	bi . biPlanes
FIELD	271:3	271:6	7	bi . biPlanes
LEAF_NODE	271:3	271:3	8	bi
LEAF_NODE	271:5	271:5	8	.
LEAF_NODE	271:6	271:6	8	biPlanes
ASSIGN_OP	271:15	271:15	6	=
LEAF_NODE	271:15	271:15	7	=
RVAL	271:17	271:17	6	1
FIELD	271:17	271:17	7	1
LEAF_NODE	271:17	271:17	8	1
LEAF_NODE	271:18	271:18	4	;
EXPR_STATEMENT	272:3	272:28	3	bi . biBitCount = wBitCount ;
EXPR	272:3	272:3	4	bi . biBitCount = wBitCount
ASSIGN	272:3	272:19	5	bi . biBitCount = wBitCount
LVAL	272:3	272:3	6	bi . biBitCount
FIELD	272:3	272:6	7	bi . biBitCount
LEAF_NODE	272:3	272:3	8	bi
LEAF_NODE	272:5	272:5	8	.
LEAF_NODE	272:6	272:6	8	biBitCount
ASSIGN_OP	272:17	272:17	6	=
LEAF_NODE	272:17	272:17	7	=
RVAL	272:19	272:19	6	wBitCount
FIELD	272:19	272:19	7	wBitCount
LEAF_NODE	272:19	272:19	8	wBitCount
LEAF_NODE	272:28	272:28	4	;
EXPR_STATEMENT	273:3	273:28	3	bi . biCompression = BI_RGB ;
EXPR	273:3	273:3	4	bi . biCompression = BI_RGB
ASSIGN	273:3	273:22	5	bi . biCompression = BI_RGB
LVAL	273:3	273:3	6	bi . biCompression
FIELD	273:3	273:6	7	bi . biCompression
LEAF_NODE	273:3	273:3	8	bi
LEAF_NODE	273:5	273:5	8	.
LEAF_NODE	273:6	273:6	8	biCompression
ASSIGN_OP	273:20	273:20	6	=
LEAF_NODE	273:20	273:20	7	=
RVAL	273:22	273:22	6	BI_RGB
FIELD	273:22	273:22	7	BI_RGB
LEAF_NODE	273:22	273:22	8	BI_RGB
LEAF_NODE	273:28	273:28	4	;
LEAF_NODE	274:3	274:3	3	bi
LEAF_NODE	274:5	274:5	3	.
LEAF_NODE	274:6	274:6	3	biSizeImage
LEAF_NODE	274:18	274:18	3	=
LEAF_NODE	274:20	274:20	3	(
LEAF_NODE	274:21	274:21	3	dwWidth
LEAF_NODE	274:28	274:28	3	*
LEAF_NODE	274:29	274:29	3	dwHeight
LEAF_NODE	274:37	274:37	3	*
LEAF_NODE	274:38	274:38	3	wBitCount
LEAF_NODE	274:47	274:47	3	)
LEAF_NODE	274:48	274:48	3	/
EXPR_STATEMENT	274:49	274:50	3	8 ;
EXPR	274:49	274:49	4	8
FIELD	274:49	274:49	5	8
LEAF_NODE	274:49	274:49	6	8
LEAF_NODE	274:50	274:50	4	;
LEAF_NODE	275:0	275:0	3	mean
LEAF_NODE	275:5	275:5	3	"default"
EXPR_STATEMENT	276:3	276:28	3	bi . biXPelsPerMeter = 2834 ;
EXPR	276:3	276:3	4	bi . biXPelsPerMeter = 2834
ASSIGN	276:3	276:24	5	bi . biXPelsPerMeter = 2834
LVAL	276:3	276:3	6	bi . biXPelsPerMeter
FIELD	276:3	276:6	7	bi . biXPelsPerMeter
LEAF_NODE	276:3	276:3	8	bi
LEAF_NODE	276:5	276:5	8	.
LEAF_NODE	276:6	276:6	8	biXPelsPerMeter
ASSIGN_OP	276:22	276:22	6	=
LEAF_NODE	276:22	276:22	7	=
RVAL	276:24	276:24	6	2834
FIELD	276:24	276:24	7	2834
LEAF_NODE	276:24	276:24	8	2834
LEAF_NODE	276:28	276:28	4	;
EXPR_STATEMENT	277:3	277:28	3	bi . biYPelsPerMeter = 2834 ;
EXPR	277:3	277:3	4	bi . biYPelsPerMeter = 2834
ASSIGN	277:3	277:24	5	bi . biYPelsPerMeter = 2834
LVAL	277:3	277:3	6	bi . biYPelsPerMeter
FIELD	277:3	277:6	7	bi . biYPelsPerMeter
LEAF_NODE	277:3	277:3	8	bi
LEAF_NODE	277:5	277:5	8	.
LEAF_NODE	277:6	277:6	8	biYPelsPerMeter
ASSIGN_OP	277:22	277:22	6	=
LEAF_NODE	277:22	277:22	7	=
RVAL	277:24	277:24	6	2834
FIELD	277:24	277:24	7	2834
LEAF_NODE	277:24	277:24	8	2834
LEAF_NODE	277:28	277:28	4	;
EXPR_STATEMENT	278:3	278:19	3	bi . biClrUsed = 0 ;
EXPR	278:3	278:3	4	bi . biClrUsed = 0
ASSIGN	278:3	278:18	5	bi . biClrUsed = 0
LVAL	278:3	278:3	6	bi . biClrUsed
FIELD	278:3	278:6	7	bi . biClrUsed
LEAF_NODE	278:3	278:3	8	bi
LEAF_NODE	278:5	278:5	8	.
LEAF_NODE	278:6	278:6	8	biClrUsed
ASSIGN_OP	278:16	278:16	6	=
LEAF_NODE	278:16	278:16	7	=
RVAL	278:18	278:18	6	0
FIELD	278:18	278:18	7	0
LEAF_NODE	278:18	278:18	8	0
LEAF_NODE	278:19	278:19	4	;
EXPR_STATEMENT	279:3	279:24	3	bi . biClrImportant = 0 ;
EXPR	279:3	279:3	4	bi . biClrImportant = 0
ASSIGN	279:3	279:23	5	bi . biClrImportant = 0
LVAL	279:3	279:3	6	bi . biClrImportant
FIELD	279:3	279:6	7	bi . biClrImportant
LEAF_NODE	279:3	279:3	8	bi
LEAF_NODE	279:5	279:5	8	.
LEAF_NODE	279:6	279:6	8	biClrImportant
ASSIGN_OP	279:21	279:21	6	=
LEAF_NODE	279:21	279:21	7	=
RVAL	279:23	279:23	6	0
FIELD	279:23	279:23	7	0
LEAF_NODE	279:23	279:23	8	0
LEAF_NODE	279:24	279:24	4	;
LEAF_NODE	285:3	285:3	3	dwBytesPerLine
LEAF_NODE	285:18	285:18	3	=
LEAF_NODE	285:22	285:22	3	(
LEAF_NODE	285:23	285:23	3	(
LEAF_NODE	285:24	285:24	3	(
LEAF_NODE	285:25	285:25	3	wBitCount
LEAF_NODE	285:35	285:35	3	*
LEAF_NODE	285:37	285:37	3	dwWidth
LEAF_NODE	285:44	285:44	3	)
LEAF_NODE	285:46	285:46	3	+
LEAF_NODE	285:48	285:48	3	31
LEAF_NODE	285:50	285:50	3	)
LEAF_NODE	285:52	285:52	3	/
LEAF_NODE	285:54	285:54	3	32
LEAF_NODE	285:57	285:57	3	*
LEAF_NODE	285:59	285:59	3	4
LEAF_NODE	285:60	285:60	3	)
LEAF_NODE	285:61	285:61	3	;
EXPR_STATEMENT	286:3	286:76	3	dwLen = bi . biSize + PaletteSize ( ( LPSTR ) & bi ) + ( dwBytesPerLine * dwHeight ) ;
EXPR	286:3	286:3	4	dwLen = bi . biSize + PaletteSize ( ( LPSTR ) & bi ) + ( dwBytesPerLine * dwHeight )
ASSIGN	286:3	286:11	5	dwLen = bi . biSize + PaletteSize ( ( LPSTR ) & bi ) + ( dwBytesPerLine * dwHeight )
LVAL	286:3	286:3	6	dwLen
FIELD	286:3	286:3	7	dwLen
LEAF_NODE	286:3	286:3	8	dwLen
ASSIGN_OP	286:9	286:9	6	=
LEAF_NODE	286:9	286:9	7	=
RVAL	286:11	286:75	6	bi . biSize + PaletteSize ( ( LPSTR ) & bi ) + ( dwBytesPerLine * dwHeight )
FIELD	286:11	286:14	7	bi . biSize
LEAF_NODE	286:11	286:11	8	bi
LEAF_NODE	286:13	286:13	8	.
LEAF_NODE	286:14	286:14	8	biSize
LEAF_NODE	286:21	286:21	7	+
FUNCTION_CALL	286:23	286:45	7	PaletteSize ( ( LPSTR ) & bi )
CALLEE	286:23	286:23	8	PaletteSize
LEAF_NODE	286:23	286:23	9	PaletteSize
LEAF_NODE	286:34	286:34	8	(
ARGUMENT	286:35	286:42	8	( LPSTR ) & bi
LEAF_NODE	286:35	286:35	9	(
TYPE_NAME	286:36	286:36	9	LPSTR
LEAF_NODE	286:36	286:36	10	LPSTR
LEAF_NODE	286:41	286:41	9	)
UNARY_EXPR	286:42	286:43	9	& bi
UNARY_OPERATOR	286:42	286:42	10	&
LEAF_NODE	286:42	286:42	11	&
FIELD	286:43	286:43	10	bi
LEAF_NODE	286:43	286:43	11	bi
LEAF_NODE	286:45	286:45	8	)
LEAF_NODE	286:47	286:47	7	+
LEAF_NODE	286:49	286:49	7	(
FIELD	286:50	286:50	7	dwBytesPerLine
LEAF_NODE	286:50	286:50	8	dwBytesPerLine
LEAF_NODE	286:65	286:65	7	*
FIELD	286:67	286:67	7	dwHeight
LEAF_NODE	286:67	286:67	8	dwHeight
LEAF_NODE	286:75	286:75	7	)
LEAF_NODE	286:76	286:76	4	;
EXPR_STATEMENT	289:3	289:34	3	hDIB = GlobalAlloc ( GHND , dwLen ) ;
EXPR	289:3	289:3	4	hDIB = GlobalAlloc ( GHND , dwLen )
ASSIGN	289:3	289:10	5	hDIB = GlobalAlloc ( GHND , dwLen )
LVAL	289:3	289:3	6	hDIB
FIELD	289:3	289:3	7	hDIB
LEAF_NODE	289:3	289:3	8	hDIB
ASSIGN_OP	289:8	289:8	6	=
LEAF_NODE	289:8	289:8	7	=
RVAL	289:10	289:10	6	GlobalAlloc ( GHND , dwLen )
FUNCTION_CALL	289:10	289:33	7	GlobalAlloc ( GHND , dwLen )
CALLEE	289:10	289:10	8	GlobalAlloc
LEAF_NODE	289:10	289:10	9	GlobalAlloc
LEAF_NODE	289:21	289:21	8	(
ARGUMENT	289:22	289:22	8	GHND
FIELD	289:22	289:22	9	GHND
LEAF_NODE	289:22	289:22	10	GHND
LEAF_NODE	289:26	289:26	8	,
ARGUMENT	289:28	289:28	8	dwLen
FIELD	289:28	289:28	9	dwLen
LEAF_NODE	289:28	289:28	10	dwLen
LEAF_NODE	289:33	289:33	8	)
LEAF_NODE	289:34	289:34	4	;
SELECTION	292:3	293:3	3	
KEYWORD	292:3	292:3	4	if
LEAF_NODE	292:3	292:3	5	if
LEAF_NODE	292:6	292:6	4	(
CONDITION	292:7	292:7	4	! hDIB
EXPR	292:7	292:7	5	! hDIB
UNARY_EXPR	292:7	292:8	6	! hDIB
UNARY_OPERATOR	292:7	292:7	7	!
LEAF_NODE	292:7	292:7	8	!
FIELD	292:8	292:8	7	hDIB
LEAF_NODE	292:8	292:8	8	hDIB
LEAF_NODE	292:12	292:12	4	)
STATEMENTS	293:3	295:3	4	
LEAF_NODE	293:3	293:3	5	{
STATEMENTS	294:6	294:6	5	
JUMP_STATEMENT	294:6	294:17	6	return NULL ;
KEYWORD	294:6	294:6	7	return
LEAF_NODE	294:6	294:6	8	return
DESTINATION	294:13	294:13	7	NULL
EXPR	294:13	294:13	8	NULL
FIELD	294:13	294:13	9	NULL
LEAF_NODE	294:13	294:13	10	NULL
LEAF_NODE	294:17	294:17	7	;
LEAF_NODE	295:3	295:3	5	}
LEAF_NODE	298:3	298:3	3	lpbi
LEAF_NODE	298:8	298:8	3	=
LEAF_NODE	298:10	298:10	3	(
LEAF_NODE	298:11	298:11	3	VOID
LEAF_NODE	298:16	298:16	3	FAR
LEAF_NODE	298:20	298:20	3	*
LEAF_NODE	298:21	298:21	3	)
EXPR_STATEMENT	298:22	298:38	3	GlobalLock ( hDIB ) ;
EXPR	298:22	298:22	4	GlobalLock ( hDIB )
FUNCTION_CALL	298:22	298:37	5	GlobalLock ( hDIB )
CALLEE	298:22	298:22	6	GlobalLock
LEAF_NODE	298:22	298:22	7	GlobalLock
LEAF_NODE	298:32	298:32	6	(
ARGUMENT	298:33	298:33	6	hDIB
FIELD	298:33	298:33	7	hDIB
LEAF_NODE	298:33	298:33	8	hDIB
LEAF_NODE	298:37	298:37	6	)
LEAF_NODE	298:38	298:38	4	;
EXPR_STATEMENT	302:3	302:13	3	* lpbi = bi ;
EXPR	302:3	302:3	4	* lpbi = bi
ASSIGN	302:3	302:11	5	* lpbi = bi
LVAL	302:3	302:3	6	* lpbi
UNARY_EXPR	302:3	302:4	7	* lpbi
UNARY_OPERATOR	302:3	302:3	8	*
LEAF_NODE	302:3	302:3	9	*
FIELD	302:4	302:4	8	lpbi
LEAF_NODE	302:4	302:4	9	lpbi
ASSIGN_OP	302:9	302:9	6	=
LEAF_NODE	302:9	302:9	7	=
RVAL	302:11	302:11	6	bi
FIELD	302:11	302:11	7	bi
LEAF_NODE	302:11	302:11	8	bi
LEAF_NODE	302:13	302:13	4	;
EXPR_STATEMENT	307:3	307:21	3	GlobalUnlock ( hDIB ) ;
EXPR	307:3	307:3	4	GlobalUnlock ( hDIB )
FUNCTION_CALL	307:3	307:20	5	GlobalUnlock ( hDIB )
CALLEE	307:3	307:3	6	GlobalUnlock
LEAF_NODE	307:3	307:3	7	GlobalUnlock
LEAF_NODE	307:15	307:15	6	(
ARGUMENT	307:16	307:16	6	hDIB
FIELD	307:16	307:16	7	hDIB
LEAF_NODE	307:16	307:16	8	hDIB
LEAF_NODE	307:20	307:20	6	)
LEAF_NODE	307:21	307:21	4	;
JUMP_STATEMENT	310:3	310:14	3	return hDIB ;
KEYWORD	310:3	310:3	4	return
LEAF_NODE	310:3	310:3	5	return
DESTINATION	310:10	310:10	4	hDIB
EXPR	310:10	310:10	5	hDIB
FIELD	310:10	310:10	6	hDIB
LEAF_NODE	310:10	310:10	7	hDIB
LEAF_NODE	310:14	310:14	4	;
LEAF_NODE	311:0	311:0	2	}
FUNCTION_DEF	314:6	317:0	1	
RETURN_TYPE	314:6	314:6	2	FAR
TYPE_NAME	314:6	314:6	3	FAR
LEAF_NODE	314:6	314:6	4	FAR
FUNCTION_NAME	314:10	314:10	2	FindDIBBits
LEAF_NODE	314:10	314:10	3	FindDIBBits
PARAMETER_LIST	314:21	314:33	2	( LPSTR lpDIB )
LEAF_NODE	314:21	314:21	3	(
PARAMETER_DECL	314:22	314:28	3	LPSTR lpDIB
TYPE	314:22	314:22	4	LPSTR
TYPE_NAME	314:22	314:22	5	LPSTR
LEAF_NODE	314:22	314:22	6	LPSTR
NAME	314:28	314:28	4	lpDIB
LEAF_NODE	314:28	314:28	5	lpDIB
LEAF_NODE	314:33	314:33	3	)
LEAF_NODE	315:0	315:0	2	{
STATEMENTS	316:3	316:56	2	
LEAF_NODE	316:3	316:3	3	return
LEAF_NODE	316:10	316:10	3	(
LEAF_NODE	316:11	316:11	3	lpDIB
LEAF_NODE	316:17	316:17	3	+
LEAF_NODE	316:19	316:19	3	*
LEAF_NODE	316:20	316:20	3	(
LEAF_NODE	316:21	316:21	3	LPDWORD
LEAF_NODE	316:28	316:28	3	)
LEAF_NODE	316:29	316:29	3	lpDIB
LEAF_NODE	316:35	316:35	3	+
LEAF_NODE	316:37	316:37	3	PaletteSize
LEAF_NODE	316:48	316:48	3	(
LEAF_NODE	316:49	316:49	3	lpDIB
LEAF_NODE	316:54	316:54	3	)
LEAF_NODE	316:55	316:55	3	)
LEAF_NODE	316:56	316:56	3	;
LEAF_NODE	317:0	317:0	2	}
FUNCTION_DEF	320:5	327:0	1	
RETURN_TYPE	320:5	320:5	2	FAR
TYPE_NAME	320:5	320:5	3	FAR
LEAF_NODE	320:5	320:5	4	FAR
FUNCTION_NAME	320:9	320:9	2	PaletteSize
LEAF_NODE	320:9	320:9	3	PaletteSize
PARAMETER_LIST	320:20	320:32	2	( LPSTR lpDIB )
LEAF_NODE	320:20	320:20	3	(
PARAMETER_DECL	320:21	320:27	3	LPSTR lpDIB
TYPE	320:21	320:21	4	LPSTR
TYPE_NAME	320:21	320:21	5	LPSTR
LEAF_NODE	320:21	320:21	6	LPSTR
NAME	320:27	320:27	4	lpDIB
LEAF_NODE	320:27	320:27	5	lpDIB
LEAF_NODE	320:32	320:32	3	)
LEAF_NODE	321:0	321:0	2	{
STATEMENTS	323:3	325:3	2	
SELECTION	323:3	324:6	3	
KEYWORD	323:3	323:3	4	if
LEAF_NODE	323:3	323:3	5	if
LEAF_NODE	323:6	323:6	4	(
CONDITION	323:7	323:7	4	IS_WIN30_DIB ( lpDIB )
EXPR	323:7	323:7	5	IS_WIN30_DIB ( lpDIB )
FUNCTION_CALL	323:7	323:26	6	IS_WIN30_DIB ( lpDIB )
CALLEE	323:7	323:7	7	IS_WIN30_DIB
LEAF_NODE	323:7	323:7	8	IS_WIN30_DIB
LEAF_NODE	323:20	323:20	7	(
ARGUMENT	323:21	323:21	7	lpDIB
FIELD	323:21	323:21	8	lpDIB
LEAF_NODE	323:21	323:21	9	lpDIB
LEAF_NODE	323:26	323:26	7	)
LEAF_NODE	323:27	323:27	4	)
STATEMENTS	324:6	324:6	4	
JUMP_STATEMENT	324:6	324:52	5	return ( DIBNumColors ( lpDIB ) * sizeof ( RGBQUAD ) ) ;
KEYWORD	324:6	324:6	6	return
LEAF_NODE	324:6	324:6	7	return
DESTINATION	324:13	324:13	6	( DIBNumColors ( lpDIB ) * sizeof ( RGBQUAD ) )
EXPR	324:13	324:51	7	( DIBNumColors ( lpDIB ) * sizeof ( RGBQUAD ) )
LEAF_NODE	324:13	324:13	8	(
FUNCTION_CALL	324:14	324:32	8	DIBNumColors ( lpDIB )
CALLEE	324:14	324:14	9	DIBNumColors
LEAF_NODE	324:14	324:14	10	DIBNumColors
LEAF_NODE	324:26	324:26	9	(
ARGUMENT	324:27	324:27	9	lpDIB
FIELD	324:27	324:27	10	lpDIB
LEAF_NODE	324:27	324:27	11	lpDIB
LEAF_NODE	324:32	324:32	9	)
LEAF_NODE	324:34	324:34	8	*
FUNCTION_CALL	324:36	324:50	8	sizeof ( RGBQUAD )
CALLEE	324:36	324:36	9	sizeof
LEAF_NODE	324:36	324:36	10	sizeof
LEAF_NODE	324:42	324:42	9	(
ARGUMENT	324:43	324:43	9	RGBQUAD
FIELD	324:43	324:43	10	RGBQUAD
LEAF_NODE	324:43	324:43	11	RGBQUAD
LEAF_NODE	324:50	324:50	9	)
LEAF_NODE	324:51	324:51	8	)
LEAF_NODE	324:52	324:52	6	;
SELECTION	325:3	326:6	3	
KEYWORD	325:3	325:3	4	else
LEAF_NODE	325:3	325:3	5	else
STATEMENTS	326:6	326:6	4	
JUMP_STATEMENT	326:6	326:54	5	return ( DIBNumColors ( lpDIB ) * sizeof ( RGBTRIPLE ) ) ;
KEYWORD	326:6	326:6	6	return
LEAF_NODE	326:6	326:6	7	return
DESTINATION	326:13	326:13	6	( DIBNumColors ( lpDIB ) * sizeof ( RGBTRIPLE ) )
EXPR	326:13	326:53	7	( DIBNumColors ( lpDIB ) * sizeof ( RGBTRIPLE ) )
LEAF_NODE	326:13	326:13	8	(
FUNCTION_CALL	326:14	326:32	8	DIBNumColors ( lpDIB )
CALLEE	326:14	326:14	9	DIBNumColors
LEAF_NODE	326:14	326:14	10	DIBNumColors
LEAF_NODE	326:26	326:26	9	(
ARGUMENT	326:27	326:27	9	lpDIB
FIELD	326:27	326:27	10	lpDIB
LEAF_NODE	326:27	326:27	11	lpDIB
LEAF_NODE	326:32	326:32	9	)
LEAF_NODE	326:34	326:34	8	*
FUNCTION_CALL	326:36	326:52	8	sizeof ( RGBTRIPLE )
CALLEE	326:36	326:36	9	sizeof
LEAF_NODE	326:36	326:36	10	sizeof
LEAF_NODE	326:42	326:42	9	(
ARGUMENT	326:43	326:43	9	RGBTRIPLE
FIELD	326:43	326:43	10	RGBTRIPLE
LEAF_NODE	326:43	326:43	11	RGBTRIPLE
LEAF_NODE	326:52	326:52	9	)
LEAF_NODE	326:53	326:53	8	)
LEAF_NODE	326:54	326:54	6	;
LEAF_NODE	327:0	327:0	2	}
FUNCTION_DEF	330:0	372:0	1	
RETURN_TYPE	330:0	330:0	2	WORD
TYPE_NAME	330:0	330:0	3	WORD
LEAF_NODE	330:0	330:0	4	WORD
FUNCTION_NAME	330:5	330:5	2	DIBNumColors
LEAF_NODE	330:5	330:5	3	DIBNumColors
PARAMETER_LIST	330:17	330:29	2	( LPSTR lpDIB )
LEAF_NODE	330:17	330:17	3	(
PARAMETER_DECL	330:18	330:24	3	LPSTR lpDIB
TYPE	330:18	330:18	4	LPSTR
TYPE_NAME	330:18	330:18	5	LPSTR
LEAF_NODE	330:18	330:18	6	LPSTR
NAME	330:24	330:24	4	lpDIB
LEAF_NODE	330:24	330:24	5	lpDIB
LEAF_NODE	330:29	330:29	3	)
LEAF_NODE	331:0	331:0	2	{
STATEMENTS	332:3	358:3	2	
SIMPLE_DECL	332:3	332:17	3	WORD wBitCount ;
VAR_DECL	332:3	332:8	4	WORD wBitCount
TYPE	332:3	332:3	5	WORD
TYPE_NAME	332:3	332:3	6	WORD
LEAF_NODE	332:3	332:3	7	WORD
NAME	332:8	332:8	5	wBitCount
LEAF_NODE	332:8	332:8	6	wBitCount
LEAF_NODE	332:17	332:17	4	;
SELECTION	340:3	341:3	3	
KEYWORD	340:3	340:3	4	if
LEAF_NODE	340:3	340:3	5	if
LEAF_NODE	340:6	340:6	4	(
CONDITION	340:7	340:7	4	IS_WIN30_DIB ( lpDIB )
EXPR	340:7	340:7	5	IS_WIN30_DIB ( lpDIB )
FUNCTION_CALL	340:7	340:25	6	IS_WIN30_DIB ( lpDIB )
CALLEE	340:7	340:7	7	IS_WIN30_DIB
LEAF_NODE	340:7	340:7	8	IS_WIN30_DIB
LEAF_NODE	340:19	340:19	7	(
ARGUMENT	340:20	340:20	7	lpDIB
FIELD	340:20	340:20	8	lpDIB
LEAF_NODE	340:20	340:20	9	lpDIB
LEAF_NODE	340:25	340:25	7	)
LEAF_NODE	340:26	340:26	4	)
STATEMENTS	341:3	347:3	4	
LEAF_NODE	341:3	341:3	5	{
STATEMENTS	342:6	345:6	5	
SIMPLE_DECL	342:6	342:21	6	DWORD dwClrUsed ;
VAR_DECL	342:6	342:12	7	DWORD dwClrUsed
TYPE	342:6	342:6	8	DWORD
TYPE_NAME	342:6	342:6	9	DWORD
LEAF_NODE	342:6	342:6	10	DWORD
NAME	342:12	342:12	8	dwClrUsed
LEAF_NODE	342:12	342:12	9	dwClrUsed
LEAF_NODE	342:21	342:21	7	;
EXPR_STATEMENT	344:6	344:56	6	dwClrUsed = ( ( LPBITMAPINFOHEADER ) lpDIB ) -> biClrUsed ;
EXPR	344:6	344:6	7	dwClrUsed = ( ( LPBITMAPINFOHEADER ) lpDIB ) -> biClrUsed
ASSIGN	344:6	344:18	8	dwClrUsed = ( ( LPBITMAPINFOHEADER ) lpDIB ) -> biClrUsed
LVAL	344:6	344:6	9	dwClrUsed
FIELD	344:6	344:6	10	dwClrUsed
LEAF_NODE	344:6	344:6	11	dwClrUsed
ASSIGN_OP	344:16	344:16	9	=
LEAF_NODE	344:16	344:16	10	=
RVAL	344:18	344:47	9	( ( LPBITMAPINFOHEADER ) lpDIB ) -> biClrUsed
LEAF_NODE	344:18	344:18	10	(
LEAF_NODE	344:19	344:19	10	(
TYPE_NAME	344:20	344:20	10	LPBITMAPINFOHEADER
LEAF_NODE	344:20	344:20	11	LPBITMAPINFOHEADER
LEAF_NODE	344:38	344:38	10	)
FIELD	344:39	344:39	10	lpDIB
LEAF_NODE	344:39	344:39	11	lpDIB
LEAF_NODE	344:44	344:44	10	)
LEAF_NODE	344:45	344:45	10	->
LEAF_NODE	344:47	344:47	10	biClrUsed
LEAF_NODE	344:56	344:56	7	;
SELECTION	345:6	346:5	6	
KEYWORD	345:6	345:6	7	if
LEAF_NODE	345:6	345:6	8	if
LEAF_NODE	345:9	345:9	7	(
CONDITION	345:10	345:10	7	dwClrUsed
EXPR	345:10	345:10	8	dwClrUsed
FIELD	345:10	345:10	9	dwClrUsed
LEAF_NODE	345:10	345:10	10	dwClrUsed
LEAF_NODE	345:19	345:19	7	)
STATEMENTS	346:5	346:5	7	
JUMP_STATEMENT	346:5	346:27	8	return ( WORD ) dwClrUsed ;
KEYWORD	346:5	346:5	9	return
LEAF_NODE	346:5	346:5	10	return
DESTINATION	346:12	346:12	9	( WORD ) dwClrUsed
EXPR	346:12	346:18	10	( WORD ) dwClrUsed
LEAF_NODE	346:12	346:12	11	(
TYPE_NAME	346:13	346:13	11	WORD
LEAF_NODE	346:13	346:13	12	WORD
LEAF_NODE	346:17	346:17	11	)
FIELD	346:18	346:18	11	dwClrUsed
LEAF_NODE	346:18	346:18	12	dwClrUsed
LEAF_NODE	346:27	346:27	9	;
LEAF_NODE	347:3	347:3	5	}
SELECTION	352:3	353:6	3	
KEYWORD	352:3	352:3	4	if
LEAF_NODE	352:3	352:3	5	if
LEAF_NODE	352:6	352:6	4	(
CONDITION	352:7	352:7	4	IS_WIN30_DIB ( lpDIB )
EXPR	352:7	352:7	5	IS_WIN30_DIB ( lpDIB )
FUNCTION_CALL	352:7	352:25	6	IS_WIN30_DIB ( lpDIB )
CALLEE	352:7	352:7	7	IS_WIN30_DIB
LEAF_NODE	352:7	352:7	8	IS_WIN30_DIB
LEAF_NODE	352:19	352:19	7	(
ARGUMENT	352:20	352:20	7	lpDIB
FIELD	352:20	352:20	8	lpDIB
LEAF_NODE	352:20	352:20	9	lpDIB
LEAF_NODE	352:25	352:25	7	)
LEAF_NODE	352:26	352:26	4	)
STATEMENTS	353:6	353:6	4	
EXPR_STATEMENT	353:6	353:57	5	wBitCount = ( ( LPBITMAPINFOHEADER ) lpDIB ) -> biBitCount ;
EXPR	353:6	353:6	6	wBitCount = ( ( LPBITMAPINFOHEADER ) lpDIB ) -> biBitCount
ASSIGN	353:6	353:18	7	wBitCount = ( ( LPBITMAPINFOHEADER ) lpDIB ) -> biBitCount
LVAL	353:6	353:6	8	wBitCount
FIELD	353:6	353:6	9	wBitCount
LEAF_NODE	353:6	353:6	10	wBitCount
ASSIGN_OP	353:16	353:16	8	=
LEAF_NODE	353:16	353:16	9	=
RVAL	353:18	353:47	8	( ( LPBITMAPINFOHEADER ) lpDIB ) -> biBitCount
LEAF_NODE	353:18	353:18	9	(
LEAF_NODE	353:19	353:19	9	(
TYPE_NAME	353:20	353:20	9	LPBITMAPINFOHEADER
LEAF_NODE	353:20	353:20	10	LPBITMAPINFOHEADER
LEAF_NODE	353:38	353:38	9	)
FIELD	353:39	353:39	9	lpDIB
LEAF_NODE	353:39	353:39	10	lpDIB
LEAF_NODE	353:44	353:44	9	)
LEAF_NODE	353:45	353:45	9	->
LEAF_NODE	353:47	353:47	9	biBitCount
LEAF_NODE	353:57	353:57	6	;
SELECTION	354:3	355:6	3	
KEYWORD	354:3	354:3	4	else
LEAF_NODE	354:3	354:3	5	else
STATEMENTS	355:6	355:6	4	
EXPR_STATEMENT	355:6	355:57	5	wBitCount = ( ( LPBITMAPCOREHEADER ) lpDIB ) -> bcBitCount ;
EXPR	355:6	355:6	6	wBitCount = ( ( LPBITMAPCOREHEADER ) lpDIB ) -> bcBitCount
ASSIGN	355:6	355:18	7	wBitCount = ( ( LPBITMAPCOREHEADER ) lpDIB ) -> bcBitCount
LVAL	355:6	355:6	8	wBitCount
FIELD	355:6	355:6	9	wBitCount
LEAF_NODE	355:6	355:6	10	wBitCount
ASSIGN_OP	355:16	355:16	8	=
LEAF_NODE	355:16	355:16	9	=
RVAL	355:18	355:47	8	( ( LPBITMAPCOREHEADER ) lpDIB ) -> bcBitCount
LEAF_NODE	355:18	355:18	9	(
LEAF_NODE	355:19	355:19	9	(
TYPE_NAME	355:20	355:20	9	LPBITMAPCOREHEADER
LEAF_NODE	355:20	355:20	10	LPBITMAPCOREHEADER
LEAF_NODE	355:38	355:38	9	)
FIELD	355:39	355:39	9	lpDIB
LEAF_NODE	355:39	355:39	10	lpDIB
LEAF_NODE	355:44	355:44	9	)
LEAF_NODE	355:45	355:45	9	->
LEAF_NODE	355:47	355:47	9	bcBitCount
LEAF_NODE	355:57	355:57	6	;
SELECTION	358:3	359:6	3	
KEYWORD	358:3	358:3	4	switch
LEAF_NODE	358:3	358:3	5	switch
LEAF_NODE	358:10	358:10	4	(
CONDITION	358:11	358:11	4	wBitCount
EXPR	358:11	358:11	5	wBitCount
FIELD	358:11	358:11	6	wBitCount
LEAF_NODE	358:11	358:11	7	wBitCount
LEAF_NODE	358:20	358:20	4	)
STATEMENTS	359:6	371:6	4	
LEAF_NODE	359:6	359:6	5	{
STATEMENTS	360:3	370:6	5	
LABEL	360:3	360:9	6	case 1 :
LEAF_NODE	360:3	360:3	7	case
LEAF_NODE	360:8	360:8	7	1
LEAF_NODE	360:9	360:9	7	:
JUMP_STATEMENT	361:6	361:14	6	return 2 ;
KEYWORD	361:6	361:6	7	return
LEAF_NODE	361:6	361:6	8	return
DESTINATION	361:13	361:13	7	2
EXPR	361:13	361:13	8	2
FIELD	361:13	361:13	9	2
LEAF_NODE	361:13	361:13	10	2
LEAF_NODE	361:14	361:14	7	;
LABEL	363:3	363:9	6	case 4 :
LEAF_NODE	363:3	363:3	7	case
LEAF_NODE	363:8	363:8	7	4
LEAF_NODE	363:9	363:9	7	:
JUMP_STATEMENT	364:6	364:15	6	return 16 ;
KEYWORD	364:6	364:6	7	return
LEAF_NODE	364:6	364:6	8	return
DESTINATION	364:13	364:13	7	16
EXPR	364:13	364:13	8	16
FIELD	364:13	364:13	9	16
LEAF_NODE	364:13	364:13	10	16
LEAF_NODE	364:15	364:15	7	;
LABEL	366:3	366:9	6	case 8 :
LEAF_NODE	366:3	366:3	7	case
LEAF_NODE	366:8	366:8	7	8
LEAF_NODE	366:9	366:9	7	:
JUMP_STATEMENT	367:6	367:16	6	return 256 ;
KEYWORD	367:6	367:6	7	return
LEAF_NODE	367:6	367:6	8	return
DESTINATION	367:13	367:13	7	256
EXPR	367:13	367:13	8	256
FIELD	367:13	367:13	9	256
LEAF_NODE	367:13	367:13	10	256
LEAF_NODE	367:16	367:16	7	;
LABEL	369:3	369:10	6	default :
LEAF_NODE	369:3	369:3	7	default
LEAF_NODE	369:10	369:10	7	:
JUMP_STATEMENT	370:6	370:14	6	return 0 ;
KEYWORD	370:6	370:6	7	return
LEAF_NODE	370:6	370:6	8	return
DESTINATION	370:13	370:13	7	0
EXPR	370:13	370:13	8	0
FIELD	370:13	370:13	9	0
LEAF_NODE	370:13	370:13	10	0
LEAF_NODE	370:14	370:14	7	;
LEAF_NODE	371:6	371:6	5	}
LEAF_NODE	372:0	372:0	2	}
