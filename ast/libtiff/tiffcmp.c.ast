SOURCE_FILE	46:7	641:0	0	
SIMPLE_DECL	46:7	46:25	1	int stopondiff ; stopondiff = 1 ;
VAR_DECL	46:7	46:11	2	int stopondiff ; stopondiff = 1
TYPE	46:7	46:7	3	int
TYPE_NAME	46:7	46:7	4	int
LEAF_NODE	46:7	46:7	5	int
NAME	46:11	46:11	3	stopondiff
LEAF_NODE	46:11	46:11	4	stopondiff
LEAF_NODE	0:0	0:0	3	;
INIT	46:11	46:11	3	stopondiff = 1
ASSIGN	46:11	46:24	4	stopondiff = 1
LVAL	46:11	46:11	5	stopondiff
NAME	46:11	46:11	6	stopondiff
LEAF_NODE	46:11	46:11	7	stopondiff
ASSIGN_OP	46:22	46:22	5	=
LEAF_NODE	46:22	46:22	6	=
RVAL	46:24	46:24	5	1
FIELD	46:24	46:24	6	1
LEAF_NODE	46:24	46:24	7	1
LEAF_NODE	46:25	46:25	2	;
SIMPLE_DECL	47:7	47:29	1	int stoponfirsttag ; stoponfirsttag = 1 ;
VAR_DECL	47:7	47:11	2	int stoponfirsttag ; stoponfirsttag = 1
TYPE	47:7	47:7	3	int
TYPE_NAME	47:7	47:7	4	int
LEAF_NODE	47:7	47:7	5	int
NAME	47:11	47:11	3	stoponfirsttag
LEAF_NODE	47:11	47:11	4	stoponfirsttag
LEAF_NODE	0:0	0:0	3	;
INIT	47:11	47:11	3	stoponfirsttag = 1
ASSIGN	47:11	47:28	4	stoponfirsttag = 1
LVAL	47:11	47:11	5	stoponfirsttag
NAME	47:11	47:11	6	stoponfirsttag
LEAF_NODE	47:11	47:11	7	stoponfirsttag
ASSIGN_OP	47:26	47:26	5	=
LEAF_NODE	47:26	47:26	6	=
RVAL	47:28	47:28	5	1
FIELD	47:28	47:28	6	1
LEAF_NODE	47:28	47:28	7	1
LEAF_NODE	47:29	47:29	2	;
SIMPLE_DECL	48:7	48:31	1	uint16 bitspersample ; bitspersample = 1 ;
VAR_DECL	48:7	48:14	2	uint16 bitspersample ; bitspersample = 1
TYPE	48:7	48:7	3	uint16
TYPE_NAME	48:7	48:7	4	uint16
LEAF_NODE	48:7	48:7	5	uint16
NAME	48:14	48:14	3	bitspersample
LEAF_NODE	48:14	48:14	4	bitspersample
LEAF_NODE	0:0	0:0	3	;
INIT	48:14	48:14	3	bitspersample = 1
ASSIGN	48:14	48:30	4	bitspersample = 1
LVAL	48:14	48:14	5	bitspersample
NAME	48:14	48:14	6	bitspersample
LEAF_NODE	48:14	48:14	7	bitspersample
ASSIGN_OP	48:28	48:28	5	=
LEAF_NODE	48:28	48:28	6	=
RVAL	48:30	48:30	5	1
FIELD	48:30	48:30	6	1
LEAF_NODE	48:30	48:30	7	1
LEAF_NODE	48:31	48:31	2	;
SIMPLE_DECL	49:7	49:33	1	uint16 samplesperpixel ; samplesperpixel = 1 ;
VAR_DECL	49:7	49:14	2	uint16 samplesperpixel ; samplesperpixel = 1
TYPE	49:7	49:7	3	uint16
TYPE_NAME	49:7	49:7	4	uint16
LEAF_NODE	49:7	49:7	5	uint16
NAME	49:14	49:14	3	samplesperpixel
LEAF_NODE	49:14	49:14	4	samplesperpixel
LEAF_NODE	0:0	0:0	3	;
INIT	49:14	49:14	3	samplesperpixel = 1
ASSIGN	49:14	49:32	4	samplesperpixel = 1
LVAL	49:14	49:14	5	samplesperpixel
NAME	49:14	49:14	6	samplesperpixel
LEAF_NODE	49:14	49:14	7	samplesperpixel
ASSIGN_OP	49:30	49:30	5	=
LEAF_NODE	49:30	49:30	6	=
RVAL	49:32	49:32	5	1
FIELD	49:32	49:32	6	1
LEAF_NODE	49:32	49:32	7	1
LEAF_NODE	49:33	49:33	2	;
SIMPLE_DECL	50:7	50:46	1	uint16 sampleformat ; sampleformat = SAMPLEFORMAT_UINT ;
VAR_DECL	50:7	50:14	2	uint16 sampleformat ; sampleformat = SAMPLEFORMAT_UINT
TYPE	50:7	50:7	3	uint16
TYPE_NAME	50:7	50:7	4	uint16
LEAF_NODE	50:7	50:7	5	uint16
NAME	50:14	50:14	3	sampleformat
LEAF_NODE	50:14	50:14	4	sampleformat
LEAF_NODE	0:0	0:0	3	;
INIT	50:14	50:14	3	sampleformat = SAMPLEFORMAT_UINT
ASSIGN	50:14	50:29	4	sampleformat = SAMPLEFORMAT_UINT
LVAL	50:14	50:14	5	sampleformat
NAME	50:14	50:14	6	sampleformat
LEAF_NODE	50:14	50:14	7	sampleformat
ASSIGN_OP	50:27	50:27	5	=
LEAF_NODE	50:27	50:27	6	=
RVAL	50:29	50:29	5	SAMPLEFORMAT_UINT
FIELD	50:29	50:29	6	SAMPLEFORMAT_UINT
LEAF_NODE	50:29	50:29	7	SAMPLEFORMAT_UINT
LEAF_NODE	50:46	50:46	2	;
SIMPLE_DECL	51:7	51:24	1	uint32 imagewidth ;
VAR_DECL	51:7	51:14	2	uint32 imagewidth
TYPE	51:7	51:7	3	uint32
TYPE_NAME	51:7	51:7	4	uint32
LEAF_NODE	51:7	51:7	5	uint32
NAME	51:14	51:14	3	imagewidth
LEAF_NODE	51:14	51:14	4	imagewidth
LEAF_NODE	51:24	51:24	2	;
SIMPLE_DECL	52:7	52:25	1	uint32 imagelength ;
VAR_DECL	52:7	52:14	2	uint32 imagelength
TYPE	52:7	52:7	3	uint32
TYPE_NAME	52:7	52:7	4	uint32
LEAF_NODE	52:7	52:7	5	uint32
NAME	52:14	52:14	3	imagelength
LEAF_NODE	52:14	52:14	4	imagelength
LEAF_NODE	52:25	52:25	2	;
SIMPLE_DECL	54:7	54:23	1	void usage ; usage usage ( void ) ;
VAR_DECL	54:7	54:12	2	void usage ; usage usage ( void )
TYPE	54:7	54:7	3	void
TYPE_NAME	54:7	54:7	4	void
LEAF_NODE	54:7	54:7	5	void
NAME	54:12	54:12	3	usage
LEAF_NODE	54:12	54:12	4	usage
LEAF_NODE	0:0	0:0	3	;
INIT	54:12	54:12	3	usage usage ( void )
ASSIGN	54:12	54:17	4	usage usage ( void )
LVAL	54:12	54:12	5	usage
NAME	54:12	54:12	6	usage
LEAF_NODE	54:12	54:12	7	usage
ASSIGN_OP	54:12	54:12	5	usage
NAME	54:12	54:12	6	usage
LEAF_NODE	54:12	54:12	7	usage
RVAL	54:17	54:22	5	( void )
LEAF_NODE	54:17	54:17	6	(
EXPR	54:18	54:18	6	void
FIELD	54:18	54:18	7	void
LEAF_NODE	54:18	54:18	8	void
LEAF_NODE	54:22	54:22	6	)
LEAF_NODE	54:23	54:23	2	;
FUNCTION_DEF	64:0	116:0	1	
RETURN_TYPE	64:0	64:0	2	int
TYPE_NAME	64:0	64:0	3	int
LEAF_NODE	64:0	64:0	4	int
FUNCTION_NAME	65:0	65:0	2	main
LEAF_NODE	65:0	65:0	3	main
PARAMETER_LIST	65:4	65:27	2	( int argc , char * [ ] argv )
LEAF_NODE	65:4	65:4	3	(
PARAMETER_DECL	65:5	65:9	3	int argc
TYPE	65:5	65:5	4	int
TYPE_NAME	65:5	65:5	5	int
LEAF_NODE	65:5	65:5	6	int
NAME	65:9	65:9	4	argc
LEAF_NODE	65:9	65:9	5	argc
LEAF_NODE	65:13	65:13	3	,
PARAMETER_DECL	65:15	65:21	3	char * [ ] argv
TYPE	65:15	65:25	4	char * [ ]
TYPE_NAME	65:15	65:15	5	char
LEAF_NODE	65:15	65:15	6	char
POINTER	65:19	65:19	5	*
LEAF_NODE	65:19	65:19	6	*
TYPE_SUFFIX	65:25	65:26	5	[ ]
LEAF_NODE	65:25	65:25	6	[
LEAF_NODE	65:26	65:26	6	]
NAME	65:21	65:21	4	argv
LEAF_NODE	65:21	65:21	5	argv
LEAF_NODE	65:27	65:27	3	)
LEAF_NODE	66:0	66:0	2	{
STATEMENTS	67:1	115:1	2	
SIMPLE_DECL	67:1	67:18	3	TIFF * tif1 , TIFF * tif2 ;
INIT_DECL_LIST	67:1	67:1	4	TIFF * tif1 , TIFF * tif2
VAR_DECL	67:1	67:7	5	TIFF * tif1
TYPE	67:1	67:6	6	TIFF *
TYPE_NAME	67:1	67:1	7	TIFF
LEAF_NODE	67:1	67:1	8	TIFF
POINTER	67:6	67:6	7	*
LEAF_NODE	67:6	67:6	8	*
NAME	67:7	67:7	6	tif1
LEAF_NODE	67:7	67:7	7	tif1
LEAF_NODE	67:11	67:11	5	,
VAR_DECL	67:1	67:14	5	TIFF * tif2
TYPE	67:1	67:13	6	TIFF *
TYPE_NAME	67:1	67:1	7	TIFF
LEAF_NODE	67:1	67:1	8	TIFF
POINTER	67:13	67:13	7	*
LEAF_NODE	67:13	67:13	8	*
NAME	67:14	67:14	6	tif2
LEAF_NODE	67:14	67:14	7	tif2
LEAF_NODE	67:18	67:18	4	;
SIMPLE_DECL	68:1	68:14	3	int c , int dirnum ;
INIT_DECL_LIST	68:1	68:1	4	int c , int dirnum
VAR_DECL	68:1	68:5	5	int c
TYPE	68:1	68:1	6	int
TYPE_NAME	68:1	68:1	7	int
LEAF_NODE	68:1	68:1	8	int
NAME	68:5	68:5	6	c
LEAF_NODE	68:5	68:5	7	c
LEAF_NODE	68:6	68:6	5	,
VAR_DECL	68:1	68:8	5	int dirnum
TYPE	68:1	68:1	6	int
TYPE_NAME	68:1	68:1	7	int
LEAF_NODE	68:1	68:1	8	int
NAME	68:8	68:8	6	dirnum
LEAF_NODE	68:8	68:8	7	dirnum
LEAF_NODE	68:14	68:14	4	;
LEAF_NODE	70:1	70:1	3	extern
SIMPLE_DECL	70:8	70:18	3	int optind ;
VAR_DECL	70:8	70:12	4	int optind
TYPE	70:8	70:8	5	int
TYPE_NAME	70:8	70:8	6	int
LEAF_NODE	70:8	70:8	7	int
NAME	70:12	70:12	5	optind
LEAF_NODE	70:12	70:12	6	optind
LEAF_NODE	70:18	70:18	4	;
LEAF_NODE	71:1	71:1	3	extern
SIMPLE_DECL	71:8	71:20	3	char * optarg ;
VAR_DECL	71:8	71:14	4	char * optarg
TYPE	71:8	71:12	5	char *
TYPE_NAME	71:8	71:8	6	char
LEAF_NODE	71:8	71:8	7	char
POINTER	71:12	71:12	6	*
LEAF_NODE	71:12	71:12	7	*
NAME	71:14	71:14	5	optarg
LEAF_NODE	71:14	71:14	6	optarg
LEAF_NODE	71:20	71:20	4	;
ITERATION	74:1	75:2	3	
KEYWORD	74:1	74:1	4	while
LEAF_NODE	74:1	74:1	5	while
LEAF_NODE	74:7	74:7	4	(
CONDITION	74:8	74:8	4	( c = getopt ( argc , argv , "ltz:" ) ) != - 1
EXPR	74:8	74:44	5	( c = getopt ( argc , argv , "ltz:" ) ) != - 1
LEAF_NODE	74:8	74:8	6	(
ASSIGN	74:9	74:13	6	c = getopt ( argc , argv , "ltz:" )
LVAL	74:9	74:9	7	c
FIELD	74:9	74:9	8	c
LEAF_NODE	74:9	74:9	9	c
ASSIGN_OP	74:11	74:11	7	=
LEAF_NODE	74:11	74:11	8	=
RVAL	74:13	74:13	7	getopt ( argc , argv , "ltz:" )
FUNCTION_CALL	74:13	74:38	8	getopt ( argc , argv , "ltz:" )
CALLEE	74:13	74:13	9	getopt
LEAF_NODE	74:13	74:13	10	getopt
LEAF_NODE	74:19	74:19	9	(
ARGUMENT	74:20	74:20	9	argc
FIELD	74:20	74:20	10	argc
LEAF_NODE	74:20	74:20	11	argc
LEAF_NODE	74:24	74:24	9	,
ARGUMENT	74:26	74:26	9	argv
FIELD	74:26	74:26	10	argv
LEAF_NODE	74:26	74:26	11	argv
LEAF_NODE	74:30	74:30	9	,
ARGUMENT	74:32	74:32	9	"ltz:"
FIELD	74:32	74:32	10	"ltz:"
LEAF_NODE	74:32	74:32	11	"ltz:"
LEAF_NODE	74:38	74:38	9	)
LEAF_NODE	74:39	74:39	6	)
EQ_OPERATOR	74:41	74:41	6	!=
LEAF_NODE	74:41	74:41	7	!=
UNARY_EXPR	74:44	74:45	6	- 1
UNARY_OPERATOR	74:44	74:44	7	-
LEAF_NODE	74:44	74:44	8	-
FIELD	74:45	74:45	7	1
LEAF_NODE	74:45	74:45	8	1
LEAF_NODE	74:46	74:46	4	)
STATEMENTS	75:2	75:2	4	
SELECTION	75:2	75:13	5	
KEYWORD	75:2	75:2	6	switch
LEAF_NODE	75:2	75:2	7	switch
LEAF_NODE	75:9	75:9	6	(
CONDITION	75:10	75:10	6	c
EXPR	75:10	75:10	7	c
FIELD	75:10	75:10	8	c
LEAF_NODE	75:10	75:10	9	c
LEAF_NODE	75:11	75:11	6	)
STATEMENTS	75:13	88:2	6	
LEAF_NODE	75:13	75:13	7	{
STATEMENTS	76:2	86:3	7	
LEAF_NODE	76:2	76:2	8	case
LEAF_NODE	76:7	76:7	8	'l'
LEAF_NODE	76:10	76:10	8	:
EXPR_STATEMENT	77:3	77:17	8	stopondiff = 0 ;
EXPR	77:3	77:3	9	stopondiff = 0
ASSIGN	77:3	77:16	10	stopondiff = 0
LVAL	77:3	77:3	11	stopondiff
FIELD	77:3	77:3	12	stopondiff
LEAF_NODE	77:3	77:3	13	stopondiff
ASSIGN_OP	77:14	77:14	11	=
LEAF_NODE	77:14	77:14	12	=
RVAL	77:16	77:16	11	0
FIELD	77:16	77:16	12	0
LEAF_NODE	77:16	77:16	13	0
LEAF_NODE	77:17	77:17	9	;
JUMP_STATEMENT	78:3	78:8	8	break DESTINATION ;
KEYWORD	78:3	78:3	9	break
LEAF_NODE	78:3	78:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	78:8	78:8	9	;
LEAF_NODE	79:2	79:2	8	case
LEAF_NODE	79:7	79:7	8	'z'
LEAF_NODE	79:10	79:10	8	:
EXPR_STATEMENT	80:3	80:28	8	stopondiff = atoi ( optarg ) ;
EXPR	80:3	80:3	9	stopondiff = atoi ( optarg )
ASSIGN	80:3	80:16	10	stopondiff = atoi ( optarg )
LVAL	80:3	80:3	11	stopondiff
FIELD	80:3	80:3	12	stopondiff
LEAF_NODE	80:3	80:3	13	stopondiff
ASSIGN_OP	80:14	80:14	11	=
LEAF_NODE	80:14	80:14	12	=
RVAL	80:16	80:16	11	atoi ( optarg )
FUNCTION_CALL	80:16	80:27	12	atoi ( optarg )
CALLEE	80:16	80:16	13	atoi
LEAF_NODE	80:16	80:16	14	atoi
LEAF_NODE	80:20	80:20	13	(
ARGUMENT	80:21	80:21	13	optarg
FIELD	80:21	80:21	14	optarg
LEAF_NODE	80:21	80:21	15	optarg
LEAF_NODE	80:27	80:27	13	)
LEAF_NODE	80:28	80:28	9	;
JUMP_STATEMENT	81:3	81:8	8	break DESTINATION ;
KEYWORD	81:3	81:3	9	break
LEAF_NODE	81:3	81:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	81:8	81:8	9	;
LEAF_NODE	82:2	82:2	8	case
LEAF_NODE	82:7	82:7	8	't'
LEAF_NODE	82:10	82:10	8	:
EXPR_STATEMENT	83:3	83:21	8	stoponfirsttag = 0 ;
EXPR	83:3	83:3	9	stoponfirsttag = 0
ASSIGN	83:3	83:20	10	stoponfirsttag = 0
LVAL	83:3	83:3	11	stoponfirsttag
FIELD	83:3	83:3	12	stoponfirsttag
LEAF_NODE	83:3	83:3	13	stoponfirsttag
ASSIGN_OP	83:18	83:18	11	=
LEAF_NODE	83:18	83:18	12	=
RVAL	83:20	83:20	11	0
FIELD	83:20	83:20	12	0
LEAF_NODE	83:20	83:20	13	0
LEAF_NODE	83:21	83:21	9	;
JUMP_STATEMENT	84:3	84:8	8	break DESTINATION ;
KEYWORD	84:3	84:3	9	break
LEAF_NODE	84:3	84:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	84:8	84:8	9	;
LEAF_NODE	85:2	85:2	8	case
LEAF_NODE	85:7	85:7	8	'?'
LEAF_NODE	85:10	85:10	8	:
EXPR_STATEMENT	86:3	86:10	8	usage ( ) ;
EXPR	86:3	86:3	9	usage ( )
FUNCTION_CALL	86:3	86:9	10	usage ( )
CALLEE	86:3	86:3	11	usage
LEAF_NODE	86:3	86:3	12	usage
LEAF_NODE	86:8	86:8	11	(
LEAF_NODE	86:9	86:9	11	)
LEAF_NODE	86:10	86:10	9	;
LEAF_NODE	88:2	88:2	7	}
SELECTION	89:1	90:2	3	
KEYWORD	89:1	89:1	4	if
LEAF_NODE	89:1	89:1	5	if
LEAF_NODE	89:4	89:4	4	(
CONDITION	89:5	89:5	4	argc - optind < 2
EXPR	89:5	89:21	5	argc - optind < 2
FIELD	89:5	89:5	6	argc
LEAF_NODE	89:5	89:5	7	argc
LEAF_NODE	89:10	89:10	6	-
FIELD	89:12	89:12	6	optind
LEAF_NODE	89:12	89:12	7	optind
REL_OPERATOR	89:19	89:19	6	<
LEAF_NODE	89:19	89:19	7	<
FIELD	89:21	89:21	6	2
LEAF_NODE	89:21	89:21	7	2
LEAF_NODE	89:22	89:22	4	)
STATEMENTS	90:2	90:2	4	
EXPR_STATEMENT	90:2	90:9	5	usage ( ) ;
EXPR	90:2	90:2	6	usage ( )
FUNCTION_CALL	90:2	90:8	7	usage ( )
CALLEE	90:2	90:2	8	usage
LEAF_NODE	90:2	90:2	9	usage
LEAF_NODE	90:7	90:7	8	(
LEAF_NODE	90:8	90:8	8	)
LEAF_NODE	90:9	90:9	6	;
EXPR_STATEMENT	91:1	91:35	3	tif1 = TIFFOpen ( argv [ optind ] , "r" ) ;
EXPR	91:1	91:1	4	tif1 = TIFFOpen ( argv [ optind ] , "r" )
ASSIGN	91:1	91:8	5	tif1 = TIFFOpen ( argv [ optind ] , "r" )
LVAL	91:1	91:1	6	tif1
FIELD	91:1	91:1	7	tif1
LEAF_NODE	91:1	91:1	8	tif1
ASSIGN_OP	91:6	91:6	6	=
LEAF_NODE	91:6	91:6	7	=
RVAL	91:8	91:8	6	TIFFOpen ( argv [ optind ] , "r" )
FUNCTION_CALL	91:8	91:34	7	TIFFOpen ( argv [ optind ] , "r" )
CALLEE	91:8	91:8	8	TIFFOpen
LEAF_NODE	91:8	91:8	9	TIFFOpen
LEAF_NODE	91:16	91:16	8	(
ARGUMENT	91:17	91:17	8	argv [ optind ]
FIELD	91:17	91:28	9	argv [ optind ]
LEAF_NODE	91:17	91:17	10	argv
LEAF_NODE	91:21	91:21	10	[
EXPR	91:22	91:22	10	optind
FIELD	91:22	91:22	11	optind
LEAF_NODE	91:22	91:22	12	optind
LEAF_NODE	91:28	91:28	10	]
LEAF_NODE	91:29	91:29	8	,
ARGUMENT	91:31	91:31	8	"r"
FIELD	91:31	91:31	9	"r"
LEAF_NODE	91:31	91:31	10	"r"
LEAF_NODE	91:34	91:34	8	)
LEAF_NODE	91:35	91:35	4	;
SELECTION	92:1	93:2	3	
KEYWORD	92:1	92:1	4	if
LEAF_NODE	92:1	92:1	5	if
LEAF_NODE	92:4	92:4	4	(
CONDITION	92:5	92:5	4	tif1 == NULL
EXPR	92:5	92:13	5	tif1 == NULL
FIELD	92:5	92:5	6	tif1
LEAF_NODE	92:5	92:5	7	tif1
EQ_OPERATOR	92:10	92:10	6	==
LEAF_NODE	92:10	92:10	7	==
FIELD	92:13	92:13	6	NULL
LEAF_NODE	92:13	92:13	7	NULL
LEAF_NODE	92:17	92:17	4	)
STATEMENTS	93:2	93:2	4	
JUMP_STATEMENT	93:2	93:13	5	return ( - 1 ) ;
KEYWORD	93:2	93:2	6	return
LEAF_NODE	93:2	93:2	7	return
DESTINATION	93:9	93:9	6	( - 1 )
EXPR	93:9	93:12	7	( - 1 )
LEAF_NODE	93:9	93:9	8	(
UNARY_EXPR	93:10	93:11	8	- 1
UNARY_OPERATOR	93:10	93:10	9	-
LEAF_NODE	93:10	93:10	10	-
FIELD	93:11	93:11	9	1
LEAF_NODE	93:11	93:11	10	1
LEAF_NODE	93:12	93:12	8	)
LEAF_NODE	93:13	93:13	6	;
EXPR_STATEMENT	94:1	94:37	3	tif2 = TIFFOpen ( argv [ optind + 1 ] , "r" ) ;
EXPR	94:1	94:1	4	tif2 = TIFFOpen ( argv [ optind + 1 ] , "r" )
ASSIGN	94:1	94:8	5	tif2 = TIFFOpen ( argv [ optind + 1 ] , "r" )
LVAL	94:1	94:1	6	tif2
FIELD	94:1	94:1	7	tif2
LEAF_NODE	94:1	94:1	8	tif2
ASSIGN_OP	94:6	94:6	6	=
LEAF_NODE	94:6	94:6	7	=
RVAL	94:8	94:8	6	TIFFOpen ( argv [ optind + 1 ] , "r" )
FUNCTION_CALL	94:8	94:36	7	TIFFOpen ( argv [ optind + 1 ] , "r" )
CALLEE	94:8	94:8	8	TIFFOpen
LEAF_NODE	94:8	94:8	9	TIFFOpen
LEAF_NODE	94:16	94:16	8	(
ARGUMENT	94:17	94:17	8	argv [ optind + 1 ]
FIELD	94:17	94:30	9	argv [ optind + 1 ]
LEAF_NODE	94:17	94:17	10	argv
LEAF_NODE	94:21	94:21	10	[
EXPR	94:22	94:29	10	optind + 1
FIELD	94:22	94:22	11	optind
LEAF_NODE	94:22	94:22	12	optind
LEAF_NODE	94:28	94:28	11	+
FIELD	94:29	94:29	11	1
LEAF_NODE	94:29	94:29	12	1
LEAF_NODE	94:30	94:30	10	]
LEAF_NODE	94:31	94:31	8	,
ARGUMENT	94:33	94:33	8	"r"
FIELD	94:33	94:33	9	"r"
LEAF_NODE	94:33	94:33	10	"r"
LEAF_NODE	94:36	94:36	8	)
LEAF_NODE	94:37	94:37	4	;
SELECTION	95:1	96:2	3	
KEYWORD	95:1	95:1	4	if
LEAF_NODE	95:1	95:1	5	if
LEAF_NODE	95:4	95:4	4	(
CONDITION	95:5	95:5	4	tif2 == NULL
EXPR	95:5	95:13	5	tif2 == NULL
FIELD	95:5	95:5	6	tif2
LEAF_NODE	95:5	95:5	7	tif2
EQ_OPERATOR	95:10	95:10	6	==
LEAF_NODE	95:10	95:10	7	==
FIELD	95:13	95:13	6	NULL
LEAF_NODE	95:13	95:13	7	NULL
LEAF_NODE	95:17	95:17	4	)
STATEMENTS	96:2	96:2	4	
JUMP_STATEMENT	96:2	96:13	5	return ( - 2 ) ;
KEYWORD	96:2	96:2	6	return
LEAF_NODE	96:2	96:2	7	return
DESTINATION	96:9	96:9	6	( - 2 )
EXPR	96:9	96:12	7	( - 2 )
LEAF_NODE	96:9	96:9	8	(
UNARY_EXPR	96:10	96:11	8	- 2
UNARY_OPERATOR	96:10	96:10	9	-
LEAF_NODE	96:10	96:10	10	-
FIELD	96:11	96:11	9	2
LEAF_NODE	96:11	96:11	10	2
LEAF_NODE	96:12	96:12	8	)
LEAF_NODE	96:13	96:13	6	;
EXPR_STATEMENT	97:1	97:11	3	dirnum = 0 ;
EXPR	97:1	97:1	4	dirnum = 0
ASSIGN	97:1	97:10	5	dirnum = 0
LVAL	97:1	97:1	6	dirnum
FIELD	97:1	97:1	7	dirnum
LEAF_NODE	97:1	97:1	8	dirnum
ASSIGN_OP	97:8	97:8	6	=
LEAF_NODE	97:8	97:8	7	=
RVAL	97:10	97:10	6	0
FIELD	97:10	97:10	7	0
LEAF_NODE	97:10	97:10	8	0
LEAF_NODE	97:11	97:11	4	;
ITERATION	98:1	98:29	3	
KEYWORD	98:1	98:1	4	while
LEAF_NODE	98:1	98:1	5	while
LEAF_NODE	98:7	98:7	4	(
CONDITION	98:8	98:8	4	tiffcmp ( tif1 , tif2 )
EXPR	98:8	98:8	5	tiffcmp ( tif1 , tif2 )
FUNCTION_CALL	98:8	98:26	6	tiffcmp ( tif1 , tif2 )
CALLEE	98:8	98:8	7	tiffcmp
LEAF_NODE	98:8	98:8	8	tiffcmp
LEAF_NODE	98:15	98:15	7	(
ARGUMENT	98:16	98:16	7	tif1
FIELD	98:16	98:16	8	tif1
LEAF_NODE	98:16	98:16	9	tif1
LEAF_NODE	98:20	98:20	7	,
ARGUMENT	98:22	98:22	7	tif2
FIELD	98:22	98:22	8	tif2
LEAF_NODE	98:22	98:22	9	tif2
LEAF_NODE	98:26	98:26	7	)
LEAF_NODE	98:27	98:27	4	)
STATEMENTS	98:29	111:1	4	
LEAF_NODE	98:29	98:29	5	{
STATEMENTS	99:2	110:2	5	
SELECTION	99:2	99:32	6	
KEYWORD	99:2	99:2	7	if
LEAF_NODE	99:2	99:2	8	if
LEAF_NODE	99:5	99:5	7	(
CONDITION	99:6	99:6	7	! TIFFReadDirectory ( tif1 )
EXPR	99:6	99:6	8	! TIFFReadDirectory ( tif1 )
UNARY_EXPR	99:6	99:7	9	! TIFFReadDirectory ( tif1 )
UNARY_OPERATOR	99:6	99:6	10	!
LEAF_NODE	99:6	99:6	11	!
FUNCTION_CALL	99:7	99:29	10	TIFFReadDirectory ( tif1 )
CALLEE	99:7	99:7	11	TIFFReadDirectory
LEAF_NODE	99:7	99:7	12	TIFFReadDirectory
LEAF_NODE	99:24	99:24	11	(
ARGUMENT	99:25	99:25	11	tif1
FIELD	99:25	99:25	12	tif1
LEAF_NODE	99:25	99:25	13	tif1
LEAF_NODE	99:29	99:29	11	)
LEAF_NODE	99:30	99:30	7	)
STATEMENTS	99:32	105:2	7	
LEAF_NODE	99:32	99:32	8	{
STATEMENTS	100:3	104:3	8	
SELECTION	100:3	101:4	9	
KEYWORD	100:3	100:3	10	if
LEAF_NODE	100:3	100:3	11	if
LEAF_NODE	100:6	100:6	10	(
CONDITION	100:7	100:7	10	! TIFFReadDirectory ( tif2 )
EXPR	100:7	100:7	11	! TIFFReadDirectory ( tif2 )
UNARY_EXPR	100:7	100:8	12	! TIFFReadDirectory ( tif2 )
UNARY_OPERATOR	100:7	100:7	13	!
LEAF_NODE	100:7	100:7	14	!
FUNCTION_CALL	100:8	100:30	13	TIFFReadDirectory ( tif2 )
CALLEE	100:8	100:8	14	TIFFReadDirectory
LEAF_NODE	100:8	100:8	15	TIFFReadDirectory
LEAF_NODE	100:25	100:25	14	(
ARGUMENT	100:26	100:26	14	tif2
FIELD	100:26	100:26	15	tif2
LEAF_NODE	100:26	100:26	16	tif2
LEAF_NODE	100:30	100:30	14	)
LEAF_NODE	100:31	100:31	10	)
STATEMENTS	101:4	101:4	10	
JUMP_STATEMENT	101:4	101:9	11	break DESTINATION ;
KEYWORD	101:4	101:4	12	break
LEAF_NODE	101:4	101:4	13	break
LEAF_NODE	0:0	0:0	12	DESTINATION
LEAF_NODE	101:9	101:9	12	;
EXPR_STATEMENT	102:3	103:26	9	printf ( "No more directories for %s\n" , TIFFFileName ( tif1 ) ) ;
EXPR	102:3	102:3	10	printf ( "No more directories for %s\n" , TIFFFileName ( tif1 ) )
FUNCTION_CALL	102:3	103:25	11	printf ( "No more directories for %s\n" , TIFFFileName ( tif1 ) )
CALLEE	102:3	102:3	12	printf
LEAF_NODE	102:3	102:3	13	printf
LEAF_NODE	102:9	102:9	12	(
ARGUMENT	102:10	102:10	12	"No more directories for %s\n"
FIELD	102:10	102:10	13	"No more directories for %s\n"
LEAF_NODE	102:10	102:10	14	"No more directories for %s\n"
LEAF_NODE	102:40	102:40	12	,
ARGUMENT	103:7	103:7	12	TIFFFileName ( tif1 )
FUNCTION_CALL	103:7	103:24	13	TIFFFileName ( tif1 )
CALLEE	103:7	103:7	14	TIFFFileName
LEAF_NODE	103:7	103:7	15	TIFFFileName
LEAF_NODE	103:19	103:19	14	(
ARGUMENT	103:20	103:20	14	tif1
FIELD	103:20	103:20	15	tif1
LEAF_NODE	103:20	103:20	16	tif1
LEAF_NODE	103:24	103:24	14	)
LEAF_NODE	103:25	103:25	12	)
LEAF_NODE	103:26	103:26	10	;
JUMP_STATEMENT	104:3	104:13	9	return ( 1 ) ;
KEYWORD	104:3	104:3	10	return
LEAF_NODE	104:3	104:3	11	return
DESTINATION	104:10	104:10	10	( 1 )
EXPR	104:10	104:12	11	( 1 )
LEAF_NODE	104:10	104:10	12	(
FIELD	104:11	104:11	12	1
LEAF_NODE	104:11	104:11	13	1
LEAF_NODE	104:12	104:12	12	)
LEAF_NODE	104:13	104:13	10	;
LEAF_NODE	105:2	105:2	8	}
SELECTION	105:4	105:9	6	
KEYWORD	105:4	105:4	7	else
LEAF_NODE	105:4	105:4	8	else
STATEMENTS	105:9	105:9	7	
SELECTION	105:9	105:39	8	
KEYWORD	105:9	105:9	9	if
LEAF_NODE	105:9	105:9	10	if
LEAF_NODE	105:12	105:12	9	(
CONDITION	105:13	105:13	9	! TIFFReadDirectory ( tif2 )
EXPR	105:13	105:13	10	! TIFFReadDirectory ( tif2 )
UNARY_EXPR	105:13	105:14	11	! TIFFReadDirectory ( tif2 )
UNARY_OPERATOR	105:13	105:13	12	!
LEAF_NODE	105:13	105:13	13	!
FUNCTION_CALL	105:14	105:36	12	TIFFReadDirectory ( tif2 )
CALLEE	105:14	105:14	13	TIFFReadDirectory
LEAF_NODE	105:14	105:14	14	TIFFReadDirectory
LEAF_NODE	105:31	105:31	13	(
ARGUMENT	105:32	105:32	13	tif2
FIELD	105:32	105:32	14	tif2
LEAF_NODE	105:32	105:32	15	tif2
LEAF_NODE	105:36	105:36	13	)
LEAF_NODE	105:37	105:37	9	)
STATEMENTS	105:39	109:2	9	
LEAF_NODE	105:39	105:39	10	{
STATEMENTS	106:3	108:3	10	
EXPR_STATEMENT	106:3	107:26	11	printf ( "No more directories for %s\n" , TIFFFileName ( tif2 ) ) ;
EXPR	106:3	106:3	12	printf ( "No more directories for %s\n" , TIFFFileName ( tif2 ) )
FUNCTION_CALL	106:3	107:25	13	printf ( "No more directories for %s\n" , TIFFFileName ( tif2 ) )
CALLEE	106:3	106:3	14	printf
LEAF_NODE	106:3	106:3	15	printf
LEAF_NODE	106:9	106:9	14	(
ARGUMENT	106:10	106:10	14	"No more directories for %s\n"
FIELD	106:10	106:10	15	"No more directories for %s\n"
LEAF_NODE	106:10	106:10	16	"No more directories for %s\n"
LEAF_NODE	106:40	106:40	14	,
ARGUMENT	107:7	107:7	14	TIFFFileName ( tif2 )
FUNCTION_CALL	107:7	107:24	15	TIFFFileName ( tif2 )
CALLEE	107:7	107:7	16	TIFFFileName
LEAF_NODE	107:7	107:7	17	TIFFFileName
LEAF_NODE	107:19	107:19	16	(
ARGUMENT	107:20	107:20	16	tif2
FIELD	107:20	107:20	17	tif2
LEAF_NODE	107:20	107:20	18	tif2
LEAF_NODE	107:24	107:24	16	)
LEAF_NODE	107:25	107:25	14	)
LEAF_NODE	107:26	107:26	12	;
JUMP_STATEMENT	108:3	108:13	11	return ( 1 ) ;
KEYWORD	108:3	108:3	12	return
LEAF_NODE	108:3	108:3	13	return
DESTINATION	108:10	108:10	12	( 1 )
EXPR	108:10	108:12	13	( 1 )
LEAF_NODE	108:10	108:10	14	(
FIELD	108:11	108:11	14	1
LEAF_NODE	108:11	108:11	15	1
LEAF_NODE	108:12	108:12	14	)
LEAF_NODE	108:13	108:13	12	;
LEAF_NODE	109:2	109:2	10	}
EXPR_STATEMENT	110:2	110:37	6	printf ( "Directory %d:\n" , ++ dirnum ) ;
EXPR	110:2	110:2	7	printf ( "Directory %d:\n" , ++ dirnum )
FUNCTION_CALL	110:2	110:36	8	printf ( "Directory %d:\n" , ++ dirnum )
CALLEE	110:2	110:2	9	printf
LEAF_NODE	110:2	110:2	10	printf
LEAF_NODE	110:8	110:8	9	(
ARGUMENT	110:9	110:9	9	"Directory %d:\n"
FIELD	110:9	110:9	10	"Directory %d:\n"
LEAF_NODE	110:9	110:9	11	"Directory %d:\n"
LEAF_NODE	110:26	110:26	9	,
ARGUMENT	110:28	110:30	9	++ dirnum
LEAF_NODE	110:28	110:28	10	++
FIELD	110:30	110:30	10	dirnum
LEAF_NODE	110:30	110:30	11	dirnum
LEAF_NODE	110:36	110:36	9	)
LEAF_NODE	110:37	110:37	7	;
LEAF_NODE	111:1	111:1	5	}
EXPR_STATEMENT	113:1	113:16	3	TIFFClose ( tif1 ) ;
EXPR	113:1	113:1	4	TIFFClose ( tif1 )
FUNCTION_CALL	113:1	113:15	5	TIFFClose ( tif1 )
CALLEE	113:1	113:1	6	TIFFClose
LEAF_NODE	113:1	113:1	7	TIFFClose
LEAF_NODE	113:10	113:10	6	(
ARGUMENT	113:11	113:11	6	tif1
FIELD	113:11	113:11	7	tif1
LEAF_NODE	113:11	113:11	8	tif1
LEAF_NODE	113:15	113:15	6	)
LEAF_NODE	113:16	113:16	4	;
EXPR_STATEMENT	114:1	114:16	3	TIFFClose ( tif2 ) ;
EXPR	114:1	114:1	4	TIFFClose ( tif2 )
FUNCTION_CALL	114:1	114:15	5	TIFFClose ( tif2 )
CALLEE	114:1	114:1	6	TIFFClose
LEAF_NODE	114:1	114:1	7	TIFFClose
LEAF_NODE	114:10	114:10	6	(
ARGUMENT	114:11	114:11	6	tif2
FIELD	114:11	114:11	7	tif2
LEAF_NODE	114:11	114:11	8	tif2
LEAF_NODE	114:15	114:15	6	)
LEAF_NODE	114:16	114:16	4	;
JUMP_STATEMENT	115:1	115:11	3	return ( 0 ) ;
KEYWORD	115:1	115:1	4	return
LEAF_NODE	115:1	115:1	5	return
DESTINATION	115:8	115:8	4	( 0 )
EXPR	115:8	115:10	5	( 0 )
LEAF_NODE	115:8	115:8	6	(
FIELD	115:9	115:9	6	0
LEAF_NODE	115:9	115:9	7	0
LEAF_NODE	115:10	115:10	6	)
LEAF_NODE	115:11	115:11	4	;
LEAF_NODE	116:0	116:0	2	}
FUNCTION_DEF	127:0	138:0	1	
RETURN_TYPE	127:0	127:7	2	static void
LEAF_NODE	127:0	127:0	3	static
TYPE_NAME	127:7	127:7	3	void
LEAF_NODE	127:7	127:7	4	void
FUNCTION_NAME	128:0	128:0	2	usage
LEAF_NODE	128:0	128:0	3	usage
PARAMETER_LIST	128:5	128:10	2	( void )
LEAF_NODE	128:5	128:5	3	(
PARAMETER_DECL	128:6	128:6	3	void
LEAF_NODE	128:6	128:6	4	void
LEAF_NODE	128:10	128:10	3	)
LEAF_NODE	129:0	129:0	2	{
STATEMENTS	130:1	137:1	2	
SIMPLE_DECL	130:1	130:17	3	char [ BUFSIZ ] buf ;
VAR_DECL	130:1	130:6	4	char [ BUFSIZ ] buf
TYPE	130:1	130:9	5	char [ BUFSIZ ]
TYPE_NAME	130:1	130:1	6	char
LEAF_NODE	130:1	130:1	7	char
TYPE_SUFFIX	130:9	130:16	6	[ BUFSIZ ]
LEAF_NODE	130:9	130:9	7	[
FIELD	130:10	130:10	7	BUFSIZ
LEAF_NODE	130:10	130:10	8	BUFSIZ
LEAF_NODE	130:16	130:16	7	]
NAME	130:6	130:6	5	buf
LEAF_NODE	130:6	130:6	6	buf
LEAF_NODE	130:17	130:17	4	;
SIMPLE_DECL	131:1	131:6	3	int i ;
VAR_DECL	131:1	131:5	4	int i
TYPE	131:1	131:1	5	int
TYPE_NAME	131:1	131:1	6	int
LEAF_NODE	131:1	131:1	7	int
NAME	131:5	131:5	5	i
LEAF_NODE	131:5	131:5	6	i
LEAF_NODE	131:6	131:6	4	;
EXPR_STATEMENT	133:1	133:20	3	setbuf ( stderr , buf ) ;
EXPR	133:1	133:1	4	setbuf ( stderr , buf )
FUNCTION_CALL	133:1	133:19	5	setbuf ( stderr , buf )
CALLEE	133:1	133:1	6	setbuf
LEAF_NODE	133:1	133:1	7	setbuf
LEAF_NODE	133:7	133:7	6	(
ARGUMENT	133:8	133:8	6	stderr
FIELD	133:8	133:8	7	stderr
LEAF_NODE	133:8	133:8	8	stderr
LEAF_NODE	133:14	133:14	6	,
ARGUMENT	133:16	133:16	6	buf
FIELD	133:16	133:16	7	buf
LEAF_NODE	133:16	133:16	8	buf
LEAF_NODE	133:19	133:19	6	)
LEAF_NODE	133:20	133:20	4	;
EXPR_STATEMENT	134:8	134:51	3	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) ) ;
EXPR	134:8	134:8	4	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
FUNCTION_CALL	134:8	134:50	5	fprintf ( stderr , "%s\n\n" , TIFFGetVersion ( ) )
CALLEE	134:8	134:8	6	fprintf
LEAF_NODE	134:8	134:8	7	fprintf
LEAF_NODE	134:15	134:15	6	(
ARGUMENT	134:16	134:16	6	stderr
FIELD	134:16	134:16	7	stderr
LEAF_NODE	134:16	134:16	8	stderr
LEAF_NODE	134:22	134:22	6	,
ARGUMENT	134:24	134:24	6	"%s\n\n"
FIELD	134:24	134:24	7	"%s\n\n"
LEAF_NODE	134:24	134:24	8	"%s\n\n"
LEAF_NODE	134:32	134:32	6	,
ARGUMENT	134:34	134:34	6	TIFFGetVersion ( )
FUNCTION_CALL	134:34	134:49	7	TIFFGetVersion ( )
CALLEE	134:34	134:34	8	TIFFGetVersion
LEAF_NODE	134:34	134:34	9	TIFFGetVersion
LEAF_NODE	134:48	134:48	8	(
LEAF_NODE	134:49	134:49	8	)
LEAF_NODE	134:50	134:50	6	)
LEAF_NODE	134:51	134:51	4	;
ITERATION	135:1	136:2	3	
KEYWORD	135:1	135:1	4	for
LEAF_NODE	135:1	135:1	5	for
LEAF_NODE	135:5	135:5	4	(
FOR_INIT	135:6	135:11	4	i = 0 ;
EXPR	135:6	135:6	5	i = 0
ASSIGN	135:6	135:10	6	i = 0
LVAL	135:6	135:6	7	i
FIELD	135:6	135:6	8	i
LEAF_NODE	135:6	135:6	9	i
ASSIGN_OP	135:8	135:8	7	=
LEAF_NODE	135:8	135:8	8	=
RVAL	135:10	135:10	7	0
FIELD	135:10	135:10	8	0
LEAF_NODE	135:10	135:10	9	0
LEAF_NODE	135:11	135:11	5	;
CONDITION	135:13	135:13	4	stuff [ i ] != NULL
EXPR	135:13	135:25	5	stuff [ i ] != NULL
FIELD	135:13	135:20	6	stuff [ i ]
LEAF_NODE	135:13	135:13	7	stuff
LEAF_NODE	135:18	135:18	7	[
EXPR	135:19	135:19	7	i
FIELD	135:19	135:19	8	i
LEAF_NODE	135:19	135:19	9	i
LEAF_NODE	135:20	135:20	7	]
EQ_OPERATOR	135:22	135:22	6	!=
LEAF_NODE	135:22	135:22	7	!=
FIELD	135:25	135:25	6	NULL
LEAF_NODE	135:25	135:25	7	NULL
LEAF_NODE	135:29	135:29	4	;
FOR_EXPR	135:31	135:31	4	i ++
EXPR	135:31	135:31	5	i ++
FIELD	135:31	135:32	6	i ++
LEAF_NODE	135:31	135:31	7	i
LEAF_NODE	135:32	135:32	7	++
LEAF_NODE	135:34	135:34	4	)
STATEMENTS	136:2	136:2	4	
EXPR_STATEMENT	136:2	136:35	5	fprintf ( stderr , "%s\n" , stuff [ i ] ) ;
EXPR	136:2	136:2	6	fprintf ( stderr , "%s\n" , stuff [ i ] )
FUNCTION_CALL	136:2	136:34	7	fprintf ( stderr , "%s\n" , stuff [ i ] )
CALLEE	136:2	136:2	8	fprintf
LEAF_NODE	136:2	136:2	9	fprintf
LEAF_NODE	136:9	136:9	8	(
ARGUMENT	136:10	136:10	8	stderr
FIELD	136:10	136:10	9	stderr
LEAF_NODE	136:10	136:10	10	stderr
LEAF_NODE	136:16	136:16	8	,
ARGUMENT	136:18	136:18	8	"%s\n"
FIELD	136:18	136:18	9	"%s\n"
LEAF_NODE	136:18	136:18	10	"%s\n"
LEAF_NODE	136:24	136:24	8	,
ARGUMENT	136:26	136:26	8	stuff [ i ]
FIELD	136:26	136:33	9	stuff [ i ]
LEAF_NODE	136:26	136:26	10	stuff
LEAF_NODE	136:31	136:31	10	[
EXPR	136:32	136:32	10	i
FIELD	136:32	136:32	11	i
LEAF_NODE	136:32	136:32	12	i
LEAF_NODE	136:33	136:33	10	]
LEAF_NODE	136:34	136:34	8	)
LEAF_NODE	136:35	136:35	6	;
EXPR_STATEMENT	137:1	137:9	3	exit ( - 1 ) ;
EXPR	137:1	137:1	4	exit ( - 1 )
FUNCTION_CALL	137:1	137:8	5	exit ( - 1 )
CALLEE	137:1	137:1	6	exit
LEAF_NODE	137:1	137:1	7	exit
LEAF_NODE	137:5	137:5	6	(
ARGUMENT	137:6	137:6	6	- 1
UNARY_EXPR	137:6	137:7	7	- 1
UNARY_OPERATOR	137:6	137:6	8	-
LEAF_NODE	137:6	137:6	9	-
FIELD	137:7	137:7	8	1
LEAF_NODE	137:7	137:7	9	1
LEAF_NODE	137:8	137:8	6	)
LEAF_NODE	137:9	137:9	4	;
LEAF_NODE	138:0	138:0	2	}
FUNCTION_DEF	152:0	245:0	1	
RETURN_TYPE	152:0	152:7	2	static int
LEAF_NODE	152:0	152:0	3	static
TYPE_NAME	152:7	152:7	3	int
LEAF_NODE	152:7	152:7	4	int
FUNCTION_NAME	153:0	153:0	2	tiffcmp
LEAF_NODE	153:0	153:0	3	tiffcmp
PARAMETER_LIST	153:7	153:30	2	( TIFF * tif1 , TIFF * tif2 )
LEAF_NODE	153:7	153:7	3	(
PARAMETER_DECL	153:8	153:14	3	TIFF * tif1
TYPE	153:8	153:12	4	TIFF *
TYPE_NAME	153:8	153:8	5	TIFF
LEAF_NODE	153:8	153:8	6	TIFF
POINTER	153:12	153:12	5	*
LEAF_NODE	153:12	153:12	6	*
NAME	153:14	153:14	4	tif1
LEAF_NODE	153:14	153:14	5	tif1
LEAF_NODE	153:18	153:18	3	,
PARAMETER_DECL	153:20	153:26	3	TIFF * tif2
TYPE	153:20	153:24	4	TIFF *
TYPE_NAME	153:20	153:20	5	TIFF
LEAF_NODE	153:20	153:20	6	TIFF
POINTER	153:24	153:24	5	*
LEAF_NODE	153:24	153:24	6	*
NAME	153:26	153:26	4	tif2
LEAF_NODE	153:26	153:26	5	tif2
LEAF_NODE	153:30	153:30	3	)
LEAF_NODE	154:0	154:0	2	{
STATEMENTS	155:1	244:1	2	
SIMPLE_DECL	155:1	155:24	3	uint16 config1 , uint16 config2 ;
INIT_DECL_LIST	155:1	155:1	4	uint16 config1 , uint16 config2
VAR_DECL	155:1	155:8	5	uint16 config1
TYPE	155:1	155:1	6	uint16
TYPE_NAME	155:1	155:1	7	uint16
LEAF_NODE	155:1	155:1	8	uint16
NAME	155:8	155:8	6	config1
LEAF_NODE	155:8	155:8	7	config1
LEAF_NODE	155:15	155:15	5	,
VAR_DECL	155:1	155:17	5	uint16 config2
TYPE	155:1	155:1	6	uint16
TYPE_NAME	155:1	155:1	7	uint16
LEAF_NODE	155:1	155:1	8	uint16
NAME	155:17	155:17	6	config2
LEAF_NODE	155:17	155:17	7	config2
LEAF_NODE	155:24	155:24	4	;
SIMPLE_DECL	156:1	156:14	3	tsize_t size1 ;
VAR_DECL	156:1	156:9	4	tsize_t size1
TYPE	156:1	156:1	5	tsize_t
TYPE_NAME	156:1	156:1	6	tsize_t
LEAF_NODE	156:1	156:1	7	tsize_t
NAME	156:9	156:9	5	size1
LEAF_NODE	156:9	156:9	6	size1
LEAF_NODE	156:14	156:14	4	;
SIMPLE_DECL	157:1	157:11	3	uint32 row ;
VAR_DECL	157:1	157:8	4	uint32 row
TYPE	157:1	157:1	5	uint32
TYPE_NAME	157:1	157:1	6	uint32
LEAF_NODE	157:1	157:1	7	uint32
NAME	157:8	157:8	5	row
LEAF_NODE	157:8	157:8	6	row
LEAF_NODE	157:11	157:11	4	;
SIMPLE_DECL	158:1	158:12	3	tsample_t s ;
VAR_DECL	158:1	158:11	4	tsample_t s
TYPE	158:1	158:1	5	tsample_t
TYPE_NAME	158:1	158:1	6	tsample_t
LEAF_NODE	158:1	158:1	7	tsample_t
NAME	158:11	158:11	5	s
LEAF_NODE	158:11	158:11	6	s
LEAF_NODE	158:12	158:12	4	;
SIMPLE_DECL	159:1	159:27	3	unsigned char * buf1 , unsigned char * buf2 ;
INIT_DECL_LIST	159:1	159:1	4	unsigned char * buf1 , unsigned char * buf2
VAR_DECL	159:1	159:16	5	unsigned char * buf1
TYPE	159:1	159:15	6	unsigned char *
TYPE_NAME	159:1	159:10	7	unsigned char
LEAF_NODE	159:1	159:1	8	unsigned
LEAF_NODE	159:10	159:10	8	char
POINTER	159:15	159:15	7	*
LEAF_NODE	159:15	159:15	8	*
NAME	159:16	159:16	6	buf1
LEAF_NODE	159:16	159:16	7	buf1
LEAF_NODE	159:20	159:20	5	,
VAR_DECL	159:1	159:23	5	unsigned char * buf2
TYPE	159:1	159:22	6	unsigned char *
TYPE_NAME	159:1	159:10	7	unsigned char
LEAF_NODE	159:1	159:1	8	unsigned
LEAF_NODE	159:10	159:10	8	char
POINTER	159:22	159:22	7	*
LEAF_NODE	159:22	159:22	8	*
NAME	159:23	159:23	6	buf2
LEAF_NODE	159:23	159:23	7	buf2
LEAF_NODE	159:27	159:27	4	;
SELECTION	161:1	162:2	3	
KEYWORD	161:1	161:1	4	if
LEAF_NODE	161:1	161:1	5	if
LEAF_NODE	161:4	161:4	4	(
CONDITION	161:5	161:5	4	! CheckShortTag ( tif1 , tif2 , TIFFTAG_BITSPERSAMPLE , "BitsPerSample" )
EXPR	161:5	161:5	5	! CheckShortTag ( tif1 , tif2 , TIFFTAG_BITSPERSAMPLE , "BitsPerSample" )
UNARY_EXPR	161:5	161:6	6	! CheckShortTag ( tif1 , tif2 , TIFFTAG_BITSPERSAMPLE , "BitsPerSample" )
UNARY_OPERATOR	161:5	161:5	7	!
LEAF_NODE	161:5	161:5	8	!
FUNCTION_CALL	161:6	161:70	7	CheckShortTag ( tif1 , tif2 , TIFFTAG_BITSPERSAMPLE , "BitsPerSample" )
CALLEE	161:6	161:6	8	CheckShortTag
LEAF_NODE	161:6	161:6	9	CheckShortTag
LEAF_NODE	161:19	161:19	8	(
ARGUMENT	161:20	161:20	8	tif1
FIELD	161:20	161:20	9	tif1
LEAF_NODE	161:20	161:20	10	tif1
LEAF_NODE	161:24	161:24	8	,
ARGUMENT	161:26	161:26	8	tif2
FIELD	161:26	161:26	9	tif2
LEAF_NODE	161:26	161:26	10	tif2
LEAF_NODE	161:30	161:30	8	,
ARGUMENT	161:32	161:32	8	TIFFTAG_BITSPERSAMPLE
FIELD	161:32	161:32	9	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	161:32	161:32	10	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	161:53	161:53	8	,
ARGUMENT	161:55	161:55	8	"BitsPerSample"
FIELD	161:55	161:55	9	"BitsPerSample"
LEAF_NODE	161:55	161:55	10	"BitsPerSample"
LEAF_NODE	161:70	161:70	8	)
LEAF_NODE	161:71	161:71	4	)
STATEMENTS	162:2	162:2	4	
JUMP_STATEMENT	162:2	162:12	5	return ( 0 ) ;
KEYWORD	162:2	162:2	6	return
LEAF_NODE	162:2	162:2	7	return
DESTINATION	162:9	162:9	6	( 0 )
EXPR	162:9	162:11	7	( 0 )
LEAF_NODE	162:9	162:9	8	(
FIELD	162:10	162:10	8	0
LEAF_NODE	162:10	162:10	9	0
LEAF_NODE	162:11	162:11	8	)
LEAF_NODE	162:12	162:12	6	;
SELECTION	163:1	164:2	3	
KEYWORD	163:1	163:1	4	if
LEAF_NODE	163:1	163:1	5	if
LEAF_NODE	163:4	163:4	4	(
CONDITION	163:5	163:5	4	! CheckShortTag ( tif1 , tif2 , TIFFTAG_SAMPLESPERPIXEL , "SamplesPerPixel" )
EXPR	163:5	163:5	5	! CheckShortTag ( tif1 , tif2 , TIFFTAG_SAMPLESPERPIXEL , "SamplesPerPixel" )
UNARY_EXPR	163:5	163:6	6	! CheckShortTag ( tif1 , tif2 , TIFFTAG_SAMPLESPERPIXEL , "SamplesPerPixel" )
UNARY_OPERATOR	163:5	163:5	7	!
LEAF_NODE	163:5	163:5	8	!
FUNCTION_CALL	163:6	163:74	7	CheckShortTag ( tif1 , tif2 , TIFFTAG_SAMPLESPERPIXEL , "SamplesPerPixel" )
CALLEE	163:6	163:6	8	CheckShortTag
LEAF_NODE	163:6	163:6	9	CheckShortTag
LEAF_NODE	163:19	163:19	8	(
ARGUMENT	163:20	163:20	8	tif1
FIELD	163:20	163:20	9	tif1
LEAF_NODE	163:20	163:20	10	tif1
LEAF_NODE	163:24	163:24	8	,
ARGUMENT	163:26	163:26	8	tif2
FIELD	163:26	163:26	9	tif2
LEAF_NODE	163:26	163:26	10	tif2
LEAF_NODE	163:30	163:30	8	,
ARGUMENT	163:32	163:32	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	163:32	163:32	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	163:32	163:32	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	163:55	163:55	8	,
ARGUMENT	163:57	163:57	8	"SamplesPerPixel"
FIELD	163:57	163:57	9	"SamplesPerPixel"
LEAF_NODE	163:57	163:57	10	"SamplesPerPixel"
LEAF_NODE	163:74	163:74	8	)
LEAF_NODE	163:75	163:75	4	)
STATEMENTS	164:2	164:2	4	
JUMP_STATEMENT	164:2	164:12	5	return ( 0 ) ;
KEYWORD	164:2	164:2	6	return
LEAF_NODE	164:2	164:2	7	return
DESTINATION	164:9	164:9	6	( 0 )
EXPR	164:9	164:11	7	( 0 )
LEAF_NODE	164:9	164:9	8	(
FIELD	164:10	164:10	8	0
LEAF_NODE	164:10	164:10	9	0
LEAF_NODE	164:11	164:11	8	)
LEAF_NODE	164:12	164:12	6	;
SELECTION	165:1	166:2	3	
KEYWORD	165:1	165:1	4	if
LEAF_NODE	165:1	165:1	5	if
LEAF_NODE	165:4	165:4	4	(
CONDITION	165:5	165:5	4	! CheckLongTag ( tif1 , tif2 , TIFFTAG_IMAGEWIDTH , "ImageWidth" )
EXPR	165:5	165:5	5	! CheckLongTag ( tif1 , tif2 , TIFFTAG_IMAGEWIDTH , "ImageWidth" )
UNARY_EXPR	165:5	165:6	6	! CheckLongTag ( tif1 , tif2 , TIFFTAG_IMAGEWIDTH , "ImageWidth" )
UNARY_OPERATOR	165:5	165:5	7	!
LEAF_NODE	165:5	165:5	8	!
FUNCTION_CALL	165:6	165:63	7	CheckLongTag ( tif1 , tif2 , TIFFTAG_IMAGEWIDTH , "ImageWidth" )
CALLEE	165:6	165:6	8	CheckLongTag
LEAF_NODE	165:6	165:6	9	CheckLongTag
LEAF_NODE	165:18	165:18	8	(
ARGUMENT	165:19	165:19	8	tif1
FIELD	165:19	165:19	9	tif1
LEAF_NODE	165:19	165:19	10	tif1
LEAF_NODE	165:23	165:23	8	,
ARGUMENT	165:25	165:25	8	tif2
FIELD	165:25	165:25	9	tif2
LEAF_NODE	165:25	165:25	10	tif2
LEAF_NODE	165:29	165:29	8	,
ARGUMENT	165:31	165:31	8	TIFFTAG_IMAGEWIDTH
FIELD	165:31	165:31	9	TIFFTAG_IMAGEWIDTH
LEAF_NODE	165:31	165:31	10	TIFFTAG_IMAGEWIDTH
LEAF_NODE	165:49	165:49	8	,
ARGUMENT	165:51	165:51	8	"ImageWidth"
FIELD	165:51	165:51	9	"ImageWidth"
LEAF_NODE	165:51	165:51	10	"ImageWidth"
LEAF_NODE	165:63	165:63	8	)
LEAF_NODE	165:64	165:64	4	)
STATEMENTS	166:2	166:2	4	
JUMP_STATEMENT	166:2	166:12	5	return ( 0 ) ;
KEYWORD	166:2	166:2	6	return
LEAF_NODE	166:2	166:2	7	return
DESTINATION	166:9	166:9	6	( 0 )
EXPR	166:9	166:11	7	( 0 )
LEAF_NODE	166:9	166:9	8	(
FIELD	166:10	166:10	8	0
LEAF_NODE	166:10	166:10	9	0
LEAF_NODE	166:11	166:11	8	)
LEAF_NODE	166:12	166:12	6	;
SELECTION	167:1	168:2	3	
KEYWORD	167:1	167:1	4	if
LEAF_NODE	167:1	167:1	5	if
LEAF_NODE	167:4	167:4	4	(
CONDITION	167:5	167:5	4	! cmptags ( tif1 , tif2 )
EXPR	167:5	167:5	5	! cmptags ( tif1 , tif2 )
UNARY_EXPR	167:5	167:6	6	! cmptags ( tif1 , tif2 )
UNARY_OPERATOR	167:5	167:5	7	!
LEAF_NODE	167:5	167:5	8	!
FUNCTION_CALL	167:6	167:24	7	cmptags ( tif1 , tif2 )
CALLEE	167:6	167:6	8	cmptags
LEAF_NODE	167:6	167:6	9	cmptags
LEAF_NODE	167:13	167:13	8	(
ARGUMENT	167:14	167:14	8	tif1
FIELD	167:14	167:14	9	tif1
LEAF_NODE	167:14	167:14	10	tif1
LEAF_NODE	167:18	167:18	8	,
ARGUMENT	167:20	167:20	8	tif2
FIELD	167:20	167:20	9	tif2
LEAF_NODE	167:20	167:20	10	tif2
LEAF_NODE	167:24	167:24	8	)
LEAF_NODE	167:25	167:25	4	)
STATEMENTS	168:2	168:2	4	
JUMP_STATEMENT	168:2	168:12	5	return ( 1 ) ;
KEYWORD	168:2	168:2	6	return
LEAF_NODE	168:2	168:2	7	return
DESTINATION	168:9	168:9	6	( 1 )
EXPR	168:9	168:11	7	( 1 )
LEAF_NODE	168:9	168:9	8	(
FIELD	168:10	168:10	8	1
LEAF_NODE	168:10	168:10	9	1
LEAF_NODE	168:11	168:11	8	)
LEAF_NODE	168:12	168:12	6	;
EXPR_STATEMENT	169:1	169:65	3	( void ) TIFFGetField ( tif1 , TIFFTAG_BITSPERSAMPLE , & bitspersample ) ;
EXPR	169:1	169:8	4	( void ) TIFFGetField ( tif1 , TIFFTAG_BITSPERSAMPLE , & bitspersample )
LEAF_NODE	169:1	169:1	5	(
TYPE_NAME	169:2	169:2	5	void
LEAF_NODE	169:2	169:2	6	void
LEAF_NODE	169:6	169:6	5	)
FUNCTION_CALL	169:8	169:64	5	TIFFGetField ( tif1 , TIFFTAG_BITSPERSAMPLE , & bitspersample )
CALLEE	169:8	169:8	6	TIFFGetField
LEAF_NODE	169:8	169:8	7	TIFFGetField
LEAF_NODE	169:20	169:20	6	(
ARGUMENT	169:21	169:21	6	tif1
FIELD	169:21	169:21	7	tif1
LEAF_NODE	169:21	169:21	8	tif1
LEAF_NODE	169:25	169:25	6	,
ARGUMENT	169:27	169:27	6	TIFFTAG_BITSPERSAMPLE
FIELD	169:27	169:27	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	169:27	169:27	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	169:48	169:48	6	,
ARGUMENT	169:50	169:50	6	& bitspersample
UNARY_EXPR	169:50	169:51	7	& bitspersample
UNARY_OPERATOR	169:50	169:50	8	&
LEAF_NODE	169:50	169:50	9	&
FIELD	169:51	169:51	8	bitspersample
LEAF_NODE	169:51	169:51	9	bitspersample
LEAF_NODE	169:64	169:64	6	)
LEAF_NODE	169:65	169:65	4	;
EXPR_STATEMENT	170:1	170:69	3	( void ) TIFFGetField ( tif1 , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel ) ;
EXPR	170:1	170:8	4	( void ) TIFFGetField ( tif1 , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
LEAF_NODE	170:1	170:1	5	(
TYPE_NAME	170:2	170:2	5	void
LEAF_NODE	170:2	170:2	6	void
LEAF_NODE	170:6	170:6	5	)
FUNCTION_CALL	170:8	170:68	5	TIFFGetField ( tif1 , TIFFTAG_SAMPLESPERPIXEL , & samplesperpixel )
CALLEE	170:8	170:8	6	TIFFGetField
LEAF_NODE	170:8	170:8	7	TIFFGetField
LEAF_NODE	170:20	170:20	6	(
ARGUMENT	170:21	170:21	6	tif1
FIELD	170:21	170:21	7	tif1
LEAF_NODE	170:21	170:21	8	tif1
LEAF_NODE	170:25	170:25	6	,
ARGUMENT	170:27	170:27	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	170:27	170:27	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	170:27	170:27	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	170:50	170:50	6	,
ARGUMENT	170:52	170:52	6	& samplesperpixel
UNARY_EXPR	170:52	170:53	7	& samplesperpixel
UNARY_OPERATOR	170:52	170:52	8	&
LEAF_NODE	170:52	170:52	9	&
FIELD	170:53	170:53	8	samplesperpixel
LEAF_NODE	170:53	170:53	9	samplesperpixel
LEAF_NODE	170:68	170:68	6	)
LEAF_NODE	170:69	170:69	4	;
EXPR_STATEMENT	171:1	171:63	3	( void ) TIFFGetField ( tif1 , TIFFTAG_SAMPLEFORMAT , & sampleformat ) ;
EXPR	171:1	171:8	4	( void ) TIFFGetField ( tif1 , TIFFTAG_SAMPLEFORMAT , & sampleformat )
LEAF_NODE	171:1	171:1	5	(
TYPE_NAME	171:2	171:2	5	void
LEAF_NODE	171:2	171:2	6	void
LEAF_NODE	171:6	171:6	5	)
FUNCTION_CALL	171:8	171:62	5	TIFFGetField ( tif1 , TIFFTAG_SAMPLEFORMAT , & sampleformat )
CALLEE	171:8	171:8	6	TIFFGetField
LEAF_NODE	171:8	171:8	7	TIFFGetField
LEAF_NODE	171:20	171:20	6	(
ARGUMENT	171:21	171:21	6	tif1
FIELD	171:21	171:21	7	tif1
LEAF_NODE	171:21	171:21	8	tif1
LEAF_NODE	171:25	171:25	6	,
ARGUMENT	171:27	171:27	6	TIFFTAG_SAMPLEFORMAT
FIELD	171:27	171:27	7	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	171:27	171:27	8	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	171:47	171:47	6	,
ARGUMENT	171:49	171:49	6	& sampleformat
UNARY_EXPR	171:49	171:50	7	& sampleformat
UNARY_OPERATOR	171:49	171:49	8	&
LEAF_NODE	171:49	171:49	9	&
FIELD	171:50	171:50	8	sampleformat
LEAF_NODE	171:50	171:50	9	sampleformat
LEAF_NODE	171:62	171:62	6	)
LEAF_NODE	171:63	171:63	4	;
EXPR_STATEMENT	172:1	172:59	3	( void ) TIFFGetField ( tif1 , TIFFTAG_IMAGEWIDTH , & imagewidth ) ;
EXPR	172:1	172:8	4	( void ) TIFFGetField ( tif1 , TIFFTAG_IMAGEWIDTH , & imagewidth )
LEAF_NODE	172:1	172:1	5	(
TYPE_NAME	172:2	172:2	5	void
LEAF_NODE	172:2	172:2	6	void
LEAF_NODE	172:6	172:6	5	)
FUNCTION_CALL	172:8	172:58	5	TIFFGetField ( tif1 , TIFFTAG_IMAGEWIDTH , & imagewidth )
CALLEE	172:8	172:8	6	TIFFGetField
LEAF_NODE	172:8	172:8	7	TIFFGetField
LEAF_NODE	172:20	172:20	6	(
ARGUMENT	172:21	172:21	6	tif1
FIELD	172:21	172:21	7	tif1
LEAF_NODE	172:21	172:21	8	tif1
LEAF_NODE	172:25	172:25	6	,
ARGUMENT	172:27	172:27	6	TIFFTAG_IMAGEWIDTH
FIELD	172:27	172:27	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	172:27	172:27	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	172:45	172:45	6	,
ARGUMENT	172:47	172:47	6	& imagewidth
UNARY_EXPR	172:47	172:48	7	& imagewidth
UNARY_OPERATOR	172:47	172:47	8	&
LEAF_NODE	172:47	172:47	9	&
FIELD	172:48	172:48	8	imagewidth
LEAF_NODE	172:48	172:48	9	imagewidth
LEAF_NODE	172:58	172:58	6	)
LEAF_NODE	172:59	172:59	4	;
EXPR_STATEMENT	173:1	173:61	3	( void ) TIFFGetField ( tif1 , TIFFTAG_IMAGELENGTH , & imagelength ) ;
EXPR	173:1	173:8	4	( void ) TIFFGetField ( tif1 , TIFFTAG_IMAGELENGTH , & imagelength )
LEAF_NODE	173:1	173:1	5	(
TYPE_NAME	173:2	173:2	5	void
LEAF_NODE	173:2	173:2	6	void
LEAF_NODE	173:6	173:6	5	)
FUNCTION_CALL	173:8	173:60	5	TIFFGetField ( tif1 , TIFFTAG_IMAGELENGTH , & imagelength )
CALLEE	173:8	173:8	6	TIFFGetField
LEAF_NODE	173:8	173:8	7	TIFFGetField
LEAF_NODE	173:20	173:20	6	(
ARGUMENT	173:21	173:21	6	tif1
FIELD	173:21	173:21	7	tif1
LEAF_NODE	173:21	173:21	8	tif1
LEAF_NODE	173:25	173:25	6	,
ARGUMENT	173:27	173:27	6	TIFFTAG_IMAGELENGTH
FIELD	173:27	173:27	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	173:27	173:27	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	173:46	173:46	6	,
ARGUMENT	173:48	173:48	6	& imagelength
UNARY_EXPR	173:48	173:49	7	& imagelength
UNARY_OPERATOR	173:48	173:48	8	&
LEAF_NODE	173:48	173:48	9	&
FIELD	173:49	173:49	8	imagelength
LEAF_NODE	173:49	173:49	9	imagelength
LEAF_NODE	173:60	173:60	6	)
LEAF_NODE	173:61	173:61	4	;
EXPR_STATEMENT	174:1	174:58	3	( void ) TIFFGetField ( tif1 , TIFFTAG_PLANARCONFIG , & config1 ) ;
EXPR	174:1	174:8	4	( void ) TIFFGetField ( tif1 , TIFFTAG_PLANARCONFIG , & config1 )
LEAF_NODE	174:1	174:1	5	(
TYPE_NAME	174:2	174:2	5	void
LEAF_NODE	174:2	174:2	6	void
LEAF_NODE	174:6	174:6	5	)
FUNCTION_CALL	174:8	174:57	5	TIFFGetField ( tif1 , TIFFTAG_PLANARCONFIG , & config1 )
CALLEE	174:8	174:8	6	TIFFGetField
LEAF_NODE	174:8	174:8	7	TIFFGetField
LEAF_NODE	174:20	174:20	6	(
ARGUMENT	174:21	174:21	6	tif1
FIELD	174:21	174:21	7	tif1
LEAF_NODE	174:21	174:21	8	tif1
LEAF_NODE	174:25	174:25	6	,
ARGUMENT	174:27	174:27	6	TIFFTAG_PLANARCONFIG
FIELD	174:27	174:27	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	174:27	174:27	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	174:47	174:47	6	,
ARGUMENT	174:49	174:49	6	& config1
UNARY_EXPR	174:49	174:50	7	& config1
UNARY_OPERATOR	174:49	174:49	8	&
LEAF_NODE	174:49	174:49	9	&
FIELD	174:50	174:50	8	config1
LEAF_NODE	174:50	174:50	9	config1
LEAF_NODE	174:57	174:57	6	)
LEAF_NODE	174:58	174:58	4	;
EXPR_STATEMENT	175:1	175:58	3	( void ) TIFFGetField ( tif2 , TIFFTAG_PLANARCONFIG , & config2 ) ;
EXPR	175:1	175:8	4	( void ) TIFFGetField ( tif2 , TIFFTAG_PLANARCONFIG , & config2 )
LEAF_NODE	175:1	175:1	5	(
TYPE_NAME	175:2	175:2	5	void
LEAF_NODE	175:2	175:2	6	void
LEAF_NODE	175:6	175:6	5	)
FUNCTION_CALL	175:8	175:57	5	TIFFGetField ( tif2 , TIFFTAG_PLANARCONFIG , & config2 )
CALLEE	175:8	175:8	6	TIFFGetField
LEAF_NODE	175:8	175:8	7	TIFFGetField
LEAF_NODE	175:20	175:20	6	(
ARGUMENT	175:21	175:21	6	tif2
FIELD	175:21	175:21	7	tif2
LEAF_NODE	175:21	175:21	8	tif2
LEAF_NODE	175:25	175:25	6	,
ARGUMENT	175:27	175:27	6	TIFFTAG_PLANARCONFIG
FIELD	175:27	175:27	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	175:27	175:27	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	175:47	175:47	6	,
ARGUMENT	175:49	175:49	6	& config2
UNARY_EXPR	175:49	175:50	7	& config2
UNARY_OPERATOR	175:49	175:49	8	&
LEAF_NODE	175:49	175:49	9	&
FIELD	175:50	175:50	8	config2
LEAF_NODE	175:50	175:50	9	config2
LEAF_NODE	175:57	175:57	6	)
LEAF_NODE	175:58	175:58	4	;
EXPR_STATEMENT	176:1	176:68	3	buf1 = ( unsigned char * ) _TIFFmalloc ( size1 = TIFFScanlineSize ( tif1 ) ) ;
EXPR	176:1	176:1	4	buf1 = ( unsigned char * ) _TIFFmalloc ( size1 = TIFFScanlineSize ( tif1 ) )
ASSIGN	176:1	176:8	5	buf1 = ( unsigned char * ) _TIFFmalloc ( size1 = TIFFScanlineSize ( tif1 ) )
LVAL	176:1	176:1	6	buf1
FIELD	176:1	176:1	7	buf1
LEAF_NODE	176:1	176:1	8	buf1
ASSIGN_OP	176:6	176:6	6	=
LEAF_NODE	176:6	176:6	7	=
RVAL	176:8	176:25	6	( unsigned char * ) _TIFFmalloc ( size1 = TIFFScanlineSize ( tif1 ) )
LEAF_NODE	176:8	176:8	7	(
TYPE_NAME	176:9	176:18	7	unsigned char
LEAF_NODE	176:9	176:9	8	unsigned
LEAF_NODE	176:18	176:18	8	char
LEAF_NODE	176:23	176:23	7	*
LEAF_NODE	176:24	176:24	7	)
FUNCTION_CALL	176:25	176:67	7	_TIFFmalloc ( size1 = TIFFScanlineSize ( tif1 ) )
CALLEE	176:25	176:25	8	_TIFFmalloc
LEAF_NODE	176:25	176:25	9	_TIFFmalloc
LEAF_NODE	176:36	176:36	8	(
ARGUMENT	176:37	176:37	8	size1 = TIFFScanlineSize ( tif1 )
ASSIGN	176:37	176:45	9	size1 = TIFFScanlineSize ( tif1 )
LVAL	176:37	176:37	10	size1
FIELD	176:37	176:37	11	size1
LEAF_NODE	176:37	176:37	12	size1
ASSIGN_OP	176:43	176:43	10	=
LEAF_NODE	176:43	176:43	11	=
RVAL	176:45	176:45	10	TIFFScanlineSize ( tif1 )
FUNCTION_CALL	176:45	176:66	11	TIFFScanlineSize ( tif1 )
CALLEE	176:45	176:45	12	TIFFScanlineSize
LEAF_NODE	176:45	176:45	13	TIFFScanlineSize
LEAF_NODE	176:61	176:61	12	(
ARGUMENT	176:62	176:62	12	tif1
FIELD	176:62	176:62	13	tif1
LEAF_NODE	176:62	176:62	14	tif1
LEAF_NODE	176:66	176:66	12	)
LEAF_NODE	176:67	176:67	8	)
LEAF_NODE	176:68	176:68	4	;
EXPR_STATEMENT	177:1	177:60	3	buf2 = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( tif2 ) ) ;
EXPR	177:1	177:1	4	buf2 = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( tif2 ) )
ASSIGN	177:1	177:8	5	buf2 = ( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( tif2 ) )
LVAL	177:1	177:1	6	buf2
FIELD	177:1	177:1	7	buf2
LEAF_NODE	177:1	177:1	8	buf2
ASSIGN_OP	177:6	177:6	6	=
LEAF_NODE	177:6	177:6	7	=
RVAL	177:8	177:25	6	( unsigned char * ) _TIFFmalloc ( TIFFScanlineSize ( tif2 ) )
LEAF_NODE	177:8	177:8	7	(
TYPE_NAME	177:9	177:18	7	unsigned char
LEAF_NODE	177:9	177:9	8	unsigned
LEAF_NODE	177:18	177:18	8	char
LEAF_NODE	177:23	177:23	7	*
LEAF_NODE	177:24	177:24	7	)
FUNCTION_CALL	177:25	177:59	7	_TIFFmalloc ( TIFFScanlineSize ( tif2 ) )
CALLEE	177:25	177:25	8	_TIFFmalloc
LEAF_NODE	177:25	177:25	9	_TIFFmalloc
LEAF_NODE	177:36	177:36	8	(
ARGUMENT	177:37	177:37	8	TIFFScanlineSize ( tif2 )
FUNCTION_CALL	177:37	177:58	9	TIFFScanlineSize ( tif2 )
CALLEE	177:37	177:37	10	TIFFScanlineSize
LEAF_NODE	177:37	177:37	11	TIFFScanlineSize
LEAF_NODE	177:53	177:53	10	(
ARGUMENT	177:54	177:54	10	tif2
FIELD	177:54	177:54	11	tif2
LEAF_NODE	177:54	177:54	12	tif2
LEAF_NODE	177:58	177:58	10	)
LEAF_NODE	177:59	177:59	8	)
LEAF_NODE	177:60	177:60	4	;
SELECTION	178:1	178:35	3	
KEYWORD	178:1	178:1	4	if
LEAF_NODE	178:1	178:1	5	if
LEAF_NODE	178:4	178:4	4	(
CONDITION	178:5	178:5	4	buf1 == NULL || buf2 == NULL
EXPR	178:5	178:5	5	buf1 == NULL || buf2 == NULL
OR	178:5	178:21	6	buf1 == NULL || buf2 == NULL
EXPR	178:5	178:13	7	buf1 == NULL
FIELD	178:5	178:5	8	buf1
LEAF_NODE	178:5	178:5	9	buf1
EQ_OPERATOR	178:10	178:10	8	==
LEAF_NODE	178:10	178:10	9	==
FIELD	178:13	178:13	8	NULL
LEAF_NODE	178:13	178:13	9	NULL
LEAF_NODE	178:18	178:18	7	||
EXPR	178:21	178:29	7	buf2 == NULL
FIELD	178:21	178:21	8	buf2
LEAF_NODE	178:21	178:21	9	buf2
EQ_OPERATOR	178:26	178:26	8	==
LEAF_NODE	178:26	178:26	9	==
FIELD	178:29	178:29	8	NULL
LEAF_NODE	178:29	178:29	9	NULL
LEAF_NODE	178:33	178:33	4	)
STATEMENTS	178:35	181:1	4	
LEAF_NODE	178:35	178:35	5	{
STATEMENTS	179:2	180:2	5	
EXPR_STATEMENT	179:2	179:52	6	fprintf ( stderr , "No space for scanline buffers\n" ) ;
EXPR	179:2	179:2	7	fprintf ( stderr , "No space for scanline buffers\n" )
FUNCTION_CALL	179:2	179:51	8	fprintf ( stderr , "No space for scanline buffers\n" )
CALLEE	179:2	179:2	9	fprintf
LEAF_NODE	179:2	179:2	10	fprintf
LEAF_NODE	179:9	179:9	9	(
ARGUMENT	179:10	179:10	9	stderr
FIELD	179:10	179:10	10	stderr
LEAF_NODE	179:10	179:10	11	stderr
LEAF_NODE	179:16	179:16	9	,
ARGUMENT	179:18	179:18	9	"No space for scanline buffers\n"
FIELD	179:18	179:18	10	"No space for scanline buffers\n"
LEAF_NODE	179:18	179:18	11	"No space for scanline buffers\n"
LEAF_NODE	179:51	179:51	9	)
LEAF_NODE	179:52	179:52	7	;
EXPR_STATEMENT	180:2	180:10	6	exit ( - 1 ) ;
EXPR	180:2	180:2	7	exit ( - 1 )
FUNCTION_CALL	180:2	180:9	8	exit ( - 1 )
CALLEE	180:2	180:2	9	exit
LEAF_NODE	180:2	180:2	10	exit
LEAF_NODE	180:6	180:6	9	(
ARGUMENT	180:7	180:7	9	- 1
UNARY_EXPR	180:7	180:8	10	- 1
UNARY_OPERATOR	180:7	180:7	11	-
LEAF_NODE	180:7	180:7	12	-
FIELD	180:8	180:8	11	1
LEAF_NODE	180:8	180:8	12	1
LEAF_NODE	180:9	180:9	9	)
LEAF_NODE	180:10	180:10	7	;
LEAF_NODE	181:1	181:1	5	}
SELECTION	182:1	182:70	3	
KEYWORD	182:1	182:1	4	if
LEAF_NODE	182:1	182:1	5	if
LEAF_NODE	182:4	182:4	4	(
CONDITION	182:5	182:5	4	config1 != config2 && bitspersample != 8 && samplesperpixel > 1
EXPR	182:5	182:5	5	config1 != config2 && bitspersample != 8 && samplesperpixel > 1
AND	182:5	182:27	6	config1 != config2 && bitspersample != 8 && samplesperpixel > 1
EXPR	182:5	182:16	7	config1 != config2
FIELD	182:5	182:5	8	config1
LEAF_NODE	182:5	182:5	9	config1
EQ_OPERATOR	182:13	182:13	8	!=
LEAF_NODE	182:13	182:13	9	!=
FIELD	182:16	182:16	8	config2
LEAF_NODE	182:16	182:16	9	config2
LEAF_NODE	182:24	182:24	7	&&
EXPR	182:27	182:27	7	bitspersample != 8 && samplesperpixel > 1
AND	182:27	182:49	8	bitspersample != 8 && samplesperpixel > 1
EXPR	182:27	182:44	9	bitspersample != 8
FIELD	182:27	182:27	10	bitspersample
LEAF_NODE	182:27	182:27	11	bitspersample
EQ_OPERATOR	182:41	182:41	10	!=
LEAF_NODE	182:41	182:41	11	!=
FIELD	182:44	182:44	10	8
LEAF_NODE	182:44	182:44	11	8
LEAF_NODE	182:46	182:46	9	&&
EXPR	182:49	182:67	9	samplesperpixel > 1
FIELD	182:49	182:49	10	samplesperpixel
LEAF_NODE	182:49	182:49	11	samplesperpixel
REL_OPERATOR	182:65	182:65	10	>
LEAF_NODE	182:65	182:65	11	>
FIELD	182:67	182:67	10	1
LEAF_NODE	182:67	182:67	11	1
LEAF_NODE	182:68	182:68	4	)
STATEMENTS	182:70	186:1	4	
LEAF_NODE	182:70	182:70	5	{
STATEMENTS	183:2	185:2	5	
EXPR_STATEMENT	183:2	184:73	6	fprintf ( stderr , "Can't handle different planar configuration w/ different bits/sample\n" ) ;
EXPR	183:2	183:2	7	fprintf ( stderr , "Can't handle different planar configuration w/ different bits/sample\n" )
FUNCTION_CALL	183:2	184:72	8	fprintf ( stderr , "Can't handle different planar configuration w/ different bits/sample\n" )
CALLEE	183:2	183:2	9	fprintf
LEAF_NODE	183:2	183:2	10	fprintf
LEAF_NODE	183:9	183:9	9	(
ARGUMENT	183:10	183:10	9	stderr
FIELD	183:10	183:10	10	stderr
LEAF_NODE	183:10	183:10	11	stderr
LEAF_NODE	183:16	183:16	9	,
ARGUMENT	184:0	184:0	9	"Can't handle different planar configuration w/ different bits/sample\n"
FIELD	184:0	184:0	10	"Can't handle different planar configuration w/ different bits/sample\n"
LEAF_NODE	184:0	184:0	11	"Can't handle different planar configuration w/ different bits/sample\n"
LEAF_NODE	184:72	184:72	9	)
LEAF_NODE	184:73	184:73	7	;
JUMP_STATEMENT	185:2	185:10	6	goto bad ;
KEYWORD	185:2	185:2	7	goto
LEAF_NODE	185:2	185:2	8	goto
DESTINATION	185:7	185:7	7	bad
LEAF_NODE	185:7	185:7	8	bad
LEAF_NODE	185:10	185:10	7	;
LEAF_NODE	186:1	186:1	5	}
SELECTION	188:1	188:33	3	
KEYWORD	188:1	188:1	4	switch
LEAF_NODE	188:1	188:1	5	switch
LEAF_NODE	188:8	188:8	4	(
CONDITION	188:9	188:9	4	pack ( config1 , config2 )
EXPR	188:9	188:9	5	pack ( config1 , config2 )
FUNCTION_CALL	188:9	188:30	6	pack ( config1 , config2 )
CALLEE	188:9	188:9	7	pack
LEAF_NODE	188:9	188:9	8	pack
LEAF_NODE	188:13	188:13	7	(
ARGUMENT	188:14	188:14	7	config1
FIELD	188:14	188:14	8	config1
LEAF_NODE	188:14	188:14	9	config1
LEAF_NODE	188:21	188:21	7	,
ARGUMENT	188:23	188:23	7	config2
FIELD	188:23	188:23	8	config2
LEAF_NODE	188:23	188:23	9	config2
LEAF_NODE	188:30	188:30	7	)
LEAF_NODE	188:31	188:31	4	)
STATEMENTS	188:33	234:1	4	
LEAF_NODE	188:33	188:33	5	{
STATEMENTS	189:1	233:2	5	
LEAF_NODE	189:1	189:1	6	case
LEAF_NODE	189:6	189:6	6	pack
LEAF_NODE	189:10	189:10	6	(
LEAF_NODE	189:11	189:11	6	PLANARCONFIG_SEPARATE
LEAF_NODE	189:32	189:32	6	,
LEAF_NODE	189:34	189:34	6	PLANARCONFIG_CONTIG
LEAF_NODE	189:53	189:53	6	)
LEAF_NODE	189:54	189:54	6	:
ITERATION	190:2	190:42	6	
KEYWORD	190:2	190:2	7	for
LEAF_NODE	190:2	190:2	8	for
LEAF_NODE	190:6	190:6	7	(
FOR_INIT	190:7	190:14	7	row = 0 ;
EXPR	190:7	190:7	8	row = 0
ASSIGN	190:7	190:13	9	row = 0
LVAL	190:7	190:7	10	row
FIELD	190:7	190:7	11	row
LEAF_NODE	190:7	190:7	12	row
ASSIGN_OP	190:11	190:11	10	=
LEAF_NODE	190:11	190:11	11	=
RVAL	190:13	190:13	10	0
FIELD	190:13	190:13	11	0
LEAF_NODE	190:13	190:13	12	0
LEAF_NODE	190:14	190:14	8	;
CONDITION	190:16	190:16	7	row < imagelength
EXPR	190:16	190:22	8	row < imagelength
FIELD	190:16	190:16	9	row
LEAF_NODE	190:16	190:16	10	row
REL_OPERATOR	190:20	190:20	9	<
LEAF_NODE	190:20	190:20	10	<
FIELD	190:22	190:22	9	imagelength
LEAF_NODE	190:22	190:22	10	imagelength
LEAF_NODE	190:33	190:33	7	;
FOR_EXPR	190:35	190:35	7	row ++
EXPR	190:35	190:35	8	row ++
FIELD	190:35	190:38	9	row ++
LEAF_NODE	190:35	190:35	10	row
LEAF_NODE	190:38	190:38	10	++
LEAF_NODE	190:40	190:40	7	)
STATEMENTS	190:42	199:2	7	
LEAF_NODE	190:42	190:42	8	{
STATEMENTS	191:3	193:3	8	
SELECTION	191:3	192:4	9	
KEYWORD	191:3	191:3	10	if
LEAF_NODE	191:3	191:3	11	if
LEAF_NODE	191:6	191:6	10	(
CONDITION	191:7	191:7	10	TIFFReadScanline ( tif2 , buf2 , row , 0 ) < 0
EXPR	191:7	191:46	11	TIFFReadScanline ( tif2 , buf2 , row , 0 ) < 0
FUNCTION_CALL	191:7	191:42	12	TIFFReadScanline ( tif2 , buf2 , row , 0 )
CALLEE	191:7	191:7	13	TIFFReadScanline
LEAF_NODE	191:7	191:7	14	TIFFReadScanline
LEAF_NODE	191:23	191:23	13	(
ARGUMENT	191:24	191:24	13	tif2
FIELD	191:24	191:24	14	tif2
LEAF_NODE	191:24	191:24	15	tif2
LEAF_NODE	191:28	191:28	13	,
ARGUMENT	191:30	191:30	13	buf2
FIELD	191:30	191:30	14	buf2
LEAF_NODE	191:30	191:30	15	buf2
LEAF_NODE	191:34	191:34	13	,
ARGUMENT	191:36	191:36	13	row
FIELD	191:36	191:36	14	row
LEAF_NODE	191:36	191:36	15	row
LEAF_NODE	191:39	191:39	13	,
ARGUMENT	191:41	191:41	13	0
FIELD	191:41	191:41	14	0
LEAF_NODE	191:41	191:41	15	0
LEAF_NODE	191:42	191:42	13	)
REL_OPERATOR	191:44	191:44	12	<
LEAF_NODE	191:44	191:44	13	<
FIELD	191:46	191:46	12	0
LEAF_NODE	191:46	191:46	13	0
LEAF_NODE	191:47	191:47	10	)
STATEMENTS	192:4	192:4	10	
LEAF_NODE	192:4	192:4	11	checkEOF
LEAF_NODE	192:12	192:12	9	(
LEAF_NODE	192:13	192:13	9	tif2
LEAF_NODE	192:17	192:17	9	,
LEAF_NODE	192:19	192:19	9	row
LEAF_NODE	192:22	192:22	9	,
LEAF_NODE	192:24	192:24	9	-
LEAF_NODE	192:25	192:25	9	1
LEAF_NODE	192:26	192:26	9	)
ITERATION	193:3	193:41	9	
KEYWORD	193:3	193:3	10	for
LEAF_NODE	193:3	193:3	11	for
LEAF_NODE	193:7	193:7	10	(
FOR_INIT	193:8	193:13	10	s = 0 ;
EXPR	193:8	193:8	11	s = 0
ASSIGN	193:8	193:12	12	s = 0
LVAL	193:8	193:8	13	s
FIELD	193:8	193:8	14	s
LEAF_NODE	193:8	193:8	15	s
ASSIGN_OP	193:10	193:10	13	=
LEAF_NODE	193:10	193:10	14	=
RVAL	193:12	193:12	13	0
FIELD	193:12	193:12	14	0
LEAF_NODE	193:12	193:12	15	0
LEAF_NODE	193:13	193:13	11	;
CONDITION	193:15	193:15	10	s < samplesperpixel
EXPR	193:15	193:19	11	s < samplesperpixel
FIELD	193:15	193:15	12	s
LEAF_NODE	193:15	193:15	13	s
REL_OPERATOR	193:17	193:17	12	<
LEAF_NODE	193:17	193:17	13	<
FIELD	193:19	193:19	12	samplesperpixel
LEAF_NODE	193:19	193:19	13	samplesperpixel
LEAF_NODE	193:34	193:34	10	;
FOR_EXPR	193:36	193:36	10	s ++
EXPR	193:36	193:36	11	s ++
FIELD	193:36	193:37	12	s ++
LEAF_NODE	193:36	193:36	13	s
LEAF_NODE	193:37	193:37	13	++
LEAF_NODE	193:39	193:39	10	)
STATEMENTS	193:41	198:3	10	
LEAF_NODE	193:41	193:41	11	{
STATEMENTS	194:4	196:4	11	
SELECTION	194:4	195:5	12	
KEYWORD	194:4	194:4	13	if
LEAF_NODE	194:4	194:4	14	if
LEAF_NODE	194:7	194:7	13	(
CONDITION	194:8	194:8	13	TIFFReadScanline ( tif1 , buf1 , row , s ) < 0
EXPR	194:8	194:47	14	TIFFReadScanline ( tif1 , buf1 , row , s ) < 0
FUNCTION_CALL	194:8	194:43	15	TIFFReadScanline ( tif1 , buf1 , row , s )
CALLEE	194:8	194:8	16	TIFFReadScanline
LEAF_NODE	194:8	194:8	17	TIFFReadScanline
LEAF_NODE	194:24	194:24	16	(
ARGUMENT	194:25	194:25	16	tif1
FIELD	194:25	194:25	17	tif1
LEAF_NODE	194:25	194:25	18	tif1
LEAF_NODE	194:29	194:29	16	,
ARGUMENT	194:31	194:31	16	buf1
FIELD	194:31	194:31	17	buf1
LEAF_NODE	194:31	194:31	18	buf1
LEAF_NODE	194:35	194:35	16	,
ARGUMENT	194:37	194:37	16	row
FIELD	194:37	194:37	17	row
LEAF_NODE	194:37	194:37	18	row
LEAF_NODE	194:40	194:40	16	,
ARGUMENT	194:42	194:42	16	s
FIELD	194:42	194:42	17	s
LEAF_NODE	194:42	194:42	18	s
LEAF_NODE	194:43	194:43	16	)
REL_OPERATOR	194:45	194:45	15	<
LEAF_NODE	194:45	194:45	16	<
FIELD	194:47	194:47	15	0
LEAF_NODE	194:47	194:47	16	0
LEAF_NODE	194:48	194:48	13	)
STATEMENTS	195:5	195:5	13	
LEAF_NODE	195:5	195:5	14	checkEOF
LEAF_NODE	195:13	195:13	12	(
LEAF_NODE	195:14	195:14	12	tif1
LEAF_NODE	195:18	195:18	12	,
LEAF_NODE	195:20	195:20	12	row
LEAF_NODE	195:23	195:23	12	,
LEAF_NODE	195:25	195:25	12	s
LEAF_NODE	195:26	195:26	12	)
SELECTION	196:4	197:5	12	
KEYWORD	196:4	196:4	13	if
LEAF_NODE	196:4	196:4	14	if
LEAF_NODE	196:7	196:7	13	(
CONDITION	196:8	196:8	13	SeparateCompare ( 1 , s , row , buf2 , buf1 ) < 0
EXPR	196:8	196:49	14	SeparateCompare ( 1 , s , row , buf2 , buf1 ) < 0
FUNCTION_CALL	196:8	196:45	15	SeparateCompare ( 1 , s , row , buf2 , buf1 )
CALLEE	196:8	196:8	16	SeparateCompare
LEAF_NODE	196:8	196:8	17	SeparateCompare
LEAF_NODE	196:23	196:23	16	(
ARGUMENT	196:24	196:24	16	1
FIELD	196:24	196:24	17	1
LEAF_NODE	196:24	196:24	18	1
LEAF_NODE	196:25	196:25	16	,
ARGUMENT	196:27	196:27	16	s
FIELD	196:27	196:27	17	s
LEAF_NODE	196:27	196:27	18	s
LEAF_NODE	196:28	196:28	16	,
ARGUMENT	196:30	196:30	16	row
FIELD	196:30	196:30	17	row
LEAF_NODE	196:30	196:30	18	row
LEAF_NODE	196:33	196:33	16	,
ARGUMENT	196:35	196:35	16	buf2
FIELD	196:35	196:35	17	buf2
LEAF_NODE	196:35	196:35	18	buf2
LEAF_NODE	196:39	196:39	16	,
ARGUMENT	196:41	196:41	16	buf1
FIELD	196:41	196:41	17	buf1
LEAF_NODE	196:41	196:41	18	buf1
LEAF_NODE	196:45	196:45	16	)
REL_OPERATOR	196:47	196:47	15	<
LEAF_NODE	196:47	196:47	16	<
FIELD	196:49	196:49	15	0
LEAF_NODE	196:49	196:49	16	0
LEAF_NODE	196:50	196:50	13	)
STATEMENTS	197:5	197:5	13	
JUMP_STATEMENT	197:5	197:14	14	goto bad1 ;
KEYWORD	197:5	197:5	15	goto
LEAF_NODE	197:5	197:5	16	goto
DESTINATION	197:10	197:10	15	bad1
LEAF_NODE	197:10	197:10	16	bad1
LEAF_NODE	197:14	197:14	15	;
LEAF_NODE	198:3	198:3	11	}
LEAF_NODE	199:2	199:2	8	}
JUMP_STATEMENT	200:2	200:7	6	break DESTINATION ;
KEYWORD	200:2	200:2	7	break
LEAF_NODE	200:2	200:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	200:7	200:7	7	;
LEAF_NODE	201:1	201:1	6	case
LEAF_NODE	201:6	201:6	6	pack
LEAF_NODE	201:10	201:10	6	(
LEAF_NODE	201:11	201:11	6	PLANARCONFIG_CONTIG
LEAF_NODE	201:30	201:30	6	,
LEAF_NODE	201:32	201:32	6	PLANARCONFIG_SEPARATE
LEAF_NODE	201:53	201:53	6	)
LEAF_NODE	201:54	201:54	6	:
ITERATION	202:2	202:42	6	
KEYWORD	202:2	202:2	7	for
LEAF_NODE	202:2	202:2	8	for
LEAF_NODE	202:6	202:6	7	(
FOR_INIT	202:7	202:14	7	row = 0 ;
EXPR	202:7	202:7	8	row = 0
ASSIGN	202:7	202:13	9	row = 0
LVAL	202:7	202:7	10	row
FIELD	202:7	202:7	11	row
LEAF_NODE	202:7	202:7	12	row
ASSIGN_OP	202:11	202:11	10	=
LEAF_NODE	202:11	202:11	11	=
RVAL	202:13	202:13	10	0
FIELD	202:13	202:13	11	0
LEAF_NODE	202:13	202:13	12	0
LEAF_NODE	202:14	202:14	8	;
CONDITION	202:16	202:16	7	row < imagelength
EXPR	202:16	202:22	8	row < imagelength
FIELD	202:16	202:16	9	row
LEAF_NODE	202:16	202:16	10	row
REL_OPERATOR	202:20	202:20	9	<
LEAF_NODE	202:20	202:20	10	<
FIELD	202:22	202:22	9	imagelength
LEAF_NODE	202:22	202:22	10	imagelength
LEAF_NODE	202:33	202:33	7	;
FOR_EXPR	202:35	202:35	7	row ++
EXPR	202:35	202:35	8	row ++
FIELD	202:35	202:38	9	row ++
LEAF_NODE	202:35	202:35	10	row
LEAF_NODE	202:38	202:38	10	++
LEAF_NODE	202:40	202:40	7	)
STATEMENTS	202:42	211:2	7	
LEAF_NODE	202:42	202:42	8	{
STATEMENTS	203:3	205:3	8	
SELECTION	203:3	204:4	9	
KEYWORD	203:3	203:3	10	if
LEAF_NODE	203:3	203:3	11	if
LEAF_NODE	203:6	203:6	10	(
CONDITION	203:7	203:7	10	TIFFReadScanline ( tif1 , buf1 , row , 0 ) < 0
EXPR	203:7	203:46	11	TIFFReadScanline ( tif1 , buf1 , row , 0 ) < 0
FUNCTION_CALL	203:7	203:42	12	TIFFReadScanline ( tif1 , buf1 , row , 0 )
CALLEE	203:7	203:7	13	TIFFReadScanline
LEAF_NODE	203:7	203:7	14	TIFFReadScanline
LEAF_NODE	203:23	203:23	13	(
ARGUMENT	203:24	203:24	13	tif1
FIELD	203:24	203:24	14	tif1
LEAF_NODE	203:24	203:24	15	tif1
LEAF_NODE	203:28	203:28	13	,
ARGUMENT	203:30	203:30	13	buf1
FIELD	203:30	203:30	14	buf1
LEAF_NODE	203:30	203:30	15	buf1
LEAF_NODE	203:34	203:34	13	,
ARGUMENT	203:36	203:36	13	row
FIELD	203:36	203:36	14	row
LEAF_NODE	203:36	203:36	15	row
LEAF_NODE	203:39	203:39	13	,
ARGUMENT	203:41	203:41	13	0
FIELD	203:41	203:41	14	0
LEAF_NODE	203:41	203:41	15	0
LEAF_NODE	203:42	203:42	13	)
REL_OPERATOR	203:44	203:44	12	<
LEAF_NODE	203:44	203:44	13	<
FIELD	203:46	203:46	12	0
LEAF_NODE	203:46	203:46	13	0
LEAF_NODE	203:47	203:47	10	)
STATEMENTS	204:4	204:4	10	
LEAF_NODE	204:4	204:4	11	checkEOF
LEAF_NODE	204:12	204:12	9	(
LEAF_NODE	204:13	204:13	9	tif1
LEAF_NODE	204:17	204:17	9	,
LEAF_NODE	204:19	204:19	9	row
LEAF_NODE	204:22	204:22	9	,
LEAF_NODE	204:24	204:24	9	-
LEAF_NODE	204:25	204:25	9	1
LEAF_NODE	204:26	204:26	9	)
ITERATION	205:3	205:41	9	
KEYWORD	205:3	205:3	10	for
LEAF_NODE	205:3	205:3	11	for
LEAF_NODE	205:7	205:7	10	(
FOR_INIT	205:8	205:13	10	s = 0 ;
EXPR	205:8	205:8	11	s = 0
ASSIGN	205:8	205:12	12	s = 0
LVAL	205:8	205:8	13	s
FIELD	205:8	205:8	14	s
LEAF_NODE	205:8	205:8	15	s
ASSIGN_OP	205:10	205:10	13	=
LEAF_NODE	205:10	205:10	14	=
RVAL	205:12	205:12	13	0
FIELD	205:12	205:12	14	0
LEAF_NODE	205:12	205:12	15	0
LEAF_NODE	205:13	205:13	11	;
CONDITION	205:15	205:15	10	s < samplesperpixel
EXPR	205:15	205:19	11	s < samplesperpixel
FIELD	205:15	205:15	12	s
LEAF_NODE	205:15	205:15	13	s
REL_OPERATOR	205:17	205:17	12	<
LEAF_NODE	205:17	205:17	13	<
FIELD	205:19	205:19	12	samplesperpixel
LEAF_NODE	205:19	205:19	13	samplesperpixel
LEAF_NODE	205:34	205:34	10	;
FOR_EXPR	205:36	205:36	10	s ++
EXPR	205:36	205:36	11	s ++
FIELD	205:36	205:37	12	s ++
LEAF_NODE	205:36	205:36	13	s
LEAF_NODE	205:37	205:37	13	++
LEAF_NODE	205:39	205:39	10	)
STATEMENTS	205:41	210:3	10	
LEAF_NODE	205:41	205:41	11	{
STATEMENTS	206:4	208:4	11	
SELECTION	206:4	207:5	12	
KEYWORD	206:4	206:4	13	if
LEAF_NODE	206:4	206:4	14	if
LEAF_NODE	206:7	206:7	13	(
CONDITION	206:8	206:8	13	TIFFReadScanline ( tif2 , buf2 , row , s ) < 0
EXPR	206:8	206:47	14	TIFFReadScanline ( tif2 , buf2 , row , s ) < 0
FUNCTION_CALL	206:8	206:43	15	TIFFReadScanline ( tif2 , buf2 , row , s )
CALLEE	206:8	206:8	16	TIFFReadScanline
LEAF_NODE	206:8	206:8	17	TIFFReadScanline
LEAF_NODE	206:24	206:24	16	(
ARGUMENT	206:25	206:25	16	tif2
FIELD	206:25	206:25	17	tif2
LEAF_NODE	206:25	206:25	18	tif2
LEAF_NODE	206:29	206:29	16	,
ARGUMENT	206:31	206:31	16	buf2
FIELD	206:31	206:31	17	buf2
LEAF_NODE	206:31	206:31	18	buf2
LEAF_NODE	206:35	206:35	16	,
ARGUMENT	206:37	206:37	16	row
FIELD	206:37	206:37	17	row
LEAF_NODE	206:37	206:37	18	row
LEAF_NODE	206:40	206:40	16	,
ARGUMENT	206:42	206:42	16	s
FIELD	206:42	206:42	17	s
LEAF_NODE	206:42	206:42	18	s
LEAF_NODE	206:43	206:43	16	)
REL_OPERATOR	206:45	206:45	15	<
LEAF_NODE	206:45	206:45	16	<
FIELD	206:47	206:47	15	0
LEAF_NODE	206:47	206:47	16	0
LEAF_NODE	206:48	206:48	13	)
STATEMENTS	207:5	207:5	13	
LEAF_NODE	207:5	207:5	14	checkEOF
LEAF_NODE	207:13	207:13	12	(
LEAF_NODE	207:14	207:14	12	tif2
LEAF_NODE	207:18	207:18	12	,
LEAF_NODE	207:20	207:20	12	row
LEAF_NODE	207:23	207:23	12	,
LEAF_NODE	207:25	207:25	12	s
LEAF_NODE	207:26	207:26	12	)
SELECTION	208:4	209:5	12	
KEYWORD	208:4	208:4	13	if
LEAF_NODE	208:4	208:4	14	if
LEAF_NODE	208:7	208:7	13	(
CONDITION	208:8	208:8	13	SeparateCompare ( 0 , s , row , buf1 , buf2 ) < 0
EXPR	208:8	208:49	14	SeparateCompare ( 0 , s , row , buf1 , buf2 ) < 0
FUNCTION_CALL	208:8	208:45	15	SeparateCompare ( 0 , s , row , buf1 , buf2 )
CALLEE	208:8	208:8	16	SeparateCompare
LEAF_NODE	208:8	208:8	17	SeparateCompare
LEAF_NODE	208:23	208:23	16	(
ARGUMENT	208:24	208:24	16	0
FIELD	208:24	208:24	17	0
LEAF_NODE	208:24	208:24	18	0
LEAF_NODE	208:25	208:25	16	,
ARGUMENT	208:27	208:27	16	s
FIELD	208:27	208:27	17	s
LEAF_NODE	208:27	208:27	18	s
LEAF_NODE	208:28	208:28	16	,
ARGUMENT	208:30	208:30	16	row
FIELD	208:30	208:30	17	row
LEAF_NODE	208:30	208:30	18	row
LEAF_NODE	208:33	208:33	16	,
ARGUMENT	208:35	208:35	16	buf1
FIELD	208:35	208:35	17	buf1
LEAF_NODE	208:35	208:35	18	buf1
LEAF_NODE	208:39	208:39	16	,
ARGUMENT	208:41	208:41	16	buf2
FIELD	208:41	208:41	17	buf2
LEAF_NODE	208:41	208:41	18	buf2
LEAF_NODE	208:45	208:45	16	)
REL_OPERATOR	208:47	208:47	15	<
LEAF_NODE	208:47	208:47	16	<
FIELD	208:49	208:49	15	0
LEAF_NODE	208:49	208:49	16	0
LEAF_NODE	208:50	208:50	13	)
STATEMENTS	209:5	209:5	13	
JUMP_STATEMENT	209:5	209:14	14	goto bad1 ;
KEYWORD	209:5	209:5	15	goto
LEAF_NODE	209:5	209:5	16	goto
DESTINATION	209:10	209:10	15	bad1
LEAF_NODE	209:10	209:10	16	bad1
LEAF_NODE	209:14	209:14	15	;
LEAF_NODE	210:3	210:3	11	}
LEAF_NODE	211:2	211:2	8	}
JUMP_STATEMENT	212:2	212:7	6	break DESTINATION ;
KEYWORD	212:2	212:2	7	break
LEAF_NODE	212:2	212:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	212:7	212:7	7	;
LEAF_NODE	213:1	213:1	6	case
LEAF_NODE	213:6	213:6	6	pack
LEAF_NODE	213:10	213:10	6	(
LEAF_NODE	213:11	213:11	6	PLANARCONFIG_SEPARATE
LEAF_NODE	213:32	213:32	6	,
LEAF_NODE	213:34	213:34	6	PLANARCONFIG_SEPARATE
LEAF_NODE	213:55	213:55	6	)
LEAF_NODE	213:56	213:56	6	:
ITERATION	214:2	215:3	6	
KEYWORD	214:2	214:2	7	for
LEAF_NODE	214:2	214:2	8	for
LEAF_NODE	214:6	214:6	7	(
FOR_INIT	214:7	214:12	7	s = 0 ;
EXPR	214:7	214:7	8	s = 0
ASSIGN	214:7	214:11	9	s = 0
LVAL	214:7	214:7	10	s
FIELD	214:7	214:7	11	s
LEAF_NODE	214:7	214:7	12	s
ASSIGN_OP	214:9	214:9	10	=
LEAF_NODE	214:9	214:9	11	=
RVAL	214:11	214:11	10	0
FIELD	214:11	214:11	11	0
LEAF_NODE	214:11	214:11	12	0
LEAF_NODE	214:12	214:12	8	;
CONDITION	214:14	214:14	7	s < samplesperpixel
EXPR	214:14	214:18	8	s < samplesperpixel
FIELD	214:14	214:14	9	s
LEAF_NODE	214:14	214:14	10	s
REL_OPERATOR	214:16	214:16	9	<
LEAF_NODE	214:16	214:16	10	<
FIELD	214:18	214:18	9	samplesperpixel
LEAF_NODE	214:18	214:18	10	samplesperpixel
LEAF_NODE	214:33	214:33	7	;
FOR_EXPR	214:35	214:35	7	s ++
EXPR	214:35	214:35	8	s ++
FIELD	214:35	214:36	9	s ++
LEAF_NODE	214:35	214:35	10	s
LEAF_NODE	214:36	214:36	10	++
LEAF_NODE	214:38	214:38	7	)
STATEMENTS	215:3	215:3	7	
ITERATION	215:3	215:43	8	
KEYWORD	215:3	215:3	9	for
LEAF_NODE	215:3	215:3	10	for
LEAF_NODE	215:7	215:7	9	(
FOR_INIT	215:8	215:15	9	row = 0 ;
EXPR	215:8	215:8	10	row = 0
ASSIGN	215:8	215:14	11	row = 0
LVAL	215:8	215:8	12	row
FIELD	215:8	215:8	13	row
LEAF_NODE	215:8	215:8	14	row
ASSIGN_OP	215:12	215:12	12	=
LEAF_NODE	215:12	215:12	13	=
RVAL	215:14	215:14	12	0
FIELD	215:14	215:14	13	0
LEAF_NODE	215:14	215:14	14	0
LEAF_NODE	215:15	215:15	10	;
CONDITION	215:17	215:17	9	row < imagelength
EXPR	215:17	215:23	10	row < imagelength
FIELD	215:17	215:17	11	row
LEAF_NODE	215:17	215:17	12	row
REL_OPERATOR	215:21	215:21	11	<
LEAF_NODE	215:21	215:21	12	<
FIELD	215:23	215:23	11	imagelength
LEAF_NODE	215:23	215:23	12	imagelength
LEAF_NODE	215:34	215:34	9	;
FOR_EXPR	215:36	215:36	9	row ++
EXPR	215:36	215:36	10	row ++
FIELD	215:36	215:39	11	row ++
LEAF_NODE	215:36	215:36	12	row
LEAF_NODE	215:39	215:39	12	++
LEAF_NODE	215:41	215:41	9	)
STATEMENTS	215:43	222:3	9	
LEAF_NODE	215:43	215:43	10	{
STATEMENTS	216:4	220:4	10	
SELECTION	216:4	217:5	11	
KEYWORD	216:4	216:4	12	if
LEAF_NODE	216:4	216:4	13	if
LEAF_NODE	216:7	216:7	12	(
CONDITION	216:8	216:8	12	TIFFReadScanline ( tif1 , buf1 , row , s ) < 0
EXPR	216:8	216:47	13	TIFFReadScanline ( tif1 , buf1 , row , s ) < 0
FUNCTION_CALL	216:8	216:43	14	TIFFReadScanline ( tif1 , buf1 , row , s )
CALLEE	216:8	216:8	15	TIFFReadScanline
LEAF_NODE	216:8	216:8	16	TIFFReadScanline
LEAF_NODE	216:24	216:24	15	(
ARGUMENT	216:25	216:25	15	tif1
FIELD	216:25	216:25	16	tif1
LEAF_NODE	216:25	216:25	17	tif1
LEAF_NODE	216:29	216:29	15	,
ARGUMENT	216:31	216:31	15	buf1
FIELD	216:31	216:31	16	buf1
LEAF_NODE	216:31	216:31	17	buf1
LEAF_NODE	216:35	216:35	15	,
ARGUMENT	216:37	216:37	15	row
FIELD	216:37	216:37	16	row
LEAF_NODE	216:37	216:37	17	row
LEAF_NODE	216:40	216:40	15	,
ARGUMENT	216:42	216:42	15	s
FIELD	216:42	216:42	16	s
LEAF_NODE	216:42	216:42	17	s
LEAF_NODE	216:43	216:43	15	)
REL_OPERATOR	216:45	216:45	14	<
LEAF_NODE	216:45	216:45	15	<
FIELD	216:47	216:47	14	0
LEAF_NODE	216:47	216:47	15	0
LEAF_NODE	216:48	216:48	12	)
STATEMENTS	217:5	217:5	12	
LEAF_NODE	217:5	217:5	13	checkEOF
LEAF_NODE	217:13	217:13	11	(
LEAF_NODE	217:14	217:14	11	tif1
LEAF_NODE	217:18	217:18	11	,
LEAF_NODE	217:20	217:20	11	row
LEAF_NODE	217:23	217:23	11	,
LEAF_NODE	217:25	217:25	11	s
LEAF_NODE	217:26	217:26	11	)
SELECTION	218:4	219:5	11	
KEYWORD	218:4	218:4	12	if
LEAF_NODE	218:4	218:4	13	if
LEAF_NODE	218:7	218:7	12	(
CONDITION	218:8	218:8	12	TIFFReadScanline ( tif2 , buf2 , row , s ) < 0
EXPR	218:8	218:47	13	TIFFReadScanline ( tif2 , buf2 , row , s ) < 0
FUNCTION_CALL	218:8	218:43	14	TIFFReadScanline ( tif2 , buf2 , row , s )
CALLEE	218:8	218:8	15	TIFFReadScanline
LEAF_NODE	218:8	218:8	16	TIFFReadScanline
LEAF_NODE	218:24	218:24	15	(
ARGUMENT	218:25	218:25	15	tif2
FIELD	218:25	218:25	16	tif2
LEAF_NODE	218:25	218:25	17	tif2
LEAF_NODE	218:29	218:29	15	,
ARGUMENT	218:31	218:31	15	buf2
FIELD	218:31	218:31	16	buf2
LEAF_NODE	218:31	218:31	17	buf2
LEAF_NODE	218:35	218:35	15	,
ARGUMENT	218:37	218:37	15	row
FIELD	218:37	218:37	16	row
LEAF_NODE	218:37	218:37	17	row
LEAF_NODE	218:40	218:40	15	,
ARGUMENT	218:42	218:42	15	s
FIELD	218:42	218:42	16	s
LEAF_NODE	218:42	218:42	17	s
LEAF_NODE	218:43	218:43	15	)
REL_OPERATOR	218:45	218:45	14	<
LEAF_NODE	218:45	218:45	15	<
FIELD	218:47	218:47	14	0
LEAF_NODE	218:47	218:47	15	0
LEAF_NODE	218:48	218:48	12	)
STATEMENTS	219:5	219:5	12	
LEAF_NODE	219:5	219:5	13	checkEOF
LEAF_NODE	219:13	219:13	11	(
LEAF_NODE	219:14	219:14	11	tif2
LEAF_NODE	219:18	219:18	11	,
LEAF_NODE	219:20	219:20	11	row
LEAF_NODE	219:23	219:23	11	,
LEAF_NODE	219:25	219:25	11	s
LEAF_NODE	219:26	219:26	11	)
SELECTION	220:4	221:5	11	
KEYWORD	220:4	220:4	12	if
LEAF_NODE	220:4	220:4	13	if
LEAF_NODE	220:7	220:7	12	(
CONDITION	220:8	220:8	12	ContigCompare ( s , row , buf1 , buf2 , size1 ) < 0
EXPR	220:8	220:51	13	ContigCompare ( s , row , buf1 , buf2 , size1 ) < 0
FUNCTION_CALL	220:8	220:47	14	ContigCompare ( s , row , buf1 , buf2 , size1 )
CALLEE	220:8	220:8	15	ContigCompare
LEAF_NODE	220:8	220:8	16	ContigCompare
LEAF_NODE	220:21	220:21	15	(
ARGUMENT	220:22	220:22	15	s
FIELD	220:22	220:22	16	s
LEAF_NODE	220:22	220:22	17	s
LEAF_NODE	220:23	220:23	15	,
ARGUMENT	220:25	220:25	15	row
FIELD	220:25	220:25	16	row
LEAF_NODE	220:25	220:25	17	row
LEAF_NODE	220:28	220:28	15	,
ARGUMENT	220:30	220:30	15	buf1
FIELD	220:30	220:30	16	buf1
LEAF_NODE	220:30	220:30	17	buf1
LEAF_NODE	220:34	220:34	15	,
ARGUMENT	220:36	220:36	15	buf2
FIELD	220:36	220:36	16	buf2
LEAF_NODE	220:36	220:36	17	buf2
LEAF_NODE	220:40	220:40	15	,
ARGUMENT	220:42	220:42	15	size1
FIELD	220:42	220:42	16	size1
LEAF_NODE	220:42	220:42	17	size1
LEAF_NODE	220:47	220:47	15	)
REL_OPERATOR	220:49	220:49	14	<
LEAF_NODE	220:49	220:49	15	<
FIELD	220:51	220:51	14	0
LEAF_NODE	220:51	220:51	15	0
LEAF_NODE	220:52	220:52	12	)
STATEMENTS	221:5	221:5	12	
JUMP_STATEMENT	221:5	221:14	13	goto bad1 ;
KEYWORD	221:5	221:5	14	goto
LEAF_NODE	221:5	221:5	15	goto
DESTINATION	221:10	221:10	14	bad1
LEAF_NODE	221:10	221:10	15	bad1
LEAF_NODE	221:14	221:14	14	;
LEAF_NODE	222:3	222:3	10	}
JUMP_STATEMENT	223:2	223:7	6	break DESTINATION ;
KEYWORD	223:2	223:2	7	break
LEAF_NODE	223:2	223:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	223:7	223:7	7	;
LEAF_NODE	224:1	224:1	6	case
LEAF_NODE	224:6	224:6	6	pack
LEAF_NODE	224:10	224:10	6	(
LEAF_NODE	224:11	224:11	6	PLANARCONFIG_CONTIG
LEAF_NODE	224:30	224:30	6	,
LEAF_NODE	224:32	224:32	6	PLANARCONFIG_CONTIG
LEAF_NODE	224:51	224:51	6	)
LEAF_NODE	224:52	224:52	6	:
ITERATION	225:2	225:42	6	
KEYWORD	225:2	225:2	7	for
LEAF_NODE	225:2	225:2	8	for
LEAF_NODE	225:6	225:6	7	(
FOR_INIT	225:7	225:14	7	row = 0 ;
EXPR	225:7	225:7	8	row = 0
ASSIGN	225:7	225:13	9	row = 0
LVAL	225:7	225:7	10	row
FIELD	225:7	225:7	11	row
LEAF_NODE	225:7	225:7	12	row
ASSIGN_OP	225:11	225:11	10	=
LEAF_NODE	225:11	225:11	11	=
RVAL	225:13	225:13	10	0
FIELD	225:13	225:13	11	0
LEAF_NODE	225:13	225:13	12	0
LEAF_NODE	225:14	225:14	8	;
CONDITION	225:16	225:16	7	row < imagelength
EXPR	225:16	225:22	8	row < imagelength
FIELD	225:16	225:16	9	row
LEAF_NODE	225:16	225:16	10	row
REL_OPERATOR	225:20	225:20	9	<
LEAF_NODE	225:20	225:20	10	<
FIELD	225:22	225:22	9	imagelength
LEAF_NODE	225:22	225:22	10	imagelength
LEAF_NODE	225:33	225:33	7	;
FOR_EXPR	225:35	225:35	7	row ++
EXPR	225:35	225:35	8	row ++
FIELD	225:35	225:38	9	row ++
LEAF_NODE	225:35	225:35	10	row
LEAF_NODE	225:38	225:38	10	++
LEAF_NODE	225:40	225:40	7	)
STATEMENTS	225:42	232:2	7	
LEAF_NODE	225:42	225:42	8	{
STATEMENTS	226:3	230:3	8	
SELECTION	226:3	227:4	9	
KEYWORD	226:3	226:3	10	if
LEAF_NODE	226:3	226:3	11	if
LEAF_NODE	226:6	226:6	10	(
CONDITION	226:7	226:7	10	TIFFReadScanline ( tif1 , buf1 , row , 0 ) < 0
EXPR	226:7	226:46	11	TIFFReadScanline ( tif1 , buf1 , row , 0 ) < 0
FUNCTION_CALL	226:7	226:42	12	TIFFReadScanline ( tif1 , buf1 , row , 0 )
CALLEE	226:7	226:7	13	TIFFReadScanline
LEAF_NODE	226:7	226:7	14	TIFFReadScanline
LEAF_NODE	226:23	226:23	13	(
ARGUMENT	226:24	226:24	13	tif1
FIELD	226:24	226:24	14	tif1
LEAF_NODE	226:24	226:24	15	tif1
LEAF_NODE	226:28	226:28	13	,
ARGUMENT	226:30	226:30	13	buf1
FIELD	226:30	226:30	14	buf1
LEAF_NODE	226:30	226:30	15	buf1
LEAF_NODE	226:34	226:34	13	,
ARGUMENT	226:36	226:36	13	row
FIELD	226:36	226:36	14	row
LEAF_NODE	226:36	226:36	15	row
LEAF_NODE	226:39	226:39	13	,
ARGUMENT	226:41	226:41	13	0
FIELD	226:41	226:41	14	0
LEAF_NODE	226:41	226:41	15	0
LEAF_NODE	226:42	226:42	13	)
REL_OPERATOR	226:44	226:44	12	<
LEAF_NODE	226:44	226:44	13	<
FIELD	226:46	226:46	12	0
LEAF_NODE	226:46	226:46	13	0
LEAF_NODE	226:47	226:47	10	)
STATEMENTS	227:4	227:4	10	
LEAF_NODE	227:4	227:4	11	checkEOF
LEAF_NODE	227:12	227:12	9	(
LEAF_NODE	227:13	227:13	9	tif1
LEAF_NODE	227:17	227:17	9	,
LEAF_NODE	227:19	227:19	9	row
LEAF_NODE	227:22	227:22	9	,
LEAF_NODE	227:24	227:24	9	-
LEAF_NODE	227:25	227:25	9	1
LEAF_NODE	227:26	227:26	9	)
SELECTION	228:3	229:4	9	
KEYWORD	228:3	228:3	10	if
LEAF_NODE	228:3	228:3	11	if
LEAF_NODE	228:6	228:6	10	(
CONDITION	228:7	228:7	10	TIFFReadScanline ( tif2 , buf2 , row , 0 ) < 0
EXPR	228:7	228:46	11	TIFFReadScanline ( tif2 , buf2 , row , 0 ) < 0
FUNCTION_CALL	228:7	228:42	12	TIFFReadScanline ( tif2 , buf2 , row , 0 )
CALLEE	228:7	228:7	13	TIFFReadScanline
LEAF_NODE	228:7	228:7	14	TIFFReadScanline
LEAF_NODE	228:23	228:23	13	(
ARGUMENT	228:24	228:24	13	tif2
FIELD	228:24	228:24	14	tif2
LEAF_NODE	228:24	228:24	15	tif2
LEAF_NODE	228:28	228:28	13	,
ARGUMENT	228:30	228:30	13	buf2
FIELD	228:30	228:30	14	buf2
LEAF_NODE	228:30	228:30	15	buf2
LEAF_NODE	228:34	228:34	13	,
ARGUMENT	228:36	228:36	13	row
FIELD	228:36	228:36	14	row
LEAF_NODE	228:36	228:36	15	row
LEAF_NODE	228:39	228:39	13	,
ARGUMENT	228:41	228:41	13	0
FIELD	228:41	228:41	14	0
LEAF_NODE	228:41	228:41	15	0
LEAF_NODE	228:42	228:42	13	)
REL_OPERATOR	228:44	228:44	12	<
LEAF_NODE	228:44	228:44	13	<
FIELD	228:46	228:46	12	0
LEAF_NODE	228:46	228:46	13	0
LEAF_NODE	228:47	228:47	10	)
STATEMENTS	229:4	229:4	10	
LEAF_NODE	229:4	229:4	11	checkEOF
LEAF_NODE	229:12	229:12	9	(
LEAF_NODE	229:13	229:13	9	tif2
LEAF_NODE	229:17	229:17	9	,
LEAF_NODE	229:19	229:19	9	row
LEAF_NODE	229:22	229:22	9	,
LEAF_NODE	229:24	229:24	9	-
LEAF_NODE	229:25	229:25	9	1
LEAF_NODE	229:26	229:26	9	)
SELECTION	230:3	231:4	9	
KEYWORD	230:3	230:3	10	if
LEAF_NODE	230:3	230:3	11	if
LEAF_NODE	230:6	230:6	10	(
CONDITION	230:7	230:7	10	ContigCompare ( - 1 , row , buf1 , buf2 , size1 ) < 0
EXPR	230:7	230:51	11	ContigCompare ( - 1 , row , buf1 , buf2 , size1 ) < 0
FUNCTION_CALL	230:7	230:47	12	ContigCompare ( - 1 , row , buf1 , buf2 , size1 )
CALLEE	230:7	230:7	13	ContigCompare
LEAF_NODE	230:7	230:7	14	ContigCompare
LEAF_NODE	230:20	230:20	13	(
ARGUMENT	230:21	230:21	13	- 1
UNARY_EXPR	230:21	230:22	14	- 1
UNARY_OPERATOR	230:21	230:21	15	-
LEAF_NODE	230:21	230:21	16	-
FIELD	230:22	230:22	15	1
LEAF_NODE	230:22	230:22	16	1
LEAF_NODE	230:23	230:23	13	,
ARGUMENT	230:25	230:25	13	row
FIELD	230:25	230:25	14	row
LEAF_NODE	230:25	230:25	15	row
LEAF_NODE	230:28	230:28	13	,
ARGUMENT	230:30	230:30	13	buf1
FIELD	230:30	230:30	14	buf1
LEAF_NODE	230:30	230:30	15	buf1
LEAF_NODE	230:34	230:34	13	,
ARGUMENT	230:36	230:36	13	buf2
FIELD	230:36	230:36	14	buf2
LEAF_NODE	230:36	230:36	15	buf2
LEAF_NODE	230:40	230:40	13	,
ARGUMENT	230:42	230:42	13	size1
FIELD	230:42	230:42	14	size1
LEAF_NODE	230:42	230:42	15	size1
LEAF_NODE	230:47	230:47	13	)
REL_OPERATOR	230:49	230:49	12	<
LEAF_NODE	230:49	230:49	13	<
FIELD	230:51	230:51	12	0
LEAF_NODE	230:51	230:51	13	0
LEAF_NODE	230:52	230:52	10	)
STATEMENTS	231:4	231:4	10	
JUMP_STATEMENT	231:4	231:13	11	goto bad1 ;
KEYWORD	231:4	231:4	12	goto
LEAF_NODE	231:4	231:4	13	goto
DESTINATION	231:9	231:9	12	bad1
LEAF_NODE	231:9	231:9	13	bad1
LEAF_NODE	231:13	231:13	12	;
LEAF_NODE	232:2	232:2	8	}
JUMP_STATEMENT	233:2	233:7	6	break DESTINATION ;
KEYWORD	233:2	233:2	7	break
LEAF_NODE	233:2	233:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	233:7	233:7	7	;
LEAF_NODE	234:1	234:1	5	}
SELECTION	235:1	235:11	3	
KEYWORD	235:1	235:1	4	if
LEAF_NODE	235:1	235:1	5	if
LEAF_NODE	235:4	235:4	4	(
CONDITION	235:5	235:5	4	buf1
EXPR	235:5	235:5	5	buf1
FIELD	235:5	235:5	6	buf1
LEAF_NODE	235:5	235:5	7	buf1
LEAF_NODE	235:9	235:9	4	)
STATEMENTS	235:11	235:11	4	
EXPR_STATEMENT	235:11	235:26	5	_TIFFfree ( buf1 ) ;
EXPR	235:11	235:11	6	_TIFFfree ( buf1 )
FUNCTION_CALL	235:11	235:25	7	_TIFFfree ( buf1 )
CALLEE	235:11	235:11	8	_TIFFfree
LEAF_NODE	235:11	235:11	9	_TIFFfree
LEAF_NODE	235:20	235:20	8	(
ARGUMENT	235:21	235:21	8	buf1
FIELD	235:21	235:21	9	buf1
LEAF_NODE	235:21	235:21	10	buf1
LEAF_NODE	235:25	235:25	8	)
LEAF_NODE	235:26	235:26	6	;
SELECTION	236:1	236:11	3	
KEYWORD	236:1	236:1	4	if
LEAF_NODE	236:1	236:1	5	if
LEAF_NODE	236:4	236:4	4	(
CONDITION	236:5	236:5	4	buf2
EXPR	236:5	236:5	5	buf2
FIELD	236:5	236:5	6	buf2
LEAF_NODE	236:5	236:5	7	buf2
LEAF_NODE	236:9	236:9	4	)
STATEMENTS	236:11	236:11	4	
EXPR_STATEMENT	236:11	236:26	5	_TIFFfree ( buf2 ) ;
EXPR	236:11	236:11	6	_TIFFfree ( buf2 )
FUNCTION_CALL	236:11	236:25	7	_TIFFfree ( buf2 )
CALLEE	236:11	236:11	8	_TIFFfree
LEAF_NODE	236:11	236:11	9	_TIFFfree
LEAF_NODE	236:20	236:20	8	(
ARGUMENT	236:21	236:21	8	buf2
FIELD	236:21	236:21	9	buf2
LEAF_NODE	236:21	236:21	10	buf2
LEAF_NODE	236:25	236:25	8	)
LEAF_NODE	236:26	236:26	6	;
JUMP_STATEMENT	237:1	237:11	3	return ( 1 ) ;
KEYWORD	237:1	237:1	4	return
LEAF_NODE	237:1	237:1	5	return
DESTINATION	237:8	237:8	4	( 1 )
EXPR	237:8	237:10	5	( 1 )
LEAF_NODE	237:8	237:8	6	(
FIELD	237:9	237:9	6	1
LEAF_NODE	237:9	237:9	7	1
LEAF_NODE	237:10	237:10	6	)
LEAF_NODE	237:11	237:11	4	;
LABEL	238:0	238:3	3	bad :
LEAF_NODE	238:0	238:0	4	bad
LEAF_NODE	238:3	238:3	4	:
SELECTION	239:1	240:2	3	
KEYWORD	239:1	239:1	4	if
LEAF_NODE	239:1	239:1	5	if
LEAF_NODE	239:4	239:4	4	(
CONDITION	239:5	239:5	4	stopondiff
EXPR	239:5	239:5	5	stopondiff
FIELD	239:5	239:5	6	stopondiff
LEAF_NODE	239:5	239:5	7	stopondiff
LEAF_NODE	239:15	239:15	4	)
STATEMENTS	240:2	240:2	4	
EXPR_STATEMENT	240:2	240:9	5	exit ( 1 ) ;
EXPR	240:2	240:2	6	exit ( 1 )
FUNCTION_CALL	240:2	240:8	7	exit ( 1 )
CALLEE	240:2	240:2	8	exit
LEAF_NODE	240:2	240:2	9	exit
LEAF_NODE	240:6	240:6	8	(
ARGUMENT	240:7	240:7	8	1
FIELD	240:7	240:7	9	1
LEAF_NODE	240:7	240:7	10	1
LEAF_NODE	240:8	240:8	8	)
LEAF_NODE	240:9	240:9	6	;
LABEL	241:0	241:4	3	bad1 :
LEAF_NODE	241:0	241:0	4	bad1
LEAF_NODE	241:4	241:4	4	:
SELECTION	242:1	242:11	3	
KEYWORD	242:1	242:1	4	if
LEAF_NODE	242:1	242:1	5	if
LEAF_NODE	242:4	242:4	4	(
CONDITION	242:5	242:5	4	buf1
EXPR	242:5	242:5	5	buf1
FIELD	242:5	242:5	6	buf1
LEAF_NODE	242:5	242:5	7	buf1
LEAF_NODE	242:9	242:9	4	)
STATEMENTS	242:11	242:11	4	
EXPR_STATEMENT	242:11	242:26	5	_TIFFfree ( buf1 ) ;
EXPR	242:11	242:11	6	_TIFFfree ( buf1 )
FUNCTION_CALL	242:11	242:25	7	_TIFFfree ( buf1 )
CALLEE	242:11	242:11	8	_TIFFfree
LEAF_NODE	242:11	242:11	9	_TIFFfree
LEAF_NODE	242:20	242:20	8	(
ARGUMENT	242:21	242:21	8	buf1
FIELD	242:21	242:21	9	buf1
LEAF_NODE	242:21	242:21	10	buf1
LEAF_NODE	242:25	242:25	8	)
LEAF_NODE	242:26	242:26	6	;
SELECTION	243:1	243:11	3	
KEYWORD	243:1	243:1	4	if
LEAF_NODE	243:1	243:1	5	if
LEAF_NODE	243:4	243:4	4	(
CONDITION	243:5	243:5	4	buf2
EXPR	243:5	243:5	5	buf2
FIELD	243:5	243:5	6	buf2
LEAF_NODE	243:5	243:5	7	buf2
LEAF_NODE	243:9	243:9	4	)
STATEMENTS	243:11	243:11	4	
EXPR_STATEMENT	243:11	243:26	5	_TIFFfree ( buf2 ) ;
EXPR	243:11	243:11	6	_TIFFfree ( buf2 )
FUNCTION_CALL	243:11	243:25	7	_TIFFfree ( buf2 )
CALLEE	243:11	243:11	8	_TIFFfree
LEAF_NODE	243:11	243:11	9	_TIFFfree
LEAF_NODE	243:20	243:20	8	(
ARGUMENT	243:21	243:21	8	buf2
FIELD	243:21	243:21	9	buf2
LEAF_NODE	243:21	243:21	10	buf2
LEAF_NODE	243:25	243:25	8	)
LEAF_NODE	243:26	243:26	6	;
JUMP_STATEMENT	244:1	244:11	3	return ( 0 ) ;
KEYWORD	244:1	244:1	4	return
LEAF_NODE	244:1	244:1	5	return
DESTINATION	244:8	244:8	4	( 0 )
EXPR	244:8	244:10	5	( 0 )
LEAF_NODE	244:8	244:8	6	(
FIELD	244:9	244:9	6	0
LEAF_NODE	244:9	244:9	7	0
LEAF_NODE	244:10	244:10	6	)
LEAF_NODE	244:11	244:11	4	;
LEAF_NODE	245:0	245:0	2	}
FUNCTION_DEF	260:0	325:0	1	
RETURN_TYPE	260:0	260:7	2	static int
LEAF_NODE	260:0	260:0	3	static
TYPE_NAME	260:7	260:7	3	int
LEAF_NODE	260:7	260:7	4	int
FUNCTION_NAME	261:0	261:0	2	cmptags
LEAF_NODE	261:0	261:0	3	cmptags
PARAMETER_LIST	261:7	261:30	2	( TIFF * tif1 , TIFF * tif2 )
LEAF_NODE	261:7	261:7	3	(
PARAMETER_DECL	261:8	261:14	3	TIFF * tif1
TYPE	261:8	261:12	4	TIFF *
TYPE_NAME	261:8	261:8	5	TIFF
LEAF_NODE	261:8	261:8	6	TIFF
POINTER	261:12	261:12	5	*
LEAF_NODE	261:12	261:12	6	*
NAME	261:14	261:14	4	tif1
LEAF_NODE	261:14	261:14	5	tif1
LEAF_NODE	261:18	261:18	3	,
PARAMETER_DECL	261:20	261:26	3	TIFF * tif2
TYPE	261:20	261:24	4	TIFF *
TYPE_NAME	261:20	261:20	5	TIFF
LEAF_NODE	261:20	261:20	6	TIFF
POINTER	261:24	261:24	5	*
LEAF_NODE	261:24	261:24	6	*
NAME	261:26	261:26	4	tif2
LEAF_NODE	261:26	261:26	5	tif2
LEAF_NODE	261:30	261:30	3	)
LEAF_NODE	262:0	262:0	2	{
STATEMENTS	263:1	324:1	2	
SIMPLE_DECL	263:1	263:34	3	uint16 compression1 , uint16 compression2 ;
INIT_DECL_LIST	263:1	263:1	4	uint16 compression1 , uint16 compression2
VAR_DECL	263:1	263:8	5	uint16 compression1
TYPE	263:1	263:1	6	uint16
TYPE_NAME	263:1	263:1	7	uint16
LEAF_NODE	263:1	263:1	8	uint16
NAME	263:8	263:8	6	compression1
LEAF_NODE	263:8	263:8	7	compression1
LEAF_NODE	263:20	263:20	5	,
VAR_DECL	263:1	263:22	5	uint16 compression2
TYPE	263:1	263:1	6	uint16
TYPE_NAME	263:1	263:1	7	uint16
LEAF_NODE	263:1	263:1	8	uint16
NAME	263:22	263:22	6	compression2
LEAF_NODE	263:22	263:22	7	compression2
LEAF_NODE	263:34	263:34	4	;
EXPR_STATEMENT	264:1	264:49	3	CmpLongField ( TIFFTAG_SUBFILETYPE , "SubFileType" ) ;
EXPR	264:1	264:1	4	CmpLongField ( TIFFTAG_SUBFILETYPE , "SubFileType" )
FUNCTION_CALL	264:1	264:48	5	CmpLongField ( TIFFTAG_SUBFILETYPE , "SubFileType" )
CALLEE	264:1	264:1	6	CmpLongField
LEAF_NODE	264:1	264:1	7	CmpLongField
LEAF_NODE	264:13	264:13	6	(
ARGUMENT	264:14	264:14	6	TIFFTAG_SUBFILETYPE
FIELD	264:14	264:14	7	TIFFTAG_SUBFILETYPE
LEAF_NODE	264:14	264:14	8	TIFFTAG_SUBFILETYPE
LEAF_NODE	264:33	264:33	6	,
ARGUMENT	264:35	264:35	6	"SubFileType"
FIELD	264:35	264:35	7	"SubFileType"
LEAF_NODE	264:35	264:35	8	"SubFileType"
LEAF_NODE	264:48	264:48	6	)
LEAF_NODE	264:49	264:49	4	;
EXPR_STATEMENT	265:1	265:47	3	CmpLongField ( TIFFTAG_IMAGEWIDTH , "ImageWidth" ) ;
EXPR	265:1	265:1	4	CmpLongField ( TIFFTAG_IMAGEWIDTH , "ImageWidth" )
FUNCTION_CALL	265:1	265:46	5	CmpLongField ( TIFFTAG_IMAGEWIDTH , "ImageWidth" )
CALLEE	265:1	265:1	6	CmpLongField
LEAF_NODE	265:1	265:1	7	CmpLongField
LEAF_NODE	265:13	265:13	6	(
ARGUMENT	265:14	265:14	6	TIFFTAG_IMAGEWIDTH
FIELD	265:14	265:14	7	TIFFTAG_IMAGEWIDTH
LEAF_NODE	265:14	265:14	8	TIFFTAG_IMAGEWIDTH
LEAF_NODE	265:32	265:32	6	,
ARGUMENT	265:34	265:34	6	"ImageWidth"
FIELD	265:34	265:34	7	"ImageWidth"
LEAF_NODE	265:34	265:34	8	"ImageWidth"
LEAF_NODE	265:46	265:46	6	)
LEAF_NODE	265:47	265:47	4	;
EXPR_STATEMENT	266:1	266:49	3	CmpLongField ( TIFFTAG_IMAGELENGTH , "ImageLength" ) ;
EXPR	266:1	266:1	4	CmpLongField ( TIFFTAG_IMAGELENGTH , "ImageLength" )
FUNCTION_CALL	266:1	266:48	5	CmpLongField ( TIFFTAG_IMAGELENGTH , "ImageLength" )
CALLEE	266:1	266:1	6	CmpLongField
LEAF_NODE	266:1	266:1	7	CmpLongField
LEAF_NODE	266:13	266:13	6	(
ARGUMENT	266:14	266:14	6	TIFFTAG_IMAGELENGTH
FIELD	266:14	266:14	7	TIFFTAG_IMAGELENGTH
LEAF_NODE	266:14	266:14	8	TIFFTAG_IMAGELENGTH
LEAF_NODE	266:33	266:33	6	,
ARGUMENT	266:35	266:35	6	"ImageLength"
FIELD	266:35	266:35	7	"ImageLength"
LEAF_NODE	266:35	266:35	8	"ImageLength"
LEAF_NODE	266:48	266:48	6	)
LEAF_NODE	266:49	266:49	4	;
EXPR_STATEMENT	267:1	267:54	3	CmpShortField ( TIFFTAG_BITSPERSAMPLE , "BitsPerSample" ) ;
EXPR	267:1	267:1	4	CmpShortField ( TIFFTAG_BITSPERSAMPLE , "BitsPerSample" )
FUNCTION_CALL	267:1	267:53	5	CmpShortField ( TIFFTAG_BITSPERSAMPLE , "BitsPerSample" )
CALLEE	267:1	267:1	6	CmpShortField
LEAF_NODE	267:1	267:1	7	CmpShortField
LEAF_NODE	267:14	267:14	6	(
ARGUMENT	267:15	267:15	6	TIFFTAG_BITSPERSAMPLE
FIELD	267:15	267:15	7	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	267:15	267:15	8	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	267:36	267:36	6	,
ARGUMENT	267:38	267:38	6	"BitsPerSample"
FIELD	267:38	267:38	7	"BitsPerSample"
LEAF_NODE	267:38	267:38	8	"BitsPerSample"
LEAF_NODE	267:53	267:53	6	)
LEAF_NODE	267:54	267:54	4	;
EXPR_STATEMENT	268:1	268:50	3	CmpShortField ( TIFFTAG_COMPRESSION , "Compression" ) ;
EXPR	268:1	268:1	4	CmpShortField ( TIFFTAG_COMPRESSION , "Compression" )
FUNCTION_CALL	268:1	268:49	5	CmpShortField ( TIFFTAG_COMPRESSION , "Compression" )
CALLEE	268:1	268:1	6	CmpShortField
LEAF_NODE	268:1	268:1	7	CmpShortField
LEAF_NODE	268:14	268:14	6	(
ARGUMENT	268:15	268:15	6	TIFFTAG_COMPRESSION
FIELD	268:15	268:15	7	TIFFTAG_COMPRESSION
LEAF_NODE	268:15	268:15	8	TIFFTAG_COMPRESSION
LEAF_NODE	268:34	268:34	6	,
ARGUMENT	268:36	268:36	6	"Compression"
FIELD	268:36	268:36	7	"Compression"
LEAF_NODE	268:36	268:36	8	"Compression"
LEAF_NODE	268:49	268:49	6	)
LEAF_NODE	268:50	268:50	4	;
EXPR_STATEMENT	269:1	269:46	3	CmpShortField ( TIFFTAG_PREDICTOR , "Predictor" ) ;
EXPR	269:1	269:1	4	CmpShortField ( TIFFTAG_PREDICTOR , "Predictor" )
FUNCTION_CALL	269:1	269:45	5	CmpShortField ( TIFFTAG_PREDICTOR , "Predictor" )
CALLEE	269:1	269:1	6	CmpShortField
LEAF_NODE	269:1	269:1	7	CmpShortField
LEAF_NODE	269:14	269:14	6	(
ARGUMENT	269:15	269:15	6	TIFFTAG_PREDICTOR
FIELD	269:15	269:15	7	TIFFTAG_PREDICTOR
LEAF_NODE	269:15	269:15	8	TIFFTAG_PREDICTOR
LEAF_NODE	269:32	269:32	6	,
ARGUMENT	269:34	269:34	6	"Predictor"
FIELD	269:34	269:34	7	"Predictor"
LEAF_NODE	269:34	269:34	8	"Predictor"
LEAF_NODE	269:45	269:45	6	)
LEAF_NODE	269:46	269:46	4	;
EXPR_STATEMENT	270:1	270:64	3	CmpShortField ( TIFFTAG_PHOTOMETRIC , "PhotometricInterpretation" ) ;
EXPR	270:1	270:1	4	CmpShortField ( TIFFTAG_PHOTOMETRIC , "PhotometricInterpretation" )
FUNCTION_CALL	270:1	270:63	5	CmpShortField ( TIFFTAG_PHOTOMETRIC , "PhotometricInterpretation" )
CALLEE	270:1	270:1	6	CmpShortField
LEAF_NODE	270:1	270:1	7	CmpShortField
LEAF_NODE	270:14	270:14	6	(
ARGUMENT	270:15	270:15	6	TIFFTAG_PHOTOMETRIC
FIELD	270:15	270:15	7	TIFFTAG_PHOTOMETRIC
LEAF_NODE	270:15	270:15	8	TIFFTAG_PHOTOMETRIC
LEAF_NODE	270:34	270:34	6	,
ARGUMENT	270:36	270:36	6	"PhotometricInterpretation"
FIELD	270:36	270:36	7	"PhotometricInterpretation"
LEAF_NODE	270:36	270:36	8	"PhotometricInterpretation"
LEAF_NODE	270:63	270:63	6	)
LEAF_NODE	270:64	270:64	4	;
EXPR_STATEMENT	271:1	271:53	3	CmpShortField ( TIFFTAG_THRESHHOLDING , "Thresholding" ) ;
EXPR	271:1	271:1	4	CmpShortField ( TIFFTAG_THRESHHOLDING , "Thresholding" )
FUNCTION_CALL	271:1	271:52	5	CmpShortField ( TIFFTAG_THRESHHOLDING , "Thresholding" )
CALLEE	271:1	271:1	6	CmpShortField
LEAF_NODE	271:1	271:1	7	CmpShortField
LEAF_NODE	271:14	271:14	6	(
ARGUMENT	271:15	271:15	6	TIFFTAG_THRESHHOLDING
FIELD	271:15	271:15	7	TIFFTAG_THRESHHOLDING
LEAF_NODE	271:15	271:15	8	TIFFTAG_THRESHHOLDING
LEAF_NODE	271:36	271:36	6	,
ARGUMENT	271:38	271:38	6	"Thresholding"
FIELD	271:38	271:38	7	"Thresholding"
LEAF_NODE	271:38	271:38	8	"Thresholding"
LEAF_NODE	271:52	271:52	6	)
LEAF_NODE	271:53	271:53	4	;
EXPR_STATEMENT	272:1	272:46	3	CmpShortField ( TIFFTAG_FILLORDER , "FillOrder" ) ;
EXPR	272:1	272:1	4	CmpShortField ( TIFFTAG_FILLORDER , "FillOrder" )
FUNCTION_CALL	272:1	272:45	5	CmpShortField ( TIFFTAG_FILLORDER , "FillOrder" )
CALLEE	272:1	272:1	6	CmpShortField
LEAF_NODE	272:1	272:1	7	CmpShortField
LEAF_NODE	272:14	272:14	6	(
ARGUMENT	272:15	272:15	6	TIFFTAG_FILLORDER
FIELD	272:15	272:15	7	TIFFTAG_FILLORDER
LEAF_NODE	272:15	272:15	8	TIFFTAG_FILLORDER
LEAF_NODE	272:32	272:32	6	,
ARGUMENT	272:34	272:34	6	"FillOrder"
FIELD	272:34	272:34	7	"FillOrder"
LEAF_NODE	272:34	272:34	8	"FillOrder"
LEAF_NODE	272:45	272:45	6	)
LEAF_NODE	272:46	272:46	4	;
EXPR_STATEMENT	273:1	273:50	3	CmpShortField ( TIFFTAG_ORIENTATION , "Orientation" ) ;
EXPR	273:1	273:1	4	CmpShortField ( TIFFTAG_ORIENTATION , "Orientation" )
FUNCTION_CALL	273:1	273:49	5	CmpShortField ( TIFFTAG_ORIENTATION , "Orientation" )
CALLEE	273:1	273:1	6	CmpShortField
LEAF_NODE	273:1	273:1	7	CmpShortField
LEAF_NODE	273:14	273:14	6	(
ARGUMENT	273:15	273:15	6	TIFFTAG_ORIENTATION
FIELD	273:15	273:15	7	TIFFTAG_ORIENTATION
LEAF_NODE	273:15	273:15	8	TIFFTAG_ORIENTATION
LEAF_NODE	273:34	273:34	6	,
ARGUMENT	273:36	273:36	6	"Orientation"
FIELD	273:36	273:36	7	"Orientation"
LEAF_NODE	273:36	273:36	8	"Orientation"
LEAF_NODE	273:49	273:49	6	)
LEAF_NODE	273:50	273:50	4	;
EXPR_STATEMENT	274:1	274:58	3	CmpShortField ( TIFFTAG_SAMPLESPERPIXEL , "SamplesPerPixel" ) ;
EXPR	274:1	274:1	4	CmpShortField ( TIFFTAG_SAMPLESPERPIXEL , "SamplesPerPixel" )
FUNCTION_CALL	274:1	274:57	5	CmpShortField ( TIFFTAG_SAMPLESPERPIXEL , "SamplesPerPixel" )
CALLEE	274:1	274:1	6	CmpShortField
LEAF_NODE	274:1	274:1	7	CmpShortField
LEAF_NODE	274:14	274:14	6	(
ARGUMENT	274:15	274:15	6	TIFFTAG_SAMPLESPERPIXEL
FIELD	274:15	274:15	7	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	274:15	274:15	8	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	274:38	274:38	6	,
ARGUMENT	274:40	274:40	6	"SamplesPerPixel"
FIELD	274:40	274:40	7	"SamplesPerPixel"
LEAF_NODE	274:40	274:40	8	"SamplesPerPixel"
LEAF_NODE	274:57	274:57	6	)
LEAF_NODE	274:58	274:58	4	;
EXPR_STATEMENT	275:1	275:56	3	CmpShortField ( TIFFTAG_MINSAMPLEVALUE , "MinSampleValue" ) ;
EXPR	275:1	275:1	4	CmpShortField ( TIFFTAG_MINSAMPLEVALUE , "MinSampleValue" )
FUNCTION_CALL	275:1	275:55	5	CmpShortField ( TIFFTAG_MINSAMPLEVALUE , "MinSampleValue" )
CALLEE	275:1	275:1	6	CmpShortField
LEAF_NODE	275:1	275:1	7	CmpShortField
LEAF_NODE	275:14	275:14	6	(
ARGUMENT	275:15	275:15	6	TIFFTAG_MINSAMPLEVALUE
FIELD	275:15	275:15	7	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	275:15	275:15	8	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	275:37	275:37	6	,
ARGUMENT	275:39	275:39	6	"MinSampleValue"
FIELD	275:39	275:39	7	"MinSampleValue"
LEAF_NODE	275:39	275:39	8	"MinSampleValue"
LEAF_NODE	275:55	275:55	6	)
LEAF_NODE	275:56	275:56	4	;
EXPR_STATEMENT	276:1	276:56	3	CmpShortField ( TIFFTAG_MAXSAMPLEVALUE , "MaxSampleValue" ) ;
EXPR	276:1	276:1	4	CmpShortField ( TIFFTAG_MAXSAMPLEVALUE , "MaxSampleValue" )
FUNCTION_CALL	276:1	276:55	5	CmpShortField ( TIFFTAG_MAXSAMPLEVALUE , "MaxSampleValue" )
CALLEE	276:1	276:1	6	CmpShortField
LEAF_NODE	276:1	276:1	7	CmpShortField
LEAF_NODE	276:14	276:14	6	(
ARGUMENT	276:15	276:15	6	TIFFTAG_MAXSAMPLEVALUE
FIELD	276:15	276:15	7	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	276:15	276:15	8	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	276:37	276:37	6	,
ARGUMENT	276:39	276:39	6	"MaxSampleValue"
FIELD	276:39	276:39	7	"MaxSampleValue"
LEAF_NODE	276:39	276:39	8	"MaxSampleValue"
LEAF_NODE	276:55	276:55	6	)
LEAF_NODE	276:56	276:56	4	;
EXPR_STATEMENT	277:1	277:52	3	CmpShortField ( TIFFTAG_SAMPLEFORMAT , "SampleFormat" ) ;
EXPR	277:1	277:1	4	CmpShortField ( TIFFTAG_SAMPLEFORMAT , "SampleFormat" )
FUNCTION_CALL	277:1	277:51	5	CmpShortField ( TIFFTAG_SAMPLEFORMAT , "SampleFormat" )
CALLEE	277:1	277:1	6	CmpShortField
LEAF_NODE	277:1	277:1	7	CmpShortField
LEAF_NODE	277:14	277:14	6	(
ARGUMENT	277:15	277:15	6	TIFFTAG_SAMPLEFORMAT
FIELD	277:15	277:15	7	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	277:15	277:15	8	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	277:35	277:35	6	,
ARGUMENT	277:37	277:37	6	"SampleFormat"
FIELD	277:37	277:37	7	"SampleFormat"
LEAF_NODE	277:37	277:37	8	"SampleFormat"
LEAF_NODE	277:51	277:51	6	)
LEAF_NODE	277:52	277:52	4	;
EXPR_STATEMENT	278:1	278:50	3	CmpFloatField ( TIFFTAG_XRESOLUTION , "XResolution" ) ;
EXPR	278:1	278:1	4	CmpFloatField ( TIFFTAG_XRESOLUTION , "XResolution" )
FUNCTION_CALL	278:1	278:49	5	CmpFloatField ( TIFFTAG_XRESOLUTION , "XResolution" )
CALLEE	278:1	278:1	6	CmpFloatField
LEAF_NODE	278:1	278:1	7	CmpFloatField
LEAF_NODE	278:14	278:14	6	(
ARGUMENT	278:15	278:15	6	TIFFTAG_XRESOLUTION
FIELD	278:15	278:15	7	TIFFTAG_XRESOLUTION
LEAF_NODE	278:15	278:15	8	TIFFTAG_XRESOLUTION
LEAF_NODE	278:34	278:34	6	,
ARGUMENT	278:36	278:36	6	"XResolution"
FIELD	278:36	278:36	7	"XResolution"
LEAF_NODE	278:36	278:36	8	"XResolution"
LEAF_NODE	278:49	278:49	6	)
LEAF_NODE	278:50	278:50	4	;
EXPR_STATEMENT	279:1	279:50	3	CmpFloatField ( TIFFTAG_YRESOLUTION , "YResolution" ) ;
EXPR	279:1	279:1	4	CmpFloatField ( TIFFTAG_YRESOLUTION , "YResolution" )
FUNCTION_CALL	279:1	279:49	5	CmpFloatField ( TIFFTAG_YRESOLUTION , "YResolution" )
CALLEE	279:1	279:1	6	CmpFloatField
LEAF_NODE	279:1	279:1	7	CmpFloatField
LEAF_NODE	279:14	279:14	6	(
ARGUMENT	279:15	279:15	6	TIFFTAG_YRESOLUTION
FIELD	279:15	279:15	7	TIFFTAG_YRESOLUTION
LEAF_NODE	279:15	279:15	8	TIFFTAG_YRESOLUTION
LEAF_NODE	279:34	279:34	6	,
ARGUMENT	279:36	279:36	6	"YResolution"
FIELD	279:36	279:36	7	"YResolution"
LEAF_NODE	279:36	279:36	8	"YResolution"
LEAF_NODE	279:49	279:49	6	)
LEAF_NODE	279:50	279:50	4	;
SELECTION	280:1	284:1	3	
KEYWORD	280:1	280:1	4	if
LEAF_NODE	280:1	280:1	5	if
LEAF_NODE	280:3	280:3	4	(
CONDITION	280:5	280:5	4	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 ) && compression1 == COMPRESSION_CCITTFAX3 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX3
EXPR	280:5	280:5	5	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 ) && compression1 == COMPRESSION_CCITTFAX3 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX3
AND	280:5	281:2	6	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 ) && compression1 == COMPRESSION_CCITTFAX3 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX3
EXPR	280:5	280:5	7	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 )
FUNCTION_CALL	280:5	280:58	8	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 )
CALLEE	280:5	280:5	9	TIFFGetField
LEAF_NODE	280:5	280:5	10	TIFFGetField
LEAF_NODE	280:17	280:17	9	(
ARGUMENT	280:18	280:18	9	tif1
FIELD	280:18	280:18	10	tif1
LEAF_NODE	280:18	280:18	11	tif1
LEAF_NODE	280:22	280:22	9	,
ARGUMENT	280:24	280:24	9	TIFFTAG_COMPRESSION
FIELD	280:24	280:24	10	TIFFTAG_COMPRESSION
LEAF_NODE	280:24	280:24	11	TIFFTAG_COMPRESSION
LEAF_NODE	280:43	280:43	9	,
ARGUMENT	280:45	280:45	9	& compression1
UNARY_EXPR	280:45	280:46	10	& compression1
UNARY_OPERATOR	280:45	280:45	11	&
LEAF_NODE	280:45	280:45	12	&
FIELD	280:46	280:46	11	compression1
LEAF_NODE	280:46	280:46	12	compression1
LEAF_NODE	280:58	280:58	9	)
LEAF_NODE	280:60	280:60	7	&&
EXPR	281:2	281:2	7	compression1 == COMPRESSION_CCITTFAX3 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX3
AND	281:2	282:2	8	compression1 == COMPRESSION_CCITTFAX3 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX3
EXPR	281:2	281:18	9	compression1 == COMPRESSION_CCITTFAX3
FIELD	281:2	281:2	10	compression1
LEAF_NODE	281:2	281:2	11	compression1
EQ_OPERATOR	281:15	281:15	10	==
LEAF_NODE	281:15	281:15	11	==
FIELD	281:18	281:18	10	COMPRESSION_CCITTFAX3
LEAF_NODE	281:18	281:18	11	COMPRESSION_CCITTFAX3
LEAF_NODE	281:40	281:40	9	&&
EXPR	282:2	282:2	9	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX3
AND	282:2	283:2	10	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX3
EXPR	282:2	282:2	11	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 )
FUNCTION_CALL	282:2	282:55	12	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 )
CALLEE	282:2	282:2	13	TIFFGetField
LEAF_NODE	282:2	282:2	14	TIFFGetField
LEAF_NODE	282:14	282:14	13	(
ARGUMENT	282:15	282:15	13	tif2
FIELD	282:15	282:15	14	tif2
LEAF_NODE	282:15	282:15	15	tif2
LEAF_NODE	282:19	282:19	13	,
ARGUMENT	282:21	282:21	13	TIFFTAG_COMPRESSION
FIELD	282:21	282:21	14	TIFFTAG_COMPRESSION
LEAF_NODE	282:21	282:21	15	TIFFTAG_COMPRESSION
LEAF_NODE	282:40	282:40	13	,
ARGUMENT	282:42	282:42	13	& compression2
UNARY_EXPR	282:42	282:43	14	& compression2
UNARY_OPERATOR	282:42	282:42	15	&
LEAF_NODE	282:42	282:42	16	&
FIELD	282:43	282:43	15	compression2
LEAF_NODE	282:43	282:43	16	compression2
LEAF_NODE	282:55	282:55	13	)
LEAF_NODE	282:57	282:57	11	&&
EXPR	283:2	283:18	11	compression2 == COMPRESSION_CCITTFAX3
FIELD	283:2	283:2	12	compression2
LEAF_NODE	283:2	283:2	13	compression2
EQ_OPERATOR	283:15	283:15	12	==
LEAF_NODE	283:15	283:15	13	==
FIELD	283:18	283:18	12	COMPRESSION_CCITTFAX3
LEAF_NODE	283:18	283:18	13	COMPRESSION_CCITTFAX3
LEAF_NODE	283:40	283:40	4	)
STATEMENTS	284:1	286:1	4	
LEAF_NODE	284:1	284:1	5	{
STATEMENTS	285:2	285:2	5	
EXPR_STATEMENT	285:2	285:54	6	CmpLongField ( TIFFTAG_GROUP3OPTIONS , "Group3Options" ) ;
EXPR	285:2	285:2	7	CmpLongField ( TIFFTAG_GROUP3OPTIONS , "Group3Options" )
FUNCTION_CALL	285:2	285:53	8	CmpLongField ( TIFFTAG_GROUP3OPTIONS , "Group3Options" )
CALLEE	285:2	285:2	9	CmpLongField
LEAF_NODE	285:2	285:2	10	CmpLongField
LEAF_NODE	285:14	285:14	9	(
ARGUMENT	285:15	285:15	9	TIFFTAG_GROUP3OPTIONS
FIELD	285:15	285:15	10	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	285:15	285:15	11	TIFFTAG_GROUP3OPTIONS
LEAF_NODE	285:36	285:36	9	,
ARGUMENT	285:38	285:38	9	"Group3Options"
FIELD	285:38	285:38	10	"Group3Options"
LEAF_NODE	285:38	285:38	11	"Group3Options"
LEAF_NODE	285:53	285:53	9	)
LEAF_NODE	285:54	285:54	7	;
LEAF_NODE	286:1	286:1	5	}
SELECTION	287:1	291:1	3	
KEYWORD	287:1	287:1	4	if
LEAF_NODE	287:1	287:1	5	if
LEAF_NODE	287:3	287:3	4	(
CONDITION	287:5	287:5	4	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 ) && compression1 == COMPRESSION_CCITTFAX4 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX4
EXPR	287:5	287:5	5	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 ) && compression1 == COMPRESSION_CCITTFAX4 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX4
AND	287:5	288:2	6	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 ) && compression1 == COMPRESSION_CCITTFAX4 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX4
EXPR	287:5	287:5	7	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 )
FUNCTION_CALL	287:5	287:58	8	TIFFGetField ( tif1 , TIFFTAG_COMPRESSION , & compression1 )
CALLEE	287:5	287:5	9	TIFFGetField
LEAF_NODE	287:5	287:5	10	TIFFGetField
LEAF_NODE	287:17	287:17	9	(
ARGUMENT	287:18	287:18	9	tif1
FIELD	287:18	287:18	10	tif1
LEAF_NODE	287:18	287:18	11	tif1
LEAF_NODE	287:22	287:22	9	,
ARGUMENT	287:24	287:24	9	TIFFTAG_COMPRESSION
FIELD	287:24	287:24	10	TIFFTAG_COMPRESSION
LEAF_NODE	287:24	287:24	11	TIFFTAG_COMPRESSION
LEAF_NODE	287:43	287:43	9	,
ARGUMENT	287:45	287:45	9	& compression1
UNARY_EXPR	287:45	287:46	10	& compression1
UNARY_OPERATOR	287:45	287:45	11	&
LEAF_NODE	287:45	287:45	12	&
FIELD	287:46	287:46	11	compression1
LEAF_NODE	287:46	287:46	12	compression1
LEAF_NODE	287:58	287:58	9	)
LEAF_NODE	287:60	287:60	7	&&
EXPR	288:2	288:2	7	compression1 == COMPRESSION_CCITTFAX4 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX4
AND	288:2	289:2	8	compression1 == COMPRESSION_CCITTFAX4 && TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX4
EXPR	288:2	288:18	9	compression1 == COMPRESSION_CCITTFAX4
FIELD	288:2	288:2	10	compression1
LEAF_NODE	288:2	288:2	11	compression1
EQ_OPERATOR	288:15	288:15	10	==
LEAF_NODE	288:15	288:15	11	==
FIELD	288:18	288:18	10	COMPRESSION_CCITTFAX4
LEAF_NODE	288:18	288:18	11	COMPRESSION_CCITTFAX4
LEAF_NODE	288:40	288:40	9	&&
EXPR	289:2	289:2	9	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX4
AND	289:2	290:2	10	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 ) && compression2 == COMPRESSION_CCITTFAX4
EXPR	289:2	289:2	11	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 )
FUNCTION_CALL	289:2	289:55	12	TIFFGetField ( tif2 , TIFFTAG_COMPRESSION , & compression2 )
CALLEE	289:2	289:2	13	TIFFGetField
LEAF_NODE	289:2	289:2	14	TIFFGetField
LEAF_NODE	289:14	289:14	13	(
ARGUMENT	289:15	289:15	13	tif2
FIELD	289:15	289:15	14	tif2
LEAF_NODE	289:15	289:15	15	tif2
LEAF_NODE	289:19	289:19	13	,
ARGUMENT	289:21	289:21	13	TIFFTAG_COMPRESSION
FIELD	289:21	289:21	14	TIFFTAG_COMPRESSION
LEAF_NODE	289:21	289:21	15	TIFFTAG_COMPRESSION
LEAF_NODE	289:40	289:40	13	,
ARGUMENT	289:42	289:42	13	& compression2
UNARY_EXPR	289:42	289:43	14	& compression2
UNARY_OPERATOR	289:42	289:42	15	&
LEAF_NODE	289:42	289:42	16	&
FIELD	289:43	289:43	15	compression2
LEAF_NODE	289:43	289:43	16	compression2
LEAF_NODE	289:55	289:55	13	)
LEAF_NODE	289:57	289:57	11	&&
EXPR	290:2	290:18	11	compression2 == COMPRESSION_CCITTFAX4
FIELD	290:2	290:2	12	compression2
LEAF_NODE	290:2	290:2	13	compression2
EQ_OPERATOR	290:15	290:15	12	==
LEAF_NODE	290:15	290:15	13	==
FIELD	290:18	290:18	12	COMPRESSION_CCITTFAX4
LEAF_NODE	290:18	290:18	13	COMPRESSION_CCITTFAX4
LEAF_NODE	290:40	290:40	4	)
STATEMENTS	291:1	293:1	4	
LEAF_NODE	291:1	291:1	5	{
STATEMENTS	292:2	292:2	5	
EXPR_STATEMENT	292:2	292:54	6	CmpLongField ( TIFFTAG_GROUP4OPTIONS , "Group4Options" ) ;
EXPR	292:2	292:2	7	CmpLongField ( TIFFTAG_GROUP4OPTIONS , "Group4Options" )
FUNCTION_CALL	292:2	292:53	8	CmpLongField ( TIFFTAG_GROUP4OPTIONS , "Group4Options" )
CALLEE	292:2	292:2	9	CmpLongField
LEAF_NODE	292:2	292:2	10	CmpLongField
LEAF_NODE	292:14	292:14	9	(
ARGUMENT	292:15	292:15	9	TIFFTAG_GROUP4OPTIONS
FIELD	292:15	292:15	10	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	292:15	292:15	11	TIFFTAG_GROUP4OPTIONS
LEAF_NODE	292:36	292:36	9	,
ARGUMENT	292:38	292:38	9	"Group4Options"
FIELD	292:38	292:38	10	"Group4Options"
LEAF_NODE	292:38	292:38	11	"Group4Options"
LEAF_NODE	292:53	292:53	9	)
LEAF_NODE	292:54	292:54	7	;
LEAF_NODE	293:1	293:1	5	}
EXPR_STATEMENT	294:1	294:56	3	CmpShortField ( TIFFTAG_RESOLUTIONUNIT , "ResolutionUnit" ) ;
EXPR	294:1	294:1	4	CmpShortField ( TIFFTAG_RESOLUTIONUNIT , "ResolutionUnit" )
FUNCTION_CALL	294:1	294:55	5	CmpShortField ( TIFFTAG_RESOLUTIONUNIT , "ResolutionUnit" )
CALLEE	294:1	294:1	6	CmpShortField
LEAF_NODE	294:1	294:1	7	CmpShortField
LEAF_NODE	294:14	294:14	6	(
ARGUMENT	294:15	294:15	6	TIFFTAG_RESOLUTIONUNIT
FIELD	294:15	294:15	7	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	294:15	294:15	8	TIFFTAG_RESOLUTIONUNIT
LEAF_NODE	294:37	294:37	6	,
ARGUMENT	294:39	294:39	6	"ResolutionUnit"
FIELD	294:39	294:39	7	"ResolutionUnit"
LEAF_NODE	294:39	294:39	8	"ResolutionUnit"
LEAF_NODE	294:55	294:55	6	)
LEAF_NODE	294:56	294:56	4	;
EXPR_STATEMENT	295:1	295:59	3	CmpShortField ( TIFFTAG_PLANARCONFIG , "PlanarConfiguration" ) ;
EXPR	295:1	295:1	4	CmpShortField ( TIFFTAG_PLANARCONFIG , "PlanarConfiguration" )
FUNCTION_CALL	295:1	295:58	5	CmpShortField ( TIFFTAG_PLANARCONFIG , "PlanarConfiguration" )
CALLEE	295:1	295:1	6	CmpShortField
LEAF_NODE	295:1	295:1	7	CmpShortField
LEAF_NODE	295:14	295:14	6	(
ARGUMENT	295:15	295:15	6	TIFFTAG_PLANARCONFIG
FIELD	295:15	295:15	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	295:15	295:15	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	295:35	295:35	6	,
ARGUMENT	295:37	295:37	6	"PlanarConfiguration"
FIELD	295:37	295:37	7	"PlanarConfiguration"
LEAF_NODE	295:37	295:37	8	"PlanarConfiguration"
LEAF_NODE	295:58	295:58	6	)
LEAF_NODE	295:59	295:59	4	;
EXPR_STATEMENT	296:1	296:51	3	CmpLongField ( TIFFTAG_ROWSPERSTRIP , "RowsPerStrip" ) ;
EXPR	296:1	296:1	4	CmpLongField ( TIFFTAG_ROWSPERSTRIP , "RowsPerStrip" )
FUNCTION_CALL	296:1	296:50	5	CmpLongField ( TIFFTAG_ROWSPERSTRIP , "RowsPerStrip" )
CALLEE	296:1	296:1	6	CmpLongField
LEAF_NODE	296:1	296:1	7	CmpLongField
LEAF_NODE	296:13	296:13	6	(
ARGUMENT	296:14	296:14	6	TIFFTAG_ROWSPERSTRIP
FIELD	296:14	296:14	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	296:14	296:14	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	296:34	296:34	6	,
ARGUMENT	296:36	296:36	6	"RowsPerStrip"
FIELD	296:36	296:36	7	"RowsPerStrip"
LEAF_NODE	296:36	296:36	8	"RowsPerStrip"
LEAF_NODE	296:50	296:50	6	)
LEAF_NODE	296:51	296:51	4	;
EXPR_STATEMENT	297:1	297:46	3	CmpFloatField ( TIFFTAG_XPOSITION , "XPosition" ) ;
EXPR	297:1	297:1	4	CmpFloatField ( TIFFTAG_XPOSITION , "XPosition" )
FUNCTION_CALL	297:1	297:45	5	CmpFloatField ( TIFFTAG_XPOSITION , "XPosition" )
CALLEE	297:1	297:1	6	CmpFloatField
LEAF_NODE	297:1	297:1	7	CmpFloatField
LEAF_NODE	297:14	297:14	6	(
ARGUMENT	297:15	297:15	6	TIFFTAG_XPOSITION
FIELD	297:15	297:15	7	TIFFTAG_XPOSITION
LEAF_NODE	297:15	297:15	8	TIFFTAG_XPOSITION
LEAF_NODE	297:32	297:32	6	,
ARGUMENT	297:34	297:34	6	"XPosition"
FIELD	297:34	297:34	7	"XPosition"
LEAF_NODE	297:34	297:34	8	"XPosition"
LEAF_NODE	297:45	297:45	6	)
LEAF_NODE	297:46	297:46	4	;
EXPR_STATEMENT	298:1	298:46	3	CmpFloatField ( TIFFTAG_YPOSITION , "YPosition" ) ;
EXPR	298:1	298:1	4	CmpFloatField ( TIFFTAG_YPOSITION , "YPosition" )
FUNCTION_CALL	298:1	298:45	5	CmpFloatField ( TIFFTAG_YPOSITION , "YPosition" )
CALLEE	298:1	298:1	6	CmpFloatField
LEAF_NODE	298:1	298:1	7	CmpFloatField
LEAF_NODE	298:14	298:14	6	(
ARGUMENT	298:15	298:15	6	TIFFTAG_YPOSITION
FIELD	298:15	298:15	7	TIFFTAG_YPOSITION
LEAF_NODE	298:15	298:15	8	TIFFTAG_YPOSITION
LEAF_NODE	298:32	298:32	6	,
ARGUMENT	298:34	298:34	6	"YPosition"
FIELD	298:34	298:34	7	"YPosition"
LEAF_NODE	298:34	298:34	8	"YPosition"
LEAF_NODE	298:45	298:45	6	)
LEAF_NODE	298:46	298:46	4	;
EXPR_STATEMENT	299:1	299:60	3	CmpShortField ( TIFFTAG_GRAYRESPONSEUNIT , "GrayResponseUnit" ) ;
EXPR	299:1	299:1	4	CmpShortField ( TIFFTAG_GRAYRESPONSEUNIT , "GrayResponseUnit" )
FUNCTION_CALL	299:1	299:59	5	CmpShortField ( TIFFTAG_GRAYRESPONSEUNIT , "GrayResponseUnit" )
CALLEE	299:1	299:1	6	CmpShortField
LEAF_NODE	299:1	299:1	7	CmpShortField
LEAF_NODE	299:14	299:14	6	(
ARGUMENT	299:15	299:15	6	TIFFTAG_GRAYRESPONSEUNIT
FIELD	299:15	299:15	7	TIFFTAG_GRAYRESPONSEUNIT
LEAF_NODE	299:15	299:15	8	TIFFTAG_GRAYRESPONSEUNIT
LEAF_NODE	299:39	299:39	6	,
ARGUMENT	299:41	299:41	6	"GrayResponseUnit"
FIELD	299:41	299:41	7	"GrayResponseUnit"
LEAF_NODE	299:41	299:41	8	"GrayResponseUnit"
LEAF_NODE	299:59	299:59	6	)
LEAF_NODE	299:60	299:60	4	;
EXPR_STATEMENT	300:1	300:62	3	CmpShortField ( TIFFTAG_COLORRESPONSEUNIT , "ColorResponseUnit" ) ;
EXPR	300:1	300:1	4	CmpShortField ( TIFFTAG_COLORRESPONSEUNIT , "ColorResponseUnit" )
FUNCTION_CALL	300:1	300:61	5	CmpShortField ( TIFFTAG_COLORRESPONSEUNIT , "ColorResponseUnit" )
CALLEE	300:1	300:1	6	CmpShortField
LEAF_NODE	300:1	300:1	7	CmpShortField
LEAF_NODE	300:14	300:14	6	(
ARGUMENT	300:15	300:15	6	TIFFTAG_COLORRESPONSEUNIT
FIELD	300:15	300:15	7	TIFFTAG_COLORRESPONSEUNIT
LEAF_NODE	300:15	300:15	8	TIFFTAG_COLORRESPONSEUNIT
LEAF_NODE	300:40	300:40	6	,
ARGUMENT	300:42	300:42	6	"ColorResponseUnit"
FIELD	300:42	300:42	7	"ColorResponseUnit"
LEAF_NODE	300:42	300:42	8	"ColorResponseUnit"
LEAF_NODE	300:61	300:61	6	)
LEAF_NODE	300:62	300:62	4	;
LEAF_NODE	302:1	302:1	3	{
STATEMENTS	302:3	303:3	3	
SIMPLE_DECL	302:3	302:20	4	uint16 * graycurve ;
VAR_DECL	302:3	302:11	5	uint16 * graycurve
TYPE	302:3	302:10	6	uint16 *
TYPE_NAME	302:3	302:3	7	uint16
LEAF_NODE	302:3	302:3	8	uint16
POINTER	302:10	302:10	7	*
LEAF_NODE	302:10	302:10	8	*
NAME	302:11	302:11	6	graycurve
LEAF_NODE	302:11	302:11	7	graycurve
LEAF_NODE	302:20	302:20	5	;
EXPR_STATEMENT	303:3	303:49	4	CmpField ( TIFFTAG_GRAYRESPONSECURVE , graycurve ) ;
EXPR	303:3	303:3	5	CmpField ( TIFFTAG_GRAYRESPONSECURVE , graycurve )
FUNCTION_CALL	303:3	303:48	6	CmpField ( TIFFTAG_GRAYRESPONSECURVE , graycurve )
CALLEE	303:3	303:3	7	CmpField
LEAF_NODE	303:3	303:3	8	CmpField
LEAF_NODE	303:11	303:11	7	(
ARGUMENT	303:12	303:12	7	TIFFTAG_GRAYRESPONSECURVE
FIELD	303:12	303:12	8	TIFFTAG_GRAYRESPONSECURVE
LEAF_NODE	303:12	303:12	9	TIFFTAG_GRAYRESPONSECURVE
LEAF_NODE	303:37	303:37	7	,
ARGUMENT	303:39	303:39	7	graycurve
FIELD	303:39	303:39	8	graycurve
LEAF_NODE	303:39	303:39	9	graycurve
LEAF_NODE	303:48	303:48	7	)
LEAF_NODE	303:49	303:49	5	;
LEAF_NODE	304:1	304:1	3	}
LEAF_NODE	305:1	305:1	3	{
STATEMENTS	305:3	306:3	3	
SIMPLE_DECL	305:3	305:29	4	uint16 * red , uint16 * green , uint16 * blue ;
INIT_DECL_LIST	305:3	305:3	5	uint16 * red , uint16 * green , uint16 * blue
VAR_DECL	305:3	305:11	6	uint16 * red
TYPE	305:3	305:10	7	uint16 *
TYPE_NAME	305:3	305:3	8	uint16
LEAF_NODE	305:3	305:3	9	uint16
POINTER	305:10	305:10	8	*
LEAF_NODE	305:10	305:10	9	*
NAME	305:11	305:11	7	red
LEAF_NODE	305:11	305:11	8	red
LEAF_NODE	305:14	305:14	6	,
INIT_DECL_LIST	305:3	305:3	6	uint16 * green , uint16 * blue
VAR_DECL	305:3	305:17	7	uint16 * green
TYPE	305:3	305:16	8	uint16 *
TYPE_NAME	305:3	305:3	9	uint16
LEAF_NODE	305:3	305:3	10	uint16
POINTER	305:16	305:16	9	*
LEAF_NODE	305:16	305:16	10	*
NAME	305:17	305:17	8	green
LEAF_NODE	305:17	305:17	9	green
LEAF_NODE	305:22	305:22	7	,
VAR_DECL	305:3	305:25	7	uint16 * blue
TYPE	305:3	305:24	8	uint16 *
TYPE_NAME	305:3	305:3	9	uint16
LEAF_NODE	305:3	305:3	10	uint16
POINTER	305:24	305:24	9	*
LEAF_NODE	305:24	305:24	10	*
NAME	305:25	305:25	8	blue
LEAF_NODE	305:25	305:25	9	blue
LEAF_NODE	305:29	305:29	5	;
EXPR_STATEMENT	306:3	306:58	4	CmpField3 ( TIFFTAG_COLORRESPONSECURVE , red , green , blue ) ;
EXPR	306:3	306:3	5	CmpField3 ( TIFFTAG_COLORRESPONSECURVE , red , green , blue )
FUNCTION_CALL	306:3	306:57	6	CmpField3 ( TIFFTAG_COLORRESPONSECURVE , red , green , blue )
CALLEE	306:3	306:3	7	CmpField3
LEAF_NODE	306:3	306:3	8	CmpField3
LEAF_NODE	306:12	306:12	7	(
ARGUMENT	306:13	306:13	7	TIFFTAG_COLORRESPONSECURVE
FIELD	306:13	306:13	8	TIFFTAG_COLORRESPONSECURVE
LEAF_NODE	306:13	306:13	9	TIFFTAG_COLORRESPONSECURVE
LEAF_NODE	306:39	306:39	7	,
ARGUMENT	306:41	306:41	7	red
FIELD	306:41	306:41	8	red
LEAF_NODE	306:41	306:41	9	red
LEAF_NODE	306:44	306:44	7	,
ARGUMENT	306:46	306:46	7	green
FIELD	306:46	306:46	8	green
LEAF_NODE	306:46	306:46	9	green
LEAF_NODE	306:51	306:51	7	,
ARGUMENT	306:53	306:53	7	blue
FIELD	306:53	306:53	8	blue
LEAF_NODE	306:53	306:53	9	blue
LEAF_NODE	306:57	306:57	7	)
LEAF_NODE	306:58	306:58	5	;
LEAF_NODE	307:1	307:1	3	}
LEAF_NODE	308:1	308:1	3	{
STATEMENTS	308:3	309:3	3	
SIMPLE_DECL	308:3	308:29	4	uint16 * red , uint16 * green , uint16 * blue ;
INIT_DECL_LIST	308:3	308:3	5	uint16 * red , uint16 * green , uint16 * blue
VAR_DECL	308:3	308:11	6	uint16 * red
TYPE	308:3	308:10	7	uint16 *
TYPE_NAME	308:3	308:3	8	uint16
LEAF_NODE	308:3	308:3	9	uint16
POINTER	308:10	308:10	8	*
LEAF_NODE	308:10	308:10	9	*
NAME	308:11	308:11	7	red
LEAF_NODE	308:11	308:11	8	red
LEAF_NODE	308:14	308:14	6	,
INIT_DECL_LIST	308:3	308:3	6	uint16 * green , uint16 * blue
VAR_DECL	308:3	308:17	7	uint16 * green
TYPE	308:3	308:16	8	uint16 *
TYPE_NAME	308:3	308:3	9	uint16
LEAF_NODE	308:3	308:3	10	uint16
POINTER	308:16	308:16	9	*
LEAF_NODE	308:16	308:16	10	*
NAME	308:17	308:17	8	green
LEAF_NODE	308:17	308:17	9	green
LEAF_NODE	308:22	308:22	7	,
VAR_DECL	308:3	308:25	7	uint16 * blue
TYPE	308:3	308:24	8	uint16 *
TYPE_NAME	308:3	308:3	9	uint16
LEAF_NODE	308:3	308:3	10	uint16
POINTER	308:24	308:24	9	*
LEAF_NODE	308:24	308:24	10	*
NAME	308:25	308:25	8	blue
LEAF_NODE	308:25	308:25	9	blue
LEAF_NODE	308:29	308:29	5	;
EXPR_STATEMENT	309:3	309:48	4	CmpField3 ( TIFFTAG_COLORMAP , red , green , blue ) ;
EXPR	309:3	309:3	5	CmpField3 ( TIFFTAG_COLORMAP , red , green , blue )
FUNCTION_CALL	309:3	309:47	6	CmpField3 ( TIFFTAG_COLORMAP , red , green , blue )
CALLEE	309:3	309:3	7	CmpField3
LEAF_NODE	309:3	309:3	8	CmpField3
LEAF_NODE	309:12	309:12	7	(
ARGUMENT	309:13	309:13	7	TIFFTAG_COLORMAP
FIELD	309:13	309:13	8	TIFFTAG_COLORMAP
LEAF_NODE	309:13	309:13	9	TIFFTAG_COLORMAP
LEAF_NODE	309:29	309:29	7	,
ARGUMENT	309:31	309:31	7	red
FIELD	309:31	309:31	8	red
LEAF_NODE	309:31	309:31	9	red
LEAF_NODE	309:34	309:34	7	,
ARGUMENT	309:36	309:36	7	green
FIELD	309:36	309:36	8	green
LEAF_NODE	309:36	309:36	9	green
LEAF_NODE	309:41	309:41	7	,
ARGUMENT	309:43	309:43	7	blue
FIELD	309:43	309:43	8	blue
LEAF_NODE	309:43	309:43	9	blue
LEAF_NODE	309:47	309:47	7	)
LEAF_NODE	309:48	309:48	5	;
LEAF_NODE	310:1	310:1	3	}
EXPR_STATEMENT	312:1	312:49	3	CmpShortField2 ( TIFFTAG_PAGENUMBER , "PageNumber" ) ;
EXPR	312:1	312:1	4	CmpShortField2 ( TIFFTAG_PAGENUMBER , "PageNumber" )
FUNCTION_CALL	312:1	312:48	5	CmpShortField2 ( TIFFTAG_PAGENUMBER , "PageNumber" )
CALLEE	312:1	312:1	6	CmpShortField2
LEAF_NODE	312:1	312:1	7	CmpShortField2
LEAF_NODE	312:15	312:15	6	(
ARGUMENT	312:16	312:16	6	TIFFTAG_PAGENUMBER
FIELD	312:16	312:16	7	TIFFTAG_PAGENUMBER
LEAF_NODE	312:16	312:16	8	TIFFTAG_PAGENUMBER
LEAF_NODE	312:34	312:34	6	,
ARGUMENT	312:36	312:36	6	"PageNumber"
FIELD	312:36	312:36	7	"PageNumber"
LEAF_NODE	312:36	312:36	8	"PageNumber"
LEAF_NODE	312:48	312:48	6	)
LEAF_NODE	312:49	312:49	4	;
EXPR_STATEMENT	313:1	313:42	3	CmpStringField ( TIFFTAG_ARTIST , "Artist" ) ;
EXPR	313:1	313:1	4	CmpStringField ( TIFFTAG_ARTIST , "Artist" )
FUNCTION_CALL	313:1	313:41	5	CmpStringField ( TIFFTAG_ARTIST , "Artist" )
CALLEE	313:1	313:1	6	CmpStringField
LEAF_NODE	313:1	313:1	7	CmpStringField
LEAF_NODE	313:15	313:15	6	(
ARGUMENT	313:16	313:16	6	TIFFTAG_ARTIST
FIELD	313:16	313:16	7	TIFFTAG_ARTIST
LEAF_NODE	313:16	313:16	8	TIFFTAG_ARTIST
LEAF_NODE	313:30	313:30	6	,
ARGUMENT	313:33	313:33	6	"Artist"
FIELD	313:33	313:33	7	"Artist"
LEAF_NODE	313:33	313:33	8	"Artist"
LEAF_NODE	313:41	313:41	6	)
LEAF_NODE	313:42	313:42	4	;
EXPR_STATEMENT	314:1	314:60	3	CmpStringField ( TIFFTAG_IMAGEDESCRIPTION , "ImageDescription" ) ;
EXPR	314:1	314:1	4	CmpStringField ( TIFFTAG_IMAGEDESCRIPTION , "ImageDescription" )
FUNCTION_CALL	314:1	314:59	5	CmpStringField ( TIFFTAG_IMAGEDESCRIPTION , "ImageDescription" )
CALLEE	314:1	314:1	6	CmpStringField
LEAF_NODE	314:1	314:1	7	CmpStringField
LEAF_NODE	314:15	314:15	6	(
ARGUMENT	314:16	314:16	6	TIFFTAG_IMAGEDESCRIPTION
FIELD	314:16	314:16	7	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	314:16	314:16	8	TIFFTAG_IMAGEDESCRIPTION
LEAF_NODE	314:40	314:40	6	,
ARGUMENT	314:41	314:41	6	"ImageDescription"
FIELD	314:41	314:41	7	"ImageDescription"
LEAF_NODE	314:41	314:41	8	"ImageDescription"
LEAF_NODE	314:59	314:59	6	)
LEAF_NODE	314:60	314:60	4	;
EXPR_STATEMENT	315:1	315:38	3	CmpStringField ( TIFFTAG_MAKE , "Make" ) ;
EXPR	315:1	315:1	4	CmpStringField ( TIFFTAG_MAKE , "Make" )
FUNCTION_CALL	315:1	315:37	5	CmpStringField ( TIFFTAG_MAKE , "Make" )
CALLEE	315:1	315:1	6	CmpStringField
LEAF_NODE	315:1	315:1	7	CmpStringField
LEAF_NODE	315:15	315:15	6	(
ARGUMENT	315:16	315:16	6	TIFFTAG_MAKE
FIELD	315:16	315:16	7	TIFFTAG_MAKE
LEAF_NODE	315:16	315:16	8	TIFFTAG_MAKE
LEAF_NODE	315:28	315:28	6	,
ARGUMENT	315:31	315:31	6	"Make"
FIELD	315:31	315:31	7	"Make"
LEAF_NODE	315:31	315:31	8	"Make"
LEAF_NODE	315:37	315:37	6	)
LEAF_NODE	315:38	315:38	4	;
EXPR_STATEMENT	316:1	316:40	3	CmpStringField ( TIFFTAG_MODEL , "Model" ) ;
EXPR	316:1	316:1	4	CmpStringField ( TIFFTAG_MODEL , "Model" )
FUNCTION_CALL	316:1	316:39	5	CmpStringField ( TIFFTAG_MODEL , "Model" )
CALLEE	316:1	316:1	6	CmpStringField
LEAF_NODE	316:1	316:1	7	CmpStringField
LEAF_NODE	316:15	316:15	6	(
ARGUMENT	316:16	316:16	6	TIFFTAG_MODEL
FIELD	316:16	316:16	7	TIFFTAG_MODEL
LEAF_NODE	316:16	316:16	8	TIFFTAG_MODEL
LEAF_NODE	316:29	316:29	6	,
ARGUMENT	316:32	316:32	6	"Model"
FIELD	316:32	316:32	7	"Model"
LEAF_NODE	316:32	316:32	8	"Model"
LEAF_NODE	316:39	316:39	6	)
LEAF_NODE	316:40	316:40	4	;
EXPR_STATEMENT	317:1	317:45	3	CmpStringField ( TIFFTAG_SOFTWARE , "Software" ) ;
EXPR	317:1	317:1	4	CmpStringField ( TIFFTAG_SOFTWARE , "Software" )
FUNCTION_CALL	317:1	317:44	5	CmpStringField ( TIFFTAG_SOFTWARE , "Software" )
CALLEE	317:1	317:1	6	CmpStringField
LEAF_NODE	317:1	317:1	7	CmpStringField
LEAF_NODE	317:15	317:15	6	(
ARGUMENT	317:16	317:16	6	TIFFTAG_SOFTWARE
FIELD	317:16	317:16	7	TIFFTAG_SOFTWARE
LEAF_NODE	317:16	317:16	8	TIFFTAG_SOFTWARE
LEAF_NODE	317:32	317:32	6	,
ARGUMENT	317:34	317:34	6	"Software"
FIELD	317:34	317:34	7	"Software"
LEAF_NODE	317:34	317:34	8	"Software"
LEAF_NODE	317:44	317:44	6	)
LEAF_NODE	317:45	317:45	4	;
EXPR_STATEMENT	318:1	318:45	3	CmpStringField ( TIFFTAG_DATETIME , "DateTime" ) ;
EXPR	318:1	318:1	4	CmpStringField ( TIFFTAG_DATETIME , "DateTime" )
FUNCTION_CALL	318:1	318:44	5	CmpStringField ( TIFFTAG_DATETIME , "DateTime" )
CALLEE	318:1	318:1	6	CmpStringField
LEAF_NODE	318:1	318:1	7	CmpStringField
LEAF_NODE	318:15	318:15	6	(
ARGUMENT	318:16	318:16	6	TIFFTAG_DATETIME
FIELD	318:16	318:16	7	TIFFTAG_DATETIME
LEAF_NODE	318:16	318:16	8	TIFFTAG_DATETIME
LEAF_NODE	318:32	318:32	6	,
ARGUMENT	318:34	318:34	6	"DateTime"
FIELD	318:34	318:34	7	"DateTime"
LEAF_NODE	318:34	318:34	8	"DateTime"
LEAF_NODE	318:44	318:44	6	)
LEAF_NODE	318:45	318:45	4	;
EXPR_STATEMENT	319:1	319:53	3	CmpStringField ( TIFFTAG_HOSTCOMPUTER , "HostComputer" ) ;
EXPR	319:1	319:1	4	CmpStringField ( TIFFTAG_HOSTCOMPUTER , "HostComputer" )
FUNCTION_CALL	319:1	319:52	5	CmpStringField ( TIFFTAG_HOSTCOMPUTER , "HostComputer" )
CALLEE	319:1	319:1	6	CmpStringField
LEAF_NODE	319:1	319:1	7	CmpStringField
LEAF_NODE	319:15	319:15	6	(
ARGUMENT	319:16	319:16	6	TIFFTAG_HOSTCOMPUTER
FIELD	319:16	319:16	7	TIFFTAG_HOSTCOMPUTER
LEAF_NODE	319:16	319:16	8	TIFFTAG_HOSTCOMPUTER
LEAF_NODE	319:36	319:36	6	,
ARGUMENT	319:38	319:38	6	"HostComputer"
FIELD	319:38	319:38	7	"HostComputer"
LEAF_NODE	319:38	319:38	8	"HostComputer"
LEAF_NODE	319:52	319:52	6	)
LEAF_NODE	319:53	319:53	4	;
EXPR_STATEMENT	320:1	320:45	3	CmpStringField ( TIFFTAG_PAGENAME , "PageName" ) ;
EXPR	320:1	320:1	4	CmpStringField ( TIFFTAG_PAGENAME , "PageName" )
FUNCTION_CALL	320:1	320:44	5	CmpStringField ( TIFFTAG_PAGENAME , "PageName" )
CALLEE	320:1	320:1	6	CmpStringField
LEAF_NODE	320:1	320:1	7	CmpStringField
LEAF_NODE	320:15	320:15	6	(
ARGUMENT	320:16	320:16	6	TIFFTAG_PAGENAME
FIELD	320:16	320:16	7	TIFFTAG_PAGENAME
LEAF_NODE	320:16	320:16	8	TIFFTAG_PAGENAME
LEAF_NODE	320:32	320:32	6	,
ARGUMENT	320:34	320:34	6	"PageName"
FIELD	320:34	320:34	7	"PageName"
LEAF_NODE	320:34	320:34	8	"PageName"
LEAF_NODE	320:44	320:44	6	)
LEAF_NODE	320:45	320:45	4	;
EXPR_STATEMENT	321:1	321:53	3	CmpStringField ( TIFFTAG_DOCUMENTNAME , "DocumentName" ) ;
EXPR	321:1	321:1	4	CmpStringField ( TIFFTAG_DOCUMENTNAME , "DocumentName" )
FUNCTION_CALL	321:1	321:52	5	CmpStringField ( TIFFTAG_DOCUMENTNAME , "DocumentName" )
CALLEE	321:1	321:1	6	CmpStringField
LEAF_NODE	321:1	321:1	7	CmpStringField
LEAF_NODE	321:15	321:15	6	(
ARGUMENT	321:16	321:16	6	TIFFTAG_DOCUMENTNAME
FIELD	321:16	321:16	7	TIFFTAG_DOCUMENTNAME
LEAF_NODE	321:16	321:16	8	TIFFTAG_DOCUMENTNAME
LEAF_NODE	321:36	321:36	6	,
ARGUMENT	321:38	321:38	6	"DocumentName"
FIELD	321:38	321:38	7	"DocumentName"
LEAF_NODE	321:38	321:38	8	"DocumentName"
LEAF_NODE	321:52	321:52	6	)
LEAF_NODE	321:53	321:53	4	;
EXPR_STATEMENT	322:1	322:45	3	CmpShortField ( TIFFTAG_MATTEING , "Matteing" ) ;
EXPR	322:1	322:1	4	CmpShortField ( TIFFTAG_MATTEING , "Matteing" )
FUNCTION_CALL	322:1	322:44	5	CmpShortField ( TIFFTAG_MATTEING , "Matteing" )
CALLEE	322:1	322:1	6	CmpShortField
LEAF_NODE	322:1	322:1	7	CmpShortField
LEAF_NODE	322:14	322:14	6	(
ARGUMENT	322:15	322:15	6	TIFFTAG_MATTEING
FIELD	322:15	322:15	7	TIFFTAG_MATTEING
LEAF_NODE	322:15	322:15	8	TIFFTAG_MATTEING
LEAF_NODE	322:31	322:31	6	,
ARGUMENT	322:34	322:34	6	"Matteing"
FIELD	322:34	322:34	7	"Matteing"
LEAF_NODE	322:34	322:34	8	"Matteing"
LEAF_NODE	322:44	322:44	6	)
LEAF_NODE	322:45	322:45	4	;
EXPR_STATEMENT	323:1	323:56	3	CmpShortArrayField ( TIFFTAG_EXTRASAMPLES , "ExtraSamples" ) ;
EXPR	323:1	323:1	4	CmpShortArrayField ( TIFFTAG_EXTRASAMPLES , "ExtraSamples" )
FUNCTION_CALL	323:1	323:55	5	CmpShortArrayField ( TIFFTAG_EXTRASAMPLES , "ExtraSamples" )
CALLEE	323:1	323:1	6	CmpShortArrayField
LEAF_NODE	323:1	323:1	7	CmpShortArrayField
LEAF_NODE	323:19	323:19	6	(
ARGUMENT	323:20	323:20	6	TIFFTAG_EXTRASAMPLES
FIELD	323:20	323:20	7	TIFFTAG_EXTRASAMPLES
LEAF_NODE	323:20	323:20	8	TIFFTAG_EXTRASAMPLES
LEAF_NODE	323:40	323:40	6	,
ARGUMENT	323:41	323:41	6	"ExtraSamples"
FIELD	323:41	323:41	7	"ExtraSamples"
LEAF_NODE	323:41	323:41	8	"ExtraSamples"
LEAF_NODE	323:55	323:55	6	)
LEAF_NODE	323:56	323:56	4	;
JUMP_STATEMENT	324:1	324:11	3	return ( 1 ) ;
KEYWORD	324:1	324:1	4	return
LEAF_NODE	324:1	324:1	5	return
DESTINATION	324:8	324:8	4	( 1 )
EXPR	324:8	324:10	5	( 1 )
LEAF_NODE	324:8	324:8	6	(
FIELD	324:9	324:9	6	1
LEAF_NODE	324:9	324:9	7	1
LEAF_NODE	324:10	324:10	6	)
LEAF_NODE	324:11	324:11	4	;
LEAF_NODE	325:0	325:0	2	}
FUNCTION_DEF	327:0	425:0	1	
RETURN_TYPE	327:0	327:7	2	static int
LEAF_NODE	327:0	327:0	3	static
TYPE_NAME	327:7	327:7	3	int
LEAF_NODE	327:7	327:7	4	int
FUNCTION_NAME	328:0	328:0	2	ContigCompare
LEAF_NODE	328:0	328:0	3	ContigCompare
PARAMETER_LIST	328:13	329:57	2	( int sample , uint32 row , unsigned char * p1 , unsigned char * p2 , tsize_t size )
LEAF_NODE	328:13	328:13	3	(
PARAMETER_DECL	328:14	328:18	3	int sample
TYPE	328:14	328:14	4	int
TYPE_NAME	328:14	328:14	5	int
LEAF_NODE	328:14	328:14	6	int
NAME	328:18	328:18	4	sample
LEAF_NODE	328:18	328:18	5	sample
LEAF_NODE	328:24	328:24	3	,
PARAMETER_DECL	328:26	328:33	3	uint32 row
TYPE	328:26	328:26	4	uint32
TYPE_NAME	328:26	328:26	5	uint32
LEAF_NODE	328:26	328:26	6	uint32
NAME	328:33	328:33	4	row
LEAF_NODE	328:33	328:33	5	row
LEAF_NODE	328:36	328:36	3	,
PARAMETER_DECL	329:7	329:22	3	unsigned char * p1
TYPE	329:7	329:20	4	unsigned char *
TYPE_NAME	329:7	329:16	5	unsigned char
LEAF_NODE	329:7	329:7	6	unsigned
LEAF_NODE	329:16	329:16	6	char
POINTER	329:20	329:20	5	*
LEAF_NODE	329:20	329:20	6	*
NAME	329:22	329:22	4	p1
LEAF_NODE	329:22	329:22	5	p1
LEAF_NODE	329:24	329:24	3	,
PARAMETER_DECL	329:26	329:41	3	unsigned char * p2
TYPE	329:26	329:39	4	unsigned char *
TYPE_NAME	329:26	329:35	5	unsigned char
LEAF_NODE	329:26	329:26	6	unsigned
LEAF_NODE	329:35	329:35	6	char
POINTER	329:39	329:39	5	*
LEAF_NODE	329:39	329:39	6	*
NAME	329:41	329:41	4	p2
LEAF_NODE	329:41	329:41	5	p2
LEAF_NODE	329:43	329:43	3	,
PARAMETER_DECL	329:45	329:53	3	tsize_t size
TYPE	329:45	329:45	4	tsize_t
TYPE_NAME	329:45	329:45	5	tsize_t
LEAF_NODE	329:45	329:45	6	tsize_t
NAME	329:53	329:53	4	size
LEAF_NODE	329:53	329:53	5	size
LEAF_NODE	329:57	329:57	3	)
LEAF_NODE	330:0	330:0	2	{
STATEMENTS	331:4	424:4	2	
SIMPLE_DECL	331:4	331:14	3	uint32 pix ;
VAR_DECL	331:4	331:11	4	uint32 pix
TYPE	331:4	331:4	5	uint32
TYPE_NAME	331:4	331:4	6	uint32
LEAF_NODE	331:4	331:4	7	uint32
NAME	331:11	331:11	5	pix
LEAF_NODE	331:11	331:11	6	pix
LEAF_NODE	331:14	331:14	4	;
SIMPLE_DECL	332:4	332:31	3	int ppb ; ppb = 8 / bitspersample ;
VAR_DECL	332:4	332:8	4	int ppb ; ppb = 8 / bitspersample
TYPE	332:4	332:4	5	int
TYPE_NAME	332:4	332:4	6	int
LEAF_NODE	332:4	332:4	7	int
NAME	332:8	332:8	5	ppb
LEAF_NODE	332:8	332:8	6	ppb
LEAF_NODE	0:0	0:0	5	;
INIT	332:8	332:8	5	ppb = 8 / bitspersample
ASSIGN	332:8	332:14	6	ppb = 8 / bitspersample
LVAL	332:8	332:8	7	ppb
NAME	332:8	332:8	8	ppb
LEAF_NODE	332:8	332:8	9	ppb
ASSIGN_OP	332:12	332:12	7	=
LEAF_NODE	332:12	332:12	8	=
RVAL	332:14	332:18	7	8 / bitspersample
FIELD	332:14	332:14	8	8
LEAF_NODE	332:14	332:14	9	8
LEAF_NODE	332:16	332:16	8	/
FIELD	332:18	332:18	8	bitspersample
LEAF_NODE	332:18	332:18	9	bitspersample
LEAF_NODE	332:31	332:31	4	;
SIMPLE_DECL	333:4	333:24	3	int samples_to_test ;
VAR_DECL	333:4	333:9	4	int samples_to_test
TYPE	333:4	333:4	5	int
TYPE_NAME	333:4	333:4	6	int
LEAF_NODE	333:4	333:4	7	int
NAME	333:9	333:9	5	samples_to_test
LEAF_NODE	333:9	333:9	6	samples_to_test
LEAF_NODE	333:24	333:24	4	;
SELECTION	335:4	336:8	3	
KEYWORD	335:4	335:4	4	if
LEAF_NODE	335:4	335:4	5	if
LEAF_NODE	335:7	335:7	4	(
CONDITION	335:8	335:8	4	memcmp ( p1 , p2 , size ) == 0
EXPR	335:8	335:32	5	memcmp ( p1 , p2 , size ) == 0
FUNCTION_CALL	335:8	335:27	6	memcmp ( p1 , p2 , size )
CALLEE	335:8	335:8	7	memcmp
LEAF_NODE	335:8	335:8	8	memcmp
LEAF_NODE	335:14	335:14	7	(
ARGUMENT	335:15	335:15	7	p1
FIELD	335:15	335:15	8	p1
LEAF_NODE	335:15	335:15	9	p1
LEAF_NODE	335:17	335:17	7	,
ARGUMENT	335:19	335:19	7	p2
FIELD	335:19	335:19	8	p2
LEAF_NODE	335:19	335:19	9	p2
LEAF_NODE	335:21	335:21	7	,
ARGUMENT	335:23	335:23	7	size
FIELD	335:23	335:23	8	size
LEAF_NODE	335:23	335:23	9	size
LEAF_NODE	335:27	335:27	7	)
EQ_OPERATOR	335:29	335:29	6	==
LEAF_NODE	335:29	335:29	7	==
FIELD	335:32	335:32	6	0
LEAF_NODE	335:32	335:32	7	0
LEAF_NODE	335:33	335:33	4	)
STATEMENTS	336:8	336:8	4	
JUMP_STATEMENT	336:8	336:16	5	return 0 ;
KEYWORD	336:8	336:8	6	return
LEAF_NODE	336:8	336:8	7	return
DESTINATION	336:15	336:15	6	0
EXPR	336:15	336:15	7	0
FIELD	336:15	336:15	8	0
LEAF_NODE	336:15	336:15	9	0
LEAF_NODE	336:16	336:16	6	;
EXPR_STATEMENT	338:4	338:58	3	samples_to_test = ( sample == - 1 ) ? samplesperpixel : 1 ;
EXPR	338:4	338:4	4	samples_to_test = ( sample == - 1 ) ? samplesperpixel : 1
ASSIGN	338:4	338:22	5	samples_to_test = ( sample == - 1 ) ? samplesperpixel : 1
LVAL	338:4	338:4	6	samples_to_test
FIELD	338:4	338:4	7	samples_to_test
LEAF_NODE	338:4	338:4	8	samples_to_test
ASSIGN_OP	338:20	338:20	6	=
LEAF_NODE	338:20	338:20	7	=
RVAL	338:22	338:22	6	( sample == - 1 ) ? samplesperpixel : 1
COND_EXPR	338:22	338:57	7	( sample == - 1 ) ? samplesperpixel : 1
CONDITION	338:22	338:35	8	( sample == - 1 )
LEAF_NODE	338:22	338:22	9	(
FIELD	338:23	338:23	9	sample
LEAF_NODE	338:23	338:23	10	sample
EQ_OPERATOR	338:30	338:30	9	==
LEAF_NODE	338:30	338:30	10	==
UNARY_EXPR	338:33	338:34	9	- 1
UNARY_OPERATOR	338:33	338:33	10	-
LEAF_NODE	338:33	338:33	11	-
FIELD	338:34	338:34	10	1
LEAF_NODE	338:34	338:34	11	1
LEAF_NODE	338:35	338:35	9	)
LEAF_NODE	338:37	338:37	8	?
EXPR	338:39	338:39	8	samplesperpixel
FIELD	338:39	338:39	9	samplesperpixel
LEAF_NODE	338:39	338:39	10	samplesperpixel
LEAF_NODE	338:55	338:55	8	:
FIELD	338:57	338:57	8	1
LEAF_NODE	338:57	338:57	9	1
LEAF_NODE	338:58	338:58	4	;
SELECTION	340:4	340:27	3	
KEYWORD	340:4	340:4	4	switch
LEAF_NODE	340:4	340:4	5	switch
LEAF_NODE	340:11	340:11	4	(
CONDITION	340:12	340:12	4	bitspersample
EXPR	340:12	340:12	5	bitspersample
FIELD	340:12	340:12	6	bitspersample
LEAF_NODE	340:12	340:12	7	bitspersample
LEAF_NODE	340:25	340:25	4	)
STATEMENTS	340:27	422:4	4	
LEAF_NODE	340:27	340:27	5	{
STATEMENTS	341:6	421:1	5	
LABEL	341:6	341:12	6	case 1 :
LEAF_NODE	341:6	341:6	7	case
LEAF_NODE	341:11	341:11	7	1
LEAF_NODE	341:12	341:12	7	:
LABEL	341:14	341:20	6	case 2 :
LEAF_NODE	341:14	341:14	7	case
LEAF_NODE	341:19	341:19	7	2
LEAF_NODE	341:20	341:20	7	:
LABEL	341:22	341:28	6	case 4 :
LEAF_NODE	341:22	341:22	7	case
LEAF_NODE	341:27	341:27	7	4
LEAF_NODE	341:28	341:28	7	:
LABEL	341:30	341:36	6	case 8 :
LEAF_NODE	341:30	341:30	7	case
LEAF_NODE	341:35	341:35	7	8
LEAF_NODE	341:36	341:36	7	:
LEAF_NODE	342:6	342:6	6	{
STATEMENTS	343:10	360:10	6	
SIMPLE_DECL	343:10	343:46	7	unsigned char * pix1 ; pix1 = p1 , unsigned char * pix2 ; pix2 = p2 ;
INIT_DECL_LIST	343:10	343:10	8	unsigned char * pix1 ; pix1 = p1 , unsigned char * pix2 ; pix2 = p2
VAR_DECL	343:10	343:25	9	unsigned char * pix1 ; pix1 = p1
TYPE	343:10	343:24	10	unsigned char *
TYPE_NAME	343:10	343:19	11	unsigned char
LEAF_NODE	343:10	343:10	12	unsigned
LEAF_NODE	343:19	343:19	12	char
POINTER	343:24	343:24	11	*
LEAF_NODE	343:24	343:24	12	*
NAME	343:25	343:25	10	pix1
LEAF_NODE	343:25	343:25	11	pix1
LEAF_NODE	0:0	0:0	10	;
INIT	343:25	343:25	10	pix1 = p1
ASSIGN	343:25	343:32	11	pix1 = p1
LVAL	343:25	343:25	12	pix1
NAME	343:25	343:25	13	pix1
LEAF_NODE	343:25	343:25	14	pix1
ASSIGN_OP	343:30	343:30	12	=
LEAF_NODE	343:30	343:30	13	=
RVAL	343:32	343:32	12	p1
FIELD	343:32	343:32	13	p1
LEAF_NODE	343:32	343:32	14	p1
LEAF_NODE	343:34	343:34	9	,
VAR_DECL	343:10	343:37	9	unsigned char * pix2 ; pix2 = p2
TYPE	343:10	343:36	10	unsigned char *
TYPE_NAME	343:10	343:19	11	unsigned char
LEAF_NODE	343:10	343:10	12	unsigned
LEAF_NODE	343:19	343:19	12	char
POINTER	343:36	343:36	11	*
LEAF_NODE	343:36	343:36	12	*
NAME	343:37	343:37	10	pix2
LEAF_NODE	343:37	343:37	11	pix2
LEAF_NODE	0:0	0:0	10	;
INIT	343:37	343:37	10	pix2 = p2
ASSIGN	343:37	343:44	11	pix2 = p2
LVAL	343:37	343:37	12	pix2
NAME	343:37	343:37	13	pix2
LEAF_NODE	343:37	343:37	14	pix2
ASSIGN_OP	343:42	343:42	12	=
LEAF_NODE	343:42	343:42	13	=
RVAL	343:44	343:44	12	p2
FIELD	343:44	343:44	13	p2
LEAF_NODE	343:44	343:44	14	p2
LEAF_NODE	343:46	343:46	8	;
ITERATION	345:10	345:54	7	
KEYWORD	345:10	345:10	8	for
LEAF_NODE	345:10	345:10	9	for
LEAF_NODE	345:14	345:14	8	(
FOR_INIT	345:15	345:22	8	pix = 0 ;
EXPR	345:15	345:15	9	pix = 0
ASSIGN	345:15	345:21	10	pix = 0
LVAL	345:15	345:15	11	pix
FIELD	345:15	345:15	12	pix
LEAF_NODE	345:15	345:15	13	pix
ASSIGN_OP	345:19	345:19	11	=
LEAF_NODE	345:19	345:19	12	=
RVAL	345:21	345:21	11	0
FIELD	345:21	345:21	12	0
LEAF_NODE	345:21	345:21	13	0
LEAF_NODE	345:22	345:22	9	;
CONDITION	345:24	345:24	8	pix < imagewidth
EXPR	345:24	345:30	9	pix < imagewidth
FIELD	345:24	345:24	10	pix
LEAF_NODE	345:24	345:24	11	pix
REL_OPERATOR	345:28	345:28	10	<
LEAF_NODE	345:28	345:28	11	<
FIELD	345:30	345:30	10	imagewidth
LEAF_NODE	345:30	345:30	11	imagewidth
LEAF_NODE	345:40	345:40	8	;
FOR_EXPR	345:42	345:42	8	pix += ppb
EXPR	345:42	345:42	9	pix += ppb
ASSIGN	345:42	345:49	10	pix += ppb
LVAL	345:42	345:42	11	pix
FIELD	345:42	345:42	12	pix
LEAF_NODE	345:42	345:42	13	pix
ASSIGN_OP	345:46	345:46	11	+=
LEAF_NODE	345:46	345:46	12	+=
RVAL	345:49	345:49	11	ppb
FIELD	345:49	345:49	12	ppb
LEAF_NODE	345:49	345:49	13	ppb
LEAF_NODE	345:52	345:52	8	)
STATEMENTS	345:54	359:10	8	
LEAF_NODE	345:54	345:54	9	{
STATEMENTS	346:14	348:14	9	
SIMPLE_DECL	346:14	346:20	10	int s ;
VAR_DECL	346:14	346:19	11	int s
TYPE	346:14	346:14	12	int
TYPE_NAME	346:14	346:14	13	int
LEAF_NODE	346:14	346:14	14	int
NAME	346:19	346:19	12	s
LEAF_NODE	346:19	346:19	13	s
LEAF_NODE	346:20	346:20	11	;
ITERATION	348:14	348:51	10	
KEYWORD	348:14	348:14	11	for
LEAF_NODE	348:14	348:14	12	for
LEAF_NODE	348:17	348:17	11	(
FOR_INIT	348:18	348:23	11	s = 0 ;
EXPR	348:18	348:18	12	s = 0
ASSIGN	348:18	348:22	13	s = 0
LVAL	348:18	348:18	14	s
FIELD	348:18	348:18	15	s
LEAF_NODE	348:18	348:18	16	s
ASSIGN_OP	348:20	348:20	14	=
LEAF_NODE	348:20	348:20	15	=
RVAL	348:22	348:22	14	0
FIELD	348:22	348:22	15	0
LEAF_NODE	348:22	348:22	16	0
LEAF_NODE	348:23	348:23	12	;
CONDITION	348:25	348:25	11	s < samples_to_test
EXPR	348:25	348:29	12	s < samples_to_test
FIELD	348:25	348:25	13	s
LEAF_NODE	348:25	348:25	14	s
REL_OPERATOR	348:27	348:27	13	<
LEAF_NODE	348:27	348:27	14	<
FIELD	348:29	348:29	13	samples_to_test
LEAF_NODE	348:29	348:29	14	samples_to_test
LEAF_NODE	348:44	348:44	11	;
FOR_EXPR	348:46	348:46	11	s ++
EXPR	348:46	348:46	12	s ++
FIELD	348:46	348:47	13	s ++
LEAF_NODE	348:46	348:46	14	s
LEAF_NODE	348:47	348:47	14	++
LEAF_NODE	348:49	348:49	11	)
STATEMENTS	348:51	358:14	11	
LEAF_NODE	348:51	348:51	12	{
STATEMENTS	349:18	357:18	12	
SELECTION	349:18	349:38	13	
KEYWORD	349:18	349:18	14	if
LEAF_NODE	349:18	349:18	15	if
LEAF_NODE	349:21	349:21	14	(
CONDITION	349:22	349:22	14	* pix1 != * pix2
EXPR	349:22	349:31	15	* pix1 != * pix2
UNARY_EXPR	349:22	349:23	16	* pix1
UNARY_OPERATOR	349:22	349:22	17	*
LEAF_NODE	349:22	349:22	18	*
FIELD	349:23	349:23	17	pix1
LEAF_NODE	349:23	349:23	18	pix1
EQ_OPERATOR	349:28	349:28	16	!=
LEAF_NODE	349:28	349:28	17	!=
UNARY_EXPR	349:31	349:32	16	* pix2
UNARY_OPERATOR	349:31	349:31	17	*
LEAF_NODE	349:31	349:31	18	*
FIELD	349:32	349:32	17	pix2
LEAF_NODE	349:32	349:32	18	pix2
LEAF_NODE	349:36	349:36	14	)
STATEMENTS	349:38	354:18	14	
LEAF_NODE	349:38	349:38	15	{
STATEMENTS	350:22	352:22	15	
SELECTION	350:22	351:26	16	
KEYWORD	350:22	350:22	17	if
LEAF_NODE	350:22	350:22	18	if
LEAF_NODE	350:24	350:24	17	(
CONDITION	350:26	350:26	17	sample == - 1
EXPR	350:26	350:36	18	sample == - 1
FIELD	350:26	350:26	19	sample
LEAF_NODE	350:26	350:26	20	sample
EQ_OPERATOR	350:33	350:33	19	==
LEAF_NODE	350:33	350:33	20	==
UNARY_EXPR	350:36	350:37	19	- 1
UNARY_OPERATOR	350:36	350:36	20	-
LEAF_NODE	350:36	350:36	21	-
FIELD	350:37	350:37	20	1
LEAF_NODE	350:37	350:37	21	1
LEAF_NODE	350:39	350:39	17	)
STATEMENTS	351:26	351:26	17	
EXPR_STATEMENT	351:26	351:65	18	PrintIntDiff ( row , s , pix , * pix1 , * pix2 ) ;
EXPR	351:26	351:26	19	PrintIntDiff ( row , s , pix , * pix1 , * pix2 )
FUNCTION_CALL	351:26	351:64	20	PrintIntDiff ( row , s , pix , * pix1 , * pix2 )
CALLEE	351:26	351:26	21	PrintIntDiff
LEAF_NODE	351:26	351:26	22	PrintIntDiff
LEAF_NODE	351:38	351:38	21	(
ARGUMENT	351:39	351:39	21	row
FIELD	351:39	351:39	22	row
LEAF_NODE	351:39	351:39	23	row
LEAF_NODE	351:42	351:42	21	,
ARGUMENT	351:44	351:44	21	s
FIELD	351:44	351:44	22	s
LEAF_NODE	351:44	351:44	23	s
LEAF_NODE	351:45	351:45	21	,
ARGUMENT	351:47	351:47	21	pix
FIELD	351:47	351:47	22	pix
LEAF_NODE	351:47	351:47	23	pix
LEAF_NODE	351:50	351:50	21	,
ARGUMENT	351:52	351:52	21	* pix1
UNARY_EXPR	351:52	351:53	22	* pix1
UNARY_OPERATOR	351:52	351:52	23	*
LEAF_NODE	351:52	351:52	24	*
FIELD	351:53	351:53	23	pix1
LEAF_NODE	351:53	351:53	24	pix1
LEAF_NODE	351:57	351:57	21	,
ARGUMENT	351:59	351:59	21	* pix2
UNARY_EXPR	351:59	351:60	22	* pix2
UNARY_OPERATOR	351:59	351:59	23	*
LEAF_NODE	351:59	351:59	24	*
FIELD	351:60	351:60	23	pix2
LEAF_NODE	351:60	351:60	24	pix2
LEAF_NODE	351:64	351:64	21	)
LEAF_NODE	351:65	351:65	19	;
SELECTION	352:22	353:26	16	
KEYWORD	352:22	352:22	17	else
LEAF_NODE	352:22	352:22	18	else
STATEMENTS	353:26	353:26	17	
EXPR_STATEMENT	353:26	353:70	18	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 ) ;
EXPR	353:26	353:26	19	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 )
FUNCTION_CALL	353:26	353:69	20	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 )
CALLEE	353:26	353:26	21	PrintIntDiff
LEAF_NODE	353:26	353:26	22	PrintIntDiff
LEAF_NODE	353:38	353:38	21	(
ARGUMENT	353:39	353:39	21	row
FIELD	353:39	353:39	22	row
LEAF_NODE	353:39	353:39	23	row
LEAF_NODE	353:42	353:42	21	,
ARGUMENT	353:44	353:44	21	sample
FIELD	353:44	353:44	22	sample
LEAF_NODE	353:44	353:44	23	sample
LEAF_NODE	353:50	353:50	21	,
ARGUMENT	353:52	353:52	21	pix
FIELD	353:52	353:52	22	pix
LEAF_NODE	353:52	353:52	23	pix
LEAF_NODE	353:55	353:55	21	,
ARGUMENT	353:57	353:57	21	* pix1
UNARY_EXPR	353:57	353:58	22	* pix1
UNARY_OPERATOR	353:57	353:57	23	*
LEAF_NODE	353:57	353:57	24	*
FIELD	353:58	353:58	23	pix1
LEAF_NODE	353:58	353:58	24	pix1
LEAF_NODE	353:62	353:62	21	,
ARGUMENT	353:64	353:64	21	* pix2
UNARY_EXPR	353:64	353:65	22	* pix2
UNARY_OPERATOR	353:64	353:64	23	*
LEAF_NODE	353:64	353:64	24	*
FIELD	353:65	353:65	23	pix2
LEAF_NODE	353:65	353:65	24	pix2
LEAF_NODE	353:69	353:69	21	)
LEAF_NODE	353:70	353:70	19	;
LEAF_NODE	354:18	354:18	15	}
EXPR_STATEMENT	356:18	356:24	13	pix1 ++ ;
EXPR	356:18	356:18	14	pix1 ++
FIELD	356:18	356:22	15	pix1 ++
LEAF_NODE	356:18	356:18	16	pix1
LEAF_NODE	356:22	356:22	16	++
LEAF_NODE	356:24	356:24	14	;
EXPR_STATEMENT	357:18	357:24	13	pix2 ++ ;
EXPR	357:18	357:18	14	pix2 ++
FIELD	357:18	357:22	15	pix2 ++
LEAF_NODE	357:18	357:18	16	pix2
LEAF_NODE	357:22	357:22	16	++
LEAF_NODE	357:24	357:24	14	;
LEAF_NODE	358:14	358:14	12	}
LEAF_NODE	359:10	359:10	9	}
JUMP_STATEMENT	360:10	360:15	7	break DESTINATION ;
KEYWORD	360:10	360:10	8	break
LEAF_NODE	360:10	360:10	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	360:15	360:15	8	;
LEAF_NODE	361:6	361:6	6	}
LABEL	362:6	362:13	6	case 16 :
LEAF_NODE	362:6	362:6	7	case
LEAF_NODE	362:11	362:11	7	16
LEAF_NODE	362:13	362:13	7	:
LEAF_NODE	363:6	363:6	6	{
STATEMENTS	364:10	377:10	6	
SIMPLE_DECL	364:10	364:59	7	uint16 * pix1 ; pix1 = ( uint16 * ) p1 , uint16 * pix2 ; pix2 = ( uint16 * ) p2 ;
INIT_DECL_LIST	364:10	364:10	8	uint16 * pix1 ; pix1 = ( uint16 * ) p1 , uint16 * pix2 ; pix2 = ( uint16 * ) p2
VAR_DECL	364:10	364:18	9	uint16 * pix1 ; pix1 = ( uint16 * ) p1
TYPE	364:10	364:17	10	uint16 *
TYPE_NAME	364:10	364:10	11	uint16
LEAF_NODE	364:10	364:10	12	uint16
POINTER	364:17	364:17	11	*
LEAF_NODE	364:17	364:17	12	*
NAME	364:18	364:18	10	pix1
LEAF_NODE	364:18	364:18	11	pix1
LEAF_NODE	0:0	0:0	10	;
INIT	364:18	364:18	10	pix1 = ( uint16 * ) p1
ASSIGN	364:18	364:25	11	pix1 = ( uint16 * ) p1
LVAL	364:18	364:18	12	pix1
NAME	364:18	364:18	13	pix1
LEAF_NODE	364:18	364:18	14	pix1
ASSIGN_OP	364:23	364:23	12	=
LEAF_NODE	364:23	364:23	13	=
RVAL	364:25	364:35	12	( uint16 * ) p1
LEAF_NODE	364:25	364:25	13	(
TYPE_NAME	364:26	364:26	13	uint16
LEAF_NODE	364:26	364:26	14	uint16
LEAF_NODE	364:33	364:33	13	*
LEAF_NODE	364:34	364:34	13	)
FIELD	364:35	364:35	13	p1
LEAF_NODE	364:35	364:35	14	p1
LEAF_NODE	364:37	364:37	9	,
VAR_DECL	364:10	364:40	9	uint16 * pix2 ; pix2 = ( uint16 * ) p2
TYPE	364:10	364:39	10	uint16 *
TYPE_NAME	364:10	364:10	11	uint16
LEAF_NODE	364:10	364:10	12	uint16
POINTER	364:39	364:39	11	*
LEAF_NODE	364:39	364:39	12	*
NAME	364:40	364:40	10	pix2
LEAF_NODE	364:40	364:40	11	pix2
LEAF_NODE	0:0	0:0	10	;
INIT	364:40	364:40	10	pix2 = ( uint16 * ) p2
ASSIGN	364:40	364:47	11	pix2 = ( uint16 * ) p2
LVAL	364:40	364:40	12	pix2
NAME	364:40	364:40	13	pix2
LEAF_NODE	364:40	364:40	14	pix2
ASSIGN_OP	364:45	364:45	12	=
LEAF_NODE	364:45	364:45	13	=
RVAL	364:47	364:57	12	( uint16 * ) p2
LEAF_NODE	364:47	364:47	13	(
TYPE_NAME	364:48	364:48	13	uint16
LEAF_NODE	364:48	364:48	14	uint16
LEAF_NODE	364:55	364:55	13	*
LEAF_NODE	364:56	364:56	13	)
FIELD	364:57	364:57	13	p2
LEAF_NODE	364:57	364:57	14	p2
LEAF_NODE	364:59	364:59	8	;
ITERATION	366:10	366:49	7	
KEYWORD	366:10	366:10	8	for
LEAF_NODE	366:10	366:10	9	for
LEAF_NODE	366:14	366:14	8	(
FOR_INIT	366:15	366:22	8	pix = 0 ;
EXPR	366:15	366:15	9	pix = 0
ASSIGN	366:15	366:21	10	pix = 0
LVAL	366:15	366:15	11	pix
FIELD	366:15	366:15	12	pix
LEAF_NODE	366:15	366:15	13	pix
ASSIGN_OP	366:19	366:19	11	=
LEAF_NODE	366:19	366:19	12	=
RVAL	366:21	366:21	11	0
FIELD	366:21	366:21	12	0
LEAF_NODE	366:21	366:21	13	0
LEAF_NODE	366:22	366:22	9	;
CONDITION	366:24	366:24	8	pix < imagewidth
EXPR	366:24	366:30	9	pix < imagewidth
FIELD	366:24	366:24	10	pix
LEAF_NODE	366:24	366:24	11	pix
REL_OPERATOR	366:28	366:28	10	<
LEAF_NODE	366:28	366:28	11	<
FIELD	366:30	366:30	10	imagewidth
LEAF_NODE	366:30	366:30	11	imagewidth
LEAF_NODE	366:40	366:40	8	;
FOR_EXPR	366:42	366:42	8	pix ++
EXPR	366:42	366:42	9	pix ++
FIELD	366:42	366:45	10	pix ++
LEAF_NODE	366:42	366:42	11	pix
LEAF_NODE	366:45	366:45	11	++
LEAF_NODE	366:47	366:47	8	)
STATEMENTS	366:49	376:10	8	
LEAF_NODE	366:49	366:49	9	{
STATEMENTS	367:14	369:14	9	
SIMPLE_DECL	367:14	367:19	10	int s ;
VAR_DECL	367:14	367:18	11	int s
TYPE	367:14	367:14	12	int
TYPE_NAME	367:14	367:14	13	int
LEAF_NODE	367:14	367:14	14	int
NAME	367:18	367:18	12	s
LEAF_NODE	367:18	367:18	13	s
LEAF_NODE	367:19	367:19	11	;
ITERATION	369:14	369:51	10	
KEYWORD	369:14	369:14	11	for
LEAF_NODE	369:14	369:14	12	for
LEAF_NODE	369:17	369:17	11	(
FOR_INIT	369:18	369:23	11	s = 0 ;
EXPR	369:18	369:18	12	s = 0
ASSIGN	369:18	369:22	13	s = 0
LVAL	369:18	369:18	14	s
FIELD	369:18	369:18	15	s
LEAF_NODE	369:18	369:18	16	s
ASSIGN_OP	369:20	369:20	14	=
LEAF_NODE	369:20	369:20	15	=
RVAL	369:22	369:22	14	0
FIELD	369:22	369:22	15	0
LEAF_NODE	369:22	369:22	16	0
LEAF_NODE	369:23	369:23	12	;
CONDITION	369:25	369:25	11	s < samples_to_test
EXPR	369:25	369:29	12	s < samples_to_test
FIELD	369:25	369:25	13	s
LEAF_NODE	369:25	369:25	14	s
REL_OPERATOR	369:27	369:27	13	<
LEAF_NODE	369:27	369:27	14	<
FIELD	369:29	369:29	13	samples_to_test
LEAF_NODE	369:29	369:29	14	samples_to_test
LEAF_NODE	369:44	369:44	11	;
FOR_EXPR	369:46	369:46	11	s ++
EXPR	369:46	369:46	12	s ++
FIELD	369:46	369:47	13	s ++
LEAF_NODE	369:46	369:46	14	s
LEAF_NODE	369:47	369:47	14	++
LEAF_NODE	369:49	369:49	11	)
STATEMENTS	369:51	375:14	11	
LEAF_NODE	369:51	369:51	12	{
STATEMENTS	370:18	374:18	12	
SELECTION	370:18	371:22	13	
KEYWORD	370:18	370:18	14	if
LEAF_NODE	370:18	370:18	15	if
LEAF_NODE	370:21	370:21	14	(
CONDITION	370:22	370:22	14	* pix1 != * pix2
EXPR	370:22	370:31	15	* pix1 != * pix2
UNARY_EXPR	370:22	370:23	16	* pix1
UNARY_OPERATOR	370:22	370:22	17	*
LEAF_NODE	370:22	370:22	18	*
FIELD	370:23	370:23	17	pix1
LEAF_NODE	370:23	370:23	18	pix1
EQ_OPERATOR	370:28	370:28	16	!=
LEAF_NODE	370:28	370:28	17	!=
UNARY_EXPR	370:31	370:32	16	* pix2
UNARY_OPERATOR	370:31	370:31	17	*
LEAF_NODE	370:31	370:31	18	*
FIELD	370:32	370:32	17	pix2
LEAF_NODE	370:32	370:32	18	pix2
LEAF_NODE	370:36	370:36	14	)
STATEMENTS	371:22	371:22	14	
EXPR_STATEMENT	371:22	371:66	15	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 ) ;
EXPR	371:22	371:22	16	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 )
FUNCTION_CALL	371:22	371:65	17	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 )
CALLEE	371:22	371:22	18	PrintIntDiff
LEAF_NODE	371:22	371:22	19	PrintIntDiff
LEAF_NODE	371:34	371:34	18	(
ARGUMENT	371:35	371:35	18	row
FIELD	371:35	371:35	19	row
LEAF_NODE	371:35	371:35	20	row
LEAF_NODE	371:38	371:38	18	,
ARGUMENT	371:40	371:40	18	sample
FIELD	371:40	371:40	19	sample
LEAF_NODE	371:40	371:40	20	sample
LEAF_NODE	371:46	371:46	18	,
ARGUMENT	371:48	371:48	18	pix
FIELD	371:48	371:48	19	pix
LEAF_NODE	371:48	371:48	20	pix
LEAF_NODE	371:51	371:51	18	,
ARGUMENT	371:53	371:53	18	* pix1
UNARY_EXPR	371:53	371:54	19	* pix1
UNARY_OPERATOR	371:53	371:53	20	*
LEAF_NODE	371:53	371:53	21	*
FIELD	371:54	371:54	20	pix1
LEAF_NODE	371:54	371:54	21	pix1
LEAF_NODE	371:58	371:58	18	,
ARGUMENT	371:60	371:60	18	* pix2
UNARY_EXPR	371:60	371:61	19	* pix2
UNARY_OPERATOR	371:60	371:60	20	*
LEAF_NODE	371:60	371:60	21	*
FIELD	371:61	371:61	20	pix2
LEAF_NODE	371:61	371:61	21	pix2
LEAF_NODE	371:65	371:65	18	)
LEAF_NODE	371:66	371:66	16	;
EXPR_STATEMENT	373:18	373:24	13	pix1 ++ ;
EXPR	373:18	373:18	14	pix1 ++
FIELD	373:18	373:22	15	pix1 ++
LEAF_NODE	373:18	373:18	16	pix1
LEAF_NODE	373:22	373:22	16	++
LEAF_NODE	373:24	373:24	14	;
EXPR_STATEMENT	374:18	374:24	13	pix2 ++ ;
EXPR	374:18	374:18	14	pix2 ++
FIELD	374:18	374:22	15	pix2 ++
LEAF_NODE	374:18	374:18	16	pix2
LEAF_NODE	374:22	374:22	16	++
LEAF_NODE	374:24	374:24	14	;
LEAF_NODE	375:14	375:14	12	}
LEAF_NODE	376:10	376:10	9	}
JUMP_STATEMENT	377:10	377:15	7	break DESTINATION ;
KEYWORD	377:10	377:10	8	break
LEAF_NODE	377:10	377:10	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	377:15	377:15	8	;
LEAF_NODE	378:6	378:6	6	}
LABEL	379:6	379:13	6	case 32 :
LEAF_NODE	379:6	379:6	7	case
LEAF_NODE	379:11	379:11	7	32
LEAF_NODE	379:13	379:13	7	:
SELECTION	380:1	381:42	6	
KEYWORD	380:1	380:1	7	if
LEAF_NODE	380:1	380:1	8	if
LEAF_NODE	380:4	380:4	7	(
CONDITION	380:5	380:5	7	sampleformat == SAMPLEFORMAT_UINT || sampleformat == SAMPLEFORMAT_INT
EXPR	380:5	380:5	8	sampleformat == SAMPLEFORMAT_UINT || sampleformat == SAMPLEFORMAT_INT
OR	380:5	381:8	9	sampleformat == SAMPLEFORMAT_UINT || sampleformat == SAMPLEFORMAT_INT
EXPR	380:5	380:21	10	sampleformat == SAMPLEFORMAT_UINT
FIELD	380:5	380:5	11	sampleformat
LEAF_NODE	380:5	380:5	12	sampleformat
EQ_OPERATOR	380:18	380:18	11	==
LEAF_NODE	380:18	380:18	12	==
FIELD	380:21	380:21	11	SAMPLEFORMAT_UINT
LEAF_NODE	380:21	380:21	12	SAMPLEFORMAT_UINT
LEAF_NODE	381:5	381:5	10	||
EXPR	381:8	381:24	10	sampleformat == SAMPLEFORMAT_INT
FIELD	381:8	381:8	11	sampleformat
LEAF_NODE	381:8	381:8	12	sampleformat
EQ_OPERATOR	381:21	381:21	11	==
LEAF_NODE	381:21	381:21	12	==
FIELD	381:24	381:24	11	SAMPLEFORMAT_INT
LEAF_NODE	381:24	381:24	12	SAMPLEFORMAT_INT
LEAF_NODE	381:40	381:40	7	)
STATEMENTS	381:42	397:1	7	
LEAF_NODE	381:42	381:42	8	{
STATEMENTS	382:2	384:2	8	
SIMPLE_DECL	382:2	382:51	9	uint32 * pix1 ; pix1 = ( uint32 * ) p1 , uint32 * pix2 ; pix2 = ( uint32 * ) p2 ;
INIT_DECL_LIST	382:2	382:2	10	uint32 * pix1 ; pix1 = ( uint32 * ) p1 , uint32 * pix2 ; pix2 = ( uint32 * ) p2
VAR_DECL	382:2	382:10	11	uint32 * pix1 ; pix1 = ( uint32 * ) p1
TYPE	382:2	382:9	12	uint32 *
TYPE_NAME	382:2	382:2	13	uint32
LEAF_NODE	382:2	382:2	14	uint32
POINTER	382:9	382:9	13	*
LEAF_NODE	382:9	382:9	14	*
NAME	382:10	382:10	12	pix1
LEAF_NODE	382:10	382:10	13	pix1
LEAF_NODE	0:0	0:0	12	;
INIT	382:10	382:10	12	pix1 = ( uint32 * ) p1
ASSIGN	382:10	382:17	13	pix1 = ( uint32 * ) p1
LVAL	382:10	382:10	14	pix1
NAME	382:10	382:10	15	pix1
LEAF_NODE	382:10	382:10	16	pix1
ASSIGN_OP	382:15	382:15	14	=
LEAF_NODE	382:15	382:15	15	=
RVAL	382:17	382:27	14	( uint32 * ) p1
LEAF_NODE	382:17	382:17	15	(
TYPE_NAME	382:18	382:18	15	uint32
LEAF_NODE	382:18	382:18	16	uint32
LEAF_NODE	382:25	382:25	15	*
LEAF_NODE	382:26	382:26	15	)
FIELD	382:27	382:27	15	p1
LEAF_NODE	382:27	382:27	16	p1
LEAF_NODE	382:29	382:29	11	,
VAR_DECL	382:2	382:32	11	uint32 * pix2 ; pix2 = ( uint32 * ) p2
TYPE	382:2	382:31	12	uint32 *
TYPE_NAME	382:2	382:2	13	uint32
LEAF_NODE	382:2	382:2	14	uint32
POINTER	382:31	382:31	13	*
LEAF_NODE	382:31	382:31	14	*
NAME	382:32	382:32	12	pix2
LEAF_NODE	382:32	382:32	13	pix2
LEAF_NODE	0:0	0:0	12	;
INIT	382:32	382:32	12	pix2 = ( uint32 * ) p2
ASSIGN	382:32	382:39	13	pix2 = ( uint32 * ) p2
LVAL	382:32	382:32	14	pix2
NAME	382:32	382:32	15	pix2
LEAF_NODE	382:32	382:32	16	pix2
ASSIGN_OP	382:37	382:37	14	=
LEAF_NODE	382:37	382:37	15	=
RVAL	382:39	382:49	14	( uint32 * ) p2
LEAF_NODE	382:39	382:39	15	(
TYPE_NAME	382:40	382:40	15	uint32
LEAF_NODE	382:40	382:40	16	uint32
LEAF_NODE	382:47	382:47	15	*
LEAF_NODE	382:48	382:48	15	)
FIELD	382:49	382:49	15	p2
LEAF_NODE	382:49	382:49	16	p2
LEAF_NODE	382:51	382:51	10	;
ITERATION	384:2	384:41	9	
KEYWORD	384:2	384:2	10	for
LEAF_NODE	384:2	384:2	11	for
LEAF_NODE	384:6	384:6	10	(
FOR_INIT	384:7	384:14	10	pix = 0 ;
EXPR	384:7	384:7	11	pix = 0
ASSIGN	384:7	384:13	12	pix = 0
LVAL	384:7	384:7	13	pix
FIELD	384:7	384:7	14	pix
LEAF_NODE	384:7	384:7	15	pix
ASSIGN_OP	384:11	384:11	13	=
LEAF_NODE	384:11	384:11	14	=
RVAL	384:13	384:13	13	0
FIELD	384:13	384:13	14	0
LEAF_NODE	384:13	384:13	15	0
LEAF_NODE	384:14	384:14	11	;
CONDITION	384:16	384:16	10	pix < imagewidth
EXPR	384:16	384:22	11	pix < imagewidth
FIELD	384:16	384:16	12	pix
LEAF_NODE	384:16	384:16	13	pix
REL_OPERATOR	384:20	384:20	12	<
LEAF_NODE	384:20	384:20	13	<
FIELD	384:22	384:22	12	imagewidth
LEAF_NODE	384:22	384:22	13	imagewidth
LEAF_NODE	384:32	384:32	10	;
FOR_EXPR	384:34	384:34	10	pix ++
EXPR	384:34	384:34	11	pix ++
FIELD	384:34	384:37	12	pix ++
LEAF_NODE	384:34	384:34	13	pix
LEAF_NODE	384:37	384:37	13	++
LEAF_NODE	384:39	384:39	10	)
STATEMENTS	384:41	396:2	10	
LEAF_NODE	384:41	384:41	11	{
STATEMENTS	385:3	387:3	11	
SIMPLE_DECL	385:3	385:8	12	int s ;
VAR_DECL	385:3	385:7	13	int s
TYPE	385:3	385:3	14	int
TYPE_NAME	385:3	385:3	15	int
LEAF_NODE	385:3	385:3	16	int
NAME	385:7	385:7	14	s
LEAF_NODE	385:7	385:7	15	s
LEAF_NODE	385:8	385:8	13	;
ITERATION	387:3	387:40	12	
KEYWORD	387:3	387:3	13	for
LEAF_NODE	387:3	387:3	14	for
LEAF_NODE	387:6	387:6	13	(
FOR_INIT	387:7	387:12	13	s = 0 ;
EXPR	387:7	387:7	14	s = 0
ASSIGN	387:7	387:11	15	s = 0
LVAL	387:7	387:7	16	s
FIELD	387:7	387:7	17	s
LEAF_NODE	387:7	387:7	18	s
ASSIGN_OP	387:9	387:9	16	=
LEAF_NODE	387:9	387:9	17	=
RVAL	387:11	387:11	16	0
FIELD	387:11	387:11	17	0
LEAF_NODE	387:11	387:11	18	0
LEAF_NODE	387:12	387:12	14	;
CONDITION	387:14	387:14	13	s < samples_to_test
EXPR	387:14	387:18	14	s < samples_to_test
FIELD	387:14	387:14	15	s
LEAF_NODE	387:14	387:14	16	s
REL_OPERATOR	387:16	387:16	15	<
LEAF_NODE	387:16	387:16	16	<
FIELD	387:18	387:18	15	samples_to_test
LEAF_NODE	387:18	387:18	16	samples_to_test
LEAF_NODE	387:33	387:33	13	;
FOR_EXPR	387:35	387:35	13	s ++
EXPR	387:35	387:35	14	s ++
FIELD	387:35	387:36	15	s ++
LEAF_NODE	387:35	387:35	16	s
LEAF_NODE	387:36	387:36	16	++
LEAF_NODE	387:38	387:38	13	)
STATEMENTS	387:40	395:3	13	
LEAF_NODE	387:40	387:40	14	{
STATEMENTS	388:4	394:4	14	
SELECTION	388:4	388:24	15	
KEYWORD	388:4	388:4	16	if
LEAF_NODE	388:4	388:4	17	if
LEAF_NODE	388:7	388:7	16	(
CONDITION	388:8	388:8	16	* pix1 != * pix2
EXPR	388:8	388:17	17	* pix1 != * pix2
UNARY_EXPR	388:8	388:9	18	* pix1
UNARY_OPERATOR	388:8	388:8	19	*
LEAF_NODE	388:8	388:8	20	*
FIELD	388:9	388:9	19	pix1
LEAF_NODE	388:9	388:9	20	pix1
EQ_OPERATOR	388:14	388:14	18	!=
LEAF_NODE	388:14	388:14	19	!=
UNARY_EXPR	388:17	388:18	18	* pix2
UNARY_OPERATOR	388:17	388:17	19	*
LEAF_NODE	388:17	388:17	20	*
FIELD	388:18	388:18	19	pix2
LEAF_NODE	388:18	388:18	20	pix2
LEAF_NODE	388:22	388:22	16	)
STATEMENTS	388:24	391:4	16	
LEAF_NODE	388:24	388:24	17	{
STATEMENTS	389:5	389:5	17	
EXPR_STATEMENT	389:5	390:24	18	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 ) ;
EXPR	389:5	389:5	19	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 )
FUNCTION_CALL	389:5	390:23	20	PrintIntDiff ( row , sample , pix , * pix1 , * pix2 )
CALLEE	389:5	389:5	21	PrintIntDiff
LEAF_NODE	389:5	389:5	22	PrintIntDiff
LEAF_NODE	389:17	389:17	21	(
ARGUMENT	389:18	389:18	21	row
FIELD	389:18	389:18	22	row
LEAF_NODE	389:18	389:18	23	row
LEAF_NODE	389:21	389:21	21	,
ARGUMENT	389:23	389:23	21	sample
FIELD	389:23	389:23	22	sample
LEAF_NODE	389:23	389:23	23	sample
LEAF_NODE	389:29	389:29	21	,
ARGUMENT	389:31	389:31	21	pix
FIELD	389:31	389:31	22	pix
LEAF_NODE	389:31	389:31	23	pix
LEAF_NODE	389:34	389:34	21	,
ARGUMENT	390:11	390:11	21	* pix1
UNARY_EXPR	390:11	390:12	22	* pix1
UNARY_OPERATOR	390:11	390:11	23	*
LEAF_NODE	390:11	390:11	24	*
FIELD	390:12	390:12	23	pix1
LEAF_NODE	390:12	390:12	24	pix1
LEAF_NODE	390:16	390:16	21	,
ARGUMENT	390:18	390:18	21	* pix2
UNARY_EXPR	390:18	390:19	22	* pix2
UNARY_OPERATOR	390:18	390:18	23	*
LEAF_NODE	390:18	390:18	24	*
FIELD	390:19	390:19	23	pix2
LEAF_NODE	390:19	390:19	24	pix2
LEAF_NODE	390:23	390:23	21	)
LEAF_NODE	390:24	390:24	19	;
LEAF_NODE	391:4	391:4	17	}
EXPR_STATEMENT	393:4	393:10	15	pix1 ++ ;
EXPR	393:4	393:4	16	pix1 ++
FIELD	393:4	393:8	17	pix1 ++
LEAF_NODE	393:4	393:4	18	pix1
LEAF_NODE	393:8	393:8	18	++
LEAF_NODE	393:10	393:10	16	;
EXPR_STATEMENT	394:4	394:10	15	pix2 ++ ;
EXPR	394:4	394:4	16	pix2 ++
FIELD	394:4	394:8	17	pix2 ++
LEAF_NODE	394:4	394:4	18	pix2
LEAF_NODE	394:8	394:8	18	++
LEAF_NODE	394:10	394:10	16	;
LEAF_NODE	395:3	395:3	14	}
LEAF_NODE	396:2	396:2	11	}
LEAF_NODE	397:1	397:1	8	}
SELECTION	397:3	397:8	6	
KEYWORD	397:3	397:3	7	else
LEAF_NODE	397:3	397:3	8	else
STATEMENTS	397:8	397:8	7	
SELECTION	397:8	397:49	8	
KEYWORD	397:8	397:8	9	if
LEAF_NODE	397:8	397:8	10	if
LEAF_NODE	397:11	397:11	9	(
CONDITION	397:12	397:12	9	sampleformat == SAMPLEFORMAT_IEEEFP
EXPR	397:12	397:28	10	sampleformat == SAMPLEFORMAT_IEEEFP
FIELD	397:12	397:12	11	sampleformat
LEAF_NODE	397:12	397:12	12	sampleformat
EQ_OPERATOR	397:25	397:25	11	==
LEAF_NODE	397:25	397:25	12	==
FIELD	397:28	397:28	11	SAMPLEFORMAT_IEEEFP
LEAF_NODE	397:28	397:28	12	SAMPLEFORMAT_IEEEFP
LEAF_NODE	397:47	397:47	9	)
STATEMENTS	397:49	413:1	9	
LEAF_NODE	397:49	397:49	10	{
STATEMENTS	398:2	400:2	10	
SIMPLE_DECL	398:2	398:48	11	float * pix1 ; pix1 = ( float * ) p1 , float * pix2 ; pix2 = ( float * ) p2 ;
INIT_DECL_LIST	398:2	398:2	12	float * pix1 ; pix1 = ( float * ) p1 , float * pix2 ; pix2 = ( float * ) p2
VAR_DECL	398:2	398:9	13	float * pix1 ; pix1 = ( float * ) p1
TYPE	398:2	398:8	14	float *
TYPE_NAME	398:2	398:2	15	float
LEAF_NODE	398:2	398:2	16	float
POINTER	398:8	398:8	15	*
LEAF_NODE	398:8	398:8	16	*
NAME	398:9	398:9	14	pix1
LEAF_NODE	398:9	398:9	15	pix1
LEAF_NODE	0:0	0:0	14	;
INIT	398:9	398:9	14	pix1 = ( float * ) p1
ASSIGN	398:9	398:16	15	pix1 = ( float * ) p1
LVAL	398:9	398:9	16	pix1
NAME	398:9	398:9	17	pix1
LEAF_NODE	398:9	398:9	18	pix1
ASSIGN_OP	398:14	398:14	16	=
LEAF_NODE	398:14	398:14	17	=
RVAL	398:16	398:25	16	( float * ) p1
LEAF_NODE	398:16	398:16	17	(
TYPE_NAME	398:17	398:17	17	float
LEAF_NODE	398:17	398:17	18	float
LEAF_NODE	398:23	398:23	17	*
LEAF_NODE	398:24	398:24	17	)
FIELD	398:25	398:25	17	p1
LEAF_NODE	398:25	398:25	18	p1
LEAF_NODE	398:27	398:27	13	,
VAR_DECL	398:2	398:30	13	float * pix2 ; pix2 = ( float * ) p2
TYPE	398:2	398:29	14	float *
TYPE_NAME	398:2	398:2	15	float
LEAF_NODE	398:2	398:2	16	float
POINTER	398:29	398:29	15	*
LEAF_NODE	398:29	398:29	16	*
NAME	398:30	398:30	14	pix2
LEAF_NODE	398:30	398:30	15	pix2
LEAF_NODE	0:0	0:0	14	;
INIT	398:30	398:30	14	pix2 = ( float * ) p2
ASSIGN	398:30	398:37	15	pix2 = ( float * ) p2
LVAL	398:30	398:30	16	pix2
NAME	398:30	398:30	17	pix2
LEAF_NODE	398:30	398:30	18	pix2
ASSIGN_OP	398:35	398:35	16	=
LEAF_NODE	398:35	398:35	17	=
RVAL	398:37	398:46	16	( float * ) p2
LEAF_NODE	398:37	398:37	17	(
TYPE_NAME	398:38	398:38	17	float
LEAF_NODE	398:38	398:38	18	float
LEAF_NODE	398:44	398:44	17	*
LEAF_NODE	398:45	398:45	17	)
FIELD	398:46	398:46	17	p2
LEAF_NODE	398:46	398:46	18	p2
LEAF_NODE	398:48	398:48	12	;
ITERATION	400:2	400:41	11	
KEYWORD	400:2	400:2	12	for
LEAF_NODE	400:2	400:2	13	for
LEAF_NODE	400:6	400:6	12	(
FOR_INIT	400:7	400:14	12	pix = 0 ;
EXPR	400:7	400:7	13	pix = 0
ASSIGN	400:7	400:13	14	pix = 0
LVAL	400:7	400:7	15	pix
FIELD	400:7	400:7	16	pix
LEAF_NODE	400:7	400:7	17	pix
ASSIGN_OP	400:11	400:11	15	=
LEAF_NODE	400:11	400:11	16	=
RVAL	400:13	400:13	15	0
FIELD	400:13	400:13	16	0
LEAF_NODE	400:13	400:13	17	0
LEAF_NODE	400:14	400:14	13	;
CONDITION	400:16	400:16	12	pix < imagewidth
EXPR	400:16	400:22	13	pix < imagewidth
FIELD	400:16	400:16	14	pix
LEAF_NODE	400:16	400:16	15	pix
REL_OPERATOR	400:20	400:20	14	<
LEAF_NODE	400:20	400:20	15	<
FIELD	400:22	400:22	14	imagewidth
LEAF_NODE	400:22	400:22	15	imagewidth
LEAF_NODE	400:32	400:32	12	;
FOR_EXPR	400:34	400:34	12	pix ++
EXPR	400:34	400:34	13	pix ++
FIELD	400:34	400:37	14	pix ++
LEAF_NODE	400:34	400:34	15	pix
LEAF_NODE	400:37	400:37	15	++
LEAF_NODE	400:39	400:39	12	)
STATEMENTS	400:41	412:2	12	
LEAF_NODE	400:41	400:41	13	{
STATEMENTS	401:3	403:3	13	
SIMPLE_DECL	401:3	401:8	14	int s ;
VAR_DECL	401:3	401:7	15	int s
TYPE	401:3	401:3	16	int
TYPE_NAME	401:3	401:3	17	int
LEAF_NODE	401:3	401:3	18	int
NAME	401:7	401:7	16	s
LEAF_NODE	401:7	401:7	17	s
LEAF_NODE	401:8	401:8	15	;
ITERATION	403:3	403:40	14	
KEYWORD	403:3	403:3	15	for
LEAF_NODE	403:3	403:3	16	for
LEAF_NODE	403:6	403:6	15	(
FOR_INIT	403:7	403:12	15	s = 0 ;
EXPR	403:7	403:7	16	s = 0
ASSIGN	403:7	403:11	17	s = 0
LVAL	403:7	403:7	18	s
FIELD	403:7	403:7	19	s
LEAF_NODE	403:7	403:7	20	s
ASSIGN_OP	403:9	403:9	18	=
LEAF_NODE	403:9	403:9	19	=
RVAL	403:11	403:11	18	0
FIELD	403:11	403:11	19	0
LEAF_NODE	403:11	403:11	20	0
LEAF_NODE	403:12	403:12	16	;
CONDITION	403:14	403:14	15	s < samples_to_test
EXPR	403:14	403:18	16	s < samples_to_test
FIELD	403:14	403:14	17	s
LEAF_NODE	403:14	403:14	18	s
REL_OPERATOR	403:16	403:16	17	<
LEAF_NODE	403:16	403:16	18	<
FIELD	403:18	403:18	17	samples_to_test
LEAF_NODE	403:18	403:18	18	samples_to_test
LEAF_NODE	403:33	403:33	15	;
FOR_EXPR	403:35	403:35	15	s ++
EXPR	403:35	403:35	16	s ++
FIELD	403:35	403:36	17	s ++
LEAF_NODE	403:35	403:35	18	s
LEAF_NODE	403:36	403:36	18	++
LEAF_NODE	403:38	403:38	15	)
STATEMENTS	403:40	411:3	15	
LEAF_NODE	403:40	403:40	16	{
STATEMENTS	404:4	410:4	16	
SELECTION	404:4	404:46	17	
KEYWORD	404:4	404:4	18	if
LEAF_NODE	404:4	404:4	19	if
LEAF_NODE	404:7	404:7	18	(
CONDITION	404:8	404:8	18	fabs ( * pix1 - * pix2 ) < 0.000000000001
EXPR	404:8	404:30	19	fabs ( * pix1 - * pix2 ) < 0.000000000001
FUNCTION_CALL	404:8	404:26	20	fabs ( * pix1 - * pix2 )
CALLEE	404:8	404:8	21	fabs
LEAF_NODE	404:8	404:8	22	fabs
LEAF_NODE	404:12	404:12	21	(
ARGUMENT	404:13	404:21	21	* pix1 - * pix2
UNARY_EXPR	404:13	404:14	22	* pix1
UNARY_OPERATOR	404:13	404:13	23	*
LEAF_NODE	404:13	404:13	24	*
FIELD	404:14	404:14	23	pix1
LEAF_NODE	404:14	404:14	24	pix1
LEAF_NODE	404:19	404:19	22	-
UNARY_EXPR	404:21	404:22	22	* pix2
UNARY_OPERATOR	404:21	404:21	23	*
LEAF_NODE	404:21	404:21	24	*
FIELD	404:22	404:22	23	pix2
LEAF_NODE	404:22	404:22	24	pix2
LEAF_NODE	404:26	404:26	21	)
REL_OPERATOR	404:28	404:28	20	<
LEAF_NODE	404:28	404:28	21	<
FIELD	404:30	404:30	20	0.000000000001
LEAF_NODE	404:30	404:30	21	0.000000000001
LEAF_NODE	404:44	404:44	18	)
STATEMENTS	404:46	407:4	18	
LEAF_NODE	404:46	404:46	19	{
STATEMENTS	405:5	405:5	19	
EXPR_STATEMENT	405:5	406:26	20	PrintFloatDiff ( row , sample , pix , * pix1 , * pix2 ) ;
EXPR	405:5	405:5	21	PrintFloatDiff ( row , sample , pix , * pix1 , * pix2 )
FUNCTION_CALL	405:5	406:25	22	PrintFloatDiff ( row , sample , pix , * pix1 , * pix2 )
CALLEE	405:5	405:5	23	PrintFloatDiff
LEAF_NODE	405:5	405:5	24	PrintFloatDiff
LEAF_NODE	405:19	405:19	23	(
ARGUMENT	405:20	405:20	23	row
FIELD	405:20	405:20	24	row
LEAF_NODE	405:20	405:20	25	row
LEAF_NODE	405:23	405:23	23	,
ARGUMENT	405:25	405:25	23	sample
FIELD	405:25	405:25	24	sample
LEAF_NODE	405:25	405:25	25	sample
LEAF_NODE	405:31	405:31	23	,
ARGUMENT	405:33	405:33	23	pix
FIELD	405:33	405:33	24	pix
LEAF_NODE	405:33	405:33	25	pix
LEAF_NODE	405:36	405:36	23	,
ARGUMENT	406:13	406:13	23	* pix1
UNARY_EXPR	406:13	406:14	24	* pix1
UNARY_OPERATOR	406:13	406:13	25	*
LEAF_NODE	406:13	406:13	26	*
FIELD	406:14	406:14	25	pix1
LEAF_NODE	406:14	406:14	26	pix1
LEAF_NODE	406:18	406:18	23	,
ARGUMENT	406:20	406:20	23	* pix2
UNARY_EXPR	406:20	406:21	24	* pix2
UNARY_OPERATOR	406:20	406:20	25	*
LEAF_NODE	406:20	406:20	26	*
FIELD	406:21	406:21	25	pix2
LEAF_NODE	406:21	406:21	26	pix2
LEAF_NODE	406:25	406:25	23	)
LEAF_NODE	406:26	406:26	21	;
LEAF_NODE	407:4	407:4	19	}
EXPR_STATEMENT	409:4	409:10	17	pix1 ++ ;
EXPR	409:4	409:4	18	pix1 ++
FIELD	409:4	409:8	19	pix1 ++
LEAF_NODE	409:4	409:4	20	pix1
LEAF_NODE	409:8	409:8	20	++
LEAF_NODE	409:10	409:10	18	;
EXPR_STATEMENT	410:4	410:10	17	pix2 ++ ;
EXPR	410:4	410:4	18	pix2 ++
FIELD	410:4	410:8	19	pix2 ++
LEAF_NODE	410:4	410:4	20	pix2
LEAF_NODE	410:8	410:8	20	++
LEAF_NODE	410:10	410:10	18	;
LEAF_NODE	411:3	411:3	16	}
LEAF_NODE	412:2	412:2	13	}
LEAF_NODE	413:1	413:1	10	}
SELECTION	413:3	413:8	6	
KEYWORD	413:3	413:3	7	else
LEAF_NODE	413:3	413:3	8	else
STATEMENTS	413:8	417:1	7	
LEAF_NODE	413:8	413:8	8	{
STATEMENTS	414:4	416:4	8	
EXPR_STATEMENT	414:4	415:18	9	fprintf ( stderr , "Sample format %d is not supported.\n" , sampleformat ) ;
EXPR	414:4	414:4	10	fprintf ( stderr , "Sample format %d is not supported.\n" , sampleformat )
FUNCTION_CALL	414:4	415:17	11	fprintf ( stderr , "Sample format %d is not supported.\n" , sampleformat )
CALLEE	414:4	414:4	12	fprintf
LEAF_NODE	414:4	414:4	13	fprintf
LEAF_NODE	414:11	414:11	12	(
ARGUMENT	414:12	414:12	12	stderr
FIELD	414:12	414:12	13	stderr
LEAF_NODE	414:12	414:12	14	stderr
LEAF_NODE	414:18	414:18	12	,
ARGUMENT	414:20	414:20	12	"Sample format %d is not supported.\n"
FIELD	414:20	414:20	13	"Sample format %d is not supported.\n"
LEAF_NODE	414:20	414:20	14	"Sample format %d is not supported.\n"
LEAF_NODE	414:58	414:58	12	,
ARGUMENT	415:5	415:5	12	sampleformat
FIELD	415:5	415:5	13	sampleformat
LEAF_NODE	415:5	415:5	14	sampleformat
LEAF_NODE	415:17	415:17	12	)
LEAF_NODE	415:18	415:18	10	;
JUMP_STATEMENT	416:4	416:13	9	return - 1 ;
KEYWORD	416:4	416:4	10	return
LEAF_NODE	416:4	416:4	11	return
DESTINATION	416:11	416:11	10	- 1
EXPR	416:11	416:11	11	- 1
UNARY_EXPR	416:11	416:12	12	- 1
UNARY_OPERATOR	416:11	416:11	13	-
LEAF_NODE	416:11	416:11	14	-
FIELD	416:12	416:12	13	1
LEAF_NODE	416:12	416:12	14	1
LEAF_NODE	416:13	416:13	10	;
LEAF_NODE	417:1	417:1	8	}
JUMP_STATEMENT	418:8	418:13	6	break DESTINATION ;
KEYWORD	418:8	418:8	7	break
LEAF_NODE	418:8	418:8	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	418:13	418:13	7	;
LABEL	419:6	419:13	6	default :
LEAF_NODE	419:6	419:6	7	default
LEAF_NODE	419:13	419:13	7	:
EXPR_STATEMENT	420:1	420:67	6	fprintf ( stderr , "Bit depth %d is not supported.\n" , bitspersample ) ;
EXPR	420:1	420:1	7	fprintf ( stderr , "Bit depth %d is not supported.\n" , bitspersample )
FUNCTION_CALL	420:1	420:66	8	fprintf ( stderr , "Bit depth %d is not supported.\n" , bitspersample )
CALLEE	420:1	420:1	9	fprintf
LEAF_NODE	420:1	420:1	10	fprintf
LEAF_NODE	420:8	420:8	9	(
ARGUMENT	420:9	420:9	9	stderr
FIELD	420:9	420:9	10	stderr
LEAF_NODE	420:9	420:9	11	stderr
LEAF_NODE	420:15	420:15	9	,
ARGUMENT	420:17	420:17	9	"Bit depth %d is not supported.\n"
FIELD	420:17	420:17	10	"Bit depth %d is not supported.\n"
LEAF_NODE	420:17	420:17	11	"Bit depth %d is not supported.\n"
LEAF_NODE	420:51	420:51	9	,
ARGUMENT	420:53	420:53	9	bitspersample
FIELD	420:53	420:53	10	bitspersample
LEAF_NODE	420:53	420:53	11	bitspersample
LEAF_NODE	420:66	420:66	9	)
LEAF_NODE	420:67	420:67	7	;
JUMP_STATEMENT	421:1	421:10	6	return - 1 ;
KEYWORD	421:1	421:1	7	return
LEAF_NODE	421:1	421:1	8	return
DESTINATION	421:8	421:8	7	- 1
EXPR	421:8	421:8	8	- 1
UNARY_EXPR	421:8	421:9	9	- 1
UNARY_OPERATOR	421:8	421:8	10	-
LEAF_NODE	421:8	421:8	11	-
FIELD	421:9	421:9	10	1
LEAF_NODE	421:9	421:9	11	1
LEAF_NODE	421:10	421:10	7	;
LEAF_NODE	422:4	422:4	5	}
JUMP_STATEMENT	424:4	424:12	3	return 0 ;
KEYWORD	424:4	424:4	4	return
LEAF_NODE	424:4	424:4	5	return
DESTINATION	424:11	424:11	4	0
EXPR	424:11	424:11	5	0
FIELD	424:11	424:11	6	0
LEAF_NODE	424:11	424:11	7	0
LEAF_NODE	424:12	424:12	4	;
LEAF_NODE	425:0	425:0	2	}
FUNCTION_DEF	427:0	483:0	1	
RETURN_TYPE	427:0	427:7	2	static void
LEAF_NODE	427:0	427:0	3	static
TYPE_NAME	427:7	427:7	3	void
LEAF_NODE	427:7	427:7	4	void
FUNCTION_NAME	428:0	428:0	2	PrintIntDiff
LEAF_NODE	428:0	428:0	3	PrintIntDiff
PARAMETER_LIST	428:12	428:69	2	( uint32 row , int sample , uint32 pix , uint32 w1 , uint32 w2 )
LEAF_NODE	428:12	428:12	3	(
PARAMETER_DECL	428:13	428:20	3	uint32 row
TYPE	428:13	428:13	4	uint32
TYPE_NAME	428:13	428:13	5	uint32
LEAF_NODE	428:13	428:13	6	uint32
NAME	428:20	428:20	4	row
LEAF_NODE	428:20	428:20	5	row
LEAF_NODE	428:23	428:23	3	,
PARAMETER_DECL	428:25	428:29	3	int sample
TYPE	428:25	428:25	4	int
TYPE_NAME	428:25	428:25	5	int
LEAF_NODE	428:25	428:25	6	int
NAME	428:29	428:29	4	sample
LEAF_NODE	428:29	428:29	5	sample
LEAF_NODE	428:35	428:35	3	,
PARAMETER_DECL	428:37	428:44	3	uint32 pix
TYPE	428:37	428:37	4	uint32
TYPE_NAME	428:37	428:37	5	uint32
LEAF_NODE	428:37	428:37	6	uint32
NAME	428:44	428:44	4	pix
LEAF_NODE	428:44	428:44	5	pix
LEAF_NODE	428:47	428:47	3	,
PARAMETER_DECL	428:49	428:56	3	uint32 w1
TYPE	428:49	428:49	4	uint32
TYPE_NAME	428:49	428:49	5	uint32
LEAF_NODE	428:49	428:49	6	uint32
NAME	428:56	428:56	4	w1
LEAF_NODE	428:56	428:56	5	w1
LEAF_NODE	428:58	428:58	3	,
PARAMETER_DECL	428:60	428:67	3	uint32 w2
TYPE	428:60	428:60	4	uint32
TYPE_NAME	428:60	428:60	5	uint32
LEAF_NODE	428:60	428:60	6	uint32
NAME	428:67	428:67	4	w2
LEAF_NODE	428:67	428:67	5	w2
LEAF_NODE	428:69	428:69	3	)
LEAF_NODE	429:0	429:0	2	{
STATEMENTS	430:1	432:1	2	
SELECTION	430:1	431:2	3	
KEYWORD	430:1	430:1	4	if
LEAF_NODE	430:1	430:1	5	if
LEAF_NODE	430:4	430:4	4	(
CONDITION	430:5	430:5	4	sample < 0
EXPR	430:5	430:14	5	sample < 0
FIELD	430:5	430:5	6	sample
LEAF_NODE	430:5	430:5	7	sample
REL_OPERATOR	430:12	430:12	6	<
LEAF_NODE	430:12	430:12	7	<
FIELD	430:14	430:14	6	0
LEAF_NODE	430:14	430:14	7	0
LEAF_NODE	430:15	430:15	4	)
STATEMENTS	431:2	431:2	4	
EXPR_STATEMENT	431:2	431:12	5	sample = 0 ;
EXPR	431:2	431:2	6	sample = 0
ASSIGN	431:2	431:11	7	sample = 0
LVAL	431:2	431:2	8	sample
FIELD	431:2	431:2	9	sample
LEAF_NODE	431:2	431:2	10	sample
ASSIGN_OP	431:9	431:9	8	=
LEAF_NODE	431:9	431:9	9	=
RVAL	431:11	431:11	8	0
FIELD	431:11	431:11	9	0
LEAF_NODE	431:11	431:11	10	0
LEAF_NODE	431:12	431:12	6	;
SELECTION	432:1	432:24	3	
KEYWORD	432:1	432:1	4	switch
LEAF_NODE	432:1	432:1	5	switch
LEAF_NODE	432:8	432:8	4	(
CONDITION	432:9	432:9	4	bitspersample
EXPR	432:9	432:9	5	bitspersample
FIELD	432:9	432:9	6	bitspersample
LEAF_NODE	432:9	432:9	7	bitspersample
LEAF_NODE	432:22	432:22	4	)
STATEMENTS	432:24	482:1	4	
LEAF_NODE	432:24	432:24	5	{
STATEMENTS	433:1	481:2	5	
LABEL	433:1	433:7	6	case 1 :
LEAF_NODE	433:1	433:1	7	case
LEAF_NODE	433:6	433:6	7	1
LEAF_NODE	433:7	433:7	7	:
LABEL	434:1	434:7	6	case 2 :
LEAF_NODE	434:1	434:1	7	case
LEAF_NODE	434:6	434:6	7	2
LEAF_NODE	434:7	434:7	7	:
LABEL	435:1	435:7	6	case 4 :
LEAF_NODE	435:1	435:1	7	case
LEAF_NODE	435:6	435:6	7	4
LEAF_NODE	435:7	435:7	7	:
LEAF_NODE	436:5	436:5	6	{
STATEMENTS	437:2	457:2	6	
SIMPLE_DECL	437:2	437:23	7	int32 mask1 , int32 mask2 , int32 s ;
INIT_DECL_LIST	437:2	437:2	8	int32 mask1 , int32 mask2 , int32 s
VAR_DECL	437:2	437:8	9	int32 mask1
TYPE	437:2	437:2	10	int32
TYPE_NAME	437:2	437:2	11	int32
LEAF_NODE	437:2	437:2	12	int32
NAME	437:8	437:8	10	mask1
LEAF_NODE	437:8	437:8	11	mask1
LEAF_NODE	437:13	437:13	9	,
INIT_DECL_LIST	437:2	437:2	9	int32 mask2 , int32 s
VAR_DECL	437:2	437:15	10	int32 mask2
TYPE	437:2	437:2	11	int32
TYPE_NAME	437:2	437:2	12	int32
LEAF_NODE	437:2	437:2	13	int32
NAME	437:15	437:15	11	mask2
LEAF_NODE	437:15	437:15	12	mask2
LEAF_NODE	437:20	437:20	10	,
VAR_DECL	437:2	437:22	10	int32 s
TYPE	437:2	437:2	11	int32
TYPE_NAME	437:2	437:2	12	int32
LEAF_NODE	437:2	437:2	13	int32
NAME	437:22	437:22	11	s
LEAF_NODE	437:22	437:22	12	s
LEAF_NODE	437:23	437:23	8	;
EXPR_STATEMENT	440:8	440:47	7	mask1 = ( ( int32 ) 1 << bitspersample ) - 1 ;
EXPR	440:8	440:8	8	mask1 = ( ( int32 ) 1 << bitspersample ) - 1
ASSIGN	440:8	440:16	9	mask1 = ( ( int32 ) 1 << bitspersample ) - 1
LVAL	440:8	440:8	10	mask1
FIELD	440:8	440:8	11	mask1
LEAF_NODE	440:8	440:8	12	mask1
ASSIGN_OP	440:14	440:14	10	=
LEAF_NODE	440:14	440:14	11	=
RVAL	440:16	440:46	10	( ( int32 ) 1 << bitspersample ) - 1
LEAF_NODE	440:16	440:16	11	(
LEAF_NODE	440:17	440:17	11	(
TYPE_NAME	440:18	440:18	11	int32
LEAF_NODE	440:18	440:18	12	int32
LEAF_NODE	440:23	440:23	11	)
FIELD	440:24	440:24	11	1
LEAF_NODE	440:24	440:24	12	1
LEAF_NODE	440:26	440:26	11	<<
FIELD	440:29	440:29	11	bitspersample
LEAF_NODE	440:29	440:29	12	bitspersample
LEAF_NODE	440:42	440:42	11	)
LEAF_NODE	440:44	440:44	11	-
FIELD	440:46	440:46	11	1
LEAF_NODE	440:46	440:46	12	1
LEAF_NODE	440:47	440:47	8	;
EXPR_STATEMENT	441:2	441:25	7	s = ( 8 - bitspersample ) ;
EXPR	441:2	441:2	8	s = ( 8 - bitspersample )
ASSIGN	441:2	441:6	9	s = ( 8 - bitspersample )
LVAL	441:2	441:2	10	s
FIELD	441:2	441:2	11	s
LEAF_NODE	441:2	441:2	12	s
ASSIGN_OP	441:4	441:4	10	=
LEAF_NODE	441:4	441:4	11	=
RVAL	441:6	441:24	10	( 8 - bitspersample )
LEAF_NODE	441:6	441:6	11	(
FIELD	441:7	441:7	11	8
LEAF_NODE	441:7	441:7	12	8
LEAF_NODE	441:9	441:9	11	-
FIELD	441:11	441:11	11	bitspersample
LEAF_NODE	441:11	441:11	12	bitspersample
LEAF_NODE	441:24	441:24	11	)
LEAF_NODE	441:25	441:25	8	;
EXPR_STATEMENT	442:2	442:20	7	mask2 = mask1 << s ;
EXPR	442:2	442:2	8	mask2 = mask1 << s
ASSIGN	442:2	442:10	9	mask2 = mask1 << s
LVAL	442:2	442:2	10	mask2
FIELD	442:2	442:2	11	mask2
LEAF_NODE	442:2	442:2	12	mask2
ASSIGN_OP	442:8	442:8	10	=
LEAF_NODE	442:8	442:8	11	=
RVAL	442:10	442:19	10	mask1 << s
FIELD	442:10	442:10	11	mask1
LEAF_NODE	442:10	442:10	12	mask1
LEAF_NODE	442:16	442:16	11	<<
FIELD	442:19	442:19	11	s
LEAF_NODE	442:19	442:19	12	s
LEAF_NODE	442:20	442:20	8	;
LEAF_NODE	443:2	443:2	7	for
LEAF_NODE	443:6	443:6	7	(
LEAF_NODE	443:7	443:7	7	;
EXPR_STATEMENT	443:9	443:34	7	mask2 && pix < imagewidth ;
EXPR	443:9	443:9	8	mask2 && pix < imagewidth
AND	443:9	443:18	9	mask2 && pix < imagewidth
EXPR	443:9	443:9	10	mask2
FIELD	443:9	443:9	11	mask2
LEAF_NODE	443:9	443:9	12	mask2
LEAF_NODE	443:15	443:15	10	&&
EXPR	443:18	443:24	10	pix < imagewidth
FIELD	443:18	443:18	11	pix
LEAF_NODE	443:18	443:18	12	pix
REL_OPERATOR	443:22	443:22	11	<
LEAF_NODE	443:22	443:22	12	<
FIELD	443:24	443:24	11	imagewidth
LEAF_NODE	443:24	443:24	12	imagewidth
LEAF_NODE	443:34	443:34	8	;
LEAF_NODE	444:7	444:7	7	mask2
LEAF_NODE	444:13	444:13	7	>>=
LEAF_NODE	444:17	444:17	7	bitspersample
LEAF_NODE	444:30	444:30	7	,
LEAF_NODE	444:32	444:32	7	s
LEAF_NODE	444:34	444:34	7	-=
LEAF_NODE	444:37	444:37	7	bitspersample
LEAF_NODE	444:50	444:50	7	,
LEAF_NODE	444:52	444:52	7	pix
LEAF_NODE	444:55	444:55	7	++
LEAF_NODE	444:57	444:57	7	)
LEAF_NODE	444:59	444:59	7	{
STATEMENTS	445:3	445:3	7	
SELECTION	445:3	445:36	8	
KEYWORD	445:3	445:3	9	if
LEAF_NODE	445:3	445:3	10	if
LEAF_NODE	445:6	445:6	9	(
CONDITION	445:7	445:7	9	( w1 & mask2 ) ^ ( w2 & mask2 )
EXPR	445:7	445:33	10	( w1 & mask2 ) ^ ( w2 & mask2 )
LEAF_NODE	445:7	445:7	11	(
FIELD	445:8	445:8	11	w1
LEAF_NODE	445:8	445:8	12	w1
LEAF_NODE	445:11	445:11	11	&
FIELD	445:13	445:13	11	mask2
LEAF_NODE	445:13	445:13	12	mask2
LEAF_NODE	445:18	445:18	11	)
LEAF_NODE	445:20	445:20	11	^
LEAF_NODE	445:22	445:22	11	(
FIELD	445:23	445:23	11	w2
LEAF_NODE	445:23	445:23	12	w2
LEAF_NODE	445:26	445:26	11	&
FIELD	445:28	445:28	11	mask2
LEAF_NODE	445:28	445:28	12	mask2
LEAF_NODE	445:33	445:33	11	)
LEAF_NODE	445:34	445:34	9	)
STATEMENTS	445:36	455:3	9	
LEAF_NODE	445:36	445:36	10	{
STATEMENTS	446:4	453:4	10	
EXPR_STATEMENT	446:4	452:39	11	printf ( "Scanline %lu, pixel %lu, sample %d: %01x %01x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) ( ( w1 >> s ) & mask1 ) , ( unsigned int ) ( ( w2 >> s ) & mask1 ) ) ;
EXPR	446:4	446:4	12	printf ( "Scanline %lu, pixel %lu, sample %d: %01x %01x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) ( ( w1 >> s ) & mask1 ) , ( unsigned int ) ( ( w2 >> s ) & mask1 ) )
FUNCTION_CALL	446:4	452:38	13	printf ( "Scanline %lu, pixel %lu, sample %d: %01x %01x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) ( ( w1 >> s ) & mask1 ) , ( unsigned int ) ( ( w2 >> s ) & mask1 ) )
CALLEE	446:4	446:4	14	printf
LEAF_NODE	446:4	446:4	15	printf
LEAF_NODE	446:10	446:10	14	(
ARGUMENT	447:3	447:3	14	"Scanline %lu, pixel %lu, sample %d: %01x %01x\n"
FIELD	447:3	447:3	15	"Scanline %lu, pixel %lu, sample %d: %01x %01x\n"
LEAF_NODE	447:3	447:3	16	"Scanline %lu, pixel %lu, sample %d: %01x %01x\n"
LEAF_NODE	447:52	447:52	14	,
ARGUMENT	448:9	448:25	14	( unsigned long ) row
LEAF_NODE	448:9	448:9	15	(
TYPE_NAME	448:10	448:19	15	unsigned long
LEAF_NODE	448:10	448:10	16	unsigned
LEAF_NODE	448:19	448:19	16	long
LEAF_NODE	448:23	448:23	15	)
FIELD	448:25	448:25	15	row
LEAF_NODE	448:25	448:25	16	row
LEAF_NODE	448:28	448:28	14	,
ARGUMENT	449:5	449:21	14	( unsigned long ) pix
LEAF_NODE	449:5	449:5	15	(
TYPE_NAME	449:6	449:15	15	unsigned long
LEAF_NODE	449:6	449:6	16	unsigned
LEAF_NODE	449:15	449:15	16	long
LEAF_NODE	449:19	449:19	15	)
FIELD	449:21	449:21	15	pix
LEAF_NODE	449:21	449:21	16	pix
LEAF_NODE	449:24	449:24	14	,
ARGUMENT	450:5	450:5	14	sample
FIELD	450:5	450:5	15	sample
LEAF_NODE	450:5	450:5	16	sample
LEAF_NODE	450:11	450:11	14	,
ARGUMENT	451:5	451:37	14	( unsigned int ) ( ( w1 >> s ) & mask1 )
LEAF_NODE	451:5	451:5	15	(
TYPE_NAME	451:6	451:15	15	unsigned int
LEAF_NODE	451:6	451:6	16	unsigned
LEAF_NODE	451:15	451:15	16	int
LEAF_NODE	451:18	451:18	15	)
LEAF_NODE	451:19	451:19	15	(
LEAF_NODE	451:20	451:20	15	(
FIELD	451:21	451:21	15	w1
LEAF_NODE	451:21	451:21	16	w1
LEAF_NODE	451:24	451:24	15	>>
FIELD	451:27	451:27	15	s
LEAF_NODE	451:27	451:27	16	s
LEAF_NODE	451:28	451:28	15	)
LEAF_NODE	451:30	451:30	15	&
FIELD	451:32	451:32	15	mask1
LEAF_NODE	451:32	451:32	16	mask1
LEAF_NODE	451:37	451:37	15	)
LEAF_NODE	451:38	451:38	14	,
ARGUMENT	452:5	452:37	14	( unsigned int ) ( ( w2 >> s ) & mask1 )
LEAF_NODE	452:5	452:5	15	(
TYPE_NAME	452:6	452:15	15	unsigned int
LEAF_NODE	452:6	452:6	16	unsigned
LEAF_NODE	452:15	452:15	16	int
LEAF_NODE	452:18	452:18	15	)
LEAF_NODE	452:19	452:19	15	(
LEAF_NODE	452:20	452:20	15	(
FIELD	452:21	452:21	15	w2
LEAF_NODE	452:21	452:21	16	w2
LEAF_NODE	452:24	452:24	15	>>
FIELD	452:27	452:27	15	s
LEAF_NODE	452:27	452:27	16	s
LEAF_NODE	452:28	452:28	15	)
LEAF_NODE	452:30	452:30	15	&
FIELD	452:32	452:32	15	mask1
LEAF_NODE	452:32	452:32	16	mask1
LEAF_NODE	452:37	452:37	15	)
LEAF_NODE	452:38	452:38	14	)
LEAF_NODE	452:39	452:39	12	;
SELECTION	453:4	454:5	11	
KEYWORD	453:4	453:4	12	if
LEAF_NODE	453:4	453:4	13	if
LEAF_NODE	453:7	453:7	12	(
CONDITION	453:8	453:8	12	-- stopondiff == 0
EXPR	453:8	453:24	13	-- stopondiff == 0
LEAF_NODE	453:8	453:8	14	--
FIELD	453:10	453:10	14	stopondiff
LEAF_NODE	453:10	453:10	15	stopondiff
EQ_OPERATOR	453:21	453:21	14	==
LEAF_NODE	453:21	453:21	15	==
FIELD	453:24	453:24	14	0
LEAF_NODE	453:24	453:24	15	0
LEAF_NODE	453:25	453:25	12	)
STATEMENTS	454:5	454:5	12	
EXPR_STATEMENT	454:5	454:12	13	exit ( 1 ) ;
EXPR	454:5	454:5	14	exit ( 1 )
FUNCTION_CALL	454:5	454:11	15	exit ( 1 )
CALLEE	454:5	454:5	16	exit
LEAF_NODE	454:5	454:5	17	exit
LEAF_NODE	454:9	454:9	16	(
ARGUMENT	454:10	454:10	16	1
FIELD	454:10	454:10	17	1
LEAF_NODE	454:10	454:10	18	1
LEAF_NODE	454:11	454:11	16	)
LEAF_NODE	454:12	454:12	14	;
LEAF_NODE	455:3	455:3	10	}
LEAF_NODE	456:2	456:2	7	}
JUMP_STATEMENT	457:2	457:7	7	break DESTINATION ;
KEYWORD	457:2	457:2	8	break
LEAF_NODE	457:2	457:2	9	break
LEAF_NODE	0:0	0:0	8	DESTINATION
LEAF_NODE	457:7	457:7	8	;
LEAF_NODE	458:5	458:5	6	}
LABEL	459:1	459:7	6	case 8 :
LEAF_NODE	459:1	459:1	7	case
LEAF_NODE	459:6	459:6	7	8
LEAF_NODE	459:7	459:7	7	:
EXPR_STATEMENT	460:2	462:46	6	printf ( "Scanline %lu, pixel %lu, sample %d: %02x %02x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 ) ;
EXPR	460:2	460:2	7	printf ( "Scanline %lu, pixel %lu, sample %d: %02x %02x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 )
FUNCTION_CALL	460:2	462:45	8	printf ( "Scanline %lu, pixel %lu, sample %d: %02x %02x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 )
CALLEE	460:2	460:2	9	printf
LEAF_NODE	460:2	460:2	10	printf
LEAF_NODE	460:8	460:8	9	(
ARGUMENT	460:9	460:9	9	"Scanline %lu, pixel %lu, sample %d: %02x %02x\n"
FIELD	460:9	460:9	10	"Scanline %lu, pixel %lu, sample %d: %02x %02x\n"
LEAF_NODE	460:9	460:9	11	"Scanline %lu, pixel %lu, sample %d: %02x %02x\n"
LEAF_NODE	460:58	460:58	9	,
ARGUMENT	461:9	461:25	9	( unsigned long ) row
LEAF_NODE	461:9	461:9	10	(
TYPE_NAME	461:10	461:19	10	unsigned long
LEAF_NODE	461:10	461:10	11	unsigned
LEAF_NODE	461:19	461:19	11	long
LEAF_NODE	461:23	461:23	10	)
FIELD	461:25	461:25	10	row
LEAF_NODE	461:25	461:25	11	row
LEAF_NODE	461:28	461:28	9	,
ARGUMENT	461:30	461:46	9	( unsigned long ) pix
LEAF_NODE	461:30	461:30	10	(
TYPE_NAME	461:31	461:40	10	unsigned long
LEAF_NODE	461:31	461:31	11	unsigned
LEAF_NODE	461:40	461:40	11	long
LEAF_NODE	461:44	461:44	10	)
FIELD	461:46	461:46	10	pix
LEAF_NODE	461:46	461:46	11	pix
LEAF_NODE	461:49	461:49	9	,
ARGUMENT	461:51	461:51	9	sample
FIELD	461:51	461:51	10	sample
LEAF_NODE	461:51	461:51	11	sample
LEAF_NODE	461:57	461:57	9	,
ARGUMENT	462:9	462:24	9	( unsigned int ) w1
LEAF_NODE	462:9	462:9	10	(
TYPE_NAME	462:10	462:19	10	unsigned int
LEAF_NODE	462:10	462:10	11	unsigned
LEAF_NODE	462:19	462:19	11	int
LEAF_NODE	462:22	462:22	10	)
FIELD	462:24	462:24	10	w1
LEAF_NODE	462:24	462:24	11	w1
LEAF_NODE	462:26	462:26	9	,
ARGUMENT	462:28	462:43	9	( unsigned int ) w2
LEAF_NODE	462:28	462:28	10	(
TYPE_NAME	462:29	462:38	10	unsigned int
LEAF_NODE	462:29	462:29	11	unsigned
LEAF_NODE	462:38	462:38	11	int
LEAF_NODE	462:41	462:41	10	)
FIELD	462:43	462:43	10	w2
LEAF_NODE	462:43	462:43	11	w2
LEAF_NODE	462:45	462:45	9	)
LEAF_NODE	462:46	462:46	7	;
SELECTION	463:2	464:3	6	
KEYWORD	463:2	463:2	7	if
LEAF_NODE	463:2	463:2	8	if
LEAF_NODE	463:5	463:5	7	(
CONDITION	463:6	463:6	7	-- stopondiff == 0
EXPR	463:6	463:22	8	-- stopondiff == 0
LEAF_NODE	463:6	463:6	9	--
FIELD	463:8	463:8	9	stopondiff
LEAF_NODE	463:8	463:8	10	stopondiff
EQ_OPERATOR	463:19	463:19	9	==
LEAF_NODE	463:19	463:19	10	==
FIELD	463:22	463:22	9	0
LEAF_NODE	463:22	463:22	10	0
LEAF_NODE	463:23	463:23	7	)
STATEMENTS	464:3	464:3	7	
EXPR_STATEMENT	464:3	464:10	8	exit ( 1 ) ;
EXPR	464:3	464:3	9	exit ( 1 )
FUNCTION_CALL	464:3	464:9	10	exit ( 1 )
CALLEE	464:3	464:3	11	exit
LEAF_NODE	464:3	464:3	12	exit
LEAF_NODE	464:7	464:7	11	(
ARGUMENT	464:8	464:8	11	1
FIELD	464:8	464:8	12	1
LEAF_NODE	464:8	464:8	13	1
LEAF_NODE	464:9	464:9	11	)
LEAF_NODE	464:10	464:10	9	;
JUMP_STATEMENT	465:2	465:7	6	break DESTINATION ;
KEYWORD	465:2	465:2	7	break
LEAF_NODE	465:2	465:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	465:7	465:7	7	;
LABEL	466:1	466:8	6	case 16 :
LEAF_NODE	466:1	466:1	7	case
LEAF_NODE	466:6	466:6	7	16
LEAF_NODE	466:8	466:8	7	:
EXPR_STATEMENT	467:2	469:43	6	printf ( "Scanline %lu, pixel %lu, sample %d: %04x %04x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 ) ;
EXPR	467:2	467:2	7	printf ( "Scanline %lu, pixel %lu, sample %d: %04x %04x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 )
FUNCTION_CALL	467:2	469:42	8	printf ( "Scanline %lu, pixel %lu, sample %d: %04x %04x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 )
CALLEE	467:2	467:2	9	printf
LEAF_NODE	467:2	467:2	10	printf
LEAF_NODE	467:8	467:8	9	(
ARGUMENT	467:9	467:9	9	"Scanline %lu, pixel %lu, sample %d: %04x %04x\n"
FIELD	467:9	467:9	10	"Scanline %lu, pixel %lu, sample %d: %04x %04x\n"
LEAF_NODE	467:9	467:9	11	"Scanline %lu, pixel %lu, sample %d: %04x %04x\n"
LEAF_NODE	467:58	467:58	9	,
ARGUMENT	468:6	468:22	9	( unsigned long ) row
LEAF_NODE	468:6	468:6	10	(
TYPE_NAME	468:7	468:16	10	unsigned long
LEAF_NODE	468:7	468:7	11	unsigned
LEAF_NODE	468:16	468:16	11	long
LEAF_NODE	468:20	468:20	10	)
FIELD	468:22	468:22	10	row
LEAF_NODE	468:22	468:22	11	row
LEAF_NODE	468:25	468:25	9	,
ARGUMENT	468:27	468:43	9	( unsigned long ) pix
LEAF_NODE	468:27	468:27	10	(
TYPE_NAME	468:28	468:37	10	unsigned long
LEAF_NODE	468:28	468:28	11	unsigned
LEAF_NODE	468:37	468:37	11	long
LEAF_NODE	468:41	468:41	10	)
FIELD	468:43	468:43	10	pix
LEAF_NODE	468:43	468:43	11	pix
LEAF_NODE	468:46	468:46	9	,
ARGUMENT	468:48	468:48	9	sample
FIELD	468:48	468:48	10	sample
LEAF_NODE	468:48	468:48	11	sample
LEAF_NODE	468:54	468:54	9	,
ARGUMENT	469:6	469:21	9	( unsigned int ) w1
LEAF_NODE	469:6	469:6	10	(
TYPE_NAME	469:7	469:16	10	unsigned int
LEAF_NODE	469:7	469:7	11	unsigned
LEAF_NODE	469:16	469:16	11	int
LEAF_NODE	469:19	469:19	10	)
FIELD	469:21	469:21	10	w1
LEAF_NODE	469:21	469:21	11	w1
LEAF_NODE	469:23	469:23	9	,
ARGUMENT	469:25	469:40	9	( unsigned int ) w2
LEAF_NODE	469:25	469:25	10	(
TYPE_NAME	469:26	469:35	10	unsigned int
LEAF_NODE	469:26	469:26	11	unsigned
LEAF_NODE	469:35	469:35	11	int
LEAF_NODE	469:38	469:38	10	)
FIELD	469:40	469:40	10	w2
LEAF_NODE	469:40	469:40	11	w2
LEAF_NODE	469:42	469:42	9	)
LEAF_NODE	469:43	469:43	7	;
SELECTION	470:2	471:3	6	
KEYWORD	470:2	470:2	7	if
LEAF_NODE	470:2	470:2	8	if
LEAF_NODE	470:5	470:5	7	(
CONDITION	470:6	470:6	7	-- stopondiff == 0
EXPR	470:6	470:22	8	-- stopondiff == 0
LEAF_NODE	470:6	470:6	9	--
FIELD	470:8	470:8	9	stopondiff
LEAF_NODE	470:8	470:8	10	stopondiff
EQ_OPERATOR	470:19	470:19	9	==
LEAF_NODE	470:19	470:19	10	==
FIELD	470:22	470:22	9	0
LEAF_NODE	470:22	470:22	10	0
LEAF_NODE	470:23	470:23	7	)
STATEMENTS	471:3	471:3	7	
EXPR_STATEMENT	471:3	471:10	8	exit ( 1 ) ;
EXPR	471:3	471:3	9	exit ( 1 )
FUNCTION_CALL	471:3	471:9	10	exit ( 1 )
CALLEE	471:3	471:3	11	exit
LEAF_NODE	471:3	471:3	12	exit
LEAF_NODE	471:7	471:7	11	(
ARGUMENT	471:8	471:8	11	1
FIELD	471:8	471:8	12	1
LEAF_NODE	471:8	471:8	13	1
LEAF_NODE	471:9	471:9	11	)
LEAF_NODE	471:10	471:10	9	;
JUMP_STATEMENT	472:2	472:7	6	break DESTINATION ;
KEYWORD	472:2	472:2	7	break
LEAF_NODE	472:2	472:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	472:7	472:7	7	;
LABEL	473:1	473:8	6	case 32 :
LEAF_NODE	473:1	473:1	7	case
LEAF_NODE	473:6	473:6	7	32
LEAF_NODE	473:8	473:8	7	:
EXPR_STATEMENT	474:2	476:43	6	printf ( "Scanline %lu, pixel %lu, sample %d: %08x %08x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 ) ;
EXPR	474:2	474:2	7	printf ( "Scanline %lu, pixel %lu, sample %d: %08x %08x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 )
FUNCTION_CALL	474:2	476:42	8	printf ( "Scanline %lu, pixel %lu, sample %d: %08x %08x\n" , ( unsigned long ) row , ( unsigned long ) pix , sample , ( unsigned int ) w1 , ( unsigned int ) w2 )
CALLEE	474:2	474:2	9	printf
LEAF_NODE	474:2	474:2	10	printf
LEAF_NODE	474:8	474:8	9	(
ARGUMENT	474:9	474:9	9	"Scanline %lu, pixel %lu, sample %d: %08x %08x\n"
FIELD	474:9	474:9	10	"Scanline %lu, pixel %lu, sample %d: %08x %08x\n"
LEAF_NODE	474:9	474:9	11	"Scanline %lu, pixel %lu, sample %d: %08x %08x\n"
LEAF_NODE	474:58	474:58	9	,
ARGUMENT	475:6	475:22	9	( unsigned long ) row
LEAF_NODE	475:6	475:6	10	(
TYPE_NAME	475:7	475:16	10	unsigned long
LEAF_NODE	475:7	475:7	11	unsigned
LEAF_NODE	475:16	475:16	11	long
LEAF_NODE	475:20	475:20	10	)
FIELD	475:22	475:22	10	row
LEAF_NODE	475:22	475:22	11	row
LEAF_NODE	475:25	475:25	9	,
ARGUMENT	475:27	475:43	9	( unsigned long ) pix
LEAF_NODE	475:27	475:27	10	(
TYPE_NAME	475:28	475:37	10	unsigned long
LEAF_NODE	475:28	475:28	11	unsigned
LEAF_NODE	475:37	475:37	11	long
LEAF_NODE	475:41	475:41	10	)
FIELD	475:43	475:43	10	pix
LEAF_NODE	475:43	475:43	11	pix
LEAF_NODE	475:46	475:46	9	,
ARGUMENT	475:48	475:48	9	sample
FIELD	475:48	475:48	10	sample
LEAF_NODE	475:48	475:48	11	sample
LEAF_NODE	475:54	475:54	9	,
ARGUMENT	476:6	476:21	9	( unsigned int ) w1
LEAF_NODE	476:6	476:6	10	(
TYPE_NAME	476:7	476:16	10	unsigned int
LEAF_NODE	476:7	476:7	11	unsigned
LEAF_NODE	476:16	476:16	11	int
LEAF_NODE	476:19	476:19	10	)
FIELD	476:21	476:21	10	w1
LEAF_NODE	476:21	476:21	11	w1
LEAF_NODE	476:23	476:23	9	,
ARGUMENT	476:25	476:40	9	( unsigned int ) w2
LEAF_NODE	476:25	476:25	10	(
TYPE_NAME	476:26	476:35	10	unsigned int
LEAF_NODE	476:26	476:26	11	unsigned
LEAF_NODE	476:35	476:35	11	int
LEAF_NODE	476:38	476:38	10	)
FIELD	476:40	476:40	10	w2
LEAF_NODE	476:40	476:40	11	w2
LEAF_NODE	476:42	476:42	9	)
LEAF_NODE	476:43	476:43	7	;
SELECTION	477:2	478:3	6	
KEYWORD	477:2	477:2	7	if
LEAF_NODE	477:2	477:2	8	if
LEAF_NODE	477:5	477:5	7	(
CONDITION	477:6	477:6	7	-- stopondiff == 0
EXPR	477:6	477:22	8	-- stopondiff == 0
LEAF_NODE	477:6	477:6	9	--
FIELD	477:8	477:8	9	stopondiff
LEAF_NODE	477:8	477:8	10	stopondiff
EQ_OPERATOR	477:19	477:19	9	==
LEAF_NODE	477:19	477:19	10	==
FIELD	477:22	477:22	9	0
LEAF_NODE	477:22	477:22	10	0
LEAF_NODE	477:23	477:23	7	)
STATEMENTS	478:3	478:3	7	
EXPR_STATEMENT	478:3	478:10	8	exit ( 1 ) ;
EXPR	478:3	478:3	9	exit ( 1 )
FUNCTION_CALL	478:3	478:9	10	exit ( 1 )
CALLEE	478:3	478:3	11	exit
LEAF_NODE	478:3	478:3	12	exit
LEAF_NODE	478:7	478:7	11	(
ARGUMENT	478:8	478:8	11	1
FIELD	478:8	478:8	12	1
LEAF_NODE	478:8	478:8	13	1
LEAF_NODE	478:9	478:9	11	)
LEAF_NODE	478:10	478:10	9	;
JUMP_STATEMENT	479:2	479:7	6	break DESTINATION ;
KEYWORD	479:2	479:2	7	break
LEAF_NODE	479:2	479:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	479:7	479:7	7	;
LABEL	480:1	480:8	6	default :
LEAF_NODE	480:1	480:1	7	default
LEAF_NODE	480:8	480:8	7	:
JUMP_STATEMENT	481:2	481:7	6	break DESTINATION ;
KEYWORD	481:2	481:2	7	break
LEAF_NODE	481:2	481:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	481:7	481:7	7	;
LEAF_NODE	482:1	482:1	5	}
LEAF_NODE	483:0	483:0	2	}
FUNCTION_DEF	485:0	500:0	1	
RETURN_TYPE	485:0	485:7	2	static void
LEAF_NODE	485:0	485:0	3	static
TYPE_NAME	485:7	485:7	3	void
LEAF_NODE	485:7	485:7	4	void
FUNCTION_NAME	486:0	486:0	2	PrintFloatDiff
LEAF_NODE	486:0	486:0	3	PrintFloatDiff
PARAMETER_LIST	486:14	486:71	2	( uint32 row , int sample , uint32 pix , double w1 , double w2 )
LEAF_NODE	486:14	486:14	3	(
PARAMETER_DECL	486:15	486:22	3	uint32 row
TYPE	486:15	486:15	4	uint32
TYPE_NAME	486:15	486:15	5	uint32
LEAF_NODE	486:15	486:15	6	uint32
NAME	486:22	486:22	4	row
LEAF_NODE	486:22	486:22	5	row
LEAF_NODE	486:25	486:25	3	,
PARAMETER_DECL	486:27	486:31	3	int sample
TYPE	486:27	486:27	4	int
TYPE_NAME	486:27	486:27	5	int
LEAF_NODE	486:27	486:27	6	int
NAME	486:31	486:31	4	sample
LEAF_NODE	486:31	486:31	5	sample
LEAF_NODE	486:37	486:37	3	,
PARAMETER_DECL	486:39	486:46	3	uint32 pix
TYPE	486:39	486:39	4	uint32
TYPE_NAME	486:39	486:39	5	uint32
LEAF_NODE	486:39	486:39	6	uint32
NAME	486:46	486:46	4	pix
LEAF_NODE	486:46	486:46	5	pix
LEAF_NODE	486:49	486:49	3	,
PARAMETER_DECL	486:51	486:58	3	double w1
TYPE	486:51	486:51	4	double
TYPE_NAME	486:51	486:51	5	double
LEAF_NODE	486:51	486:51	6	double
NAME	486:58	486:58	4	w1
LEAF_NODE	486:58	486:58	5	w1
LEAF_NODE	486:60	486:60	3	,
PARAMETER_DECL	486:62	486:69	3	double w2
TYPE	486:62	486:62	4	double
TYPE_NAME	486:62	486:62	5	double
LEAF_NODE	486:62	486:62	6	double
NAME	486:69	486:69	4	w2
LEAF_NODE	486:69	486:69	5	w2
LEAF_NODE	486:71	486:71	3	)
LEAF_NODE	487:0	487:0	2	{
STATEMENTS	488:1	490:1	2	
SELECTION	488:1	489:2	3	
KEYWORD	488:1	488:1	4	if
LEAF_NODE	488:1	488:1	5	if
LEAF_NODE	488:4	488:4	4	(
CONDITION	488:5	488:5	4	sample < 0
EXPR	488:5	488:14	5	sample < 0
FIELD	488:5	488:5	6	sample
LEAF_NODE	488:5	488:5	7	sample
REL_OPERATOR	488:12	488:12	6	<
LEAF_NODE	488:12	488:12	7	<
FIELD	488:14	488:14	6	0
LEAF_NODE	488:14	488:14	7	0
LEAF_NODE	488:15	488:15	4	)
STATEMENTS	489:2	489:2	4	
EXPR_STATEMENT	489:2	489:12	5	sample = 0 ;
EXPR	489:2	489:2	6	sample = 0
ASSIGN	489:2	489:11	7	sample = 0
LVAL	489:2	489:2	8	sample
FIELD	489:2	489:2	9	sample
LEAF_NODE	489:2	489:2	10	sample
ASSIGN_OP	489:9	489:9	8	=
LEAF_NODE	489:9	489:9	9	=
RVAL	489:11	489:11	8	0
FIELD	489:11	489:11	9	0
LEAF_NODE	489:11	489:11	10	0
LEAF_NODE	489:12	489:12	6	;
SELECTION	490:1	490:24	3	
KEYWORD	490:1	490:1	4	switch
LEAF_NODE	490:1	490:1	5	switch
LEAF_NODE	490:8	490:8	4	(
CONDITION	490:9	490:9	4	bitspersample
EXPR	490:9	490:9	5	bitspersample
FIELD	490:9	490:9	6	bitspersample
LEAF_NODE	490:9	490:9	7	bitspersample
LEAF_NODE	490:22	490:22	4	)
STATEMENTS	490:24	499:1	4	
LEAF_NODE	490:24	490:24	5	{
STATEMENTS	491:1	498:2	5	
LABEL	491:1	491:8	6	case 32 :
LEAF_NODE	491:1	491:1	7	case
LEAF_NODE	491:6	491:6	7	32
LEAF_NODE	491:8	491:8	7	:
EXPR_STATEMENT	492:2	493:45	6	printf ( "Scanline %lu, pixel %lu, sample %d: %g %g\n" , ( long ) row , ( long ) pix , sample , w1 , w2 ) ;
EXPR	492:2	492:2	7	printf ( "Scanline %lu, pixel %lu, sample %d: %g %g\n" , ( long ) row , ( long ) pix , sample , w1 , w2 )
FUNCTION_CALL	492:2	493:44	8	printf ( "Scanline %lu, pixel %lu, sample %d: %g %g\n" , ( long ) row , ( long ) pix , sample , w1 , w2 )
CALLEE	492:2	492:2	9	printf
LEAF_NODE	492:2	492:2	10	printf
LEAF_NODE	492:8	492:8	9	(
ARGUMENT	492:9	492:9	9	"Scanline %lu, pixel %lu, sample %d: %g %g\n"
FIELD	492:9	492:9	10	"Scanline %lu, pixel %lu, sample %d: %g %g\n"
LEAF_NODE	492:9	492:9	11	"Scanline %lu, pixel %lu, sample %d: %g %g\n"
LEAF_NODE	492:54	492:54	9	,
ARGUMENT	493:6	493:13	9	( long ) row
LEAF_NODE	493:6	493:6	10	(
TYPE_NAME	493:7	493:7	10	long
LEAF_NODE	493:7	493:7	11	long
LEAF_NODE	493:11	493:11	10	)
FIELD	493:13	493:13	10	row
LEAF_NODE	493:13	493:13	11	row
LEAF_NODE	493:16	493:16	9	,
ARGUMENT	493:18	493:25	9	( long ) pix
LEAF_NODE	493:18	493:18	10	(
TYPE_NAME	493:19	493:19	10	long
LEAF_NODE	493:19	493:19	11	long
LEAF_NODE	493:23	493:23	10	)
FIELD	493:25	493:25	10	pix
LEAF_NODE	493:25	493:25	11	pix
LEAF_NODE	493:28	493:28	9	,
ARGUMENT	493:30	493:30	9	sample
FIELD	493:30	493:30	10	sample
LEAF_NODE	493:30	493:30	11	sample
LEAF_NODE	493:36	493:36	9	,
ARGUMENT	493:38	493:38	9	w1
FIELD	493:38	493:38	10	w1
LEAF_NODE	493:38	493:38	11	w1
LEAF_NODE	493:40	493:40	9	,
ARGUMENT	493:42	493:42	9	w2
FIELD	493:42	493:42	10	w2
LEAF_NODE	493:42	493:42	11	w2
LEAF_NODE	493:44	493:44	9	)
LEAF_NODE	493:45	493:45	7	;
SELECTION	494:2	495:3	6	
KEYWORD	494:2	494:2	7	if
LEAF_NODE	494:2	494:2	8	if
LEAF_NODE	494:5	494:5	7	(
CONDITION	494:6	494:6	7	-- stopondiff == 0
EXPR	494:6	494:22	8	-- stopondiff == 0
LEAF_NODE	494:6	494:6	9	--
FIELD	494:8	494:8	9	stopondiff
LEAF_NODE	494:8	494:8	10	stopondiff
EQ_OPERATOR	494:19	494:19	9	==
LEAF_NODE	494:19	494:19	10	==
FIELD	494:22	494:22	9	0
LEAF_NODE	494:22	494:22	10	0
LEAF_NODE	494:23	494:23	7	)
STATEMENTS	495:3	495:3	7	
EXPR_STATEMENT	495:3	495:10	8	exit ( 1 ) ;
EXPR	495:3	495:3	9	exit ( 1 )
FUNCTION_CALL	495:3	495:9	10	exit ( 1 )
CALLEE	495:3	495:3	11	exit
LEAF_NODE	495:3	495:3	12	exit
LEAF_NODE	495:7	495:7	11	(
ARGUMENT	495:8	495:8	11	1
FIELD	495:8	495:8	12	1
LEAF_NODE	495:8	495:8	13	1
LEAF_NODE	495:9	495:9	11	)
LEAF_NODE	495:10	495:10	9	;
JUMP_STATEMENT	496:2	496:7	6	break DESTINATION ;
KEYWORD	496:2	496:2	7	break
LEAF_NODE	496:2	496:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	496:7	496:7	7	;
LABEL	497:1	497:8	6	default :
LEAF_NODE	497:1	497:1	7	default
LEAF_NODE	497:8	497:8	7	:
JUMP_STATEMENT	498:2	498:7	6	break DESTINATION ;
KEYWORD	498:2	498:2	7	break
LEAF_NODE	498:2	498:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	498:7	498:7	7	;
LEAF_NODE	499:1	499:1	5	}
LEAF_NODE	500:0	500:0	2	}
FUNCTION_DEF	502:0	524:0	1	
RETURN_TYPE	502:0	502:7	2	static int
LEAF_NODE	502:0	502:0	3	static
TYPE_NAME	502:7	502:7	3	int
LEAF_NODE	502:7	502:7	4	int
FUNCTION_NAME	503:0	503:0	2	SeparateCompare
LEAF_NODE	503:0	503:0	3	SeparateCompare
PARAMETER_LIST	503:15	504:39	2	( int reversed , int sample , uint32 row , unsigned char * cp1 , unsigned char * p2 )
LEAF_NODE	503:15	503:15	3	(
PARAMETER_DECL	503:16	503:20	3	int reversed
TYPE	503:16	503:16	4	int
TYPE_NAME	503:16	503:16	5	int
LEAF_NODE	503:16	503:16	6	int
NAME	503:20	503:20	4	reversed
LEAF_NODE	503:20	503:20	5	reversed
LEAF_NODE	503:28	503:28	3	,
PARAMETER_DECL	503:30	503:34	3	int sample
TYPE	503:30	503:30	4	int
TYPE_NAME	503:30	503:30	5	int
LEAF_NODE	503:30	503:30	6	int
NAME	503:34	503:34	4	sample
LEAF_NODE	503:34	503:34	5	sample
LEAF_NODE	503:40	503:40	3	,
PARAMETER_DECL	503:42	503:49	3	uint32 row
TYPE	503:42	503:42	4	uint32
TYPE_NAME	503:42	503:42	5	uint32
LEAF_NODE	503:42	503:42	6	uint32
NAME	503:49	503:49	4	row
LEAF_NODE	503:49	503:49	5	row
LEAF_NODE	503:52	503:52	3	,
PARAMETER_DECL	504:2	504:17	3	unsigned char * cp1
TYPE	504:2	504:15	4	unsigned char *
TYPE_NAME	504:2	504:11	5	unsigned char
LEAF_NODE	504:2	504:2	6	unsigned
LEAF_NODE	504:11	504:11	6	char
POINTER	504:15	504:15	5	*
LEAF_NODE	504:15	504:15	6	*
NAME	504:17	504:17	4	cp1
LEAF_NODE	504:17	504:17	5	cp1
LEAF_NODE	504:20	504:20	3	,
PARAMETER_DECL	504:22	504:37	3	unsigned char * p2
TYPE	504:22	504:35	4	unsigned char *
TYPE_NAME	504:22	504:31	5	unsigned char
LEAF_NODE	504:22	504:22	6	unsigned
LEAF_NODE	504:31	504:31	6	char
POINTER	504:35	504:35	5	*
LEAF_NODE	504:35	504:35	6	*
NAME	504:37	504:37	4	p2
LEAF_NODE	504:37	504:37	5	p2
LEAF_NODE	504:39	504:39	3	)
LEAF_NODE	505:0	505:0	2	{
STATEMENTS	506:1	523:1	2	
SIMPLE_DECL	506:1	506:28	3	uint32 npixels ; npixels = imagewidth ;
VAR_DECL	506:1	506:8	4	uint32 npixels ; npixels = imagewidth
TYPE	506:1	506:1	5	uint32
TYPE_NAME	506:1	506:1	6	uint32
LEAF_NODE	506:1	506:1	7	uint32
NAME	506:8	506:8	5	npixels
LEAF_NODE	506:8	506:8	6	npixels
LEAF_NODE	0:0	0:0	5	;
INIT	506:8	506:8	5	npixels = imagewidth
ASSIGN	506:8	506:18	6	npixels = imagewidth
LVAL	506:8	506:8	7	npixels
NAME	506:8	506:8	8	npixels
LEAF_NODE	506:8	506:8	9	npixels
ASSIGN_OP	506:16	506:16	7	=
LEAF_NODE	506:16	506:16	8	=
RVAL	506:18	506:18	7	imagewidth
FIELD	506:18	506:18	8	imagewidth
LEAF_NODE	506:18	506:18	9	imagewidth
LEAF_NODE	506:28	506:28	4	;
SIMPLE_DECL	507:1	507:10	3	int pixel ;
VAR_DECL	507:1	507:5	4	int pixel
TYPE	507:1	507:1	5	int
TYPE_NAME	507:1	507:1	6	int
LEAF_NODE	507:1	507:1	7	int
NAME	507:5	507:5	5	pixel
LEAF_NODE	507:5	507:5	6	pixel
LEAF_NODE	507:10	507:10	4	;
EXPR_STATEMENT	509:1	509:14	3	cp1 += sample ;
EXPR	509:1	509:1	4	cp1 += sample
ASSIGN	509:1	509:8	5	cp1 += sample
LVAL	509:1	509:1	6	cp1
FIELD	509:1	509:1	7	cp1
LEAF_NODE	509:1	509:1	8	cp1
ASSIGN_OP	509:5	509:5	6	+=
LEAF_NODE	509:5	509:5	7	+=
RVAL	509:8	509:8	6	sample
FIELD	509:8	509:8	7	sample
LEAF_NODE	509:8	509:8	8	sample
LEAF_NODE	509:14	509:14	4	;
LEAF_NODE	510:1	510:1	3	for
LEAF_NODE	510:5	510:5	3	(
EXPR_STATEMENT	510:6	510:15	3	pixel = 0 ;
EXPR	510:6	510:6	4	pixel = 0
ASSIGN	510:6	510:14	5	pixel = 0
LVAL	510:6	510:6	6	pixel
FIELD	510:6	510:6	7	pixel
LEAF_NODE	510:6	510:6	8	pixel
ASSIGN_OP	510:12	510:12	6	=
LEAF_NODE	510:12	510:12	7	=
RVAL	510:14	510:14	6	0
FIELD	510:14	510:14	7	0
LEAF_NODE	510:14	510:14	8	0
LEAF_NODE	510:15	510:15	4	;
EXPR_STATEMENT	510:17	510:30	3	npixels -- > 0 ;
EXPR	510:17	510:29	4	npixels -- > 0
FIELD	510:17	510:24	5	npixels --
LEAF_NODE	510:17	510:17	6	npixels
LEAF_NODE	510:24	510:24	6	--
REL_OPERATOR	510:27	510:27	5	>
LEAF_NODE	510:27	510:27	6	>
FIELD	510:29	510:29	5	0
LEAF_NODE	510:29	510:29	6	0
LEAF_NODE	510:30	510:30	4	;
LEAF_NODE	510:32	510:32	3	pixel
LEAF_NODE	510:37	510:37	3	++
LEAF_NODE	510:39	510:39	3	,
LEAF_NODE	510:41	510:41	3	cp1
LEAF_NODE	510:45	510:45	3	+=
LEAF_NODE	510:48	510:48	3	samplesperpixel
LEAF_NODE	510:63	510:63	3	,
LEAF_NODE	510:65	510:65	3	p2
LEAF_NODE	510:67	510:67	3	++
LEAF_NODE	510:69	510:69	3	)
LEAF_NODE	510:71	510:71	3	{
STATEMENTS	511:2	511:2	3	
SELECTION	511:2	511:19	4	
KEYWORD	511:2	511:2	5	if
LEAF_NODE	511:2	511:2	6	if
LEAF_NODE	511:5	511:5	5	(
CONDITION	511:6	511:6	5	* cp1 != * p2
EXPR	511:6	511:14	6	* cp1 != * p2
UNARY_EXPR	511:6	511:7	7	* cp1
UNARY_OPERATOR	511:6	511:6	8	*
LEAF_NODE	511:6	511:6	9	*
FIELD	511:7	511:7	8	cp1
LEAF_NODE	511:7	511:7	9	cp1
EQ_OPERATOR	511:11	511:11	7	!=
LEAF_NODE	511:11	511:11	8	!=
UNARY_EXPR	511:14	511:15	7	* p2
UNARY_OPERATOR	511:14	511:14	8	*
LEAF_NODE	511:14	511:14	9	*
FIELD	511:15	511:15	8	p2
LEAF_NODE	511:15	511:15	9	p2
LEAF_NODE	511:17	511:17	5	)
STATEMENTS	511:19	520:2	5	
LEAF_NODE	511:19	511:19	6	{
STATEMENTS	512:3	518:3	6	
EXPR_STATEMENT	512:3	513:47	7	printf ( "Scanline %lu, pixel %lu, sample %ld: " , ( long ) row , ( long ) pixel , ( long ) sample ) ;
EXPR	512:3	512:3	8	printf ( "Scanline %lu, pixel %lu, sample %ld: " , ( long ) row , ( long ) pixel , ( long ) sample )
FUNCTION_CALL	512:3	513:46	9	printf ( "Scanline %lu, pixel %lu, sample %ld: " , ( long ) row , ( long ) pixel , ( long ) sample )
CALLEE	512:3	512:3	10	printf
LEAF_NODE	512:3	512:3	11	printf
LEAF_NODE	512:9	512:9	10	(
ARGUMENT	512:10	512:10	10	"Scanline %lu, pixel %lu, sample %ld: "
FIELD	512:10	512:10	11	"Scanline %lu, pixel %lu, sample %ld: "
LEAF_NODE	512:10	512:10	12	"Scanline %lu, pixel %lu, sample %ld: "
LEAF_NODE	512:49	512:49	10	,
ARGUMENT	513:7	513:14	10	( long ) row
LEAF_NODE	513:7	513:7	11	(
TYPE_NAME	513:8	513:8	11	long
LEAF_NODE	513:8	513:8	12	long
LEAF_NODE	513:12	513:12	11	)
FIELD	513:14	513:14	11	row
LEAF_NODE	513:14	513:14	12	row
LEAF_NODE	513:17	513:17	10	,
ARGUMENT	513:19	513:26	10	( long ) pixel
LEAF_NODE	513:19	513:19	11	(
TYPE_NAME	513:20	513:20	11	long
LEAF_NODE	513:20	513:20	12	long
LEAF_NODE	513:24	513:24	11	)
FIELD	513:26	513:26	11	pixel
LEAF_NODE	513:26	513:26	12	pixel
LEAF_NODE	513:31	513:31	10	,
ARGUMENT	513:33	513:40	10	( long ) sample
LEAF_NODE	513:33	513:33	11	(
TYPE_NAME	513:34	513:34	11	long
LEAF_NODE	513:34	513:34	12	long
LEAF_NODE	513:38	513:38	11	)
FIELD	513:40	513:40	11	sample
LEAF_NODE	513:40	513:40	12	sample
LEAF_NODE	513:46	513:46	10	)
LEAF_NODE	513:47	513:47	8	;
SELECTION	514:3	515:4	7	
KEYWORD	514:3	514:3	8	if
LEAF_NODE	514:3	514:3	9	if
LEAF_NODE	514:6	514:6	8	(
CONDITION	514:7	514:7	8	reversed
EXPR	514:7	514:7	9	reversed
FIELD	514:7	514:7	10	reversed
LEAF_NODE	514:7	514:7	11	reversed
LEAF_NODE	514:15	514:15	8	)
STATEMENTS	515:4	515:4	8	
EXPR_STATEMENT	515:4	515:36	9	printf ( "%02x %02x\n" , * p2 , * cp1 ) ;
EXPR	515:4	515:4	10	printf ( "%02x %02x\n" , * p2 , * cp1 )
FUNCTION_CALL	515:4	515:35	11	printf ( "%02x %02x\n" , * p2 , * cp1 )
CALLEE	515:4	515:4	12	printf
LEAF_NODE	515:4	515:4	13	printf
LEAF_NODE	515:10	515:10	12	(
ARGUMENT	515:11	515:11	12	"%02x %02x\n"
FIELD	515:11	515:11	13	"%02x %02x\n"
LEAF_NODE	515:11	515:11	14	"%02x %02x\n"
LEAF_NODE	515:24	515:24	12	,
ARGUMENT	515:26	515:26	12	* p2
UNARY_EXPR	515:26	515:27	13	* p2
UNARY_OPERATOR	515:26	515:26	14	*
LEAF_NODE	515:26	515:26	15	*
FIELD	515:27	515:27	14	p2
LEAF_NODE	515:27	515:27	15	p2
LEAF_NODE	515:29	515:29	12	,
ARGUMENT	515:31	515:31	12	* cp1
UNARY_EXPR	515:31	515:32	13	* cp1
UNARY_OPERATOR	515:31	515:31	14	*
LEAF_NODE	515:31	515:31	15	*
FIELD	515:32	515:32	14	cp1
LEAF_NODE	515:32	515:32	15	cp1
LEAF_NODE	515:35	515:35	12	)
LEAF_NODE	515:36	515:36	10	;
SELECTION	516:3	517:4	7	
KEYWORD	516:3	516:3	8	else
LEAF_NODE	516:3	516:3	9	else
STATEMENTS	517:4	517:4	8	
EXPR_STATEMENT	517:4	517:36	9	printf ( "%02x %02x\n" , * cp1 , * p2 ) ;
EXPR	517:4	517:4	10	printf ( "%02x %02x\n" , * cp1 , * p2 )
FUNCTION_CALL	517:4	517:35	11	printf ( "%02x %02x\n" , * cp1 , * p2 )
CALLEE	517:4	517:4	12	printf
LEAF_NODE	517:4	517:4	13	printf
LEAF_NODE	517:10	517:10	12	(
ARGUMENT	517:11	517:11	12	"%02x %02x\n"
FIELD	517:11	517:11	13	"%02x %02x\n"
LEAF_NODE	517:11	517:11	14	"%02x %02x\n"
LEAF_NODE	517:24	517:24	12	,
ARGUMENT	517:26	517:26	12	* cp1
UNARY_EXPR	517:26	517:27	13	* cp1
UNARY_OPERATOR	517:26	517:26	14	*
LEAF_NODE	517:26	517:26	15	*
FIELD	517:27	517:27	14	cp1
LEAF_NODE	517:27	517:27	15	cp1
LEAF_NODE	517:30	517:30	12	,
ARGUMENT	517:32	517:32	12	* p2
UNARY_EXPR	517:32	517:33	13	* p2
UNARY_OPERATOR	517:32	517:32	14	*
LEAF_NODE	517:32	517:32	15	*
FIELD	517:33	517:33	14	p2
LEAF_NODE	517:33	517:33	15	p2
LEAF_NODE	517:35	517:35	12	)
LEAF_NODE	517:36	517:36	10	;
SELECTION	518:3	519:4	7	
KEYWORD	518:3	518:3	8	if
LEAF_NODE	518:3	518:3	9	if
LEAF_NODE	518:6	518:6	8	(
CONDITION	518:7	518:7	8	-- stopondiff == 0
EXPR	518:7	518:23	9	-- stopondiff == 0
LEAF_NODE	518:7	518:7	10	--
FIELD	518:9	518:9	10	stopondiff
LEAF_NODE	518:9	518:9	11	stopondiff
EQ_OPERATOR	518:20	518:20	10	==
LEAF_NODE	518:20	518:20	11	==
FIELD	518:23	518:23	10	0
LEAF_NODE	518:23	518:23	11	0
LEAF_NODE	518:24	518:24	8	)
STATEMENTS	519:4	519:4	8	
EXPR_STATEMENT	519:4	519:11	9	exit ( 1 ) ;
EXPR	519:4	519:4	10	exit ( 1 )
FUNCTION_CALL	519:4	519:10	11	exit ( 1 )
CALLEE	519:4	519:4	12	exit
LEAF_NODE	519:4	519:4	13	exit
LEAF_NODE	519:8	519:8	12	(
ARGUMENT	519:9	519:9	12	1
FIELD	519:9	519:9	13	1
LEAF_NODE	519:9	519:9	14	1
LEAF_NODE	519:10	519:10	12	)
LEAF_NODE	519:11	519:11	10	;
LEAF_NODE	520:2	520:2	6	}
LEAF_NODE	521:1	521:1	3	}
JUMP_STATEMENT	523:1	523:9	3	return 0 ;
KEYWORD	523:1	523:1	4	return
LEAF_NODE	523:1	523:1	5	return
DESTINATION	523:8	523:8	4	0
EXPR	523:8	523:8	5	0
FIELD	523:8	523:8	6	0
LEAF_NODE	523:8	523:8	7	0
LEAF_NODE	523:9	523:9	4	;
LEAF_NODE	524:0	524:0	2	}
FUNCTION_DEF	526:0	542:0	1	
RETURN_TYPE	526:0	526:7	2	static int
LEAF_NODE	526:0	526:0	3	static
TYPE_NAME	526:7	526:7	3	int
LEAF_NODE	526:7	526:7	4	int
FUNCTION_NAME	527:0	527:0	2	checkTag
LEAF_NODE	527:0	527:0	3	checkTag
PARAMETER_LIST	527:8	527:72	2	( TIFF * tif1 , TIFF * tif2 , int tag , char * name , void * p1 , void * p2 )
LEAF_NODE	527:8	527:8	3	(
PARAMETER_DECL	527:9	527:15	3	TIFF * tif1
TYPE	527:9	527:13	4	TIFF *
TYPE_NAME	527:9	527:9	5	TIFF
LEAF_NODE	527:9	527:9	6	TIFF
POINTER	527:13	527:13	5	*
LEAF_NODE	527:13	527:13	6	*
NAME	527:15	527:15	4	tif1
LEAF_NODE	527:15	527:15	5	tif1
LEAF_NODE	527:19	527:19	3	,
PARAMETER_DECL	527:21	527:27	3	TIFF * tif2
TYPE	527:21	527:25	4	TIFF *
TYPE_NAME	527:21	527:21	5	TIFF
LEAF_NODE	527:21	527:21	6	TIFF
POINTER	527:25	527:25	5	*
LEAF_NODE	527:25	527:25	6	*
NAME	527:27	527:27	4	tif2
LEAF_NODE	527:27	527:27	5	tif2
LEAF_NODE	527:31	527:31	3	,
PARAMETER_DECL	527:33	527:37	3	int tag
TYPE	527:33	527:33	4	int
TYPE_NAME	527:33	527:33	5	int
LEAF_NODE	527:33	527:33	6	int
NAME	527:37	527:37	4	tag
LEAF_NODE	527:37	527:37	5	tag
LEAF_NODE	527:40	527:40	3	,
PARAMETER_DECL	527:42	527:48	3	char * name
TYPE	527:42	527:46	4	char *
TYPE_NAME	527:42	527:42	5	char
LEAF_NODE	527:42	527:42	6	char
POINTER	527:46	527:46	5	*
LEAF_NODE	527:46	527:46	6	*
NAME	527:48	527:48	4	name
LEAF_NODE	527:48	527:48	5	name
LEAF_NODE	527:52	527:52	3	,
PARAMETER_DECL	527:54	527:60	3	void * p1
TYPE	527:54	527:58	4	void *
TYPE_NAME	527:54	527:54	5	void
LEAF_NODE	527:54	527:54	6	void
POINTER	527:58	527:58	5	*
LEAF_NODE	527:58	527:58	6	*
NAME	527:60	527:60	4	p1
LEAF_NODE	527:60	527:60	5	p1
LEAF_NODE	527:62	527:62	3	,
PARAMETER_DECL	527:64	527:70	3	void * p2
TYPE	527:64	527:68	4	void *
TYPE_NAME	527:64	527:64	5	void
LEAF_NODE	527:64	527:64	6	void
POINTER	527:68	527:68	5	*
LEAF_NODE	527:68	527:68	6	*
NAME	527:70	527:70	4	p2
LEAF_NODE	527:70	527:70	5	p2
LEAF_NODE	527:72	527:72	3	)
LEAF_NODE	528:0	528:0	2	{
STATEMENTS	530:1	541:1	2	
SELECTION	530:1	530:34	3	
KEYWORD	530:1	530:1	4	if
LEAF_NODE	530:1	530:1	5	if
LEAF_NODE	530:4	530:4	4	(
CONDITION	530:5	530:5	4	TIFFGetField ( tif1 , tag , p1 )
EXPR	530:5	530:5	5	TIFFGetField ( tif1 , tag , p1 )
FUNCTION_CALL	530:5	530:31	6	TIFFGetField ( tif1 , tag , p1 )
CALLEE	530:5	530:5	7	TIFFGetField
LEAF_NODE	530:5	530:5	8	TIFFGetField
LEAF_NODE	530:17	530:17	7	(
ARGUMENT	530:18	530:18	7	tif1
FIELD	530:18	530:18	8	tif1
LEAF_NODE	530:18	530:18	9	tif1
LEAF_NODE	530:22	530:22	7	,
ARGUMENT	530:24	530:24	7	tag
FIELD	530:24	530:24	8	tag
LEAF_NODE	530:24	530:24	9	tag
LEAF_NODE	530:27	530:27	7	,
ARGUMENT	530:29	530:29	7	p1
FIELD	530:29	530:29	8	p1
LEAF_NODE	530:29	530:29	9	p1
LEAF_NODE	530:31	530:31	7	)
LEAF_NODE	530:32	530:32	4	)
STATEMENTS	530:34	537:1	4	
LEAF_NODE	530:34	530:34	5	{
STATEMENTS	531:2	536:2	5	
SELECTION	531:2	531:36	6	
KEYWORD	531:2	531:2	7	if
LEAF_NODE	531:2	531:2	8	if
LEAF_NODE	531:5	531:5	7	(
CONDITION	531:6	531:6	7	! TIFFGetField ( tif2 , tag , p2 )
EXPR	531:6	531:6	8	! TIFFGetField ( tif2 , tag , p2 )
UNARY_EXPR	531:6	531:7	9	! TIFFGetField ( tif2 , tag , p2 )
UNARY_OPERATOR	531:6	531:6	10	!
LEAF_NODE	531:6	531:6	11	!
FUNCTION_CALL	531:7	531:33	10	TIFFGetField ( tif2 , tag , p2 )
CALLEE	531:7	531:7	11	TIFFGetField
LEAF_NODE	531:7	531:7	12	TIFFGetField
LEAF_NODE	531:19	531:19	11	(
ARGUMENT	531:20	531:20	11	tif2
FIELD	531:20	531:20	12	tif2
LEAF_NODE	531:20	531:20	13	tif2
LEAF_NODE	531:24	531:24	11	,
ARGUMENT	531:26	531:26	11	tag
FIELD	531:26	531:26	12	tag
LEAF_NODE	531:26	531:26	13	tag
LEAF_NODE	531:29	531:29	11	,
ARGUMENT	531:31	531:31	11	p2
FIELD	531:31	531:31	12	p2
LEAF_NODE	531:31	531:31	13	p2
LEAF_NODE	531:33	531:33	11	)
LEAF_NODE	531:34	531:34	7	)
STATEMENTS	531:36	535:2	7	
LEAF_NODE	531:36	531:36	8	{
STATEMENTS	532:3	534:3	8	
EXPR_STATEMENT	532:3	533:32	9	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) ) ;
EXPR	532:3	532:3	10	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) )
FUNCTION_CALL	532:3	533:31	11	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) )
CALLEE	532:3	532:3	12	printf
LEAF_NODE	532:3	532:3	13	printf
LEAF_NODE	532:9	532:9	12	(
ARGUMENT	532:10	532:10	12	"%s tag appears only in %s\n"
FIELD	532:10	532:10	13	"%s tag appears only in %s\n"
LEAF_NODE	532:10	532:10	14	"%s tag appears only in %s\n"
LEAF_NODE	532:39	532:39	12	,
ARGUMENT	533:7	533:7	12	name
FIELD	533:7	533:7	13	name
LEAF_NODE	533:7	533:7	14	name
LEAF_NODE	533:11	533:11	12	,
ARGUMENT	533:13	533:13	12	TIFFFileName ( tif1 )
FUNCTION_CALL	533:13	533:30	13	TIFFFileName ( tif1 )
CALLEE	533:13	533:13	14	TIFFFileName
LEAF_NODE	533:13	533:13	15	TIFFFileName
LEAF_NODE	533:25	533:25	14	(
ARGUMENT	533:26	533:26	14	tif1
FIELD	533:26	533:26	15	tif1
LEAF_NODE	533:26	533:26	16	tif1
LEAF_NODE	533:30	533:30	14	)
LEAF_NODE	533:31	533:31	12	)
LEAF_NODE	533:32	533:32	10	;
JUMP_STATEMENT	534:3	534:13	9	return ( 0 ) ;
KEYWORD	534:3	534:3	10	return
LEAF_NODE	534:3	534:3	11	return
DESTINATION	534:10	534:10	10	( 0 )
EXPR	534:10	534:12	11	( 0 )
LEAF_NODE	534:10	534:10	12	(
FIELD	534:11	534:11	12	0
LEAF_NODE	534:11	534:11	13	0
LEAF_NODE	534:12	534:12	12	)
LEAF_NODE	534:13	534:13	10	;
LEAF_NODE	535:2	535:2	8	}
JUMP_STATEMENT	536:2	536:12	6	return ( 1 ) ;
KEYWORD	536:2	536:2	7	return
LEAF_NODE	536:2	536:2	8	return
DESTINATION	536:9	536:9	7	( 1 )
EXPR	536:9	536:11	8	( 1 )
LEAF_NODE	536:9	536:9	9	(
FIELD	536:10	536:10	9	1
LEAF_NODE	536:10	536:10	10	1
LEAF_NODE	536:11	536:11	9	)
LEAF_NODE	536:12	536:12	7	;
LEAF_NODE	537:1	537:1	5	}
SELECTION	537:3	537:8	3	
KEYWORD	537:3	537:3	4	else
LEAF_NODE	537:3	537:3	5	else
STATEMENTS	537:8	537:8	4	
SELECTION	537:8	537:41	5	
KEYWORD	537:8	537:8	6	if
LEAF_NODE	537:8	537:8	7	if
LEAF_NODE	537:11	537:11	6	(
CONDITION	537:12	537:12	6	TIFFGetField ( tif2 , tag , p2 )
EXPR	537:12	537:12	7	TIFFGetField ( tif2 , tag , p2 )
FUNCTION_CALL	537:12	537:38	8	TIFFGetField ( tif2 , tag , p2 )
CALLEE	537:12	537:12	9	TIFFGetField
LEAF_NODE	537:12	537:12	10	TIFFGetField
LEAF_NODE	537:24	537:24	9	(
ARGUMENT	537:25	537:25	9	tif2
FIELD	537:25	537:25	10	tif2
LEAF_NODE	537:25	537:25	11	tif2
LEAF_NODE	537:29	537:29	9	,
ARGUMENT	537:31	537:31	9	tag
FIELD	537:31	537:31	10	tag
LEAF_NODE	537:31	537:31	11	tag
LEAF_NODE	537:34	537:34	9	,
ARGUMENT	537:36	537:36	9	p2
FIELD	537:36	537:36	10	p2
LEAF_NODE	537:36	537:36	11	p2
LEAF_NODE	537:38	537:38	9	)
LEAF_NODE	537:39	537:39	6	)
STATEMENTS	537:41	540:1	6	
LEAF_NODE	537:41	537:41	7	{
STATEMENTS	538:2	539:2	7	
EXPR_STATEMENT	538:2	538:65	8	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) ) ;
EXPR	538:2	538:2	9	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) )
FUNCTION_CALL	538:2	538:64	10	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) )
CALLEE	538:2	538:2	11	printf
LEAF_NODE	538:2	538:2	12	printf
LEAF_NODE	538:8	538:8	11	(
ARGUMENT	538:9	538:9	11	"%s tag appears only in %s\n"
FIELD	538:9	538:9	12	"%s tag appears only in %s\n"
LEAF_NODE	538:9	538:9	13	"%s tag appears only in %s\n"
LEAF_NODE	538:38	538:38	11	,
ARGUMENT	538:40	538:40	11	name
FIELD	538:40	538:40	12	name
LEAF_NODE	538:40	538:40	13	name
LEAF_NODE	538:44	538:44	11	,
ARGUMENT	538:46	538:46	11	TIFFFileName ( tif2 )
FUNCTION_CALL	538:46	538:63	12	TIFFFileName ( tif2 )
CALLEE	538:46	538:46	13	TIFFFileName
LEAF_NODE	538:46	538:46	14	TIFFFileName
LEAF_NODE	538:58	538:58	13	(
ARGUMENT	538:59	538:59	13	tif2
FIELD	538:59	538:59	14	tif2
LEAF_NODE	538:59	538:59	15	tif2
LEAF_NODE	538:63	538:63	13	)
LEAF_NODE	538:64	538:64	11	)
LEAF_NODE	538:65	538:65	9	;
JUMP_STATEMENT	539:2	539:12	8	return ( 0 ) ;
KEYWORD	539:2	539:2	9	return
LEAF_NODE	539:2	539:2	10	return
DESTINATION	539:9	539:9	9	( 0 )
EXPR	539:9	539:11	10	( 0 )
LEAF_NODE	539:9	539:9	11	(
FIELD	539:10	539:10	11	0
LEAF_NODE	539:10	539:10	12	0
LEAF_NODE	539:11	539:11	11	)
LEAF_NODE	539:12	539:12	9	;
LEAF_NODE	540:1	540:1	7	}
JUMP_STATEMENT	541:1	541:12	3	return ( - 1 ) ;
KEYWORD	541:1	541:1	4	return
LEAF_NODE	541:1	541:1	5	return
DESTINATION	541:8	541:8	4	( - 1 )
EXPR	541:8	541:11	5	( - 1 )
LEAF_NODE	541:8	541:8	6	(
UNARY_EXPR	541:9	541:10	6	- 1
UNARY_OPERATOR	541:9	541:9	7	-
LEAF_NODE	541:9	541:9	8	-
FIELD	541:10	541:10	7	1
LEAF_NODE	541:10	541:10	8	1
LEAF_NODE	541:11	541:11	6	)
LEAF_NODE	541:12	541:12	4	;
LEAF_NODE	542:0	542:0	2	}
FUNCTION_DEF	553:0	558:0	1	
RETURN_TYPE	553:0	553:7	2	static int
LEAF_NODE	553:0	553:0	3	static
TYPE_NAME	553:7	553:7	3	int
LEAF_NODE	553:7	553:7	4	int
FUNCTION_NAME	554:0	554:0	2	CheckShortTag
LEAF_NODE	554:0	554:0	3	CheckShortTag
PARAMETER_LIST	554:13	554:57	2	( TIFF * tif1 , TIFF * tif2 , int tag , char * name )
LEAF_NODE	554:13	554:13	3	(
PARAMETER_DECL	554:14	554:20	3	TIFF * tif1
TYPE	554:14	554:18	4	TIFF *
TYPE_NAME	554:14	554:14	5	TIFF
LEAF_NODE	554:14	554:14	6	TIFF
POINTER	554:18	554:18	5	*
LEAF_NODE	554:18	554:18	6	*
NAME	554:20	554:20	4	tif1
LEAF_NODE	554:20	554:20	5	tif1
LEAF_NODE	554:24	554:24	3	,
PARAMETER_DECL	554:26	554:32	3	TIFF * tif2
TYPE	554:26	554:30	4	TIFF *
TYPE_NAME	554:26	554:26	5	TIFF
LEAF_NODE	554:26	554:26	6	TIFF
POINTER	554:30	554:30	5	*
LEAF_NODE	554:30	554:30	6	*
NAME	554:32	554:32	4	tif2
LEAF_NODE	554:32	554:32	5	tif2
LEAF_NODE	554:36	554:36	3	,
PARAMETER_DECL	554:38	554:42	3	int tag
TYPE	554:38	554:38	4	int
TYPE_NAME	554:38	554:38	5	int
LEAF_NODE	554:38	554:38	6	int
NAME	554:42	554:42	4	tag
LEAF_NODE	554:42	554:42	5	tag
LEAF_NODE	554:45	554:45	3	,
PARAMETER_DECL	554:47	554:53	3	char * name
TYPE	554:47	554:51	4	char *
TYPE_NAME	554:47	554:47	5	char
LEAF_NODE	554:47	554:47	6	char
POINTER	554:51	554:51	5	*
LEAF_NODE	554:51	554:51	6	*
NAME	554:53	554:53	4	name
LEAF_NODE	554:53	554:53	5	name
LEAF_NODE	554:57	554:57	3	)
LEAF_NODE	555:0	555:0	2	{
STATEMENTS	556:1	557:1	2	
SIMPLE_DECL	556:1	556:14	3	uint16 v1 , uint16 v2 ;
INIT_DECL_LIST	556:1	556:1	4	uint16 v1 , uint16 v2
VAR_DECL	556:1	556:8	5	uint16 v1
TYPE	556:1	556:1	6	uint16
TYPE_NAME	556:1	556:1	7	uint16
LEAF_NODE	556:1	556:1	8	uint16
NAME	556:8	556:8	6	v1
LEAF_NODE	556:8	556:8	7	v1
LEAF_NODE	556:10	556:10	5	,
VAR_DECL	556:1	556:12	5	uint16 v2
TYPE	556:1	556:1	6	uint16
TYPE_NAME	556:1	556:1	7	uint16
LEAF_NODE	556:1	556:1	8	uint16
NAME	556:12	556:12	6	v2
LEAF_NODE	556:12	556:12	7	v2
LEAF_NODE	556:14	556:14	4	;
EXPR_STATEMENT	557:1	557:31	3	CHECK ( v1 == v2 , "%s: %u %u\n" ) ;
EXPR	557:1	557:1	4	CHECK ( v1 == v2 , "%s: %u %u\n" )
FUNCTION_CALL	557:1	557:30	5	CHECK ( v1 == v2 , "%s: %u %u\n" )
CALLEE	557:1	557:1	6	CHECK
LEAF_NODE	557:1	557:1	7	CHECK
LEAF_NODE	557:6	557:6	6	(
ARGUMENT	557:7	557:13	6	v1 == v2
FIELD	557:7	557:7	7	v1
LEAF_NODE	557:7	557:7	8	v1
EQ_OPERATOR	557:10	557:10	7	==
LEAF_NODE	557:10	557:10	8	==
FIELD	557:13	557:13	7	v2
LEAF_NODE	557:13	557:13	8	v2
LEAF_NODE	557:15	557:15	6	,
ARGUMENT	557:17	557:17	6	"%s: %u %u\n"
FIELD	557:17	557:17	7	"%s: %u %u\n"
LEAF_NODE	557:17	557:17	8	"%s: %u %u\n"
LEAF_NODE	557:30	557:30	6	)
LEAF_NODE	557:31	557:31	4	;
LEAF_NODE	558:0	558:0	2	}
FUNCTION_DEF	560:0	579:0	1	
RETURN_TYPE	560:0	560:7	2	static int
LEAF_NODE	560:0	560:0	3	static
TYPE_NAME	560:7	560:7	3	int
LEAF_NODE	560:7	560:7	4	int
FUNCTION_NAME	561:0	561:0	2	CheckShort2Tag
LEAF_NODE	561:0	561:0	3	CheckShort2Tag
PARAMETER_LIST	561:14	561:58	2	( TIFF * tif1 , TIFF * tif2 , int tag , char * name )
LEAF_NODE	561:14	561:14	3	(
PARAMETER_DECL	561:15	561:21	3	TIFF * tif1
TYPE	561:15	561:19	4	TIFF *
TYPE_NAME	561:15	561:15	5	TIFF
LEAF_NODE	561:15	561:15	6	TIFF
POINTER	561:19	561:19	5	*
LEAF_NODE	561:19	561:19	6	*
NAME	561:21	561:21	4	tif1
LEAF_NODE	561:21	561:21	5	tif1
LEAF_NODE	561:25	561:25	3	,
PARAMETER_DECL	561:27	561:33	3	TIFF * tif2
TYPE	561:27	561:31	4	TIFF *
TYPE_NAME	561:27	561:27	5	TIFF
LEAF_NODE	561:27	561:27	6	TIFF
POINTER	561:31	561:31	5	*
LEAF_NODE	561:31	561:31	6	*
NAME	561:33	561:33	4	tif2
LEAF_NODE	561:33	561:33	5	tif2
LEAF_NODE	561:37	561:37	3	,
PARAMETER_DECL	561:39	561:43	3	int tag
TYPE	561:39	561:39	4	int
TYPE_NAME	561:39	561:39	5	int
LEAF_NODE	561:39	561:39	6	int
NAME	561:43	561:43	4	tag
LEAF_NODE	561:43	561:43	5	tag
LEAF_NODE	561:46	561:46	3	,
PARAMETER_DECL	561:48	561:54	3	char * name
TYPE	561:48	561:52	4	char *
TYPE_NAME	561:48	561:48	5	char
LEAF_NODE	561:48	561:48	6	char
POINTER	561:52	561:52	5	*
LEAF_NODE	561:52	561:52	6	*
NAME	561:54	561:54	4	name
LEAF_NODE	561:54	561:54	5	name
LEAF_NODE	561:58	561:58	3	)
LEAF_NODE	562:0	562:0	2	{
STATEMENTS	563:1	578:1	2	
SIMPLE_DECL	563:1	563:26	3	uint16 v11 , uint16 v12 , uint16 v21 , uint16 v22 ;
INIT_DECL_LIST	563:1	563:1	4	uint16 v11 , uint16 v12 , uint16 v21 , uint16 v22
VAR_DECL	563:1	563:8	5	uint16 v11
TYPE	563:1	563:1	6	uint16
TYPE_NAME	563:1	563:1	7	uint16
LEAF_NODE	563:1	563:1	8	uint16
NAME	563:8	563:8	6	v11
LEAF_NODE	563:8	563:8	7	v11
LEAF_NODE	563:11	563:11	5	,
INIT_DECL_LIST	563:1	563:1	5	uint16 v12 , uint16 v21 , uint16 v22
VAR_DECL	563:1	563:13	6	uint16 v12
TYPE	563:1	563:1	7	uint16
TYPE_NAME	563:1	563:1	8	uint16
LEAF_NODE	563:1	563:1	9	uint16
NAME	563:13	563:13	7	v12
LEAF_NODE	563:13	563:13	8	v12
LEAF_NODE	563:16	563:16	6	,
INIT_DECL_LIST	563:1	563:1	6	uint16 v21 , uint16 v22
VAR_DECL	563:1	563:18	7	uint16 v21
TYPE	563:1	563:1	8	uint16
TYPE_NAME	563:1	563:1	9	uint16
LEAF_NODE	563:1	563:1	10	uint16
NAME	563:18	563:18	8	v21
LEAF_NODE	563:18	563:18	9	v21
LEAF_NODE	563:21	563:21	7	,
VAR_DECL	563:1	563:23	7	uint16 v22
TYPE	563:1	563:1	8	uint16
TYPE_NAME	563:1	563:1	9	uint16
LEAF_NODE	563:1	563:1	10	uint16
NAME	563:23	563:23	8	v22
LEAF_NODE	563:23	563:23	9	v22
LEAF_NODE	563:26	563:26	4	;
SELECTION	565:1	565:42	3	
KEYWORD	565:1	565:1	4	if
LEAF_NODE	565:1	565:1	5	if
LEAF_NODE	565:4	565:4	4	(
CONDITION	565:5	565:5	4	TIFFGetField ( tif1 , tag , & v11 , & v12 )
EXPR	565:5	565:5	5	TIFFGetField ( tif1 , tag , & v11 , & v12 )
FUNCTION_CALL	565:5	565:39	6	TIFFGetField ( tif1 , tag , & v11 , & v12 )
CALLEE	565:5	565:5	7	TIFFGetField
LEAF_NODE	565:5	565:5	8	TIFFGetField
LEAF_NODE	565:17	565:17	7	(
ARGUMENT	565:18	565:18	7	tif1
FIELD	565:18	565:18	8	tif1
LEAF_NODE	565:18	565:18	9	tif1
LEAF_NODE	565:22	565:22	7	,
ARGUMENT	565:24	565:24	7	tag
FIELD	565:24	565:24	8	tag
LEAF_NODE	565:24	565:24	9	tag
LEAF_NODE	565:27	565:27	7	,
ARGUMENT	565:29	565:29	7	& v11
UNARY_EXPR	565:29	565:30	8	& v11
UNARY_OPERATOR	565:29	565:29	9	&
LEAF_NODE	565:29	565:29	10	&
FIELD	565:30	565:30	9	v11
LEAF_NODE	565:30	565:30	10	v11
LEAF_NODE	565:33	565:33	7	,
ARGUMENT	565:35	565:35	7	& v12
UNARY_EXPR	565:35	565:36	8	& v12
UNARY_OPERATOR	565:35	565:35	9	&
LEAF_NODE	565:35	565:35	10	&
FIELD	565:36	565:36	9	v12
LEAF_NODE	565:36	565:36	10	v12
LEAF_NODE	565:39	565:39	7	)
LEAF_NODE	565:40	565:40	4	)
STATEMENTS	565:42	574:1	4	
LEAF_NODE	565:42	565:42	5	{
STATEMENTS	566:2	573:2	5	
SELECTION	566:2	566:44	6	
KEYWORD	566:2	566:2	7	if
LEAF_NODE	566:2	566:2	8	if
LEAF_NODE	566:5	566:5	7	(
CONDITION	566:6	566:6	7	! TIFFGetField ( tif2 , tag , & v21 , & v22 )
EXPR	566:6	566:6	8	! TIFFGetField ( tif2 , tag , & v21 , & v22 )
UNARY_EXPR	566:6	566:7	9	! TIFFGetField ( tif2 , tag , & v21 , & v22 )
UNARY_OPERATOR	566:6	566:6	10	!
LEAF_NODE	566:6	566:6	11	!
FUNCTION_CALL	566:7	566:41	10	TIFFGetField ( tif2 , tag , & v21 , & v22 )
CALLEE	566:7	566:7	11	TIFFGetField
LEAF_NODE	566:7	566:7	12	TIFFGetField
LEAF_NODE	566:19	566:19	11	(
ARGUMENT	566:20	566:20	11	tif2
FIELD	566:20	566:20	12	tif2
LEAF_NODE	566:20	566:20	13	tif2
LEAF_NODE	566:24	566:24	11	,
ARGUMENT	566:26	566:26	11	tag
FIELD	566:26	566:26	12	tag
LEAF_NODE	566:26	566:26	13	tag
LEAF_NODE	566:29	566:29	11	,
ARGUMENT	566:31	566:31	11	& v21
UNARY_EXPR	566:31	566:32	12	& v21
UNARY_OPERATOR	566:31	566:31	13	&
LEAF_NODE	566:31	566:31	14	&
FIELD	566:32	566:32	13	v21
LEAF_NODE	566:32	566:32	14	v21
LEAF_NODE	566:35	566:35	11	,
ARGUMENT	566:37	566:37	11	& v22
UNARY_EXPR	566:37	566:38	12	& v22
UNARY_OPERATOR	566:37	566:37	13	&
LEAF_NODE	566:37	566:37	14	&
FIELD	566:38	566:38	13	v22
LEAF_NODE	566:38	566:38	14	v22
LEAF_NODE	566:41	566:41	11	)
LEAF_NODE	566:42	566:42	7	)
STATEMENTS	566:44	570:2	7	
LEAF_NODE	566:44	566:44	8	{
STATEMENTS	567:3	569:3	8	
EXPR_STATEMENT	567:3	568:32	9	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) ) ;
EXPR	567:3	567:3	10	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) )
FUNCTION_CALL	567:3	568:31	11	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) )
CALLEE	567:3	567:3	12	printf
LEAF_NODE	567:3	567:3	13	printf
LEAF_NODE	567:9	567:9	12	(
ARGUMENT	567:10	567:10	12	"%s tag appears only in %s\n"
FIELD	567:10	567:10	13	"%s tag appears only in %s\n"
LEAF_NODE	567:10	567:10	14	"%s tag appears only in %s\n"
LEAF_NODE	567:39	567:39	12	,
ARGUMENT	568:7	568:7	12	name
FIELD	568:7	568:7	13	name
LEAF_NODE	568:7	568:7	14	name
LEAF_NODE	568:11	568:11	12	,
ARGUMENT	568:13	568:13	12	TIFFFileName ( tif1 )
FUNCTION_CALL	568:13	568:30	13	TIFFFileName ( tif1 )
CALLEE	568:13	568:13	14	TIFFFileName
LEAF_NODE	568:13	568:13	15	TIFFFileName
LEAF_NODE	568:25	568:25	14	(
ARGUMENT	568:26	568:26	14	tif1
FIELD	568:26	568:26	15	tif1
LEAF_NODE	568:26	568:26	16	tif1
LEAF_NODE	568:30	568:30	14	)
LEAF_NODE	568:31	568:31	12	)
LEAF_NODE	568:32	568:32	10	;
JUMP_STATEMENT	569:3	569:13	9	return ( 0 ) ;
KEYWORD	569:3	569:3	10	return
LEAF_NODE	569:3	569:3	11	return
DESTINATION	569:10	569:10	10	( 0 )
EXPR	569:10	569:12	11	( 0 )
LEAF_NODE	569:10	569:10	12	(
FIELD	569:11	569:11	12	0
LEAF_NODE	569:11	569:11	13	0
LEAF_NODE	569:12	569:12	12	)
LEAF_NODE	569:13	569:13	10	;
LEAF_NODE	570:2	570:2	8	}
SELECTION	571:2	572:3	6	
KEYWORD	571:2	571:2	7	if
LEAF_NODE	571:2	571:2	8	if
LEAF_NODE	571:5	571:5	7	(
CONDITION	571:6	571:6	7	v11 == v21 && v12 == v22
EXPR	571:6	571:6	8	v11 == v21 && v12 == v22
AND	571:6	571:20	9	v11 == v21 && v12 == v22
EXPR	571:6	571:13	10	v11 == v21
FIELD	571:6	571:6	11	v11
LEAF_NODE	571:6	571:6	12	v11
EQ_OPERATOR	571:10	571:10	11	==
LEAF_NODE	571:10	571:10	12	==
FIELD	571:13	571:13	11	v21
LEAF_NODE	571:13	571:13	12	v21
LEAF_NODE	571:17	571:17	10	&&
EXPR	571:20	571:27	10	v12 == v22
FIELD	571:20	571:20	11	v12
LEAF_NODE	571:20	571:20	12	v12
EQ_OPERATOR	571:24	571:24	11	==
LEAF_NODE	571:24	571:24	12	==
FIELD	571:27	571:27	11	v22
LEAF_NODE	571:27	571:27	12	v22
LEAF_NODE	571:30	571:30	7	)
STATEMENTS	572:3	572:3	7	
JUMP_STATEMENT	572:3	572:13	8	return ( 1 ) ;
KEYWORD	572:3	572:3	9	return
LEAF_NODE	572:3	572:3	10	return
DESTINATION	572:10	572:10	9	( 1 )
EXPR	572:10	572:12	10	( 1 )
LEAF_NODE	572:10	572:10	11	(
FIELD	572:11	572:11	11	1
LEAF_NODE	572:11	572:11	12	1
LEAF_NODE	572:12	572:12	11	)
LEAF_NODE	572:13	572:13	9	;
EXPR_STATEMENT	573:2	573:59	6	printf ( "%s: <%u,%u> <%u,%u>\n" , name , v11 , v12 , v21 , v22 ) ;
EXPR	573:2	573:2	7	printf ( "%s: <%u,%u> <%u,%u>\n" , name , v11 , v12 , v21 , v22 )
FUNCTION_CALL	573:2	573:58	8	printf ( "%s: <%u,%u> <%u,%u>\n" , name , v11 , v12 , v21 , v22 )
CALLEE	573:2	573:2	9	printf
LEAF_NODE	573:2	573:2	10	printf
LEAF_NODE	573:8	573:8	9	(
ARGUMENT	573:9	573:9	9	"%s: <%u,%u> <%u,%u>\n"
FIELD	573:9	573:9	10	"%s: <%u,%u> <%u,%u>\n"
LEAF_NODE	573:9	573:9	11	"%s: <%u,%u> <%u,%u>\n"
LEAF_NODE	573:32	573:32	9	,
ARGUMENT	573:34	573:34	9	name
FIELD	573:34	573:34	10	name
LEAF_NODE	573:34	573:34	11	name
LEAF_NODE	573:38	573:38	9	,
ARGUMENT	573:40	573:40	9	v11
FIELD	573:40	573:40	10	v11
LEAF_NODE	573:40	573:40	11	v11
LEAF_NODE	573:43	573:43	9	,
ARGUMENT	573:45	573:45	9	v12
FIELD	573:45	573:45	10	v12
LEAF_NODE	573:45	573:45	11	v12
LEAF_NODE	573:48	573:48	9	,
ARGUMENT	573:50	573:50	9	v21
FIELD	573:50	573:50	10	v21
LEAF_NODE	573:50	573:50	11	v21
LEAF_NODE	573:53	573:53	9	,
ARGUMENT	573:55	573:55	9	v22
FIELD	573:55	573:55	10	v22
LEAF_NODE	573:55	573:55	11	v22
LEAF_NODE	573:58	573:58	9	)
LEAF_NODE	573:59	573:59	7	;
LEAF_NODE	574:1	574:1	5	}
SELECTION	574:3	574:8	3	
KEYWORD	574:3	574:3	4	else
LEAF_NODE	574:3	574:3	5	else
STATEMENTS	574:8	574:8	4	
SELECTION	574:8	575:2	5	
KEYWORD	574:8	574:8	6	if
LEAF_NODE	574:8	574:8	7	if
LEAF_NODE	574:11	574:11	6	(
CONDITION	574:12	574:12	6	TIFFGetField ( tif2 , tag , & v21 , & v22 )
EXPR	574:12	574:12	7	TIFFGetField ( tif2 , tag , & v21 , & v22 )
FUNCTION_CALL	574:12	574:46	8	TIFFGetField ( tif2 , tag , & v21 , & v22 )
CALLEE	574:12	574:12	9	TIFFGetField
LEAF_NODE	574:12	574:12	10	TIFFGetField
LEAF_NODE	574:24	574:24	9	(
ARGUMENT	574:25	574:25	9	tif2
FIELD	574:25	574:25	10	tif2
LEAF_NODE	574:25	574:25	11	tif2
LEAF_NODE	574:29	574:29	9	,
ARGUMENT	574:31	574:31	9	tag
FIELD	574:31	574:31	10	tag
LEAF_NODE	574:31	574:31	11	tag
LEAF_NODE	574:34	574:34	9	,
ARGUMENT	574:36	574:36	9	& v21
UNARY_EXPR	574:36	574:37	10	& v21
UNARY_OPERATOR	574:36	574:36	11	&
LEAF_NODE	574:36	574:36	12	&
FIELD	574:37	574:37	11	v21
LEAF_NODE	574:37	574:37	12	v21
LEAF_NODE	574:40	574:40	9	,
ARGUMENT	574:42	574:42	9	& v22
UNARY_EXPR	574:42	574:43	10	& v22
UNARY_OPERATOR	574:42	574:42	11	&
LEAF_NODE	574:42	574:42	12	&
FIELD	574:43	574:43	11	v22
LEAF_NODE	574:43	574:43	12	v22
LEAF_NODE	574:46	574:46	9	)
LEAF_NODE	574:47	574:47	6	)
STATEMENTS	575:2	575:2	6	
EXPR_STATEMENT	575:2	575:65	7	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) ) ;
EXPR	575:2	575:2	8	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) )
FUNCTION_CALL	575:2	575:64	9	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) )
CALLEE	575:2	575:2	10	printf
LEAF_NODE	575:2	575:2	11	printf
LEAF_NODE	575:8	575:8	10	(
ARGUMENT	575:9	575:9	10	"%s tag appears only in %s\n"
FIELD	575:9	575:9	11	"%s tag appears only in %s\n"
LEAF_NODE	575:9	575:9	12	"%s tag appears only in %s\n"
LEAF_NODE	575:38	575:38	10	,
ARGUMENT	575:40	575:40	10	name
FIELD	575:40	575:40	11	name
LEAF_NODE	575:40	575:40	12	name
LEAF_NODE	575:44	575:44	10	,
ARGUMENT	575:46	575:46	10	TIFFFileName ( tif2 )
FUNCTION_CALL	575:46	575:63	11	TIFFFileName ( tif2 )
CALLEE	575:46	575:46	12	TIFFFileName
LEAF_NODE	575:46	575:46	13	TIFFFileName
LEAF_NODE	575:58	575:58	12	(
ARGUMENT	575:59	575:59	12	tif2
FIELD	575:59	575:59	13	tif2
LEAF_NODE	575:59	575:59	14	tif2
LEAF_NODE	575:63	575:63	12	)
LEAF_NODE	575:64	575:64	10	)
LEAF_NODE	575:65	575:65	8	;
SELECTION	576:1	577:2	3	
KEYWORD	576:1	576:1	4	else
LEAF_NODE	576:1	576:1	5	else
STATEMENTS	577:2	577:2	4	
JUMP_STATEMENT	577:2	577:12	5	return ( 1 ) ;
KEYWORD	577:2	577:2	6	return
LEAF_NODE	577:2	577:2	7	return
DESTINATION	577:9	577:9	6	( 1 )
EXPR	577:9	577:11	7	( 1 )
LEAF_NODE	577:9	577:9	8	(
FIELD	577:10	577:10	8	1
LEAF_NODE	577:10	577:10	9	1
LEAF_NODE	577:11	577:11	8	)
LEAF_NODE	577:12	577:12	6	;
JUMP_STATEMENT	578:1	578:11	3	return ( 0 ) ;
KEYWORD	578:1	578:1	4	return
LEAF_NODE	578:1	578:1	5	return
DESTINATION	578:8	578:8	4	( 0 )
EXPR	578:8	578:10	5	( 0 )
LEAF_NODE	578:8	578:8	6	(
FIELD	578:9	578:9	6	0
LEAF_NODE	578:9	578:9	7	0
LEAF_NODE	578:10	578:10	6	)
LEAF_NODE	578:11	578:11	4	;
LEAF_NODE	579:0	579:0	2	}
FUNCTION_DEF	581:0	618:0	1	
RETURN_TYPE	581:0	581:7	2	static int
LEAF_NODE	581:0	581:0	3	static
TYPE_NAME	581:7	581:7	3	int
LEAF_NODE	581:7	581:7	4	int
FUNCTION_NAME	582:0	582:0	2	CheckShortArrayTag
LEAF_NODE	582:0	582:0	3	CheckShortArrayTag
PARAMETER_LIST	582:18	582:62	2	( TIFF * tif1 , TIFF * tif2 , int tag , char * name )
LEAF_NODE	582:18	582:18	3	(
PARAMETER_DECL	582:19	582:25	3	TIFF * tif1
TYPE	582:19	582:23	4	TIFF *
TYPE_NAME	582:19	582:19	5	TIFF
LEAF_NODE	582:19	582:19	6	TIFF
POINTER	582:23	582:23	5	*
LEAF_NODE	582:23	582:23	6	*
NAME	582:25	582:25	4	tif1
LEAF_NODE	582:25	582:25	5	tif1
LEAF_NODE	582:29	582:29	3	,
PARAMETER_DECL	582:31	582:37	3	TIFF * tif2
TYPE	582:31	582:35	4	TIFF *
TYPE_NAME	582:31	582:31	5	TIFF
LEAF_NODE	582:31	582:31	6	TIFF
POINTER	582:35	582:35	5	*
LEAF_NODE	582:35	582:35	6	*
NAME	582:37	582:37	4	tif2
LEAF_NODE	582:37	582:37	5	tif2
LEAF_NODE	582:41	582:41	3	,
PARAMETER_DECL	582:43	582:47	3	int tag
TYPE	582:43	582:43	4	int
TYPE_NAME	582:43	582:43	5	int
LEAF_NODE	582:43	582:43	6	int
NAME	582:47	582:47	4	tag
LEAF_NODE	582:47	582:47	5	tag
LEAF_NODE	582:50	582:50	3	,
PARAMETER_DECL	582:52	582:58	3	char * name
TYPE	582:52	582:56	4	char *
TYPE_NAME	582:52	582:52	5	char
LEAF_NODE	582:52	582:52	6	char
POINTER	582:56	582:56	5	*
LEAF_NODE	582:56	582:56	6	*
NAME	582:58	582:58	4	name
LEAF_NODE	582:58	582:58	5	name
LEAF_NODE	582:62	582:62	3	)
LEAF_NODE	583:0	583:0	2	{
STATEMENTS	584:1	617:1	2	
SIMPLE_DECL	584:1	584:15	3	uint16 n1 , uint16 * a1 ;
INIT_DECL_LIST	584:1	584:1	4	uint16 n1 , uint16 * a1
VAR_DECL	584:1	584:8	5	uint16 n1
TYPE	584:1	584:1	6	uint16
TYPE_NAME	584:1	584:1	7	uint16
LEAF_NODE	584:1	584:1	8	uint16
NAME	584:8	584:8	6	n1
LEAF_NODE	584:8	584:8	7	n1
LEAF_NODE	584:10	584:10	5	,
VAR_DECL	584:1	584:13	5	uint16 * a1
TYPE	584:1	584:12	6	uint16 *
TYPE_NAME	584:1	584:1	7	uint16
LEAF_NODE	584:1	584:1	8	uint16
POINTER	584:12	584:12	7	*
LEAF_NODE	584:12	584:12	8	*
NAME	584:13	584:13	6	a1
LEAF_NODE	584:13	584:13	7	a1
LEAF_NODE	584:15	584:15	4	;
SIMPLE_DECL	585:1	585:15	3	uint16 n2 , uint16 * a2 ;
INIT_DECL_LIST	585:1	585:1	4	uint16 n2 , uint16 * a2
VAR_DECL	585:1	585:8	5	uint16 n2
TYPE	585:1	585:1	6	uint16
TYPE_NAME	585:1	585:1	7	uint16
LEAF_NODE	585:1	585:1	8	uint16
NAME	585:8	585:8	6	n2
LEAF_NODE	585:8	585:8	7	n2
LEAF_NODE	585:10	585:10	5	,
VAR_DECL	585:1	585:13	5	uint16 * a2
TYPE	585:1	585:12	6	uint16 *
TYPE_NAME	585:1	585:1	7	uint16
LEAF_NODE	585:1	585:1	8	uint16
POINTER	585:12	585:12	7	*
LEAF_NODE	585:12	585:12	8	*
NAME	585:13	585:13	6	a2
LEAF_NODE	585:13	585:13	7	a2
LEAF_NODE	585:15	585:15	4	;
SELECTION	587:1	587:40	3	
KEYWORD	587:1	587:1	4	if
LEAF_NODE	587:1	587:1	5	if
LEAF_NODE	587:4	587:4	4	(
CONDITION	587:5	587:5	4	TIFFGetField ( tif1 , tag , & n1 , & a1 )
EXPR	587:5	587:5	5	TIFFGetField ( tif1 , tag , & n1 , & a1 )
FUNCTION_CALL	587:5	587:37	6	TIFFGetField ( tif1 , tag , & n1 , & a1 )
CALLEE	587:5	587:5	7	TIFFGetField
LEAF_NODE	587:5	587:5	8	TIFFGetField
LEAF_NODE	587:17	587:17	7	(
ARGUMENT	587:18	587:18	7	tif1
FIELD	587:18	587:18	8	tif1
LEAF_NODE	587:18	587:18	9	tif1
LEAF_NODE	587:22	587:22	7	,
ARGUMENT	587:24	587:24	7	tag
FIELD	587:24	587:24	8	tag
LEAF_NODE	587:24	587:24	9	tag
LEAF_NODE	587:27	587:27	7	,
ARGUMENT	587:29	587:29	7	& n1
UNARY_EXPR	587:29	587:30	8	& n1
UNARY_OPERATOR	587:29	587:29	9	&
LEAF_NODE	587:29	587:29	10	&
FIELD	587:30	587:30	9	n1
LEAF_NODE	587:30	587:30	10	n1
LEAF_NODE	587:32	587:32	7	,
ARGUMENT	587:34	587:34	7	& a1
UNARY_EXPR	587:34	587:35	8	& a1
UNARY_OPERATOR	587:34	587:34	9	&
LEAF_NODE	587:34	587:34	10	&
FIELD	587:35	587:35	9	a1
LEAF_NODE	587:35	587:35	10	a1
LEAF_NODE	587:37	587:37	7	)
LEAF_NODE	587:38	587:38	4	)
STATEMENTS	587:40	613:1	4	
LEAF_NODE	587:40	587:40	5	{
STATEMENTS	588:2	608:4	5	
SELECTION	588:2	588:42	6	
KEYWORD	588:2	588:2	7	if
LEAF_NODE	588:2	588:2	8	if
LEAF_NODE	588:5	588:5	7	(
CONDITION	588:6	588:6	7	! TIFFGetField ( tif2 , tag , & n2 , & a2 )
EXPR	588:6	588:6	8	! TIFFGetField ( tif2 , tag , & n2 , & a2 )
UNARY_EXPR	588:6	588:7	9	! TIFFGetField ( tif2 , tag , & n2 , & a2 )
UNARY_OPERATOR	588:6	588:6	10	!
LEAF_NODE	588:6	588:6	11	!
FUNCTION_CALL	588:7	588:39	10	TIFFGetField ( tif2 , tag , & n2 , & a2 )
CALLEE	588:7	588:7	11	TIFFGetField
LEAF_NODE	588:7	588:7	12	TIFFGetField
LEAF_NODE	588:19	588:19	11	(
ARGUMENT	588:20	588:20	11	tif2
FIELD	588:20	588:20	12	tif2
LEAF_NODE	588:20	588:20	13	tif2
LEAF_NODE	588:24	588:24	11	,
ARGUMENT	588:26	588:26	11	tag
FIELD	588:26	588:26	12	tag
LEAF_NODE	588:26	588:26	13	tag
LEAF_NODE	588:29	588:29	11	,
ARGUMENT	588:31	588:31	11	& n2
UNARY_EXPR	588:31	588:32	12	& n2
UNARY_OPERATOR	588:31	588:31	13	&
LEAF_NODE	588:31	588:31	14	&
FIELD	588:32	588:32	13	n2
LEAF_NODE	588:32	588:32	14	n2
LEAF_NODE	588:34	588:34	11	,
ARGUMENT	588:36	588:36	11	& a2
UNARY_EXPR	588:36	588:37	12	& a2
UNARY_OPERATOR	588:36	588:36	13	&
LEAF_NODE	588:36	588:36	14	&
FIELD	588:37	588:37	13	a2
LEAF_NODE	588:37	588:37	14	a2
LEAF_NODE	588:39	588:39	11	)
LEAF_NODE	588:40	588:40	7	)
STATEMENTS	588:42	592:2	7	
LEAF_NODE	588:42	588:42	8	{
STATEMENTS	589:3	591:3	8	
EXPR_STATEMENT	589:3	590:32	9	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) ) ;
EXPR	589:3	589:3	10	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) )
FUNCTION_CALL	589:3	590:31	11	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif1 ) )
CALLEE	589:3	589:3	12	printf
LEAF_NODE	589:3	589:3	13	printf
LEAF_NODE	589:9	589:9	12	(
ARGUMENT	589:10	589:10	12	"%s tag appears only in %s\n"
FIELD	589:10	589:10	13	"%s tag appears only in %s\n"
LEAF_NODE	589:10	589:10	14	"%s tag appears only in %s\n"
LEAF_NODE	589:39	589:39	12	,
ARGUMENT	590:7	590:7	12	name
FIELD	590:7	590:7	13	name
LEAF_NODE	590:7	590:7	14	name
LEAF_NODE	590:11	590:11	12	,
ARGUMENT	590:13	590:13	12	TIFFFileName ( tif1 )
FUNCTION_CALL	590:13	590:30	13	TIFFFileName ( tif1 )
CALLEE	590:13	590:13	14	TIFFFileName
LEAF_NODE	590:13	590:13	15	TIFFFileName
LEAF_NODE	590:25	590:25	14	(
ARGUMENT	590:26	590:26	14	tif1
FIELD	590:26	590:26	15	tif1
LEAF_NODE	590:26	590:26	16	tif1
LEAF_NODE	590:30	590:30	14	)
LEAF_NODE	590:31	590:31	12	)
LEAF_NODE	590:32	590:32	10	;
JUMP_STATEMENT	591:3	591:13	9	return ( 0 ) ;
KEYWORD	591:3	591:3	10	return
LEAF_NODE	591:3	591:3	11	return
DESTINATION	591:10	591:10	10	( 0 )
EXPR	591:10	591:12	11	( 0 )
LEAF_NODE	591:10	591:10	12	(
FIELD	591:11	591:11	12	0
LEAF_NODE	591:11	591:11	13	0
LEAF_NODE	591:12	591:12	12	)
LEAF_NODE	591:13	591:13	10	;
LEAF_NODE	592:2	592:2	8	}
SELECTION	593:2	593:16	6	
KEYWORD	593:2	593:2	7	if
LEAF_NODE	593:2	593:2	8	if
LEAF_NODE	593:5	593:5	7	(
CONDITION	593:6	593:6	7	n1 == n2
EXPR	593:6	593:12	8	n1 == n2
FIELD	593:6	593:6	9	n1
LEAF_NODE	593:6	593:6	10	n1
EQ_OPERATOR	593:9	593:9	9	==
LEAF_NODE	593:9	593:9	10	==
FIELD	593:12	593:12	9	n2
LEAF_NODE	593:12	593:12	10	n2
LEAF_NODE	593:14	593:14	7	)
STATEMENTS	593:16	608:2	7	
LEAF_NODE	593:16	593:16	8	{
STATEMENTS	594:3	607:3	8	
SIMPLE_DECL	594:3	594:12	9	char * sep ;
VAR_DECL	594:3	594:9	10	char * sep
TYPE	594:3	594:7	11	char *
TYPE_NAME	594:3	594:3	12	char
LEAF_NODE	594:3	594:3	13	char
POINTER	594:7	594:7	12	*
LEAF_NODE	594:7	594:7	13	*
NAME	594:9	594:9	11	sep
LEAF_NODE	594:9	594:9	12	sep
LEAF_NODE	594:12	594:12	10	;
SIMPLE_DECL	595:3	595:11	9	uint16 i ;
VAR_DECL	595:3	595:10	10	uint16 i
TYPE	595:3	595:3	11	uint16
TYPE_NAME	595:3	595:3	12	uint16
LEAF_NODE	595:3	595:3	13	uint16
NAME	595:10	595:10	11	i
LEAF_NODE	595:10	595:10	12	i
LEAF_NODE	595:11	595:11	10	;
SELECTION	597:3	598:4	9	
KEYWORD	597:3	597:3	10	if
LEAF_NODE	597:3	597:3	11	if
LEAF_NODE	597:6	597:6	10	(
CONDITION	597:7	597:7	10	memcmp ( a1 , a2 , n1 * sizeof ( uint16 ) ) == 0
EXPR	597:7	597:46	11	memcmp ( a1 , a2 , n1 * sizeof ( uint16 ) ) == 0
FUNCTION_CALL	597:7	597:41	12	memcmp ( a1 , a2 , n1 * sizeof ( uint16 ) )
CALLEE	597:7	597:7	13	memcmp
LEAF_NODE	597:7	597:7	14	memcmp
LEAF_NODE	597:13	597:13	13	(
ARGUMENT	597:14	597:14	13	a1
FIELD	597:14	597:14	14	a1
LEAF_NODE	597:14	597:14	15	a1
LEAF_NODE	597:16	597:16	13	,
ARGUMENT	597:18	597:18	13	a2
FIELD	597:18	597:18	14	a2
LEAF_NODE	597:18	597:18	15	a2
LEAF_NODE	597:20	597:20	13	,
ARGUMENT	597:22	597:27	13	n1 * sizeof ( uint16 )
FIELD	597:22	597:22	14	n1
LEAF_NODE	597:22	597:22	15	n1
LEAF_NODE	597:25	597:25	14	*
FUNCTION_CALL	597:27	597:40	14	sizeof ( uint16 )
CALLEE	597:27	597:27	15	sizeof
LEAF_NODE	597:27	597:27	16	sizeof
LEAF_NODE	597:33	597:33	15	(
ARGUMENT	597:34	597:34	15	uint16
FIELD	597:34	597:34	16	uint16
LEAF_NODE	597:34	597:34	17	uint16
LEAF_NODE	597:40	597:40	15	)
LEAF_NODE	597:41	597:41	13	)
EQ_OPERATOR	597:43	597:43	12	==
LEAF_NODE	597:43	597:43	13	==
FIELD	597:46	597:46	12	0
LEAF_NODE	597:46	597:46	13	0
LEAF_NODE	597:47	597:47	10	)
STATEMENTS	598:4	598:4	10	
JUMP_STATEMENT	598:4	598:14	11	return ( 1 ) ;
KEYWORD	598:4	598:4	12	return
LEAF_NODE	598:4	598:4	13	return
DESTINATION	598:11	598:11	12	( 1 )
EXPR	598:11	598:13	13	( 1 )
LEAF_NODE	598:11	598:11	14	(
FIELD	598:12	598:12	14	1
LEAF_NODE	598:12	598:12	15	1
LEAF_NODE	598:13	598:13	14	)
LEAF_NODE	598:14	598:14	12	;
EXPR_STATEMENT	599:3	599:47	9	printf ( "%s: value mismatch, <%u:" , name , n1 ) ;
EXPR	599:3	599:3	10	printf ( "%s: value mismatch, <%u:" , name , n1 )
FUNCTION_CALL	599:3	599:46	11	printf ( "%s: value mismatch, <%u:" , name , n1 )
CALLEE	599:3	599:3	12	printf
LEAF_NODE	599:3	599:3	13	printf
LEAF_NODE	599:9	599:9	12	(
ARGUMENT	599:10	599:10	12	"%s: value mismatch, <%u:"
FIELD	599:10	599:10	13	"%s: value mismatch, <%u:"
LEAF_NODE	599:10	599:10	14	"%s: value mismatch, <%u:"
LEAF_NODE	599:36	599:36	12	,
ARGUMENT	599:38	599:38	12	name
FIELD	599:38	599:38	13	name
LEAF_NODE	599:38	599:38	14	name
LEAF_NODE	599:42	599:42	12	,
ARGUMENT	599:44	599:44	12	n1
FIELD	599:44	599:44	13	n1
LEAF_NODE	599:44	599:44	14	n1
LEAF_NODE	599:46	599:46	12	)
LEAF_NODE	599:47	599:47	10	;
EXPR_STATEMENT	600:3	600:11	9	sep = "" ;
EXPR	600:3	600:3	10	sep = ""
ASSIGN	600:3	600:9	11	sep = ""
LVAL	600:3	600:3	12	sep
FIELD	600:3	600:3	13	sep
LEAF_NODE	600:3	600:3	14	sep
ASSIGN_OP	600:7	600:7	12	=
LEAF_NODE	600:7	600:7	13	=
RVAL	600:9	600:9	12	""
FIELD	600:9	600:9	13	""
LEAF_NODE	600:9	600:9	14	""
LEAF_NODE	600:11	600:11	10	;
ITERATION	601:3	602:4	9	
KEYWORD	601:3	601:3	10	for
LEAF_NODE	601:3	601:3	11	for
LEAF_NODE	601:7	601:7	10	(
FOR_INIT	601:8	601:13	10	i = 0 ;
EXPR	601:8	601:8	11	i = 0
ASSIGN	601:8	601:12	12	i = 0
LVAL	601:8	601:8	13	i
FIELD	601:8	601:8	14	i
LEAF_NODE	601:8	601:8	15	i
ASSIGN_OP	601:10	601:10	13	=
LEAF_NODE	601:10	601:10	14	=
RVAL	601:12	601:12	13	0
FIELD	601:12	601:12	14	0
LEAF_NODE	601:12	601:12	15	0
LEAF_NODE	601:13	601:13	11	;
CONDITION	601:15	601:15	10	i < n1
EXPR	601:15	601:19	11	i < n1
FIELD	601:15	601:15	12	i
LEAF_NODE	601:15	601:15	13	i
REL_OPERATOR	601:17	601:17	12	<
LEAF_NODE	601:17	601:17	13	<
FIELD	601:19	601:19	12	n1
LEAF_NODE	601:19	601:19	13	n1
LEAF_NODE	601:21	601:21	10	;
FOR_EXPR	601:23	601:23	10	i ++
EXPR	601:23	601:23	11	i ++
FIELD	601:23	601:24	12	i ++
LEAF_NODE	601:23	601:23	13	i
LEAF_NODE	601:24	601:24	13	++
LEAF_NODE	601:26	601:26	10	)
STATEMENTS	602:4	602:4	10	
EXPR_STATEMENT	602:4	602:41	11	printf ( "%s%u" , sep , a1 [ i ] ) , sep = "," ;
EXPR	602:4	602:32	12	printf ( "%s%u" , sep , a1 [ i ] ) , sep = ","
FUNCTION_CALL	602:4	602:29	13	printf ( "%s%u" , sep , a1 [ i ] )
CALLEE	602:4	602:4	14	printf
LEAF_NODE	602:4	602:4	15	printf
LEAF_NODE	602:10	602:10	14	(
ARGUMENT	602:11	602:11	14	"%s%u"
FIELD	602:11	602:11	15	"%s%u"
LEAF_NODE	602:11	602:11	16	"%s%u"
LEAF_NODE	602:17	602:17	14	,
ARGUMENT	602:19	602:19	14	sep
FIELD	602:19	602:19	15	sep
LEAF_NODE	602:19	602:19	16	sep
LEAF_NODE	602:22	602:22	14	,
ARGUMENT	602:24	602:24	14	a1 [ i ]
FIELD	602:24	602:28	15	a1 [ i ]
LEAF_NODE	602:24	602:24	16	a1
LEAF_NODE	602:26	602:26	16	[
EXPR	602:27	602:27	16	i
FIELD	602:27	602:27	17	i
LEAF_NODE	602:27	602:27	18	i
LEAF_NODE	602:28	602:28	16	]
LEAF_NODE	602:29	602:29	14	)
LEAF_NODE	602:30	602:30	13	,
ASSIGN	602:32	602:38	13	sep = ","
LVAL	602:32	602:32	14	sep
FIELD	602:32	602:32	15	sep
LEAF_NODE	602:32	602:32	16	sep
ASSIGN_OP	602:36	602:36	14	=
LEAF_NODE	602:36	602:36	15	=
RVAL	602:38	602:38	14	","
FIELD	602:38	602:38	15	","
LEAF_NODE	602:38	602:38	16	","
LEAF_NODE	602:41	602:41	12	;
EXPR_STATEMENT	603:3	603:28	9	printf ( "> and <%u: " , n2 ) ;
EXPR	603:3	603:3	10	printf ( "> and <%u: " , n2 )
FUNCTION_CALL	603:3	603:27	11	printf ( "> and <%u: " , n2 )
CALLEE	603:3	603:3	12	printf
LEAF_NODE	603:3	603:3	13	printf
LEAF_NODE	603:9	603:9	12	(
ARGUMENT	603:10	603:10	12	"> and <%u: "
FIELD	603:10	603:10	13	"> and <%u: "
LEAF_NODE	603:10	603:10	14	"> and <%u: "
LEAF_NODE	603:23	603:23	12	,
ARGUMENT	603:25	603:25	12	n2
FIELD	603:25	603:25	13	n2
LEAF_NODE	603:25	603:25	14	n2
LEAF_NODE	603:27	603:27	12	)
LEAF_NODE	603:28	603:28	10	;
EXPR_STATEMENT	604:3	604:11	9	sep = "" ;
EXPR	604:3	604:3	10	sep = ""
ASSIGN	604:3	604:9	11	sep = ""
LVAL	604:3	604:3	12	sep
FIELD	604:3	604:3	13	sep
LEAF_NODE	604:3	604:3	14	sep
ASSIGN_OP	604:7	604:7	12	=
LEAF_NODE	604:7	604:7	13	=
RVAL	604:9	604:9	12	""
FIELD	604:9	604:9	13	""
LEAF_NODE	604:9	604:9	14	""
LEAF_NODE	604:11	604:11	10	;
ITERATION	605:3	606:4	9	
KEYWORD	605:3	605:3	10	for
LEAF_NODE	605:3	605:3	11	for
LEAF_NODE	605:7	605:7	10	(
FOR_INIT	605:8	605:13	10	i = 0 ;
EXPR	605:8	605:8	11	i = 0
ASSIGN	605:8	605:12	12	i = 0
LVAL	605:8	605:8	13	i
FIELD	605:8	605:8	14	i
LEAF_NODE	605:8	605:8	15	i
ASSIGN_OP	605:10	605:10	13	=
LEAF_NODE	605:10	605:10	14	=
RVAL	605:12	605:12	13	0
FIELD	605:12	605:12	14	0
LEAF_NODE	605:12	605:12	15	0
LEAF_NODE	605:13	605:13	11	;
CONDITION	605:15	605:15	10	i < n2
EXPR	605:15	605:19	11	i < n2
FIELD	605:15	605:15	12	i
LEAF_NODE	605:15	605:15	13	i
REL_OPERATOR	605:17	605:17	12	<
LEAF_NODE	605:17	605:17	13	<
FIELD	605:19	605:19	12	n2
LEAF_NODE	605:19	605:19	13	n2
LEAF_NODE	605:21	605:21	10	;
FOR_EXPR	605:23	605:23	10	i ++
EXPR	605:23	605:23	11	i ++
FIELD	605:23	605:24	12	i ++
LEAF_NODE	605:23	605:23	13	i
LEAF_NODE	605:24	605:24	13	++
LEAF_NODE	605:26	605:26	10	)
STATEMENTS	606:4	606:4	10	
EXPR_STATEMENT	606:4	606:41	11	printf ( "%s%u" , sep , a2 [ i ] ) , sep = "," ;
EXPR	606:4	606:32	12	printf ( "%s%u" , sep , a2 [ i ] ) , sep = ","
FUNCTION_CALL	606:4	606:29	13	printf ( "%s%u" , sep , a2 [ i ] )
CALLEE	606:4	606:4	14	printf
LEAF_NODE	606:4	606:4	15	printf
LEAF_NODE	606:10	606:10	14	(
ARGUMENT	606:11	606:11	14	"%s%u"
FIELD	606:11	606:11	15	"%s%u"
LEAF_NODE	606:11	606:11	16	"%s%u"
LEAF_NODE	606:17	606:17	14	,
ARGUMENT	606:19	606:19	14	sep
FIELD	606:19	606:19	15	sep
LEAF_NODE	606:19	606:19	16	sep
LEAF_NODE	606:22	606:22	14	,
ARGUMENT	606:24	606:24	14	a2 [ i ]
FIELD	606:24	606:28	15	a2 [ i ]
LEAF_NODE	606:24	606:24	16	a2
LEAF_NODE	606:26	606:26	16	[
EXPR	606:27	606:27	16	i
FIELD	606:27	606:27	17	i
LEAF_NODE	606:27	606:27	18	i
LEAF_NODE	606:28	606:28	16	]
LEAF_NODE	606:29	606:29	14	)
LEAF_NODE	606:30	606:30	13	,
ASSIGN	606:32	606:38	13	sep = ","
LVAL	606:32	606:32	14	sep
FIELD	606:32	606:32	15	sep
LEAF_NODE	606:32	606:32	16	sep
ASSIGN_OP	606:36	606:36	14	=
LEAF_NODE	606:36	606:36	15	=
RVAL	606:38	606:38	14	","
FIELD	606:38	606:38	15	","
LEAF_NODE	606:38	606:38	16	","
LEAF_NODE	606:41	606:41	12	;
EXPR_STATEMENT	607:3	607:16	9	printf ( ">\n" ) ;
EXPR	607:3	607:3	10	printf ( ">\n" )
FUNCTION_CALL	607:3	607:15	11	printf ( ">\n" )
CALLEE	607:3	607:3	12	printf
LEAF_NODE	607:3	607:3	13	printf
LEAF_NODE	607:9	607:9	12	(
ARGUMENT	607:10	607:10	12	">\n"
FIELD	607:10	607:10	13	">\n"
LEAF_NODE	607:10	607:10	14	">\n"
LEAF_NODE	607:15	607:15	12	)
LEAF_NODE	607:16	607:16	10	;
LEAF_NODE	608:2	608:2	8	}
SELECTION	608:4	609:3	6	
KEYWORD	608:4	608:4	7	else
LEAF_NODE	608:4	608:4	8	else
STATEMENTS	609:3	609:3	7	
EXPR_STATEMENT	609:3	612:4	8	printf ( "%s: %u items in %s, %u items in %s" , name , n1 , TIFFFileName ( tif1 ) , n2 , TIFFFileName ( tif2 ) ) ;
EXPR	609:3	609:3	9	printf ( "%s: %u items in %s, %u items in %s" , name , n1 , TIFFFileName ( tif1 ) , n2 , TIFFFileName ( tif2 ) )
FUNCTION_CALL	609:3	612:3	10	printf ( "%s: %u items in %s, %u items in %s" , name , n1 , TIFFFileName ( tif1 ) , n2 , TIFFFileName ( tif2 ) )
CALLEE	609:3	609:3	11	printf
LEAF_NODE	609:3	609:3	12	printf
LEAF_NODE	609:9	609:9	11	(
ARGUMENT	609:10	609:10	11	"%s: %u items in %s, %u items in %s"
FIELD	609:10	609:10	12	"%s: %u items in %s, %u items in %s"
LEAF_NODE	609:10	609:10	13	"%s: %u items in %s, %u items in %s"
LEAF_NODE	609:46	609:46	11	,
ARGUMENT	609:48	609:48	11	name
FIELD	609:48	609:48	12	name
LEAF_NODE	609:48	609:48	13	name
LEAF_NODE	609:52	609:52	11	,
ARGUMENT	610:7	610:7	11	n1
FIELD	610:7	610:7	12	n1
LEAF_NODE	610:7	610:7	13	n1
LEAF_NODE	610:9	610:9	11	,
ARGUMENT	610:11	610:11	11	TIFFFileName ( tif1 )
FUNCTION_CALL	610:11	610:28	12	TIFFFileName ( tif1 )
CALLEE	610:11	610:11	13	TIFFFileName
LEAF_NODE	610:11	610:11	14	TIFFFileName
LEAF_NODE	610:23	610:23	13	(
ARGUMENT	610:24	610:24	13	tif1
FIELD	610:24	610:24	14	tif1
LEAF_NODE	610:24	610:24	15	tif1
LEAF_NODE	610:28	610:28	13	)
LEAF_NODE	610:29	610:29	11	,
ARGUMENT	611:7	611:7	11	n2
FIELD	611:7	611:7	12	n2
LEAF_NODE	611:7	611:7	13	n2
LEAF_NODE	611:9	611:9	11	,
ARGUMENT	611:11	611:11	11	TIFFFileName ( tif2 )
FUNCTION_CALL	611:11	611:28	12	TIFFFileName ( tif2 )
CALLEE	611:11	611:11	13	TIFFFileName
LEAF_NODE	611:11	611:11	14	TIFFFileName
LEAF_NODE	611:23	611:23	13	(
ARGUMENT	611:24	611:24	13	tif2
FIELD	611:24	611:24	14	tif2
LEAF_NODE	611:24	611:24	15	tif2
LEAF_NODE	611:28	611:28	13	)
LEAF_NODE	612:3	612:3	11	)
LEAF_NODE	612:4	612:4	9	;
LEAF_NODE	613:1	613:1	5	}
SELECTION	613:3	613:8	3	
KEYWORD	613:3	613:3	4	else
LEAF_NODE	613:3	613:3	5	else
STATEMENTS	613:8	613:8	4	
SELECTION	613:8	614:2	5	
KEYWORD	613:8	613:8	6	if
LEAF_NODE	613:8	613:8	7	if
LEAF_NODE	613:11	613:11	6	(
CONDITION	613:12	613:12	6	TIFFGetField ( tif2 , tag , & n2 , & a2 )
EXPR	613:12	613:12	7	TIFFGetField ( tif2 , tag , & n2 , & a2 )
FUNCTION_CALL	613:12	613:44	8	TIFFGetField ( tif2 , tag , & n2 , & a2 )
CALLEE	613:12	613:12	9	TIFFGetField
LEAF_NODE	613:12	613:12	10	TIFFGetField
LEAF_NODE	613:24	613:24	9	(
ARGUMENT	613:25	613:25	9	tif2
FIELD	613:25	613:25	10	tif2
LEAF_NODE	613:25	613:25	11	tif2
LEAF_NODE	613:29	613:29	9	,
ARGUMENT	613:31	613:31	9	tag
FIELD	613:31	613:31	10	tag
LEAF_NODE	613:31	613:31	11	tag
LEAF_NODE	613:34	613:34	9	,
ARGUMENT	613:36	613:36	9	& n2
UNARY_EXPR	613:36	613:37	10	& n2
UNARY_OPERATOR	613:36	613:36	11	&
LEAF_NODE	613:36	613:36	12	&
FIELD	613:37	613:37	11	n2
LEAF_NODE	613:37	613:37	12	n2
LEAF_NODE	613:39	613:39	9	,
ARGUMENT	613:41	613:41	9	& a2
UNARY_EXPR	613:41	613:42	10	& a2
UNARY_OPERATOR	613:41	613:41	11	&
LEAF_NODE	613:41	613:41	12	&
FIELD	613:42	613:42	11	a2
LEAF_NODE	613:42	613:42	12	a2
LEAF_NODE	613:44	613:44	9	)
LEAF_NODE	613:45	613:45	6	)
STATEMENTS	614:2	614:2	6	
EXPR_STATEMENT	614:2	614:65	7	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) ) ;
EXPR	614:2	614:2	8	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) )
FUNCTION_CALL	614:2	614:64	9	printf ( "%s tag appears only in %s\n" , name , TIFFFileName ( tif2 ) )
CALLEE	614:2	614:2	10	printf
LEAF_NODE	614:2	614:2	11	printf
LEAF_NODE	614:8	614:8	10	(
ARGUMENT	614:9	614:9	10	"%s tag appears only in %s\n"
FIELD	614:9	614:9	11	"%s tag appears only in %s\n"
LEAF_NODE	614:9	614:9	12	"%s tag appears only in %s\n"
LEAF_NODE	614:38	614:38	10	,
ARGUMENT	614:40	614:40	10	name
FIELD	614:40	614:40	11	name
LEAF_NODE	614:40	614:40	12	name
LEAF_NODE	614:44	614:44	10	,
ARGUMENT	614:46	614:46	10	TIFFFileName ( tif2 )
FUNCTION_CALL	614:46	614:63	11	TIFFFileName ( tif2 )
CALLEE	614:46	614:46	12	TIFFFileName
LEAF_NODE	614:46	614:46	13	TIFFFileName
LEAF_NODE	614:58	614:58	12	(
ARGUMENT	614:59	614:59	12	tif2
FIELD	614:59	614:59	13	tif2
LEAF_NODE	614:59	614:59	14	tif2
LEAF_NODE	614:63	614:63	12	)
LEAF_NODE	614:64	614:64	10	)
LEAF_NODE	614:65	614:65	8	;
SELECTION	615:1	616:2	3	
KEYWORD	615:1	615:1	4	else
LEAF_NODE	615:1	615:1	5	else
STATEMENTS	616:2	616:2	4	
JUMP_STATEMENT	616:2	616:12	5	return ( 1 ) ;
KEYWORD	616:2	616:2	6	return
LEAF_NODE	616:2	616:2	7	return
DESTINATION	616:9	616:9	6	( 1 )
EXPR	616:9	616:11	7	( 1 )
LEAF_NODE	616:9	616:9	8	(
FIELD	616:10	616:10	8	1
LEAF_NODE	616:10	616:10	9	1
LEAF_NODE	616:11	616:11	8	)
LEAF_NODE	616:12	616:12	6	;
JUMP_STATEMENT	617:1	617:11	3	return ( 0 ) ;
KEYWORD	617:1	617:1	4	return
LEAF_NODE	617:1	617:1	5	return
DESTINATION	617:8	617:8	4	( 0 )
EXPR	617:8	617:10	5	( 0 )
LEAF_NODE	617:8	617:8	6	(
FIELD	617:9	617:9	6	0
LEAF_NODE	617:9	617:9	7	0
LEAF_NODE	617:10	617:10	6	)
LEAF_NODE	617:11	617:11	4	;
LEAF_NODE	618:0	618:0	2	}
FUNCTION_DEF	620:0	625:0	1	
RETURN_TYPE	620:0	620:7	2	static int
LEAF_NODE	620:0	620:0	3	static
TYPE_NAME	620:7	620:7	3	int
LEAF_NODE	620:7	620:7	4	int
FUNCTION_NAME	621:0	621:0	2	CheckLongTag
LEAF_NODE	621:0	621:0	3	CheckLongTag
PARAMETER_LIST	621:12	621:56	2	( TIFF * tif1 , TIFF * tif2 , int tag , char * name )
LEAF_NODE	621:12	621:12	3	(
PARAMETER_DECL	621:13	621:19	3	TIFF * tif1
TYPE	621:13	621:17	4	TIFF *
TYPE_NAME	621:13	621:13	5	TIFF
LEAF_NODE	621:13	621:13	6	TIFF
POINTER	621:17	621:17	5	*
LEAF_NODE	621:17	621:17	6	*
NAME	621:19	621:19	4	tif1
LEAF_NODE	621:19	621:19	5	tif1
LEAF_NODE	621:23	621:23	3	,
PARAMETER_DECL	621:25	621:31	3	TIFF * tif2
TYPE	621:25	621:29	4	TIFF *
TYPE_NAME	621:25	621:25	5	TIFF
LEAF_NODE	621:25	621:25	6	TIFF
POINTER	621:29	621:29	5	*
LEAF_NODE	621:29	621:29	6	*
NAME	621:31	621:31	4	tif2
LEAF_NODE	621:31	621:31	5	tif2
LEAF_NODE	621:35	621:35	3	,
PARAMETER_DECL	621:37	621:41	3	int tag
TYPE	621:37	621:37	4	int
TYPE_NAME	621:37	621:37	5	int
LEAF_NODE	621:37	621:37	6	int
NAME	621:41	621:41	4	tag
LEAF_NODE	621:41	621:41	5	tag
LEAF_NODE	621:44	621:44	3	,
PARAMETER_DECL	621:46	621:52	3	char * name
TYPE	621:46	621:50	4	char *
TYPE_NAME	621:46	621:46	5	char
LEAF_NODE	621:46	621:46	6	char
POINTER	621:50	621:50	5	*
LEAF_NODE	621:50	621:50	6	*
NAME	621:52	621:52	4	name
LEAF_NODE	621:52	621:52	5	name
LEAF_NODE	621:56	621:56	3	)
LEAF_NODE	622:0	622:0	2	{
STATEMENTS	623:1	624:1	2	
SIMPLE_DECL	623:1	623:14	3	uint32 v1 , uint32 v2 ;
INIT_DECL_LIST	623:1	623:1	4	uint32 v1 , uint32 v2
VAR_DECL	623:1	623:8	5	uint32 v1
TYPE	623:1	623:1	6	uint32
TYPE_NAME	623:1	623:1	7	uint32
LEAF_NODE	623:1	623:1	8	uint32
NAME	623:8	623:8	6	v1
LEAF_NODE	623:8	623:8	7	v1
LEAF_NODE	623:10	623:10	5	,
VAR_DECL	623:1	623:12	5	uint32 v2
TYPE	623:1	623:1	6	uint32
TYPE_NAME	623:1	623:1	7	uint32
LEAF_NODE	623:1	623:1	8	uint32
NAME	623:12	623:12	6	v2
LEAF_NODE	623:12	623:12	7	v2
LEAF_NODE	623:14	623:14	4	;
EXPR_STATEMENT	624:1	624:31	3	CHECK ( v1 == v2 , "%s: %u %u\n" ) ;
EXPR	624:1	624:1	4	CHECK ( v1 == v2 , "%s: %u %u\n" )
FUNCTION_CALL	624:1	624:30	5	CHECK ( v1 == v2 , "%s: %u %u\n" )
CALLEE	624:1	624:1	6	CHECK
LEAF_NODE	624:1	624:1	7	CHECK
LEAF_NODE	624:6	624:6	6	(
ARGUMENT	624:7	624:13	6	v1 == v2
FIELD	624:7	624:7	7	v1
LEAF_NODE	624:7	624:7	8	v1
EQ_OPERATOR	624:10	624:10	7	==
LEAF_NODE	624:10	624:10	8	==
FIELD	624:13	624:13	7	v2
LEAF_NODE	624:13	624:13	8	v2
LEAF_NODE	624:15	624:15	6	,
ARGUMENT	624:17	624:17	6	"%s: %u %u\n"
FIELD	624:17	624:17	7	"%s: %u %u\n"
LEAF_NODE	624:17	624:17	8	"%s: %u %u\n"
LEAF_NODE	624:30	624:30	6	)
LEAF_NODE	624:31	624:31	4	;
LEAF_NODE	625:0	625:0	2	}
FUNCTION_DEF	627:0	632:0	1	
RETURN_TYPE	627:0	627:7	2	static int
LEAF_NODE	627:0	627:0	3	static
TYPE_NAME	627:7	627:7	3	int
LEAF_NODE	627:7	627:7	4	int
FUNCTION_NAME	628:0	628:0	2	CheckFloatTag
LEAF_NODE	628:0	628:0	3	CheckFloatTag
PARAMETER_LIST	628:13	628:57	2	( TIFF * tif1 , TIFF * tif2 , int tag , char * name )
LEAF_NODE	628:13	628:13	3	(
PARAMETER_DECL	628:14	628:20	3	TIFF * tif1
TYPE	628:14	628:18	4	TIFF *
TYPE_NAME	628:14	628:14	5	TIFF
LEAF_NODE	628:14	628:14	6	TIFF
POINTER	628:18	628:18	5	*
LEAF_NODE	628:18	628:18	6	*
NAME	628:20	628:20	4	tif1
LEAF_NODE	628:20	628:20	5	tif1
LEAF_NODE	628:24	628:24	3	,
PARAMETER_DECL	628:26	628:32	3	TIFF * tif2
TYPE	628:26	628:30	4	TIFF *
TYPE_NAME	628:26	628:26	5	TIFF
LEAF_NODE	628:26	628:26	6	TIFF
POINTER	628:30	628:30	5	*
LEAF_NODE	628:30	628:30	6	*
NAME	628:32	628:32	4	tif2
LEAF_NODE	628:32	628:32	5	tif2
LEAF_NODE	628:36	628:36	3	,
PARAMETER_DECL	628:38	628:42	3	int tag
TYPE	628:38	628:38	4	int
TYPE_NAME	628:38	628:38	5	int
LEAF_NODE	628:38	628:38	6	int
NAME	628:42	628:42	4	tag
LEAF_NODE	628:42	628:42	5	tag
LEAF_NODE	628:45	628:45	3	,
PARAMETER_DECL	628:47	628:53	3	char * name
TYPE	628:47	628:51	4	char *
TYPE_NAME	628:47	628:47	5	char
LEAF_NODE	628:47	628:47	6	char
POINTER	628:51	628:51	5	*
LEAF_NODE	628:51	628:51	6	*
NAME	628:53	628:53	4	name
LEAF_NODE	628:53	628:53	5	name
LEAF_NODE	628:57	628:57	3	)
LEAF_NODE	629:0	629:0	2	{
STATEMENTS	630:1	631:1	2	
SIMPLE_DECL	630:1	630:13	3	float v1 , float v2 ;
INIT_DECL_LIST	630:1	630:1	4	float v1 , float v2
VAR_DECL	630:1	630:7	5	float v1
TYPE	630:1	630:1	6	float
TYPE_NAME	630:1	630:1	7	float
LEAF_NODE	630:1	630:1	8	float
NAME	630:7	630:7	6	v1
LEAF_NODE	630:7	630:7	7	v1
LEAF_NODE	630:9	630:9	5	,
VAR_DECL	630:1	630:11	5	float v2
TYPE	630:1	630:1	6	float
TYPE_NAME	630:1	630:1	7	float
LEAF_NODE	630:1	630:1	8	float
NAME	630:11	630:11	6	v2
LEAF_NODE	630:11	630:11	7	v2
LEAF_NODE	630:13	630:13	4	;
EXPR_STATEMENT	631:1	631:31	3	CHECK ( v1 == v2 , "%s: %g %g\n" ) ;
EXPR	631:1	631:1	4	CHECK ( v1 == v2 , "%s: %g %g\n" )
FUNCTION_CALL	631:1	631:30	5	CHECK ( v1 == v2 , "%s: %g %g\n" )
CALLEE	631:1	631:1	6	CHECK
LEAF_NODE	631:1	631:1	7	CHECK
LEAF_NODE	631:6	631:6	6	(
ARGUMENT	631:7	631:13	6	v1 == v2
FIELD	631:7	631:7	7	v1
LEAF_NODE	631:7	631:7	8	v1
EQ_OPERATOR	631:10	631:10	7	==
LEAF_NODE	631:10	631:10	8	==
FIELD	631:13	631:13	7	v2
LEAF_NODE	631:13	631:13	8	v2
LEAF_NODE	631:15	631:15	6	,
ARGUMENT	631:17	631:17	6	"%s: %g %g\n"
FIELD	631:17	631:17	7	"%s: %g %g\n"
LEAF_NODE	631:17	631:17	8	"%s: %g %g\n"
LEAF_NODE	631:30	631:30	6	)
LEAF_NODE	631:31	631:31	4	;
LEAF_NODE	632:0	632:0	2	}
FUNCTION_DEF	634:0	639:0	1	
RETURN_TYPE	634:0	634:7	2	static int
LEAF_NODE	634:0	634:0	3	static
TYPE_NAME	634:7	634:7	3	int
LEAF_NODE	634:7	634:7	4	int
FUNCTION_NAME	635:0	635:0	2	CheckStringTag
LEAF_NODE	635:0	635:0	3	CheckStringTag
PARAMETER_LIST	635:14	635:58	2	( TIFF * tif1 , TIFF * tif2 , int tag , char * name )
LEAF_NODE	635:14	635:14	3	(
PARAMETER_DECL	635:15	635:21	3	TIFF * tif1
TYPE	635:15	635:19	4	TIFF *
TYPE_NAME	635:15	635:15	5	TIFF
LEAF_NODE	635:15	635:15	6	TIFF
POINTER	635:19	635:19	5	*
LEAF_NODE	635:19	635:19	6	*
NAME	635:21	635:21	4	tif1
LEAF_NODE	635:21	635:21	5	tif1
LEAF_NODE	635:25	635:25	3	,
PARAMETER_DECL	635:27	635:33	3	TIFF * tif2
TYPE	635:27	635:31	4	TIFF *
TYPE_NAME	635:27	635:27	5	TIFF
LEAF_NODE	635:27	635:27	6	TIFF
POINTER	635:31	635:31	5	*
LEAF_NODE	635:31	635:31	6	*
NAME	635:33	635:33	4	tif2
LEAF_NODE	635:33	635:33	5	tif2
LEAF_NODE	635:37	635:37	3	,
PARAMETER_DECL	635:39	635:43	3	int tag
TYPE	635:39	635:39	4	int
TYPE_NAME	635:39	635:39	5	int
LEAF_NODE	635:39	635:39	6	int
NAME	635:43	635:43	4	tag
LEAF_NODE	635:43	635:43	5	tag
LEAF_NODE	635:46	635:46	3	,
PARAMETER_DECL	635:48	635:54	3	char * name
TYPE	635:48	635:52	4	char *
TYPE_NAME	635:48	635:48	5	char
LEAF_NODE	635:48	635:48	6	char
POINTER	635:52	635:52	5	*
LEAF_NODE	635:52	635:52	6	*
NAME	635:54	635:54	4	name
LEAF_NODE	635:54	635:54	5	name
LEAF_NODE	635:58	635:58	3	)
LEAF_NODE	636:0	636:0	2	{
STATEMENTS	637:1	638:1	2	
SIMPLE_DECL	637:1	637:14	3	char * v1 , char * v2 ;
INIT_DECL_LIST	637:1	637:1	4	char * v1 , char * v2
VAR_DECL	637:1	637:7	5	char * v1
TYPE	637:1	637:6	6	char *
TYPE_NAME	637:1	637:1	7	char
LEAF_NODE	637:1	637:1	8	char
POINTER	637:6	637:6	7	*
LEAF_NODE	637:6	637:6	8	*
NAME	637:7	637:7	6	v1
LEAF_NODE	637:7	637:7	7	v1
LEAF_NODE	637:9	637:9	5	,
VAR_DECL	637:1	637:12	5	char * v2
TYPE	637:1	637:11	6	char *
TYPE_NAME	637:1	637:1	7	char
LEAF_NODE	637:1	637:1	8	char
POINTER	637:11	637:11	7	*
LEAF_NODE	637:11	637:11	8	*
NAME	637:12	637:12	6	v2
LEAF_NODE	637:12	637:12	7	v2
LEAF_NODE	637:14	637:14	4	;
EXPR_STATEMENT	638:1	638:50	3	CHECK ( strcmp ( v1 , v2 ) == 0 , "%s: \"%s\" \"%s\"\n" ) ;
EXPR	638:1	638:1	4	CHECK ( strcmp ( v1 , v2 ) == 0 , "%s: \"%s\" \"%s\"\n" )
FUNCTION_CALL	638:1	638:49	5	CHECK ( strcmp ( v1 , v2 ) == 0 , "%s: \"%s\" \"%s\"\n" )
CALLEE	638:1	638:1	6	CHECK
LEAF_NODE	638:1	638:1	7	CHECK
LEAF_NODE	638:6	638:6	6	(
ARGUMENT	638:7	638:25	6	strcmp ( v1 , v2 ) == 0
FUNCTION_CALL	638:7	638:20	7	strcmp ( v1 , v2 )
CALLEE	638:7	638:7	8	strcmp
LEAF_NODE	638:7	638:7	9	strcmp
LEAF_NODE	638:13	638:13	8	(
ARGUMENT	638:14	638:14	8	v1
FIELD	638:14	638:14	9	v1
LEAF_NODE	638:14	638:14	10	v1
LEAF_NODE	638:16	638:16	8	,
ARGUMENT	638:18	638:18	8	v2
FIELD	638:18	638:18	9	v2
LEAF_NODE	638:18	638:18	10	v2
LEAF_NODE	638:20	638:20	8	)
EQ_OPERATOR	638:22	638:22	7	==
LEAF_NODE	638:22	638:22	8	==
FIELD	638:25	638:25	7	0
LEAF_NODE	638:25	638:25	8	0
LEAF_NODE	638:26	638:26	6	,
ARGUMENT	638:28	638:28	6	"%s: \"%s\" \"%s\"\n"
FIELD	638:28	638:28	7	"%s: \"%s\" \"%s\"\n"
LEAF_NODE	638:28	638:28	8	"%s: \"%s\" \"%s\"\n"
LEAF_NODE	638:49	638:49	6	)
LEAF_NODE	638:50	638:50	4	;
LEAF_NODE	639:0	639:0	2	}
FUNCTION_DEF	641:0	649:0	1	
RETURN_TYPE	641:0	641:7	2	static void
LEAF_NODE	641:0	641:0	3	static
TYPE_NAME	641:7	641:7	3	void
LEAF_NODE	641:7	641:7	4	void
FUNCTION_NAME	642:0	642:0	2	leof
LEAF_NODE	642:0	642:0	3	leof
PARAMETER_LIST	642:4	642:40	2	( const char * name , uint32 row , int s )
LEAF_NODE	642:4	642:4	3	(
PARAMETER_DECL	642:5	642:17	3	const char * name
TYPE	642:5	642:15	4	const char *
TYPE_NAME	642:5	642:11	5	const char
LEAF_NODE	642:5	642:5	6	const
LEAF_NODE	642:11	642:11	6	char
POINTER	642:15	642:15	5	*
LEAF_NODE	642:15	642:15	6	*
NAME	642:17	642:17	4	name
LEAF_NODE	642:17	642:17	5	name
LEAF_NODE	642:21	642:21	3	,
PARAMETER_DECL	642:23	642:30	3	uint32 row
TYPE	642:23	642:23	4	uint32
TYPE_NAME	642:23	642:23	5	uint32
LEAF_NODE	642:23	642:23	6	uint32
NAME	642:30	642:30	4	row
LEAF_NODE	642:30	642:30	5	row
LEAF_NODE	642:33	642:33	3	,
PARAMETER_DECL	642:35	642:39	3	int s
TYPE	642:35	642:35	4	int
TYPE_NAME	642:35	642:35	5	int
LEAF_NODE	642:35	642:35	6	int
NAME	642:39	642:39	4	s
LEAF_NODE	642:39	642:39	5	s
LEAF_NODE	642:40	642:40	3	)
LEAF_NODE	643:0	643:0	2	{
STATEMENTS	645:1	648:1	2	
EXPR_STATEMENT	645:1	645:60	3	printf ( "%s: EOF at scanline %lu" , name , ( unsigned long ) row ) ;
EXPR	645:1	645:1	4	printf ( "%s: EOF at scanline %lu" , name , ( unsigned long ) row )
FUNCTION_CALL	645:1	645:59	5	printf ( "%s: EOF at scanline %lu" , name , ( unsigned long ) row )
CALLEE	645:1	645:1	6	printf
LEAF_NODE	645:1	645:1	7	printf
LEAF_NODE	645:7	645:7	6	(
ARGUMENT	645:8	645:8	6	"%s: EOF at scanline %lu"
FIELD	645:8	645:8	7	"%s: EOF at scanline %lu"
LEAF_NODE	645:8	645:8	8	"%s: EOF at scanline %lu"
LEAF_NODE	645:33	645:33	6	,
ARGUMENT	645:35	645:35	6	name
FIELD	645:35	645:35	7	name
LEAF_NODE	645:35	645:35	8	name
LEAF_NODE	645:39	645:39	6	,
ARGUMENT	645:41	645:56	6	( unsigned long ) row
LEAF_NODE	645:41	645:41	7	(
TYPE_NAME	645:42	645:51	7	unsigned long
LEAF_NODE	645:42	645:42	8	unsigned
LEAF_NODE	645:51	645:51	8	long
LEAF_NODE	645:55	645:55	7	)
FIELD	645:56	645:56	7	row
LEAF_NODE	645:56	645:56	8	row
LEAF_NODE	645:59	645:59	6	)
LEAF_NODE	645:60	645:60	4	;
SELECTION	646:1	647:2	3	
KEYWORD	646:1	646:1	4	if
LEAF_NODE	646:1	646:1	5	if
LEAF_NODE	646:4	646:4	4	(
CONDITION	646:5	646:5	4	s >= 0
EXPR	646:5	646:10	5	s >= 0
FIELD	646:5	646:5	6	s
LEAF_NODE	646:5	646:5	7	s
REL_OPERATOR	646:7	646:7	6	>=
LEAF_NODE	646:7	646:7	7	>=
FIELD	646:10	646:10	6	0
LEAF_NODE	646:10	646:10	7	0
LEAF_NODE	646:11	646:11	4	)
STATEMENTS	647:2	647:2	4	
EXPR_STATEMENT	647:2	647:26	5	printf ( ", sample %d" , s ) ;
EXPR	647:2	647:2	6	printf ( ", sample %d" , s )
FUNCTION_CALL	647:2	647:25	7	printf ( ", sample %d" , s )
CALLEE	647:2	647:2	8	printf
LEAF_NODE	647:2	647:2	9	printf
LEAF_NODE	647:8	647:8	8	(
ARGUMENT	647:9	647:9	8	", sample %d"
FIELD	647:9	647:9	9	", sample %d"
LEAF_NODE	647:9	647:9	10	", sample %d"
LEAF_NODE	647:22	647:22	8	,
ARGUMENT	647:24	647:24	8	s
FIELD	647:24	647:24	9	s
LEAF_NODE	647:24	647:24	10	s
LEAF_NODE	647:25	647:25	8	)
LEAF_NODE	647:26	647:26	6	;
EXPR_STATEMENT	648:1	648:13	3	printf ( "\n" ) ;
EXPR	648:1	648:1	4	printf ( "\n" )
FUNCTION_CALL	648:1	648:12	5	printf ( "\n" )
CALLEE	648:1	648:1	6	printf
LEAF_NODE	648:1	648:1	7	printf
LEAF_NODE	648:7	648:7	6	(
ARGUMENT	648:8	648:8	6	"\n"
FIELD	648:8	648:8	7	"\n"
LEAF_NODE	648:8	648:8	8	"\n"
LEAF_NODE	648:12	648:12	6	)
LEAF_NODE	648:13	648:13	4	;
LEAF_NODE	649:0	649:0	2	}
