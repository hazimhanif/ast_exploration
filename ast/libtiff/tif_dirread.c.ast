SOURCE_FILE	56:0	6325:0	0	
SIMPLE_DECL	56:0	65:1	1	enum TIFFReadDirEntryErr BASE_CLASSES { TIFFReadDirEntryErrOk = 0 , TIFFReadDirEntryErrCount = 1 , TIFFReadDirEntryErrType = 2 , TIFFReadDirEntryErrIo = 3 , TIFFReadDirEntryErrRange = 4 , TIFFReadDirEntryErrPsdif = 5 , TIFFReadDirEntryErrSizesan = 6 , TIFFReadDirEntryErrAlloc = 7 , } ;
CLASS_DEF	56:0	56:0	2	enum TIFFReadDirEntryErr BASE_CLASSES { TIFFReadDirEntryErrOk = 0 , TIFFReadDirEntryErrCount = 1 , TIFFReadDirEntryErrType = 2 , TIFFReadDirEntryErrIo = 3 , TIFFReadDirEntryErrRange = 4 , TIFFReadDirEntryErrPsdif = 5 , TIFFReadDirEntryErrSizesan = 6 , TIFFReadDirEntryErrAlloc = 7 , }
CLASS_DEF	56:0	65:0	3	enum TIFFReadDirEntryErr BASE_CLASSES { TIFFReadDirEntryErrOk = 0 , TIFFReadDirEntryErrCount = 1 , TIFFReadDirEntryErrType = 2 , TIFFReadDirEntryErrIo = 3 , TIFFReadDirEntryErrRange = 4 , TIFFReadDirEntryErrPsdif = 5 , TIFFReadDirEntryErrSizesan = 6 , TIFFReadDirEntryErrAlloc = 7 , }
LEAF_NODE	56:0	56:0	4	enum
CLASS_NAME	56:5	56:5	4	TIFFReadDirEntryErr
LEAF_NODE	56:5	56:5	5	TIFFReadDirEntryErr
LEAF_NODE	0:0	0:0	4	BASE_CLASSES
LEAF_NODE	56:25	56:25	4	{
CLASS_CONTENT	57:1	64:29	4	TIFFReadDirEntryErrOk = 0 , TIFFReadDirEntryErrCount = 1 , TIFFReadDirEntryErrType = 2 , TIFFReadDirEntryErrIo = 3 , TIFFReadDirEntryErrRange = 4 , TIFFReadDirEntryErrPsdif = 5 , TIFFReadDirEntryErrSizesan = 6 , TIFFReadDirEntryErrAlloc = 7 ,
LEAF_NODE	57:1	57:1	5	TIFFReadDirEntryErrOk
LEAF_NODE	57:23	57:23	5	=
LEAF_NODE	57:25	57:25	5	0
LEAF_NODE	57:26	57:26	5	,
LEAF_NODE	58:1	58:1	5	TIFFReadDirEntryErrCount
LEAF_NODE	58:26	58:26	5	=
LEAF_NODE	58:28	58:28	5	1
LEAF_NODE	58:29	58:29	5	,
LEAF_NODE	59:1	59:1	5	TIFFReadDirEntryErrType
LEAF_NODE	59:25	59:25	5	=
LEAF_NODE	59:27	59:27	5	2
LEAF_NODE	59:28	59:28	5	,
LEAF_NODE	60:1	60:1	5	TIFFReadDirEntryErrIo
LEAF_NODE	60:23	60:23	5	=
LEAF_NODE	60:25	60:25	5	3
LEAF_NODE	60:26	60:26	5	,
LEAF_NODE	61:1	61:1	5	TIFFReadDirEntryErrRange
LEAF_NODE	61:26	61:26	5	=
LEAF_NODE	61:28	61:28	5	4
LEAF_NODE	61:29	61:29	5	,
LEAF_NODE	62:1	62:1	5	TIFFReadDirEntryErrPsdif
LEAF_NODE	62:26	62:26	5	=
LEAF_NODE	62:28	62:28	5	5
LEAF_NODE	62:29	62:29	5	,
LEAF_NODE	63:1	63:1	5	TIFFReadDirEntryErrSizesan
LEAF_NODE	63:28	63:28	5	=
LEAF_NODE	63:30	63:30	5	6
LEAF_NODE	63:31	63:31	5	,
LEAF_NODE	64:1	64:1	5	TIFFReadDirEntryErrAlloc
LEAF_NODE	64:26	64:26	5	=
LEAF_NODE	64:28	64:28	5	7
LEAF_NODE	64:29	64:29	5	,
LEAF_NODE	65:0	65:0	4	}
LEAF_NODE	65:1	65:1	2	;
SIMPLE_DECL	174:8	181:17	1	union _UInt64Aligned_t BASE_CLASSES { double d ; uint64 l ; uint32 [ 2 ] i ; uint16 [ 4 ] s ; uint8 [ 8 ] c ; } UInt64Aligned_t ;
VAR_DECL	174:8	181:2	2	union _UInt64Aligned_t BASE_CLASSES { double d ; uint64 l ; uint32 [ 2 ] i ; uint16 [ 4 ] s ; uint8 [ 8 ] c ; } UInt64Aligned_t
TYPE	174:8	174:8	3	union _UInt64Aligned_t BASE_CLASSES { double d ; uint64 l ; uint32 [ 2 ] i ; uint16 [ 4 ] s ; uint8 [ 8 ] c ; }
CLASS_DEF	174:8	181:0	4	union _UInt64Aligned_t BASE_CLASSES { double d ; uint64 l ; uint32 [ 2 ] i ; uint16 [ 4 ] s ; uint8 [ 8 ] c ; }
LEAF_NODE	174:8	174:8	5	union
CLASS_NAME	174:14	174:14	5	_UInt64Aligned_t
LEAF_NODE	174:14	174:14	6	_UInt64Aligned_t
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	175:0	175:0	5	{
CLASS_CONTENT	176:8	180:1	5	double d ; uint64 l ; uint32 [ 2 ] i ; uint16 [ 4 ] s ; uint8 [ 8 ] c ;
SIMPLE_DECL	176:8	176:16	6	double d ;
VAR_DECL	176:8	176:15	7	double d
TYPE	176:8	176:8	8	double
TYPE_NAME	176:8	176:8	9	double
LEAF_NODE	176:8	176:8	10	double
NAME	176:15	176:15	8	d
LEAF_NODE	176:15	176:15	9	d
LEAF_NODE	176:16	176:16	7	;
SIMPLE_DECL	177:1	177:9	6	uint64 l ;
VAR_DECL	177:1	177:8	7	uint64 l
TYPE	177:1	177:1	8	uint64
TYPE_NAME	177:1	177:1	9	uint64
LEAF_NODE	177:1	177:1	10	uint64
NAME	177:8	177:8	8	l
LEAF_NODE	177:8	177:8	9	l
LEAF_NODE	177:9	177:9	7	;
SIMPLE_DECL	178:1	178:12	6	uint32 [ 2 ] i ;
VAR_DECL	178:1	178:8	7	uint32 [ 2 ] i
TYPE	178:1	178:9	8	uint32 [ 2 ]
TYPE_NAME	178:1	178:1	9	uint32
LEAF_NODE	178:1	178:1	10	uint32
TYPE_SUFFIX	178:9	178:11	9	[ 2 ]
LEAF_NODE	178:9	178:9	10	[
FIELD	178:10	178:10	10	2
LEAF_NODE	178:10	178:10	11	2
LEAF_NODE	178:11	178:11	10	]
NAME	178:8	178:8	8	i
LEAF_NODE	178:8	178:8	9	i
LEAF_NODE	178:12	178:12	7	;
SIMPLE_DECL	179:1	179:12	6	uint16 [ 4 ] s ;
VAR_DECL	179:1	179:8	7	uint16 [ 4 ] s
TYPE	179:1	179:9	8	uint16 [ 4 ]
TYPE_NAME	179:1	179:1	9	uint16
LEAF_NODE	179:1	179:1	10	uint16
TYPE_SUFFIX	179:9	179:11	9	[ 4 ]
LEAF_NODE	179:9	179:9	10	[
FIELD	179:10	179:10	10	4
LEAF_NODE	179:10	179:10	11	4
LEAF_NODE	179:11	179:11	10	]
NAME	179:8	179:8	8	s
LEAF_NODE	179:8	179:8	9	s
LEAF_NODE	179:12	179:12	7	;
SIMPLE_DECL	180:1	180:12	6	uint8 [ 8 ] c ;
VAR_DECL	180:1	180:8	7	uint8 [ 8 ] c
TYPE	180:1	180:9	8	uint8 [ 8 ]
TYPE_NAME	180:1	180:1	9	uint8
LEAF_NODE	180:1	180:1	10	uint8
TYPE_SUFFIX	180:9	180:11	9	[ 8 ]
LEAF_NODE	180:9	180:9	10	[
FIELD	180:10	180:10	10	8
LEAF_NODE	180:10	180:10	11	8
LEAF_NODE	180:11	180:11	10	]
NAME	180:8	180:8	8	c
LEAF_NODE	180:8	180:8	9	c
LEAF_NODE	180:12	180:12	7	;
LEAF_NODE	181:0	181:0	5	}
NAME	181:2	181:2	3	UInt64Aligned_t
LEAF_NODE	181:2	181:2	4	UInt64Aligned_t
LEAF_NODE	181:17	181:17	2	;
FUNCTION_DEF	186:0	200:0	1	
RETURN_TYPE	186:0	186:7	2	static uint64
LEAF_NODE	186:0	186:0	3	static
TYPE_NAME	186:7	186:7	3	uint64
LEAF_NODE	186:7	186:7	4	uint64
FUNCTION_NAME	186:14	186:14	2	TIFFReadUInt64
LEAF_NODE	186:14	186:14	3	TIFFReadUInt64
PARAMETER_LIST	186:28	186:47	2	( const uint8 * value )
LEAF_NODE	186:28	186:28	3	(
PARAMETER_DECL	186:29	186:42	3	const uint8 * value
TYPE	186:29	186:41	4	const uint8 *
TYPE_NAME	186:29	186:35	5	const uint8
LEAF_NODE	186:29	186:29	6	const
LEAF_NODE	186:35	186:35	6	uint8
POINTER	186:41	186:41	5	*
LEAF_NODE	186:41	186:41	6	*
NAME	186:42	186:42	4	value
LEAF_NODE	186:42	186:42	5	value
LEAF_NODE	186:47	186:47	3	)
LEAF_NODE	187:0	187:0	2	{
STATEMENTS	188:1	199:1	2	
SIMPLE_DECL	188:1	188:23	3	UInt64Aligned_t result ;
VAR_DECL	188:1	188:17	4	UInt64Aligned_t result
TYPE	188:1	188:1	5	UInt64Aligned_t
TYPE_NAME	188:1	188:1	6	UInt64Aligned_t
LEAF_NODE	188:1	188:1	7	UInt64Aligned_t
NAME	188:17	188:17	5	result
LEAF_NODE	188:17	188:17	6	result
LEAF_NODE	188:23	188:23	4	;
EXPR_STATEMENT	190:1	190:21	3	result . c [ 0 ] = value [ 0 ] ;
EXPR	190:1	190:1	4	result . c [ 0 ] = value [ 0 ]
ASSIGN	190:1	190:13	5	result . c [ 0 ] = value [ 0 ]
LVAL	190:1	190:1	6	result . c [ 0 ]
FIELD	190:1	190:11	7	result . c [ 0 ]
LEAF_NODE	190:1	190:1	8	result
LEAF_NODE	190:7	190:7	8	.
LEAF_NODE	190:8	190:8	8	c
LEAF_NODE	190:9	190:9	8	[
EXPR	190:10	190:10	8	0
FIELD	190:10	190:10	9	0
LEAF_NODE	190:10	190:10	10	0
LEAF_NODE	190:11	190:11	8	]
ASSIGN_OP	190:12	190:12	6	=
LEAF_NODE	190:12	190:12	7	=
RVAL	190:13	190:13	6	value [ 0 ]
FIELD	190:13	190:20	7	value [ 0 ]
LEAF_NODE	190:13	190:13	8	value
LEAF_NODE	190:18	190:18	8	[
EXPR	190:19	190:19	8	0
FIELD	190:19	190:19	9	0
LEAF_NODE	190:19	190:19	10	0
LEAF_NODE	190:20	190:20	8	]
LEAF_NODE	190:21	190:21	4	;
EXPR_STATEMENT	191:1	191:21	3	result . c [ 1 ] = value [ 1 ] ;
EXPR	191:1	191:1	4	result . c [ 1 ] = value [ 1 ]
ASSIGN	191:1	191:13	5	result . c [ 1 ] = value [ 1 ]
LVAL	191:1	191:1	6	result . c [ 1 ]
FIELD	191:1	191:11	7	result . c [ 1 ]
LEAF_NODE	191:1	191:1	8	result
LEAF_NODE	191:7	191:7	8	.
LEAF_NODE	191:8	191:8	8	c
LEAF_NODE	191:9	191:9	8	[
EXPR	191:10	191:10	8	1
FIELD	191:10	191:10	9	1
LEAF_NODE	191:10	191:10	10	1
LEAF_NODE	191:11	191:11	8	]
ASSIGN_OP	191:12	191:12	6	=
LEAF_NODE	191:12	191:12	7	=
RVAL	191:13	191:13	6	value [ 1 ]
FIELD	191:13	191:20	7	value [ 1 ]
LEAF_NODE	191:13	191:13	8	value
LEAF_NODE	191:18	191:18	8	[
EXPR	191:19	191:19	8	1
FIELD	191:19	191:19	9	1
LEAF_NODE	191:19	191:19	10	1
LEAF_NODE	191:20	191:20	8	]
LEAF_NODE	191:21	191:21	4	;
EXPR_STATEMENT	192:1	192:21	3	result . c [ 2 ] = value [ 2 ] ;
EXPR	192:1	192:1	4	result . c [ 2 ] = value [ 2 ]
ASSIGN	192:1	192:13	5	result . c [ 2 ] = value [ 2 ]
LVAL	192:1	192:1	6	result . c [ 2 ]
FIELD	192:1	192:11	7	result . c [ 2 ]
LEAF_NODE	192:1	192:1	8	result
LEAF_NODE	192:7	192:7	8	.
LEAF_NODE	192:8	192:8	8	c
LEAF_NODE	192:9	192:9	8	[
EXPR	192:10	192:10	8	2
FIELD	192:10	192:10	9	2
LEAF_NODE	192:10	192:10	10	2
LEAF_NODE	192:11	192:11	8	]
ASSIGN_OP	192:12	192:12	6	=
LEAF_NODE	192:12	192:12	7	=
RVAL	192:13	192:13	6	value [ 2 ]
FIELD	192:13	192:20	7	value [ 2 ]
LEAF_NODE	192:13	192:13	8	value
LEAF_NODE	192:18	192:18	8	[
EXPR	192:19	192:19	8	2
FIELD	192:19	192:19	9	2
LEAF_NODE	192:19	192:19	10	2
LEAF_NODE	192:20	192:20	8	]
LEAF_NODE	192:21	192:21	4	;
EXPR_STATEMENT	193:1	193:21	3	result . c [ 3 ] = value [ 3 ] ;
EXPR	193:1	193:1	4	result . c [ 3 ] = value [ 3 ]
ASSIGN	193:1	193:13	5	result . c [ 3 ] = value [ 3 ]
LVAL	193:1	193:1	6	result . c [ 3 ]
FIELD	193:1	193:11	7	result . c [ 3 ]
LEAF_NODE	193:1	193:1	8	result
LEAF_NODE	193:7	193:7	8	.
LEAF_NODE	193:8	193:8	8	c
LEAF_NODE	193:9	193:9	8	[
EXPR	193:10	193:10	8	3
FIELD	193:10	193:10	9	3
LEAF_NODE	193:10	193:10	10	3
LEAF_NODE	193:11	193:11	8	]
ASSIGN_OP	193:12	193:12	6	=
LEAF_NODE	193:12	193:12	7	=
RVAL	193:13	193:13	6	value [ 3 ]
FIELD	193:13	193:20	7	value [ 3 ]
LEAF_NODE	193:13	193:13	8	value
LEAF_NODE	193:18	193:18	8	[
EXPR	193:19	193:19	8	3
FIELD	193:19	193:19	9	3
LEAF_NODE	193:19	193:19	10	3
LEAF_NODE	193:20	193:20	8	]
LEAF_NODE	193:21	193:21	4	;
EXPR_STATEMENT	194:1	194:21	3	result . c [ 4 ] = value [ 4 ] ;
EXPR	194:1	194:1	4	result . c [ 4 ] = value [ 4 ]
ASSIGN	194:1	194:13	5	result . c [ 4 ] = value [ 4 ]
LVAL	194:1	194:1	6	result . c [ 4 ]
FIELD	194:1	194:11	7	result . c [ 4 ]
LEAF_NODE	194:1	194:1	8	result
LEAF_NODE	194:7	194:7	8	.
LEAF_NODE	194:8	194:8	8	c
LEAF_NODE	194:9	194:9	8	[
EXPR	194:10	194:10	8	4
FIELD	194:10	194:10	9	4
LEAF_NODE	194:10	194:10	10	4
LEAF_NODE	194:11	194:11	8	]
ASSIGN_OP	194:12	194:12	6	=
LEAF_NODE	194:12	194:12	7	=
RVAL	194:13	194:13	6	value [ 4 ]
FIELD	194:13	194:20	7	value [ 4 ]
LEAF_NODE	194:13	194:13	8	value
LEAF_NODE	194:18	194:18	8	[
EXPR	194:19	194:19	8	4
FIELD	194:19	194:19	9	4
LEAF_NODE	194:19	194:19	10	4
LEAF_NODE	194:20	194:20	8	]
LEAF_NODE	194:21	194:21	4	;
EXPR_STATEMENT	195:1	195:21	3	result . c [ 5 ] = value [ 5 ] ;
EXPR	195:1	195:1	4	result . c [ 5 ] = value [ 5 ]
ASSIGN	195:1	195:13	5	result . c [ 5 ] = value [ 5 ]
LVAL	195:1	195:1	6	result . c [ 5 ]
FIELD	195:1	195:11	7	result . c [ 5 ]
LEAF_NODE	195:1	195:1	8	result
LEAF_NODE	195:7	195:7	8	.
LEAF_NODE	195:8	195:8	8	c
LEAF_NODE	195:9	195:9	8	[
EXPR	195:10	195:10	8	5
FIELD	195:10	195:10	9	5
LEAF_NODE	195:10	195:10	10	5
LEAF_NODE	195:11	195:11	8	]
ASSIGN_OP	195:12	195:12	6	=
LEAF_NODE	195:12	195:12	7	=
RVAL	195:13	195:13	6	value [ 5 ]
FIELD	195:13	195:20	7	value [ 5 ]
LEAF_NODE	195:13	195:13	8	value
LEAF_NODE	195:18	195:18	8	[
EXPR	195:19	195:19	8	5
FIELD	195:19	195:19	9	5
LEAF_NODE	195:19	195:19	10	5
LEAF_NODE	195:20	195:20	8	]
LEAF_NODE	195:21	195:21	4	;
EXPR_STATEMENT	196:1	196:21	3	result . c [ 6 ] = value [ 6 ] ;
EXPR	196:1	196:1	4	result . c [ 6 ] = value [ 6 ]
ASSIGN	196:1	196:13	5	result . c [ 6 ] = value [ 6 ]
LVAL	196:1	196:1	6	result . c [ 6 ]
FIELD	196:1	196:11	7	result . c [ 6 ]
LEAF_NODE	196:1	196:1	8	result
LEAF_NODE	196:7	196:7	8	.
LEAF_NODE	196:8	196:8	8	c
LEAF_NODE	196:9	196:9	8	[
EXPR	196:10	196:10	8	6
FIELD	196:10	196:10	9	6
LEAF_NODE	196:10	196:10	10	6
LEAF_NODE	196:11	196:11	8	]
ASSIGN_OP	196:12	196:12	6	=
LEAF_NODE	196:12	196:12	7	=
RVAL	196:13	196:13	6	value [ 6 ]
FIELD	196:13	196:20	7	value [ 6 ]
LEAF_NODE	196:13	196:13	8	value
LEAF_NODE	196:18	196:18	8	[
EXPR	196:19	196:19	8	6
FIELD	196:19	196:19	9	6
LEAF_NODE	196:19	196:19	10	6
LEAF_NODE	196:20	196:20	8	]
LEAF_NODE	196:21	196:21	4	;
EXPR_STATEMENT	197:1	197:21	3	result . c [ 7 ] = value [ 7 ] ;
EXPR	197:1	197:1	4	result . c [ 7 ] = value [ 7 ]
ASSIGN	197:1	197:13	5	result . c [ 7 ] = value [ 7 ]
LVAL	197:1	197:1	6	result . c [ 7 ]
FIELD	197:1	197:11	7	result . c [ 7 ]
LEAF_NODE	197:1	197:1	8	result
LEAF_NODE	197:7	197:7	8	.
LEAF_NODE	197:8	197:8	8	c
LEAF_NODE	197:9	197:9	8	[
EXPR	197:10	197:10	8	7
FIELD	197:10	197:10	9	7
LEAF_NODE	197:10	197:10	10	7
LEAF_NODE	197:11	197:11	8	]
ASSIGN_OP	197:12	197:12	6	=
LEAF_NODE	197:12	197:12	7	=
RVAL	197:13	197:13	6	value [ 7 ]
FIELD	197:13	197:20	7	value [ 7 ]
LEAF_NODE	197:13	197:13	8	value
LEAF_NODE	197:18	197:18	8	[
EXPR	197:19	197:19	8	7
FIELD	197:19	197:19	9	7
LEAF_NODE	197:19	197:19	10	7
LEAF_NODE	197:20	197:20	8	]
LEAF_NODE	197:21	197:21	4	;
JUMP_STATEMENT	199:1	199:16	3	return result . l ;
KEYWORD	199:1	199:1	4	return
LEAF_NODE	199:1	199:1	5	return
DESTINATION	199:8	199:8	4	result . l
EXPR	199:8	199:8	5	result . l
FIELD	199:8	199:15	6	result . l
LEAF_NODE	199:8	199:8	7	result
LEAF_NODE	199:14	199:14	7	.
LEAF_NODE	199:15	199:15	7	l
LEAF_NODE	199:16	199:16	4	;
LEAF_NODE	200:0	200:0	2	}
FUNCTION_DEF	202:0	290:0	1	
RETURN_TYPE	202:0	202:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	202:0	202:0	3	static
TYPE_NAME	202:7	202:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	202:7	202:7	4	enum
LEAF_NODE	202:12	202:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	202:32	202:32	2	TIFFReadDirEntryByte
LEAF_NODE	202:32	202:32	3	TIFFReadDirEntryByte
PARAMETER_LIST	202:52	202:100	2	( TIFF * tif , TIFFDirEntry * direntry , uint8 * value )
LEAF_NODE	202:52	202:52	3	(
PARAMETER_DECL	202:53	202:59	3	TIFF * tif
TYPE	202:53	202:57	4	TIFF *
TYPE_NAME	202:53	202:53	5	TIFF
LEAF_NODE	202:53	202:53	6	TIFF
POINTER	202:57	202:57	5	*
LEAF_NODE	202:57	202:57	6	*
NAME	202:59	202:59	4	tif
LEAF_NODE	202:59	202:59	5	tif
LEAF_NODE	202:62	202:62	3	,
PARAMETER_DECL	202:64	202:78	3	TIFFDirEntry * direntry
TYPE	202:64	202:76	4	TIFFDirEntry *
TYPE_NAME	202:64	202:64	5	TIFFDirEntry
LEAF_NODE	202:64	202:64	6	TIFFDirEntry
POINTER	202:76	202:76	5	*
LEAF_NODE	202:76	202:76	6	*
NAME	202:78	202:78	4	direntry
LEAF_NODE	202:78	202:78	5	direntry
LEAF_NODE	202:86	202:86	3	,
PARAMETER_DECL	202:88	202:95	3	uint8 * value
TYPE	202:88	202:93	4	uint8 *
TYPE_NAME	202:88	202:88	5	uint8
LEAF_NODE	202:88	202:88	6	uint8
POINTER	202:93	202:93	5	*
LEAF_NODE	202:93	202:93	6	*
NAME	202:95	202:95	4	value
LEAF_NODE	202:95	202:95	5	value
LEAF_NODE	202:100	202:100	3	)
LEAF_NODE	203:0	203:0	2	{
STATEMENTS	204:1	207:1	2	
SIMPLE_DECL	204:1	204:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	204:1	204:26	4	enum TIFFReadDirEntryErr err
TYPE	204:1	204:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	204:1	204:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	204:1	204:1	7	enum
LEAF_NODE	204:6	204:6	7	TIFFReadDirEntryErr
NAME	204:26	204:26	5	err
LEAF_NODE	204:26	204:26	6	err
LEAF_NODE	204:29	204:29	4	;
SELECTION	205:1	206:2	3	
KEYWORD	205:1	205:1	4	if
LEAF_NODE	205:1	205:1	5	if
LEAF_NODE	205:4	205:4	4	(
CONDITION	205:5	205:5	4	direntry -> tdir_count != 1
EXPR	205:5	205:27	5	direntry -> tdir_count != 1
FIELD	205:5	205:15	6	direntry -> tdir_count
LEAF_NODE	205:5	205:5	7	direntry
LEAF_NODE	205:13	205:13	7	->
LEAF_NODE	205:15	205:15	7	tdir_count
EQ_OPERATOR	205:25	205:25	6	!=
LEAF_NODE	205:25	205:25	7	!=
FIELD	205:27	205:27	6	1
LEAF_NODE	205:27	205:27	7	1
LEAF_NODE	205:28	205:28	4	)
STATEMENTS	206:2	206:2	4	
LEAF_NODE	206:2	206:2	5	return
LEAF_NODE	206:8	206:8	3	(
LEAF_NODE	206:9	206:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	206:33	206:33	3	)
LEAF_NODE	206:34	206:34	3	;
SELECTION	207:1	208:1	3	
KEYWORD	207:1	207:1	4	switch
LEAF_NODE	207:1	207:1	5	switch
LEAF_NODE	207:8	207:8	4	(
CONDITION	207:9	207:9	4	direntry -> tdir_type
EXPR	207:9	207:9	5	direntry -> tdir_type
FIELD	207:9	207:19	6	direntry -> tdir_type
LEAF_NODE	207:9	207:9	7	direntry
LEAF_NODE	207:17	207:17	7	->
LEAF_NODE	207:19	207:19	7	tdir_type
LEAF_NODE	207:28	207:28	4	)
STATEMENTS	208:1	289:1	4	
LEAF_NODE	208:1	208:1	5	{
STATEMENTS	209:2	288:34	5	
LABEL	209:2	209:16	6	case TIFF_BYTE :
LEAF_NODE	209:2	209:2	7	case
LEAF_NODE	209:7	209:7	7	TIFF_BYTE
LEAF_NODE	209:16	209:16	7	:
LABEL	210:2	210:21	6	case TIFF_UNDEFINED :
LEAF_NODE	210:2	210:2	7	case
LEAF_NODE	210:7	210:7	7	TIFF_UNDEFINED
LEAF_NODE	210:21	210:21	7	:
EXPR_STATEMENT	211:3	211:50	6	TIFFReadDirEntryCheckedByte ( tif , direntry , value ) ;
EXPR	211:3	211:3	7	TIFFReadDirEntryCheckedByte ( tif , direntry , value )
FUNCTION_CALL	211:3	211:49	8	TIFFReadDirEntryCheckedByte ( tif , direntry , value )
CALLEE	211:3	211:3	9	TIFFReadDirEntryCheckedByte
LEAF_NODE	211:3	211:3	10	TIFFReadDirEntryCheckedByte
LEAF_NODE	211:30	211:30	9	(
ARGUMENT	211:31	211:31	9	tif
FIELD	211:31	211:31	10	tif
LEAF_NODE	211:31	211:31	11	tif
LEAF_NODE	211:34	211:34	9	,
ARGUMENT	211:35	211:35	9	direntry
FIELD	211:35	211:35	10	direntry
LEAF_NODE	211:35	211:35	11	direntry
LEAF_NODE	211:43	211:43	9	,
ARGUMENT	211:44	211:44	9	value
FIELD	211:44	211:44	10	value
LEAF_NODE	211:44	211:44	11	value
LEAF_NODE	211:49	211:49	9	)
LEAF_NODE	211:50	211:50	7	;
LEAF_NODE	212:3	212:3	6	return
LEAF_NODE	212:9	212:9	6	(
LEAF_NODE	212:10	212:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	212:31	212:31	6	)
LEAF_NODE	212:32	212:32	6	;
LABEL	213:2	213:17	6	case TIFF_SBYTE :
LEAF_NODE	213:2	213:2	7	case
LEAF_NODE	213:7	213:7	7	TIFF_SBYTE
LEAF_NODE	213:17	213:17	7	:
LEAF_NODE	214:3	214:3	6	{
STATEMENTS	215:4	221:33	6	
SIMPLE_DECL	215:4	215:10	7	int8 m ;
VAR_DECL	215:4	215:9	8	int8 m
TYPE	215:4	215:4	9	int8
TYPE_NAME	215:4	215:4	10	int8
LEAF_NODE	215:4	215:4	11	int8
NAME	215:9	215:9	9	m
LEAF_NODE	215:9	215:9	10	m
LEAF_NODE	215:10	215:10	8	;
EXPR_STATEMENT	216:4	216:49	7	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m ) ;
EXPR	216:4	216:4	8	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
FUNCTION_CALL	216:4	216:48	9	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
CALLEE	216:4	216:4	10	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	216:4	216:4	11	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	216:32	216:32	10	(
ARGUMENT	216:33	216:33	10	tif
FIELD	216:33	216:33	11	tif
LEAF_NODE	216:33	216:33	12	tif
LEAF_NODE	216:36	216:36	10	,
ARGUMENT	216:37	216:37	10	direntry
FIELD	216:37	216:37	11	direntry
LEAF_NODE	216:37	216:37	12	direntry
LEAF_NODE	216:45	216:45	10	,
ARGUMENT	216:46	216:46	10	& m
UNARY_EXPR	216:46	216:47	11	& m
UNARY_OPERATOR	216:46	216:46	12	&
LEAF_NODE	216:46	216:46	13	&
FIELD	216:47	216:47	12	m
LEAF_NODE	216:47	216:47	13	m
LEAF_NODE	216:48	216:48	10	)
LEAF_NODE	216:49	216:49	8	;
EXPR_STATEMENT	217:4	217:46	7	err = TIFFReadDirEntryCheckRangeByteSbyte ( m ) ;
EXPR	217:4	217:4	8	err = TIFFReadDirEntryCheckRangeByteSbyte ( m )
ASSIGN	217:4	217:8	9	err = TIFFReadDirEntryCheckRangeByteSbyte ( m )
LVAL	217:4	217:4	10	err
FIELD	217:4	217:4	11	err
LEAF_NODE	217:4	217:4	12	err
ASSIGN_OP	217:7	217:7	10	=
LEAF_NODE	217:7	217:7	11	=
RVAL	217:8	217:8	10	TIFFReadDirEntryCheckRangeByteSbyte ( m )
FUNCTION_CALL	217:8	217:45	11	TIFFReadDirEntryCheckRangeByteSbyte ( m )
CALLEE	217:8	217:8	12	TIFFReadDirEntryCheckRangeByteSbyte
LEAF_NODE	217:8	217:8	13	TIFFReadDirEntryCheckRangeByteSbyte
LEAF_NODE	217:43	217:43	12	(
ARGUMENT	217:44	217:44	12	m
FIELD	217:44	217:44	13	m
LEAF_NODE	217:44	217:44	14	m
LEAF_NODE	217:45	217:45	12	)
LEAF_NODE	217:46	217:46	8	;
SELECTION	218:4	219:5	7	
KEYWORD	218:4	218:4	8	if
LEAF_NODE	218:4	218:4	9	if
LEAF_NODE	218:7	218:7	8	(
CONDITION	218:8	218:8	8	err != TIFFReadDirEntryErrOk
EXPR	218:8	218:13	9	err != TIFFReadDirEntryErrOk
FIELD	218:8	218:8	10	err
LEAF_NODE	218:8	218:8	11	err
EQ_OPERATOR	218:11	218:11	10	!=
LEAF_NODE	218:11	218:11	11	!=
FIELD	218:13	218:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	218:13	218:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	218:34	218:34	8	)
STATEMENTS	219:5	219:5	8	
LEAF_NODE	219:5	219:5	9	return
LEAF_NODE	219:11	219:11	7	(
LEAF_NODE	219:12	219:12	7	err
LEAF_NODE	219:15	219:15	7	)
LEAF_NODE	219:16	219:16	7	;
EXPR_STATEMENT	220:4	220:19	7	* value = ( uint8 ) m ;
EXPR	220:4	220:4	8	* value = ( uint8 ) m
ASSIGN	220:4	220:11	9	* value = ( uint8 ) m
LVAL	220:4	220:4	10	* value
UNARY_EXPR	220:4	220:5	11	* value
UNARY_OPERATOR	220:4	220:4	12	*
LEAF_NODE	220:4	220:4	13	*
FIELD	220:5	220:5	12	value
LEAF_NODE	220:5	220:5	13	value
ASSIGN_OP	220:10	220:10	10	=
LEAF_NODE	220:10	220:10	11	=
RVAL	220:11	220:18	10	( uint8 ) m
LEAF_NODE	220:11	220:11	11	(
TYPE_NAME	220:12	220:12	11	uint8
LEAF_NODE	220:12	220:12	12	uint8
LEAF_NODE	220:17	220:17	11	)
FIELD	220:18	220:18	11	m
LEAF_NODE	220:18	220:18	12	m
LEAF_NODE	220:19	220:19	8	;
LEAF_NODE	221:4	221:4	7	return
LEAF_NODE	221:10	221:10	7	(
LEAF_NODE	221:11	221:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	221:32	221:32	7	)
LEAF_NODE	221:33	221:33	7	;
LEAF_NODE	222:3	222:3	6	}
LABEL	223:2	223:17	6	case TIFF_SHORT :
LEAF_NODE	223:2	223:2	7	case
LEAF_NODE	223:7	223:7	7	TIFF_SHORT
LEAF_NODE	223:17	223:17	7	:
LEAF_NODE	224:3	224:3	6	{
STATEMENTS	225:4	231:33	6	
SIMPLE_DECL	225:4	225:12	7	uint16 m ;
VAR_DECL	225:4	225:11	8	uint16 m
TYPE	225:4	225:4	9	uint16
TYPE_NAME	225:4	225:4	10	uint16
LEAF_NODE	225:4	225:4	11	uint16
NAME	225:11	225:11	9	m
LEAF_NODE	225:11	225:11	10	m
LEAF_NODE	225:12	225:12	8	;
EXPR_STATEMENT	226:4	226:49	7	TIFFReadDirEntryCheckedShort ( tif , direntry , & m ) ;
EXPR	226:4	226:4	8	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
FUNCTION_CALL	226:4	226:48	9	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
CALLEE	226:4	226:4	10	TIFFReadDirEntryCheckedShort
LEAF_NODE	226:4	226:4	11	TIFFReadDirEntryCheckedShort
LEAF_NODE	226:32	226:32	10	(
ARGUMENT	226:33	226:33	10	tif
FIELD	226:33	226:33	11	tif
LEAF_NODE	226:33	226:33	12	tif
LEAF_NODE	226:36	226:36	10	,
ARGUMENT	226:37	226:37	10	direntry
FIELD	226:37	226:37	11	direntry
LEAF_NODE	226:37	226:37	12	direntry
LEAF_NODE	226:45	226:45	10	,
ARGUMENT	226:46	226:46	10	& m
UNARY_EXPR	226:46	226:47	11	& m
UNARY_OPERATOR	226:46	226:46	12	&
LEAF_NODE	226:46	226:46	13	&
FIELD	226:47	226:47	12	m
LEAF_NODE	226:47	226:47	13	m
LEAF_NODE	226:48	226:48	10	)
LEAF_NODE	226:49	226:49	8	;
EXPR_STATEMENT	227:4	227:46	7	err = TIFFReadDirEntryCheckRangeByteShort ( m ) ;
EXPR	227:4	227:4	8	err = TIFFReadDirEntryCheckRangeByteShort ( m )
ASSIGN	227:4	227:8	9	err = TIFFReadDirEntryCheckRangeByteShort ( m )
LVAL	227:4	227:4	10	err
FIELD	227:4	227:4	11	err
LEAF_NODE	227:4	227:4	12	err
ASSIGN_OP	227:7	227:7	10	=
LEAF_NODE	227:7	227:7	11	=
RVAL	227:8	227:8	10	TIFFReadDirEntryCheckRangeByteShort ( m )
FUNCTION_CALL	227:8	227:45	11	TIFFReadDirEntryCheckRangeByteShort ( m )
CALLEE	227:8	227:8	12	TIFFReadDirEntryCheckRangeByteShort
LEAF_NODE	227:8	227:8	13	TIFFReadDirEntryCheckRangeByteShort
LEAF_NODE	227:43	227:43	12	(
ARGUMENT	227:44	227:44	12	m
FIELD	227:44	227:44	13	m
LEAF_NODE	227:44	227:44	14	m
LEAF_NODE	227:45	227:45	12	)
LEAF_NODE	227:46	227:46	8	;
SELECTION	228:4	229:5	7	
KEYWORD	228:4	228:4	8	if
LEAF_NODE	228:4	228:4	9	if
LEAF_NODE	228:7	228:7	8	(
CONDITION	228:8	228:8	8	err != TIFFReadDirEntryErrOk
EXPR	228:8	228:13	9	err != TIFFReadDirEntryErrOk
FIELD	228:8	228:8	10	err
LEAF_NODE	228:8	228:8	11	err
EQ_OPERATOR	228:11	228:11	10	!=
LEAF_NODE	228:11	228:11	11	!=
FIELD	228:13	228:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	228:13	228:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	228:34	228:34	8	)
STATEMENTS	229:5	229:5	8	
LEAF_NODE	229:5	229:5	9	return
LEAF_NODE	229:11	229:11	7	(
LEAF_NODE	229:12	229:12	7	err
LEAF_NODE	229:15	229:15	7	)
LEAF_NODE	229:16	229:16	7	;
EXPR_STATEMENT	230:4	230:19	7	* value = ( uint8 ) m ;
EXPR	230:4	230:4	8	* value = ( uint8 ) m
ASSIGN	230:4	230:11	9	* value = ( uint8 ) m
LVAL	230:4	230:4	10	* value
UNARY_EXPR	230:4	230:5	11	* value
UNARY_OPERATOR	230:4	230:4	12	*
LEAF_NODE	230:4	230:4	13	*
FIELD	230:5	230:5	12	value
LEAF_NODE	230:5	230:5	13	value
ASSIGN_OP	230:10	230:10	10	=
LEAF_NODE	230:10	230:10	11	=
RVAL	230:11	230:18	10	( uint8 ) m
LEAF_NODE	230:11	230:11	11	(
TYPE_NAME	230:12	230:12	11	uint8
LEAF_NODE	230:12	230:12	12	uint8
LEAF_NODE	230:17	230:17	11	)
FIELD	230:18	230:18	11	m
LEAF_NODE	230:18	230:18	12	m
LEAF_NODE	230:19	230:19	8	;
LEAF_NODE	231:4	231:4	7	return
LEAF_NODE	231:10	231:10	7	(
LEAF_NODE	231:11	231:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	231:32	231:32	7	)
LEAF_NODE	231:33	231:33	7	;
LEAF_NODE	232:3	232:3	6	}
LABEL	233:2	233:18	6	case TIFF_SSHORT :
LEAF_NODE	233:2	233:2	7	case
LEAF_NODE	233:7	233:7	7	TIFF_SSHORT
LEAF_NODE	233:18	233:18	7	:
LEAF_NODE	234:3	234:3	6	{
STATEMENTS	235:4	241:33	6	
SIMPLE_DECL	235:4	235:11	7	int16 m ;
VAR_DECL	235:4	235:10	8	int16 m
TYPE	235:4	235:4	9	int16
TYPE_NAME	235:4	235:4	10	int16
LEAF_NODE	235:4	235:4	11	int16
NAME	235:10	235:10	9	m
LEAF_NODE	235:10	235:10	10	m
LEAF_NODE	235:11	235:11	8	;
EXPR_STATEMENT	236:4	236:50	7	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m ) ;
EXPR	236:4	236:4	8	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
FUNCTION_CALL	236:4	236:49	9	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
CALLEE	236:4	236:4	10	TIFFReadDirEntryCheckedSshort
LEAF_NODE	236:4	236:4	11	TIFFReadDirEntryCheckedSshort
LEAF_NODE	236:33	236:33	10	(
ARGUMENT	236:34	236:34	10	tif
FIELD	236:34	236:34	11	tif
LEAF_NODE	236:34	236:34	12	tif
LEAF_NODE	236:37	236:37	10	,
ARGUMENT	236:38	236:38	10	direntry
FIELD	236:38	236:38	11	direntry
LEAF_NODE	236:38	236:38	12	direntry
LEAF_NODE	236:46	236:46	10	,
ARGUMENT	236:47	236:47	10	& m
UNARY_EXPR	236:47	236:48	11	& m
UNARY_OPERATOR	236:47	236:47	12	&
LEAF_NODE	236:47	236:47	13	&
FIELD	236:48	236:48	12	m
LEAF_NODE	236:48	236:48	13	m
LEAF_NODE	236:49	236:49	10	)
LEAF_NODE	236:50	236:50	8	;
EXPR_STATEMENT	237:4	237:47	7	err = TIFFReadDirEntryCheckRangeByteSshort ( m ) ;
EXPR	237:4	237:4	8	err = TIFFReadDirEntryCheckRangeByteSshort ( m )
ASSIGN	237:4	237:8	9	err = TIFFReadDirEntryCheckRangeByteSshort ( m )
LVAL	237:4	237:4	10	err
FIELD	237:4	237:4	11	err
LEAF_NODE	237:4	237:4	12	err
ASSIGN_OP	237:7	237:7	10	=
LEAF_NODE	237:7	237:7	11	=
RVAL	237:8	237:8	10	TIFFReadDirEntryCheckRangeByteSshort ( m )
FUNCTION_CALL	237:8	237:46	11	TIFFReadDirEntryCheckRangeByteSshort ( m )
CALLEE	237:8	237:8	12	TIFFReadDirEntryCheckRangeByteSshort
LEAF_NODE	237:8	237:8	13	TIFFReadDirEntryCheckRangeByteSshort
LEAF_NODE	237:44	237:44	12	(
ARGUMENT	237:45	237:45	12	m
FIELD	237:45	237:45	13	m
LEAF_NODE	237:45	237:45	14	m
LEAF_NODE	237:46	237:46	12	)
LEAF_NODE	237:47	237:47	8	;
SELECTION	238:4	239:5	7	
KEYWORD	238:4	238:4	8	if
LEAF_NODE	238:4	238:4	9	if
LEAF_NODE	238:7	238:7	8	(
CONDITION	238:8	238:8	8	err != TIFFReadDirEntryErrOk
EXPR	238:8	238:13	9	err != TIFFReadDirEntryErrOk
FIELD	238:8	238:8	10	err
LEAF_NODE	238:8	238:8	11	err
EQ_OPERATOR	238:11	238:11	10	!=
LEAF_NODE	238:11	238:11	11	!=
FIELD	238:13	238:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	238:13	238:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	238:34	238:34	8	)
STATEMENTS	239:5	239:5	8	
LEAF_NODE	239:5	239:5	9	return
LEAF_NODE	239:11	239:11	7	(
LEAF_NODE	239:12	239:12	7	err
LEAF_NODE	239:15	239:15	7	)
LEAF_NODE	239:16	239:16	7	;
EXPR_STATEMENT	240:4	240:19	7	* value = ( uint8 ) m ;
EXPR	240:4	240:4	8	* value = ( uint8 ) m
ASSIGN	240:4	240:11	9	* value = ( uint8 ) m
LVAL	240:4	240:4	10	* value
UNARY_EXPR	240:4	240:5	11	* value
UNARY_OPERATOR	240:4	240:4	12	*
LEAF_NODE	240:4	240:4	13	*
FIELD	240:5	240:5	12	value
LEAF_NODE	240:5	240:5	13	value
ASSIGN_OP	240:10	240:10	10	=
LEAF_NODE	240:10	240:10	11	=
RVAL	240:11	240:18	10	( uint8 ) m
LEAF_NODE	240:11	240:11	11	(
TYPE_NAME	240:12	240:12	11	uint8
LEAF_NODE	240:12	240:12	12	uint8
LEAF_NODE	240:17	240:17	11	)
FIELD	240:18	240:18	11	m
LEAF_NODE	240:18	240:18	12	m
LEAF_NODE	240:19	240:19	8	;
LEAF_NODE	241:4	241:4	7	return
LEAF_NODE	241:10	241:10	7	(
LEAF_NODE	241:11	241:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	241:32	241:32	7	)
LEAF_NODE	241:33	241:33	7	;
LEAF_NODE	242:3	242:3	6	}
LABEL	243:2	243:16	6	case TIFF_LONG :
LEAF_NODE	243:2	243:2	7	case
LEAF_NODE	243:7	243:7	7	TIFF_LONG
LEAF_NODE	243:16	243:16	7	:
LEAF_NODE	244:3	244:3	6	{
STATEMENTS	245:4	251:33	6	
SIMPLE_DECL	245:4	245:12	7	uint32 m ;
VAR_DECL	245:4	245:11	8	uint32 m
TYPE	245:4	245:4	9	uint32
TYPE_NAME	245:4	245:4	10	uint32
LEAF_NODE	245:4	245:4	11	uint32
NAME	245:11	245:11	9	m
LEAF_NODE	245:11	245:11	10	m
LEAF_NODE	245:12	245:12	8	;
EXPR_STATEMENT	246:4	246:48	7	TIFFReadDirEntryCheckedLong ( tif , direntry , & m ) ;
EXPR	246:4	246:4	8	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
FUNCTION_CALL	246:4	246:47	9	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
CALLEE	246:4	246:4	10	TIFFReadDirEntryCheckedLong
LEAF_NODE	246:4	246:4	11	TIFFReadDirEntryCheckedLong
LEAF_NODE	246:31	246:31	10	(
ARGUMENT	246:32	246:32	10	tif
FIELD	246:32	246:32	11	tif
LEAF_NODE	246:32	246:32	12	tif
LEAF_NODE	246:35	246:35	10	,
ARGUMENT	246:36	246:36	10	direntry
FIELD	246:36	246:36	11	direntry
LEAF_NODE	246:36	246:36	12	direntry
LEAF_NODE	246:44	246:44	10	,
ARGUMENT	246:45	246:45	10	& m
UNARY_EXPR	246:45	246:46	11	& m
UNARY_OPERATOR	246:45	246:45	12	&
LEAF_NODE	246:45	246:45	13	&
FIELD	246:46	246:46	12	m
LEAF_NODE	246:46	246:46	13	m
LEAF_NODE	246:47	246:47	10	)
LEAF_NODE	246:48	246:48	8	;
EXPR_STATEMENT	247:4	247:45	7	err = TIFFReadDirEntryCheckRangeByteLong ( m ) ;
EXPR	247:4	247:4	8	err = TIFFReadDirEntryCheckRangeByteLong ( m )
ASSIGN	247:4	247:8	9	err = TIFFReadDirEntryCheckRangeByteLong ( m )
LVAL	247:4	247:4	10	err
FIELD	247:4	247:4	11	err
LEAF_NODE	247:4	247:4	12	err
ASSIGN_OP	247:7	247:7	10	=
LEAF_NODE	247:7	247:7	11	=
RVAL	247:8	247:8	10	TIFFReadDirEntryCheckRangeByteLong ( m )
FUNCTION_CALL	247:8	247:44	11	TIFFReadDirEntryCheckRangeByteLong ( m )
CALLEE	247:8	247:8	12	TIFFReadDirEntryCheckRangeByteLong
LEAF_NODE	247:8	247:8	13	TIFFReadDirEntryCheckRangeByteLong
LEAF_NODE	247:42	247:42	12	(
ARGUMENT	247:43	247:43	12	m
FIELD	247:43	247:43	13	m
LEAF_NODE	247:43	247:43	14	m
LEAF_NODE	247:44	247:44	12	)
LEAF_NODE	247:45	247:45	8	;
SELECTION	248:4	249:5	7	
KEYWORD	248:4	248:4	8	if
LEAF_NODE	248:4	248:4	9	if
LEAF_NODE	248:7	248:7	8	(
CONDITION	248:8	248:8	8	err != TIFFReadDirEntryErrOk
EXPR	248:8	248:13	9	err != TIFFReadDirEntryErrOk
FIELD	248:8	248:8	10	err
LEAF_NODE	248:8	248:8	11	err
EQ_OPERATOR	248:11	248:11	10	!=
LEAF_NODE	248:11	248:11	11	!=
FIELD	248:13	248:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	248:13	248:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	248:34	248:34	8	)
STATEMENTS	249:5	249:5	8	
LEAF_NODE	249:5	249:5	9	return
LEAF_NODE	249:11	249:11	7	(
LEAF_NODE	249:12	249:12	7	err
LEAF_NODE	249:15	249:15	7	)
LEAF_NODE	249:16	249:16	7	;
EXPR_STATEMENT	250:4	250:19	7	* value = ( uint8 ) m ;
EXPR	250:4	250:4	8	* value = ( uint8 ) m
ASSIGN	250:4	250:11	9	* value = ( uint8 ) m
LVAL	250:4	250:4	10	* value
UNARY_EXPR	250:4	250:5	11	* value
UNARY_OPERATOR	250:4	250:4	12	*
LEAF_NODE	250:4	250:4	13	*
FIELD	250:5	250:5	12	value
LEAF_NODE	250:5	250:5	13	value
ASSIGN_OP	250:10	250:10	10	=
LEAF_NODE	250:10	250:10	11	=
RVAL	250:11	250:18	10	( uint8 ) m
LEAF_NODE	250:11	250:11	11	(
TYPE_NAME	250:12	250:12	11	uint8
LEAF_NODE	250:12	250:12	12	uint8
LEAF_NODE	250:17	250:17	11	)
FIELD	250:18	250:18	11	m
LEAF_NODE	250:18	250:18	12	m
LEAF_NODE	250:19	250:19	8	;
LEAF_NODE	251:4	251:4	7	return
LEAF_NODE	251:10	251:10	7	(
LEAF_NODE	251:11	251:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	251:32	251:32	7	)
LEAF_NODE	251:33	251:33	7	;
LEAF_NODE	252:3	252:3	6	}
LABEL	253:2	253:17	6	case TIFF_SLONG :
LEAF_NODE	253:2	253:2	7	case
LEAF_NODE	253:7	253:7	7	TIFF_SLONG
LEAF_NODE	253:17	253:17	7	:
LEAF_NODE	254:3	254:3	6	{
STATEMENTS	255:4	261:33	6	
SIMPLE_DECL	255:4	255:11	7	int32 m ;
VAR_DECL	255:4	255:10	8	int32 m
TYPE	255:4	255:4	9	int32
TYPE_NAME	255:4	255:4	10	int32
LEAF_NODE	255:4	255:4	11	int32
NAME	255:10	255:10	9	m
LEAF_NODE	255:10	255:10	10	m
LEAF_NODE	255:11	255:11	8	;
EXPR_STATEMENT	256:4	256:49	7	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m ) ;
EXPR	256:4	256:4	8	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
FUNCTION_CALL	256:4	256:48	9	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
CALLEE	256:4	256:4	10	TIFFReadDirEntryCheckedSlong
LEAF_NODE	256:4	256:4	11	TIFFReadDirEntryCheckedSlong
LEAF_NODE	256:32	256:32	10	(
ARGUMENT	256:33	256:33	10	tif
FIELD	256:33	256:33	11	tif
LEAF_NODE	256:33	256:33	12	tif
LEAF_NODE	256:36	256:36	10	,
ARGUMENT	256:37	256:37	10	direntry
FIELD	256:37	256:37	11	direntry
LEAF_NODE	256:37	256:37	12	direntry
LEAF_NODE	256:45	256:45	10	,
ARGUMENT	256:46	256:46	10	& m
UNARY_EXPR	256:46	256:47	11	& m
UNARY_OPERATOR	256:46	256:46	12	&
LEAF_NODE	256:46	256:46	13	&
FIELD	256:47	256:47	12	m
LEAF_NODE	256:47	256:47	13	m
LEAF_NODE	256:48	256:48	10	)
LEAF_NODE	256:49	256:49	8	;
EXPR_STATEMENT	257:4	257:46	7	err = TIFFReadDirEntryCheckRangeByteSlong ( m ) ;
EXPR	257:4	257:4	8	err = TIFFReadDirEntryCheckRangeByteSlong ( m )
ASSIGN	257:4	257:8	9	err = TIFFReadDirEntryCheckRangeByteSlong ( m )
LVAL	257:4	257:4	10	err
FIELD	257:4	257:4	11	err
LEAF_NODE	257:4	257:4	12	err
ASSIGN_OP	257:7	257:7	10	=
LEAF_NODE	257:7	257:7	11	=
RVAL	257:8	257:8	10	TIFFReadDirEntryCheckRangeByteSlong ( m )
FUNCTION_CALL	257:8	257:45	11	TIFFReadDirEntryCheckRangeByteSlong ( m )
CALLEE	257:8	257:8	12	TIFFReadDirEntryCheckRangeByteSlong
LEAF_NODE	257:8	257:8	13	TIFFReadDirEntryCheckRangeByteSlong
LEAF_NODE	257:43	257:43	12	(
ARGUMENT	257:44	257:44	12	m
FIELD	257:44	257:44	13	m
LEAF_NODE	257:44	257:44	14	m
LEAF_NODE	257:45	257:45	12	)
LEAF_NODE	257:46	257:46	8	;
SELECTION	258:4	259:5	7	
KEYWORD	258:4	258:4	8	if
LEAF_NODE	258:4	258:4	9	if
LEAF_NODE	258:7	258:7	8	(
CONDITION	258:8	258:8	8	err != TIFFReadDirEntryErrOk
EXPR	258:8	258:13	9	err != TIFFReadDirEntryErrOk
FIELD	258:8	258:8	10	err
LEAF_NODE	258:8	258:8	11	err
EQ_OPERATOR	258:11	258:11	10	!=
LEAF_NODE	258:11	258:11	11	!=
FIELD	258:13	258:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	258:13	258:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	258:34	258:34	8	)
STATEMENTS	259:5	259:5	8	
LEAF_NODE	259:5	259:5	9	return
LEAF_NODE	259:11	259:11	7	(
LEAF_NODE	259:12	259:12	7	err
LEAF_NODE	259:15	259:15	7	)
LEAF_NODE	259:16	259:16	7	;
EXPR_STATEMENT	260:4	260:19	7	* value = ( uint8 ) m ;
EXPR	260:4	260:4	8	* value = ( uint8 ) m
ASSIGN	260:4	260:11	9	* value = ( uint8 ) m
LVAL	260:4	260:4	10	* value
UNARY_EXPR	260:4	260:5	11	* value
UNARY_OPERATOR	260:4	260:4	12	*
LEAF_NODE	260:4	260:4	13	*
FIELD	260:5	260:5	12	value
LEAF_NODE	260:5	260:5	13	value
ASSIGN_OP	260:10	260:10	10	=
LEAF_NODE	260:10	260:10	11	=
RVAL	260:11	260:18	10	( uint8 ) m
LEAF_NODE	260:11	260:11	11	(
TYPE_NAME	260:12	260:12	11	uint8
LEAF_NODE	260:12	260:12	12	uint8
LEAF_NODE	260:17	260:17	11	)
FIELD	260:18	260:18	11	m
LEAF_NODE	260:18	260:18	12	m
LEAF_NODE	260:19	260:19	8	;
LEAF_NODE	261:4	261:4	7	return
LEAF_NODE	261:10	261:10	7	(
LEAF_NODE	261:11	261:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	261:32	261:32	7	)
LEAF_NODE	261:33	261:33	7	;
LEAF_NODE	262:3	262:3	6	}
LABEL	263:2	263:17	6	case TIFF_LONG8 :
LEAF_NODE	263:2	263:2	7	case
LEAF_NODE	263:7	263:7	7	TIFF_LONG8
LEAF_NODE	263:17	263:17	7	:
LEAF_NODE	264:3	264:3	6	{
STATEMENTS	265:4	273:33	6	
SIMPLE_DECL	265:4	265:12	7	uint64 m ;
VAR_DECL	265:4	265:11	8	uint64 m
TYPE	265:4	265:4	9	uint64
TYPE_NAME	265:4	265:4	10	uint64
LEAF_NODE	265:4	265:4	11	uint64
NAME	265:11	265:11	9	m
LEAF_NODE	265:11	265:11	10	m
LEAF_NODE	265:12	265:12	8	;
EXPR_STATEMENT	266:4	266:53	7	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m ) ;
EXPR	266:4	266:4	8	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
ASSIGN	266:4	266:8	9	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
LVAL	266:4	266:4	10	err
FIELD	266:4	266:4	11	err
LEAF_NODE	266:4	266:4	12	err
ASSIGN_OP	266:7	266:7	10	=
LEAF_NODE	266:7	266:7	11	=
RVAL	266:8	266:8	10	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
FUNCTION_CALL	266:8	266:52	11	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
CALLEE	266:8	266:8	12	TIFFReadDirEntryCheckedLong8
LEAF_NODE	266:8	266:8	13	TIFFReadDirEntryCheckedLong8
LEAF_NODE	266:36	266:36	12	(
ARGUMENT	266:37	266:37	12	tif
FIELD	266:37	266:37	13	tif
LEAF_NODE	266:37	266:37	14	tif
LEAF_NODE	266:40	266:40	12	,
ARGUMENT	266:41	266:41	12	direntry
FIELD	266:41	266:41	13	direntry
LEAF_NODE	266:41	266:41	14	direntry
LEAF_NODE	266:49	266:49	12	,
ARGUMENT	266:50	266:50	12	& m
UNARY_EXPR	266:50	266:51	13	& m
UNARY_OPERATOR	266:50	266:50	14	&
LEAF_NODE	266:50	266:50	15	&
FIELD	266:51	266:51	14	m
LEAF_NODE	266:51	266:51	15	m
LEAF_NODE	266:52	266:52	12	)
LEAF_NODE	266:53	266:53	8	;
SELECTION	267:4	268:5	7	
KEYWORD	267:4	267:4	8	if
LEAF_NODE	267:4	267:4	9	if
LEAF_NODE	267:7	267:7	8	(
CONDITION	267:8	267:8	8	err != TIFFReadDirEntryErrOk
EXPR	267:8	267:13	9	err != TIFFReadDirEntryErrOk
FIELD	267:8	267:8	10	err
LEAF_NODE	267:8	267:8	11	err
EQ_OPERATOR	267:11	267:11	10	!=
LEAF_NODE	267:11	267:11	11	!=
FIELD	267:13	267:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	267:13	267:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	267:34	267:34	8	)
STATEMENTS	268:5	268:5	8	
LEAF_NODE	268:5	268:5	9	return
LEAF_NODE	268:11	268:11	7	(
LEAF_NODE	268:12	268:12	7	err
LEAF_NODE	268:15	268:15	7	)
LEAF_NODE	268:16	268:16	7	;
EXPR_STATEMENT	269:4	269:46	7	err = TIFFReadDirEntryCheckRangeByteLong8 ( m ) ;
EXPR	269:4	269:4	8	err = TIFFReadDirEntryCheckRangeByteLong8 ( m )
ASSIGN	269:4	269:8	9	err = TIFFReadDirEntryCheckRangeByteLong8 ( m )
LVAL	269:4	269:4	10	err
FIELD	269:4	269:4	11	err
LEAF_NODE	269:4	269:4	12	err
ASSIGN_OP	269:7	269:7	10	=
LEAF_NODE	269:7	269:7	11	=
RVAL	269:8	269:8	10	TIFFReadDirEntryCheckRangeByteLong8 ( m )
FUNCTION_CALL	269:8	269:45	11	TIFFReadDirEntryCheckRangeByteLong8 ( m )
CALLEE	269:8	269:8	12	TIFFReadDirEntryCheckRangeByteLong8
LEAF_NODE	269:8	269:8	13	TIFFReadDirEntryCheckRangeByteLong8
LEAF_NODE	269:43	269:43	12	(
ARGUMENT	269:44	269:44	12	m
FIELD	269:44	269:44	13	m
LEAF_NODE	269:44	269:44	14	m
LEAF_NODE	269:45	269:45	12	)
LEAF_NODE	269:46	269:46	8	;
SELECTION	270:4	271:5	7	
KEYWORD	270:4	270:4	8	if
LEAF_NODE	270:4	270:4	9	if
LEAF_NODE	270:7	270:7	8	(
CONDITION	270:8	270:8	8	err != TIFFReadDirEntryErrOk
EXPR	270:8	270:13	9	err != TIFFReadDirEntryErrOk
FIELD	270:8	270:8	10	err
LEAF_NODE	270:8	270:8	11	err
EQ_OPERATOR	270:11	270:11	10	!=
LEAF_NODE	270:11	270:11	11	!=
FIELD	270:13	270:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	270:13	270:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	270:34	270:34	8	)
STATEMENTS	271:5	271:5	8	
LEAF_NODE	271:5	271:5	9	return
LEAF_NODE	271:11	271:11	7	(
LEAF_NODE	271:12	271:12	7	err
LEAF_NODE	271:15	271:15	7	)
LEAF_NODE	271:16	271:16	7	;
EXPR_STATEMENT	272:4	272:19	7	* value = ( uint8 ) m ;
EXPR	272:4	272:4	8	* value = ( uint8 ) m
ASSIGN	272:4	272:11	9	* value = ( uint8 ) m
LVAL	272:4	272:4	10	* value
UNARY_EXPR	272:4	272:5	11	* value
UNARY_OPERATOR	272:4	272:4	12	*
LEAF_NODE	272:4	272:4	13	*
FIELD	272:5	272:5	12	value
LEAF_NODE	272:5	272:5	13	value
ASSIGN_OP	272:10	272:10	10	=
LEAF_NODE	272:10	272:10	11	=
RVAL	272:11	272:18	10	( uint8 ) m
LEAF_NODE	272:11	272:11	11	(
TYPE_NAME	272:12	272:12	11	uint8
LEAF_NODE	272:12	272:12	12	uint8
LEAF_NODE	272:17	272:17	11	)
FIELD	272:18	272:18	11	m
LEAF_NODE	272:18	272:18	12	m
LEAF_NODE	272:19	272:19	8	;
LEAF_NODE	273:4	273:4	7	return
LEAF_NODE	273:10	273:10	7	(
LEAF_NODE	273:11	273:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	273:32	273:32	7	)
LEAF_NODE	273:33	273:33	7	;
LEAF_NODE	274:3	274:3	6	}
LABEL	275:2	275:18	6	case TIFF_SLONG8 :
LEAF_NODE	275:2	275:2	7	case
LEAF_NODE	275:7	275:7	7	TIFF_SLONG8
LEAF_NODE	275:18	275:18	7	:
LEAF_NODE	276:3	276:3	6	{
STATEMENTS	277:4	285:33	6	
SIMPLE_DECL	277:4	277:11	7	int64 m ;
VAR_DECL	277:4	277:10	8	int64 m
TYPE	277:4	277:4	9	int64
TYPE_NAME	277:4	277:4	10	int64
LEAF_NODE	277:4	277:4	11	int64
NAME	277:10	277:10	9	m
LEAF_NODE	277:10	277:10	10	m
LEAF_NODE	277:11	277:11	8	;
EXPR_STATEMENT	278:4	278:54	7	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m ) ;
EXPR	278:4	278:4	8	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
ASSIGN	278:4	278:8	9	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
LVAL	278:4	278:4	10	err
FIELD	278:4	278:4	11	err
LEAF_NODE	278:4	278:4	12	err
ASSIGN_OP	278:7	278:7	10	=
LEAF_NODE	278:7	278:7	11	=
RVAL	278:8	278:8	10	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
FUNCTION_CALL	278:8	278:53	11	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
CALLEE	278:8	278:8	12	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	278:8	278:8	13	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	278:37	278:37	12	(
ARGUMENT	278:38	278:38	12	tif
FIELD	278:38	278:38	13	tif
LEAF_NODE	278:38	278:38	14	tif
LEAF_NODE	278:41	278:41	12	,
ARGUMENT	278:42	278:42	12	direntry
FIELD	278:42	278:42	13	direntry
LEAF_NODE	278:42	278:42	14	direntry
LEAF_NODE	278:50	278:50	12	,
ARGUMENT	278:51	278:51	12	& m
UNARY_EXPR	278:51	278:52	13	& m
UNARY_OPERATOR	278:51	278:51	14	&
LEAF_NODE	278:51	278:51	15	&
FIELD	278:52	278:52	14	m
LEAF_NODE	278:52	278:52	15	m
LEAF_NODE	278:53	278:53	12	)
LEAF_NODE	278:54	278:54	8	;
SELECTION	279:4	280:5	7	
KEYWORD	279:4	279:4	8	if
LEAF_NODE	279:4	279:4	9	if
LEAF_NODE	279:7	279:7	8	(
CONDITION	279:8	279:8	8	err != TIFFReadDirEntryErrOk
EXPR	279:8	279:13	9	err != TIFFReadDirEntryErrOk
FIELD	279:8	279:8	10	err
LEAF_NODE	279:8	279:8	11	err
EQ_OPERATOR	279:11	279:11	10	!=
LEAF_NODE	279:11	279:11	11	!=
FIELD	279:13	279:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	279:13	279:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	279:34	279:34	8	)
STATEMENTS	280:5	280:5	8	
LEAF_NODE	280:5	280:5	9	return
LEAF_NODE	280:11	280:11	7	(
LEAF_NODE	280:12	280:12	7	err
LEAF_NODE	280:15	280:15	7	)
LEAF_NODE	280:16	280:16	7	;
EXPR_STATEMENT	281:4	281:47	7	err = TIFFReadDirEntryCheckRangeByteSlong8 ( m ) ;
EXPR	281:4	281:4	8	err = TIFFReadDirEntryCheckRangeByteSlong8 ( m )
ASSIGN	281:4	281:8	9	err = TIFFReadDirEntryCheckRangeByteSlong8 ( m )
LVAL	281:4	281:4	10	err
FIELD	281:4	281:4	11	err
LEAF_NODE	281:4	281:4	12	err
ASSIGN_OP	281:7	281:7	10	=
LEAF_NODE	281:7	281:7	11	=
RVAL	281:8	281:8	10	TIFFReadDirEntryCheckRangeByteSlong8 ( m )
FUNCTION_CALL	281:8	281:46	11	TIFFReadDirEntryCheckRangeByteSlong8 ( m )
CALLEE	281:8	281:8	12	TIFFReadDirEntryCheckRangeByteSlong8
LEAF_NODE	281:8	281:8	13	TIFFReadDirEntryCheckRangeByteSlong8
LEAF_NODE	281:44	281:44	12	(
ARGUMENT	281:45	281:45	12	m
FIELD	281:45	281:45	13	m
LEAF_NODE	281:45	281:45	14	m
LEAF_NODE	281:46	281:46	12	)
LEAF_NODE	281:47	281:47	8	;
SELECTION	282:4	283:5	7	
KEYWORD	282:4	282:4	8	if
LEAF_NODE	282:4	282:4	9	if
LEAF_NODE	282:7	282:7	8	(
CONDITION	282:8	282:8	8	err != TIFFReadDirEntryErrOk
EXPR	282:8	282:13	9	err != TIFFReadDirEntryErrOk
FIELD	282:8	282:8	10	err
LEAF_NODE	282:8	282:8	11	err
EQ_OPERATOR	282:11	282:11	10	!=
LEAF_NODE	282:11	282:11	11	!=
FIELD	282:13	282:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	282:13	282:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	282:34	282:34	8	)
STATEMENTS	283:5	283:5	8	
LEAF_NODE	283:5	283:5	9	return
LEAF_NODE	283:11	283:11	7	(
LEAF_NODE	283:12	283:12	7	err
LEAF_NODE	283:15	283:15	7	)
LEAF_NODE	283:16	283:16	7	;
EXPR_STATEMENT	284:4	284:19	7	* value = ( uint8 ) m ;
EXPR	284:4	284:4	8	* value = ( uint8 ) m
ASSIGN	284:4	284:11	9	* value = ( uint8 ) m
LVAL	284:4	284:4	10	* value
UNARY_EXPR	284:4	284:5	11	* value
UNARY_OPERATOR	284:4	284:4	12	*
LEAF_NODE	284:4	284:4	13	*
FIELD	284:5	284:5	12	value
LEAF_NODE	284:5	284:5	13	value
ASSIGN_OP	284:10	284:10	10	=
LEAF_NODE	284:10	284:10	11	=
RVAL	284:11	284:18	10	( uint8 ) m
LEAF_NODE	284:11	284:11	11	(
TYPE_NAME	284:12	284:12	11	uint8
LEAF_NODE	284:12	284:12	12	uint8
LEAF_NODE	284:17	284:17	11	)
FIELD	284:18	284:18	11	m
LEAF_NODE	284:18	284:18	12	m
LEAF_NODE	284:19	284:19	8	;
LEAF_NODE	285:4	285:4	7	return
LEAF_NODE	285:10	285:10	7	(
LEAF_NODE	285:11	285:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	285:32	285:32	7	)
LEAF_NODE	285:33	285:33	7	;
LEAF_NODE	286:3	286:3	6	}
LABEL	287:2	287:9	6	default :
LEAF_NODE	287:2	287:2	7	default
LEAF_NODE	287:9	287:9	7	:
LEAF_NODE	288:3	288:3	6	return
LEAF_NODE	288:9	288:9	6	(
LEAF_NODE	288:10	288:10	6	TIFFReadDirEntryErrType
LEAF_NODE	288:33	288:33	6	)
LEAF_NODE	288:34	288:34	6	;
LEAF_NODE	289:1	289:1	5	}
LEAF_NODE	290:0	290:0	2	}
FUNCTION_DEF	292:0	376:0	1	
RETURN_TYPE	292:0	292:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	292:0	292:0	3	static
TYPE_NAME	292:7	292:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	292:7	292:7	4	enum
LEAF_NODE	292:12	292:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	292:32	292:32	2	TIFFReadDirEntryShort
LEAF_NODE	292:32	292:32	3	TIFFReadDirEntryShort
PARAMETER_LIST	292:53	292:102	2	( TIFF * tif , TIFFDirEntry * direntry , uint16 * value )
LEAF_NODE	292:53	292:53	3	(
PARAMETER_DECL	292:54	292:60	3	TIFF * tif
TYPE	292:54	292:58	4	TIFF *
TYPE_NAME	292:54	292:54	5	TIFF
LEAF_NODE	292:54	292:54	6	TIFF
POINTER	292:58	292:58	5	*
LEAF_NODE	292:58	292:58	6	*
NAME	292:60	292:60	4	tif
LEAF_NODE	292:60	292:60	5	tif
LEAF_NODE	292:63	292:63	3	,
PARAMETER_DECL	292:65	292:79	3	TIFFDirEntry * direntry
TYPE	292:65	292:77	4	TIFFDirEntry *
TYPE_NAME	292:65	292:65	5	TIFFDirEntry
LEAF_NODE	292:65	292:65	6	TIFFDirEntry
POINTER	292:77	292:77	5	*
LEAF_NODE	292:77	292:77	6	*
NAME	292:79	292:79	4	direntry
LEAF_NODE	292:79	292:79	5	direntry
LEAF_NODE	292:87	292:87	3	,
PARAMETER_DECL	292:89	292:97	3	uint16 * value
TYPE	292:89	292:95	4	uint16 *
TYPE_NAME	292:89	292:89	5	uint16
LEAF_NODE	292:89	292:89	6	uint16
POINTER	292:95	292:95	5	*
LEAF_NODE	292:95	292:95	6	*
NAME	292:97	292:97	4	value
LEAF_NODE	292:97	292:97	5	value
LEAF_NODE	292:102	292:102	3	)
LEAF_NODE	293:0	293:0	2	{
STATEMENTS	294:1	297:1	2	
SIMPLE_DECL	294:1	294:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	294:1	294:26	4	enum TIFFReadDirEntryErr err
TYPE	294:1	294:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	294:1	294:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	294:1	294:1	7	enum
LEAF_NODE	294:6	294:6	7	TIFFReadDirEntryErr
NAME	294:26	294:26	5	err
LEAF_NODE	294:26	294:26	6	err
LEAF_NODE	294:29	294:29	4	;
SELECTION	295:1	296:2	3	
KEYWORD	295:1	295:1	4	if
LEAF_NODE	295:1	295:1	5	if
LEAF_NODE	295:4	295:4	4	(
CONDITION	295:5	295:5	4	direntry -> tdir_count != 1
EXPR	295:5	295:27	5	direntry -> tdir_count != 1
FIELD	295:5	295:15	6	direntry -> tdir_count
LEAF_NODE	295:5	295:5	7	direntry
LEAF_NODE	295:13	295:13	7	->
LEAF_NODE	295:15	295:15	7	tdir_count
EQ_OPERATOR	295:25	295:25	6	!=
LEAF_NODE	295:25	295:25	7	!=
FIELD	295:27	295:27	6	1
LEAF_NODE	295:27	295:27	7	1
LEAF_NODE	295:28	295:28	4	)
STATEMENTS	296:2	296:2	4	
LEAF_NODE	296:2	296:2	5	return
LEAF_NODE	296:8	296:8	3	(
LEAF_NODE	296:9	296:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	296:33	296:33	3	)
LEAF_NODE	296:34	296:34	3	;
SELECTION	297:1	298:1	3	
KEYWORD	297:1	297:1	4	switch
LEAF_NODE	297:1	297:1	5	switch
LEAF_NODE	297:8	297:8	4	(
CONDITION	297:9	297:9	4	direntry -> tdir_type
EXPR	297:9	297:9	5	direntry -> tdir_type
FIELD	297:9	297:19	6	direntry -> tdir_type
LEAF_NODE	297:9	297:9	7	direntry
LEAF_NODE	297:17	297:17	7	->
LEAF_NODE	297:19	297:19	7	tdir_type
LEAF_NODE	297:28	297:28	4	)
STATEMENTS	298:1	375:1	4	
LEAF_NODE	298:1	298:1	5	{
STATEMENTS	299:2	374:34	5	
LABEL	299:2	299:16	6	case TIFF_BYTE :
LEAF_NODE	299:2	299:2	7	case
LEAF_NODE	299:7	299:7	7	TIFF_BYTE
LEAF_NODE	299:16	299:16	7	:
LEAF_NODE	300:3	300:3	6	{
STATEMENTS	301:4	304:33	6	
SIMPLE_DECL	301:4	301:11	7	uint8 m ;
VAR_DECL	301:4	301:10	8	uint8 m
TYPE	301:4	301:4	9	uint8
TYPE_NAME	301:4	301:4	10	uint8
LEAF_NODE	301:4	301:4	11	uint8
NAME	301:10	301:10	9	m
LEAF_NODE	301:10	301:10	10	m
LEAF_NODE	301:11	301:11	8	;
EXPR_STATEMENT	302:4	302:48	7	TIFFReadDirEntryCheckedByte ( tif , direntry , & m ) ;
EXPR	302:4	302:4	8	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
FUNCTION_CALL	302:4	302:47	9	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
CALLEE	302:4	302:4	10	TIFFReadDirEntryCheckedByte
LEAF_NODE	302:4	302:4	11	TIFFReadDirEntryCheckedByte
LEAF_NODE	302:31	302:31	10	(
ARGUMENT	302:32	302:32	10	tif
FIELD	302:32	302:32	11	tif
LEAF_NODE	302:32	302:32	12	tif
LEAF_NODE	302:35	302:35	10	,
ARGUMENT	302:36	302:36	10	direntry
FIELD	302:36	302:36	11	direntry
LEAF_NODE	302:36	302:36	12	direntry
LEAF_NODE	302:44	302:44	10	,
ARGUMENT	302:45	302:45	10	& m
UNARY_EXPR	302:45	302:46	11	& m
UNARY_OPERATOR	302:45	302:45	12	&
LEAF_NODE	302:45	302:45	13	&
FIELD	302:46	302:46	12	m
LEAF_NODE	302:46	302:46	13	m
LEAF_NODE	302:47	302:47	10	)
LEAF_NODE	302:48	302:48	8	;
EXPR_STATEMENT	303:4	303:20	7	* value = ( uint16 ) m ;
EXPR	303:4	303:4	8	* value = ( uint16 ) m
ASSIGN	303:4	303:11	9	* value = ( uint16 ) m
LVAL	303:4	303:4	10	* value
UNARY_EXPR	303:4	303:5	11	* value
UNARY_OPERATOR	303:4	303:4	12	*
LEAF_NODE	303:4	303:4	13	*
FIELD	303:5	303:5	12	value
LEAF_NODE	303:5	303:5	13	value
ASSIGN_OP	303:10	303:10	10	=
LEAF_NODE	303:10	303:10	11	=
RVAL	303:11	303:19	10	( uint16 ) m
LEAF_NODE	303:11	303:11	11	(
TYPE_NAME	303:12	303:12	11	uint16
LEAF_NODE	303:12	303:12	12	uint16
LEAF_NODE	303:18	303:18	11	)
FIELD	303:19	303:19	11	m
LEAF_NODE	303:19	303:19	12	m
LEAF_NODE	303:20	303:20	8	;
LEAF_NODE	304:4	304:4	7	return
LEAF_NODE	304:10	304:10	7	(
LEAF_NODE	304:11	304:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	304:32	304:32	7	)
LEAF_NODE	304:33	304:33	7	;
LEAF_NODE	305:3	305:3	6	}
LABEL	306:2	306:17	6	case TIFF_SBYTE :
LEAF_NODE	306:2	306:2	7	case
LEAF_NODE	306:7	306:7	7	TIFF_SBYTE
LEAF_NODE	306:17	306:17	7	:
LEAF_NODE	307:3	307:3	6	{
STATEMENTS	308:4	314:33	6	
SIMPLE_DECL	308:4	308:10	7	int8 m ;
VAR_DECL	308:4	308:9	8	int8 m
TYPE	308:4	308:4	9	int8
TYPE_NAME	308:4	308:4	10	int8
LEAF_NODE	308:4	308:4	11	int8
NAME	308:9	308:9	9	m
LEAF_NODE	308:9	308:9	10	m
LEAF_NODE	308:10	308:10	8	;
EXPR_STATEMENT	309:4	309:49	7	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m ) ;
EXPR	309:4	309:4	8	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
FUNCTION_CALL	309:4	309:48	9	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
CALLEE	309:4	309:4	10	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	309:4	309:4	11	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	309:32	309:32	10	(
ARGUMENT	309:33	309:33	10	tif
FIELD	309:33	309:33	11	tif
LEAF_NODE	309:33	309:33	12	tif
LEAF_NODE	309:36	309:36	10	,
ARGUMENT	309:37	309:37	10	direntry
FIELD	309:37	309:37	11	direntry
LEAF_NODE	309:37	309:37	12	direntry
LEAF_NODE	309:45	309:45	10	,
ARGUMENT	309:46	309:46	10	& m
UNARY_EXPR	309:46	309:47	11	& m
UNARY_OPERATOR	309:46	309:46	12	&
LEAF_NODE	309:46	309:46	13	&
FIELD	309:47	309:47	12	m
LEAF_NODE	309:47	309:47	13	m
LEAF_NODE	309:48	309:48	10	)
LEAF_NODE	309:49	309:49	8	;
EXPR_STATEMENT	310:4	310:47	7	err = TIFFReadDirEntryCheckRangeShortSbyte ( m ) ;
EXPR	310:4	310:4	8	err = TIFFReadDirEntryCheckRangeShortSbyte ( m )
ASSIGN	310:4	310:8	9	err = TIFFReadDirEntryCheckRangeShortSbyte ( m )
LVAL	310:4	310:4	10	err
FIELD	310:4	310:4	11	err
LEAF_NODE	310:4	310:4	12	err
ASSIGN_OP	310:7	310:7	10	=
LEAF_NODE	310:7	310:7	11	=
RVAL	310:8	310:8	10	TIFFReadDirEntryCheckRangeShortSbyte ( m )
FUNCTION_CALL	310:8	310:46	11	TIFFReadDirEntryCheckRangeShortSbyte ( m )
CALLEE	310:8	310:8	12	TIFFReadDirEntryCheckRangeShortSbyte
LEAF_NODE	310:8	310:8	13	TIFFReadDirEntryCheckRangeShortSbyte
LEAF_NODE	310:44	310:44	12	(
ARGUMENT	310:45	310:45	12	m
FIELD	310:45	310:45	13	m
LEAF_NODE	310:45	310:45	14	m
LEAF_NODE	310:46	310:46	12	)
LEAF_NODE	310:47	310:47	8	;
SELECTION	311:4	312:5	7	
KEYWORD	311:4	311:4	8	if
LEAF_NODE	311:4	311:4	9	if
LEAF_NODE	311:7	311:7	8	(
CONDITION	311:8	311:8	8	err != TIFFReadDirEntryErrOk
EXPR	311:8	311:13	9	err != TIFFReadDirEntryErrOk
FIELD	311:8	311:8	10	err
LEAF_NODE	311:8	311:8	11	err
EQ_OPERATOR	311:11	311:11	10	!=
LEAF_NODE	311:11	311:11	11	!=
FIELD	311:13	311:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	311:13	311:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	311:34	311:34	8	)
STATEMENTS	312:5	312:5	8	
LEAF_NODE	312:5	312:5	9	return
LEAF_NODE	312:11	312:11	7	(
LEAF_NODE	312:12	312:12	7	err
LEAF_NODE	312:15	312:15	7	)
LEAF_NODE	312:16	312:16	7	;
EXPR_STATEMENT	313:4	313:20	7	* value = ( uint16 ) m ;
EXPR	313:4	313:4	8	* value = ( uint16 ) m
ASSIGN	313:4	313:11	9	* value = ( uint16 ) m
LVAL	313:4	313:4	10	* value
UNARY_EXPR	313:4	313:5	11	* value
UNARY_OPERATOR	313:4	313:4	12	*
LEAF_NODE	313:4	313:4	13	*
FIELD	313:5	313:5	12	value
LEAF_NODE	313:5	313:5	13	value
ASSIGN_OP	313:10	313:10	10	=
LEAF_NODE	313:10	313:10	11	=
RVAL	313:11	313:19	10	( uint16 ) m
LEAF_NODE	313:11	313:11	11	(
TYPE_NAME	313:12	313:12	11	uint16
LEAF_NODE	313:12	313:12	12	uint16
LEAF_NODE	313:18	313:18	11	)
FIELD	313:19	313:19	11	m
LEAF_NODE	313:19	313:19	12	m
LEAF_NODE	313:20	313:20	8	;
LEAF_NODE	314:4	314:4	7	return
LEAF_NODE	314:10	314:10	7	(
LEAF_NODE	314:11	314:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	314:32	314:32	7	)
LEAF_NODE	314:33	314:33	7	;
LEAF_NODE	315:3	315:3	6	}
LABEL	316:2	316:17	6	case TIFF_SHORT :
LEAF_NODE	316:2	316:2	7	case
LEAF_NODE	316:7	316:7	7	TIFF_SHORT
LEAF_NODE	316:17	316:17	7	:
EXPR_STATEMENT	317:3	317:51	6	TIFFReadDirEntryCheckedShort ( tif , direntry , value ) ;
EXPR	317:3	317:3	7	TIFFReadDirEntryCheckedShort ( tif , direntry , value )
FUNCTION_CALL	317:3	317:50	8	TIFFReadDirEntryCheckedShort ( tif , direntry , value )
CALLEE	317:3	317:3	9	TIFFReadDirEntryCheckedShort
LEAF_NODE	317:3	317:3	10	TIFFReadDirEntryCheckedShort
LEAF_NODE	317:31	317:31	9	(
ARGUMENT	317:32	317:32	9	tif
FIELD	317:32	317:32	10	tif
LEAF_NODE	317:32	317:32	11	tif
LEAF_NODE	317:35	317:35	9	,
ARGUMENT	317:36	317:36	9	direntry
FIELD	317:36	317:36	10	direntry
LEAF_NODE	317:36	317:36	11	direntry
LEAF_NODE	317:44	317:44	9	,
ARGUMENT	317:45	317:45	9	value
FIELD	317:45	317:45	10	value
LEAF_NODE	317:45	317:45	11	value
LEAF_NODE	317:50	317:50	9	)
LEAF_NODE	317:51	317:51	7	;
LEAF_NODE	318:3	318:3	6	return
LEAF_NODE	318:9	318:9	6	(
LEAF_NODE	318:10	318:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	318:31	318:31	6	)
LEAF_NODE	318:32	318:32	6	;
LABEL	319:2	319:18	6	case TIFF_SSHORT :
LEAF_NODE	319:2	319:2	7	case
LEAF_NODE	319:7	319:7	7	TIFF_SSHORT
LEAF_NODE	319:18	319:18	7	:
LEAF_NODE	320:3	320:3	6	{
STATEMENTS	321:4	327:33	6	
SIMPLE_DECL	321:4	321:11	7	int16 m ;
VAR_DECL	321:4	321:10	8	int16 m
TYPE	321:4	321:4	9	int16
TYPE_NAME	321:4	321:4	10	int16
LEAF_NODE	321:4	321:4	11	int16
NAME	321:10	321:10	9	m
LEAF_NODE	321:10	321:10	10	m
LEAF_NODE	321:11	321:11	8	;
EXPR_STATEMENT	322:4	322:50	7	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m ) ;
EXPR	322:4	322:4	8	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
FUNCTION_CALL	322:4	322:49	9	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
CALLEE	322:4	322:4	10	TIFFReadDirEntryCheckedSshort
LEAF_NODE	322:4	322:4	11	TIFFReadDirEntryCheckedSshort
LEAF_NODE	322:33	322:33	10	(
ARGUMENT	322:34	322:34	10	tif
FIELD	322:34	322:34	11	tif
LEAF_NODE	322:34	322:34	12	tif
LEAF_NODE	322:37	322:37	10	,
ARGUMENT	322:38	322:38	10	direntry
FIELD	322:38	322:38	11	direntry
LEAF_NODE	322:38	322:38	12	direntry
LEAF_NODE	322:46	322:46	10	,
ARGUMENT	322:47	322:47	10	& m
UNARY_EXPR	322:47	322:48	11	& m
UNARY_OPERATOR	322:47	322:47	12	&
LEAF_NODE	322:47	322:47	13	&
FIELD	322:48	322:48	12	m
LEAF_NODE	322:48	322:48	13	m
LEAF_NODE	322:49	322:49	10	)
LEAF_NODE	322:50	322:50	8	;
EXPR_STATEMENT	323:4	323:48	7	err = TIFFReadDirEntryCheckRangeShortSshort ( m ) ;
EXPR	323:4	323:4	8	err = TIFFReadDirEntryCheckRangeShortSshort ( m )
ASSIGN	323:4	323:8	9	err = TIFFReadDirEntryCheckRangeShortSshort ( m )
LVAL	323:4	323:4	10	err
FIELD	323:4	323:4	11	err
LEAF_NODE	323:4	323:4	12	err
ASSIGN_OP	323:7	323:7	10	=
LEAF_NODE	323:7	323:7	11	=
RVAL	323:8	323:8	10	TIFFReadDirEntryCheckRangeShortSshort ( m )
FUNCTION_CALL	323:8	323:47	11	TIFFReadDirEntryCheckRangeShortSshort ( m )
CALLEE	323:8	323:8	12	TIFFReadDirEntryCheckRangeShortSshort
LEAF_NODE	323:8	323:8	13	TIFFReadDirEntryCheckRangeShortSshort
LEAF_NODE	323:45	323:45	12	(
ARGUMENT	323:46	323:46	12	m
FIELD	323:46	323:46	13	m
LEAF_NODE	323:46	323:46	14	m
LEAF_NODE	323:47	323:47	12	)
LEAF_NODE	323:48	323:48	8	;
SELECTION	324:4	325:5	7	
KEYWORD	324:4	324:4	8	if
LEAF_NODE	324:4	324:4	9	if
LEAF_NODE	324:7	324:7	8	(
CONDITION	324:8	324:8	8	err != TIFFReadDirEntryErrOk
EXPR	324:8	324:13	9	err != TIFFReadDirEntryErrOk
FIELD	324:8	324:8	10	err
LEAF_NODE	324:8	324:8	11	err
EQ_OPERATOR	324:11	324:11	10	!=
LEAF_NODE	324:11	324:11	11	!=
FIELD	324:13	324:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	324:13	324:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	324:34	324:34	8	)
STATEMENTS	325:5	325:5	8	
LEAF_NODE	325:5	325:5	9	return
LEAF_NODE	325:11	325:11	7	(
LEAF_NODE	325:12	325:12	7	err
LEAF_NODE	325:15	325:15	7	)
LEAF_NODE	325:16	325:16	7	;
EXPR_STATEMENT	326:4	326:20	7	* value = ( uint16 ) m ;
EXPR	326:4	326:4	8	* value = ( uint16 ) m
ASSIGN	326:4	326:11	9	* value = ( uint16 ) m
LVAL	326:4	326:4	10	* value
UNARY_EXPR	326:4	326:5	11	* value
UNARY_OPERATOR	326:4	326:4	12	*
LEAF_NODE	326:4	326:4	13	*
FIELD	326:5	326:5	12	value
LEAF_NODE	326:5	326:5	13	value
ASSIGN_OP	326:10	326:10	10	=
LEAF_NODE	326:10	326:10	11	=
RVAL	326:11	326:19	10	( uint16 ) m
LEAF_NODE	326:11	326:11	11	(
TYPE_NAME	326:12	326:12	11	uint16
LEAF_NODE	326:12	326:12	12	uint16
LEAF_NODE	326:18	326:18	11	)
FIELD	326:19	326:19	11	m
LEAF_NODE	326:19	326:19	12	m
LEAF_NODE	326:20	326:20	8	;
LEAF_NODE	327:4	327:4	7	return
LEAF_NODE	327:10	327:10	7	(
LEAF_NODE	327:11	327:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	327:32	327:32	7	)
LEAF_NODE	327:33	327:33	7	;
LEAF_NODE	328:3	328:3	6	}
LABEL	329:2	329:16	6	case TIFF_LONG :
LEAF_NODE	329:2	329:2	7	case
LEAF_NODE	329:7	329:7	7	TIFF_LONG
LEAF_NODE	329:16	329:16	7	:
LEAF_NODE	330:3	330:3	6	{
STATEMENTS	331:4	337:33	6	
SIMPLE_DECL	331:4	331:12	7	uint32 m ;
VAR_DECL	331:4	331:11	8	uint32 m
TYPE	331:4	331:4	9	uint32
TYPE_NAME	331:4	331:4	10	uint32
LEAF_NODE	331:4	331:4	11	uint32
NAME	331:11	331:11	9	m
LEAF_NODE	331:11	331:11	10	m
LEAF_NODE	331:12	331:12	8	;
EXPR_STATEMENT	332:4	332:48	7	TIFFReadDirEntryCheckedLong ( tif , direntry , & m ) ;
EXPR	332:4	332:4	8	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
FUNCTION_CALL	332:4	332:47	9	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
CALLEE	332:4	332:4	10	TIFFReadDirEntryCheckedLong
LEAF_NODE	332:4	332:4	11	TIFFReadDirEntryCheckedLong
LEAF_NODE	332:31	332:31	10	(
ARGUMENT	332:32	332:32	10	tif
FIELD	332:32	332:32	11	tif
LEAF_NODE	332:32	332:32	12	tif
LEAF_NODE	332:35	332:35	10	,
ARGUMENT	332:36	332:36	10	direntry
FIELD	332:36	332:36	11	direntry
LEAF_NODE	332:36	332:36	12	direntry
LEAF_NODE	332:44	332:44	10	,
ARGUMENT	332:45	332:45	10	& m
UNARY_EXPR	332:45	332:46	11	& m
UNARY_OPERATOR	332:45	332:45	12	&
LEAF_NODE	332:45	332:45	13	&
FIELD	332:46	332:46	12	m
LEAF_NODE	332:46	332:46	13	m
LEAF_NODE	332:47	332:47	10	)
LEAF_NODE	332:48	332:48	8	;
EXPR_STATEMENT	333:4	333:46	7	err = TIFFReadDirEntryCheckRangeShortLong ( m ) ;
EXPR	333:4	333:4	8	err = TIFFReadDirEntryCheckRangeShortLong ( m )
ASSIGN	333:4	333:8	9	err = TIFFReadDirEntryCheckRangeShortLong ( m )
LVAL	333:4	333:4	10	err
FIELD	333:4	333:4	11	err
LEAF_NODE	333:4	333:4	12	err
ASSIGN_OP	333:7	333:7	10	=
LEAF_NODE	333:7	333:7	11	=
RVAL	333:8	333:8	10	TIFFReadDirEntryCheckRangeShortLong ( m )
FUNCTION_CALL	333:8	333:45	11	TIFFReadDirEntryCheckRangeShortLong ( m )
CALLEE	333:8	333:8	12	TIFFReadDirEntryCheckRangeShortLong
LEAF_NODE	333:8	333:8	13	TIFFReadDirEntryCheckRangeShortLong
LEAF_NODE	333:43	333:43	12	(
ARGUMENT	333:44	333:44	12	m
FIELD	333:44	333:44	13	m
LEAF_NODE	333:44	333:44	14	m
LEAF_NODE	333:45	333:45	12	)
LEAF_NODE	333:46	333:46	8	;
SELECTION	334:4	335:5	7	
KEYWORD	334:4	334:4	8	if
LEAF_NODE	334:4	334:4	9	if
LEAF_NODE	334:7	334:7	8	(
CONDITION	334:8	334:8	8	err != TIFFReadDirEntryErrOk
EXPR	334:8	334:13	9	err != TIFFReadDirEntryErrOk
FIELD	334:8	334:8	10	err
LEAF_NODE	334:8	334:8	11	err
EQ_OPERATOR	334:11	334:11	10	!=
LEAF_NODE	334:11	334:11	11	!=
FIELD	334:13	334:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	334:13	334:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	334:34	334:34	8	)
STATEMENTS	335:5	335:5	8	
LEAF_NODE	335:5	335:5	9	return
LEAF_NODE	335:11	335:11	7	(
LEAF_NODE	335:12	335:12	7	err
LEAF_NODE	335:15	335:15	7	)
LEAF_NODE	335:16	335:16	7	;
EXPR_STATEMENT	336:4	336:20	7	* value = ( uint16 ) m ;
EXPR	336:4	336:4	8	* value = ( uint16 ) m
ASSIGN	336:4	336:11	9	* value = ( uint16 ) m
LVAL	336:4	336:4	10	* value
UNARY_EXPR	336:4	336:5	11	* value
UNARY_OPERATOR	336:4	336:4	12	*
LEAF_NODE	336:4	336:4	13	*
FIELD	336:5	336:5	12	value
LEAF_NODE	336:5	336:5	13	value
ASSIGN_OP	336:10	336:10	10	=
LEAF_NODE	336:10	336:10	11	=
RVAL	336:11	336:19	10	( uint16 ) m
LEAF_NODE	336:11	336:11	11	(
TYPE_NAME	336:12	336:12	11	uint16
LEAF_NODE	336:12	336:12	12	uint16
LEAF_NODE	336:18	336:18	11	)
FIELD	336:19	336:19	11	m
LEAF_NODE	336:19	336:19	12	m
LEAF_NODE	336:20	336:20	8	;
LEAF_NODE	337:4	337:4	7	return
LEAF_NODE	337:10	337:10	7	(
LEAF_NODE	337:11	337:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	337:32	337:32	7	)
LEAF_NODE	337:33	337:33	7	;
LEAF_NODE	338:3	338:3	6	}
LABEL	339:2	339:17	6	case TIFF_SLONG :
LEAF_NODE	339:2	339:2	7	case
LEAF_NODE	339:7	339:7	7	TIFF_SLONG
LEAF_NODE	339:17	339:17	7	:
LEAF_NODE	340:3	340:3	6	{
STATEMENTS	341:4	347:33	6	
SIMPLE_DECL	341:4	341:11	7	int32 m ;
VAR_DECL	341:4	341:10	8	int32 m
TYPE	341:4	341:4	9	int32
TYPE_NAME	341:4	341:4	10	int32
LEAF_NODE	341:4	341:4	11	int32
NAME	341:10	341:10	9	m
LEAF_NODE	341:10	341:10	10	m
LEAF_NODE	341:11	341:11	8	;
EXPR_STATEMENT	342:4	342:49	7	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m ) ;
EXPR	342:4	342:4	8	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
FUNCTION_CALL	342:4	342:48	9	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
CALLEE	342:4	342:4	10	TIFFReadDirEntryCheckedSlong
LEAF_NODE	342:4	342:4	11	TIFFReadDirEntryCheckedSlong
LEAF_NODE	342:32	342:32	10	(
ARGUMENT	342:33	342:33	10	tif
FIELD	342:33	342:33	11	tif
LEAF_NODE	342:33	342:33	12	tif
LEAF_NODE	342:36	342:36	10	,
ARGUMENT	342:37	342:37	10	direntry
FIELD	342:37	342:37	11	direntry
LEAF_NODE	342:37	342:37	12	direntry
LEAF_NODE	342:45	342:45	10	,
ARGUMENT	342:46	342:46	10	& m
UNARY_EXPR	342:46	342:47	11	& m
UNARY_OPERATOR	342:46	342:46	12	&
LEAF_NODE	342:46	342:46	13	&
FIELD	342:47	342:47	12	m
LEAF_NODE	342:47	342:47	13	m
LEAF_NODE	342:48	342:48	10	)
LEAF_NODE	342:49	342:49	8	;
EXPR_STATEMENT	343:4	343:47	7	err = TIFFReadDirEntryCheckRangeShortSlong ( m ) ;
EXPR	343:4	343:4	8	err = TIFFReadDirEntryCheckRangeShortSlong ( m )
ASSIGN	343:4	343:8	9	err = TIFFReadDirEntryCheckRangeShortSlong ( m )
LVAL	343:4	343:4	10	err
FIELD	343:4	343:4	11	err
LEAF_NODE	343:4	343:4	12	err
ASSIGN_OP	343:7	343:7	10	=
LEAF_NODE	343:7	343:7	11	=
RVAL	343:8	343:8	10	TIFFReadDirEntryCheckRangeShortSlong ( m )
FUNCTION_CALL	343:8	343:46	11	TIFFReadDirEntryCheckRangeShortSlong ( m )
CALLEE	343:8	343:8	12	TIFFReadDirEntryCheckRangeShortSlong
LEAF_NODE	343:8	343:8	13	TIFFReadDirEntryCheckRangeShortSlong
LEAF_NODE	343:44	343:44	12	(
ARGUMENT	343:45	343:45	12	m
FIELD	343:45	343:45	13	m
LEAF_NODE	343:45	343:45	14	m
LEAF_NODE	343:46	343:46	12	)
LEAF_NODE	343:47	343:47	8	;
SELECTION	344:4	345:5	7	
KEYWORD	344:4	344:4	8	if
LEAF_NODE	344:4	344:4	9	if
LEAF_NODE	344:7	344:7	8	(
CONDITION	344:8	344:8	8	err != TIFFReadDirEntryErrOk
EXPR	344:8	344:13	9	err != TIFFReadDirEntryErrOk
FIELD	344:8	344:8	10	err
LEAF_NODE	344:8	344:8	11	err
EQ_OPERATOR	344:11	344:11	10	!=
LEAF_NODE	344:11	344:11	11	!=
FIELD	344:13	344:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	344:13	344:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	344:34	344:34	8	)
STATEMENTS	345:5	345:5	8	
LEAF_NODE	345:5	345:5	9	return
LEAF_NODE	345:11	345:11	7	(
LEAF_NODE	345:12	345:12	7	err
LEAF_NODE	345:15	345:15	7	)
LEAF_NODE	345:16	345:16	7	;
EXPR_STATEMENT	346:4	346:20	7	* value = ( uint16 ) m ;
EXPR	346:4	346:4	8	* value = ( uint16 ) m
ASSIGN	346:4	346:11	9	* value = ( uint16 ) m
LVAL	346:4	346:4	10	* value
UNARY_EXPR	346:4	346:5	11	* value
UNARY_OPERATOR	346:4	346:4	12	*
LEAF_NODE	346:4	346:4	13	*
FIELD	346:5	346:5	12	value
LEAF_NODE	346:5	346:5	13	value
ASSIGN_OP	346:10	346:10	10	=
LEAF_NODE	346:10	346:10	11	=
RVAL	346:11	346:19	10	( uint16 ) m
LEAF_NODE	346:11	346:11	11	(
TYPE_NAME	346:12	346:12	11	uint16
LEAF_NODE	346:12	346:12	12	uint16
LEAF_NODE	346:18	346:18	11	)
FIELD	346:19	346:19	11	m
LEAF_NODE	346:19	346:19	12	m
LEAF_NODE	346:20	346:20	8	;
LEAF_NODE	347:4	347:4	7	return
LEAF_NODE	347:10	347:10	7	(
LEAF_NODE	347:11	347:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	347:32	347:32	7	)
LEAF_NODE	347:33	347:33	7	;
LEAF_NODE	348:3	348:3	6	}
LABEL	349:2	349:17	6	case TIFF_LONG8 :
LEAF_NODE	349:2	349:2	7	case
LEAF_NODE	349:7	349:7	7	TIFF_LONG8
LEAF_NODE	349:17	349:17	7	:
LEAF_NODE	350:3	350:3	6	{
STATEMENTS	351:4	359:33	6	
SIMPLE_DECL	351:4	351:12	7	uint64 m ;
VAR_DECL	351:4	351:11	8	uint64 m
TYPE	351:4	351:4	9	uint64
TYPE_NAME	351:4	351:4	10	uint64
LEAF_NODE	351:4	351:4	11	uint64
NAME	351:11	351:11	9	m
LEAF_NODE	351:11	351:11	10	m
LEAF_NODE	351:12	351:12	8	;
EXPR_STATEMENT	352:4	352:53	7	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m ) ;
EXPR	352:4	352:4	8	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
ASSIGN	352:4	352:8	9	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
LVAL	352:4	352:4	10	err
FIELD	352:4	352:4	11	err
LEAF_NODE	352:4	352:4	12	err
ASSIGN_OP	352:7	352:7	10	=
LEAF_NODE	352:7	352:7	11	=
RVAL	352:8	352:8	10	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
FUNCTION_CALL	352:8	352:52	11	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
CALLEE	352:8	352:8	12	TIFFReadDirEntryCheckedLong8
LEAF_NODE	352:8	352:8	13	TIFFReadDirEntryCheckedLong8
LEAF_NODE	352:36	352:36	12	(
ARGUMENT	352:37	352:37	12	tif
FIELD	352:37	352:37	13	tif
LEAF_NODE	352:37	352:37	14	tif
LEAF_NODE	352:40	352:40	12	,
ARGUMENT	352:41	352:41	12	direntry
FIELD	352:41	352:41	13	direntry
LEAF_NODE	352:41	352:41	14	direntry
LEAF_NODE	352:49	352:49	12	,
ARGUMENT	352:50	352:50	12	& m
UNARY_EXPR	352:50	352:51	13	& m
UNARY_OPERATOR	352:50	352:50	14	&
LEAF_NODE	352:50	352:50	15	&
FIELD	352:51	352:51	14	m
LEAF_NODE	352:51	352:51	15	m
LEAF_NODE	352:52	352:52	12	)
LEAF_NODE	352:53	352:53	8	;
SELECTION	353:4	354:5	7	
KEYWORD	353:4	353:4	8	if
LEAF_NODE	353:4	353:4	9	if
LEAF_NODE	353:7	353:7	8	(
CONDITION	353:8	353:8	8	err != TIFFReadDirEntryErrOk
EXPR	353:8	353:13	9	err != TIFFReadDirEntryErrOk
FIELD	353:8	353:8	10	err
LEAF_NODE	353:8	353:8	11	err
EQ_OPERATOR	353:11	353:11	10	!=
LEAF_NODE	353:11	353:11	11	!=
FIELD	353:13	353:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	353:13	353:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	353:34	353:34	8	)
STATEMENTS	354:5	354:5	8	
LEAF_NODE	354:5	354:5	9	return
LEAF_NODE	354:11	354:11	7	(
LEAF_NODE	354:12	354:12	7	err
LEAF_NODE	354:15	354:15	7	)
LEAF_NODE	354:16	354:16	7	;
EXPR_STATEMENT	355:4	355:47	7	err = TIFFReadDirEntryCheckRangeShortLong8 ( m ) ;
EXPR	355:4	355:4	8	err = TIFFReadDirEntryCheckRangeShortLong8 ( m )
ASSIGN	355:4	355:8	9	err = TIFFReadDirEntryCheckRangeShortLong8 ( m )
LVAL	355:4	355:4	10	err
FIELD	355:4	355:4	11	err
LEAF_NODE	355:4	355:4	12	err
ASSIGN_OP	355:7	355:7	10	=
LEAF_NODE	355:7	355:7	11	=
RVAL	355:8	355:8	10	TIFFReadDirEntryCheckRangeShortLong8 ( m )
FUNCTION_CALL	355:8	355:46	11	TIFFReadDirEntryCheckRangeShortLong8 ( m )
CALLEE	355:8	355:8	12	TIFFReadDirEntryCheckRangeShortLong8
LEAF_NODE	355:8	355:8	13	TIFFReadDirEntryCheckRangeShortLong8
LEAF_NODE	355:44	355:44	12	(
ARGUMENT	355:45	355:45	12	m
FIELD	355:45	355:45	13	m
LEAF_NODE	355:45	355:45	14	m
LEAF_NODE	355:46	355:46	12	)
LEAF_NODE	355:47	355:47	8	;
SELECTION	356:4	357:5	7	
KEYWORD	356:4	356:4	8	if
LEAF_NODE	356:4	356:4	9	if
LEAF_NODE	356:7	356:7	8	(
CONDITION	356:8	356:8	8	err != TIFFReadDirEntryErrOk
EXPR	356:8	356:13	9	err != TIFFReadDirEntryErrOk
FIELD	356:8	356:8	10	err
LEAF_NODE	356:8	356:8	11	err
EQ_OPERATOR	356:11	356:11	10	!=
LEAF_NODE	356:11	356:11	11	!=
FIELD	356:13	356:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	356:13	356:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	356:34	356:34	8	)
STATEMENTS	357:5	357:5	8	
LEAF_NODE	357:5	357:5	9	return
LEAF_NODE	357:11	357:11	7	(
LEAF_NODE	357:12	357:12	7	err
LEAF_NODE	357:15	357:15	7	)
LEAF_NODE	357:16	357:16	7	;
EXPR_STATEMENT	358:4	358:20	7	* value = ( uint16 ) m ;
EXPR	358:4	358:4	8	* value = ( uint16 ) m
ASSIGN	358:4	358:11	9	* value = ( uint16 ) m
LVAL	358:4	358:4	10	* value
UNARY_EXPR	358:4	358:5	11	* value
UNARY_OPERATOR	358:4	358:4	12	*
LEAF_NODE	358:4	358:4	13	*
FIELD	358:5	358:5	12	value
LEAF_NODE	358:5	358:5	13	value
ASSIGN_OP	358:10	358:10	10	=
LEAF_NODE	358:10	358:10	11	=
RVAL	358:11	358:19	10	( uint16 ) m
LEAF_NODE	358:11	358:11	11	(
TYPE_NAME	358:12	358:12	11	uint16
LEAF_NODE	358:12	358:12	12	uint16
LEAF_NODE	358:18	358:18	11	)
FIELD	358:19	358:19	11	m
LEAF_NODE	358:19	358:19	12	m
LEAF_NODE	358:20	358:20	8	;
LEAF_NODE	359:4	359:4	7	return
LEAF_NODE	359:10	359:10	7	(
LEAF_NODE	359:11	359:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	359:32	359:32	7	)
LEAF_NODE	359:33	359:33	7	;
LEAF_NODE	360:3	360:3	6	}
LABEL	361:2	361:18	6	case TIFF_SLONG8 :
LEAF_NODE	361:2	361:2	7	case
LEAF_NODE	361:7	361:7	7	TIFF_SLONG8
LEAF_NODE	361:18	361:18	7	:
LEAF_NODE	362:3	362:3	6	{
STATEMENTS	363:4	371:33	6	
SIMPLE_DECL	363:4	363:11	7	int64 m ;
VAR_DECL	363:4	363:10	8	int64 m
TYPE	363:4	363:4	9	int64
TYPE_NAME	363:4	363:4	10	int64
LEAF_NODE	363:4	363:4	11	int64
NAME	363:10	363:10	9	m
LEAF_NODE	363:10	363:10	10	m
LEAF_NODE	363:11	363:11	8	;
EXPR_STATEMENT	364:4	364:54	7	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m ) ;
EXPR	364:4	364:4	8	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
ASSIGN	364:4	364:8	9	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
LVAL	364:4	364:4	10	err
FIELD	364:4	364:4	11	err
LEAF_NODE	364:4	364:4	12	err
ASSIGN_OP	364:7	364:7	10	=
LEAF_NODE	364:7	364:7	11	=
RVAL	364:8	364:8	10	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
FUNCTION_CALL	364:8	364:53	11	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
CALLEE	364:8	364:8	12	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	364:8	364:8	13	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	364:37	364:37	12	(
ARGUMENT	364:38	364:38	12	tif
FIELD	364:38	364:38	13	tif
LEAF_NODE	364:38	364:38	14	tif
LEAF_NODE	364:41	364:41	12	,
ARGUMENT	364:42	364:42	12	direntry
FIELD	364:42	364:42	13	direntry
LEAF_NODE	364:42	364:42	14	direntry
LEAF_NODE	364:50	364:50	12	,
ARGUMENT	364:51	364:51	12	& m
UNARY_EXPR	364:51	364:52	13	& m
UNARY_OPERATOR	364:51	364:51	14	&
LEAF_NODE	364:51	364:51	15	&
FIELD	364:52	364:52	14	m
LEAF_NODE	364:52	364:52	15	m
LEAF_NODE	364:53	364:53	12	)
LEAF_NODE	364:54	364:54	8	;
SELECTION	365:4	366:5	7	
KEYWORD	365:4	365:4	8	if
LEAF_NODE	365:4	365:4	9	if
LEAF_NODE	365:7	365:7	8	(
CONDITION	365:8	365:8	8	err != TIFFReadDirEntryErrOk
EXPR	365:8	365:13	9	err != TIFFReadDirEntryErrOk
FIELD	365:8	365:8	10	err
LEAF_NODE	365:8	365:8	11	err
EQ_OPERATOR	365:11	365:11	10	!=
LEAF_NODE	365:11	365:11	11	!=
FIELD	365:13	365:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	365:13	365:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	365:34	365:34	8	)
STATEMENTS	366:5	366:5	8	
LEAF_NODE	366:5	366:5	9	return
LEAF_NODE	366:11	366:11	7	(
LEAF_NODE	366:12	366:12	7	err
LEAF_NODE	366:15	366:15	7	)
LEAF_NODE	366:16	366:16	7	;
EXPR_STATEMENT	367:4	367:48	7	err = TIFFReadDirEntryCheckRangeShortSlong8 ( m ) ;
EXPR	367:4	367:4	8	err = TIFFReadDirEntryCheckRangeShortSlong8 ( m )
ASSIGN	367:4	367:8	9	err = TIFFReadDirEntryCheckRangeShortSlong8 ( m )
LVAL	367:4	367:4	10	err
FIELD	367:4	367:4	11	err
LEAF_NODE	367:4	367:4	12	err
ASSIGN_OP	367:7	367:7	10	=
LEAF_NODE	367:7	367:7	11	=
RVAL	367:8	367:8	10	TIFFReadDirEntryCheckRangeShortSlong8 ( m )
FUNCTION_CALL	367:8	367:47	11	TIFFReadDirEntryCheckRangeShortSlong8 ( m )
CALLEE	367:8	367:8	12	TIFFReadDirEntryCheckRangeShortSlong8
LEAF_NODE	367:8	367:8	13	TIFFReadDirEntryCheckRangeShortSlong8
LEAF_NODE	367:45	367:45	12	(
ARGUMENT	367:46	367:46	12	m
FIELD	367:46	367:46	13	m
LEAF_NODE	367:46	367:46	14	m
LEAF_NODE	367:47	367:47	12	)
LEAF_NODE	367:48	367:48	8	;
SELECTION	368:4	369:5	7	
KEYWORD	368:4	368:4	8	if
LEAF_NODE	368:4	368:4	9	if
LEAF_NODE	368:7	368:7	8	(
CONDITION	368:8	368:8	8	err != TIFFReadDirEntryErrOk
EXPR	368:8	368:13	9	err != TIFFReadDirEntryErrOk
FIELD	368:8	368:8	10	err
LEAF_NODE	368:8	368:8	11	err
EQ_OPERATOR	368:11	368:11	10	!=
LEAF_NODE	368:11	368:11	11	!=
FIELD	368:13	368:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	368:13	368:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	368:34	368:34	8	)
STATEMENTS	369:5	369:5	8	
LEAF_NODE	369:5	369:5	9	return
LEAF_NODE	369:11	369:11	7	(
LEAF_NODE	369:12	369:12	7	err
LEAF_NODE	369:15	369:15	7	)
LEAF_NODE	369:16	369:16	7	;
EXPR_STATEMENT	370:4	370:20	7	* value = ( uint16 ) m ;
EXPR	370:4	370:4	8	* value = ( uint16 ) m
ASSIGN	370:4	370:11	9	* value = ( uint16 ) m
LVAL	370:4	370:4	10	* value
UNARY_EXPR	370:4	370:5	11	* value
UNARY_OPERATOR	370:4	370:4	12	*
LEAF_NODE	370:4	370:4	13	*
FIELD	370:5	370:5	12	value
LEAF_NODE	370:5	370:5	13	value
ASSIGN_OP	370:10	370:10	10	=
LEAF_NODE	370:10	370:10	11	=
RVAL	370:11	370:19	10	( uint16 ) m
LEAF_NODE	370:11	370:11	11	(
TYPE_NAME	370:12	370:12	11	uint16
LEAF_NODE	370:12	370:12	12	uint16
LEAF_NODE	370:18	370:18	11	)
FIELD	370:19	370:19	11	m
LEAF_NODE	370:19	370:19	12	m
LEAF_NODE	370:20	370:20	8	;
LEAF_NODE	371:4	371:4	7	return
LEAF_NODE	371:10	371:10	7	(
LEAF_NODE	371:11	371:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	371:32	371:32	7	)
LEAF_NODE	371:33	371:33	7	;
LEAF_NODE	372:3	372:3	6	}
LABEL	373:2	373:9	6	default :
LEAF_NODE	373:2	373:2	7	default
LEAF_NODE	373:9	373:9	7	:
LEAF_NODE	374:3	374:3	6	return
LEAF_NODE	374:9	374:9	6	(
LEAF_NODE	374:10	374:10	6	TIFFReadDirEntryErrType
LEAF_NODE	374:33	374:33	6	)
LEAF_NODE	374:34	374:34	6	;
LEAF_NODE	375:1	375:1	5	}
LEAF_NODE	376:0	376:0	2	}
FUNCTION_DEF	378:0	459:0	1	
RETURN_TYPE	378:0	378:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	378:0	378:0	3	static
TYPE_NAME	378:7	378:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	378:7	378:7	4	enum
LEAF_NODE	378:12	378:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	378:32	378:32	2	TIFFReadDirEntryLong
LEAF_NODE	378:32	378:32	3	TIFFReadDirEntryLong
PARAMETER_LIST	378:52	378:101	2	( TIFF * tif , TIFFDirEntry * direntry , uint32 * value )
LEAF_NODE	378:52	378:52	3	(
PARAMETER_DECL	378:53	378:59	3	TIFF * tif
TYPE	378:53	378:57	4	TIFF *
TYPE_NAME	378:53	378:53	5	TIFF
LEAF_NODE	378:53	378:53	6	TIFF
POINTER	378:57	378:57	5	*
LEAF_NODE	378:57	378:57	6	*
NAME	378:59	378:59	4	tif
LEAF_NODE	378:59	378:59	5	tif
LEAF_NODE	378:62	378:62	3	,
PARAMETER_DECL	378:64	378:78	3	TIFFDirEntry * direntry
TYPE	378:64	378:76	4	TIFFDirEntry *
TYPE_NAME	378:64	378:64	5	TIFFDirEntry
LEAF_NODE	378:64	378:64	6	TIFFDirEntry
POINTER	378:76	378:76	5	*
LEAF_NODE	378:76	378:76	6	*
NAME	378:78	378:78	4	direntry
LEAF_NODE	378:78	378:78	5	direntry
LEAF_NODE	378:86	378:86	3	,
PARAMETER_DECL	378:88	378:96	3	uint32 * value
TYPE	378:88	378:94	4	uint32 *
TYPE_NAME	378:88	378:88	5	uint32
LEAF_NODE	378:88	378:88	6	uint32
POINTER	378:94	378:94	5	*
LEAF_NODE	378:94	378:94	6	*
NAME	378:96	378:96	4	value
LEAF_NODE	378:96	378:96	5	value
LEAF_NODE	378:101	378:101	3	)
LEAF_NODE	379:0	379:0	2	{
STATEMENTS	380:1	383:1	2	
SIMPLE_DECL	380:1	380:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	380:1	380:26	4	enum TIFFReadDirEntryErr err
TYPE	380:1	380:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	380:1	380:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	380:1	380:1	7	enum
LEAF_NODE	380:6	380:6	7	TIFFReadDirEntryErr
NAME	380:26	380:26	5	err
LEAF_NODE	380:26	380:26	6	err
LEAF_NODE	380:29	380:29	4	;
SELECTION	381:1	382:2	3	
KEYWORD	381:1	381:1	4	if
LEAF_NODE	381:1	381:1	5	if
LEAF_NODE	381:4	381:4	4	(
CONDITION	381:5	381:5	4	direntry -> tdir_count != 1
EXPR	381:5	381:27	5	direntry -> tdir_count != 1
FIELD	381:5	381:15	6	direntry -> tdir_count
LEAF_NODE	381:5	381:5	7	direntry
LEAF_NODE	381:13	381:13	7	->
LEAF_NODE	381:15	381:15	7	tdir_count
EQ_OPERATOR	381:25	381:25	6	!=
LEAF_NODE	381:25	381:25	7	!=
FIELD	381:27	381:27	6	1
LEAF_NODE	381:27	381:27	7	1
LEAF_NODE	381:28	381:28	4	)
STATEMENTS	382:2	382:2	4	
LEAF_NODE	382:2	382:2	5	return
LEAF_NODE	382:8	382:8	3	(
LEAF_NODE	382:9	382:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	382:33	382:33	3	)
LEAF_NODE	382:34	382:34	3	;
SELECTION	383:1	384:1	3	
KEYWORD	383:1	383:1	4	switch
LEAF_NODE	383:1	383:1	5	switch
LEAF_NODE	383:8	383:8	4	(
CONDITION	383:9	383:9	4	direntry -> tdir_type
EXPR	383:9	383:9	5	direntry -> tdir_type
FIELD	383:9	383:19	6	direntry -> tdir_type
LEAF_NODE	383:9	383:9	7	direntry
LEAF_NODE	383:17	383:17	7	->
LEAF_NODE	383:19	383:19	7	tdir_type
LEAF_NODE	383:28	383:28	4	)
STATEMENTS	384:1	458:1	4	
LEAF_NODE	384:1	384:1	5	{
STATEMENTS	385:2	457:34	5	
LABEL	385:2	385:16	6	case TIFF_BYTE :
LEAF_NODE	385:2	385:2	7	case
LEAF_NODE	385:7	385:7	7	TIFF_BYTE
LEAF_NODE	385:16	385:16	7	:
LEAF_NODE	386:3	386:3	6	{
STATEMENTS	387:4	390:33	6	
SIMPLE_DECL	387:4	387:11	7	uint8 m ;
VAR_DECL	387:4	387:10	8	uint8 m
TYPE	387:4	387:4	9	uint8
TYPE_NAME	387:4	387:4	10	uint8
LEAF_NODE	387:4	387:4	11	uint8
NAME	387:10	387:10	9	m
LEAF_NODE	387:10	387:10	10	m
LEAF_NODE	387:11	387:11	8	;
EXPR_STATEMENT	388:4	388:48	7	TIFFReadDirEntryCheckedByte ( tif , direntry , & m ) ;
EXPR	388:4	388:4	8	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
FUNCTION_CALL	388:4	388:47	9	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
CALLEE	388:4	388:4	10	TIFFReadDirEntryCheckedByte
LEAF_NODE	388:4	388:4	11	TIFFReadDirEntryCheckedByte
LEAF_NODE	388:31	388:31	10	(
ARGUMENT	388:32	388:32	10	tif
FIELD	388:32	388:32	11	tif
LEAF_NODE	388:32	388:32	12	tif
LEAF_NODE	388:35	388:35	10	,
ARGUMENT	388:36	388:36	10	direntry
FIELD	388:36	388:36	11	direntry
LEAF_NODE	388:36	388:36	12	direntry
LEAF_NODE	388:44	388:44	10	,
ARGUMENT	388:45	388:45	10	& m
UNARY_EXPR	388:45	388:46	11	& m
UNARY_OPERATOR	388:45	388:45	12	&
LEAF_NODE	388:45	388:45	13	&
FIELD	388:46	388:46	12	m
LEAF_NODE	388:46	388:46	13	m
LEAF_NODE	388:47	388:47	10	)
LEAF_NODE	388:48	388:48	8	;
EXPR_STATEMENT	389:4	389:20	7	* value = ( uint32 ) m ;
EXPR	389:4	389:4	8	* value = ( uint32 ) m
ASSIGN	389:4	389:11	9	* value = ( uint32 ) m
LVAL	389:4	389:4	10	* value
UNARY_EXPR	389:4	389:5	11	* value
UNARY_OPERATOR	389:4	389:4	12	*
LEAF_NODE	389:4	389:4	13	*
FIELD	389:5	389:5	12	value
LEAF_NODE	389:5	389:5	13	value
ASSIGN_OP	389:10	389:10	10	=
LEAF_NODE	389:10	389:10	11	=
RVAL	389:11	389:19	10	( uint32 ) m
LEAF_NODE	389:11	389:11	11	(
TYPE_NAME	389:12	389:12	11	uint32
LEAF_NODE	389:12	389:12	12	uint32
LEAF_NODE	389:18	389:18	11	)
FIELD	389:19	389:19	11	m
LEAF_NODE	389:19	389:19	12	m
LEAF_NODE	389:20	389:20	8	;
LEAF_NODE	390:4	390:4	7	return
LEAF_NODE	390:10	390:10	7	(
LEAF_NODE	390:11	390:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	390:32	390:32	7	)
LEAF_NODE	390:33	390:33	7	;
LEAF_NODE	391:3	391:3	6	}
LABEL	392:2	392:17	6	case TIFF_SBYTE :
LEAF_NODE	392:2	392:2	7	case
LEAF_NODE	392:7	392:7	7	TIFF_SBYTE
LEAF_NODE	392:17	392:17	7	:
LEAF_NODE	393:3	393:3	6	{
STATEMENTS	394:4	400:33	6	
SIMPLE_DECL	394:4	394:10	7	int8 m ;
VAR_DECL	394:4	394:9	8	int8 m
TYPE	394:4	394:4	9	int8
TYPE_NAME	394:4	394:4	10	int8
LEAF_NODE	394:4	394:4	11	int8
NAME	394:9	394:9	9	m
LEAF_NODE	394:9	394:9	10	m
LEAF_NODE	394:10	394:10	8	;
EXPR_STATEMENT	395:4	395:49	7	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m ) ;
EXPR	395:4	395:4	8	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
FUNCTION_CALL	395:4	395:48	9	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
CALLEE	395:4	395:4	10	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	395:4	395:4	11	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	395:32	395:32	10	(
ARGUMENT	395:33	395:33	10	tif
FIELD	395:33	395:33	11	tif
LEAF_NODE	395:33	395:33	12	tif
LEAF_NODE	395:36	395:36	10	,
ARGUMENT	395:37	395:37	10	direntry
FIELD	395:37	395:37	11	direntry
LEAF_NODE	395:37	395:37	12	direntry
LEAF_NODE	395:45	395:45	10	,
ARGUMENT	395:46	395:46	10	& m
UNARY_EXPR	395:46	395:47	11	& m
UNARY_OPERATOR	395:46	395:46	12	&
LEAF_NODE	395:46	395:46	13	&
FIELD	395:47	395:47	12	m
LEAF_NODE	395:47	395:47	13	m
LEAF_NODE	395:48	395:48	10	)
LEAF_NODE	395:49	395:49	8	;
EXPR_STATEMENT	396:4	396:46	7	err = TIFFReadDirEntryCheckRangeLongSbyte ( m ) ;
EXPR	396:4	396:4	8	err = TIFFReadDirEntryCheckRangeLongSbyte ( m )
ASSIGN	396:4	396:8	9	err = TIFFReadDirEntryCheckRangeLongSbyte ( m )
LVAL	396:4	396:4	10	err
FIELD	396:4	396:4	11	err
LEAF_NODE	396:4	396:4	12	err
ASSIGN_OP	396:7	396:7	10	=
LEAF_NODE	396:7	396:7	11	=
RVAL	396:8	396:8	10	TIFFReadDirEntryCheckRangeLongSbyte ( m )
FUNCTION_CALL	396:8	396:45	11	TIFFReadDirEntryCheckRangeLongSbyte ( m )
CALLEE	396:8	396:8	12	TIFFReadDirEntryCheckRangeLongSbyte
LEAF_NODE	396:8	396:8	13	TIFFReadDirEntryCheckRangeLongSbyte
LEAF_NODE	396:43	396:43	12	(
ARGUMENT	396:44	396:44	12	m
FIELD	396:44	396:44	13	m
LEAF_NODE	396:44	396:44	14	m
LEAF_NODE	396:45	396:45	12	)
LEAF_NODE	396:46	396:46	8	;
SELECTION	397:4	398:5	7	
KEYWORD	397:4	397:4	8	if
LEAF_NODE	397:4	397:4	9	if
LEAF_NODE	397:7	397:7	8	(
CONDITION	397:8	397:8	8	err != TIFFReadDirEntryErrOk
EXPR	397:8	397:13	9	err != TIFFReadDirEntryErrOk
FIELD	397:8	397:8	10	err
LEAF_NODE	397:8	397:8	11	err
EQ_OPERATOR	397:11	397:11	10	!=
LEAF_NODE	397:11	397:11	11	!=
FIELD	397:13	397:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	397:13	397:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	397:34	397:34	8	)
STATEMENTS	398:5	398:5	8	
LEAF_NODE	398:5	398:5	9	return
LEAF_NODE	398:11	398:11	7	(
LEAF_NODE	398:12	398:12	7	err
LEAF_NODE	398:15	398:15	7	)
LEAF_NODE	398:16	398:16	7	;
EXPR_STATEMENT	399:4	399:20	7	* value = ( uint32 ) m ;
EXPR	399:4	399:4	8	* value = ( uint32 ) m
ASSIGN	399:4	399:11	9	* value = ( uint32 ) m
LVAL	399:4	399:4	10	* value
UNARY_EXPR	399:4	399:5	11	* value
UNARY_OPERATOR	399:4	399:4	12	*
LEAF_NODE	399:4	399:4	13	*
FIELD	399:5	399:5	12	value
LEAF_NODE	399:5	399:5	13	value
ASSIGN_OP	399:10	399:10	10	=
LEAF_NODE	399:10	399:10	11	=
RVAL	399:11	399:19	10	( uint32 ) m
LEAF_NODE	399:11	399:11	11	(
TYPE_NAME	399:12	399:12	11	uint32
LEAF_NODE	399:12	399:12	12	uint32
LEAF_NODE	399:18	399:18	11	)
FIELD	399:19	399:19	11	m
LEAF_NODE	399:19	399:19	12	m
LEAF_NODE	399:20	399:20	8	;
LEAF_NODE	400:4	400:4	7	return
LEAF_NODE	400:10	400:10	7	(
LEAF_NODE	400:11	400:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	400:32	400:32	7	)
LEAF_NODE	400:33	400:33	7	;
LEAF_NODE	401:3	401:3	6	}
LABEL	402:2	402:17	6	case TIFF_SHORT :
LEAF_NODE	402:2	402:2	7	case
LEAF_NODE	402:7	402:7	7	TIFF_SHORT
LEAF_NODE	402:17	402:17	7	:
LEAF_NODE	403:3	403:3	6	{
STATEMENTS	404:4	407:33	6	
SIMPLE_DECL	404:4	404:12	7	uint16 m ;
VAR_DECL	404:4	404:11	8	uint16 m
TYPE	404:4	404:4	9	uint16
TYPE_NAME	404:4	404:4	10	uint16
LEAF_NODE	404:4	404:4	11	uint16
NAME	404:11	404:11	9	m
LEAF_NODE	404:11	404:11	10	m
LEAF_NODE	404:12	404:12	8	;
EXPR_STATEMENT	405:4	405:49	7	TIFFReadDirEntryCheckedShort ( tif , direntry , & m ) ;
EXPR	405:4	405:4	8	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
FUNCTION_CALL	405:4	405:48	9	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
CALLEE	405:4	405:4	10	TIFFReadDirEntryCheckedShort
LEAF_NODE	405:4	405:4	11	TIFFReadDirEntryCheckedShort
LEAF_NODE	405:32	405:32	10	(
ARGUMENT	405:33	405:33	10	tif
FIELD	405:33	405:33	11	tif
LEAF_NODE	405:33	405:33	12	tif
LEAF_NODE	405:36	405:36	10	,
ARGUMENT	405:37	405:37	10	direntry
FIELD	405:37	405:37	11	direntry
LEAF_NODE	405:37	405:37	12	direntry
LEAF_NODE	405:45	405:45	10	,
ARGUMENT	405:46	405:46	10	& m
UNARY_EXPR	405:46	405:47	11	& m
UNARY_OPERATOR	405:46	405:46	12	&
LEAF_NODE	405:46	405:46	13	&
FIELD	405:47	405:47	12	m
LEAF_NODE	405:47	405:47	13	m
LEAF_NODE	405:48	405:48	10	)
LEAF_NODE	405:49	405:49	8	;
EXPR_STATEMENT	406:4	406:20	7	* value = ( uint32 ) m ;
EXPR	406:4	406:4	8	* value = ( uint32 ) m
ASSIGN	406:4	406:11	9	* value = ( uint32 ) m
LVAL	406:4	406:4	10	* value
UNARY_EXPR	406:4	406:5	11	* value
UNARY_OPERATOR	406:4	406:4	12	*
LEAF_NODE	406:4	406:4	13	*
FIELD	406:5	406:5	12	value
LEAF_NODE	406:5	406:5	13	value
ASSIGN_OP	406:10	406:10	10	=
LEAF_NODE	406:10	406:10	11	=
RVAL	406:11	406:19	10	( uint32 ) m
LEAF_NODE	406:11	406:11	11	(
TYPE_NAME	406:12	406:12	11	uint32
LEAF_NODE	406:12	406:12	12	uint32
LEAF_NODE	406:18	406:18	11	)
FIELD	406:19	406:19	11	m
LEAF_NODE	406:19	406:19	12	m
LEAF_NODE	406:20	406:20	8	;
LEAF_NODE	407:4	407:4	7	return
LEAF_NODE	407:10	407:10	7	(
LEAF_NODE	407:11	407:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	407:32	407:32	7	)
LEAF_NODE	407:33	407:33	7	;
LEAF_NODE	408:3	408:3	6	}
LABEL	409:2	409:18	6	case TIFF_SSHORT :
LEAF_NODE	409:2	409:2	7	case
LEAF_NODE	409:7	409:7	7	TIFF_SSHORT
LEAF_NODE	409:18	409:18	7	:
LEAF_NODE	410:3	410:3	6	{
STATEMENTS	411:4	417:33	6	
SIMPLE_DECL	411:4	411:11	7	int16 m ;
VAR_DECL	411:4	411:10	8	int16 m
TYPE	411:4	411:4	9	int16
TYPE_NAME	411:4	411:4	10	int16
LEAF_NODE	411:4	411:4	11	int16
NAME	411:10	411:10	9	m
LEAF_NODE	411:10	411:10	10	m
LEAF_NODE	411:11	411:11	8	;
EXPR_STATEMENT	412:4	412:50	7	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m ) ;
EXPR	412:4	412:4	8	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
FUNCTION_CALL	412:4	412:49	9	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
CALLEE	412:4	412:4	10	TIFFReadDirEntryCheckedSshort
LEAF_NODE	412:4	412:4	11	TIFFReadDirEntryCheckedSshort
LEAF_NODE	412:33	412:33	10	(
ARGUMENT	412:34	412:34	10	tif
FIELD	412:34	412:34	11	tif
LEAF_NODE	412:34	412:34	12	tif
LEAF_NODE	412:37	412:37	10	,
ARGUMENT	412:38	412:38	10	direntry
FIELD	412:38	412:38	11	direntry
LEAF_NODE	412:38	412:38	12	direntry
LEAF_NODE	412:46	412:46	10	,
ARGUMENT	412:47	412:47	10	& m
UNARY_EXPR	412:47	412:48	11	& m
UNARY_OPERATOR	412:47	412:47	12	&
LEAF_NODE	412:47	412:47	13	&
FIELD	412:48	412:48	12	m
LEAF_NODE	412:48	412:48	13	m
LEAF_NODE	412:49	412:49	10	)
LEAF_NODE	412:50	412:50	8	;
EXPR_STATEMENT	413:4	413:47	7	err = TIFFReadDirEntryCheckRangeLongSshort ( m ) ;
EXPR	413:4	413:4	8	err = TIFFReadDirEntryCheckRangeLongSshort ( m )
ASSIGN	413:4	413:8	9	err = TIFFReadDirEntryCheckRangeLongSshort ( m )
LVAL	413:4	413:4	10	err
FIELD	413:4	413:4	11	err
LEAF_NODE	413:4	413:4	12	err
ASSIGN_OP	413:7	413:7	10	=
LEAF_NODE	413:7	413:7	11	=
RVAL	413:8	413:8	10	TIFFReadDirEntryCheckRangeLongSshort ( m )
FUNCTION_CALL	413:8	413:46	11	TIFFReadDirEntryCheckRangeLongSshort ( m )
CALLEE	413:8	413:8	12	TIFFReadDirEntryCheckRangeLongSshort
LEAF_NODE	413:8	413:8	13	TIFFReadDirEntryCheckRangeLongSshort
LEAF_NODE	413:44	413:44	12	(
ARGUMENT	413:45	413:45	12	m
FIELD	413:45	413:45	13	m
LEAF_NODE	413:45	413:45	14	m
LEAF_NODE	413:46	413:46	12	)
LEAF_NODE	413:47	413:47	8	;
SELECTION	414:4	415:5	7	
KEYWORD	414:4	414:4	8	if
LEAF_NODE	414:4	414:4	9	if
LEAF_NODE	414:7	414:7	8	(
CONDITION	414:8	414:8	8	err != TIFFReadDirEntryErrOk
EXPR	414:8	414:13	9	err != TIFFReadDirEntryErrOk
FIELD	414:8	414:8	10	err
LEAF_NODE	414:8	414:8	11	err
EQ_OPERATOR	414:11	414:11	10	!=
LEAF_NODE	414:11	414:11	11	!=
FIELD	414:13	414:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	414:13	414:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	414:34	414:34	8	)
STATEMENTS	415:5	415:5	8	
LEAF_NODE	415:5	415:5	9	return
LEAF_NODE	415:11	415:11	7	(
LEAF_NODE	415:12	415:12	7	err
LEAF_NODE	415:15	415:15	7	)
LEAF_NODE	415:16	415:16	7	;
EXPR_STATEMENT	416:4	416:20	7	* value = ( uint32 ) m ;
EXPR	416:4	416:4	8	* value = ( uint32 ) m
ASSIGN	416:4	416:11	9	* value = ( uint32 ) m
LVAL	416:4	416:4	10	* value
UNARY_EXPR	416:4	416:5	11	* value
UNARY_OPERATOR	416:4	416:4	12	*
LEAF_NODE	416:4	416:4	13	*
FIELD	416:5	416:5	12	value
LEAF_NODE	416:5	416:5	13	value
ASSIGN_OP	416:10	416:10	10	=
LEAF_NODE	416:10	416:10	11	=
RVAL	416:11	416:19	10	( uint32 ) m
LEAF_NODE	416:11	416:11	11	(
TYPE_NAME	416:12	416:12	11	uint32
LEAF_NODE	416:12	416:12	12	uint32
LEAF_NODE	416:18	416:18	11	)
FIELD	416:19	416:19	11	m
LEAF_NODE	416:19	416:19	12	m
LEAF_NODE	416:20	416:20	8	;
LEAF_NODE	417:4	417:4	7	return
LEAF_NODE	417:10	417:10	7	(
LEAF_NODE	417:11	417:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	417:32	417:32	7	)
LEAF_NODE	417:33	417:33	7	;
LEAF_NODE	418:3	418:3	6	}
LABEL	419:2	419:16	6	case TIFF_LONG :
LEAF_NODE	419:2	419:2	7	case
LEAF_NODE	419:7	419:7	7	TIFF_LONG
LEAF_NODE	419:16	419:16	7	:
EXPR_STATEMENT	420:3	420:50	6	TIFFReadDirEntryCheckedLong ( tif , direntry , value ) ;
EXPR	420:3	420:3	7	TIFFReadDirEntryCheckedLong ( tif , direntry , value )
FUNCTION_CALL	420:3	420:49	8	TIFFReadDirEntryCheckedLong ( tif , direntry , value )
CALLEE	420:3	420:3	9	TIFFReadDirEntryCheckedLong
LEAF_NODE	420:3	420:3	10	TIFFReadDirEntryCheckedLong
LEAF_NODE	420:30	420:30	9	(
ARGUMENT	420:31	420:31	9	tif
FIELD	420:31	420:31	10	tif
LEAF_NODE	420:31	420:31	11	tif
LEAF_NODE	420:34	420:34	9	,
ARGUMENT	420:35	420:35	9	direntry
FIELD	420:35	420:35	10	direntry
LEAF_NODE	420:35	420:35	11	direntry
LEAF_NODE	420:43	420:43	9	,
ARGUMENT	420:44	420:44	9	value
FIELD	420:44	420:44	10	value
LEAF_NODE	420:44	420:44	11	value
LEAF_NODE	420:49	420:49	9	)
LEAF_NODE	420:50	420:50	7	;
LEAF_NODE	421:3	421:3	6	return
LEAF_NODE	421:9	421:9	6	(
LEAF_NODE	421:10	421:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	421:31	421:31	6	)
LEAF_NODE	421:32	421:32	6	;
LABEL	422:2	422:17	6	case TIFF_SLONG :
LEAF_NODE	422:2	422:2	7	case
LEAF_NODE	422:7	422:7	7	TIFF_SLONG
LEAF_NODE	422:17	422:17	7	:
LEAF_NODE	423:3	423:3	6	{
STATEMENTS	424:4	430:33	6	
SIMPLE_DECL	424:4	424:11	7	int32 m ;
VAR_DECL	424:4	424:10	8	int32 m
TYPE	424:4	424:4	9	int32
TYPE_NAME	424:4	424:4	10	int32
LEAF_NODE	424:4	424:4	11	int32
NAME	424:10	424:10	9	m
LEAF_NODE	424:10	424:10	10	m
LEAF_NODE	424:11	424:11	8	;
EXPR_STATEMENT	425:4	425:49	7	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m ) ;
EXPR	425:4	425:4	8	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
FUNCTION_CALL	425:4	425:48	9	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
CALLEE	425:4	425:4	10	TIFFReadDirEntryCheckedSlong
LEAF_NODE	425:4	425:4	11	TIFFReadDirEntryCheckedSlong
LEAF_NODE	425:32	425:32	10	(
ARGUMENT	425:33	425:33	10	tif
FIELD	425:33	425:33	11	tif
LEAF_NODE	425:33	425:33	12	tif
LEAF_NODE	425:36	425:36	10	,
ARGUMENT	425:37	425:37	10	direntry
FIELD	425:37	425:37	11	direntry
LEAF_NODE	425:37	425:37	12	direntry
LEAF_NODE	425:45	425:45	10	,
ARGUMENT	425:46	425:46	10	& m
UNARY_EXPR	425:46	425:47	11	& m
UNARY_OPERATOR	425:46	425:46	12	&
LEAF_NODE	425:46	425:46	13	&
FIELD	425:47	425:47	12	m
LEAF_NODE	425:47	425:47	13	m
LEAF_NODE	425:48	425:48	10	)
LEAF_NODE	425:49	425:49	8	;
EXPR_STATEMENT	426:4	426:46	7	err = TIFFReadDirEntryCheckRangeLongSlong ( m ) ;
EXPR	426:4	426:4	8	err = TIFFReadDirEntryCheckRangeLongSlong ( m )
ASSIGN	426:4	426:8	9	err = TIFFReadDirEntryCheckRangeLongSlong ( m )
LVAL	426:4	426:4	10	err
FIELD	426:4	426:4	11	err
LEAF_NODE	426:4	426:4	12	err
ASSIGN_OP	426:7	426:7	10	=
LEAF_NODE	426:7	426:7	11	=
RVAL	426:8	426:8	10	TIFFReadDirEntryCheckRangeLongSlong ( m )
FUNCTION_CALL	426:8	426:45	11	TIFFReadDirEntryCheckRangeLongSlong ( m )
CALLEE	426:8	426:8	12	TIFFReadDirEntryCheckRangeLongSlong
LEAF_NODE	426:8	426:8	13	TIFFReadDirEntryCheckRangeLongSlong
LEAF_NODE	426:43	426:43	12	(
ARGUMENT	426:44	426:44	12	m
FIELD	426:44	426:44	13	m
LEAF_NODE	426:44	426:44	14	m
LEAF_NODE	426:45	426:45	12	)
LEAF_NODE	426:46	426:46	8	;
SELECTION	427:4	428:5	7	
KEYWORD	427:4	427:4	8	if
LEAF_NODE	427:4	427:4	9	if
LEAF_NODE	427:7	427:7	8	(
CONDITION	427:8	427:8	8	err != TIFFReadDirEntryErrOk
EXPR	427:8	427:13	9	err != TIFFReadDirEntryErrOk
FIELD	427:8	427:8	10	err
LEAF_NODE	427:8	427:8	11	err
EQ_OPERATOR	427:11	427:11	10	!=
LEAF_NODE	427:11	427:11	11	!=
FIELD	427:13	427:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	427:13	427:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	427:34	427:34	8	)
STATEMENTS	428:5	428:5	8	
LEAF_NODE	428:5	428:5	9	return
LEAF_NODE	428:11	428:11	7	(
LEAF_NODE	428:12	428:12	7	err
LEAF_NODE	428:15	428:15	7	)
LEAF_NODE	428:16	428:16	7	;
EXPR_STATEMENT	429:4	429:20	7	* value = ( uint32 ) m ;
EXPR	429:4	429:4	8	* value = ( uint32 ) m
ASSIGN	429:4	429:11	9	* value = ( uint32 ) m
LVAL	429:4	429:4	10	* value
UNARY_EXPR	429:4	429:5	11	* value
UNARY_OPERATOR	429:4	429:4	12	*
LEAF_NODE	429:4	429:4	13	*
FIELD	429:5	429:5	12	value
LEAF_NODE	429:5	429:5	13	value
ASSIGN_OP	429:10	429:10	10	=
LEAF_NODE	429:10	429:10	11	=
RVAL	429:11	429:19	10	( uint32 ) m
LEAF_NODE	429:11	429:11	11	(
TYPE_NAME	429:12	429:12	11	uint32
LEAF_NODE	429:12	429:12	12	uint32
LEAF_NODE	429:18	429:18	11	)
FIELD	429:19	429:19	11	m
LEAF_NODE	429:19	429:19	12	m
LEAF_NODE	429:20	429:20	8	;
LEAF_NODE	430:4	430:4	7	return
LEAF_NODE	430:10	430:10	7	(
LEAF_NODE	430:11	430:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	430:32	430:32	7	)
LEAF_NODE	430:33	430:33	7	;
LEAF_NODE	431:3	431:3	6	}
LABEL	432:2	432:17	6	case TIFF_LONG8 :
LEAF_NODE	432:2	432:2	7	case
LEAF_NODE	432:7	432:7	7	TIFF_LONG8
LEAF_NODE	432:17	432:17	7	:
LEAF_NODE	433:3	433:3	6	{
STATEMENTS	434:4	442:33	6	
SIMPLE_DECL	434:4	434:12	7	uint64 m ;
VAR_DECL	434:4	434:11	8	uint64 m
TYPE	434:4	434:4	9	uint64
TYPE_NAME	434:4	434:4	10	uint64
LEAF_NODE	434:4	434:4	11	uint64
NAME	434:11	434:11	9	m
LEAF_NODE	434:11	434:11	10	m
LEAF_NODE	434:12	434:12	8	;
EXPR_STATEMENT	435:4	435:53	7	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m ) ;
EXPR	435:4	435:4	8	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
ASSIGN	435:4	435:8	9	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
LVAL	435:4	435:4	10	err
FIELD	435:4	435:4	11	err
LEAF_NODE	435:4	435:4	12	err
ASSIGN_OP	435:7	435:7	10	=
LEAF_NODE	435:7	435:7	11	=
RVAL	435:8	435:8	10	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
FUNCTION_CALL	435:8	435:52	11	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
CALLEE	435:8	435:8	12	TIFFReadDirEntryCheckedLong8
LEAF_NODE	435:8	435:8	13	TIFFReadDirEntryCheckedLong8
LEAF_NODE	435:36	435:36	12	(
ARGUMENT	435:37	435:37	12	tif
FIELD	435:37	435:37	13	tif
LEAF_NODE	435:37	435:37	14	tif
LEAF_NODE	435:40	435:40	12	,
ARGUMENT	435:41	435:41	12	direntry
FIELD	435:41	435:41	13	direntry
LEAF_NODE	435:41	435:41	14	direntry
LEAF_NODE	435:49	435:49	12	,
ARGUMENT	435:50	435:50	12	& m
UNARY_EXPR	435:50	435:51	13	& m
UNARY_OPERATOR	435:50	435:50	14	&
LEAF_NODE	435:50	435:50	15	&
FIELD	435:51	435:51	14	m
LEAF_NODE	435:51	435:51	15	m
LEAF_NODE	435:52	435:52	12	)
LEAF_NODE	435:53	435:53	8	;
SELECTION	436:4	437:5	7	
KEYWORD	436:4	436:4	8	if
LEAF_NODE	436:4	436:4	9	if
LEAF_NODE	436:7	436:7	8	(
CONDITION	436:8	436:8	8	err != TIFFReadDirEntryErrOk
EXPR	436:8	436:13	9	err != TIFFReadDirEntryErrOk
FIELD	436:8	436:8	10	err
LEAF_NODE	436:8	436:8	11	err
EQ_OPERATOR	436:11	436:11	10	!=
LEAF_NODE	436:11	436:11	11	!=
FIELD	436:13	436:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	436:13	436:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	436:34	436:34	8	)
STATEMENTS	437:5	437:5	8	
LEAF_NODE	437:5	437:5	9	return
LEAF_NODE	437:11	437:11	7	(
LEAF_NODE	437:12	437:12	7	err
LEAF_NODE	437:15	437:15	7	)
LEAF_NODE	437:16	437:16	7	;
EXPR_STATEMENT	438:4	438:46	7	err = TIFFReadDirEntryCheckRangeLongLong8 ( m ) ;
EXPR	438:4	438:4	8	err = TIFFReadDirEntryCheckRangeLongLong8 ( m )
ASSIGN	438:4	438:8	9	err = TIFFReadDirEntryCheckRangeLongLong8 ( m )
LVAL	438:4	438:4	10	err
FIELD	438:4	438:4	11	err
LEAF_NODE	438:4	438:4	12	err
ASSIGN_OP	438:7	438:7	10	=
LEAF_NODE	438:7	438:7	11	=
RVAL	438:8	438:8	10	TIFFReadDirEntryCheckRangeLongLong8 ( m )
FUNCTION_CALL	438:8	438:45	11	TIFFReadDirEntryCheckRangeLongLong8 ( m )
CALLEE	438:8	438:8	12	TIFFReadDirEntryCheckRangeLongLong8
LEAF_NODE	438:8	438:8	13	TIFFReadDirEntryCheckRangeLongLong8
LEAF_NODE	438:43	438:43	12	(
ARGUMENT	438:44	438:44	12	m
FIELD	438:44	438:44	13	m
LEAF_NODE	438:44	438:44	14	m
LEAF_NODE	438:45	438:45	12	)
LEAF_NODE	438:46	438:46	8	;
SELECTION	439:4	440:5	7	
KEYWORD	439:4	439:4	8	if
LEAF_NODE	439:4	439:4	9	if
LEAF_NODE	439:7	439:7	8	(
CONDITION	439:8	439:8	8	err != TIFFReadDirEntryErrOk
EXPR	439:8	439:13	9	err != TIFFReadDirEntryErrOk
FIELD	439:8	439:8	10	err
LEAF_NODE	439:8	439:8	11	err
EQ_OPERATOR	439:11	439:11	10	!=
LEAF_NODE	439:11	439:11	11	!=
FIELD	439:13	439:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	439:13	439:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	439:34	439:34	8	)
STATEMENTS	440:5	440:5	8	
LEAF_NODE	440:5	440:5	9	return
LEAF_NODE	440:11	440:11	7	(
LEAF_NODE	440:12	440:12	7	err
LEAF_NODE	440:15	440:15	7	)
LEAF_NODE	440:16	440:16	7	;
EXPR_STATEMENT	441:4	441:20	7	* value = ( uint32 ) m ;
EXPR	441:4	441:4	8	* value = ( uint32 ) m
ASSIGN	441:4	441:11	9	* value = ( uint32 ) m
LVAL	441:4	441:4	10	* value
UNARY_EXPR	441:4	441:5	11	* value
UNARY_OPERATOR	441:4	441:4	12	*
LEAF_NODE	441:4	441:4	13	*
FIELD	441:5	441:5	12	value
LEAF_NODE	441:5	441:5	13	value
ASSIGN_OP	441:10	441:10	10	=
LEAF_NODE	441:10	441:10	11	=
RVAL	441:11	441:19	10	( uint32 ) m
LEAF_NODE	441:11	441:11	11	(
TYPE_NAME	441:12	441:12	11	uint32
LEAF_NODE	441:12	441:12	12	uint32
LEAF_NODE	441:18	441:18	11	)
FIELD	441:19	441:19	11	m
LEAF_NODE	441:19	441:19	12	m
LEAF_NODE	441:20	441:20	8	;
LEAF_NODE	442:4	442:4	7	return
LEAF_NODE	442:10	442:10	7	(
LEAF_NODE	442:11	442:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	442:32	442:32	7	)
LEAF_NODE	442:33	442:33	7	;
LEAF_NODE	443:3	443:3	6	}
LABEL	444:2	444:18	6	case TIFF_SLONG8 :
LEAF_NODE	444:2	444:2	7	case
LEAF_NODE	444:7	444:7	7	TIFF_SLONG8
LEAF_NODE	444:18	444:18	7	:
LEAF_NODE	445:3	445:3	6	{
STATEMENTS	446:4	454:33	6	
SIMPLE_DECL	446:4	446:11	7	int64 m ;
VAR_DECL	446:4	446:10	8	int64 m
TYPE	446:4	446:4	9	int64
TYPE_NAME	446:4	446:4	10	int64
LEAF_NODE	446:4	446:4	11	int64
NAME	446:10	446:10	9	m
LEAF_NODE	446:10	446:10	10	m
LEAF_NODE	446:11	446:11	8	;
EXPR_STATEMENT	447:4	447:54	7	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m ) ;
EXPR	447:4	447:4	8	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
ASSIGN	447:4	447:8	9	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
LVAL	447:4	447:4	10	err
FIELD	447:4	447:4	11	err
LEAF_NODE	447:4	447:4	12	err
ASSIGN_OP	447:7	447:7	10	=
LEAF_NODE	447:7	447:7	11	=
RVAL	447:8	447:8	10	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
FUNCTION_CALL	447:8	447:53	11	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
CALLEE	447:8	447:8	12	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	447:8	447:8	13	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	447:37	447:37	12	(
ARGUMENT	447:38	447:38	12	tif
FIELD	447:38	447:38	13	tif
LEAF_NODE	447:38	447:38	14	tif
LEAF_NODE	447:41	447:41	12	,
ARGUMENT	447:42	447:42	12	direntry
FIELD	447:42	447:42	13	direntry
LEAF_NODE	447:42	447:42	14	direntry
LEAF_NODE	447:50	447:50	12	,
ARGUMENT	447:51	447:51	12	& m
UNARY_EXPR	447:51	447:52	13	& m
UNARY_OPERATOR	447:51	447:51	14	&
LEAF_NODE	447:51	447:51	15	&
FIELD	447:52	447:52	14	m
LEAF_NODE	447:52	447:52	15	m
LEAF_NODE	447:53	447:53	12	)
LEAF_NODE	447:54	447:54	8	;
SELECTION	448:4	449:5	7	
KEYWORD	448:4	448:4	8	if
LEAF_NODE	448:4	448:4	9	if
LEAF_NODE	448:7	448:7	8	(
CONDITION	448:8	448:8	8	err != TIFFReadDirEntryErrOk
EXPR	448:8	448:13	9	err != TIFFReadDirEntryErrOk
FIELD	448:8	448:8	10	err
LEAF_NODE	448:8	448:8	11	err
EQ_OPERATOR	448:11	448:11	10	!=
LEAF_NODE	448:11	448:11	11	!=
FIELD	448:13	448:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	448:13	448:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	448:34	448:34	8	)
STATEMENTS	449:5	449:5	8	
LEAF_NODE	449:5	449:5	9	return
LEAF_NODE	449:11	449:11	7	(
LEAF_NODE	449:12	449:12	7	err
LEAF_NODE	449:15	449:15	7	)
LEAF_NODE	449:16	449:16	7	;
EXPR_STATEMENT	450:4	450:47	7	err = TIFFReadDirEntryCheckRangeLongSlong8 ( m ) ;
EXPR	450:4	450:4	8	err = TIFFReadDirEntryCheckRangeLongSlong8 ( m )
ASSIGN	450:4	450:8	9	err = TIFFReadDirEntryCheckRangeLongSlong8 ( m )
LVAL	450:4	450:4	10	err
FIELD	450:4	450:4	11	err
LEAF_NODE	450:4	450:4	12	err
ASSIGN_OP	450:7	450:7	10	=
LEAF_NODE	450:7	450:7	11	=
RVAL	450:8	450:8	10	TIFFReadDirEntryCheckRangeLongSlong8 ( m )
FUNCTION_CALL	450:8	450:46	11	TIFFReadDirEntryCheckRangeLongSlong8 ( m )
CALLEE	450:8	450:8	12	TIFFReadDirEntryCheckRangeLongSlong8
LEAF_NODE	450:8	450:8	13	TIFFReadDirEntryCheckRangeLongSlong8
LEAF_NODE	450:44	450:44	12	(
ARGUMENT	450:45	450:45	12	m
FIELD	450:45	450:45	13	m
LEAF_NODE	450:45	450:45	14	m
LEAF_NODE	450:46	450:46	12	)
LEAF_NODE	450:47	450:47	8	;
SELECTION	451:4	452:5	7	
KEYWORD	451:4	451:4	8	if
LEAF_NODE	451:4	451:4	9	if
LEAF_NODE	451:7	451:7	8	(
CONDITION	451:8	451:8	8	err != TIFFReadDirEntryErrOk
EXPR	451:8	451:13	9	err != TIFFReadDirEntryErrOk
FIELD	451:8	451:8	10	err
LEAF_NODE	451:8	451:8	11	err
EQ_OPERATOR	451:11	451:11	10	!=
LEAF_NODE	451:11	451:11	11	!=
FIELD	451:13	451:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	451:13	451:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	451:34	451:34	8	)
STATEMENTS	452:5	452:5	8	
LEAF_NODE	452:5	452:5	9	return
LEAF_NODE	452:11	452:11	7	(
LEAF_NODE	452:12	452:12	7	err
LEAF_NODE	452:15	452:15	7	)
LEAF_NODE	452:16	452:16	7	;
EXPR_STATEMENT	453:4	453:20	7	* value = ( uint32 ) m ;
EXPR	453:4	453:4	8	* value = ( uint32 ) m
ASSIGN	453:4	453:11	9	* value = ( uint32 ) m
LVAL	453:4	453:4	10	* value
UNARY_EXPR	453:4	453:5	11	* value
UNARY_OPERATOR	453:4	453:4	12	*
LEAF_NODE	453:4	453:4	13	*
FIELD	453:5	453:5	12	value
LEAF_NODE	453:5	453:5	13	value
ASSIGN_OP	453:10	453:10	10	=
LEAF_NODE	453:10	453:10	11	=
RVAL	453:11	453:19	10	( uint32 ) m
LEAF_NODE	453:11	453:11	11	(
TYPE_NAME	453:12	453:12	11	uint32
LEAF_NODE	453:12	453:12	12	uint32
LEAF_NODE	453:18	453:18	11	)
FIELD	453:19	453:19	11	m
LEAF_NODE	453:19	453:19	12	m
LEAF_NODE	453:20	453:20	8	;
LEAF_NODE	454:4	454:4	7	return
LEAF_NODE	454:10	454:10	7	(
LEAF_NODE	454:11	454:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	454:32	454:32	7	)
LEAF_NODE	454:33	454:33	7	;
LEAF_NODE	455:3	455:3	6	}
LABEL	456:2	456:9	6	default :
LEAF_NODE	456:2	456:2	7	default
LEAF_NODE	456:9	456:9	7	:
LEAF_NODE	457:3	457:3	6	return
LEAF_NODE	457:9	457:9	6	(
LEAF_NODE	457:10	457:10	6	TIFFReadDirEntryErrType
LEAF_NODE	457:33	457:33	6	)
LEAF_NODE	457:34	457:34	6	;
LEAF_NODE	458:1	458:1	5	}
LEAF_NODE	459:0	459:0	2	}
FUNCTION_DEF	461:0	537:0	1	
RETURN_TYPE	461:0	461:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	461:0	461:0	3	static
TYPE_NAME	461:7	461:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	461:7	461:7	4	enum
LEAF_NODE	461:12	461:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	461:32	461:32	2	TIFFReadDirEntryLong8
LEAF_NODE	461:32	461:32	3	TIFFReadDirEntryLong8
PARAMETER_LIST	461:53	461:102	2	( TIFF * tif , TIFFDirEntry * direntry , uint64 * value )
LEAF_NODE	461:53	461:53	3	(
PARAMETER_DECL	461:54	461:60	3	TIFF * tif
TYPE	461:54	461:58	4	TIFF *
TYPE_NAME	461:54	461:54	5	TIFF
LEAF_NODE	461:54	461:54	6	TIFF
POINTER	461:58	461:58	5	*
LEAF_NODE	461:58	461:58	6	*
NAME	461:60	461:60	4	tif
LEAF_NODE	461:60	461:60	5	tif
LEAF_NODE	461:63	461:63	3	,
PARAMETER_DECL	461:65	461:79	3	TIFFDirEntry * direntry
TYPE	461:65	461:77	4	TIFFDirEntry *
TYPE_NAME	461:65	461:65	5	TIFFDirEntry
LEAF_NODE	461:65	461:65	6	TIFFDirEntry
POINTER	461:77	461:77	5	*
LEAF_NODE	461:77	461:77	6	*
NAME	461:79	461:79	4	direntry
LEAF_NODE	461:79	461:79	5	direntry
LEAF_NODE	461:87	461:87	3	,
PARAMETER_DECL	461:89	461:97	3	uint64 * value
TYPE	461:89	461:95	4	uint64 *
TYPE_NAME	461:89	461:89	5	uint64
LEAF_NODE	461:89	461:89	6	uint64
POINTER	461:95	461:95	5	*
LEAF_NODE	461:95	461:95	6	*
NAME	461:97	461:97	4	value
LEAF_NODE	461:97	461:97	5	value
LEAF_NODE	461:102	461:102	3	)
LEAF_NODE	462:0	462:0	2	{
STATEMENTS	463:1	466:1	2	
SIMPLE_DECL	463:1	463:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	463:1	463:26	4	enum TIFFReadDirEntryErr err
TYPE	463:1	463:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	463:1	463:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	463:1	463:1	7	enum
LEAF_NODE	463:6	463:6	7	TIFFReadDirEntryErr
NAME	463:26	463:26	5	err
LEAF_NODE	463:26	463:26	6	err
LEAF_NODE	463:29	463:29	4	;
SELECTION	464:1	465:2	3	
KEYWORD	464:1	464:1	4	if
LEAF_NODE	464:1	464:1	5	if
LEAF_NODE	464:4	464:4	4	(
CONDITION	464:5	464:5	4	direntry -> tdir_count != 1
EXPR	464:5	464:27	5	direntry -> tdir_count != 1
FIELD	464:5	464:15	6	direntry -> tdir_count
LEAF_NODE	464:5	464:5	7	direntry
LEAF_NODE	464:13	464:13	7	->
LEAF_NODE	464:15	464:15	7	tdir_count
EQ_OPERATOR	464:25	464:25	6	!=
LEAF_NODE	464:25	464:25	7	!=
FIELD	464:27	464:27	6	1
LEAF_NODE	464:27	464:27	7	1
LEAF_NODE	464:28	464:28	4	)
STATEMENTS	465:2	465:2	4	
LEAF_NODE	465:2	465:2	5	return
LEAF_NODE	465:8	465:8	3	(
LEAF_NODE	465:9	465:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	465:33	465:33	3	)
LEAF_NODE	465:34	465:34	3	;
SELECTION	466:1	467:1	3	
KEYWORD	466:1	466:1	4	switch
LEAF_NODE	466:1	466:1	5	switch
LEAF_NODE	466:8	466:8	4	(
CONDITION	466:9	466:9	4	direntry -> tdir_type
EXPR	466:9	466:9	5	direntry -> tdir_type
FIELD	466:9	466:19	6	direntry -> tdir_type
LEAF_NODE	466:9	466:9	7	direntry
LEAF_NODE	466:17	466:17	7	->
LEAF_NODE	466:19	466:19	7	tdir_type
LEAF_NODE	466:28	466:28	4	)
STATEMENTS	467:1	536:1	4	
LEAF_NODE	467:1	467:1	5	{
STATEMENTS	468:2	535:34	5	
LABEL	468:2	468:16	6	case TIFF_BYTE :
LEAF_NODE	468:2	468:2	7	case
LEAF_NODE	468:7	468:7	7	TIFF_BYTE
LEAF_NODE	468:16	468:16	7	:
LEAF_NODE	469:3	469:3	6	{
STATEMENTS	470:4	473:33	6	
SIMPLE_DECL	470:4	470:11	7	uint8 m ;
VAR_DECL	470:4	470:10	8	uint8 m
TYPE	470:4	470:4	9	uint8
TYPE_NAME	470:4	470:4	10	uint8
LEAF_NODE	470:4	470:4	11	uint8
NAME	470:10	470:10	9	m
LEAF_NODE	470:10	470:10	10	m
LEAF_NODE	470:11	470:11	8	;
EXPR_STATEMENT	471:4	471:48	7	TIFFReadDirEntryCheckedByte ( tif , direntry , & m ) ;
EXPR	471:4	471:4	8	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
FUNCTION_CALL	471:4	471:47	9	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
CALLEE	471:4	471:4	10	TIFFReadDirEntryCheckedByte
LEAF_NODE	471:4	471:4	11	TIFFReadDirEntryCheckedByte
LEAF_NODE	471:31	471:31	10	(
ARGUMENT	471:32	471:32	10	tif
FIELD	471:32	471:32	11	tif
LEAF_NODE	471:32	471:32	12	tif
LEAF_NODE	471:35	471:35	10	,
ARGUMENT	471:36	471:36	10	direntry
FIELD	471:36	471:36	11	direntry
LEAF_NODE	471:36	471:36	12	direntry
LEAF_NODE	471:44	471:44	10	,
ARGUMENT	471:45	471:45	10	& m
UNARY_EXPR	471:45	471:46	11	& m
UNARY_OPERATOR	471:45	471:45	12	&
LEAF_NODE	471:45	471:45	13	&
FIELD	471:46	471:46	12	m
LEAF_NODE	471:46	471:46	13	m
LEAF_NODE	471:47	471:47	10	)
LEAF_NODE	471:48	471:48	8	;
EXPR_STATEMENT	472:4	472:20	7	* value = ( uint64 ) m ;
EXPR	472:4	472:4	8	* value = ( uint64 ) m
ASSIGN	472:4	472:11	9	* value = ( uint64 ) m
LVAL	472:4	472:4	10	* value
UNARY_EXPR	472:4	472:5	11	* value
UNARY_OPERATOR	472:4	472:4	12	*
LEAF_NODE	472:4	472:4	13	*
FIELD	472:5	472:5	12	value
LEAF_NODE	472:5	472:5	13	value
ASSIGN_OP	472:10	472:10	10	=
LEAF_NODE	472:10	472:10	11	=
RVAL	472:11	472:19	10	( uint64 ) m
LEAF_NODE	472:11	472:11	11	(
TYPE_NAME	472:12	472:12	11	uint64
LEAF_NODE	472:12	472:12	12	uint64
LEAF_NODE	472:18	472:18	11	)
FIELD	472:19	472:19	11	m
LEAF_NODE	472:19	472:19	12	m
LEAF_NODE	472:20	472:20	8	;
LEAF_NODE	473:4	473:4	7	return
LEAF_NODE	473:10	473:10	7	(
LEAF_NODE	473:11	473:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	473:32	473:32	7	)
LEAF_NODE	473:33	473:33	7	;
LEAF_NODE	474:3	474:3	6	}
LABEL	475:2	475:17	6	case TIFF_SBYTE :
LEAF_NODE	475:2	475:2	7	case
LEAF_NODE	475:7	475:7	7	TIFF_SBYTE
LEAF_NODE	475:17	475:17	7	:
LEAF_NODE	476:3	476:3	6	{
STATEMENTS	477:4	483:33	6	
SIMPLE_DECL	477:4	477:10	7	int8 m ;
VAR_DECL	477:4	477:9	8	int8 m
TYPE	477:4	477:4	9	int8
TYPE_NAME	477:4	477:4	10	int8
LEAF_NODE	477:4	477:4	11	int8
NAME	477:9	477:9	9	m
LEAF_NODE	477:9	477:9	10	m
LEAF_NODE	477:10	477:10	8	;
EXPR_STATEMENT	478:4	478:49	7	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m ) ;
EXPR	478:4	478:4	8	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
FUNCTION_CALL	478:4	478:48	9	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
CALLEE	478:4	478:4	10	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	478:4	478:4	11	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	478:32	478:32	10	(
ARGUMENT	478:33	478:33	10	tif
FIELD	478:33	478:33	11	tif
LEAF_NODE	478:33	478:33	12	tif
LEAF_NODE	478:36	478:36	10	,
ARGUMENT	478:37	478:37	10	direntry
FIELD	478:37	478:37	11	direntry
LEAF_NODE	478:37	478:37	12	direntry
LEAF_NODE	478:45	478:45	10	,
ARGUMENT	478:46	478:46	10	& m
UNARY_EXPR	478:46	478:47	11	& m
UNARY_OPERATOR	478:46	478:46	12	&
LEAF_NODE	478:46	478:46	13	&
FIELD	478:47	478:47	12	m
LEAF_NODE	478:47	478:47	13	m
LEAF_NODE	478:48	478:48	10	)
LEAF_NODE	478:49	478:49	8	;
EXPR_STATEMENT	479:4	479:47	7	err = TIFFReadDirEntryCheckRangeLong8Sbyte ( m ) ;
EXPR	479:4	479:4	8	err = TIFFReadDirEntryCheckRangeLong8Sbyte ( m )
ASSIGN	479:4	479:8	9	err = TIFFReadDirEntryCheckRangeLong8Sbyte ( m )
LVAL	479:4	479:4	10	err
FIELD	479:4	479:4	11	err
LEAF_NODE	479:4	479:4	12	err
ASSIGN_OP	479:7	479:7	10	=
LEAF_NODE	479:7	479:7	11	=
RVAL	479:8	479:8	10	TIFFReadDirEntryCheckRangeLong8Sbyte ( m )
FUNCTION_CALL	479:8	479:46	11	TIFFReadDirEntryCheckRangeLong8Sbyte ( m )
CALLEE	479:8	479:8	12	TIFFReadDirEntryCheckRangeLong8Sbyte
LEAF_NODE	479:8	479:8	13	TIFFReadDirEntryCheckRangeLong8Sbyte
LEAF_NODE	479:44	479:44	12	(
ARGUMENT	479:45	479:45	12	m
FIELD	479:45	479:45	13	m
LEAF_NODE	479:45	479:45	14	m
LEAF_NODE	479:46	479:46	12	)
LEAF_NODE	479:47	479:47	8	;
SELECTION	480:4	481:5	7	
KEYWORD	480:4	480:4	8	if
LEAF_NODE	480:4	480:4	9	if
LEAF_NODE	480:7	480:7	8	(
CONDITION	480:8	480:8	8	err != TIFFReadDirEntryErrOk
EXPR	480:8	480:13	9	err != TIFFReadDirEntryErrOk
FIELD	480:8	480:8	10	err
LEAF_NODE	480:8	480:8	11	err
EQ_OPERATOR	480:11	480:11	10	!=
LEAF_NODE	480:11	480:11	11	!=
FIELD	480:13	480:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	480:13	480:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	480:34	480:34	8	)
STATEMENTS	481:5	481:5	8	
LEAF_NODE	481:5	481:5	9	return
LEAF_NODE	481:11	481:11	7	(
LEAF_NODE	481:12	481:12	7	err
LEAF_NODE	481:15	481:15	7	)
LEAF_NODE	481:16	481:16	7	;
EXPR_STATEMENT	482:4	482:20	7	* value = ( uint64 ) m ;
EXPR	482:4	482:4	8	* value = ( uint64 ) m
ASSIGN	482:4	482:11	9	* value = ( uint64 ) m
LVAL	482:4	482:4	10	* value
UNARY_EXPR	482:4	482:5	11	* value
UNARY_OPERATOR	482:4	482:4	12	*
LEAF_NODE	482:4	482:4	13	*
FIELD	482:5	482:5	12	value
LEAF_NODE	482:5	482:5	13	value
ASSIGN_OP	482:10	482:10	10	=
LEAF_NODE	482:10	482:10	11	=
RVAL	482:11	482:19	10	( uint64 ) m
LEAF_NODE	482:11	482:11	11	(
TYPE_NAME	482:12	482:12	11	uint64
LEAF_NODE	482:12	482:12	12	uint64
LEAF_NODE	482:18	482:18	11	)
FIELD	482:19	482:19	11	m
LEAF_NODE	482:19	482:19	12	m
LEAF_NODE	482:20	482:20	8	;
LEAF_NODE	483:4	483:4	7	return
LEAF_NODE	483:10	483:10	7	(
LEAF_NODE	483:11	483:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	483:32	483:32	7	)
LEAF_NODE	483:33	483:33	7	;
LEAF_NODE	484:3	484:3	6	}
LABEL	485:2	485:17	6	case TIFF_SHORT :
LEAF_NODE	485:2	485:2	7	case
LEAF_NODE	485:7	485:7	7	TIFF_SHORT
LEAF_NODE	485:17	485:17	7	:
LEAF_NODE	486:3	486:3	6	{
STATEMENTS	487:4	490:33	6	
SIMPLE_DECL	487:4	487:12	7	uint16 m ;
VAR_DECL	487:4	487:11	8	uint16 m
TYPE	487:4	487:4	9	uint16
TYPE_NAME	487:4	487:4	10	uint16
LEAF_NODE	487:4	487:4	11	uint16
NAME	487:11	487:11	9	m
LEAF_NODE	487:11	487:11	10	m
LEAF_NODE	487:12	487:12	8	;
EXPR_STATEMENT	488:4	488:49	7	TIFFReadDirEntryCheckedShort ( tif , direntry , & m ) ;
EXPR	488:4	488:4	8	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
FUNCTION_CALL	488:4	488:48	9	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
CALLEE	488:4	488:4	10	TIFFReadDirEntryCheckedShort
LEAF_NODE	488:4	488:4	11	TIFFReadDirEntryCheckedShort
LEAF_NODE	488:32	488:32	10	(
ARGUMENT	488:33	488:33	10	tif
FIELD	488:33	488:33	11	tif
LEAF_NODE	488:33	488:33	12	tif
LEAF_NODE	488:36	488:36	10	,
ARGUMENT	488:37	488:37	10	direntry
FIELD	488:37	488:37	11	direntry
LEAF_NODE	488:37	488:37	12	direntry
LEAF_NODE	488:45	488:45	10	,
ARGUMENT	488:46	488:46	10	& m
UNARY_EXPR	488:46	488:47	11	& m
UNARY_OPERATOR	488:46	488:46	12	&
LEAF_NODE	488:46	488:46	13	&
FIELD	488:47	488:47	12	m
LEAF_NODE	488:47	488:47	13	m
LEAF_NODE	488:48	488:48	10	)
LEAF_NODE	488:49	488:49	8	;
EXPR_STATEMENT	489:4	489:20	7	* value = ( uint64 ) m ;
EXPR	489:4	489:4	8	* value = ( uint64 ) m
ASSIGN	489:4	489:11	9	* value = ( uint64 ) m
LVAL	489:4	489:4	10	* value
UNARY_EXPR	489:4	489:5	11	* value
UNARY_OPERATOR	489:4	489:4	12	*
LEAF_NODE	489:4	489:4	13	*
FIELD	489:5	489:5	12	value
LEAF_NODE	489:5	489:5	13	value
ASSIGN_OP	489:10	489:10	10	=
LEAF_NODE	489:10	489:10	11	=
RVAL	489:11	489:19	10	( uint64 ) m
LEAF_NODE	489:11	489:11	11	(
TYPE_NAME	489:12	489:12	11	uint64
LEAF_NODE	489:12	489:12	12	uint64
LEAF_NODE	489:18	489:18	11	)
FIELD	489:19	489:19	11	m
LEAF_NODE	489:19	489:19	12	m
LEAF_NODE	489:20	489:20	8	;
LEAF_NODE	490:4	490:4	7	return
LEAF_NODE	490:10	490:10	7	(
LEAF_NODE	490:11	490:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	490:32	490:32	7	)
LEAF_NODE	490:33	490:33	7	;
LEAF_NODE	491:3	491:3	6	}
LABEL	492:2	492:18	6	case TIFF_SSHORT :
LEAF_NODE	492:2	492:2	7	case
LEAF_NODE	492:7	492:7	7	TIFF_SSHORT
LEAF_NODE	492:18	492:18	7	:
LEAF_NODE	493:3	493:3	6	{
STATEMENTS	494:4	500:33	6	
SIMPLE_DECL	494:4	494:11	7	int16 m ;
VAR_DECL	494:4	494:10	8	int16 m
TYPE	494:4	494:4	9	int16
TYPE_NAME	494:4	494:4	10	int16
LEAF_NODE	494:4	494:4	11	int16
NAME	494:10	494:10	9	m
LEAF_NODE	494:10	494:10	10	m
LEAF_NODE	494:11	494:11	8	;
EXPR_STATEMENT	495:4	495:50	7	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m ) ;
EXPR	495:4	495:4	8	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
FUNCTION_CALL	495:4	495:49	9	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
CALLEE	495:4	495:4	10	TIFFReadDirEntryCheckedSshort
LEAF_NODE	495:4	495:4	11	TIFFReadDirEntryCheckedSshort
LEAF_NODE	495:33	495:33	10	(
ARGUMENT	495:34	495:34	10	tif
FIELD	495:34	495:34	11	tif
LEAF_NODE	495:34	495:34	12	tif
LEAF_NODE	495:37	495:37	10	,
ARGUMENT	495:38	495:38	10	direntry
FIELD	495:38	495:38	11	direntry
LEAF_NODE	495:38	495:38	12	direntry
LEAF_NODE	495:46	495:46	10	,
ARGUMENT	495:47	495:47	10	& m
UNARY_EXPR	495:47	495:48	11	& m
UNARY_OPERATOR	495:47	495:47	12	&
LEAF_NODE	495:47	495:47	13	&
FIELD	495:48	495:48	12	m
LEAF_NODE	495:48	495:48	13	m
LEAF_NODE	495:49	495:49	10	)
LEAF_NODE	495:50	495:50	8	;
EXPR_STATEMENT	496:4	496:48	7	err = TIFFReadDirEntryCheckRangeLong8Sshort ( m ) ;
EXPR	496:4	496:4	8	err = TIFFReadDirEntryCheckRangeLong8Sshort ( m )
ASSIGN	496:4	496:8	9	err = TIFFReadDirEntryCheckRangeLong8Sshort ( m )
LVAL	496:4	496:4	10	err
FIELD	496:4	496:4	11	err
LEAF_NODE	496:4	496:4	12	err
ASSIGN_OP	496:7	496:7	10	=
LEAF_NODE	496:7	496:7	11	=
RVAL	496:8	496:8	10	TIFFReadDirEntryCheckRangeLong8Sshort ( m )
FUNCTION_CALL	496:8	496:47	11	TIFFReadDirEntryCheckRangeLong8Sshort ( m )
CALLEE	496:8	496:8	12	TIFFReadDirEntryCheckRangeLong8Sshort
LEAF_NODE	496:8	496:8	13	TIFFReadDirEntryCheckRangeLong8Sshort
LEAF_NODE	496:45	496:45	12	(
ARGUMENT	496:46	496:46	12	m
FIELD	496:46	496:46	13	m
LEAF_NODE	496:46	496:46	14	m
LEAF_NODE	496:47	496:47	12	)
LEAF_NODE	496:48	496:48	8	;
SELECTION	497:4	498:5	7	
KEYWORD	497:4	497:4	8	if
LEAF_NODE	497:4	497:4	9	if
LEAF_NODE	497:7	497:7	8	(
CONDITION	497:8	497:8	8	err != TIFFReadDirEntryErrOk
EXPR	497:8	497:13	9	err != TIFFReadDirEntryErrOk
FIELD	497:8	497:8	10	err
LEAF_NODE	497:8	497:8	11	err
EQ_OPERATOR	497:11	497:11	10	!=
LEAF_NODE	497:11	497:11	11	!=
FIELD	497:13	497:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	497:13	497:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	497:34	497:34	8	)
STATEMENTS	498:5	498:5	8	
LEAF_NODE	498:5	498:5	9	return
LEAF_NODE	498:11	498:11	7	(
LEAF_NODE	498:12	498:12	7	err
LEAF_NODE	498:15	498:15	7	)
LEAF_NODE	498:16	498:16	7	;
EXPR_STATEMENT	499:4	499:20	7	* value = ( uint64 ) m ;
EXPR	499:4	499:4	8	* value = ( uint64 ) m
ASSIGN	499:4	499:11	9	* value = ( uint64 ) m
LVAL	499:4	499:4	10	* value
UNARY_EXPR	499:4	499:5	11	* value
UNARY_OPERATOR	499:4	499:4	12	*
LEAF_NODE	499:4	499:4	13	*
FIELD	499:5	499:5	12	value
LEAF_NODE	499:5	499:5	13	value
ASSIGN_OP	499:10	499:10	10	=
LEAF_NODE	499:10	499:10	11	=
RVAL	499:11	499:19	10	( uint64 ) m
LEAF_NODE	499:11	499:11	11	(
TYPE_NAME	499:12	499:12	11	uint64
LEAF_NODE	499:12	499:12	12	uint64
LEAF_NODE	499:18	499:18	11	)
FIELD	499:19	499:19	11	m
LEAF_NODE	499:19	499:19	12	m
LEAF_NODE	499:20	499:20	8	;
LEAF_NODE	500:4	500:4	7	return
LEAF_NODE	500:10	500:10	7	(
LEAF_NODE	500:11	500:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	500:32	500:32	7	)
LEAF_NODE	500:33	500:33	7	;
LEAF_NODE	501:3	501:3	6	}
LABEL	502:2	502:16	6	case TIFF_LONG :
LEAF_NODE	502:2	502:2	7	case
LEAF_NODE	502:7	502:7	7	TIFF_LONG
LEAF_NODE	502:16	502:16	7	:
LEAF_NODE	503:3	503:3	6	{
STATEMENTS	504:4	507:33	6	
SIMPLE_DECL	504:4	504:12	7	uint32 m ;
VAR_DECL	504:4	504:11	8	uint32 m
TYPE	504:4	504:4	9	uint32
TYPE_NAME	504:4	504:4	10	uint32
LEAF_NODE	504:4	504:4	11	uint32
NAME	504:11	504:11	9	m
LEAF_NODE	504:11	504:11	10	m
LEAF_NODE	504:12	504:12	8	;
EXPR_STATEMENT	505:4	505:48	7	TIFFReadDirEntryCheckedLong ( tif , direntry , & m ) ;
EXPR	505:4	505:4	8	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
FUNCTION_CALL	505:4	505:47	9	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
CALLEE	505:4	505:4	10	TIFFReadDirEntryCheckedLong
LEAF_NODE	505:4	505:4	11	TIFFReadDirEntryCheckedLong
LEAF_NODE	505:31	505:31	10	(
ARGUMENT	505:32	505:32	10	tif
FIELD	505:32	505:32	11	tif
LEAF_NODE	505:32	505:32	12	tif
LEAF_NODE	505:35	505:35	10	,
ARGUMENT	505:36	505:36	10	direntry
FIELD	505:36	505:36	11	direntry
LEAF_NODE	505:36	505:36	12	direntry
LEAF_NODE	505:44	505:44	10	,
ARGUMENT	505:45	505:45	10	& m
UNARY_EXPR	505:45	505:46	11	& m
UNARY_OPERATOR	505:45	505:45	12	&
LEAF_NODE	505:45	505:45	13	&
FIELD	505:46	505:46	12	m
LEAF_NODE	505:46	505:46	13	m
LEAF_NODE	505:47	505:47	10	)
LEAF_NODE	505:48	505:48	8	;
EXPR_STATEMENT	506:4	506:20	7	* value = ( uint64 ) m ;
EXPR	506:4	506:4	8	* value = ( uint64 ) m
ASSIGN	506:4	506:11	9	* value = ( uint64 ) m
LVAL	506:4	506:4	10	* value
UNARY_EXPR	506:4	506:5	11	* value
UNARY_OPERATOR	506:4	506:4	12	*
LEAF_NODE	506:4	506:4	13	*
FIELD	506:5	506:5	12	value
LEAF_NODE	506:5	506:5	13	value
ASSIGN_OP	506:10	506:10	10	=
LEAF_NODE	506:10	506:10	11	=
RVAL	506:11	506:19	10	( uint64 ) m
LEAF_NODE	506:11	506:11	11	(
TYPE_NAME	506:12	506:12	11	uint64
LEAF_NODE	506:12	506:12	12	uint64
LEAF_NODE	506:18	506:18	11	)
FIELD	506:19	506:19	11	m
LEAF_NODE	506:19	506:19	12	m
LEAF_NODE	506:20	506:20	8	;
LEAF_NODE	507:4	507:4	7	return
LEAF_NODE	507:10	507:10	7	(
LEAF_NODE	507:11	507:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	507:32	507:32	7	)
LEAF_NODE	507:33	507:33	7	;
LEAF_NODE	508:3	508:3	6	}
LABEL	509:2	509:17	6	case TIFF_SLONG :
LEAF_NODE	509:2	509:2	7	case
LEAF_NODE	509:7	509:7	7	TIFF_SLONG
LEAF_NODE	509:17	509:17	7	:
LEAF_NODE	510:3	510:3	6	{
STATEMENTS	511:4	517:33	6	
SIMPLE_DECL	511:4	511:11	7	int32 m ;
VAR_DECL	511:4	511:10	8	int32 m
TYPE	511:4	511:4	9	int32
TYPE_NAME	511:4	511:4	10	int32
LEAF_NODE	511:4	511:4	11	int32
NAME	511:10	511:10	9	m
LEAF_NODE	511:10	511:10	10	m
LEAF_NODE	511:11	511:11	8	;
EXPR_STATEMENT	512:4	512:49	7	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m ) ;
EXPR	512:4	512:4	8	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
FUNCTION_CALL	512:4	512:48	9	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
CALLEE	512:4	512:4	10	TIFFReadDirEntryCheckedSlong
LEAF_NODE	512:4	512:4	11	TIFFReadDirEntryCheckedSlong
LEAF_NODE	512:32	512:32	10	(
ARGUMENT	512:33	512:33	10	tif
FIELD	512:33	512:33	11	tif
LEAF_NODE	512:33	512:33	12	tif
LEAF_NODE	512:36	512:36	10	,
ARGUMENT	512:37	512:37	10	direntry
FIELD	512:37	512:37	11	direntry
LEAF_NODE	512:37	512:37	12	direntry
LEAF_NODE	512:45	512:45	10	,
ARGUMENT	512:46	512:46	10	& m
UNARY_EXPR	512:46	512:47	11	& m
UNARY_OPERATOR	512:46	512:46	12	&
LEAF_NODE	512:46	512:46	13	&
FIELD	512:47	512:47	12	m
LEAF_NODE	512:47	512:47	13	m
LEAF_NODE	512:48	512:48	10	)
LEAF_NODE	512:49	512:49	8	;
EXPR_STATEMENT	513:4	513:47	7	err = TIFFReadDirEntryCheckRangeLong8Slong ( m ) ;
EXPR	513:4	513:4	8	err = TIFFReadDirEntryCheckRangeLong8Slong ( m )
ASSIGN	513:4	513:8	9	err = TIFFReadDirEntryCheckRangeLong8Slong ( m )
LVAL	513:4	513:4	10	err
FIELD	513:4	513:4	11	err
LEAF_NODE	513:4	513:4	12	err
ASSIGN_OP	513:7	513:7	10	=
LEAF_NODE	513:7	513:7	11	=
RVAL	513:8	513:8	10	TIFFReadDirEntryCheckRangeLong8Slong ( m )
FUNCTION_CALL	513:8	513:46	11	TIFFReadDirEntryCheckRangeLong8Slong ( m )
CALLEE	513:8	513:8	12	TIFFReadDirEntryCheckRangeLong8Slong
LEAF_NODE	513:8	513:8	13	TIFFReadDirEntryCheckRangeLong8Slong
LEAF_NODE	513:44	513:44	12	(
ARGUMENT	513:45	513:45	12	m
FIELD	513:45	513:45	13	m
LEAF_NODE	513:45	513:45	14	m
LEAF_NODE	513:46	513:46	12	)
LEAF_NODE	513:47	513:47	8	;
SELECTION	514:4	515:5	7	
KEYWORD	514:4	514:4	8	if
LEAF_NODE	514:4	514:4	9	if
LEAF_NODE	514:7	514:7	8	(
CONDITION	514:8	514:8	8	err != TIFFReadDirEntryErrOk
EXPR	514:8	514:13	9	err != TIFFReadDirEntryErrOk
FIELD	514:8	514:8	10	err
LEAF_NODE	514:8	514:8	11	err
EQ_OPERATOR	514:11	514:11	10	!=
LEAF_NODE	514:11	514:11	11	!=
FIELD	514:13	514:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	514:13	514:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	514:34	514:34	8	)
STATEMENTS	515:5	515:5	8	
LEAF_NODE	515:5	515:5	9	return
LEAF_NODE	515:11	515:11	7	(
LEAF_NODE	515:12	515:12	7	err
LEAF_NODE	515:15	515:15	7	)
LEAF_NODE	515:16	515:16	7	;
EXPR_STATEMENT	516:4	516:20	7	* value = ( uint64 ) m ;
EXPR	516:4	516:4	8	* value = ( uint64 ) m
ASSIGN	516:4	516:11	9	* value = ( uint64 ) m
LVAL	516:4	516:4	10	* value
UNARY_EXPR	516:4	516:5	11	* value
UNARY_OPERATOR	516:4	516:4	12	*
LEAF_NODE	516:4	516:4	13	*
FIELD	516:5	516:5	12	value
LEAF_NODE	516:5	516:5	13	value
ASSIGN_OP	516:10	516:10	10	=
LEAF_NODE	516:10	516:10	11	=
RVAL	516:11	516:19	10	( uint64 ) m
LEAF_NODE	516:11	516:11	11	(
TYPE_NAME	516:12	516:12	11	uint64
LEAF_NODE	516:12	516:12	12	uint64
LEAF_NODE	516:18	516:18	11	)
FIELD	516:19	516:19	11	m
LEAF_NODE	516:19	516:19	12	m
LEAF_NODE	516:20	516:20	8	;
LEAF_NODE	517:4	517:4	7	return
LEAF_NODE	517:10	517:10	7	(
LEAF_NODE	517:11	517:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	517:32	517:32	7	)
LEAF_NODE	517:33	517:33	7	;
LEAF_NODE	518:3	518:3	6	}
LABEL	519:2	519:17	6	case TIFF_LONG8 :
LEAF_NODE	519:2	519:2	7	case
LEAF_NODE	519:7	519:7	7	TIFF_LONG8
LEAF_NODE	519:17	519:17	7	:
EXPR_STATEMENT	520:3	520:55	6	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , value ) ;
EXPR	520:3	520:3	7	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
ASSIGN	520:3	520:7	8	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
LVAL	520:3	520:3	9	err
FIELD	520:3	520:3	10	err
LEAF_NODE	520:3	520:3	11	err
ASSIGN_OP	520:6	520:6	9	=
LEAF_NODE	520:6	520:6	10	=
RVAL	520:7	520:7	9	TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
FUNCTION_CALL	520:7	520:54	10	TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
CALLEE	520:7	520:7	11	TIFFReadDirEntryCheckedLong8
LEAF_NODE	520:7	520:7	12	TIFFReadDirEntryCheckedLong8
LEAF_NODE	520:35	520:35	11	(
ARGUMENT	520:36	520:36	11	tif
FIELD	520:36	520:36	12	tif
LEAF_NODE	520:36	520:36	13	tif
LEAF_NODE	520:39	520:39	11	,
ARGUMENT	520:40	520:40	11	direntry
FIELD	520:40	520:40	12	direntry
LEAF_NODE	520:40	520:40	13	direntry
LEAF_NODE	520:48	520:48	11	,
ARGUMENT	520:49	520:49	11	value
FIELD	520:49	520:49	12	value
LEAF_NODE	520:49	520:49	13	value
LEAF_NODE	520:54	520:54	11	)
LEAF_NODE	520:55	520:55	7	;
LEAF_NODE	521:3	521:3	6	return
LEAF_NODE	521:9	521:9	6	(
LEAF_NODE	521:10	521:10	6	err
LEAF_NODE	521:13	521:13	6	)
LEAF_NODE	521:14	521:14	6	;
LABEL	522:2	522:18	6	case TIFF_SLONG8 :
LEAF_NODE	522:2	522:2	7	case
LEAF_NODE	522:7	522:7	7	TIFF_SLONG8
LEAF_NODE	522:18	522:18	7	:
LEAF_NODE	523:3	523:3	6	{
STATEMENTS	524:4	532:33	6	
SIMPLE_DECL	524:4	524:11	7	int64 m ;
VAR_DECL	524:4	524:10	8	int64 m
TYPE	524:4	524:4	9	int64
TYPE_NAME	524:4	524:4	10	int64
LEAF_NODE	524:4	524:4	11	int64
NAME	524:10	524:10	9	m
LEAF_NODE	524:10	524:10	10	m
LEAF_NODE	524:11	524:11	8	;
EXPR_STATEMENT	525:4	525:54	7	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m ) ;
EXPR	525:4	525:4	8	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
ASSIGN	525:4	525:8	9	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
LVAL	525:4	525:4	10	err
FIELD	525:4	525:4	11	err
LEAF_NODE	525:4	525:4	12	err
ASSIGN_OP	525:7	525:7	10	=
LEAF_NODE	525:7	525:7	11	=
RVAL	525:8	525:8	10	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
FUNCTION_CALL	525:8	525:53	11	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
CALLEE	525:8	525:8	12	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	525:8	525:8	13	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	525:37	525:37	12	(
ARGUMENT	525:38	525:38	12	tif
FIELD	525:38	525:38	13	tif
LEAF_NODE	525:38	525:38	14	tif
LEAF_NODE	525:41	525:41	12	,
ARGUMENT	525:42	525:42	12	direntry
FIELD	525:42	525:42	13	direntry
LEAF_NODE	525:42	525:42	14	direntry
LEAF_NODE	525:50	525:50	12	,
ARGUMENT	525:51	525:51	12	& m
UNARY_EXPR	525:51	525:52	13	& m
UNARY_OPERATOR	525:51	525:51	14	&
LEAF_NODE	525:51	525:51	15	&
FIELD	525:52	525:52	14	m
LEAF_NODE	525:52	525:52	15	m
LEAF_NODE	525:53	525:53	12	)
LEAF_NODE	525:54	525:54	8	;
SELECTION	526:4	527:5	7	
KEYWORD	526:4	526:4	8	if
LEAF_NODE	526:4	526:4	9	if
LEAF_NODE	526:7	526:7	8	(
CONDITION	526:8	526:8	8	err != TIFFReadDirEntryErrOk
EXPR	526:8	526:13	9	err != TIFFReadDirEntryErrOk
FIELD	526:8	526:8	10	err
LEAF_NODE	526:8	526:8	11	err
EQ_OPERATOR	526:11	526:11	10	!=
LEAF_NODE	526:11	526:11	11	!=
FIELD	526:13	526:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	526:13	526:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	526:34	526:34	8	)
STATEMENTS	527:5	527:5	8	
LEAF_NODE	527:5	527:5	9	return
LEAF_NODE	527:11	527:11	7	(
LEAF_NODE	527:12	527:12	7	err
LEAF_NODE	527:15	527:15	7	)
LEAF_NODE	527:16	527:16	7	;
EXPR_STATEMENT	528:4	528:48	7	err = TIFFReadDirEntryCheckRangeLong8Slong8 ( m ) ;
EXPR	528:4	528:4	8	err = TIFFReadDirEntryCheckRangeLong8Slong8 ( m )
ASSIGN	528:4	528:8	9	err = TIFFReadDirEntryCheckRangeLong8Slong8 ( m )
LVAL	528:4	528:4	10	err
FIELD	528:4	528:4	11	err
LEAF_NODE	528:4	528:4	12	err
ASSIGN_OP	528:7	528:7	10	=
LEAF_NODE	528:7	528:7	11	=
RVAL	528:8	528:8	10	TIFFReadDirEntryCheckRangeLong8Slong8 ( m )
FUNCTION_CALL	528:8	528:47	11	TIFFReadDirEntryCheckRangeLong8Slong8 ( m )
CALLEE	528:8	528:8	12	TIFFReadDirEntryCheckRangeLong8Slong8
LEAF_NODE	528:8	528:8	13	TIFFReadDirEntryCheckRangeLong8Slong8
LEAF_NODE	528:45	528:45	12	(
ARGUMENT	528:46	528:46	12	m
FIELD	528:46	528:46	13	m
LEAF_NODE	528:46	528:46	14	m
LEAF_NODE	528:47	528:47	12	)
LEAF_NODE	528:48	528:48	8	;
SELECTION	529:4	530:5	7	
KEYWORD	529:4	529:4	8	if
LEAF_NODE	529:4	529:4	9	if
LEAF_NODE	529:7	529:7	8	(
CONDITION	529:8	529:8	8	err != TIFFReadDirEntryErrOk
EXPR	529:8	529:13	9	err != TIFFReadDirEntryErrOk
FIELD	529:8	529:8	10	err
LEAF_NODE	529:8	529:8	11	err
EQ_OPERATOR	529:11	529:11	10	!=
LEAF_NODE	529:11	529:11	11	!=
FIELD	529:13	529:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	529:13	529:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	529:34	529:34	8	)
STATEMENTS	530:5	530:5	8	
LEAF_NODE	530:5	530:5	9	return
LEAF_NODE	530:11	530:11	7	(
LEAF_NODE	530:12	530:12	7	err
LEAF_NODE	530:15	530:15	7	)
LEAF_NODE	530:16	530:16	7	;
EXPR_STATEMENT	531:4	531:20	7	* value = ( uint64 ) m ;
EXPR	531:4	531:4	8	* value = ( uint64 ) m
ASSIGN	531:4	531:11	9	* value = ( uint64 ) m
LVAL	531:4	531:4	10	* value
UNARY_EXPR	531:4	531:5	11	* value
UNARY_OPERATOR	531:4	531:4	12	*
LEAF_NODE	531:4	531:4	13	*
FIELD	531:5	531:5	12	value
LEAF_NODE	531:5	531:5	13	value
ASSIGN_OP	531:10	531:10	10	=
LEAF_NODE	531:10	531:10	11	=
RVAL	531:11	531:19	10	( uint64 ) m
LEAF_NODE	531:11	531:11	11	(
TYPE_NAME	531:12	531:12	11	uint64
LEAF_NODE	531:12	531:12	12	uint64
LEAF_NODE	531:18	531:18	11	)
FIELD	531:19	531:19	11	m
LEAF_NODE	531:19	531:19	12	m
LEAF_NODE	531:20	531:20	8	;
LEAF_NODE	532:4	532:4	7	return
LEAF_NODE	532:10	532:10	7	(
LEAF_NODE	532:11	532:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	532:32	532:32	7	)
LEAF_NODE	532:33	532:33	7	;
LEAF_NODE	533:3	533:3	6	}
LABEL	534:2	534:9	6	default :
LEAF_NODE	534:2	534:2	7	default
LEAF_NODE	534:9	534:9	7	:
LEAF_NODE	535:3	535:3	6	return
LEAF_NODE	535:9	535:9	6	(
LEAF_NODE	535:10	535:10	6	TIFFReadDirEntryErrType
LEAF_NODE	535:33	535:33	6	)
LEAF_NODE	535:34	535:34	6	;
LEAF_NODE	536:1	536:1	5	}
LEAF_NODE	537:0	537:0	2	}
FUNCTION_DEF	539:0	650:0	1	
RETURN_TYPE	539:0	539:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	539:0	539:0	3	static
TYPE_NAME	539:7	539:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	539:7	539:7	4	enum
LEAF_NODE	539:12	539:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	539:32	539:32	2	TIFFReadDirEntryFloat
LEAF_NODE	539:32	539:32	3	TIFFReadDirEntryFloat
PARAMETER_LIST	539:53	539:101	2	( TIFF * tif , TIFFDirEntry * direntry , float * value )
LEAF_NODE	539:53	539:53	3	(
PARAMETER_DECL	539:54	539:60	3	TIFF * tif
TYPE	539:54	539:58	4	TIFF *
TYPE_NAME	539:54	539:54	5	TIFF
LEAF_NODE	539:54	539:54	6	TIFF
POINTER	539:58	539:58	5	*
LEAF_NODE	539:58	539:58	6	*
NAME	539:60	539:60	4	tif
LEAF_NODE	539:60	539:60	5	tif
LEAF_NODE	539:63	539:63	3	,
PARAMETER_DECL	539:65	539:79	3	TIFFDirEntry * direntry
TYPE	539:65	539:77	4	TIFFDirEntry *
TYPE_NAME	539:65	539:65	5	TIFFDirEntry
LEAF_NODE	539:65	539:65	6	TIFFDirEntry
POINTER	539:77	539:77	5	*
LEAF_NODE	539:77	539:77	6	*
NAME	539:79	539:79	4	direntry
LEAF_NODE	539:79	539:79	5	direntry
LEAF_NODE	539:87	539:87	3	,
PARAMETER_DECL	539:89	539:96	3	float * value
TYPE	539:89	539:94	4	float *
TYPE_NAME	539:89	539:89	5	float
LEAF_NODE	539:89	539:89	6	float
POINTER	539:94	539:94	5	*
LEAF_NODE	539:94	539:94	6	*
NAME	539:96	539:96	4	value
LEAF_NODE	539:96	539:96	5	value
LEAF_NODE	539:101	539:101	3	)
LEAF_NODE	540:0	540:0	2	{
STATEMENTS	541:1	544:1	2	
SIMPLE_DECL	541:1	541:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	541:1	541:26	4	enum TIFFReadDirEntryErr err
TYPE	541:1	541:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	541:1	541:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	541:1	541:1	7	enum
LEAF_NODE	541:6	541:6	7	TIFFReadDirEntryErr
NAME	541:26	541:26	5	err
LEAF_NODE	541:26	541:26	6	err
LEAF_NODE	541:29	541:29	4	;
SELECTION	542:1	543:2	3	
KEYWORD	542:1	542:1	4	if
LEAF_NODE	542:1	542:1	5	if
LEAF_NODE	542:4	542:4	4	(
CONDITION	542:5	542:5	4	direntry -> tdir_count != 1
EXPR	542:5	542:27	5	direntry -> tdir_count != 1
FIELD	542:5	542:15	6	direntry -> tdir_count
LEAF_NODE	542:5	542:5	7	direntry
LEAF_NODE	542:13	542:13	7	->
LEAF_NODE	542:15	542:15	7	tdir_count
EQ_OPERATOR	542:25	542:25	6	!=
LEAF_NODE	542:25	542:25	7	!=
FIELD	542:27	542:27	6	1
LEAF_NODE	542:27	542:27	7	1
LEAF_NODE	542:28	542:28	4	)
STATEMENTS	543:2	543:2	4	
LEAF_NODE	543:2	543:2	5	return
LEAF_NODE	543:8	543:8	3	(
LEAF_NODE	543:9	543:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	543:33	543:33	3	)
LEAF_NODE	543:34	543:34	3	;
SELECTION	544:1	545:1	3	
KEYWORD	544:1	544:1	4	switch
LEAF_NODE	544:1	544:1	5	switch
LEAF_NODE	544:8	544:8	4	(
CONDITION	544:9	544:9	4	direntry -> tdir_type
EXPR	544:9	544:9	5	direntry -> tdir_type
FIELD	544:9	544:19	6	direntry -> tdir_type
LEAF_NODE	544:9	544:9	7	direntry
LEAF_NODE	544:17	544:17	7	->
LEAF_NODE	544:19	544:19	7	tdir_type
LEAF_NODE	544:28	544:28	4	)
STATEMENTS	545:1	649:1	4	
LEAF_NODE	545:1	545:1	5	{
STATEMENTS	546:2	648:34	5	
LABEL	546:2	546:16	6	case TIFF_BYTE :
LEAF_NODE	546:2	546:2	7	case
LEAF_NODE	546:7	546:7	7	TIFF_BYTE
LEAF_NODE	546:16	546:16	7	:
LEAF_NODE	547:3	547:3	6	{
STATEMENTS	548:4	551:33	6	
SIMPLE_DECL	548:4	548:11	7	uint8 m ;
VAR_DECL	548:4	548:10	8	uint8 m
TYPE	548:4	548:4	9	uint8
TYPE_NAME	548:4	548:4	10	uint8
LEAF_NODE	548:4	548:4	11	uint8
NAME	548:10	548:10	9	m
LEAF_NODE	548:10	548:10	10	m
LEAF_NODE	548:11	548:11	8	;
EXPR_STATEMENT	549:4	549:48	7	TIFFReadDirEntryCheckedByte ( tif , direntry , & m ) ;
EXPR	549:4	549:4	8	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
FUNCTION_CALL	549:4	549:47	9	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
CALLEE	549:4	549:4	10	TIFFReadDirEntryCheckedByte
LEAF_NODE	549:4	549:4	11	TIFFReadDirEntryCheckedByte
LEAF_NODE	549:31	549:31	10	(
ARGUMENT	549:32	549:32	10	tif
FIELD	549:32	549:32	11	tif
LEAF_NODE	549:32	549:32	12	tif
LEAF_NODE	549:35	549:35	10	,
ARGUMENT	549:36	549:36	10	direntry
FIELD	549:36	549:36	11	direntry
LEAF_NODE	549:36	549:36	12	direntry
LEAF_NODE	549:44	549:44	10	,
ARGUMENT	549:45	549:45	10	& m
UNARY_EXPR	549:45	549:46	11	& m
UNARY_OPERATOR	549:45	549:45	12	&
LEAF_NODE	549:45	549:45	13	&
FIELD	549:46	549:46	12	m
LEAF_NODE	549:46	549:46	13	m
LEAF_NODE	549:47	549:47	10	)
LEAF_NODE	549:48	549:48	8	;
EXPR_STATEMENT	550:4	550:19	7	* value = ( float ) m ;
EXPR	550:4	550:4	8	* value = ( float ) m
ASSIGN	550:4	550:11	9	* value = ( float ) m
LVAL	550:4	550:4	10	* value
UNARY_EXPR	550:4	550:5	11	* value
UNARY_OPERATOR	550:4	550:4	12	*
LEAF_NODE	550:4	550:4	13	*
FIELD	550:5	550:5	12	value
LEAF_NODE	550:5	550:5	13	value
ASSIGN_OP	550:10	550:10	10	=
LEAF_NODE	550:10	550:10	11	=
RVAL	550:11	550:18	10	( float ) m
LEAF_NODE	550:11	550:11	11	(
TYPE_NAME	550:12	550:12	11	float
LEAF_NODE	550:12	550:12	12	float
LEAF_NODE	550:17	550:17	11	)
FIELD	550:18	550:18	11	m
LEAF_NODE	550:18	550:18	12	m
LEAF_NODE	550:19	550:19	8	;
LEAF_NODE	551:4	551:4	7	return
LEAF_NODE	551:10	551:10	7	(
LEAF_NODE	551:11	551:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	551:32	551:32	7	)
LEAF_NODE	551:33	551:33	7	;
LEAF_NODE	552:3	552:3	6	}
LABEL	553:2	553:17	6	case TIFF_SBYTE :
LEAF_NODE	553:2	553:2	7	case
LEAF_NODE	553:7	553:7	7	TIFF_SBYTE
LEAF_NODE	553:17	553:17	7	:
LEAF_NODE	554:3	554:3	6	{
STATEMENTS	555:4	558:33	6	
SIMPLE_DECL	555:4	555:10	7	int8 m ;
VAR_DECL	555:4	555:9	8	int8 m
TYPE	555:4	555:4	9	int8
TYPE_NAME	555:4	555:4	10	int8
LEAF_NODE	555:4	555:4	11	int8
NAME	555:9	555:9	9	m
LEAF_NODE	555:9	555:9	10	m
LEAF_NODE	555:10	555:10	8	;
EXPR_STATEMENT	556:4	556:49	7	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m ) ;
EXPR	556:4	556:4	8	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
FUNCTION_CALL	556:4	556:48	9	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
CALLEE	556:4	556:4	10	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	556:4	556:4	11	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	556:32	556:32	10	(
ARGUMENT	556:33	556:33	10	tif
FIELD	556:33	556:33	11	tif
LEAF_NODE	556:33	556:33	12	tif
LEAF_NODE	556:36	556:36	10	,
ARGUMENT	556:37	556:37	10	direntry
FIELD	556:37	556:37	11	direntry
LEAF_NODE	556:37	556:37	12	direntry
LEAF_NODE	556:45	556:45	10	,
ARGUMENT	556:46	556:46	10	& m
UNARY_EXPR	556:46	556:47	11	& m
UNARY_OPERATOR	556:46	556:46	12	&
LEAF_NODE	556:46	556:46	13	&
FIELD	556:47	556:47	12	m
LEAF_NODE	556:47	556:47	13	m
LEAF_NODE	556:48	556:48	10	)
LEAF_NODE	556:49	556:49	8	;
EXPR_STATEMENT	557:4	557:19	7	* value = ( float ) m ;
EXPR	557:4	557:4	8	* value = ( float ) m
ASSIGN	557:4	557:11	9	* value = ( float ) m
LVAL	557:4	557:4	10	* value
UNARY_EXPR	557:4	557:5	11	* value
UNARY_OPERATOR	557:4	557:4	12	*
LEAF_NODE	557:4	557:4	13	*
FIELD	557:5	557:5	12	value
LEAF_NODE	557:5	557:5	13	value
ASSIGN_OP	557:10	557:10	10	=
LEAF_NODE	557:10	557:10	11	=
RVAL	557:11	557:18	10	( float ) m
LEAF_NODE	557:11	557:11	11	(
TYPE_NAME	557:12	557:12	11	float
LEAF_NODE	557:12	557:12	12	float
LEAF_NODE	557:17	557:17	11	)
FIELD	557:18	557:18	11	m
LEAF_NODE	557:18	557:18	12	m
LEAF_NODE	557:19	557:19	8	;
LEAF_NODE	558:4	558:4	7	return
LEAF_NODE	558:10	558:10	7	(
LEAF_NODE	558:11	558:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	558:32	558:32	7	)
LEAF_NODE	558:33	558:33	7	;
LEAF_NODE	559:3	559:3	6	}
LABEL	560:2	560:17	6	case TIFF_SHORT :
LEAF_NODE	560:2	560:2	7	case
LEAF_NODE	560:7	560:7	7	TIFF_SHORT
LEAF_NODE	560:17	560:17	7	:
LEAF_NODE	561:3	561:3	6	{
STATEMENTS	562:4	565:33	6	
SIMPLE_DECL	562:4	562:12	7	uint16 m ;
VAR_DECL	562:4	562:11	8	uint16 m
TYPE	562:4	562:4	9	uint16
TYPE_NAME	562:4	562:4	10	uint16
LEAF_NODE	562:4	562:4	11	uint16
NAME	562:11	562:11	9	m
LEAF_NODE	562:11	562:11	10	m
LEAF_NODE	562:12	562:12	8	;
EXPR_STATEMENT	563:4	563:49	7	TIFFReadDirEntryCheckedShort ( tif , direntry , & m ) ;
EXPR	563:4	563:4	8	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
FUNCTION_CALL	563:4	563:48	9	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
CALLEE	563:4	563:4	10	TIFFReadDirEntryCheckedShort
LEAF_NODE	563:4	563:4	11	TIFFReadDirEntryCheckedShort
LEAF_NODE	563:32	563:32	10	(
ARGUMENT	563:33	563:33	10	tif
FIELD	563:33	563:33	11	tif
LEAF_NODE	563:33	563:33	12	tif
LEAF_NODE	563:36	563:36	10	,
ARGUMENT	563:37	563:37	10	direntry
FIELD	563:37	563:37	11	direntry
LEAF_NODE	563:37	563:37	12	direntry
LEAF_NODE	563:45	563:45	10	,
ARGUMENT	563:46	563:46	10	& m
UNARY_EXPR	563:46	563:47	11	& m
UNARY_OPERATOR	563:46	563:46	12	&
LEAF_NODE	563:46	563:46	13	&
FIELD	563:47	563:47	12	m
LEAF_NODE	563:47	563:47	13	m
LEAF_NODE	563:48	563:48	10	)
LEAF_NODE	563:49	563:49	8	;
EXPR_STATEMENT	564:4	564:19	7	* value = ( float ) m ;
EXPR	564:4	564:4	8	* value = ( float ) m
ASSIGN	564:4	564:11	9	* value = ( float ) m
LVAL	564:4	564:4	10	* value
UNARY_EXPR	564:4	564:5	11	* value
UNARY_OPERATOR	564:4	564:4	12	*
LEAF_NODE	564:4	564:4	13	*
FIELD	564:5	564:5	12	value
LEAF_NODE	564:5	564:5	13	value
ASSIGN_OP	564:10	564:10	10	=
LEAF_NODE	564:10	564:10	11	=
RVAL	564:11	564:18	10	( float ) m
LEAF_NODE	564:11	564:11	11	(
TYPE_NAME	564:12	564:12	11	float
LEAF_NODE	564:12	564:12	12	float
LEAF_NODE	564:17	564:17	11	)
FIELD	564:18	564:18	11	m
LEAF_NODE	564:18	564:18	12	m
LEAF_NODE	564:19	564:19	8	;
LEAF_NODE	565:4	565:4	7	return
LEAF_NODE	565:10	565:10	7	(
LEAF_NODE	565:11	565:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	565:32	565:32	7	)
LEAF_NODE	565:33	565:33	7	;
LEAF_NODE	566:3	566:3	6	}
LABEL	567:2	567:18	6	case TIFF_SSHORT :
LEAF_NODE	567:2	567:2	7	case
LEAF_NODE	567:7	567:7	7	TIFF_SSHORT
LEAF_NODE	567:18	567:18	7	:
LEAF_NODE	568:3	568:3	6	{
STATEMENTS	569:4	572:33	6	
SIMPLE_DECL	569:4	569:11	7	int16 m ;
VAR_DECL	569:4	569:10	8	int16 m
TYPE	569:4	569:4	9	int16
TYPE_NAME	569:4	569:4	10	int16
LEAF_NODE	569:4	569:4	11	int16
NAME	569:10	569:10	9	m
LEAF_NODE	569:10	569:10	10	m
LEAF_NODE	569:11	569:11	8	;
EXPR_STATEMENT	570:4	570:50	7	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m ) ;
EXPR	570:4	570:4	8	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
FUNCTION_CALL	570:4	570:49	9	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
CALLEE	570:4	570:4	10	TIFFReadDirEntryCheckedSshort
LEAF_NODE	570:4	570:4	11	TIFFReadDirEntryCheckedSshort
LEAF_NODE	570:33	570:33	10	(
ARGUMENT	570:34	570:34	10	tif
FIELD	570:34	570:34	11	tif
LEAF_NODE	570:34	570:34	12	tif
LEAF_NODE	570:37	570:37	10	,
ARGUMENT	570:38	570:38	10	direntry
FIELD	570:38	570:38	11	direntry
LEAF_NODE	570:38	570:38	12	direntry
LEAF_NODE	570:46	570:46	10	,
ARGUMENT	570:47	570:47	10	& m
UNARY_EXPR	570:47	570:48	11	& m
UNARY_OPERATOR	570:47	570:47	12	&
LEAF_NODE	570:47	570:47	13	&
FIELD	570:48	570:48	12	m
LEAF_NODE	570:48	570:48	13	m
LEAF_NODE	570:49	570:49	10	)
LEAF_NODE	570:50	570:50	8	;
EXPR_STATEMENT	571:4	571:19	7	* value = ( float ) m ;
EXPR	571:4	571:4	8	* value = ( float ) m
ASSIGN	571:4	571:11	9	* value = ( float ) m
LVAL	571:4	571:4	10	* value
UNARY_EXPR	571:4	571:5	11	* value
UNARY_OPERATOR	571:4	571:4	12	*
LEAF_NODE	571:4	571:4	13	*
FIELD	571:5	571:5	12	value
LEAF_NODE	571:5	571:5	13	value
ASSIGN_OP	571:10	571:10	10	=
LEAF_NODE	571:10	571:10	11	=
RVAL	571:11	571:18	10	( float ) m
LEAF_NODE	571:11	571:11	11	(
TYPE_NAME	571:12	571:12	11	float
LEAF_NODE	571:12	571:12	12	float
LEAF_NODE	571:17	571:17	11	)
FIELD	571:18	571:18	11	m
LEAF_NODE	571:18	571:18	12	m
LEAF_NODE	571:19	571:19	8	;
LEAF_NODE	572:4	572:4	7	return
LEAF_NODE	572:10	572:10	7	(
LEAF_NODE	572:11	572:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	572:32	572:32	7	)
LEAF_NODE	572:33	572:33	7	;
LEAF_NODE	573:3	573:3	6	}
LABEL	574:2	574:16	6	case TIFF_LONG :
LEAF_NODE	574:2	574:2	7	case
LEAF_NODE	574:7	574:7	7	TIFF_LONG
LEAF_NODE	574:16	574:16	7	:
LEAF_NODE	575:3	575:3	6	{
STATEMENTS	576:4	579:33	6	
SIMPLE_DECL	576:4	576:12	7	uint32 m ;
VAR_DECL	576:4	576:11	8	uint32 m
TYPE	576:4	576:4	9	uint32
TYPE_NAME	576:4	576:4	10	uint32
LEAF_NODE	576:4	576:4	11	uint32
NAME	576:11	576:11	9	m
LEAF_NODE	576:11	576:11	10	m
LEAF_NODE	576:12	576:12	8	;
EXPR_STATEMENT	577:4	577:48	7	TIFFReadDirEntryCheckedLong ( tif , direntry , & m ) ;
EXPR	577:4	577:4	8	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
FUNCTION_CALL	577:4	577:47	9	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
CALLEE	577:4	577:4	10	TIFFReadDirEntryCheckedLong
LEAF_NODE	577:4	577:4	11	TIFFReadDirEntryCheckedLong
LEAF_NODE	577:31	577:31	10	(
ARGUMENT	577:32	577:32	10	tif
FIELD	577:32	577:32	11	tif
LEAF_NODE	577:32	577:32	12	tif
LEAF_NODE	577:35	577:35	10	,
ARGUMENT	577:36	577:36	10	direntry
FIELD	577:36	577:36	11	direntry
LEAF_NODE	577:36	577:36	12	direntry
LEAF_NODE	577:44	577:44	10	,
ARGUMENT	577:45	577:45	10	& m
UNARY_EXPR	577:45	577:46	11	& m
UNARY_OPERATOR	577:45	577:45	12	&
LEAF_NODE	577:45	577:45	13	&
FIELD	577:46	577:46	12	m
LEAF_NODE	577:46	577:46	13	m
LEAF_NODE	577:47	577:47	10	)
LEAF_NODE	577:48	577:48	8	;
EXPR_STATEMENT	578:4	578:19	7	* value = ( float ) m ;
EXPR	578:4	578:4	8	* value = ( float ) m
ASSIGN	578:4	578:11	9	* value = ( float ) m
LVAL	578:4	578:4	10	* value
UNARY_EXPR	578:4	578:5	11	* value
UNARY_OPERATOR	578:4	578:4	12	*
LEAF_NODE	578:4	578:4	13	*
FIELD	578:5	578:5	12	value
LEAF_NODE	578:5	578:5	13	value
ASSIGN_OP	578:10	578:10	10	=
LEAF_NODE	578:10	578:10	11	=
RVAL	578:11	578:18	10	( float ) m
LEAF_NODE	578:11	578:11	11	(
TYPE_NAME	578:12	578:12	11	float
LEAF_NODE	578:12	578:12	12	float
LEAF_NODE	578:17	578:17	11	)
FIELD	578:18	578:18	11	m
LEAF_NODE	578:18	578:18	12	m
LEAF_NODE	578:19	578:19	8	;
LEAF_NODE	579:4	579:4	7	return
LEAF_NODE	579:10	579:10	7	(
LEAF_NODE	579:11	579:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	579:32	579:32	7	)
LEAF_NODE	579:33	579:33	7	;
LEAF_NODE	580:3	580:3	6	}
LABEL	581:2	581:17	6	case TIFF_SLONG :
LEAF_NODE	581:2	581:2	7	case
LEAF_NODE	581:7	581:7	7	TIFF_SLONG
LEAF_NODE	581:17	581:17	7	:
LEAF_NODE	582:3	582:3	6	{
STATEMENTS	583:4	586:33	6	
SIMPLE_DECL	583:4	583:11	7	int32 m ;
VAR_DECL	583:4	583:10	8	int32 m
TYPE	583:4	583:4	9	int32
TYPE_NAME	583:4	583:4	10	int32
LEAF_NODE	583:4	583:4	11	int32
NAME	583:10	583:10	9	m
LEAF_NODE	583:10	583:10	10	m
LEAF_NODE	583:11	583:11	8	;
EXPR_STATEMENT	584:4	584:49	7	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m ) ;
EXPR	584:4	584:4	8	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
FUNCTION_CALL	584:4	584:48	9	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
CALLEE	584:4	584:4	10	TIFFReadDirEntryCheckedSlong
LEAF_NODE	584:4	584:4	11	TIFFReadDirEntryCheckedSlong
LEAF_NODE	584:32	584:32	10	(
ARGUMENT	584:33	584:33	10	tif
FIELD	584:33	584:33	11	tif
LEAF_NODE	584:33	584:33	12	tif
LEAF_NODE	584:36	584:36	10	,
ARGUMENT	584:37	584:37	10	direntry
FIELD	584:37	584:37	11	direntry
LEAF_NODE	584:37	584:37	12	direntry
LEAF_NODE	584:45	584:45	10	,
ARGUMENT	584:46	584:46	10	& m
UNARY_EXPR	584:46	584:47	11	& m
UNARY_OPERATOR	584:46	584:46	12	&
LEAF_NODE	584:46	584:46	13	&
FIELD	584:47	584:47	12	m
LEAF_NODE	584:47	584:47	13	m
LEAF_NODE	584:48	584:48	10	)
LEAF_NODE	584:49	584:49	8	;
EXPR_STATEMENT	585:4	585:19	7	* value = ( float ) m ;
EXPR	585:4	585:4	8	* value = ( float ) m
ASSIGN	585:4	585:11	9	* value = ( float ) m
LVAL	585:4	585:4	10	* value
UNARY_EXPR	585:4	585:5	11	* value
UNARY_OPERATOR	585:4	585:4	12	*
LEAF_NODE	585:4	585:4	13	*
FIELD	585:5	585:5	12	value
LEAF_NODE	585:5	585:5	13	value
ASSIGN_OP	585:10	585:10	10	=
LEAF_NODE	585:10	585:10	11	=
RVAL	585:11	585:18	10	( float ) m
LEAF_NODE	585:11	585:11	11	(
TYPE_NAME	585:12	585:12	11	float
LEAF_NODE	585:12	585:12	12	float
LEAF_NODE	585:17	585:17	11	)
FIELD	585:18	585:18	11	m
LEAF_NODE	585:18	585:18	12	m
LEAF_NODE	585:19	585:19	8	;
LEAF_NODE	586:4	586:4	7	return
LEAF_NODE	586:10	586:10	7	(
LEAF_NODE	586:11	586:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	586:32	586:32	7	)
LEAF_NODE	586:33	586:33	7	;
LEAF_NODE	587:3	587:3	6	}
LABEL	588:2	588:17	6	case TIFF_LONG8 :
LEAF_NODE	588:2	588:2	7	case
LEAF_NODE	588:7	588:7	7	TIFF_LONG8
LEAF_NODE	588:17	588:17	7	:
LEAF_NODE	589:3	589:3	6	{
STATEMENTS	590:4	604:33	6	
SIMPLE_DECL	590:4	590:12	7	uint64 m ;
VAR_DECL	590:4	590:11	8	uint64 m
TYPE	590:4	590:4	9	uint64
TYPE_NAME	590:4	590:4	10	uint64
LEAF_NODE	590:4	590:4	11	uint64
NAME	590:11	590:11	9	m
LEAF_NODE	590:11	590:11	10	m
LEAF_NODE	590:12	590:12	8	;
EXPR_STATEMENT	591:4	591:53	7	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m ) ;
EXPR	591:4	591:4	8	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
ASSIGN	591:4	591:8	9	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
LVAL	591:4	591:4	10	err
FIELD	591:4	591:4	11	err
LEAF_NODE	591:4	591:4	12	err
ASSIGN_OP	591:7	591:7	10	=
LEAF_NODE	591:7	591:7	11	=
RVAL	591:8	591:8	10	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
FUNCTION_CALL	591:8	591:52	11	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
CALLEE	591:8	591:8	12	TIFFReadDirEntryCheckedLong8
LEAF_NODE	591:8	591:8	13	TIFFReadDirEntryCheckedLong8
LEAF_NODE	591:36	591:36	12	(
ARGUMENT	591:37	591:37	12	tif
FIELD	591:37	591:37	13	tif
LEAF_NODE	591:37	591:37	14	tif
LEAF_NODE	591:40	591:40	12	,
ARGUMENT	591:41	591:41	12	direntry
FIELD	591:41	591:41	13	direntry
LEAF_NODE	591:41	591:41	14	direntry
LEAF_NODE	591:49	591:49	12	,
ARGUMENT	591:50	591:50	12	& m
UNARY_EXPR	591:50	591:51	13	& m
UNARY_OPERATOR	591:50	591:50	14	&
LEAF_NODE	591:50	591:50	15	&
FIELD	591:51	591:51	14	m
LEAF_NODE	591:51	591:51	15	m
LEAF_NODE	591:52	591:52	12	)
LEAF_NODE	591:53	591:53	8	;
SELECTION	592:4	593:5	7	
KEYWORD	592:4	592:4	8	if
LEAF_NODE	592:4	592:4	9	if
LEAF_NODE	592:7	592:7	8	(
CONDITION	592:8	592:8	8	err != TIFFReadDirEntryErrOk
EXPR	592:8	592:13	9	err != TIFFReadDirEntryErrOk
FIELD	592:8	592:8	10	err
LEAF_NODE	592:8	592:8	11	err
EQ_OPERATOR	592:11	592:11	10	!=
LEAF_NODE	592:11	592:11	11	!=
FIELD	592:13	592:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	592:13	592:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	592:34	592:34	8	)
STATEMENTS	593:5	593:5	8	
LEAF_NODE	593:5	593:5	9	return
LEAF_NODE	593:11	593:11	7	(
LEAF_NODE	593:12	593:12	7	err
LEAF_NODE	593:15	593:15	7	)
LEAF_NODE	593:16	593:16	7	;
EXPR_STATEMENT	600:4	600:34	7	* value = _TIFFUInt64ToFloat ( m ) ;
EXPR	600:4	600:4	8	* value = _TIFFUInt64ToFloat ( m )
ASSIGN	600:4	600:13	9	* value = _TIFFUInt64ToFloat ( m )
LVAL	600:4	600:4	10	* value
UNARY_EXPR	600:4	600:5	11	* value
UNARY_OPERATOR	600:4	600:4	12	*
LEAF_NODE	600:4	600:4	13	*
FIELD	600:5	600:5	12	value
LEAF_NODE	600:5	600:5	13	value
ASSIGN_OP	600:11	600:11	10	=
LEAF_NODE	600:11	600:11	11	=
RVAL	600:13	600:13	10	_TIFFUInt64ToFloat ( m )
FUNCTION_CALL	600:13	600:33	11	_TIFFUInt64ToFloat ( m )
CALLEE	600:13	600:13	12	_TIFFUInt64ToFloat
LEAF_NODE	600:13	600:13	13	_TIFFUInt64ToFloat
LEAF_NODE	600:31	600:31	12	(
ARGUMENT	600:32	600:32	12	m
FIELD	600:32	600:32	13	m
LEAF_NODE	600:32	600:32	14	m
LEAF_NODE	600:33	600:33	12	)
LEAF_NODE	600:34	600:34	8	;
EXPR_STATEMENT	602:4	602:19	7	* value = ( float ) m ;
EXPR	602:4	602:4	8	* value = ( float ) m
ASSIGN	602:4	602:11	9	* value = ( float ) m
LVAL	602:4	602:4	10	* value
UNARY_EXPR	602:4	602:5	11	* value
UNARY_OPERATOR	602:4	602:4	12	*
LEAF_NODE	602:4	602:4	13	*
FIELD	602:5	602:5	12	value
LEAF_NODE	602:5	602:5	13	value
ASSIGN_OP	602:10	602:10	10	=
LEAF_NODE	602:10	602:10	11	=
RVAL	602:11	602:18	10	( float ) m
LEAF_NODE	602:11	602:11	11	(
TYPE_NAME	602:12	602:12	11	float
LEAF_NODE	602:12	602:12	12	float
LEAF_NODE	602:17	602:17	11	)
FIELD	602:18	602:18	11	m
LEAF_NODE	602:18	602:18	12	m
LEAF_NODE	602:19	602:19	8	;
LEAF_NODE	604:4	604:4	7	return
LEAF_NODE	604:10	604:10	7	(
LEAF_NODE	604:11	604:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	604:32	604:32	7	)
LEAF_NODE	604:33	604:33	7	;
LEAF_NODE	605:3	605:3	6	}
LABEL	606:2	606:18	6	case TIFF_SLONG8 :
LEAF_NODE	606:2	606:2	7	case
LEAF_NODE	606:7	606:7	7	TIFF_SLONG8
LEAF_NODE	606:18	606:18	7	:
LEAF_NODE	607:3	607:3	6	{
STATEMENTS	608:4	613:33	6	
SIMPLE_DECL	608:4	608:11	7	int64 m ;
VAR_DECL	608:4	608:10	8	int64 m
TYPE	608:4	608:4	9	int64
TYPE_NAME	608:4	608:4	10	int64
LEAF_NODE	608:4	608:4	11	int64
NAME	608:10	608:10	9	m
LEAF_NODE	608:10	608:10	10	m
LEAF_NODE	608:11	608:11	8	;
EXPR_STATEMENT	609:4	609:54	7	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m ) ;
EXPR	609:4	609:4	8	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
ASSIGN	609:4	609:8	9	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
LVAL	609:4	609:4	10	err
FIELD	609:4	609:4	11	err
LEAF_NODE	609:4	609:4	12	err
ASSIGN_OP	609:7	609:7	10	=
LEAF_NODE	609:7	609:7	11	=
RVAL	609:8	609:8	10	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
FUNCTION_CALL	609:8	609:53	11	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
CALLEE	609:8	609:8	12	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	609:8	609:8	13	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	609:37	609:37	12	(
ARGUMENT	609:38	609:38	12	tif
FIELD	609:38	609:38	13	tif
LEAF_NODE	609:38	609:38	14	tif
LEAF_NODE	609:41	609:41	12	,
ARGUMENT	609:42	609:42	12	direntry
FIELD	609:42	609:42	13	direntry
LEAF_NODE	609:42	609:42	14	direntry
LEAF_NODE	609:50	609:50	12	,
ARGUMENT	609:51	609:51	12	& m
UNARY_EXPR	609:51	609:52	13	& m
UNARY_OPERATOR	609:51	609:51	14	&
LEAF_NODE	609:51	609:51	15	&
FIELD	609:52	609:52	14	m
LEAF_NODE	609:52	609:52	15	m
LEAF_NODE	609:53	609:53	12	)
LEAF_NODE	609:54	609:54	8	;
SELECTION	610:4	611:5	7	
KEYWORD	610:4	610:4	8	if
LEAF_NODE	610:4	610:4	9	if
LEAF_NODE	610:7	610:7	8	(
CONDITION	610:8	610:8	8	err != TIFFReadDirEntryErrOk
EXPR	610:8	610:13	9	err != TIFFReadDirEntryErrOk
FIELD	610:8	610:8	10	err
LEAF_NODE	610:8	610:8	11	err
EQ_OPERATOR	610:11	610:11	10	!=
LEAF_NODE	610:11	610:11	11	!=
FIELD	610:13	610:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	610:13	610:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	610:34	610:34	8	)
STATEMENTS	611:5	611:5	8	
LEAF_NODE	611:5	611:5	9	return
LEAF_NODE	611:11	611:11	7	(
LEAF_NODE	611:12	611:12	7	err
LEAF_NODE	611:15	611:15	7	)
LEAF_NODE	611:16	611:16	7	;
EXPR_STATEMENT	612:4	612:19	7	* value = ( float ) m ;
EXPR	612:4	612:4	8	* value = ( float ) m
ASSIGN	612:4	612:11	9	* value = ( float ) m
LVAL	612:4	612:4	10	* value
UNARY_EXPR	612:4	612:5	11	* value
UNARY_OPERATOR	612:4	612:4	12	*
LEAF_NODE	612:4	612:4	13	*
FIELD	612:5	612:5	12	value
LEAF_NODE	612:5	612:5	13	value
ASSIGN_OP	612:10	612:10	10	=
LEAF_NODE	612:10	612:10	11	=
RVAL	612:11	612:18	10	( float ) m
LEAF_NODE	612:11	612:11	11	(
TYPE_NAME	612:12	612:12	11	float
LEAF_NODE	612:12	612:12	12	float
LEAF_NODE	612:17	612:17	11	)
FIELD	612:18	612:18	11	m
LEAF_NODE	612:18	612:18	12	m
LEAF_NODE	612:19	612:19	8	;
LEAF_NODE	613:4	613:4	7	return
LEAF_NODE	613:10	613:10	7	(
LEAF_NODE	613:11	613:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	613:32	613:32	7	)
LEAF_NODE	613:33	613:33	7	;
LEAF_NODE	614:3	614:3	6	}
LABEL	615:2	615:20	6	case TIFF_RATIONAL :
LEAF_NODE	615:2	615:2	7	case
LEAF_NODE	615:7	615:7	7	TIFF_RATIONAL
LEAF_NODE	615:20	615:20	7	:
LEAF_NODE	616:3	616:3	6	{
STATEMENTS	617:4	622:33	6	
SIMPLE_DECL	617:4	617:12	7	double m ;
VAR_DECL	617:4	617:11	8	double m
TYPE	617:4	617:4	9	double
TYPE_NAME	617:4	617:4	10	double
LEAF_NODE	617:4	617:4	11	double
NAME	617:11	617:11	9	m
LEAF_NODE	617:11	617:11	10	m
LEAF_NODE	617:12	617:12	8	;
EXPR_STATEMENT	618:4	618:56	7	err = TIFFReadDirEntryCheckedRational ( tif , direntry , & m ) ;
EXPR	618:4	618:4	8	err = TIFFReadDirEntryCheckedRational ( tif , direntry , & m )
ASSIGN	618:4	618:8	9	err = TIFFReadDirEntryCheckedRational ( tif , direntry , & m )
LVAL	618:4	618:4	10	err
FIELD	618:4	618:4	11	err
LEAF_NODE	618:4	618:4	12	err
ASSIGN_OP	618:7	618:7	10	=
LEAF_NODE	618:7	618:7	11	=
RVAL	618:8	618:8	10	TIFFReadDirEntryCheckedRational ( tif , direntry , & m )
FUNCTION_CALL	618:8	618:55	11	TIFFReadDirEntryCheckedRational ( tif , direntry , & m )
CALLEE	618:8	618:8	12	TIFFReadDirEntryCheckedRational
LEAF_NODE	618:8	618:8	13	TIFFReadDirEntryCheckedRational
LEAF_NODE	618:39	618:39	12	(
ARGUMENT	618:40	618:40	12	tif
FIELD	618:40	618:40	13	tif
LEAF_NODE	618:40	618:40	14	tif
LEAF_NODE	618:43	618:43	12	,
ARGUMENT	618:44	618:44	12	direntry
FIELD	618:44	618:44	13	direntry
LEAF_NODE	618:44	618:44	14	direntry
LEAF_NODE	618:52	618:52	12	,
ARGUMENT	618:53	618:53	12	& m
UNARY_EXPR	618:53	618:54	13	& m
UNARY_OPERATOR	618:53	618:53	14	&
LEAF_NODE	618:53	618:53	15	&
FIELD	618:54	618:54	14	m
LEAF_NODE	618:54	618:54	15	m
LEAF_NODE	618:55	618:55	12	)
LEAF_NODE	618:56	618:56	8	;
SELECTION	619:4	620:5	7	
KEYWORD	619:4	619:4	8	if
LEAF_NODE	619:4	619:4	9	if
LEAF_NODE	619:7	619:7	8	(
CONDITION	619:8	619:8	8	err != TIFFReadDirEntryErrOk
EXPR	619:8	619:13	9	err != TIFFReadDirEntryErrOk
FIELD	619:8	619:8	10	err
LEAF_NODE	619:8	619:8	11	err
EQ_OPERATOR	619:11	619:11	10	!=
LEAF_NODE	619:11	619:11	11	!=
FIELD	619:13	619:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	619:13	619:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	619:34	619:34	8	)
STATEMENTS	620:5	620:5	8	
LEAF_NODE	620:5	620:5	9	return
LEAF_NODE	620:11	620:11	7	(
LEAF_NODE	620:12	620:12	7	err
LEAF_NODE	620:15	620:15	7	)
LEAF_NODE	620:16	620:16	7	;
EXPR_STATEMENT	621:4	621:19	7	* value = ( float ) m ;
EXPR	621:4	621:4	8	* value = ( float ) m
ASSIGN	621:4	621:11	9	* value = ( float ) m
LVAL	621:4	621:4	10	* value
UNARY_EXPR	621:4	621:5	11	* value
UNARY_OPERATOR	621:4	621:4	12	*
LEAF_NODE	621:4	621:4	13	*
FIELD	621:5	621:5	12	value
LEAF_NODE	621:5	621:5	13	value
ASSIGN_OP	621:10	621:10	10	=
LEAF_NODE	621:10	621:10	11	=
RVAL	621:11	621:18	10	( float ) m
LEAF_NODE	621:11	621:11	11	(
TYPE_NAME	621:12	621:12	11	float
LEAF_NODE	621:12	621:12	12	float
LEAF_NODE	621:17	621:17	11	)
FIELD	621:18	621:18	11	m
LEAF_NODE	621:18	621:18	12	m
LEAF_NODE	621:19	621:19	8	;
LEAF_NODE	622:4	622:4	7	return
LEAF_NODE	622:10	622:10	7	(
LEAF_NODE	622:11	622:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	622:32	622:32	7	)
LEAF_NODE	622:33	622:33	7	;
LEAF_NODE	623:3	623:3	6	}
LABEL	624:2	624:21	6	case TIFF_SRATIONAL :
LEAF_NODE	624:2	624:2	7	case
LEAF_NODE	624:7	624:7	7	TIFF_SRATIONAL
LEAF_NODE	624:21	624:21	7	:
LEAF_NODE	625:3	625:3	6	{
STATEMENTS	626:4	631:33	6	
SIMPLE_DECL	626:4	626:12	7	double m ;
VAR_DECL	626:4	626:11	8	double m
TYPE	626:4	626:4	9	double
TYPE_NAME	626:4	626:4	10	double
LEAF_NODE	626:4	626:4	11	double
NAME	626:11	626:11	9	m
LEAF_NODE	626:11	626:11	10	m
LEAF_NODE	626:12	626:12	8	;
EXPR_STATEMENT	627:4	627:57	7	err = TIFFReadDirEntryCheckedSrational ( tif , direntry , & m ) ;
EXPR	627:4	627:4	8	err = TIFFReadDirEntryCheckedSrational ( tif , direntry , & m )
ASSIGN	627:4	627:8	9	err = TIFFReadDirEntryCheckedSrational ( tif , direntry , & m )
LVAL	627:4	627:4	10	err
FIELD	627:4	627:4	11	err
LEAF_NODE	627:4	627:4	12	err
ASSIGN_OP	627:7	627:7	10	=
LEAF_NODE	627:7	627:7	11	=
RVAL	627:8	627:8	10	TIFFReadDirEntryCheckedSrational ( tif , direntry , & m )
FUNCTION_CALL	627:8	627:56	11	TIFFReadDirEntryCheckedSrational ( tif , direntry , & m )
CALLEE	627:8	627:8	12	TIFFReadDirEntryCheckedSrational
LEAF_NODE	627:8	627:8	13	TIFFReadDirEntryCheckedSrational
LEAF_NODE	627:40	627:40	12	(
ARGUMENT	627:41	627:41	12	tif
FIELD	627:41	627:41	13	tif
LEAF_NODE	627:41	627:41	14	tif
LEAF_NODE	627:44	627:44	12	,
ARGUMENT	627:45	627:45	12	direntry
FIELD	627:45	627:45	13	direntry
LEAF_NODE	627:45	627:45	14	direntry
LEAF_NODE	627:53	627:53	12	,
ARGUMENT	627:54	627:54	12	& m
UNARY_EXPR	627:54	627:55	13	& m
UNARY_OPERATOR	627:54	627:54	14	&
LEAF_NODE	627:54	627:54	15	&
FIELD	627:55	627:55	14	m
LEAF_NODE	627:55	627:55	15	m
LEAF_NODE	627:56	627:56	12	)
LEAF_NODE	627:57	627:57	8	;
SELECTION	628:4	629:5	7	
KEYWORD	628:4	628:4	8	if
LEAF_NODE	628:4	628:4	9	if
LEAF_NODE	628:7	628:7	8	(
CONDITION	628:8	628:8	8	err != TIFFReadDirEntryErrOk
EXPR	628:8	628:13	9	err != TIFFReadDirEntryErrOk
FIELD	628:8	628:8	10	err
LEAF_NODE	628:8	628:8	11	err
EQ_OPERATOR	628:11	628:11	10	!=
LEAF_NODE	628:11	628:11	11	!=
FIELD	628:13	628:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	628:13	628:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	628:34	628:34	8	)
STATEMENTS	629:5	629:5	8	
LEAF_NODE	629:5	629:5	9	return
LEAF_NODE	629:11	629:11	7	(
LEAF_NODE	629:12	629:12	7	err
LEAF_NODE	629:15	629:15	7	)
LEAF_NODE	629:16	629:16	7	;
EXPR_STATEMENT	630:4	630:19	7	* value = ( float ) m ;
EXPR	630:4	630:4	8	* value = ( float ) m
ASSIGN	630:4	630:11	9	* value = ( float ) m
LVAL	630:4	630:4	10	* value
UNARY_EXPR	630:4	630:5	11	* value
UNARY_OPERATOR	630:4	630:4	12	*
LEAF_NODE	630:4	630:4	13	*
FIELD	630:5	630:5	12	value
LEAF_NODE	630:5	630:5	13	value
ASSIGN_OP	630:10	630:10	10	=
LEAF_NODE	630:10	630:10	11	=
RVAL	630:11	630:18	10	( float ) m
LEAF_NODE	630:11	630:11	11	(
TYPE_NAME	630:12	630:12	11	float
LEAF_NODE	630:12	630:12	12	float
LEAF_NODE	630:17	630:17	11	)
FIELD	630:18	630:18	11	m
LEAF_NODE	630:18	630:18	12	m
LEAF_NODE	630:19	630:19	8	;
LEAF_NODE	631:4	631:4	7	return
LEAF_NODE	631:10	631:10	7	(
LEAF_NODE	631:11	631:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	631:32	631:32	7	)
LEAF_NODE	631:33	631:33	7	;
LEAF_NODE	632:3	632:3	6	}
LABEL	633:2	633:17	6	case TIFF_FLOAT :
LEAF_NODE	633:2	633:2	7	case
LEAF_NODE	633:7	633:7	7	TIFF_FLOAT
LEAF_NODE	633:17	633:17	7	:
EXPR_STATEMENT	634:3	634:51	6	TIFFReadDirEntryCheckedFloat ( tif , direntry , value ) ;
EXPR	634:3	634:3	7	TIFFReadDirEntryCheckedFloat ( tif , direntry , value )
FUNCTION_CALL	634:3	634:50	8	TIFFReadDirEntryCheckedFloat ( tif , direntry , value )
CALLEE	634:3	634:3	9	TIFFReadDirEntryCheckedFloat
LEAF_NODE	634:3	634:3	10	TIFFReadDirEntryCheckedFloat
LEAF_NODE	634:31	634:31	9	(
ARGUMENT	634:32	634:32	9	tif
FIELD	634:32	634:32	10	tif
LEAF_NODE	634:32	634:32	11	tif
LEAF_NODE	634:35	634:35	9	,
ARGUMENT	634:36	634:36	9	direntry
FIELD	634:36	634:36	10	direntry
LEAF_NODE	634:36	634:36	11	direntry
LEAF_NODE	634:44	634:44	9	,
ARGUMENT	634:45	634:45	9	value
FIELD	634:45	634:45	10	value
LEAF_NODE	634:45	634:45	11	value
LEAF_NODE	634:50	634:50	9	)
LEAF_NODE	634:51	634:51	7	;
LEAF_NODE	635:3	635:3	6	return
LEAF_NODE	635:9	635:9	6	(
LEAF_NODE	635:10	635:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	635:31	635:31	6	)
LEAF_NODE	635:32	635:32	6	;
LABEL	636:2	636:18	6	case TIFF_DOUBLE :
LEAF_NODE	636:2	636:2	7	case
LEAF_NODE	636:7	636:7	7	TIFF_DOUBLE
LEAF_NODE	636:18	636:18	7	:
LEAF_NODE	637:3	637:3	6	{
STATEMENTS	638:4	645:33	6	
SIMPLE_DECL	638:4	638:12	7	double m ;
VAR_DECL	638:4	638:11	8	double m
TYPE	638:4	638:4	9	double
TYPE_NAME	638:4	638:4	10	double
LEAF_NODE	638:4	638:4	11	double
NAME	638:11	638:11	9	m
LEAF_NODE	638:11	638:11	10	m
LEAF_NODE	638:12	638:12	8	;
EXPR_STATEMENT	639:4	639:54	7	err = TIFFReadDirEntryCheckedDouble ( tif , direntry , & m ) ;
EXPR	639:4	639:4	8	err = TIFFReadDirEntryCheckedDouble ( tif , direntry , & m )
ASSIGN	639:4	639:8	9	err = TIFFReadDirEntryCheckedDouble ( tif , direntry , & m )
LVAL	639:4	639:4	10	err
FIELD	639:4	639:4	11	err
LEAF_NODE	639:4	639:4	12	err
ASSIGN_OP	639:7	639:7	10	=
LEAF_NODE	639:7	639:7	11	=
RVAL	639:8	639:8	10	TIFFReadDirEntryCheckedDouble ( tif , direntry , & m )
FUNCTION_CALL	639:8	639:53	11	TIFFReadDirEntryCheckedDouble ( tif , direntry , & m )
CALLEE	639:8	639:8	12	TIFFReadDirEntryCheckedDouble
LEAF_NODE	639:8	639:8	13	TIFFReadDirEntryCheckedDouble
LEAF_NODE	639:37	639:37	12	(
ARGUMENT	639:38	639:38	12	tif
FIELD	639:38	639:38	13	tif
LEAF_NODE	639:38	639:38	14	tif
LEAF_NODE	639:41	639:41	12	,
ARGUMENT	639:42	639:42	12	direntry
FIELD	639:42	639:42	13	direntry
LEAF_NODE	639:42	639:42	14	direntry
LEAF_NODE	639:50	639:50	12	,
ARGUMENT	639:51	639:51	12	& m
UNARY_EXPR	639:51	639:52	13	& m
UNARY_OPERATOR	639:51	639:51	14	&
LEAF_NODE	639:51	639:51	15	&
FIELD	639:52	639:52	14	m
LEAF_NODE	639:52	639:52	15	m
LEAF_NODE	639:53	639:53	12	)
LEAF_NODE	639:54	639:54	8	;
SELECTION	640:4	641:5	7	
KEYWORD	640:4	640:4	8	if
LEAF_NODE	640:4	640:4	9	if
LEAF_NODE	640:7	640:7	8	(
CONDITION	640:8	640:8	8	err != TIFFReadDirEntryErrOk
EXPR	640:8	640:13	9	err != TIFFReadDirEntryErrOk
FIELD	640:8	640:8	10	err
LEAF_NODE	640:8	640:8	11	err
EQ_OPERATOR	640:11	640:11	10	!=
LEAF_NODE	640:11	640:11	11	!=
FIELD	640:13	640:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	640:13	640:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	640:34	640:34	8	)
STATEMENTS	641:5	641:5	8	
LEAF_NODE	641:5	641:5	9	return
LEAF_NODE	641:11	641:11	7	(
LEAF_NODE	641:12	641:12	7	err
LEAF_NODE	641:15	641:15	7	)
LEAF_NODE	641:16	641:16	7	;
SELECTION	642:4	643:5	7	
KEYWORD	642:4	642:4	8	if
LEAF_NODE	642:4	642:4	9	if
LEAF_NODE	642:7	642:7	8	(
CONDITION	642:8	642:8	8	( m > FLT_MAX ) || ( m < FLT_MIN )
EXPR	642:8	642:8	9	( m > FLT_MAX ) || ( m < FLT_MIN )
OR	642:8	642:25	10	( m > FLT_MAX ) || ( m < FLT_MIN )
EXPR	642:8	642:20	11	( m > FLT_MAX )
LEAF_NODE	642:8	642:8	12	(
FIELD	642:9	642:9	12	m
LEAF_NODE	642:9	642:9	13	m
REL_OPERATOR	642:11	642:11	12	>
LEAF_NODE	642:11	642:11	13	>
FIELD	642:13	642:13	12	FLT_MAX
LEAF_NODE	642:13	642:13	13	FLT_MAX
LEAF_NODE	642:20	642:20	12	)
LEAF_NODE	642:22	642:22	11	||
EXPR	642:25	642:37	11	( m < FLT_MIN )
LEAF_NODE	642:25	642:25	12	(
FIELD	642:26	642:26	12	m
LEAF_NODE	642:26	642:26	13	m
REL_OPERATOR	642:28	642:28	12	<
LEAF_NODE	642:28	642:28	13	<
FIELD	642:30	642:30	12	FLT_MIN
LEAF_NODE	642:30	642:30	13	FLT_MIN
LEAF_NODE	642:37	642:37	12	)
LEAF_NODE	642:38	642:38	8	)
STATEMENTS	643:5	643:5	8	
LEAF_NODE	643:5	643:5	9	return
LEAF_NODE	643:11	643:11	7	(
LEAF_NODE	643:12	643:12	7	TIFFReadDirEntryErrRange
LEAF_NODE	643:36	643:36	7	)
LEAF_NODE	643:37	643:37	7	;
EXPR_STATEMENT	644:4	644:19	7	* value = ( float ) m ;
EXPR	644:4	644:4	8	* value = ( float ) m
ASSIGN	644:4	644:11	9	* value = ( float ) m
LVAL	644:4	644:4	10	* value
UNARY_EXPR	644:4	644:5	11	* value
UNARY_OPERATOR	644:4	644:4	12	*
LEAF_NODE	644:4	644:4	13	*
FIELD	644:5	644:5	12	value
LEAF_NODE	644:5	644:5	13	value
ASSIGN_OP	644:10	644:10	10	=
LEAF_NODE	644:10	644:10	11	=
RVAL	644:11	644:18	10	( float ) m
LEAF_NODE	644:11	644:11	11	(
TYPE_NAME	644:12	644:12	11	float
LEAF_NODE	644:12	644:12	12	float
LEAF_NODE	644:17	644:17	11	)
FIELD	644:18	644:18	11	m
LEAF_NODE	644:18	644:18	12	m
LEAF_NODE	644:19	644:19	8	;
LEAF_NODE	645:4	645:4	7	return
LEAF_NODE	645:10	645:10	7	(
LEAF_NODE	645:11	645:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	645:32	645:32	7	)
LEAF_NODE	645:33	645:33	7	;
LEAF_NODE	646:3	646:3	6	}
LABEL	647:2	647:9	6	default :
LEAF_NODE	647:2	647:2	7	default
LEAF_NODE	647:9	647:9	7	:
LEAF_NODE	648:3	648:3	6	return
LEAF_NODE	648:9	648:9	6	(
LEAF_NODE	648:10	648:10	6	TIFFReadDirEntryErrType
LEAF_NODE	648:33	648:33	6	)
LEAF_NODE	648:34	648:34	6	;
LEAF_NODE	649:1	649:1	5	}
LEAF_NODE	650:0	650:0	2	}
FUNCTION_DEF	652:0	747:0	1	
RETURN_TYPE	652:0	652:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	652:0	652:0	3	static
TYPE_NAME	652:7	652:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	652:7	652:7	4	enum
LEAF_NODE	652:12	652:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	652:32	652:32	2	TIFFReadDirEntryDouble
LEAF_NODE	652:32	652:32	3	TIFFReadDirEntryDouble
PARAMETER_LIST	652:54	652:103	2	( TIFF * tif , TIFFDirEntry * direntry , double * value )
LEAF_NODE	652:54	652:54	3	(
PARAMETER_DECL	652:55	652:61	3	TIFF * tif
TYPE	652:55	652:59	4	TIFF *
TYPE_NAME	652:55	652:55	5	TIFF
LEAF_NODE	652:55	652:55	6	TIFF
POINTER	652:59	652:59	5	*
LEAF_NODE	652:59	652:59	6	*
NAME	652:61	652:61	4	tif
LEAF_NODE	652:61	652:61	5	tif
LEAF_NODE	652:64	652:64	3	,
PARAMETER_DECL	652:66	652:80	3	TIFFDirEntry * direntry
TYPE	652:66	652:78	4	TIFFDirEntry *
TYPE_NAME	652:66	652:66	5	TIFFDirEntry
LEAF_NODE	652:66	652:66	6	TIFFDirEntry
POINTER	652:78	652:78	5	*
LEAF_NODE	652:78	652:78	6	*
NAME	652:80	652:80	4	direntry
LEAF_NODE	652:80	652:80	5	direntry
LEAF_NODE	652:88	652:88	3	,
PARAMETER_DECL	652:90	652:98	3	double * value
TYPE	652:90	652:96	4	double *
TYPE_NAME	652:90	652:90	5	double
LEAF_NODE	652:90	652:90	6	double
POINTER	652:96	652:96	5	*
LEAF_NODE	652:96	652:96	6	*
NAME	652:98	652:98	4	value
LEAF_NODE	652:98	652:98	5	value
LEAF_NODE	652:103	652:103	3	)
LEAF_NODE	653:0	653:0	2	{
STATEMENTS	654:1	657:1	2	
SIMPLE_DECL	654:1	654:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	654:1	654:26	4	enum TIFFReadDirEntryErr err
TYPE	654:1	654:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	654:1	654:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	654:1	654:1	7	enum
LEAF_NODE	654:6	654:6	7	TIFFReadDirEntryErr
NAME	654:26	654:26	5	err
LEAF_NODE	654:26	654:26	6	err
LEAF_NODE	654:29	654:29	4	;
SELECTION	655:1	656:2	3	
KEYWORD	655:1	655:1	4	if
LEAF_NODE	655:1	655:1	5	if
LEAF_NODE	655:4	655:4	4	(
CONDITION	655:5	655:5	4	direntry -> tdir_count != 1
EXPR	655:5	655:27	5	direntry -> tdir_count != 1
FIELD	655:5	655:15	6	direntry -> tdir_count
LEAF_NODE	655:5	655:5	7	direntry
LEAF_NODE	655:13	655:13	7	->
LEAF_NODE	655:15	655:15	7	tdir_count
EQ_OPERATOR	655:25	655:25	6	!=
LEAF_NODE	655:25	655:25	7	!=
FIELD	655:27	655:27	6	1
LEAF_NODE	655:27	655:27	7	1
LEAF_NODE	655:28	655:28	4	)
STATEMENTS	656:2	656:2	4	
LEAF_NODE	656:2	656:2	5	return
LEAF_NODE	656:8	656:8	3	(
LEAF_NODE	656:9	656:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	656:33	656:33	3	)
LEAF_NODE	656:34	656:34	3	;
SELECTION	657:1	658:1	3	
KEYWORD	657:1	657:1	4	switch
LEAF_NODE	657:1	657:1	5	switch
LEAF_NODE	657:8	657:8	4	(
CONDITION	657:9	657:9	4	direntry -> tdir_type
EXPR	657:9	657:9	5	direntry -> tdir_type
FIELD	657:9	657:19	6	direntry -> tdir_type
LEAF_NODE	657:9	657:9	7	direntry
LEAF_NODE	657:17	657:17	7	->
LEAF_NODE	657:19	657:19	7	tdir_type
LEAF_NODE	657:28	657:28	4	)
STATEMENTS	658:1	746:1	4	
LEAF_NODE	658:1	658:1	5	{
STATEMENTS	659:2	745:34	5	
LABEL	659:2	659:16	6	case TIFF_BYTE :
LEAF_NODE	659:2	659:2	7	case
LEAF_NODE	659:7	659:7	7	TIFF_BYTE
LEAF_NODE	659:16	659:16	7	:
LEAF_NODE	660:3	660:3	6	{
STATEMENTS	661:4	664:33	6	
SIMPLE_DECL	661:4	661:11	7	uint8 m ;
VAR_DECL	661:4	661:10	8	uint8 m
TYPE	661:4	661:4	9	uint8
TYPE_NAME	661:4	661:4	10	uint8
LEAF_NODE	661:4	661:4	11	uint8
NAME	661:10	661:10	9	m
LEAF_NODE	661:10	661:10	10	m
LEAF_NODE	661:11	661:11	8	;
EXPR_STATEMENT	662:4	662:48	7	TIFFReadDirEntryCheckedByte ( tif , direntry , & m ) ;
EXPR	662:4	662:4	8	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
FUNCTION_CALL	662:4	662:47	9	TIFFReadDirEntryCheckedByte ( tif , direntry , & m )
CALLEE	662:4	662:4	10	TIFFReadDirEntryCheckedByte
LEAF_NODE	662:4	662:4	11	TIFFReadDirEntryCheckedByte
LEAF_NODE	662:31	662:31	10	(
ARGUMENT	662:32	662:32	10	tif
FIELD	662:32	662:32	11	tif
LEAF_NODE	662:32	662:32	12	tif
LEAF_NODE	662:35	662:35	10	,
ARGUMENT	662:36	662:36	10	direntry
FIELD	662:36	662:36	11	direntry
LEAF_NODE	662:36	662:36	12	direntry
LEAF_NODE	662:44	662:44	10	,
ARGUMENT	662:45	662:45	10	& m
UNARY_EXPR	662:45	662:46	11	& m
UNARY_OPERATOR	662:45	662:45	12	&
LEAF_NODE	662:45	662:45	13	&
FIELD	662:46	662:46	12	m
LEAF_NODE	662:46	662:46	13	m
LEAF_NODE	662:47	662:47	10	)
LEAF_NODE	662:48	662:48	8	;
EXPR_STATEMENT	663:4	663:20	7	* value = ( double ) m ;
EXPR	663:4	663:4	8	* value = ( double ) m
ASSIGN	663:4	663:11	9	* value = ( double ) m
LVAL	663:4	663:4	10	* value
UNARY_EXPR	663:4	663:5	11	* value
UNARY_OPERATOR	663:4	663:4	12	*
LEAF_NODE	663:4	663:4	13	*
FIELD	663:5	663:5	12	value
LEAF_NODE	663:5	663:5	13	value
ASSIGN_OP	663:10	663:10	10	=
LEAF_NODE	663:10	663:10	11	=
RVAL	663:11	663:19	10	( double ) m
LEAF_NODE	663:11	663:11	11	(
TYPE_NAME	663:12	663:12	11	double
LEAF_NODE	663:12	663:12	12	double
LEAF_NODE	663:18	663:18	11	)
FIELD	663:19	663:19	11	m
LEAF_NODE	663:19	663:19	12	m
LEAF_NODE	663:20	663:20	8	;
LEAF_NODE	664:4	664:4	7	return
LEAF_NODE	664:10	664:10	7	(
LEAF_NODE	664:11	664:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	664:32	664:32	7	)
LEAF_NODE	664:33	664:33	7	;
LEAF_NODE	665:3	665:3	6	}
LABEL	666:2	666:17	6	case TIFF_SBYTE :
LEAF_NODE	666:2	666:2	7	case
LEAF_NODE	666:7	666:7	7	TIFF_SBYTE
LEAF_NODE	666:17	666:17	7	:
LEAF_NODE	667:3	667:3	6	{
STATEMENTS	668:4	671:33	6	
SIMPLE_DECL	668:4	668:10	7	int8 m ;
VAR_DECL	668:4	668:9	8	int8 m
TYPE	668:4	668:4	9	int8
TYPE_NAME	668:4	668:4	10	int8
LEAF_NODE	668:4	668:4	11	int8
NAME	668:9	668:9	9	m
LEAF_NODE	668:9	668:9	10	m
LEAF_NODE	668:10	668:10	8	;
EXPR_STATEMENT	669:4	669:49	7	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m ) ;
EXPR	669:4	669:4	8	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
FUNCTION_CALL	669:4	669:48	9	TIFFReadDirEntryCheckedSbyte ( tif , direntry , & m )
CALLEE	669:4	669:4	10	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	669:4	669:4	11	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	669:32	669:32	10	(
ARGUMENT	669:33	669:33	10	tif
FIELD	669:33	669:33	11	tif
LEAF_NODE	669:33	669:33	12	tif
LEAF_NODE	669:36	669:36	10	,
ARGUMENT	669:37	669:37	10	direntry
FIELD	669:37	669:37	11	direntry
LEAF_NODE	669:37	669:37	12	direntry
LEAF_NODE	669:45	669:45	10	,
ARGUMENT	669:46	669:46	10	& m
UNARY_EXPR	669:46	669:47	11	& m
UNARY_OPERATOR	669:46	669:46	12	&
LEAF_NODE	669:46	669:46	13	&
FIELD	669:47	669:47	12	m
LEAF_NODE	669:47	669:47	13	m
LEAF_NODE	669:48	669:48	10	)
LEAF_NODE	669:49	669:49	8	;
EXPR_STATEMENT	670:4	670:20	7	* value = ( double ) m ;
EXPR	670:4	670:4	8	* value = ( double ) m
ASSIGN	670:4	670:11	9	* value = ( double ) m
LVAL	670:4	670:4	10	* value
UNARY_EXPR	670:4	670:5	11	* value
UNARY_OPERATOR	670:4	670:4	12	*
LEAF_NODE	670:4	670:4	13	*
FIELD	670:5	670:5	12	value
LEAF_NODE	670:5	670:5	13	value
ASSIGN_OP	670:10	670:10	10	=
LEAF_NODE	670:10	670:10	11	=
RVAL	670:11	670:19	10	( double ) m
LEAF_NODE	670:11	670:11	11	(
TYPE_NAME	670:12	670:12	11	double
LEAF_NODE	670:12	670:12	12	double
LEAF_NODE	670:18	670:18	11	)
FIELD	670:19	670:19	11	m
LEAF_NODE	670:19	670:19	12	m
LEAF_NODE	670:20	670:20	8	;
LEAF_NODE	671:4	671:4	7	return
LEAF_NODE	671:10	671:10	7	(
LEAF_NODE	671:11	671:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	671:32	671:32	7	)
LEAF_NODE	671:33	671:33	7	;
LEAF_NODE	672:3	672:3	6	}
LABEL	673:2	673:17	6	case TIFF_SHORT :
LEAF_NODE	673:2	673:2	7	case
LEAF_NODE	673:7	673:7	7	TIFF_SHORT
LEAF_NODE	673:17	673:17	7	:
LEAF_NODE	674:3	674:3	6	{
STATEMENTS	675:4	678:33	6	
SIMPLE_DECL	675:4	675:12	7	uint16 m ;
VAR_DECL	675:4	675:11	8	uint16 m
TYPE	675:4	675:4	9	uint16
TYPE_NAME	675:4	675:4	10	uint16
LEAF_NODE	675:4	675:4	11	uint16
NAME	675:11	675:11	9	m
LEAF_NODE	675:11	675:11	10	m
LEAF_NODE	675:12	675:12	8	;
EXPR_STATEMENT	676:4	676:49	7	TIFFReadDirEntryCheckedShort ( tif , direntry , & m ) ;
EXPR	676:4	676:4	8	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
FUNCTION_CALL	676:4	676:48	9	TIFFReadDirEntryCheckedShort ( tif , direntry , & m )
CALLEE	676:4	676:4	10	TIFFReadDirEntryCheckedShort
LEAF_NODE	676:4	676:4	11	TIFFReadDirEntryCheckedShort
LEAF_NODE	676:32	676:32	10	(
ARGUMENT	676:33	676:33	10	tif
FIELD	676:33	676:33	11	tif
LEAF_NODE	676:33	676:33	12	tif
LEAF_NODE	676:36	676:36	10	,
ARGUMENT	676:37	676:37	10	direntry
FIELD	676:37	676:37	11	direntry
LEAF_NODE	676:37	676:37	12	direntry
LEAF_NODE	676:45	676:45	10	,
ARGUMENT	676:46	676:46	10	& m
UNARY_EXPR	676:46	676:47	11	& m
UNARY_OPERATOR	676:46	676:46	12	&
LEAF_NODE	676:46	676:46	13	&
FIELD	676:47	676:47	12	m
LEAF_NODE	676:47	676:47	13	m
LEAF_NODE	676:48	676:48	10	)
LEAF_NODE	676:49	676:49	8	;
EXPR_STATEMENT	677:4	677:20	7	* value = ( double ) m ;
EXPR	677:4	677:4	8	* value = ( double ) m
ASSIGN	677:4	677:11	9	* value = ( double ) m
LVAL	677:4	677:4	10	* value
UNARY_EXPR	677:4	677:5	11	* value
UNARY_OPERATOR	677:4	677:4	12	*
LEAF_NODE	677:4	677:4	13	*
FIELD	677:5	677:5	12	value
LEAF_NODE	677:5	677:5	13	value
ASSIGN_OP	677:10	677:10	10	=
LEAF_NODE	677:10	677:10	11	=
RVAL	677:11	677:19	10	( double ) m
LEAF_NODE	677:11	677:11	11	(
TYPE_NAME	677:12	677:12	11	double
LEAF_NODE	677:12	677:12	12	double
LEAF_NODE	677:18	677:18	11	)
FIELD	677:19	677:19	11	m
LEAF_NODE	677:19	677:19	12	m
LEAF_NODE	677:20	677:20	8	;
LEAF_NODE	678:4	678:4	7	return
LEAF_NODE	678:10	678:10	7	(
LEAF_NODE	678:11	678:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	678:32	678:32	7	)
LEAF_NODE	678:33	678:33	7	;
LEAF_NODE	679:3	679:3	6	}
LABEL	680:2	680:18	6	case TIFF_SSHORT :
LEAF_NODE	680:2	680:2	7	case
LEAF_NODE	680:7	680:7	7	TIFF_SSHORT
LEAF_NODE	680:18	680:18	7	:
LEAF_NODE	681:3	681:3	6	{
STATEMENTS	682:4	685:33	6	
SIMPLE_DECL	682:4	682:11	7	int16 m ;
VAR_DECL	682:4	682:10	8	int16 m
TYPE	682:4	682:4	9	int16
TYPE_NAME	682:4	682:4	10	int16
LEAF_NODE	682:4	682:4	11	int16
NAME	682:10	682:10	9	m
LEAF_NODE	682:10	682:10	10	m
LEAF_NODE	682:11	682:11	8	;
EXPR_STATEMENT	683:4	683:50	7	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m ) ;
EXPR	683:4	683:4	8	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
FUNCTION_CALL	683:4	683:49	9	TIFFReadDirEntryCheckedSshort ( tif , direntry , & m )
CALLEE	683:4	683:4	10	TIFFReadDirEntryCheckedSshort
LEAF_NODE	683:4	683:4	11	TIFFReadDirEntryCheckedSshort
LEAF_NODE	683:33	683:33	10	(
ARGUMENT	683:34	683:34	10	tif
FIELD	683:34	683:34	11	tif
LEAF_NODE	683:34	683:34	12	tif
LEAF_NODE	683:37	683:37	10	,
ARGUMENT	683:38	683:38	10	direntry
FIELD	683:38	683:38	11	direntry
LEAF_NODE	683:38	683:38	12	direntry
LEAF_NODE	683:46	683:46	10	,
ARGUMENT	683:47	683:47	10	& m
UNARY_EXPR	683:47	683:48	11	& m
UNARY_OPERATOR	683:47	683:47	12	&
LEAF_NODE	683:47	683:47	13	&
FIELD	683:48	683:48	12	m
LEAF_NODE	683:48	683:48	13	m
LEAF_NODE	683:49	683:49	10	)
LEAF_NODE	683:50	683:50	8	;
EXPR_STATEMENT	684:4	684:20	7	* value = ( double ) m ;
EXPR	684:4	684:4	8	* value = ( double ) m
ASSIGN	684:4	684:11	9	* value = ( double ) m
LVAL	684:4	684:4	10	* value
UNARY_EXPR	684:4	684:5	11	* value
UNARY_OPERATOR	684:4	684:4	12	*
LEAF_NODE	684:4	684:4	13	*
FIELD	684:5	684:5	12	value
LEAF_NODE	684:5	684:5	13	value
ASSIGN_OP	684:10	684:10	10	=
LEAF_NODE	684:10	684:10	11	=
RVAL	684:11	684:19	10	( double ) m
LEAF_NODE	684:11	684:11	11	(
TYPE_NAME	684:12	684:12	11	double
LEAF_NODE	684:12	684:12	12	double
LEAF_NODE	684:18	684:18	11	)
FIELD	684:19	684:19	11	m
LEAF_NODE	684:19	684:19	12	m
LEAF_NODE	684:20	684:20	8	;
LEAF_NODE	685:4	685:4	7	return
LEAF_NODE	685:10	685:10	7	(
LEAF_NODE	685:11	685:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	685:32	685:32	7	)
LEAF_NODE	685:33	685:33	7	;
LEAF_NODE	686:3	686:3	6	}
LABEL	687:2	687:16	6	case TIFF_LONG :
LEAF_NODE	687:2	687:2	7	case
LEAF_NODE	687:7	687:7	7	TIFF_LONG
LEAF_NODE	687:16	687:16	7	:
LEAF_NODE	688:3	688:3	6	{
STATEMENTS	689:4	692:33	6	
SIMPLE_DECL	689:4	689:12	7	uint32 m ;
VAR_DECL	689:4	689:11	8	uint32 m
TYPE	689:4	689:4	9	uint32
TYPE_NAME	689:4	689:4	10	uint32
LEAF_NODE	689:4	689:4	11	uint32
NAME	689:11	689:11	9	m
LEAF_NODE	689:11	689:11	10	m
LEAF_NODE	689:12	689:12	8	;
EXPR_STATEMENT	690:4	690:48	7	TIFFReadDirEntryCheckedLong ( tif , direntry , & m ) ;
EXPR	690:4	690:4	8	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
FUNCTION_CALL	690:4	690:47	9	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
CALLEE	690:4	690:4	10	TIFFReadDirEntryCheckedLong
LEAF_NODE	690:4	690:4	11	TIFFReadDirEntryCheckedLong
LEAF_NODE	690:31	690:31	10	(
ARGUMENT	690:32	690:32	10	tif
FIELD	690:32	690:32	11	tif
LEAF_NODE	690:32	690:32	12	tif
LEAF_NODE	690:35	690:35	10	,
ARGUMENT	690:36	690:36	10	direntry
FIELD	690:36	690:36	11	direntry
LEAF_NODE	690:36	690:36	12	direntry
LEAF_NODE	690:44	690:44	10	,
ARGUMENT	690:45	690:45	10	& m
UNARY_EXPR	690:45	690:46	11	& m
UNARY_OPERATOR	690:45	690:45	12	&
LEAF_NODE	690:45	690:45	13	&
FIELD	690:46	690:46	12	m
LEAF_NODE	690:46	690:46	13	m
LEAF_NODE	690:47	690:47	10	)
LEAF_NODE	690:48	690:48	8	;
EXPR_STATEMENT	691:4	691:20	7	* value = ( double ) m ;
EXPR	691:4	691:4	8	* value = ( double ) m
ASSIGN	691:4	691:11	9	* value = ( double ) m
LVAL	691:4	691:4	10	* value
UNARY_EXPR	691:4	691:5	11	* value
UNARY_OPERATOR	691:4	691:4	12	*
LEAF_NODE	691:4	691:4	13	*
FIELD	691:5	691:5	12	value
LEAF_NODE	691:5	691:5	13	value
ASSIGN_OP	691:10	691:10	10	=
LEAF_NODE	691:10	691:10	11	=
RVAL	691:11	691:19	10	( double ) m
LEAF_NODE	691:11	691:11	11	(
TYPE_NAME	691:12	691:12	11	double
LEAF_NODE	691:12	691:12	12	double
LEAF_NODE	691:18	691:18	11	)
FIELD	691:19	691:19	11	m
LEAF_NODE	691:19	691:19	12	m
LEAF_NODE	691:20	691:20	8	;
LEAF_NODE	692:4	692:4	7	return
LEAF_NODE	692:10	692:10	7	(
LEAF_NODE	692:11	692:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	692:32	692:32	7	)
LEAF_NODE	692:33	692:33	7	;
LEAF_NODE	693:3	693:3	6	}
LABEL	694:2	694:17	6	case TIFF_SLONG :
LEAF_NODE	694:2	694:2	7	case
LEAF_NODE	694:7	694:7	7	TIFF_SLONG
LEAF_NODE	694:17	694:17	7	:
LEAF_NODE	695:3	695:3	6	{
STATEMENTS	696:4	699:33	6	
SIMPLE_DECL	696:4	696:11	7	int32 m ;
VAR_DECL	696:4	696:10	8	int32 m
TYPE	696:4	696:4	9	int32
TYPE_NAME	696:4	696:4	10	int32
LEAF_NODE	696:4	696:4	11	int32
NAME	696:10	696:10	9	m
LEAF_NODE	696:10	696:10	10	m
LEAF_NODE	696:11	696:11	8	;
EXPR_STATEMENT	697:4	697:49	7	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m ) ;
EXPR	697:4	697:4	8	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
FUNCTION_CALL	697:4	697:48	9	TIFFReadDirEntryCheckedSlong ( tif , direntry , & m )
CALLEE	697:4	697:4	10	TIFFReadDirEntryCheckedSlong
LEAF_NODE	697:4	697:4	11	TIFFReadDirEntryCheckedSlong
LEAF_NODE	697:32	697:32	10	(
ARGUMENT	697:33	697:33	10	tif
FIELD	697:33	697:33	11	tif
LEAF_NODE	697:33	697:33	12	tif
LEAF_NODE	697:36	697:36	10	,
ARGUMENT	697:37	697:37	10	direntry
FIELD	697:37	697:37	11	direntry
LEAF_NODE	697:37	697:37	12	direntry
LEAF_NODE	697:45	697:45	10	,
ARGUMENT	697:46	697:46	10	& m
UNARY_EXPR	697:46	697:47	11	& m
UNARY_OPERATOR	697:46	697:46	12	&
LEAF_NODE	697:46	697:46	13	&
FIELD	697:47	697:47	12	m
LEAF_NODE	697:47	697:47	13	m
LEAF_NODE	697:48	697:48	10	)
LEAF_NODE	697:49	697:49	8	;
EXPR_STATEMENT	698:4	698:20	7	* value = ( double ) m ;
EXPR	698:4	698:4	8	* value = ( double ) m
ASSIGN	698:4	698:11	9	* value = ( double ) m
LVAL	698:4	698:4	10	* value
UNARY_EXPR	698:4	698:5	11	* value
UNARY_OPERATOR	698:4	698:4	12	*
LEAF_NODE	698:4	698:4	13	*
FIELD	698:5	698:5	12	value
LEAF_NODE	698:5	698:5	13	value
ASSIGN_OP	698:10	698:10	10	=
LEAF_NODE	698:10	698:10	11	=
RVAL	698:11	698:19	10	( double ) m
LEAF_NODE	698:11	698:11	11	(
TYPE_NAME	698:12	698:12	11	double
LEAF_NODE	698:12	698:12	12	double
LEAF_NODE	698:18	698:18	11	)
FIELD	698:19	698:19	11	m
LEAF_NODE	698:19	698:19	12	m
LEAF_NODE	698:20	698:20	8	;
LEAF_NODE	699:4	699:4	7	return
LEAF_NODE	699:10	699:10	7	(
LEAF_NODE	699:11	699:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	699:32	699:32	7	)
LEAF_NODE	699:33	699:33	7	;
LEAF_NODE	700:3	700:3	6	}
LABEL	701:2	701:17	6	case TIFF_LONG8 :
LEAF_NODE	701:2	701:2	7	case
LEAF_NODE	701:7	701:7	7	TIFF_LONG8
LEAF_NODE	701:17	701:17	7	:
LEAF_NODE	702:3	702:3	6	{
STATEMENTS	703:4	717:33	6	
SIMPLE_DECL	703:4	703:12	7	uint64 m ;
VAR_DECL	703:4	703:11	8	uint64 m
TYPE	703:4	703:4	9	uint64
TYPE_NAME	703:4	703:4	10	uint64
LEAF_NODE	703:4	703:4	11	uint64
NAME	703:11	703:11	9	m
LEAF_NODE	703:11	703:11	10	m
LEAF_NODE	703:12	703:12	8	;
EXPR_STATEMENT	704:4	704:53	7	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m ) ;
EXPR	704:4	704:4	8	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
ASSIGN	704:4	704:8	9	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
LVAL	704:4	704:4	10	err
FIELD	704:4	704:4	11	err
LEAF_NODE	704:4	704:4	12	err
ASSIGN_OP	704:7	704:7	10	=
LEAF_NODE	704:7	704:7	11	=
RVAL	704:8	704:8	10	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
FUNCTION_CALL	704:8	704:52	11	TIFFReadDirEntryCheckedLong8 ( tif , direntry , & m )
CALLEE	704:8	704:8	12	TIFFReadDirEntryCheckedLong8
LEAF_NODE	704:8	704:8	13	TIFFReadDirEntryCheckedLong8
LEAF_NODE	704:36	704:36	12	(
ARGUMENT	704:37	704:37	12	tif
FIELD	704:37	704:37	13	tif
LEAF_NODE	704:37	704:37	14	tif
LEAF_NODE	704:40	704:40	12	,
ARGUMENT	704:41	704:41	12	direntry
FIELD	704:41	704:41	13	direntry
LEAF_NODE	704:41	704:41	14	direntry
LEAF_NODE	704:49	704:49	12	,
ARGUMENT	704:50	704:50	12	& m
UNARY_EXPR	704:50	704:51	13	& m
UNARY_OPERATOR	704:50	704:50	14	&
LEAF_NODE	704:50	704:50	15	&
FIELD	704:51	704:51	14	m
LEAF_NODE	704:51	704:51	15	m
LEAF_NODE	704:52	704:52	12	)
LEAF_NODE	704:53	704:53	8	;
SELECTION	705:4	706:5	7	
KEYWORD	705:4	705:4	8	if
LEAF_NODE	705:4	705:4	9	if
LEAF_NODE	705:7	705:7	8	(
CONDITION	705:8	705:8	8	err != TIFFReadDirEntryErrOk
EXPR	705:8	705:13	9	err != TIFFReadDirEntryErrOk
FIELD	705:8	705:8	10	err
LEAF_NODE	705:8	705:8	11	err
EQ_OPERATOR	705:11	705:11	10	!=
LEAF_NODE	705:11	705:11	11	!=
FIELD	705:13	705:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	705:13	705:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	705:34	705:34	8	)
STATEMENTS	706:5	706:5	8	
LEAF_NODE	706:5	706:5	9	return
LEAF_NODE	706:11	706:11	7	(
LEAF_NODE	706:12	706:12	7	err
LEAF_NODE	706:15	706:15	7	)
LEAF_NODE	706:16	706:16	7	;
EXPR_STATEMENT	713:4	713:35	7	* value = _TIFFUInt64ToDouble ( m ) ;
EXPR	713:4	713:4	8	* value = _TIFFUInt64ToDouble ( m )
ASSIGN	713:4	713:13	9	* value = _TIFFUInt64ToDouble ( m )
LVAL	713:4	713:4	10	* value
UNARY_EXPR	713:4	713:5	11	* value
UNARY_OPERATOR	713:4	713:4	12	*
LEAF_NODE	713:4	713:4	13	*
FIELD	713:5	713:5	12	value
LEAF_NODE	713:5	713:5	13	value
ASSIGN_OP	713:11	713:11	10	=
LEAF_NODE	713:11	713:11	11	=
RVAL	713:13	713:13	10	_TIFFUInt64ToDouble ( m )
FUNCTION_CALL	713:13	713:34	11	_TIFFUInt64ToDouble ( m )
CALLEE	713:13	713:13	12	_TIFFUInt64ToDouble
LEAF_NODE	713:13	713:13	13	_TIFFUInt64ToDouble
LEAF_NODE	713:32	713:32	12	(
ARGUMENT	713:33	713:33	12	m
FIELD	713:33	713:33	13	m
LEAF_NODE	713:33	713:33	14	m
LEAF_NODE	713:34	713:34	12	)
LEAF_NODE	713:35	713:35	8	;
EXPR_STATEMENT	715:4	715:22	7	* value = ( double ) m ;
EXPR	715:4	715:4	8	* value = ( double ) m
ASSIGN	715:4	715:13	9	* value = ( double ) m
LVAL	715:4	715:4	10	* value
UNARY_EXPR	715:4	715:5	11	* value
UNARY_OPERATOR	715:4	715:4	12	*
LEAF_NODE	715:4	715:4	13	*
FIELD	715:5	715:5	12	value
LEAF_NODE	715:5	715:5	13	value
ASSIGN_OP	715:11	715:11	10	=
LEAF_NODE	715:11	715:11	11	=
RVAL	715:13	715:21	10	( double ) m
LEAF_NODE	715:13	715:13	11	(
TYPE_NAME	715:14	715:14	11	double
LEAF_NODE	715:14	715:14	12	double
LEAF_NODE	715:20	715:20	11	)
FIELD	715:21	715:21	11	m
LEAF_NODE	715:21	715:21	12	m
LEAF_NODE	715:22	715:22	8	;
LEAF_NODE	717:4	717:4	7	return
LEAF_NODE	717:10	717:10	7	(
LEAF_NODE	717:11	717:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	717:32	717:32	7	)
LEAF_NODE	717:33	717:33	7	;
LEAF_NODE	718:3	718:3	6	}
LABEL	719:2	719:18	6	case TIFF_SLONG8 :
LEAF_NODE	719:2	719:2	7	case
LEAF_NODE	719:7	719:7	7	TIFF_SLONG8
LEAF_NODE	719:18	719:18	7	:
LEAF_NODE	720:3	720:3	6	{
STATEMENTS	721:4	726:33	6	
SIMPLE_DECL	721:4	721:11	7	int64 m ;
VAR_DECL	721:4	721:10	8	int64 m
TYPE	721:4	721:4	9	int64
TYPE_NAME	721:4	721:4	10	int64
LEAF_NODE	721:4	721:4	11	int64
NAME	721:10	721:10	9	m
LEAF_NODE	721:10	721:10	10	m
LEAF_NODE	721:11	721:11	8	;
EXPR_STATEMENT	722:4	722:54	7	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m ) ;
EXPR	722:4	722:4	8	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
ASSIGN	722:4	722:8	9	err = TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
LVAL	722:4	722:4	10	err
FIELD	722:4	722:4	11	err
LEAF_NODE	722:4	722:4	12	err
ASSIGN_OP	722:7	722:7	10	=
LEAF_NODE	722:7	722:7	11	=
RVAL	722:8	722:8	10	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
FUNCTION_CALL	722:8	722:53	11	TIFFReadDirEntryCheckedSlong8 ( tif , direntry , & m )
CALLEE	722:8	722:8	12	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	722:8	722:8	13	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	722:37	722:37	12	(
ARGUMENT	722:38	722:38	12	tif
FIELD	722:38	722:38	13	tif
LEAF_NODE	722:38	722:38	14	tif
LEAF_NODE	722:41	722:41	12	,
ARGUMENT	722:42	722:42	12	direntry
FIELD	722:42	722:42	13	direntry
LEAF_NODE	722:42	722:42	14	direntry
LEAF_NODE	722:50	722:50	12	,
ARGUMENT	722:51	722:51	12	& m
UNARY_EXPR	722:51	722:52	13	& m
UNARY_OPERATOR	722:51	722:51	14	&
LEAF_NODE	722:51	722:51	15	&
FIELD	722:52	722:52	14	m
LEAF_NODE	722:52	722:52	15	m
LEAF_NODE	722:53	722:53	12	)
LEAF_NODE	722:54	722:54	8	;
SELECTION	723:4	724:5	7	
KEYWORD	723:4	723:4	8	if
LEAF_NODE	723:4	723:4	9	if
LEAF_NODE	723:7	723:7	8	(
CONDITION	723:8	723:8	8	err != TIFFReadDirEntryErrOk
EXPR	723:8	723:13	9	err != TIFFReadDirEntryErrOk
FIELD	723:8	723:8	10	err
LEAF_NODE	723:8	723:8	11	err
EQ_OPERATOR	723:11	723:11	10	!=
LEAF_NODE	723:11	723:11	11	!=
FIELD	723:13	723:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	723:13	723:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	723:34	723:34	8	)
STATEMENTS	724:5	724:5	8	
LEAF_NODE	724:5	724:5	9	return
LEAF_NODE	724:11	724:11	7	(
LEAF_NODE	724:12	724:12	7	err
LEAF_NODE	724:15	724:15	7	)
LEAF_NODE	724:16	724:16	7	;
EXPR_STATEMENT	725:4	725:20	7	* value = ( double ) m ;
EXPR	725:4	725:4	8	* value = ( double ) m
ASSIGN	725:4	725:11	9	* value = ( double ) m
LVAL	725:4	725:4	10	* value
UNARY_EXPR	725:4	725:5	11	* value
UNARY_OPERATOR	725:4	725:4	12	*
LEAF_NODE	725:4	725:4	13	*
FIELD	725:5	725:5	12	value
LEAF_NODE	725:5	725:5	13	value
ASSIGN_OP	725:10	725:10	10	=
LEAF_NODE	725:10	725:10	11	=
RVAL	725:11	725:19	10	( double ) m
LEAF_NODE	725:11	725:11	11	(
TYPE_NAME	725:12	725:12	11	double
LEAF_NODE	725:12	725:12	12	double
LEAF_NODE	725:18	725:18	11	)
FIELD	725:19	725:19	11	m
LEAF_NODE	725:19	725:19	12	m
LEAF_NODE	725:20	725:20	8	;
LEAF_NODE	726:4	726:4	7	return
LEAF_NODE	726:10	726:10	7	(
LEAF_NODE	726:11	726:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	726:32	726:32	7	)
LEAF_NODE	726:33	726:33	7	;
LEAF_NODE	727:3	727:3	6	}
LABEL	728:2	728:20	6	case TIFF_RATIONAL :
LEAF_NODE	728:2	728:2	7	case
LEAF_NODE	728:7	728:7	7	TIFF_RATIONAL
LEAF_NODE	728:20	728:20	7	:
EXPR_STATEMENT	729:3	729:58	6	err = TIFFReadDirEntryCheckedRational ( tif , direntry , value ) ;
EXPR	729:3	729:3	7	err = TIFFReadDirEntryCheckedRational ( tif , direntry , value )
ASSIGN	729:3	729:7	8	err = TIFFReadDirEntryCheckedRational ( tif , direntry , value )
LVAL	729:3	729:3	9	err
FIELD	729:3	729:3	10	err
LEAF_NODE	729:3	729:3	11	err
ASSIGN_OP	729:6	729:6	9	=
LEAF_NODE	729:6	729:6	10	=
RVAL	729:7	729:7	9	TIFFReadDirEntryCheckedRational ( tif , direntry , value )
FUNCTION_CALL	729:7	729:57	10	TIFFReadDirEntryCheckedRational ( tif , direntry , value )
CALLEE	729:7	729:7	11	TIFFReadDirEntryCheckedRational
LEAF_NODE	729:7	729:7	12	TIFFReadDirEntryCheckedRational
LEAF_NODE	729:38	729:38	11	(
ARGUMENT	729:39	729:39	11	tif
FIELD	729:39	729:39	12	tif
LEAF_NODE	729:39	729:39	13	tif
LEAF_NODE	729:42	729:42	11	,
ARGUMENT	729:43	729:43	11	direntry
FIELD	729:43	729:43	12	direntry
LEAF_NODE	729:43	729:43	13	direntry
LEAF_NODE	729:51	729:51	11	,
ARGUMENT	729:52	729:52	11	value
FIELD	729:52	729:52	12	value
LEAF_NODE	729:52	729:52	13	value
LEAF_NODE	729:57	729:57	11	)
LEAF_NODE	729:58	729:58	7	;
LEAF_NODE	730:3	730:3	6	return
LEAF_NODE	730:9	730:9	6	(
LEAF_NODE	730:10	730:10	6	err
LEAF_NODE	730:13	730:13	6	)
LEAF_NODE	730:14	730:14	6	;
LABEL	731:2	731:21	6	case TIFF_SRATIONAL :
LEAF_NODE	731:2	731:2	7	case
LEAF_NODE	731:7	731:7	7	TIFF_SRATIONAL
LEAF_NODE	731:21	731:21	7	:
EXPR_STATEMENT	732:3	732:59	6	err = TIFFReadDirEntryCheckedSrational ( tif , direntry , value ) ;
EXPR	732:3	732:3	7	err = TIFFReadDirEntryCheckedSrational ( tif , direntry , value )
ASSIGN	732:3	732:7	8	err = TIFFReadDirEntryCheckedSrational ( tif , direntry , value )
LVAL	732:3	732:3	9	err
FIELD	732:3	732:3	10	err
LEAF_NODE	732:3	732:3	11	err
ASSIGN_OP	732:6	732:6	9	=
LEAF_NODE	732:6	732:6	10	=
RVAL	732:7	732:7	9	TIFFReadDirEntryCheckedSrational ( tif , direntry , value )
FUNCTION_CALL	732:7	732:58	10	TIFFReadDirEntryCheckedSrational ( tif , direntry , value )
CALLEE	732:7	732:7	11	TIFFReadDirEntryCheckedSrational
LEAF_NODE	732:7	732:7	12	TIFFReadDirEntryCheckedSrational
LEAF_NODE	732:39	732:39	11	(
ARGUMENT	732:40	732:40	11	tif
FIELD	732:40	732:40	12	tif
LEAF_NODE	732:40	732:40	13	tif
LEAF_NODE	732:43	732:43	11	,
ARGUMENT	732:44	732:44	11	direntry
FIELD	732:44	732:44	12	direntry
LEAF_NODE	732:44	732:44	13	direntry
LEAF_NODE	732:52	732:52	11	,
ARGUMENT	732:53	732:53	11	value
FIELD	732:53	732:53	12	value
LEAF_NODE	732:53	732:53	13	value
LEAF_NODE	732:58	732:58	11	)
LEAF_NODE	732:59	732:59	7	;
LEAF_NODE	733:3	733:3	6	return
LEAF_NODE	733:9	733:9	6	(
LEAF_NODE	733:10	733:10	6	err
LEAF_NODE	733:13	733:13	6	)
LEAF_NODE	733:14	733:14	6	;
LABEL	734:2	734:17	6	case TIFF_FLOAT :
LEAF_NODE	734:2	734:2	7	case
LEAF_NODE	734:7	734:7	7	TIFF_FLOAT
LEAF_NODE	734:17	734:17	7	:
LEAF_NODE	735:3	735:3	6	{
STATEMENTS	736:4	739:33	6	
SIMPLE_DECL	736:4	736:11	7	float m ;
VAR_DECL	736:4	736:10	8	float m
TYPE	736:4	736:4	9	float
TYPE_NAME	736:4	736:4	10	float
LEAF_NODE	736:4	736:4	11	float
NAME	736:10	736:10	9	m
LEAF_NODE	736:10	736:10	10	m
LEAF_NODE	736:11	736:11	8	;
EXPR_STATEMENT	737:4	737:49	7	TIFFReadDirEntryCheckedFloat ( tif , direntry , & m ) ;
EXPR	737:4	737:4	8	TIFFReadDirEntryCheckedFloat ( tif , direntry , & m )
FUNCTION_CALL	737:4	737:48	9	TIFFReadDirEntryCheckedFloat ( tif , direntry , & m )
CALLEE	737:4	737:4	10	TIFFReadDirEntryCheckedFloat
LEAF_NODE	737:4	737:4	11	TIFFReadDirEntryCheckedFloat
LEAF_NODE	737:32	737:32	10	(
ARGUMENT	737:33	737:33	10	tif
FIELD	737:33	737:33	11	tif
LEAF_NODE	737:33	737:33	12	tif
LEAF_NODE	737:36	737:36	10	,
ARGUMENT	737:37	737:37	10	direntry
FIELD	737:37	737:37	11	direntry
LEAF_NODE	737:37	737:37	12	direntry
LEAF_NODE	737:45	737:45	10	,
ARGUMENT	737:46	737:46	10	& m
UNARY_EXPR	737:46	737:47	11	& m
UNARY_OPERATOR	737:46	737:46	12	&
LEAF_NODE	737:46	737:46	13	&
FIELD	737:47	737:47	12	m
LEAF_NODE	737:47	737:47	13	m
LEAF_NODE	737:48	737:48	10	)
LEAF_NODE	737:49	737:49	8	;
EXPR_STATEMENT	738:4	738:20	7	* value = ( double ) m ;
EXPR	738:4	738:4	8	* value = ( double ) m
ASSIGN	738:4	738:11	9	* value = ( double ) m
LVAL	738:4	738:4	10	* value
UNARY_EXPR	738:4	738:5	11	* value
UNARY_OPERATOR	738:4	738:4	12	*
LEAF_NODE	738:4	738:4	13	*
FIELD	738:5	738:5	12	value
LEAF_NODE	738:5	738:5	13	value
ASSIGN_OP	738:10	738:10	10	=
LEAF_NODE	738:10	738:10	11	=
RVAL	738:11	738:19	10	( double ) m
LEAF_NODE	738:11	738:11	11	(
TYPE_NAME	738:12	738:12	11	double
LEAF_NODE	738:12	738:12	12	double
LEAF_NODE	738:18	738:18	11	)
FIELD	738:19	738:19	11	m
LEAF_NODE	738:19	738:19	12	m
LEAF_NODE	738:20	738:20	8	;
LEAF_NODE	739:4	739:4	7	return
LEAF_NODE	739:10	739:10	7	(
LEAF_NODE	739:11	739:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	739:32	739:32	7	)
LEAF_NODE	739:33	739:33	7	;
LEAF_NODE	740:3	740:3	6	}
LABEL	741:2	741:18	6	case TIFF_DOUBLE :
LEAF_NODE	741:2	741:2	7	case
LEAF_NODE	741:7	741:7	7	TIFF_DOUBLE
LEAF_NODE	741:18	741:18	7	:
EXPR_STATEMENT	742:3	742:56	6	err = TIFFReadDirEntryCheckedDouble ( tif , direntry , value ) ;
EXPR	742:3	742:3	7	err = TIFFReadDirEntryCheckedDouble ( tif , direntry , value )
ASSIGN	742:3	742:7	8	err = TIFFReadDirEntryCheckedDouble ( tif , direntry , value )
LVAL	742:3	742:3	9	err
FIELD	742:3	742:3	10	err
LEAF_NODE	742:3	742:3	11	err
ASSIGN_OP	742:6	742:6	9	=
LEAF_NODE	742:6	742:6	10	=
RVAL	742:7	742:7	9	TIFFReadDirEntryCheckedDouble ( tif , direntry , value )
FUNCTION_CALL	742:7	742:55	10	TIFFReadDirEntryCheckedDouble ( tif , direntry , value )
CALLEE	742:7	742:7	11	TIFFReadDirEntryCheckedDouble
LEAF_NODE	742:7	742:7	12	TIFFReadDirEntryCheckedDouble
LEAF_NODE	742:36	742:36	11	(
ARGUMENT	742:37	742:37	11	tif
FIELD	742:37	742:37	12	tif
LEAF_NODE	742:37	742:37	13	tif
LEAF_NODE	742:40	742:40	11	,
ARGUMENT	742:41	742:41	11	direntry
FIELD	742:41	742:41	12	direntry
LEAF_NODE	742:41	742:41	13	direntry
LEAF_NODE	742:49	742:49	11	,
ARGUMENT	742:50	742:50	11	value
FIELD	742:50	742:50	12	value
LEAF_NODE	742:50	742:50	13	value
LEAF_NODE	742:55	742:55	11	)
LEAF_NODE	742:56	742:56	7	;
LEAF_NODE	743:3	743:3	6	return
LEAF_NODE	743:9	743:9	6	(
LEAF_NODE	743:10	743:10	6	err
LEAF_NODE	743:13	743:13	6	)
LEAF_NODE	743:14	743:14	6	;
LABEL	744:2	744:9	6	default :
LEAF_NODE	744:2	744:2	7	default
LEAF_NODE	744:9	744:9	7	:
LEAF_NODE	745:3	745:3	6	return
LEAF_NODE	745:9	745:9	6	(
LEAF_NODE	745:10	745:10	6	TIFFReadDirEntryErrType
LEAF_NODE	745:33	745:33	6	)
LEAF_NODE	745:34	745:34	6	;
LEAF_NODE	746:1	746:1	5	}
LEAF_NODE	747:0	747:0	2	}
FUNCTION_DEF	749:0	771:0	1	
RETURN_TYPE	749:0	749:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	749:0	749:0	3	static
TYPE_NAME	749:7	749:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	749:7	749:7	4	enum
LEAF_NODE	749:12	749:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	749:32	749:32	2	TIFFReadDirEntryIfd8
LEAF_NODE	749:32	749:32	3	TIFFReadDirEntryIfd8
PARAMETER_LIST	749:52	749:101	2	( TIFF * tif , TIFFDirEntry * direntry , uint64 * value )
LEAF_NODE	749:52	749:52	3	(
PARAMETER_DECL	749:53	749:59	3	TIFF * tif
TYPE	749:53	749:57	4	TIFF *
TYPE_NAME	749:53	749:53	5	TIFF
LEAF_NODE	749:53	749:53	6	TIFF
POINTER	749:57	749:57	5	*
LEAF_NODE	749:57	749:57	6	*
NAME	749:59	749:59	4	tif
LEAF_NODE	749:59	749:59	5	tif
LEAF_NODE	749:62	749:62	3	,
PARAMETER_DECL	749:64	749:78	3	TIFFDirEntry * direntry
TYPE	749:64	749:76	4	TIFFDirEntry *
TYPE_NAME	749:64	749:64	5	TIFFDirEntry
LEAF_NODE	749:64	749:64	6	TIFFDirEntry
POINTER	749:76	749:76	5	*
LEAF_NODE	749:76	749:76	6	*
NAME	749:78	749:78	4	direntry
LEAF_NODE	749:78	749:78	5	direntry
LEAF_NODE	749:86	749:86	3	,
PARAMETER_DECL	749:88	749:96	3	uint64 * value
TYPE	749:88	749:94	4	uint64 *
TYPE_NAME	749:88	749:88	5	uint64
LEAF_NODE	749:88	749:88	6	uint64
POINTER	749:94	749:94	5	*
LEAF_NODE	749:94	749:94	6	*
NAME	749:96	749:96	4	value
LEAF_NODE	749:96	749:96	5	value
LEAF_NODE	749:101	749:101	3	)
LEAF_NODE	750:0	750:0	2	{
STATEMENTS	751:1	754:1	2	
SIMPLE_DECL	751:1	751:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	751:1	751:26	4	enum TIFFReadDirEntryErr err
TYPE	751:1	751:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	751:1	751:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	751:1	751:1	7	enum
LEAF_NODE	751:6	751:6	7	TIFFReadDirEntryErr
NAME	751:26	751:26	5	err
LEAF_NODE	751:26	751:26	6	err
LEAF_NODE	751:29	751:29	4	;
SELECTION	752:1	753:2	3	
KEYWORD	752:1	752:1	4	if
LEAF_NODE	752:1	752:1	5	if
LEAF_NODE	752:4	752:4	4	(
CONDITION	752:5	752:5	4	direntry -> tdir_count != 1
EXPR	752:5	752:27	5	direntry -> tdir_count != 1
FIELD	752:5	752:15	6	direntry -> tdir_count
LEAF_NODE	752:5	752:5	7	direntry
LEAF_NODE	752:13	752:13	7	->
LEAF_NODE	752:15	752:15	7	tdir_count
EQ_OPERATOR	752:25	752:25	6	!=
LEAF_NODE	752:25	752:25	7	!=
FIELD	752:27	752:27	6	1
LEAF_NODE	752:27	752:27	7	1
LEAF_NODE	752:28	752:28	4	)
STATEMENTS	753:2	753:2	4	
LEAF_NODE	753:2	753:2	5	return
LEAF_NODE	753:8	753:8	3	(
LEAF_NODE	753:9	753:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	753:33	753:33	3	)
LEAF_NODE	753:34	753:34	3	;
SELECTION	754:1	755:1	3	
KEYWORD	754:1	754:1	4	switch
LEAF_NODE	754:1	754:1	5	switch
LEAF_NODE	754:8	754:8	4	(
CONDITION	754:9	754:9	4	direntry -> tdir_type
EXPR	754:9	754:9	5	direntry -> tdir_type
FIELD	754:9	754:19	6	direntry -> tdir_type
LEAF_NODE	754:9	754:9	7	direntry
LEAF_NODE	754:17	754:17	7	->
LEAF_NODE	754:19	754:19	7	tdir_type
LEAF_NODE	754:28	754:28	4	)
STATEMENTS	755:1	770:1	4	
LEAF_NODE	755:1	755:1	5	{
STATEMENTS	756:2	769:34	5	
LABEL	756:2	756:16	6	case TIFF_LONG :
LEAF_NODE	756:2	756:2	7	case
LEAF_NODE	756:7	756:7	7	TIFF_LONG
LEAF_NODE	756:16	756:16	7	:
LABEL	757:2	757:15	6	case TIFF_IFD :
LEAF_NODE	757:2	757:2	7	case
LEAF_NODE	757:7	757:7	7	TIFF_IFD
LEAF_NODE	757:15	757:15	7	:
LEAF_NODE	758:3	758:3	6	{
STATEMENTS	759:4	762:33	6	
SIMPLE_DECL	759:4	759:12	7	uint32 m ;
VAR_DECL	759:4	759:11	8	uint32 m
TYPE	759:4	759:4	9	uint32
TYPE_NAME	759:4	759:4	10	uint32
LEAF_NODE	759:4	759:4	11	uint32
NAME	759:11	759:11	9	m
LEAF_NODE	759:11	759:11	10	m
LEAF_NODE	759:12	759:12	8	;
EXPR_STATEMENT	760:4	760:48	7	TIFFReadDirEntryCheckedLong ( tif , direntry , & m ) ;
EXPR	760:4	760:4	8	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
FUNCTION_CALL	760:4	760:47	9	TIFFReadDirEntryCheckedLong ( tif , direntry , & m )
CALLEE	760:4	760:4	10	TIFFReadDirEntryCheckedLong
LEAF_NODE	760:4	760:4	11	TIFFReadDirEntryCheckedLong
LEAF_NODE	760:31	760:31	10	(
ARGUMENT	760:32	760:32	10	tif
FIELD	760:32	760:32	11	tif
LEAF_NODE	760:32	760:32	12	tif
LEAF_NODE	760:35	760:35	10	,
ARGUMENT	760:36	760:36	10	direntry
FIELD	760:36	760:36	11	direntry
LEAF_NODE	760:36	760:36	12	direntry
LEAF_NODE	760:44	760:44	10	,
ARGUMENT	760:45	760:45	10	& m
UNARY_EXPR	760:45	760:46	11	& m
UNARY_OPERATOR	760:45	760:45	12	&
LEAF_NODE	760:45	760:45	13	&
FIELD	760:46	760:46	12	m
LEAF_NODE	760:46	760:46	13	m
LEAF_NODE	760:47	760:47	10	)
LEAF_NODE	760:48	760:48	8	;
EXPR_STATEMENT	761:4	761:20	7	* value = ( uint64 ) m ;
EXPR	761:4	761:4	8	* value = ( uint64 ) m
ASSIGN	761:4	761:11	9	* value = ( uint64 ) m
LVAL	761:4	761:4	10	* value
UNARY_EXPR	761:4	761:5	11	* value
UNARY_OPERATOR	761:4	761:4	12	*
LEAF_NODE	761:4	761:4	13	*
FIELD	761:5	761:5	12	value
LEAF_NODE	761:5	761:5	13	value
ASSIGN_OP	761:10	761:10	10	=
LEAF_NODE	761:10	761:10	11	=
RVAL	761:11	761:19	10	( uint64 ) m
LEAF_NODE	761:11	761:11	11	(
TYPE_NAME	761:12	761:12	11	uint64
LEAF_NODE	761:12	761:12	12	uint64
LEAF_NODE	761:18	761:18	11	)
FIELD	761:19	761:19	11	m
LEAF_NODE	761:19	761:19	12	m
LEAF_NODE	761:20	761:20	8	;
LEAF_NODE	762:4	762:4	7	return
LEAF_NODE	762:10	762:10	7	(
LEAF_NODE	762:11	762:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	762:32	762:32	7	)
LEAF_NODE	762:33	762:33	7	;
LEAF_NODE	763:3	763:3	6	}
LABEL	764:2	764:17	6	case TIFF_LONG8 :
LEAF_NODE	764:2	764:2	7	case
LEAF_NODE	764:7	764:7	7	TIFF_LONG8
LEAF_NODE	764:17	764:17	7	:
LABEL	765:2	765:16	6	case TIFF_IFD8 :
LEAF_NODE	765:2	765:2	7	case
LEAF_NODE	765:7	765:7	7	TIFF_IFD8
LEAF_NODE	765:16	765:16	7	:
EXPR_STATEMENT	766:3	766:55	6	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , value ) ;
EXPR	766:3	766:3	7	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
ASSIGN	766:3	766:7	8	err = TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
LVAL	766:3	766:3	9	err
FIELD	766:3	766:3	10	err
LEAF_NODE	766:3	766:3	11	err
ASSIGN_OP	766:6	766:6	9	=
LEAF_NODE	766:6	766:6	10	=
RVAL	766:7	766:7	9	TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
FUNCTION_CALL	766:7	766:54	10	TIFFReadDirEntryCheckedLong8 ( tif , direntry , value )
CALLEE	766:7	766:7	11	TIFFReadDirEntryCheckedLong8
LEAF_NODE	766:7	766:7	12	TIFFReadDirEntryCheckedLong8
LEAF_NODE	766:35	766:35	11	(
ARGUMENT	766:36	766:36	11	tif
FIELD	766:36	766:36	12	tif
LEAF_NODE	766:36	766:36	13	tif
LEAF_NODE	766:39	766:39	11	,
ARGUMENT	766:40	766:40	11	direntry
FIELD	766:40	766:40	12	direntry
LEAF_NODE	766:40	766:40	13	direntry
LEAF_NODE	766:48	766:48	11	,
ARGUMENT	766:49	766:49	11	value
FIELD	766:49	766:49	12	value
LEAF_NODE	766:49	766:49	13	value
LEAF_NODE	766:54	766:54	11	)
LEAF_NODE	766:55	766:55	7	;
LEAF_NODE	767:3	767:3	6	return
LEAF_NODE	767:9	767:9	6	(
LEAF_NODE	767:10	767:10	6	err
LEAF_NODE	767:13	767:13	6	)
LEAF_NODE	767:14	767:14	6	;
LABEL	768:2	768:9	6	default :
LEAF_NODE	768:2	768:2	7	default
LEAF_NODE	768:9	768:9	7	:
LEAF_NODE	769:3	769:3	6	return
LEAF_NODE	769:9	769:9	6	(
LEAF_NODE	769:10	769:10	6	TIFFReadDirEntryErrType
LEAF_NODE	769:33	769:33	6	)
LEAF_NODE	769:34	769:34	6	;
LEAF_NODE	770:1	770:1	5	}
LEAF_NODE	771:0	771:0	2	}
FUNCTION_DEF	778:0	831:0	1	
RETURN_TYPE	778:0	778:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	778:0	778:0	3	static
TYPE_NAME	778:7	778:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	778:7	778:7	4	enum
LEAF_NODE	778:12	778:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	778:32	778:32	2	TIFFReadDirEntryDataAndRealloc
LEAF_NODE	778:32	778:32	3	TIFFReadDirEntryDataAndRealloc
PARAMETER_LIST	778:62	779:73	2	( TIFF * tif , uint64 offset , tmsize_t size , void * * pdest )
LEAF_NODE	778:62	778:62	3	(
PARAMETER_DECL	779:20	779:26	3	TIFF * tif
TYPE	779:20	779:24	4	TIFF *
TYPE_NAME	779:20	779:20	5	TIFF
LEAF_NODE	779:20	779:20	6	TIFF
POINTER	779:24	779:24	5	*
LEAF_NODE	779:24	779:24	6	*
NAME	779:26	779:26	4	tif
LEAF_NODE	779:26	779:26	5	tif
LEAF_NODE	779:29	779:29	3	,
PARAMETER_DECL	779:31	779:38	3	uint64 offset
TYPE	779:31	779:31	4	uint64
TYPE_NAME	779:31	779:31	5	uint64
LEAF_NODE	779:31	779:31	6	uint64
NAME	779:38	779:38	4	offset
LEAF_NODE	779:38	779:38	5	offset
LEAF_NODE	779:44	779:44	3	,
PARAMETER_DECL	779:46	779:55	3	tmsize_t size
TYPE	779:46	779:46	4	tmsize_t
TYPE_NAME	779:46	779:46	5	tmsize_t
LEAF_NODE	779:46	779:46	6	tmsize_t
NAME	779:55	779:55	4	size
LEAF_NODE	779:55	779:55	5	size
LEAF_NODE	779:59	779:59	3	,
PARAMETER_DECL	779:61	779:68	3	void * * pdest
TYPE	779:61	779:65	4	void * *
TYPE_NAME	779:61	779:61	5	void
LEAF_NODE	779:61	779:61	6	void
POINTER	779:65	779:66	5	* *
LEAF_NODE	779:65	779:65	6	*
LEAF_NODE	779:66	779:66	6	*
NAME	779:68	779:68	4	pdest
LEAF_NODE	779:68	779:68	5	pdest
LEAF_NODE	779:73	779:73	3	)
LEAF_NODE	780:0	780:0	2	{
STATEMENTS	782:8	830:8	2	
SIMPLE_DECL	782:8	782:46	3	tmsize_t threshold ; threshold = INITIAL_THRESHOLD ;
VAR_DECL	782:8	782:17	4	tmsize_t threshold ; threshold = INITIAL_THRESHOLD
TYPE	782:8	782:8	5	tmsize_t
TYPE_NAME	782:8	782:8	6	tmsize_t
LEAF_NODE	782:8	782:8	7	tmsize_t
NAME	782:17	782:17	5	threshold
LEAF_NODE	782:17	782:17	6	threshold
LEAF_NODE	0:0	0:0	5	;
INIT	782:17	782:17	5	threshold = INITIAL_THRESHOLD
ASSIGN	782:17	782:29	6	threshold = INITIAL_THRESHOLD
LVAL	782:17	782:17	7	threshold
NAME	782:17	782:17	8	threshold
LEAF_NODE	782:17	782:17	9	threshold
ASSIGN_OP	782:27	782:27	7	=
LEAF_NODE	782:27	782:27	8	=
RVAL	782:29	782:29	7	INITIAL_THRESHOLD
FIELD	782:29	782:29	8	INITIAL_THRESHOLD
LEAF_NODE	782:29	782:29	9	INITIAL_THRESHOLD
LEAF_NODE	782:46	782:46	4	;
SIMPLE_DECL	784:8	784:33	3	tmsize_t already_read ; already_read = 0 ;
VAR_DECL	784:8	784:17	4	tmsize_t already_read ; already_read = 0
TYPE	784:8	784:8	5	tmsize_t
TYPE_NAME	784:8	784:8	6	tmsize_t
LEAF_NODE	784:8	784:8	7	tmsize_t
NAME	784:17	784:17	5	already_read
LEAF_NODE	784:17	784:17	6	already_read
LEAF_NODE	0:0	0:0	5	;
INIT	784:17	784:17	5	already_read = 0
ASSIGN	784:17	784:32	6	already_read = 0
LVAL	784:17	784:17	7	already_read
NAME	784:17	784:17	8	already_read
LEAF_NODE	784:17	784:17	9	already_read
ASSIGN_OP	784:30	784:30	7	=
LEAF_NODE	784:30	784:30	8	=
RVAL	784:32	784:32	7	0
FIELD	784:32	784:32	8	0
LEAF_NODE	784:32	784:32	9	0
LEAF_NODE	784:33	784:33	4	;
EXPR_STATEMENT	786:8	786:32	3	assert ( ! isMapped ( tif ) ) ;
EXPR	786:8	786:8	4	assert ( ! isMapped ( tif ) )
FUNCTION_CALL	786:8	786:31	5	assert ( ! isMapped ( tif ) )
CALLEE	786:8	786:8	6	assert
LEAF_NODE	786:8	786:8	7	assert
LEAF_NODE	786:14	786:14	6	(
ARGUMENT	786:16	786:16	6	! isMapped ( tif )
UNARY_EXPR	786:16	786:17	7	! isMapped ( tif )
UNARY_OPERATOR	786:16	786:16	8	!
LEAF_NODE	786:16	786:16	9	!
FUNCTION_CALL	786:17	786:29	8	isMapped ( tif )
CALLEE	786:17	786:17	9	isMapped
LEAF_NODE	786:17	786:17	10	isMapped
LEAF_NODE	786:25	786:25	9	(
ARGUMENT	786:26	786:26	9	tif
FIELD	786:26	786:26	10	tif
LEAF_NODE	786:26	786:26	11	tif
LEAF_NODE	786:29	786:29	9	)
LEAF_NODE	786:31	786:31	6	)
LEAF_NODE	786:32	786:32	4	;
SELECTION	788:8	789:16	3	
KEYWORD	788:8	788:8	4	if
LEAF_NODE	788:8	788:8	5	if
LEAF_NODE	788:11	788:11	4	(
CONDITION	788:12	788:12	4	! SeekOK ( tif , offset )
EXPR	788:12	788:12	5	! SeekOK ( tif , offset )
UNARY_EXPR	788:12	788:13	6	! SeekOK ( tif , offset )
UNARY_OPERATOR	788:12	788:12	7	!
LEAF_NODE	788:12	788:12	8	!
FUNCTION_CALL	788:13	788:30	7	SeekOK ( tif , offset )
CALLEE	788:13	788:13	8	SeekOK
LEAF_NODE	788:13	788:13	9	SeekOK
LEAF_NODE	788:19	788:19	8	(
ARGUMENT	788:20	788:20	8	tif
FIELD	788:20	788:20	9	tif
LEAF_NODE	788:20	788:20	10	tif
LEAF_NODE	788:23	788:23	8	,
ARGUMENT	788:24	788:24	8	offset
FIELD	788:24	788:24	9	offset
LEAF_NODE	788:24	788:24	10	offset
LEAF_NODE	788:30	788:30	8	)
LEAF_NODE	788:31	788:31	4	)
STATEMENTS	789:16	789:16	4	
LEAF_NODE	789:16	789:16	5	return
LEAF_NODE	789:22	789:22	3	(
LEAF_NODE	789:23	789:23	3	TIFFReadDirEntryErrIo
LEAF_NODE	789:44	789:44	3	)
LEAF_NODE	789:45	789:45	3	;
ITERATION	797:8	798:8	3	
KEYWORD	797:8	797:8	4	while
LEAF_NODE	797:8	797:8	5	while
LEAF_NODE	797:13	797:13	4	(
CONDITION	797:15	797:15	4	already_read < size
EXPR	797:15	797:30	5	already_read < size
FIELD	797:15	797:15	6	already_read
LEAF_NODE	797:15	797:15	7	already_read
REL_OPERATOR	797:28	797:28	6	<
LEAF_NODE	797:28	797:28	7	<
FIELD	797:30	797:30	6	size
LEAF_NODE	797:30	797:30	7	size
LEAF_NODE	797:35	797:35	4	)
STATEMENTS	798:8	829:8	4	
LEAF_NODE	798:8	798:8	5	{
STATEMENTS	799:12	826:12	5	
SIMPLE_DECL	799:12	799:26	6	void * new_dest ;
VAR_DECL	799:12	799:18	7	void * new_dest
TYPE	799:12	799:16	8	void *
TYPE_NAME	799:12	799:12	9	void
LEAF_NODE	799:12	799:12	10	void
POINTER	799:16	799:16	9	*
LEAF_NODE	799:16	799:16	10	*
NAME	799:18	799:18	8	new_dest
LEAF_NODE	799:18	799:18	9	new_dest
LEAF_NODE	799:26	799:26	7	;
SIMPLE_DECL	800:12	800:31	6	tmsize_t bytes_read ;
VAR_DECL	800:12	800:21	7	tmsize_t bytes_read
TYPE	800:12	800:12	8	tmsize_t
TYPE_NAME	800:12	800:12	9	tmsize_t
LEAF_NODE	800:12	800:12	10	tmsize_t
NAME	800:21	800:21	8	bytes_read
LEAF_NODE	800:21	800:21	9	bytes_read
LEAF_NODE	800:31	800:31	7	;
SIMPLE_DECL	801:12	801:50	6	tmsize_t to_read ; to_read = size - already_read ;
VAR_DECL	801:12	801:21	7	tmsize_t to_read ; to_read = size - already_read
TYPE	801:12	801:12	8	tmsize_t
TYPE_NAME	801:12	801:12	9	tmsize_t
LEAF_NODE	801:12	801:12	10	tmsize_t
NAME	801:21	801:21	8	to_read
LEAF_NODE	801:21	801:21	9	to_read
LEAF_NODE	0:0	0:0	8	;
INIT	801:21	801:21	8	to_read = size - already_read
ASSIGN	801:21	801:31	9	to_read = size - already_read
LVAL	801:21	801:21	10	to_read
NAME	801:21	801:21	11	to_read
LEAF_NODE	801:21	801:21	12	to_read
ASSIGN_OP	801:29	801:29	10	=
LEAF_NODE	801:29	801:29	11	=
RVAL	801:31	801:38	10	size - already_read
FIELD	801:31	801:31	11	size
LEAF_NODE	801:31	801:31	12	size
LEAF_NODE	801:36	801:36	11	-
FIELD	801:38	801:38	11	already_read
LEAF_NODE	801:38	801:38	12	already_read
LEAF_NODE	801:50	801:50	7	;
SELECTION	803:12	804:12	6	
KEYWORD	803:12	803:12	7	if
LEAF_NODE	803:12	803:12	8	if
LEAF_NODE	803:14	803:14	7	(
CONDITION	803:16	803:16	7	to_read >= threshold && threshold < MAX_THRESHOLD
EXPR	803:16	803:16	8	to_read >= threshold && threshold < MAX_THRESHOLD
AND	803:16	803:40	9	to_read >= threshold && threshold < MAX_THRESHOLD
EXPR	803:16	803:27	10	to_read >= threshold
FIELD	803:16	803:16	11	to_read
LEAF_NODE	803:16	803:16	12	to_read
REL_OPERATOR	803:24	803:24	11	>=
LEAF_NODE	803:24	803:24	12	>=
FIELD	803:27	803:27	11	threshold
LEAF_NODE	803:27	803:27	12	threshold
LEAF_NODE	803:37	803:37	10	&&
EXPR	803:40	803:52	10	threshold < MAX_THRESHOLD
FIELD	803:40	803:40	11	threshold
LEAF_NODE	803:40	803:40	12	threshold
REL_OPERATOR	803:50	803:50	11	<
LEAF_NODE	803:50	803:50	12	<
FIELD	803:52	803:52	11	MAX_THRESHOLD
LEAF_NODE	803:52	803:52	12	MAX_THRESHOLD
LEAF_NODE	803:66	803:66	7	)
STATEMENTS	804:12	807:12	7	
LEAF_NODE	804:12	804:12	8	{
STATEMENTS	805:16	806:16	8	
EXPR_STATEMENT	805:16	805:35	9	to_read = threshold ;
EXPR	805:16	805:16	10	to_read = threshold
ASSIGN	805:16	805:26	11	to_read = threshold
LVAL	805:16	805:16	12	to_read
FIELD	805:16	805:16	13	to_read
LEAF_NODE	805:16	805:16	14	to_read
ASSIGN_OP	805:24	805:24	12	=
LEAF_NODE	805:24	805:24	13	=
RVAL	805:26	805:26	12	threshold
FIELD	805:26	805:26	13	threshold
LEAF_NODE	805:26	805:26	14	threshold
LEAF_NODE	805:35	805:35	10	;
EXPR_STATEMENT	806:16	806:49	9	threshold *= THRESHOLD_MULTIPLIER ;
EXPR	806:16	806:16	10	threshold *= THRESHOLD_MULTIPLIER
ASSIGN	806:16	806:29	11	threshold *= THRESHOLD_MULTIPLIER
LVAL	806:16	806:16	12	threshold
FIELD	806:16	806:16	13	threshold
LEAF_NODE	806:16	806:16	14	threshold
ASSIGN_OP	806:26	806:26	12	*=
LEAF_NODE	806:26	806:26	13	*=
RVAL	806:29	806:29	12	THRESHOLD_MULTIPLIER
FIELD	806:29	806:29	13	THRESHOLD_MULTIPLIER
LEAF_NODE	806:29	806:29	14	THRESHOLD_MULTIPLIER
LEAF_NODE	806:49	806:49	10	;
LEAF_NODE	807:12	807:12	8	}
EXPR_STATEMENT	810:12	811:59	6	new_dest = ( uint8 * ) _TIFFrealloc ( * pdest , already_read + to_read ) ;
EXPR	810:12	810:12	7	new_dest = ( uint8 * ) _TIFFrealloc ( * pdest , already_read + to_read )
ASSIGN	810:12	810:23	8	new_dest = ( uint8 * ) _TIFFrealloc ( * pdest , already_read + to_read )
LVAL	810:12	810:12	9	new_dest
FIELD	810:12	810:12	10	new_dest
LEAF_NODE	810:12	810:12	11	new_dest
ASSIGN_OP	810:21	810:21	9	=
LEAF_NODE	810:21	810:21	10	=
RVAL	810:23	810:32	9	( uint8 * ) _TIFFrealloc ( * pdest , already_read + to_read )
LEAF_NODE	810:23	810:23	10	(
TYPE_NAME	810:24	810:24	10	uint8
LEAF_NODE	810:24	810:24	11	uint8
LEAF_NODE	810:29	810:29	10	*
LEAF_NODE	810:30	810:30	10	)
FUNCTION_CALL	810:32	811:58	10	_TIFFrealloc ( * pdest , already_read + to_read )
CALLEE	810:32	810:32	11	_TIFFrealloc
LEAF_NODE	810:32	810:32	12	_TIFFrealloc
LEAF_NODE	810:44	810:44	11	(
ARGUMENT	811:28	811:28	11	* pdest
UNARY_EXPR	811:28	811:29	12	* pdest
UNARY_OPERATOR	811:28	811:28	13	*
LEAF_NODE	811:28	811:28	14	*
FIELD	811:29	811:29	13	pdest
LEAF_NODE	811:29	811:29	14	pdest
LEAF_NODE	811:34	811:34	11	,
ARGUMENT	811:36	811:51	11	already_read + to_read
FIELD	811:36	811:36	12	already_read
LEAF_NODE	811:36	811:36	13	already_read
LEAF_NODE	811:49	811:49	12	+
FIELD	811:51	811:51	12	to_read
LEAF_NODE	811:51	811:51	13	to_read
LEAF_NODE	811:58	811:58	11	)
LEAF_NODE	811:59	811:59	7	;
SELECTION	812:12	813:12	6	
KEYWORD	812:12	812:12	7	if
LEAF_NODE	812:12	812:12	8	if
LEAF_NODE	812:14	812:14	7	(
CONDITION	812:16	812:16	7	new_dest == NULL
EXPR	812:16	812:28	8	new_dest == NULL
FIELD	812:16	812:16	9	new_dest
LEAF_NODE	812:16	812:16	10	new_dest
EQ_OPERATOR	812:25	812:25	9	==
LEAF_NODE	812:25	812:25	10	==
FIELD	812:28	812:28	9	NULL
LEAF_NODE	812:28	812:28	10	NULL
LEAF_NODE	812:33	812:33	7	)
STATEMENTS	813:12	820:12	7	
LEAF_NODE	813:12	813:12	8	{
STATEMENTS	814:16	819:16	8	
LEAF_NODE	814:16	814:16	9	TIFFErrorExt
LEAF_NODE	814:28	814:28	9	(
LEAF_NODE	814:29	814:29	9	tif
LEAF_NODE	814:32	814:32	9	->
LEAF_NODE	814:34	814:34	9	tif_clientdata
LEAF_NODE	814:48	814:48	9	,
LEAF_NODE	814:50	814:50	9	tif
LEAF_NODE	814:53	814:53	9	->
LEAF_NODE	814:55	814:55	9	tif_name
LEAF_NODE	814:63	814:63	9	,
LEAF_NODE	815:28	815:28	9	"Failed to allocate memory for %s "
LEAF_NODE	816:28	816:28	9	"(%ld elements of %ld bytes each)"
LEAF_NODE	816:62	816:62	9	,
LEAF_NODE	817:28	817:28	9	"TIFFReadDirEntryArray"
LEAF_NODE	817:51	817:51	9	,
LEAF_NODE	818:29	818:29	9	(
LEAF_NODE	818:30	818:30	9	long
LEAF_NODE	818:34	818:34	9	)
LEAF_NODE	818:36	818:36	9	1
LEAF_NODE	818:37	818:37	9	,
LEAF_NODE	818:39	818:39	9	(
LEAF_NODE	818:40	818:40	9	long
LEAF_NODE	818:44	818:44	9	)
LEAF_NODE	818:46	818:46	9	(
LEAF_NODE	818:47	818:47	9	already_read
LEAF_NODE	818:60	818:60	9	+
LEAF_NODE	818:62	818:62	9	to_read
LEAF_NODE	818:69	818:69	9	)
LEAF_NODE	818:70	818:70	9	)
LEAF_NODE	818:71	818:71	9	;
JUMP_STATEMENT	819:16	819:47	9	return TIFFReadDirEntryErrAlloc ;
KEYWORD	819:16	819:16	10	return
LEAF_NODE	819:16	819:16	11	return
DESTINATION	819:23	819:23	10	TIFFReadDirEntryErrAlloc
EXPR	819:23	819:23	11	TIFFReadDirEntryErrAlloc
FIELD	819:23	819:23	12	TIFFReadDirEntryErrAlloc
LEAF_NODE	819:23	819:23	13	TIFFReadDirEntryErrAlloc
LEAF_NODE	819:47	819:47	10	;
LEAF_NODE	820:12	820:12	8	}
EXPR_STATEMENT	821:12	821:29	6	* pdest = new_dest ;
EXPR	821:12	821:12	7	* pdest = new_dest
ASSIGN	821:12	821:21	8	* pdest = new_dest
LVAL	821:12	821:12	9	* pdest
UNARY_EXPR	821:12	821:13	10	* pdest
UNARY_OPERATOR	821:12	821:12	11	*
LEAF_NODE	821:12	821:12	12	*
FIELD	821:13	821:13	11	pdest
LEAF_NODE	821:13	821:13	12	pdest
ASSIGN_OP	821:19	821:19	9	=
LEAF_NODE	821:19	821:19	10	=
RVAL	821:21	821:21	9	new_dest
FIELD	821:21	821:21	10	new_dest
LEAF_NODE	821:21	821:21	11	new_dest
LEAF_NODE	821:29	821:29	7	;
EXPR_STATEMENT	823:12	824:54	6	bytes_read = TIFFReadFile ( tif , ( char * ) * pdest + already_read , to_read ) ;
EXPR	823:12	823:12	7	bytes_read = TIFFReadFile ( tif , ( char * ) * pdest + already_read , to_read )
ASSIGN	823:12	823:25	8	bytes_read = TIFFReadFile ( tif , ( char * ) * pdest + already_read , to_read )
LVAL	823:12	823:12	9	bytes_read
FIELD	823:12	823:12	10	bytes_read
LEAF_NODE	823:12	823:12	11	bytes_read
ASSIGN_OP	823:23	823:23	9	=
LEAF_NODE	823:23	823:23	10	=
RVAL	823:25	823:25	9	TIFFReadFile ( tif , ( char * ) * pdest + already_read , to_read )
FUNCTION_CALL	823:25	824:53	10	TIFFReadFile ( tif , ( char * ) * pdest + already_read , to_read )
CALLEE	823:25	823:25	11	TIFFReadFile
LEAF_NODE	823:25	823:25	12	TIFFReadFile
LEAF_NODE	823:37	823:37	11	(
ARGUMENT	823:38	823:38	11	tif
FIELD	823:38	823:38	12	tif
LEAF_NODE	823:38	823:38	13	tif
LEAF_NODE	823:41	823:41	11	,
ARGUMENT	824:16	824:32	11	( char * ) * pdest + already_read
LEAF_NODE	824:16	824:16	12	(
TYPE_NAME	824:17	824:17	12	char
LEAF_NODE	824:17	824:17	13	char
LEAF_NODE	824:21	824:21	12	*
LEAF_NODE	824:22	824:22	12	)
UNARY_EXPR	824:23	824:24	12	* pdest
UNARY_OPERATOR	824:23	824:23	13	*
LEAF_NODE	824:23	824:23	14	*
FIELD	824:24	824:24	13	pdest
LEAF_NODE	824:24	824:24	14	pdest
LEAF_NODE	824:30	824:30	12	+
FIELD	824:32	824:32	12	already_read
LEAF_NODE	824:32	824:32	13	already_read
LEAF_NODE	824:44	824:44	11	,
ARGUMENT	824:46	824:46	11	to_read
FIELD	824:46	824:46	12	to_read
LEAF_NODE	824:46	824:46	13	to_read
LEAF_NODE	824:53	824:53	11	)
LEAF_NODE	824:54	824:54	7	;
EXPR_STATEMENT	825:12	825:38	6	already_read += bytes_read ;
EXPR	825:12	825:12	7	already_read += bytes_read
ASSIGN	825:12	825:28	8	already_read += bytes_read
LVAL	825:12	825:12	9	already_read
FIELD	825:12	825:12	10	already_read
LEAF_NODE	825:12	825:12	11	already_read
ASSIGN_OP	825:25	825:25	9	+=
LEAF_NODE	825:25	825:25	10	+=
RVAL	825:28	825:28	9	bytes_read
FIELD	825:28	825:28	10	bytes_read
LEAF_NODE	825:28	825:28	11	bytes_read
LEAF_NODE	825:38	825:38	7	;
SELECTION	826:12	826:39	6	
KEYWORD	826:12	826:12	7	if
LEAF_NODE	826:12	826:12	8	if
LEAF_NODE	826:15	826:15	7	(
CONDITION	826:16	826:16	7	bytes_read != to_read
EXPR	826:16	826:30	8	bytes_read != to_read
FIELD	826:16	826:16	9	bytes_read
LEAF_NODE	826:16	826:16	10	bytes_read
EQ_OPERATOR	826:27	826:27	9	!=
LEAF_NODE	826:27	826:27	10	!=
FIELD	826:30	826:30	9	to_read
LEAF_NODE	826:30	826:30	10	to_read
LEAF_NODE	826:37	826:37	7	)
STATEMENTS	826:39	828:12	7	
LEAF_NODE	826:39	826:39	8	{
STATEMENTS	827:16	827:16	8	
JUMP_STATEMENT	827:16	827:44	9	return TIFFReadDirEntryErrIo ;
KEYWORD	827:16	827:16	10	return
LEAF_NODE	827:16	827:16	11	return
DESTINATION	827:23	827:23	10	TIFFReadDirEntryErrIo
EXPR	827:23	827:23	11	TIFFReadDirEntryErrIo
FIELD	827:23	827:23	12	TIFFReadDirEntryErrIo
LEAF_NODE	827:23	827:23	13	TIFFReadDirEntryErrIo
LEAF_NODE	827:44	827:44	10	;
LEAF_NODE	828:12	828:12	8	}
LEAF_NODE	829:8	829:8	5	}
JUMP_STATEMENT	830:8	830:36	3	return TIFFReadDirEntryErrOk ;
KEYWORD	830:8	830:8	4	return
LEAF_NODE	830:8	830:8	5	return
DESTINATION	830:15	830:15	4	TIFFReadDirEntryErrOk
EXPR	830:15	830:15	5	TIFFReadDirEntryErrOk
FIELD	830:15	830:15	6	TIFFReadDirEntryErrOk
LEAF_NODE	830:15	830:15	7	TIFFReadDirEntryErrOk
LEAF_NODE	830:36	830:36	4	;
LEAF_NODE	831:0	831:0	2	}
FUNCTION_DEF	833:0	926:0	1	
RETURN_TYPE	833:0	833:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	833:0	833:0	3	static
TYPE_NAME	833:7	833:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	833:7	833:7	4	enum
LEAF_NODE	833:12	833:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	833:32	833:32	2	TIFFReadDirEntryArrayWithLimit
LEAF_NODE	833:32	833:32	3	TIFFReadDirEntryArrayWithLimit
PARAMETER_LIST	833:62	835:33	2	( TIFF * tif , TIFFDirEntry * direntry , uint32 * count , uint32 desttypesize , void * * value , uint64 maxcount )
LEAF_NODE	833:62	833:62	3	(
PARAMETER_DECL	834:4	834:10	3	TIFF * tif
TYPE	834:4	834:8	4	TIFF *
TYPE_NAME	834:4	834:4	5	TIFF
LEAF_NODE	834:4	834:4	6	TIFF
POINTER	834:8	834:8	5	*
LEAF_NODE	834:8	834:8	6	*
NAME	834:10	834:10	4	tif
LEAF_NODE	834:10	834:10	5	tif
LEAF_NODE	834:13	834:13	3	,
PARAMETER_DECL	834:15	834:29	3	TIFFDirEntry * direntry
TYPE	834:15	834:27	4	TIFFDirEntry *
TYPE_NAME	834:15	834:15	5	TIFFDirEntry
LEAF_NODE	834:15	834:15	6	TIFFDirEntry
POINTER	834:27	834:27	5	*
LEAF_NODE	834:27	834:27	6	*
NAME	834:29	834:29	4	direntry
LEAF_NODE	834:29	834:29	5	direntry
LEAF_NODE	834:37	834:37	3	,
PARAMETER_DECL	834:39	834:47	3	uint32 * count
TYPE	834:39	834:45	4	uint32 *
TYPE_NAME	834:39	834:39	5	uint32
LEAF_NODE	834:39	834:39	6	uint32
POINTER	834:45	834:45	5	*
LEAF_NODE	834:45	834:45	6	*
NAME	834:47	834:47	4	count
LEAF_NODE	834:47	834:47	5	count
LEAF_NODE	834:52	834:52	3	,
PARAMETER_DECL	834:54	834:61	3	uint32 desttypesize
TYPE	834:54	834:54	4	uint32
TYPE_NAME	834:54	834:54	5	uint32
LEAF_NODE	834:54	834:54	6	uint32
NAME	834:61	834:61	4	desttypesize
LEAF_NODE	834:61	834:61	5	desttypesize
LEAF_NODE	834:73	834:73	3	,
PARAMETER_DECL	835:4	835:11	3	void * * value
TYPE	835:4	835:8	4	void * *
TYPE_NAME	835:4	835:4	5	void
LEAF_NODE	835:4	835:4	6	void
POINTER	835:8	835:9	5	* *
LEAF_NODE	835:8	835:8	6	*
LEAF_NODE	835:9	835:9	6	*
NAME	835:11	835:11	4	value
LEAF_NODE	835:11	835:11	5	value
LEAF_NODE	835:16	835:16	3	,
PARAMETER_DECL	835:18	835:25	3	uint64 maxcount
TYPE	835:18	835:18	4	uint64
TYPE_NAME	835:18	835:18	5	uint64
LEAF_NODE	835:18	835:18	6	uint64
NAME	835:25	835:25	4	maxcount
LEAF_NODE	835:25	835:25	5	maxcount
LEAF_NODE	835:33	835:33	3	)
LEAF_NODE	836:0	836:0	2	{
STATEMENTS	837:1	925:30	2	
SIMPLE_DECL	837:1	837:13	3	int typesize ;
VAR_DECL	837:1	837:5	4	int typesize
TYPE	837:1	837:1	5	int
TYPE_NAME	837:1	837:1	6	int
LEAF_NODE	837:1	837:1	7	int
NAME	837:5	837:5	5	typesize
LEAF_NODE	837:5	837:5	6	typesize
LEAF_NODE	837:13	837:13	4	;
SIMPLE_DECL	838:1	838:16	3	uint32 datasize ;
VAR_DECL	838:1	838:8	4	uint32 datasize
TYPE	838:1	838:1	5	uint32
TYPE_NAME	838:1	838:1	6	uint32
LEAF_NODE	838:1	838:1	7	uint32
NAME	838:8	838:8	5	datasize
LEAF_NODE	838:8	838:8	6	datasize
LEAF_NODE	838:16	838:16	4	;
SIMPLE_DECL	839:1	839:11	3	void * data ;
VAR_DECL	839:1	839:7	4	void * data
TYPE	839:1	839:5	5	void *
TYPE_NAME	839:1	839:1	6	void
LEAF_NODE	839:1	839:1	7	void
POINTER	839:5	839:5	6	*
LEAF_NODE	839:5	839:5	7	*
NAME	839:7	839:7	5	data
LEAF_NODE	839:7	839:7	6	data
LEAF_NODE	839:11	839:11	4	;
SIMPLE_DECL	840:8	840:29	3	uint64 target_count64 ;
VAR_DECL	840:8	840:15	4	uint64 target_count64
TYPE	840:8	840:8	5	uint64
TYPE_NAME	840:8	840:8	6	uint64
LEAF_NODE	840:8	840:8	7	uint64
NAME	840:15	840:15	5	target_count64
LEAF_NODE	840:15	840:15	6	target_count64
LEAF_NODE	840:29	840:29	4	;
EXPR_STATEMENT	841:1	841:44	3	typesize = TIFFDataWidth ( direntry -> tdir_type ) ;
EXPR	841:1	841:1	4	typesize = TIFFDataWidth ( direntry -> tdir_type )
ASSIGN	841:1	841:10	5	typesize = TIFFDataWidth ( direntry -> tdir_type )
LVAL	841:1	841:1	6	typesize
FIELD	841:1	841:1	7	typesize
LEAF_NODE	841:1	841:1	8	typesize
ASSIGN_OP	841:9	841:9	6	=
LEAF_NODE	841:9	841:9	7	=
RVAL	841:10	841:10	6	TIFFDataWidth ( direntry -> tdir_type )
FUNCTION_CALL	841:10	841:43	7	TIFFDataWidth ( direntry -> tdir_type )
CALLEE	841:10	841:10	8	TIFFDataWidth
LEAF_NODE	841:10	841:10	9	TIFFDataWidth
LEAF_NODE	841:23	841:23	8	(
ARGUMENT	841:24	841:24	8	direntry -> tdir_type
FIELD	841:24	841:34	9	direntry -> tdir_type
LEAF_NODE	841:24	841:24	10	direntry
LEAF_NODE	841:32	841:32	10	->
LEAF_NODE	841:34	841:34	10	tdir_type
LEAF_NODE	841:43	841:43	8	)
LEAF_NODE	841:44	841:44	4	;
EXPR_STATEMENT	843:8	844:47	3	target_count64 = ( direntry -> tdir_count > maxcount ) ? maxcount : direntry -> tdir_count ;
EXPR	843:8	843:8	4	target_count64 = ( direntry -> tdir_count > maxcount ) ? maxcount : direntry -> tdir_count
ASSIGN	843:8	843:25	5	target_count64 = ( direntry -> tdir_count > maxcount ) ? maxcount : direntry -> tdir_count
LVAL	843:8	843:8	6	target_count64
FIELD	843:8	843:8	7	target_count64
LEAF_NODE	843:8	843:8	8	target_count64
ASSIGN_OP	843:23	843:23	6	=
LEAF_NODE	843:23	843:23	7	=
RVAL	843:25	843:25	6	( direntry -> tdir_count > maxcount ) ? maxcount : direntry -> tdir_count
COND_EXPR	843:25	844:27	7	( direntry -> tdir_count > maxcount ) ? maxcount : direntry -> tdir_count
CONDITION	843:25	843:57	8	( direntry -> tdir_count > maxcount )
LEAF_NODE	843:25	843:25	9	(
FIELD	843:26	843:36	9	direntry -> tdir_count
LEAF_NODE	843:26	843:26	10	direntry
LEAF_NODE	843:34	843:34	10	->
LEAF_NODE	843:36	843:36	10	tdir_count
REL_OPERATOR	843:47	843:47	9	>
LEAF_NODE	843:47	843:47	10	>
FIELD	843:49	843:49	9	maxcount
LEAF_NODE	843:49	843:49	10	maxcount
LEAF_NODE	843:57	843:57	9	)
LEAF_NODE	843:59	843:59	8	?
EXPR	844:16	844:16	8	maxcount
FIELD	844:16	844:16	9	maxcount
LEAF_NODE	844:16	844:16	10	maxcount
LEAF_NODE	844:25	844:25	8	:
FIELD	844:27	844:37	8	direntry -> tdir_count
LEAF_NODE	844:27	844:27	9	direntry
LEAF_NODE	844:35	844:35	9	->
LEAF_NODE	844:37	844:37	9	tdir_count
LEAF_NODE	844:47	844:47	4	;
SELECTION	846:1	847:1	3	
KEYWORD	846:1	846:1	4	if
LEAF_NODE	846:1	846:1	5	if
LEAF_NODE	846:4	846:4	4	(
CONDITION	846:5	846:5	4	( target_count64 == 0 ) || ( typesize == 0 )
EXPR	846:5	846:5	5	( target_count64 == 0 ) || ( typesize == 0 )
OR	846:5	846:26	6	( target_count64 == 0 ) || ( typesize == 0 )
EXPR	846:5	846:23	7	( target_count64 == 0 )
LEAF_NODE	846:5	846:5	8	(
FIELD	846:6	846:6	8	target_count64
LEAF_NODE	846:6	846:6	9	target_count64
EQ_OPERATOR	846:20	846:20	8	==
LEAF_NODE	846:20	846:20	9	==
FIELD	846:22	846:22	8	0
LEAF_NODE	846:22	846:22	9	0
LEAF_NODE	846:23	846:23	8	)
LEAF_NODE	846:24	846:24	7	||
EXPR	846:26	846:38	7	( typesize == 0 )
LEAF_NODE	846:26	846:26	8	(
FIELD	846:27	846:27	8	typesize
LEAF_NODE	846:27	846:27	9	typesize
EQ_OPERATOR	846:35	846:35	8	==
LEAF_NODE	846:35	846:35	9	==
FIELD	846:37	846:37	8	0
LEAF_NODE	846:37	846:37	9	0
LEAF_NODE	846:38	846:38	8	)
LEAF_NODE	846:39	846:39	4	)
STATEMENTS	847:1	850:1	4	
LEAF_NODE	847:1	847:1	5	{
STATEMENTS	848:2	849:31	5	
EXPR_STATEMENT	848:2	848:10	6	* value = 0 ;
EXPR	848:2	848:2	7	* value = 0
ASSIGN	848:2	848:9	8	* value = 0
LVAL	848:2	848:2	9	* value
UNARY_EXPR	848:2	848:3	10	* value
UNARY_OPERATOR	848:2	848:2	11	*
LEAF_NODE	848:2	848:2	12	*
FIELD	848:3	848:3	11	value
LEAF_NODE	848:3	848:3	12	value
ASSIGN_OP	848:8	848:8	9	=
LEAF_NODE	848:8	848:8	10	=
RVAL	848:9	848:9	9	0
FIELD	848:9	848:9	10	0
LEAF_NODE	848:9	848:9	11	0
LEAF_NODE	848:10	848:10	7	;
LEAF_NODE	849:2	849:2	6	return
LEAF_NODE	849:8	849:8	6	(
LEAF_NODE	849:9	849:9	6	TIFFReadDirEntryErrOk
LEAF_NODE	849:30	849:30	6	)
LEAF_NODE	849:31	849:31	6	;
LEAF_NODE	850:1	850:1	5	}
EXPR_STATEMENT	851:8	851:27	3	( void ) desttypesize ;
EXPR	851:8	851:15	4	( void ) desttypesize
LEAF_NODE	851:8	851:8	5	(
TYPE_NAME	851:9	851:9	5	void
LEAF_NODE	851:9	851:9	6	void
LEAF_NODE	851:13	851:13	5	)
FIELD	851:15	851:15	5	desttypesize
LEAF_NODE	851:15	851:15	6	desttypesize
LEAF_NODE	851:27	851:27	4	;
SELECTION	858:1	859:2	3	
KEYWORD	858:1	858:1	4	if
LEAF_NODE	858:1	858:1	5	if
LEAF_NODE	858:4	858:4	4	(
CONDITION	858:5	858:5	4	( uint64 ) ( 2147483647 / typesize ) < target_count64
EXPR	858:5	858:35	5	( uint64 ) ( 2147483647 / typesize ) < target_count64
LEAF_NODE	858:5	858:5	6	(
TYPE_NAME	858:6	858:6	6	uint64
LEAF_NODE	858:6	858:6	7	uint64
LEAF_NODE	858:12	858:12	6	)
LEAF_NODE	858:13	858:13	6	(
FIELD	858:14	858:14	6	2147483647
LEAF_NODE	858:14	858:14	7	2147483647
LEAF_NODE	858:24	858:24	6	/
FIELD	858:25	858:25	6	typesize
LEAF_NODE	858:25	858:25	7	typesize
LEAF_NODE	858:33	858:33	6	)
REL_OPERATOR	858:34	858:34	6	<
LEAF_NODE	858:34	858:34	7	<
FIELD	858:35	858:35	6	target_count64
LEAF_NODE	858:35	858:35	7	target_count64
LEAF_NODE	858:49	858:49	4	)
STATEMENTS	859:2	859:2	4	
LEAF_NODE	859:2	859:2	5	return
LEAF_NODE	859:8	859:8	3	(
LEAF_NODE	859:9	859:9	3	TIFFReadDirEntryErrSizesan
LEAF_NODE	859:35	859:35	3	)
LEAF_NODE	859:36	859:36	3	;
SELECTION	860:1	861:2	3	
KEYWORD	860:1	860:1	4	if
LEAF_NODE	860:1	860:1	5	if
LEAF_NODE	860:4	860:4	4	(
CONDITION	860:5	860:5	4	( uint64 ) ( 2147483647 / desttypesize ) < target_count64
EXPR	860:5	860:39	5	( uint64 ) ( 2147483647 / desttypesize ) < target_count64
LEAF_NODE	860:5	860:5	6	(
TYPE_NAME	860:6	860:6	6	uint64
LEAF_NODE	860:6	860:6	7	uint64
LEAF_NODE	860:12	860:12	6	)
LEAF_NODE	860:13	860:13	6	(
FIELD	860:14	860:14	6	2147483647
LEAF_NODE	860:14	860:14	7	2147483647
LEAF_NODE	860:24	860:24	6	/
FIELD	860:25	860:25	6	desttypesize
LEAF_NODE	860:25	860:25	7	desttypesize
LEAF_NODE	860:37	860:37	6	)
REL_OPERATOR	860:38	860:38	6	<
LEAF_NODE	860:38	860:38	7	<
FIELD	860:39	860:39	6	target_count64
LEAF_NODE	860:39	860:39	7	target_count64
LEAF_NODE	860:53	860:53	4	)
STATEMENTS	861:2	861:2	4	
LEAF_NODE	861:2	861:2	5	return
LEAF_NODE	861:8	861:8	3	(
LEAF_NODE	861:9	861:9	3	TIFFReadDirEntryErrSizesan
LEAF_NODE	861:35	861:35	3	)
LEAF_NODE	861:36	861:36	3	;
EXPR_STATEMENT	863:1	863:30	3	* count = ( uint32 ) target_count64 ;
EXPR	863:1	863:1	4	* count = ( uint32 ) target_count64
ASSIGN	863:1	863:8	5	* count = ( uint32 ) target_count64
LVAL	863:1	863:1	6	* count
UNARY_EXPR	863:1	863:2	7	* count
UNARY_OPERATOR	863:1	863:1	8	*
LEAF_NODE	863:1	863:1	9	*
FIELD	863:2	863:2	8	count
LEAF_NODE	863:2	863:2	9	count
ASSIGN_OP	863:7	863:7	6	=
LEAF_NODE	863:7	863:7	7	=
RVAL	863:8	863:16	6	( uint32 ) target_count64
LEAF_NODE	863:8	863:8	7	(
TYPE_NAME	863:9	863:9	7	uint32
LEAF_NODE	863:9	863:9	8	uint32
LEAF_NODE	863:15	863:15	7	)
FIELD	863:16	863:16	7	target_count64
LEAF_NODE	863:16	863:16	8	target_count64
LEAF_NODE	863:30	863:30	4	;
EXPR_STATEMENT	864:1	864:27	3	datasize = ( * count ) * typesize ;
EXPR	864:1	864:1	4	datasize = ( * count ) * typesize
ASSIGN	864:1	864:10	5	datasize = ( * count ) * typesize
LVAL	864:1	864:1	6	datasize
FIELD	864:1	864:1	7	datasize
LEAF_NODE	864:1	864:1	8	datasize
ASSIGN_OP	864:9	864:9	6	=
LEAF_NODE	864:9	864:9	7	=
RVAL	864:10	864:19	6	( * count ) * typesize
LEAF_NODE	864:10	864:10	7	(
UNARY_EXPR	864:11	864:12	7	* count
UNARY_OPERATOR	864:11	864:11	8	*
LEAF_NODE	864:11	864:11	9	*
FIELD	864:12	864:12	8	count
LEAF_NODE	864:12	864:12	9	count
LEAF_NODE	864:17	864:17	7	)
LEAF_NODE	864:18	864:18	7	*
FIELD	864:19	864:19	7	typesize
LEAF_NODE	864:19	864:19	8	typesize
LEAF_NODE	864:27	864:27	4	;
EXPR_STATEMENT	865:1	865:29	3	assert ( ( tmsize_t ) datasize > 0 ) ;
EXPR	865:1	865:1	4	assert ( ( tmsize_t ) datasize > 0 )
FUNCTION_CALL	865:1	865:28	5	assert ( ( tmsize_t ) datasize > 0 )
CALLEE	865:1	865:1	6	assert
LEAF_NODE	865:1	865:1	7	assert
LEAF_NODE	865:7	865:7	6	(
ARGUMENT	865:8	865:27	6	( tmsize_t ) datasize > 0
LEAF_NODE	865:8	865:8	7	(
TYPE_NAME	865:9	865:9	7	tmsize_t
LEAF_NODE	865:9	865:9	8	tmsize_t
LEAF_NODE	865:17	865:17	7	)
FIELD	865:18	865:18	7	datasize
LEAF_NODE	865:18	865:18	8	datasize
REL_OPERATOR	865:26	865:26	7	>
LEAF_NODE	865:26	865:26	8	>
FIELD	865:27	865:27	7	0
LEAF_NODE	865:27	865:27	8	0
LEAF_NODE	865:28	865:28	6	)
LEAF_NODE	865:29	865:29	4	;
SELECTION	867:1	868:2	3	
KEYWORD	867:1	867:1	4	if
LEAF_NODE	867:1	867:1	5	if
LEAF_NODE	867:3	867:3	4	(
CONDITION	867:5	867:5	4	isMapped ( tif ) && datasize > ( uint32 ) tif -> tif_size
EXPR	867:5	867:5	5	isMapped ( tif ) && datasize > ( uint32 ) tif -> tif_size
AND	867:5	867:22	6	isMapped ( tif ) && datasize > ( uint32 ) tif -> tif_size
EXPR	867:5	867:5	7	isMapped ( tif )
FUNCTION_CALL	867:5	867:17	8	isMapped ( tif )
CALLEE	867:5	867:5	9	isMapped
LEAF_NODE	867:5	867:5	10	isMapped
LEAF_NODE	867:13	867:13	9	(
ARGUMENT	867:14	867:14	9	tif
FIELD	867:14	867:14	10	tif
LEAF_NODE	867:14	867:14	11	tif
LEAF_NODE	867:17	867:17	9	)
LEAF_NODE	867:19	867:19	7	&&
EXPR	867:22	867:41	7	datasize > ( uint32 ) tif -> tif_size
FIELD	867:22	867:22	8	datasize
LEAF_NODE	867:22	867:22	9	datasize
REL_OPERATOR	867:31	867:31	8	>
LEAF_NODE	867:31	867:31	9	>
LEAF_NODE	867:33	867:33	8	(
TYPE_NAME	867:34	867:34	8	uint32
LEAF_NODE	867:34	867:34	9	uint32
LEAF_NODE	867:40	867:40	8	)
FIELD	867:41	867:46	8	tif -> tif_size
LEAF_NODE	867:41	867:41	9	tif
LEAF_NODE	867:44	867:44	9	->
LEAF_NODE	867:46	867:46	9	tif_size
LEAF_NODE	867:55	867:55	4	)
STATEMENTS	868:2	868:2	4	
JUMP_STATEMENT	868:2	868:30	5	return TIFFReadDirEntryErrIo ;
KEYWORD	868:2	868:2	6	return
LEAF_NODE	868:2	868:2	7	return
DESTINATION	868:9	868:9	6	TIFFReadDirEntryErrIo
EXPR	868:9	868:9	7	TIFFReadDirEntryErrIo
FIELD	868:9	868:9	8	TIFFReadDirEntryErrIo
LEAF_NODE	868:9	868:9	9	TIFFReadDirEntryErrIo
LEAF_NODE	868:30	868:30	6	;
SELECTION	870:1	873:1	3	
KEYWORD	870:1	870:1	4	if
LEAF_NODE	870:1	870:1	5	if
LEAF_NODE	870:3	870:3	4	(
CONDITION	870:5	870:5	4	! isMapped ( tif ) && ( ( ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 8 ) || ( ! ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 4 ) )
EXPR	870:5	870:5	5	! isMapped ( tif ) && ( ( ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 8 ) || ( ! ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 4 ) )
AND	870:5	871:2	6	! isMapped ( tif ) && ( ( ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 8 ) || ( ! ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 4 ) )
EXPR	870:5	870:5	7	! isMapped ( tif )
UNARY_EXPR	870:5	870:6	8	! isMapped ( tif )
UNARY_OPERATOR	870:5	870:5	9	!
LEAF_NODE	870:5	870:5	10	!
FUNCTION_CALL	870:6	870:18	9	isMapped ( tif )
CALLEE	870:6	870:6	10	isMapped
LEAF_NODE	870:6	870:6	11	isMapped
LEAF_NODE	870:14	870:14	10	(
ARGUMENT	870:15	870:15	10	tif
FIELD	870:15	870:15	11	tif
LEAF_NODE	870:15	870:15	12	tif
LEAF_NODE	870:18	870:18	10	)
LEAF_NODE	870:20	870:20	7	&&
EXPR	871:2	872:50	7	( ( ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 8 ) || ( ! ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 4 ) )
LEAF_NODE	871:2	871:2	8	(
OR	871:3	872:2	8	( ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 8 ) || ( ! ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 4 )
EXPR	871:3	871:49	9	( ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 8 )
LEAF_NODE	871:3	871:3	10	(
AND	871:4	871:37	10	( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 8
EXPR	871:4	871:32	11	( tif -> tif_flags & TIFF_BIGTIFF )
LEAF_NODE	871:4	871:4	12	(
FIELD	871:5	871:10	12	tif -> tif_flags
LEAF_NODE	871:5	871:5	13	tif
LEAF_NODE	871:8	871:8	13	->
LEAF_NODE	871:10	871:10	13	tif_flags
LEAF_NODE	871:19	871:19	12	&
FIELD	871:20	871:20	12	TIFF_BIGTIFF
LEAF_NODE	871:20	871:20	13	TIFF_BIGTIFF
LEAF_NODE	871:32	871:32	12	)
LEAF_NODE	871:34	871:34	11	&&
EXPR	871:37	871:48	11	datasize > 8
FIELD	871:37	871:37	12	datasize
LEAF_NODE	871:37	871:37	13	datasize
REL_OPERATOR	871:46	871:46	12	>
LEAF_NODE	871:46	871:46	13	>
FIELD	871:48	871:48	12	8
LEAF_NODE	871:48	871:48	13	8
LEAF_NODE	871:49	871:49	10	)
LEAF_NODE	871:51	871:51	9	||
EXPR	872:2	872:49	9	( ! ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 4 )
LEAF_NODE	872:2	872:2	10	(
AND	872:3	872:37	10	! ( tif -> tif_flags & TIFF_BIGTIFF ) && datasize > 4
EXPR	872:3	872:3	11	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	872:3	872:32	12	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	872:3	872:3	13	!
LEAF_NODE	872:3	872:3	14	!
LEAF_NODE	872:4	872:4	13	(
FIELD	872:5	872:10	13	tif -> tif_flags
LEAF_NODE	872:5	872:5	14	tif
LEAF_NODE	872:8	872:8	14	->
LEAF_NODE	872:10	872:10	14	tif_flags
LEAF_NODE	872:19	872:19	13	&
FIELD	872:20	872:20	13	TIFF_BIGTIFF
LEAF_NODE	872:20	872:20	14	TIFF_BIGTIFF
LEAF_NODE	872:32	872:32	13	)
LEAF_NODE	872:34	872:34	11	&&
EXPR	872:37	872:48	11	datasize > 4
FIELD	872:37	872:37	12	datasize
LEAF_NODE	872:37	872:37	13	datasize
REL_OPERATOR	872:46	872:46	12	>
LEAF_NODE	872:46	872:46	13	>
FIELD	872:48	872:48	12	4
LEAF_NODE	872:48	872:48	13	4
LEAF_NODE	872:49	872:49	10	)
LEAF_NODE	872:50	872:50	8	)
LEAF_NODE	872:52	872:52	4	)
STATEMENTS	873:1	875:1	4	
LEAF_NODE	873:1	873:1	5	{
STATEMENTS	874:2	874:2	5	
EXPR_STATEMENT	874:2	874:13	6	data = NULL ;
EXPR	874:2	874:2	7	data = NULL
ASSIGN	874:2	874:9	8	data = NULL
LVAL	874:2	874:2	9	data
FIELD	874:2	874:2	10	data
LEAF_NODE	874:2	874:2	11	data
ASSIGN_OP	874:7	874:7	9	=
LEAF_NODE	874:7	874:7	10	=
RVAL	874:9	874:9	9	NULL
FIELD	874:9	874:9	10	NULL
LEAF_NODE	874:9	874:9	11	NULL
LEAF_NODE	874:13	874:13	7	;
LEAF_NODE	875:1	875:1	5	}
SELECTION	876:1	877:1	3	
KEYWORD	876:1	876:1	4	else
LEAF_NODE	876:1	876:1	5	else
STATEMENTS	877:1	881:1	4	
LEAF_NODE	877:1	877:1	5	{
STATEMENTS	878:2	880:35	5	
EXPR_STATEMENT	878:2	878:67	6	data = _TIFFCheckMalloc ( tif , * count , typesize , "ReadDirEntryArray" ) ;
EXPR	878:2	878:2	7	data = _TIFFCheckMalloc ( tif , * count , typesize , "ReadDirEntryArray" )
ASSIGN	878:2	878:7	8	data = _TIFFCheckMalloc ( tif , * count , typesize , "ReadDirEntryArray" )
LVAL	878:2	878:2	9	data
FIELD	878:2	878:2	10	data
LEAF_NODE	878:2	878:2	11	data
ASSIGN_OP	878:6	878:6	9	=
LEAF_NODE	878:6	878:6	10	=
RVAL	878:7	878:7	9	_TIFFCheckMalloc ( tif , * count , typesize , "ReadDirEntryArray" )
FUNCTION_CALL	878:7	878:66	10	_TIFFCheckMalloc ( tif , * count , typesize , "ReadDirEntryArray" )
CALLEE	878:7	878:7	11	_TIFFCheckMalloc
LEAF_NODE	878:7	878:7	12	_TIFFCheckMalloc
LEAF_NODE	878:23	878:23	11	(
ARGUMENT	878:24	878:24	11	tif
FIELD	878:24	878:24	12	tif
LEAF_NODE	878:24	878:24	13	tif
LEAF_NODE	878:27	878:27	11	,
ARGUMENT	878:29	878:29	11	* count
UNARY_EXPR	878:29	878:30	12	* count
UNARY_OPERATOR	878:29	878:29	13	*
LEAF_NODE	878:29	878:29	14	*
FIELD	878:30	878:30	13	count
LEAF_NODE	878:30	878:30	14	count
LEAF_NODE	878:35	878:35	11	,
ARGUMENT	878:37	878:37	11	typesize
FIELD	878:37	878:37	12	typesize
LEAF_NODE	878:37	878:37	13	typesize
LEAF_NODE	878:45	878:45	11	,
ARGUMENT	878:47	878:47	11	"ReadDirEntryArray"
FIELD	878:47	878:47	12	"ReadDirEntryArray"
LEAF_NODE	878:47	878:47	13	"ReadDirEntryArray"
LEAF_NODE	878:66	878:66	11	)
LEAF_NODE	878:67	878:67	7	;
SELECTION	879:2	880:3	6	
KEYWORD	879:2	879:2	7	if
LEAF_NODE	879:2	879:2	8	if
LEAF_NODE	879:5	879:5	7	(
CONDITION	879:6	879:6	7	data == 0
EXPR	879:6	879:12	8	data == 0
FIELD	879:6	879:6	9	data
LEAF_NODE	879:6	879:6	10	data
EQ_OPERATOR	879:10	879:10	9	==
LEAF_NODE	879:10	879:10	10	==
FIELD	879:12	879:12	9	0
LEAF_NODE	879:12	879:12	10	0
LEAF_NODE	879:13	879:13	7	)
STATEMENTS	880:3	880:3	7	
LEAF_NODE	880:3	880:3	8	return
LEAF_NODE	880:9	880:9	6	(
LEAF_NODE	880:10	880:10	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	880:34	880:34	6	)
LEAF_NODE	880:35	880:35	6	;
LEAF_NODE	881:1	881:1	5	}
SELECTION	882:1	883:1	3	
KEYWORD	882:1	882:1	4	if
LEAF_NODE	882:1	882:1	5	if
LEAF_NODE	882:4	882:4	4	(
CONDITION	882:5	882:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	882:5	882:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	882:5	882:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	882:5	882:5	7	!
LEAF_NODE	882:5	882:5	8	!
LEAF_NODE	882:6	882:6	7	(
FIELD	882:7	882:12	7	tif -> tif_flags
LEAF_NODE	882:7	882:7	8	tif
LEAF_NODE	882:10	882:10	8	->
LEAF_NODE	882:12	882:12	8	tif_flags
LEAF_NODE	882:21	882:21	7	&
FIELD	882:22	882:22	7	TIFF_BIGTIFF
LEAF_NODE	882:22	882:22	8	TIFF_BIGTIFF
LEAF_NODE	882:34	882:34	7	)
LEAF_NODE	882:35	882:35	4	)
STATEMENTS	883:1	902:1	4	
LEAF_NODE	883:1	883:1	5	{
STATEMENTS	884:2	886:2	5	
SELECTION	884:2	885:3	6	
KEYWORD	884:2	884:2	7	if
LEAF_NODE	884:2	884:2	8	if
LEAF_NODE	884:5	884:5	7	(
CONDITION	884:6	884:6	7	datasize <= 4
EXPR	884:6	884:16	8	datasize <= 4
FIELD	884:6	884:6	9	datasize
LEAF_NODE	884:6	884:6	10	datasize
REL_OPERATOR	884:14	884:14	9	<=
LEAF_NODE	884:14	884:14	10	<=
FIELD	884:16	884:16	9	4
LEAF_NODE	884:16	884:16	10	4
LEAF_NODE	884:17	884:17	7	)
STATEMENTS	885:3	885:3	7	
EXPR_STATEMENT	885:3	885:52	8	_TIFFmemcpy ( data , & direntry -> tdir_offset , datasize ) ;
EXPR	885:3	885:3	9	_TIFFmemcpy ( data , & direntry -> tdir_offset , datasize )
FUNCTION_CALL	885:3	885:51	10	_TIFFmemcpy ( data , & direntry -> tdir_offset , datasize )
CALLEE	885:3	885:3	11	_TIFFmemcpy
LEAF_NODE	885:3	885:3	12	_TIFFmemcpy
LEAF_NODE	885:14	885:14	11	(
ARGUMENT	885:15	885:15	11	data
FIELD	885:15	885:15	12	data
LEAF_NODE	885:15	885:15	13	data
LEAF_NODE	885:19	885:19	11	,
ARGUMENT	885:20	885:20	11	& direntry -> tdir_offset
UNARY_EXPR	885:20	885:21	12	& direntry -> tdir_offset
UNARY_OPERATOR	885:20	885:20	13	&
LEAF_NODE	885:20	885:20	14	&
FIELD	885:21	885:31	13	direntry -> tdir_offset
LEAF_NODE	885:21	885:21	14	direntry
LEAF_NODE	885:29	885:29	14	->
LEAF_NODE	885:31	885:31	14	tdir_offset
LEAF_NODE	885:42	885:42	11	,
ARGUMENT	885:43	885:43	11	datasize
FIELD	885:43	885:43	12	datasize
LEAF_NODE	885:43	885:43	13	datasize
LEAF_NODE	885:51	885:51	11	)
LEAF_NODE	885:52	885:52	9	;
SELECTION	886:2	887:2	6	
KEYWORD	886:2	886:2	7	else
LEAF_NODE	886:2	886:2	8	else
STATEMENTS	887:2	901:2	7	
LEAF_NODE	887:2	887:2	8	{
STATEMENTS	888:3	896:3	8	
SIMPLE_DECL	888:3	888:31	9	enum TIFFReadDirEntryErr err ;
VAR_DECL	888:3	888:28	10	enum TIFFReadDirEntryErr err
TYPE	888:3	888:3	11	enum TIFFReadDirEntryErr
TYPE_NAME	888:3	888:8	12	enum TIFFReadDirEntryErr
LEAF_NODE	888:3	888:3	13	enum
LEAF_NODE	888:8	888:8	13	TIFFReadDirEntryErr
NAME	888:28	888:28	11	err
LEAF_NODE	888:28	888:28	12	err
LEAF_NODE	888:31	888:31	10	;
SIMPLE_DECL	889:3	889:50	9	uint32 offset ; offset = direntry -> tdir_offset . toff_long ;
VAR_DECL	889:3	889:10	10	uint32 offset ; offset = direntry -> tdir_offset . toff_long
TYPE	889:3	889:3	11	uint32
TYPE_NAME	889:3	889:3	12	uint32
LEAF_NODE	889:3	889:3	13	uint32
NAME	889:10	889:10	11	offset
LEAF_NODE	889:10	889:10	12	offset
LEAF_NODE	0:0	0:0	11	;
INIT	889:10	889:10	11	offset = direntry -> tdir_offset . toff_long
ASSIGN	889:10	889:19	12	offset = direntry -> tdir_offset . toff_long
LVAL	889:10	889:10	13	offset
NAME	889:10	889:10	14	offset
LEAF_NODE	889:10	889:10	15	offset
ASSIGN_OP	889:17	889:17	13	=
LEAF_NODE	889:17	889:17	14	=
RVAL	889:19	889:19	13	direntry -> tdir_offset . toff_long
FIELD	889:19	889:41	14	direntry -> tdir_offset . toff_long
LEAF_NODE	889:19	889:19	15	direntry
LEAF_NODE	889:27	889:27	15	->
LEAF_NODE	889:29	889:29	15	tdir_offset
LEAF_NODE	889:40	889:40	15	.
LEAF_NODE	889:41	889:41	15	toff_long
LEAF_NODE	889:50	889:50	10	;
SELECTION	890:3	891:4	9	
KEYWORD	890:3	890:3	10	if
LEAF_NODE	890:3	890:3	11	if
LEAF_NODE	890:6	890:6	10	(
CONDITION	890:7	890:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	890:7	890:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	890:7	890:12	12	tif -> tif_flags
LEAF_NODE	890:7	890:7	13	tif
LEAF_NODE	890:10	890:10	13	->
LEAF_NODE	890:12	890:12	13	tif_flags
LEAF_NODE	890:21	890:21	12	&
FIELD	890:22	890:22	12	TIFF_SWAB
LEAF_NODE	890:22	890:22	13	TIFF_SWAB
LEAF_NODE	890:31	890:31	10	)
STATEMENTS	891:4	891:4	10	
EXPR_STATEMENT	891:4	891:25	11	TIFFSwabLong ( & offset ) ;
EXPR	891:4	891:4	12	TIFFSwabLong ( & offset )
FUNCTION_CALL	891:4	891:24	13	TIFFSwabLong ( & offset )
CALLEE	891:4	891:4	14	TIFFSwabLong
LEAF_NODE	891:4	891:4	15	TIFFSwabLong
LEAF_NODE	891:16	891:16	14	(
ARGUMENT	891:17	891:17	14	& offset
UNARY_EXPR	891:17	891:18	15	& offset
UNARY_OPERATOR	891:17	891:17	16	&
LEAF_NODE	891:17	891:17	17	&
FIELD	891:18	891:18	16	offset
LEAF_NODE	891:18	891:18	17	offset
LEAF_NODE	891:24	891:24	14	)
LEAF_NODE	891:25	891:25	12	;
SELECTION	892:3	893:4	9	
KEYWORD	892:3	892:3	10	if
LEAF_NODE	892:3	892:3	11	if
LEAF_NODE	892:5	892:5	10	(
CONDITION	892:7	892:7	10	isMapped ( tif )
EXPR	892:7	892:7	11	isMapped ( tif )
FUNCTION_CALL	892:7	892:19	12	isMapped ( tif )
CALLEE	892:7	892:7	13	isMapped
LEAF_NODE	892:7	892:7	14	isMapped
LEAF_NODE	892:15	892:15	13	(
ARGUMENT	892:16	892:16	13	tif
FIELD	892:16	892:16	14	tif
LEAF_NODE	892:16	892:16	15	tif
LEAF_NODE	892:19	892:19	13	)
LEAF_NODE	892:21	892:21	10	)
STATEMENTS	893:4	893:4	10	
EXPR_STATEMENT	893:4	893:72	11	err = TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data ) ;
EXPR	893:4	893:4	12	err = TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
ASSIGN	893:4	893:8	13	err = TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
LVAL	893:4	893:4	14	err
FIELD	893:4	893:4	15	err
LEAF_NODE	893:4	893:4	16	err
ASSIGN_OP	893:7	893:7	14	=
LEAF_NODE	893:7	893:7	15	=
RVAL	893:8	893:8	14	TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
FUNCTION_CALL	893:8	893:71	15	TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
CALLEE	893:8	893:8	16	TIFFReadDirEntryData
LEAF_NODE	893:8	893:8	17	TIFFReadDirEntryData
LEAF_NODE	893:28	893:28	16	(
ARGUMENT	893:29	893:29	16	tif
FIELD	893:29	893:29	17	tif
LEAF_NODE	893:29	893:29	18	tif
LEAF_NODE	893:32	893:32	16	,
ARGUMENT	893:33	893:41	16	( uint64 ) offset
LEAF_NODE	893:33	893:33	17	(
TYPE_NAME	893:34	893:34	17	uint64
LEAF_NODE	893:34	893:34	18	uint64
LEAF_NODE	893:40	893:40	17	)
FIELD	893:41	893:41	17	offset
LEAF_NODE	893:41	893:41	18	offset
LEAF_NODE	893:47	893:47	16	,
ARGUMENT	893:48	893:58	16	( tmsize_t ) datasize
LEAF_NODE	893:48	893:48	17	(
TYPE_NAME	893:49	893:49	17	tmsize_t
LEAF_NODE	893:49	893:49	18	tmsize_t
LEAF_NODE	893:57	893:57	17	)
FIELD	893:58	893:58	17	datasize
LEAF_NODE	893:58	893:58	18	datasize
LEAF_NODE	893:66	893:66	16	,
ARGUMENT	893:67	893:67	16	data
FIELD	893:67	893:67	17	data
LEAF_NODE	893:67	893:67	18	data
LEAF_NODE	893:71	893:71	16	)
LEAF_NODE	893:72	893:72	12	;
SELECTION	894:3	895:4	9	
KEYWORD	894:3	894:3	10	else
LEAF_NODE	894:3	894:3	11	else
STATEMENTS	895:4	895:4	10	
EXPR_STATEMENT	895:4	895:83	11	err = TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data ) ;
EXPR	895:4	895:4	12	err = TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
ASSIGN	895:4	895:8	13	err = TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
LVAL	895:4	895:4	14	err
FIELD	895:4	895:4	15	err
LEAF_NODE	895:4	895:4	16	err
ASSIGN_OP	895:7	895:7	14	=
LEAF_NODE	895:7	895:7	15	=
RVAL	895:8	895:8	14	TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
FUNCTION_CALL	895:8	895:82	15	TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
CALLEE	895:8	895:8	16	TIFFReadDirEntryDataAndRealloc
LEAF_NODE	895:8	895:8	17	TIFFReadDirEntryDataAndRealloc
LEAF_NODE	895:38	895:38	16	(
ARGUMENT	895:39	895:39	16	tif
FIELD	895:39	895:39	17	tif
LEAF_NODE	895:39	895:39	18	tif
LEAF_NODE	895:42	895:42	16	,
ARGUMENT	895:43	895:51	16	( uint64 ) offset
LEAF_NODE	895:43	895:43	17	(
TYPE_NAME	895:44	895:44	17	uint64
LEAF_NODE	895:44	895:44	18	uint64
LEAF_NODE	895:50	895:50	17	)
FIELD	895:51	895:51	17	offset
LEAF_NODE	895:51	895:51	18	offset
LEAF_NODE	895:57	895:57	16	,
ARGUMENT	895:58	895:68	16	( tmsize_t ) datasize
LEAF_NODE	895:58	895:58	17	(
TYPE_NAME	895:59	895:59	17	tmsize_t
LEAF_NODE	895:59	895:59	18	tmsize_t
LEAF_NODE	895:67	895:67	17	)
FIELD	895:68	895:68	17	datasize
LEAF_NODE	895:68	895:68	18	datasize
LEAF_NODE	895:76	895:76	16	,
ARGUMENT	895:77	895:77	16	& data
UNARY_EXPR	895:77	895:78	17	& data
UNARY_OPERATOR	895:77	895:77	18	&
LEAF_NODE	895:77	895:77	19	&
FIELD	895:78	895:78	18	data
LEAF_NODE	895:78	895:78	19	data
LEAF_NODE	895:82	895:82	16	)
LEAF_NODE	895:83	895:83	12	;
SELECTION	896:3	897:3	9	
KEYWORD	896:3	896:3	10	if
LEAF_NODE	896:3	896:3	11	if
LEAF_NODE	896:6	896:6	10	(
CONDITION	896:7	896:7	10	err != TIFFReadDirEntryErrOk
EXPR	896:7	896:12	11	err != TIFFReadDirEntryErrOk
FIELD	896:7	896:7	12	err
LEAF_NODE	896:7	896:7	13	err
EQ_OPERATOR	896:10	896:10	12	!=
LEAF_NODE	896:10	896:10	13	!=
FIELD	896:12	896:12	12	TIFFReadDirEntryErrOk
LEAF_NODE	896:12	896:12	13	TIFFReadDirEntryErrOk
LEAF_NODE	896:33	896:33	10	)
STATEMENTS	897:3	900:3	10	
LEAF_NODE	897:3	897:3	11	{
STATEMENTS	898:4	899:15	11	
EXPR_STATEMENT	898:4	898:19	12	_TIFFfree ( data ) ;
EXPR	898:4	898:4	13	_TIFFfree ( data )
FUNCTION_CALL	898:4	898:18	14	_TIFFfree ( data )
CALLEE	898:4	898:4	15	_TIFFfree
LEAF_NODE	898:4	898:4	16	_TIFFfree
LEAF_NODE	898:13	898:13	15	(
ARGUMENT	898:14	898:14	15	data
FIELD	898:14	898:14	16	data
LEAF_NODE	898:14	898:14	17	data
LEAF_NODE	898:18	898:18	15	)
LEAF_NODE	898:19	898:19	13	;
LEAF_NODE	899:4	899:4	12	return
LEAF_NODE	899:10	899:10	12	(
LEAF_NODE	899:11	899:11	12	err
LEAF_NODE	899:14	899:14	12	)
LEAF_NODE	899:15	899:15	12	;
LEAF_NODE	900:3	900:3	11	}
LEAF_NODE	901:2	901:2	8	}
LEAF_NODE	902:1	902:1	5	}
SELECTION	903:1	904:1	3	
KEYWORD	903:1	903:1	4	else
LEAF_NODE	903:1	903:1	5	else
STATEMENTS	904:1	923:1	4	
LEAF_NODE	904:1	904:1	5	{
STATEMENTS	905:2	907:2	5	
SELECTION	905:2	906:3	6	
KEYWORD	905:2	905:2	7	if
LEAF_NODE	905:2	905:2	8	if
LEAF_NODE	905:5	905:5	7	(
CONDITION	905:6	905:6	7	datasize <= 8
EXPR	905:6	905:16	8	datasize <= 8
FIELD	905:6	905:6	9	datasize
LEAF_NODE	905:6	905:6	10	datasize
REL_OPERATOR	905:14	905:14	9	<=
LEAF_NODE	905:14	905:14	10	<=
FIELD	905:16	905:16	9	8
LEAF_NODE	905:16	905:16	10	8
LEAF_NODE	905:17	905:17	7	)
STATEMENTS	906:3	906:3	7	
EXPR_STATEMENT	906:3	906:52	8	_TIFFmemcpy ( data , & direntry -> tdir_offset , datasize ) ;
EXPR	906:3	906:3	9	_TIFFmemcpy ( data , & direntry -> tdir_offset , datasize )
FUNCTION_CALL	906:3	906:51	10	_TIFFmemcpy ( data , & direntry -> tdir_offset , datasize )
CALLEE	906:3	906:3	11	_TIFFmemcpy
LEAF_NODE	906:3	906:3	12	_TIFFmemcpy
LEAF_NODE	906:14	906:14	11	(
ARGUMENT	906:15	906:15	11	data
FIELD	906:15	906:15	12	data
LEAF_NODE	906:15	906:15	13	data
LEAF_NODE	906:19	906:19	11	,
ARGUMENT	906:20	906:20	11	& direntry -> tdir_offset
UNARY_EXPR	906:20	906:21	12	& direntry -> tdir_offset
UNARY_OPERATOR	906:20	906:20	13	&
LEAF_NODE	906:20	906:20	14	&
FIELD	906:21	906:31	13	direntry -> tdir_offset
LEAF_NODE	906:21	906:21	14	direntry
LEAF_NODE	906:29	906:29	14	->
LEAF_NODE	906:31	906:31	14	tdir_offset
LEAF_NODE	906:42	906:42	11	,
ARGUMENT	906:43	906:43	11	datasize
FIELD	906:43	906:43	12	datasize
LEAF_NODE	906:43	906:43	13	datasize
LEAF_NODE	906:51	906:51	11	)
LEAF_NODE	906:52	906:52	9	;
SELECTION	907:2	908:2	6	
KEYWORD	907:2	907:2	7	else
LEAF_NODE	907:2	907:2	8	else
STATEMENTS	908:2	922:2	7	
LEAF_NODE	908:2	908:2	8	{
STATEMENTS	909:3	917:3	8	
SIMPLE_DECL	909:3	909:31	9	enum TIFFReadDirEntryErr err ;
VAR_DECL	909:3	909:28	10	enum TIFFReadDirEntryErr err
TYPE	909:3	909:3	11	enum TIFFReadDirEntryErr
TYPE_NAME	909:3	909:8	12	enum TIFFReadDirEntryErr
LEAF_NODE	909:3	909:3	13	enum
LEAF_NODE	909:8	909:8	13	TIFFReadDirEntryErr
NAME	909:28	909:28	11	err
LEAF_NODE	909:28	909:28	12	err
LEAF_NODE	909:31	909:31	10	;
SIMPLE_DECL	910:3	910:51	9	uint64 offset ; offset = direntry -> tdir_offset . toff_long8 ;
VAR_DECL	910:3	910:10	10	uint64 offset ; offset = direntry -> tdir_offset . toff_long8
TYPE	910:3	910:3	11	uint64
TYPE_NAME	910:3	910:3	12	uint64
LEAF_NODE	910:3	910:3	13	uint64
NAME	910:10	910:10	11	offset
LEAF_NODE	910:10	910:10	12	offset
LEAF_NODE	0:0	0:0	11	;
INIT	910:10	910:10	11	offset = direntry -> tdir_offset . toff_long8
ASSIGN	910:10	910:19	12	offset = direntry -> tdir_offset . toff_long8
LVAL	910:10	910:10	13	offset
NAME	910:10	910:10	14	offset
LEAF_NODE	910:10	910:10	15	offset
ASSIGN_OP	910:17	910:17	13	=
LEAF_NODE	910:17	910:17	14	=
RVAL	910:19	910:19	13	direntry -> tdir_offset . toff_long8
FIELD	910:19	910:41	14	direntry -> tdir_offset . toff_long8
LEAF_NODE	910:19	910:19	15	direntry
LEAF_NODE	910:27	910:27	15	->
LEAF_NODE	910:29	910:29	15	tdir_offset
LEAF_NODE	910:40	910:40	15	.
LEAF_NODE	910:41	910:41	15	toff_long8
LEAF_NODE	910:51	910:51	10	;
SELECTION	911:3	912:4	9	
KEYWORD	911:3	911:3	10	if
LEAF_NODE	911:3	911:3	11	if
LEAF_NODE	911:6	911:6	10	(
CONDITION	911:7	911:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	911:7	911:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	911:7	911:12	12	tif -> tif_flags
LEAF_NODE	911:7	911:7	13	tif
LEAF_NODE	911:10	911:10	13	->
LEAF_NODE	911:12	911:12	13	tif_flags
LEAF_NODE	911:21	911:21	12	&
FIELD	911:22	911:22	12	TIFF_SWAB
LEAF_NODE	911:22	911:22	13	TIFF_SWAB
LEAF_NODE	911:31	911:31	10	)
STATEMENTS	912:4	912:4	10	
EXPR_STATEMENT	912:4	912:26	11	TIFFSwabLong8 ( & offset ) ;
EXPR	912:4	912:4	12	TIFFSwabLong8 ( & offset )
FUNCTION_CALL	912:4	912:25	13	TIFFSwabLong8 ( & offset )
CALLEE	912:4	912:4	14	TIFFSwabLong8
LEAF_NODE	912:4	912:4	15	TIFFSwabLong8
LEAF_NODE	912:17	912:17	14	(
ARGUMENT	912:18	912:18	14	& offset
UNARY_EXPR	912:18	912:19	15	& offset
UNARY_OPERATOR	912:18	912:18	16	&
LEAF_NODE	912:18	912:18	17	&
FIELD	912:19	912:19	16	offset
LEAF_NODE	912:19	912:19	17	offset
LEAF_NODE	912:25	912:25	14	)
LEAF_NODE	912:26	912:26	12	;
SELECTION	913:3	914:4	9	
KEYWORD	913:3	913:3	10	if
LEAF_NODE	913:3	913:3	11	if
LEAF_NODE	913:5	913:5	10	(
CONDITION	913:7	913:7	10	isMapped ( tif )
EXPR	913:7	913:7	11	isMapped ( tif )
FUNCTION_CALL	913:7	913:19	12	isMapped ( tif )
CALLEE	913:7	913:7	13	isMapped
LEAF_NODE	913:7	913:7	14	isMapped
LEAF_NODE	913:15	913:15	13	(
ARGUMENT	913:16	913:16	13	tif
FIELD	913:16	913:16	14	tif
LEAF_NODE	913:16	913:16	15	tif
LEAF_NODE	913:19	913:19	13	)
LEAF_NODE	913:21	913:21	10	)
STATEMENTS	914:4	914:4	10	
EXPR_STATEMENT	914:4	914:72	11	err = TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data ) ;
EXPR	914:4	914:4	12	err = TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
ASSIGN	914:4	914:8	13	err = TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
LVAL	914:4	914:4	14	err
FIELD	914:4	914:4	15	err
LEAF_NODE	914:4	914:4	16	err
ASSIGN_OP	914:7	914:7	14	=
LEAF_NODE	914:7	914:7	15	=
RVAL	914:8	914:8	14	TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
FUNCTION_CALL	914:8	914:71	15	TIFFReadDirEntryData ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , data )
CALLEE	914:8	914:8	16	TIFFReadDirEntryData
LEAF_NODE	914:8	914:8	17	TIFFReadDirEntryData
LEAF_NODE	914:28	914:28	16	(
ARGUMENT	914:29	914:29	16	tif
FIELD	914:29	914:29	17	tif
LEAF_NODE	914:29	914:29	18	tif
LEAF_NODE	914:32	914:32	16	,
ARGUMENT	914:33	914:41	16	( uint64 ) offset
LEAF_NODE	914:33	914:33	17	(
TYPE_NAME	914:34	914:34	17	uint64
LEAF_NODE	914:34	914:34	18	uint64
LEAF_NODE	914:40	914:40	17	)
FIELD	914:41	914:41	17	offset
LEAF_NODE	914:41	914:41	18	offset
LEAF_NODE	914:47	914:47	16	,
ARGUMENT	914:48	914:58	16	( tmsize_t ) datasize
LEAF_NODE	914:48	914:48	17	(
TYPE_NAME	914:49	914:49	17	tmsize_t
LEAF_NODE	914:49	914:49	18	tmsize_t
LEAF_NODE	914:57	914:57	17	)
FIELD	914:58	914:58	17	datasize
LEAF_NODE	914:58	914:58	18	datasize
LEAF_NODE	914:66	914:66	16	,
ARGUMENT	914:67	914:67	16	data
FIELD	914:67	914:67	17	data
LEAF_NODE	914:67	914:67	18	data
LEAF_NODE	914:71	914:71	16	)
LEAF_NODE	914:72	914:72	12	;
SELECTION	915:3	916:4	9	
KEYWORD	915:3	915:3	10	else
LEAF_NODE	915:3	915:3	11	else
STATEMENTS	916:4	916:4	10	
EXPR_STATEMENT	916:4	916:83	11	err = TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data ) ;
EXPR	916:4	916:4	12	err = TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
ASSIGN	916:4	916:8	13	err = TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
LVAL	916:4	916:4	14	err
FIELD	916:4	916:4	15	err
LEAF_NODE	916:4	916:4	16	err
ASSIGN_OP	916:7	916:7	14	=
LEAF_NODE	916:7	916:7	15	=
RVAL	916:8	916:8	14	TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
FUNCTION_CALL	916:8	916:82	15	TIFFReadDirEntryDataAndRealloc ( tif , ( uint64 ) offset , ( tmsize_t ) datasize , & data )
CALLEE	916:8	916:8	16	TIFFReadDirEntryDataAndRealloc
LEAF_NODE	916:8	916:8	17	TIFFReadDirEntryDataAndRealloc
LEAF_NODE	916:38	916:38	16	(
ARGUMENT	916:39	916:39	16	tif
FIELD	916:39	916:39	17	tif
LEAF_NODE	916:39	916:39	18	tif
LEAF_NODE	916:42	916:42	16	,
ARGUMENT	916:43	916:51	16	( uint64 ) offset
LEAF_NODE	916:43	916:43	17	(
TYPE_NAME	916:44	916:44	17	uint64
LEAF_NODE	916:44	916:44	18	uint64
LEAF_NODE	916:50	916:50	17	)
FIELD	916:51	916:51	17	offset
LEAF_NODE	916:51	916:51	18	offset
LEAF_NODE	916:57	916:57	16	,
ARGUMENT	916:58	916:68	16	( tmsize_t ) datasize
LEAF_NODE	916:58	916:58	17	(
TYPE_NAME	916:59	916:59	17	tmsize_t
LEAF_NODE	916:59	916:59	18	tmsize_t
LEAF_NODE	916:67	916:67	17	)
FIELD	916:68	916:68	17	datasize
LEAF_NODE	916:68	916:68	18	datasize
LEAF_NODE	916:76	916:76	16	,
ARGUMENT	916:77	916:77	16	& data
UNARY_EXPR	916:77	916:78	17	& data
UNARY_OPERATOR	916:77	916:77	18	&
LEAF_NODE	916:77	916:77	19	&
FIELD	916:78	916:78	18	data
LEAF_NODE	916:78	916:78	19	data
LEAF_NODE	916:82	916:82	16	)
LEAF_NODE	916:83	916:83	12	;
SELECTION	917:3	918:3	9	
KEYWORD	917:3	917:3	10	if
LEAF_NODE	917:3	917:3	11	if
LEAF_NODE	917:6	917:6	10	(
CONDITION	917:7	917:7	10	err != TIFFReadDirEntryErrOk
EXPR	917:7	917:12	11	err != TIFFReadDirEntryErrOk
FIELD	917:7	917:7	12	err
LEAF_NODE	917:7	917:7	13	err
EQ_OPERATOR	917:10	917:10	12	!=
LEAF_NODE	917:10	917:10	13	!=
FIELD	917:12	917:12	12	TIFFReadDirEntryErrOk
LEAF_NODE	917:12	917:12	13	TIFFReadDirEntryErrOk
LEAF_NODE	917:33	917:33	10	)
STATEMENTS	918:3	921:3	10	
LEAF_NODE	918:3	918:3	11	{
STATEMENTS	919:4	920:15	11	
EXPR_STATEMENT	919:4	919:19	12	_TIFFfree ( data ) ;
EXPR	919:4	919:4	13	_TIFFfree ( data )
FUNCTION_CALL	919:4	919:18	14	_TIFFfree ( data )
CALLEE	919:4	919:4	15	_TIFFfree
LEAF_NODE	919:4	919:4	16	_TIFFfree
LEAF_NODE	919:13	919:13	15	(
ARGUMENT	919:14	919:14	15	data
FIELD	919:14	919:14	16	data
LEAF_NODE	919:14	919:14	17	data
LEAF_NODE	919:18	919:18	15	)
LEAF_NODE	919:19	919:19	13	;
LEAF_NODE	920:4	920:4	12	return
LEAF_NODE	920:10	920:10	12	(
LEAF_NODE	920:11	920:11	12	err
LEAF_NODE	920:14	920:14	12	)
LEAF_NODE	920:15	920:15	12	;
LEAF_NODE	921:3	921:3	11	}
LEAF_NODE	922:2	922:2	8	}
LEAF_NODE	923:1	923:1	5	}
EXPR_STATEMENT	924:1	924:12	3	* value = data ;
EXPR	924:1	924:1	4	* value = data
ASSIGN	924:1	924:8	5	* value = data
LVAL	924:1	924:1	6	* value
UNARY_EXPR	924:1	924:2	7	* value
UNARY_OPERATOR	924:1	924:1	8	*
LEAF_NODE	924:1	924:1	9	*
FIELD	924:2	924:2	8	value
LEAF_NODE	924:2	924:2	9	value
ASSIGN_OP	924:7	924:7	6	=
LEAF_NODE	924:7	924:7	7	=
RVAL	924:8	924:8	6	data
FIELD	924:8	924:8	7	data
LEAF_NODE	924:8	924:8	8	data
LEAF_NODE	924:12	924:12	4	;
LEAF_NODE	925:1	925:1	3	return
LEAF_NODE	925:7	925:7	3	(
LEAF_NODE	925:8	925:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	925:29	925:29	3	)
LEAF_NODE	925:30	925:30	3	;
LEAF_NODE	926:0	926:0	2	}
FUNCTION_DEF	928:0	932:0	1	
RETURN_TYPE	928:0	928:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	928:0	928:0	3	static
TYPE_NAME	928:7	928:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	928:7	928:7	4	enum
LEAF_NODE	928:12	928:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	928:32	928:32	2	TIFFReadDirEntryArray
LEAF_NODE	928:32	928:32	3	TIFFReadDirEntryArray
PARAMETER_LIST	928:53	928:137	2	( TIFF * tif , TIFFDirEntry * direntry , uint32 * count , uint32 desttypesize , void * * value )
LEAF_NODE	928:53	928:53	3	(
PARAMETER_DECL	928:54	928:60	3	TIFF * tif
TYPE	928:54	928:58	4	TIFF *
TYPE_NAME	928:54	928:54	5	TIFF
LEAF_NODE	928:54	928:54	6	TIFF
POINTER	928:58	928:58	5	*
LEAF_NODE	928:58	928:58	6	*
NAME	928:60	928:60	4	tif
LEAF_NODE	928:60	928:60	5	tif
LEAF_NODE	928:63	928:63	3	,
PARAMETER_DECL	928:65	928:79	3	TIFFDirEntry * direntry
TYPE	928:65	928:77	4	TIFFDirEntry *
TYPE_NAME	928:65	928:65	5	TIFFDirEntry
LEAF_NODE	928:65	928:65	6	TIFFDirEntry
POINTER	928:77	928:77	5	*
LEAF_NODE	928:77	928:77	6	*
NAME	928:79	928:79	4	direntry
LEAF_NODE	928:79	928:79	5	direntry
LEAF_NODE	928:87	928:87	3	,
PARAMETER_DECL	928:89	928:97	3	uint32 * count
TYPE	928:89	928:95	4	uint32 *
TYPE_NAME	928:89	928:89	5	uint32
LEAF_NODE	928:89	928:89	6	uint32
POINTER	928:95	928:95	5	*
LEAF_NODE	928:95	928:95	6	*
NAME	928:97	928:97	4	count
LEAF_NODE	928:97	928:97	5	count
LEAF_NODE	928:102	928:102	3	,
PARAMETER_DECL	928:104	928:111	3	uint32 desttypesize
TYPE	928:104	928:104	4	uint32
TYPE_NAME	928:104	928:104	5	uint32
LEAF_NODE	928:104	928:104	6	uint32
NAME	928:111	928:111	4	desttypesize
LEAF_NODE	928:111	928:111	5	desttypesize
LEAF_NODE	928:123	928:123	3	,
PARAMETER_DECL	928:125	928:132	3	void * * value
TYPE	928:125	928:129	4	void * *
TYPE_NAME	928:125	928:125	5	void
LEAF_NODE	928:125	928:125	6	void
POINTER	928:129	928:130	5	* *
LEAF_NODE	928:129	928:129	6	*
LEAF_NODE	928:130	928:130	6	*
NAME	928:132	928:132	4	value
LEAF_NODE	928:132	928:132	5	value
LEAF_NODE	928:137	928:137	3	)
LEAF_NODE	929:0	929:0	2	{
STATEMENTS	930:4	930:4	2	
JUMP_STATEMENT	930:4	931:76	3	return TIFFReadDirEntryArrayWithLimit ( tif , direntry , count , desttypesize , value , ~ ( ( uint64 ) 0 ) ) ;
KEYWORD	930:4	930:4	4	return
LEAF_NODE	930:4	930:4	5	return
DESTINATION	930:11	930:11	4	TIFFReadDirEntryArrayWithLimit ( tif , direntry , count , desttypesize , value , ~ ( ( uint64 ) 0 ) )
EXPR	930:11	930:11	5	TIFFReadDirEntryArrayWithLimit ( tif , direntry , count , desttypesize , value , ~ ( ( uint64 ) 0 ) )
FUNCTION_CALL	930:11	931:75	6	TIFFReadDirEntryArrayWithLimit ( tif , direntry , count , desttypesize , value , ~ ( ( uint64 ) 0 ) )
CALLEE	930:11	930:11	7	TIFFReadDirEntryArrayWithLimit
LEAF_NODE	930:11	930:11	8	TIFFReadDirEntryArrayWithLimit
LEAF_NODE	930:41	930:41	7	(
ARGUMENT	930:42	930:42	7	tif
FIELD	930:42	930:42	8	tif
LEAF_NODE	930:42	930:42	9	tif
LEAF_NODE	930:45	930:45	7	,
ARGUMENT	930:47	930:47	7	direntry
FIELD	930:47	930:47	8	direntry
LEAF_NODE	930:47	930:47	9	direntry
LEAF_NODE	930:55	930:55	7	,
ARGUMENT	930:57	930:57	7	count
FIELD	930:57	930:57	8	count
LEAF_NODE	930:57	930:57	9	count
LEAF_NODE	930:62	930:62	7	,
ARGUMENT	931:42	931:42	7	desttypesize
FIELD	931:42	931:42	8	desttypesize
LEAF_NODE	931:42	931:42	9	desttypesize
LEAF_NODE	931:54	931:54	7	,
ARGUMENT	931:56	931:56	7	value
FIELD	931:56	931:56	8	value
LEAF_NODE	931:56	931:56	9	value
LEAF_NODE	931:61	931:61	7	,
ARGUMENT	931:63	931:63	7	~ ( ( uint64 ) 0 )
UNARY_EXPR	931:63	931:74	8	~ ( ( uint64 ) 0 )
UNARY_OPERATOR	931:63	931:63	9	~
LEAF_NODE	931:63	931:63	10	~
LEAF_NODE	931:64	931:64	9	(
LEAF_NODE	931:65	931:65	9	(
TYPE_NAME	931:66	931:66	9	uint64
LEAF_NODE	931:66	931:66	10	uint64
LEAF_NODE	931:72	931:72	9	)
FIELD	931:73	931:73	9	0
LEAF_NODE	931:73	931:73	10	0
LEAF_NODE	931:74	931:74	9	)
LEAF_NODE	931:75	931:75	7	)
LEAF_NODE	931:76	931:76	4	;
LEAF_NODE	932:0	932:0	2	}
FUNCTION_DEF	934:0	1113:0	1	
RETURN_TYPE	934:0	934:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	934:0	934:0	3	static
TYPE_NAME	934:7	934:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	934:7	934:7	4	enum
LEAF_NODE	934:12	934:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	934:32	934:32	2	TIFFReadDirEntryByteArray
LEAF_NODE	934:32	934:32	3	TIFFReadDirEntryByteArray
PARAMETER_LIST	934:57	934:106	2	( TIFF * tif , TIFFDirEntry * direntry , uint8 * * value )
LEAF_NODE	934:57	934:57	3	(
PARAMETER_DECL	934:58	934:64	3	TIFF * tif
TYPE	934:58	934:62	4	TIFF *
TYPE_NAME	934:58	934:58	5	TIFF
LEAF_NODE	934:58	934:58	6	TIFF
POINTER	934:62	934:62	5	*
LEAF_NODE	934:62	934:62	6	*
NAME	934:64	934:64	4	tif
LEAF_NODE	934:64	934:64	5	tif
LEAF_NODE	934:67	934:67	3	,
PARAMETER_DECL	934:69	934:83	3	TIFFDirEntry * direntry
TYPE	934:69	934:81	4	TIFFDirEntry *
TYPE_NAME	934:69	934:69	5	TIFFDirEntry
LEAF_NODE	934:69	934:69	6	TIFFDirEntry
POINTER	934:81	934:81	5	*
LEAF_NODE	934:81	934:81	6	*
NAME	934:83	934:83	4	direntry
LEAF_NODE	934:83	934:83	5	direntry
LEAF_NODE	934:91	934:91	3	,
PARAMETER_DECL	934:93	934:101	3	uint8 * * value
TYPE	934:93	934:98	4	uint8 * *
TYPE_NAME	934:93	934:93	5	uint8
LEAF_NODE	934:93	934:93	6	uint8
POINTER	934:98	934:99	5	* *
LEAF_NODE	934:98	934:98	6	*
LEAF_NODE	934:99	934:99	6	*
NAME	934:101	934:101	4	value
LEAF_NODE	934:101	934:101	5	value
LEAF_NODE	934:106	934:106	3	)
LEAF_NODE	935:0	935:0	2	{
STATEMENTS	936:1	1112:30	2	
SIMPLE_DECL	936:1	936:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	936:1	936:26	4	enum TIFFReadDirEntryErr err
TYPE	936:1	936:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	936:1	936:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	936:1	936:1	7	enum
LEAF_NODE	936:6	936:6	7	TIFFReadDirEntryErr
NAME	936:26	936:26	5	err
LEAF_NODE	936:26	936:26	6	err
LEAF_NODE	936:29	936:29	4	;
SIMPLE_DECL	937:1	937:13	3	uint32 count ;
VAR_DECL	937:1	937:8	4	uint32 count
TYPE	937:1	937:1	5	uint32
TYPE_NAME	937:1	937:1	6	uint32
LEAF_NODE	937:1	937:1	7	uint32
NAME	937:8	937:8	5	count
LEAF_NODE	937:8	937:8	6	count
LEAF_NODE	937:13	937:13	4	;
SIMPLE_DECL	938:1	938:15	3	void * origdata ;
VAR_DECL	938:1	938:7	4	void * origdata
TYPE	938:1	938:5	5	void *
TYPE_NAME	938:1	938:1	6	void
LEAF_NODE	938:1	938:1	7	void
POINTER	938:5	938:5	6	*
LEAF_NODE	938:5	938:5	7	*
NAME	938:7	938:7	5	origdata
LEAF_NODE	938:7	938:7	6	origdata
LEAF_NODE	938:15	938:15	4	;
SIMPLE_DECL	939:1	939:12	3	uint8 * data ;
VAR_DECL	939:1	939:8	4	uint8 * data
TYPE	939:1	939:6	5	uint8 *
TYPE_NAME	939:1	939:1	6	uint8
LEAF_NODE	939:1	939:1	7	uint8
POINTER	939:6	939:6	6	*
LEAF_NODE	939:6	939:6	7	*
NAME	939:8	939:8	5	data
LEAF_NODE	939:8	939:8	6	data
LEAF_NODE	939:12	939:12	4	;
SELECTION	940:1	941:1	3	
KEYWORD	940:1	940:1	4	switch
LEAF_NODE	940:1	940:1	5	switch
LEAF_NODE	940:8	940:8	4	(
CONDITION	940:9	940:9	4	direntry -> tdir_type
EXPR	940:9	940:9	5	direntry -> tdir_type
FIELD	940:9	940:19	6	direntry -> tdir_type
LEAF_NODE	940:9	940:9	7	direntry
LEAF_NODE	940:17	940:17	7	->
LEAF_NODE	940:19	940:19	7	tdir_type
LEAF_NODE	940:28	940:28	4	)
STATEMENTS	941:1	955:1	4	
LEAF_NODE	941:1	941:1	5	{
STATEMENTS	942:2	954:34	5	
LABEL	942:2	942:17	6	case TIFF_ASCII :
LEAF_NODE	942:2	942:2	7	case
LEAF_NODE	942:7	942:7	7	TIFF_ASCII
LEAF_NODE	942:17	942:17	7	:
LABEL	943:2	943:21	6	case TIFF_UNDEFINED :
LEAF_NODE	943:2	943:2	7	case
LEAF_NODE	943:7	943:7	7	TIFF_UNDEFINED
LEAF_NODE	943:21	943:21	7	:
LABEL	944:2	944:16	6	case TIFF_BYTE :
LEAF_NODE	944:2	944:2	7	case
LEAF_NODE	944:7	944:7	7	TIFF_BYTE
LEAF_NODE	944:16	944:16	7	:
LABEL	945:2	945:17	6	case TIFF_SBYTE :
LEAF_NODE	945:2	945:2	7	case
LEAF_NODE	945:7	945:7	7	TIFF_SBYTE
LEAF_NODE	945:17	945:17	7	:
LABEL	946:2	946:17	6	case TIFF_SHORT :
LEAF_NODE	946:2	946:2	7	case
LEAF_NODE	946:7	946:7	7	TIFF_SHORT
LEAF_NODE	946:17	946:17	7	:
LABEL	947:2	947:18	6	case TIFF_SSHORT :
LEAF_NODE	947:2	947:2	7	case
LEAF_NODE	947:7	947:7	7	TIFF_SSHORT
LEAF_NODE	947:18	947:18	7	:
LABEL	948:2	948:16	6	case TIFF_LONG :
LEAF_NODE	948:2	948:2	7	case
LEAF_NODE	948:7	948:7	7	TIFF_LONG
LEAF_NODE	948:16	948:16	7	:
LABEL	949:2	949:17	6	case TIFF_SLONG :
LEAF_NODE	949:2	949:2	7	case
LEAF_NODE	949:7	949:7	7	TIFF_SLONG
LEAF_NODE	949:17	949:17	7	:
LABEL	950:2	950:17	6	case TIFF_LONG8 :
LEAF_NODE	950:2	950:2	7	case
LEAF_NODE	950:7	950:7	7	TIFF_LONG8
LEAF_NODE	950:17	950:17	7	:
LABEL	951:2	951:18	6	case TIFF_SLONG8 :
LEAF_NODE	951:2	951:2	7	case
LEAF_NODE	951:7	951:7	7	TIFF_SLONG8
LEAF_NODE	951:18	951:18	7	:
JUMP_STATEMENT	952:3	952:8	6	break DESTINATION ;
KEYWORD	952:3	952:3	7	break
LEAF_NODE	952:3	952:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	952:8	952:8	7	;
LABEL	953:2	953:9	6	default :
LEAF_NODE	953:2	953:2	7	default
LEAF_NODE	953:9	953:9	7	:
LEAF_NODE	954:3	954:3	6	return
LEAF_NODE	954:9	954:9	6	(
LEAF_NODE	954:10	954:10	6	TIFFReadDirEntryErrType
LEAF_NODE	954:33	954:33	6	)
LEAF_NODE	954:34	954:34	6	;
LEAF_NODE	955:1	955:1	5	}
EXPR_STATEMENT	956:1	956:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata ) ;
EXPR	956:1	956:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
ASSIGN	956:1	956:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
LVAL	956:1	956:1	6	err
FIELD	956:1	956:1	7	err
LEAF_NODE	956:1	956:1	8	err
ASSIGN_OP	956:4	956:4	6	=
LEAF_NODE	956:4	956:4	7	=
RVAL	956:5	956:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
FUNCTION_CALL	956:5	956:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
CALLEE	956:5	956:5	8	TIFFReadDirEntryArray
LEAF_NODE	956:5	956:5	9	TIFFReadDirEntryArray
LEAF_NODE	956:26	956:26	8	(
ARGUMENT	956:27	956:27	8	tif
FIELD	956:27	956:27	9	tif
LEAF_NODE	956:27	956:27	10	tif
LEAF_NODE	956:30	956:30	8	,
ARGUMENT	956:31	956:31	8	direntry
FIELD	956:31	956:31	9	direntry
LEAF_NODE	956:31	956:31	10	direntry
LEAF_NODE	956:39	956:39	8	,
ARGUMENT	956:40	956:40	8	& count
UNARY_EXPR	956:40	956:41	9	& count
UNARY_OPERATOR	956:40	956:40	10	&
LEAF_NODE	956:40	956:40	11	&
FIELD	956:41	956:41	10	count
LEAF_NODE	956:41	956:41	11	count
LEAF_NODE	956:46	956:46	8	,
ARGUMENT	956:47	956:47	8	1
FIELD	956:47	956:47	9	1
LEAF_NODE	956:47	956:47	10	1
LEAF_NODE	956:48	956:48	8	,
ARGUMENT	956:49	956:49	8	& origdata
UNARY_EXPR	956:49	956:50	9	& origdata
UNARY_OPERATOR	956:49	956:49	10	&
LEAF_NODE	956:49	956:49	11	&
FIELD	956:50	956:50	10	origdata
LEAF_NODE	956:50	956:50	11	origdata
LEAF_NODE	956:58	956:58	8	)
LEAF_NODE	956:59	956:59	4	;
SELECTION	957:1	958:1	3	
KEYWORD	957:1	957:1	4	if
LEAF_NODE	957:1	957:1	5	if
LEAF_NODE	957:4	957:4	4	(
CONDITION	957:5	957:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	957:5	957:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	957:5	957:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	957:5	957:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	957:5	957:5	8	(
FIELD	957:6	957:6	8	err
LEAF_NODE	957:6	957:6	9	err
EQ_OPERATOR	957:9	957:9	8	!=
LEAF_NODE	957:9	957:9	9	!=
FIELD	957:11	957:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	957:11	957:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	957:32	957:32	8	)
LEAF_NODE	957:33	957:33	7	||
EXPR	957:35	957:47	7	( origdata == 0 )
LEAF_NODE	957:35	957:35	8	(
FIELD	957:36	957:36	8	origdata
LEAF_NODE	957:36	957:36	9	origdata
EQ_OPERATOR	957:44	957:44	8	==
LEAF_NODE	957:44	957:44	9	==
FIELD	957:46	957:46	8	0
LEAF_NODE	957:46	957:46	9	0
LEAF_NODE	957:47	957:47	8	)
LEAF_NODE	957:48	957:48	4	)
STATEMENTS	958:1	961:1	4	
LEAF_NODE	958:1	958:1	5	{
STATEMENTS	959:2	960:13	5	
EXPR_STATEMENT	959:2	959:10	6	* value = 0 ;
EXPR	959:2	959:2	7	* value = 0
ASSIGN	959:2	959:9	8	* value = 0
LVAL	959:2	959:2	9	* value
UNARY_EXPR	959:2	959:3	10	* value
UNARY_OPERATOR	959:2	959:2	11	*
LEAF_NODE	959:2	959:2	12	*
FIELD	959:3	959:3	11	value
LEAF_NODE	959:3	959:3	12	value
ASSIGN_OP	959:8	959:8	9	=
LEAF_NODE	959:8	959:8	10	=
RVAL	959:9	959:9	9	0
FIELD	959:9	959:9	10	0
LEAF_NODE	959:9	959:9	11	0
LEAF_NODE	959:10	959:10	7	;
LEAF_NODE	960:2	960:2	6	return
LEAF_NODE	960:8	960:8	6	(
LEAF_NODE	960:9	960:9	6	err
LEAF_NODE	960:12	960:12	6	)
LEAF_NODE	960:13	960:13	6	;
LEAF_NODE	961:1	961:1	5	}
SELECTION	962:1	963:1	3	
KEYWORD	962:1	962:1	4	switch
LEAF_NODE	962:1	962:1	5	switch
LEAF_NODE	962:8	962:8	4	(
CONDITION	962:9	962:9	4	direntry -> tdir_type
EXPR	962:9	962:9	5	direntry -> tdir_type
FIELD	962:9	962:19	6	direntry -> tdir_type
LEAF_NODE	962:9	962:9	7	direntry
LEAF_NODE	962:17	962:17	7	->
LEAF_NODE	962:19	962:19	7	tdir_type
LEAF_NODE	962:28	962:28	4	)
STATEMENTS	963:1	987:1	4	
LEAF_NODE	963:1	963:1	5	{
STATEMENTS	964:2	986:3	5	
LABEL	964:2	964:17	6	case TIFF_ASCII :
LEAF_NODE	964:2	964:2	7	case
LEAF_NODE	964:7	964:7	7	TIFF_ASCII
LEAF_NODE	964:17	964:17	7	:
LABEL	965:2	965:21	6	case TIFF_UNDEFINED :
LEAF_NODE	965:2	965:2	7	case
LEAF_NODE	965:7	965:7	7	TIFF_UNDEFINED
LEAF_NODE	965:21	965:21	7	:
LABEL	966:2	966:16	6	case TIFF_BYTE :
LEAF_NODE	966:2	966:2	7	case
LEAF_NODE	966:7	966:7	7	TIFF_BYTE
LEAF_NODE	966:16	966:16	7	:
EXPR_STATEMENT	967:3	967:26	6	* value = ( uint8 * ) origdata ;
EXPR	967:3	967:3	7	* value = ( uint8 * ) origdata
ASSIGN	967:3	967:10	8	* value = ( uint8 * ) origdata
LVAL	967:3	967:3	9	* value
UNARY_EXPR	967:3	967:4	10	* value
UNARY_OPERATOR	967:3	967:3	11	*
LEAF_NODE	967:3	967:3	12	*
FIELD	967:4	967:4	11	value
LEAF_NODE	967:4	967:4	12	value
ASSIGN_OP	967:9	967:9	9	=
LEAF_NODE	967:9	967:9	10	=
RVAL	967:10	967:18	9	( uint8 * ) origdata
LEAF_NODE	967:10	967:10	10	(
TYPE_NAME	967:11	967:11	10	uint8
LEAF_NODE	967:11	967:11	11	uint8
LEAF_NODE	967:16	967:16	10	*
LEAF_NODE	967:17	967:17	10	)
FIELD	967:18	967:18	10	origdata
LEAF_NODE	967:18	967:18	11	origdata
LEAF_NODE	967:26	967:26	7	;
LEAF_NODE	968:3	968:3	6	return
LEAF_NODE	968:9	968:9	6	(
LEAF_NODE	968:10	968:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	968:31	968:31	6	)
LEAF_NODE	968:32	968:32	6	;
LABEL	969:2	969:17	6	case TIFF_SBYTE :
LEAF_NODE	969:2	969:2	7	case
LEAF_NODE	969:7	969:7	7	TIFF_SBYTE
LEAF_NODE	969:17	969:17	7	:
LEAF_NODE	970:3	970:3	6	{
STATEMENTS	971:4	985:33	6	
SIMPLE_DECL	971:4	971:11	7	int8 * m ;
VAR_DECL	971:4	971:10	8	int8 * m
TYPE	971:4	971:8	9	int8 *
TYPE_NAME	971:4	971:4	10	int8
LEAF_NODE	971:4	971:4	11	int8
POINTER	971:8	971:8	10	*
LEAF_NODE	971:8	971:8	11	*
NAME	971:10	971:10	9	m
LEAF_NODE	971:10	971:10	10	m
LEAF_NODE	971:11	971:11	8	;
SIMPLE_DECL	972:4	972:12	7	uint32 n ;
VAR_DECL	972:4	972:11	8	uint32 n
TYPE	972:4	972:4	9	uint32
TYPE_NAME	972:4	972:4	10	uint32
LEAF_NODE	972:4	972:4	11	uint32
NAME	972:11	972:11	9	n
LEAF_NODE	972:11	972:11	10	n
LEAF_NODE	972:12	972:12	8	;
EXPR_STATEMENT	973:4	973:21	7	m = ( int8 * ) origdata ;
EXPR	973:4	973:4	8	m = ( int8 * ) origdata
ASSIGN	973:4	973:6	9	m = ( int8 * ) origdata
LVAL	973:4	973:4	10	m
FIELD	973:4	973:4	11	m
LEAF_NODE	973:4	973:4	12	m
ASSIGN_OP	973:5	973:5	10	=
LEAF_NODE	973:5	973:5	11	=
RVAL	973:6	973:13	10	( int8 * ) origdata
LEAF_NODE	973:6	973:6	11	(
TYPE_NAME	973:7	973:7	11	int8
LEAF_NODE	973:7	973:7	12	int8
LEAF_NODE	973:11	973:11	11	*
LEAF_NODE	973:12	973:12	11	)
FIELD	973:13	973:13	11	origdata
LEAF_NODE	973:13	973:13	12	origdata
LEAF_NODE	973:21	973:21	8	;
ITERATION	974:4	975:4	7	
KEYWORD	974:4	974:4	8	for
LEAF_NODE	974:4	974:4	9	for
LEAF_NODE	974:8	974:8	8	(
FOR_INIT	974:9	974:12	8	n = 0 ;
EXPR	974:9	974:9	9	n = 0
ASSIGN	974:9	974:11	10	n = 0
LVAL	974:9	974:9	11	n
FIELD	974:9	974:9	12	n
LEAF_NODE	974:9	974:9	13	n
ASSIGN_OP	974:10	974:10	11	=
LEAF_NODE	974:10	974:10	12	=
RVAL	974:11	974:11	11	0
FIELD	974:11	974:11	12	0
LEAF_NODE	974:11	974:11	13	0
LEAF_NODE	974:12	974:12	9	;
CONDITION	974:14	974:14	8	n < count
EXPR	974:14	974:16	9	n < count
FIELD	974:14	974:14	10	n
LEAF_NODE	974:14	974:14	11	n
REL_OPERATOR	974:15	974:15	10	<
LEAF_NODE	974:15	974:15	11	<
FIELD	974:16	974:16	10	count
LEAF_NODE	974:16	974:16	11	count
LEAF_NODE	974:21	974:21	8	;
FOR_EXPR	974:23	974:23	8	n ++
EXPR	974:23	974:23	9	n ++
FIELD	974:23	974:24	10	n ++
LEAF_NODE	974:23	974:23	11	n
LEAF_NODE	974:24	974:24	11	++
LEAF_NODE	974:26	974:26	8	)
STATEMENTS	975:4	983:4	8	
LEAF_NODE	975:4	975:4	9	{
STATEMENTS	976:5	982:5	9	
EXPR_STATEMENT	976:5	976:48	10	err = TIFFReadDirEntryCheckRangeByteSbyte ( * m ) ;
EXPR	976:5	976:5	11	err = TIFFReadDirEntryCheckRangeByteSbyte ( * m )
ASSIGN	976:5	976:9	12	err = TIFFReadDirEntryCheckRangeByteSbyte ( * m )
LVAL	976:5	976:5	13	err
FIELD	976:5	976:5	14	err
LEAF_NODE	976:5	976:5	15	err
ASSIGN_OP	976:8	976:8	13	=
LEAF_NODE	976:8	976:8	14	=
RVAL	976:9	976:9	13	TIFFReadDirEntryCheckRangeByteSbyte ( * m )
FUNCTION_CALL	976:9	976:47	14	TIFFReadDirEntryCheckRangeByteSbyte ( * m )
CALLEE	976:9	976:9	15	TIFFReadDirEntryCheckRangeByteSbyte
LEAF_NODE	976:9	976:9	16	TIFFReadDirEntryCheckRangeByteSbyte
LEAF_NODE	976:44	976:44	15	(
ARGUMENT	976:45	976:45	15	* m
UNARY_EXPR	976:45	976:46	16	* m
UNARY_OPERATOR	976:45	976:45	17	*
LEAF_NODE	976:45	976:45	18	*
FIELD	976:46	976:46	17	m
LEAF_NODE	976:46	976:46	18	m
LEAF_NODE	976:47	976:47	15	)
LEAF_NODE	976:48	976:48	11	;
SELECTION	977:5	978:5	10	
KEYWORD	977:5	977:5	11	if
LEAF_NODE	977:5	977:5	12	if
LEAF_NODE	977:8	977:8	11	(
CONDITION	977:9	977:9	11	err != TIFFReadDirEntryErrOk
EXPR	977:9	977:14	12	err != TIFFReadDirEntryErrOk
FIELD	977:9	977:9	13	err
LEAF_NODE	977:9	977:9	14	err
EQ_OPERATOR	977:12	977:12	13	!=
LEAF_NODE	977:12	977:12	14	!=
FIELD	977:14	977:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	977:14	977:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	977:35	977:35	11	)
STATEMENTS	978:5	981:5	11	
LEAF_NODE	978:5	978:5	12	{
STATEMENTS	979:6	980:17	12	
EXPR_STATEMENT	979:6	979:25	13	_TIFFfree ( origdata ) ;
EXPR	979:6	979:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	979:6	979:24	15	_TIFFfree ( origdata )
CALLEE	979:6	979:6	16	_TIFFfree
LEAF_NODE	979:6	979:6	17	_TIFFfree
LEAF_NODE	979:15	979:15	16	(
ARGUMENT	979:16	979:16	16	origdata
FIELD	979:16	979:16	17	origdata
LEAF_NODE	979:16	979:16	18	origdata
LEAF_NODE	979:24	979:24	16	)
LEAF_NODE	979:25	979:25	14	;
LEAF_NODE	980:6	980:6	13	return
LEAF_NODE	980:12	980:12	13	(
LEAF_NODE	980:13	980:13	13	err
LEAF_NODE	980:16	980:16	13	)
LEAF_NODE	980:17	980:17	13	;
LEAF_NODE	981:5	981:5	12	}
EXPR_STATEMENT	982:5	982:8	10	m ++ ;
EXPR	982:5	982:5	11	m ++
FIELD	982:5	982:6	12	m ++
LEAF_NODE	982:5	982:5	13	m
LEAF_NODE	982:6	982:6	13	++
LEAF_NODE	982:8	982:8	11	;
LEAF_NODE	983:4	983:4	9	}
EXPR_STATEMENT	984:4	984:27	7	* value = ( uint8 * ) origdata ;
EXPR	984:4	984:4	8	* value = ( uint8 * ) origdata
ASSIGN	984:4	984:11	9	* value = ( uint8 * ) origdata
LVAL	984:4	984:4	10	* value
UNARY_EXPR	984:4	984:5	11	* value
UNARY_OPERATOR	984:4	984:4	12	*
LEAF_NODE	984:4	984:4	13	*
FIELD	984:5	984:5	12	value
LEAF_NODE	984:5	984:5	13	value
ASSIGN_OP	984:10	984:10	10	=
LEAF_NODE	984:10	984:10	11	=
RVAL	984:11	984:19	10	( uint8 * ) origdata
LEAF_NODE	984:11	984:11	11	(
TYPE_NAME	984:12	984:12	11	uint8
LEAF_NODE	984:12	984:12	12	uint8
LEAF_NODE	984:17	984:17	11	*
LEAF_NODE	984:18	984:18	11	)
FIELD	984:19	984:19	11	origdata
LEAF_NODE	984:19	984:19	12	origdata
LEAF_NODE	984:27	984:27	8	;
LEAF_NODE	985:4	985:4	7	return
LEAF_NODE	985:10	985:10	7	(
LEAF_NODE	985:11	985:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	985:32	985:32	7	)
LEAF_NODE	985:33	985:33	7	;
LEAF_NODE	986:3	986:3	6	}
LEAF_NODE	987:1	987:1	5	}
EXPR_STATEMENT	988:1	988:32	3	data = ( uint8 * ) _TIFFmalloc ( count ) ;
EXPR	988:1	988:1	4	data = ( uint8 * ) _TIFFmalloc ( count )
ASSIGN	988:1	988:6	5	data = ( uint8 * ) _TIFFmalloc ( count )
LVAL	988:1	988:1	6	data
FIELD	988:1	988:1	7	data
LEAF_NODE	988:1	988:1	8	data
ASSIGN_OP	988:5	988:5	6	=
LEAF_NODE	988:5	988:5	7	=
RVAL	988:6	988:14	6	( uint8 * ) _TIFFmalloc ( count )
LEAF_NODE	988:6	988:6	7	(
TYPE_NAME	988:7	988:7	7	uint8
LEAF_NODE	988:7	988:7	8	uint8
LEAF_NODE	988:12	988:12	7	*
LEAF_NODE	988:13	988:13	7	)
FUNCTION_CALL	988:14	988:31	7	_TIFFmalloc ( count )
CALLEE	988:14	988:14	8	_TIFFmalloc
LEAF_NODE	988:14	988:14	9	_TIFFmalloc
LEAF_NODE	988:25	988:25	8	(
ARGUMENT	988:26	988:26	8	count
FIELD	988:26	988:26	9	count
LEAF_NODE	988:26	988:26	10	count
LEAF_NODE	988:31	988:31	8	)
LEAF_NODE	988:32	988:32	4	;
SELECTION	989:1	990:1	3	
KEYWORD	989:1	989:1	4	if
LEAF_NODE	989:1	989:1	5	if
LEAF_NODE	989:4	989:4	4	(
CONDITION	989:5	989:5	4	data == 0
EXPR	989:5	989:11	5	data == 0
FIELD	989:5	989:5	6	data
LEAF_NODE	989:5	989:5	7	data
EQ_OPERATOR	989:9	989:9	6	==
LEAF_NODE	989:9	989:9	7	==
FIELD	989:11	989:11	6	0
LEAF_NODE	989:11	989:11	7	0
LEAF_NODE	989:12	989:12	4	)
STATEMENTS	990:1	993:1	4	
LEAF_NODE	990:1	990:1	5	{
STATEMENTS	991:2	992:34	5	
EXPR_STATEMENT	991:2	991:21	6	_TIFFfree ( origdata ) ;
EXPR	991:2	991:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	991:2	991:20	8	_TIFFfree ( origdata )
CALLEE	991:2	991:2	9	_TIFFfree
LEAF_NODE	991:2	991:2	10	_TIFFfree
LEAF_NODE	991:11	991:11	9	(
ARGUMENT	991:12	991:12	9	origdata
FIELD	991:12	991:12	10	origdata
LEAF_NODE	991:12	991:12	11	origdata
LEAF_NODE	991:20	991:20	9	)
LEAF_NODE	991:21	991:21	7	;
LEAF_NODE	992:2	992:2	6	return
LEAF_NODE	992:8	992:8	6	(
LEAF_NODE	992:9	992:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	992:33	992:33	6	)
LEAF_NODE	992:34	992:34	6	;
LEAF_NODE	993:1	993:1	5	}
SELECTION	994:1	995:1	3	
KEYWORD	994:1	994:1	4	switch
LEAF_NODE	994:1	994:1	5	switch
LEAF_NODE	994:8	994:8	4	(
CONDITION	994:9	994:9	4	direntry -> tdir_type
EXPR	994:9	994:9	5	direntry -> tdir_type
FIELD	994:9	994:19	6	direntry -> tdir_type
LEAF_NODE	994:9	994:9	7	direntry
LEAF_NODE	994:17	994:17	7	->
LEAF_NODE	994:19	994:19	7	tdir_type
LEAF_NODE	994:28	994:28	4	)
STATEMENTS	995:1	1104:1	4	
LEAF_NODE	995:1	995:1	5	{
STATEMENTS	996:2	1103:3	5	
LABEL	996:2	996:17	6	case TIFF_SHORT :
LEAF_NODE	996:2	996:2	7	case
LEAF_NODE	996:7	996:7	7	TIFF_SHORT
LEAF_NODE	996:17	996:17	7	:
LEAF_NODE	997:3	997:3	6	{
STATEMENTS	998:4	1003:4	6	
SIMPLE_DECL	998:4	998:14	7	uint16 * ma ;
VAR_DECL	998:4	998:12	8	uint16 * ma
TYPE	998:4	998:10	9	uint16 *
TYPE_NAME	998:4	998:4	10	uint16
LEAF_NODE	998:4	998:4	11	uint16
POINTER	998:10	998:10	10	*
LEAF_NODE	998:10	998:10	11	*
NAME	998:12	998:12	9	ma
LEAF_NODE	998:12	998:12	10	ma
LEAF_NODE	998:14	998:14	8	;
SIMPLE_DECL	999:4	999:13	7	uint8 * mb ;
VAR_DECL	999:4	999:11	8	uint8 * mb
TYPE	999:4	999:9	9	uint8 *
TYPE_NAME	999:4	999:4	10	uint8
LEAF_NODE	999:4	999:4	11	uint8
POINTER	999:9	999:9	10	*
LEAF_NODE	999:9	999:9	11	*
NAME	999:11	999:11	9	mb
LEAF_NODE	999:11	999:11	10	mb
LEAF_NODE	999:13	999:13	8	;
SIMPLE_DECL	1000:4	1000:12	7	uint32 n ;
VAR_DECL	1000:4	1000:11	8	uint32 n
TYPE	1000:4	1000:4	9	uint32
TYPE_NAME	1000:4	1000:4	10	uint32
LEAF_NODE	1000:4	1000:4	11	uint32
NAME	1000:11	1000:11	9	n
LEAF_NODE	1000:11	1000:11	10	n
LEAF_NODE	1000:12	1000:12	8	;
EXPR_STATEMENT	1001:4	1001:24	7	ma = ( uint16 * ) origdata ;
EXPR	1001:4	1001:4	8	ma = ( uint16 * ) origdata
ASSIGN	1001:4	1001:7	9	ma = ( uint16 * ) origdata
LVAL	1001:4	1001:4	10	ma
FIELD	1001:4	1001:4	11	ma
LEAF_NODE	1001:4	1001:4	12	ma
ASSIGN_OP	1001:6	1001:6	10	=
LEAF_NODE	1001:6	1001:6	11	=
RVAL	1001:7	1001:16	10	( uint16 * ) origdata
LEAF_NODE	1001:7	1001:7	11	(
TYPE_NAME	1001:8	1001:8	11	uint16
LEAF_NODE	1001:8	1001:8	12	uint16
LEAF_NODE	1001:14	1001:14	11	*
LEAF_NODE	1001:15	1001:15	11	)
FIELD	1001:16	1001:16	11	origdata
LEAF_NODE	1001:16	1001:16	12	origdata
LEAF_NODE	1001:24	1001:24	8	;
EXPR_STATEMENT	1002:4	1002:11	7	mb = data ;
EXPR	1002:4	1002:4	8	mb = data
ASSIGN	1002:4	1002:7	9	mb = data
LVAL	1002:4	1002:4	10	mb
FIELD	1002:4	1002:4	11	mb
LEAF_NODE	1002:4	1002:4	12	mb
ASSIGN_OP	1002:6	1002:6	10	=
LEAF_NODE	1002:6	1002:6	11	=
RVAL	1002:7	1002:7	10	data
FIELD	1002:7	1002:7	11	data
LEAF_NODE	1002:7	1002:7	12	data
LEAF_NODE	1002:11	1002:11	8	;
ITERATION	1003:4	1004:4	7	
KEYWORD	1003:4	1003:4	8	for
LEAF_NODE	1003:4	1003:4	9	for
LEAF_NODE	1003:8	1003:8	8	(
FOR_INIT	1003:9	1003:12	8	n = 0 ;
EXPR	1003:9	1003:9	9	n = 0
ASSIGN	1003:9	1003:11	10	n = 0
LVAL	1003:9	1003:9	11	n
FIELD	1003:9	1003:9	12	n
LEAF_NODE	1003:9	1003:9	13	n
ASSIGN_OP	1003:10	1003:10	11	=
LEAF_NODE	1003:10	1003:10	12	=
RVAL	1003:11	1003:11	11	0
FIELD	1003:11	1003:11	12	0
LEAF_NODE	1003:11	1003:11	13	0
LEAF_NODE	1003:12	1003:12	9	;
CONDITION	1003:14	1003:14	8	n < count
EXPR	1003:14	1003:16	9	n < count
FIELD	1003:14	1003:14	10	n
LEAF_NODE	1003:14	1003:14	11	n
REL_OPERATOR	1003:15	1003:15	10	<
LEAF_NODE	1003:15	1003:15	11	<
FIELD	1003:16	1003:16	10	count
LEAF_NODE	1003:16	1003:16	11	count
LEAF_NODE	1003:21	1003:21	8	;
FOR_EXPR	1003:23	1003:23	8	n ++
EXPR	1003:23	1003:23	9	n ++
FIELD	1003:23	1003:24	10	n ++
LEAF_NODE	1003:23	1003:23	11	n
LEAF_NODE	1003:24	1003:24	11	++
LEAF_NODE	1003:26	1003:26	8	)
STATEMENTS	1004:4	1011:4	8	
LEAF_NODE	1004:4	1004:4	9	{
STATEMENTS	1005:5	1010:5	9	
SELECTION	1005:5	1006:6	10	
KEYWORD	1005:5	1005:5	11	if
LEAF_NODE	1005:5	1005:5	12	if
LEAF_NODE	1005:8	1005:8	11	(
CONDITION	1005:9	1005:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1005:9	1005:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1005:9	1005:14	13	tif -> tif_flags
LEAF_NODE	1005:9	1005:9	14	tif
LEAF_NODE	1005:12	1005:12	14	->
LEAF_NODE	1005:14	1005:14	14	tif_flags
LEAF_NODE	1005:23	1005:23	13	&
FIELD	1005:24	1005:24	13	TIFF_SWAB
LEAF_NODE	1005:24	1005:24	14	TIFF_SWAB
LEAF_NODE	1005:33	1005:33	11	)
STATEMENTS	1006:6	1006:6	11	
EXPR_STATEMENT	1006:6	1006:23	12	TIFFSwabShort ( ma ) ;
EXPR	1006:6	1006:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	1006:6	1006:22	14	TIFFSwabShort ( ma )
CALLEE	1006:6	1006:6	15	TIFFSwabShort
LEAF_NODE	1006:6	1006:6	16	TIFFSwabShort
LEAF_NODE	1006:19	1006:19	15	(
ARGUMENT	1006:20	1006:20	15	ma
FIELD	1006:20	1006:20	16	ma
LEAF_NODE	1006:20	1006:20	17	ma
LEAF_NODE	1006:22	1006:22	15	)
LEAF_NODE	1006:23	1006:23	13	;
EXPR_STATEMENT	1007:5	1007:49	10	err = TIFFReadDirEntryCheckRangeByteShort ( * ma ) ;
EXPR	1007:5	1007:5	11	err = TIFFReadDirEntryCheckRangeByteShort ( * ma )
ASSIGN	1007:5	1007:9	12	err = TIFFReadDirEntryCheckRangeByteShort ( * ma )
LVAL	1007:5	1007:5	13	err
FIELD	1007:5	1007:5	14	err
LEAF_NODE	1007:5	1007:5	15	err
ASSIGN_OP	1007:8	1007:8	13	=
LEAF_NODE	1007:8	1007:8	14	=
RVAL	1007:9	1007:9	13	TIFFReadDirEntryCheckRangeByteShort ( * ma )
FUNCTION_CALL	1007:9	1007:48	14	TIFFReadDirEntryCheckRangeByteShort ( * ma )
CALLEE	1007:9	1007:9	15	TIFFReadDirEntryCheckRangeByteShort
LEAF_NODE	1007:9	1007:9	16	TIFFReadDirEntryCheckRangeByteShort
LEAF_NODE	1007:44	1007:44	15	(
ARGUMENT	1007:45	1007:45	15	* ma
UNARY_EXPR	1007:45	1007:46	16	* ma
UNARY_OPERATOR	1007:45	1007:45	17	*
LEAF_NODE	1007:45	1007:45	18	*
FIELD	1007:46	1007:46	17	ma
LEAF_NODE	1007:46	1007:46	18	ma
LEAF_NODE	1007:48	1007:48	15	)
LEAF_NODE	1007:49	1007:49	11	;
SELECTION	1008:5	1009:6	10	
KEYWORD	1008:5	1008:5	11	if
LEAF_NODE	1008:5	1008:5	12	if
LEAF_NODE	1008:8	1008:8	11	(
CONDITION	1008:9	1008:9	11	err != TIFFReadDirEntryErrOk
EXPR	1008:9	1008:14	12	err != TIFFReadDirEntryErrOk
FIELD	1008:9	1008:9	13	err
LEAF_NODE	1008:9	1008:9	14	err
EQ_OPERATOR	1008:12	1008:12	13	!=
LEAF_NODE	1008:12	1008:12	14	!=
FIELD	1008:14	1008:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1008:14	1008:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1008:35	1008:35	11	)
STATEMENTS	1009:6	1009:6	11	
JUMP_STATEMENT	1009:6	1009:11	12	break DESTINATION ;
KEYWORD	1009:6	1009:6	13	break
LEAF_NODE	1009:6	1009:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1009:11	1009:11	13	;
EXPR_STATEMENT	1010:5	1010:25	10	* mb ++ = ( uint8 ) ( * ma ++ ) ;
EXPR	1010:5	1010:5	11	* mb ++ = ( uint8 ) ( * ma ++ )
ASSIGN	1010:5	1010:11	12	* mb ++ = ( uint8 ) ( * ma ++ )
LVAL	1010:5	1010:5	13	* mb ++
UNARY_EXPR	1010:5	1010:6	14	* mb ++
UNARY_OPERATOR	1010:5	1010:5	15	*
LEAF_NODE	1010:5	1010:5	16	*
FIELD	1010:6	1010:8	15	mb ++
LEAF_NODE	1010:6	1010:6	16	mb
LEAF_NODE	1010:8	1010:8	16	++
ASSIGN_OP	1010:10	1010:10	13	=
LEAF_NODE	1010:10	1010:10	14	=
RVAL	1010:11	1010:24	13	( uint8 ) ( * ma ++ )
LEAF_NODE	1010:11	1010:11	14	(
TYPE_NAME	1010:12	1010:12	14	uint8
LEAF_NODE	1010:12	1010:12	15	uint8
LEAF_NODE	1010:17	1010:17	14	)
LEAF_NODE	1010:18	1010:18	14	(
UNARY_EXPR	1010:19	1010:20	14	* ma ++
UNARY_OPERATOR	1010:19	1010:19	15	*
LEAF_NODE	1010:19	1010:19	16	*
FIELD	1010:20	1010:22	15	ma ++
LEAF_NODE	1010:20	1010:20	16	ma
LEAF_NODE	1010:22	1010:22	16	++
LEAF_NODE	1010:24	1010:24	14	)
LEAF_NODE	1010:25	1010:25	11	;
LEAF_NODE	1011:4	1011:4	9	}
LEAF_NODE	1012:3	1012:3	6	}
JUMP_STATEMENT	1013:3	1013:8	6	break DESTINATION ;
KEYWORD	1013:3	1013:3	7	break
LEAF_NODE	1013:3	1013:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1013:8	1013:8	7	;
LABEL	1014:2	1014:18	6	case TIFF_SSHORT :
LEAF_NODE	1014:2	1014:2	7	case
LEAF_NODE	1014:7	1014:7	7	TIFF_SSHORT
LEAF_NODE	1014:18	1014:18	7	:
LEAF_NODE	1015:3	1015:3	6	{
STATEMENTS	1016:4	1021:4	6	
SIMPLE_DECL	1016:4	1016:13	7	int16 * ma ;
VAR_DECL	1016:4	1016:11	8	int16 * ma
TYPE	1016:4	1016:9	9	int16 *
TYPE_NAME	1016:4	1016:4	10	int16
LEAF_NODE	1016:4	1016:4	11	int16
POINTER	1016:9	1016:9	10	*
LEAF_NODE	1016:9	1016:9	11	*
NAME	1016:11	1016:11	9	ma
LEAF_NODE	1016:11	1016:11	10	ma
LEAF_NODE	1016:13	1016:13	8	;
SIMPLE_DECL	1017:4	1017:13	7	uint8 * mb ;
VAR_DECL	1017:4	1017:11	8	uint8 * mb
TYPE	1017:4	1017:9	9	uint8 *
TYPE_NAME	1017:4	1017:4	10	uint8
LEAF_NODE	1017:4	1017:4	11	uint8
POINTER	1017:9	1017:9	10	*
LEAF_NODE	1017:9	1017:9	11	*
NAME	1017:11	1017:11	9	mb
LEAF_NODE	1017:11	1017:11	10	mb
LEAF_NODE	1017:13	1017:13	8	;
SIMPLE_DECL	1018:4	1018:12	7	uint32 n ;
VAR_DECL	1018:4	1018:11	8	uint32 n
TYPE	1018:4	1018:4	9	uint32
TYPE_NAME	1018:4	1018:4	10	uint32
LEAF_NODE	1018:4	1018:4	11	uint32
NAME	1018:11	1018:11	9	n
LEAF_NODE	1018:11	1018:11	10	n
LEAF_NODE	1018:12	1018:12	8	;
EXPR_STATEMENT	1019:4	1019:23	7	ma = ( int16 * ) origdata ;
EXPR	1019:4	1019:4	8	ma = ( int16 * ) origdata
ASSIGN	1019:4	1019:7	9	ma = ( int16 * ) origdata
LVAL	1019:4	1019:4	10	ma
FIELD	1019:4	1019:4	11	ma
LEAF_NODE	1019:4	1019:4	12	ma
ASSIGN_OP	1019:6	1019:6	10	=
LEAF_NODE	1019:6	1019:6	11	=
RVAL	1019:7	1019:15	10	( int16 * ) origdata
LEAF_NODE	1019:7	1019:7	11	(
TYPE_NAME	1019:8	1019:8	11	int16
LEAF_NODE	1019:8	1019:8	12	int16
LEAF_NODE	1019:13	1019:13	11	*
LEAF_NODE	1019:14	1019:14	11	)
FIELD	1019:15	1019:15	11	origdata
LEAF_NODE	1019:15	1019:15	12	origdata
LEAF_NODE	1019:23	1019:23	8	;
EXPR_STATEMENT	1020:4	1020:11	7	mb = data ;
EXPR	1020:4	1020:4	8	mb = data
ASSIGN	1020:4	1020:7	9	mb = data
LVAL	1020:4	1020:4	10	mb
FIELD	1020:4	1020:4	11	mb
LEAF_NODE	1020:4	1020:4	12	mb
ASSIGN_OP	1020:6	1020:6	10	=
LEAF_NODE	1020:6	1020:6	11	=
RVAL	1020:7	1020:7	10	data
FIELD	1020:7	1020:7	11	data
LEAF_NODE	1020:7	1020:7	12	data
LEAF_NODE	1020:11	1020:11	8	;
ITERATION	1021:4	1022:4	7	
KEYWORD	1021:4	1021:4	8	for
LEAF_NODE	1021:4	1021:4	9	for
LEAF_NODE	1021:8	1021:8	8	(
FOR_INIT	1021:9	1021:12	8	n = 0 ;
EXPR	1021:9	1021:9	9	n = 0
ASSIGN	1021:9	1021:11	10	n = 0
LVAL	1021:9	1021:9	11	n
FIELD	1021:9	1021:9	12	n
LEAF_NODE	1021:9	1021:9	13	n
ASSIGN_OP	1021:10	1021:10	11	=
LEAF_NODE	1021:10	1021:10	12	=
RVAL	1021:11	1021:11	11	0
FIELD	1021:11	1021:11	12	0
LEAF_NODE	1021:11	1021:11	13	0
LEAF_NODE	1021:12	1021:12	9	;
CONDITION	1021:14	1021:14	8	n < count
EXPR	1021:14	1021:16	9	n < count
FIELD	1021:14	1021:14	10	n
LEAF_NODE	1021:14	1021:14	11	n
REL_OPERATOR	1021:15	1021:15	10	<
LEAF_NODE	1021:15	1021:15	11	<
FIELD	1021:16	1021:16	10	count
LEAF_NODE	1021:16	1021:16	11	count
LEAF_NODE	1021:21	1021:21	8	;
FOR_EXPR	1021:23	1021:23	8	n ++
EXPR	1021:23	1021:23	9	n ++
FIELD	1021:23	1021:24	10	n ++
LEAF_NODE	1021:23	1021:23	11	n
LEAF_NODE	1021:24	1021:24	11	++
LEAF_NODE	1021:26	1021:26	8	)
STATEMENTS	1022:4	1029:4	8	
LEAF_NODE	1022:4	1022:4	9	{
STATEMENTS	1023:5	1028:5	9	
SELECTION	1023:5	1024:6	10	
KEYWORD	1023:5	1023:5	11	if
LEAF_NODE	1023:5	1023:5	12	if
LEAF_NODE	1023:8	1023:8	11	(
CONDITION	1023:9	1023:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1023:9	1023:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1023:9	1023:14	13	tif -> tif_flags
LEAF_NODE	1023:9	1023:9	14	tif
LEAF_NODE	1023:12	1023:12	14	->
LEAF_NODE	1023:14	1023:14	14	tif_flags
LEAF_NODE	1023:23	1023:23	13	&
FIELD	1023:24	1023:24	13	TIFF_SWAB
LEAF_NODE	1023:24	1023:24	14	TIFF_SWAB
LEAF_NODE	1023:33	1023:33	11	)
STATEMENTS	1024:6	1024:6	11	
EXPR_STATEMENT	1024:6	1024:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	1024:6	1024:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	1024:6	1024:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	1024:6	1024:6	15	TIFFSwabShort
LEAF_NODE	1024:6	1024:6	16	TIFFSwabShort
LEAF_NODE	1024:19	1024:19	15	(
ARGUMENT	1024:20	1024:29	15	( uint16 * ) ma
LEAF_NODE	1024:20	1024:20	16	(
TYPE_NAME	1024:21	1024:21	16	uint16
LEAF_NODE	1024:21	1024:21	17	uint16
LEAF_NODE	1024:27	1024:27	16	*
LEAF_NODE	1024:28	1024:28	16	)
FIELD	1024:29	1024:29	16	ma
LEAF_NODE	1024:29	1024:29	17	ma
LEAF_NODE	1024:31	1024:31	15	)
LEAF_NODE	1024:32	1024:32	13	;
EXPR_STATEMENT	1025:5	1025:50	10	err = TIFFReadDirEntryCheckRangeByteSshort ( * ma ) ;
EXPR	1025:5	1025:5	11	err = TIFFReadDirEntryCheckRangeByteSshort ( * ma )
ASSIGN	1025:5	1025:9	12	err = TIFFReadDirEntryCheckRangeByteSshort ( * ma )
LVAL	1025:5	1025:5	13	err
FIELD	1025:5	1025:5	14	err
LEAF_NODE	1025:5	1025:5	15	err
ASSIGN_OP	1025:8	1025:8	13	=
LEAF_NODE	1025:8	1025:8	14	=
RVAL	1025:9	1025:9	13	TIFFReadDirEntryCheckRangeByteSshort ( * ma )
FUNCTION_CALL	1025:9	1025:49	14	TIFFReadDirEntryCheckRangeByteSshort ( * ma )
CALLEE	1025:9	1025:9	15	TIFFReadDirEntryCheckRangeByteSshort
LEAF_NODE	1025:9	1025:9	16	TIFFReadDirEntryCheckRangeByteSshort
LEAF_NODE	1025:45	1025:45	15	(
ARGUMENT	1025:46	1025:46	15	* ma
UNARY_EXPR	1025:46	1025:47	16	* ma
UNARY_OPERATOR	1025:46	1025:46	17	*
LEAF_NODE	1025:46	1025:46	18	*
FIELD	1025:47	1025:47	17	ma
LEAF_NODE	1025:47	1025:47	18	ma
LEAF_NODE	1025:49	1025:49	15	)
LEAF_NODE	1025:50	1025:50	11	;
SELECTION	1026:5	1027:6	10	
KEYWORD	1026:5	1026:5	11	if
LEAF_NODE	1026:5	1026:5	12	if
LEAF_NODE	1026:8	1026:8	11	(
CONDITION	1026:9	1026:9	11	err != TIFFReadDirEntryErrOk
EXPR	1026:9	1026:14	12	err != TIFFReadDirEntryErrOk
FIELD	1026:9	1026:9	13	err
LEAF_NODE	1026:9	1026:9	14	err
EQ_OPERATOR	1026:12	1026:12	13	!=
LEAF_NODE	1026:12	1026:12	14	!=
FIELD	1026:14	1026:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1026:14	1026:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1026:35	1026:35	11	)
STATEMENTS	1027:6	1027:6	11	
JUMP_STATEMENT	1027:6	1027:11	12	break DESTINATION ;
KEYWORD	1027:6	1027:6	13	break
LEAF_NODE	1027:6	1027:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1027:11	1027:11	13	;
EXPR_STATEMENT	1028:5	1028:25	10	* mb ++ = ( uint8 ) ( * ma ++ ) ;
EXPR	1028:5	1028:5	11	* mb ++ = ( uint8 ) ( * ma ++ )
ASSIGN	1028:5	1028:11	12	* mb ++ = ( uint8 ) ( * ma ++ )
LVAL	1028:5	1028:5	13	* mb ++
UNARY_EXPR	1028:5	1028:6	14	* mb ++
UNARY_OPERATOR	1028:5	1028:5	15	*
LEAF_NODE	1028:5	1028:5	16	*
FIELD	1028:6	1028:8	15	mb ++
LEAF_NODE	1028:6	1028:6	16	mb
LEAF_NODE	1028:8	1028:8	16	++
ASSIGN_OP	1028:10	1028:10	13	=
LEAF_NODE	1028:10	1028:10	14	=
RVAL	1028:11	1028:24	13	( uint8 ) ( * ma ++ )
LEAF_NODE	1028:11	1028:11	14	(
TYPE_NAME	1028:12	1028:12	14	uint8
LEAF_NODE	1028:12	1028:12	15	uint8
LEAF_NODE	1028:17	1028:17	14	)
LEAF_NODE	1028:18	1028:18	14	(
UNARY_EXPR	1028:19	1028:20	14	* ma ++
UNARY_OPERATOR	1028:19	1028:19	15	*
LEAF_NODE	1028:19	1028:19	16	*
FIELD	1028:20	1028:22	15	ma ++
LEAF_NODE	1028:20	1028:20	16	ma
LEAF_NODE	1028:22	1028:22	16	++
LEAF_NODE	1028:24	1028:24	14	)
LEAF_NODE	1028:25	1028:25	11	;
LEAF_NODE	1029:4	1029:4	9	}
LEAF_NODE	1030:3	1030:3	6	}
JUMP_STATEMENT	1031:3	1031:8	6	break DESTINATION ;
KEYWORD	1031:3	1031:3	7	break
LEAF_NODE	1031:3	1031:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1031:8	1031:8	7	;
LABEL	1032:2	1032:16	6	case TIFF_LONG :
LEAF_NODE	1032:2	1032:2	7	case
LEAF_NODE	1032:7	1032:7	7	TIFF_LONG
LEAF_NODE	1032:16	1032:16	7	:
LEAF_NODE	1033:3	1033:3	6	{
STATEMENTS	1034:4	1039:4	6	
SIMPLE_DECL	1034:4	1034:14	7	uint32 * ma ;
VAR_DECL	1034:4	1034:12	8	uint32 * ma
TYPE	1034:4	1034:10	9	uint32 *
TYPE_NAME	1034:4	1034:4	10	uint32
LEAF_NODE	1034:4	1034:4	11	uint32
POINTER	1034:10	1034:10	10	*
LEAF_NODE	1034:10	1034:10	11	*
NAME	1034:12	1034:12	9	ma
LEAF_NODE	1034:12	1034:12	10	ma
LEAF_NODE	1034:14	1034:14	8	;
SIMPLE_DECL	1035:4	1035:13	7	uint8 * mb ;
VAR_DECL	1035:4	1035:11	8	uint8 * mb
TYPE	1035:4	1035:9	9	uint8 *
TYPE_NAME	1035:4	1035:4	10	uint8
LEAF_NODE	1035:4	1035:4	11	uint8
POINTER	1035:9	1035:9	10	*
LEAF_NODE	1035:9	1035:9	11	*
NAME	1035:11	1035:11	9	mb
LEAF_NODE	1035:11	1035:11	10	mb
LEAF_NODE	1035:13	1035:13	8	;
SIMPLE_DECL	1036:4	1036:12	7	uint32 n ;
VAR_DECL	1036:4	1036:11	8	uint32 n
TYPE	1036:4	1036:4	9	uint32
TYPE_NAME	1036:4	1036:4	10	uint32
LEAF_NODE	1036:4	1036:4	11	uint32
NAME	1036:11	1036:11	9	n
LEAF_NODE	1036:11	1036:11	10	n
LEAF_NODE	1036:12	1036:12	8	;
EXPR_STATEMENT	1037:4	1037:24	7	ma = ( uint32 * ) origdata ;
EXPR	1037:4	1037:4	8	ma = ( uint32 * ) origdata
ASSIGN	1037:4	1037:7	9	ma = ( uint32 * ) origdata
LVAL	1037:4	1037:4	10	ma
FIELD	1037:4	1037:4	11	ma
LEAF_NODE	1037:4	1037:4	12	ma
ASSIGN_OP	1037:6	1037:6	10	=
LEAF_NODE	1037:6	1037:6	11	=
RVAL	1037:7	1037:16	10	( uint32 * ) origdata
LEAF_NODE	1037:7	1037:7	11	(
TYPE_NAME	1037:8	1037:8	11	uint32
LEAF_NODE	1037:8	1037:8	12	uint32
LEAF_NODE	1037:14	1037:14	11	*
LEAF_NODE	1037:15	1037:15	11	)
FIELD	1037:16	1037:16	11	origdata
LEAF_NODE	1037:16	1037:16	12	origdata
LEAF_NODE	1037:24	1037:24	8	;
EXPR_STATEMENT	1038:4	1038:11	7	mb = data ;
EXPR	1038:4	1038:4	8	mb = data
ASSIGN	1038:4	1038:7	9	mb = data
LVAL	1038:4	1038:4	10	mb
FIELD	1038:4	1038:4	11	mb
LEAF_NODE	1038:4	1038:4	12	mb
ASSIGN_OP	1038:6	1038:6	10	=
LEAF_NODE	1038:6	1038:6	11	=
RVAL	1038:7	1038:7	10	data
FIELD	1038:7	1038:7	11	data
LEAF_NODE	1038:7	1038:7	12	data
LEAF_NODE	1038:11	1038:11	8	;
ITERATION	1039:4	1040:4	7	
KEYWORD	1039:4	1039:4	8	for
LEAF_NODE	1039:4	1039:4	9	for
LEAF_NODE	1039:8	1039:8	8	(
FOR_INIT	1039:9	1039:12	8	n = 0 ;
EXPR	1039:9	1039:9	9	n = 0
ASSIGN	1039:9	1039:11	10	n = 0
LVAL	1039:9	1039:9	11	n
FIELD	1039:9	1039:9	12	n
LEAF_NODE	1039:9	1039:9	13	n
ASSIGN_OP	1039:10	1039:10	11	=
LEAF_NODE	1039:10	1039:10	12	=
RVAL	1039:11	1039:11	11	0
FIELD	1039:11	1039:11	12	0
LEAF_NODE	1039:11	1039:11	13	0
LEAF_NODE	1039:12	1039:12	9	;
CONDITION	1039:14	1039:14	8	n < count
EXPR	1039:14	1039:16	9	n < count
FIELD	1039:14	1039:14	10	n
LEAF_NODE	1039:14	1039:14	11	n
REL_OPERATOR	1039:15	1039:15	10	<
LEAF_NODE	1039:15	1039:15	11	<
FIELD	1039:16	1039:16	10	count
LEAF_NODE	1039:16	1039:16	11	count
LEAF_NODE	1039:21	1039:21	8	;
FOR_EXPR	1039:23	1039:23	8	n ++
EXPR	1039:23	1039:23	9	n ++
FIELD	1039:23	1039:24	10	n ++
LEAF_NODE	1039:23	1039:23	11	n
LEAF_NODE	1039:24	1039:24	11	++
LEAF_NODE	1039:26	1039:26	8	)
STATEMENTS	1040:4	1047:4	8	
LEAF_NODE	1040:4	1040:4	9	{
STATEMENTS	1041:5	1046:5	9	
SELECTION	1041:5	1042:6	10	
KEYWORD	1041:5	1041:5	11	if
LEAF_NODE	1041:5	1041:5	12	if
LEAF_NODE	1041:8	1041:8	11	(
CONDITION	1041:9	1041:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1041:9	1041:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1041:9	1041:14	13	tif -> tif_flags
LEAF_NODE	1041:9	1041:9	14	tif
LEAF_NODE	1041:12	1041:12	14	->
LEAF_NODE	1041:14	1041:14	14	tif_flags
LEAF_NODE	1041:23	1041:23	13	&
FIELD	1041:24	1041:24	13	TIFF_SWAB
LEAF_NODE	1041:24	1041:24	14	TIFF_SWAB
LEAF_NODE	1041:33	1041:33	11	)
STATEMENTS	1042:6	1042:6	11	
EXPR_STATEMENT	1042:6	1042:22	12	TIFFSwabLong ( ma ) ;
EXPR	1042:6	1042:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	1042:6	1042:21	14	TIFFSwabLong ( ma )
CALLEE	1042:6	1042:6	15	TIFFSwabLong
LEAF_NODE	1042:6	1042:6	16	TIFFSwabLong
LEAF_NODE	1042:18	1042:18	15	(
ARGUMENT	1042:19	1042:19	15	ma
FIELD	1042:19	1042:19	16	ma
LEAF_NODE	1042:19	1042:19	17	ma
LEAF_NODE	1042:21	1042:21	15	)
LEAF_NODE	1042:22	1042:22	13	;
EXPR_STATEMENT	1043:5	1043:48	10	err = TIFFReadDirEntryCheckRangeByteLong ( * ma ) ;
EXPR	1043:5	1043:5	11	err = TIFFReadDirEntryCheckRangeByteLong ( * ma )
ASSIGN	1043:5	1043:9	12	err = TIFFReadDirEntryCheckRangeByteLong ( * ma )
LVAL	1043:5	1043:5	13	err
FIELD	1043:5	1043:5	14	err
LEAF_NODE	1043:5	1043:5	15	err
ASSIGN_OP	1043:8	1043:8	13	=
LEAF_NODE	1043:8	1043:8	14	=
RVAL	1043:9	1043:9	13	TIFFReadDirEntryCheckRangeByteLong ( * ma )
FUNCTION_CALL	1043:9	1043:47	14	TIFFReadDirEntryCheckRangeByteLong ( * ma )
CALLEE	1043:9	1043:9	15	TIFFReadDirEntryCheckRangeByteLong
LEAF_NODE	1043:9	1043:9	16	TIFFReadDirEntryCheckRangeByteLong
LEAF_NODE	1043:43	1043:43	15	(
ARGUMENT	1043:44	1043:44	15	* ma
UNARY_EXPR	1043:44	1043:45	16	* ma
UNARY_OPERATOR	1043:44	1043:44	17	*
LEAF_NODE	1043:44	1043:44	18	*
FIELD	1043:45	1043:45	17	ma
LEAF_NODE	1043:45	1043:45	18	ma
LEAF_NODE	1043:47	1043:47	15	)
LEAF_NODE	1043:48	1043:48	11	;
SELECTION	1044:5	1045:6	10	
KEYWORD	1044:5	1044:5	11	if
LEAF_NODE	1044:5	1044:5	12	if
LEAF_NODE	1044:8	1044:8	11	(
CONDITION	1044:9	1044:9	11	err != TIFFReadDirEntryErrOk
EXPR	1044:9	1044:14	12	err != TIFFReadDirEntryErrOk
FIELD	1044:9	1044:9	13	err
LEAF_NODE	1044:9	1044:9	14	err
EQ_OPERATOR	1044:12	1044:12	13	!=
LEAF_NODE	1044:12	1044:12	14	!=
FIELD	1044:14	1044:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1044:14	1044:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1044:35	1044:35	11	)
STATEMENTS	1045:6	1045:6	11	
JUMP_STATEMENT	1045:6	1045:11	12	break DESTINATION ;
KEYWORD	1045:6	1045:6	13	break
LEAF_NODE	1045:6	1045:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1045:11	1045:11	13	;
EXPR_STATEMENT	1046:5	1046:25	10	* mb ++ = ( uint8 ) ( * ma ++ ) ;
EXPR	1046:5	1046:5	11	* mb ++ = ( uint8 ) ( * ma ++ )
ASSIGN	1046:5	1046:11	12	* mb ++ = ( uint8 ) ( * ma ++ )
LVAL	1046:5	1046:5	13	* mb ++
UNARY_EXPR	1046:5	1046:6	14	* mb ++
UNARY_OPERATOR	1046:5	1046:5	15	*
LEAF_NODE	1046:5	1046:5	16	*
FIELD	1046:6	1046:8	15	mb ++
LEAF_NODE	1046:6	1046:6	16	mb
LEAF_NODE	1046:8	1046:8	16	++
ASSIGN_OP	1046:10	1046:10	13	=
LEAF_NODE	1046:10	1046:10	14	=
RVAL	1046:11	1046:24	13	( uint8 ) ( * ma ++ )
LEAF_NODE	1046:11	1046:11	14	(
TYPE_NAME	1046:12	1046:12	14	uint8
LEAF_NODE	1046:12	1046:12	15	uint8
LEAF_NODE	1046:17	1046:17	14	)
LEAF_NODE	1046:18	1046:18	14	(
UNARY_EXPR	1046:19	1046:20	14	* ma ++
UNARY_OPERATOR	1046:19	1046:19	15	*
LEAF_NODE	1046:19	1046:19	16	*
FIELD	1046:20	1046:22	15	ma ++
LEAF_NODE	1046:20	1046:20	16	ma
LEAF_NODE	1046:22	1046:22	16	++
LEAF_NODE	1046:24	1046:24	14	)
LEAF_NODE	1046:25	1046:25	11	;
LEAF_NODE	1047:4	1047:4	9	}
LEAF_NODE	1048:3	1048:3	6	}
JUMP_STATEMENT	1049:3	1049:8	6	break DESTINATION ;
KEYWORD	1049:3	1049:3	7	break
LEAF_NODE	1049:3	1049:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1049:8	1049:8	7	;
LABEL	1050:2	1050:17	6	case TIFF_SLONG :
LEAF_NODE	1050:2	1050:2	7	case
LEAF_NODE	1050:7	1050:7	7	TIFF_SLONG
LEAF_NODE	1050:17	1050:17	7	:
LEAF_NODE	1051:3	1051:3	6	{
STATEMENTS	1052:4	1057:4	6	
SIMPLE_DECL	1052:4	1052:13	7	int32 * ma ;
VAR_DECL	1052:4	1052:11	8	int32 * ma
TYPE	1052:4	1052:9	9	int32 *
TYPE_NAME	1052:4	1052:4	10	int32
LEAF_NODE	1052:4	1052:4	11	int32
POINTER	1052:9	1052:9	10	*
LEAF_NODE	1052:9	1052:9	11	*
NAME	1052:11	1052:11	9	ma
LEAF_NODE	1052:11	1052:11	10	ma
LEAF_NODE	1052:13	1052:13	8	;
SIMPLE_DECL	1053:4	1053:13	7	uint8 * mb ;
VAR_DECL	1053:4	1053:11	8	uint8 * mb
TYPE	1053:4	1053:9	9	uint8 *
TYPE_NAME	1053:4	1053:4	10	uint8
LEAF_NODE	1053:4	1053:4	11	uint8
POINTER	1053:9	1053:9	10	*
LEAF_NODE	1053:9	1053:9	11	*
NAME	1053:11	1053:11	9	mb
LEAF_NODE	1053:11	1053:11	10	mb
LEAF_NODE	1053:13	1053:13	8	;
SIMPLE_DECL	1054:4	1054:12	7	uint32 n ;
VAR_DECL	1054:4	1054:11	8	uint32 n
TYPE	1054:4	1054:4	9	uint32
TYPE_NAME	1054:4	1054:4	10	uint32
LEAF_NODE	1054:4	1054:4	11	uint32
NAME	1054:11	1054:11	9	n
LEAF_NODE	1054:11	1054:11	10	n
LEAF_NODE	1054:12	1054:12	8	;
EXPR_STATEMENT	1055:4	1055:23	7	ma = ( int32 * ) origdata ;
EXPR	1055:4	1055:4	8	ma = ( int32 * ) origdata
ASSIGN	1055:4	1055:7	9	ma = ( int32 * ) origdata
LVAL	1055:4	1055:4	10	ma
FIELD	1055:4	1055:4	11	ma
LEAF_NODE	1055:4	1055:4	12	ma
ASSIGN_OP	1055:6	1055:6	10	=
LEAF_NODE	1055:6	1055:6	11	=
RVAL	1055:7	1055:15	10	( int32 * ) origdata
LEAF_NODE	1055:7	1055:7	11	(
TYPE_NAME	1055:8	1055:8	11	int32
LEAF_NODE	1055:8	1055:8	12	int32
LEAF_NODE	1055:13	1055:13	11	*
LEAF_NODE	1055:14	1055:14	11	)
FIELD	1055:15	1055:15	11	origdata
LEAF_NODE	1055:15	1055:15	12	origdata
LEAF_NODE	1055:23	1055:23	8	;
EXPR_STATEMENT	1056:4	1056:11	7	mb = data ;
EXPR	1056:4	1056:4	8	mb = data
ASSIGN	1056:4	1056:7	9	mb = data
LVAL	1056:4	1056:4	10	mb
FIELD	1056:4	1056:4	11	mb
LEAF_NODE	1056:4	1056:4	12	mb
ASSIGN_OP	1056:6	1056:6	10	=
LEAF_NODE	1056:6	1056:6	11	=
RVAL	1056:7	1056:7	10	data
FIELD	1056:7	1056:7	11	data
LEAF_NODE	1056:7	1056:7	12	data
LEAF_NODE	1056:11	1056:11	8	;
ITERATION	1057:4	1058:4	7	
KEYWORD	1057:4	1057:4	8	for
LEAF_NODE	1057:4	1057:4	9	for
LEAF_NODE	1057:8	1057:8	8	(
FOR_INIT	1057:9	1057:12	8	n = 0 ;
EXPR	1057:9	1057:9	9	n = 0
ASSIGN	1057:9	1057:11	10	n = 0
LVAL	1057:9	1057:9	11	n
FIELD	1057:9	1057:9	12	n
LEAF_NODE	1057:9	1057:9	13	n
ASSIGN_OP	1057:10	1057:10	11	=
LEAF_NODE	1057:10	1057:10	12	=
RVAL	1057:11	1057:11	11	0
FIELD	1057:11	1057:11	12	0
LEAF_NODE	1057:11	1057:11	13	0
LEAF_NODE	1057:12	1057:12	9	;
CONDITION	1057:14	1057:14	8	n < count
EXPR	1057:14	1057:16	9	n < count
FIELD	1057:14	1057:14	10	n
LEAF_NODE	1057:14	1057:14	11	n
REL_OPERATOR	1057:15	1057:15	10	<
LEAF_NODE	1057:15	1057:15	11	<
FIELD	1057:16	1057:16	10	count
LEAF_NODE	1057:16	1057:16	11	count
LEAF_NODE	1057:21	1057:21	8	;
FOR_EXPR	1057:23	1057:23	8	n ++
EXPR	1057:23	1057:23	9	n ++
FIELD	1057:23	1057:24	10	n ++
LEAF_NODE	1057:23	1057:23	11	n
LEAF_NODE	1057:24	1057:24	11	++
LEAF_NODE	1057:26	1057:26	8	)
STATEMENTS	1058:4	1065:4	8	
LEAF_NODE	1058:4	1058:4	9	{
STATEMENTS	1059:5	1064:5	9	
SELECTION	1059:5	1060:6	10	
KEYWORD	1059:5	1059:5	11	if
LEAF_NODE	1059:5	1059:5	12	if
LEAF_NODE	1059:8	1059:8	11	(
CONDITION	1059:9	1059:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1059:9	1059:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1059:9	1059:14	13	tif -> tif_flags
LEAF_NODE	1059:9	1059:9	14	tif
LEAF_NODE	1059:12	1059:12	14	->
LEAF_NODE	1059:14	1059:14	14	tif_flags
LEAF_NODE	1059:23	1059:23	13	&
FIELD	1059:24	1059:24	13	TIFF_SWAB
LEAF_NODE	1059:24	1059:24	14	TIFF_SWAB
LEAF_NODE	1059:33	1059:33	11	)
STATEMENTS	1060:6	1060:6	11	
EXPR_STATEMENT	1060:6	1060:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	1060:6	1060:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	1060:6	1060:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	1060:6	1060:6	15	TIFFSwabLong
LEAF_NODE	1060:6	1060:6	16	TIFFSwabLong
LEAF_NODE	1060:18	1060:18	15	(
ARGUMENT	1060:19	1060:28	15	( uint32 * ) ma
LEAF_NODE	1060:19	1060:19	16	(
TYPE_NAME	1060:20	1060:20	16	uint32
LEAF_NODE	1060:20	1060:20	17	uint32
LEAF_NODE	1060:26	1060:26	16	*
LEAF_NODE	1060:27	1060:27	16	)
FIELD	1060:28	1060:28	16	ma
LEAF_NODE	1060:28	1060:28	17	ma
LEAF_NODE	1060:30	1060:30	15	)
LEAF_NODE	1060:31	1060:31	13	;
EXPR_STATEMENT	1061:5	1061:49	10	err = TIFFReadDirEntryCheckRangeByteSlong ( * ma ) ;
EXPR	1061:5	1061:5	11	err = TIFFReadDirEntryCheckRangeByteSlong ( * ma )
ASSIGN	1061:5	1061:9	12	err = TIFFReadDirEntryCheckRangeByteSlong ( * ma )
LVAL	1061:5	1061:5	13	err
FIELD	1061:5	1061:5	14	err
LEAF_NODE	1061:5	1061:5	15	err
ASSIGN_OP	1061:8	1061:8	13	=
LEAF_NODE	1061:8	1061:8	14	=
RVAL	1061:9	1061:9	13	TIFFReadDirEntryCheckRangeByteSlong ( * ma )
FUNCTION_CALL	1061:9	1061:48	14	TIFFReadDirEntryCheckRangeByteSlong ( * ma )
CALLEE	1061:9	1061:9	15	TIFFReadDirEntryCheckRangeByteSlong
LEAF_NODE	1061:9	1061:9	16	TIFFReadDirEntryCheckRangeByteSlong
LEAF_NODE	1061:44	1061:44	15	(
ARGUMENT	1061:45	1061:45	15	* ma
UNARY_EXPR	1061:45	1061:46	16	* ma
UNARY_OPERATOR	1061:45	1061:45	17	*
LEAF_NODE	1061:45	1061:45	18	*
FIELD	1061:46	1061:46	17	ma
LEAF_NODE	1061:46	1061:46	18	ma
LEAF_NODE	1061:48	1061:48	15	)
LEAF_NODE	1061:49	1061:49	11	;
SELECTION	1062:5	1063:6	10	
KEYWORD	1062:5	1062:5	11	if
LEAF_NODE	1062:5	1062:5	12	if
LEAF_NODE	1062:8	1062:8	11	(
CONDITION	1062:9	1062:9	11	err != TIFFReadDirEntryErrOk
EXPR	1062:9	1062:14	12	err != TIFFReadDirEntryErrOk
FIELD	1062:9	1062:9	13	err
LEAF_NODE	1062:9	1062:9	14	err
EQ_OPERATOR	1062:12	1062:12	13	!=
LEAF_NODE	1062:12	1062:12	14	!=
FIELD	1062:14	1062:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1062:14	1062:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1062:35	1062:35	11	)
STATEMENTS	1063:6	1063:6	11	
JUMP_STATEMENT	1063:6	1063:11	12	break DESTINATION ;
KEYWORD	1063:6	1063:6	13	break
LEAF_NODE	1063:6	1063:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1063:11	1063:11	13	;
EXPR_STATEMENT	1064:5	1064:25	10	* mb ++ = ( uint8 ) ( * ma ++ ) ;
EXPR	1064:5	1064:5	11	* mb ++ = ( uint8 ) ( * ma ++ )
ASSIGN	1064:5	1064:11	12	* mb ++ = ( uint8 ) ( * ma ++ )
LVAL	1064:5	1064:5	13	* mb ++
UNARY_EXPR	1064:5	1064:6	14	* mb ++
UNARY_OPERATOR	1064:5	1064:5	15	*
LEAF_NODE	1064:5	1064:5	16	*
FIELD	1064:6	1064:8	15	mb ++
LEAF_NODE	1064:6	1064:6	16	mb
LEAF_NODE	1064:8	1064:8	16	++
ASSIGN_OP	1064:10	1064:10	13	=
LEAF_NODE	1064:10	1064:10	14	=
RVAL	1064:11	1064:24	13	( uint8 ) ( * ma ++ )
LEAF_NODE	1064:11	1064:11	14	(
TYPE_NAME	1064:12	1064:12	14	uint8
LEAF_NODE	1064:12	1064:12	15	uint8
LEAF_NODE	1064:17	1064:17	14	)
LEAF_NODE	1064:18	1064:18	14	(
UNARY_EXPR	1064:19	1064:20	14	* ma ++
UNARY_OPERATOR	1064:19	1064:19	15	*
LEAF_NODE	1064:19	1064:19	16	*
FIELD	1064:20	1064:22	15	ma ++
LEAF_NODE	1064:20	1064:20	16	ma
LEAF_NODE	1064:22	1064:22	16	++
LEAF_NODE	1064:24	1064:24	14	)
LEAF_NODE	1064:25	1064:25	11	;
LEAF_NODE	1065:4	1065:4	9	}
LEAF_NODE	1066:3	1066:3	6	}
JUMP_STATEMENT	1067:3	1067:8	6	break DESTINATION ;
KEYWORD	1067:3	1067:3	7	break
LEAF_NODE	1067:3	1067:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1067:8	1067:8	7	;
LABEL	1068:2	1068:17	6	case TIFF_LONG8 :
LEAF_NODE	1068:2	1068:2	7	case
LEAF_NODE	1068:7	1068:7	7	TIFF_LONG8
LEAF_NODE	1068:17	1068:17	7	:
LEAF_NODE	1069:3	1069:3	6	{
STATEMENTS	1070:4	1075:4	6	
SIMPLE_DECL	1070:4	1070:14	7	uint64 * ma ;
VAR_DECL	1070:4	1070:12	8	uint64 * ma
TYPE	1070:4	1070:10	9	uint64 *
TYPE_NAME	1070:4	1070:4	10	uint64
LEAF_NODE	1070:4	1070:4	11	uint64
POINTER	1070:10	1070:10	10	*
LEAF_NODE	1070:10	1070:10	11	*
NAME	1070:12	1070:12	9	ma
LEAF_NODE	1070:12	1070:12	10	ma
LEAF_NODE	1070:14	1070:14	8	;
SIMPLE_DECL	1071:4	1071:13	7	uint8 * mb ;
VAR_DECL	1071:4	1071:11	8	uint8 * mb
TYPE	1071:4	1071:9	9	uint8 *
TYPE_NAME	1071:4	1071:4	10	uint8
LEAF_NODE	1071:4	1071:4	11	uint8
POINTER	1071:9	1071:9	10	*
LEAF_NODE	1071:9	1071:9	11	*
NAME	1071:11	1071:11	9	mb
LEAF_NODE	1071:11	1071:11	10	mb
LEAF_NODE	1071:13	1071:13	8	;
SIMPLE_DECL	1072:4	1072:12	7	uint32 n ;
VAR_DECL	1072:4	1072:11	8	uint32 n
TYPE	1072:4	1072:4	9	uint32
TYPE_NAME	1072:4	1072:4	10	uint32
LEAF_NODE	1072:4	1072:4	11	uint32
NAME	1072:11	1072:11	9	n
LEAF_NODE	1072:11	1072:11	10	n
LEAF_NODE	1072:12	1072:12	8	;
EXPR_STATEMENT	1073:4	1073:24	7	ma = ( uint64 * ) origdata ;
EXPR	1073:4	1073:4	8	ma = ( uint64 * ) origdata
ASSIGN	1073:4	1073:7	9	ma = ( uint64 * ) origdata
LVAL	1073:4	1073:4	10	ma
FIELD	1073:4	1073:4	11	ma
LEAF_NODE	1073:4	1073:4	12	ma
ASSIGN_OP	1073:6	1073:6	10	=
LEAF_NODE	1073:6	1073:6	11	=
RVAL	1073:7	1073:16	10	( uint64 * ) origdata
LEAF_NODE	1073:7	1073:7	11	(
TYPE_NAME	1073:8	1073:8	11	uint64
LEAF_NODE	1073:8	1073:8	12	uint64
LEAF_NODE	1073:14	1073:14	11	*
LEAF_NODE	1073:15	1073:15	11	)
FIELD	1073:16	1073:16	11	origdata
LEAF_NODE	1073:16	1073:16	12	origdata
LEAF_NODE	1073:24	1073:24	8	;
EXPR_STATEMENT	1074:4	1074:11	7	mb = data ;
EXPR	1074:4	1074:4	8	mb = data
ASSIGN	1074:4	1074:7	9	mb = data
LVAL	1074:4	1074:4	10	mb
FIELD	1074:4	1074:4	11	mb
LEAF_NODE	1074:4	1074:4	12	mb
ASSIGN_OP	1074:6	1074:6	10	=
LEAF_NODE	1074:6	1074:6	11	=
RVAL	1074:7	1074:7	10	data
FIELD	1074:7	1074:7	11	data
LEAF_NODE	1074:7	1074:7	12	data
LEAF_NODE	1074:11	1074:11	8	;
ITERATION	1075:4	1076:4	7	
KEYWORD	1075:4	1075:4	8	for
LEAF_NODE	1075:4	1075:4	9	for
LEAF_NODE	1075:8	1075:8	8	(
FOR_INIT	1075:9	1075:12	8	n = 0 ;
EXPR	1075:9	1075:9	9	n = 0
ASSIGN	1075:9	1075:11	10	n = 0
LVAL	1075:9	1075:9	11	n
FIELD	1075:9	1075:9	12	n
LEAF_NODE	1075:9	1075:9	13	n
ASSIGN_OP	1075:10	1075:10	11	=
LEAF_NODE	1075:10	1075:10	12	=
RVAL	1075:11	1075:11	11	0
FIELD	1075:11	1075:11	12	0
LEAF_NODE	1075:11	1075:11	13	0
LEAF_NODE	1075:12	1075:12	9	;
CONDITION	1075:14	1075:14	8	n < count
EXPR	1075:14	1075:16	9	n < count
FIELD	1075:14	1075:14	10	n
LEAF_NODE	1075:14	1075:14	11	n
REL_OPERATOR	1075:15	1075:15	10	<
LEAF_NODE	1075:15	1075:15	11	<
FIELD	1075:16	1075:16	10	count
LEAF_NODE	1075:16	1075:16	11	count
LEAF_NODE	1075:21	1075:21	8	;
FOR_EXPR	1075:23	1075:23	8	n ++
EXPR	1075:23	1075:23	9	n ++
FIELD	1075:23	1075:24	10	n ++
LEAF_NODE	1075:23	1075:23	11	n
LEAF_NODE	1075:24	1075:24	11	++
LEAF_NODE	1075:26	1075:26	8	)
STATEMENTS	1076:4	1083:4	8	
LEAF_NODE	1076:4	1076:4	9	{
STATEMENTS	1077:5	1082:5	9	
SELECTION	1077:5	1078:6	10	
KEYWORD	1077:5	1077:5	11	if
LEAF_NODE	1077:5	1077:5	12	if
LEAF_NODE	1077:8	1077:8	11	(
CONDITION	1077:9	1077:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1077:9	1077:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1077:9	1077:14	13	tif -> tif_flags
LEAF_NODE	1077:9	1077:9	14	tif
LEAF_NODE	1077:12	1077:12	14	->
LEAF_NODE	1077:14	1077:14	14	tif_flags
LEAF_NODE	1077:23	1077:23	13	&
FIELD	1077:24	1077:24	13	TIFF_SWAB
LEAF_NODE	1077:24	1077:24	14	TIFF_SWAB
LEAF_NODE	1077:33	1077:33	11	)
STATEMENTS	1078:6	1078:6	11	
EXPR_STATEMENT	1078:6	1078:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	1078:6	1078:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	1078:6	1078:22	14	TIFFSwabLong8 ( ma )
CALLEE	1078:6	1078:6	15	TIFFSwabLong8
LEAF_NODE	1078:6	1078:6	16	TIFFSwabLong8
LEAF_NODE	1078:19	1078:19	15	(
ARGUMENT	1078:20	1078:20	15	ma
FIELD	1078:20	1078:20	16	ma
LEAF_NODE	1078:20	1078:20	17	ma
LEAF_NODE	1078:22	1078:22	15	)
LEAF_NODE	1078:23	1078:23	13	;
EXPR_STATEMENT	1079:5	1079:49	10	err = TIFFReadDirEntryCheckRangeByteLong8 ( * ma ) ;
EXPR	1079:5	1079:5	11	err = TIFFReadDirEntryCheckRangeByteLong8 ( * ma )
ASSIGN	1079:5	1079:9	12	err = TIFFReadDirEntryCheckRangeByteLong8 ( * ma )
LVAL	1079:5	1079:5	13	err
FIELD	1079:5	1079:5	14	err
LEAF_NODE	1079:5	1079:5	15	err
ASSIGN_OP	1079:8	1079:8	13	=
LEAF_NODE	1079:8	1079:8	14	=
RVAL	1079:9	1079:9	13	TIFFReadDirEntryCheckRangeByteLong8 ( * ma )
FUNCTION_CALL	1079:9	1079:48	14	TIFFReadDirEntryCheckRangeByteLong8 ( * ma )
CALLEE	1079:9	1079:9	15	TIFFReadDirEntryCheckRangeByteLong8
LEAF_NODE	1079:9	1079:9	16	TIFFReadDirEntryCheckRangeByteLong8
LEAF_NODE	1079:44	1079:44	15	(
ARGUMENT	1079:45	1079:45	15	* ma
UNARY_EXPR	1079:45	1079:46	16	* ma
UNARY_OPERATOR	1079:45	1079:45	17	*
LEAF_NODE	1079:45	1079:45	18	*
FIELD	1079:46	1079:46	17	ma
LEAF_NODE	1079:46	1079:46	18	ma
LEAF_NODE	1079:48	1079:48	15	)
LEAF_NODE	1079:49	1079:49	11	;
SELECTION	1080:5	1081:6	10	
KEYWORD	1080:5	1080:5	11	if
LEAF_NODE	1080:5	1080:5	12	if
LEAF_NODE	1080:8	1080:8	11	(
CONDITION	1080:9	1080:9	11	err != TIFFReadDirEntryErrOk
EXPR	1080:9	1080:14	12	err != TIFFReadDirEntryErrOk
FIELD	1080:9	1080:9	13	err
LEAF_NODE	1080:9	1080:9	14	err
EQ_OPERATOR	1080:12	1080:12	13	!=
LEAF_NODE	1080:12	1080:12	14	!=
FIELD	1080:14	1080:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1080:14	1080:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1080:35	1080:35	11	)
STATEMENTS	1081:6	1081:6	11	
JUMP_STATEMENT	1081:6	1081:11	12	break DESTINATION ;
KEYWORD	1081:6	1081:6	13	break
LEAF_NODE	1081:6	1081:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1081:11	1081:11	13	;
EXPR_STATEMENT	1082:5	1082:25	10	* mb ++ = ( uint8 ) ( * ma ++ ) ;
EXPR	1082:5	1082:5	11	* mb ++ = ( uint8 ) ( * ma ++ )
ASSIGN	1082:5	1082:11	12	* mb ++ = ( uint8 ) ( * ma ++ )
LVAL	1082:5	1082:5	13	* mb ++
UNARY_EXPR	1082:5	1082:6	14	* mb ++
UNARY_OPERATOR	1082:5	1082:5	15	*
LEAF_NODE	1082:5	1082:5	16	*
FIELD	1082:6	1082:8	15	mb ++
LEAF_NODE	1082:6	1082:6	16	mb
LEAF_NODE	1082:8	1082:8	16	++
ASSIGN_OP	1082:10	1082:10	13	=
LEAF_NODE	1082:10	1082:10	14	=
RVAL	1082:11	1082:24	13	( uint8 ) ( * ma ++ )
LEAF_NODE	1082:11	1082:11	14	(
TYPE_NAME	1082:12	1082:12	14	uint8
LEAF_NODE	1082:12	1082:12	15	uint8
LEAF_NODE	1082:17	1082:17	14	)
LEAF_NODE	1082:18	1082:18	14	(
UNARY_EXPR	1082:19	1082:20	14	* ma ++
UNARY_OPERATOR	1082:19	1082:19	15	*
LEAF_NODE	1082:19	1082:19	16	*
FIELD	1082:20	1082:22	15	ma ++
LEAF_NODE	1082:20	1082:20	16	ma
LEAF_NODE	1082:22	1082:22	16	++
LEAF_NODE	1082:24	1082:24	14	)
LEAF_NODE	1082:25	1082:25	11	;
LEAF_NODE	1083:4	1083:4	9	}
LEAF_NODE	1084:3	1084:3	6	}
JUMP_STATEMENT	1085:3	1085:8	6	break DESTINATION ;
KEYWORD	1085:3	1085:3	7	break
LEAF_NODE	1085:3	1085:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1085:8	1085:8	7	;
LABEL	1086:2	1086:18	6	case TIFF_SLONG8 :
LEAF_NODE	1086:2	1086:2	7	case
LEAF_NODE	1086:7	1086:7	7	TIFF_SLONG8
LEAF_NODE	1086:18	1086:18	7	:
LEAF_NODE	1087:3	1087:3	6	{
STATEMENTS	1088:4	1093:4	6	
SIMPLE_DECL	1088:4	1088:13	7	int64 * ma ;
VAR_DECL	1088:4	1088:11	8	int64 * ma
TYPE	1088:4	1088:9	9	int64 *
TYPE_NAME	1088:4	1088:4	10	int64
LEAF_NODE	1088:4	1088:4	11	int64
POINTER	1088:9	1088:9	10	*
LEAF_NODE	1088:9	1088:9	11	*
NAME	1088:11	1088:11	9	ma
LEAF_NODE	1088:11	1088:11	10	ma
LEAF_NODE	1088:13	1088:13	8	;
SIMPLE_DECL	1089:4	1089:13	7	uint8 * mb ;
VAR_DECL	1089:4	1089:11	8	uint8 * mb
TYPE	1089:4	1089:9	9	uint8 *
TYPE_NAME	1089:4	1089:4	10	uint8
LEAF_NODE	1089:4	1089:4	11	uint8
POINTER	1089:9	1089:9	10	*
LEAF_NODE	1089:9	1089:9	11	*
NAME	1089:11	1089:11	9	mb
LEAF_NODE	1089:11	1089:11	10	mb
LEAF_NODE	1089:13	1089:13	8	;
SIMPLE_DECL	1090:4	1090:12	7	uint32 n ;
VAR_DECL	1090:4	1090:11	8	uint32 n
TYPE	1090:4	1090:4	9	uint32
TYPE_NAME	1090:4	1090:4	10	uint32
LEAF_NODE	1090:4	1090:4	11	uint32
NAME	1090:11	1090:11	9	n
LEAF_NODE	1090:11	1090:11	10	n
LEAF_NODE	1090:12	1090:12	8	;
EXPR_STATEMENT	1091:4	1091:23	7	ma = ( int64 * ) origdata ;
EXPR	1091:4	1091:4	8	ma = ( int64 * ) origdata
ASSIGN	1091:4	1091:7	9	ma = ( int64 * ) origdata
LVAL	1091:4	1091:4	10	ma
FIELD	1091:4	1091:4	11	ma
LEAF_NODE	1091:4	1091:4	12	ma
ASSIGN_OP	1091:6	1091:6	10	=
LEAF_NODE	1091:6	1091:6	11	=
RVAL	1091:7	1091:15	10	( int64 * ) origdata
LEAF_NODE	1091:7	1091:7	11	(
TYPE_NAME	1091:8	1091:8	11	int64
LEAF_NODE	1091:8	1091:8	12	int64
LEAF_NODE	1091:13	1091:13	11	*
LEAF_NODE	1091:14	1091:14	11	)
FIELD	1091:15	1091:15	11	origdata
LEAF_NODE	1091:15	1091:15	12	origdata
LEAF_NODE	1091:23	1091:23	8	;
EXPR_STATEMENT	1092:4	1092:11	7	mb = data ;
EXPR	1092:4	1092:4	8	mb = data
ASSIGN	1092:4	1092:7	9	mb = data
LVAL	1092:4	1092:4	10	mb
FIELD	1092:4	1092:4	11	mb
LEAF_NODE	1092:4	1092:4	12	mb
ASSIGN_OP	1092:6	1092:6	10	=
LEAF_NODE	1092:6	1092:6	11	=
RVAL	1092:7	1092:7	10	data
FIELD	1092:7	1092:7	11	data
LEAF_NODE	1092:7	1092:7	12	data
LEAF_NODE	1092:11	1092:11	8	;
ITERATION	1093:4	1094:4	7	
KEYWORD	1093:4	1093:4	8	for
LEAF_NODE	1093:4	1093:4	9	for
LEAF_NODE	1093:8	1093:8	8	(
FOR_INIT	1093:9	1093:12	8	n = 0 ;
EXPR	1093:9	1093:9	9	n = 0
ASSIGN	1093:9	1093:11	10	n = 0
LVAL	1093:9	1093:9	11	n
FIELD	1093:9	1093:9	12	n
LEAF_NODE	1093:9	1093:9	13	n
ASSIGN_OP	1093:10	1093:10	11	=
LEAF_NODE	1093:10	1093:10	12	=
RVAL	1093:11	1093:11	11	0
FIELD	1093:11	1093:11	12	0
LEAF_NODE	1093:11	1093:11	13	0
LEAF_NODE	1093:12	1093:12	9	;
CONDITION	1093:14	1093:14	8	n < count
EXPR	1093:14	1093:16	9	n < count
FIELD	1093:14	1093:14	10	n
LEAF_NODE	1093:14	1093:14	11	n
REL_OPERATOR	1093:15	1093:15	10	<
LEAF_NODE	1093:15	1093:15	11	<
FIELD	1093:16	1093:16	10	count
LEAF_NODE	1093:16	1093:16	11	count
LEAF_NODE	1093:21	1093:21	8	;
FOR_EXPR	1093:23	1093:23	8	n ++
EXPR	1093:23	1093:23	9	n ++
FIELD	1093:23	1093:24	10	n ++
LEAF_NODE	1093:23	1093:23	11	n
LEAF_NODE	1093:24	1093:24	11	++
LEAF_NODE	1093:26	1093:26	8	)
STATEMENTS	1094:4	1101:4	8	
LEAF_NODE	1094:4	1094:4	9	{
STATEMENTS	1095:5	1100:5	9	
SELECTION	1095:5	1096:6	10	
KEYWORD	1095:5	1095:5	11	if
LEAF_NODE	1095:5	1095:5	12	if
LEAF_NODE	1095:8	1095:8	11	(
CONDITION	1095:9	1095:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1095:9	1095:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1095:9	1095:14	13	tif -> tif_flags
LEAF_NODE	1095:9	1095:9	14	tif
LEAF_NODE	1095:12	1095:12	14	->
LEAF_NODE	1095:14	1095:14	14	tif_flags
LEAF_NODE	1095:23	1095:23	13	&
FIELD	1095:24	1095:24	13	TIFF_SWAB
LEAF_NODE	1095:24	1095:24	14	TIFF_SWAB
LEAF_NODE	1095:33	1095:33	11	)
STATEMENTS	1096:6	1096:6	11	
EXPR_STATEMENT	1096:6	1096:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	1096:6	1096:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	1096:6	1096:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	1096:6	1096:6	15	TIFFSwabLong8
LEAF_NODE	1096:6	1096:6	16	TIFFSwabLong8
LEAF_NODE	1096:19	1096:19	15	(
ARGUMENT	1096:20	1096:29	15	( uint64 * ) ma
LEAF_NODE	1096:20	1096:20	16	(
TYPE_NAME	1096:21	1096:21	16	uint64
LEAF_NODE	1096:21	1096:21	17	uint64
LEAF_NODE	1096:27	1096:27	16	*
LEAF_NODE	1096:28	1096:28	16	)
FIELD	1096:29	1096:29	16	ma
LEAF_NODE	1096:29	1096:29	17	ma
LEAF_NODE	1096:31	1096:31	15	)
LEAF_NODE	1096:32	1096:32	13	;
EXPR_STATEMENT	1097:5	1097:50	10	err = TIFFReadDirEntryCheckRangeByteSlong8 ( * ma ) ;
EXPR	1097:5	1097:5	11	err = TIFFReadDirEntryCheckRangeByteSlong8 ( * ma )
ASSIGN	1097:5	1097:9	12	err = TIFFReadDirEntryCheckRangeByteSlong8 ( * ma )
LVAL	1097:5	1097:5	13	err
FIELD	1097:5	1097:5	14	err
LEAF_NODE	1097:5	1097:5	15	err
ASSIGN_OP	1097:8	1097:8	13	=
LEAF_NODE	1097:8	1097:8	14	=
RVAL	1097:9	1097:9	13	TIFFReadDirEntryCheckRangeByteSlong8 ( * ma )
FUNCTION_CALL	1097:9	1097:49	14	TIFFReadDirEntryCheckRangeByteSlong8 ( * ma )
CALLEE	1097:9	1097:9	15	TIFFReadDirEntryCheckRangeByteSlong8
LEAF_NODE	1097:9	1097:9	16	TIFFReadDirEntryCheckRangeByteSlong8
LEAF_NODE	1097:45	1097:45	15	(
ARGUMENT	1097:46	1097:46	15	* ma
UNARY_EXPR	1097:46	1097:47	16	* ma
UNARY_OPERATOR	1097:46	1097:46	17	*
LEAF_NODE	1097:46	1097:46	18	*
FIELD	1097:47	1097:47	17	ma
LEAF_NODE	1097:47	1097:47	18	ma
LEAF_NODE	1097:49	1097:49	15	)
LEAF_NODE	1097:50	1097:50	11	;
SELECTION	1098:5	1099:6	10	
KEYWORD	1098:5	1098:5	11	if
LEAF_NODE	1098:5	1098:5	12	if
LEAF_NODE	1098:8	1098:8	11	(
CONDITION	1098:9	1098:9	11	err != TIFFReadDirEntryErrOk
EXPR	1098:9	1098:14	12	err != TIFFReadDirEntryErrOk
FIELD	1098:9	1098:9	13	err
LEAF_NODE	1098:9	1098:9	14	err
EQ_OPERATOR	1098:12	1098:12	13	!=
LEAF_NODE	1098:12	1098:12	14	!=
FIELD	1098:14	1098:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1098:14	1098:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1098:35	1098:35	11	)
STATEMENTS	1099:6	1099:6	11	
JUMP_STATEMENT	1099:6	1099:11	12	break DESTINATION ;
KEYWORD	1099:6	1099:6	13	break
LEAF_NODE	1099:6	1099:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1099:11	1099:11	13	;
EXPR_STATEMENT	1100:5	1100:25	10	* mb ++ = ( uint8 ) ( * ma ++ ) ;
EXPR	1100:5	1100:5	11	* mb ++ = ( uint8 ) ( * ma ++ )
ASSIGN	1100:5	1100:11	12	* mb ++ = ( uint8 ) ( * ma ++ )
LVAL	1100:5	1100:5	13	* mb ++
UNARY_EXPR	1100:5	1100:6	14	* mb ++
UNARY_OPERATOR	1100:5	1100:5	15	*
LEAF_NODE	1100:5	1100:5	16	*
FIELD	1100:6	1100:8	15	mb ++
LEAF_NODE	1100:6	1100:6	16	mb
LEAF_NODE	1100:8	1100:8	16	++
ASSIGN_OP	1100:10	1100:10	13	=
LEAF_NODE	1100:10	1100:10	14	=
RVAL	1100:11	1100:24	13	( uint8 ) ( * ma ++ )
LEAF_NODE	1100:11	1100:11	14	(
TYPE_NAME	1100:12	1100:12	14	uint8
LEAF_NODE	1100:12	1100:12	15	uint8
LEAF_NODE	1100:17	1100:17	14	)
LEAF_NODE	1100:18	1100:18	14	(
UNARY_EXPR	1100:19	1100:20	14	* ma ++
UNARY_OPERATOR	1100:19	1100:19	15	*
LEAF_NODE	1100:19	1100:19	16	*
FIELD	1100:20	1100:22	15	ma ++
LEAF_NODE	1100:20	1100:20	16	ma
LEAF_NODE	1100:22	1100:22	16	++
LEAF_NODE	1100:24	1100:24	14	)
LEAF_NODE	1100:25	1100:25	11	;
LEAF_NODE	1101:4	1101:4	9	}
LEAF_NODE	1102:3	1102:3	6	}
JUMP_STATEMENT	1103:3	1103:8	6	break DESTINATION ;
KEYWORD	1103:3	1103:3	7	break
LEAF_NODE	1103:3	1103:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1103:8	1103:8	7	;
LEAF_NODE	1104:1	1104:1	5	}
EXPR_STATEMENT	1105:1	1105:20	3	_TIFFfree ( origdata ) ;
EXPR	1105:1	1105:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	1105:1	1105:19	5	_TIFFfree ( origdata )
CALLEE	1105:1	1105:1	6	_TIFFfree
LEAF_NODE	1105:1	1105:1	7	_TIFFfree
LEAF_NODE	1105:10	1105:10	6	(
ARGUMENT	1105:11	1105:11	6	origdata
FIELD	1105:11	1105:11	7	origdata
LEAF_NODE	1105:11	1105:11	8	origdata
LEAF_NODE	1105:19	1105:19	6	)
LEAF_NODE	1105:20	1105:20	4	;
SELECTION	1106:1	1107:1	3	
KEYWORD	1106:1	1106:1	4	if
LEAF_NODE	1106:1	1106:1	5	if
LEAF_NODE	1106:4	1106:4	4	(
CONDITION	1106:5	1106:5	4	err != TIFFReadDirEntryErrOk
EXPR	1106:5	1106:10	5	err != TIFFReadDirEntryErrOk
FIELD	1106:5	1106:5	6	err
LEAF_NODE	1106:5	1106:5	7	err
EQ_OPERATOR	1106:8	1106:8	6	!=
LEAF_NODE	1106:8	1106:8	7	!=
FIELD	1106:10	1106:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1106:10	1106:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	1106:31	1106:31	4	)
STATEMENTS	1107:1	1110:1	4	
LEAF_NODE	1107:1	1107:1	5	{
STATEMENTS	1108:2	1109:13	5	
EXPR_STATEMENT	1108:2	1108:17	6	_TIFFfree ( data ) ;
EXPR	1108:2	1108:2	7	_TIFFfree ( data )
FUNCTION_CALL	1108:2	1108:16	8	_TIFFfree ( data )
CALLEE	1108:2	1108:2	9	_TIFFfree
LEAF_NODE	1108:2	1108:2	10	_TIFFfree
LEAF_NODE	1108:11	1108:11	9	(
ARGUMENT	1108:12	1108:12	9	data
FIELD	1108:12	1108:12	10	data
LEAF_NODE	1108:12	1108:12	11	data
LEAF_NODE	1108:16	1108:16	9	)
LEAF_NODE	1108:17	1108:17	7	;
LEAF_NODE	1109:2	1109:2	6	return
LEAF_NODE	1109:8	1109:8	6	(
LEAF_NODE	1109:9	1109:9	6	err
LEAF_NODE	1109:12	1109:12	6	)
LEAF_NODE	1109:13	1109:13	6	;
LEAF_NODE	1110:1	1110:1	5	}
EXPR_STATEMENT	1111:1	1111:12	3	* value = data ;
EXPR	1111:1	1111:1	4	* value = data
ASSIGN	1111:1	1111:8	5	* value = data
LVAL	1111:1	1111:1	6	* value
UNARY_EXPR	1111:1	1111:2	7	* value
UNARY_OPERATOR	1111:1	1111:1	8	*
LEAF_NODE	1111:1	1111:1	9	*
FIELD	1111:2	1111:2	8	value
LEAF_NODE	1111:2	1111:2	9	value
ASSIGN_OP	1111:7	1111:7	6	=
LEAF_NODE	1111:7	1111:7	7	=
RVAL	1111:8	1111:8	6	data
FIELD	1111:8	1111:8	7	data
LEAF_NODE	1111:8	1111:8	8	data
LEAF_NODE	1111:12	1111:12	4	;
LEAF_NODE	1112:1	1112:1	3	return
LEAF_NODE	1112:7	1112:7	3	(
LEAF_NODE	1112:8	1112:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	1112:29	1112:29	3	)
LEAF_NODE	1112:30	1112:30	3	;
LEAF_NODE	1113:0	1113:0	2	}
FUNCTION_DEF	1115:0	1292:0	1	
RETURN_TYPE	1115:0	1115:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	1115:0	1115:0	3	static
TYPE_NAME	1115:7	1115:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	1115:7	1115:7	4	enum
LEAF_NODE	1115:12	1115:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	1115:32	1115:32	2	TIFFReadDirEntrySbyteArray
LEAF_NODE	1115:32	1115:32	3	TIFFReadDirEntrySbyteArray
PARAMETER_LIST	1115:58	1115:106	2	( TIFF * tif , TIFFDirEntry * direntry , int8 * * value )
LEAF_NODE	1115:58	1115:58	3	(
PARAMETER_DECL	1115:59	1115:65	3	TIFF * tif
TYPE	1115:59	1115:63	4	TIFF *
TYPE_NAME	1115:59	1115:59	5	TIFF
LEAF_NODE	1115:59	1115:59	6	TIFF
POINTER	1115:63	1115:63	5	*
LEAF_NODE	1115:63	1115:63	6	*
NAME	1115:65	1115:65	4	tif
LEAF_NODE	1115:65	1115:65	5	tif
LEAF_NODE	1115:68	1115:68	3	,
PARAMETER_DECL	1115:70	1115:84	3	TIFFDirEntry * direntry
TYPE	1115:70	1115:82	4	TIFFDirEntry *
TYPE_NAME	1115:70	1115:70	5	TIFFDirEntry
LEAF_NODE	1115:70	1115:70	6	TIFFDirEntry
POINTER	1115:82	1115:82	5	*
LEAF_NODE	1115:82	1115:82	6	*
NAME	1115:84	1115:84	4	direntry
LEAF_NODE	1115:84	1115:84	5	direntry
LEAF_NODE	1115:92	1115:92	3	,
PARAMETER_DECL	1115:94	1115:101	3	int8 * * value
TYPE	1115:94	1115:98	4	int8 * *
TYPE_NAME	1115:94	1115:94	5	int8
LEAF_NODE	1115:94	1115:94	6	int8
POINTER	1115:98	1115:99	5	* *
LEAF_NODE	1115:98	1115:98	6	*
LEAF_NODE	1115:99	1115:99	6	*
NAME	1115:101	1115:101	4	value
LEAF_NODE	1115:101	1115:101	5	value
LEAF_NODE	1115:106	1115:106	3	)
LEAF_NODE	1116:0	1116:0	2	{
STATEMENTS	1117:1	1291:30	2	
SIMPLE_DECL	1117:1	1117:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	1117:1	1117:26	4	enum TIFFReadDirEntryErr err
TYPE	1117:1	1117:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	1117:1	1117:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	1117:1	1117:1	7	enum
LEAF_NODE	1117:6	1117:6	7	TIFFReadDirEntryErr
NAME	1117:26	1117:26	5	err
LEAF_NODE	1117:26	1117:26	6	err
LEAF_NODE	1117:29	1117:29	4	;
SIMPLE_DECL	1118:1	1118:13	3	uint32 count ;
VAR_DECL	1118:1	1118:8	4	uint32 count
TYPE	1118:1	1118:1	5	uint32
TYPE_NAME	1118:1	1118:1	6	uint32
LEAF_NODE	1118:1	1118:1	7	uint32
NAME	1118:8	1118:8	5	count
LEAF_NODE	1118:8	1118:8	6	count
LEAF_NODE	1118:13	1118:13	4	;
SIMPLE_DECL	1119:1	1119:15	3	void * origdata ;
VAR_DECL	1119:1	1119:7	4	void * origdata
TYPE	1119:1	1119:5	5	void *
TYPE_NAME	1119:1	1119:1	6	void
LEAF_NODE	1119:1	1119:1	7	void
POINTER	1119:5	1119:5	6	*
LEAF_NODE	1119:5	1119:5	7	*
NAME	1119:7	1119:7	5	origdata
LEAF_NODE	1119:7	1119:7	6	origdata
LEAF_NODE	1119:15	1119:15	4	;
SIMPLE_DECL	1120:1	1120:11	3	int8 * data ;
VAR_DECL	1120:1	1120:7	4	int8 * data
TYPE	1120:1	1120:5	5	int8 *
TYPE_NAME	1120:1	1120:1	6	int8
LEAF_NODE	1120:1	1120:1	7	int8
POINTER	1120:5	1120:5	6	*
LEAF_NODE	1120:5	1120:5	7	*
NAME	1120:7	1120:7	5	data
LEAF_NODE	1120:7	1120:7	6	data
LEAF_NODE	1120:11	1120:11	4	;
SELECTION	1121:1	1122:1	3	
KEYWORD	1121:1	1121:1	4	switch
LEAF_NODE	1121:1	1121:1	5	switch
LEAF_NODE	1121:8	1121:8	4	(
CONDITION	1121:9	1121:9	4	direntry -> tdir_type
EXPR	1121:9	1121:9	5	direntry -> tdir_type
FIELD	1121:9	1121:19	6	direntry -> tdir_type
LEAF_NODE	1121:9	1121:9	7	direntry
LEAF_NODE	1121:17	1121:17	7	->
LEAF_NODE	1121:19	1121:19	7	tdir_type
LEAF_NODE	1121:28	1121:28	4	)
STATEMENTS	1122:1	1135:1	4	
LEAF_NODE	1122:1	1122:1	5	{
STATEMENTS	1123:2	1134:34	5	
LABEL	1123:2	1123:21	6	case TIFF_UNDEFINED :
LEAF_NODE	1123:2	1123:2	7	case
LEAF_NODE	1123:7	1123:7	7	TIFF_UNDEFINED
LEAF_NODE	1123:21	1123:21	7	:
LABEL	1124:2	1124:16	6	case TIFF_BYTE :
LEAF_NODE	1124:2	1124:2	7	case
LEAF_NODE	1124:7	1124:7	7	TIFF_BYTE
LEAF_NODE	1124:16	1124:16	7	:
LABEL	1125:2	1125:17	6	case TIFF_SBYTE :
LEAF_NODE	1125:2	1125:2	7	case
LEAF_NODE	1125:7	1125:7	7	TIFF_SBYTE
LEAF_NODE	1125:17	1125:17	7	:
LABEL	1126:2	1126:17	6	case TIFF_SHORT :
LEAF_NODE	1126:2	1126:2	7	case
LEAF_NODE	1126:7	1126:7	7	TIFF_SHORT
LEAF_NODE	1126:17	1126:17	7	:
LABEL	1127:2	1127:18	6	case TIFF_SSHORT :
LEAF_NODE	1127:2	1127:2	7	case
LEAF_NODE	1127:7	1127:7	7	TIFF_SSHORT
LEAF_NODE	1127:18	1127:18	7	:
LABEL	1128:2	1128:16	6	case TIFF_LONG :
LEAF_NODE	1128:2	1128:2	7	case
LEAF_NODE	1128:7	1128:7	7	TIFF_LONG
LEAF_NODE	1128:16	1128:16	7	:
LABEL	1129:2	1129:17	6	case TIFF_SLONG :
LEAF_NODE	1129:2	1129:2	7	case
LEAF_NODE	1129:7	1129:7	7	TIFF_SLONG
LEAF_NODE	1129:17	1129:17	7	:
LABEL	1130:2	1130:17	6	case TIFF_LONG8 :
LEAF_NODE	1130:2	1130:2	7	case
LEAF_NODE	1130:7	1130:7	7	TIFF_LONG8
LEAF_NODE	1130:17	1130:17	7	:
LABEL	1131:2	1131:18	6	case TIFF_SLONG8 :
LEAF_NODE	1131:2	1131:2	7	case
LEAF_NODE	1131:7	1131:7	7	TIFF_SLONG8
LEAF_NODE	1131:18	1131:18	7	:
JUMP_STATEMENT	1132:3	1132:8	6	break DESTINATION ;
KEYWORD	1132:3	1132:3	7	break
LEAF_NODE	1132:3	1132:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1132:8	1132:8	7	;
LABEL	1133:2	1133:9	6	default :
LEAF_NODE	1133:2	1133:2	7	default
LEAF_NODE	1133:9	1133:9	7	:
LEAF_NODE	1134:3	1134:3	6	return
LEAF_NODE	1134:9	1134:9	6	(
LEAF_NODE	1134:10	1134:10	6	TIFFReadDirEntryErrType
LEAF_NODE	1134:33	1134:33	6	)
LEAF_NODE	1134:34	1134:34	6	;
LEAF_NODE	1135:1	1135:1	5	}
EXPR_STATEMENT	1136:1	1136:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata ) ;
EXPR	1136:1	1136:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
ASSIGN	1136:1	1136:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
LVAL	1136:1	1136:1	6	err
FIELD	1136:1	1136:1	7	err
LEAF_NODE	1136:1	1136:1	8	err
ASSIGN_OP	1136:4	1136:4	6	=
LEAF_NODE	1136:4	1136:4	7	=
RVAL	1136:5	1136:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
FUNCTION_CALL	1136:5	1136:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 1 , & origdata )
CALLEE	1136:5	1136:5	8	TIFFReadDirEntryArray
LEAF_NODE	1136:5	1136:5	9	TIFFReadDirEntryArray
LEAF_NODE	1136:26	1136:26	8	(
ARGUMENT	1136:27	1136:27	8	tif
FIELD	1136:27	1136:27	9	tif
LEAF_NODE	1136:27	1136:27	10	tif
LEAF_NODE	1136:30	1136:30	8	,
ARGUMENT	1136:31	1136:31	8	direntry
FIELD	1136:31	1136:31	9	direntry
LEAF_NODE	1136:31	1136:31	10	direntry
LEAF_NODE	1136:39	1136:39	8	,
ARGUMENT	1136:40	1136:40	8	& count
UNARY_EXPR	1136:40	1136:41	9	& count
UNARY_OPERATOR	1136:40	1136:40	10	&
LEAF_NODE	1136:40	1136:40	11	&
FIELD	1136:41	1136:41	10	count
LEAF_NODE	1136:41	1136:41	11	count
LEAF_NODE	1136:46	1136:46	8	,
ARGUMENT	1136:47	1136:47	8	1
FIELD	1136:47	1136:47	9	1
LEAF_NODE	1136:47	1136:47	10	1
LEAF_NODE	1136:48	1136:48	8	,
ARGUMENT	1136:49	1136:49	8	& origdata
UNARY_EXPR	1136:49	1136:50	9	& origdata
UNARY_OPERATOR	1136:49	1136:49	10	&
LEAF_NODE	1136:49	1136:49	11	&
FIELD	1136:50	1136:50	10	origdata
LEAF_NODE	1136:50	1136:50	11	origdata
LEAF_NODE	1136:58	1136:58	8	)
LEAF_NODE	1136:59	1136:59	4	;
SELECTION	1137:1	1138:1	3	
KEYWORD	1137:1	1137:1	4	if
LEAF_NODE	1137:1	1137:1	5	if
LEAF_NODE	1137:4	1137:4	4	(
CONDITION	1137:5	1137:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1137:5	1137:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	1137:5	1137:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1137:5	1137:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	1137:5	1137:5	8	(
FIELD	1137:6	1137:6	8	err
LEAF_NODE	1137:6	1137:6	9	err
EQ_OPERATOR	1137:9	1137:9	8	!=
LEAF_NODE	1137:9	1137:9	9	!=
FIELD	1137:11	1137:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	1137:11	1137:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	1137:32	1137:32	8	)
LEAF_NODE	1137:33	1137:33	7	||
EXPR	1137:35	1137:47	7	( origdata == 0 )
LEAF_NODE	1137:35	1137:35	8	(
FIELD	1137:36	1137:36	8	origdata
LEAF_NODE	1137:36	1137:36	9	origdata
EQ_OPERATOR	1137:44	1137:44	8	==
LEAF_NODE	1137:44	1137:44	9	==
FIELD	1137:46	1137:46	8	0
LEAF_NODE	1137:46	1137:46	9	0
LEAF_NODE	1137:47	1137:47	8	)
LEAF_NODE	1137:48	1137:48	4	)
STATEMENTS	1138:1	1141:1	4	
LEAF_NODE	1138:1	1138:1	5	{
STATEMENTS	1139:2	1140:13	5	
EXPR_STATEMENT	1139:2	1139:10	6	* value = 0 ;
EXPR	1139:2	1139:2	7	* value = 0
ASSIGN	1139:2	1139:9	8	* value = 0
LVAL	1139:2	1139:2	9	* value
UNARY_EXPR	1139:2	1139:3	10	* value
UNARY_OPERATOR	1139:2	1139:2	11	*
LEAF_NODE	1139:2	1139:2	12	*
FIELD	1139:3	1139:3	11	value
LEAF_NODE	1139:3	1139:3	12	value
ASSIGN_OP	1139:8	1139:8	9	=
LEAF_NODE	1139:8	1139:8	10	=
RVAL	1139:9	1139:9	9	0
FIELD	1139:9	1139:9	10	0
LEAF_NODE	1139:9	1139:9	11	0
LEAF_NODE	1139:10	1139:10	7	;
LEAF_NODE	1140:2	1140:2	6	return
LEAF_NODE	1140:8	1140:8	6	(
LEAF_NODE	1140:9	1140:9	6	err
LEAF_NODE	1140:12	1140:12	6	)
LEAF_NODE	1140:13	1140:13	6	;
LEAF_NODE	1141:1	1141:1	5	}
SELECTION	1142:1	1143:1	3	
KEYWORD	1142:1	1142:1	4	switch
LEAF_NODE	1142:1	1142:1	5	switch
LEAF_NODE	1142:8	1142:8	4	(
CONDITION	1142:9	1142:9	4	direntry -> tdir_type
EXPR	1142:9	1142:9	5	direntry -> tdir_type
FIELD	1142:9	1142:19	6	direntry -> tdir_type
LEAF_NODE	1142:9	1142:9	7	direntry
LEAF_NODE	1142:17	1142:17	7	->
LEAF_NODE	1142:19	1142:19	7	tdir_type
LEAF_NODE	1142:28	1142:28	4	)
STATEMENTS	1143:1	1166:1	4	
LEAF_NODE	1143:1	1143:1	5	{
STATEMENTS	1144:2	1165:32	5	
LABEL	1144:2	1144:21	6	case TIFF_UNDEFINED :
LEAF_NODE	1144:2	1144:2	7	case
LEAF_NODE	1144:7	1144:7	7	TIFF_UNDEFINED
LEAF_NODE	1144:21	1144:21	7	:
LABEL	1145:2	1145:16	6	case TIFF_BYTE :
LEAF_NODE	1145:2	1145:2	7	case
LEAF_NODE	1145:7	1145:7	7	TIFF_BYTE
LEAF_NODE	1145:16	1145:16	7	:
LEAF_NODE	1146:3	1146:3	6	{
STATEMENTS	1147:4	1161:33	6	
SIMPLE_DECL	1147:4	1147:12	7	uint8 * m ;
VAR_DECL	1147:4	1147:11	8	uint8 * m
TYPE	1147:4	1147:9	9	uint8 *
TYPE_NAME	1147:4	1147:4	10	uint8
LEAF_NODE	1147:4	1147:4	11	uint8
POINTER	1147:9	1147:9	10	*
LEAF_NODE	1147:9	1147:9	11	*
NAME	1147:11	1147:11	9	m
LEAF_NODE	1147:11	1147:11	10	m
LEAF_NODE	1147:12	1147:12	8	;
SIMPLE_DECL	1148:4	1148:12	7	uint32 n ;
VAR_DECL	1148:4	1148:11	8	uint32 n
TYPE	1148:4	1148:4	9	uint32
TYPE_NAME	1148:4	1148:4	10	uint32
LEAF_NODE	1148:4	1148:4	11	uint32
NAME	1148:11	1148:11	9	n
LEAF_NODE	1148:11	1148:11	10	n
LEAF_NODE	1148:12	1148:12	8	;
EXPR_STATEMENT	1149:4	1149:22	7	m = ( uint8 * ) origdata ;
EXPR	1149:4	1149:4	8	m = ( uint8 * ) origdata
ASSIGN	1149:4	1149:6	9	m = ( uint8 * ) origdata
LVAL	1149:4	1149:4	10	m
FIELD	1149:4	1149:4	11	m
LEAF_NODE	1149:4	1149:4	12	m
ASSIGN_OP	1149:5	1149:5	10	=
LEAF_NODE	1149:5	1149:5	11	=
RVAL	1149:6	1149:14	10	( uint8 * ) origdata
LEAF_NODE	1149:6	1149:6	11	(
TYPE_NAME	1149:7	1149:7	11	uint8
LEAF_NODE	1149:7	1149:7	12	uint8
LEAF_NODE	1149:12	1149:12	11	*
LEAF_NODE	1149:13	1149:13	11	)
FIELD	1149:14	1149:14	11	origdata
LEAF_NODE	1149:14	1149:14	12	origdata
LEAF_NODE	1149:22	1149:22	8	;
ITERATION	1150:4	1151:4	7	
KEYWORD	1150:4	1150:4	8	for
LEAF_NODE	1150:4	1150:4	9	for
LEAF_NODE	1150:8	1150:8	8	(
FOR_INIT	1150:9	1150:12	8	n = 0 ;
EXPR	1150:9	1150:9	9	n = 0
ASSIGN	1150:9	1150:11	10	n = 0
LVAL	1150:9	1150:9	11	n
FIELD	1150:9	1150:9	12	n
LEAF_NODE	1150:9	1150:9	13	n
ASSIGN_OP	1150:10	1150:10	11	=
LEAF_NODE	1150:10	1150:10	12	=
RVAL	1150:11	1150:11	11	0
FIELD	1150:11	1150:11	12	0
LEAF_NODE	1150:11	1150:11	13	0
LEAF_NODE	1150:12	1150:12	9	;
CONDITION	1150:14	1150:14	8	n < count
EXPR	1150:14	1150:16	9	n < count
FIELD	1150:14	1150:14	10	n
LEAF_NODE	1150:14	1150:14	11	n
REL_OPERATOR	1150:15	1150:15	10	<
LEAF_NODE	1150:15	1150:15	11	<
FIELD	1150:16	1150:16	10	count
LEAF_NODE	1150:16	1150:16	11	count
LEAF_NODE	1150:21	1150:21	8	;
FOR_EXPR	1150:23	1150:23	8	n ++
EXPR	1150:23	1150:23	9	n ++
FIELD	1150:23	1150:24	10	n ++
LEAF_NODE	1150:23	1150:23	11	n
LEAF_NODE	1150:24	1150:24	11	++
LEAF_NODE	1150:26	1150:26	8	)
STATEMENTS	1151:4	1159:4	8	
LEAF_NODE	1151:4	1151:4	9	{
STATEMENTS	1152:5	1158:5	9	
EXPR_STATEMENT	1152:5	1152:48	10	err = TIFFReadDirEntryCheckRangeSbyteByte ( * m ) ;
EXPR	1152:5	1152:5	11	err = TIFFReadDirEntryCheckRangeSbyteByte ( * m )
ASSIGN	1152:5	1152:9	12	err = TIFFReadDirEntryCheckRangeSbyteByte ( * m )
LVAL	1152:5	1152:5	13	err
FIELD	1152:5	1152:5	14	err
LEAF_NODE	1152:5	1152:5	15	err
ASSIGN_OP	1152:8	1152:8	13	=
LEAF_NODE	1152:8	1152:8	14	=
RVAL	1152:9	1152:9	13	TIFFReadDirEntryCheckRangeSbyteByte ( * m )
FUNCTION_CALL	1152:9	1152:47	14	TIFFReadDirEntryCheckRangeSbyteByte ( * m )
CALLEE	1152:9	1152:9	15	TIFFReadDirEntryCheckRangeSbyteByte
LEAF_NODE	1152:9	1152:9	16	TIFFReadDirEntryCheckRangeSbyteByte
LEAF_NODE	1152:44	1152:44	15	(
ARGUMENT	1152:45	1152:45	15	* m
UNARY_EXPR	1152:45	1152:46	16	* m
UNARY_OPERATOR	1152:45	1152:45	17	*
LEAF_NODE	1152:45	1152:45	18	*
FIELD	1152:46	1152:46	17	m
LEAF_NODE	1152:46	1152:46	18	m
LEAF_NODE	1152:47	1152:47	15	)
LEAF_NODE	1152:48	1152:48	11	;
SELECTION	1153:5	1154:5	10	
KEYWORD	1153:5	1153:5	11	if
LEAF_NODE	1153:5	1153:5	12	if
LEAF_NODE	1153:8	1153:8	11	(
CONDITION	1153:9	1153:9	11	err != TIFFReadDirEntryErrOk
EXPR	1153:9	1153:14	12	err != TIFFReadDirEntryErrOk
FIELD	1153:9	1153:9	13	err
LEAF_NODE	1153:9	1153:9	14	err
EQ_OPERATOR	1153:12	1153:12	13	!=
LEAF_NODE	1153:12	1153:12	14	!=
FIELD	1153:14	1153:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1153:14	1153:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1153:35	1153:35	11	)
STATEMENTS	1154:5	1157:5	11	
LEAF_NODE	1154:5	1154:5	12	{
STATEMENTS	1155:6	1156:17	12	
EXPR_STATEMENT	1155:6	1155:25	13	_TIFFfree ( origdata ) ;
EXPR	1155:6	1155:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	1155:6	1155:24	15	_TIFFfree ( origdata )
CALLEE	1155:6	1155:6	16	_TIFFfree
LEAF_NODE	1155:6	1155:6	17	_TIFFfree
LEAF_NODE	1155:15	1155:15	16	(
ARGUMENT	1155:16	1155:16	16	origdata
FIELD	1155:16	1155:16	17	origdata
LEAF_NODE	1155:16	1155:16	18	origdata
LEAF_NODE	1155:24	1155:24	16	)
LEAF_NODE	1155:25	1155:25	14	;
LEAF_NODE	1156:6	1156:6	13	return
LEAF_NODE	1156:12	1156:12	13	(
LEAF_NODE	1156:13	1156:13	13	err
LEAF_NODE	1156:16	1156:16	13	)
LEAF_NODE	1156:17	1156:17	13	;
LEAF_NODE	1157:5	1157:5	12	}
EXPR_STATEMENT	1158:5	1158:8	10	m ++ ;
EXPR	1158:5	1158:5	11	m ++
FIELD	1158:5	1158:6	12	m ++
LEAF_NODE	1158:5	1158:5	13	m
LEAF_NODE	1158:6	1158:6	13	++
LEAF_NODE	1158:8	1158:8	11	;
LEAF_NODE	1159:4	1159:4	9	}
EXPR_STATEMENT	1160:4	1160:26	7	* value = ( int8 * ) origdata ;
EXPR	1160:4	1160:4	8	* value = ( int8 * ) origdata
ASSIGN	1160:4	1160:11	9	* value = ( int8 * ) origdata
LVAL	1160:4	1160:4	10	* value
UNARY_EXPR	1160:4	1160:5	11	* value
UNARY_OPERATOR	1160:4	1160:4	12	*
LEAF_NODE	1160:4	1160:4	13	*
FIELD	1160:5	1160:5	12	value
LEAF_NODE	1160:5	1160:5	13	value
ASSIGN_OP	1160:10	1160:10	10	=
LEAF_NODE	1160:10	1160:10	11	=
RVAL	1160:11	1160:18	10	( int8 * ) origdata
LEAF_NODE	1160:11	1160:11	11	(
TYPE_NAME	1160:12	1160:12	11	int8
LEAF_NODE	1160:12	1160:12	12	int8
LEAF_NODE	1160:16	1160:16	11	*
LEAF_NODE	1160:17	1160:17	11	)
FIELD	1160:18	1160:18	11	origdata
LEAF_NODE	1160:18	1160:18	12	origdata
LEAF_NODE	1160:26	1160:26	8	;
LEAF_NODE	1161:4	1161:4	7	return
LEAF_NODE	1161:10	1161:10	7	(
LEAF_NODE	1161:11	1161:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	1161:32	1161:32	7	)
LEAF_NODE	1161:33	1161:33	7	;
LEAF_NODE	1162:3	1162:3	6	}
LABEL	1163:2	1163:17	6	case TIFF_SBYTE :
LEAF_NODE	1163:2	1163:2	7	case
LEAF_NODE	1163:7	1163:7	7	TIFF_SBYTE
LEAF_NODE	1163:17	1163:17	7	:
EXPR_STATEMENT	1164:3	1164:25	6	* value = ( int8 * ) origdata ;
EXPR	1164:3	1164:3	7	* value = ( int8 * ) origdata
ASSIGN	1164:3	1164:10	8	* value = ( int8 * ) origdata
LVAL	1164:3	1164:3	9	* value
UNARY_EXPR	1164:3	1164:4	10	* value
UNARY_OPERATOR	1164:3	1164:3	11	*
LEAF_NODE	1164:3	1164:3	12	*
FIELD	1164:4	1164:4	11	value
LEAF_NODE	1164:4	1164:4	12	value
ASSIGN_OP	1164:9	1164:9	9	=
LEAF_NODE	1164:9	1164:9	10	=
RVAL	1164:10	1164:17	9	( int8 * ) origdata
LEAF_NODE	1164:10	1164:10	10	(
TYPE_NAME	1164:11	1164:11	10	int8
LEAF_NODE	1164:11	1164:11	11	int8
LEAF_NODE	1164:15	1164:15	10	*
LEAF_NODE	1164:16	1164:16	10	)
FIELD	1164:17	1164:17	10	origdata
LEAF_NODE	1164:17	1164:17	11	origdata
LEAF_NODE	1164:25	1164:25	7	;
LEAF_NODE	1165:3	1165:3	6	return
LEAF_NODE	1165:9	1165:9	6	(
LEAF_NODE	1165:10	1165:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1165:31	1165:31	6	)
LEAF_NODE	1165:32	1165:32	6	;
LEAF_NODE	1166:1	1166:1	5	}
EXPR_STATEMENT	1167:1	1167:31	3	data = ( int8 * ) _TIFFmalloc ( count ) ;
EXPR	1167:1	1167:1	4	data = ( int8 * ) _TIFFmalloc ( count )
ASSIGN	1167:1	1167:6	5	data = ( int8 * ) _TIFFmalloc ( count )
LVAL	1167:1	1167:1	6	data
FIELD	1167:1	1167:1	7	data
LEAF_NODE	1167:1	1167:1	8	data
ASSIGN_OP	1167:5	1167:5	6	=
LEAF_NODE	1167:5	1167:5	7	=
RVAL	1167:6	1167:13	6	( int8 * ) _TIFFmalloc ( count )
LEAF_NODE	1167:6	1167:6	7	(
TYPE_NAME	1167:7	1167:7	7	int8
LEAF_NODE	1167:7	1167:7	8	int8
LEAF_NODE	1167:11	1167:11	7	*
LEAF_NODE	1167:12	1167:12	7	)
FUNCTION_CALL	1167:13	1167:30	7	_TIFFmalloc ( count )
CALLEE	1167:13	1167:13	8	_TIFFmalloc
LEAF_NODE	1167:13	1167:13	9	_TIFFmalloc
LEAF_NODE	1167:24	1167:24	8	(
ARGUMENT	1167:25	1167:25	8	count
FIELD	1167:25	1167:25	9	count
LEAF_NODE	1167:25	1167:25	10	count
LEAF_NODE	1167:30	1167:30	8	)
LEAF_NODE	1167:31	1167:31	4	;
SELECTION	1168:1	1169:1	3	
KEYWORD	1168:1	1168:1	4	if
LEAF_NODE	1168:1	1168:1	5	if
LEAF_NODE	1168:4	1168:4	4	(
CONDITION	1168:5	1168:5	4	data == 0
EXPR	1168:5	1168:11	5	data == 0
FIELD	1168:5	1168:5	6	data
LEAF_NODE	1168:5	1168:5	7	data
EQ_OPERATOR	1168:9	1168:9	6	==
LEAF_NODE	1168:9	1168:9	7	==
FIELD	1168:11	1168:11	6	0
LEAF_NODE	1168:11	1168:11	7	0
LEAF_NODE	1168:12	1168:12	4	)
STATEMENTS	1169:1	1172:1	4	
LEAF_NODE	1169:1	1169:1	5	{
STATEMENTS	1170:2	1171:34	5	
EXPR_STATEMENT	1170:2	1170:21	6	_TIFFfree ( origdata ) ;
EXPR	1170:2	1170:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	1170:2	1170:20	8	_TIFFfree ( origdata )
CALLEE	1170:2	1170:2	9	_TIFFfree
LEAF_NODE	1170:2	1170:2	10	_TIFFfree
LEAF_NODE	1170:11	1170:11	9	(
ARGUMENT	1170:12	1170:12	9	origdata
FIELD	1170:12	1170:12	10	origdata
LEAF_NODE	1170:12	1170:12	11	origdata
LEAF_NODE	1170:20	1170:20	9	)
LEAF_NODE	1170:21	1170:21	7	;
LEAF_NODE	1171:2	1171:2	6	return
LEAF_NODE	1171:8	1171:8	6	(
LEAF_NODE	1171:9	1171:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	1171:33	1171:33	6	)
LEAF_NODE	1171:34	1171:34	6	;
LEAF_NODE	1172:1	1172:1	5	}
SELECTION	1173:1	1174:1	3	
KEYWORD	1173:1	1173:1	4	switch
LEAF_NODE	1173:1	1173:1	5	switch
LEAF_NODE	1173:8	1173:8	4	(
CONDITION	1173:9	1173:9	4	direntry -> tdir_type
EXPR	1173:9	1173:9	5	direntry -> tdir_type
FIELD	1173:9	1173:19	6	direntry -> tdir_type
LEAF_NODE	1173:9	1173:9	7	direntry
LEAF_NODE	1173:17	1173:17	7	->
LEAF_NODE	1173:19	1173:19	7	tdir_type
LEAF_NODE	1173:28	1173:28	4	)
STATEMENTS	1174:1	1283:1	4	
LEAF_NODE	1174:1	1174:1	5	{
STATEMENTS	1175:2	1282:3	5	
LABEL	1175:2	1175:17	6	case TIFF_SHORT :
LEAF_NODE	1175:2	1175:2	7	case
LEAF_NODE	1175:7	1175:7	7	TIFF_SHORT
LEAF_NODE	1175:17	1175:17	7	:
LEAF_NODE	1176:3	1176:3	6	{
STATEMENTS	1177:4	1182:4	6	
SIMPLE_DECL	1177:4	1177:14	7	uint16 * ma ;
VAR_DECL	1177:4	1177:12	8	uint16 * ma
TYPE	1177:4	1177:10	9	uint16 *
TYPE_NAME	1177:4	1177:4	10	uint16
LEAF_NODE	1177:4	1177:4	11	uint16
POINTER	1177:10	1177:10	10	*
LEAF_NODE	1177:10	1177:10	11	*
NAME	1177:12	1177:12	9	ma
LEAF_NODE	1177:12	1177:12	10	ma
LEAF_NODE	1177:14	1177:14	8	;
SIMPLE_DECL	1178:4	1178:12	7	int8 * mb ;
VAR_DECL	1178:4	1178:10	8	int8 * mb
TYPE	1178:4	1178:8	9	int8 *
TYPE_NAME	1178:4	1178:4	10	int8
LEAF_NODE	1178:4	1178:4	11	int8
POINTER	1178:8	1178:8	10	*
LEAF_NODE	1178:8	1178:8	11	*
NAME	1178:10	1178:10	9	mb
LEAF_NODE	1178:10	1178:10	10	mb
LEAF_NODE	1178:12	1178:12	8	;
SIMPLE_DECL	1179:4	1179:12	7	uint32 n ;
VAR_DECL	1179:4	1179:11	8	uint32 n
TYPE	1179:4	1179:4	9	uint32
TYPE_NAME	1179:4	1179:4	10	uint32
LEAF_NODE	1179:4	1179:4	11	uint32
NAME	1179:11	1179:11	9	n
LEAF_NODE	1179:11	1179:11	10	n
LEAF_NODE	1179:12	1179:12	8	;
EXPR_STATEMENT	1180:4	1180:24	7	ma = ( uint16 * ) origdata ;
EXPR	1180:4	1180:4	8	ma = ( uint16 * ) origdata
ASSIGN	1180:4	1180:7	9	ma = ( uint16 * ) origdata
LVAL	1180:4	1180:4	10	ma
FIELD	1180:4	1180:4	11	ma
LEAF_NODE	1180:4	1180:4	12	ma
ASSIGN_OP	1180:6	1180:6	10	=
LEAF_NODE	1180:6	1180:6	11	=
RVAL	1180:7	1180:16	10	( uint16 * ) origdata
LEAF_NODE	1180:7	1180:7	11	(
TYPE_NAME	1180:8	1180:8	11	uint16
LEAF_NODE	1180:8	1180:8	12	uint16
LEAF_NODE	1180:14	1180:14	11	*
LEAF_NODE	1180:15	1180:15	11	)
FIELD	1180:16	1180:16	11	origdata
LEAF_NODE	1180:16	1180:16	12	origdata
LEAF_NODE	1180:24	1180:24	8	;
EXPR_STATEMENT	1181:4	1181:11	7	mb = data ;
EXPR	1181:4	1181:4	8	mb = data
ASSIGN	1181:4	1181:7	9	mb = data
LVAL	1181:4	1181:4	10	mb
FIELD	1181:4	1181:4	11	mb
LEAF_NODE	1181:4	1181:4	12	mb
ASSIGN_OP	1181:6	1181:6	10	=
LEAF_NODE	1181:6	1181:6	11	=
RVAL	1181:7	1181:7	10	data
FIELD	1181:7	1181:7	11	data
LEAF_NODE	1181:7	1181:7	12	data
LEAF_NODE	1181:11	1181:11	8	;
ITERATION	1182:4	1183:4	7	
KEYWORD	1182:4	1182:4	8	for
LEAF_NODE	1182:4	1182:4	9	for
LEAF_NODE	1182:8	1182:8	8	(
FOR_INIT	1182:9	1182:12	8	n = 0 ;
EXPR	1182:9	1182:9	9	n = 0
ASSIGN	1182:9	1182:11	10	n = 0
LVAL	1182:9	1182:9	11	n
FIELD	1182:9	1182:9	12	n
LEAF_NODE	1182:9	1182:9	13	n
ASSIGN_OP	1182:10	1182:10	11	=
LEAF_NODE	1182:10	1182:10	12	=
RVAL	1182:11	1182:11	11	0
FIELD	1182:11	1182:11	12	0
LEAF_NODE	1182:11	1182:11	13	0
LEAF_NODE	1182:12	1182:12	9	;
CONDITION	1182:14	1182:14	8	n < count
EXPR	1182:14	1182:16	9	n < count
FIELD	1182:14	1182:14	10	n
LEAF_NODE	1182:14	1182:14	11	n
REL_OPERATOR	1182:15	1182:15	10	<
LEAF_NODE	1182:15	1182:15	11	<
FIELD	1182:16	1182:16	10	count
LEAF_NODE	1182:16	1182:16	11	count
LEAF_NODE	1182:21	1182:21	8	;
FOR_EXPR	1182:23	1182:23	8	n ++
EXPR	1182:23	1182:23	9	n ++
FIELD	1182:23	1182:24	10	n ++
LEAF_NODE	1182:23	1182:23	11	n
LEAF_NODE	1182:24	1182:24	11	++
LEAF_NODE	1182:26	1182:26	8	)
STATEMENTS	1183:4	1190:4	8	
LEAF_NODE	1183:4	1183:4	9	{
STATEMENTS	1184:5	1189:5	9	
SELECTION	1184:5	1185:6	10	
KEYWORD	1184:5	1184:5	11	if
LEAF_NODE	1184:5	1184:5	12	if
LEAF_NODE	1184:8	1184:8	11	(
CONDITION	1184:9	1184:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1184:9	1184:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1184:9	1184:14	13	tif -> tif_flags
LEAF_NODE	1184:9	1184:9	14	tif
LEAF_NODE	1184:12	1184:12	14	->
LEAF_NODE	1184:14	1184:14	14	tif_flags
LEAF_NODE	1184:23	1184:23	13	&
FIELD	1184:24	1184:24	13	TIFF_SWAB
LEAF_NODE	1184:24	1184:24	14	TIFF_SWAB
LEAF_NODE	1184:33	1184:33	11	)
STATEMENTS	1185:6	1185:6	11	
EXPR_STATEMENT	1185:6	1185:23	12	TIFFSwabShort ( ma ) ;
EXPR	1185:6	1185:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	1185:6	1185:22	14	TIFFSwabShort ( ma )
CALLEE	1185:6	1185:6	15	TIFFSwabShort
LEAF_NODE	1185:6	1185:6	16	TIFFSwabShort
LEAF_NODE	1185:19	1185:19	15	(
ARGUMENT	1185:20	1185:20	15	ma
FIELD	1185:20	1185:20	16	ma
LEAF_NODE	1185:20	1185:20	17	ma
LEAF_NODE	1185:22	1185:22	15	)
LEAF_NODE	1185:23	1185:23	13	;
EXPR_STATEMENT	1186:5	1186:50	10	err = TIFFReadDirEntryCheckRangeSbyteShort ( * ma ) ;
EXPR	1186:5	1186:5	11	err = TIFFReadDirEntryCheckRangeSbyteShort ( * ma )
ASSIGN	1186:5	1186:9	12	err = TIFFReadDirEntryCheckRangeSbyteShort ( * ma )
LVAL	1186:5	1186:5	13	err
FIELD	1186:5	1186:5	14	err
LEAF_NODE	1186:5	1186:5	15	err
ASSIGN_OP	1186:8	1186:8	13	=
LEAF_NODE	1186:8	1186:8	14	=
RVAL	1186:9	1186:9	13	TIFFReadDirEntryCheckRangeSbyteShort ( * ma )
FUNCTION_CALL	1186:9	1186:49	14	TIFFReadDirEntryCheckRangeSbyteShort ( * ma )
CALLEE	1186:9	1186:9	15	TIFFReadDirEntryCheckRangeSbyteShort
LEAF_NODE	1186:9	1186:9	16	TIFFReadDirEntryCheckRangeSbyteShort
LEAF_NODE	1186:45	1186:45	15	(
ARGUMENT	1186:46	1186:46	15	* ma
UNARY_EXPR	1186:46	1186:47	16	* ma
UNARY_OPERATOR	1186:46	1186:46	17	*
LEAF_NODE	1186:46	1186:46	18	*
FIELD	1186:47	1186:47	17	ma
LEAF_NODE	1186:47	1186:47	18	ma
LEAF_NODE	1186:49	1186:49	15	)
LEAF_NODE	1186:50	1186:50	11	;
SELECTION	1187:5	1188:6	10	
KEYWORD	1187:5	1187:5	11	if
LEAF_NODE	1187:5	1187:5	12	if
LEAF_NODE	1187:8	1187:8	11	(
CONDITION	1187:9	1187:9	11	err != TIFFReadDirEntryErrOk
EXPR	1187:9	1187:14	12	err != TIFFReadDirEntryErrOk
FIELD	1187:9	1187:9	13	err
LEAF_NODE	1187:9	1187:9	14	err
EQ_OPERATOR	1187:12	1187:12	13	!=
LEAF_NODE	1187:12	1187:12	14	!=
FIELD	1187:14	1187:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1187:14	1187:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1187:35	1187:35	11	)
STATEMENTS	1188:6	1188:6	11	
JUMP_STATEMENT	1188:6	1188:11	12	break DESTINATION ;
KEYWORD	1188:6	1188:6	13	break
LEAF_NODE	1188:6	1188:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1188:11	1188:11	13	;
EXPR_STATEMENT	1189:5	1189:24	10	* mb ++ = ( int8 ) ( * ma ++ ) ;
EXPR	1189:5	1189:5	11	* mb ++ = ( int8 ) ( * ma ++ )
ASSIGN	1189:5	1189:11	12	* mb ++ = ( int8 ) ( * ma ++ )
LVAL	1189:5	1189:5	13	* mb ++
UNARY_EXPR	1189:5	1189:6	14	* mb ++
UNARY_OPERATOR	1189:5	1189:5	15	*
LEAF_NODE	1189:5	1189:5	16	*
FIELD	1189:6	1189:8	15	mb ++
LEAF_NODE	1189:6	1189:6	16	mb
LEAF_NODE	1189:8	1189:8	16	++
ASSIGN_OP	1189:10	1189:10	13	=
LEAF_NODE	1189:10	1189:10	14	=
RVAL	1189:11	1189:23	13	( int8 ) ( * ma ++ )
LEAF_NODE	1189:11	1189:11	14	(
TYPE_NAME	1189:12	1189:12	14	int8
LEAF_NODE	1189:12	1189:12	15	int8
LEAF_NODE	1189:16	1189:16	14	)
LEAF_NODE	1189:17	1189:17	14	(
UNARY_EXPR	1189:18	1189:19	14	* ma ++
UNARY_OPERATOR	1189:18	1189:18	15	*
LEAF_NODE	1189:18	1189:18	16	*
FIELD	1189:19	1189:21	15	ma ++
LEAF_NODE	1189:19	1189:19	16	ma
LEAF_NODE	1189:21	1189:21	16	++
LEAF_NODE	1189:23	1189:23	14	)
LEAF_NODE	1189:24	1189:24	11	;
LEAF_NODE	1190:4	1190:4	9	}
LEAF_NODE	1191:3	1191:3	6	}
JUMP_STATEMENT	1192:3	1192:8	6	break DESTINATION ;
KEYWORD	1192:3	1192:3	7	break
LEAF_NODE	1192:3	1192:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1192:8	1192:8	7	;
LABEL	1193:2	1193:18	6	case TIFF_SSHORT :
LEAF_NODE	1193:2	1193:2	7	case
LEAF_NODE	1193:7	1193:7	7	TIFF_SSHORT
LEAF_NODE	1193:18	1193:18	7	:
LEAF_NODE	1194:3	1194:3	6	{
STATEMENTS	1195:4	1200:4	6	
SIMPLE_DECL	1195:4	1195:13	7	int16 * ma ;
VAR_DECL	1195:4	1195:11	8	int16 * ma
TYPE	1195:4	1195:9	9	int16 *
TYPE_NAME	1195:4	1195:4	10	int16
LEAF_NODE	1195:4	1195:4	11	int16
POINTER	1195:9	1195:9	10	*
LEAF_NODE	1195:9	1195:9	11	*
NAME	1195:11	1195:11	9	ma
LEAF_NODE	1195:11	1195:11	10	ma
LEAF_NODE	1195:13	1195:13	8	;
SIMPLE_DECL	1196:4	1196:12	7	int8 * mb ;
VAR_DECL	1196:4	1196:10	8	int8 * mb
TYPE	1196:4	1196:8	9	int8 *
TYPE_NAME	1196:4	1196:4	10	int8
LEAF_NODE	1196:4	1196:4	11	int8
POINTER	1196:8	1196:8	10	*
LEAF_NODE	1196:8	1196:8	11	*
NAME	1196:10	1196:10	9	mb
LEAF_NODE	1196:10	1196:10	10	mb
LEAF_NODE	1196:12	1196:12	8	;
SIMPLE_DECL	1197:4	1197:12	7	uint32 n ;
VAR_DECL	1197:4	1197:11	8	uint32 n
TYPE	1197:4	1197:4	9	uint32
TYPE_NAME	1197:4	1197:4	10	uint32
LEAF_NODE	1197:4	1197:4	11	uint32
NAME	1197:11	1197:11	9	n
LEAF_NODE	1197:11	1197:11	10	n
LEAF_NODE	1197:12	1197:12	8	;
EXPR_STATEMENT	1198:4	1198:23	7	ma = ( int16 * ) origdata ;
EXPR	1198:4	1198:4	8	ma = ( int16 * ) origdata
ASSIGN	1198:4	1198:7	9	ma = ( int16 * ) origdata
LVAL	1198:4	1198:4	10	ma
FIELD	1198:4	1198:4	11	ma
LEAF_NODE	1198:4	1198:4	12	ma
ASSIGN_OP	1198:6	1198:6	10	=
LEAF_NODE	1198:6	1198:6	11	=
RVAL	1198:7	1198:15	10	( int16 * ) origdata
LEAF_NODE	1198:7	1198:7	11	(
TYPE_NAME	1198:8	1198:8	11	int16
LEAF_NODE	1198:8	1198:8	12	int16
LEAF_NODE	1198:13	1198:13	11	*
LEAF_NODE	1198:14	1198:14	11	)
FIELD	1198:15	1198:15	11	origdata
LEAF_NODE	1198:15	1198:15	12	origdata
LEAF_NODE	1198:23	1198:23	8	;
EXPR_STATEMENT	1199:4	1199:11	7	mb = data ;
EXPR	1199:4	1199:4	8	mb = data
ASSIGN	1199:4	1199:7	9	mb = data
LVAL	1199:4	1199:4	10	mb
FIELD	1199:4	1199:4	11	mb
LEAF_NODE	1199:4	1199:4	12	mb
ASSIGN_OP	1199:6	1199:6	10	=
LEAF_NODE	1199:6	1199:6	11	=
RVAL	1199:7	1199:7	10	data
FIELD	1199:7	1199:7	11	data
LEAF_NODE	1199:7	1199:7	12	data
LEAF_NODE	1199:11	1199:11	8	;
ITERATION	1200:4	1201:4	7	
KEYWORD	1200:4	1200:4	8	for
LEAF_NODE	1200:4	1200:4	9	for
LEAF_NODE	1200:8	1200:8	8	(
FOR_INIT	1200:9	1200:12	8	n = 0 ;
EXPR	1200:9	1200:9	9	n = 0
ASSIGN	1200:9	1200:11	10	n = 0
LVAL	1200:9	1200:9	11	n
FIELD	1200:9	1200:9	12	n
LEAF_NODE	1200:9	1200:9	13	n
ASSIGN_OP	1200:10	1200:10	11	=
LEAF_NODE	1200:10	1200:10	12	=
RVAL	1200:11	1200:11	11	0
FIELD	1200:11	1200:11	12	0
LEAF_NODE	1200:11	1200:11	13	0
LEAF_NODE	1200:12	1200:12	9	;
CONDITION	1200:14	1200:14	8	n < count
EXPR	1200:14	1200:16	9	n < count
FIELD	1200:14	1200:14	10	n
LEAF_NODE	1200:14	1200:14	11	n
REL_OPERATOR	1200:15	1200:15	10	<
LEAF_NODE	1200:15	1200:15	11	<
FIELD	1200:16	1200:16	10	count
LEAF_NODE	1200:16	1200:16	11	count
LEAF_NODE	1200:21	1200:21	8	;
FOR_EXPR	1200:23	1200:23	8	n ++
EXPR	1200:23	1200:23	9	n ++
FIELD	1200:23	1200:24	10	n ++
LEAF_NODE	1200:23	1200:23	11	n
LEAF_NODE	1200:24	1200:24	11	++
LEAF_NODE	1200:26	1200:26	8	)
STATEMENTS	1201:4	1208:4	8	
LEAF_NODE	1201:4	1201:4	9	{
STATEMENTS	1202:5	1207:5	9	
SELECTION	1202:5	1203:6	10	
KEYWORD	1202:5	1202:5	11	if
LEAF_NODE	1202:5	1202:5	12	if
LEAF_NODE	1202:8	1202:8	11	(
CONDITION	1202:9	1202:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1202:9	1202:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1202:9	1202:14	13	tif -> tif_flags
LEAF_NODE	1202:9	1202:9	14	tif
LEAF_NODE	1202:12	1202:12	14	->
LEAF_NODE	1202:14	1202:14	14	tif_flags
LEAF_NODE	1202:23	1202:23	13	&
FIELD	1202:24	1202:24	13	TIFF_SWAB
LEAF_NODE	1202:24	1202:24	14	TIFF_SWAB
LEAF_NODE	1202:33	1202:33	11	)
STATEMENTS	1203:6	1203:6	11	
EXPR_STATEMENT	1203:6	1203:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	1203:6	1203:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	1203:6	1203:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	1203:6	1203:6	15	TIFFSwabShort
LEAF_NODE	1203:6	1203:6	16	TIFFSwabShort
LEAF_NODE	1203:19	1203:19	15	(
ARGUMENT	1203:20	1203:29	15	( uint16 * ) ma
LEAF_NODE	1203:20	1203:20	16	(
TYPE_NAME	1203:21	1203:21	16	uint16
LEAF_NODE	1203:21	1203:21	17	uint16
LEAF_NODE	1203:27	1203:27	16	*
LEAF_NODE	1203:28	1203:28	16	)
FIELD	1203:29	1203:29	16	ma
LEAF_NODE	1203:29	1203:29	17	ma
LEAF_NODE	1203:31	1203:31	15	)
LEAF_NODE	1203:32	1203:32	13	;
EXPR_STATEMENT	1204:5	1204:51	10	err = TIFFReadDirEntryCheckRangeSbyteSshort ( * ma ) ;
EXPR	1204:5	1204:5	11	err = TIFFReadDirEntryCheckRangeSbyteSshort ( * ma )
ASSIGN	1204:5	1204:9	12	err = TIFFReadDirEntryCheckRangeSbyteSshort ( * ma )
LVAL	1204:5	1204:5	13	err
FIELD	1204:5	1204:5	14	err
LEAF_NODE	1204:5	1204:5	15	err
ASSIGN_OP	1204:8	1204:8	13	=
LEAF_NODE	1204:8	1204:8	14	=
RVAL	1204:9	1204:9	13	TIFFReadDirEntryCheckRangeSbyteSshort ( * ma )
FUNCTION_CALL	1204:9	1204:50	14	TIFFReadDirEntryCheckRangeSbyteSshort ( * ma )
CALLEE	1204:9	1204:9	15	TIFFReadDirEntryCheckRangeSbyteSshort
LEAF_NODE	1204:9	1204:9	16	TIFFReadDirEntryCheckRangeSbyteSshort
LEAF_NODE	1204:46	1204:46	15	(
ARGUMENT	1204:47	1204:47	15	* ma
UNARY_EXPR	1204:47	1204:48	16	* ma
UNARY_OPERATOR	1204:47	1204:47	17	*
LEAF_NODE	1204:47	1204:47	18	*
FIELD	1204:48	1204:48	17	ma
LEAF_NODE	1204:48	1204:48	18	ma
LEAF_NODE	1204:50	1204:50	15	)
LEAF_NODE	1204:51	1204:51	11	;
SELECTION	1205:5	1206:6	10	
KEYWORD	1205:5	1205:5	11	if
LEAF_NODE	1205:5	1205:5	12	if
LEAF_NODE	1205:8	1205:8	11	(
CONDITION	1205:9	1205:9	11	err != TIFFReadDirEntryErrOk
EXPR	1205:9	1205:14	12	err != TIFFReadDirEntryErrOk
FIELD	1205:9	1205:9	13	err
LEAF_NODE	1205:9	1205:9	14	err
EQ_OPERATOR	1205:12	1205:12	13	!=
LEAF_NODE	1205:12	1205:12	14	!=
FIELD	1205:14	1205:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1205:14	1205:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1205:35	1205:35	11	)
STATEMENTS	1206:6	1206:6	11	
JUMP_STATEMENT	1206:6	1206:11	12	break DESTINATION ;
KEYWORD	1206:6	1206:6	13	break
LEAF_NODE	1206:6	1206:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1206:11	1206:11	13	;
EXPR_STATEMENT	1207:5	1207:24	10	* mb ++ = ( int8 ) ( * ma ++ ) ;
EXPR	1207:5	1207:5	11	* mb ++ = ( int8 ) ( * ma ++ )
ASSIGN	1207:5	1207:11	12	* mb ++ = ( int8 ) ( * ma ++ )
LVAL	1207:5	1207:5	13	* mb ++
UNARY_EXPR	1207:5	1207:6	14	* mb ++
UNARY_OPERATOR	1207:5	1207:5	15	*
LEAF_NODE	1207:5	1207:5	16	*
FIELD	1207:6	1207:8	15	mb ++
LEAF_NODE	1207:6	1207:6	16	mb
LEAF_NODE	1207:8	1207:8	16	++
ASSIGN_OP	1207:10	1207:10	13	=
LEAF_NODE	1207:10	1207:10	14	=
RVAL	1207:11	1207:23	13	( int8 ) ( * ma ++ )
LEAF_NODE	1207:11	1207:11	14	(
TYPE_NAME	1207:12	1207:12	14	int8
LEAF_NODE	1207:12	1207:12	15	int8
LEAF_NODE	1207:16	1207:16	14	)
LEAF_NODE	1207:17	1207:17	14	(
UNARY_EXPR	1207:18	1207:19	14	* ma ++
UNARY_OPERATOR	1207:18	1207:18	15	*
LEAF_NODE	1207:18	1207:18	16	*
FIELD	1207:19	1207:21	15	ma ++
LEAF_NODE	1207:19	1207:19	16	ma
LEAF_NODE	1207:21	1207:21	16	++
LEAF_NODE	1207:23	1207:23	14	)
LEAF_NODE	1207:24	1207:24	11	;
LEAF_NODE	1208:4	1208:4	9	}
LEAF_NODE	1209:3	1209:3	6	}
JUMP_STATEMENT	1210:3	1210:8	6	break DESTINATION ;
KEYWORD	1210:3	1210:3	7	break
LEAF_NODE	1210:3	1210:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1210:8	1210:8	7	;
LABEL	1211:2	1211:16	6	case TIFF_LONG :
LEAF_NODE	1211:2	1211:2	7	case
LEAF_NODE	1211:7	1211:7	7	TIFF_LONG
LEAF_NODE	1211:16	1211:16	7	:
LEAF_NODE	1212:3	1212:3	6	{
STATEMENTS	1213:4	1218:4	6	
SIMPLE_DECL	1213:4	1213:14	7	uint32 * ma ;
VAR_DECL	1213:4	1213:12	8	uint32 * ma
TYPE	1213:4	1213:10	9	uint32 *
TYPE_NAME	1213:4	1213:4	10	uint32
LEAF_NODE	1213:4	1213:4	11	uint32
POINTER	1213:10	1213:10	10	*
LEAF_NODE	1213:10	1213:10	11	*
NAME	1213:12	1213:12	9	ma
LEAF_NODE	1213:12	1213:12	10	ma
LEAF_NODE	1213:14	1213:14	8	;
SIMPLE_DECL	1214:4	1214:12	7	int8 * mb ;
VAR_DECL	1214:4	1214:10	8	int8 * mb
TYPE	1214:4	1214:8	9	int8 *
TYPE_NAME	1214:4	1214:4	10	int8
LEAF_NODE	1214:4	1214:4	11	int8
POINTER	1214:8	1214:8	10	*
LEAF_NODE	1214:8	1214:8	11	*
NAME	1214:10	1214:10	9	mb
LEAF_NODE	1214:10	1214:10	10	mb
LEAF_NODE	1214:12	1214:12	8	;
SIMPLE_DECL	1215:4	1215:12	7	uint32 n ;
VAR_DECL	1215:4	1215:11	8	uint32 n
TYPE	1215:4	1215:4	9	uint32
TYPE_NAME	1215:4	1215:4	10	uint32
LEAF_NODE	1215:4	1215:4	11	uint32
NAME	1215:11	1215:11	9	n
LEAF_NODE	1215:11	1215:11	10	n
LEAF_NODE	1215:12	1215:12	8	;
EXPR_STATEMENT	1216:4	1216:24	7	ma = ( uint32 * ) origdata ;
EXPR	1216:4	1216:4	8	ma = ( uint32 * ) origdata
ASSIGN	1216:4	1216:7	9	ma = ( uint32 * ) origdata
LVAL	1216:4	1216:4	10	ma
FIELD	1216:4	1216:4	11	ma
LEAF_NODE	1216:4	1216:4	12	ma
ASSIGN_OP	1216:6	1216:6	10	=
LEAF_NODE	1216:6	1216:6	11	=
RVAL	1216:7	1216:16	10	( uint32 * ) origdata
LEAF_NODE	1216:7	1216:7	11	(
TYPE_NAME	1216:8	1216:8	11	uint32
LEAF_NODE	1216:8	1216:8	12	uint32
LEAF_NODE	1216:14	1216:14	11	*
LEAF_NODE	1216:15	1216:15	11	)
FIELD	1216:16	1216:16	11	origdata
LEAF_NODE	1216:16	1216:16	12	origdata
LEAF_NODE	1216:24	1216:24	8	;
EXPR_STATEMENT	1217:4	1217:11	7	mb = data ;
EXPR	1217:4	1217:4	8	mb = data
ASSIGN	1217:4	1217:7	9	mb = data
LVAL	1217:4	1217:4	10	mb
FIELD	1217:4	1217:4	11	mb
LEAF_NODE	1217:4	1217:4	12	mb
ASSIGN_OP	1217:6	1217:6	10	=
LEAF_NODE	1217:6	1217:6	11	=
RVAL	1217:7	1217:7	10	data
FIELD	1217:7	1217:7	11	data
LEAF_NODE	1217:7	1217:7	12	data
LEAF_NODE	1217:11	1217:11	8	;
ITERATION	1218:4	1219:4	7	
KEYWORD	1218:4	1218:4	8	for
LEAF_NODE	1218:4	1218:4	9	for
LEAF_NODE	1218:8	1218:8	8	(
FOR_INIT	1218:9	1218:12	8	n = 0 ;
EXPR	1218:9	1218:9	9	n = 0
ASSIGN	1218:9	1218:11	10	n = 0
LVAL	1218:9	1218:9	11	n
FIELD	1218:9	1218:9	12	n
LEAF_NODE	1218:9	1218:9	13	n
ASSIGN_OP	1218:10	1218:10	11	=
LEAF_NODE	1218:10	1218:10	12	=
RVAL	1218:11	1218:11	11	0
FIELD	1218:11	1218:11	12	0
LEAF_NODE	1218:11	1218:11	13	0
LEAF_NODE	1218:12	1218:12	9	;
CONDITION	1218:14	1218:14	8	n < count
EXPR	1218:14	1218:16	9	n < count
FIELD	1218:14	1218:14	10	n
LEAF_NODE	1218:14	1218:14	11	n
REL_OPERATOR	1218:15	1218:15	10	<
LEAF_NODE	1218:15	1218:15	11	<
FIELD	1218:16	1218:16	10	count
LEAF_NODE	1218:16	1218:16	11	count
LEAF_NODE	1218:21	1218:21	8	;
FOR_EXPR	1218:23	1218:23	8	n ++
EXPR	1218:23	1218:23	9	n ++
FIELD	1218:23	1218:24	10	n ++
LEAF_NODE	1218:23	1218:23	11	n
LEAF_NODE	1218:24	1218:24	11	++
LEAF_NODE	1218:26	1218:26	8	)
STATEMENTS	1219:4	1226:4	8	
LEAF_NODE	1219:4	1219:4	9	{
STATEMENTS	1220:5	1225:5	9	
SELECTION	1220:5	1221:6	10	
KEYWORD	1220:5	1220:5	11	if
LEAF_NODE	1220:5	1220:5	12	if
LEAF_NODE	1220:8	1220:8	11	(
CONDITION	1220:9	1220:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1220:9	1220:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1220:9	1220:14	13	tif -> tif_flags
LEAF_NODE	1220:9	1220:9	14	tif
LEAF_NODE	1220:12	1220:12	14	->
LEAF_NODE	1220:14	1220:14	14	tif_flags
LEAF_NODE	1220:23	1220:23	13	&
FIELD	1220:24	1220:24	13	TIFF_SWAB
LEAF_NODE	1220:24	1220:24	14	TIFF_SWAB
LEAF_NODE	1220:33	1220:33	11	)
STATEMENTS	1221:6	1221:6	11	
EXPR_STATEMENT	1221:6	1221:22	12	TIFFSwabLong ( ma ) ;
EXPR	1221:6	1221:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	1221:6	1221:21	14	TIFFSwabLong ( ma )
CALLEE	1221:6	1221:6	15	TIFFSwabLong
LEAF_NODE	1221:6	1221:6	16	TIFFSwabLong
LEAF_NODE	1221:18	1221:18	15	(
ARGUMENT	1221:19	1221:19	15	ma
FIELD	1221:19	1221:19	16	ma
LEAF_NODE	1221:19	1221:19	17	ma
LEAF_NODE	1221:21	1221:21	15	)
LEAF_NODE	1221:22	1221:22	13	;
EXPR_STATEMENT	1222:5	1222:49	10	err = TIFFReadDirEntryCheckRangeSbyteLong ( * ma ) ;
EXPR	1222:5	1222:5	11	err = TIFFReadDirEntryCheckRangeSbyteLong ( * ma )
ASSIGN	1222:5	1222:9	12	err = TIFFReadDirEntryCheckRangeSbyteLong ( * ma )
LVAL	1222:5	1222:5	13	err
FIELD	1222:5	1222:5	14	err
LEAF_NODE	1222:5	1222:5	15	err
ASSIGN_OP	1222:8	1222:8	13	=
LEAF_NODE	1222:8	1222:8	14	=
RVAL	1222:9	1222:9	13	TIFFReadDirEntryCheckRangeSbyteLong ( * ma )
FUNCTION_CALL	1222:9	1222:48	14	TIFFReadDirEntryCheckRangeSbyteLong ( * ma )
CALLEE	1222:9	1222:9	15	TIFFReadDirEntryCheckRangeSbyteLong
LEAF_NODE	1222:9	1222:9	16	TIFFReadDirEntryCheckRangeSbyteLong
LEAF_NODE	1222:44	1222:44	15	(
ARGUMENT	1222:45	1222:45	15	* ma
UNARY_EXPR	1222:45	1222:46	16	* ma
UNARY_OPERATOR	1222:45	1222:45	17	*
LEAF_NODE	1222:45	1222:45	18	*
FIELD	1222:46	1222:46	17	ma
LEAF_NODE	1222:46	1222:46	18	ma
LEAF_NODE	1222:48	1222:48	15	)
LEAF_NODE	1222:49	1222:49	11	;
SELECTION	1223:5	1224:6	10	
KEYWORD	1223:5	1223:5	11	if
LEAF_NODE	1223:5	1223:5	12	if
LEAF_NODE	1223:8	1223:8	11	(
CONDITION	1223:9	1223:9	11	err != TIFFReadDirEntryErrOk
EXPR	1223:9	1223:14	12	err != TIFFReadDirEntryErrOk
FIELD	1223:9	1223:9	13	err
LEAF_NODE	1223:9	1223:9	14	err
EQ_OPERATOR	1223:12	1223:12	13	!=
LEAF_NODE	1223:12	1223:12	14	!=
FIELD	1223:14	1223:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1223:14	1223:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1223:35	1223:35	11	)
STATEMENTS	1224:6	1224:6	11	
JUMP_STATEMENT	1224:6	1224:11	12	break DESTINATION ;
KEYWORD	1224:6	1224:6	13	break
LEAF_NODE	1224:6	1224:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1224:11	1224:11	13	;
EXPR_STATEMENT	1225:5	1225:24	10	* mb ++ = ( int8 ) ( * ma ++ ) ;
EXPR	1225:5	1225:5	11	* mb ++ = ( int8 ) ( * ma ++ )
ASSIGN	1225:5	1225:11	12	* mb ++ = ( int8 ) ( * ma ++ )
LVAL	1225:5	1225:5	13	* mb ++
UNARY_EXPR	1225:5	1225:6	14	* mb ++
UNARY_OPERATOR	1225:5	1225:5	15	*
LEAF_NODE	1225:5	1225:5	16	*
FIELD	1225:6	1225:8	15	mb ++
LEAF_NODE	1225:6	1225:6	16	mb
LEAF_NODE	1225:8	1225:8	16	++
ASSIGN_OP	1225:10	1225:10	13	=
LEAF_NODE	1225:10	1225:10	14	=
RVAL	1225:11	1225:23	13	( int8 ) ( * ma ++ )
LEAF_NODE	1225:11	1225:11	14	(
TYPE_NAME	1225:12	1225:12	14	int8
LEAF_NODE	1225:12	1225:12	15	int8
LEAF_NODE	1225:16	1225:16	14	)
LEAF_NODE	1225:17	1225:17	14	(
UNARY_EXPR	1225:18	1225:19	14	* ma ++
UNARY_OPERATOR	1225:18	1225:18	15	*
LEAF_NODE	1225:18	1225:18	16	*
FIELD	1225:19	1225:21	15	ma ++
LEAF_NODE	1225:19	1225:19	16	ma
LEAF_NODE	1225:21	1225:21	16	++
LEAF_NODE	1225:23	1225:23	14	)
LEAF_NODE	1225:24	1225:24	11	;
LEAF_NODE	1226:4	1226:4	9	}
LEAF_NODE	1227:3	1227:3	6	}
JUMP_STATEMENT	1228:3	1228:8	6	break DESTINATION ;
KEYWORD	1228:3	1228:3	7	break
LEAF_NODE	1228:3	1228:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1228:8	1228:8	7	;
LABEL	1229:2	1229:17	6	case TIFF_SLONG :
LEAF_NODE	1229:2	1229:2	7	case
LEAF_NODE	1229:7	1229:7	7	TIFF_SLONG
LEAF_NODE	1229:17	1229:17	7	:
LEAF_NODE	1230:3	1230:3	6	{
STATEMENTS	1231:4	1236:4	6	
SIMPLE_DECL	1231:4	1231:13	7	int32 * ma ;
VAR_DECL	1231:4	1231:11	8	int32 * ma
TYPE	1231:4	1231:9	9	int32 *
TYPE_NAME	1231:4	1231:4	10	int32
LEAF_NODE	1231:4	1231:4	11	int32
POINTER	1231:9	1231:9	10	*
LEAF_NODE	1231:9	1231:9	11	*
NAME	1231:11	1231:11	9	ma
LEAF_NODE	1231:11	1231:11	10	ma
LEAF_NODE	1231:13	1231:13	8	;
SIMPLE_DECL	1232:4	1232:12	7	int8 * mb ;
VAR_DECL	1232:4	1232:10	8	int8 * mb
TYPE	1232:4	1232:8	9	int8 *
TYPE_NAME	1232:4	1232:4	10	int8
LEAF_NODE	1232:4	1232:4	11	int8
POINTER	1232:8	1232:8	10	*
LEAF_NODE	1232:8	1232:8	11	*
NAME	1232:10	1232:10	9	mb
LEAF_NODE	1232:10	1232:10	10	mb
LEAF_NODE	1232:12	1232:12	8	;
SIMPLE_DECL	1233:4	1233:12	7	uint32 n ;
VAR_DECL	1233:4	1233:11	8	uint32 n
TYPE	1233:4	1233:4	9	uint32
TYPE_NAME	1233:4	1233:4	10	uint32
LEAF_NODE	1233:4	1233:4	11	uint32
NAME	1233:11	1233:11	9	n
LEAF_NODE	1233:11	1233:11	10	n
LEAF_NODE	1233:12	1233:12	8	;
EXPR_STATEMENT	1234:4	1234:23	7	ma = ( int32 * ) origdata ;
EXPR	1234:4	1234:4	8	ma = ( int32 * ) origdata
ASSIGN	1234:4	1234:7	9	ma = ( int32 * ) origdata
LVAL	1234:4	1234:4	10	ma
FIELD	1234:4	1234:4	11	ma
LEAF_NODE	1234:4	1234:4	12	ma
ASSIGN_OP	1234:6	1234:6	10	=
LEAF_NODE	1234:6	1234:6	11	=
RVAL	1234:7	1234:15	10	( int32 * ) origdata
LEAF_NODE	1234:7	1234:7	11	(
TYPE_NAME	1234:8	1234:8	11	int32
LEAF_NODE	1234:8	1234:8	12	int32
LEAF_NODE	1234:13	1234:13	11	*
LEAF_NODE	1234:14	1234:14	11	)
FIELD	1234:15	1234:15	11	origdata
LEAF_NODE	1234:15	1234:15	12	origdata
LEAF_NODE	1234:23	1234:23	8	;
EXPR_STATEMENT	1235:4	1235:11	7	mb = data ;
EXPR	1235:4	1235:4	8	mb = data
ASSIGN	1235:4	1235:7	9	mb = data
LVAL	1235:4	1235:4	10	mb
FIELD	1235:4	1235:4	11	mb
LEAF_NODE	1235:4	1235:4	12	mb
ASSIGN_OP	1235:6	1235:6	10	=
LEAF_NODE	1235:6	1235:6	11	=
RVAL	1235:7	1235:7	10	data
FIELD	1235:7	1235:7	11	data
LEAF_NODE	1235:7	1235:7	12	data
LEAF_NODE	1235:11	1235:11	8	;
ITERATION	1236:4	1237:4	7	
KEYWORD	1236:4	1236:4	8	for
LEAF_NODE	1236:4	1236:4	9	for
LEAF_NODE	1236:8	1236:8	8	(
FOR_INIT	1236:9	1236:12	8	n = 0 ;
EXPR	1236:9	1236:9	9	n = 0
ASSIGN	1236:9	1236:11	10	n = 0
LVAL	1236:9	1236:9	11	n
FIELD	1236:9	1236:9	12	n
LEAF_NODE	1236:9	1236:9	13	n
ASSIGN_OP	1236:10	1236:10	11	=
LEAF_NODE	1236:10	1236:10	12	=
RVAL	1236:11	1236:11	11	0
FIELD	1236:11	1236:11	12	0
LEAF_NODE	1236:11	1236:11	13	0
LEAF_NODE	1236:12	1236:12	9	;
CONDITION	1236:14	1236:14	8	n < count
EXPR	1236:14	1236:16	9	n < count
FIELD	1236:14	1236:14	10	n
LEAF_NODE	1236:14	1236:14	11	n
REL_OPERATOR	1236:15	1236:15	10	<
LEAF_NODE	1236:15	1236:15	11	<
FIELD	1236:16	1236:16	10	count
LEAF_NODE	1236:16	1236:16	11	count
LEAF_NODE	1236:21	1236:21	8	;
FOR_EXPR	1236:23	1236:23	8	n ++
EXPR	1236:23	1236:23	9	n ++
FIELD	1236:23	1236:24	10	n ++
LEAF_NODE	1236:23	1236:23	11	n
LEAF_NODE	1236:24	1236:24	11	++
LEAF_NODE	1236:26	1236:26	8	)
STATEMENTS	1237:4	1244:4	8	
LEAF_NODE	1237:4	1237:4	9	{
STATEMENTS	1238:5	1243:5	9	
SELECTION	1238:5	1239:6	10	
KEYWORD	1238:5	1238:5	11	if
LEAF_NODE	1238:5	1238:5	12	if
LEAF_NODE	1238:8	1238:8	11	(
CONDITION	1238:9	1238:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1238:9	1238:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1238:9	1238:14	13	tif -> tif_flags
LEAF_NODE	1238:9	1238:9	14	tif
LEAF_NODE	1238:12	1238:12	14	->
LEAF_NODE	1238:14	1238:14	14	tif_flags
LEAF_NODE	1238:23	1238:23	13	&
FIELD	1238:24	1238:24	13	TIFF_SWAB
LEAF_NODE	1238:24	1238:24	14	TIFF_SWAB
LEAF_NODE	1238:33	1238:33	11	)
STATEMENTS	1239:6	1239:6	11	
EXPR_STATEMENT	1239:6	1239:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	1239:6	1239:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	1239:6	1239:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	1239:6	1239:6	15	TIFFSwabLong
LEAF_NODE	1239:6	1239:6	16	TIFFSwabLong
LEAF_NODE	1239:18	1239:18	15	(
ARGUMENT	1239:19	1239:28	15	( uint32 * ) ma
LEAF_NODE	1239:19	1239:19	16	(
TYPE_NAME	1239:20	1239:20	16	uint32
LEAF_NODE	1239:20	1239:20	17	uint32
LEAF_NODE	1239:26	1239:26	16	*
LEAF_NODE	1239:27	1239:27	16	)
FIELD	1239:28	1239:28	16	ma
LEAF_NODE	1239:28	1239:28	17	ma
LEAF_NODE	1239:30	1239:30	15	)
LEAF_NODE	1239:31	1239:31	13	;
EXPR_STATEMENT	1240:5	1240:50	10	err = TIFFReadDirEntryCheckRangeSbyteSlong ( * ma ) ;
EXPR	1240:5	1240:5	11	err = TIFFReadDirEntryCheckRangeSbyteSlong ( * ma )
ASSIGN	1240:5	1240:9	12	err = TIFFReadDirEntryCheckRangeSbyteSlong ( * ma )
LVAL	1240:5	1240:5	13	err
FIELD	1240:5	1240:5	14	err
LEAF_NODE	1240:5	1240:5	15	err
ASSIGN_OP	1240:8	1240:8	13	=
LEAF_NODE	1240:8	1240:8	14	=
RVAL	1240:9	1240:9	13	TIFFReadDirEntryCheckRangeSbyteSlong ( * ma )
FUNCTION_CALL	1240:9	1240:49	14	TIFFReadDirEntryCheckRangeSbyteSlong ( * ma )
CALLEE	1240:9	1240:9	15	TIFFReadDirEntryCheckRangeSbyteSlong
LEAF_NODE	1240:9	1240:9	16	TIFFReadDirEntryCheckRangeSbyteSlong
LEAF_NODE	1240:45	1240:45	15	(
ARGUMENT	1240:46	1240:46	15	* ma
UNARY_EXPR	1240:46	1240:47	16	* ma
UNARY_OPERATOR	1240:46	1240:46	17	*
LEAF_NODE	1240:46	1240:46	18	*
FIELD	1240:47	1240:47	17	ma
LEAF_NODE	1240:47	1240:47	18	ma
LEAF_NODE	1240:49	1240:49	15	)
LEAF_NODE	1240:50	1240:50	11	;
SELECTION	1241:5	1242:6	10	
KEYWORD	1241:5	1241:5	11	if
LEAF_NODE	1241:5	1241:5	12	if
LEAF_NODE	1241:8	1241:8	11	(
CONDITION	1241:9	1241:9	11	err != TIFFReadDirEntryErrOk
EXPR	1241:9	1241:14	12	err != TIFFReadDirEntryErrOk
FIELD	1241:9	1241:9	13	err
LEAF_NODE	1241:9	1241:9	14	err
EQ_OPERATOR	1241:12	1241:12	13	!=
LEAF_NODE	1241:12	1241:12	14	!=
FIELD	1241:14	1241:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1241:14	1241:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1241:35	1241:35	11	)
STATEMENTS	1242:6	1242:6	11	
JUMP_STATEMENT	1242:6	1242:11	12	break DESTINATION ;
KEYWORD	1242:6	1242:6	13	break
LEAF_NODE	1242:6	1242:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1242:11	1242:11	13	;
EXPR_STATEMENT	1243:5	1243:24	10	* mb ++ = ( int8 ) ( * ma ++ ) ;
EXPR	1243:5	1243:5	11	* mb ++ = ( int8 ) ( * ma ++ )
ASSIGN	1243:5	1243:11	12	* mb ++ = ( int8 ) ( * ma ++ )
LVAL	1243:5	1243:5	13	* mb ++
UNARY_EXPR	1243:5	1243:6	14	* mb ++
UNARY_OPERATOR	1243:5	1243:5	15	*
LEAF_NODE	1243:5	1243:5	16	*
FIELD	1243:6	1243:8	15	mb ++
LEAF_NODE	1243:6	1243:6	16	mb
LEAF_NODE	1243:8	1243:8	16	++
ASSIGN_OP	1243:10	1243:10	13	=
LEAF_NODE	1243:10	1243:10	14	=
RVAL	1243:11	1243:23	13	( int8 ) ( * ma ++ )
LEAF_NODE	1243:11	1243:11	14	(
TYPE_NAME	1243:12	1243:12	14	int8
LEAF_NODE	1243:12	1243:12	15	int8
LEAF_NODE	1243:16	1243:16	14	)
LEAF_NODE	1243:17	1243:17	14	(
UNARY_EXPR	1243:18	1243:19	14	* ma ++
UNARY_OPERATOR	1243:18	1243:18	15	*
LEAF_NODE	1243:18	1243:18	16	*
FIELD	1243:19	1243:21	15	ma ++
LEAF_NODE	1243:19	1243:19	16	ma
LEAF_NODE	1243:21	1243:21	16	++
LEAF_NODE	1243:23	1243:23	14	)
LEAF_NODE	1243:24	1243:24	11	;
LEAF_NODE	1244:4	1244:4	9	}
LEAF_NODE	1245:3	1245:3	6	}
JUMP_STATEMENT	1246:3	1246:8	6	break DESTINATION ;
KEYWORD	1246:3	1246:3	7	break
LEAF_NODE	1246:3	1246:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1246:8	1246:8	7	;
LABEL	1247:2	1247:17	6	case TIFF_LONG8 :
LEAF_NODE	1247:2	1247:2	7	case
LEAF_NODE	1247:7	1247:7	7	TIFF_LONG8
LEAF_NODE	1247:17	1247:17	7	:
LEAF_NODE	1248:3	1248:3	6	{
STATEMENTS	1249:4	1254:4	6	
SIMPLE_DECL	1249:4	1249:14	7	uint64 * ma ;
VAR_DECL	1249:4	1249:12	8	uint64 * ma
TYPE	1249:4	1249:10	9	uint64 *
TYPE_NAME	1249:4	1249:4	10	uint64
LEAF_NODE	1249:4	1249:4	11	uint64
POINTER	1249:10	1249:10	10	*
LEAF_NODE	1249:10	1249:10	11	*
NAME	1249:12	1249:12	9	ma
LEAF_NODE	1249:12	1249:12	10	ma
LEAF_NODE	1249:14	1249:14	8	;
SIMPLE_DECL	1250:4	1250:12	7	int8 * mb ;
VAR_DECL	1250:4	1250:10	8	int8 * mb
TYPE	1250:4	1250:8	9	int8 *
TYPE_NAME	1250:4	1250:4	10	int8
LEAF_NODE	1250:4	1250:4	11	int8
POINTER	1250:8	1250:8	10	*
LEAF_NODE	1250:8	1250:8	11	*
NAME	1250:10	1250:10	9	mb
LEAF_NODE	1250:10	1250:10	10	mb
LEAF_NODE	1250:12	1250:12	8	;
SIMPLE_DECL	1251:4	1251:12	7	uint32 n ;
VAR_DECL	1251:4	1251:11	8	uint32 n
TYPE	1251:4	1251:4	9	uint32
TYPE_NAME	1251:4	1251:4	10	uint32
LEAF_NODE	1251:4	1251:4	11	uint32
NAME	1251:11	1251:11	9	n
LEAF_NODE	1251:11	1251:11	10	n
LEAF_NODE	1251:12	1251:12	8	;
EXPR_STATEMENT	1252:4	1252:24	7	ma = ( uint64 * ) origdata ;
EXPR	1252:4	1252:4	8	ma = ( uint64 * ) origdata
ASSIGN	1252:4	1252:7	9	ma = ( uint64 * ) origdata
LVAL	1252:4	1252:4	10	ma
FIELD	1252:4	1252:4	11	ma
LEAF_NODE	1252:4	1252:4	12	ma
ASSIGN_OP	1252:6	1252:6	10	=
LEAF_NODE	1252:6	1252:6	11	=
RVAL	1252:7	1252:16	10	( uint64 * ) origdata
LEAF_NODE	1252:7	1252:7	11	(
TYPE_NAME	1252:8	1252:8	11	uint64
LEAF_NODE	1252:8	1252:8	12	uint64
LEAF_NODE	1252:14	1252:14	11	*
LEAF_NODE	1252:15	1252:15	11	)
FIELD	1252:16	1252:16	11	origdata
LEAF_NODE	1252:16	1252:16	12	origdata
LEAF_NODE	1252:24	1252:24	8	;
EXPR_STATEMENT	1253:4	1253:11	7	mb = data ;
EXPR	1253:4	1253:4	8	mb = data
ASSIGN	1253:4	1253:7	9	mb = data
LVAL	1253:4	1253:4	10	mb
FIELD	1253:4	1253:4	11	mb
LEAF_NODE	1253:4	1253:4	12	mb
ASSIGN_OP	1253:6	1253:6	10	=
LEAF_NODE	1253:6	1253:6	11	=
RVAL	1253:7	1253:7	10	data
FIELD	1253:7	1253:7	11	data
LEAF_NODE	1253:7	1253:7	12	data
LEAF_NODE	1253:11	1253:11	8	;
ITERATION	1254:4	1255:4	7	
KEYWORD	1254:4	1254:4	8	for
LEAF_NODE	1254:4	1254:4	9	for
LEAF_NODE	1254:8	1254:8	8	(
FOR_INIT	1254:9	1254:12	8	n = 0 ;
EXPR	1254:9	1254:9	9	n = 0
ASSIGN	1254:9	1254:11	10	n = 0
LVAL	1254:9	1254:9	11	n
FIELD	1254:9	1254:9	12	n
LEAF_NODE	1254:9	1254:9	13	n
ASSIGN_OP	1254:10	1254:10	11	=
LEAF_NODE	1254:10	1254:10	12	=
RVAL	1254:11	1254:11	11	0
FIELD	1254:11	1254:11	12	0
LEAF_NODE	1254:11	1254:11	13	0
LEAF_NODE	1254:12	1254:12	9	;
CONDITION	1254:14	1254:14	8	n < count
EXPR	1254:14	1254:16	9	n < count
FIELD	1254:14	1254:14	10	n
LEAF_NODE	1254:14	1254:14	11	n
REL_OPERATOR	1254:15	1254:15	10	<
LEAF_NODE	1254:15	1254:15	11	<
FIELD	1254:16	1254:16	10	count
LEAF_NODE	1254:16	1254:16	11	count
LEAF_NODE	1254:21	1254:21	8	;
FOR_EXPR	1254:23	1254:23	8	n ++
EXPR	1254:23	1254:23	9	n ++
FIELD	1254:23	1254:24	10	n ++
LEAF_NODE	1254:23	1254:23	11	n
LEAF_NODE	1254:24	1254:24	11	++
LEAF_NODE	1254:26	1254:26	8	)
STATEMENTS	1255:4	1262:4	8	
LEAF_NODE	1255:4	1255:4	9	{
STATEMENTS	1256:5	1261:5	9	
SELECTION	1256:5	1257:6	10	
KEYWORD	1256:5	1256:5	11	if
LEAF_NODE	1256:5	1256:5	12	if
LEAF_NODE	1256:8	1256:8	11	(
CONDITION	1256:9	1256:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1256:9	1256:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1256:9	1256:14	13	tif -> tif_flags
LEAF_NODE	1256:9	1256:9	14	tif
LEAF_NODE	1256:12	1256:12	14	->
LEAF_NODE	1256:14	1256:14	14	tif_flags
LEAF_NODE	1256:23	1256:23	13	&
FIELD	1256:24	1256:24	13	TIFF_SWAB
LEAF_NODE	1256:24	1256:24	14	TIFF_SWAB
LEAF_NODE	1256:33	1256:33	11	)
STATEMENTS	1257:6	1257:6	11	
EXPR_STATEMENT	1257:6	1257:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	1257:6	1257:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	1257:6	1257:22	14	TIFFSwabLong8 ( ma )
CALLEE	1257:6	1257:6	15	TIFFSwabLong8
LEAF_NODE	1257:6	1257:6	16	TIFFSwabLong8
LEAF_NODE	1257:19	1257:19	15	(
ARGUMENT	1257:20	1257:20	15	ma
FIELD	1257:20	1257:20	16	ma
LEAF_NODE	1257:20	1257:20	17	ma
LEAF_NODE	1257:22	1257:22	15	)
LEAF_NODE	1257:23	1257:23	13	;
EXPR_STATEMENT	1258:5	1258:50	10	err = TIFFReadDirEntryCheckRangeSbyteLong8 ( * ma ) ;
EXPR	1258:5	1258:5	11	err = TIFFReadDirEntryCheckRangeSbyteLong8 ( * ma )
ASSIGN	1258:5	1258:9	12	err = TIFFReadDirEntryCheckRangeSbyteLong8 ( * ma )
LVAL	1258:5	1258:5	13	err
FIELD	1258:5	1258:5	14	err
LEAF_NODE	1258:5	1258:5	15	err
ASSIGN_OP	1258:8	1258:8	13	=
LEAF_NODE	1258:8	1258:8	14	=
RVAL	1258:9	1258:9	13	TIFFReadDirEntryCheckRangeSbyteLong8 ( * ma )
FUNCTION_CALL	1258:9	1258:49	14	TIFFReadDirEntryCheckRangeSbyteLong8 ( * ma )
CALLEE	1258:9	1258:9	15	TIFFReadDirEntryCheckRangeSbyteLong8
LEAF_NODE	1258:9	1258:9	16	TIFFReadDirEntryCheckRangeSbyteLong8
LEAF_NODE	1258:45	1258:45	15	(
ARGUMENT	1258:46	1258:46	15	* ma
UNARY_EXPR	1258:46	1258:47	16	* ma
UNARY_OPERATOR	1258:46	1258:46	17	*
LEAF_NODE	1258:46	1258:46	18	*
FIELD	1258:47	1258:47	17	ma
LEAF_NODE	1258:47	1258:47	18	ma
LEAF_NODE	1258:49	1258:49	15	)
LEAF_NODE	1258:50	1258:50	11	;
SELECTION	1259:5	1260:6	10	
KEYWORD	1259:5	1259:5	11	if
LEAF_NODE	1259:5	1259:5	12	if
LEAF_NODE	1259:8	1259:8	11	(
CONDITION	1259:9	1259:9	11	err != TIFFReadDirEntryErrOk
EXPR	1259:9	1259:14	12	err != TIFFReadDirEntryErrOk
FIELD	1259:9	1259:9	13	err
LEAF_NODE	1259:9	1259:9	14	err
EQ_OPERATOR	1259:12	1259:12	13	!=
LEAF_NODE	1259:12	1259:12	14	!=
FIELD	1259:14	1259:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1259:14	1259:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1259:35	1259:35	11	)
STATEMENTS	1260:6	1260:6	11	
JUMP_STATEMENT	1260:6	1260:11	12	break DESTINATION ;
KEYWORD	1260:6	1260:6	13	break
LEAF_NODE	1260:6	1260:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1260:11	1260:11	13	;
EXPR_STATEMENT	1261:5	1261:24	10	* mb ++ = ( int8 ) ( * ma ++ ) ;
EXPR	1261:5	1261:5	11	* mb ++ = ( int8 ) ( * ma ++ )
ASSIGN	1261:5	1261:11	12	* mb ++ = ( int8 ) ( * ma ++ )
LVAL	1261:5	1261:5	13	* mb ++
UNARY_EXPR	1261:5	1261:6	14	* mb ++
UNARY_OPERATOR	1261:5	1261:5	15	*
LEAF_NODE	1261:5	1261:5	16	*
FIELD	1261:6	1261:8	15	mb ++
LEAF_NODE	1261:6	1261:6	16	mb
LEAF_NODE	1261:8	1261:8	16	++
ASSIGN_OP	1261:10	1261:10	13	=
LEAF_NODE	1261:10	1261:10	14	=
RVAL	1261:11	1261:23	13	( int8 ) ( * ma ++ )
LEAF_NODE	1261:11	1261:11	14	(
TYPE_NAME	1261:12	1261:12	14	int8
LEAF_NODE	1261:12	1261:12	15	int8
LEAF_NODE	1261:16	1261:16	14	)
LEAF_NODE	1261:17	1261:17	14	(
UNARY_EXPR	1261:18	1261:19	14	* ma ++
UNARY_OPERATOR	1261:18	1261:18	15	*
LEAF_NODE	1261:18	1261:18	16	*
FIELD	1261:19	1261:21	15	ma ++
LEAF_NODE	1261:19	1261:19	16	ma
LEAF_NODE	1261:21	1261:21	16	++
LEAF_NODE	1261:23	1261:23	14	)
LEAF_NODE	1261:24	1261:24	11	;
LEAF_NODE	1262:4	1262:4	9	}
LEAF_NODE	1263:3	1263:3	6	}
JUMP_STATEMENT	1264:3	1264:8	6	break DESTINATION ;
KEYWORD	1264:3	1264:3	7	break
LEAF_NODE	1264:3	1264:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1264:8	1264:8	7	;
LABEL	1265:2	1265:18	6	case TIFF_SLONG8 :
LEAF_NODE	1265:2	1265:2	7	case
LEAF_NODE	1265:7	1265:7	7	TIFF_SLONG8
LEAF_NODE	1265:18	1265:18	7	:
LEAF_NODE	1266:3	1266:3	6	{
STATEMENTS	1267:4	1272:4	6	
SIMPLE_DECL	1267:4	1267:13	7	int64 * ma ;
VAR_DECL	1267:4	1267:11	8	int64 * ma
TYPE	1267:4	1267:9	9	int64 *
TYPE_NAME	1267:4	1267:4	10	int64
LEAF_NODE	1267:4	1267:4	11	int64
POINTER	1267:9	1267:9	10	*
LEAF_NODE	1267:9	1267:9	11	*
NAME	1267:11	1267:11	9	ma
LEAF_NODE	1267:11	1267:11	10	ma
LEAF_NODE	1267:13	1267:13	8	;
SIMPLE_DECL	1268:4	1268:12	7	int8 * mb ;
VAR_DECL	1268:4	1268:10	8	int8 * mb
TYPE	1268:4	1268:8	9	int8 *
TYPE_NAME	1268:4	1268:4	10	int8
LEAF_NODE	1268:4	1268:4	11	int8
POINTER	1268:8	1268:8	10	*
LEAF_NODE	1268:8	1268:8	11	*
NAME	1268:10	1268:10	9	mb
LEAF_NODE	1268:10	1268:10	10	mb
LEAF_NODE	1268:12	1268:12	8	;
SIMPLE_DECL	1269:4	1269:12	7	uint32 n ;
VAR_DECL	1269:4	1269:11	8	uint32 n
TYPE	1269:4	1269:4	9	uint32
TYPE_NAME	1269:4	1269:4	10	uint32
LEAF_NODE	1269:4	1269:4	11	uint32
NAME	1269:11	1269:11	9	n
LEAF_NODE	1269:11	1269:11	10	n
LEAF_NODE	1269:12	1269:12	8	;
EXPR_STATEMENT	1270:4	1270:23	7	ma = ( int64 * ) origdata ;
EXPR	1270:4	1270:4	8	ma = ( int64 * ) origdata
ASSIGN	1270:4	1270:7	9	ma = ( int64 * ) origdata
LVAL	1270:4	1270:4	10	ma
FIELD	1270:4	1270:4	11	ma
LEAF_NODE	1270:4	1270:4	12	ma
ASSIGN_OP	1270:6	1270:6	10	=
LEAF_NODE	1270:6	1270:6	11	=
RVAL	1270:7	1270:15	10	( int64 * ) origdata
LEAF_NODE	1270:7	1270:7	11	(
TYPE_NAME	1270:8	1270:8	11	int64
LEAF_NODE	1270:8	1270:8	12	int64
LEAF_NODE	1270:13	1270:13	11	*
LEAF_NODE	1270:14	1270:14	11	)
FIELD	1270:15	1270:15	11	origdata
LEAF_NODE	1270:15	1270:15	12	origdata
LEAF_NODE	1270:23	1270:23	8	;
EXPR_STATEMENT	1271:4	1271:11	7	mb = data ;
EXPR	1271:4	1271:4	8	mb = data
ASSIGN	1271:4	1271:7	9	mb = data
LVAL	1271:4	1271:4	10	mb
FIELD	1271:4	1271:4	11	mb
LEAF_NODE	1271:4	1271:4	12	mb
ASSIGN_OP	1271:6	1271:6	10	=
LEAF_NODE	1271:6	1271:6	11	=
RVAL	1271:7	1271:7	10	data
FIELD	1271:7	1271:7	11	data
LEAF_NODE	1271:7	1271:7	12	data
LEAF_NODE	1271:11	1271:11	8	;
ITERATION	1272:4	1273:4	7	
KEYWORD	1272:4	1272:4	8	for
LEAF_NODE	1272:4	1272:4	9	for
LEAF_NODE	1272:8	1272:8	8	(
FOR_INIT	1272:9	1272:12	8	n = 0 ;
EXPR	1272:9	1272:9	9	n = 0
ASSIGN	1272:9	1272:11	10	n = 0
LVAL	1272:9	1272:9	11	n
FIELD	1272:9	1272:9	12	n
LEAF_NODE	1272:9	1272:9	13	n
ASSIGN_OP	1272:10	1272:10	11	=
LEAF_NODE	1272:10	1272:10	12	=
RVAL	1272:11	1272:11	11	0
FIELD	1272:11	1272:11	12	0
LEAF_NODE	1272:11	1272:11	13	0
LEAF_NODE	1272:12	1272:12	9	;
CONDITION	1272:14	1272:14	8	n < count
EXPR	1272:14	1272:16	9	n < count
FIELD	1272:14	1272:14	10	n
LEAF_NODE	1272:14	1272:14	11	n
REL_OPERATOR	1272:15	1272:15	10	<
LEAF_NODE	1272:15	1272:15	11	<
FIELD	1272:16	1272:16	10	count
LEAF_NODE	1272:16	1272:16	11	count
LEAF_NODE	1272:21	1272:21	8	;
FOR_EXPR	1272:23	1272:23	8	n ++
EXPR	1272:23	1272:23	9	n ++
FIELD	1272:23	1272:24	10	n ++
LEAF_NODE	1272:23	1272:23	11	n
LEAF_NODE	1272:24	1272:24	11	++
LEAF_NODE	1272:26	1272:26	8	)
STATEMENTS	1273:4	1280:4	8	
LEAF_NODE	1273:4	1273:4	9	{
STATEMENTS	1274:5	1279:5	9	
SELECTION	1274:5	1275:6	10	
KEYWORD	1274:5	1274:5	11	if
LEAF_NODE	1274:5	1274:5	12	if
LEAF_NODE	1274:8	1274:8	11	(
CONDITION	1274:9	1274:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1274:9	1274:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1274:9	1274:14	13	tif -> tif_flags
LEAF_NODE	1274:9	1274:9	14	tif
LEAF_NODE	1274:12	1274:12	14	->
LEAF_NODE	1274:14	1274:14	14	tif_flags
LEAF_NODE	1274:23	1274:23	13	&
FIELD	1274:24	1274:24	13	TIFF_SWAB
LEAF_NODE	1274:24	1274:24	14	TIFF_SWAB
LEAF_NODE	1274:33	1274:33	11	)
STATEMENTS	1275:6	1275:6	11	
EXPR_STATEMENT	1275:6	1275:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	1275:6	1275:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	1275:6	1275:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	1275:6	1275:6	15	TIFFSwabLong8
LEAF_NODE	1275:6	1275:6	16	TIFFSwabLong8
LEAF_NODE	1275:19	1275:19	15	(
ARGUMENT	1275:20	1275:29	15	( uint64 * ) ma
LEAF_NODE	1275:20	1275:20	16	(
TYPE_NAME	1275:21	1275:21	16	uint64
LEAF_NODE	1275:21	1275:21	17	uint64
LEAF_NODE	1275:27	1275:27	16	*
LEAF_NODE	1275:28	1275:28	16	)
FIELD	1275:29	1275:29	16	ma
LEAF_NODE	1275:29	1275:29	17	ma
LEAF_NODE	1275:31	1275:31	15	)
LEAF_NODE	1275:32	1275:32	13	;
EXPR_STATEMENT	1276:5	1276:51	10	err = TIFFReadDirEntryCheckRangeSbyteSlong8 ( * ma ) ;
EXPR	1276:5	1276:5	11	err = TIFFReadDirEntryCheckRangeSbyteSlong8 ( * ma )
ASSIGN	1276:5	1276:9	12	err = TIFFReadDirEntryCheckRangeSbyteSlong8 ( * ma )
LVAL	1276:5	1276:5	13	err
FIELD	1276:5	1276:5	14	err
LEAF_NODE	1276:5	1276:5	15	err
ASSIGN_OP	1276:8	1276:8	13	=
LEAF_NODE	1276:8	1276:8	14	=
RVAL	1276:9	1276:9	13	TIFFReadDirEntryCheckRangeSbyteSlong8 ( * ma )
FUNCTION_CALL	1276:9	1276:50	14	TIFFReadDirEntryCheckRangeSbyteSlong8 ( * ma )
CALLEE	1276:9	1276:9	15	TIFFReadDirEntryCheckRangeSbyteSlong8
LEAF_NODE	1276:9	1276:9	16	TIFFReadDirEntryCheckRangeSbyteSlong8
LEAF_NODE	1276:46	1276:46	15	(
ARGUMENT	1276:47	1276:47	15	* ma
UNARY_EXPR	1276:47	1276:48	16	* ma
UNARY_OPERATOR	1276:47	1276:47	17	*
LEAF_NODE	1276:47	1276:47	18	*
FIELD	1276:48	1276:48	17	ma
LEAF_NODE	1276:48	1276:48	18	ma
LEAF_NODE	1276:50	1276:50	15	)
LEAF_NODE	1276:51	1276:51	11	;
SELECTION	1277:5	1278:6	10	
KEYWORD	1277:5	1277:5	11	if
LEAF_NODE	1277:5	1277:5	12	if
LEAF_NODE	1277:8	1277:8	11	(
CONDITION	1277:9	1277:9	11	err != TIFFReadDirEntryErrOk
EXPR	1277:9	1277:14	12	err != TIFFReadDirEntryErrOk
FIELD	1277:9	1277:9	13	err
LEAF_NODE	1277:9	1277:9	14	err
EQ_OPERATOR	1277:12	1277:12	13	!=
LEAF_NODE	1277:12	1277:12	14	!=
FIELD	1277:14	1277:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1277:14	1277:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1277:35	1277:35	11	)
STATEMENTS	1278:6	1278:6	11	
JUMP_STATEMENT	1278:6	1278:11	12	break DESTINATION ;
KEYWORD	1278:6	1278:6	13	break
LEAF_NODE	1278:6	1278:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1278:11	1278:11	13	;
EXPR_STATEMENT	1279:5	1279:24	10	* mb ++ = ( int8 ) ( * ma ++ ) ;
EXPR	1279:5	1279:5	11	* mb ++ = ( int8 ) ( * ma ++ )
ASSIGN	1279:5	1279:11	12	* mb ++ = ( int8 ) ( * ma ++ )
LVAL	1279:5	1279:5	13	* mb ++
UNARY_EXPR	1279:5	1279:6	14	* mb ++
UNARY_OPERATOR	1279:5	1279:5	15	*
LEAF_NODE	1279:5	1279:5	16	*
FIELD	1279:6	1279:8	15	mb ++
LEAF_NODE	1279:6	1279:6	16	mb
LEAF_NODE	1279:8	1279:8	16	++
ASSIGN_OP	1279:10	1279:10	13	=
LEAF_NODE	1279:10	1279:10	14	=
RVAL	1279:11	1279:23	13	( int8 ) ( * ma ++ )
LEAF_NODE	1279:11	1279:11	14	(
TYPE_NAME	1279:12	1279:12	14	int8
LEAF_NODE	1279:12	1279:12	15	int8
LEAF_NODE	1279:16	1279:16	14	)
LEAF_NODE	1279:17	1279:17	14	(
UNARY_EXPR	1279:18	1279:19	14	* ma ++
UNARY_OPERATOR	1279:18	1279:18	15	*
LEAF_NODE	1279:18	1279:18	16	*
FIELD	1279:19	1279:21	15	ma ++
LEAF_NODE	1279:19	1279:19	16	ma
LEAF_NODE	1279:21	1279:21	16	++
LEAF_NODE	1279:23	1279:23	14	)
LEAF_NODE	1279:24	1279:24	11	;
LEAF_NODE	1280:4	1280:4	9	}
LEAF_NODE	1281:3	1281:3	6	}
JUMP_STATEMENT	1282:3	1282:8	6	break DESTINATION ;
KEYWORD	1282:3	1282:3	7	break
LEAF_NODE	1282:3	1282:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1282:8	1282:8	7	;
LEAF_NODE	1283:1	1283:1	5	}
EXPR_STATEMENT	1284:1	1284:20	3	_TIFFfree ( origdata ) ;
EXPR	1284:1	1284:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	1284:1	1284:19	5	_TIFFfree ( origdata )
CALLEE	1284:1	1284:1	6	_TIFFfree
LEAF_NODE	1284:1	1284:1	7	_TIFFfree
LEAF_NODE	1284:10	1284:10	6	(
ARGUMENT	1284:11	1284:11	6	origdata
FIELD	1284:11	1284:11	7	origdata
LEAF_NODE	1284:11	1284:11	8	origdata
LEAF_NODE	1284:19	1284:19	6	)
LEAF_NODE	1284:20	1284:20	4	;
SELECTION	1285:1	1286:1	3	
KEYWORD	1285:1	1285:1	4	if
LEAF_NODE	1285:1	1285:1	5	if
LEAF_NODE	1285:4	1285:4	4	(
CONDITION	1285:5	1285:5	4	err != TIFFReadDirEntryErrOk
EXPR	1285:5	1285:10	5	err != TIFFReadDirEntryErrOk
FIELD	1285:5	1285:5	6	err
LEAF_NODE	1285:5	1285:5	7	err
EQ_OPERATOR	1285:8	1285:8	6	!=
LEAF_NODE	1285:8	1285:8	7	!=
FIELD	1285:10	1285:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1285:10	1285:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	1285:31	1285:31	4	)
STATEMENTS	1286:1	1289:1	4	
LEAF_NODE	1286:1	1286:1	5	{
STATEMENTS	1287:2	1288:13	5	
EXPR_STATEMENT	1287:2	1287:17	6	_TIFFfree ( data ) ;
EXPR	1287:2	1287:2	7	_TIFFfree ( data )
FUNCTION_CALL	1287:2	1287:16	8	_TIFFfree ( data )
CALLEE	1287:2	1287:2	9	_TIFFfree
LEAF_NODE	1287:2	1287:2	10	_TIFFfree
LEAF_NODE	1287:11	1287:11	9	(
ARGUMENT	1287:12	1287:12	9	data
FIELD	1287:12	1287:12	10	data
LEAF_NODE	1287:12	1287:12	11	data
LEAF_NODE	1287:16	1287:16	9	)
LEAF_NODE	1287:17	1287:17	7	;
LEAF_NODE	1288:2	1288:2	6	return
LEAF_NODE	1288:8	1288:8	6	(
LEAF_NODE	1288:9	1288:9	6	err
LEAF_NODE	1288:12	1288:12	6	)
LEAF_NODE	1288:13	1288:13	6	;
LEAF_NODE	1289:1	1289:1	5	}
EXPR_STATEMENT	1290:1	1290:12	3	* value = data ;
EXPR	1290:1	1290:1	4	* value = data
ASSIGN	1290:1	1290:8	5	* value = data
LVAL	1290:1	1290:1	6	* value
UNARY_EXPR	1290:1	1290:2	7	* value
UNARY_OPERATOR	1290:1	1290:1	8	*
LEAF_NODE	1290:1	1290:1	9	*
FIELD	1290:2	1290:2	8	value
LEAF_NODE	1290:2	1290:2	9	value
ASSIGN_OP	1290:7	1290:7	6	=
LEAF_NODE	1290:7	1290:7	7	=
RVAL	1290:8	1290:8	6	data
FIELD	1290:8	1290:8	7	data
LEAF_NODE	1290:8	1290:8	8	data
LEAF_NODE	1290:12	1290:12	4	;
LEAF_NODE	1291:1	1291:1	3	return
LEAF_NODE	1291:7	1291:7	3	(
LEAF_NODE	1291:8	1291:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	1291:29	1291:29	3	)
LEAF_NODE	1291:30	1291:30	3	;
LEAF_NODE	1292:0	1292:0	2	}
FUNCTION_DEF	1294:0	1464:0	1	
RETURN_TYPE	1294:0	1294:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	1294:0	1294:0	3	static
TYPE_NAME	1294:7	1294:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	1294:7	1294:7	4	enum
LEAF_NODE	1294:12	1294:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	1294:32	1294:32	2	TIFFReadDirEntryShortArray
LEAF_NODE	1294:32	1294:32	3	TIFFReadDirEntryShortArray
PARAMETER_LIST	1294:58	1294:108	2	( TIFF * tif , TIFFDirEntry * direntry , uint16 * * value )
LEAF_NODE	1294:58	1294:58	3	(
PARAMETER_DECL	1294:59	1294:65	3	TIFF * tif
TYPE	1294:59	1294:63	4	TIFF *
TYPE_NAME	1294:59	1294:59	5	TIFF
LEAF_NODE	1294:59	1294:59	6	TIFF
POINTER	1294:63	1294:63	5	*
LEAF_NODE	1294:63	1294:63	6	*
NAME	1294:65	1294:65	4	tif
LEAF_NODE	1294:65	1294:65	5	tif
LEAF_NODE	1294:68	1294:68	3	,
PARAMETER_DECL	1294:70	1294:84	3	TIFFDirEntry * direntry
TYPE	1294:70	1294:82	4	TIFFDirEntry *
TYPE_NAME	1294:70	1294:70	5	TIFFDirEntry
LEAF_NODE	1294:70	1294:70	6	TIFFDirEntry
POINTER	1294:82	1294:82	5	*
LEAF_NODE	1294:82	1294:82	6	*
NAME	1294:84	1294:84	4	direntry
LEAF_NODE	1294:84	1294:84	5	direntry
LEAF_NODE	1294:92	1294:92	3	,
PARAMETER_DECL	1294:94	1294:103	3	uint16 * * value
TYPE	1294:94	1294:100	4	uint16 * *
TYPE_NAME	1294:94	1294:94	5	uint16
LEAF_NODE	1294:94	1294:94	6	uint16
POINTER	1294:100	1294:101	5	* *
LEAF_NODE	1294:100	1294:100	6	*
LEAF_NODE	1294:101	1294:101	6	*
NAME	1294:103	1294:103	4	value
LEAF_NODE	1294:103	1294:103	5	value
LEAF_NODE	1294:108	1294:108	3	)
LEAF_NODE	1295:0	1295:0	2	{
STATEMENTS	1296:1	1463:30	2	
SIMPLE_DECL	1296:1	1296:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	1296:1	1296:26	4	enum TIFFReadDirEntryErr err
TYPE	1296:1	1296:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	1296:1	1296:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	1296:1	1296:1	7	enum
LEAF_NODE	1296:6	1296:6	7	TIFFReadDirEntryErr
NAME	1296:26	1296:26	5	err
LEAF_NODE	1296:26	1296:26	6	err
LEAF_NODE	1296:29	1296:29	4	;
SIMPLE_DECL	1297:1	1297:13	3	uint32 count ;
VAR_DECL	1297:1	1297:8	4	uint32 count
TYPE	1297:1	1297:1	5	uint32
TYPE_NAME	1297:1	1297:1	6	uint32
LEAF_NODE	1297:1	1297:1	7	uint32
NAME	1297:8	1297:8	5	count
LEAF_NODE	1297:8	1297:8	6	count
LEAF_NODE	1297:13	1297:13	4	;
SIMPLE_DECL	1298:1	1298:15	3	void * origdata ;
VAR_DECL	1298:1	1298:7	4	void * origdata
TYPE	1298:1	1298:5	5	void *
TYPE_NAME	1298:1	1298:1	6	void
LEAF_NODE	1298:1	1298:1	7	void
POINTER	1298:5	1298:5	6	*
LEAF_NODE	1298:5	1298:5	7	*
NAME	1298:7	1298:7	5	origdata
LEAF_NODE	1298:7	1298:7	6	origdata
LEAF_NODE	1298:15	1298:15	4	;
SIMPLE_DECL	1299:1	1299:13	3	uint16 * data ;
VAR_DECL	1299:1	1299:9	4	uint16 * data
TYPE	1299:1	1299:7	5	uint16 *
TYPE_NAME	1299:1	1299:1	6	uint16
LEAF_NODE	1299:1	1299:1	7	uint16
POINTER	1299:7	1299:7	6	*
LEAF_NODE	1299:7	1299:7	7	*
NAME	1299:9	1299:9	5	data
LEAF_NODE	1299:9	1299:9	6	data
LEAF_NODE	1299:13	1299:13	4	;
SELECTION	1300:1	1301:1	3	
KEYWORD	1300:1	1300:1	4	switch
LEAF_NODE	1300:1	1300:1	5	switch
LEAF_NODE	1300:8	1300:8	4	(
CONDITION	1300:9	1300:9	4	direntry -> tdir_type
EXPR	1300:9	1300:9	5	direntry -> tdir_type
FIELD	1300:9	1300:19	6	direntry -> tdir_type
LEAF_NODE	1300:9	1300:9	7	direntry
LEAF_NODE	1300:17	1300:17	7	->
LEAF_NODE	1300:19	1300:19	7	tdir_type
LEAF_NODE	1300:28	1300:28	4	)
STATEMENTS	1301:1	1313:1	4	
LEAF_NODE	1301:1	1301:1	5	{
STATEMENTS	1302:2	1312:34	5	
LABEL	1302:2	1302:16	6	case TIFF_BYTE :
LEAF_NODE	1302:2	1302:2	7	case
LEAF_NODE	1302:7	1302:7	7	TIFF_BYTE
LEAF_NODE	1302:16	1302:16	7	:
LABEL	1303:2	1303:17	6	case TIFF_SBYTE :
LEAF_NODE	1303:2	1303:2	7	case
LEAF_NODE	1303:7	1303:7	7	TIFF_SBYTE
LEAF_NODE	1303:17	1303:17	7	:
LABEL	1304:2	1304:17	6	case TIFF_SHORT :
LEAF_NODE	1304:2	1304:2	7	case
LEAF_NODE	1304:7	1304:7	7	TIFF_SHORT
LEAF_NODE	1304:17	1304:17	7	:
LABEL	1305:2	1305:18	6	case TIFF_SSHORT :
LEAF_NODE	1305:2	1305:2	7	case
LEAF_NODE	1305:7	1305:7	7	TIFF_SSHORT
LEAF_NODE	1305:18	1305:18	7	:
LABEL	1306:2	1306:16	6	case TIFF_LONG :
LEAF_NODE	1306:2	1306:2	7	case
LEAF_NODE	1306:7	1306:7	7	TIFF_LONG
LEAF_NODE	1306:16	1306:16	7	:
LABEL	1307:2	1307:17	6	case TIFF_SLONG :
LEAF_NODE	1307:2	1307:2	7	case
LEAF_NODE	1307:7	1307:7	7	TIFF_SLONG
LEAF_NODE	1307:17	1307:17	7	:
LABEL	1308:2	1308:17	6	case TIFF_LONG8 :
LEAF_NODE	1308:2	1308:2	7	case
LEAF_NODE	1308:7	1308:7	7	TIFF_LONG8
LEAF_NODE	1308:17	1308:17	7	:
LABEL	1309:2	1309:18	6	case TIFF_SLONG8 :
LEAF_NODE	1309:2	1309:2	7	case
LEAF_NODE	1309:7	1309:7	7	TIFF_SLONG8
LEAF_NODE	1309:18	1309:18	7	:
JUMP_STATEMENT	1310:3	1310:8	6	break DESTINATION ;
KEYWORD	1310:3	1310:3	7	break
LEAF_NODE	1310:3	1310:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1310:8	1310:8	7	;
LABEL	1311:2	1311:9	6	default :
LEAF_NODE	1311:2	1311:2	7	default
LEAF_NODE	1311:9	1311:9	7	:
LEAF_NODE	1312:3	1312:3	6	return
LEAF_NODE	1312:9	1312:9	6	(
LEAF_NODE	1312:10	1312:10	6	TIFFReadDirEntryErrType
LEAF_NODE	1312:33	1312:33	6	)
LEAF_NODE	1312:34	1312:34	6	;
LEAF_NODE	1313:1	1313:1	5	}
EXPR_STATEMENT	1314:1	1314:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata ) ;
EXPR	1314:1	1314:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
ASSIGN	1314:1	1314:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
LVAL	1314:1	1314:1	6	err
FIELD	1314:1	1314:1	7	err
LEAF_NODE	1314:1	1314:1	8	err
ASSIGN_OP	1314:4	1314:4	6	=
LEAF_NODE	1314:4	1314:4	7	=
RVAL	1314:5	1314:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
FUNCTION_CALL	1314:5	1314:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
CALLEE	1314:5	1314:5	8	TIFFReadDirEntryArray
LEAF_NODE	1314:5	1314:5	9	TIFFReadDirEntryArray
LEAF_NODE	1314:26	1314:26	8	(
ARGUMENT	1314:27	1314:27	8	tif
FIELD	1314:27	1314:27	9	tif
LEAF_NODE	1314:27	1314:27	10	tif
LEAF_NODE	1314:30	1314:30	8	,
ARGUMENT	1314:31	1314:31	8	direntry
FIELD	1314:31	1314:31	9	direntry
LEAF_NODE	1314:31	1314:31	10	direntry
LEAF_NODE	1314:39	1314:39	8	,
ARGUMENT	1314:40	1314:40	8	& count
UNARY_EXPR	1314:40	1314:41	9	& count
UNARY_OPERATOR	1314:40	1314:40	10	&
LEAF_NODE	1314:40	1314:40	11	&
FIELD	1314:41	1314:41	10	count
LEAF_NODE	1314:41	1314:41	11	count
LEAF_NODE	1314:46	1314:46	8	,
ARGUMENT	1314:47	1314:47	8	2
FIELD	1314:47	1314:47	9	2
LEAF_NODE	1314:47	1314:47	10	2
LEAF_NODE	1314:48	1314:48	8	,
ARGUMENT	1314:49	1314:49	8	& origdata
UNARY_EXPR	1314:49	1314:50	9	& origdata
UNARY_OPERATOR	1314:49	1314:49	10	&
LEAF_NODE	1314:49	1314:49	11	&
FIELD	1314:50	1314:50	10	origdata
LEAF_NODE	1314:50	1314:50	11	origdata
LEAF_NODE	1314:58	1314:58	8	)
LEAF_NODE	1314:59	1314:59	4	;
SELECTION	1315:1	1316:1	3	
KEYWORD	1315:1	1315:1	4	if
LEAF_NODE	1315:1	1315:1	5	if
LEAF_NODE	1315:4	1315:4	4	(
CONDITION	1315:5	1315:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1315:5	1315:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	1315:5	1315:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1315:5	1315:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	1315:5	1315:5	8	(
FIELD	1315:6	1315:6	8	err
LEAF_NODE	1315:6	1315:6	9	err
EQ_OPERATOR	1315:9	1315:9	8	!=
LEAF_NODE	1315:9	1315:9	9	!=
FIELD	1315:11	1315:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	1315:11	1315:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	1315:32	1315:32	8	)
LEAF_NODE	1315:33	1315:33	7	||
EXPR	1315:35	1315:47	7	( origdata == 0 )
LEAF_NODE	1315:35	1315:35	8	(
FIELD	1315:36	1315:36	8	origdata
LEAF_NODE	1315:36	1315:36	9	origdata
EQ_OPERATOR	1315:44	1315:44	8	==
LEAF_NODE	1315:44	1315:44	9	==
FIELD	1315:46	1315:46	8	0
LEAF_NODE	1315:46	1315:46	9	0
LEAF_NODE	1315:47	1315:47	8	)
LEAF_NODE	1315:48	1315:48	4	)
STATEMENTS	1316:1	1319:1	4	
LEAF_NODE	1316:1	1316:1	5	{
STATEMENTS	1317:2	1318:13	5	
EXPR_STATEMENT	1317:2	1317:10	6	* value = 0 ;
EXPR	1317:2	1317:2	7	* value = 0
ASSIGN	1317:2	1317:9	8	* value = 0
LVAL	1317:2	1317:2	9	* value
UNARY_EXPR	1317:2	1317:3	10	* value
UNARY_OPERATOR	1317:2	1317:2	11	*
LEAF_NODE	1317:2	1317:2	12	*
FIELD	1317:3	1317:3	11	value
LEAF_NODE	1317:3	1317:3	12	value
ASSIGN_OP	1317:8	1317:8	9	=
LEAF_NODE	1317:8	1317:8	10	=
RVAL	1317:9	1317:9	9	0
FIELD	1317:9	1317:9	10	0
LEAF_NODE	1317:9	1317:9	11	0
LEAF_NODE	1317:10	1317:10	7	;
LEAF_NODE	1318:2	1318:2	6	return
LEAF_NODE	1318:8	1318:8	6	(
LEAF_NODE	1318:9	1318:9	6	err
LEAF_NODE	1318:12	1318:12	6	)
LEAF_NODE	1318:13	1318:13	6	;
LEAF_NODE	1319:1	1319:1	5	}
SELECTION	1320:1	1321:1	3	
KEYWORD	1320:1	1320:1	4	switch
LEAF_NODE	1320:1	1320:1	5	switch
LEAF_NODE	1320:8	1320:8	4	(
CONDITION	1320:9	1320:9	4	direntry -> tdir_type
EXPR	1320:9	1320:9	5	direntry -> tdir_type
FIELD	1320:9	1320:19	6	direntry -> tdir_type
LEAF_NODE	1320:9	1320:9	7	direntry
LEAF_NODE	1320:17	1320:17	7	->
LEAF_NODE	1320:19	1320:19	7	tdir_type
LEAF_NODE	1320:28	1320:28	4	)
STATEMENTS	1321:1	1347:1	4	
LEAF_NODE	1321:1	1321:1	5	{
STATEMENTS	1322:2	1346:3	5	
LABEL	1322:2	1322:17	6	case TIFF_SHORT :
LEAF_NODE	1322:2	1322:2	7	case
LEAF_NODE	1322:7	1322:7	7	TIFF_SHORT
LEAF_NODE	1322:17	1322:17	7	:
EXPR_STATEMENT	1323:3	1323:27	6	* value = ( uint16 * ) origdata ;
EXPR	1323:3	1323:3	7	* value = ( uint16 * ) origdata
ASSIGN	1323:3	1323:10	8	* value = ( uint16 * ) origdata
LVAL	1323:3	1323:3	9	* value
UNARY_EXPR	1323:3	1323:4	10	* value
UNARY_OPERATOR	1323:3	1323:3	11	*
LEAF_NODE	1323:3	1323:3	12	*
FIELD	1323:4	1323:4	11	value
LEAF_NODE	1323:4	1323:4	12	value
ASSIGN_OP	1323:9	1323:9	9	=
LEAF_NODE	1323:9	1323:9	10	=
RVAL	1323:10	1323:19	9	( uint16 * ) origdata
LEAF_NODE	1323:10	1323:10	10	(
TYPE_NAME	1323:11	1323:11	10	uint16
LEAF_NODE	1323:11	1323:11	11	uint16
LEAF_NODE	1323:17	1323:17	10	*
LEAF_NODE	1323:18	1323:18	10	)
FIELD	1323:19	1323:19	10	origdata
LEAF_NODE	1323:19	1323:19	11	origdata
LEAF_NODE	1323:27	1323:27	7	;
SELECTION	1324:3	1325:4	6	
KEYWORD	1324:3	1324:3	7	if
LEAF_NODE	1324:3	1324:3	8	if
LEAF_NODE	1324:6	1324:6	7	(
CONDITION	1324:7	1324:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	1324:7	1324:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	1324:7	1324:12	9	tif -> tif_flags
LEAF_NODE	1324:7	1324:7	10	tif
LEAF_NODE	1324:10	1324:10	10	->
LEAF_NODE	1324:12	1324:12	10	tif_flags
LEAF_NODE	1324:21	1324:21	9	&
FIELD	1324:22	1324:22	9	TIFF_SWAB
LEAF_NODE	1324:22	1324:22	10	TIFF_SWAB
LEAF_NODE	1324:31	1324:31	7	)
STATEMENTS	1325:4	1325:4	7	
EXPR_STATEMENT	1325:4	1325:38	8	TIFFSwabArrayOfShort ( * value , count ) ;
EXPR	1325:4	1325:4	9	TIFFSwabArrayOfShort ( * value , count )
FUNCTION_CALL	1325:4	1325:37	10	TIFFSwabArrayOfShort ( * value , count )
CALLEE	1325:4	1325:4	11	TIFFSwabArrayOfShort
LEAF_NODE	1325:4	1325:4	12	TIFFSwabArrayOfShort
LEAF_NODE	1325:24	1325:24	11	(
ARGUMENT	1325:25	1325:25	11	* value
UNARY_EXPR	1325:25	1325:26	12	* value
UNARY_OPERATOR	1325:25	1325:25	13	*
LEAF_NODE	1325:25	1325:25	14	*
FIELD	1325:26	1325:26	13	value
LEAF_NODE	1325:26	1325:26	14	value
LEAF_NODE	1325:31	1325:31	11	,
ARGUMENT	1325:32	1325:32	11	count
FIELD	1325:32	1325:32	12	count
LEAF_NODE	1325:32	1325:32	13	count
LEAF_NODE	1325:37	1325:37	11	)
LEAF_NODE	1325:38	1325:38	9	;
LEAF_NODE	1326:3	1326:3	6	return
LEAF_NODE	1326:9	1326:9	6	(
LEAF_NODE	1326:10	1326:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1326:31	1326:31	6	)
LEAF_NODE	1326:32	1326:32	6	;
LABEL	1327:2	1327:18	6	case TIFF_SSHORT :
LEAF_NODE	1327:2	1327:2	7	case
LEAF_NODE	1327:7	1327:7	7	TIFF_SSHORT
LEAF_NODE	1327:18	1327:18	7	:
LEAF_NODE	1328:3	1328:3	6	{
STATEMENTS	1329:4	1345:33	6	
SIMPLE_DECL	1329:4	1329:12	7	int16 * m ;
VAR_DECL	1329:4	1329:11	8	int16 * m
TYPE	1329:4	1329:9	9	int16 *
TYPE_NAME	1329:4	1329:4	10	int16
LEAF_NODE	1329:4	1329:4	11	int16
POINTER	1329:9	1329:9	10	*
LEAF_NODE	1329:9	1329:9	11	*
NAME	1329:11	1329:11	9	m
LEAF_NODE	1329:11	1329:11	10	m
LEAF_NODE	1329:12	1329:12	8	;
SIMPLE_DECL	1330:4	1330:12	7	uint32 n ;
VAR_DECL	1330:4	1330:11	8	uint32 n
TYPE	1330:4	1330:4	9	uint32
TYPE_NAME	1330:4	1330:4	10	uint32
LEAF_NODE	1330:4	1330:4	11	uint32
NAME	1330:11	1330:11	9	n
LEAF_NODE	1330:11	1330:11	10	n
LEAF_NODE	1330:12	1330:12	8	;
EXPR_STATEMENT	1331:4	1331:22	7	m = ( int16 * ) origdata ;
EXPR	1331:4	1331:4	8	m = ( int16 * ) origdata
ASSIGN	1331:4	1331:6	9	m = ( int16 * ) origdata
LVAL	1331:4	1331:4	10	m
FIELD	1331:4	1331:4	11	m
LEAF_NODE	1331:4	1331:4	12	m
ASSIGN_OP	1331:5	1331:5	10	=
LEAF_NODE	1331:5	1331:5	11	=
RVAL	1331:6	1331:14	10	( int16 * ) origdata
LEAF_NODE	1331:6	1331:6	11	(
TYPE_NAME	1331:7	1331:7	11	int16
LEAF_NODE	1331:7	1331:7	12	int16
LEAF_NODE	1331:12	1331:12	11	*
LEAF_NODE	1331:13	1331:13	11	)
FIELD	1331:14	1331:14	11	origdata
LEAF_NODE	1331:14	1331:14	12	origdata
LEAF_NODE	1331:22	1331:22	8	;
ITERATION	1332:4	1333:4	7	
KEYWORD	1332:4	1332:4	8	for
LEAF_NODE	1332:4	1332:4	9	for
LEAF_NODE	1332:8	1332:8	8	(
FOR_INIT	1332:9	1332:12	8	n = 0 ;
EXPR	1332:9	1332:9	9	n = 0
ASSIGN	1332:9	1332:11	10	n = 0
LVAL	1332:9	1332:9	11	n
FIELD	1332:9	1332:9	12	n
LEAF_NODE	1332:9	1332:9	13	n
ASSIGN_OP	1332:10	1332:10	11	=
LEAF_NODE	1332:10	1332:10	12	=
RVAL	1332:11	1332:11	11	0
FIELD	1332:11	1332:11	12	0
LEAF_NODE	1332:11	1332:11	13	0
LEAF_NODE	1332:12	1332:12	9	;
CONDITION	1332:14	1332:14	8	n < count
EXPR	1332:14	1332:16	9	n < count
FIELD	1332:14	1332:14	10	n
LEAF_NODE	1332:14	1332:14	11	n
REL_OPERATOR	1332:15	1332:15	10	<
LEAF_NODE	1332:15	1332:15	11	<
FIELD	1332:16	1332:16	10	count
LEAF_NODE	1332:16	1332:16	11	count
LEAF_NODE	1332:21	1332:21	8	;
FOR_EXPR	1332:23	1332:23	8	n ++
EXPR	1332:23	1332:23	9	n ++
FIELD	1332:23	1332:24	10	n ++
LEAF_NODE	1332:23	1332:23	11	n
LEAF_NODE	1332:24	1332:24	11	++
LEAF_NODE	1332:26	1332:26	8	)
STATEMENTS	1333:4	1343:4	8	
LEAF_NODE	1333:4	1333:4	9	{
STATEMENTS	1334:5	1342:5	9	
SELECTION	1334:5	1335:6	10	
KEYWORD	1334:5	1334:5	11	if
LEAF_NODE	1334:5	1334:5	12	if
LEAF_NODE	1334:8	1334:8	11	(
CONDITION	1334:9	1334:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1334:9	1334:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1334:9	1334:14	13	tif -> tif_flags
LEAF_NODE	1334:9	1334:9	14	tif
LEAF_NODE	1334:12	1334:12	14	->
LEAF_NODE	1334:14	1334:14	14	tif_flags
LEAF_NODE	1334:23	1334:23	13	&
FIELD	1334:24	1334:24	13	TIFF_SWAB
LEAF_NODE	1334:24	1334:24	14	TIFF_SWAB
LEAF_NODE	1334:33	1334:33	11	)
STATEMENTS	1335:6	1335:6	11	
EXPR_STATEMENT	1335:6	1335:31	12	TIFFSwabShort ( ( uint16 * ) m ) ;
EXPR	1335:6	1335:6	13	TIFFSwabShort ( ( uint16 * ) m )
FUNCTION_CALL	1335:6	1335:30	14	TIFFSwabShort ( ( uint16 * ) m )
CALLEE	1335:6	1335:6	15	TIFFSwabShort
LEAF_NODE	1335:6	1335:6	16	TIFFSwabShort
LEAF_NODE	1335:19	1335:19	15	(
ARGUMENT	1335:20	1335:29	15	( uint16 * ) m
LEAF_NODE	1335:20	1335:20	16	(
TYPE_NAME	1335:21	1335:21	16	uint16
LEAF_NODE	1335:21	1335:21	17	uint16
LEAF_NODE	1335:27	1335:27	16	*
LEAF_NODE	1335:28	1335:28	16	)
FIELD	1335:29	1335:29	16	m
LEAF_NODE	1335:29	1335:29	17	m
LEAF_NODE	1335:30	1335:30	15	)
LEAF_NODE	1335:31	1335:31	13	;
EXPR_STATEMENT	1336:5	1336:50	10	err = TIFFReadDirEntryCheckRangeShortSshort ( * m ) ;
EXPR	1336:5	1336:5	11	err = TIFFReadDirEntryCheckRangeShortSshort ( * m )
ASSIGN	1336:5	1336:9	12	err = TIFFReadDirEntryCheckRangeShortSshort ( * m )
LVAL	1336:5	1336:5	13	err
FIELD	1336:5	1336:5	14	err
LEAF_NODE	1336:5	1336:5	15	err
ASSIGN_OP	1336:8	1336:8	13	=
LEAF_NODE	1336:8	1336:8	14	=
RVAL	1336:9	1336:9	13	TIFFReadDirEntryCheckRangeShortSshort ( * m )
FUNCTION_CALL	1336:9	1336:49	14	TIFFReadDirEntryCheckRangeShortSshort ( * m )
CALLEE	1336:9	1336:9	15	TIFFReadDirEntryCheckRangeShortSshort
LEAF_NODE	1336:9	1336:9	16	TIFFReadDirEntryCheckRangeShortSshort
LEAF_NODE	1336:46	1336:46	15	(
ARGUMENT	1336:47	1336:47	15	* m
UNARY_EXPR	1336:47	1336:48	16	* m
UNARY_OPERATOR	1336:47	1336:47	17	*
LEAF_NODE	1336:47	1336:47	18	*
FIELD	1336:48	1336:48	17	m
LEAF_NODE	1336:48	1336:48	18	m
LEAF_NODE	1336:49	1336:49	15	)
LEAF_NODE	1336:50	1336:50	11	;
SELECTION	1337:5	1338:5	10	
KEYWORD	1337:5	1337:5	11	if
LEAF_NODE	1337:5	1337:5	12	if
LEAF_NODE	1337:8	1337:8	11	(
CONDITION	1337:9	1337:9	11	err != TIFFReadDirEntryErrOk
EXPR	1337:9	1337:14	12	err != TIFFReadDirEntryErrOk
FIELD	1337:9	1337:9	13	err
LEAF_NODE	1337:9	1337:9	14	err
EQ_OPERATOR	1337:12	1337:12	13	!=
LEAF_NODE	1337:12	1337:12	14	!=
FIELD	1337:14	1337:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1337:14	1337:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1337:35	1337:35	11	)
STATEMENTS	1338:5	1341:5	11	
LEAF_NODE	1338:5	1338:5	12	{
STATEMENTS	1339:6	1340:17	12	
EXPR_STATEMENT	1339:6	1339:25	13	_TIFFfree ( origdata ) ;
EXPR	1339:6	1339:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	1339:6	1339:24	15	_TIFFfree ( origdata )
CALLEE	1339:6	1339:6	16	_TIFFfree
LEAF_NODE	1339:6	1339:6	17	_TIFFfree
LEAF_NODE	1339:15	1339:15	16	(
ARGUMENT	1339:16	1339:16	16	origdata
FIELD	1339:16	1339:16	17	origdata
LEAF_NODE	1339:16	1339:16	18	origdata
LEAF_NODE	1339:24	1339:24	16	)
LEAF_NODE	1339:25	1339:25	14	;
LEAF_NODE	1340:6	1340:6	13	return
LEAF_NODE	1340:12	1340:12	13	(
LEAF_NODE	1340:13	1340:13	13	err
LEAF_NODE	1340:16	1340:16	13	)
LEAF_NODE	1340:17	1340:17	13	;
LEAF_NODE	1341:5	1341:5	12	}
EXPR_STATEMENT	1342:5	1342:8	10	m ++ ;
EXPR	1342:5	1342:5	11	m ++
FIELD	1342:5	1342:6	12	m ++
LEAF_NODE	1342:5	1342:5	13	m
LEAF_NODE	1342:6	1342:6	13	++
LEAF_NODE	1342:8	1342:8	11	;
LEAF_NODE	1343:4	1343:4	9	}
EXPR_STATEMENT	1344:4	1344:28	7	* value = ( uint16 * ) origdata ;
EXPR	1344:4	1344:4	8	* value = ( uint16 * ) origdata
ASSIGN	1344:4	1344:11	9	* value = ( uint16 * ) origdata
LVAL	1344:4	1344:4	10	* value
UNARY_EXPR	1344:4	1344:5	11	* value
UNARY_OPERATOR	1344:4	1344:4	12	*
LEAF_NODE	1344:4	1344:4	13	*
FIELD	1344:5	1344:5	12	value
LEAF_NODE	1344:5	1344:5	13	value
ASSIGN_OP	1344:10	1344:10	10	=
LEAF_NODE	1344:10	1344:10	11	=
RVAL	1344:11	1344:20	10	( uint16 * ) origdata
LEAF_NODE	1344:11	1344:11	11	(
TYPE_NAME	1344:12	1344:12	11	uint16
LEAF_NODE	1344:12	1344:12	12	uint16
LEAF_NODE	1344:18	1344:18	11	*
LEAF_NODE	1344:19	1344:19	11	)
FIELD	1344:20	1344:20	11	origdata
LEAF_NODE	1344:20	1344:20	12	origdata
LEAF_NODE	1344:28	1344:28	8	;
LEAF_NODE	1345:4	1345:4	7	return
LEAF_NODE	1345:10	1345:10	7	(
LEAF_NODE	1345:11	1345:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	1345:32	1345:32	7	)
LEAF_NODE	1345:33	1345:33	7	;
LEAF_NODE	1346:3	1346:3	6	}
LEAF_NODE	1347:1	1347:1	5	}
EXPR_STATEMENT	1348:1	1348:35	3	data = ( uint16 * ) _TIFFmalloc ( count * 2 ) ;
EXPR	1348:1	1348:1	4	data = ( uint16 * ) _TIFFmalloc ( count * 2 )
ASSIGN	1348:1	1348:6	5	data = ( uint16 * ) _TIFFmalloc ( count * 2 )
LVAL	1348:1	1348:1	6	data
FIELD	1348:1	1348:1	7	data
LEAF_NODE	1348:1	1348:1	8	data
ASSIGN_OP	1348:5	1348:5	6	=
LEAF_NODE	1348:5	1348:5	7	=
RVAL	1348:6	1348:15	6	( uint16 * ) _TIFFmalloc ( count * 2 )
LEAF_NODE	1348:6	1348:6	7	(
TYPE_NAME	1348:7	1348:7	7	uint16
LEAF_NODE	1348:7	1348:7	8	uint16
LEAF_NODE	1348:13	1348:13	7	*
LEAF_NODE	1348:14	1348:14	7	)
FUNCTION_CALL	1348:15	1348:34	7	_TIFFmalloc ( count * 2 )
CALLEE	1348:15	1348:15	8	_TIFFmalloc
LEAF_NODE	1348:15	1348:15	9	_TIFFmalloc
LEAF_NODE	1348:26	1348:26	8	(
ARGUMENT	1348:27	1348:33	8	count * 2
FIELD	1348:27	1348:27	9	count
LEAF_NODE	1348:27	1348:27	10	count
LEAF_NODE	1348:32	1348:32	9	*
FIELD	1348:33	1348:33	9	2
LEAF_NODE	1348:33	1348:33	10	2
LEAF_NODE	1348:34	1348:34	8	)
LEAF_NODE	1348:35	1348:35	4	;
SELECTION	1349:1	1350:1	3	
KEYWORD	1349:1	1349:1	4	if
LEAF_NODE	1349:1	1349:1	5	if
LEAF_NODE	1349:4	1349:4	4	(
CONDITION	1349:5	1349:5	4	data == 0
EXPR	1349:5	1349:11	5	data == 0
FIELD	1349:5	1349:5	6	data
LEAF_NODE	1349:5	1349:5	7	data
EQ_OPERATOR	1349:9	1349:9	6	==
LEAF_NODE	1349:9	1349:9	7	==
FIELD	1349:11	1349:11	6	0
LEAF_NODE	1349:11	1349:11	7	0
LEAF_NODE	1349:12	1349:12	4	)
STATEMENTS	1350:1	1353:1	4	
LEAF_NODE	1350:1	1350:1	5	{
STATEMENTS	1351:2	1352:34	5	
EXPR_STATEMENT	1351:2	1351:21	6	_TIFFfree ( origdata ) ;
EXPR	1351:2	1351:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	1351:2	1351:20	8	_TIFFfree ( origdata )
CALLEE	1351:2	1351:2	9	_TIFFfree
LEAF_NODE	1351:2	1351:2	10	_TIFFfree
LEAF_NODE	1351:11	1351:11	9	(
ARGUMENT	1351:12	1351:12	9	origdata
FIELD	1351:12	1351:12	10	origdata
LEAF_NODE	1351:12	1351:12	11	origdata
LEAF_NODE	1351:20	1351:20	9	)
LEAF_NODE	1351:21	1351:21	7	;
LEAF_NODE	1352:2	1352:2	6	return
LEAF_NODE	1352:8	1352:8	6	(
LEAF_NODE	1352:9	1352:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	1352:33	1352:33	6	)
LEAF_NODE	1352:34	1352:34	6	;
LEAF_NODE	1353:1	1353:1	5	}
SELECTION	1354:1	1355:1	3	
KEYWORD	1354:1	1354:1	4	switch
LEAF_NODE	1354:1	1354:1	5	switch
LEAF_NODE	1354:8	1354:8	4	(
CONDITION	1354:9	1354:9	4	direntry -> tdir_type
EXPR	1354:9	1354:9	5	direntry -> tdir_type
FIELD	1354:9	1354:19	6	direntry -> tdir_type
LEAF_NODE	1354:9	1354:9	7	direntry
LEAF_NODE	1354:17	1354:17	7	->
LEAF_NODE	1354:19	1354:19	7	tdir_type
LEAF_NODE	1354:28	1354:28	4	)
STATEMENTS	1355:1	1455:1	4	
LEAF_NODE	1355:1	1355:1	5	{
STATEMENTS	1356:2	1454:3	5	
LABEL	1356:2	1356:16	6	case TIFF_BYTE :
LEAF_NODE	1356:2	1356:2	7	case
LEAF_NODE	1356:7	1356:7	7	TIFF_BYTE
LEAF_NODE	1356:16	1356:16	7	:
LEAF_NODE	1357:3	1357:3	6	{
STATEMENTS	1358:4	1363:4	6	
SIMPLE_DECL	1358:4	1358:13	7	uint8 * ma ;
VAR_DECL	1358:4	1358:11	8	uint8 * ma
TYPE	1358:4	1358:9	9	uint8 *
TYPE_NAME	1358:4	1358:4	10	uint8
LEAF_NODE	1358:4	1358:4	11	uint8
POINTER	1358:9	1358:9	10	*
LEAF_NODE	1358:9	1358:9	11	*
NAME	1358:11	1358:11	9	ma
LEAF_NODE	1358:11	1358:11	10	ma
LEAF_NODE	1358:13	1358:13	8	;
SIMPLE_DECL	1359:4	1359:14	7	uint16 * mb ;
VAR_DECL	1359:4	1359:12	8	uint16 * mb
TYPE	1359:4	1359:10	9	uint16 *
TYPE_NAME	1359:4	1359:4	10	uint16
LEAF_NODE	1359:4	1359:4	11	uint16
POINTER	1359:10	1359:10	10	*
LEAF_NODE	1359:10	1359:10	11	*
NAME	1359:12	1359:12	9	mb
LEAF_NODE	1359:12	1359:12	10	mb
LEAF_NODE	1359:14	1359:14	8	;
SIMPLE_DECL	1360:4	1360:12	7	uint32 n ;
VAR_DECL	1360:4	1360:11	8	uint32 n
TYPE	1360:4	1360:4	9	uint32
TYPE_NAME	1360:4	1360:4	10	uint32
LEAF_NODE	1360:4	1360:4	11	uint32
NAME	1360:11	1360:11	9	n
LEAF_NODE	1360:11	1360:11	10	n
LEAF_NODE	1360:12	1360:12	8	;
EXPR_STATEMENT	1361:4	1361:23	7	ma = ( uint8 * ) origdata ;
EXPR	1361:4	1361:4	8	ma = ( uint8 * ) origdata
ASSIGN	1361:4	1361:7	9	ma = ( uint8 * ) origdata
LVAL	1361:4	1361:4	10	ma
FIELD	1361:4	1361:4	11	ma
LEAF_NODE	1361:4	1361:4	12	ma
ASSIGN_OP	1361:6	1361:6	10	=
LEAF_NODE	1361:6	1361:6	11	=
RVAL	1361:7	1361:15	10	( uint8 * ) origdata
LEAF_NODE	1361:7	1361:7	11	(
TYPE_NAME	1361:8	1361:8	11	uint8
LEAF_NODE	1361:8	1361:8	12	uint8
LEAF_NODE	1361:13	1361:13	11	*
LEAF_NODE	1361:14	1361:14	11	)
FIELD	1361:15	1361:15	11	origdata
LEAF_NODE	1361:15	1361:15	12	origdata
LEAF_NODE	1361:23	1361:23	8	;
EXPR_STATEMENT	1362:4	1362:11	7	mb = data ;
EXPR	1362:4	1362:4	8	mb = data
ASSIGN	1362:4	1362:7	9	mb = data
LVAL	1362:4	1362:4	10	mb
FIELD	1362:4	1362:4	11	mb
LEAF_NODE	1362:4	1362:4	12	mb
ASSIGN_OP	1362:6	1362:6	10	=
LEAF_NODE	1362:6	1362:6	11	=
RVAL	1362:7	1362:7	10	data
FIELD	1362:7	1362:7	11	data
LEAF_NODE	1362:7	1362:7	12	data
LEAF_NODE	1362:11	1362:11	8	;
ITERATION	1363:4	1364:5	7	
KEYWORD	1363:4	1363:4	8	for
LEAF_NODE	1363:4	1363:4	9	for
LEAF_NODE	1363:8	1363:8	8	(
FOR_INIT	1363:9	1363:12	8	n = 0 ;
EXPR	1363:9	1363:9	9	n = 0
ASSIGN	1363:9	1363:11	10	n = 0
LVAL	1363:9	1363:9	11	n
FIELD	1363:9	1363:9	12	n
LEAF_NODE	1363:9	1363:9	13	n
ASSIGN_OP	1363:10	1363:10	11	=
LEAF_NODE	1363:10	1363:10	12	=
RVAL	1363:11	1363:11	11	0
FIELD	1363:11	1363:11	12	0
LEAF_NODE	1363:11	1363:11	13	0
LEAF_NODE	1363:12	1363:12	9	;
CONDITION	1363:14	1363:14	8	n < count
EXPR	1363:14	1363:16	9	n < count
FIELD	1363:14	1363:14	10	n
LEAF_NODE	1363:14	1363:14	11	n
REL_OPERATOR	1363:15	1363:15	10	<
LEAF_NODE	1363:15	1363:15	11	<
FIELD	1363:16	1363:16	10	count
LEAF_NODE	1363:16	1363:16	11	count
LEAF_NODE	1363:21	1363:21	8	;
FOR_EXPR	1363:23	1363:23	8	n ++
EXPR	1363:23	1363:23	9	n ++
FIELD	1363:23	1363:24	10	n ++
LEAF_NODE	1363:23	1363:23	11	n
LEAF_NODE	1363:24	1363:24	11	++
LEAF_NODE	1363:26	1363:26	8	)
STATEMENTS	1364:5	1364:5	8	
EXPR_STATEMENT	1364:5	1364:26	9	* mb ++ = ( uint16 ) ( * ma ++ ) ;
EXPR	1364:5	1364:5	10	* mb ++ = ( uint16 ) ( * ma ++ )
ASSIGN	1364:5	1364:11	11	* mb ++ = ( uint16 ) ( * ma ++ )
LVAL	1364:5	1364:5	12	* mb ++
UNARY_EXPR	1364:5	1364:6	13	* mb ++
UNARY_OPERATOR	1364:5	1364:5	14	*
LEAF_NODE	1364:5	1364:5	15	*
FIELD	1364:6	1364:8	14	mb ++
LEAF_NODE	1364:6	1364:6	15	mb
LEAF_NODE	1364:8	1364:8	15	++
ASSIGN_OP	1364:10	1364:10	12	=
LEAF_NODE	1364:10	1364:10	13	=
RVAL	1364:11	1364:25	12	( uint16 ) ( * ma ++ )
LEAF_NODE	1364:11	1364:11	13	(
TYPE_NAME	1364:12	1364:12	13	uint16
LEAF_NODE	1364:12	1364:12	14	uint16
LEAF_NODE	1364:18	1364:18	13	)
LEAF_NODE	1364:19	1364:19	13	(
UNARY_EXPR	1364:20	1364:21	13	* ma ++
UNARY_OPERATOR	1364:20	1364:20	14	*
LEAF_NODE	1364:20	1364:20	15	*
FIELD	1364:21	1364:23	14	ma ++
LEAF_NODE	1364:21	1364:21	15	ma
LEAF_NODE	1364:23	1364:23	15	++
LEAF_NODE	1364:25	1364:25	13	)
LEAF_NODE	1364:26	1364:26	10	;
LEAF_NODE	1365:3	1365:3	6	}
JUMP_STATEMENT	1366:3	1366:8	6	break DESTINATION ;
KEYWORD	1366:3	1366:3	7	break
LEAF_NODE	1366:3	1366:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1366:8	1366:8	7	;
LABEL	1367:2	1367:17	6	case TIFF_SBYTE :
LEAF_NODE	1367:2	1367:2	7	case
LEAF_NODE	1367:7	1367:7	7	TIFF_SBYTE
LEAF_NODE	1367:17	1367:17	7	:
LEAF_NODE	1368:3	1368:3	6	{
STATEMENTS	1369:4	1374:4	6	
SIMPLE_DECL	1369:4	1369:12	7	int8 * ma ;
VAR_DECL	1369:4	1369:10	8	int8 * ma
TYPE	1369:4	1369:8	9	int8 *
TYPE_NAME	1369:4	1369:4	10	int8
LEAF_NODE	1369:4	1369:4	11	int8
POINTER	1369:8	1369:8	10	*
LEAF_NODE	1369:8	1369:8	11	*
NAME	1369:10	1369:10	9	ma
LEAF_NODE	1369:10	1369:10	10	ma
LEAF_NODE	1369:12	1369:12	8	;
SIMPLE_DECL	1370:4	1370:14	7	uint16 * mb ;
VAR_DECL	1370:4	1370:12	8	uint16 * mb
TYPE	1370:4	1370:10	9	uint16 *
TYPE_NAME	1370:4	1370:4	10	uint16
LEAF_NODE	1370:4	1370:4	11	uint16
POINTER	1370:10	1370:10	10	*
LEAF_NODE	1370:10	1370:10	11	*
NAME	1370:12	1370:12	9	mb
LEAF_NODE	1370:12	1370:12	10	mb
LEAF_NODE	1370:14	1370:14	8	;
SIMPLE_DECL	1371:4	1371:12	7	uint32 n ;
VAR_DECL	1371:4	1371:11	8	uint32 n
TYPE	1371:4	1371:4	9	uint32
TYPE_NAME	1371:4	1371:4	10	uint32
LEAF_NODE	1371:4	1371:4	11	uint32
NAME	1371:11	1371:11	9	n
LEAF_NODE	1371:11	1371:11	10	n
LEAF_NODE	1371:12	1371:12	8	;
EXPR_STATEMENT	1372:4	1372:22	7	ma = ( int8 * ) origdata ;
EXPR	1372:4	1372:4	8	ma = ( int8 * ) origdata
ASSIGN	1372:4	1372:7	9	ma = ( int8 * ) origdata
LVAL	1372:4	1372:4	10	ma
FIELD	1372:4	1372:4	11	ma
LEAF_NODE	1372:4	1372:4	12	ma
ASSIGN_OP	1372:6	1372:6	10	=
LEAF_NODE	1372:6	1372:6	11	=
RVAL	1372:7	1372:14	10	( int8 * ) origdata
LEAF_NODE	1372:7	1372:7	11	(
TYPE_NAME	1372:8	1372:8	11	int8
LEAF_NODE	1372:8	1372:8	12	int8
LEAF_NODE	1372:12	1372:12	11	*
LEAF_NODE	1372:13	1372:13	11	)
FIELD	1372:14	1372:14	11	origdata
LEAF_NODE	1372:14	1372:14	12	origdata
LEAF_NODE	1372:22	1372:22	8	;
EXPR_STATEMENT	1373:4	1373:11	7	mb = data ;
EXPR	1373:4	1373:4	8	mb = data
ASSIGN	1373:4	1373:7	9	mb = data
LVAL	1373:4	1373:4	10	mb
FIELD	1373:4	1373:4	11	mb
LEAF_NODE	1373:4	1373:4	12	mb
ASSIGN_OP	1373:6	1373:6	10	=
LEAF_NODE	1373:6	1373:6	11	=
RVAL	1373:7	1373:7	10	data
FIELD	1373:7	1373:7	11	data
LEAF_NODE	1373:7	1373:7	12	data
LEAF_NODE	1373:11	1373:11	8	;
ITERATION	1374:4	1375:4	7	
KEYWORD	1374:4	1374:4	8	for
LEAF_NODE	1374:4	1374:4	9	for
LEAF_NODE	1374:8	1374:8	8	(
FOR_INIT	1374:9	1374:12	8	n = 0 ;
EXPR	1374:9	1374:9	9	n = 0
ASSIGN	1374:9	1374:11	10	n = 0
LVAL	1374:9	1374:9	11	n
FIELD	1374:9	1374:9	12	n
LEAF_NODE	1374:9	1374:9	13	n
ASSIGN_OP	1374:10	1374:10	11	=
LEAF_NODE	1374:10	1374:10	12	=
RVAL	1374:11	1374:11	11	0
FIELD	1374:11	1374:11	12	0
LEAF_NODE	1374:11	1374:11	13	0
LEAF_NODE	1374:12	1374:12	9	;
CONDITION	1374:14	1374:14	8	n < count
EXPR	1374:14	1374:16	9	n < count
FIELD	1374:14	1374:14	10	n
LEAF_NODE	1374:14	1374:14	11	n
REL_OPERATOR	1374:15	1374:15	10	<
LEAF_NODE	1374:15	1374:15	11	<
FIELD	1374:16	1374:16	10	count
LEAF_NODE	1374:16	1374:16	11	count
LEAF_NODE	1374:21	1374:21	8	;
FOR_EXPR	1374:23	1374:23	8	n ++
EXPR	1374:23	1374:23	9	n ++
FIELD	1374:23	1374:24	10	n ++
LEAF_NODE	1374:23	1374:23	11	n
LEAF_NODE	1374:24	1374:24	11	++
LEAF_NODE	1374:26	1374:26	8	)
STATEMENTS	1375:4	1380:4	8	
LEAF_NODE	1375:4	1375:4	9	{
STATEMENTS	1376:5	1379:5	9	
EXPR_STATEMENT	1376:5	1376:50	10	err = TIFFReadDirEntryCheckRangeShortSbyte ( * ma ) ;
EXPR	1376:5	1376:5	11	err = TIFFReadDirEntryCheckRangeShortSbyte ( * ma )
ASSIGN	1376:5	1376:9	12	err = TIFFReadDirEntryCheckRangeShortSbyte ( * ma )
LVAL	1376:5	1376:5	13	err
FIELD	1376:5	1376:5	14	err
LEAF_NODE	1376:5	1376:5	15	err
ASSIGN_OP	1376:8	1376:8	13	=
LEAF_NODE	1376:8	1376:8	14	=
RVAL	1376:9	1376:9	13	TIFFReadDirEntryCheckRangeShortSbyte ( * ma )
FUNCTION_CALL	1376:9	1376:49	14	TIFFReadDirEntryCheckRangeShortSbyte ( * ma )
CALLEE	1376:9	1376:9	15	TIFFReadDirEntryCheckRangeShortSbyte
LEAF_NODE	1376:9	1376:9	16	TIFFReadDirEntryCheckRangeShortSbyte
LEAF_NODE	1376:45	1376:45	15	(
ARGUMENT	1376:46	1376:46	15	* ma
UNARY_EXPR	1376:46	1376:47	16	* ma
UNARY_OPERATOR	1376:46	1376:46	17	*
LEAF_NODE	1376:46	1376:46	18	*
FIELD	1376:47	1376:47	17	ma
LEAF_NODE	1376:47	1376:47	18	ma
LEAF_NODE	1376:49	1376:49	15	)
LEAF_NODE	1376:50	1376:50	11	;
SELECTION	1377:5	1378:6	10	
KEYWORD	1377:5	1377:5	11	if
LEAF_NODE	1377:5	1377:5	12	if
LEAF_NODE	1377:8	1377:8	11	(
CONDITION	1377:9	1377:9	11	err != TIFFReadDirEntryErrOk
EXPR	1377:9	1377:14	12	err != TIFFReadDirEntryErrOk
FIELD	1377:9	1377:9	13	err
LEAF_NODE	1377:9	1377:9	14	err
EQ_OPERATOR	1377:12	1377:12	13	!=
LEAF_NODE	1377:12	1377:12	14	!=
FIELD	1377:14	1377:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1377:14	1377:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1377:35	1377:35	11	)
STATEMENTS	1378:6	1378:6	11	
JUMP_STATEMENT	1378:6	1378:11	12	break DESTINATION ;
KEYWORD	1378:6	1378:6	13	break
LEAF_NODE	1378:6	1378:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1378:11	1378:11	13	;
EXPR_STATEMENT	1379:5	1379:26	10	* mb ++ = ( uint16 ) ( * ma ++ ) ;
EXPR	1379:5	1379:5	11	* mb ++ = ( uint16 ) ( * ma ++ )
ASSIGN	1379:5	1379:11	12	* mb ++ = ( uint16 ) ( * ma ++ )
LVAL	1379:5	1379:5	13	* mb ++
UNARY_EXPR	1379:5	1379:6	14	* mb ++
UNARY_OPERATOR	1379:5	1379:5	15	*
LEAF_NODE	1379:5	1379:5	16	*
FIELD	1379:6	1379:8	15	mb ++
LEAF_NODE	1379:6	1379:6	16	mb
LEAF_NODE	1379:8	1379:8	16	++
ASSIGN_OP	1379:10	1379:10	13	=
LEAF_NODE	1379:10	1379:10	14	=
RVAL	1379:11	1379:25	13	( uint16 ) ( * ma ++ )
LEAF_NODE	1379:11	1379:11	14	(
TYPE_NAME	1379:12	1379:12	14	uint16
LEAF_NODE	1379:12	1379:12	15	uint16
LEAF_NODE	1379:18	1379:18	14	)
LEAF_NODE	1379:19	1379:19	14	(
UNARY_EXPR	1379:20	1379:21	14	* ma ++
UNARY_OPERATOR	1379:20	1379:20	15	*
LEAF_NODE	1379:20	1379:20	16	*
FIELD	1379:21	1379:23	15	ma ++
LEAF_NODE	1379:21	1379:21	16	ma
LEAF_NODE	1379:23	1379:23	16	++
LEAF_NODE	1379:25	1379:25	14	)
LEAF_NODE	1379:26	1379:26	11	;
LEAF_NODE	1380:4	1380:4	9	}
LEAF_NODE	1381:3	1381:3	6	}
JUMP_STATEMENT	1382:3	1382:8	6	break DESTINATION ;
KEYWORD	1382:3	1382:3	7	break
LEAF_NODE	1382:3	1382:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1382:8	1382:8	7	;
LABEL	1383:2	1383:16	6	case TIFF_LONG :
LEAF_NODE	1383:2	1383:2	7	case
LEAF_NODE	1383:7	1383:7	7	TIFF_LONG
LEAF_NODE	1383:16	1383:16	7	:
LEAF_NODE	1384:3	1384:3	6	{
STATEMENTS	1385:4	1390:4	6	
SIMPLE_DECL	1385:4	1385:14	7	uint32 * ma ;
VAR_DECL	1385:4	1385:12	8	uint32 * ma
TYPE	1385:4	1385:10	9	uint32 *
TYPE_NAME	1385:4	1385:4	10	uint32
LEAF_NODE	1385:4	1385:4	11	uint32
POINTER	1385:10	1385:10	10	*
LEAF_NODE	1385:10	1385:10	11	*
NAME	1385:12	1385:12	9	ma
LEAF_NODE	1385:12	1385:12	10	ma
LEAF_NODE	1385:14	1385:14	8	;
SIMPLE_DECL	1386:4	1386:14	7	uint16 * mb ;
VAR_DECL	1386:4	1386:12	8	uint16 * mb
TYPE	1386:4	1386:10	9	uint16 *
TYPE_NAME	1386:4	1386:4	10	uint16
LEAF_NODE	1386:4	1386:4	11	uint16
POINTER	1386:10	1386:10	10	*
LEAF_NODE	1386:10	1386:10	11	*
NAME	1386:12	1386:12	9	mb
LEAF_NODE	1386:12	1386:12	10	mb
LEAF_NODE	1386:14	1386:14	8	;
SIMPLE_DECL	1387:4	1387:12	7	uint32 n ;
VAR_DECL	1387:4	1387:11	8	uint32 n
TYPE	1387:4	1387:4	9	uint32
TYPE_NAME	1387:4	1387:4	10	uint32
LEAF_NODE	1387:4	1387:4	11	uint32
NAME	1387:11	1387:11	9	n
LEAF_NODE	1387:11	1387:11	10	n
LEAF_NODE	1387:12	1387:12	8	;
EXPR_STATEMENT	1388:4	1388:24	7	ma = ( uint32 * ) origdata ;
EXPR	1388:4	1388:4	8	ma = ( uint32 * ) origdata
ASSIGN	1388:4	1388:7	9	ma = ( uint32 * ) origdata
LVAL	1388:4	1388:4	10	ma
FIELD	1388:4	1388:4	11	ma
LEAF_NODE	1388:4	1388:4	12	ma
ASSIGN_OP	1388:6	1388:6	10	=
LEAF_NODE	1388:6	1388:6	11	=
RVAL	1388:7	1388:16	10	( uint32 * ) origdata
LEAF_NODE	1388:7	1388:7	11	(
TYPE_NAME	1388:8	1388:8	11	uint32
LEAF_NODE	1388:8	1388:8	12	uint32
LEAF_NODE	1388:14	1388:14	11	*
LEAF_NODE	1388:15	1388:15	11	)
FIELD	1388:16	1388:16	11	origdata
LEAF_NODE	1388:16	1388:16	12	origdata
LEAF_NODE	1388:24	1388:24	8	;
EXPR_STATEMENT	1389:4	1389:11	7	mb = data ;
EXPR	1389:4	1389:4	8	mb = data
ASSIGN	1389:4	1389:7	9	mb = data
LVAL	1389:4	1389:4	10	mb
FIELD	1389:4	1389:4	11	mb
LEAF_NODE	1389:4	1389:4	12	mb
ASSIGN_OP	1389:6	1389:6	10	=
LEAF_NODE	1389:6	1389:6	11	=
RVAL	1389:7	1389:7	10	data
FIELD	1389:7	1389:7	11	data
LEAF_NODE	1389:7	1389:7	12	data
LEAF_NODE	1389:11	1389:11	8	;
ITERATION	1390:4	1391:4	7	
KEYWORD	1390:4	1390:4	8	for
LEAF_NODE	1390:4	1390:4	9	for
LEAF_NODE	1390:8	1390:8	8	(
FOR_INIT	1390:9	1390:12	8	n = 0 ;
EXPR	1390:9	1390:9	9	n = 0
ASSIGN	1390:9	1390:11	10	n = 0
LVAL	1390:9	1390:9	11	n
FIELD	1390:9	1390:9	12	n
LEAF_NODE	1390:9	1390:9	13	n
ASSIGN_OP	1390:10	1390:10	11	=
LEAF_NODE	1390:10	1390:10	12	=
RVAL	1390:11	1390:11	11	0
FIELD	1390:11	1390:11	12	0
LEAF_NODE	1390:11	1390:11	13	0
LEAF_NODE	1390:12	1390:12	9	;
CONDITION	1390:14	1390:14	8	n < count
EXPR	1390:14	1390:16	9	n < count
FIELD	1390:14	1390:14	10	n
LEAF_NODE	1390:14	1390:14	11	n
REL_OPERATOR	1390:15	1390:15	10	<
LEAF_NODE	1390:15	1390:15	11	<
FIELD	1390:16	1390:16	10	count
LEAF_NODE	1390:16	1390:16	11	count
LEAF_NODE	1390:21	1390:21	8	;
FOR_EXPR	1390:23	1390:23	8	n ++
EXPR	1390:23	1390:23	9	n ++
FIELD	1390:23	1390:24	10	n ++
LEAF_NODE	1390:23	1390:23	11	n
LEAF_NODE	1390:24	1390:24	11	++
LEAF_NODE	1390:26	1390:26	8	)
STATEMENTS	1391:4	1398:4	8	
LEAF_NODE	1391:4	1391:4	9	{
STATEMENTS	1392:5	1397:5	9	
SELECTION	1392:5	1393:6	10	
KEYWORD	1392:5	1392:5	11	if
LEAF_NODE	1392:5	1392:5	12	if
LEAF_NODE	1392:8	1392:8	11	(
CONDITION	1392:9	1392:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1392:9	1392:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1392:9	1392:14	13	tif -> tif_flags
LEAF_NODE	1392:9	1392:9	14	tif
LEAF_NODE	1392:12	1392:12	14	->
LEAF_NODE	1392:14	1392:14	14	tif_flags
LEAF_NODE	1392:23	1392:23	13	&
FIELD	1392:24	1392:24	13	TIFF_SWAB
LEAF_NODE	1392:24	1392:24	14	TIFF_SWAB
LEAF_NODE	1392:33	1392:33	11	)
STATEMENTS	1393:6	1393:6	11	
EXPR_STATEMENT	1393:6	1393:22	12	TIFFSwabLong ( ma ) ;
EXPR	1393:6	1393:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	1393:6	1393:21	14	TIFFSwabLong ( ma )
CALLEE	1393:6	1393:6	15	TIFFSwabLong
LEAF_NODE	1393:6	1393:6	16	TIFFSwabLong
LEAF_NODE	1393:18	1393:18	15	(
ARGUMENT	1393:19	1393:19	15	ma
FIELD	1393:19	1393:19	16	ma
LEAF_NODE	1393:19	1393:19	17	ma
LEAF_NODE	1393:21	1393:21	15	)
LEAF_NODE	1393:22	1393:22	13	;
EXPR_STATEMENT	1394:5	1394:49	10	err = TIFFReadDirEntryCheckRangeShortLong ( * ma ) ;
EXPR	1394:5	1394:5	11	err = TIFFReadDirEntryCheckRangeShortLong ( * ma )
ASSIGN	1394:5	1394:9	12	err = TIFFReadDirEntryCheckRangeShortLong ( * ma )
LVAL	1394:5	1394:5	13	err
FIELD	1394:5	1394:5	14	err
LEAF_NODE	1394:5	1394:5	15	err
ASSIGN_OP	1394:8	1394:8	13	=
LEAF_NODE	1394:8	1394:8	14	=
RVAL	1394:9	1394:9	13	TIFFReadDirEntryCheckRangeShortLong ( * ma )
FUNCTION_CALL	1394:9	1394:48	14	TIFFReadDirEntryCheckRangeShortLong ( * ma )
CALLEE	1394:9	1394:9	15	TIFFReadDirEntryCheckRangeShortLong
LEAF_NODE	1394:9	1394:9	16	TIFFReadDirEntryCheckRangeShortLong
LEAF_NODE	1394:44	1394:44	15	(
ARGUMENT	1394:45	1394:45	15	* ma
UNARY_EXPR	1394:45	1394:46	16	* ma
UNARY_OPERATOR	1394:45	1394:45	17	*
LEAF_NODE	1394:45	1394:45	18	*
FIELD	1394:46	1394:46	17	ma
LEAF_NODE	1394:46	1394:46	18	ma
LEAF_NODE	1394:48	1394:48	15	)
LEAF_NODE	1394:49	1394:49	11	;
SELECTION	1395:5	1396:6	10	
KEYWORD	1395:5	1395:5	11	if
LEAF_NODE	1395:5	1395:5	12	if
LEAF_NODE	1395:8	1395:8	11	(
CONDITION	1395:9	1395:9	11	err != TIFFReadDirEntryErrOk
EXPR	1395:9	1395:14	12	err != TIFFReadDirEntryErrOk
FIELD	1395:9	1395:9	13	err
LEAF_NODE	1395:9	1395:9	14	err
EQ_OPERATOR	1395:12	1395:12	13	!=
LEAF_NODE	1395:12	1395:12	14	!=
FIELD	1395:14	1395:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1395:14	1395:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1395:35	1395:35	11	)
STATEMENTS	1396:6	1396:6	11	
JUMP_STATEMENT	1396:6	1396:11	12	break DESTINATION ;
KEYWORD	1396:6	1396:6	13	break
LEAF_NODE	1396:6	1396:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1396:11	1396:11	13	;
EXPR_STATEMENT	1397:5	1397:26	10	* mb ++ = ( uint16 ) ( * ma ++ ) ;
EXPR	1397:5	1397:5	11	* mb ++ = ( uint16 ) ( * ma ++ )
ASSIGN	1397:5	1397:11	12	* mb ++ = ( uint16 ) ( * ma ++ )
LVAL	1397:5	1397:5	13	* mb ++
UNARY_EXPR	1397:5	1397:6	14	* mb ++
UNARY_OPERATOR	1397:5	1397:5	15	*
LEAF_NODE	1397:5	1397:5	16	*
FIELD	1397:6	1397:8	15	mb ++
LEAF_NODE	1397:6	1397:6	16	mb
LEAF_NODE	1397:8	1397:8	16	++
ASSIGN_OP	1397:10	1397:10	13	=
LEAF_NODE	1397:10	1397:10	14	=
RVAL	1397:11	1397:25	13	( uint16 ) ( * ma ++ )
LEAF_NODE	1397:11	1397:11	14	(
TYPE_NAME	1397:12	1397:12	14	uint16
LEAF_NODE	1397:12	1397:12	15	uint16
LEAF_NODE	1397:18	1397:18	14	)
LEAF_NODE	1397:19	1397:19	14	(
UNARY_EXPR	1397:20	1397:21	14	* ma ++
UNARY_OPERATOR	1397:20	1397:20	15	*
LEAF_NODE	1397:20	1397:20	16	*
FIELD	1397:21	1397:23	15	ma ++
LEAF_NODE	1397:21	1397:21	16	ma
LEAF_NODE	1397:23	1397:23	16	++
LEAF_NODE	1397:25	1397:25	14	)
LEAF_NODE	1397:26	1397:26	11	;
LEAF_NODE	1398:4	1398:4	9	}
LEAF_NODE	1399:3	1399:3	6	}
JUMP_STATEMENT	1400:3	1400:8	6	break DESTINATION ;
KEYWORD	1400:3	1400:3	7	break
LEAF_NODE	1400:3	1400:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1400:8	1400:8	7	;
LABEL	1401:2	1401:17	6	case TIFF_SLONG :
LEAF_NODE	1401:2	1401:2	7	case
LEAF_NODE	1401:7	1401:7	7	TIFF_SLONG
LEAF_NODE	1401:17	1401:17	7	:
LEAF_NODE	1402:3	1402:3	6	{
STATEMENTS	1403:4	1408:4	6	
SIMPLE_DECL	1403:4	1403:13	7	int32 * ma ;
VAR_DECL	1403:4	1403:11	8	int32 * ma
TYPE	1403:4	1403:9	9	int32 *
TYPE_NAME	1403:4	1403:4	10	int32
LEAF_NODE	1403:4	1403:4	11	int32
POINTER	1403:9	1403:9	10	*
LEAF_NODE	1403:9	1403:9	11	*
NAME	1403:11	1403:11	9	ma
LEAF_NODE	1403:11	1403:11	10	ma
LEAF_NODE	1403:13	1403:13	8	;
SIMPLE_DECL	1404:4	1404:14	7	uint16 * mb ;
VAR_DECL	1404:4	1404:12	8	uint16 * mb
TYPE	1404:4	1404:10	9	uint16 *
TYPE_NAME	1404:4	1404:4	10	uint16
LEAF_NODE	1404:4	1404:4	11	uint16
POINTER	1404:10	1404:10	10	*
LEAF_NODE	1404:10	1404:10	11	*
NAME	1404:12	1404:12	9	mb
LEAF_NODE	1404:12	1404:12	10	mb
LEAF_NODE	1404:14	1404:14	8	;
SIMPLE_DECL	1405:4	1405:12	7	uint32 n ;
VAR_DECL	1405:4	1405:11	8	uint32 n
TYPE	1405:4	1405:4	9	uint32
TYPE_NAME	1405:4	1405:4	10	uint32
LEAF_NODE	1405:4	1405:4	11	uint32
NAME	1405:11	1405:11	9	n
LEAF_NODE	1405:11	1405:11	10	n
LEAF_NODE	1405:12	1405:12	8	;
EXPR_STATEMENT	1406:4	1406:23	7	ma = ( int32 * ) origdata ;
EXPR	1406:4	1406:4	8	ma = ( int32 * ) origdata
ASSIGN	1406:4	1406:7	9	ma = ( int32 * ) origdata
LVAL	1406:4	1406:4	10	ma
FIELD	1406:4	1406:4	11	ma
LEAF_NODE	1406:4	1406:4	12	ma
ASSIGN_OP	1406:6	1406:6	10	=
LEAF_NODE	1406:6	1406:6	11	=
RVAL	1406:7	1406:15	10	( int32 * ) origdata
LEAF_NODE	1406:7	1406:7	11	(
TYPE_NAME	1406:8	1406:8	11	int32
LEAF_NODE	1406:8	1406:8	12	int32
LEAF_NODE	1406:13	1406:13	11	*
LEAF_NODE	1406:14	1406:14	11	)
FIELD	1406:15	1406:15	11	origdata
LEAF_NODE	1406:15	1406:15	12	origdata
LEAF_NODE	1406:23	1406:23	8	;
EXPR_STATEMENT	1407:4	1407:11	7	mb = data ;
EXPR	1407:4	1407:4	8	mb = data
ASSIGN	1407:4	1407:7	9	mb = data
LVAL	1407:4	1407:4	10	mb
FIELD	1407:4	1407:4	11	mb
LEAF_NODE	1407:4	1407:4	12	mb
ASSIGN_OP	1407:6	1407:6	10	=
LEAF_NODE	1407:6	1407:6	11	=
RVAL	1407:7	1407:7	10	data
FIELD	1407:7	1407:7	11	data
LEAF_NODE	1407:7	1407:7	12	data
LEAF_NODE	1407:11	1407:11	8	;
ITERATION	1408:4	1409:4	7	
KEYWORD	1408:4	1408:4	8	for
LEAF_NODE	1408:4	1408:4	9	for
LEAF_NODE	1408:8	1408:8	8	(
FOR_INIT	1408:9	1408:12	8	n = 0 ;
EXPR	1408:9	1408:9	9	n = 0
ASSIGN	1408:9	1408:11	10	n = 0
LVAL	1408:9	1408:9	11	n
FIELD	1408:9	1408:9	12	n
LEAF_NODE	1408:9	1408:9	13	n
ASSIGN_OP	1408:10	1408:10	11	=
LEAF_NODE	1408:10	1408:10	12	=
RVAL	1408:11	1408:11	11	0
FIELD	1408:11	1408:11	12	0
LEAF_NODE	1408:11	1408:11	13	0
LEAF_NODE	1408:12	1408:12	9	;
CONDITION	1408:14	1408:14	8	n < count
EXPR	1408:14	1408:16	9	n < count
FIELD	1408:14	1408:14	10	n
LEAF_NODE	1408:14	1408:14	11	n
REL_OPERATOR	1408:15	1408:15	10	<
LEAF_NODE	1408:15	1408:15	11	<
FIELD	1408:16	1408:16	10	count
LEAF_NODE	1408:16	1408:16	11	count
LEAF_NODE	1408:21	1408:21	8	;
FOR_EXPR	1408:23	1408:23	8	n ++
EXPR	1408:23	1408:23	9	n ++
FIELD	1408:23	1408:24	10	n ++
LEAF_NODE	1408:23	1408:23	11	n
LEAF_NODE	1408:24	1408:24	11	++
LEAF_NODE	1408:26	1408:26	8	)
STATEMENTS	1409:4	1416:4	8	
LEAF_NODE	1409:4	1409:4	9	{
STATEMENTS	1410:5	1415:5	9	
SELECTION	1410:5	1411:6	10	
KEYWORD	1410:5	1410:5	11	if
LEAF_NODE	1410:5	1410:5	12	if
LEAF_NODE	1410:8	1410:8	11	(
CONDITION	1410:9	1410:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1410:9	1410:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1410:9	1410:14	13	tif -> tif_flags
LEAF_NODE	1410:9	1410:9	14	tif
LEAF_NODE	1410:12	1410:12	14	->
LEAF_NODE	1410:14	1410:14	14	tif_flags
LEAF_NODE	1410:23	1410:23	13	&
FIELD	1410:24	1410:24	13	TIFF_SWAB
LEAF_NODE	1410:24	1410:24	14	TIFF_SWAB
LEAF_NODE	1410:33	1410:33	11	)
STATEMENTS	1411:6	1411:6	11	
EXPR_STATEMENT	1411:6	1411:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	1411:6	1411:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	1411:6	1411:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	1411:6	1411:6	15	TIFFSwabLong
LEAF_NODE	1411:6	1411:6	16	TIFFSwabLong
LEAF_NODE	1411:18	1411:18	15	(
ARGUMENT	1411:19	1411:28	15	( uint32 * ) ma
LEAF_NODE	1411:19	1411:19	16	(
TYPE_NAME	1411:20	1411:20	16	uint32
LEAF_NODE	1411:20	1411:20	17	uint32
LEAF_NODE	1411:26	1411:26	16	*
LEAF_NODE	1411:27	1411:27	16	)
FIELD	1411:28	1411:28	16	ma
LEAF_NODE	1411:28	1411:28	17	ma
LEAF_NODE	1411:30	1411:30	15	)
LEAF_NODE	1411:31	1411:31	13	;
EXPR_STATEMENT	1412:5	1412:50	10	err = TIFFReadDirEntryCheckRangeShortSlong ( * ma ) ;
EXPR	1412:5	1412:5	11	err = TIFFReadDirEntryCheckRangeShortSlong ( * ma )
ASSIGN	1412:5	1412:9	12	err = TIFFReadDirEntryCheckRangeShortSlong ( * ma )
LVAL	1412:5	1412:5	13	err
FIELD	1412:5	1412:5	14	err
LEAF_NODE	1412:5	1412:5	15	err
ASSIGN_OP	1412:8	1412:8	13	=
LEAF_NODE	1412:8	1412:8	14	=
RVAL	1412:9	1412:9	13	TIFFReadDirEntryCheckRangeShortSlong ( * ma )
FUNCTION_CALL	1412:9	1412:49	14	TIFFReadDirEntryCheckRangeShortSlong ( * ma )
CALLEE	1412:9	1412:9	15	TIFFReadDirEntryCheckRangeShortSlong
LEAF_NODE	1412:9	1412:9	16	TIFFReadDirEntryCheckRangeShortSlong
LEAF_NODE	1412:45	1412:45	15	(
ARGUMENT	1412:46	1412:46	15	* ma
UNARY_EXPR	1412:46	1412:47	16	* ma
UNARY_OPERATOR	1412:46	1412:46	17	*
LEAF_NODE	1412:46	1412:46	18	*
FIELD	1412:47	1412:47	17	ma
LEAF_NODE	1412:47	1412:47	18	ma
LEAF_NODE	1412:49	1412:49	15	)
LEAF_NODE	1412:50	1412:50	11	;
SELECTION	1413:5	1414:6	10	
KEYWORD	1413:5	1413:5	11	if
LEAF_NODE	1413:5	1413:5	12	if
LEAF_NODE	1413:8	1413:8	11	(
CONDITION	1413:9	1413:9	11	err != TIFFReadDirEntryErrOk
EXPR	1413:9	1413:14	12	err != TIFFReadDirEntryErrOk
FIELD	1413:9	1413:9	13	err
LEAF_NODE	1413:9	1413:9	14	err
EQ_OPERATOR	1413:12	1413:12	13	!=
LEAF_NODE	1413:12	1413:12	14	!=
FIELD	1413:14	1413:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1413:14	1413:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1413:35	1413:35	11	)
STATEMENTS	1414:6	1414:6	11	
JUMP_STATEMENT	1414:6	1414:11	12	break DESTINATION ;
KEYWORD	1414:6	1414:6	13	break
LEAF_NODE	1414:6	1414:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1414:11	1414:11	13	;
EXPR_STATEMENT	1415:5	1415:26	10	* mb ++ = ( uint16 ) ( * ma ++ ) ;
EXPR	1415:5	1415:5	11	* mb ++ = ( uint16 ) ( * ma ++ )
ASSIGN	1415:5	1415:11	12	* mb ++ = ( uint16 ) ( * ma ++ )
LVAL	1415:5	1415:5	13	* mb ++
UNARY_EXPR	1415:5	1415:6	14	* mb ++
UNARY_OPERATOR	1415:5	1415:5	15	*
LEAF_NODE	1415:5	1415:5	16	*
FIELD	1415:6	1415:8	15	mb ++
LEAF_NODE	1415:6	1415:6	16	mb
LEAF_NODE	1415:8	1415:8	16	++
ASSIGN_OP	1415:10	1415:10	13	=
LEAF_NODE	1415:10	1415:10	14	=
RVAL	1415:11	1415:25	13	( uint16 ) ( * ma ++ )
LEAF_NODE	1415:11	1415:11	14	(
TYPE_NAME	1415:12	1415:12	14	uint16
LEAF_NODE	1415:12	1415:12	15	uint16
LEAF_NODE	1415:18	1415:18	14	)
LEAF_NODE	1415:19	1415:19	14	(
UNARY_EXPR	1415:20	1415:21	14	* ma ++
UNARY_OPERATOR	1415:20	1415:20	15	*
LEAF_NODE	1415:20	1415:20	16	*
FIELD	1415:21	1415:23	15	ma ++
LEAF_NODE	1415:21	1415:21	16	ma
LEAF_NODE	1415:23	1415:23	16	++
LEAF_NODE	1415:25	1415:25	14	)
LEAF_NODE	1415:26	1415:26	11	;
LEAF_NODE	1416:4	1416:4	9	}
LEAF_NODE	1417:3	1417:3	6	}
JUMP_STATEMENT	1418:3	1418:8	6	break DESTINATION ;
KEYWORD	1418:3	1418:3	7	break
LEAF_NODE	1418:3	1418:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1418:8	1418:8	7	;
LABEL	1419:2	1419:17	6	case TIFF_LONG8 :
LEAF_NODE	1419:2	1419:2	7	case
LEAF_NODE	1419:7	1419:7	7	TIFF_LONG8
LEAF_NODE	1419:17	1419:17	7	:
LEAF_NODE	1420:3	1420:3	6	{
STATEMENTS	1421:4	1426:4	6	
SIMPLE_DECL	1421:4	1421:14	7	uint64 * ma ;
VAR_DECL	1421:4	1421:12	8	uint64 * ma
TYPE	1421:4	1421:10	9	uint64 *
TYPE_NAME	1421:4	1421:4	10	uint64
LEAF_NODE	1421:4	1421:4	11	uint64
POINTER	1421:10	1421:10	10	*
LEAF_NODE	1421:10	1421:10	11	*
NAME	1421:12	1421:12	9	ma
LEAF_NODE	1421:12	1421:12	10	ma
LEAF_NODE	1421:14	1421:14	8	;
SIMPLE_DECL	1422:4	1422:14	7	uint16 * mb ;
VAR_DECL	1422:4	1422:12	8	uint16 * mb
TYPE	1422:4	1422:10	9	uint16 *
TYPE_NAME	1422:4	1422:4	10	uint16
LEAF_NODE	1422:4	1422:4	11	uint16
POINTER	1422:10	1422:10	10	*
LEAF_NODE	1422:10	1422:10	11	*
NAME	1422:12	1422:12	9	mb
LEAF_NODE	1422:12	1422:12	10	mb
LEAF_NODE	1422:14	1422:14	8	;
SIMPLE_DECL	1423:4	1423:12	7	uint32 n ;
VAR_DECL	1423:4	1423:11	8	uint32 n
TYPE	1423:4	1423:4	9	uint32
TYPE_NAME	1423:4	1423:4	10	uint32
LEAF_NODE	1423:4	1423:4	11	uint32
NAME	1423:11	1423:11	9	n
LEAF_NODE	1423:11	1423:11	10	n
LEAF_NODE	1423:12	1423:12	8	;
EXPR_STATEMENT	1424:4	1424:24	7	ma = ( uint64 * ) origdata ;
EXPR	1424:4	1424:4	8	ma = ( uint64 * ) origdata
ASSIGN	1424:4	1424:7	9	ma = ( uint64 * ) origdata
LVAL	1424:4	1424:4	10	ma
FIELD	1424:4	1424:4	11	ma
LEAF_NODE	1424:4	1424:4	12	ma
ASSIGN_OP	1424:6	1424:6	10	=
LEAF_NODE	1424:6	1424:6	11	=
RVAL	1424:7	1424:16	10	( uint64 * ) origdata
LEAF_NODE	1424:7	1424:7	11	(
TYPE_NAME	1424:8	1424:8	11	uint64
LEAF_NODE	1424:8	1424:8	12	uint64
LEAF_NODE	1424:14	1424:14	11	*
LEAF_NODE	1424:15	1424:15	11	)
FIELD	1424:16	1424:16	11	origdata
LEAF_NODE	1424:16	1424:16	12	origdata
LEAF_NODE	1424:24	1424:24	8	;
EXPR_STATEMENT	1425:4	1425:11	7	mb = data ;
EXPR	1425:4	1425:4	8	mb = data
ASSIGN	1425:4	1425:7	9	mb = data
LVAL	1425:4	1425:4	10	mb
FIELD	1425:4	1425:4	11	mb
LEAF_NODE	1425:4	1425:4	12	mb
ASSIGN_OP	1425:6	1425:6	10	=
LEAF_NODE	1425:6	1425:6	11	=
RVAL	1425:7	1425:7	10	data
FIELD	1425:7	1425:7	11	data
LEAF_NODE	1425:7	1425:7	12	data
LEAF_NODE	1425:11	1425:11	8	;
ITERATION	1426:4	1427:4	7	
KEYWORD	1426:4	1426:4	8	for
LEAF_NODE	1426:4	1426:4	9	for
LEAF_NODE	1426:8	1426:8	8	(
FOR_INIT	1426:9	1426:12	8	n = 0 ;
EXPR	1426:9	1426:9	9	n = 0
ASSIGN	1426:9	1426:11	10	n = 0
LVAL	1426:9	1426:9	11	n
FIELD	1426:9	1426:9	12	n
LEAF_NODE	1426:9	1426:9	13	n
ASSIGN_OP	1426:10	1426:10	11	=
LEAF_NODE	1426:10	1426:10	12	=
RVAL	1426:11	1426:11	11	0
FIELD	1426:11	1426:11	12	0
LEAF_NODE	1426:11	1426:11	13	0
LEAF_NODE	1426:12	1426:12	9	;
CONDITION	1426:14	1426:14	8	n < count
EXPR	1426:14	1426:16	9	n < count
FIELD	1426:14	1426:14	10	n
LEAF_NODE	1426:14	1426:14	11	n
REL_OPERATOR	1426:15	1426:15	10	<
LEAF_NODE	1426:15	1426:15	11	<
FIELD	1426:16	1426:16	10	count
LEAF_NODE	1426:16	1426:16	11	count
LEAF_NODE	1426:21	1426:21	8	;
FOR_EXPR	1426:23	1426:23	8	n ++
EXPR	1426:23	1426:23	9	n ++
FIELD	1426:23	1426:24	10	n ++
LEAF_NODE	1426:23	1426:23	11	n
LEAF_NODE	1426:24	1426:24	11	++
LEAF_NODE	1426:26	1426:26	8	)
STATEMENTS	1427:4	1434:4	8	
LEAF_NODE	1427:4	1427:4	9	{
STATEMENTS	1428:5	1433:5	9	
SELECTION	1428:5	1429:6	10	
KEYWORD	1428:5	1428:5	11	if
LEAF_NODE	1428:5	1428:5	12	if
LEAF_NODE	1428:8	1428:8	11	(
CONDITION	1428:9	1428:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1428:9	1428:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1428:9	1428:14	13	tif -> tif_flags
LEAF_NODE	1428:9	1428:9	14	tif
LEAF_NODE	1428:12	1428:12	14	->
LEAF_NODE	1428:14	1428:14	14	tif_flags
LEAF_NODE	1428:23	1428:23	13	&
FIELD	1428:24	1428:24	13	TIFF_SWAB
LEAF_NODE	1428:24	1428:24	14	TIFF_SWAB
LEAF_NODE	1428:33	1428:33	11	)
STATEMENTS	1429:6	1429:6	11	
EXPR_STATEMENT	1429:6	1429:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	1429:6	1429:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	1429:6	1429:22	14	TIFFSwabLong8 ( ma )
CALLEE	1429:6	1429:6	15	TIFFSwabLong8
LEAF_NODE	1429:6	1429:6	16	TIFFSwabLong8
LEAF_NODE	1429:19	1429:19	15	(
ARGUMENT	1429:20	1429:20	15	ma
FIELD	1429:20	1429:20	16	ma
LEAF_NODE	1429:20	1429:20	17	ma
LEAF_NODE	1429:22	1429:22	15	)
LEAF_NODE	1429:23	1429:23	13	;
EXPR_STATEMENT	1430:5	1430:50	10	err = TIFFReadDirEntryCheckRangeShortLong8 ( * ma ) ;
EXPR	1430:5	1430:5	11	err = TIFFReadDirEntryCheckRangeShortLong8 ( * ma )
ASSIGN	1430:5	1430:9	12	err = TIFFReadDirEntryCheckRangeShortLong8 ( * ma )
LVAL	1430:5	1430:5	13	err
FIELD	1430:5	1430:5	14	err
LEAF_NODE	1430:5	1430:5	15	err
ASSIGN_OP	1430:8	1430:8	13	=
LEAF_NODE	1430:8	1430:8	14	=
RVAL	1430:9	1430:9	13	TIFFReadDirEntryCheckRangeShortLong8 ( * ma )
FUNCTION_CALL	1430:9	1430:49	14	TIFFReadDirEntryCheckRangeShortLong8 ( * ma )
CALLEE	1430:9	1430:9	15	TIFFReadDirEntryCheckRangeShortLong8
LEAF_NODE	1430:9	1430:9	16	TIFFReadDirEntryCheckRangeShortLong8
LEAF_NODE	1430:45	1430:45	15	(
ARGUMENT	1430:46	1430:46	15	* ma
UNARY_EXPR	1430:46	1430:47	16	* ma
UNARY_OPERATOR	1430:46	1430:46	17	*
LEAF_NODE	1430:46	1430:46	18	*
FIELD	1430:47	1430:47	17	ma
LEAF_NODE	1430:47	1430:47	18	ma
LEAF_NODE	1430:49	1430:49	15	)
LEAF_NODE	1430:50	1430:50	11	;
SELECTION	1431:5	1432:6	10	
KEYWORD	1431:5	1431:5	11	if
LEAF_NODE	1431:5	1431:5	12	if
LEAF_NODE	1431:8	1431:8	11	(
CONDITION	1431:9	1431:9	11	err != TIFFReadDirEntryErrOk
EXPR	1431:9	1431:14	12	err != TIFFReadDirEntryErrOk
FIELD	1431:9	1431:9	13	err
LEAF_NODE	1431:9	1431:9	14	err
EQ_OPERATOR	1431:12	1431:12	13	!=
LEAF_NODE	1431:12	1431:12	14	!=
FIELD	1431:14	1431:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1431:14	1431:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1431:35	1431:35	11	)
STATEMENTS	1432:6	1432:6	11	
JUMP_STATEMENT	1432:6	1432:11	12	break DESTINATION ;
KEYWORD	1432:6	1432:6	13	break
LEAF_NODE	1432:6	1432:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1432:11	1432:11	13	;
EXPR_STATEMENT	1433:5	1433:26	10	* mb ++ = ( uint16 ) ( * ma ++ ) ;
EXPR	1433:5	1433:5	11	* mb ++ = ( uint16 ) ( * ma ++ )
ASSIGN	1433:5	1433:11	12	* mb ++ = ( uint16 ) ( * ma ++ )
LVAL	1433:5	1433:5	13	* mb ++
UNARY_EXPR	1433:5	1433:6	14	* mb ++
UNARY_OPERATOR	1433:5	1433:5	15	*
LEAF_NODE	1433:5	1433:5	16	*
FIELD	1433:6	1433:8	15	mb ++
LEAF_NODE	1433:6	1433:6	16	mb
LEAF_NODE	1433:8	1433:8	16	++
ASSIGN_OP	1433:10	1433:10	13	=
LEAF_NODE	1433:10	1433:10	14	=
RVAL	1433:11	1433:25	13	( uint16 ) ( * ma ++ )
LEAF_NODE	1433:11	1433:11	14	(
TYPE_NAME	1433:12	1433:12	14	uint16
LEAF_NODE	1433:12	1433:12	15	uint16
LEAF_NODE	1433:18	1433:18	14	)
LEAF_NODE	1433:19	1433:19	14	(
UNARY_EXPR	1433:20	1433:21	14	* ma ++
UNARY_OPERATOR	1433:20	1433:20	15	*
LEAF_NODE	1433:20	1433:20	16	*
FIELD	1433:21	1433:23	15	ma ++
LEAF_NODE	1433:21	1433:21	16	ma
LEAF_NODE	1433:23	1433:23	16	++
LEAF_NODE	1433:25	1433:25	14	)
LEAF_NODE	1433:26	1433:26	11	;
LEAF_NODE	1434:4	1434:4	9	}
LEAF_NODE	1435:3	1435:3	6	}
JUMP_STATEMENT	1436:3	1436:8	6	break DESTINATION ;
KEYWORD	1436:3	1436:3	7	break
LEAF_NODE	1436:3	1436:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1436:8	1436:8	7	;
LABEL	1437:2	1437:18	6	case TIFF_SLONG8 :
LEAF_NODE	1437:2	1437:2	7	case
LEAF_NODE	1437:7	1437:7	7	TIFF_SLONG8
LEAF_NODE	1437:18	1437:18	7	:
LEAF_NODE	1438:3	1438:3	6	{
STATEMENTS	1439:4	1444:4	6	
SIMPLE_DECL	1439:4	1439:13	7	int64 * ma ;
VAR_DECL	1439:4	1439:11	8	int64 * ma
TYPE	1439:4	1439:9	9	int64 *
TYPE_NAME	1439:4	1439:4	10	int64
LEAF_NODE	1439:4	1439:4	11	int64
POINTER	1439:9	1439:9	10	*
LEAF_NODE	1439:9	1439:9	11	*
NAME	1439:11	1439:11	9	ma
LEAF_NODE	1439:11	1439:11	10	ma
LEAF_NODE	1439:13	1439:13	8	;
SIMPLE_DECL	1440:4	1440:14	7	uint16 * mb ;
VAR_DECL	1440:4	1440:12	8	uint16 * mb
TYPE	1440:4	1440:10	9	uint16 *
TYPE_NAME	1440:4	1440:4	10	uint16
LEAF_NODE	1440:4	1440:4	11	uint16
POINTER	1440:10	1440:10	10	*
LEAF_NODE	1440:10	1440:10	11	*
NAME	1440:12	1440:12	9	mb
LEAF_NODE	1440:12	1440:12	10	mb
LEAF_NODE	1440:14	1440:14	8	;
SIMPLE_DECL	1441:4	1441:12	7	uint32 n ;
VAR_DECL	1441:4	1441:11	8	uint32 n
TYPE	1441:4	1441:4	9	uint32
TYPE_NAME	1441:4	1441:4	10	uint32
LEAF_NODE	1441:4	1441:4	11	uint32
NAME	1441:11	1441:11	9	n
LEAF_NODE	1441:11	1441:11	10	n
LEAF_NODE	1441:12	1441:12	8	;
EXPR_STATEMENT	1442:4	1442:23	7	ma = ( int64 * ) origdata ;
EXPR	1442:4	1442:4	8	ma = ( int64 * ) origdata
ASSIGN	1442:4	1442:7	9	ma = ( int64 * ) origdata
LVAL	1442:4	1442:4	10	ma
FIELD	1442:4	1442:4	11	ma
LEAF_NODE	1442:4	1442:4	12	ma
ASSIGN_OP	1442:6	1442:6	10	=
LEAF_NODE	1442:6	1442:6	11	=
RVAL	1442:7	1442:15	10	( int64 * ) origdata
LEAF_NODE	1442:7	1442:7	11	(
TYPE_NAME	1442:8	1442:8	11	int64
LEAF_NODE	1442:8	1442:8	12	int64
LEAF_NODE	1442:13	1442:13	11	*
LEAF_NODE	1442:14	1442:14	11	)
FIELD	1442:15	1442:15	11	origdata
LEAF_NODE	1442:15	1442:15	12	origdata
LEAF_NODE	1442:23	1442:23	8	;
EXPR_STATEMENT	1443:4	1443:11	7	mb = data ;
EXPR	1443:4	1443:4	8	mb = data
ASSIGN	1443:4	1443:7	9	mb = data
LVAL	1443:4	1443:4	10	mb
FIELD	1443:4	1443:4	11	mb
LEAF_NODE	1443:4	1443:4	12	mb
ASSIGN_OP	1443:6	1443:6	10	=
LEAF_NODE	1443:6	1443:6	11	=
RVAL	1443:7	1443:7	10	data
FIELD	1443:7	1443:7	11	data
LEAF_NODE	1443:7	1443:7	12	data
LEAF_NODE	1443:11	1443:11	8	;
ITERATION	1444:4	1445:4	7	
KEYWORD	1444:4	1444:4	8	for
LEAF_NODE	1444:4	1444:4	9	for
LEAF_NODE	1444:8	1444:8	8	(
FOR_INIT	1444:9	1444:12	8	n = 0 ;
EXPR	1444:9	1444:9	9	n = 0
ASSIGN	1444:9	1444:11	10	n = 0
LVAL	1444:9	1444:9	11	n
FIELD	1444:9	1444:9	12	n
LEAF_NODE	1444:9	1444:9	13	n
ASSIGN_OP	1444:10	1444:10	11	=
LEAF_NODE	1444:10	1444:10	12	=
RVAL	1444:11	1444:11	11	0
FIELD	1444:11	1444:11	12	0
LEAF_NODE	1444:11	1444:11	13	0
LEAF_NODE	1444:12	1444:12	9	;
CONDITION	1444:14	1444:14	8	n < count
EXPR	1444:14	1444:16	9	n < count
FIELD	1444:14	1444:14	10	n
LEAF_NODE	1444:14	1444:14	11	n
REL_OPERATOR	1444:15	1444:15	10	<
LEAF_NODE	1444:15	1444:15	11	<
FIELD	1444:16	1444:16	10	count
LEAF_NODE	1444:16	1444:16	11	count
LEAF_NODE	1444:21	1444:21	8	;
FOR_EXPR	1444:23	1444:23	8	n ++
EXPR	1444:23	1444:23	9	n ++
FIELD	1444:23	1444:24	10	n ++
LEAF_NODE	1444:23	1444:23	11	n
LEAF_NODE	1444:24	1444:24	11	++
LEAF_NODE	1444:26	1444:26	8	)
STATEMENTS	1445:4	1452:4	8	
LEAF_NODE	1445:4	1445:4	9	{
STATEMENTS	1446:5	1451:5	9	
SELECTION	1446:5	1447:6	10	
KEYWORD	1446:5	1446:5	11	if
LEAF_NODE	1446:5	1446:5	12	if
LEAF_NODE	1446:8	1446:8	11	(
CONDITION	1446:9	1446:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1446:9	1446:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1446:9	1446:14	13	tif -> tif_flags
LEAF_NODE	1446:9	1446:9	14	tif
LEAF_NODE	1446:12	1446:12	14	->
LEAF_NODE	1446:14	1446:14	14	tif_flags
LEAF_NODE	1446:23	1446:23	13	&
FIELD	1446:24	1446:24	13	TIFF_SWAB
LEAF_NODE	1446:24	1446:24	14	TIFF_SWAB
LEAF_NODE	1446:33	1446:33	11	)
STATEMENTS	1447:6	1447:6	11	
EXPR_STATEMENT	1447:6	1447:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	1447:6	1447:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	1447:6	1447:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	1447:6	1447:6	15	TIFFSwabLong8
LEAF_NODE	1447:6	1447:6	16	TIFFSwabLong8
LEAF_NODE	1447:19	1447:19	15	(
ARGUMENT	1447:20	1447:29	15	( uint64 * ) ma
LEAF_NODE	1447:20	1447:20	16	(
TYPE_NAME	1447:21	1447:21	16	uint64
LEAF_NODE	1447:21	1447:21	17	uint64
LEAF_NODE	1447:27	1447:27	16	*
LEAF_NODE	1447:28	1447:28	16	)
FIELD	1447:29	1447:29	16	ma
LEAF_NODE	1447:29	1447:29	17	ma
LEAF_NODE	1447:31	1447:31	15	)
LEAF_NODE	1447:32	1447:32	13	;
EXPR_STATEMENT	1448:5	1448:51	10	err = TIFFReadDirEntryCheckRangeShortSlong8 ( * ma ) ;
EXPR	1448:5	1448:5	11	err = TIFFReadDirEntryCheckRangeShortSlong8 ( * ma )
ASSIGN	1448:5	1448:9	12	err = TIFFReadDirEntryCheckRangeShortSlong8 ( * ma )
LVAL	1448:5	1448:5	13	err
FIELD	1448:5	1448:5	14	err
LEAF_NODE	1448:5	1448:5	15	err
ASSIGN_OP	1448:8	1448:8	13	=
LEAF_NODE	1448:8	1448:8	14	=
RVAL	1448:9	1448:9	13	TIFFReadDirEntryCheckRangeShortSlong8 ( * ma )
FUNCTION_CALL	1448:9	1448:50	14	TIFFReadDirEntryCheckRangeShortSlong8 ( * ma )
CALLEE	1448:9	1448:9	15	TIFFReadDirEntryCheckRangeShortSlong8
LEAF_NODE	1448:9	1448:9	16	TIFFReadDirEntryCheckRangeShortSlong8
LEAF_NODE	1448:46	1448:46	15	(
ARGUMENT	1448:47	1448:47	15	* ma
UNARY_EXPR	1448:47	1448:48	16	* ma
UNARY_OPERATOR	1448:47	1448:47	17	*
LEAF_NODE	1448:47	1448:47	18	*
FIELD	1448:48	1448:48	17	ma
LEAF_NODE	1448:48	1448:48	18	ma
LEAF_NODE	1448:50	1448:50	15	)
LEAF_NODE	1448:51	1448:51	11	;
SELECTION	1449:5	1450:6	10	
KEYWORD	1449:5	1449:5	11	if
LEAF_NODE	1449:5	1449:5	12	if
LEAF_NODE	1449:8	1449:8	11	(
CONDITION	1449:9	1449:9	11	err != TIFFReadDirEntryErrOk
EXPR	1449:9	1449:14	12	err != TIFFReadDirEntryErrOk
FIELD	1449:9	1449:9	13	err
LEAF_NODE	1449:9	1449:9	14	err
EQ_OPERATOR	1449:12	1449:12	13	!=
LEAF_NODE	1449:12	1449:12	14	!=
FIELD	1449:14	1449:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1449:14	1449:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1449:35	1449:35	11	)
STATEMENTS	1450:6	1450:6	11	
JUMP_STATEMENT	1450:6	1450:11	12	break DESTINATION ;
KEYWORD	1450:6	1450:6	13	break
LEAF_NODE	1450:6	1450:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1450:11	1450:11	13	;
EXPR_STATEMENT	1451:5	1451:26	10	* mb ++ = ( uint16 ) ( * ma ++ ) ;
EXPR	1451:5	1451:5	11	* mb ++ = ( uint16 ) ( * ma ++ )
ASSIGN	1451:5	1451:11	12	* mb ++ = ( uint16 ) ( * ma ++ )
LVAL	1451:5	1451:5	13	* mb ++
UNARY_EXPR	1451:5	1451:6	14	* mb ++
UNARY_OPERATOR	1451:5	1451:5	15	*
LEAF_NODE	1451:5	1451:5	16	*
FIELD	1451:6	1451:8	15	mb ++
LEAF_NODE	1451:6	1451:6	16	mb
LEAF_NODE	1451:8	1451:8	16	++
ASSIGN_OP	1451:10	1451:10	13	=
LEAF_NODE	1451:10	1451:10	14	=
RVAL	1451:11	1451:25	13	( uint16 ) ( * ma ++ )
LEAF_NODE	1451:11	1451:11	14	(
TYPE_NAME	1451:12	1451:12	14	uint16
LEAF_NODE	1451:12	1451:12	15	uint16
LEAF_NODE	1451:18	1451:18	14	)
LEAF_NODE	1451:19	1451:19	14	(
UNARY_EXPR	1451:20	1451:21	14	* ma ++
UNARY_OPERATOR	1451:20	1451:20	15	*
LEAF_NODE	1451:20	1451:20	16	*
FIELD	1451:21	1451:23	15	ma ++
LEAF_NODE	1451:21	1451:21	16	ma
LEAF_NODE	1451:23	1451:23	16	++
LEAF_NODE	1451:25	1451:25	14	)
LEAF_NODE	1451:26	1451:26	11	;
LEAF_NODE	1452:4	1452:4	9	}
LEAF_NODE	1453:3	1453:3	6	}
JUMP_STATEMENT	1454:3	1454:8	6	break DESTINATION ;
KEYWORD	1454:3	1454:3	7	break
LEAF_NODE	1454:3	1454:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1454:8	1454:8	7	;
LEAF_NODE	1455:1	1455:1	5	}
EXPR_STATEMENT	1456:1	1456:20	3	_TIFFfree ( origdata ) ;
EXPR	1456:1	1456:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	1456:1	1456:19	5	_TIFFfree ( origdata )
CALLEE	1456:1	1456:1	6	_TIFFfree
LEAF_NODE	1456:1	1456:1	7	_TIFFfree
LEAF_NODE	1456:10	1456:10	6	(
ARGUMENT	1456:11	1456:11	6	origdata
FIELD	1456:11	1456:11	7	origdata
LEAF_NODE	1456:11	1456:11	8	origdata
LEAF_NODE	1456:19	1456:19	6	)
LEAF_NODE	1456:20	1456:20	4	;
SELECTION	1457:1	1458:1	3	
KEYWORD	1457:1	1457:1	4	if
LEAF_NODE	1457:1	1457:1	5	if
LEAF_NODE	1457:4	1457:4	4	(
CONDITION	1457:5	1457:5	4	err != TIFFReadDirEntryErrOk
EXPR	1457:5	1457:10	5	err != TIFFReadDirEntryErrOk
FIELD	1457:5	1457:5	6	err
LEAF_NODE	1457:5	1457:5	7	err
EQ_OPERATOR	1457:8	1457:8	6	!=
LEAF_NODE	1457:8	1457:8	7	!=
FIELD	1457:10	1457:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1457:10	1457:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	1457:31	1457:31	4	)
STATEMENTS	1458:1	1461:1	4	
LEAF_NODE	1458:1	1458:1	5	{
STATEMENTS	1459:2	1460:13	5	
EXPR_STATEMENT	1459:2	1459:17	6	_TIFFfree ( data ) ;
EXPR	1459:2	1459:2	7	_TIFFfree ( data )
FUNCTION_CALL	1459:2	1459:16	8	_TIFFfree ( data )
CALLEE	1459:2	1459:2	9	_TIFFfree
LEAF_NODE	1459:2	1459:2	10	_TIFFfree
LEAF_NODE	1459:11	1459:11	9	(
ARGUMENT	1459:12	1459:12	9	data
FIELD	1459:12	1459:12	10	data
LEAF_NODE	1459:12	1459:12	11	data
LEAF_NODE	1459:16	1459:16	9	)
LEAF_NODE	1459:17	1459:17	7	;
LEAF_NODE	1460:2	1460:2	6	return
LEAF_NODE	1460:8	1460:8	6	(
LEAF_NODE	1460:9	1460:9	6	err
LEAF_NODE	1460:12	1460:12	6	)
LEAF_NODE	1460:13	1460:13	6	;
LEAF_NODE	1461:1	1461:1	5	}
EXPR_STATEMENT	1462:1	1462:12	3	* value = data ;
EXPR	1462:1	1462:1	4	* value = data
ASSIGN	1462:1	1462:8	5	* value = data
LVAL	1462:1	1462:1	6	* value
UNARY_EXPR	1462:1	1462:2	7	* value
UNARY_OPERATOR	1462:1	1462:1	8	*
LEAF_NODE	1462:1	1462:1	9	*
FIELD	1462:2	1462:2	8	value
LEAF_NODE	1462:2	1462:2	9	value
ASSIGN_OP	1462:7	1462:7	6	=
LEAF_NODE	1462:7	1462:7	7	=
RVAL	1462:8	1462:8	6	data
FIELD	1462:8	1462:8	7	data
LEAF_NODE	1462:8	1462:8	8	data
LEAF_NODE	1462:12	1462:12	4	;
LEAF_NODE	1463:1	1463:1	3	return
LEAF_NODE	1463:7	1463:7	3	(
LEAF_NODE	1463:8	1463:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	1463:29	1463:29	3	)
LEAF_NODE	1463:30	1463:30	3	;
LEAF_NODE	1464:0	1464:0	2	}
FUNCTION_DEF	1466:0	1631:0	1	
RETURN_TYPE	1466:0	1466:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	1466:0	1466:0	3	static
TYPE_NAME	1466:7	1466:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	1466:7	1466:7	4	enum
LEAF_NODE	1466:12	1466:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	1466:32	1466:32	2	TIFFReadDirEntrySshortArray
LEAF_NODE	1466:32	1466:32	3	TIFFReadDirEntrySshortArray
PARAMETER_LIST	1466:59	1466:108	2	( TIFF * tif , TIFFDirEntry * direntry , int16 * * value )
LEAF_NODE	1466:59	1466:59	3	(
PARAMETER_DECL	1466:60	1466:66	3	TIFF * tif
TYPE	1466:60	1466:64	4	TIFF *
TYPE_NAME	1466:60	1466:60	5	TIFF
LEAF_NODE	1466:60	1466:60	6	TIFF
POINTER	1466:64	1466:64	5	*
LEAF_NODE	1466:64	1466:64	6	*
NAME	1466:66	1466:66	4	tif
LEAF_NODE	1466:66	1466:66	5	tif
LEAF_NODE	1466:69	1466:69	3	,
PARAMETER_DECL	1466:71	1466:85	3	TIFFDirEntry * direntry
TYPE	1466:71	1466:83	4	TIFFDirEntry *
TYPE_NAME	1466:71	1466:71	5	TIFFDirEntry
LEAF_NODE	1466:71	1466:71	6	TIFFDirEntry
POINTER	1466:83	1466:83	5	*
LEAF_NODE	1466:83	1466:83	6	*
NAME	1466:85	1466:85	4	direntry
LEAF_NODE	1466:85	1466:85	5	direntry
LEAF_NODE	1466:93	1466:93	3	,
PARAMETER_DECL	1466:95	1466:103	3	int16 * * value
TYPE	1466:95	1466:100	4	int16 * *
TYPE_NAME	1466:95	1466:95	5	int16
LEAF_NODE	1466:95	1466:95	6	int16
POINTER	1466:100	1466:101	5	* *
LEAF_NODE	1466:100	1466:100	6	*
LEAF_NODE	1466:101	1466:101	6	*
NAME	1466:103	1466:103	4	value
LEAF_NODE	1466:103	1466:103	5	value
LEAF_NODE	1466:108	1466:108	3	)
LEAF_NODE	1467:0	1467:0	2	{
STATEMENTS	1468:1	1630:30	2	
SIMPLE_DECL	1468:1	1468:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	1468:1	1468:26	4	enum TIFFReadDirEntryErr err
TYPE	1468:1	1468:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	1468:1	1468:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	1468:1	1468:1	7	enum
LEAF_NODE	1468:6	1468:6	7	TIFFReadDirEntryErr
NAME	1468:26	1468:26	5	err
LEAF_NODE	1468:26	1468:26	6	err
LEAF_NODE	1468:29	1468:29	4	;
SIMPLE_DECL	1469:1	1469:13	3	uint32 count ;
VAR_DECL	1469:1	1469:8	4	uint32 count
TYPE	1469:1	1469:1	5	uint32
TYPE_NAME	1469:1	1469:1	6	uint32
LEAF_NODE	1469:1	1469:1	7	uint32
NAME	1469:8	1469:8	5	count
LEAF_NODE	1469:8	1469:8	6	count
LEAF_NODE	1469:13	1469:13	4	;
SIMPLE_DECL	1470:1	1470:15	3	void * origdata ;
VAR_DECL	1470:1	1470:7	4	void * origdata
TYPE	1470:1	1470:5	5	void *
TYPE_NAME	1470:1	1470:1	6	void
LEAF_NODE	1470:1	1470:1	7	void
POINTER	1470:5	1470:5	6	*
LEAF_NODE	1470:5	1470:5	7	*
NAME	1470:7	1470:7	5	origdata
LEAF_NODE	1470:7	1470:7	6	origdata
LEAF_NODE	1470:15	1470:15	4	;
SIMPLE_DECL	1471:1	1471:12	3	int16 * data ;
VAR_DECL	1471:1	1471:8	4	int16 * data
TYPE	1471:1	1471:6	5	int16 *
TYPE_NAME	1471:1	1471:1	6	int16
LEAF_NODE	1471:1	1471:1	7	int16
POINTER	1471:6	1471:6	6	*
LEAF_NODE	1471:6	1471:6	7	*
NAME	1471:8	1471:8	5	data
LEAF_NODE	1471:8	1471:8	6	data
LEAF_NODE	1471:12	1471:12	4	;
SELECTION	1472:1	1473:1	3	
KEYWORD	1472:1	1472:1	4	switch
LEAF_NODE	1472:1	1472:1	5	switch
LEAF_NODE	1472:8	1472:8	4	(
CONDITION	1472:9	1472:9	4	direntry -> tdir_type
EXPR	1472:9	1472:9	5	direntry -> tdir_type
FIELD	1472:9	1472:19	6	direntry -> tdir_type
LEAF_NODE	1472:9	1472:9	7	direntry
LEAF_NODE	1472:17	1472:17	7	->
LEAF_NODE	1472:19	1472:19	7	tdir_type
LEAF_NODE	1472:28	1472:28	4	)
STATEMENTS	1473:1	1485:1	4	
LEAF_NODE	1473:1	1473:1	5	{
STATEMENTS	1474:2	1484:34	5	
LABEL	1474:2	1474:16	6	case TIFF_BYTE :
LEAF_NODE	1474:2	1474:2	7	case
LEAF_NODE	1474:7	1474:7	7	TIFF_BYTE
LEAF_NODE	1474:16	1474:16	7	:
LABEL	1475:2	1475:17	6	case TIFF_SBYTE :
LEAF_NODE	1475:2	1475:2	7	case
LEAF_NODE	1475:7	1475:7	7	TIFF_SBYTE
LEAF_NODE	1475:17	1475:17	7	:
LABEL	1476:2	1476:17	6	case TIFF_SHORT :
LEAF_NODE	1476:2	1476:2	7	case
LEAF_NODE	1476:7	1476:7	7	TIFF_SHORT
LEAF_NODE	1476:17	1476:17	7	:
LABEL	1477:2	1477:18	6	case TIFF_SSHORT :
LEAF_NODE	1477:2	1477:2	7	case
LEAF_NODE	1477:7	1477:7	7	TIFF_SSHORT
LEAF_NODE	1477:18	1477:18	7	:
LABEL	1478:2	1478:16	6	case TIFF_LONG :
LEAF_NODE	1478:2	1478:2	7	case
LEAF_NODE	1478:7	1478:7	7	TIFF_LONG
LEAF_NODE	1478:16	1478:16	7	:
LABEL	1479:2	1479:17	6	case TIFF_SLONG :
LEAF_NODE	1479:2	1479:2	7	case
LEAF_NODE	1479:7	1479:7	7	TIFF_SLONG
LEAF_NODE	1479:17	1479:17	7	:
LABEL	1480:2	1480:17	6	case TIFF_LONG8 :
LEAF_NODE	1480:2	1480:2	7	case
LEAF_NODE	1480:7	1480:7	7	TIFF_LONG8
LEAF_NODE	1480:17	1480:17	7	:
LABEL	1481:2	1481:18	6	case TIFF_SLONG8 :
LEAF_NODE	1481:2	1481:2	7	case
LEAF_NODE	1481:7	1481:7	7	TIFF_SLONG8
LEAF_NODE	1481:18	1481:18	7	:
JUMP_STATEMENT	1482:3	1482:8	6	break DESTINATION ;
KEYWORD	1482:3	1482:3	7	break
LEAF_NODE	1482:3	1482:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1482:8	1482:8	7	;
LABEL	1483:2	1483:9	6	default :
LEAF_NODE	1483:2	1483:2	7	default
LEAF_NODE	1483:9	1483:9	7	:
LEAF_NODE	1484:3	1484:3	6	return
LEAF_NODE	1484:9	1484:9	6	(
LEAF_NODE	1484:10	1484:10	6	TIFFReadDirEntryErrType
LEAF_NODE	1484:33	1484:33	6	)
LEAF_NODE	1484:34	1484:34	6	;
LEAF_NODE	1485:1	1485:1	5	}
EXPR_STATEMENT	1486:1	1486:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata ) ;
EXPR	1486:1	1486:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
ASSIGN	1486:1	1486:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
LVAL	1486:1	1486:1	6	err
FIELD	1486:1	1486:1	7	err
LEAF_NODE	1486:1	1486:1	8	err
ASSIGN_OP	1486:4	1486:4	6	=
LEAF_NODE	1486:4	1486:4	7	=
RVAL	1486:5	1486:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
FUNCTION_CALL	1486:5	1486:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 2 , & origdata )
CALLEE	1486:5	1486:5	8	TIFFReadDirEntryArray
LEAF_NODE	1486:5	1486:5	9	TIFFReadDirEntryArray
LEAF_NODE	1486:26	1486:26	8	(
ARGUMENT	1486:27	1486:27	8	tif
FIELD	1486:27	1486:27	9	tif
LEAF_NODE	1486:27	1486:27	10	tif
LEAF_NODE	1486:30	1486:30	8	,
ARGUMENT	1486:31	1486:31	8	direntry
FIELD	1486:31	1486:31	9	direntry
LEAF_NODE	1486:31	1486:31	10	direntry
LEAF_NODE	1486:39	1486:39	8	,
ARGUMENT	1486:40	1486:40	8	& count
UNARY_EXPR	1486:40	1486:41	9	& count
UNARY_OPERATOR	1486:40	1486:40	10	&
LEAF_NODE	1486:40	1486:40	11	&
FIELD	1486:41	1486:41	10	count
LEAF_NODE	1486:41	1486:41	11	count
LEAF_NODE	1486:46	1486:46	8	,
ARGUMENT	1486:47	1486:47	8	2
FIELD	1486:47	1486:47	9	2
LEAF_NODE	1486:47	1486:47	10	2
LEAF_NODE	1486:48	1486:48	8	,
ARGUMENT	1486:49	1486:49	8	& origdata
UNARY_EXPR	1486:49	1486:50	9	& origdata
UNARY_OPERATOR	1486:49	1486:49	10	&
LEAF_NODE	1486:49	1486:49	11	&
FIELD	1486:50	1486:50	10	origdata
LEAF_NODE	1486:50	1486:50	11	origdata
LEAF_NODE	1486:58	1486:58	8	)
LEAF_NODE	1486:59	1486:59	4	;
SELECTION	1487:1	1488:1	3	
KEYWORD	1487:1	1487:1	4	if
LEAF_NODE	1487:1	1487:1	5	if
LEAF_NODE	1487:4	1487:4	4	(
CONDITION	1487:5	1487:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1487:5	1487:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	1487:5	1487:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1487:5	1487:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	1487:5	1487:5	8	(
FIELD	1487:6	1487:6	8	err
LEAF_NODE	1487:6	1487:6	9	err
EQ_OPERATOR	1487:9	1487:9	8	!=
LEAF_NODE	1487:9	1487:9	9	!=
FIELD	1487:11	1487:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	1487:11	1487:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	1487:32	1487:32	8	)
LEAF_NODE	1487:33	1487:33	7	||
EXPR	1487:35	1487:47	7	( origdata == 0 )
LEAF_NODE	1487:35	1487:35	8	(
FIELD	1487:36	1487:36	8	origdata
LEAF_NODE	1487:36	1487:36	9	origdata
EQ_OPERATOR	1487:44	1487:44	8	==
LEAF_NODE	1487:44	1487:44	9	==
FIELD	1487:46	1487:46	8	0
LEAF_NODE	1487:46	1487:46	9	0
LEAF_NODE	1487:47	1487:47	8	)
LEAF_NODE	1487:48	1487:48	4	)
STATEMENTS	1488:1	1491:1	4	
LEAF_NODE	1488:1	1488:1	5	{
STATEMENTS	1489:2	1490:13	5	
EXPR_STATEMENT	1489:2	1489:10	6	* value = 0 ;
EXPR	1489:2	1489:2	7	* value = 0
ASSIGN	1489:2	1489:9	8	* value = 0
LVAL	1489:2	1489:2	9	* value
UNARY_EXPR	1489:2	1489:3	10	* value
UNARY_OPERATOR	1489:2	1489:2	11	*
LEAF_NODE	1489:2	1489:2	12	*
FIELD	1489:3	1489:3	11	value
LEAF_NODE	1489:3	1489:3	12	value
ASSIGN_OP	1489:8	1489:8	9	=
LEAF_NODE	1489:8	1489:8	10	=
RVAL	1489:9	1489:9	9	0
FIELD	1489:9	1489:9	10	0
LEAF_NODE	1489:9	1489:9	11	0
LEAF_NODE	1489:10	1489:10	7	;
LEAF_NODE	1490:2	1490:2	6	return
LEAF_NODE	1490:8	1490:8	6	(
LEAF_NODE	1490:9	1490:9	6	err
LEAF_NODE	1490:12	1490:12	6	)
LEAF_NODE	1490:13	1490:13	6	;
LEAF_NODE	1491:1	1491:1	5	}
SELECTION	1492:1	1493:1	3	
KEYWORD	1492:1	1492:1	4	switch
LEAF_NODE	1492:1	1492:1	5	switch
LEAF_NODE	1492:8	1492:8	4	(
CONDITION	1492:9	1492:9	4	direntry -> tdir_type
EXPR	1492:9	1492:9	5	direntry -> tdir_type
FIELD	1492:9	1492:19	6	direntry -> tdir_type
LEAF_NODE	1492:9	1492:9	7	direntry
LEAF_NODE	1492:17	1492:17	7	->
LEAF_NODE	1492:19	1492:19	7	tdir_type
LEAF_NODE	1492:28	1492:28	4	)
STATEMENTS	1493:1	1519:1	4	
LEAF_NODE	1493:1	1493:1	5	{
STATEMENTS	1494:2	1518:32	5	
LABEL	1494:2	1494:17	6	case TIFF_SHORT :
LEAF_NODE	1494:2	1494:2	7	case
LEAF_NODE	1494:7	1494:7	7	TIFF_SHORT
LEAF_NODE	1494:17	1494:17	7	:
LEAF_NODE	1495:3	1495:3	6	{
STATEMENTS	1496:4	1512:33	6	
SIMPLE_DECL	1496:4	1496:13	7	uint16 * m ;
VAR_DECL	1496:4	1496:12	8	uint16 * m
TYPE	1496:4	1496:10	9	uint16 *
TYPE_NAME	1496:4	1496:4	10	uint16
LEAF_NODE	1496:4	1496:4	11	uint16
POINTER	1496:10	1496:10	10	*
LEAF_NODE	1496:10	1496:10	11	*
NAME	1496:12	1496:12	9	m
LEAF_NODE	1496:12	1496:12	10	m
LEAF_NODE	1496:13	1496:13	8	;
SIMPLE_DECL	1497:4	1497:12	7	uint32 n ;
VAR_DECL	1497:4	1497:11	8	uint32 n
TYPE	1497:4	1497:4	9	uint32
TYPE_NAME	1497:4	1497:4	10	uint32
LEAF_NODE	1497:4	1497:4	11	uint32
NAME	1497:11	1497:11	9	n
LEAF_NODE	1497:11	1497:11	10	n
LEAF_NODE	1497:12	1497:12	8	;
EXPR_STATEMENT	1498:4	1498:23	7	m = ( uint16 * ) origdata ;
EXPR	1498:4	1498:4	8	m = ( uint16 * ) origdata
ASSIGN	1498:4	1498:6	9	m = ( uint16 * ) origdata
LVAL	1498:4	1498:4	10	m
FIELD	1498:4	1498:4	11	m
LEAF_NODE	1498:4	1498:4	12	m
ASSIGN_OP	1498:5	1498:5	10	=
LEAF_NODE	1498:5	1498:5	11	=
RVAL	1498:6	1498:15	10	( uint16 * ) origdata
LEAF_NODE	1498:6	1498:6	11	(
TYPE_NAME	1498:7	1498:7	11	uint16
LEAF_NODE	1498:7	1498:7	12	uint16
LEAF_NODE	1498:13	1498:13	11	*
LEAF_NODE	1498:14	1498:14	11	)
FIELD	1498:15	1498:15	11	origdata
LEAF_NODE	1498:15	1498:15	12	origdata
LEAF_NODE	1498:23	1498:23	8	;
ITERATION	1499:4	1500:4	7	
KEYWORD	1499:4	1499:4	8	for
LEAF_NODE	1499:4	1499:4	9	for
LEAF_NODE	1499:8	1499:8	8	(
FOR_INIT	1499:9	1499:12	8	n = 0 ;
EXPR	1499:9	1499:9	9	n = 0
ASSIGN	1499:9	1499:11	10	n = 0
LVAL	1499:9	1499:9	11	n
FIELD	1499:9	1499:9	12	n
LEAF_NODE	1499:9	1499:9	13	n
ASSIGN_OP	1499:10	1499:10	11	=
LEAF_NODE	1499:10	1499:10	12	=
RVAL	1499:11	1499:11	11	0
FIELD	1499:11	1499:11	12	0
LEAF_NODE	1499:11	1499:11	13	0
LEAF_NODE	1499:12	1499:12	9	;
CONDITION	1499:14	1499:14	8	n < count
EXPR	1499:14	1499:16	9	n < count
FIELD	1499:14	1499:14	10	n
LEAF_NODE	1499:14	1499:14	11	n
REL_OPERATOR	1499:15	1499:15	10	<
LEAF_NODE	1499:15	1499:15	11	<
FIELD	1499:16	1499:16	10	count
LEAF_NODE	1499:16	1499:16	11	count
LEAF_NODE	1499:21	1499:21	8	;
FOR_EXPR	1499:23	1499:23	8	n ++
EXPR	1499:23	1499:23	9	n ++
FIELD	1499:23	1499:24	10	n ++
LEAF_NODE	1499:23	1499:23	11	n
LEAF_NODE	1499:24	1499:24	11	++
LEAF_NODE	1499:26	1499:26	8	)
STATEMENTS	1500:4	1510:4	8	
LEAF_NODE	1500:4	1500:4	9	{
STATEMENTS	1501:5	1509:5	9	
SELECTION	1501:5	1502:6	10	
KEYWORD	1501:5	1501:5	11	if
LEAF_NODE	1501:5	1501:5	12	if
LEAF_NODE	1501:8	1501:8	11	(
CONDITION	1501:9	1501:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1501:9	1501:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1501:9	1501:14	13	tif -> tif_flags
LEAF_NODE	1501:9	1501:9	14	tif
LEAF_NODE	1501:12	1501:12	14	->
LEAF_NODE	1501:14	1501:14	14	tif_flags
LEAF_NODE	1501:23	1501:23	13	&
FIELD	1501:24	1501:24	13	TIFF_SWAB
LEAF_NODE	1501:24	1501:24	14	TIFF_SWAB
LEAF_NODE	1501:33	1501:33	11	)
STATEMENTS	1502:6	1502:6	11	
EXPR_STATEMENT	1502:6	1502:22	12	TIFFSwabShort ( m ) ;
EXPR	1502:6	1502:6	13	TIFFSwabShort ( m )
FUNCTION_CALL	1502:6	1502:21	14	TIFFSwabShort ( m )
CALLEE	1502:6	1502:6	15	TIFFSwabShort
LEAF_NODE	1502:6	1502:6	16	TIFFSwabShort
LEAF_NODE	1502:19	1502:19	15	(
ARGUMENT	1502:20	1502:20	15	m
FIELD	1502:20	1502:20	16	m
LEAF_NODE	1502:20	1502:20	17	m
LEAF_NODE	1502:21	1502:21	15	)
LEAF_NODE	1502:22	1502:22	13	;
EXPR_STATEMENT	1503:5	1503:50	10	err = TIFFReadDirEntryCheckRangeSshortShort ( * m ) ;
EXPR	1503:5	1503:5	11	err = TIFFReadDirEntryCheckRangeSshortShort ( * m )
ASSIGN	1503:5	1503:9	12	err = TIFFReadDirEntryCheckRangeSshortShort ( * m )
LVAL	1503:5	1503:5	13	err
FIELD	1503:5	1503:5	14	err
LEAF_NODE	1503:5	1503:5	15	err
ASSIGN_OP	1503:8	1503:8	13	=
LEAF_NODE	1503:8	1503:8	14	=
RVAL	1503:9	1503:9	13	TIFFReadDirEntryCheckRangeSshortShort ( * m )
FUNCTION_CALL	1503:9	1503:49	14	TIFFReadDirEntryCheckRangeSshortShort ( * m )
CALLEE	1503:9	1503:9	15	TIFFReadDirEntryCheckRangeSshortShort
LEAF_NODE	1503:9	1503:9	16	TIFFReadDirEntryCheckRangeSshortShort
LEAF_NODE	1503:46	1503:46	15	(
ARGUMENT	1503:47	1503:47	15	* m
UNARY_EXPR	1503:47	1503:48	16	* m
UNARY_OPERATOR	1503:47	1503:47	17	*
LEAF_NODE	1503:47	1503:47	18	*
FIELD	1503:48	1503:48	17	m
LEAF_NODE	1503:48	1503:48	18	m
LEAF_NODE	1503:49	1503:49	15	)
LEAF_NODE	1503:50	1503:50	11	;
SELECTION	1504:5	1505:5	10	
KEYWORD	1504:5	1504:5	11	if
LEAF_NODE	1504:5	1504:5	12	if
LEAF_NODE	1504:8	1504:8	11	(
CONDITION	1504:9	1504:9	11	err != TIFFReadDirEntryErrOk
EXPR	1504:9	1504:14	12	err != TIFFReadDirEntryErrOk
FIELD	1504:9	1504:9	13	err
LEAF_NODE	1504:9	1504:9	14	err
EQ_OPERATOR	1504:12	1504:12	13	!=
LEAF_NODE	1504:12	1504:12	14	!=
FIELD	1504:14	1504:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1504:14	1504:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1504:35	1504:35	11	)
STATEMENTS	1505:5	1508:5	11	
LEAF_NODE	1505:5	1505:5	12	{
STATEMENTS	1506:6	1507:17	12	
EXPR_STATEMENT	1506:6	1506:25	13	_TIFFfree ( origdata ) ;
EXPR	1506:6	1506:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	1506:6	1506:24	15	_TIFFfree ( origdata )
CALLEE	1506:6	1506:6	16	_TIFFfree
LEAF_NODE	1506:6	1506:6	17	_TIFFfree
LEAF_NODE	1506:15	1506:15	16	(
ARGUMENT	1506:16	1506:16	16	origdata
FIELD	1506:16	1506:16	17	origdata
LEAF_NODE	1506:16	1506:16	18	origdata
LEAF_NODE	1506:24	1506:24	16	)
LEAF_NODE	1506:25	1506:25	14	;
LEAF_NODE	1507:6	1507:6	13	return
LEAF_NODE	1507:12	1507:12	13	(
LEAF_NODE	1507:13	1507:13	13	err
LEAF_NODE	1507:16	1507:16	13	)
LEAF_NODE	1507:17	1507:17	13	;
LEAF_NODE	1508:5	1508:5	12	}
EXPR_STATEMENT	1509:5	1509:8	10	m ++ ;
EXPR	1509:5	1509:5	11	m ++
FIELD	1509:5	1509:6	12	m ++
LEAF_NODE	1509:5	1509:5	13	m
LEAF_NODE	1509:6	1509:6	13	++
LEAF_NODE	1509:8	1509:8	11	;
LEAF_NODE	1510:4	1510:4	9	}
EXPR_STATEMENT	1511:4	1511:27	7	* value = ( int16 * ) origdata ;
EXPR	1511:4	1511:4	8	* value = ( int16 * ) origdata
ASSIGN	1511:4	1511:11	9	* value = ( int16 * ) origdata
LVAL	1511:4	1511:4	10	* value
UNARY_EXPR	1511:4	1511:5	11	* value
UNARY_OPERATOR	1511:4	1511:4	12	*
LEAF_NODE	1511:4	1511:4	13	*
FIELD	1511:5	1511:5	12	value
LEAF_NODE	1511:5	1511:5	13	value
ASSIGN_OP	1511:10	1511:10	10	=
LEAF_NODE	1511:10	1511:10	11	=
RVAL	1511:11	1511:19	10	( int16 * ) origdata
LEAF_NODE	1511:11	1511:11	11	(
TYPE_NAME	1511:12	1511:12	11	int16
LEAF_NODE	1511:12	1511:12	12	int16
LEAF_NODE	1511:17	1511:17	11	*
LEAF_NODE	1511:18	1511:18	11	)
FIELD	1511:19	1511:19	11	origdata
LEAF_NODE	1511:19	1511:19	12	origdata
LEAF_NODE	1511:27	1511:27	8	;
LEAF_NODE	1512:4	1512:4	7	return
LEAF_NODE	1512:10	1512:10	7	(
LEAF_NODE	1512:11	1512:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	1512:32	1512:32	7	)
LEAF_NODE	1512:33	1512:33	7	;
LEAF_NODE	1513:3	1513:3	6	}
LABEL	1514:2	1514:18	6	case TIFF_SSHORT :
LEAF_NODE	1514:2	1514:2	7	case
LEAF_NODE	1514:7	1514:7	7	TIFF_SSHORT
LEAF_NODE	1514:18	1514:18	7	:
EXPR_STATEMENT	1515:3	1515:26	6	* value = ( int16 * ) origdata ;
EXPR	1515:3	1515:3	7	* value = ( int16 * ) origdata
ASSIGN	1515:3	1515:10	8	* value = ( int16 * ) origdata
LVAL	1515:3	1515:3	9	* value
UNARY_EXPR	1515:3	1515:4	10	* value
UNARY_OPERATOR	1515:3	1515:3	11	*
LEAF_NODE	1515:3	1515:3	12	*
FIELD	1515:4	1515:4	11	value
LEAF_NODE	1515:4	1515:4	12	value
ASSIGN_OP	1515:9	1515:9	9	=
LEAF_NODE	1515:9	1515:9	10	=
RVAL	1515:10	1515:18	9	( int16 * ) origdata
LEAF_NODE	1515:10	1515:10	10	(
TYPE_NAME	1515:11	1515:11	10	int16
LEAF_NODE	1515:11	1515:11	11	int16
LEAF_NODE	1515:16	1515:16	10	*
LEAF_NODE	1515:17	1515:17	10	)
FIELD	1515:18	1515:18	10	origdata
LEAF_NODE	1515:18	1515:18	11	origdata
LEAF_NODE	1515:26	1515:26	7	;
SELECTION	1516:3	1517:4	6	
KEYWORD	1516:3	1516:3	7	if
LEAF_NODE	1516:3	1516:3	8	if
LEAF_NODE	1516:6	1516:6	7	(
CONDITION	1516:7	1516:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	1516:7	1516:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	1516:7	1516:12	9	tif -> tif_flags
LEAF_NODE	1516:7	1516:7	10	tif
LEAF_NODE	1516:10	1516:10	10	->
LEAF_NODE	1516:12	1516:12	10	tif_flags
LEAF_NODE	1516:21	1516:21	9	&
FIELD	1516:22	1516:22	9	TIFF_SWAB
LEAF_NODE	1516:22	1516:22	10	TIFF_SWAB
LEAF_NODE	1516:31	1516:31	7	)
STATEMENTS	1517:4	1517:4	7	
EXPR_STATEMENT	1517:4	1517:49	8	TIFFSwabArrayOfShort ( ( uint16 * ) ( * value ) , count ) ;
EXPR	1517:4	1517:4	9	TIFFSwabArrayOfShort ( ( uint16 * ) ( * value ) , count )
FUNCTION_CALL	1517:4	1517:48	10	TIFFSwabArrayOfShort ( ( uint16 * ) ( * value ) , count )
CALLEE	1517:4	1517:4	11	TIFFSwabArrayOfShort
LEAF_NODE	1517:4	1517:4	12	TIFFSwabArrayOfShort
LEAF_NODE	1517:24	1517:24	11	(
ARGUMENT	1517:25	1517:41	11	( uint16 * ) ( * value )
LEAF_NODE	1517:25	1517:25	12	(
TYPE_NAME	1517:26	1517:26	12	uint16
LEAF_NODE	1517:26	1517:26	13	uint16
LEAF_NODE	1517:32	1517:32	12	*
LEAF_NODE	1517:33	1517:33	12	)
LEAF_NODE	1517:34	1517:34	12	(
UNARY_EXPR	1517:35	1517:36	12	* value
UNARY_OPERATOR	1517:35	1517:35	13	*
LEAF_NODE	1517:35	1517:35	14	*
FIELD	1517:36	1517:36	13	value
LEAF_NODE	1517:36	1517:36	14	value
LEAF_NODE	1517:41	1517:41	12	)
LEAF_NODE	1517:42	1517:42	11	,
ARGUMENT	1517:43	1517:43	11	count
FIELD	1517:43	1517:43	12	count
LEAF_NODE	1517:43	1517:43	13	count
LEAF_NODE	1517:48	1517:48	11	)
LEAF_NODE	1517:49	1517:49	9	;
LEAF_NODE	1518:3	1518:3	6	return
LEAF_NODE	1518:9	1518:9	6	(
LEAF_NODE	1518:10	1518:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1518:31	1518:31	6	)
LEAF_NODE	1518:32	1518:32	6	;
LEAF_NODE	1519:1	1519:1	5	}
EXPR_STATEMENT	1520:1	1520:34	3	data = ( int16 * ) _TIFFmalloc ( count * 2 ) ;
EXPR	1520:1	1520:1	4	data = ( int16 * ) _TIFFmalloc ( count * 2 )
ASSIGN	1520:1	1520:6	5	data = ( int16 * ) _TIFFmalloc ( count * 2 )
LVAL	1520:1	1520:1	6	data
FIELD	1520:1	1520:1	7	data
LEAF_NODE	1520:1	1520:1	8	data
ASSIGN_OP	1520:5	1520:5	6	=
LEAF_NODE	1520:5	1520:5	7	=
RVAL	1520:6	1520:14	6	( int16 * ) _TIFFmalloc ( count * 2 )
LEAF_NODE	1520:6	1520:6	7	(
TYPE_NAME	1520:7	1520:7	7	int16
LEAF_NODE	1520:7	1520:7	8	int16
LEAF_NODE	1520:12	1520:12	7	*
LEAF_NODE	1520:13	1520:13	7	)
FUNCTION_CALL	1520:14	1520:33	7	_TIFFmalloc ( count * 2 )
CALLEE	1520:14	1520:14	8	_TIFFmalloc
LEAF_NODE	1520:14	1520:14	9	_TIFFmalloc
LEAF_NODE	1520:25	1520:25	8	(
ARGUMENT	1520:26	1520:32	8	count * 2
FIELD	1520:26	1520:26	9	count
LEAF_NODE	1520:26	1520:26	10	count
LEAF_NODE	1520:31	1520:31	9	*
FIELD	1520:32	1520:32	9	2
LEAF_NODE	1520:32	1520:32	10	2
LEAF_NODE	1520:33	1520:33	8	)
LEAF_NODE	1520:34	1520:34	4	;
SELECTION	1521:1	1522:1	3	
KEYWORD	1521:1	1521:1	4	if
LEAF_NODE	1521:1	1521:1	5	if
LEAF_NODE	1521:4	1521:4	4	(
CONDITION	1521:5	1521:5	4	data == 0
EXPR	1521:5	1521:11	5	data == 0
FIELD	1521:5	1521:5	6	data
LEAF_NODE	1521:5	1521:5	7	data
EQ_OPERATOR	1521:9	1521:9	6	==
LEAF_NODE	1521:9	1521:9	7	==
FIELD	1521:11	1521:11	6	0
LEAF_NODE	1521:11	1521:11	7	0
LEAF_NODE	1521:12	1521:12	4	)
STATEMENTS	1522:1	1525:1	4	
LEAF_NODE	1522:1	1522:1	5	{
STATEMENTS	1523:2	1524:34	5	
EXPR_STATEMENT	1523:2	1523:21	6	_TIFFfree ( origdata ) ;
EXPR	1523:2	1523:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	1523:2	1523:20	8	_TIFFfree ( origdata )
CALLEE	1523:2	1523:2	9	_TIFFfree
LEAF_NODE	1523:2	1523:2	10	_TIFFfree
LEAF_NODE	1523:11	1523:11	9	(
ARGUMENT	1523:12	1523:12	9	origdata
FIELD	1523:12	1523:12	10	origdata
LEAF_NODE	1523:12	1523:12	11	origdata
LEAF_NODE	1523:20	1523:20	9	)
LEAF_NODE	1523:21	1523:21	7	;
LEAF_NODE	1524:2	1524:2	6	return
LEAF_NODE	1524:8	1524:8	6	(
LEAF_NODE	1524:9	1524:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	1524:33	1524:33	6	)
LEAF_NODE	1524:34	1524:34	6	;
LEAF_NODE	1525:1	1525:1	5	}
SELECTION	1526:1	1527:1	3	
KEYWORD	1526:1	1526:1	4	switch
LEAF_NODE	1526:1	1526:1	5	switch
LEAF_NODE	1526:8	1526:8	4	(
CONDITION	1526:9	1526:9	4	direntry -> tdir_type
EXPR	1526:9	1526:9	5	direntry -> tdir_type
FIELD	1526:9	1526:19	6	direntry -> tdir_type
LEAF_NODE	1526:9	1526:9	7	direntry
LEAF_NODE	1526:17	1526:17	7	->
LEAF_NODE	1526:19	1526:19	7	tdir_type
LEAF_NODE	1526:28	1526:28	4	)
STATEMENTS	1527:1	1622:1	4	
LEAF_NODE	1527:1	1527:1	5	{
STATEMENTS	1528:2	1621:3	5	
LABEL	1528:2	1528:16	6	case TIFF_BYTE :
LEAF_NODE	1528:2	1528:2	7	case
LEAF_NODE	1528:7	1528:7	7	TIFF_BYTE
LEAF_NODE	1528:16	1528:16	7	:
LEAF_NODE	1529:3	1529:3	6	{
STATEMENTS	1530:4	1535:4	6	
SIMPLE_DECL	1530:4	1530:13	7	uint8 * ma ;
VAR_DECL	1530:4	1530:11	8	uint8 * ma
TYPE	1530:4	1530:9	9	uint8 *
TYPE_NAME	1530:4	1530:4	10	uint8
LEAF_NODE	1530:4	1530:4	11	uint8
POINTER	1530:9	1530:9	10	*
LEAF_NODE	1530:9	1530:9	11	*
NAME	1530:11	1530:11	9	ma
LEAF_NODE	1530:11	1530:11	10	ma
LEAF_NODE	1530:13	1530:13	8	;
SIMPLE_DECL	1531:4	1531:13	7	int16 * mb ;
VAR_DECL	1531:4	1531:11	8	int16 * mb
TYPE	1531:4	1531:9	9	int16 *
TYPE_NAME	1531:4	1531:4	10	int16
LEAF_NODE	1531:4	1531:4	11	int16
POINTER	1531:9	1531:9	10	*
LEAF_NODE	1531:9	1531:9	11	*
NAME	1531:11	1531:11	9	mb
LEAF_NODE	1531:11	1531:11	10	mb
LEAF_NODE	1531:13	1531:13	8	;
SIMPLE_DECL	1532:4	1532:12	7	uint32 n ;
VAR_DECL	1532:4	1532:11	8	uint32 n
TYPE	1532:4	1532:4	9	uint32
TYPE_NAME	1532:4	1532:4	10	uint32
LEAF_NODE	1532:4	1532:4	11	uint32
NAME	1532:11	1532:11	9	n
LEAF_NODE	1532:11	1532:11	10	n
LEAF_NODE	1532:12	1532:12	8	;
EXPR_STATEMENT	1533:4	1533:23	7	ma = ( uint8 * ) origdata ;
EXPR	1533:4	1533:4	8	ma = ( uint8 * ) origdata
ASSIGN	1533:4	1533:7	9	ma = ( uint8 * ) origdata
LVAL	1533:4	1533:4	10	ma
FIELD	1533:4	1533:4	11	ma
LEAF_NODE	1533:4	1533:4	12	ma
ASSIGN_OP	1533:6	1533:6	10	=
LEAF_NODE	1533:6	1533:6	11	=
RVAL	1533:7	1533:15	10	( uint8 * ) origdata
LEAF_NODE	1533:7	1533:7	11	(
TYPE_NAME	1533:8	1533:8	11	uint8
LEAF_NODE	1533:8	1533:8	12	uint8
LEAF_NODE	1533:13	1533:13	11	*
LEAF_NODE	1533:14	1533:14	11	)
FIELD	1533:15	1533:15	11	origdata
LEAF_NODE	1533:15	1533:15	12	origdata
LEAF_NODE	1533:23	1533:23	8	;
EXPR_STATEMENT	1534:4	1534:11	7	mb = data ;
EXPR	1534:4	1534:4	8	mb = data
ASSIGN	1534:4	1534:7	9	mb = data
LVAL	1534:4	1534:4	10	mb
FIELD	1534:4	1534:4	11	mb
LEAF_NODE	1534:4	1534:4	12	mb
ASSIGN_OP	1534:6	1534:6	10	=
LEAF_NODE	1534:6	1534:6	11	=
RVAL	1534:7	1534:7	10	data
FIELD	1534:7	1534:7	11	data
LEAF_NODE	1534:7	1534:7	12	data
LEAF_NODE	1534:11	1534:11	8	;
ITERATION	1535:4	1536:5	7	
KEYWORD	1535:4	1535:4	8	for
LEAF_NODE	1535:4	1535:4	9	for
LEAF_NODE	1535:8	1535:8	8	(
FOR_INIT	1535:9	1535:12	8	n = 0 ;
EXPR	1535:9	1535:9	9	n = 0
ASSIGN	1535:9	1535:11	10	n = 0
LVAL	1535:9	1535:9	11	n
FIELD	1535:9	1535:9	12	n
LEAF_NODE	1535:9	1535:9	13	n
ASSIGN_OP	1535:10	1535:10	11	=
LEAF_NODE	1535:10	1535:10	12	=
RVAL	1535:11	1535:11	11	0
FIELD	1535:11	1535:11	12	0
LEAF_NODE	1535:11	1535:11	13	0
LEAF_NODE	1535:12	1535:12	9	;
CONDITION	1535:14	1535:14	8	n < count
EXPR	1535:14	1535:16	9	n < count
FIELD	1535:14	1535:14	10	n
LEAF_NODE	1535:14	1535:14	11	n
REL_OPERATOR	1535:15	1535:15	10	<
LEAF_NODE	1535:15	1535:15	11	<
FIELD	1535:16	1535:16	10	count
LEAF_NODE	1535:16	1535:16	11	count
LEAF_NODE	1535:21	1535:21	8	;
FOR_EXPR	1535:23	1535:23	8	n ++
EXPR	1535:23	1535:23	9	n ++
FIELD	1535:23	1535:24	10	n ++
LEAF_NODE	1535:23	1535:23	11	n
LEAF_NODE	1535:24	1535:24	11	++
LEAF_NODE	1535:26	1535:26	8	)
STATEMENTS	1536:5	1536:5	8	
EXPR_STATEMENT	1536:5	1536:25	9	* mb ++ = ( int16 ) ( * ma ++ ) ;
EXPR	1536:5	1536:5	10	* mb ++ = ( int16 ) ( * ma ++ )
ASSIGN	1536:5	1536:11	11	* mb ++ = ( int16 ) ( * ma ++ )
LVAL	1536:5	1536:5	12	* mb ++
UNARY_EXPR	1536:5	1536:6	13	* mb ++
UNARY_OPERATOR	1536:5	1536:5	14	*
LEAF_NODE	1536:5	1536:5	15	*
FIELD	1536:6	1536:8	14	mb ++
LEAF_NODE	1536:6	1536:6	15	mb
LEAF_NODE	1536:8	1536:8	15	++
ASSIGN_OP	1536:10	1536:10	12	=
LEAF_NODE	1536:10	1536:10	13	=
RVAL	1536:11	1536:24	12	( int16 ) ( * ma ++ )
LEAF_NODE	1536:11	1536:11	13	(
TYPE_NAME	1536:12	1536:12	13	int16
LEAF_NODE	1536:12	1536:12	14	int16
LEAF_NODE	1536:17	1536:17	13	)
LEAF_NODE	1536:18	1536:18	13	(
UNARY_EXPR	1536:19	1536:20	13	* ma ++
UNARY_OPERATOR	1536:19	1536:19	14	*
LEAF_NODE	1536:19	1536:19	15	*
FIELD	1536:20	1536:22	14	ma ++
LEAF_NODE	1536:20	1536:20	15	ma
LEAF_NODE	1536:22	1536:22	15	++
LEAF_NODE	1536:24	1536:24	13	)
LEAF_NODE	1536:25	1536:25	10	;
LEAF_NODE	1537:3	1537:3	6	}
JUMP_STATEMENT	1538:3	1538:8	6	break DESTINATION ;
KEYWORD	1538:3	1538:3	7	break
LEAF_NODE	1538:3	1538:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1538:8	1538:8	7	;
LABEL	1539:2	1539:17	6	case TIFF_SBYTE :
LEAF_NODE	1539:2	1539:2	7	case
LEAF_NODE	1539:7	1539:7	7	TIFF_SBYTE
LEAF_NODE	1539:17	1539:17	7	:
LEAF_NODE	1540:3	1540:3	6	{
STATEMENTS	1541:4	1546:4	6	
SIMPLE_DECL	1541:4	1541:12	7	int8 * ma ;
VAR_DECL	1541:4	1541:10	8	int8 * ma
TYPE	1541:4	1541:8	9	int8 *
TYPE_NAME	1541:4	1541:4	10	int8
LEAF_NODE	1541:4	1541:4	11	int8
POINTER	1541:8	1541:8	10	*
LEAF_NODE	1541:8	1541:8	11	*
NAME	1541:10	1541:10	9	ma
LEAF_NODE	1541:10	1541:10	10	ma
LEAF_NODE	1541:12	1541:12	8	;
SIMPLE_DECL	1542:4	1542:13	7	int16 * mb ;
VAR_DECL	1542:4	1542:11	8	int16 * mb
TYPE	1542:4	1542:9	9	int16 *
TYPE_NAME	1542:4	1542:4	10	int16
LEAF_NODE	1542:4	1542:4	11	int16
POINTER	1542:9	1542:9	10	*
LEAF_NODE	1542:9	1542:9	11	*
NAME	1542:11	1542:11	9	mb
LEAF_NODE	1542:11	1542:11	10	mb
LEAF_NODE	1542:13	1542:13	8	;
SIMPLE_DECL	1543:4	1543:12	7	uint32 n ;
VAR_DECL	1543:4	1543:11	8	uint32 n
TYPE	1543:4	1543:4	9	uint32
TYPE_NAME	1543:4	1543:4	10	uint32
LEAF_NODE	1543:4	1543:4	11	uint32
NAME	1543:11	1543:11	9	n
LEAF_NODE	1543:11	1543:11	10	n
LEAF_NODE	1543:12	1543:12	8	;
EXPR_STATEMENT	1544:4	1544:22	7	ma = ( int8 * ) origdata ;
EXPR	1544:4	1544:4	8	ma = ( int8 * ) origdata
ASSIGN	1544:4	1544:7	9	ma = ( int8 * ) origdata
LVAL	1544:4	1544:4	10	ma
FIELD	1544:4	1544:4	11	ma
LEAF_NODE	1544:4	1544:4	12	ma
ASSIGN_OP	1544:6	1544:6	10	=
LEAF_NODE	1544:6	1544:6	11	=
RVAL	1544:7	1544:14	10	( int8 * ) origdata
LEAF_NODE	1544:7	1544:7	11	(
TYPE_NAME	1544:8	1544:8	11	int8
LEAF_NODE	1544:8	1544:8	12	int8
LEAF_NODE	1544:12	1544:12	11	*
LEAF_NODE	1544:13	1544:13	11	)
FIELD	1544:14	1544:14	11	origdata
LEAF_NODE	1544:14	1544:14	12	origdata
LEAF_NODE	1544:22	1544:22	8	;
EXPR_STATEMENT	1545:4	1545:11	7	mb = data ;
EXPR	1545:4	1545:4	8	mb = data
ASSIGN	1545:4	1545:7	9	mb = data
LVAL	1545:4	1545:4	10	mb
FIELD	1545:4	1545:4	11	mb
LEAF_NODE	1545:4	1545:4	12	mb
ASSIGN_OP	1545:6	1545:6	10	=
LEAF_NODE	1545:6	1545:6	11	=
RVAL	1545:7	1545:7	10	data
FIELD	1545:7	1545:7	11	data
LEAF_NODE	1545:7	1545:7	12	data
LEAF_NODE	1545:11	1545:11	8	;
ITERATION	1546:4	1547:5	7	
KEYWORD	1546:4	1546:4	8	for
LEAF_NODE	1546:4	1546:4	9	for
LEAF_NODE	1546:8	1546:8	8	(
FOR_INIT	1546:9	1546:12	8	n = 0 ;
EXPR	1546:9	1546:9	9	n = 0
ASSIGN	1546:9	1546:11	10	n = 0
LVAL	1546:9	1546:9	11	n
FIELD	1546:9	1546:9	12	n
LEAF_NODE	1546:9	1546:9	13	n
ASSIGN_OP	1546:10	1546:10	11	=
LEAF_NODE	1546:10	1546:10	12	=
RVAL	1546:11	1546:11	11	0
FIELD	1546:11	1546:11	12	0
LEAF_NODE	1546:11	1546:11	13	0
LEAF_NODE	1546:12	1546:12	9	;
CONDITION	1546:14	1546:14	8	n < count
EXPR	1546:14	1546:16	9	n < count
FIELD	1546:14	1546:14	10	n
LEAF_NODE	1546:14	1546:14	11	n
REL_OPERATOR	1546:15	1546:15	10	<
LEAF_NODE	1546:15	1546:15	11	<
FIELD	1546:16	1546:16	10	count
LEAF_NODE	1546:16	1546:16	11	count
LEAF_NODE	1546:21	1546:21	8	;
FOR_EXPR	1546:23	1546:23	8	n ++
EXPR	1546:23	1546:23	9	n ++
FIELD	1546:23	1546:24	10	n ++
LEAF_NODE	1546:23	1546:23	11	n
LEAF_NODE	1546:24	1546:24	11	++
LEAF_NODE	1546:26	1546:26	8	)
STATEMENTS	1547:5	1547:5	8	
EXPR_STATEMENT	1547:5	1547:25	9	* mb ++ = ( int16 ) ( * ma ++ ) ;
EXPR	1547:5	1547:5	10	* mb ++ = ( int16 ) ( * ma ++ )
ASSIGN	1547:5	1547:11	11	* mb ++ = ( int16 ) ( * ma ++ )
LVAL	1547:5	1547:5	12	* mb ++
UNARY_EXPR	1547:5	1547:6	13	* mb ++
UNARY_OPERATOR	1547:5	1547:5	14	*
LEAF_NODE	1547:5	1547:5	15	*
FIELD	1547:6	1547:8	14	mb ++
LEAF_NODE	1547:6	1547:6	15	mb
LEAF_NODE	1547:8	1547:8	15	++
ASSIGN_OP	1547:10	1547:10	12	=
LEAF_NODE	1547:10	1547:10	13	=
RVAL	1547:11	1547:24	12	( int16 ) ( * ma ++ )
LEAF_NODE	1547:11	1547:11	13	(
TYPE_NAME	1547:12	1547:12	13	int16
LEAF_NODE	1547:12	1547:12	14	int16
LEAF_NODE	1547:17	1547:17	13	)
LEAF_NODE	1547:18	1547:18	13	(
UNARY_EXPR	1547:19	1547:20	13	* ma ++
UNARY_OPERATOR	1547:19	1547:19	14	*
LEAF_NODE	1547:19	1547:19	15	*
FIELD	1547:20	1547:22	14	ma ++
LEAF_NODE	1547:20	1547:20	15	ma
LEAF_NODE	1547:22	1547:22	15	++
LEAF_NODE	1547:24	1547:24	13	)
LEAF_NODE	1547:25	1547:25	10	;
LEAF_NODE	1548:3	1548:3	6	}
JUMP_STATEMENT	1549:3	1549:8	6	break DESTINATION ;
KEYWORD	1549:3	1549:3	7	break
LEAF_NODE	1549:3	1549:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1549:8	1549:8	7	;
LABEL	1550:2	1550:16	6	case TIFF_LONG :
LEAF_NODE	1550:2	1550:2	7	case
LEAF_NODE	1550:7	1550:7	7	TIFF_LONG
LEAF_NODE	1550:16	1550:16	7	:
LEAF_NODE	1551:3	1551:3	6	{
STATEMENTS	1552:4	1557:4	6	
SIMPLE_DECL	1552:4	1552:14	7	uint32 * ma ;
VAR_DECL	1552:4	1552:12	8	uint32 * ma
TYPE	1552:4	1552:10	9	uint32 *
TYPE_NAME	1552:4	1552:4	10	uint32
LEAF_NODE	1552:4	1552:4	11	uint32
POINTER	1552:10	1552:10	10	*
LEAF_NODE	1552:10	1552:10	11	*
NAME	1552:12	1552:12	9	ma
LEAF_NODE	1552:12	1552:12	10	ma
LEAF_NODE	1552:14	1552:14	8	;
SIMPLE_DECL	1553:4	1553:13	7	int16 * mb ;
VAR_DECL	1553:4	1553:11	8	int16 * mb
TYPE	1553:4	1553:9	9	int16 *
TYPE_NAME	1553:4	1553:4	10	int16
LEAF_NODE	1553:4	1553:4	11	int16
POINTER	1553:9	1553:9	10	*
LEAF_NODE	1553:9	1553:9	11	*
NAME	1553:11	1553:11	9	mb
LEAF_NODE	1553:11	1553:11	10	mb
LEAF_NODE	1553:13	1553:13	8	;
SIMPLE_DECL	1554:4	1554:12	7	uint32 n ;
VAR_DECL	1554:4	1554:11	8	uint32 n
TYPE	1554:4	1554:4	9	uint32
TYPE_NAME	1554:4	1554:4	10	uint32
LEAF_NODE	1554:4	1554:4	11	uint32
NAME	1554:11	1554:11	9	n
LEAF_NODE	1554:11	1554:11	10	n
LEAF_NODE	1554:12	1554:12	8	;
EXPR_STATEMENT	1555:4	1555:24	7	ma = ( uint32 * ) origdata ;
EXPR	1555:4	1555:4	8	ma = ( uint32 * ) origdata
ASSIGN	1555:4	1555:7	9	ma = ( uint32 * ) origdata
LVAL	1555:4	1555:4	10	ma
FIELD	1555:4	1555:4	11	ma
LEAF_NODE	1555:4	1555:4	12	ma
ASSIGN_OP	1555:6	1555:6	10	=
LEAF_NODE	1555:6	1555:6	11	=
RVAL	1555:7	1555:16	10	( uint32 * ) origdata
LEAF_NODE	1555:7	1555:7	11	(
TYPE_NAME	1555:8	1555:8	11	uint32
LEAF_NODE	1555:8	1555:8	12	uint32
LEAF_NODE	1555:14	1555:14	11	*
LEAF_NODE	1555:15	1555:15	11	)
FIELD	1555:16	1555:16	11	origdata
LEAF_NODE	1555:16	1555:16	12	origdata
LEAF_NODE	1555:24	1555:24	8	;
EXPR_STATEMENT	1556:4	1556:11	7	mb = data ;
EXPR	1556:4	1556:4	8	mb = data
ASSIGN	1556:4	1556:7	9	mb = data
LVAL	1556:4	1556:4	10	mb
FIELD	1556:4	1556:4	11	mb
LEAF_NODE	1556:4	1556:4	12	mb
ASSIGN_OP	1556:6	1556:6	10	=
LEAF_NODE	1556:6	1556:6	11	=
RVAL	1556:7	1556:7	10	data
FIELD	1556:7	1556:7	11	data
LEAF_NODE	1556:7	1556:7	12	data
LEAF_NODE	1556:11	1556:11	8	;
ITERATION	1557:4	1558:4	7	
KEYWORD	1557:4	1557:4	8	for
LEAF_NODE	1557:4	1557:4	9	for
LEAF_NODE	1557:8	1557:8	8	(
FOR_INIT	1557:9	1557:12	8	n = 0 ;
EXPR	1557:9	1557:9	9	n = 0
ASSIGN	1557:9	1557:11	10	n = 0
LVAL	1557:9	1557:9	11	n
FIELD	1557:9	1557:9	12	n
LEAF_NODE	1557:9	1557:9	13	n
ASSIGN_OP	1557:10	1557:10	11	=
LEAF_NODE	1557:10	1557:10	12	=
RVAL	1557:11	1557:11	11	0
FIELD	1557:11	1557:11	12	0
LEAF_NODE	1557:11	1557:11	13	0
LEAF_NODE	1557:12	1557:12	9	;
CONDITION	1557:14	1557:14	8	n < count
EXPR	1557:14	1557:16	9	n < count
FIELD	1557:14	1557:14	10	n
LEAF_NODE	1557:14	1557:14	11	n
REL_OPERATOR	1557:15	1557:15	10	<
LEAF_NODE	1557:15	1557:15	11	<
FIELD	1557:16	1557:16	10	count
LEAF_NODE	1557:16	1557:16	11	count
LEAF_NODE	1557:21	1557:21	8	;
FOR_EXPR	1557:23	1557:23	8	n ++
EXPR	1557:23	1557:23	9	n ++
FIELD	1557:23	1557:24	10	n ++
LEAF_NODE	1557:23	1557:23	11	n
LEAF_NODE	1557:24	1557:24	11	++
LEAF_NODE	1557:26	1557:26	8	)
STATEMENTS	1558:4	1565:4	8	
LEAF_NODE	1558:4	1558:4	9	{
STATEMENTS	1559:5	1564:5	9	
SELECTION	1559:5	1560:6	10	
KEYWORD	1559:5	1559:5	11	if
LEAF_NODE	1559:5	1559:5	12	if
LEAF_NODE	1559:8	1559:8	11	(
CONDITION	1559:9	1559:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1559:9	1559:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1559:9	1559:14	13	tif -> tif_flags
LEAF_NODE	1559:9	1559:9	14	tif
LEAF_NODE	1559:12	1559:12	14	->
LEAF_NODE	1559:14	1559:14	14	tif_flags
LEAF_NODE	1559:23	1559:23	13	&
FIELD	1559:24	1559:24	13	TIFF_SWAB
LEAF_NODE	1559:24	1559:24	14	TIFF_SWAB
LEAF_NODE	1559:33	1559:33	11	)
STATEMENTS	1560:6	1560:6	11	
EXPR_STATEMENT	1560:6	1560:22	12	TIFFSwabLong ( ma ) ;
EXPR	1560:6	1560:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	1560:6	1560:21	14	TIFFSwabLong ( ma )
CALLEE	1560:6	1560:6	15	TIFFSwabLong
LEAF_NODE	1560:6	1560:6	16	TIFFSwabLong
LEAF_NODE	1560:18	1560:18	15	(
ARGUMENT	1560:19	1560:19	15	ma
FIELD	1560:19	1560:19	16	ma
LEAF_NODE	1560:19	1560:19	17	ma
LEAF_NODE	1560:21	1560:21	15	)
LEAF_NODE	1560:22	1560:22	13	;
EXPR_STATEMENT	1561:5	1561:50	10	err = TIFFReadDirEntryCheckRangeSshortLong ( * ma ) ;
EXPR	1561:5	1561:5	11	err = TIFFReadDirEntryCheckRangeSshortLong ( * ma )
ASSIGN	1561:5	1561:9	12	err = TIFFReadDirEntryCheckRangeSshortLong ( * ma )
LVAL	1561:5	1561:5	13	err
FIELD	1561:5	1561:5	14	err
LEAF_NODE	1561:5	1561:5	15	err
ASSIGN_OP	1561:8	1561:8	13	=
LEAF_NODE	1561:8	1561:8	14	=
RVAL	1561:9	1561:9	13	TIFFReadDirEntryCheckRangeSshortLong ( * ma )
FUNCTION_CALL	1561:9	1561:49	14	TIFFReadDirEntryCheckRangeSshortLong ( * ma )
CALLEE	1561:9	1561:9	15	TIFFReadDirEntryCheckRangeSshortLong
LEAF_NODE	1561:9	1561:9	16	TIFFReadDirEntryCheckRangeSshortLong
LEAF_NODE	1561:45	1561:45	15	(
ARGUMENT	1561:46	1561:46	15	* ma
UNARY_EXPR	1561:46	1561:47	16	* ma
UNARY_OPERATOR	1561:46	1561:46	17	*
LEAF_NODE	1561:46	1561:46	18	*
FIELD	1561:47	1561:47	17	ma
LEAF_NODE	1561:47	1561:47	18	ma
LEAF_NODE	1561:49	1561:49	15	)
LEAF_NODE	1561:50	1561:50	11	;
SELECTION	1562:5	1563:6	10	
KEYWORD	1562:5	1562:5	11	if
LEAF_NODE	1562:5	1562:5	12	if
LEAF_NODE	1562:8	1562:8	11	(
CONDITION	1562:9	1562:9	11	err != TIFFReadDirEntryErrOk
EXPR	1562:9	1562:14	12	err != TIFFReadDirEntryErrOk
FIELD	1562:9	1562:9	13	err
LEAF_NODE	1562:9	1562:9	14	err
EQ_OPERATOR	1562:12	1562:12	13	!=
LEAF_NODE	1562:12	1562:12	14	!=
FIELD	1562:14	1562:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1562:14	1562:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1562:35	1562:35	11	)
STATEMENTS	1563:6	1563:6	11	
JUMP_STATEMENT	1563:6	1563:11	12	break DESTINATION ;
KEYWORD	1563:6	1563:6	13	break
LEAF_NODE	1563:6	1563:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1563:11	1563:11	13	;
EXPR_STATEMENT	1564:5	1564:25	10	* mb ++ = ( int16 ) ( * ma ++ ) ;
EXPR	1564:5	1564:5	11	* mb ++ = ( int16 ) ( * ma ++ )
ASSIGN	1564:5	1564:11	12	* mb ++ = ( int16 ) ( * ma ++ )
LVAL	1564:5	1564:5	13	* mb ++
UNARY_EXPR	1564:5	1564:6	14	* mb ++
UNARY_OPERATOR	1564:5	1564:5	15	*
LEAF_NODE	1564:5	1564:5	16	*
FIELD	1564:6	1564:8	15	mb ++
LEAF_NODE	1564:6	1564:6	16	mb
LEAF_NODE	1564:8	1564:8	16	++
ASSIGN_OP	1564:10	1564:10	13	=
LEAF_NODE	1564:10	1564:10	14	=
RVAL	1564:11	1564:24	13	( int16 ) ( * ma ++ )
LEAF_NODE	1564:11	1564:11	14	(
TYPE_NAME	1564:12	1564:12	14	int16
LEAF_NODE	1564:12	1564:12	15	int16
LEAF_NODE	1564:17	1564:17	14	)
LEAF_NODE	1564:18	1564:18	14	(
UNARY_EXPR	1564:19	1564:20	14	* ma ++
UNARY_OPERATOR	1564:19	1564:19	15	*
LEAF_NODE	1564:19	1564:19	16	*
FIELD	1564:20	1564:22	15	ma ++
LEAF_NODE	1564:20	1564:20	16	ma
LEAF_NODE	1564:22	1564:22	16	++
LEAF_NODE	1564:24	1564:24	14	)
LEAF_NODE	1564:25	1564:25	11	;
LEAF_NODE	1565:4	1565:4	9	}
LEAF_NODE	1566:3	1566:3	6	}
JUMP_STATEMENT	1567:3	1567:8	6	break DESTINATION ;
KEYWORD	1567:3	1567:3	7	break
LEAF_NODE	1567:3	1567:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1567:8	1567:8	7	;
LABEL	1568:2	1568:17	6	case TIFF_SLONG :
LEAF_NODE	1568:2	1568:2	7	case
LEAF_NODE	1568:7	1568:7	7	TIFF_SLONG
LEAF_NODE	1568:17	1568:17	7	:
LEAF_NODE	1569:3	1569:3	6	{
STATEMENTS	1570:4	1575:4	6	
SIMPLE_DECL	1570:4	1570:13	7	int32 * ma ;
VAR_DECL	1570:4	1570:11	8	int32 * ma
TYPE	1570:4	1570:9	9	int32 *
TYPE_NAME	1570:4	1570:4	10	int32
LEAF_NODE	1570:4	1570:4	11	int32
POINTER	1570:9	1570:9	10	*
LEAF_NODE	1570:9	1570:9	11	*
NAME	1570:11	1570:11	9	ma
LEAF_NODE	1570:11	1570:11	10	ma
LEAF_NODE	1570:13	1570:13	8	;
SIMPLE_DECL	1571:4	1571:13	7	int16 * mb ;
VAR_DECL	1571:4	1571:11	8	int16 * mb
TYPE	1571:4	1571:9	9	int16 *
TYPE_NAME	1571:4	1571:4	10	int16
LEAF_NODE	1571:4	1571:4	11	int16
POINTER	1571:9	1571:9	10	*
LEAF_NODE	1571:9	1571:9	11	*
NAME	1571:11	1571:11	9	mb
LEAF_NODE	1571:11	1571:11	10	mb
LEAF_NODE	1571:13	1571:13	8	;
SIMPLE_DECL	1572:4	1572:12	7	uint32 n ;
VAR_DECL	1572:4	1572:11	8	uint32 n
TYPE	1572:4	1572:4	9	uint32
TYPE_NAME	1572:4	1572:4	10	uint32
LEAF_NODE	1572:4	1572:4	11	uint32
NAME	1572:11	1572:11	9	n
LEAF_NODE	1572:11	1572:11	10	n
LEAF_NODE	1572:12	1572:12	8	;
EXPR_STATEMENT	1573:4	1573:23	7	ma = ( int32 * ) origdata ;
EXPR	1573:4	1573:4	8	ma = ( int32 * ) origdata
ASSIGN	1573:4	1573:7	9	ma = ( int32 * ) origdata
LVAL	1573:4	1573:4	10	ma
FIELD	1573:4	1573:4	11	ma
LEAF_NODE	1573:4	1573:4	12	ma
ASSIGN_OP	1573:6	1573:6	10	=
LEAF_NODE	1573:6	1573:6	11	=
RVAL	1573:7	1573:15	10	( int32 * ) origdata
LEAF_NODE	1573:7	1573:7	11	(
TYPE_NAME	1573:8	1573:8	11	int32
LEAF_NODE	1573:8	1573:8	12	int32
LEAF_NODE	1573:13	1573:13	11	*
LEAF_NODE	1573:14	1573:14	11	)
FIELD	1573:15	1573:15	11	origdata
LEAF_NODE	1573:15	1573:15	12	origdata
LEAF_NODE	1573:23	1573:23	8	;
EXPR_STATEMENT	1574:4	1574:11	7	mb = data ;
EXPR	1574:4	1574:4	8	mb = data
ASSIGN	1574:4	1574:7	9	mb = data
LVAL	1574:4	1574:4	10	mb
FIELD	1574:4	1574:4	11	mb
LEAF_NODE	1574:4	1574:4	12	mb
ASSIGN_OP	1574:6	1574:6	10	=
LEAF_NODE	1574:6	1574:6	11	=
RVAL	1574:7	1574:7	10	data
FIELD	1574:7	1574:7	11	data
LEAF_NODE	1574:7	1574:7	12	data
LEAF_NODE	1574:11	1574:11	8	;
ITERATION	1575:4	1576:4	7	
KEYWORD	1575:4	1575:4	8	for
LEAF_NODE	1575:4	1575:4	9	for
LEAF_NODE	1575:8	1575:8	8	(
FOR_INIT	1575:9	1575:12	8	n = 0 ;
EXPR	1575:9	1575:9	9	n = 0
ASSIGN	1575:9	1575:11	10	n = 0
LVAL	1575:9	1575:9	11	n
FIELD	1575:9	1575:9	12	n
LEAF_NODE	1575:9	1575:9	13	n
ASSIGN_OP	1575:10	1575:10	11	=
LEAF_NODE	1575:10	1575:10	12	=
RVAL	1575:11	1575:11	11	0
FIELD	1575:11	1575:11	12	0
LEAF_NODE	1575:11	1575:11	13	0
LEAF_NODE	1575:12	1575:12	9	;
CONDITION	1575:14	1575:14	8	n < count
EXPR	1575:14	1575:16	9	n < count
FIELD	1575:14	1575:14	10	n
LEAF_NODE	1575:14	1575:14	11	n
REL_OPERATOR	1575:15	1575:15	10	<
LEAF_NODE	1575:15	1575:15	11	<
FIELD	1575:16	1575:16	10	count
LEAF_NODE	1575:16	1575:16	11	count
LEAF_NODE	1575:21	1575:21	8	;
FOR_EXPR	1575:23	1575:23	8	n ++
EXPR	1575:23	1575:23	9	n ++
FIELD	1575:23	1575:24	10	n ++
LEAF_NODE	1575:23	1575:23	11	n
LEAF_NODE	1575:24	1575:24	11	++
LEAF_NODE	1575:26	1575:26	8	)
STATEMENTS	1576:4	1583:4	8	
LEAF_NODE	1576:4	1576:4	9	{
STATEMENTS	1577:5	1582:5	9	
SELECTION	1577:5	1578:6	10	
KEYWORD	1577:5	1577:5	11	if
LEAF_NODE	1577:5	1577:5	12	if
LEAF_NODE	1577:8	1577:8	11	(
CONDITION	1577:9	1577:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1577:9	1577:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1577:9	1577:14	13	tif -> tif_flags
LEAF_NODE	1577:9	1577:9	14	tif
LEAF_NODE	1577:12	1577:12	14	->
LEAF_NODE	1577:14	1577:14	14	tif_flags
LEAF_NODE	1577:23	1577:23	13	&
FIELD	1577:24	1577:24	13	TIFF_SWAB
LEAF_NODE	1577:24	1577:24	14	TIFF_SWAB
LEAF_NODE	1577:33	1577:33	11	)
STATEMENTS	1578:6	1578:6	11	
EXPR_STATEMENT	1578:6	1578:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	1578:6	1578:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	1578:6	1578:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	1578:6	1578:6	15	TIFFSwabLong
LEAF_NODE	1578:6	1578:6	16	TIFFSwabLong
LEAF_NODE	1578:18	1578:18	15	(
ARGUMENT	1578:19	1578:28	15	( uint32 * ) ma
LEAF_NODE	1578:19	1578:19	16	(
TYPE_NAME	1578:20	1578:20	16	uint32
LEAF_NODE	1578:20	1578:20	17	uint32
LEAF_NODE	1578:26	1578:26	16	*
LEAF_NODE	1578:27	1578:27	16	)
FIELD	1578:28	1578:28	16	ma
LEAF_NODE	1578:28	1578:28	17	ma
LEAF_NODE	1578:30	1578:30	15	)
LEAF_NODE	1578:31	1578:31	13	;
EXPR_STATEMENT	1579:5	1579:51	10	err = TIFFReadDirEntryCheckRangeSshortSlong ( * ma ) ;
EXPR	1579:5	1579:5	11	err = TIFFReadDirEntryCheckRangeSshortSlong ( * ma )
ASSIGN	1579:5	1579:9	12	err = TIFFReadDirEntryCheckRangeSshortSlong ( * ma )
LVAL	1579:5	1579:5	13	err
FIELD	1579:5	1579:5	14	err
LEAF_NODE	1579:5	1579:5	15	err
ASSIGN_OP	1579:8	1579:8	13	=
LEAF_NODE	1579:8	1579:8	14	=
RVAL	1579:9	1579:9	13	TIFFReadDirEntryCheckRangeSshortSlong ( * ma )
FUNCTION_CALL	1579:9	1579:50	14	TIFFReadDirEntryCheckRangeSshortSlong ( * ma )
CALLEE	1579:9	1579:9	15	TIFFReadDirEntryCheckRangeSshortSlong
LEAF_NODE	1579:9	1579:9	16	TIFFReadDirEntryCheckRangeSshortSlong
LEAF_NODE	1579:46	1579:46	15	(
ARGUMENT	1579:47	1579:47	15	* ma
UNARY_EXPR	1579:47	1579:48	16	* ma
UNARY_OPERATOR	1579:47	1579:47	17	*
LEAF_NODE	1579:47	1579:47	18	*
FIELD	1579:48	1579:48	17	ma
LEAF_NODE	1579:48	1579:48	18	ma
LEAF_NODE	1579:50	1579:50	15	)
LEAF_NODE	1579:51	1579:51	11	;
SELECTION	1580:5	1581:6	10	
KEYWORD	1580:5	1580:5	11	if
LEAF_NODE	1580:5	1580:5	12	if
LEAF_NODE	1580:8	1580:8	11	(
CONDITION	1580:9	1580:9	11	err != TIFFReadDirEntryErrOk
EXPR	1580:9	1580:14	12	err != TIFFReadDirEntryErrOk
FIELD	1580:9	1580:9	13	err
LEAF_NODE	1580:9	1580:9	14	err
EQ_OPERATOR	1580:12	1580:12	13	!=
LEAF_NODE	1580:12	1580:12	14	!=
FIELD	1580:14	1580:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1580:14	1580:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1580:35	1580:35	11	)
STATEMENTS	1581:6	1581:6	11	
JUMP_STATEMENT	1581:6	1581:11	12	break DESTINATION ;
KEYWORD	1581:6	1581:6	13	break
LEAF_NODE	1581:6	1581:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1581:11	1581:11	13	;
EXPR_STATEMENT	1582:5	1582:25	10	* mb ++ = ( int16 ) ( * ma ++ ) ;
EXPR	1582:5	1582:5	11	* mb ++ = ( int16 ) ( * ma ++ )
ASSIGN	1582:5	1582:11	12	* mb ++ = ( int16 ) ( * ma ++ )
LVAL	1582:5	1582:5	13	* mb ++
UNARY_EXPR	1582:5	1582:6	14	* mb ++
UNARY_OPERATOR	1582:5	1582:5	15	*
LEAF_NODE	1582:5	1582:5	16	*
FIELD	1582:6	1582:8	15	mb ++
LEAF_NODE	1582:6	1582:6	16	mb
LEAF_NODE	1582:8	1582:8	16	++
ASSIGN_OP	1582:10	1582:10	13	=
LEAF_NODE	1582:10	1582:10	14	=
RVAL	1582:11	1582:24	13	( int16 ) ( * ma ++ )
LEAF_NODE	1582:11	1582:11	14	(
TYPE_NAME	1582:12	1582:12	14	int16
LEAF_NODE	1582:12	1582:12	15	int16
LEAF_NODE	1582:17	1582:17	14	)
LEAF_NODE	1582:18	1582:18	14	(
UNARY_EXPR	1582:19	1582:20	14	* ma ++
UNARY_OPERATOR	1582:19	1582:19	15	*
LEAF_NODE	1582:19	1582:19	16	*
FIELD	1582:20	1582:22	15	ma ++
LEAF_NODE	1582:20	1582:20	16	ma
LEAF_NODE	1582:22	1582:22	16	++
LEAF_NODE	1582:24	1582:24	14	)
LEAF_NODE	1582:25	1582:25	11	;
LEAF_NODE	1583:4	1583:4	9	}
LEAF_NODE	1584:3	1584:3	6	}
JUMP_STATEMENT	1585:3	1585:8	6	break DESTINATION ;
KEYWORD	1585:3	1585:3	7	break
LEAF_NODE	1585:3	1585:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1585:8	1585:8	7	;
LABEL	1586:2	1586:17	6	case TIFF_LONG8 :
LEAF_NODE	1586:2	1586:2	7	case
LEAF_NODE	1586:7	1586:7	7	TIFF_LONG8
LEAF_NODE	1586:17	1586:17	7	:
LEAF_NODE	1587:3	1587:3	6	{
STATEMENTS	1588:4	1593:4	6	
SIMPLE_DECL	1588:4	1588:14	7	uint64 * ma ;
VAR_DECL	1588:4	1588:12	8	uint64 * ma
TYPE	1588:4	1588:10	9	uint64 *
TYPE_NAME	1588:4	1588:4	10	uint64
LEAF_NODE	1588:4	1588:4	11	uint64
POINTER	1588:10	1588:10	10	*
LEAF_NODE	1588:10	1588:10	11	*
NAME	1588:12	1588:12	9	ma
LEAF_NODE	1588:12	1588:12	10	ma
LEAF_NODE	1588:14	1588:14	8	;
SIMPLE_DECL	1589:4	1589:13	7	int16 * mb ;
VAR_DECL	1589:4	1589:11	8	int16 * mb
TYPE	1589:4	1589:9	9	int16 *
TYPE_NAME	1589:4	1589:4	10	int16
LEAF_NODE	1589:4	1589:4	11	int16
POINTER	1589:9	1589:9	10	*
LEAF_NODE	1589:9	1589:9	11	*
NAME	1589:11	1589:11	9	mb
LEAF_NODE	1589:11	1589:11	10	mb
LEAF_NODE	1589:13	1589:13	8	;
SIMPLE_DECL	1590:4	1590:12	7	uint32 n ;
VAR_DECL	1590:4	1590:11	8	uint32 n
TYPE	1590:4	1590:4	9	uint32
TYPE_NAME	1590:4	1590:4	10	uint32
LEAF_NODE	1590:4	1590:4	11	uint32
NAME	1590:11	1590:11	9	n
LEAF_NODE	1590:11	1590:11	10	n
LEAF_NODE	1590:12	1590:12	8	;
EXPR_STATEMENT	1591:4	1591:24	7	ma = ( uint64 * ) origdata ;
EXPR	1591:4	1591:4	8	ma = ( uint64 * ) origdata
ASSIGN	1591:4	1591:7	9	ma = ( uint64 * ) origdata
LVAL	1591:4	1591:4	10	ma
FIELD	1591:4	1591:4	11	ma
LEAF_NODE	1591:4	1591:4	12	ma
ASSIGN_OP	1591:6	1591:6	10	=
LEAF_NODE	1591:6	1591:6	11	=
RVAL	1591:7	1591:16	10	( uint64 * ) origdata
LEAF_NODE	1591:7	1591:7	11	(
TYPE_NAME	1591:8	1591:8	11	uint64
LEAF_NODE	1591:8	1591:8	12	uint64
LEAF_NODE	1591:14	1591:14	11	*
LEAF_NODE	1591:15	1591:15	11	)
FIELD	1591:16	1591:16	11	origdata
LEAF_NODE	1591:16	1591:16	12	origdata
LEAF_NODE	1591:24	1591:24	8	;
EXPR_STATEMENT	1592:4	1592:11	7	mb = data ;
EXPR	1592:4	1592:4	8	mb = data
ASSIGN	1592:4	1592:7	9	mb = data
LVAL	1592:4	1592:4	10	mb
FIELD	1592:4	1592:4	11	mb
LEAF_NODE	1592:4	1592:4	12	mb
ASSIGN_OP	1592:6	1592:6	10	=
LEAF_NODE	1592:6	1592:6	11	=
RVAL	1592:7	1592:7	10	data
FIELD	1592:7	1592:7	11	data
LEAF_NODE	1592:7	1592:7	12	data
LEAF_NODE	1592:11	1592:11	8	;
ITERATION	1593:4	1594:4	7	
KEYWORD	1593:4	1593:4	8	for
LEAF_NODE	1593:4	1593:4	9	for
LEAF_NODE	1593:8	1593:8	8	(
FOR_INIT	1593:9	1593:12	8	n = 0 ;
EXPR	1593:9	1593:9	9	n = 0
ASSIGN	1593:9	1593:11	10	n = 0
LVAL	1593:9	1593:9	11	n
FIELD	1593:9	1593:9	12	n
LEAF_NODE	1593:9	1593:9	13	n
ASSIGN_OP	1593:10	1593:10	11	=
LEAF_NODE	1593:10	1593:10	12	=
RVAL	1593:11	1593:11	11	0
FIELD	1593:11	1593:11	12	0
LEAF_NODE	1593:11	1593:11	13	0
LEAF_NODE	1593:12	1593:12	9	;
CONDITION	1593:14	1593:14	8	n < count
EXPR	1593:14	1593:16	9	n < count
FIELD	1593:14	1593:14	10	n
LEAF_NODE	1593:14	1593:14	11	n
REL_OPERATOR	1593:15	1593:15	10	<
LEAF_NODE	1593:15	1593:15	11	<
FIELD	1593:16	1593:16	10	count
LEAF_NODE	1593:16	1593:16	11	count
LEAF_NODE	1593:21	1593:21	8	;
FOR_EXPR	1593:23	1593:23	8	n ++
EXPR	1593:23	1593:23	9	n ++
FIELD	1593:23	1593:24	10	n ++
LEAF_NODE	1593:23	1593:23	11	n
LEAF_NODE	1593:24	1593:24	11	++
LEAF_NODE	1593:26	1593:26	8	)
STATEMENTS	1594:4	1601:4	8	
LEAF_NODE	1594:4	1594:4	9	{
STATEMENTS	1595:5	1600:5	9	
SELECTION	1595:5	1596:6	10	
KEYWORD	1595:5	1595:5	11	if
LEAF_NODE	1595:5	1595:5	12	if
LEAF_NODE	1595:8	1595:8	11	(
CONDITION	1595:9	1595:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1595:9	1595:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1595:9	1595:14	13	tif -> tif_flags
LEAF_NODE	1595:9	1595:9	14	tif
LEAF_NODE	1595:12	1595:12	14	->
LEAF_NODE	1595:14	1595:14	14	tif_flags
LEAF_NODE	1595:23	1595:23	13	&
FIELD	1595:24	1595:24	13	TIFF_SWAB
LEAF_NODE	1595:24	1595:24	14	TIFF_SWAB
LEAF_NODE	1595:33	1595:33	11	)
STATEMENTS	1596:6	1596:6	11	
EXPR_STATEMENT	1596:6	1596:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	1596:6	1596:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	1596:6	1596:22	14	TIFFSwabLong8 ( ma )
CALLEE	1596:6	1596:6	15	TIFFSwabLong8
LEAF_NODE	1596:6	1596:6	16	TIFFSwabLong8
LEAF_NODE	1596:19	1596:19	15	(
ARGUMENT	1596:20	1596:20	15	ma
FIELD	1596:20	1596:20	16	ma
LEAF_NODE	1596:20	1596:20	17	ma
LEAF_NODE	1596:22	1596:22	15	)
LEAF_NODE	1596:23	1596:23	13	;
EXPR_STATEMENT	1597:5	1597:51	10	err = TIFFReadDirEntryCheckRangeSshortLong8 ( * ma ) ;
EXPR	1597:5	1597:5	11	err = TIFFReadDirEntryCheckRangeSshortLong8 ( * ma )
ASSIGN	1597:5	1597:9	12	err = TIFFReadDirEntryCheckRangeSshortLong8 ( * ma )
LVAL	1597:5	1597:5	13	err
FIELD	1597:5	1597:5	14	err
LEAF_NODE	1597:5	1597:5	15	err
ASSIGN_OP	1597:8	1597:8	13	=
LEAF_NODE	1597:8	1597:8	14	=
RVAL	1597:9	1597:9	13	TIFFReadDirEntryCheckRangeSshortLong8 ( * ma )
FUNCTION_CALL	1597:9	1597:50	14	TIFFReadDirEntryCheckRangeSshortLong8 ( * ma )
CALLEE	1597:9	1597:9	15	TIFFReadDirEntryCheckRangeSshortLong8
LEAF_NODE	1597:9	1597:9	16	TIFFReadDirEntryCheckRangeSshortLong8
LEAF_NODE	1597:46	1597:46	15	(
ARGUMENT	1597:47	1597:47	15	* ma
UNARY_EXPR	1597:47	1597:48	16	* ma
UNARY_OPERATOR	1597:47	1597:47	17	*
LEAF_NODE	1597:47	1597:47	18	*
FIELD	1597:48	1597:48	17	ma
LEAF_NODE	1597:48	1597:48	18	ma
LEAF_NODE	1597:50	1597:50	15	)
LEAF_NODE	1597:51	1597:51	11	;
SELECTION	1598:5	1599:6	10	
KEYWORD	1598:5	1598:5	11	if
LEAF_NODE	1598:5	1598:5	12	if
LEAF_NODE	1598:8	1598:8	11	(
CONDITION	1598:9	1598:9	11	err != TIFFReadDirEntryErrOk
EXPR	1598:9	1598:14	12	err != TIFFReadDirEntryErrOk
FIELD	1598:9	1598:9	13	err
LEAF_NODE	1598:9	1598:9	14	err
EQ_OPERATOR	1598:12	1598:12	13	!=
LEAF_NODE	1598:12	1598:12	14	!=
FIELD	1598:14	1598:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1598:14	1598:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1598:35	1598:35	11	)
STATEMENTS	1599:6	1599:6	11	
JUMP_STATEMENT	1599:6	1599:11	12	break DESTINATION ;
KEYWORD	1599:6	1599:6	13	break
LEAF_NODE	1599:6	1599:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1599:11	1599:11	13	;
EXPR_STATEMENT	1600:5	1600:25	10	* mb ++ = ( int16 ) ( * ma ++ ) ;
EXPR	1600:5	1600:5	11	* mb ++ = ( int16 ) ( * ma ++ )
ASSIGN	1600:5	1600:11	12	* mb ++ = ( int16 ) ( * ma ++ )
LVAL	1600:5	1600:5	13	* mb ++
UNARY_EXPR	1600:5	1600:6	14	* mb ++
UNARY_OPERATOR	1600:5	1600:5	15	*
LEAF_NODE	1600:5	1600:5	16	*
FIELD	1600:6	1600:8	15	mb ++
LEAF_NODE	1600:6	1600:6	16	mb
LEAF_NODE	1600:8	1600:8	16	++
ASSIGN_OP	1600:10	1600:10	13	=
LEAF_NODE	1600:10	1600:10	14	=
RVAL	1600:11	1600:24	13	( int16 ) ( * ma ++ )
LEAF_NODE	1600:11	1600:11	14	(
TYPE_NAME	1600:12	1600:12	14	int16
LEAF_NODE	1600:12	1600:12	15	int16
LEAF_NODE	1600:17	1600:17	14	)
LEAF_NODE	1600:18	1600:18	14	(
UNARY_EXPR	1600:19	1600:20	14	* ma ++
UNARY_OPERATOR	1600:19	1600:19	15	*
LEAF_NODE	1600:19	1600:19	16	*
FIELD	1600:20	1600:22	15	ma ++
LEAF_NODE	1600:20	1600:20	16	ma
LEAF_NODE	1600:22	1600:22	16	++
LEAF_NODE	1600:24	1600:24	14	)
LEAF_NODE	1600:25	1600:25	11	;
LEAF_NODE	1601:4	1601:4	9	}
LEAF_NODE	1602:3	1602:3	6	}
JUMP_STATEMENT	1603:3	1603:8	6	break DESTINATION ;
KEYWORD	1603:3	1603:3	7	break
LEAF_NODE	1603:3	1603:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1603:8	1603:8	7	;
LABEL	1604:2	1604:18	6	case TIFF_SLONG8 :
LEAF_NODE	1604:2	1604:2	7	case
LEAF_NODE	1604:7	1604:7	7	TIFF_SLONG8
LEAF_NODE	1604:18	1604:18	7	:
LEAF_NODE	1605:3	1605:3	6	{
STATEMENTS	1606:4	1611:4	6	
SIMPLE_DECL	1606:4	1606:13	7	int64 * ma ;
VAR_DECL	1606:4	1606:11	8	int64 * ma
TYPE	1606:4	1606:9	9	int64 *
TYPE_NAME	1606:4	1606:4	10	int64
LEAF_NODE	1606:4	1606:4	11	int64
POINTER	1606:9	1606:9	10	*
LEAF_NODE	1606:9	1606:9	11	*
NAME	1606:11	1606:11	9	ma
LEAF_NODE	1606:11	1606:11	10	ma
LEAF_NODE	1606:13	1606:13	8	;
SIMPLE_DECL	1607:4	1607:13	7	int16 * mb ;
VAR_DECL	1607:4	1607:11	8	int16 * mb
TYPE	1607:4	1607:9	9	int16 *
TYPE_NAME	1607:4	1607:4	10	int16
LEAF_NODE	1607:4	1607:4	11	int16
POINTER	1607:9	1607:9	10	*
LEAF_NODE	1607:9	1607:9	11	*
NAME	1607:11	1607:11	9	mb
LEAF_NODE	1607:11	1607:11	10	mb
LEAF_NODE	1607:13	1607:13	8	;
SIMPLE_DECL	1608:4	1608:12	7	uint32 n ;
VAR_DECL	1608:4	1608:11	8	uint32 n
TYPE	1608:4	1608:4	9	uint32
TYPE_NAME	1608:4	1608:4	10	uint32
LEAF_NODE	1608:4	1608:4	11	uint32
NAME	1608:11	1608:11	9	n
LEAF_NODE	1608:11	1608:11	10	n
LEAF_NODE	1608:12	1608:12	8	;
EXPR_STATEMENT	1609:4	1609:23	7	ma = ( int64 * ) origdata ;
EXPR	1609:4	1609:4	8	ma = ( int64 * ) origdata
ASSIGN	1609:4	1609:7	9	ma = ( int64 * ) origdata
LVAL	1609:4	1609:4	10	ma
FIELD	1609:4	1609:4	11	ma
LEAF_NODE	1609:4	1609:4	12	ma
ASSIGN_OP	1609:6	1609:6	10	=
LEAF_NODE	1609:6	1609:6	11	=
RVAL	1609:7	1609:15	10	( int64 * ) origdata
LEAF_NODE	1609:7	1609:7	11	(
TYPE_NAME	1609:8	1609:8	11	int64
LEAF_NODE	1609:8	1609:8	12	int64
LEAF_NODE	1609:13	1609:13	11	*
LEAF_NODE	1609:14	1609:14	11	)
FIELD	1609:15	1609:15	11	origdata
LEAF_NODE	1609:15	1609:15	12	origdata
LEAF_NODE	1609:23	1609:23	8	;
EXPR_STATEMENT	1610:4	1610:11	7	mb = data ;
EXPR	1610:4	1610:4	8	mb = data
ASSIGN	1610:4	1610:7	9	mb = data
LVAL	1610:4	1610:4	10	mb
FIELD	1610:4	1610:4	11	mb
LEAF_NODE	1610:4	1610:4	12	mb
ASSIGN_OP	1610:6	1610:6	10	=
LEAF_NODE	1610:6	1610:6	11	=
RVAL	1610:7	1610:7	10	data
FIELD	1610:7	1610:7	11	data
LEAF_NODE	1610:7	1610:7	12	data
LEAF_NODE	1610:11	1610:11	8	;
ITERATION	1611:4	1612:4	7	
KEYWORD	1611:4	1611:4	8	for
LEAF_NODE	1611:4	1611:4	9	for
LEAF_NODE	1611:8	1611:8	8	(
FOR_INIT	1611:9	1611:12	8	n = 0 ;
EXPR	1611:9	1611:9	9	n = 0
ASSIGN	1611:9	1611:11	10	n = 0
LVAL	1611:9	1611:9	11	n
FIELD	1611:9	1611:9	12	n
LEAF_NODE	1611:9	1611:9	13	n
ASSIGN_OP	1611:10	1611:10	11	=
LEAF_NODE	1611:10	1611:10	12	=
RVAL	1611:11	1611:11	11	0
FIELD	1611:11	1611:11	12	0
LEAF_NODE	1611:11	1611:11	13	0
LEAF_NODE	1611:12	1611:12	9	;
CONDITION	1611:14	1611:14	8	n < count
EXPR	1611:14	1611:16	9	n < count
FIELD	1611:14	1611:14	10	n
LEAF_NODE	1611:14	1611:14	11	n
REL_OPERATOR	1611:15	1611:15	10	<
LEAF_NODE	1611:15	1611:15	11	<
FIELD	1611:16	1611:16	10	count
LEAF_NODE	1611:16	1611:16	11	count
LEAF_NODE	1611:21	1611:21	8	;
FOR_EXPR	1611:23	1611:23	8	n ++
EXPR	1611:23	1611:23	9	n ++
FIELD	1611:23	1611:24	10	n ++
LEAF_NODE	1611:23	1611:23	11	n
LEAF_NODE	1611:24	1611:24	11	++
LEAF_NODE	1611:26	1611:26	8	)
STATEMENTS	1612:4	1619:4	8	
LEAF_NODE	1612:4	1612:4	9	{
STATEMENTS	1613:5	1618:5	9	
SELECTION	1613:5	1614:6	10	
KEYWORD	1613:5	1613:5	11	if
LEAF_NODE	1613:5	1613:5	12	if
LEAF_NODE	1613:8	1613:8	11	(
CONDITION	1613:9	1613:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1613:9	1613:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1613:9	1613:14	13	tif -> tif_flags
LEAF_NODE	1613:9	1613:9	14	tif
LEAF_NODE	1613:12	1613:12	14	->
LEAF_NODE	1613:14	1613:14	14	tif_flags
LEAF_NODE	1613:23	1613:23	13	&
FIELD	1613:24	1613:24	13	TIFF_SWAB
LEAF_NODE	1613:24	1613:24	14	TIFF_SWAB
LEAF_NODE	1613:33	1613:33	11	)
STATEMENTS	1614:6	1614:6	11	
EXPR_STATEMENT	1614:6	1614:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	1614:6	1614:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	1614:6	1614:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	1614:6	1614:6	15	TIFFSwabLong8
LEAF_NODE	1614:6	1614:6	16	TIFFSwabLong8
LEAF_NODE	1614:19	1614:19	15	(
ARGUMENT	1614:20	1614:29	15	( uint64 * ) ma
LEAF_NODE	1614:20	1614:20	16	(
TYPE_NAME	1614:21	1614:21	16	uint64
LEAF_NODE	1614:21	1614:21	17	uint64
LEAF_NODE	1614:27	1614:27	16	*
LEAF_NODE	1614:28	1614:28	16	)
FIELD	1614:29	1614:29	16	ma
LEAF_NODE	1614:29	1614:29	17	ma
LEAF_NODE	1614:31	1614:31	15	)
LEAF_NODE	1614:32	1614:32	13	;
EXPR_STATEMENT	1615:5	1615:52	10	err = TIFFReadDirEntryCheckRangeSshortSlong8 ( * ma ) ;
EXPR	1615:5	1615:5	11	err = TIFFReadDirEntryCheckRangeSshortSlong8 ( * ma )
ASSIGN	1615:5	1615:9	12	err = TIFFReadDirEntryCheckRangeSshortSlong8 ( * ma )
LVAL	1615:5	1615:5	13	err
FIELD	1615:5	1615:5	14	err
LEAF_NODE	1615:5	1615:5	15	err
ASSIGN_OP	1615:8	1615:8	13	=
LEAF_NODE	1615:8	1615:8	14	=
RVAL	1615:9	1615:9	13	TIFFReadDirEntryCheckRangeSshortSlong8 ( * ma )
FUNCTION_CALL	1615:9	1615:51	14	TIFFReadDirEntryCheckRangeSshortSlong8 ( * ma )
CALLEE	1615:9	1615:9	15	TIFFReadDirEntryCheckRangeSshortSlong8
LEAF_NODE	1615:9	1615:9	16	TIFFReadDirEntryCheckRangeSshortSlong8
LEAF_NODE	1615:47	1615:47	15	(
ARGUMENT	1615:48	1615:48	15	* ma
UNARY_EXPR	1615:48	1615:49	16	* ma
UNARY_OPERATOR	1615:48	1615:48	17	*
LEAF_NODE	1615:48	1615:48	18	*
FIELD	1615:49	1615:49	17	ma
LEAF_NODE	1615:49	1615:49	18	ma
LEAF_NODE	1615:51	1615:51	15	)
LEAF_NODE	1615:52	1615:52	11	;
SELECTION	1616:5	1617:6	10	
KEYWORD	1616:5	1616:5	11	if
LEAF_NODE	1616:5	1616:5	12	if
LEAF_NODE	1616:8	1616:8	11	(
CONDITION	1616:9	1616:9	11	err != TIFFReadDirEntryErrOk
EXPR	1616:9	1616:14	12	err != TIFFReadDirEntryErrOk
FIELD	1616:9	1616:9	13	err
LEAF_NODE	1616:9	1616:9	14	err
EQ_OPERATOR	1616:12	1616:12	13	!=
LEAF_NODE	1616:12	1616:12	14	!=
FIELD	1616:14	1616:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1616:14	1616:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1616:35	1616:35	11	)
STATEMENTS	1617:6	1617:6	11	
JUMP_STATEMENT	1617:6	1617:11	12	break DESTINATION ;
KEYWORD	1617:6	1617:6	13	break
LEAF_NODE	1617:6	1617:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1617:11	1617:11	13	;
EXPR_STATEMENT	1618:5	1618:25	10	* mb ++ = ( int16 ) ( * ma ++ ) ;
EXPR	1618:5	1618:5	11	* mb ++ = ( int16 ) ( * ma ++ )
ASSIGN	1618:5	1618:11	12	* mb ++ = ( int16 ) ( * ma ++ )
LVAL	1618:5	1618:5	13	* mb ++
UNARY_EXPR	1618:5	1618:6	14	* mb ++
UNARY_OPERATOR	1618:5	1618:5	15	*
LEAF_NODE	1618:5	1618:5	16	*
FIELD	1618:6	1618:8	15	mb ++
LEAF_NODE	1618:6	1618:6	16	mb
LEAF_NODE	1618:8	1618:8	16	++
ASSIGN_OP	1618:10	1618:10	13	=
LEAF_NODE	1618:10	1618:10	14	=
RVAL	1618:11	1618:24	13	( int16 ) ( * ma ++ )
LEAF_NODE	1618:11	1618:11	14	(
TYPE_NAME	1618:12	1618:12	14	int16
LEAF_NODE	1618:12	1618:12	15	int16
LEAF_NODE	1618:17	1618:17	14	)
LEAF_NODE	1618:18	1618:18	14	(
UNARY_EXPR	1618:19	1618:20	14	* ma ++
UNARY_OPERATOR	1618:19	1618:19	15	*
LEAF_NODE	1618:19	1618:19	16	*
FIELD	1618:20	1618:22	15	ma ++
LEAF_NODE	1618:20	1618:20	16	ma
LEAF_NODE	1618:22	1618:22	16	++
LEAF_NODE	1618:24	1618:24	14	)
LEAF_NODE	1618:25	1618:25	11	;
LEAF_NODE	1619:4	1619:4	9	}
LEAF_NODE	1620:3	1620:3	6	}
JUMP_STATEMENT	1621:3	1621:8	6	break DESTINATION ;
KEYWORD	1621:3	1621:3	7	break
LEAF_NODE	1621:3	1621:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1621:8	1621:8	7	;
LEAF_NODE	1622:1	1622:1	5	}
EXPR_STATEMENT	1623:1	1623:20	3	_TIFFfree ( origdata ) ;
EXPR	1623:1	1623:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	1623:1	1623:19	5	_TIFFfree ( origdata )
CALLEE	1623:1	1623:1	6	_TIFFfree
LEAF_NODE	1623:1	1623:1	7	_TIFFfree
LEAF_NODE	1623:10	1623:10	6	(
ARGUMENT	1623:11	1623:11	6	origdata
FIELD	1623:11	1623:11	7	origdata
LEAF_NODE	1623:11	1623:11	8	origdata
LEAF_NODE	1623:19	1623:19	6	)
LEAF_NODE	1623:20	1623:20	4	;
SELECTION	1624:1	1625:1	3	
KEYWORD	1624:1	1624:1	4	if
LEAF_NODE	1624:1	1624:1	5	if
LEAF_NODE	1624:4	1624:4	4	(
CONDITION	1624:5	1624:5	4	err != TIFFReadDirEntryErrOk
EXPR	1624:5	1624:10	5	err != TIFFReadDirEntryErrOk
FIELD	1624:5	1624:5	6	err
LEAF_NODE	1624:5	1624:5	7	err
EQ_OPERATOR	1624:8	1624:8	6	!=
LEAF_NODE	1624:8	1624:8	7	!=
FIELD	1624:10	1624:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1624:10	1624:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	1624:31	1624:31	4	)
STATEMENTS	1625:1	1628:1	4	
LEAF_NODE	1625:1	1625:1	5	{
STATEMENTS	1626:2	1627:13	5	
EXPR_STATEMENT	1626:2	1626:17	6	_TIFFfree ( data ) ;
EXPR	1626:2	1626:2	7	_TIFFfree ( data )
FUNCTION_CALL	1626:2	1626:16	8	_TIFFfree ( data )
CALLEE	1626:2	1626:2	9	_TIFFfree
LEAF_NODE	1626:2	1626:2	10	_TIFFfree
LEAF_NODE	1626:11	1626:11	9	(
ARGUMENT	1626:12	1626:12	9	data
FIELD	1626:12	1626:12	10	data
LEAF_NODE	1626:12	1626:12	11	data
LEAF_NODE	1626:16	1626:16	9	)
LEAF_NODE	1626:17	1626:17	7	;
LEAF_NODE	1627:2	1627:2	6	return
LEAF_NODE	1627:8	1627:8	6	(
LEAF_NODE	1627:9	1627:9	6	err
LEAF_NODE	1627:12	1627:12	6	)
LEAF_NODE	1627:13	1627:13	6	;
LEAF_NODE	1628:1	1628:1	5	}
EXPR_STATEMENT	1629:1	1629:12	3	* value = data ;
EXPR	1629:1	1629:1	4	* value = data
ASSIGN	1629:1	1629:8	5	* value = data
LVAL	1629:1	1629:1	6	* value
UNARY_EXPR	1629:1	1629:2	7	* value
UNARY_OPERATOR	1629:1	1629:1	8	*
LEAF_NODE	1629:1	1629:1	9	*
FIELD	1629:2	1629:2	8	value
LEAF_NODE	1629:2	1629:2	9	value
ASSIGN_OP	1629:7	1629:7	6	=
LEAF_NODE	1629:7	1629:7	7	=
RVAL	1629:8	1629:8	6	data
FIELD	1629:8	1629:8	7	data
LEAF_NODE	1629:8	1629:8	8	data
LEAF_NODE	1629:12	1629:12	4	;
LEAF_NODE	1630:1	1630:1	3	return
LEAF_NODE	1630:7	1630:7	3	(
LEAF_NODE	1630:8	1630:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	1630:29	1630:29	3	)
LEAF_NODE	1630:30	1630:30	3	;
LEAF_NODE	1631:0	1631:0	2	}
FUNCTION_DEF	1633:0	1800:0	1	
RETURN_TYPE	1633:0	1633:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	1633:0	1633:0	3	static
TYPE_NAME	1633:7	1633:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	1633:7	1633:7	4	enum
LEAF_NODE	1633:12	1633:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	1633:32	1633:32	2	TIFFReadDirEntryLongArray
LEAF_NODE	1633:32	1633:32	3	TIFFReadDirEntryLongArray
PARAMETER_LIST	1633:57	1633:107	2	( TIFF * tif , TIFFDirEntry * direntry , uint32 * * value )
LEAF_NODE	1633:57	1633:57	3	(
PARAMETER_DECL	1633:58	1633:64	3	TIFF * tif
TYPE	1633:58	1633:62	4	TIFF *
TYPE_NAME	1633:58	1633:58	5	TIFF
LEAF_NODE	1633:58	1633:58	6	TIFF
POINTER	1633:62	1633:62	5	*
LEAF_NODE	1633:62	1633:62	6	*
NAME	1633:64	1633:64	4	tif
LEAF_NODE	1633:64	1633:64	5	tif
LEAF_NODE	1633:67	1633:67	3	,
PARAMETER_DECL	1633:69	1633:83	3	TIFFDirEntry * direntry
TYPE	1633:69	1633:81	4	TIFFDirEntry *
TYPE_NAME	1633:69	1633:69	5	TIFFDirEntry
LEAF_NODE	1633:69	1633:69	6	TIFFDirEntry
POINTER	1633:81	1633:81	5	*
LEAF_NODE	1633:81	1633:81	6	*
NAME	1633:83	1633:83	4	direntry
LEAF_NODE	1633:83	1633:83	5	direntry
LEAF_NODE	1633:91	1633:91	3	,
PARAMETER_DECL	1633:93	1633:102	3	uint32 * * value
TYPE	1633:93	1633:99	4	uint32 * *
TYPE_NAME	1633:93	1633:93	5	uint32
LEAF_NODE	1633:93	1633:93	6	uint32
POINTER	1633:99	1633:100	5	* *
LEAF_NODE	1633:99	1633:99	6	*
LEAF_NODE	1633:100	1633:100	6	*
NAME	1633:102	1633:102	4	value
LEAF_NODE	1633:102	1633:102	5	value
LEAF_NODE	1633:107	1633:107	3	)
LEAF_NODE	1634:0	1634:0	2	{
STATEMENTS	1635:1	1799:30	2	
SIMPLE_DECL	1635:1	1635:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	1635:1	1635:26	4	enum TIFFReadDirEntryErr err
TYPE	1635:1	1635:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	1635:1	1635:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	1635:1	1635:1	7	enum
LEAF_NODE	1635:6	1635:6	7	TIFFReadDirEntryErr
NAME	1635:26	1635:26	5	err
LEAF_NODE	1635:26	1635:26	6	err
LEAF_NODE	1635:29	1635:29	4	;
SIMPLE_DECL	1636:1	1636:13	3	uint32 count ;
VAR_DECL	1636:1	1636:8	4	uint32 count
TYPE	1636:1	1636:1	5	uint32
TYPE_NAME	1636:1	1636:1	6	uint32
LEAF_NODE	1636:1	1636:1	7	uint32
NAME	1636:8	1636:8	5	count
LEAF_NODE	1636:8	1636:8	6	count
LEAF_NODE	1636:13	1636:13	4	;
SIMPLE_DECL	1637:1	1637:15	3	void * origdata ;
VAR_DECL	1637:1	1637:7	4	void * origdata
TYPE	1637:1	1637:5	5	void *
TYPE_NAME	1637:1	1637:1	6	void
LEAF_NODE	1637:1	1637:1	7	void
POINTER	1637:5	1637:5	6	*
LEAF_NODE	1637:5	1637:5	7	*
NAME	1637:7	1637:7	5	origdata
LEAF_NODE	1637:7	1637:7	6	origdata
LEAF_NODE	1637:15	1637:15	4	;
SIMPLE_DECL	1638:1	1638:13	3	uint32 * data ;
VAR_DECL	1638:1	1638:9	4	uint32 * data
TYPE	1638:1	1638:7	5	uint32 *
TYPE_NAME	1638:1	1638:1	6	uint32
LEAF_NODE	1638:1	1638:1	7	uint32
POINTER	1638:7	1638:7	6	*
LEAF_NODE	1638:7	1638:7	7	*
NAME	1638:9	1638:9	5	data
LEAF_NODE	1638:9	1638:9	6	data
LEAF_NODE	1638:13	1638:13	4	;
SELECTION	1639:1	1640:1	3	
KEYWORD	1639:1	1639:1	4	switch
LEAF_NODE	1639:1	1639:1	5	switch
LEAF_NODE	1639:8	1639:8	4	(
CONDITION	1639:9	1639:9	4	direntry -> tdir_type
EXPR	1639:9	1639:9	5	direntry -> tdir_type
FIELD	1639:9	1639:19	6	direntry -> tdir_type
LEAF_NODE	1639:9	1639:9	7	direntry
LEAF_NODE	1639:17	1639:17	7	->
LEAF_NODE	1639:19	1639:19	7	tdir_type
LEAF_NODE	1639:28	1639:28	4	)
STATEMENTS	1640:1	1652:1	4	
LEAF_NODE	1640:1	1640:1	5	{
STATEMENTS	1641:2	1651:34	5	
LABEL	1641:2	1641:16	6	case TIFF_BYTE :
LEAF_NODE	1641:2	1641:2	7	case
LEAF_NODE	1641:7	1641:7	7	TIFF_BYTE
LEAF_NODE	1641:16	1641:16	7	:
LABEL	1642:2	1642:17	6	case TIFF_SBYTE :
LEAF_NODE	1642:2	1642:2	7	case
LEAF_NODE	1642:7	1642:7	7	TIFF_SBYTE
LEAF_NODE	1642:17	1642:17	7	:
LABEL	1643:2	1643:17	6	case TIFF_SHORT :
LEAF_NODE	1643:2	1643:2	7	case
LEAF_NODE	1643:7	1643:7	7	TIFF_SHORT
LEAF_NODE	1643:17	1643:17	7	:
LABEL	1644:2	1644:18	6	case TIFF_SSHORT :
LEAF_NODE	1644:2	1644:2	7	case
LEAF_NODE	1644:7	1644:7	7	TIFF_SSHORT
LEAF_NODE	1644:18	1644:18	7	:
LABEL	1645:2	1645:16	6	case TIFF_LONG :
LEAF_NODE	1645:2	1645:2	7	case
LEAF_NODE	1645:7	1645:7	7	TIFF_LONG
LEAF_NODE	1645:16	1645:16	7	:
LABEL	1646:2	1646:17	6	case TIFF_SLONG :
LEAF_NODE	1646:2	1646:2	7	case
LEAF_NODE	1646:7	1646:7	7	TIFF_SLONG
LEAF_NODE	1646:17	1646:17	7	:
LABEL	1647:2	1647:17	6	case TIFF_LONG8 :
LEAF_NODE	1647:2	1647:2	7	case
LEAF_NODE	1647:7	1647:7	7	TIFF_LONG8
LEAF_NODE	1647:17	1647:17	7	:
LABEL	1648:2	1648:18	6	case TIFF_SLONG8 :
LEAF_NODE	1648:2	1648:2	7	case
LEAF_NODE	1648:7	1648:7	7	TIFF_SLONG8
LEAF_NODE	1648:18	1648:18	7	:
JUMP_STATEMENT	1649:3	1649:8	6	break DESTINATION ;
KEYWORD	1649:3	1649:3	7	break
LEAF_NODE	1649:3	1649:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1649:8	1649:8	7	;
LABEL	1650:2	1650:9	6	default :
LEAF_NODE	1650:2	1650:2	7	default
LEAF_NODE	1650:9	1650:9	7	:
LEAF_NODE	1651:3	1651:3	6	return
LEAF_NODE	1651:9	1651:9	6	(
LEAF_NODE	1651:10	1651:10	6	TIFFReadDirEntryErrType
LEAF_NODE	1651:33	1651:33	6	)
LEAF_NODE	1651:34	1651:34	6	;
LEAF_NODE	1652:1	1652:1	5	}
EXPR_STATEMENT	1653:1	1653:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata ) ;
EXPR	1653:1	1653:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
ASSIGN	1653:1	1653:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
LVAL	1653:1	1653:1	6	err
FIELD	1653:1	1653:1	7	err
LEAF_NODE	1653:1	1653:1	8	err
ASSIGN_OP	1653:4	1653:4	6	=
LEAF_NODE	1653:4	1653:4	7	=
RVAL	1653:5	1653:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
FUNCTION_CALL	1653:5	1653:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
CALLEE	1653:5	1653:5	8	TIFFReadDirEntryArray
LEAF_NODE	1653:5	1653:5	9	TIFFReadDirEntryArray
LEAF_NODE	1653:26	1653:26	8	(
ARGUMENT	1653:27	1653:27	8	tif
FIELD	1653:27	1653:27	9	tif
LEAF_NODE	1653:27	1653:27	10	tif
LEAF_NODE	1653:30	1653:30	8	,
ARGUMENT	1653:31	1653:31	8	direntry
FIELD	1653:31	1653:31	9	direntry
LEAF_NODE	1653:31	1653:31	10	direntry
LEAF_NODE	1653:39	1653:39	8	,
ARGUMENT	1653:40	1653:40	8	& count
UNARY_EXPR	1653:40	1653:41	9	& count
UNARY_OPERATOR	1653:40	1653:40	10	&
LEAF_NODE	1653:40	1653:40	11	&
FIELD	1653:41	1653:41	10	count
LEAF_NODE	1653:41	1653:41	11	count
LEAF_NODE	1653:46	1653:46	8	,
ARGUMENT	1653:47	1653:47	8	4
FIELD	1653:47	1653:47	9	4
LEAF_NODE	1653:47	1653:47	10	4
LEAF_NODE	1653:48	1653:48	8	,
ARGUMENT	1653:49	1653:49	8	& origdata
UNARY_EXPR	1653:49	1653:50	9	& origdata
UNARY_OPERATOR	1653:49	1653:49	10	&
LEAF_NODE	1653:49	1653:49	11	&
FIELD	1653:50	1653:50	10	origdata
LEAF_NODE	1653:50	1653:50	11	origdata
LEAF_NODE	1653:58	1653:58	8	)
LEAF_NODE	1653:59	1653:59	4	;
SELECTION	1654:1	1655:1	3	
KEYWORD	1654:1	1654:1	4	if
LEAF_NODE	1654:1	1654:1	5	if
LEAF_NODE	1654:4	1654:4	4	(
CONDITION	1654:5	1654:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1654:5	1654:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	1654:5	1654:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1654:5	1654:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	1654:5	1654:5	8	(
FIELD	1654:6	1654:6	8	err
LEAF_NODE	1654:6	1654:6	9	err
EQ_OPERATOR	1654:9	1654:9	8	!=
LEAF_NODE	1654:9	1654:9	9	!=
FIELD	1654:11	1654:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	1654:11	1654:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	1654:32	1654:32	8	)
LEAF_NODE	1654:33	1654:33	7	||
EXPR	1654:35	1654:47	7	( origdata == 0 )
LEAF_NODE	1654:35	1654:35	8	(
FIELD	1654:36	1654:36	8	origdata
LEAF_NODE	1654:36	1654:36	9	origdata
EQ_OPERATOR	1654:44	1654:44	8	==
LEAF_NODE	1654:44	1654:44	9	==
FIELD	1654:46	1654:46	8	0
LEAF_NODE	1654:46	1654:46	9	0
LEAF_NODE	1654:47	1654:47	8	)
LEAF_NODE	1654:48	1654:48	4	)
STATEMENTS	1655:1	1658:1	4	
LEAF_NODE	1655:1	1655:1	5	{
STATEMENTS	1656:2	1657:13	5	
EXPR_STATEMENT	1656:2	1656:10	6	* value = 0 ;
EXPR	1656:2	1656:2	7	* value = 0
ASSIGN	1656:2	1656:9	8	* value = 0
LVAL	1656:2	1656:2	9	* value
UNARY_EXPR	1656:2	1656:3	10	* value
UNARY_OPERATOR	1656:2	1656:2	11	*
LEAF_NODE	1656:2	1656:2	12	*
FIELD	1656:3	1656:3	11	value
LEAF_NODE	1656:3	1656:3	12	value
ASSIGN_OP	1656:8	1656:8	9	=
LEAF_NODE	1656:8	1656:8	10	=
RVAL	1656:9	1656:9	9	0
FIELD	1656:9	1656:9	10	0
LEAF_NODE	1656:9	1656:9	11	0
LEAF_NODE	1656:10	1656:10	7	;
LEAF_NODE	1657:2	1657:2	6	return
LEAF_NODE	1657:8	1657:8	6	(
LEAF_NODE	1657:9	1657:9	6	err
LEAF_NODE	1657:12	1657:12	6	)
LEAF_NODE	1657:13	1657:13	6	;
LEAF_NODE	1658:1	1658:1	5	}
SELECTION	1659:1	1660:1	3	
KEYWORD	1659:1	1659:1	4	switch
LEAF_NODE	1659:1	1659:1	5	switch
LEAF_NODE	1659:8	1659:8	4	(
CONDITION	1659:9	1659:9	4	direntry -> tdir_type
EXPR	1659:9	1659:9	5	direntry -> tdir_type
FIELD	1659:9	1659:19	6	direntry -> tdir_type
LEAF_NODE	1659:9	1659:9	7	direntry
LEAF_NODE	1659:17	1659:17	7	->
LEAF_NODE	1659:19	1659:19	7	tdir_type
LEAF_NODE	1659:28	1659:28	4	)
STATEMENTS	1660:1	1686:1	4	
LEAF_NODE	1660:1	1660:1	5	{
STATEMENTS	1661:2	1685:3	5	
LABEL	1661:2	1661:16	6	case TIFF_LONG :
LEAF_NODE	1661:2	1661:2	7	case
LEAF_NODE	1661:7	1661:7	7	TIFF_LONG
LEAF_NODE	1661:16	1661:16	7	:
EXPR_STATEMENT	1662:3	1662:27	6	* value = ( uint32 * ) origdata ;
EXPR	1662:3	1662:3	7	* value = ( uint32 * ) origdata
ASSIGN	1662:3	1662:10	8	* value = ( uint32 * ) origdata
LVAL	1662:3	1662:3	9	* value
UNARY_EXPR	1662:3	1662:4	10	* value
UNARY_OPERATOR	1662:3	1662:3	11	*
LEAF_NODE	1662:3	1662:3	12	*
FIELD	1662:4	1662:4	11	value
LEAF_NODE	1662:4	1662:4	12	value
ASSIGN_OP	1662:9	1662:9	9	=
LEAF_NODE	1662:9	1662:9	10	=
RVAL	1662:10	1662:19	9	( uint32 * ) origdata
LEAF_NODE	1662:10	1662:10	10	(
TYPE_NAME	1662:11	1662:11	10	uint32
LEAF_NODE	1662:11	1662:11	11	uint32
LEAF_NODE	1662:17	1662:17	10	*
LEAF_NODE	1662:18	1662:18	10	)
FIELD	1662:19	1662:19	10	origdata
LEAF_NODE	1662:19	1662:19	11	origdata
LEAF_NODE	1662:27	1662:27	7	;
SELECTION	1663:3	1664:4	6	
KEYWORD	1663:3	1663:3	7	if
LEAF_NODE	1663:3	1663:3	8	if
LEAF_NODE	1663:6	1663:6	7	(
CONDITION	1663:7	1663:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	1663:7	1663:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	1663:7	1663:12	9	tif -> tif_flags
LEAF_NODE	1663:7	1663:7	10	tif
LEAF_NODE	1663:10	1663:10	10	->
LEAF_NODE	1663:12	1663:12	10	tif_flags
LEAF_NODE	1663:21	1663:21	9	&
FIELD	1663:22	1663:22	9	TIFF_SWAB
LEAF_NODE	1663:22	1663:22	10	TIFF_SWAB
LEAF_NODE	1663:31	1663:31	7	)
STATEMENTS	1664:4	1664:4	7	
EXPR_STATEMENT	1664:4	1664:37	8	TIFFSwabArrayOfLong ( * value , count ) ;
EXPR	1664:4	1664:4	9	TIFFSwabArrayOfLong ( * value , count )
FUNCTION_CALL	1664:4	1664:36	10	TIFFSwabArrayOfLong ( * value , count )
CALLEE	1664:4	1664:4	11	TIFFSwabArrayOfLong
LEAF_NODE	1664:4	1664:4	12	TIFFSwabArrayOfLong
LEAF_NODE	1664:23	1664:23	11	(
ARGUMENT	1664:24	1664:24	11	* value
UNARY_EXPR	1664:24	1664:25	12	* value
UNARY_OPERATOR	1664:24	1664:24	13	*
LEAF_NODE	1664:24	1664:24	14	*
FIELD	1664:25	1664:25	13	value
LEAF_NODE	1664:25	1664:25	14	value
LEAF_NODE	1664:30	1664:30	11	,
ARGUMENT	1664:31	1664:31	11	count
FIELD	1664:31	1664:31	12	count
LEAF_NODE	1664:31	1664:31	13	count
LEAF_NODE	1664:36	1664:36	11	)
LEAF_NODE	1664:37	1664:37	9	;
LEAF_NODE	1665:3	1665:3	6	return
LEAF_NODE	1665:9	1665:9	6	(
LEAF_NODE	1665:10	1665:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1665:31	1665:31	6	)
LEAF_NODE	1665:32	1665:32	6	;
LABEL	1666:2	1666:17	6	case TIFF_SLONG :
LEAF_NODE	1666:2	1666:2	7	case
LEAF_NODE	1666:7	1666:7	7	TIFF_SLONG
LEAF_NODE	1666:17	1666:17	7	:
LEAF_NODE	1667:3	1667:3	6	{
STATEMENTS	1668:4	1684:33	6	
SIMPLE_DECL	1668:4	1668:12	7	int32 * m ;
VAR_DECL	1668:4	1668:11	8	int32 * m
TYPE	1668:4	1668:9	9	int32 *
TYPE_NAME	1668:4	1668:4	10	int32
LEAF_NODE	1668:4	1668:4	11	int32
POINTER	1668:9	1668:9	10	*
LEAF_NODE	1668:9	1668:9	11	*
NAME	1668:11	1668:11	9	m
LEAF_NODE	1668:11	1668:11	10	m
LEAF_NODE	1668:12	1668:12	8	;
SIMPLE_DECL	1669:4	1669:12	7	uint32 n ;
VAR_DECL	1669:4	1669:11	8	uint32 n
TYPE	1669:4	1669:4	9	uint32
TYPE_NAME	1669:4	1669:4	10	uint32
LEAF_NODE	1669:4	1669:4	11	uint32
NAME	1669:11	1669:11	9	n
LEAF_NODE	1669:11	1669:11	10	n
LEAF_NODE	1669:12	1669:12	8	;
EXPR_STATEMENT	1670:4	1670:22	7	m = ( int32 * ) origdata ;
EXPR	1670:4	1670:4	8	m = ( int32 * ) origdata
ASSIGN	1670:4	1670:6	9	m = ( int32 * ) origdata
LVAL	1670:4	1670:4	10	m
FIELD	1670:4	1670:4	11	m
LEAF_NODE	1670:4	1670:4	12	m
ASSIGN_OP	1670:5	1670:5	10	=
LEAF_NODE	1670:5	1670:5	11	=
RVAL	1670:6	1670:14	10	( int32 * ) origdata
LEAF_NODE	1670:6	1670:6	11	(
TYPE_NAME	1670:7	1670:7	11	int32
LEAF_NODE	1670:7	1670:7	12	int32
LEAF_NODE	1670:12	1670:12	11	*
LEAF_NODE	1670:13	1670:13	11	)
FIELD	1670:14	1670:14	11	origdata
LEAF_NODE	1670:14	1670:14	12	origdata
LEAF_NODE	1670:22	1670:22	8	;
ITERATION	1671:4	1672:4	7	
KEYWORD	1671:4	1671:4	8	for
LEAF_NODE	1671:4	1671:4	9	for
LEAF_NODE	1671:8	1671:8	8	(
FOR_INIT	1671:9	1671:12	8	n = 0 ;
EXPR	1671:9	1671:9	9	n = 0
ASSIGN	1671:9	1671:11	10	n = 0
LVAL	1671:9	1671:9	11	n
FIELD	1671:9	1671:9	12	n
LEAF_NODE	1671:9	1671:9	13	n
ASSIGN_OP	1671:10	1671:10	11	=
LEAF_NODE	1671:10	1671:10	12	=
RVAL	1671:11	1671:11	11	0
FIELD	1671:11	1671:11	12	0
LEAF_NODE	1671:11	1671:11	13	0
LEAF_NODE	1671:12	1671:12	9	;
CONDITION	1671:14	1671:14	8	n < count
EXPR	1671:14	1671:16	9	n < count
FIELD	1671:14	1671:14	10	n
LEAF_NODE	1671:14	1671:14	11	n
REL_OPERATOR	1671:15	1671:15	10	<
LEAF_NODE	1671:15	1671:15	11	<
FIELD	1671:16	1671:16	10	count
LEAF_NODE	1671:16	1671:16	11	count
LEAF_NODE	1671:21	1671:21	8	;
FOR_EXPR	1671:23	1671:23	8	n ++
EXPR	1671:23	1671:23	9	n ++
FIELD	1671:23	1671:24	10	n ++
LEAF_NODE	1671:23	1671:23	11	n
LEAF_NODE	1671:24	1671:24	11	++
LEAF_NODE	1671:26	1671:26	8	)
STATEMENTS	1672:4	1682:4	8	
LEAF_NODE	1672:4	1672:4	9	{
STATEMENTS	1673:5	1681:5	9	
SELECTION	1673:5	1674:6	10	
KEYWORD	1673:5	1673:5	11	if
LEAF_NODE	1673:5	1673:5	12	if
LEAF_NODE	1673:8	1673:8	11	(
CONDITION	1673:9	1673:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1673:9	1673:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1673:9	1673:14	13	tif -> tif_flags
LEAF_NODE	1673:9	1673:9	14	tif
LEAF_NODE	1673:12	1673:12	14	->
LEAF_NODE	1673:14	1673:14	14	tif_flags
LEAF_NODE	1673:23	1673:23	13	&
FIELD	1673:24	1673:24	13	TIFF_SWAB
LEAF_NODE	1673:24	1673:24	14	TIFF_SWAB
LEAF_NODE	1673:33	1673:33	11	)
STATEMENTS	1674:6	1674:6	11	
EXPR_STATEMENT	1674:6	1674:30	12	TIFFSwabLong ( ( uint32 * ) m ) ;
EXPR	1674:6	1674:6	13	TIFFSwabLong ( ( uint32 * ) m )
FUNCTION_CALL	1674:6	1674:29	14	TIFFSwabLong ( ( uint32 * ) m )
CALLEE	1674:6	1674:6	15	TIFFSwabLong
LEAF_NODE	1674:6	1674:6	16	TIFFSwabLong
LEAF_NODE	1674:18	1674:18	15	(
ARGUMENT	1674:19	1674:28	15	( uint32 * ) m
LEAF_NODE	1674:19	1674:19	16	(
TYPE_NAME	1674:20	1674:20	16	uint32
LEAF_NODE	1674:20	1674:20	17	uint32
LEAF_NODE	1674:26	1674:26	16	*
LEAF_NODE	1674:27	1674:27	16	)
FIELD	1674:28	1674:28	16	m
LEAF_NODE	1674:28	1674:28	17	m
LEAF_NODE	1674:29	1674:29	15	)
LEAF_NODE	1674:30	1674:30	13	;
EXPR_STATEMENT	1675:5	1675:48	10	err = TIFFReadDirEntryCheckRangeLongSlong ( * m ) ;
EXPR	1675:5	1675:5	11	err = TIFFReadDirEntryCheckRangeLongSlong ( * m )
ASSIGN	1675:5	1675:9	12	err = TIFFReadDirEntryCheckRangeLongSlong ( * m )
LVAL	1675:5	1675:5	13	err
FIELD	1675:5	1675:5	14	err
LEAF_NODE	1675:5	1675:5	15	err
ASSIGN_OP	1675:8	1675:8	13	=
LEAF_NODE	1675:8	1675:8	14	=
RVAL	1675:9	1675:9	13	TIFFReadDirEntryCheckRangeLongSlong ( * m )
FUNCTION_CALL	1675:9	1675:47	14	TIFFReadDirEntryCheckRangeLongSlong ( * m )
CALLEE	1675:9	1675:9	15	TIFFReadDirEntryCheckRangeLongSlong
LEAF_NODE	1675:9	1675:9	16	TIFFReadDirEntryCheckRangeLongSlong
LEAF_NODE	1675:44	1675:44	15	(
ARGUMENT	1675:45	1675:45	15	* m
UNARY_EXPR	1675:45	1675:46	16	* m
UNARY_OPERATOR	1675:45	1675:45	17	*
LEAF_NODE	1675:45	1675:45	18	*
FIELD	1675:46	1675:46	17	m
LEAF_NODE	1675:46	1675:46	18	m
LEAF_NODE	1675:47	1675:47	15	)
LEAF_NODE	1675:48	1675:48	11	;
SELECTION	1676:5	1677:5	10	
KEYWORD	1676:5	1676:5	11	if
LEAF_NODE	1676:5	1676:5	12	if
LEAF_NODE	1676:8	1676:8	11	(
CONDITION	1676:9	1676:9	11	err != TIFFReadDirEntryErrOk
EXPR	1676:9	1676:14	12	err != TIFFReadDirEntryErrOk
FIELD	1676:9	1676:9	13	err
LEAF_NODE	1676:9	1676:9	14	err
EQ_OPERATOR	1676:12	1676:12	13	!=
LEAF_NODE	1676:12	1676:12	14	!=
FIELD	1676:14	1676:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1676:14	1676:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1676:35	1676:35	11	)
STATEMENTS	1677:5	1680:5	11	
LEAF_NODE	1677:5	1677:5	12	{
STATEMENTS	1678:6	1679:17	12	
EXPR_STATEMENT	1678:6	1678:25	13	_TIFFfree ( origdata ) ;
EXPR	1678:6	1678:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	1678:6	1678:24	15	_TIFFfree ( origdata )
CALLEE	1678:6	1678:6	16	_TIFFfree
LEAF_NODE	1678:6	1678:6	17	_TIFFfree
LEAF_NODE	1678:15	1678:15	16	(
ARGUMENT	1678:16	1678:16	16	origdata
FIELD	1678:16	1678:16	17	origdata
LEAF_NODE	1678:16	1678:16	18	origdata
LEAF_NODE	1678:24	1678:24	16	)
LEAF_NODE	1678:25	1678:25	14	;
LEAF_NODE	1679:6	1679:6	13	return
LEAF_NODE	1679:12	1679:12	13	(
LEAF_NODE	1679:13	1679:13	13	err
LEAF_NODE	1679:16	1679:16	13	)
LEAF_NODE	1679:17	1679:17	13	;
LEAF_NODE	1680:5	1680:5	12	}
EXPR_STATEMENT	1681:5	1681:8	10	m ++ ;
EXPR	1681:5	1681:5	11	m ++
FIELD	1681:5	1681:6	12	m ++
LEAF_NODE	1681:5	1681:5	13	m
LEAF_NODE	1681:6	1681:6	13	++
LEAF_NODE	1681:8	1681:8	11	;
LEAF_NODE	1682:4	1682:4	9	}
EXPR_STATEMENT	1683:4	1683:28	7	* value = ( uint32 * ) origdata ;
EXPR	1683:4	1683:4	8	* value = ( uint32 * ) origdata
ASSIGN	1683:4	1683:11	9	* value = ( uint32 * ) origdata
LVAL	1683:4	1683:4	10	* value
UNARY_EXPR	1683:4	1683:5	11	* value
UNARY_OPERATOR	1683:4	1683:4	12	*
LEAF_NODE	1683:4	1683:4	13	*
FIELD	1683:5	1683:5	12	value
LEAF_NODE	1683:5	1683:5	13	value
ASSIGN_OP	1683:10	1683:10	10	=
LEAF_NODE	1683:10	1683:10	11	=
RVAL	1683:11	1683:20	10	( uint32 * ) origdata
LEAF_NODE	1683:11	1683:11	11	(
TYPE_NAME	1683:12	1683:12	11	uint32
LEAF_NODE	1683:12	1683:12	12	uint32
LEAF_NODE	1683:18	1683:18	11	*
LEAF_NODE	1683:19	1683:19	11	)
FIELD	1683:20	1683:20	11	origdata
LEAF_NODE	1683:20	1683:20	12	origdata
LEAF_NODE	1683:28	1683:28	8	;
LEAF_NODE	1684:4	1684:4	7	return
LEAF_NODE	1684:10	1684:10	7	(
LEAF_NODE	1684:11	1684:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	1684:32	1684:32	7	)
LEAF_NODE	1684:33	1684:33	7	;
LEAF_NODE	1685:3	1685:3	6	}
LEAF_NODE	1686:1	1686:1	5	}
EXPR_STATEMENT	1687:1	1687:35	3	data = ( uint32 * ) _TIFFmalloc ( count * 4 ) ;
EXPR	1687:1	1687:1	4	data = ( uint32 * ) _TIFFmalloc ( count * 4 )
ASSIGN	1687:1	1687:6	5	data = ( uint32 * ) _TIFFmalloc ( count * 4 )
LVAL	1687:1	1687:1	6	data
FIELD	1687:1	1687:1	7	data
LEAF_NODE	1687:1	1687:1	8	data
ASSIGN_OP	1687:5	1687:5	6	=
LEAF_NODE	1687:5	1687:5	7	=
RVAL	1687:6	1687:15	6	( uint32 * ) _TIFFmalloc ( count * 4 )
LEAF_NODE	1687:6	1687:6	7	(
TYPE_NAME	1687:7	1687:7	7	uint32
LEAF_NODE	1687:7	1687:7	8	uint32
LEAF_NODE	1687:13	1687:13	7	*
LEAF_NODE	1687:14	1687:14	7	)
FUNCTION_CALL	1687:15	1687:34	7	_TIFFmalloc ( count * 4 )
CALLEE	1687:15	1687:15	8	_TIFFmalloc
LEAF_NODE	1687:15	1687:15	9	_TIFFmalloc
LEAF_NODE	1687:26	1687:26	8	(
ARGUMENT	1687:27	1687:33	8	count * 4
FIELD	1687:27	1687:27	9	count
LEAF_NODE	1687:27	1687:27	10	count
LEAF_NODE	1687:32	1687:32	9	*
FIELD	1687:33	1687:33	9	4
LEAF_NODE	1687:33	1687:33	10	4
LEAF_NODE	1687:34	1687:34	8	)
LEAF_NODE	1687:35	1687:35	4	;
SELECTION	1688:1	1689:1	3	
KEYWORD	1688:1	1688:1	4	if
LEAF_NODE	1688:1	1688:1	5	if
LEAF_NODE	1688:4	1688:4	4	(
CONDITION	1688:5	1688:5	4	data == 0
EXPR	1688:5	1688:11	5	data == 0
FIELD	1688:5	1688:5	6	data
LEAF_NODE	1688:5	1688:5	7	data
EQ_OPERATOR	1688:9	1688:9	6	==
LEAF_NODE	1688:9	1688:9	7	==
FIELD	1688:11	1688:11	6	0
LEAF_NODE	1688:11	1688:11	7	0
LEAF_NODE	1688:12	1688:12	4	)
STATEMENTS	1689:1	1692:1	4	
LEAF_NODE	1689:1	1689:1	5	{
STATEMENTS	1690:2	1691:34	5	
EXPR_STATEMENT	1690:2	1690:21	6	_TIFFfree ( origdata ) ;
EXPR	1690:2	1690:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	1690:2	1690:20	8	_TIFFfree ( origdata )
CALLEE	1690:2	1690:2	9	_TIFFfree
LEAF_NODE	1690:2	1690:2	10	_TIFFfree
LEAF_NODE	1690:11	1690:11	9	(
ARGUMENT	1690:12	1690:12	9	origdata
FIELD	1690:12	1690:12	10	origdata
LEAF_NODE	1690:12	1690:12	11	origdata
LEAF_NODE	1690:20	1690:20	9	)
LEAF_NODE	1690:21	1690:21	7	;
LEAF_NODE	1691:2	1691:2	6	return
LEAF_NODE	1691:8	1691:8	6	(
LEAF_NODE	1691:9	1691:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	1691:33	1691:33	6	)
LEAF_NODE	1691:34	1691:34	6	;
LEAF_NODE	1692:1	1692:1	5	}
SELECTION	1693:1	1694:1	3	
KEYWORD	1693:1	1693:1	4	switch
LEAF_NODE	1693:1	1693:1	5	switch
LEAF_NODE	1693:8	1693:8	4	(
CONDITION	1693:9	1693:9	4	direntry -> tdir_type
EXPR	1693:9	1693:9	5	direntry -> tdir_type
FIELD	1693:9	1693:19	6	direntry -> tdir_type
LEAF_NODE	1693:9	1693:9	7	direntry
LEAF_NODE	1693:17	1693:17	7	->
LEAF_NODE	1693:19	1693:19	7	tdir_type
LEAF_NODE	1693:28	1693:28	4	)
STATEMENTS	1694:1	1791:1	4	
LEAF_NODE	1694:1	1694:1	5	{
STATEMENTS	1695:2	1790:3	5	
LABEL	1695:2	1695:16	6	case TIFF_BYTE :
LEAF_NODE	1695:2	1695:2	7	case
LEAF_NODE	1695:7	1695:7	7	TIFF_BYTE
LEAF_NODE	1695:16	1695:16	7	:
LEAF_NODE	1696:3	1696:3	6	{
STATEMENTS	1697:4	1702:4	6	
SIMPLE_DECL	1697:4	1697:13	7	uint8 * ma ;
VAR_DECL	1697:4	1697:11	8	uint8 * ma
TYPE	1697:4	1697:9	9	uint8 *
TYPE_NAME	1697:4	1697:4	10	uint8
LEAF_NODE	1697:4	1697:4	11	uint8
POINTER	1697:9	1697:9	10	*
LEAF_NODE	1697:9	1697:9	11	*
NAME	1697:11	1697:11	9	ma
LEAF_NODE	1697:11	1697:11	10	ma
LEAF_NODE	1697:13	1697:13	8	;
SIMPLE_DECL	1698:4	1698:14	7	uint32 * mb ;
VAR_DECL	1698:4	1698:12	8	uint32 * mb
TYPE	1698:4	1698:10	9	uint32 *
TYPE_NAME	1698:4	1698:4	10	uint32
LEAF_NODE	1698:4	1698:4	11	uint32
POINTER	1698:10	1698:10	10	*
LEAF_NODE	1698:10	1698:10	11	*
NAME	1698:12	1698:12	9	mb
LEAF_NODE	1698:12	1698:12	10	mb
LEAF_NODE	1698:14	1698:14	8	;
SIMPLE_DECL	1699:4	1699:12	7	uint32 n ;
VAR_DECL	1699:4	1699:11	8	uint32 n
TYPE	1699:4	1699:4	9	uint32
TYPE_NAME	1699:4	1699:4	10	uint32
LEAF_NODE	1699:4	1699:4	11	uint32
NAME	1699:11	1699:11	9	n
LEAF_NODE	1699:11	1699:11	10	n
LEAF_NODE	1699:12	1699:12	8	;
EXPR_STATEMENT	1700:4	1700:23	7	ma = ( uint8 * ) origdata ;
EXPR	1700:4	1700:4	8	ma = ( uint8 * ) origdata
ASSIGN	1700:4	1700:7	9	ma = ( uint8 * ) origdata
LVAL	1700:4	1700:4	10	ma
FIELD	1700:4	1700:4	11	ma
LEAF_NODE	1700:4	1700:4	12	ma
ASSIGN_OP	1700:6	1700:6	10	=
LEAF_NODE	1700:6	1700:6	11	=
RVAL	1700:7	1700:15	10	( uint8 * ) origdata
LEAF_NODE	1700:7	1700:7	11	(
TYPE_NAME	1700:8	1700:8	11	uint8
LEAF_NODE	1700:8	1700:8	12	uint8
LEAF_NODE	1700:13	1700:13	11	*
LEAF_NODE	1700:14	1700:14	11	)
FIELD	1700:15	1700:15	11	origdata
LEAF_NODE	1700:15	1700:15	12	origdata
LEAF_NODE	1700:23	1700:23	8	;
EXPR_STATEMENT	1701:4	1701:11	7	mb = data ;
EXPR	1701:4	1701:4	8	mb = data
ASSIGN	1701:4	1701:7	9	mb = data
LVAL	1701:4	1701:4	10	mb
FIELD	1701:4	1701:4	11	mb
LEAF_NODE	1701:4	1701:4	12	mb
ASSIGN_OP	1701:6	1701:6	10	=
LEAF_NODE	1701:6	1701:6	11	=
RVAL	1701:7	1701:7	10	data
FIELD	1701:7	1701:7	11	data
LEAF_NODE	1701:7	1701:7	12	data
LEAF_NODE	1701:11	1701:11	8	;
ITERATION	1702:4	1703:5	7	
KEYWORD	1702:4	1702:4	8	for
LEAF_NODE	1702:4	1702:4	9	for
LEAF_NODE	1702:8	1702:8	8	(
FOR_INIT	1702:9	1702:12	8	n = 0 ;
EXPR	1702:9	1702:9	9	n = 0
ASSIGN	1702:9	1702:11	10	n = 0
LVAL	1702:9	1702:9	11	n
FIELD	1702:9	1702:9	12	n
LEAF_NODE	1702:9	1702:9	13	n
ASSIGN_OP	1702:10	1702:10	11	=
LEAF_NODE	1702:10	1702:10	12	=
RVAL	1702:11	1702:11	11	0
FIELD	1702:11	1702:11	12	0
LEAF_NODE	1702:11	1702:11	13	0
LEAF_NODE	1702:12	1702:12	9	;
CONDITION	1702:14	1702:14	8	n < count
EXPR	1702:14	1702:16	9	n < count
FIELD	1702:14	1702:14	10	n
LEAF_NODE	1702:14	1702:14	11	n
REL_OPERATOR	1702:15	1702:15	10	<
LEAF_NODE	1702:15	1702:15	11	<
FIELD	1702:16	1702:16	10	count
LEAF_NODE	1702:16	1702:16	11	count
LEAF_NODE	1702:21	1702:21	8	;
FOR_EXPR	1702:23	1702:23	8	n ++
EXPR	1702:23	1702:23	9	n ++
FIELD	1702:23	1702:24	10	n ++
LEAF_NODE	1702:23	1702:23	11	n
LEAF_NODE	1702:24	1702:24	11	++
LEAF_NODE	1702:26	1702:26	8	)
STATEMENTS	1703:5	1703:5	8	
EXPR_STATEMENT	1703:5	1703:26	9	* mb ++ = ( uint32 ) ( * ma ++ ) ;
EXPR	1703:5	1703:5	10	* mb ++ = ( uint32 ) ( * ma ++ )
ASSIGN	1703:5	1703:11	11	* mb ++ = ( uint32 ) ( * ma ++ )
LVAL	1703:5	1703:5	12	* mb ++
UNARY_EXPR	1703:5	1703:6	13	* mb ++
UNARY_OPERATOR	1703:5	1703:5	14	*
LEAF_NODE	1703:5	1703:5	15	*
FIELD	1703:6	1703:8	14	mb ++
LEAF_NODE	1703:6	1703:6	15	mb
LEAF_NODE	1703:8	1703:8	15	++
ASSIGN_OP	1703:10	1703:10	12	=
LEAF_NODE	1703:10	1703:10	13	=
RVAL	1703:11	1703:25	12	( uint32 ) ( * ma ++ )
LEAF_NODE	1703:11	1703:11	13	(
TYPE_NAME	1703:12	1703:12	13	uint32
LEAF_NODE	1703:12	1703:12	14	uint32
LEAF_NODE	1703:18	1703:18	13	)
LEAF_NODE	1703:19	1703:19	13	(
UNARY_EXPR	1703:20	1703:21	13	* ma ++
UNARY_OPERATOR	1703:20	1703:20	14	*
LEAF_NODE	1703:20	1703:20	15	*
FIELD	1703:21	1703:23	14	ma ++
LEAF_NODE	1703:21	1703:21	15	ma
LEAF_NODE	1703:23	1703:23	15	++
LEAF_NODE	1703:25	1703:25	13	)
LEAF_NODE	1703:26	1703:26	10	;
LEAF_NODE	1704:3	1704:3	6	}
JUMP_STATEMENT	1705:3	1705:8	6	break DESTINATION ;
KEYWORD	1705:3	1705:3	7	break
LEAF_NODE	1705:3	1705:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1705:8	1705:8	7	;
LABEL	1706:2	1706:17	6	case TIFF_SBYTE :
LEAF_NODE	1706:2	1706:2	7	case
LEAF_NODE	1706:7	1706:7	7	TIFF_SBYTE
LEAF_NODE	1706:17	1706:17	7	:
LEAF_NODE	1707:3	1707:3	6	{
STATEMENTS	1708:4	1713:4	6	
SIMPLE_DECL	1708:4	1708:12	7	int8 * ma ;
VAR_DECL	1708:4	1708:10	8	int8 * ma
TYPE	1708:4	1708:8	9	int8 *
TYPE_NAME	1708:4	1708:4	10	int8
LEAF_NODE	1708:4	1708:4	11	int8
POINTER	1708:8	1708:8	10	*
LEAF_NODE	1708:8	1708:8	11	*
NAME	1708:10	1708:10	9	ma
LEAF_NODE	1708:10	1708:10	10	ma
LEAF_NODE	1708:12	1708:12	8	;
SIMPLE_DECL	1709:4	1709:14	7	uint32 * mb ;
VAR_DECL	1709:4	1709:12	8	uint32 * mb
TYPE	1709:4	1709:10	9	uint32 *
TYPE_NAME	1709:4	1709:4	10	uint32
LEAF_NODE	1709:4	1709:4	11	uint32
POINTER	1709:10	1709:10	10	*
LEAF_NODE	1709:10	1709:10	11	*
NAME	1709:12	1709:12	9	mb
LEAF_NODE	1709:12	1709:12	10	mb
LEAF_NODE	1709:14	1709:14	8	;
SIMPLE_DECL	1710:4	1710:12	7	uint32 n ;
VAR_DECL	1710:4	1710:11	8	uint32 n
TYPE	1710:4	1710:4	9	uint32
TYPE_NAME	1710:4	1710:4	10	uint32
LEAF_NODE	1710:4	1710:4	11	uint32
NAME	1710:11	1710:11	9	n
LEAF_NODE	1710:11	1710:11	10	n
LEAF_NODE	1710:12	1710:12	8	;
EXPR_STATEMENT	1711:4	1711:22	7	ma = ( int8 * ) origdata ;
EXPR	1711:4	1711:4	8	ma = ( int8 * ) origdata
ASSIGN	1711:4	1711:7	9	ma = ( int8 * ) origdata
LVAL	1711:4	1711:4	10	ma
FIELD	1711:4	1711:4	11	ma
LEAF_NODE	1711:4	1711:4	12	ma
ASSIGN_OP	1711:6	1711:6	10	=
LEAF_NODE	1711:6	1711:6	11	=
RVAL	1711:7	1711:14	10	( int8 * ) origdata
LEAF_NODE	1711:7	1711:7	11	(
TYPE_NAME	1711:8	1711:8	11	int8
LEAF_NODE	1711:8	1711:8	12	int8
LEAF_NODE	1711:12	1711:12	11	*
LEAF_NODE	1711:13	1711:13	11	)
FIELD	1711:14	1711:14	11	origdata
LEAF_NODE	1711:14	1711:14	12	origdata
LEAF_NODE	1711:22	1711:22	8	;
EXPR_STATEMENT	1712:4	1712:11	7	mb = data ;
EXPR	1712:4	1712:4	8	mb = data
ASSIGN	1712:4	1712:7	9	mb = data
LVAL	1712:4	1712:4	10	mb
FIELD	1712:4	1712:4	11	mb
LEAF_NODE	1712:4	1712:4	12	mb
ASSIGN_OP	1712:6	1712:6	10	=
LEAF_NODE	1712:6	1712:6	11	=
RVAL	1712:7	1712:7	10	data
FIELD	1712:7	1712:7	11	data
LEAF_NODE	1712:7	1712:7	12	data
LEAF_NODE	1712:11	1712:11	8	;
ITERATION	1713:4	1714:4	7	
KEYWORD	1713:4	1713:4	8	for
LEAF_NODE	1713:4	1713:4	9	for
LEAF_NODE	1713:8	1713:8	8	(
FOR_INIT	1713:9	1713:12	8	n = 0 ;
EXPR	1713:9	1713:9	9	n = 0
ASSIGN	1713:9	1713:11	10	n = 0
LVAL	1713:9	1713:9	11	n
FIELD	1713:9	1713:9	12	n
LEAF_NODE	1713:9	1713:9	13	n
ASSIGN_OP	1713:10	1713:10	11	=
LEAF_NODE	1713:10	1713:10	12	=
RVAL	1713:11	1713:11	11	0
FIELD	1713:11	1713:11	12	0
LEAF_NODE	1713:11	1713:11	13	0
LEAF_NODE	1713:12	1713:12	9	;
CONDITION	1713:14	1713:14	8	n < count
EXPR	1713:14	1713:16	9	n < count
FIELD	1713:14	1713:14	10	n
LEAF_NODE	1713:14	1713:14	11	n
REL_OPERATOR	1713:15	1713:15	10	<
LEAF_NODE	1713:15	1713:15	11	<
FIELD	1713:16	1713:16	10	count
LEAF_NODE	1713:16	1713:16	11	count
LEAF_NODE	1713:21	1713:21	8	;
FOR_EXPR	1713:23	1713:23	8	n ++
EXPR	1713:23	1713:23	9	n ++
FIELD	1713:23	1713:24	10	n ++
LEAF_NODE	1713:23	1713:23	11	n
LEAF_NODE	1713:24	1713:24	11	++
LEAF_NODE	1713:26	1713:26	8	)
STATEMENTS	1714:4	1719:4	8	
LEAF_NODE	1714:4	1714:4	9	{
STATEMENTS	1715:5	1718:5	9	
EXPR_STATEMENT	1715:5	1715:49	10	err = TIFFReadDirEntryCheckRangeLongSbyte ( * ma ) ;
EXPR	1715:5	1715:5	11	err = TIFFReadDirEntryCheckRangeLongSbyte ( * ma )
ASSIGN	1715:5	1715:9	12	err = TIFFReadDirEntryCheckRangeLongSbyte ( * ma )
LVAL	1715:5	1715:5	13	err
FIELD	1715:5	1715:5	14	err
LEAF_NODE	1715:5	1715:5	15	err
ASSIGN_OP	1715:8	1715:8	13	=
LEAF_NODE	1715:8	1715:8	14	=
RVAL	1715:9	1715:9	13	TIFFReadDirEntryCheckRangeLongSbyte ( * ma )
FUNCTION_CALL	1715:9	1715:48	14	TIFFReadDirEntryCheckRangeLongSbyte ( * ma )
CALLEE	1715:9	1715:9	15	TIFFReadDirEntryCheckRangeLongSbyte
LEAF_NODE	1715:9	1715:9	16	TIFFReadDirEntryCheckRangeLongSbyte
LEAF_NODE	1715:44	1715:44	15	(
ARGUMENT	1715:45	1715:45	15	* ma
UNARY_EXPR	1715:45	1715:46	16	* ma
UNARY_OPERATOR	1715:45	1715:45	17	*
LEAF_NODE	1715:45	1715:45	18	*
FIELD	1715:46	1715:46	17	ma
LEAF_NODE	1715:46	1715:46	18	ma
LEAF_NODE	1715:48	1715:48	15	)
LEAF_NODE	1715:49	1715:49	11	;
SELECTION	1716:5	1717:6	10	
KEYWORD	1716:5	1716:5	11	if
LEAF_NODE	1716:5	1716:5	12	if
LEAF_NODE	1716:8	1716:8	11	(
CONDITION	1716:9	1716:9	11	err != TIFFReadDirEntryErrOk
EXPR	1716:9	1716:14	12	err != TIFFReadDirEntryErrOk
FIELD	1716:9	1716:9	13	err
LEAF_NODE	1716:9	1716:9	14	err
EQ_OPERATOR	1716:12	1716:12	13	!=
LEAF_NODE	1716:12	1716:12	14	!=
FIELD	1716:14	1716:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1716:14	1716:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1716:35	1716:35	11	)
STATEMENTS	1717:6	1717:6	11	
JUMP_STATEMENT	1717:6	1717:11	12	break DESTINATION ;
KEYWORD	1717:6	1717:6	13	break
LEAF_NODE	1717:6	1717:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1717:11	1717:11	13	;
EXPR_STATEMENT	1718:5	1718:26	10	* mb ++ = ( uint32 ) ( * ma ++ ) ;
EXPR	1718:5	1718:5	11	* mb ++ = ( uint32 ) ( * ma ++ )
ASSIGN	1718:5	1718:11	12	* mb ++ = ( uint32 ) ( * ma ++ )
LVAL	1718:5	1718:5	13	* mb ++
UNARY_EXPR	1718:5	1718:6	14	* mb ++
UNARY_OPERATOR	1718:5	1718:5	15	*
LEAF_NODE	1718:5	1718:5	16	*
FIELD	1718:6	1718:8	15	mb ++
LEAF_NODE	1718:6	1718:6	16	mb
LEAF_NODE	1718:8	1718:8	16	++
ASSIGN_OP	1718:10	1718:10	13	=
LEAF_NODE	1718:10	1718:10	14	=
RVAL	1718:11	1718:25	13	( uint32 ) ( * ma ++ )
LEAF_NODE	1718:11	1718:11	14	(
TYPE_NAME	1718:12	1718:12	14	uint32
LEAF_NODE	1718:12	1718:12	15	uint32
LEAF_NODE	1718:18	1718:18	14	)
LEAF_NODE	1718:19	1718:19	14	(
UNARY_EXPR	1718:20	1718:21	14	* ma ++
UNARY_OPERATOR	1718:20	1718:20	15	*
LEAF_NODE	1718:20	1718:20	16	*
FIELD	1718:21	1718:23	15	ma ++
LEAF_NODE	1718:21	1718:21	16	ma
LEAF_NODE	1718:23	1718:23	16	++
LEAF_NODE	1718:25	1718:25	14	)
LEAF_NODE	1718:26	1718:26	11	;
LEAF_NODE	1719:4	1719:4	9	}
LEAF_NODE	1720:3	1720:3	6	}
JUMP_STATEMENT	1721:3	1721:8	6	break DESTINATION ;
KEYWORD	1721:3	1721:3	7	break
LEAF_NODE	1721:3	1721:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1721:8	1721:8	7	;
LABEL	1722:2	1722:17	6	case TIFF_SHORT :
LEAF_NODE	1722:2	1722:2	7	case
LEAF_NODE	1722:7	1722:7	7	TIFF_SHORT
LEAF_NODE	1722:17	1722:17	7	:
LEAF_NODE	1723:3	1723:3	6	{
STATEMENTS	1724:4	1729:4	6	
SIMPLE_DECL	1724:4	1724:14	7	uint16 * ma ;
VAR_DECL	1724:4	1724:12	8	uint16 * ma
TYPE	1724:4	1724:10	9	uint16 *
TYPE_NAME	1724:4	1724:4	10	uint16
LEAF_NODE	1724:4	1724:4	11	uint16
POINTER	1724:10	1724:10	10	*
LEAF_NODE	1724:10	1724:10	11	*
NAME	1724:12	1724:12	9	ma
LEAF_NODE	1724:12	1724:12	10	ma
LEAF_NODE	1724:14	1724:14	8	;
SIMPLE_DECL	1725:4	1725:14	7	uint32 * mb ;
VAR_DECL	1725:4	1725:12	8	uint32 * mb
TYPE	1725:4	1725:10	9	uint32 *
TYPE_NAME	1725:4	1725:4	10	uint32
LEAF_NODE	1725:4	1725:4	11	uint32
POINTER	1725:10	1725:10	10	*
LEAF_NODE	1725:10	1725:10	11	*
NAME	1725:12	1725:12	9	mb
LEAF_NODE	1725:12	1725:12	10	mb
LEAF_NODE	1725:14	1725:14	8	;
SIMPLE_DECL	1726:4	1726:12	7	uint32 n ;
VAR_DECL	1726:4	1726:11	8	uint32 n
TYPE	1726:4	1726:4	9	uint32
TYPE_NAME	1726:4	1726:4	10	uint32
LEAF_NODE	1726:4	1726:4	11	uint32
NAME	1726:11	1726:11	9	n
LEAF_NODE	1726:11	1726:11	10	n
LEAF_NODE	1726:12	1726:12	8	;
EXPR_STATEMENT	1727:4	1727:24	7	ma = ( uint16 * ) origdata ;
EXPR	1727:4	1727:4	8	ma = ( uint16 * ) origdata
ASSIGN	1727:4	1727:7	9	ma = ( uint16 * ) origdata
LVAL	1727:4	1727:4	10	ma
FIELD	1727:4	1727:4	11	ma
LEAF_NODE	1727:4	1727:4	12	ma
ASSIGN_OP	1727:6	1727:6	10	=
LEAF_NODE	1727:6	1727:6	11	=
RVAL	1727:7	1727:16	10	( uint16 * ) origdata
LEAF_NODE	1727:7	1727:7	11	(
TYPE_NAME	1727:8	1727:8	11	uint16
LEAF_NODE	1727:8	1727:8	12	uint16
LEAF_NODE	1727:14	1727:14	11	*
LEAF_NODE	1727:15	1727:15	11	)
FIELD	1727:16	1727:16	11	origdata
LEAF_NODE	1727:16	1727:16	12	origdata
LEAF_NODE	1727:24	1727:24	8	;
EXPR_STATEMENT	1728:4	1728:11	7	mb = data ;
EXPR	1728:4	1728:4	8	mb = data
ASSIGN	1728:4	1728:7	9	mb = data
LVAL	1728:4	1728:4	10	mb
FIELD	1728:4	1728:4	11	mb
LEAF_NODE	1728:4	1728:4	12	mb
ASSIGN_OP	1728:6	1728:6	10	=
LEAF_NODE	1728:6	1728:6	11	=
RVAL	1728:7	1728:7	10	data
FIELD	1728:7	1728:7	11	data
LEAF_NODE	1728:7	1728:7	12	data
LEAF_NODE	1728:11	1728:11	8	;
ITERATION	1729:4	1730:4	7	
KEYWORD	1729:4	1729:4	8	for
LEAF_NODE	1729:4	1729:4	9	for
LEAF_NODE	1729:8	1729:8	8	(
FOR_INIT	1729:9	1729:12	8	n = 0 ;
EXPR	1729:9	1729:9	9	n = 0
ASSIGN	1729:9	1729:11	10	n = 0
LVAL	1729:9	1729:9	11	n
FIELD	1729:9	1729:9	12	n
LEAF_NODE	1729:9	1729:9	13	n
ASSIGN_OP	1729:10	1729:10	11	=
LEAF_NODE	1729:10	1729:10	12	=
RVAL	1729:11	1729:11	11	0
FIELD	1729:11	1729:11	12	0
LEAF_NODE	1729:11	1729:11	13	0
LEAF_NODE	1729:12	1729:12	9	;
CONDITION	1729:14	1729:14	8	n < count
EXPR	1729:14	1729:16	9	n < count
FIELD	1729:14	1729:14	10	n
LEAF_NODE	1729:14	1729:14	11	n
REL_OPERATOR	1729:15	1729:15	10	<
LEAF_NODE	1729:15	1729:15	11	<
FIELD	1729:16	1729:16	10	count
LEAF_NODE	1729:16	1729:16	11	count
LEAF_NODE	1729:21	1729:21	8	;
FOR_EXPR	1729:23	1729:23	8	n ++
EXPR	1729:23	1729:23	9	n ++
FIELD	1729:23	1729:24	10	n ++
LEAF_NODE	1729:23	1729:23	11	n
LEAF_NODE	1729:24	1729:24	11	++
LEAF_NODE	1729:26	1729:26	8	)
STATEMENTS	1730:4	1734:4	8	
LEAF_NODE	1730:4	1730:4	9	{
STATEMENTS	1731:5	1733:5	9	
SELECTION	1731:5	1732:6	10	
KEYWORD	1731:5	1731:5	11	if
LEAF_NODE	1731:5	1731:5	12	if
LEAF_NODE	1731:8	1731:8	11	(
CONDITION	1731:9	1731:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1731:9	1731:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1731:9	1731:14	13	tif -> tif_flags
LEAF_NODE	1731:9	1731:9	14	tif
LEAF_NODE	1731:12	1731:12	14	->
LEAF_NODE	1731:14	1731:14	14	tif_flags
LEAF_NODE	1731:23	1731:23	13	&
FIELD	1731:24	1731:24	13	TIFF_SWAB
LEAF_NODE	1731:24	1731:24	14	TIFF_SWAB
LEAF_NODE	1731:33	1731:33	11	)
STATEMENTS	1732:6	1732:6	11	
EXPR_STATEMENT	1732:6	1732:23	12	TIFFSwabShort ( ma ) ;
EXPR	1732:6	1732:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	1732:6	1732:22	14	TIFFSwabShort ( ma )
CALLEE	1732:6	1732:6	15	TIFFSwabShort
LEAF_NODE	1732:6	1732:6	16	TIFFSwabShort
LEAF_NODE	1732:19	1732:19	15	(
ARGUMENT	1732:20	1732:20	15	ma
FIELD	1732:20	1732:20	16	ma
LEAF_NODE	1732:20	1732:20	17	ma
LEAF_NODE	1732:22	1732:22	15	)
LEAF_NODE	1732:23	1732:23	13	;
EXPR_STATEMENT	1733:5	1733:26	10	* mb ++ = ( uint32 ) ( * ma ++ ) ;
EXPR	1733:5	1733:5	11	* mb ++ = ( uint32 ) ( * ma ++ )
ASSIGN	1733:5	1733:11	12	* mb ++ = ( uint32 ) ( * ma ++ )
LVAL	1733:5	1733:5	13	* mb ++
UNARY_EXPR	1733:5	1733:6	14	* mb ++
UNARY_OPERATOR	1733:5	1733:5	15	*
LEAF_NODE	1733:5	1733:5	16	*
FIELD	1733:6	1733:8	15	mb ++
LEAF_NODE	1733:6	1733:6	16	mb
LEAF_NODE	1733:8	1733:8	16	++
ASSIGN_OP	1733:10	1733:10	13	=
LEAF_NODE	1733:10	1733:10	14	=
RVAL	1733:11	1733:25	13	( uint32 ) ( * ma ++ )
LEAF_NODE	1733:11	1733:11	14	(
TYPE_NAME	1733:12	1733:12	14	uint32
LEAF_NODE	1733:12	1733:12	15	uint32
LEAF_NODE	1733:18	1733:18	14	)
LEAF_NODE	1733:19	1733:19	14	(
UNARY_EXPR	1733:20	1733:21	14	* ma ++
UNARY_OPERATOR	1733:20	1733:20	15	*
LEAF_NODE	1733:20	1733:20	16	*
FIELD	1733:21	1733:23	15	ma ++
LEAF_NODE	1733:21	1733:21	16	ma
LEAF_NODE	1733:23	1733:23	16	++
LEAF_NODE	1733:25	1733:25	14	)
LEAF_NODE	1733:26	1733:26	11	;
LEAF_NODE	1734:4	1734:4	9	}
LEAF_NODE	1735:3	1735:3	6	}
JUMP_STATEMENT	1736:3	1736:8	6	break DESTINATION ;
KEYWORD	1736:3	1736:3	7	break
LEAF_NODE	1736:3	1736:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1736:8	1736:8	7	;
LABEL	1737:2	1737:18	6	case TIFF_SSHORT :
LEAF_NODE	1737:2	1737:2	7	case
LEAF_NODE	1737:7	1737:7	7	TIFF_SSHORT
LEAF_NODE	1737:18	1737:18	7	:
LEAF_NODE	1738:3	1738:3	6	{
STATEMENTS	1739:4	1744:4	6	
SIMPLE_DECL	1739:4	1739:13	7	int16 * ma ;
VAR_DECL	1739:4	1739:11	8	int16 * ma
TYPE	1739:4	1739:9	9	int16 *
TYPE_NAME	1739:4	1739:4	10	int16
LEAF_NODE	1739:4	1739:4	11	int16
POINTER	1739:9	1739:9	10	*
LEAF_NODE	1739:9	1739:9	11	*
NAME	1739:11	1739:11	9	ma
LEAF_NODE	1739:11	1739:11	10	ma
LEAF_NODE	1739:13	1739:13	8	;
SIMPLE_DECL	1740:4	1740:14	7	uint32 * mb ;
VAR_DECL	1740:4	1740:12	8	uint32 * mb
TYPE	1740:4	1740:10	9	uint32 *
TYPE_NAME	1740:4	1740:4	10	uint32
LEAF_NODE	1740:4	1740:4	11	uint32
POINTER	1740:10	1740:10	10	*
LEAF_NODE	1740:10	1740:10	11	*
NAME	1740:12	1740:12	9	mb
LEAF_NODE	1740:12	1740:12	10	mb
LEAF_NODE	1740:14	1740:14	8	;
SIMPLE_DECL	1741:4	1741:12	7	uint32 n ;
VAR_DECL	1741:4	1741:11	8	uint32 n
TYPE	1741:4	1741:4	9	uint32
TYPE_NAME	1741:4	1741:4	10	uint32
LEAF_NODE	1741:4	1741:4	11	uint32
NAME	1741:11	1741:11	9	n
LEAF_NODE	1741:11	1741:11	10	n
LEAF_NODE	1741:12	1741:12	8	;
EXPR_STATEMENT	1742:4	1742:23	7	ma = ( int16 * ) origdata ;
EXPR	1742:4	1742:4	8	ma = ( int16 * ) origdata
ASSIGN	1742:4	1742:7	9	ma = ( int16 * ) origdata
LVAL	1742:4	1742:4	10	ma
FIELD	1742:4	1742:4	11	ma
LEAF_NODE	1742:4	1742:4	12	ma
ASSIGN_OP	1742:6	1742:6	10	=
LEAF_NODE	1742:6	1742:6	11	=
RVAL	1742:7	1742:15	10	( int16 * ) origdata
LEAF_NODE	1742:7	1742:7	11	(
TYPE_NAME	1742:8	1742:8	11	int16
LEAF_NODE	1742:8	1742:8	12	int16
LEAF_NODE	1742:13	1742:13	11	*
LEAF_NODE	1742:14	1742:14	11	)
FIELD	1742:15	1742:15	11	origdata
LEAF_NODE	1742:15	1742:15	12	origdata
LEAF_NODE	1742:23	1742:23	8	;
EXPR_STATEMENT	1743:4	1743:11	7	mb = data ;
EXPR	1743:4	1743:4	8	mb = data
ASSIGN	1743:4	1743:7	9	mb = data
LVAL	1743:4	1743:4	10	mb
FIELD	1743:4	1743:4	11	mb
LEAF_NODE	1743:4	1743:4	12	mb
ASSIGN_OP	1743:6	1743:6	10	=
LEAF_NODE	1743:6	1743:6	11	=
RVAL	1743:7	1743:7	10	data
FIELD	1743:7	1743:7	11	data
LEAF_NODE	1743:7	1743:7	12	data
LEAF_NODE	1743:11	1743:11	8	;
ITERATION	1744:4	1745:4	7	
KEYWORD	1744:4	1744:4	8	for
LEAF_NODE	1744:4	1744:4	9	for
LEAF_NODE	1744:8	1744:8	8	(
FOR_INIT	1744:9	1744:12	8	n = 0 ;
EXPR	1744:9	1744:9	9	n = 0
ASSIGN	1744:9	1744:11	10	n = 0
LVAL	1744:9	1744:9	11	n
FIELD	1744:9	1744:9	12	n
LEAF_NODE	1744:9	1744:9	13	n
ASSIGN_OP	1744:10	1744:10	11	=
LEAF_NODE	1744:10	1744:10	12	=
RVAL	1744:11	1744:11	11	0
FIELD	1744:11	1744:11	12	0
LEAF_NODE	1744:11	1744:11	13	0
LEAF_NODE	1744:12	1744:12	9	;
CONDITION	1744:14	1744:14	8	n < count
EXPR	1744:14	1744:16	9	n < count
FIELD	1744:14	1744:14	10	n
LEAF_NODE	1744:14	1744:14	11	n
REL_OPERATOR	1744:15	1744:15	10	<
LEAF_NODE	1744:15	1744:15	11	<
FIELD	1744:16	1744:16	10	count
LEAF_NODE	1744:16	1744:16	11	count
LEAF_NODE	1744:21	1744:21	8	;
FOR_EXPR	1744:23	1744:23	8	n ++
EXPR	1744:23	1744:23	9	n ++
FIELD	1744:23	1744:24	10	n ++
LEAF_NODE	1744:23	1744:23	11	n
LEAF_NODE	1744:24	1744:24	11	++
LEAF_NODE	1744:26	1744:26	8	)
STATEMENTS	1745:4	1752:4	8	
LEAF_NODE	1745:4	1745:4	9	{
STATEMENTS	1746:5	1751:5	9	
SELECTION	1746:5	1747:6	10	
KEYWORD	1746:5	1746:5	11	if
LEAF_NODE	1746:5	1746:5	12	if
LEAF_NODE	1746:8	1746:8	11	(
CONDITION	1746:9	1746:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1746:9	1746:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1746:9	1746:14	13	tif -> tif_flags
LEAF_NODE	1746:9	1746:9	14	tif
LEAF_NODE	1746:12	1746:12	14	->
LEAF_NODE	1746:14	1746:14	14	tif_flags
LEAF_NODE	1746:23	1746:23	13	&
FIELD	1746:24	1746:24	13	TIFF_SWAB
LEAF_NODE	1746:24	1746:24	14	TIFF_SWAB
LEAF_NODE	1746:33	1746:33	11	)
STATEMENTS	1747:6	1747:6	11	
EXPR_STATEMENT	1747:6	1747:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	1747:6	1747:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	1747:6	1747:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	1747:6	1747:6	15	TIFFSwabShort
LEAF_NODE	1747:6	1747:6	16	TIFFSwabShort
LEAF_NODE	1747:19	1747:19	15	(
ARGUMENT	1747:20	1747:29	15	( uint16 * ) ma
LEAF_NODE	1747:20	1747:20	16	(
TYPE_NAME	1747:21	1747:21	16	uint16
LEAF_NODE	1747:21	1747:21	17	uint16
LEAF_NODE	1747:27	1747:27	16	*
LEAF_NODE	1747:28	1747:28	16	)
FIELD	1747:29	1747:29	16	ma
LEAF_NODE	1747:29	1747:29	17	ma
LEAF_NODE	1747:31	1747:31	15	)
LEAF_NODE	1747:32	1747:32	13	;
EXPR_STATEMENT	1748:5	1748:50	10	err = TIFFReadDirEntryCheckRangeLongSshort ( * ma ) ;
EXPR	1748:5	1748:5	11	err = TIFFReadDirEntryCheckRangeLongSshort ( * ma )
ASSIGN	1748:5	1748:9	12	err = TIFFReadDirEntryCheckRangeLongSshort ( * ma )
LVAL	1748:5	1748:5	13	err
FIELD	1748:5	1748:5	14	err
LEAF_NODE	1748:5	1748:5	15	err
ASSIGN_OP	1748:8	1748:8	13	=
LEAF_NODE	1748:8	1748:8	14	=
RVAL	1748:9	1748:9	13	TIFFReadDirEntryCheckRangeLongSshort ( * ma )
FUNCTION_CALL	1748:9	1748:49	14	TIFFReadDirEntryCheckRangeLongSshort ( * ma )
CALLEE	1748:9	1748:9	15	TIFFReadDirEntryCheckRangeLongSshort
LEAF_NODE	1748:9	1748:9	16	TIFFReadDirEntryCheckRangeLongSshort
LEAF_NODE	1748:45	1748:45	15	(
ARGUMENT	1748:46	1748:46	15	* ma
UNARY_EXPR	1748:46	1748:47	16	* ma
UNARY_OPERATOR	1748:46	1748:46	17	*
LEAF_NODE	1748:46	1748:46	18	*
FIELD	1748:47	1748:47	17	ma
LEAF_NODE	1748:47	1748:47	18	ma
LEAF_NODE	1748:49	1748:49	15	)
LEAF_NODE	1748:50	1748:50	11	;
SELECTION	1749:5	1750:6	10	
KEYWORD	1749:5	1749:5	11	if
LEAF_NODE	1749:5	1749:5	12	if
LEAF_NODE	1749:8	1749:8	11	(
CONDITION	1749:9	1749:9	11	err != TIFFReadDirEntryErrOk
EXPR	1749:9	1749:14	12	err != TIFFReadDirEntryErrOk
FIELD	1749:9	1749:9	13	err
LEAF_NODE	1749:9	1749:9	14	err
EQ_OPERATOR	1749:12	1749:12	13	!=
LEAF_NODE	1749:12	1749:12	14	!=
FIELD	1749:14	1749:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1749:14	1749:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1749:35	1749:35	11	)
STATEMENTS	1750:6	1750:6	11	
JUMP_STATEMENT	1750:6	1750:11	12	break DESTINATION ;
KEYWORD	1750:6	1750:6	13	break
LEAF_NODE	1750:6	1750:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1750:11	1750:11	13	;
EXPR_STATEMENT	1751:5	1751:26	10	* mb ++ = ( uint32 ) ( * ma ++ ) ;
EXPR	1751:5	1751:5	11	* mb ++ = ( uint32 ) ( * ma ++ )
ASSIGN	1751:5	1751:11	12	* mb ++ = ( uint32 ) ( * ma ++ )
LVAL	1751:5	1751:5	13	* mb ++
UNARY_EXPR	1751:5	1751:6	14	* mb ++
UNARY_OPERATOR	1751:5	1751:5	15	*
LEAF_NODE	1751:5	1751:5	16	*
FIELD	1751:6	1751:8	15	mb ++
LEAF_NODE	1751:6	1751:6	16	mb
LEAF_NODE	1751:8	1751:8	16	++
ASSIGN_OP	1751:10	1751:10	13	=
LEAF_NODE	1751:10	1751:10	14	=
RVAL	1751:11	1751:25	13	( uint32 ) ( * ma ++ )
LEAF_NODE	1751:11	1751:11	14	(
TYPE_NAME	1751:12	1751:12	14	uint32
LEAF_NODE	1751:12	1751:12	15	uint32
LEAF_NODE	1751:18	1751:18	14	)
LEAF_NODE	1751:19	1751:19	14	(
UNARY_EXPR	1751:20	1751:21	14	* ma ++
UNARY_OPERATOR	1751:20	1751:20	15	*
LEAF_NODE	1751:20	1751:20	16	*
FIELD	1751:21	1751:23	15	ma ++
LEAF_NODE	1751:21	1751:21	16	ma
LEAF_NODE	1751:23	1751:23	16	++
LEAF_NODE	1751:25	1751:25	14	)
LEAF_NODE	1751:26	1751:26	11	;
LEAF_NODE	1752:4	1752:4	9	}
LEAF_NODE	1753:3	1753:3	6	}
JUMP_STATEMENT	1754:3	1754:8	6	break DESTINATION ;
KEYWORD	1754:3	1754:3	7	break
LEAF_NODE	1754:3	1754:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1754:8	1754:8	7	;
LABEL	1755:2	1755:17	6	case TIFF_LONG8 :
LEAF_NODE	1755:2	1755:2	7	case
LEAF_NODE	1755:7	1755:7	7	TIFF_LONG8
LEAF_NODE	1755:17	1755:17	7	:
LEAF_NODE	1756:3	1756:3	6	{
STATEMENTS	1757:4	1762:4	6	
SIMPLE_DECL	1757:4	1757:14	7	uint64 * ma ;
VAR_DECL	1757:4	1757:12	8	uint64 * ma
TYPE	1757:4	1757:10	9	uint64 *
TYPE_NAME	1757:4	1757:4	10	uint64
LEAF_NODE	1757:4	1757:4	11	uint64
POINTER	1757:10	1757:10	10	*
LEAF_NODE	1757:10	1757:10	11	*
NAME	1757:12	1757:12	9	ma
LEAF_NODE	1757:12	1757:12	10	ma
LEAF_NODE	1757:14	1757:14	8	;
SIMPLE_DECL	1758:4	1758:14	7	uint32 * mb ;
VAR_DECL	1758:4	1758:12	8	uint32 * mb
TYPE	1758:4	1758:10	9	uint32 *
TYPE_NAME	1758:4	1758:4	10	uint32
LEAF_NODE	1758:4	1758:4	11	uint32
POINTER	1758:10	1758:10	10	*
LEAF_NODE	1758:10	1758:10	11	*
NAME	1758:12	1758:12	9	mb
LEAF_NODE	1758:12	1758:12	10	mb
LEAF_NODE	1758:14	1758:14	8	;
SIMPLE_DECL	1759:4	1759:12	7	uint32 n ;
VAR_DECL	1759:4	1759:11	8	uint32 n
TYPE	1759:4	1759:4	9	uint32
TYPE_NAME	1759:4	1759:4	10	uint32
LEAF_NODE	1759:4	1759:4	11	uint32
NAME	1759:11	1759:11	9	n
LEAF_NODE	1759:11	1759:11	10	n
LEAF_NODE	1759:12	1759:12	8	;
EXPR_STATEMENT	1760:4	1760:24	7	ma = ( uint64 * ) origdata ;
EXPR	1760:4	1760:4	8	ma = ( uint64 * ) origdata
ASSIGN	1760:4	1760:7	9	ma = ( uint64 * ) origdata
LVAL	1760:4	1760:4	10	ma
FIELD	1760:4	1760:4	11	ma
LEAF_NODE	1760:4	1760:4	12	ma
ASSIGN_OP	1760:6	1760:6	10	=
LEAF_NODE	1760:6	1760:6	11	=
RVAL	1760:7	1760:16	10	( uint64 * ) origdata
LEAF_NODE	1760:7	1760:7	11	(
TYPE_NAME	1760:8	1760:8	11	uint64
LEAF_NODE	1760:8	1760:8	12	uint64
LEAF_NODE	1760:14	1760:14	11	*
LEAF_NODE	1760:15	1760:15	11	)
FIELD	1760:16	1760:16	11	origdata
LEAF_NODE	1760:16	1760:16	12	origdata
LEAF_NODE	1760:24	1760:24	8	;
EXPR_STATEMENT	1761:4	1761:11	7	mb = data ;
EXPR	1761:4	1761:4	8	mb = data
ASSIGN	1761:4	1761:7	9	mb = data
LVAL	1761:4	1761:4	10	mb
FIELD	1761:4	1761:4	11	mb
LEAF_NODE	1761:4	1761:4	12	mb
ASSIGN_OP	1761:6	1761:6	10	=
LEAF_NODE	1761:6	1761:6	11	=
RVAL	1761:7	1761:7	10	data
FIELD	1761:7	1761:7	11	data
LEAF_NODE	1761:7	1761:7	12	data
LEAF_NODE	1761:11	1761:11	8	;
ITERATION	1762:4	1763:4	7	
KEYWORD	1762:4	1762:4	8	for
LEAF_NODE	1762:4	1762:4	9	for
LEAF_NODE	1762:8	1762:8	8	(
FOR_INIT	1762:9	1762:12	8	n = 0 ;
EXPR	1762:9	1762:9	9	n = 0
ASSIGN	1762:9	1762:11	10	n = 0
LVAL	1762:9	1762:9	11	n
FIELD	1762:9	1762:9	12	n
LEAF_NODE	1762:9	1762:9	13	n
ASSIGN_OP	1762:10	1762:10	11	=
LEAF_NODE	1762:10	1762:10	12	=
RVAL	1762:11	1762:11	11	0
FIELD	1762:11	1762:11	12	0
LEAF_NODE	1762:11	1762:11	13	0
LEAF_NODE	1762:12	1762:12	9	;
CONDITION	1762:14	1762:14	8	n < count
EXPR	1762:14	1762:16	9	n < count
FIELD	1762:14	1762:14	10	n
LEAF_NODE	1762:14	1762:14	11	n
REL_OPERATOR	1762:15	1762:15	10	<
LEAF_NODE	1762:15	1762:15	11	<
FIELD	1762:16	1762:16	10	count
LEAF_NODE	1762:16	1762:16	11	count
LEAF_NODE	1762:21	1762:21	8	;
FOR_EXPR	1762:23	1762:23	8	n ++
EXPR	1762:23	1762:23	9	n ++
FIELD	1762:23	1762:24	10	n ++
LEAF_NODE	1762:23	1762:23	11	n
LEAF_NODE	1762:24	1762:24	11	++
LEAF_NODE	1762:26	1762:26	8	)
STATEMENTS	1763:4	1770:4	8	
LEAF_NODE	1763:4	1763:4	9	{
STATEMENTS	1764:5	1769:5	9	
SELECTION	1764:5	1765:6	10	
KEYWORD	1764:5	1764:5	11	if
LEAF_NODE	1764:5	1764:5	12	if
LEAF_NODE	1764:8	1764:8	11	(
CONDITION	1764:9	1764:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1764:9	1764:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1764:9	1764:14	13	tif -> tif_flags
LEAF_NODE	1764:9	1764:9	14	tif
LEAF_NODE	1764:12	1764:12	14	->
LEAF_NODE	1764:14	1764:14	14	tif_flags
LEAF_NODE	1764:23	1764:23	13	&
FIELD	1764:24	1764:24	13	TIFF_SWAB
LEAF_NODE	1764:24	1764:24	14	TIFF_SWAB
LEAF_NODE	1764:33	1764:33	11	)
STATEMENTS	1765:6	1765:6	11	
EXPR_STATEMENT	1765:6	1765:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	1765:6	1765:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	1765:6	1765:22	14	TIFFSwabLong8 ( ma )
CALLEE	1765:6	1765:6	15	TIFFSwabLong8
LEAF_NODE	1765:6	1765:6	16	TIFFSwabLong8
LEAF_NODE	1765:19	1765:19	15	(
ARGUMENT	1765:20	1765:20	15	ma
FIELD	1765:20	1765:20	16	ma
LEAF_NODE	1765:20	1765:20	17	ma
LEAF_NODE	1765:22	1765:22	15	)
LEAF_NODE	1765:23	1765:23	13	;
EXPR_STATEMENT	1766:5	1766:49	10	err = TIFFReadDirEntryCheckRangeLongLong8 ( * ma ) ;
EXPR	1766:5	1766:5	11	err = TIFFReadDirEntryCheckRangeLongLong8 ( * ma )
ASSIGN	1766:5	1766:9	12	err = TIFFReadDirEntryCheckRangeLongLong8 ( * ma )
LVAL	1766:5	1766:5	13	err
FIELD	1766:5	1766:5	14	err
LEAF_NODE	1766:5	1766:5	15	err
ASSIGN_OP	1766:8	1766:8	13	=
LEAF_NODE	1766:8	1766:8	14	=
RVAL	1766:9	1766:9	13	TIFFReadDirEntryCheckRangeLongLong8 ( * ma )
FUNCTION_CALL	1766:9	1766:48	14	TIFFReadDirEntryCheckRangeLongLong8 ( * ma )
CALLEE	1766:9	1766:9	15	TIFFReadDirEntryCheckRangeLongLong8
LEAF_NODE	1766:9	1766:9	16	TIFFReadDirEntryCheckRangeLongLong8
LEAF_NODE	1766:44	1766:44	15	(
ARGUMENT	1766:45	1766:45	15	* ma
UNARY_EXPR	1766:45	1766:46	16	* ma
UNARY_OPERATOR	1766:45	1766:45	17	*
LEAF_NODE	1766:45	1766:45	18	*
FIELD	1766:46	1766:46	17	ma
LEAF_NODE	1766:46	1766:46	18	ma
LEAF_NODE	1766:48	1766:48	15	)
LEAF_NODE	1766:49	1766:49	11	;
SELECTION	1767:5	1768:6	10	
KEYWORD	1767:5	1767:5	11	if
LEAF_NODE	1767:5	1767:5	12	if
LEAF_NODE	1767:8	1767:8	11	(
CONDITION	1767:9	1767:9	11	err != TIFFReadDirEntryErrOk
EXPR	1767:9	1767:14	12	err != TIFFReadDirEntryErrOk
FIELD	1767:9	1767:9	13	err
LEAF_NODE	1767:9	1767:9	14	err
EQ_OPERATOR	1767:12	1767:12	13	!=
LEAF_NODE	1767:12	1767:12	14	!=
FIELD	1767:14	1767:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1767:14	1767:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1767:35	1767:35	11	)
STATEMENTS	1768:6	1768:6	11	
JUMP_STATEMENT	1768:6	1768:11	12	break DESTINATION ;
KEYWORD	1768:6	1768:6	13	break
LEAF_NODE	1768:6	1768:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1768:11	1768:11	13	;
EXPR_STATEMENT	1769:5	1769:26	10	* mb ++ = ( uint32 ) ( * ma ++ ) ;
EXPR	1769:5	1769:5	11	* mb ++ = ( uint32 ) ( * ma ++ )
ASSIGN	1769:5	1769:11	12	* mb ++ = ( uint32 ) ( * ma ++ )
LVAL	1769:5	1769:5	13	* mb ++
UNARY_EXPR	1769:5	1769:6	14	* mb ++
UNARY_OPERATOR	1769:5	1769:5	15	*
LEAF_NODE	1769:5	1769:5	16	*
FIELD	1769:6	1769:8	15	mb ++
LEAF_NODE	1769:6	1769:6	16	mb
LEAF_NODE	1769:8	1769:8	16	++
ASSIGN_OP	1769:10	1769:10	13	=
LEAF_NODE	1769:10	1769:10	14	=
RVAL	1769:11	1769:25	13	( uint32 ) ( * ma ++ )
LEAF_NODE	1769:11	1769:11	14	(
TYPE_NAME	1769:12	1769:12	14	uint32
LEAF_NODE	1769:12	1769:12	15	uint32
LEAF_NODE	1769:18	1769:18	14	)
LEAF_NODE	1769:19	1769:19	14	(
UNARY_EXPR	1769:20	1769:21	14	* ma ++
UNARY_OPERATOR	1769:20	1769:20	15	*
LEAF_NODE	1769:20	1769:20	16	*
FIELD	1769:21	1769:23	15	ma ++
LEAF_NODE	1769:21	1769:21	16	ma
LEAF_NODE	1769:23	1769:23	16	++
LEAF_NODE	1769:25	1769:25	14	)
LEAF_NODE	1769:26	1769:26	11	;
LEAF_NODE	1770:4	1770:4	9	}
LEAF_NODE	1771:3	1771:3	6	}
JUMP_STATEMENT	1772:3	1772:8	6	break DESTINATION ;
KEYWORD	1772:3	1772:3	7	break
LEAF_NODE	1772:3	1772:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1772:8	1772:8	7	;
LABEL	1773:2	1773:18	6	case TIFF_SLONG8 :
LEAF_NODE	1773:2	1773:2	7	case
LEAF_NODE	1773:7	1773:7	7	TIFF_SLONG8
LEAF_NODE	1773:18	1773:18	7	:
LEAF_NODE	1774:3	1774:3	6	{
STATEMENTS	1775:4	1780:4	6	
SIMPLE_DECL	1775:4	1775:13	7	int64 * ma ;
VAR_DECL	1775:4	1775:11	8	int64 * ma
TYPE	1775:4	1775:9	9	int64 *
TYPE_NAME	1775:4	1775:4	10	int64
LEAF_NODE	1775:4	1775:4	11	int64
POINTER	1775:9	1775:9	10	*
LEAF_NODE	1775:9	1775:9	11	*
NAME	1775:11	1775:11	9	ma
LEAF_NODE	1775:11	1775:11	10	ma
LEAF_NODE	1775:13	1775:13	8	;
SIMPLE_DECL	1776:4	1776:14	7	uint32 * mb ;
VAR_DECL	1776:4	1776:12	8	uint32 * mb
TYPE	1776:4	1776:10	9	uint32 *
TYPE_NAME	1776:4	1776:4	10	uint32
LEAF_NODE	1776:4	1776:4	11	uint32
POINTER	1776:10	1776:10	10	*
LEAF_NODE	1776:10	1776:10	11	*
NAME	1776:12	1776:12	9	mb
LEAF_NODE	1776:12	1776:12	10	mb
LEAF_NODE	1776:14	1776:14	8	;
SIMPLE_DECL	1777:4	1777:12	7	uint32 n ;
VAR_DECL	1777:4	1777:11	8	uint32 n
TYPE	1777:4	1777:4	9	uint32
TYPE_NAME	1777:4	1777:4	10	uint32
LEAF_NODE	1777:4	1777:4	11	uint32
NAME	1777:11	1777:11	9	n
LEAF_NODE	1777:11	1777:11	10	n
LEAF_NODE	1777:12	1777:12	8	;
EXPR_STATEMENT	1778:4	1778:23	7	ma = ( int64 * ) origdata ;
EXPR	1778:4	1778:4	8	ma = ( int64 * ) origdata
ASSIGN	1778:4	1778:7	9	ma = ( int64 * ) origdata
LVAL	1778:4	1778:4	10	ma
FIELD	1778:4	1778:4	11	ma
LEAF_NODE	1778:4	1778:4	12	ma
ASSIGN_OP	1778:6	1778:6	10	=
LEAF_NODE	1778:6	1778:6	11	=
RVAL	1778:7	1778:15	10	( int64 * ) origdata
LEAF_NODE	1778:7	1778:7	11	(
TYPE_NAME	1778:8	1778:8	11	int64
LEAF_NODE	1778:8	1778:8	12	int64
LEAF_NODE	1778:13	1778:13	11	*
LEAF_NODE	1778:14	1778:14	11	)
FIELD	1778:15	1778:15	11	origdata
LEAF_NODE	1778:15	1778:15	12	origdata
LEAF_NODE	1778:23	1778:23	8	;
EXPR_STATEMENT	1779:4	1779:11	7	mb = data ;
EXPR	1779:4	1779:4	8	mb = data
ASSIGN	1779:4	1779:7	9	mb = data
LVAL	1779:4	1779:4	10	mb
FIELD	1779:4	1779:4	11	mb
LEAF_NODE	1779:4	1779:4	12	mb
ASSIGN_OP	1779:6	1779:6	10	=
LEAF_NODE	1779:6	1779:6	11	=
RVAL	1779:7	1779:7	10	data
FIELD	1779:7	1779:7	11	data
LEAF_NODE	1779:7	1779:7	12	data
LEAF_NODE	1779:11	1779:11	8	;
ITERATION	1780:4	1781:4	7	
KEYWORD	1780:4	1780:4	8	for
LEAF_NODE	1780:4	1780:4	9	for
LEAF_NODE	1780:8	1780:8	8	(
FOR_INIT	1780:9	1780:12	8	n = 0 ;
EXPR	1780:9	1780:9	9	n = 0
ASSIGN	1780:9	1780:11	10	n = 0
LVAL	1780:9	1780:9	11	n
FIELD	1780:9	1780:9	12	n
LEAF_NODE	1780:9	1780:9	13	n
ASSIGN_OP	1780:10	1780:10	11	=
LEAF_NODE	1780:10	1780:10	12	=
RVAL	1780:11	1780:11	11	0
FIELD	1780:11	1780:11	12	0
LEAF_NODE	1780:11	1780:11	13	0
LEAF_NODE	1780:12	1780:12	9	;
CONDITION	1780:14	1780:14	8	n < count
EXPR	1780:14	1780:16	9	n < count
FIELD	1780:14	1780:14	10	n
LEAF_NODE	1780:14	1780:14	11	n
REL_OPERATOR	1780:15	1780:15	10	<
LEAF_NODE	1780:15	1780:15	11	<
FIELD	1780:16	1780:16	10	count
LEAF_NODE	1780:16	1780:16	11	count
LEAF_NODE	1780:21	1780:21	8	;
FOR_EXPR	1780:23	1780:23	8	n ++
EXPR	1780:23	1780:23	9	n ++
FIELD	1780:23	1780:24	10	n ++
LEAF_NODE	1780:23	1780:23	11	n
LEAF_NODE	1780:24	1780:24	11	++
LEAF_NODE	1780:26	1780:26	8	)
STATEMENTS	1781:4	1788:4	8	
LEAF_NODE	1781:4	1781:4	9	{
STATEMENTS	1782:5	1787:5	9	
SELECTION	1782:5	1783:6	10	
KEYWORD	1782:5	1782:5	11	if
LEAF_NODE	1782:5	1782:5	12	if
LEAF_NODE	1782:8	1782:8	11	(
CONDITION	1782:9	1782:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1782:9	1782:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1782:9	1782:14	13	tif -> tif_flags
LEAF_NODE	1782:9	1782:9	14	tif
LEAF_NODE	1782:12	1782:12	14	->
LEAF_NODE	1782:14	1782:14	14	tif_flags
LEAF_NODE	1782:23	1782:23	13	&
FIELD	1782:24	1782:24	13	TIFF_SWAB
LEAF_NODE	1782:24	1782:24	14	TIFF_SWAB
LEAF_NODE	1782:33	1782:33	11	)
STATEMENTS	1783:6	1783:6	11	
EXPR_STATEMENT	1783:6	1783:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	1783:6	1783:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	1783:6	1783:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	1783:6	1783:6	15	TIFFSwabLong8
LEAF_NODE	1783:6	1783:6	16	TIFFSwabLong8
LEAF_NODE	1783:19	1783:19	15	(
ARGUMENT	1783:20	1783:29	15	( uint64 * ) ma
LEAF_NODE	1783:20	1783:20	16	(
TYPE_NAME	1783:21	1783:21	16	uint64
LEAF_NODE	1783:21	1783:21	17	uint64
LEAF_NODE	1783:27	1783:27	16	*
LEAF_NODE	1783:28	1783:28	16	)
FIELD	1783:29	1783:29	16	ma
LEAF_NODE	1783:29	1783:29	17	ma
LEAF_NODE	1783:31	1783:31	15	)
LEAF_NODE	1783:32	1783:32	13	;
EXPR_STATEMENT	1784:5	1784:50	10	err = TIFFReadDirEntryCheckRangeLongSlong8 ( * ma ) ;
EXPR	1784:5	1784:5	11	err = TIFFReadDirEntryCheckRangeLongSlong8 ( * ma )
ASSIGN	1784:5	1784:9	12	err = TIFFReadDirEntryCheckRangeLongSlong8 ( * ma )
LVAL	1784:5	1784:5	13	err
FIELD	1784:5	1784:5	14	err
LEAF_NODE	1784:5	1784:5	15	err
ASSIGN_OP	1784:8	1784:8	13	=
LEAF_NODE	1784:8	1784:8	14	=
RVAL	1784:9	1784:9	13	TIFFReadDirEntryCheckRangeLongSlong8 ( * ma )
FUNCTION_CALL	1784:9	1784:49	14	TIFFReadDirEntryCheckRangeLongSlong8 ( * ma )
CALLEE	1784:9	1784:9	15	TIFFReadDirEntryCheckRangeLongSlong8
LEAF_NODE	1784:9	1784:9	16	TIFFReadDirEntryCheckRangeLongSlong8
LEAF_NODE	1784:45	1784:45	15	(
ARGUMENT	1784:46	1784:46	15	* ma
UNARY_EXPR	1784:46	1784:47	16	* ma
UNARY_OPERATOR	1784:46	1784:46	17	*
LEAF_NODE	1784:46	1784:46	18	*
FIELD	1784:47	1784:47	17	ma
LEAF_NODE	1784:47	1784:47	18	ma
LEAF_NODE	1784:49	1784:49	15	)
LEAF_NODE	1784:50	1784:50	11	;
SELECTION	1785:5	1786:6	10	
KEYWORD	1785:5	1785:5	11	if
LEAF_NODE	1785:5	1785:5	12	if
LEAF_NODE	1785:8	1785:8	11	(
CONDITION	1785:9	1785:9	11	err != TIFFReadDirEntryErrOk
EXPR	1785:9	1785:14	12	err != TIFFReadDirEntryErrOk
FIELD	1785:9	1785:9	13	err
LEAF_NODE	1785:9	1785:9	14	err
EQ_OPERATOR	1785:12	1785:12	13	!=
LEAF_NODE	1785:12	1785:12	14	!=
FIELD	1785:14	1785:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1785:14	1785:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1785:35	1785:35	11	)
STATEMENTS	1786:6	1786:6	11	
JUMP_STATEMENT	1786:6	1786:11	12	break DESTINATION ;
KEYWORD	1786:6	1786:6	13	break
LEAF_NODE	1786:6	1786:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1786:11	1786:11	13	;
EXPR_STATEMENT	1787:5	1787:26	10	* mb ++ = ( uint32 ) ( * ma ++ ) ;
EXPR	1787:5	1787:5	11	* mb ++ = ( uint32 ) ( * ma ++ )
ASSIGN	1787:5	1787:11	12	* mb ++ = ( uint32 ) ( * ma ++ )
LVAL	1787:5	1787:5	13	* mb ++
UNARY_EXPR	1787:5	1787:6	14	* mb ++
UNARY_OPERATOR	1787:5	1787:5	15	*
LEAF_NODE	1787:5	1787:5	16	*
FIELD	1787:6	1787:8	15	mb ++
LEAF_NODE	1787:6	1787:6	16	mb
LEAF_NODE	1787:8	1787:8	16	++
ASSIGN_OP	1787:10	1787:10	13	=
LEAF_NODE	1787:10	1787:10	14	=
RVAL	1787:11	1787:25	13	( uint32 ) ( * ma ++ )
LEAF_NODE	1787:11	1787:11	14	(
TYPE_NAME	1787:12	1787:12	14	uint32
LEAF_NODE	1787:12	1787:12	15	uint32
LEAF_NODE	1787:18	1787:18	14	)
LEAF_NODE	1787:19	1787:19	14	(
UNARY_EXPR	1787:20	1787:21	14	* ma ++
UNARY_OPERATOR	1787:20	1787:20	15	*
LEAF_NODE	1787:20	1787:20	16	*
FIELD	1787:21	1787:23	15	ma ++
LEAF_NODE	1787:21	1787:21	16	ma
LEAF_NODE	1787:23	1787:23	16	++
LEAF_NODE	1787:25	1787:25	14	)
LEAF_NODE	1787:26	1787:26	11	;
LEAF_NODE	1788:4	1788:4	9	}
LEAF_NODE	1789:3	1789:3	6	}
JUMP_STATEMENT	1790:3	1790:8	6	break DESTINATION ;
KEYWORD	1790:3	1790:3	7	break
LEAF_NODE	1790:3	1790:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1790:8	1790:8	7	;
LEAF_NODE	1791:1	1791:1	5	}
EXPR_STATEMENT	1792:1	1792:20	3	_TIFFfree ( origdata ) ;
EXPR	1792:1	1792:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	1792:1	1792:19	5	_TIFFfree ( origdata )
CALLEE	1792:1	1792:1	6	_TIFFfree
LEAF_NODE	1792:1	1792:1	7	_TIFFfree
LEAF_NODE	1792:10	1792:10	6	(
ARGUMENT	1792:11	1792:11	6	origdata
FIELD	1792:11	1792:11	7	origdata
LEAF_NODE	1792:11	1792:11	8	origdata
LEAF_NODE	1792:19	1792:19	6	)
LEAF_NODE	1792:20	1792:20	4	;
SELECTION	1793:1	1794:1	3	
KEYWORD	1793:1	1793:1	4	if
LEAF_NODE	1793:1	1793:1	5	if
LEAF_NODE	1793:4	1793:4	4	(
CONDITION	1793:5	1793:5	4	err != TIFFReadDirEntryErrOk
EXPR	1793:5	1793:10	5	err != TIFFReadDirEntryErrOk
FIELD	1793:5	1793:5	6	err
LEAF_NODE	1793:5	1793:5	7	err
EQ_OPERATOR	1793:8	1793:8	6	!=
LEAF_NODE	1793:8	1793:8	7	!=
FIELD	1793:10	1793:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1793:10	1793:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	1793:31	1793:31	4	)
STATEMENTS	1794:1	1797:1	4	
LEAF_NODE	1794:1	1794:1	5	{
STATEMENTS	1795:2	1796:13	5	
EXPR_STATEMENT	1795:2	1795:17	6	_TIFFfree ( data ) ;
EXPR	1795:2	1795:2	7	_TIFFfree ( data )
FUNCTION_CALL	1795:2	1795:16	8	_TIFFfree ( data )
CALLEE	1795:2	1795:2	9	_TIFFfree
LEAF_NODE	1795:2	1795:2	10	_TIFFfree
LEAF_NODE	1795:11	1795:11	9	(
ARGUMENT	1795:12	1795:12	9	data
FIELD	1795:12	1795:12	10	data
LEAF_NODE	1795:12	1795:12	11	data
LEAF_NODE	1795:16	1795:16	9	)
LEAF_NODE	1795:17	1795:17	7	;
LEAF_NODE	1796:2	1796:2	6	return
LEAF_NODE	1796:8	1796:8	6	(
LEAF_NODE	1796:9	1796:9	6	err
LEAF_NODE	1796:12	1796:12	6	)
LEAF_NODE	1796:13	1796:13	6	;
LEAF_NODE	1797:1	1797:1	5	}
EXPR_STATEMENT	1798:1	1798:12	3	* value = data ;
EXPR	1798:1	1798:1	4	* value = data
ASSIGN	1798:1	1798:8	5	* value = data
LVAL	1798:1	1798:1	6	* value
UNARY_EXPR	1798:1	1798:2	7	* value
UNARY_OPERATOR	1798:1	1798:1	8	*
LEAF_NODE	1798:1	1798:1	9	*
FIELD	1798:2	1798:2	8	value
LEAF_NODE	1798:2	1798:2	9	value
ASSIGN_OP	1798:7	1798:7	6	=
LEAF_NODE	1798:7	1798:7	7	=
RVAL	1798:8	1798:8	6	data
FIELD	1798:8	1798:8	7	data
LEAF_NODE	1798:8	1798:8	8	data
LEAF_NODE	1798:12	1798:12	4	;
LEAF_NODE	1799:1	1799:1	3	return
LEAF_NODE	1799:7	1799:7	3	(
LEAF_NODE	1799:8	1799:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	1799:29	1799:29	3	)
LEAF_NODE	1799:30	1799:30	3	;
LEAF_NODE	1800:0	1800:0	2	}
FUNCTION_DEF	1802:0	1961:0	1	
RETURN_TYPE	1802:0	1802:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	1802:0	1802:0	3	static
TYPE_NAME	1802:7	1802:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	1802:7	1802:7	4	enum
LEAF_NODE	1802:12	1802:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	1802:32	1802:32	2	TIFFReadDirEntrySlongArray
LEAF_NODE	1802:32	1802:32	3	TIFFReadDirEntrySlongArray
PARAMETER_LIST	1802:58	1802:107	2	( TIFF * tif , TIFFDirEntry * direntry , int32 * * value )
LEAF_NODE	1802:58	1802:58	3	(
PARAMETER_DECL	1802:59	1802:65	3	TIFF * tif
TYPE	1802:59	1802:63	4	TIFF *
TYPE_NAME	1802:59	1802:59	5	TIFF
LEAF_NODE	1802:59	1802:59	6	TIFF
POINTER	1802:63	1802:63	5	*
LEAF_NODE	1802:63	1802:63	6	*
NAME	1802:65	1802:65	4	tif
LEAF_NODE	1802:65	1802:65	5	tif
LEAF_NODE	1802:68	1802:68	3	,
PARAMETER_DECL	1802:70	1802:84	3	TIFFDirEntry * direntry
TYPE	1802:70	1802:82	4	TIFFDirEntry *
TYPE_NAME	1802:70	1802:70	5	TIFFDirEntry
LEAF_NODE	1802:70	1802:70	6	TIFFDirEntry
POINTER	1802:82	1802:82	5	*
LEAF_NODE	1802:82	1802:82	6	*
NAME	1802:84	1802:84	4	direntry
LEAF_NODE	1802:84	1802:84	5	direntry
LEAF_NODE	1802:92	1802:92	3	,
PARAMETER_DECL	1802:94	1802:102	3	int32 * * value
TYPE	1802:94	1802:99	4	int32 * *
TYPE_NAME	1802:94	1802:94	5	int32
LEAF_NODE	1802:94	1802:94	6	int32
POINTER	1802:99	1802:100	5	* *
LEAF_NODE	1802:99	1802:99	6	*
LEAF_NODE	1802:100	1802:100	6	*
NAME	1802:102	1802:102	4	value
LEAF_NODE	1802:102	1802:102	5	value
LEAF_NODE	1802:107	1802:107	3	)
LEAF_NODE	1803:0	1803:0	2	{
STATEMENTS	1804:1	1960:30	2	
SIMPLE_DECL	1804:1	1804:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	1804:1	1804:26	4	enum TIFFReadDirEntryErr err
TYPE	1804:1	1804:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	1804:1	1804:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	1804:1	1804:1	7	enum
LEAF_NODE	1804:6	1804:6	7	TIFFReadDirEntryErr
NAME	1804:26	1804:26	5	err
LEAF_NODE	1804:26	1804:26	6	err
LEAF_NODE	1804:29	1804:29	4	;
SIMPLE_DECL	1805:1	1805:13	3	uint32 count ;
VAR_DECL	1805:1	1805:8	4	uint32 count
TYPE	1805:1	1805:1	5	uint32
TYPE_NAME	1805:1	1805:1	6	uint32
LEAF_NODE	1805:1	1805:1	7	uint32
NAME	1805:8	1805:8	5	count
LEAF_NODE	1805:8	1805:8	6	count
LEAF_NODE	1805:13	1805:13	4	;
SIMPLE_DECL	1806:1	1806:15	3	void * origdata ;
VAR_DECL	1806:1	1806:7	4	void * origdata
TYPE	1806:1	1806:5	5	void *
TYPE_NAME	1806:1	1806:1	6	void
LEAF_NODE	1806:1	1806:1	7	void
POINTER	1806:5	1806:5	6	*
LEAF_NODE	1806:5	1806:5	7	*
NAME	1806:7	1806:7	5	origdata
LEAF_NODE	1806:7	1806:7	6	origdata
LEAF_NODE	1806:15	1806:15	4	;
SIMPLE_DECL	1807:1	1807:12	3	int32 * data ;
VAR_DECL	1807:1	1807:8	4	int32 * data
TYPE	1807:1	1807:6	5	int32 *
TYPE_NAME	1807:1	1807:1	6	int32
LEAF_NODE	1807:1	1807:1	7	int32
POINTER	1807:6	1807:6	6	*
LEAF_NODE	1807:6	1807:6	7	*
NAME	1807:8	1807:8	5	data
LEAF_NODE	1807:8	1807:8	6	data
LEAF_NODE	1807:12	1807:12	4	;
SELECTION	1808:1	1809:1	3	
KEYWORD	1808:1	1808:1	4	switch
LEAF_NODE	1808:1	1808:1	5	switch
LEAF_NODE	1808:8	1808:8	4	(
CONDITION	1808:9	1808:9	4	direntry -> tdir_type
EXPR	1808:9	1808:9	5	direntry -> tdir_type
FIELD	1808:9	1808:19	6	direntry -> tdir_type
LEAF_NODE	1808:9	1808:9	7	direntry
LEAF_NODE	1808:17	1808:17	7	->
LEAF_NODE	1808:19	1808:19	7	tdir_type
LEAF_NODE	1808:28	1808:28	4	)
STATEMENTS	1809:1	1821:1	4	
LEAF_NODE	1809:1	1809:1	5	{
STATEMENTS	1810:2	1820:34	5	
LABEL	1810:2	1810:16	6	case TIFF_BYTE :
LEAF_NODE	1810:2	1810:2	7	case
LEAF_NODE	1810:7	1810:7	7	TIFF_BYTE
LEAF_NODE	1810:16	1810:16	7	:
LABEL	1811:2	1811:17	6	case TIFF_SBYTE :
LEAF_NODE	1811:2	1811:2	7	case
LEAF_NODE	1811:7	1811:7	7	TIFF_SBYTE
LEAF_NODE	1811:17	1811:17	7	:
LABEL	1812:2	1812:17	6	case TIFF_SHORT :
LEAF_NODE	1812:2	1812:2	7	case
LEAF_NODE	1812:7	1812:7	7	TIFF_SHORT
LEAF_NODE	1812:17	1812:17	7	:
LABEL	1813:2	1813:18	6	case TIFF_SSHORT :
LEAF_NODE	1813:2	1813:2	7	case
LEAF_NODE	1813:7	1813:7	7	TIFF_SSHORT
LEAF_NODE	1813:18	1813:18	7	:
LABEL	1814:2	1814:16	6	case TIFF_LONG :
LEAF_NODE	1814:2	1814:2	7	case
LEAF_NODE	1814:7	1814:7	7	TIFF_LONG
LEAF_NODE	1814:16	1814:16	7	:
LABEL	1815:2	1815:17	6	case TIFF_SLONG :
LEAF_NODE	1815:2	1815:2	7	case
LEAF_NODE	1815:7	1815:7	7	TIFF_SLONG
LEAF_NODE	1815:17	1815:17	7	:
LABEL	1816:2	1816:17	6	case TIFF_LONG8 :
LEAF_NODE	1816:2	1816:2	7	case
LEAF_NODE	1816:7	1816:7	7	TIFF_LONG8
LEAF_NODE	1816:17	1816:17	7	:
LABEL	1817:2	1817:18	6	case TIFF_SLONG8 :
LEAF_NODE	1817:2	1817:2	7	case
LEAF_NODE	1817:7	1817:7	7	TIFF_SLONG8
LEAF_NODE	1817:18	1817:18	7	:
JUMP_STATEMENT	1818:3	1818:8	6	break DESTINATION ;
KEYWORD	1818:3	1818:3	7	break
LEAF_NODE	1818:3	1818:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1818:8	1818:8	7	;
LABEL	1819:2	1819:9	6	default :
LEAF_NODE	1819:2	1819:2	7	default
LEAF_NODE	1819:9	1819:9	7	:
LEAF_NODE	1820:3	1820:3	6	return
LEAF_NODE	1820:9	1820:9	6	(
LEAF_NODE	1820:10	1820:10	6	TIFFReadDirEntryErrType
LEAF_NODE	1820:33	1820:33	6	)
LEAF_NODE	1820:34	1820:34	6	;
LEAF_NODE	1821:1	1821:1	5	}
EXPR_STATEMENT	1822:1	1822:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata ) ;
EXPR	1822:1	1822:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
ASSIGN	1822:1	1822:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
LVAL	1822:1	1822:1	6	err
FIELD	1822:1	1822:1	7	err
LEAF_NODE	1822:1	1822:1	8	err
ASSIGN_OP	1822:4	1822:4	6	=
LEAF_NODE	1822:4	1822:4	7	=
RVAL	1822:5	1822:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
FUNCTION_CALL	1822:5	1822:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
CALLEE	1822:5	1822:5	8	TIFFReadDirEntryArray
LEAF_NODE	1822:5	1822:5	9	TIFFReadDirEntryArray
LEAF_NODE	1822:26	1822:26	8	(
ARGUMENT	1822:27	1822:27	8	tif
FIELD	1822:27	1822:27	9	tif
LEAF_NODE	1822:27	1822:27	10	tif
LEAF_NODE	1822:30	1822:30	8	,
ARGUMENT	1822:31	1822:31	8	direntry
FIELD	1822:31	1822:31	9	direntry
LEAF_NODE	1822:31	1822:31	10	direntry
LEAF_NODE	1822:39	1822:39	8	,
ARGUMENT	1822:40	1822:40	8	& count
UNARY_EXPR	1822:40	1822:41	9	& count
UNARY_OPERATOR	1822:40	1822:40	10	&
LEAF_NODE	1822:40	1822:40	11	&
FIELD	1822:41	1822:41	10	count
LEAF_NODE	1822:41	1822:41	11	count
LEAF_NODE	1822:46	1822:46	8	,
ARGUMENT	1822:47	1822:47	8	4
FIELD	1822:47	1822:47	9	4
LEAF_NODE	1822:47	1822:47	10	4
LEAF_NODE	1822:48	1822:48	8	,
ARGUMENT	1822:49	1822:49	8	& origdata
UNARY_EXPR	1822:49	1822:50	9	& origdata
UNARY_OPERATOR	1822:49	1822:49	10	&
LEAF_NODE	1822:49	1822:49	11	&
FIELD	1822:50	1822:50	10	origdata
LEAF_NODE	1822:50	1822:50	11	origdata
LEAF_NODE	1822:58	1822:58	8	)
LEAF_NODE	1822:59	1822:59	4	;
SELECTION	1823:1	1824:1	3	
KEYWORD	1823:1	1823:1	4	if
LEAF_NODE	1823:1	1823:1	5	if
LEAF_NODE	1823:4	1823:4	4	(
CONDITION	1823:5	1823:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1823:5	1823:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	1823:5	1823:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1823:5	1823:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	1823:5	1823:5	8	(
FIELD	1823:6	1823:6	8	err
LEAF_NODE	1823:6	1823:6	9	err
EQ_OPERATOR	1823:9	1823:9	8	!=
LEAF_NODE	1823:9	1823:9	9	!=
FIELD	1823:11	1823:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	1823:11	1823:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	1823:32	1823:32	8	)
LEAF_NODE	1823:33	1823:33	7	||
EXPR	1823:35	1823:47	7	( origdata == 0 )
LEAF_NODE	1823:35	1823:35	8	(
FIELD	1823:36	1823:36	8	origdata
LEAF_NODE	1823:36	1823:36	9	origdata
EQ_OPERATOR	1823:44	1823:44	8	==
LEAF_NODE	1823:44	1823:44	9	==
FIELD	1823:46	1823:46	8	0
LEAF_NODE	1823:46	1823:46	9	0
LEAF_NODE	1823:47	1823:47	8	)
LEAF_NODE	1823:48	1823:48	4	)
STATEMENTS	1824:1	1827:1	4	
LEAF_NODE	1824:1	1824:1	5	{
STATEMENTS	1825:2	1826:13	5	
EXPR_STATEMENT	1825:2	1825:10	6	* value = 0 ;
EXPR	1825:2	1825:2	7	* value = 0
ASSIGN	1825:2	1825:9	8	* value = 0
LVAL	1825:2	1825:2	9	* value
UNARY_EXPR	1825:2	1825:3	10	* value
UNARY_OPERATOR	1825:2	1825:2	11	*
LEAF_NODE	1825:2	1825:2	12	*
FIELD	1825:3	1825:3	11	value
LEAF_NODE	1825:3	1825:3	12	value
ASSIGN_OP	1825:8	1825:8	9	=
LEAF_NODE	1825:8	1825:8	10	=
RVAL	1825:9	1825:9	9	0
FIELD	1825:9	1825:9	10	0
LEAF_NODE	1825:9	1825:9	11	0
LEAF_NODE	1825:10	1825:10	7	;
LEAF_NODE	1826:2	1826:2	6	return
LEAF_NODE	1826:8	1826:8	6	(
LEAF_NODE	1826:9	1826:9	6	err
LEAF_NODE	1826:12	1826:12	6	)
LEAF_NODE	1826:13	1826:13	6	;
LEAF_NODE	1827:1	1827:1	5	}
SELECTION	1828:1	1829:1	3	
KEYWORD	1828:1	1828:1	4	switch
LEAF_NODE	1828:1	1828:1	5	switch
LEAF_NODE	1828:8	1828:8	4	(
CONDITION	1828:9	1828:9	4	direntry -> tdir_type
EXPR	1828:9	1828:9	5	direntry -> tdir_type
FIELD	1828:9	1828:19	6	direntry -> tdir_type
LEAF_NODE	1828:9	1828:9	7	direntry
LEAF_NODE	1828:17	1828:17	7	->
LEAF_NODE	1828:19	1828:19	7	tdir_type
LEAF_NODE	1828:28	1828:28	4	)
STATEMENTS	1829:1	1855:1	4	
LEAF_NODE	1829:1	1829:1	5	{
STATEMENTS	1830:2	1854:32	5	
LABEL	1830:2	1830:16	6	case TIFF_LONG :
LEAF_NODE	1830:2	1830:2	7	case
LEAF_NODE	1830:7	1830:7	7	TIFF_LONG
LEAF_NODE	1830:16	1830:16	7	:
LEAF_NODE	1831:3	1831:3	6	{
STATEMENTS	1832:4	1848:33	6	
SIMPLE_DECL	1832:4	1832:13	7	uint32 * m ;
VAR_DECL	1832:4	1832:12	8	uint32 * m
TYPE	1832:4	1832:10	9	uint32 *
TYPE_NAME	1832:4	1832:4	10	uint32
LEAF_NODE	1832:4	1832:4	11	uint32
POINTER	1832:10	1832:10	10	*
LEAF_NODE	1832:10	1832:10	11	*
NAME	1832:12	1832:12	9	m
LEAF_NODE	1832:12	1832:12	10	m
LEAF_NODE	1832:13	1832:13	8	;
SIMPLE_DECL	1833:4	1833:12	7	uint32 n ;
VAR_DECL	1833:4	1833:11	8	uint32 n
TYPE	1833:4	1833:4	9	uint32
TYPE_NAME	1833:4	1833:4	10	uint32
LEAF_NODE	1833:4	1833:4	11	uint32
NAME	1833:11	1833:11	9	n
LEAF_NODE	1833:11	1833:11	10	n
LEAF_NODE	1833:12	1833:12	8	;
EXPR_STATEMENT	1834:4	1834:23	7	m = ( uint32 * ) origdata ;
EXPR	1834:4	1834:4	8	m = ( uint32 * ) origdata
ASSIGN	1834:4	1834:6	9	m = ( uint32 * ) origdata
LVAL	1834:4	1834:4	10	m
FIELD	1834:4	1834:4	11	m
LEAF_NODE	1834:4	1834:4	12	m
ASSIGN_OP	1834:5	1834:5	10	=
LEAF_NODE	1834:5	1834:5	11	=
RVAL	1834:6	1834:15	10	( uint32 * ) origdata
LEAF_NODE	1834:6	1834:6	11	(
TYPE_NAME	1834:7	1834:7	11	uint32
LEAF_NODE	1834:7	1834:7	12	uint32
LEAF_NODE	1834:13	1834:13	11	*
LEAF_NODE	1834:14	1834:14	11	)
FIELD	1834:15	1834:15	11	origdata
LEAF_NODE	1834:15	1834:15	12	origdata
LEAF_NODE	1834:23	1834:23	8	;
ITERATION	1835:4	1836:4	7	
KEYWORD	1835:4	1835:4	8	for
LEAF_NODE	1835:4	1835:4	9	for
LEAF_NODE	1835:8	1835:8	8	(
FOR_INIT	1835:9	1835:12	8	n = 0 ;
EXPR	1835:9	1835:9	9	n = 0
ASSIGN	1835:9	1835:11	10	n = 0
LVAL	1835:9	1835:9	11	n
FIELD	1835:9	1835:9	12	n
LEAF_NODE	1835:9	1835:9	13	n
ASSIGN_OP	1835:10	1835:10	11	=
LEAF_NODE	1835:10	1835:10	12	=
RVAL	1835:11	1835:11	11	0
FIELD	1835:11	1835:11	12	0
LEAF_NODE	1835:11	1835:11	13	0
LEAF_NODE	1835:12	1835:12	9	;
CONDITION	1835:14	1835:14	8	n < count
EXPR	1835:14	1835:16	9	n < count
FIELD	1835:14	1835:14	10	n
LEAF_NODE	1835:14	1835:14	11	n
REL_OPERATOR	1835:15	1835:15	10	<
LEAF_NODE	1835:15	1835:15	11	<
FIELD	1835:16	1835:16	10	count
LEAF_NODE	1835:16	1835:16	11	count
LEAF_NODE	1835:21	1835:21	8	;
FOR_EXPR	1835:23	1835:23	8	n ++
EXPR	1835:23	1835:23	9	n ++
FIELD	1835:23	1835:24	10	n ++
LEAF_NODE	1835:23	1835:23	11	n
LEAF_NODE	1835:24	1835:24	11	++
LEAF_NODE	1835:26	1835:26	8	)
STATEMENTS	1836:4	1846:4	8	
LEAF_NODE	1836:4	1836:4	9	{
STATEMENTS	1837:5	1845:5	9	
SELECTION	1837:5	1838:6	10	
KEYWORD	1837:5	1837:5	11	if
LEAF_NODE	1837:5	1837:5	12	if
LEAF_NODE	1837:8	1837:8	11	(
CONDITION	1837:9	1837:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1837:9	1837:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1837:9	1837:14	13	tif -> tif_flags
LEAF_NODE	1837:9	1837:9	14	tif
LEAF_NODE	1837:12	1837:12	14	->
LEAF_NODE	1837:14	1837:14	14	tif_flags
LEAF_NODE	1837:23	1837:23	13	&
FIELD	1837:24	1837:24	13	TIFF_SWAB
LEAF_NODE	1837:24	1837:24	14	TIFF_SWAB
LEAF_NODE	1837:33	1837:33	11	)
STATEMENTS	1838:6	1838:6	11	
EXPR_STATEMENT	1838:6	1838:30	12	TIFFSwabLong ( ( uint32 * ) m ) ;
EXPR	1838:6	1838:6	13	TIFFSwabLong ( ( uint32 * ) m )
FUNCTION_CALL	1838:6	1838:29	14	TIFFSwabLong ( ( uint32 * ) m )
CALLEE	1838:6	1838:6	15	TIFFSwabLong
LEAF_NODE	1838:6	1838:6	16	TIFFSwabLong
LEAF_NODE	1838:18	1838:18	15	(
ARGUMENT	1838:19	1838:28	15	( uint32 * ) m
LEAF_NODE	1838:19	1838:19	16	(
TYPE_NAME	1838:20	1838:20	16	uint32
LEAF_NODE	1838:20	1838:20	17	uint32
LEAF_NODE	1838:26	1838:26	16	*
LEAF_NODE	1838:27	1838:27	16	)
FIELD	1838:28	1838:28	16	m
LEAF_NODE	1838:28	1838:28	17	m
LEAF_NODE	1838:29	1838:29	15	)
LEAF_NODE	1838:30	1838:30	13	;
EXPR_STATEMENT	1839:5	1839:48	10	err = TIFFReadDirEntryCheckRangeSlongLong ( * m ) ;
EXPR	1839:5	1839:5	11	err = TIFFReadDirEntryCheckRangeSlongLong ( * m )
ASSIGN	1839:5	1839:9	12	err = TIFFReadDirEntryCheckRangeSlongLong ( * m )
LVAL	1839:5	1839:5	13	err
FIELD	1839:5	1839:5	14	err
LEAF_NODE	1839:5	1839:5	15	err
ASSIGN_OP	1839:8	1839:8	13	=
LEAF_NODE	1839:8	1839:8	14	=
RVAL	1839:9	1839:9	13	TIFFReadDirEntryCheckRangeSlongLong ( * m )
FUNCTION_CALL	1839:9	1839:47	14	TIFFReadDirEntryCheckRangeSlongLong ( * m )
CALLEE	1839:9	1839:9	15	TIFFReadDirEntryCheckRangeSlongLong
LEAF_NODE	1839:9	1839:9	16	TIFFReadDirEntryCheckRangeSlongLong
LEAF_NODE	1839:44	1839:44	15	(
ARGUMENT	1839:45	1839:45	15	* m
UNARY_EXPR	1839:45	1839:46	16	* m
UNARY_OPERATOR	1839:45	1839:45	17	*
LEAF_NODE	1839:45	1839:45	18	*
FIELD	1839:46	1839:46	17	m
LEAF_NODE	1839:46	1839:46	18	m
LEAF_NODE	1839:47	1839:47	15	)
LEAF_NODE	1839:48	1839:48	11	;
SELECTION	1840:5	1841:5	10	
KEYWORD	1840:5	1840:5	11	if
LEAF_NODE	1840:5	1840:5	12	if
LEAF_NODE	1840:8	1840:8	11	(
CONDITION	1840:9	1840:9	11	err != TIFFReadDirEntryErrOk
EXPR	1840:9	1840:14	12	err != TIFFReadDirEntryErrOk
FIELD	1840:9	1840:9	13	err
LEAF_NODE	1840:9	1840:9	14	err
EQ_OPERATOR	1840:12	1840:12	13	!=
LEAF_NODE	1840:12	1840:12	14	!=
FIELD	1840:14	1840:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1840:14	1840:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1840:35	1840:35	11	)
STATEMENTS	1841:5	1844:5	11	
LEAF_NODE	1841:5	1841:5	12	{
STATEMENTS	1842:6	1843:17	12	
EXPR_STATEMENT	1842:6	1842:25	13	_TIFFfree ( origdata ) ;
EXPR	1842:6	1842:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	1842:6	1842:24	15	_TIFFfree ( origdata )
CALLEE	1842:6	1842:6	16	_TIFFfree
LEAF_NODE	1842:6	1842:6	17	_TIFFfree
LEAF_NODE	1842:15	1842:15	16	(
ARGUMENT	1842:16	1842:16	16	origdata
FIELD	1842:16	1842:16	17	origdata
LEAF_NODE	1842:16	1842:16	18	origdata
LEAF_NODE	1842:24	1842:24	16	)
LEAF_NODE	1842:25	1842:25	14	;
LEAF_NODE	1843:6	1843:6	13	return
LEAF_NODE	1843:12	1843:12	13	(
LEAF_NODE	1843:13	1843:13	13	err
LEAF_NODE	1843:16	1843:16	13	)
LEAF_NODE	1843:17	1843:17	13	;
LEAF_NODE	1844:5	1844:5	12	}
EXPR_STATEMENT	1845:5	1845:8	10	m ++ ;
EXPR	1845:5	1845:5	11	m ++
FIELD	1845:5	1845:6	12	m ++
LEAF_NODE	1845:5	1845:5	13	m
LEAF_NODE	1845:6	1845:6	13	++
LEAF_NODE	1845:8	1845:8	11	;
LEAF_NODE	1846:4	1846:4	9	}
EXPR_STATEMENT	1847:4	1847:27	7	* value = ( int32 * ) origdata ;
EXPR	1847:4	1847:4	8	* value = ( int32 * ) origdata
ASSIGN	1847:4	1847:11	9	* value = ( int32 * ) origdata
LVAL	1847:4	1847:4	10	* value
UNARY_EXPR	1847:4	1847:5	11	* value
UNARY_OPERATOR	1847:4	1847:4	12	*
LEAF_NODE	1847:4	1847:4	13	*
FIELD	1847:5	1847:5	12	value
LEAF_NODE	1847:5	1847:5	13	value
ASSIGN_OP	1847:10	1847:10	10	=
LEAF_NODE	1847:10	1847:10	11	=
RVAL	1847:11	1847:19	10	( int32 * ) origdata
LEAF_NODE	1847:11	1847:11	11	(
TYPE_NAME	1847:12	1847:12	11	int32
LEAF_NODE	1847:12	1847:12	12	int32
LEAF_NODE	1847:17	1847:17	11	*
LEAF_NODE	1847:18	1847:18	11	)
FIELD	1847:19	1847:19	11	origdata
LEAF_NODE	1847:19	1847:19	12	origdata
LEAF_NODE	1847:27	1847:27	8	;
LEAF_NODE	1848:4	1848:4	7	return
LEAF_NODE	1848:10	1848:10	7	(
LEAF_NODE	1848:11	1848:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	1848:32	1848:32	7	)
LEAF_NODE	1848:33	1848:33	7	;
LEAF_NODE	1849:3	1849:3	6	}
LABEL	1850:2	1850:17	6	case TIFF_SLONG :
LEAF_NODE	1850:2	1850:2	7	case
LEAF_NODE	1850:7	1850:7	7	TIFF_SLONG
LEAF_NODE	1850:17	1850:17	7	:
EXPR_STATEMENT	1851:3	1851:26	6	* value = ( int32 * ) origdata ;
EXPR	1851:3	1851:3	7	* value = ( int32 * ) origdata
ASSIGN	1851:3	1851:10	8	* value = ( int32 * ) origdata
LVAL	1851:3	1851:3	9	* value
UNARY_EXPR	1851:3	1851:4	10	* value
UNARY_OPERATOR	1851:3	1851:3	11	*
LEAF_NODE	1851:3	1851:3	12	*
FIELD	1851:4	1851:4	11	value
LEAF_NODE	1851:4	1851:4	12	value
ASSIGN_OP	1851:9	1851:9	9	=
LEAF_NODE	1851:9	1851:9	10	=
RVAL	1851:10	1851:18	9	( int32 * ) origdata
LEAF_NODE	1851:10	1851:10	10	(
TYPE_NAME	1851:11	1851:11	10	int32
LEAF_NODE	1851:11	1851:11	11	int32
LEAF_NODE	1851:16	1851:16	10	*
LEAF_NODE	1851:17	1851:17	10	)
FIELD	1851:18	1851:18	10	origdata
LEAF_NODE	1851:18	1851:18	11	origdata
LEAF_NODE	1851:26	1851:26	7	;
SELECTION	1852:3	1853:4	6	
KEYWORD	1852:3	1852:3	7	if
LEAF_NODE	1852:3	1852:3	8	if
LEAF_NODE	1852:6	1852:6	7	(
CONDITION	1852:7	1852:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	1852:7	1852:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	1852:7	1852:12	9	tif -> tif_flags
LEAF_NODE	1852:7	1852:7	10	tif
LEAF_NODE	1852:10	1852:10	10	->
LEAF_NODE	1852:12	1852:12	10	tif_flags
LEAF_NODE	1852:21	1852:21	9	&
FIELD	1852:22	1852:22	9	TIFF_SWAB
LEAF_NODE	1852:22	1852:22	10	TIFF_SWAB
LEAF_NODE	1852:31	1852:31	7	)
STATEMENTS	1853:4	1853:4	7	
EXPR_STATEMENT	1853:4	1853:48	8	TIFFSwabArrayOfLong ( ( uint32 * ) ( * value ) , count ) ;
EXPR	1853:4	1853:4	9	TIFFSwabArrayOfLong ( ( uint32 * ) ( * value ) , count )
FUNCTION_CALL	1853:4	1853:47	10	TIFFSwabArrayOfLong ( ( uint32 * ) ( * value ) , count )
CALLEE	1853:4	1853:4	11	TIFFSwabArrayOfLong
LEAF_NODE	1853:4	1853:4	12	TIFFSwabArrayOfLong
LEAF_NODE	1853:23	1853:23	11	(
ARGUMENT	1853:24	1853:40	11	( uint32 * ) ( * value )
LEAF_NODE	1853:24	1853:24	12	(
TYPE_NAME	1853:25	1853:25	12	uint32
LEAF_NODE	1853:25	1853:25	13	uint32
LEAF_NODE	1853:31	1853:31	12	*
LEAF_NODE	1853:32	1853:32	12	)
LEAF_NODE	1853:33	1853:33	12	(
UNARY_EXPR	1853:34	1853:35	12	* value
UNARY_OPERATOR	1853:34	1853:34	13	*
LEAF_NODE	1853:34	1853:34	14	*
FIELD	1853:35	1853:35	13	value
LEAF_NODE	1853:35	1853:35	14	value
LEAF_NODE	1853:40	1853:40	12	)
LEAF_NODE	1853:41	1853:41	11	,
ARGUMENT	1853:42	1853:42	11	count
FIELD	1853:42	1853:42	12	count
LEAF_NODE	1853:42	1853:42	13	count
LEAF_NODE	1853:47	1853:47	11	)
LEAF_NODE	1853:48	1853:48	9	;
LEAF_NODE	1854:3	1854:3	6	return
LEAF_NODE	1854:9	1854:9	6	(
LEAF_NODE	1854:10	1854:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1854:31	1854:31	6	)
LEAF_NODE	1854:32	1854:32	6	;
LEAF_NODE	1855:1	1855:1	5	}
EXPR_STATEMENT	1856:1	1856:34	3	data = ( int32 * ) _TIFFmalloc ( count * 4 ) ;
EXPR	1856:1	1856:1	4	data = ( int32 * ) _TIFFmalloc ( count * 4 )
ASSIGN	1856:1	1856:6	5	data = ( int32 * ) _TIFFmalloc ( count * 4 )
LVAL	1856:1	1856:1	6	data
FIELD	1856:1	1856:1	7	data
LEAF_NODE	1856:1	1856:1	8	data
ASSIGN_OP	1856:5	1856:5	6	=
LEAF_NODE	1856:5	1856:5	7	=
RVAL	1856:6	1856:14	6	( int32 * ) _TIFFmalloc ( count * 4 )
LEAF_NODE	1856:6	1856:6	7	(
TYPE_NAME	1856:7	1856:7	7	int32
LEAF_NODE	1856:7	1856:7	8	int32
LEAF_NODE	1856:12	1856:12	7	*
LEAF_NODE	1856:13	1856:13	7	)
FUNCTION_CALL	1856:14	1856:33	7	_TIFFmalloc ( count * 4 )
CALLEE	1856:14	1856:14	8	_TIFFmalloc
LEAF_NODE	1856:14	1856:14	9	_TIFFmalloc
LEAF_NODE	1856:25	1856:25	8	(
ARGUMENT	1856:26	1856:32	8	count * 4
FIELD	1856:26	1856:26	9	count
LEAF_NODE	1856:26	1856:26	10	count
LEAF_NODE	1856:31	1856:31	9	*
FIELD	1856:32	1856:32	9	4
LEAF_NODE	1856:32	1856:32	10	4
LEAF_NODE	1856:33	1856:33	8	)
LEAF_NODE	1856:34	1856:34	4	;
SELECTION	1857:1	1858:1	3	
KEYWORD	1857:1	1857:1	4	if
LEAF_NODE	1857:1	1857:1	5	if
LEAF_NODE	1857:4	1857:4	4	(
CONDITION	1857:5	1857:5	4	data == 0
EXPR	1857:5	1857:11	5	data == 0
FIELD	1857:5	1857:5	6	data
LEAF_NODE	1857:5	1857:5	7	data
EQ_OPERATOR	1857:9	1857:9	6	==
LEAF_NODE	1857:9	1857:9	7	==
FIELD	1857:11	1857:11	6	0
LEAF_NODE	1857:11	1857:11	7	0
LEAF_NODE	1857:12	1857:12	4	)
STATEMENTS	1858:1	1861:1	4	
LEAF_NODE	1858:1	1858:1	5	{
STATEMENTS	1859:2	1860:34	5	
EXPR_STATEMENT	1859:2	1859:21	6	_TIFFfree ( origdata ) ;
EXPR	1859:2	1859:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	1859:2	1859:20	8	_TIFFfree ( origdata )
CALLEE	1859:2	1859:2	9	_TIFFfree
LEAF_NODE	1859:2	1859:2	10	_TIFFfree
LEAF_NODE	1859:11	1859:11	9	(
ARGUMENT	1859:12	1859:12	9	origdata
FIELD	1859:12	1859:12	10	origdata
LEAF_NODE	1859:12	1859:12	11	origdata
LEAF_NODE	1859:20	1859:20	9	)
LEAF_NODE	1859:21	1859:21	7	;
LEAF_NODE	1860:2	1860:2	6	return
LEAF_NODE	1860:8	1860:8	6	(
LEAF_NODE	1860:9	1860:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	1860:33	1860:33	6	)
LEAF_NODE	1860:34	1860:34	6	;
LEAF_NODE	1861:1	1861:1	5	}
SELECTION	1862:1	1863:1	3	
KEYWORD	1862:1	1862:1	4	switch
LEAF_NODE	1862:1	1862:1	5	switch
LEAF_NODE	1862:8	1862:8	4	(
CONDITION	1862:9	1862:9	4	direntry -> tdir_type
EXPR	1862:9	1862:9	5	direntry -> tdir_type
FIELD	1862:9	1862:19	6	direntry -> tdir_type
LEAF_NODE	1862:9	1862:9	7	direntry
LEAF_NODE	1862:17	1862:17	7	->
LEAF_NODE	1862:19	1862:19	7	tdir_type
LEAF_NODE	1862:28	1862:28	4	)
STATEMENTS	1863:1	1952:1	4	
LEAF_NODE	1863:1	1863:1	5	{
STATEMENTS	1864:2	1951:3	5	
LABEL	1864:2	1864:16	6	case TIFF_BYTE :
LEAF_NODE	1864:2	1864:2	7	case
LEAF_NODE	1864:7	1864:7	7	TIFF_BYTE
LEAF_NODE	1864:16	1864:16	7	:
LEAF_NODE	1865:3	1865:3	6	{
STATEMENTS	1866:4	1871:4	6	
SIMPLE_DECL	1866:4	1866:13	7	uint8 * ma ;
VAR_DECL	1866:4	1866:11	8	uint8 * ma
TYPE	1866:4	1866:9	9	uint8 *
TYPE_NAME	1866:4	1866:4	10	uint8
LEAF_NODE	1866:4	1866:4	11	uint8
POINTER	1866:9	1866:9	10	*
LEAF_NODE	1866:9	1866:9	11	*
NAME	1866:11	1866:11	9	ma
LEAF_NODE	1866:11	1866:11	10	ma
LEAF_NODE	1866:13	1866:13	8	;
SIMPLE_DECL	1867:4	1867:13	7	int32 * mb ;
VAR_DECL	1867:4	1867:11	8	int32 * mb
TYPE	1867:4	1867:9	9	int32 *
TYPE_NAME	1867:4	1867:4	10	int32
LEAF_NODE	1867:4	1867:4	11	int32
POINTER	1867:9	1867:9	10	*
LEAF_NODE	1867:9	1867:9	11	*
NAME	1867:11	1867:11	9	mb
LEAF_NODE	1867:11	1867:11	10	mb
LEAF_NODE	1867:13	1867:13	8	;
SIMPLE_DECL	1868:4	1868:12	7	uint32 n ;
VAR_DECL	1868:4	1868:11	8	uint32 n
TYPE	1868:4	1868:4	9	uint32
TYPE_NAME	1868:4	1868:4	10	uint32
LEAF_NODE	1868:4	1868:4	11	uint32
NAME	1868:11	1868:11	9	n
LEAF_NODE	1868:11	1868:11	10	n
LEAF_NODE	1868:12	1868:12	8	;
EXPR_STATEMENT	1869:4	1869:23	7	ma = ( uint8 * ) origdata ;
EXPR	1869:4	1869:4	8	ma = ( uint8 * ) origdata
ASSIGN	1869:4	1869:7	9	ma = ( uint8 * ) origdata
LVAL	1869:4	1869:4	10	ma
FIELD	1869:4	1869:4	11	ma
LEAF_NODE	1869:4	1869:4	12	ma
ASSIGN_OP	1869:6	1869:6	10	=
LEAF_NODE	1869:6	1869:6	11	=
RVAL	1869:7	1869:15	10	( uint8 * ) origdata
LEAF_NODE	1869:7	1869:7	11	(
TYPE_NAME	1869:8	1869:8	11	uint8
LEAF_NODE	1869:8	1869:8	12	uint8
LEAF_NODE	1869:13	1869:13	11	*
LEAF_NODE	1869:14	1869:14	11	)
FIELD	1869:15	1869:15	11	origdata
LEAF_NODE	1869:15	1869:15	12	origdata
LEAF_NODE	1869:23	1869:23	8	;
EXPR_STATEMENT	1870:4	1870:11	7	mb = data ;
EXPR	1870:4	1870:4	8	mb = data
ASSIGN	1870:4	1870:7	9	mb = data
LVAL	1870:4	1870:4	10	mb
FIELD	1870:4	1870:4	11	mb
LEAF_NODE	1870:4	1870:4	12	mb
ASSIGN_OP	1870:6	1870:6	10	=
LEAF_NODE	1870:6	1870:6	11	=
RVAL	1870:7	1870:7	10	data
FIELD	1870:7	1870:7	11	data
LEAF_NODE	1870:7	1870:7	12	data
LEAF_NODE	1870:11	1870:11	8	;
ITERATION	1871:4	1872:5	7	
KEYWORD	1871:4	1871:4	8	for
LEAF_NODE	1871:4	1871:4	9	for
LEAF_NODE	1871:8	1871:8	8	(
FOR_INIT	1871:9	1871:12	8	n = 0 ;
EXPR	1871:9	1871:9	9	n = 0
ASSIGN	1871:9	1871:11	10	n = 0
LVAL	1871:9	1871:9	11	n
FIELD	1871:9	1871:9	12	n
LEAF_NODE	1871:9	1871:9	13	n
ASSIGN_OP	1871:10	1871:10	11	=
LEAF_NODE	1871:10	1871:10	12	=
RVAL	1871:11	1871:11	11	0
FIELD	1871:11	1871:11	12	0
LEAF_NODE	1871:11	1871:11	13	0
LEAF_NODE	1871:12	1871:12	9	;
CONDITION	1871:14	1871:14	8	n < count
EXPR	1871:14	1871:16	9	n < count
FIELD	1871:14	1871:14	10	n
LEAF_NODE	1871:14	1871:14	11	n
REL_OPERATOR	1871:15	1871:15	10	<
LEAF_NODE	1871:15	1871:15	11	<
FIELD	1871:16	1871:16	10	count
LEAF_NODE	1871:16	1871:16	11	count
LEAF_NODE	1871:21	1871:21	8	;
FOR_EXPR	1871:23	1871:23	8	n ++
EXPR	1871:23	1871:23	9	n ++
FIELD	1871:23	1871:24	10	n ++
LEAF_NODE	1871:23	1871:23	11	n
LEAF_NODE	1871:24	1871:24	11	++
LEAF_NODE	1871:26	1871:26	8	)
STATEMENTS	1872:5	1872:5	8	
EXPR_STATEMENT	1872:5	1872:25	9	* mb ++ = ( int32 ) ( * ma ++ ) ;
EXPR	1872:5	1872:5	10	* mb ++ = ( int32 ) ( * ma ++ )
ASSIGN	1872:5	1872:11	11	* mb ++ = ( int32 ) ( * ma ++ )
LVAL	1872:5	1872:5	12	* mb ++
UNARY_EXPR	1872:5	1872:6	13	* mb ++
UNARY_OPERATOR	1872:5	1872:5	14	*
LEAF_NODE	1872:5	1872:5	15	*
FIELD	1872:6	1872:8	14	mb ++
LEAF_NODE	1872:6	1872:6	15	mb
LEAF_NODE	1872:8	1872:8	15	++
ASSIGN_OP	1872:10	1872:10	12	=
LEAF_NODE	1872:10	1872:10	13	=
RVAL	1872:11	1872:24	12	( int32 ) ( * ma ++ )
LEAF_NODE	1872:11	1872:11	13	(
TYPE_NAME	1872:12	1872:12	13	int32
LEAF_NODE	1872:12	1872:12	14	int32
LEAF_NODE	1872:17	1872:17	13	)
LEAF_NODE	1872:18	1872:18	13	(
UNARY_EXPR	1872:19	1872:20	13	* ma ++
UNARY_OPERATOR	1872:19	1872:19	14	*
LEAF_NODE	1872:19	1872:19	15	*
FIELD	1872:20	1872:22	14	ma ++
LEAF_NODE	1872:20	1872:20	15	ma
LEAF_NODE	1872:22	1872:22	15	++
LEAF_NODE	1872:24	1872:24	13	)
LEAF_NODE	1872:25	1872:25	10	;
LEAF_NODE	1873:3	1873:3	6	}
JUMP_STATEMENT	1874:3	1874:8	6	break DESTINATION ;
KEYWORD	1874:3	1874:3	7	break
LEAF_NODE	1874:3	1874:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1874:8	1874:8	7	;
LABEL	1875:2	1875:17	6	case TIFF_SBYTE :
LEAF_NODE	1875:2	1875:2	7	case
LEAF_NODE	1875:7	1875:7	7	TIFF_SBYTE
LEAF_NODE	1875:17	1875:17	7	:
LEAF_NODE	1876:3	1876:3	6	{
STATEMENTS	1877:4	1882:4	6	
SIMPLE_DECL	1877:4	1877:12	7	int8 * ma ;
VAR_DECL	1877:4	1877:10	8	int8 * ma
TYPE	1877:4	1877:8	9	int8 *
TYPE_NAME	1877:4	1877:4	10	int8
LEAF_NODE	1877:4	1877:4	11	int8
POINTER	1877:8	1877:8	10	*
LEAF_NODE	1877:8	1877:8	11	*
NAME	1877:10	1877:10	9	ma
LEAF_NODE	1877:10	1877:10	10	ma
LEAF_NODE	1877:12	1877:12	8	;
SIMPLE_DECL	1878:4	1878:13	7	int32 * mb ;
VAR_DECL	1878:4	1878:11	8	int32 * mb
TYPE	1878:4	1878:9	9	int32 *
TYPE_NAME	1878:4	1878:4	10	int32
LEAF_NODE	1878:4	1878:4	11	int32
POINTER	1878:9	1878:9	10	*
LEAF_NODE	1878:9	1878:9	11	*
NAME	1878:11	1878:11	9	mb
LEAF_NODE	1878:11	1878:11	10	mb
LEAF_NODE	1878:13	1878:13	8	;
SIMPLE_DECL	1879:4	1879:12	7	uint32 n ;
VAR_DECL	1879:4	1879:11	8	uint32 n
TYPE	1879:4	1879:4	9	uint32
TYPE_NAME	1879:4	1879:4	10	uint32
LEAF_NODE	1879:4	1879:4	11	uint32
NAME	1879:11	1879:11	9	n
LEAF_NODE	1879:11	1879:11	10	n
LEAF_NODE	1879:12	1879:12	8	;
EXPR_STATEMENT	1880:4	1880:22	7	ma = ( int8 * ) origdata ;
EXPR	1880:4	1880:4	8	ma = ( int8 * ) origdata
ASSIGN	1880:4	1880:7	9	ma = ( int8 * ) origdata
LVAL	1880:4	1880:4	10	ma
FIELD	1880:4	1880:4	11	ma
LEAF_NODE	1880:4	1880:4	12	ma
ASSIGN_OP	1880:6	1880:6	10	=
LEAF_NODE	1880:6	1880:6	11	=
RVAL	1880:7	1880:14	10	( int8 * ) origdata
LEAF_NODE	1880:7	1880:7	11	(
TYPE_NAME	1880:8	1880:8	11	int8
LEAF_NODE	1880:8	1880:8	12	int8
LEAF_NODE	1880:12	1880:12	11	*
LEAF_NODE	1880:13	1880:13	11	)
FIELD	1880:14	1880:14	11	origdata
LEAF_NODE	1880:14	1880:14	12	origdata
LEAF_NODE	1880:22	1880:22	8	;
EXPR_STATEMENT	1881:4	1881:11	7	mb = data ;
EXPR	1881:4	1881:4	8	mb = data
ASSIGN	1881:4	1881:7	9	mb = data
LVAL	1881:4	1881:4	10	mb
FIELD	1881:4	1881:4	11	mb
LEAF_NODE	1881:4	1881:4	12	mb
ASSIGN_OP	1881:6	1881:6	10	=
LEAF_NODE	1881:6	1881:6	11	=
RVAL	1881:7	1881:7	10	data
FIELD	1881:7	1881:7	11	data
LEAF_NODE	1881:7	1881:7	12	data
LEAF_NODE	1881:11	1881:11	8	;
ITERATION	1882:4	1883:5	7	
KEYWORD	1882:4	1882:4	8	for
LEAF_NODE	1882:4	1882:4	9	for
LEAF_NODE	1882:8	1882:8	8	(
FOR_INIT	1882:9	1882:12	8	n = 0 ;
EXPR	1882:9	1882:9	9	n = 0
ASSIGN	1882:9	1882:11	10	n = 0
LVAL	1882:9	1882:9	11	n
FIELD	1882:9	1882:9	12	n
LEAF_NODE	1882:9	1882:9	13	n
ASSIGN_OP	1882:10	1882:10	11	=
LEAF_NODE	1882:10	1882:10	12	=
RVAL	1882:11	1882:11	11	0
FIELD	1882:11	1882:11	12	0
LEAF_NODE	1882:11	1882:11	13	0
LEAF_NODE	1882:12	1882:12	9	;
CONDITION	1882:14	1882:14	8	n < count
EXPR	1882:14	1882:16	9	n < count
FIELD	1882:14	1882:14	10	n
LEAF_NODE	1882:14	1882:14	11	n
REL_OPERATOR	1882:15	1882:15	10	<
LEAF_NODE	1882:15	1882:15	11	<
FIELD	1882:16	1882:16	10	count
LEAF_NODE	1882:16	1882:16	11	count
LEAF_NODE	1882:21	1882:21	8	;
FOR_EXPR	1882:23	1882:23	8	n ++
EXPR	1882:23	1882:23	9	n ++
FIELD	1882:23	1882:24	10	n ++
LEAF_NODE	1882:23	1882:23	11	n
LEAF_NODE	1882:24	1882:24	11	++
LEAF_NODE	1882:26	1882:26	8	)
STATEMENTS	1883:5	1883:5	8	
EXPR_STATEMENT	1883:5	1883:25	9	* mb ++ = ( int32 ) ( * ma ++ ) ;
EXPR	1883:5	1883:5	10	* mb ++ = ( int32 ) ( * ma ++ )
ASSIGN	1883:5	1883:11	11	* mb ++ = ( int32 ) ( * ma ++ )
LVAL	1883:5	1883:5	12	* mb ++
UNARY_EXPR	1883:5	1883:6	13	* mb ++
UNARY_OPERATOR	1883:5	1883:5	14	*
LEAF_NODE	1883:5	1883:5	15	*
FIELD	1883:6	1883:8	14	mb ++
LEAF_NODE	1883:6	1883:6	15	mb
LEAF_NODE	1883:8	1883:8	15	++
ASSIGN_OP	1883:10	1883:10	12	=
LEAF_NODE	1883:10	1883:10	13	=
RVAL	1883:11	1883:24	12	( int32 ) ( * ma ++ )
LEAF_NODE	1883:11	1883:11	13	(
TYPE_NAME	1883:12	1883:12	13	int32
LEAF_NODE	1883:12	1883:12	14	int32
LEAF_NODE	1883:17	1883:17	13	)
LEAF_NODE	1883:18	1883:18	13	(
UNARY_EXPR	1883:19	1883:20	13	* ma ++
UNARY_OPERATOR	1883:19	1883:19	14	*
LEAF_NODE	1883:19	1883:19	15	*
FIELD	1883:20	1883:22	14	ma ++
LEAF_NODE	1883:20	1883:20	15	ma
LEAF_NODE	1883:22	1883:22	15	++
LEAF_NODE	1883:24	1883:24	13	)
LEAF_NODE	1883:25	1883:25	10	;
LEAF_NODE	1884:3	1884:3	6	}
JUMP_STATEMENT	1885:3	1885:8	6	break DESTINATION ;
KEYWORD	1885:3	1885:3	7	break
LEAF_NODE	1885:3	1885:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1885:8	1885:8	7	;
LABEL	1886:2	1886:17	6	case TIFF_SHORT :
LEAF_NODE	1886:2	1886:2	7	case
LEAF_NODE	1886:7	1886:7	7	TIFF_SHORT
LEAF_NODE	1886:17	1886:17	7	:
LEAF_NODE	1887:3	1887:3	6	{
STATEMENTS	1888:4	1893:4	6	
SIMPLE_DECL	1888:4	1888:14	7	uint16 * ma ;
VAR_DECL	1888:4	1888:12	8	uint16 * ma
TYPE	1888:4	1888:10	9	uint16 *
TYPE_NAME	1888:4	1888:4	10	uint16
LEAF_NODE	1888:4	1888:4	11	uint16
POINTER	1888:10	1888:10	10	*
LEAF_NODE	1888:10	1888:10	11	*
NAME	1888:12	1888:12	9	ma
LEAF_NODE	1888:12	1888:12	10	ma
LEAF_NODE	1888:14	1888:14	8	;
SIMPLE_DECL	1889:4	1889:13	7	int32 * mb ;
VAR_DECL	1889:4	1889:11	8	int32 * mb
TYPE	1889:4	1889:9	9	int32 *
TYPE_NAME	1889:4	1889:4	10	int32
LEAF_NODE	1889:4	1889:4	11	int32
POINTER	1889:9	1889:9	10	*
LEAF_NODE	1889:9	1889:9	11	*
NAME	1889:11	1889:11	9	mb
LEAF_NODE	1889:11	1889:11	10	mb
LEAF_NODE	1889:13	1889:13	8	;
SIMPLE_DECL	1890:4	1890:12	7	uint32 n ;
VAR_DECL	1890:4	1890:11	8	uint32 n
TYPE	1890:4	1890:4	9	uint32
TYPE_NAME	1890:4	1890:4	10	uint32
LEAF_NODE	1890:4	1890:4	11	uint32
NAME	1890:11	1890:11	9	n
LEAF_NODE	1890:11	1890:11	10	n
LEAF_NODE	1890:12	1890:12	8	;
EXPR_STATEMENT	1891:4	1891:24	7	ma = ( uint16 * ) origdata ;
EXPR	1891:4	1891:4	8	ma = ( uint16 * ) origdata
ASSIGN	1891:4	1891:7	9	ma = ( uint16 * ) origdata
LVAL	1891:4	1891:4	10	ma
FIELD	1891:4	1891:4	11	ma
LEAF_NODE	1891:4	1891:4	12	ma
ASSIGN_OP	1891:6	1891:6	10	=
LEAF_NODE	1891:6	1891:6	11	=
RVAL	1891:7	1891:16	10	( uint16 * ) origdata
LEAF_NODE	1891:7	1891:7	11	(
TYPE_NAME	1891:8	1891:8	11	uint16
LEAF_NODE	1891:8	1891:8	12	uint16
LEAF_NODE	1891:14	1891:14	11	*
LEAF_NODE	1891:15	1891:15	11	)
FIELD	1891:16	1891:16	11	origdata
LEAF_NODE	1891:16	1891:16	12	origdata
LEAF_NODE	1891:24	1891:24	8	;
EXPR_STATEMENT	1892:4	1892:11	7	mb = data ;
EXPR	1892:4	1892:4	8	mb = data
ASSIGN	1892:4	1892:7	9	mb = data
LVAL	1892:4	1892:4	10	mb
FIELD	1892:4	1892:4	11	mb
LEAF_NODE	1892:4	1892:4	12	mb
ASSIGN_OP	1892:6	1892:6	10	=
LEAF_NODE	1892:6	1892:6	11	=
RVAL	1892:7	1892:7	10	data
FIELD	1892:7	1892:7	11	data
LEAF_NODE	1892:7	1892:7	12	data
LEAF_NODE	1892:11	1892:11	8	;
ITERATION	1893:4	1894:4	7	
KEYWORD	1893:4	1893:4	8	for
LEAF_NODE	1893:4	1893:4	9	for
LEAF_NODE	1893:8	1893:8	8	(
FOR_INIT	1893:9	1893:12	8	n = 0 ;
EXPR	1893:9	1893:9	9	n = 0
ASSIGN	1893:9	1893:11	10	n = 0
LVAL	1893:9	1893:9	11	n
FIELD	1893:9	1893:9	12	n
LEAF_NODE	1893:9	1893:9	13	n
ASSIGN_OP	1893:10	1893:10	11	=
LEAF_NODE	1893:10	1893:10	12	=
RVAL	1893:11	1893:11	11	0
FIELD	1893:11	1893:11	12	0
LEAF_NODE	1893:11	1893:11	13	0
LEAF_NODE	1893:12	1893:12	9	;
CONDITION	1893:14	1893:14	8	n < count
EXPR	1893:14	1893:16	9	n < count
FIELD	1893:14	1893:14	10	n
LEAF_NODE	1893:14	1893:14	11	n
REL_OPERATOR	1893:15	1893:15	10	<
LEAF_NODE	1893:15	1893:15	11	<
FIELD	1893:16	1893:16	10	count
LEAF_NODE	1893:16	1893:16	11	count
LEAF_NODE	1893:21	1893:21	8	;
FOR_EXPR	1893:23	1893:23	8	n ++
EXPR	1893:23	1893:23	9	n ++
FIELD	1893:23	1893:24	10	n ++
LEAF_NODE	1893:23	1893:23	11	n
LEAF_NODE	1893:24	1893:24	11	++
LEAF_NODE	1893:26	1893:26	8	)
STATEMENTS	1894:4	1898:4	8	
LEAF_NODE	1894:4	1894:4	9	{
STATEMENTS	1895:5	1897:5	9	
SELECTION	1895:5	1896:6	10	
KEYWORD	1895:5	1895:5	11	if
LEAF_NODE	1895:5	1895:5	12	if
LEAF_NODE	1895:8	1895:8	11	(
CONDITION	1895:9	1895:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1895:9	1895:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1895:9	1895:14	13	tif -> tif_flags
LEAF_NODE	1895:9	1895:9	14	tif
LEAF_NODE	1895:12	1895:12	14	->
LEAF_NODE	1895:14	1895:14	14	tif_flags
LEAF_NODE	1895:23	1895:23	13	&
FIELD	1895:24	1895:24	13	TIFF_SWAB
LEAF_NODE	1895:24	1895:24	14	TIFF_SWAB
LEAF_NODE	1895:33	1895:33	11	)
STATEMENTS	1896:6	1896:6	11	
EXPR_STATEMENT	1896:6	1896:23	12	TIFFSwabShort ( ma ) ;
EXPR	1896:6	1896:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	1896:6	1896:22	14	TIFFSwabShort ( ma )
CALLEE	1896:6	1896:6	15	TIFFSwabShort
LEAF_NODE	1896:6	1896:6	16	TIFFSwabShort
LEAF_NODE	1896:19	1896:19	15	(
ARGUMENT	1896:20	1896:20	15	ma
FIELD	1896:20	1896:20	16	ma
LEAF_NODE	1896:20	1896:20	17	ma
LEAF_NODE	1896:22	1896:22	15	)
LEAF_NODE	1896:23	1896:23	13	;
EXPR_STATEMENT	1897:5	1897:25	10	* mb ++ = ( int32 ) ( * ma ++ ) ;
EXPR	1897:5	1897:5	11	* mb ++ = ( int32 ) ( * ma ++ )
ASSIGN	1897:5	1897:11	12	* mb ++ = ( int32 ) ( * ma ++ )
LVAL	1897:5	1897:5	13	* mb ++
UNARY_EXPR	1897:5	1897:6	14	* mb ++
UNARY_OPERATOR	1897:5	1897:5	15	*
LEAF_NODE	1897:5	1897:5	16	*
FIELD	1897:6	1897:8	15	mb ++
LEAF_NODE	1897:6	1897:6	16	mb
LEAF_NODE	1897:8	1897:8	16	++
ASSIGN_OP	1897:10	1897:10	13	=
LEAF_NODE	1897:10	1897:10	14	=
RVAL	1897:11	1897:24	13	( int32 ) ( * ma ++ )
LEAF_NODE	1897:11	1897:11	14	(
TYPE_NAME	1897:12	1897:12	14	int32
LEAF_NODE	1897:12	1897:12	15	int32
LEAF_NODE	1897:17	1897:17	14	)
LEAF_NODE	1897:18	1897:18	14	(
UNARY_EXPR	1897:19	1897:20	14	* ma ++
UNARY_OPERATOR	1897:19	1897:19	15	*
LEAF_NODE	1897:19	1897:19	16	*
FIELD	1897:20	1897:22	15	ma ++
LEAF_NODE	1897:20	1897:20	16	ma
LEAF_NODE	1897:22	1897:22	16	++
LEAF_NODE	1897:24	1897:24	14	)
LEAF_NODE	1897:25	1897:25	11	;
LEAF_NODE	1898:4	1898:4	9	}
LEAF_NODE	1899:3	1899:3	6	}
JUMP_STATEMENT	1900:3	1900:8	6	break DESTINATION ;
KEYWORD	1900:3	1900:3	7	break
LEAF_NODE	1900:3	1900:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1900:8	1900:8	7	;
LABEL	1901:2	1901:18	6	case TIFF_SSHORT :
LEAF_NODE	1901:2	1901:2	7	case
LEAF_NODE	1901:7	1901:7	7	TIFF_SSHORT
LEAF_NODE	1901:18	1901:18	7	:
LEAF_NODE	1902:3	1902:3	6	{
STATEMENTS	1903:4	1908:4	6	
SIMPLE_DECL	1903:4	1903:13	7	int16 * ma ;
VAR_DECL	1903:4	1903:11	8	int16 * ma
TYPE	1903:4	1903:9	9	int16 *
TYPE_NAME	1903:4	1903:4	10	int16
LEAF_NODE	1903:4	1903:4	11	int16
POINTER	1903:9	1903:9	10	*
LEAF_NODE	1903:9	1903:9	11	*
NAME	1903:11	1903:11	9	ma
LEAF_NODE	1903:11	1903:11	10	ma
LEAF_NODE	1903:13	1903:13	8	;
SIMPLE_DECL	1904:4	1904:13	7	int32 * mb ;
VAR_DECL	1904:4	1904:11	8	int32 * mb
TYPE	1904:4	1904:9	9	int32 *
TYPE_NAME	1904:4	1904:4	10	int32
LEAF_NODE	1904:4	1904:4	11	int32
POINTER	1904:9	1904:9	10	*
LEAF_NODE	1904:9	1904:9	11	*
NAME	1904:11	1904:11	9	mb
LEAF_NODE	1904:11	1904:11	10	mb
LEAF_NODE	1904:13	1904:13	8	;
SIMPLE_DECL	1905:4	1905:12	7	uint32 n ;
VAR_DECL	1905:4	1905:11	8	uint32 n
TYPE	1905:4	1905:4	9	uint32
TYPE_NAME	1905:4	1905:4	10	uint32
LEAF_NODE	1905:4	1905:4	11	uint32
NAME	1905:11	1905:11	9	n
LEAF_NODE	1905:11	1905:11	10	n
LEAF_NODE	1905:12	1905:12	8	;
EXPR_STATEMENT	1906:4	1906:23	7	ma = ( int16 * ) origdata ;
EXPR	1906:4	1906:4	8	ma = ( int16 * ) origdata
ASSIGN	1906:4	1906:7	9	ma = ( int16 * ) origdata
LVAL	1906:4	1906:4	10	ma
FIELD	1906:4	1906:4	11	ma
LEAF_NODE	1906:4	1906:4	12	ma
ASSIGN_OP	1906:6	1906:6	10	=
LEAF_NODE	1906:6	1906:6	11	=
RVAL	1906:7	1906:15	10	( int16 * ) origdata
LEAF_NODE	1906:7	1906:7	11	(
TYPE_NAME	1906:8	1906:8	11	int16
LEAF_NODE	1906:8	1906:8	12	int16
LEAF_NODE	1906:13	1906:13	11	*
LEAF_NODE	1906:14	1906:14	11	)
FIELD	1906:15	1906:15	11	origdata
LEAF_NODE	1906:15	1906:15	12	origdata
LEAF_NODE	1906:23	1906:23	8	;
EXPR_STATEMENT	1907:4	1907:11	7	mb = data ;
EXPR	1907:4	1907:4	8	mb = data
ASSIGN	1907:4	1907:7	9	mb = data
LVAL	1907:4	1907:4	10	mb
FIELD	1907:4	1907:4	11	mb
LEAF_NODE	1907:4	1907:4	12	mb
ASSIGN_OP	1907:6	1907:6	10	=
LEAF_NODE	1907:6	1907:6	11	=
RVAL	1907:7	1907:7	10	data
FIELD	1907:7	1907:7	11	data
LEAF_NODE	1907:7	1907:7	12	data
LEAF_NODE	1907:11	1907:11	8	;
ITERATION	1908:4	1909:4	7	
KEYWORD	1908:4	1908:4	8	for
LEAF_NODE	1908:4	1908:4	9	for
LEAF_NODE	1908:8	1908:8	8	(
FOR_INIT	1908:9	1908:12	8	n = 0 ;
EXPR	1908:9	1908:9	9	n = 0
ASSIGN	1908:9	1908:11	10	n = 0
LVAL	1908:9	1908:9	11	n
FIELD	1908:9	1908:9	12	n
LEAF_NODE	1908:9	1908:9	13	n
ASSIGN_OP	1908:10	1908:10	11	=
LEAF_NODE	1908:10	1908:10	12	=
RVAL	1908:11	1908:11	11	0
FIELD	1908:11	1908:11	12	0
LEAF_NODE	1908:11	1908:11	13	0
LEAF_NODE	1908:12	1908:12	9	;
CONDITION	1908:14	1908:14	8	n < count
EXPR	1908:14	1908:16	9	n < count
FIELD	1908:14	1908:14	10	n
LEAF_NODE	1908:14	1908:14	11	n
REL_OPERATOR	1908:15	1908:15	10	<
LEAF_NODE	1908:15	1908:15	11	<
FIELD	1908:16	1908:16	10	count
LEAF_NODE	1908:16	1908:16	11	count
LEAF_NODE	1908:21	1908:21	8	;
FOR_EXPR	1908:23	1908:23	8	n ++
EXPR	1908:23	1908:23	9	n ++
FIELD	1908:23	1908:24	10	n ++
LEAF_NODE	1908:23	1908:23	11	n
LEAF_NODE	1908:24	1908:24	11	++
LEAF_NODE	1908:26	1908:26	8	)
STATEMENTS	1909:4	1913:4	8	
LEAF_NODE	1909:4	1909:4	9	{
STATEMENTS	1910:5	1912:5	9	
SELECTION	1910:5	1911:6	10	
KEYWORD	1910:5	1910:5	11	if
LEAF_NODE	1910:5	1910:5	12	if
LEAF_NODE	1910:8	1910:8	11	(
CONDITION	1910:9	1910:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1910:9	1910:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1910:9	1910:14	13	tif -> tif_flags
LEAF_NODE	1910:9	1910:9	14	tif
LEAF_NODE	1910:12	1910:12	14	->
LEAF_NODE	1910:14	1910:14	14	tif_flags
LEAF_NODE	1910:23	1910:23	13	&
FIELD	1910:24	1910:24	13	TIFF_SWAB
LEAF_NODE	1910:24	1910:24	14	TIFF_SWAB
LEAF_NODE	1910:33	1910:33	11	)
STATEMENTS	1911:6	1911:6	11	
EXPR_STATEMENT	1911:6	1911:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	1911:6	1911:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	1911:6	1911:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	1911:6	1911:6	15	TIFFSwabShort
LEAF_NODE	1911:6	1911:6	16	TIFFSwabShort
LEAF_NODE	1911:19	1911:19	15	(
ARGUMENT	1911:20	1911:29	15	( uint16 * ) ma
LEAF_NODE	1911:20	1911:20	16	(
TYPE_NAME	1911:21	1911:21	16	uint16
LEAF_NODE	1911:21	1911:21	17	uint16
LEAF_NODE	1911:27	1911:27	16	*
LEAF_NODE	1911:28	1911:28	16	)
FIELD	1911:29	1911:29	16	ma
LEAF_NODE	1911:29	1911:29	17	ma
LEAF_NODE	1911:31	1911:31	15	)
LEAF_NODE	1911:32	1911:32	13	;
EXPR_STATEMENT	1912:5	1912:25	10	* mb ++ = ( int32 ) ( * ma ++ ) ;
EXPR	1912:5	1912:5	11	* mb ++ = ( int32 ) ( * ma ++ )
ASSIGN	1912:5	1912:11	12	* mb ++ = ( int32 ) ( * ma ++ )
LVAL	1912:5	1912:5	13	* mb ++
UNARY_EXPR	1912:5	1912:6	14	* mb ++
UNARY_OPERATOR	1912:5	1912:5	15	*
LEAF_NODE	1912:5	1912:5	16	*
FIELD	1912:6	1912:8	15	mb ++
LEAF_NODE	1912:6	1912:6	16	mb
LEAF_NODE	1912:8	1912:8	16	++
ASSIGN_OP	1912:10	1912:10	13	=
LEAF_NODE	1912:10	1912:10	14	=
RVAL	1912:11	1912:24	13	( int32 ) ( * ma ++ )
LEAF_NODE	1912:11	1912:11	14	(
TYPE_NAME	1912:12	1912:12	14	int32
LEAF_NODE	1912:12	1912:12	15	int32
LEAF_NODE	1912:17	1912:17	14	)
LEAF_NODE	1912:18	1912:18	14	(
UNARY_EXPR	1912:19	1912:20	14	* ma ++
UNARY_OPERATOR	1912:19	1912:19	15	*
LEAF_NODE	1912:19	1912:19	16	*
FIELD	1912:20	1912:22	15	ma ++
LEAF_NODE	1912:20	1912:20	16	ma
LEAF_NODE	1912:22	1912:22	16	++
LEAF_NODE	1912:24	1912:24	14	)
LEAF_NODE	1912:25	1912:25	11	;
LEAF_NODE	1913:4	1913:4	9	}
LEAF_NODE	1914:3	1914:3	6	}
JUMP_STATEMENT	1915:3	1915:8	6	break DESTINATION ;
KEYWORD	1915:3	1915:3	7	break
LEAF_NODE	1915:3	1915:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1915:8	1915:8	7	;
LABEL	1916:2	1916:17	6	case TIFF_LONG8 :
LEAF_NODE	1916:2	1916:2	7	case
LEAF_NODE	1916:7	1916:7	7	TIFF_LONG8
LEAF_NODE	1916:17	1916:17	7	:
LEAF_NODE	1917:3	1917:3	6	{
STATEMENTS	1918:4	1923:4	6	
SIMPLE_DECL	1918:4	1918:14	7	uint64 * ma ;
VAR_DECL	1918:4	1918:12	8	uint64 * ma
TYPE	1918:4	1918:10	9	uint64 *
TYPE_NAME	1918:4	1918:4	10	uint64
LEAF_NODE	1918:4	1918:4	11	uint64
POINTER	1918:10	1918:10	10	*
LEAF_NODE	1918:10	1918:10	11	*
NAME	1918:12	1918:12	9	ma
LEAF_NODE	1918:12	1918:12	10	ma
LEAF_NODE	1918:14	1918:14	8	;
SIMPLE_DECL	1919:4	1919:13	7	int32 * mb ;
VAR_DECL	1919:4	1919:11	8	int32 * mb
TYPE	1919:4	1919:9	9	int32 *
TYPE_NAME	1919:4	1919:4	10	int32
LEAF_NODE	1919:4	1919:4	11	int32
POINTER	1919:9	1919:9	10	*
LEAF_NODE	1919:9	1919:9	11	*
NAME	1919:11	1919:11	9	mb
LEAF_NODE	1919:11	1919:11	10	mb
LEAF_NODE	1919:13	1919:13	8	;
SIMPLE_DECL	1920:4	1920:12	7	uint32 n ;
VAR_DECL	1920:4	1920:11	8	uint32 n
TYPE	1920:4	1920:4	9	uint32
TYPE_NAME	1920:4	1920:4	10	uint32
LEAF_NODE	1920:4	1920:4	11	uint32
NAME	1920:11	1920:11	9	n
LEAF_NODE	1920:11	1920:11	10	n
LEAF_NODE	1920:12	1920:12	8	;
EXPR_STATEMENT	1921:4	1921:24	7	ma = ( uint64 * ) origdata ;
EXPR	1921:4	1921:4	8	ma = ( uint64 * ) origdata
ASSIGN	1921:4	1921:7	9	ma = ( uint64 * ) origdata
LVAL	1921:4	1921:4	10	ma
FIELD	1921:4	1921:4	11	ma
LEAF_NODE	1921:4	1921:4	12	ma
ASSIGN_OP	1921:6	1921:6	10	=
LEAF_NODE	1921:6	1921:6	11	=
RVAL	1921:7	1921:16	10	( uint64 * ) origdata
LEAF_NODE	1921:7	1921:7	11	(
TYPE_NAME	1921:8	1921:8	11	uint64
LEAF_NODE	1921:8	1921:8	12	uint64
LEAF_NODE	1921:14	1921:14	11	*
LEAF_NODE	1921:15	1921:15	11	)
FIELD	1921:16	1921:16	11	origdata
LEAF_NODE	1921:16	1921:16	12	origdata
LEAF_NODE	1921:24	1921:24	8	;
EXPR_STATEMENT	1922:4	1922:11	7	mb = data ;
EXPR	1922:4	1922:4	8	mb = data
ASSIGN	1922:4	1922:7	9	mb = data
LVAL	1922:4	1922:4	10	mb
FIELD	1922:4	1922:4	11	mb
LEAF_NODE	1922:4	1922:4	12	mb
ASSIGN_OP	1922:6	1922:6	10	=
LEAF_NODE	1922:6	1922:6	11	=
RVAL	1922:7	1922:7	10	data
FIELD	1922:7	1922:7	11	data
LEAF_NODE	1922:7	1922:7	12	data
LEAF_NODE	1922:11	1922:11	8	;
ITERATION	1923:4	1924:4	7	
KEYWORD	1923:4	1923:4	8	for
LEAF_NODE	1923:4	1923:4	9	for
LEAF_NODE	1923:8	1923:8	8	(
FOR_INIT	1923:9	1923:12	8	n = 0 ;
EXPR	1923:9	1923:9	9	n = 0
ASSIGN	1923:9	1923:11	10	n = 0
LVAL	1923:9	1923:9	11	n
FIELD	1923:9	1923:9	12	n
LEAF_NODE	1923:9	1923:9	13	n
ASSIGN_OP	1923:10	1923:10	11	=
LEAF_NODE	1923:10	1923:10	12	=
RVAL	1923:11	1923:11	11	0
FIELD	1923:11	1923:11	12	0
LEAF_NODE	1923:11	1923:11	13	0
LEAF_NODE	1923:12	1923:12	9	;
CONDITION	1923:14	1923:14	8	n < count
EXPR	1923:14	1923:16	9	n < count
FIELD	1923:14	1923:14	10	n
LEAF_NODE	1923:14	1923:14	11	n
REL_OPERATOR	1923:15	1923:15	10	<
LEAF_NODE	1923:15	1923:15	11	<
FIELD	1923:16	1923:16	10	count
LEAF_NODE	1923:16	1923:16	11	count
LEAF_NODE	1923:21	1923:21	8	;
FOR_EXPR	1923:23	1923:23	8	n ++
EXPR	1923:23	1923:23	9	n ++
FIELD	1923:23	1923:24	10	n ++
LEAF_NODE	1923:23	1923:23	11	n
LEAF_NODE	1923:24	1923:24	11	++
LEAF_NODE	1923:26	1923:26	8	)
STATEMENTS	1924:4	1931:4	8	
LEAF_NODE	1924:4	1924:4	9	{
STATEMENTS	1925:5	1930:5	9	
SELECTION	1925:5	1926:6	10	
KEYWORD	1925:5	1925:5	11	if
LEAF_NODE	1925:5	1925:5	12	if
LEAF_NODE	1925:8	1925:8	11	(
CONDITION	1925:9	1925:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1925:9	1925:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1925:9	1925:14	13	tif -> tif_flags
LEAF_NODE	1925:9	1925:9	14	tif
LEAF_NODE	1925:12	1925:12	14	->
LEAF_NODE	1925:14	1925:14	14	tif_flags
LEAF_NODE	1925:23	1925:23	13	&
FIELD	1925:24	1925:24	13	TIFF_SWAB
LEAF_NODE	1925:24	1925:24	14	TIFF_SWAB
LEAF_NODE	1925:33	1925:33	11	)
STATEMENTS	1926:6	1926:6	11	
EXPR_STATEMENT	1926:6	1926:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	1926:6	1926:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	1926:6	1926:22	14	TIFFSwabLong8 ( ma )
CALLEE	1926:6	1926:6	15	TIFFSwabLong8
LEAF_NODE	1926:6	1926:6	16	TIFFSwabLong8
LEAF_NODE	1926:19	1926:19	15	(
ARGUMENT	1926:20	1926:20	15	ma
FIELD	1926:20	1926:20	16	ma
LEAF_NODE	1926:20	1926:20	17	ma
LEAF_NODE	1926:22	1926:22	15	)
LEAF_NODE	1926:23	1926:23	13	;
EXPR_STATEMENT	1927:5	1927:50	10	err = TIFFReadDirEntryCheckRangeSlongLong8 ( * ma ) ;
EXPR	1927:5	1927:5	11	err = TIFFReadDirEntryCheckRangeSlongLong8 ( * ma )
ASSIGN	1927:5	1927:9	12	err = TIFFReadDirEntryCheckRangeSlongLong8 ( * ma )
LVAL	1927:5	1927:5	13	err
FIELD	1927:5	1927:5	14	err
LEAF_NODE	1927:5	1927:5	15	err
ASSIGN_OP	1927:8	1927:8	13	=
LEAF_NODE	1927:8	1927:8	14	=
RVAL	1927:9	1927:9	13	TIFFReadDirEntryCheckRangeSlongLong8 ( * ma )
FUNCTION_CALL	1927:9	1927:49	14	TIFFReadDirEntryCheckRangeSlongLong8 ( * ma )
CALLEE	1927:9	1927:9	15	TIFFReadDirEntryCheckRangeSlongLong8
LEAF_NODE	1927:9	1927:9	16	TIFFReadDirEntryCheckRangeSlongLong8
LEAF_NODE	1927:45	1927:45	15	(
ARGUMENT	1927:46	1927:46	15	* ma
UNARY_EXPR	1927:46	1927:47	16	* ma
UNARY_OPERATOR	1927:46	1927:46	17	*
LEAF_NODE	1927:46	1927:46	18	*
FIELD	1927:47	1927:47	17	ma
LEAF_NODE	1927:47	1927:47	18	ma
LEAF_NODE	1927:49	1927:49	15	)
LEAF_NODE	1927:50	1927:50	11	;
SELECTION	1928:5	1929:6	10	
KEYWORD	1928:5	1928:5	11	if
LEAF_NODE	1928:5	1928:5	12	if
LEAF_NODE	1928:8	1928:8	11	(
CONDITION	1928:9	1928:9	11	err != TIFFReadDirEntryErrOk
EXPR	1928:9	1928:14	12	err != TIFFReadDirEntryErrOk
FIELD	1928:9	1928:9	13	err
LEAF_NODE	1928:9	1928:9	14	err
EQ_OPERATOR	1928:12	1928:12	13	!=
LEAF_NODE	1928:12	1928:12	14	!=
FIELD	1928:14	1928:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1928:14	1928:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1928:35	1928:35	11	)
STATEMENTS	1929:6	1929:6	11	
JUMP_STATEMENT	1929:6	1929:11	12	break DESTINATION ;
KEYWORD	1929:6	1929:6	13	break
LEAF_NODE	1929:6	1929:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1929:11	1929:11	13	;
EXPR_STATEMENT	1930:5	1930:25	10	* mb ++ = ( int32 ) ( * ma ++ ) ;
EXPR	1930:5	1930:5	11	* mb ++ = ( int32 ) ( * ma ++ )
ASSIGN	1930:5	1930:11	12	* mb ++ = ( int32 ) ( * ma ++ )
LVAL	1930:5	1930:5	13	* mb ++
UNARY_EXPR	1930:5	1930:6	14	* mb ++
UNARY_OPERATOR	1930:5	1930:5	15	*
LEAF_NODE	1930:5	1930:5	16	*
FIELD	1930:6	1930:8	15	mb ++
LEAF_NODE	1930:6	1930:6	16	mb
LEAF_NODE	1930:8	1930:8	16	++
ASSIGN_OP	1930:10	1930:10	13	=
LEAF_NODE	1930:10	1930:10	14	=
RVAL	1930:11	1930:24	13	( int32 ) ( * ma ++ )
LEAF_NODE	1930:11	1930:11	14	(
TYPE_NAME	1930:12	1930:12	14	int32
LEAF_NODE	1930:12	1930:12	15	int32
LEAF_NODE	1930:17	1930:17	14	)
LEAF_NODE	1930:18	1930:18	14	(
UNARY_EXPR	1930:19	1930:20	14	* ma ++
UNARY_OPERATOR	1930:19	1930:19	15	*
LEAF_NODE	1930:19	1930:19	16	*
FIELD	1930:20	1930:22	15	ma ++
LEAF_NODE	1930:20	1930:20	16	ma
LEAF_NODE	1930:22	1930:22	16	++
LEAF_NODE	1930:24	1930:24	14	)
LEAF_NODE	1930:25	1930:25	11	;
LEAF_NODE	1931:4	1931:4	9	}
LEAF_NODE	1932:3	1932:3	6	}
JUMP_STATEMENT	1933:3	1933:8	6	break DESTINATION ;
KEYWORD	1933:3	1933:3	7	break
LEAF_NODE	1933:3	1933:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1933:8	1933:8	7	;
LABEL	1934:2	1934:18	6	case TIFF_SLONG8 :
LEAF_NODE	1934:2	1934:2	7	case
LEAF_NODE	1934:7	1934:7	7	TIFF_SLONG8
LEAF_NODE	1934:18	1934:18	7	:
LEAF_NODE	1935:3	1935:3	6	{
STATEMENTS	1936:4	1941:4	6	
SIMPLE_DECL	1936:4	1936:13	7	int64 * ma ;
VAR_DECL	1936:4	1936:11	8	int64 * ma
TYPE	1936:4	1936:9	9	int64 *
TYPE_NAME	1936:4	1936:4	10	int64
LEAF_NODE	1936:4	1936:4	11	int64
POINTER	1936:9	1936:9	10	*
LEAF_NODE	1936:9	1936:9	11	*
NAME	1936:11	1936:11	9	ma
LEAF_NODE	1936:11	1936:11	10	ma
LEAF_NODE	1936:13	1936:13	8	;
SIMPLE_DECL	1937:4	1937:13	7	int32 * mb ;
VAR_DECL	1937:4	1937:11	8	int32 * mb
TYPE	1937:4	1937:9	9	int32 *
TYPE_NAME	1937:4	1937:4	10	int32
LEAF_NODE	1937:4	1937:4	11	int32
POINTER	1937:9	1937:9	10	*
LEAF_NODE	1937:9	1937:9	11	*
NAME	1937:11	1937:11	9	mb
LEAF_NODE	1937:11	1937:11	10	mb
LEAF_NODE	1937:13	1937:13	8	;
SIMPLE_DECL	1938:4	1938:12	7	uint32 n ;
VAR_DECL	1938:4	1938:11	8	uint32 n
TYPE	1938:4	1938:4	9	uint32
TYPE_NAME	1938:4	1938:4	10	uint32
LEAF_NODE	1938:4	1938:4	11	uint32
NAME	1938:11	1938:11	9	n
LEAF_NODE	1938:11	1938:11	10	n
LEAF_NODE	1938:12	1938:12	8	;
EXPR_STATEMENT	1939:4	1939:23	7	ma = ( int64 * ) origdata ;
EXPR	1939:4	1939:4	8	ma = ( int64 * ) origdata
ASSIGN	1939:4	1939:7	9	ma = ( int64 * ) origdata
LVAL	1939:4	1939:4	10	ma
FIELD	1939:4	1939:4	11	ma
LEAF_NODE	1939:4	1939:4	12	ma
ASSIGN_OP	1939:6	1939:6	10	=
LEAF_NODE	1939:6	1939:6	11	=
RVAL	1939:7	1939:15	10	( int64 * ) origdata
LEAF_NODE	1939:7	1939:7	11	(
TYPE_NAME	1939:8	1939:8	11	int64
LEAF_NODE	1939:8	1939:8	12	int64
LEAF_NODE	1939:13	1939:13	11	*
LEAF_NODE	1939:14	1939:14	11	)
FIELD	1939:15	1939:15	11	origdata
LEAF_NODE	1939:15	1939:15	12	origdata
LEAF_NODE	1939:23	1939:23	8	;
EXPR_STATEMENT	1940:4	1940:11	7	mb = data ;
EXPR	1940:4	1940:4	8	mb = data
ASSIGN	1940:4	1940:7	9	mb = data
LVAL	1940:4	1940:4	10	mb
FIELD	1940:4	1940:4	11	mb
LEAF_NODE	1940:4	1940:4	12	mb
ASSIGN_OP	1940:6	1940:6	10	=
LEAF_NODE	1940:6	1940:6	11	=
RVAL	1940:7	1940:7	10	data
FIELD	1940:7	1940:7	11	data
LEAF_NODE	1940:7	1940:7	12	data
LEAF_NODE	1940:11	1940:11	8	;
ITERATION	1941:4	1942:4	7	
KEYWORD	1941:4	1941:4	8	for
LEAF_NODE	1941:4	1941:4	9	for
LEAF_NODE	1941:8	1941:8	8	(
FOR_INIT	1941:9	1941:12	8	n = 0 ;
EXPR	1941:9	1941:9	9	n = 0
ASSIGN	1941:9	1941:11	10	n = 0
LVAL	1941:9	1941:9	11	n
FIELD	1941:9	1941:9	12	n
LEAF_NODE	1941:9	1941:9	13	n
ASSIGN_OP	1941:10	1941:10	11	=
LEAF_NODE	1941:10	1941:10	12	=
RVAL	1941:11	1941:11	11	0
FIELD	1941:11	1941:11	12	0
LEAF_NODE	1941:11	1941:11	13	0
LEAF_NODE	1941:12	1941:12	9	;
CONDITION	1941:14	1941:14	8	n < count
EXPR	1941:14	1941:16	9	n < count
FIELD	1941:14	1941:14	10	n
LEAF_NODE	1941:14	1941:14	11	n
REL_OPERATOR	1941:15	1941:15	10	<
LEAF_NODE	1941:15	1941:15	11	<
FIELD	1941:16	1941:16	10	count
LEAF_NODE	1941:16	1941:16	11	count
LEAF_NODE	1941:21	1941:21	8	;
FOR_EXPR	1941:23	1941:23	8	n ++
EXPR	1941:23	1941:23	9	n ++
FIELD	1941:23	1941:24	10	n ++
LEAF_NODE	1941:23	1941:23	11	n
LEAF_NODE	1941:24	1941:24	11	++
LEAF_NODE	1941:26	1941:26	8	)
STATEMENTS	1942:4	1949:4	8	
LEAF_NODE	1942:4	1942:4	9	{
STATEMENTS	1943:5	1948:5	9	
SELECTION	1943:5	1944:6	10	
KEYWORD	1943:5	1943:5	11	if
LEAF_NODE	1943:5	1943:5	12	if
LEAF_NODE	1943:8	1943:8	11	(
CONDITION	1943:9	1943:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	1943:9	1943:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	1943:9	1943:14	13	tif -> tif_flags
LEAF_NODE	1943:9	1943:9	14	tif
LEAF_NODE	1943:12	1943:12	14	->
LEAF_NODE	1943:14	1943:14	14	tif_flags
LEAF_NODE	1943:23	1943:23	13	&
FIELD	1943:24	1943:24	13	TIFF_SWAB
LEAF_NODE	1943:24	1943:24	14	TIFF_SWAB
LEAF_NODE	1943:33	1943:33	11	)
STATEMENTS	1944:6	1944:6	11	
EXPR_STATEMENT	1944:6	1944:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	1944:6	1944:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	1944:6	1944:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	1944:6	1944:6	15	TIFFSwabLong8
LEAF_NODE	1944:6	1944:6	16	TIFFSwabLong8
LEAF_NODE	1944:19	1944:19	15	(
ARGUMENT	1944:20	1944:29	15	( uint64 * ) ma
LEAF_NODE	1944:20	1944:20	16	(
TYPE_NAME	1944:21	1944:21	16	uint64
LEAF_NODE	1944:21	1944:21	17	uint64
LEAF_NODE	1944:27	1944:27	16	*
LEAF_NODE	1944:28	1944:28	16	)
FIELD	1944:29	1944:29	16	ma
LEAF_NODE	1944:29	1944:29	17	ma
LEAF_NODE	1944:31	1944:31	15	)
LEAF_NODE	1944:32	1944:32	13	;
EXPR_STATEMENT	1945:5	1945:51	10	err = TIFFReadDirEntryCheckRangeSlongSlong8 ( * ma ) ;
EXPR	1945:5	1945:5	11	err = TIFFReadDirEntryCheckRangeSlongSlong8 ( * ma )
ASSIGN	1945:5	1945:9	12	err = TIFFReadDirEntryCheckRangeSlongSlong8 ( * ma )
LVAL	1945:5	1945:5	13	err
FIELD	1945:5	1945:5	14	err
LEAF_NODE	1945:5	1945:5	15	err
ASSIGN_OP	1945:8	1945:8	13	=
LEAF_NODE	1945:8	1945:8	14	=
RVAL	1945:9	1945:9	13	TIFFReadDirEntryCheckRangeSlongSlong8 ( * ma )
FUNCTION_CALL	1945:9	1945:50	14	TIFFReadDirEntryCheckRangeSlongSlong8 ( * ma )
CALLEE	1945:9	1945:9	15	TIFFReadDirEntryCheckRangeSlongSlong8
LEAF_NODE	1945:9	1945:9	16	TIFFReadDirEntryCheckRangeSlongSlong8
LEAF_NODE	1945:46	1945:46	15	(
ARGUMENT	1945:47	1945:47	15	* ma
UNARY_EXPR	1945:47	1945:48	16	* ma
UNARY_OPERATOR	1945:47	1945:47	17	*
LEAF_NODE	1945:47	1945:47	18	*
FIELD	1945:48	1945:48	17	ma
LEAF_NODE	1945:48	1945:48	18	ma
LEAF_NODE	1945:50	1945:50	15	)
LEAF_NODE	1945:51	1945:51	11	;
SELECTION	1946:5	1947:6	10	
KEYWORD	1946:5	1946:5	11	if
LEAF_NODE	1946:5	1946:5	12	if
LEAF_NODE	1946:8	1946:8	11	(
CONDITION	1946:9	1946:9	11	err != TIFFReadDirEntryErrOk
EXPR	1946:9	1946:14	12	err != TIFFReadDirEntryErrOk
FIELD	1946:9	1946:9	13	err
LEAF_NODE	1946:9	1946:9	14	err
EQ_OPERATOR	1946:12	1946:12	13	!=
LEAF_NODE	1946:12	1946:12	14	!=
FIELD	1946:14	1946:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	1946:14	1946:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	1946:35	1946:35	11	)
STATEMENTS	1947:6	1947:6	11	
JUMP_STATEMENT	1947:6	1947:11	12	break DESTINATION ;
KEYWORD	1947:6	1947:6	13	break
LEAF_NODE	1947:6	1947:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	1947:11	1947:11	13	;
EXPR_STATEMENT	1948:5	1948:25	10	* mb ++ = ( int32 ) ( * ma ++ ) ;
EXPR	1948:5	1948:5	11	* mb ++ = ( int32 ) ( * ma ++ )
ASSIGN	1948:5	1948:11	12	* mb ++ = ( int32 ) ( * ma ++ )
LVAL	1948:5	1948:5	13	* mb ++
UNARY_EXPR	1948:5	1948:6	14	* mb ++
UNARY_OPERATOR	1948:5	1948:5	15	*
LEAF_NODE	1948:5	1948:5	16	*
FIELD	1948:6	1948:8	15	mb ++
LEAF_NODE	1948:6	1948:6	16	mb
LEAF_NODE	1948:8	1948:8	16	++
ASSIGN_OP	1948:10	1948:10	13	=
LEAF_NODE	1948:10	1948:10	14	=
RVAL	1948:11	1948:24	13	( int32 ) ( * ma ++ )
LEAF_NODE	1948:11	1948:11	14	(
TYPE_NAME	1948:12	1948:12	14	int32
LEAF_NODE	1948:12	1948:12	15	int32
LEAF_NODE	1948:17	1948:17	14	)
LEAF_NODE	1948:18	1948:18	14	(
UNARY_EXPR	1948:19	1948:20	14	* ma ++
UNARY_OPERATOR	1948:19	1948:19	15	*
LEAF_NODE	1948:19	1948:19	16	*
FIELD	1948:20	1948:22	15	ma ++
LEAF_NODE	1948:20	1948:20	16	ma
LEAF_NODE	1948:22	1948:22	16	++
LEAF_NODE	1948:24	1948:24	14	)
LEAF_NODE	1948:25	1948:25	11	;
LEAF_NODE	1949:4	1949:4	9	}
LEAF_NODE	1950:3	1950:3	6	}
JUMP_STATEMENT	1951:3	1951:8	6	break DESTINATION ;
KEYWORD	1951:3	1951:3	7	break
LEAF_NODE	1951:3	1951:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1951:8	1951:8	7	;
LEAF_NODE	1952:1	1952:1	5	}
EXPR_STATEMENT	1953:1	1953:20	3	_TIFFfree ( origdata ) ;
EXPR	1953:1	1953:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	1953:1	1953:19	5	_TIFFfree ( origdata )
CALLEE	1953:1	1953:1	6	_TIFFfree
LEAF_NODE	1953:1	1953:1	7	_TIFFfree
LEAF_NODE	1953:10	1953:10	6	(
ARGUMENT	1953:11	1953:11	6	origdata
FIELD	1953:11	1953:11	7	origdata
LEAF_NODE	1953:11	1953:11	8	origdata
LEAF_NODE	1953:19	1953:19	6	)
LEAF_NODE	1953:20	1953:20	4	;
SELECTION	1954:1	1955:1	3	
KEYWORD	1954:1	1954:1	4	if
LEAF_NODE	1954:1	1954:1	5	if
LEAF_NODE	1954:4	1954:4	4	(
CONDITION	1954:5	1954:5	4	err != TIFFReadDirEntryErrOk
EXPR	1954:5	1954:10	5	err != TIFFReadDirEntryErrOk
FIELD	1954:5	1954:5	6	err
LEAF_NODE	1954:5	1954:5	7	err
EQ_OPERATOR	1954:8	1954:8	6	!=
LEAF_NODE	1954:8	1954:8	7	!=
FIELD	1954:10	1954:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1954:10	1954:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	1954:31	1954:31	4	)
STATEMENTS	1955:1	1958:1	4	
LEAF_NODE	1955:1	1955:1	5	{
STATEMENTS	1956:2	1957:13	5	
EXPR_STATEMENT	1956:2	1956:17	6	_TIFFfree ( data ) ;
EXPR	1956:2	1956:2	7	_TIFFfree ( data )
FUNCTION_CALL	1956:2	1956:16	8	_TIFFfree ( data )
CALLEE	1956:2	1956:2	9	_TIFFfree
LEAF_NODE	1956:2	1956:2	10	_TIFFfree
LEAF_NODE	1956:11	1956:11	9	(
ARGUMENT	1956:12	1956:12	9	data
FIELD	1956:12	1956:12	10	data
LEAF_NODE	1956:12	1956:12	11	data
LEAF_NODE	1956:16	1956:16	9	)
LEAF_NODE	1956:17	1956:17	7	;
LEAF_NODE	1957:2	1957:2	6	return
LEAF_NODE	1957:8	1957:8	6	(
LEAF_NODE	1957:9	1957:9	6	err
LEAF_NODE	1957:12	1957:12	6	)
LEAF_NODE	1957:13	1957:13	6	;
LEAF_NODE	1958:1	1958:1	5	}
EXPR_STATEMENT	1959:1	1959:12	3	* value = data ;
EXPR	1959:1	1959:1	4	* value = data
ASSIGN	1959:1	1959:8	5	* value = data
LVAL	1959:1	1959:1	6	* value
UNARY_EXPR	1959:1	1959:2	7	* value
UNARY_OPERATOR	1959:1	1959:1	8	*
LEAF_NODE	1959:1	1959:1	9	*
FIELD	1959:2	1959:2	8	value
LEAF_NODE	1959:2	1959:2	9	value
ASSIGN_OP	1959:7	1959:7	6	=
LEAF_NODE	1959:7	1959:7	7	=
RVAL	1959:8	1959:8	6	data
FIELD	1959:8	1959:8	7	data
LEAF_NODE	1959:8	1959:8	8	data
LEAF_NODE	1959:12	1959:12	4	;
LEAF_NODE	1960:1	1960:1	3	return
LEAF_NODE	1960:7	1960:7	3	(
LEAF_NODE	1960:8	1960:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	1960:29	1960:29	3	)
LEAF_NODE	1960:30	1960:30	3	;
LEAF_NODE	1961:0	1961:0	2	}
FUNCTION_DEF	1963:0	2128:0	1	
RETURN_TYPE	1963:0	1963:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	1963:0	1963:0	3	static
TYPE_NAME	1963:7	1963:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	1963:7	1963:7	4	enum
LEAF_NODE	1963:12	1963:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	1963:32	1963:32	2	TIFFReadDirEntryLong8ArrayWithLimit
LEAF_NODE	1963:32	1963:32	3	TIFFReadDirEntryLong8ArrayWithLimit
PARAMETER_LIST	1963:67	1964:74	2	( TIFF * tif , TIFFDirEntry * direntry , uint64 * * value , uint64 maxcount )
LEAF_NODE	1963:67	1963:67	3	(
PARAMETER_DECL	1964:8	1964:14	3	TIFF * tif
TYPE	1964:8	1964:12	4	TIFF *
TYPE_NAME	1964:8	1964:8	5	TIFF
LEAF_NODE	1964:8	1964:8	6	TIFF
POINTER	1964:12	1964:12	5	*
LEAF_NODE	1964:12	1964:12	6	*
NAME	1964:14	1964:14	4	tif
LEAF_NODE	1964:14	1964:14	5	tif
LEAF_NODE	1964:17	1964:17	3	,
PARAMETER_DECL	1964:19	1964:33	3	TIFFDirEntry * direntry
TYPE	1964:19	1964:31	4	TIFFDirEntry *
TYPE_NAME	1964:19	1964:19	5	TIFFDirEntry
LEAF_NODE	1964:19	1964:19	6	TIFFDirEntry
POINTER	1964:31	1964:31	5	*
LEAF_NODE	1964:31	1964:31	6	*
NAME	1964:33	1964:33	4	direntry
LEAF_NODE	1964:33	1964:33	5	direntry
LEAF_NODE	1964:41	1964:41	3	,
PARAMETER_DECL	1964:43	1964:52	3	uint64 * * value
TYPE	1964:43	1964:49	4	uint64 * *
TYPE_NAME	1964:43	1964:43	5	uint64
LEAF_NODE	1964:43	1964:43	6	uint64
POINTER	1964:49	1964:50	5	* *
LEAF_NODE	1964:49	1964:49	6	*
LEAF_NODE	1964:50	1964:50	6	*
NAME	1964:52	1964:52	4	value
LEAF_NODE	1964:52	1964:52	5	value
LEAF_NODE	1964:57	1964:57	3	,
PARAMETER_DECL	1964:59	1964:66	3	uint64 maxcount
TYPE	1964:59	1964:59	4	uint64
TYPE_NAME	1964:59	1964:59	5	uint64
LEAF_NODE	1964:59	1964:59	6	uint64
NAME	1964:66	1964:66	4	maxcount
LEAF_NODE	1964:66	1964:66	5	maxcount
LEAF_NODE	1964:74	1964:74	3	)
LEAF_NODE	1965:0	1965:0	2	{
STATEMENTS	1966:1	2127:30	2	
SIMPLE_DECL	1966:1	1966:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	1966:1	1966:26	4	enum TIFFReadDirEntryErr err
TYPE	1966:1	1966:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	1966:1	1966:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	1966:1	1966:1	7	enum
LEAF_NODE	1966:6	1966:6	7	TIFFReadDirEntryErr
NAME	1966:26	1966:26	5	err
LEAF_NODE	1966:26	1966:26	6	err
LEAF_NODE	1966:29	1966:29	4	;
SIMPLE_DECL	1967:1	1967:13	3	uint32 count ;
VAR_DECL	1967:1	1967:8	4	uint32 count
TYPE	1967:1	1967:1	5	uint32
TYPE_NAME	1967:1	1967:1	6	uint32
LEAF_NODE	1967:1	1967:1	7	uint32
NAME	1967:8	1967:8	5	count
LEAF_NODE	1967:8	1967:8	6	count
LEAF_NODE	1967:13	1967:13	4	;
SIMPLE_DECL	1968:1	1968:15	3	void * origdata ;
VAR_DECL	1968:1	1968:7	4	void * origdata
TYPE	1968:1	1968:5	5	void *
TYPE_NAME	1968:1	1968:1	6	void
LEAF_NODE	1968:1	1968:1	7	void
POINTER	1968:5	1968:5	6	*
LEAF_NODE	1968:5	1968:5	7	*
NAME	1968:7	1968:7	5	origdata
LEAF_NODE	1968:7	1968:7	6	origdata
LEAF_NODE	1968:15	1968:15	4	;
SIMPLE_DECL	1969:1	1969:13	3	uint64 * data ;
VAR_DECL	1969:1	1969:9	4	uint64 * data
TYPE	1969:1	1969:7	5	uint64 *
TYPE_NAME	1969:1	1969:1	6	uint64
LEAF_NODE	1969:1	1969:1	7	uint64
POINTER	1969:7	1969:7	6	*
LEAF_NODE	1969:7	1969:7	7	*
NAME	1969:9	1969:9	5	data
LEAF_NODE	1969:9	1969:9	6	data
LEAF_NODE	1969:13	1969:13	4	;
SELECTION	1970:1	1971:1	3	
KEYWORD	1970:1	1970:1	4	switch
LEAF_NODE	1970:1	1970:1	5	switch
LEAF_NODE	1970:8	1970:8	4	(
CONDITION	1970:9	1970:9	4	direntry -> tdir_type
EXPR	1970:9	1970:9	5	direntry -> tdir_type
FIELD	1970:9	1970:19	6	direntry -> tdir_type
LEAF_NODE	1970:9	1970:9	7	direntry
LEAF_NODE	1970:17	1970:17	7	->
LEAF_NODE	1970:19	1970:19	7	tdir_type
LEAF_NODE	1970:28	1970:28	4	)
STATEMENTS	1971:1	1983:1	4	
LEAF_NODE	1971:1	1971:1	5	{
STATEMENTS	1972:2	1982:34	5	
LABEL	1972:2	1972:16	6	case TIFF_BYTE :
LEAF_NODE	1972:2	1972:2	7	case
LEAF_NODE	1972:7	1972:7	7	TIFF_BYTE
LEAF_NODE	1972:16	1972:16	7	:
LABEL	1973:2	1973:17	6	case TIFF_SBYTE :
LEAF_NODE	1973:2	1973:2	7	case
LEAF_NODE	1973:7	1973:7	7	TIFF_SBYTE
LEAF_NODE	1973:17	1973:17	7	:
LABEL	1974:2	1974:17	6	case TIFF_SHORT :
LEAF_NODE	1974:2	1974:2	7	case
LEAF_NODE	1974:7	1974:7	7	TIFF_SHORT
LEAF_NODE	1974:17	1974:17	7	:
LABEL	1975:2	1975:18	6	case TIFF_SSHORT :
LEAF_NODE	1975:2	1975:2	7	case
LEAF_NODE	1975:7	1975:7	7	TIFF_SSHORT
LEAF_NODE	1975:18	1975:18	7	:
LABEL	1976:2	1976:16	6	case TIFF_LONG :
LEAF_NODE	1976:2	1976:2	7	case
LEAF_NODE	1976:7	1976:7	7	TIFF_LONG
LEAF_NODE	1976:16	1976:16	7	:
LABEL	1977:2	1977:17	6	case TIFF_SLONG :
LEAF_NODE	1977:2	1977:2	7	case
LEAF_NODE	1977:7	1977:7	7	TIFF_SLONG
LEAF_NODE	1977:17	1977:17	7	:
LABEL	1978:2	1978:17	6	case TIFF_LONG8 :
LEAF_NODE	1978:2	1978:2	7	case
LEAF_NODE	1978:7	1978:7	7	TIFF_LONG8
LEAF_NODE	1978:17	1978:17	7	:
LABEL	1979:2	1979:18	6	case TIFF_SLONG8 :
LEAF_NODE	1979:2	1979:2	7	case
LEAF_NODE	1979:7	1979:7	7	TIFF_SLONG8
LEAF_NODE	1979:18	1979:18	7	:
JUMP_STATEMENT	1980:3	1980:8	6	break DESTINATION ;
KEYWORD	1980:3	1980:3	7	break
LEAF_NODE	1980:3	1980:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	1980:8	1980:8	7	;
LABEL	1981:2	1981:9	6	default :
LEAF_NODE	1981:2	1981:2	7	default
LEAF_NODE	1981:9	1981:9	7	:
LEAF_NODE	1982:3	1982:3	6	return
LEAF_NODE	1982:9	1982:9	6	(
LEAF_NODE	1982:10	1982:10	6	TIFFReadDirEntryErrType
LEAF_NODE	1982:33	1982:33	6	)
LEAF_NODE	1982:34	1982:34	6	;
LEAF_NODE	1983:1	1983:1	5	}
EXPR_STATEMENT	1984:1	1984:77	3	err = TIFFReadDirEntryArrayWithLimit ( tif , direntry , & count , 8 , & origdata , maxcount ) ;
EXPR	1984:1	1984:1	4	err = TIFFReadDirEntryArrayWithLimit ( tif , direntry , & count , 8 , & origdata , maxcount )
ASSIGN	1984:1	1984:5	5	err = TIFFReadDirEntryArrayWithLimit ( tif , direntry , & count , 8 , & origdata , maxcount )
LVAL	1984:1	1984:1	6	err
FIELD	1984:1	1984:1	7	err
LEAF_NODE	1984:1	1984:1	8	err
ASSIGN_OP	1984:4	1984:4	6	=
LEAF_NODE	1984:4	1984:4	7	=
RVAL	1984:5	1984:5	6	TIFFReadDirEntryArrayWithLimit ( tif , direntry , & count , 8 , & origdata , maxcount )
FUNCTION_CALL	1984:5	1984:76	7	TIFFReadDirEntryArrayWithLimit ( tif , direntry , & count , 8 , & origdata , maxcount )
CALLEE	1984:5	1984:5	8	TIFFReadDirEntryArrayWithLimit
LEAF_NODE	1984:5	1984:5	9	TIFFReadDirEntryArrayWithLimit
LEAF_NODE	1984:35	1984:35	8	(
ARGUMENT	1984:36	1984:36	8	tif
FIELD	1984:36	1984:36	9	tif
LEAF_NODE	1984:36	1984:36	10	tif
LEAF_NODE	1984:39	1984:39	8	,
ARGUMENT	1984:40	1984:40	8	direntry
FIELD	1984:40	1984:40	9	direntry
LEAF_NODE	1984:40	1984:40	10	direntry
LEAF_NODE	1984:48	1984:48	8	,
ARGUMENT	1984:49	1984:49	8	& count
UNARY_EXPR	1984:49	1984:50	9	& count
UNARY_OPERATOR	1984:49	1984:49	10	&
LEAF_NODE	1984:49	1984:49	11	&
FIELD	1984:50	1984:50	10	count
LEAF_NODE	1984:50	1984:50	11	count
LEAF_NODE	1984:55	1984:55	8	,
ARGUMENT	1984:56	1984:56	8	8
FIELD	1984:56	1984:56	9	8
LEAF_NODE	1984:56	1984:56	10	8
LEAF_NODE	1984:57	1984:57	8	,
ARGUMENT	1984:58	1984:58	8	& origdata
UNARY_EXPR	1984:58	1984:59	9	& origdata
UNARY_OPERATOR	1984:58	1984:58	10	&
LEAF_NODE	1984:58	1984:58	11	&
FIELD	1984:59	1984:59	10	origdata
LEAF_NODE	1984:59	1984:59	11	origdata
LEAF_NODE	1984:67	1984:67	8	,
ARGUMENT	1984:68	1984:68	8	maxcount
FIELD	1984:68	1984:68	9	maxcount
LEAF_NODE	1984:68	1984:68	10	maxcount
LEAF_NODE	1984:76	1984:76	8	)
LEAF_NODE	1984:77	1984:77	4	;
SELECTION	1985:1	1986:1	3	
KEYWORD	1985:1	1985:1	4	if
LEAF_NODE	1985:1	1985:1	5	if
LEAF_NODE	1985:4	1985:4	4	(
CONDITION	1985:5	1985:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1985:5	1985:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	1985:5	1985:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	1985:5	1985:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	1985:5	1985:5	8	(
FIELD	1985:6	1985:6	8	err
LEAF_NODE	1985:6	1985:6	9	err
EQ_OPERATOR	1985:9	1985:9	8	!=
LEAF_NODE	1985:9	1985:9	9	!=
FIELD	1985:11	1985:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	1985:11	1985:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	1985:32	1985:32	8	)
LEAF_NODE	1985:33	1985:33	7	||
EXPR	1985:35	1985:47	7	( origdata == 0 )
LEAF_NODE	1985:35	1985:35	8	(
FIELD	1985:36	1985:36	8	origdata
LEAF_NODE	1985:36	1985:36	9	origdata
EQ_OPERATOR	1985:44	1985:44	8	==
LEAF_NODE	1985:44	1985:44	9	==
FIELD	1985:46	1985:46	8	0
LEAF_NODE	1985:46	1985:46	9	0
LEAF_NODE	1985:47	1985:47	8	)
LEAF_NODE	1985:48	1985:48	4	)
STATEMENTS	1986:1	1989:1	4	
LEAF_NODE	1986:1	1986:1	5	{
STATEMENTS	1987:2	1988:13	5	
EXPR_STATEMENT	1987:2	1987:10	6	* value = 0 ;
EXPR	1987:2	1987:2	7	* value = 0
ASSIGN	1987:2	1987:9	8	* value = 0
LVAL	1987:2	1987:2	9	* value
UNARY_EXPR	1987:2	1987:3	10	* value
UNARY_OPERATOR	1987:2	1987:2	11	*
LEAF_NODE	1987:2	1987:2	12	*
FIELD	1987:3	1987:3	11	value
LEAF_NODE	1987:3	1987:3	12	value
ASSIGN_OP	1987:8	1987:8	9	=
LEAF_NODE	1987:8	1987:8	10	=
RVAL	1987:9	1987:9	9	0
FIELD	1987:9	1987:9	10	0
LEAF_NODE	1987:9	1987:9	11	0
LEAF_NODE	1987:10	1987:10	7	;
LEAF_NODE	1988:2	1988:2	6	return
LEAF_NODE	1988:8	1988:8	6	(
LEAF_NODE	1988:9	1988:9	6	err
LEAF_NODE	1988:12	1988:12	6	)
LEAF_NODE	1988:13	1988:13	6	;
LEAF_NODE	1989:1	1989:1	5	}
SELECTION	1990:1	1991:1	3	
KEYWORD	1990:1	1990:1	4	switch
LEAF_NODE	1990:1	1990:1	5	switch
LEAF_NODE	1990:8	1990:8	4	(
CONDITION	1990:9	1990:9	4	direntry -> tdir_type
EXPR	1990:9	1990:9	5	direntry -> tdir_type
FIELD	1990:9	1990:19	6	direntry -> tdir_type
LEAF_NODE	1990:9	1990:9	7	direntry
LEAF_NODE	1990:17	1990:17	7	->
LEAF_NODE	1990:19	1990:19	7	tdir_type
LEAF_NODE	1990:28	1990:28	4	)
STATEMENTS	1991:1	2017:1	4	
LEAF_NODE	1991:1	1991:1	5	{
STATEMENTS	1992:2	2016:3	5	
LABEL	1992:2	1992:17	6	case TIFF_LONG8 :
LEAF_NODE	1992:2	1992:2	7	case
LEAF_NODE	1992:7	1992:7	7	TIFF_LONG8
LEAF_NODE	1992:17	1992:17	7	:
EXPR_STATEMENT	1993:3	1993:27	6	* value = ( uint64 * ) origdata ;
EXPR	1993:3	1993:3	7	* value = ( uint64 * ) origdata
ASSIGN	1993:3	1993:10	8	* value = ( uint64 * ) origdata
LVAL	1993:3	1993:3	9	* value
UNARY_EXPR	1993:3	1993:4	10	* value
UNARY_OPERATOR	1993:3	1993:3	11	*
LEAF_NODE	1993:3	1993:3	12	*
FIELD	1993:4	1993:4	11	value
LEAF_NODE	1993:4	1993:4	12	value
ASSIGN_OP	1993:9	1993:9	9	=
LEAF_NODE	1993:9	1993:9	10	=
RVAL	1993:10	1993:19	9	( uint64 * ) origdata
LEAF_NODE	1993:10	1993:10	10	(
TYPE_NAME	1993:11	1993:11	10	uint64
LEAF_NODE	1993:11	1993:11	11	uint64
LEAF_NODE	1993:17	1993:17	10	*
LEAF_NODE	1993:18	1993:18	10	)
FIELD	1993:19	1993:19	10	origdata
LEAF_NODE	1993:19	1993:19	11	origdata
LEAF_NODE	1993:27	1993:27	7	;
SELECTION	1994:3	1995:4	6	
KEYWORD	1994:3	1994:3	7	if
LEAF_NODE	1994:3	1994:3	8	if
LEAF_NODE	1994:6	1994:6	7	(
CONDITION	1994:7	1994:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	1994:7	1994:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	1994:7	1994:12	9	tif -> tif_flags
LEAF_NODE	1994:7	1994:7	10	tif
LEAF_NODE	1994:10	1994:10	10	->
LEAF_NODE	1994:12	1994:12	10	tif_flags
LEAF_NODE	1994:21	1994:21	9	&
FIELD	1994:22	1994:22	9	TIFF_SWAB
LEAF_NODE	1994:22	1994:22	10	TIFF_SWAB
LEAF_NODE	1994:31	1994:31	7	)
STATEMENTS	1995:4	1995:4	7	
EXPR_STATEMENT	1995:4	1995:38	8	TIFFSwabArrayOfLong8 ( * value , count ) ;
EXPR	1995:4	1995:4	9	TIFFSwabArrayOfLong8 ( * value , count )
FUNCTION_CALL	1995:4	1995:37	10	TIFFSwabArrayOfLong8 ( * value , count )
CALLEE	1995:4	1995:4	11	TIFFSwabArrayOfLong8
LEAF_NODE	1995:4	1995:4	12	TIFFSwabArrayOfLong8
LEAF_NODE	1995:24	1995:24	11	(
ARGUMENT	1995:25	1995:25	11	* value
UNARY_EXPR	1995:25	1995:26	12	* value
UNARY_OPERATOR	1995:25	1995:25	13	*
LEAF_NODE	1995:25	1995:25	14	*
FIELD	1995:26	1995:26	13	value
LEAF_NODE	1995:26	1995:26	14	value
LEAF_NODE	1995:31	1995:31	11	,
ARGUMENT	1995:32	1995:32	11	count
FIELD	1995:32	1995:32	12	count
LEAF_NODE	1995:32	1995:32	13	count
LEAF_NODE	1995:37	1995:37	11	)
LEAF_NODE	1995:38	1995:38	9	;
LEAF_NODE	1996:3	1996:3	6	return
LEAF_NODE	1996:9	1996:9	6	(
LEAF_NODE	1996:10	1996:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	1996:31	1996:31	6	)
LEAF_NODE	1996:32	1996:32	6	;
LABEL	1997:2	1997:18	6	case TIFF_SLONG8 :
LEAF_NODE	1997:2	1997:2	7	case
LEAF_NODE	1997:7	1997:7	7	TIFF_SLONG8
LEAF_NODE	1997:18	1997:18	7	:
LEAF_NODE	1998:3	1998:3	6	{
STATEMENTS	1999:4	2015:33	6	
SIMPLE_DECL	1999:4	1999:12	7	int64 * m ;
VAR_DECL	1999:4	1999:11	8	int64 * m
TYPE	1999:4	1999:9	9	int64 *
TYPE_NAME	1999:4	1999:4	10	int64
LEAF_NODE	1999:4	1999:4	11	int64
POINTER	1999:9	1999:9	10	*
LEAF_NODE	1999:9	1999:9	11	*
NAME	1999:11	1999:11	9	m
LEAF_NODE	1999:11	1999:11	10	m
LEAF_NODE	1999:12	1999:12	8	;
SIMPLE_DECL	2000:4	2000:12	7	uint32 n ;
VAR_DECL	2000:4	2000:11	8	uint32 n
TYPE	2000:4	2000:4	9	uint32
TYPE_NAME	2000:4	2000:4	10	uint32
LEAF_NODE	2000:4	2000:4	11	uint32
NAME	2000:11	2000:11	9	n
LEAF_NODE	2000:11	2000:11	10	n
LEAF_NODE	2000:12	2000:12	8	;
EXPR_STATEMENT	2001:4	2001:22	7	m = ( int64 * ) origdata ;
EXPR	2001:4	2001:4	8	m = ( int64 * ) origdata
ASSIGN	2001:4	2001:6	9	m = ( int64 * ) origdata
LVAL	2001:4	2001:4	10	m
FIELD	2001:4	2001:4	11	m
LEAF_NODE	2001:4	2001:4	12	m
ASSIGN_OP	2001:5	2001:5	10	=
LEAF_NODE	2001:5	2001:5	11	=
RVAL	2001:6	2001:14	10	( int64 * ) origdata
LEAF_NODE	2001:6	2001:6	11	(
TYPE_NAME	2001:7	2001:7	11	int64
LEAF_NODE	2001:7	2001:7	12	int64
LEAF_NODE	2001:12	2001:12	11	*
LEAF_NODE	2001:13	2001:13	11	)
FIELD	2001:14	2001:14	11	origdata
LEAF_NODE	2001:14	2001:14	12	origdata
LEAF_NODE	2001:22	2001:22	8	;
ITERATION	2002:4	2003:4	7	
KEYWORD	2002:4	2002:4	8	for
LEAF_NODE	2002:4	2002:4	9	for
LEAF_NODE	2002:8	2002:8	8	(
FOR_INIT	2002:9	2002:12	8	n = 0 ;
EXPR	2002:9	2002:9	9	n = 0
ASSIGN	2002:9	2002:11	10	n = 0
LVAL	2002:9	2002:9	11	n
FIELD	2002:9	2002:9	12	n
LEAF_NODE	2002:9	2002:9	13	n
ASSIGN_OP	2002:10	2002:10	11	=
LEAF_NODE	2002:10	2002:10	12	=
RVAL	2002:11	2002:11	11	0
FIELD	2002:11	2002:11	12	0
LEAF_NODE	2002:11	2002:11	13	0
LEAF_NODE	2002:12	2002:12	9	;
CONDITION	2002:14	2002:14	8	n < count
EXPR	2002:14	2002:16	9	n < count
FIELD	2002:14	2002:14	10	n
LEAF_NODE	2002:14	2002:14	11	n
REL_OPERATOR	2002:15	2002:15	10	<
LEAF_NODE	2002:15	2002:15	11	<
FIELD	2002:16	2002:16	10	count
LEAF_NODE	2002:16	2002:16	11	count
LEAF_NODE	2002:21	2002:21	8	;
FOR_EXPR	2002:23	2002:23	8	n ++
EXPR	2002:23	2002:23	9	n ++
FIELD	2002:23	2002:24	10	n ++
LEAF_NODE	2002:23	2002:23	11	n
LEAF_NODE	2002:24	2002:24	11	++
LEAF_NODE	2002:26	2002:26	8	)
STATEMENTS	2003:4	2013:4	8	
LEAF_NODE	2003:4	2003:4	9	{
STATEMENTS	2004:5	2012:5	9	
SELECTION	2004:5	2005:6	10	
KEYWORD	2004:5	2004:5	11	if
LEAF_NODE	2004:5	2004:5	12	if
LEAF_NODE	2004:8	2004:8	11	(
CONDITION	2004:9	2004:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2004:9	2004:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2004:9	2004:14	13	tif -> tif_flags
LEAF_NODE	2004:9	2004:9	14	tif
LEAF_NODE	2004:12	2004:12	14	->
LEAF_NODE	2004:14	2004:14	14	tif_flags
LEAF_NODE	2004:23	2004:23	13	&
FIELD	2004:24	2004:24	13	TIFF_SWAB
LEAF_NODE	2004:24	2004:24	14	TIFF_SWAB
LEAF_NODE	2004:33	2004:33	11	)
STATEMENTS	2005:6	2005:6	11	
EXPR_STATEMENT	2005:6	2005:31	12	TIFFSwabLong8 ( ( uint64 * ) m ) ;
EXPR	2005:6	2005:6	13	TIFFSwabLong8 ( ( uint64 * ) m )
FUNCTION_CALL	2005:6	2005:30	14	TIFFSwabLong8 ( ( uint64 * ) m )
CALLEE	2005:6	2005:6	15	TIFFSwabLong8
LEAF_NODE	2005:6	2005:6	16	TIFFSwabLong8
LEAF_NODE	2005:19	2005:19	15	(
ARGUMENT	2005:20	2005:29	15	( uint64 * ) m
LEAF_NODE	2005:20	2005:20	16	(
TYPE_NAME	2005:21	2005:21	16	uint64
LEAF_NODE	2005:21	2005:21	17	uint64
LEAF_NODE	2005:27	2005:27	16	*
LEAF_NODE	2005:28	2005:28	16	)
FIELD	2005:29	2005:29	16	m
LEAF_NODE	2005:29	2005:29	17	m
LEAF_NODE	2005:30	2005:30	15	)
LEAF_NODE	2005:31	2005:31	13	;
EXPR_STATEMENT	2006:5	2006:50	10	err = TIFFReadDirEntryCheckRangeLong8Slong8 ( * m ) ;
EXPR	2006:5	2006:5	11	err = TIFFReadDirEntryCheckRangeLong8Slong8 ( * m )
ASSIGN	2006:5	2006:9	12	err = TIFFReadDirEntryCheckRangeLong8Slong8 ( * m )
LVAL	2006:5	2006:5	13	err
FIELD	2006:5	2006:5	14	err
LEAF_NODE	2006:5	2006:5	15	err
ASSIGN_OP	2006:8	2006:8	13	=
LEAF_NODE	2006:8	2006:8	14	=
RVAL	2006:9	2006:9	13	TIFFReadDirEntryCheckRangeLong8Slong8 ( * m )
FUNCTION_CALL	2006:9	2006:49	14	TIFFReadDirEntryCheckRangeLong8Slong8 ( * m )
CALLEE	2006:9	2006:9	15	TIFFReadDirEntryCheckRangeLong8Slong8
LEAF_NODE	2006:9	2006:9	16	TIFFReadDirEntryCheckRangeLong8Slong8
LEAF_NODE	2006:46	2006:46	15	(
ARGUMENT	2006:47	2006:47	15	* m
UNARY_EXPR	2006:47	2006:48	16	* m
UNARY_OPERATOR	2006:47	2006:47	17	*
LEAF_NODE	2006:47	2006:47	18	*
FIELD	2006:48	2006:48	17	m
LEAF_NODE	2006:48	2006:48	18	m
LEAF_NODE	2006:49	2006:49	15	)
LEAF_NODE	2006:50	2006:50	11	;
SELECTION	2007:5	2008:5	10	
KEYWORD	2007:5	2007:5	11	if
LEAF_NODE	2007:5	2007:5	12	if
LEAF_NODE	2007:8	2007:8	11	(
CONDITION	2007:9	2007:9	11	err != TIFFReadDirEntryErrOk
EXPR	2007:9	2007:14	12	err != TIFFReadDirEntryErrOk
FIELD	2007:9	2007:9	13	err
LEAF_NODE	2007:9	2007:9	14	err
EQ_OPERATOR	2007:12	2007:12	13	!=
LEAF_NODE	2007:12	2007:12	14	!=
FIELD	2007:14	2007:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	2007:14	2007:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	2007:35	2007:35	11	)
STATEMENTS	2008:5	2011:5	11	
LEAF_NODE	2008:5	2008:5	12	{
STATEMENTS	2009:6	2010:17	12	
EXPR_STATEMENT	2009:6	2009:25	13	_TIFFfree ( origdata ) ;
EXPR	2009:6	2009:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	2009:6	2009:24	15	_TIFFfree ( origdata )
CALLEE	2009:6	2009:6	16	_TIFFfree
LEAF_NODE	2009:6	2009:6	17	_TIFFfree
LEAF_NODE	2009:15	2009:15	16	(
ARGUMENT	2009:16	2009:16	16	origdata
FIELD	2009:16	2009:16	17	origdata
LEAF_NODE	2009:16	2009:16	18	origdata
LEAF_NODE	2009:24	2009:24	16	)
LEAF_NODE	2009:25	2009:25	14	;
LEAF_NODE	2010:6	2010:6	13	return
LEAF_NODE	2010:12	2010:12	13	(
LEAF_NODE	2010:13	2010:13	13	err
LEAF_NODE	2010:16	2010:16	13	)
LEAF_NODE	2010:17	2010:17	13	;
LEAF_NODE	2011:5	2011:5	12	}
EXPR_STATEMENT	2012:5	2012:8	10	m ++ ;
EXPR	2012:5	2012:5	11	m ++
FIELD	2012:5	2012:6	12	m ++
LEAF_NODE	2012:5	2012:5	13	m
LEAF_NODE	2012:6	2012:6	13	++
LEAF_NODE	2012:8	2012:8	11	;
LEAF_NODE	2013:4	2013:4	9	}
EXPR_STATEMENT	2014:4	2014:28	7	* value = ( uint64 * ) origdata ;
EXPR	2014:4	2014:4	8	* value = ( uint64 * ) origdata
ASSIGN	2014:4	2014:11	9	* value = ( uint64 * ) origdata
LVAL	2014:4	2014:4	10	* value
UNARY_EXPR	2014:4	2014:5	11	* value
UNARY_OPERATOR	2014:4	2014:4	12	*
LEAF_NODE	2014:4	2014:4	13	*
FIELD	2014:5	2014:5	12	value
LEAF_NODE	2014:5	2014:5	13	value
ASSIGN_OP	2014:10	2014:10	10	=
LEAF_NODE	2014:10	2014:10	11	=
RVAL	2014:11	2014:20	10	( uint64 * ) origdata
LEAF_NODE	2014:11	2014:11	11	(
TYPE_NAME	2014:12	2014:12	11	uint64
LEAF_NODE	2014:12	2014:12	12	uint64
LEAF_NODE	2014:18	2014:18	11	*
LEAF_NODE	2014:19	2014:19	11	)
FIELD	2014:20	2014:20	11	origdata
LEAF_NODE	2014:20	2014:20	12	origdata
LEAF_NODE	2014:28	2014:28	8	;
LEAF_NODE	2015:4	2015:4	7	return
LEAF_NODE	2015:10	2015:10	7	(
LEAF_NODE	2015:11	2015:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	2015:32	2015:32	7	)
LEAF_NODE	2015:33	2015:33	7	;
LEAF_NODE	2016:3	2016:3	6	}
LEAF_NODE	2017:1	2017:1	5	}
EXPR_STATEMENT	2018:1	2018:35	3	data = ( uint64 * ) _TIFFmalloc ( count * 8 ) ;
EXPR	2018:1	2018:1	4	data = ( uint64 * ) _TIFFmalloc ( count * 8 )
ASSIGN	2018:1	2018:6	5	data = ( uint64 * ) _TIFFmalloc ( count * 8 )
LVAL	2018:1	2018:1	6	data
FIELD	2018:1	2018:1	7	data
LEAF_NODE	2018:1	2018:1	8	data
ASSIGN_OP	2018:5	2018:5	6	=
LEAF_NODE	2018:5	2018:5	7	=
RVAL	2018:6	2018:15	6	( uint64 * ) _TIFFmalloc ( count * 8 )
LEAF_NODE	2018:6	2018:6	7	(
TYPE_NAME	2018:7	2018:7	7	uint64
LEAF_NODE	2018:7	2018:7	8	uint64
LEAF_NODE	2018:13	2018:13	7	*
LEAF_NODE	2018:14	2018:14	7	)
FUNCTION_CALL	2018:15	2018:34	7	_TIFFmalloc ( count * 8 )
CALLEE	2018:15	2018:15	8	_TIFFmalloc
LEAF_NODE	2018:15	2018:15	9	_TIFFmalloc
LEAF_NODE	2018:26	2018:26	8	(
ARGUMENT	2018:27	2018:33	8	count * 8
FIELD	2018:27	2018:27	9	count
LEAF_NODE	2018:27	2018:27	10	count
LEAF_NODE	2018:32	2018:32	9	*
FIELD	2018:33	2018:33	9	8
LEAF_NODE	2018:33	2018:33	10	8
LEAF_NODE	2018:34	2018:34	8	)
LEAF_NODE	2018:35	2018:35	4	;
SELECTION	2019:1	2020:1	3	
KEYWORD	2019:1	2019:1	4	if
LEAF_NODE	2019:1	2019:1	5	if
LEAF_NODE	2019:4	2019:4	4	(
CONDITION	2019:5	2019:5	4	data == 0
EXPR	2019:5	2019:11	5	data == 0
FIELD	2019:5	2019:5	6	data
LEAF_NODE	2019:5	2019:5	7	data
EQ_OPERATOR	2019:9	2019:9	6	==
LEAF_NODE	2019:9	2019:9	7	==
FIELD	2019:11	2019:11	6	0
LEAF_NODE	2019:11	2019:11	7	0
LEAF_NODE	2019:12	2019:12	4	)
STATEMENTS	2020:1	2023:1	4	
LEAF_NODE	2020:1	2020:1	5	{
STATEMENTS	2021:2	2022:34	5	
EXPR_STATEMENT	2021:2	2021:21	6	_TIFFfree ( origdata ) ;
EXPR	2021:2	2021:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	2021:2	2021:20	8	_TIFFfree ( origdata )
CALLEE	2021:2	2021:2	9	_TIFFfree
LEAF_NODE	2021:2	2021:2	10	_TIFFfree
LEAF_NODE	2021:11	2021:11	9	(
ARGUMENT	2021:12	2021:12	9	origdata
FIELD	2021:12	2021:12	10	origdata
LEAF_NODE	2021:12	2021:12	11	origdata
LEAF_NODE	2021:20	2021:20	9	)
LEAF_NODE	2021:21	2021:21	7	;
LEAF_NODE	2022:2	2022:2	6	return
LEAF_NODE	2022:8	2022:8	6	(
LEAF_NODE	2022:9	2022:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	2022:33	2022:33	6	)
LEAF_NODE	2022:34	2022:34	6	;
LEAF_NODE	2023:1	2023:1	5	}
SELECTION	2024:1	2025:1	3	
KEYWORD	2024:1	2024:1	4	switch
LEAF_NODE	2024:1	2024:1	5	switch
LEAF_NODE	2024:8	2024:8	4	(
CONDITION	2024:9	2024:9	4	direntry -> tdir_type
EXPR	2024:9	2024:9	5	direntry -> tdir_type
FIELD	2024:9	2024:19	6	direntry -> tdir_type
LEAF_NODE	2024:9	2024:9	7	direntry
LEAF_NODE	2024:17	2024:17	7	->
LEAF_NODE	2024:19	2024:19	7	tdir_type
LEAF_NODE	2024:28	2024:28	4	)
STATEMENTS	2025:1	2119:1	4	
LEAF_NODE	2025:1	2025:1	5	{
STATEMENTS	2026:2	2118:3	5	
LABEL	2026:2	2026:16	6	case TIFF_BYTE :
LEAF_NODE	2026:2	2026:2	7	case
LEAF_NODE	2026:7	2026:7	7	TIFF_BYTE
LEAF_NODE	2026:16	2026:16	7	:
LEAF_NODE	2027:3	2027:3	6	{
STATEMENTS	2028:4	2033:4	6	
SIMPLE_DECL	2028:4	2028:13	7	uint8 * ma ;
VAR_DECL	2028:4	2028:11	8	uint8 * ma
TYPE	2028:4	2028:9	9	uint8 *
TYPE_NAME	2028:4	2028:4	10	uint8
LEAF_NODE	2028:4	2028:4	11	uint8
POINTER	2028:9	2028:9	10	*
LEAF_NODE	2028:9	2028:9	11	*
NAME	2028:11	2028:11	9	ma
LEAF_NODE	2028:11	2028:11	10	ma
LEAF_NODE	2028:13	2028:13	8	;
SIMPLE_DECL	2029:4	2029:14	7	uint64 * mb ;
VAR_DECL	2029:4	2029:12	8	uint64 * mb
TYPE	2029:4	2029:10	9	uint64 *
TYPE_NAME	2029:4	2029:4	10	uint64
LEAF_NODE	2029:4	2029:4	11	uint64
POINTER	2029:10	2029:10	10	*
LEAF_NODE	2029:10	2029:10	11	*
NAME	2029:12	2029:12	9	mb
LEAF_NODE	2029:12	2029:12	10	mb
LEAF_NODE	2029:14	2029:14	8	;
SIMPLE_DECL	2030:4	2030:12	7	uint32 n ;
VAR_DECL	2030:4	2030:11	8	uint32 n
TYPE	2030:4	2030:4	9	uint32
TYPE_NAME	2030:4	2030:4	10	uint32
LEAF_NODE	2030:4	2030:4	11	uint32
NAME	2030:11	2030:11	9	n
LEAF_NODE	2030:11	2030:11	10	n
LEAF_NODE	2030:12	2030:12	8	;
EXPR_STATEMENT	2031:4	2031:23	7	ma = ( uint8 * ) origdata ;
EXPR	2031:4	2031:4	8	ma = ( uint8 * ) origdata
ASSIGN	2031:4	2031:7	9	ma = ( uint8 * ) origdata
LVAL	2031:4	2031:4	10	ma
FIELD	2031:4	2031:4	11	ma
LEAF_NODE	2031:4	2031:4	12	ma
ASSIGN_OP	2031:6	2031:6	10	=
LEAF_NODE	2031:6	2031:6	11	=
RVAL	2031:7	2031:15	10	( uint8 * ) origdata
LEAF_NODE	2031:7	2031:7	11	(
TYPE_NAME	2031:8	2031:8	11	uint8
LEAF_NODE	2031:8	2031:8	12	uint8
LEAF_NODE	2031:13	2031:13	11	*
LEAF_NODE	2031:14	2031:14	11	)
FIELD	2031:15	2031:15	11	origdata
LEAF_NODE	2031:15	2031:15	12	origdata
LEAF_NODE	2031:23	2031:23	8	;
EXPR_STATEMENT	2032:4	2032:11	7	mb = data ;
EXPR	2032:4	2032:4	8	mb = data
ASSIGN	2032:4	2032:7	9	mb = data
LVAL	2032:4	2032:4	10	mb
FIELD	2032:4	2032:4	11	mb
LEAF_NODE	2032:4	2032:4	12	mb
ASSIGN_OP	2032:6	2032:6	10	=
LEAF_NODE	2032:6	2032:6	11	=
RVAL	2032:7	2032:7	10	data
FIELD	2032:7	2032:7	11	data
LEAF_NODE	2032:7	2032:7	12	data
LEAF_NODE	2032:11	2032:11	8	;
ITERATION	2033:4	2034:5	7	
KEYWORD	2033:4	2033:4	8	for
LEAF_NODE	2033:4	2033:4	9	for
LEAF_NODE	2033:8	2033:8	8	(
FOR_INIT	2033:9	2033:12	8	n = 0 ;
EXPR	2033:9	2033:9	9	n = 0
ASSIGN	2033:9	2033:11	10	n = 0
LVAL	2033:9	2033:9	11	n
FIELD	2033:9	2033:9	12	n
LEAF_NODE	2033:9	2033:9	13	n
ASSIGN_OP	2033:10	2033:10	11	=
LEAF_NODE	2033:10	2033:10	12	=
RVAL	2033:11	2033:11	11	0
FIELD	2033:11	2033:11	12	0
LEAF_NODE	2033:11	2033:11	13	0
LEAF_NODE	2033:12	2033:12	9	;
CONDITION	2033:14	2033:14	8	n < count
EXPR	2033:14	2033:16	9	n < count
FIELD	2033:14	2033:14	10	n
LEAF_NODE	2033:14	2033:14	11	n
REL_OPERATOR	2033:15	2033:15	10	<
LEAF_NODE	2033:15	2033:15	11	<
FIELD	2033:16	2033:16	10	count
LEAF_NODE	2033:16	2033:16	11	count
LEAF_NODE	2033:21	2033:21	8	;
FOR_EXPR	2033:23	2033:23	8	n ++
EXPR	2033:23	2033:23	9	n ++
FIELD	2033:23	2033:24	10	n ++
LEAF_NODE	2033:23	2033:23	11	n
LEAF_NODE	2033:24	2033:24	11	++
LEAF_NODE	2033:26	2033:26	8	)
STATEMENTS	2034:5	2034:5	8	
EXPR_STATEMENT	2034:5	2034:26	9	* mb ++ = ( uint64 ) ( * ma ++ ) ;
EXPR	2034:5	2034:5	10	* mb ++ = ( uint64 ) ( * ma ++ )
ASSIGN	2034:5	2034:11	11	* mb ++ = ( uint64 ) ( * ma ++ )
LVAL	2034:5	2034:5	12	* mb ++
UNARY_EXPR	2034:5	2034:6	13	* mb ++
UNARY_OPERATOR	2034:5	2034:5	14	*
LEAF_NODE	2034:5	2034:5	15	*
FIELD	2034:6	2034:8	14	mb ++
LEAF_NODE	2034:6	2034:6	15	mb
LEAF_NODE	2034:8	2034:8	15	++
ASSIGN_OP	2034:10	2034:10	12	=
LEAF_NODE	2034:10	2034:10	13	=
RVAL	2034:11	2034:25	12	( uint64 ) ( * ma ++ )
LEAF_NODE	2034:11	2034:11	13	(
TYPE_NAME	2034:12	2034:12	13	uint64
LEAF_NODE	2034:12	2034:12	14	uint64
LEAF_NODE	2034:18	2034:18	13	)
LEAF_NODE	2034:19	2034:19	13	(
UNARY_EXPR	2034:20	2034:21	13	* ma ++
UNARY_OPERATOR	2034:20	2034:20	14	*
LEAF_NODE	2034:20	2034:20	15	*
FIELD	2034:21	2034:23	14	ma ++
LEAF_NODE	2034:21	2034:21	15	ma
LEAF_NODE	2034:23	2034:23	15	++
LEAF_NODE	2034:25	2034:25	13	)
LEAF_NODE	2034:26	2034:26	10	;
LEAF_NODE	2035:3	2035:3	6	}
JUMP_STATEMENT	2036:3	2036:8	6	break DESTINATION ;
KEYWORD	2036:3	2036:3	7	break
LEAF_NODE	2036:3	2036:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2036:8	2036:8	7	;
LABEL	2037:2	2037:17	6	case TIFF_SBYTE :
LEAF_NODE	2037:2	2037:2	7	case
LEAF_NODE	2037:7	2037:7	7	TIFF_SBYTE
LEAF_NODE	2037:17	2037:17	7	:
LEAF_NODE	2038:3	2038:3	6	{
STATEMENTS	2039:4	2044:4	6	
SIMPLE_DECL	2039:4	2039:12	7	int8 * ma ;
VAR_DECL	2039:4	2039:10	8	int8 * ma
TYPE	2039:4	2039:8	9	int8 *
TYPE_NAME	2039:4	2039:4	10	int8
LEAF_NODE	2039:4	2039:4	11	int8
POINTER	2039:8	2039:8	10	*
LEAF_NODE	2039:8	2039:8	11	*
NAME	2039:10	2039:10	9	ma
LEAF_NODE	2039:10	2039:10	10	ma
LEAF_NODE	2039:12	2039:12	8	;
SIMPLE_DECL	2040:4	2040:14	7	uint64 * mb ;
VAR_DECL	2040:4	2040:12	8	uint64 * mb
TYPE	2040:4	2040:10	9	uint64 *
TYPE_NAME	2040:4	2040:4	10	uint64
LEAF_NODE	2040:4	2040:4	11	uint64
POINTER	2040:10	2040:10	10	*
LEAF_NODE	2040:10	2040:10	11	*
NAME	2040:12	2040:12	9	mb
LEAF_NODE	2040:12	2040:12	10	mb
LEAF_NODE	2040:14	2040:14	8	;
SIMPLE_DECL	2041:4	2041:12	7	uint32 n ;
VAR_DECL	2041:4	2041:11	8	uint32 n
TYPE	2041:4	2041:4	9	uint32
TYPE_NAME	2041:4	2041:4	10	uint32
LEAF_NODE	2041:4	2041:4	11	uint32
NAME	2041:11	2041:11	9	n
LEAF_NODE	2041:11	2041:11	10	n
LEAF_NODE	2041:12	2041:12	8	;
EXPR_STATEMENT	2042:4	2042:22	7	ma = ( int8 * ) origdata ;
EXPR	2042:4	2042:4	8	ma = ( int8 * ) origdata
ASSIGN	2042:4	2042:7	9	ma = ( int8 * ) origdata
LVAL	2042:4	2042:4	10	ma
FIELD	2042:4	2042:4	11	ma
LEAF_NODE	2042:4	2042:4	12	ma
ASSIGN_OP	2042:6	2042:6	10	=
LEAF_NODE	2042:6	2042:6	11	=
RVAL	2042:7	2042:14	10	( int8 * ) origdata
LEAF_NODE	2042:7	2042:7	11	(
TYPE_NAME	2042:8	2042:8	11	int8
LEAF_NODE	2042:8	2042:8	12	int8
LEAF_NODE	2042:12	2042:12	11	*
LEAF_NODE	2042:13	2042:13	11	)
FIELD	2042:14	2042:14	11	origdata
LEAF_NODE	2042:14	2042:14	12	origdata
LEAF_NODE	2042:22	2042:22	8	;
EXPR_STATEMENT	2043:4	2043:11	7	mb = data ;
EXPR	2043:4	2043:4	8	mb = data
ASSIGN	2043:4	2043:7	9	mb = data
LVAL	2043:4	2043:4	10	mb
FIELD	2043:4	2043:4	11	mb
LEAF_NODE	2043:4	2043:4	12	mb
ASSIGN_OP	2043:6	2043:6	10	=
LEAF_NODE	2043:6	2043:6	11	=
RVAL	2043:7	2043:7	10	data
FIELD	2043:7	2043:7	11	data
LEAF_NODE	2043:7	2043:7	12	data
LEAF_NODE	2043:11	2043:11	8	;
ITERATION	2044:4	2045:4	7	
KEYWORD	2044:4	2044:4	8	for
LEAF_NODE	2044:4	2044:4	9	for
LEAF_NODE	2044:8	2044:8	8	(
FOR_INIT	2044:9	2044:12	8	n = 0 ;
EXPR	2044:9	2044:9	9	n = 0
ASSIGN	2044:9	2044:11	10	n = 0
LVAL	2044:9	2044:9	11	n
FIELD	2044:9	2044:9	12	n
LEAF_NODE	2044:9	2044:9	13	n
ASSIGN_OP	2044:10	2044:10	11	=
LEAF_NODE	2044:10	2044:10	12	=
RVAL	2044:11	2044:11	11	0
FIELD	2044:11	2044:11	12	0
LEAF_NODE	2044:11	2044:11	13	0
LEAF_NODE	2044:12	2044:12	9	;
CONDITION	2044:14	2044:14	8	n < count
EXPR	2044:14	2044:16	9	n < count
FIELD	2044:14	2044:14	10	n
LEAF_NODE	2044:14	2044:14	11	n
REL_OPERATOR	2044:15	2044:15	10	<
LEAF_NODE	2044:15	2044:15	11	<
FIELD	2044:16	2044:16	10	count
LEAF_NODE	2044:16	2044:16	11	count
LEAF_NODE	2044:21	2044:21	8	;
FOR_EXPR	2044:23	2044:23	8	n ++
EXPR	2044:23	2044:23	9	n ++
FIELD	2044:23	2044:24	10	n ++
LEAF_NODE	2044:23	2044:23	11	n
LEAF_NODE	2044:24	2044:24	11	++
LEAF_NODE	2044:26	2044:26	8	)
STATEMENTS	2045:4	2050:4	8	
LEAF_NODE	2045:4	2045:4	9	{
STATEMENTS	2046:5	2049:5	9	
EXPR_STATEMENT	2046:5	2046:50	10	err = TIFFReadDirEntryCheckRangeLong8Sbyte ( * ma ) ;
EXPR	2046:5	2046:5	11	err = TIFFReadDirEntryCheckRangeLong8Sbyte ( * ma )
ASSIGN	2046:5	2046:9	12	err = TIFFReadDirEntryCheckRangeLong8Sbyte ( * ma )
LVAL	2046:5	2046:5	13	err
FIELD	2046:5	2046:5	14	err
LEAF_NODE	2046:5	2046:5	15	err
ASSIGN_OP	2046:8	2046:8	13	=
LEAF_NODE	2046:8	2046:8	14	=
RVAL	2046:9	2046:9	13	TIFFReadDirEntryCheckRangeLong8Sbyte ( * ma )
FUNCTION_CALL	2046:9	2046:49	14	TIFFReadDirEntryCheckRangeLong8Sbyte ( * ma )
CALLEE	2046:9	2046:9	15	TIFFReadDirEntryCheckRangeLong8Sbyte
LEAF_NODE	2046:9	2046:9	16	TIFFReadDirEntryCheckRangeLong8Sbyte
LEAF_NODE	2046:45	2046:45	15	(
ARGUMENT	2046:46	2046:46	15	* ma
UNARY_EXPR	2046:46	2046:47	16	* ma
UNARY_OPERATOR	2046:46	2046:46	17	*
LEAF_NODE	2046:46	2046:46	18	*
FIELD	2046:47	2046:47	17	ma
LEAF_NODE	2046:47	2046:47	18	ma
LEAF_NODE	2046:49	2046:49	15	)
LEAF_NODE	2046:50	2046:50	11	;
SELECTION	2047:5	2048:6	10	
KEYWORD	2047:5	2047:5	11	if
LEAF_NODE	2047:5	2047:5	12	if
LEAF_NODE	2047:8	2047:8	11	(
CONDITION	2047:9	2047:9	11	err != TIFFReadDirEntryErrOk
EXPR	2047:9	2047:14	12	err != TIFFReadDirEntryErrOk
FIELD	2047:9	2047:9	13	err
LEAF_NODE	2047:9	2047:9	14	err
EQ_OPERATOR	2047:12	2047:12	13	!=
LEAF_NODE	2047:12	2047:12	14	!=
FIELD	2047:14	2047:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	2047:14	2047:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	2047:35	2047:35	11	)
STATEMENTS	2048:6	2048:6	11	
JUMP_STATEMENT	2048:6	2048:11	12	break DESTINATION ;
KEYWORD	2048:6	2048:6	13	break
LEAF_NODE	2048:6	2048:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2048:11	2048:11	13	;
EXPR_STATEMENT	2049:5	2049:26	10	* mb ++ = ( uint64 ) ( * ma ++ ) ;
EXPR	2049:5	2049:5	11	* mb ++ = ( uint64 ) ( * ma ++ )
ASSIGN	2049:5	2049:11	12	* mb ++ = ( uint64 ) ( * ma ++ )
LVAL	2049:5	2049:5	13	* mb ++
UNARY_EXPR	2049:5	2049:6	14	* mb ++
UNARY_OPERATOR	2049:5	2049:5	15	*
LEAF_NODE	2049:5	2049:5	16	*
FIELD	2049:6	2049:8	15	mb ++
LEAF_NODE	2049:6	2049:6	16	mb
LEAF_NODE	2049:8	2049:8	16	++
ASSIGN_OP	2049:10	2049:10	13	=
LEAF_NODE	2049:10	2049:10	14	=
RVAL	2049:11	2049:25	13	( uint64 ) ( * ma ++ )
LEAF_NODE	2049:11	2049:11	14	(
TYPE_NAME	2049:12	2049:12	14	uint64
LEAF_NODE	2049:12	2049:12	15	uint64
LEAF_NODE	2049:18	2049:18	14	)
LEAF_NODE	2049:19	2049:19	14	(
UNARY_EXPR	2049:20	2049:21	14	* ma ++
UNARY_OPERATOR	2049:20	2049:20	15	*
LEAF_NODE	2049:20	2049:20	16	*
FIELD	2049:21	2049:23	15	ma ++
LEAF_NODE	2049:21	2049:21	16	ma
LEAF_NODE	2049:23	2049:23	16	++
LEAF_NODE	2049:25	2049:25	14	)
LEAF_NODE	2049:26	2049:26	11	;
LEAF_NODE	2050:4	2050:4	9	}
LEAF_NODE	2051:3	2051:3	6	}
JUMP_STATEMENT	2052:3	2052:8	6	break DESTINATION ;
KEYWORD	2052:3	2052:3	7	break
LEAF_NODE	2052:3	2052:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2052:8	2052:8	7	;
LABEL	2053:2	2053:17	6	case TIFF_SHORT :
LEAF_NODE	2053:2	2053:2	7	case
LEAF_NODE	2053:7	2053:7	7	TIFF_SHORT
LEAF_NODE	2053:17	2053:17	7	:
LEAF_NODE	2054:3	2054:3	6	{
STATEMENTS	2055:4	2060:4	6	
SIMPLE_DECL	2055:4	2055:14	7	uint16 * ma ;
VAR_DECL	2055:4	2055:12	8	uint16 * ma
TYPE	2055:4	2055:10	9	uint16 *
TYPE_NAME	2055:4	2055:4	10	uint16
LEAF_NODE	2055:4	2055:4	11	uint16
POINTER	2055:10	2055:10	10	*
LEAF_NODE	2055:10	2055:10	11	*
NAME	2055:12	2055:12	9	ma
LEAF_NODE	2055:12	2055:12	10	ma
LEAF_NODE	2055:14	2055:14	8	;
SIMPLE_DECL	2056:4	2056:14	7	uint64 * mb ;
VAR_DECL	2056:4	2056:12	8	uint64 * mb
TYPE	2056:4	2056:10	9	uint64 *
TYPE_NAME	2056:4	2056:4	10	uint64
LEAF_NODE	2056:4	2056:4	11	uint64
POINTER	2056:10	2056:10	10	*
LEAF_NODE	2056:10	2056:10	11	*
NAME	2056:12	2056:12	9	mb
LEAF_NODE	2056:12	2056:12	10	mb
LEAF_NODE	2056:14	2056:14	8	;
SIMPLE_DECL	2057:4	2057:12	7	uint32 n ;
VAR_DECL	2057:4	2057:11	8	uint32 n
TYPE	2057:4	2057:4	9	uint32
TYPE_NAME	2057:4	2057:4	10	uint32
LEAF_NODE	2057:4	2057:4	11	uint32
NAME	2057:11	2057:11	9	n
LEAF_NODE	2057:11	2057:11	10	n
LEAF_NODE	2057:12	2057:12	8	;
EXPR_STATEMENT	2058:4	2058:24	7	ma = ( uint16 * ) origdata ;
EXPR	2058:4	2058:4	8	ma = ( uint16 * ) origdata
ASSIGN	2058:4	2058:7	9	ma = ( uint16 * ) origdata
LVAL	2058:4	2058:4	10	ma
FIELD	2058:4	2058:4	11	ma
LEAF_NODE	2058:4	2058:4	12	ma
ASSIGN_OP	2058:6	2058:6	10	=
LEAF_NODE	2058:6	2058:6	11	=
RVAL	2058:7	2058:16	10	( uint16 * ) origdata
LEAF_NODE	2058:7	2058:7	11	(
TYPE_NAME	2058:8	2058:8	11	uint16
LEAF_NODE	2058:8	2058:8	12	uint16
LEAF_NODE	2058:14	2058:14	11	*
LEAF_NODE	2058:15	2058:15	11	)
FIELD	2058:16	2058:16	11	origdata
LEAF_NODE	2058:16	2058:16	12	origdata
LEAF_NODE	2058:24	2058:24	8	;
EXPR_STATEMENT	2059:4	2059:11	7	mb = data ;
EXPR	2059:4	2059:4	8	mb = data
ASSIGN	2059:4	2059:7	9	mb = data
LVAL	2059:4	2059:4	10	mb
FIELD	2059:4	2059:4	11	mb
LEAF_NODE	2059:4	2059:4	12	mb
ASSIGN_OP	2059:6	2059:6	10	=
LEAF_NODE	2059:6	2059:6	11	=
RVAL	2059:7	2059:7	10	data
FIELD	2059:7	2059:7	11	data
LEAF_NODE	2059:7	2059:7	12	data
LEAF_NODE	2059:11	2059:11	8	;
ITERATION	2060:4	2061:4	7	
KEYWORD	2060:4	2060:4	8	for
LEAF_NODE	2060:4	2060:4	9	for
LEAF_NODE	2060:8	2060:8	8	(
FOR_INIT	2060:9	2060:12	8	n = 0 ;
EXPR	2060:9	2060:9	9	n = 0
ASSIGN	2060:9	2060:11	10	n = 0
LVAL	2060:9	2060:9	11	n
FIELD	2060:9	2060:9	12	n
LEAF_NODE	2060:9	2060:9	13	n
ASSIGN_OP	2060:10	2060:10	11	=
LEAF_NODE	2060:10	2060:10	12	=
RVAL	2060:11	2060:11	11	0
FIELD	2060:11	2060:11	12	0
LEAF_NODE	2060:11	2060:11	13	0
LEAF_NODE	2060:12	2060:12	9	;
CONDITION	2060:14	2060:14	8	n < count
EXPR	2060:14	2060:16	9	n < count
FIELD	2060:14	2060:14	10	n
LEAF_NODE	2060:14	2060:14	11	n
REL_OPERATOR	2060:15	2060:15	10	<
LEAF_NODE	2060:15	2060:15	11	<
FIELD	2060:16	2060:16	10	count
LEAF_NODE	2060:16	2060:16	11	count
LEAF_NODE	2060:21	2060:21	8	;
FOR_EXPR	2060:23	2060:23	8	n ++
EXPR	2060:23	2060:23	9	n ++
FIELD	2060:23	2060:24	10	n ++
LEAF_NODE	2060:23	2060:23	11	n
LEAF_NODE	2060:24	2060:24	11	++
LEAF_NODE	2060:26	2060:26	8	)
STATEMENTS	2061:4	2065:4	8	
LEAF_NODE	2061:4	2061:4	9	{
STATEMENTS	2062:5	2064:5	9	
SELECTION	2062:5	2063:6	10	
KEYWORD	2062:5	2062:5	11	if
LEAF_NODE	2062:5	2062:5	12	if
LEAF_NODE	2062:8	2062:8	11	(
CONDITION	2062:9	2062:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2062:9	2062:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2062:9	2062:14	13	tif -> tif_flags
LEAF_NODE	2062:9	2062:9	14	tif
LEAF_NODE	2062:12	2062:12	14	->
LEAF_NODE	2062:14	2062:14	14	tif_flags
LEAF_NODE	2062:23	2062:23	13	&
FIELD	2062:24	2062:24	13	TIFF_SWAB
LEAF_NODE	2062:24	2062:24	14	TIFF_SWAB
LEAF_NODE	2062:33	2062:33	11	)
STATEMENTS	2063:6	2063:6	11	
EXPR_STATEMENT	2063:6	2063:23	12	TIFFSwabShort ( ma ) ;
EXPR	2063:6	2063:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	2063:6	2063:22	14	TIFFSwabShort ( ma )
CALLEE	2063:6	2063:6	15	TIFFSwabShort
LEAF_NODE	2063:6	2063:6	16	TIFFSwabShort
LEAF_NODE	2063:19	2063:19	15	(
ARGUMENT	2063:20	2063:20	15	ma
FIELD	2063:20	2063:20	16	ma
LEAF_NODE	2063:20	2063:20	17	ma
LEAF_NODE	2063:22	2063:22	15	)
LEAF_NODE	2063:23	2063:23	13	;
EXPR_STATEMENT	2064:5	2064:26	10	* mb ++ = ( uint64 ) ( * ma ++ ) ;
EXPR	2064:5	2064:5	11	* mb ++ = ( uint64 ) ( * ma ++ )
ASSIGN	2064:5	2064:11	12	* mb ++ = ( uint64 ) ( * ma ++ )
LVAL	2064:5	2064:5	13	* mb ++
UNARY_EXPR	2064:5	2064:6	14	* mb ++
UNARY_OPERATOR	2064:5	2064:5	15	*
LEAF_NODE	2064:5	2064:5	16	*
FIELD	2064:6	2064:8	15	mb ++
LEAF_NODE	2064:6	2064:6	16	mb
LEAF_NODE	2064:8	2064:8	16	++
ASSIGN_OP	2064:10	2064:10	13	=
LEAF_NODE	2064:10	2064:10	14	=
RVAL	2064:11	2064:25	13	( uint64 ) ( * ma ++ )
LEAF_NODE	2064:11	2064:11	14	(
TYPE_NAME	2064:12	2064:12	14	uint64
LEAF_NODE	2064:12	2064:12	15	uint64
LEAF_NODE	2064:18	2064:18	14	)
LEAF_NODE	2064:19	2064:19	14	(
UNARY_EXPR	2064:20	2064:21	14	* ma ++
UNARY_OPERATOR	2064:20	2064:20	15	*
LEAF_NODE	2064:20	2064:20	16	*
FIELD	2064:21	2064:23	15	ma ++
LEAF_NODE	2064:21	2064:21	16	ma
LEAF_NODE	2064:23	2064:23	16	++
LEAF_NODE	2064:25	2064:25	14	)
LEAF_NODE	2064:26	2064:26	11	;
LEAF_NODE	2065:4	2065:4	9	}
LEAF_NODE	2066:3	2066:3	6	}
JUMP_STATEMENT	2067:3	2067:8	6	break DESTINATION ;
KEYWORD	2067:3	2067:3	7	break
LEAF_NODE	2067:3	2067:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2067:8	2067:8	7	;
LABEL	2068:2	2068:18	6	case TIFF_SSHORT :
LEAF_NODE	2068:2	2068:2	7	case
LEAF_NODE	2068:7	2068:7	7	TIFF_SSHORT
LEAF_NODE	2068:18	2068:18	7	:
LEAF_NODE	2069:3	2069:3	6	{
STATEMENTS	2070:4	2075:4	6	
SIMPLE_DECL	2070:4	2070:13	7	int16 * ma ;
VAR_DECL	2070:4	2070:11	8	int16 * ma
TYPE	2070:4	2070:9	9	int16 *
TYPE_NAME	2070:4	2070:4	10	int16
LEAF_NODE	2070:4	2070:4	11	int16
POINTER	2070:9	2070:9	10	*
LEAF_NODE	2070:9	2070:9	11	*
NAME	2070:11	2070:11	9	ma
LEAF_NODE	2070:11	2070:11	10	ma
LEAF_NODE	2070:13	2070:13	8	;
SIMPLE_DECL	2071:4	2071:14	7	uint64 * mb ;
VAR_DECL	2071:4	2071:12	8	uint64 * mb
TYPE	2071:4	2071:10	9	uint64 *
TYPE_NAME	2071:4	2071:4	10	uint64
LEAF_NODE	2071:4	2071:4	11	uint64
POINTER	2071:10	2071:10	10	*
LEAF_NODE	2071:10	2071:10	11	*
NAME	2071:12	2071:12	9	mb
LEAF_NODE	2071:12	2071:12	10	mb
LEAF_NODE	2071:14	2071:14	8	;
SIMPLE_DECL	2072:4	2072:12	7	uint32 n ;
VAR_DECL	2072:4	2072:11	8	uint32 n
TYPE	2072:4	2072:4	9	uint32
TYPE_NAME	2072:4	2072:4	10	uint32
LEAF_NODE	2072:4	2072:4	11	uint32
NAME	2072:11	2072:11	9	n
LEAF_NODE	2072:11	2072:11	10	n
LEAF_NODE	2072:12	2072:12	8	;
EXPR_STATEMENT	2073:4	2073:23	7	ma = ( int16 * ) origdata ;
EXPR	2073:4	2073:4	8	ma = ( int16 * ) origdata
ASSIGN	2073:4	2073:7	9	ma = ( int16 * ) origdata
LVAL	2073:4	2073:4	10	ma
FIELD	2073:4	2073:4	11	ma
LEAF_NODE	2073:4	2073:4	12	ma
ASSIGN_OP	2073:6	2073:6	10	=
LEAF_NODE	2073:6	2073:6	11	=
RVAL	2073:7	2073:15	10	( int16 * ) origdata
LEAF_NODE	2073:7	2073:7	11	(
TYPE_NAME	2073:8	2073:8	11	int16
LEAF_NODE	2073:8	2073:8	12	int16
LEAF_NODE	2073:13	2073:13	11	*
LEAF_NODE	2073:14	2073:14	11	)
FIELD	2073:15	2073:15	11	origdata
LEAF_NODE	2073:15	2073:15	12	origdata
LEAF_NODE	2073:23	2073:23	8	;
EXPR_STATEMENT	2074:4	2074:11	7	mb = data ;
EXPR	2074:4	2074:4	8	mb = data
ASSIGN	2074:4	2074:7	9	mb = data
LVAL	2074:4	2074:4	10	mb
FIELD	2074:4	2074:4	11	mb
LEAF_NODE	2074:4	2074:4	12	mb
ASSIGN_OP	2074:6	2074:6	10	=
LEAF_NODE	2074:6	2074:6	11	=
RVAL	2074:7	2074:7	10	data
FIELD	2074:7	2074:7	11	data
LEAF_NODE	2074:7	2074:7	12	data
LEAF_NODE	2074:11	2074:11	8	;
ITERATION	2075:4	2076:4	7	
KEYWORD	2075:4	2075:4	8	for
LEAF_NODE	2075:4	2075:4	9	for
LEAF_NODE	2075:8	2075:8	8	(
FOR_INIT	2075:9	2075:12	8	n = 0 ;
EXPR	2075:9	2075:9	9	n = 0
ASSIGN	2075:9	2075:11	10	n = 0
LVAL	2075:9	2075:9	11	n
FIELD	2075:9	2075:9	12	n
LEAF_NODE	2075:9	2075:9	13	n
ASSIGN_OP	2075:10	2075:10	11	=
LEAF_NODE	2075:10	2075:10	12	=
RVAL	2075:11	2075:11	11	0
FIELD	2075:11	2075:11	12	0
LEAF_NODE	2075:11	2075:11	13	0
LEAF_NODE	2075:12	2075:12	9	;
CONDITION	2075:14	2075:14	8	n < count
EXPR	2075:14	2075:16	9	n < count
FIELD	2075:14	2075:14	10	n
LEAF_NODE	2075:14	2075:14	11	n
REL_OPERATOR	2075:15	2075:15	10	<
LEAF_NODE	2075:15	2075:15	11	<
FIELD	2075:16	2075:16	10	count
LEAF_NODE	2075:16	2075:16	11	count
LEAF_NODE	2075:21	2075:21	8	;
FOR_EXPR	2075:23	2075:23	8	n ++
EXPR	2075:23	2075:23	9	n ++
FIELD	2075:23	2075:24	10	n ++
LEAF_NODE	2075:23	2075:23	11	n
LEAF_NODE	2075:24	2075:24	11	++
LEAF_NODE	2075:26	2075:26	8	)
STATEMENTS	2076:4	2083:4	8	
LEAF_NODE	2076:4	2076:4	9	{
STATEMENTS	2077:5	2082:5	9	
SELECTION	2077:5	2078:6	10	
KEYWORD	2077:5	2077:5	11	if
LEAF_NODE	2077:5	2077:5	12	if
LEAF_NODE	2077:8	2077:8	11	(
CONDITION	2077:9	2077:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2077:9	2077:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2077:9	2077:14	13	tif -> tif_flags
LEAF_NODE	2077:9	2077:9	14	tif
LEAF_NODE	2077:12	2077:12	14	->
LEAF_NODE	2077:14	2077:14	14	tif_flags
LEAF_NODE	2077:23	2077:23	13	&
FIELD	2077:24	2077:24	13	TIFF_SWAB
LEAF_NODE	2077:24	2077:24	14	TIFF_SWAB
LEAF_NODE	2077:33	2077:33	11	)
STATEMENTS	2078:6	2078:6	11	
EXPR_STATEMENT	2078:6	2078:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	2078:6	2078:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	2078:6	2078:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	2078:6	2078:6	15	TIFFSwabShort
LEAF_NODE	2078:6	2078:6	16	TIFFSwabShort
LEAF_NODE	2078:19	2078:19	15	(
ARGUMENT	2078:20	2078:29	15	( uint16 * ) ma
LEAF_NODE	2078:20	2078:20	16	(
TYPE_NAME	2078:21	2078:21	16	uint16
LEAF_NODE	2078:21	2078:21	17	uint16
LEAF_NODE	2078:27	2078:27	16	*
LEAF_NODE	2078:28	2078:28	16	)
FIELD	2078:29	2078:29	16	ma
LEAF_NODE	2078:29	2078:29	17	ma
LEAF_NODE	2078:31	2078:31	15	)
LEAF_NODE	2078:32	2078:32	13	;
EXPR_STATEMENT	2079:5	2079:51	10	err = TIFFReadDirEntryCheckRangeLong8Sshort ( * ma ) ;
EXPR	2079:5	2079:5	11	err = TIFFReadDirEntryCheckRangeLong8Sshort ( * ma )
ASSIGN	2079:5	2079:9	12	err = TIFFReadDirEntryCheckRangeLong8Sshort ( * ma )
LVAL	2079:5	2079:5	13	err
FIELD	2079:5	2079:5	14	err
LEAF_NODE	2079:5	2079:5	15	err
ASSIGN_OP	2079:8	2079:8	13	=
LEAF_NODE	2079:8	2079:8	14	=
RVAL	2079:9	2079:9	13	TIFFReadDirEntryCheckRangeLong8Sshort ( * ma )
FUNCTION_CALL	2079:9	2079:50	14	TIFFReadDirEntryCheckRangeLong8Sshort ( * ma )
CALLEE	2079:9	2079:9	15	TIFFReadDirEntryCheckRangeLong8Sshort
LEAF_NODE	2079:9	2079:9	16	TIFFReadDirEntryCheckRangeLong8Sshort
LEAF_NODE	2079:46	2079:46	15	(
ARGUMENT	2079:47	2079:47	15	* ma
UNARY_EXPR	2079:47	2079:48	16	* ma
UNARY_OPERATOR	2079:47	2079:47	17	*
LEAF_NODE	2079:47	2079:47	18	*
FIELD	2079:48	2079:48	17	ma
LEAF_NODE	2079:48	2079:48	18	ma
LEAF_NODE	2079:50	2079:50	15	)
LEAF_NODE	2079:51	2079:51	11	;
SELECTION	2080:5	2081:6	10	
KEYWORD	2080:5	2080:5	11	if
LEAF_NODE	2080:5	2080:5	12	if
LEAF_NODE	2080:8	2080:8	11	(
CONDITION	2080:9	2080:9	11	err != TIFFReadDirEntryErrOk
EXPR	2080:9	2080:14	12	err != TIFFReadDirEntryErrOk
FIELD	2080:9	2080:9	13	err
LEAF_NODE	2080:9	2080:9	14	err
EQ_OPERATOR	2080:12	2080:12	13	!=
LEAF_NODE	2080:12	2080:12	14	!=
FIELD	2080:14	2080:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	2080:14	2080:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	2080:35	2080:35	11	)
STATEMENTS	2081:6	2081:6	11	
JUMP_STATEMENT	2081:6	2081:11	12	break DESTINATION ;
KEYWORD	2081:6	2081:6	13	break
LEAF_NODE	2081:6	2081:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2081:11	2081:11	13	;
EXPR_STATEMENT	2082:5	2082:26	10	* mb ++ = ( uint64 ) ( * ma ++ ) ;
EXPR	2082:5	2082:5	11	* mb ++ = ( uint64 ) ( * ma ++ )
ASSIGN	2082:5	2082:11	12	* mb ++ = ( uint64 ) ( * ma ++ )
LVAL	2082:5	2082:5	13	* mb ++
UNARY_EXPR	2082:5	2082:6	14	* mb ++
UNARY_OPERATOR	2082:5	2082:5	15	*
LEAF_NODE	2082:5	2082:5	16	*
FIELD	2082:6	2082:8	15	mb ++
LEAF_NODE	2082:6	2082:6	16	mb
LEAF_NODE	2082:8	2082:8	16	++
ASSIGN_OP	2082:10	2082:10	13	=
LEAF_NODE	2082:10	2082:10	14	=
RVAL	2082:11	2082:25	13	( uint64 ) ( * ma ++ )
LEAF_NODE	2082:11	2082:11	14	(
TYPE_NAME	2082:12	2082:12	14	uint64
LEAF_NODE	2082:12	2082:12	15	uint64
LEAF_NODE	2082:18	2082:18	14	)
LEAF_NODE	2082:19	2082:19	14	(
UNARY_EXPR	2082:20	2082:21	14	* ma ++
UNARY_OPERATOR	2082:20	2082:20	15	*
LEAF_NODE	2082:20	2082:20	16	*
FIELD	2082:21	2082:23	15	ma ++
LEAF_NODE	2082:21	2082:21	16	ma
LEAF_NODE	2082:23	2082:23	16	++
LEAF_NODE	2082:25	2082:25	14	)
LEAF_NODE	2082:26	2082:26	11	;
LEAF_NODE	2083:4	2083:4	9	}
LEAF_NODE	2084:3	2084:3	6	}
JUMP_STATEMENT	2085:3	2085:8	6	break DESTINATION ;
KEYWORD	2085:3	2085:3	7	break
LEAF_NODE	2085:3	2085:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2085:8	2085:8	7	;
LABEL	2086:2	2086:16	6	case TIFF_LONG :
LEAF_NODE	2086:2	2086:2	7	case
LEAF_NODE	2086:7	2086:7	7	TIFF_LONG
LEAF_NODE	2086:16	2086:16	7	:
LEAF_NODE	2087:3	2087:3	6	{
STATEMENTS	2088:4	2093:4	6	
SIMPLE_DECL	2088:4	2088:14	7	uint32 * ma ;
VAR_DECL	2088:4	2088:12	8	uint32 * ma
TYPE	2088:4	2088:10	9	uint32 *
TYPE_NAME	2088:4	2088:4	10	uint32
LEAF_NODE	2088:4	2088:4	11	uint32
POINTER	2088:10	2088:10	10	*
LEAF_NODE	2088:10	2088:10	11	*
NAME	2088:12	2088:12	9	ma
LEAF_NODE	2088:12	2088:12	10	ma
LEAF_NODE	2088:14	2088:14	8	;
SIMPLE_DECL	2089:4	2089:14	7	uint64 * mb ;
VAR_DECL	2089:4	2089:12	8	uint64 * mb
TYPE	2089:4	2089:10	9	uint64 *
TYPE_NAME	2089:4	2089:4	10	uint64
LEAF_NODE	2089:4	2089:4	11	uint64
POINTER	2089:10	2089:10	10	*
LEAF_NODE	2089:10	2089:10	11	*
NAME	2089:12	2089:12	9	mb
LEAF_NODE	2089:12	2089:12	10	mb
LEAF_NODE	2089:14	2089:14	8	;
SIMPLE_DECL	2090:4	2090:12	7	uint32 n ;
VAR_DECL	2090:4	2090:11	8	uint32 n
TYPE	2090:4	2090:4	9	uint32
TYPE_NAME	2090:4	2090:4	10	uint32
LEAF_NODE	2090:4	2090:4	11	uint32
NAME	2090:11	2090:11	9	n
LEAF_NODE	2090:11	2090:11	10	n
LEAF_NODE	2090:12	2090:12	8	;
EXPR_STATEMENT	2091:4	2091:24	7	ma = ( uint32 * ) origdata ;
EXPR	2091:4	2091:4	8	ma = ( uint32 * ) origdata
ASSIGN	2091:4	2091:7	9	ma = ( uint32 * ) origdata
LVAL	2091:4	2091:4	10	ma
FIELD	2091:4	2091:4	11	ma
LEAF_NODE	2091:4	2091:4	12	ma
ASSIGN_OP	2091:6	2091:6	10	=
LEAF_NODE	2091:6	2091:6	11	=
RVAL	2091:7	2091:16	10	( uint32 * ) origdata
LEAF_NODE	2091:7	2091:7	11	(
TYPE_NAME	2091:8	2091:8	11	uint32
LEAF_NODE	2091:8	2091:8	12	uint32
LEAF_NODE	2091:14	2091:14	11	*
LEAF_NODE	2091:15	2091:15	11	)
FIELD	2091:16	2091:16	11	origdata
LEAF_NODE	2091:16	2091:16	12	origdata
LEAF_NODE	2091:24	2091:24	8	;
EXPR_STATEMENT	2092:4	2092:11	7	mb = data ;
EXPR	2092:4	2092:4	8	mb = data
ASSIGN	2092:4	2092:7	9	mb = data
LVAL	2092:4	2092:4	10	mb
FIELD	2092:4	2092:4	11	mb
LEAF_NODE	2092:4	2092:4	12	mb
ASSIGN_OP	2092:6	2092:6	10	=
LEAF_NODE	2092:6	2092:6	11	=
RVAL	2092:7	2092:7	10	data
FIELD	2092:7	2092:7	11	data
LEAF_NODE	2092:7	2092:7	12	data
LEAF_NODE	2092:11	2092:11	8	;
ITERATION	2093:4	2094:4	7	
KEYWORD	2093:4	2093:4	8	for
LEAF_NODE	2093:4	2093:4	9	for
LEAF_NODE	2093:8	2093:8	8	(
FOR_INIT	2093:9	2093:12	8	n = 0 ;
EXPR	2093:9	2093:9	9	n = 0
ASSIGN	2093:9	2093:11	10	n = 0
LVAL	2093:9	2093:9	11	n
FIELD	2093:9	2093:9	12	n
LEAF_NODE	2093:9	2093:9	13	n
ASSIGN_OP	2093:10	2093:10	11	=
LEAF_NODE	2093:10	2093:10	12	=
RVAL	2093:11	2093:11	11	0
FIELD	2093:11	2093:11	12	0
LEAF_NODE	2093:11	2093:11	13	0
LEAF_NODE	2093:12	2093:12	9	;
CONDITION	2093:14	2093:14	8	n < count
EXPR	2093:14	2093:16	9	n < count
FIELD	2093:14	2093:14	10	n
LEAF_NODE	2093:14	2093:14	11	n
REL_OPERATOR	2093:15	2093:15	10	<
LEAF_NODE	2093:15	2093:15	11	<
FIELD	2093:16	2093:16	10	count
LEAF_NODE	2093:16	2093:16	11	count
LEAF_NODE	2093:21	2093:21	8	;
FOR_EXPR	2093:23	2093:23	8	n ++
EXPR	2093:23	2093:23	9	n ++
FIELD	2093:23	2093:24	10	n ++
LEAF_NODE	2093:23	2093:23	11	n
LEAF_NODE	2093:24	2093:24	11	++
LEAF_NODE	2093:26	2093:26	8	)
STATEMENTS	2094:4	2098:4	8	
LEAF_NODE	2094:4	2094:4	9	{
STATEMENTS	2095:5	2097:5	9	
SELECTION	2095:5	2096:6	10	
KEYWORD	2095:5	2095:5	11	if
LEAF_NODE	2095:5	2095:5	12	if
LEAF_NODE	2095:8	2095:8	11	(
CONDITION	2095:9	2095:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2095:9	2095:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2095:9	2095:14	13	tif -> tif_flags
LEAF_NODE	2095:9	2095:9	14	tif
LEAF_NODE	2095:12	2095:12	14	->
LEAF_NODE	2095:14	2095:14	14	tif_flags
LEAF_NODE	2095:23	2095:23	13	&
FIELD	2095:24	2095:24	13	TIFF_SWAB
LEAF_NODE	2095:24	2095:24	14	TIFF_SWAB
LEAF_NODE	2095:33	2095:33	11	)
STATEMENTS	2096:6	2096:6	11	
EXPR_STATEMENT	2096:6	2096:22	12	TIFFSwabLong ( ma ) ;
EXPR	2096:6	2096:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2096:6	2096:21	14	TIFFSwabLong ( ma )
CALLEE	2096:6	2096:6	15	TIFFSwabLong
LEAF_NODE	2096:6	2096:6	16	TIFFSwabLong
LEAF_NODE	2096:18	2096:18	15	(
ARGUMENT	2096:19	2096:19	15	ma
FIELD	2096:19	2096:19	16	ma
LEAF_NODE	2096:19	2096:19	17	ma
LEAF_NODE	2096:21	2096:21	15	)
LEAF_NODE	2096:22	2096:22	13	;
EXPR_STATEMENT	2097:5	2097:26	10	* mb ++ = ( uint64 ) ( * ma ++ ) ;
EXPR	2097:5	2097:5	11	* mb ++ = ( uint64 ) ( * ma ++ )
ASSIGN	2097:5	2097:11	12	* mb ++ = ( uint64 ) ( * ma ++ )
LVAL	2097:5	2097:5	13	* mb ++
UNARY_EXPR	2097:5	2097:6	14	* mb ++
UNARY_OPERATOR	2097:5	2097:5	15	*
LEAF_NODE	2097:5	2097:5	16	*
FIELD	2097:6	2097:8	15	mb ++
LEAF_NODE	2097:6	2097:6	16	mb
LEAF_NODE	2097:8	2097:8	16	++
ASSIGN_OP	2097:10	2097:10	13	=
LEAF_NODE	2097:10	2097:10	14	=
RVAL	2097:11	2097:25	13	( uint64 ) ( * ma ++ )
LEAF_NODE	2097:11	2097:11	14	(
TYPE_NAME	2097:12	2097:12	14	uint64
LEAF_NODE	2097:12	2097:12	15	uint64
LEAF_NODE	2097:18	2097:18	14	)
LEAF_NODE	2097:19	2097:19	14	(
UNARY_EXPR	2097:20	2097:21	14	* ma ++
UNARY_OPERATOR	2097:20	2097:20	15	*
LEAF_NODE	2097:20	2097:20	16	*
FIELD	2097:21	2097:23	15	ma ++
LEAF_NODE	2097:21	2097:21	16	ma
LEAF_NODE	2097:23	2097:23	16	++
LEAF_NODE	2097:25	2097:25	14	)
LEAF_NODE	2097:26	2097:26	11	;
LEAF_NODE	2098:4	2098:4	9	}
LEAF_NODE	2099:3	2099:3	6	}
JUMP_STATEMENT	2100:3	2100:8	6	break DESTINATION ;
KEYWORD	2100:3	2100:3	7	break
LEAF_NODE	2100:3	2100:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2100:8	2100:8	7	;
LABEL	2101:2	2101:17	6	case TIFF_SLONG :
LEAF_NODE	2101:2	2101:2	7	case
LEAF_NODE	2101:7	2101:7	7	TIFF_SLONG
LEAF_NODE	2101:17	2101:17	7	:
LEAF_NODE	2102:3	2102:3	6	{
STATEMENTS	2103:4	2108:4	6	
SIMPLE_DECL	2103:4	2103:13	7	int32 * ma ;
VAR_DECL	2103:4	2103:11	8	int32 * ma
TYPE	2103:4	2103:9	9	int32 *
TYPE_NAME	2103:4	2103:4	10	int32
LEAF_NODE	2103:4	2103:4	11	int32
POINTER	2103:9	2103:9	10	*
LEAF_NODE	2103:9	2103:9	11	*
NAME	2103:11	2103:11	9	ma
LEAF_NODE	2103:11	2103:11	10	ma
LEAF_NODE	2103:13	2103:13	8	;
SIMPLE_DECL	2104:4	2104:14	7	uint64 * mb ;
VAR_DECL	2104:4	2104:12	8	uint64 * mb
TYPE	2104:4	2104:10	9	uint64 *
TYPE_NAME	2104:4	2104:4	10	uint64
LEAF_NODE	2104:4	2104:4	11	uint64
POINTER	2104:10	2104:10	10	*
LEAF_NODE	2104:10	2104:10	11	*
NAME	2104:12	2104:12	9	mb
LEAF_NODE	2104:12	2104:12	10	mb
LEAF_NODE	2104:14	2104:14	8	;
SIMPLE_DECL	2105:4	2105:12	7	uint32 n ;
VAR_DECL	2105:4	2105:11	8	uint32 n
TYPE	2105:4	2105:4	9	uint32
TYPE_NAME	2105:4	2105:4	10	uint32
LEAF_NODE	2105:4	2105:4	11	uint32
NAME	2105:11	2105:11	9	n
LEAF_NODE	2105:11	2105:11	10	n
LEAF_NODE	2105:12	2105:12	8	;
EXPR_STATEMENT	2106:4	2106:23	7	ma = ( int32 * ) origdata ;
EXPR	2106:4	2106:4	8	ma = ( int32 * ) origdata
ASSIGN	2106:4	2106:7	9	ma = ( int32 * ) origdata
LVAL	2106:4	2106:4	10	ma
FIELD	2106:4	2106:4	11	ma
LEAF_NODE	2106:4	2106:4	12	ma
ASSIGN_OP	2106:6	2106:6	10	=
LEAF_NODE	2106:6	2106:6	11	=
RVAL	2106:7	2106:15	10	( int32 * ) origdata
LEAF_NODE	2106:7	2106:7	11	(
TYPE_NAME	2106:8	2106:8	11	int32
LEAF_NODE	2106:8	2106:8	12	int32
LEAF_NODE	2106:13	2106:13	11	*
LEAF_NODE	2106:14	2106:14	11	)
FIELD	2106:15	2106:15	11	origdata
LEAF_NODE	2106:15	2106:15	12	origdata
LEAF_NODE	2106:23	2106:23	8	;
EXPR_STATEMENT	2107:4	2107:11	7	mb = data ;
EXPR	2107:4	2107:4	8	mb = data
ASSIGN	2107:4	2107:7	9	mb = data
LVAL	2107:4	2107:4	10	mb
FIELD	2107:4	2107:4	11	mb
LEAF_NODE	2107:4	2107:4	12	mb
ASSIGN_OP	2107:6	2107:6	10	=
LEAF_NODE	2107:6	2107:6	11	=
RVAL	2107:7	2107:7	10	data
FIELD	2107:7	2107:7	11	data
LEAF_NODE	2107:7	2107:7	12	data
LEAF_NODE	2107:11	2107:11	8	;
ITERATION	2108:4	2109:4	7	
KEYWORD	2108:4	2108:4	8	for
LEAF_NODE	2108:4	2108:4	9	for
LEAF_NODE	2108:8	2108:8	8	(
FOR_INIT	2108:9	2108:12	8	n = 0 ;
EXPR	2108:9	2108:9	9	n = 0
ASSIGN	2108:9	2108:11	10	n = 0
LVAL	2108:9	2108:9	11	n
FIELD	2108:9	2108:9	12	n
LEAF_NODE	2108:9	2108:9	13	n
ASSIGN_OP	2108:10	2108:10	11	=
LEAF_NODE	2108:10	2108:10	12	=
RVAL	2108:11	2108:11	11	0
FIELD	2108:11	2108:11	12	0
LEAF_NODE	2108:11	2108:11	13	0
LEAF_NODE	2108:12	2108:12	9	;
CONDITION	2108:14	2108:14	8	n < count
EXPR	2108:14	2108:16	9	n < count
FIELD	2108:14	2108:14	10	n
LEAF_NODE	2108:14	2108:14	11	n
REL_OPERATOR	2108:15	2108:15	10	<
LEAF_NODE	2108:15	2108:15	11	<
FIELD	2108:16	2108:16	10	count
LEAF_NODE	2108:16	2108:16	11	count
LEAF_NODE	2108:21	2108:21	8	;
FOR_EXPR	2108:23	2108:23	8	n ++
EXPR	2108:23	2108:23	9	n ++
FIELD	2108:23	2108:24	10	n ++
LEAF_NODE	2108:23	2108:23	11	n
LEAF_NODE	2108:24	2108:24	11	++
LEAF_NODE	2108:26	2108:26	8	)
STATEMENTS	2109:4	2116:4	8	
LEAF_NODE	2109:4	2109:4	9	{
STATEMENTS	2110:5	2115:5	9	
SELECTION	2110:5	2111:6	10	
KEYWORD	2110:5	2110:5	11	if
LEAF_NODE	2110:5	2110:5	12	if
LEAF_NODE	2110:8	2110:8	11	(
CONDITION	2110:9	2110:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2110:9	2110:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2110:9	2110:14	13	tif -> tif_flags
LEAF_NODE	2110:9	2110:9	14	tif
LEAF_NODE	2110:12	2110:12	14	->
LEAF_NODE	2110:14	2110:14	14	tif_flags
LEAF_NODE	2110:23	2110:23	13	&
FIELD	2110:24	2110:24	13	TIFF_SWAB
LEAF_NODE	2110:24	2110:24	14	TIFF_SWAB
LEAF_NODE	2110:33	2110:33	11	)
STATEMENTS	2111:6	2111:6	11	
EXPR_STATEMENT	2111:6	2111:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	2111:6	2111:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	2111:6	2111:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	2111:6	2111:6	15	TIFFSwabLong
LEAF_NODE	2111:6	2111:6	16	TIFFSwabLong
LEAF_NODE	2111:18	2111:18	15	(
ARGUMENT	2111:19	2111:28	15	( uint32 * ) ma
LEAF_NODE	2111:19	2111:19	16	(
TYPE_NAME	2111:20	2111:20	16	uint32
LEAF_NODE	2111:20	2111:20	17	uint32
LEAF_NODE	2111:26	2111:26	16	*
LEAF_NODE	2111:27	2111:27	16	)
FIELD	2111:28	2111:28	16	ma
LEAF_NODE	2111:28	2111:28	17	ma
LEAF_NODE	2111:30	2111:30	15	)
LEAF_NODE	2111:31	2111:31	13	;
EXPR_STATEMENT	2112:5	2112:50	10	err = TIFFReadDirEntryCheckRangeLong8Slong ( * ma ) ;
EXPR	2112:5	2112:5	11	err = TIFFReadDirEntryCheckRangeLong8Slong ( * ma )
ASSIGN	2112:5	2112:9	12	err = TIFFReadDirEntryCheckRangeLong8Slong ( * ma )
LVAL	2112:5	2112:5	13	err
FIELD	2112:5	2112:5	14	err
LEAF_NODE	2112:5	2112:5	15	err
ASSIGN_OP	2112:8	2112:8	13	=
LEAF_NODE	2112:8	2112:8	14	=
RVAL	2112:9	2112:9	13	TIFFReadDirEntryCheckRangeLong8Slong ( * ma )
FUNCTION_CALL	2112:9	2112:49	14	TIFFReadDirEntryCheckRangeLong8Slong ( * ma )
CALLEE	2112:9	2112:9	15	TIFFReadDirEntryCheckRangeLong8Slong
LEAF_NODE	2112:9	2112:9	16	TIFFReadDirEntryCheckRangeLong8Slong
LEAF_NODE	2112:45	2112:45	15	(
ARGUMENT	2112:46	2112:46	15	* ma
UNARY_EXPR	2112:46	2112:47	16	* ma
UNARY_OPERATOR	2112:46	2112:46	17	*
LEAF_NODE	2112:46	2112:46	18	*
FIELD	2112:47	2112:47	17	ma
LEAF_NODE	2112:47	2112:47	18	ma
LEAF_NODE	2112:49	2112:49	15	)
LEAF_NODE	2112:50	2112:50	11	;
SELECTION	2113:5	2114:6	10	
KEYWORD	2113:5	2113:5	11	if
LEAF_NODE	2113:5	2113:5	12	if
LEAF_NODE	2113:8	2113:8	11	(
CONDITION	2113:9	2113:9	11	err != TIFFReadDirEntryErrOk
EXPR	2113:9	2113:14	12	err != TIFFReadDirEntryErrOk
FIELD	2113:9	2113:9	13	err
LEAF_NODE	2113:9	2113:9	14	err
EQ_OPERATOR	2113:12	2113:12	13	!=
LEAF_NODE	2113:12	2113:12	14	!=
FIELD	2113:14	2113:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	2113:14	2113:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	2113:35	2113:35	11	)
STATEMENTS	2114:6	2114:6	11	
JUMP_STATEMENT	2114:6	2114:11	12	break DESTINATION ;
KEYWORD	2114:6	2114:6	13	break
LEAF_NODE	2114:6	2114:6	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	2114:11	2114:11	13	;
EXPR_STATEMENT	2115:5	2115:26	10	* mb ++ = ( uint64 ) ( * ma ++ ) ;
EXPR	2115:5	2115:5	11	* mb ++ = ( uint64 ) ( * ma ++ )
ASSIGN	2115:5	2115:11	12	* mb ++ = ( uint64 ) ( * ma ++ )
LVAL	2115:5	2115:5	13	* mb ++
UNARY_EXPR	2115:5	2115:6	14	* mb ++
UNARY_OPERATOR	2115:5	2115:5	15	*
LEAF_NODE	2115:5	2115:5	16	*
FIELD	2115:6	2115:8	15	mb ++
LEAF_NODE	2115:6	2115:6	16	mb
LEAF_NODE	2115:8	2115:8	16	++
ASSIGN_OP	2115:10	2115:10	13	=
LEAF_NODE	2115:10	2115:10	14	=
RVAL	2115:11	2115:25	13	( uint64 ) ( * ma ++ )
LEAF_NODE	2115:11	2115:11	14	(
TYPE_NAME	2115:12	2115:12	14	uint64
LEAF_NODE	2115:12	2115:12	15	uint64
LEAF_NODE	2115:18	2115:18	14	)
LEAF_NODE	2115:19	2115:19	14	(
UNARY_EXPR	2115:20	2115:21	14	* ma ++
UNARY_OPERATOR	2115:20	2115:20	15	*
LEAF_NODE	2115:20	2115:20	16	*
FIELD	2115:21	2115:23	15	ma ++
LEAF_NODE	2115:21	2115:21	16	ma
LEAF_NODE	2115:23	2115:23	16	++
LEAF_NODE	2115:25	2115:25	14	)
LEAF_NODE	2115:26	2115:26	11	;
LEAF_NODE	2116:4	2116:4	9	}
LEAF_NODE	2117:3	2117:3	6	}
JUMP_STATEMENT	2118:3	2118:8	6	break DESTINATION ;
KEYWORD	2118:3	2118:3	7	break
LEAF_NODE	2118:3	2118:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2118:8	2118:8	7	;
LEAF_NODE	2119:1	2119:1	5	}
EXPR_STATEMENT	2120:1	2120:20	3	_TIFFfree ( origdata ) ;
EXPR	2120:1	2120:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	2120:1	2120:19	5	_TIFFfree ( origdata )
CALLEE	2120:1	2120:1	6	_TIFFfree
LEAF_NODE	2120:1	2120:1	7	_TIFFfree
LEAF_NODE	2120:10	2120:10	6	(
ARGUMENT	2120:11	2120:11	6	origdata
FIELD	2120:11	2120:11	7	origdata
LEAF_NODE	2120:11	2120:11	8	origdata
LEAF_NODE	2120:19	2120:19	6	)
LEAF_NODE	2120:20	2120:20	4	;
SELECTION	2121:1	2122:1	3	
KEYWORD	2121:1	2121:1	4	if
LEAF_NODE	2121:1	2121:1	5	if
LEAF_NODE	2121:4	2121:4	4	(
CONDITION	2121:5	2121:5	4	err != TIFFReadDirEntryErrOk
EXPR	2121:5	2121:10	5	err != TIFFReadDirEntryErrOk
FIELD	2121:5	2121:5	6	err
LEAF_NODE	2121:5	2121:5	7	err
EQ_OPERATOR	2121:8	2121:8	6	!=
LEAF_NODE	2121:8	2121:8	7	!=
FIELD	2121:10	2121:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	2121:10	2121:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	2121:31	2121:31	4	)
STATEMENTS	2122:1	2125:1	4	
LEAF_NODE	2122:1	2122:1	5	{
STATEMENTS	2123:2	2124:13	5	
EXPR_STATEMENT	2123:2	2123:17	6	_TIFFfree ( data ) ;
EXPR	2123:2	2123:2	7	_TIFFfree ( data )
FUNCTION_CALL	2123:2	2123:16	8	_TIFFfree ( data )
CALLEE	2123:2	2123:2	9	_TIFFfree
LEAF_NODE	2123:2	2123:2	10	_TIFFfree
LEAF_NODE	2123:11	2123:11	9	(
ARGUMENT	2123:12	2123:12	9	data
FIELD	2123:12	2123:12	10	data
LEAF_NODE	2123:12	2123:12	11	data
LEAF_NODE	2123:16	2123:16	9	)
LEAF_NODE	2123:17	2123:17	7	;
LEAF_NODE	2124:2	2124:2	6	return
LEAF_NODE	2124:8	2124:8	6	(
LEAF_NODE	2124:9	2124:9	6	err
LEAF_NODE	2124:12	2124:12	6	)
LEAF_NODE	2124:13	2124:13	6	;
LEAF_NODE	2125:1	2125:1	5	}
EXPR_STATEMENT	2126:1	2126:12	3	* value = data ;
EXPR	2126:1	2126:1	4	* value = data
ASSIGN	2126:1	2126:8	5	* value = data
LVAL	2126:1	2126:1	6	* value
UNARY_EXPR	2126:1	2126:2	7	* value
UNARY_OPERATOR	2126:1	2126:1	8	*
LEAF_NODE	2126:1	2126:1	9	*
FIELD	2126:2	2126:2	8	value
LEAF_NODE	2126:2	2126:2	9	value
ASSIGN_OP	2126:7	2126:7	6	=
LEAF_NODE	2126:7	2126:7	7	=
RVAL	2126:8	2126:8	6	data
FIELD	2126:8	2126:8	7	data
LEAF_NODE	2126:8	2126:8	8	data
LEAF_NODE	2126:12	2126:12	4	;
LEAF_NODE	2127:1	2127:1	3	return
LEAF_NODE	2127:7	2127:7	3	(
LEAF_NODE	2127:8	2127:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2127:29	2127:29	3	)
LEAF_NODE	2127:30	2127:30	3	;
LEAF_NODE	2128:0	2128:0	2	}
FUNCTION_DEF	2130:0	2133:0	1	
RETURN_TYPE	2130:0	2130:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2130:0	2130:0	3	static
TYPE_NAME	2130:7	2130:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2130:7	2130:7	4	enum
LEAF_NODE	2130:12	2130:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2130:32	2130:32	2	TIFFReadDirEntryLong8Array
LEAF_NODE	2130:32	2130:32	3	TIFFReadDirEntryLong8Array
PARAMETER_LIST	2130:58	2130:108	2	( TIFF * tif , TIFFDirEntry * direntry , uint64 * * value )
LEAF_NODE	2130:58	2130:58	3	(
PARAMETER_DECL	2130:59	2130:65	3	TIFF * tif
TYPE	2130:59	2130:63	4	TIFF *
TYPE_NAME	2130:59	2130:59	5	TIFF
LEAF_NODE	2130:59	2130:59	6	TIFF
POINTER	2130:63	2130:63	5	*
LEAF_NODE	2130:63	2130:63	6	*
NAME	2130:65	2130:65	4	tif
LEAF_NODE	2130:65	2130:65	5	tif
LEAF_NODE	2130:68	2130:68	3	,
PARAMETER_DECL	2130:70	2130:84	3	TIFFDirEntry * direntry
TYPE	2130:70	2130:82	4	TIFFDirEntry *
TYPE_NAME	2130:70	2130:70	5	TIFFDirEntry
LEAF_NODE	2130:70	2130:70	6	TIFFDirEntry
POINTER	2130:82	2130:82	5	*
LEAF_NODE	2130:82	2130:82	6	*
NAME	2130:84	2130:84	4	direntry
LEAF_NODE	2130:84	2130:84	5	direntry
LEAF_NODE	2130:92	2130:92	3	,
PARAMETER_DECL	2130:94	2130:103	3	uint64 * * value
TYPE	2130:94	2130:100	4	uint64 * *
TYPE_NAME	2130:94	2130:94	5	uint64
LEAF_NODE	2130:94	2130:94	6	uint64
POINTER	2130:100	2130:101	5	* *
LEAF_NODE	2130:100	2130:100	6	*
LEAF_NODE	2130:101	2130:101	6	*
NAME	2130:103	2130:103	4	value
LEAF_NODE	2130:103	2130:103	5	value
LEAF_NODE	2130:108	2130:108	3	)
LEAF_NODE	2131:0	2131:0	2	{
STATEMENTS	2132:4	2132:4	2	
JUMP_STATEMENT	2132:4	2132:82	3	return TIFFReadDirEntryLong8ArrayWithLimit ( tif , direntry , value , ~ ( ( uint64 ) 0 ) ) ;
KEYWORD	2132:4	2132:4	4	return
LEAF_NODE	2132:4	2132:4	5	return
DESTINATION	2132:11	2132:11	4	TIFFReadDirEntryLong8ArrayWithLimit ( tif , direntry , value , ~ ( ( uint64 ) 0 ) )
EXPR	2132:11	2132:11	5	TIFFReadDirEntryLong8ArrayWithLimit ( tif , direntry , value , ~ ( ( uint64 ) 0 ) )
FUNCTION_CALL	2132:11	2132:81	6	TIFFReadDirEntryLong8ArrayWithLimit ( tif , direntry , value , ~ ( ( uint64 ) 0 ) )
CALLEE	2132:11	2132:11	7	TIFFReadDirEntryLong8ArrayWithLimit
LEAF_NODE	2132:11	2132:11	8	TIFFReadDirEntryLong8ArrayWithLimit
LEAF_NODE	2132:46	2132:46	7	(
ARGUMENT	2132:47	2132:47	7	tif
FIELD	2132:47	2132:47	8	tif
LEAF_NODE	2132:47	2132:47	9	tif
LEAF_NODE	2132:50	2132:50	7	,
ARGUMENT	2132:52	2132:52	7	direntry
FIELD	2132:52	2132:52	8	direntry
LEAF_NODE	2132:52	2132:52	9	direntry
LEAF_NODE	2132:60	2132:60	7	,
ARGUMENT	2132:62	2132:62	7	value
FIELD	2132:62	2132:62	8	value
LEAF_NODE	2132:62	2132:62	9	value
LEAF_NODE	2132:67	2132:67	7	,
ARGUMENT	2132:69	2132:69	7	~ ( ( uint64 ) 0 )
UNARY_EXPR	2132:69	2132:80	8	~ ( ( uint64 ) 0 )
UNARY_OPERATOR	2132:69	2132:69	9	~
LEAF_NODE	2132:69	2132:69	10	~
LEAF_NODE	2132:70	2132:70	9	(
LEAF_NODE	2132:71	2132:71	9	(
TYPE_NAME	2132:72	2132:72	9	uint64
LEAF_NODE	2132:72	2132:72	10	uint64
LEAF_NODE	2132:78	2132:78	9	)
FIELD	2132:79	2132:79	9	0
LEAF_NODE	2132:79	2132:79	10	0
LEAF_NODE	2132:80	2132:80	9	)
LEAF_NODE	2132:81	2132:81	7	)
LEAF_NODE	2132:82	2132:82	4	;
LEAF_NODE	2133:0	2133:0	2	}
FUNCTION_DEF	2135:0	2283:0	1	
RETURN_TYPE	2135:0	2135:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2135:0	2135:0	3	static
TYPE_NAME	2135:7	2135:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2135:7	2135:7	4	enum
LEAF_NODE	2135:12	2135:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2135:32	2135:32	2	TIFFReadDirEntrySlong8Array
LEAF_NODE	2135:32	2135:32	3	TIFFReadDirEntrySlong8Array
PARAMETER_LIST	2135:59	2135:108	2	( TIFF * tif , TIFFDirEntry * direntry , int64 * * value )
LEAF_NODE	2135:59	2135:59	3	(
PARAMETER_DECL	2135:60	2135:66	3	TIFF * tif
TYPE	2135:60	2135:64	4	TIFF *
TYPE_NAME	2135:60	2135:60	5	TIFF
LEAF_NODE	2135:60	2135:60	6	TIFF
POINTER	2135:64	2135:64	5	*
LEAF_NODE	2135:64	2135:64	6	*
NAME	2135:66	2135:66	4	tif
LEAF_NODE	2135:66	2135:66	5	tif
LEAF_NODE	2135:69	2135:69	3	,
PARAMETER_DECL	2135:71	2135:85	3	TIFFDirEntry * direntry
TYPE	2135:71	2135:83	4	TIFFDirEntry *
TYPE_NAME	2135:71	2135:71	5	TIFFDirEntry
LEAF_NODE	2135:71	2135:71	6	TIFFDirEntry
POINTER	2135:83	2135:83	5	*
LEAF_NODE	2135:83	2135:83	6	*
NAME	2135:85	2135:85	4	direntry
LEAF_NODE	2135:85	2135:85	5	direntry
LEAF_NODE	2135:93	2135:93	3	,
PARAMETER_DECL	2135:95	2135:103	3	int64 * * value
TYPE	2135:95	2135:100	4	int64 * *
TYPE_NAME	2135:95	2135:95	5	int64
LEAF_NODE	2135:95	2135:95	6	int64
POINTER	2135:100	2135:101	5	* *
LEAF_NODE	2135:100	2135:100	6	*
LEAF_NODE	2135:101	2135:101	6	*
NAME	2135:103	2135:103	4	value
LEAF_NODE	2135:103	2135:103	5	value
LEAF_NODE	2135:108	2135:108	3	)
LEAF_NODE	2136:0	2136:0	2	{
STATEMENTS	2137:1	2282:30	2	
SIMPLE_DECL	2137:1	2137:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	2137:1	2137:26	4	enum TIFFReadDirEntryErr err
TYPE	2137:1	2137:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	2137:1	2137:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	2137:1	2137:1	7	enum
LEAF_NODE	2137:6	2137:6	7	TIFFReadDirEntryErr
NAME	2137:26	2137:26	5	err
LEAF_NODE	2137:26	2137:26	6	err
LEAF_NODE	2137:29	2137:29	4	;
SIMPLE_DECL	2138:1	2138:13	3	uint32 count ;
VAR_DECL	2138:1	2138:8	4	uint32 count
TYPE	2138:1	2138:1	5	uint32
TYPE_NAME	2138:1	2138:1	6	uint32
LEAF_NODE	2138:1	2138:1	7	uint32
NAME	2138:8	2138:8	5	count
LEAF_NODE	2138:8	2138:8	6	count
LEAF_NODE	2138:13	2138:13	4	;
SIMPLE_DECL	2139:1	2139:15	3	void * origdata ;
VAR_DECL	2139:1	2139:7	4	void * origdata
TYPE	2139:1	2139:5	5	void *
TYPE_NAME	2139:1	2139:1	6	void
LEAF_NODE	2139:1	2139:1	7	void
POINTER	2139:5	2139:5	6	*
LEAF_NODE	2139:5	2139:5	7	*
NAME	2139:7	2139:7	5	origdata
LEAF_NODE	2139:7	2139:7	6	origdata
LEAF_NODE	2139:15	2139:15	4	;
SIMPLE_DECL	2140:1	2140:12	3	int64 * data ;
VAR_DECL	2140:1	2140:8	4	int64 * data
TYPE	2140:1	2140:6	5	int64 *
TYPE_NAME	2140:1	2140:1	6	int64
LEAF_NODE	2140:1	2140:1	7	int64
POINTER	2140:6	2140:6	6	*
LEAF_NODE	2140:6	2140:6	7	*
NAME	2140:8	2140:8	5	data
LEAF_NODE	2140:8	2140:8	6	data
LEAF_NODE	2140:12	2140:12	4	;
SELECTION	2141:1	2142:1	3	
KEYWORD	2141:1	2141:1	4	switch
LEAF_NODE	2141:1	2141:1	5	switch
LEAF_NODE	2141:8	2141:8	4	(
CONDITION	2141:9	2141:9	4	direntry -> tdir_type
EXPR	2141:9	2141:9	5	direntry -> tdir_type
FIELD	2141:9	2141:19	6	direntry -> tdir_type
LEAF_NODE	2141:9	2141:9	7	direntry
LEAF_NODE	2141:17	2141:17	7	->
LEAF_NODE	2141:19	2141:19	7	tdir_type
LEAF_NODE	2141:28	2141:28	4	)
STATEMENTS	2142:1	2154:1	4	
LEAF_NODE	2142:1	2142:1	5	{
STATEMENTS	2143:2	2153:34	5	
LABEL	2143:2	2143:16	6	case TIFF_BYTE :
LEAF_NODE	2143:2	2143:2	7	case
LEAF_NODE	2143:7	2143:7	7	TIFF_BYTE
LEAF_NODE	2143:16	2143:16	7	:
LABEL	2144:2	2144:17	6	case TIFF_SBYTE :
LEAF_NODE	2144:2	2144:2	7	case
LEAF_NODE	2144:7	2144:7	7	TIFF_SBYTE
LEAF_NODE	2144:17	2144:17	7	:
LABEL	2145:2	2145:17	6	case TIFF_SHORT :
LEAF_NODE	2145:2	2145:2	7	case
LEAF_NODE	2145:7	2145:7	7	TIFF_SHORT
LEAF_NODE	2145:17	2145:17	7	:
LABEL	2146:2	2146:18	6	case TIFF_SSHORT :
LEAF_NODE	2146:2	2146:2	7	case
LEAF_NODE	2146:7	2146:7	7	TIFF_SSHORT
LEAF_NODE	2146:18	2146:18	7	:
LABEL	2147:2	2147:16	6	case TIFF_LONG :
LEAF_NODE	2147:2	2147:2	7	case
LEAF_NODE	2147:7	2147:7	7	TIFF_LONG
LEAF_NODE	2147:16	2147:16	7	:
LABEL	2148:2	2148:17	6	case TIFF_SLONG :
LEAF_NODE	2148:2	2148:2	7	case
LEAF_NODE	2148:7	2148:7	7	TIFF_SLONG
LEAF_NODE	2148:17	2148:17	7	:
LABEL	2149:2	2149:17	6	case TIFF_LONG8 :
LEAF_NODE	2149:2	2149:2	7	case
LEAF_NODE	2149:7	2149:7	7	TIFF_LONG8
LEAF_NODE	2149:17	2149:17	7	:
LABEL	2150:2	2150:18	6	case TIFF_SLONG8 :
LEAF_NODE	2150:2	2150:2	7	case
LEAF_NODE	2150:7	2150:7	7	TIFF_SLONG8
LEAF_NODE	2150:18	2150:18	7	:
JUMP_STATEMENT	2151:3	2151:8	6	break DESTINATION ;
KEYWORD	2151:3	2151:3	7	break
LEAF_NODE	2151:3	2151:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2151:8	2151:8	7	;
LABEL	2152:2	2152:9	6	default :
LEAF_NODE	2152:2	2152:2	7	default
LEAF_NODE	2152:9	2152:9	7	:
LEAF_NODE	2153:3	2153:3	6	return
LEAF_NODE	2153:9	2153:9	6	(
LEAF_NODE	2153:10	2153:10	6	TIFFReadDirEntryErrType
LEAF_NODE	2153:33	2153:33	6	)
LEAF_NODE	2153:34	2153:34	6	;
LEAF_NODE	2154:1	2154:1	5	}
EXPR_STATEMENT	2155:1	2155:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata ) ;
EXPR	2155:1	2155:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
ASSIGN	2155:1	2155:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
LVAL	2155:1	2155:1	6	err
FIELD	2155:1	2155:1	7	err
LEAF_NODE	2155:1	2155:1	8	err
ASSIGN_OP	2155:4	2155:4	6	=
LEAF_NODE	2155:4	2155:4	7	=
RVAL	2155:5	2155:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
FUNCTION_CALL	2155:5	2155:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
CALLEE	2155:5	2155:5	8	TIFFReadDirEntryArray
LEAF_NODE	2155:5	2155:5	9	TIFFReadDirEntryArray
LEAF_NODE	2155:26	2155:26	8	(
ARGUMENT	2155:27	2155:27	8	tif
FIELD	2155:27	2155:27	9	tif
LEAF_NODE	2155:27	2155:27	10	tif
LEAF_NODE	2155:30	2155:30	8	,
ARGUMENT	2155:31	2155:31	8	direntry
FIELD	2155:31	2155:31	9	direntry
LEAF_NODE	2155:31	2155:31	10	direntry
LEAF_NODE	2155:39	2155:39	8	,
ARGUMENT	2155:40	2155:40	8	& count
UNARY_EXPR	2155:40	2155:41	9	& count
UNARY_OPERATOR	2155:40	2155:40	10	&
LEAF_NODE	2155:40	2155:40	11	&
FIELD	2155:41	2155:41	10	count
LEAF_NODE	2155:41	2155:41	11	count
LEAF_NODE	2155:46	2155:46	8	,
ARGUMENT	2155:47	2155:47	8	8
FIELD	2155:47	2155:47	9	8
LEAF_NODE	2155:47	2155:47	10	8
LEAF_NODE	2155:48	2155:48	8	,
ARGUMENT	2155:49	2155:49	8	& origdata
UNARY_EXPR	2155:49	2155:50	9	& origdata
UNARY_OPERATOR	2155:49	2155:49	10	&
LEAF_NODE	2155:49	2155:49	11	&
FIELD	2155:50	2155:50	10	origdata
LEAF_NODE	2155:50	2155:50	11	origdata
LEAF_NODE	2155:58	2155:58	8	)
LEAF_NODE	2155:59	2155:59	4	;
SELECTION	2156:1	2157:1	3	
KEYWORD	2156:1	2156:1	4	if
LEAF_NODE	2156:1	2156:1	5	if
LEAF_NODE	2156:4	2156:4	4	(
CONDITION	2156:5	2156:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2156:5	2156:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	2156:5	2156:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2156:5	2156:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	2156:5	2156:5	8	(
FIELD	2156:6	2156:6	8	err
LEAF_NODE	2156:6	2156:6	9	err
EQ_OPERATOR	2156:9	2156:9	8	!=
LEAF_NODE	2156:9	2156:9	9	!=
FIELD	2156:11	2156:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	2156:11	2156:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	2156:32	2156:32	8	)
LEAF_NODE	2156:33	2156:33	7	||
EXPR	2156:35	2156:47	7	( origdata == 0 )
LEAF_NODE	2156:35	2156:35	8	(
FIELD	2156:36	2156:36	8	origdata
LEAF_NODE	2156:36	2156:36	9	origdata
EQ_OPERATOR	2156:44	2156:44	8	==
LEAF_NODE	2156:44	2156:44	9	==
FIELD	2156:46	2156:46	8	0
LEAF_NODE	2156:46	2156:46	9	0
LEAF_NODE	2156:47	2156:47	8	)
LEAF_NODE	2156:48	2156:48	4	)
STATEMENTS	2157:1	2160:1	4	
LEAF_NODE	2157:1	2157:1	5	{
STATEMENTS	2158:2	2159:13	5	
EXPR_STATEMENT	2158:2	2158:10	6	* value = 0 ;
EXPR	2158:2	2158:2	7	* value = 0
ASSIGN	2158:2	2158:9	8	* value = 0
LVAL	2158:2	2158:2	9	* value
UNARY_EXPR	2158:2	2158:3	10	* value
UNARY_OPERATOR	2158:2	2158:2	11	*
LEAF_NODE	2158:2	2158:2	12	*
FIELD	2158:3	2158:3	11	value
LEAF_NODE	2158:3	2158:3	12	value
ASSIGN_OP	2158:8	2158:8	9	=
LEAF_NODE	2158:8	2158:8	10	=
RVAL	2158:9	2158:9	9	0
FIELD	2158:9	2158:9	10	0
LEAF_NODE	2158:9	2158:9	11	0
LEAF_NODE	2158:10	2158:10	7	;
LEAF_NODE	2159:2	2159:2	6	return
LEAF_NODE	2159:8	2159:8	6	(
LEAF_NODE	2159:9	2159:9	6	err
LEAF_NODE	2159:12	2159:12	6	)
LEAF_NODE	2159:13	2159:13	6	;
LEAF_NODE	2160:1	2160:1	5	}
SELECTION	2161:1	2162:1	3	
KEYWORD	2161:1	2161:1	4	switch
LEAF_NODE	2161:1	2161:1	5	switch
LEAF_NODE	2161:8	2161:8	4	(
CONDITION	2161:9	2161:9	4	direntry -> tdir_type
EXPR	2161:9	2161:9	5	direntry -> tdir_type
FIELD	2161:9	2161:19	6	direntry -> tdir_type
LEAF_NODE	2161:9	2161:9	7	direntry
LEAF_NODE	2161:17	2161:17	7	->
LEAF_NODE	2161:19	2161:19	7	tdir_type
LEAF_NODE	2161:28	2161:28	4	)
STATEMENTS	2162:1	2188:1	4	
LEAF_NODE	2162:1	2162:1	5	{
STATEMENTS	2163:2	2187:32	5	
LABEL	2163:2	2163:17	6	case TIFF_LONG8 :
LEAF_NODE	2163:2	2163:2	7	case
LEAF_NODE	2163:7	2163:7	7	TIFF_LONG8
LEAF_NODE	2163:17	2163:17	7	:
LEAF_NODE	2164:3	2164:3	6	{
STATEMENTS	2165:4	2181:33	6	
SIMPLE_DECL	2165:4	2165:13	7	uint64 * m ;
VAR_DECL	2165:4	2165:12	8	uint64 * m
TYPE	2165:4	2165:10	9	uint64 *
TYPE_NAME	2165:4	2165:4	10	uint64
LEAF_NODE	2165:4	2165:4	11	uint64
POINTER	2165:10	2165:10	10	*
LEAF_NODE	2165:10	2165:10	11	*
NAME	2165:12	2165:12	9	m
LEAF_NODE	2165:12	2165:12	10	m
LEAF_NODE	2165:13	2165:13	8	;
SIMPLE_DECL	2166:4	2166:12	7	uint32 n ;
VAR_DECL	2166:4	2166:11	8	uint32 n
TYPE	2166:4	2166:4	9	uint32
TYPE_NAME	2166:4	2166:4	10	uint32
LEAF_NODE	2166:4	2166:4	11	uint32
NAME	2166:11	2166:11	9	n
LEAF_NODE	2166:11	2166:11	10	n
LEAF_NODE	2166:12	2166:12	8	;
EXPR_STATEMENT	2167:4	2167:23	7	m = ( uint64 * ) origdata ;
EXPR	2167:4	2167:4	8	m = ( uint64 * ) origdata
ASSIGN	2167:4	2167:6	9	m = ( uint64 * ) origdata
LVAL	2167:4	2167:4	10	m
FIELD	2167:4	2167:4	11	m
LEAF_NODE	2167:4	2167:4	12	m
ASSIGN_OP	2167:5	2167:5	10	=
LEAF_NODE	2167:5	2167:5	11	=
RVAL	2167:6	2167:15	10	( uint64 * ) origdata
LEAF_NODE	2167:6	2167:6	11	(
TYPE_NAME	2167:7	2167:7	11	uint64
LEAF_NODE	2167:7	2167:7	12	uint64
LEAF_NODE	2167:13	2167:13	11	*
LEAF_NODE	2167:14	2167:14	11	)
FIELD	2167:15	2167:15	11	origdata
LEAF_NODE	2167:15	2167:15	12	origdata
LEAF_NODE	2167:23	2167:23	8	;
ITERATION	2168:4	2169:4	7	
KEYWORD	2168:4	2168:4	8	for
LEAF_NODE	2168:4	2168:4	9	for
LEAF_NODE	2168:8	2168:8	8	(
FOR_INIT	2168:9	2168:12	8	n = 0 ;
EXPR	2168:9	2168:9	9	n = 0
ASSIGN	2168:9	2168:11	10	n = 0
LVAL	2168:9	2168:9	11	n
FIELD	2168:9	2168:9	12	n
LEAF_NODE	2168:9	2168:9	13	n
ASSIGN_OP	2168:10	2168:10	11	=
LEAF_NODE	2168:10	2168:10	12	=
RVAL	2168:11	2168:11	11	0
FIELD	2168:11	2168:11	12	0
LEAF_NODE	2168:11	2168:11	13	0
LEAF_NODE	2168:12	2168:12	9	;
CONDITION	2168:14	2168:14	8	n < count
EXPR	2168:14	2168:16	9	n < count
FIELD	2168:14	2168:14	10	n
LEAF_NODE	2168:14	2168:14	11	n
REL_OPERATOR	2168:15	2168:15	10	<
LEAF_NODE	2168:15	2168:15	11	<
FIELD	2168:16	2168:16	10	count
LEAF_NODE	2168:16	2168:16	11	count
LEAF_NODE	2168:21	2168:21	8	;
FOR_EXPR	2168:23	2168:23	8	n ++
EXPR	2168:23	2168:23	9	n ++
FIELD	2168:23	2168:24	10	n ++
LEAF_NODE	2168:23	2168:23	11	n
LEAF_NODE	2168:24	2168:24	11	++
LEAF_NODE	2168:26	2168:26	8	)
STATEMENTS	2169:4	2179:4	8	
LEAF_NODE	2169:4	2169:4	9	{
STATEMENTS	2170:5	2178:5	9	
SELECTION	2170:5	2171:6	10	
KEYWORD	2170:5	2170:5	11	if
LEAF_NODE	2170:5	2170:5	12	if
LEAF_NODE	2170:8	2170:8	11	(
CONDITION	2170:9	2170:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2170:9	2170:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2170:9	2170:14	13	tif -> tif_flags
LEAF_NODE	2170:9	2170:9	14	tif
LEAF_NODE	2170:12	2170:12	14	->
LEAF_NODE	2170:14	2170:14	14	tif_flags
LEAF_NODE	2170:23	2170:23	13	&
FIELD	2170:24	2170:24	13	TIFF_SWAB
LEAF_NODE	2170:24	2170:24	14	TIFF_SWAB
LEAF_NODE	2170:33	2170:33	11	)
STATEMENTS	2171:6	2171:6	11	
EXPR_STATEMENT	2171:6	2171:22	12	TIFFSwabLong8 ( m ) ;
EXPR	2171:6	2171:6	13	TIFFSwabLong8 ( m )
FUNCTION_CALL	2171:6	2171:21	14	TIFFSwabLong8 ( m )
CALLEE	2171:6	2171:6	15	TIFFSwabLong8
LEAF_NODE	2171:6	2171:6	16	TIFFSwabLong8
LEAF_NODE	2171:19	2171:19	15	(
ARGUMENT	2171:20	2171:20	15	m
FIELD	2171:20	2171:20	16	m
LEAF_NODE	2171:20	2171:20	17	m
LEAF_NODE	2171:21	2171:21	15	)
LEAF_NODE	2171:22	2171:22	13	;
EXPR_STATEMENT	2172:5	2172:50	10	err = TIFFReadDirEntryCheckRangeSlong8Long8 ( * m ) ;
EXPR	2172:5	2172:5	11	err = TIFFReadDirEntryCheckRangeSlong8Long8 ( * m )
ASSIGN	2172:5	2172:9	12	err = TIFFReadDirEntryCheckRangeSlong8Long8 ( * m )
LVAL	2172:5	2172:5	13	err
FIELD	2172:5	2172:5	14	err
LEAF_NODE	2172:5	2172:5	15	err
ASSIGN_OP	2172:8	2172:8	13	=
LEAF_NODE	2172:8	2172:8	14	=
RVAL	2172:9	2172:9	13	TIFFReadDirEntryCheckRangeSlong8Long8 ( * m )
FUNCTION_CALL	2172:9	2172:49	14	TIFFReadDirEntryCheckRangeSlong8Long8 ( * m )
CALLEE	2172:9	2172:9	15	TIFFReadDirEntryCheckRangeSlong8Long8
LEAF_NODE	2172:9	2172:9	16	TIFFReadDirEntryCheckRangeSlong8Long8
LEAF_NODE	2172:46	2172:46	15	(
ARGUMENT	2172:47	2172:47	15	* m
UNARY_EXPR	2172:47	2172:48	16	* m
UNARY_OPERATOR	2172:47	2172:47	17	*
LEAF_NODE	2172:47	2172:47	18	*
FIELD	2172:48	2172:48	17	m
LEAF_NODE	2172:48	2172:48	18	m
LEAF_NODE	2172:49	2172:49	15	)
LEAF_NODE	2172:50	2172:50	11	;
SELECTION	2173:5	2174:5	10	
KEYWORD	2173:5	2173:5	11	if
LEAF_NODE	2173:5	2173:5	12	if
LEAF_NODE	2173:8	2173:8	11	(
CONDITION	2173:9	2173:9	11	err != TIFFReadDirEntryErrOk
EXPR	2173:9	2173:14	12	err != TIFFReadDirEntryErrOk
FIELD	2173:9	2173:9	13	err
LEAF_NODE	2173:9	2173:9	14	err
EQ_OPERATOR	2173:12	2173:12	13	!=
LEAF_NODE	2173:12	2173:12	14	!=
FIELD	2173:14	2173:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	2173:14	2173:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	2173:35	2173:35	11	)
STATEMENTS	2174:5	2177:5	11	
LEAF_NODE	2174:5	2174:5	12	{
STATEMENTS	2175:6	2176:17	12	
EXPR_STATEMENT	2175:6	2175:25	13	_TIFFfree ( origdata ) ;
EXPR	2175:6	2175:6	14	_TIFFfree ( origdata )
FUNCTION_CALL	2175:6	2175:24	15	_TIFFfree ( origdata )
CALLEE	2175:6	2175:6	16	_TIFFfree
LEAF_NODE	2175:6	2175:6	17	_TIFFfree
LEAF_NODE	2175:15	2175:15	16	(
ARGUMENT	2175:16	2175:16	16	origdata
FIELD	2175:16	2175:16	17	origdata
LEAF_NODE	2175:16	2175:16	18	origdata
LEAF_NODE	2175:24	2175:24	16	)
LEAF_NODE	2175:25	2175:25	14	;
LEAF_NODE	2176:6	2176:6	13	return
LEAF_NODE	2176:12	2176:12	13	(
LEAF_NODE	2176:13	2176:13	13	err
LEAF_NODE	2176:16	2176:16	13	)
LEAF_NODE	2176:17	2176:17	13	;
LEAF_NODE	2177:5	2177:5	12	}
EXPR_STATEMENT	2178:5	2178:8	10	m ++ ;
EXPR	2178:5	2178:5	11	m ++
FIELD	2178:5	2178:6	12	m ++
LEAF_NODE	2178:5	2178:5	13	m
LEAF_NODE	2178:6	2178:6	13	++
LEAF_NODE	2178:8	2178:8	11	;
LEAF_NODE	2179:4	2179:4	9	}
EXPR_STATEMENT	2180:4	2180:27	7	* value = ( int64 * ) origdata ;
EXPR	2180:4	2180:4	8	* value = ( int64 * ) origdata
ASSIGN	2180:4	2180:11	9	* value = ( int64 * ) origdata
LVAL	2180:4	2180:4	10	* value
UNARY_EXPR	2180:4	2180:5	11	* value
UNARY_OPERATOR	2180:4	2180:4	12	*
LEAF_NODE	2180:4	2180:4	13	*
FIELD	2180:5	2180:5	12	value
LEAF_NODE	2180:5	2180:5	13	value
ASSIGN_OP	2180:10	2180:10	10	=
LEAF_NODE	2180:10	2180:10	11	=
RVAL	2180:11	2180:19	10	( int64 * ) origdata
LEAF_NODE	2180:11	2180:11	11	(
TYPE_NAME	2180:12	2180:12	11	int64
LEAF_NODE	2180:12	2180:12	12	int64
LEAF_NODE	2180:17	2180:17	11	*
LEAF_NODE	2180:18	2180:18	11	)
FIELD	2180:19	2180:19	11	origdata
LEAF_NODE	2180:19	2180:19	12	origdata
LEAF_NODE	2180:27	2180:27	8	;
LEAF_NODE	2181:4	2181:4	7	return
LEAF_NODE	2181:10	2181:10	7	(
LEAF_NODE	2181:11	2181:11	7	TIFFReadDirEntryErrOk
LEAF_NODE	2181:32	2181:32	7	)
LEAF_NODE	2181:33	2181:33	7	;
LEAF_NODE	2182:3	2182:3	6	}
LABEL	2183:2	2183:18	6	case TIFF_SLONG8 :
LEAF_NODE	2183:2	2183:2	7	case
LEAF_NODE	2183:7	2183:7	7	TIFF_SLONG8
LEAF_NODE	2183:18	2183:18	7	:
EXPR_STATEMENT	2184:3	2184:26	6	* value = ( int64 * ) origdata ;
EXPR	2184:3	2184:3	7	* value = ( int64 * ) origdata
ASSIGN	2184:3	2184:10	8	* value = ( int64 * ) origdata
LVAL	2184:3	2184:3	9	* value
UNARY_EXPR	2184:3	2184:4	10	* value
UNARY_OPERATOR	2184:3	2184:3	11	*
LEAF_NODE	2184:3	2184:3	12	*
FIELD	2184:4	2184:4	11	value
LEAF_NODE	2184:4	2184:4	12	value
ASSIGN_OP	2184:9	2184:9	9	=
LEAF_NODE	2184:9	2184:9	10	=
RVAL	2184:10	2184:18	9	( int64 * ) origdata
LEAF_NODE	2184:10	2184:10	10	(
TYPE_NAME	2184:11	2184:11	10	int64
LEAF_NODE	2184:11	2184:11	11	int64
LEAF_NODE	2184:16	2184:16	10	*
LEAF_NODE	2184:17	2184:17	10	)
FIELD	2184:18	2184:18	10	origdata
LEAF_NODE	2184:18	2184:18	11	origdata
LEAF_NODE	2184:26	2184:26	7	;
SELECTION	2185:3	2186:4	6	
KEYWORD	2185:3	2185:3	7	if
LEAF_NODE	2185:3	2185:3	8	if
LEAF_NODE	2185:6	2185:6	7	(
CONDITION	2185:7	2185:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	2185:7	2185:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	2185:7	2185:12	9	tif -> tif_flags
LEAF_NODE	2185:7	2185:7	10	tif
LEAF_NODE	2185:10	2185:10	10	->
LEAF_NODE	2185:12	2185:12	10	tif_flags
LEAF_NODE	2185:21	2185:21	9	&
FIELD	2185:22	2185:22	9	TIFF_SWAB
LEAF_NODE	2185:22	2185:22	10	TIFF_SWAB
LEAF_NODE	2185:31	2185:31	7	)
STATEMENTS	2186:4	2186:4	7	
EXPR_STATEMENT	2186:4	2186:49	8	TIFFSwabArrayOfLong8 ( ( uint64 * ) ( * value ) , count ) ;
EXPR	2186:4	2186:4	9	TIFFSwabArrayOfLong8 ( ( uint64 * ) ( * value ) , count )
FUNCTION_CALL	2186:4	2186:48	10	TIFFSwabArrayOfLong8 ( ( uint64 * ) ( * value ) , count )
CALLEE	2186:4	2186:4	11	TIFFSwabArrayOfLong8
LEAF_NODE	2186:4	2186:4	12	TIFFSwabArrayOfLong8
LEAF_NODE	2186:24	2186:24	11	(
ARGUMENT	2186:25	2186:41	11	( uint64 * ) ( * value )
LEAF_NODE	2186:25	2186:25	12	(
TYPE_NAME	2186:26	2186:26	12	uint64
LEAF_NODE	2186:26	2186:26	13	uint64
LEAF_NODE	2186:32	2186:32	12	*
LEAF_NODE	2186:33	2186:33	12	)
LEAF_NODE	2186:34	2186:34	12	(
UNARY_EXPR	2186:35	2186:36	12	* value
UNARY_OPERATOR	2186:35	2186:35	13	*
LEAF_NODE	2186:35	2186:35	14	*
FIELD	2186:36	2186:36	13	value
LEAF_NODE	2186:36	2186:36	14	value
LEAF_NODE	2186:41	2186:41	12	)
LEAF_NODE	2186:42	2186:42	11	,
ARGUMENT	2186:43	2186:43	11	count
FIELD	2186:43	2186:43	12	count
LEAF_NODE	2186:43	2186:43	13	count
LEAF_NODE	2186:48	2186:48	11	)
LEAF_NODE	2186:49	2186:49	9	;
LEAF_NODE	2187:3	2187:3	6	return
LEAF_NODE	2187:9	2187:9	6	(
LEAF_NODE	2187:10	2187:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	2187:31	2187:31	6	)
LEAF_NODE	2187:32	2187:32	6	;
LEAF_NODE	2188:1	2188:1	5	}
EXPR_STATEMENT	2189:1	2189:34	3	data = ( int64 * ) _TIFFmalloc ( count * 8 ) ;
EXPR	2189:1	2189:1	4	data = ( int64 * ) _TIFFmalloc ( count * 8 )
ASSIGN	2189:1	2189:6	5	data = ( int64 * ) _TIFFmalloc ( count * 8 )
LVAL	2189:1	2189:1	6	data
FIELD	2189:1	2189:1	7	data
LEAF_NODE	2189:1	2189:1	8	data
ASSIGN_OP	2189:5	2189:5	6	=
LEAF_NODE	2189:5	2189:5	7	=
RVAL	2189:6	2189:14	6	( int64 * ) _TIFFmalloc ( count * 8 )
LEAF_NODE	2189:6	2189:6	7	(
TYPE_NAME	2189:7	2189:7	7	int64
LEAF_NODE	2189:7	2189:7	8	int64
LEAF_NODE	2189:12	2189:12	7	*
LEAF_NODE	2189:13	2189:13	7	)
FUNCTION_CALL	2189:14	2189:33	7	_TIFFmalloc ( count * 8 )
CALLEE	2189:14	2189:14	8	_TIFFmalloc
LEAF_NODE	2189:14	2189:14	9	_TIFFmalloc
LEAF_NODE	2189:25	2189:25	8	(
ARGUMENT	2189:26	2189:32	8	count * 8
FIELD	2189:26	2189:26	9	count
LEAF_NODE	2189:26	2189:26	10	count
LEAF_NODE	2189:31	2189:31	9	*
FIELD	2189:32	2189:32	9	8
LEAF_NODE	2189:32	2189:32	10	8
LEAF_NODE	2189:33	2189:33	8	)
LEAF_NODE	2189:34	2189:34	4	;
SELECTION	2190:1	2191:1	3	
KEYWORD	2190:1	2190:1	4	if
LEAF_NODE	2190:1	2190:1	5	if
LEAF_NODE	2190:4	2190:4	4	(
CONDITION	2190:5	2190:5	4	data == 0
EXPR	2190:5	2190:11	5	data == 0
FIELD	2190:5	2190:5	6	data
LEAF_NODE	2190:5	2190:5	7	data
EQ_OPERATOR	2190:9	2190:9	6	==
LEAF_NODE	2190:9	2190:9	7	==
FIELD	2190:11	2190:11	6	0
LEAF_NODE	2190:11	2190:11	7	0
LEAF_NODE	2190:12	2190:12	4	)
STATEMENTS	2191:1	2194:1	4	
LEAF_NODE	2191:1	2191:1	5	{
STATEMENTS	2192:2	2193:34	5	
EXPR_STATEMENT	2192:2	2192:21	6	_TIFFfree ( origdata ) ;
EXPR	2192:2	2192:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	2192:2	2192:20	8	_TIFFfree ( origdata )
CALLEE	2192:2	2192:2	9	_TIFFfree
LEAF_NODE	2192:2	2192:2	10	_TIFFfree
LEAF_NODE	2192:11	2192:11	9	(
ARGUMENT	2192:12	2192:12	9	origdata
FIELD	2192:12	2192:12	10	origdata
LEAF_NODE	2192:12	2192:12	11	origdata
LEAF_NODE	2192:20	2192:20	9	)
LEAF_NODE	2192:21	2192:21	7	;
LEAF_NODE	2193:2	2193:2	6	return
LEAF_NODE	2193:8	2193:8	6	(
LEAF_NODE	2193:9	2193:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	2193:33	2193:33	6	)
LEAF_NODE	2193:34	2193:34	6	;
LEAF_NODE	2194:1	2194:1	5	}
SELECTION	2195:1	2196:1	3	
KEYWORD	2195:1	2195:1	4	switch
LEAF_NODE	2195:1	2195:1	5	switch
LEAF_NODE	2195:8	2195:8	4	(
CONDITION	2195:9	2195:9	4	direntry -> tdir_type
EXPR	2195:9	2195:9	5	direntry -> tdir_type
FIELD	2195:9	2195:19	6	direntry -> tdir_type
LEAF_NODE	2195:9	2195:9	7	direntry
LEAF_NODE	2195:17	2195:17	7	->
LEAF_NODE	2195:19	2195:19	7	tdir_type
LEAF_NODE	2195:28	2195:28	4	)
STATEMENTS	2196:1	2279:1	4	
LEAF_NODE	2196:1	2196:1	5	{
STATEMENTS	2197:2	2278:3	5	
LABEL	2197:2	2197:16	6	case TIFF_BYTE :
LEAF_NODE	2197:2	2197:2	7	case
LEAF_NODE	2197:7	2197:7	7	TIFF_BYTE
LEAF_NODE	2197:16	2197:16	7	:
LEAF_NODE	2198:3	2198:3	6	{
STATEMENTS	2199:4	2204:4	6	
SIMPLE_DECL	2199:4	2199:13	7	uint8 * ma ;
VAR_DECL	2199:4	2199:11	8	uint8 * ma
TYPE	2199:4	2199:9	9	uint8 *
TYPE_NAME	2199:4	2199:4	10	uint8
LEAF_NODE	2199:4	2199:4	11	uint8
POINTER	2199:9	2199:9	10	*
LEAF_NODE	2199:9	2199:9	11	*
NAME	2199:11	2199:11	9	ma
LEAF_NODE	2199:11	2199:11	10	ma
LEAF_NODE	2199:13	2199:13	8	;
SIMPLE_DECL	2200:4	2200:13	7	int64 * mb ;
VAR_DECL	2200:4	2200:11	8	int64 * mb
TYPE	2200:4	2200:9	9	int64 *
TYPE_NAME	2200:4	2200:4	10	int64
LEAF_NODE	2200:4	2200:4	11	int64
POINTER	2200:9	2200:9	10	*
LEAF_NODE	2200:9	2200:9	11	*
NAME	2200:11	2200:11	9	mb
LEAF_NODE	2200:11	2200:11	10	mb
LEAF_NODE	2200:13	2200:13	8	;
SIMPLE_DECL	2201:4	2201:12	7	uint32 n ;
VAR_DECL	2201:4	2201:11	8	uint32 n
TYPE	2201:4	2201:4	9	uint32
TYPE_NAME	2201:4	2201:4	10	uint32
LEAF_NODE	2201:4	2201:4	11	uint32
NAME	2201:11	2201:11	9	n
LEAF_NODE	2201:11	2201:11	10	n
LEAF_NODE	2201:12	2201:12	8	;
EXPR_STATEMENT	2202:4	2202:23	7	ma = ( uint8 * ) origdata ;
EXPR	2202:4	2202:4	8	ma = ( uint8 * ) origdata
ASSIGN	2202:4	2202:7	9	ma = ( uint8 * ) origdata
LVAL	2202:4	2202:4	10	ma
FIELD	2202:4	2202:4	11	ma
LEAF_NODE	2202:4	2202:4	12	ma
ASSIGN_OP	2202:6	2202:6	10	=
LEAF_NODE	2202:6	2202:6	11	=
RVAL	2202:7	2202:15	10	( uint8 * ) origdata
LEAF_NODE	2202:7	2202:7	11	(
TYPE_NAME	2202:8	2202:8	11	uint8
LEAF_NODE	2202:8	2202:8	12	uint8
LEAF_NODE	2202:13	2202:13	11	*
LEAF_NODE	2202:14	2202:14	11	)
FIELD	2202:15	2202:15	11	origdata
LEAF_NODE	2202:15	2202:15	12	origdata
LEAF_NODE	2202:23	2202:23	8	;
EXPR_STATEMENT	2203:4	2203:11	7	mb = data ;
EXPR	2203:4	2203:4	8	mb = data
ASSIGN	2203:4	2203:7	9	mb = data
LVAL	2203:4	2203:4	10	mb
FIELD	2203:4	2203:4	11	mb
LEAF_NODE	2203:4	2203:4	12	mb
ASSIGN_OP	2203:6	2203:6	10	=
LEAF_NODE	2203:6	2203:6	11	=
RVAL	2203:7	2203:7	10	data
FIELD	2203:7	2203:7	11	data
LEAF_NODE	2203:7	2203:7	12	data
LEAF_NODE	2203:11	2203:11	8	;
ITERATION	2204:4	2205:5	7	
KEYWORD	2204:4	2204:4	8	for
LEAF_NODE	2204:4	2204:4	9	for
LEAF_NODE	2204:8	2204:8	8	(
FOR_INIT	2204:9	2204:12	8	n = 0 ;
EXPR	2204:9	2204:9	9	n = 0
ASSIGN	2204:9	2204:11	10	n = 0
LVAL	2204:9	2204:9	11	n
FIELD	2204:9	2204:9	12	n
LEAF_NODE	2204:9	2204:9	13	n
ASSIGN_OP	2204:10	2204:10	11	=
LEAF_NODE	2204:10	2204:10	12	=
RVAL	2204:11	2204:11	11	0
FIELD	2204:11	2204:11	12	0
LEAF_NODE	2204:11	2204:11	13	0
LEAF_NODE	2204:12	2204:12	9	;
CONDITION	2204:14	2204:14	8	n < count
EXPR	2204:14	2204:16	9	n < count
FIELD	2204:14	2204:14	10	n
LEAF_NODE	2204:14	2204:14	11	n
REL_OPERATOR	2204:15	2204:15	10	<
LEAF_NODE	2204:15	2204:15	11	<
FIELD	2204:16	2204:16	10	count
LEAF_NODE	2204:16	2204:16	11	count
LEAF_NODE	2204:21	2204:21	8	;
FOR_EXPR	2204:23	2204:23	8	n ++
EXPR	2204:23	2204:23	9	n ++
FIELD	2204:23	2204:24	10	n ++
LEAF_NODE	2204:23	2204:23	11	n
LEAF_NODE	2204:24	2204:24	11	++
LEAF_NODE	2204:26	2204:26	8	)
STATEMENTS	2205:5	2205:5	8	
EXPR_STATEMENT	2205:5	2205:25	9	* mb ++ = ( int64 ) ( * ma ++ ) ;
EXPR	2205:5	2205:5	10	* mb ++ = ( int64 ) ( * ma ++ )
ASSIGN	2205:5	2205:11	11	* mb ++ = ( int64 ) ( * ma ++ )
LVAL	2205:5	2205:5	12	* mb ++
UNARY_EXPR	2205:5	2205:6	13	* mb ++
UNARY_OPERATOR	2205:5	2205:5	14	*
LEAF_NODE	2205:5	2205:5	15	*
FIELD	2205:6	2205:8	14	mb ++
LEAF_NODE	2205:6	2205:6	15	mb
LEAF_NODE	2205:8	2205:8	15	++
ASSIGN_OP	2205:10	2205:10	12	=
LEAF_NODE	2205:10	2205:10	13	=
RVAL	2205:11	2205:24	12	( int64 ) ( * ma ++ )
LEAF_NODE	2205:11	2205:11	13	(
TYPE_NAME	2205:12	2205:12	13	int64
LEAF_NODE	2205:12	2205:12	14	int64
LEAF_NODE	2205:17	2205:17	13	)
LEAF_NODE	2205:18	2205:18	13	(
UNARY_EXPR	2205:19	2205:20	13	* ma ++
UNARY_OPERATOR	2205:19	2205:19	14	*
LEAF_NODE	2205:19	2205:19	15	*
FIELD	2205:20	2205:22	14	ma ++
LEAF_NODE	2205:20	2205:20	15	ma
LEAF_NODE	2205:22	2205:22	15	++
LEAF_NODE	2205:24	2205:24	13	)
LEAF_NODE	2205:25	2205:25	10	;
LEAF_NODE	2206:3	2206:3	6	}
JUMP_STATEMENT	2207:3	2207:8	6	break DESTINATION ;
KEYWORD	2207:3	2207:3	7	break
LEAF_NODE	2207:3	2207:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2207:8	2207:8	7	;
LABEL	2208:2	2208:17	6	case TIFF_SBYTE :
LEAF_NODE	2208:2	2208:2	7	case
LEAF_NODE	2208:7	2208:7	7	TIFF_SBYTE
LEAF_NODE	2208:17	2208:17	7	:
LEAF_NODE	2209:3	2209:3	6	{
STATEMENTS	2210:4	2215:4	6	
SIMPLE_DECL	2210:4	2210:12	7	int8 * ma ;
VAR_DECL	2210:4	2210:10	8	int8 * ma
TYPE	2210:4	2210:8	9	int8 *
TYPE_NAME	2210:4	2210:4	10	int8
LEAF_NODE	2210:4	2210:4	11	int8
POINTER	2210:8	2210:8	10	*
LEAF_NODE	2210:8	2210:8	11	*
NAME	2210:10	2210:10	9	ma
LEAF_NODE	2210:10	2210:10	10	ma
LEAF_NODE	2210:12	2210:12	8	;
SIMPLE_DECL	2211:4	2211:13	7	int64 * mb ;
VAR_DECL	2211:4	2211:11	8	int64 * mb
TYPE	2211:4	2211:9	9	int64 *
TYPE_NAME	2211:4	2211:4	10	int64
LEAF_NODE	2211:4	2211:4	11	int64
POINTER	2211:9	2211:9	10	*
LEAF_NODE	2211:9	2211:9	11	*
NAME	2211:11	2211:11	9	mb
LEAF_NODE	2211:11	2211:11	10	mb
LEAF_NODE	2211:13	2211:13	8	;
SIMPLE_DECL	2212:4	2212:12	7	uint32 n ;
VAR_DECL	2212:4	2212:11	8	uint32 n
TYPE	2212:4	2212:4	9	uint32
TYPE_NAME	2212:4	2212:4	10	uint32
LEAF_NODE	2212:4	2212:4	11	uint32
NAME	2212:11	2212:11	9	n
LEAF_NODE	2212:11	2212:11	10	n
LEAF_NODE	2212:12	2212:12	8	;
EXPR_STATEMENT	2213:4	2213:22	7	ma = ( int8 * ) origdata ;
EXPR	2213:4	2213:4	8	ma = ( int8 * ) origdata
ASSIGN	2213:4	2213:7	9	ma = ( int8 * ) origdata
LVAL	2213:4	2213:4	10	ma
FIELD	2213:4	2213:4	11	ma
LEAF_NODE	2213:4	2213:4	12	ma
ASSIGN_OP	2213:6	2213:6	10	=
LEAF_NODE	2213:6	2213:6	11	=
RVAL	2213:7	2213:14	10	( int8 * ) origdata
LEAF_NODE	2213:7	2213:7	11	(
TYPE_NAME	2213:8	2213:8	11	int8
LEAF_NODE	2213:8	2213:8	12	int8
LEAF_NODE	2213:12	2213:12	11	*
LEAF_NODE	2213:13	2213:13	11	)
FIELD	2213:14	2213:14	11	origdata
LEAF_NODE	2213:14	2213:14	12	origdata
LEAF_NODE	2213:22	2213:22	8	;
EXPR_STATEMENT	2214:4	2214:11	7	mb = data ;
EXPR	2214:4	2214:4	8	mb = data
ASSIGN	2214:4	2214:7	9	mb = data
LVAL	2214:4	2214:4	10	mb
FIELD	2214:4	2214:4	11	mb
LEAF_NODE	2214:4	2214:4	12	mb
ASSIGN_OP	2214:6	2214:6	10	=
LEAF_NODE	2214:6	2214:6	11	=
RVAL	2214:7	2214:7	10	data
FIELD	2214:7	2214:7	11	data
LEAF_NODE	2214:7	2214:7	12	data
LEAF_NODE	2214:11	2214:11	8	;
ITERATION	2215:4	2216:5	7	
KEYWORD	2215:4	2215:4	8	for
LEAF_NODE	2215:4	2215:4	9	for
LEAF_NODE	2215:8	2215:8	8	(
FOR_INIT	2215:9	2215:12	8	n = 0 ;
EXPR	2215:9	2215:9	9	n = 0
ASSIGN	2215:9	2215:11	10	n = 0
LVAL	2215:9	2215:9	11	n
FIELD	2215:9	2215:9	12	n
LEAF_NODE	2215:9	2215:9	13	n
ASSIGN_OP	2215:10	2215:10	11	=
LEAF_NODE	2215:10	2215:10	12	=
RVAL	2215:11	2215:11	11	0
FIELD	2215:11	2215:11	12	0
LEAF_NODE	2215:11	2215:11	13	0
LEAF_NODE	2215:12	2215:12	9	;
CONDITION	2215:14	2215:14	8	n < count
EXPR	2215:14	2215:16	9	n < count
FIELD	2215:14	2215:14	10	n
LEAF_NODE	2215:14	2215:14	11	n
REL_OPERATOR	2215:15	2215:15	10	<
LEAF_NODE	2215:15	2215:15	11	<
FIELD	2215:16	2215:16	10	count
LEAF_NODE	2215:16	2215:16	11	count
LEAF_NODE	2215:21	2215:21	8	;
FOR_EXPR	2215:23	2215:23	8	n ++
EXPR	2215:23	2215:23	9	n ++
FIELD	2215:23	2215:24	10	n ++
LEAF_NODE	2215:23	2215:23	11	n
LEAF_NODE	2215:24	2215:24	11	++
LEAF_NODE	2215:26	2215:26	8	)
STATEMENTS	2216:5	2216:5	8	
EXPR_STATEMENT	2216:5	2216:25	9	* mb ++ = ( int64 ) ( * ma ++ ) ;
EXPR	2216:5	2216:5	10	* mb ++ = ( int64 ) ( * ma ++ )
ASSIGN	2216:5	2216:11	11	* mb ++ = ( int64 ) ( * ma ++ )
LVAL	2216:5	2216:5	12	* mb ++
UNARY_EXPR	2216:5	2216:6	13	* mb ++
UNARY_OPERATOR	2216:5	2216:5	14	*
LEAF_NODE	2216:5	2216:5	15	*
FIELD	2216:6	2216:8	14	mb ++
LEAF_NODE	2216:6	2216:6	15	mb
LEAF_NODE	2216:8	2216:8	15	++
ASSIGN_OP	2216:10	2216:10	12	=
LEAF_NODE	2216:10	2216:10	13	=
RVAL	2216:11	2216:24	12	( int64 ) ( * ma ++ )
LEAF_NODE	2216:11	2216:11	13	(
TYPE_NAME	2216:12	2216:12	13	int64
LEAF_NODE	2216:12	2216:12	14	int64
LEAF_NODE	2216:17	2216:17	13	)
LEAF_NODE	2216:18	2216:18	13	(
UNARY_EXPR	2216:19	2216:20	13	* ma ++
UNARY_OPERATOR	2216:19	2216:19	14	*
LEAF_NODE	2216:19	2216:19	15	*
FIELD	2216:20	2216:22	14	ma ++
LEAF_NODE	2216:20	2216:20	15	ma
LEAF_NODE	2216:22	2216:22	15	++
LEAF_NODE	2216:24	2216:24	13	)
LEAF_NODE	2216:25	2216:25	10	;
LEAF_NODE	2217:3	2217:3	6	}
JUMP_STATEMENT	2218:3	2218:8	6	break DESTINATION ;
KEYWORD	2218:3	2218:3	7	break
LEAF_NODE	2218:3	2218:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2218:8	2218:8	7	;
LABEL	2219:2	2219:17	6	case TIFF_SHORT :
LEAF_NODE	2219:2	2219:2	7	case
LEAF_NODE	2219:7	2219:7	7	TIFF_SHORT
LEAF_NODE	2219:17	2219:17	7	:
LEAF_NODE	2220:3	2220:3	6	{
STATEMENTS	2221:4	2226:4	6	
SIMPLE_DECL	2221:4	2221:14	7	uint16 * ma ;
VAR_DECL	2221:4	2221:12	8	uint16 * ma
TYPE	2221:4	2221:10	9	uint16 *
TYPE_NAME	2221:4	2221:4	10	uint16
LEAF_NODE	2221:4	2221:4	11	uint16
POINTER	2221:10	2221:10	10	*
LEAF_NODE	2221:10	2221:10	11	*
NAME	2221:12	2221:12	9	ma
LEAF_NODE	2221:12	2221:12	10	ma
LEAF_NODE	2221:14	2221:14	8	;
SIMPLE_DECL	2222:4	2222:13	7	int64 * mb ;
VAR_DECL	2222:4	2222:11	8	int64 * mb
TYPE	2222:4	2222:9	9	int64 *
TYPE_NAME	2222:4	2222:4	10	int64
LEAF_NODE	2222:4	2222:4	11	int64
POINTER	2222:9	2222:9	10	*
LEAF_NODE	2222:9	2222:9	11	*
NAME	2222:11	2222:11	9	mb
LEAF_NODE	2222:11	2222:11	10	mb
LEAF_NODE	2222:13	2222:13	8	;
SIMPLE_DECL	2223:4	2223:12	7	uint32 n ;
VAR_DECL	2223:4	2223:11	8	uint32 n
TYPE	2223:4	2223:4	9	uint32
TYPE_NAME	2223:4	2223:4	10	uint32
LEAF_NODE	2223:4	2223:4	11	uint32
NAME	2223:11	2223:11	9	n
LEAF_NODE	2223:11	2223:11	10	n
LEAF_NODE	2223:12	2223:12	8	;
EXPR_STATEMENT	2224:4	2224:24	7	ma = ( uint16 * ) origdata ;
EXPR	2224:4	2224:4	8	ma = ( uint16 * ) origdata
ASSIGN	2224:4	2224:7	9	ma = ( uint16 * ) origdata
LVAL	2224:4	2224:4	10	ma
FIELD	2224:4	2224:4	11	ma
LEAF_NODE	2224:4	2224:4	12	ma
ASSIGN_OP	2224:6	2224:6	10	=
LEAF_NODE	2224:6	2224:6	11	=
RVAL	2224:7	2224:16	10	( uint16 * ) origdata
LEAF_NODE	2224:7	2224:7	11	(
TYPE_NAME	2224:8	2224:8	11	uint16
LEAF_NODE	2224:8	2224:8	12	uint16
LEAF_NODE	2224:14	2224:14	11	*
LEAF_NODE	2224:15	2224:15	11	)
FIELD	2224:16	2224:16	11	origdata
LEAF_NODE	2224:16	2224:16	12	origdata
LEAF_NODE	2224:24	2224:24	8	;
EXPR_STATEMENT	2225:4	2225:11	7	mb = data ;
EXPR	2225:4	2225:4	8	mb = data
ASSIGN	2225:4	2225:7	9	mb = data
LVAL	2225:4	2225:4	10	mb
FIELD	2225:4	2225:4	11	mb
LEAF_NODE	2225:4	2225:4	12	mb
ASSIGN_OP	2225:6	2225:6	10	=
LEAF_NODE	2225:6	2225:6	11	=
RVAL	2225:7	2225:7	10	data
FIELD	2225:7	2225:7	11	data
LEAF_NODE	2225:7	2225:7	12	data
LEAF_NODE	2225:11	2225:11	8	;
ITERATION	2226:4	2227:4	7	
KEYWORD	2226:4	2226:4	8	for
LEAF_NODE	2226:4	2226:4	9	for
LEAF_NODE	2226:8	2226:8	8	(
FOR_INIT	2226:9	2226:12	8	n = 0 ;
EXPR	2226:9	2226:9	9	n = 0
ASSIGN	2226:9	2226:11	10	n = 0
LVAL	2226:9	2226:9	11	n
FIELD	2226:9	2226:9	12	n
LEAF_NODE	2226:9	2226:9	13	n
ASSIGN_OP	2226:10	2226:10	11	=
LEAF_NODE	2226:10	2226:10	12	=
RVAL	2226:11	2226:11	11	0
FIELD	2226:11	2226:11	12	0
LEAF_NODE	2226:11	2226:11	13	0
LEAF_NODE	2226:12	2226:12	9	;
CONDITION	2226:14	2226:14	8	n < count
EXPR	2226:14	2226:16	9	n < count
FIELD	2226:14	2226:14	10	n
LEAF_NODE	2226:14	2226:14	11	n
REL_OPERATOR	2226:15	2226:15	10	<
LEAF_NODE	2226:15	2226:15	11	<
FIELD	2226:16	2226:16	10	count
LEAF_NODE	2226:16	2226:16	11	count
LEAF_NODE	2226:21	2226:21	8	;
FOR_EXPR	2226:23	2226:23	8	n ++
EXPR	2226:23	2226:23	9	n ++
FIELD	2226:23	2226:24	10	n ++
LEAF_NODE	2226:23	2226:23	11	n
LEAF_NODE	2226:24	2226:24	11	++
LEAF_NODE	2226:26	2226:26	8	)
STATEMENTS	2227:4	2231:4	8	
LEAF_NODE	2227:4	2227:4	9	{
STATEMENTS	2228:5	2230:5	9	
SELECTION	2228:5	2229:6	10	
KEYWORD	2228:5	2228:5	11	if
LEAF_NODE	2228:5	2228:5	12	if
LEAF_NODE	2228:8	2228:8	11	(
CONDITION	2228:9	2228:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2228:9	2228:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2228:9	2228:14	13	tif -> tif_flags
LEAF_NODE	2228:9	2228:9	14	tif
LEAF_NODE	2228:12	2228:12	14	->
LEAF_NODE	2228:14	2228:14	14	tif_flags
LEAF_NODE	2228:23	2228:23	13	&
FIELD	2228:24	2228:24	13	TIFF_SWAB
LEAF_NODE	2228:24	2228:24	14	TIFF_SWAB
LEAF_NODE	2228:33	2228:33	11	)
STATEMENTS	2229:6	2229:6	11	
EXPR_STATEMENT	2229:6	2229:23	12	TIFFSwabShort ( ma ) ;
EXPR	2229:6	2229:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	2229:6	2229:22	14	TIFFSwabShort ( ma )
CALLEE	2229:6	2229:6	15	TIFFSwabShort
LEAF_NODE	2229:6	2229:6	16	TIFFSwabShort
LEAF_NODE	2229:19	2229:19	15	(
ARGUMENT	2229:20	2229:20	15	ma
FIELD	2229:20	2229:20	16	ma
LEAF_NODE	2229:20	2229:20	17	ma
LEAF_NODE	2229:22	2229:22	15	)
LEAF_NODE	2229:23	2229:23	13	;
EXPR_STATEMENT	2230:5	2230:25	10	* mb ++ = ( int64 ) ( * ma ++ ) ;
EXPR	2230:5	2230:5	11	* mb ++ = ( int64 ) ( * ma ++ )
ASSIGN	2230:5	2230:11	12	* mb ++ = ( int64 ) ( * ma ++ )
LVAL	2230:5	2230:5	13	* mb ++
UNARY_EXPR	2230:5	2230:6	14	* mb ++
UNARY_OPERATOR	2230:5	2230:5	15	*
LEAF_NODE	2230:5	2230:5	16	*
FIELD	2230:6	2230:8	15	mb ++
LEAF_NODE	2230:6	2230:6	16	mb
LEAF_NODE	2230:8	2230:8	16	++
ASSIGN_OP	2230:10	2230:10	13	=
LEAF_NODE	2230:10	2230:10	14	=
RVAL	2230:11	2230:24	13	( int64 ) ( * ma ++ )
LEAF_NODE	2230:11	2230:11	14	(
TYPE_NAME	2230:12	2230:12	14	int64
LEAF_NODE	2230:12	2230:12	15	int64
LEAF_NODE	2230:17	2230:17	14	)
LEAF_NODE	2230:18	2230:18	14	(
UNARY_EXPR	2230:19	2230:20	14	* ma ++
UNARY_OPERATOR	2230:19	2230:19	15	*
LEAF_NODE	2230:19	2230:19	16	*
FIELD	2230:20	2230:22	15	ma ++
LEAF_NODE	2230:20	2230:20	16	ma
LEAF_NODE	2230:22	2230:22	16	++
LEAF_NODE	2230:24	2230:24	14	)
LEAF_NODE	2230:25	2230:25	11	;
LEAF_NODE	2231:4	2231:4	9	}
LEAF_NODE	2232:3	2232:3	6	}
JUMP_STATEMENT	2233:3	2233:8	6	break DESTINATION ;
KEYWORD	2233:3	2233:3	7	break
LEAF_NODE	2233:3	2233:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2233:8	2233:8	7	;
LABEL	2234:2	2234:18	6	case TIFF_SSHORT :
LEAF_NODE	2234:2	2234:2	7	case
LEAF_NODE	2234:7	2234:7	7	TIFF_SSHORT
LEAF_NODE	2234:18	2234:18	7	:
LEAF_NODE	2235:3	2235:3	6	{
STATEMENTS	2236:4	2241:4	6	
SIMPLE_DECL	2236:4	2236:13	7	int16 * ma ;
VAR_DECL	2236:4	2236:11	8	int16 * ma
TYPE	2236:4	2236:9	9	int16 *
TYPE_NAME	2236:4	2236:4	10	int16
LEAF_NODE	2236:4	2236:4	11	int16
POINTER	2236:9	2236:9	10	*
LEAF_NODE	2236:9	2236:9	11	*
NAME	2236:11	2236:11	9	ma
LEAF_NODE	2236:11	2236:11	10	ma
LEAF_NODE	2236:13	2236:13	8	;
SIMPLE_DECL	2237:4	2237:13	7	int64 * mb ;
VAR_DECL	2237:4	2237:11	8	int64 * mb
TYPE	2237:4	2237:9	9	int64 *
TYPE_NAME	2237:4	2237:4	10	int64
LEAF_NODE	2237:4	2237:4	11	int64
POINTER	2237:9	2237:9	10	*
LEAF_NODE	2237:9	2237:9	11	*
NAME	2237:11	2237:11	9	mb
LEAF_NODE	2237:11	2237:11	10	mb
LEAF_NODE	2237:13	2237:13	8	;
SIMPLE_DECL	2238:4	2238:12	7	uint32 n ;
VAR_DECL	2238:4	2238:11	8	uint32 n
TYPE	2238:4	2238:4	9	uint32
TYPE_NAME	2238:4	2238:4	10	uint32
LEAF_NODE	2238:4	2238:4	11	uint32
NAME	2238:11	2238:11	9	n
LEAF_NODE	2238:11	2238:11	10	n
LEAF_NODE	2238:12	2238:12	8	;
EXPR_STATEMENT	2239:4	2239:23	7	ma = ( int16 * ) origdata ;
EXPR	2239:4	2239:4	8	ma = ( int16 * ) origdata
ASSIGN	2239:4	2239:7	9	ma = ( int16 * ) origdata
LVAL	2239:4	2239:4	10	ma
FIELD	2239:4	2239:4	11	ma
LEAF_NODE	2239:4	2239:4	12	ma
ASSIGN_OP	2239:6	2239:6	10	=
LEAF_NODE	2239:6	2239:6	11	=
RVAL	2239:7	2239:15	10	( int16 * ) origdata
LEAF_NODE	2239:7	2239:7	11	(
TYPE_NAME	2239:8	2239:8	11	int16
LEAF_NODE	2239:8	2239:8	12	int16
LEAF_NODE	2239:13	2239:13	11	*
LEAF_NODE	2239:14	2239:14	11	)
FIELD	2239:15	2239:15	11	origdata
LEAF_NODE	2239:15	2239:15	12	origdata
LEAF_NODE	2239:23	2239:23	8	;
EXPR_STATEMENT	2240:4	2240:11	7	mb = data ;
EXPR	2240:4	2240:4	8	mb = data
ASSIGN	2240:4	2240:7	9	mb = data
LVAL	2240:4	2240:4	10	mb
FIELD	2240:4	2240:4	11	mb
LEAF_NODE	2240:4	2240:4	12	mb
ASSIGN_OP	2240:6	2240:6	10	=
LEAF_NODE	2240:6	2240:6	11	=
RVAL	2240:7	2240:7	10	data
FIELD	2240:7	2240:7	11	data
LEAF_NODE	2240:7	2240:7	12	data
LEAF_NODE	2240:11	2240:11	8	;
ITERATION	2241:4	2242:4	7	
KEYWORD	2241:4	2241:4	8	for
LEAF_NODE	2241:4	2241:4	9	for
LEAF_NODE	2241:8	2241:8	8	(
FOR_INIT	2241:9	2241:12	8	n = 0 ;
EXPR	2241:9	2241:9	9	n = 0
ASSIGN	2241:9	2241:11	10	n = 0
LVAL	2241:9	2241:9	11	n
FIELD	2241:9	2241:9	12	n
LEAF_NODE	2241:9	2241:9	13	n
ASSIGN_OP	2241:10	2241:10	11	=
LEAF_NODE	2241:10	2241:10	12	=
RVAL	2241:11	2241:11	11	0
FIELD	2241:11	2241:11	12	0
LEAF_NODE	2241:11	2241:11	13	0
LEAF_NODE	2241:12	2241:12	9	;
CONDITION	2241:14	2241:14	8	n < count
EXPR	2241:14	2241:16	9	n < count
FIELD	2241:14	2241:14	10	n
LEAF_NODE	2241:14	2241:14	11	n
REL_OPERATOR	2241:15	2241:15	10	<
LEAF_NODE	2241:15	2241:15	11	<
FIELD	2241:16	2241:16	10	count
LEAF_NODE	2241:16	2241:16	11	count
LEAF_NODE	2241:21	2241:21	8	;
FOR_EXPR	2241:23	2241:23	8	n ++
EXPR	2241:23	2241:23	9	n ++
FIELD	2241:23	2241:24	10	n ++
LEAF_NODE	2241:23	2241:23	11	n
LEAF_NODE	2241:24	2241:24	11	++
LEAF_NODE	2241:26	2241:26	8	)
STATEMENTS	2242:4	2246:4	8	
LEAF_NODE	2242:4	2242:4	9	{
STATEMENTS	2243:5	2245:5	9	
SELECTION	2243:5	2244:6	10	
KEYWORD	2243:5	2243:5	11	if
LEAF_NODE	2243:5	2243:5	12	if
LEAF_NODE	2243:8	2243:8	11	(
CONDITION	2243:9	2243:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2243:9	2243:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2243:9	2243:14	13	tif -> tif_flags
LEAF_NODE	2243:9	2243:9	14	tif
LEAF_NODE	2243:12	2243:12	14	->
LEAF_NODE	2243:14	2243:14	14	tif_flags
LEAF_NODE	2243:23	2243:23	13	&
FIELD	2243:24	2243:24	13	TIFF_SWAB
LEAF_NODE	2243:24	2243:24	14	TIFF_SWAB
LEAF_NODE	2243:33	2243:33	11	)
STATEMENTS	2244:6	2244:6	11	
EXPR_STATEMENT	2244:6	2244:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	2244:6	2244:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	2244:6	2244:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	2244:6	2244:6	15	TIFFSwabShort
LEAF_NODE	2244:6	2244:6	16	TIFFSwabShort
LEAF_NODE	2244:19	2244:19	15	(
ARGUMENT	2244:20	2244:29	15	( uint16 * ) ma
LEAF_NODE	2244:20	2244:20	16	(
TYPE_NAME	2244:21	2244:21	16	uint16
LEAF_NODE	2244:21	2244:21	17	uint16
LEAF_NODE	2244:27	2244:27	16	*
LEAF_NODE	2244:28	2244:28	16	)
FIELD	2244:29	2244:29	16	ma
LEAF_NODE	2244:29	2244:29	17	ma
LEAF_NODE	2244:31	2244:31	15	)
LEAF_NODE	2244:32	2244:32	13	;
EXPR_STATEMENT	2245:5	2245:25	10	* mb ++ = ( int64 ) ( * ma ++ ) ;
EXPR	2245:5	2245:5	11	* mb ++ = ( int64 ) ( * ma ++ )
ASSIGN	2245:5	2245:11	12	* mb ++ = ( int64 ) ( * ma ++ )
LVAL	2245:5	2245:5	13	* mb ++
UNARY_EXPR	2245:5	2245:6	14	* mb ++
UNARY_OPERATOR	2245:5	2245:5	15	*
LEAF_NODE	2245:5	2245:5	16	*
FIELD	2245:6	2245:8	15	mb ++
LEAF_NODE	2245:6	2245:6	16	mb
LEAF_NODE	2245:8	2245:8	16	++
ASSIGN_OP	2245:10	2245:10	13	=
LEAF_NODE	2245:10	2245:10	14	=
RVAL	2245:11	2245:24	13	( int64 ) ( * ma ++ )
LEAF_NODE	2245:11	2245:11	14	(
TYPE_NAME	2245:12	2245:12	14	int64
LEAF_NODE	2245:12	2245:12	15	int64
LEAF_NODE	2245:17	2245:17	14	)
LEAF_NODE	2245:18	2245:18	14	(
UNARY_EXPR	2245:19	2245:20	14	* ma ++
UNARY_OPERATOR	2245:19	2245:19	15	*
LEAF_NODE	2245:19	2245:19	16	*
FIELD	2245:20	2245:22	15	ma ++
LEAF_NODE	2245:20	2245:20	16	ma
LEAF_NODE	2245:22	2245:22	16	++
LEAF_NODE	2245:24	2245:24	14	)
LEAF_NODE	2245:25	2245:25	11	;
LEAF_NODE	2246:4	2246:4	9	}
LEAF_NODE	2247:3	2247:3	6	}
JUMP_STATEMENT	2248:3	2248:8	6	break DESTINATION ;
KEYWORD	2248:3	2248:3	7	break
LEAF_NODE	2248:3	2248:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2248:8	2248:8	7	;
LABEL	2249:2	2249:16	6	case TIFF_LONG :
LEAF_NODE	2249:2	2249:2	7	case
LEAF_NODE	2249:7	2249:7	7	TIFF_LONG
LEAF_NODE	2249:16	2249:16	7	:
LEAF_NODE	2250:3	2250:3	6	{
STATEMENTS	2251:4	2256:4	6	
SIMPLE_DECL	2251:4	2251:14	7	uint32 * ma ;
VAR_DECL	2251:4	2251:12	8	uint32 * ma
TYPE	2251:4	2251:10	9	uint32 *
TYPE_NAME	2251:4	2251:4	10	uint32
LEAF_NODE	2251:4	2251:4	11	uint32
POINTER	2251:10	2251:10	10	*
LEAF_NODE	2251:10	2251:10	11	*
NAME	2251:12	2251:12	9	ma
LEAF_NODE	2251:12	2251:12	10	ma
LEAF_NODE	2251:14	2251:14	8	;
SIMPLE_DECL	2252:4	2252:13	7	int64 * mb ;
VAR_DECL	2252:4	2252:11	8	int64 * mb
TYPE	2252:4	2252:9	9	int64 *
TYPE_NAME	2252:4	2252:4	10	int64
LEAF_NODE	2252:4	2252:4	11	int64
POINTER	2252:9	2252:9	10	*
LEAF_NODE	2252:9	2252:9	11	*
NAME	2252:11	2252:11	9	mb
LEAF_NODE	2252:11	2252:11	10	mb
LEAF_NODE	2252:13	2252:13	8	;
SIMPLE_DECL	2253:4	2253:12	7	uint32 n ;
VAR_DECL	2253:4	2253:11	8	uint32 n
TYPE	2253:4	2253:4	9	uint32
TYPE_NAME	2253:4	2253:4	10	uint32
LEAF_NODE	2253:4	2253:4	11	uint32
NAME	2253:11	2253:11	9	n
LEAF_NODE	2253:11	2253:11	10	n
LEAF_NODE	2253:12	2253:12	8	;
EXPR_STATEMENT	2254:4	2254:24	7	ma = ( uint32 * ) origdata ;
EXPR	2254:4	2254:4	8	ma = ( uint32 * ) origdata
ASSIGN	2254:4	2254:7	9	ma = ( uint32 * ) origdata
LVAL	2254:4	2254:4	10	ma
FIELD	2254:4	2254:4	11	ma
LEAF_NODE	2254:4	2254:4	12	ma
ASSIGN_OP	2254:6	2254:6	10	=
LEAF_NODE	2254:6	2254:6	11	=
RVAL	2254:7	2254:16	10	( uint32 * ) origdata
LEAF_NODE	2254:7	2254:7	11	(
TYPE_NAME	2254:8	2254:8	11	uint32
LEAF_NODE	2254:8	2254:8	12	uint32
LEAF_NODE	2254:14	2254:14	11	*
LEAF_NODE	2254:15	2254:15	11	)
FIELD	2254:16	2254:16	11	origdata
LEAF_NODE	2254:16	2254:16	12	origdata
LEAF_NODE	2254:24	2254:24	8	;
EXPR_STATEMENT	2255:4	2255:11	7	mb = data ;
EXPR	2255:4	2255:4	8	mb = data
ASSIGN	2255:4	2255:7	9	mb = data
LVAL	2255:4	2255:4	10	mb
FIELD	2255:4	2255:4	11	mb
LEAF_NODE	2255:4	2255:4	12	mb
ASSIGN_OP	2255:6	2255:6	10	=
LEAF_NODE	2255:6	2255:6	11	=
RVAL	2255:7	2255:7	10	data
FIELD	2255:7	2255:7	11	data
LEAF_NODE	2255:7	2255:7	12	data
LEAF_NODE	2255:11	2255:11	8	;
ITERATION	2256:4	2257:4	7	
KEYWORD	2256:4	2256:4	8	for
LEAF_NODE	2256:4	2256:4	9	for
LEAF_NODE	2256:8	2256:8	8	(
FOR_INIT	2256:9	2256:12	8	n = 0 ;
EXPR	2256:9	2256:9	9	n = 0
ASSIGN	2256:9	2256:11	10	n = 0
LVAL	2256:9	2256:9	11	n
FIELD	2256:9	2256:9	12	n
LEAF_NODE	2256:9	2256:9	13	n
ASSIGN_OP	2256:10	2256:10	11	=
LEAF_NODE	2256:10	2256:10	12	=
RVAL	2256:11	2256:11	11	0
FIELD	2256:11	2256:11	12	0
LEAF_NODE	2256:11	2256:11	13	0
LEAF_NODE	2256:12	2256:12	9	;
CONDITION	2256:14	2256:14	8	n < count
EXPR	2256:14	2256:16	9	n < count
FIELD	2256:14	2256:14	10	n
LEAF_NODE	2256:14	2256:14	11	n
REL_OPERATOR	2256:15	2256:15	10	<
LEAF_NODE	2256:15	2256:15	11	<
FIELD	2256:16	2256:16	10	count
LEAF_NODE	2256:16	2256:16	11	count
LEAF_NODE	2256:21	2256:21	8	;
FOR_EXPR	2256:23	2256:23	8	n ++
EXPR	2256:23	2256:23	9	n ++
FIELD	2256:23	2256:24	10	n ++
LEAF_NODE	2256:23	2256:23	11	n
LEAF_NODE	2256:24	2256:24	11	++
LEAF_NODE	2256:26	2256:26	8	)
STATEMENTS	2257:4	2261:4	8	
LEAF_NODE	2257:4	2257:4	9	{
STATEMENTS	2258:5	2260:5	9	
SELECTION	2258:5	2259:6	10	
KEYWORD	2258:5	2258:5	11	if
LEAF_NODE	2258:5	2258:5	12	if
LEAF_NODE	2258:8	2258:8	11	(
CONDITION	2258:9	2258:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2258:9	2258:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2258:9	2258:14	13	tif -> tif_flags
LEAF_NODE	2258:9	2258:9	14	tif
LEAF_NODE	2258:12	2258:12	14	->
LEAF_NODE	2258:14	2258:14	14	tif_flags
LEAF_NODE	2258:23	2258:23	13	&
FIELD	2258:24	2258:24	13	TIFF_SWAB
LEAF_NODE	2258:24	2258:24	14	TIFF_SWAB
LEAF_NODE	2258:33	2258:33	11	)
STATEMENTS	2259:6	2259:6	11	
EXPR_STATEMENT	2259:6	2259:22	12	TIFFSwabLong ( ma ) ;
EXPR	2259:6	2259:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2259:6	2259:21	14	TIFFSwabLong ( ma )
CALLEE	2259:6	2259:6	15	TIFFSwabLong
LEAF_NODE	2259:6	2259:6	16	TIFFSwabLong
LEAF_NODE	2259:18	2259:18	15	(
ARGUMENT	2259:19	2259:19	15	ma
FIELD	2259:19	2259:19	16	ma
LEAF_NODE	2259:19	2259:19	17	ma
LEAF_NODE	2259:21	2259:21	15	)
LEAF_NODE	2259:22	2259:22	13	;
EXPR_STATEMENT	2260:5	2260:25	10	* mb ++ = ( int64 ) ( * ma ++ ) ;
EXPR	2260:5	2260:5	11	* mb ++ = ( int64 ) ( * ma ++ )
ASSIGN	2260:5	2260:11	12	* mb ++ = ( int64 ) ( * ma ++ )
LVAL	2260:5	2260:5	13	* mb ++
UNARY_EXPR	2260:5	2260:6	14	* mb ++
UNARY_OPERATOR	2260:5	2260:5	15	*
LEAF_NODE	2260:5	2260:5	16	*
FIELD	2260:6	2260:8	15	mb ++
LEAF_NODE	2260:6	2260:6	16	mb
LEAF_NODE	2260:8	2260:8	16	++
ASSIGN_OP	2260:10	2260:10	13	=
LEAF_NODE	2260:10	2260:10	14	=
RVAL	2260:11	2260:24	13	( int64 ) ( * ma ++ )
LEAF_NODE	2260:11	2260:11	14	(
TYPE_NAME	2260:12	2260:12	14	int64
LEAF_NODE	2260:12	2260:12	15	int64
LEAF_NODE	2260:17	2260:17	14	)
LEAF_NODE	2260:18	2260:18	14	(
UNARY_EXPR	2260:19	2260:20	14	* ma ++
UNARY_OPERATOR	2260:19	2260:19	15	*
LEAF_NODE	2260:19	2260:19	16	*
FIELD	2260:20	2260:22	15	ma ++
LEAF_NODE	2260:20	2260:20	16	ma
LEAF_NODE	2260:22	2260:22	16	++
LEAF_NODE	2260:24	2260:24	14	)
LEAF_NODE	2260:25	2260:25	11	;
LEAF_NODE	2261:4	2261:4	9	}
LEAF_NODE	2262:3	2262:3	6	}
JUMP_STATEMENT	2263:3	2263:8	6	break DESTINATION ;
KEYWORD	2263:3	2263:3	7	break
LEAF_NODE	2263:3	2263:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2263:8	2263:8	7	;
LABEL	2264:2	2264:17	6	case TIFF_SLONG :
LEAF_NODE	2264:2	2264:2	7	case
LEAF_NODE	2264:7	2264:7	7	TIFF_SLONG
LEAF_NODE	2264:17	2264:17	7	:
LEAF_NODE	2265:3	2265:3	6	{
STATEMENTS	2266:4	2271:4	6	
SIMPLE_DECL	2266:4	2266:13	7	int32 * ma ;
VAR_DECL	2266:4	2266:11	8	int32 * ma
TYPE	2266:4	2266:9	9	int32 *
TYPE_NAME	2266:4	2266:4	10	int32
LEAF_NODE	2266:4	2266:4	11	int32
POINTER	2266:9	2266:9	10	*
LEAF_NODE	2266:9	2266:9	11	*
NAME	2266:11	2266:11	9	ma
LEAF_NODE	2266:11	2266:11	10	ma
LEAF_NODE	2266:13	2266:13	8	;
SIMPLE_DECL	2267:4	2267:13	7	int64 * mb ;
VAR_DECL	2267:4	2267:11	8	int64 * mb
TYPE	2267:4	2267:9	9	int64 *
TYPE_NAME	2267:4	2267:4	10	int64
LEAF_NODE	2267:4	2267:4	11	int64
POINTER	2267:9	2267:9	10	*
LEAF_NODE	2267:9	2267:9	11	*
NAME	2267:11	2267:11	9	mb
LEAF_NODE	2267:11	2267:11	10	mb
LEAF_NODE	2267:13	2267:13	8	;
SIMPLE_DECL	2268:4	2268:12	7	uint32 n ;
VAR_DECL	2268:4	2268:11	8	uint32 n
TYPE	2268:4	2268:4	9	uint32
TYPE_NAME	2268:4	2268:4	10	uint32
LEAF_NODE	2268:4	2268:4	11	uint32
NAME	2268:11	2268:11	9	n
LEAF_NODE	2268:11	2268:11	10	n
LEAF_NODE	2268:12	2268:12	8	;
EXPR_STATEMENT	2269:4	2269:23	7	ma = ( int32 * ) origdata ;
EXPR	2269:4	2269:4	8	ma = ( int32 * ) origdata
ASSIGN	2269:4	2269:7	9	ma = ( int32 * ) origdata
LVAL	2269:4	2269:4	10	ma
FIELD	2269:4	2269:4	11	ma
LEAF_NODE	2269:4	2269:4	12	ma
ASSIGN_OP	2269:6	2269:6	10	=
LEAF_NODE	2269:6	2269:6	11	=
RVAL	2269:7	2269:15	10	( int32 * ) origdata
LEAF_NODE	2269:7	2269:7	11	(
TYPE_NAME	2269:8	2269:8	11	int32
LEAF_NODE	2269:8	2269:8	12	int32
LEAF_NODE	2269:13	2269:13	11	*
LEAF_NODE	2269:14	2269:14	11	)
FIELD	2269:15	2269:15	11	origdata
LEAF_NODE	2269:15	2269:15	12	origdata
LEAF_NODE	2269:23	2269:23	8	;
EXPR_STATEMENT	2270:4	2270:11	7	mb = data ;
EXPR	2270:4	2270:4	8	mb = data
ASSIGN	2270:4	2270:7	9	mb = data
LVAL	2270:4	2270:4	10	mb
FIELD	2270:4	2270:4	11	mb
LEAF_NODE	2270:4	2270:4	12	mb
ASSIGN_OP	2270:6	2270:6	10	=
LEAF_NODE	2270:6	2270:6	11	=
RVAL	2270:7	2270:7	10	data
FIELD	2270:7	2270:7	11	data
LEAF_NODE	2270:7	2270:7	12	data
LEAF_NODE	2270:11	2270:11	8	;
ITERATION	2271:4	2272:4	7	
KEYWORD	2271:4	2271:4	8	for
LEAF_NODE	2271:4	2271:4	9	for
LEAF_NODE	2271:8	2271:8	8	(
FOR_INIT	2271:9	2271:12	8	n = 0 ;
EXPR	2271:9	2271:9	9	n = 0
ASSIGN	2271:9	2271:11	10	n = 0
LVAL	2271:9	2271:9	11	n
FIELD	2271:9	2271:9	12	n
LEAF_NODE	2271:9	2271:9	13	n
ASSIGN_OP	2271:10	2271:10	11	=
LEAF_NODE	2271:10	2271:10	12	=
RVAL	2271:11	2271:11	11	0
FIELD	2271:11	2271:11	12	0
LEAF_NODE	2271:11	2271:11	13	0
LEAF_NODE	2271:12	2271:12	9	;
CONDITION	2271:14	2271:14	8	n < count
EXPR	2271:14	2271:16	9	n < count
FIELD	2271:14	2271:14	10	n
LEAF_NODE	2271:14	2271:14	11	n
REL_OPERATOR	2271:15	2271:15	10	<
LEAF_NODE	2271:15	2271:15	11	<
FIELD	2271:16	2271:16	10	count
LEAF_NODE	2271:16	2271:16	11	count
LEAF_NODE	2271:21	2271:21	8	;
FOR_EXPR	2271:23	2271:23	8	n ++
EXPR	2271:23	2271:23	9	n ++
FIELD	2271:23	2271:24	10	n ++
LEAF_NODE	2271:23	2271:23	11	n
LEAF_NODE	2271:24	2271:24	11	++
LEAF_NODE	2271:26	2271:26	8	)
STATEMENTS	2272:4	2276:4	8	
LEAF_NODE	2272:4	2272:4	9	{
STATEMENTS	2273:5	2275:5	9	
SELECTION	2273:5	2274:6	10	
KEYWORD	2273:5	2273:5	11	if
LEAF_NODE	2273:5	2273:5	12	if
LEAF_NODE	2273:8	2273:8	11	(
CONDITION	2273:9	2273:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2273:9	2273:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2273:9	2273:14	13	tif -> tif_flags
LEAF_NODE	2273:9	2273:9	14	tif
LEAF_NODE	2273:12	2273:12	14	->
LEAF_NODE	2273:14	2273:14	14	tif_flags
LEAF_NODE	2273:23	2273:23	13	&
FIELD	2273:24	2273:24	13	TIFF_SWAB
LEAF_NODE	2273:24	2273:24	14	TIFF_SWAB
LEAF_NODE	2273:33	2273:33	11	)
STATEMENTS	2274:6	2274:6	11	
EXPR_STATEMENT	2274:6	2274:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	2274:6	2274:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	2274:6	2274:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	2274:6	2274:6	15	TIFFSwabLong
LEAF_NODE	2274:6	2274:6	16	TIFFSwabLong
LEAF_NODE	2274:18	2274:18	15	(
ARGUMENT	2274:19	2274:28	15	( uint32 * ) ma
LEAF_NODE	2274:19	2274:19	16	(
TYPE_NAME	2274:20	2274:20	16	uint32
LEAF_NODE	2274:20	2274:20	17	uint32
LEAF_NODE	2274:26	2274:26	16	*
LEAF_NODE	2274:27	2274:27	16	)
FIELD	2274:28	2274:28	16	ma
LEAF_NODE	2274:28	2274:28	17	ma
LEAF_NODE	2274:30	2274:30	15	)
LEAF_NODE	2274:31	2274:31	13	;
EXPR_STATEMENT	2275:5	2275:25	10	* mb ++ = ( int64 ) ( * ma ++ ) ;
EXPR	2275:5	2275:5	11	* mb ++ = ( int64 ) ( * ma ++ )
ASSIGN	2275:5	2275:11	12	* mb ++ = ( int64 ) ( * ma ++ )
LVAL	2275:5	2275:5	13	* mb ++
UNARY_EXPR	2275:5	2275:6	14	* mb ++
UNARY_OPERATOR	2275:5	2275:5	15	*
LEAF_NODE	2275:5	2275:5	16	*
FIELD	2275:6	2275:8	15	mb ++
LEAF_NODE	2275:6	2275:6	16	mb
LEAF_NODE	2275:8	2275:8	16	++
ASSIGN_OP	2275:10	2275:10	13	=
LEAF_NODE	2275:10	2275:10	14	=
RVAL	2275:11	2275:24	13	( int64 ) ( * ma ++ )
LEAF_NODE	2275:11	2275:11	14	(
TYPE_NAME	2275:12	2275:12	14	int64
LEAF_NODE	2275:12	2275:12	15	int64
LEAF_NODE	2275:17	2275:17	14	)
LEAF_NODE	2275:18	2275:18	14	(
UNARY_EXPR	2275:19	2275:20	14	* ma ++
UNARY_OPERATOR	2275:19	2275:19	15	*
LEAF_NODE	2275:19	2275:19	16	*
FIELD	2275:20	2275:22	15	ma ++
LEAF_NODE	2275:20	2275:20	16	ma
LEAF_NODE	2275:22	2275:22	16	++
LEAF_NODE	2275:24	2275:24	14	)
LEAF_NODE	2275:25	2275:25	11	;
LEAF_NODE	2276:4	2276:4	9	}
LEAF_NODE	2277:3	2277:3	6	}
JUMP_STATEMENT	2278:3	2278:8	6	break DESTINATION ;
KEYWORD	2278:3	2278:3	7	break
LEAF_NODE	2278:3	2278:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2278:8	2278:8	7	;
LEAF_NODE	2279:1	2279:1	5	}
EXPR_STATEMENT	2280:1	2280:20	3	_TIFFfree ( origdata ) ;
EXPR	2280:1	2280:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	2280:1	2280:19	5	_TIFFfree ( origdata )
CALLEE	2280:1	2280:1	6	_TIFFfree
LEAF_NODE	2280:1	2280:1	7	_TIFFfree
LEAF_NODE	2280:10	2280:10	6	(
ARGUMENT	2280:11	2280:11	6	origdata
FIELD	2280:11	2280:11	7	origdata
LEAF_NODE	2280:11	2280:11	8	origdata
LEAF_NODE	2280:19	2280:19	6	)
LEAF_NODE	2280:20	2280:20	4	;
EXPR_STATEMENT	2281:1	2281:12	3	* value = data ;
EXPR	2281:1	2281:1	4	* value = data
ASSIGN	2281:1	2281:8	5	* value = data
LVAL	2281:1	2281:1	6	* value
UNARY_EXPR	2281:1	2281:2	7	* value
UNARY_OPERATOR	2281:1	2281:1	8	*
LEAF_NODE	2281:1	2281:1	9	*
FIELD	2281:2	2281:2	8	value
LEAF_NODE	2281:2	2281:2	9	value
ASSIGN_OP	2281:7	2281:7	6	=
LEAF_NODE	2281:7	2281:7	7	=
RVAL	2281:8	2281:8	6	data
FIELD	2281:8	2281:8	7	data
LEAF_NODE	2281:8	2281:8	8	data
LEAF_NODE	2281:12	2281:12	4	;
LEAF_NODE	2282:1	2282:1	3	return
LEAF_NODE	2282:7	2282:7	3	(
LEAF_NODE	2282:8	2282:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2282:29	2282:29	3	)
LEAF_NODE	2282:30	2282:30	3	;
LEAF_NODE	2283:0	2283:0	2	}
FUNCTION_DEF	2285:0	2527:0	1	
RETURN_TYPE	2285:0	2285:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2285:0	2285:0	3	static
TYPE_NAME	2285:7	2285:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2285:7	2285:7	4	enum
LEAF_NODE	2285:12	2285:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2285:32	2285:32	2	TIFFReadDirEntryFloatArray
LEAF_NODE	2285:32	2285:32	3	TIFFReadDirEntryFloatArray
PARAMETER_LIST	2285:58	2285:107	2	( TIFF * tif , TIFFDirEntry * direntry , float * * value )
LEAF_NODE	2285:58	2285:58	3	(
PARAMETER_DECL	2285:59	2285:65	3	TIFF * tif
TYPE	2285:59	2285:63	4	TIFF *
TYPE_NAME	2285:59	2285:59	5	TIFF
LEAF_NODE	2285:59	2285:59	6	TIFF
POINTER	2285:63	2285:63	5	*
LEAF_NODE	2285:63	2285:63	6	*
NAME	2285:65	2285:65	4	tif
LEAF_NODE	2285:65	2285:65	5	tif
LEAF_NODE	2285:68	2285:68	3	,
PARAMETER_DECL	2285:70	2285:84	3	TIFFDirEntry * direntry
TYPE	2285:70	2285:82	4	TIFFDirEntry *
TYPE_NAME	2285:70	2285:70	5	TIFFDirEntry
LEAF_NODE	2285:70	2285:70	6	TIFFDirEntry
POINTER	2285:82	2285:82	5	*
LEAF_NODE	2285:82	2285:82	6	*
NAME	2285:84	2285:84	4	direntry
LEAF_NODE	2285:84	2285:84	5	direntry
LEAF_NODE	2285:92	2285:92	3	,
PARAMETER_DECL	2285:94	2285:102	3	float * * value
TYPE	2285:94	2285:99	4	float * *
TYPE_NAME	2285:94	2285:94	5	float
LEAF_NODE	2285:94	2285:94	6	float
POINTER	2285:99	2285:100	5	* *
LEAF_NODE	2285:99	2285:99	6	*
LEAF_NODE	2285:100	2285:100	6	*
NAME	2285:102	2285:102	4	value
LEAF_NODE	2285:102	2285:102	5	value
LEAF_NODE	2285:107	2285:107	3	)
LEAF_NODE	2286:0	2286:0	2	{
STATEMENTS	2287:1	2526:30	2	
SIMPLE_DECL	2287:1	2287:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	2287:1	2287:26	4	enum TIFFReadDirEntryErr err
TYPE	2287:1	2287:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	2287:1	2287:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	2287:1	2287:1	7	enum
LEAF_NODE	2287:6	2287:6	7	TIFFReadDirEntryErr
NAME	2287:26	2287:26	5	err
LEAF_NODE	2287:26	2287:26	6	err
LEAF_NODE	2287:29	2287:29	4	;
SIMPLE_DECL	2288:1	2288:13	3	uint32 count ;
VAR_DECL	2288:1	2288:8	4	uint32 count
TYPE	2288:1	2288:1	5	uint32
TYPE_NAME	2288:1	2288:1	6	uint32
LEAF_NODE	2288:1	2288:1	7	uint32
NAME	2288:8	2288:8	5	count
LEAF_NODE	2288:8	2288:8	6	count
LEAF_NODE	2288:13	2288:13	4	;
SIMPLE_DECL	2289:1	2289:15	3	void * origdata ;
VAR_DECL	2289:1	2289:7	4	void * origdata
TYPE	2289:1	2289:5	5	void *
TYPE_NAME	2289:1	2289:1	6	void
LEAF_NODE	2289:1	2289:1	7	void
POINTER	2289:5	2289:5	6	*
LEAF_NODE	2289:5	2289:5	7	*
NAME	2289:7	2289:7	5	origdata
LEAF_NODE	2289:7	2289:7	6	origdata
LEAF_NODE	2289:15	2289:15	4	;
SIMPLE_DECL	2290:1	2290:12	3	float * data ;
VAR_DECL	2290:1	2290:8	4	float * data
TYPE	2290:1	2290:6	5	float *
TYPE_NAME	2290:1	2290:1	6	float
LEAF_NODE	2290:1	2290:1	7	float
POINTER	2290:6	2290:6	6	*
LEAF_NODE	2290:6	2290:6	7	*
NAME	2290:8	2290:8	5	data
LEAF_NODE	2290:8	2290:8	6	data
LEAF_NODE	2290:12	2290:12	4	;
SELECTION	2291:1	2292:1	3	
KEYWORD	2291:1	2291:1	4	switch
LEAF_NODE	2291:1	2291:1	5	switch
LEAF_NODE	2291:8	2291:8	4	(
CONDITION	2291:9	2291:9	4	direntry -> tdir_type
EXPR	2291:9	2291:9	5	direntry -> tdir_type
FIELD	2291:9	2291:19	6	direntry -> tdir_type
LEAF_NODE	2291:9	2291:9	7	direntry
LEAF_NODE	2291:17	2291:17	7	->
LEAF_NODE	2291:19	2291:19	7	tdir_type
LEAF_NODE	2291:28	2291:28	4	)
STATEMENTS	2292:1	2308:1	4	
LEAF_NODE	2292:1	2292:1	5	{
STATEMENTS	2293:2	2307:34	5	
LABEL	2293:2	2293:16	6	case TIFF_BYTE :
LEAF_NODE	2293:2	2293:2	7	case
LEAF_NODE	2293:7	2293:7	7	TIFF_BYTE
LEAF_NODE	2293:16	2293:16	7	:
LABEL	2294:2	2294:17	6	case TIFF_SBYTE :
LEAF_NODE	2294:2	2294:2	7	case
LEAF_NODE	2294:7	2294:7	7	TIFF_SBYTE
LEAF_NODE	2294:17	2294:17	7	:
LABEL	2295:2	2295:17	6	case TIFF_SHORT :
LEAF_NODE	2295:2	2295:2	7	case
LEAF_NODE	2295:7	2295:7	7	TIFF_SHORT
LEAF_NODE	2295:17	2295:17	7	:
LABEL	2296:2	2296:18	6	case TIFF_SSHORT :
LEAF_NODE	2296:2	2296:2	7	case
LEAF_NODE	2296:7	2296:7	7	TIFF_SSHORT
LEAF_NODE	2296:18	2296:18	7	:
LABEL	2297:2	2297:16	6	case TIFF_LONG :
LEAF_NODE	2297:2	2297:2	7	case
LEAF_NODE	2297:7	2297:7	7	TIFF_LONG
LEAF_NODE	2297:16	2297:16	7	:
LABEL	2298:2	2298:17	6	case TIFF_SLONG :
LEAF_NODE	2298:2	2298:2	7	case
LEAF_NODE	2298:7	2298:7	7	TIFF_SLONG
LEAF_NODE	2298:17	2298:17	7	:
LABEL	2299:2	2299:17	6	case TIFF_LONG8 :
LEAF_NODE	2299:2	2299:2	7	case
LEAF_NODE	2299:7	2299:7	7	TIFF_LONG8
LEAF_NODE	2299:17	2299:17	7	:
LABEL	2300:2	2300:18	6	case TIFF_SLONG8 :
LEAF_NODE	2300:2	2300:2	7	case
LEAF_NODE	2300:7	2300:7	7	TIFF_SLONG8
LEAF_NODE	2300:18	2300:18	7	:
LABEL	2301:2	2301:20	6	case TIFF_RATIONAL :
LEAF_NODE	2301:2	2301:2	7	case
LEAF_NODE	2301:7	2301:7	7	TIFF_RATIONAL
LEAF_NODE	2301:20	2301:20	7	:
LABEL	2302:2	2302:21	6	case TIFF_SRATIONAL :
LEAF_NODE	2302:2	2302:2	7	case
LEAF_NODE	2302:7	2302:7	7	TIFF_SRATIONAL
LEAF_NODE	2302:21	2302:21	7	:
LABEL	2303:2	2303:17	6	case TIFF_FLOAT :
LEAF_NODE	2303:2	2303:2	7	case
LEAF_NODE	2303:7	2303:7	7	TIFF_FLOAT
LEAF_NODE	2303:17	2303:17	7	:
LABEL	2304:2	2304:18	6	case TIFF_DOUBLE :
LEAF_NODE	2304:2	2304:2	7	case
LEAF_NODE	2304:7	2304:7	7	TIFF_DOUBLE
LEAF_NODE	2304:18	2304:18	7	:
JUMP_STATEMENT	2305:3	2305:8	6	break DESTINATION ;
KEYWORD	2305:3	2305:3	7	break
LEAF_NODE	2305:3	2305:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2305:8	2305:8	7	;
LABEL	2306:2	2306:9	6	default :
LEAF_NODE	2306:2	2306:2	7	default
LEAF_NODE	2306:9	2306:9	7	:
LEAF_NODE	2307:3	2307:3	6	return
LEAF_NODE	2307:9	2307:9	6	(
LEAF_NODE	2307:10	2307:10	6	TIFFReadDirEntryErrType
LEAF_NODE	2307:33	2307:33	6	)
LEAF_NODE	2307:34	2307:34	6	;
LEAF_NODE	2308:1	2308:1	5	}
EXPR_STATEMENT	2309:1	2309:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata ) ;
EXPR	2309:1	2309:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
ASSIGN	2309:1	2309:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
LVAL	2309:1	2309:1	6	err
FIELD	2309:1	2309:1	7	err
LEAF_NODE	2309:1	2309:1	8	err
ASSIGN_OP	2309:4	2309:4	6	=
LEAF_NODE	2309:4	2309:4	7	=
RVAL	2309:5	2309:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
FUNCTION_CALL	2309:5	2309:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 4 , & origdata )
CALLEE	2309:5	2309:5	8	TIFFReadDirEntryArray
LEAF_NODE	2309:5	2309:5	9	TIFFReadDirEntryArray
LEAF_NODE	2309:26	2309:26	8	(
ARGUMENT	2309:27	2309:27	8	tif
FIELD	2309:27	2309:27	9	tif
LEAF_NODE	2309:27	2309:27	10	tif
LEAF_NODE	2309:30	2309:30	8	,
ARGUMENT	2309:31	2309:31	8	direntry
FIELD	2309:31	2309:31	9	direntry
LEAF_NODE	2309:31	2309:31	10	direntry
LEAF_NODE	2309:39	2309:39	8	,
ARGUMENT	2309:40	2309:40	8	& count
UNARY_EXPR	2309:40	2309:41	9	& count
UNARY_OPERATOR	2309:40	2309:40	10	&
LEAF_NODE	2309:40	2309:40	11	&
FIELD	2309:41	2309:41	10	count
LEAF_NODE	2309:41	2309:41	11	count
LEAF_NODE	2309:46	2309:46	8	,
ARGUMENT	2309:47	2309:47	8	4
FIELD	2309:47	2309:47	9	4
LEAF_NODE	2309:47	2309:47	10	4
LEAF_NODE	2309:48	2309:48	8	,
ARGUMENT	2309:49	2309:49	8	& origdata
UNARY_EXPR	2309:49	2309:50	9	& origdata
UNARY_OPERATOR	2309:49	2309:49	10	&
LEAF_NODE	2309:49	2309:49	11	&
FIELD	2309:50	2309:50	10	origdata
LEAF_NODE	2309:50	2309:50	11	origdata
LEAF_NODE	2309:58	2309:58	8	)
LEAF_NODE	2309:59	2309:59	4	;
SELECTION	2310:1	2311:1	3	
KEYWORD	2310:1	2310:1	4	if
LEAF_NODE	2310:1	2310:1	5	if
LEAF_NODE	2310:4	2310:4	4	(
CONDITION	2310:5	2310:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2310:5	2310:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	2310:5	2310:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2310:5	2310:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	2310:5	2310:5	8	(
FIELD	2310:6	2310:6	8	err
LEAF_NODE	2310:6	2310:6	9	err
EQ_OPERATOR	2310:9	2310:9	8	!=
LEAF_NODE	2310:9	2310:9	9	!=
FIELD	2310:11	2310:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	2310:11	2310:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	2310:32	2310:32	8	)
LEAF_NODE	2310:33	2310:33	7	||
EXPR	2310:35	2310:47	7	( origdata == 0 )
LEAF_NODE	2310:35	2310:35	8	(
FIELD	2310:36	2310:36	8	origdata
LEAF_NODE	2310:36	2310:36	9	origdata
EQ_OPERATOR	2310:44	2310:44	8	==
LEAF_NODE	2310:44	2310:44	9	==
FIELD	2310:46	2310:46	8	0
LEAF_NODE	2310:46	2310:46	9	0
LEAF_NODE	2310:47	2310:47	8	)
LEAF_NODE	2310:48	2310:48	4	)
STATEMENTS	2311:1	2314:1	4	
LEAF_NODE	2311:1	2311:1	5	{
STATEMENTS	2312:2	2313:13	5	
EXPR_STATEMENT	2312:2	2312:10	6	* value = 0 ;
EXPR	2312:2	2312:2	7	* value = 0
ASSIGN	2312:2	2312:9	8	* value = 0
LVAL	2312:2	2312:2	9	* value
UNARY_EXPR	2312:2	2312:3	10	* value
UNARY_OPERATOR	2312:2	2312:2	11	*
LEAF_NODE	2312:2	2312:2	12	*
FIELD	2312:3	2312:3	11	value
LEAF_NODE	2312:3	2312:3	12	value
ASSIGN_OP	2312:8	2312:8	9	=
LEAF_NODE	2312:8	2312:8	10	=
RVAL	2312:9	2312:9	9	0
FIELD	2312:9	2312:9	10	0
LEAF_NODE	2312:9	2312:9	11	0
LEAF_NODE	2312:10	2312:10	7	;
LEAF_NODE	2313:2	2313:2	6	return
LEAF_NODE	2313:8	2313:8	6	(
LEAF_NODE	2313:9	2313:9	6	err
LEAF_NODE	2313:12	2313:12	6	)
LEAF_NODE	2313:13	2313:13	6	;
LEAF_NODE	2314:1	2314:1	5	}
SELECTION	2315:1	2316:1	3	
KEYWORD	2315:1	2315:1	4	switch
LEAF_NODE	2315:1	2315:1	5	switch
LEAF_NODE	2315:8	2315:8	4	(
CONDITION	2315:9	2315:9	4	direntry -> tdir_type
EXPR	2315:9	2315:9	5	direntry -> tdir_type
FIELD	2315:9	2315:19	6	direntry -> tdir_type
LEAF_NODE	2315:9	2315:9	7	direntry
LEAF_NODE	2315:17	2315:17	7	->
LEAF_NODE	2315:19	2315:19	7	tdir_type
LEAF_NODE	2315:28	2315:28	4	)
STATEMENTS	2316:1	2323:1	4	
LEAF_NODE	2316:1	2316:1	5	{
STATEMENTS	2317:2	2322:32	5	
LABEL	2317:2	2317:17	6	case TIFF_FLOAT :
LEAF_NODE	2317:2	2317:2	7	case
LEAF_NODE	2317:7	2317:7	7	TIFF_FLOAT
LEAF_NODE	2317:17	2317:17	7	:
SELECTION	2318:3	2319:4	6	
KEYWORD	2318:3	2318:3	7	if
LEAF_NODE	2318:3	2318:3	8	if
LEAF_NODE	2318:6	2318:6	7	(
CONDITION	2318:7	2318:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	2318:7	2318:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	2318:7	2318:12	9	tif -> tif_flags
LEAF_NODE	2318:7	2318:7	10	tif
LEAF_NODE	2318:10	2318:10	10	->
LEAF_NODE	2318:12	2318:12	10	tif_flags
LEAF_NODE	2318:21	2318:21	9	&
FIELD	2318:22	2318:22	9	TIFF_SWAB
LEAF_NODE	2318:22	2318:22	10	TIFF_SWAB
LEAF_NODE	2318:31	2318:31	7	)
STATEMENTS	2319:4	2319:4	7	
EXPR_STATEMENT	2319:4	2319:48	8	TIFFSwabArrayOfLong ( ( uint32 * ) origdata , count ) ;
EXPR	2319:4	2319:4	9	TIFFSwabArrayOfLong ( ( uint32 * ) origdata , count )
FUNCTION_CALL	2319:4	2319:47	10	TIFFSwabArrayOfLong ( ( uint32 * ) origdata , count )
CALLEE	2319:4	2319:4	11	TIFFSwabArrayOfLong
LEAF_NODE	2319:4	2319:4	12	TIFFSwabArrayOfLong
LEAF_NODE	2319:23	2319:23	11	(
ARGUMENT	2319:24	2319:33	11	( uint32 * ) origdata
LEAF_NODE	2319:24	2319:24	12	(
TYPE_NAME	2319:25	2319:25	12	uint32
LEAF_NODE	2319:25	2319:25	13	uint32
LEAF_NODE	2319:31	2319:31	12	*
LEAF_NODE	2319:32	2319:32	12	)
FIELD	2319:33	2319:33	12	origdata
LEAF_NODE	2319:33	2319:33	13	origdata
LEAF_NODE	2319:41	2319:41	11	,
ARGUMENT	2319:42	2319:42	11	count
FIELD	2319:42	2319:42	12	count
LEAF_NODE	2319:42	2319:42	13	count
LEAF_NODE	2319:47	2319:47	11	)
LEAF_NODE	2319:48	2319:48	9	;
EXPR_STATEMENT	2320:3	2320:56	6	TIFFCvtIEEEDoubleToNative ( tif , count , ( float * ) origdata ) ;
EXPR	2320:3	2320:3	7	TIFFCvtIEEEDoubleToNative ( tif , count , ( float * ) origdata )
FUNCTION_CALL	2320:3	2320:55	8	TIFFCvtIEEEDoubleToNative ( tif , count , ( float * ) origdata )
CALLEE	2320:3	2320:3	9	TIFFCvtIEEEDoubleToNative
LEAF_NODE	2320:3	2320:3	10	TIFFCvtIEEEDoubleToNative
LEAF_NODE	2320:28	2320:28	9	(
ARGUMENT	2320:29	2320:29	9	tif
FIELD	2320:29	2320:29	10	tif
LEAF_NODE	2320:29	2320:29	11	tif
LEAF_NODE	2320:32	2320:32	9	,
ARGUMENT	2320:33	2320:33	9	count
FIELD	2320:33	2320:33	10	count
LEAF_NODE	2320:33	2320:33	11	count
LEAF_NODE	2320:38	2320:38	9	,
ARGUMENT	2320:39	2320:47	9	( float * ) origdata
LEAF_NODE	2320:39	2320:39	10	(
TYPE_NAME	2320:40	2320:40	10	float
LEAF_NODE	2320:40	2320:40	11	float
LEAF_NODE	2320:45	2320:45	10	*
LEAF_NODE	2320:46	2320:46	10	)
FIELD	2320:47	2320:47	10	origdata
LEAF_NODE	2320:47	2320:47	11	origdata
LEAF_NODE	2320:55	2320:55	9	)
LEAF_NODE	2320:56	2320:56	7	;
EXPR_STATEMENT	2321:3	2321:26	6	* value = ( float * ) origdata ;
EXPR	2321:3	2321:3	7	* value = ( float * ) origdata
ASSIGN	2321:3	2321:10	8	* value = ( float * ) origdata
LVAL	2321:3	2321:3	9	* value
UNARY_EXPR	2321:3	2321:4	10	* value
UNARY_OPERATOR	2321:3	2321:3	11	*
LEAF_NODE	2321:3	2321:3	12	*
FIELD	2321:4	2321:4	11	value
LEAF_NODE	2321:4	2321:4	12	value
ASSIGN_OP	2321:9	2321:9	9	=
LEAF_NODE	2321:9	2321:9	10	=
RVAL	2321:10	2321:18	9	( float * ) origdata
LEAF_NODE	2321:10	2321:10	10	(
TYPE_NAME	2321:11	2321:11	10	float
LEAF_NODE	2321:11	2321:11	11	float
LEAF_NODE	2321:16	2321:16	10	*
LEAF_NODE	2321:17	2321:17	10	)
FIELD	2321:18	2321:18	10	origdata
LEAF_NODE	2321:18	2321:18	11	origdata
LEAF_NODE	2321:26	2321:26	7	;
LEAF_NODE	2322:3	2322:3	6	return
LEAF_NODE	2322:9	2322:9	6	(
LEAF_NODE	2322:10	2322:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	2322:31	2322:31	6	)
LEAF_NODE	2322:32	2322:32	6	;
LEAF_NODE	2323:1	2323:1	5	}
EXPR_STATEMENT	2324:1	2324:46	3	data = ( float * ) _TIFFmalloc ( count * sizeof ( float ) ) ;
EXPR	2324:1	2324:1	4	data = ( float * ) _TIFFmalloc ( count * sizeof ( float ) )
ASSIGN	2324:1	2324:6	5	data = ( float * ) _TIFFmalloc ( count * sizeof ( float ) )
LVAL	2324:1	2324:1	6	data
FIELD	2324:1	2324:1	7	data
LEAF_NODE	2324:1	2324:1	8	data
ASSIGN_OP	2324:5	2324:5	6	=
LEAF_NODE	2324:5	2324:5	7	=
RVAL	2324:6	2324:14	6	( float * ) _TIFFmalloc ( count * sizeof ( float ) )
LEAF_NODE	2324:6	2324:6	7	(
TYPE_NAME	2324:7	2324:7	7	float
LEAF_NODE	2324:7	2324:7	8	float
LEAF_NODE	2324:12	2324:12	7	*
LEAF_NODE	2324:13	2324:13	7	)
FUNCTION_CALL	2324:14	2324:45	7	_TIFFmalloc ( count * sizeof ( float ) )
CALLEE	2324:14	2324:14	8	_TIFFmalloc
LEAF_NODE	2324:14	2324:14	9	_TIFFmalloc
LEAF_NODE	2324:25	2324:25	8	(
ARGUMENT	2324:26	2324:32	8	count * sizeof ( float )
FIELD	2324:26	2324:26	9	count
LEAF_NODE	2324:26	2324:26	10	count
LEAF_NODE	2324:31	2324:31	9	*
FUNCTION_CALL	2324:32	2324:44	9	sizeof ( float )
CALLEE	2324:32	2324:32	10	sizeof
LEAF_NODE	2324:32	2324:32	11	sizeof
LEAF_NODE	2324:38	2324:38	10	(
ARGUMENT	2324:39	2324:39	10	float
FIELD	2324:39	2324:39	11	float
LEAF_NODE	2324:39	2324:39	12	float
LEAF_NODE	2324:44	2324:44	10	)
LEAF_NODE	2324:45	2324:45	8	)
LEAF_NODE	2324:46	2324:46	4	;
SELECTION	2325:1	2326:1	3	
KEYWORD	2325:1	2325:1	4	if
LEAF_NODE	2325:1	2325:1	5	if
LEAF_NODE	2325:4	2325:4	4	(
CONDITION	2325:5	2325:5	4	data == 0
EXPR	2325:5	2325:11	5	data == 0
FIELD	2325:5	2325:5	6	data
LEAF_NODE	2325:5	2325:5	7	data
EQ_OPERATOR	2325:9	2325:9	6	==
LEAF_NODE	2325:9	2325:9	7	==
FIELD	2325:11	2325:11	6	0
LEAF_NODE	2325:11	2325:11	7	0
LEAF_NODE	2325:12	2325:12	4	)
STATEMENTS	2326:1	2329:1	4	
LEAF_NODE	2326:1	2326:1	5	{
STATEMENTS	2327:2	2328:34	5	
EXPR_STATEMENT	2327:2	2327:21	6	_TIFFfree ( origdata ) ;
EXPR	2327:2	2327:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	2327:2	2327:20	8	_TIFFfree ( origdata )
CALLEE	2327:2	2327:2	9	_TIFFfree
LEAF_NODE	2327:2	2327:2	10	_TIFFfree
LEAF_NODE	2327:11	2327:11	9	(
ARGUMENT	2327:12	2327:12	9	origdata
FIELD	2327:12	2327:12	10	origdata
LEAF_NODE	2327:12	2327:12	11	origdata
LEAF_NODE	2327:20	2327:20	9	)
LEAF_NODE	2327:21	2327:21	7	;
LEAF_NODE	2328:2	2328:2	6	return
LEAF_NODE	2328:8	2328:8	6	(
LEAF_NODE	2328:9	2328:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	2328:33	2328:33	6	)
LEAF_NODE	2328:34	2328:34	6	;
LEAF_NODE	2329:1	2329:1	5	}
SELECTION	2330:1	2331:1	3	
KEYWORD	2330:1	2330:1	4	switch
LEAF_NODE	2330:1	2330:1	5	switch
LEAF_NODE	2330:8	2330:8	4	(
CONDITION	2330:9	2330:9	4	direntry -> tdir_type
EXPR	2330:9	2330:9	5	direntry -> tdir_type
FIELD	2330:9	2330:19	6	direntry -> tdir_type
LEAF_NODE	2330:9	2330:9	7	direntry
LEAF_NODE	2330:17	2330:17	7	->
LEAF_NODE	2330:19	2330:19	7	tdir_type
LEAF_NODE	2330:28	2330:28	4	)
STATEMENTS	2331:1	2523:1	4	
LEAF_NODE	2331:1	2331:1	5	{
STATEMENTS	2332:2	2522:3	5	
LABEL	2332:2	2332:16	6	case TIFF_BYTE :
LEAF_NODE	2332:2	2332:2	7	case
LEAF_NODE	2332:7	2332:7	7	TIFF_BYTE
LEAF_NODE	2332:16	2332:16	7	:
LEAF_NODE	2333:3	2333:3	6	{
STATEMENTS	2334:4	2339:4	6	
SIMPLE_DECL	2334:4	2334:13	7	uint8 * ma ;
VAR_DECL	2334:4	2334:11	8	uint8 * ma
TYPE	2334:4	2334:9	9	uint8 *
TYPE_NAME	2334:4	2334:4	10	uint8
LEAF_NODE	2334:4	2334:4	11	uint8
POINTER	2334:9	2334:9	10	*
LEAF_NODE	2334:9	2334:9	11	*
NAME	2334:11	2334:11	9	ma
LEAF_NODE	2334:11	2334:11	10	ma
LEAF_NODE	2334:13	2334:13	8	;
SIMPLE_DECL	2335:4	2335:13	7	float * mb ;
VAR_DECL	2335:4	2335:11	8	float * mb
TYPE	2335:4	2335:9	9	float *
TYPE_NAME	2335:4	2335:4	10	float
LEAF_NODE	2335:4	2335:4	11	float
POINTER	2335:9	2335:9	10	*
LEAF_NODE	2335:9	2335:9	11	*
NAME	2335:11	2335:11	9	mb
LEAF_NODE	2335:11	2335:11	10	mb
LEAF_NODE	2335:13	2335:13	8	;
SIMPLE_DECL	2336:4	2336:12	7	uint32 n ;
VAR_DECL	2336:4	2336:11	8	uint32 n
TYPE	2336:4	2336:4	9	uint32
TYPE_NAME	2336:4	2336:4	10	uint32
LEAF_NODE	2336:4	2336:4	11	uint32
NAME	2336:11	2336:11	9	n
LEAF_NODE	2336:11	2336:11	10	n
LEAF_NODE	2336:12	2336:12	8	;
EXPR_STATEMENT	2337:4	2337:23	7	ma = ( uint8 * ) origdata ;
EXPR	2337:4	2337:4	8	ma = ( uint8 * ) origdata
ASSIGN	2337:4	2337:7	9	ma = ( uint8 * ) origdata
LVAL	2337:4	2337:4	10	ma
FIELD	2337:4	2337:4	11	ma
LEAF_NODE	2337:4	2337:4	12	ma
ASSIGN_OP	2337:6	2337:6	10	=
LEAF_NODE	2337:6	2337:6	11	=
RVAL	2337:7	2337:15	10	( uint8 * ) origdata
LEAF_NODE	2337:7	2337:7	11	(
TYPE_NAME	2337:8	2337:8	11	uint8
LEAF_NODE	2337:8	2337:8	12	uint8
LEAF_NODE	2337:13	2337:13	11	*
LEAF_NODE	2337:14	2337:14	11	)
FIELD	2337:15	2337:15	11	origdata
LEAF_NODE	2337:15	2337:15	12	origdata
LEAF_NODE	2337:23	2337:23	8	;
EXPR_STATEMENT	2338:4	2338:11	7	mb = data ;
EXPR	2338:4	2338:4	8	mb = data
ASSIGN	2338:4	2338:7	9	mb = data
LVAL	2338:4	2338:4	10	mb
FIELD	2338:4	2338:4	11	mb
LEAF_NODE	2338:4	2338:4	12	mb
ASSIGN_OP	2338:6	2338:6	10	=
LEAF_NODE	2338:6	2338:6	11	=
RVAL	2338:7	2338:7	10	data
FIELD	2338:7	2338:7	11	data
LEAF_NODE	2338:7	2338:7	12	data
LEAF_NODE	2338:11	2338:11	8	;
ITERATION	2339:4	2340:5	7	
KEYWORD	2339:4	2339:4	8	for
LEAF_NODE	2339:4	2339:4	9	for
LEAF_NODE	2339:8	2339:8	8	(
FOR_INIT	2339:9	2339:12	8	n = 0 ;
EXPR	2339:9	2339:9	9	n = 0
ASSIGN	2339:9	2339:11	10	n = 0
LVAL	2339:9	2339:9	11	n
FIELD	2339:9	2339:9	12	n
LEAF_NODE	2339:9	2339:9	13	n
ASSIGN_OP	2339:10	2339:10	11	=
LEAF_NODE	2339:10	2339:10	12	=
RVAL	2339:11	2339:11	11	0
FIELD	2339:11	2339:11	12	0
LEAF_NODE	2339:11	2339:11	13	0
LEAF_NODE	2339:12	2339:12	9	;
CONDITION	2339:14	2339:14	8	n < count
EXPR	2339:14	2339:16	9	n < count
FIELD	2339:14	2339:14	10	n
LEAF_NODE	2339:14	2339:14	11	n
REL_OPERATOR	2339:15	2339:15	10	<
LEAF_NODE	2339:15	2339:15	11	<
FIELD	2339:16	2339:16	10	count
LEAF_NODE	2339:16	2339:16	11	count
LEAF_NODE	2339:21	2339:21	8	;
FOR_EXPR	2339:23	2339:23	8	n ++
EXPR	2339:23	2339:23	9	n ++
FIELD	2339:23	2339:24	10	n ++
LEAF_NODE	2339:23	2339:23	11	n
LEAF_NODE	2339:24	2339:24	11	++
LEAF_NODE	2339:26	2339:26	8	)
STATEMENTS	2340:5	2340:5	8	
EXPR_STATEMENT	2340:5	2340:25	9	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2340:5	2340:5	10	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2340:5	2340:11	11	* mb ++ = ( float ) ( * ma ++ )
LVAL	2340:5	2340:5	12	* mb ++
UNARY_EXPR	2340:5	2340:6	13	* mb ++
UNARY_OPERATOR	2340:5	2340:5	14	*
LEAF_NODE	2340:5	2340:5	15	*
FIELD	2340:6	2340:8	14	mb ++
LEAF_NODE	2340:6	2340:6	15	mb
LEAF_NODE	2340:8	2340:8	15	++
ASSIGN_OP	2340:10	2340:10	12	=
LEAF_NODE	2340:10	2340:10	13	=
RVAL	2340:11	2340:24	12	( float ) ( * ma ++ )
LEAF_NODE	2340:11	2340:11	13	(
TYPE_NAME	2340:12	2340:12	13	float
LEAF_NODE	2340:12	2340:12	14	float
LEAF_NODE	2340:17	2340:17	13	)
LEAF_NODE	2340:18	2340:18	13	(
UNARY_EXPR	2340:19	2340:20	13	* ma ++
UNARY_OPERATOR	2340:19	2340:19	14	*
LEAF_NODE	2340:19	2340:19	15	*
FIELD	2340:20	2340:22	14	ma ++
LEAF_NODE	2340:20	2340:20	15	ma
LEAF_NODE	2340:22	2340:22	15	++
LEAF_NODE	2340:24	2340:24	13	)
LEAF_NODE	2340:25	2340:25	10	;
LEAF_NODE	2341:3	2341:3	6	}
JUMP_STATEMENT	2342:3	2342:8	6	break DESTINATION ;
KEYWORD	2342:3	2342:3	7	break
LEAF_NODE	2342:3	2342:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2342:8	2342:8	7	;
LABEL	2343:2	2343:17	6	case TIFF_SBYTE :
LEAF_NODE	2343:2	2343:2	7	case
LEAF_NODE	2343:7	2343:7	7	TIFF_SBYTE
LEAF_NODE	2343:17	2343:17	7	:
LEAF_NODE	2344:3	2344:3	6	{
STATEMENTS	2345:4	2350:4	6	
SIMPLE_DECL	2345:4	2345:12	7	int8 * ma ;
VAR_DECL	2345:4	2345:10	8	int8 * ma
TYPE	2345:4	2345:8	9	int8 *
TYPE_NAME	2345:4	2345:4	10	int8
LEAF_NODE	2345:4	2345:4	11	int8
POINTER	2345:8	2345:8	10	*
LEAF_NODE	2345:8	2345:8	11	*
NAME	2345:10	2345:10	9	ma
LEAF_NODE	2345:10	2345:10	10	ma
LEAF_NODE	2345:12	2345:12	8	;
SIMPLE_DECL	2346:4	2346:13	7	float * mb ;
VAR_DECL	2346:4	2346:11	8	float * mb
TYPE	2346:4	2346:9	9	float *
TYPE_NAME	2346:4	2346:4	10	float
LEAF_NODE	2346:4	2346:4	11	float
POINTER	2346:9	2346:9	10	*
LEAF_NODE	2346:9	2346:9	11	*
NAME	2346:11	2346:11	9	mb
LEAF_NODE	2346:11	2346:11	10	mb
LEAF_NODE	2346:13	2346:13	8	;
SIMPLE_DECL	2347:4	2347:12	7	uint32 n ;
VAR_DECL	2347:4	2347:11	8	uint32 n
TYPE	2347:4	2347:4	9	uint32
TYPE_NAME	2347:4	2347:4	10	uint32
LEAF_NODE	2347:4	2347:4	11	uint32
NAME	2347:11	2347:11	9	n
LEAF_NODE	2347:11	2347:11	10	n
LEAF_NODE	2347:12	2347:12	8	;
EXPR_STATEMENT	2348:4	2348:22	7	ma = ( int8 * ) origdata ;
EXPR	2348:4	2348:4	8	ma = ( int8 * ) origdata
ASSIGN	2348:4	2348:7	9	ma = ( int8 * ) origdata
LVAL	2348:4	2348:4	10	ma
FIELD	2348:4	2348:4	11	ma
LEAF_NODE	2348:4	2348:4	12	ma
ASSIGN_OP	2348:6	2348:6	10	=
LEAF_NODE	2348:6	2348:6	11	=
RVAL	2348:7	2348:14	10	( int8 * ) origdata
LEAF_NODE	2348:7	2348:7	11	(
TYPE_NAME	2348:8	2348:8	11	int8
LEAF_NODE	2348:8	2348:8	12	int8
LEAF_NODE	2348:12	2348:12	11	*
LEAF_NODE	2348:13	2348:13	11	)
FIELD	2348:14	2348:14	11	origdata
LEAF_NODE	2348:14	2348:14	12	origdata
LEAF_NODE	2348:22	2348:22	8	;
EXPR_STATEMENT	2349:4	2349:11	7	mb = data ;
EXPR	2349:4	2349:4	8	mb = data
ASSIGN	2349:4	2349:7	9	mb = data
LVAL	2349:4	2349:4	10	mb
FIELD	2349:4	2349:4	11	mb
LEAF_NODE	2349:4	2349:4	12	mb
ASSIGN_OP	2349:6	2349:6	10	=
LEAF_NODE	2349:6	2349:6	11	=
RVAL	2349:7	2349:7	10	data
FIELD	2349:7	2349:7	11	data
LEAF_NODE	2349:7	2349:7	12	data
LEAF_NODE	2349:11	2349:11	8	;
ITERATION	2350:4	2351:5	7	
KEYWORD	2350:4	2350:4	8	for
LEAF_NODE	2350:4	2350:4	9	for
LEAF_NODE	2350:8	2350:8	8	(
FOR_INIT	2350:9	2350:12	8	n = 0 ;
EXPR	2350:9	2350:9	9	n = 0
ASSIGN	2350:9	2350:11	10	n = 0
LVAL	2350:9	2350:9	11	n
FIELD	2350:9	2350:9	12	n
LEAF_NODE	2350:9	2350:9	13	n
ASSIGN_OP	2350:10	2350:10	11	=
LEAF_NODE	2350:10	2350:10	12	=
RVAL	2350:11	2350:11	11	0
FIELD	2350:11	2350:11	12	0
LEAF_NODE	2350:11	2350:11	13	0
LEAF_NODE	2350:12	2350:12	9	;
CONDITION	2350:14	2350:14	8	n < count
EXPR	2350:14	2350:16	9	n < count
FIELD	2350:14	2350:14	10	n
LEAF_NODE	2350:14	2350:14	11	n
REL_OPERATOR	2350:15	2350:15	10	<
LEAF_NODE	2350:15	2350:15	11	<
FIELD	2350:16	2350:16	10	count
LEAF_NODE	2350:16	2350:16	11	count
LEAF_NODE	2350:21	2350:21	8	;
FOR_EXPR	2350:23	2350:23	8	n ++
EXPR	2350:23	2350:23	9	n ++
FIELD	2350:23	2350:24	10	n ++
LEAF_NODE	2350:23	2350:23	11	n
LEAF_NODE	2350:24	2350:24	11	++
LEAF_NODE	2350:26	2350:26	8	)
STATEMENTS	2351:5	2351:5	8	
EXPR_STATEMENT	2351:5	2351:25	9	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2351:5	2351:5	10	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2351:5	2351:11	11	* mb ++ = ( float ) ( * ma ++ )
LVAL	2351:5	2351:5	12	* mb ++
UNARY_EXPR	2351:5	2351:6	13	* mb ++
UNARY_OPERATOR	2351:5	2351:5	14	*
LEAF_NODE	2351:5	2351:5	15	*
FIELD	2351:6	2351:8	14	mb ++
LEAF_NODE	2351:6	2351:6	15	mb
LEAF_NODE	2351:8	2351:8	15	++
ASSIGN_OP	2351:10	2351:10	12	=
LEAF_NODE	2351:10	2351:10	13	=
RVAL	2351:11	2351:24	12	( float ) ( * ma ++ )
LEAF_NODE	2351:11	2351:11	13	(
TYPE_NAME	2351:12	2351:12	13	float
LEAF_NODE	2351:12	2351:12	14	float
LEAF_NODE	2351:17	2351:17	13	)
LEAF_NODE	2351:18	2351:18	13	(
UNARY_EXPR	2351:19	2351:20	13	* ma ++
UNARY_OPERATOR	2351:19	2351:19	14	*
LEAF_NODE	2351:19	2351:19	15	*
FIELD	2351:20	2351:22	14	ma ++
LEAF_NODE	2351:20	2351:20	15	ma
LEAF_NODE	2351:22	2351:22	15	++
LEAF_NODE	2351:24	2351:24	13	)
LEAF_NODE	2351:25	2351:25	10	;
LEAF_NODE	2352:3	2352:3	6	}
JUMP_STATEMENT	2353:3	2353:8	6	break DESTINATION ;
KEYWORD	2353:3	2353:3	7	break
LEAF_NODE	2353:3	2353:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2353:8	2353:8	7	;
LABEL	2354:2	2354:17	6	case TIFF_SHORT :
LEAF_NODE	2354:2	2354:2	7	case
LEAF_NODE	2354:7	2354:7	7	TIFF_SHORT
LEAF_NODE	2354:17	2354:17	7	:
LEAF_NODE	2355:3	2355:3	6	{
STATEMENTS	2356:4	2361:4	6	
SIMPLE_DECL	2356:4	2356:14	7	uint16 * ma ;
VAR_DECL	2356:4	2356:12	8	uint16 * ma
TYPE	2356:4	2356:10	9	uint16 *
TYPE_NAME	2356:4	2356:4	10	uint16
LEAF_NODE	2356:4	2356:4	11	uint16
POINTER	2356:10	2356:10	10	*
LEAF_NODE	2356:10	2356:10	11	*
NAME	2356:12	2356:12	9	ma
LEAF_NODE	2356:12	2356:12	10	ma
LEAF_NODE	2356:14	2356:14	8	;
SIMPLE_DECL	2357:4	2357:13	7	float * mb ;
VAR_DECL	2357:4	2357:11	8	float * mb
TYPE	2357:4	2357:9	9	float *
TYPE_NAME	2357:4	2357:4	10	float
LEAF_NODE	2357:4	2357:4	11	float
POINTER	2357:9	2357:9	10	*
LEAF_NODE	2357:9	2357:9	11	*
NAME	2357:11	2357:11	9	mb
LEAF_NODE	2357:11	2357:11	10	mb
LEAF_NODE	2357:13	2357:13	8	;
SIMPLE_DECL	2358:4	2358:12	7	uint32 n ;
VAR_DECL	2358:4	2358:11	8	uint32 n
TYPE	2358:4	2358:4	9	uint32
TYPE_NAME	2358:4	2358:4	10	uint32
LEAF_NODE	2358:4	2358:4	11	uint32
NAME	2358:11	2358:11	9	n
LEAF_NODE	2358:11	2358:11	10	n
LEAF_NODE	2358:12	2358:12	8	;
EXPR_STATEMENT	2359:4	2359:24	7	ma = ( uint16 * ) origdata ;
EXPR	2359:4	2359:4	8	ma = ( uint16 * ) origdata
ASSIGN	2359:4	2359:7	9	ma = ( uint16 * ) origdata
LVAL	2359:4	2359:4	10	ma
FIELD	2359:4	2359:4	11	ma
LEAF_NODE	2359:4	2359:4	12	ma
ASSIGN_OP	2359:6	2359:6	10	=
LEAF_NODE	2359:6	2359:6	11	=
RVAL	2359:7	2359:16	10	( uint16 * ) origdata
LEAF_NODE	2359:7	2359:7	11	(
TYPE_NAME	2359:8	2359:8	11	uint16
LEAF_NODE	2359:8	2359:8	12	uint16
LEAF_NODE	2359:14	2359:14	11	*
LEAF_NODE	2359:15	2359:15	11	)
FIELD	2359:16	2359:16	11	origdata
LEAF_NODE	2359:16	2359:16	12	origdata
LEAF_NODE	2359:24	2359:24	8	;
EXPR_STATEMENT	2360:4	2360:11	7	mb = data ;
EXPR	2360:4	2360:4	8	mb = data
ASSIGN	2360:4	2360:7	9	mb = data
LVAL	2360:4	2360:4	10	mb
FIELD	2360:4	2360:4	11	mb
LEAF_NODE	2360:4	2360:4	12	mb
ASSIGN_OP	2360:6	2360:6	10	=
LEAF_NODE	2360:6	2360:6	11	=
RVAL	2360:7	2360:7	10	data
FIELD	2360:7	2360:7	11	data
LEAF_NODE	2360:7	2360:7	12	data
LEAF_NODE	2360:11	2360:11	8	;
ITERATION	2361:4	2362:4	7	
KEYWORD	2361:4	2361:4	8	for
LEAF_NODE	2361:4	2361:4	9	for
LEAF_NODE	2361:8	2361:8	8	(
FOR_INIT	2361:9	2361:12	8	n = 0 ;
EXPR	2361:9	2361:9	9	n = 0
ASSIGN	2361:9	2361:11	10	n = 0
LVAL	2361:9	2361:9	11	n
FIELD	2361:9	2361:9	12	n
LEAF_NODE	2361:9	2361:9	13	n
ASSIGN_OP	2361:10	2361:10	11	=
LEAF_NODE	2361:10	2361:10	12	=
RVAL	2361:11	2361:11	11	0
FIELD	2361:11	2361:11	12	0
LEAF_NODE	2361:11	2361:11	13	0
LEAF_NODE	2361:12	2361:12	9	;
CONDITION	2361:14	2361:14	8	n < count
EXPR	2361:14	2361:16	9	n < count
FIELD	2361:14	2361:14	10	n
LEAF_NODE	2361:14	2361:14	11	n
REL_OPERATOR	2361:15	2361:15	10	<
LEAF_NODE	2361:15	2361:15	11	<
FIELD	2361:16	2361:16	10	count
LEAF_NODE	2361:16	2361:16	11	count
LEAF_NODE	2361:21	2361:21	8	;
FOR_EXPR	2361:23	2361:23	8	n ++
EXPR	2361:23	2361:23	9	n ++
FIELD	2361:23	2361:24	10	n ++
LEAF_NODE	2361:23	2361:23	11	n
LEAF_NODE	2361:24	2361:24	11	++
LEAF_NODE	2361:26	2361:26	8	)
STATEMENTS	2362:4	2366:4	8	
LEAF_NODE	2362:4	2362:4	9	{
STATEMENTS	2363:5	2365:5	9	
SELECTION	2363:5	2364:6	10	
KEYWORD	2363:5	2363:5	11	if
LEAF_NODE	2363:5	2363:5	12	if
LEAF_NODE	2363:8	2363:8	11	(
CONDITION	2363:9	2363:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2363:9	2363:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2363:9	2363:14	13	tif -> tif_flags
LEAF_NODE	2363:9	2363:9	14	tif
LEAF_NODE	2363:12	2363:12	14	->
LEAF_NODE	2363:14	2363:14	14	tif_flags
LEAF_NODE	2363:23	2363:23	13	&
FIELD	2363:24	2363:24	13	TIFF_SWAB
LEAF_NODE	2363:24	2363:24	14	TIFF_SWAB
LEAF_NODE	2363:33	2363:33	11	)
STATEMENTS	2364:6	2364:6	11	
EXPR_STATEMENT	2364:6	2364:23	12	TIFFSwabShort ( ma ) ;
EXPR	2364:6	2364:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	2364:6	2364:22	14	TIFFSwabShort ( ma )
CALLEE	2364:6	2364:6	15	TIFFSwabShort
LEAF_NODE	2364:6	2364:6	16	TIFFSwabShort
LEAF_NODE	2364:19	2364:19	15	(
ARGUMENT	2364:20	2364:20	15	ma
FIELD	2364:20	2364:20	16	ma
LEAF_NODE	2364:20	2364:20	17	ma
LEAF_NODE	2364:22	2364:22	15	)
LEAF_NODE	2364:23	2364:23	13	;
EXPR_STATEMENT	2365:5	2365:25	10	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2365:5	2365:5	11	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2365:5	2365:11	12	* mb ++ = ( float ) ( * ma ++ )
LVAL	2365:5	2365:5	13	* mb ++
UNARY_EXPR	2365:5	2365:6	14	* mb ++
UNARY_OPERATOR	2365:5	2365:5	15	*
LEAF_NODE	2365:5	2365:5	16	*
FIELD	2365:6	2365:8	15	mb ++
LEAF_NODE	2365:6	2365:6	16	mb
LEAF_NODE	2365:8	2365:8	16	++
ASSIGN_OP	2365:10	2365:10	13	=
LEAF_NODE	2365:10	2365:10	14	=
RVAL	2365:11	2365:24	13	( float ) ( * ma ++ )
LEAF_NODE	2365:11	2365:11	14	(
TYPE_NAME	2365:12	2365:12	14	float
LEAF_NODE	2365:12	2365:12	15	float
LEAF_NODE	2365:17	2365:17	14	)
LEAF_NODE	2365:18	2365:18	14	(
UNARY_EXPR	2365:19	2365:20	14	* ma ++
UNARY_OPERATOR	2365:19	2365:19	15	*
LEAF_NODE	2365:19	2365:19	16	*
FIELD	2365:20	2365:22	15	ma ++
LEAF_NODE	2365:20	2365:20	16	ma
LEAF_NODE	2365:22	2365:22	16	++
LEAF_NODE	2365:24	2365:24	14	)
LEAF_NODE	2365:25	2365:25	11	;
LEAF_NODE	2366:4	2366:4	9	}
LEAF_NODE	2367:3	2367:3	6	}
JUMP_STATEMENT	2368:3	2368:8	6	break DESTINATION ;
KEYWORD	2368:3	2368:3	7	break
LEAF_NODE	2368:3	2368:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2368:8	2368:8	7	;
LABEL	2369:2	2369:18	6	case TIFF_SSHORT :
LEAF_NODE	2369:2	2369:2	7	case
LEAF_NODE	2369:7	2369:7	7	TIFF_SSHORT
LEAF_NODE	2369:18	2369:18	7	:
LEAF_NODE	2370:3	2370:3	6	{
STATEMENTS	2371:4	2376:4	6	
SIMPLE_DECL	2371:4	2371:13	7	int16 * ma ;
VAR_DECL	2371:4	2371:11	8	int16 * ma
TYPE	2371:4	2371:9	9	int16 *
TYPE_NAME	2371:4	2371:4	10	int16
LEAF_NODE	2371:4	2371:4	11	int16
POINTER	2371:9	2371:9	10	*
LEAF_NODE	2371:9	2371:9	11	*
NAME	2371:11	2371:11	9	ma
LEAF_NODE	2371:11	2371:11	10	ma
LEAF_NODE	2371:13	2371:13	8	;
SIMPLE_DECL	2372:4	2372:13	7	float * mb ;
VAR_DECL	2372:4	2372:11	8	float * mb
TYPE	2372:4	2372:9	9	float *
TYPE_NAME	2372:4	2372:4	10	float
LEAF_NODE	2372:4	2372:4	11	float
POINTER	2372:9	2372:9	10	*
LEAF_NODE	2372:9	2372:9	11	*
NAME	2372:11	2372:11	9	mb
LEAF_NODE	2372:11	2372:11	10	mb
LEAF_NODE	2372:13	2372:13	8	;
SIMPLE_DECL	2373:4	2373:12	7	uint32 n ;
VAR_DECL	2373:4	2373:11	8	uint32 n
TYPE	2373:4	2373:4	9	uint32
TYPE_NAME	2373:4	2373:4	10	uint32
LEAF_NODE	2373:4	2373:4	11	uint32
NAME	2373:11	2373:11	9	n
LEAF_NODE	2373:11	2373:11	10	n
LEAF_NODE	2373:12	2373:12	8	;
EXPR_STATEMENT	2374:4	2374:23	7	ma = ( int16 * ) origdata ;
EXPR	2374:4	2374:4	8	ma = ( int16 * ) origdata
ASSIGN	2374:4	2374:7	9	ma = ( int16 * ) origdata
LVAL	2374:4	2374:4	10	ma
FIELD	2374:4	2374:4	11	ma
LEAF_NODE	2374:4	2374:4	12	ma
ASSIGN_OP	2374:6	2374:6	10	=
LEAF_NODE	2374:6	2374:6	11	=
RVAL	2374:7	2374:15	10	( int16 * ) origdata
LEAF_NODE	2374:7	2374:7	11	(
TYPE_NAME	2374:8	2374:8	11	int16
LEAF_NODE	2374:8	2374:8	12	int16
LEAF_NODE	2374:13	2374:13	11	*
LEAF_NODE	2374:14	2374:14	11	)
FIELD	2374:15	2374:15	11	origdata
LEAF_NODE	2374:15	2374:15	12	origdata
LEAF_NODE	2374:23	2374:23	8	;
EXPR_STATEMENT	2375:4	2375:11	7	mb = data ;
EXPR	2375:4	2375:4	8	mb = data
ASSIGN	2375:4	2375:7	9	mb = data
LVAL	2375:4	2375:4	10	mb
FIELD	2375:4	2375:4	11	mb
LEAF_NODE	2375:4	2375:4	12	mb
ASSIGN_OP	2375:6	2375:6	10	=
LEAF_NODE	2375:6	2375:6	11	=
RVAL	2375:7	2375:7	10	data
FIELD	2375:7	2375:7	11	data
LEAF_NODE	2375:7	2375:7	12	data
LEAF_NODE	2375:11	2375:11	8	;
ITERATION	2376:4	2377:4	7	
KEYWORD	2376:4	2376:4	8	for
LEAF_NODE	2376:4	2376:4	9	for
LEAF_NODE	2376:8	2376:8	8	(
FOR_INIT	2376:9	2376:12	8	n = 0 ;
EXPR	2376:9	2376:9	9	n = 0
ASSIGN	2376:9	2376:11	10	n = 0
LVAL	2376:9	2376:9	11	n
FIELD	2376:9	2376:9	12	n
LEAF_NODE	2376:9	2376:9	13	n
ASSIGN_OP	2376:10	2376:10	11	=
LEAF_NODE	2376:10	2376:10	12	=
RVAL	2376:11	2376:11	11	0
FIELD	2376:11	2376:11	12	0
LEAF_NODE	2376:11	2376:11	13	0
LEAF_NODE	2376:12	2376:12	9	;
CONDITION	2376:14	2376:14	8	n < count
EXPR	2376:14	2376:16	9	n < count
FIELD	2376:14	2376:14	10	n
LEAF_NODE	2376:14	2376:14	11	n
REL_OPERATOR	2376:15	2376:15	10	<
LEAF_NODE	2376:15	2376:15	11	<
FIELD	2376:16	2376:16	10	count
LEAF_NODE	2376:16	2376:16	11	count
LEAF_NODE	2376:21	2376:21	8	;
FOR_EXPR	2376:23	2376:23	8	n ++
EXPR	2376:23	2376:23	9	n ++
FIELD	2376:23	2376:24	10	n ++
LEAF_NODE	2376:23	2376:23	11	n
LEAF_NODE	2376:24	2376:24	11	++
LEAF_NODE	2376:26	2376:26	8	)
STATEMENTS	2377:4	2381:4	8	
LEAF_NODE	2377:4	2377:4	9	{
STATEMENTS	2378:5	2380:5	9	
SELECTION	2378:5	2379:6	10	
KEYWORD	2378:5	2378:5	11	if
LEAF_NODE	2378:5	2378:5	12	if
LEAF_NODE	2378:8	2378:8	11	(
CONDITION	2378:9	2378:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2378:9	2378:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2378:9	2378:14	13	tif -> tif_flags
LEAF_NODE	2378:9	2378:9	14	tif
LEAF_NODE	2378:12	2378:12	14	->
LEAF_NODE	2378:14	2378:14	14	tif_flags
LEAF_NODE	2378:23	2378:23	13	&
FIELD	2378:24	2378:24	13	TIFF_SWAB
LEAF_NODE	2378:24	2378:24	14	TIFF_SWAB
LEAF_NODE	2378:33	2378:33	11	)
STATEMENTS	2379:6	2379:6	11	
EXPR_STATEMENT	2379:6	2379:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	2379:6	2379:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	2379:6	2379:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	2379:6	2379:6	15	TIFFSwabShort
LEAF_NODE	2379:6	2379:6	16	TIFFSwabShort
LEAF_NODE	2379:19	2379:19	15	(
ARGUMENT	2379:20	2379:29	15	( uint16 * ) ma
LEAF_NODE	2379:20	2379:20	16	(
TYPE_NAME	2379:21	2379:21	16	uint16
LEAF_NODE	2379:21	2379:21	17	uint16
LEAF_NODE	2379:27	2379:27	16	*
LEAF_NODE	2379:28	2379:28	16	)
FIELD	2379:29	2379:29	16	ma
LEAF_NODE	2379:29	2379:29	17	ma
LEAF_NODE	2379:31	2379:31	15	)
LEAF_NODE	2379:32	2379:32	13	;
EXPR_STATEMENT	2380:5	2380:25	10	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2380:5	2380:5	11	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2380:5	2380:11	12	* mb ++ = ( float ) ( * ma ++ )
LVAL	2380:5	2380:5	13	* mb ++
UNARY_EXPR	2380:5	2380:6	14	* mb ++
UNARY_OPERATOR	2380:5	2380:5	15	*
LEAF_NODE	2380:5	2380:5	16	*
FIELD	2380:6	2380:8	15	mb ++
LEAF_NODE	2380:6	2380:6	16	mb
LEAF_NODE	2380:8	2380:8	16	++
ASSIGN_OP	2380:10	2380:10	13	=
LEAF_NODE	2380:10	2380:10	14	=
RVAL	2380:11	2380:24	13	( float ) ( * ma ++ )
LEAF_NODE	2380:11	2380:11	14	(
TYPE_NAME	2380:12	2380:12	14	float
LEAF_NODE	2380:12	2380:12	15	float
LEAF_NODE	2380:17	2380:17	14	)
LEAF_NODE	2380:18	2380:18	14	(
UNARY_EXPR	2380:19	2380:20	14	* ma ++
UNARY_OPERATOR	2380:19	2380:19	15	*
LEAF_NODE	2380:19	2380:19	16	*
FIELD	2380:20	2380:22	15	ma ++
LEAF_NODE	2380:20	2380:20	16	ma
LEAF_NODE	2380:22	2380:22	16	++
LEAF_NODE	2380:24	2380:24	14	)
LEAF_NODE	2380:25	2380:25	11	;
LEAF_NODE	2381:4	2381:4	9	}
LEAF_NODE	2382:3	2382:3	6	}
JUMP_STATEMENT	2383:3	2383:8	6	break DESTINATION ;
KEYWORD	2383:3	2383:3	7	break
LEAF_NODE	2383:3	2383:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2383:8	2383:8	7	;
LABEL	2384:2	2384:16	6	case TIFF_LONG :
LEAF_NODE	2384:2	2384:2	7	case
LEAF_NODE	2384:7	2384:7	7	TIFF_LONG
LEAF_NODE	2384:16	2384:16	7	:
LEAF_NODE	2385:3	2385:3	6	{
STATEMENTS	2386:4	2391:4	6	
SIMPLE_DECL	2386:4	2386:14	7	uint32 * ma ;
VAR_DECL	2386:4	2386:12	8	uint32 * ma
TYPE	2386:4	2386:10	9	uint32 *
TYPE_NAME	2386:4	2386:4	10	uint32
LEAF_NODE	2386:4	2386:4	11	uint32
POINTER	2386:10	2386:10	10	*
LEAF_NODE	2386:10	2386:10	11	*
NAME	2386:12	2386:12	9	ma
LEAF_NODE	2386:12	2386:12	10	ma
LEAF_NODE	2386:14	2386:14	8	;
SIMPLE_DECL	2387:4	2387:13	7	float * mb ;
VAR_DECL	2387:4	2387:11	8	float * mb
TYPE	2387:4	2387:9	9	float *
TYPE_NAME	2387:4	2387:4	10	float
LEAF_NODE	2387:4	2387:4	11	float
POINTER	2387:9	2387:9	10	*
LEAF_NODE	2387:9	2387:9	11	*
NAME	2387:11	2387:11	9	mb
LEAF_NODE	2387:11	2387:11	10	mb
LEAF_NODE	2387:13	2387:13	8	;
SIMPLE_DECL	2388:4	2388:12	7	uint32 n ;
VAR_DECL	2388:4	2388:11	8	uint32 n
TYPE	2388:4	2388:4	9	uint32
TYPE_NAME	2388:4	2388:4	10	uint32
LEAF_NODE	2388:4	2388:4	11	uint32
NAME	2388:11	2388:11	9	n
LEAF_NODE	2388:11	2388:11	10	n
LEAF_NODE	2388:12	2388:12	8	;
EXPR_STATEMENT	2389:4	2389:24	7	ma = ( uint32 * ) origdata ;
EXPR	2389:4	2389:4	8	ma = ( uint32 * ) origdata
ASSIGN	2389:4	2389:7	9	ma = ( uint32 * ) origdata
LVAL	2389:4	2389:4	10	ma
FIELD	2389:4	2389:4	11	ma
LEAF_NODE	2389:4	2389:4	12	ma
ASSIGN_OP	2389:6	2389:6	10	=
LEAF_NODE	2389:6	2389:6	11	=
RVAL	2389:7	2389:16	10	( uint32 * ) origdata
LEAF_NODE	2389:7	2389:7	11	(
TYPE_NAME	2389:8	2389:8	11	uint32
LEAF_NODE	2389:8	2389:8	12	uint32
LEAF_NODE	2389:14	2389:14	11	*
LEAF_NODE	2389:15	2389:15	11	)
FIELD	2389:16	2389:16	11	origdata
LEAF_NODE	2389:16	2389:16	12	origdata
LEAF_NODE	2389:24	2389:24	8	;
EXPR_STATEMENT	2390:4	2390:11	7	mb = data ;
EXPR	2390:4	2390:4	8	mb = data
ASSIGN	2390:4	2390:7	9	mb = data
LVAL	2390:4	2390:4	10	mb
FIELD	2390:4	2390:4	11	mb
LEAF_NODE	2390:4	2390:4	12	mb
ASSIGN_OP	2390:6	2390:6	10	=
LEAF_NODE	2390:6	2390:6	11	=
RVAL	2390:7	2390:7	10	data
FIELD	2390:7	2390:7	11	data
LEAF_NODE	2390:7	2390:7	12	data
LEAF_NODE	2390:11	2390:11	8	;
ITERATION	2391:4	2392:4	7	
KEYWORD	2391:4	2391:4	8	for
LEAF_NODE	2391:4	2391:4	9	for
LEAF_NODE	2391:8	2391:8	8	(
FOR_INIT	2391:9	2391:12	8	n = 0 ;
EXPR	2391:9	2391:9	9	n = 0
ASSIGN	2391:9	2391:11	10	n = 0
LVAL	2391:9	2391:9	11	n
FIELD	2391:9	2391:9	12	n
LEAF_NODE	2391:9	2391:9	13	n
ASSIGN_OP	2391:10	2391:10	11	=
LEAF_NODE	2391:10	2391:10	12	=
RVAL	2391:11	2391:11	11	0
FIELD	2391:11	2391:11	12	0
LEAF_NODE	2391:11	2391:11	13	0
LEAF_NODE	2391:12	2391:12	9	;
CONDITION	2391:14	2391:14	8	n < count
EXPR	2391:14	2391:16	9	n < count
FIELD	2391:14	2391:14	10	n
LEAF_NODE	2391:14	2391:14	11	n
REL_OPERATOR	2391:15	2391:15	10	<
LEAF_NODE	2391:15	2391:15	11	<
FIELD	2391:16	2391:16	10	count
LEAF_NODE	2391:16	2391:16	11	count
LEAF_NODE	2391:21	2391:21	8	;
FOR_EXPR	2391:23	2391:23	8	n ++
EXPR	2391:23	2391:23	9	n ++
FIELD	2391:23	2391:24	10	n ++
LEAF_NODE	2391:23	2391:23	11	n
LEAF_NODE	2391:24	2391:24	11	++
LEAF_NODE	2391:26	2391:26	8	)
STATEMENTS	2392:4	2396:4	8	
LEAF_NODE	2392:4	2392:4	9	{
STATEMENTS	2393:5	2395:5	9	
SELECTION	2393:5	2394:6	10	
KEYWORD	2393:5	2393:5	11	if
LEAF_NODE	2393:5	2393:5	12	if
LEAF_NODE	2393:8	2393:8	11	(
CONDITION	2393:9	2393:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2393:9	2393:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2393:9	2393:14	13	tif -> tif_flags
LEAF_NODE	2393:9	2393:9	14	tif
LEAF_NODE	2393:12	2393:12	14	->
LEAF_NODE	2393:14	2393:14	14	tif_flags
LEAF_NODE	2393:23	2393:23	13	&
FIELD	2393:24	2393:24	13	TIFF_SWAB
LEAF_NODE	2393:24	2393:24	14	TIFF_SWAB
LEAF_NODE	2393:33	2393:33	11	)
STATEMENTS	2394:6	2394:6	11	
EXPR_STATEMENT	2394:6	2394:22	12	TIFFSwabLong ( ma ) ;
EXPR	2394:6	2394:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2394:6	2394:21	14	TIFFSwabLong ( ma )
CALLEE	2394:6	2394:6	15	TIFFSwabLong
LEAF_NODE	2394:6	2394:6	16	TIFFSwabLong
LEAF_NODE	2394:18	2394:18	15	(
ARGUMENT	2394:19	2394:19	15	ma
FIELD	2394:19	2394:19	16	ma
LEAF_NODE	2394:19	2394:19	17	ma
LEAF_NODE	2394:21	2394:21	15	)
LEAF_NODE	2394:22	2394:22	13	;
EXPR_STATEMENT	2395:5	2395:25	10	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2395:5	2395:5	11	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2395:5	2395:11	12	* mb ++ = ( float ) ( * ma ++ )
LVAL	2395:5	2395:5	13	* mb ++
UNARY_EXPR	2395:5	2395:6	14	* mb ++
UNARY_OPERATOR	2395:5	2395:5	15	*
LEAF_NODE	2395:5	2395:5	16	*
FIELD	2395:6	2395:8	15	mb ++
LEAF_NODE	2395:6	2395:6	16	mb
LEAF_NODE	2395:8	2395:8	16	++
ASSIGN_OP	2395:10	2395:10	13	=
LEAF_NODE	2395:10	2395:10	14	=
RVAL	2395:11	2395:24	13	( float ) ( * ma ++ )
LEAF_NODE	2395:11	2395:11	14	(
TYPE_NAME	2395:12	2395:12	14	float
LEAF_NODE	2395:12	2395:12	15	float
LEAF_NODE	2395:17	2395:17	14	)
LEAF_NODE	2395:18	2395:18	14	(
UNARY_EXPR	2395:19	2395:20	14	* ma ++
UNARY_OPERATOR	2395:19	2395:19	15	*
LEAF_NODE	2395:19	2395:19	16	*
FIELD	2395:20	2395:22	15	ma ++
LEAF_NODE	2395:20	2395:20	16	ma
LEAF_NODE	2395:22	2395:22	16	++
LEAF_NODE	2395:24	2395:24	14	)
LEAF_NODE	2395:25	2395:25	11	;
LEAF_NODE	2396:4	2396:4	9	}
LEAF_NODE	2397:3	2397:3	6	}
JUMP_STATEMENT	2398:3	2398:8	6	break DESTINATION ;
KEYWORD	2398:3	2398:3	7	break
LEAF_NODE	2398:3	2398:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2398:8	2398:8	7	;
LABEL	2399:2	2399:17	6	case TIFF_SLONG :
LEAF_NODE	2399:2	2399:2	7	case
LEAF_NODE	2399:7	2399:7	7	TIFF_SLONG
LEAF_NODE	2399:17	2399:17	7	:
LEAF_NODE	2400:3	2400:3	6	{
STATEMENTS	2401:4	2406:4	6	
SIMPLE_DECL	2401:4	2401:13	7	int32 * ma ;
VAR_DECL	2401:4	2401:11	8	int32 * ma
TYPE	2401:4	2401:9	9	int32 *
TYPE_NAME	2401:4	2401:4	10	int32
LEAF_NODE	2401:4	2401:4	11	int32
POINTER	2401:9	2401:9	10	*
LEAF_NODE	2401:9	2401:9	11	*
NAME	2401:11	2401:11	9	ma
LEAF_NODE	2401:11	2401:11	10	ma
LEAF_NODE	2401:13	2401:13	8	;
SIMPLE_DECL	2402:4	2402:13	7	float * mb ;
VAR_DECL	2402:4	2402:11	8	float * mb
TYPE	2402:4	2402:9	9	float *
TYPE_NAME	2402:4	2402:4	10	float
LEAF_NODE	2402:4	2402:4	11	float
POINTER	2402:9	2402:9	10	*
LEAF_NODE	2402:9	2402:9	11	*
NAME	2402:11	2402:11	9	mb
LEAF_NODE	2402:11	2402:11	10	mb
LEAF_NODE	2402:13	2402:13	8	;
SIMPLE_DECL	2403:4	2403:12	7	uint32 n ;
VAR_DECL	2403:4	2403:11	8	uint32 n
TYPE	2403:4	2403:4	9	uint32
TYPE_NAME	2403:4	2403:4	10	uint32
LEAF_NODE	2403:4	2403:4	11	uint32
NAME	2403:11	2403:11	9	n
LEAF_NODE	2403:11	2403:11	10	n
LEAF_NODE	2403:12	2403:12	8	;
EXPR_STATEMENT	2404:4	2404:23	7	ma = ( int32 * ) origdata ;
EXPR	2404:4	2404:4	8	ma = ( int32 * ) origdata
ASSIGN	2404:4	2404:7	9	ma = ( int32 * ) origdata
LVAL	2404:4	2404:4	10	ma
FIELD	2404:4	2404:4	11	ma
LEAF_NODE	2404:4	2404:4	12	ma
ASSIGN_OP	2404:6	2404:6	10	=
LEAF_NODE	2404:6	2404:6	11	=
RVAL	2404:7	2404:15	10	( int32 * ) origdata
LEAF_NODE	2404:7	2404:7	11	(
TYPE_NAME	2404:8	2404:8	11	int32
LEAF_NODE	2404:8	2404:8	12	int32
LEAF_NODE	2404:13	2404:13	11	*
LEAF_NODE	2404:14	2404:14	11	)
FIELD	2404:15	2404:15	11	origdata
LEAF_NODE	2404:15	2404:15	12	origdata
LEAF_NODE	2404:23	2404:23	8	;
EXPR_STATEMENT	2405:4	2405:11	7	mb = data ;
EXPR	2405:4	2405:4	8	mb = data
ASSIGN	2405:4	2405:7	9	mb = data
LVAL	2405:4	2405:4	10	mb
FIELD	2405:4	2405:4	11	mb
LEAF_NODE	2405:4	2405:4	12	mb
ASSIGN_OP	2405:6	2405:6	10	=
LEAF_NODE	2405:6	2405:6	11	=
RVAL	2405:7	2405:7	10	data
FIELD	2405:7	2405:7	11	data
LEAF_NODE	2405:7	2405:7	12	data
LEAF_NODE	2405:11	2405:11	8	;
ITERATION	2406:4	2407:4	7	
KEYWORD	2406:4	2406:4	8	for
LEAF_NODE	2406:4	2406:4	9	for
LEAF_NODE	2406:8	2406:8	8	(
FOR_INIT	2406:9	2406:12	8	n = 0 ;
EXPR	2406:9	2406:9	9	n = 0
ASSIGN	2406:9	2406:11	10	n = 0
LVAL	2406:9	2406:9	11	n
FIELD	2406:9	2406:9	12	n
LEAF_NODE	2406:9	2406:9	13	n
ASSIGN_OP	2406:10	2406:10	11	=
LEAF_NODE	2406:10	2406:10	12	=
RVAL	2406:11	2406:11	11	0
FIELD	2406:11	2406:11	12	0
LEAF_NODE	2406:11	2406:11	13	0
LEAF_NODE	2406:12	2406:12	9	;
CONDITION	2406:14	2406:14	8	n < count
EXPR	2406:14	2406:16	9	n < count
FIELD	2406:14	2406:14	10	n
LEAF_NODE	2406:14	2406:14	11	n
REL_OPERATOR	2406:15	2406:15	10	<
LEAF_NODE	2406:15	2406:15	11	<
FIELD	2406:16	2406:16	10	count
LEAF_NODE	2406:16	2406:16	11	count
LEAF_NODE	2406:21	2406:21	8	;
FOR_EXPR	2406:23	2406:23	8	n ++
EXPR	2406:23	2406:23	9	n ++
FIELD	2406:23	2406:24	10	n ++
LEAF_NODE	2406:23	2406:23	11	n
LEAF_NODE	2406:24	2406:24	11	++
LEAF_NODE	2406:26	2406:26	8	)
STATEMENTS	2407:4	2411:4	8	
LEAF_NODE	2407:4	2407:4	9	{
STATEMENTS	2408:5	2410:5	9	
SELECTION	2408:5	2409:6	10	
KEYWORD	2408:5	2408:5	11	if
LEAF_NODE	2408:5	2408:5	12	if
LEAF_NODE	2408:8	2408:8	11	(
CONDITION	2408:9	2408:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2408:9	2408:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2408:9	2408:14	13	tif -> tif_flags
LEAF_NODE	2408:9	2408:9	14	tif
LEAF_NODE	2408:12	2408:12	14	->
LEAF_NODE	2408:14	2408:14	14	tif_flags
LEAF_NODE	2408:23	2408:23	13	&
FIELD	2408:24	2408:24	13	TIFF_SWAB
LEAF_NODE	2408:24	2408:24	14	TIFF_SWAB
LEAF_NODE	2408:33	2408:33	11	)
STATEMENTS	2409:6	2409:6	11	
EXPR_STATEMENT	2409:6	2409:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	2409:6	2409:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	2409:6	2409:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	2409:6	2409:6	15	TIFFSwabLong
LEAF_NODE	2409:6	2409:6	16	TIFFSwabLong
LEAF_NODE	2409:18	2409:18	15	(
ARGUMENT	2409:19	2409:28	15	( uint32 * ) ma
LEAF_NODE	2409:19	2409:19	16	(
TYPE_NAME	2409:20	2409:20	16	uint32
LEAF_NODE	2409:20	2409:20	17	uint32
LEAF_NODE	2409:26	2409:26	16	*
LEAF_NODE	2409:27	2409:27	16	)
FIELD	2409:28	2409:28	16	ma
LEAF_NODE	2409:28	2409:28	17	ma
LEAF_NODE	2409:30	2409:30	15	)
LEAF_NODE	2409:31	2409:31	13	;
EXPR_STATEMENT	2410:5	2410:25	10	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2410:5	2410:5	11	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2410:5	2410:11	12	* mb ++ = ( float ) ( * ma ++ )
LVAL	2410:5	2410:5	13	* mb ++
UNARY_EXPR	2410:5	2410:6	14	* mb ++
UNARY_OPERATOR	2410:5	2410:5	15	*
LEAF_NODE	2410:5	2410:5	16	*
FIELD	2410:6	2410:8	15	mb ++
LEAF_NODE	2410:6	2410:6	16	mb
LEAF_NODE	2410:8	2410:8	16	++
ASSIGN_OP	2410:10	2410:10	13	=
LEAF_NODE	2410:10	2410:10	14	=
RVAL	2410:11	2410:24	13	( float ) ( * ma ++ )
LEAF_NODE	2410:11	2410:11	14	(
TYPE_NAME	2410:12	2410:12	14	float
LEAF_NODE	2410:12	2410:12	15	float
LEAF_NODE	2410:17	2410:17	14	)
LEAF_NODE	2410:18	2410:18	14	(
UNARY_EXPR	2410:19	2410:20	14	* ma ++
UNARY_OPERATOR	2410:19	2410:19	15	*
LEAF_NODE	2410:19	2410:19	16	*
FIELD	2410:20	2410:22	15	ma ++
LEAF_NODE	2410:20	2410:20	16	ma
LEAF_NODE	2410:22	2410:22	16	++
LEAF_NODE	2410:24	2410:24	14	)
LEAF_NODE	2410:25	2410:25	11	;
LEAF_NODE	2411:4	2411:4	9	}
LEAF_NODE	2412:3	2412:3	6	}
JUMP_STATEMENT	2413:3	2413:8	6	break DESTINATION ;
KEYWORD	2413:3	2413:3	7	break
LEAF_NODE	2413:3	2413:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2413:8	2413:8	7	;
LABEL	2414:2	2414:17	6	case TIFF_LONG8 :
LEAF_NODE	2414:2	2414:2	7	case
LEAF_NODE	2414:7	2414:7	7	TIFF_LONG8
LEAF_NODE	2414:17	2414:17	7	:
LEAF_NODE	2415:3	2415:3	6	{
STATEMENTS	2416:4	2421:4	6	
SIMPLE_DECL	2416:4	2416:14	7	uint64 * ma ;
VAR_DECL	2416:4	2416:12	8	uint64 * ma
TYPE	2416:4	2416:10	9	uint64 *
TYPE_NAME	2416:4	2416:4	10	uint64
LEAF_NODE	2416:4	2416:4	11	uint64
POINTER	2416:10	2416:10	10	*
LEAF_NODE	2416:10	2416:10	11	*
NAME	2416:12	2416:12	9	ma
LEAF_NODE	2416:12	2416:12	10	ma
LEAF_NODE	2416:14	2416:14	8	;
SIMPLE_DECL	2417:4	2417:13	7	float * mb ;
VAR_DECL	2417:4	2417:11	8	float * mb
TYPE	2417:4	2417:9	9	float *
TYPE_NAME	2417:4	2417:4	10	float
LEAF_NODE	2417:4	2417:4	11	float
POINTER	2417:9	2417:9	10	*
LEAF_NODE	2417:9	2417:9	11	*
NAME	2417:11	2417:11	9	mb
LEAF_NODE	2417:11	2417:11	10	mb
LEAF_NODE	2417:13	2417:13	8	;
SIMPLE_DECL	2418:4	2418:12	7	uint32 n ;
VAR_DECL	2418:4	2418:11	8	uint32 n
TYPE	2418:4	2418:4	9	uint32
TYPE_NAME	2418:4	2418:4	10	uint32
LEAF_NODE	2418:4	2418:4	11	uint32
NAME	2418:11	2418:11	9	n
LEAF_NODE	2418:11	2418:11	10	n
LEAF_NODE	2418:12	2418:12	8	;
EXPR_STATEMENT	2419:4	2419:24	7	ma = ( uint64 * ) origdata ;
EXPR	2419:4	2419:4	8	ma = ( uint64 * ) origdata
ASSIGN	2419:4	2419:7	9	ma = ( uint64 * ) origdata
LVAL	2419:4	2419:4	10	ma
FIELD	2419:4	2419:4	11	ma
LEAF_NODE	2419:4	2419:4	12	ma
ASSIGN_OP	2419:6	2419:6	10	=
LEAF_NODE	2419:6	2419:6	11	=
RVAL	2419:7	2419:16	10	( uint64 * ) origdata
LEAF_NODE	2419:7	2419:7	11	(
TYPE_NAME	2419:8	2419:8	11	uint64
LEAF_NODE	2419:8	2419:8	12	uint64
LEAF_NODE	2419:14	2419:14	11	*
LEAF_NODE	2419:15	2419:15	11	)
FIELD	2419:16	2419:16	11	origdata
LEAF_NODE	2419:16	2419:16	12	origdata
LEAF_NODE	2419:24	2419:24	8	;
EXPR_STATEMENT	2420:4	2420:11	7	mb = data ;
EXPR	2420:4	2420:4	8	mb = data
ASSIGN	2420:4	2420:7	9	mb = data
LVAL	2420:4	2420:4	10	mb
FIELD	2420:4	2420:4	11	mb
LEAF_NODE	2420:4	2420:4	12	mb
ASSIGN_OP	2420:6	2420:6	10	=
LEAF_NODE	2420:6	2420:6	11	=
RVAL	2420:7	2420:7	10	data
FIELD	2420:7	2420:7	11	data
LEAF_NODE	2420:7	2420:7	12	data
LEAF_NODE	2420:11	2420:11	8	;
ITERATION	2421:4	2422:4	7	
KEYWORD	2421:4	2421:4	8	for
LEAF_NODE	2421:4	2421:4	9	for
LEAF_NODE	2421:8	2421:8	8	(
FOR_INIT	2421:9	2421:12	8	n = 0 ;
EXPR	2421:9	2421:9	9	n = 0
ASSIGN	2421:9	2421:11	10	n = 0
LVAL	2421:9	2421:9	11	n
FIELD	2421:9	2421:9	12	n
LEAF_NODE	2421:9	2421:9	13	n
ASSIGN_OP	2421:10	2421:10	11	=
LEAF_NODE	2421:10	2421:10	12	=
RVAL	2421:11	2421:11	11	0
FIELD	2421:11	2421:11	12	0
LEAF_NODE	2421:11	2421:11	13	0
LEAF_NODE	2421:12	2421:12	9	;
CONDITION	2421:14	2421:14	8	n < count
EXPR	2421:14	2421:16	9	n < count
FIELD	2421:14	2421:14	10	n
LEAF_NODE	2421:14	2421:14	11	n
REL_OPERATOR	2421:15	2421:15	10	<
LEAF_NODE	2421:15	2421:15	11	<
FIELD	2421:16	2421:16	10	count
LEAF_NODE	2421:16	2421:16	11	count
LEAF_NODE	2421:21	2421:21	8	;
FOR_EXPR	2421:23	2421:23	8	n ++
EXPR	2421:23	2421:23	9	n ++
FIELD	2421:23	2421:24	10	n ++
LEAF_NODE	2421:23	2421:23	11	n
LEAF_NODE	2421:24	2421:24	11	++
LEAF_NODE	2421:26	2421:26	8	)
STATEMENTS	2422:4	2435:4	8	
LEAF_NODE	2422:4	2422:4	9	{
STATEMENTS	2423:5	2433:5	9	
SELECTION	2423:5	2424:6	10	
KEYWORD	2423:5	2423:5	11	if
LEAF_NODE	2423:5	2423:5	12	if
LEAF_NODE	2423:8	2423:8	11	(
CONDITION	2423:9	2423:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2423:9	2423:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2423:9	2423:14	13	tif -> tif_flags
LEAF_NODE	2423:9	2423:9	14	tif
LEAF_NODE	2423:12	2423:12	14	->
LEAF_NODE	2423:14	2423:14	14	tif_flags
LEAF_NODE	2423:23	2423:23	13	&
FIELD	2423:24	2423:24	13	TIFF_SWAB
LEAF_NODE	2423:24	2423:24	14	TIFF_SWAB
LEAF_NODE	2423:33	2423:33	11	)
STATEMENTS	2424:6	2424:6	11	
EXPR_STATEMENT	2424:6	2424:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	2424:6	2424:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	2424:6	2424:22	14	TIFFSwabLong8 ( ma )
CALLEE	2424:6	2424:6	15	TIFFSwabLong8
LEAF_NODE	2424:6	2424:6	16	TIFFSwabLong8
LEAF_NODE	2424:19	2424:19	15	(
ARGUMENT	2424:20	2424:20	15	ma
FIELD	2424:20	2424:20	16	ma
LEAF_NODE	2424:20	2424:20	17	ma
LEAF_NODE	2424:22	2424:22	15	)
LEAF_NODE	2424:23	2424:23	13	;
EXPR_STATEMENT	2431:5	2431:38	10	* mb ++ = _TIFFUInt64ToFloat ( * ma ++ ) ;
EXPR	2431:5	2431:5	11	* mb ++ = _TIFFUInt64ToFloat ( * ma ++ )
ASSIGN	2431:5	2431:13	12	* mb ++ = _TIFFUInt64ToFloat ( * ma ++ )
LVAL	2431:5	2431:5	13	* mb ++
UNARY_EXPR	2431:5	2431:6	14	* mb ++
UNARY_OPERATOR	2431:5	2431:5	15	*
LEAF_NODE	2431:5	2431:5	16	*
FIELD	2431:6	2431:8	15	mb ++
LEAF_NODE	2431:6	2431:6	16	mb
LEAF_NODE	2431:8	2431:8	16	++
ASSIGN_OP	2431:11	2431:11	13	=
LEAF_NODE	2431:11	2431:11	14	=
RVAL	2431:13	2431:13	13	_TIFFUInt64ToFloat ( * ma ++ )
FUNCTION_CALL	2431:13	2431:37	14	_TIFFUInt64ToFloat ( * ma ++ )
CALLEE	2431:13	2431:13	15	_TIFFUInt64ToFloat
LEAF_NODE	2431:13	2431:13	16	_TIFFUInt64ToFloat
LEAF_NODE	2431:31	2431:31	15	(
ARGUMENT	2431:32	2431:32	15	* ma ++
UNARY_EXPR	2431:32	2431:33	16	* ma ++
UNARY_OPERATOR	2431:32	2431:32	17	*
LEAF_NODE	2431:32	2431:32	18	*
FIELD	2431:33	2431:35	17	ma ++
LEAF_NODE	2431:33	2431:33	18	ma
LEAF_NODE	2431:35	2431:35	18	++
LEAF_NODE	2431:37	2431:37	15	)
LEAF_NODE	2431:38	2431:38	11	;
EXPR_STATEMENT	2433:5	2433:27	10	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2433:5	2433:5	11	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2433:5	2433:13	12	* mb ++ = ( float ) ( * ma ++ )
LVAL	2433:5	2433:5	13	* mb ++
UNARY_EXPR	2433:5	2433:6	14	* mb ++
UNARY_OPERATOR	2433:5	2433:5	15	*
LEAF_NODE	2433:5	2433:5	16	*
FIELD	2433:6	2433:8	15	mb ++
LEAF_NODE	2433:6	2433:6	16	mb
LEAF_NODE	2433:8	2433:8	16	++
ASSIGN_OP	2433:11	2433:11	13	=
LEAF_NODE	2433:11	2433:11	14	=
RVAL	2433:13	2433:26	13	( float ) ( * ma ++ )
LEAF_NODE	2433:13	2433:13	14	(
TYPE_NAME	2433:14	2433:14	14	float
LEAF_NODE	2433:14	2433:14	15	float
LEAF_NODE	2433:19	2433:19	14	)
LEAF_NODE	2433:20	2433:20	14	(
UNARY_EXPR	2433:21	2433:22	14	* ma ++
UNARY_OPERATOR	2433:21	2433:21	15	*
LEAF_NODE	2433:21	2433:21	16	*
FIELD	2433:22	2433:24	15	ma ++
LEAF_NODE	2433:22	2433:22	16	ma
LEAF_NODE	2433:24	2433:24	16	++
LEAF_NODE	2433:26	2433:26	14	)
LEAF_NODE	2433:27	2433:27	11	;
LEAF_NODE	2435:4	2435:4	9	}
LEAF_NODE	2436:3	2436:3	6	}
JUMP_STATEMENT	2437:3	2437:8	6	break DESTINATION ;
KEYWORD	2437:3	2437:3	7	break
LEAF_NODE	2437:3	2437:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2437:8	2437:8	7	;
LABEL	2438:2	2438:18	6	case TIFF_SLONG8 :
LEAF_NODE	2438:2	2438:2	7	case
LEAF_NODE	2438:7	2438:7	7	TIFF_SLONG8
LEAF_NODE	2438:18	2438:18	7	:
LEAF_NODE	2439:3	2439:3	6	{
STATEMENTS	2440:4	2445:4	6	
SIMPLE_DECL	2440:4	2440:13	7	int64 * ma ;
VAR_DECL	2440:4	2440:11	8	int64 * ma
TYPE	2440:4	2440:9	9	int64 *
TYPE_NAME	2440:4	2440:4	10	int64
LEAF_NODE	2440:4	2440:4	11	int64
POINTER	2440:9	2440:9	10	*
LEAF_NODE	2440:9	2440:9	11	*
NAME	2440:11	2440:11	9	ma
LEAF_NODE	2440:11	2440:11	10	ma
LEAF_NODE	2440:13	2440:13	8	;
SIMPLE_DECL	2441:4	2441:13	7	float * mb ;
VAR_DECL	2441:4	2441:11	8	float * mb
TYPE	2441:4	2441:9	9	float *
TYPE_NAME	2441:4	2441:4	10	float
LEAF_NODE	2441:4	2441:4	11	float
POINTER	2441:9	2441:9	10	*
LEAF_NODE	2441:9	2441:9	11	*
NAME	2441:11	2441:11	9	mb
LEAF_NODE	2441:11	2441:11	10	mb
LEAF_NODE	2441:13	2441:13	8	;
SIMPLE_DECL	2442:4	2442:12	7	uint32 n ;
VAR_DECL	2442:4	2442:11	8	uint32 n
TYPE	2442:4	2442:4	9	uint32
TYPE_NAME	2442:4	2442:4	10	uint32
LEAF_NODE	2442:4	2442:4	11	uint32
NAME	2442:11	2442:11	9	n
LEAF_NODE	2442:11	2442:11	10	n
LEAF_NODE	2442:12	2442:12	8	;
EXPR_STATEMENT	2443:4	2443:23	7	ma = ( int64 * ) origdata ;
EXPR	2443:4	2443:4	8	ma = ( int64 * ) origdata
ASSIGN	2443:4	2443:7	9	ma = ( int64 * ) origdata
LVAL	2443:4	2443:4	10	ma
FIELD	2443:4	2443:4	11	ma
LEAF_NODE	2443:4	2443:4	12	ma
ASSIGN_OP	2443:6	2443:6	10	=
LEAF_NODE	2443:6	2443:6	11	=
RVAL	2443:7	2443:15	10	( int64 * ) origdata
LEAF_NODE	2443:7	2443:7	11	(
TYPE_NAME	2443:8	2443:8	11	int64
LEAF_NODE	2443:8	2443:8	12	int64
LEAF_NODE	2443:13	2443:13	11	*
LEAF_NODE	2443:14	2443:14	11	)
FIELD	2443:15	2443:15	11	origdata
LEAF_NODE	2443:15	2443:15	12	origdata
LEAF_NODE	2443:23	2443:23	8	;
EXPR_STATEMENT	2444:4	2444:11	7	mb = data ;
EXPR	2444:4	2444:4	8	mb = data
ASSIGN	2444:4	2444:7	9	mb = data
LVAL	2444:4	2444:4	10	mb
FIELD	2444:4	2444:4	11	mb
LEAF_NODE	2444:4	2444:4	12	mb
ASSIGN_OP	2444:6	2444:6	10	=
LEAF_NODE	2444:6	2444:6	11	=
RVAL	2444:7	2444:7	10	data
FIELD	2444:7	2444:7	11	data
LEAF_NODE	2444:7	2444:7	12	data
LEAF_NODE	2444:11	2444:11	8	;
ITERATION	2445:4	2446:4	7	
KEYWORD	2445:4	2445:4	8	for
LEAF_NODE	2445:4	2445:4	9	for
LEAF_NODE	2445:8	2445:8	8	(
FOR_INIT	2445:9	2445:12	8	n = 0 ;
EXPR	2445:9	2445:9	9	n = 0
ASSIGN	2445:9	2445:11	10	n = 0
LVAL	2445:9	2445:9	11	n
FIELD	2445:9	2445:9	12	n
LEAF_NODE	2445:9	2445:9	13	n
ASSIGN_OP	2445:10	2445:10	11	=
LEAF_NODE	2445:10	2445:10	12	=
RVAL	2445:11	2445:11	11	0
FIELD	2445:11	2445:11	12	0
LEAF_NODE	2445:11	2445:11	13	0
LEAF_NODE	2445:12	2445:12	9	;
CONDITION	2445:14	2445:14	8	n < count
EXPR	2445:14	2445:16	9	n < count
FIELD	2445:14	2445:14	10	n
LEAF_NODE	2445:14	2445:14	11	n
REL_OPERATOR	2445:15	2445:15	10	<
LEAF_NODE	2445:15	2445:15	11	<
FIELD	2445:16	2445:16	10	count
LEAF_NODE	2445:16	2445:16	11	count
LEAF_NODE	2445:21	2445:21	8	;
FOR_EXPR	2445:23	2445:23	8	n ++
EXPR	2445:23	2445:23	9	n ++
FIELD	2445:23	2445:24	10	n ++
LEAF_NODE	2445:23	2445:23	11	n
LEAF_NODE	2445:24	2445:24	11	++
LEAF_NODE	2445:26	2445:26	8	)
STATEMENTS	2446:4	2450:4	8	
LEAF_NODE	2446:4	2446:4	9	{
STATEMENTS	2447:5	2449:5	9	
SELECTION	2447:5	2448:6	10	
KEYWORD	2447:5	2447:5	11	if
LEAF_NODE	2447:5	2447:5	12	if
LEAF_NODE	2447:8	2447:8	11	(
CONDITION	2447:9	2447:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2447:9	2447:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2447:9	2447:14	13	tif -> tif_flags
LEAF_NODE	2447:9	2447:9	14	tif
LEAF_NODE	2447:12	2447:12	14	->
LEAF_NODE	2447:14	2447:14	14	tif_flags
LEAF_NODE	2447:23	2447:23	13	&
FIELD	2447:24	2447:24	13	TIFF_SWAB
LEAF_NODE	2447:24	2447:24	14	TIFF_SWAB
LEAF_NODE	2447:33	2447:33	11	)
STATEMENTS	2448:6	2448:6	11	
EXPR_STATEMENT	2448:6	2448:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	2448:6	2448:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	2448:6	2448:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	2448:6	2448:6	15	TIFFSwabLong8
LEAF_NODE	2448:6	2448:6	16	TIFFSwabLong8
LEAF_NODE	2448:19	2448:19	15	(
ARGUMENT	2448:20	2448:29	15	( uint64 * ) ma
LEAF_NODE	2448:20	2448:20	16	(
TYPE_NAME	2448:21	2448:21	16	uint64
LEAF_NODE	2448:21	2448:21	17	uint64
LEAF_NODE	2448:27	2448:27	16	*
LEAF_NODE	2448:28	2448:28	16	)
FIELD	2448:29	2448:29	16	ma
LEAF_NODE	2448:29	2448:29	17	ma
LEAF_NODE	2448:31	2448:31	15	)
LEAF_NODE	2448:32	2448:32	13	;
EXPR_STATEMENT	2449:5	2449:25	10	* mb ++ = ( float ) ( * ma ++ ) ;
EXPR	2449:5	2449:5	11	* mb ++ = ( float ) ( * ma ++ )
ASSIGN	2449:5	2449:11	12	* mb ++ = ( float ) ( * ma ++ )
LVAL	2449:5	2449:5	13	* mb ++
UNARY_EXPR	2449:5	2449:6	14	* mb ++
UNARY_OPERATOR	2449:5	2449:5	15	*
LEAF_NODE	2449:5	2449:5	16	*
FIELD	2449:6	2449:8	15	mb ++
LEAF_NODE	2449:6	2449:6	16	mb
LEAF_NODE	2449:8	2449:8	16	++
ASSIGN_OP	2449:10	2449:10	13	=
LEAF_NODE	2449:10	2449:10	14	=
RVAL	2449:11	2449:24	13	( float ) ( * ma ++ )
LEAF_NODE	2449:11	2449:11	14	(
TYPE_NAME	2449:12	2449:12	14	float
LEAF_NODE	2449:12	2449:12	15	float
LEAF_NODE	2449:17	2449:17	14	)
LEAF_NODE	2449:18	2449:18	14	(
UNARY_EXPR	2449:19	2449:20	14	* ma ++
UNARY_OPERATOR	2449:19	2449:19	15	*
LEAF_NODE	2449:19	2449:19	16	*
FIELD	2449:20	2449:22	15	ma ++
LEAF_NODE	2449:20	2449:20	16	ma
LEAF_NODE	2449:22	2449:22	16	++
LEAF_NODE	2449:24	2449:24	14	)
LEAF_NODE	2449:25	2449:25	11	;
LEAF_NODE	2450:4	2450:4	9	}
LEAF_NODE	2451:3	2451:3	6	}
JUMP_STATEMENT	2452:3	2452:8	6	break DESTINATION ;
KEYWORD	2452:3	2452:3	7	break
LEAF_NODE	2452:3	2452:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2452:8	2452:8	7	;
LABEL	2453:2	2453:20	6	case TIFF_RATIONAL :
LEAF_NODE	2453:2	2453:2	7	case
LEAF_NODE	2453:7	2453:7	7	TIFF_RATIONAL
LEAF_NODE	2453:20	2453:20	7	:
LEAF_NODE	2454:3	2454:3	6	{
STATEMENTS	2455:4	2462:4	6	
SIMPLE_DECL	2455:4	2455:14	7	uint32 * ma ;
VAR_DECL	2455:4	2455:12	8	uint32 * ma
TYPE	2455:4	2455:10	9	uint32 *
TYPE_NAME	2455:4	2455:4	10	uint32
LEAF_NODE	2455:4	2455:4	11	uint32
POINTER	2455:10	2455:10	10	*
LEAF_NODE	2455:10	2455:10	11	*
NAME	2455:12	2455:12	9	ma
LEAF_NODE	2455:12	2455:12	10	ma
LEAF_NODE	2455:14	2455:14	8	;
SIMPLE_DECL	2456:4	2456:14	7	uint32 maa ;
VAR_DECL	2456:4	2456:11	8	uint32 maa
TYPE	2456:4	2456:4	9	uint32
TYPE_NAME	2456:4	2456:4	10	uint32
LEAF_NODE	2456:4	2456:4	11	uint32
NAME	2456:11	2456:11	9	maa
LEAF_NODE	2456:11	2456:11	10	maa
LEAF_NODE	2456:14	2456:14	8	;
SIMPLE_DECL	2457:4	2457:14	7	uint32 mab ;
VAR_DECL	2457:4	2457:11	8	uint32 mab
TYPE	2457:4	2457:4	9	uint32
TYPE_NAME	2457:4	2457:4	10	uint32
LEAF_NODE	2457:4	2457:4	11	uint32
NAME	2457:11	2457:11	9	mab
LEAF_NODE	2457:11	2457:11	10	mab
LEAF_NODE	2457:14	2457:14	8	;
SIMPLE_DECL	2458:4	2458:13	7	float * mb ;
VAR_DECL	2458:4	2458:11	8	float * mb
TYPE	2458:4	2458:9	9	float *
TYPE_NAME	2458:4	2458:4	10	float
LEAF_NODE	2458:4	2458:4	11	float
POINTER	2458:9	2458:9	10	*
LEAF_NODE	2458:9	2458:9	11	*
NAME	2458:11	2458:11	9	mb
LEAF_NODE	2458:11	2458:11	10	mb
LEAF_NODE	2458:13	2458:13	8	;
SIMPLE_DECL	2459:4	2459:12	7	uint32 n ;
VAR_DECL	2459:4	2459:11	8	uint32 n
TYPE	2459:4	2459:4	9	uint32
TYPE_NAME	2459:4	2459:4	10	uint32
LEAF_NODE	2459:4	2459:4	11	uint32
NAME	2459:11	2459:11	9	n
LEAF_NODE	2459:11	2459:11	10	n
LEAF_NODE	2459:12	2459:12	8	;
EXPR_STATEMENT	2460:4	2460:24	7	ma = ( uint32 * ) origdata ;
EXPR	2460:4	2460:4	8	ma = ( uint32 * ) origdata
ASSIGN	2460:4	2460:7	9	ma = ( uint32 * ) origdata
LVAL	2460:4	2460:4	10	ma
FIELD	2460:4	2460:4	11	ma
LEAF_NODE	2460:4	2460:4	12	ma
ASSIGN_OP	2460:6	2460:6	10	=
LEAF_NODE	2460:6	2460:6	11	=
RVAL	2460:7	2460:16	10	( uint32 * ) origdata
LEAF_NODE	2460:7	2460:7	11	(
TYPE_NAME	2460:8	2460:8	11	uint32
LEAF_NODE	2460:8	2460:8	12	uint32
LEAF_NODE	2460:14	2460:14	11	*
LEAF_NODE	2460:15	2460:15	11	)
FIELD	2460:16	2460:16	11	origdata
LEAF_NODE	2460:16	2460:16	12	origdata
LEAF_NODE	2460:24	2460:24	8	;
EXPR_STATEMENT	2461:4	2461:11	7	mb = data ;
EXPR	2461:4	2461:4	8	mb = data
ASSIGN	2461:4	2461:7	9	mb = data
LVAL	2461:4	2461:4	10	mb
FIELD	2461:4	2461:4	11	mb
LEAF_NODE	2461:4	2461:4	12	mb
ASSIGN_OP	2461:6	2461:6	10	=
LEAF_NODE	2461:6	2461:6	11	=
RVAL	2461:7	2461:7	10	data
FIELD	2461:7	2461:7	11	data
LEAF_NODE	2461:7	2461:7	12	data
LEAF_NODE	2461:11	2461:11	8	;
ITERATION	2462:4	2463:4	7	
KEYWORD	2462:4	2462:4	8	for
LEAF_NODE	2462:4	2462:4	9	for
LEAF_NODE	2462:8	2462:8	8	(
FOR_INIT	2462:9	2462:12	8	n = 0 ;
EXPR	2462:9	2462:9	9	n = 0
ASSIGN	2462:9	2462:11	10	n = 0
LVAL	2462:9	2462:9	11	n
FIELD	2462:9	2462:9	12	n
LEAF_NODE	2462:9	2462:9	13	n
ASSIGN_OP	2462:10	2462:10	11	=
LEAF_NODE	2462:10	2462:10	12	=
RVAL	2462:11	2462:11	11	0
FIELD	2462:11	2462:11	12	0
LEAF_NODE	2462:11	2462:11	13	0
LEAF_NODE	2462:12	2462:12	9	;
CONDITION	2462:14	2462:14	8	n < count
EXPR	2462:14	2462:16	9	n < count
FIELD	2462:14	2462:14	10	n
LEAF_NODE	2462:14	2462:14	11	n
REL_OPERATOR	2462:15	2462:15	10	<
LEAF_NODE	2462:15	2462:15	11	<
FIELD	2462:16	2462:16	10	count
LEAF_NODE	2462:16	2462:16	11	count
LEAF_NODE	2462:21	2462:21	8	;
FOR_EXPR	2462:23	2462:23	8	n ++
EXPR	2462:23	2462:23	9	n ++
FIELD	2462:23	2462:24	10	n ++
LEAF_NODE	2462:23	2462:23	11	n
LEAF_NODE	2462:24	2462:24	11	++
LEAF_NODE	2462:26	2462:26	8	)
STATEMENTS	2463:4	2474:4	8	
LEAF_NODE	2463:4	2463:4	9	{
STATEMENTS	2464:5	2472:5	9	
SELECTION	2464:5	2465:6	10	
KEYWORD	2464:5	2464:5	11	if
LEAF_NODE	2464:5	2464:5	12	if
LEAF_NODE	2464:8	2464:8	11	(
CONDITION	2464:9	2464:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2464:9	2464:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2464:9	2464:14	13	tif -> tif_flags
LEAF_NODE	2464:9	2464:9	14	tif
LEAF_NODE	2464:12	2464:12	14	->
LEAF_NODE	2464:14	2464:14	14	tif_flags
LEAF_NODE	2464:23	2464:23	13	&
FIELD	2464:24	2464:24	13	TIFF_SWAB
LEAF_NODE	2464:24	2464:24	14	TIFF_SWAB
LEAF_NODE	2464:33	2464:33	11	)
STATEMENTS	2465:6	2465:6	11	
EXPR_STATEMENT	2465:6	2465:22	12	TIFFSwabLong ( ma ) ;
EXPR	2465:6	2465:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2465:6	2465:21	14	TIFFSwabLong ( ma )
CALLEE	2465:6	2465:6	15	TIFFSwabLong
LEAF_NODE	2465:6	2465:6	16	TIFFSwabLong
LEAF_NODE	2465:18	2465:18	15	(
ARGUMENT	2465:19	2465:19	15	ma
FIELD	2465:19	2465:19	16	ma
LEAF_NODE	2465:19	2465:19	17	ma
LEAF_NODE	2465:21	2465:21	15	)
LEAF_NODE	2465:22	2465:22	13	;
EXPR_STATEMENT	2466:5	2466:14	10	maa = * ma ++ ;
EXPR	2466:5	2466:5	11	maa = * ma ++
ASSIGN	2466:5	2466:9	12	maa = * ma ++
LVAL	2466:5	2466:5	13	maa
FIELD	2466:5	2466:5	14	maa
LEAF_NODE	2466:5	2466:5	15	maa
ASSIGN_OP	2466:8	2466:8	13	=
LEAF_NODE	2466:8	2466:8	14	=
RVAL	2466:9	2466:9	13	* ma ++
UNARY_EXPR	2466:9	2466:10	14	* ma ++
UNARY_OPERATOR	2466:9	2466:9	15	*
LEAF_NODE	2466:9	2466:9	16	*
FIELD	2466:10	2466:12	15	ma ++
LEAF_NODE	2466:10	2466:10	16	ma
LEAF_NODE	2466:12	2466:12	16	++
LEAF_NODE	2466:14	2466:14	11	;
SELECTION	2467:5	2468:6	10	
KEYWORD	2467:5	2467:5	11	if
LEAF_NODE	2467:5	2467:5	12	if
LEAF_NODE	2467:8	2467:8	11	(
CONDITION	2467:9	2467:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2467:9	2467:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2467:9	2467:14	13	tif -> tif_flags
LEAF_NODE	2467:9	2467:9	14	tif
LEAF_NODE	2467:12	2467:12	14	->
LEAF_NODE	2467:14	2467:14	14	tif_flags
LEAF_NODE	2467:23	2467:23	13	&
FIELD	2467:24	2467:24	13	TIFF_SWAB
LEAF_NODE	2467:24	2467:24	14	TIFF_SWAB
LEAF_NODE	2467:33	2467:33	11	)
STATEMENTS	2468:6	2468:6	11	
EXPR_STATEMENT	2468:6	2468:22	12	TIFFSwabLong ( ma ) ;
EXPR	2468:6	2468:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2468:6	2468:21	14	TIFFSwabLong ( ma )
CALLEE	2468:6	2468:6	15	TIFFSwabLong
LEAF_NODE	2468:6	2468:6	16	TIFFSwabLong
LEAF_NODE	2468:18	2468:18	15	(
ARGUMENT	2468:19	2468:19	15	ma
FIELD	2468:19	2468:19	16	ma
LEAF_NODE	2468:19	2468:19	17	ma
LEAF_NODE	2468:21	2468:21	15	)
LEAF_NODE	2468:22	2468:22	13	;
EXPR_STATEMENT	2469:5	2469:14	10	mab = * ma ++ ;
EXPR	2469:5	2469:5	11	mab = * ma ++
ASSIGN	2469:5	2469:9	12	mab = * ma ++
LVAL	2469:5	2469:5	13	mab
FIELD	2469:5	2469:5	14	mab
LEAF_NODE	2469:5	2469:5	15	mab
ASSIGN_OP	2469:8	2469:8	13	=
LEAF_NODE	2469:8	2469:8	14	=
RVAL	2469:9	2469:9	13	* ma ++
UNARY_EXPR	2469:9	2469:10	14	* ma ++
UNARY_OPERATOR	2469:9	2469:9	15	*
LEAF_NODE	2469:9	2469:9	16	*
FIELD	2469:10	2469:12	15	ma ++
LEAF_NODE	2469:10	2469:10	16	ma
LEAF_NODE	2469:12	2469:12	16	++
LEAF_NODE	2469:14	2469:14	11	;
SELECTION	2470:5	2471:6	10	
KEYWORD	2470:5	2470:5	11	if
LEAF_NODE	2470:5	2470:5	12	if
LEAF_NODE	2470:8	2470:8	11	(
CONDITION	2470:9	2470:9	11	mab == 0
EXPR	2470:9	2470:14	12	mab == 0
FIELD	2470:9	2470:9	13	mab
LEAF_NODE	2470:9	2470:9	14	mab
EQ_OPERATOR	2470:12	2470:12	13	==
LEAF_NODE	2470:12	2470:12	14	==
FIELD	2470:14	2470:14	13	0
LEAF_NODE	2470:14	2470:14	14	0
LEAF_NODE	2470:15	2470:15	11	)
STATEMENTS	2471:6	2471:6	11	
EXPR_STATEMENT	2471:6	2471:15	12	* mb ++ = 0.0 ;
EXPR	2471:6	2471:6	13	* mb ++ = 0.0
ASSIGN	2471:6	2471:12	14	* mb ++ = 0.0
LVAL	2471:6	2471:6	15	* mb ++
UNARY_EXPR	2471:6	2471:7	16	* mb ++
UNARY_OPERATOR	2471:6	2471:6	17	*
LEAF_NODE	2471:6	2471:6	18	*
FIELD	2471:7	2471:9	17	mb ++
LEAF_NODE	2471:7	2471:7	18	mb
LEAF_NODE	2471:9	2471:9	18	++
ASSIGN_OP	2471:11	2471:11	15	=
LEAF_NODE	2471:11	2471:11	16	=
RVAL	2471:12	2471:12	15	0.0
FIELD	2471:12	2471:12	16	0.0
LEAF_NODE	2471:12	2471:12	17	0.0
LEAF_NODE	2471:15	2471:15	13	;
SELECTION	2472:5	2473:6	10	
KEYWORD	2472:5	2472:5	11	else
LEAF_NODE	2472:5	2472:5	12	else
STATEMENTS	2473:6	2473:6	11	
EXPR_STATEMENT	2473:6	2473:33	12	* mb ++ = ( float ) maa / ( float ) mab ;
EXPR	2473:6	2473:6	13	* mb ++ = ( float ) maa / ( float ) mab
ASSIGN	2473:6	2473:12	14	* mb ++ = ( float ) maa / ( float ) mab
LVAL	2473:6	2473:6	15	* mb ++
UNARY_EXPR	2473:6	2473:7	16	* mb ++
UNARY_OPERATOR	2473:6	2473:6	17	*
LEAF_NODE	2473:6	2473:6	18	*
FIELD	2473:7	2473:9	17	mb ++
LEAF_NODE	2473:7	2473:7	18	mb
LEAF_NODE	2473:9	2473:9	18	++
ASSIGN_OP	2473:11	2473:11	15	=
LEAF_NODE	2473:11	2473:11	16	=
RVAL	2473:12	2473:30	15	( float ) maa / ( float ) mab
LEAF_NODE	2473:12	2473:12	16	(
TYPE_NAME	2473:13	2473:13	16	float
LEAF_NODE	2473:13	2473:13	17	float
LEAF_NODE	2473:18	2473:18	16	)
FIELD	2473:19	2473:19	16	maa
LEAF_NODE	2473:19	2473:19	17	maa
LEAF_NODE	2473:22	2473:22	16	/
LEAF_NODE	2473:23	2473:23	16	(
TYPE_NAME	2473:24	2473:24	16	float
LEAF_NODE	2473:24	2473:24	17	float
LEAF_NODE	2473:29	2473:29	16	)
FIELD	2473:30	2473:30	16	mab
LEAF_NODE	2473:30	2473:30	17	mab
LEAF_NODE	2473:33	2473:33	13	;
LEAF_NODE	2474:4	2474:4	9	}
LEAF_NODE	2475:3	2475:3	6	}
JUMP_STATEMENT	2476:3	2476:8	6	break DESTINATION ;
KEYWORD	2476:3	2476:3	7	break
LEAF_NODE	2476:3	2476:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2476:8	2476:8	7	;
LABEL	2477:2	2477:21	6	case TIFF_SRATIONAL :
LEAF_NODE	2477:2	2477:2	7	case
LEAF_NODE	2477:7	2477:7	7	TIFF_SRATIONAL
LEAF_NODE	2477:21	2477:21	7	:
LEAF_NODE	2478:3	2478:3	6	{
STATEMENTS	2479:4	2486:4	6	
SIMPLE_DECL	2479:4	2479:14	7	uint32 * ma ;
VAR_DECL	2479:4	2479:12	8	uint32 * ma
TYPE	2479:4	2479:10	9	uint32 *
TYPE_NAME	2479:4	2479:4	10	uint32
LEAF_NODE	2479:4	2479:4	11	uint32
POINTER	2479:10	2479:10	10	*
LEAF_NODE	2479:10	2479:10	11	*
NAME	2479:12	2479:12	9	ma
LEAF_NODE	2479:12	2479:12	10	ma
LEAF_NODE	2479:14	2479:14	8	;
SIMPLE_DECL	2480:4	2480:13	7	int32 maa ;
VAR_DECL	2480:4	2480:10	8	int32 maa
TYPE	2480:4	2480:4	9	int32
TYPE_NAME	2480:4	2480:4	10	int32
LEAF_NODE	2480:4	2480:4	11	int32
NAME	2480:10	2480:10	9	maa
LEAF_NODE	2480:10	2480:10	10	maa
LEAF_NODE	2480:13	2480:13	8	;
SIMPLE_DECL	2481:4	2481:14	7	uint32 mab ;
VAR_DECL	2481:4	2481:11	8	uint32 mab
TYPE	2481:4	2481:4	9	uint32
TYPE_NAME	2481:4	2481:4	10	uint32
LEAF_NODE	2481:4	2481:4	11	uint32
NAME	2481:11	2481:11	9	mab
LEAF_NODE	2481:11	2481:11	10	mab
LEAF_NODE	2481:14	2481:14	8	;
SIMPLE_DECL	2482:4	2482:13	7	float * mb ;
VAR_DECL	2482:4	2482:11	8	float * mb
TYPE	2482:4	2482:9	9	float *
TYPE_NAME	2482:4	2482:4	10	float
LEAF_NODE	2482:4	2482:4	11	float
POINTER	2482:9	2482:9	10	*
LEAF_NODE	2482:9	2482:9	11	*
NAME	2482:11	2482:11	9	mb
LEAF_NODE	2482:11	2482:11	10	mb
LEAF_NODE	2482:13	2482:13	8	;
SIMPLE_DECL	2483:4	2483:12	7	uint32 n ;
VAR_DECL	2483:4	2483:11	8	uint32 n
TYPE	2483:4	2483:4	9	uint32
TYPE_NAME	2483:4	2483:4	10	uint32
LEAF_NODE	2483:4	2483:4	11	uint32
NAME	2483:11	2483:11	9	n
LEAF_NODE	2483:11	2483:11	10	n
LEAF_NODE	2483:12	2483:12	8	;
EXPR_STATEMENT	2484:4	2484:24	7	ma = ( uint32 * ) origdata ;
EXPR	2484:4	2484:4	8	ma = ( uint32 * ) origdata
ASSIGN	2484:4	2484:7	9	ma = ( uint32 * ) origdata
LVAL	2484:4	2484:4	10	ma
FIELD	2484:4	2484:4	11	ma
LEAF_NODE	2484:4	2484:4	12	ma
ASSIGN_OP	2484:6	2484:6	10	=
LEAF_NODE	2484:6	2484:6	11	=
RVAL	2484:7	2484:16	10	( uint32 * ) origdata
LEAF_NODE	2484:7	2484:7	11	(
TYPE_NAME	2484:8	2484:8	11	uint32
LEAF_NODE	2484:8	2484:8	12	uint32
LEAF_NODE	2484:14	2484:14	11	*
LEAF_NODE	2484:15	2484:15	11	)
FIELD	2484:16	2484:16	11	origdata
LEAF_NODE	2484:16	2484:16	12	origdata
LEAF_NODE	2484:24	2484:24	8	;
EXPR_STATEMENT	2485:4	2485:11	7	mb = data ;
EXPR	2485:4	2485:4	8	mb = data
ASSIGN	2485:4	2485:7	9	mb = data
LVAL	2485:4	2485:4	10	mb
FIELD	2485:4	2485:4	11	mb
LEAF_NODE	2485:4	2485:4	12	mb
ASSIGN_OP	2485:6	2485:6	10	=
LEAF_NODE	2485:6	2485:6	11	=
RVAL	2485:7	2485:7	10	data
FIELD	2485:7	2485:7	11	data
LEAF_NODE	2485:7	2485:7	12	data
LEAF_NODE	2485:11	2485:11	8	;
ITERATION	2486:4	2487:4	7	
KEYWORD	2486:4	2486:4	8	for
LEAF_NODE	2486:4	2486:4	9	for
LEAF_NODE	2486:8	2486:8	8	(
FOR_INIT	2486:9	2486:12	8	n = 0 ;
EXPR	2486:9	2486:9	9	n = 0
ASSIGN	2486:9	2486:11	10	n = 0
LVAL	2486:9	2486:9	11	n
FIELD	2486:9	2486:9	12	n
LEAF_NODE	2486:9	2486:9	13	n
ASSIGN_OP	2486:10	2486:10	11	=
LEAF_NODE	2486:10	2486:10	12	=
RVAL	2486:11	2486:11	11	0
FIELD	2486:11	2486:11	12	0
LEAF_NODE	2486:11	2486:11	13	0
LEAF_NODE	2486:12	2486:12	9	;
CONDITION	2486:14	2486:14	8	n < count
EXPR	2486:14	2486:16	9	n < count
FIELD	2486:14	2486:14	10	n
LEAF_NODE	2486:14	2486:14	11	n
REL_OPERATOR	2486:15	2486:15	10	<
LEAF_NODE	2486:15	2486:15	11	<
FIELD	2486:16	2486:16	10	count
LEAF_NODE	2486:16	2486:16	11	count
LEAF_NODE	2486:21	2486:21	8	;
FOR_EXPR	2486:23	2486:23	8	n ++
EXPR	2486:23	2486:23	9	n ++
FIELD	2486:23	2486:24	10	n ++
LEAF_NODE	2486:23	2486:23	11	n
LEAF_NODE	2486:24	2486:24	11	++
LEAF_NODE	2486:26	2486:26	8	)
STATEMENTS	2487:4	2499:4	8	
LEAF_NODE	2487:4	2487:4	9	{
STATEMENTS	2488:5	2497:5	9	
SELECTION	2488:5	2489:6	10	
KEYWORD	2488:5	2488:5	11	if
LEAF_NODE	2488:5	2488:5	12	if
LEAF_NODE	2488:8	2488:8	11	(
CONDITION	2488:9	2488:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2488:9	2488:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2488:9	2488:14	13	tif -> tif_flags
LEAF_NODE	2488:9	2488:9	14	tif
LEAF_NODE	2488:12	2488:12	14	->
LEAF_NODE	2488:14	2488:14	14	tif_flags
LEAF_NODE	2488:23	2488:23	13	&
FIELD	2488:24	2488:24	13	TIFF_SWAB
LEAF_NODE	2488:24	2488:24	14	TIFF_SWAB
LEAF_NODE	2488:33	2488:33	11	)
STATEMENTS	2489:6	2489:6	11	
EXPR_STATEMENT	2489:6	2489:22	12	TIFFSwabLong ( ma ) ;
EXPR	2489:6	2489:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2489:6	2489:21	14	TIFFSwabLong ( ma )
CALLEE	2489:6	2489:6	15	TIFFSwabLong
LEAF_NODE	2489:6	2489:6	16	TIFFSwabLong
LEAF_NODE	2489:18	2489:18	15	(
ARGUMENT	2489:19	2489:19	15	ma
FIELD	2489:19	2489:19	16	ma
LEAF_NODE	2489:19	2489:19	17	ma
LEAF_NODE	2489:21	2489:21	15	)
LEAF_NODE	2489:22	2489:22	13	;
LEAF_NODE	2490:5	2490:5	10	maa
LEAF_NODE	2490:8	2490:8	10	=
LEAF_NODE	2490:9	2490:9	10	*
EXPR_STATEMENT	2490:10	2490:20	10	( int32 * ) ma ;
EXPR	2490:10	2490:18	11	( int32 * ) ma
LEAF_NODE	2490:10	2490:10	12	(
TYPE_NAME	2490:11	2490:11	12	int32
LEAF_NODE	2490:11	2490:11	13	int32
LEAF_NODE	2490:16	2490:16	12	*
LEAF_NODE	2490:17	2490:17	12	)
FIELD	2490:18	2490:18	12	ma
LEAF_NODE	2490:18	2490:18	13	ma
LEAF_NODE	2490:20	2490:20	11	;
EXPR_STATEMENT	2491:5	2491:9	10	ma ++ ;
EXPR	2491:5	2491:5	11	ma ++
FIELD	2491:5	2491:7	12	ma ++
LEAF_NODE	2491:5	2491:5	13	ma
LEAF_NODE	2491:7	2491:7	13	++
LEAF_NODE	2491:9	2491:9	11	;
SELECTION	2492:5	2493:6	10	
KEYWORD	2492:5	2492:5	11	if
LEAF_NODE	2492:5	2492:5	12	if
LEAF_NODE	2492:8	2492:8	11	(
CONDITION	2492:9	2492:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2492:9	2492:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2492:9	2492:14	13	tif -> tif_flags
LEAF_NODE	2492:9	2492:9	14	tif
LEAF_NODE	2492:12	2492:12	14	->
LEAF_NODE	2492:14	2492:14	14	tif_flags
LEAF_NODE	2492:23	2492:23	13	&
FIELD	2492:24	2492:24	13	TIFF_SWAB
LEAF_NODE	2492:24	2492:24	14	TIFF_SWAB
LEAF_NODE	2492:33	2492:33	11	)
STATEMENTS	2493:6	2493:6	11	
EXPR_STATEMENT	2493:6	2493:22	12	TIFFSwabLong ( ma ) ;
EXPR	2493:6	2493:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2493:6	2493:21	14	TIFFSwabLong ( ma )
CALLEE	2493:6	2493:6	15	TIFFSwabLong
LEAF_NODE	2493:6	2493:6	16	TIFFSwabLong
LEAF_NODE	2493:18	2493:18	15	(
ARGUMENT	2493:19	2493:19	15	ma
FIELD	2493:19	2493:19	16	ma
LEAF_NODE	2493:19	2493:19	17	ma
LEAF_NODE	2493:21	2493:21	15	)
LEAF_NODE	2493:22	2493:22	13	;
EXPR_STATEMENT	2494:5	2494:14	10	mab = * ma ++ ;
EXPR	2494:5	2494:5	11	mab = * ma ++
ASSIGN	2494:5	2494:9	12	mab = * ma ++
LVAL	2494:5	2494:5	13	mab
FIELD	2494:5	2494:5	14	mab
LEAF_NODE	2494:5	2494:5	15	mab
ASSIGN_OP	2494:8	2494:8	13	=
LEAF_NODE	2494:8	2494:8	14	=
RVAL	2494:9	2494:9	13	* ma ++
UNARY_EXPR	2494:9	2494:10	14	* ma ++
UNARY_OPERATOR	2494:9	2494:9	15	*
LEAF_NODE	2494:9	2494:9	16	*
FIELD	2494:10	2494:12	15	ma ++
LEAF_NODE	2494:10	2494:10	16	ma
LEAF_NODE	2494:12	2494:12	16	++
LEAF_NODE	2494:14	2494:14	11	;
SELECTION	2495:5	2496:6	10	
KEYWORD	2495:5	2495:5	11	if
LEAF_NODE	2495:5	2495:5	12	if
LEAF_NODE	2495:8	2495:8	11	(
CONDITION	2495:9	2495:9	11	mab == 0
EXPR	2495:9	2495:14	12	mab == 0
FIELD	2495:9	2495:9	13	mab
LEAF_NODE	2495:9	2495:9	14	mab
EQ_OPERATOR	2495:12	2495:12	13	==
LEAF_NODE	2495:12	2495:12	14	==
FIELD	2495:14	2495:14	13	0
LEAF_NODE	2495:14	2495:14	14	0
LEAF_NODE	2495:15	2495:15	11	)
STATEMENTS	2496:6	2496:6	11	
EXPR_STATEMENT	2496:6	2496:15	12	* mb ++ = 0.0 ;
EXPR	2496:6	2496:6	13	* mb ++ = 0.0
ASSIGN	2496:6	2496:12	14	* mb ++ = 0.0
LVAL	2496:6	2496:6	15	* mb ++
UNARY_EXPR	2496:6	2496:7	16	* mb ++
UNARY_OPERATOR	2496:6	2496:6	17	*
LEAF_NODE	2496:6	2496:6	18	*
FIELD	2496:7	2496:9	17	mb ++
LEAF_NODE	2496:7	2496:7	18	mb
LEAF_NODE	2496:9	2496:9	18	++
ASSIGN_OP	2496:11	2496:11	15	=
LEAF_NODE	2496:11	2496:11	16	=
RVAL	2496:12	2496:12	15	0.0
FIELD	2496:12	2496:12	16	0.0
LEAF_NODE	2496:12	2496:12	17	0.0
LEAF_NODE	2496:15	2496:15	13	;
SELECTION	2497:5	2498:6	10	
KEYWORD	2497:5	2497:5	11	else
LEAF_NODE	2497:5	2497:5	12	else
STATEMENTS	2498:6	2498:6	11	
EXPR_STATEMENT	2498:6	2498:33	12	* mb ++ = ( float ) maa / ( float ) mab ;
EXPR	2498:6	2498:6	13	* mb ++ = ( float ) maa / ( float ) mab
ASSIGN	2498:6	2498:12	14	* mb ++ = ( float ) maa / ( float ) mab
LVAL	2498:6	2498:6	15	* mb ++
UNARY_EXPR	2498:6	2498:7	16	* mb ++
UNARY_OPERATOR	2498:6	2498:6	17	*
LEAF_NODE	2498:6	2498:6	18	*
FIELD	2498:7	2498:9	17	mb ++
LEAF_NODE	2498:7	2498:7	18	mb
LEAF_NODE	2498:9	2498:9	18	++
ASSIGN_OP	2498:11	2498:11	15	=
LEAF_NODE	2498:11	2498:11	16	=
RVAL	2498:12	2498:30	15	( float ) maa / ( float ) mab
LEAF_NODE	2498:12	2498:12	16	(
TYPE_NAME	2498:13	2498:13	16	float
LEAF_NODE	2498:13	2498:13	17	float
LEAF_NODE	2498:18	2498:18	16	)
FIELD	2498:19	2498:19	16	maa
LEAF_NODE	2498:19	2498:19	17	maa
LEAF_NODE	2498:22	2498:22	16	/
LEAF_NODE	2498:23	2498:23	16	(
TYPE_NAME	2498:24	2498:24	16	float
LEAF_NODE	2498:24	2498:24	17	float
LEAF_NODE	2498:29	2498:29	16	)
FIELD	2498:30	2498:30	16	mab
LEAF_NODE	2498:30	2498:30	17	mab
LEAF_NODE	2498:33	2498:33	13	;
LEAF_NODE	2499:4	2499:4	9	}
LEAF_NODE	2500:3	2500:3	6	}
JUMP_STATEMENT	2501:3	2501:8	6	break DESTINATION ;
KEYWORD	2501:3	2501:3	7	break
LEAF_NODE	2501:3	2501:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2501:8	2501:8	7	;
LABEL	2502:2	2502:18	6	case TIFF_DOUBLE :
LEAF_NODE	2502:2	2502:2	7	case
LEAF_NODE	2502:7	2502:7	7	TIFF_DOUBLE
LEAF_NODE	2502:18	2502:18	7	:
LEAF_NODE	2503:3	2503:3	6	{
STATEMENTS	2504:4	2512:4	6	
SIMPLE_DECL	2504:4	2504:14	7	double * ma ;
VAR_DECL	2504:4	2504:12	8	double * ma
TYPE	2504:4	2504:10	9	double *
TYPE_NAME	2504:4	2504:4	10	double
LEAF_NODE	2504:4	2504:4	11	double
POINTER	2504:10	2504:10	10	*
LEAF_NODE	2504:10	2504:10	11	*
NAME	2504:12	2504:12	9	ma
LEAF_NODE	2504:12	2504:12	10	ma
LEAF_NODE	2504:14	2504:14	8	;
SIMPLE_DECL	2505:4	2505:13	7	float * mb ;
VAR_DECL	2505:4	2505:11	8	float * mb
TYPE	2505:4	2505:9	9	float *
TYPE_NAME	2505:4	2505:4	10	float
LEAF_NODE	2505:4	2505:4	11	float
POINTER	2505:9	2505:9	10	*
LEAF_NODE	2505:9	2505:9	11	*
NAME	2505:11	2505:11	9	mb
LEAF_NODE	2505:11	2505:11	10	mb
LEAF_NODE	2505:13	2505:13	8	;
SIMPLE_DECL	2506:4	2506:12	7	uint32 n ;
VAR_DECL	2506:4	2506:11	8	uint32 n
TYPE	2506:4	2506:4	9	uint32
TYPE_NAME	2506:4	2506:4	10	uint32
LEAF_NODE	2506:4	2506:4	11	uint32
NAME	2506:11	2506:11	9	n
LEAF_NODE	2506:11	2506:11	10	n
LEAF_NODE	2506:12	2506:12	8	;
SELECTION	2507:4	2508:5	7	
KEYWORD	2507:4	2507:4	8	if
LEAF_NODE	2507:4	2507:4	9	if
LEAF_NODE	2507:7	2507:7	8	(
CONDITION	2507:8	2507:8	8	tif -> tif_flags & TIFF_SWAB
EXPR	2507:8	2507:23	9	tif -> tif_flags & TIFF_SWAB
FIELD	2507:8	2507:13	10	tif -> tif_flags
LEAF_NODE	2507:8	2507:8	11	tif
LEAF_NODE	2507:11	2507:11	11	->
LEAF_NODE	2507:13	2507:13	11	tif_flags
LEAF_NODE	2507:22	2507:22	10	&
FIELD	2507:23	2507:23	10	TIFF_SWAB
LEAF_NODE	2507:23	2507:23	11	TIFF_SWAB
LEAF_NODE	2507:32	2507:32	8	)
STATEMENTS	2508:5	2508:5	8	
EXPR_STATEMENT	2508:5	2508:50	9	TIFFSwabArrayOfLong8 ( ( uint64 * ) origdata , count ) ;
EXPR	2508:5	2508:5	10	TIFFSwabArrayOfLong8 ( ( uint64 * ) origdata , count )
FUNCTION_CALL	2508:5	2508:49	11	TIFFSwabArrayOfLong8 ( ( uint64 * ) origdata , count )
CALLEE	2508:5	2508:5	12	TIFFSwabArrayOfLong8
LEAF_NODE	2508:5	2508:5	13	TIFFSwabArrayOfLong8
LEAF_NODE	2508:25	2508:25	12	(
ARGUMENT	2508:26	2508:35	12	( uint64 * ) origdata
LEAF_NODE	2508:26	2508:26	13	(
TYPE_NAME	2508:27	2508:27	13	uint64
LEAF_NODE	2508:27	2508:27	14	uint64
LEAF_NODE	2508:33	2508:33	13	*
LEAF_NODE	2508:34	2508:34	13	)
FIELD	2508:35	2508:35	13	origdata
LEAF_NODE	2508:35	2508:35	14	origdata
LEAF_NODE	2508:43	2508:43	12	,
ARGUMENT	2508:44	2508:44	12	count
FIELD	2508:44	2508:44	13	count
LEAF_NODE	2508:44	2508:44	14	count
LEAF_NODE	2508:49	2508:49	12	)
LEAF_NODE	2508:50	2508:50	10	;
EXPR_STATEMENT	2509:4	2509:58	7	TIFFCvtIEEEDoubleToNative ( tif , count , ( double * ) origdata ) ;
EXPR	2509:4	2509:4	8	TIFFCvtIEEEDoubleToNative ( tif , count , ( double * ) origdata )
FUNCTION_CALL	2509:4	2509:57	9	TIFFCvtIEEEDoubleToNative ( tif , count , ( double * ) origdata )
CALLEE	2509:4	2509:4	10	TIFFCvtIEEEDoubleToNative
LEAF_NODE	2509:4	2509:4	11	TIFFCvtIEEEDoubleToNative
LEAF_NODE	2509:29	2509:29	10	(
ARGUMENT	2509:30	2509:30	10	tif
FIELD	2509:30	2509:30	11	tif
LEAF_NODE	2509:30	2509:30	12	tif
LEAF_NODE	2509:33	2509:33	10	,
ARGUMENT	2509:34	2509:34	10	count
FIELD	2509:34	2509:34	11	count
LEAF_NODE	2509:34	2509:34	12	count
LEAF_NODE	2509:39	2509:39	10	,
ARGUMENT	2509:40	2509:49	10	( double * ) origdata
LEAF_NODE	2509:40	2509:40	11	(
TYPE_NAME	2509:41	2509:41	11	double
LEAF_NODE	2509:41	2509:41	12	double
LEAF_NODE	2509:47	2509:47	11	*
LEAF_NODE	2509:48	2509:48	11	)
FIELD	2509:49	2509:49	11	origdata
LEAF_NODE	2509:49	2509:49	12	origdata
LEAF_NODE	2509:57	2509:57	10	)
LEAF_NODE	2509:58	2509:58	8	;
EXPR_STATEMENT	2510:4	2510:24	7	ma = ( double * ) origdata ;
EXPR	2510:4	2510:4	8	ma = ( double * ) origdata
ASSIGN	2510:4	2510:7	9	ma = ( double * ) origdata
LVAL	2510:4	2510:4	10	ma
FIELD	2510:4	2510:4	11	ma
LEAF_NODE	2510:4	2510:4	12	ma
ASSIGN_OP	2510:6	2510:6	10	=
LEAF_NODE	2510:6	2510:6	11	=
RVAL	2510:7	2510:16	10	( double * ) origdata
LEAF_NODE	2510:7	2510:7	11	(
TYPE_NAME	2510:8	2510:8	11	double
LEAF_NODE	2510:8	2510:8	12	double
LEAF_NODE	2510:14	2510:14	11	*
LEAF_NODE	2510:15	2510:15	11	)
FIELD	2510:16	2510:16	11	origdata
LEAF_NODE	2510:16	2510:16	12	origdata
LEAF_NODE	2510:24	2510:24	8	;
EXPR_STATEMENT	2511:4	2511:11	7	mb = data ;
EXPR	2511:4	2511:4	8	mb = data
ASSIGN	2511:4	2511:7	9	mb = data
LVAL	2511:4	2511:4	10	mb
FIELD	2511:4	2511:4	11	mb
LEAF_NODE	2511:4	2511:4	12	mb
ASSIGN_OP	2511:6	2511:6	10	=
LEAF_NODE	2511:6	2511:6	11	=
RVAL	2511:7	2511:7	10	data
FIELD	2511:7	2511:7	11	data
LEAF_NODE	2511:7	2511:7	12	data
LEAF_NODE	2511:11	2511:11	8	;
ITERATION	2512:4	2513:32	7	
KEYWORD	2512:4	2512:4	8	for
LEAF_NODE	2512:4	2512:4	9	for
LEAF_NODE	2512:8	2512:8	8	(
FOR_INIT	2512:9	2512:12	8	n = 0 ;
EXPR	2512:9	2512:9	9	n = 0
ASSIGN	2512:9	2512:11	10	n = 0
LVAL	2512:9	2512:9	11	n
FIELD	2512:9	2512:9	12	n
LEAF_NODE	2512:9	2512:9	13	n
ASSIGN_OP	2512:10	2512:10	11	=
LEAF_NODE	2512:10	2512:10	12	=
RVAL	2512:11	2512:11	11	0
FIELD	2512:11	2512:11	12	0
LEAF_NODE	2512:11	2512:11	13	0
LEAF_NODE	2512:12	2512:12	9	;
CONDITION	2512:14	2512:14	8	n < count
EXPR	2512:14	2512:16	9	n < count
FIELD	2512:14	2512:14	10	n
LEAF_NODE	2512:14	2512:14	11	n
REL_OPERATOR	2512:15	2512:15	10	<
LEAF_NODE	2512:15	2512:15	11	<
FIELD	2512:16	2512:16	10	count
LEAF_NODE	2512:16	2512:16	11	count
LEAF_NODE	2512:21	2512:21	8	;
FOR_EXPR	2512:23	2512:23	8	n ++
EXPR	2512:23	2512:23	9	n ++
FIELD	2512:23	2512:24	10	n ++
LEAF_NODE	2512:23	2512:23	11	n
LEAF_NODE	2512:24	2512:24	11	++
LEAF_NODE	2512:26	2512:26	8	)
STATEMENTS	2513:32	2520:32	8	
LEAF_NODE	2513:32	2513:32	9	{
STATEMENTS	2514:36	2519:36	9	
SIMPLE_DECL	2514:36	2514:54	10	double val ; val = * ma ++ ;
VAR_DECL	2514:36	2514:43	11	double val ; val = * ma ++
TYPE	2514:36	2514:36	12	double
TYPE_NAME	2514:36	2514:36	13	double
LEAF_NODE	2514:36	2514:36	14	double
NAME	2514:43	2514:43	12	val
LEAF_NODE	2514:43	2514:43	13	val
LEAF_NODE	0:0	0:0	12	;
INIT	2514:43	2514:43	12	val = * ma ++
ASSIGN	2514:43	2514:49	13	val = * ma ++
LVAL	2514:43	2514:43	14	val
NAME	2514:43	2514:43	15	val
LEAF_NODE	2514:43	2514:43	16	val
ASSIGN_OP	2514:47	2514:47	14	=
LEAF_NODE	2514:47	2514:47	15	=
RVAL	2514:49	2514:49	14	* ma ++
UNARY_EXPR	2514:49	2514:50	15	* ma ++
UNARY_OPERATOR	2514:49	2514:49	16	*
LEAF_NODE	2514:49	2514:49	17	*
FIELD	2514:50	2514:52	16	ma ++
LEAF_NODE	2514:50	2514:50	17	ma
LEAF_NODE	2514:52	2514:52	17	++
LEAF_NODE	2514:54	2514:54	11	;
SELECTION	2515:36	2516:40	10	
KEYWORD	2515:36	2515:36	11	if
LEAF_NODE	2515:36	2515:36	12	if
LEAF_NODE	2515:38	2515:38	11	(
CONDITION	2515:40	2515:40	11	val > FLT_MAX
EXPR	2515:40	2515:46	12	val > FLT_MAX
FIELD	2515:40	2515:40	13	val
LEAF_NODE	2515:40	2515:40	14	val
REL_OPERATOR	2515:44	2515:44	13	>
LEAF_NODE	2515:44	2515:44	14	>
FIELD	2515:46	2515:46	13	FLT_MAX
LEAF_NODE	2515:46	2515:46	14	FLT_MAX
LEAF_NODE	2515:54	2515:54	11	)
STATEMENTS	2516:40	2516:40	11	
EXPR_STATEMENT	2516:40	2516:53	12	val = FLT_MAX ;
EXPR	2516:40	2516:40	13	val = FLT_MAX
ASSIGN	2516:40	2516:46	14	val = FLT_MAX
LVAL	2516:40	2516:40	15	val
FIELD	2516:40	2516:40	16	val
LEAF_NODE	2516:40	2516:40	17	val
ASSIGN_OP	2516:44	2516:44	15	=
LEAF_NODE	2516:44	2516:44	16	=
RVAL	2516:46	2516:46	15	FLT_MAX
FIELD	2516:46	2516:46	16	FLT_MAX
LEAF_NODE	2516:46	2516:46	17	FLT_MAX
LEAF_NODE	2516:53	2516:53	13	;
SELECTION	2517:36	2517:41	10	
KEYWORD	2517:36	2517:36	11	else
LEAF_NODE	2517:36	2517:36	12	else
STATEMENTS	2517:41	2517:41	11	
SELECTION	2517:41	2518:40	12	
KEYWORD	2517:41	2517:41	13	if
LEAF_NODE	2517:41	2517:41	14	if
LEAF_NODE	2517:43	2517:43	13	(
CONDITION	2517:45	2517:45	13	val < - FLT_MAX
EXPR	2517:45	2517:51	14	val < - FLT_MAX
FIELD	2517:45	2517:45	15	val
LEAF_NODE	2517:45	2517:45	16	val
REL_OPERATOR	2517:49	2517:49	15	<
LEAF_NODE	2517:49	2517:49	16	<
UNARY_EXPR	2517:51	2517:52	15	- FLT_MAX
UNARY_OPERATOR	2517:51	2517:51	16	-
LEAF_NODE	2517:51	2517:51	17	-
FIELD	2517:52	2517:52	16	FLT_MAX
LEAF_NODE	2517:52	2517:52	17	FLT_MAX
LEAF_NODE	2517:60	2517:60	13	)
STATEMENTS	2518:40	2518:40	13	
EXPR_STATEMENT	2518:40	2518:54	14	val = - FLT_MAX ;
EXPR	2518:40	2518:40	15	val = - FLT_MAX
ASSIGN	2518:40	2518:46	16	val = - FLT_MAX
LVAL	2518:40	2518:40	17	val
FIELD	2518:40	2518:40	18	val
LEAF_NODE	2518:40	2518:40	19	val
ASSIGN_OP	2518:44	2518:44	17	=
LEAF_NODE	2518:44	2518:44	18	=
RVAL	2518:46	2518:46	17	- FLT_MAX
UNARY_EXPR	2518:46	2518:47	18	- FLT_MAX
UNARY_OPERATOR	2518:46	2518:46	19	-
LEAF_NODE	2518:46	2518:46	20	-
FIELD	2518:47	2518:47	19	FLT_MAX
LEAF_NODE	2518:47	2518:47	20	FLT_MAX
LEAF_NODE	2518:54	2518:54	15	;
EXPR_STATEMENT	2519:36	2519:52	10	* mb ++ = ( float ) val ;
EXPR	2519:36	2519:36	11	* mb ++ = ( float ) val
ASSIGN	2519:36	2519:42	12	* mb ++ = ( float ) val
LVAL	2519:36	2519:36	13	* mb ++
UNARY_EXPR	2519:36	2519:37	14	* mb ++
UNARY_OPERATOR	2519:36	2519:36	15	*
LEAF_NODE	2519:36	2519:36	16	*
FIELD	2519:37	2519:39	15	mb ++
LEAF_NODE	2519:37	2519:37	16	mb
LEAF_NODE	2519:39	2519:39	16	++
ASSIGN_OP	2519:41	2519:41	13	=
LEAF_NODE	2519:41	2519:41	14	=
RVAL	2519:42	2519:49	13	( float ) val
LEAF_NODE	2519:42	2519:42	14	(
TYPE_NAME	2519:43	2519:43	14	float
LEAF_NODE	2519:43	2519:43	15	float
LEAF_NODE	2519:48	2519:48	14	)
FIELD	2519:49	2519:49	14	val
LEAF_NODE	2519:49	2519:49	15	val
LEAF_NODE	2519:52	2519:52	11	;
LEAF_NODE	2520:32	2520:32	9	}
LEAF_NODE	2521:3	2521:3	6	}
JUMP_STATEMENT	2522:3	2522:8	6	break DESTINATION ;
KEYWORD	2522:3	2522:3	7	break
LEAF_NODE	2522:3	2522:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2522:8	2522:8	7	;
LEAF_NODE	2523:1	2523:1	5	}
EXPR_STATEMENT	2524:1	2524:20	3	_TIFFfree ( origdata ) ;
EXPR	2524:1	2524:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	2524:1	2524:19	5	_TIFFfree ( origdata )
CALLEE	2524:1	2524:1	6	_TIFFfree
LEAF_NODE	2524:1	2524:1	7	_TIFFfree
LEAF_NODE	2524:10	2524:10	6	(
ARGUMENT	2524:11	2524:11	6	origdata
FIELD	2524:11	2524:11	7	origdata
LEAF_NODE	2524:11	2524:11	8	origdata
LEAF_NODE	2524:19	2524:19	6	)
LEAF_NODE	2524:20	2524:20	4	;
EXPR_STATEMENT	2525:1	2525:12	3	* value = data ;
EXPR	2525:1	2525:1	4	* value = data
ASSIGN	2525:1	2525:8	5	* value = data
LVAL	2525:1	2525:1	6	* value
UNARY_EXPR	2525:1	2525:2	7	* value
UNARY_OPERATOR	2525:1	2525:1	8	*
LEAF_NODE	2525:1	2525:1	9	*
FIELD	2525:2	2525:2	8	value
LEAF_NODE	2525:2	2525:2	9	value
ASSIGN_OP	2525:7	2525:7	6	=
LEAF_NODE	2525:7	2525:7	7	=
RVAL	2525:8	2525:8	6	data
FIELD	2525:8	2525:8	7	data
LEAF_NODE	2525:8	2525:8	8	data
LEAF_NODE	2525:12	2525:12	4	;
LEAF_NODE	2526:1	2526:1	3	return
LEAF_NODE	2526:7	2526:7	3	(
LEAF_NODE	2526:8	2526:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2526:29	2526:29	3	)
LEAF_NODE	2526:30	2526:30	3	;
LEAF_NODE	2527:0	2527:0	2	}
FUNCTION_DEF	2529:0	2765:0	1	
RETURN_TYPE	2529:0	2529:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2529:0	2529:0	3	static
TYPE_NAME	2529:7	2529:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2529:7	2529:7	4	enum
LEAF_NODE	2529:12	2529:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2530:0	2530:0	2	TIFFReadDirEntryDoubleArray
LEAF_NODE	2530:0	2530:0	3	TIFFReadDirEntryDoubleArray
PARAMETER_LIST	2530:27	2530:77	2	( TIFF * tif , TIFFDirEntry * direntry , double * * value )
LEAF_NODE	2530:27	2530:27	3	(
PARAMETER_DECL	2530:28	2530:34	3	TIFF * tif
TYPE	2530:28	2530:32	4	TIFF *
TYPE_NAME	2530:28	2530:28	5	TIFF
LEAF_NODE	2530:28	2530:28	6	TIFF
POINTER	2530:32	2530:32	5	*
LEAF_NODE	2530:32	2530:32	6	*
NAME	2530:34	2530:34	4	tif
LEAF_NODE	2530:34	2530:34	5	tif
LEAF_NODE	2530:37	2530:37	3	,
PARAMETER_DECL	2530:39	2530:53	3	TIFFDirEntry * direntry
TYPE	2530:39	2530:51	4	TIFFDirEntry *
TYPE_NAME	2530:39	2530:39	5	TIFFDirEntry
LEAF_NODE	2530:39	2530:39	6	TIFFDirEntry
POINTER	2530:51	2530:51	5	*
LEAF_NODE	2530:51	2530:51	6	*
NAME	2530:53	2530:53	4	direntry
LEAF_NODE	2530:53	2530:53	5	direntry
LEAF_NODE	2530:61	2530:61	3	,
PARAMETER_DECL	2530:63	2530:72	3	double * * value
TYPE	2530:63	2530:69	4	double * *
TYPE_NAME	2530:63	2530:63	5	double
LEAF_NODE	2530:63	2530:63	6	double
POINTER	2530:69	2530:70	5	* *
LEAF_NODE	2530:69	2530:69	6	*
LEAF_NODE	2530:70	2530:70	6	*
NAME	2530:72	2530:72	4	value
LEAF_NODE	2530:72	2530:72	5	value
LEAF_NODE	2530:77	2530:77	3	)
LEAF_NODE	2531:0	2531:0	2	{
STATEMENTS	2532:1	2764:30	2	
SIMPLE_DECL	2532:1	2532:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	2532:1	2532:26	4	enum TIFFReadDirEntryErr err
TYPE	2532:1	2532:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	2532:1	2532:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	2532:1	2532:1	7	enum
LEAF_NODE	2532:6	2532:6	7	TIFFReadDirEntryErr
NAME	2532:26	2532:26	5	err
LEAF_NODE	2532:26	2532:26	6	err
LEAF_NODE	2532:29	2532:29	4	;
SIMPLE_DECL	2533:1	2533:13	3	uint32 count ;
VAR_DECL	2533:1	2533:8	4	uint32 count
TYPE	2533:1	2533:1	5	uint32
TYPE_NAME	2533:1	2533:1	6	uint32
LEAF_NODE	2533:1	2533:1	7	uint32
NAME	2533:8	2533:8	5	count
LEAF_NODE	2533:8	2533:8	6	count
LEAF_NODE	2533:13	2533:13	4	;
SIMPLE_DECL	2534:1	2534:15	3	void * origdata ;
VAR_DECL	2534:1	2534:7	4	void * origdata
TYPE	2534:1	2534:5	5	void *
TYPE_NAME	2534:1	2534:1	6	void
LEAF_NODE	2534:1	2534:1	7	void
POINTER	2534:5	2534:5	6	*
LEAF_NODE	2534:5	2534:5	7	*
NAME	2534:7	2534:7	5	origdata
LEAF_NODE	2534:7	2534:7	6	origdata
LEAF_NODE	2534:15	2534:15	4	;
SIMPLE_DECL	2535:1	2535:13	3	double * data ;
VAR_DECL	2535:1	2535:9	4	double * data
TYPE	2535:1	2535:7	5	double *
TYPE_NAME	2535:1	2535:1	6	double
LEAF_NODE	2535:1	2535:1	7	double
POINTER	2535:7	2535:7	6	*
LEAF_NODE	2535:7	2535:7	7	*
NAME	2535:9	2535:9	5	data
LEAF_NODE	2535:9	2535:9	6	data
LEAF_NODE	2535:13	2535:13	4	;
SELECTION	2536:1	2537:1	3	
KEYWORD	2536:1	2536:1	4	switch
LEAF_NODE	2536:1	2536:1	5	switch
LEAF_NODE	2536:8	2536:8	4	(
CONDITION	2536:9	2536:9	4	direntry -> tdir_type
EXPR	2536:9	2536:9	5	direntry -> tdir_type
FIELD	2536:9	2536:19	6	direntry -> tdir_type
LEAF_NODE	2536:9	2536:9	7	direntry
LEAF_NODE	2536:17	2536:17	7	->
LEAF_NODE	2536:19	2536:19	7	tdir_type
LEAF_NODE	2536:28	2536:28	4	)
STATEMENTS	2537:1	2553:1	4	
LEAF_NODE	2537:1	2537:1	5	{
STATEMENTS	2538:2	2552:34	5	
LABEL	2538:2	2538:16	6	case TIFF_BYTE :
LEAF_NODE	2538:2	2538:2	7	case
LEAF_NODE	2538:7	2538:7	7	TIFF_BYTE
LEAF_NODE	2538:16	2538:16	7	:
LABEL	2539:2	2539:17	6	case TIFF_SBYTE :
LEAF_NODE	2539:2	2539:2	7	case
LEAF_NODE	2539:7	2539:7	7	TIFF_SBYTE
LEAF_NODE	2539:17	2539:17	7	:
LABEL	2540:2	2540:17	6	case TIFF_SHORT :
LEAF_NODE	2540:2	2540:2	7	case
LEAF_NODE	2540:7	2540:7	7	TIFF_SHORT
LEAF_NODE	2540:17	2540:17	7	:
LABEL	2541:2	2541:18	6	case TIFF_SSHORT :
LEAF_NODE	2541:2	2541:2	7	case
LEAF_NODE	2541:7	2541:7	7	TIFF_SSHORT
LEAF_NODE	2541:18	2541:18	7	:
LABEL	2542:2	2542:16	6	case TIFF_LONG :
LEAF_NODE	2542:2	2542:2	7	case
LEAF_NODE	2542:7	2542:7	7	TIFF_LONG
LEAF_NODE	2542:16	2542:16	7	:
LABEL	2543:2	2543:17	6	case TIFF_SLONG :
LEAF_NODE	2543:2	2543:2	7	case
LEAF_NODE	2543:7	2543:7	7	TIFF_SLONG
LEAF_NODE	2543:17	2543:17	7	:
LABEL	2544:2	2544:17	6	case TIFF_LONG8 :
LEAF_NODE	2544:2	2544:2	7	case
LEAF_NODE	2544:7	2544:7	7	TIFF_LONG8
LEAF_NODE	2544:17	2544:17	7	:
LABEL	2545:2	2545:18	6	case TIFF_SLONG8 :
LEAF_NODE	2545:2	2545:2	7	case
LEAF_NODE	2545:7	2545:7	7	TIFF_SLONG8
LEAF_NODE	2545:18	2545:18	7	:
LABEL	2546:2	2546:20	6	case TIFF_RATIONAL :
LEAF_NODE	2546:2	2546:2	7	case
LEAF_NODE	2546:7	2546:7	7	TIFF_RATIONAL
LEAF_NODE	2546:20	2546:20	7	:
LABEL	2547:2	2547:21	6	case TIFF_SRATIONAL :
LEAF_NODE	2547:2	2547:2	7	case
LEAF_NODE	2547:7	2547:7	7	TIFF_SRATIONAL
LEAF_NODE	2547:21	2547:21	7	:
LABEL	2548:2	2548:17	6	case TIFF_FLOAT :
LEAF_NODE	2548:2	2548:2	7	case
LEAF_NODE	2548:7	2548:7	7	TIFF_FLOAT
LEAF_NODE	2548:17	2548:17	7	:
LABEL	2549:2	2549:18	6	case TIFF_DOUBLE :
LEAF_NODE	2549:2	2549:2	7	case
LEAF_NODE	2549:7	2549:7	7	TIFF_DOUBLE
LEAF_NODE	2549:18	2549:18	7	:
JUMP_STATEMENT	2550:3	2550:8	6	break DESTINATION ;
KEYWORD	2550:3	2550:3	7	break
LEAF_NODE	2550:3	2550:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2550:8	2550:8	7	;
LABEL	2551:2	2551:9	6	default :
LEAF_NODE	2551:2	2551:2	7	default
LEAF_NODE	2551:9	2551:9	7	:
LEAF_NODE	2552:3	2552:3	6	return
LEAF_NODE	2552:9	2552:9	6	(
LEAF_NODE	2552:10	2552:10	6	TIFFReadDirEntryErrType
LEAF_NODE	2552:33	2552:33	6	)
LEAF_NODE	2552:34	2552:34	6	;
LEAF_NODE	2553:1	2553:1	5	}
EXPR_STATEMENT	2554:1	2554:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata ) ;
EXPR	2554:1	2554:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
ASSIGN	2554:1	2554:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
LVAL	2554:1	2554:1	6	err
FIELD	2554:1	2554:1	7	err
LEAF_NODE	2554:1	2554:1	8	err
ASSIGN_OP	2554:4	2554:4	6	=
LEAF_NODE	2554:4	2554:4	7	=
RVAL	2554:5	2554:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
FUNCTION_CALL	2554:5	2554:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
CALLEE	2554:5	2554:5	8	TIFFReadDirEntryArray
LEAF_NODE	2554:5	2554:5	9	TIFFReadDirEntryArray
LEAF_NODE	2554:26	2554:26	8	(
ARGUMENT	2554:27	2554:27	8	tif
FIELD	2554:27	2554:27	9	tif
LEAF_NODE	2554:27	2554:27	10	tif
LEAF_NODE	2554:30	2554:30	8	,
ARGUMENT	2554:31	2554:31	8	direntry
FIELD	2554:31	2554:31	9	direntry
LEAF_NODE	2554:31	2554:31	10	direntry
LEAF_NODE	2554:39	2554:39	8	,
ARGUMENT	2554:40	2554:40	8	& count
UNARY_EXPR	2554:40	2554:41	9	& count
UNARY_OPERATOR	2554:40	2554:40	10	&
LEAF_NODE	2554:40	2554:40	11	&
FIELD	2554:41	2554:41	10	count
LEAF_NODE	2554:41	2554:41	11	count
LEAF_NODE	2554:46	2554:46	8	,
ARGUMENT	2554:47	2554:47	8	8
FIELD	2554:47	2554:47	9	8
LEAF_NODE	2554:47	2554:47	10	8
LEAF_NODE	2554:48	2554:48	8	,
ARGUMENT	2554:49	2554:49	8	& origdata
UNARY_EXPR	2554:49	2554:50	9	& origdata
UNARY_OPERATOR	2554:49	2554:49	10	&
LEAF_NODE	2554:49	2554:49	11	&
FIELD	2554:50	2554:50	10	origdata
LEAF_NODE	2554:50	2554:50	11	origdata
LEAF_NODE	2554:58	2554:58	8	)
LEAF_NODE	2554:59	2554:59	4	;
SELECTION	2555:1	2556:1	3	
KEYWORD	2555:1	2555:1	4	if
LEAF_NODE	2555:1	2555:1	5	if
LEAF_NODE	2555:4	2555:4	4	(
CONDITION	2555:5	2555:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2555:5	2555:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	2555:5	2555:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2555:5	2555:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	2555:5	2555:5	8	(
FIELD	2555:6	2555:6	8	err
LEAF_NODE	2555:6	2555:6	9	err
EQ_OPERATOR	2555:9	2555:9	8	!=
LEAF_NODE	2555:9	2555:9	9	!=
FIELD	2555:11	2555:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	2555:11	2555:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	2555:32	2555:32	8	)
LEAF_NODE	2555:33	2555:33	7	||
EXPR	2555:35	2555:47	7	( origdata == 0 )
LEAF_NODE	2555:35	2555:35	8	(
FIELD	2555:36	2555:36	8	origdata
LEAF_NODE	2555:36	2555:36	9	origdata
EQ_OPERATOR	2555:44	2555:44	8	==
LEAF_NODE	2555:44	2555:44	9	==
FIELD	2555:46	2555:46	8	0
LEAF_NODE	2555:46	2555:46	9	0
LEAF_NODE	2555:47	2555:47	8	)
LEAF_NODE	2555:48	2555:48	4	)
STATEMENTS	2556:1	2559:1	4	
LEAF_NODE	2556:1	2556:1	5	{
STATEMENTS	2557:2	2558:13	5	
EXPR_STATEMENT	2557:2	2557:10	6	* value = 0 ;
EXPR	2557:2	2557:2	7	* value = 0
ASSIGN	2557:2	2557:9	8	* value = 0
LVAL	2557:2	2557:2	9	* value
UNARY_EXPR	2557:2	2557:3	10	* value
UNARY_OPERATOR	2557:2	2557:2	11	*
LEAF_NODE	2557:2	2557:2	12	*
FIELD	2557:3	2557:3	11	value
LEAF_NODE	2557:3	2557:3	12	value
ASSIGN_OP	2557:8	2557:8	9	=
LEAF_NODE	2557:8	2557:8	10	=
RVAL	2557:9	2557:9	9	0
FIELD	2557:9	2557:9	10	0
LEAF_NODE	2557:9	2557:9	11	0
LEAF_NODE	2557:10	2557:10	7	;
LEAF_NODE	2558:2	2558:2	6	return
LEAF_NODE	2558:8	2558:8	6	(
LEAF_NODE	2558:9	2558:9	6	err
LEAF_NODE	2558:12	2558:12	6	)
LEAF_NODE	2558:13	2558:13	6	;
LEAF_NODE	2559:1	2559:1	5	}
SELECTION	2560:1	2561:1	3	
KEYWORD	2560:1	2560:1	4	switch
LEAF_NODE	2560:1	2560:1	5	switch
LEAF_NODE	2560:8	2560:8	4	(
CONDITION	2560:9	2560:9	4	direntry -> tdir_type
EXPR	2560:9	2560:9	5	direntry -> tdir_type
FIELD	2560:9	2560:19	6	direntry -> tdir_type
LEAF_NODE	2560:9	2560:9	7	direntry
LEAF_NODE	2560:17	2560:17	7	->
LEAF_NODE	2560:19	2560:19	7	tdir_type
LEAF_NODE	2560:28	2560:28	4	)
STATEMENTS	2561:1	2568:1	4	
LEAF_NODE	2561:1	2561:1	5	{
STATEMENTS	2562:2	2567:32	5	
LABEL	2562:2	2562:18	6	case TIFF_DOUBLE :
LEAF_NODE	2562:2	2562:2	7	case
LEAF_NODE	2562:7	2562:7	7	TIFF_DOUBLE
LEAF_NODE	2562:18	2562:18	7	:
SELECTION	2563:3	2564:4	6	
KEYWORD	2563:3	2563:3	7	if
LEAF_NODE	2563:3	2563:3	8	if
LEAF_NODE	2563:6	2563:6	7	(
CONDITION	2563:7	2563:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	2563:7	2563:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	2563:7	2563:12	9	tif -> tif_flags
LEAF_NODE	2563:7	2563:7	10	tif
LEAF_NODE	2563:10	2563:10	10	->
LEAF_NODE	2563:12	2563:12	10	tif_flags
LEAF_NODE	2563:21	2563:21	9	&
FIELD	2563:22	2563:22	9	TIFF_SWAB
LEAF_NODE	2563:22	2563:22	10	TIFF_SWAB
LEAF_NODE	2563:31	2563:31	7	)
STATEMENTS	2564:4	2564:4	7	
EXPR_STATEMENT	2564:4	2564:49	8	TIFFSwabArrayOfLong8 ( ( uint64 * ) origdata , count ) ;
EXPR	2564:4	2564:4	9	TIFFSwabArrayOfLong8 ( ( uint64 * ) origdata , count )
FUNCTION_CALL	2564:4	2564:48	10	TIFFSwabArrayOfLong8 ( ( uint64 * ) origdata , count )
CALLEE	2564:4	2564:4	11	TIFFSwabArrayOfLong8
LEAF_NODE	2564:4	2564:4	12	TIFFSwabArrayOfLong8
LEAF_NODE	2564:24	2564:24	11	(
ARGUMENT	2564:25	2564:34	11	( uint64 * ) origdata
LEAF_NODE	2564:25	2564:25	12	(
TYPE_NAME	2564:26	2564:26	12	uint64
LEAF_NODE	2564:26	2564:26	13	uint64
LEAF_NODE	2564:32	2564:32	12	*
LEAF_NODE	2564:33	2564:33	12	)
FIELD	2564:34	2564:34	12	origdata
LEAF_NODE	2564:34	2564:34	13	origdata
LEAF_NODE	2564:42	2564:42	11	,
ARGUMENT	2564:43	2564:43	11	count
FIELD	2564:43	2564:43	12	count
LEAF_NODE	2564:43	2564:43	13	count
LEAF_NODE	2564:48	2564:48	11	)
LEAF_NODE	2564:49	2564:49	9	;
EXPR_STATEMENT	2565:3	2565:57	6	TIFFCvtIEEEDoubleToNative ( tif , count , ( double * ) origdata ) ;
EXPR	2565:3	2565:3	7	TIFFCvtIEEEDoubleToNative ( tif , count , ( double * ) origdata )
FUNCTION_CALL	2565:3	2565:56	8	TIFFCvtIEEEDoubleToNative ( tif , count , ( double * ) origdata )
CALLEE	2565:3	2565:3	9	TIFFCvtIEEEDoubleToNative
LEAF_NODE	2565:3	2565:3	10	TIFFCvtIEEEDoubleToNative
LEAF_NODE	2565:28	2565:28	9	(
ARGUMENT	2565:29	2565:29	9	tif
FIELD	2565:29	2565:29	10	tif
LEAF_NODE	2565:29	2565:29	11	tif
LEAF_NODE	2565:32	2565:32	9	,
ARGUMENT	2565:33	2565:33	9	count
FIELD	2565:33	2565:33	10	count
LEAF_NODE	2565:33	2565:33	11	count
LEAF_NODE	2565:38	2565:38	9	,
ARGUMENT	2565:39	2565:48	9	( double * ) origdata
LEAF_NODE	2565:39	2565:39	10	(
TYPE_NAME	2565:40	2565:40	10	double
LEAF_NODE	2565:40	2565:40	11	double
LEAF_NODE	2565:46	2565:46	10	*
LEAF_NODE	2565:47	2565:47	10	)
FIELD	2565:48	2565:48	10	origdata
LEAF_NODE	2565:48	2565:48	11	origdata
LEAF_NODE	2565:56	2565:56	9	)
LEAF_NODE	2565:57	2565:57	7	;
EXPR_STATEMENT	2566:3	2566:27	6	* value = ( double * ) origdata ;
EXPR	2566:3	2566:3	7	* value = ( double * ) origdata
ASSIGN	2566:3	2566:10	8	* value = ( double * ) origdata
LVAL	2566:3	2566:3	9	* value
UNARY_EXPR	2566:3	2566:4	10	* value
UNARY_OPERATOR	2566:3	2566:3	11	*
LEAF_NODE	2566:3	2566:3	12	*
FIELD	2566:4	2566:4	11	value
LEAF_NODE	2566:4	2566:4	12	value
ASSIGN_OP	2566:9	2566:9	9	=
LEAF_NODE	2566:9	2566:9	10	=
RVAL	2566:10	2566:19	9	( double * ) origdata
LEAF_NODE	2566:10	2566:10	10	(
TYPE_NAME	2566:11	2566:11	10	double
LEAF_NODE	2566:11	2566:11	11	double
LEAF_NODE	2566:17	2566:17	10	*
LEAF_NODE	2566:18	2566:18	10	)
FIELD	2566:19	2566:19	10	origdata
LEAF_NODE	2566:19	2566:19	11	origdata
LEAF_NODE	2566:27	2566:27	7	;
LEAF_NODE	2567:3	2567:3	6	return
LEAF_NODE	2567:9	2567:9	6	(
LEAF_NODE	2567:10	2567:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	2567:31	2567:31	6	)
LEAF_NODE	2567:32	2567:32	6	;
LEAF_NODE	2568:1	2568:1	5	}
EXPR_STATEMENT	2569:1	2569:48	3	data = ( double * ) _TIFFmalloc ( count * sizeof ( double ) ) ;
EXPR	2569:1	2569:1	4	data = ( double * ) _TIFFmalloc ( count * sizeof ( double ) )
ASSIGN	2569:1	2569:6	5	data = ( double * ) _TIFFmalloc ( count * sizeof ( double ) )
LVAL	2569:1	2569:1	6	data
FIELD	2569:1	2569:1	7	data
LEAF_NODE	2569:1	2569:1	8	data
ASSIGN_OP	2569:5	2569:5	6	=
LEAF_NODE	2569:5	2569:5	7	=
RVAL	2569:6	2569:15	6	( double * ) _TIFFmalloc ( count * sizeof ( double ) )
LEAF_NODE	2569:6	2569:6	7	(
TYPE_NAME	2569:7	2569:7	7	double
LEAF_NODE	2569:7	2569:7	8	double
LEAF_NODE	2569:13	2569:13	7	*
LEAF_NODE	2569:14	2569:14	7	)
FUNCTION_CALL	2569:15	2569:47	7	_TIFFmalloc ( count * sizeof ( double ) )
CALLEE	2569:15	2569:15	8	_TIFFmalloc
LEAF_NODE	2569:15	2569:15	9	_TIFFmalloc
LEAF_NODE	2569:26	2569:26	8	(
ARGUMENT	2569:27	2569:33	8	count * sizeof ( double )
FIELD	2569:27	2569:27	9	count
LEAF_NODE	2569:27	2569:27	10	count
LEAF_NODE	2569:32	2569:32	9	*
FUNCTION_CALL	2569:33	2569:46	9	sizeof ( double )
CALLEE	2569:33	2569:33	10	sizeof
LEAF_NODE	2569:33	2569:33	11	sizeof
LEAF_NODE	2569:39	2569:39	10	(
ARGUMENT	2569:40	2569:40	10	double
FIELD	2569:40	2569:40	11	double
LEAF_NODE	2569:40	2569:40	12	double
LEAF_NODE	2569:46	2569:46	10	)
LEAF_NODE	2569:47	2569:47	8	)
LEAF_NODE	2569:48	2569:48	4	;
SELECTION	2570:1	2571:1	3	
KEYWORD	2570:1	2570:1	4	if
LEAF_NODE	2570:1	2570:1	5	if
LEAF_NODE	2570:4	2570:4	4	(
CONDITION	2570:5	2570:5	4	data == 0
EXPR	2570:5	2570:11	5	data == 0
FIELD	2570:5	2570:5	6	data
LEAF_NODE	2570:5	2570:5	7	data
EQ_OPERATOR	2570:9	2570:9	6	==
LEAF_NODE	2570:9	2570:9	7	==
FIELD	2570:11	2570:11	6	0
LEAF_NODE	2570:11	2570:11	7	0
LEAF_NODE	2570:12	2570:12	4	)
STATEMENTS	2571:1	2574:1	4	
LEAF_NODE	2571:1	2571:1	5	{
STATEMENTS	2572:2	2573:34	5	
EXPR_STATEMENT	2572:2	2572:21	6	_TIFFfree ( origdata ) ;
EXPR	2572:2	2572:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	2572:2	2572:20	8	_TIFFfree ( origdata )
CALLEE	2572:2	2572:2	9	_TIFFfree
LEAF_NODE	2572:2	2572:2	10	_TIFFfree
LEAF_NODE	2572:11	2572:11	9	(
ARGUMENT	2572:12	2572:12	9	origdata
FIELD	2572:12	2572:12	10	origdata
LEAF_NODE	2572:12	2572:12	11	origdata
LEAF_NODE	2572:20	2572:20	9	)
LEAF_NODE	2572:21	2572:21	7	;
LEAF_NODE	2573:2	2573:2	6	return
LEAF_NODE	2573:8	2573:8	6	(
LEAF_NODE	2573:9	2573:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	2573:33	2573:33	6	)
LEAF_NODE	2573:34	2573:34	6	;
LEAF_NODE	2574:1	2574:1	5	}
SELECTION	2575:1	2576:1	3	
KEYWORD	2575:1	2575:1	4	switch
LEAF_NODE	2575:1	2575:1	5	switch
LEAF_NODE	2575:8	2575:8	4	(
CONDITION	2575:9	2575:9	4	direntry -> tdir_type
EXPR	2575:9	2575:9	5	direntry -> tdir_type
FIELD	2575:9	2575:19	6	direntry -> tdir_type
LEAF_NODE	2575:9	2575:9	7	direntry
LEAF_NODE	2575:17	2575:17	7	->
LEAF_NODE	2575:19	2575:19	7	tdir_type
LEAF_NODE	2575:28	2575:28	4	)
STATEMENTS	2576:1	2761:1	4	
LEAF_NODE	2576:1	2576:1	5	{
STATEMENTS	2577:2	2760:3	5	
LABEL	2577:2	2577:16	6	case TIFF_BYTE :
LEAF_NODE	2577:2	2577:2	7	case
LEAF_NODE	2577:7	2577:7	7	TIFF_BYTE
LEAF_NODE	2577:16	2577:16	7	:
LEAF_NODE	2578:3	2578:3	6	{
STATEMENTS	2579:4	2584:4	6	
SIMPLE_DECL	2579:4	2579:13	7	uint8 * ma ;
VAR_DECL	2579:4	2579:11	8	uint8 * ma
TYPE	2579:4	2579:9	9	uint8 *
TYPE_NAME	2579:4	2579:4	10	uint8
LEAF_NODE	2579:4	2579:4	11	uint8
POINTER	2579:9	2579:9	10	*
LEAF_NODE	2579:9	2579:9	11	*
NAME	2579:11	2579:11	9	ma
LEAF_NODE	2579:11	2579:11	10	ma
LEAF_NODE	2579:13	2579:13	8	;
SIMPLE_DECL	2580:4	2580:14	7	double * mb ;
VAR_DECL	2580:4	2580:12	8	double * mb
TYPE	2580:4	2580:10	9	double *
TYPE_NAME	2580:4	2580:4	10	double
LEAF_NODE	2580:4	2580:4	11	double
POINTER	2580:10	2580:10	10	*
LEAF_NODE	2580:10	2580:10	11	*
NAME	2580:12	2580:12	9	mb
LEAF_NODE	2580:12	2580:12	10	mb
LEAF_NODE	2580:14	2580:14	8	;
SIMPLE_DECL	2581:4	2581:12	7	uint32 n ;
VAR_DECL	2581:4	2581:11	8	uint32 n
TYPE	2581:4	2581:4	9	uint32
TYPE_NAME	2581:4	2581:4	10	uint32
LEAF_NODE	2581:4	2581:4	11	uint32
NAME	2581:11	2581:11	9	n
LEAF_NODE	2581:11	2581:11	10	n
LEAF_NODE	2581:12	2581:12	8	;
EXPR_STATEMENT	2582:4	2582:23	7	ma = ( uint8 * ) origdata ;
EXPR	2582:4	2582:4	8	ma = ( uint8 * ) origdata
ASSIGN	2582:4	2582:7	9	ma = ( uint8 * ) origdata
LVAL	2582:4	2582:4	10	ma
FIELD	2582:4	2582:4	11	ma
LEAF_NODE	2582:4	2582:4	12	ma
ASSIGN_OP	2582:6	2582:6	10	=
LEAF_NODE	2582:6	2582:6	11	=
RVAL	2582:7	2582:15	10	( uint8 * ) origdata
LEAF_NODE	2582:7	2582:7	11	(
TYPE_NAME	2582:8	2582:8	11	uint8
LEAF_NODE	2582:8	2582:8	12	uint8
LEAF_NODE	2582:13	2582:13	11	*
LEAF_NODE	2582:14	2582:14	11	)
FIELD	2582:15	2582:15	11	origdata
LEAF_NODE	2582:15	2582:15	12	origdata
LEAF_NODE	2582:23	2582:23	8	;
EXPR_STATEMENT	2583:4	2583:11	7	mb = data ;
EXPR	2583:4	2583:4	8	mb = data
ASSIGN	2583:4	2583:7	9	mb = data
LVAL	2583:4	2583:4	10	mb
FIELD	2583:4	2583:4	11	mb
LEAF_NODE	2583:4	2583:4	12	mb
ASSIGN_OP	2583:6	2583:6	10	=
LEAF_NODE	2583:6	2583:6	11	=
RVAL	2583:7	2583:7	10	data
FIELD	2583:7	2583:7	11	data
LEAF_NODE	2583:7	2583:7	12	data
LEAF_NODE	2583:11	2583:11	8	;
ITERATION	2584:4	2585:5	7	
KEYWORD	2584:4	2584:4	8	for
LEAF_NODE	2584:4	2584:4	9	for
LEAF_NODE	2584:8	2584:8	8	(
FOR_INIT	2584:9	2584:12	8	n = 0 ;
EXPR	2584:9	2584:9	9	n = 0
ASSIGN	2584:9	2584:11	10	n = 0
LVAL	2584:9	2584:9	11	n
FIELD	2584:9	2584:9	12	n
LEAF_NODE	2584:9	2584:9	13	n
ASSIGN_OP	2584:10	2584:10	11	=
LEAF_NODE	2584:10	2584:10	12	=
RVAL	2584:11	2584:11	11	0
FIELD	2584:11	2584:11	12	0
LEAF_NODE	2584:11	2584:11	13	0
LEAF_NODE	2584:12	2584:12	9	;
CONDITION	2584:14	2584:14	8	n < count
EXPR	2584:14	2584:16	9	n < count
FIELD	2584:14	2584:14	10	n
LEAF_NODE	2584:14	2584:14	11	n
REL_OPERATOR	2584:15	2584:15	10	<
LEAF_NODE	2584:15	2584:15	11	<
FIELD	2584:16	2584:16	10	count
LEAF_NODE	2584:16	2584:16	11	count
LEAF_NODE	2584:21	2584:21	8	;
FOR_EXPR	2584:23	2584:23	8	n ++
EXPR	2584:23	2584:23	9	n ++
FIELD	2584:23	2584:24	10	n ++
LEAF_NODE	2584:23	2584:23	11	n
LEAF_NODE	2584:24	2584:24	11	++
LEAF_NODE	2584:26	2584:26	8	)
STATEMENTS	2585:5	2585:5	8	
EXPR_STATEMENT	2585:5	2585:26	9	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2585:5	2585:5	10	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2585:5	2585:11	11	* mb ++ = ( double ) ( * ma ++ )
LVAL	2585:5	2585:5	12	* mb ++
UNARY_EXPR	2585:5	2585:6	13	* mb ++
UNARY_OPERATOR	2585:5	2585:5	14	*
LEAF_NODE	2585:5	2585:5	15	*
FIELD	2585:6	2585:8	14	mb ++
LEAF_NODE	2585:6	2585:6	15	mb
LEAF_NODE	2585:8	2585:8	15	++
ASSIGN_OP	2585:10	2585:10	12	=
LEAF_NODE	2585:10	2585:10	13	=
RVAL	2585:11	2585:25	12	( double ) ( * ma ++ )
LEAF_NODE	2585:11	2585:11	13	(
TYPE_NAME	2585:12	2585:12	13	double
LEAF_NODE	2585:12	2585:12	14	double
LEAF_NODE	2585:18	2585:18	13	)
LEAF_NODE	2585:19	2585:19	13	(
UNARY_EXPR	2585:20	2585:21	13	* ma ++
UNARY_OPERATOR	2585:20	2585:20	14	*
LEAF_NODE	2585:20	2585:20	15	*
FIELD	2585:21	2585:23	14	ma ++
LEAF_NODE	2585:21	2585:21	15	ma
LEAF_NODE	2585:23	2585:23	15	++
LEAF_NODE	2585:25	2585:25	13	)
LEAF_NODE	2585:26	2585:26	10	;
LEAF_NODE	2586:3	2586:3	6	}
JUMP_STATEMENT	2587:3	2587:8	6	break DESTINATION ;
KEYWORD	2587:3	2587:3	7	break
LEAF_NODE	2587:3	2587:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2587:8	2587:8	7	;
LABEL	2588:2	2588:17	6	case TIFF_SBYTE :
LEAF_NODE	2588:2	2588:2	7	case
LEAF_NODE	2588:7	2588:7	7	TIFF_SBYTE
LEAF_NODE	2588:17	2588:17	7	:
LEAF_NODE	2589:3	2589:3	6	{
STATEMENTS	2590:4	2595:4	6	
SIMPLE_DECL	2590:4	2590:12	7	int8 * ma ;
VAR_DECL	2590:4	2590:10	8	int8 * ma
TYPE	2590:4	2590:8	9	int8 *
TYPE_NAME	2590:4	2590:4	10	int8
LEAF_NODE	2590:4	2590:4	11	int8
POINTER	2590:8	2590:8	10	*
LEAF_NODE	2590:8	2590:8	11	*
NAME	2590:10	2590:10	9	ma
LEAF_NODE	2590:10	2590:10	10	ma
LEAF_NODE	2590:12	2590:12	8	;
SIMPLE_DECL	2591:4	2591:14	7	double * mb ;
VAR_DECL	2591:4	2591:12	8	double * mb
TYPE	2591:4	2591:10	9	double *
TYPE_NAME	2591:4	2591:4	10	double
LEAF_NODE	2591:4	2591:4	11	double
POINTER	2591:10	2591:10	10	*
LEAF_NODE	2591:10	2591:10	11	*
NAME	2591:12	2591:12	9	mb
LEAF_NODE	2591:12	2591:12	10	mb
LEAF_NODE	2591:14	2591:14	8	;
SIMPLE_DECL	2592:4	2592:12	7	uint32 n ;
VAR_DECL	2592:4	2592:11	8	uint32 n
TYPE	2592:4	2592:4	9	uint32
TYPE_NAME	2592:4	2592:4	10	uint32
LEAF_NODE	2592:4	2592:4	11	uint32
NAME	2592:11	2592:11	9	n
LEAF_NODE	2592:11	2592:11	10	n
LEAF_NODE	2592:12	2592:12	8	;
EXPR_STATEMENT	2593:4	2593:22	7	ma = ( int8 * ) origdata ;
EXPR	2593:4	2593:4	8	ma = ( int8 * ) origdata
ASSIGN	2593:4	2593:7	9	ma = ( int8 * ) origdata
LVAL	2593:4	2593:4	10	ma
FIELD	2593:4	2593:4	11	ma
LEAF_NODE	2593:4	2593:4	12	ma
ASSIGN_OP	2593:6	2593:6	10	=
LEAF_NODE	2593:6	2593:6	11	=
RVAL	2593:7	2593:14	10	( int8 * ) origdata
LEAF_NODE	2593:7	2593:7	11	(
TYPE_NAME	2593:8	2593:8	11	int8
LEAF_NODE	2593:8	2593:8	12	int8
LEAF_NODE	2593:12	2593:12	11	*
LEAF_NODE	2593:13	2593:13	11	)
FIELD	2593:14	2593:14	11	origdata
LEAF_NODE	2593:14	2593:14	12	origdata
LEAF_NODE	2593:22	2593:22	8	;
EXPR_STATEMENT	2594:4	2594:11	7	mb = data ;
EXPR	2594:4	2594:4	8	mb = data
ASSIGN	2594:4	2594:7	9	mb = data
LVAL	2594:4	2594:4	10	mb
FIELD	2594:4	2594:4	11	mb
LEAF_NODE	2594:4	2594:4	12	mb
ASSIGN_OP	2594:6	2594:6	10	=
LEAF_NODE	2594:6	2594:6	11	=
RVAL	2594:7	2594:7	10	data
FIELD	2594:7	2594:7	11	data
LEAF_NODE	2594:7	2594:7	12	data
LEAF_NODE	2594:11	2594:11	8	;
ITERATION	2595:4	2596:5	7	
KEYWORD	2595:4	2595:4	8	for
LEAF_NODE	2595:4	2595:4	9	for
LEAF_NODE	2595:8	2595:8	8	(
FOR_INIT	2595:9	2595:12	8	n = 0 ;
EXPR	2595:9	2595:9	9	n = 0
ASSIGN	2595:9	2595:11	10	n = 0
LVAL	2595:9	2595:9	11	n
FIELD	2595:9	2595:9	12	n
LEAF_NODE	2595:9	2595:9	13	n
ASSIGN_OP	2595:10	2595:10	11	=
LEAF_NODE	2595:10	2595:10	12	=
RVAL	2595:11	2595:11	11	0
FIELD	2595:11	2595:11	12	0
LEAF_NODE	2595:11	2595:11	13	0
LEAF_NODE	2595:12	2595:12	9	;
CONDITION	2595:14	2595:14	8	n < count
EXPR	2595:14	2595:16	9	n < count
FIELD	2595:14	2595:14	10	n
LEAF_NODE	2595:14	2595:14	11	n
REL_OPERATOR	2595:15	2595:15	10	<
LEAF_NODE	2595:15	2595:15	11	<
FIELD	2595:16	2595:16	10	count
LEAF_NODE	2595:16	2595:16	11	count
LEAF_NODE	2595:21	2595:21	8	;
FOR_EXPR	2595:23	2595:23	8	n ++
EXPR	2595:23	2595:23	9	n ++
FIELD	2595:23	2595:24	10	n ++
LEAF_NODE	2595:23	2595:23	11	n
LEAF_NODE	2595:24	2595:24	11	++
LEAF_NODE	2595:26	2595:26	8	)
STATEMENTS	2596:5	2596:5	8	
EXPR_STATEMENT	2596:5	2596:26	9	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2596:5	2596:5	10	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2596:5	2596:11	11	* mb ++ = ( double ) ( * ma ++ )
LVAL	2596:5	2596:5	12	* mb ++
UNARY_EXPR	2596:5	2596:6	13	* mb ++
UNARY_OPERATOR	2596:5	2596:5	14	*
LEAF_NODE	2596:5	2596:5	15	*
FIELD	2596:6	2596:8	14	mb ++
LEAF_NODE	2596:6	2596:6	15	mb
LEAF_NODE	2596:8	2596:8	15	++
ASSIGN_OP	2596:10	2596:10	12	=
LEAF_NODE	2596:10	2596:10	13	=
RVAL	2596:11	2596:25	12	( double ) ( * ma ++ )
LEAF_NODE	2596:11	2596:11	13	(
TYPE_NAME	2596:12	2596:12	13	double
LEAF_NODE	2596:12	2596:12	14	double
LEAF_NODE	2596:18	2596:18	13	)
LEAF_NODE	2596:19	2596:19	13	(
UNARY_EXPR	2596:20	2596:21	13	* ma ++
UNARY_OPERATOR	2596:20	2596:20	14	*
LEAF_NODE	2596:20	2596:20	15	*
FIELD	2596:21	2596:23	14	ma ++
LEAF_NODE	2596:21	2596:21	15	ma
LEAF_NODE	2596:23	2596:23	15	++
LEAF_NODE	2596:25	2596:25	13	)
LEAF_NODE	2596:26	2596:26	10	;
LEAF_NODE	2597:3	2597:3	6	}
JUMP_STATEMENT	2598:3	2598:8	6	break DESTINATION ;
KEYWORD	2598:3	2598:3	7	break
LEAF_NODE	2598:3	2598:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2598:8	2598:8	7	;
LABEL	2599:2	2599:17	6	case TIFF_SHORT :
LEAF_NODE	2599:2	2599:2	7	case
LEAF_NODE	2599:7	2599:7	7	TIFF_SHORT
LEAF_NODE	2599:17	2599:17	7	:
LEAF_NODE	2600:3	2600:3	6	{
STATEMENTS	2601:4	2606:4	6	
SIMPLE_DECL	2601:4	2601:14	7	uint16 * ma ;
VAR_DECL	2601:4	2601:12	8	uint16 * ma
TYPE	2601:4	2601:10	9	uint16 *
TYPE_NAME	2601:4	2601:4	10	uint16
LEAF_NODE	2601:4	2601:4	11	uint16
POINTER	2601:10	2601:10	10	*
LEAF_NODE	2601:10	2601:10	11	*
NAME	2601:12	2601:12	9	ma
LEAF_NODE	2601:12	2601:12	10	ma
LEAF_NODE	2601:14	2601:14	8	;
SIMPLE_DECL	2602:4	2602:14	7	double * mb ;
VAR_DECL	2602:4	2602:12	8	double * mb
TYPE	2602:4	2602:10	9	double *
TYPE_NAME	2602:4	2602:4	10	double
LEAF_NODE	2602:4	2602:4	11	double
POINTER	2602:10	2602:10	10	*
LEAF_NODE	2602:10	2602:10	11	*
NAME	2602:12	2602:12	9	mb
LEAF_NODE	2602:12	2602:12	10	mb
LEAF_NODE	2602:14	2602:14	8	;
SIMPLE_DECL	2603:4	2603:12	7	uint32 n ;
VAR_DECL	2603:4	2603:11	8	uint32 n
TYPE	2603:4	2603:4	9	uint32
TYPE_NAME	2603:4	2603:4	10	uint32
LEAF_NODE	2603:4	2603:4	11	uint32
NAME	2603:11	2603:11	9	n
LEAF_NODE	2603:11	2603:11	10	n
LEAF_NODE	2603:12	2603:12	8	;
EXPR_STATEMENT	2604:4	2604:24	7	ma = ( uint16 * ) origdata ;
EXPR	2604:4	2604:4	8	ma = ( uint16 * ) origdata
ASSIGN	2604:4	2604:7	9	ma = ( uint16 * ) origdata
LVAL	2604:4	2604:4	10	ma
FIELD	2604:4	2604:4	11	ma
LEAF_NODE	2604:4	2604:4	12	ma
ASSIGN_OP	2604:6	2604:6	10	=
LEAF_NODE	2604:6	2604:6	11	=
RVAL	2604:7	2604:16	10	( uint16 * ) origdata
LEAF_NODE	2604:7	2604:7	11	(
TYPE_NAME	2604:8	2604:8	11	uint16
LEAF_NODE	2604:8	2604:8	12	uint16
LEAF_NODE	2604:14	2604:14	11	*
LEAF_NODE	2604:15	2604:15	11	)
FIELD	2604:16	2604:16	11	origdata
LEAF_NODE	2604:16	2604:16	12	origdata
LEAF_NODE	2604:24	2604:24	8	;
EXPR_STATEMENT	2605:4	2605:11	7	mb = data ;
EXPR	2605:4	2605:4	8	mb = data
ASSIGN	2605:4	2605:7	9	mb = data
LVAL	2605:4	2605:4	10	mb
FIELD	2605:4	2605:4	11	mb
LEAF_NODE	2605:4	2605:4	12	mb
ASSIGN_OP	2605:6	2605:6	10	=
LEAF_NODE	2605:6	2605:6	11	=
RVAL	2605:7	2605:7	10	data
FIELD	2605:7	2605:7	11	data
LEAF_NODE	2605:7	2605:7	12	data
LEAF_NODE	2605:11	2605:11	8	;
ITERATION	2606:4	2607:4	7	
KEYWORD	2606:4	2606:4	8	for
LEAF_NODE	2606:4	2606:4	9	for
LEAF_NODE	2606:8	2606:8	8	(
FOR_INIT	2606:9	2606:12	8	n = 0 ;
EXPR	2606:9	2606:9	9	n = 0
ASSIGN	2606:9	2606:11	10	n = 0
LVAL	2606:9	2606:9	11	n
FIELD	2606:9	2606:9	12	n
LEAF_NODE	2606:9	2606:9	13	n
ASSIGN_OP	2606:10	2606:10	11	=
LEAF_NODE	2606:10	2606:10	12	=
RVAL	2606:11	2606:11	11	0
FIELD	2606:11	2606:11	12	0
LEAF_NODE	2606:11	2606:11	13	0
LEAF_NODE	2606:12	2606:12	9	;
CONDITION	2606:14	2606:14	8	n < count
EXPR	2606:14	2606:16	9	n < count
FIELD	2606:14	2606:14	10	n
LEAF_NODE	2606:14	2606:14	11	n
REL_OPERATOR	2606:15	2606:15	10	<
LEAF_NODE	2606:15	2606:15	11	<
FIELD	2606:16	2606:16	10	count
LEAF_NODE	2606:16	2606:16	11	count
LEAF_NODE	2606:21	2606:21	8	;
FOR_EXPR	2606:23	2606:23	8	n ++
EXPR	2606:23	2606:23	9	n ++
FIELD	2606:23	2606:24	10	n ++
LEAF_NODE	2606:23	2606:23	11	n
LEAF_NODE	2606:24	2606:24	11	++
LEAF_NODE	2606:26	2606:26	8	)
STATEMENTS	2607:4	2611:4	8	
LEAF_NODE	2607:4	2607:4	9	{
STATEMENTS	2608:5	2610:5	9	
SELECTION	2608:5	2609:6	10	
KEYWORD	2608:5	2608:5	11	if
LEAF_NODE	2608:5	2608:5	12	if
LEAF_NODE	2608:8	2608:8	11	(
CONDITION	2608:9	2608:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2608:9	2608:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2608:9	2608:14	13	tif -> tif_flags
LEAF_NODE	2608:9	2608:9	14	tif
LEAF_NODE	2608:12	2608:12	14	->
LEAF_NODE	2608:14	2608:14	14	tif_flags
LEAF_NODE	2608:23	2608:23	13	&
FIELD	2608:24	2608:24	13	TIFF_SWAB
LEAF_NODE	2608:24	2608:24	14	TIFF_SWAB
LEAF_NODE	2608:33	2608:33	11	)
STATEMENTS	2609:6	2609:6	11	
EXPR_STATEMENT	2609:6	2609:23	12	TIFFSwabShort ( ma ) ;
EXPR	2609:6	2609:6	13	TIFFSwabShort ( ma )
FUNCTION_CALL	2609:6	2609:22	14	TIFFSwabShort ( ma )
CALLEE	2609:6	2609:6	15	TIFFSwabShort
LEAF_NODE	2609:6	2609:6	16	TIFFSwabShort
LEAF_NODE	2609:19	2609:19	15	(
ARGUMENT	2609:20	2609:20	15	ma
FIELD	2609:20	2609:20	16	ma
LEAF_NODE	2609:20	2609:20	17	ma
LEAF_NODE	2609:22	2609:22	15	)
LEAF_NODE	2609:23	2609:23	13	;
EXPR_STATEMENT	2610:5	2610:26	10	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2610:5	2610:5	11	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2610:5	2610:11	12	* mb ++ = ( double ) ( * ma ++ )
LVAL	2610:5	2610:5	13	* mb ++
UNARY_EXPR	2610:5	2610:6	14	* mb ++
UNARY_OPERATOR	2610:5	2610:5	15	*
LEAF_NODE	2610:5	2610:5	16	*
FIELD	2610:6	2610:8	15	mb ++
LEAF_NODE	2610:6	2610:6	16	mb
LEAF_NODE	2610:8	2610:8	16	++
ASSIGN_OP	2610:10	2610:10	13	=
LEAF_NODE	2610:10	2610:10	14	=
RVAL	2610:11	2610:25	13	( double ) ( * ma ++ )
LEAF_NODE	2610:11	2610:11	14	(
TYPE_NAME	2610:12	2610:12	14	double
LEAF_NODE	2610:12	2610:12	15	double
LEAF_NODE	2610:18	2610:18	14	)
LEAF_NODE	2610:19	2610:19	14	(
UNARY_EXPR	2610:20	2610:21	14	* ma ++
UNARY_OPERATOR	2610:20	2610:20	15	*
LEAF_NODE	2610:20	2610:20	16	*
FIELD	2610:21	2610:23	15	ma ++
LEAF_NODE	2610:21	2610:21	16	ma
LEAF_NODE	2610:23	2610:23	16	++
LEAF_NODE	2610:25	2610:25	14	)
LEAF_NODE	2610:26	2610:26	11	;
LEAF_NODE	2611:4	2611:4	9	}
LEAF_NODE	2612:3	2612:3	6	}
JUMP_STATEMENT	2613:3	2613:8	6	break DESTINATION ;
KEYWORD	2613:3	2613:3	7	break
LEAF_NODE	2613:3	2613:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2613:8	2613:8	7	;
LABEL	2614:2	2614:18	6	case TIFF_SSHORT :
LEAF_NODE	2614:2	2614:2	7	case
LEAF_NODE	2614:7	2614:7	7	TIFF_SSHORT
LEAF_NODE	2614:18	2614:18	7	:
LEAF_NODE	2615:3	2615:3	6	{
STATEMENTS	2616:4	2621:4	6	
SIMPLE_DECL	2616:4	2616:13	7	int16 * ma ;
VAR_DECL	2616:4	2616:11	8	int16 * ma
TYPE	2616:4	2616:9	9	int16 *
TYPE_NAME	2616:4	2616:4	10	int16
LEAF_NODE	2616:4	2616:4	11	int16
POINTER	2616:9	2616:9	10	*
LEAF_NODE	2616:9	2616:9	11	*
NAME	2616:11	2616:11	9	ma
LEAF_NODE	2616:11	2616:11	10	ma
LEAF_NODE	2616:13	2616:13	8	;
SIMPLE_DECL	2617:4	2617:14	7	double * mb ;
VAR_DECL	2617:4	2617:12	8	double * mb
TYPE	2617:4	2617:10	9	double *
TYPE_NAME	2617:4	2617:4	10	double
LEAF_NODE	2617:4	2617:4	11	double
POINTER	2617:10	2617:10	10	*
LEAF_NODE	2617:10	2617:10	11	*
NAME	2617:12	2617:12	9	mb
LEAF_NODE	2617:12	2617:12	10	mb
LEAF_NODE	2617:14	2617:14	8	;
SIMPLE_DECL	2618:4	2618:12	7	uint32 n ;
VAR_DECL	2618:4	2618:11	8	uint32 n
TYPE	2618:4	2618:4	9	uint32
TYPE_NAME	2618:4	2618:4	10	uint32
LEAF_NODE	2618:4	2618:4	11	uint32
NAME	2618:11	2618:11	9	n
LEAF_NODE	2618:11	2618:11	10	n
LEAF_NODE	2618:12	2618:12	8	;
EXPR_STATEMENT	2619:4	2619:23	7	ma = ( int16 * ) origdata ;
EXPR	2619:4	2619:4	8	ma = ( int16 * ) origdata
ASSIGN	2619:4	2619:7	9	ma = ( int16 * ) origdata
LVAL	2619:4	2619:4	10	ma
FIELD	2619:4	2619:4	11	ma
LEAF_NODE	2619:4	2619:4	12	ma
ASSIGN_OP	2619:6	2619:6	10	=
LEAF_NODE	2619:6	2619:6	11	=
RVAL	2619:7	2619:15	10	( int16 * ) origdata
LEAF_NODE	2619:7	2619:7	11	(
TYPE_NAME	2619:8	2619:8	11	int16
LEAF_NODE	2619:8	2619:8	12	int16
LEAF_NODE	2619:13	2619:13	11	*
LEAF_NODE	2619:14	2619:14	11	)
FIELD	2619:15	2619:15	11	origdata
LEAF_NODE	2619:15	2619:15	12	origdata
LEAF_NODE	2619:23	2619:23	8	;
EXPR_STATEMENT	2620:4	2620:11	7	mb = data ;
EXPR	2620:4	2620:4	8	mb = data
ASSIGN	2620:4	2620:7	9	mb = data
LVAL	2620:4	2620:4	10	mb
FIELD	2620:4	2620:4	11	mb
LEAF_NODE	2620:4	2620:4	12	mb
ASSIGN_OP	2620:6	2620:6	10	=
LEAF_NODE	2620:6	2620:6	11	=
RVAL	2620:7	2620:7	10	data
FIELD	2620:7	2620:7	11	data
LEAF_NODE	2620:7	2620:7	12	data
LEAF_NODE	2620:11	2620:11	8	;
ITERATION	2621:4	2622:4	7	
KEYWORD	2621:4	2621:4	8	for
LEAF_NODE	2621:4	2621:4	9	for
LEAF_NODE	2621:8	2621:8	8	(
FOR_INIT	2621:9	2621:12	8	n = 0 ;
EXPR	2621:9	2621:9	9	n = 0
ASSIGN	2621:9	2621:11	10	n = 0
LVAL	2621:9	2621:9	11	n
FIELD	2621:9	2621:9	12	n
LEAF_NODE	2621:9	2621:9	13	n
ASSIGN_OP	2621:10	2621:10	11	=
LEAF_NODE	2621:10	2621:10	12	=
RVAL	2621:11	2621:11	11	0
FIELD	2621:11	2621:11	12	0
LEAF_NODE	2621:11	2621:11	13	0
LEAF_NODE	2621:12	2621:12	9	;
CONDITION	2621:14	2621:14	8	n < count
EXPR	2621:14	2621:16	9	n < count
FIELD	2621:14	2621:14	10	n
LEAF_NODE	2621:14	2621:14	11	n
REL_OPERATOR	2621:15	2621:15	10	<
LEAF_NODE	2621:15	2621:15	11	<
FIELD	2621:16	2621:16	10	count
LEAF_NODE	2621:16	2621:16	11	count
LEAF_NODE	2621:21	2621:21	8	;
FOR_EXPR	2621:23	2621:23	8	n ++
EXPR	2621:23	2621:23	9	n ++
FIELD	2621:23	2621:24	10	n ++
LEAF_NODE	2621:23	2621:23	11	n
LEAF_NODE	2621:24	2621:24	11	++
LEAF_NODE	2621:26	2621:26	8	)
STATEMENTS	2622:4	2626:4	8	
LEAF_NODE	2622:4	2622:4	9	{
STATEMENTS	2623:5	2625:5	9	
SELECTION	2623:5	2624:6	10	
KEYWORD	2623:5	2623:5	11	if
LEAF_NODE	2623:5	2623:5	12	if
LEAF_NODE	2623:8	2623:8	11	(
CONDITION	2623:9	2623:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2623:9	2623:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2623:9	2623:14	13	tif -> tif_flags
LEAF_NODE	2623:9	2623:9	14	tif
LEAF_NODE	2623:12	2623:12	14	->
LEAF_NODE	2623:14	2623:14	14	tif_flags
LEAF_NODE	2623:23	2623:23	13	&
FIELD	2623:24	2623:24	13	TIFF_SWAB
LEAF_NODE	2623:24	2623:24	14	TIFF_SWAB
LEAF_NODE	2623:33	2623:33	11	)
STATEMENTS	2624:6	2624:6	11	
EXPR_STATEMENT	2624:6	2624:32	12	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	2624:6	2624:6	13	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	2624:6	2624:31	14	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	2624:6	2624:6	15	TIFFSwabShort
LEAF_NODE	2624:6	2624:6	16	TIFFSwabShort
LEAF_NODE	2624:19	2624:19	15	(
ARGUMENT	2624:20	2624:29	15	( uint16 * ) ma
LEAF_NODE	2624:20	2624:20	16	(
TYPE_NAME	2624:21	2624:21	16	uint16
LEAF_NODE	2624:21	2624:21	17	uint16
LEAF_NODE	2624:27	2624:27	16	*
LEAF_NODE	2624:28	2624:28	16	)
FIELD	2624:29	2624:29	16	ma
LEAF_NODE	2624:29	2624:29	17	ma
LEAF_NODE	2624:31	2624:31	15	)
LEAF_NODE	2624:32	2624:32	13	;
EXPR_STATEMENT	2625:5	2625:26	10	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2625:5	2625:5	11	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2625:5	2625:11	12	* mb ++ = ( double ) ( * ma ++ )
LVAL	2625:5	2625:5	13	* mb ++
UNARY_EXPR	2625:5	2625:6	14	* mb ++
UNARY_OPERATOR	2625:5	2625:5	15	*
LEAF_NODE	2625:5	2625:5	16	*
FIELD	2625:6	2625:8	15	mb ++
LEAF_NODE	2625:6	2625:6	16	mb
LEAF_NODE	2625:8	2625:8	16	++
ASSIGN_OP	2625:10	2625:10	13	=
LEAF_NODE	2625:10	2625:10	14	=
RVAL	2625:11	2625:25	13	( double ) ( * ma ++ )
LEAF_NODE	2625:11	2625:11	14	(
TYPE_NAME	2625:12	2625:12	14	double
LEAF_NODE	2625:12	2625:12	15	double
LEAF_NODE	2625:18	2625:18	14	)
LEAF_NODE	2625:19	2625:19	14	(
UNARY_EXPR	2625:20	2625:21	14	* ma ++
UNARY_OPERATOR	2625:20	2625:20	15	*
LEAF_NODE	2625:20	2625:20	16	*
FIELD	2625:21	2625:23	15	ma ++
LEAF_NODE	2625:21	2625:21	16	ma
LEAF_NODE	2625:23	2625:23	16	++
LEAF_NODE	2625:25	2625:25	14	)
LEAF_NODE	2625:26	2625:26	11	;
LEAF_NODE	2626:4	2626:4	9	}
LEAF_NODE	2627:3	2627:3	6	}
JUMP_STATEMENT	2628:3	2628:8	6	break DESTINATION ;
KEYWORD	2628:3	2628:3	7	break
LEAF_NODE	2628:3	2628:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2628:8	2628:8	7	;
LABEL	2629:2	2629:16	6	case TIFF_LONG :
LEAF_NODE	2629:2	2629:2	7	case
LEAF_NODE	2629:7	2629:7	7	TIFF_LONG
LEAF_NODE	2629:16	2629:16	7	:
LEAF_NODE	2630:3	2630:3	6	{
STATEMENTS	2631:4	2636:4	6	
SIMPLE_DECL	2631:4	2631:14	7	uint32 * ma ;
VAR_DECL	2631:4	2631:12	8	uint32 * ma
TYPE	2631:4	2631:10	9	uint32 *
TYPE_NAME	2631:4	2631:4	10	uint32
LEAF_NODE	2631:4	2631:4	11	uint32
POINTER	2631:10	2631:10	10	*
LEAF_NODE	2631:10	2631:10	11	*
NAME	2631:12	2631:12	9	ma
LEAF_NODE	2631:12	2631:12	10	ma
LEAF_NODE	2631:14	2631:14	8	;
SIMPLE_DECL	2632:4	2632:14	7	double * mb ;
VAR_DECL	2632:4	2632:12	8	double * mb
TYPE	2632:4	2632:10	9	double *
TYPE_NAME	2632:4	2632:4	10	double
LEAF_NODE	2632:4	2632:4	11	double
POINTER	2632:10	2632:10	10	*
LEAF_NODE	2632:10	2632:10	11	*
NAME	2632:12	2632:12	9	mb
LEAF_NODE	2632:12	2632:12	10	mb
LEAF_NODE	2632:14	2632:14	8	;
SIMPLE_DECL	2633:4	2633:12	7	uint32 n ;
VAR_DECL	2633:4	2633:11	8	uint32 n
TYPE	2633:4	2633:4	9	uint32
TYPE_NAME	2633:4	2633:4	10	uint32
LEAF_NODE	2633:4	2633:4	11	uint32
NAME	2633:11	2633:11	9	n
LEAF_NODE	2633:11	2633:11	10	n
LEAF_NODE	2633:12	2633:12	8	;
EXPR_STATEMENT	2634:4	2634:24	7	ma = ( uint32 * ) origdata ;
EXPR	2634:4	2634:4	8	ma = ( uint32 * ) origdata
ASSIGN	2634:4	2634:7	9	ma = ( uint32 * ) origdata
LVAL	2634:4	2634:4	10	ma
FIELD	2634:4	2634:4	11	ma
LEAF_NODE	2634:4	2634:4	12	ma
ASSIGN_OP	2634:6	2634:6	10	=
LEAF_NODE	2634:6	2634:6	11	=
RVAL	2634:7	2634:16	10	( uint32 * ) origdata
LEAF_NODE	2634:7	2634:7	11	(
TYPE_NAME	2634:8	2634:8	11	uint32
LEAF_NODE	2634:8	2634:8	12	uint32
LEAF_NODE	2634:14	2634:14	11	*
LEAF_NODE	2634:15	2634:15	11	)
FIELD	2634:16	2634:16	11	origdata
LEAF_NODE	2634:16	2634:16	12	origdata
LEAF_NODE	2634:24	2634:24	8	;
EXPR_STATEMENT	2635:4	2635:11	7	mb = data ;
EXPR	2635:4	2635:4	8	mb = data
ASSIGN	2635:4	2635:7	9	mb = data
LVAL	2635:4	2635:4	10	mb
FIELD	2635:4	2635:4	11	mb
LEAF_NODE	2635:4	2635:4	12	mb
ASSIGN_OP	2635:6	2635:6	10	=
LEAF_NODE	2635:6	2635:6	11	=
RVAL	2635:7	2635:7	10	data
FIELD	2635:7	2635:7	11	data
LEAF_NODE	2635:7	2635:7	12	data
LEAF_NODE	2635:11	2635:11	8	;
ITERATION	2636:4	2637:4	7	
KEYWORD	2636:4	2636:4	8	for
LEAF_NODE	2636:4	2636:4	9	for
LEAF_NODE	2636:8	2636:8	8	(
FOR_INIT	2636:9	2636:12	8	n = 0 ;
EXPR	2636:9	2636:9	9	n = 0
ASSIGN	2636:9	2636:11	10	n = 0
LVAL	2636:9	2636:9	11	n
FIELD	2636:9	2636:9	12	n
LEAF_NODE	2636:9	2636:9	13	n
ASSIGN_OP	2636:10	2636:10	11	=
LEAF_NODE	2636:10	2636:10	12	=
RVAL	2636:11	2636:11	11	0
FIELD	2636:11	2636:11	12	0
LEAF_NODE	2636:11	2636:11	13	0
LEAF_NODE	2636:12	2636:12	9	;
CONDITION	2636:14	2636:14	8	n < count
EXPR	2636:14	2636:16	9	n < count
FIELD	2636:14	2636:14	10	n
LEAF_NODE	2636:14	2636:14	11	n
REL_OPERATOR	2636:15	2636:15	10	<
LEAF_NODE	2636:15	2636:15	11	<
FIELD	2636:16	2636:16	10	count
LEAF_NODE	2636:16	2636:16	11	count
LEAF_NODE	2636:21	2636:21	8	;
FOR_EXPR	2636:23	2636:23	8	n ++
EXPR	2636:23	2636:23	9	n ++
FIELD	2636:23	2636:24	10	n ++
LEAF_NODE	2636:23	2636:23	11	n
LEAF_NODE	2636:24	2636:24	11	++
LEAF_NODE	2636:26	2636:26	8	)
STATEMENTS	2637:4	2641:4	8	
LEAF_NODE	2637:4	2637:4	9	{
STATEMENTS	2638:5	2640:5	9	
SELECTION	2638:5	2639:6	10	
KEYWORD	2638:5	2638:5	11	if
LEAF_NODE	2638:5	2638:5	12	if
LEAF_NODE	2638:8	2638:8	11	(
CONDITION	2638:9	2638:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2638:9	2638:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2638:9	2638:14	13	tif -> tif_flags
LEAF_NODE	2638:9	2638:9	14	tif
LEAF_NODE	2638:12	2638:12	14	->
LEAF_NODE	2638:14	2638:14	14	tif_flags
LEAF_NODE	2638:23	2638:23	13	&
FIELD	2638:24	2638:24	13	TIFF_SWAB
LEAF_NODE	2638:24	2638:24	14	TIFF_SWAB
LEAF_NODE	2638:33	2638:33	11	)
STATEMENTS	2639:6	2639:6	11	
EXPR_STATEMENT	2639:6	2639:22	12	TIFFSwabLong ( ma ) ;
EXPR	2639:6	2639:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2639:6	2639:21	14	TIFFSwabLong ( ma )
CALLEE	2639:6	2639:6	15	TIFFSwabLong
LEAF_NODE	2639:6	2639:6	16	TIFFSwabLong
LEAF_NODE	2639:18	2639:18	15	(
ARGUMENT	2639:19	2639:19	15	ma
FIELD	2639:19	2639:19	16	ma
LEAF_NODE	2639:19	2639:19	17	ma
LEAF_NODE	2639:21	2639:21	15	)
LEAF_NODE	2639:22	2639:22	13	;
EXPR_STATEMENT	2640:5	2640:26	10	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2640:5	2640:5	11	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2640:5	2640:11	12	* mb ++ = ( double ) ( * ma ++ )
LVAL	2640:5	2640:5	13	* mb ++
UNARY_EXPR	2640:5	2640:6	14	* mb ++
UNARY_OPERATOR	2640:5	2640:5	15	*
LEAF_NODE	2640:5	2640:5	16	*
FIELD	2640:6	2640:8	15	mb ++
LEAF_NODE	2640:6	2640:6	16	mb
LEAF_NODE	2640:8	2640:8	16	++
ASSIGN_OP	2640:10	2640:10	13	=
LEAF_NODE	2640:10	2640:10	14	=
RVAL	2640:11	2640:25	13	( double ) ( * ma ++ )
LEAF_NODE	2640:11	2640:11	14	(
TYPE_NAME	2640:12	2640:12	14	double
LEAF_NODE	2640:12	2640:12	15	double
LEAF_NODE	2640:18	2640:18	14	)
LEAF_NODE	2640:19	2640:19	14	(
UNARY_EXPR	2640:20	2640:21	14	* ma ++
UNARY_OPERATOR	2640:20	2640:20	15	*
LEAF_NODE	2640:20	2640:20	16	*
FIELD	2640:21	2640:23	15	ma ++
LEAF_NODE	2640:21	2640:21	16	ma
LEAF_NODE	2640:23	2640:23	16	++
LEAF_NODE	2640:25	2640:25	14	)
LEAF_NODE	2640:26	2640:26	11	;
LEAF_NODE	2641:4	2641:4	9	}
LEAF_NODE	2642:3	2642:3	6	}
JUMP_STATEMENT	2643:3	2643:8	6	break DESTINATION ;
KEYWORD	2643:3	2643:3	7	break
LEAF_NODE	2643:3	2643:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2643:8	2643:8	7	;
LABEL	2644:2	2644:17	6	case TIFF_SLONG :
LEAF_NODE	2644:2	2644:2	7	case
LEAF_NODE	2644:7	2644:7	7	TIFF_SLONG
LEAF_NODE	2644:17	2644:17	7	:
LEAF_NODE	2645:3	2645:3	6	{
STATEMENTS	2646:4	2651:4	6	
SIMPLE_DECL	2646:4	2646:13	7	int32 * ma ;
VAR_DECL	2646:4	2646:11	8	int32 * ma
TYPE	2646:4	2646:9	9	int32 *
TYPE_NAME	2646:4	2646:4	10	int32
LEAF_NODE	2646:4	2646:4	11	int32
POINTER	2646:9	2646:9	10	*
LEAF_NODE	2646:9	2646:9	11	*
NAME	2646:11	2646:11	9	ma
LEAF_NODE	2646:11	2646:11	10	ma
LEAF_NODE	2646:13	2646:13	8	;
SIMPLE_DECL	2647:4	2647:14	7	double * mb ;
VAR_DECL	2647:4	2647:12	8	double * mb
TYPE	2647:4	2647:10	9	double *
TYPE_NAME	2647:4	2647:4	10	double
LEAF_NODE	2647:4	2647:4	11	double
POINTER	2647:10	2647:10	10	*
LEAF_NODE	2647:10	2647:10	11	*
NAME	2647:12	2647:12	9	mb
LEAF_NODE	2647:12	2647:12	10	mb
LEAF_NODE	2647:14	2647:14	8	;
SIMPLE_DECL	2648:4	2648:12	7	uint32 n ;
VAR_DECL	2648:4	2648:11	8	uint32 n
TYPE	2648:4	2648:4	9	uint32
TYPE_NAME	2648:4	2648:4	10	uint32
LEAF_NODE	2648:4	2648:4	11	uint32
NAME	2648:11	2648:11	9	n
LEAF_NODE	2648:11	2648:11	10	n
LEAF_NODE	2648:12	2648:12	8	;
EXPR_STATEMENT	2649:4	2649:23	7	ma = ( int32 * ) origdata ;
EXPR	2649:4	2649:4	8	ma = ( int32 * ) origdata
ASSIGN	2649:4	2649:7	9	ma = ( int32 * ) origdata
LVAL	2649:4	2649:4	10	ma
FIELD	2649:4	2649:4	11	ma
LEAF_NODE	2649:4	2649:4	12	ma
ASSIGN_OP	2649:6	2649:6	10	=
LEAF_NODE	2649:6	2649:6	11	=
RVAL	2649:7	2649:15	10	( int32 * ) origdata
LEAF_NODE	2649:7	2649:7	11	(
TYPE_NAME	2649:8	2649:8	11	int32
LEAF_NODE	2649:8	2649:8	12	int32
LEAF_NODE	2649:13	2649:13	11	*
LEAF_NODE	2649:14	2649:14	11	)
FIELD	2649:15	2649:15	11	origdata
LEAF_NODE	2649:15	2649:15	12	origdata
LEAF_NODE	2649:23	2649:23	8	;
EXPR_STATEMENT	2650:4	2650:11	7	mb = data ;
EXPR	2650:4	2650:4	8	mb = data
ASSIGN	2650:4	2650:7	9	mb = data
LVAL	2650:4	2650:4	10	mb
FIELD	2650:4	2650:4	11	mb
LEAF_NODE	2650:4	2650:4	12	mb
ASSIGN_OP	2650:6	2650:6	10	=
LEAF_NODE	2650:6	2650:6	11	=
RVAL	2650:7	2650:7	10	data
FIELD	2650:7	2650:7	11	data
LEAF_NODE	2650:7	2650:7	12	data
LEAF_NODE	2650:11	2650:11	8	;
ITERATION	2651:4	2652:4	7	
KEYWORD	2651:4	2651:4	8	for
LEAF_NODE	2651:4	2651:4	9	for
LEAF_NODE	2651:8	2651:8	8	(
FOR_INIT	2651:9	2651:12	8	n = 0 ;
EXPR	2651:9	2651:9	9	n = 0
ASSIGN	2651:9	2651:11	10	n = 0
LVAL	2651:9	2651:9	11	n
FIELD	2651:9	2651:9	12	n
LEAF_NODE	2651:9	2651:9	13	n
ASSIGN_OP	2651:10	2651:10	11	=
LEAF_NODE	2651:10	2651:10	12	=
RVAL	2651:11	2651:11	11	0
FIELD	2651:11	2651:11	12	0
LEAF_NODE	2651:11	2651:11	13	0
LEAF_NODE	2651:12	2651:12	9	;
CONDITION	2651:14	2651:14	8	n < count
EXPR	2651:14	2651:16	9	n < count
FIELD	2651:14	2651:14	10	n
LEAF_NODE	2651:14	2651:14	11	n
REL_OPERATOR	2651:15	2651:15	10	<
LEAF_NODE	2651:15	2651:15	11	<
FIELD	2651:16	2651:16	10	count
LEAF_NODE	2651:16	2651:16	11	count
LEAF_NODE	2651:21	2651:21	8	;
FOR_EXPR	2651:23	2651:23	8	n ++
EXPR	2651:23	2651:23	9	n ++
FIELD	2651:23	2651:24	10	n ++
LEAF_NODE	2651:23	2651:23	11	n
LEAF_NODE	2651:24	2651:24	11	++
LEAF_NODE	2651:26	2651:26	8	)
STATEMENTS	2652:4	2656:4	8	
LEAF_NODE	2652:4	2652:4	9	{
STATEMENTS	2653:5	2655:5	9	
SELECTION	2653:5	2654:6	10	
KEYWORD	2653:5	2653:5	11	if
LEAF_NODE	2653:5	2653:5	12	if
LEAF_NODE	2653:8	2653:8	11	(
CONDITION	2653:9	2653:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2653:9	2653:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2653:9	2653:14	13	tif -> tif_flags
LEAF_NODE	2653:9	2653:9	14	tif
LEAF_NODE	2653:12	2653:12	14	->
LEAF_NODE	2653:14	2653:14	14	tif_flags
LEAF_NODE	2653:23	2653:23	13	&
FIELD	2653:24	2653:24	13	TIFF_SWAB
LEAF_NODE	2653:24	2653:24	14	TIFF_SWAB
LEAF_NODE	2653:33	2653:33	11	)
STATEMENTS	2654:6	2654:6	11	
EXPR_STATEMENT	2654:6	2654:31	12	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	2654:6	2654:6	13	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	2654:6	2654:30	14	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	2654:6	2654:6	15	TIFFSwabLong
LEAF_NODE	2654:6	2654:6	16	TIFFSwabLong
LEAF_NODE	2654:18	2654:18	15	(
ARGUMENT	2654:19	2654:28	15	( uint32 * ) ma
LEAF_NODE	2654:19	2654:19	16	(
TYPE_NAME	2654:20	2654:20	16	uint32
LEAF_NODE	2654:20	2654:20	17	uint32
LEAF_NODE	2654:26	2654:26	16	*
LEAF_NODE	2654:27	2654:27	16	)
FIELD	2654:28	2654:28	16	ma
LEAF_NODE	2654:28	2654:28	17	ma
LEAF_NODE	2654:30	2654:30	15	)
LEAF_NODE	2654:31	2654:31	13	;
EXPR_STATEMENT	2655:5	2655:26	10	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2655:5	2655:5	11	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2655:5	2655:11	12	* mb ++ = ( double ) ( * ma ++ )
LVAL	2655:5	2655:5	13	* mb ++
UNARY_EXPR	2655:5	2655:6	14	* mb ++
UNARY_OPERATOR	2655:5	2655:5	15	*
LEAF_NODE	2655:5	2655:5	16	*
FIELD	2655:6	2655:8	15	mb ++
LEAF_NODE	2655:6	2655:6	16	mb
LEAF_NODE	2655:8	2655:8	16	++
ASSIGN_OP	2655:10	2655:10	13	=
LEAF_NODE	2655:10	2655:10	14	=
RVAL	2655:11	2655:25	13	( double ) ( * ma ++ )
LEAF_NODE	2655:11	2655:11	14	(
TYPE_NAME	2655:12	2655:12	14	double
LEAF_NODE	2655:12	2655:12	15	double
LEAF_NODE	2655:18	2655:18	14	)
LEAF_NODE	2655:19	2655:19	14	(
UNARY_EXPR	2655:20	2655:21	14	* ma ++
UNARY_OPERATOR	2655:20	2655:20	15	*
LEAF_NODE	2655:20	2655:20	16	*
FIELD	2655:21	2655:23	15	ma ++
LEAF_NODE	2655:21	2655:21	16	ma
LEAF_NODE	2655:23	2655:23	16	++
LEAF_NODE	2655:25	2655:25	14	)
LEAF_NODE	2655:26	2655:26	11	;
LEAF_NODE	2656:4	2656:4	9	}
LEAF_NODE	2657:3	2657:3	6	}
JUMP_STATEMENT	2658:3	2658:8	6	break DESTINATION ;
KEYWORD	2658:3	2658:3	7	break
LEAF_NODE	2658:3	2658:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2658:8	2658:8	7	;
LABEL	2659:2	2659:17	6	case TIFF_LONG8 :
LEAF_NODE	2659:2	2659:2	7	case
LEAF_NODE	2659:7	2659:7	7	TIFF_LONG8
LEAF_NODE	2659:17	2659:17	7	:
LEAF_NODE	2660:3	2660:3	6	{
STATEMENTS	2661:4	2666:4	6	
SIMPLE_DECL	2661:4	2661:14	7	uint64 * ma ;
VAR_DECL	2661:4	2661:12	8	uint64 * ma
TYPE	2661:4	2661:10	9	uint64 *
TYPE_NAME	2661:4	2661:4	10	uint64
LEAF_NODE	2661:4	2661:4	11	uint64
POINTER	2661:10	2661:10	10	*
LEAF_NODE	2661:10	2661:10	11	*
NAME	2661:12	2661:12	9	ma
LEAF_NODE	2661:12	2661:12	10	ma
LEAF_NODE	2661:14	2661:14	8	;
SIMPLE_DECL	2662:4	2662:14	7	double * mb ;
VAR_DECL	2662:4	2662:12	8	double * mb
TYPE	2662:4	2662:10	9	double *
TYPE_NAME	2662:4	2662:4	10	double
LEAF_NODE	2662:4	2662:4	11	double
POINTER	2662:10	2662:10	10	*
LEAF_NODE	2662:10	2662:10	11	*
NAME	2662:12	2662:12	9	mb
LEAF_NODE	2662:12	2662:12	10	mb
LEAF_NODE	2662:14	2662:14	8	;
SIMPLE_DECL	2663:4	2663:12	7	uint32 n ;
VAR_DECL	2663:4	2663:11	8	uint32 n
TYPE	2663:4	2663:4	9	uint32
TYPE_NAME	2663:4	2663:4	10	uint32
LEAF_NODE	2663:4	2663:4	11	uint32
NAME	2663:11	2663:11	9	n
LEAF_NODE	2663:11	2663:11	10	n
LEAF_NODE	2663:12	2663:12	8	;
EXPR_STATEMENT	2664:4	2664:24	7	ma = ( uint64 * ) origdata ;
EXPR	2664:4	2664:4	8	ma = ( uint64 * ) origdata
ASSIGN	2664:4	2664:7	9	ma = ( uint64 * ) origdata
LVAL	2664:4	2664:4	10	ma
FIELD	2664:4	2664:4	11	ma
LEAF_NODE	2664:4	2664:4	12	ma
ASSIGN_OP	2664:6	2664:6	10	=
LEAF_NODE	2664:6	2664:6	11	=
RVAL	2664:7	2664:16	10	( uint64 * ) origdata
LEAF_NODE	2664:7	2664:7	11	(
TYPE_NAME	2664:8	2664:8	11	uint64
LEAF_NODE	2664:8	2664:8	12	uint64
LEAF_NODE	2664:14	2664:14	11	*
LEAF_NODE	2664:15	2664:15	11	)
FIELD	2664:16	2664:16	11	origdata
LEAF_NODE	2664:16	2664:16	12	origdata
LEAF_NODE	2664:24	2664:24	8	;
EXPR_STATEMENT	2665:4	2665:11	7	mb = data ;
EXPR	2665:4	2665:4	8	mb = data
ASSIGN	2665:4	2665:7	9	mb = data
LVAL	2665:4	2665:4	10	mb
FIELD	2665:4	2665:4	11	mb
LEAF_NODE	2665:4	2665:4	12	mb
ASSIGN_OP	2665:6	2665:6	10	=
LEAF_NODE	2665:6	2665:6	11	=
RVAL	2665:7	2665:7	10	data
FIELD	2665:7	2665:7	11	data
LEAF_NODE	2665:7	2665:7	12	data
LEAF_NODE	2665:11	2665:11	8	;
ITERATION	2666:4	2667:4	7	
KEYWORD	2666:4	2666:4	8	for
LEAF_NODE	2666:4	2666:4	9	for
LEAF_NODE	2666:8	2666:8	8	(
FOR_INIT	2666:9	2666:12	8	n = 0 ;
EXPR	2666:9	2666:9	9	n = 0
ASSIGN	2666:9	2666:11	10	n = 0
LVAL	2666:9	2666:9	11	n
FIELD	2666:9	2666:9	12	n
LEAF_NODE	2666:9	2666:9	13	n
ASSIGN_OP	2666:10	2666:10	11	=
LEAF_NODE	2666:10	2666:10	12	=
RVAL	2666:11	2666:11	11	0
FIELD	2666:11	2666:11	12	0
LEAF_NODE	2666:11	2666:11	13	0
LEAF_NODE	2666:12	2666:12	9	;
CONDITION	2666:14	2666:14	8	n < count
EXPR	2666:14	2666:16	9	n < count
FIELD	2666:14	2666:14	10	n
LEAF_NODE	2666:14	2666:14	11	n
REL_OPERATOR	2666:15	2666:15	10	<
LEAF_NODE	2666:15	2666:15	11	<
FIELD	2666:16	2666:16	10	count
LEAF_NODE	2666:16	2666:16	11	count
LEAF_NODE	2666:21	2666:21	8	;
FOR_EXPR	2666:23	2666:23	8	n ++
EXPR	2666:23	2666:23	9	n ++
FIELD	2666:23	2666:24	10	n ++
LEAF_NODE	2666:23	2666:23	11	n
LEAF_NODE	2666:24	2666:24	11	++
LEAF_NODE	2666:26	2666:26	8	)
STATEMENTS	2667:4	2680:4	8	
LEAF_NODE	2667:4	2667:4	9	{
STATEMENTS	2668:5	2678:5	9	
SELECTION	2668:5	2669:6	10	
KEYWORD	2668:5	2668:5	11	if
LEAF_NODE	2668:5	2668:5	12	if
LEAF_NODE	2668:8	2668:8	11	(
CONDITION	2668:9	2668:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2668:9	2668:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2668:9	2668:14	13	tif -> tif_flags
LEAF_NODE	2668:9	2668:9	14	tif
LEAF_NODE	2668:12	2668:12	14	->
LEAF_NODE	2668:14	2668:14	14	tif_flags
LEAF_NODE	2668:23	2668:23	13	&
FIELD	2668:24	2668:24	13	TIFF_SWAB
LEAF_NODE	2668:24	2668:24	14	TIFF_SWAB
LEAF_NODE	2668:33	2668:33	11	)
STATEMENTS	2669:6	2669:6	11	
EXPR_STATEMENT	2669:6	2669:23	12	TIFFSwabLong8 ( ma ) ;
EXPR	2669:6	2669:6	13	TIFFSwabLong8 ( ma )
FUNCTION_CALL	2669:6	2669:22	14	TIFFSwabLong8 ( ma )
CALLEE	2669:6	2669:6	15	TIFFSwabLong8
LEAF_NODE	2669:6	2669:6	16	TIFFSwabLong8
LEAF_NODE	2669:19	2669:19	15	(
ARGUMENT	2669:20	2669:20	15	ma
FIELD	2669:20	2669:20	16	ma
LEAF_NODE	2669:20	2669:20	17	ma
LEAF_NODE	2669:22	2669:22	15	)
LEAF_NODE	2669:23	2669:23	13	;
EXPR_STATEMENT	2676:5	2676:39	10	* mb ++ = _TIFFUInt64ToDouble ( * ma ++ ) ;
EXPR	2676:5	2676:5	11	* mb ++ = _TIFFUInt64ToDouble ( * ma ++ )
ASSIGN	2676:5	2676:13	12	* mb ++ = _TIFFUInt64ToDouble ( * ma ++ )
LVAL	2676:5	2676:5	13	* mb ++
UNARY_EXPR	2676:5	2676:6	14	* mb ++
UNARY_OPERATOR	2676:5	2676:5	15	*
LEAF_NODE	2676:5	2676:5	16	*
FIELD	2676:6	2676:8	15	mb ++
LEAF_NODE	2676:6	2676:6	16	mb
LEAF_NODE	2676:8	2676:8	16	++
ASSIGN_OP	2676:11	2676:11	13	=
LEAF_NODE	2676:11	2676:11	14	=
RVAL	2676:13	2676:13	13	_TIFFUInt64ToDouble ( * ma ++ )
FUNCTION_CALL	2676:13	2676:38	14	_TIFFUInt64ToDouble ( * ma ++ )
CALLEE	2676:13	2676:13	15	_TIFFUInt64ToDouble
LEAF_NODE	2676:13	2676:13	16	_TIFFUInt64ToDouble
LEAF_NODE	2676:32	2676:32	15	(
ARGUMENT	2676:33	2676:33	15	* ma ++
UNARY_EXPR	2676:33	2676:34	16	* ma ++
UNARY_OPERATOR	2676:33	2676:33	17	*
LEAF_NODE	2676:33	2676:33	18	*
FIELD	2676:34	2676:36	17	ma ++
LEAF_NODE	2676:34	2676:34	18	ma
LEAF_NODE	2676:36	2676:36	18	++
LEAF_NODE	2676:38	2676:38	15	)
LEAF_NODE	2676:39	2676:39	11	;
EXPR_STATEMENT	2678:5	2678:28	10	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2678:5	2678:5	11	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2678:5	2678:13	12	* mb ++ = ( double ) ( * ma ++ )
LVAL	2678:5	2678:5	13	* mb ++
UNARY_EXPR	2678:5	2678:6	14	* mb ++
UNARY_OPERATOR	2678:5	2678:5	15	*
LEAF_NODE	2678:5	2678:5	16	*
FIELD	2678:6	2678:8	15	mb ++
LEAF_NODE	2678:6	2678:6	16	mb
LEAF_NODE	2678:8	2678:8	16	++
ASSIGN_OP	2678:11	2678:11	13	=
LEAF_NODE	2678:11	2678:11	14	=
RVAL	2678:13	2678:27	13	( double ) ( * ma ++ )
LEAF_NODE	2678:13	2678:13	14	(
TYPE_NAME	2678:14	2678:14	14	double
LEAF_NODE	2678:14	2678:14	15	double
LEAF_NODE	2678:20	2678:20	14	)
LEAF_NODE	2678:21	2678:21	14	(
UNARY_EXPR	2678:22	2678:23	14	* ma ++
UNARY_OPERATOR	2678:22	2678:22	15	*
LEAF_NODE	2678:22	2678:22	16	*
FIELD	2678:23	2678:25	15	ma ++
LEAF_NODE	2678:23	2678:23	16	ma
LEAF_NODE	2678:25	2678:25	16	++
LEAF_NODE	2678:27	2678:27	14	)
LEAF_NODE	2678:28	2678:28	11	;
LEAF_NODE	2680:4	2680:4	9	}
LEAF_NODE	2681:3	2681:3	6	}
JUMP_STATEMENT	2682:3	2682:8	6	break DESTINATION ;
KEYWORD	2682:3	2682:3	7	break
LEAF_NODE	2682:3	2682:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2682:8	2682:8	7	;
LABEL	2683:2	2683:18	6	case TIFF_SLONG8 :
LEAF_NODE	2683:2	2683:2	7	case
LEAF_NODE	2683:7	2683:7	7	TIFF_SLONG8
LEAF_NODE	2683:18	2683:18	7	:
LEAF_NODE	2684:3	2684:3	6	{
STATEMENTS	2685:4	2690:4	6	
SIMPLE_DECL	2685:4	2685:13	7	int64 * ma ;
VAR_DECL	2685:4	2685:11	8	int64 * ma
TYPE	2685:4	2685:9	9	int64 *
TYPE_NAME	2685:4	2685:4	10	int64
LEAF_NODE	2685:4	2685:4	11	int64
POINTER	2685:9	2685:9	10	*
LEAF_NODE	2685:9	2685:9	11	*
NAME	2685:11	2685:11	9	ma
LEAF_NODE	2685:11	2685:11	10	ma
LEAF_NODE	2685:13	2685:13	8	;
SIMPLE_DECL	2686:4	2686:14	7	double * mb ;
VAR_DECL	2686:4	2686:12	8	double * mb
TYPE	2686:4	2686:10	9	double *
TYPE_NAME	2686:4	2686:4	10	double
LEAF_NODE	2686:4	2686:4	11	double
POINTER	2686:10	2686:10	10	*
LEAF_NODE	2686:10	2686:10	11	*
NAME	2686:12	2686:12	9	mb
LEAF_NODE	2686:12	2686:12	10	mb
LEAF_NODE	2686:14	2686:14	8	;
SIMPLE_DECL	2687:4	2687:12	7	uint32 n ;
VAR_DECL	2687:4	2687:11	8	uint32 n
TYPE	2687:4	2687:4	9	uint32
TYPE_NAME	2687:4	2687:4	10	uint32
LEAF_NODE	2687:4	2687:4	11	uint32
NAME	2687:11	2687:11	9	n
LEAF_NODE	2687:11	2687:11	10	n
LEAF_NODE	2687:12	2687:12	8	;
EXPR_STATEMENT	2688:4	2688:23	7	ma = ( int64 * ) origdata ;
EXPR	2688:4	2688:4	8	ma = ( int64 * ) origdata
ASSIGN	2688:4	2688:7	9	ma = ( int64 * ) origdata
LVAL	2688:4	2688:4	10	ma
FIELD	2688:4	2688:4	11	ma
LEAF_NODE	2688:4	2688:4	12	ma
ASSIGN_OP	2688:6	2688:6	10	=
LEAF_NODE	2688:6	2688:6	11	=
RVAL	2688:7	2688:15	10	( int64 * ) origdata
LEAF_NODE	2688:7	2688:7	11	(
TYPE_NAME	2688:8	2688:8	11	int64
LEAF_NODE	2688:8	2688:8	12	int64
LEAF_NODE	2688:13	2688:13	11	*
LEAF_NODE	2688:14	2688:14	11	)
FIELD	2688:15	2688:15	11	origdata
LEAF_NODE	2688:15	2688:15	12	origdata
LEAF_NODE	2688:23	2688:23	8	;
EXPR_STATEMENT	2689:4	2689:11	7	mb = data ;
EXPR	2689:4	2689:4	8	mb = data
ASSIGN	2689:4	2689:7	9	mb = data
LVAL	2689:4	2689:4	10	mb
FIELD	2689:4	2689:4	11	mb
LEAF_NODE	2689:4	2689:4	12	mb
ASSIGN_OP	2689:6	2689:6	10	=
LEAF_NODE	2689:6	2689:6	11	=
RVAL	2689:7	2689:7	10	data
FIELD	2689:7	2689:7	11	data
LEAF_NODE	2689:7	2689:7	12	data
LEAF_NODE	2689:11	2689:11	8	;
ITERATION	2690:4	2691:4	7	
KEYWORD	2690:4	2690:4	8	for
LEAF_NODE	2690:4	2690:4	9	for
LEAF_NODE	2690:8	2690:8	8	(
FOR_INIT	2690:9	2690:12	8	n = 0 ;
EXPR	2690:9	2690:9	9	n = 0
ASSIGN	2690:9	2690:11	10	n = 0
LVAL	2690:9	2690:9	11	n
FIELD	2690:9	2690:9	12	n
LEAF_NODE	2690:9	2690:9	13	n
ASSIGN_OP	2690:10	2690:10	11	=
LEAF_NODE	2690:10	2690:10	12	=
RVAL	2690:11	2690:11	11	0
FIELD	2690:11	2690:11	12	0
LEAF_NODE	2690:11	2690:11	13	0
LEAF_NODE	2690:12	2690:12	9	;
CONDITION	2690:14	2690:14	8	n < count
EXPR	2690:14	2690:16	9	n < count
FIELD	2690:14	2690:14	10	n
LEAF_NODE	2690:14	2690:14	11	n
REL_OPERATOR	2690:15	2690:15	10	<
LEAF_NODE	2690:15	2690:15	11	<
FIELD	2690:16	2690:16	10	count
LEAF_NODE	2690:16	2690:16	11	count
LEAF_NODE	2690:21	2690:21	8	;
FOR_EXPR	2690:23	2690:23	8	n ++
EXPR	2690:23	2690:23	9	n ++
FIELD	2690:23	2690:24	10	n ++
LEAF_NODE	2690:23	2690:23	11	n
LEAF_NODE	2690:24	2690:24	11	++
LEAF_NODE	2690:26	2690:26	8	)
STATEMENTS	2691:4	2695:4	8	
LEAF_NODE	2691:4	2691:4	9	{
STATEMENTS	2692:5	2694:5	9	
SELECTION	2692:5	2693:6	10	
KEYWORD	2692:5	2692:5	11	if
LEAF_NODE	2692:5	2692:5	12	if
LEAF_NODE	2692:8	2692:8	11	(
CONDITION	2692:9	2692:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2692:9	2692:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2692:9	2692:14	13	tif -> tif_flags
LEAF_NODE	2692:9	2692:9	14	tif
LEAF_NODE	2692:12	2692:12	14	->
LEAF_NODE	2692:14	2692:14	14	tif_flags
LEAF_NODE	2692:23	2692:23	13	&
FIELD	2692:24	2692:24	13	TIFF_SWAB
LEAF_NODE	2692:24	2692:24	14	TIFF_SWAB
LEAF_NODE	2692:33	2692:33	11	)
STATEMENTS	2693:6	2693:6	11	
EXPR_STATEMENT	2693:6	2693:32	12	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	2693:6	2693:6	13	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	2693:6	2693:31	14	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	2693:6	2693:6	15	TIFFSwabLong8
LEAF_NODE	2693:6	2693:6	16	TIFFSwabLong8
LEAF_NODE	2693:19	2693:19	15	(
ARGUMENT	2693:20	2693:29	15	( uint64 * ) ma
LEAF_NODE	2693:20	2693:20	16	(
TYPE_NAME	2693:21	2693:21	16	uint64
LEAF_NODE	2693:21	2693:21	17	uint64
LEAF_NODE	2693:27	2693:27	16	*
LEAF_NODE	2693:28	2693:28	16	)
FIELD	2693:29	2693:29	16	ma
LEAF_NODE	2693:29	2693:29	17	ma
LEAF_NODE	2693:31	2693:31	15	)
LEAF_NODE	2693:32	2693:32	13	;
EXPR_STATEMENT	2694:5	2694:26	10	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2694:5	2694:5	11	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2694:5	2694:11	12	* mb ++ = ( double ) ( * ma ++ )
LVAL	2694:5	2694:5	13	* mb ++
UNARY_EXPR	2694:5	2694:6	14	* mb ++
UNARY_OPERATOR	2694:5	2694:5	15	*
LEAF_NODE	2694:5	2694:5	16	*
FIELD	2694:6	2694:8	15	mb ++
LEAF_NODE	2694:6	2694:6	16	mb
LEAF_NODE	2694:8	2694:8	16	++
ASSIGN_OP	2694:10	2694:10	13	=
LEAF_NODE	2694:10	2694:10	14	=
RVAL	2694:11	2694:25	13	( double ) ( * ma ++ )
LEAF_NODE	2694:11	2694:11	14	(
TYPE_NAME	2694:12	2694:12	14	double
LEAF_NODE	2694:12	2694:12	15	double
LEAF_NODE	2694:18	2694:18	14	)
LEAF_NODE	2694:19	2694:19	14	(
UNARY_EXPR	2694:20	2694:21	14	* ma ++
UNARY_OPERATOR	2694:20	2694:20	15	*
LEAF_NODE	2694:20	2694:20	16	*
FIELD	2694:21	2694:23	15	ma ++
LEAF_NODE	2694:21	2694:21	16	ma
LEAF_NODE	2694:23	2694:23	16	++
LEAF_NODE	2694:25	2694:25	14	)
LEAF_NODE	2694:26	2694:26	11	;
LEAF_NODE	2695:4	2695:4	9	}
LEAF_NODE	2696:3	2696:3	6	}
JUMP_STATEMENT	2697:3	2697:8	6	break DESTINATION ;
KEYWORD	2697:3	2697:3	7	break
LEAF_NODE	2697:3	2697:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2697:8	2697:8	7	;
LABEL	2698:2	2698:20	6	case TIFF_RATIONAL :
LEAF_NODE	2698:2	2698:2	7	case
LEAF_NODE	2698:7	2698:7	7	TIFF_RATIONAL
LEAF_NODE	2698:20	2698:20	7	:
LEAF_NODE	2699:3	2699:3	6	{
STATEMENTS	2700:4	2707:4	6	
SIMPLE_DECL	2700:4	2700:14	7	uint32 * ma ;
VAR_DECL	2700:4	2700:12	8	uint32 * ma
TYPE	2700:4	2700:10	9	uint32 *
TYPE_NAME	2700:4	2700:4	10	uint32
LEAF_NODE	2700:4	2700:4	11	uint32
POINTER	2700:10	2700:10	10	*
LEAF_NODE	2700:10	2700:10	11	*
NAME	2700:12	2700:12	9	ma
LEAF_NODE	2700:12	2700:12	10	ma
LEAF_NODE	2700:14	2700:14	8	;
SIMPLE_DECL	2701:4	2701:14	7	uint32 maa ;
VAR_DECL	2701:4	2701:11	8	uint32 maa
TYPE	2701:4	2701:4	9	uint32
TYPE_NAME	2701:4	2701:4	10	uint32
LEAF_NODE	2701:4	2701:4	11	uint32
NAME	2701:11	2701:11	9	maa
LEAF_NODE	2701:11	2701:11	10	maa
LEAF_NODE	2701:14	2701:14	8	;
SIMPLE_DECL	2702:4	2702:14	7	uint32 mab ;
VAR_DECL	2702:4	2702:11	8	uint32 mab
TYPE	2702:4	2702:4	9	uint32
TYPE_NAME	2702:4	2702:4	10	uint32
LEAF_NODE	2702:4	2702:4	11	uint32
NAME	2702:11	2702:11	9	mab
LEAF_NODE	2702:11	2702:11	10	mab
LEAF_NODE	2702:14	2702:14	8	;
SIMPLE_DECL	2703:4	2703:14	7	double * mb ;
VAR_DECL	2703:4	2703:12	8	double * mb
TYPE	2703:4	2703:10	9	double *
TYPE_NAME	2703:4	2703:4	10	double
LEAF_NODE	2703:4	2703:4	11	double
POINTER	2703:10	2703:10	10	*
LEAF_NODE	2703:10	2703:10	11	*
NAME	2703:12	2703:12	9	mb
LEAF_NODE	2703:12	2703:12	10	mb
LEAF_NODE	2703:14	2703:14	8	;
SIMPLE_DECL	2704:4	2704:12	7	uint32 n ;
VAR_DECL	2704:4	2704:11	8	uint32 n
TYPE	2704:4	2704:4	9	uint32
TYPE_NAME	2704:4	2704:4	10	uint32
LEAF_NODE	2704:4	2704:4	11	uint32
NAME	2704:11	2704:11	9	n
LEAF_NODE	2704:11	2704:11	10	n
LEAF_NODE	2704:12	2704:12	8	;
EXPR_STATEMENT	2705:4	2705:24	7	ma = ( uint32 * ) origdata ;
EXPR	2705:4	2705:4	8	ma = ( uint32 * ) origdata
ASSIGN	2705:4	2705:7	9	ma = ( uint32 * ) origdata
LVAL	2705:4	2705:4	10	ma
FIELD	2705:4	2705:4	11	ma
LEAF_NODE	2705:4	2705:4	12	ma
ASSIGN_OP	2705:6	2705:6	10	=
LEAF_NODE	2705:6	2705:6	11	=
RVAL	2705:7	2705:16	10	( uint32 * ) origdata
LEAF_NODE	2705:7	2705:7	11	(
TYPE_NAME	2705:8	2705:8	11	uint32
LEAF_NODE	2705:8	2705:8	12	uint32
LEAF_NODE	2705:14	2705:14	11	*
LEAF_NODE	2705:15	2705:15	11	)
FIELD	2705:16	2705:16	11	origdata
LEAF_NODE	2705:16	2705:16	12	origdata
LEAF_NODE	2705:24	2705:24	8	;
EXPR_STATEMENT	2706:4	2706:11	7	mb = data ;
EXPR	2706:4	2706:4	8	mb = data
ASSIGN	2706:4	2706:7	9	mb = data
LVAL	2706:4	2706:4	10	mb
FIELD	2706:4	2706:4	11	mb
LEAF_NODE	2706:4	2706:4	12	mb
ASSIGN_OP	2706:6	2706:6	10	=
LEAF_NODE	2706:6	2706:6	11	=
RVAL	2706:7	2706:7	10	data
FIELD	2706:7	2706:7	11	data
LEAF_NODE	2706:7	2706:7	12	data
LEAF_NODE	2706:11	2706:11	8	;
ITERATION	2707:4	2708:4	7	
KEYWORD	2707:4	2707:4	8	for
LEAF_NODE	2707:4	2707:4	9	for
LEAF_NODE	2707:8	2707:8	8	(
FOR_INIT	2707:9	2707:12	8	n = 0 ;
EXPR	2707:9	2707:9	9	n = 0
ASSIGN	2707:9	2707:11	10	n = 0
LVAL	2707:9	2707:9	11	n
FIELD	2707:9	2707:9	12	n
LEAF_NODE	2707:9	2707:9	13	n
ASSIGN_OP	2707:10	2707:10	11	=
LEAF_NODE	2707:10	2707:10	12	=
RVAL	2707:11	2707:11	11	0
FIELD	2707:11	2707:11	12	0
LEAF_NODE	2707:11	2707:11	13	0
LEAF_NODE	2707:12	2707:12	9	;
CONDITION	2707:14	2707:14	8	n < count
EXPR	2707:14	2707:16	9	n < count
FIELD	2707:14	2707:14	10	n
LEAF_NODE	2707:14	2707:14	11	n
REL_OPERATOR	2707:15	2707:15	10	<
LEAF_NODE	2707:15	2707:15	11	<
FIELD	2707:16	2707:16	10	count
LEAF_NODE	2707:16	2707:16	11	count
LEAF_NODE	2707:21	2707:21	8	;
FOR_EXPR	2707:23	2707:23	8	n ++
EXPR	2707:23	2707:23	9	n ++
FIELD	2707:23	2707:24	10	n ++
LEAF_NODE	2707:23	2707:23	11	n
LEAF_NODE	2707:24	2707:24	11	++
LEAF_NODE	2707:26	2707:26	8	)
STATEMENTS	2708:4	2719:4	8	
LEAF_NODE	2708:4	2708:4	9	{
STATEMENTS	2709:5	2717:5	9	
SELECTION	2709:5	2710:6	10	
KEYWORD	2709:5	2709:5	11	if
LEAF_NODE	2709:5	2709:5	12	if
LEAF_NODE	2709:8	2709:8	11	(
CONDITION	2709:9	2709:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2709:9	2709:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2709:9	2709:14	13	tif -> tif_flags
LEAF_NODE	2709:9	2709:9	14	tif
LEAF_NODE	2709:12	2709:12	14	->
LEAF_NODE	2709:14	2709:14	14	tif_flags
LEAF_NODE	2709:23	2709:23	13	&
FIELD	2709:24	2709:24	13	TIFF_SWAB
LEAF_NODE	2709:24	2709:24	14	TIFF_SWAB
LEAF_NODE	2709:33	2709:33	11	)
STATEMENTS	2710:6	2710:6	11	
EXPR_STATEMENT	2710:6	2710:22	12	TIFFSwabLong ( ma ) ;
EXPR	2710:6	2710:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2710:6	2710:21	14	TIFFSwabLong ( ma )
CALLEE	2710:6	2710:6	15	TIFFSwabLong
LEAF_NODE	2710:6	2710:6	16	TIFFSwabLong
LEAF_NODE	2710:18	2710:18	15	(
ARGUMENT	2710:19	2710:19	15	ma
FIELD	2710:19	2710:19	16	ma
LEAF_NODE	2710:19	2710:19	17	ma
LEAF_NODE	2710:21	2710:21	15	)
LEAF_NODE	2710:22	2710:22	13	;
EXPR_STATEMENT	2711:5	2711:14	10	maa = * ma ++ ;
EXPR	2711:5	2711:5	11	maa = * ma ++
ASSIGN	2711:5	2711:9	12	maa = * ma ++
LVAL	2711:5	2711:5	13	maa
FIELD	2711:5	2711:5	14	maa
LEAF_NODE	2711:5	2711:5	15	maa
ASSIGN_OP	2711:8	2711:8	13	=
LEAF_NODE	2711:8	2711:8	14	=
RVAL	2711:9	2711:9	13	* ma ++
UNARY_EXPR	2711:9	2711:10	14	* ma ++
UNARY_OPERATOR	2711:9	2711:9	15	*
LEAF_NODE	2711:9	2711:9	16	*
FIELD	2711:10	2711:12	15	ma ++
LEAF_NODE	2711:10	2711:10	16	ma
LEAF_NODE	2711:12	2711:12	16	++
LEAF_NODE	2711:14	2711:14	11	;
SELECTION	2712:5	2713:6	10	
KEYWORD	2712:5	2712:5	11	if
LEAF_NODE	2712:5	2712:5	12	if
LEAF_NODE	2712:8	2712:8	11	(
CONDITION	2712:9	2712:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2712:9	2712:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2712:9	2712:14	13	tif -> tif_flags
LEAF_NODE	2712:9	2712:9	14	tif
LEAF_NODE	2712:12	2712:12	14	->
LEAF_NODE	2712:14	2712:14	14	tif_flags
LEAF_NODE	2712:23	2712:23	13	&
FIELD	2712:24	2712:24	13	TIFF_SWAB
LEAF_NODE	2712:24	2712:24	14	TIFF_SWAB
LEAF_NODE	2712:33	2712:33	11	)
STATEMENTS	2713:6	2713:6	11	
EXPR_STATEMENT	2713:6	2713:22	12	TIFFSwabLong ( ma ) ;
EXPR	2713:6	2713:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2713:6	2713:21	14	TIFFSwabLong ( ma )
CALLEE	2713:6	2713:6	15	TIFFSwabLong
LEAF_NODE	2713:6	2713:6	16	TIFFSwabLong
LEAF_NODE	2713:18	2713:18	15	(
ARGUMENT	2713:19	2713:19	15	ma
FIELD	2713:19	2713:19	16	ma
LEAF_NODE	2713:19	2713:19	17	ma
LEAF_NODE	2713:21	2713:21	15	)
LEAF_NODE	2713:22	2713:22	13	;
EXPR_STATEMENT	2714:5	2714:14	10	mab = * ma ++ ;
EXPR	2714:5	2714:5	11	mab = * ma ++
ASSIGN	2714:5	2714:9	12	mab = * ma ++
LVAL	2714:5	2714:5	13	mab
FIELD	2714:5	2714:5	14	mab
LEAF_NODE	2714:5	2714:5	15	mab
ASSIGN_OP	2714:8	2714:8	13	=
LEAF_NODE	2714:8	2714:8	14	=
RVAL	2714:9	2714:9	13	* ma ++
UNARY_EXPR	2714:9	2714:10	14	* ma ++
UNARY_OPERATOR	2714:9	2714:9	15	*
LEAF_NODE	2714:9	2714:9	16	*
FIELD	2714:10	2714:12	15	ma ++
LEAF_NODE	2714:10	2714:10	16	ma
LEAF_NODE	2714:12	2714:12	16	++
LEAF_NODE	2714:14	2714:14	11	;
SELECTION	2715:5	2716:6	10	
KEYWORD	2715:5	2715:5	11	if
LEAF_NODE	2715:5	2715:5	12	if
LEAF_NODE	2715:8	2715:8	11	(
CONDITION	2715:9	2715:9	11	mab == 0
EXPR	2715:9	2715:14	12	mab == 0
FIELD	2715:9	2715:9	13	mab
LEAF_NODE	2715:9	2715:9	14	mab
EQ_OPERATOR	2715:12	2715:12	13	==
LEAF_NODE	2715:12	2715:12	14	==
FIELD	2715:14	2715:14	13	0
LEAF_NODE	2715:14	2715:14	14	0
LEAF_NODE	2715:15	2715:15	11	)
STATEMENTS	2716:6	2716:6	11	
EXPR_STATEMENT	2716:6	2716:15	12	* mb ++ = 0.0 ;
EXPR	2716:6	2716:6	13	* mb ++ = 0.0
ASSIGN	2716:6	2716:12	14	* mb ++ = 0.0
LVAL	2716:6	2716:6	15	* mb ++
UNARY_EXPR	2716:6	2716:7	16	* mb ++
UNARY_OPERATOR	2716:6	2716:6	17	*
LEAF_NODE	2716:6	2716:6	18	*
FIELD	2716:7	2716:9	17	mb ++
LEAF_NODE	2716:7	2716:7	18	mb
LEAF_NODE	2716:9	2716:9	18	++
ASSIGN_OP	2716:11	2716:11	15	=
LEAF_NODE	2716:11	2716:11	16	=
RVAL	2716:12	2716:12	15	0.0
FIELD	2716:12	2716:12	16	0.0
LEAF_NODE	2716:12	2716:12	17	0.0
LEAF_NODE	2716:15	2716:15	13	;
SELECTION	2717:5	2718:6	10	
KEYWORD	2717:5	2717:5	11	else
LEAF_NODE	2717:5	2717:5	12	else
STATEMENTS	2718:6	2718:6	11	
EXPR_STATEMENT	2718:6	2718:35	12	* mb ++ = ( double ) maa / ( double ) mab ;
EXPR	2718:6	2718:6	13	* mb ++ = ( double ) maa / ( double ) mab
ASSIGN	2718:6	2718:12	14	* mb ++ = ( double ) maa / ( double ) mab
LVAL	2718:6	2718:6	15	* mb ++
UNARY_EXPR	2718:6	2718:7	16	* mb ++
UNARY_OPERATOR	2718:6	2718:6	17	*
LEAF_NODE	2718:6	2718:6	18	*
FIELD	2718:7	2718:9	17	mb ++
LEAF_NODE	2718:7	2718:7	18	mb
LEAF_NODE	2718:9	2718:9	18	++
ASSIGN_OP	2718:11	2718:11	15	=
LEAF_NODE	2718:11	2718:11	16	=
RVAL	2718:12	2718:32	15	( double ) maa / ( double ) mab
LEAF_NODE	2718:12	2718:12	16	(
TYPE_NAME	2718:13	2718:13	16	double
LEAF_NODE	2718:13	2718:13	17	double
LEAF_NODE	2718:19	2718:19	16	)
FIELD	2718:20	2718:20	16	maa
LEAF_NODE	2718:20	2718:20	17	maa
LEAF_NODE	2718:23	2718:23	16	/
LEAF_NODE	2718:24	2718:24	16	(
TYPE_NAME	2718:25	2718:25	16	double
LEAF_NODE	2718:25	2718:25	17	double
LEAF_NODE	2718:31	2718:31	16	)
FIELD	2718:32	2718:32	16	mab
LEAF_NODE	2718:32	2718:32	17	mab
LEAF_NODE	2718:35	2718:35	13	;
LEAF_NODE	2719:4	2719:4	9	}
LEAF_NODE	2720:3	2720:3	6	}
JUMP_STATEMENT	2721:3	2721:8	6	break DESTINATION ;
KEYWORD	2721:3	2721:3	7	break
LEAF_NODE	2721:3	2721:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2721:8	2721:8	7	;
LABEL	2722:2	2722:21	6	case TIFF_SRATIONAL :
LEAF_NODE	2722:2	2722:2	7	case
LEAF_NODE	2722:7	2722:7	7	TIFF_SRATIONAL
LEAF_NODE	2722:21	2722:21	7	:
LEAF_NODE	2723:3	2723:3	6	{
STATEMENTS	2724:4	2731:4	6	
SIMPLE_DECL	2724:4	2724:14	7	uint32 * ma ;
VAR_DECL	2724:4	2724:12	8	uint32 * ma
TYPE	2724:4	2724:10	9	uint32 *
TYPE_NAME	2724:4	2724:4	10	uint32
LEAF_NODE	2724:4	2724:4	11	uint32
POINTER	2724:10	2724:10	10	*
LEAF_NODE	2724:10	2724:10	11	*
NAME	2724:12	2724:12	9	ma
LEAF_NODE	2724:12	2724:12	10	ma
LEAF_NODE	2724:14	2724:14	8	;
SIMPLE_DECL	2725:4	2725:13	7	int32 maa ;
VAR_DECL	2725:4	2725:10	8	int32 maa
TYPE	2725:4	2725:4	9	int32
TYPE_NAME	2725:4	2725:4	10	int32
LEAF_NODE	2725:4	2725:4	11	int32
NAME	2725:10	2725:10	9	maa
LEAF_NODE	2725:10	2725:10	10	maa
LEAF_NODE	2725:13	2725:13	8	;
SIMPLE_DECL	2726:4	2726:14	7	uint32 mab ;
VAR_DECL	2726:4	2726:11	8	uint32 mab
TYPE	2726:4	2726:4	9	uint32
TYPE_NAME	2726:4	2726:4	10	uint32
LEAF_NODE	2726:4	2726:4	11	uint32
NAME	2726:11	2726:11	9	mab
LEAF_NODE	2726:11	2726:11	10	mab
LEAF_NODE	2726:14	2726:14	8	;
SIMPLE_DECL	2727:4	2727:14	7	double * mb ;
VAR_DECL	2727:4	2727:12	8	double * mb
TYPE	2727:4	2727:10	9	double *
TYPE_NAME	2727:4	2727:4	10	double
LEAF_NODE	2727:4	2727:4	11	double
POINTER	2727:10	2727:10	10	*
LEAF_NODE	2727:10	2727:10	11	*
NAME	2727:12	2727:12	9	mb
LEAF_NODE	2727:12	2727:12	10	mb
LEAF_NODE	2727:14	2727:14	8	;
SIMPLE_DECL	2728:4	2728:12	7	uint32 n ;
VAR_DECL	2728:4	2728:11	8	uint32 n
TYPE	2728:4	2728:4	9	uint32
TYPE_NAME	2728:4	2728:4	10	uint32
LEAF_NODE	2728:4	2728:4	11	uint32
NAME	2728:11	2728:11	9	n
LEAF_NODE	2728:11	2728:11	10	n
LEAF_NODE	2728:12	2728:12	8	;
EXPR_STATEMENT	2729:4	2729:24	7	ma = ( uint32 * ) origdata ;
EXPR	2729:4	2729:4	8	ma = ( uint32 * ) origdata
ASSIGN	2729:4	2729:7	9	ma = ( uint32 * ) origdata
LVAL	2729:4	2729:4	10	ma
FIELD	2729:4	2729:4	11	ma
LEAF_NODE	2729:4	2729:4	12	ma
ASSIGN_OP	2729:6	2729:6	10	=
LEAF_NODE	2729:6	2729:6	11	=
RVAL	2729:7	2729:16	10	( uint32 * ) origdata
LEAF_NODE	2729:7	2729:7	11	(
TYPE_NAME	2729:8	2729:8	11	uint32
LEAF_NODE	2729:8	2729:8	12	uint32
LEAF_NODE	2729:14	2729:14	11	*
LEAF_NODE	2729:15	2729:15	11	)
FIELD	2729:16	2729:16	11	origdata
LEAF_NODE	2729:16	2729:16	12	origdata
LEAF_NODE	2729:24	2729:24	8	;
EXPR_STATEMENT	2730:4	2730:11	7	mb = data ;
EXPR	2730:4	2730:4	8	mb = data
ASSIGN	2730:4	2730:7	9	mb = data
LVAL	2730:4	2730:4	10	mb
FIELD	2730:4	2730:4	11	mb
LEAF_NODE	2730:4	2730:4	12	mb
ASSIGN_OP	2730:6	2730:6	10	=
LEAF_NODE	2730:6	2730:6	11	=
RVAL	2730:7	2730:7	10	data
FIELD	2730:7	2730:7	11	data
LEAF_NODE	2730:7	2730:7	12	data
LEAF_NODE	2730:11	2730:11	8	;
ITERATION	2731:4	2732:4	7	
KEYWORD	2731:4	2731:4	8	for
LEAF_NODE	2731:4	2731:4	9	for
LEAF_NODE	2731:8	2731:8	8	(
FOR_INIT	2731:9	2731:12	8	n = 0 ;
EXPR	2731:9	2731:9	9	n = 0
ASSIGN	2731:9	2731:11	10	n = 0
LVAL	2731:9	2731:9	11	n
FIELD	2731:9	2731:9	12	n
LEAF_NODE	2731:9	2731:9	13	n
ASSIGN_OP	2731:10	2731:10	11	=
LEAF_NODE	2731:10	2731:10	12	=
RVAL	2731:11	2731:11	11	0
FIELD	2731:11	2731:11	12	0
LEAF_NODE	2731:11	2731:11	13	0
LEAF_NODE	2731:12	2731:12	9	;
CONDITION	2731:14	2731:14	8	n < count
EXPR	2731:14	2731:16	9	n < count
FIELD	2731:14	2731:14	10	n
LEAF_NODE	2731:14	2731:14	11	n
REL_OPERATOR	2731:15	2731:15	10	<
LEAF_NODE	2731:15	2731:15	11	<
FIELD	2731:16	2731:16	10	count
LEAF_NODE	2731:16	2731:16	11	count
LEAF_NODE	2731:21	2731:21	8	;
FOR_EXPR	2731:23	2731:23	8	n ++
EXPR	2731:23	2731:23	9	n ++
FIELD	2731:23	2731:24	10	n ++
LEAF_NODE	2731:23	2731:23	11	n
LEAF_NODE	2731:24	2731:24	11	++
LEAF_NODE	2731:26	2731:26	8	)
STATEMENTS	2732:4	2744:4	8	
LEAF_NODE	2732:4	2732:4	9	{
STATEMENTS	2733:5	2742:5	9	
SELECTION	2733:5	2734:6	10	
KEYWORD	2733:5	2733:5	11	if
LEAF_NODE	2733:5	2733:5	12	if
LEAF_NODE	2733:8	2733:8	11	(
CONDITION	2733:9	2733:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2733:9	2733:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2733:9	2733:14	13	tif -> tif_flags
LEAF_NODE	2733:9	2733:9	14	tif
LEAF_NODE	2733:12	2733:12	14	->
LEAF_NODE	2733:14	2733:14	14	tif_flags
LEAF_NODE	2733:23	2733:23	13	&
FIELD	2733:24	2733:24	13	TIFF_SWAB
LEAF_NODE	2733:24	2733:24	14	TIFF_SWAB
LEAF_NODE	2733:33	2733:33	11	)
STATEMENTS	2734:6	2734:6	11	
EXPR_STATEMENT	2734:6	2734:22	12	TIFFSwabLong ( ma ) ;
EXPR	2734:6	2734:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2734:6	2734:21	14	TIFFSwabLong ( ma )
CALLEE	2734:6	2734:6	15	TIFFSwabLong
LEAF_NODE	2734:6	2734:6	16	TIFFSwabLong
LEAF_NODE	2734:18	2734:18	15	(
ARGUMENT	2734:19	2734:19	15	ma
FIELD	2734:19	2734:19	16	ma
LEAF_NODE	2734:19	2734:19	17	ma
LEAF_NODE	2734:21	2734:21	15	)
LEAF_NODE	2734:22	2734:22	13	;
LEAF_NODE	2735:5	2735:5	10	maa
LEAF_NODE	2735:8	2735:8	10	=
LEAF_NODE	2735:9	2735:9	10	*
EXPR_STATEMENT	2735:10	2735:20	10	( int32 * ) ma ;
EXPR	2735:10	2735:18	11	( int32 * ) ma
LEAF_NODE	2735:10	2735:10	12	(
TYPE_NAME	2735:11	2735:11	12	int32
LEAF_NODE	2735:11	2735:11	13	int32
LEAF_NODE	2735:16	2735:16	12	*
LEAF_NODE	2735:17	2735:17	12	)
FIELD	2735:18	2735:18	12	ma
LEAF_NODE	2735:18	2735:18	13	ma
LEAF_NODE	2735:20	2735:20	11	;
EXPR_STATEMENT	2736:5	2736:9	10	ma ++ ;
EXPR	2736:5	2736:5	11	ma ++
FIELD	2736:5	2736:7	12	ma ++
LEAF_NODE	2736:5	2736:5	13	ma
LEAF_NODE	2736:7	2736:7	13	++
LEAF_NODE	2736:9	2736:9	11	;
SELECTION	2737:5	2738:6	10	
KEYWORD	2737:5	2737:5	11	if
LEAF_NODE	2737:5	2737:5	12	if
LEAF_NODE	2737:8	2737:8	11	(
CONDITION	2737:9	2737:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2737:9	2737:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2737:9	2737:14	13	tif -> tif_flags
LEAF_NODE	2737:9	2737:9	14	tif
LEAF_NODE	2737:12	2737:12	14	->
LEAF_NODE	2737:14	2737:14	14	tif_flags
LEAF_NODE	2737:23	2737:23	13	&
FIELD	2737:24	2737:24	13	TIFF_SWAB
LEAF_NODE	2737:24	2737:24	14	TIFF_SWAB
LEAF_NODE	2737:33	2737:33	11	)
STATEMENTS	2738:6	2738:6	11	
EXPR_STATEMENT	2738:6	2738:22	12	TIFFSwabLong ( ma ) ;
EXPR	2738:6	2738:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2738:6	2738:21	14	TIFFSwabLong ( ma )
CALLEE	2738:6	2738:6	15	TIFFSwabLong
LEAF_NODE	2738:6	2738:6	16	TIFFSwabLong
LEAF_NODE	2738:18	2738:18	15	(
ARGUMENT	2738:19	2738:19	15	ma
FIELD	2738:19	2738:19	16	ma
LEAF_NODE	2738:19	2738:19	17	ma
LEAF_NODE	2738:21	2738:21	15	)
LEAF_NODE	2738:22	2738:22	13	;
EXPR_STATEMENT	2739:5	2739:14	10	mab = * ma ++ ;
EXPR	2739:5	2739:5	11	mab = * ma ++
ASSIGN	2739:5	2739:9	12	mab = * ma ++
LVAL	2739:5	2739:5	13	mab
FIELD	2739:5	2739:5	14	mab
LEAF_NODE	2739:5	2739:5	15	mab
ASSIGN_OP	2739:8	2739:8	13	=
LEAF_NODE	2739:8	2739:8	14	=
RVAL	2739:9	2739:9	13	* ma ++
UNARY_EXPR	2739:9	2739:10	14	* ma ++
UNARY_OPERATOR	2739:9	2739:9	15	*
LEAF_NODE	2739:9	2739:9	16	*
FIELD	2739:10	2739:12	15	ma ++
LEAF_NODE	2739:10	2739:10	16	ma
LEAF_NODE	2739:12	2739:12	16	++
LEAF_NODE	2739:14	2739:14	11	;
SELECTION	2740:5	2741:6	10	
KEYWORD	2740:5	2740:5	11	if
LEAF_NODE	2740:5	2740:5	12	if
LEAF_NODE	2740:8	2740:8	11	(
CONDITION	2740:9	2740:9	11	mab == 0
EXPR	2740:9	2740:14	12	mab == 0
FIELD	2740:9	2740:9	13	mab
LEAF_NODE	2740:9	2740:9	14	mab
EQ_OPERATOR	2740:12	2740:12	13	==
LEAF_NODE	2740:12	2740:12	14	==
FIELD	2740:14	2740:14	13	0
LEAF_NODE	2740:14	2740:14	14	0
LEAF_NODE	2740:15	2740:15	11	)
STATEMENTS	2741:6	2741:6	11	
EXPR_STATEMENT	2741:6	2741:15	12	* mb ++ = 0.0 ;
EXPR	2741:6	2741:6	13	* mb ++ = 0.0
ASSIGN	2741:6	2741:12	14	* mb ++ = 0.0
LVAL	2741:6	2741:6	15	* mb ++
UNARY_EXPR	2741:6	2741:7	16	* mb ++
UNARY_OPERATOR	2741:6	2741:6	17	*
LEAF_NODE	2741:6	2741:6	18	*
FIELD	2741:7	2741:9	17	mb ++
LEAF_NODE	2741:7	2741:7	18	mb
LEAF_NODE	2741:9	2741:9	18	++
ASSIGN_OP	2741:11	2741:11	15	=
LEAF_NODE	2741:11	2741:11	16	=
RVAL	2741:12	2741:12	15	0.0
FIELD	2741:12	2741:12	16	0.0
LEAF_NODE	2741:12	2741:12	17	0.0
LEAF_NODE	2741:15	2741:15	13	;
SELECTION	2742:5	2743:6	10	
KEYWORD	2742:5	2742:5	11	else
LEAF_NODE	2742:5	2742:5	12	else
STATEMENTS	2743:6	2743:6	11	
EXPR_STATEMENT	2743:6	2743:35	12	* mb ++ = ( double ) maa / ( double ) mab ;
EXPR	2743:6	2743:6	13	* mb ++ = ( double ) maa / ( double ) mab
ASSIGN	2743:6	2743:12	14	* mb ++ = ( double ) maa / ( double ) mab
LVAL	2743:6	2743:6	15	* mb ++
UNARY_EXPR	2743:6	2743:7	16	* mb ++
UNARY_OPERATOR	2743:6	2743:6	17	*
LEAF_NODE	2743:6	2743:6	18	*
FIELD	2743:7	2743:9	17	mb ++
LEAF_NODE	2743:7	2743:7	18	mb
LEAF_NODE	2743:9	2743:9	18	++
ASSIGN_OP	2743:11	2743:11	15	=
LEAF_NODE	2743:11	2743:11	16	=
RVAL	2743:12	2743:32	15	( double ) maa / ( double ) mab
LEAF_NODE	2743:12	2743:12	16	(
TYPE_NAME	2743:13	2743:13	16	double
LEAF_NODE	2743:13	2743:13	17	double
LEAF_NODE	2743:19	2743:19	16	)
FIELD	2743:20	2743:20	16	maa
LEAF_NODE	2743:20	2743:20	17	maa
LEAF_NODE	2743:23	2743:23	16	/
LEAF_NODE	2743:24	2743:24	16	(
TYPE_NAME	2743:25	2743:25	16	double
LEAF_NODE	2743:25	2743:25	17	double
LEAF_NODE	2743:31	2743:31	16	)
FIELD	2743:32	2743:32	16	mab
LEAF_NODE	2743:32	2743:32	17	mab
LEAF_NODE	2743:35	2743:35	13	;
LEAF_NODE	2744:4	2744:4	9	}
LEAF_NODE	2745:3	2745:3	6	}
JUMP_STATEMENT	2746:3	2746:8	6	break DESTINATION ;
KEYWORD	2746:3	2746:3	7	break
LEAF_NODE	2746:3	2746:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2746:8	2746:8	7	;
LABEL	2747:2	2747:17	6	case TIFF_FLOAT :
LEAF_NODE	2747:2	2747:2	7	case
LEAF_NODE	2747:7	2747:7	7	TIFF_FLOAT
LEAF_NODE	2747:17	2747:17	7	:
LEAF_NODE	2748:3	2748:3	6	{
STATEMENTS	2749:4	2757:4	6	
SIMPLE_DECL	2749:4	2749:13	7	float * ma ;
VAR_DECL	2749:4	2749:11	8	float * ma
TYPE	2749:4	2749:9	9	float *
TYPE_NAME	2749:4	2749:4	10	float
LEAF_NODE	2749:4	2749:4	11	float
POINTER	2749:9	2749:9	10	*
LEAF_NODE	2749:9	2749:9	11	*
NAME	2749:11	2749:11	9	ma
LEAF_NODE	2749:11	2749:11	10	ma
LEAF_NODE	2749:13	2749:13	8	;
SIMPLE_DECL	2750:4	2750:14	7	double * mb ;
VAR_DECL	2750:4	2750:12	8	double * mb
TYPE	2750:4	2750:10	9	double *
TYPE_NAME	2750:4	2750:4	10	double
LEAF_NODE	2750:4	2750:4	11	double
POINTER	2750:10	2750:10	10	*
LEAF_NODE	2750:10	2750:10	11	*
NAME	2750:12	2750:12	9	mb
LEAF_NODE	2750:12	2750:12	10	mb
LEAF_NODE	2750:14	2750:14	8	;
SIMPLE_DECL	2751:4	2751:12	7	uint32 n ;
VAR_DECL	2751:4	2751:11	8	uint32 n
TYPE	2751:4	2751:4	9	uint32
TYPE_NAME	2751:4	2751:4	10	uint32
LEAF_NODE	2751:4	2751:4	11	uint32
NAME	2751:11	2751:11	9	n
LEAF_NODE	2751:11	2751:11	10	n
LEAF_NODE	2751:12	2751:12	8	;
SELECTION	2752:4	2753:5	7	
KEYWORD	2752:4	2752:4	8	if
LEAF_NODE	2752:4	2752:4	9	if
LEAF_NODE	2752:7	2752:7	8	(
CONDITION	2752:8	2752:8	8	tif -> tif_flags & TIFF_SWAB
EXPR	2752:8	2752:23	9	tif -> tif_flags & TIFF_SWAB
FIELD	2752:8	2752:13	10	tif -> tif_flags
LEAF_NODE	2752:8	2752:8	11	tif
LEAF_NODE	2752:11	2752:11	11	->
LEAF_NODE	2752:13	2752:13	11	tif_flags
LEAF_NODE	2752:22	2752:22	10	&
FIELD	2752:23	2752:23	10	TIFF_SWAB
LEAF_NODE	2752:23	2752:23	11	TIFF_SWAB
LEAF_NODE	2752:32	2752:32	8	)
STATEMENTS	2753:5	2753:5	8	
EXPR_STATEMENT	2753:5	2753:49	9	TIFFSwabArrayOfLong ( ( uint32 * ) origdata , count ) ;
EXPR	2753:5	2753:5	10	TIFFSwabArrayOfLong ( ( uint32 * ) origdata , count )
FUNCTION_CALL	2753:5	2753:48	11	TIFFSwabArrayOfLong ( ( uint32 * ) origdata , count )
CALLEE	2753:5	2753:5	12	TIFFSwabArrayOfLong
LEAF_NODE	2753:5	2753:5	13	TIFFSwabArrayOfLong
LEAF_NODE	2753:24	2753:24	12	(
ARGUMENT	2753:25	2753:34	12	( uint32 * ) origdata
LEAF_NODE	2753:25	2753:25	13	(
TYPE_NAME	2753:26	2753:26	13	uint32
LEAF_NODE	2753:26	2753:26	14	uint32
LEAF_NODE	2753:32	2753:32	13	*
LEAF_NODE	2753:33	2753:33	13	)
FIELD	2753:34	2753:34	13	origdata
LEAF_NODE	2753:34	2753:34	14	origdata
LEAF_NODE	2753:42	2753:42	12	,
ARGUMENT	2753:43	2753:43	12	count
FIELD	2753:43	2753:43	13	count
LEAF_NODE	2753:43	2753:43	14	count
LEAF_NODE	2753:48	2753:48	12	)
LEAF_NODE	2753:49	2753:49	10	;
EXPR_STATEMENT	2754:4	2754:56	7	TIFFCvtIEEEFloatToNative ( tif , count , ( float * ) origdata ) ;
EXPR	2754:4	2754:4	8	TIFFCvtIEEEFloatToNative ( tif , count , ( float * ) origdata )
FUNCTION_CALL	2754:4	2754:55	9	TIFFCvtIEEEFloatToNative ( tif , count , ( float * ) origdata )
CALLEE	2754:4	2754:4	10	TIFFCvtIEEEFloatToNative
LEAF_NODE	2754:4	2754:4	11	TIFFCvtIEEEFloatToNative
LEAF_NODE	2754:28	2754:28	10	(
ARGUMENT	2754:29	2754:29	10	tif
FIELD	2754:29	2754:29	11	tif
LEAF_NODE	2754:29	2754:29	12	tif
LEAF_NODE	2754:32	2754:32	10	,
ARGUMENT	2754:33	2754:33	10	count
FIELD	2754:33	2754:33	11	count
LEAF_NODE	2754:33	2754:33	12	count
LEAF_NODE	2754:38	2754:38	10	,
ARGUMENT	2754:39	2754:47	10	( float * ) origdata
LEAF_NODE	2754:39	2754:39	11	(
TYPE_NAME	2754:40	2754:40	11	float
LEAF_NODE	2754:40	2754:40	12	float
LEAF_NODE	2754:45	2754:45	11	*
LEAF_NODE	2754:46	2754:46	11	)
FIELD	2754:47	2754:47	11	origdata
LEAF_NODE	2754:47	2754:47	12	origdata
LEAF_NODE	2754:55	2754:55	10	)
LEAF_NODE	2754:56	2754:56	8	;
EXPR_STATEMENT	2755:4	2755:23	7	ma = ( float * ) origdata ;
EXPR	2755:4	2755:4	8	ma = ( float * ) origdata
ASSIGN	2755:4	2755:7	9	ma = ( float * ) origdata
LVAL	2755:4	2755:4	10	ma
FIELD	2755:4	2755:4	11	ma
LEAF_NODE	2755:4	2755:4	12	ma
ASSIGN_OP	2755:6	2755:6	10	=
LEAF_NODE	2755:6	2755:6	11	=
RVAL	2755:7	2755:15	10	( float * ) origdata
LEAF_NODE	2755:7	2755:7	11	(
TYPE_NAME	2755:8	2755:8	11	float
LEAF_NODE	2755:8	2755:8	12	float
LEAF_NODE	2755:13	2755:13	11	*
LEAF_NODE	2755:14	2755:14	11	)
FIELD	2755:15	2755:15	11	origdata
LEAF_NODE	2755:15	2755:15	12	origdata
LEAF_NODE	2755:23	2755:23	8	;
EXPR_STATEMENT	2756:4	2756:11	7	mb = data ;
EXPR	2756:4	2756:4	8	mb = data
ASSIGN	2756:4	2756:7	9	mb = data
LVAL	2756:4	2756:4	10	mb
FIELD	2756:4	2756:4	11	mb
LEAF_NODE	2756:4	2756:4	12	mb
ASSIGN_OP	2756:6	2756:6	10	=
LEAF_NODE	2756:6	2756:6	11	=
RVAL	2756:7	2756:7	10	data
FIELD	2756:7	2756:7	11	data
LEAF_NODE	2756:7	2756:7	12	data
LEAF_NODE	2756:11	2756:11	8	;
ITERATION	2757:4	2758:5	7	
KEYWORD	2757:4	2757:4	8	for
LEAF_NODE	2757:4	2757:4	9	for
LEAF_NODE	2757:8	2757:8	8	(
FOR_INIT	2757:9	2757:12	8	n = 0 ;
EXPR	2757:9	2757:9	9	n = 0
ASSIGN	2757:9	2757:11	10	n = 0
LVAL	2757:9	2757:9	11	n
FIELD	2757:9	2757:9	12	n
LEAF_NODE	2757:9	2757:9	13	n
ASSIGN_OP	2757:10	2757:10	11	=
LEAF_NODE	2757:10	2757:10	12	=
RVAL	2757:11	2757:11	11	0
FIELD	2757:11	2757:11	12	0
LEAF_NODE	2757:11	2757:11	13	0
LEAF_NODE	2757:12	2757:12	9	;
CONDITION	2757:14	2757:14	8	n < count
EXPR	2757:14	2757:16	9	n < count
FIELD	2757:14	2757:14	10	n
LEAF_NODE	2757:14	2757:14	11	n
REL_OPERATOR	2757:15	2757:15	10	<
LEAF_NODE	2757:15	2757:15	11	<
FIELD	2757:16	2757:16	10	count
LEAF_NODE	2757:16	2757:16	11	count
LEAF_NODE	2757:21	2757:21	8	;
FOR_EXPR	2757:23	2757:23	8	n ++
EXPR	2757:23	2757:23	9	n ++
FIELD	2757:23	2757:24	10	n ++
LEAF_NODE	2757:23	2757:23	11	n
LEAF_NODE	2757:24	2757:24	11	++
LEAF_NODE	2757:26	2757:26	8	)
STATEMENTS	2758:5	2758:5	8	
EXPR_STATEMENT	2758:5	2758:26	9	* mb ++ = ( double ) ( * ma ++ ) ;
EXPR	2758:5	2758:5	10	* mb ++ = ( double ) ( * ma ++ )
ASSIGN	2758:5	2758:11	11	* mb ++ = ( double ) ( * ma ++ )
LVAL	2758:5	2758:5	12	* mb ++
UNARY_EXPR	2758:5	2758:6	13	* mb ++
UNARY_OPERATOR	2758:5	2758:5	14	*
LEAF_NODE	2758:5	2758:5	15	*
FIELD	2758:6	2758:8	14	mb ++
LEAF_NODE	2758:6	2758:6	15	mb
LEAF_NODE	2758:8	2758:8	15	++
ASSIGN_OP	2758:10	2758:10	12	=
LEAF_NODE	2758:10	2758:10	13	=
RVAL	2758:11	2758:25	12	( double ) ( * ma ++ )
LEAF_NODE	2758:11	2758:11	13	(
TYPE_NAME	2758:12	2758:12	13	double
LEAF_NODE	2758:12	2758:12	14	double
LEAF_NODE	2758:18	2758:18	13	)
LEAF_NODE	2758:19	2758:19	13	(
UNARY_EXPR	2758:20	2758:21	13	* ma ++
UNARY_OPERATOR	2758:20	2758:20	14	*
LEAF_NODE	2758:20	2758:20	15	*
FIELD	2758:21	2758:23	14	ma ++
LEAF_NODE	2758:21	2758:21	15	ma
LEAF_NODE	2758:23	2758:23	15	++
LEAF_NODE	2758:25	2758:25	13	)
LEAF_NODE	2758:26	2758:26	10	;
LEAF_NODE	2759:3	2759:3	6	}
JUMP_STATEMENT	2760:3	2760:8	6	break DESTINATION ;
KEYWORD	2760:3	2760:3	7	break
LEAF_NODE	2760:3	2760:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2760:8	2760:8	7	;
LEAF_NODE	2761:1	2761:1	5	}
EXPR_STATEMENT	2762:1	2762:20	3	_TIFFfree ( origdata ) ;
EXPR	2762:1	2762:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	2762:1	2762:19	5	_TIFFfree ( origdata )
CALLEE	2762:1	2762:1	6	_TIFFfree
LEAF_NODE	2762:1	2762:1	7	_TIFFfree
LEAF_NODE	2762:10	2762:10	6	(
ARGUMENT	2762:11	2762:11	6	origdata
FIELD	2762:11	2762:11	7	origdata
LEAF_NODE	2762:11	2762:11	8	origdata
LEAF_NODE	2762:19	2762:19	6	)
LEAF_NODE	2762:20	2762:20	4	;
EXPR_STATEMENT	2763:1	2763:12	3	* value = data ;
EXPR	2763:1	2763:1	4	* value = data
ASSIGN	2763:1	2763:8	5	* value = data
LVAL	2763:1	2763:1	6	* value
UNARY_EXPR	2763:1	2763:2	7	* value
UNARY_OPERATOR	2763:1	2763:1	8	*
LEAF_NODE	2763:1	2763:1	9	*
FIELD	2763:2	2763:2	8	value
LEAF_NODE	2763:2	2763:2	9	value
ASSIGN_OP	2763:7	2763:7	6	=
LEAF_NODE	2763:7	2763:7	7	=
RVAL	2763:8	2763:8	6	data
FIELD	2763:8	2763:8	7	data
LEAF_NODE	2763:8	2763:8	8	data
LEAF_NODE	2763:12	2763:12	4	;
LEAF_NODE	2764:1	2764:1	3	return
LEAF_NODE	2764:7	2764:7	3	(
LEAF_NODE	2764:8	2764:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2764:29	2764:29	3	)
LEAF_NODE	2764:30	2764:30	3	;
LEAF_NODE	2765:0	2765:0	2	}
FUNCTION_DEF	2767:0	2826:0	1	
RETURN_TYPE	2767:0	2767:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2767:0	2767:0	3	static
TYPE_NAME	2767:7	2767:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2767:7	2767:7	4	enum
LEAF_NODE	2767:12	2767:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2767:32	2767:32	2	TIFFReadDirEntryIfd8Array
LEAF_NODE	2767:32	2767:32	3	TIFFReadDirEntryIfd8Array
PARAMETER_LIST	2767:57	2767:107	2	( TIFF * tif , TIFFDirEntry * direntry , uint64 * * value )
LEAF_NODE	2767:57	2767:57	3	(
PARAMETER_DECL	2767:58	2767:64	3	TIFF * tif
TYPE	2767:58	2767:62	4	TIFF *
TYPE_NAME	2767:58	2767:58	5	TIFF
LEAF_NODE	2767:58	2767:58	6	TIFF
POINTER	2767:62	2767:62	5	*
LEAF_NODE	2767:62	2767:62	6	*
NAME	2767:64	2767:64	4	tif
LEAF_NODE	2767:64	2767:64	5	tif
LEAF_NODE	2767:67	2767:67	3	,
PARAMETER_DECL	2767:69	2767:83	3	TIFFDirEntry * direntry
TYPE	2767:69	2767:81	4	TIFFDirEntry *
TYPE_NAME	2767:69	2767:69	5	TIFFDirEntry
LEAF_NODE	2767:69	2767:69	6	TIFFDirEntry
POINTER	2767:81	2767:81	5	*
LEAF_NODE	2767:81	2767:81	6	*
NAME	2767:83	2767:83	4	direntry
LEAF_NODE	2767:83	2767:83	5	direntry
LEAF_NODE	2767:91	2767:91	3	,
PARAMETER_DECL	2767:93	2767:102	3	uint64 * * value
TYPE	2767:93	2767:99	4	uint64 * *
TYPE_NAME	2767:93	2767:93	5	uint64
LEAF_NODE	2767:93	2767:93	6	uint64
POINTER	2767:99	2767:100	5	* *
LEAF_NODE	2767:99	2767:99	6	*
LEAF_NODE	2767:100	2767:100	6	*
NAME	2767:102	2767:102	4	value
LEAF_NODE	2767:102	2767:102	5	value
LEAF_NODE	2767:107	2767:107	3	)
LEAF_NODE	2768:0	2768:0	2	{
STATEMENTS	2769:1	2825:30	2	
SIMPLE_DECL	2769:1	2769:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	2769:1	2769:26	4	enum TIFFReadDirEntryErr err
TYPE	2769:1	2769:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	2769:1	2769:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	2769:1	2769:1	7	enum
LEAF_NODE	2769:6	2769:6	7	TIFFReadDirEntryErr
NAME	2769:26	2769:26	5	err
LEAF_NODE	2769:26	2769:26	6	err
LEAF_NODE	2769:29	2769:29	4	;
SIMPLE_DECL	2770:1	2770:13	3	uint32 count ;
VAR_DECL	2770:1	2770:8	4	uint32 count
TYPE	2770:1	2770:1	5	uint32
TYPE_NAME	2770:1	2770:1	6	uint32
LEAF_NODE	2770:1	2770:1	7	uint32
NAME	2770:8	2770:8	5	count
LEAF_NODE	2770:8	2770:8	6	count
LEAF_NODE	2770:13	2770:13	4	;
SIMPLE_DECL	2771:1	2771:15	3	void * origdata ;
VAR_DECL	2771:1	2771:7	4	void * origdata
TYPE	2771:1	2771:5	5	void *
TYPE_NAME	2771:1	2771:1	6	void
LEAF_NODE	2771:1	2771:1	7	void
POINTER	2771:5	2771:5	6	*
LEAF_NODE	2771:5	2771:5	7	*
NAME	2771:7	2771:7	5	origdata
LEAF_NODE	2771:7	2771:7	6	origdata
LEAF_NODE	2771:15	2771:15	4	;
SIMPLE_DECL	2772:1	2772:13	3	uint64 * data ;
VAR_DECL	2772:1	2772:9	4	uint64 * data
TYPE	2772:1	2772:7	5	uint64 *
TYPE_NAME	2772:1	2772:1	6	uint64
LEAF_NODE	2772:1	2772:1	7	uint64
POINTER	2772:7	2772:7	6	*
LEAF_NODE	2772:7	2772:7	7	*
NAME	2772:9	2772:9	5	data
LEAF_NODE	2772:9	2772:9	6	data
LEAF_NODE	2772:13	2772:13	4	;
SELECTION	2773:1	2774:1	3	
KEYWORD	2773:1	2773:1	4	switch
LEAF_NODE	2773:1	2773:1	5	switch
LEAF_NODE	2773:8	2773:8	4	(
CONDITION	2773:9	2773:9	4	direntry -> tdir_type
EXPR	2773:9	2773:9	5	direntry -> tdir_type
FIELD	2773:9	2773:19	6	direntry -> tdir_type
LEAF_NODE	2773:9	2773:9	7	direntry
LEAF_NODE	2773:17	2773:17	7	->
LEAF_NODE	2773:19	2773:19	7	tdir_type
LEAF_NODE	2773:28	2773:28	4	)
STATEMENTS	2774:1	2782:1	4	
LEAF_NODE	2774:1	2774:1	5	{
STATEMENTS	2775:2	2781:34	5	
LABEL	2775:2	2775:16	6	case TIFF_LONG :
LEAF_NODE	2775:2	2775:2	7	case
LEAF_NODE	2775:7	2775:7	7	TIFF_LONG
LEAF_NODE	2775:16	2775:16	7	:
LABEL	2776:2	2776:17	6	case TIFF_LONG8 :
LEAF_NODE	2776:2	2776:2	7	case
LEAF_NODE	2776:7	2776:7	7	TIFF_LONG8
LEAF_NODE	2776:17	2776:17	7	:
LABEL	2777:2	2777:15	6	case TIFF_IFD :
LEAF_NODE	2777:2	2777:2	7	case
LEAF_NODE	2777:7	2777:7	7	TIFF_IFD
LEAF_NODE	2777:15	2777:15	7	:
LABEL	2778:2	2778:16	6	case TIFF_IFD8 :
LEAF_NODE	2778:2	2778:2	7	case
LEAF_NODE	2778:7	2778:7	7	TIFF_IFD8
LEAF_NODE	2778:16	2778:16	7	:
JUMP_STATEMENT	2779:3	2779:8	6	break DESTINATION ;
KEYWORD	2779:3	2779:3	7	break
LEAF_NODE	2779:3	2779:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2779:8	2779:8	7	;
LABEL	2780:2	2780:9	6	default :
LEAF_NODE	2780:2	2780:2	7	default
LEAF_NODE	2780:9	2780:9	7	:
LEAF_NODE	2781:3	2781:3	6	return
LEAF_NODE	2781:9	2781:9	6	(
LEAF_NODE	2781:10	2781:10	6	TIFFReadDirEntryErrType
LEAF_NODE	2781:33	2781:33	6	)
LEAF_NODE	2781:34	2781:34	6	;
LEAF_NODE	2782:1	2782:1	5	}
EXPR_STATEMENT	2783:1	2783:59	3	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata ) ;
EXPR	2783:1	2783:1	4	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
ASSIGN	2783:1	2783:5	5	err = TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
LVAL	2783:1	2783:1	6	err
FIELD	2783:1	2783:1	7	err
LEAF_NODE	2783:1	2783:1	8	err
ASSIGN_OP	2783:4	2783:4	6	=
LEAF_NODE	2783:4	2783:4	7	=
RVAL	2783:5	2783:5	6	TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
FUNCTION_CALL	2783:5	2783:58	7	TIFFReadDirEntryArray ( tif , direntry , & count , 8 , & origdata )
CALLEE	2783:5	2783:5	8	TIFFReadDirEntryArray
LEAF_NODE	2783:5	2783:5	9	TIFFReadDirEntryArray
LEAF_NODE	2783:26	2783:26	8	(
ARGUMENT	2783:27	2783:27	8	tif
FIELD	2783:27	2783:27	9	tif
LEAF_NODE	2783:27	2783:27	10	tif
LEAF_NODE	2783:30	2783:30	8	,
ARGUMENT	2783:31	2783:31	8	direntry
FIELD	2783:31	2783:31	9	direntry
LEAF_NODE	2783:31	2783:31	10	direntry
LEAF_NODE	2783:39	2783:39	8	,
ARGUMENT	2783:40	2783:40	8	& count
UNARY_EXPR	2783:40	2783:41	9	& count
UNARY_OPERATOR	2783:40	2783:40	10	&
LEAF_NODE	2783:40	2783:40	11	&
FIELD	2783:41	2783:41	10	count
LEAF_NODE	2783:41	2783:41	11	count
LEAF_NODE	2783:46	2783:46	8	,
ARGUMENT	2783:47	2783:47	8	8
FIELD	2783:47	2783:47	9	8
LEAF_NODE	2783:47	2783:47	10	8
LEAF_NODE	2783:48	2783:48	8	,
ARGUMENT	2783:49	2783:49	8	& origdata
UNARY_EXPR	2783:49	2783:50	9	& origdata
UNARY_OPERATOR	2783:49	2783:49	10	&
LEAF_NODE	2783:49	2783:49	11	&
FIELD	2783:50	2783:50	10	origdata
LEAF_NODE	2783:50	2783:50	11	origdata
LEAF_NODE	2783:58	2783:58	8	)
LEAF_NODE	2783:59	2783:59	4	;
SELECTION	2784:1	2785:1	3	
KEYWORD	2784:1	2784:1	4	if
LEAF_NODE	2784:1	2784:1	5	if
LEAF_NODE	2784:4	2784:4	4	(
CONDITION	2784:5	2784:5	4	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2784:5	2784:5	5	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
OR	2784:5	2784:35	6	( err != TIFFReadDirEntryErrOk ) || ( origdata == 0 )
EXPR	2784:5	2784:32	7	( err != TIFFReadDirEntryErrOk )
LEAF_NODE	2784:5	2784:5	8	(
FIELD	2784:6	2784:6	8	err
LEAF_NODE	2784:6	2784:6	9	err
EQ_OPERATOR	2784:9	2784:9	8	!=
LEAF_NODE	2784:9	2784:9	9	!=
FIELD	2784:11	2784:11	8	TIFFReadDirEntryErrOk
LEAF_NODE	2784:11	2784:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	2784:32	2784:32	8	)
LEAF_NODE	2784:33	2784:33	7	||
EXPR	2784:35	2784:47	7	( origdata == 0 )
LEAF_NODE	2784:35	2784:35	8	(
FIELD	2784:36	2784:36	8	origdata
LEAF_NODE	2784:36	2784:36	9	origdata
EQ_OPERATOR	2784:44	2784:44	8	==
LEAF_NODE	2784:44	2784:44	9	==
FIELD	2784:46	2784:46	8	0
LEAF_NODE	2784:46	2784:46	9	0
LEAF_NODE	2784:47	2784:47	8	)
LEAF_NODE	2784:48	2784:48	4	)
STATEMENTS	2785:1	2788:1	4	
LEAF_NODE	2785:1	2785:1	5	{
STATEMENTS	2786:2	2787:13	5	
EXPR_STATEMENT	2786:2	2786:10	6	* value = 0 ;
EXPR	2786:2	2786:2	7	* value = 0
ASSIGN	2786:2	2786:9	8	* value = 0
LVAL	2786:2	2786:2	9	* value
UNARY_EXPR	2786:2	2786:3	10	* value
UNARY_OPERATOR	2786:2	2786:2	11	*
LEAF_NODE	2786:2	2786:2	12	*
FIELD	2786:3	2786:3	11	value
LEAF_NODE	2786:3	2786:3	12	value
ASSIGN_OP	2786:8	2786:8	9	=
LEAF_NODE	2786:8	2786:8	10	=
RVAL	2786:9	2786:9	9	0
FIELD	2786:9	2786:9	10	0
LEAF_NODE	2786:9	2786:9	11	0
LEAF_NODE	2786:10	2786:10	7	;
LEAF_NODE	2787:2	2787:2	6	return
LEAF_NODE	2787:8	2787:8	6	(
LEAF_NODE	2787:9	2787:9	6	err
LEAF_NODE	2787:12	2787:12	6	)
LEAF_NODE	2787:13	2787:13	6	;
LEAF_NODE	2788:1	2788:1	5	}
SELECTION	2789:1	2790:1	3	
KEYWORD	2789:1	2789:1	4	switch
LEAF_NODE	2789:1	2789:1	5	switch
LEAF_NODE	2789:8	2789:8	4	(
CONDITION	2789:9	2789:9	4	direntry -> tdir_type
EXPR	2789:9	2789:9	5	direntry -> tdir_type
FIELD	2789:9	2789:19	6	direntry -> tdir_type
LEAF_NODE	2789:9	2789:9	7	direntry
LEAF_NODE	2789:17	2789:17	7	->
LEAF_NODE	2789:19	2789:19	7	tdir_type
LEAF_NODE	2789:28	2789:28	4	)
STATEMENTS	2790:1	2797:1	4	
LEAF_NODE	2790:1	2790:1	5	{
STATEMENTS	2791:2	2796:32	5	
LABEL	2791:2	2791:17	6	case TIFF_LONG8 :
LEAF_NODE	2791:2	2791:2	7	case
LEAF_NODE	2791:7	2791:7	7	TIFF_LONG8
LEAF_NODE	2791:17	2791:17	7	:
LABEL	2792:2	2792:16	6	case TIFF_IFD8 :
LEAF_NODE	2792:2	2792:2	7	case
LEAF_NODE	2792:7	2792:7	7	TIFF_IFD8
LEAF_NODE	2792:16	2792:16	7	:
EXPR_STATEMENT	2793:3	2793:27	6	* value = ( uint64 * ) origdata ;
EXPR	2793:3	2793:3	7	* value = ( uint64 * ) origdata
ASSIGN	2793:3	2793:10	8	* value = ( uint64 * ) origdata
LVAL	2793:3	2793:3	9	* value
UNARY_EXPR	2793:3	2793:4	10	* value
UNARY_OPERATOR	2793:3	2793:3	11	*
LEAF_NODE	2793:3	2793:3	12	*
FIELD	2793:4	2793:4	11	value
LEAF_NODE	2793:4	2793:4	12	value
ASSIGN_OP	2793:9	2793:9	9	=
LEAF_NODE	2793:9	2793:9	10	=
RVAL	2793:10	2793:19	9	( uint64 * ) origdata
LEAF_NODE	2793:10	2793:10	10	(
TYPE_NAME	2793:11	2793:11	10	uint64
LEAF_NODE	2793:11	2793:11	11	uint64
LEAF_NODE	2793:17	2793:17	10	*
LEAF_NODE	2793:18	2793:18	10	)
FIELD	2793:19	2793:19	10	origdata
LEAF_NODE	2793:19	2793:19	11	origdata
LEAF_NODE	2793:27	2793:27	7	;
SELECTION	2794:3	2795:4	6	
KEYWORD	2794:3	2794:3	7	if
LEAF_NODE	2794:3	2794:3	8	if
LEAF_NODE	2794:6	2794:6	7	(
CONDITION	2794:7	2794:7	7	tif -> tif_flags & TIFF_SWAB
EXPR	2794:7	2794:22	8	tif -> tif_flags & TIFF_SWAB
FIELD	2794:7	2794:12	9	tif -> tif_flags
LEAF_NODE	2794:7	2794:7	10	tif
LEAF_NODE	2794:10	2794:10	10	->
LEAF_NODE	2794:12	2794:12	10	tif_flags
LEAF_NODE	2794:21	2794:21	9	&
FIELD	2794:22	2794:22	9	TIFF_SWAB
LEAF_NODE	2794:22	2794:22	10	TIFF_SWAB
LEAF_NODE	2794:31	2794:31	7	)
STATEMENTS	2795:4	2795:4	7	
EXPR_STATEMENT	2795:4	2795:38	8	TIFFSwabArrayOfLong8 ( * value , count ) ;
EXPR	2795:4	2795:4	9	TIFFSwabArrayOfLong8 ( * value , count )
FUNCTION_CALL	2795:4	2795:37	10	TIFFSwabArrayOfLong8 ( * value , count )
CALLEE	2795:4	2795:4	11	TIFFSwabArrayOfLong8
LEAF_NODE	2795:4	2795:4	12	TIFFSwabArrayOfLong8
LEAF_NODE	2795:24	2795:24	11	(
ARGUMENT	2795:25	2795:25	11	* value
UNARY_EXPR	2795:25	2795:26	12	* value
UNARY_OPERATOR	2795:25	2795:25	13	*
LEAF_NODE	2795:25	2795:25	14	*
FIELD	2795:26	2795:26	13	value
LEAF_NODE	2795:26	2795:26	14	value
LEAF_NODE	2795:31	2795:31	11	,
ARGUMENT	2795:32	2795:32	11	count
FIELD	2795:32	2795:32	12	count
LEAF_NODE	2795:32	2795:32	13	count
LEAF_NODE	2795:37	2795:37	11	)
LEAF_NODE	2795:38	2795:38	9	;
LEAF_NODE	2796:3	2796:3	6	return
LEAF_NODE	2796:9	2796:9	6	(
LEAF_NODE	2796:10	2796:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	2796:31	2796:31	6	)
LEAF_NODE	2796:32	2796:32	6	;
LEAF_NODE	2797:1	2797:1	5	}
EXPR_STATEMENT	2798:1	2798:35	3	data = ( uint64 * ) _TIFFmalloc ( count * 8 ) ;
EXPR	2798:1	2798:1	4	data = ( uint64 * ) _TIFFmalloc ( count * 8 )
ASSIGN	2798:1	2798:6	5	data = ( uint64 * ) _TIFFmalloc ( count * 8 )
LVAL	2798:1	2798:1	6	data
FIELD	2798:1	2798:1	7	data
LEAF_NODE	2798:1	2798:1	8	data
ASSIGN_OP	2798:5	2798:5	6	=
LEAF_NODE	2798:5	2798:5	7	=
RVAL	2798:6	2798:15	6	( uint64 * ) _TIFFmalloc ( count * 8 )
LEAF_NODE	2798:6	2798:6	7	(
TYPE_NAME	2798:7	2798:7	7	uint64
LEAF_NODE	2798:7	2798:7	8	uint64
LEAF_NODE	2798:13	2798:13	7	*
LEAF_NODE	2798:14	2798:14	7	)
FUNCTION_CALL	2798:15	2798:34	7	_TIFFmalloc ( count * 8 )
CALLEE	2798:15	2798:15	8	_TIFFmalloc
LEAF_NODE	2798:15	2798:15	9	_TIFFmalloc
LEAF_NODE	2798:26	2798:26	8	(
ARGUMENT	2798:27	2798:33	8	count * 8
FIELD	2798:27	2798:27	9	count
LEAF_NODE	2798:27	2798:27	10	count
LEAF_NODE	2798:32	2798:32	9	*
FIELD	2798:33	2798:33	9	8
LEAF_NODE	2798:33	2798:33	10	8
LEAF_NODE	2798:34	2798:34	8	)
LEAF_NODE	2798:35	2798:35	4	;
SELECTION	2799:1	2800:1	3	
KEYWORD	2799:1	2799:1	4	if
LEAF_NODE	2799:1	2799:1	5	if
LEAF_NODE	2799:4	2799:4	4	(
CONDITION	2799:5	2799:5	4	data == 0
EXPR	2799:5	2799:11	5	data == 0
FIELD	2799:5	2799:5	6	data
LEAF_NODE	2799:5	2799:5	7	data
EQ_OPERATOR	2799:9	2799:9	6	==
LEAF_NODE	2799:9	2799:9	7	==
FIELD	2799:11	2799:11	6	0
LEAF_NODE	2799:11	2799:11	7	0
LEAF_NODE	2799:12	2799:12	4	)
STATEMENTS	2800:1	2803:1	4	
LEAF_NODE	2800:1	2800:1	5	{
STATEMENTS	2801:2	2802:34	5	
EXPR_STATEMENT	2801:2	2801:21	6	_TIFFfree ( origdata ) ;
EXPR	2801:2	2801:2	7	_TIFFfree ( origdata )
FUNCTION_CALL	2801:2	2801:20	8	_TIFFfree ( origdata )
CALLEE	2801:2	2801:2	9	_TIFFfree
LEAF_NODE	2801:2	2801:2	10	_TIFFfree
LEAF_NODE	2801:11	2801:11	9	(
ARGUMENT	2801:12	2801:12	9	origdata
FIELD	2801:12	2801:12	10	origdata
LEAF_NODE	2801:12	2801:12	11	origdata
LEAF_NODE	2801:20	2801:20	9	)
LEAF_NODE	2801:21	2801:21	7	;
LEAF_NODE	2802:2	2802:2	6	return
LEAF_NODE	2802:8	2802:8	6	(
LEAF_NODE	2802:9	2802:9	6	TIFFReadDirEntryErrAlloc
LEAF_NODE	2802:33	2802:33	6	)
LEAF_NODE	2802:34	2802:34	6	;
LEAF_NODE	2803:1	2803:1	5	}
SELECTION	2804:1	2805:1	3	
KEYWORD	2804:1	2804:1	4	switch
LEAF_NODE	2804:1	2804:1	5	switch
LEAF_NODE	2804:8	2804:8	4	(
CONDITION	2804:9	2804:9	4	direntry -> tdir_type
EXPR	2804:9	2804:9	5	direntry -> tdir_type
FIELD	2804:9	2804:19	6	direntry -> tdir_type
LEAF_NODE	2804:9	2804:9	7	direntry
LEAF_NODE	2804:17	2804:17	7	->
LEAF_NODE	2804:19	2804:19	7	tdir_type
LEAF_NODE	2804:28	2804:28	4	)
STATEMENTS	2805:1	2822:1	4	
LEAF_NODE	2805:1	2805:1	5	{
STATEMENTS	2806:2	2821:3	5	
LABEL	2806:2	2806:16	6	case TIFF_LONG :
LEAF_NODE	2806:2	2806:2	7	case
LEAF_NODE	2806:7	2806:7	7	TIFF_LONG
LEAF_NODE	2806:16	2806:16	7	:
LABEL	2807:2	2807:15	6	case TIFF_IFD :
LEAF_NODE	2807:2	2807:2	7	case
LEAF_NODE	2807:7	2807:7	7	TIFF_IFD
LEAF_NODE	2807:15	2807:15	7	:
LEAF_NODE	2808:3	2808:3	6	{
STATEMENTS	2809:4	2814:4	6	
SIMPLE_DECL	2809:4	2809:14	7	uint32 * ma ;
VAR_DECL	2809:4	2809:12	8	uint32 * ma
TYPE	2809:4	2809:10	9	uint32 *
TYPE_NAME	2809:4	2809:4	10	uint32
LEAF_NODE	2809:4	2809:4	11	uint32
POINTER	2809:10	2809:10	10	*
LEAF_NODE	2809:10	2809:10	11	*
NAME	2809:12	2809:12	9	ma
LEAF_NODE	2809:12	2809:12	10	ma
LEAF_NODE	2809:14	2809:14	8	;
SIMPLE_DECL	2810:4	2810:14	7	uint64 * mb ;
VAR_DECL	2810:4	2810:12	8	uint64 * mb
TYPE	2810:4	2810:10	9	uint64 *
TYPE_NAME	2810:4	2810:4	10	uint64
LEAF_NODE	2810:4	2810:4	11	uint64
POINTER	2810:10	2810:10	10	*
LEAF_NODE	2810:10	2810:10	11	*
NAME	2810:12	2810:12	9	mb
LEAF_NODE	2810:12	2810:12	10	mb
LEAF_NODE	2810:14	2810:14	8	;
SIMPLE_DECL	2811:4	2811:12	7	uint32 n ;
VAR_DECL	2811:4	2811:11	8	uint32 n
TYPE	2811:4	2811:4	9	uint32
TYPE_NAME	2811:4	2811:4	10	uint32
LEAF_NODE	2811:4	2811:4	11	uint32
NAME	2811:11	2811:11	9	n
LEAF_NODE	2811:11	2811:11	10	n
LEAF_NODE	2811:12	2811:12	8	;
EXPR_STATEMENT	2812:4	2812:24	7	ma = ( uint32 * ) origdata ;
EXPR	2812:4	2812:4	8	ma = ( uint32 * ) origdata
ASSIGN	2812:4	2812:7	9	ma = ( uint32 * ) origdata
LVAL	2812:4	2812:4	10	ma
FIELD	2812:4	2812:4	11	ma
LEAF_NODE	2812:4	2812:4	12	ma
ASSIGN_OP	2812:6	2812:6	10	=
LEAF_NODE	2812:6	2812:6	11	=
RVAL	2812:7	2812:16	10	( uint32 * ) origdata
LEAF_NODE	2812:7	2812:7	11	(
TYPE_NAME	2812:8	2812:8	11	uint32
LEAF_NODE	2812:8	2812:8	12	uint32
LEAF_NODE	2812:14	2812:14	11	*
LEAF_NODE	2812:15	2812:15	11	)
FIELD	2812:16	2812:16	11	origdata
LEAF_NODE	2812:16	2812:16	12	origdata
LEAF_NODE	2812:24	2812:24	8	;
EXPR_STATEMENT	2813:4	2813:11	7	mb = data ;
EXPR	2813:4	2813:4	8	mb = data
ASSIGN	2813:4	2813:7	9	mb = data
LVAL	2813:4	2813:4	10	mb
FIELD	2813:4	2813:4	11	mb
LEAF_NODE	2813:4	2813:4	12	mb
ASSIGN_OP	2813:6	2813:6	10	=
LEAF_NODE	2813:6	2813:6	11	=
RVAL	2813:7	2813:7	10	data
FIELD	2813:7	2813:7	11	data
LEAF_NODE	2813:7	2813:7	12	data
LEAF_NODE	2813:11	2813:11	8	;
ITERATION	2814:4	2815:4	7	
KEYWORD	2814:4	2814:4	8	for
LEAF_NODE	2814:4	2814:4	9	for
LEAF_NODE	2814:8	2814:8	8	(
FOR_INIT	2814:9	2814:12	8	n = 0 ;
EXPR	2814:9	2814:9	9	n = 0
ASSIGN	2814:9	2814:11	10	n = 0
LVAL	2814:9	2814:9	11	n
FIELD	2814:9	2814:9	12	n
LEAF_NODE	2814:9	2814:9	13	n
ASSIGN_OP	2814:10	2814:10	11	=
LEAF_NODE	2814:10	2814:10	12	=
RVAL	2814:11	2814:11	11	0
FIELD	2814:11	2814:11	12	0
LEAF_NODE	2814:11	2814:11	13	0
LEAF_NODE	2814:12	2814:12	9	;
CONDITION	2814:14	2814:14	8	n < count
EXPR	2814:14	2814:16	9	n < count
FIELD	2814:14	2814:14	10	n
LEAF_NODE	2814:14	2814:14	11	n
REL_OPERATOR	2814:15	2814:15	10	<
LEAF_NODE	2814:15	2814:15	11	<
FIELD	2814:16	2814:16	10	count
LEAF_NODE	2814:16	2814:16	11	count
LEAF_NODE	2814:21	2814:21	8	;
FOR_EXPR	2814:23	2814:23	8	n ++
EXPR	2814:23	2814:23	9	n ++
FIELD	2814:23	2814:24	10	n ++
LEAF_NODE	2814:23	2814:23	11	n
LEAF_NODE	2814:24	2814:24	11	++
LEAF_NODE	2814:26	2814:26	8	)
STATEMENTS	2815:4	2819:4	8	
LEAF_NODE	2815:4	2815:4	9	{
STATEMENTS	2816:5	2818:5	9	
SELECTION	2816:5	2817:6	10	
KEYWORD	2816:5	2816:5	11	if
LEAF_NODE	2816:5	2816:5	12	if
LEAF_NODE	2816:8	2816:8	11	(
CONDITION	2816:9	2816:9	11	tif -> tif_flags & TIFF_SWAB
EXPR	2816:9	2816:24	12	tif -> tif_flags & TIFF_SWAB
FIELD	2816:9	2816:14	13	tif -> tif_flags
LEAF_NODE	2816:9	2816:9	14	tif
LEAF_NODE	2816:12	2816:12	14	->
LEAF_NODE	2816:14	2816:14	14	tif_flags
LEAF_NODE	2816:23	2816:23	13	&
FIELD	2816:24	2816:24	13	TIFF_SWAB
LEAF_NODE	2816:24	2816:24	14	TIFF_SWAB
LEAF_NODE	2816:33	2816:33	11	)
STATEMENTS	2817:6	2817:6	11	
EXPR_STATEMENT	2817:6	2817:22	12	TIFFSwabLong ( ma ) ;
EXPR	2817:6	2817:6	13	TIFFSwabLong ( ma )
FUNCTION_CALL	2817:6	2817:21	14	TIFFSwabLong ( ma )
CALLEE	2817:6	2817:6	15	TIFFSwabLong
LEAF_NODE	2817:6	2817:6	16	TIFFSwabLong
LEAF_NODE	2817:18	2817:18	15	(
ARGUMENT	2817:19	2817:19	15	ma
FIELD	2817:19	2817:19	16	ma
LEAF_NODE	2817:19	2817:19	17	ma
LEAF_NODE	2817:21	2817:21	15	)
LEAF_NODE	2817:22	2817:22	13	;
EXPR_STATEMENT	2818:5	2818:26	10	* mb ++ = ( uint64 ) ( * ma ++ ) ;
EXPR	2818:5	2818:5	11	* mb ++ = ( uint64 ) ( * ma ++ )
ASSIGN	2818:5	2818:11	12	* mb ++ = ( uint64 ) ( * ma ++ )
LVAL	2818:5	2818:5	13	* mb ++
UNARY_EXPR	2818:5	2818:6	14	* mb ++
UNARY_OPERATOR	2818:5	2818:5	15	*
LEAF_NODE	2818:5	2818:5	16	*
FIELD	2818:6	2818:8	15	mb ++
LEAF_NODE	2818:6	2818:6	16	mb
LEAF_NODE	2818:8	2818:8	16	++
ASSIGN_OP	2818:10	2818:10	13	=
LEAF_NODE	2818:10	2818:10	14	=
RVAL	2818:11	2818:25	13	( uint64 ) ( * ma ++ )
LEAF_NODE	2818:11	2818:11	14	(
TYPE_NAME	2818:12	2818:12	14	uint64
LEAF_NODE	2818:12	2818:12	15	uint64
LEAF_NODE	2818:18	2818:18	14	)
LEAF_NODE	2818:19	2818:19	14	(
UNARY_EXPR	2818:20	2818:21	14	* ma ++
UNARY_OPERATOR	2818:20	2818:20	15	*
LEAF_NODE	2818:20	2818:20	16	*
FIELD	2818:21	2818:23	15	ma ++
LEAF_NODE	2818:21	2818:21	16	ma
LEAF_NODE	2818:23	2818:23	16	++
LEAF_NODE	2818:25	2818:25	14	)
LEAF_NODE	2818:26	2818:26	11	;
LEAF_NODE	2819:4	2819:4	9	}
LEAF_NODE	2820:3	2820:3	6	}
JUMP_STATEMENT	2821:3	2821:8	6	break DESTINATION ;
KEYWORD	2821:3	2821:3	7	break
LEAF_NODE	2821:3	2821:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	2821:8	2821:8	7	;
LEAF_NODE	2822:1	2822:1	5	}
EXPR_STATEMENT	2823:1	2823:20	3	_TIFFfree ( origdata ) ;
EXPR	2823:1	2823:1	4	_TIFFfree ( origdata )
FUNCTION_CALL	2823:1	2823:19	5	_TIFFfree ( origdata )
CALLEE	2823:1	2823:1	6	_TIFFfree
LEAF_NODE	2823:1	2823:1	7	_TIFFfree
LEAF_NODE	2823:10	2823:10	6	(
ARGUMENT	2823:11	2823:11	6	origdata
FIELD	2823:11	2823:11	7	origdata
LEAF_NODE	2823:11	2823:11	8	origdata
LEAF_NODE	2823:19	2823:19	6	)
LEAF_NODE	2823:20	2823:20	4	;
EXPR_STATEMENT	2824:1	2824:12	3	* value = data ;
EXPR	2824:1	2824:1	4	* value = data
ASSIGN	2824:1	2824:8	5	* value = data
LVAL	2824:1	2824:1	6	* value
UNARY_EXPR	2824:1	2824:2	7	* value
UNARY_OPERATOR	2824:1	2824:1	8	*
LEAF_NODE	2824:1	2824:1	9	*
FIELD	2824:2	2824:2	8	value
LEAF_NODE	2824:2	2824:2	9	value
ASSIGN_OP	2824:7	2824:7	6	=
LEAF_NODE	2824:7	2824:7	7	=
RVAL	2824:8	2824:8	6	data
FIELD	2824:8	2824:8	7	data
LEAF_NODE	2824:8	2824:8	8	data
LEAF_NODE	2824:12	2824:12	4	;
LEAF_NODE	2825:1	2825:1	3	return
LEAF_NODE	2825:7	2825:7	3	(
LEAF_NODE	2825:8	2825:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2825:29	2825:29	3	)
LEAF_NODE	2825:30	2825:30	3	;
LEAF_NODE	2826:0	2826:0	2	}
FUNCTION_DEF	2828:0	2854:0	1	
RETURN_TYPE	2828:0	2828:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2828:0	2828:0	3	static
TYPE_NAME	2828:7	2828:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2828:7	2828:7	4	enum
LEAF_NODE	2828:12	2828:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2828:32	2828:32	2	TIFFReadDirEntryPersampleShort
LEAF_NODE	2828:32	2828:32	3	TIFFReadDirEntryPersampleShort
PARAMETER_LIST	2828:62	2828:111	2	( TIFF * tif , TIFFDirEntry * direntry , uint16 * value )
LEAF_NODE	2828:62	2828:62	3	(
PARAMETER_DECL	2828:63	2828:69	3	TIFF * tif
TYPE	2828:63	2828:67	4	TIFF *
TYPE_NAME	2828:63	2828:63	5	TIFF
LEAF_NODE	2828:63	2828:63	6	TIFF
POINTER	2828:67	2828:67	5	*
LEAF_NODE	2828:67	2828:67	6	*
NAME	2828:69	2828:69	4	tif
LEAF_NODE	2828:69	2828:69	5	tif
LEAF_NODE	2828:72	2828:72	3	,
PARAMETER_DECL	2828:74	2828:88	3	TIFFDirEntry * direntry
TYPE	2828:74	2828:86	4	TIFFDirEntry *
TYPE_NAME	2828:74	2828:74	5	TIFFDirEntry
LEAF_NODE	2828:74	2828:74	6	TIFFDirEntry
POINTER	2828:86	2828:86	5	*
LEAF_NODE	2828:86	2828:86	6	*
NAME	2828:88	2828:88	4	direntry
LEAF_NODE	2828:88	2828:88	5	direntry
LEAF_NODE	2828:96	2828:96	3	,
PARAMETER_DECL	2828:98	2828:106	3	uint16 * value
TYPE	2828:98	2828:104	4	uint16 *
TYPE_NAME	2828:98	2828:98	5	uint16
LEAF_NODE	2828:98	2828:98	6	uint16
POINTER	2828:104	2828:104	5	*
LEAF_NODE	2828:104	2828:104	6	*
NAME	2828:106	2828:106	4	value
LEAF_NODE	2828:106	2828:106	5	value
LEAF_NODE	2828:111	2828:111	3	)
LEAF_NODE	2829:0	2829:0	2	{
STATEMENTS	2830:1	2853:12	2	
SIMPLE_DECL	2830:1	2830:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	2830:1	2830:26	4	enum TIFFReadDirEntryErr err
TYPE	2830:1	2830:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	2830:1	2830:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	2830:1	2830:1	7	enum
LEAF_NODE	2830:6	2830:6	7	TIFFReadDirEntryErr
NAME	2830:26	2830:26	5	err
LEAF_NODE	2830:26	2830:26	6	err
LEAF_NODE	2830:29	2830:29	4	;
SIMPLE_DECL	2831:1	2831:10	3	uint16 * m ;
VAR_DECL	2831:1	2831:9	4	uint16 * m
TYPE	2831:1	2831:7	5	uint16 *
TYPE_NAME	2831:1	2831:1	6	uint16
LEAF_NODE	2831:1	2831:1	7	uint16
POINTER	2831:7	2831:7	6	*
LEAF_NODE	2831:7	2831:7	7	*
NAME	2831:9	2831:9	5	m
LEAF_NODE	2831:9	2831:9	6	m
LEAF_NODE	2831:10	2831:10	4	;
SIMPLE_DECL	2832:1	2832:11	3	uint16 * na ;
VAR_DECL	2832:1	2832:9	4	uint16 * na
TYPE	2832:1	2832:7	5	uint16 *
TYPE_NAME	2832:1	2832:1	6	uint16
LEAF_NODE	2832:1	2832:1	7	uint16
POINTER	2832:7	2832:7	6	*
LEAF_NODE	2832:7	2832:7	7	*
NAME	2832:9	2832:9	5	na
LEAF_NODE	2832:9	2832:9	6	na
LEAF_NODE	2832:11	2832:11	4	;
SIMPLE_DECL	2833:1	2833:10	3	uint16 nb ;
VAR_DECL	2833:1	2833:8	4	uint16 nb
TYPE	2833:1	2833:1	5	uint16
TYPE_NAME	2833:1	2833:1	6	uint16
LEAF_NODE	2833:1	2833:1	7	uint16
NAME	2833:8	2833:8	5	nb
LEAF_NODE	2833:8	2833:8	6	nb
LEAF_NODE	2833:10	2833:10	4	;
SELECTION	2834:1	2835:2	3	
KEYWORD	2834:1	2834:1	4	if
LEAF_NODE	2834:1	2834:1	5	if
LEAF_NODE	2834:4	2834:4	4	(
CONDITION	2834:5	2834:5	4	direntry -> tdir_count < ( uint64 ) tif -> tif_dir . td_samplesperpixel
EXPR	2834:5	2834:34	5	direntry -> tdir_count < ( uint64 ) tif -> tif_dir . td_samplesperpixel
FIELD	2834:5	2834:15	6	direntry -> tdir_count
LEAF_NODE	2834:5	2834:5	7	direntry
LEAF_NODE	2834:13	2834:13	7	->
LEAF_NODE	2834:15	2834:15	7	tdir_count
REL_OPERATOR	2834:25	2834:25	6	<
LEAF_NODE	2834:25	2834:25	7	<
LEAF_NODE	2834:26	2834:26	6	(
TYPE_NAME	2834:27	2834:27	6	uint64
LEAF_NODE	2834:27	2834:27	7	uint64
LEAF_NODE	2834:33	2834:33	6	)
FIELD	2834:34	2834:47	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	2834:34	2834:34	7	tif
LEAF_NODE	2834:37	2834:37	7	->
LEAF_NODE	2834:39	2834:39	7	tif_dir
LEAF_NODE	2834:46	2834:46	7	.
LEAF_NODE	2834:47	2834:47	7	td_samplesperpixel
LEAF_NODE	2834:65	2834:65	4	)
STATEMENTS	2835:2	2835:2	4	
LEAF_NODE	2835:2	2835:2	5	return
LEAF_NODE	2835:8	2835:8	3	(
LEAF_NODE	2835:9	2835:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	2835:33	2835:33	3	)
LEAF_NODE	2835:34	2835:34	3	;
EXPR_STATEMENT	2836:1	2836:48	3	err = TIFFReadDirEntryShortArray ( tif , direntry , & m ) ;
EXPR	2836:1	2836:1	4	err = TIFFReadDirEntryShortArray ( tif , direntry , & m )
ASSIGN	2836:1	2836:5	5	err = TIFFReadDirEntryShortArray ( tif , direntry , & m )
LVAL	2836:1	2836:1	6	err
FIELD	2836:1	2836:1	7	err
LEAF_NODE	2836:1	2836:1	8	err
ASSIGN_OP	2836:4	2836:4	6	=
LEAF_NODE	2836:4	2836:4	7	=
RVAL	2836:5	2836:5	6	TIFFReadDirEntryShortArray ( tif , direntry , & m )
FUNCTION_CALL	2836:5	2836:47	7	TIFFReadDirEntryShortArray ( tif , direntry , & m )
CALLEE	2836:5	2836:5	8	TIFFReadDirEntryShortArray
LEAF_NODE	2836:5	2836:5	9	TIFFReadDirEntryShortArray
LEAF_NODE	2836:31	2836:31	8	(
ARGUMENT	2836:32	2836:32	8	tif
FIELD	2836:32	2836:32	9	tif
LEAF_NODE	2836:32	2836:32	10	tif
LEAF_NODE	2836:35	2836:35	8	,
ARGUMENT	2836:36	2836:36	8	direntry
FIELD	2836:36	2836:36	9	direntry
LEAF_NODE	2836:36	2836:36	10	direntry
LEAF_NODE	2836:44	2836:44	8	,
ARGUMENT	2836:45	2836:45	8	& m
UNARY_EXPR	2836:45	2836:46	9	& m
UNARY_OPERATOR	2836:45	2836:45	10	&
LEAF_NODE	2836:45	2836:45	11	&
FIELD	2836:46	2836:46	10	m
LEAF_NODE	2836:46	2836:46	11	m
LEAF_NODE	2836:47	2836:47	8	)
LEAF_NODE	2836:48	2836:48	4	;
SELECTION	2837:1	2838:2	3	
KEYWORD	2837:1	2837:1	4	if
LEAF_NODE	2837:1	2837:1	5	if
LEAF_NODE	2837:4	2837:4	4	(
CONDITION	2837:5	2837:5	4	err != TIFFReadDirEntryErrOk || m == NULL
EXPR	2837:5	2837:5	5	err != TIFFReadDirEntryErrOk || m == NULL
OR	2837:5	2837:35	6	err != TIFFReadDirEntryErrOk || m == NULL
EXPR	2837:5	2837:10	7	err != TIFFReadDirEntryErrOk
FIELD	2837:5	2837:5	8	err
LEAF_NODE	2837:5	2837:5	9	err
EQ_OPERATOR	2837:8	2837:8	8	!=
LEAF_NODE	2837:8	2837:8	9	!=
FIELD	2837:10	2837:10	8	TIFFReadDirEntryErrOk
LEAF_NODE	2837:10	2837:10	9	TIFFReadDirEntryErrOk
LEAF_NODE	2837:32	2837:32	7	||
EXPR	2837:35	2837:40	7	m == NULL
FIELD	2837:35	2837:35	8	m
LEAF_NODE	2837:35	2837:35	9	m
EQ_OPERATOR	2837:37	2837:37	8	==
LEAF_NODE	2837:37	2837:37	9	==
FIELD	2837:40	2837:40	8	NULL
LEAF_NODE	2837:40	2837:40	9	NULL
LEAF_NODE	2837:44	2837:44	4	)
STATEMENTS	2838:2	2838:2	4	
LEAF_NODE	2838:2	2838:2	5	return
LEAF_NODE	2838:8	2838:8	3	(
LEAF_NODE	2838:9	2838:9	3	err
LEAF_NODE	2838:12	2838:12	3	)
LEAF_NODE	2838:13	2838:13	3	;
EXPR_STATEMENT	2839:1	2839:5	3	na = m ;
EXPR	2839:1	2839:1	4	na = m
ASSIGN	2839:1	2839:4	5	na = m
LVAL	2839:1	2839:1	6	na
FIELD	2839:1	2839:1	7	na
LEAF_NODE	2839:1	2839:1	8	na
ASSIGN_OP	2839:3	2839:3	6	=
LEAF_NODE	2839:3	2839:3	7	=
RVAL	2839:4	2839:4	6	m
FIELD	2839:4	2839:4	7	m
LEAF_NODE	2839:4	2839:4	8	m
LEAF_NODE	2839:5	2839:5	4	;
EXPR_STATEMENT	2840:1	2840:35	3	nb = tif -> tif_dir . td_samplesperpixel ;
EXPR	2840:1	2840:1	4	nb = tif -> tif_dir . td_samplesperpixel
ASSIGN	2840:1	2840:4	5	nb = tif -> tif_dir . td_samplesperpixel
LVAL	2840:1	2840:1	6	nb
FIELD	2840:1	2840:1	7	nb
LEAF_NODE	2840:1	2840:1	8	nb
ASSIGN_OP	2840:3	2840:3	6	=
LEAF_NODE	2840:3	2840:3	7	=
RVAL	2840:4	2840:4	6	tif -> tif_dir . td_samplesperpixel
FIELD	2840:4	2840:17	7	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	2840:4	2840:4	8	tif
LEAF_NODE	2840:7	2840:7	8	->
LEAF_NODE	2840:9	2840:9	8	tif_dir
LEAF_NODE	2840:16	2840:16	8	.
LEAF_NODE	2840:17	2840:17	8	td_samplesperpixel
LEAF_NODE	2840:35	2840:35	4	;
EXPR_STATEMENT	2841:1	2841:13	3	* value = * na ++ ;
EXPR	2841:1	2841:1	4	* value = * na ++
ASSIGN	2841:1	2841:8	5	* value = * na ++
LVAL	2841:1	2841:1	6	* value
UNARY_EXPR	2841:1	2841:2	7	* value
UNARY_OPERATOR	2841:1	2841:1	8	*
LEAF_NODE	2841:1	2841:1	9	*
FIELD	2841:2	2841:2	8	value
LEAF_NODE	2841:2	2841:2	9	value
ASSIGN_OP	2841:7	2841:7	6	=
LEAF_NODE	2841:7	2841:7	7	=
RVAL	2841:8	2841:8	6	* na ++
UNARY_EXPR	2841:8	2841:9	7	* na ++
UNARY_OPERATOR	2841:8	2841:8	8	*
LEAF_NODE	2841:8	2841:8	9	*
FIELD	2841:9	2841:11	8	na ++
LEAF_NODE	2841:9	2841:9	9	na
LEAF_NODE	2841:11	2841:11	9	++
LEAF_NODE	2841:13	2841:13	4	;
EXPR_STATEMENT	2842:1	2842:5	3	nb -- ;
EXPR	2842:1	2842:1	4	nb --
FIELD	2842:1	2842:3	5	nb --
LEAF_NODE	2842:1	2842:1	6	nb
LEAF_NODE	2842:3	2842:3	6	--
LEAF_NODE	2842:5	2842:5	4	;
ITERATION	2843:1	2844:1	3	
KEYWORD	2843:1	2843:1	4	while
LEAF_NODE	2843:1	2843:1	5	while
LEAF_NODE	2843:7	2843:7	4	(
CONDITION	2843:8	2843:8	4	nb > 0
EXPR	2843:8	2843:11	5	nb > 0
FIELD	2843:8	2843:8	6	nb
LEAF_NODE	2843:8	2843:8	7	nb
REL_OPERATOR	2843:10	2843:10	6	>
LEAF_NODE	2843:10	2843:10	7	>
FIELD	2843:11	2843:11	6	0
LEAF_NODE	2843:11	2843:11	7	0
LEAF_NODE	2843:12	2843:12	4	)
STATEMENTS	2844:1	2851:1	4	
LEAF_NODE	2844:1	2844:1	5	{
STATEMENTS	2845:2	2850:2	5	
SELECTION	2845:2	2846:2	6	
KEYWORD	2845:2	2845:2	7	if
LEAF_NODE	2845:2	2845:2	8	if
LEAF_NODE	2845:5	2845:5	7	(
CONDITION	2845:6	2845:6	7	* na ++ != * value
EXPR	2845:6	2845:13	8	* na ++ != * value
UNARY_EXPR	2845:6	2845:7	9	* na ++
UNARY_OPERATOR	2845:6	2845:6	10	*
LEAF_NODE	2845:6	2845:6	11	*
FIELD	2845:7	2845:9	10	na ++
LEAF_NODE	2845:7	2845:7	11	na
LEAF_NODE	2845:9	2845:9	11	++
EQ_OPERATOR	2845:11	2845:11	9	!=
LEAF_NODE	2845:11	2845:11	10	!=
UNARY_EXPR	2845:13	2845:14	9	* value
UNARY_OPERATOR	2845:13	2845:13	10	*
LEAF_NODE	2845:13	2845:13	11	*
FIELD	2845:14	2845:14	10	value
LEAF_NODE	2845:14	2845:14	11	value
LEAF_NODE	2845:19	2845:19	7	)
STATEMENTS	2846:2	2849:2	7	
LEAF_NODE	2846:2	2846:2	8	{
STATEMENTS	2847:3	2848:3	8	
EXPR_STATEMENT	2847:3	2847:31	9	err = TIFFReadDirEntryErrPsdif ;
EXPR	2847:3	2847:3	10	err = TIFFReadDirEntryErrPsdif
ASSIGN	2847:3	2847:7	11	err = TIFFReadDirEntryErrPsdif
LVAL	2847:3	2847:3	12	err
FIELD	2847:3	2847:3	13	err
LEAF_NODE	2847:3	2847:3	14	err
ASSIGN_OP	2847:6	2847:6	12	=
LEAF_NODE	2847:6	2847:6	13	=
RVAL	2847:7	2847:7	12	TIFFReadDirEntryErrPsdif
FIELD	2847:7	2847:7	13	TIFFReadDirEntryErrPsdif
LEAF_NODE	2847:7	2847:7	14	TIFFReadDirEntryErrPsdif
LEAF_NODE	2847:31	2847:31	10	;
JUMP_STATEMENT	2848:3	2848:8	9	break DESTINATION ;
KEYWORD	2848:3	2848:3	10	break
LEAF_NODE	2848:3	2848:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2848:8	2848:8	10	;
LEAF_NODE	2849:2	2849:2	8	}
EXPR_STATEMENT	2850:2	2850:6	6	nb -- ;
EXPR	2850:2	2850:2	7	nb --
FIELD	2850:2	2850:4	8	nb --
LEAF_NODE	2850:2	2850:2	9	nb
LEAF_NODE	2850:4	2850:4	9	--
LEAF_NODE	2850:6	2850:6	7	;
LEAF_NODE	2851:1	2851:1	5	}
EXPR_STATEMENT	2852:1	2852:13	3	_TIFFfree ( m ) ;
EXPR	2852:1	2852:1	4	_TIFFfree ( m )
FUNCTION_CALL	2852:1	2852:12	5	_TIFFfree ( m )
CALLEE	2852:1	2852:1	6	_TIFFfree
LEAF_NODE	2852:1	2852:1	7	_TIFFfree
LEAF_NODE	2852:10	2852:10	6	(
ARGUMENT	2852:11	2852:11	6	m
FIELD	2852:11	2852:11	7	m
LEAF_NODE	2852:11	2852:11	8	m
LEAF_NODE	2852:12	2852:12	6	)
LEAF_NODE	2852:13	2852:13	4	;
LEAF_NODE	2853:1	2853:1	3	return
LEAF_NODE	2853:7	2853:7	3	(
LEAF_NODE	2853:8	2853:8	3	err
LEAF_NODE	2853:11	2853:11	3	)
LEAF_NODE	2853:12	2853:12	3	;
LEAF_NODE	2854:0	2854:0	2	}
FUNCTION_DEF	2857:0	2883:0	1	
RETURN_TYPE	2857:0	2857:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2857:0	2857:0	3	static
TYPE_NAME	2857:7	2857:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2857:7	2857:7	4	enum
LEAF_NODE	2857:12	2857:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2857:32	2857:32	2	TIFFReadDirEntryPersampleDouble
LEAF_NODE	2857:32	2857:32	3	TIFFReadDirEntryPersampleDouble
PARAMETER_LIST	2857:63	2857:112	2	( TIFF * tif , TIFFDirEntry * direntry , double * value )
LEAF_NODE	2857:63	2857:63	3	(
PARAMETER_DECL	2857:64	2857:70	3	TIFF * tif
TYPE	2857:64	2857:68	4	TIFF *
TYPE_NAME	2857:64	2857:64	5	TIFF
LEAF_NODE	2857:64	2857:64	6	TIFF
POINTER	2857:68	2857:68	5	*
LEAF_NODE	2857:68	2857:68	6	*
NAME	2857:70	2857:70	4	tif
LEAF_NODE	2857:70	2857:70	5	tif
LEAF_NODE	2857:73	2857:73	3	,
PARAMETER_DECL	2857:75	2857:89	3	TIFFDirEntry * direntry
TYPE	2857:75	2857:87	4	TIFFDirEntry *
TYPE_NAME	2857:75	2857:75	5	TIFFDirEntry
LEAF_NODE	2857:75	2857:75	6	TIFFDirEntry
POINTER	2857:87	2857:87	5	*
LEAF_NODE	2857:87	2857:87	6	*
NAME	2857:89	2857:89	4	direntry
LEAF_NODE	2857:89	2857:89	5	direntry
LEAF_NODE	2857:97	2857:97	3	,
PARAMETER_DECL	2857:99	2857:107	3	double * value
TYPE	2857:99	2857:105	4	double *
TYPE_NAME	2857:99	2857:99	5	double
LEAF_NODE	2857:99	2857:99	6	double
POINTER	2857:105	2857:105	5	*
LEAF_NODE	2857:105	2857:105	6	*
NAME	2857:107	2857:107	4	value
LEAF_NODE	2857:107	2857:107	5	value
LEAF_NODE	2857:112	2857:112	3	)
LEAF_NODE	2858:0	2858:0	2	{
STATEMENTS	2859:1	2882:12	2	
SIMPLE_DECL	2859:1	2859:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	2859:1	2859:26	4	enum TIFFReadDirEntryErr err
TYPE	2859:1	2859:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	2859:1	2859:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	2859:1	2859:1	7	enum
LEAF_NODE	2859:6	2859:6	7	TIFFReadDirEntryErr
NAME	2859:26	2859:26	5	err
LEAF_NODE	2859:26	2859:26	6	err
LEAF_NODE	2859:29	2859:29	4	;
SIMPLE_DECL	2860:1	2860:10	3	double * m ;
VAR_DECL	2860:1	2860:9	4	double * m
TYPE	2860:1	2860:7	5	double *
TYPE_NAME	2860:1	2860:1	6	double
LEAF_NODE	2860:1	2860:1	7	double
POINTER	2860:7	2860:7	6	*
LEAF_NODE	2860:7	2860:7	7	*
NAME	2860:9	2860:9	5	m
LEAF_NODE	2860:9	2860:9	6	m
LEAF_NODE	2860:10	2860:10	4	;
SIMPLE_DECL	2861:1	2861:11	3	double * na ;
VAR_DECL	2861:1	2861:9	4	double * na
TYPE	2861:1	2861:7	5	double *
TYPE_NAME	2861:1	2861:1	6	double
LEAF_NODE	2861:1	2861:1	7	double
POINTER	2861:7	2861:7	6	*
LEAF_NODE	2861:7	2861:7	7	*
NAME	2861:9	2861:9	5	na
LEAF_NODE	2861:9	2861:9	6	na
LEAF_NODE	2861:11	2861:11	4	;
SIMPLE_DECL	2862:1	2862:10	3	uint16 nb ;
VAR_DECL	2862:1	2862:8	4	uint16 nb
TYPE	2862:1	2862:1	5	uint16
TYPE_NAME	2862:1	2862:1	6	uint16
LEAF_NODE	2862:1	2862:1	7	uint16
NAME	2862:8	2862:8	5	nb
LEAF_NODE	2862:8	2862:8	6	nb
LEAF_NODE	2862:10	2862:10	4	;
SELECTION	2863:1	2864:2	3	
KEYWORD	2863:1	2863:1	4	if
LEAF_NODE	2863:1	2863:1	5	if
LEAF_NODE	2863:4	2863:4	4	(
CONDITION	2863:5	2863:5	4	direntry -> tdir_count < ( uint64 ) tif -> tif_dir . td_samplesperpixel
EXPR	2863:5	2863:34	5	direntry -> tdir_count < ( uint64 ) tif -> tif_dir . td_samplesperpixel
FIELD	2863:5	2863:15	6	direntry -> tdir_count
LEAF_NODE	2863:5	2863:5	7	direntry
LEAF_NODE	2863:13	2863:13	7	->
LEAF_NODE	2863:15	2863:15	7	tdir_count
REL_OPERATOR	2863:25	2863:25	6	<
LEAF_NODE	2863:25	2863:25	7	<
LEAF_NODE	2863:26	2863:26	6	(
TYPE_NAME	2863:27	2863:27	6	uint64
LEAF_NODE	2863:27	2863:27	7	uint64
LEAF_NODE	2863:33	2863:33	6	)
FIELD	2863:34	2863:47	6	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	2863:34	2863:34	7	tif
LEAF_NODE	2863:37	2863:37	7	->
LEAF_NODE	2863:39	2863:39	7	tif_dir
LEAF_NODE	2863:46	2863:46	7	.
LEAF_NODE	2863:47	2863:47	7	td_samplesperpixel
LEAF_NODE	2863:65	2863:65	4	)
STATEMENTS	2864:2	2864:2	4	
LEAF_NODE	2864:2	2864:2	5	return
LEAF_NODE	2864:8	2864:8	3	(
LEAF_NODE	2864:9	2864:9	3	TIFFReadDirEntryErrCount
LEAF_NODE	2864:33	2864:33	3	)
LEAF_NODE	2864:34	2864:34	3	;
EXPR_STATEMENT	2865:1	2865:49	3	err = TIFFReadDirEntryDoubleArray ( tif , direntry , & m ) ;
EXPR	2865:1	2865:1	4	err = TIFFReadDirEntryDoubleArray ( tif , direntry , & m )
ASSIGN	2865:1	2865:5	5	err = TIFFReadDirEntryDoubleArray ( tif , direntry , & m )
LVAL	2865:1	2865:1	6	err
FIELD	2865:1	2865:1	7	err
LEAF_NODE	2865:1	2865:1	8	err
ASSIGN_OP	2865:4	2865:4	6	=
LEAF_NODE	2865:4	2865:4	7	=
RVAL	2865:5	2865:5	6	TIFFReadDirEntryDoubleArray ( tif , direntry , & m )
FUNCTION_CALL	2865:5	2865:48	7	TIFFReadDirEntryDoubleArray ( tif , direntry , & m )
CALLEE	2865:5	2865:5	8	TIFFReadDirEntryDoubleArray
LEAF_NODE	2865:5	2865:5	9	TIFFReadDirEntryDoubleArray
LEAF_NODE	2865:32	2865:32	8	(
ARGUMENT	2865:33	2865:33	8	tif
FIELD	2865:33	2865:33	9	tif
LEAF_NODE	2865:33	2865:33	10	tif
LEAF_NODE	2865:36	2865:36	8	,
ARGUMENT	2865:37	2865:37	8	direntry
FIELD	2865:37	2865:37	9	direntry
LEAF_NODE	2865:37	2865:37	10	direntry
LEAF_NODE	2865:45	2865:45	8	,
ARGUMENT	2865:46	2865:46	8	& m
UNARY_EXPR	2865:46	2865:47	9	& m
UNARY_OPERATOR	2865:46	2865:46	10	&
LEAF_NODE	2865:46	2865:46	11	&
FIELD	2865:47	2865:47	10	m
LEAF_NODE	2865:47	2865:47	11	m
LEAF_NODE	2865:48	2865:48	8	)
LEAF_NODE	2865:49	2865:49	4	;
SELECTION	2866:1	2867:2	3	
KEYWORD	2866:1	2866:1	4	if
LEAF_NODE	2866:1	2866:1	5	if
LEAF_NODE	2866:4	2866:4	4	(
CONDITION	2866:5	2866:5	4	err != TIFFReadDirEntryErrOk
EXPR	2866:5	2866:10	5	err != TIFFReadDirEntryErrOk
FIELD	2866:5	2866:5	6	err
LEAF_NODE	2866:5	2866:5	7	err
EQ_OPERATOR	2866:8	2866:8	6	!=
LEAF_NODE	2866:8	2866:8	7	!=
FIELD	2866:10	2866:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	2866:10	2866:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	2866:31	2866:31	4	)
STATEMENTS	2867:2	2867:2	4	
LEAF_NODE	2867:2	2867:2	5	return
LEAF_NODE	2867:8	2867:8	3	(
LEAF_NODE	2867:9	2867:9	3	err
LEAF_NODE	2867:12	2867:12	3	)
LEAF_NODE	2867:13	2867:13	3	;
EXPR_STATEMENT	2868:1	2868:5	3	na = m ;
EXPR	2868:1	2868:1	4	na = m
ASSIGN	2868:1	2868:4	5	na = m
LVAL	2868:1	2868:1	6	na
FIELD	2868:1	2868:1	7	na
LEAF_NODE	2868:1	2868:1	8	na
ASSIGN_OP	2868:3	2868:3	6	=
LEAF_NODE	2868:3	2868:3	7	=
RVAL	2868:4	2868:4	6	m
FIELD	2868:4	2868:4	7	m
LEAF_NODE	2868:4	2868:4	8	m
LEAF_NODE	2868:5	2868:5	4	;
EXPR_STATEMENT	2869:1	2869:35	3	nb = tif -> tif_dir . td_samplesperpixel ;
EXPR	2869:1	2869:1	4	nb = tif -> tif_dir . td_samplesperpixel
ASSIGN	2869:1	2869:4	5	nb = tif -> tif_dir . td_samplesperpixel
LVAL	2869:1	2869:1	6	nb
FIELD	2869:1	2869:1	7	nb
LEAF_NODE	2869:1	2869:1	8	nb
ASSIGN_OP	2869:3	2869:3	6	=
LEAF_NODE	2869:3	2869:3	7	=
RVAL	2869:4	2869:4	6	tif -> tif_dir . td_samplesperpixel
FIELD	2869:4	2869:17	7	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	2869:4	2869:4	8	tif
LEAF_NODE	2869:7	2869:7	8	->
LEAF_NODE	2869:9	2869:9	8	tif_dir
LEAF_NODE	2869:16	2869:16	8	.
LEAF_NODE	2869:17	2869:17	8	td_samplesperpixel
LEAF_NODE	2869:35	2869:35	4	;
EXPR_STATEMENT	2870:1	2870:13	3	* value = * na ++ ;
EXPR	2870:1	2870:1	4	* value = * na ++
ASSIGN	2870:1	2870:8	5	* value = * na ++
LVAL	2870:1	2870:1	6	* value
UNARY_EXPR	2870:1	2870:2	7	* value
UNARY_OPERATOR	2870:1	2870:1	8	*
LEAF_NODE	2870:1	2870:1	9	*
FIELD	2870:2	2870:2	8	value
LEAF_NODE	2870:2	2870:2	9	value
ASSIGN_OP	2870:7	2870:7	6	=
LEAF_NODE	2870:7	2870:7	7	=
RVAL	2870:8	2870:8	6	* na ++
UNARY_EXPR	2870:8	2870:9	7	* na ++
UNARY_OPERATOR	2870:8	2870:8	8	*
LEAF_NODE	2870:8	2870:8	9	*
FIELD	2870:9	2870:11	8	na ++
LEAF_NODE	2870:9	2870:9	9	na
LEAF_NODE	2870:11	2870:11	9	++
LEAF_NODE	2870:13	2870:13	4	;
EXPR_STATEMENT	2871:1	2871:5	3	nb -- ;
EXPR	2871:1	2871:1	4	nb --
FIELD	2871:1	2871:3	5	nb --
LEAF_NODE	2871:1	2871:1	6	nb
LEAF_NODE	2871:3	2871:3	6	--
LEAF_NODE	2871:5	2871:5	4	;
ITERATION	2872:1	2873:1	3	
KEYWORD	2872:1	2872:1	4	while
LEAF_NODE	2872:1	2872:1	5	while
LEAF_NODE	2872:7	2872:7	4	(
CONDITION	2872:8	2872:8	4	nb > 0
EXPR	2872:8	2872:11	5	nb > 0
FIELD	2872:8	2872:8	6	nb
LEAF_NODE	2872:8	2872:8	7	nb
REL_OPERATOR	2872:10	2872:10	6	>
LEAF_NODE	2872:10	2872:10	7	>
FIELD	2872:11	2872:11	6	0
LEAF_NODE	2872:11	2872:11	7	0
LEAF_NODE	2872:12	2872:12	4	)
STATEMENTS	2873:1	2880:1	4	
LEAF_NODE	2873:1	2873:1	5	{
STATEMENTS	2874:2	2879:2	5	
SELECTION	2874:2	2875:2	6	
KEYWORD	2874:2	2874:2	7	if
LEAF_NODE	2874:2	2874:2	8	if
LEAF_NODE	2874:5	2874:5	7	(
CONDITION	2874:6	2874:6	7	* na ++ != * value
EXPR	2874:6	2874:13	8	* na ++ != * value
UNARY_EXPR	2874:6	2874:7	9	* na ++
UNARY_OPERATOR	2874:6	2874:6	10	*
LEAF_NODE	2874:6	2874:6	11	*
FIELD	2874:7	2874:9	10	na ++
LEAF_NODE	2874:7	2874:7	11	na
LEAF_NODE	2874:9	2874:9	11	++
EQ_OPERATOR	2874:11	2874:11	9	!=
LEAF_NODE	2874:11	2874:11	10	!=
UNARY_EXPR	2874:13	2874:14	9	* value
UNARY_OPERATOR	2874:13	2874:13	10	*
LEAF_NODE	2874:13	2874:13	11	*
FIELD	2874:14	2874:14	10	value
LEAF_NODE	2874:14	2874:14	11	value
LEAF_NODE	2874:19	2874:19	7	)
STATEMENTS	2875:2	2878:2	7	
LEAF_NODE	2875:2	2875:2	8	{
STATEMENTS	2876:3	2877:3	8	
EXPR_STATEMENT	2876:3	2876:31	9	err = TIFFReadDirEntryErrPsdif ;
EXPR	2876:3	2876:3	10	err = TIFFReadDirEntryErrPsdif
ASSIGN	2876:3	2876:7	11	err = TIFFReadDirEntryErrPsdif
LVAL	2876:3	2876:3	12	err
FIELD	2876:3	2876:3	13	err
LEAF_NODE	2876:3	2876:3	14	err
ASSIGN_OP	2876:6	2876:6	12	=
LEAF_NODE	2876:6	2876:6	13	=
RVAL	2876:7	2876:7	12	TIFFReadDirEntryErrPsdif
FIELD	2876:7	2876:7	13	TIFFReadDirEntryErrPsdif
LEAF_NODE	2876:7	2876:7	14	TIFFReadDirEntryErrPsdif
LEAF_NODE	2876:31	2876:31	10	;
JUMP_STATEMENT	2877:3	2877:8	9	break DESTINATION ;
KEYWORD	2877:3	2877:3	10	break
LEAF_NODE	2877:3	2877:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	2877:8	2877:8	10	;
LEAF_NODE	2878:2	2878:2	8	}
EXPR_STATEMENT	2879:2	2879:6	6	nb -- ;
EXPR	2879:2	2879:2	7	nb --
FIELD	2879:2	2879:4	8	nb --
LEAF_NODE	2879:2	2879:2	9	nb
LEAF_NODE	2879:4	2879:4	9	--
LEAF_NODE	2879:6	2879:6	7	;
LEAF_NODE	2880:1	2880:1	5	}
EXPR_STATEMENT	2881:1	2881:13	3	_TIFFfree ( m ) ;
EXPR	2881:1	2881:1	4	_TIFFfree ( m )
FUNCTION_CALL	2881:1	2881:12	5	_TIFFfree ( m )
CALLEE	2881:1	2881:1	6	_TIFFfree
LEAF_NODE	2881:1	2881:1	7	_TIFFfree
LEAF_NODE	2881:10	2881:10	6	(
ARGUMENT	2881:11	2881:11	6	m
FIELD	2881:11	2881:11	7	m
LEAF_NODE	2881:11	2881:11	8	m
LEAF_NODE	2881:12	2881:12	6	)
LEAF_NODE	2881:13	2881:13	4	;
LEAF_NODE	2882:1	2882:1	3	return
LEAF_NODE	2882:7	2882:7	3	(
LEAF_NODE	2882:8	2882:8	3	err
LEAF_NODE	2882:11	2882:11	3	)
LEAF_NODE	2882:12	2882:12	3	;
LEAF_NODE	2883:0	2883:0	2	}
FUNCTION_DEF	2886:0	2890:0	1	
RETURN_TYPE	2886:0	2886:7	2	static void
LEAF_NODE	2886:0	2886:0	3	static
TYPE_NAME	2886:7	2886:7	3	void
LEAF_NODE	2886:7	2886:7	4	void
FUNCTION_NAME	2886:12	2886:12	2	TIFFReadDirEntryCheckedByte
LEAF_NODE	2886:12	2886:12	3	TIFFReadDirEntryCheckedByte
PARAMETER_LIST	2886:39	2886:87	2	( TIFF * tif , TIFFDirEntry * direntry , uint8 * value )
LEAF_NODE	2886:39	2886:39	3	(
PARAMETER_DECL	2886:40	2886:46	3	TIFF * tif
TYPE	2886:40	2886:44	4	TIFF *
TYPE_NAME	2886:40	2886:40	5	TIFF
LEAF_NODE	2886:40	2886:40	6	TIFF
POINTER	2886:44	2886:44	5	*
LEAF_NODE	2886:44	2886:44	6	*
NAME	2886:46	2886:46	4	tif
LEAF_NODE	2886:46	2886:46	5	tif
LEAF_NODE	2886:49	2886:49	3	,
PARAMETER_DECL	2886:51	2886:65	3	TIFFDirEntry * direntry
TYPE	2886:51	2886:63	4	TIFFDirEntry *
TYPE_NAME	2886:51	2886:51	5	TIFFDirEntry
LEAF_NODE	2886:51	2886:51	6	TIFFDirEntry
POINTER	2886:63	2886:63	5	*
LEAF_NODE	2886:63	2886:63	6	*
NAME	2886:65	2886:65	4	direntry
LEAF_NODE	2886:65	2886:65	5	direntry
LEAF_NODE	2886:73	2886:73	3	,
PARAMETER_DECL	2886:75	2886:82	3	uint8 * value
TYPE	2886:75	2886:80	4	uint8 *
TYPE_NAME	2886:75	2886:75	5	uint8
LEAF_NODE	2886:75	2886:75	6	uint8
POINTER	2886:80	2886:80	5	*
LEAF_NODE	2886:80	2886:80	6	*
NAME	2886:82	2886:82	4	value
LEAF_NODE	2886:82	2886:82	5	value
LEAF_NODE	2886:87	2886:87	3	)
LEAF_NODE	2887:0	2887:0	2	{
STATEMENTS	2888:1	2889:9	2	
EXPR_STATEMENT	2888:1	2888:11	3	( void ) tif ;
EXPR	2888:1	2888:8	4	( void ) tif
LEAF_NODE	2888:1	2888:1	5	(
TYPE_NAME	2888:2	2888:2	5	void
LEAF_NODE	2888:2	2888:2	6	void
LEAF_NODE	2888:6	2888:6	5	)
FIELD	2888:8	2888:8	5	tif
LEAF_NODE	2888:8	2888:8	6	tif
LEAF_NODE	2888:11	2888:11	4	;
LEAF_NODE	2889:1	2889:1	3	*
LEAF_NODE	2889:2	2889:2	3	value
LEAF_NODE	2889:7	2889:7	3	=
LEAF_NODE	2889:8	2889:8	3	*
EXPR_STATEMENT	2889:9	2889:41	3	( uint8 * ) ( & direntry -> tdir_offset ) ;
EXPR	2889:9	2889:40	4	( uint8 * ) ( & direntry -> tdir_offset )
LEAF_NODE	2889:9	2889:9	5	(
TYPE_NAME	2889:10	2889:10	5	uint8
LEAF_NODE	2889:10	2889:10	6	uint8
LEAF_NODE	2889:15	2889:15	5	*
LEAF_NODE	2889:16	2889:16	5	)
LEAF_NODE	2889:17	2889:17	5	(
UNARY_EXPR	2889:18	2889:19	5	& direntry -> tdir_offset
UNARY_OPERATOR	2889:18	2889:18	6	&
LEAF_NODE	2889:18	2889:18	7	&
FIELD	2889:19	2889:29	6	direntry -> tdir_offset
LEAF_NODE	2889:19	2889:19	7	direntry
LEAF_NODE	2889:27	2889:27	7	->
LEAF_NODE	2889:29	2889:29	7	tdir_offset
LEAF_NODE	2889:40	2889:40	5	)
LEAF_NODE	2889:41	2889:41	4	;
LEAF_NODE	2890:0	2890:0	2	}
FUNCTION_DEF	2892:0	2896:0	1	
RETURN_TYPE	2892:0	2892:7	2	static void
LEAF_NODE	2892:0	2892:0	3	static
TYPE_NAME	2892:7	2892:7	3	void
LEAF_NODE	2892:7	2892:7	4	void
FUNCTION_NAME	2892:12	2892:12	2	TIFFReadDirEntryCheckedSbyte
LEAF_NODE	2892:12	2892:12	3	TIFFReadDirEntryCheckedSbyte
PARAMETER_LIST	2892:40	2892:87	2	( TIFF * tif , TIFFDirEntry * direntry , int8 * value )
LEAF_NODE	2892:40	2892:40	3	(
PARAMETER_DECL	2892:41	2892:47	3	TIFF * tif
TYPE	2892:41	2892:45	4	TIFF *
TYPE_NAME	2892:41	2892:41	5	TIFF
LEAF_NODE	2892:41	2892:41	6	TIFF
POINTER	2892:45	2892:45	5	*
LEAF_NODE	2892:45	2892:45	6	*
NAME	2892:47	2892:47	4	tif
LEAF_NODE	2892:47	2892:47	5	tif
LEAF_NODE	2892:50	2892:50	3	,
PARAMETER_DECL	2892:52	2892:66	3	TIFFDirEntry * direntry
TYPE	2892:52	2892:64	4	TIFFDirEntry *
TYPE_NAME	2892:52	2892:52	5	TIFFDirEntry
LEAF_NODE	2892:52	2892:52	6	TIFFDirEntry
POINTER	2892:64	2892:64	5	*
LEAF_NODE	2892:64	2892:64	6	*
NAME	2892:66	2892:66	4	direntry
LEAF_NODE	2892:66	2892:66	5	direntry
LEAF_NODE	2892:74	2892:74	3	,
PARAMETER_DECL	2892:76	2892:82	3	int8 * value
TYPE	2892:76	2892:80	4	int8 *
TYPE_NAME	2892:76	2892:76	5	int8
LEAF_NODE	2892:76	2892:76	6	int8
POINTER	2892:80	2892:80	5	*
LEAF_NODE	2892:80	2892:80	6	*
NAME	2892:82	2892:82	4	value
LEAF_NODE	2892:82	2892:82	5	value
LEAF_NODE	2892:87	2892:87	3	)
LEAF_NODE	2893:0	2893:0	2	{
STATEMENTS	2894:1	2895:9	2	
EXPR_STATEMENT	2894:1	2894:11	3	( void ) tif ;
EXPR	2894:1	2894:8	4	( void ) tif
LEAF_NODE	2894:1	2894:1	5	(
TYPE_NAME	2894:2	2894:2	5	void
LEAF_NODE	2894:2	2894:2	6	void
LEAF_NODE	2894:6	2894:6	5	)
FIELD	2894:8	2894:8	5	tif
LEAF_NODE	2894:8	2894:8	6	tif
LEAF_NODE	2894:11	2894:11	4	;
LEAF_NODE	2895:1	2895:1	3	*
LEAF_NODE	2895:2	2895:2	3	value
LEAF_NODE	2895:7	2895:7	3	=
LEAF_NODE	2895:8	2895:8	3	*
EXPR_STATEMENT	2895:9	2895:40	3	( int8 * ) ( & direntry -> tdir_offset ) ;
EXPR	2895:9	2895:39	4	( int8 * ) ( & direntry -> tdir_offset )
LEAF_NODE	2895:9	2895:9	5	(
TYPE_NAME	2895:10	2895:10	5	int8
LEAF_NODE	2895:10	2895:10	6	int8
LEAF_NODE	2895:14	2895:14	5	*
LEAF_NODE	2895:15	2895:15	5	)
LEAF_NODE	2895:16	2895:16	5	(
UNARY_EXPR	2895:17	2895:18	5	& direntry -> tdir_offset
UNARY_OPERATOR	2895:17	2895:17	6	&
LEAF_NODE	2895:17	2895:17	7	&
FIELD	2895:18	2895:28	6	direntry -> tdir_offset
LEAF_NODE	2895:18	2895:18	7	direntry
LEAF_NODE	2895:26	2895:26	7	->
LEAF_NODE	2895:28	2895:28	7	tdir_offset
LEAF_NODE	2895:39	2895:39	5	)
LEAF_NODE	2895:40	2895:40	4	;
LEAF_NODE	2896:0	2896:0	2	}
FUNCTION_DEF	2898:0	2904:0	1	
RETURN_TYPE	2898:0	2898:7	2	static void
LEAF_NODE	2898:0	2898:0	3	static
TYPE_NAME	2898:7	2898:7	3	void
LEAF_NODE	2898:7	2898:7	4	void
FUNCTION_NAME	2898:12	2898:12	2	TIFFReadDirEntryCheckedShort
LEAF_NODE	2898:12	2898:12	3	TIFFReadDirEntryCheckedShort
PARAMETER_LIST	2898:40	2898:89	2	( TIFF * tif , TIFFDirEntry * direntry , uint16 * value )
LEAF_NODE	2898:40	2898:40	3	(
PARAMETER_DECL	2898:41	2898:47	3	TIFF * tif
TYPE	2898:41	2898:45	4	TIFF *
TYPE_NAME	2898:41	2898:41	5	TIFF
LEAF_NODE	2898:41	2898:41	6	TIFF
POINTER	2898:45	2898:45	5	*
LEAF_NODE	2898:45	2898:45	6	*
NAME	2898:47	2898:47	4	tif
LEAF_NODE	2898:47	2898:47	5	tif
LEAF_NODE	2898:50	2898:50	3	,
PARAMETER_DECL	2898:52	2898:66	3	TIFFDirEntry * direntry
TYPE	2898:52	2898:64	4	TIFFDirEntry *
TYPE_NAME	2898:52	2898:52	5	TIFFDirEntry
LEAF_NODE	2898:52	2898:52	6	TIFFDirEntry
POINTER	2898:64	2898:64	5	*
LEAF_NODE	2898:64	2898:64	6	*
NAME	2898:66	2898:66	4	direntry
LEAF_NODE	2898:66	2898:66	5	direntry
LEAF_NODE	2898:74	2898:74	3	,
PARAMETER_DECL	2898:76	2898:84	3	uint16 * value
TYPE	2898:76	2898:82	4	uint16 *
TYPE_NAME	2898:76	2898:76	5	uint16
LEAF_NODE	2898:76	2898:76	6	uint16
POINTER	2898:82	2898:82	5	*
LEAF_NODE	2898:82	2898:82	6	*
NAME	2898:84	2898:84	4	value
LEAF_NODE	2898:84	2898:84	5	value
LEAF_NODE	2898:89	2898:89	3	)
LEAF_NODE	2899:0	2899:0	2	{
STATEMENTS	2900:1	2902:1	2	
EXPR_STATEMENT	2900:1	2900:42	3	* value = direntry -> tdir_offset . toff_short ;
EXPR	2900:1	2900:1	4	* value = direntry -> tdir_offset . toff_short
ASSIGN	2900:1	2900:10	5	* value = direntry -> tdir_offset . toff_short
LVAL	2900:1	2900:1	6	* value
UNARY_EXPR	2900:1	2900:2	7	* value
UNARY_OPERATOR	2900:1	2900:1	8	*
LEAF_NODE	2900:1	2900:1	9	*
FIELD	2900:2	2900:2	8	value
LEAF_NODE	2900:2	2900:2	9	value
ASSIGN_OP	2900:8	2900:8	6	=
LEAF_NODE	2900:8	2900:8	7	=
RVAL	2900:10	2900:10	6	direntry -> tdir_offset . toff_short
FIELD	2900:10	2900:32	7	direntry -> tdir_offset . toff_short
LEAF_NODE	2900:10	2900:10	8	direntry
LEAF_NODE	2900:18	2900:18	8	->
LEAF_NODE	2900:20	2900:20	8	tdir_offset
LEAF_NODE	2900:31	2900:31	8	.
LEAF_NODE	2900:32	2900:32	8	toff_short
LEAF_NODE	2900:42	2900:42	4	;
SELECTION	2902:1	2903:2	3	
KEYWORD	2902:1	2902:1	4	if
LEAF_NODE	2902:1	2902:1	5	if
LEAF_NODE	2902:4	2902:4	4	(
CONDITION	2902:5	2902:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2902:5	2902:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2902:5	2902:10	6	tif -> tif_flags
LEAF_NODE	2902:5	2902:5	7	tif
LEAF_NODE	2902:8	2902:8	7	->
LEAF_NODE	2902:10	2902:10	7	tif_flags
LEAF_NODE	2902:19	2902:19	6	&
FIELD	2902:20	2902:20	6	TIFF_SWAB
LEAF_NODE	2902:20	2902:20	7	TIFF_SWAB
LEAF_NODE	2902:29	2902:29	4	)
STATEMENTS	2903:2	2903:2	4	
EXPR_STATEMENT	2903:2	2903:22	5	TIFFSwabShort ( value ) ;
EXPR	2903:2	2903:2	6	TIFFSwabShort ( value )
FUNCTION_CALL	2903:2	2903:21	7	TIFFSwabShort ( value )
CALLEE	2903:2	2903:2	8	TIFFSwabShort
LEAF_NODE	2903:2	2903:2	9	TIFFSwabShort
LEAF_NODE	2903:15	2903:15	8	(
ARGUMENT	2903:16	2903:16	8	value
FIELD	2903:16	2903:16	9	value
LEAF_NODE	2903:16	2903:16	10	value
LEAF_NODE	2903:21	2903:21	8	)
LEAF_NODE	2903:22	2903:22	6	;
LEAF_NODE	2904:0	2904:0	2	}
FUNCTION_DEF	2906:0	2911:0	1	
RETURN_TYPE	2906:0	2906:7	2	static void
LEAF_NODE	2906:0	2906:0	3	static
TYPE_NAME	2906:7	2906:7	3	void
LEAF_NODE	2906:7	2906:7	4	void
FUNCTION_NAME	2906:12	2906:12	2	TIFFReadDirEntryCheckedSshort
LEAF_NODE	2906:12	2906:12	3	TIFFReadDirEntryCheckedSshort
PARAMETER_LIST	2906:41	2906:89	2	( TIFF * tif , TIFFDirEntry * direntry , int16 * value )
LEAF_NODE	2906:41	2906:41	3	(
PARAMETER_DECL	2906:42	2906:48	3	TIFF * tif
TYPE	2906:42	2906:46	4	TIFF *
TYPE_NAME	2906:42	2906:42	5	TIFF
LEAF_NODE	2906:42	2906:42	6	TIFF
POINTER	2906:46	2906:46	5	*
LEAF_NODE	2906:46	2906:46	6	*
NAME	2906:48	2906:48	4	tif
LEAF_NODE	2906:48	2906:48	5	tif
LEAF_NODE	2906:51	2906:51	3	,
PARAMETER_DECL	2906:53	2906:67	3	TIFFDirEntry * direntry
TYPE	2906:53	2906:65	4	TIFFDirEntry *
TYPE_NAME	2906:53	2906:53	5	TIFFDirEntry
LEAF_NODE	2906:53	2906:53	6	TIFFDirEntry
POINTER	2906:65	2906:65	5	*
LEAF_NODE	2906:65	2906:65	6	*
NAME	2906:67	2906:67	4	direntry
LEAF_NODE	2906:67	2906:67	5	direntry
LEAF_NODE	2906:75	2906:75	3	,
PARAMETER_DECL	2906:77	2906:84	3	int16 * value
TYPE	2906:77	2906:82	4	int16 *
TYPE_NAME	2906:77	2906:77	5	int16
LEAF_NODE	2906:77	2906:77	6	int16
POINTER	2906:82	2906:82	5	*
LEAF_NODE	2906:82	2906:82	6	*
NAME	2906:84	2906:84	4	value
LEAF_NODE	2906:84	2906:84	5	value
LEAF_NODE	2906:89	2906:89	3	)
LEAF_NODE	2907:0	2907:0	2	{
STATEMENTS	2908:1	2909:1	2	
LEAF_NODE	2908:1	2908:1	3	*
LEAF_NODE	2908:2	2908:2	3	value
LEAF_NODE	2908:7	2908:7	3	=
LEAF_NODE	2908:8	2908:8	3	*
EXPR_STATEMENT	2908:9	2908:41	3	( int16 * ) ( & direntry -> tdir_offset ) ;
EXPR	2908:9	2908:40	4	( int16 * ) ( & direntry -> tdir_offset )
LEAF_NODE	2908:9	2908:9	5	(
TYPE_NAME	2908:10	2908:10	5	int16
LEAF_NODE	2908:10	2908:10	6	int16
LEAF_NODE	2908:15	2908:15	5	*
LEAF_NODE	2908:16	2908:16	5	)
LEAF_NODE	2908:17	2908:17	5	(
UNARY_EXPR	2908:18	2908:19	5	& direntry -> tdir_offset
UNARY_OPERATOR	2908:18	2908:18	6	&
LEAF_NODE	2908:18	2908:18	7	&
FIELD	2908:19	2908:29	6	direntry -> tdir_offset
LEAF_NODE	2908:19	2908:19	7	direntry
LEAF_NODE	2908:27	2908:27	7	->
LEAF_NODE	2908:29	2908:29	7	tdir_offset
LEAF_NODE	2908:40	2908:40	5	)
LEAF_NODE	2908:41	2908:41	4	;
SELECTION	2909:1	2910:2	3	
KEYWORD	2909:1	2909:1	4	if
LEAF_NODE	2909:1	2909:1	5	if
LEAF_NODE	2909:4	2909:4	4	(
CONDITION	2909:5	2909:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2909:5	2909:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2909:5	2909:10	6	tif -> tif_flags
LEAF_NODE	2909:5	2909:5	7	tif
LEAF_NODE	2909:8	2909:8	7	->
LEAF_NODE	2909:10	2909:10	7	tif_flags
LEAF_NODE	2909:19	2909:19	6	&
FIELD	2909:20	2909:20	6	TIFF_SWAB
LEAF_NODE	2909:20	2909:20	7	TIFF_SWAB
LEAF_NODE	2909:29	2909:29	4	)
STATEMENTS	2910:2	2910:2	4	
EXPR_STATEMENT	2910:2	2910:31	5	TIFFSwabShort ( ( uint16 * ) value ) ;
EXPR	2910:2	2910:2	6	TIFFSwabShort ( ( uint16 * ) value )
FUNCTION_CALL	2910:2	2910:30	7	TIFFSwabShort ( ( uint16 * ) value )
CALLEE	2910:2	2910:2	8	TIFFSwabShort
LEAF_NODE	2910:2	2910:2	9	TIFFSwabShort
LEAF_NODE	2910:15	2910:15	8	(
ARGUMENT	2910:16	2910:25	8	( uint16 * ) value
LEAF_NODE	2910:16	2910:16	9	(
TYPE_NAME	2910:17	2910:17	9	uint16
LEAF_NODE	2910:17	2910:17	10	uint16
LEAF_NODE	2910:23	2910:23	9	*
LEAF_NODE	2910:24	2910:24	9	)
FIELD	2910:25	2910:25	9	value
LEAF_NODE	2910:25	2910:25	10	value
LEAF_NODE	2910:30	2910:30	8	)
LEAF_NODE	2910:31	2910:31	6	;
LEAF_NODE	2911:0	2911:0	2	}
FUNCTION_DEF	2913:0	2918:0	1	
RETURN_TYPE	2913:0	2913:7	2	static void
LEAF_NODE	2913:0	2913:0	3	static
TYPE_NAME	2913:7	2913:7	3	void
LEAF_NODE	2913:7	2913:7	4	void
FUNCTION_NAME	2913:12	2913:12	2	TIFFReadDirEntryCheckedLong
LEAF_NODE	2913:12	2913:12	3	TIFFReadDirEntryCheckedLong
PARAMETER_LIST	2913:39	2913:88	2	( TIFF * tif , TIFFDirEntry * direntry , uint32 * value )
LEAF_NODE	2913:39	2913:39	3	(
PARAMETER_DECL	2913:40	2913:46	3	TIFF * tif
TYPE	2913:40	2913:44	4	TIFF *
TYPE_NAME	2913:40	2913:40	5	TIFF
LEAF_NODE	2913:40	2913:40	6	TIFF
POINTER	2913:44	2913:44	5	*
LEAF_NODE	2913:44	2913:44	6	*
NAME	2913:46	2913:46	4	tif
LEAF_NODE	2913:46	2913:46	5	tif
LEAF_NODE	2913:49	2913:49	3	,
PARAMETER_DECL	2913:51	2913:65	3	TIFFDirEntry * direntry
TYPE	2913:51	2913:63	4	TIFFDirEntry *
TYPE_NAME	2913:51	2913:51	5	TIFFDirEntry
LEAF_NODE	2913:51	2913:51	6	TIFFDirEntry
POINTER	2913:63	2913:63	5	*
LEAF_NODE	2913:63	2913:63	6	*
NAME	2913:65	2913:65	4	direntry
LEAF_NODE	2913:65	2913:65	5	direntry
LEAF_NODE	2913:73	2913:73	3	,
PARAMETER_DECL	2913:75	2913:83	3	uint32 * value
TYPE	2913:75	2913:81	4	uint32 *
TYPE_NAME	2913:75	2913:75	5	uint32
LEAF_NODE	2913:75	2913:75	6	uint32
POINTER	2913:81	2913:81	5	*
LEAF_NODE	2913:81	2913:81	6	*
NAME	2913:83	2913:83	4	value
LEAF_NODE	2913:83	2913:83	5	value
LEAF_NODE	2913:88	2913:88	3	)
LEAF_NODE	2914:0	2914:0	2	{
STATEMENTS	2915:1	2916:1	2	
LEAF_NODE	2915:1	2915:1	3	*
LEAF_NODE	2915:2	2915:2	3	value
LEAF_NODE	2915:7	2915:7	3	=
LEAF_NODE	2915:8	2915:8	3	*
EXPR_STATEMENT	2915:9	2915:42	3	( uint32 * ) ( & direntry -> tdir_offset ) ;
EXPR	2915:9	2915:41	4	( uint32 * ) ( & direntry -> tdir_offset )
LEAF_NODE	2915:9	2915:9	5	(
TYPE_NAME	2915:10	2915:10	5	uint32
LEAF_NODE	2915:10	2915:10	6	uint32
LEAF_NODE	2915:16	2915:16	5	*
LEAF_NODE	2915:17	2915:17	5	)
LEAF_NODE	2915:18	2915:18	5	(
UNARY_EXPR	2915:19	2915:20	5	& direntry -> tdir_offset
UNARY_OPERATOR	2915:19	2915:19	6	&
LEAF_NODE	2915:19	2915:19	7	&
FIELD	2915:20	2915:30	6	direntry -> tdir_offset
LEAF_NODE	2915:20	2915:20	7	direntry
LEAF_NODE	2915:28	2915:28	7	->
LEAF_NODE	2915:30	2915:30	7	tdir_offset
LEAF_NODE	2915:41	2915:41	5	)
LEAF_NODE	2915:42	2915:42	4	;
SELECTION	2916:1	2917:2	3	
KEYWORD	2916:1	2916:1	4	if
LEAF_NODE	2916:1	2916:1	5	if
LEAF_NODE	2916:4	2916:4	4	(
CONDITION	2916:5	2916:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2916:5	2916:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2916:5	2916:10	6	tif -> tif_flags
LEAF_NODE	2916:5	2916:5	7	tif
LEAF_NODE	2916:8	2916:8	7	->
LEAF_NODE	2916:10	2916:10	7	tif_flags
LEAF_NODE	2916:19	2916:19	6	&
FIELD	2916:20	2916:20	6	TIFF_SWAB
LEAF_NODE	2916:20	2916:20	7	TIFF_SWAB
LEAF_NODE	2916:29	2916:29	4	)
STATEMENTS	2917:2	2917:2	4	
EXPR_STATEMENT	2917:2	2917:21	5	TIFFSwabLong ( value ) ;
EXPR	2917:2	2917:2	6	TIFFSwabLong ( value )
FUNCTION_CALL	2917:2	2917:20	7	TIFFSwabLong ( value )
CALLEE	2917:2	2917:2	8	TIFFSwabLong
LEAF_NODE	2917:2	2917:2	9	TIFFSwabLong
LEAF_NODE	2917:14	2917:14	8	(
ARGUMENT	2917:15	2917:15	8	value
FIELD	2917:15	2917:15	9	value
LEAF_NODE	2917:15	2917:15	10	value
LEAF_NODE	2917:20	2917:20	8	)
LEAF_NODE	2917:21	2917:21	6	;
LEAF_NODE	2918:0	2918:0	2	}
FUNCTION_DEF	2920:0	2925:0	1	
RETURN_TYPE	2920:0	2920:7	2	static void
LEAF_NODE	2920:0	2920:0	3	static
TYPE_NAME	2920:7	2920:7	3	void
LEAF_NODE	2920:7	2920:7	4	void
FUNCTION_NAME	2920:12	2920:12	2	TIFFReadDirEntryCheckedSlong
LEAF_NODE	2920:12	2920:12	3	TIFFReadDirEntryCheckedSlong
PARAMETER_LIST	2920:40	2920:88	2	( TIFF * tif , TIFFDirEntry * direntry , int32 * value )
LEAF_NODE	2920:40	2920:40	3	(
PARAMETER_DECL	2920:41	2920:47	3	TIFF * tif
TYPE	2920:41	2920:45	4	TIFF *
TYPE_NAME	2920:41	2920:41	5	TIFF
LEAF_NODE	2920:41	2920:41	6	TIFF
POINTER	2920:45	2920:45	5	*
LEAF_NODE	2920:45	2920:45	6	*
NAME	2920:47	2920:47	4	tif
LEAF_NODE	2920:47	2920:47	5	tif
LEAF_NODE	2920:50	2920:50	3	,
PARAMETER_DECL	2920:52	2920:66	3	TIFFDirEntry * direntry
TYPE	2920:52	2920:64	4	TIFFDirEntry *
TYPE_NAME	2920:52	2920:52	5	TIFFDirEntry
LEAF_NODE	2920:52	2920:52	6	TIFFDirEntry
POINTER	2920:64	2920:64	5	*
LEAF_NODE	2920:64	2920:64	6	*
NAME	2920:66	2920:66	4	direntry
LEAF_NODE	2920:66	2920:66	5	direntry
LEAF_NODE	2920:74	2920:74	3	,
PARAMETER_DECL	2920:76	2920:83	3	int32 * value
TYPE	2920:76	2920:81	4	int32 *
TYPE_NAME	2920:76	2920:76	5	int32
LEAF_NODE	2920:76	2920:76	6	int32
POINTER	2920:81	2920:81	5	*
LEAF_NODE	2920:81	2920:81	6	*
NAME	2920:83	2920:83	4	value
LEAF_NODE	2920:83	2920:83	5	value
LEAF_NODE	2920:88	2920:88	3	)
LEAF_NODE	2921:0	2921:0	2	{
STATEMENTS	2922:1	2923:1	2	
LEAF_NODE	2922:1	2922:1	3	*
LEAF_NODE	2922:2	2922:2	3	value
LEAF_NODE	2922:7	2922:7	3	=
LEAF_NODE	2922:8	2922:8	3	*
EXPR_STATEMENT	2922:9	2922:41	3	( int32 * ) ( & direntry -> tdir_offset ) ;
EXPR	2922:9	2922:40	4	( int32 * ) ( & direntry -> tdir_offset )
LEAF_NODE	2922:9	2922:9	5	(
TYPE_NAME	2922:10	2922:10	5	int32
LEAF_NODE	2922:10	2922:10	6	int32
LEAF_NODE	2922:15	2922:15	5	*
LEAF_NODE	2922:16	2922:16	5	)
LEAF_NODE	2922:17	2922:17	5	(
UNARY_EXPR	2922:18	2922:19	5	& direntry -> tdir_offset
UNARY_OPERATOR	2922:18	2922:18	6	&
LEAF_NODE	2922:18	2922:18	7	&
FIELD	2922:19	2922:29	6	direntry -> tdir_offset
LEAF_NODE	2922:19	2922:19	7	direntry
LEAF_NODE	2922:27	2922:27	7	->
LEAF_NODE	2922:29	2922:29	7	tdir_offset
LEAF_NODE	2922:40	2922:40	5	)
LEAF_NODE	2922:41	2922:41	4	;
SELECTION	2923:1	2924:2	3	
KEYWORD	2923:1	2923:1	4	if
LEAF_NODE	2923:1	2923:1	5	if
LEAF_NODE	2923:4	2923:4	4	(
CONDITION	2923:5	2923:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2923:5	2923:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2923:5	2923:10	6	tif -> tif_flags
LEAF_NODE	2923:5	2923:5	7	tif
LEAF_NODE	2923:8	2923:8	7	->
LEAF_NODE	2923:10	2923:10	7	tif_flags
LEAF_NODE	2923:19	2923:19	6	&
FIELD	2923:20	2923:20	6	TIFF_SWAB
LEAF_NODE	2923:20	2923:20	7	TIFF_SWAB
LEAF_NODE	2923:29	2923:29	4	)
STATEMENTS	2924:2	2924:2	4	
EXPR_STATEMENT	2924:2	2924:30	5	TIFFSwabLong ( ( uint32 * ) value ) ;
EXPR	2924:2	2924:2	6	TIFFSwabLong ( ( uint32 * ) value )
FUNCTION_CALL	2924:2	2924:29	7	TIFFSwabLong ( ( uint32 * ) value )
CALLEE	2924:2	2924:2	8	TIFFSwabLong
LEAF_NODE	2924:2	2924:2	9	TIFFSwabLong
LEAF_NODE	2924:14	2924:14	8	(
ARGUMENT	2924:15	2924:24	8	( uint32 * ) value
LEAF_NODE	2924:15	2924:15	9	(
TYPE_NAME	2924:16	2924:16	9	uint32
LEAF_NODE	2924:16	2924:16	10	uint32
LEAF_NODE	2924:22	2924:22	9	*
LEAF_NODE	2924:23	2924:23	9	)
FIELD	2924:24	2924:24	9	value
LEAF_NODE	2924:24	2924:24	10	value
LEAF_NODE	2924:29	2924:29	8	)
LEAF_NODE	2924:30	2924:30	6	;
LEAF_NODE	2925:0	2925:0	2	}
FUNCTION_DEF	2927:0	2944:0	1	
RETURN_TYPE	2927:0	2927:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2927:0	2927:0	3	static
TYPE_NAME	2927:7	2927:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2927:7	2927:7	4	enum
LEAF_NODE	2927:12	2927:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2927:32	2927:32	2	TIFFReadDirEntryCheckedLong8
LEAF_NODE	2927:32	2927:32	3	TIFFReadDirEntryCheckedLong8
PARAMETER_LIST	2927:60	2927:109	2	( TIFF * tif , TIFFDirEntry * direntry , uint64 * value )
LEAF_NODE	2927:60	2927:60	3	(
PARAMETER_DECL	2927:61	2927:67	3	TIFF * tif
TYPE	2927:61	2927:65	4	TIFF *
TYPE_NAME	2927:61	2927:61	5	TIFF
LEAF_NODE	2927:61	2927:61	6	TIFF
POINTER	2927:65	2927:65	5	*
LEAF_NODE	2927:65	2927:65	6	*
NAME	2927:67	2927:67	4	tif
LEAF_NODE	2927:67	2927:67	5	tif
LEAF_NODE	2927:70	2927:70	3	,
PARAMETER_DECL	2927:72	2927:86	3	TIFFDirEntry * direntry
TYPE	2927:72	2927:84	4	TIFFDirEntry *
TYPE_NAME	2927:72	2927:72	5	TIFFDirEntry
LEAF_NODE	2927:72	2927:72	6	TIFFDirEntry
POINTER	2927:84	2927:84	5	*
LEAF_NODE	2927:84	2927:84	6	*
NAME	2927:86	2927:86	4	direntry
LEAF_NODE	2927:86	2927:86	5	direntry
LEAF_NODE	2927:94	2927:94	3	,
PARAMETER_DECL	2927:96	2927:104	3	uint64 * value
TYPE	2927:96	2927:102	4	uint64 *
TYPE_NAME	2927:96	2927:96	5	uint64
LEAF_NODE	2927:96	2927:96	6	uint64
POINTER	2927:102	2927:102	5	*
LEAF_NODE	2927:102	2927:102	6	*
NAME	2927:104	2927:104	4	value
LEAF_NODE	2927:104	2927:104	5	value
LEAF_NODE	2927:109	2927:109	3	)
LEAF_NODE	2928:0	2928:0	2	{
STATEMENTS	2929:1	2943:30	2	
SELECTION	2929:1	2930:1	3	
KEYWORD	2929:1	2929:1	4	if
LEAF_NODE	2929:1	2929:1	5	if
LEAF_NODE	2929:4	2929:4	4	(
CONDITION	2929:5	2929:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2929:5	2929:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2929:5	2929:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2929:5	2929:5	7	!
LEAF_NODE	2929:5	2929:5	8	!
LEAF_NODE	2929:6	2929:6	7	(
FIELD	2929:7	2929:12	7	tif -> tif_flags
LEAF_NODE	2929:7	2929:7	8	tif
LEAF_NODE	2929:10	2929:10	8	->
LEAF_NODE	2929:12	2929:12	8	tif_flags
LEAF_NODE	2929:21	2929:21	7	&
FIELD	2929:22	2929:22	7	TIFF_BIGTIFF
LEAF_NODE	2929:22	2929:22	8	TIFF_BIGTIFF
LEAF_NODE	2929:34	2929:34	7	)
LEAF_NODE	2929:35	2929:35	4	)
STATEMENTS	2930:1	2938:1	4	
LEAF_NODE	2930:1	2930:1	5	{
STATEMENTS	2931:2	2937:14	5	
SIMPLE_DECL	2931:2	2931:30	6	enum TIFFReadDirEntryErr err ;
VAR_DECL	2931:2	2931:27	7	enum TIFFReadDirEntryErr err
TYPE	2931:2	2931:2	8	enum TIFFReadDirEntryErr
TYPE_NAME	2931:2	2931:7	9	enum TIFFReadDirEntryErr
LEAF_NODE	2931:2	2931:2	10	enum
LEAF_NODE	2931:7	2931:7	10	TIFFReadDirEntryErr
NAME	2931:27	2931:27	8	err
LEAF_NODE	2931:27	2931:27	9	err
LEAF_NODE	2931:30	2931:30	7	;
SIMPLE_DECL	2932:2	2932:49	6	uint32 offset ; offset = direntry -> tdir_offset . toff_long ;
VAR_DECL	2932:2	2932:9	7	uint32 offset ; offset = direntry -> tdir_offset . toff_long
TYPE	2932:2	2932:2	8	uint32
TYPE_NAME	2932:2	2932:2	9	uint32
LEAF_NODE	2932:2	2932:2	10	uint32
NAME	2932:9	2932:9	8	offset
LEAF_NODE	2932:9	2932:9	9	offset
LEAF_NODE	0:0	0:0	8	;
INIT	2932:9	2932:9	8	offset = direntry -> tdir_offset . toff_long
ASSIGN	2932:9	2932:18	9	offset = direntry -> tdir_offset . toff_long
LVAL	2932:9	2932:9	10	offset
NAME	2932:9	2932:9	11	offset
LEAF_NODE	2932:9	2932:9	12	offset
ASSIGN_OP	2932:16	2932:16	10	=
LEAF_NODE	2932:16	2932:16	11	=
RVAL	2932:18	2932:18	10	direntry -> tdir_offset . toff_long
FIELD	2932:18	2932:40	11	direntry -> tdir_offset . toff_long
LEAF_NODE	2932:18	2932:18	12	direntry
LEAF_NODE	2932:26	2932:26	12	->
LEAF_NODE	2932:28	2932:28	12	tdir_offset
LEAF_NODE	2932:39	2932:39	12	.
LEAF_NODE	2932:40	2932:40	12	toff_long
LEAF_NODE	2932:49	2932:49	7	;
SELECTION	2933:2	2934:3	6	
KEYWORD	2933:2	2933:2	7	if
LEAF_NODE	2933:2	2933:2	8	if
LEAF_NODE	2933:5	2933:5	7	(
CONDITION	2933:6	2933:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	2933:6	2933:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	2933:6	2933:11	9	tif -> tif_flags
LEAF_NODE	2933:6	2933:6	10	tif
LEAF_NODE	2933:9	2933:9	10	->
LEAF_NODE	2933:11	2933:11	10	tif_flags
LEAF_NODE	2933:20	2933:20	9	&
FIELD	2933:21	2933:21	9	TIFF_SWAB
LEAF_NODE	2933:21	2933:21	10	TIFF_SWAB
LEAF_NODE	2933:30	2933:30	7	)
STATEMENTS	2934:3	2934:3	7	
EXPR_STATEMENT	2934:3	2934:24	8	TIFFSwabLong ( & offset ) ;
EXPR	2934:3	2934:3	9	TIFFSwabLong ( & offset )
FUNCTION_CALL	2934:3	2934:23	10	TIFFSwabLong ( & offset )
CALLEE	2934:3	2934:3	11	TIFFSwabLong
LEAF_NODE	2934:3	2934:3	12	TIFFSwabLong
LEAF_NODE	2934:15	2934:15	11	(
ARGUMENT	2934:16	2934:16	11	& offset
UNARY_EXPR	2934:16	2934:17	12	& offset
UNARY_OPERATOR	2934:16	2934:16	13	&
LEAF_NODE	2934:16	2934:16	14	&
FIELD	2934:17	2934:17	13	offset
LEAF_NODE	2934:17	2934:17	14	offset
LEAF_NODE	2934:23	2934:23	11	)
LEAF_NODE	2934:24	2934:24	9	;
EXPR_STATEMENT	2935:2	2935:46	6	err = TIFFReadDirEntryData ( tif , offset , 8 , value ) ;
EXPR	2935:2	2935:2	7	err = TIFFReadDirEntryData ( tif , offset , 8 , value )
ASSIGN	2935:2	2935:6	8	err = TIFFReadDirEntryData ( tif , offset , 8 , value )
LVAL	2935:2	2935:2	9	err
FIELD	2935:2	2935:2	10	err
LEAF_NODE	2935:2	2935:2	11	err
ASSIGN_OP	2935:5	2935:5	9	=
LEAF_NODE	2935:5	2935:5	10	=
RVAL	2935:6	2935:6	9	TIFFReadDirEntryData ( tif , offset , 8 , value )
FUNCTION_CALL	2935:6	2935:45	10	TIFFReadDirEntryData ( tif , offset , 8 , value )
CALLEE	2935:6	2935:6	11	TIFFReadDirEntryData
LEAF_NODE	2935:6	2935:6	12	TIFFReadDirEntryData
LEAF_NODE	2935:26	2935:26	11	(
ARGUMENT	2935:27	2935:27	11	tif
FIELD	2935:27	2935:27	12	tif
LEAF_NODE	2935:27	2935:27	13	tif
LEAF_NODE	2935:30	2935:30	11	,
ARGUMENT	2935:31	2935:31	11	offset
FIELD	2935:31	2935:31	12	offset
LEAF_NODE	2935:31	2935:31	13	offset
LEAF_NODE	2935:37	2935:37	11	,
ARGUMENT	2935:38	2935:38	11	8
FIELD	2935:38	2935:38	12	8
LEAF_NODE	2935:38	2935:38	13	8
LEAF_NODE	2935:39	2935:39	11	,
ARGUMENT	2935:40	2935:40	11	value
FIELD	2935:40	2935:40	12	value
LEAF_NODE	2935:40	2935:40	13	value
LEAF_NODE	2935:45	2935:45	11	)
LEAF_NODE	2935:46	2935:46	7	;
SELECTION	2936:2	2937:3	6	
KEYWORD	2936:2	2936:2	7	if
LEAF_NODE	2936:2	2936:2	8	if
LEAF_NODE	2936:5	2936:5	7	(
CONDITION	2936:6	2936:6	7	err != TIFFReadDirEntryErrOk
EXPR	2936:6	2936:11	8	err != TIFFReadDirEntryErrOk
FIELD	2936:6	2936:6	9	err
LEAF_NODE	2936:6	2936:6	10	err
EQ_OPERATOR	2936:9	2936:9	9	!=
LEAF_NODE	2936:9	2936:9	10	!=
FIELD	2936:11	2936:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	2936:11	2936:11	10	TIFFReadDirEntryErrOk
LEAF_NODE	2936:32	2936:32	7	)
STATEMENTS	2937:3	2937:3	7	
LEAF_NODE	2937:3	2937:3	8	return
LEAF_NODE	2937:9	2937:9	6	(
LEAF_NODE	2937:10	2937:10	6	err
LEAF_NODE	2937:13	2937:13	6	)
LEAF_NODE	2937:14	2937:14	6	;
LEAF_NODE	2938:1	2938:1	5	}
SELECTION	2939:1	2940:2	3	
KEYWORD	2939:1	2939:1	4	else
LEAF_NODE	2939:1	2939:1	5	else
STATEMENTS	2940:2	2940:2	4	
EXPR_STATEMENT	2940:2	2940:43	5	* value = direntry -> tdir_offset . toff_long8 ;
EXPR	2940:2	2940:2	6	* value = direntry -> tdir_offset . toff_long8
ASSIGN	2940:2	2940:11	7	* value = direntry -> tdir_offset . toff_long8
LVAL	2940:2	2940:2	8	* value
UNARY_EXPR	2940:2	2940:3	9	* value
UNARY_OPERATOR	2940:2	2940:2	10	*
LEAF_NODE	2940:2	2940:2	11	*
FIELD	2940:3	2940:3	10	value
LEAF_NODE	2940:3	2940:3	11	value
ASSIGN_OP	2940:9	2940:9	8	=
LEAF_NODE	2940:9	2940:9	9	=
RVAL	2940:11	2940:11	8	direntry -> tdir_offset . toff_long8
FIELD	2940:11	2940:33	9	direntry -> tdir_offset . toff_long8
LEAF_NODE	2940:11	2940:11	10	direntry
LEAF_NODE	2940:19	2940:19	10	->
LEAF_NODE	2940:21	2940:21	10	tdir_offset
LEAF_NODE	2940:32	2940:32	10	.
LEAF_NODE	2940:33	2940:33	10	toff_long8
LEAF_NODE	2940:43	2940:43	6	;
SELECTION	2941:1	2942:2	3	
KEYWORD	2941:1	2941:1	4	if
LEAF_NODE	2941:1	2941:1	5	if
LEAF_NODE	2941:4	2941:4	4	(
CONDITION	2941:5	2941:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2941:5	2941:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2941:5	2941:10	6	tif -> tif_flags
LEAF_NODE	2941:5	2941:5	7	tif
LEAF_NODE	2941:8	2941:8	7	->
LEAF_NODE	2941:10	2941:10	7	tif_flags
LEAF_NODE	2941:19	2941:19	6	&
FIELD	2941:20	2941:20	6	TIFF_SWAB
LEAF_NODE	2941:20	2941:20	7	TIFF_SWAB
LEAF_NODE	2941:29	2941:29	4	)
STATEMENTS	2942:2	2942:2	4	
EXPR_STATEMENT	2942:2	2942:22	5	TIFFSwabLong8 ( value ) ;
EXPR	2942:2	2942:2	6	TIFFSwabLong8 ( value )
FUNCTION_CALL	2942:2	2942:21	7	TIFFSwabLong8 ( value )
CALLEE	2942:2	2942:2	8	TIFFSwabLong8
LEAF_NODE	2942:2	2942:2	9	TIFFSwabLong8
LEAF_NODE	2942:15	2942:15	8	(
ARGUMENT	2942:16	2942:16	8	value
FIELD	2942:16	2942:16	9	value
LEAF_NODE	2942:16	2942:16	10	value
LEAF_NODE	2942:21	2942:21	8	)
LEAF_NODE	2942:22	2942:22	6	;
LEAF_NODE	2943:1	2943:1	3	return
LEAF_NODE	2943:7	2943:7	3	(
LEAF_NODE	2943:8	2943:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2943:29	2943:29	3	)
LEAF_NODE	2943:30	2943:30	3	;
LEAF_NODE	2944:0	2944:0	2	}
FUNCTION_DEF	2946:0	2963:0	1	
RETURN_TYPE	2946:0	2946:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2946:0	2946:0	3	static
TYPE_NAME	2946:7	2946:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2946:7	2946:7	4	enum
LEAF_NODE	2946:12	2946:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2946:32	2946:32	2	TIFFReadDirEntryCheckedSlong8
LEAF_NODE	2946:32	2946:32	3	TIFFReadDirEntryCheckedSlong8
PARAMETER_LIST	2946:61	2946:109	2	( TIFF * tif , TIFFDirEntry * direntry , int64 * value )
LEAF_NODE	2946:61	2946:61	3	(
PARAMETER_DECL	2946:62	2946:68	3	TIFF * tif
TYPE	2946:62	2946:66	4	TIFF *
TYPE_NAME	2946:62	2946:62	5	TIFF
LEAF_NODE	2946:62	2946:62	6	TIFF
POINTER	2946:66	2946:66	5	*
LEAF_NODE	2946:66	2946:66	6	*
NAME	2946:68	2946:68	4	tif
LEAF_NODE	2946:68	2946:68	5	tif
LEAF_NODE	2946:71	2946:71	3	,
PARAMETER_DECL	2946:73	2946:87	3	TIFFDirEntry * direntry
TYPE	2946:73	2946:85	4	TIFFDirEntry *
TYPE_NAME	2946:73	2946:73	5	TIFFDirEntry
LEAF_NODE	2946:73	2946:73	6	TIFFDirEntry
POINTER	2946:85	2946:85	5	*
LEAF_NODE	2946:85	2946:85	6	*
NAME	2946:87	2946:87	4	direntry
LEAF_NODE	2946:87	2946:87	5	direntry
LEAF_NODE	2946:95	2946:95	3	,
PARAMETER_DECL	2946:97	2946:104	3	int64 * value
TYPE	2946:97	2946:102	4	int64 *
TYPE_NAME	2946:97	2946:97	5	int64
LEAF_NODE	2946:97	2946:97	6	int64
POINTER	2946:102	2946:102	5	*
LEAF_NODE	2946:102	2946:102	6	*
NAME	2946:104	2946:104	4	value
LEAF_NODE	2946:104	2946:104	5	value
LEAF_NODE	2946:109	2946:109	3	)
LEAF_NODE	2947:0	2947:0	2	{
STATEMENTS	2948:1	2962:30	2	
SELECTION	2948:1	2949:1	3	
KEYWORD	2948:1	2948:1	4	if
LEAF_NODE	2948:1	2948:1	5	if
LEAF_NODE	2948:4	2948:4	4	(
CONDITION	2948:5	2948:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2948:5	2948:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2948:5	2948:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2948:5	2948:5	7	!
LEAF_NODE	2948:5	2948:5	8	!
LEAF_NODE	2948:6	2948:6	7	(
FIELD	2948:7	2948:12	7	tif -> tif_flags
LEAF_NODE	2948:7	2948:7	8	tif
LEAF_NODE	2948:10	2948:10	8	->
LEAF_NODE	2948:12	2948:12	8	tif_flags
LEAF_NODE	2948:21	2948:21	7	&
FIELD	2948:22	2948:22	7	TIFF_BIGTIFF
LEAF_NODE	2948:22	2948:22	8	TIFF_BIGTIFF
LEAF_NODE	2948:34	2948:34	7	)
LEAF_NODE	2948:35	2948:35	4	)
STATEMENTS	2949:1	2957:1	4	
LEAF_NODE	2949:1	2949:1	5	{
STATEMENTS	2950:2	2956:14	5	
SIMPLE_DECL	2950:2	2950:30	6	enum TIFFReadDirEntryErr err ;
VAR_DECL	2950:2	2950:27	7	enum TIFFReadDirEntryErr err
TYPE	2950:2	2950:2	8	enum TIFFReadDirEntryErr
TYPE_NAME	2950:2	2950:7	9	enum TIFFReadDirEntryErr
LEAF_NODE	2950:2	2950:2	10	enum
LEAF_NODE	2950:7	2950:7	10	TIFFReadDirEntryErr
NAME	2950:27	2950:27	8	err
LEAF_NODE	2950:27	2950:27	9	err
LEAF_NODE	2950:30	2950:30	7	;
SIMPLE_DECL	2951:2	2951:49	6	uint32 offset ; offset = direntry -> tdir_offset . toff_long ;
VAR_DECL	2951:2	2951:9	7	uint32 offset ; offset = direntry -> tdir_offset . toff_long
TYPE	2951:2	2951:2	8	uint32
TYPE_NAME	2951:2	2951:2	9	uint32
LEAF_NODE	2951:2	2951:2	10	uint32
NAME	2951:9	2951:9	8	offset
LEAF_NODE	2951:9	2951:9	9	offset
LEAF_NODE	0:0	0:0	8	;
INIT	2951:9	2951:9	8	offset = direntry -> tdir_offset . toff_long
ASSIGN	2951:9	2951:18	9	offset = direntry -> tdir_offset . toff_long
LVAL	2951:9	2951:9	10	offset
NAME	2951:9	2951:9	11	offset
LEAF_NODE	2951:9	2951:9	12	offset
ASSIGN_OP	2951:16	2951:16	10	=
LEAF_NODE	2951:16	2951:16	11	=
RVAL	2951:18	2951:18	10	direntry -> tdir_offset . toff_long
FIELD	2951:18	2951:40	11	direntry -> tdir_offset . toff_long
LEAF_NODE	2951:18	2951:18	12	direntry
LEAF_NODE	2951:26	2951:26	12	->
LEAF_NODE	2951:28	2951:28	12	tdir_offset
LEAF_NODE	2951:39	2951:39	12	.
LEAF_NODE	2951:40	2951:40	12	toff_long
LEAF_NODE	2951:49	2951:49	7	;
SELECTION	2952:2	2953:3	6	
KEYWORD	2952:2	2952:2	7	if
LEAF_NODE	2952:2	2952:2	8	if
LEAF_NODE	2952:5	2952:5	7	(
CONDITION	2952:6	2952:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	2952:6	2952:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	2952:6	2952:11	9	tif -> tif_flags
LEAF_NODE	2952:6	2952:6	10	tif
LEAF_NODE	2952:9	2952:9	10	->
LEAF_NODE	2952:11	2952:11	10	tif_flags
LEAF_NODE	2952:20	2952:20	9	&
FIELD	2952:21	2952:21	9	TIFF_SWAB
LEAF_NODE	2952:21	2952:21	10	TIFF_SWAB
LEAF_NODE	2952:30	2952:30	7	)
STATEMENTS	2953:3	2953:3	7	
EXPR_STATEMENT	2953:3	2953:24	8	TIFFSwabLong ( & offset ) ;
EXPR	2953:3	2953:3	9	TIFFSwabLong ( & offset )
FUNCTION_CALL	2953:3	2953:23	10	TIFFSwabLong ( & offset )
CALLEE	2953:3	2953:3	11	TIFFSwabLong
LEAF_NODE	2953:3	2953:3	12	TIFFSwabLong
LEAF_NODE	2953:15	2953:15	11	(
ARGUMENT	2953:16	2953:16	11	& offset
UNARY_EXPR	2953:16	2953:17	12	& offset
UNARY_OPERATOR	2953:16	2953:16	13	&
LEAF_NODE	2953:16	2953:16	14	&
FIELD	2953:17	2953:17	13	offset
LEAF_NODE	2953:17	2953:17	14	offset
LEAF_NODE	2953:23	2953:23	11	)
LEAF_NODE	2953:24	2953:24	9	;
EXPR_STATEMENT	2954:2	2954:46	6	err = TIFFReadDirEntryData ( tif , offset , 8 , value ) ;
EXPR	2954:2	2954:2	7	err = TIFFReadDirEntryData ( tif , offset , 8 , value )
ASSIGN	2954:2	2954:6	8	err = TIFFReadDirEntryData ( tif , offset , 8 , value )
LVAL	2954:2	2954:2	9	err
FIELD	2954:2	2954:2	10	err
LEAF_NODE	2954:2	2954:2	11	err
ASSIGN_OP	2954:5	2954:5	9	=
LEAF_NODE	2954:5	2954:5	10	=
RVAL	2954:6	2954:6	9	TIFFReadDirEntryData ( tif , offset , 8 , value )
FUNCTION_CALL	2954:6	2954:45	10	TIFFReadDirEntryData ( tif , offset , 8 , value )
CALLEE	2954:6	2954:6	11	TIFFReadDirEntryData
LEAF_NODE	2954:6	2954:6	12	TIFFReadDirEntryData
LEAF_NODE	2954:26	2954:26	11	(
ARGUMENT	2954:27	2954:27	11	tif
FIELD	2954:27	2954:27	12	tif
LEAF_NODE	2954:27	2954:27	13	tif
LEAF_NODE	2954:30	2954:30	11	,
ARGUMENT	2954:31	2954:31	11	offset
FIELD	2954:31	2954:31	12	offset
LEAF_NODE	2954:31	2954:31	13	offset
LEAF_NODE	2954:37	2954:37	11	,
ARGUMENT	2954:38	2954:38	11	8
FIELD	2954:38	2954:38	12	8
LEAF_NODE	2954:38	2954:38	13	8
LEAF_NODE	2954:39	2954:39	11	,
ARGUMENT	2954:40	2954:40	11	value
FIELD	2954:40	2954:40	12	value
LEAF_NODE	2954:40	2954:40	13	value
LEAF_NODE	2954:45	2954:45	11	)
LEAF_NODE	2954:46	2954:46	7	;
SELECTION	2955:2	2956:3	6	
KEYWORD	2955:2	2955:2	7	if
LEAF_NODE	2955:2	2955:2	8	if
LEAF_NODE	2955:5	2955:5	7	(
CONDITION	2955:6	2955:6	7	err != TIFFReadDirEntryErrOk
EXPR	2955:6	2955:11	8	err != TIFFReadDirEntryErrOk
FIELD	2955:6	2955:6	9	err
LEAF_NODE	2955:6	2955:6	10	err
EQ_OPERATOR	2955:9	2955:9	9	!=
LEAF_NODE	2955:9	2955:9	10	!=
FIELD	2955:11	2955:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	2955:11	2955:11	10	TIFFReadDirEntryErrOk
LEAF_NODE	2955:32	2955:32	7	)
STATEMENTS	2956:3	2956:3	7	
LEAF_NODE	2956:3	2956:3	8	return
LEAF_NODE	2956:9	2956:9	6	(
LEAF_NODE	2956:10	2956:10	6	err
LEAF_NODE	2956:13	2956:13	6	)
LEAF_NODE	2956:14	2956:14	6	;
LEAF_NODE	2957:1	2957:1	5	}
SELECTION	2958:1	2959:2	3	
KEYWORD	2958:1	2958:1	4	else
LEAF_NODE	2958:1	2958:1	5	else
STATEMENTS	2959:2	2959:2	4	
LEAF_NODE	2959:2	2959:2	5	*
LEAF_NODE	2959:3	2959:3	3	value
LEAF_NODE	2959:8	2959:8	3	=
LEAF_NODE	2959:9	2959:9	3	*
EXPR_STATEMENT	2959:10	2959:42	3	( int64 * ) ( & direntry -> tdir_offset ) ;
EXPR	2959:10	2959:41	4	( int64 * ) ( & direntry -> tdir_offset )
LEAF_NODE	2959:10	2959:10	5	(
TYPE_NAME	2959:11	2959:11	5	int64
LEAF_NODE	2959:11	2959:11	6	int64
LEAF_NODE	2959:16	2959:16	5	*
LEAF_NODE	2959:17	2959:17	5	)
LEAF_NODE	2959:18	2959:18	5	(
UNARY_EXPR	2959:19	2959:20	5	& direntry -> tdir_offset
UNARY_OPERATOR	2959:19	2959:19	6	&
LEAF_NODE	2959:19	2959:19	7	&
FIELD	2959:20	2959:30	6	direntry -> tdir_offset
LEAF_NODE	2959:20	2959:20	7	direntry
LEAF_NODE	2959:28	2959:28	7	->
LEAF_NODE	2959:30	2959:30	7	tdir_offset
LEAF_NODE	2959:41	2959:41	5	)
LEAF_NODE	2959:42	2959:42	4	;
SELECTION	2960:1	2961:2	3	
KEYWORD	2960:1	2960:1	4	if
LEAF_NODE	2960:1	2960:1	5	if
LEAF_NODE	2960:4	2960:4	4	(
CONDITION	2960:5	2960:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2960:5	2960:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2960:5	2960:10	6	tif -> tif_flags
LEAF_NODE	2960:5	2960:5	7	tif
LEAF_NODE	2960:8	2960:8	7	->
LEAF_NODE	2960:10	2960:10	7	tif_flags
LEAF_NODE	2960:19	2960:19	6	&
FIELD	2960:20	2960:20	6	TIFF_SWAB
LEAF_NODE	2960:20	2960:20	7	TIFF_SWAB
LEAF_NODE	2960:29	2960:29	4	)
STATEMENTS	2961:2	2961:2	4	
EXPR_STATEMENT	2961:2	2961:31	5	TIFFSwabLong8 ( ( uint64 * ) value ) ;
EXPR	2961:2	2961:2	6	TIFFSwabLong8 ( ( uint64 * ) value )
FUNCTION_CALL	2961:2	2961:30	7	TIFFSwabLong8 ( ( uint64 * ) value )
CALLEE	2961:2	2961:2	8	TIFFSwabLong8
LEAF_NODE	2961:2	2961:2	9	TIFFSwabLong8
LEAF_NODE	2961:15	2961:15	8	(
ARGUMENT	2961:16	2961:25	8	( uint64 * ) value
LEAF_NODE	2961:16	2961:16	9	(
TYPE_NAME	2961:17	2961:17	9	uint64
LEAF_NODE	2961:17	2961:17	10	uint64
LEAF_NODE	2961:23	2961:23	9	*
LEAF_NODE	2961:24	2961:24	9	)
FIELD	2961:25	2961:25	9	value
LEAF_NODE	2961:25	2961:25	10	value
LEAF_NODE	2961:30	2961:30	8	)
LEAF_NODE	2961:31	2961:31	6	;
LEAF_NODE	2962:1	2962:1	3	return
LEAF_NODE	2962:7	2962:7	3	(
LEAF_NODE	2962:8	2962:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2962:29	2962:29	3	)
LEAF_NODE	2962:30	2962:30	3	;
LEAF_NODE	2963:0	2963:0	2	}
FUNCTION_DEF	2965:0	2994:0	1	
RETURN_TYPE	2965:0	2965:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2965:0	2965:0	3	static
TYPE_NAME	2965:7	2965:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2965:7	2965:7	4	enum
LEAF_NODE	2965:12	2965:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2965:32	2965:32	2	TIFFReadDirEntryCheckedRational
LEAF_NODE	2965:32	2965:32	3	TIFFReadDirEntryCheckedRational
PARAMETER_LIST	2965:63	2965:112	2	( TIFF * tif , TIFFDirEntry * direntry , double * value )
LEAF_NODE	2965:63	2965:63	3	(
PARAMETER_DECL	2965:64	2965:70	3	TIFF * tif
TYPE	2965:64	2965:68	4	TIFF *
TYPE_NAME	2965:64	2965:64	5	TIFF
LEAF_NODE	2965:64	2965:64	6	TIFF
POINTER	2965:68	2965:68	5	*
LEAF_NODE	2965:68	2965:68	6	*
NAME	2965:70	2965:70	4	tif
LEAF_NODE	2965:70	2965:70	5	tif
LEAF_NODE	2965:73	2965:73	3	,
PARAMETER_DECL	2965:75	2965:89	3	TIFFDirEntry * direntry
TYPE	2965:75	2965:87	4	TIFFDirEntry *
TYPE_NAME	2965:75	2965:75	5	TIFFDirEntry
LEAF_NODE	2965:75	2965:75	6	TIFFDirEntry
POINTER	2965:87	2965:87	5	*
LEAF_NODE	2965:87	2965:87	6	*
NAME	2965:89	2965:89	4	direntry
LEAF_NODE	2965:89	2965:89	5	direntry
LEAF_NODE	2965:97	2965:97	3	,
PARAMETER_DECL	2965:99	2965:107	3	double * value
TYPE	2965:99	2965:105	4	double *
TYPE_NAME	2965:99	2965:99	5	double
LEAF_NODE	2965:99	2965:99	6	double
POINTER	2965:105	2965:105	5	*
LEAF_NODE	2965:105	2965:105	6	*
NAME	2965:107	2965:107	4	value
LEAF_NODE	2965:107	2965:107	5	value
LEAF_NODE	2965:112	2965:112	3	)
LEAF_NODE	2966:0	2966:0	2	{
STATEMENTS	2967:1	2993:30	2	
SIMPLE_DECL	2967:1	2967:18	3	UInt64Aligned_t m ;
VAR_DECL	2967:1	2967:17	4	UInt64Aligned_t m
TYPE	2967:1	2967:1	5	UInt64Aligned_t
TYPE_NAME	2967:1	2967:1	6	UInt64Aligned_t
LEAF_NODE	2967:1	2967:1	7	UInt64Aligned_t
NAME	2967:17	2967:17	5	m
LEAF_NODE	2967:17	2967:17	6	m
LEAF_NODE	2967:18	2967:18	4	;
EXPR_STATEMENT	2969:1	2969:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	2969:1	2969:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	2969:1	2969:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	2969:1	2969:1	6	assert
LEAF_NODE	2969:1	2969:1	7	assert
LEAF_NODE	2969:7	2969:7	6	(
ARGUMENT	2969:8	2969:24	6	sizeof ( double ) == 8
FUNCTION_CALL	2969:8	2969:21	7	sizeof ( double )
CALLEE	2969:8	2969:8	8	sizeof
LEAF_NODE	2969:8	2969:8	9	sizeof
LEAF_NODE	2969:14	2969:14	8	(
ARGUMENT	2969:15	2969:15	8	double
FIELD	2969:15	2969:15	9	double
LEAF_NODE	2969:15	2969:15	10	double
LEAF_NODE	2969:21	2969:21	8	)
EQ_OPERATOR	2969:22	2969:22	7	==
LEAF_NODE	2969:22	2969:22	8	==
FIELD	2969:24	2969:24	7	8
LEAF_NODE	2969:24	2969:24	8	8
LEAF_NODE	2969:25	2969:25	6	)
LEAF_NODE	2969:26	2969:26	4	;
EXPR_STATEMENT	2970:1	2970:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	2970:1	2970:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	2970:1	2970:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	2970:1	2970:1	6	assert
LEAF_NODE	2970:1	2970:1	7	assert
LEAF_NODE	2970:7	2970:7	6	(
ARGUMENT	2970:8	2970:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	2970:8	2970:21	7	sizeof ( uint64 )
CALLEE	2970:8	2970:8	8	sizeof
LEAF_NODE	2970:8	2970:8	9	sizeof
LEAF_NODE	2970:14	2970:14	8	(
ARGUMENT	2970:15	2970:15	8	uint64
FIELD	2970:15	2970:15	9	uint64
LEAF_NODE	2970:15	2970:15	10	uint64
LEAF_NODE	2970:21	2970:21	8	)
EQ_OPERATOR	2970:22	2970:22	7	==
LEAF_NODE	2970:22	2970:22	8	==
FIELD	2970:24	2970:24	7	8
LEAF_NODE	2970:24	2970:24	8	8
LEAF_NODE	2970:25	2970:25	6	)
LEAF_NODE	2970:26	2970:26	4	;
EXPR_STATEMENT	2971:1	2971:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	2971:1	2971:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	2971:1	2971:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	2971:1	2971:1	6	assert
LEAF_NODE	2971:1	2971:1	7	assert
LEAF_NODE	2971:7	2971:7	6	(
ARGUMENT	2971:8	2971:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	2971:8	2971:21	7	sizeof ( uint32 )
CALLEE	2971:8	2971:8	8	sizeof
LEAF_NODE	2971:8	2971:8	9	sizeof
LEAF_NODE	2971:14	2971:14	8	(
ARGUMENT	2971:15	2971:15	8	uint32
FIELD	2971:15	2971:15	9	uint32
LEAF_NODE	2971:15	2971:15	10	uint32
LEAF_NODE	2971:21	2971:21	8	)
EQ_OPERATOR	2971:22	2971:22	7	==
LEAF_NODE	2971:22	2971:22	8	==
FIELD	2971:24	2971:24	7	4
LEAF_NODE	2971:24	2971:24	8	4
LEAF_NODE	2971:25	2971:25	6	)
LEAF_NODE	2971:26	2971:26	4	;
SELECTION	2972:1	2973:1	3	
KEYWORD	2972:1	2972:1	4	if
LEAF_NODE	2972:1	2972:1	5	if
LEAF_NODE	2972:4	2972:4	4	(
CONDITION	2972:5	2972:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	2972:5	2972:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	2972:5	2972:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	2972:5	2972:5	7	!
LEAF_NODE	2972:5	2972:5	8	!
LEAF_NODE	2972:6	2972:6	7	(
FIELD	2972:7	2972:12	7	tif -> tif_flags
LEAF_NODE	2972:7	2972:7	8	tif
LEAF_NODE	2972:10	2972:10	8	->
LEAF_NODE	2972:12	2972:12	8	tif_flags
LEAF_NODE	2972:21	2972:21	7	&
FIELD	2972:22	2972:22	7	TIFF_BIGTIFF
LEAF_NODE	2972:22	2972:22	8	TIFF_BIGTIFF
LEAF_NODE	2972:34	2972:34	7	)
LEAF_NODE	2972:35	2972:35	4	)
STATEMENTS	2973:1	2981:1	4	
LEAF_NODE	2973:1	2973:1	5	{
STATEMENTS	2974:2	2980:14	5	
SIMPLE_DECL	2974:2	2974:30	6	enum TIFFReadDirEntryErr err ;
VAR_DECL	2974:2	2974:27	7	enum TIFFReadDirEntryErr err
TYPE	2974:2	2974:2	8	enum TIFFReadDirEntryErr
TYPE_NAME	2974:2	2974:7	9	enum TIFFReadDirEntryErr
LEAF_NODE	2974:2	2974:2	10	enum
LEAF_NODE	2974:7	2974:7	10	TIFFReadDirEntryErr
NAME	2974:27	2974:27	8	err
LEAF_NODE	2974:27	2974:27	9	err
LEAF_NODE	2974:30	2974:30	7	;
SIMPLE_DECL	2975:2	2975:49	6	uint32 offset ; offset = direntry -> tdir_offset . toff_long ;
VAR_DECL	2975:2	2975:9	7	uint32 offset ; offset = direntry -> tdir_offset . toff_long
TYPE	2975:2	2975:2	8	uint32
TYPE_NAME	2975:2	2975:2	9	uint32
LEAF_NODE	2975:2	2975:2	10	uint32
NAME	2975:9	2975:9	8	offset
LEAF_NODE	2975:9	2975:9	9	offset
LEAF_NODE	0:0	0:0	8	;
INIT	2975:9	2975:9	8	offset = direntry -> tdir_offset . toff_long
ASSIGN	2975:9	2975:18	9	offset = direntry -> tdir_offset . toff_long
LVAL	2975:9	2975:9	10	offset
NAME	2975:9	2975:9	11	offset
LEAF_NODE	2975:9	2975:9	12	offset
ASSIGN_OP	2975:16	2975:16	10	=
LEAF_NODE	2975:16	2975:16	11	=
RVAL	2975:18	2975:18	10	direntry -> tdir_offset . toff_long
FIELD	2975:18	2975:40	11	direntry -> tdir_offset . toff_long
LEAF_NODE	2975:18	2975:18	12	direntry
LEAF_NODE	2975:26	2975:26	12	->
LEAF_NODE	2975:28	2975:28	12	tdir_offset
LEAF_NODE	2975:39	2975:39	12	.
LEAF_NODE	2975:40	2975:40	12	toff_long
LEAF_NODE	2975:49	2975:49	7	;
SELECTION	2976:2	2977:3	6	
KEYWORD	2976:2	2976:2	7	if
LEAF_NODE	2976:2	2976:2	8	if
LEAF_NODE	2976:5	2976:5	7	(
CONDITION	2976:6	2976:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	2976:6	2976:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	2976:6	2976:11	9	tif -> tif_flags
LEAF_NODE	2976:6	2976:6	10	tif
LEAF_NODE	2976:9	2976:9	10	->
LEAF_NODE	2976:11	2976:11	10	tif_flags
LEAF_NODE	2976:20	2976:20	9	&
FIELD	2976:21	2976:21	9	TIFF_SWAB
LEAF_NODE	2976:21	2976:21	10	TIFF_SWAB
LEAF_NODE	2976:30	2976:30	7	)
STATEMENTS	2977:3	2977:3	7	
EXPR_STATEMENT	2977:3	2977:24	8	TIFFSwabLong ( & offset ) ;
EXPR	2977:3	2977:3	9	TIFFSwabLong ( & offset )
FUNCTION_CALL	2977:3	2977:23	10	TIFFSwabLong ( & offset )
CALLEE	2977:3	2977:3	11	TIFFSwabLong
LEAF_NODE	2977:3	2977:3	12	TIFFSwabLong
LEAF_NODE	2977:15	2977:15	11	(
ARGUMENT	2977:16	2977:16	11	& offset
UNARY_EXPR	2977:16	2977:17	12	& offset
UNARY_OPERATOR	2977:16	2977:16	13	&
LEAF_NODE	2977:16	2977:16	14	&
FIELD	2977:17	2977:17	13	offset
LEAF_NODE	2977:17	2977:17	14	offset
LEAF_NODE	2977:23	2977:23	11	)
LEAF_NODE	2977:24	2977:24	9	;
EXPR_STATEMENT	2978:2	2978:44	6	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i ) ;
EXPR	2978:2	2978:2	7	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i )
ASSIGN	2978:2	2978:6	8	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i )
LVAL	2978:2	2978:2	9	err
FIELD	2978:2	2978:2	10	err
LEAF_NODE	2978:2	2978:2	11	err
ASSIGN_OP	2978:5	2978:5	9	=
LEAF_NODE	2978:5	2978:5	10	=
RVAL	2978:6	2978:6	9	TIFFReadDirEntryData ( tif , offset , 8 , m . i )
FUNCTION_CALL	2978:6	2978:43	10	TIFFReadDirEntryData ( tif , offset , 8 , m . i )
CALLEE	2978:6	2978:6	11	TIFFReadDirEntryData
LEAF_NODE	2978:6	2978:6	12	TIFFReadDirEntryData
LEAF_NODE	2978:26	2978:26	11	(
ARGUMENT	2978:27	2978:27	11	tif
FIELD	2978:27	2978:27	12	tif
LEAF_NODE	2978:27	2978:27	13	tif
LEAF_NODE	2978:30	2978:30	11	,
ARGUMENT	2978:31	2978:31	11	offset
FIELD	2978:31	2978:31	12	offset
LEAF_NODE	2978:31	2978:31	13	offset
LEAF_NODE	2978:37	2978:37	11	,
ARGUMENT	2978:38	2978:38	11	8
FIELD	2978:38	2978:38	12	8
LEAF_NODE	2978:38	2978:38	13	8
LEAF_NODE	2978:39	2978:39	11	,
ARGUMENT	2978:40	2978:40	11	m . i
FIELD	2978:40	2978:42	12	m . i
LEAF_NODE	2978:40	2978:40	13	m
LEAF_NODE	2978:41	2978:41	13	.
LEAF_NODE	2978:42	2978:42	13	i
LEAF_NODE	2978:43	2978:43	11	)
LEAF_NODE	2978:44	2978:44	7	;
SELECTION	2979:2	2980:3	6	
KEYWORD	2979:2	2979:2	7	if
LEAF_NODE	2979:2	2979:2	8	if
LEAF_NODE	2979:5	2979:5	7	(
CONDITION	2979:6	2979:6	7	err != TIFFReadDirEntryErrOk
EXPR	2979:6	2979:11	8	err != TIFFReadDirEntryErrOk
FIELD	2979:6	2979:6	9	err
LEAF_NODE	2979:6	2979:6	10	err
EQ_OPERATOR	2979:9	2979:9	9	!=
LEAF_NODE	2979:9	2979:9	10	!=
FIELD	2979:11	2979:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	2979:11	2979:11	10	TIFFReadDirEntryErrOk
LEAF_NODE	2979:32	2979:32	7	)
STATEMENTS	2980:3	2980:3	7	
LEAF_NODE	2980:3	2980:3	8	return
LEAF_NODE	2980:9	2980:9	6	(
LEAF_NODE	2980:10	2980:10	6	err
LEAF_NODE	2980:13	2980:13	6	)
LEAF_NODE	2980:14	2980:14	6	;
LEAF_NODE	2981:1	2981:1	5	}
SELECTION	2982:1	2983:2	3	
KEYWORD	2982:1	2982:1	4	else
LEAF_NODE	2982:1	2982:1	5	else
STATEMENTS	2983:2	2983:2	4	
EXPR_STATEMENT	2983:2	2983:40	5	m . l = direntry -> tdir_offset . toff_long8 ;
EXPR	2983:2	2983:2	6	m . l = direntry -> tdir_offset . toff_long8
ASSIGN	2983:2	2983:8	7	m . l = direntry -> tdir_offset . toff_long8
LVAL	2983:2	2983:2	8	m . l
FIELD	2983:2	2983:4	9	m . l
LEAF_NODE	2983:2	2983:2	10	m
LEAF_NODE	2983:3	2983:3	10	.
LEAF_NODE	2983:4	2983:4	10	l
ASSIGN_OP	2983:6	2983:6	8	=
LEAF_NODE	2983:6	2983:6	9	=
RVAL	2983:8	2983:8	8	direntry -> tdir_offset . toff_long8
FIELD	2983:8	2983:30	9	direntry -> tdir_offset . toff_long8
LEAF_NODE	2983:8	2983:8	10	direntry
LEAF_NODE	2983:16	2983:16	10	->
LEAF_NODE	2983:18	2983:18	10	tdir_offset
LEAF_NODE	2983:29	2983:29	10	.
LEAF_NODE	2983:30	2983:30	10	toff_long8
LEAF_NODE	2983:40	2983:40	6	;
SELECTION	2984:1	2985:2	3	
KEYWORD	2984:1	2984:1	4	if
LEAF_NODE	2984:1	2984:1	5	if
LEAF_NODE	2984:4	2984:4	4	(
CONDITION	2984:5	2984:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	2984:5	2984:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	2984:5	2984:10	6	tif -> tif_flags
LEAF_NODE	2984:5	2984:5	7	tif
LEAF_NODE	2984:8	2984:8	7	->
LEAF_NODE	2984:10	2984:10	7	tif_flags
LEAF_NODE	2984:19	2984:19	6	&
FIELD	2984:20	2984:20	6	TIFF_SWAB
LEAF_NODE	2984:20	2984:20	7	TIFF_SWAB
LEAF_NODE	2984:29	2984:29	4	)
STATEMENTS	2985:2	2985:2	4	
EXPR_STATEMENT	2985:2	2985:28	5	TIFFSwabArrayOfLong ( m . i , 2 ) ;
EXPR	2985:2	2985:2	6	TIFFSwabArrayOfLong ( m . i , 2 )
FUNCTION_CALL	2985:2	2985:27	7	TIFFSwabArrayOfLong ( m . i , 2 )
CALLEE	2985:2	2985:2	8	TIFFSwabArrayOfLong
LEAF_NODE	2985:2	2985:2	9	TIFFSwabArrayOfLong
LEAF_NODE	2985:21	2985:21	8	(
ARGUMENT	2985:22	2985:22	8	m . i
FIELD	2985:22	2985:24	9	m . i
LEAF_NODE	2985:22	2985:22	10	m
LEAF_NODE	2985:23	2985:23	10	.
LEAF_NODE	2985:24	2985:24	10	i
LEAF_NODE	2985:25	2985:25	8	,
ARGUMENT	2985:26	2985:26	8	2
FIELD	2985:26	2985:26	9	2
LEAF_NODE	2985:26	2985:26	10	2
LEAF_NODE	2985:27	2985:27	8	)
LEAF_NODE	2985:28	2985:28	6	;
SELECTION	2989:1	2990:2	3	
KEYWORD	2989:1	2989:1	4	if
LEAF_NODE	2989:1	2989:1	5	if
LEAF_NODE	2989:4	2989:4	4	(
CONDITION	2989:5	2989:5	4	m . i [ 0 ] == 0 || m . i [ 1 ] == 0
EXPR	2989:5	2989:5	5	m . i [ 0 ] == 0 || m . i [ 1 ] == 0
OR	2989:5	2989:18	6	m . i [ 0 ] == 0 || m . i [ 1 ] == 0
EXPR	2989:5	2989:13	7	m . i [ 0 ] == 0
FIELD	2989:5	2989:10	8	m . i [ 0 ]
LEAF_NODE	2989:5	2989:5	9	m
LEAF_NODE	2989:6	2989:6	9	.
LEAF_NODE	2989:7	2989:7	9	i
LEAF_NODE	2989:8	2989:8	9	[
EXPR	2989:9	2989:9	9	0
FIELD	2989:9	2989:9	10	0
LEAF_NODE	2989:9	2989:9	11	0
LEAF_NODE	2989:10	2989:10	9	]
EQ_OPERATOR	2989:11	2989:11	8	==
LEAF_NODE	2989:11	2989:11	9	==
FIELD	2989:13	2989:13	8	0
LEAF_NODE	2989:13	2989:13	9	0
LEAF_NODE	2989:15	2989:15	7	||
EXPR	2989:18	2989:26	7	m . i [ 1 ] == 0
FIELD	2989:18	2989:23	8	m . i [ 1 ]
LEAF_NODE	2989:18	2989:18	9	m
LEAF_NODE	2989:19	2989:19	9	.
LEAF_NODE	2989:20	2989:20	9	i
LEAF_NODE	2989:21	2989:21	9	[
EXPR	2989:22	2989:22	9	1
FIELD	2989:22	2989:22	10	1
LEAF_NODE	2989:22	2989:22	11	1
LEAF_NODE	2989:23	2989:23	9	]
EQ_OPERATOR	2989:24	2989:24	8	==
LEAF_NODE	2989:24	2989:24	9	==
FIELD	2989:26	2989:26	8	0
LEAF_NODE	2989:26	2989:26	9	0
LEAF_NODE	2989:27	2989:27	4	)
STATEMENTS	2990:2	2990:2	4	
EXPR_STATEMENT	2990:2	2990:12	5	* value = 0.0 ;
EXPR	2990:2	2990:2	6	* value = 0.0
ASSIGN	2990:2	2990:9	7	* value = 0.0
LVAL	2990:2	2990:2	8	* value
UNARY_EXPR	2990:2	2990:3	9	* value
UNARY_OPERATOR	2990:2	2990:2	10	*
LEAF_NODE	2990:2	2990:2	11	*
FIELD	2990:3	2990:3	10	value
LEAF_NODE	2990:3	2990:3	11	value
ASSIGN_OP	2990:8	2990:8	8	=
LEAF_NODE	2990:8	2990:8	9	=
RVAL	2990:9	2990:9	8	0.0
FIELD	2990:9	2990:9	9	0.0
LEAF_NODE	2990:9	2990:9	10	0.0
LEAF_NODE	2990:12	2990:12	6	;
SELECTION	2991:1	2992:2	3	
KEYWORD	2991:1	2991:1	4	else
LEAF_NODE	2991:1	2991:1	5	else
STATEMENTS	2992:2	2992:2	4	
EXPR_STATEMENT	2992:2	2992:38	5	* value = ( double ) m . i [ 0 ] / ( double ) m . i [ 1 ] ;
EXPR	2992:2	2992:2	6	* value = ( double ) m . i [ 0 ] / ( double ) m . i [ 1 ]
ASSIGN	2992:2	2992:9	7	* value = ( double ) m . i [ 0 ] / ( double ) m . i [ 1 ]
LVAL	2992:2	2992:2	8	* value
UNARY_EXPR	2992:2	2992:3	9	* value
UNARY_OPERATOR	2992:2	2992:2	10	*
LEAF_NODE	2992:2	2992:2	11	*
FIELD	2992:3	2992:3	10	value
LEAF_NODE	2992:3	2992:3	11	value
ASSIGN_OP	2992:8	2992:8	8	=
LEAF_NODE	2992:8	2992:8	9	=
RVAL	2992:9	2992:32	8	( double ) m . i [ 0 ] / ( double ) m . i [ 1 ]
LEAF_NODE	2992:9	2992:9	9	(
TYPE_NAME	2992:10	2992:10	9	double
LEAF_NODE	2992:10	2992:10	10	double
LEAF_NODE	2992:16	2992:16	9	)
FIELD	2992:17	2992:22	9	m . i [ 0 ]
LEAF_NODE	2992:17	2992:17	10	m
LEAF_NODE	2992:18	2992:18	10	.
LEAF_NODE	2992:19	2992:19	10	i
LEAF_NODE	2992:20	2992:20	10	[
EXPR	2992:21	2992:21	10	0
FIELD	2992:21	2992:21	11	0
LEAF_NODE	2992:21	2992:21	12	0
LEAF_NODE	2992:22	2992:22	10	]
LEAF_NODE	2992:23	2992:23	9	/
LEAF_NODE	2992:24	2992:24	9	(
TYPE_NAME	2992:25	2992:25	9	double
LEAF_NODE	2992:25	2992:25	10	double
LEAF_NODE	2992:31	2992:31	9	)
FIELD	2992:32	2992:37	9	m . i [ 1 ]
LEAF_NODE	2992:32	2992:32	10	m
LEAF_NODE	2992:33	2992:33	10	.
LEAF_NODE	2992:34	2992:34	10	i
LEAF_NODE	2992:35	2992:35	10	[
EXPR	2992:36	2992:36	10	1
FIELD	2992:36	2992:36	11	1
LEAF_NODE	2992:36	2992:36	12	1
LEAF_NODE	2992:37	2992:37	10	]
LEAF_NODE	2992:38	2992:38	6	;
LEAF_NODE	2993:1	2993:1	3	return
LEAF_NODE	2993:7	2993:7	3	(
LEAF_NODE	2993:8	2993:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	2993:29	2993:29	3	)
LEAF_NODE	2993:30	2993:30	3	;
LEAF_NODE	2994:0	2994:0	2	}
FUNCTION_DEF	2996:0	3025:0	1	
RETURN_TYPE	2996:0	2996:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	2996:0	2996:0	3	static
TYPE_NAME	2996:7	2996:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	2996:7	2996:7	4	enum
LEAF_NODE	2996:12	2996:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	2996:32	2996:32	2	TIFFReadDirEntryCheckedSrational
LEAF_NODE	2996:32	2996:32	3	TIFFReadDirEntryCheckedSrational
PARAMETER_LIST	2996:64	2996:113	2	( TIFF * tif , TIFFDirEntry * direntry , double * value )
LEAF_NODE	2996:64	2996:64	3	(
PARAMETER_DECL	2996:65	2996:71	3	TIFF * tif
TYPE	2996:65	2996:69	4	TIFF *
TYPE_NAME	2996:65	2996:65	5	TIFF
LEAF_NODE	2996:65	2996:65	6	TIFF
POINTER	2996:69	2996:69	5	*
LEAF_NODE	2996:69	2996:69	6	*
NAME	2996:71	2996:71	4	tif
LEAF_NODE	2996:71	2996:71	5	tif
LEAF_NODE	2996:74	2996:74	3	,
PARAMETER_DECL	2996:76	2996:90	3	TIFFDirEntry * direntry
TYPE	2996:76	2996:88	4	TIFFDirEntry *
TYPE_NAME	2996:76	2996:76	5	TIFFDirEntry
LEAF_NODE	2996:76	2996:76	6	TIFFDirEntry
POINTER	2996:88	2996:88	5	*
LEAF_NODE	2996:88	2996:88	6	*
NAME	2996:90	2996:90	4	direntry
LEAF_NODE	2996:90	2996:90	5	direntry
LEAF_NODE	2996:98	2996:98	3	,
PARAMETER_DECL	2996:100	2996:108	3	double * value
TYPE	2996:100	2996:106	4	double *
TYPE_NAME	2996:100	2996:100	5	double
LEAF_NODE	2996:100	2996:100	6	double
POINTER	2996:106	2996:106	5	*
LEAF_NODE	2996:106	2996:106	6	*
NAME	2996:108	2996:108	4	value
LEAF_NODE	2996:108	2996:108	5	value
LEAF_NODE	2996:113	2996:113	3	)
LEAF_NODE	2997:0	2997:0	2	{
STATEMENTS	2998:1	3024:30	2	
SIMPLE_DECL	2998:1	2998:18	3	UInt64Aligned_t m ;
VAR_DECL	2998:1	2998:17	4	UInt64Aligned_t m
TYPE	2998:1	2998:1	5	UInt64Aligned_t
TYPE_NAME	2998:1	2998:1	6	UInt64Aligned_t
LEAF_NODE	2998:1	2998:1	7	UInt64Aligned_t
NAME	2998:17	2998:17	5	m
LEAF_NODE	2998:17	2998:17	6	m
LEAF_NODE	2998:18	2998:18	4	;
EXPR_STATEMENT	2999:1	2999:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	2999:1	2999:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	2999:1	2999:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	2999:1	2999:1	6	assert
LEAF_NODE	2999:1	2999:1	7	assert
LEAF_NODE	2999:7	2999:7	6	(
ARGUMENT	2999:8	2999:24	6	sizeof ( double ) == 8
FUNCTION_CALL	2999:8	2999:21	7	sizeof ( double )
CALLEE	2999:8	2999:8	8	sizeof
LEAF_NODE	2999:8	2999:8	9	sizeof
LEAF_NODE	2999:14	2999:14	8	(
ARGUMENT	2999:15	2999:15	8	double
FIELD	2999:15	2999:15	9	double
LEAF_NODE	2999:15	2999:15	10	double
LEAF_NODE	2999:21	2999:21	8	)
EQ_OPERATOR	2999:22	2999:22	7	==
LEAF_NODE	2999:22	2999:22	8	==
FIELD	2999:24	2999:24	7	8
LEAF_NODE	2999:24	2999:24	8	8
LEAF_NODE	2999:25	2999:25	6	)
LEAF_NODE	2999:26	2999:26	4	;
EXPR_STATEMENT	3000:1	3000:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	3000:1	3000:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	3000:1	3000:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	3000:1	3000:1	6	assert
LEAF_NODE	3000:1	3000:1	7	assert
LEAF_NODE	3000:7	3000:7	6	(
ARGUMENT	3000:8	3000:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	3000:8	3000:21	7	sizeof ( uint64 )
CALLEE	3000:8	3000:8	8	sizeof
LEAF_NODE	3000:8	3000:8	9	sizeof
LEAF_NODE	3000:14	3000:14	8	(
ARGUMENT	3000:15	3000:15	8	uint64
FIELD	3000:15	3000:15	9	uint64
LEAF_NODE	3000:15	3000:15	10	uint64
LEAF_NODE	3000:21	3000:21	8	)
EQ_OPERATOR	3000:22	3000:22	7	==
LEAF_NODE	3000:22	3000:22	8	==
FIELD	3000:24	3000:24	7	8
LEAF_NODE	3000:24	3000:24	8	8
LEAF_NODE	3000:25	3000:25	6	)
LEAF_NODE	3000:26	3000:26	4	;
EXPR_STATEMENT	3001:1	3001:25	3	assert ( sizeof ( int32 ) == 4 ) ;
EXPR	3001:1	3001:1	4	assert ( sizeof ( int32 ) == 4 )
FUNCTION_CALL	3001:1	3001:24	5	assert ( sizeof ( int32 ) == 4 )
CALLEE	3001:1	3001:1	6	assert
LEAF_NODE	3001:1	3001:1	7	assert
LEAF_NODE	3001:7	3001:7	6	(
ARGUMENT	3001:8	3001:23	6	sizeof ( int32 ) == 4
FUNCTION_CALL	3001:8	3001:20	7	sizeof ( int32 )
CALLEE	3001:8	3001:8	8	sizeof
LEAF_NODE	3001:8	3001:8	9	sizeof
LEAF_NODE	3001:14	3001:14	8	(
ARGUMENT	3001:15	3001:15	8	int32
FIELD	3001:15	3001:15	9	int32
LEAF_NODE	3001:15	3001:15	10	int32
LEAF_NODE	3001:20	3001:20	8	)
EQ_OPERATOR	3001:21	3001:21	7	==
LEAF_NODE	3001:21	3001:21	8	==
FIELD	3001:23	3001:23	7	4
LEAF_NODE	3001:23	3001:23	8	4
LEAF_NODE	3001:24	3001:24	6	)
LEAF_NODE	3001:25	3001:25	4	;
EXPR_STATEMENT	3002:1	3002:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	3002:1	3002:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	3002:1	3002:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	3002:1	3002:1	6	assert
LEAF_NODE	3002:1	3002:1	7	assert
LEAF_NODE	3002:7	3002:7	6	(
ARGUMENT	3002:8	3002:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	3002:8	3002:21	7	sizeof ( uint32 )
CALLEE	3002:8	3002:8	8	sizeof
LEAF_NODE	3002:8	3002:8	9	sizeof
LEAF_NODE	3002:14	3002:14	8	(
ARGUMENT	3002:15	3002:15	8	uint32
FIELD	3002:15	3002:15	9	uint32
LEAF_NODE	3002:15	3002:15	10	uint32
LEAF_NODE	3002:21	3002:21	8	)
EQ_OPERATOR	3002:22	3002:22	7	==
LEAF_NODE	3002:22	3002:22	8	==
FIELD	3002:24	3002:24	7	4
LEAF_NODE	3002:24	3002:24	8	4
LEAF_NODE	3002:25	3002:25	6	)
LEAF_NODE	3002:26	3002:26	4	;
SELECTION	3003:1	3004:1	3	
KEYWORD	3003:1	3003:1	4	if
LEAF_NODE	3003:1	3003:1	5	if
LEAF_NODE	3003:4	3003:4	4	(
CONDITION	3003:5	3003:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	3003:5	3003:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	3003:5	3003:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	3003:5	3003:5	7	!
LEAF_NODE	3003:5	3003:5	8	!
LEAF_NODE	3003:6	3003:6	7	(
FIELD	3003:7	3003:12	7	tif -> tif_flags
LEAF_NODE	3003:7	3003:7	8	tif
LEAF_NODE	3003:10	3003:10	8	->
LEAF_NODE	3003:12	3003:12	8	tif_flags
LEAF_NODE	3003:21	3003:21	7	&
FIELD	3003:22	3003:22	7	TIFF_BIGTIFF
LEAF_NODE	3003:22	3003:22	8	TIFF_BIGTIFF
LEAF_NODE	3003:34	3003:34	7	)
LEAF_NODE	3003:35	3003:35	4	)
STATEMENTS	3004:1	3012:1	4	
LEAF_NODE	3004:1	3004:1	5	{
STATEMENTS	3005:2	3011:14	5	
SIMPLE_DECL	3005:2	3005:30	6	enum TIFFReadDirEntryErr err ;
VAR_DECL	3005:2	3005:27	7	enum TIFFReadDirEntryErr err
TYPE	3005:2	3005:2	8	enum TIFFReadDirEntryErr
TYPE_NAME	3005:2	3005:7	9	enum TIFFReadDirEntryErr
LEAF_NODE	3005:2	3005:2	10	enum
LEAF_NODE	3005:7	3005:7	10	TIFFReadDirEntryErr
NAME	3005:27	3005:27	8	err
LEAF_NODE	3005:27	3005:27	9	err
LEAF_NODE	3005:30	3005:30	7	;
SIMPLE_DECL	3006:2	3006:49	6	uint32 offset ; offset = direntry -> tdir_offset . toff_long ;
VAR_DECL	3006:2	3006:9	7	uint32 offset ; offset = direntry -> tdir_offset . toff_long
TYPE	3006:2	3006:2	8	uint32
TYPE_NAME	3006:2	3006:2	9	uint32
LEAF_NODE	3006:2	3006:2	10	uint32
NAME	3006:9	3006:9	8	offset
LEAF_NODE	3006:9	3006:9	9	offset
LEAF_NODE	0:0	0:0	8	;
INIT	3006:9	3006:9	8	offset = direntry -> tdir_offset . toff_long
ASSIGN	3006:9	3006:18	9	offset = direntry -> tdir_offset . toff_long
LVAL	3006:9	3006:9	10	offset
NAME	3006:9	3006:9	11	offset
LEAF_NODE	3006:9	3006:9	12	offset
ASSIGN_OP	3006:16	3006:16	10	=
LEAF_NODE	3006:16	3006:16	11	=
RVAL	3006:18	3006:18	10	direntry -> tdir_offset . toff_long
FIELD	3006:18	3006:40	11	direntry -> tdir_offset . toff_long
LEAF_NODE	3006:18	3006:18	12	direntry
LEAF_NODE	3006:26	3006:26	12	->
LEAF_NODE	3006:28	3006:28	12	tdir_offset
LEAF_NODE	3006:39	3006:39	12	.
LEAF_NODE	3006:40	3006:40	12	toff_long
LEAF_NODE	3006:49	3006:49	7	;
SELECTION	3007:2	3008:3	6	
KEYWORD	3007:2	3007:2	7	if
LEAF_NODE	3007:2	3007:2	8	if
LEAF_NODE	3007:5	3007:5	7	(
CONDITION	3007:6	3007:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	3007:6	3007:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	3007:6	3007:11	9	tif -> tif_flags
LEAF_NODE	3007:6	3007:6	10	tif
LEAF_NODE	3007:9	3007:9	10	->
LEAF_NODE	3007:11	3007:11	10	tif_flags
LEAF_NODE	3007:20	3007:20	9	&
FIELD	3007:21	3007:21	9	TIFF_SWAB
LEAF_NODE	3007:21	3007:21	10	TIFF_SWAB
LEAF_NODE	3007:30	3007:30	7	)
STATEMENTS	3008:3	3008:3	7	
EXPR_STATEMENT	3008:3	3008:24	8	TIFFSwabLong ( & offset ) ;
EXPR	3008:3	3008:3	9	TIFFSwabLong ( & offset )
FUNCTION_CALL	3008:3	3008:23	10	TIFFSwabLong ( & offset )
CALLEE	3008:3	3008:3	11	TIFFSwabLong
LEAF_NODE	3008:3	3008:3	12	TIFFSwabLong
LEAF_NODE	3008:15	3008:15	11	(
ARGUMENT	3008:16	3008:16	11	& offset
UNARY_EXPR	3008:16	3008:17	12	& offset
UNARY_OPERATOR	3008:16	3008:16	13	&
LEAF_NODE	3008:16	3008:16	14	&
FIELD	3008:17	3008:17	13	offset
LEAF_NODE	3008:17	3008:17	14	offset
LEAF_NODE	3008:23	3008:23	11	)
LEAF_NODE	3008:24	3008:24	9	;
EXPR_STATEMENT	3009:2	3009:44	6	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i ) ;
EXPR	3009:2	3009:2	7	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i )
ASSIGN	3009:2	3009:6	8	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i )
LVAL	3009:2	3009:2	9	err
FIELD	3009:2	3009:2	10	err
LEAF_NODE	3009:2	3009:2	11	err
ASSIGN_OP	3009:5	3009:5	9	=
LEAF_NODE	3009:5	3009:5	10	=
RVAL	3009:6	3009:6	9	TIFFReadDirEntryData ( tif , offset , 8 , m . i )
FUNCTION_CALL	3009:6	3009:43	10	TIFFReadDirEntryData ( tif , offset , 8 , m . i )
CALLEE	3009:6	3009:6	11	TIFFReadDirEntryData
LEAF_NODE	3009:6	3009:6	12	TIFFReadDirEntryData
LEAF_NODE	3009:26	3009:26	11	(
ARGUMENT	3009:27	3009:27	11	tif
FIELD	3009:27	3009:27	12	tif
LEAF_NODE	3009:27	3009:27	13	tif
LEAF_NODE	3009:30	3009:30	11	,
ARGUMENT	3009:31	3009:31	11	offset
FIELD	3009:31	3009:31	12	offset
LEAF_NODE	3009:31	3009:31	13	offset
LEAF_NODE	3009:37	3009:37	11	,
ARGUMENT	3009:38	3009:38	11	8
FIELD	3009:38	3009:38	12	8
LEAF_NODE	3009:38	3009:38	13	8
LEAF_NODE	3009:39	3009:39	11	,
ARGUMENT	3009:40	3009:40	11	m . i
FIELD	3009:40	3009:42	12	m . i
LEAF_NODE	3009:40	3009:40	13	m
LEAF_NODE	3009:41	3009:41	13	.
LEAF_NODE	3009:42	3009:42	13	i
LEAF_NODE	3009:43	3009:43	11	)
LEAF_NODE	3009:44	3009:44	7	;
SELECTION	3010:2	3011:3	6	
KEYWORD	3010:2	3010:2	7	if
LEAF_NODE	3010:2	3010:2	8	if
LEAF_NODE	3010:5	3010:5	7	(
CONDITION	3010:6	3010:6	7	err != TIFFReadDirEntryErrOk
EXPR	3010:6	3010:11	8	err != TIFFReadDirEntryErrOk
FIELD	3010:6	3010:6	9	err
LEAF_NODE	3010:6	3010:6	10	err
EQ_OPERATOR	3010:9	3010:9	9	!=
LEAF_NODE	3010:9	3010:9	10	!=
FIELD	3010:11	3010:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	3010:11	3010:11	10	TIFFReadDirEntryErrOk
LEAF_NODE	3010:32	3010:32	7	)
STATEMENTS	3011:3	3011:3	7	
LEAF_NODE	3011:3	3011:3	8	return
LEAF_NODE	3011:9	3011:9	6	(
LEAF_NODE	3011:10	3011:10	6	err
LEAF_NODE	3011:13	3011:13	6	)
LEAF_NODE	3011:14	3011:14	6	;
LEAF_NODE	3012:1	3012:1	5	}
SELECTION	3013:1	3014:2	3	
KEYWORD	3013:1	3013:1	4	else
LEAF_NODE	3013:1	3013:1	5	else
STATEMENTS	3014:2	3014:2	4	
EXPR_STATEMENT	3014:2	3014:38	5	m . l = direntry -> tdir_offset . toff_long8 ;
EXPR	3014:2	3014:2	6	m . l = direntry -> tdir_offset . toff_long8
ASSIGN	3014:2	3014:6	7	m . l = direntry -> tdir_offset . toff_long8
LVAL	3014:2	3014:2	8	m . l
FIELD	3014:2	3014:4	9	m . l
LEAF_NODE	3014:2	3014:2	10	m
LEAF_NODE	3014:3	3014:3	10	.
LEAF_NODE	3014:4	3014:4	10	l
ASSIGN_OP	3014:5	3014:5	8	=
LEAF_NODE	3014:5	3014:5	9	=
RVAL	3014:6	3014:6	8	direntry -> tdir_offset . toff_long8
FIELD	3014:6	3014:28	9	direntry -> tdir_offset . toff_long8
LEAF_NODE	3014:6	3014:6	10	direntry
LEAF_NODE	3014:14	3014:14	10	->
LEAF_NODE	3014:16	3014:16	10	tdir_offset
LEAF_NODE	3014:27	3014:27	10	.
LEAF_NODE	3014:28	3014:28	10	toff_long8
LEAF_NODE	3014:38	3014:38	6	;
SELECTION	3015:1	3016:2	3	
KEYWORD	3015:1	3015:1	4	if
LEAF_NODE	3015:1	3015:1	5	if
LEAF_NODE	3015:4	3015:4	4	(
CONDITION	3015:5	3015:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	3015:5	3015:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	3015:5	3015:10	6	tif -> tif_flags
LEAF_NODE	3015:5	3015:5	7	tif
LEAF_NODE	3015:8	3015:8	7	->
LEAF_NODE	3015:10	3015:10	7	tif_flags
LEAF_NODE	3015:19	3015:19	6	&
FIELD	3015:20	3015:20	6	TIFF_SWAB
LEAF_NODE	3015:20	3015:20	7	TIFF_SWAB
LEAF_NODE	3015:29	3015:29	4	)
STATEMENTS	3016:2	3016:2	4	
EXPR_STATEMENT	3016:2	3016:28	5	TIFFSwabArrayOfLong ( m . i , 2 ) ;
EXPR	3016:2	3016:2	6	TIFFSwabArrayOfLong ( m . i , 2 )
FUNCTION_CALL	3016:2	3016:27	7	TIFFSwabArrayOfLong ( m . i , 2 )
CALLEE	3016:2	3016:2	8	TIFFSwabArrayOfLong
LEAF_NODE	3016:2	3016:2	9	TIFFSwabArrayOfLong
LEAF_NODE	3016:21	3016:21	8	(
ARGUMENT	3016:22	3016:22	8	m . i
FIELD	3016:22	3016:24	9	m . i
LEAF_NODE	3016:22	3016:22	10	m
LEAF_NODE	3016:23	3016:23	10	.
LEAF_NODE	3016:24	3016:24	10	i
LEAF_NODE	3016:25	3016:25	8	,
ARGUMENT	3016:26	3016:26	8	2
FIELD	3016:26	3016:26	9	2
LEAF_NODE	3016:26	3016:26	10	2
LEAF_NODE	3016:27	3016:27	8	)
LEAF_NODE	3016:28	3016:28	6	;
SELECTION	3020:1	3021:2	3	
KEYWORD	3020:1	3020:1	4	if
LEAF_NODE	3020:1	3020:1	5	if
LEAF_NODE	3020:4	3020:4	4	(
CONDITION	3020:5	3020:5	4	( int32 ) m . i [ 0 ] == 0 || m . i [ 1 ] == 0
EXPR	3020:5	3020:5	5	( int32 ) m . i [ 0 ] == 0 || m . i [ 1 ] == 0
OR	3020:5	3020:25	6	( int32 ) m . i [ 0 ] == 0 || m . i [ 1 ] == 0
EXPR	3020:5	3020:20	7	( int32 ) m . i [ 0 ] == 0
LEAF_NODE	3020:5	3020:5	8	(
TYPE_NAME	3020:6	3020:6	8	int32
LEAF_NODE	3020:6	3020:6	9	int32
LEAF_NODE	3020:11	3020:11	8	)
FIELD	3020:12	3020:17	8	m . i [ 0 ]
LEAF_NODE	3020:12	3020:12	9	m
LEAF_NODE	3020:13	3020:13	9	.
LEAF_NODE	3020:14	3020:14	9	i
LEAF_NODE	3020:15	3020:15	9	[
EXPR	3020:16	3020:16	9	0
FIELD	3020:16	3020:16	10	0
LEAF_NODE	3020:16	3020:16	11	0
LEAF_NODE	3020:17	3020:17	9	]
EQ_OPERATOR	3020:18	3020:18	8	==
LEAF_NODE	3020:18	3020:18	9	==
FIELD	3020:20	3020:20	8	0
LEAF_NODE	3020:20	3020:20	9	0
LEAF_NODE	3020:22	3020:22	7	||
EXPR	3020:25	3020:33	7	m . i [ 1 ] == 0
FIELD	3020:25	3020:30	8	m . i [ 1 ]
LEAF_NODE	3020:25	3020:25	9	m
LEAF_NODE	3020:26	3020:26	9	.
LEAF_NODE	3020:27	3020:27	9	i
LEAF_NODE	3020:28	3020:28	9	[
EXPR	3020:29	3020:29	9	1
FIELD	3020:29	3020:29	10	1
LEAF_NODE	3020:29	3020:29	11	1
LEAF_NODE	3020:30	3020:30	9	]
EQ_OPERATOR	3020:31	3020:31	8	==
LEAF_NODE	3020:31	3020:31	9	==
FIELD	3020:33	3020:33	8	0
LEAF_NODE	3020:33	3020:33	9	0
LEAF_NODE	3020:34	3020:34	4	)
STATEMENTS	3021:2	3021:2	4	
EXPR_STATEMENT	3021:2	3021:12	5	* value = 0.0 ;
EXPR	3021:2	3021:2	6	* value = 0.0
ASSIGN	3021:2	3021:9	7	* value = 0.0
LVAL	3021:2	3021:2	8	* value
UNARY_EXPR	3021:2	3021:3	9	* value
UNARY_OPERATOR	3021:2	3021:2	10	*
LEAF_NODE	3021:2	3021:2	11	*
FIELD	3021:3	3021:3	10	value
LEAF_NODE	3021:3	3021:3	11	value
ASSIGN_OP	3021:8	3021:8	8	=
LEAF_NODE	3021:8	3021:8	9	=
RVAL	3021:9	3021:9	8	0.0
FIELD	3021:9	3021:9	9	0.0
LEAF_NODE	3021:9	3021:9	10	0.0
LEAF_NODE	3021:12	3021:12	6	;
SELECTION	3022:1	3023:2	3	
KEYWORD	3022:1	3022:1	4	else
LEAF_NODE	3022:1	3022:1	5	else
STATEMENTS	3023:2	3023:2	4	
EXPR_STATEMENT	3023:2	3023:47	5	* value = ( double ) ( ( int32 ) m . i [ 0 ] ) / ( double ) m . i [ 1 ] ;
EXPR	3023:2	3023:2	6	* value = ( double ) ( ( int32 ) m . i [ 0 ] ) / ( double ) m . i [ 1 ]
ASSIGN	3023:2	3023:9	7	* value = ( double ) ( ( int32 ) m . i [ 0 ] ) / ( double ) m . i [ 1 ]
LVAL	3023:2	3023:2	8	* value
UNARY_EXPR	3023:2	3023:3	9	* value
UNARY_OPERATOR	3023:2	3023:2	10	*
LEAF_NODE	3023:2	3023:2	11	*
FIELD	3023:3	3023:3	10	value
LEAF_NODE	3023:3	3023:3	11	value
ASSIGN_OP	3023:8	3023:8	8	=
LEAF_NODE	3023:8	3023:8	9	=
RVAL	3023:9	3023:41	8	( double ) ( ( int32 ) m . i [ 0 ] ) / ( double ) m . i [ 1 ]
LEAF_NODE	3023:9	3023:9	9	(
TYPE_NAME	3023:10	3023:10	9	double
LEAF_NODE	3023:10	3023:10	10	double
LEAF_NODE	3023:16	3023:16	9	)
LEAF_NODE	3023:17	3023:17	9	(
LEAF_NODE	3023:18	3023:18	9	(
TYPE_NAME	3023:19	3023:19	9	int32
LEAF_NODE	3023:19	3023:19	10	int32
LEAF_NODE	3023:24	3023:24	9	)
FIELD	3023:25	3023:30	9	m . i [ 0 ]
LEAF_NODE	3023:25	3023:25	10	m
LEAF_NODE	3023:26	3023:26	10	.
LEAF_NODE	3023:27	3023:27	10	i
LEAF_NODE	3023:28	3023:28	10	[
EXPR	3023:29	3023:29	10	0
FIELD	3023:29	3023:29	11	0
LEAF_NODE	3023:29	3023:29	12	0
LEAF_NODE	3023:30	3023:30	10	]
LEAF_NODE	3023:31	3023:31	9	)
LEAF_NODE	3023:32	3023:32	9	/
LEAF_NODE	3023:33	3023:33	9	(
TYPE_NAME	3023:34	3023:34	9	double
LEAF_NODE	3023:34	3023:34	10	double
LEAF_NODE	3023:40	3023:40	9	)
FIELD	3023:41	3023:46	9	m . i [ 1 ]
LEAF_NODE	3023:41	3023:41	10	m
LEAF_NODE	3023:42	3023:42	10	.
LEAF_NODE	3023:43	3023:43	10	i
LEAF_NODE	3023:44	3023:44	10	[
EXPR	3023:45	3023:45	10	1
FIELD	3023:45	3023:45	11	1
LEAF_NODE	3023:45	3023:45	12	1
LEAF_NODE	3023:46	3023:46	10	]
LEAF_NODE	3023:47	3023:47	6	;
LEAF_NODE	3024:1	3024:1	3	return
LEAF_NODE	3024:7	3024:7	3	(
LEAF_NODE	3024:8	3024:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	3024:29	3024:29	3	)
LEAF_NODE	3024:30	3024:30	3	;
LEAF_NODE	3025:0	3025:0	2	}
FUNCTION_DEF	3027:0	3041:0	1	
RETURN_TYPE	3027:0	3027:7	2	static void
LEAF_NODE	3027:0	3027:0	3	static
TYPE_NAME	3027:7	3027:7	3	void
LEAF_NODE	3027:7	3027:7	4	void
FUNCTION_NAME	3027:12	3027:12	2	TIFFReadDirEntryCheckedFloat
LEAF_NODE	3027:12	3027:12	3	TIFFReadDirEntryCheckedFloat
PARAMETER_LIST	3027:40	3027:88	2	( TIFF * tif , TIFFDirEntry * direntry , float * value )
LEAF_NODE	3027:40	3027:40	3	(
PARAMETER_DECL	3027:41	3027:47	3	TIFF * tif
TYPE	3027:41	3027:45	4	TIFF *
TYPE_NAME	3027:41	3027:41	5	TIFF
LEAF_NODE	3027:41	3027:41	6	TIFF
POINTER	3027:45	3027:45	5	*
LEAF_NODE	3027:45	3027:45	6	*
NAME	3027:47	3027:47	4	tif
LEAF_NODE	3027:47	3027:47	5	tif
LEAF_NODE	3027:50	3027:50	3	,
PARAMETER_DECL	3027:52	3027:66	3	TIFFDirEntry * direntry
TYPE	3027:52	3027:64	4	TIFFDirEntry *
TYPE_NAME	3027:52	3027:52	5	TIFFDirEntry
LEAF_NODE	3027:52	3027:52	6	TIFFDirEntry
POINTER	3027:64	3027:64	5	*
LEAF_NODE	3027:64	3027:64	6	*
NAME	3027:66	3027:66	4	direntry
LEAF_NODE	3027:66	3027:66	5	direntry
LEAF_NODE	3027:74	3027:74	3	,
PARAMETER_DECL	3027:76	3027:83	3	float * value
TYPE	3027:76	3027:81	4	float *
TYPE_NAME	3027:76	3027:76	5	float
LEAF_NODE	3027:76	3027:76	6	float
POINTER	3027:81	3027:81	5	*
LEAF_NODE	3027:81	3027:81	6	*
NAME	3027:83	3027:83	4	value
LEAF_NODE	3027:83	3027:83	5	value
LEAF_NODE	3027:88	3027:88	3	)
LEAF_NODE	3028:0	3028:0	2	{
STATEMENTS	3029:9	3039:1	2	
SIMPLE_DECL	3029:9	3033:15	3	union CLASS_NAME BASE_CLASSES { float f ; uint32 i ; } float_union ;
VAR_DECL	3029:9	3033:4	4	union CLASS_NAME BASE_CLASSES { float f ; uint32 i ; } float_union
TYPE	3029:9	3029:9	5	union CLASS_NAME BASE_CLASSES { float f ; uint32 i ; }
CLASS_DEF	3029:9	3033:2	6	union CLASS_NAME BASE_CLASSES { float f ; uint32 i ; }
LEAF_NODE	3029:9	3029:9	7	union
LEAF_NODE	0:0	0:0	7	CLASS_NAME
LEAF_NODE	0:0	0:0	7	BASE_CLASSES
LEAF_NODE	3030:2	3030:2	7	{
CLASS_CONTENT	3031:4	3032:4	7	float f ; uint32 i ;
SIMPLE_DECL	3031:4	3031:12	8	float f ;
VAR_DECL	3031:4	3031:11	9	float f
TYPE	3031:4	3031:4	10	float
TYPE_NAME	3031:4	3031:4	11	float
LEAF_NODE	3031:4	3031:4	12	float
NAME	3031:11	3031:11	10	f
LEAF_NODE	3031:11	3031:11	11	f
LEAF_NODE	3031:12	3031:12	9	;
SIMPLE_DECL	3032:4	3032:12	8	uint32 i ;
VAR_DECL	3032:4	3032:11	9	uint32 i
TYPE	3032:4	3032:4	10	uint32
TYPE_NAME	3032:4	3032:4	11	uint32
LEAF_NODE	3032:4	3032:4	12	uint32
NAME	3032:11	3032:11	10	i
LEAF_NODE	3032:11	3032:11	11	i
LEAF_NODE	3032:12	3032:12	9	;
LEAF_NODE	3033:2	3033:2	7	}
NAME	3033:4	3033:4	5	float_union
LEAF_NODE	3033:4	3033:4	6	float_union
LEAF_NODE	3033:15	3033:15	4	;
EXPR_STATEMENT	3034:1	3034:25	3	assert ( sizeof ( float ) == 4 ) ;
EXPR	3034:1	3034:1	4	assert ( sizeof ( float ) == 4 )
FUNCTION_CALL	3034:1	3034:24	5	assert ( sizeof ( float ) == 4 )
CALLEE	3034:1	3034:1	6	assert
LEAF_NODE	3034:1	3034:1	7	assert
LEAF_NODE	3034:7	3034:7	6	(
ARGUMENT	3034:8	3034:23	6	sizeof ( float ) == 4
FUNCTION_CALL	3034:8	3034:20	7	sizeof ( float )
CALLEE	3034:8	3034:8	8	sizeof
LEAF_NODE	3034:8	3034:8	9	sizeof
LEAF_NODE	3034:14	3034:14	8	(
ARGUMENT	3034:15	3034:15	8	float
FIELD	3034:15	3034:15	9	float
LEAF_NODE	3034:15	3034:15	10	float
LEAF_NODE	3034:20	3034:20	8	)
EQ_OPERATOR	3034:21	3034:21	7	==
LEAF_NODE	3034:21	3034:21	8	==
FIELD	3034:23	3034:23	7	4
LEAF_NODE	3034:23	3034:23	8	4
LEAF_NODE	3034:24	3034:24	6	)
LEAF_NODE	3034:25	3034:25	4	;
EXPR_STATEMENT	3035:1	3035:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	3035:1	3035:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	3035:1	3035:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	3035:1	3035:1	6	assert
LEAF_NODE	3035:1	3035:1	7	assert
LEAF_NODE	3035:7	3035:7	6	(
ARGUMENT	3035:8	3035:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	3035:8	3035:21	7	sizeof ( uint32 )
CALLEE	3035:8	3035:8	8	sizeof
LEAF_NODE	3035:8	3035:8	9	sizeof
LEAF_NODE	3035:14	3035:14	8	(
ARGUMENT	3035:15	3035:15	8	uint32
FIELD	3035:15	3035:15	9	uint32
LEAF_NODE	3035:15	3035:15	10	uint32
LEAF_NODE	3035:21	3035:21	8	)
EQ_OPERATOR	3035:22	3035:22	7	==
LEAF_NODE	3035:22	3035:22	8	==
FIELD	3035:24	3035:24	7	4
LEAF_NODE	3035:24	3035:24	8	4
LEAF_NODE	3035:25	3035:25	6	)
LEAF_NODE	3035:26	3035:26	4	;
EXPR_STATEMENT	3036:1	3036:31	3	assert ( sizeof ( float_union ) == 4 ) ;
EXPR	3036:1	3036:1	4	assert ( sizeof ( float_union ) == 4 )
FUNCTION_CALL	3036:1	3036:30	5	assert ( sizeof ( float_union ) == 4 )
CALLEE	3036:1	3036:1	6	assert
LEAF_NODE	3036:1	3036:1	7	assert
LEAF_NODE	3036:7	3036:7	6	(
ARGUMENT	3036:8	3036:29	6	sizeof ( float_union ) == 4
FUNCTION_CALL	3036:8	3036:26	7	sizeof ( float_union )
CALLEE	3036:8	3036:8	8	sizeof
LEAF_NODE	3036:8	3036:8	9	sizeof
LEAF_NODE	3036:14	3036:14	8	(
ARGUMENT	3036:15	3036:15	8	float_union
FIELD	3036:15	3036:15	9	float_union
LEAF_NODE	3036:15	3036:15	10	float_union
LEAF_NODE	3036:26	3036:26	8	)
EQ_OPERATOR	3036:27	3036:27	7	==
LEAF_NODE	3036:27	3036:27	8	==
FIELD	3036:29	3036:29	7	4
LEAF_NODE	3036:29	3036:29	8	4
LEAF_NODE	3036:30	3036:30	6	)
LEAF_NODE	3036:31	3036:31	4	;
LEAF_NODE	3037:1	3037:1	3	float_union
LEAF_NODE	3037:12	3037:12	3	.
LEAF_NODE	3037:13	3037:13	3	i
LEAF_NODE	3037:14	3037:14	3	=
LEAF_NODE	3037:15	3037:15	3	*
EXPR_STATEMENT	3037:16	3037:49	3	( uint32 * ) ( & direntry -> tdir_offset ) ;
EXPR	3037:16	3037:48	4	( uint32 * ) ( & direntry -> tdir_offset )
LEAF_NODE	3037:16	3037:16	5	(
TYPE_NAME	3037:17	3037:17	5	uint32
LEAF_NODE	3037:17	3037:17	6	uint32
LEAF_NODE	3037:23	3037:23	5	*
LEAF_NODE	3037:24	3037:24	5	)
LEAF_NODE	3037:25	3037:25	5	(
UNARY_EXPR	3037:26	3037:27	5	& direntry -> tdir_offset
UNARY_OPERATOR	3037:26	3037:26	6	&
LEAF_NODE	3037:26	3037:26	7	&
FIELD	3037:27	3037:37	6	direntry -> tdir_offset
LEAF_NODE	3037:27	3037:27	7	direntry
LEAF_NODE	3037:35	3037:35	7	->
LEAF_NODE	3037:37	3037:37	7	tdir_offset
LEAF_NODE	3037:48	3037:48	5	)
LEAF_NODE	3037:49	3037:49	4	;
EXPR_STATEMENT	3038:1	3038:21	3	* value = float_union . f ;
EXPR	3038:1	3038:1	4	* value = float_union . f
ASSIGN	3038:1	3038:8	5	* value = float_union . f
LVAL	3038:1	3038:1	6	* value
UNARY_EXPR	3038:1	3038:2	7	* value
UNARY_OPERATOR	3038:1	3038:1	8	*
LEAF_NODE	3038:1	3038:1	9	*
FIELD	3038:2	3038:2	8	value
LEAF_NODE	3038:2	3038:2	9	value
ASSIGN_OP	3038:7	3038:7	6	=
LEAF_NODE	3038:7	3038:7	7	=
RVAL	3038:8	3038:8	6	float_union . f
FIELD	3038:8	3038:20	7	float_union . f
LEAF_NODE	3038:8	3038:8	8	float_union
LEAF_NODE	3038:19	3038:19	8	.
LEAF_NODE	3038:20	3038:20	8	f
LEAF_NODE	3038:21	3038:21	4	;
SELECTION	3039:1	3040:2	3	
KEYWORD	3039:1	3039:1	4	if
LEAF_NODE	3039:1	3039:1	5	if
LEAF_NODE	3039:4	3039:4	4	(
CONDITION	3039:5	3039:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	3039:5	3039:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	3039:5	3039:10	6	tif -> tif_flags
LEAF_NODE	3039:5	3039:5	7	tif
LEAF_NODE	3039:8	3039:8	7	->
LEAF_NODE	3039:10	3039:10	7	tif_flags
LEAF_NODE	3039:19	3039:19	6	&
FIELD	3039:20	3039:20	6	TIFF_SWAB
LEAF_NODE	3039:20	3039:20	7	TIFF_SWAB
LEAF_NODE	3039:29	3039:29	4	)
STATEMENTS	3040:2	3040:2	4	
EXPR_STATEMENT	3040:2	3040:30	5	TIFFSwabLong ( ( uint32 * ) value ) ;
EXPR	3040:2	3040:2	6	TIFFSwabLong ( ( uint32 * ) value )
FUNCTION_CALL	3040:2	3040:29	7	TIFFSwabLong ( ( uint32 * ) value )
CALLEE	3040:2	3040:2	8	TIFFSwabLong
LEAF_NODE	3040:2	3040:2	9	TIFFSwabLong
LEAF_NODE	3040:14	3040:14	8	(
ARGUMENT	3040:15	3040:24	8	( uint32 * ) value
LEAF_NODE	3040:15	3040:15	9	(
TYPE_NAME	3040:16	3040:16	9	uint32
LEAF_NODE	3040:16	3040:16	10	uint32
LEAF_NODE	3040:22	3040:22	9	*
LEAF_NODE	3040:23	3040:23	9	)
FIELD	3040:24	3040:24	9	value
LEAF_NODE	3040:24	3040:24	10	value
LEAF_NODE	3040:29	3040:29	8	)
LEAF_NODE	3040:30	3040:30	6	;
LEAF_NODE	3041:0	3041:0	2	}
FUNCTION_DEF	3043:0	3067:0	1	
RETURN_TYPE	3043:0	3043:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3043:0	3043:0	3	static
TYPE_NAME	3043:7	3043:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3043:7	3043:7	4	enum
LEAF_NODE	3043:12	3043:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3043:32	3043:32	2	TIFFReadDirEntryCheckedDouble
LEAF_NODE	3043:32	3043:32	3	TIFFReadDirEntryCheckedDouble
PARAMETER_LIST	3043:61	3043:110	2	( TIFF * tif , TIFFDirEntry * direntry , double * value )
LEAF_NODE	3043:61	3043:61	3	(
PARAMETER_DECL	3043:62	3043:68	3	TIFF * tif
TYPE	3043:62	3043:66	4	TIFF *
TYPE_NAME	3043:62	3043:62	5	TIFF
LEAF_NODE	3043:62	3043:62	6	TIFF
POINTER	3043:66	3043:66	5	*
LEAF_NODE	3043:66	3043:66	6	*
NAME	3043:68	3043:68	4	tif
LEAF_NODE	3043:68	3043:68	5	tif
LEAF_NODE	3043:71	3043:71	3	,
PARAMETER_DECL	3043:73	3043:87	3	TIFFDirEntry * direntry
TYPE	3043:73	3043:85	4	TIFFDirEntry *
TYPE_NAME	3043:73	3043:73	5	TIFFDirEntry
LEAF_NODE	3043:73	3043:73	6	TIFFDirEntry
POINTER	3043:85	3043:85	5	*
LEAF_NODE	3043:85	3043:85	6	*
NAME	3043:87	3043:87	4	direntry
LEAF_NODE	3043:87	3043:87	5	direntry
LEAF_NODE	3043:95	3043:95	3	,
PARAMETER_DECL	3043:97	3043:105	3	double * value
TYPE	3043:97	3043:103	4	double *
TYPE_NAME	3043:97	3043:97	5	double
LEAF_NODE	3043:97	3043:97	6	double
POINTER	3043:103	3043:103	5	*
LEAF_NODE	3043:103	3043:103	6	*
NAME	3043:105	3043:105	4	value
LEAF_NODE	3043:105	3043:105	5	value
LEAF_NODE	3043:110	3043:110	3	)
LEAF_NODE	3044:0	3044:0	2	{
STATEMENTS	3045:1	3066:30	2	
EXPR_STATEMENT	3045:1	3045:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	3045:1	3045:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	3045:1	3045:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	3045:1	3045:1	6	assert
LEAF_NODE	3045:1	3045:1	7	assert
LEAF_NODE	3045:7	3045:7	6	(
ARGUMENT	3045:8	3045:24	6	sizeof ( double ) == 8
FUNCTION_CALL	3045:8	3045:21	7	sizeof ( double )
CALLEE	3045:8	3045:8	8	sizeof
LEAF_NODE	3045:8	3045:8	9	sizeof
LEAF_NODE	3045:14	3045:14	8	(
ARGUMENT	3045:15	3045:15	8	double
FIELD	3045:15	3045:15	9	double
LEAF_NODE	3045:15	3045:15	10	double
LEAF_NODE	3045:21	3045:21	8	)
EQ_OPERATOR	3045:22	3045:22	7	==
LEAF_NODE	3045:22	3045:22	8	==
FIELD	3045:24	3045:24	7	8
LEAF_NODE	3045:24	3045:24	8	8
LEAF_NODE	3045:25	3045:25	6	)
LEAF_NODE	3045:26	3045:26	4	;
EXPR_STATEMENT	3046:1	3046:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	3046:1	3046:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	3046:1	3046:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	3046:1	3046:1	6	assert
LEAF_NODE	3046:1	3046:1	7	assert
LEAF_NODE	3046:7	3046:7	6	(
ARGUMENT	3046:8	3046:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	3046:8	3046:21	7	sizeof ( uint64 )
CALLEE	3046:8	3046:8	8	sizeof
LEAF_NODE	3046:8	3046:8	9	sizeof
LEAF_NODE	3046:14	3046:14	8	(
ARGUMENT	3046:15	3046:15	8	uint64
FIELD	3046:15	3046:15	9	uint64
LEAF_NODE	3046:15	3046:15	10	uint64
LEAF_NODE	3046:21	3046:21	8	)
EQ_OPERATOR	3046:22	3046:22	7	==
LEAF_NODE	3046:22	3046:22	8	==
FIELD	3046:24	3046:24	7	8
LEAF_NODE	3046:24	3046:24	8	8
LEAF_NODE	3046:25	3046:25	6	)
LEAF_NODE	3046:26	3046:26	4	;
EXPR_STATEMENT	3047:1	3047:35	3	assert ( sizeof ( UInt64Aligned_t ) == 8 ) ;
EXPR	3047:1	3047:1	4	assert ( sizeof ( UInt64Aligned_t ) == 8 )
FUNCTION_CALL	3047:1	3047:34	5	assert ( sizeof ( UInt64Aligned_t ) == 8 )
CALLEE	3047:1	3047:1	6	assert
LEAF_NODE	3047:1	3047:1	7	assert
LEAF_NODE	3047:7	3047:7	6	(
ARGUMENT	3047:8	3047:33	6	sizeof ( UInt64Aligned_t ) == 8
FUNCTION_CALL	3047:8	3047:30	7	sizeof ( UInt64Aligned_t )
CALLEE	3047:8	3047:8	8	sizeof
LEAF_NODE	3047:8	3047:8	9	sizeof
LEAF_NODE	3047:14	3047:14	8	(
ARGUMENT	3047:15	3047:15	8	UInt64Aligned_t
FIELD	3047:15	3047:15	9	UInt64Aligned_t
LEAF_NODE	3047:15	3047:15	10	UInt64Aligned_t
LEAF_NODE	3047:30	3047:30	8	)
EQ_OPERATOR	3047:31	3047:31	7	==
LEAF_NODE	3047:31	3047:31	8	==
FIELD	3047:33	3047:33	7	8
LEAF_NODE	3047:33	3047:33	8	8
LEAF_NODE	3047:34	3047:34	6	)
LEAF_NODE	3047:35	3047:35	4	;
SELECTION	3048:1	3049:1	3	
KEYWORD	3048:1	3048:1	4	if
LEAF_NODE	3048:1	3048:1	5	if
LEAF_NODE	3048:4	3048:4	4	(
CONDITION	3048:5	3048:5	4	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	3048:5	3048:5	5	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	3048:5	3048:34	6	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	3048:5	3048:5	7	!
LEAF_NODE	3048:5	3048:5	8	!
LEAF_NODE	3048:6	3048:6	7	(
FIELD	3048:7	3048:12	7	tif -> tif_flags
LEAF_NODE	3048:7	3048:7	8	tif
LEAF_NODE	3048:10	3048:10	8	->
LEAF_NODE	3048:12	3048:12	8	tif_flags
LEAF_NODE	3048:21	3048:21	7	&
FIELD	3048:22	3048:22	7	TIFF_BIGTIFF
LEAF_NODE	3048:22	3048:22	8	TIFF_BIGTIFF
LEAF_NODE	3048:34	3048:34	7	)
LEAF_NODE	3048:35	3048:35	4	)
STATEMENTS	3049:1	3057:1	4	
LEAF_NODE	3049:1	3049:1	5	{
STATEMENTS	3050:2	3056:14	5	
SIMPLE_DECL	3050:2	3050:30	6	enum TIFFReadDirEntryErr err ;
VAR_DECL	3050:2	3050:27	7	enum TIFFReadDirEntryErr err
TYPE	3050:2	3050:2	8	enum TIFFReadDirEntryErr
TYPE_NAME	3050:2	3050:7	9	enum TIFFReadDirEntryErr
LEAF_NODE	3050:2	3050:2	10	enum
LEAF_NODE	3050:7	3050:7	10	TIFFReadDirEntryErr
NAME	3050:27	3050:27	8	err
LEAF_NODE	3050:27	3050:27	9	err
LEAF_NODE	3050:30	3050:30	7	;
SIMPLE_DECL	3051:2	3051:49	6	uint32 offset ; offset = direntry -> tdir_offset . toff_long ;
VAR_DECL	3051:2	3051:9	7	uint32 offset ; offset = direntry -> tdir_offset . toff_long
TYPE	3051:2	3051:2	8	uint32
TYPE_NAME	3051:2	3051:2	9	uint32
LEAF_NODE	3051:2	3051:2	10	uint32
NAME	3051:9	3051:9	8	offset
LEAF_NODE	3051:9	3051:9	9	offset
LEAF_NODE	0:0	0:0	8	;
INIT	3051:9	3051:9	8	offset = direntry -> tdir_offset . toff_long
ASSIGN	3051:9	3051:18	9	offset = direntry -> tdir_offset . toff_long
LVAL	3051:9	3051:9	10	offset
NAME	3051:9	3051:9	11	offset
LEAF_NODE	3051:9	3051:9	12	offset
ASSIGN_OP	3051:16	3051:16	10	=
LEAF_NODE	3051:16	3051:16	11	=
RVAL	3051:18	3051:18	10	direntry -> tdir_offset . toff_long
FIELD	3051:18	3051:40	11	direntry -> tdir_offset . toff_long
LEAF_NODE	3051:18	3051:18	12	direntry
LEAF_NODE	3051:26	3051:26	12	->
LEAF_NODE	3051:28	3051:28	12	tdir_offset
LEAF_NODE	3051:39	3051:39	12	.
LEAF_NODE	3051:40	3051:40	12	toff_long
LEAF_NODE	3051:49	3051:49	7	;
SELECTION	3052:2	3053:3	6	
KEYWORD	3052:2	3052:2	7	if
LEAF_NODE	3052:2	3052:2	8	if
LEAF_NODE	3052:5	3052:5	7	(
CONDITION	3052:6	3052:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	3052:6	3052:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	3052:6	3052:11	9	tif -> tif_flags
LEAF_NODE	3052:6	3052:6	10	tif
LEAF_NODE	3052:9	3052:9	10	->
LEAF_NODE	3052:11	3052:11	10	tif_flags
LEAF_NODE	3052:20	3052:20	9	&
FIELD	3052:21	3052:21	9	TIFF_SWAB
LEAF_NODE	3052:21	3052:21	10	TIFF_SWAB
LEAF_NODE	3052:30	3052:30	7	)
STATEMENTS	3053:3	3053:3	7	
EXPR_STATEMENT	3053:3	3053:24	8	TIFFSwabLong ( & offset ) ;
EXPR	3053:3	3053:3	9	TIFFSwabLong ( & offset )
FUNCTION_CALL	3053:3	3053:23	10	TIFFSwabLong ( & offset )
CALLEE	3053:3	3053:3	11	TIFFSwabLong
LEAF_NODE	3053:3	3053:3	12	TIFFSwabLong
LEAF_NODE	3053:15	3053:15	11	(
ARGUMENT	3053:16	3053:16	11	& offset
UNARY_EXPR	3053:16	3053:17	12	& offset
UNARY_OPERATOR	3053:16	3053:16	13	&
LEAF_NODE	3053:16	3053:16	14	&
FIELD	3053:17	3053:17	13	offset
LEAF_NODE	3053:17	3053:17	14	offset
LEAF_NODE	3053:23	3053:23	11	)
LEAF_NODE	3053:24	3053:24	9	;
EXPR_STATEMENT	3054:2	3054:46	6	err = TIFFReadDirEntryData ( tif , offset , 8 , value ) ;
EXPR	3054:2	3054:2	7	err = TIFFReadDirEntryData ( tif , offset , 8 , value )
ASSIGN	3054:2	3054:6	8	err = TIFFReadDirEntryData ( tif , offset , 8 , value )
LVAL	3054:2	3054:2	9	err
FIELD	3054:2	3054:2	10	err
LEAF_NODE	3054:2	3054:2	11	err
ASSIGN_OP	3054:5	3054:5	9	=
LEAF_NODE	3054:5	3054:5	10	=
RVAL	3054:6	3054:6	9	TIFFReadDirEntryData ( tif , offset , 8 , value )
FUNCTION_CALL	3054:6	3054:45	10	TIFFReadDirEntryData ( tif , offset , 8 , value )
CALLEE	3054:6	3054:6	11	TIFFReadDirEntryData
LEAF_NODE	3054:6	3054:6	12	TIFFReadDirEntryData
LEAF_NODE	3054:26	3054:26	11	(
ARGUMENT	3054:27	3054:27	11	tif
FIELD	3054:27	3054:27	12	tif
LEAF_NODE	3054:27	3054:27	13	tif
LEAF_NODE	3054:30	3054:30	11	,
ARGUMENT	3054:31	3054:31	11	offset
FIELD	3054:31	3054:31	12	offset
LEAF_NODE	3054:31	3054:31	13	offset
LEAF_NODE	3054:37	3054:37	11	,
ARGUMENT	3054:38	3054:38	11	8
FIELD	3054:38	3054:38	12	8
LEAF_NODE	3054:38	3054:38	13	8
LEAF_NODE	3054:39	3054:39	11	,
ARGUMENT	3054:40	3054:40	11	value
FIELD	3054:40	3054:40	12	value
LEAF_NODE	3054:40	3054:40	13	value
LEAF_NODE	3054:45	3054:45	11	)
LEAF_NODE	3054:46	3054:46	7	;
SELECTION	3055:2	3056:3	6	
KEYWORD	3055:2	3055:2	7	if
LEAF_NODE	3055:2	3055:2	8	if
LEAF_NODE	3055:5	3055:5	7	(
CONDITION	3055:6	3055:6	7	err != TIFFReadDirEntryErrOk
EXPR	3055:6	3055:11	8	err != TIFFReadDirEntryErrOk
FIELD	3055:6	3055:6	9	err
LEAF_NODE	3055:6	3055:6	10	err
EQ_OPERATOR	3055:9	3055:9	9	!=
LEAF_NODE	3055:9	3055:9	10	!=
FIELD	3055:11	3055:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	3055:11	3055:11	10	TIFFReadDirEntryErrOk
LEAF_NODE	3055:32	3055:32	7	)
STATEMENTS	3056:3	3056:3	7	
LEAF_NODE	3056:3	3056:3	8	return
LEAF_NODE	3056:9	3056:9	6	(
LEAF_NODE	3056:10	3056:10	6	err
LEAF_NODE	3056:13	3056:13	6	)
LEAF_NODE	3056:14	3056:14	6	;
LEAF_NODE	3057:1	3057:1	5	}
SELECTION	3058:1	3059:1	3	
KEYWORD	3058:1	3058:1	4	else
LEAF_NODE	3058:1	3058:1	5	else
STATEMENTS	3059:1	3063:1	4	
LEAF_NODE	3059:1	3059:1	5	{
STATEMENTS	3060:8	3062:8	5	
SIMPLE_DECL	3060:8	3060:36	6	UInt64Aligned_t uint64_union ;
VAR_DECL	3060:8	3060:24	7	UInt64Aligned_t uint64_union
TYPE	3060:8	3060:8	8	UInt64Aligned_t
TYPE_NAME	3060:8	3060:8	9	UInt64Aligned_t
LEAF_NODE	3060:8	3060:8	10	UInt64Aligned_t
NAME	3060:24	3060:24	8	uint64_union
LEAF_NODE	3060:24	3060:24	9	uint64_union
LEAF_NODE	3060:36	3060:36	7	;
EXPR_STATEMENT	3061:8	3061:55	6	uint64_union . l = direntry -> tdir_offset . toff_long8 ;
EXPR	3061:8	3061:8	7	uint64_union . l = direntry -> tdir_offset . toff_long8
ASSIGN	3061:8	3061:23	8	uint64_union . l = direntry -> tdir_offset . toff_long8
LVAL	3061:8	3061:8	9	uint64_union . l
FIELD	3061:8	3061:21	10	uint64_union . l
LEAF_NODE	3061:8	3061:8	11	uint64_union
LEAF_NODE	3061:20	3061:20	11	.
LEAF_NODE	3061:21	3061:21	11	l
ASSIGN_OP	3061:22	3061:22	9	=
LEAF_NODE	3061:22	3061:22	10	=
RVAL	3061:23	3061:23	9	direntry -> tdir_offset . toff_long8
FIELD	3061:23	3061:45	10	direntry -> tdir_offset . toff_long8
LEAF_NODE	3061:23	3061:23	11	direntry
LEAF_NODE	3061:31	3061:31	11	->
LEAF_NODE	3061:33	3061:33	11	tdir_offset
LEAF_NODE	3061:44	3061:44	11	.
LEAF_NODE	3061:45	3061:45	11	toff_long8
LEAF_NODE	3061:55	3061:55	7	;
EXPR_STATEMENT	3062:8	3062:29	6	* value = uint64_union . d ;
EXPR	3062:8	3062:8	7	* value = uint64_union . d
ASSIGN	3062:8	3062:15	8	* value = uint64_union . d
LVAL	3062:8	3062:8	9	* value
UNARY_EXPR	3062:8	3062:9	10	* value
UNARY_OPERATOR	3062:8	3062:8	11	*
LEAF_NODE	3062:8	3062:8	12	*
FIELD	3062:9	3062:9	11	value
LEAF_NODE	3062:9	3062:9	12	value
ASSIGN_OP	3062:14	3062:14	9	=
LEAF_NODE	3062:14	3062:14	10	=
RVAL	3062:15	3062:15	9	uint64_union . d
FIELD	3062:15	3062:28	10	uint64_union . d
LEAF_NODE	3062:15	3062:15	11	uint64_union
LEAF_NODE	3062:27	3062:27	11	.
LEAF_NODE	3062:28	3062:28	11	d
LEAF_NODE	3062:29	3062:29	7	;
LEAF_NODE	3063:1	3063:1	5	}
SELECTION	3064:1	3065:2	3	
KEYWORD	3064:1	3064:1	4	if
LEAF_NODE	3064:1	3064:1	5	if
LEAF_NODE	3064:4	3064:4	4	(
CONDITION	3064:5	3064:5	4	tif -> tif_flags & TIFF_SWAB
EXPR	3064:5	3064:20	5	tif -> tif_flags & TIFF_SWAB
FIELD	3064:5	3064:10	6	tif -> tif_flags
LEAF_NODE	3064:5	3064:5	7	tif
LEAF_NODE	3064:8	3064:8	7	->
LEAF_NODE	3064:10	3064:10	7	tif_flags
LEAF_NODE	3064:19	3064:19	6	&
FIELD	3064:20	3064:20	6	TIFF_SWAB
LEAF_NODE	3064:20	3064:20	7	TIFF_SWAB
LEAF_NODE	3064:29	3064:29	4	)
STATEMENTS	3065:2	3065:2	4	
EXPR_STATEMENT	3065:2	3065:31	5	TIFFSwabLong8 ( ( uint64 * ) value ) ;
EXPR	3065:2	3065:2	6	TIFFSwabLong8 ( ( uint64 * ) value )
FUNCTION_CALL	3065:2	3065:30	7	TIFFSwabLong8 ( ( uint64 * ) value )
CALLEE	3065:2	3065:2	8	TIFFSwabLong8
LEAF_NODE	3065:2	3065:2	9	TIFFSwabLong8
LEAF_NODE	3065:15	3065:15	8	(
ARGUMENT	3065:16	3065:25	8	( uint64 * ) value
LEAF_NODE	3065:16	3065:16	9	(
TYPE_NAME	3065:17	3065:17	9	uint64
LEAF_NODE	3065:17	3065:17	10	uint64
LEAF_NODE	3065:23	3065:23	9	*
LEAF_NODE	3065:24	3065:24	9	)
FIELD	3065:25	3065:25	9	value
LEAF_NODE	3065:25	3065:25	10	value
LEAF_NODE	3065:30	3065:30	8	)
LEAF_NODE	3065:31	3065:31	6	;
LEAF_NODE	3066:1	3066:1	3	return
LEAF_NODE	3066:7	3066:7	3	(
LEAF_NODE	3066:8	3066:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	3066:29	3066:29	3	)
LEAF_NODE	3066:30	3066:30	3	;
LEAF_NODE	3067:0	3067:0	2	}
FUNCTION_DEF	3069:0	3075:0	1	
RETURN_TYPE	3069:0	3069:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3069:0	3069:0	3	static
TYPE_NAME	3069:7	3069:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3069:7	3069:7	4	enum
LEAF_NODE	3069:12	3069:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3069:32	3069:32	2	TIFFReadDirEntryCheckRangeByteSbyte
LEAF_NODE	3069:32	3069:32	3	TIFFReadDirEntryCheckRangeByteSbyte
PARAMETER_LIST	3069:67	3069:78	2	( int8 value )
LEAF_NODE	3069:67	3069:67	3	(
PARAMETER_DECL	3069:68	3069:73	3	int8 value
TYPE	3069:68	3069:68	4	int8
TYPE_NAME	3069:68	3069:68	5	int8
LEAF_NODE	3069:68	3069:68	6	int8
NAME	3069:73	3069:73	4	value
LEAF_NODE	3069:73	3069:73	5	value
LEAF_NODE	3069:78	3069:78	3	)
LEAF_NODE	3070:0	3070:0	2	{
STATEMENTS	3071:1	3074:31	2	
SELECTION	3071:1	3072:2	3	
KEYWORD	3071:1	3071:1	4	if
LEAF_NODE	3071:1	3071:1	5	if
LEAF_NODE	3071:4	3071:4	4	(
CONDITION	3071:5	3071:5	4	value < 0
EXPR	3071:5	3071:11	5	value < 0
FIELD	3071:5	3071:5	6	value
LEAF_NODE	3071:5	3071:5	7	value
REL_OPERATOR	3071:10	3071:10	6	<
LEAF_NODE	3071:10	3071:10	7	<
FIELD	3071:11	3071:11	6	0
LEAF_NODE	3071:11	3071:11	7	0
LEAF_NODE	3071:12	3071:12	4	)
STATEMENTS	3072:2	3072:2	4	
LEAF_NODE	3072:2	3072:2	5	return
LEAF_NODE	3072:8	3072:8	3	(
LEAF_NODE	3072:9	3072:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3072:33	3072:33	3	)
LEAF_NODE	3072:34	3072:34	3	;
SELECTION	3073:1	3074:2	3	
KEYWORD	3073:1	3073:1	4	else
LEAF_NODE	3073:1	3073:1	5	else
STATEMENTS	3074:2	3074:2	4	
LEAF_NODE	3074:2	3074:2	5	return
LEAF_NODE	3074:8	3074:8	3	(
LEAF_NODE	3074:9	3074:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3074:30	3074:30	3	)
LEAF_NODE	3074:31	3074:31	3	;
LEAF_NODE	3075:0	3075:0	2	}
FUNCTION_DEF	3077:0	3083:0	1	
RETURN_TYPE	3077:0	3077:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3077:0	3077:0	3	static
TYPE_NAME	3077:7	3077:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3077:7	3077:7	4	enum
LEAF_NODE	3077:12	3077:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3077:32	3077:32	2	TIFFReadDirEntryCheckRangeByteShort
LEAF_NODE	3077:32	3077:32	3	TIFFReadDirEntryCheckRangeByteShort
PARAMETER_LIST	3077:67	3077:80	2	( uint16 value )
LEAF_NODE	3077:67	3077:67	3	(
PARAMETER_DECL	3077:68	3077:75	3	uint16 value
TYPE	3077:68	3077:68	4	uint16
TYPE_NAME	3077:68	3077:68	5	uint16
LEAF_NODE	3077:68	3077:68	6	uint16
NAME	3077:75	3077:75	4	value
LEAF_NODE	3077:75	3077:75	5	value
LEAF_NODE	3077:80	3077:80	3	)
LEAF_NODE	3078:0	3078:0	2	{
STATEMENTS	3079:1	3082:31	2	
SELECTION	3079:1	3080:2	3	
KEYWORD	3079:1	3079:1	4	if
LEAF_NODE	3079:1	3079:1	5	if
LEAF_NODE	3079:4	3079:4	4	(
CONDITION	3079:5	3079:5	4	value > 0xFF
EXPR	3079:5	3079:11	5	value > 0xFF
FIELD	3079:5	3079:5	6	value
LEAF_NODE	3079:5	3079:5	7	value
REL_OPERATOR	3079:10	3079:10	6	>
LEAF_NODE	3079:10	3079:10	7	>
FIELD	3079:11	3079:11	6	0xFF
LEAF_NODE	3079:11	3079:11	7	0xFF
LEAF_NODE	3079:15	3079:15	4	)
STATEMENTS	3080:2	3080:2	4	
LEAF_NODE	3080:2	3080:2	5	return
LEAF_NODE	3080:8	3080:8	3	(
LEAF_NODE	3080:9	3080:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3080:33	3080:33	3	)
LEAF_NODE	3080:34	3080:34	3	;
SELECTION	3081:1	3082:2	3	
KEYWORD	3081:1	3081:1	4	else
LEAF_NODE	3081:1	3081:1	5	else
STATEMENTS	3082:2	3082:2	4	
LEAF_NODE	3082:2	3082:2	5	return
LEAF_NODE	3082:8	3082:8	3	(
LEAF_NODE	3082:9	3082:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3082:30	3082:30	3	)
LEAF_NODE	3082:31	3082:31	3	;
LEAF_NODE	3083:0	3083:0	2	}
FUNCTION_DEF	3085:0	3091:0	1	
RETURN_TYPE	3085:0	3085:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3085:0	3085:0	3	static
TYPE_NAME	3085:7	3085:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3085:7	3085:7	4	enum
LEAF_NODE	3085:12	3085:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3085:32	3085:32	2	TIFFReadDirEntryCheckRangeByteSshort
LEAF_NODE	3085:32	3085:32	3	TIFFReadDirEntryCheckRangeByteSshort
PARAMETER_LIST	3085:68	3085:80	2	( int16 value )
LEAF_NODE	3085:68	3085:68	3	(
PARAMETER_DECL	3085:69	3085:75	3	int16 value
TYPE	3085:69	3085:69	4	int16
TYPE_NAME	3085:69	3085:69	5	int16
LEAF_NODE	3085:69	3085:69	6	int16
NAME	3085:75	3085:75	4	value
LEAF_NODE	3085:75	3085:75	5	value
LEAF_NODE	3085:80	3085:80	3	)
LEAF_NODE	3086:0	3086:0	2	{
STATEMENTS	3087:1	3090:31	2	
SELECTION	3087:1	3088:2	3	
KEYWORD	3087:1	3087:1	4	if
LEAF_NODE	3087:1	3087:1	5	if
LEAF_NODE	3087:4	3087:4	4	(
CONDITION	3087:5	3087:5	4	( value < 0 ) || ( value > 0xFF )
EXPR	3087:5	3087:5	5	( value < 0 ) || ( value > 0xFF )
OR	3087:5	3087:16	6	( value < 0 ) || ( value > 0xFF )
EXPR	3087:5	3087:13	7	( value < 0 )
LEAF_NODE	3087:5	3087:5	8	(
FIELD	3087:6	3087:6	8	value
LEAF_NODE	3087:6	3087:6	9	value
REL_OPERATOR	3087:11	3087:11	8	<
LEAF_NODE	3087:11	3087:11	9	<
FIELD	3087:12	3087:12	8	0
LEAF_NODE	3087:12	3087:12	9	0
LEAF_NODE	3087:13	3087:13	8	)
LEAF_NODE	3087:14	3087:14	7	||
EXPR	3087:16	3087:27	7	( value > 0xFF )
LEAF_NODE	3087:16	3087:16	8	(
FIELD	3087:17	3087:17	8	value
LEAF_NODE	3087:17	3087:17	9	value
REL_OPERATOR	3087:22	3087:22	8	>
LEAF_NODE	3087:22	3087:22	9	>
FIELD	3087:23	3087:23	8	0xFF
LEAF_NODE	3087:23	3087:23	9	0xFF
LEAF_NODE	3087:27	3087:27	8	)
LEAF_NODE	3087:28	3087:28	4	)
STATEMENTS	3088:2	3088:2	4	
LEAF_NODE	3088:2	3088:2	5	return
LEAF_NODE	3088:8	3088:8	3	(
LEAF_NODE	3088:9	3088:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3088:33	3088:33	3	)
LEAF_NODE	3088:34	3088:34	3	;
SELECTION	3089:1	3090:2	3	
KEYWORD	3089:1	3089:1	4	else
LEAF_NODE	3089:1	3089:1	5	else
STATEMENTS	3090:2	3090:2	4	
LEAF_NODE	3090:2	3090:2	5	return
LEAF_NODE	3090:8	3090:8	3	(
LEAF_NODE	3090:9	3090:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3090:30	3090:30	3	)
LEAF_NODE	3090:31	3090:31	3	;
LEAF_NODE	3091:0	3091:0	2	}
FUNCTION_DEF	3093:0	3099:0	1	
RETURN_TYPE	3093:0	3093:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3093:0	3093:0	3	static
TYPE_NAME	3093:7	3093:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3093:7	3093:7	4	enum
LEAF_NODE	3093:12	3093:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3093:32	3093:32	2	TIFFReadDirEntryCheckRangeByteLong
LEAF_NODE	3093:32	3093:32	3	TIFFReadDirEntryCheckRangeByteLong
PARAMETER_LIST	3093:66	3093:79	2	( uint32 value )
LEAF_NODE	3093:66	3093:66	3	(
PARAMETER_DECL	3093:67	3093:74	3	uint32 value
TYPE	3093:67	3093:67	4	uint32
TYPE_NAME	3093:67	3093:67	5	uint32
LEAF_NODE	3093:67	3093:67	6	uint32
NAME	3093:74	3093:74	4	value
LEAF_NODE	3093:74	3093:74	5	value
LEAF_NODE	3093:79	3093:79	3	)
LEAF_NODE	3094:0	3094:0	2	{
STATEMENTS	3095:1	3098:31	2	
SELECTION	3095:1	3096:2	3	
KEYWORD	3095:1	3095:1	4	if
LEAF_NODE	3095:1	3095:1	5	if
LEAF_NODE	3095:4	3095:4	4	(
CONDITION	3095:5	3095:5	4	value > 0xFF
EXPR	3095:5	3095:11	5	value > 0xFF
FIELD	3095:5	3095:5	6	value
LEAF_NODE	3095:5	3095:5	7	value
REL_OPERATOR	3095:10	3095:10	6	>
LEAF_NODE	3095:10	3095:10	7	>
FIELD	3095:11	3095:11	6	0xFF
LEAF_NODE	3095:11	3095:11	7	0xFF
LEAF_NODE	3095:15	3095:15	4	)
STATEMENTS	3096:2	3096:2	4	
LEAF_NODE	3096:2	3096:2	5	return
LEAF_NODE	3096:8	3096:8	3	(
LEAF_NODE	3096:9	3096:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3096:33	3096:33	3	)
LEAF_NODE	3096:34	3096:34	3	;
SELECTION	3097:1	3098:2	3	
KEYWORD	3097:1	3097:1	4	else
LEAF_NODE	3097:1	3097:1	5	else
STATEMENTS	3098:2	3098:2	4	
LEAF_NODE	3098:2	3098:2	5	return
LEAF_NODE	3098:8	3098:8	3	(
LEAF_NODE	3098:9	3098:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3098:30	3098:30	3	)
LEAF_NODE	3098:31	3098:31	3	;
LEAF_NODE	3099:0	3099:0	2	}
FUNCTION_DEF	3101:0	3107:0	1	
RETURN_TYPE	3101:0	3101:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3101:0	3101:0	3	static
TYPE_NAME	3101:7	3101:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3101:7	3101:7	4	enum
LEAF_NODE	3101:12	3101:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3101:32	3101:32	2	TIFFReadDirEntryCheckRangeByteSlong
LEAF_NODE	3101:32	3101:32	3	TIFFReadDirEntryCheckRangeByteSlong
PARAMETER_LIST	3101:67	3101:79	2	( int32 value )
LEAF_NODE	3101:67	3101:67	3	(
PARAMETER_DECL	3101:68	3101:74	3	int32 value
TYPE	3101:68	3101:68	4	int32
TYPE_NAME	3101:68	3101:68	5	int32
LEAF_NODE	3101:68	3101:68	6	int32
NAME	3101:74	3101:74	4	value
LEAF_NODE	3101:74	3101:74	5	value
LEAF_NODE	3101:79	3101:79	3	)
LEAF_NODE	3102:0	3102:0	2	{
STATEMENTS	3103:1	3106:31	2	
SELECTION	3103:1	3104:2	3	
KEYWORD	3103:1	3103:1	4	if
LEAF_NODE	3103:1	3103:1	5	if
LEAF_NODE	3103:4	3103:4	4	(
CONDITION	3103:5	3103:5	4	( value < 0 ) || ( value > 0xFF )
EXPR	3103:5	3103:5	5	( value < 0 ) || ( value > 0xFF )
OR	3103:5	3103:16	6	( value < 0 ) || ( value > 0xFF )
EXPR	3103:5	3103:13	7	( value < 0 )
LEAF_NODE	3103:5	3103:5	8	(
FIELD	3103:6	3103:6	8	value
LEAF_NODE	3103:6	3103:6	9	value
REL_OPERATOR	3103:11	3103:11	8	<
LEAF_NODE	3103:11	3103:11	9	<
FIELD	3103:12	3103:12	8	0
LEAF_NODE	3103:12	3103:12	9	0
LEAF_NODE	3103:13	3103:13	8	)
LEAF_NODE	3103:14	3103:14	7	||
EXPR	3103:16	3103:27	7	( value > 0xFF )
LEAF_NODE	3103:16	3103:16	8	(
FIELD	3103:17	3103:17	8	value
LEAF_NODE	3103:17	3103:17	9	value
REL_OPERATOR	3103:22	3103:22	8	>
LEAF_NODE	3103:22	3103:22	9	>
FIELD	3103:23	3103:23	8	0xFF
LEAF_NODE	3103:23	3103:23	9	0xFF
LEAF_NODE	3103:27	3103:27	8	)
LEAF_NODE	3103:28	3103:28	4	)
STATEMENTS	3104:2	3104:2	4	
LEAF_NODE	3104:2	3104:2	5	return
LEAF_NODE	3104:8	3104:8	3	(
LEAF_NODE	3104:9	3104:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3104:33	3104:33	3	)
LEAF_NODE	3104:34	3104:34	3	;
SELECTION	3105:1	3106:2	3	
KEYWORD	3105:1	3105:1	4	else
LEAF_NODE	3105:1	3105:1	5	else
STATEMENTS	3106:2	3106:2	4	
LEAF_NODE	3106:2	3106:2	5	return
LEAF_NODE	3106:8	3106:8	3	(
LEAF_NODE	3106:9	3106:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3106:30	3106:30	3	)
LEAF_NODE	3106:31	3106:31	3	;
LEAF_NODE	3107:0	3107:0	2	}
FUNCTION_DEF	3109:0	3115:0	1	
RETURN_TYPE	3109:0	3109:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3109:0	3109:0	3	static
TYPE_NAME	3109:7	3109:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3109:7	3109:7	4	enum
LEAF_NODE	3109:12	3109:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3109:32	3109:32	2	TIFFReadDirEntryCheckRangeByteLong8
LEAF_NODE	3109:32	3109:32	3	TIFFReadDirEntryCheckRangeByteLong8
PARAMETER_LIST	3109:67	3109:80	2	( uint64 value )
LEAF_NODE	3109:67	3109:67	3	(
PARAMETER_DECL	3109:68	3109:75	3	uint64 value
TYPE	3109:68	3109:68	4	uint64
TYPE_NAME	3109:68	3109:68	5	uint64
LEAF_NODE	3109:68	3109:68	6	uint64
NAME	3109:75	3109:75	4	value
LEAF_NODE	3109:75	3109:75	5	value
LEAF_NODE	3109:80	3109:80	3	)
LEAF_NODE	3110:0	3110:0	2	{
STATEMENTS	3111:1	3114:31	2	
SELECTION	3111:1	3112:2	3	
KEYWORD	3111:1	3111:1	4	if
LEAF_NODE	3111:1	3111:1	5	if
LEAF_NODE	3111:4	3111:4	4	(
CONDITION	3111:5	3111:5	4	value > 0xFF
EXPR	3111:5	3111:11	5	value > 0xFF
FIELD	3111:5	3111:5	6	value
LEAF_NODE	3111:5	3111:5	7	value
REL_OPERATOR	3111:10	3111:10	6	>
LEAF_NODE	3111:10	3111:10	7	>
FIELD	3111:11	3111:11	6	0xFF
LEAF_NODE	3111:11	3111:11	7	0xFF
LEAF_NODE	3111:15	3111:15	4	)
STATEMENTS	3112:2	3112:2	4	
LEAF_NODE	3112:2	3112:2	5	return
LEAF_NODE	3112:8	3112:8	3	(
LEAF_NODE	3112:9	3112:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3112:33	3112:33	3	)
LEAF_NODE	3112:34	3112:34	3	;
SELECTION	3113:1	3114:2	3	
KEYWORD	3113:1	3113:1	4	else
LEAF_NODE	3113:1	3113:1	5	else
STATEMENTS	3114:2	3114:2	4	
LEAF_NODE	3114:2	3114:2	5	return
LEAF_NODE	3114:8	3114:8	3	(
LEAF_NODE	3114:9	3114:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3114:30	3114:30	3	)
LEAF_NODE	3114:31	3114:31	3	;
LEAF_NODE	3115:0	3115:0	2	}
FUNCTION_DEF	3117:0	3123:0	1	
RETURN_TYPE	3117:0	3117:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3117:0	3117:0	3	static
TYPE_NAME	3117:7	3117:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3117:7	3117:7	4	enum
LEAF_NODE	3117:12	3117:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3117:32	3117:32	2	TIFFReadDirEntryCheckRangeByteSlong8
LEAF_NODE	3117:32	3117:32	3	TIFFReadDirEntryCheckRangeByteSlong8
PARAMETER_LIST	3117:68	3117:80	2	( int64 value )
LEAF_NODE	3117:68	3117:68	3	(
PARAMETER_DECL	3117:69	3117:75	3	int64 value
TYPE	3117:69	3117:69	4	int64
TYPE_NAME	3117:69	3117:69	5	int64
LEAF_NODE	3117:69	3117:69	6	int64
NAME	3117:75	3117:75	4	value
LEAF_NODE	3117:75	3117:75	5	value
LEAF_NODE	3117:80	3117:80	3	)
LEAF_NODE	3118:0	3118:0	2	{
STATEMENTS	3119:1	3122:31	2	
SELECTION	3119:1	3120:2	3	
KEYWORD	3119:1	3119:1	4	if
LEAF_NODE	3119:1	3119:1	5	if
LEAF_NODE	3119:4	3119:4	4	(
CONDITION	3119:5	3119:5	4	( value < 0 ) || ( value > 0xFF )
EXPR	3119:5	3119:5	5	( value < 0 ) || ( value > 0xFF )
OR	3119:5	3119:16	6	( value < 0 ) || ( value > 0xFF )
EXPR	3119:5	3119:13	7	( value < 0 )
LEAF_NODE	3119:5	3119:5	8	(
FIELD	3119:6	3119:6	8	value
LEAF_NODE	3119:6	3119:6	9	value
REL_OPERATOR	3119:11	3119:11	8	<
LEAF_NODE	3119:11	3119:11	9	<
FIELD	3119:12	3119:12	8	0
LEAF_NODE	3119:12	3119:12	9	0
LEAF_NODE	3119:13	3119:13	8	)
LEAF_NODE	3119:14	3119:14	7	||
EXPR	3119:16	3119:27	7	( value > 0xFF )
LEAF_NODE	3119:16	3119:16	8	(
FIELD	3119:17	3119:17	8	value
LEAF_NODE	3119:17	3119:17	9	value
REL_OPERATOR	3119:22	3119:22	8	>
LEAF_NODE	3119:22	3119:22	9	>
FIELD	3119:23	3119:23	8	0xFF
LEAF_NODE	3119:23	3119:23	9	0xFF
LEAF_NODE	3119:27	3119:27	8	)
LEAF_NODE	3119:28	3119:28	4	)
STATEMENTS	3120:2	3120:2	4	
LEAF_NODE	3120:2	3120:2	5	return
LEAF_NODE	3120:8	3120:8	3	(
LEAF_NODE	3120:9	3120:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3120:33	3120:33	3	)
LEAF_NODE	3120:34	3120:34	3	;
SELECTION	3121:1	3122:2	3	
KEYWORD	3121:1	3121:1	4	else
LEAF_NODE	3121:1	3121:1	5	else
STATEMENTS	3122:2	3122:2	4	
LEAF_NODE	3122:2	3122:2	5	return
LEAF_NODE	3122:8	3122:8	3	(
LEAF_NODE	3122:9	3122:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3122:30	3122:30	3	)
LEAF_NODE	3122:31	3122:31	3	;
LEAF_NODE	3123:0	3123:0	2	}
FUNCTION_DEF	3125:0	3131:0	1	
RETURN_TYPE	3125:0	3125:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3125:0	3125:0	3	static
TYPE_NAME	3125:7	3125:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3125:7	3125:7	4	enum
LEAF_NODE	3125:12	3125:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3125:32	3125:32	2	TIFFReadDirEntryCheckRangeSbyteByte
LEAF_NODE	3125:32	3125:32	3	TIFFReadDirEntryCheckRangeSbyteByte
PARAMETER_LIST	3125:67	3125:79	2	( uint8 value )
LEAF_NODE	3125:67	3125:67	3	(
PARAMETER_DECL	3125:68	3125:74	3	uint8 value
TYPE	3125:68	3125:68	4	uint8
TYPE_NAME	3125:68	3125:68	5	uint8
LEAF_NODE	3125:68	3125:68	6	uint8
NAME	3125:74	3125:74	4	value
LEAF_NODE	3125:74	3125:74	5	value
LEAF_NODE	3125:79	3125:79	3	)
LEAF_NODE	3126:0	3126:0	2	{
STATEMENTS	3127:1	3130:31	2	
SELECTION	3127:1	3128:2	3	
KEYWORD	3127:1	3127:1	4	if
LEAF_NODE	3127:1	3127:1	5	if
LEAF_NODE	3127:4	3127:4	4	(
CONDITION	3127:5	3127:5	4	value > 0x7F
EXPR	3127:5	3127:11	5	value > 0x7F
FIELD	3127:5	3127:5	6	value
LEAF_NODE	3127:5	3127:5	7	value
REL_OPERATOR	3127:10	3127:10	6	>
LEAF_NODE	3127:10	3127:10	7	>
FIELD	3127:11	3127:11	6	0x7F
LEAF_NODE	3127:11	3127:11	7	0x7F
LEAF_NODE	3127:15	3127:15	4	)
STATEMENTS	3128:2	3128:2	4	
LEAF_NODE	3128:2	3128:2	5	return
LEAF_NODE	3128:8	3128:8	3	(
LEAF_NODE	3128:9	3128:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3128:33	3128:33	3	)
LEAF_NODE	3128:34	3128:34	3	;
SELECTION	3129:1	3130:2	3	
KEYWORD	3129:1	3129:1	4	else
LEAF_NODE	3129:1	3129:1	5	else
STATEMENTS	3130:2	3130:2	4	
LEAF_NODE	3130:2	3130:2	5	return
LEAF_NODE	3130:8	3130:8	3	(
LEAF_NODE	3130:9	3130:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3130:30	3130:30	3	)
LEAF_NODE	3130:31	3130:31	3	;
LEAF_NODE	3131:0	3131:0	2	}
FUNCTION_DEF	3133:0	3139:0	1	
RETURN_TYPE	3133:0	3133:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3133:0	3133:0	3	static
TYPE_NAME	3133:7	3133:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3133:7	3133:7	4	enum
LEAF_NODE	3133:12	3133:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3133:32	3133:32	2	TIFFReadDirEntryCheckRangeSbyteShort
LEAF_NODE	3133:32	3133:32	3	TIFFReadDirEntryCheckRangeSbyteShort
PARAMETER_LIST	3133:68	3133:81	2	( uint16 value )
LEAF_NODE	3133:68	3133:68	3	(
PARAMETER_DECL	3133:69	3133:76	3	uint16 value
TYPE	3133:69	3133:69	4	uint16
TYPE_NAME	3133:69	3133:69	5	uint16
LEAF_NODE	3133:69	3133:69	6	uint16
NAME	3133:76	3133:76	4	value
LEAF_NODE	3133:76	3133:76	5	value
LEAF_NODE	3133:81	3133:81	3	)
LEAF_NODE	3134:0	3134:0	2	{
STATEMENTS	3135:1	3138:31	2	
SELECTION	3135:1	3136:2	3	
KEYWORD	3135:1	3135:1	4	if
LEAF_NODE	3135:1	3135:1	5	if
LEAF_NODE	3135:4	3135:4	4	(
CONDITION	3135:5	3135:5	4	value > 0x7F
EXPR	3135:5	3135:11	5	value > 0x7F
FIELD	3135:5	3135:5	6	value
LEAF_NODE	3135:5	3135:5	7	value
REL_OPERATOR	3135:10	3135:10	6	>
LEAF_NODE	3135:10	3135:10	7	>
FIELD	3135:11	3135:11	6	0x7F
LEAF_NODE	3135:11	3135:11	7	0x7F
LEAF_NODE	3135:15	3135:15	4	)
STATEMENTS	3136:2	3136:2	4	
LEAF_NODE	3136:2	3136:2	5	return
LEAF_NODE	3136:8	3136:8	3	(
LEAF_NODE	3136:9	3136:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3136:33	3136:33	3	)
LEAF_NODE	3136:34	3136:34	3	;
SELECTION	3137:1	3138:2	3	
KEYWORD	3137:1	3137:1	4	else
LEAF_NODE	3137:1	3137:1	5	else
STATEMENTS	3138:2	3138:2	4	
LEAF_NODE	3138:2	3138:2	5	return
LEAF_NODE	3138:8	3138:8	3	(
LEAF_NODE	3138:9	3138:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3138:30	3138:30	3	)
LEAF_NODE	3138:31	3138:31	3	;
LEAF_NODE	3139:0	3139:0	2	}
FUNCTION_DEF	3141:0	3147:0	1	
RETURN_TYPE	3141:0	3141:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3141:0	3141:0	3	static
TYPE_NAME	3141:7	3141:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3141:7	3141:7	4	enum
LEAF_NODE	3141:12	3141:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3141:32	3141:32	2	TIFFReadDirEntryCheckRangeSbyteSshort
LEAF_NODE	3141:32	3141:32	3	TIFFReadDirEntryCheckRangeSbyteSshort
PARAMETER_LIST	3141:69	3141:81	2	( int16 value )
LEAF_NODE	3141:69	3141:69	3	(
PARAMETER_DECL	3141:70	3141:76	3	int16 value
TYPE	3141:70	3141:70	4	int16
TYPE_NAME	3141:70	3141:70	5	int16
LEAF_NODE	3141:70	3141:70	6	int16
NAME	3141:76	3141:76	4	value
LEAF_NODE	3141:76	3141:76	5	value
LEAF_NODE	3141:81	3141:81	3	)
LEAF_NODE	3142:0	3142:0	2	{
STATEMENTS	3143:1	3146:31	2	
SELECTION	3143:1	3144:2	3	
KEYWORD	3143:1	3143:1	4	if
LEAF_NODE	3143:1	3143:1	5	if
LEAF_NODE	3143:4	3143:4	4	(
CONDITION	3143:5	3143:5	4	( value < - 0x80 ) || ( value > 0x7F )
EXPR	3143:5	3143:5	5	( value < - 0x80 ) || ( value > 0x7F )
OR	3143:5	3143:20	6	( value < - 0x80 ) || ( value > 0x7F )
EXPR	3143:5	3143:17	7	( value < - 0x80 )
LEAF_NODE	3143:5	3143:5	8	(
FIELD	3143:6	3143:6	8	value
LEAF_NODE	3143:6	3143:6	9	value
REL_OPERATOR	3143:11	3143:11	8	<
LEAF_NODE	3143:11	3143:11	9	<
UNARY_EXPR	3143:12	3143:13	8	- 0x80
UNARY_OPERATOR	3143:12	3143:12	9	-
LEAF_NODE	3143:12	3143:12	10	-
FIELD	3143:13	3143:13	9	0x80
LEAF_NODE	3143:13	3143:13	10	0x80
LEAF_NODE	3143:17	3143:17	8	)
LEAF_NODE	3143:18	3143:18	7	||
EXPR	3143:20	3143:31	7	( value > 0x7F )
LEAF_NODE	3143:20	3143:20	8	(
FIELD	3143:21	3143:21	8	value
LEAF_NODE	3143:21	3143:21	9	value
REL_OPERATOR	3143:26	3143:26	8	>
LEAF_NODE	3143:26	3143:26	9	>
FIELD	3143:27	3143:27	8	0x7F
LEAF_NODE	3143:27	3143:27	9	0x7F
LEAF_NODE	3143:31	3143:31	8	)
LEAF_NODE	3143:32	3143:32	4	)
STATEMENTS	3144:2	3144:2	4	
LEAF_NODE	3144:2	3144:2	5	return
LEAF_NODE	3144:8	3144:8	3	(
LEAF_NODE	3144:9	3144:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3144:33	3144:33	3	)
LEAF_NODE	3144:34	3144:34	3	;
SELECTION	3145:1	3146:2	3	
KEYWORD	3145:1	3145:1	4	else
LEAF_NODE	3145:1	3145:1	5	else
STATEMENTS	3146:2	3146:2	4	
LEAF_NODE	3146:2	3146:2	5	return
LEAF_NODE	3146:8	3146:8	3	(
LEAF_NODE	3146:9	3146:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3146:30	3146:30	3	)
LEAF_NODE	3146:31	3146:31	3	;
LEAF_NODE	3147:0	3147:0	2	}
FUNCTION_DEF	3149:0	3155:0	1	
RETURN_TYPE	3149:0	3149:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3149:0	3149:0	3	static
TYPE_NAME	3149:7	3149:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3149:7	3149:7	4	enum
LEAF_NODE	3149:12	3149:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3149:32	3149:32	2	TIFFReadDirEntryCheckRangeSbyteLong
LEAF_NODE	3149:32	3149:32	3	TIFFReadDirEntryCheckRangeSbyteLong
PARAMETER_LIST	3149:67	3149:80	2	( uint32 value )
LEAF_NODE	3149:67	3149:67	3	(
PARAMETER_DECL	3149:68	3149:75	3	uint32 value
TYPE	3149:68	3149:68	4	uint32
TYPE_NAME	3149:68	3149:68	5	uint32
LEAF_NODE	3149:68	3149:68	6	uint32
NAME	3149:75	3149:75	4	value
LEAF_NODE	3149:75	3149:75	5	value
LEAF_NODE	3149:80	3149:80	3	)
LEAF_NODE	3150:0	3150:0	2	{
STATEMENTS	3151:1	3154:31	2	
SELECTION	3151:1	3152:2	3	
KEYWORD	3151:1	3151:1	4	if
LEAF_NODE	3151:1	3151:1	5	if
LEAF_NODE	3151:4	3151:4	4	(
CONDITION	3151:5	3151:5	4	value > 0x7F
EXPR	3151:5	3151:11	5	value > 0x7F
FIELD	3151:5	3151:5	6	value
LEAF_NODE	3151:5	3151:5	7	value
REL_OPERATOR	3151:10	3151:10	6	>
LEAF_NODE	3151:10	3151:10	7	>
FIELD	3151:11	3151:11	6	0x7F
LEAF_NODE	3151:11	3151:11	7	0x7F
LEAF_NODE	3151:15	3151:15	4	)
STATEMENTS	3152:2	3152:2	4	
LEAF_NODE	3152:2	3152:2	5	return
LEAF_NODE	3152:8	3152:8	3	(
LEAF_NODE	3152:9	3152:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3152:33	3152:33	3	)
LEAF_NODE	3152:34	3152:34	3	;
SELECTION	3153:1	3154:2	3	
KEYWORD	3153:1	3153:1	4	else
LEAF_NODE	3153:1	3153:1	5	else
STATEMENTS	3154:2	3154:2	4	
LEAF_NODE	3154:2	3154:2	5	return
LEAF_NODE	3154:8	3154:8	3	(
LEAF_NODE	3154:9	3154:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3154:30	3154:30	3	)
LEAF_NODE	3154:31	3154:31	3	;
LEAF_NODE	3155:0	3155:0	2	}
FUNCTION_DEF	3157:0	3163:0	1	
RETURN_TYPE	3157:0	3157:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3157:0	3157:0	3	static
TYPE_NAME	3157:7	3157:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3157:7	3157:7	4	enum
LEAF_NODE	3157:12	3157:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3157:32	3157:32	2	TIFFReadDirEntryCheckRangeSbyteSlong
LEAF_NODE	3157:32	3157:32	3	TIFFReadDirEntryCheckRangeSbyteSlong
PARAMETER_LIST	3157:68	3157:80	2	( int32 value )
LEAF_NODE	3157:68	3157:68	3	(
PARAMETER_DECL	3157:69	3157:75	3	int32 value
TYPE	3157:69	3157:69	4	int32
TYPE_NAME	3157:69	3157:69	5	int32
LEAF_NODE	3157:69	3157:69	6	int32
NAME	3157:75	3157:75	4	value
LEAF_NODE	3157:75	3157:75	5	value
LEAF_NODE	3157:80	3157:80	3	)
LEAF_NODE	3158:0	3158:0	2	{
STATEMENTS	3159:1	3162:31	2	
SELECTION	3159:1	3160:2	3	
KEYWORD	3159:1	3159:1	4	if
LEAF_NODE	3159:1	3159:1	5	if
LEAF_NODE	3159:4	3159:4	4	(
CONDITION	3159:5	3159:5	4	( value < - 0x80 ) || ( value > 0x7F )
EXPR	3159:5	3159:5	5	( value < - 0x80 ) || ( value > 0x7F )
OR	3159:5	3159:20	6	( value < - 0x80 ) || ( value > 0x7F )
EXPR	3159:5	3159:17	7	( value < - 0x80 )
LEAF_NODE	3159:5	3159:5	8	(
FIELD	3159:6	3159:6	8	value
LEAF_NODE	3159:6	3159:6	9	value
REL_OPERATOR	3159:11	3159:11	8	<
LEAF_NODE	3159:11	3159:11	9	<
UNARY_EXPR	3159:12	3159:13	8	- 0x80
UNARY_OPERATOR	3159:12	3159:12	9	-
LEAF_NODE	3159:12	3159:12	10	-
FIELD	3159:13	3159:13	9	0x80
LEAF_NODE	3159:13	3159:13	10	0x80
LEAF_NODE	3159:17	3159:17	8	)
LEAF_NODE	3159:18	3159:18	7	||
EXPR	3159:20	3159:31	7	( value > 0x7F )
LEAF_NODE	3159:20	3159:20	8	(
FIELD	3159:21	3159:21	8	value
LEAF_NODE	3159:21	3159:21	9	value
REL_OPERATOR	3159:26	3159:26	8	>
LEAF_NODE	3159:26	3159:26	9	>
FIELD	3159:27	3159:27	8	0x7F
LEAF_NODE	3159:27	3159:27	9	0x7F
LEAF_NODE	3159:31	3159:31	8	)
LEAF_NODE	3159:32	3159:32	4	)
STATEMENTS	3160:2	3160:2	4	
LEAF_NODE	3160:2	3160:2	5	return
LEAF_NODE	3160:8	3160:8	3	(
LEAF_NODE	3160:9	3160:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3160:33	3160:33	3	)
LEAF_NODE	3160:34	3160:34	3	;
SELECTION	3161:1	3162:2	3	
KEYWORD	3161:1	3161:1	4	else
LEAF_NODE	3161:1	3161:1	5	else
STATEMENTS	3162:2	3162:2	4	
LEAF_NODE	3162:2	3162:2	5	return
LEAF_NODE	3162:8	3162:8	3	(
LEAF_NODE	3162:9	3162:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3162:30	3162:30	3	)
LEAF_NODE	3162:31	3162:31	3	;
LEAF_NODE	3163:0	3163:0	2	}
FUNCTION_DEF	3165:0	3171:0	1	
RETURN_TYPE	3165:0	3165:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3165:0	3165:0	3	static
TYPE_NAME	3165:7	3165:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3165:7	3165:7	4	enum
LEAF_NODE	3165:12	3165:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3165:32	3165:32	2	TIFFReadDirEntryCheckRangeSbyteLong8
LEAF_NODE	3165:32	3165:32	3	TIFFReadDirEntryCheckRangeSbyteLong8
PARAMETER_LIST	3165:68	3165:81	2	( uint64 value )
LEAF_NODE	3165:68	3165:68	3	(
PARAMETER_DECL	3165:69	3165:76	3	uint64 value
TYPE	3165:69	3165:69	4	uint64
TYPE_NAME	3165:69	3165:69	5	uint64
LEAF_NODE	3165:69	3165:69	6	uint64
NAME	3165:76	3165:76	4	value
LEAF_NODE	3165:76	3165:76	5	value
LEAF_NODE	3165:81	3165:81	3	)
LEAF_NODE	3166:0	3166:0	2	{
STATEMENTS	3167:1	3170:31	2	
SELECTION	3167:1	3168:2	3	
KEYWORD	3167:1	3167:1	4	if
LEAF_NODE	3167:1	3167:1	5	if
LEAF_NODE	3167:4	3167:4	4	(
CONDITION	3167:5	3167:5	4	value > 0x7F
EXPR	3167:5	3167:11	5	value > 0x7F
FIELD	3167:5	3167:5	6	value
LEAF_NODE	3167:5	3167:5	7	value
REL_OPERATOR	3167:10	3167:10	6	>
LEAF_NODE	3167:10	3167:10	7	>
FIELD	3167:11	3167:11	6	0x7F
LEAF_NODE	3167:11	3167:11	7	0x7F
LEAF_NODE	3167:15	3167:15	4	)
STATEMENTS	3168:2	3168:2	4	
LEAF_NODE	3168:2	3168:2	5	return
LEAF_NODE	3168:8	3168:8	3	(
LEAF_NODE	3168:9	3168:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3168:33	3168:33	3	)
LEAF_NODE	3168:34	3168:34	3	;
SELECTION	3169:1	3170:2	3	
KEYWORD	3169:1	3169:1	4	else
LEAF_NODE	3169:1	3169:1	5	else
STATEMENTS	3170:2	3170:2	4	
LEAF_NODE	3170:2	3170:2	5	return
LEAF_NODE	3170:8	3170:8	3	(
LEAF_NODE	3170:9	3170:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3170:30	3170:30	3	)
LEAF_NODE	3170:31	3170:31	3	;
LEAF_NODE	3171:0	3171:0	2	}
FUNCTION_DEF	3173:0	3179:0	1	
RETURN_TYPE	3173:0	3173:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3173:0	3173:0	3	static
TYPE_NAME	3173:7	3173:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3173:7	3173:7	4	enum
LEAF_NODE	3173:12	3173:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3173:32	3173:32	2	TIFFReadDirEntryCheckRangeSbyteSlong8
LEAF_NODE	3173:32	3173:32	3	TIFFReadDirEntryCheckRangeSbyteSlong8
PARAMETER_LIST	3173:69	3173:81	2	( int64 value )
LEAF_NODE	3173:69	3173:69	3	(
PARAMETER_DECL	3173:70	3173:76	3	int64 value
TYPE	3173:70	3173:70	4	int64
TYPE_NAME	3173:70	3173:70	5	int64
LEAF_NODE	3173:70	3173:70	6	int64
NAME	3173:76	3173:76	4	value
LEAF_NODE	3173:76	3173:76	5	value
LEAF_NODE	3173:81	3173:81	3	)
LEAF_NODE	3174:0	3174:0	2	{
STATEMENTS	3175:1	3178:31	2	
SELECTION	3175:1	3176:2	3	
KEYWORD	3175:1	3175:1	4	if
LEAF_NODE	3175:1	3175:1	5	if
LEAF_NODE	3175:4	3175:4	4	(
CONDITION	3175:5	3175:5	4	( value < - 0x80 ) || ( value > 0x7F )
EXPR	3175:5	3175:5	5	( value < - 0x80 ) || ( value > 0x7F )
OR	3175:5	3175:20	6	( value < - 0x80 ) || ( value > 0x7F )
EXPR	3175:5	3175:17	7	( value < - 0x80 )
LEAF_NODE	3175:5	3175:5	8	(
FIELD	3175:6	3175:6	8	value
LEAF_NODE	3175:6	3175:6	9	value
REL_OPERATOR	3175:11	3175:11	8	<
LEAF_NODE	3175:11	3175:11	9	<
UNARY_EXPR	3175:12	3175:13	8	- 0x80
UNARY_OPERATOR	3175:12	3175:12	9	-
LEAF_NODE	3175:12	3175:12	10	-
FIELD	3175:13	3175:13	9	0x80
LEAF_NODE	3175:13	3175:13	10	0x80
LEAF_NODE	3175:17	3175:17	8	)
LEAF_NODE	3175:18	3175:18	7	||
EXPR	3175:20	3175:31	7	( value > 0x7F )
LEAF_NODE	3175:20	3175:20	8	(
FIELD	3175:21	3175:21	8	value
LEAF_NODE	3175:21	3175:21	9	value
REL_OPERATOR	3175:26	3175:26	8	>
LEAF_NODE	3175:26	3175:26	9	>
FIELD	3175:27	3175:27	8	0x7F
LEAF_NODE	3175:27	3175:27	9	0x7F
LEAF_NODE	3175:31	3175:31	8	)
LEAF_NODE	3175:32	3175:32	4	)
STATEMENTS	3176:2	3176:2	4	
LEAF_NODE	3176:2	3176:2	5	return
LEAF_NODE	3176:8	3176:8	3	(
LEAF_NODE	3176:9	3176:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3176:33	3176:33	3	)
LEAF_NODE	3176:34	3176:34	3	;
SELECTION	3177:1	3178:2	3	
KEYWORD	3177:1	3177:1	4	else
LEAF_NODE	3177:1	3177:1	5	else
STATEMENTS	3178:2	3178:2	4	
LEAF_NODE	3178:2	3178:2	5	return
LEAF_NODE	3178:8	3178:8	3	(
LEAF_NODE	3178:9	3178:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3178:30	3178:30	3	)
LEAF_NODE	3178:31	3178:31	3	;
LEAF_NODE	3179:0	3179:0	2	}
FUNCTION_DEF	3181:0	3187:0	1	
RETURN_TYPE	3181:0	3181:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3181:0	3181:0	3	static
TYPE_NAME	3181:7	3181:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3181:7	3181:7	4	enum
LEAF_NODE	3181:12	3181:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3181:32	3181:32	2	TIFFReadDirEntryCheckRangeShortSbyte
LEAF_NODE	3181:32	3181:32	3	TIFFReadDirEntryCheckRangeShortSbyte
PARAMETER_LIST	3181:68	3181:79	2	( int8 value )
LEAF_NODE	3181:68	3181:68	3	(
PARAMETER_DECL	3181:69	3181:74	3	int8 value
TYPE	3181:69	3181:69	4	int8
TYPE_NAME	3181:69	3181:69	5	int8
LEAF_NODE	3181:69	3181:69	6	int8
NAME	3181:74	3181:74	4	value
LEAF_NODE	3181:74	3181:74	5	value
LEAF_NODE	3181:79	3181:79	3	)
LEAF_NODE	3182:0	3182:0	2	{
STATEMENTS	3183:1	3186:31	2	
SELECTION	3183:1	3184:2	3	
KEYWORD	3183:1	3183:1	4	if
LEAF_NODE	3183:1	3183:1	5	if
LEAF_NODE	3183:4	3183:4	4	(
CONDITION	3183:5	3183:5	4	value < 0
EXPR	3183:5	3183:11	5	value < 0
FIELD	3183:5	3183:5	6	value
LEAF_NODE	3183:5	3183:5	7	value
REL_OPERATOR	3183:10	3183:10	6	<
LEAF_NODE	3183:10	3183:10	7	<
FIELD	3183:11	3183:11	6	0
LEAF_NODE	3183:11	3183:11	7	0
LEAF_NODE	3183:12	3183:12	4	)
STATEMENTS	3184:2	3184:2	4	
LEAF_NODE	3184:2	3184:2	5	return
LEAF_NODE	3184:8	3184:8	3	(
LEAF_NODE	3184:9	3184:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3184:33	3184:33	3	)
LEAF_NODE	3184:34	3184:34	3	;
SELECTION	3185:1	3186:2	3	
KEYWORD	3185:1	3185:1	4	else
LEAF_NODE	3185:1	3185:1	5	else
STATEMENTS	3186:2	3186:2	4	
LEAF_NODE	3186:2	3186:2	5	return
LEAF_NODE	3186:8	3186:8	3	(
LEAF_NODE	3186:9	3186:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3186:30	3186:30	3	)
LEAF_NODE	3186:31	3186:31	3	;
LEAF_NODE	3187:0	3187:0	2	}
FUNCTION_DEF	3189:0	3195:0	1	
RETURN_TYPE	3189:0	3189:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3189:0	3189:0	3	static
TYPE_NAME	3189:7	3189:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3189:7	3189:7	4	enum
LEAF_NODE	3189:12	3189:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3189:32	3189:32	2	TIFFReadDirEntryCheckRangeShortSshort
LEAF_NODE	3189:32	3189:32	3	TIFFReadDirEntryCheckRangeShortSshort
PARAMETER_LIST	3189:69	3189:81	2	( int16 value )
LEAF_NODE	3189:69	3189:69	3	(
PARAMETER_DECL	3189:70	3189:76	3	int16 value
TYPE	3189:70	3189:70	4	int16
TYPE_NAME	3189:70	3189:70	5	int16
LEAF_NODE	3189:70	3189:70	6	int16
NAME	3189:76	3189:76	4	value
LEAF_NODE	3189:76	3189:76	5	value
LEAF_NODE	3189:81	3189:81	3	)
LEAF_NODE	3190:0	3190:0	2	{
STATEMENTS	3191:1	3194:31	2	
SELECTION	3191:1	3192:2	3	
KEYWORD	3191:1	3191:1	4	if
LEAF_NODE	3191:1	3191:1	5	if
LEAF_NODE	3191:4	3191:4	4	(
CONDITION	3191:5	3191:5	4	value < 0
EXPR	3191:5	3191:11	5	value < 0
FIELD	3191:5	3191:5	6	value
LEAF_NODE	3191:5	3191:5	7	value
REL_OPERATOR	3191:10	3191:10	6	<
LEAF_NODE	3191:10	3191:10	7	<
FIELD	3191:11	3191:11	6	0
LEAF_NODE	3191:11	3191:11	7	0
LEAF_NODE	3191:12	3191:12	4	)
STATEMENTS	3192:2	3192:2	4	
LEAF_NODE	3192:2	3192:2	5	return
LEAF_NODE	3192:8	3192:8	3	(
LEAF_NODE	3192:9	3192:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3192:33	3192:33	3	)
LEAF_NODE	3192:34	3192:34	3	;
SELECTION	3193:1	3194:2	3	
KEYWORD	3193:1	3193:1	4	else
LEAF_NODE	3193:1	3193:1	5	else
STATEMENTS	3194:2	3194:2	4	
LEAF_NODE	3194:2	3194:2	5	return
LEAF_NODE	3194:8	3194:8	3	(
LEAF_NODE	3194:9	3194:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3194:30	3194:30	3	)
LEAF_NODE	3194:31	3194:31	3	;
LEAF_NODE	3195:0	3195:0	2	}
FUNCTION_DEF	3197:0	3203:0	1	
RETURN_TYPE	3197:0	3197:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3197:0	3197:0	3	static
TYPE_NAME	3197:7	3197:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3197:7	3197:7	4	enum
LEAF_NODE	3197:12	3197:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3197:32	3197:32	2	TIFFReadDirEntryCheckRangeShortLong
LEAF_NODE	3197:32	3197:32	3	TIFFReadDirEntryCheckRangeShortLong
PARAMETER_LIST	3197:67	3197:80	2	( uint32 value )
LEAF_NODE	3197:67	3197:67	3	(
PARAMETER_DECL	3197:68	3197:75	3	uint32 value
TYPE	3197:68	3197:68	4	uint32
TYPE_NAME	3197:68	3197:68	5	uint32
LEAF_NODE	3197:68	3197:68	6	uint32
NAME	3197:75	3197:75	4	value
LEAF_NODE	3197:75	3197:75	5	value
LEAF_NODE	3197:80	3197:80	3	)
LEAF_NODE	3198:0	3198:0	2	{
STATEMENTS	3199:1	3202:31	2	
SELECTION	3199:1	3200:2	3	
KEYWORD	3199:1	3199:1	4	if
LEAF_NODE	3199:1	3199:1	5	if
LEAF_NODE	3199:4	3199:4	4	(
CONDITION	3199:5	3199:5	4	value > 0xFFFF
EXPR	3199:5	3199:11	5	value > 0xFFFF
FIELD	3199:5	3199:5	6	value
LEAF_NODE	3199:5	3199:5	7	value
REL_OPERATOR	3199:10	3199:10	6	>
LEAF_NODE	3199:10	3199:10	7	>
FIELD	3199:11	3199:11	6	0xFFFF
LEAF_NODE	3199:11	3199:11	7	0xFFFF
LEAF_NODE	3199:17	3199:17	4	)
STATEMENTS	3200:2	3200:2	4	
LEAF_NODE	3200:2	3200:2	5	return
LEAF_NODE	3200:8	3200:8	3	(
LEAF_NODE	3200:9	3200:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3200:33	3200:33	3	)
LEAF_NODE	3200:34	3200:34	3	;
SELECTION	3201:1	3202:2	3	
KEYWORD	3201:1	3201:1	4	else
LEAF_NODE	3201:1	3201:1	5	else
STATEMENTS	3202:2	3202:2	4	
LEAF_NODE	3202:2	3202:2	5	return
LEAF_NODE	3202:8	3202:8	3	(
LEAF_NODE	3202:9	3202:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3202:30	3202:30	3	)
LEAF_NODE	3202:31	3202:31	3	;
LEAF_NODE	3203:0	3203:0	2	}
FUNCTION_DEF	3205:0	3211:0	1	
RETURN_TYPE	3205:0	3205:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3205:0	3205:0	3	static
TYPE_NAME	3205:7	3205:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3205:7	3205:7	4	enum
LEAF_NODE	3205:12	3205:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3205:32	3205:32	2	TIFFReadDirEntryCheckRangeShortSlong
LEAF_NODE	3205:32	3205:32	3	TIFFReadDirEntryCheckRangeShortSlong
PARAMETER_LIST	3205:68	3205:80	2	( int32 value )
LEAF_NODE	3205:68	3205:68	3	(
PARAMETER_DECL	3205:69	3205:75	3	int32 value
TYPE	3205:69	3205:69	4	int32
TYPE_NAME	3205:69	3205:69	5	int32
LEAF_NODE	3205:69	3205:69	6	int32
NAME	3205:75	3205:75	4	value
LEAF_NODE	3205:75	3205:75	5	value
LEAF_NODE	3205:80	3205:80	3	)
LEAF_NODE	3206:0	3206:0	2	{
STATEMENTS	3207:1	3210:31	2	
SELECTION	3207:1	3208:2	3	
KEYWORD	3207:1	3207:1	4	if
LEAF_NODE	3207:1	3207:1	5	if
LEAF_NODE	3207:4	3207:4	4	(
CONDITION	3207:5	3207:5	4	( value < 0 ) || ( value > 0xFFFF )
EXPR	3207:5	3207:5	5	( value < 0 ) || ( value > 0xFFFF )
OR	3207:5	3207:16	6	( value < 0 ) || ( value > 0xFFFF )
EXPR	3207:5	3207:13	7	( value < 0 )
LEAF_NODE	3207:5	3207:5	8	(
FIELD	3207:6	3207:6	8	value
LEAF_NODE	3207:6	3207:6	9	value
REL_OPERATOR	3207:11	3207:11	8	<
LEAF_NODE	3207:11	3207:11	9	<
FIELD	3207:12	3207:12	8	0
LEAF_NODE	3207:12	3207:12	9	0
LEAF_NODE	3207:13	3207:13	8	)
LEAF_NODE	3207:14	3207:14	7	||
EXPR	3207:16	3207:29	7	( value > 0xFFFF )
LEAF_NODE	3207:16	3207:16	8	(
FIELD	3207:17	3207:17	8	value
LEAF_NODE	3207:17	3207:17	9	value
REL_OPERATOR	3207:22	3207:22	8	>
LEAF_NODE	3207:22	3207:22	9	>
FIELD	3207:23	3207:23	8	0xFFFF
LEAF_NODE	3207:23	3207:23	9	0xFFFF
LEAF_NODE	3207:29	3207:29	8	)
LEAF_NODE	3207:30	3207:30	4	)
STATEMENTS	3208:2	3208:2	4	
LEAF_NODE	3208:2	3208:2	5	return
LEAF_NODE	3208:8	3208:8	3	(
LEAF_NODE	3208:9	3208:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3208:33	3208:33	3	)
LEAF_NODE	3208:34	3208:34	3	;
SELECTION	3209:1	3210:2	3	
KEYWORD	3209:1	3209:1	4	else
LEAF_NODE	3209:1	3209:1	5	else
STATEMENTS	3210:2	3210:2	4	
LEAF_NODE	3210:2	3210:2	5	return
LEAF_NODE	3210:8	3210:8	3	(
LEAF_NODE	3210:9	3210:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3210:30	3210:30	3	)
LEAF_NODE	3210:31	3210:31	3	;
LEAF_NODE	3211:0	3211:0	2	}
FUNCTION_DEF	3213:0	3219:0	1	
RETURN_TYPE	3213:0	3213:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3213:0	3213:0	3	static
TYPE_NAME	3213:7	3213:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3213:7	3213:7	4	enum
LEAF_NODE	3213:12	3213:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3213:32	3213:32	2	TIFFReadDirEntryCheckRangeShortLong8
LEAF_NODE	3213:32	3213:32	3	TIFFReadDirEntryCheckRangeShortLong8
PARAMETER_LIST	3213:68	3213:81	2	( uint64 value )
LEAF_NODE	3213:68	3213:68	3	(
PARAMETER_DECL	3213:69	3213:76	3	uint64 value
TYPE	3213:69	3213:69	4	uint64
TYPE_NAME	3213:69	3213:69	5	uint64
LEAF_NODE	3213:69	3213:69	6	uint64
NAME	3213:76	3213:76	4	value
LEAF_NODE	3213:76	3213:76	5	value
LEAF_NODE	3213:81	3213:81	3	)
LEAF_NODE	3214:0	3214:0	2	{
STATEMENTS	3215:1	3218:31	2	
SELECTION	3215:1	3216:2	3	
KEYWORD	3215:1	3215:1	4	if
LEAF_NODE	3215:1	3215:1	5	if
LEAF_NODE	3215:4	3215:4	4	(
CONDITION	3215:5	3215:5	4	value > 0xFFFF
EXPR	3215:5	3215:11	5	value > 0xFFFF
FIELD	3215:5	3215:5	6	value
LEAF_NODE	3215:5	3215:5	7	value
REL_OPERATOR	3215:10	3215:10	6	>
LEAF_NODE	3215:10	3215:10	7	>
FIELD	3215:11	3215:11	6	0xFFFF
LEAF_NODE	3215:11	3215:11	7	0xFFFF
LEAF_NODE	3215:17	3215:17	4	)
STATEMENTS	3216:2	3216:2	4	
LEAF_NODE	3216:2	3216:2	5	return
LEAF_NODE	3216:8	3216:8	3	(
LEAF_NODE	3216:9	3216:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3216:33	3216:33	3	)
LEAF_NODE	3216:34	3216:34	3	;
SELECTION	3217:1	3218:2	3	
KEYWORD	3217:1	3217:1	4	else
LEAF_NODE	3217:1	3217:1	5	else
STATEMENTS	3218:2	3218:2	4	
LEAF_NODE	3218:2	3218:2	5	return
LEAF_NODE	3218:8	3218:8	3	(
LEAF_NODE	3218:9	3218:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3218:30	3218:30	3	)
LEAF_NODE	3218:31	3218:31	3	;
LEAF_NODE	3219:0	3219:0	2	}
FUNCTION_DEF	3221:0	3227:0	1	
RETURN_TYPE	3221:0	3221:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3221:0	3221:0	3	static
TYPE_NAME	3221:7	3221:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3221:7	3221:7	4	enum
LEAF_NODE	3221:12	3221:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3221:32	3221:32	2	TIFFReadDirEntryCheckRangeShortSlong8
LEAF_NODE	3221:32	3221:32	3	TIFFReadDirEntryCheckRangeShortSlong8
PARAMETER_LIST	3221:69	3221:81	2	( int64 value )
LEAF_NODE	3221:69	3221:69	3	(
PARAMETER_DECL	3221:70	3221:76	3	int64 value
TYPE	3221:70	3221:70	4	int64
TYPE_NAME	3221:70	3221:70	5	int64
LEAF_NODE	3221:70	3221:70	6	int64
NAME	3221:76	3221:76	4	value
LEAF_NODE	3221:76	3221:76	5	value
LEAF_NODE	3221:81	3221:81	3	)
LEAF_NODE	3222:0	3222:0	2	{
STATEMENTS	3223:1	3226:31	2	
SELECTION	3223:1	3224:2	3	
KEYWORD	3223:1	3223:1	4	if
LEAF_NODE	3223:1	3223:1	5	if
LEAF_NODE	3223:4	3223:4	4	(
CONDITION	3223:5	3223:5	4	( value < 0 ) || ( value > 0xFFFF )
EXPR	3223:5	3223:5	5	( value < 0 ) || ( value > 0xFFFF )
OR	3223:5	3223:16	6	( value < 0 ) || ( value > 0xFFFF )
EXPR	3223:5	3223:13	7	( value < 0 )
LEAF_NODE	3223:5	3223:5	8	(
FIELD	3223:6	3223:6	8	value
LEAF_NODE	3223:6	3223:6	9	value
REL_OPERATOR	3223:11	3223:11	8	<
LEAF_NODE	3223:11	3223:11	9	<
FIELD	3223:12	3223:12	8	0
LEAF_NODE	3223:12	3223:12	9	0
LEAF_NODE	3223:13	3223:13	8	)
LEAF_NODE	3223:14	3223:14	7	||
EXPR	3223:16	3223:29	7	( value > 0xFFFF )
LEAF_NODE	3223:16	3223:16	8	(
FIELD	3223:17	3223:17	8	value
LEAF_NODE	3223:17	3223:17	9	value
REL_OPERATOR	3223:22	3223:22	8	>
LEAF_NODE	3223:22	3223:22	9	>
FIELD	3223:23	3223:23	8	0xFFFF
LEAF_NODE	3223:23	3223:23	9	0xFFFF
LEAF_NODE	3223:29	3223:29	8	)
LEAF_NODE	3223:30	3223:30	4	)
STATEMENTS	3224:2	3224:2	4	
LEAF_NODE	3224:2	3224:2	5	return
LEAF_NODE	3224:8	3224:8	3	(
LEAF_NODE	3224:9	3224:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3224:33	3224:33	3	)
LEAF_NODE	3224:34	3224:34	3	;
SELECTION	3225:1	3226:2	3	
KEYWORD	3225:1	3225:1	4	else
LEAF_NODE	3225:1	3225:1	5	else
STATEMENTS	3226:2	3226:2	4	
LEAF_NODE	3226:2	3226:2	5	return
LEAF_NODE	3226:8	3226:8	3	(
LEAF_NODE	3226:9	3226:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3226:30	3226:30	3	)
LEAF_NODE	3226:31	3226:31	3	;
LEAF_NODE	3227:0	3227:0	2	}
FUNCTION_DEF	3229:0	3235:0	1	
RETURN_TYPE	3229:0	3229:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3229:0	3229:0	3	static
TYPE_NAME	3229:7	3229:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3229:7	3229:7	4	enum
LEAF_NODE	3229:12	3229:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3229:32	3229:32	2	TIFFReadDirEntryCheckRangeSshortShort
LEAF_NODE	3229:32	3229:32	3	TIFFReadDirEntryCheckRangeSshortShort
PARAMETER_LIST	3229:69	3229:82	2	( uint16 value )
LEAF_NODE	3229:69	3229:69	3	(
PARAMETER_DECL	3229:70	3229:77	3	uint16 value
TYPE	3229:70	3229:70	4	uint16
TYPE_NAME	3229:70	3229:70	5	uint16
LEAF_NODE	3229:70	3229:70	6	uint16
NAME	3229:77	3229:77	4	value
LEAF_NODE	3229:77	3229:77	5	value
LEAF_NODE	3229:82	3229:82	3	)
LEAF_NODE	3230:0	3230:0	2	{
STATEMENTS	3231:1	3234:31	2	
SELECTION	3231:1	3232:2	3	
KEYWORD	3231:1	3231:1	4	if
LEAF_NODE	3231:1	3231:1	5	if
LEAF_NODE	3231:4	3231:4	4	(
CONDITION	3231:5	3231:5	4	value > 0x7FFF
EXPR	3231:5	3231:11	5	value > 0x7FFF
FIELD	3231:5	3231:5	6	value
LEAF_NODE	3231:5	3231:5	7	value
REL_OPERATOR	3231:10	3231:10	6	>
LEAF_NODE	3231:10	3231:10	7	>
FIELD	3231:11	3231:11	6	0x7FFF
LEAF_NODE	3231:11	3231:11	7	0x7FFF
LEAF_NODE	3231:17	3231:17	4	)
STATEMENTS	3232:2	3232:2	4	
LEAF_NODE	3232:2	3232:2	5	return
LEAF_NODE	3232:8	3232:8	3	(
LEAF_NODE	3232:9	3232:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3232:33	3232:33	3	)
LEAF_NODE	3232:34	3232:34	3	;
SELECTION	3233:1	3234:2	3	
KEYWORD	3233:1	3233:1	4	else
LEAF_NODE	3233:1	3233:1	5	else
STATEMENTS	3234:2	3234:2	4	
LEAF_NODE	3234:2	3234:2	5	return
LEAF_NODE	3234:8	3234:8	3	(
LEAF_NODE	3234:9	3234:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3234:30	3234:30	3	)
LEAF_NODE	3234:31	3234:31	3	;
LEAF_NODE	3235:0	3235:0	2	}
FUNCTION_DEF	3237:0	3243:0	1	
RETURN_TYPE	3237:0	3237:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3237:0	3237:0	3	static
TYPE_NAME	3237:7	3237:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3237:7	3237:7	4	enum
LEAF_NODE	3237:12	3237:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3237:32	3237:32	2	TIFFReadDirEntryCheckRangeSshortLong
LEAF_NODE	3237:32	3237:32	3	TIFFReadDirEntryCheckRangeSshortLong
PARAMETER_LIST	3237:68	3237:81	2	( uint32 value )
LEAF_NODE	3237:68	3237:68	3	(
PARAMETER_DECL	3237:69	3237:76	3	uint32 value
TYPE	3237:69	3237:69	4	uint32
TYPE_NAME	3237:69	3237:69	5	uint32
LEAF_NODE	3237:69	3237:69	6	uint32
NAME	3237:76	3237:76	4	value
LEAF_NODE	3237:76	3237:76	5	value
LEAF_NODE	3237:81	3237:81	3	)
LEAF_NODE	3238:0	3238:0	2	{
STATEMENTS	3239:1	3242:31	2	
SELECTION	3239:1	3240:2	3	
KEYWORD	3239:1	3239:1	4	if
LEAF_NODE	3239:1	3239:1	5	if
LEAF_NODE	3239:4	3239:4	4	(
CONDITION	3239:5	3239:5	4	value > 0x7FFF
EXPR	3239:5	3239:11	5	value > 0x7FFF
FIELD	3239:5	3239:5	6	value
LEAF_NODE	3239:5	3239:5	7	value
REL_OPERATOR	3239:10	3239:10	6	>
LEAF_NODE	3239:10	3239:10	7	>
FIELD	3239:11	3239:11	6	0x7FFF
LEAF_NODE	3239:11	3239:11	7	0x7FFF
LEAF_NODE	3239:17	3239:17	4	)
STATEMENTS	3240:2	3240:2	4	
LEAF_NODE	3240:2	3240:2	5	return
LEAF_NODE	3240:8	3240:8	3	(
LEAF_NODE	3240:9	3240:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3240:33	3240:33	3	)
LEAF_NODE	3240:34	3240:34	3	;
SELECTION	3241:1	3242:2	3	
KEYWORD	3241:1	3241:1	4	else
LEAF_NODE	3241:1	3241:1	5	else
STATEMENTS	3242:2	3242:2	4	
LEAF_NODE	3242:2	3242:2	5	return
LEAF_NODE	3242:8	3242:8	3	(
LEAF_NODE	3242:9	3242:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3242:30	3242:30	3	)
LEAF_NODE	3242:31	3242:31	3	;
LEAF_NODE	3243:0	3243:0	2	}
FUNCTION_DEF	3245:0	3251:0	1	
RETURN_TYPE	3245:0	3245:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3245:0	3245:0	3	static
TYPE_NAME	3245:7	3245:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3245:7	3245:7	4	enum
LEAF_NODE	3245:12	3245:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3245:32	3245:32	2	TIFFReadDirEntryCheckRangeSshortSlong
LEAF_NODE	3245:32	3245:32	3	TIFFReadDirEntryCheckRangeSshortSlong
PARAMETER_LIST	3245:69	3245:81	2	( int32 value )
LEAF_NODE	3245:69	3245:69	3	(
PARAMETER_DECL	3245:70	3245:76	3	int32 value
TYPE	3245:70	3245:70	4	int32
TYPE_NAME	3245:70	3245:70	5	int32
LEAF_NODE	3245:70	3245:70	6	int32
NAME	3245:76	3245:76	4	value
LEAF_NODE	3245:76	3245:76	5	value
LEAF_NODE	3245:81	3245:81	3	)
LEAF_NODE	3246:0	3246:0	2	{
STATEMENTS	3247:1	3250:31	2	
SELECTION	3247:1	3248:2	3	
KEYWORD	3247:1	3247:1	4	if
LEAF_NODE	3247:1	3247:1	5	if
LEAF_NODE	3247:4	3247:4	4	(
CONDITION	3247:5	3247:5	4	( value < - 0x8000 ) || ( value > 0x7FFF )
EXPR	3247:5	3247:5	5	( value < - 0x8000 ) || ( value > 0x7FFF )
OR	3247:5	3247:22	6	( value < - 0x8000 ) || ( value > 0x7FFF )
EXPR	3247:5	3247:19	7	( value < - 0x8000 )
LEAF_NODE	3247:5	3247:5	8	(
FIELD	3247:6	3247:6	8	value
LEAF_NODE	3247:6	3247:6	9	value
REL_OPERATOR	3247:11	3247:11	8	<
LEAF_NODE	3247:11	3247:11	9	<
UNARY_EXPR	3247:12	3247:13	8	- 0x8000
UNARY_OPERATOR	3247:12	3247:12	9	-
LEAF_NODE	3247:12	3247:12	10	-
FIELD	3247:13	3247:13	9	0x8000
LEAF_NODE	3247:13	3247:13	10	0x8000
LEAF_NODE	3247:19	3247:19	8	)
LEAF_NODE	3247:20	3247:20	7	||
EXPR	3247:22	3247:35	7	( value > 0x7FFF )
LEAF_NODE	3247:22	3247:22	8	(
FIELD	3247:23	3247:23	8	value
LEAF_NODE	3247:23	3247:23	9	value
REL_OPERATOR	3247:28	3247:28	8	>
LEAF_NODE	3247:28	3247:28	9	>
FIELD	3247:29	3247:29	8	0x7FFF
LEAF_NODE	3247:29	3247:29	9	0x7FFF
LEAF_NODE	3247:35	3247:35	8	)
LEAF_NODE	3247:36	3247:36	4	)
STATEMENTS	3248:2	3248:2	4	
LEAF_NODE	3248:2	3248:2	5	return
LEAF_NODE	3248:8	3248:8	3	(
LEAF_NODE	3248:9	3248:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3248:33	3248:33	3	)
LEAF_NODE	3248:34	3248:34	3	;
SELECTION	3249:1	3250:2	3	
KEYWORD	3249:1	3249:1	4	else
LEAF_NODE	3249:1	3249:1	5	else
STATEMENTS	3250:2	3250:2	4	
LEAF_NODE	3250:2	3250:2	5	return
LEAF_NODE	3250:8	3250:8	3	(
LEAF_NODE	3250:9	3250:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3250:30	3250:30	3	)
LEAF_NODE	3250:31	3250:31	3	;
LEAF_NODE	3251:0	3251:0	2	}
FUNCTION_DEF	3253:0	3259:0	1	
RETURN_TYPE	3253:0	3253:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3253:0	3253:0	3	static
TYPE_NAME	3253:7	3253:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3253:7	3253:7	4	enum
LEAF_NODE	3253:12	3253:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3253:32	3253:32	2	TIFFReadDirEntryCheckRangeSshortLong8
LEAF_NODE	3253:32	3253:32	3	TIFFReadDirEntryCheckRangeSshortLong8
PARAMETER_LIST	3253:69	3253:82	2	( uint64 value )
LEAF_NODE	3253:69	3253:69	3	(
PARAMETER_DECL	3253:70	3253:77	3	uint64 value
TYPE	3253:70	3253:70	4	uint64
TYPE_NAME	3253:70	3253:70	5	uint64
LEAF_NODE	3253:70	3253:70	6	uint64
NAME	3253:77	3253:77	4	value
LEAF_NODE	3253:77	3253:77	5	value
LEAF_NODE	3253:82	3253:82	3	)
LEAF_NODE	3254:0	3254:0	2	{
STATEMENTS	3255:1	3258:31	2	
SELECTION	3255:1	3256:2	3	
KEYWORD	3255:1	3255:1	4	if
LEAF_NODE	3255:1	3255:1	5	if
LEAF_NODE	3255:4	3255:4	4	(
CONDITION	3255:5	3255:5	4	value > 0x7FFF
EXPR	3255:5	3255:11	5	value > 0x7FFF
FIELD	3255:5	3255:5	6	value
LEAF_NODE	3255:5	3255:5	7	value
REL_OPERATOR	3255:10	3255:10	6	>
LEAF_NODE	3255:10	3255:10	7	>
FIELD	3255:11	3255:11	6	0x7FFF
LEAF_NODE	3255:11	3255:11	7	0x7FFF
LEAF_NODE	3255:17	3255:17	4	)
STATEMENTS	3256:2	3256:2	4	
LEAF_NODE	3256:2	3256:2	5	return
LEAF_NODE	3256:8	3256:8	3	(
LEAF_NODE	3256:9	3256:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3256:33	3256:33	3	)
LEAF_NODE	3256:34	3256:34	3	;
SELECTION	3257:1	3258:2	3	
KEYWORD	3257:1	3257:1	4	else
LEAF_NODE	3257:1	3257:1	5	else
STATEMENTS	3258:2	3258:2	4	
LEAF_NODE	3258:2	3258:2	5	return
LEAF_NODE	3258:8	3258:8	3	(
LEAF_NODE	3258:9	3258:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3258:30	3258:30	3	)
LEAF_NODE	3258:31	3258:31	3	;
LEAF_NODE	3259:0	3259:0	2	}
FUNCTION_DEF	3261:0	3267:0	1	
RETURN_TYPE	3261:0	3261:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3261:0	3261:0	3	static
TYPE_NAME	3261:7	3261:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3261:7	3261:7	4	enum
LEAF_NODE	3261:12	3261:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3261:32	3261:32	2	TIFFReadDirEntryCheckRangeSshortSlong8
LEAF_NODE	3261:32	3261:32	3	TIFFReadDirEntryCheckRangeSshortSlong8
PARAMETER_LIST	3261:70	3261:82	2	( int64 value )
LEAF_NODE	3261:70	3261:70	3	(
PARAMETER_DECL	3261:71	3261:77	3	int64 value
TYPE	3261:71	3261:71	4	int64
TYPE_NAME	3261:71	3261:71	5	int64
LEAF_NODE	3261:71	3261:71	6	int64
NAME	3261:77	3261:77	4	value
LEAF_NODE	3261:77	3261:77	5	value
LEAF_NODE	3261:82	3261:82	3	)
LEAF_NODE	3262:0	3262:0	2	{
STATEMENTS	3263:1	3266:31	2	
SELECTION	3263:1	3264:2	3	
KEYWORD	3263:1	3263:1	4	if
LEAF_NODE	3263:1	3263:1	5	if
LEAF_NODE	3263:4	3263:4	4	(
CONDITION	3263:5	3263:5	4	( value < - 0x8000 ) || ( value > 0x7FFF )
EXPR	3263:5	3263:5	5	( value < - 0x8000 ) || ( value > 0x7FFF )
OR	3263:5	3263:22	6	( value < - 0x8000 ) || ( value > 0x7FFF )
EXPR	3263:5	3263:19	7	( value < - 0x8000 )
LEAF_NODE	3263:5	3263:5	8	(
FIELD	3263:6	3263:6	8	value
LEAF_NODE	3263:6	3263:6	9	value
REL_OPERATOR	3263:11	3263:11	8	<
LEAF_NODE	3263:11	3263:11	9	<
UNARY_EXPR	3263:12	3263:13	8	- 0x8000
UNARY_OPERATOR	3263:12	3263:12	9	-
LEAF_NODE	3263:12	3263:12	10	-
FIELD	3263:13	3263:13	9	0x8000
LEAF_NODE	3263:13	3263:13	10	0x8000
LEAF_NODE	3263:19	3263:19	8	)
LEAF_NODE	3263:20	3263:20	7	||
EXPR	3263:22	3263:35	7	( value > 0x7FFF )
LEAF_NODE	3263:22	3263:22	8	(
FIELD	3263:23	3263:23	8	value
LEAF_NODE	3263:23	3263:23	9	value
REL_OPERATOR	3263:28	3263:28	8	>
LEAF_NODE	3263:28	3263:28	9	>
FIELD	3263:29	3263:29	8	0x7FFF
LEAF_NODE	3263:29	3263:29	9	0x7FFF
LEAF_NODE	3263:35	3263:35	8	)
LEAF_NODE	3263:36	3263:36	4	)
STATEMENTS	3264:2	3264:2	4	
LEAF_NODE	3264:2	3264:2	5	return
LEAF_NODE	3264:8	3264:8	3	(
LEAF_NODE	3264:9	3264:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3264:33	3264:33	3	)
LEAF_NODE	3264:34	3264:34	3	;
SELECTION	3265:1	3266:2	3	
KEYWORD	3265:1	3265:1	4	else
LEAF_NODE	3265:1	3265:1	5	else
STATEMENTS	3266:2	3266:2	4	
LEAF_NODE	3266:2	3266:2	5	return
LEAF_NODE	3266:8	3266:8	3	(
LEAF_NODE	3266:9	3266:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3266:30	3266:30	3	)
LEAF_NODE	3266:31	3266:31	3	;
LEAF_NODE	3267:0	3267:0	2	}
FUNCTION_DEF	3269:0	3275:0	1	
RETURN_TYPE	3269:0	3269:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3269:0	3269:0	3	static
TYPE_NAME	3269:7	3269:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3269:7	3269:7	4	enum
LEAF_NODE	3269:12	3269:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3269:32	3269:32	2	TIFFReadDirEntryCheckRangeLongSbyte
LEAF_NODE	3269:32	3269:32	3	TIFFReadDirEntryCheckRangeLongSbyte
PARAMETER_LIST	3269:67	3269:78	2	( int8 value )
LEAF_NODE	3269:67	3269:67	3	(
PARAMETER_DECL	3269:68	3269:73	3	int8 value
TYPE	3269:68	3269:68	4	int8
TYPE_NAME	3269:68	3269:68	5	int8
LEAF_NODE	3269:68	3269:68	6	int8
NAME	3269:73	3269:73	4	value
LEAF_NODE	3269:73	3269:73	5	value
LEAF_NODE	3269:78	3269:78	3	)
LEAF_NODE	3270:0	3270:0	2	{
STATEMENTS	3271:1	3274:31	2	
SELECTION	3271:1	3272:2	3	
KEYWORD	3271:1	3271:1	4	if
LEAF_NODE	3271:1	3271:1	5	if
LEAF_NODE	3271:4	3271:4	4	(
CONDITION	3271:5	3271:5	4	value < 0
EXPR	3271:5	3271:11	5	value < 0
FIELD	3271:5	3271:5	6	value
LEAF_NODE	3271:5	3271:5	7	value
REL_OPERATOR	3271:10	3271:10	6	<
LEAF_NODE	3271:10	3271:10	7	<
FIELD	3271:11	3271:11	6	0
LEAF_NODE	3271:11	3271:11	7	0
LEAF_NODE	3271:12	3271:12	4	)
STATEMENTS	3272:2	3272:2	4	
LEAF_NODE	3272:2	3272:2	5	return
LEAF_NODE	3272:8	3272:8	3	(
LEAF_NODE	3272:9	3272:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3272:33	3272:33	3	)
LEAF_NODE	3272:34	3272:34	3	;
SELECTION	3273:1	3274:2	3	
KEYWORD	3273:1	3273:1	4	else
LEAF_NODE	3273:1	3273:1	5	else
STATEMENTS	3274:2	3274:2	4	
LEAF_NODE	3274:2	3274:2	5	return
LEAF_NODE	3274:8	3274:8	3	(
LEAF_NODE	3274:9	3274:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3274:30	3274:30	3	)
LEAF_NODE	3274:31	3274:31	3	;
LEAF_NODE	3275:0	3275:0	2	}
FUNCTION_DEF	3277:0	3283:0	1	
RETURN_TYPE	3277:0	3277:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3277:0	3277:0	3	static
TYPE_NAME	3277:7	3277:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3277:7	3277:7	4	enum
LEAF_NODE	3277:12	3277:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3277:32	3277:32	2	TIFFReadDirEntryCheckRangeLongSshort
LEAF_NODE	3277:32	3277:32	3	TIFFReadDirEntryCheckRangeLongSshort
PARAMETER_LIST	3277:68	3277:80	2	( int16 value )
LEAF_NODE	3277:68	3277:68	3	(
PARAMETER_DECL	3277:69	3277:75	3	int16 value
TYPE	3277:69	3277:69	4	int16
TYPE_NAME	3277:69	3277:69	5	int16
LEAF_NODE	3277:69	3277:69	6	int16
NAME	3277:75	3277:75	4	value
LEAF_NODE	3277:75	3277:75	5	value
LEAF_NODE	3277:80	3277:80	3	)
LEAF_NODE	3278:0	3278:0	2	{
STATEMENTS	3279:1	3282:31	2	
SELECTION	3279:1	3280:2	3	
KEYWORD	3279:1	3279:1	4	if
LEAF_NODE	3279:1	3279:1	5	if
LEAF_NODE	3279:4	3279:4	4	(
CONDITION	3279:5	3279:5	4	value < 0
EXPR	3279:5	3279:11	5	value < 0
FIELD	3279:5	3279:5	6	value
LEAF_NODE	3279:5	3279:5	7	value
REL_OPERATOR	3279:10	3279:10	6	<
LEAF_NODE	3279:10	3279:10	7	<
FIELD	3279:11	3279:11	6	0
LEAF_NODE	3279:11	3279:11	7	0
LEAF_NODE	3279:12	3279:12	4	)
STATEMENTS	3280:2	3280:2	4	
LEAF_NODE	3280:2	3280:2	5	return
LEAF_NODE	3280:8	3280:8	3	(
LEAF_NODE	3280:9	3280:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3280:33	3280:33	3	)
LEAF_NODE	3280:34	3280:34	3	;
SELECTION	3281:1	3282:2	3	
KEYWORD	3281:1	3281:1	4	else
LEAF_NODE	3281:1	3281:1	5	else
STATEMENTS	3282:2	3282:2	4	
LEAF_NODE	3282:2	3282:2	5	return
LEAF_NODE	3282:8	3282:8	3	(
LEAF_NODE	3282:9	3282:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3282:30	3282:30	3	)
LEAF_NODE	3282:31	3282:31	3	;
LEAF_NODE	3283:0	3283:0	2	}
FUNCTION_DEF	3285:0	3291:0	1	
RETURN_TYPE	3285:0	3285:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3285:0	3285:0	3	static
TYPE_NAME	3285:7	3285:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3285:7	3285:7	4	enum
LEAF_NODE	3285:12	3285:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3285:32	3285:32	2	TIFFReadDirEntryCheckRangeLongSlong
LEAF_NODE	3285:32	3285:32	3	TIFFReadDirEntryCheckRangeLongSlong
PARAMETER_LIST	3285:67	3285:79	2	( int32 value )
LEAF_NODE	3285:67	3285:67	3	(
PARAMETER_DECL	3285:68	3285:74	3	int32 value
TYPE	3285:68	3285:68	4	int32
TYPE_NAME	3285:68	3285:68	5	int32
LEAF_NODE	3285:68	3285:68	6	int32
NAME	3285:74	3285:74	4	value
LEAF_NODE	3285:74	3285:74	5	value
LEAF_NODE	3285:79	3285:79	3	)
LEAF_NODE	3286:0	3286:0	2	{
STATEMENTS	3287:1	3290:31	2	
SELECTION	3287:1	3288:2	3	
KEYWORD	3287:1	3287:1	4	if
LEAF_NODE	3287:1	3287:1	5	if
LEAF_NODE	3287:4	3287:4	4	(
CONDITION	3287:5	3287:5	4	value < 0
EXPR	3287:5	3287:11	5	value < 0
FIELD	3287:5	3287:5	6	value
LEAF_NODE	3287:5	3287:5	7	value
REL_OPERATOR	3287:10	3287:10	6	<
LEAF_NODE	3287:10	3287:10	7	<
FIELD	3287:11	3287:11	6	0
LEAF_NODE	3287:11	3287:11	7	0
LEAF_NODE	3287:12	3287:12	4	)
STATEMENTS	3288:2	3288:2	4	
LEAF_NODE	3288:2	3288:2	5	return
LEAF_NODE	3288:8	3288:8	3	(
LEAF_NODE	3288:9	3288:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3288:33	3288:33	3	)
LEAF_NODE	3288:34	3288:34	3	;
SELECTION	3289:1	3290:2	3	
KEYWORD	3289:1	3289:1	4	else
LEAF_NODE	3289:1	3289:1	5	else
STATEMENTS	3290:2	3290:2	4	
LEAF_NODE	3290:2	3290:2	5	return
LEAF_NODE	3290:8	3290:8	3	(
LEAF_NODE	3290:9	3290:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3290:30	3290:30	3	)
LEAF_NODE	3290:31	3290:31	3	;
LEAF_NODE	3291:0	3291:0	2	}
FUNCTION_DEF	3293:0	3300:0	1	
RETURN_TYPE	3293:0	3293:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3293:0	3293:0	3	static
TYPE_NAME	3293:7	3293:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3293:7	3293:7	4	enum
LEAF_NODE	3293:12	3293:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3294:0	3294:0	2	TIFFReadDirEntryCheckRangeLongLong8
LEAF_NODE	3294:0	3294:0	3	TIFFReadDirEntryCheckRangeLongLong8
PARAMETER_LIST	3294:35	3294:48	2	( uint64 value )
LEAF_NODE	3294:35	3294:35	3	(
PARAMETER_DECL	3294:36	3294:43	3	uint64 value
TYPE	3294:36	3294:36	4	uint64
TYPE_NAME	3294:36	3294:36	5	uint64
LEAF_NODE	3294:36	3294:36	6	uint64
NAME	3294:43	3294:43	4	value
LEAF_NODE	3294:43	3294:43	5	value
LEAF_NODE	3294:48	3294:48	3	)
LEAF_NODE	3295:0	3295:0	2	{
STATEMENTS	3296:1	3299:31	2	
SELECTION	3296:1	3297:2	3	
KEYWORD	3296:1	3296:1	4	if
LEAF_NODE	3296:1	3296:1	5	if
LEAF_NODE	3296:4	3296:4	4	(
CONDITION	3296:5	3296:5	4	value > TIFF_UINT32_MAX
EXPR	3296:5	3296:13	5	value > TIFF_UINT32_MAX
FIELD	3296:5	3296:5	6	value
LEAF_NODE	3296:5	3296:5	7	value
REL_OPERATOR	3296:11	3296:11	6	>
LEAF_NODE	3296:11	3296:11	7	>
FIELD	3296:13	3296:13	6	TIFF_UINT32_MAX
LEAF_NODE	3296:13	3296:13	7	TIFF_UINT32_MAX
LEAF_NODE	3296:28	3296:28	4	)
STATEMENTS	3297:2	3297:2	4	
LEAF_NODE	3297:2	3297:2	5	return
LEAF_NODE	3297:8	3297:8	3	(
LEAF_NODE	3297:9	3297:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3297:33	3297:33	3	)
LEAF_NODE	3297:34	3297:34	3	;
SELECTION	3298:1	3299:2	3	
KEYWORD	3298:1	3298:1	4	else
LEAF_NODE	3298:1	3298:1	5	else
STATEMENTS	3299:2	3299:2	4	
LEAF_NODE	3299:2	3299:2	5	return
LEAF_NODE	3299:8	3299:8	3	(
LEAF_NODE	3299:9	3299:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3299:30	3299:30	3	)
LEAF_NODE	3299:31	3299:31	3	;
LEAF_NODE	3300:0	3300:0	2	}
FUNCTION_DEF	3302:0	3309:0	1	
RETURN_TYPE	3302:0	3302:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3302:0	3302:0	3	static
TYPE_NAME	3302:7	3302:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3302:7	3302:7	4	enum
LEAF_NODE	3302:12	3302:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3303:0	3303:0	2	TIFFReadDirEntryCheckRangeLongSlong8
LEAF_NODE	3303:0	3303:0	3	TIFFReadDirEntryCheckRangeLongSlong8
PARAMETER_LIST	3303:36	3303:48	2	( int64 value )
LEAF_NODE	3303:36	3303:36	3	(
PARAMETER_DECL	3303:37	3303:43	3	int64 value
TYPE	3303:37	3303:37	4	int64
TYPE_NAME	3303:37	3303:37	5	int64
LEAF_NODE	3303:37	3303:37	6	int64
NAME	3303:43	3303:43	4	value
LEAF_NODE	3303:43	3303:43	5	value
LEAF_NODE	3303:48	3303:48	3	)
LEAF_NODE	3304:0	3304:0	2	{
STATEMENTS	3305:1	3308:31	2	
SELECTION	3305:1	3306:2	3	
KEYWORD	3305:1	3305:1	4	if
LEAF_NODE	3305:1	3305:1	5	if
LEAF_NODE	3305:4	3305:4	4	(
CONDITION	3305:5	3305:5	4	( value < 0 ) || ( value > ( int64 ) TIFF_UINT32_MAX )
EXPR	3305:5	3305:5	5	( value < 0 ) || ( value > ( int64 ) TIFF_UINT32_MAX )
OR	3305:5	3305:20	6	( value < 0 ) || ( value > ( int64 ) TIFF_UINT32_MAX )
EXPR	3305:5	3305:15	7	( value < 0 )
LEAF_NODE	3305:5	3305:5	8	(
FIELD	3305:6	3305:6	8	value
LEAF_NODE	3305:6	3305:6	9	value
REL_OPERATOR	3305:12	3305:12	8	<
LEAF_NODE	3305:12	3305:12	9	<
FIELD	3305:14	3305:14	8	0
LEAF_NODE	3305:14	3305:14	9	0
LEAF_NODE	3305:15	3305:15	8	)
LEAF_NODE	3305:17	3305:17	7	||
EXPR	3305:20	3305:52	7	( value > ( int64 ) TIFF_UINT32_MAX )
LEAF_NODE	3305:20	3305:20	8	(
FIELD	3305:21	3305:21	8	value
LEAF_NODE	3305:21	3305:21	9	value
REL_OPERATOR	3305:27	3305:27	8	>
LEAF_NODE	3305:27	3305:27	9	>
LEAF_NODE	3305:29	3305:29	8	(
TYPE_NAME	3305:30	3305:30	8	int64
LEAF_NODE	3305:30	3305:30	9	int64
LEAF_NODE	3305:35	3305:35	8	)
FIELD	3305:37	3305:37	8	TIFF_UINT32_MAX
LEAF_NODE	3305:37	3305:37	9	TIFF_UINT32_MAX
LEAF_NODE	3305:52	3305:52	8	)
LEAF_NODE	3305:53	3305:53	4	)
STATEMENTS	3306:2	3306:2	4	
LEAF_NODE	3306:2	3306:2	5	return
LEAF_NODE	3306:8	3306:8	3	(
LEAF_NODE	3306:9	3306:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3306:33	3306:33	3	)
LEAF_NODE	3306:34	3306:34	3	;
SELECTION	3307:1	3308:2	3	
KEYWORD	3307:1	3307:1	4	else
LEAF_NODE	3307:1	3307:1	5	else
STATEMENTS	3308:2	3308:2	4	
LEAF_NODE	3308:2	3308:2	5	return
LEAF_NODE	3308:8	3308:8	3	(
LEAF_NODE	3308:9	3308:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3308:30	3308:30	3	)
LEAF_NODE	3308:31	3308:31	3	;
LEAF_NODE	3309:0	3309:0	2	}
FUNCTION_DEF	3311:0	3318:0	1	
RETURN_TYPE	3311:0	3311:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3311:0	3311:0	3	static
TYPE_NAME	3311:7	3311:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3311:7	3311:7	4	enum
LEAF_NODE	3311:12	3311:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3312:0	3312:0	2	TIFFReadDirEntryCheckRangeSlongLong
LEAF_NODE	3312:0	3312:0	3	TIFFReadDirEntryCheckRangeSlongLong
PARAMETER_LIST	3312:35	3312:48	2	( uint32 value )
LEAF_NODE	3312:35	3312:35	3	(
PARAMETER_DECL	3312:36	3312:43	3	uint32 value
TYPE	3312:36	3312:36	4	uint32
TYPE_NAME	3312:36	3312:36	5	uint32
LEAF_NODE	3312:36	3312:36	6	uint32
NAME	3312:43	3312:43	4	value
LEAF_NODE	3312:43	3312:43	5	value
LEAF_NODE	3312:48	3312:48	3	)
LEAF_NODE	3313:0	3313:0	2	{
STATEMENTS	3314:1	3317:31	2	
SELECTION	3314:1	3315:2	3	
KEYWORD	3314:1	3314:1	4	if
LEAF_NODE	3314:1	3314:1	5	if
LEAF_NODE	3314:4	3314:4	4	(
CONDITION	3314:5	3314:5	4	value > 0x7FFFFFFFUL
EXPR	3314:5	3314:13	5	value > 0x7FFFFFFFUL
FIELD	3314:5	3314:5	6	value
LEAF_NODE	3314:5	3314:5	7	value
REL_OPERATOR	3314:11	3314:11	6	>
LEAF_NODE	3314:11	3314:11	7	>
FIELD	3314:13	3314:13	6	0x7FFFFFFFUL
LEAF_NODE	3314:13	3314:13	7	0x7FFFFFFFUL
LEAF_NODE	3314:25	3314:25	4	)
STATEMENTS	3315:2	3315:2	4	
LEAF_NODE	3315:2	3315:2	5	return
LEAF_NODE	3315:8	3315:8	3	(
LEAF_NODE	3315:9	3315:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3315:33	3315:33	3	)
LEAF_NODE	3315:34	3315:34	3	;
SELECTION	3316:1	3317:2	3	
KEYWORD	3316:1	3316:1	4	else
LEAF_NODE	3316:1	3316:1	5	else
STATEMENTS	3317:2	3317:2	4	
LEAF_NODE	3317:2	3317:2	5	return
LEAF_NODE	3317:8	3317:8	3	(
LEAF_NODE	3317:9	3317:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3317:30	3317:30	3	)
LEAF_NODE	3317:31	3317:31	3	;
LEAF_NODE	3318:0	3318:0	2	}
FUNCTION_DEF	3321:0	3328:0	1	
RETURN_TYPE	3321:0	3321:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3321:0	3321:0	3	static
TYPE_NAME	3321:7	3321:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3321:7	3321:7	4	enum
LEAF_NODE	3321:12	3321:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3322:0	3322:0	2	TIFFReadDirEntryCheckRangeSlongLong8
LEAF_NODE	3322:0	3322:0	3	TIFFReadDirEntryCheckRangeSlongLong8
PARAMETER_LIST	3322:36	3322:49	2	( uint64 value )
LEAF_NODE	3322:36	3322:36	3	(
PARAMETER_DECL	3322:37	3322:44	3	uint64 value
TYPE	3322:37	3322:37	4	uint64
TYPE_NAME	3322:37	3322:37	5	uint64
LEAF_NODE	3322:37	3322:37	6	uint64
NAME	3322:44	3322:44	4	value
LEAF_NODE	3322:44	3322:44	5	value
LEAF_NODE	3322:49	3322:49	3	)
LEAF_NODE	3323:0	3323:0	2	{
STATEMENTS	3324:1	3327:31	2	
SELECTION	3324:1	3325:2	3	
KEYWORD	3324:1	3324:1	4	if
LEAF_NODE	3324:1	3324:1	5	if
LEAF_NODE	3324:4	3324:4	4	(
CONDITION	3324:5	3324:5	4	value > 0x7FFFFFFF
EXPR	3324:5	3324:13	5	value > 0x7FFFFFFF
FIELD	3324:5	3324:5	6	value
LEAF_NODE	3324:5	3324:5	7	value
REL_OPERATOR	3324:11	3324:11	6	>
LEAF_NODE	3324:11	3324:11	7	>
FIELD	3324:13	3324:13	6	0x7FFFFFFF
LEAF_NODE	3324:13	3324:13	7	0x7FFFFFFF
LEAF_NODE	3324:23	3324:23	4	)
STATEMENTS	3325:2	3325:2	4	
LEAF_NODE	3325:2	3325:2	5	return
LEAF_NODE	3325:8	3325:8	3	(
LEAF_NODE	3325:9	3325:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3325:33	3325:33	3	)
LEAF_NODE	3325:34	3325:34	3	;
SELECTION	3326:1	3327:2	3	
KEYWORD	3326:1	3326:1	4	else
LEAF_NODE	3326:1	3326:1	5	else
STATEMENTS	3327:2	3327:2	4	
LEAF_NODE	3327:2	3327:2	5	return
LEAF_NODE	3327:8	3327:8	3	(
LEAF_NODE	3327:9	3327:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3327:30	3327:30	3	)
LEAF_NODE	3327:31	3327:31	3	;
LEAF_NODE	3328:0	3328:0	2	}
FUNCTION_DEF	3331:0	3338:0	1	
RETURN_TYPE	3331:0	3331:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3331:0	3331:0	3	static
TYPE_NAME	3331:7	3331:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3331:7	3331:7	4	enum
LEAF_NODE	3331:12	3331:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3332:0	3332:0	2	TIFFReadDirEntryCheckRangeSlongSlong8
LEAF_NODE	3332:0	3332:0	3	TIFFReadDirEntryCheckRangeSlongSlong8
PARAMETER_LIST	3332:37	3332:49	2	( int64 value )
LEAF_NODE	3332:37	3332:37	3	(
PARAMETER_DECL	3332:38	3332:44	3	int64 value
TYPE	3332:38	3332:38	4	int64
TYPE_NAME	3332:38	3332:38	5	int64
LEAF_NODE	3332:38	3332:38	6	int64
NAME	3332:44	3332:44	4	value
LEAF_NODE	3332:44	3332:44	5	value
LEAF_NODE	3332:49	3332:49	3	)
LEAF_NODE	3333:0	3333:0	2	{
STATEMENTS	3334:8	3337:31	2	
SELECTION	3334:8	3335:2	3	
KEYWORD	3334:8	3334:8	4	if
LEAF_NODE	3334:8	3334:8	5	if
LEAF_NODE	3334:11	3334:11	4	(
CONDITION	3334:12	3334:12	4	( value < 0 - ( ( int64 ) 0x7FFFFFFF + 1 ) ) || ( value > 0x7FFFFFFF )
EXPR	3334:12	3334:12	5	( value < 0 - ( ( int64 ) 0x7FFFFFFF + 1 ) ) || ( value > 0x7FFFFFFF )
OR	3334:12	3334:50	6	( value < 0 - ( ( int64 ) 0x7FFFFFFF + 1 ) ) || ( value > 0x7FFFFFFF )
EXPR	3334:12	3334:45	7	( value < 0 - ( ( int64 ) 0x7FFFFFFF + 1 ) )
LEAF_NODE	3334:12	3334:12	8	(
FIELD	3334:13	3334:13	8	value
LEAF_NODE	3334:13	3334:13	9	value
REL_OPERATOR	3334:19	3334:19	8	<
LEAF_NODE	3334:19	3334:19	9	<
FIELD	3334:21	3334:21	8	0
LEAF_NODE	3334:21	3334:21	9	0
LEAF_NODE	3334:22	3334:22	8	-
LEAF_NODE	3334:23	3334:23	8	(
LEAF_NODE	3334:24	3334:24	8	(
TYPE_NAME	3334:25	3334:25	8	int64
LEAF_NODE	3334:25	3334:25	9	int64
LEAF_NODE	3334:30	3334:30	8	)
FIELD	3334:32	3334:32	8	0x7FFFFFFF
LEAF_NODE	3334:32	3334:32	9	0x7FFFFFFF
LEAF_NODE	3334:42	3334:42	8	+
FIELD	3334:43	3334:43	8	1
LEAF_NODE	3334:43	3334:43	9	1
LEAF_NODE	3334:44	3334:44	8	)
LEAF_NODE	3334:45	3334:45	8	)
LEAF_NODE	3334:47	3334:47	7	||
EXPR	3334:50	3334:69	7	( value > 0x7FFFFFFF )
LEAF_NODE	3334:50	3334:50	8	(
FIELD	3334:51	3334:51	8	value
LEAF_NODE	3334:51	3334:51	9	value
REL_OPERATOR	3334:57	3334:57	8	>
LEAF_NODE	3334:57	3334:57	9	>
FIELD	3334:59	3334:59	8	0x7FFFFFFF
LEAF_NODE	3334:59	3334:59	9	0x7FFFFFFF
LEAF_NODE	3334:69	3334:69	8	)
LEAF_NODE	3334:70	3334:70	4	)
STATEMENTS	3335:2	3335:2	4	
LEAF_NODE	3335:2	3335:2	5	return
LEAF_NODE	3335:8	3335:8	3	(
LEAF_NODE	3335:9	3335:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3335:33	3335:33	3	)
LEAF_NODE	3335:34	3335:34	3	;
SELECTION	3336:1	3337:2	3	
KEYWORD	3336:1	3336:1	4	else
LEAF_NODE	3336:1	3336:1	5	else
STATEMENTS	3337:2	3337:2	4	
LEAF_NODE	3337:2	3337:2	5	return
LEAF_NODE	3337:8	3337:8	3	(
LEAF_NODE	3337:9	3337:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3337:30	3337:30	3	)
LEAF_NODE	3337:31	3337:31	3	;
LEAF_NODE	3338:0	3338:0	2	}
FUNCTION_DEF	3340:0	3347:0	1	
RETURN_TYPE	3340:0	3340:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3340:0	3340:0	3	static
TYPE_NAME	3340:7	3340:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3340:7	3340:7	4	enum
LEAF_NODE	3340:12	3340:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3341:0	3341:0	2	TIFFReadDirEntryCheckRangeLong8Sbyte
LEAF_NODE	3341:0	3341:0	3	TIFFReadDirEntryCheckRangeLong8Sbyte
PARAMETER_LIST	3341:36	3341:47	2	( int8 value )
LEAF_NODE	3341:36	3341:36	3	(
PARAMETER_DECL	3341:37	3341:42	3	int8 value
TYPE	3341:37	3341:37	4	int8
TYPE_NAME	3341:37	3341:37	5	int8
LEAF_NODE	3341:37	3341:37	6	int8
NAME	3341:42	3341:42	4	value
LEAF_NODE	3341:42	3341:42	5	value
LEAF_NODE	3341:47	3341:47	3	)
LEAF_NODE	3342:0	3342:0	2	{
STATEMENTS	3343:1	3346:31	2	
SELECTION	3343:1	3344:2	3	
KEYWORD	3343:1	3343:1	4	if
LEAF_NODE	3343:1	3343:1	5	if
LEAF_NODE	3343:4	3343:4	4	(
CONDITION	3343:5	3343:5	4	value < 0
EXPR	3343:5	3343:13	5	value < 0
FIELD	3343:5	3343:5	6	value
LEAF_NODE	3343:5	3343:5	7	value
REL_OPERATOR	3343:11	3343:11	6	<
LEAF_NODE	3343:11	3343:11	7	<
FIELD	3343:13	3343:13	6	0
LEAF_NODE	3343:13	3343:13	7	0
LEAF_NODE	3343:14	3343:14	4	)
STATEMENTS	3344:2	3344:2	4	
LEAF_NODE	3344:2	3344:2	5	return
LEAF_NODE	3344:8	3344:8	3	(
LEAF_NODE	3344:9	3344:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3344:33	3344:33	3	)
LEAF_NODE	3344:34	3344:34	3	;
SELECTION	3345:1	3346:2	3	
KEYWORD	3345:1	3345:1	4	else
LEAF_NODE	3345:1	3345:1	5	else
STATEMENTS	3346:2	3346:2	4	
LEAF_NODE	3346:2	3346:2	5	return
LEAF_NODE	3346:8	3346:8	3	(
LEAF_NODE	3346:9	3346:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3346:30	3346:30	3	)
LEAF_NODE	3346:31	3346:31	3	;
LEAF_NODE	3347:0	3347:0	2	}
FUNCTION_DEF	3349:0	3356:0	1	
RETURN_TYPE	3349:0	3349:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3349:0	3349:0	3	static
TYPE_NAME	3349:7	3349:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3349:7	3349:7	4	enum
LEAF_NODE	3349:12	3349:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3350:0	3350:0	2	TIFFReadDirEntryCheckRangeLong8Sshort
LEAF_NODE	3350:0	3350:0	3	TIFFReadDirEntryCheckRangeLong8Sshort
PARAMETER_LIST	3350:37	3350:49	2	( int16 value )
LEAF_NODE	3350:37	3350:37	3	(
PARAMETER_DECL	3350:38	3350:44	3	int16 value
TYPE	3350:38	3350:38	4	int16
TYPE_NAME	3350:38	3350:38	5	int16
LEAF_NODE	3350:38	3350:38	6	int16
NAME	3350:44	3350:44	4	value
LEAF_NODE	3350:44	3350:44	5	value
LEAF_NODE	3350:49	3350:49	3	)
LEAF_NODE	3351:0	3351:0	2	{
STATEMENTS	3352:1	3355:31	2	
SELECTION	3352:1	3353:2	3	
KEYWORD	3352:1	3352:1	4	if
LEAF_NODE	3352:1	3352:1	5	if
LEAF_NODE	3352:4	3352:4	4	(
CONDITION	3352:5	3352:5	4	value < 0
EXPR	3352:5	3352:13	5	value < 0
FIELD	3352:5	3352:5	6	value
LEAF_NODE	3352:5	3352:5	7	value
REL_OPERATOR	3352:11	3352:11	6	<
LEAF_NODE	3352:11	3352:11	7	<
FIELD	3352:13	3352:13	6	0
LEAF_NODE	3352:13	3352:13	7	0
LEAF_NODE	3352:14	3352:14	4	)
STATEMENTS	3353:2	3353:2	4	
LEAF_NODE	3353:2	3353:2	5	return
LEAF_NODE	3353:8	3353:8	3	(
LEAF_NODE	3353:9	3353:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3353:33	3353:33	3	)
LEAF_NODE	3353:34	3353:34	3	;
SELECTION	3354:1	3355:2	3	
KEYWORD	3354:1	3354:1	4	else
LEAF_NODE	3354:1	3354:1	5	else
STATEMENTS	3355:2	3355:2	4	
LEAF_NODE	3355:2	3355:2	5	return
LEAF_NODE	3355:8	3355:8	3	(
LEAF_NODE	3355:9	3355:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3355:30	3355:30	3	)
LEAF_NODE	3355:31	3355:31	3	;
LEAF_NODE	3356:0	3356:0	2	}
FUNCTION_DEF	3358:0	3365:0	1	
RETURN_TYPE	3358:0	3358:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3358:0	3358:0	3	static
TYPE_NAME	3358:7	3358:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3358:7	3358:7	4	enum
LEAF_NODE	3358:12	3358:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3359:0	3359:0	2	TIFFReadDirEntryCheckRangeLong8Slong
LEAF_NODE	3359:0	3359:0	3	TIFFReadDirEntryCheckRangeLong8Slong
PARAMETER_LIST	3359:36	3359:48	2	( int32 value )
LEAF_NODE	3359:36	3359:36	3	(
PARAMETER_DECL	3359:37	3359:43	3	int32 value
TYPE	3359:37	3359:37	4	int32
TYPE_NAME	3359:37	3359:37	5	int32
LEAF_NODE	3359:37	3359:37	6	int32
NAME	3359:43	3359:43	4	value
LEAF_NODE	3359:43	3359:43	5	value
LEAF_NODE	3359:48	3359:48	3	)
LEAF_NODE	3360:0	3360:0	2	{
STATEMENTS	3361:1	3364:31	2	
SELECTION	3361:1	3362:2	3	
KEYWORD	3361:1	3361:1	4	if
LEAF_NODE	3361:1	3361:1	5	if
LEAF_NODE	3361:4	3361:4	4	(
CONDITION	3361:5	3361:5	4	value < 0
EXPR	3361:5	3361:13	5	value < 0
FIELD	3361:5	3361:5	6	value
LEAF_NODE	3361:5	3361:5	7	value
REL_OPERATOR	3361:11	3361:11	6	<
LEAF_NODE	3361:11	3361:11	7	<
FIELD	3361:13	3361:13	6	0
LEAF_NODE	3361:13	3361:13	7	0
LEAF_NODE	3361:14	3361:14	4	)
STATEMENTS	3362:2	3362:2	4	
LEAF_NODE	3362:2	3362:2	5	return
LEAF_NODE	3362:8	3362:8	3	(
LEAF_NODE	3362:9	3362:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3362:33	3362:33	3	)
LEAF_NODE	3362:34	3362:34	3	;
SELECTION	3363:1	3364:2	3	
KEYWORD	3363:1	3363:1	4	else
LEAF_NODE	3363:1	3363:1	5	else
STATEMENTS	3364:2	3364:2	4	
LEAF_NODE	3364:2	3364:2	5	return
LEAF_NODE	3364:8	3364:8	3	(
LEAF_NODE	3364:9	3364:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3364:30	3364:30	3	)
LEAF_NODE	3364:31	3364:31	3	;
LEAF_NODE	3365:0	3365:0	2	}
FUNCTION_DEF	3367:0	3374:0	1	
RETURN_TYPE	3367:0	3367:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3367:0	3367:0	3	static
TYPE_NAME	3367:7	3367:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3367:7	3367:7	4	enum
LEAF_NODE	3367:12	3367:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3368:0	3368:0	2	TIFFReadDirEntryCheckRangeLong8Slong8
LEAF_NODE	3368:0	3368:0	3	TIFFReadDirEntryCheckRangeLong8Slong8
PARAMETER_LIST	3368:37	3368:49	2	( int64 value )
LEAF_NODE	3368:37	3368:37	3	(
PARAMETER_DECL	3368:38	3368:44	3	int64 value
TYPE	3368:38	3368:38	4	int64
TYPE_NAME	3368:38	3368:38	5	int64
LEAF_NODE	3368:38	3368:38	6	int64
NAME	3368:44	3368:44	4	value
LEAF_NODE	3368:44	3368:44	5	value
LEAF_NODE	3368:49	3368:49	3	)
LEAF_NODE	3369:0	3369:0	2	{
STATEMENTS	3370:1	3373:31	2	
SELECTION	3370:1	3371:2	3	
KEYWORD	3370:1	3370:1	4	if
LEAF_NODE	3370:1	3370:1	5	if
LEAF_NODE	3370:4	3370:4	4	(
CONDITION	3370:5	3370:5	4	value < 0
EXPR	3370:5	3370:13	5	value < 0
FIELD	3370:5	3370:5	6	value
LEAF_NODE	3370:5	3370:5	7	value
REL_OPERATOR	3370:11	3370:11	6	<
LEAF_NODE	3370:11	3370:11	7	<
FIELD	3370:13	3370:13	6	0
LEAF_NODE	3370:13	3370:13	7	0
LEAF_NODE	3370:14	3370:14	4	)
STATEMENTS	3371:2	3371:2	4	
LEAF_NODE	3371:2	3371:2	5	return
LEAF_NODE	3371:8	3371:8	3	(
LEAF_NODE	3371:9	3371:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3371:33	3371:33	3	)
LEAF_NODE	3371:34	3371:34	3	;
SELECTION	3372:1	3373:2	3	
KEYWORD	3372:1	3372:1	4	else
LEAF_NODE	3372:1	3372:1	5	else
STATEMENTS	3373:2	3373:2	4	
LEAF_NODE	3373:2	3373:2	5	return
LEAF_NODE	3373:8	3373:8	3	(
LEAF_NODE	3373:9	3373:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3373:30	3373:30	3	)
LEAF_NODE	3373:31	3373:31	3	;
LEAF_NODE	3374:0	3374:0	2	}
FUNCTION_DEF	3376:0	3383:0	1	
RETURN_TYPE	3376:0	3376:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3376:0	3376:0	3	static
TYPE_NAME	3376:7	3376:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3376:7	3376:7	4	enum
LEAF_NODE	3376:12	3376:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3377:0	3377:0	2	TIFFReadDirEntryCheckRangeSlong8Long8
LEAF_NODE	3377:0	3377:0	3	TIFFReadDirEntryCheckRangeSlong8Long8
PARAMETER_LIST	3377:37	3377:50	2	( uint64 value )
LEAF_NODE	3377:37	3377:37	3	(
PARAMETER_DECL	3377:38	3377:45	3	uint64 value
TYPE	3377:38	3377:38	4	uint64
TYPE_NAME	3377:38	3377:38	5	uint64
LEAF_NODE	3377:38	3377:38	6	uint64
NAME	3377:45	3377:45	4	value
LEAF_NODE	3377:45	3377:45	5	value
LEAF_NODE	3377:50	3377:50	3	)
LEAF_NODE	3378:0	3378:0	2	{
STATEMENTS	3379:1	3382:31	2	
SELECTION	3379:1	3380:2	3	
KEYWORD	3379:1	3379:1	4	if
LEAF_NODE	3379:1	3379:1	5	if
LEAF_NODE	3379:4	3379:4	4	(
CONDITION	3379:5	3379:5	4	value > TIFF_INT64_MAX
EXPR	3379:5	3379:13	5	value > TIFF_INT64_MAX
FIELD	3379:5	3379:5	6	value
LEAF_NODE	3379:5	3379:5	7	value
REL_OPERATOR	3379:11	3379:11	6	>
LEAF_NODE	3379:11	3379:11	7	>
FIELD	3379:13	3379:13	6	TIFF_INT64_MAX
LEAF_NODE	3379:13	3379:13	7	TIFF_INT64_MAX
LEAF_NODE	3379:27	3379:27	4	)
STATEMENTS	3380:2	3380:2	4	
LEAF_NODE	3380:2	3380:2	5	return
LEAF_NODE	3380:8	3380:8	3	(
LEAF_NODE	3380:9	3380:9	3	TIFFReadDirEntryErrRange
LEAF_NODE	3380:33	3380:33	3	)
LEAF_NODE	3380:34	3380:34	3	;
SELECTION	3381:1	3382:2	3	
KEYWORD	3381:1	3381:1	4	else
LEAF_NODE	3381:1	3381:1	5	else
STATEMENTS	3382:2	3382:2	4	
LEAF_NODE	3382:2	3382:2	5	return
LEAF_NODE	3382:8	3382:8	3	(
LEAF_NODE	3382:9	3382:9	3	TIFFReadDirEntryErrOk
LEAF_NODE	3382:30	3382:30	3	)
LEAF_NODE	3382:31	3382:31	3	;
LEAF_NODE	3383:0	3383:0	2	}
FUNCTION_DEF	3385:0	3408:0	1	
RETURN_TYPE	3385:0	3385:7	2	static enum TIFFReadDirEntryErr
LEAF_NODE	3385:0	3385:0	3	static
TYPE_NAME	3385:7	3385:12	3	enum TIFFReadDirEntryErr
LEAF_NODE	3385:7	3385:7	4	enum
LEAF_NODE	3385:12	3385:12	4	TIFFReadDirEntryErr
FUNCTION_NAME	3386:0	3386:0	2	TIFFReadDirEntryData
LEAF_NODE	3386:0	3386:0	3	TIFFReadDirEntryData
PARAMETER_LIST	3386:20	3386:72	2	( TIFF * tif , uint64 offset , tmsize_t size , void * dest )
LEAF_NODE	3386:20	3386:20	3	(
PARAMETER_DECL	3386:21	3386:27	3	TIFF * tif
TYPE	3386:21	3386:25	4	TIFF *
TYPE_NAME	3386:21	3386:21	5	TIFF
LEAF_NODE	3386:21	3386:21	6	TIFF
POINTER	3386:25	3386:25	5	*
LEAF_NODE	3386:25	3386:25	6	*
NAME	3386:27	3386:27	4	tif
LEAF_NODE	3386:27	3386:27	5	tif
LEAF_NODE	3386:30	3386:30	3	,
PARAMETER_DECL	3386:32	3386:39	3	uint64 offset
TYPE	3386:32	3386:32	4	uint64
TYPE_NAME	3386:32	3386:32	5	uint64
LEAF_NODE	3386:32	3386:32	6	uint64
NAME	3386:39	3386:39	4	offset
LEAF_NODE	3386:39	3386:39	5	offset
LEAF_NODE	3386:45	3386:45	3	,
PARAMETER_DECL	3386:47	3386:56	3	tmsize_t size
TYPE	3386:47	3386:47	4	tmsize_t
TYPE_NAME	3386:47	3386:47	5	tmsize_t
LEAF_NODE	3386:47	3386:47	6	tmsize_t
NAME	3386:56	3386:56	4	size
LEAF_NODE	3386:56	3386:56	5	size
LEAF_NODE	3386:60	3386:60	3	,
PARAMETER_DECL	3386:62	3386:68	3	void * dest
TYPE	3386:62	3386:66	4	void *
TYPE_NAME	3386:62	3386:62	5	void
LEAF_NODE	3386:62	3386:62	6	void
POINTER	3386:66	3386:66	5	*
LEAF_NODE	3386:66	3386:66	6	*
NAME	3386:68	3386:68	4	dest
LEAF_NODE	3386:68	3386:68	5	dest
LEAF_NODE	3386:72	3386:72	3	)
LEAF_NODE	3387:0	3387:0	2	{
STATEMENTS	3388:1	3407:30	2	
EXPR_STATEMENT	3388:1	3388:15	3	assert ( size > 0 ) ;
EXPR	3388:1	3388:1	4	assert ( size > 0 )
FUNCTION_CALL	3388:1	3388:14	5	assert ( size > 0 )
CALLEE	3388:1	3388:1	6	assert
LEAF_NODE	3388:1	3388:1	7	assert
LEAF_NODE	3388:7	3388:7	6	(
ARGUMENT	3388:8	3388:13	6	size > 0
FIELD	3388:8	3388:8	7	size
LEAF_NODE	3388:8	3388:8	8	size
REL_OPERATOR	3388:12	3388:12	7	>
LEAF_NODE	3388:12	3388:12	8	>
FIELD	3388:13	3388:13	7	0
LEAF_NODE	3388:13	3388:13	8	0
LEAF_NODE	3388:14	3388:14	6	)
LEAF_NODE	3388:15	3388:15	4	;
SELECTION	3389:1	3389:21	3	
KEYWORD	3389:1	3389:1	4	if
LEAF_NODE	3389:1	3389:1	5	if
LEAF_NODE	3389:4	3389:4	4	(
CONDITION	3389:5	3389:5	4	! isMapped ( tif )
EXPR	3389:5	3389:5	5	! isMapped ( tif )
UNARY_EXPR	3389:5	3389:6	6	! isMapped ( tif )
UNARY_OPERATOR	3389:5	3389:5	7	!
LEAF_NODE	3389:5	3389:5	8	!
FUNCTION_CALL	3389:6	3389:18	7	isMapped ( tif )
CALLEE	3389:6	3389:6	8	isMapped
LEAF_NODE	3389:6	3389:6	9	isMapped
LEAF_NODE	3389:14	3389:14	8	(
ARGUMENT	3389:15	3389:15	8	tif
FIELD	3389:15	3389:15	9	tif
LEAF_NODE	3389:15	3389:15	10	tif
LEAF_NODE	3389:18	3389:18	8	)
LEAF_NODE	3389:19	3389:19	4	)
STATEMENTS	3389:21	3394:1	4	
LEAF_NODE	3389:21	3389:21	5	{
STATEMENTS	3390:2	3393:32	5	
SELECTION	3390:2	3391:3	6	
KEYWORD	3390:2	3390:2	7	if
LEAF_NODE	3390:2	3390:2	8	if
LEAF_NODE	3390:5	3390:5	7	(
CONDITION	3390:6	3390:6	7	! SeekOK ( tif , offset )
EXPR	3390:6	3390:6	8	! SeekOK ( tif , offset )
UNARY_EXPR	3390:6	3390:7	9	! SeekOK ( tif , offset )
UNARY_OPERATOR	3390:6	3390:6	10	!
LEAF_NODE	3390:6	3390:6	11	!
FUNCTION_CALL	3390:7	3390:24	10	SeekOK ( tif , offset )
CALLEE	3390:7	3390:7	11	SeekOK
LEAF_NODE	3390:7	3390:7	12	SeekOK
LEAF_NODE	3390:13	3390:13	11	(
ARGUMENT	3390:14	3390:14	11	tif
FIELD	3390:14	3390:14	12	tif
LEAF_NODE	3390:14	3390:14	13	tif
LEAF_NODE	3390:17	3390:17	11	,
ARGUMENT	3390:18	3390:18	11	offset
FIELD	3390:18	3390:18	12	offset
LEAF_NODE	3390:18	3390:18	13	offset
LEAF_NODE	3390:24	3390:24	11	)
LEAF_NODE	3390:25	3390:25	7	)
STATEMENTS	3391:3	3391:3	7	
LEAF_NODE	3391:3	3391:3	8	return
LEAF_NODE	3391:9	3391:9	6	(
LEAF_NODE	3391:10	3391:10	6	TIFFReadDirEntryErrIo
LEAF_NODE	3391:31	3391:31	6	)
LEAF_NODE	3391:32	3391:32	6	;
SELECTION	3392:2	3393:3	6	
KEYWORD	3392:2	3392:2	7	if
LEAF_NODE	3392:2	3392:2	8	if
LEAF_NODE	3392:5	3392:5	7	(
CONDITION	3392:6	3392:6	7	! ReadOK ( tif , dest , size )
EXPR	3392:6	3392:6	8	! ReadOK ( tif , dest , size )
UNARY_EXPR	3392:6	3392:7	9	! ReadOK ( tif , dest , size )
UNARY_OPERATOR	3392:6	3392:6	10	!
LEAF_NODE	3392:6	3392:6	11	!
FUNCTION_CALL	3392:7	3392:27	10	ReadOK ( tif , dest , size )
CALLEE	3392:7	3392:7	11	ReadOK
LEAF_NODE	3392:7	3392:7	12	ReadOK
LEAF_NODE	3392:13	3392:13	11	(
ARGUMENT	3392:14	3392:14	11	tif
FIELD	3392:14	3392:14	12	tif
LEAF_NODE	3392:14	3392:14	13	tif
LEAF_NODE	3392:17	3392:17	11	,
ARGUMENT	3392:18	3392:18	11	dest
FIELD	3392:18	3392:18	12	dest
LEAF_NODE	3392:18	3392:18	13	dest
LEAF_NODE	3392:22	3392:22	11	,
ARGUMENT	3392:23	3392:23	11	size
FIELD	3392:23	3392:23	12	size
LEAF_NODE	3392:23	3392:23	13	size
LEAF_NODE	3392:27	3392:27	11	)
LEAF_NODE	3392:28	3392:28	7	)
STATEMENTS	3393:3	3393:3	7	
LEAF_NODE	3393:3	3393:3	8	return
LEAF_NODE	3393:9	3393:9	6	(
LEAF_NODE	3393:10	3393:10	6	TIFFReadDirEntryErrIo
LEAF_NODE	3393:31	3393:31	6	)
LEAF_NODE	3393:32	3393:32	6	;
LEAF_NODE	3394:1	3394:1	5	}
SELECTION	3394:3	3394:8	3	
KEYWORD	3394:3	3394:3	4	else
LEAF_NODE	3394:3	3394:3	5	else
STATEMENTS	3394:8	3406:1	4	
LEAF_NODE	3394:8	3394:8	5	{
STATEMENTS	3395:2	3405:2	5	
SIMPLE_DECL	3395:2	3395:14	6	size_t ma , size_t mb ;
INIT_DECL_LIST	3395:2	3395:2	7	size_t ma , size_t mb
VAR_DECL	3395:2	3395:9	8	size_t ma
TYPE	3395:2	3395:2	9	size_t
TYPE_NAME	3395:2	3395:2	10	size_t
LEAF_NODE	3395:2	3395:2	11	size_t
NAME	3395:9	3395:9	9	ma
LEAF_NODE	3395:9	3395:9	10	ma
LEAF_NODE	3395:11	3395:11	8	,
VAR_DECL	3395:2	3395:12	8	size_t mb
TYPE	3395:2	3395:2	9	size_t
TYPE_NAME	3395:2	3395:2	10	size_t
LEAF_NODE	3395:2	3395:2	11	size_t
NAME	3395:12	3395:12	9	mb
LEAF_NODE	3395:12	3395:12	10	mb
LEAF_NODE	3395:14	3395:14	7	;
EXPR_STATEMENT	3396:2	3396:19	6	ma = ( size_t ) offset ;
EXPR	3396:2	3396:2	7	ma = ( size_t ) offset
ASSIGN	3396:2	3396:5	8	ma = ( size_t ) offset
LVAL	3396:2	3396:2	9	ma
FIELD	3396:2	3396:2	10	ma
LEAF_NODE	3396:2	3396:2	11	ma
ASSIGN_OP	3396:4	3396:4	9	=
LEAF_NODE	3396:4	3396:4	10	=
RVAL	3396:5	3396:13	9	( size_t ) offset
LEAF_NODE	3396:5	3396:5	10	(
TYPE_NAME	3396:6	3396:6	10	size_t
LEAF_NODE	3396:6	3396:6	11	size_t
LEAF_NODE	3396:12	3396:12	10	)
FIELD	3396:13	3396:13	10	offset
LEAF_NODE	3396:13	3396:13	11	offset
LEAF_NODE	3396:19	3396:19	7	;
LEAF_NODE	3397:16	3397:16	6	if
LEAF_NODE	3397:18	3397:18	6	(
LEAF_NODE	3397:20	3397:20	6	(
LEAF_NODE	3397:21	3397:21	6	uint64
LEAF_NODE	3397:27	3397:27	6	)
LEAF_NODE	3397:28	3397:28	6	ma
LEAF_NODE	3397:30	3397:30	6	!=
LEAF_NODE	3397:32	3397:32	6	offset
LEAF_NODE	3397:39	3397:39	6	||
LEAF_NODE	3398:20	3398:20	6	ma
LEAF_NODE	3398:23	3398:23	6	>
LEAF_NODE	3398:25	3398:25	6	(
LEAF_NODE	3398:26	3398:26	6	~
LEAF_NODE	3398:27	3398:27	6	(
LEAF_NODE	3398:28	3398:28	6	size_t
LEAF_NODE	3398:34	3398:34	6	)
LEAF_NODE	3398:35	3398:35	6	0
LEAF_NODE	3398:36	3398:36	6	)
LEAF_NODE	3398:38	3398:38	6	-
LEAF_NODE	3398:40	3398:40	6	(
LEAF_NODE	3398:41	3398:41	6	size_t
LEAF_NODE	3398:47	3398:47	6	)
LEAF_NODE	3398:48	3398:48	6	size
LEAF_NODE	3398:53	3398:53	6	)
LEAF_NODE	3399:16	3399:16	6	{
STATEMENTS	3400:20	3400:20	6	
JUMP_STATEMENT	3400:20	3400:48	7	return TIFFReadDirEntryErrIo ;
KEYWORD	3400:20	3400:20	8	return
LEAF_NODE	3400:20	3400:20	9	return
DESTINATION	3400:27	3400:27	8	TIFFReadDirEntryErrIo
EXPR	3400:27	3400:27	9	TIFFReadDirEntryErrIo
FIELD	3400:27	3400:27	10	TIFFReadDirEntryErrIo
LEAF_NODE	3400:27	3400:27	11	TIFFReadDirEntryErrIo
LEAF_NODE	3400:48	3400:48	8	;
LEAF_NODE	3401:16	3401:16	6	}
EXPR_STATEMENT	3402:2	3402:12	6	mb = ma + size ;
EXPR	3402:2	3402:2	7	mb = ma + size
ASSIGN	3402:2	3402:5	8	mb = ma + size
LVAL	3402:2	3402:2	9	mb
FIELD	3402:2	3402:2	10	mb
LEAF_NODE	3402:2	3402:2	11	mb
ASSIGN_OP	3402:4	3402:4	9	=
LEAF_NODE	3402:4	3402:4	10	=
RVAL	3402:5	3402:8	9	ma + size
FIELD	3402:5	3402:5	10	ma
LEAF_NODE	3402:5	3402:5	11	ma
LEAF_NODE	3402:7	3402:7	10	+
FIELD	3402:8	3402:8	10	size
LEAF_NODE	3402:8	3402:8	11	size
LEAF_NODE	3402:12	3402:12	7	;
SELECTION	3403:2	3404:3	6	
KEYWORD	3403:2	3403:2	7	if
LEAF_NODE	3403:2	3403:2	8	if
LEAF_NODE	3403:5	3403:5	7	(
CONDITION	3403:6	3403:6	7	mb > ( size_t ) tif -> tif_size
EXPR	3403:6	3403:19	8	mb > ( size_t ) tif -> tif_size
FIELD	3403:6	3403:6	9	mb
LEAF_NODE	3403:6	3403:6	10	mb
REL_OPERATOR	3403:9	3403:9	9	>
LEAF_NODE	3403:9	3403:9	10	>
LEAF_NODE	3403:11	3403:11	9	(
TYPE_NAME	3403:12	3403:12	9	size_t
LEAF_NODE	3403:12	3403:12	10	size_t
LEAF_NODE	3403:18	3403:18	9	)
FIELD	3403:19	3403:24	9	tif -> tif_size
LEAF_NODE	3403:19	3403:19	10	tif
LEAF_NODE	3403:22	3403:22	10	->
LEAF_NODE	3403:24	3403:24	10	tif_size
LEAF_NODE	3403:32	3403:32	7	)
STATEMENTS	3404:3	3404:3	7	
LEAF_NODE	3404:3	3404:3	8	return
LEAF_NODE	3404:9	3404:9	6	(
LEAF_NODE	3404:10	3404:10	6	TIFFReadDirEntryErrIo
LEAF_NODE	3404:31	3404:31	6	)
LEAF_NODE	3404:32	3404:32	6	;
EXPR_STATEMENT	3405:2	3405:41	6	_TIFFmemcpy ( dest , tif -> tif_base + ma , size ) ;
EXPR	3405:2	3405:2	7	_TIFFmemcpy ( dest , tif -> tif_base + ma , size )
FUNCTION_CALL	3405:2	3405:40	8	_TIFFmemcpy ( dest , tif -> tif_base + ma , size )
CALLEE	3405:2	3405:2	9	_TIFFmemcpy
LEAF_NODE	3405:2	3405:2	10	_TIFFmemcpy
LEAF_NODE	3405:13	3405:13	9	(
ARGUMENT	3405:14	3405:14	9	dest
FIELD	3405:14	3405:14	10	dest
LEAF_NODE	3405:14	3405:14	11	dest
LEAF_NODE	3405:18	3405:18	9	,
ARGUMENT	3405:19	3405:33	9	tif -> tif_base + ma
FIELD	3405:19	3405:24	10	tif -> tif_base
LEAF_NODE	3405:19	3405:19	11	tif
LEAF_NODE	3405:22	3405:22	11	->
LEAF_NODE	3405:24	3405:24	11	tif_base
LEAF_NODE	3405:32	3405:32	10	+
FIELD	3405:33	3405:33	10	ma
LEAF_NODE	3405:33	3405:33	11	ma
LEAF_NODE	3405:35	3405:35	9	,
ARGUMENT	3405:36	3405:36	9	size
FIELD	3405:36	3405:36	10	size
LEAF_NODE	3405:36	3405:36	11	size
LEAF_NODE	3405:40	3405:40	9	)
LEAF_NODE	3405:41	3405:41	7	;
LEAF_NODE	3406:1	3406:1	5	}
LEAF_NODE	3407:1	3407:1	3	return
LEAF_NODE	3407:7	3407:7	3	(
LEAF_NODE	3407:8	3407:8	3	TIFFReadDirEntryErrOk
LEAF_NODE	3407:29	3407:29	3	)
LEAF_NODE	3407:30	3407:30	3	;
LEAF_NODE	3408:0	3408:0	2	}
FUNCTION_DEF	3410:0	3495:0	1	
RETURN_TYPE	3410:0	3410:7	2	static void
LEAF_NODE	3410:0	3410:0	3	static
TYPE_NAME	3410:7	3410:7	3	void
LEAF_NODE	3410:7	3410:7	4	void
FUNCTION_NAME	3410:12	3410:12	2	TIFFReadDirEntryOutputErr
LEAF_NODE	3410:12	3410:12	3	TIFFReadDirEntryOutputErr
PARAMETER_LIST	3410:37	3410:131	2	( TIFF * tif , enum TIFFReadDirEntryErr err , const char * module , const char * tagname , int recover )
LEAF_NODE	3410:37	3410:37	3	(
PARAMETER_DECL	3410:38	3410:44	3	TIFF * tif
TYPE	3410:38	3410:42	4	TIFF *
TYPE_NAME	3410:38	3410:38	5	TIFF
LEAF_NODE	3410:38	3410:38	6	TIFF
POINTER	3410:42	3410:42	5	*
LEAF_NODE	3410:42	3410:42	6	*
NAME	3410:44	3410:44	4	tif
LEAF_NODE	3410:44	3410:44	5	tif
LEAF_NODE	3410:47	3410:47	3	,
PARAMETER_DECL	3410:49	3410:74	3	enum TIFFReadDirEntryErr err
TYPE	3410:49	3410:49	4	enum TIFFReadDirEntryErr
TYPE_NAME	3410:49	3410:54	5	enum TIFFReadDirEntryErr
LEAF_NODE	3410:49	3410:49	6	enum
LEAF_NODE	3410:54	3410:54	6	TIFFReadDirEntryErr
NAME	3410:74	3410:74	4	err
LEAF_NODE	3410:74	3410:74	5	err
LEAF_NODE	3410:77	3410:77	3	,
PARAMETER_DECL	3410:79	3410:91	3	const char * module
TYPE	3410:79	3410:89	4	const char *
TYPE_NAME	3410:79	3410:85	5	const char
LEAF_NODE	3410:79	3410:79	6	const
LEAF_NODE	3410:85	3410:85	6	char
POINTER	3410:89	3410:89	5	*
LEAF_NODE	3410:89	3410:89	6	*
NAME	3410:91	3410:91	4	module
LEAF_NODE	3410:91	3410:91	5	module
LEAF_NODE	3410:97	3410:97	3	,
PARAMETER_DECL	3410:99	3410:111	3	const char * tagname
TYPE	3410:99	3410:109	4	const char *
TYPE_NAME	3410:99	3410:105	5	const char
LEAF_NODE	3410:99	3410:99	6	const
LEAF_NODE	3410:105	3410:105	6	char
POINTER	3410:109	3410:109	5	*
LEAF_NODE	3410:109	3410:109	6	*
NAME	3410:111	3410:111	4	tagname
LEAF_NODE	3410:111	3410:111	5	tagname
LEAF_NODE	3410:118	3410:118	3	,
PARAMETER_DECL	3410:120	3410:124	3	int recover
TYPE	3410:120	3410:120	4	int
TYPE_NAME	3410:120	3410:120	5	int
LEAF_NODE	3410:120	3410:120	6	int
NAME	3410:124	3410:124	4	recover
LEAF_NODE	3410:124	3410:124	5	recover
LEAF_NODE	3410:131	3410:131	3	)
LEAF_NODE	3411:0	3411:0	2	{
STATEMENTS	3412:1	3453:3	2	
SELECTION	3412:1	3412:15	3	
KEYWORD	3412:1	3412:1	4	if
LEAF_NODE	3412:1	3412:1	5	if
LEAF_NODE	3412:4	3412:4	4	(
CONDITION	3412:5	3412:5	4	! recover
EXPR	3412:5	3412:5	5	! recover
UNARY_EXPR	3412:5	3412:6	6	! recover
UNARY_OPERATOR	3412:5	3412:5	7	!
LEAF_NODE	3412:5	3412:5	8	!
FIELD	3412:6	3412:6	7	recover
LEAF_NODE	3412:6	3412:6	8	recover
LEAF_NODE	3412:13	3412:13	4	)
STATEMENTS	3412:15	3453:1	4	
LEAF_NODE	3412:15	3412:15	5	{
STATEMENTS	3413:2	3413:2	5	
SELECTION	3413:2	3413:15	6	
KEYWORD	3413:2	3413:2	7	switch
LEAF_NODE	3413:2	3413:2	8	switch
LEAF_NODE	3413:9	3413:9	7	(
CONDITION	3413:10	3413:10	7	err
EXPR	3413:10	3413:10	8	err
FIELD	3413:10	3413:10	9	err
LEAF_NODE	3413:10	3413:10	10	err
LEAF_NODE	3413:13	3413:13	7	)
STATEMENTS	3413:15	3452:2	7	
LEAF_NODE	3413:15	3413:15	8	{
STATEMENTS	3414:3	3451:4	8	
LABEL	3414:3	3414:32	9	case TIFFReadDirEntryErrCount :
LEAF_NODE	3414:3	3414:3	10	case
LEAF_NODE	3414:8	3414:8	10	TIFFReadDirEntryErrCount
LEAF_NODE	3414:32	3414:32	10	:
EXPR_STATEMENT	3415:4	3417:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Incorrect count for \"%s\"" , tagname ) ;
EXPR	3415:4	3415:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Incorrect count for \"%s\"" , tagname )
FUNCTION_CALL	3415:4	3417:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Incorrect count for \"%s\"" , tagname )
CALLEE	3415:4	3415:4	12	TIFFErrorExt
LEAF_NODE	3415:4	3415:4	13	TIFFErrorExt
LEAF_NODE	3415:16	3415:16	12	(
ARGUMENT	3415:17	3415:17	12	tif -> tif_clientdata
FIELD	3415:17	3415:22	13	tif -> tif_clientdata
LEAF_NODE	3415:17	3415:17	14	tif
LEAF_NODE	3415:20	3415:20	14	->
LEAF_NODE	3415:22	3415:22	14	tif_clientdata
LEAF_NODE	3415:36	3415:36	12	,
ARGUMENT	3415:38	3415:38	12	module
FIELD	3415:38	3415:38	13	module
LEAF_NODE	3415:38	3415:38	14	module
LEAF_NODE	3415:44	3415:44	12	,
ARGUMENT	3416:10	3416:10	12	"Incorrect count for \"%s\""
FIELD	3416:10	3416:10	13	"Incorrect count for \"%s\""
LEAF_NODE	3416:10	3416:10	14	"Incorrect count for \"%s\""
LEAF_NODE	3416:38	3416:38	12	,
ARGUMENT	3417:10	3417:10	12	tagname
FIELD	3417:10	3417:10	13	tagname
LEAF_NODE	3417:10	3417:10	14	tagname
LEAF_NODE	3417:17	3417:17	12	)
LEAF_NODE	3417:18	3417:18	10	;
JUMP_STATEMENT	3418:4	3418:9	9	break DESTINATION ;
KEYWORD	3418:4	3418:4	10	break
LEAF_NODE	3418:4	3418:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3418:9	3418:9	10	;
LABEL	3419:3	3419:31	9	case TIFFReadDirEntryErrType :
LEAF_NODE	3419:3	3419:3	10	case
LEAF_NODE	3419:8	3419:8	10	TIFFReadDirEntryErrType
LEAF_NODE	3419:31	3419:31	10	:
EXPR_STATEMENT	3420:4	3422:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Incompatible type for \"%s\"" , tagname ) ;
EXPR	3420:4	3420:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Incompatible type for \"%s\"" , tagname )
FUNCTION_CALL	3420:4	3422:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Incompatible type for \"%s\"" , tagname )
CALLEE	3420:4	3420:4	12	TIFFErrorExt
LEAF_NODE	3420:4	3420:4	13	TIFFErrorExt
LEAF_NODE	3420:16	3420:16	12	(
ARGUMENT	3420:17	3420:17	12	tif -> tif_clientdata
FIELD	3420:17	3420:22	13	tif -> tif_clientdata
LEAF_NODE	3420:17	3420:17	14	tif
LEAF_NODE	3420:20	3420:20	14	->
LEAF_NODE	3420:22	3420:22	14	tif_clientdata
LEAF_NODE	3420:36	3420:36	12	,
ARGUMENT	3420:38	3420:38	12	module
FIELD	3420:38	3420:38	13	module
LEAF_NODE	3420:38	3420:38	14	module
LEAF_NODE	3420:44	3420:44	12	,
ARGUMENT	3421:10	3421:10	12	"Incompatible type for \"%s\""
FIELD	3421:10	3421:10	13	"Incompatible type for \"%s\""
LEAF_NODE	3421:10	3421:10	14	"Incompatible type for \"%s\""
LEAF_NODE	3421:40	3421:40	12	,
ARGUMENT	3422:10	3422:10	12	tagname
FIELD	3422:10	3422:10	13	tagname
LEAF_NODE	3422:10	3422:10	14	tagname
LEAF_NODE	3422:17	3422:17	12	)
LEAF_NODE	3422:18	3422:18	10	;
JUMP_STATEMENT	3423:4	3423:9	9	break DESTINATION ;
KEYWORD	3423:4	3423:4	10	break
LEAF_NODE	3423:4	3423:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3423:9	3423:9	10	;
LABEL	3424:3	3424:29	9	case TIFFReadDirEntryErrIo :
LEAF_NODE	3424:3	3424:3	10	case
LEAF_NODE	3424:8	3424:8	10	TIFFReadDirEntryErrIo
LEAF_NODE	3424:29	3424:29	10	:
EXPR_STATEMENT	3425:4	3427:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error during reading of \"%s\"" , tagname ) ;
EXPR	3425:4	3425:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error during reading of \"%s\"" , tagname )
FUNCTION_CALL	3425:4	3427:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "IO error during reading of \"%s\"" , tagname )
CALLEE	3425:4	3425:4	12	TIFFErrorExt
LEAF_NODE	3425:4	3425:4	13	TIFFErrorExt
LEAF_NODE	3425:16	3425:16	12	(
ARGUMENT	3425:17	3425:17	12	tif -> tif_clientdata
FIELD	3425:17	3425:22	13	tif -> tif_clientdata
LEAF_NODE	3425:17	3425:17	14	tif
LEAF_NODE	3425:20	3425:20	14	->
LEAF_NODE	3425:22	3425:22	14	tif_clientdata
LEAF_NODE	3425:36	3425:36	12	,
ARGUMENT	3425:38	3425:38	12	module
FIELD	3425:38	3425:38	13	module
LEAF_NODE	3425:38	3425:38	14	module
LEAF_NODE	3425:44	3425:44	12	,
ARGUMENT	3426:10	3426:10	12	"IO error during reading of \"%s\""
FIELD	3426:10	3426:10	13	"IO error during reading of \"%s\""
LEAF_NODE	3426:10	3426:10	14	"IO error during reading of \"%s\""
LEAF_NODE	3426:45	3426:45	12	,
ARGUMENT	3427:10	3427:10	12	tagname
FIELD	3427:10	3427:10	13	tagname
LEAF_NODE	3427:10	3427:10	14	tagname
LEAF_NODE	3427:17	3427:17	12	)
LEAF_NODE	3427:18	3427:18	10	;
JUMP_STATEMENT	3428:4	3428:9	9	break DESTINATION ;
KEYWORD	3428:4	3428:4	10	break
LEAF_NODE	3428:4	3428:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3428:9	3428:9	10	;
LABEL	3429:3	3429:32	9	case TIFFReadDirEntryErrRange :
LEAF_NODE	3429:3	3429:3	10	case
LEAF_NODE	3429:8	3429:8	10	TIFFReadDirEntryErrRange
LEAF_NODE	3429:32	3429:32	10	:
EXPR_STATEMENT	3430:4	3432:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Incorrect value for \"%s\"" , tagname ) ;
EXPR	3430:4	3430:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Incorrect value for \"%s\"" , tagname )
FUNCTION_CALL	3430:4	3432:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Incorrect value for \"%s\"" , tagname )
CALLEE	3430:4	3430:4	12	TIFFErrorExt
LEAF_NODE	3430:4	3430:4	13	TIFFErrorExt
LEAF_NODE	3430:16	3430:16	12	(
ARGUMENT	3430:17	3430:17	12	tif -> tif_clientdata
FIELD	3430:17	3430:22	13	tif -> tif_clientdata
LEAF_NODE	3430:17	3430:17	14	tif
LEAF_NODE	3430:20	3430:20	14	->
LEAF_NODE	3430:22	3430:22	14	tif_clientdata
LEAF_NODE	3430:36	3430:36	12	,
ARGUMENT	3430:38	3430:38	12	module
FIELD	3430:38	3430:38	13	module
LEAF_NODE	3430:38	3430:38	14	module
LEAF_NODE	3430:44	3430:44	12	,
ARGUMENT	3431:10	3431:10	12	"Incorrect value for \"%s\""
FIELD	3431:10	3431:10	13	"Incorrect value for \"%s\""
LEAF_NODE	3431:10	3431:10	14	"Incorrect value for \"%s\""
LEAF_NODE	3431:38	3431:38	12	,
ARGUMENT	3432:10	3432:10	12	tagname
FIELD	3432:10	3432:10	13	tagname
LEAF_NODE	3432:10	3432:10	14	tagname
LEAF_NODE	3432:17	3432:17	12	)
LEAF_NODE	3432:18	3432:18	10	;
JUMP_STATEMENT	3433:4	3433:9	9	break DESTINATION ;
KEYWORD	3433:4	3433:4	10	break
LEAF_NODE	3433:4	3433:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3433:9	3433:9	10	;
LABEL	3434:3	3434:32	9	case TIFFReadDirEntryErrPsdif :
LEAF_NODE	3434:3	3434:3	10	case
LEAF_NODE	3434:8	3434:8	10	TIFFReadDirEntryErrPsdif
LEAF_NODE	3434:32	3434:32	10	:
EXPR_STATEMENT	3435:4	3437:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle different values per sample for \"%s\"" , tagname ) ;
EXPR	3435:4	3435:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle different values per sample for \"%s\"" , tagname )
FUNCTION_CALL	3435:4	3437:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle different values per sample for \"%s\"" , tagname )
CALLEE	3435:4	3435:4	12	TIFFErrorExt
LEAF_NODE	3435:4	3435:4	13	TIFFErrorExt
LEAF_NODE	3435:16	3435:16	12	(
ARGUMENT	3435:17	3435:17	12	tif -> tif_clientdata
FIELD	3435:17	3435:22	13	tif -> tif_clientdata
LEAF_NODE	3435:17	3435:17	14	tif
LEAF_NODE	3435:20	3435:20	14	->
LEAF_NODE	3435:22	3435:22	14	tif_clientdata
LEAF_NODE	3435:36	3435:36	12	,
ARGUMENT	3435:38	3435:38	12	module
FIELD	3435:38	3435:38	13	module
LEAF_NODE	3435:38	3435:38	14	module
LEAF_NODE	3435:44	3435:44	12	,
ARGUMENT	3436:3	3436:3	12	"Cannot handle different values per sample for \"%s\""
FIELD	3436:3	3436:3	13	"Cannot handle different values per sample for \"%s\""
LEAF_NODE	3436:3	3436:3	14	"Cannot handle different values per sample for \"%s\""
LEAF_NODE	3436:57	3436:57	12	,
ARGUMENT	3437:10	3437:10	12	tagname
FIELD	3437:10	3437:10	13	tagname
LEAF_NODE	3437:10	3437:10	14	tagname
LEAF_NODE	3437:17	3437:17	12	)
LEAF_NODE	3437:18	3437:18	10	;
JUMP_STATEMENT	3438:4	3438:9	9	break DESTINATION ;
KEYWORD	3438:4	3438:4	10	break
LEAF_NODE	3438:4	3438:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3438:9	3438:9	10	;
LABEL	3439:3	3439:34	9	case TIFFReadDirEntryErrSizesan :
LEAF_NODE	3439:3	3439:3	10	case
LEAF_NODE	3439:8	3439:8	10	TIFFReadDirEntryErrSizesan
LEAF_NODE	3439:34	3439:34	10	:
EXPR_STATEMENT	3440:4	3442:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on size of \"%s\" value failed" , tagname ) ;
EXPR	3440:4	3440:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on size of \"%s\" value failed" , tagname )
FUNCTION_CALL	3440:4	3442:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on size of \"%s\" value failed" , tagname )
CALLEE	3440:4	3440:4	12	TIFFErrorExt
LEAF_NODE	3440:4	3440:4	13	TIFFErrorExt
LEAF_NODE	3440:16	3440:16	12	(
ARGUMENT	3440:17	3440:17	12	tif -> tif_clientdata
FIELD	3440:17	3440:22	13	tif -> tif_clientdata
LEAF_NODE	3440:17	3440:17	14	tif
LEAF_NODE	3440:20	3440:20	14	->
LEAF_NODE	3440:22	3440:22	14	tif_clientdata
LEAF_NODE	3440:36	3440:36	12	,
ARGUMENT	3440:38	3440:38	12	module
FIELD	3440:38	3440:38	13	module
LEAF_NODE	3440:38	3440:38	14	module
LEAF_NODE	3440:44	3440:44	12	,
ARGUMENT	3441:4	3441:4	12	"Sanity check on size of \"%s\" value failed"
FIELD	3441:4	3441:4	13	"Sanity check on size of \"%s\" value failed"
LEAF_NODE	3441:4	3441:4	14	"Sanity check on size of \"%s\" value failed"
LEAF_NODE	3441:49	3441:49	12	,
ARGUMENT	3442:10	3442:10	12	tagname
FIELD	3442:10	3442:10	13	tagname
LEAF_NODE	3442:10	3442:10	14	tagname
LEAF_NODE	3442:17	3442:17	12	)
LEAF_NODE	3442:18	3442:18	10	;
JUMP_STATEMENT	3443:4	3443:9	9	break DESTINATION ;
KEYWORD	3443:4	3443:4	10	break
LEAF_NODE	3443:4	3443:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3443:9	3443:9	10	;
LABEL	3444:3	3444:32	9	case TIFFReadDirEntryErrAlloc :
LEAF_NODE	3444:3	3444:3	10	case
LEAF_NODE	3444:8	3444:8	10	TIFFReadDirEntryErrAlloc
LEAF_NODE	3444:32	3444:32	10	:
EXPR_STATEMENT	3445:4	3447:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory reading of \"%s\"" , tagname ) ;
EXPR	3445:4	3445:4	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory reading of \"%s\"" , tagname )
FUNCTION_CALL	3445:4	3447:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Out of memory reading of \"%s\"" , tagname )
CALLEE	3445:4	3445:4	12	TIFFErrorExt
LEAF_NODE	3445:4	3445:4	13	TIFFErrorExt
LEAF_NODE	3445:16	3445:16	12	(
ARGUMENT	3445:17	3445:17	12	tif -> tif_clientdata
FIELD	3445:17	3445:22	13	tif -> tif_clientdata
LEAF_NODE	3445:17	3445:17	14	tif
LEAF_NODE	3445:20	3445:20	14	->
LEAF_NODE	3445:22	3445:22	14	tif_clientdata
LEAF_NODE	3445:36	3445:36	12	,
ARGUMENT	3445:38	3445:38	12	module
FIELD	3445:38	3445:38	13	module
LEAF_NODE	3445:38	3445:38	14	module
LEAF_NODE	3445:44	3445:44	12	,
ARGUMENT	3446:10	3446:10	12	"Out of memory reading of \"%s\""
FIELD	3446:10	3446:10	13	"Out of memory reading of \"%s\""
LEAF_NODE	3446:10	3446:10	14	"Out of memory reading of \"%s\""
LEAF_NODE	3446:43	3446:43	12	,
ARGUMENT	3447:10	3447:10	12	tagname
FIELD	3447:10	3447:10	13	tagname
LEAF_NODE	3447:10	3447:10	14	tagname
LEAF_NODE	3447:17	3447:17	12	)
LEAF_NODE	3447:18	3447:18	10	;
JUMP_STATEMENT	3448:4	3448:9	9	break DESTINATION ;
KEYWORD	3448:4	3448:4	10	break
LEAF_NODE	3448:4	3448:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3448:9	3448:9	10	;
LABEL	3449:3	3449:10	9	default :
LEAF_NODE	3449:3	3449:3	10	default
LEAF_NODE	3449:10	3449:10	10	:
EXPR_STATEMENT	3450:4	3450:13	9	assert ( 0 ) ;
EXPR	3450:4	3450:4	10	assert ( 0 )
FUNCTION_CALL	3450:4	3450:12	11	assert ( 0 )
CALLEE	3450:4	3450:4	12	assert
LEAF_NODE	3450:4	3450:4	13	assert
LEAF_NODE	3450:10	3450:10	12	(
ARGUMENT	3450:11	3450:11	12	0
FIELD	3450:11	3450:11	13	0
LEAF_NODE	3450:11	3450:11	14	0
LEAF_NODE	3450:12	3450:12	12	)
LEAF_NODE	3450:13	3450:13	10	;
JUMP_STATEMENT	3451:4	3451:9	9	break DESTINATION ;
KEYWORD	3451:4	3451:4	10	break
LEAF_NODE	3451:4	3451:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3451:9	3451:9	10	;
LEAF_NODE	3452:2	3452:2	8	}
LEAF_NODE	3453:1	3453:1	5	}
SELECTION	3453:3	3453:8	3	
KEYWORD	3453:3	3453:3	4	else
LEAF_NODE	3453:3	3453:3	5	else
STATEMENTS	3453:8	3494:1	4	
LEAF_NODE	3453:8	3453:8	5	{
STATEMENTS	3454:2	3454:2	5	
SELECTION	3454:2	3454:15	6	
KEYWORD	3454:2	3454:2	7	switch
LEAF_NODE	3454:2	3454:2	8	switch
LEAF_NODE	3454:9	3454:9	7	(
CONDITION	3454:10	3454:10	7	err
EXPR	3454:10	3454:10	8	err
FIELD	3454:10	3454:10	9	err
LEAF_NODE	3454:10	3454:10	10	err
LEAF_NODE	3454:13	3454:13	7	)
STATEMENTS	3454:15	3493:2	7	
LEAF_NODE	3454:15	3454:15	8	{
STATEMENTS	3455:3	3492:4	8	
LABEL	3455:3	3455:32	9	case TIFFReadDirEntryErrCount :
LEAF_NODE	3455:3	3455:3	10	case
LEAF_NODE	3455:8	3455:8	10	TIFFReadDirEntryErrCount
LEAF_NODE	3455:32	3455:32	10	:
EXPR_STATEMENT	3456:4	3458:18	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Incorrect count for \"%s\"; tag ignored" , tagname ) ;
EXPR	3456:4	3456:4	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Incorrect count for \"%s\"; tag ignored" , tagname )
FUNCTION_CALL	3456:4	3458:17	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Incorrect count for \"%s\"; tag ignored" , tagname )
CALLEE	3456:4	3456:4	12	TIFFWarningExt
LEAF_NODE	3456:4	3456:4	13	TIFFWarningExt
LEAF_NODE	3456:18	3456:18	12	(
ARGUMENT	3456:19	3456:19	12	tif -> tif_clientdata
FIELD	3456:19	3456:24	13	tif -> tif_clientdata
LEAF_NODE	3456:19	3456:19	14	tif
LEAF_NODE	3456:22	3456:22	14	->
LEAF_NODE	3456:24	3456:24	14	tif_clientdata
LEAF_NODE	3456:38	3456:38	12	,
ARGUMENT	3456:40	3456:40	12	module
FIELD	3456:40	3456:40	13	module
LEAF_NODE	3456:40	3456:40	14	module
LEAF_NODE	3456:46	3456:46	12	,
ARGUMENT	3457:4	3457:4	12	"Incorrect count for \"%s\"; tag ignored"
FIELD	3457:4	3457:4	13	"Incorrect count for \"%s\"; tag ignored"
LEAF_NODE	3457:4	3457:4	14	"Incorrect count for \"%s\"; tag ignored"
LEAF_NODE	3457:45	3457:45	12	,
ARGUMENT	3458:10	3458:10	12	tagname
FIELD	3458:10	3458:10	13	tagname
LEAF_NODE	3458:10	3458:10	14	tagname
LEAF_NODE	3458:17	3458:17	12	)
LEAF_NODE	3458:18	3458:18	10	;
JUMP_STATEMENT	3459:4	3459:9	9	break DESTINATION ;
KEYWORD	3459:4	3459:4	10	break
LEAF_NODE	3459:4	3459:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3459:9	3459:9	10	;
LABEL	3460:3	3460:31	9	case TIFFReadDirEntryErrType :
LEAF_NODE	3460:3	3460:3	10	case
LEAF_NODE	3460:8	3460:8	10	TIFFReadDirEntryErrType
LEAF_NODE	3460:31	3460:31	10	:
EXPR_STATEMENT	3461:4	3463:20	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Incompatible type for \"%s\"; tag ignored" , tagname ) ;
EXPR	3461:4	3461:4	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Incompatible type for \"%s\"; tag ignored" , tagname )
FUNCTION_CALL	3461:4	3463:19	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Incompatible type for \"%s\"; tag ignored" , tagname )
CALLEE	3461:4	3461:4	12	TIFFWarningExt
LEAF_NODE	3461:4	3461:4	13	TIFFWarningExt
LEAF_NODE	3461:18	3461:18	12	(
ARGUMENT	3461:19	3461:19	12	tif -> tif_clientdata
FIELD	3461:19	3461:24	13	tif -> tif_clientdata
LEAF_NODE	3461:19	3461:19	14	tif
LEAF_NODE	3461:22	3461:22	14	->
LEAF_NODE	3461:24	3461:24	14	tif_clientdata
LEAF_NODE	3461:38	3461:38	12	,
ARGUMENT	3461:40	3461:40	12	module
FIELD	3461:40	3461:40	13	module
LEAF_NODE	3461:40	3461:40	14	module
LEAF_NODE	3461:46	3461:46	12	,
ARGUMENT	3462:4	3462:4	12	"Incompatible type for \"%s\"; tag ignored"
FIELD	3462:4	3462:4	13	"Incompatible type for \"%s\"; tag ignored"
LEAF_NODE	3462:4	3462:4	14	"Incompatible type for \"%s\"; tag ignored"
LEAF_NODE	3462:47	3462:47	12	,
ARGUMENT	3463:12	3463:12	12	tagname
FIELD	3463:12	3463:12	13	tagname
LEAF_NODE	3463:12	3463:12	14	tagname
LEAF_NODE	3463:19	3463:19	12	)
LEAF_NODE	3463:20	3463:20	10	;
JUMP_STATEMENT	3464:4	3464:9	9	break DESTINATION ;
KEYWORD	3464:4	3464:4	10	break
LEAF_NODE	3464:4	3464:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3464:9	3464:9	10	;
LABEL	3465:3	3465:29	9	case TIFFReadDirEntryErrIo :
LEAF_NODE	3465:3	3465:3	10	case
LEAF_NODE	3465:8	3465:8	10	TIFFReadDirEntryErrIo
LEAF_NODE	3465:29	3465:29	10	:
EXPR_STATEMENT	3466:4	3468:20	9	TIFFWarningExt ( tif -> tif_clientdata , module , "IO error during reading of \"%s\"; tag ignored" , tagname ) ;
EXPR	3466:4	3466:4	10	TIFFWarningExt ( tif -> tif_clientdata , module , "IO error during reading of \"%s\"; tag ignored" , tagname )
FUNCTION_CALL	3466:4	3468:19	11	TIFFWarningExt ( tif -> tif_clientdata , module , "IO error during reading of \"%s\"; tag ignored" , tagname )
CALLEE	3466:4	3466:4	12	TIFFWarningExt
LEAF_NODE	3466:4	3466:4	13	TIFFWarningExt
LEAF_NODE	3466:18	3466:18	12	(
ARGUMENT	3466:19	3466:19	12	tif -> tif_clientdata
FIELD	3466:19	3466:24	13	tif -> tif_clientdata
LEAF_NODE	3466:19	3466:19	14	tif
LEAF_NODE	3466:22	3466:22	14	->
LEAF_NODE	3466:24	3466:24	14	tif_clientdata
LEAF_NODE	3466:38	3466:38	12	,
ARGUMENT	3466:40	3466:40	12	module
FIELD	3466:40	3466:40	13	module
LEAF_NODE	3466:40	3466:40	14	module
LEAF_NODE	3466:46	3466:46	12	,
ARGUMENT	3467:3	3467:3	12	"IO error during reading of \"%s\"; tag ignored"
FIELD	3467:3	3467:3	13	"IO error during reading of \"%s\"; tag ignored"
LEAF_NODE	3467:3	3467:3	14	"IO error during reading of \"%s\"; tag ignored"
LEAF_NODE	3467:51	3467:51	12	,
ARGUMENT	3468:12	3468:12	12	tagname
FIELD	3468:12	3468:12	13	tagname
LEAF_NODE	3468:12	3468:12	14	tagname
LEAF_NODE	3468:19	3468:19	12	)
LEAF_NODE	3468:20	3468:20	10	;
JUMP_STATEMENT	3469:4	3469:9	9	break DESTINATION ;
KEYWORD	3469:4	3469:4	10	break
LEAF_NODE	3469:4	3469:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3469:9	3469:9	10	;
LABEL	3470:3	3470:32	9	case TIFFReadDirEntryErrRange :
LEAF_NODE	3470:3	3470:3	10	case
LEAF_NODE	3470:8	3470:8	10	TIFFReadDirEntryErrRange
LEAF_NODE	3470:32	3470:32	10	:
EXPR_STATEMENT	3471:4	3473:20	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Incorrect value for \"%s\"; tag ignored" , tagname ) ;
EXPR	3471:4	3471:4	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Incorrect value for \"%s\"; tag ignored" , tagname )
FUNCTION_CALL	3471:4	3473:19	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Incorrect value for \"%s\"; tag ignored" , tagname )
CALLEE	3471:4	3471:4	12	TIFFWarningExt
LEAF_NODE	3471:4	3471:4	13	TIFFWarningExt
LEAF_NODE	3471:18	3471:18	12	(
ARGUMENT	3471:19	3471:19	12	tif -> tif_clientdata
FIELD	3471:19	3471:24	13	tif -> tif_clientdata
LEAF_NODE	3471:19	3471:19	14	tif
LEAF_NODE	3471:22	3471:22	14	->
LEAF_NODE	3471:24	3471:24	14	tif_clientdata
LEAF_NODE	3471:38	3471:38	12	,
ARGUMENT	3471:40	3471:40	12	module
FIELD	3471:40	3471:40	13	module
LEAF_NODE	3471:40	3471:40	14	module
LEAF_NODE	3471:46	3471:46	12	,
ARGUMENT	3472:4	3472:4	12	"Incorrect value for \"%s\"; tag ignored"
FIELD	3472:4	3472:4	13	"Incorrect value for \"%s\"; tag ignored"
LEAF_NODE	3472:4	3472:4	14	"Incorrect value for \"%s\"; tag ignored"
LEAF_NODE	3472:45	3472:45	12	,
ARGUMENT	3473:12	3473:12	12	tagname
FIELD	3473:12	3473:12	13	tagname
LEAF_NODE	3473:12	3473:12	14	tagname
LEAF_NODE	3473:19	3473:19	12	)
LEAF_NODE	3473:20	3473:20	10	;
JUMP_STATEMENT	3474:4	3474:9	9	break DESTINATION ;
KEYWORD	3474:4	3474:4	10	break
LEAF_NODE	3474:4	3474:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3474:9	3474:9	10	;
LABEL	3475:3	3475:32	9	case TIFFReadDirEntryErrPsdif :
LEAF_NODE	3475:3	3475:3	10	case
LEAF_NODE	3475:8	3475:8	10	TIFFReadDirEntryErrPsdif
LEAF_NODE	3475:32	3475:32	10	:
EXPR_STATEMENT	3476:4	3478:20	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Cannot handle different values per sample for \"%s\"; tag ignored" , tagname ) ;
EXPR	3476:4	3476:4	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Cannot handle different values per sample for \"%s\"; tag ignored" , tagname )
FUNCTION_CALL	3476:4	3478:19	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Cannot handle different values per sample for \"%s\"; tag ignored" , tagname )
CALLEE	3476:4	3476:4	12	TIFFWarningExt
LEAF_NODE	3476:4	3476:4	13	TIFFWarningExt
LEAF_NODE	3476:18	3476:18	12	(
ARGUMENT	3476:19	3476:19	12	tif -> tif_clientdata
FIELD	3476:19	3476:24	13	tif -> tif_clientdata
LEAF_NODE	3476:19	3476:19	14	tif
LEAF_NODE	3476:22	3476:22	14	->
LEAF_NODE	3476:24	3476:24	14	tif_clientdata
LEAF_NODE	3476:38	3476:38	12	,
ARGUMENT	3476:40	3476:40	12	module
FIELD	3476:40	3476:40	13	module
LEAF_NODE	3476:40	3476:40	14	module
LEAF_NODE	3476:46	3476:46	12	,
ARGUMENT	3477:1	3477:1	12	"Cannot handle different values per sample for \"%s\"; tag ignored"
FIELD	3477:1	3477:1	13	"Cannot handle different values per sample for \"%s\"; tag ignored"
LEAF_NODE	3477:1	3477:1	14	"Cannot handle different values per sample for \"%s\"; tag ignored"
LEAF_NODE	3477:68	3477:68	12	,
ARGUMENT	3478:12	3478:12	12	tagname
FIELD	3478:12	3478:12	13	tagname
LEAF_NODE	3478:12	3478:12	14	tagname
LEAF_NODE	3478:19	3478:19	12	)
LEAF_NODE	3478:20	3478:20	10	;
JUMP_STATEMENT	3479:4	3479:9	9	break DESTINATION ;
KEYWORD	3479:4	3479:4	10	break
LEAF_NODE	3479:4	3479:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3479:9	3479:9	10	;
LABEL	3480:3	3480:34	9	case TIFFReadDirEntryErrSizesan :
LEAF_NODE	3480:3	3480:3	10	case
LEAF_NODE	3480:8	3480:8	10	TIFFReadDirEntryErrSizesan
LEAF_NODE	3480:34	3480:34	10	:
EXPR_STATEMENT	3481:4	3483:20	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Sanity check on size of \"%s\" value failed; tag ignored" , tagname ) ;
EXPR	3481:4	3481:4	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Sanity check on size of \"%s\" value failed; tag ignored" , tagname )
FUNCTION_CALL	3481:4	3483:19	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Sanity check on size of \"%s\" value failed; tag ignored" , tagname )
CALLEE	3481:4	3481:4	12	TIFFWarningExt
LEAF_NODE	3481:4	3481:4	13	TIFFWarningExt
LEAF_NODE	3481:18	3481:18	12	(
ARGUMENT	3481:19	3481:19	12	tif -> tif_clientdata
FIELD	3481:19	3481:24	13	tif -> tif_clientdata
LEAF_NODE	3481:19	3481:19	14	tif
LEAF_NODE	3481:22	3481:22	14	->
LEAF_NODE	3481:24	3481:24	14	tif_clientdata
LEAF_NODE	3481:38	3481:38	12	,
ARGUMENT	3481:40	3481:40	12	module
FIELD	3481:40	3481:40	13	module
LEAF_NODE	3481:40	3481:40	14	module
LEAF_NODE	3481:46	3481:46	12	,
ARGUMENT	3482:2	3482:2	12	"Sanity check on size of \"%s\" value failed; tag ignored"
FIELD	3482:2	3482:2	13	"Sanity check on size of \"%s\" value failed; tag ignored"
LEAF_NODE	3482:2	3482:2	14	"Sanity check on size of \"%s\" value failed; tag ignored"
LEAF_NODE	3482:60	3482:60	12	,
ARGUMENT	3483:12	3483:12	12	tagname
FIELD	3483:12	3483:12	13	tagname
LEAF_NODE	3483:12	3483:12	14	tagname
LEAF_NODE	3483:19	3483:19	12	)
LEAF_NODE	3483:20	3483:20	10	;
JUMP_STATEMENT	3484:4	3484:9	9	break DESTINATION ;
KEYWORD	3484:4	3484:4	10	break
LEAF_NODE	3484:4	3484:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3484:9	3484:9	10	;
LABEL	3485:3	3485:32	9	case TIFFReadDirEntryErrAlloc :
LEAF_NODE	3485:3	3485:3	10	case
LEAF_NODE	3485:8	3485:8	10	TIFFReadDirEntryErrAlloc
LEAF_NODE	3485:32	3485:32	10	:
EXPR_STATEMENT	3486:4	3488:20	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Out of memory reading of \"%s\"; tag ignored" , tagname ) ;
EXPR	3486:4	3486:4	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Out of memory reading of \"%s\"; tag ignored" , tagname )
FUNCTION_CALL	3486:4	3488:19	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Out of memory reading of \"%s\"; tag ignored" , tagname )
CALLEE	3486:4	3486:4	12	TIFFWarningExt
LEAF_NODE	3486:4	3486:4	13	TIFFWarningExt
LEAF_NODE	3486:18	3486:18	12	(
ARGUMENT	3486:19	3486:19	12	tif -> tif_clientdata
FIELD	3486:19	3486:24	13	tif -> tif_clientdata
LEAF_NODE	3486:19	3486:19	14	tif
LEAF_NODE	3486:22	3486:22	14	->
LEAF_NODE	3486:24	3486:24	14	tif_clientdata
LEAF_NODE	3486:38	3486:38	12	,
ARGUMENT	3486:40	3486:40	12	module
FIELD	3486:40	3486:40	13	module
LEAF_NODE	3486:40	3486:40	14	module
LEAF_NODE	3486:46	3486:46	12	,
ARGUMENT	3487:4	3487:4	12	"Out of memory reading of \"%s\"; tag ignored"
FIELD	3487:4	3487:4	13	"Out of memory reading of \"%s\"; tag ignored"
LEAF_NODE	3487:4	3487:4	14	"Out of memory reading of \"%s\"; tag ignored"
LEAF_NODE	3487:50	3487:50	12	,
ARGUMENT	3488:12	3488:12	12	tagname
FIELD	3488:12	3488:12	13	tagname
LEAF_NODE	3488:12	3488:12	14	tagname
LEAF_NODE	3488:19	3488:19	12	)
LEAF_NODE	3488:20	3488:20	10	;
JUMP_STATEMENT	3489:4	3489:9	9	break DESTINATION ;
KEYWORD	3489:4	3489:4	10	break
LEAF_NODE	3489:4	3489:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3489:9	3489:9	10	;
LABEL	3490:3	3490:10	9	default :
LEAF_NODE	3490:3	3490:3	10	default
LEAF_NODE	3490:10	3490:10	10	:
EXPR_STATEMENT	3491:4	3491:13	9	assert ( 0 ) ;
EXPR	3491:4	3491:4	10	assert ( 0 )
FUNCTION_CALL	3491:4	3491:12	11	assert ( 0 )
CALLEE	3491:4	3491:4	12	assert
LEAF_NODE	3491:4	3491:4	13	assert
LEAF_NODE	3491:10	3491:10	12	(
ARGUMENT	3491:11	3491:11	12	0
FIELD	3491:11	3491:11	13	0
LEAF_NODE	3491:11	3491:11	14	0
LEAF_NODE	3491:12	3491:12	12	)
LEAF_NODE	3491:13	3491:13	10	;
JUMP_STATEMENT	3492:4	3492:9	9	break DESTINATION ;
KEYWORD	3492:4	3492:4	10	break
LEAF_NODE	3492:4	3492:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	3492:9	3492:9	10	;
LEAF_NODE	3493:2	3493:2	8	}
LEAF_NODE	3494:1	3494:1	5	}
LEAF_NODE	3495:0	3495:0	2	}
FUNCTION_DEF	3502:0	3524:0	1	
RETURN_TYPE	3502:0	3502:7	2	static int
LEAF_NODE	3502:0	3502:0	3	static
TYPE_NAME	3502:7	3502:7	3	int
LEAF_NODE	3502:7	3502:7	4	int
FUNCTION_NAME	3502:11	3502:11	2	_TIFFGetMaxColorChannels
LEAF_NODE	3502:11	3502:11	3	_TIFFGetMaxColorChannels
PARAMETER_LIST	3502:35	3502:56	2	( uint16 photometric )
LEAF_NODE	3502:35	3502:35	3	(
PARAMETER_DECL	3502:37	3502:44	3	uint16 photometric
TYPE	3502:37	3502:37	4	uint16
TYPE_NAME	3502:37	3502:37	5	uint16
LEAF_NODE	3502:37	3502:37	6	uint16
NAME	3502:44	3502:44	4	photometric
LEAF_NODE	3502:44	3502:44	5	photometric
LEAF_NODE	3502:56	3502:56	3	)
LEAF_NODE	3503:0	3503:0	2	{
STATEMENTS	3504:4	3504:4	2	
SELECTION	3504:4	3504:25	3	
KEYWORD	3504:4	3504:4	4	switch
LEAF_NODE	3504:4	3504:4	5	switch
LEAF_NODE	3504:11	3504:11	4	(
CONDITION	3504:12	3504:12	4	photometric
EXPR	3504:12	3504:12	5	photometric
FIELD	3504:12	3504:12	6	photometric
LEAF_NODE	3504:12	3504:12	7	photometric
LEAF_NODE	3504:23	3504:23	4	)
STATEMENTS	3504:25	3523:4	4	
LEAF_NODE	3504:25	3504:25	5	{
STATEMENTS	3505:1	3522:12	5	
LABEL	3505:1	3505:25	6	case PHOTOMETRIC_PALETTE :
LEAF_NODE	3505:1	3505:1	7	case
LEAF_NODE	3505:6	3505:6	7	PHOTOMETRIC_PALETTE
LEAF_NODE	3505:25	3505:25	7	:
LABEL	3506:1	3506:28	6	case PHOTOMETRIC_MINISWHITE :
LEAF_NODE	3506:1	3506:1	7	case
LEAF_NODE	3506:6	3506:6	7	PHOTOMETRIC_MINISWHITE
LEAF_NODE	3506:28	3506:28	7	:
LABEL	3507:1	3507:28	6	case PHOTOMETRIC_MINISBLACK :
LEAF_NODE	3507:1	3507:1	7	case
LEAF_NODE	3507:6	3507:6	7	PHOTOMETRIC_MINISBLACK
LEAF_NODE	3507:28	3507:28	7	:
JUMP_STATEMENT	3508:12	3508:20	6	return 1 ;
KEYWORD	3508:12	3508:12	7	return
LEAF_NODE	3508:12	3508:12	8	return
DESTINATION	3508:19	3508:19	7	1
EXPR	3508:19	3508:19	8	1
FIELD	3508:19	3508:19	9	1
LEAF_NODE	3508:19	3508:19	10	1
LEAF_NODE	3508:20	3508:20	7	;
LABEL	3509:1	3509:23	6	case PHOTOMETRIC_YCBCR :
LEAF_NODE	3509:1	3509:1	7	case
LEAF_NODE	3509:6	3509:6	7	PHOTOMETRIC_YCBCR
LEAF_NODE	3509:23	3509:23	7	:
LABEL	3510:1	3510:21	6	case PHOTOMETRIC_RGB :
LEAF_NODE	3510:1	3510:1	7	case
LEAF_NODE	3510:6	3510:6	7	PHOTOMETRIC_RGB
LEAF_NODE	3510:21	3510:21	7	:
LABEL	3511:1	3511:24	6	case PHOTOMETRIC_CIELAB :
LEAF_NODE	3511:1	3511:1	7	case
LEAF_NODE	3511:6	3511:6	7	PHOTOMETRIC_CIELAB
LEAF_NODE	3511:24	3511:24	7	:
LABEL	3512:1	3512:24	6	case PHOTOMETRIC_LOGLUV :
LEAF_NODE	3512:1	3512:1	7	case
LEAF_NODE	3512:6	3512:6	7	PHOTOMETRIC_LOGLUV
LEAF_NODE	3512:24	3512:24	7	:
LABEL	3513:1	3513:24	6	case PHOTOMETRIC_ITULAB :
LEAF_NODE	3513:1	3513:1	7	case
LEAF_NODE	3513:6	3513:6	7	PHOTOMETRIC_ITULAB
LEAF_NODE	3513:24	3513:24	7	:
LABEL	3514:1	3514:24	6	case PHOTOMETRIC_ICCLAB :
LEAF_NODE	3514:1	3514:1	7	case
LEAF_NODE	3514:6	3514:6	7	PHOTOMETRIC_ICCLAB
LEAF_NODE	3514:24	3514:24	7	:
JUMP_STATEMENT	3515:12	3515:20	6	return 3 ;
KEYWORD	3515:12	3515:12	7	return
LEAF_NODE	3515:12	3515:12	8	return
DESTINATION	3515:19	3515:19	7	3
EXPR	3515:19	3515:19	8	3
FIELD	3515:19	3515:19	9	3
LEAF_NODE	3515:19	3515:19	10	3
LEAF_NODE	3515:20	3515:20	7	;
LABEL	3516:1	3516:27	6	case PHOTOMETRIC_SEPARATED :
LEAF_NODE	3516:1	3516:1	7	case
LEAF_NODE	3516:6	3516:6	7	PHOTOMETRIC_SEPARATED
LEAF_NODE	3516:27	3516:27	7	:
LABEL	3517:1	3517:22	6	case PHOTOMETRIC_MASK :
LEAF_NODE	3517:1	3517:1	7	case
LEAF_NODE	3517:6	3517:6	7	PHOTOMETRIC_MASK
LEAF_NODE	3517:22	3517:22	7	:
JUMP_STATEMENT	3518:12	3518:20	6	return 4 ;
KEYWORD	3518:12	3518:12	7	return
LEAF_NODE	3518:12	3518:12	8	return
DESTINATION	3518:19	3518:19	7	4
EXPR	3518:19	3518:19	8	4
FIELD	3518:19	3518:19	9	4
LEAF_NODE	3518:19	3518:19	10	4
LEAF_NODE	3518:20	3518:20	7	;
LABEL	3519:1	3519:22	6	case PHOTOMETRIC_LOGL :
LEAF_NODE	3519:1	3519:1	7	case
LEAF_NODE	3519:6	3519:6	7	PHOTOMETRIC_LOGL
LEAF_NODE	3519:22	3519:22	7	:
LABEL	3520:1	3520:21	6	case PHOTOMETRIC_CFA :
LEAF_NODE	3520:1	3520:1	7	case
LEAF_NODE	3520:6	3520:6	7	PHOTOMETRIC_CFA
LEAF_NODE	3520:21	3520:21	7	:
LABEL	3521:1	3521:8	6	default :
LEAF_NODE	3521:1	3521:1	7	default
LEAF_NODE	3521:8	3521:8	7	:
JUMP_STATEMENT	3522:12	3522:20	6	return 0 ;
KEYWORD	3522:12	3522:12	7	return
LEAF_NODE	3522:12	3522:12	8	return
DESTINATION	3522:19	3522:19	7	0
EXPR	3522:19	3522:19	8	0
FIELD	3522:19	3522:19	9	0
LEAF_NODE	3522:19	3522:19	10	0
LEAF_NODE	3522:20	3522:20	7	;
LEAF_NODE	3523:4	3523:4	5	}
LEAF_NODE	3524:0	3524:0	2	}
FUNCTION_DEF	3526:0	3566:0	1	
RETURN_TYPE	3526:0	3526:7	2	static int
LEAF_NODE	3526:0	3526:0	3	static
TYPE_NAME	3526:7	3526:7	3	int
LEAF_NODE	3526:7	3526:7	4	int
FUNCTION_NAME	3526:11	3526:11	2	ByteCountLooksBad
LEAF_NODE	3526:11	3526:11	3	ByteCountLooksBad
PARAMETER_LIST	3526:28	3526:38	2	( TIFF * tif )
LEAF_NODE	3526:28	3526:28	3	(
PARAMETER_DECL	3526:29	3526:35	3	TIFF * tif
TYPE	3526:29	3526:33	4	TIFF *
TYPE_NAME	3526:29	3526:29	5	TIFF
LEAF_NODE	3526:29	3526:29	6	TIFF
POINTER	3526:33	3526:33	5	*
LEAF_NODE	3526:33	3526:33	6	*
NAME	3526:35	3526:35	4	tif
LEAF_NODE	3526:35	3526:35	5	tif
LEAF_NODE	3526:38	3526:38	3	)
LEAF_NODE	3527:0	3527:0	2	{
STATEMENTS	3541:4	3565:4	2	
SIMPLE_DECL	3541:4	3541:53	3	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , 0 ) ;
VAR_DECL	3541:4	3541:11	4	uint64 bytecount ; bytecount = TIFFGetStrileByteCount ( tif , 0 )
TYPE	3541:4	3541:4	5	uint64
TYPE_NAME	3541:4	3541:4	6	uint64
LEAF_NODE	3541:4	3541:4	7	uint64
NAME	3541:11	3541:11	5	bytecount
LEAF_NODE	3541:11	3541:11	6	bytecount
LEAF_NODE	0:0	0:0	5	;
INIT	3541:11	3541:11	5	bytecount = TIFFGetStrileByteCount ( tif , 0 )
ASSIGN	3541:11	3541:23	6	bytecount = TIFFGetStrileByteCount ( tif , 0 )
LVAL	3541:11	3541:11	7	bytecount
NAME	3541:11	3541:11	8	bytecount
LEAF_NODE	3541:11	3541:11	9	bytecount
ASSIGN_OP	3541:21	3541:21	7	=
LEAF_NODE	3541:21	3541:21	8	=
RVAL	3541:23	3541:23	7	TIFFGetStrileByteCount ( tif , 0 )
FUNCTION_CALL	3541:23	3541:52	8	TIFFGetStrileByteCount ( tif , 0 )
CALLEE	3541:23	3541:23	9	TIFFGetStrileByteCount
LEAF_NODE	3541:23	3541:23	10	TIFFGetStrileByteCount
LEAF_NODE	3541:45	3541:45	9	(
ARGUMENT	3541:46	3541:46	9	tif
FIELD	3541:46	3541:46	10	tif
LEAF_NODE	3541:46	3541:46	11	tif
LEAF_NODE	3541:49	3541:49	9	,
ARGUMENT	3541:51	3541:51	9	0
FIELD	3541:51	3541:51	10	0
LEAF_NODE	3541:51	3541:51	11	0
LEAF_NODE	3541:52	3541:52	9	)
LEAF_NODE	3541:53	3541:53	4	;
SIMPLE_DECL	3542:4	3542:47	3	uint64 offset ; offset = TIFFGetStrileOffset ( tif , 0 ) ;
VAR_DECL	3542:4	3542:11	4	uint64 offset ; offset = TIFFGetStrileOffset ( tif , 0 )
TYPE	3542:4	3542:4	5	uint64
TYPE_NAME	3542:4	3542:4	6	uint64
LEAF_NODE	3542:4	3542:4	7	uint64
NAME	3542:11	3542:11	5	offset
LEAF_NODE	3542:11	3542:11	6	offset
LEAF_NODE	0:0	0:0	5	;
INIT	3542:11	3542:11	5	offset = TIFFGetStrileOffset ( tif , 0 )
ASSIGN	3542:11	3542:20	6	offset = TIFFGetStrileOffset ( tif , 0 )
LVAL	3542:11	3542:11	7	offset
NAME	3542:11	3542:11	8	offset
LEAF_NODE	3542:11	3542:11	9	offset
ASSIGN_OP	3542:18	3542:18	7	=
LEAF_NODE	3542:18	3542:18	8	=
RVAL	3542:20	3542:20	7	TIFFGetStrileOffset ( tif , 0 )
FUNCTION_CALL	3542:20	3542:46	8	TIFFGetStrileOffset ( tif , 0 )
CALLEE	3542:20	3542:20	9	TIFFGetStrileOffset
LEAF_NODE	3542:20	3542:20	10	TIFFGetStrileOffset
LEAF_NODE	3542:39	3542:39	9	(
ARGUMENT	3542:40	3542:40	9	tif
FIELD	3542:40	3542:40	10	tif
LEAF_NODE	3542:40	3542:40	11	tif
LEAF_NODE	3542:43	3542:43	9	,
ARGUMENT	3542:45	3542:45	9	0
FIELD	3542:45	3542:45	10	0
LEAF_NODE	3542:45	3542:45	11	0
LEAF_NODE	3542:46	3542:46	9	)
LEAF_NODE	3542:47	3542:47	4	;
SIMPLE_DECL	3543:4	3543:19	3	uint64 filesize ;
VAR_DECL	3543:4	3543:11	4	uint64 filesize
TYPE	3543:4	3543:4	5	uint64
TYPE_NAME	3543:4	3543:4	6	uint64
LEAF_NODE	3543:4	3543:4	7	uint64
NAME	3543:11	3543:11	5	filesize
LEAF_NODE	3543:11	3543:11	6	filesize
LEAF_NODE	3543:19	3543:19	4	;
SELECTION	3545:4	3546:8	3	
KEYWORD	3545:4	3545:4	4	if
LEAF_NODE	3545:4	3545:4	5	if
LEAF_NODE	3545:6	3545:6	4	(
CONDITION	3545:8	3545:8	4	offset == 0
EXPR	3545:8	3545:18	5	offset == 0
FIELD	3545:8	3545:8	6	offset
LEAF_NODE	3545:8	3545:8	7	offset
EQ_OPERATOR	3545:15	3545:15	6	==
LEAF_NODE	3545:15	3545:15	7	==
FIELD	3545:18	3545:18	6	0
LEAF_NODE	3545:18	3545:18	7	0
LEAF_NODE	3545:20	3545:20	4	)
STATEMENTS	3546:8	3546:8	4	
JUMP_STATEMENT	3546:8	3546:16	5	return 0 ;
KEYWORD	3546:8	3546:8	6	return
LEAF_NODE	3546:8	3546:8	7	return
DESTINATION	3546:15	3546:15	6	0
EXPR	3546:15	3546:15	7	0
FIELD	3546:15	3546:15	8	0
LEAF_NODE	3546:15	3546:15	9	0
LEAF_NODE	3546:16	3546:16	6	;
SELECTION	3547:4	3548:8	3	
KEYWORD	3547:4	3547:4	4	if
LEAF_NODE	3547:4	3547:4	5	if
LEAF_NODE	3547:7	3547:7	4	(
CONDITION	3547:8	3547:8	4	bytecount == 0
EXPR	3547:8	3547:21	5	bytecount == 0
FIELD	3547:8	3547:8	6	bytecount
LEAF_NODE	3547:8	3547:8	7	bytecount
EQ_OPERATOR	3547:18	3547:18	6	==
LEAF_NODE	3547:18	3547:18	7	==
FIELD	3547:21	3547:21	6	0
LEAF_NODE	3547:21	3547:21	7	0
LEAF_NODE	3547:22	3547:22	4	)
STATEMENTS	3548:8	3548:8	4	
JUMP_STATEMENT	3548:8	3548:16	5	return 1 ;
KEYWORD	3548:8	3548:8	6	return
LEAF_NODE	3548:8	3548:8	7	return
DESTINATION	3548:15	3548:15	6	1
EXPR	3548:15	3548:15	7	1
FIELD	3548:15	3548:15	8	1
LEAF_NODE	3548:15	3548:15	9	1
LEAF_NODE	3548:16	3548:16	6	;
SELECTION	3549:4	3550:8	3	
KEYWORD	3549:4	3549:4	4	if
LEAF_NODE	3549:4	3549:4	5	if
LEAF_NODE	3549:7	3549:7	4	(
CONDITION	3549:9	3549:9	4	tif -> tif_dir . td_compression != COMPRESSION_NONE
EXPR	3549:9	3549:40	5	tif -> tif_dir . td_compression != COMPRESSION_NONE
FIELD	3549:9	3549:22	6	tif -> tif_dir . td_compression
LEAF_NODE	3549:9	3549:9	7	tif
LEAF_NODE	3549:12	3549:12	7	->
LEAF_NODE	3549:14	3549:14	7	tif_dir
LEAF_NODE	3549:21	3549:21	7	.
LEAF_NODE	3549:22	3549:22	7	td_compression
EQ_OPERATOR	3549:37	3549:37	6	!=
LEAF_NODE	3549:37	3549:37	7	!=
FIELD	3549:40	3549:40	6	COMPRESSION_NONE
LEAF_NODE	3549:40	3549:40	7	COMPRESSION_NONE
LEAF_NODE	3549:57	3549:57	4	)
STATEMENTS	3550:8	3550:8	4	
JUMP_STATEMENT	3550:8	3550:16	5	return 0 ;
KEYWORD	3550:8	3550:8	6	return
LEAF_NODE	3550:8	3550:8	7	return
DESTINATION	3550:15	3550:15	6	0
EXPR	3550:15	3550:15	7	0
FIELD	3550:15	3550:15	8	0
LEAF_NODE	3550:15	3550:15	9	0
LEAF_NODE	3550:16	3550:16	6	;
EXPR_STATEMENT	3551:4	3551:35	3	filesize = TIFFGetFileSize ( tif ) ;
EXPR	3551:4	3551:4	4	filesize = TIFFGetFileSize ( tif )
ASSIGN	3551:4	3551:15	5	filesize = TIFFGetFileSize ( tif )
LVAL	3551:4	3551:4	6	filesize
FIELD	3551:4	3551:4	7	filesize
LEAF_NODE	3551:4	3551:4	8	filesize
ASSIGN_OP	3551:13	3551:13	6	=
LEAF_NODE	3551:13	3551:13	7	=
RVAL	3551:15	3551:15	6	TIFFGetFileSize ( tif )
FUNCTION_CALL	3551:15	3551:34	7	TIFFGetFileSize ( tif )
CALLEE	3551:15	3551:15	8	TIFFGetFileSize
LEAF_NODE	3551:15	3551:15	9	TIFFGetFileSize
LEAF_NODE	3551:30	3551:30	8	(
ARGUMENT	3551:31	3551:31	8	tif
FIELD	3551:31	3551:31	9	tif
LEAF_NODE	3551:31	3551:31	10	tif
LEAF_NODE	3551:34	3551:34	8	)
LEAF_NODE	3551:35	3551:35	4	;
SELECTION	3552:4	3553:8	3	
KEYWORD	3552:4	3552:4	4	if
LEAF_NODE	3552:4	3552:4	5	if
LEAF_NODE	3552:6	3552:6	4	(
CONDITION	3552:8	3552:8	4	offset <= filesize && bytecount > filesize - offset
EXPR	3552:8	3552:8	5	offset <= filesize && bytecount > filesize - offset
AND	3552:8	3552:30	6	offset <= filesize && bytecount > filesize - offset
EXPR	3552:8	3552:18	7	offset <= filesize
FIELD	3552:8	3552:8	8	offset
LEAF_NODE	3552:8	3552:8	9	offset
REL_OPERATOR	3552:15	3552:15	8	<=
LEAF_NODE	3552:15	3552:15	9	<=
FIELD	3552:18	3552:18	8	filesize
LEAF_NODE	3552:18	3552:18	9	filesize
LEAF_NODE	3552:27	3552:27	7	&&
EXPR	3552:30	3552:53	7	bytecount > filesize - offset
FIELD	3552:30	3552:30	8	bytecount
LEAF_NODE	3552:30	3552:30	9	bytecount
REL_OPERATOR	3552:40	3552:40	8	>
LEAF_NODE	3552:40	3552:40	9	>
FIELD	3552:42	3552:42	8	filesize
LEAF_NODE	3552:42	3552:42	9	filesize
LEAF_NODE	3552:51	3552:51	8	-
FIELD	3552:53	3552:53	8	offset
LEAF_NODE	3552:53	3552:53	9	offset
LEAF_NODE	3552:60	3552:60	4	)
STATEMENTS	3553:8	3553:8	4	
JUMP_STATEMENT	3553:8	3553:16	5	return 1 ;
KEYWORD	3553:8	3553:8	6	return
LEAF_NODE	3553:8	3553:8	7	return
DESTINATION	3553:15	3553:15	6	1
EXPR	3553:15	3553:15	7	1
FIELD	3553:15	3553:15	8	1
LEAF_NODE	3553:15	3553:15	9	1
LEAF_NODE	3553:16	3553:16	6	;
SELECTION	3554:4	3555:4	3	
KEYWORD	3554:4	3554:4	4	if
LEAF_NODE	3554:4	3554:4	5	if
LEAF_NODE	3554:6	3554:6	4	(
CONDITION	3554:8	3554:8	4	tif -> tif_mode == O_RDONLY
EXPR	3554:8	3554:25	5	tif -> tif_mode == O_RDONLY
FIELD	3554:8	3554:13	6	tif -> tif_mode
LEAF_NODE	3554:8	3554:8	7	tif
LEAF_NODE	3554:11	3554:11	7	->
LEAF_NODE	3554:13	3554:13	7	tif_mode
EQ_OPERATOR	3554:22	3554:22	6	==
LEAF_NODE	3554:22	3554:22	7	==
FIELD	3554:25	3554:25	6	O_RDONLY
LEAF_NODE	3554:25	3554:25	7	O_RDONLY
LEAF_NODE	3554:34	3554:34	4	)
STATEMENTS	3555:4	3564:4	4	
LEAF_NODE	3555:4	3555:4	5	{
STATEMENTS	3556:8	3562:8	5	
SIMPLE_DECL	3556:8	3556:53	6	uint64 scanlinesize ; scanlinesize = TIFFScanlineSize64 ( tif ) ;
VAR_DECL	3556:8	3556:15	7	uint64 scanlinesize ; scanlinesize = TIFFScanlineSize64 ( tif )
TYPE	3556:8	3556:8	8	uint64
TYPE_NAME	3556:8	3556:8	9	uint64
LEAF_NODE	3556:8	3556:8	10	uint64
NAME	3556:15	3556:15	8	scanlinesize
LEAF_NODE	3556:15	3556:15	9	scanlinesize
LEAF_NODE	0:0	0:0	8	;
INIT	3556:15	3556:15	8	scanlinesize = TIFFScanlineSize64 ( tif )
ASSIGN	3556:15	3556:30	9	scanlinesize = TIFFScanlineSize64 ( tif )
LVAL	3556:15	3556:15	10	scanlinesize
NAME	3556:15	3556:15	11	scanlinesize
LEAF_NODE	3556:15	3556:15	12	scanlinesize
ASSIGN_OP	3556:28	3556:28	10	=
LEAF_NODE	3556:28	3556:28	11	=
RVAL	3556:30	3556:30	10	TIFFScanlineSize64 ( tif )
FUNCTION_CALL	3556:30	3556:52	11	TIFFScanlineSize64 ( tif )
CALLEE	3556:30	3556:30	12	TIFFScanlineSize64
LEAF_NODE	3556:30	3556:30	13	TIFFScanlineSize64
LEAF_NODE	3556:48	3556:48	12	(
ARGUMENT	3556:49	3556:49	12	tif
FIELD	3556:49	3556:49	13	tif
LEAF_NODE	3556:49	3556:49	14	tif
LEAF_NODE	3556:52	3556:52	12	)
LEAF_NODE	3556:53	3556:53	7	;
SELECTION	3557:8	3559:8	6	
KEYWORD	3557:8	3557:8	7	if
LEAF_NODE	3557:8	3557:8	8	if
LEAF_NODE	3557:10	3557:10	7	(
CONDITION	3557:12	3557:12	7	tif -> tif_dir . td_imagelength > 0 && scanlinesize > TIFF_UINT64_MAX / tif -> tif_dir . td_imagelength
EXPR	3557:12	3557:12	8	tif -> tif_dir . td_imagelength > 0 && scanlinesize > TIFF_UINT64_MAX / tif -> tif_dir . td_imagelength
AND	3557:12	3558:12	9	tif -> tif_dir . td_imagelength > 0 && scanlinesize > TIFF_UINT64_MAX / tif -> tif_dir . td_imagelength
EXPR	3557:12	3557:42	10	tif -> tif_dir . td_imagelength > 0
FIELD	3557:12	3557:25	11	tif -> tif_dir . td_imagelength
LEAF_NODE	3557:12	3557:12	12	tif
LEAF_NODE	3557:15	3557:15	12	->
LEAF_NODE	3557:17	3557:17	12	tif_dir
LEAF_NODE	3557:24	3557:24	12	.
LEAF_NODE	3557:25	3557:25	12	td_imagelength
REL_OPERATOR	3557:40	3557:40	11	>
LEAF_NODE	3557:40	3557:40	12	>
FIELD	3557:42	3557:42	11	0
LEAF_NODE	3557:42	3557:42	12	0
LEAF_NODE	3557:44	3557:44	10	&&
EXPR	3558:12	3558:45	10	scanlinesize > TIFF_UINT64_MAX / tif -> tif_dir . td_imagelength
FIELD	3558:12	3558:12	11	scanlinesize
LEAF_NODE	3558:12	3558:12	12	scanlinesize
REL_OPERATOR	3558:25	3558:25	11	>
LEAF_NODE	3558:25	3558:25	12	>
FIELD	3558:27	3558:27	11	TIFF_UINT64_MAX
LEAF_NODE	3558:27	3558:27	12	TIFF_UINT64_MAX
LEAF_NODE	3558:43	3558:43	11	/
FIELD	3558:45	3558:58	11	tif -> tif_dir . td_imagelength
LEAF_NODE	3558:45	3558:45	12	tif
LEAF_NODE	3558:48	3558:48	12	->
LEAF_NODE	3558:50	3558:50	12	tif_dir
LEAF_NODE	3558:57	3558:57	12	.
LEAF_NODE	3558:58	3558:58	12	td_imagelength
LEAF_NODE	3558:73	3558:73	7	)
STATEMENTS	3559:8	3561:8	7	
LEAF_NODE	3559:8	3559:8	8	{
STATEMENTS	3560:12	3560:12	8	
JUMP_STATEMENT	3560:12	3560:20	9	return 1 ;
KEYWORD	3560:12	3560:12	10	return
LEAF_NODE	3560:12	3560:12	11	return
DESTINATION	3560:19	3560:19	10	1
EXPR	3560:19	3560:19	11	1
FIELD	3560:19	3560:19	12	1
LEAF_NODE	3560:19	3560:19	13	1
LEAF_NODE	3560:20	3560:20	10	;
LEAF_NODE	3561:8	3561:8	8	}
SELECTION	3562:8	3563:12	6	
KEYWORD	3562:8	3562:8	7	if
LEAF_NODE	3562:8	3562:8	8	if
LEAF_NODE	3562:10	3562:10	7	(
CONDITION	3562:12	3562:12	7	bytecount < scanlinesize * tif -> tif_dir . td_imagelength
EXPR	3562:12	3562:39	8	bytecount < scanlinesize * tif -> tif_dir . td_imagelength
FIELD	3562:12	3562:12	9	bytecount
LEAF_NODE	3562:12	3562:12	10	bytecount
REL_OPERATOR	3562:22	3562:22	9	<
LEAF_NODE	3562:22	3562:22	10	<
FIELD	3562:24	3562:24	9	scanlinesize
LEAF_NODE	3562:24	3562:24	10	scanlinesize
LEAF_NODE	3562:37	3562:37	9	*
FIELD	3562:39	3562:52	9	tif -> tif_dir . td_imagelength
LEAF_NODE	3562:39	3562:39	10	tif
LEAF_NODE	3562:42	3562:42	10	->
LEAF_NODE	3562:44	3562:44	10	tif_dir
LEAF_NODE	3562:51	3562:51	10	.
LEAF_NODE	3562:52	3562:52	10	td_imagelength
LEAF_NODE	3562:66	3562:66	7	)
STATEMENTS	3563:12	3563:12	7	
JUMP_STATEMENT	3563:12	3563:20	8	return 1 ;
KEYWORD	3563:12	3563:12	9	return
LEAF_NODE	3563:12	3563:12	10	return
DESTINATION	3563:19	3563:19	9	1
EXPR	3563:19	3563:19	10	1
FIELD	3563:19	3563:19	11	1
LEAF_NODE	3563:19	3563:19	12	1
LEAF_NODE	3563:20	3563:20	9	;
LEAF_NODE	3564:4	3564:4	5	}
JUMP_STATEMENT	3565:4	3565:12	3	return 0 ;
KEYWORD	3565:4	3565:4	4	return
LEAF_NODE	3565:4	3565:4	5	return
DESTINATION	3565:11	3565:11	4	0
EXPR	3565:11	3565:11	5	0
FIELD	3565:11	3565:11	6	0
LEAF_NODE	3565:11	3565:11	7	0
LEAF_NODE	3565:12	3565:12	4	;
LEAF_NODE	3566:0	3566:0	2	}
FUNCTION_DEF	3573:0	4321:0	1	
RETURN_TYPE	3573:0	3573:0	2	int
TYPE_NAME	3573:0	3573:0	3	int
LEAF_NODE	3573:0	3573:0	4	int
FUNCTION_NAME	3574:0	3574:0	2	TIFFReadDirectory
LEAF_NODE	3574:0	3574:0	3	TIFFReadDirectory
PARAMETER_LIST	3574:17	3574:27	2	( TIFF * tif )
LEAF_NODE	3574:17	3574:17	3	(
PARAMETER_DECL	3574:18	3574:24	3	TIFF * tif
TYPE	3574:18	3574:22	4	TIFF *
TYPE_NAME	3574:18	3574:18	5	TIFF
LEAF_NODE	3574:18	3574:18	6	TIFF
POINTER	3574:22	3574:22	5	*
LEAF_NODE	3574:22	3574:22	6	*
NAME	3574:24	3574:24	4	tif
LEAF_NODE	3574:24	3574:24	5	tif
LEAF_NODE	3574:27	3574:27	3	)
LEAF_NODE	3575:0	3575:0	2	{
STATEMENTS	3576:1	4320:1	2	
LEAF_NODE	3576:1	3576:1	3	static
SIMPLE_DECL	3576:8	3576:49	3	const char [ ] module ; module = "TIFFReadDirectory" ;
VAR_DECL	3576:8	3576:19	4	const char [ ] module ; module = "TIFFReadDirectory"
TYPE	3576:8	3576:25	5	const char [ ]
TYPE_NAME	3576:8	3576:14	6	const char
LEAF_NODE	3576:8	3576:8	7	const
LEAF_NODE	3576:14	3576:14	7	char
TYPE_SUFFIX	3576:25	3576:26	6	[ ]
LEAF_NODE	3576:25	3576:25	7	[
LEAF_NODE	3576:26	3576:26	7	]
NAME	3576:19	3576:19	5	module
LEAF_NODE	3576:19	3576:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	3576:19	3576:19	5	module = "TIFFReadDirectory"
ASSIGN	3576:19	3576:30	6	module = "TIFFReadDirectory"
LVAL	3576:19	3576:19	7	module
NAME	3576:19	3576:19	8	module
LEAF_NODE	3576:19	3576:19	9	module
ASSIGN_OP	3576:28	3576:28	7	=
LEAF_NODE	3576:28	3576:28	8	=
RVAL	3576:30	3576:30	7	"TIFFReadDirectory"
FIELD	3576:30	3576:30	8	"TIFFReadDirectory"
LEAF_NODE	3576:30	3576:30	9	"TIFFReadDirectory"
LEAF_NODE	3576:49	3576:49	4	;
SIMPLE_DECL	3577:1	3577:18	3	TIFFDirEntry * dir ;
VAR_DECL	3577:1	3577:15	4	TIFFDirEntry * dir
TYPE	3577:1	3577:13	5	TIFFDirEntry *
TYPE_NAME	3577:1	3577:1	6	TIFFDirEntry
LEAF_NODE	3577:1	3577:1	7	TIFFDirEntry
POINTER	3577:13	3577:13	6	*
LEAF_NODE	3577:13	3577:13	7	*
NAME	3577:15	3577:15	5	dir
LEAF_NODE	3577:15	3577:15	6	dir
LEAF_NODE	3577:18	3577:18	4	;
SIMPLE_DECL	3578:1	3578:16	3	uint16 dircount ;
VAR_DECL	3578:1	3578:8	4	uint16 dircount
TYPE	3578:1	3578:1	5	uint16
TYPE_NAME	3578:1	3578:1	6	uint16
LEAF_NODE	3578:1	3578:1	7	uint16
NAME	3578:8	3578:8	5	dircount
LEAF_NODE	3578:8	3578:8	6	dircount
LEAF_NODE	3578:16	3578:16	4	;
SIMPLE_DECL	3579:1	3579:17	3	TIFFDirEntry * dp ;
VAR_DECL	3579:1	3579:15	4	TIFFDirEntry * dp
TYPE	3579:1	3579:13	5	TIFFDirEntry *
TYPE_NAME	3579:1	3579:1	6	TIFFDirEntry
LEAF_NODE	3579:1	3579:1	7	TIFFDirEntry
POINTER	3579:13	3579:13	6	*
LEAF_NODE	3579:13	3579:13	7	*
NAME	3579:15	3579:15	5	dp
LEAF_NODE	3579:15	3579:15	6	dp
LEAF_NODE	3579:17	3579:17	4	;
SIMPLE_DECL	3580:1	3580:10	3	uint16 di ;
VAR_DECL	3580:1	3580:8	4	uint16 di
TYPE	3580:1	3580:1	5	uint16
TYPE_NAME	3580:1	3580:1	6	uint16
LEAF_NODE	3580:1	3580:1	7	uint16
NAME	3580:8	3580:8	5	di
LEAF_NODE	3580:8	3580:8	6	di
LEAF_NODE	3580:10	3580:10	4	;
SIMPLE_DECL	3581:1	3581:21	3	const TIFFField * fip ;
VAR_DECL	3581:1	3581:18	4	const TIFFField * fip
TYPE	3581:1	3581:16	5	const TIFFField *
TYPE_NAME	3581:1	3581:7	6	const TIFFField
LEAF_NODE	3581:1	3581:1	7	const
LEAF_NODE	3581:7	3581:7	7	TIFFField
POINTER	3581:16	3581:16	6	*
LEAF_NODE	3581:16	3581:16	7	*
NAME	3581:18	3581:18	5	fip
LEAF_NODE	3581:18	3581:18	6	fip
LEAF_NODE	3581:21	3581:21	4	;
SIMPLE_DECL	3582:1	3582:22	3	uint32 fii ; fii = FAILED_FII ;
VAR_DECL	3582:1	3582:8	4	uint32 fii ; fii = FAILED_FII
TYPE	3582:1	3582:1	5	uint32
TYPE_NAME	3582:1	3582:1	6	uint32
LEAF_NODE	3582:1	3582:1	7	uint32
NAME	3582:8	3582:8	5	fii
LEAF_NODE	3582:8	3582:8	6	fii
LEAF_NODE	0:0	0:0	5	;
INIT	3582:8	3582:8	5	fii = FAILED_FII
ASSIGN	3582:8	3582:12	6	fii = FAILED_FII
LVAL	3582:8	3582:8	7	fii
NAME	3582:8	3582:8	8	fii
LEAF_NODE	3582:8	3582:8	9	fii
ASSIGN_OP	3582:11	3582:11	7	=
LEAF_NODE	3582:11	3582:11	8	=
RVAL	3582:12	3582:12	7	FAILED_FII
FIELD	3582:12	3582:12	8	FAILED_FII
LEAF_NODE	3582:12	3582:12	9	FAILED_FII
LEAF_NODE	3582:22	3582:22	4	;
SIMPLE_DECL	3583:8	3583:25	3	toff_t nextdiroff ;
VAR_DECL	3583:8	3583:15	4	toff_t nextdiroff
TYPE	3583:8	3583:8	5	toff_t
TYPE_NAME	3583:8	3583:8	6	toff_t
LEAF_NODE	3583:8	3583:8	7	toff_t
NAME	3583:15	3583:15	5	nextdiroff
LEAF_NODE	3583:15	3583:15	6	nextdiroff
LEAF_NODE	3583:25	3583:25	4	;
SIMPLE_DECL	3584:4	3584:34	3	int bitspersample_read ; bitspersample_read = FALSE ;
VAR_DECL	3584:4	3584:8	4	int bitspersample_read ; bitspersample_read = FALSE
TYPE	3584:4	3584:4	5	int
TYPE_NAME	3584:4	3584:4	6	int
LEAF_NODE	3584:4	3584:4	7	int
NAME	3584:8	3584:8	5	bitspersample_read
LEAF_NODE	3584:8	3584:8	6	bitspersample_read
LEAF_NODE	0:0	0:0	5	;
INIT	3584:8	3584:8	5	bitspersample_read = FALSE
ASSIGN	3584:8	3584:29	6	bitspersample_read = FALSE
LVAL	3584:8	3584:8	7	bitspersample_read
NAME	3584:8	3584:8	8	bitspersample_read
LEAF_NODE	3584:8	3584:8	9	bitspersample_read
ASSIGN_OP	3584:27	3584:27	7	=
LEAF_NODE	3584:27	3584:27	8	=
RVAL	3584:29	3584:29	7	FALSE
FIELD	3584:29	3584:29	8	FALSE
LEAF_NODE	3584:29	3584:29	9	FALSE
LEAF_NODE	3584:34	3584:34	4	;
SIMPLE_DECL	3585:8	3585:26	3	int color_channels ;
VAR_DECL	3585:8	3585:12	4	int color_channels
TYPE	3585:8	3585:8	5	int
TYPE_NAME	3585:8	3585:8	6	int
LEAF_NODE	3585:8	3585:8	7	int
NAME	3585:12	3585:12	5	color_channels
LEAF_NODE	3585:12	3585:12	6	color_channels
LEAF_NODE	3585:26	3585:26	4	;
EXPR_STATEMENT	3587:1	3587:36	3	tif -> tif_diroff = tif -> tif_nextdiroff ;
EXPR	3587:1	3587:1	4	tif -> tif_diroff = tif -> tif_nextdiroff
ASSIGN	3587:1	3587:17	5	tif -> tif_diroff = tif -> tif_nextdiroff
LVAL	3587:1	3587:1	6	tif -> tif_diroff
FIELD	3587:1	3587:6	7	tif -> tif_diroff
LEAF_NODE	3587:1	3587:1	8	tif
LEAF_NODE	3587:4	3587:4	8	->
LEAF_NODE	3587:6	3587:6	8	tif_diroff
ASSIGN_OP	3587:16	3587:16	6	=
LEAF_NODE	3587:16	3587:16	7	=
RVAL	3587:17	3587:17	6	tif -> tif_nextdiroff
FIELD	3587:17	3587:22	7	tif -> tif_nextdiroff
LEAF_NODE	3587:17	3587:17	8	tif
LEAF_NODE	3587:20	3587:20	8	->
LEAF_NODE	3587:22	3587:22	8	tif_nextdiroff
LEAF_NODE	3587:36	3587:36	4	;
SELECTION	3588:1	3589:2	3	
KEYWORD	3588:1	3588:1	4	if
LEAF_NODE	3588:1	3588:1	5	if
LEAF_NODE	3588:4	3588:4	4	(
CONDITION	3588:5	3588:5	4	! TIFFCheckDirOffset ( tif , tif -> tif_nextdiroff )
EXPR	3588:5	3588:5	5	! TIFFCheckDirOffset ( tif , tif -> tif_nextdiroff )
UNARY_EXPR	3588:5	3588:6	6	! TIFFCheckDirOffset ( tif , tif -> tif_nextdiroff )
UNARY_OPERATOR	3588:5	3588:5	7	!
LEAF_NODE	3588:5	3588:5	8	!
FUNCTION_CALL	3588:6	3588:48	7	TIFFCheckDirOffset ( tif , tif -> tif_nextdiroff )
CALLEE	3588:6	3588:6	8	TIFFCheckDirOffset
LEAF_NODE	3588:6	3588:6	9	TIFFCheckDirOffset
LEAF_NODE	3588:24	3588:24	8	(
ARGUMENT	3588:25	3588:25	8	tif
FIELD	3588:25	3588:25	9	tif
LEAF_NODE	3588:25	3588:25	10	tif
LEAF_NODE	3588:28	3588:28	8	,
ARGUMENT	3588:29	3588:29	8	tif -> tif_nextdiroff
FIELD	3588:29	3588:34	9	tif -> tif_nextdiroff
LEAF_NODE	3588:29	3588:29	10	tif
LEAF_NODE	3588:32	3588:32	10	->
LEAF_NODE	3588:34	3588:34	10	tif_nextdiroff
LEAF_NODE	3588:48	3588:48	8	)
LEAF_NODE	3588:49	3588:49	4	)
STATEMENTS	3589:2	3589:2	4	
JUMP_STATEMENT	3589:2	3589:10	5	return 0 ;
KEYWORD	3589:2	3589:2	6	return
LEAF_NODE	3589:2	3589:2	7	return
DESTINATION	3589:9	3589:9	6	0
EXPR	3589:9	3589:9	7	0
FIELD	3589:9	3589:9	8	0
LEAF_NODE	3589:9	3589:9	9	0
LEAF_NODE	3589:10	3589:10	6	;
EXPR_STATEMENT	3590:1	3590:25	3	( * tif -> tif_cleanup ) ( tif ) ;
EXPR	3590:1	3590:1	4	( * tif -> tif_cleanup ) ( tif )
FUNCTION_CALL	3590:1	3590:24	5	( * tif -> tif_cleanup ) ( tif )
CALLEE	3590:1	3590:19	6	( * tif -> tif_cleanup )
LEAF_NODE	3590:1	3590:1	7	(
UNARY_EXPR	3590:2	3590:3	7	* tif -> tif_cleanup
UNARY_OPERATOR	3590:2	3590:2	8	*
LEAF_NODE	3590:2	3590:2	9	*
FIELD	3590:3	3590:8	8	tif -> tif_cleanup
LEAF_NODE	3590:3	3590:3	9	tif
LEAF_NODE	3590:6	3590:6	9	->
LEAF_NODE	3590:8	3590:8	9	tif_cleanup
LEAF_NODE	3590:19	3590:19	7	)
LEAF_NODE	3590:20	3590:20	6	(
ARGUMENT	3590:21	3590:21	6	tif
FIELD	3590:21	3590:21	7	tif
LEAF_NODE	3590:21	3590:21	8	tif
LEAF_NODE	3590:24	3590:24	6	)
LEAF_NODE	3590:25	3590:25	4	;
EXPR_STATEMENT	3591:1	3591:18	3	tif -> tif_curdir ++ ;
EXPR	3591:1	3591:1	4	tif -> tif_curdir ++
FIELD	3591:1	3591:16	5	tif -> tif_curdir ++
LEAF_NODE	3591:1	3591:1	6	tif
LEAF_NODE	3591:4	3591:4	6	->
LEAF_NODE	3591:6	3591:6	6	tif_curdir
LEAF_NODE	3591:16	3591:16	6	++
LEAF_NODE	3591:18	3591:18	4	;
EXPR_STATEMENT	3592:8	3592:40	3	nextdiroff = tif -> tif_nextdiroff ;
EXPR	3592:8	3592:8	4	nextdiroff = tif -> tif_nextdiroff
ASSIGN	3592:8	3592:21	5	nextdiroff = tif -> tif_nextdiroff
LVAL	3592:8	3592:8	6	nextdiroff
FIELD	3592:8	3592:8	7	nextdiroff
LEAF_NODE	3592:8	3592:8	8	nextdiroff
ASSIGN_OP	3592:19	3592:19	6	=
LEAF_NODE	3592:19	3592:19	7	=
RVAL	3592:21	3592:21	6	tif -> tif_nextdiroff
FIELD	3592:21	3592:26	7	tif -> tif_nextdiroff
LEAF_NODE	3592:21	3592:21	8	tif
LEAF_NODE	3592:24	3592:24	8	->
LEAF_NODE	3592:26	3592:26	8	tif_nextdiroff
LEAF_NODE	3592:40	3592:40	4	;
EXPR_STATEMENT	3593:1	3593:70	3	dircount = TIFFFetchDirectory ( tif , nextdiroff , & dir , & tif -> tif_nextdiroff ) ;
EXPR	3593:1	3593:1	4	dircount = TIFFFetchDirectory ( tif , nextdiroff , & dir , & tif -> tif_nextdiroff )
ASSIGN	3593:1	3593:10	5	dircount = TIFFFetchDirectory ( tif , nextdiroff , & dir , & tif -> tif_nextdiroff )
LVAL	3593:1	3593:1	6	dircount
FIELD	3593:1	3593:1	7	dircount
LEAF_NODE	3593:1	3593:1	8	dircount
ASSIGN_OP	3593:9	3593:9	6	=
LEAF_NODE	3593:9	3593:9	7	=
RVAL	3593:10	3593:10	6	TIFFFetchDirectory ( tif , nextdiroff , & dir , & tif -> tif_nextdiroff )
FUNCTION_CALL	3593:10	3593:69	7	TIFFFetchDirectory ( tif , nextdiroff , & dir , & tif -> tif_nextdiroff )
CALLEE	3593:10	3593:10	8	TIFFFetchDirectory
LEAF_NODE	3593:10	3593:10	9	TIFFFetchDirectory
LEAF_NODE	3593:28	3593:28	8	(
ARGUMENT	3593:29	3593:29	8	tif
FIELD	3593:29	3593:29	9	tif
LEAF_NODE	3593:29	3593:29	10	tif
LEAF_NODE	3593:32	3593:32	8	,
ARGUMENT	3593:33	3593:33	8	nextdiroff
FIELD	3593:33	3593:33	9	nextdiroff
LEAF_NODE	3593:33	3593:33	10	nextdiroff
LEAF_NODE	3593:43	3593:43	8	,
ARGUMENT	3593:44	3593:44	8	& dir
UNARY_EXPR	3593:44	3593:45	9	& dir
UNARY_OPERATOR	3593:44	3593:44	10	&
LEAF_NODE	3593:44	3593:44	11	&
FIELD	3593:45	3593:45	10	dir
LEAF_NODE	3593:45	3593:45	11	dir
LEAF_NODE	3593:48	3593:48	8	,
ARGUMENT	3593:49	3593:49	8	& tif -> tif_nextdiroff
UNARY_EXPR	3593:49	3593:50	9	& tif -> tif_nextdiroff
UNARY_OPERATOR	3593:49	3593:49	10	&
LEAF_NODE	3593:49	3593:49	11	&
FIELD	3593:50	3593:55	10	tif -> tif_nextdiroff
LEAF_NODE	3593:50	3593:50	11	tif
LEAF_NODE	3593:53	3593:53	11	->
LEAF_NODE	3593:55	3593:55	11	tif_nextdiroff
LEAF_NODE	3593:69	3593:69	8	)
LEAF_NODE	3593:70	3593:70	4	;
SELECTION	3594:1	3595:1	3	
KEYWORD	3594:1	3594:1	4	if
LEAF_NODE	3594:1	3594:1	5	if
LEAF_NODE	3594:4	3594:4	4	(
CONDITION	3594:5	3594:5	4	! dircount
EXPR	3594:5	3594:5	5	! dircount
UNARY_EXPR	3594:5	3594:6	6	! dircount
UNARY_OPERATOR	3594:5	3594:5	7	!
LEAF_NODE	3594:5	3594:5	8	!
FIELD	3594:6	3594:6	7	dircount
LEAF_NODE	3594:6	3594:6	8	dircount
LEAF_NODE	3594:14	3594:14	4	)
STATEMENTS	3595:1	3599:1	4	
LEAF_NODE	3595:1	3595:1	5	{
STATEMENTS	3596:2	3598:2	5	
LEAF_NODE	3596:2	3596:2	6	TIFFErrorExt
LEAF_NODE	3596:14	3596:14	6	(
LEAF_NODE	3596:15	3596:15	6	tif
LEAF_NODE	3596:18	3596:18	6	->
LEAF_NODE	3596:20	3596:20	6	tif_clientdata
LEAF_NODE	3596:34	3596:34	6	,
LEAF_NODE	3596:35	3596:35	6	module
LEAF_NODE	3596:41	3596:41	6	,
LEAF_NODE	3597:6	3597:6	6	"Failed to read directory at offset "
LEAF_NODE	3597:44	3597:44	6	TIFF_UINT64_FORMAT
LEAF_NODE	3597:62	3597:62	6	,
LEAF_NODE	3597:63	3597:63	6	nextdiroff
LEAF_NODE	3597:73	3597:73	6	)
LEAF_NODE	3597:74	3597:74	6	;
JUMP_STATEMENT	3598:2	3598:10	6	return 0 ;
KEYWORD	3598:2	3598:2	7	return
LEAF_NODE	3598:2	3598:2	8	return
DESTINATION	3598:9	3598:9	7	0
EXPR	3598:9	3598:9	8	0
FIELD	3598:9	3598:9	9	0
LEAF_NODE	3598:9	3598:9	10	0
LEAF_NODE	3598:10	3598:10	7	;
LEAF_NODE	3599:1	3599:1	5	}
EXPR_STATEMENT	3600:1	3600:46	3	TIFFReadDirectoryCheckOrder ( tif , dir , dircount ) ;
EXPR	3600:1	3600:1	4	TIFFReadDirectoryCheckOrder ( tif , dir , dircount )
FUNCTION_CALL	3600:1	3600:45	5	TIFFReadDirectoryCheckOrder ( tif , dir , dircount )
CALLEE	3600:1	3600:1	6	TIFFReadDirectoryCheckOrder
LEAF_NODE	3600:1	3600:1	7	TIFFReadDirectoryCheckOrder
LEAF_NODE	3600:28	3600:28	6	(
ARGUMENT	3600:29	3600:29	6	tif
FIELD	3600:29	3600:29	7	tif
LEAF_NODE	3600:29	3600:29	8	tif
LEAF_NODE	3600:32	3600:32	6	,
ARGUMENT	3600:33	3600:33	6	dir
FIELD	3600:33	3600:33	7	dir
LEAF_NODE	3600:33	3600:33	8	dir
LEAF_NODE	3600:36	3600:36	6	,
ARGUMENT	3600:37	3600:37	6	dircount
FIELD	3600:37	3600:37	7	dircount
LEAF_NODE	3600:37	3600:37	8	dircount
LEAF_NODE	3600:45	3600:45	6	)
LEAF_NODE	3600:46	3600:46	4	;
LEAF_NODE	3606:1	3606:1	3	{
STATEMENTS	3607:2	3609:2	3	
SIMPLE_DECL	3607:2	3607:18	4	TIFFDirEntry * ma ;
VAR_DECL	3607:2	3607:16	5	TIFFDirEntry * ma
TYPE	3607:2	3607:14	6	TIFFDirEntry *
TYPE_NAME	3607:2	3607:2	7	TIFFDirEntry
LEAF_NODE	3607:2	3607:2	8	TIFFDirEntry
POINTER	3607:14	3607:14	7	*
LEAF_NODE	3607:14	3607:14	8	*
NAME	3607:16	3607:16	6	ma
LEAF_NODE	3607:16	3607:16	7	ma
LEAF_NODE	3607:18	3607:18	5	;
SIMPLE_DECL	3608:2	3608:11	4	uint16 mb ;
VAR_DECL	3608:2	3608:9	5	uint16 mb
TYPE	3608:2	3608:2	6	uint16
TYPE_NAME	3608:2	3608:2	7	uint16
LEAF_NODE	3608:2	3608:2	8	uint16
NAME	3608:9	3608:9	6	mb
LEAF_NODE	3608:9	3608:9	7	mb
LEAF_NODE	3608:11	3608:11	5	;
ITERATION	3609:2	3610:2	4	
KEYWORD	3609:2	3609:2	5	for
LEAF_NODE	3609:2	3609:2	6	for
LEAF_NODE	3609:6	3609:6	5	(
FOR_INIT	3609:7	3609:19	5	ma = dir , mb = 0 ;
EXPR	3609:7	3609:15	6	ma = dir , mb = 0
ASSIGN	3609:7	3609:10	7	ma = dir
LVAL	3609:7	3609:7	8	ma
FIELD	3609:7	3609:7	9	ma
LEAF_NODE	3609:7	3609:7	10	ma
ASSIGN_OP	3609:9	3609:9	8	=
LEAF_NODE	3609:9	3609:9	9	=
RVAL	3609:10	3609:10	8	dir
FIELD	3609:10	3609:10	9	dir
LEAF_NODE	3609:10	3609:10	10	dir
LEAF_NODE	3609:13	3609:13	7	,
ASSIGN	3609:15	3609:18	7	mb = 0
LVAL	3609:15	3609:15	8	mb
FIELD	3609:15	3609:15	9	mb
LEAF_NODE	3609:15	3609:15	10	mb
ASSIGN_OP	3609:17	3609:17	8	=
LEAF_NODE	3609:17	3609:17	9	=
RVAL	3609:18	3609:18	8	0
FIELD	3609:18	3609:18	9	0
LEAF_NODE	3609:18	3609:18	10	0
LEAF_NODE	3609:19	3609:19	6	;
CONDITION	3609:21	3609:21	5	mb < dircount
EXPR	3609:21	3609:24	6	mb < dircount
FIELD	3609:21	3609:21	7	mb
LEAF_NODE	3609:21	3609:21	8	mb
REL_OPERATOR	3609:23	3609:23	7	<
LEAF_NODE	3609:23	3609:23	8	<
FIELD	3609:24	3609:24	7	dircount
LEAF_NODE	3609:24	3609:24	8	dircount
LEAF_NODE	3609:32	3609:32	5	;
FOR_EXPR	3609:34	3609:34	5	ma ++ , mb ++
EXPR	3609:34	3609:40	6	ma ++ , mb ++
FIELD	3609:34	3609:36	7	ma ++
LEAF_NODE	3609:34	3609:34	8	ma
LEAF_NODE	3609:36	3609:36	8	++
LEAF_NODE	3609:38	3609:38	7	,
FIELD	3609:40	3609:42	7	mb ++
LEAF_NODE	3609:40	3609:40	8	mb
LEAF_NODE	3609:42	3609:42	8	++
LEAF_NODE	3609:44	3609:44	5	)
STATEMENTS	3610:2	3619:2	5	
LEAF_NODE	3610:2	3610:2	6	{
STATEMENTS	3611:3	3613:3	6	
SIMPLE_DECL	3611:3	3611:19	7	TIFFDirEntry * na ;
VAR_DECL	3611:3	3611:17	8	TIFFDirEntry * na
TYPE	3611:3	3611:15	9	TIFFDirEntry *
TYPE_NAME	3611:3	3611:3	10	TIFFDirEntry
LEAF_NODE	3611:3	3611:3	11	TIFFDirEntry
POINTER	3611:15	3611:15	10	*
LEAF_NODE	3611:15	3611:15	11	*
NAME	3611:17	3611:17	9	na
LEAF_NODE	3611:17	3611:17	10	na
LEAF_NODE	3611:19	3611:19	8	;
SIMPLE_DECL	3612:3	3612:12	7	uint16 nb ;
VAR_DECL	3612:3	3612:10	8	uint16 nb
TYPE	3612:3	3612:3	9	uint16
TYPE_NAME	3612:3	3612:3	10	uint16
LEAF_NODE	3612:3	3612:3	11	uint16
NAME	3612:10	3612:10	9	nb
LEAF_NODE	3612:10	3612:10	10	nb
LEAF_NODE	3612:12	3612:12	8	;
ITERATION	3613:3	3614:3	7	
KEYWORD	3613:3	3613:3	8	for
LEAF_NODE	3613:3	3613:3	9	for
LEAF_NODE	3613:7	3613:7	8	(
FOR_INIT	3613:8	3613:24	8	na = ma + 1 , nb = mb + 1 ;
EXPR	3613:8	3613:17	9	na = ma + 1 , nb = mb + 1
ASSIGN	3613:8	3613:11	10	na = ma + 1
LVAL	3613:8	3613:8	11	na
FIELD	3613:8	3613:8	12	na
LEAF_NODE	3613:8	3613:8	13	na
ASSIGN_OP	3613:10	3613:10	11	=
LEAF_NODE	3613:10	3613:10	12	=
RVAL	3613:11	3613:14	11	ma + 1
FIELD	3613:11	3613:11	12	ma
LEAF_NODE	3613:11	3613:11	13	ma
LEAF_NODE	3613:13	3613:13	12	+
FIELD	3613:14	3613:14	12	1
LEAF_NODE	3613:14	3613:14	13	1
LEAF_NODE	3613:15	3613:15	10	,
ASSIGN	3613:17	3613:20	10	nb = mb + 1
LVAL	3613:17	3613:17	11	nb
FIELD	3613:17	3613:17	12	nb
LEAF_NODE	3613:17	3613:17	13	nb
ASSIGN_OP	3613:19	3613:19	11	=
LEAF_NODE	3613:19	3613:19	12	=
RVAL	3613:20	3613:23	11	mb + 1
FIELD	3613:20	3613:20	12	mb
LEAF_NODE	3613:20	3613:20	13	mb
LEAF_NODE	3613:22	3613:22	12	+
FIELD	3613:23	3613:23	12	1
LEAF_NODE	3613:23	3613:23	13	1
LEAF_NODE	3613:24	3613:24	9	;
CONDITION	3613:26	3613:26	8	nb < dircount
EXPR	3613:26	3613:29	9	nb < dircount
FIELD	3613:26	3613:26	10	nb
LEAF_NODE	3613:26	3613:26	11	nb
REL_OPERATOR	3613:28	3613:28	10	<
LEAF_NODE	3613:28	3613:28	11	<
FIELD	3613:29	3613:29	10	dircount
LEAF_NODE	3613:29	3613:29	11	dircount
LEAF_NODE	3613:37	3613:37	8	;
FOR_EXPR	3613:39	3613:39	8	na ++ , nb ++
EXPR	3613:39	3613:45	9	na ++ , nb ++
FIELD	3613:39	3613:41	10	na ++
LEAF_NODE	3613:39	3613:39	11	na
LEAF_NODE	3613:41	3613:41	11	++
LEAF_NODE	3613:43	3613:43	10	,
FIELD	3613:45	3613:47	10	nb ++
LEAF_NODE	3613:45	3613:45	11	nb
LEAF_NODE	3613:47	3613:47	11	++
LEAF_NODE	3613:49	3613:49	8	)
STATEMENTS	3614:3	3618:3	8	
LEAF_NODE	3614:3	3614:3	9	{
STATEMENTS	3615:4	3615:4	9	
SELECTION	3615:4	3615:38	10	
KEYWORD	3615:4	3615:4	11	if
LEAF_NODE	3615:4	3615:4	12	if
LEAF_NODE	3615:7	3615:7	11	(
CONDITION	3615:8	3615:8	11	ma -> tdir_tag == na -> tdir_tag
EXPR	3615:8	3615:24	12	ma -> tdir_tag == na -> tdir_tag
FIELD	3615:8	3615:12	13	ma -> tdir_tag
LEAF_NODE	3615:8	3615:8	14	ma
LEAF_NODE	3615:10	3615:10	14	->
LEAF_NODE	3615:12	3615:12	14	tdir_tag
EQ_OPERATOR	3615:21	3615:21	13	==
LEAF_NODE	3615:21	3615:21	14	==
FIELD	3615:24	3615:28	13	na -> tdir_tag
LEAF_NODE	3615:24	3615:24	14	na
LEAF_NODE	3615:26	3615:26	14	->
LEAF_NODE	3615:28	3615:28	14	tdir_tag
LEAF_NODE	3615:36	3615:36	11	)
STATEMENTS	3615:38	3617:4	11	
LEAF_NODE	3615:38	3615:38	12	{
STATEMENTS	3616:5	3616:5	12	
EXPR_STATEMENT	3616:5	3616:27	13	na -> tdir_ignore = TRUE ;
EXPR	3616:5	3616:5	14	na -> tdir_ignore = TRUE
ASSIGN	3616:5	3616:23	15	na -> tdir_ignore = TRUE
LVAL	3616:5	3616:5	16	na -> tdir_ignore
FIELD	3616:5	3616:9	17	na -> tdir_ignore
LEAF_NODE	3616:5	3616:5	18	na
LEAF_NODE	3616:7	3616:7	18	->
LEAF_NODE	3616:9	3616:9	18	tdir_ignore
ASSIGN_OP	3616:21	3616:21	16	=
LEAF_NODE	3616:21	3616:21	17	=
RVAL	3616:23	3616:23	16	TRUE
FIELD	3616:23	3616:23	17	TRUE
LEAF_NODE	3616:23	3616:23	18	TRUE
LEAF_NODE	3616:27	3616:27	14	;
LEAF_NODE	3617:4	3617:4	12	}
LEAF_NODE	3618:3	3618:3	9	}
LEAF_NODE	3619:2	3619:2	6	}
LEAF_NODE	3620:1	3620:1	3	}
EXPR_STATEMENT	3622:1	3622:36	3	tif -> tif_flags &= ~TIFF_BEENWRITING ;
EXPR	3622:1	3622:1	4	tif -> tif_flags &= ~TIFF_BEENWRITING
ASSIGN	3622:1	3622:19	5	tif -> tif_flags &= ~TIFF_BEENWRITING
LVAL	3622:1	3622:1	6	tif -> tif_flags
FIELD	3622:1	3622:6	7	tif -> tif_flags
LEAF_NODE	3622:1	3622:1	8	tif
LEAF_NODE	3622:4	3622:4	8	->
LEAF_NODE	3622:6	3622:6	8	tif_flags
ASSIGN_OP	3622:16	3622:16	6	&=
LEAF_NODE	3622:16	3622:16	7	&=
RVAL	3622:19	3622:19	6	~TIFF_BEENWRITING
FIELD	3622:19	3622:19	7	~TIFF_BEENWRITING
LEAF_NODE	3622:19	3622:19	8	~TIFF_BEENWRITING
LEAF_NODE	3622:36	3622:36	4	;
EXPR_STATEMENT	3623:1	3623:34	3	tif -> tif_flags &= ~TIFF_BUF4WRITE ;
EXPR	3623:1	3623:1	4	tif -> tif_flags &= ~TIFF_BUF4WRITE
ASSIGN	3623:1	3623:19	5	tif -> tif_flags &= ~TIFF_BUF4WRITE
LVAL	3623:1	3623:1	6	tif -> tif_flags
FIELD	3623:1	3623:6	7	tif -> tif_flags
LEAF_NODE	3623:1	3623:1	8	tif
LEAF_NODE	3623:4	3623:4	8	->
LEAF_NODE	3623:6	3623:6	8	tif_flags
ASSIGN_OP	3623:16	3623:16	6	&=
LEAF_NODE	3623:16	3623:16	7	&=
RVAL	3623:19	3623:19	6	~TIFF_BUF4WRITE
FIELD	3623:19	3623:19	7	~TIFF_BUF4WRITE
LEAF_NODE	3623:19	3623:19	8	~TIFF_BUF4WRITE
LEAF_NODE	3623:34	3623:34	4	;
EXPR_STATEMENT	3624:1	3624:40	3	tif -> tif_flags &= ~TIFF_CHOPPEDUPARRAYS ;
EXPR	3624:1	3624:1	4	tif -> tif_flags &= ~TIFF_CHOPPEDUPARRAYS
ASSIGN	3624:1	3624:19	5	tif -> tif_flags &= ~TIFF_CHOPPEDUPARRAYS
LVAL	3624:1	3624:1	6	tif -> tif_flags
FIELD	3624:1	3624:6	7	tif -> tif_flags
LEAF_NODE	3624:1	3624:1	8	tif
LEAF_NODE	3624:4	3624:4	8	->
LEAF_NODE	3624:6	3624:6	8	tif_flags
ASSIGN_OP	3624:16	3624:16	6	&=
LEAF_NODE	3624:16	3624:16	7	&=
RVAL	3624:19	3624:19	6	~TIFF_CHOPPEDUPARRAYS
FIELD	3624:19	3624:19	7	~TIFF_CHOPPEDUPARRAYS
LEAF_NODE	3624:19	3624:19	8	~TIFF_CHOPPEDUPARRAYS
LEAF_NODE	3624:40	3624:40	4	;
EXPR_STATEMENT	3627:1	3627:23	3	TIFFFreeDirectory ( tif ) ;
EXPR	3627:1	3627:1	4	TIFFFreeDirectory ( tif )
FUNCTION_CALL	3627:1	3627:22	5	TIFFFreeDirectory ( tif )
CALLEE	3627:1	3627:1	6	TIFFFreeDirectory
LEAF_NODE	3627:1	3627:1	7	TIFFFreeDirectory
LEAF_NODE	3627:18	3627:18	6	(
ARGUMENT	3627:19	3627:19	6	tif
FIELD	3627:19	3627:19	7	tif
LEAF_NODE	3627:19	3627:19	8	tif
LEAF_NODE	3627:22	3627:22	6	)
LEAF_NODE	3627:23	3627:23	4	;
EXPR_STATEMENT	3628:1	3628:26	3	TIFFDefaultDirectory ( tif ) ;
EXPR	3628:1	3628:1	4	TIFFDefaultDirectory ( tif )
FUNCTION_CALL	3628:1	3628:25	5	TIFFDefaultDirectory ( tif )
CALLEE	3628:1	3628:1	6	TIFFDefaultDirectory
LEAF_NODE	3628:1	3628:1	7	TIFFDefaultDirectory
LEAF_NODE	3628:21	3628:21	6	(
ARGUMENT	3628:22	3628:22	6	tif
FIELD	3628:22	3628:22	7	tif
LEAF_NODE	3628:22	3628:22	8	tif
LEAF_NODE	3628:25	3628:25	6	)
LEAF_NODE	3628:26	3628:26	4	;
EXPR_STATEMENT	3635:1	3635:59	3	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ;
EXPR	3635:1	3635:1	4	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
FUNCTION_CALL	3635:1	3635:58	5	TIFFSetField ( tif , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG )
CALLEE	3635:1	3635:1	6	TIFFSetField
LEAF_NODE	3635:1	3635:1	7	TIFFSetField
LEAF_NODE	3635:13	3635:13	6	(
ARGUMENT	3635:14	3635:14	6	tif
FIELD	3635:14	3635:14	7	tif
LEAF_NODE	3635:14	3635:14	8	tif
LEAF_NODE	3635:17	3635:17	6	,
ARGUMENT	3635:18	3635:18	6	TIFFTAG_PLANARCONFIG
FIELD	3635:18	3635:18	7	TIFFTAG_PLANARCONFIG
LEAF_NODE	3635:18	3635:18	8	TIFFTAG_PLANARCONFIG
LEAF_NODE	3635:38	3635:38	6	,
ARGUMENT	3635:39	3635:39	6	PLANARCONFIG_CONTIG
FIELD	3635:39	3635:39	7	PLANARCONFIG_CONTIG
LEAF_NODE	3635:39	3635:39	8	PLANARCONFIG_CONTIG
LEAF_NODE	3635:58	3635:58	6	)
LEAF_NODE	3635:59	3635:59	4	;
EXPR_STATEMENT	3653:1	3653:72	3	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_SAMPLESPERPIXEL ) ;
EXPR	3653:1	3653:1	4	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_SAMPLESPERPIXEL )
ASSIGN	3653:1	3653:4	5	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_SAMPLESPERPIXEL )
LVAL	3653:1	3653:1	6	dp
FIELD	3653:1	3653:1	7	dp
LEAF_NODE	3653:1	3653:1	8	dp
ASSIGN_OP	3653:3	3653:3	6	=
LEAF_NODE	3653:3	3653:3	7	=
RVAL	3653:4	3653:4	6	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_SAMPLESPERPIXEL )
FUNCTION_CALL	3653:4	3653:71	7	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_SAMPLESPERPIXEL )
CALLEE	3653:4	3653:4	8	TIFFReadDirectoryFindEntry
LEAF_NODE	3653:4	3653:4	9	TIFFReadDirectoryFindEntry
LEAF_NODE	3653:30	3653:30	8	(
ARGUMENT	3653:31	3653:31	8	tif
FIELD	3653:31	3653:31	9	tif
LEAF_NODE	3653:31	3653:31	10	tif
LEAF_NODE	3653:34	3653:34	8	,
ARGUMENT	3653:35	3653:35	8	dir
FIELD	3653:35	3653:35	9	dir
LEAF_NODE	3653:35	3653:35	10	dir
LEAF_NODE	3653:38	3653:38	8	,
ARGUMENT	3653:39	3653:39	8	dircount
FIELD	3653:39	3653:39	9	dircount
LEAF_NODE	3653:39	3653:39	10	dircount
LEAF_NODE	3653:47	3653:47	8	,
ARGUMENT	3653:48	3653:48	8	TIFFTAG_SAMPLESPERPIXEL
FIELD	3653:48	3653:48	9	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	3653:48	3653:48	10	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	3653:71	3653:71	8	)
LEAF_NODE	3653:72	3653:72	4	;
SELECTION	3654:1	3655:1	3	
KEYWORD	3654:1	3654:1	4	if
LEAF_NODE	3654:1	3654:1	5	if
LEAF_NODE	3654:4	3654:4	4	(
CONDITION	3654:5	3654:5	4	dp
EXPR	3654:5	3654:5	5	dp
FIELD	3654:5	3654:5	6	dp
LEAF_NODE	3654:5	3654:5	7	dp
LEAF_NODE	3654:7	3654:7	4	)
STATEMENTS	3655:1	3659:1	4	
LEAF_NODE	3655:1	3655:1	5	{
STATEMENTS	3656:2	3658:2	5	
SELECTION	3656:2	3657:3	6	
KEYWORD	3656:2	3656:2	7	if
LEAF_NODE	3656:2	3656:2	8	if
LEAF_NODE	3656:5	3656:5	7	(
CONDITION	3656:6	3656:6	7	! TIFFFetchNormalTag ( tif , dp , 0 )
EXPR	3656:6	3656:6	8	! TIFFFetchNormalTag ( tif , dp , 0 )
UNARY_EXPR	3656:6	3656:7	9	! TIFFFetchNormalTag ( tif , dp , 0 )
UNARY_OPERATOR	3656:6	3656:6	10	!
LEAF_NODE	3656:6	3656:6	11	!
FUNCTION_CALL	3656:7	3656:34	10	TIFFFetchNormalTag ( tif , dp , 0 )
CALLEE	3656:7	3656:7	11	TIFFFetchNormalTag
LEAF_NODE	3656:7	3656:7	12	TIFFFetchNormalTag
LEAF_NODE	3656:25	3656:25	11	(
ARGUMENT	3656:26	3656:26	11	tif
FIELD	3656:26	3656:26	12	tif
LEAF_NODE	3656:26	3656:26	13	tif
LEAF_NODE	3656:29	3656:29	11	,
ARGUMENT	3656:30	3656:30	11	dp
FIELD	3656:30	3656:30	12	dp
LEAF_NODE	3656:30	3656:30	13	dp
LEAF_NODE	3656:32	3656:32	11	,
ARGUMENT	3656:33	3656:33	11	0
FIELD	3656:33	3656:33	12	0
LEAF_NODE	3656:33	3656:33	13	0
LEAF_NODE	3656:34	3656:34	11	)
LEAF_NODE	3656:35	3656:35	7	)
STATEMENTS	3657:3	3657:3	7	
JUMP_STATEMENT	3657:3	3657:11	8	goto bad ;
KEYWORD	3657:3	3657:3	9	goto
LEAF_NODE	3657:3	3657:3	10	goto
DESTINATION	3657:8	3657:8	9	bad
LEAF_NODE	3657:8	3657:8	10	bad
LEAF_NODE	3657:11	3657:11	9	;
EXPR_STATEMENT	3658:2	3658:24	6	dp -> tdir_ignore = TRUE ;
EXPR	3658:2	3658:2	7	dp -> tdir_ignore = TRUE
ASSIGN	3658:2	3658:20	8	dp -> tdir_ignore = TRUE
LVAL	3658:2	3658:2	9	dp -> tdir_ignore
FIELD	3658:2	3658:6	10	dp -> tdir_ignore
LEAF_NODE	3658:2	3658:2	11	dp
LEAF_NODE	3658:4	3658:4	11	->
LEAF_NODE	3658:6	3658:6	11	tdir_ignore
ASSIGN_OP	3658:18	3658:18	9	=
LEAF_NODE	3658:18	3658:18	10	=
RVAL	3658:20	3658:20	9	TRUE
FIELD	3658:20	3658:20	10	TRUE
LEAF_NODE	3658:20	3658:20	11	TRUE
LEAF_NODE	3658:24	3658:24	7	;
LEAF_NODE	3659:1	3659:1	5	}
EXPR_STATEMENT	3660:1	3660:68	3	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_COMPRESSION ) ;
EXPR	3660:1	3660:1	4	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_COMPRESSION )
ASSIGN	3660:1	3660:4	5	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_COMPRESSION )
LVAL	3660:1	3660:1	6	dp
FIELD	3660:1	3660:1	7	dp
LEAF_NODE	3660:1	3660:1	8	dp
ASSIGN_OP	3660:3	3660:3	6	=
LEAF_NODE	3660:3	3660:3	7	=
RVAL	3660:4	3660:4	6	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_COMPRESSION )
FUNCTION_CALL	3660:4	3660:67	7	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_COMPRESSION )
CALLEE	3660:4	3660:4	8	TIFFReadDirectoryFindEntry
LEAF_NODE	3660:4	3660:4	9	TIFFReadDirectoryFindEntry
LEAF_NODE	3660:30	3660:30	8	(
ARGUMENT	3660:31	3660:31	8	tif
FIELD	3660:31	3660:31	9	tif
LEAF_NODE	3660:31	3660:31	10	tif
LEAF_NODE	3660:34	3660:34	8	,
ARGUMENT	3660:35	3660:35	8	dir
FIELD	3660:35	3660:35	9	dir
LEAF_NODE	3660:35	3660:35	10	dir
LEAF_NODE	3660:38	3660:38	8	,
ARGUMENT	3660:39	3660:39	8	dircount
FIELD	3660:39	3660:39	9	dircount
LEAF_NODE	3660:39	3660:39	10	dircount
LEAF_NODE	3660:47	3660:47	8	,
ARGUMENT	3660:48	3660:48	8	TIFFTAG_COMPRESSION
FIELD	3660:48	3660:48	9	TIFFTAG_COMPRESSION
LEAF_NODE	3660:48	3660:48	10	TIFFTAG_COMPRESSION
LEAF_NODE	3660:67	3660:67	8	)
LEAF_NODE	3660:68	3660:68	4	;
SELECTION	3661:1	3662:1	3	
KEYWORD	3661:1	3661:1	4	if
LEAF_NODE	3661:1	3661:1	5	if
LEAF_NODE	3661:4	3661:4	4	(
CONDITION	3661:5	3661:5	4	dp
EXPR	3661:5	3661:5	5	dp
FIELD	3661:5	3661:5	6	dp
LEAF_NODE	3661:5	3661:5	7	dp
LEAF_NODE	3661:7	3661:7	4	)
STATEMENTS	3662:1	3682:1	4	
LEAF_NODE	3662:1	3662:1	5	{
STATEMENTS	3669:2	3681:2	5	
SIMPLE_DECL	3669:2	3669:14	6	uint16 value ;
VAR_DECL	3669:2	3669:9	7	uint16 value
TYPE	3669:2	3669:2	8	uint16
TYPE_NAME	3669:2	3669:2	9	uint16
LEAF_NODE	3669:2	3669:2	10	uint16
NAME	3669:9	3669:9	8	value
LEAF_NODE	3669:9	3669:9	9	value
LEAF_NODE	3669:14	3669:14	7	;
SIMPLE_DECL	3670:2	3670:30	6	enum TIFFReadDirEntryErr err ;
VAR_DECL	3670:2	3670:27	7	enum TIFFReadDirEntryErr err
TYPE	3670:2	3670:2	8	enum TIFFReadDirEntryErr
TYPE_NAME	3670:2	3670:7	9	enum TIFFReadDirEntryErr
LEAF_NODE	3670:2	3670:2	10	enum
LEAF_NODE	3670:7	3670:7	10	TIFFReadDirEntryErr
NAME	3670:27	3670:27	8	err
LEAF_NODE	3670:27	3670:27	9	err
LEAF_NODE	3670:30	3670:30	7	;
EXPR_STATEMENT	3671:2	3671:42	6	err = TIFFReadDirEntryShort ( tif , dp , & value ) ;
EXPR	3671:2	3671:2	7	err = TIFFReadDirEntryShort ( tif , dp , & value )
ASSIGN	3671:2	3671:6	8	err = TIFFReadDirEntryShort ( tif , dp , & value )
LVAL	3671:2	3671:2	9	err
FIELD	3671:2	3671:2	10	err
LEAF_NODE	3671:2	3671:2	11	err
ASSIGN_OP	3671:5	3671:5	9	=
LEAF_NODE	3671:5	3671:5	10	=
RVAL	3671:6	3671:6	9	TIFFReadDirEntryShort ( tif , dp , & value )
FUNCTION_CALL	3671:6	3671:41	10	TIFFReadDirEntryShort ( tif , dp , & value )
CALLEE	3671:6	3671:6	11	TIFFReadDirEntryShort
LEAF_NODE	3671:6	3671:6	12	TIFFReadDirEntryShort
LEAF_NODE	3671:27	3671:27	11	(
ARGUMENT	3671:28	3671:28	11	tif
FIELD	3671:28	3671:28	12	tif
LEAF_NODE	3671:28	3671:28	13	tif
LEAF_NODE	3671:31	3671:31	11	,
ARGUMENT	3671:32	3671:32	11	dp
FIELD	3671:32	3671:32	12	dp
LEAF_NODE	3671:32	3671:32	13	dp
LEAF_NODE	3671:34	3671:34	11	,
ARGUMENT	3671:35	3671:35	11	& value
UNARY_EXPR	3671:35	3671:36	12	& value
UNARY_OPERATOR	3671:35	3671:35	13	&
LEAF_NODE	3671:35	3671:35	14	&
FIELD	3671:36	3671:36	13	value
LEAF_NODE	3671:36	3671:36	14	value
LEAF_NODE	3671:41	3671:41	11	)
LEAF_NODE	3671:42	3671:42	7	;
SELECTION	3672:2	3673:3	6	
KEYWORD	3672:2	3672:2	7	if
LEAF_NODE	3672:2	3672:2	8	if
LEAF_NODE	3672:5	3672:5	7	(
CONDITION	3672:6	3672:6	7	err == TIFFReadDirEntryErrCount
EXPR	3672:6	3672:11	8	err == TIFFReadDirEntryErrCount
FIELD	3672:6	3672:6	9	err
LEAF_NODE	3672:6	3672:6	10	err
EQ_OPERATOR	3672:9	3672:9	9	==
LEAF_NODE	3672:9	3672:9	10	==
FIELD	3672:11	3672:11	9	TIFFReadDirEntryErrCount
LEAF_NODE	3672:11	3672:11	10	TIFFReadDirEntryErrCount
LEAF_NODE	3672:35	3672:35	7	)
STATEMENTS	3673:3	3673:3	7	
EXPR_STATEMENT	3673:3	3673:52	8	err = TIFFReadDirEntryPersampleShort ( tif , dp , & value ) ;
EXPR	3673:3	3673:3	9	err = TIFFReadDirEntryPersampleShort ( tif , dp , & value )
ASSIGN	3673:3	3673:7	10	err = TIFFReadDirEntryPersampleShort ( tif , dp , & value )
LVAL	3673:3	3673:3	11	err
FIELD	3673:3	3673:3	12	err
LEAF_NODE	3673:3	3673:3	13	err
ASSIGN_OP	3673:6	3673:6	11	=
LEAF_NODE	3673:6	3673:6	12	=
RVAL	3673:7	3673:7	11	TIFFReadDirEntryPersampleShort ( tif , dp , & value )
FUNCTION_CALL	3673:7	3673:51	12	TIFFReadDirEntryPersampleShort ( tif , dp , & value )
CALLEE	3673:7	3673:7	13	TIFFReadDirEntryPersampleShort
LEAF_NODE	3673:7	3673:7	14	TIFFReadDirEntryPersampleShort
LEAF_NODE	3673:37	3673:37	13	(
ARGUMENT	3673:38	3673:38	13	tif
FIELD	3673:38	3673:38	14	tif
LEAF_NODE	3673:38	3673:38	15	tif
LEAF_NODE	3673:41	3673:41	13	,
ARGUMENT	3673:42	3673:42	13	dp
FIELD	3673:42	3673:42	14	dp
LEAF_NODE	3673:42	3673:42	15	dp
LEAF_NODE	3673:44	3673:44	13	,
ARGUMENT	3673:45	3673:45	13	& value
UNARY_EXPR	3673:45	3673:46	14	& value
UNARY_OPERATOR	3673:45	3673:45	15	&
LEAF_NODE	3673:45	3673:45	16	&
FIELD	3673:46	3673:46	15	value
LEAF_NODE	3673:46	3673:46	16	value
LEAF_NODE	3673:51	3673:51	13	)
LEAF_NODE	3673:52	3673:52	9	;
SELECTION	3674:2	3675:2	6	
KEYWORD	3674:2	3674:2	7	if
LEAF_NODE	3674:2	3674:2	8	if
LEAF_NODE	3674:5	3674:5	7	(
CONDITION	3674:6	3674:6	7	err != TIFFReadDirEntryErrOk
EXPR	3674:6	3674:11	8	err != TIFFReadDirEntryErrOk
FIELD	3674:6	3674:6	9	err
LEAF_NODE	3674:6	3674:6	10	err
EQ_OPERATOR	3674:9	3674:9	9	!=
LEAF_NODE	3674:9	3674:9	10	!=
FIELD	3674:11	3674:11	9	TIFFReadDirEntryErrOk
LEAF_NODE	3674:11	3674:11	10	TIFFReadDirEntryErrOk
LEAF_NODE	3674:32	3674:32	7	)
STATEMENTS	3675:2	3678:2	7	
LEAF_NODE	3675:2	3675:2	8	{
STATEMENTS	3676:3	3677:3	8	
EXPR_STATEMENT	3676:3	3676:60	9	TIFFReadDirEntryOutputErr ( tif , err , module , "Compression" , 0 ) ;
EXPR	3676:3	3676:3	10	TIFFReadDirEntryOutputErr ( tif , err , module , "Compression" , 0 )
FUNCTION_CALL	3676:3	3676:59	11	TIFFReadDirEntryOutputErr ( tif , err , module , "Compression" , 0 )
CALLEE	3676:3	3676:3	12	TIFFReadDirEntryOutputErr
LEAF_NODE	3676:3	3676:3	13	TIFFReadDirEntryOutputErr
LEAF_NODE	3676:28	3676:28	12	(
ARGUMENT	3676:29	3676:29	12	tif
FIELD	3676:29	3676:29	13	tif
LEAF_NODE	3676:29	3676:29	14	tif
LEAF_NODE	3676:32	3676:32	12	,
ARGUMENT	3676:33	3676:33	12	err
FIELD	3676:33	3676:33	13	err
LEAF_NODE	3676:33	3676:33	14	err
LEAF_NODE	3676:36	3676:36	12	,
ARGUMENT	3676:37	3676:37	12	module
FIELD	3676:37	3676:37	13	module
LEAF_NODE	3676:37	3676:37	14	module
LEAF_NODE	3676:43	3676:43	12	,
ARGUMENT	3676:44	3676:44	12	"Compression"
FIELD	3676:44	3676:44	13	"Compression"
LEAF_NODE	3676:44	3676:44	14	"Compression"
LEAF_NODE	3676:57	3676:57	12	,
ARGUMENT	3676:58	3676:58	12	0
FIELD	3676:58	3676:58	13	0
LEAF_NODE	3676:58	3676:58	14	0
LEAF_NODE	3676:59	3676:59	12	)
LEAF_NODE	3676:60	3676:60	10	;
JUMP_STATEMENT	3677:3	3677:11	9	goto bad ;
KEYWORD	3677:3	3677:3	10	goto
LEAF_NODE	3677:3	3677:3	11	goto
DESTINATION	3677:8	3677:8	10	bad
LEAF_NODE	3677:8	3677:8	11	bad
LEAF_NODE	3677:11	3677:11	10	;
LEAF_NODE	3678:2	3678:2	8	}
SELECTION	3679:2	3680:3	6	
KEYWORD	3679:2	3679:2	7	if
LEAF_NODE	3679:2	3679:2	8	if
LEAF_NODE	3679:5	3679:5	7	(
CONDITION	3679:6	3679:6	7	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , value )
EXPR	3679:6	3679:6	8	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , value )
UNARY_EXPR	3679:6	3679:7	9	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , value )
UNARY_OPERATOR	3679:6	3679:6	10	!
LEAF_NODE	3679:6	3679:6	11	!
FUNCTION_CALL	3679:7	3679:49	10	TIFFSetField ( tif , TIFFTAG_COMPRESSION , value )
CALLEE	3679:7	3679:7	11	TIFFSetField
LEAF_NODE	3679:7	3679:7	12	TIFFSetField
LEAF_NODE	3679:19	3679:19	11	(
ARGUMENT	3679:20	3679:20	11	tif
FIELD	3679:20	3679:20	12	tif
LEAF_NODE	3679:20	3679:20	13	tif
LEAF_NODE	3679:23	3679:23	11	,
ARGUMENT	3679:24	3679:24	11	TIFFTAG_COMPRESSION
FIELD	3679:24	3679:24	12	TIFFTAG_COMPRESSION
LEAF_NODE	3679:24	3679:24	13	TIFFTAG_COMPRESSION
LEAF_NODE	3679:43	3679:43	11	,
ARGUMENT	3679:44	3679:44	11	value
FIELD	3679:44	3679:44	12	value
LEAF_NODE	3679:44	3679:44	13	value
LEAF_NODE	3679:49	3679:49	11	)
LEAF_NODE	3679:50	3679:50	7	)
STATEMENTS	3680:3	3680:3	7	
JUMP_STATEMENT	3680:3	3680:11	8	goto bad ;
KEYWORD	3680:3	3680:3	9	goto
LEAF_NODE	3680:3	3680:3	10	goto
DESTINATION	3680:8	3680:8	9	bad
LEAF_NODE	3680:8	3680:8	10	bad
LEAF_NODE	3680:11	3680:11	9	;
EXPR_STATEMENT	3681:2	3681:24	6	dp -> tdir_ignore = TRUE ;
EXPR	3681:2	3681:2	7	dp -> tdir_ignore = TRUE
ASSIGN	3681:2	3681:20	8	dp -> tdir_ignore = TRUE
LVAL	3681:2	3681:2	9	dp -> tdir_ignore
FIELD	3681:2	3681:6	10	dp -> tdir_ignore
LEAF_NODE	3681:2	3681:2	11	dp
LEAF_NODE	3681:4	3681:4	11	->
LEAF_NODE	3681:6	3681:6	11	tdir_ignore
ASSIGN_OP	3681:18	3681:18	9	=
LEAF_NODE	3681:18	3681:18	10	=
RVAL	3681:20	3681:20	9	TRUE
FIELD	3681:20	3681:20	10	TRUE
LEAF_NODE	3681:20	3681:20	11	TRUE
LEAF_NODE	3681:24	3681:24	7	;
LEAF_NODE	3682:1	3682:1	5	}
SELECTION	3683:1	3684:1	3	
KEYWORD	3683:1	3683:1	4	else
LEAF_NODE	3683:1	3683:1	5	else
STATEMENTS	3684:1	3687:1	4	
LEAF_NODE	3684:1	3684:1	5	{
STATEMENTS	3685:2	3685:2	5	
SELECTION	3685:2	3686:3	6	
KEYWORD	3685:2	3685:2	7	if
LEAF_NODE	3685:2	3685:2	8	if
LEAF_NODE	3685:5	3685:5	7	(
CONDITION	3685:6	3685:6	7	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
EXPR	3685:6	3685:6	8	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
UNARY_EXPR	3685:6	3685:7	9	! TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
UNARY_OPERATOR	3685:6	3685:6	10	!
LEAF_NODE	3685:6	3685:6	11	!
FUNCTION_CALL	3685:7	3685:60	10	TIFFSetField ( tif , TIFFTAG_COMPRESSION , COMPRESSION_NONE )
CALLEE	3685:7	3685:7	11	TIFFSetField
LEAF_NODE	3685:7	3685:7	12	TIFFSetField
LEAF_NODE	3685:19	3685:19	11	(
ARGUMENT	3685:20	3685:20	11	tif
FIELD	3685:20	3685:20	12	tif
LEAF_NODE	3685:20	3685:20	13	tif
LEAF_NODE	3685:23	3685:23	11	,
ARGUMENT	3685:24	3685:24	11	TIFFTAG_COMPRESSION
FIELD	3685:24	3685:24	12	TIFFTAG_COMPRESSION
LEAF_NODE	3685:24	3685:24	13	TIFFTAG_COMPRESSION
LEAF_NODE	3685:43	3685:43	11	,
ARGUMENT	3685:44	3685:44	11	COMPRESSION_NONE
FIELD	3685:44	3685:44	12	COMPRESSION_NONE
LEAF_NODE	3685:44	3685:44	13	COMPRESSION_NONE
LEAF_NODE	3685:60	3685:60	11	)
LEAF_NODE	3685:61	3685:61	7	)
STATEMENTS	3686:3	3686:3	7	
JUMP_STATEMENT	3686:3	3686:11	8	goto bad ;
KEYWORD	3686:3	3686:3	9	goto
LEAF_NODE	3686:3	3686:3	10	goto
DESTINATION	3686:8	3686:8	9	bad
LEAF_NODE	3686:8	3686:8	10	bad
LEAF_NODE	3686:11	3686:11	9	;
LEAF_NODE	3687:1	3687:1	5	}
ITERATION	3691:1	3692:1	3	
KEYWORD	3691:1	3691:1	4	for
LEAF_NODE	3691:1	3691:1	5	for
LEAF_NODE	3691:5	3691:5	4	(
FOR_INIT	3691:6	3691:18	4	di = 0 , dp = dir ;
EXPR	3691:6	3691:12	5	di = 0 , dp = dir
ASSIGN	3691:6	3691:9	6	di = 0
LVAL	3691:6	3691:6	7	di
FIELD	3691:6	3691:6	8	di
LEAF_NODE	3691:6	3691:6	9	di
ASSIGN_OP	3691:8	3691:8	7	=
LEAF_NODE	3691:8	3691:8	8	=
RVAL	3691:9	3691:9	7	0
FIELD	3691:9	3691:9	8	0
LEAF_NODE	3691:9	3691:9	9	0
LEAF_NODE	3691:10	3691:10	6	,
ASSIGN	3691:12	3691:15	6	dp = dir
LVAL	3691:12	3691:12	7	dp
FIELD	3691:12	3691:12	8	dp
LEAF_NODE	3691:12	3691:12	9	dp
ASSIGN_OP	3691:14	3691:14	7	=
LEAF_NODE	3691:14	3691:14	8	=
RVAL	3691:15	3691:15	7	dir
FIELD	3691:15	3691:15	8	dir
LEAF_NODE	3691:15	3691:15	9	dir
LEAF_NODE	3691:18	3691:18	5	;
CONDITION	3691:20	3691:20	4	di < dircount
EXPR	3691:20	3691:23	5	di < dircount
FIELD	3691:20	3691:20	6	di
LEAF_NODE	3691:20	3691:20	7	di
REL_OPERATOR	3691:22	3691:22	6	<
LEAF_NODE	3691:22	3691:22	7	<
FIELD	3691:23	3691:23	6	dircount
LEAF_NODE	3691:23	3691:23	7	dircount
LEAF_NODE	3691:31	3691:31	4	;
FOR_EXPR	3691:33	3691:33	4	di ++ , dp ++
EXPR	3691:33	3691:39	5	di ++ , dp ++
FIELD	3691:33	3691:35	6	di ++
LEAF_NODE	3691:33	3691:33	7	di
LEAF_NODE	3691:35	3691:35	7	++
LEAF_NODE	3691:37	3691:37	6	,
FIELD	3691:39	3691:41	6	dp ++
LEAF_NODE	3691:39	3691:39	7	dp
LEAF_NODE	3691:41	3691:41	7	++
LEAF_NODE	3691:43	3691:43	4	)
STATEMENTS	3692:1	3755:1	4	
LEAF_NODE	3692:1	3692:1	5	{
STATEMENTS	3693:2	3720:2	5	
SELECTION	3693:2	3694:2	6	
KEYWORD	3693:2	3693:2	7	if
LEAF_NODE	3693:2	3693:2	8	if
LEAF_NODE	3693:5	3693:5	7	(
CONDITION	3693:6	3693:6	7	! dp -> tdir_ignore
EXPR	3693:6	3693:6	8	! dp -> tdir_ignore
UNARY_EXPR	3693:6	3693:7	9	! dp -> tdir_ignore
UNARY_OPERATOR	3693:6	3693:6	10	!
LEAF_NODE	3693:6	3693:6	11	!
FIELD	3693:7	3693:11	10	dp -> tdir_ignore
LEAF_NODE	3693:7	3693:7	11	dp
LEAF_NODE	3693:9	3693:9	11	->
LEAF_NODE	3693:11	3693:11	11	tdir_ignore
LEAF_NODE	3693:22	3693:22	7	)
STATEMENTS	3694:2	3719:2	7	
LEAF_NODE	3694:2	3694:2	8	{
STATEMENTS	3695:3	3696:3	8	
EXPR_STATEMENT	3695:3	3695:56	9	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii ) ;
EXPR	3695:3	3695:3	10	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
FUNCTION_CALL	3695:3	3695:55	11	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
CALLEE	3695:3	3695:3	12	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	3695:3	3695:3	13	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	3695:33	3695:33	12	(
ARGUMENT	3695:34	3695:34	12	tif
FIELD	3695:34	3695:34	13	tif
LEAF_NODE	3695:34	3695:34	14	tif
LEAF_NODE	3695:37	3695:37	12	,
ARGUMENT	3695:38	3695:38	12	dp -> tdir_tag
FIELD	3695:38	3695:42	13	dp -> tdir_tag
LEAF_NODE	3695:38	3695:38	14	dp
LEAF_NODE	3695:40	3695:40	14	->
LEAF_NODE	3695:42	3695:42	14	tdir_tag
LEAF_NODE	3695:50	3695:50	12	,
ARGUMENT	3695:51	3695:51	12	& fii
UNARY_EXPR	3695:51	3695:52	13	& fii
UNARY_OPERATOR	3695:51	3695:51	14	&
LEAF_NODE	3695:51	3695:51	15	&
FIELD	3695:52	3695:52	14	fii
LEAF_NODE	3695:52	3695:52	15	fii
LEAF_NODE	3695:55	3695:55	12	)
LEAF_NODE	3695:56	3695:56	10	;
SELECTION	3696:3	3697:3	9	
KEYWORD	3696:3	3696:3	10	if
LEAF_NODE	3696:3	3696:3	11	if
LEAF_NODE	3696:6	3696:6	10	(
CONDITION	3696:7	3696:7	10	fii == FAILED_FII
EXPR	3696:7	3696:14	11	fii == FAILED_FII
FIELD	3696:7	3696:7	12	fii
LEAF_NODE	3696:7	3696:7	13	fii
EQ_OPERATOR	3696:11	3696:11	12	==
LEAF_NODE	3696:11	3696:11	13	==
FIELD	3696:14	3696:14	12	FAILED_FII
LEAF_NODE	3696:14	3696:14	13	FAILED_FII
LEAF_NODE	3696:24	3696:24	10	)
STATEMENTS	3697:3	3718:3	10	
LEAF_NODE	3697:3	3697:3	11	{
STATEMENTS	3698:4	3714:6	11	
EXPR_STATEMENT	3698:4	3700:34	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Unknown field with tag %d (0x%x) encountered" , dp -> tdir_tag , dp -> tdir_tag ) ;
EXPR	3698:4	3698:4	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Unknown field with tag %d (0x%x) encountered" , dp -> tdir_tag , dp -> tdir_tag )
FUNCTION_CALL	3698:4	3700:33	14	TIFFWarningExt ( tif -> tif_clientdata , module , "Unknown field with tag %d (0x%x) encountered" , dp -> tdir_tag , dp -> tdir_tag )
CALLEE	3698:4	3698:4	15	TIFFWarningExt
LEAF_NODE	3698:4	3698:4	16	TIFFWarningExt
LEAF_NODE	3698:18	3698:18	15	(
ARGUMENT	3698:19	3698:19	15	tif -> tif_clientdata
FIELD	3698:19	3698:24	16	tif -> tif_clientdata
LEAF_NODE	3698:19	3698:19	17	tif
LEAF_NODE	3698:22	3698:22	17	->
LEAF_NODE	3698:24	3698:24	17	tif_clientdata
LEAF_NODE	3698:38	3698:38	15	,
ARGUMENT	3698:40	3698:40	15	module
FIELD	3698:40	3698:40	16	module
LEAF_NODE	3698:40	3698:40	17	module
LEAF_NODE	3698:46	3698:46	15	,
ARGUMENT	3699:8	3699:8	15	"Unknown field with tag %d (0x%x) encountered"
FIELD	3699:8	3699:8	16	"Unknown field with tag %d (0x%x) encountered"
LEAF_NODE	3699:8	3699:8	17	"Unknown field with tag %d (0x%x) encountered"
LEAF_NODE	3699:54	3699:54	15	,
ARGUMENT	3700:8	3700:8	15	dp -> tdir_tag
FIELD	3700:8	3700:12	16	dp -> tdir_tag
LEAF_NODE	3700:8	3700:8	17	dp
LEAF_NODE	3700:10	3700:10	17	->
LEAF_NODE	3700:12	3700:12	17	tdir_tag
LEAF_NODE	3700:20	3700:20	15	,
ARGUMENT	3700:21	3700:21	15	dp -> tdir_tag
FIELD	3700:21	3700:25	16	dp -> tdir_tag
LEAF_NODE	3700:21	3700:21	17	dp
LEAF_NODE	3700:23	3700:23	17	->
LEAF_NODE	3700:25	3700:25	17	tdir_tag
LEAF_NODE	3700:33	3700:33	15	)
LEAF_NODE	3700:34	3700:34	13	;
SELECTION	3703:4	3707:9	12	
KEYWORD	3703:4	3703:4	13	if
LEAF_NODE	3703:4	3703:4	14	if
LEAF_NODE	3703:7	3703:7	13	(
CONDITION	3703:8	3703:8	13	! _TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
EXPR	3703:8	3703:8	14	! _TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
UNARY_EXPR	3703:8	3703:9	15	! _TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
UNARY_OPERATOR	3703:8	3703:8	16	!
LEAF_NODE	3703:8	3703:8	17	!
FUNCTION_CALL	3703:9	3707:6	16	_TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
CALLEE	3703:9	3703:9	17	_TIFFMergeFields
LEAF_NODE	3703:9	3703:9	18	_TIFFMergeFields
LEAF_NODE	3703:25	3703:25	17	(
ARGUMENT	3703:26	3703:26	17	tif
FIELD	3703:26	3703:26	18	tif
LEAF_NODE	3703:26	3703:26	19	tif
LEAF_NODE	3703:29	3703:29	17	,
ARGUMENT	3704:5	3704:5	17	_TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type )
FUNCTION_CALL	3704:5	3706:34	18	_TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type )
CALLEE	3704:5	3704:5	19	_TIFFCreateAnonField
LEAF_NODE	3704:5	3704:5	20	_TIFFCreateAnonField
LEAF_NODE	3704:25	3704:25	19	(
ARGUMENT	3704:26	3704:26	19	tif
FIELD	3704:26	3704:26	20	tif
LEAF_NODE	3704:26	3704:26	21	tif
LEAF_NODE	3704:29	3704:29	19	,
ARGUMENT	3705:6	3705:6	19	dp -> tdir_tag
FIELD	3705:6	3705:10	20	dp -> tdir_tag
LEAF_NODE	3705:6	3705:6	21	dp
LEAF_NODE	3705:8	3705:8	21	->
LEAF_NODE	3705:10	3705:10	21	tdir_tag
LEAF_NODE	3705:18	3705:18	19	,
ARGUMENT	3706:6	3706:21	19	( TIFFDataType ) dp -> tdir_type
LEAF_NODE	3706:6	3706:6	20	(
TYPE_NAME	3706:7	3706:7	20	TIFFDataType
LEAF_NODE	3706:7	3706:7	21	TIFFDataType
LEAF_NODE	3706:19	3706:19	20	)
FIELD	3706:21	3706:25	20	dp -> tdir_type
LEAF_NODE	3706:21	3706:21	21	dp
LEAF_NODE	3706:23	3706:23	21	->
LEAF_NODE	3706:25	3706:25	21	tdir_type
LEAF_NODE	3706:34	3706:34	19	)
LEAF_NODE	3706:35	3706:35	17	,
ARGUMENT	3707:5	3707:5	17	1
FIELD	3707:5	3707:5	18	1
LEAF_NODE	3707:5	3707:5	19	1
LEAF_NODE	3707:6	3707:6	17	)
LEAF_NODE	3707:7	3707:7	13	)
STATEMENTS	3707:9	3714:4	13	
LEAF_NODE	3707:9	3707:9	14	{
STATEMENTS	3708:5	3713:5	14	
EXPR_STATEMENT	3708:5	3712:22	15	TIFFWarningExt ( tif -> tif_clientdata , module , "Registering anonymous field with tag %d (0x%x) failed" , dp -> tdir_tag , dp -> tdir_tag ) ;
EXPR	3708:5	3708:5	16	TIFFWarningExt ( tif -> tif_clientdata , module , "Registering anonymous field with tag %d (0x%x) failed" , dp -> tdir_tag , dp -> tdir_tag )
FUNCTION_CALL	3708:5	3712:21	17	TIFFWarningExt ( tif -> tif_clientdata , module , "Registering anonymous field with tag %d (0x%x) failed" , dp -> tdir_tag , dp -> tdir_tag )
CALLEE	3708:5	3708:5	18	TIFFWarningExt
LEAF_NODE	3708:5	3708:5	19	TIFFWarningExt
LEAF_NODE	3708:19	3708:19	18	(
ARGUMENT	3708:20	3708:20	18	tif -> tif_clientdata
FIELD	3708:20	3708:25	19	tif -> tif_clientdata
LEAF_NODE	3708:20	3708:20	20	tif
LEAF_NODE	3708:23	3708:23	20	->
LEAF_NODE	3708:25	3708:25	20	tif_clientdata
LEAF_NODE	3708:39	3708:39	18	,
ARGUMENT	3709:9	3709:9	18	module
FIELD	3709:9	3709:9	19	module
LEAF_NODE	3709:9	3709:9	20	module
LEAF_NODE	3709:15	3709:15	18	,
ARGUMENT	3710:9	3710:9	18	"Registering anonymous field with tag %d (0x%x) failed"
FIELD	3710:9	3710:9	19	"Registering anonymous field with tag %d (0x%x) failed"
LEAF_NODE	3710:9	3710:9	20	"Registering anonymous field with tag %d (0x%x) failed"
LEAF_NODE	3710:64	3710:64	18	,
ARGUMENT	3711:9	3711:9	18	dp -> tdir_tag
FIELD	3711:9	3711:13	19	dp -> tdir_tag
LEAF_NODE	3711:9	3711:9	20	dp
LEAF_NODE	3711:11	3711:11	20	->
LEAF_NODE	3711:13	3711:13	20	tdir_tag
LEAF_NODE	3711:21	3711:21	18	,
ARGUMENT	3712:9	3712:9	18	dp -> tdir_tag
FIELD	3712:9	3712:13	19	dp -> tdir_tag
LEAF_NODE	3712:9	3712:9	20	dp
LEAF_NODE	3712:11	3712:11	20	->
LEAF_NODE	3712:13	3712:13	20	tdir_tag
LEAF_NODE	3712:21	3712:21	18	)
LEAF_NODE	3712:22	3712:22	16	;
EXPR_STATEMENT	3713:5	3713:27	15	dp -> tdir_ignore = TRUE ;
EXPR	3713:5	3713:5	16	dp -> tdir_ignore = TRUE
ASSIGN	3713:5	3713:23	17	dp -> tdir_ignore = TRUE
LVAL	3713:5	3713:5	18	dp -> tdir_ignore
FIELD	3713:5	3713:9	19	dp -> tdir_ignore
LEAF_NODE	3713:5	3713:5	20	dp
LEAF_NODE	3713:7	3713:7	20	->
LEAF_NODE	3713:9	3713:9	20	tdir_ignore
ASSIGN_OP	3713:21	3713:21	18	=
LEAF_NODE	3713:21	3713:21	19	=
RVAL	3713:23	3713:23	18	TRUE
FIELD	3713:23	3713:23	19	TRUE
LEAF_NODE	3713:23	3713:23	20	TRUE
LEAF_NODE	3713:27	3713:27	16	;
LEAF_NODE	3714:4	3714:4	14	}
SELECTION	3714:6	3714:11	12	
KEYWORD	3714:6	3714:6	13	else
LEAF_NODE	3714:6	3714:6	14	else
STATEMENTS	3714:11	3717:4	13	
LEAF_NODE	3714:11	3714:11	14	{
STATEMENTS	3715:5	3716:5	14	
EXPR_STATEMENT	3715:5	3715:58	15	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii ) ;
EXPR	3715:5	3715:5	16	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
FUNCTION_CALL	3715:5	3715:57	17	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
CALLEE	3715:5	3715:5	18	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	3715:5	3715:5	19	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	3715:35	3715:35	18	(
ARGUMENT	3715:36	3715:36	18	tif
FIELD	3715:36	3715:36	19	tif
LEAF_NODE	3715:36	3715:36	20	tif
LEAF_NODE	3715:39	3715:39	18	,
ARGUMENT	3715:40	3715:40	18	dp -> tdir_tag
FIELD	3715:40	3715:44	19	dp -> tdir_tag
LEAF_NODE	3715:40	3715:40	20	dp
LEAF_NODE	3715:42	3715:42	20	->
LEAF_NODE	3715:44	3715:44	20	tdir_tag
LEAF_NODE	3715:52	3715:52	18	,
ARGUMENT	3715:53	3715:53	18	& fii
UNARY_EXPR	3715:53	3715:54	19	& fii
UNARY_OPERATOR	3715:53	3715:53	20	&
LEAF_NODE	3715:53	3715:53	21	&
FIELD	3715:54	3715:54	20	fii
LEAF_NODE	3715:54	3715:54	21	fii
LEAF_NODE	3715:57	3715:57	18	)
LEAF_NODE	3715:58	3715:58	16	;
EXPR_STATEMENT	3716:5	3716:30	15	assert ( fii != FAILED_FII ) ;
EXPR	3716:5	3716:5	16	assert ( fii != FAILED_FII )
FUNCTION_CALL	3716:5	3716:29	17	assert ( fii != FAILED_FII )
CALLEE	3716:5	3716:5	18	assert
LEAF_NODE	3716:5	3716:5	19	assert
LEAF_NODE	3716:11	3716:11	18	(
ARGUMENT	3716:12	3716:19	18	fii != FAILED_FII
FIELD	3716:12	3716:12	19	fii
LEAF_NODE	3716:12	3716:12	20	fii
EQ_OPERATOR	3716:16	3716:16	19	!=
LEAF_NODE	3716:16	3716:16	20	!=
FIELD	3716:19	3716:19	19	FAILED_FII
LEAF_NODE	3716:19	3716:19	20	FAILED_FII
LEAF_NODE	3716:29	3716:29	18	)
LEAF_NODE	3716:30	3716:30	16	;
LEAF_NODE	3717:4	3717:4	14	}
LEAF_NODE	3718:3	3718:3	11	}
LEAF_NODE	3719:2	3719:2	8	}
SELECTION	3720:2	3721:2	6	
KEYWORD	3720:2	3720:2	7	if
LEAF_NODE	3720:2	3720:2	8	if
LEAF_NODE	3720:5	3720:5	7	(
CONDITION	3720:6	3720:6	7	! dp -> tdir_ignore
EXPR	3720:6	3720:6	8	! dp -> tdir_ignore
UNARY_EXPR	3720:6	3720:7	9	! dp -> tdir_ignore
UNARY_OPERATOR	3720:6	3720:6	10	!
LEAF_NODE	3720:6	3720:6	11	!
FIELD	3720:7	3720:11	10	dp -> tdir_ignore
LEAF_NODE	3720:7	3720:7	11	dp
LEAF_NODE	3720:9	3720:9	11	->
LEAF_NODE	3720:11	3720:11	11	tdir_ignore
LEAF_NODE	3720:22	3720:22	7	)
STATEMENTS	3721:2	3754:2	7	
LEAF_NODE	3721:2	3721:2	8	{
STATEMENTS	3722:3	3725:3	8	
EXPR_STATEMENT	3722:3	3722:27	9	fip = tif -> tif_fields [ fii ] ;
EXPR	3722:3	3722:3	10	fip = tif -> tif_fields [ fii ]
ASSIGN	3722:3	3722:7	11	fip = tif -> tif_fields [ fii ]
LVAL	3722:3	3722:3	12	fip
FIELD	3722:3	3722:3	13	fip
LEAF_NODE	3722:3	3722:3	14	fip
ASSIGN_OP	3722:6	3722:6	12	=
LEAF_NODE	3722:6	3722:6	13	=
RVAL	3722:7	3722:7	12	tif -> tif_fields [ fii ]
FIELD	3722:7	3722:26	13	tif -> tif_fields [ fii ]
LEAF_NODE	3722:7	3722:7	14	tif
LEAF_NODE	3722:10	3722:10	14	->
LEAF_NODE	3722:12	3722:12	14	tif_fields
LEAF_NODE	3722:22	3722:22	14	[
EXPR	3722:23	3722:23	14	fii
FIELD	3722:23	3722:23	15	fii
LEAF_NODE	3722:23	3722:23	16	fii
LEAF_NODE	3722:26	3722:26	14	]
LEAF_NODE	3722:27	3722:27	10	;
SELECTION	3723:3	3724:4	9	
KEYWORD	3723:3	3723:3	10	if
LEAF_NODE	3723:3	3723:3	11	if
LEAF_NODE	3723:6	3723:6	10	(
CONDITION	3723:7	3723:7	10	fip -> field_bit == FIELD_IGNORE
EXPR	3723:7	3723:23	11	fip -> field_bit == FIELD_IGNORE
FIELD	3723:7	3723:12	12	fip -> field_bit
LEAF_NODE	3723:7	3723:7	13	fip
LEAF_NODE	3723:10	3723:10	13	->
LEAF_NODE	3723:12	3723:12	13	field_bit
EQ_OPERATOR	3723:21	3723:21	12	==
LEAF_NODE	3723:21	3723:21	13	==
FIELD	3723:23	3723:23	12	FIELD_IGNORE
LEAF_NODE	3723:23	3723:23	13	FIELD_IGNORE
LEAF_NODE	3723:35	3723:35	10	)
STATEMENTS	3724:4	3724:4	10	
EXPR_STATEMENT	3724:4	3724:26	11	dp -> tdir_ignore = TRUE ;
EXPR	3724:4	3724:4	12	dp -> tdir_ignore = TRUE
ASSIGN	3724:4	3724:22	13	dp -> tdir_ignore = TRUE
LVAL	3724:4	3724:4	14	dp -> tdir_ignore
FIELD	3724:4	3724:8	15	dp -> tdir_ignore
LEAF_NODE	3724:4	3724:4	16	dp
LEAF_NODE	3724:6	3724:6	16	->
LEAF_NODE	3724:8	3724:8	16	tdir_ignore
ASSIGN_OP	3724:20	3724:20	14	=
LEAF_NODE	3724:20	3724:20	15	=
RVAL	3724:22	3724:22	14	TRUE
FIELD	3724:22	3724:22	15	TRUE
LEAF_NODE	3724:22	3724:22	16	TRUE
LEAF_NODE	3724:26	3724:26	12	;
SELECTION	3725:3	3726:3	9	
KEYWORD	3725:3	3725:3	10	else
LEAF_NODE	3725:3	3725:3	11	else
STATEMENTS	3726:3	3753:3	10	
LEAF_NODE	3726:3	3726:3	11	{
STATEMENTS	3727:4	3727:4	11	
SELECTION	3727:4	3728:4	12	
KEYWORD	3727:4	3727:4	13	switch
LEAF_NODE	3727:4	3727:4	14	switch
LEAF_NODE	3727:11	3727:11	13	(
CONDITION	3727:12	3727:12	13	dp -> tdir_tag
EXPR	3727:12	3727:12	14	dp -> tdir_tag
FIELD	3727:12	3727:16	15	dp -> tdir_tag
LEAF_NODE	3727:12	3727:12	16	dp
LEAF_NODE	3727:14	3727:14	16	->
LEAF_NODE	3727:16	3727:16	16	tdir_tag
LEAF_NODE	3727:24	3727:24	13	)
STATEMENTS	3728:4	3752:4	13	
LEAF_NODE	3728:4	3728:4	14	{
STATEMENTS	3729:5	3751:6	14	
LABEL	3729:5	3729:30	15	case TIFFTAG_STRIPOFFSETS :
LEAF_NODE	3729:5	3729:5	16	case
LEAF_NODE	3729:10	3729:10	16	TIFFTAG_STRIPOFFSETS
LEAF_NODE	3729:30	3729:30	16	:
LABEL	3730:5	3730:33	15	case TIFFTAG_STRIPBYTECOUNTS :
LEAF_NODE	3730:5	3730:5	16	case
LEAF_NODE	3730:10	3730:10	16	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	3730:33	3730:33	16	:
LABEL	3731:5	3731:29	15	case TIFFTAG_TILEOFFSETS :
LEAF_NODE	3731:5	3731:5	16	case
LEAF_NODE	3731:10	3731:10	16	TIFFTAG_TILEOFFSETS
LEAF_NODE	3731:29	3731:29	16	:
LABEL	3732:5	3732:32	15	case TIFFTAG_TILEBYTECOUNTS :
LEAF_NODE	3732:5	3732:5	16	case
LEAF_NODE	3732:10	3732:10	16	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	3732:32	3732:32	16	:
EXPR_STATEMENT	3733:6	3733:41	15	TIFFSetFieldBit ( tif , fip -> field_bit ) ;
EXPR	3733:6	3733:6	16	TIFFSetFieldBit ( tif , fip -> field_bit )
FUNCTION_CALL	3733:6	3733:40	17	TIFFSetFieldBit ( tif , fip -> field_bit )
CALLEE	3733:6	3733:6	18	TIFFSetFieldBit
LEAF_NODE	3733:6	3733:6	19	TIFFSetFieldBit
LEAF_NODE	3733:21	3733:21	18	(
ARGUMENT	3733:22	3733:22	18	tif
FIELD	3733:22	3733:22	19	tif
LEAF_NODE	3733:22	3733:22	20	tif
LEAF_NODE	3733:25	3733:25	18	,
ARGUMENT	3733:26	3733:26	18	fip -> field_bit
FIELD	3733:26	3733:31	19	fip -> field_bit
LEAF_NODE	3733:26	3733:26	20	fip
LEAF_NODE	3733:29	3733:29	20	->
LEAF_NODE	3733:31	3733:31	20	field_bit
LEAF_NODE	3733:40	3733:40	18	)
LEAF_NODE	3733:41	3733:41	16	;
JUMP_STATEMENT	3734:6	3734:11	15	break DESTINATION ;
KEYWORD	3734:6	3734:6	16	break
LEAF_NODE	3734:6	3734:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	3734:11	3734:11	16	;
LABEL	3735:5	3735:28	15	case TIFFTAG_IMAGEWIDTH :
LEAF_NODE	3735:5	3735:5	16	case
LEAF_NODE	3735:10	3735:10	16	TIFFTAG_IMAGEWIDTH
LEAF_NODE	3735:28	3735:28	16	:
LABEL	3736:5	3736:29	15	case TIFFTAG_IMAGELENGTH :
LEAF_NODE	3736:5	3736:5	16	case
LEAF_NODE	3736:10	3736:10	16	TIFFTAG_IMAGELENGTH
LEAF_NODE	3736:29	3736:29	16	:
LABEL	3737:5	3737:28	15	case TIFFTAG_IMAGEDEPTH :
LEAF_NODE	3737:5	3737:5	16	case
LEAF_NODE	3737:10	3737:10	16	TIFFTAG_IMAGEDEPTH
LEAF_NODE	3737:28	3737:28	16	:
LABEL	3738:5	3738:28	15	case TIFFTAG_TILELENGTH :
LEAF_NODE	3738:5	3738:5	16	case
LEAF_NODE	3738:10	3738:10	16	TIFFTAG_TILELENGTH
LEAF_NODE	3738:28	3738:28	16	:
LABEL	3739:5	3739:27	15	case TIFFTAG_TILEWIDTH :
LEAF_NODE	3739:5	3739:5	16	case
LEAF_NODE	3739:10	3739:10	16	TIFFTAG_TILEWIDTH
LEAF_NODE	3739:27	3739:27	16	:
LABEL	3740:5	3740:27	15	case TIFFTAG_TILEDEPTH :
LEAF_NODE	3740:5	3740:5	16	case
LEAF_NODE	3740:10	3740:10	16	TIFFTAG_TILEDEPTH
LEAF_NODE	3740:27	3740:27	16	:
LABEL	3741:5	3741:30	15	case TIFFTAG_PLANARCONFIG :
LEAF_NODE	3741:5	3741:5	16	case
LEAF_NODE	3741:10	3741:10	16	TIFFTAG_PLANARCONFIG
LEAF_NODE	3741:30	3741:30	16	:
LABEL	3742:5	3742:30	15	case TIFFTAG_ROWSPERSTRIP :
LEAF_NODE	3742:5	3742:5	16	case
LEAF_NODE	3742:10	3742:10	16	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	3742:30	3742:30	16	:
LABEL	3743:5	3743:30	15	case TIFFTAG_EXTRASAMPLES :
LEAF_NODE	3743:5	3743:5	16	case
LEAF_NODE	3743:10	3743:10	16	TIFFTAG_EXTRASAMPLES
LEAF_NODE	3743:30	3743:30	16	:
SELECTION	3744:6	3745:7	15	
KEYWORD	3744:6	3744:6	16	if
LEAF_NODE	3744:6	3744:6	17	if
LEAF_NODE	3744:9	3744:9	16	(
CONDITION	3744:10	3744:10	16	! TIFFFetchNormalTag ( tif , dp , 0 )
EXPR	3744:10	3744:10	17	! TIFFFetchNormalTag ( tif , dp , 0 )
UNARY_EXPR	3744:10	3744:11	18	! TIFFFetchNormalTag ( tif , dp , 0 )
UNARY_OPERATOR	3744:10	3744:10	19	!
LEAF_NODE	3744:10	3744:10	20	!
FUNCTION_CALL	3744:11	3744:38	19	TIFFFetchNormalTag ( tif , dp , 0 )
CALLEE	3744:11	3744:11	20	TIFFFetchNormalTag
LEAF_NODE	3744:11	3744:11	21	TIFFFetchNormalTag
LEAF_NODE	3744:29	3744:29	20	(
ARGUMENT	3744:30	3744:30	20	tif
FIELD	3744:30	3744:30	21	tif
LEAF_NODE	3744:30	3744:30	22	tif
LEAF_NODE	3744:33	3744:33	20	,
ARGUMENT	3744:34	3744:34	20	dp
FIELD	3744:34	3744:34	21	dp
LEAF_NODE	3744:34	3744:34	22	dp
LEAF_NODE	3744:36	3744:36	20	,
ARGUMENT	3744:37	3744:37	20	0
FIELD	3744:37	3744:37	21	0
LEAF_NODE	3744:37	3744:37	22	0
LEAF_NODE	3744:38	3744:38	20	)
LEAF_NODE	3744:39	3744:39	16	)
STATEMENTS	3745:7	3745:7	16	
JUMP_STATEMENT	3745:7	3745:15	17	goto bad ;
KEYWORD	3745:7	3745:7	18	goto
LEAF_NODE	3745:7	3745:7	19	goto
DESTINATION	3745:12	3745:12	18	bad
LEAF_NODE	3745:12	3745:12	19	bad
LEAF_NODE	3745:15	3745:15	18	;
EXPR_STATEMENT	3746:6	3746:28	15	dp -> tdir_ignore = TRUE ;
EXPR	3746:6	3746:6	16	dp -> tdir_ignore = TRUE
ASSIGN	3746:6	3746:24	17	dp -> tdir_ignore = TRUE
LVAL	3746:6	3746:6	18	dp -> tdir_ignore
FIELD	3746:6	3746:10	19	dp -> tdir_ignore
LEAF_NODE	3746:6	3746:6	20	dp
LEAF_NODE	3746:8	3746:8	20	->
LEAF_NODE	3746:10	3746:10	20	tdir_ignore
ASSIGN_OP	3746:22	3746:22	18	=
LEAF_NODE	3746:22	3746:22	19	=
RVAL	3746:24	3746:24	18	TRUE
FIELD	3746:24	3746:24	19	TRUE
LEAF_NODE	3746:24	3746:24	20	TRUE
LEAF_NODE	3746:28	3746:28	16	;
JUMP_STATEMENT	3747:6	3747:11	15	break DESTINATION ;
KEYWORD	3747:6	3747:6	16	break
LEAF_NODE	3747:6	3747:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	3747:11	3747:11	16	;
LABEL	3748:5	3748:12	15	default :
LEAF_NODE	3748:5	3748:5	16	default
LEAF_NODE	3748:12	3748:12	16	:
SELECTION	3749:6	3750:7	15	
KEYWORD	3749:6	3749:6	16	if
LEAF_NODE	3749:6	3749:6	17	if
LEAF_NODE	3749:8	3749:8	16	(
CONDITION	3749:10	3749:10	16	! _TIFFCheckFieldIsValidForCodec ( tif , dp -> tdir_tag )
EXPR	3749:10	3749:10	17	! _TIFFCheckFieldIsValidForCodec ( tif , dp -> tdir_tag )
UNARY_EXPR	3749:10	3749:11	18	! _TIFFCheckFieldIsValidForCodec ( tif , dp -> tdir_tag )
UNARY_OPERATOR	3749:10	3749:10	19	!
LEAF_NODE	3749:10	3749:10	20	!
FUNCTION_CALL	3749:11	3749:59	19	_TIFFCheckFieldIsValidForCodec ( tif , dp -> tdir_tag )
CALLEE	3749:11	3749:11	20	_TIFFCheckFieldIsValidForCodec
LEAF_NODE	3749:11	3749:11	21	_TIFFCheckFieldIsValidForCodec
LEAF_NODE	3749:41	3749:41	20	(
ARGUMENT	3749:42	3749:42	20	tif
FIELD	3749:42	3749:42	21	tif
LEAF_NODE	3749:42	3749:42	22	tif
LEAF_NODE	3749:45	3749:45	20	,
ARGUMENT	3749:47	3749:47	20	dp -> tdir_tag
FIELD	3749:47	3749:51	21	dp -> tdir_tag
LEAF_NODE	3749:47	3749:47	22	dp
LEAF_NODE	3749:49	3749:49	22	->
LEAF_NODE	3749:51	3749:51	22	tdir_tag
LEAF_NODE	3749:59	3749:59	20	)
LEAF_NODE	3749:61	3749:61	16	)
STATEMENTS	3750:7	3750:7	16	
EXPR_STATEMENT	3750:7	3750:29	17	dp -> tdir_ignore = TRUE ;
EXPR	3750:7	3750:7	18	dp -> tdir_ignore = TRUE
ASSIGN	3750:7	3750:25	19	dp -> tdir_ignore = TRUE
LVAL	3750:7	3750:7	20	dp -> tdir_ignore
FIELD	3750:7	3750:11	21	dp -> tdir_ignore
LEAF_NODE	3750:7	3750:7	22	dp
LEAF_NODE	3750:9	3750:9	22	->
LEAF_NODE	3750:11	3750:11	22	tdir_ignore
ASSIGN_OP	3750:23	3750:23	20	=
LEAF_NODE	3750:23	3750:23	21	=
RVAL	3750:25	3750:25	20	TRUE
FIELD	3750:25	3750:25	21	TRUE
LEAF_NODE	3750:25	3750:25	22	TRUE
LEAF_NODE	3750:29	3750:29	18	;
JUMP_STATEMENT	3751:6	3751:11	15	break DESTINATION ;
KEYWORD	3751:6	3751:6	16	break
LEAF_NODE	3751:6	3751:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	3751:11	3751:11	16	;
LEAF_NODE	3752:4	3752:4	14	}
LEAF_NODE	3753:3	3753:3	11	}
LEAF_NODE	3754:2	3754:2	8	}
LEAF_NODE	3755:1	3755:1	5	}
SELECTION	3764:1	3766:1	3	
KEYWORD	3764:1	3764:1	4	if
LEAF_NODE	3764:1	3764:1	5	if
LEAF_NODE	3764:4	3764:4	4	(
CONDITION	3764:5	3764:5	4	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG ) && ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE )
EXPR	3764:5	3764:5	5	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG ) && ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE )
AND	3764:5	3765:5	6	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG ) && ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE )
EXPR	3764:5	3764:52	7	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG )
LEAF_NODE	3764:5	3764:5	8	(
FIELD	3764:6	3764:19	8	tif -> tif_dir . td_compression
LEAF_NODE	3764:6	3764:6	9	tif
LEAF_NODE	3764:9	3764:9	9	->
LEAF_NODE	3764:11	3764:11	9	tif_dir
LEAF_NODE	3764:18	3764:18	9	.
LEAF_NODE	3764:19	3764:19	9	td_compression
EQ_OPERATOR	3764:33	3764:33	8	==
LEAF_NODE	3764:33	3764:33	9	==
FIELD	3764:35	3764:35	8	COMPRESSION_OJPEG
LEAF_NODE	3764:35	3764:35	9	COMPRESSION_OJPEG
LEAF_NODE	3764:52	3764:52	8	)
LEAF_NODE	3764:53	3764:53	7	&&
EXPR	3765:5	3765:57	7	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE )
LEAF_NODE	3765:5	3765:5	8	(
FIELD	3765:6	3765:19	8	tif -> tif_dir . td_planarconfig
LEAF_NODE	3765:6	3765:6	9	tif
LEAF_NODE	3765:9	3765:9	9	->
LEAF_NODE	3765:11	3765:11	9	tif_dir
LEAF_NODE	3765:18	3765:18	9	.
LEAF_NODE	3765:19	3765:19	9	td_planarconfig
EQ_OPERATOR	3765:34	3765:34	8	==
LEAF_NODE	3765:34	3765:34	9	==
FIELD	3765:36	3765:36	8	PLANARCONFIG_SEPARATE
LEAF_NODE	3765:36	3765:36	9	PLANARCONFIG_SEPARATE
LEAF_NODE	3765:57	3765:57	8	)
LEAF_NODE	3765:58	3765:58	4	)
STATEMENTS	3766:1	3782:1	4	
LEAF_NODE	3766:1	3766:1	5	{
STATEMENTS	3767:2	3770:2	5	
SELECTION	3767:2	3768:6	6	
KEYWORD	3767:2	3767:2	7	if
LEAF_NODE	3767:2	3767:2	8	if
LEAF_NODE	3767:5	3767:5	7	(
CONDITION	3767:6	3767:6	7	! _TIFFFillStriles ( tif )
EXPR	3767:6	3767:6	8	! _TIFFFillStriles ( tif )
UNARY_EXPR	3767:6	3767:7	9	! _TIFFFillStriles ( tif )
UNARY_OPERATOR	3767:6	3767:6	10	!
LEAF_NODE	3767:6	3767:6	11	!
FUNCTION_CALL	3767:7	3767:27	10	_TIFFFillStriles ( tif )
CALLEE	3767:7	3767:7	11	_TIFFFillStriles
LEAF_NODE	3767:7	3767:7	12	_TIFFFillStriles
LEAF_NODE	3767:23	3767:23	11	(
ARGUMENT	3767:24	3767:24	11	tif
FIELD	3767:24	3767:24	12	tif
LEAF_NODE	3767:24	3767:24	13	tif
LEAF_NODE	3767:27	3767:27	11	)
LEAF_NODE	3767:28	3767:28	7	)
STATEMENTS	3768:6	3768:6	7	
JUMP_STATEMENT	3768:6	3768:14	8	goto bad ;
KEYWORD	3768:6	3768:6	9	goto
LEAF_NODE	3768:6	3768:6	10	goto
DESTINATION	3768:11	3768:11	9	bad
LEAF_NODE	3768:11	3768:11	10	bad
LEAF_NODE	3768:14	3768:14	9	;
EXPR_STATEMENT	3769:2	3769:70	6	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPOFFSETS ) ;
EXPR	3769:2	3769:2	7	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPOFFSETS )
ASSIGN	3769:2	3769:5	8	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPOFFSETS )
LVAL	3769:2	3769:2	9	dp
FIELD	3769:2	3769:2	10	dp
LEAF_NODE	3769:2	3769:2	11	dp
ASSIGN_OP	3769:4	3769:4	9	=
LEAF_NODE	3769:4	3769:4	10	=
RVAL	3769:5	3769:5	9	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPOFFSETS )
FUNCTION_CALL	3769:5	3769:69	10	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPOFFSETS )
CALLEE	3769:5	3769:5	11	TIFFReadDirectoryFindEntry
LEAF_NODE	3769:5	3769:5	12	TIFFReadDirectoryFindEntry
LEAF_NODE	3769:31	3769:31	11	(
ARGUMENT	3769:32	3769:32	11	tif
FIELD	3769:32	3769:32	12	tif
LEAF_NODE	3769:32	3769:32	13	tif
LEAF_NODE	3769:35	3769:35	11	,
ARGUMENT	3769:36	3769:36	11	dir
FIELD	3769:36	3769:36	12	dir
LEAF_NODE	3769:36	3769:36	13	dir
LEAF_NODE	3769:39	3769:39	11	,
ARGUMENT	3769:40	3769:40	11	dircount
FIELD	3769:40	3769:40	12	dircount
LEAF_NODE	3769:40	3769:40	13	dircount
LEAF_NODE	3769:48	3769:48	11	,
ARGUMENT	3769:49	3769:49	11	TIFFTAG_STRIPOFFSETS
FIELD	3769:49	3769:49	12	TIFFTAG_STRIPOFFSETS
LEAF_NODE	3769:49	3769:49	13	TIFFTAG_STRIPOFFSETS
LEAF_NODE	3769:69	3769:69	11	)
LEAF_NODE	3769:70	3769:70	7	;
SELECTION	3770:2	3771:2	6	
KEYWORD	3770:2	3770:2	7	if
LEAF_NODE	3770:2	3770:2	8	if
LEAF_NODE	3770:5	3770:5	7	(
CONDITION	3770:6	3770:6	7	( dp != 0 ) && ( dp -> tdir_count == 1 )
EXPR	3770:6	3770:6	8	( dp != 0 ) && ( dp -> tdir_count == 1 )
AND	3770:6	3770:15	9	( dp != 0 ) && ( dp -> tdir_count == 1 )
EXPR	3770:6	3770:12	10	( dp != 0 )
LEAF_NODE	3770:6	3770:6	11	(
FIELD	3770:7	3770:7	11	dp
LEAF_NODE	3770:7	3770:7	12	dp
EQ_OPERATOR	3770:9	3770:9	11	!=
LEAF_NODE	3770:9	3770:9	12	!=
FIELD	3770:11	3770:11	11	0
LEAF_NODE	3770:11	3770:11	12	0
LEAF_NODE	3770:12	3770:12	11	)
LEAF_NODE	3770:13	3770:13	10	&&
EXPR	3770:15	3770:33	10	( dp -> tdir_count == 1 )
LEAF_NODE	3770:15	3770:15	11	(
FIELD	3770:16	3770:20	11	dp -> tdir_count
LEAF_NODE	3770:16	3770:16	12	dp
LEAF_NODE	3770:18	3770:18	12	->
LEAF_NODE	3770:20	3770:20	12	tdir_count
EQ_OPERATOR	3770:30	3770:30	11	==
LEAF_NODE	3770:30	3770:30	12	==
FIELD	3770:32	3770:32	11	1
LEAF_NODE	3770:32	3770:32	12	1
LEAF_NODE	3770:33	3770:33	11	)
LEAF_NODE	3770:34	3770:34	7	)
STATEMENTS	3771:2	3781:2	7	
LEAF_NODE	3771:2	3771:2	8	{
STATEMENTS	3772:3	3774:3	8	
EXPR_STATEMENT	3772:3	3773:31	9	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPBYTECOUNTS ) ;
EXPR	3772:3	3772:3	10	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPBYTECOUNTS )
ASSIGN	3772:3	3772:6	11	dp = TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPBYTECOUNTS )
LVAL	3772:3	3772:3	12	dp
FIELD	3772:3	3772:3	13	dp
LEAF_NODE	3772:3	3772:3	14	dp
ASSIGN_OP	3772:5	3772:5	12	=
LEAF_NODE	3772:5	3772:5	13	=
RVAL	3772:6	3772:6	12	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPBYTECOUNTS )
FUNCTION_CALL	3772:6	3773:30	13	TIFFReadDirectoryFindEntry ( tif , dir , dircount , TIFFTAG_STRIPBYTECOUNTS )
CALLEE	3772:6	3772:6	14	TIFFReadDirectoryFindEntry
LEAF_NODE	3772:6	3772:6	15	TIFFReadDirectoryFindEntry
LEAF_NODE	3772:32	3772:32	14	(
ARGUMENT	3772:33	3772:33	14	tif
FIELD	3772:33	3772:33	15	tif
LEAF_NODE	3772:33	3772:33	16	tif
LEAF_NODE	3772:36	3772:36	14	,
ARGUMENT	3772:37	3772:37	14	dir
FIELD	3772:37	3772:37	15	dir
LEAF_NODE	3772:37	3772:37	16	dir
LEAF_NODE	3772:40	3772:40	14	,
ARGUMENT	3772:41	3772:41	14	dircount
FIELD	3772:41	3772:41	15	dircount
LEAF_NODE	3772:41	3772:41	16	dircount
LEAF_NODE	3772:49	3772:49	14	,
ARGUMENT	3773:7	3773:7	14	TIFFTAG_STRIPBYTECOUNTS
FIELD	3773:7	3773:7	15	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	3773:7	3773:7	16	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	3773:30	3773:30	14	)
LEAF_NODE	3773:31	3773:31	10	;
SELECTION	3774:3	3775:3	9	
KEYWORD	3774:3	3774:3	10	if
LEAF_NODE	3774:3	3774:3	11	if
LEAF_NODE	3774:6	3774:6	10	(
CONDITION	3774:7	3774:7	10	( dp != 0 ) && ( dp -> tdir_count == 1 )
EXPR	3774:7	3774:7	11	( dp != 0 ) && ( dp -> tdir_count == 1 )
AND	3774:7	3774:16	12	( dp != 0 ) && ( dp -> tdir_count == 1 )
EXPR	3774:7	3774:13	13	( dp != 0 )
LEAF_NODE	3774:7	3774:7	14	(
FIELD	3774:8	3774:8	14	dp
LEAF_NODE	3774:8	3774:8	15	dp
EQ_OPERATOR	3774:10	3774:10	14	!=
LEAF_NODE	3774:10	3774:10	15	!=
FIELD	3774:12	3774:12	14	0
LEAF_NODE	3774:12	3774:12	15	0
LEAF_NODE	3774:13	3774:13	14	)
LEAF_NODE	3774:14	3774:14	13	&&
EXPR	3774:16	3774:34	13	( dp -> tdir_count == 1 )
LEAF_NODE	3774:16	3774:16	14	(
FIELD	3774:17	3774:21	14	dp -> tdir_count
LEAF_NODE	3774:17	3774:17	15	dp
LEAF_NODE	3774:19	3774:19	15	->
LEAF_NODE	3774:21	3774:21	15	tdir_count
EQ_OPERATOR	3774:31	3774:31	14	==
LEAF_NODE	3774:31	3774:31	15	==
FIELD	3774:33	3774:33	14	1
LEAF_NODE	3774:33	3774:33	15	1
LEAF_NODE	3774:34	3774:34	14	)
LEAF_NODE	3774:35	3774:35	10	)
STATEMENTS	3775:3	3780:3	10	
LEAF_NODE	3775:3	3775:3	11	{
STATEMENTS	3776:4	3779:52	11	
EXPR_STATEMENT	3776:4	3776:52	12	tif -> tif_dir . td_planarconfig = PLANARCONFIG_CONTIG ;
EXPR	3776:4	3776:4	13	tif -> tif_dir . td_planarconfig = PLANARCONFIG_CONTIG
ASSIGN	3776:4	3776:33	14	tif -> tif_dir . td_planarconfig = PLANARCONFIG_CONTIG
LVAL	3776:4	3776:4	15	tif -> tif_dir . td_planarconfig
FIELD	3776:4	3776:17	16	tif -> tif_dir . td_planarconfig
LEAF_NODE	3776:4	3776:4	17	tif
LEAF_NODE	3776:7	3776:7	17	->
LEAF_NODE	3776:9	3776:9	17	tif_dir
LEAF_NODE	3776:16	3776:16	17	.
LEAF_NODE	3776:17	3776:17	17	td_planarconfig
ASSIGN_OP	3776:32	3776:32	15	=
LEAF_NODE	3776:32	3776:32	16	=
RVAL	3776:33	3776:33	15	PLANARCONFIG_CONTIG
FIELD	3776:33	3776:33	16	PLANARCONFIG_CONTIG
LEAF_NODE	3776:33	3776:33	17	PLANARCONFIG_CONTIG
LEAF_NODE	3776:52	3776:52	13	;
LEAF_NODE	3777:4	3777:4	12	TIFFWarningExt
LEAF_NODE	3777:18	3777:18	12	(
LEAF_NODE	3777:19	3777:19	12	tif
LEAF_NODE	3777:22	3777:22	12	->
LEAF_NODE	3777:24	3777:24	12	tif_clientdata
LEAF_NODE	3777:38	3777:38	12	,
LEAF_NODE	3777:39	3777:39	12	module
LEAF_NODE	3777:45	3777:45	12	,
LEAF_NODE	3778:8	3778:8	12	"Planarconfig tag value assumed incorrect, "
LEAF_NODE	3779:8	3779:8	12	"assuming data is contig instead of chunky"
LEAF_NODE	3779:51	3779:51	12	)
LEAF_NODE	3779:52	3779:52	12	;
LEAF_NODE	3780:3	3780:3	11	}
LEAF_NODE	3781:2	3781:2	8	}
LEAF_NODE	3782:1	3782:1	5	}
SELECTION	3786:1	3787:1	3	
KEYWORD	3786:1	3786:1	4	if
LEAF_NODE	3786:1	3786:1	5	if
LEAF_NODE	3786:4	3786:4	4	(
CONDITION	3786:5	3786:5	4	! TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
EXPR	3786:5	3786:5	5	! TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
UNARY_EXPR	3786:5	3786:6	6	! TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
UNARY_OPERATOR	3786:5	3786:5	7	!
LEAF_NODE	3786:5	3786:5	8	!
FUNCTION_CALL	3786:6	3786:44	7	TIFFFieldSet ( tif , FIELD_IMAGEDIMENSIONS )
CALLEE	3786:6	3786:6	8	TIFFFieldSet
LEAF_NODE	3786:6	3786:6	9	TIFFFieldSet
LEAF_NODE	3786:18	3786:18	8	(
ARGUMENT	3786:19	3786:19	8	tif
FIELD	3786:19	3786:19	9	tif
LEAF_NODE	3786:19	3786:19	10	tif
LEAF_NODE	3786:22	3786:22	8	,
ARGUMENT	3786:23	3786:23	8	FIELD_IMAGEDIMENSIONS
FIELD	3786:23	3786:23	9	FIELD_IMAGEDIMENSIONS
LEAF_NODE	3786:23	3786:23	10	FIELD_IMAGEDIMENSIONS
LEAF_NODE	3786:44	3786:44	8	)
LEAF_NODE	3786:45	3786:45	4	)
STATEMENTS	3787:1	3790:1	4	
LEAF_NODE	3787:1	3787:1	5	{
STATEMENTS	3788:2	3789:2	5	
EXPR_STATEMENT	3788:2	3788:36	6	MissingRequired ( tif , "ImageLength" ) ;
EXPR	3788:2	3788:2	7	MissingRequired ( tif , "ImageLength" )
FUNCTION_CALL	3788:2	3788:35	8	MissingRequired ( tif , "ImageLength" )
CALLEE	3788:2	3788:2	9	MissingRequired
LEAF_NODE	3788:2	3788:2	10	MissingRequired
LEAF_NODE	3788:17	3788:17	9	(
ARGUMENT	3788:18	3788:18	9	tif
FIELD	3788:18	3788:18	10	tif
LEAF_NODE	3788:18	3788:18	11	tif
LEAF_NODE	3788:21	3788:21	9	,
ARGUMENT	3788:22	3788:22	9	"ImageLength"
FIELD	3788:22	3788:22	10	"ImageLength"
LEAF_NODE	3788:22	3788:22	11	"ImageLength"
LEAF_NODE	3788:35	3788:35	9	)
LEAF_NODE	3788:36	3788:36	7	;
JUMP_STATEMENT	3789:2	3789:10	6	goto bad ;
KEYWORD	3789:2	3789:2	7	goto
LEAF_NODE	3789:2	3789:2	8	goto
DESTINATION	3789:7	3789:7	7	bad
LEAF_NODE	3789:7	3789:7	8	bad
LEAF_NODE	3789:10	3789:10	7	;
LEAF_NODE	3790:1	3790:1	5	}
SELECTION	3794:1	3794:47	3	
KEYWORD	3794:1	3794:1	4	if
LEAF_NODE	3794:1	3794:1	5	if
LEAF_NODE	3794:4	3794:4	4	(
CONDITION	3794:5	3794:5	4	! TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
EXPR	3794:5	3794:5	5	! TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
UNARY_EXPR	3794:5	3794:6	6	! TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
UNARY_OPERATOR	3794:5	3794:5	7	!
LEAF_NODE	3794:5	3794:5	8	!
FUNCTION_CALL	3794:6	3794:44	7	TIFFFieldSet ( tif , FIELD_TILEDIMENSIONS )
CALLEE	3794:6	3794:6	8	TIFFFieldSet
LEAF_NODE	3794:6	3794:6	9	TIFFFieldSet
LEAF_NODE	3794:18	3794:18	8	(
ARGUMENT	3794:19	3794:19	8	tif
FIELD	3794:19	3794:19	9	tif
LEAF_NODE	3794:19	3794:19	10	tif
LEAF_NODE	3794:22	3794:22	8	,
ARGUMENT	3794:24	3794:24	8	FIELD_TILEDIMENSIONS
FIELD	3794:24	3794:24	9	FIELD_TILEDIMENSIONS
LEAF_NODE	3794:24	3794:24	10	FIELD_TILEDIMENSIONS
LEAF_NODE	3794:44	3794:44	8	)
LEAF_NODE	3794:45	3794:45	4	)
STATEMENTS	3794:47	3800:1	4	
LEAF_NODE	3794:47	3794:47	5	{
STATEMENTS	3795:2	3799:2	5	
EXPR_STATEMENT	3795:2	3795:51	6	tif -> tif_dir . td_nstrips = TIFFNumberOfStrips ( tif ) ;
EXPR	3795:2	3795:2	7	tif -> tif_dir . td_nstrips = TIFFNumberOfStrips ( tif )
ASSIGN	3795:2	3795:28	8	tif -> tif_dir . td_nstrips = TIFFNumberOfStrips ( tif )
LVAL	3795:2	3795:2	9	tif -> tif_dir . td_nstrips
FIELD	3795:2	3795:15	10	tif -> tif_dir . td_nstrips
LEAF_NODE	3795:2	3795:2	11	tif
LEAF_NODE	3795:5	3795:5	11	->
LEAF_NODE	3795:7	3795:7	11	tif_dir
LEAF_NODE	3795:14	3795:14	11	.
LEAF_NODE	3795:15	3795:15	11	td_nstrips
ASSIGN_OP	3795:26	3795:26	9	=
LEAF_NODE	3795:26	3795:26	10	=
RVAL	3795:28	3795:28	9	TIFFNumberOfStrips ( tif )
FUNCTION_CALL	3795:28	3795:50	10	TIFFNumberOfStrips ( tif )
CALLEE	3795:28	3795:28	11	TIFFNumberOfStrips
LEAF_NODE	3795:28	3795:28	12	TIFFNumberOfStrips
LEAF_NODE	3795:46	3795:46	11	(
ARGUMENT	3795:47	3795:47	11	tif
FIELD	3795:47	3795:47	12	tif
LEAF_NODE	3795:47	3795:47	13	tif
LEAF_NODE	3795:50	3795:50	11	)
LEAF_NODE	3795:51	3795:51	7	;
EXPR_STATEMENT	3796:2	3796:56	6	tif -> tif_dir . td_tilewidth = tif -> tif_dir . td_imagewidth ;
EXPR	3796:2	3796:2	7	tif -> tif_dir . td_tilewidth = tif -> tif_dir . td_imagewidth
ASSIGN	3796:2	3796:30	8	tif -> tif_dir . td_tilewidth = tif -> tif_dir . td_imagewidth
LVAL	3796:2	3796:2	9	tif -> tif_dir . td_tilewidth
FIELD	3796:2	3796:15	10	tif -> tif_dir . td_tilewidth
LEAF_NODE	3796:2	3796:2	11	tif
LEAF_NODE	3796:5	3796:5	11	->
LEAF_NODE	3796:7	3796:7	11	tif_dir
LEAF_NODE	3796:14	3796:14	11	.
LEAF_NODE	3796:15	3796:15	11	td_tilewidth
ASSIGN_OP	3796:28	3796:28	9	=
LEAF_NODE	3796:28	3796:28	10	=
RVAL	3796:30	3796:30	9	tif -> tif_dir . td_imagewidth
FIELD	3796:30	3796:43	10	tif -> tif_dir . td_imagewidth
LEAF_NODE	3796:30	3796:30	11	tif
LEAF_NODE	3796:33	3796:33	11	->
LEAF_NODE	3796:35	3796:35	11	tif_dir
LEAF_NODE	3796:42	3796:42	11	.
LEAF_NODE	3796:43	3796:43	11	td_imagewidth
LEAF_NODE	3796:56	3796:56	7	;
EXPR_STATEMENT	3797:2	3797:59	6	tif -> tif_dir . td_tilelength = tif -> tif_dir . td_rowsperstrip ;
EXPR	3797:2	3797:2	7	tif -> tif_dir . td_tilelength = tif -> tif_dir . td_rowsperstrip
ASSIGN	3797:2	3797:31	8	tif -> tif_dir . td_tilelength = tif -> tif_dir . td_rowsperstrip
LVAL	3797:2	3797:2	9	tif -> tif_dir . td_tilelength
FIELD	3797:2	3797:15	10	tif -> tif_dir . td_tilelength
LEAF_NODE	3797:2	3797:2	11	tif
LEAF_NODE	3797:5	3797:5	11	->
LEAF_NODE	3797:7	3797:7	11	tif_dir
LEAF_NODE	3797:14	3797:14	11	.
LEAF_NODE	3797:15	3797:15	11	td_tilelength
ASSIGN_OP	3797:29	3797:29	9	=
LEAF_NODE	3797:29	3797:29	10	=
RVAL	3797:31	3797:31	9	tif -> tif_dir . td_rowsperstrip
FIELD	3797:31	3797:44	10	tif -> tif_dir . td_rowsperstrip
LEAF_NODE	3797:31	3797:31	11	tif
LEAF_NODE	3797:34	3797:34	11	->
LEAF_NODE	3797:36	3797:36	11	tif_dir
LEAF_NODE	3797:43	3797:43	11	.
LEAF_NODE	3797:44	3797:44	11	td_rowsperstrip
LEAF_NODE	3797:59	3797:59	7	;
EXPR_STATEMENT	3798:2	3798:56	6	tif -> tif_dir . td_tiledepth = tif -> tif_dir . td_imagedepth ;
EXPR	3798:2	3798:2	7	tif -> tif_dir . td_tiledepth = tif -> tif_dir . td_imagedepth
ASSIGN	3798:2	3798:30	8	tif -> tif_dir . td_tiledepth = tif -> tif_dir . td_imagedepth
LVAL	3798:2	3798:2	9	tif -> tif_dir . td_tiledepth
FIELD	3798:2	3798:15	10	tif -> tif_dir . td_tiledepth
LEAF_NODE	3798:2	3798:2	11	tif
LEAF_NODE	3798:5	3798:5	11	->
LEAF_NODE	3798:7	3798:7	11	tif_dir
LEAF_NODE	3798:14	3798:14	11	.
LEAF_NODE	3798:15	3798:15	11	td_tiledepth
ASSIGN_OP	3798:28	3798:28	9	=
LEAF_NODE	3798:28	3798:28	10	=
RVAL	3798:30	3798:30	9	tif -> tif_dir . td_imagedepth
FIELD	3798:30	3798:43	10	tif -> tif_dir . td_imagedepth
LEAF_NODE	3798:30	3798:30	11	tif
LEAF_NODE	3798:33	3798:33	11	->
LEAF_NODE	3798:35	3798:35	11	tif_dir
LEAF_NODE	3798:42	3798:42	11	.
LEAF_NODE	3798:43	3798:43	11	td_imagedepth
LEAF_NODE	3798:56	3798:56	7	;
EXPR_STATEMENT	3799:2	3799:33	6	tif -> tif_flags &= ~TIFF_ISTILED ;
EXPR	3799:2	3799:2	7	tif -> tif_flags &= ~TIFF_ISTILED
ASSIGN	3799:2	3799:20	8	tif -> tif_flags &= ~TIFF_ISTILED
LVAL	3799:2	3799:2	9	tif -> tif_flags
FIELD	3799:2	3799:7	10	tif -> tif_flags
LEAF_NODE	3799:2	3799:2	11	tif
LEAF_NODE	3799:5	3799:5	11	->
LEAF_NODE	3799:7	3799:7	11	tif_flags
ASSIGN_OP	3799:17	3799:17	9	&=
LEAF_NODE	3799:17	3799:17	10	&=
RVAL	3799:20	3799:20	9	~TIFF_ISTILED
FIELD	3799:20	3799:20	10	~TIFF_ISTILED
LEAF_NODE	3799:20	3799:20	11	~TIFF_ISTILED
LEAF_NODE	3799:33	3799:33	7	;
LEAF_NODE	3800:1	3800:1	5	}
SELECTION	3800:3	3800:8	3	
KEYWORD	3800:3	3800:3	4	else
LEAF_NODE	3800:3	3800:3	5	else
STATEMENTS	3800:8	3803:1	4	
LEAF_NODE	3800:8	3800:8	5	{
STATEMENTS	3801:2	3802:2	5	
EXPR_STATEMENT	3801:2	3801:50	6	tif -> tif_dir . td_nstrips = TIFFNumberOfTiles ( tif ) ;
EXPR	3801:2	3801:2	7	tif -> tif_dir . td_nstrips = TIFFNumberOfTiles ( tif )
ASSIGN	3801:2	3801:28	8	tif -> tif_dir . td_nstrips = TIFFNumberOfTiles ( tif )
LVAL	3801:2	3801:2	9	tif -> tif_dir . td_nstrips
FIELD	3801:2	3801:15	10	tif -> tif_dir . td_nstrips
LEAF_NODE	3801:2	3801:2	11	tif
LEAF_NODE	3801:5	3801:5	11	->
LEAF_NODE	3801:7	3801:7	11	tif_dir
LEAF_NODE	3801:14	3801:14	11	.
LEAF_NODE	3801:15	3801:15	11	td_nstrips
ASSIGN_OP	3801:26	3801:26	9	=
LEAF_NODE	3801:26	3801:26	10	=
RVAL	3801:28	3801:28	9	TIFFNumberOfTiles ( tif )
FUNCTION_CALL	3801:28	3801:49	10	TIFFNumberOfTiles ( tif )
CALLEE	3801:28	3801:28	11	TIFFNumberOfTiles
LEAF_NODE	3801:28	3801:28	12	TIFFNumberOfTiles
LEAF_NODE	3801:45	3801:45	11	(
ARGUMENT	3801:46	3801:46	11	tif
FIELD	3801:46	3801:46	12	tif
LEAF_NODE	3801:46	3801:46	13	tif
LEAF_NODE	3801:49	3801:49	11	)
LEAF_NODE	3801:50	3801:50	7	;
EXPR_STATEMENT	3802:2	3802:32	6	tif -> tif_flags |= TIFF_ISTILED ;
EXPR	3802:2	3802:2	7	tif -> tif_flags |= TIFF_ISTILED
ASSIGN	3802:2	3802:20	8	tif -> tif_flags |= TIFF_ISTILED
LVAL	3802:2	3802:2	9	tif -> tif_flags
FIELD	3802:2	3802:7	10	tif -> tif_flags
LEAF_NODE	3802:2	3802:2	11	tif
LEAF_NODE	3802:5	3802:5	11	->
LEAF_NODE	3802:7	3802:7	11	tif_flags
ASSIGN_OP	3802:17	3802:17	9	|=
LEAF_NODE	3802:17	3802:17	10	|=
RVAL	3802:20	3802:20	9	TIFF_ISTILED
FIELD	3802:20	3802:20	10	TIFF_ISTILED
LEAF_NODE	3802:20	3802:20	11	TIFF_ISTILED
LEAF_NODE	3802:32	3802:32	7	;
LEAF_NODE	3803:1	3803:1	5	}
SELECTION	3804:1	3804:31	3	
KEYWORD	3804:1	3804:1	4	if
LEAF_NODE	3804:1	3804:1	5	if
LEAF_NODE	3804:4	3804:4	4	(
CONDITION	3804:5	3804:5	4	! tif -> tif_dir . td_nstrips
EXPR	3804:5	3804:5	5	! tif -> tif_dir . td_nstrips
UNARY_EXPR	3804:5	3804:6	6	! tif -> tif_dir . td_nstrips
UNARY_OPERATOR	3804:5	3804:5	7	!
LEAF_NODE	3804:5	3804:5	8	!
FIELD	3804:6	3804:19	7	tif -> tif_dir . td_nstrips
LEAF_NODE	3804:6	3804:6	8	tif
LEAF_NODE	3804:9	3804:9	8	->
LEAF_NODE	3804:11	3804:11	8	tif_dir
LEAF_NODE	3804:18	3804:18	8	.
LEAF_NODE	3804:19	3804:19	8	td_nstrips
LEAF_NODE	3804:29	3804:29	4	)
STATEMENTS	3804:31	3809:1	4	
LEAF_NODE	3804:31	3804:31	5	{
STATEMENTS	3805:2	3808:2	5	
EXPR_STATEMENT	3805:2	3807:40	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero number of %s" , isTiled ( tif ) ? "tiles" : "strips" ) ;
EXPR	3805:2	3805:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero number of %s" , isTiled ( tif ) ? "tiles" : "strips" )
FUNCTION_CALL	3805:2	3807:39	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero number of %s" , isTiled ( tif ) ? "tiles" : "strips" )
CALLEE	3805:2	3805:2	9	TIFFErrorExt
LEAF_NODE	3805:2	3805:2	10	TIFFErrorExt
LEAF_NODE	3805:14	3805:14	9	(
ARGUMENT	3805:15	3805:15	9	tif -> tif_clientdata
FIELD	3805:15	3805:20	10	tif -> tif_clientdata
LEAF_NODE	3805:15	3805:15	11	tif
LEAF_NODE	3805:18	3805:18	11	->
LEAF_NODE	3805:20	3805:20	11	tif_clientdata
LEAF_NODE	3805:34	3805:34	9	,
ARGUMENT	3805:36	3805:36	9	module
FIELD	3805:36	3805:36	10	module
LEAF_NODE	3805:36	3805:36	11	module
LEAF_NODE	3805:42	3805:42	9	,
ARGUMENT	3806:6	3806:6	9	"Cannot handle zero number of %s"
FIELD	3806:6	3806:6	10	"Cannot handle zero number of %s"
LEAF_NODE	3806:6	3806:6	11	"Cannot handle zero number of %s"
LEAF_NODE	3806:39	3806:39	9	,
ARGUMENT	3807:6	3807:6	9	isTiled ( tif ) ? "tiles" : "strips"
COND_EXPR	3807:6	3807:31	10	isTiled ( tif ) ? "tiles" : "strips"
CONDITION	3807:6	3807:6	11	isTiled ( tif )
FUNCTION_CALL	3807:6	3807:17	12	isTiled ( tif )
CALLEE	3807:6	3807:6	13	isTiled
LEAF_NODE	3807:6	3807:6	14	isTiled
LEAF_NODE	3807:13	3807:13	13	(
ARGUMENT	3807:14	3807:14	13	tif
FIELD	3807:14	3807:14	14	tif
LEAF_NODE	3807:14	3807:14	15	tif
LEAF_NODE	3807:17	3807:17	13	)
LEAF_NODE	3807:19	3807:19	11	?
EXPR	3807:21	3807:21	11	"tiles"
FIELD	3807:21	3807:21	12	"tiles"
LEAF_NODE	3807:21	3807:21	13	"tiles"
LEAF_NODE	3807:29	3807:29	11	:
FIELD	3807:31	3807:31	11	"strips"
LEAF_NODE	3807:31	3807:31	12	"strips"
LEAF_NODE	3807:39	3807:39	9	)
LEAF_NODE	3807:40	3807:40	7	;
JUMP_STATEMENT	3808:2	3808:10	6	goto bad ;
KEYWORD	3808:2	3808:2	7	goto
LEAF_NODE	3808:2	3808:2	8	goto
DESTINATION	3808:7	3808:7	7	bad
LEAF_NODE	3808:7	3808:7	8	bad
LEAF_NODE	3808:10	3808:10	7	;
LEAF_NODE	3809:1	3809:1	5	}
EXPR_STATEMENT	3810:1	3810:57	3	tif -> tif_dir . td_stripsperimage = tif -> tif_dir . td_nstrips ;
EXPR	3810:1	3810:1	4	tif -> tif_dir . td_stripsperimage = tif -> tif_dir . td_nstrips
ASSIGN	3810:1	3810:34	5	tif -> tif_dir . td_stripsperimage = tif -> tif_dir . td_nstrips
LVAL	3810:1	3810:1	6	tif -> tif_dir . td_stripsperimage
FIELD	3810:1	3810:14	7	tif -> tif_dir . td_stripsperimage
LEAF_NODE	3810:1	3810:1	8	tif
LEAF_NODE	3810:4	3810:4	8	->
LEAF_NODE	3810:6	3810:6	8	tif_dir
LEAF_NODE	3810:13	3810:13	8	.
LEAF_NODE	3810:14	3810:14	8	td_stripsperimage
ASSIGN_OP	3810:32	3810:32	6	=
LEAF_NODE	3810:32	3810:32	7	=
RVAL	3810:34	3810:34	6	tif -> tif_dir . td_nstrips
FIELD	3810:34	3810:47	7	tif -> tif_dir . td_nstrips
LEAF_NODE	3810:34	3810:34	8	tif
LEAF_NODE	3810:37	3810:37	8	->
LEAF_NODE	3810:39	3810:39	8	tif_dir
LEAF_NODE	3810:46	3810:46	8	.
LEAF_NODE	3810:47	3810:47	8	td_nstrips
LEAF_NODE	3810:57	3810:57	4	;
SELECTION	3811:1	3812:2	3	
KEYWORD	3811:1	3811:1	4	if
LEAF_NODE	3811:1	3811:1	5	if
LEAF_NODE	3811:4	3811:4	4	(
CONDITION	3811:5	3811:5	4	tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	3811:5	3811:37	5	tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	3811:5	3811:18	6	tif -> tif_dir . td_planarconfig
LEAF_NODE	3811:5	3811:5	7	tif
LEAF_NODE	3811:8	3811:8	7	->
LEAF_NODE	3811:10	3811:10	7	tif_dir
LEAF_NODE	3811:17	3811:17	7	.
LEAF_NODE	3811:18	3811:18	7	td_planarconfig
EQ_OPERATOR	3811:34	3811:34	6	==
LEAF_NODE	3811:34	3811:34	7	==
FIELD	3811:37	3811:37	6	PLANARCONFIG_SEPARATE
LEAF_NODE	3811:37	3811:37	7	PLANARCONFIG_SEPARATE
LEAF_NODE	3811:58	3811:58	4	)
STATEMENTS	3812:2	3812:2	4	
EXPR_STATEMENT	3812:2	3812:67	5	tif -> tif_dir . td_stripsperimage /= tif -> tif_dir . td_samplesperpixel ;
EXPR	3812:2	3812:2	6	tif -> tif_dir . td_stripsperimage /= tif -> tif_dir . td_samplesperpixel
ASSIGN	3812:2	3812:36	7	tif -> tif_dir . td_stripsperimage /= tif -> tif_dir . td_samplesperpixel
LVAL	3812:2	3812:2	8	tif -> tif_dir . td_stripsperimage
FIELD	3812:2	3812:15	9	tif -> tif_dir . td_stripsperimage
LEAF_NODE	3812:2	3812:2	10	tif
LEAF_NODE	3812:5	3812:5	10	->
LEAF_NODE	3812:7	3812:7	10	tif_dir
LEAF_NODE	3812:14	3812:14	10	.
LEAF_NODE	3812:15	3812:15	10	td_stripsperimage
ASSIGN_OP	3812:33	3812:33	8	/=
LEAF_NODE	3812:33	3812:33	9	/=
RVAL	3812:36	3812:36	8	tif -> tif_dir . td_samplesperpixel
FIELD	3812:36	3812:49	9	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	3812:36	3812:36	10	tif
LEAF_NODE	3812:39	3812:39	10	->
LEAF_NODE	3812:41	3812:41	10	tif_dir
LEAF_NODE	3812:48	3812:48	10	.
LEAF_NODE	3812:49	3812:49	10	td_samplesperpixel
LEAF_NODE	3812:67	3812:67	6	;
SELECTION	3813:1	3813:45	3	
KEYWORD	3813:1	3813:1	4	if
LEAF_NODE	3813:1	3813:1	5	if
LEAF_NODE	3813:4	3813:4	4	(
CONDITION	3813:5	3813:5	4	! TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
EXPR	3813:5	3813:5	5	! TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
UNARY_EXPR	3813:5	3813:6	6	! TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
UNARY_OPERATOR	3813:5	3813:5	7	!
LEAF_NODE	3813:5	3813:5	8	!
FUNCTION_CALL	3813:6	3813:42	7	TIFFFieldSet ( tif , FIELD_STRIPOFFSETS )
CALLEE	3813:6	3813:6	8	TIFFFieldSet
LEAF_NODE	3813:6	3813:6	9	TIFFFieldSet
LEAF_NODE	3813:18	3813:18	8	(
ARGUMENT	3813:19	3813:19	8	tif
FIELD	3813:19	3813:19	9	tif
LEAF_NODE	3813:19	3813:19	10	tif
LEAF_NODE	3813:22	3813:22	8	,
ARGUMENT	3813:24	3813:24	8	FIELD_STRIPOFFSETS
FIELD	3813:24	3813:24	9	FIELD_STRIPOFFSETS
LEAF_NODE	3813:24	3813:24	10	FIELD_STRIPOFFSETS
LEAF_NODE	3813:42	3813:42	8	)
LEAF_NODE	3813:43	3813:43	4	)
STATEMENTS	3813:45	3834:1	4	
LEAF_NODE	3813:45	3813:45	5	{
STATEMENTS	3815:2	3827:4	5	
SELECTION	3815:2	3817:36	6	
KEYWORD	3815:2	3815:2	7	if
LEAF_NODE	3815:2	3815:2	8	if
LEAF_NODE	3815:5	3815:5	7	(
CONDITION	3815:6	3815:6	7	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG ) && ( isTiled ( tif ) == 0 ) && ( tif -> tif_dir . td_nstrips == 1 )
EXPR	3815:6	3815:6	8	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG ) && ( isTiled ( tif ) == 0 ) && ( tif -> tif_dir . td_nstrips == 1 )
AND	3815:6	3816:6	9	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG ) && ( isTiled ( tif ) == 0 ) && ( tif -> tif_dir . td_nstrips == 1 )
EXPR	3815:6	3815:53	10	( tif -> tif_dir . td_compression == COMPRESSION_OJPEG )
LEAF_NODE	3815:6	3815:6	11	(
FIELD	3815:7	3815:20	11	tif -> tif_dir . td_compression
LEAF_NODE	3815:7	3815:7	12	tif
LEAF_NODE	3815:10	3815:10	12	->
LEAF_NODE	3815:12	3815:12	12	tif_dir
LEAF_NODE	3815:19	3815:19	12	.
LEAF_NODE	3815:20	3815:20	12	td_compression
EQ_OPERATOR	3815:34	3815:34	11	==
LEAF_NODE	3815:34	3815:34	12	==
FIELD	3815:36	3815:36	11	COMPRESSION_OJPEG
LEAF_NODE	3815:36	3815:36	12	COMPRESSION_OJPEG
LEAF_NODE	3815:53	3815:53	11	)
LEAF_NODE	3815:55	3815:55	10	&&
EXPR	3816:6	3816:6	10	( isTiled ( tif ) == 0 ) && ( tif -> tif_dir . td_nstrips == 1 )
AND	3816:6	3817:6	11	( isTiled ( tif ) == 0 ) && ( tif -> tif_dir . td_nstrips == 1 )
EXPR	3816:6	3816:22	12	( isTiled ( tif ) == 0 )
LEAF_NODE	3816:6	3816:6	13	(
FUNCTION_CALL	3816:7	3816:18	13	isTiled ( tif )
CALLEE	3816:7	3816:7	14	isTiled
LEAF_NODE	3816:7	3816:7	15	isTiled
LEAF_NODE	3816:14	3816:14	14	(
ARGUMENT	3816:15	3816:15	14	tif
FIELD	3816:15	3816:15	15	tif
LEAF_NODE	3816:15	3816:15	16	tif
LEAF_NODE	3816:18	3816:18	14	)
EQ_OPERATOR	3816:19	3816:19	13	==
LEAF_NODE	3816:19	3816:19	14	==
FIELD	3816:21	3816:21	13	0
LEAF_NODE	3816:21	3816:21	14	0
LEAF_NODE	3816:22	3816:22	13	)
LEAF_NODE	3816:24	3816:24	12	&&
EXPR	3817:6	3817:33	12	( tif -> tif_dir . td_nstrips == 1 )
LEAF_NODE	3817:6	3817:6	13	(
FIELD	3817:7	3817:20	13	tif -> tif_dir . td_nstrips
LEAF_NODE	3817:7	3817:7	14	tif
LEAF_NODE	3817:10	3817:10	14	->
LEAF_NODE	3817:12	3817:12	14	tif_dir
LEAF_NODE	3817:19	3817:19	14	.
LEAF_NODE	3817:20	3817:20	14	td_nstrips
EQ_OPERATOR	3817:30	3817:30	13	==
LEAF_NODE	3817:30	3817:30	14	==
FIELD	3817:32	3817:32	13	1
LEAF_NODE	3817:32	3817:32	14	1
LEAF_NODE	3817:33	3817:33	13	)
LEAF_NODE	3817:34	3817:34	7	)
STATEMENTS	3817:36	3827:2	7	
LEAF_NODE	3817:36	3817:36	8	{
STATEMENTS	3826:3	3826:3	8	
EXPR_STATEMENT	3826:3	3826:43	9	TIFFSetFieldBit ( tif , FIELD_STRIPOFFSETS ) ;
EXPR	3826:3	3826:3	10	TIFFSetFieldBit ( tif , FIELD_STRIPOFFSETS )
FUNCTION_CALL	3826:3	3826:42	11	TIFFSetFieldBit ( tif , FIELD_STRIPOFFSETS )
CALLEE	3826:3	3826:3	12	TIFFSetFieldBit
LEAF_NODE	3826:3	3826:3	13	TIFFSetFieldBit
LEAF_NODE	3826:18	3826:18	12	(
ARGUMENT	3826:19	3826:19	12	tif
FIELD	3826:19	3826:19	13	tif
LEAF_NODE	3826:19	3826:19	14	tif
LEAF_NODE	3826:22	3826:22	12	,
ARGUMENT	3826:24	3826:24	12	FIELD_STRIPOFFSETS
FIELD	3826:24	3826:24	13	FIELD_STRIPOFFSETS
LEAF_NODE	3826:24	3826:24	14	FIELD_STRIPOFFSETS
LEAF_NODE	3826:42	3826:42	12	)
LEAF_NODE	3826:43	3826:43	10	;
LEAF_NODE	3827:2	3827:2	8	}
SELECTION	3827:4	3829:8	6	
KEYWORD	3827:4	3827:4	7	else
LEAF_NODE	3827:4	3827:4	8	else
STATEMENTS	3829:8	3833:2	7	
LEAF_NODE	3829:8	3829:8	8	{
STATEMENTS	3830:3	3832:3	8	
EXPR_STATEMENT	3830:3	3831:50	9	MissingRequired ( tif , isTiled ( tif ) ? "TileOffsets" : "StripOffsets" ) ;
EXPR	3830:3	3830:3	10	MissingRequired ( tif , isTiled ( tif ) ? "TileOffsets" : "StripOffsets" )
FUNCTION_CALL	3830:3	3831:49	11	MissingRequired ( tif , isTiled ( tif ) ? "TileOffsets" : "StripOffsets" )
CALLEE	3830:3	3830:3	12	MissingRequired
LEAF_NODE	3830:3	3830:3	13	MissingRequired
LEAF_NODE	3830:18	3830:18	12	(
ARGUMENT	3830:19	3830:19	12	tif
FIELD	3830:19	3830:19	13	tif
LEAF_NODE	3830:19	3830:19	14	tif
LEAF_NODE	3830:22	3830:22	12	,
ARGUMENT	3831:4	3831:4	12	isTiled ( tif ) ? "TileOffsets" : "StripOffsets"
COND_EXPR	3831:4	3831:35	13	isTiled ( tif ) ? "TileOffsets" : "StripOffsets"
CONDITION	3831:4	3831:4	14	isTiled ( tif )
FUNCTION_CALL	3831:4	3831:15	15	isTiled ( tif )
CALLEE	3831:4	3831:4	16	isTiled
LEAF_NODE	3831:4	3831:4	17	isTiled
LEAF_NODE	3831:11	3831:11	16	(
ARGUMENT	3831:12	3831:12	16	tif
FIELD	3831:12	3831:12	17	tif
LEAF_NODE	3831:12	3831:12	18	tif
LEAF_NODE	3831:15	3831:15	16	)
LEAF_NODE	3831:17	3831:17	14	?
EXPR	3831:19	3831:19	14	"TileOffsets"
FIELD	3831:19	3831:19	15	"TileOffsets"
LEAF_NODE	3831:19	3831:19	16	"TileOffsets"
LEAF_NODE	3831:33	3831:33	14	:
FIELD	3831:35	3831:35	14	"StripOffsets"
LEAF_NODE	3831:35	3831:35	15	"StripOffsets"
LEAF_NODE	3831:49	3831:49	12	)
LEAF_NODE	3831:50	3831:50	10	;
JUMP_STATEMENT	3832:3	3832:11	9	goto bad ;
KEYWORD	3832:3	3832:3	10	goto
LEAF_NODE	3832:3	3832:3	11	goto
DESTINATION	3832:8	3832:8	10	bad
LEAF_NODE	3832:8	3832:8	11	bad
LEAF_NODE	3832:11	3832:11	10	;
LEAF_NODE	3833:2	3833:2	8	}
LEAF_NODE	3834:1	3834:1	5	}
ITERATION	3838:1	3839:1	3	
KEYWORD	3838:1	3838:1	4	for
LEAF_NODE	3838:1	3838:1	5	for
LEAF_NODE	3838:5	3838:5	4	(
FOR_INIT	3838:6	3838:18	4	di = 0 , dp = dir ;
EXPR	3838:6	3838:12	5	di = 0 , dp = dir
ASSIGN	3838:6	3838:9	6	di = 0
LVAL	3838:6	3838:6	7	di
FIELD	3838:6	3838:6	8	di
LEAF_NODE	3838:6	3838:6	9	di
ASSIGN_OP	3838:8	3838:8	7	=
LEAF_NODE	3838:8	3838:8	8	=
RVAL	3838:9	3838:9	7	0
FIELD	3838:9	3838:9	8	0
LEAF_NODE	3838:9	3838:9	9	0
LEAF_NODE	3838:10	3838:10	6	,
ASSIGN	3838:12	3838:15	6	dp = dir
LVAL	3838:12	3838:12	7	dp
FIELD	3838:12	3838:12	8	dp
LEAF_NODE	3838:12	3838:12	9	dp
ASSIGN_OP	3838:14	3838:14	7	=
LEAF_NODE	3838:14	3838:14	8	=
RVAL	3838:15	3838:15	7	dir
FIELD	3838:15	3838:15	8	dir
LEAF_NODE	3838:15	3838:15	9	dir
LEAF_NODE	3838:18	3838:18	5	;
CONDITION	3838:20	3838:20	4	di < dircount
EXPR	3838:20	3838:23	5	di < dircount
FIELD	3838:20	3838:20	6	di
LEAF_NODE	3838:20	3838:20	7	di
REL_OPERATOR	3838:22	3838:22	6	<
LEAF_NODE	3838:22	3838:22	7	<
FIELD	3838:23	3838:23	6	dircount
LEAF_NODE	3838:23	3838:23	7	dircount
LEAF_NODE	3838:31	3838:31	4	;
FOR_EXPR	3838:33	3838:33	4	di ++ , dp ++
EXPR	3838:33	3838:39	5	di ++ , dp ++
FIELD	3838:33	3838:35	6	di ++
LEAF_NODE	3838:33	3838:33	7	di
LEAF_NODE	3838:35	3838:35	7	++
LEAF_NODE	3838:37	3838:37	6	,
FIELD	3838:39	3838:41	6	dp ++
LEAF_NODE	3838:39	3838:39	7	dp
LEAF_NODE	3838:41	3838:41	7	++
LEAF_NODE	3838:43	3838:43	4	)
STATEMENTS	3839:1	3997:2	4	
LEAF_NODE	3839:1	3839:1	5	{
STATEMENTS	3840:2	3840:2	5	
SELECTION	3840:2	3840:24	6	
KEYWORD	3840:2	3840:2	7	if
LEAF_NODE	3840:2	3840:2	8	if
LEAF_NODE	3840:5	3840:5	7	(
CONDITION	3840:6	3840:6	7	! dp -> tdir_ignore
EXPR	3840:6	3840:6	8	! dp -> tdir_ignore
UNARY_EXPR	3840:6	3840:7	9	! dp -> tdir_ignore
UNARY_OPERATOR	3840:6	3840:6	10	!
LEAF_NODE	3840:6	3840:6	11	!
FIELD	3840:7	3840:11	10	dp -> tdir_ignore
LEAF_NODE	3840:7	3840:7	11	dp
LEAF_NODE	3840:9	3840:9	11	->
LEAF_NODE	3840:11	3840:11	11	tdir_ignore
LEAF_NODE	3840:22	3840:22	7	)
STATEMENTS	3840:24	3996:3	7	
LEAF_NODE	3840:24	3840:24	8	{
STATEMENTS	3841:3	3841:3	8	
SELECTION	3841:3	3842:3	9	
KEYWORD	3841:3	3841:3	10	switch
LEAF_NODE	3841:3	3841:3	11	switch
LEAF_NODE	3841:10	3841:10	10	(
CONDITION	3841:11	3841:11	10	dp -> tdir_tag
EXPR	3841:11	3841:11	11	dp -> tdir_tag
FIELD	3841:11	3841:15	12	dp -> tdir_tag
LEAF_NODE	3841:11	3841:11	13	dp
LEAF_NODE	3841:13	3841:13	13	->
LEAF_NODE	3841:15	3841:15	13	tdir_tag
LEAF_NODE	3841:23	3841:23	10	)
STATEMENTS	3842:3	3995:4	10	
LEAF_NODE	3842:3	3842:3	11	{
STATEMENTS	3843:4	3994:5	11	
LABEL	3843:4	3843:31	12	case TIFFTAG_MINSAMPLEVALUE :
LEAF_NODE	3843:4	3843:4	13	case
LEAF_NODE	3843:9	3843:9	13	TIFFTAG_MINSAMPLEVALUE
LEAF_NODE	3843:31	3843:31	13	:
LABEL	3844:4	3844:31	12	case TIFFTAG_MAXSAMPLEVALUE :
LEAF_NODE	3844:4	3844:4	13	case
LEAF_NODE	3844:9	3844:9	13	TIFFTAG_MAXSAMPLEVALUE
LEAF_NODE	3844:31	3844:31	13	:
LABEL	3845:4	3845:30	12	case TIFFTAG_BITSPERSAMPLE :
LEAF_NODE	3845:4	3845:4	13	case
LEAF_NODE	3845:9	3845:9	13	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	3845:30	3845:30	13	:
LABEL	3846:4	3846:25	12	case TIFFTAG_DATATYPE :
LEAF_NODE	3846:4	3846:4	13	case
LEAF_NODE	3846:9	3846:9	13	TIFFTAG_DATATYPE
LEAF_NODE	3846:25	3846:25	13	:
LABEL	3847:4	3847:29	12	case TIFFTAG_SAMPLEFORMAT :
LEAF_NODE	3847:4	3847:4	13	case
LEAF_NODE	3847:9	3847:9	13	TIFFTAG_SAMPLEFORMAT
LEAF_NODE	3847:29	3847:29	13	:
LEAF_NODE	3858:5	3858:5	12	{
STATEMENTS	3859:6	3872:6	12	
SIMPLE_DECL	3859:6	3859:18	13	uint16 value ;
VAR_DECL	3859:6	3859:13	14	uint16 value
TYPE	3859:6	3859:6	15	uint16
TYPE_NAME	3859:6	3859:6	16	uint16
LEAF_NODE	3859:6	3859:6	17	uint16
NAME	3859:13	3859:13	15	value
LEAF_NODE	3859:13	3859:13	16	value
LEAF_NODE	3859:18	3859:18	14	;
SIMPLE_DECL	3860:6	3860:34	13	enum TIFFReadDirEntryErr err ;
VAR_DECL	3860:6	3860:31	14	enum TIFFReadDirEntryErr err
TYPE	3860:6	3860:6	15	enum TIFFReadDirEntryErr
TYPE_NAME	3860:6	3860:11	16	enum TIFFReadDirEntryErr
LEAF_NODE	3860:6	3860:6	17	enum
LEAF_NODE	3860:11	3860:11	17	TIFFReadDirEntryErr
NAME	3860:31	3860:31	15	err
LEAF_NODE	3860:31	3860:31	16	err
LEAF_NODE	3860:34	3860:34	14	;
EXPR_STATEMENT	3861:6	3861:46	13	err = TIFFReadDirEntryShort ( tif , dp , & value ) ;
EXPR	3861:6	3861:6	14	err = TIFFReadDirEntryShort ( tif , dp , & value )
ASSIGN	3861:6	3861:10	15	err = TIFFReadDirEntryShort ( tif , dp , & value )
LVAL	3861:6	3861:6	16	err
FIELD	3861:6	3861:6	17	err
LEAF_NODE	3861:6	3861:6	18	err
ASSIGN_OP	3861:9	3861:9	16	=
LEAF_NODE	3861:9	3861:9	17	=
RVAL	3861:10	3861:10	16	TIFFReadDirEntryShort ( tif , dp , & value )
FUNCTION_CALL	3861:10	3861:45	17	TIFFReadDirEntryShort ( tif , dp , & value )
CALLEE	3861:10	3861:10	18	TIFFReadDirEntryShort
LEAF_NODE	3861:10	3861:10	19	TIFFReadDirEntryShort
LEAF_NODE	3861:31	3861:31	18	(
ARGUMENT	3861:32	3861:32	18	tif
FIELD	3861:32	3861:32	19	tif
LEAF_NODE	3861:32	3861:32	20	tif
LEAF_NODE	3861:35	3861:35	18	,
ARGUMENT	3861:36	3861:36	18	dp
FIELD	3861:36	3861:36	19	dp
LEAF_NODE	3861:36	3861:36	20	dp
LEAF_NODE	3861:38	3861:38	18	,
ARGUMENT	3861:39	3861:39	18	& value
UNARY_EXPR	3861:39	3861:40	19	& value
UNARY_OPERATOR	3861:39	3861:39	20	&
LEAF_NODE	3861:39	3861:39	21	&
FIELD	3861:40	3861:40	20	value
LEAF_NODE	3861:40	3861:40	21	value
LEAF_NODE	3861:45	3861:45	18	)
LEAF_NODE	3861:46	3861:46	14	;
SELECTION	3862:6	3863:7	13	
KEYWORD	3862:6	3862:6	14	if
LEAF_NODE	3862:6	3862:6	15	if
LEAF_NODE	3862:9	3862:9	14	(
CONDITION	3862:10	3862:10	14	err == TIFFReadDirEntryErrCount
EXPR	3862:10	3862:15	15	err == TIFFReadDirEntryErrCount
FIELD	3862:10	3862:10	16	err
LEAF_NODE	3862:10	3862:10	17	err
EQ_OPERATOR	3862:13	3862:13	16	==
LEAF_NODE	3862:13	3862:13	17	==
FIELD	3862:15	3862:15	16	TIFFReadDirEntryErrCount
LEAF_NODE	3862:15	3862:15	17	TIFFReadDirEntryErrCount
LEAF_NODE	3862:39	3862:39	14	)
STATEMENTS	3863:7	3863:7	14	
EXPR_STATEMENT	3863:7	3863:56	15	err = TIFFReadDirEntryPersampleShort ( tif , dp , & value ) ;
EXPR	3863:7	3863:7	16	err = TIFFReadDirEntryPersampleShort ( tif , dp , & value )
ASSIGN	3863:7	3863:11	17	err = TIFFReadDirEntryPersampleShort ( tif , dp , & value )
LVAL	3863:7	3863:7	18	err
FIELD	3863:7	3863:7	19	err
LEAF_NODE	3863:7	3863:7	20	err
ASSIGN_OP	3863:10	3863:10	18	=
LEAF_NODE	3863:10	3863:10	19	=
RVAL	3863:11	3863:11	18	TIFFReadDirEntryPersampleShort ( tif , dp , & value )
FUNCTION_CALL	3863:11	3863:55	19	TIFFReadDirEntryPersampleShort ( tif , dp , & value )
CALLEE	3863:11	3863:11	20	TIFFReadDirEntryPersampleShort
LEAF_NODE	3863:11	3863:11	21	TIFFReadDirEntryPersampleShort
LEAF_NODE	3863:41	3863:41	20	(
ARGUMENT	3863:42	3863:42	20	tif
FIELD	3863:42	3863:42	21	tif
LEAF_NODE	3863:42	3863:42	22	tif
LEAF_NODE	3863:45	3863:45	20	,
ARGUMENT	3863:46	3863:46	20	dp
FIELD	3863:46	3863:46	21	dp
LEAF_NODE	3863:46	3863:46	22	dp
LEAF_NODE	3863:48	3863:48	20	,
ARGUMENT	3863:49	3863:49	20	& value
UNARY_EXPR	3863:49	3863:50	21	& value
UNARY_OPERATOR	3863:49	3863:49	22	&
LEAF_NODE	3863:49	3863:49	23	&
FIELD	3863:50	3863:50	22	value
LEAF_NODE	3863:50	3863:50	23	value
LEAF_NODE	3863:55	3863:55	20	)
LEAF_NODE	3863:56	3863:56	16	;
SELECTION	3864:6	3865:6	13	
KEYWORD	3864:6	3864:6	14	if
LEAF_NODE	3864:6	3864:6	15	if
LEAF_NODE	3864:9	3864:9	14	(
CONDITION	3864:10	3864:10	14	err != TIFFReadDirEntryErrOk
EXPR	3864:10	3864:15	15	err != TIFFReadDirEntryErrOk
FIELD	3864:10	3864:10	16	err
LEAF_NODE	3864:10	3864:10	17	err
EQ_OPERATOR	3864:13	3864:13	16	!=
LEAF_NODE	3864:13	3864:13	17	!=
FIELD	3864:15	3864:15	16	TIFFReadDirEntryErrOk
LEAF_NODE	3864:15	3864:15	17	TIFFReadDirEntryErrOk
LEAF_NODE	3864:36	3864:36	14	)
STATEMENTS	3865:6	3869:6	14	
LEAF_NODE	3865:6	3865:6	15	{
STATEMENTS	3866:7	3868:7	15	
EXPR_STATEMENT	3866:7	3866:47	16	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag ) ;
EXPR	3866:7	3866:7	17	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
ASSIGN	3866:7	3866:13	18	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
LVAL	3866:7	3866:7	19	fip
FIELD	3866:7	3866:7	20	fip
LEAF_NODE	3866:7	3866:7	21	fip
ASSIGN_OP	3866:11	3866:11	19	=
LEAF_NODE	3866:11	3866:11	20	=
RVAL	3866:13	3866:13	19	TIFFFieldWithTag ( tif , dp -> tdir_tag )
FUNCTION_CALL	3866:13	3866:46	20	TIFFFieldWithTag ( tif , dp -> tdir_tag )
CALLEE	3866:13	3866:13	21	TIFFFieldWithTag
LEAF_NODE	3866:13	3866:13	22	TIFFFieldWithTag
LEAF_NODE	3866:29	3866:29	21	(
ARGUMENT	3866:30	3866:30	21	tif
FIELD	3866:30	3866:30	22	tif
LEAF_NODE	3866:30	3866:30	23	tif
LEAF_NODE	3866:33	3866:33	21	,
ARGUMENT	3866:34	3866:34	21	dp -> tdir_tag
FIELD	3866:34	3866:38	22	dp -> tdir_tag
LEAF_NODE	3866:34	3866:34	23	dp
LEAF_NODE	3866:36	3866:36	23	->
LEAF_NODE	3866:38	3866:38	23	tdir_tag
LEAF_NODE	3866:46	3866:46	21	)
LEAF_NODE	3866:47	3866:47	17	;
EXPR_STATEMENT	3867:7	3867:92	16	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 ) ;
EXPR	3867:7	3867:7	17	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 )
FUNCTION_CALL	3867:7	3867:91	18	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 )
CALLEE	3867:7	3867:7	19	TIFFReadDirEntryOutputErr
LEAF_NODE	3867:7	3867:7	20	TIFFReadDirEntryOutputErr
LEAF_NODE	3867:32	3867:32	19	(
ARGUMENT	3867:33	3867:33	19	tif
FIELD	3867:33	3867:33	20	tif
LEAF_NODE	3867:33	3867:33	21	tif
LEAF_NODE	3867:36	3867:36	19	,
ARGUMENT	3867:37	3867:37	19	err
FIELD	3867:37	3867:37	20	err
LEAF_NODE	3867:37	3867:37	21	err
LEAF_NODE	3867:40	3867:40	19	,
ARGUMENT	3867:41	3867:41	19	module
FIELD	3867:41	3867:41	20	module
LEAF_NODE	3867:41	3867:41	21	module
LEAF_NODE	3867:47	3867:47	19	,
ARGUMENT	3867:48	3867:48	19	fip ? fip -> field_name : "unknown tagname"
COND_EXPR	3867:48	3867:72	20	fip ? fip -> field_name : "unknown tagname"
CONDITION	3867:48	3867:48	21	fip
FIELD	3867:48	3867:48	22	fip
LEAF_NODE	3867:48	3867:48	23	fip
LEAF_NODE	3867:52	3867:52	21	?
EXPR	3867:54	3867:54	21	fip -> field_name
FIELD	3867:54	3867:59	22	fip -> field_name
LEAF_NODE	3867:54	3867:54	23	fip
LEAF_NODE	3867:57	3867:57	23	->
LEAF_NODE	3867:59	3867:59	23	field_name
LEAF_NODE	3867:70	3867:70	21	:
FIELD	3867:72	3867:72	21	"unknown tagname"
LEAF_NODE	3867:72	3867:72	22	"unknown tagname"
LEAF_NODE	3867:89	3867:89	19	,
ARGUMENT	3867:90	3867:90	19	0
FIELD	3867:90	3867:90	20	0
LEAF_NODE	3867:90	3867:90	21	0
LEAF_NODE	3867:91	3867:91	19	)
LEAF_NODE	3867:92	3867:92	17	;
JUMP_STATEMENT	3868:7	3868:15	16	goto bad ;
KEYWORD	3868:7	3868:7	17	goto
LEAF_NODE	3868:7	3868:7	18	goto
DESTINATION	3868:12	3868:12	17	bad
LEAF_NODE	3868:12	3868:12	18	bad
LEAF_NODE	3868:15	3868:15	17	;
LEAF_NODE	3869:6	3869:6	15	}
SELECTION	3870:6	3871:7	13	
KEYWORD	3870:6	3870:6	14	if
LEAF_NODE	3870:6	3870:6	15	if
LEAF_NODE	3870:9	3870:9	14	(
CONDITION	3870:10	3870:10	14	! TIFFSetField ( tif , dp -> tdir_tag , value )
EXPR	3870:10	3870:10	15	! TIFFSetField ( tif , dp -> tdir_tag , value )
UNARY_EXPR	3870:10	3870:11	16	! TIFFSetField ( tif , dp -> tdir_tag , value )
UNARY_OPERATOR	3870:10	3870:10	17	!
LEAF_NODE	3870:10	3870:10	18	!
FUNCTION_CALL	3870:11	3870:46	17	TIFFSetField ( tif , dp -> tdir_tag , value )
CALLEE	3870:11	3870:11	18	TIFFSetField
LEAF_NODE	3870:11	3870:11	19	TIFFSetField
LEAF_NODE	3870:23	3870:23	18	(
ARGUMENT	3870:24	3870:24	18	tif
FIELD	3870:24	3870:24	19	tif
LEAF_NODE	3870:24	3870:24	20	tif
LEAF_NODE	3870:27	3870:27	18	,
ARGUMENT	3870:28	3870:28	18	dp -> tdir_tag
FIELD	3870:28	3870:32	19	dp -> tdir_tag
LEAF_NODE	3870:28	3870:28	20	dp
LEAF_NODE	3870:30	3870:30	20	->
LEAF_NODE	3870:32	3870:32	20	tdir_tag
LEAF_NODE	3870:40	3870:40	18	,
ARGUMENT	3870:41	3870:41	18	value
FIELD	3870:41	3870:41	19	value
LEAF_NODE	3870:41	3870:41	20	value
LEAF_NODE	3870:46	3870:46	18	)
LEAF_NODE	3870:47	3870:47	14	)
STATEMENTS	3871:7	3871:7	14	
JUMP_STATEMENT	3871:7	3871:15	15	goto bad ;
KEYWORD	3871:7	3871:7	16	goto
LEAF_NODE	3871:7	3871:7	17	goto
DESTINATION	3871:12	3871:12	16	bad
LEAF_NODE	3871:12	3871:12	17	bad
LEAF_NODE	3871:15	3871:15	16	;
SELECTION	3872:6	3873:10	13	
KEYWORD	3872:6	3872:6	14	if
LEAF_NODE	3872:6	3872:6	15	if
LEAF_NODE	3872:8	3872:8	14	(
CONDITION	3872:10	3872:10	14	dp -> tdir_tag == TIFFTAG_BITSPERSAMPLE
EXPR	3872:10	3872:26	15	dp -> tdir_tag == TIFFTAG_BITSPERSAMPLE
FIELD	3872:10	3872:14	16	dp -> tdir_tag
LEAF_NODE	3872:10	3872:10	17	dp
LEAF_NODE	3872:12	3872:12	17	->
LEAF_NODE	3872:14	3872:14	17	tdir_tag
EQ_OPERATOR	3872:23	3872:23	16	==
LEAF_NODE	3872:23	3872:23	17	==
FIELD	3872:26	3872:26	16	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	3872:26	3872:26	17	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	3872:48	3872:48	14	)
STATEMENTS	3873:10	3873:10	14	
EXPR_STATEMENT	3873:10	3873:35	15	bitspersample_read = TRUE ;
EXPR	3873:10	3873:10	16	bitspersample_read = TRUE
ASSIGN	3873:10	3873:31	17	bitspersample_read = TRUE
LVAL	3873:10	3873:10	18	bitspersample_read
FIELD	3873:10	3873:10	19	bitspersample_read
LEAF_NODE	3873:10	3873:10	20	bitspersample_read
ASSIGN_OP	3873:29	3873:29	18	=
LEAF_NODE	3873:29	3873:29	19	=
RVAL	3873:31	3873:31	18	TRUE
FIELD	3873:31	3873:31	19	TRUE
LEAF_NODE	3873:31	3873:31	20	TRUE
LEAF_NODE	3873:35	3873:35	16	;
LEAF_NODE	3874:5	3874:5	12	}
JUMP_STATEMENT	3875:5	3875:10	12	break DESTINATION ;
KEYWORD	3875:5	3875:5	13	break
LEAF_NODE	3875:5	3875:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3875:10	3875:10	13	;
LABEL	3876:4	3876:32	12	case TIFFTAG_SMINSAMPLEVALUE :
LEAF_NODE	3876:4	3876:4	13	case
LEAF_NODE	3876:9	3876:9	13	TIFFTAG_SMINSAMPLEVALUE
LEAF_NODE	3876:32	3876:32	13	:
LABEL	3877:4	3877:32	12	case TIFFTAG_SMAXSAMPLEVALUE :
LEAF_NODE	3877:4	3877:4	13	case
LEAF_NODE	3877:9	3877:9	13	TIFFTAG_SMAXSAMPLEVALUE
LEAF_NODE	3877:32	3877:32	13	:
LEAF_NODE	3878:5	3878:5	12	{
STATEMENTS	3880:6	3899:6	12	
SIMPLE_DECL	3880:6	3880:25	13	double * data ; data = NULL ;
VAR_DECL	3880:6	3880:14	14	double * data ; data = NULL
TYPE	3880:6	3880:13	15	double *
TYPE_NAME	3880:6	3880:6	16	double
LEAF_NODE	3880:6	3880:6	17	double
POINTER	3880:13	3880:13	16	*
LEAF_NODE	3880:13	3880:13	17	*
NAME	3880:14	3880:14	15	data
LEAF_NODE	3880:14	3880:14	16	data
LEAF_NODE	0:0	0:0	15	;
INIT	3880:14	3880:14	15	data = NULL
ASSIGN	3880:14	3880:21	16	data = NULL
LVAL	3880:14	3880:14	17	data
NAME	3880:14	3880:14	18	data
LEAF_NODE	3880:14	3880:14	19	data
ASSIGN_OP	3880:19	3880:19	17	=
LEAF_NODE	3880:19	3880:19	18	=
RVAL	3880:21	3880:21	17	NULL
FIELD	3880:21	3880:21	18	NULL
LEAF_NODE	3880:21	3880:21	19	NULL
LEAF_NODE	3880:25	3880:25	14	;
SIMPLE_DECL	3881:6	3881:34	13	enum TIFFReadDirEntryErr err ;
VAR_DECL	3881:6	3881:31	14	enum TIFFReadDirEntryErr err
TYPE	3881:6	3881:6	15	enum TIFFReadDirEntryErr
TYPE_NAME	3881:6	3881:11	16	enum TIFFReadDirEntryErr
LEAF_NODE	3881:6	3881:6	17	enum
LEAF_NODE	3881:11	3881:11	17	TIFFReadDirEntryErr
NAME	3881:31	3881:31	15	err
LEAF_NODE	3881:31	3881:31	16	err
LEAF_NODE	3881:34	3881:34	14	;
SIMPLE_DECL	3882:6	3882:24	13	uint32 saved_flags ;
VAR_DECL	3882:6	3882:13	14	uint32 saved_flags
TYPE	3882:6	3882:6	15	uint32
TYPE_NAME	3882:6	3882:6	16	uint32
LEAF_NODE	3882:6	3882:6	17	uint32
NAME	3882:13	3882:13	15	saved_flags
LEAF_NODE	3882:13	3882:13	16	saved_flags
LEAF_NODE	3882:24	3882:24	14	;
SIMPLE_DECL	3883:6	3883:11	13	int m ;
VAR_DECL	3883:6	3883:10	14	int m
TYPE	3883:6	3883:6	15	int
TYPE_NAME	3883:6	3883:6	16	int
LEAF_NODE	3883:6	3883:6	17	int
NAME	3883:10	3883:10	15	m
LEAF_NODE	3883:10	3883:10	16	m
LEAF_NODE	3883:11	3883:11	14	;
SELECTION	3884:6	3885:7	13	
KEYWORD	3884:6	3884:6	14	if
LEAF_NODE	3884:6	3884:6	15	if
LEAF_NODE	3884:9	3884:9	14	(
CONDITION	3884:10	3884:10	14	dp -> tdir_count != ( uint64 ) tif -> tif_dir . td_samplesperpixel
EXPR	3884:10	3884:36	15	dp -> tdir_count != ( uint64 ) tif -> tif_dir . td_samplesperpixel
FIELD	3884:10	3884:14	16	dp -> tdir_count
LEAF_NODE	3884:10	3884:10	17	dp
LEAF_NODE	3884:12	3884:12	17	->
LEAF_NODE	3884:14	3884:14	17	tdir_count
EQ_OPERATOR	3884:25	3884:25	16	!=
LEAF_NODE	3884:25	3884:25	17	!=
LEAF_NODE	3884:28	3884:28	16	(
TYPE_NAME	3884:29	3884:29	16	uint64
LEAF_NODE	3884:29	3884:29	17	uint64
LEAF_NODE	3884:35	3884:35	16	)
FIELD	3884:36	3884:49	16	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	3884:36	3884:36	17	tif
LEAF_NODE	3884:39	3884:39	17	->
LEAF_NODE	3884:41	3884:41	17	tif_dir
LEAF_NODE	3884:48	3884:48	17	.
LEAF_NODE	3884:49	3884:49	17	td_samplesperpixel
LEAF_NODE	3884:67	3884:67	14	)
STATEMENTS	3885:7	3885:7	14	
EXPR_STATEMENT	3885:7	3885:37	15	err = TIFFReadDirEntryErrCount ;
EXPR	3885:7	3885:7	16	err = TIFFReadDirEntryErrCount
ASSIGN	3885:7	3885:13	17	err = TIFFReadDirEntryErrCount
LVAL	3885:7	3885:7	18	err
FIELD	3885:7	3885:7	19	err
LEAF_NODE	3885:7	3885:7	20	err
ASSIGN_OP	3885:11	3885:11	18	=
LEAF_NODE	3885:11	3885:11	19	=
RVAL	3885:13	3885:13	18	TIFFReadDirEntryErrCount
FIELD	3885:13	3885:13	19	TIFFReadDirEntryErrCount
LEAF_NODE	3885:13	3885:13	20	TIFFReadDirEntryErrCount
LEAF_NODE	3885:37	3885:37	16	;
SELECTION	3886:6	3887:7	13	
KEYWORD	3886:6	3886:6	14	else
LEAF_NODE	3886:6	3886:6	15	else
STATEMENTS	3887:7	3887:7	14	
EXPR_STATEMENT	3887:7	3887:56	15	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data ) ;
EXPR	3887:7	3887:7	16	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data )
ASSIGN	3887:7	3887:13	17	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data )
LVAL	3887:7	3887:7	18	err
FIELD	3887:7	3887:7	19	err
LEAF_NODE	3887:7	3887:7	20	err
ASSIGN_OP	3887:11	3887:11	18	=
LEAF_NODE	3887:11	3887:11	19	=
RVAL	3887:13	3887:13	18	TIFFReadDirEntryDoubleArray ( tif , dp , & data )
FUNCTION_CALL	3887:13	3887:55	19	TIFFReadDirEntryDoubleArray ( tif , dp , & data )
CALLEE	3887:13	3887:13	20	TIFFReadDirEntryDoubleArray
LEAF_NODE	3887:13	3887:13	21	TIFFReadDirEntryDoubleArray
LEAF_NODE	3887:40	3887:40	20	(
ARGUMENT	3887:41	3887:41	20	tif
FIELD	3887:41	3887:41	21	tif
LEAF_NODE	3887:41	3887:41	22	tif
LEAF_NODE	3887:44	3887:44	20	,
ARGUMENT	3887:46	3887:46	20	dp
FIELD	3887:46	3887:46	21	dp
LEAF_NODE	3887:46	3887:46	22	dp
LEAF_NODE	3887:48	3887:48	20	,
ARGUMENT	3887:50	3887:50	20	& data
UNARY_EXPR	3887:50	3887:51	21	& data
UNARY_OPERATOR	3887:50	3887:50	22	&
LEAF_NODE	3887:50	3887:50	23	&
FIELD	3887:51	3887:51	22	data
LEAF_NODE	3887:51	3887:51	23	data
LEAF_NODE	3887:55	3887:55	20	)
LEAF_NODE	3887:56	3887:56	16	;
SELECTION	3888:6	3889:6	13	
KEYWORD	3888:6	3888:6	14	if
LEAF_NODE	3888:6	3888:6	15	if
LEAF_NODE	3888:9	3888:9	14	(
CONDITION	3888:10	3888:10	14	err != TIFFReadDirEntryErrOk
EXPR	3888:10	3888:15	15	err != TIFFReadDirEntryErrOk
FIELD	3888:10	3888:10	16	err
LEAF_NODE	3888:10	3888:10	17	err
EQ_OPERATOR	3888:13	3888:13	16	!=
LEAF_NODE	3888:13	3888:13	17	!=
FIELD	3888:15	3888:15	16	TIFFReadDirEntryErrOk
LEAF_NODE	3888:15	3888:15	17	TIFFReadDirEntryErrOk
LEAF_NODE	3888:36	3888:36	14	)
STATEMENTS	3889:6	3893:6	14	
LEAF_NODE	3889:6	3889:6	15	{
STATEMENTS	3890:7	3892:7	15	
EXPR_STATEMENT	3890:7	3890:47	16	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag ) ;
EXPR	3890:7	3890:7	17	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
ASSIGN	3890:7	3890:13	18	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
LVAL	3890:7	3890:7	19	fip
FIELD	3890:7	3890:7	20	fip
LEAF_NODE	3890:7	3890:7	21	fip
ASSIGN_OP	3890:11	3890:11	19	=
LEAF_NODE	3890:11	3890:11	20	=
RVAL	3890:13	3890:13	19	TIFFFieldWithTag ( tif , dp -> tdir_tag )
FUNCTION_CALL	3890:13	3890:46	20	TIFFFieldWithTag ( tif , dp -> tdir_tag )
CALLEE	3890:13	3890:13	21	TIFFFieldWithTag
LEAF_NODE	3890:13	3890:13	22	TIFFFieldWithTag
LEAF_NODE	3890:29	3890:29	21	(
ARGUMENT	3890:30	3890:30	21	tif
FIELD	3890:30	3890:30	22	tif
LEAF_NODE	3890:30	3890:30	23	tif
LEAF_NODE	3890:33	3890:33	21	,
ARGUMENT	3890:34	3890:34	21	dp -> tdir_tag
FIELD	3890:34	3890:38	22	dp -> tdir_tag
LEAF_NODE	3890:34	3890:34	23	dp
LEAF_NODE	3890:36	3890:36	23	->
LEAF_NODE	3890:38	3890:38	23	tdir_tag
LEAF_NODE	3890:46	3890:46	21	)
LEAF_NODE	3890:47	3890:47	17	;
EXPR_STATEMENT	3891:7	3891:92	16	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 ) ;
EXPR	3891:7	3891:7	17	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 )
FUNCTION_CALL	3891:7	3891:91	18	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 )
CALLEE	3891:7	3891:7	19	TIFFReadDirEntryOutputErr
LEAF_NODE	3891:7	3891:7	20	TIFFReadDirEntryOutputErr
LEAF_NODE	3891:32	3891:32	19	(
ARGUMENT	3891:33	3891:33	19	tif
FIELD	3891:33	3891:33	20	tif
LEAF_NODE	3891:33	3891:33	21	tif
LEAF_NODE	3891:36	3891:36	19	,
ARGUMENT	3891:37	3891:37	19	err
FIELD	3891:37	3891:37	20	err
LEAF_NODE	3891:37	3891:37	21	err
LEAF_NODE	3891:40	3891:40	19	,
ARGUMENT	3891:41	3891:41	19	module
FIELD	3891:41	3891:41	20	module
LEAF_NODE	3891:41	3891:41	21	module
LEAF_NODE	3891:47	3891:47	19	,
ARGUMENT	3891:48	3891:48	19	fip ? fip -> field_name : "unknown tagname"
COND_EXPR	3891:48	3891:72	20	fip ? fip -> field_name : "unknown tagname"
CONDITION	3891:48	3891:48	21	fip
FIELD	3891:48	3891:48	22	fip
LEAF_NODE	3891:48	3891:48	23	fip
LEAF_NODE	3891:52	3891:52	21	?
EXPR	3891:54	3891:54	21	fip -> field_name
FIELD	3891:54	3891:59	22	fip -> field_name
LEAF_NODE	3891:54	3891:54	23	fip
LEAF_NODE	3891:57	3891:57	23	->
LEAF_NODE	3891:59	3891:59	23	field_name
LEAF_NODE	3891:70	3891:70	21	:
FIELD	3891:72	3891:72	21	"unknown tagname"
LEAF_NODE	3891:72	3891:72	22	"unknown tagname"
LEAF_NODE	3891:89	3891:89	19	,
ARGUMENT	3891:90	3891:90	19	0
FIELD	3891:90	3891:90	20	0
LEAF_NODE	3891:90	3891:90	21	0
LEAF_NODE	3891:91	3891:91	19	)
LEAF_NODE	3891:92	3891:92	17	;
JUMP_STATEMENT	3892:7	3892:15	16	goto bad ;
KEYWORD	3892:7	3892:7	17	goto
LEAF_NODE	3892:7	3892:7	18	goto
DESTINATION	3892:12	3892:12	17	bad
LEAF_NODE	3892:12	3892:12	18	bad
LEAF_NODE	3892:15	3892:15	17	;
LEAF_NODE	3893:6	3893:6	15	}
EXPR_STATEMENT	3894:6	3894:34	13	saved_flags = tif -> tif_flags ;
EXPR	3894:6	3894:6	14	saved_flags = tif -> tif_flags
ASSIGN	3894:6	3894:20	15	saved_flags = tif -> tif_flags
LVAL	3894:6	3894:6	16	saved_flags
FIELD	3894:6	3894:6	17	saved_flags
LEAF_NODE	3894:6	3894:6	18	saved_flags
ASSIGN_OP	3894:18	3894:18	16	=
LEAF_NODE	3894:18	3894:18	17	=
RVAL	3894:20	3894:20	16	tif -> tif_flags
FIELD	3894:20	3894:25	17	tif -> tif_flags
LEAF_NODE	3894:20	3894:20	18	tif
LEAF_NODE	3894:23	3894:23	18	->
LEAF_NODE	3894:25	3894:25	18	tif_flags
LEAF_NODE	3894:34	3894:34	14	;
EXPR_STATEMENT	3895:6	3895:38	13	tif -> tif_flags |= TIFF_PERSAMPLE ;
EXPR	3895:6	3895:6	14	tif -> tif_flags |= TIFF_PERSAMPLE
ASSIGN	3895:6	3895:24	15	tif -> tif_flags |= TIFF_PERSAMPLE
LVAL	3895:6	3895:6	16	tif -> tif_flags
FIELD	3895:6	3895:11	17	tif -> tif_flags
LEAF_NODE	3895:6	3895:6	18	tif
LEAF_NODE	3895:9	3895:9	18	->
LEAF_NODE	3895:11	3895:11	18	tif_flags
ASSIGN_OP	3895:21	3895:21	16	|=
LEAF_NODE	3895:21	3895:21	17	|=
RVAL	3895:24	3895:24	16	TIFF_PERSAMPLE
FIELD	3895:24	3895:24	17	TIFF_PERSAMPLE
LEAF_NODE	3895:24	3895:24	18	TIFF_PERSAMPLE
LEAF_NODE	3895:38	3895:38	14	;
EXPR_STATEMENT	3896:6	3896:45	13	m = TIFFSetField ( tif , dp -> tdir_tag , data ) ;
EXPR	3896:6	3896:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , data )
ASSIGN	3896:6	3896:10	15	m = TIFFSetField ( tif , dp -> tdir_tag , data )
LVAL	3896:6	3896:6	16	m
FIELD	3896:6	3896:6	17	m
LEAF_NODE	3896:6	3896:6	18	m
ASSIGN_OP	3896:8	3896:8	16	=
LEAF_NODE	3896:8	3896:8	17	=
RVAL	3896:10	3896:10	16	TIFFSetField ( tif , dp -> tdir_tag , data )
FUNCTION_CALL	3896:10	3896:44	17	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	3896:10	3896:10	18	TIFFSetField
LEAF_NODE	3896:10	3896:10	19	TIFFSetField
LEAF_NODE	3896:22	3896:22	18	(
ARGUMENT	3896:23	3896:23	18	tif
FIELD	3896:23	3896:23	19	tif
LEAF_NODE	3896:23	3896:23	20	tif
LEAF_NODE	3896:26	3896:26	18	,
ARGUMENT	3896:27	3896:27	18	dp -> tdir_tag
FIELD	3896:27	3896:31	19	dp -> tdir_tag
LEAF_NODE	3896:27	3896:27	20	dp
LEAF_NODE	3896:29	3896:29	20	->
LEAF_NODE	3896:31	3896:31	20	tdir_tag
LEAF_NODE	3896:39	3896:39	18	,
ARGUMENT	3896:40	3896:40	18	data
FIELD	3896:40	3896:40	19	data
LEAF_NODE	3896:40	3896:40	20	data
LEAF_NODE	3896:44	3896:44	18	)
LEAF_NODE	3896:45	3896:45	14	;
EXPR_STATEMENT	3897:6	3897:34	13	tif -> tif_flags = saved_flags ;
EXPR	3897:6	3897:6	14	tif -> tif_flags = saved_flags
ASSIGN	3897:6	3897:23	15	tif -> tif_flags = saved_flags
LVAL	3897:6	3897:6	16	tif -> tif_flags
FIELD	3897:6	3897:11	17	tif -> tif_flags
LEAF_NODE	3897:6	3897:6	18	tif
LEAF_NODE	3897:9	3897:9	18	->
LEAF_NODE	3897:11	3897:11	18	tif_flags
ASSIGN_OP	3897:21	3897:21	16	=
LEAF_NODE	3897:21	3897:21	17	=
RVAL	3897:23	3897:23	16	saved_flags
FIELD	3897:23	3897:23	17	saved_flags
LEAF_NODE	3897:23	3897:23	18	saved_flags
LEAF_NODE	3897:34	3897:34	14	;
EXPR_STATEMENT	3898:6	3898:21	13	_TIFFfree ( data ) ;
EXPR	3898:6	3898:6	14	_TIFFfree ( data )
FUNCTION_CALL	3898:6	3898:20	15	_TIFFfree ( data )
CALLEE	3898:6	3898:6	16	_TIFFfree
LEAF_NODE	3898:6	3898:6	17	_TIFFfree
LEAF_NODE	3898:15	3898:15	16	(
ARGUMENT	3898:16	3898:16	16	data
FIELD	3898:16	3898:16	17	data
LEAF_NODE	3898:16	3898:16	18	data
LEAF_NODE	3898:20	3898:20	16	)
LEAF_NODE	3898:21	3898:21	14	;
SELECTION	3899:6	3900:7	13	
KEYWORD	3899:6	3899:6	14	if
LEAF_NODE	3899:6	3899:6	15	if
LEAF_NODE	3899:9	3899:9	14	(
CONDITION	3899:10	3899:10	14	! m
EXPR	3899:10	3899:10	15	! m
UNARY_EXPR	3899:10	3899:11	16	! m
UNARY_OPERATOR	3899:10	3899:10	17	!
LEAF_NODE	3899:10	3899:10	18	!
FIELD	3899:11	3899:11	17	m
LEAF_NODE	3899:11	3899:11	18	m
LEAF_NODE	3899:12	3899:12	14	)
STATEMENTS	3900:7	3900:7	14	
JUMP_STATEMENT	3900:7	3900:15	15	goto bad ;
KEYWORD	3900:7	3900:7	16	goto
LEAF_NODE	3900:7	3900:7	17	goto
DESTINATION	3900:12	3900:12	16	bad
LEAF_NODE	3900:12	3900:12	17	bad
LEAF_NODE	3900:15	3900:15	16	;
LEAF_NODE	3901:5	3901:5	12	}
JUMP_STATEMENT	3902:5	3902:10	12	break DESTINATION ;
KEYWORD	3902:5	3902:5	13	break
LEAF_NODE	3902:5	3902:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3902:10	3902:10	13	;
LABEL	3903:4	3903:29	12	case TIFFTAG_STRIPOFFSETS :
LEAF_NODE	3903:4	3903:4	13	case
LEAF_NODE	3903:9	3903:9	13	TIFFTAG_STRIPOFFSETS
LEAF_NODE	3903:29	3903:29	13	:
LABEL	3904:4	3904:28	12	case TIFFTAG_TILEOFFSETS :
LEAF_NODE	3904:4	3904:4	13	case
LEAF_NODE	3904:9	3904:9	13	TIFFTAG_TILEOFFSETS
LEAF_NODE	3904:28	3904:28	13	:
EXPR_STATEMENT	3905:5	3906:34	12	_TIFFmemcpy ( & ( tif -> tif_dir . td_stripoffset_entry ) , dp , sizeof ( TIFFDirEntry ) ) ;
EXPR	3905:5	3905:5	13	_TIFFmemcpy ( & ( tif -> tif_dir . td_stripoffset_entry ) , dp , sizeof ( TIFFDirEntry ) )
FUNCTION_CALL	3905:5	3906:33	14	_TIFFmemcpy ( & ( tif -> tif_dir . td_stripoffset_entry ) , dp , sizeof ( TIFFDirEntry ) )
CALLEE	3905:5	3905:5	15	_TIFFmemcpy
LEAF_NODE	3905:5	3905:5	16	_TIFFmemcpy
LEAF_NODE	3905:16	3905:16	15	(
ARGUMENT	3905:18	3905:18	15	& ( tif -> tif_dir . td_stripoffset_entry )
UNARY_EXPR	3905:18	3905:53	16	& ( tif -> tif_dir . td_stripoffset_entry )
UNARY_OPERATOR	3905:18	3905:18	17	&
LEAF_NODE	3905:18	3905:18	18	&
LEAF_NODE	3905:19	3905:19	17	(
FIELD	3905:20	3905:33	17	tif -> tif_dir . td_stripoffset_entry
LEAF_NODE	3905:20	3905:20	18	tif
LEAF_NODE	3905:23	3905:23	18	->
LEAF_NODE	3905:25	3905:25	18	tif_dir
LEAF_NODE	3905:32	3905:32	18	.
LEAF_NODE	3905:33	3905:33	18	td_stripoffset_entry
LEAF_NODE	3905:53	3905:53	17	)
LEAF_NODE	3905:54	3905:54	15	,
ARGUMENT	3906:8	3906:8	15	dp
FIELD	3906:8	3906:8	16	dp
LEAF_NODE	3906:8	3906:8	17	dp
LEAF_NODE	3906:10	3906:10	15	,
ARGUMENT	3906:12	3906:12	15	sizeof ( TIFFDirEntry )
FUNCTION_CALL	3906:12	3906:31	16	sizeof ( TIFFDirEntry )
CALLEE	3906:12	3906:12	17	sizeof
LEAF_NODE	3906:12	3906:12	18	sizeof
LEAF_NODE	3906:18	3906:18	17	(
ARGUMENT	3906:19	3906:19	17	TIFFDirEntry
FIELD	3906:19	3906:19	18	TIFFDirEntry
LEAF_NODE	3906:19	3906:19	19	TIFFDirEntry
LEAF_NODE	3906:31	3906:31	17	)
LEAF_NODE	3906:33	3906:33	15	)
LEAF_NODE	3906:34	3906:34	13	;
JUMP_STATEMENT	3907:5	3907:10	12	break DESTINATION ;
KEYWORD	3907:5	3907:5	13	break
LEAF_NODE	3907:5	3907:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3907:10	3907:10	13	;
LABEL	3908:4	3908:32	12	case TIFFTAG_STRIPBYTECOUNTS :
LEAF_NODE	3908:4	3908:4	13	case
LEAF_NODE	3908:9	3908:9	13	TIFFTAG_STRIPBYTECOUNTS
LEAF_NODE	3908:32	3908:32	13	:
LABEL	3909:4	3909:31	12	case TIFFTAG_TILEBYTECOUNTS :
LEAF_NODE	3909:4	3909:4	13	case
LEAF_NODE	3909:9	3909:9	13	TIFFTAG_TILEBYTECOUNTS
LEAF_NODE	3909:31	3909:31	13	:
EXPR_STATEMENT	3910:5	3911:34	12	_TIFFmemcpy ( & ( tif -> tif_dir . td_stripbytecount_entry ) , dp , sizeof ( TIFFDirEntry ) ) ;
EXPR	3910:5	3910:5	13	_TIFFmemcpy ( & ( tif -> tif_dir . td_stripbytecount_entry ) , dp , sizeof ( TIFFDirEntry ) )
FUNCTION_CALL	3910:5	3911:33	14	_TIFFmemcpy ( & ( tif -> tif_dir . td_stripbytecount_entry ) , dp , sizeof ( TIFFDirEntry ) )
CALLEE	3910:5	3910:5	15	_TIFFmemcpy
LEAF_NODE	3910:5	3910:5	16	_TIFFmemcpy
LEAF_NODE	3910:16	3910:16	15	(
ARGUMENT	3910:18	3910:18	15	& ( tif -> tif_dir . td_stripbytecount_entry )
UNARY_EXPR	3910:18	3910:56	16	& ( tif -> tif_dir . td_stripbytecount_entry )
UNARY_OPERATOR	3910:18	3910:18	17	&
LEAF_NODE	3910:18	3910:18	18	&
LEAF_NODE	3910:19	3910:19	17	(
FIELD	3910:20	3910:33	17	tif -> tif_dir . td_stripbytecount_entry
LEAF_NODE	3910:20	3910:20	18	tif
LEAF_NODE	3910:23	3910:23	18	->
LEAF_NODE	3910:25	3910:25	18	tif_dir
LEAF_NODE	3910:32	3910:32	18	.
LEAF_NODE	3910:33	3910:33	18	td_stripbytecount_entry
LEAF_NODE	3910:56	3910:56	17	)
LEAF_NODE	3910:57	3910:57	15	,
ARGUMENT	3911:8	3911:8	15	dp
FIELD	3911:8	3911:8	16	dp
LEAF_NODE	3911:8	3911:8	17	dp
LEAF_NODE	3911:10	3911:10	15	,
ARGUMENT	3911:12	3911:12	15	sizeof ( TIFFDirEntry )
FUNCTION_CALL	3911:12	3911:31	16	sizeof ( TIFFDirEntry )
CALLEE	3911:12	3911:12	17	sizeof
LEAF_NODE	3911:12	3911:12	18	sizeof
LEAF_NODE	3911:18	3911:18	17	(
ARGUMENT	3911:19	3911:19	17	TIFFDirEntry
FIELD	3911:19	3911:19	18	TIFFDirEntry
LEAF_NODE	3911:19	3911:19	19	TIFFDirEntry
LEAF_NODE	3911:31	3911:31	17	)
LEAF_NODE	3911:33	3911:33	15	)
LEAF_NODE	3911:34	3911:34	13	;
JUMP_STATEMENT	3912:5	3912:10	12	break DESTINATION ;
KEYWORD	3912:5	3912:5	13	break
LEAF_NODE	3912:5	3912:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3912:10	3912:10	13	;
LABEL	3913:4	3913:25	12	case TIFFTAG_COLORMAP :
LEAF_NODE	3913:4	3913:4	13	case
LEAF_NODE	3913:9	3913:9	13	TIFFTAG_COLORMAP
LEAF_NODE	3913:25	3913:25	13	:
LABEL	3914:4	3914:33	12	case TIFFTAG_TRANSFERFUNCTION :
LEAF_NODE	3914:4	3914:4	13	case
LEAF_NODE	3914:9	3914:9	13	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	3914:33	3914:33	13	:
LEAF_NODE	3915:5	3915:5	12	{
STATEMENTS	3916:6	3966:6	12	
SIMPLE_DECL	3916:6	3916:34	13	enum TIFFReadDirEntryErr err ;
VAR_DECL	3916:6	3916:31	14	enum TIFFReadDirEntryErr err
TYPE	3916:6	3916:6	15	enum TIFFReadDirEntryErr
TYPE_NAME	3916:6	3916:11	16	enum TIFFReadDirEntryErr
LEAF_NODE	3916:6	3916:6	17	enum
LEAF_NODE	3916:11	3916:11	17	TIFFReadDirEntryErr
NAME	3916:31	3916:31	15	err
LEAF_NODE	3916:31	3916:31	16	err
LEAF_NODE	3916:34	3916:34	14	;
SIMPLE_DECL	3917:6	3917:27	13	uint32 countpersample ;
VAR_DECL	3917:6	3917:13	14	uint32 countpersample
TYPE	3917:6	3917:6	15	uint32
TYPE_NAME	3917:6	3917:6	16	uint32
LEAF_NODE	3917:6	3917:6	17	uint32
NAME	3917:13	3917:13	15	countpersample
LEAF_NODE	3917:13	3917:13	16	countpersample
LEAF_NODE	3917:27	3917:27	14	;
SIMPLE_DECL	3918:6	3918:26	13	uint32 countrequired ;
VAR_DECL	3918:6	3918:13	14	uint32 countrequired
TYPE	3918:6	3918:6	15	uint32
TYPE_NAME	3918:6	3918:6	16	uint32
LEAF_NODE	3918:6	3918:6	17	uint32
NAME	3918:13	3918:13	15	countrequired
LEAF_NODE	3918:13	3918:13	16	countrequired
LEAF_NODE	3918:26	3918:26	14	;
SIMPLE_DECL	3919:6	3919:31	13	uint32 incrementpersample ;
VAR_DECL	3919:6	3919:13	14	uint32 incrementpersample
TYPE	3919:6	3919:6	15	uint32
TYPE_NAME	3919:6	3919:6	16	uint32
LEAF_NODE	3919:6	3919:6	17	uint32
NAME	3919:13	3919:13	15	incrementpersample
LEAF_NODE	3919:13	3919:13	16	incrementpersample
LEAF_NODE	3919:31	3919:31	14	;
SIMPLE_DECL	3920:6	3920:24	13	uint16 * value ; value = NULL ;
VAR_DECL	3920:6	3920:14	14	uint16 * value ; value = NULL
TYPE	3920:6	3920:12	15	uint16 *
TYPE_NAME	3920:6	3920:6	16	uint16
LEAF_NODE	3920:6	3920:6	17	uint16
POINTER	3920:12	3920:12	16	*
LEAF_NODE	3920:12	3920:12	17	*
NAME	3920:14	3920:14	15	value
LEAF_NODE	3920:14	3920:14	16	value
LEAF_NODE	0:0	0:0	15	;
INIT	3920:14	3920:14	15	value = NULL
ASSIGN	3920:14	3920:20	16	value = NULL
LVAL	3920:14	3920:14	17	value
NAME	3920:14	3920:14	18	value
LEAF_NODE	3920:14	3920:14	19	value
ASSIGN_OP	3920:19	3920:19	17	=
LEAF_NODE	3920:19	3920:19	18	=
RVAL	3920:20	3920:20	17	NULL
FIELD	3920:20	3920:20	18	NULL
LEAF_NODE	3920:20	3920:20	19	NULL
LEAF_NODE	3920:24	3920:24	14	;
SELECTION	3926:6	3927:6	13	
KEYWORD	3926:6	3926:6	14	if
LEAF_NODE	3926:6	3926:6	15	if
LEAF_NODE	3926:8	3926:8	14	(
CONDITION	3926:10	3926:10	14	! bitspersample_read
EXPR	3926:10	3926:10	15	! bitspersample_read
UNARY_EXPR	3926:10	3926:11	16	! bitspersample_read
UNARY_OPERATOR	3926:10	3926:10	17	!
LEAF_NODE	3926:10	3926:10	18	!
FIELD	3926:11	3926:11	17	bitspersample_read
LEAF_NODE	3926:11	3926:11	18	bitspersample_read
LEAF_NODE	3926:30	3926:30	14	)
STATEMENTS	3927:6	3933:6	14	
LEAF_NODE	3927:6	3927:6	15	{
STATEMENTS	3928:7	3932:7	15	
EXPR_STATEMENT	3928:7	3928:47	16	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag ) ;
EXPR	3928:7	3928:7	17	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
ASSIGN	3928:7	3928:13	18	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
LVAL	3928:7	3928:7	19	fip
FIELD	3928:7	3928:7	20	fip
LEAF_NODE	3928:7	3928:7	21	fip
ASSIGN_OP	3928:11	3928:11	19	=
LEAF_NODE	3928:11	3928:11	20	=
RVAL	3928:13	3928:13	19	TIFFFieldWithTag ( tif , dp -> tdir_tag )
FUNCTION_CALL	3928:13	3928:46	20	TIFFFieldWithTag ( tif , dp -> tdir_tag )
CALLEE	3928:13	3928:13	21	TIFFFieldWithTag
LEAF_NODE	3928:13	3928:13	22	TIFFFieldWithTag
LEAF_NODE	3928:29	3928:29	21	(
ARGUMENT	3928:30	3928:30	21	tif
FIELD	3928:30	3928:30	22	tif
LEAF_NODE	3928:30	3928:30	23	tif
LEAF_NODE	3928:33	3928:33	21	,
ARGUMENT	3928:34	3928:34	21	dp -> tdir_tag
FIELD	3928:34	3928:38	22	dp -> tdir_tag
LEAF_NODE	3928:34	3928:34	23	dp
LEAF_NODE	3928:36	3928:36	23	->
LEAF_NODE	3928:38	3928:38	23	tdir_tag
LEAF_NODE	3928:46	3928:46	21	)
LEAF_NODE	3928:47	3928:47	17	;
EXPR_STATEMENT	3929:7	3931:50	16	TIFFWarningExt ( tif -> tif_clientdata , module , "Ignoring %s since BitsPerSample tag not found" , fip ? fip -> field_name : "unknown tagname" ) ;
EXPR	3929:7	3929:7	17	TIFFWarningExt ( tif -> tif_clientdata , module , "Ignoring %s since BitsPerSample tag not found" , fip ? fip -> field_name : "unknown tagname" )
FUNCTION_CALL	3929:7	3931:49	18	TIFFWarningExt ( tif -> tif_clientdata , module , "Ignoring %s since BitsPerSample tag not found" , fip ? fip -> field_name : "unknown tagname" )
CALLEE	3929:7	3929:7	19	TIFFWarningExt
LEAF_NODE	3929:7	3929:7	20	TIFFWarningExt
LEAF_NODE	3929:21	3929:21	19	(
ARGUMENT	3929:22	3929:22	19	tif -> tif_clientdata
FIELD	3929:22	3929:27	20	tif -> tif_clientdata
LEAF_NODE	3929:22	3929:22	21	tif
LEAF_NODE	3929:25	3929:25	21	->
LEAF_NODE	3929:27	3929:27	21	tif_clientdata
LEAF_NODE	3929:41	3929:41	19	,
ARGUMENT	3929:42	3929:42	19	module
FIELD	3929:42	3929:42	20	module
LEAF_NODE	3929:42	3929:42	21	module
LEAF_NODE	3929:48	3929:48	19	,
ARGUMENT	3930:8	3930:8	19	"Ignoring %s since BitsPerSample tag not found"
FIELD	3930:8	3930:8	20	"Ignoring %s since BitsPerSample tag not found"
LEAF_NODE	3930:8	3930:8	21	"Ignoring %s since BitsPerSample tag not found"
LEAF_NODE	3930:55	3930:55	19	,
ARGUMENT	3931:8	3931:8	19	fip ? fip -> field_name : "unknown tagname"
COND_EXPR	3931:8	3931:32	20	fip ? fip -> field_name : "unknown tagname"
CONDITION	3931:8	3931:8	21	fip
FIELD	3931:8	3931:8	22	fip
LEAF_NODE	3931:8	3931:8	23	fip
LEAF_NODE	3931:12	3931:12	21	?
EXPR	3931:14	3931:14	21	fip -> field_name
FIELD	3931:14	3931:19	22	fip -> field_name
LEAF_NODE	3931:14	3931:14	23	fip
LEAF_NODE	3931:17	3931:17	23	->
LEAF_NODE	3931:19	3931:19	23	field_name
LEAF_NODE	3931:30	3931:30	21	:
FIELD	3931:32	3931:32	21	"unknown tagname"
LEAF_NODE	3931:32	3931:32	22	"unknown tagname"
LEAF_NODE	3931:49	3931:49	19	)
LEAF_NODE	3931:50	3931:50	17	;
JUMP_STATEMENT	3932:7	3932:15	16	continue DESTINATION ;
KEYWORD	3932:7	3932:7	17	continue
LEAF_NODE	3932:7	3932:7	18	continue
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	3932:15	3932:15	17	;
LEAF_NODE	3933:6	3933:6	15	}
SELECTION	3937:6	3938:6	13	
KEYWORD	3937:6	3937:6	14	if
LEAF_NODE	3937:6	3937:6	15	if
LEAF_NODE	3937:9	3937:9	14	(
CONDITION	3937:10	3937:10	14	tif -> tif_dir . td_bitspersample > 24
EXPR	3937:10	3937:42	15	tif -> tif_dir . td_bitspersample > 24
FIELD	3937:10	3937:23	16	tif -> tif_dir . td_bitspersample
LEAF_NODE	3937:10	3937:10	17	tif
LEAF_NODE	3937:13	3937:13	17	->
LEAF_NODE	3937:15	3937:15	17	tif_dir
LEAF_NODE	3937:22	3937:22	17	.
LEAF_NODE	3937:23	3937:23	17	td_bitspersample
REL_OPERATOR	3937:40	3937:40	16	>
LEAF_NODE	3937:40	3937:40	17	>
FIELD	3937:42	3937:42	16	24
LEAF_NODE	3937:42	3937:42	17	24
LEAF_NODE	3937:44	3937:44	14	)
STATEMENTS	3938:6	3945:6	14	
LEAF_NODE	3938:6	3938:6	15	{
STATEMENTS	3939:7	3944:7	15	
EXPR_STATEMENT	3939:7	3939:47	16	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag ) ;
EXPR	3939:7	3939:7	17	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
ASSIGN	3939:7	3939:13	18	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
LVAL	3939:7	3939:7	19	fip
FIELD	3939:7	3939:7	20	fip
LEAF_NODE	3939:7	3939:7	21	fip
ASSIGN_OP	3939:11	3939:11	19	=
LEAF_NODE	3939:11	3939:11	20	=
RVAL	3939:13	3939:13	19	TIFFFieldWithTag ( tif , dp -> tdir_tag )
FUNCTION_CALL	3939:13	3939:46	20	TIFFFieldWithTag ( tif , dp -> tdir_tag )
CALLEE	3939:13	3939:13	21	TIFFFieldWithTag
LEAF_NODE	3939:13	3939:13	22	TIFFFieldWithTag
LEAF_NODE	3939:29	3939:29	21	(
ARGUMENT	3939:30	3939:30	21	tif
FIELD	3939:30	3939:30	22	tif
LEAF_NODE	3939:30	3939:30	23	tif
LEAF_NODE	3939:33	3939:33	21	,
ARGUMENT	3939:34	3939:34	21	dp -> tdir_tag
FIELD	3939:34	3939:38	22	dp -> tdir_tag
LEAF_NODE	3939:34	3939:34	23	dp
LEAF_NODE	3939:36	3939:36	23	->
LEAF_NODE	3939:38	3939:38	23	tdir_tag
LEAF_NODE	3939:46	3939:46	21	)
LEAF_NODE	3939:47	3939:47	17	;
EXPR_STATEMENT	3940:7	3943:38	16	TIFFWarningExt ( tif -> tif_clientdata , module , "Ignoring %s because BitsPerSample=%d>24" , fip ? fip -> field_name : "unknown tagname" , tif -> tif_dir . td_bitspersample ) ;
EXPR	3940:7	3940:7	17	TIFFWarningExt ( tif -> tif_clientdata , module , "Ignoring %s because BitsPerSample=%d>24" , fip ? fip -> field_name : "unknown tagname" , tif -> tif_dir . td_bitspersample )
FUNCTION_CALL	3940:7	3943:37	18	TIFFWarningExt ( tif -> tif_clientdata , module , "Ignoring %s because BitsPerSample=%d>24" , fip ? fip -> field_name : "unknown tagname" , tif -> tif_dir . td_bitspersample )
CALLEE	3940:7	3940:7	19	TIFFWarningExt
LEAF_NODE	3940:7	3940:7	20	TIFFWarningExt
LEAF_NODE	3940:21	3940:21	19	(
ARGUMENT	3940:22	3940:22	19	tif -> tif_clientdata
FIELD	3940:22	3940:27	20	tif -> tif_clientdata
LEAF_NODE	3940:22	3940:22	21	tif
LEAF_NODE	3940:25	3940:25	21	->
LEAF_NODE	3940:27	3940:27	21	tif_clientdata
LEAF_NODE	3940:41	3940:41	19	,
ARGUMENT	3940:42	3940:42	19	module
FIELD	3940:42	3940:42	20	module
LEAF_NODE	3940:42	3940:42	21	module
LEAF_NODE	3940:48	3940:48	19	,
ARGUMENT	3941:8	3941:8	19	"Ignoring %s because BitsPerSample=%d>24"
FIELD	3941:8	3941:8	20	"Ignoring %s because BitsPerSample=%d>24"
LEAF_NODE	3941:8	3941:8	21	"Ignoring %s because BitsPerSample=%d>24"
LEAF_NODE	3941:49	3941:49	19	,
ARGUMENT	3942:8	3942:8	19	fip ? fip -> field_name : "unknown tagname"
COND_EXPR	3942:8	3942:32	20	fip ? fip -> field_name : "unknown tagname"
CONDITION	3942:8	3942:8	21	fip
FIELD	3942:8	3942:8	22	fip
LEAF_NODE	3942:8	3942:8	23	fip
LEAF_NODE	3942:12	3942:12	21	?
EXPR	3942:14	3942:14	21	fip -> field_name
FIELD	3942:14	3942:19	22	fip -> field_name
LEAF_NODE	3942:14	3942:14	23	fip
LEAF_NODE	3942:17	3942:17	23	->
LEAF_NODE	3942:19	3942:19	23	field_name
LEAF_NODE	3942:30	3942:30	21	:
FIELD	3942:32	3942:32	21	"unknown tagname"
LEAF_NODE	3942:32	3942:32	22	"unknown tagname"
LEAF_NODE	3942:49	3942:49	19	,
ARGUMENT	3943:8	3943:8	19	tif -> tif_dir . td_bitspersample
FIELD	3943:8	3943:21	20	tif -> tif_dir . td_bitspersample
LEAF_NODE	3943:8	3943:8	21	tif
LEAF_NODE	3943:11	3943:11	21	->
LEAF_NODE	3943:13	3943:13	21	tif_dir
LEAF_NODE	3943:20	3943:20	21	.
LEAF_NODE	3943:21	3943:21	21	td_bitspersample
LEAF_NODE	3943:37	3943:37	19	)
LEAF_NODE	3943:38	3943:38	17	;
JUMP_STATEMENT	3944:7	3944:15	16	continue DESTINATION ;
KEYWORD	3944:7	3944:7	17	continue
LEAF_NODE	3944:7	3944:7	18	continue
LEAF_NODE	0:0	0:0	17	DESTINATION
LEAF_NODE	3944:15	3944:15	17	;
LEAF_NODE	3945:6	3945:6	15	}
EXPR_STATEMENT	3946:6	3946:56	13	countpersample = ( 1U << tif -> tif_dir . td_bitspersample ) ;
EXPR	3946:6	3946:6	14	countpersample = ( 1U << tif -> tif_dir . td_bitspersample )
ASSIGN	3946:6	3946:21	15	countpersample = ( 1U << tif -> tif_dir . td_bitspersample )
LVAL	3946:6	3946:6	16	countpersample
FIELD	3946:6	3946:6	17	countpersample
LEAF_NODE	3946:6	3946:6	18	countpersample
ASSIGN_OP	3946:20	3946:20	16	=
LEAF_NODE	3946:20	3946:20	17	=
RVAL	3946:21	3946:55	16	( 1U << tif -> tif_dir . td_bitspersample )
LEAF_NODE	3946:21	3946:21	17	(
FIELD	3946:22	3946:22	17	1U
LEAF_NODE	3946:22	3946:22	18	1U
LEAF_NODE	3946:24	3946:24	17	<<
FIELD	3946:26	3946:39	17	tif -> tif_dir . td_bitspersample
LEAF_NODE	3946:26	3946:26	18	tif
LEAF_NODE	3946:29	3946:29	18	->
LEAF_NODE	3946:31	3946:31	18	tif_dir
LEAF_NODE	3946:38	3946:38	18	.
LEAF_NODE	3946:39	3946:39	18	td_bitspersample
LEAF_NODE	3946:55	3946:55	17	)
LEAF_NODE	3946:56	3946:56	14	;
SELECTION	3947:6	3948:6	13	
KEYWORD	3947:6	3947:6	14	if
LEAF_NODE	3947:6	3947:6	15	if
LEAF_NODE	3947:9	3947:9	14	(
CONDITION	3947:10	3947:10	14	( dp -> tdir_tag == TIFFTAG_TRANSFERFUNCTION ) && ( dp -> tdir_count == ( uint64 ) countpersample )
EXPR	3947:10	3947:10	15	( dp -> tdir_tag == TIFFTAG_TRANSFERFUNCTION ) && ( dp -> tdir_count == ( uint64 ) countpersample )
AND	3947:10	3947:52	16	( dp -> tdir_tag == TIFFTAG_TRANSFERFUNCTION ) && ( dp -> tdir_count == ( uint64 ) countpersample )
EXPR	3947:10	3947:49	17	( dp -> tdir_tag == TIFFTAG_TRANSFERFUNCTION )
LEAF_NODE	3947:10	3947:10	18	(
FIELD	3947:11	3947:15	18	dp -> tdir_tag
LEAF_NODE	3947:11	3947:11	19	dp
LEAF_NODE	3947:13	3947:13	19	->
LEAF_NODE	3947:15	3947:15	19	tdir_tag
EQ_OPERATOR	3947:23	3947:23	18	==
LEAF_NODE	3947:23	3947:23	19	==
FIELD	3947:25	3947:25	18	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	3947:25	3947:25	19	TIFFTAG_TRANSFERFUNCTION
LEAF_NODE	3947:49	3947:49	18	)
LEAF_NODE	3947:50	3947:50	17	&&
EXPR	3947:52	3947:91	17	( dp -> tdir_count == ( uint64 ) countpersample )
LEAF_NODE	3947:52	3947:52	18	(
FIELD	3947:53	3947:57	18	dp -> tdir_count
LEAF_NODE	3947:53	3947:53	19	dp
LEAF_NODE	3947:55	3947:55	19	->
LEAF_NODE	3947:57	3947:57	19	tdir_count
EQ_OPERATOR	3947:67	3947:67	18	==
LEAF_NODE	3947:67	3947:67	19	==
LEAF_NODE	3947:69	3947:69	18	(
TYPE_NAME	3947:70	3947:70	18	uint64
LEAF_NODE	3947:70	3947:70	19	uint64
LEAF_NODE	3947:76	3947:76	18	)
FIELD	3947:77	3947:77	18	countpersample
LEAF_NODE	3947:77	3947:77	19	countpersample
LEAF_NODE	3947:91	3947:91	18	)
LEAF_NODE	3947:92	3947:92	14	)
STATEMENTS	3948:6	3951:6	14	
LEAF_NODE	3948:6	3948:6	15	{
STATEMENTS	3949:7	3950:7	15	
EXPR_STATEMENT	3949:7	3949:35	16	countrequired = countpersample ;
EXPR	3949:7	3949:7	17	countrequired = countpersample
ASSIGN	3949:7	3949:21	18	countrequired = countpersample
LVAL	3949:7	3949:7	19	countrequired
FIELD	3949:7	3949:7	20	countrequired
LEAF_NODE	3949:7	3949:7	21	countrequired
ASSIGN_OP	3949:20	3949:20	19	=
LEAF_NODE	3949:20	3949:20	20	=
RVAL	3949:21	3949:21	19	countpersample
FIELD	3949:21	3949:21	20	countpersample
LEAF_NODE	3949:21	3949:21	21	countpersample
LEAF_NODE	3949:35	3949:35	17	;
EXPR_STATEMENT	3950:7	3950:27	16	incrementpersample = 0 ;
EXPR	3950:7	3950:7	17	incrementpersample = 0
ASSIGN	3950:7	3950:26	18	incrementpersample = 0
LVAL	3950:7	3950:7	19	incrementpersample
FIELD	3950:7	3950:7	20	incrementpersample
LEAF_NODE	3950:7	3950:7	21	incrementpersample
ASSIGN_OP	3950:25	3950:25	19	=
LEAF_NODE	3950:25	3950:25	20	=
RVAL	3950:26	3950:26	19	0
FIELD	3950:26	3950:26	20	0
LEAF_NODE	3950:26	3950:26	21	0
LEAF_NODE	3950:27	3950:27	17	;
LEAF_NODE	3951:6	3951:6	15	}
SELECTION	3952:6	3953:6	13	
KEYWORD	3952:6	3952:6	14	else
LEAF_NODE	3952:6	3952:6	15	else
STATEMENTS	3953:6	3956:6	14	
LEAF_NODE	3953:6	3953:6	15	{
STATEMENTS	3954:7	3955:7	15	
EXPR_STATEMENT	3954:7	3954:37	16	countrequired = 3 * countpersample ;
EXPR	3954:7	3954:7	17	countrequired = 3 * countpersample
ASSIGN	3954:7	3954:21	18	countrequired = 3 * countpersample
LVAL	3954:7	3954:7	19	countrequired
FIELD	3954:7	3954:7	20	countrequired
LEAF_NODE	3954:7	3954:7	21	countrequired
ASSIGN_OP	3954:20	3954:20	19	=
LEAF_NODE	3954:20	3954:20	20	=
RVAL	3954:21	3954:23	19	3 * countpersample
FIELD	3954:21	3954:21	20	3
LEAF_NODE	3954:21	3954:21	21	3
LEAF_NODE	3954:22	3954:22	20	*
FIELD	3954:23	3954:23	20	countpersample
LEAF_NODE	3954:23	3954:23	21	countpersample
LEAF_NODE	3954:37	3954:37	17	;
EXPR_STATEMENT	3955:7	3955:40	16	incrementpersample = countpersample ;
EXPR	3955:7	3955:7	17	incrementpersample = countpersample
ASSIGN	3955:7	3955:26	18	incrementpersample = countpersample
LVAL	3955:7	3955:7	19	incrementpersample
FIELD	3955:7	3955:7	20	incrementpersample
LEAF_NODE	3955:7	3955:7	21	incrementpersample
ASSIGN_OP	3955:25	3955:25	19	=
LEAF_NODE	3955:25	3955:25	20	=
RVAL	3955:26	3955:26	19	countpersample
FIELD	3955:26	3955:26	20	countpersample
LEAF_NODE	3955:26	3955:26	21	countpersample
LEAF_NODE	3955:40	3955:40	17	;
LEAF_NODE	3956:6	3956:6	15	}
SELECTION	3957:6	3958:7	13	
KEYWORD	3957:6	3957:6	14	if
LEAF_NODE	3957:6	3957:6	15	if
LEAF_NODE	3957:9	3957:9	14	(
CONDITION	3957:10	3957:10	14	dp -> tdir_count != ( uint64 ) countrequired
EXPR	3957:10	3957:34	15	dp -> tdir_count != ( uint64 ) countrequired
FIELD	3957:10	3957:14	16	dp -> tdir_count
LEAF_NODE	3957:10	3957:10	17	dp
LEAF_NODE	3957:12	3957:12	17	->
LEAF_NODE	3957:14	3957:14	17	tdir_count
EQ_OPERATOR	3957:24	3957:24	16	!=
LEAF_NODE	3957:24	3957:24	17	!=
LEAF_NODE	3957:26	3957:26	16	(
TYPE_NAME	3957:27	3957:27	16	uint64
LEAF_NODE	3957:27	3957:27	17	uint64
LEAF_NODE	3957:33	3957:33	16	)
FIELD	3957:34	3957:34	16	countrequired
LEAF_NODE	3957:34	3957:34	17	countrequired
LEAF_NODE	3957:47	3957:47	14	)
STATEMENTS	3958:7	3958:7	14	
EXPR_STATEMENT	3958:7	3958:35	15	err = TIFFReadDirEntryErrCount ;
EXPR	3958:7	3958:7	16	err = TIFFReadDirEntryErrCount
ASSIGN	3958:7	3958:11	17	err = TIFFReadDirEntryErrCount
LVAL	3958:7	3958:7	18	err
FIELD	3958:7	3958:7	19	err
LEAF_NODE	3958:7	3958:7	20	err
ASSIGN_OP	3958:10	3958:10	18	=
LEAF_NODE	3958:10	3958:10	19	=
RVAL	3958:11	3958:11	18	TIFFReadDirEntryErrCount
FIELD	3958:11	3958:11	19	TIFFReadDirEntryErrCount
LEAF_NODE	3958:11	3958:11	20	TIFFReadDirEntryErrCount
LEAF_NODE	3958:35	3958:35	16	;
SELECTION	3959:6	3960:7	13	
KEYWORD	3959:6	3959:6	14	else
LEAF_NODE	3959:6	3959:6	15	else
STATEMENTS	3960:7	3960:7	14	
EXPR_STATEMENT	3960:7	3960:52	15	err = TIFFReadDirEntryShortArray ( tif , dp , & value ) ;
EXPR	3960:7	3960:7	16	err = TIFFReadDirEntryShortArray ( tif , dp , & value )
ASSIGN	3960:7	3960:11	17	err = TIFFReadDirEntryShortArray ( tif , dp , & value )
LVAL	3960:7	3960:7	18	err
FIELD	3960:7	3960:7	19	err
LEAF_NODE	3960:7	3960:7	20	err
ASSIGN_OP	3960:10	3960:10	18	=
LEAF_NODE	3960:10	3960:10	19	=
RVAL	3960:11	3960:11	18	TIFFReadDirEntryShortArray ( tif , dp , & value )
FUNCTION_CALL	3960:11	3960:51	19	TIFFReadDirEntryShortArray ( tif , dp , & value )
CALLEE	3960:11	3960:11	20	TIFFReadDirEntryShortArray
LEAF_NODE	3960:11	3960:11	21	TIFFReadDirEntryShortArray
LEAF_NODE	3960:37	3960:37	20	(
ARGUMENT	3960:38	3960:38	20	tif
FIELD	3960:38	3960:38	21	tif
LEAF_NODE	3960:38	3960:38	22	tif
LEAF_NODE	3960:41	3960:41	20	,
ARGUMENT	3960:42	3960:42	20	dp
FIELD	3960:42	3960:42	21	dp
LEAF_NODE	3960:42	3960:42	22	dp
LEAF_NODE	3960:44	3960:44	20	,
ARGUMENT	3960:45	3960:45	20	& value
UNARY_EXPR	3960:45	3960:46	21	& value
UNARY_OPERATOR	3960:45	3960:45	22	&
LEAF_NODE	3960:45	3960:45	23	&
FIELD	3960:46	3960:46	22	value
LEAF_NODE	3960:46	3960:46	23	value
LEAF_NODE	3960:51	3960:51	20	)
LEAF_NODE	3960:52	3960:52	16	;
SELECTION	3961:6	3962:6	13	
KEYWORD	3961:6	3961:6	14	if
LEAF_NODE	3961:6	3961:6	15	if
LEAF_NODE	3961:9	3961:9	14	(
CONDITION	3961:10	3961:10	14	err != TIFFReadDirEntryErrOk
EXPR	3961:10	3961:15	15	err != TIFFReadDirEntryErrOk
FIELD	3961:10	3961:10	16	err
LEAF_NODE	3961:10	3961:10	17	err
EQ_OPERATOR	3961:13	3961:13	16	!=
LEAF_NODE	3961:13	3961:13	17	!=
FIELD	3961:15	3961:15	16	TIFFReadDirEntryErrOk
LEAF_NODE	3961:15	3961:15	17	TIFFReadDirEntryErrOk
LEAF_NODE	3961:36	3961:36	14	)
STATEMENTS	3962:6	3965:6	14	
LEAF_NODE	3962:6	3962:6	15	{
STATEMENTS	3963:7	3964:7	15	
EXPR_STATEMENT	3963:7	3963:47	16	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag ) ;
EXPR	3963:7	3963:7	17	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
ASSIGN	3963:7	3963:13	18	fip = TIFFFieldWithTag ( tif , dp -> tdir_tag )
LVAL	3963:7	3963:7	19	fip
FIELD	3963:7	3963:7	20	fip
LEAF_NODE	3963:7	3963:7	21	fip
ASSIGN_OP	3963:11	3963:11	19	=
LEAF_NODE	3963:11	3963:11	20	=
RVAL	3963:13	3963:13	19	TIFFFieldWithTag ( tif , dp -> tdir_tag )
FUNCTION_CALL	3963:13	3963:46	20	TIFFFieldWithTag ( tif , dp -> tdir_tag )
CALLEE	3963:13	3963:13	21	TIFFFieldWithTag
LEAF_NODE	3963:13	3963:13	22	TIFFFieldWithTag
LEAF_NODE	3963:29	3963:29	21	(
ARGUMENT	3963:30	3963:30	21	tif
FIELD	3963:30	3963:30	22	tif
LEAF_NODE	3963:30	3963:30	23	tif
LEAF_NODE	3963:33	3963:33	21	,
ARGUMENT	3963:34	3963:34	21	dp -> tdir_tag
FIELD	3963:34	3963:38	22	dp -> tdir_tag
LEAF_NODE	3963:34	3963:34	23	dp
LEAF_NODE	3963:36	3963:36	23	->
LEAF_NODE	3963:38	3963:38	23	tdir_tag
LEAF_NODE	3963:46	3963:46	21	)
LEAF_NODE	3963:47	3963:47	17	;
EXPR_STATEMENT	3964:7	3964:92	16	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 1 ) ;
EXPR	3964:7	3964:7	17	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 1 )
FUNCTION_CALL	3964:7	3964:91	18	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 1 )
CALLEE	3964:7	3964:7	19	TIFFReadDirEntryOutputErr
LEAF_NODE	3964:7	3964:7	20	TIFFReadDirEntryOutputErr
LEAF_NODE	3964:32	3964:32	19	(
ARGUMENT	3964:33	3964:33	19	tif
FIELD	3964:33	3964:33	20	tif
LEAF_NODE	3964:33	3964:33	21	tif
LEAF_NODE	3964:36	3964:36	19	,
ARGUMENT	3964:37	3964:37	19	err
FIELD	3964:37	3964:37	20	err
LEAF_NODE	3964:37	3964:37	21	err
LEAF_NODE	3964:40	3964:40	19	,
ARGUMENT	3964:41	3964:41	19	module
FIELD	3964:41	3964:41	20	module
LEAF_NODE	3964:41	3964:41	21	module
LEAF_NODE	3964:47	3964:47	19	,
ARGUMENT	3964:48	3964:48	19	fip ? fip -> field_name : "unknown tagname"
COND_EXPR	3964:48	3964:72	20	fip ? fip -> field_name : "unknown tagname"
CONDITION	3964:48	3964:48	21	fip
FIELD	3964:48	3964:48	22	fip
LEAF_NODE	3964:48	3964:48	23	fip
LEAF_NODE	3964:52	3964:52	21	?
EXPR	3964:54	3964:54	21	fip -> field_name
FIELD	3964:54	3964:59	22	fip -> field_name
LEAF_NODE	3964:54	3964:54	23	fip
LEAF_NODE	3964:57	3964:57	23	->
LEAF_NODE	3964:59	3964:59	23	field_name
LEAF_NODE	3964:70	3964:70	21	:
FIELD	3964:72	3964:72	21	"unknown tagname"
LEAF_NODE	3964:72	3964:72	22	"unknown tagname"
LEAF_NODE	3964:89	3964:89	19	,
ARGUMENT	3964:90	3964:90	19	1
FIELD	3964:90	3964:90	20	1
LEAF_NODE	3964:90	3964:90	21	1
LEAF_NODE	3964:91	3964:91	19	)
LEAF_NODE	3964:92	3964:92	17	;
LEAF_NODE	3965:6	3965:6	15	}
SELECTION	3966:6	3967:6	13	
KEYWORD	3966:6	3966:6	14	else
LEAF_NODE	3966:6	3966:6	15	else
STATEMENTS	3967:6	3970:6	14	
LEAF_NODE	3967:6	3967:6	15	{
STATEMENTS	3968:7	3969:7	15	
EXPR_STATEMENT	3968:7	3968:95	16	TIFFSetField ( tif , dp -> tdir_tag , value , value + incrementpersample , value + 2 * incrementpersample ) ;
EXPR	3968:7	3968:7	17	TIFFSetField ( tif , dp -> tdir_tag , value , value + incrementpersample , value + 2 * incrementpersample )
FUNCTION_CALL	3968:7	3968:94	18	TIFFSetField ( tif , dp -> tdir_tag , value , value + incrementpersample , value + 2 * incrementpersample )
CALLEE	3968:7	3968:7	19	TIFFSetField
LEAF_NODE	3968:7	3968:7	20	TIFFSetField
LEAF_NODE	3968:19	3968:19	19	(
ARGUMENT	3968:20	3968:20	19	tif
FIELD	3968:20	3968:20	20	tif
LEAF_NODE	3968:20	3968:20	21	tif
LEAF_NODE	3968:23	3968:23	19	,
ARGUMENT	3968:24	3968:24	19	dp -> tdir_tag
FIELD	3968:24	3968:28	20	dp -> tdir_tag
LEAF_NODE	3968:24	3968:24	21	dp
LEAF_NODE	3968:26	3968:26	21	->
LEAF_NODE	3968:28	3968:28	21	tdir_tag
LEAF_NODE	3968:36	3968:36	19	,
ARGUMENT	3968:37	3968:37	19	value
FIELD	3968:37	3968:37	20	value
LEAF_NODE	3968:37	3968:37	21	value
LEAF_NODE	3968:42	3968:42	19	,
ARGUMENT	3968:43	3968:49	19	value + incrementpersample
FIELD	3968:43	3968:43	20	value
LEAF_NODE	3968:43	3968:43	21	value
LEAF_NODE	3968:48	3968:48	20	+
FIELD	3968:49	3968:49	20	incrementpersample
LEAF_NODE	3968:49	3968:49	21	incrementpersample
LEAF_NODE	3968:67	3968:67	19	,
ARGUMENT	3968:68	3968:76	19	value + 2 * incrementpersample
FIELD	3968:68	3968:68	20	value
LEAF_NODE	3968:68	3968:68	21	value
LEAF_NODE	3968:73	3968:73	20	+
FIELD	3968:74	3968:74	20	2
LEAF_NODE	3968:74	3968:74	21	2
LEAF_NODE	3968:75	3968:75	20	*
FIELD	3968:76	3968:76	20	incrementpersample
LEAF_NODE	3968:76	3968:76	21	incrementpersample
LEAF_NODE	3968:94	3968:94	19	)
LEAF_NODE	3968:95	3968:95	17	;
EXPR_STATEMENT	3969:7	3969:23	16	_TIFFfree ( value ) ;
EXPR	3969:7	3969:7	17	_TIFFfree ( value )
FUNCTION_CALL	3969:7	3969:22	18	_TIFFfree ( value )
CALLEE	3969:7	3969:7	19	_TIFFfree
LEAF_NODE	3969:7	3969:7	20	_TIFFfree
LEAF_NODE	3969:16	3969:16	19	(
ARGUMENT	3969:17	3969:17	19	value
FIELD	3969:17	3969:17	20	value
LEAF_NODE	3969:17	3969:17	21	value
LEAF_NODE	3969:22	3969:22	19	)
LEAF_NODE	3969:23	3969:23	17	;
LEAF_NODE	3970:6	3970:6	15	}
LEAF_NODE	3971:5	3971:5	12	}
JUMP_STATEMENT	3972:5	3972:10	12	break DESTINATION ;
KEYWORD	3972:5	3972:5	13	break
LEAF_NODE	3972:5	3972:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3972:10	3972:10	13	;
LABEL	3974:4	3974:29	12	case TIFFTAG_OSUBFILETYPE :
LEAF_NODE	3974:4	3974:4	13	case
LEAF_NODE	3974:9	3974:9	13	TIFFTAG_OSUBFILETYPE
LEAF_NODE	3974:29	3974:29	13	:
LEAF_NODE	3975:5	3975:5	12	{
STATEMENTS	3976:6	3978:6	12	
SIMPLE_DECL	3976:6	3976:19	13	uint16 valueo ;
VAR_DECL	3976:6	3976:13	14	uint16 valueo
TYPE	3976:6	3976:6	15	uint16
TYPE_NAME	3976:6	3976:6	16	uint16
LEAF_NODE	3976:6	3976:6	17	uint16
NAME	3976:13	3976:13	15	valueo
LEAF_NODE	3976:13	3976:13	16	valueo
LEAF_NODE	3976:19	3976:19	14	;
SIMPLE_DECL	3977:6	3977:18	13	uint32 value ;
VAR_DECL	3977:6	3977:13	14	uint32 value
TYPE	3977:6	3977:6	15	uint32
TYPE_NAME	3977:6	3977:6	16	uint32
LEAF_NODE	3977:6	3977:6	17	uint32
NAME	3977:13	3977:13	15	value
LEAF_NODE	3977:13	3977:13	16	value
LEAF_NODE	3977:18	3977:18	14	;
SELECTION	3978:6	3979:6	13	
KEYWORD	3978:6	3978:6	14	if
LEAF_NODE	3978:6	3978:6	15	if
LEAF_NODE	3978:9	3978:9	14	(
CONDITION	3978:10	3978:10	14	TIFFReadDirEntryShort ( tif , dp , & valueo ) == TIFFReadDirEntryErrOk
EXPR	3978:10	3978:49	15	TIFFReadDirEntryShort ( tif , dp , & valueo ) == TIFFReadDirEntryErrOk
FUNCTION_CALL	3978:10	3978:46	16	TIFFReadDirEntryShort ( tif , dp , & valueo )
CALLEE	3978:10	3978:10	17	TIFFReadDirEntryShort
LEAF_NODE	3978:10	3978:10	18	TIFFReadDirEntryShort
LEAF_NODE	3978:31	3978:31	17	(
ARGUMENT	3978:32	3978:32	17	tif
FIELD	3978:32	3978:32	18	tif
LEAF_NODE	3978:32	3978:32	19	tif
LEAF_NODE	3978:35	3978:35	17	,
ARGUMENT	3978:36	3978:36	17	dp
FIELD	3978:36	3978:36	18	dp
LEAF_NODE	3978:36	3978:36	19	dp
LEAF_NODE	3978:38	3978:38	17	,
ARGUMENT	3978:39	3978:39	17	& valueo
UNARY_EXPR	3978:39	3978:40	18	& valueo
UNARY_OPERATOR	3978:39	3978:39	19	&
LEAF_NODE	3978:39	3978:39	20	&
FIELD	3978:40	3978:40	19	valueo
LEAF_NODE	3978:40	3978:40	20	valueo
LEAF_NODE	3978:46	3978:46	17	)
EQ_OPERATOR	3978:47	3978:47	16	==
LEAF_NODE	3978:47	3978:47	17	==
FIELD	3978:49	3978:49	16	TIFFReadDirEntryErrOk
LEAF_NODE	3978:49	3978:49	17	TIFFReadDirEntryErrOk
LEAF_NODE	3978:70	3978:70	14	)
STATEMENTS	3979:6	3988:6	14	
LEAF_NODE	3979:6	3979:6	15	{
STATEMENTS	3980:7	3986:7	15	
SELECTION	3980:7	3981:7	16	
KEYWORD	3980:7	3980:7	17	switch
LEAF_NODE	3980:7	3980:7	18	switch
LEAF_NODE	3980:14	3980:14	17	(
CONDITION	3980:15	3980:15	17	valueo
EXPR	3980:15	3980:15	18	valueo
FIELD	3980:15	3980:15	19	valueo
LEAF_NODE	3980:15	3980:15	20	valueo
LEAF_NODE	3980:21	3980:21	17	)
STATEMENTS	3981:7	3985:7	17	
LEAF_NODE	3981:7	3981:7	18	{
STATEMENTS	3982:8	3984:26	18	
LABEL	3982:8	3982:35	19	case OFILETYPE_REDUCEDIMAGE :
LEAF_NODE	3982:8	3982:8	20	case
LEAF_NODE	3982:13	3982:13	20	OFILETYPE_REDUCEDIMAGE
LEAF_NODE	3982:35	3982:35	20	:
EXPR_STATEMENT	3982:37	3982:64	19	value = FILETYPE_REDUCEDIMAGE ;
EXPR	3982:37	3982:37	20	value = FILETYPE_REDUCEDIMAGE
ASSIGN	3982:37	3982:43	21	value = FILETYPE_REDUCEDIMAGE
LVAL	3982:37	3982:37	22	value
FIELD	3982:37	3982:37	23	value
LEAF_NODE	3982:37	3982:37	24	value
ASSIGN_OP	3982:42	3982:42	22	=
LEAF_NODE	3982:42	3982:42	23	=
RVAL	3982:43	3982:43	22	FILETYPE_REDUCEDIMAGE
FIELD	3982:43	3982:43	23	FILETYPE_REDUCEDIMAGE
LEAF_NODE	3982:43	3982:43	24	FILETYPE_REDUCEDIMAGE
LEAF_NODE	3982:64	3982:64	20	;
JUMP_STATEMENT	3982:66	3982:71	19	break DESTINATION ;
KEYWORD	3982:66	3982:66	20	break
LEAF_NODE	3982:66	3982:66	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	3982:71	3982:71	20	;
LABEL	3983:8	3983:27	19	case OFILETYPE_PAGE :
LEAF_NODE	3983:8	3983:8	20	case
LEAF_NODE	3983:13	3983:13	20	OFILETYPE_PAGE
LEAF_NODE	3983:27	3983:27	20	:
EXPR_STATEMENT	3983:29	3983:48	19	value = FILETYPE_PAGE ;
EXPR	3983:29	3983:29	20	value = FILETYPE_PAGE
ASSIGN	3983:29	3983:35	21	value = FILETYPE_PAGE
LVAL	3983:29	3983:29	22	value
FIELD	3983:29	3983:29	23	value
LEAF_NODE	3983:29	3983:29	24	value
ASSIGN_OP	3983:34	3983:34	22	=
LEAF_NODE	3983:34	3983:34	23	=
RVAL	3983:35	3983:35	22	FILETYPE_PAGE
FIELD	3983:35	3983:35	23	FILETYPE_PAGE
LEAF_NODE	3983:35	3983:35	24	FILETYPE_PAGE
LEAF_NODE	3983:48	3983:48	20	;
JUMP_STATEMENT	3983:50	3983:55	19	break DESTINATION ;
KEYWORD	3983:50	3983:50	20	break
LEAF_NODE	3983:50	3983:50	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	3983:55	3983:55	20	;
LABEL	3984:8	3984:15	19	default :
LEAF_NODE	3984:8	3984:8	20	default
LEAF_NODE	3984:15	3984:15	20	:
EXPR_STATEMENT	3984:17	3984:24	19	value = 0 ;
EXPR	3984:17	3984:17	20	value = 0
ASSIGN	3984:17	3984:23	21	value = 0
LVAL	3984:17	3984:17	22	value
FIELD	3984:17	3984:17	23	value
LEAF_NODE	3984:17	3984:17	24	value
ASSIGN_OP	3984:22	3984:22	22	=
LEAF_NODE	3984:22	3984:22	23	=
RVAL	3984:23	3984:23	22	0
FIELD	3984:23	3984:23	23	0
LEAF_NODE	3984:23	3984:23	24	0
LEAF_NODE	3984:24	3984:24	20	;
JUMP_STATEMENT	3984:26	3984:31	19	break DESTINATION ;
KEYWORD	3984:26	3984:26	20	break
LEAF_NODE	3984:26	3984:26	21	break
LEAF_NODE	0:0	0:0	20	DESTINATION
LEAF_NODE	3984:31	3984:31	20	;
LEAF_NODE	3985:7	3985:7	18	}
SELECTION	3986:7	3987:8	16	
KEYWORD	3986:7	3986:7	17	if
LEAF_NODE	3986:7	3986:7	18	if
LEAF_NODE	3986:10	3986:10	17	(
CONDITION	3986:11	3986:11	17	value != 0
EXPR	3986:11	3986:18	18	value != 0
FIELD	3986:11	3986:11	19	value
LEAF_NODE	3986:11	3986:11	20	value
EQ_OPERATOR	3986:16	3986:16	19	!=
LEAF_NODE	3986:16	3986:16	20	!=
FIELD	3986:18	3986:18	19	0
LEAF_NODE	3986:18	3986:18	20	0
LEAF_NODE	3986:19	3986:19	17	)
STATEMENTS	3987:8	3987:8	17	
EXPR_STATEMENT	3987:8	3987:51	18	TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , value ) ;
EXPR	3987:8	3987:8	19	TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , value )
FUNCTION_CALL	3987:8	3987:50	20	TIFFSetField ( tif , TIFFTAG_SUBFILETYPE , value )
CALLEE	3987:8	3987:8	21	TIFFSetField
LEAF_NODE	3987:8	3987:8	22	TIFFSetField
LEAF_NODE	3987:20	3987:20	21	(
ARGUMENT	3987:21	3987:21	21	tif
FIELD	3987:21	3987:21	22	tif
LEAF_NODE	3987:21	3987:21	23	tif
LEAF_NODE	3987:24	3987:24	21	,
ARGUMENT	3987:25	3987:25	21	TIFFTAG_SUBFILETYPE
FIELD	3987:25	3987:25	22	TIFFTAG_SUBFILETYPE
LEAF_NODE	3987:25	3987:25	23	TIFFTAG_SUBFILETYPE
LEAF_NODE	3987:44	3987:44	21	,
ARGUMENT	3987:45	3987:45	21	value
FIELD	3987:45	3987:45	22	value
LEAF_NODE	3987:45	3987:45	23	value
LEAF_NODE	3987:50	3987:50	21	)
LEAF_NODE	3987:51	3987:51	19	;
LEAF_NODE	3988:6	3988:6	15	}
LEAF_NODE	3989:5	3989:5	12	}
JUMP_STATEMENT	3990:5	3990:10	12	break DESTINATION ;
KEYWORD	3990:5	3990:5	13	break
LEAF_NODE	3990:5	3990:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3990:10	3990:10	13	;
LABEL	3992:4	3992:11	12	default :
LEAF_NODE	3992:4	3992:4	13	default
LEAF_NODE	3992:11	3992:11	13	:
EXPR_STATEMENT	3993:5	3993:45	12	( void ) TIFFFetchNormalTag ( tif , dp , TRUE ) ;
EXPR	3993:5	3993:12	13	( void ) TIFFFetchNormalTag ( tif , dp , TRUE )
LEAF_NODE	3993:5	3993:5	14	(
TYPE_NAME	3993:6	3993:6	14	void
LEAF_NODE	3993:6	3993:6	15	void
LEAF_NODE	3993:10	3993:10	14	)
FUNCTION_CALL	3993:12	3993:44	14	TIFFFetchNormalTag ( tif , dp , TRUE )
CALLEE	3993:12	3993:12	15	TIFFFetchNormalTag
LEAF_NODE	3993:12	3993:12	16	TIFFFetchNormalTag
LEAF_NODE	3993:30	3993:30	15	(
ARGUMENT	3993:31	3993:31	15	tif
FIELD	3993:31	3993:31	16	tif
LEAF_NODE	3993:31	3993:31	17	tif
LEAF_NODE	3993:34	3993:34	15	,
ARGUMENT	3993:36	3993:36	15	dp
FIELD	3993:36	3993:36	16	dp
LEAF_NODE	3993:36	3993:36	17	dp
LEAF_NODE	3993:38	3993:38	15	,
ARGUMENT	3993:40	3993:40	15	TRUE
FIELD	3993:40	3993:40	16	TRUE
LEAF_NODE	3993:40	3993:40	17	TRUE
LEAF_NODE	3993:44	3993:44	15	)
LEAF_NODE	3993:45	3993:45	13	;
JUMP_STATEMENT	3994:5	3994:10	12	break DESTINATION ;
KEYWORD	3994:5	3994:5	13	break
LEAF_NODE	3994:5	3994:5	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	3994:10	3994:10	13	;
LEAF_NODE	3995:4	3995:4	11	}
LEAF_NODE	3996:3	3996:3	8	}
LEAF_NODE	3997:2	3997:2	5	}
SELECTION	3999:8	4008:8	3	
KEYWORD	3999:8	3999:8	4	if
LEAF_NODE	3999:8	3999:8	5	if
LEAF_NODE	3999:10	3999:10	4	(
CONDITION	3999:12	3999:12	4	tif -> tif_mode == O_RDWR && tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	3999:12	3999:12	5	tif -> tif_mode == O_RDWR && tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	3999:12	4000:12	6	tif -> tif_mode == O_RDWR && tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	3999:12	3999:29	7	tif -> tif_mode == O_RDWR
FIELD	3999:12	3999:17	8	tif -> tif_mode
LEAF_NODE	3999:12	3999:12	9	tif
LEAF_NODE	3999:15	3999:15	9	->
LEAF_NODE	3999:17	3999:17	9	tif_mode
EQ_OPERATOR	3999:26	3999:26	8	==
LEAF_NODE	3999:26	3999:26	9	==
FIELD	3999:29	3999:29	8	O_RDWR
LEAF_NODE	3999:29	3999:29	9	O_RDWR
LEAF_NODE	3999:36	3999:36	7	&&
EXPR	4000:12	4000:12	7	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	4000:12	4001:12	8	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0 && tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	4000:12	4000:58	9	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0
FIELD	4000:12	4000:46	10	tif -> tif_dir . td_stripoffset_entry . tdir_tag
LEAF_NODE	4000:12	4000:12	11	tif
LEAF_NODE	4000:15	4000:15	11	->
LEAF_NODE	4000:17	4000:17	11	tif_dir
LEAF_NODE	4000:24	4000:24	11	.
LEAF_NODE	4000:25	4000:25	11	td_stripoffset_entry
LEAF_NODE	4000:45	4000:45	11	.
LEAF_NODE	4000:46	4000:46	11	tdir_tag
EQ_OPERATOR	4000:55	4000:55	10	!=
LEAF_NODE	4000:55	4000:55	11	!=
FIELD	4000:58	4000:58	10	0
LEAF_NODE	4000:58	4000:58	11	0
LEAF_NODE	4000:60	4000:60	9	&&
EXPR	4001:12	4001:12	9	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	4001:12	4002:12	10	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	4001:12	4001:60	11	tif -> tif_dir . td_stripoffset_entry . tdir_count == 0
FIELD	4001:12	4001:46	12	tif -> tif_dir . td_stripoffset_entry . tdir_count
LEAF_NODE	4001:12	4001:12	13	tif
LEAF_NODE	4001:15	4001:15	13	->
LEAF_NODE	4001:17	4001:17	13	tif_dir
LEAF_NODE	4001:24	4001:24	13	.
LEAF_NODE	4001:25	4001:25	13	td_stripoffset_entry
LEAF_NODE	4001:45	4001:45	13	.
LEAF_NODE	4001:46	4001:46	13	tdir_count
EQ_OPERATOR	4001:57	4001:57	12	==
LEAF_NODE	4001:57	4001:57	13	==
FIELD	4001:60	4001:60	12	0
LEAF_NODE	4001:60	4001:60	13	0
LEAF_NODE	4001:62	4001:62	11	&&
EXPR	4002:12	4002:12	11	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	4002:12	4003:12	12	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0 && tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	4002:12	4002:59	13	tif -> tif_dir . td_stripoffset_entry . tdir_type == 0
FIELD	4002:12	4002:46	14	tif -> tif_dir . td_stripoffset_entry . tdir_type
LEAF_NODE	4002:12	4002:12	15	tif
LEAF_NODE	4002:15	4002:15	15	->
LEAF_NODE	4002:17	4002:17	15	tif_dir
LEAF_NODE	4002:24	4002:24	15	.
LEAF_NODE	4002:25	4002:25	15	td_stripoffset_entry
LEAF_NODE	4002:45	4002:45	15	.
LEAF_NODE	4002:46	4002:46	15	tdir_type
EQ_OPERATOR	4002:56	4002:56	14	==
LEAF_NODE	4002:56	4002:56	15	==
FIELD	4002:59	4002:59	14	0
LEAF_NODE	4002:59	4002:59	15	0
LEAF_NODE	4002:61	4002:61	13	&&
EXPR	4003:12	4003:12	13	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	4003:12	4004:12	14	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	4003:12	4003:72	15	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8 == 0
FIELD	4003:12	4003:58	16	tif -> tif_dir . td_stripoffset_entry . tdir_offset . toff_long8
LEAF_NODE	4003:12	4003:12	17	tif
LEAF_NODE	4003:15	4003:15	17	->
LEAF_NODE	4003:17	4003:17	17	tif_dir
LEAF_NODE	4003:24	4003:24	17	.
LEAF_NODE	4003:25	4003:25	17	td_stripoffset_entry
LEAF_NODE	4003:45	4003:45	17	.
LEAF_NODE	4003:46	4003:46	17	tdir_offset
LEAF_NODE	4003:57	4003:57	17	.
LEAF_NODE	4003:58	4003:58	17	toff_long8
EQ_OPERATOR	4003:69	4003:69	16	==
LEAF_NODE	4003:69	4003:69	17	==
FIELD	4003:72	4003:72	16	0
LEAF_NODE	4003:72	4003:72	17	0
LEAF_NODE	4003:74	4003:74	15	&&
EXPR	4004:12	4004:12	15	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	4004:12	4005:12	16	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	4004:12	4004:61	17	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0
FIELD	4004:12	4004:49	18	tif -> tif_dir . td_stripbytecount_entry . tdir_tag
LEAF_NODE	4004:12	4004:12	19	tif
LEAF_NODE	4004:15	4004:15	19	->
LEAF_NODE	4004:17	4004:17	19	tif_dir
LEAF_NODE	4004:24	4004:24	19	.
LEAF_NODE	4004:25	4004:25	19	td_stripbytecount_entry
LEAF_NODE	4004:48	4004:48	19	.
LEAF_NODE	4004:49	4004:49	19	tdir_tag
EQ_OPERATOR	4004:58	4004:58	18	!=
LEAF_NODE	4004:58	4004:58	19	!=
FIELD	4004:61	4004:61	18	0
LEAF_NODE	4004:61	4004:61	19	0
LEAF_NODE	4004:63	4004:63	17	&&
EXPR	4005:12	4005:12	17	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	4005:12	4006:12	18	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	4005:12	4005:63	19	tif -> tif_dir . td_stripbytecount_entry . tdir_count == 0
FIELD	4005:12	4005:49	20	tif -> tif_dir . td_stripbytecount_entry . tdir_count
LEAF_NODE	4005:12	4005:12	21	tif
LEAF_NODE	4005:15	4005:15	21	->
LEAF_NODE	4005:17	4005:17	21	tif_dir
LEAF_NODE	4005:24	4005:24	21	.
LEAF_NODE	4005:25	4005:25	21	td_stripbytecount_entry
LEAF_NODE	4005:48	4005:48	21	.
LEAF_NODE	4005:49	4005:49	21	tdir_count
EQ_OPERATOR	4005:60	4005:60	20	==
LEAF_NODE	4005:60	4005:60	21	==
FIELD	4005:63	4005:63	20	0
LEAF_NODE	4005:63	4005:63	21	0
LEAF_NODE	4005:65	4005:65	19	&&
EXPR	4006:12	4006:12	19	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
AND	4006:12	4007:12	20	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0 && tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
EXPR	4006:12	4006:62	21	tif -> tif_dir . td_stripbytecount_entry . tdir_type == 0
FIELD	4006:12	4006:49	22	tif -> tif_dir . td_stripbytecount_entry . tdir_type
LEAF_NODE	4006:12	4006:12	23	tif
LEAF_NODE	4006:15	4006:15	23	->
LEAF_NODE	4006:17	4006:17	23	tif_dir
LEAF_NODE	4006:24	4006:24	23	.
LEAF_NODE	4006:25	4006:25	23	td_stripbytecount_entry
LEAF_NODE	4006:48	4006:48	23	.
LEAF_NODE	4006:49	4006:49	23	tdir_type
EQ_OPERATOR	4006:59	4006:59	22	==
LEAF_NODE	4006:59	4006:59	23	==
FIELD	4006:62	4006:62	22	0
LEAF_NODE	4006:62	4006:62	23	0
LEAF_NODE	4006:64	4006:64	21	&&
EXPR	4007:12	4007:75	21	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8 == 0
FIELD	4007:12	4007:61	22	tif -> tif_dir . td_stripbytecount_entry . tdir_offset . toff_long8
LEAF_NODE	4007:12	4007:12	23	tif
LEAF_NODE	4007:15	4007:15	23	->
LEAF_NODE	4007:17	4007:17	23	tif_dir
LEAF_NODE	4007:24	4007:24	23	.
LEAF_NODE	4007:25	4007:25	23	td_stripbytecount_entry
LEAF_NODE	4007:48	4007:48	23	.
LEAF_NODE	4007:49	4007:49	23	tdir_offset
LEAF_NODE	4007:60	4007:60	23	.
LEAF_NODE	4007:61	4007:61	23	toff_long8
EQ_OPERATOR	4007:72	4007:72	22	==
LEAF_NODE	4007:72	4007:72	23	==
FIELD	4007:75	4007:75	22	0
LEAF_NODE	4007:75	4007:75	23	0
LEAF_NODE	4007:77	4007:77	4	)
STATEMENTS	4008:8	4011:8	4	
LEAF_NODE	4008:8	4008:8	5	{
STATEMENTS	4010:12	4010:12	5	
EXPR_STATEMENT	4010:12	4010:32	6	TIFFSetupStrips ( tif ) ;
EXPR	4010:12	4010:12	7	TIFFSetupStrips ( tif )
FUNCTION_CALL	4010:12	4010:31	8	TIFFSetupStrips ( tif )
CALLEE	4010:12	4010:12	9	TIFFSetupStrips
LEAF_NODE	4010:12	4010:12	10	TIFFSetupStrips
LEAF_NODE	4010:27	4010:27	9	(
ARGUMENT	4010:28	4010:28	9	tif
FIELD	4010:28	4010:28	10	tif
LEAF_NODE	4010:28	4010:28	11	tif
LEAF_NODE	4010:31	4010:31	9	)
LEAF_NODE	4010:32	4010:32	7	;
LEAF_NODE	4011:8	4011:8	5	}
SELECTION	4012:8	4012:13	3	
KEYWORD	4012:8	4012:8	4	else
LEAF_NODE	4012:8	4012:8	5	else
STATEMENTS	4012:13	4012:13	4	
SELECTION	4012:13	4013:8	5	
KEYWORD	4012:13	4012:13	6	if
LEAF_NODE	4012:13	4012:13	7	if
LEAF_NODE	4012:15	4012:15	6	(
CONDITION	4012:17	4012:17	6	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
EXPR	4012:17	4012:17	7	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_EXPR	4012:17	4012:54	8	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_OPERATOR	4012:17	4012:17	9	!
LEAF_NODE	4012:17	4012:17	10	!
LEAF_NODE	4012:18	4012:18	9	(
FIELD	4012:19	4012:24	9	tif -> tif_flags
LEAF_NODE	4012:19	4012:19	10	tif
LEAF_NODE	4012:22	4012:22	10	->
LEAF_NODE	4012:24	4012:24	10	tif_flags
LEAF_NODE	4012:33	4012:33	9	&
FIELD	4012:34	4012:34	9	TIFF_DEFERSTRILELOAD
LEAF_NODE	4012:34	4012:34	10	TIFF_DEFERSTRILELOAD
LEAF_NODE	4012:54	4012:54	9	)
LEAF_NODE	4012:56	4012:56	6	)
STATEMENTS	4013:8	4032:8	6	
LEAF_NODE	4013:8	4013:8	7	{
STATEMENTS	4014:12	4023:12	7	
SELECTION	4014:12	4015:12	8	
KEYWORD	4014:12	4014:12	9	if
LEAF_NODE	4014:12	4014:12	10	if
LEAF_NODE	4014:14	4014:14	9	(
CONDITION	4014:16	4014:16	9	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0
EXPR	4014:16	4014:62	10	tif -> tif_dir . td_stripoffset_entry . tdir_tag != 0
FIELD	4014:16	4014:50	11	tif -> tif_dir . td_stripoffset_entry . tdir_tag
LEAF_NODE	4014:16	4014:16	12	tif
LEAF_NODE	4014:19	4014:19	12	->
LEAF_NODE	4014:21	4014:21	12	tif_dir
LEAF_NODE	4014:28	4014:28	12	.
LEAF_NODE	4014:29	4014:29	12	td_stripoffset_entry
LEAF_NODE	4014:49	4014:49	12	.
LEAF_NODE	4014:50	4014:50	12	tdir_tag
EQ_OPERATOR	4014:59	4014:59	11	!=
LEAF_NODE	4014:59	4014:59	12	!=
FIELD	4014:62	4014:62	11	0
LEAF_NODE	4014:62	4014:62	12	0
LEAF_NODE	4014:64	4014:64	9	)
STATEMENTS	4015:12	4022:12	9	
LEAF_NODE	4015:12	4015:12	10	{
STATEMENTS	4016:16	4016:16	10	
SELECTION	4016:16	4019:16	11	
KEYWORD	4016:16	4016:16	12	if
LEAF_NODE	4016:16	4016:16	13	if
LEAF_NODE	4016:19	4016:19	12	(
CONDITION	4016:20	4016:20	12	! TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripoffset_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripoffset_p )
EXPR	4016:20	4016:20	13	! TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripoffset_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripoffset_p )
UNARY_EXPR	4016:20	4016:21	14	! TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripoffset_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripoffset_p )
UNARY_OPERATOR	4016:20	4016:20	15	!
LEAF_NODE	4016:20	4016:20	16	!
FUNCTION_CALL	4016:21	4018:71	15	TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripoffset_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripoffset_p )
CALLEE	4016:21	4016:21	16	TIFFFetchStripThing
LEAF_NODE	4016:21	4016:21	17	TIFFFetchStripThing
LEAF_NODE	4016:40	4016:40	16	(
ARGUMENT	4016:41	4016:41	16	tif
FIELD	4016:41	4016:41	17	tif
LEAF_NODE	4016:41	4016:41	18	tif
LEAF_NODE	4016:44	4016:44	16	,
ARGUMENT	4016:45	4016:45	16	& ( tif -> tif_dir . td_stripoffset_entry )
UNARY_EXPR	4016:45	4016:80	17	& ( tif -> tif_dir . td_stripoffset_entry )
UNARY_OPERATOR	4016:45	4016:45	18	&
LEAF_NODE	4016:45	4016:45	19	&
LEAF_NODE	4016:46	4016:46	18	(
FIELD	4016:47	4016:60	18	tif -> tif_dir . td_stripoffset_entry
LEAF_NODE	4016:47	4016:47	19	tif
LEAF_NODE	4016:50	4016:50	19	->
LEAF_NODE	4016:52	4016:52	19	tif_dir
LEAF_NODE	4016:59	4016:59	19	.
LEAF_NODE	4016:60	4016:60	19	td_stripoffset_entry
LEAF_NODE	4016:80	4016:80	18	)
LEAF_NODE	4016:81	4016:81	16	,
ARGUMENT	4017:41	4017:41	16	tif -> tif_dir . td_nstrips
FIELD	4017:41	4017:54	17	tif -> tif_dir . td_nstrips
LEAF_NODE	4017:41	4017:41	18	tif
LEAF_NODE	4017:44	4017:44	18	->
LEAF_NODE	4017:46	4017:46	18	tif_dir
LEAF_NODE	4017:53	4017:53	18	.
LEAF_NODE	4017:54	4017:54	18	td_nstrips
LEAF_NODE	4017:64	4017:64	16	,
ARGUMENT	4018:41	4018:41	16	& tif -> tif_dir . td_stripoffset_p
UNARY_EXPR	4018:41	4018:42	17	& tif -> tif_dir . td_stripoffset_p
UNARY_OPERATOR	4018:41	4018:41	18	&
LEAF_NODE	4018:41	4018:41	19	&
FIELD	4018:42	4018:55	18	tif -> tif_dir . td_stripoffset_p
LEAF_NODE	4018:42	4018:42	19	tif
LEAF_NODE	4018:45	4018:45	19	->
LEAF_NODE	4018:47	4018:47	19	tif_dir
LEAF_NODE	4018:54	4018:54	19	.
LEAF_NODE	4018:55	4018:55	19	td_stripoffset_p
LEAF_NODE	4018:71	4018:71	16	)
LEAF_NODE	4018:72	4018:72	12	)
STATEMENTS	4019:16	4021:16	12	
LEAF_NODE	4019:16	4019:16	13	{
STATEMENTS	4020:20	4020:20	13	
JUMP_STATEMENT	4020:20	4020:28	14	goto bad ;
KEYWORD	4020:20	4020:20	15	goto
LEAF_NODE	4020:20	4020:20	16	goto
DESTINATION	4020:25	4020:25	15	bad
LEAF_NODE	4020:25	4020:25	16	bad
LEAF_NODE	4020:28	4020:28	15	;
LEAF_NODE	4021:16	4021:16	13	}
LEAF_NODE	4022:12	4022:12	10	}
SELECTION	4023:12	4024:12	8	
KEYWORD	4023:12	4023:12	9	if
LEAF_NODE	4023:12	4023:12	10	if
LEAF_NODE	4023:14	4023:14	9	(
CONDITION	4023:16	4023:16	9	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0
EXPR	4023:16	4023:65	10	tif -> tif_dir . td_stripbytecount_entry . tdir_tag != 0
FIELD	4023:16	4023:53	11	tif -> tif_dir . td_stripbytecount_entry . tdir_tag
LEAF_NODE	4023:16	4023:16	12	tif
LEAF_NODE	4023:19	4023:19	12	->
LEAF_NODE	4023:21	4023:21	12	tif_dir
LEAF_NODE	4023:28	4023:28	12	.
LEAF_NODE	4023:29	4023:29	12	td_stripbytecount_entry
LEAF_NODE	4023:52	4023:52	12	.
LEAF_NODE	4023:53	4023:53	12	tdir_tag
EQ_OPERATOR	4023:62	4023:62	11	!=
LEAF_NODE	4023:62	4023:62	12	!=
FIELD	4023:65	4023:65	11	0
LEAF_NODE	4023:65	4023:65	12	0
LEAF_NODE	4023:67	4023:67	9	)
STATEMENTS	4024:12	4031:12	9	
LEAF_NODE	4024:12	4024:12	10	{
STATEMENTS	4025:16	4025:16	10	
SELECTION	4025:16	4028:16	11	
KEYWORD	4025:16	4025:16	12	if
LEAF_NODE	4025:16	4025:16	13	if
LEAF_NODE	4025:19	4025:19	12	(
CONDITION	4025:20	4025:20	12	! TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripbytecount_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripbytecount_p )
EXPR	4025:20	4025:20	13	! TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripbytecount_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripbytecount_p )
UNARY_EXPR	4025:20	4025:21	14	! TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripbytecount_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripbytecount_p )
UNARY_OPERATOR	4025:20	4025:20	15	!
LEAF_NODE	4025:20	4025:20	16	!
FUNCTION_CALL	4025:21	4027:74	15	TIFFFetchStripThing ( tif , & ( tif -> tif_dir . td_stripbytecount_entry ) , tif -> tif_dir . td_nstrips , & tif -> tif_dir . td_stripbytecount_p )
CALLEE	4025:21	4025:21	16	TIFFFetchStripThing
LEAF_NODE	4025:21	4025:21	17	TIFFFetchStripThing
LEAF_NODE	4025:40	4025:40	16	(
ARGUMENT	4025:41	4025:41	16	tif
FIELD	4025:41	4025:41	17	tif
LEAF_NODE	4025:41	4025:41	18	tif
LEAF_NODE	4025:44	4025:44	16	,
ARGUMENT	4025:45	4025:45	16	& ( tif -> tif_dir . td_stripbytecount_entry )
UNARY_EXPR	4025:45	4025:83	17	& ( tif -> tif_dir . td_stripbytecount_entry )
UNARY_OPERATOR	4025:45	4025:45	18	&
LEAF_NODE	4025:45	4025:45	19	&
LEAF_NODE	4025:46	4025:46	18	(
FIELD	4025:47	4025:60	18	tif -> tif_dir . td_stripbytecount_entry
LEAF_NODE	4025:47	4025:47	19	tif
LEAF_NODE	4025:50	4025:50	19	->
LEAF_NODE	4025:52	4025:52	19	tif_dir
LEAF_NODE	4025:59	4025:59	19	.
LEAF_NODE	4025:60	4025:60	19	td_stripbytecount_entry
LEAF_NODE	4025:83	4025:83	18	)
LEAF_NODE	4025:84	4025:84	16	,
ARGUMENT	4026:41	4026:41	16	tif -> tif_dir . td_nstrips
FIELD	4026:41	4026:54	17	tif -> tif_dir . td_nstrips
LEAF_NODE	4026:41	4026:41	18	tif
LEAF_NODE	4026:44	4026:44	18	->
LEAF_NODE	4026:46	4026:46	18	tif_dir
LEAF_NODE	4026:53	4026:53	18	.
LEAF_NODE	4026:54	4026:54	18	td_nstrips
LEAF_NODE	4026:64	4026:64	16	,
ARGUMENT	4027:41	4027:41	16	& tif -> tif_dir . td_stripbytecount_p
UNARY_EXPR	4027:41	4027:42	17	& tif -> tif_dir . td_stripbytecount_p
UNARY_OPERATOR	4027:41	4027:41	18	&
LEAF_NODE	4027:41	4027:41	19	&
FIELD	4027:42	4027:55	18	tif -> tif_dir . td_stripbytecount_p
LEAF_NODE	4027:42	4027:42	19	tif
LEAF_NODE	4027:45	4027:45	19	->
LEAF_NODE	4027:47	4027:47	19	tif_dir
LEAF_NODE	4027:54	4027:54	19	.
LEAF_NODE	4027:55	4027:55	19	td_stripbytecount_p
LEAF_NODE	4027:74	4027:74	16	)
LEAF_NODE	4027:75	4027:75	12	)
STATEMENTS	4028:16	4030:16	12	
LEAF_NODE	4028:16	4028:16	13	{
STATEMENTS	4029:20	4029:20	13	
JUMP_STATEMENT	4029:20	4029:28	14	goto bad ;
KEYWORD	4029:20	4029:20	15	goto
LEAF_NODE	4029:20	4029:20	16	goto
DESTINATION	4029:25	4029:25	15	bad
LEAF_NODE	4029:25	4029:25	16	bad
LEAF_NODE	4029:28	4029:28	15	;
LEAF_NODE	4030:16	4030:16	13	}
LEAF_NODE	4031:12	4031:12	10	}
LEAF_NODE	4032:8	4032:8	7	}
SELECTION	4050:1	4051:1	3	
KEYWORD	4050:1	4050:1	4	if
LEAF_NODE	4050:1	4050:1	5	if
LEAF_NODE	4050:4	4050:4	4	(
CONDITION	4050:5	4050:5	4	tif -> tif_dir . td_compression == COMPRESSION_OJPEG
EXPR	4050:5	4050:34	5	tif -> tif_dir . td_compression == COMPRESSION_OJPEG
FIELD	4050:5	4050:18	6	tif -> tif_dir . td_compression
LEAF_NODE	4050:5	4050:5	7	tif
LEAF_NODE	4050:8	4050:8	7	->
LEAF_NODE	4050:10	4050:10	7	tif_dir
LEAF_NODE	4050:17	4050:17	7	.
LEAF_NODE	4050:18	4050:18	7	td_compression
EQ_OPERATOR	4050:32	4050:32	6	==
LEAF_NODE	4050:32	4050:32	7	==
FIELD	4050:34	4050:34	6	COMPRESSION_OJPEG
LEAF_NODE	4050:34	4050:34	7	COMPRESSION_OJPEG
LEAF_NODE	4050:51	4050:51	4	)
STATEMENTS	4051:1	4102:1	4	
LEAF_NODE	4051:1	4051:1	5	{
STATEMENTS	4052:2	4073:2	5	
SELECTION	4052:2	4053:2	6	
KEYWORD	4052:2	4052:2	7	if
LEAF_NODE	4052:2	4052:2	8	if
LEAF_NODE	4052:5	4052:5	7	(
CONDITION	4052:6	4052:6	7	! TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
EXPR	4052:6	4052:6	8	! TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
UNARY_EXPR	4052:6	4052:7	9	! TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
UNARY_OPERATOR	4052:6	4052:6	10	!
LEAF_NODE	4052:6	4052:6	11	!
FUNCTION_CALL	4052:7	4052:41	10	TIFFFieldSet ( tif , FIELD_PHOTOMETRIC )
CALLEE	4052:7	4052:7	11	TIFFFieldSet
LEAF_NODE	4052:7	4052:7	12	TIFFFieldSet
LEAF_NODE	4052:19	4052:19	11	(
ARGUMENT	4052:20	4052:20	11	tif
FIELD	4052:20	4052:20	12	tif
LEAF_NODE	4052:20	4052:20	13	tif
LEAF_NODE	4052:23	4052:23	11	,
ARGUMENT	4052:24	4052:24	11	FIELD_PHOTOMETRIC
FIELD	4052:24	4052:24	12	FIELD_PHOTOMETRIC
LEAF_NODE	4052:24	4052:24	13	FIELD_PHOTOMETRIC
LEAF_NODE	4052:41	4052:41	11	)
LEAF_NODE	4052:42	4052:42	7	)
STATEMENTS	4053:2	4058:2	7	
LEAF_NODE	4053:2	4053:2	8	{
STATEMENTS	4054:3	4056:3	8	
EXPR_STATEMENT	4054:3	4055:60	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Photometric tag is missing, assuming data is YCbCr" ) ;
EXPR	4054:3	4054:3	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Photometric tag is missing, assuming data is YCbCr" )
FUNCTION_CALL	4054:3	4055:59	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Photometric tag is missing, assuming data is YCbCr" )
CALLEE	4054:3	4054:3	12	TIFFWarningExt
LEAF_NODE	4054:3	4054:3	13	TIFFWarningExt
LEAF_NODE	4054:17	4054:17	12	(
ARGUMENT	4054:18	4054:18	12	tif -> tif_clientdata
FIELD	4054:18	4054:23	13	tif -> tif_clientdata
LEAF_NODE	4054:18	4054:18	14	tif
LEAF_NODE	4054:21	4054:21	14	->
LEAF_NODE	4054:23	4054:23	14	tif_clientdata
LEAF_NODE	4054:37	4054:37	12	,
ARGUMENT	4054:39	4054:39	12	module
FIELD	4054:39	4054:39	13	module
LEAF_NODE	4054:39	4054:39	14	module
LEAF_NODE	4054:45	4054:45	12	,
ARGUMENT	4055:7	4055:7	12	"Photometric tag is missing, assuming data is YCbCr"
FIELD	4055:7	4055:7	13	"Photometric tag is missing, assuming data is YCbCr"
LEAF_NODE	4055:7	4055:7	14	"Photometric tag is missing, assuming data is YCbCr"
LEAF_NODE	4055:59	4055:59	12	)
LEAF_NODE	4055:60	4055:60	10	;
SELECTION	4056:3	4057:4	9	
KEYWORD	4056:3	4056:3	10	if
LEAF_NODE	4056:3	4056:3	11	if
LEAF_NODE	4056:6	4056:6	10	(
CONDITION	4056:7	4056:7	10	! TIFFSetField ( tif , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
EXPR	4056:7	4056:7	11	! TIFFSetField ( tif , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
UNARY_EXPR	4056:7	4056:8	12	! TIFFSetField ( tif , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
UNARY_OPERATOR	4056:7	4056:7	13	!
LEAF_NODE	4056:7	4056:7	14	!
FUNCTION_CALL	4056:8	4056:62	13	TIFFSetField ( tif , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR )
CALLEE	4056:8	4056:8	14	TIFFSetField
LEAF_NODE	4056:8	4056:8	15	TIFFSetField
LEAF_NODE	4056:20	4056:20	14	(
ARGUMENT	4056:21	4056:21	14	tif
FIELD	4056:21	4056:21	15	tif
LEAF_NODE	4056:21	4056:21	16	tif
LEAF_NODE	4056:24	4056:24	14	,
ARGUMENT	4056:25	4056:25	14	TIFFTAG_PHOTOMETRIC
FIELD	4056:25	4056:25	15	TIFFTAG_PHOTOMETRIC
LEAF_NODE	4056:25	4056:25	16	TIFFTAG_PHOTOMETRIC
LEAF_NODE	4056:44	4056:44	14	,
ARGUMENT	4056:45	4056:45	14	PHOTOMETRIC_YCBCR
FIELD	4056:45	4056:45	15	PHOTOMETRIC_YCBCR
LEAF_NODE	4056:45	4056:45	16	PHOTOMETRIC_YCBCR
LEAF_NODE	4056:62	4056:62	14	)
LEAF_NODE	4056:63	4056:63	10	)
STATEMENTS	4057:4	4057:4	10	
JUMP_STATEMENT	4057:4	4057:12	11	goto bad ;
KEYWORD	4057:4	4057:4	12	goto
LEAF_NODE	4057:4	4057:4	13	goto
DESTINATION	4057:9	4057:9	12	bad
LEAF_NODE	4057:9	4057:9	13	bad
LEAF_NODE	4057:12	4057:12	12	;
LEAF_NODE	4058:2	4058:2	8	}
SELECTION	4059:2	4059:7	6	
KEYWORD	4059:2	4059:2	7	else
LEAF_NODE	4059:2	4059:2	8	else
STATEMENTS	4059:7	4059:7	7	
SELECTION	4059:7	4060:2	8	
KEYWORD	4059:7	4059:7	9	if
LEAF_NODE	4059:7	4059:7	10	if
LEAF_NODE	4059:10	4059:10	9	(
CONDITION	4059:11	4059:11	9	tif -> tif_dir . td_photometric == PHOTOMETRIC_RGB
EXPR	4059:11	4059:40	10	tif -> tif_dir . td_photometric == PHOTOMETRIC_RGB
FIELD	4059:11	4059:24	11	tif -> tif_dir . td_photometric
LEAF_NODE	4059:11	4059:11	12	tif
LEAF_NODE	4059:14	4059:14	12	->
LEAF_NODE	4059:16	4059:16	12	tif_dir
LEAF_NODE	4059:23	4059:23	12	.
LEAF_NODE	4059:24	4059:24	12	td_photometric
EQ_OPERATOR	4059:38	4059:38	11	==
LEAF_NODE	4059:38	4059:38	12	==
FIELD	4059:40	4059:40	11	PHOTOMETRIC_RGB
LEAF_NODE	4059:40	4059:40	12	PHOTOMETRIC_RGB
LEAF_NODE	4059:55	4059:55	9	)
STATEMENTS	4060:2	4065:2	9	
LEAF_NODE	4060:2	4060:2	10	{
STATEMENTS	4061:3	4064:47	10	
EXPR_STATEMENT	4061:3	4061:48	11	tif -> tif_dir . td_photometric = PHOTOMETRIC_YCBCR ;
EXPR	4061:3	4061:3	12	tif -> tif_dir . td_photometric = PHOTOMETRIC_YCBCR
ASSIGN	4061:3	4061:31	13	tif -> tif_dir . td_photometric = PHOTOMETRIC_YCBCR
LVAL	4061:3	4061:3	14	tif -> tif_dir . td_photometric
FIELD	4061:3	4061:16	15	tif -> tif_dir . td_photometric
LEAF_NODE	4061:3	4061:3	16	tif
LEAF_NODE	4061:6	4061:6	16	->
LEAF_NODE	4061:8	4061:8	16	tif_dir
LEAF_NODE	4061:15	4061:15	16	.
LEAF_NODE	4061:16	4061:16	16	td_photometric
ASSIGN_OP	4061:30	4061:30	14	=
LEAF_NODE	4061:30	4061:30	15	=
RVAL	4061:31	4061:31	14	PHOTOMETRIC_YCBCR
FIELD	4061:31	4061:31	15	PHOTOMETRIC_YCBCR
LEAF_NODE	4061:31	4061:31	16	PHOTOMETRIC_YCBCR
LEAF_NODE	4061:48	4061:48	12	;
LEAF_NODE	4062:3	4062:3	11	TIFFWarningExt
LEAF_NODE	4062:17	4062:17	11	(
LEAF_NODE	4062:18	4062:18	11	tif
LEAF_NODE	4062:21	4062:21	11	->
LEAF_NODE	4062:23	4062:23	11	tif_clientdata
LEAF_NODE	4062:37	4062:37	11	,
LEAF_NODE	4062:39	4062:39	11	module
LEAF_NODE	4062:45	4062:45	11	,
LEAF_NODE	4063:7	4063:7	11	"Photometric tag value assumed incorrect, "
LEAF_NODE	4064:7	4064:7	11	"assuming data is YCbCr instead of RGB"
LEAF_NODE	4064:46	4064:46	11	)
LEAF_NODE	4064:47	4064:47	11	;
LEAF_NODE	4065:2	4065:2	10	}
SELECTION	4066:2	4067:2	6	
KEYWORD	4066:2	4066:2	7	if
LEAF_NODE	4066:2	4066:2	8	if
LEAF_NODE	4066:5	4066:5	7	(
CONDITION	4066:6	4066:6	7	! TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
EXPR	4066:6	4066:6	8	! TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
UNARY_EXPR	4066:6	4066:7	9	! TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
UNARY_OPERATOR	4066:6	4066:6	10	!
LEAF_NODE	4066:6	4066:6	11	!
FUNCTION_CALL	4066:7	4066:43	10	TIFFFieldSet ( tif , FIELD_BITSPERSAMPLE )
CALLEE	4066:7	4066:7	11	TIFFFieldSet
LEAF_NODE	4066:7	4066:7	12	TIFFFieldSet
LEAF_NODE	4066:19	4066:19	11	(
ARGUMENT	4066:20	4066:20	11	tif
FIELD	4066:20	4066:20	12	tif
LEAF_NODE	4066:20	4066:20	13	tif
LEAF_NODE	4066:23	4066:23	11	,
ARGUMENT	4066:24	4066:24	11	FIELD_BITSPERSAMPLE
FIELD	4066:24	4066:24	12	FIELD_BITSPERSAMPLE
LEAF_NODE	4066:24	4066:24	13	FIELD_BITSPERSAMPLE
LEAF_NODE	4066:43	4066:43	11	)
LEAF_NODE	4066:44	4066:44	7	)
STATEMENTS	4067:2	4072:2	7	
LEAF_NODE	4067:2	4067:2	8	{
STATEMENTS	4068:3	4070:3	8	
EXPR_STATEMENT	4068:3	4069:66	9	TIFFWarningExt ( tif -> tif_clientdata , module , "BitsPerSample tag is missing, assuming 8 bits per sample" ) ;
EXPR	4068:3	4068:3	10	TIFFWarningExt ( tif -> tif_clientdata , module , "BitsPerSample tag is missing, assuming 8 bits per sample" )
FUNCTION_CALL	4068:3	4069:65	11	TIFFWarningExt ( tif -> tif_clientdata , module , "BitsPerSample tag is missing, assuming 8 bits per sample" )
CALLEE	4068:3	4068:3	12	TIFFWarningExt
LEAF_NODE	4068:3	4068:3	13	TIFFWarningExt
LEAF_NODE	4068:17	4068:17	12	(
ARGUMENT	4068:18	4068:18	12	tif -> tif_clientdata
FIELD	4068:18	4068:23	13	tif -> tif_clientdata
LEAF_NODE	4068:18	4068:18	14	tif
LEAF_NODE	4068:21	4068:21	14	->
LEAF_NODE	4068:23	4068:23	14	tif_clientdata
LEAF_NODE	4068:37	4068:37	12	,
ARGUMENT	4068:38	4068:38	12	module
FIELD	4068:38	4068:38	13	module
LEAF_NODE	4068:38	4068:38	14	module
LEAF_NODE	4068:44	4068:44	12	,
ARGUMENT	4069:7	4069:7	12	"BitsPerSample tag is missing, assuming 8 bits per sample"
FIELD	4069:7	4069:7	13	"BitsPerSample tag is missing, assuming 8 bits per sample"
LEAF_NODE	4069:7	4069:7	14	"BitsPerSample tag is missing, assuming 8 bits per sample"
LEAF_NODE	4069:65	4069:65	12	)
LEAF_NODE	4069:66	4069:66	10	;
SELECTION	4070:3	4071:4	9	
KEYWORD	4070:3	4070:3	10	if
LEAF_NODE	4070:3	4070:3	11	if
LEAF_NODE	4070:6	4070:6	10	(
CONDITION	4070:7	4070:7	10	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
EXPR	4070:7	4070:7	11	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
UNARY_EXPR	4070:7	4070:8	12	! TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
UNARY_OPERATOR	4070:7	4070:7	13	!
LEAF_NODE	4070:7	4070:7	14	!
FUNCTION_CALL	4070:8	4070:48	13	TIFFSetField ( tif , TIFFTAG_BITSPERSAMPLE , 8 )
CALLEE	4070:8	4070:8	14	TIFFSetField
LEAF_NODE	4070:8	4070:8	15	TIFFSetField
LEAF_NODE	4070:20	4070:20	14	(
ARGUMENT	4070:21	4070:21	14	tif
FIELD	4070:21	4070:21	15	tif
LEAF_NODE	4070:21	4070:21	16	tif
LEAF_NODE	4070:24	4070:24	14	,
ARGUMENT	4070:25	4070:25	14	TIFFTAG_BITSPERSAMPLE
FIELD	4070:25	4070:25	15	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	4070:25	4070:25	16	TIFFTAG_BITSPERSAMPLE
LEAF_NODE	4070:46	4070:46	14	,
ARGUMENT	4070:47	4070:47	14	8
FIELD	4070:47	4070:47	15	8
LEAF_NODE	4070:47	4070:47	16	8
LEAF_NODE	4070:48	4070:48	14	)
LEAF_NODE	4070:49	4070:49	10	)
STATEMENTS	4071:4	4071:4	10	
JUMP_STATEMENT	4071:4	4071:12	11	goto bad ;
KEYWORD	4071:4	4071:4	12	goto
LEAF_NODE	4071:4	4071:4	13	goto
DESTINATION	4071:9	4071:9	12	bad
LEAF_NODE	4071:9	4071:9	13	bad
LEAF_NODE	4071:12	4071:12	12	;
LEAF_NODE	4072:2	4072:2	8	}
SELECTION	4073:2	4074:2	6	
KEYWORD	4073:2	4073:2	7	if
LEAF_NODE	4073:2	4073:2	8	if
LEAF_NODE	4073:5	4073:5	7	(
CONDITION	4073:6	4073:6	7	! TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
EXPR	4073:6	4073:6	8	! TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
UNARY_EXPR	4073:6	4073:7	9	! TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
UNARY_OPERATOR	4073:6	4073:6	10	!
LEAF_NODE	4073:6	4073:6	11	!
FUNCTION_CALL	4073:7	4073:45	10	TIFFFieldSet ( tif , FIELD_SAMPLESPERPIXEL )
CALLEE	4073:7	4073:7	11	TIFFFieldSet
LEAF_NODE	4073:7	4073:7	12	TIFFFieldSet
LEAF_NODE	4073:19	4073:19	11	(
ARGUMENT	4073:20	4073:20	11	tif
FIELD	4073:20	4073:20	12	tif
LEAF_NODE	4073:20	4073:20	13	tif
LEAF_NODE	4073:23	4073:23	11	,
ARGUMENT	4073:24	4073:24	11	FIELD_SAMPLESPERPIXEL
FIELD	4073:24	4073:24	12	FIELD_SAMPLESPERPIXEL
LEAF_NODE	4073:24	4073:24	13	FIELD_SAMPLESPERPIXEL
LEAF_NODE	4073:45	4073:45	11	)
LEAF_NODE	4073:46	4073:46	7	)
STATEMENTS	4074:2	4101:2	7	
LEAF_NODE	4074:2	4074:2	8	{
STATEMENTS	4075:3	4091:3	8	
SELECTION	4075:3	4076:3	9	
KEYWORD	4075:3	4075:3	10	if
LEAF_NODE	4075:3	4075:3	11	if
LEAF_NODE	4075:6	4075:6	10	(
CONDITION	4075:7	4075:7	10	tif -> tif_dir . td_photometric == PHOTOMETRIC_RGB
EXPR	4075:7	4075:36	11	tif -> tif_dir . td_photometric == PHOTOMETRIC_RGB
FIELD	4075:7	4075:20	12	tif -> tif_dir . td_photometric
LEAF_NODE	4075:7	4075:7	13	tif
LEAF_NODE	4075:10	4075:10	13	->
LEAF_NODE	4075:12	4075:12	13	tif_dir
LEAF_NODE	4075:19	4075:19	13	.
LEAF_NODE	4075:20	4075:20	13	td_photometric
EQ_OPERATOR	4075:34	4075:34	12	==
LEAF_NODE	4075:34	4075:34	13	==
FIELD	4075:36	4075:36	12	PHOTOMETRIC_RGB
LEAF_NODE	4075:36	4075:36	13	PHOTOMETRIC_RGB
LEAF_NODE	4075:51	4075:51	10	)
STATEMENTS	4076:3	4082:3	10	
LEAF_NODE	4076:3	4076:3	11	{
STATEMENTS	4077:4	4080:4	11	
LEAF_NODE	4077:4	4077:4	12	TIFFWarningExt
LEAF_NODE	4077:18	4077:18	12	(
LEAF_NODE	4077:19	4077:19	12	tif
LEAF_NODE	4077:22	4077:22	12	->
LEAF_NODE	4077:24	4077:24	12	tif_clientdata
LEAF_NODE	4077:38	4077:38	12	,
LEAF_NODE	4077:39	4077:39	12	module
LEAF_NODE	4077:45	4077:45	12	,
LEAF_NODE	4078:8	4078:8	12	"SamplesPerPixel tag is missing, "
LEAF_NODE	4079:8	4079:8	12	"assuming correct SamplesPerPixel value is 3"
LEAF_NODE	4079:53	4079:53	12	)
LEAF_NODE	4079:54	4079:54	12	;
SELECTION	4080:4	4081:5	12	
KEYWORD	4080:4	4080:4	13	if
LEAF_NODE	4080:4	4080:4	14	if
LEAF_NODE	4080:7	4080:7	13	(
CONDITION	4080:8	4080:8	13	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
EXPR	4080:8	4080:8	14	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
UNARY_EXPR	4080:8	4080:9	15	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
UNARY_OPERATOR	4080:8	4080:8	16	!
LEAF_NODE	4080:8	4080:8	17	!
FUNCTION_CALL	4080:9	4080:51	16	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
CALLEE	4080:9	4080:9	17	TIFFSetField
LEAF_NODE	4080:9	4080:9	18	TIFFSetField
LEAF_NODE	4080:21	4080:21	17	(
ARGUMENT	4080:22	4080:22	17	tif
FIELD	4080:22	4080:22	18	tif
LEAF_NODE	4080:22	4080:22	19	tif
LEAF_NODE	4080:25	4080:25	17	,
ARGUMENT	4080:26	4080:26	17	TIFFTAG_SAMPLESPERPIXEL
FIELD	4080:26	4080:26	18	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	4080:26	4080:26	19	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	4080:49	4080:49	17	,
ARGUMENT	4080:50	4080:50	17	3
FIELD	4080:50	4080:50	18	3
LEAF_NODE	4080:50	4080:50	19	3
LEAF_NODE	4080:51	4080:51	17	)
LEAF_NODE	4080:52	4080:52	13	)
STATEMENTS	4081:5	4081:5	13	
JUMP_STATEMENT	4081:5	4081:13	14	goto bad ;
KEYWORD	4081:5	4081:5	15	goto
LEAF_NODE	4081:5	4081:5	16	goto
DESTINATION	4081:10	4081:10	15	bad
LEAF_NODE	4081:10	4081:10	16	bad
LEAF_NODE	4081:13	4081:13	15	;
LEAF_NODE	4082:3	4082:3	11	}
SELECTION	4083:3	4084:3	9	
KEYWORD	4083:3	4083:3	10	if
LEAF_NODE	4083:3	4083:3	11	if
LEAF_NODE	4083:6	4083:6	10	(
CONDITION	4083:7	4083:7	10	tif -> tif_dir . td_photometric == PHOTOMETRIC_YCBCR
EXPR	4083:7	4083:36	11	tif -> tif_dir . td_photometric == PHOTOMETRIC_YCBCR
FIELD	4083:7	4083:20	12	tif -> tif_dir . td_photometric
LEAF_NODE	4083:7	4083:7	13	tif
LEAF_NODE	4083:10	4083:10	13	->
LEAF_NODE	4083:12	4083:12	13	tif_dir
LEAF_NODE	4083:19	4083:19	13	.
LEAF_NODE	4083:20	4083:20	13	td_photometric
EQ_OPERATOR	4083:34	4083:34	12	==
LEAF_NODE	4083:34	4083:34	13	==
FIELD	4083:36	4083:36	12	PHOTOMETRIC_YCBCR
LEAF_NODE	4083:36	4083:36	13	PHOTOMETRIC_YCBCR
LEAF_NODE	4083:53	4083:53	10	)
STATEMENTS	4084:3	4090:3	10	
LEAF_NODE	4084:3	4084:3	11	{
STATEMENTS	4085:4	4088:4	11	
LEAF_NODE	4085:4	4085:4	12	TIFFWarningExt
LEAF_NODE	4085:18	4085:18	12	(
LEAF_NODE	4085:19	4085:19	12	tif
LEAF_NODE	4085:22	4085:22	12	->
LEAF_NODE	4085:24	4085:24	12	tif_clientdata
LEAF_NODE	4085:38	4085:38	12	,
LEAF_NODE	4085:39	4085:39	12	module
LEAF_NODE	4085:45	4085:45	12	,
LEAF_NODE	4086:8	4086:8	12	"SamplesPerPixel tag is missing, "
LEAF_NODE	4087:8	4087:8	12	"applying correct SamplesPerPixel value of 3"
LEAF_NODE	4087:53	4087:53	12	)
LEAF_NODE	4087:54	4087:54	12	;
SELECTION	4088:4	4089:5	12	
KEYWORD	4088:4	4088:4	13	if
LEAF_NODE	4088:4	4088:4	14	if
LEAF_NODE	4088:7	4088:7	13	(
CONDITION	4088:8	4088:8	13	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
EXPR	4088:8	4088:8	14	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
UNARY_EXPR	4088:8	4088:9	15	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
UNARY_OPERATOR	4088:8	4088:8	16	!
LEAF_NODE	4088:8	4088:8	17	!
FUNCTION_CALL	4088:9	4088:51	16	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 3 )
CALLEE	4088:9	4088:9	17	TIFFSetField
LEAF_NODE	4088:9	4088:9	18	TIFFSetField
LEAF_NODE	4088:21	4088:21	17	(
ARGUMENT	4088:22	4088:22	17	tif
FIELD	4088:22	4088:22	18	tif
LEAF_NODE	4088:22	4088:22	19	tif
LEAF_NODE	4088:25	4088:25	17	,
ARGUMENT	4088:26	4088:26	17	TIFFTAG_SAMPLESPERPIXEL
FIELD	4088:26	4088:26	18	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	4088:26	4088:26	19	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	4088:49	4088:49	17	,
ARGUMENT	4088:50	4088:50	17	3
FIELD	4088:50	4088:50	18	3
LEAF_NODE	4088:50	4088:50	19	3
LEAF_NODE	4088:51	4088:51	17	)
LEAF_NODE	4088:52	4088:52	13	)
STATEMENTS	4089:5	4089:5	13	
JUMP_STATEMENT	4089:5	4089:13	14	goto bad ;
KEYWORD	4089:5	4089:5	15	goto
LEAF_NODE	4089:5	4089:5	16	goto
DESTINATION	4089:10	4089:10	15	bad
LEAF_NODE	4089:10	4089:10	16	bad
LEAF_NODE	4089:13	4089:13	15	;
LEAF_NODE	4090:3	4090:3	11	}
SELECTION	4091:3	4091:8	9	
KEYWORD	4091:3	4091:3	10	else
LEAF_NODE	4091:3	4091:3	11	else
STATEMENTS	4091:8	4091:8	10	
SELECTION	4091:8	4093:3	11	
KEYWORD	4091:8	4091:8	12	if
LEAF_NODE	4091:8	4091:8	13	if
LEAF_NODE	4091:11	4091:11	12	(
CONDITION	4091:12	4091:12	12	( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISWHITE ) || ( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISBLACK )
EXPR	4091:12	4091:12	13	( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISWHITE ) || ( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISBLACK )
OR	4091:12	4092:8	14	( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISWHITE ) || ( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISBLACK )
EXPR	4091:12	4091:64	15	( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISWHITE )
LEAF_NODE	4091:12	4091:12	16	(
FIELD	4091:13	4091:26	16	tif -> tif_dir . td_photometric
LEAF_NODE	4091:13	4091:13	17	tif
LEAF_NODE	4091:16	4091:16	17	->
LEAF_NODE	4091:18	4091:18	17	tif_dir
LEAF_NODE	4091:25	4091:25	17	.
LEAF_NODE	4091:26	4091:26	17	td_photometric
EQ_OPERATOR	4091:40	4091:40	16	==
LEAF_NODE	4091:40	4091:40	17	==
FIELD	4091:42	4091:42	16	PHOTOMETRIC_MINISWHITE
LEAF_NODE	4091:42	4091:42	17	PHOTOMETRIC_MINISWHITE
LEAF_NODE	4091:64	4091:64	16	)
LEAF_NODE	4092:5	4092:5	15	||
EXPR	4092:8	4092:60	15	( tif -> tif_dir . td_photometric == PHOTOMETRIC_MINISBLACK )
LEAF_NODE	4092:8	4092:8	16	(
FIELD	4092:9	4092:22	16	tif -> tif_dir . td_photometric
LEAF_NODE	4092:9	4092:9	17	tif
LEAF_NODE	4092:12	4092:12	17	->
LEAF_NODE	4092:14	4092:14	17	tif_dir
LEAF_NODE	4092:21	4092:21	17	.
LEAF_NODE	4092:22	4092:22	17	td_photometric
EQ_OPERATOR	4092:36	4092:36	16	==
LEAF_NODE	4092:36	4092:36	17	==
FIELD	4092:38	4092:38	16	PHOTOMETRIC_MINISBLACK
LEAF_NODE	4092:38	4092:38	17	PHOTOMETRIC_MINISBLACK
LEAF_NODE	4092:60	4092:60	16	)
LEAF_NODE	4092:61	4092:61	12	)
STATEMENTS	4093:3	4100:3	12	
LEAF_NODE	4093:3	4093:3	13	{
STATEMENTS	4098:4	4098:4	13	
SELECTION	4098:4	4099:5	14	
KEYWORD	4098:4	4098:4	15	if
LEAF_NODE	4098:4	4098:4	16	if
LEAF_NODE	4098:7	4098:7	15	(
CONDITION	4098:8	4098:8	15	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
EXPR	4098:8	4098:8	16	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
UNARY_EXPR	4098:8	4098:9	17	! TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
UNARY_OPERATOR	4098:8	4098:8	18	!
LEAF_NODE	4098:8	4098:8	19	!
FUNCTION_CALL	4098:9	4098:51	18	TIFFSetField ( tif , TIFFTAG_SAMPLESPERPIXEL , 1 )
CALLEE	4098:9	4098:9	19	TIFFSetField
LEAF_NODE	4098:9	4098:9	20	TIFFSetField
LEAF_NODE	4098:21	4098:21	19	(
ARGUMENT	4098:22	4098:22	19	tif
FIELD	4098:22	4098:22	20	tif
LEAF_NODE	4098:22	4098:22	21	tif
LEAF_NODE	4098:25	4098:25	19	,
ARGUMENT	4098:26	4098:26	19	TIFFTAG_SAMPLESPERPIXEL
FIELD	4098:26	4098:26	20	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	4098:26	4098:26	21	TIFFTAG_SAMPLESPERPIXEL
LEAF_NODE	4098:49	4098:49	19	,
ARGUMENT	4098:50	4098:50	19	1
FIELD	4098:50	4098:50	20	1
LEAF_NODE	4098:50	4098:50	21	1
LEAF_NODE	4098:51	4098:51	19	)
LEAF_NODE	4098:52	4098:52	15	)
STATEMENTS	4099:5	4099:5	15	
JUMP_STATEMENT	4099:5	4099:13	16	goto bad ;
KEYWORD	4099:5	4099:5	17	goto
LEAF_NODE	4099:5	4099:5	18	goto
DESTINATION	4099:10	4099:10	17	bad
LEAF_NODE	4099:10	4099:10	18	bad
LEAF_NODE	4099:13	4099:13	17	;
LEAF_NODE	4100:3	4100:3	13	}
LEAF_NODE	4101:2	4101:2	8	}
LEAF_NODE	4102:1	4102:1	5	}
EXPR_STATEMENT	4108:8	4108:78	3	color_channels = _TIFFGetMaxColorChannels ( tif -> tif_dir . td_photometric ) ;
EXPR	4108:8	4108:8	4	color_channels = _TIFFGetMaxColorChannels ( tif -> tif_dir . td_photometric )
ASSIGN	4108:8	4108:25	5	color_channels = _TIFFGetMaxColorChannels ( tif -> tif_dir . td_photometric )
LVAL	4108:8	4108:8	6	color_channels
FIELD	4108:8	4108:8	7	color_channels
LEAF_NODE	4108:8	4108:8	8	color_channels
ASSIGN_OP	4108:23	4108:23	6	=
LEAF_NODE	4108:23	4108:23	7	=
RVAL	4108:25	4108:25	6	_TIFFGetMaxColorChannels ( tif -> tif_dir . td_photometric )
FUNCTION_CALL	4108:25	4108:77	7	_TIFFGetMaxColorChannels ( tif -> tif_dir . td_photometric )
CALLEE	4108:25	4108:25	8	_TIFFGetMaxColorChannels
LEAF_NODE	4108:25	4108:25	9	_TIFFGetMaxColorChannels
LEAF_NODE	4108:49	4108:49	8	(
ARGUMENT	4108:50	4108:50	8	tif -> tif_dir . td_photometric
FIELD	4108:50	4108:63	9	tif -> tif_dir . td_photometric
LEAF_NODE	4108:50	4108:50	10	tif
LEAF_NODE	4108:53	4108:53	10	->
LEAF_NODE	4108:55	4108:55	10	tif_dir
LEAF_NODE	4108:62	4108:62	10	.
LEAF_NODE	4108:63	4108:63	10	td_photometric
LEAF_NODE	4108:77	4108:77	8	)
LEAF_NODE	4108:78	4108:78	4	;
SELECTION	4109:8	4109:111	3	
KEYWORD	4109:8	4109:8	4	if
LEAF_NODE	4109:8	4109:8	5	if
LEAF_NODE	4109:11	4109:11	4	(
CONDITION	4109:12	4109:12	4	color_channels && tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples > color_channels
EXPR	4109:12	4109:12	5	color_channels && tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples > color_channels
AND	4109:12	4109:30	6	color_channels && tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples > color_channels
EXPR	4109:12	4109:12	7	color_channels
FIELD	4109:12	4109:12	8	color_channels
LEAF_NODE	4109:12	4109:12	9	color_channels
LEAF_NODE	4109:27	4109:27	7	&&
EXPR	4109:30	4109:95	7	tif -> tif_dir . td_samplesperpixel - tif -> tif_dir . td_extrasamples > color_channels
FIELD	4109:30	4109:43	8	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	4109:30	4109:30	9	tif
LEAF_NODE	4109:33	4109:33	9	->
LEAF_NODE	4109:35	4109:35	9	tif_dir
LEAF_NODE	4109:42	4109:42	9	.
LEAF_NODE	4109:43	4109:43	9	td_samplesperpixel
LEAF_NODE	4109:62	4109:62	8	-
FIELD	4109:64	4109:77	8	tif -> tif_dir . td_extrasamples
LEAF_NODE	4109:64	4109:64	9	tif
LEAF_NODE	4109:67	4109:67	9	->
LEAF_NODE	4109:69	4109:69	9	tif_dir
LEAF_NODE	4109:76	4109:76	9	.
LEAF_NODE	4109:77	4109:77	9	td_extrasamples
REL_OPERATOR	4109:93	4109:93	8	>
LEAF_NODE	4109:93	4109:93	9	>
FIELD	4109:95	4109:95	8	color_channels
LEAF_NODE	4109:95	4109:95	9	color_channels
LEAF_NODE	4109:109	4109:109	4	)
STATEMENTS	4109:111	4132:8	4	
LEAF_NODE	4109:111	4109:111	5	{
STATEMENTS	4110:16	4131:16	5	
SIMPLE_DECL	4110:16	4110:39	6	uint16 old_extrasamples ;
VAR_DECL	4110:16	4110:23	7	uint16 old_extrasamples
TYPE	4110:16	4110:16	8	uint16
TYPE_NAME	4110:16	4110:16	9	uint16
LEAF_NODE	4110:16	4110:16	10	uint16
NAME	4110:23	4110:23	8	old_extrasamples
LEAF_NODE	4110:23	4110:23	9	old_extrasamples
LEAF_NODE	4110:39	4110:39	7	;
SIMPLE_DECL	4111:16	4111:38	6	uint16 * new_sampleinfo ;
VAR_DECL	4111:16	4111:24	7	uint16 * new_sampleinfo
TYPE	4111:16	4111:23	8	uint16 *
TYPE_NAME	4111:16	4111:16	9	uint16
LEAF_NODE	4111:16	4111:16	10	uint16
POINTER	4111:23	4111:23	9	*
LEAF_NODE	4111:23	4111:23	10	*
NAME	4111:24	4111:24	8	new_sampleinfo
LEAF_NODE	4111:24	4111:24	9	new_sampleinfo
LEAF_NODE	4111:38	4111:38	7	;
LEAF_NODE	4113:16	4113:16	6	TIFFWarningExt
LEAF_NODE	4113:30	4113:30	6	(
LEAF_NODE	4113:31	4113:31	6	tif
LEAF_NODE	4113:34	4113:34	6	->
LEAF_NODE	4113:36	4113:36	6	tif_clientdata
LEAF_NODE	4113:50	4113:50	6	,
LEAF_NODE	4113:51	4113:51	6	module
LEAF_NODE	4113:57	4113:57	6	,
LEAF_NODE	4113:59	4113:59	6	"Sum of Photometric type-related "
LEAF_NODE	4114:20	4114:20	6	"color channels and ExtraSamples doesn't match SamplesPerPixel. "
LEAF_NODE	4115:20	4115:20	6	"Defining non-color channels as ExtraSamples."
LEAF_NODE	4115:66	4115:66	6	)
LEAF_NODE	4115:67	4115:67	6	;
EXPR_STATEMENT	4117:16	4117:63	6	old_extrasamples = tif -> tif_dir . td_extrasamples ;
EXPR	4117:16	4117:16	7	old_extrasamples = tif -> tif_dir . td_extrasamples
ASSIGN	4117:16	4117:35	8	old_extrasamples = tif -> tif_dir . td_extrasamples
LVAL	4117:16	4117:16	9	old_extrasamples
FIELD	4117:16	4117:16	10	old_extrasamples
LEAF_NODE	4117:16	4117:16	11	old_extrasamples
ASSIGN_OP	4117:33	4117:33	9	=
LEAF_NODE	4117:33	4117:33	10	=
RVAL	4117:35	4117:35	9	tif -> tif_dir . td_extrasamples
FIELD	4117:35	4117:48	10	tif -> tif_dir . td_extrasamples
LEAF_NODE	4117:35	4117:35	11	tif
LEAF_NODE	4117:38	4117:38	11	->
LEAF_NODE	4117:40	4117:40	11	tif_dir
LEAF_NODE	4117:47	4117:47	11	.
LEAF_NODE	4117:48	4117:48	11	td_extrasamples
LEAF_NODE	4117:63	4117:63	7	;
EXPR_STATEMENT	4118:16	4118:106	6	tif -> tif_dir . td_extrasamples = ( uint16 ) ( tif -> tif_dir . td_samplesperpixel - color_channels ) ;
EXPR	4118:16	4118:16	7	tif -> tif_dir . td_extrasamples = ( uint16 ) ( tif -> tif_dir . td_samplesperpixel - color_channels )
ASSIGN	4118:16	4118:47	8	tif -> tif_dir . td_extrasamples = ( uint16 ) ( tif -> tif_dir . td_samplesperpixel - color_channels )
LVAL	4118:16	4118:16	9	tif -> tif_dir . td_extrasamples
FIELD	4118:16	4118:29	10	tif -> tif_dir . td_extrasamples
LEAF_NODE	4118:16	4118:16	11	tif
LEAF_NODE	4118:19	4118:19	11	->
LEAF_NODE	4118:21	4118:21	11	tif_dir
LEAF_NODE	4118:28	4118:28	11	.
LEAF_NODE	4118:29	4118:29	11	td_extrasamples
ASSIGN_OP	4118:45	4118:45	9	=
LEAF_NODE	4118:45	4118:45	10	=
RVAL	4118:47	4118:105	9	( uint16 ) ( tif -> tif_dir . td_samplesperpixel - color_channels )
LEAF_NODE	4118:47	4118:47	10	(
TYPE_NAME	4118:48	4118:48	10	uint16
LEAF_NODE	4118:48	4118:48	11	uint16
LEAF_NODE	4118:54	4118:54	10	)
LEAF_NODE	4118:56	4118:56	10	(
FIELD	4118:57	4118:70	10	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	4118:57	4118:57	11	tif
LEAF_NODE	4118:60	4118:60	11	->
LEAF_NODE	4118:62	4118:62	11	tif_dir
LEAF_NODE	4118:69	4118:69	11	.
LEAF_NODE	4118:70	4118:70	11	td_samplesperpixel
LEAF_NODE	4118:89	4118:89	10	-
FIELD	4118:91	4118:91	10	color_channels
LEAF_NODE	4118:91	4118:91	11	color_channels
LEAF_NODE	4118:105	4118:105	10	)
LEAF_NODE	4118:106	4118:106	7	;
EXPR_STATEMENT	4121:16	4121:100	6	new_sampleinfo = ( uint16 * ) _TIFFcalloc ( tif -> tif_dir . td_extrasamples , sizeof ( uint16 ) ) ;
EXPR	4121:16	4121:16	7	new_sampleinfo = ( uint16 * ) _TIFFcalloc ( tif -> tif_dir . td_extrasamples , sizeof ( uint16 ) )
ASSIGN	4121:16	4121:33	8	new_sampleinfo = ( uint16 * ) _TIFFcalloc ( tif -> tif_dir . td_extrasamples , sizeof ( uint16 ) )
LVAL	4121:16	4121:16	9	new_sampleinfo
FIELD	4121:16	4121:16	10	new_sampleinfo
LEAF_NODE	4121:16	4121:16	11	new_sampleinfo
ASSIGN_OP	4121:31	4121:31	9	=
LEAF_NODE	4121:31	4121:31	10	=
RVAL	4121:33	4121:43	9	( uint16 * ) _TIFFcalloc ( tif -> tif_dir . td_extrasamples , sizeof ( uint16 ) )
LEAF_NODE	4121:33	4121:33	10	(
TYPE_NAME	4121:34	4121:34	10	uint16
LEAF_NODE	4121:34	4121:34	11	uint16
LEAF_NODE	4121:40	4121:40	10	*
LEAF_NODE	4121:41	4121:41	10	)
FUNCTION_CALL	4121:43	4121:99	10	_TIFFcalloc ( tif -> tif_dir . td_extrasamples , sizeof ( uint16 ) )
CALLEE	4121:43	4121:43	11	_TIFFcalloc
LEAF_NODE	4121:43	4121:43	12	_TIFFcalloc
LEAF_NODE	4121:54	4121:54	11	(
ARGUMENT	4121:55	4121:55	11	tif -> tif_dir . td_extrasamples
FIELD	4121:55	4121:68	12	tif -> tif_dir . td_extrasamples
LEAF_NODE	4121:55	4121:55	13	tif
LEAF_NODE	4121:58	4121:58	13	->
LEAF_NODE	4121:60	4121:60	13	tif_dir
LEAF_NODE	4121:67	4121:67	13	.
LEAF_NODE	4121:68	4121:68	13	td_extrasamples
LEAF_NODE	4121:83	4121:83	11	,
ARGUMENT	4121:85	4121:85	11	sizeof ( uint16 )
FUNCTION_CALL	4121:85	4121:98	12	sizeof ( uint16 )
CALLEE	4121:85	4121:85	13	sizeof
LEAF_NODE	4121:85	4121:85	14	sizeof
LEAF_NODE	4121:91	4121:91	13	(
ARGUMENT	4121:92	4121:92	13	uint16
FIELD	4121:92	4121:92	14	uint16
LEAF_NODE	4121:92	4121:92	15	uint16
LEAF_NODE	4121:98	4121:98	13	)
LEAF_NODE	4121:99	4121:99	11	)
LEAF_NODE	4121:100	4121:100	7	;
SELECTION	4122:16	4122:37	6	
KEYWORD	4122:16	4122:16	7	if
LEAF_NODE	4122:16	4122:16	8	if
LEAF_NODE	4122:19	4122:19	7	(
CONDITION	4122:20	4122:20	7	! new_sampleinfo
EXPR	4122:20	4122:20	8	! new_sampleinfo
UNARY_EXPR	4122:20	4122:21	9	! new_sampleinfo
UNARY_OPERATOR	4122:20	4122:20	10	!
LEAF_NODE	4122:20	4122:20	11	!
FIELD	4122:21	4122:21	10	new_sampleinfo
LEAF_NODE	4122:21	4122:21	11	new_sampleinfo
LEAF_NODE	4122:35	4122:35	7	)
STATEMENTS	4122:37	4127:16	7	
LEAF_NODE	4122:37	4122:37	8	{
STATEMENTS	4123:20	4126:20	8	
LEAF_NODE	4123:20	4123:20	9	TIFFErrorExt
LEAF_NODE	4123:32	4123:32	9	(
LEAF_NODE	4123:33	4123:33	9	tif
LEAF_NODE	4123:36	4123:36	9	->
LEAF_NODE	4123:38	4123:38	9	tif_clientdata
LEAF_NODE	4123:52	4123:52	9	,
LEAF_NODE	4123:54	4123:54	9	module
LEAF_NODE	4123:60	4123:60	9	,
LEAF_NODE	4123:62	4123:62	9	"Failed to allocate memory for "
LEAF_NODE	4124:32	4124:32	9	"temporary new sampleinfo array (%d 16 bit elements)"
LEAF_NODE	4124:85	4124:85	9	,
LEAF_NODE	4125:32	4125:32	9	tif
LEAF_NODE	4125:35	4125:35	9	->
LEAF_NODE	4125:37	4125:37	9	tif_dir
LEAF_NODE	4125:44	4125:44	9	.
LEAF_NODE	4125:45	4125:45	9	td_extrasamples
LEAF_NODE	4125:60	4125:60	9	)
LEAF_NODE	4125:61	4125:61	9	;
JUMP_STATEMENT	4126:20	4126:28	9	goto bad ;
KEYWORD	4126:20	4126:20	10	goto
LEAF_NODE	4126:20	4126:20	11	goto
DESTINATION	4126:25	4126:25	10	bad
LEAF_NODE	4126:25	4126:25	11	bad
LEAF_NODE	4126:28	4126:28	10	;
LEAF_NODE	4127:16	4127:16	8	}
EXPR_STATEMENT	4129:16	4129:101	6	memcpy ( new_sampleinfo , tif -> tif_dir . td_sampleinfo , old_extrasamples * sizeof ( uint16 ) ) ;
EXPR	4129:16	4129:16	7	memcpy ( new_sampleinfo , tif -> tif_dir . td_sampleinfo , old_extrasamples * sizeof ( uint16 ) )
FUNCTION_CALL	4129:16	4129:100	8	memcpy ( new_sampleinfo , tif -> tif_dir . td_sampleinfo , old_extrasamples * sizeof ( uint16 ) )
CALLEE	4129:16	4129:16	9	memcpy
LEAF_NODE	4129:16	4129:16	10	memcpy
LEAF_NODE	4129:22	4129:22	9	(
ARGUMENT	4129:23	4129:23	9	new_sampleinfo
FIELD	4129:23	4129:23	10	new_sampleinfo
LEAF_NODE	4129:23	4129:23	11	new_sampleinfo
LEAF_NODE	4129:37	4129:37	9	,
ARGUMENT	4129:39	4129:39	9	tif -> tif_dir . td_sampleinfo
FIELD	4129:39	4129:52	10	tif -> tif_dir . td_sampleinfo
LEAF_NODE	4129:39	4129:39	11	tif
LEAF_NODE	4129:42	4129:42	11	->
LEAF_NODE	4129:44	4129:44	11	tif_dir
LEAF_NODE	4129:51	4129:51	11	.
LEAF_NODE	4129:52	4129:52	11	td_sampleinfo
LEAF_NODE	4129:65	4129:65	9	,
ARGUMENT	4129:67	4129:86	9	old_extrasamples * sizeof ( uint16 )
FIELD	4129:67	4129:67	10	old_extrasamples
LEAF_NODE	4129:67	4129:67	11	old_extrasamples
LEAF_NODE	4129:84	4129:84	10	*
FUNCTION_CALL	4129:86	4129:99	10	sizeof ( uint16 )
CALLEE	4129:86	4129:86	11	sizeof
LEAF_NODE	4129:86	4129:86	12	sizeof
LEAF_NODE	4129:92	4129:92	11	(
ARGUMENT	4129:93	4129:93	11	uint16
FIELD	4129:93	4129:93	12	uint16
LEAF_NODE	4129:93	4129:93	13	uint16
LEAF_NODE	4129:99	4129:99	11	)
LEAF_NODE	4129:100	4129:100	9	)
LEAF_NODE	4129:101	4129:101	7	;
EXPR_STATEMENT	4130:16	4130:109	6	_TIFFsetShortArray ( & tif -> tif_dir . td_sampleinfo , new_sampleinfo , tif -> tif_dir . td_extrasamples ) ;
EXPR	4130:16	4130:16	7	_TIFFsetShortArray ( & tif -> tif_dir . td_sampleinfo , new_sampleinfo , tif -> tif_dir . td_extrasamples )
FUNCTION_CALL	4130:16	4130:108	8	_TIFFsetShortArray ( & tif -> tif_dir . td_sampleinfo , new_sampleinfo , tif -> tif_dir . td_extrasamples )
CALLEE	4130:16	4130:16	9	_TIFFsetShortArray
LEAF_NODE	4130:16	4130:16	10	_TIFFsetShortArray
LEAF_NODE	4130:34	4130:34	9	(
ARGUMENT	4130:35	4130:35	9	& tif -> tif_dir . td_sampleinfo
UNARY_EXPR	4130:35	4130:36	10	& tif -> tif_dir . td_sampleinfo
UNARY_OPERATOR	4130:35	4130:35	11	&
LEAF_NODE	4130:35	4130:35	12	&
FIELD	4130:36	4130:49	11	tif -> tif_dir . td_sampleinfo
LEAF_NODE	4130:36	4130:36	12	tif
LEAF_NODE	4130:39	4130:39	12	->
LEAF_NODE	4130:41	4130:41	12	tif_dir
LEAF_NODE	4130:48	4130:48	12	.
LEAF_NODE	4130:49	4130:49	12	td_sampleinfo
LEAF_NODE	4130:62	4130:62	9	,
ARGUMENT	4130:64	4130:64	9	new_sampleinfo
FIELD	4130:64	4130:64	10	new_sampleinfo
LEAF_NODE	4130:64	4130:64	11	new_sampleinfo
LEAF_NODE	4130:78	4130:78	9	,
ARGUMENT	4130:80	4130:80	9	tif -> tif_dir . td_extrasamples
FIELD	4130:80	4130:93	10	tif -> tif_dir . td_extrasamples
LEAF_NODE	4130:80	4130:80	11	tif
LEAF_NODE	4130:83	4130:83	11	->
LEAF_NODE	4130:85	4130:85	11	tif_dir
LEAF_NODE	4130:92	4130:92	11	.
LEAF_NODE	4130:93	4130:93	11	td_extrasamples
LEAF_NODE	4130:108	4130:108	9	)
LEAF_NODE	4130:109	4130:109	7	;
EXPR_STATEMENT	4131:16	4131:41	6	_TIFFfree ( new_sampleinfo ) ;
EXPR	4131:16	4131:16	7	_TIFFfree ( new_sampleinfo )
FUNCTION_CALL	4131:16	4131:40	8	_TIFFfree ( new_sampleinfo )
CALLEE	4131:16	4131:16	9	_TIFFfree
LEAF_NODE	4131:16	4131:16	10	_TIFFfree
LEAF_NODE	4131:25	4131:25	9	(
ARGUMENT	4131:26	4131:26	9	new_sampleinfo
FIELD	4131:26	4131:26	10	new_sampleinfo
LEAF_NODE	4131:26	4131:26	11	new_sampleinfo
LEAF_NODE	4131:40	4131:40	9	)
LEAF_NODE	4131:41	4131:41	7	;
LEAF_NODE	4132:8	4132:8	5	}
SELECTION	4137:1	4138:41	3	
KEYWORD	4137:1	4137:1	4	if
LEAF_NODE	4137:1	4137:1	5	if
LEAF_NODE	4137:4	4137:4	4	(
CONDITION	4137:5	4137:5	4	tif -> tif_dir . td_photometric == PHOTOMETRIC_PALETTE && ! TIFFFieldSet ( tif , FIELD_COLORMAP )
EXPR	4137:5	4137:5	5	tif -> tif_dir . td_photometric == PHOTOMETRIC_PALETTE && ! TIFFFieldSet ( tif , FIELD_COLORMAP )
AND	4137:5	4138:5	6	tif -> tif_dir . td_photometric == PHOTOMETRIC_PALETTE && ! TIFFFieldSet ( tif , FIELD_COLORMAP )
EXPR	4137:5	4137:36	7	tif -> tif_dir . td_photometric == PHOTOMETRIC_PALETTE
FIELD	4137:5	4137:18	8	tif -> tif_dir . td_photometric
LEAF_NODE	4137:5	4137:5	9	tif
LEAF_NODE	4137:8	4137:8	9	->
LEAF_NODE	4137:10	4137:10	9	tif_dir
LEAF_NODE	4137:17	4137:17	9	.
LEAF_NODE	4137:18	4137:18	9	td_photometric
EQ_OPERATOR	4137:33	4137:33	8	==
LEAF_NODE	4137:33	4137:33	9	==
FIELD	4137:36	4137:36	8	PHOTOMETRIC_PALETTE
LEAF_NODE	4137:36	4137:36	9	PHOTOMETRIC_PALETTE
LEAF_NODE	4137:56	4137:56	7	&&
EXPR	4138:5	4138:5	7	! TIFFFieldSet ( tif , FIELD_COLORMAP )
UNARY_EXPR	4138:5	4138:6	8	! TIFFFieldSet ( tif , FIELD_COLORMAP )
UNARY_OPERATOR	4138:5	4138:5	9	!
LEAF_NODE	4138:5	4138:5	10	!
FUNCTION_CALL	4138:6	4138:38	9	TIFFFieldSet ( tif , FIELD_COLORMAP )
CALLEE	4138:6	4138:6	10	TIFFFieldSet
LEAF_NODE	4138:6	4138:6	11	TIFFFieldSet
LEAF_NODE	4138:18	4138:18	10	(
ARGUMENT	4138:19	4138:19	10	tif
FIELD	4138:19	4138:19	11	tif
LEAF_NODE	4138:19	4138:19	12	tif
LEAF_NODE	4138:22	4138:22	10	,
ARGUMENT	4138:24	4138:24	10	FIELD_COLORMAP
FIELD	4138:24	4138:24	11	FIELD_COLORMAP
LEAF_NODE	4138:24	4138:24	12	FIELD_COLORMAP
LEAF_NODE	4138:38	4138:38	10	)
LEAF_NODE	4138:39	4138:39	4	)
STATEMENTS	4138:41	4147:1	4	
LEAF_NODE	4138:41	4138:41	5	{
STATEMENTS	4139:2	4143:2	5	
SELECTION	4139:2	4140:3	6	
KEYWORD	4139:2	4139:2	7	if
LEAF_NODE	4139:2	4139:2	8	if
LEAF_NODE	4139:5	4139:5	7	(
CONDITION	4139:7	4139:7	7	tif -> tif_dir . td_bitspersample >= 8 && tif -> tif_dir . td_samplesperpixel == 3
EXPR	4139:7	4139:7	8	tif -> tif_dir . td_bitspersample >= 8 && tif -> tif_dir . td_samplesperpixel == 3
AND	4139:7	4139:43	9	tif -> tif_dir . td_bitspersample >= 8 && tif -> tif_dir . td_samplesperpixel == 3
EXPR	4139:7	4139:38	10	tif -> tif_dir . td_bitspersample >= 8
FIELD	4139:7	4139:20	11	tif -> tif_dir . td_bitspersample
LEAF_NODE	4139:7	4139:7	12	tif
LEAF_NODE	4139:10	4139:10	12	->
LEAF_NODE	4139:12	4139:12	12	tif_dir
LEAF_NODE	4139:19	4139:19	12	.
LEAF_NODE	4139:20	4139:20	12	td_bitspersample
REL_OPERATOR	4139:36	4139:36	11	>=
LEAF_NODE	4139:36	4139:36	12	>=
FIELD	4139:38	4139:38	11	8
LEAF_NODE	4139:38	4139:38	12	8
LEAF_NODE	4139:40	4139:40	10	&&
EXPR	4139:43	4139:76	10	tif -> tif_dir . td_samplesperpixel == 3
FIELD	4139:43	4139:56	11	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	4139:43	4139:43	12	tif
LEAF_NODE	4139:46	4139:46	12	->
LEAF_NODE	4139:48	4139:48	12	tif_dir
LEAF_NODE	4139:55	4139:55	12	.
LEAF_NODE	4139:56	4139:56	12	td_samplesperpixel
EQ_OPERATOR	4139:74	4139:74	11	==
LEAF_NODE	4139:74	4139:74	12	==
FIELD	4139:76	4139:76	11	3
LEAF_NODE	4139:76	4139:76	12	3
LEAF_NODE	4139:77	4139:77	7	)
STATEMENTS	4140:3	4140:3	7	
EXPR_STATEMENT	4140:3	4140:48	8	tif -> tif_dir . td_photometric = PHOTOMETRIC_RGB ;
EXPR	4140:3	4140:3	9	tif -> tif_dir . td_photometric = PHOTOMETRIC_RGB
ASSIGN	4140:3	4140:33	10	tif -> tif_dir . td_photometric = PHOTOMETRIC_RGB
LVAL	4140:3	4140:3	11	tif -> tif_dir . td_photometric
FIELD	4140:3	4140:16	12	tif -> tif_dir . td_photometric
LEAF_NODE	4140:3	4140:3	13	tif
LEAF_NODE	4140:6	4140:6	13	->
LEAF_NODE	4140:8	4140:8	13	tif_dir
LEAF_NODE	4140:15	4140:15	13	.
LEAF_NODE	4140:16	4140:16	13	td_photometric
ASSIGN_OP	4140:31	4140:31	11	=
LEAF_NODE	4140:31	4140:31	12	=
RVAL	4140:33	4140:33	11	PHOTOMETRIC_RGB
FIELD	4140:33	4140:33	12	PHOTOMETRIC_RGB
LEAF_NODE	4140:33	4140:33	13	PHOTOMETRIC_RGB
LEAF_NODE	4140:48	4140:48	9	;
SELECTION	4141:2	4141:7	6	
KEYWORD	4141:2	4141:2	7	else
LEAF_NODE	4141:2	4141:2	8	else
STATEMENTS	4141:7	4141:7	7	
SELECTION	4141:7	4142:3	8	
KEYWORD	4141:7	4141:7	9	if
LEAF_NODE	4141:7	4141:7	10	if
LEAF_NODE	4141:10	4141:10	9	(
CONDITION	4141:11	4141:11	9	tif -> tif_dir . td_bitspersample >= 8
EXPR	4141:11	4141:42	10	tif -> tif_dir . td_bitspersample >= 8
FIELD	4141:11	4141:24	11	tif -> tif_dir . td_bitspersample
LEAF_NODE	4141:11	4141:11	12	tif
LEAF_NODE	4141:14	4141:14	12	->
LEAF_NODE	4141:16	4141:16	12	tif_dir
LEAF_NODE	4141:23	4141:23	12	.
LEAF_NODE	4141:24	4141:24	12	td_bitspersample
REL_OPERATOR	4141:40	4141:40	11	>=
LEAF_NODE	4141:40	4141:40	12	>=
FIELD	4141:42	4141:42	11	8
LEAF_NODE	4141:42	4141:42	12	8
LEAF_NODE	4141:43	4141:43	9	)
STATEMENTS	4142:3	4142:3	9	
EXPR_STATEMENT	4142:3	4142:55	10	tif -> tif_dir . td_photometric = PHOTOMETRIC_MINISBLACK ;
EXPR	4142:3	4142:3	11	tif -> tif_dir . td_photometric = PHOTOMETRIC_MINISBLACK
ASSIGN	4142:3	4142:33	12	tif -> tif_dir . td_photometric = PHOTOMETRIC_MINISBLACK
LVAL	4142:3	4142:3	13	tif -> tif_dir . td_photometric
FIELD	4142:3	4142:16	14	tif -> tif_dir . td_photometric
LEAF_NODE	4142:3	4142:3	15	tif
LEAF_NODE	4142:6	4142:6	15	->
LEAF_NODE	4142:8	4142:8	15	tif_dir
LEAF_NODE	4142:15	4142:15	15	.
LEAF_NODE	4142:16	4142:16	15	td_photometric
ASSIGN_OP	4142:31	4142:31	13	=
LEAF_NODE	4142:31	4142:31	14	=
RVAL	4142:33	4142:33	13	PHOTOMETRIC_MINISBLACK
FIELD	4142:33	4142:33	14	PHOTOMETRIC_MINISBLACK
LEAF_NODE	4142:33	4142:33	15	PHOTOMETRIC_MINISBLACK
LEAF_NODE	4142:55	4142:55	11	;
SELECTION	4143:2	4143:7	6	
KEYWORD	4143:2	4143:2	7	else
LEAF_NODE	4143:2	4143:2	8	else
STATEMENTS	4143:7	4146:2	7	
LEAF_NODE	4143:7	4143:7	8	{
STATEMENTS	4144:3	4145:3	8	
EXPR_STATEMENT	4144:3	4144:35	9	MissingRequired ( tif , "Colormap" ) ;
EXPR	4144:3	4144:3	10	MissingRequired ( tif , "Colormap" )
FUNCTION_CALL	4144:3	4144:34	11	MissingRequired ( tif , "Colormap" )
CALLEE	4144:3	4144:3	12	MissingRequired
LEAF_NODE	4144:3	4144:3	13	MissingRequired
LEAF_NODE	4144:18	4144:18	12	(
ARGUMENT	4144:19	4144:19	12	tif
FIELD	4144:19	4144:19	13	tif
LEAF_NODE	4144:19	4144:19	14	tif
LEAF_NODE	4144:22	4144:22	12	,
ARGUMENT	4144:24	4144:24	12	"Colormap"
FIELD	4144:24	4144:24	13	"Colormap"
LEAF_NODE	4144:24	4144:24	14	"Colormap"
LEAF_NODE	4144:34	4144:34	12	)
LEAF_NODE	4144:35	4144:35	10	;
JUMP_STATEMENT	4145:3	4145:11	9	goto bad ;
KEYWORD	4145:3	4145:3	10	goto
LEAF_NODE	4145:3	4145:3	11	goto
DESTINATION	4145:8	4145:8	10	bad
LEAF_NODE	4145:8	4145:8	11	bad
LEAF_NODE	4145:11	4145:11	10	;
LEAF_NODE	4146:2	4146:2	8	}
LEAF_NODE	4147:1	4147:1	5	}
SELECTION	4153:1	4154:1	3	
KEYWORD	4153:1	4153:1	4	if
LEAF_NODE	4153:1	4153:1	5	if
LEAF_NODE	4153:4	4153:4	4	(
CONDITION	4153:5	4153:5	4	tif -> tif_dir . td_compression != COMPRESSION_OJPEG
EXPR	4153:5	4153:34	5	tif -> tif_dir . td_compression != COMPRESSION_OJPEG
FIELD	4153:5	4153:18	6	tif -> tif_dir . td_compression
LEAF_NODE	4153:5	4153:5	7	tif
LEAF_NODE	4153:8	4153:8	7	->
LEAF_NODE	4153:10	4153:10	7	tif_dir
LEAF_NODE	4153:17	4153:17	7	.
LEAF_NODE	4153:18	4153:18	7	td_compression
EQ_OPERATOR	4153:32	4153:32	6	!=
LEAF_NODE	4153:32	4153:32	7	!=
FIELD	4153:34	4153:34	6	COMPRESSION_OJPEG
LEAF_NODE	4153:34	4153:34	7	COMPRESSION_OJPEG
LEAF_NODE	4153:51	4153:51	4	)
STATEMENTS	4154:1	4213:1	4	
LEAF_NODE	4154:1	4154:1	5	{
STATEMENTS	4158:2	4191:4	5	
SELECTION	4158:2	4158:49	6	
KEYWORD	4158:2	4158:2	7	if
LEAF_NODE	4158:2	4158:2	8	if
LEAF_NODE	4158:5	4158:5	7	(
CONDITION	4158:6	4158:6	7	! TIFFFieldSet ( tif , FIELD_STRIPBYTECOUNTS )
EXPR	4158:6	4158:6	8	! TIFFFieldSet ( tif , FIELD_STRIPBYTECOUNTS )
UNARY_EXPR	4158:6	4158:7	9	! TIFFFieldSet ( tif , FIELD_STRIPBYTECOUNTS )
UNARY_OPERATOR	4158:6	4158:6	10	!
LEAF_NODE	4158:6	4158:6	11	!
FUNCTION_CALL	4158:7	4158:46	10	TIFFFieldSet ( tif , FIELD_STRIPBYTECOUNTS )
CALLEE	4158:7	4158:7	11	TIFFFieldSet
LEAF_NODE	4158:7	4158:7	12	TIFFFieldSet
LEAF_NODE	4158:19	4158:19	11	(
ARGUMENT	4158:20	4158:20	11	tif
FIELD	4158:20	4158:20	12	tif
LEAF_NODE	4158:20	4158:20	13	tif
LEAF_NODE	4158:23	4158:23	11	,
ARGUMENT	4158:25	4158:25	11	FIELD_STRIPBYTECOUNTS
FIELD	4158:25	4158:25	12	FIELD_STRIPBYTECOUNTS
LEAF_NODE	4158:25	4158:25	13	FIELD_STRIPBYTECOUNTS
LEAF_NODE	4158:46	4158:46	11	)
LEAF_NODE	4158:47	4158:47	7	)
STATEMENTS	4158:49	4177:2	7	
LEAF_NODE	4158:49	4158:49	8	{
STATEMENTS	4164:3	4174:3	8	
SELECTION	4164:3	4167:77	9	
KEYWORD	4164:3	4164:3	10	if
LEAF_NODE	4164:3	4164:3	11	if
LEAF_NODE	4164:6	4164:6	10	(
CONDITION	4164:7	4164:7	10	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 1 ) || ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE && tif -> tif_dir . td_nstrips != ( uint32 ) tif -> tif_dir . td_samplesperpixel )
EXPR	4164:7	4164:7	11	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 1 ) || ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE && tif -> tif_dir . td_nstrips != ( uint32 ) tif -> tif_dir . td_samplesperpixel )
OR	4164:7	4166:7	12	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 1 ) || ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE && tif -> tif_dir . td_nstrips != ( uint32 ) tif -> tif_dir . td_samplesperpixel )
EXPR	4164:7	4165:34	13	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 1 )
LEAF_NODE	4164:7	4164:7	14	(
AND	4164:8	4165:7	14	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 1
EXPR	4164:8	4164:40	15	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG
FIELD	4164:8	4164:21	16	tif -> tif_dir . td_planarconfig
LEAF_NODE	4164:8	4164:8	17	tif
LEAF_NODE	4164:11	4164:11	17	->
LEAF_NODE	4164:13	4164:13	17	tif_dir
LEAF_NODE	4164:20	4164:20	17	.
LEAF_NODE	4164:21	4164:21	17	td_planarconfig
EQ_OPERATOR	4164:37	4164:37	16	==
LEAF_NODE	4164:37	4164:37	17	==
FIELD	4164:40	4164:40	16	PLANARCONFIG_CONTIG
LEAF_NODE	4164:40	4164:40	17	PLANARCONFIG_CONTIG
LEAF_NODE	4164:60	4164:60	15	&&
EXPR	4165:7	4165:33	15	tif -> tif_dir . td_nstrips > 1
FIELD	4165:7	4165:20	16	tif -> tif_dir . td_nstrips
LEAF_NODE	4165:7	4165:7	17	tif
LEAF_NODE	4165:10	4165:10	17	->
LEAF_NODE	4165:12	4165:12	17	tif_dir
LEAF_NODE	4165:19	4165:19	17	.
LEAF_NODE	4165:20	4165:20	17	td_nstrips
REL_OPERATOR	4165:31	4165:31	16	>
LEAF_NODE	4165:31	4165:31	17	>
FIELD	4165:33	4165:33	16	1
LEAF_NODE	4165:33	4165:33	17	1
LEAF_NODE	4165:34	4165:34	14	)
LEAF_NODE	4165:36	4165:36	13	||
EXPR	4166:7	4167:74	13	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE && tif -> tif_dir . td_nstrips != ( uint32 ) tif -> tif_dir . td_samplesperpixel )
LEAF_NODE	4166:7	4166:7	14	(
AND	4166:8	4167:8	14	tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE && tif -> tif_dir . td_nstrips != ( uint32 ) tif -> tif_dir . td_samplesperpixel
EXPR	4166:8	4166:40	15	tif -> tif_dir . td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	4166:8	4166:21	16	tif -> tif_dir . td_planarconfig
LEAF_NODE	4166:8	4166:8	17	tif
LEAF_NODE	4166:11	4166:11	17	->
LEAF_NODE	4166:13	4166:13	17	tif_dir
LEAF_NODE	4166:20	4166:20	17	.
LEAF_NODE	4166:21	4166:21	17	td_planarconfig
EQ_OPERATOR	4166:37	4166:37	16	==
LEAF_NODE	4166:37	4166:37	17	==
FIELD	4166:40	4166:40	16	PLANARCONFIG_SEPARATE
LEAF_NODE	4166:40	4166:40	17	PLANARCONFIG_SEPARATE
LEAF_NODE	4166:62	4166:62	15	&&
EXPR	4167:8	4167:43	15	tif -> tif_dir . td_nstrips != ( uint32 ) tif -> tif_dir . td_samplesperpixel
FIELD	4167:8	4167:21	16	tif -> tif_dir . td_nstrips
LEAF_NODE	4167:8	4167:8	17	tif
LEAF_NODE	4167:11	4167:11	17	->
LEAF_NODE	4167:13	4167:13	17	tif_dir
LEAF_NODE	4167:20	4167:20	17	.
LEAF_NODE	4167:21	4167:21	17	td_nstrips
EQ_OPERATOR	4167:32	4167:32	16	!=
LEAF_NODE	4167:32	4167:32	17	!=
LEAF_NODE	4167:35	4167:35	16	(
TYPE_NAME	4167:36	4167:36	16	uint32
LEAF_NODE	4167:36	4167:36	17	uint32
LEAF_NODE	4167:42	4167:42	16	)
FIELD	4167:43	4167:56	16	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	4167:43	4167:43	17	tif
LEAF_NODE	4167:46	4167:46	17	->
LEAF_NODE	4167:48	4167:48	17	tif_dir
LEAF_NODE	4167:55	4167:55	17	.
LEAF_NODE	4167:56	4167:56	17	td_samplesperpixel
LEAF_NODE	4167:74	4167:74	14	)
LEAF_NODE	4167:75	4167:75	10	)
STATEMENTS	4167:77	4170:3	10	
LEAF_NODE	4167:77	4167:77	11	{
STATEMENTS	4168:7	4169:7	11	
EXPR_STATEMENT	4168:7	4168:46	12	MissingRequired ( tif , "StripByteCounts" ) ;
EXPR	4168:7	4168:7	13	MissingRequired ( tif , "StripByteCounts" )
FUNCTION_CALL	4168:7	4168:45	14	MissingRequired ( tif , "StripByteCounts" )
CALLEE	4168:7	4168:7	15	MissingRequired
LEAF_NODE	4168:7	4168:7	16	MissingRequired
LEAF_NODE	4168:22	4168:22	15	(
ARGUMENT	4168:23	4168:23	15	tif
FIELD	4168:23	4168:23	16	tif
LEAF_NODE	4168:23	4168:23	17	tif
LEAF_NODE	4168:26	4168:26	15	,
ARGUMENT	4168:28	4168:28	15	"StripByteCounts"
FIELD	4168:28	4168:28	16	"StripByteCounts"
LEAF_NODE	4168:28	4168:28	17	"StripByteCounts"
LEAF_NODE	4168:45	4168:45	15	)
LEAF_NODE	4168:46	4168:46	13	;
JUMP_STATEMENT	4169:7	4169:15	12	goto bad ;
KEYWORD	4169:7	4169:7	13	goto
LEAF_NODE	4169:7	4169:7	14	goto
DESTINATION	4169:12	4169:12	13	bad
LEAF_NODE	4169:12	4169:12	14	bad
LEAF_NODE	4169:15	4169:15	13	;
LEAF_NODE	4170:3	4170:3	11	}
LEAF_NODE	4171:3	4171:3	9	TIFFWarningExt
LEAF_NODE	4171:17	4171:17	9	(
LEAF_NODE	4171:18	4171:18	9	tif
LEAF_NODE	4171:21	4171:21	9	->
LEAF_NODE	4171:23	4171:23	9	tif_clientdata
LEAF_NODE	4171:37	4171:37	9	,
LEAF_NODE	4171:39	4171:39	9	module
LEAF_NODE	4171:45	4171:45	9	,
LEAF_NODE	4172:4	4172:4	9	"TIFF directory is missing required "
LEAF_NODE	4173:4	4173:4	9	"\"StripByteCounts\" field, calculating from imagelength"
LEAF_NODE	4173:61	4173:61	9	)
LEAF_NODE	4173:62	4173:62	9	;
SELECTION	4174:3	4175:7	9	
KEYWORD	4174:3	4174:3	10	if
LEAF_NODE	4174:3	4174:3	11	if
LEAF_NODE	4174:6	4174:6	10	(
CONDITION	4174:7	4174:7	10	EstimateStripByteCounts ( tif , dir , dircount ) < 0
EXPR	4174:7	4174:53	11	EstimateStripByteCounts ( tif , dir , dircount ) < 0
FUNCTION_CALL	4174:7	4174:49	12	EstimateStripByteCounts ( tif , dir , dircount )
CALLEE	4174:7	4174:7	13	EstimateStripByteCounts
LEAF_NODE	4174:7	4174:7	14	EstimateStripByteCounts
LEAF_NODE	4174:30	4174:30	13	(
ARGUMENT	4174:31	4174:31	13	tif
FIELD	4174:31	4174:31	14	tif
LEAF_NODE	4174:31	4174:31	15	tif
LEAF_NODE	4174:34	4174:34	13	,
ARGUMENT	4174:36	4174:36	13	dir
FIELD	4174:36	4174:36	14	dir
LEAF_NODE	4174:36	4174:36	15	dir
LEAF_NODE	4174:39	4174:39	13	,
ARGUMENT	4174:41	4174:41	13	dircount
FIELD	4174:41	4174:41	14	dircount
LEAF_NODE	4174:41	4174:41	15	dircount
LEAF_NODE	4174:49	4174:49	13	)
REL_OPERATOR	4174:51	4174:51	12	<
LEAF_NODE	4174:51	4174:51	13	<
FIELD	4174:53	4174:53	12	0
LEAF_NODE	4174:53	4174:53	13	0
LEAF_NODE	4174:54	4174:54	10	)
STATEMENTS	4175:7	4175:7	10	
JUMP_STATEMENT	4175:7	4175:15	11	goto bad ;
KEYWORD	4175:7	4175:7	12	goto
LEAF_NODE	4175:7	4175:7	13	goto
DESTINATION	4175:12	4175:12	12	bad
LEAF_NODE	4175:12	4175:12	13	bad
LEAF_NODE	4175:15	4175:15	12	;
LEAF_NODE	4177:2	4177:2	8	}
SELECTION	4177:4	4177:9	6	
KEYWORD	4177:4	4177:4	7	else
LEAF_NODE	4177:4	4177:4	8	else
STATEMENTS	4177:9	4177:9	7	
SELECTION	4177:9	4179:33	8	
KEYWORD	4177:9	4177:9	9	if
LEAF_NODE	4177:9	4177:9	10	if
LEAF_NODE	4177:12	4177:12	9	(
CONDITION	4177:13	4177:13	9	tif -> tif_dir . td_nstrips == 1 && ! ( tif -> tif_flags & TIFF_ISTILED ) && ByteCountLooksBad ( tif )
EXPR	4177:13	4177:13	10	tif -> tif_dir . td_nstrips == 1 && ! ( tif -> tif_flags & TIFF_ISTILED ) && ByteCountLooksBad ( tif )
AND	4177:13	4178:30	11	tif -> tif_dir . td_nstrips == 1 && ! ( tif -> tif_flags & TIFF_ISTILED ) && ByteCountLooksBad ( tif )
EXPR	4177:13	4177:40	12	tif -> tif_dir . td_nstrips == 1
FIELD	4177:13	4177:26	13	tif -> tif_dir . td_nstrips
LEAF_NODE	4177:13	4177:13	14	tif
LEAF_NODE	4177:16	4177:16	14	->
LEAF_NODE	4177:18	4177:18	14	tif_dir
LEAF_NODE	4177:25	4177:25	14	.
LEAF_NODE	4177:26	4177:26	14	td_nstrips
EQ_OPERATOR	4177:37	4177:37	13	==
LEAF_NODE	4177:37	4177:37	14	==
FIELD	4177:40	4177:40	13	1
LEAF_NODE	4177:40	4177:40	14	1
LEAF_NODE	4178:27	4178:27	12	&&
EXPR	4178:30	4178:30	12	! ( tif -> tif_flags & TIFF_ISTILED ) && ByteCountLooksBad ( tif )
AND	4178:30	4179:9	13	! ( tif -> tif_flags & TIFF_ISTILED ) && ByteCountLooksBad ( tif )
EXPR	4178:30	4178:30	14	! ( tif -> tif_flags & TIFF_ISTILED )
UNARY_EXPR	4178:30	4178:59	15	! ( tif -> tif_flags & TIFF_ISTILED )
UNARY_OPERATOR	4178:30	4178:30	16	!
LEAF_NODE	4178:30	4178:30	17	!
LEAF_NODE	4178:31	4178:31	16	(
FIELD	4178:32	4178:37	16	tif -> tif_flags
LEAF_NODE	4178:32	4178:32	17	tif
LEAF_NODE	4178:35	4178:35	17	->
LEAF_NODE	4178:37	4178:37	17	tif_flags
LEAF_NODE	4178:46	4178:46	16	&
FIELD	4178:47	4178:47	16	TIFF_ISTILED
LEAF_NODE	4178:47	4178:47	17	TIFF_ISTILED
LEAF_NODE	4178:59	4178:59	16	)
LEAF_NODE	4179:6	4179:6	14	&&
EXPR	4179:9	4179:9	14	ByteCountLooksBad ( tif )
FUNCTION_CALL	4179:9	4179:30	15	ByteCountLooksBad ( tif )
CALLEE	4179:9	4179:9	16	ByteCountLooksBad
LEAF_NODE	4179:9	4179:9	17	ByteCountLooksBad
LEAF_NODE	4179:26	4179:26	16	(
ARGUMENT	4179:27	4179:27	16	tif
FIELD	4179:27	4179:27	17	tif
LEAF_NODE	4179:27	4179:27	18	tif
LEAF_NODE	4179:30	4179:30	16	)
LEAF_NODE	4179:31	4179:31	9	)
STATEMENTS	4179:33	4191:2	9	
LEAF_NODE	4179:33	4179:33	10	{
STATEMENTS	4186:3	4188:3	10	
EXPR_STATEMENT	4186:3	4187:84	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength" ) ;
EXPR	4186:3	4186:3	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength" )
FUNCTION_CALL	4186:3	4187:83	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength" )
CALLEE	4186:3	4186:3	14	TIFFWarningExt
LEAF_NODE	4186:3	4186:3	15	TIFFWarningExt
LEAF_NODE	4186:17	4186:17	14	(
ARGUMENT	4186:18	4186:18	14	tif -> tif_clientdata
FIELD	4186:18	4186:23	15	tif -> tif_clientdata
LEAF_NODE	4186:18	4186:18	16	tif
LEAF_NODE	4186:21	4186:21	16	->
LEAF_NODE	4186:23	4186:23	16	tif_clientdata
LEAF_NODE	4186:37	4186:37	14	,
ARGUMENT	4186:39	4186:39	14	module
FIELD	4186:39	4186:39	15	module
LEAF_NODE	4186:39	4186:39	16	module
LEAF_NODE	4186:45	4186:45	14	,
ARGUMENT	4187:7	4187:7	14	"Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength"
FIELD	4187:7	4187:7	15	"Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength"
LEAF_NODE	4187:7	4187:7	16	"Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength"
LEAF_NODE	4187:83	4187:83	14	)
LEAF_NODE	4187:84	4187:84	12	;
SELECTION	4188:3	4189:7	11	
KEYWORD	4188:3	4188:3	12	if
LEAF_NODE	4188:3	4188:3	13	if
LEAF_NODE	4188:5	4188:5	12	(
CONDITION	4188:6	4188:6	12	EstimateStripByteCounts ( tif , dir , dircount ) < 0
EXPR	4188:6	4188:52	13	EstimateStripByteCounts ( tif , dir , dircount ) < 0
FUNCTION_CALL	4188:6	4188:48	14	EstimateStripByteCounts ( tif , dir , dircount )
CALLEE	4188:6	4188:6	15	EstimateStripByteCounts
LEAF_NODE	4188:6	4188:6	16	EstimateStripByteCounts
LEAF_NODE	4188:29	4188:29	15	(
ARGUMENT	4188:30	4188:30	15	tif
FIELD	4188:30	4188:30	16	tif
LEAF_NODE	4188:30	4188:30	17	tif
LEAF_NODE	4188:33	4188:33	15	,
ARGUMENT	4188:35	4188:35	15	dir
FIELD	4188:35	4188:35	16	dir
LEAF_NODE	4188:35	4188:35	17	dir
LEAF_NODE	4188:38	4188:38	15	,
ARGUMENT	4188:40	4188:40	15	dircount
FIELD	4188:40	4188:40	16	dircount
LEAF_NODE	4188:40	4188:40	17	dircount
LEAF_NODE	4188:48	4188:48	15	)
REL_OPERATOR	4188:50	4188:50	14	<
LEAF_NODE	4188:50	4188:50	15	<
FIELD	4188:52	4188:52	14	0
LEAF_NODE	4188:52	4188:52	15	0
LEAF_NODE	4188:53	4188:53	12	)
STATEMENTS	4189:7	4189:7	12	
JUMP_STATEMENT	4189:7	4189:15	13	goto bad ;
KEYWORD	4189:7	4189:7	14	goto
LEAF_NODE	4189:7	4189:7	15	goto
DESTINATION	4189:12	4189:12	14	bad
LEAF_NODE	4189:12	4189:12	15	bad
LEAF_NODE	4189:15	4189:15	14	;
LEAF_NODE	4191:2	4191:2	10	}
SELECTION	4191:4	4191:9	6	
KEYWORD	4191:4	4191:4	7	else
LEAF_NODE	4191:4	4191:4	8	else
STATEMENTS	4191:9	4191:9	7	
SELECTION	4191:9	4197:47	8	
KEYWORD	4191:9	4191:9	9	if
LEAF_NODE	4191:9	4191:9	10	if
LEAF_NODE	4191:12	4191:12	9	(
CONDITION	4191:13	4191:13	9	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 2 && tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
EXPR	4191:13	4191:13	10	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 2 && tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
AND	4191:13	4192:9	11	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 2 && tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
EXPR	4191:13	4191:13	12	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_EXPR	4191:13	4191:50	13	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_OPERATOR	4191:13	4191:13	14	!
LEAF_NODE	4191:13	4191:13	15	!
LEAF_NODE	4191:14	4191:14	14	(
FIELD	4191:15	4191:20	14	tif -> tif_flags
LEAF_NODE	4191:15	4191:15	15	tif
LEAF_NODE	4191:18	4191:18	15	->
LEAF_NODE	4191:20	4191:20	15	tif_flags
LEAF_NODE	4191:29	4191:29	14	&
FIELD	4191:30	4191:30	14	TIFF_DEFERSTRILELOAD
LEAF_NODE	4191:30	4191:30	15	TIFF_DEFERSTRILELOAD
LEAF_NODE	4191:50	4191:50	14	)
LEAF_NODE	4192:6	4192:6	12	&&
EXPR	4192:9	4192:9	12	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 2 && tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
AND	4192:9	4193:9	13	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_nstrips > 2 && tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
EXPR	4192:9	4192:41	14	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG
FIELD	4192:9	4192:22	15	tif -> tif_dir . td_planarconfig
LEAF_NODE	4192:9	4192:9	16	tif
LEAF_NODE	4192:12	4192:12	16	->
LEAF_NODE	4192:14	4192:14	16	tif_dir
LEAF_NODE	4192:21	4192:21	16	.
LEAF_NODE	4192:22	4192:22	16	td_planarconfig
EQ_OPERATOR	4192:38	4192:38	15	==
LEAF_NODE	4192:38	4192:38	16	==
FIELD	4192:41	4192:41	15	PLANARCONFIG_CONTIG
LEAF_NODE	4192:41	4192:41	16	PLANARCONFIG_CONTIG
LEAF_NODE	4193:6	4193:6	14	&&
EXPR	4193:9	4193:9	14	tif -> tif_dir . td_nstrips > 2 && tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
AND	4193:9	4194:9	15	tif -> tif_dir . td_nstrips > 2 && tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
EXPR	4193:9	4193:35	16	tif -> tif_dir . td_nstrips > 2
FIELD	4193:9	4193:22	17	tif -> tif_dir . td_nstrips
LEAF_NODE	4193:9	4193:9	18	tif
LEAF_NODE	4193:12	4193:12	18	->
LEAF_NODE	4193:14	4193:14	18	tif_dir
LEAF_NODE	4193:21	4193:21	18	.
LEAF_NODE	4193:22	4193:22	18	td_nstrips
REL_OPERATOR	4193:33	4193:33	17	>
LEAF_NODE	4193:33	4193:33	18	>
FIELD	4193:35	4193:35	17	2
LEAF_NODE	4193:35	4193:35	18	2
LEAF_NODE	4194:6	4194:6	16	&&
EXPR	4194:9	4194:9	16	tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
AND	4194:9	4195:9	17	tif -> tif_dir . td_compression == COMPRESSION_NONE && TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
EXPR	4194:9	4194:40	18	tif -> tif_dir . td_compression == COMPRESSION_NONE
FIELD	4194:9	4194:22	19	tif -> tif_dir . td_compression
LEAF_NODE	4194:9	4194:9	20	tif
LEAF_NODE	4194:12	4194:12	20	->
LEAF_NODE	4194:14	4194:14	20	tif_dir
LEAF_NODE	4194:21	4194:21	20	.
LEAF_NODE	4194:22	4194:22	20	td_compression
EQ_OPERATOR	4194:37	4194:37	19	==
LEAF_NODE	4194:37	4194:37	20	==
FIELD	4194:40	4194:40	19	COMPRESSION_NONE
LEAF_NODE	4194:40	4194:40	20	COMPRESSION_NONE
LEAF_NODE	4195:6	4195:6	18	&&
EXPR	4195:9	4195:9	18	TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
AND	4195:9	4196:9	19	TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 ) && TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
EXPR	4195:9	4195:43	20	TIFFGetStrileByteCount ( tif , 0 ) != TIFFGetStrileByteCount ( tif , 1 )
FUNCTION_CALL	4195:9	4195:38	21	TIFFGetStrileByteCount ( tif , 0 )
CALLEE	4195:9	4195:9	22	TIFFGetStrileByteCount
LEAF_NODE	4195:9	4195:9	23	TIFFGetStrileByteCount
LEAF_NODE	4195:31	4195:31	22	(
ARGUMENT	4195:32	4195:32	22	tif
FIELD	4195:32	4195:32	23	tif
LEAF_NODE	4195:32	4195:32	24	tif
LEAF_NODE	4195:35	4195:35	22	,
ARGUMENT	4195:37	4195:37	22	0
FIELD	4195:37	4195:37	23	0
LEAF_NODE	4195:37	4195:37	24	0
LEAF_NODE	4195:38	4195:38	22	)
EQ_OPERATOR	4195:40	4195:40	21	!=
LEAF_NODE	4195:40	4195:40	22	!=
FUNCTION_CALL	4195:43	4195:72	21	TIFFGetStrileByteCount ( tif , 1 )
CALLEE	4195:43	4195:43	22	TIFFGetStrileByteCount
LEAF_NODE	4195:43	4195:43	23	TIFFGetStrileByteCount
LEAF_NODE	4195:65	4195:65	22	(
ARGUMENT	4195:66	4195:66	22	tif
FIELD	4195:66	4195:66	23	tif
LEAF_NODE	4195:66	4195:66	24	tif
LEAF_NODE	4195:69	4195:69	22	,
ARGUMENT	4195:71	4195:71	22	1
FIELD	4195:71	4195:71	23	1
LEAF_NODE	4195:71	4195:71	24	1
LEAF_NODE	4195:72	4195:72	22	)
LEAF_NODE	4196:6	4196:6	20	&&
EXPR	4196:9	4196:9	20	TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
AND	4196:9	4197:9	21	TIFFGetStrileByteCount ( tif , 0 ) != 0 && TIFFGetStrileByteCount ( tif , 1 ) != 0
EXPR	4196:9	4196:43	22	TIFFGetStrileByteCount ( tif , 0 ) != 0
FUNCTION_CALL	4196:9	4196:38	23	TIFFGetStrileByteCount ( tif , 0 )
CALLEE	4196:9	4196:9	24	TIFFGetStrileByteCount
LEAF_NODE	4196:9	4196:9	25	TIFFGetStrileByteCount
LEAF_NODE	4196:31	4196:31	24	(
ARGUMENT	4196:32	4196:32	24	tif
FIELD	4196:32	4196:32	25	tif
LEAF_NODE	4196:32	4196:32	26	tif
LEAF_NODE	4196:35	4196:35	24	,
ARGUMENT	4196:37	4196:37	24	0
FIELD	4196:37	4196:37	25	0
LEAF_NODE	4196:37	4196:37	26	0
LEAF_NODE	4196:38	4196:38	24	)
EQ_OPERATOR	4196:40	4196:40	23	!=
LEAF_NODE	4196:40	4196:40	24	!=
FIELD	4196:43	4196:43	23	0
LEAF_NODE	4196:43	4196:43	24	0
LEAF_NODE	4197:6	4197:6	22	&&
EXPR	4197:9	4197:43	22	TIFFGetStrileByteCount ( tif , 1 ) != 0
FUNCTION_CALL	4197:9	4197:38	23	TIFFGetStrileByteCount ( tif , 1 )
CALLEE	4197:9	4197:9	24	TIFFGetStrileByteCount
LEAF_NODE	4197:9	4197:9	25	TIFFGetStrileByteCount
LEAF_NODE	4197:31	4197:31	24	(
ARGUMENT	4197:32	4197:32	24	tif
FIELD	4197:32	4197:32	25	tif
LEAF_NODE	4197:32	4197:32	26	tif
LEAF_NODE	4197:35	4197:35	24	,
ARGUMENT	4197:37	4197:37	24	1
FIELD	4197:37	4197:37	25	1
LEAF_NODE	4197:37	4197:37	26	1
LEAF_NODE	4197:38	4197:38	24	)
EQ_OPERATOR	4197:40	4197:40	23	!=
LEAF_NODE	4197:40	4197:40	24	!=
FIELD	4197:43	4197:43	23	0
LEAF_NODE	4197:43	4197:43	24	0
LEAF_NODE	4197:45	4197:45	9	)
STATEMENTS	4197:47	4212:2	9	
LEAF_NODE	4197:47	4197:47	10	{
STATEMENTS	4208:3	4210:3	10	
EXPR_STATEMENT	4208:3	4209:84	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength" ) ;
EXPR	4208:3	4208:3	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength" )
FUNCTION_CALL	4208:3	4209:83	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength" )
CALLEE	4208:3	4208:3	14	TIFFWarningExt
LEAF_NODE	4208:3	4208:3	15	TIFFWarningExt
LEAF_NODE	4208:17	4208:17	14	(
ARGUMENT	4208:18	4208:18	14	tif -> tif_clientdata
FIELD	4208:18	4208:23	15	tif -> tif_clientdata
LEAF_NODE	4208:18	4208:18	16	tif
LEAF_NODE	4208:21	4208:21	16	->
LEAF_NODE	4208:23	4208:23	16	tif_clientdata
LEAF_NODE	4208:37	4208:37	14	,
ARGUMENT	4208:39	4208:39	14	module
FIELD	4208:39	4208:39	15	module
LEAF_NODE	4208:39	4208:39	16	module
LEAF_NODE	4208:45	4208:45	14	,
ARGUMENT	4209:7	4209:7	14	"Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength"
FIELD	4209:7	4209:7	15	"Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength"
LEAF_NODE	4209:7	4209:7	16	"Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength"
LEAF_NODE	4209:83	4209:83	14	)
LEAF_NODE	4209:84	4209:84	12	;
SELECTION	4210:3	4211:7	11	
KEYWORD	4210:3	4210:3	12	if
LEAF_NODE	4210:3	4210:3	13	if
LEAF_NODE	4210:6	4210:6	12	(
CONDITION	4210:7	4210:7	12	EstimateStripByteCounts ( tif , dir , dircount ) < 0
EXPR	4210:7	4210:53	13	EstimateStripByteCounts ( tif , dir , dircount ) < 0
FUNCTION_CALL	4210:7	4210:49	14	EstimateStripByteCounts ( tif , dir , dircount )
CALLEE	4210:7	4210:7	15	EstimateStripByteCounts
LEAF_NODE	4210:7	4210:7	16	EstimateStripByteCounts
LEAF_NODE	4210:30	4210:30	15	(
ARGUMENT	4210:31	4210:31	15	tif
FIELD	4210:31	4210:31	16	tif
LEAF_NODE	4210:31	4210:31	17	tif
LEAF_NODE	4210:34	4210:34	15	,
ARGUMENT	4210:36	4210:36	15	dir
FIELD	4210:36	4210:36	16	dir
LEAF_NODE	4210:36	4210:36	17	dir
LEAF_NODE	4210:39	4210:39	15	,
ARGUMENT	4210:41	4210:41	15	dircount
FIELD	4210:41	4210:41	16	dircount
LEAF_NODE	4210:41	4210:41	17	dircount
LEAF_NODE	4210:49	4210:49	15	)
REL_OPERATOR	4210:51	4210:51	14	<
LEAF_NODE	4210:51	4210:51	15	<
FIELD	4210:53	4210:53	14	0
LEAF_NODE	4210:53	4210:53	15	0
LEAF_NODE	4210:54	4210:54	12	)
STATEMENTS	4211:7	4211:7	12	
JUMP_STATEMENT	4211:7	4211:15	13	goto bad ;
KEYWORD	4211:7	4211:7	14	goto
LEAF_NODE	4211:7	4211:7	15	goto
DESTINATION	4211:12	4211:12	14	bad
LEAF_NODE	4211:12	4211:12	15	bad
LEAF_NODE	4211:15	4211:15	14	;
LEAF_NODE	4212:2	4212:2	10	}
LEAF_NODE	4213:1	4213:1	5	}
SELECTION	4214:1	4215:1	3	
KEYWORD	4214:1	4214:1	4	if
LEAF_NODE	4214:1	4214:1	5	if
LEAF_NODE	4214:4	4214:4	4	(
CONDITION	4214:5	4214:5	4	dir
EXPR	4214:5	4214:5	5	dir
FIELD	4214:5	4214:5	6	dir
LEAF_NODE	4214:5	4214:5	7	dir
LEAF_NODE	4214:8	4214:8	4	)
STATEMENTS	4215:1	4218:1	4	
LEAF_NODE	4215:1	4215:1	5	{
STATEMENTS	4216:2	4217:2	5	
EXPR_STATEMENT	4216:2	4216:16	6	_TIFFfree ( dir ) ;
EXPR	4216:2	4216:2	7	_TIFFfree ( dir )
FUNCTION_CALL	4216:2	4216:15	8	_TIFFfree ( dir )
CALLEE	4216:2	4216:2	9	_TIFFfree
LEAF_NODE	4216:2	4216:2	10	_TIFFfree
LEAF_NODE	4216:11	4216:11	9	(
ARGUMENT	4216:12	4216:12	9	dir
FIELD	4216:12	4216:12	10	dir
LEAF_NODE	4216:12	4216:12	11	dir
LEAF_NODE	4216:15	4216:15	9	)
LEAF_NODE	4216:16	4216:16	7	;
EXPR_STATEMENT	4217:2	4217:10	6	dir = NULL ;
EXPR	4217:2	4217:2	7	dir = NULL
ASSIGN	4217:2	4217:6	8	dir = NULL
LVAL	4217:2	4217:2	9	dir
FIELD	4217:2	4217:2	10	dir
LEAF_NODE	4217:2	4217:2	11	dir
ASSIGN_OP	4217:5	4217:5	9	=
LEAF_NODE	4217:5	4217:5	10	=
RVAL	4217:6	4217:6	9	NULL
FIELD	4217:6	4217:6	10	NULL
LEAF_NODE	4217:6	4217:6	11	NULL
LEAF_NODE	4217:10	4217:10	7	;
LEAF_NODE	4218:1	4218:1	5	}
SELECTION	4219:1	4220:1	3	
KEYWORD	4219:1	4219:1	4	if
LEAF_NODE	4219:1	4219:1	5	if
LEAF_NODE	4219:4	4219:4	4	(
CONDITION	4219:5	4219:5	4	! TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
EXPR	4219:5	4219:5	5	! TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
UNARY_EXPR	4219:5	4219:6	6	! TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
UNARY_OPERATOR	4219:5	4219:5	7	!
LEAF_NODE	4219:5	4219:5	8	!
FUNCTION_CALL	4219:6	4219:44	7	TIFFFieldSet ( tif , FIELD_MAXSAMPLEVALUE )
CALLEE	4219:6	4219:6	8	TIFFFieldSet
LEAF_NODE	4219:6	4219:6	9	TIFFFieldSet
LEAF_NODE	4219:18	4219:18	8	(
ARGUMENT	4219:19	4219:19	8	tif
FIELD	4219:19	4219:19	9	tif
LEAF_NODE	4219:19	4219:19	10	tif
LEAF_NODE	4219:22	4219:22	8	,
ARGUMENT	4219:24	4219:24	8	FIELD_MAXSAMPLEVALUE
FIELD	4219:24	4219:24	9	FIELD_MAXSAMPLEVALUE
LEAF_NODE	4219:24	4219:24	10	FIELD_MAXSAMPLEVALUE
LEAF_NODE	4219:44	4219:44	8	)
LEAF_NODE	4219:45	4219:45	4	)
STATEMENTS	4220:1	4225:1	4	
LEAF_NODE	4220:1	4220:1	5	{
STATEMENTS	4221:2	4223:2	5	
SELECTION	4221:2	4222:3	6	
KEYWORD	4221:2	4221:2	7	if
LEAF_NODE	4221:2	4221:2	8	if
LEAF_NODE	4221:5	4221:5	7	(
CONDITION	4221:6	4221:6	7	tif -> tif_dir . td_bitspersample >= 16
EXPR	4221:6	4221:37	8	tif -> tif_dir . td_bitspersample >= 16
FIELD	4221:6	4221:19	9	tif -> tif_dir . td_bitspersample
LEAF_NODE	4221:6	4221:6	10	tif
LEAF_NODE	4221:9	4221:9	10	->
LEAF_NODE	4221:11	4221:11	10	tif_dir
LEAF_NODE	4221:18	4221:18	10	.
LEAF_NODE	4221:19	4221:19	10	td_bitspersample
REL_OPERATOR	4221:35	4221:35	9	>=
LEAF_NODE	4221:35	4221:35	10	>=
FIELD	4221:37	4221:37	9	16
LEAF_NODE	4221:37	4221:37	10	16
LEAF_NODE	4221:39	4221:39	7	)
STATEMENTS	4222:3	4222:3	7	
EXPR_STATEMENT	4222:3	4222:40	8	tif -> tif_dir . td_maxsamplevalue = 0xFFFF ;
EXPR	4222:3	4222:3	9	tif -> tif_dir . td_maxsamplevalue = 0xFFFF
ASSIGN	4222:3	4222:34	10	tif -> tif_dir . td_maxsamplevalue = 0xFFFF
LVAL	4222:3	4222:3	11	tif -> tif_dir . td_maxsamplevalue
FIELD	4222:3	4222:16	12	tif -> tif_dir . td_maxsamplevalue
LEAF_NODE	4222:3	4222:3	13	tif
LEAF_NODE	4222:6	4222:6	13	->
LEAF_NODE	4222:8	4222:8	13	tif_dir
LEAF_NODE	4222:15	4222:15	13	.
LEAF_NODE	4222:16	4222:16	13	td_maxsamplevalue
ASSIGN_OP	4222:33	4222:33	11	=
LEAF_NODE	4222:33	4222:33	12	=
RVAL	4222:34	4222:34	11	0xFFFF
FIELD	4222:34	4222:34	12	0xFFFF
LEAF_NODE	4222:34	4222:34	13	0xFFFF
LEAF_NODE	4222:40	4222:40	9	;
SELECTION	4223:2	4224:3	6	
KEYWORD	4223:2	4223:2	7	else
LEAF_NODE	4223:2	4223:2	8	else
STATEMENTS	4224:3	4224:3	7	
EXPR_STATEMENT	4224:3	4224:83	8	tif -> tif_dir . td_maxsamplevalue = ( uint16 ) ( ( 1L << tif -> tif_dir . td_bitspersample ) - 1 ) ;
EXPR	4224:3	4224:3	9	tif -> tif_dir . td_maxsamplevalue = ( uint16 ) ( ( 1L << tif -> tif_dir . td_bitspersample ) - 1 )
ASSIGN	4224:3	4224:36	10	tif -> tif_dir . td_maxsamplevalue = ( uint16 ) ( ( 1L << tif -> tif_dir . td_bitspersample ) - 1 )
LVAL	4224:3	4224:3	11	tif -> tif_dir . td_maxsamplevalue
FIELD	4224:3	4224:16	12	tif -> tif_dir . td_maxsamplevalue
LEAF_NODE	4224:3	4224:3	13	tif
LEAF_NODE	4224:6	4224:6	13	->
LEAF_NODE	4224:8	4224:8	13	tif_dir
LEAF_NODE	4224:15	4224:15	13	.
LEAF_NODE	4224:16	4224:16	13	td_maxsamplevalue
ASSIGN_OP	4224:34	4224:34	11	=
LEAF_NODE	4224:34	4224:34	12	=
RVAL	4224:36	4224:82	11	( uint16 ) ( ( 1L << tif -> tif_dir . td_bitspersample ) - 1 )
LEAF_NODE	4224:36	4224:36	12	(
TYPE_NAME	4224:37	4224:37	12	uint16
LEAF_NODE	4224:37	4224:37	13	uint16
LEAF_NODE	4224:43	4224:43	12	)
LEAF_NODE	4224:44	4224:44	12	(
LEAF_NODE	4224:45	4224:45	12	(
FIELD	4224:46	4224:46	12	1L
LEAF_NODE	4224:46	4224:46	13	1L
LEAF_NODE	4224:48	4224:48	12	<<
FIELD	4224:50	4224:63	12	tif -> tif_dir . td_bitspersample
LEAF_NODE	4224:50	4224:50	13	tif
LEAF_NODE	4224:53	4224:53	13	->
LEAF_NODE	4224:55	4224:55	13	tif_dir
LEAF_NODE	4224:62	4224:62	13	.
LEAF_NODE	4224:63	4224:63	13	td_bitspersample
LEAF_NODE	4224:79	4224:79	12	)
LEAF_NODE	4224:80	4224:80	12	-
FIELD	4224:81	4224:81	12	1
LEAF_NODE	4224:81	4224:81	13	1
LEAF_NODE	4224:82	4224:82	12	)
LEAF_NODE	4224:83	4224:83	9	;
LEAF_NODE	4225:1	4225:1	5	}
SELECTION	4233:1	4233:76	3	
KEYWORD	4233:1	4233:1	4	if
LEAF_NODE	4233:1	4233:1	5	if
LEAF_NODE	4233:4	4233:4	4	(
CONDITION	4233:5	4233:5	4	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && tif -> tif_dir . td_nstrips > 1
EXPR	4233:5	4233:5	5	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && tif -> tif_dir . td_nstrips > 1
AND	4233:5	4233:47	6	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && tif -> tif_dir . td_nstrips > 1
EXPR	4233:5	4233:5	7	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_EXPR	4233:5	4233:42	8	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_OPERATOR	4233:5	4233:5	9	!
LEAF_NODE	4233:5	4233:5	10	!
LEAF_NODE	4233:6	4233:6	9	(
FIELD	4233:7	4233:12	9	tif -> tif_flags
LEAF_NODE	4233:7	4233:7	10	tif
LEAF_NODE	4233:10	4233:10	10	->
LEAF_NODE	4233:12	4233:12	10	tif_flags
LEAF_NODE	4233:21	4233:21	9	&
FIELD	4233:22	4233:22	9	TIFF_DEFERSTRILELOAD
LEAF_NODE	4233:22	4233:22	10	TIFF_DEFERSTRILELOAD
LEAF_NODE	4233:42	4233:42	9	)
LEAF_NODE	4233:44	4233:44	7	&&
EXPR	4233:47	4233:73	7	tif -> tif_dir . td_nstrips > 1
FIELD	4233:47	4233:60	8	tif -> tif_dir . td_nstrips
LEAF_NODE	4233:47	4233:47	9	tif
LEAF_NODE	4233:50	4233:50	9	->
LEAF_NODE	4233:52	4233:52	9	tif_dir
LEAF_NODE	4233:59	4233:59	9	.
LEAF_NODE	4233:60	4233:60	9	td_nstrips
REL_OPERATOR	4233:71	4233:71	8	>
LEAF_NODE	4233:71	4233:71	9	>
FIELD	4233:73	4233:73	8	1
LEAF_NODE	4233:73	4233:73	9	1
LEAF_NODE	4233:74	4233:74	4	)
STATEMENTS	4233:76	4244:1	4	
LEAF_NODE	4233:76	4233:76	5	{
STATEMENTS	4234:2	4237:2	5	
SIMPLE_DECL	4234:2	4234:14	6	uint32 strip ;
VAR_DECL	4234:2	4234:9	7	uint32 strip
TYPE	4234:2	4234:2	8	uint32
TYPE_NAME	4234:2	4234:2	9	uint32
LEAF_NODE	4234:2	4234:2	10	uint32
NAME	4234:9	4234:9	8	strip
LEAF_NODE	4234:9	4234:9	9	strip
LEAF_NODE	4234:14	4234:14	7	;
EXPR_STATEMENT	4236:2	4236:42	6	tif -> tif_dir . td_stripbytecountsorted = 1 ;
EXPR	4236:2	4236:2	7	tif -> tif_dir . td_stripbytecountsorted = 1
ASSIGN	4236:2	4236:41	8	tif -> tif_dir . td_stripbytecountsorted = 1
LVAL	4236:2	4236:2	9	tif -> tif_dir . td_stripbytecountsorted
FIELD	4236:2	4236:15	10	tif -> tif_dir . td_stripbytecountsorted
LEAF_NODE	4236:2	4236:2	11	tif
LEAF_NODE	4236:5	4236:5	11	->
LEAF_NODE	4236:7	4236:7	11	tif_dir
LEAF_NODE	4236:14	4236:14	11	.
LEAF_NODE	4236:15	4236:15	11	td_stripbytecountsorted
ASSIGN_OP	4236:39	4236:39	9	=
LEAF_NODE	4236:39	4236:39	10	=
RVAL	4236:41	4236:41	9	1
FIELD	4236:41	4236:41	10	1
LEAF_NODE	4236:41	4236:41	11	1
LEAF_NODE	4236:42	4236:42	7	;
ITERATION	4237:2	4237:60	6	
KEYWORD	4237:2	4237:2	7	for
LEAF_NODE	4237:2	4237:2	8	for
LEAF_NODE	4237:6	4237:6	7	(
FOR_INIT	4237:7	4237:16	7	strip = 1 ;
EXPR	4237:7	4237:7	8	strip = 1
ASSIGN	4237:7	4237:15	9	strip = 1
LVAL	4237:7	4237:7	10	strip
FIELD	4237:7	4237:7	11	strip
LEAF_NODE	4237:7	4237:7	12	strip
ASSIGN_OP	4237:13	4237:13	10	=
LEAF_NODE	4237:13	4237:13	11	=
RVAL	4237:15	4237:15	10	1
FIELD	4237:15	4237:15	11	1
LEAF_NODE	4237:15	4237:15	12	1
LEAF_NODE	4237:16	4237:16	8	;
CONDITION	4237:18	4237:18	7	strip < tif -> tif_dir . td_nstrips
EXPR	4237:18	4237:26	8	strip < tif -> tif_dir . td_nstrips
FIELD	4237:18	4237:18	9	strip
LEAF_NODE	4237:18	4237:18	10	strip
REL_OPERATOR	4237:24	4237:24	9	<
LEAF_NODE	4237:24	4237:24	10	<
FIELD	4237:26	4237:39	9	tif -> tif_dir . td_nstrips
LEAF_NODE	4237:26	4237:26	10	tif
LEAF_NODE	4237:29	4237:29	10	->
LEAF_NODE	4237:31	4237:31	10	tif_dir
LEAF_NODE	4237:38	4237:38	10	.
LEAF_NODE	4237:39	4237:39	10	td_nstrips
LEAF_NODE	4237:49	4237:49	7	;
FOR_EXPR	4237:51	4237:51	7	strip ++
EXPR	4237:51	4237:51	8	strip ++
FIELD	4237:51	4237:56	9	strip ++
LEAF_NODE	4237:51	4237:51	10	strip
LEAF_NODE	4237:56	4237:56	10	++
LEAF_NODE	4237:58	4237:58	7	)
STATEMENTS	4237:60	4243:2	7	
LEAF_NODE	4237:60	4237:60	8	{
STATEMENTS	4238:3	4238:3	8	
SELECTION	4238:3	4239:40	9	
KEYWORD	4238:3	4238:3	10	if
LEAF_NODE	4238:3	4238:3	11	if
LEAF_NODE	4238:6	4238:6	10	(
CONDITION	4238:7	4238:7	10	TIFFGetStrileOffset ( tif , strip - 1 ) > TIFFGetStrileOffset ( tif , strip )
EXPR	4238:7	4239:7	11	TIFFGetStrileOffset ( tif , strip - 1 ) > TIFFGetStrileOffset ( tif , strip )
FUNCTION_CALL	4238:7	4238:41	12	TIFFGetStrileOffset ( tif , strip - 1 )
CALLEE	4238:7	4238:7	13	TIFFGetStrileOffset
LEAF_NODE	4238:7	4238:7	14	TIFFGetStrileOffset
LEAF_NODE	4238:26	4238:26	13	(
ARGUMENT	4238:27	4238:27	13	tif
FIELD	4238:27	4238:27	14	tif
LEAF_NODE	4238:27	4238:27	15	tif
LEAF_NODE	4238:30	4238:30	13	,
ARGUMENT	4238:32	4238:40	13	strip - 1
FIELD	4238:32	4238:32	14	strip
LEAF_NODE	4238:32	4238:32	15	strip
LEAF_NODE	4238:38	4238:38	14	-
FIELD	4238:40	4238:40	14	1
LEAF_NODE	4238:40	4238:40	15	1
LEAF_NODE	4238:41	4238:41	13	)
REL_OPERATOR	4238:43	4238:43	12	>
LEAF_NODE	4238:43	4238:43	13	>
FUNCTION_CALL	4239:7	4239:37	12	TIFFGetStrileOffset ( tif , strip )
CALLEE	4239:7	4239:7	13	TIFFGetStrileOffset
LEAF_NODE	4239:7	4239:7	14	TIFFGetStrileOffset
LEAF_NODE	4239:26	4239:26	13	(
ARGUMENT	4239:27	4239:27	13	tif
FIELD	4239:27	4239:27	14	tif
LEAF_NODE	4239:27	4239:27	15	tif
LEAF_NODE	4239:30	4239:30	13	,
ARGUMENT	4239:32	4239:32	13	strip
FIELD	4239:32	4239:32	14	strip
LEAF_NODE	4239:32	4239:32	15	strip
LEAF_NODE	4239:37	4239:37	13	)
LEAF_NODE	4239:38	4239:38	10	)
STATEMENTS	4239:40	4242:3	10	
LEAF_NODE	4239:40	4239:40	11	{
STATEMENTS	4240:4	4241:4	11	
EXPR_STATEMENT	4240:4	4240:44	12	tif -> tif_dir . td_stripbytecountsorted = 0 ;
EXPR	4240:4	4240:4	13	tif -> tif_dir . td_stripbytecountsorted = 0
ASSIGN	4240:4	4240:43	14	tif -> tif_dir . td_stripbytecountsorted = 0
LVAL	4240:4	4240:4	15	tif -> tif_dir . td_stripbytecountsorted
FIELD	4240:4	4240:17	16	tif -> tif_dir . td_stripbytecountsorted
LEAF_NODE	4240:4	4240:4	17	tif
LEAF_NODE	4240:7	4240:7	17	->
LEAF_NODE	4240:9	4240:9	17	tif_dir
LEAF_NODE	4240:16	4240:16	17	.
LEAF_NODE	4240:17	4240:17	17	td_stripbytecountsorted
ASSIGN_OP	4240:41	4240:41	15	=
LEAF_NODE	4240:41	4240:41	16	=
RVAL	4240:43	4240:43	15	0
FIELD	4240:43	4240:43	16	0
LEAF_NODE	4240:43	4240:43	17	0
LEAF_NODE	4240:44	4240:44	13	;
JUMP_STATEMENT	4241:4	4241:9	12	break DESTINATION ;
KEYWORD	4241:4	4241:4	13	break
LEAF_NODE	4241:4	4241:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	4241:9	4241:9	13	;
LEAF_NODE	4242:3	4242:3	11	}
LEAF_NODE	4243:2	4243:2	8	}
LEAF_NODE	4244:1	4244:1	5	}
EXPR_STATEMENT	4250:1	4250:27	3	( * tif -> tif_fixuptags ) ( tif ) ;
EXPR	4250:1	4250:1	4	( * tif -> tif_fixuptags ) ( tif )
FUNCTION_CALL	4250:1	4250:26	5	( * tif -> tif_fixuptags ) ( tif )
CALLEE	4250:1	4250:21	6	( * tif -> tif_fixuptags )
LEAF_NODE	4250:1	4250:1	7	(
UNARY_EXPR	4250:2	4250:3	7	* tif -> tif_fixuptags
UNARY_OPERATOR	4250:2	4250:2	8	*
LEAF_NODE	4250:2	4250:2	9	*
FIELD	4250:3	4250:8	8	tif -> tif_fixuptags
LEAF_NODE	4250:3	4250:3	9	tif
LEAF_NODE	4250:6	4250:6	9	->
LEAF_NODE	4250:8	4250:8	9	tif_fixuptags
LEAF_NODE	4250:21	4250:21	7	)
LEAF_NODE	4250:22	4250:22	6	(
ARGUMENT	4250:23	4250:23	6	tif
FIELD	4250:23	4250:23	7	tif
LEAF_NODE	4250:23	4250:23	8	tif
LEAF_NODE	4250:26	4250:26	6	)
LEAF_NODE	4250:27	4250:27	4	;
SELECTION	4261:1	4265:8	3	
KEYWORD	4261:1	4261:1	4	if
LEAF_NODE	4261:1	4261:1	5	if
LEAF_NODE	4261:4	4261:4	4	(
CONDITION	4261:5	4261:5	4	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_nstrips == 1 ) && ( tif -> tif_dir . td_compression == COMPRESSION_NONE ) && ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
EXPR	4261:5	4261:5	5	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_nstrips == 1 ) && ( tif -> tif_dir . td_compression == COMPRESSION_NONE ) && ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
AND	4261:5	4262:5	6	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) && ( tif -> tif_dir . td_nstrips == 1 ) && ( tif -> tif_dir . td_compression == COMPRESSION_NONE ) && ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
EXPR	4261:5	4261:55	7	( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG )
LEAF_NODE	4261:5	4261:5	8	(
FIELD	4261:6	4261:19	8	tif -> tif_dir . td_planarconfig
LEAF_NODE	4261:6	4261:6	9	tif
LEAF_NODE	4261:9	4261:9	9	->
LEAF_NODE	4261:11	4261:11	9	tif_dir
LEAF_NODE	4261:18	4261:18	9	.
LEAF_NODE	4261:19	4261:19	9	td_planarconfig
EQ_OPERATOR	4261:34	4261:34	8	==
LEAF_NODE	4261:34	4261:34	9	==
FIELD	4261:36	4261:36	8	PLANARCONFIG_CONTIG
LEAF_NODE	4261:36	4261:36	9	PLANARCONFIG_CONTIG
LEAF_NODE	4261:55	4261:55	8	)
LEAF_NODE	4261:56	4261:56	7	&&
EXPR	4262:5	4262:5	7	( tif -> tif_dir . td_nstrips == 1 ) && ( tif -> tif_dir . td_compression == COMPRESSION_NONE ) && ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
AND	4262:5	4263:5	8	( tif -> tif_dir . td_nstrips == 1 ) && ( tif -> tif_dir . td_compression == COMPRESSION_NONE ) && ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
EXPR	4262:5	4262:32	9	( tif -> tif_dir . td_nstrips == 1 )
LEAF_NODE	4262:5	4262:5	10	(
FIELD	4262:6	4262:19	10	tif -> tif_dir . td_nstrips
LEAF_NODE	4262:6	4262:6	11	tif
LEAF_NODE	4262:9	4262:9	11	->
LEAF_NODE	4262:11	4262:11	11	tif_dir
LEAF_NODE	4262:18	4262:18	11	.
LEAF_NODE	4262:19	4262:19	11	td_nstrips
EQ_OPERATOR	4262:29	4262:29	10	==
LEAF_NODE	4262:29	4262:29	11	==
FIELD	4262:31	4262:31	10	1
LEAF_NODE	4262:31	4262:31	11	1
LEAF_NODE	4262:32	4262:32	10	)
LEAF_NODE	4262:33	4262:33	9	&&
EXPR	4263:5	4263:5	9	( tif -> tif_dir . td_compression == COMPRESSION_NONE ) && ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
AND	4263:5	4264:5	10	( tif -> tif_dir . td_compression == COMPRESSION_NONE ) && ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
EXPR	4263:5	4263:51	11	( tif -> tif_dir . td_compression == COMPRESSION_NONE )
LEAF_NODE	4263:5	4263:5	12	(
FIELD	4263:6	4263:19	12	tif -> tif_dir . td_compression
LEAF_NODE	4263:6	4263:6	13	tif
LEAF_NODE	4263:9	4263:9	13	->
LEAF_NODE	4263:11	4263:11	13	tif_dir
LEAF_NODE	4263:18	4263:18	13	.
LEAF_NODE	4263:19	4263:19	13	td_compression
EQ_OPERATOR	4263:33	4263:33	12	==
LEAF_NODE	4263:33	4263:33	13	==
FIELD	4263:35	4263:35	12	COMPRESSION_NONE
LEAF_NODE	4263:35	4263:35	13	COMPRESSION_NONE
LEAF_NODE	4263:51	4263:51	12	)
LEAF_NODE	4263:52	4263:52	11	&&
EXPR	4264:5	4264:68	11	( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
LEAF_NODE	4264:5	4264:5	12	(
LEAF_NODE	4264:6	4264:6	12	(
FIELD	4264:7	4264:12	12	tif -> tif_flags
LEAF_NODE	4264:7	4264:7	13	tif
LEAF_NODE	4264:10	4264:10	13	->
LEAF_NODE	4264:12	4264:12	13	tif_flags
LEAF_NODE	4264:21	4264:21	12	&
LEAF_NODE	4264:22	4264:22	12	(
BIT_OR	4264:23	4264:38	12	TIFF_STRIPCHOP | TIFF_ISTILED
BIT_OR_ELEM	4264:23	4264:23	13	TIFF_STRIPCHOP
FIELD	4264:23	4264:23	14	TIFF_STRIPCHOP
LEAF_NODE	4264:23	4264:23	15	TIFF_STRIPCHOP
LEAF_NODE	4264:37	4264:37	13	|
BIT_OR_ELEM	4264:38	4264:38	13	TIFF_ISTILED
FIELD	4264:38	4264:38	14	TIFF_ISTILED
LEAF_NODE	4264:38	4264:38	15	TIFF_ISTILED
LEAF_NODE	4264:50	4264:50	12	)
LEAF_NODE	4264:51	4264:51	12	)
EQ_OPERATOR	4264:52	4264:52	12	==
LEAF_NODE	4264:52	4264:52	13	==
FIELD	4264:54	4264:54	12	TIFF_STRIPCHOP
LEAF_NODE	4264:54	4264:54	13	TIFF_STRIPCHOP
LEAF_NODE	4264:68	4264:68	12	)
LEAF_NODE	4264:69	4264:69	4	)
STATEMENTS	4265:8	4267:8	4	
LEAF_NODE	4265:8	4265:8	5	{
STATEMENTS	4266:12	4266:12	5	
EXPR_STATEMENT	4266:12	4266:46	6	ChopUpSingleUncompressedStrip ( tif ) ;
EXPR	4266:12	4266:12	7	ChopUpSingleUncompressedStrip ( tif )
FUNCTION_CALL	4266:12	4266:45	8	ChopUpSingleUncompressedStrip ( tif )
CALLEE	4266:12	4266:12	9	ChopUpSingleUncompressedStrip
LEAF_NODE	4266:12	4266:12	10	ChopUpSingleUncompressedStrip
LEAF_NODE	4266:41	4266:41	9	(
ARGUMENT	4266:42	4266:42	9	tif
FIELD	4266:42	4266:42	10	tif
LEAF_NODE	4266:42	4266:42	11	tif
LEAF_NODE	4266:45	4266:45	9	)
LEAF_NODE	4266:46	4266:46	7	;
LEAF_NODE	4267:8	4267:8	5	}
SELECTION	4272:8	4276:8	3	
KEYWORD	4272:8	4272:8	4	if
LEAF_NODE	4272:8	4272:8	5	if
LEAF_NODE	4272:10	4272:10	4	(
CONDITION	4272:12	4272:12	4	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_compression == COMPRESSION_NONE && ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP && TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
EXPR	4272:12	4272:12	5	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_compression == COMPRESSION_NONE && ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP && TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
AND	4272:12	4273:12	6	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG && tif -> tif_dir . td_compression == COMPRESSION_NONE && ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP && TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
EXPR	4272:12	4272:44	7	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG
FIELD	4272:12	4272:25	8	tif -> tif_dir . td_planarconfig
LEAF_NODE	4272:12	4272:12	9	tif
LEAF_NODE	4272:15	4272:15	9	->
LEAF_NODE	4272:17	4272:17	9	tif_dir
LEAF_NODE	4272:24	4272:24	9	.
LEAF_NODE	4272:25	4272:25	9	td_planarconfig
EQ_OPERATOR	4272:41	4272:41	8	==
LEAF_NODE	4272:41	4272:41	9	==
FIELD	4272:44	4272:44	8	PLANARCONFIG_CONTIG
LEAF_NODE	4272:44	4272:44	9	PLANARCONFIG_CONTIG
LEAF_NODE	4272:64	4272:64	7	&&
EXPR	4273:12	4273:12	7	tif -> tif_dir . td_compression == COMPRESSION_NONE && ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP && TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
AND	4273:12	4274:12	8	tif -> tif_dir . td_compression == COMPRESSION_NONE && ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP && TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
EXPR	4273:12	4273:43	9	tif -> tif_dir . td_compression == COMPRESSION_NONE
FIELD	4273:12	4273:25	10	tif -> tif_dir . td_compression
LEAF_NODE	4273:12	4273:12	11	tif
LEAF_NODE	4273:15	4273:15	11	->
LEAF_NODE	4273:17	4273:17	11	tif_dir
LEAF_NODE	4273:24	4273:24	11	.
LEAF_NODE	4273:25	4273:25	11	td_compression
EQ_OPERATOR	4273:40	4273:40	10	==
LEAF_NODE	4273:40	4273:40	11	==
FIELD	4273:43	4273:43	10	COMPRESSION_NONE
LEAF_NODE	4273:43	4273:43	11	COMPRESSION_NONE
LEAF_NODE	4273:60	4273:60	9	&&
EXPR	4274:12	4274:12	9	( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP && TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
AND	4274:12	4275:12	10	( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP && TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
EXPR	4274:12	4274:62	11	( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP
LEAF_NODE	4274:12	4274:12	12	(
FIELD	4274:13	4274:18	12	tif -> tif_flags
LEAF_NODE	4274:13	4274:13	13	tif
LEAF_NODE	4274:16	4274:16	13	->
LEAF_NODE	4274:18	4274:18	13	tif_flags
LEAF_NODE	4274:27	4274:27	12	&
LEAF_NODE	4274:28	4274:28	12	(
BIT_OR	4274:29	4274:44	12	TIFF_STRIPCHOP | TIFF_ISTILED
BIT_OR_ELEM	4274:29	4274:29	13	TIFF_STRIPCHOP
FIELD	4274:29	4274:29	14	TIFF_STRIPCHOP
LEAF_NODE	4274:29	4274:29	15	TIFF_STRIPCHOP
LEAF_NODE	4274:43	4274:43	13	|
BIT_OR_ELEM	4274:44	4274:44	13	TIFF_ISTILED
FIELD	4274:44	4274:44	14	TIFF_ISTILED
LEAF_NODE	4274:44	4274:44	15	TIFF_ISTILED
LEAF_NODE	4274:56	4274:56	12	)
LEAF_NODE	4274:57	4274:57	12	)
EQ_OPERATOR	4274:59	4274:59	12	==
LEAF_NODE	4274:59	4274:59	13	==
FIELD	4274:62	4274:62	12	TIFF_STRIPCHOP
LEAF_NODE	4274:62	4274:62	13	TIFF_STRIPCHOP
LEAF_NODE	4274:77	4274:77	11	&&
EXPR	4275:12	4275:35	11	TIFFStripSize64 ( tif ) > 0x7FFFFFFFUL
FUNCTION_CALL	4275:12	4275:31	12	TIFFStripSize64 ( tif )
CALLEE	4275:12	4275:12	13	TIFFStripSize64
LEAF_NODE	4275:12	4275:12	14	TIFFStripSize64
LEAF_NODE	4275:27	4275:27	13	(
ARGUMENT	4275:28	4275:28	13	tif
FIELD	4275:28	4275:28	14	tif
LEAF_NODE	4275:28	4275:28	15	tif
LEAF_NODE	4275:31	4275:31	13	)
REL_OPERATOR	4275:33	4275:33	12	>
LEAF_NODE	4275:33	4275:33	13	>
FIELD	4275:35	4275:35	12	0x7FFFFFFFUL
LEAF_NODE	4275:35	4275:35	13	0x7FFFFFFFUL
LEAF_NODE	4275:48	4275:48	4	)
STATEMENTS	4276:8	4278:8	4	
LEAF_NODE	4276:8	4276:8	5	{
STATEMENTS	4277:12	4277:12	5	
EXPR_STATEMENT	4277:12	4277:45	6	TryChopUpUncompressedBigTiff ( tif ) ;
EXPR	4277:12	4277:12	7	TryChopUpUncompressedBigTiff ( tif )
FUNCTION_CALL	4277:12	4277:44	8	TryChopUpUncompressedBigTiff ( tif )
CALLEE	4277:12	4277:12	9	TryChopUpUncompressedBigTiff
LEAF_NODE	4277:12	4277:12	10	TryChopUpUncompressedBigTiff
LEAF_NODE	4277:40	4277:40	9	(
ARGUMENT	4277:41	4277:41	9	tif
FIELD	4277:41	4277:41	10	tif
LEAF_NODE	4277:41	4277:41	11	tif
LEAF_NODE	4277:44	4277:44	9	)
LEAF_NODE	4277:45	4277:45	7	;
LEAF_NODE	4278:8	4278:8	5	}
EXPR_STATEMENT	4283:1	4283:36	3	tif -> tif_flags &= ~TIFF_DIRTYDIRECT ;
EXPR	4283:1	4283:1	4	tif -> tif_flags &= ~TIFF_DIRTYDIRECT
ASSIGN	4283:1	4283:19	5	tif -> tif_flags &= ~TIFF_DIRTYDIRECT
LVAL	4283:1	4283:1	6	tif -> tif_flags
FIELD	4283:1	4283:6	7	tif -> tif_flags
LEAF_NODE	4283:1	4283:1	8	tif
LEAF_NODE	4283:4	4283:4	8	->
LEAF_NODE	4283:6	4283:6	8	tif_flags
ASSIGN_OP	4283:16	4283:16	6	&=
LEAF_NODE	4283:16	4283:16	7	&=
RVAL	4283:19	4283:19	6	~TIFF_DIRTYDIRECT
FIELD	4283:19	4283:19	7	~TIFF_DIRTYDIRECT
LEAF_NODE	4283:19	4283:19	8	~TIFF_DIRTYDIRECT
LEAF_NODE	4283:36	4283:36	4	;
EXPR_STATEMENT	4284:1	4284:35	3	tif -> tif_flags &= ~TIFF_DIRTYSTRIP ;
EXPR	4284:1	4284:1	4	tif -> tif_flags &= ~TIFF_DIRTYSTRIP
ASSIGN	4284:1	4284:19	5	tif -> tif_flags &= ~TIFF_DIRTYSTRIP
LVAL	4284:1	4284:1	6	tif -> tif_flags
FIELD	4284:1	4284:6	7	tif -> tif_flags
LEAF_NODE	4284:1	4284:1	8	tif
LEAF_NODE	4284:4	4284:4	8	->
LEAF_NODE	4284:6	4284:6	8	tif_flags
ASSIGN_OP	4284:16	4284:16	6	&=
LEAF_NODE	4284:16	4284:16	7	&=
RVAL	4284:19	4284:19	6	~TIFF_DIRTYSTRIP
FIELD	4284:19	4284:19	7	~TIFF_DIRTYSTRIP
LEAF_NODE	4284:19	4284:19	8	~TIFF_DIRTYSTRIP
LEAF_NODE	4284:35	4284:35	4	;
EXPR_STATEMENT	4289:1	4289:27	3	tif -> tif_row = ( uint32 ) - 1 ;
EXPR	4289:1	4289:1	4	tif -> tif_row = ( uint32 ) - 1
ASSIGN	4289:1	4289:16	5	tif -> tif_row = ( uint32 ) - 1
LVAL	4289:1	4289:1	6	tif -> tif_row
FIELD	4289:1	4289:6	7	tif -> tif_row
LEAF_NODE	4289:1	4289:1	8	tif
LEAF_NODE	4289:4	4289:4	8	->
LEAF_NODE	4289:6	4289:6	8	tif_row
ASSIGN_OP	4289:14	4289:14	6	=
LEAF_NODE	4289:14	4289:14	7	=
RVAL	4289:16	4289:25	6	( uint32 ) - 1
LEAF_NODE	4289:16	4289:16	7	(
TYPE_NAME	4289:17	4289:17	7	uint32
LEAF_NODE	4289:17	4289:17	8	uint32
LEAF_NODE	4289:23	4289:23	7	)
UNARY_EXPR	4289:25	4289:26	7	- 1
UNARY_OPERATOR	4289:25	4289:25	8	-
LEAF_NODE	4289:25	4289:25	9	-
FIELD	4289:26	4289:26	8	1
LEAF_NODE	4289:26	4289:26	9	1
LEAF_NODE	4289:27	4289:27	4	;
EXPR_STATEMENT	4290:1	4290:32	3	tif -> tif_curstrip = ( uint32 ) - 1 ;
EXPR	4290:1	4290:1	4	tif -> tif_curstrip = ( uint32 ) - 1
ASSIGN	4290:1	4290:21	5	tif -> tif_curstrip = ( uint32 ) - 1
LVAL	4290:1	4290:1	6	tif -> tif_curstrip
FIELD	4290:1	4290:6	7	tif -> tif_curstrip
LEAF_NODE	4290:1	4290:1	8	tif
LEAF_NODE	4290:4	4290:4	8	->
LEAF_NODE	4290:6	4290:6	8	tif_curstrip
ASSIGN_OP	4290:19	4290:19	6	=
LEAF_NODE	4290:19	4290:19	7	=
RVAL	4290:21	4290:30	6	( uint32 ) - 1
LEAF_NODE	4290:21	4290:21	7	(
TYPE_NAME	4290:22	4290:22	7	uint32
LEAF_NODE	4290:22	4290:22	8	uint32
LEAF_NODE	4290:28	4290:28	7	)
UNARY_EXPR	4290:30	4290:31	7	- 1
UNARY_OPERATOR	4290:30	4290:30	8	-
LEAF_NODE	4290:30	4290:30	9	-
FIELD	4290:31	4290:31	8	1
LEAF_NODE	4290:31	4290:31	9	1
LEAF_NODE	4290:32	4290:32	4	;
EXPR_STATEMENT	4291:1	4291:27	3	tif -> tif_col = ( uint32 ) - 1 ;
EXPR	4291:1	4291:1	4	tif -> tif_col = ( uint32 ) - 1
ASSIGN	4291:1	4291:16	5	tif -> tif_col = ( uint32 ) - 1
LVAL	4291:1	4291:1	6	tif -> tif_col
FIELD	4291:1	4291:6	7	tif -> tif_col
LEAF_NODE	4291:1	4291:1	8	tif
LEAF_NODE	4291:4	4291:4	8	->
LEAF_NODE	4291:6	4291:6	8	tif_col
ASSIGN_OP	4291:14	4291:14	6	=
LEAF_NODE	4291:14	4291:14	7	=
RVAL	4291:16	4291:25	6	( uint32 ) - 1
LEAF_NODE	4291:16	4291:16	7	(
TYPE_NAME	4291:17	4291:17	7	uint32
LEAF_NODE	4291:17	4291:17	8	uint32
LEAF_NODE	4291:23	4291:23	7	)
UNARY_EXPR	4291:25	4291:26	7	- 1
UNARY_OPERATOR	4291:25	4291:25	8	-
LEAF_NODE	4291:25	4291:25	9	-
FIELD	4291:26	4291:26	8	1
LEAF_NODE	4291:26	4291:26	9	1
LEAF_NODE	4291:27	4291:27	4	;
EXPR_STATEMENT	4292:1	4292:31	3	tif -> tif_curtile = ( uint32 ) - 1 ;
EXPR	4292:1	4292:1	4	tif -> tif_curtile = ( uint32 ) - 1
ASSIGN	4292:1	4292:20	5	tif -> tif_curtile = ( uint32 ) - 1
LVAL	4292:1	4292:1	6	tif -> tif_curtile
FIELD	4292:1	4292:6	7	tif -> tif_curtile
LEAF_NODE	4292:1	4292:1	8	tif
LEAF_NODE	4292:4	4292:4	8	->
LEAF_NODE	4292:6	4292:6	8	tif_curtile
ASSIGN_OP	4292:18	4292:18	6	=
LEAF_NODE	4292:18	4292:18	7	=
RVAL	4292:20	4292:29	6	( uint32 ) - 1
LEAF_NODE	4292:20	4292:20	7	(
TYPE_NAME	4292:21	4292:21	7	uint32
LEAF_NODE	4292:21	4292:21	8	uint32
LEAF_NODE	4292:27	4292:27	7	)
UNARY_EXPR	4292:29	4292:30	7	- 1
UNARY_OPERATOR	4292:29	4292:29	8	-
LEAF_NODE	4292:29	4292:29	9	-
FIELD	4292:30	4292:30	8	1
LEAF_NODE	4292:30	4292:30	9	1
LEAF_NODE	4292:31	4292:31	4	;
EXPR_STATEMENT	4293:1	4293:34	3	tif -> tif_tilesize = ( tmsize_t ) - 1 ;
EXPR	4293:1	4293:1	4	tif -> tif_tilesize = ( tmsize_t ) - 1
ASSIGN	4293:1	4293:21	5	tif -> tif_tilesize = ( tmsize_t ) - 1
LVAL	4293:1	4293:1	6	tif -> tif_tilesize
FIELD	4293:1	4293:6	7	tif -> tif_tilesize
LEAF_NODE	4293:1	4293:1	8	tif
LEAF_NODE	4293:4	4293:4	8	->
LEAF_NODE	4293:6	4293:6	8	tif_tilesize
ASSIGN_OP	4293:19	4293:19	6	=
LEAF_NODE	4293:19	4293:19	7	=
RVAL	4293:21	4293:32	6	( tmsize_t ) - 1
LEAF_NODE	4293:21	4293:21	7	(
TYPE_NAME	4293:22	4293:22	7	tmsize_t
LEAF_NODE	4293:22	4293:22	8	tmsize_t
LEAF_NODE	4293:30	4293:30	7	)
UNARY_EXPR	4293:32	4293:33	7	- 1
UNARY_OPERATOR	4293:32	4293:32	8	-
LEAF_NODE	4293:32	4293:32	9	-
FIELD	4293:33	4293:33	8	1
LEAF_NODE	4293:33	4293:33	9	1
LEAF_NODE	4293:34	4293:34	4	;
EXPR_STATEMENT	4295:1	4295:46	3	tif -> tif_scanlinesize = TIFFScanlineSize ( tif ) ;
EXPR	4295:1	4295:1	4	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
ASSIGN	4295:1	4295:25	5	tif -> tif_scanlinesize = TIFFScanlineSize ( tif )
LVAL	4295:1	4295:1	6	tif -> tif_scanlinesize
FIELD	4295:1	4295:6	7	tif -> tif_scanlinesize
LEAF_NODE	4295:1	4295:1	8	tif
LEAF_NODE	4295:4	4295:4	8	->
LEAF_NODE	4295:6	4295:6	8	tif_scanlinesize
ASSIGN_OP	4295:23	4295:23	6	=
LEAF_NODE	4295:23	4295:23	7	=
RVAL	4295:25	4295:25	6	TIFFScanlineSize ( tif )
FUNCTION_CALL	4295:25	4295:45	7	TIFFScanlineSize ( tif )
CALLEE	4295:25	4295:25	8	TIFFScanlineSize
LEAF_NODE	4295:25	4295:25	9	TIFFScanlineSize
LEAF_NODE	4295:41	4295:41	8	(
ARGUMENT	4295:42	4295:42	8	tif
FIELD	4295:42	4295:42	9	tif
LEAF_NODE	4295:42	4295:42	10	tif
LEAF_NODE	4295:45	4295:45	8	)
LEAF_NODE	4295:46	4295:46	4	;
SELECTION	4296:1	4296:29	3	
KEYWORD	4296:1	4296:1	4	if
LEAF_NODE	4296:1	4296:1	5	if
LEAF_NODE	4296:4	4296:4	4	(
CONDITION	4296:5	4296:5	4	! tif -> tif_scanlinesize
EXPR	4296:5	4296:5	5	! tif -> tif_scanlinesize
UNARY_EXPR	4296:5	4296:6	6	! tif -> tif_scanlinesize
UNARY_OPERATOR	4296:5	4296:5	7	!
LEAF_NODE	4296:5	4296:5	8	!
FIELD	4296:6	4296:11	7	tif -> tif_scanlinesize
LEAF_NODE	4296:6	4296:6	8	tif
LEAF_NODE	4296:9	4296:9	8	->
LEAF_NODE	4296:11	4296:11	8	tif_scanlinesize
LEAF_NODE	4296:27	4296:27	4	)
STATEMENTS	4296:29	4300:1	4	
LEAF_NODE	4296:29	4296:29	5	{
STATEMENTS	4297:2	4299:2	5	
EXPR_STATEMENT	4297:2	4298:41	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero scanline size" ) ;
EXPR	4297:2	4297:2	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero scanline size" )
FUNCTION_CALL	4297:2	4298:40	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero scanline size" )
CALLEE	4297:2	4297:2	9	TIFFErrorExt
LEAF_NODE	4297:2	4297:2	10	TIFFErrorExt
LEAF_NODE	4297:14	4297:14	9	(
ARGUMENT	4297:15	4297:15	9	tif -> tif_clientdata
FIELD	4297:15	4297:20	10	tif -> tif_clientdata
LEAF_NODE	4297:15	4297:15	11	tif
LEAF_NODE	4297:18	4297:18	11	->
LEAF_NODE	4297:20	4297:20	11	tif_clientdata
LEAF_NODE	4297:34	4297:34	9	,
ARGUMENT	4297:36	4297:36	9	module
FIELD	4297:36	4297:36	10	module
LEAF_NODE	4297:36	4297:36	11	module
LEAF_NODE	4297:42	4297:42	9	,
ARGUMENT	4298:6	4298:6	9	"Cannot handle zero scanline size"
FIELD	4298:6	4298:6	10	"Cannot handle zero scanline size"
LEAF_NODE	4298:6	4298:6	11	"Cannot handle zero scanline size"
LEAF_NODE	4298:40	4298:40	9	)
LEAF_NODE	4298:41	4298:41	7	;
JUMP_STATEMENT	4299:2	4299:12	6	return ( 0 ) ;
KEYWORD	4299:2	4299:2	7	return
LEAF_NODE	4299:2	4299:2	8	return
DESTINATION	4299:9	4299:9	7	( 0 )
EXPR	4299:9	4299:11	8	( 0 )
LEAF_NODE	4299:9	4299:9	9	(
FIELD	4299:10	4299:10	9	0
LEAF_NODE	4299:10	4299:10	10	0
LEAF_NODE	4299:11	4299:11	9	)
LEAF_NODE	4299:12	4299:12	7	;
LEAF_NODE	4300:1	4300:1	5	}
SELECTION	4302:1	4302:19	3	
KEYWORD	4302:1	4302:1	4	if
LEAF_NODE	4302:1	4302:1	5	if
LEAF_NODE	4302:4	4302:4	4	(
CONDITION	4302:5	4302:5	4	isTiled ( tif )
EXPR	4302:5	4302:5	5	isTiled ( tif )
FUNCTION_CALL	4302:5	4302:16	6	isTiled ( tif )
CALLEE	4302:5	4302:5	7	isTiled
LEAF_NODE	4302:5	4302:5	8	isTiled
LEAF_NODE	4302:12	4302:12	7	(
ARGUMENT	4302:13	4302:13	7	tif
FIELD	4302:13	4302:13	8	tif
LEAF_NODE	4302:13	4302:13	9	tif
LEAF_NODE	4302:16	4302:16	7	)
LEAF_NODE	4302:17	4302:17	4	)
STATEMENTS	4302:19	4309:1	4	
LEAF_NODE	4302:19	4302:19	5	{
STATEMENTS	4303:2	4304:2	5	
EXPR_STATEMENT	4303:2	4303:39	6	tif -> tif_tilesize = TIFFTileSize ( tif ) ;
EXPR	4303:2	4303:2	7	tif -> tif_tilesize = TIFFTileSize ( tif )
ASSIGN	4303:2	4303:22	8	tif -> tif_tilesize = TIFFTileSize ( tif )
LVAL	4303:2	4303:2	9	tif -> tif_tilesize
FIELD	4303:2	4303:7	10	tif -> tif_tilesize
LEAF_NODE	4303:2	4303:2	11	tif
LEAF_NODE	4303:5	4303:5	11	->
LEAF_NODE	4303:7	4303:7	11	tif_tilesize
ASSIGN_OP	4303:20	4303:20	9	=
LEAF_NODE	4303:20	4303:20	10	=
RVAL	4303:22	4303:22	9	TIFFTileSize ( tif )
FUNCTION_CALL	4303:22	4303:38	10	TIFFTileSize ( tif )
CALLEE	4303:22	4303:22	11	TIFFTileSize
LEAF_NODE	4303:22	4303:22	12	TIFFTileSize
LEAF_NODE	4303:34	4303:34	11	(
ARGUMENT	4303:35	4303:35	11	tif
FIELD	4303:35	4303:35	12	tif
LEAF_NODE	4303:35	4303:35	13	tif
LEAF_NODE	4303:38	4303:38	11	)
LEAF_NODE	4303:39	4303:39	7	;
SELECTION	4304:2	4304:26	6	
KEYWORD	4304:2	4304:2	7	if
LEAF_NODE	4304:2	4304:2	8	if
LEAF_NODE	4304:5	4304:5	7	(
CONDITION	4304:6	4304:6	7	! tif -> tif_tilesize
EXPR	4304:6	4304:6	8	! tif -> tif_tilesize
UNARY_EXPR	4304:6	4304:7	9	! tif -> tif_tilesize
UNARY_OPERATOR	4304:6	4304:6	10	!
LEAF_NODE	4304:6	4304:6	11	!
FIELD	4304:7	4304:12	10	tif -> tif_tilesize
LEAF_NODE	4304:7	4304:7	11	tif
LEAF_NODE	4304:10	4304:10	11	->
LEAF_NODE	4304:12	4304:12	11	tif_tilesize
LEAF_NODE	4304:24	4304:24	7	)
STATEMENTS	4304:26	4308:2	7	
LEAF_NODE	4304:26	4304:26	8	{
STATEMENTS	4305:3	4307:3	8	
EXPR_STATEMENT	4305:3	4306:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero tile size" ) ;
EXPR	4305:3	4305:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero tile size" )
FUNCTION_CALL	4305:3	4306:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero tile size" )
CALLEE	4305:3	4305:3	12	TIFFErrorExt
LEAF_NODE	4305:3	4305:3	13	TIFFErrorExt
LEAF_NODE	4305:15	4305:15	12	(
ARGUMENT	4305:16	4305:16	12	tif -> tif_clientdata
FIELD	4305:16	4305:21	13	tif -> tif_clientdata
LEAF_NODE	4305:16	4305:16	14	tif
LEAF_NODE	4305:19	4305:19	14	->
LEAF_NODE	4305:21	4305:21	14	tif_clientdata
LEAF_NODE	4305:35	4305:35	12	,
ARGUMENT	4305:37	4305:37	12	module
FIELD	4305:37	4305:37	13	module
LEAF_NODE	4305:37	4305:37	14	module
LEAF_NODE	4305:43	4305:43	12	,
ARGUMENT	4306:8	4306:8	12	"Cannot handle zero tile size"
FIELD	4306:8	4306:8	13	"Cannot handle zero tile size"
LEAF_NODE	4306:8	4306:8	14	"Cannot handle zero tile size"
LEAF_NODE	4306:38	4306:38	12	)
LEAF_NODE	4306:39	4306:39	10	;
JUMP_STATEMENT	4307:3	4307:13	9	return ( 0 ) ;
KEYWORD	4307:3	4307:3	10	return
LEAF_NODE	4307:3	4307:3	11	return
DESTINATION	4307:10	4307:10	10	( 0 )
EXPR	4307:10	4307:12	11	( 0 )
LEAF_NODE	4307:10	4307:10	12	(
FIELD	4307:11	4307:11	12	0
LEAF_NODE	4307:11	4307:11	13	0
LEAF_NODE	4307:12	4307:12	12	)
LEAF_NODE	4307:13	4307:13	10	;
LEAF_NODE	4308:2	4308:2	8	}
LEAF_NODE	4309:1	4309:1	5	}
SELECTION	4309:3	4309:8	3	
KEYWORD	4309:3	4309:3	4	else
LEAF_NODE	4309:3	4309:3	5	else
STATEMENTS	4309:8	4315:1	4	
LEAF_NODE	4309:8	4309:8	5	{
STATEMENTS	4310:2	4310:2	5	
SELECTION	4310:2	4310:27	6	
KEYWORD	4310:2	4310:2	7	if
LEAF_NODE	4310:2	4310:2	8	if
LEAF_NODE	4310:5	4310:5	7	(
CONDITION	4310:6	4310:6	7	! TIFFStripSize ( tif )
EXPR	4310:6	4310:6	8	! TIFFStripSize ( tif )
UNARY_EXPR	4310:6	4310:7	9	! TIFFStripSize ( tif )
UNARY_OPERATOR	4310:6	4310:6	10	!
LEAF_NODE	4310:6	4310:6	11	!
FUNCTION_CALL	4310:7	4310:24	10	TIFFStripSize ( tif )
CALLEE	4310:7	4310:7	11	TIFFStripSize
LEAF_NODE	4310:7	4310:7	12	TIFFStripSize
LEAF_NODE	4310:20	4310:20	11	(
ARGUMENT	4310:21	4310:21	11	tif
FIELD	4310:21	4310:21	12	tif
LEAF_NODE	4310:21	4310:21	13	tif
LEAF_NODE	4310:24	4310:24	11	)
LEAF_NODE	4310:25	4310:25	7	)
STATEMENTS	4310:27	4314:2	7	
LEAF_NODE	4310:27	4310:27	8	{
STATEMENTS	4311:3	4313:3	8	
EXPR_STATEMENT	4311:3	4312:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero strip size" ) ;
EXPR	4311:3	4311:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero strip size" )
FUNCTION_CALL	4311:3	4312:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot handle zero strip size" )
CALLEE	4311:3	4311:3	12	TIFFErrorExt
LEAF_NODE	4311:3	4311:3	13	TIFFErrorExt
LEAF_NODE	4311:15	4311:15	12	(
ARGUMENT	4311:16	4311:16	12	tif -> tif_clientdata
FIELD	4311:16	4311:21	13	tif -> tif_clientdata
LEAF_NODE	4311:16	4311:16	14	tif
LEAF_NODE	4311:19	4311:19	14	->
LEAF_NODE	4311:21	4311:21	14	tif_clientdata
LEAF_NODE	4311:35	4311:35	12	,
ARGUMENT	4311:37	4311:37	12	module
FIELD	4311:37	4311:37	13	module
LEAF_NODE	4311:37	4311:37	14	module
LEAF_NODE	4311:43	4311:43	12	,
ARGUMENT	4312:7	4312:7	12	"Cannot handle zero strip size"
FIELD	4312:7	4312:7	13	"Cannot handle zero strip size"
LEAF_NODE	4312:7	4312:7	14	"Cannot handle zero strip size"
LEAF_NODE	4312:38	4312:38	12	)
LEAF_NODE	4312:39	4312:39	10	;
JUMP_STATEMENT	4313:3	4313:13	9	return ( 0 ) ;
KEYWORD	4313:3	4313:3	10	return
LEAF_NODE	4313:3	4313:3	11	return
DESTINATION	4313:10	4313:10	10	( 0 )
EXPR	4313:10	4313:12	11	( 0 )
LEAF_NODE	4313:10	4313:10	12	(
FIELD	4313:11	4313:11	12	0
LEAF_NODE	4313:11	4313:11	13	0
LEAF_NODE	4313:12	4313:12	12	)
LEAF_NODE	4313:13	4313:13	10	;
LEAF_NODE	4314:2	4314:2	8	}
LEAF_NODE	4315:1	4315:1	5	}
JUMP_STATEMENT	4316:1	4316:11	3	return ( 1 ) ;
KEYWORD	4316:1	4316:1	4	return
LEAF_NODE	4316:1	4316:1	5	return
DESTINATION	4316:8	4316:8	4	( 1 )
EXPR	4316:8	4316:10	5	( 1 )
LEAF_NODE	4316:8	4316:8	6	(
FIELD	4316:9	4316:9	6	1
LEAF_NODE	4316:9	4316:9	7	1
LEAF_NODE	4316:10	4316:10	6	)
LEAF_NODE	4316:11	4316:11	4	;
LABEL	4317:0	4317:3	3	bad :
LEAF_NODE	4317:0	4317:0	4	bad
LEAF_NODE	4317:3	4317:3	4	:
SELECTION	4318:1	4319:2	3	
KEYWORD	4318:1	4318:1	4	if
LEAF_NODE	4318:1	4318:1	5	if
LEAF_NODE	4318:4	4318:4	4	(
CONDITION	4318:5	4318:5	4	dir
EXPR	4318:5	4318:5	5	dir
FIELD	4318:5	4318:5	6	dir
LEAF_NODE	4318:5	4318:5	7	dir
LEAF_NODE	4318:8	4318:8	4	)
STATEMENTS	4319:2	4319:2	4	
EXPR_STATEMENT	4319:2	4319:16	5	_TIFFfree ( dir ) ;
EXPR	4319:2	4319:2	6	_TIFFfree ( dir )
FUNCTION_CALL	4319:2	4319:15	7	_TIFFfree ( dir )
CALLEE	4319:2	4319:2	8	_TIFFfree
LEAF_NODE	4319:2	4319:2	9	_TIFFfree
LEAF_NODE	4319:11	4319:11	8	(
ARGUMENT	4319:12	4319:12	8	dir
FIELD	4319:12	4319:12	9	dir
LEAF_NODE	4319:12	4319:12	10	dir
LEAF_NODE	4319:15	4319:15	8	)
LEAF_NODE	4319:16	4319:16	6	;
JUMP_STATEMENT	4320:1	4320:11	3	return ( 0 ) ;
KEYWORD	4320:1	4320:1	4	return
LEAF_NODE	4320:1	4320:1	5	return
DESTINATION	4320:8	4320:8	4	( 0 )
EXPR	4320:8	4320:10	5	( 0 )
LEAF_NODE	4320:8	4320:8	6	(
FIELD	4320:9	4320:9	6	0
LEAF_NODE	4320:9	4320:9	7	0
LEAF_NODE	4320:10	4320:10	6	)
LEAF_NODE	4320:11	4320:11	4	;
LEAF_NODE	4321:0	4321:0	2	}
FUNCTION_DEF	4323:0	4341:0	1	
RETURN_TYPE	4323:0	4323:7	2	static void
LEAF_NODE	4323:0	4323:0	3	static
TYPE_NAME	4323:7	4323:7	3	void
LEAF_NODE	4323:7	4323:7	4	void
FUNCTION_NAME	4324:0	4324:0	2	TIFFReadDirectoryCheckOrder
LEAF_NODE	4324:0	4324:0	3	TIFFReadDirectoryCheckOrder
PARAMETER_LIST	4324:27	4324:73	2	( TIFF * tif , TIFFDirEntry * dir , uint16 dircount )
LEAF_NODE	4324:27	4324:27	3	(
PARAMETER_DECL	4324:28	4324:34	3	TIFF * tif
TYPE	4324:28	4324:32	4	TIFF *
TYPE_NAME	4324:28	4324:28	5	TIFF
LEAF_NODE	4324:28	4324:28	6	TIFF
POINTER	4324:32	4324:32	5	*
LEAF_NODE	4324:32	4324:32	6	*
NAME	4324:34	4324:34	4	tif
LEAF_NODE	4324:34	4324:34	5	tif
LEAF_NODE	4324:37	4324:37	3	,
PARAMETER_DECL	4324:39	4324:53	3	TIFFDirEntry * dir
TYPE	4324:39	4324:51	4	TIFFDirEntry *
TYPE_NAME	4324:39	4324:39	5	TIFFDirEntry
LEAF_NODE	4324:39	4324:39	6	TIFFDirEntry
POINTER	4324:51	4324:51	5	*
LEAF_NODE	4324:51	4324:51	6	*
NAME	4324:53	4324:53	4	dir
LEAF_NODE	4324:53	4324:53	5	dir
LEAF_NODE	4324:56	4324:56	3	,
PARAMETER_DECL	4324:58	4324:65	3	uint16 dircount
TYPE	4324:58	4324:58	4	uint16
TYPE_NAME	4324:58	4324:58	5	uint16
LEAF_NODE	4324:58	4324:58	6	uint16
NAME	4324:65	4324:65	4	dircount
LEAF_NODE	4324:65	4324:65	5	dircount
LEAF_NODE	4324:73	4324:73	3	)
LEAF_NODE	4325:0	4325:0	2	{
STATEMENTS	4326:1	4331:1	2	
LEAF_NODE	4326:1	4326:1	3	static
SIMPLE_DECL	4326:8	4326:59	3	const char [ ] module ; module = "TIFFReadDirectoryCheckOrder" ;
VAR_DECL	4326:8	4326:19	4	const char [ ] module ; module = "TIFFReadDirectoryCheckOrder"
TYPE	4326:8	4326:25	5	const char [ ]
TYPE_NAME	4326:8	4326:14	6	const char
LEAF_NODE	4326:8	4326:8	7	const
LEAF_NODE	4326:14	4326:14	7	char
TYPE_SUFFIX	4326:25	4326:26	6	[ ]
LEAF_NODE	4326:25	4326:25	7	[
LEAF_NODE	4326:26	4326:26	7	]
NAME	4326:19	4326:19	5	module
LEAF_NODE	4326:19	4326:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	4326:19	4326:19	5	module = "TIFFReadDirectoryCheckOrder"
ASSIGN	4326:19	4326:30	6	module = "TIFFReadDirectoryCheckOrder"
LVAL	4326:19	4326:19	7	module
NAME	4326:19	4326:19	8	module
LEAF_NODE	4326:19	4326:19	9	module
ASSIGN_OP	4326:28	4326:28	7	=
LEAF_NODE	4326:28	4326:28	8	=
RVAL	4326:30	4326:30	7	"TIFFReadDirectoryCheckOrder"
FIELD	4326:30	4326:30	8	"TIFFReadDirectoryCheckOrder"
LEAF_NODE	4326:30	4326:30	9	"TIFFReadDirectoryCheckOrder"
LEAF_NODE	4326:59	4326:59	4	;
SIMPLE_DECL	4327:1	4327:9	3	uint16 m ;
VAR_DECL	4327:1	4327:8	4	uint16 m
TYPE	4327:1	4327:1	5	uint16
TYPE_NAME	4327:1	4327:1	6	uint16
LEAF_NODE	4327:1	4327:1	7	uint16
NAME	4327:8	4327:8	5	m
LEAF_NODE	4327:8	4327:8	6	m
LEAF_NODE	4327:9	4327:9	4	;
SIMPLE_DECL	4328:1	4328:9	3	uint16 n ;
VAR_DECL	4328:1	4328:8	4	uint16 n
TYPE	4328:1	4328:1	5	uint16
TYPE_NAME	4328:1	4328:1	6	uint16
LEAF_NODE	4328:1	4328:1	7	uint16
NAME	4328:8	4328:8	5	n
LEAF_NODE	4328:8	4328:8	6	n
LEAF_NODE	4328:9	4328:9	4	;
SIMPLE_DECL	4329:1	4329:16	3	TIFFDirEntry * o ;
VAR_DECL	4329:1	4329:15	4	TIFFDirEntry * o
TYPE	4329:1	4329:13	5	TIFFDirEntry *
TYPE_NAME	4329:1	4329:1	6	TIFFDirEntry
LEAF_NODE	4329:1	4329:1	7	TIFFDirEntry
POINTER	4329:13	4329:13	6	*
LEAF_NODE	4329:13	4329:13	7	*
NAME	4329:15	4329:15	5	o
LEAF_NODE	4329:15	4329:15	6	o
LEAF_NODE	4329:16	4329:16	4	;
EXPR_STATEMENT	4330:1	4330:4	3	m = 0 ;
EXPR	4330:1	4330:1	4	m = 0
ASSIGN	4330:1	4330:3	5	m = 0
LVAL	4330:1	4330:1	6	m
FIELD	4330:1	4330:1	7	m
LEAF_NODE	4330:1	4330:1	8	m
ASSIGN_OP	4330:2	4330:2	6	=
LEAF_NODE	4330:2	4330:2	7	=
RVAL	4330:3	4330:3	6	0
FIELD	4330:3	4330:3	7	0
LEAF_NODE	4330:3	4330:3	8	0
LEAF_NODE	4330:4	4330:4	4	;
ITERATION	4331:1	4332:1	3	
KEYWORD	4331:1	4331:1	4	for
LEAF_NODE	4331:1	4331:1	5	for
LEAF_NODE	4331:5	4331:5	4	(
FOR_INIT	4331:6	4331:16	4	n = 0 , o = dir ;
EXPR	4331:6	4331:11	5	n = 0 , o = dir
ASSIGN	4331:6	4331:8	6	n = 0
LVAL	4331:6	4331:6	7	n
FIELD	4331:6	4331:6	8	n
LEAF_NODE	4331:6	4331:6	9	n
ASSIGN_OP	4331:7	4331:7	7	=
LEAF_NODE	4331:7	4331:7	8	=
RVAL	4331:8	4331:8	7	0
FIELD	4331:8	4331:8	8	0
LEAF_NODE	4331:8	4331:8	9	0
LEAF_NODE	4331:9	4331:9	6	,
ASSIGN	4331:11	4331:13	6	o = dir
LVAL	4331:11	4331:11	7	o
FIELD	4331:11	4331:11	8	o
LEAF_NODE	4331:11	4331:11	9	o
ASSIGN_OP	4331:12	4331:12	7	=
LEAF_NODE	4331:12	4331:12	8	=
RVAL	4331:13	4331:13	7	dir
FIELD	4331:13	4331:13	8	dir
LEAF_NODE	4331:13	4331:13	9	dir
LEAF_NODE	4331:16	4331:16	5	;
CONDITION	4331:18	4331:18	4	n < dircount
EXPR	4331:18	4331:20	5	n < dircount
FIELD	4331:18	4331:18	6	n
LEAF_NODE	4331:18	4331:18	7	n
REL_OPERATOR	4331:19	4331:19	6	<
LEAF_NODE	4331:19	4331:19	7	<
FIELD	4331:20	4331:20	6	dircount
LEAF_NODE	4331:20	4331:20	7	dircount
LEAF_NODE	4331:28	4331:28	4	;
FOR_EXPR	4331:30	4331:30	4	n ++ , o ++
EXPR	4331:30	4331:35	5	n ++ , o ++
FIELD	4331:30	4331:31	6	n ++
LEAF_NODE	4331:30	4331:30	7	n
LEAF_NODE	4331:31	4331:31	7	++
LEAF_NODE	4331:33	4331:33	6	,
FIELD	4331:35	4331:36	6	o ++
LEAF_NODE	4331:35	4331:35	7	o
LEAF_NODE	4331:36	4331:36	7	++
LEAF_NODE	4331:38	4331:38	4	)
STATEMENTS	4332:1	4340:1	4	
LEAF_NODE	4332:1	4332:1	5	{
STATEMENTS	4333:2	4339:2	5	
SELECTION	4333:2	4334:2	6	
KEYWORD	4333:2	4333:2	7	if
LEAF_NODE	4333:2	4333:2	8	if
LEAF_NODE	4333:5	4333:5	7	(
CONDITION	4333:6	4333:6	7	o -> tdir_tag < m
EXPR	4333:6	4333:18	8	o -> tdir_tag < m
FIELD	4333:6	4333:9	9	o -> tdir_tag
LEAF_NODE	4333:6	4333:6	10	o
LEAF_NODE	4333:7	4333:7	10	->
LEAF_NODE	4333:9	4333:9	10	tdir_tag
REL_OPERATOR	4333:17	4333:17	9	<
LEAF_NODE	4333:17	4333:17	10	<
FIELD	4333:18	4333:18	9	m
LEAF_NODE	4333:18	4333:18	10	m
LEAF_NODE	4333:19	4333:19	7	)
STATEMENTS	4334:2	4338:2	7	
LEAF_NODE	4334:2	4334:2	8	{
STATEMENTS	4335:3	4337:3	8	
EXPR_STATEMENT	4335:3	4336:72	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Invalid TIFF directory; tags are not sorted in ascending order" ) ;
EXPR	4335:3	4335:3	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Invalid TIFF directory; tags are not sorted in ascending order" )
FUNCTION_CALL	4335:3	4336:71	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Invalid TIFF directory; tags are not sorted in ascending order" )
CALLEE	4335:3	4335:3	12	TIFFWarningExt
LEAF_NODE	4335:3	4335:3	13	TIFFWarningExt
LEAF_NODE	4335:17	4335:17	12	(
ARGUMENT	4335:18	4335:18	12	tif -> tif_clientdata
FIELD	4335:18	4335:23	13	tif -> tif_clientdata
LEAF_NODE	4335:18	4335:18	14	tif
LEAF_NODE	4335:21	4335:21	14	->
LEAF_NODE	4335:23	4335:23	14	tif_clientdata
LEAF_NODE	4335:37	4335:37	12	,
ARGUMENT	4335:38	4335:38	12	module
FIELD	4335:38	4335:38	13	module
LEAF_NODE	4335:38	4335:38	14	module
LEAF_NODE	4335:44	4335:44	12	,
ARGUMENT	4336:7	4336:7	12	"Invalid TIFF directory; tags are not sorted in ascending order"
FIELD	4336:7	4336:7	13	"Invalid TIFF directory; tags are not sorted in ascending order"
LEAF_NODE	4336:7	4336:7	14	"Invalid TIFF directory; tags are not sorted in ascending order"
LEAF_NODE	4336:71	4336:71	12	)
LEAF_NODE	4336:72	4336:72	10	;
JUMP_STATEMENT	4337:3	4337:8	9	break DESTINATION ;
KEYWORD	4337:3	4337:3	10	break
LEAF_NODE	4337:3	4337:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	4337:8	4337:8	10	;
LEAF_NODE	4338:2	4338:2	8	}
EXPR_STATEMENT	4339:2	4339:17	6	m = o -> tdir_tag + 1 ;
EXPR	4339:2	4339:2	7	m = o -> tdir_tag + 1
ASSIGN	4339:2	4339:4	8	m = o -> tdir_tag + 1
LVAL	4339:2	4339:2	9	m
FIELD	4339:2	4339:2	10	m
LEAF_NODE	4339:2	4339:2	11	m
ASSIGN_OP	4339:3	4339:3	9	=
LEAF_NODE	4339:3	4339:3	10	=
RVAL	4339:4	4339:16	9	o -> tdir_tag + 1
FIELD	4339:4	4339:7	10	o -> tdir_tag
LEAF_NODE	4339:4	4339:4	11	o
LEAF_NODE	4339:5	4339:5	11	->
LEAF_NODE	4339:7	4339:7	11	tdir_tag
LEAF_NODE	4339:15	4339:15	10	+
FIELD	4339:16	4339:16	10	1
LEAF_NODE	4339:16	4339:16	11	1
LEAF_NODE	4339:17	4339:17	7	;
LEAF_NODE	4340:1	4340:1	5	}
LEAF_NODE	4341:0	4341:0	2	}
FUNCTION_DEF	4343:0	4355:0	1	
RETURN_TYPE	4343:0	4343:19	2	static TIFFDirEntry *
LEAF_NODE	4343:0	4343:0	3	static
TYPE_NAME	4343:7	4343:7	3	TIFFDirEntry
LEAF_NODE	4343:7	4343:7	4	TIFFDirEntry
LEAF_NODE	4343:19	4343:19	3	*
FUNCTION_NAME	4344:0	4344:0	2	TIFFReadDirectoryFindEntry
LEAF_NODE	4344:0	4344:0	3	TIFFReadDirectoryFindEntry
PARAMETER_LIST	4344:26	4344:86	2	( TIFF * tif , TIFFDirEntry * dir , uint16 dircount , uint16 tagid )
LEAF_NODE	4344:26	4344:26	3	(
PARAMETER_DECL	4344:27	4344:33	3	TIFF * tif
TYPE	4344:27	4344:31	4	TIFF *
TYPE_NAME	4344:27	4344:27	5	TIFF
LEAF_NODE	4344:27	4344:27	6	TIFF
POINTER	4344:31	4344:31	5	*
LEAF_NODE	4344:31	4344:31	6	*
NAME	4344:33	4344:33	4	tif
LEAF_NODE	4344:33	4344:33	5	tif
LEAF_NODE	4344:36	4344:36	3	,
PARAMETER_DECL	4344:38	4344:52	3	TIFFDirEntry * dir
TYPE	4344:38	4344:50	4	TIFFDirEntry *
TYPE_NAME	4344:38	4344:38	5	TIFFDirEntry
LEAF_NODE	4344:38	4344:38	6	TIFFDirEntry
POINTER	4344:50	4344:50	5	*
LEAF_NODE	4344:50	4344:50	6	*
NAME	4344:52	4344:52	4	dir
LEAF_NODE	4344:52	4344:52	5	dir
LEAF_NODE	4344:55	4344:55	3	,
PARAMETER_DECL	4344:57	4344:64	3	uint16 dircount
TYPE	4344:57	4344:57	4	uint16
TYPE_NAME	4344:57	4344:57	5	uint16
LEAF_NODE	4344:57	4344:57	6	uint16
NAME	4344:64	4344:64	4	dircount
LEAF_NODE	4344:64	4344:64	5	dircount
LEAF_NODE	4344:72	4344:72	3	,
PARAMETER_DECL	4344:74	4344:81	3	uint16 tagid
TYPE	4344:74	4344:74	4	uint16
TYPE_NAME	4344:74	4344:74	5	uint16
LEAF_NODE	4344:74	4344:74	6	uint16
NAME	4344:81	4344:81	4	tagid
LEAF_NODE	4344:81	4344:81	5	tagid
LEAF_NODE	4344:86	4344:86	3	)
LEAF_NODE	4345:0	4345:0	2	{
STATEMENTS	4346:1	4354:1	2	
SIMPLE_DECL	4346:1	4346:16	3	TIFFDirEntry * m ;
VAR_DECL	4346:1	4346:15	4	TIFFDirEntry * m
TYPE	4346:1	4346:13	5	TIFFDirEntry *
TYPE_NAME	4346:1	4346:1	6	TIFFDirEntry
LEAF_NODE	4346:1	4346:1	7	TIFFDirEntry
POINTER	4346:13	4346:13	6	*
LEAF_NODE	4346:13	4346:13	7	*
NAME	4346:15	4346:15	5	m
LEAF_NODE	4346:15	4346:15	6	m
LEAF_NODE	4346:16	4346:16	4	;
SIMPLE_DECL	4347:1	4347:9	3	uint16 n ;
VAR_DECL	4347:1	4347:8	4	uint16 n
TYPE	4347:1	4347:1	5	uint16
TYPE_NAME	4347:1	4347:1	6	uint16
LEAF_NODE	4347:1	4347:1	7	uint16
NAME	4347:8	4347:8	5	n
LEAF_NODE	4347:8	4347:8	6	n
LEAF_NODE	4347:9	4347:9	4	;
EXPR_STATEMENT	4348:1	4348:11	3	( void ) tif ;
EXPR	4348:1	4348:8	4	( void ) tif
LEAF_NODE	4348:1	4348:1	5	(
TYPE_NAME	4348:2	4348:2	5	void
LEAF_NODE	4348:2	4348:2	6	void
LEAF_NODE	4348:6	4348:6	5	)
FIELD	4348:8	4348:8	5	tif
LEAF_NODE	4348:8	4348:8	6	tif
LEAF_NODE	4348:11	4348:11	4	;
ITERATION	4349:1	4350:1	3	
KEYWORD	4349:1	4349:1	4	for
LEAF_NODE	4349:1	4349:1	5	for
LEAF_NODE	4349:5	4349:5	4	(
FOR_INIT	4349:6	4349:16	4	m = dir , n = 0 ;
EXPR	4349:6	4349:13	5	m = dir , n = 0
ASSIGN	4349:6	4349:8	6	m = dir
LVAL	4349:6	4349:6	7	m
FIELD	4349:6	4349:6	8	m
LEAF_NODE	4349:6	4349:6	9	m
ASSIGN_OP	4349:7	4349:7	7	=
LEAF_NODE	4349:7	4349:7	8	=
RVAL	4349:8	4349:8	7	dir
FIELD	4349:8	4349:8	8	dir
LEAF_NODE	4349:8	4349:8	9	dir
LEAF_NODE	4349:11	4349:11	6	,
ASSIGN	4349:13	4349:15	6	n = 0
LVAL	4349:13	4349:13	7	n
FIELD	4349:13	4349:13	8	n
LEAF_NODE	4349:13	4349:13	9	n
ASSIGN_OP	4349:14	4349:14	7	=
LEAF_NODE	4349:14	4349:14	8	=
RVAL	4349:15	4349:15	7	0
FIELD	4349:15	4349:15	8	0
LEAF_NODE	4349:15	4349:15	9	0
LEAF_NODE	4349:16	4349:16	5	;
CONDITION	4349:18	4349:18	4	n < dircount
EXPR	4349:18	4349:20	5	n < dircount
FIELD	4349:18	4349:18	6	n
LEAF_NODE	4349:18	4349:18	7	n
REL_OPERATOR	4349:19	4349:19	6	<
LEAF_NODE	4349:19	4349:19	7	<
FIELD	4349:20	4349:20	6	dircount
LEAF_NODE	4349:20	4349:20	7	dircount
LEAF_NODE	4349:28	4349:28	4	;
FOR_EXPR	4349:30	4349:30	4	m ++ , n ++
EXPR	4349:30	4349:35	5	m ++ , n ++
FIELD	4349:30	4349:31	6	m ++
LEAF_NODE	4349:30	4349:30	7	m
LEAF_NODE	4349:31	4349:31	7	++
LEAF_NODE	4349:33	4349:33	6	,
FIELD	4349:35	4349:36	6	n ++
LEAF_NODE	4349:35	4349:35	7	n
LEAF_NODE	4349:36	4349:36	7	++
LEAF_NODE	4349:38	4349:38	4	)
STATEMENTS	4350:1	4353:1	4	
LEAF_NODE	4350:1	4350:1	5	{
STATEMENTS	4351:2	4352:12	5	
SELECTION	4351:2	4352:3	6	
KEYWORD	4351:2	4351:2	7	if
LEAF_NODE	4351:2	4351:2	8	if
LEAF_NODE	4351:5	4351:5	7	(
CONDITION	4351:6	4351:6	7	m -> tdir_tag == tagid
EXPR	4351:6	4351:19	8	m -> tdir_tag == tagid
FIELD	4351:6	4351:9	9	m -> tdir_tag
LEAF_NODE	4351:6	4351:6	10	m
LEAF_NODE	4351:7	4351:7	10	->
LEAF_NODE	4351:9	4351:9	10	tdir_tag
EQ_OPERATOR	4351:17	4351:17	9	==
LEAF_NODE	4351:17	4351:17	10	==
FIELD	4351:19	4351:19	9	tagid
LEAF_NODE	4351:19	4351:19	10	tagid
LEAF_NODE	4351:24	4351:24	7	)
STATEMENTS	4352:3	4352:3	7	
LEAF_NODE	4352:3	4352:3	8	return
LEAF_NODE	4352:9	4352:9	6	(
LEAF_NODE	4352:10	4352:10	6	m
LEAF_NODE	4352:11	4352:11	6	)
LEAF_NODE	4352:12	4352:12	6	;
LEAF_NODE	4353:1	4353:1	5	}
JUMP_STATEMENT	4354:1	4354:10	3	return ( 0 ) ;
KEYWORD	4354:1	4354:1	4	return
LEAF_NODE	4354:1	4354:1	5	return
DESTINATION	4354:7	4354:7	4	( 0 )
EXPR	4354:7	4354:9	5	( 0 )
LEAF_NODE	4354:7	4354:7	6	(
FIELD	4354:8	4354:8	6	0
LEAF_NODE	4354:8	4354:8	7	0
LEAF_NODE	4354:9	4354:9	6	)
LEAF_NODE	4354:10	4354:10	4	;
LEAF_NODE	4355:0	4355:0	2	}
FUNCTION_DEF	4357:0	4387:0	1	
RETURN_TYPE	4357:0	4357:7	2	static void
LEAF_NODE	4357:0	4357:0	3	static
TYPE_NAME	4357:7	4357:7	3	void
LEAF_NODE	4357:7	4357:7	4	void
FUNCTION_NAME	4358:0	4358:0	2	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	4358:0	4358:0	3	TIFFReadDirectoryFindFieldInfo
PARAMETER_LIST	4358:30	4358:67	2	( TIFF * tif , uint16 tagid , uint32 * fii )
LEAF_NODE	4358:30	4358:30	3	(
PARAMETER_DECL	4358:31	4358:37	3	TIFF * tif
TYPE	4358:31	4358:35	4	TIFF *
TYPE_NAME	4358:31	4358:31	5	TIFF
LEAF_NODE	4358:31	4358:31	6	TIFF
POINTER	4358:35	4358:35	5	*
LEAF_NODE	4358:35	4358:35	6	*
NAME	4358:37	4358:37	4	tif
LEAF_NODE	4358:37	4358:37	5	tif
LEAF_NODE	4358:40	4358:40	3	,
PARAMETER_DECL	4358:42	4358:49	3	uint16 tagid
TYPE	4358:42	4358:42	4	uint16
TYPE_NAME	4358:42	4358:42	5	uint16
LEAF_NODE	4358:42	4358:42	6	uint16
NAME	4358:49	4358:49	4	tagid
LEAF_NODE	4358:49	4358:49	5	tagid
LEAF_NODE	4358:54	4358:54	3	,
PARAMETER_DECL	4358:56	4358:64	3	uint32 * fii
TYPE	4358:56	4358:62	4	uint32 *
TYPE_NAME	4358:56	4358:56	5	uint32
LEAF_NODE	4358:56	4358:56	6	uint32
POINTER	4358:62	4358:62	5	*
LEAF_NODE	4358:62	4358:62	6	*
NAME	4358:64	4358:64	4	fii
LEAF_NODE	4358:64	4358:64	5	fii
LEAF_NODE	4358:67	4358:67	3	)
LEAF_NODE	4359:0	4359:0	2	{
STATEMENTS	4360:1	4386:1	2	
SIMPLE_DECL	4360:1	4360:15	3	int32 ma , int32 mb , int32 mc ;
INIT_DECL_LIST	4360:1	4360:1	4	int32 ma , int32 mb , int32 mc
VAR_DECL	4360:1	4360:7	5	int32 ma
TYPE	4360:1	4360:1	6	int32
TYPE_NAME	4360:1	4360:1	7	int32
LEAF_NODE	4360:1	4360:1	8	int32
NAME	4360:7	4360:7	6	ma
LEAF_NODE	4360:7	4360:7	7	ma
LEAF_NODE	4360:9	4360:9	5	,
INIT_DECL_LIST	4360:1	4360:1	5	int32 mb , int32 mc
VAR_DECL	4360:1	4360:10	6	int32 mb
TYPE	4360:1	4360:1	7	int32
TYPE_NAME	4360:1	4360:1	8	int32
LEAF_NODE	4360:1	4360:1	9	int32
NAME	4360:10	4360:10	7	mb
LEAF_NODE	4360:10	4360:10	8	mb
LEAF_NODE	4360:12	4360:12	6	,
VAR_DECL	4360:1	4360:13	6	int32 mc
TYPE	4360:1	4360:1	7	int32
TYPE_NAME	4360:1	4360:1	8	int32
LEAF_NODE	4360:1	4360:1	9	int32
NAME	4360:13	4360:13	7	mc
LEAF_NODE	4360:13	4360:13	8	mc
LEAF_NODE	4360:15	4360:15	4	;
EXPR_STATEMENT	4361:1	4361:6	3	ma = - 1 ;
EXPR	4361:1	4361:1	4	ma = - 1
ASSIGN	4361:1	4361:4	5	ma = - 1
LVAL	4361:1	4361:1	6	ma
FIELD	4361:1	4361:1	7	ma
LEAF_NODE	4361:1	4361:1	8	ma
ASSIGN_OP	4361:3	4361:3	6	=
LEAF_NODE	4361:3	4361:3	7	=
RVAL	4361:4	4361:4	6	- 1
UNARY_EXPR	4361:4	4361:5	7	- 1
UNARY_OPERATOR	4361:4	4361:4	8	-
LEAF_NODE	4361:4	4361:4	9	-
FIELD	4361:5	4361:5	8	1
LEAF_NODE	4361:5	4361:5	9	1
LEAF_NODE	4361:6	4361:6	4	;
EXPR_STATEMENT	4362:1	4362:27	3	mc = ( int32 ) tif -> tif_nfields ;
EXPR	4362:1	4362:1	4	mc = ( int32 ) tif -> tif_nfields
ASSIGN	4362:1	4362:4	5	mc = ( int32 ) tif -> tif_nfields
LVAL	4362:1	4362:1	6	mc
FIELD	4362:1	4362:1	7	mc
LEAF_NODE	4362:1	4362:1	8	mc
ASSIGN_OP	4362:3	4362:3	6	=
LEAF_NODE	4362:3	4362:3	7	=
RVAL	4362:4	4362:11	6	( int32 ) tif -> tif_nfields
LEAF_NODE	4362:4	4362:4	7	(
TYPE_NAME	4362:5	4362:5	7	int32
LEAF_NODE	4362:5	4362:5	8	int32
LEAF_NODE	4362:10	4362:10	7	)
FIELD	4362:11	4362:16	7	tif -> tif_nfields
LEAF_NODE	4362:11	4362:11	8	tif
LEAF_NODE	4362:14	4362:14	8	->
LEAF_NODE	4362:16	4362:16	8	tif_nfields
LEAF_NODE	4362:27	4362:27	4	;
ITERATION	4363:1	4364:1	3	
KEYWORD	4363:1	4363:1	4	while
LEAF_NODE	4363:1	4363:1	5	while
LEAF_NODE	4363:7	4363:7	4	(
CONDITION	4363:8	4363:8	4	1
EXPR	4363:8	4363:8	5	1
FIELD	4363:8	4363:8	6	1
LEAF_NODE	4363:8	4363:8	7	1
LEAF_NODE	4363:9	4363:9	4	)
STATEMENTS	4364:1	4377:1	4	
LEAF_NODE	4364:1	4364:1	5	{
STATEMENTS	4365:2	4375:2	5	
SELECTION	4365:2	4366:2	6	
KEYWORD	4365:2	4365:2	7	if
LEAF_NODE	4365:2	4365:2	8	if
LEAF_NODE	4365:5	4365:5	7	(
CONDITION	4365:6	4365:6	7	ma + 1 == mc
EXPR	4365:6	4365:12	8	ma + 1 == mc
FIELD	4365:6	4365:6	9	ma
LEAF_NODE	4365:6	4365:6	10	ma
LEAF_NODE	4365:8	4365:8	9	+
FIELD	4365:9	4365:9	9	1
LEAF_NODE	4365:9	4365:9	10	1
EQ_OPERATOR	4365:10	4365:10	9	==
LEAF_NODE	4365:10	4365:10	10	==
FIELD	4365:12	4365:12	9	mc
LEAF_NODE	4365:12	4365:12	10	mc
LEAF_NODE	4365:14	4365:14	7	)
STATEMENTS	4366:2	4369:2	7	
LEAF_NODE	4366:2	4366:2	8	{
STATEMENTS	4367:3	4368:3	8	
EXPR_STATEMENT	4367:3	4367:20	9	* fii = FAILED_FII ;
EXPR	4367:3	4367:3	10	* fii = FAILED_FII
ASSIGN	4367:3	4367:10	11	* fii = FAILED_FII
LVAL	4367:3	4367:3	12	* fii
UNARY_EXPR	4367:3	4367:4	13	* fii
UNARY_OPERATOR	4367:3	4367:3	14	*
LEAF_NODE	4367:3	4367:3	15	*
FIELD	4367:4	4367:4	14	fii
LEAF_NODE	4367:4	4367:4	15	fii
ASSIGN_OP	4367:8	4367:8	12	=
LEAF_NODE	4367:8	4367:8	13	=
RVAL	4367:10	4367:10	12	FAILED_FII
FIELD	4367:10	4367:10	13	FAILED_FII
LEAF_NODE	4367:10	4367:10	14	FAILED_FII
LEAF_NODE	4367:20	4367:20	10	;
JUMP_STATEMENT	4368:3	4368:9	9	return DESTINATION ;
KEYWORD	4368:3	4368:3	10	return
LEAF_NODE	4368:3	4368:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	4368:9	4368:9	10	;
LEAF_NODE	4369:2	4369:2	8	}
EXPR_STATEMENT	4370:2	4370:14	6	mb = ( ma + mc ) / 2 ;
EXPR	4370:2	4370:2	7	mb = ( ma + mc ) / 2
ASSIGN	4370:2	4370:5	8	mb = ( ma + mc ) / 2
LVAL	4370:2	4370:2	9	mb
FIELD	4370:2	4370:2	10	mb
LEAF_NODE	4370:2	4370:2	11	mb
ASSIGN_OP	4370:4	4370:4	9	=
LEAF_NODE	4370:4	4370:4	10	=
RVAL	4370:5	4370:13	9	( ma + mc ) / 2
LEAF_NODE	4370:5	4370:5	10	(
FIELD	4370:6	4370:6	10	ma
LEAF_NODE	4370:6	4370:6	11	ma
LEAF_NODE	4370:8	4370:8	10	+
FIELD	4370:9	4370:9	10	mc
LEAF_NODE	4370:9	4370:9	11	mc
LEAF_NODE	4370:11	4370:11	10	)
LEAF_NODE	4370:12	4370:12	10	/
FIELD	4370:13	4370:13	10	2
LEAF_NODE	4370:13	4370:13	11	2
LEAF_NODE	4370:14	4370:14	7	;
SELECTION	4371:2	4372:3	6	
KEYWORD	4371:2	4371:2	7	if
LEAF_NODE	4371:2	4371:2	8	if
LEAF_NODE	4371:5	4371:5	7	(
CONDITION	4371:6	4371:6	7	tif -> tif_fields [ mb ] -> field_tag == ( uint32 ) tagid
EXPR	4371:6	4371:46	8	tif -> tif_fields [ mb ] -> field_tag == ( uint32 ) tagid
FIELD	4371:6	4371:27	9	tif -> tif_fields [ mb ] -> field_tag
LEAF_NODE	4371:6	4371:6	10	tif
LEAF_NODE	4371:9	4371:9	10	->
LEAF_NODE	4371:11	4371:11	10	tif_fields
LEAF_NODE	4371:21	4371:21	10	[
EXPR	4371:22	4371:22	10	mb
FIELD	4371:22	4371:22	11	mb
LEAF_NODE	4371:22	4371:22	12	mb
LEAF_NODE	4371:24	4371:24	10	]
LEAF_NODE	4371:25	4371:25	10	->
LEAF_NODE	4371:27	4371:27	10	field_tag
EQ_OPERATOR	4371:36	4371:36	9	==
LEAF_NODE	4371:36	4371:36	10	==
LEAF_NODE	4371:38	4371:38	9	(
TYPE_NAME	4371:39	4371:39	9	uint32
LEAF_NODE	4371:39	4371:39	10	uint32
LEAF_NODE	4371:45	4371:45	9	)
FIELD	4371:46	4371:46	9	tagid
LEAF_NODE	4371:46	4371:46	10	tagid
LEAF_NODE	4371:51	4371:51	7	)
STATEMENTS	4372:3	4372:3	7	
JUMP_STATEMENT	4372:3	4372:8	8	break DESTINATION ;
KEYWORD	4372:3	4372:3	9	break
LEAF_NODE	4372:3	4372:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	4372:8	4372:8	9	;
SELECTION	4373:2	4374:3	6	
KEYWORD	4373:2	4373:2	7	if
LEAF_NODE	4373:2	4373:2	8	if
LEAF_NODE	4373:5	4373:5	7	(
CONDITION	4373:6	4373:6	7	tif -> tif_fields [ mb ] -> field_tag < ( uint32 ) tagid
EXPR	4373:6	4373:45	8	tif -> tif_fields [ mb ] -> field_tag < ( uint32 ) tagid
FIELD	4373:6	4373:27	9	tif -> tif_fields [ mb ] -> field_tag
LEAF_NODE	4373:6	4373:6	10	tif
LEAF_NODE	4373:9	4373:9	10	->
LEAF_NODE	4373:11	4373:11	10	tif_fields
LEAF_NODE	4373:21	4373:21	10	[
EXPR	4373:22	4373:22	10	mb
FIELD	4373:22	4373:22	11	mb
LEAF_NODE	4373:22	4373:22	12	mb
LEAF_NODE	4373:24	4373:24	10	]
LEAF_NODE	4373:25	4373:25	10	->
LEAF_NODE	4373:27	4373:27	10	field_tag
REL_OPERATOR	4373:36	4373:36	9	<
LEAF_NODE	4373:36	4373:36	10	<
LEAF_NODE	4373:37	4373:37	9	(
TYPE_NAME	4373:38	4373:38	9	uint32
LEAF_NODE	4373:38	4373:38	10	uint32
LEAF_NODE	4373:44	4373:44	9	)
FIELD	4373:45	4373:45	9	tagid
LEAF_NODE	4373:45	4373:45	10	tagid
LEAF_NODE	4373:50	4373:50	7	)
STATEMENTS	4374:3	4374:3	7	
EXPR_STATEMENT	4374:3	4374:8	8	ma = mb ;
EXPR	4374:3	4374:3	9	ma = mb
ASSIGN	4374:3	4374:6	10	ma = mb
LVAL	4374:3	4374:3	11	ma
FIELD	4374:3	4374:3	12	ma
LEAF_NODE	4374:3	4374:3	13	ma
ASSIGN_OP	4374:5	4374:5	11	=
LEAF_NODE	4374:5	4374:5	12	=
RVAL	4374:6	4374:6	11	mb
FIELD	4374:6	4374:6	12	mb
LEAF_NODE	4374:6	4374:6	13	mb
LEAF_NODE	4374:8	4374:8	9	;
SELECTION	4375:2	4376:3	6	
KEYWORD	4375:2	4375:2	7	else
LEAF_NODE	4375:2	4375:2	8	else
STATEMENTS	4376:3	4376:3	7	
EXPR_STATEMENT	4376:3	4376:8	8	mc = mb ;
EXPR	4376:3	4376:3	9	mc = mb
ASSIGN	4376:3	4376:6	10	mc = mb
LVAL	4376:3	4376:3	11	mc
FIELD	4376:3	4376:3	12	mc
LEAF_NODE	4376:3	4376:3	13	mc
ASSIGN_OP	4376:5	4376:5	11	=
LEAF_NODE	4376:5	4376:5	12	=
RVAL	4376:6	4376:6	11	mb
FIELD	4376:6	4376:6	12	mb
LEAF_NODE	4376:6	4376:6	13	mb
LEAF_NODE	4376:8	4376:8	9	;
LEAF_NODE	4377:1	4377:1	5	}
ITERATION	4378:1	4379:1	3	
KEYWORD	4378:1	4378:1	4	while
LEAF_NODE	4378:1	4378:1	5	while
LEAF_NODE	4378:7	4378:7	4	(
CONDITION	4378:8	4378:8	4	1
EXPR	4378:8	4378:8	5	1
FIELD	4378:8	4378:8	6	1
LEAF_NODE	4378:8	4378:8	7	1
LEAF_NODE	4378:9	4378:9	4	)
STATEMENTS	4379:1	4385:1	4	
LEAF_NODE	4379:1	4379:1	5	{
STATEMENTS	4380:2	4384:2	5	
SELECTION	4380:2	4381:3	6	
KEYWORD	4380:2	4380:2	7	if
LEAF_NODE	4380:2	4380:2	8	if
LEAF_NODE	4380:5	4380:5	7	(
CONDITION	4380:6	4380:6	7	mb == 0
EXPR	4380:6	4380:10	8	mb == 0
FIELD	4380:6	4380:6	9	mb
LEAF_NODE	4380:6	4380:6	10	mb
EQ_OPERATOR	4380:8	4380:8	9	==
LEAF_NODE	4380:8	4380:8	10	==
FIELD	4380:10	4380:10	9	0
LEAF_NODE	4380:10	4380:10	10	0
LEAF_NODE	4380:11	4380:11	7	)
STATEMENTS	4381:3	4381:3	7	
JUMP_STATEMENT	4381:3	4381:8	8	break DESTINATION ;
KEYWORD	4381:3	4381:3	9	break
LEAF_NODE	4381:3	4381:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	4381:8	4381:8	9	;
SELECTION	4382:2	4383:3	6	
KEYWORD	4382:2	4382:2	7	if
LEAF_NODE	4382:2	4382:2	8	if
LEAF_NODE	4382:5	4382:5	7	(
CONDITION	4382:6	4382:6	7	tif -> tif_fields [ mb - 1 ] -> field_tag != ( uint32 ) tagid
EXPR	4382:6	4382:48	8	tif -> tif_fields [ mb - 1 ] -> field_tag != ( uint32 ) tagid
FIELD	4382:6	4382:29	9	tif -> tif_fields [ mb - 1 ] -> field_tag
LEAF_NODE	4382:6	4382:6	10	tif
LEAF_NODE	4382:9	4382:9	10	->
LEAF_NODE	4382:11	4382:11	10	tif_fields
LEAF_NODE	4382:21	4382:21	10	[
EXPR	4382:22	4382:25	10	mb - 1
FIELD	4382:22	4382:22	11	mb
LEAF_NODE	4382:22	4382:22	12	mb
LEAF_NODE	4382:24	4382:24	11	-
FIELD	4382:25	4382:25	11	1
LEAF_NODE	4382:25	4382:25	12	1
LEAF_NODE	4382:26	4382:26	10	]
LEAF_NODE	4382:27	4382:27	10	->
LEAF_NODE	4382:29	4382:29	10	field_tag
EQ_OPERATOR	4382:38	4382:38	9	!=
LEAF_NODE	4382:38	4382:38	10	!=
LEAF_NODE	4382:40	4382:40	9	(
TYPE_NAME	4382:41	4382:41	9	uint32
LEAF_NODE	4382:41	4382:41	10	uint32
LEAF_NODE	4382:47	4382:47	9	)
FIELD	4382:48	4382:48	9	tagid
LEAF_NODE	4382:48	4382:48	10	tagid
LEAF_NODE	4382:53	4382:53	7	)
STATEMENTS	4383:3	4383:3	7	
JUMP_STATEMENT	4383:3	4383:8	8	break DESTINATION ;
KEYWORD	4383:3	4383:3	9	break
LEAF_NODE	4383:3	4383:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	4383:8	4383:8	9	;
EXPR_STATEMENT	4384:2	4384:6	6	mb -- ;
EXPR	4384:2	4384:2	7	mb --
FIELD	4384:2	4384:4	8	mb --
LEAF_NODE	4384:2	4384:2	9	mb
LEAF_NODE	4384:4	4384:4	9	--
LEAF_NODE	4384:6	4384:6	7	;
LEAF_NODE	4385:1	4385:1	5	}
EXPR_STATEMENT	4386:1	4386:8	3	* fii = mb ;
EXPR	4386:1	4386:1	4	* fii = mb
ASSIGN	4386:1	4386:6	5	* fii = mb
LVAL	4386:1	4386:1	6	* fii
UNARY_EXPR	4386:1	4386:2	7	* fii
UNARY_OPERATOR	4386:1	4386:1	8	*
LEAF_NODE	4386:1	4386:1	9	*
FIELD	4386:2	4386:2	8	fii
LEAF_NODE	4386:2	4386:2	9	fii
ASSIGN_OP	4386:5	4386:5	6	=
LEAF_NODE	4386:5	4386:5	7	=
RVAL	4386:6	4386:6	6	mb
FIELD	4386:6	4386:6	7	mb
LEAF_NODE	4386:6	4386:6	8	mb
LEAF_NODE	4386:8	4386:8	4	;
LEAF_NODE	4387:0	4387:0	2	}
FUNCTION_DEF	4393:0	4494:0	1	
RETURN_TYPE	4393:0	4393:0	2	int
TYPE_NAME	4393:0	4393:0	3	int
LEAF_NODE	4393:0	4393:0	4	int
FUNCTION_NAME	4394:0	4394:0	2	TIFFReadCustomDirectory
LEAF_NODE	4394:0	4394:0	3	TIFFReadCustomDirectory
PARAMETER_LIST	4394:23	4395:34	2	( TIFF * tif , toff_t diroff , const TIFFFieldArray * infoarray )
LEAF_NODE	4394:23	4394:23	3	(
PARAMETER_DECL	4394:24	4394:30	3	TIFF * tif
TYPE	4394:24	4394:28	4	TIFF *
TYPE_NAME	4394:24	4394:24	5	TIFF
LEAF_NODE	4394:24	4394:24	6	TIFF
POINTER	4394:28	4394:28	5	*
LEAF_NODE	4394:28	4394:28	6	*
NAME	4394:30	4394:30	4	tif
LEAF_NODE	4394:30	4394:30	5	tif
LEAF_NODE	4394:33	4394:33	3	,
PARAMETER_DECL	4394:35	4394:42	3	toff_t diroff
TYPE	4394:35	4394:35	4	toff_t
TYPE_NAME	4394:35	4394:35	5	toff_t
LEAF_NODE	4394:35	4394:35	6	toff_t
NAME	4394:42	4394:42	4	diroff
LEAF_NODE	4394:42	4394:42	5	diroff
LEAF_NODE	4394:48	4394:48	3	,
PARAMETER_DECL	4395:3	4395:25	3	const TIFFFieldArray * infoarray
TYPE	4395:3	4395:23	4	const TIFFFieldArray *
TYPE_NAME	4395:3	4395:9	5	const TIFFFieldArray
LEAF_NODE	4395:3	4395:3	6	const
LEAF_NODE	4395:9	4395:9	6	TIFFFieldArray
POINTER	4395:23	4395:23	5	*
LEAF_NODE	4395:23	4395:23	6	*
NAME	4395:25	4395:25	4	infoarray
LEAF_NODE	4395:25	4395:25	5	infoarray
LEAF_NODE	4395:34	4395:34	3	)
LEAF_NODE	4396:0	4396:0	2	{
STATEMENTS	4397:1	4493:1	2	
LEAF_NODE	4397:1	4397:1	3	static
SIMPLE_DECL	4397:8	4397:55	3	const char [ ] module ; module = "TIFFReadCustomDirectory" ;
VAR_DECL	4397:8	4397:19	4	const char [ ] module ; module = "TIFFReadCustomDirectory"
TYPE	4397:8	4397:25	5	const char [ ]
TYPE_NAME	4397:8	4397:14	6	const char
LEAF_NODE	4397:8	4397:8	7	const
LEAF_NODE	4397:14	4397:14	7	char
TYPE_SUFFIX	4397:25	4397:26	6	[ ]
LEAF_NODE	4397:25	4397:25	7	[
LEAF_NODE	4397:26	4397:26	7	]
NAME	4397:19	4397:19	5	module
LEAF_NODE	4397:19	4397:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	4397:19	4397:19	5	module = "TIFFReadCustomDirectory"
ASSIGN	4397:19	4397:30	6	module = "TIFFReadCustomDirectory"
LVAL	4397:19	4397:19	7	module
NAME	4397:19	4397:19	8	module
LEAF_NODE	4397:19	4397:19	9	module
ASSIGN_OP	4397:28	4397:28	7	=
LEAF_NODE	4397:28	4397:28	8	=
RVAL	4397:30	4397:30	7	"TIFFReadCustomDirectory"
FIELD	4397:30	4397:30	8	"TIFFReadCustomDirectory"
LEAF_NODE	4397:30	4397:30	9	"TIFFReadCustomDirectory"
LEAF_NODE	4397:55	4397:55	4	;
SIMPLE_DECL	4398:1	4398:18	3	TIFFDirEntry * dir ;
VAR_DECL	4398:1	4398:15	4	TIFFDirEntry * dir
TYPE	4398:1	4398:13	5	TIFFDirEntry *
TYPE_NAME	4398:1	4398:1	6	TIFFDirEntry
LEAF_NODE	4398:1	4398:1	7	TIFFDirEntry
POINTER	4398:13	4398:13	6	*
LEAF_NODE	4398:13	4398:13	7	*
NAME	4398:15	4398:15	5	dir
LEAF_NODE	4398:15	4398:15	6	dir
LEAF_NODE	4398:18	4398:18	4	;
SIMPLE_DECL	4399:1	4399:16	3	uint16 dircount ;
VAR_DECL	4399:1	4399:8	4	uint16 dircount
TYPE	4399:1	4399:1	5	uint16
TYPE_NAME	4399:1	4399:1	6	uint16
LEAF_NODE	4399:1	4399:1	7	uint16
NAME	4399:8	4399:8	5	dircount
LEAF_NODE	4399:8	4399:8	6	dircount
LEAF_NODE	4399:16	4399:16	4	;
SIMPLE_DECL	4400:1	4400:17	3	TIFFDirEntry * dp ;
VAR_DECL	4400:1	4400:15	4	TIFFDirEntry * dp
TYPE	4400:1	4400:13	5	TIFFDirEntry *
TYPE_NAME	4400:1	4400:1	6	TIFFDirEntry
LEAF_NODE	4400:1	4400:1	7	TIFFDirEntry
POINTER	4400:13	4400:13	6	*
LEAF_NODE	4400:13	4400:13	7	*
NAME	4400:15	4400:15	5	dp
LEAF_NODE	4400:15	4400:15	6	dp
LEAF_NODE	4400:17	4400:17	4	;
SIMPLE_DECL	4401:1	4401:10	3	uint16 di ;
VAR_DECL	4401:1	4401:8	4	uint16 di
TYPE	4401:1	4401:1	5	uint16
TYPE_NAME	4401:1	4401:1	6	uint16
LEAF_NODE	4401:1	4401:1	7	uint16
NAME	4401:8	4401:8	5	di
LEAF_NODE	4401:8	4401:8	6	di
LEAF_NODE	4401:10	4401:10	4	;
SIMPLE_DECL	4402:1	4402:21	3	const TIFFField * fip ;
VAR_DECL	4402:1	4402:18	4	const TIFFField * fip
TYPE	4402:1	4402:16	5	const TIFFField *
TYPE_NAME	4402:1	4402:7	6	const TIFFField
LEAF_NODE	4402:1	4402:1	7	const
LEAF_NODE	4402:7	4402:7	7	TIFFField
POINTER	4402:16	4402:16	6	*
LEAF_NODE	4402:16	4402:16	7	*
NAME	4402:18	4402:18	5	fip
LEAF_NODE	4402:18	4402:18	6	fip
LEAF_NODE	4402:21	4402:21	4	;
SIMPLE_DECL	4403:1	4403:11	3	uint32 fii ;
VAR_DECL	4403:1	4403:8	4	uint32 fii
TYPE	4403:1	4403:1	5	uint32
TYPE_NAME	4403:1	4403:1	6	uint32
LEAF_NODE	4403:1	4403:1	7	uint32
NAME	4403:8	4403:8	5	fii
LEAF_NODE	4403:8	4403:8	6	fii
LEAF_NODE	4403:11	4403:11	4	;
EXPR_STATEMENT	4404:1	4404:33	3	_TIFFSetupFields ( tif , infoarray ) ;
EXPR	4404:1	4404:1	4	_TIFFSetupFields ( tif , infoarray )
FUNCTION_CALL	4404:1	4404:32	5	_TIFFSetupFields ( tif , infoarray )
CALLEE	4404:1	4404:1	6	_TIFFSetupFields
LEAF_NODE	4404:1	4404:1	7	_TIFFSetupFields
LEAF_NODE	4404:17	4404:17	6	(
ARGUMENT	4404:18	4404:18	6	tif
FIELD	4404:18	4404:18	7	tif
LEAF_NODE	4404:18	4404:18	8	tif
LEAF_NODE	4404:21	4404:21	6	,
ARGUMENT	4404:23	4404:23	6	infoarray
FIELD	4404:23	4404:23	7	infoarray
LEAF_NODE	4404:23	4404:23	8	infoarray
LEAF_NODE	4404:32	4404:32	6	)
LEAF_NODE	4404:33	4404:33	4	;
EXPR_STATEMENT	4405:1	4405:50	3	dircount = TIFFFetchDirectory ( tif , diroff , & dir , NULL ) ;
EXPR	4405:1	4405:1	4	dircount = TIFFFetchDirectory ( tif , diroff , & dir , NULL )
ASSIGN	4405:1	4405:10	5	dircount = TIFFFetchDirectory ( tif , diroff , & dir , NULL )
LVAL	4405:1	4405:1	6	dircount
FIELD	4405:1	4405:1	7	dircount
LEAF_NODE	4405:1	4405:1	8	dircount
ASSIGN_OP	4405:9	4405:9	6	=
LEAF_NODE	4405:9	4405:9	7	=
RVAL	4405:10	4405:10	6	TIFFFetchDirectory ( tif , diroff , & dir , NULL )
FUNCTION_CALL	4405:10	4405:49	7	TIFFFetchDirectory ( tif , diroff , & dir , NULL )
CALLEE	4405:10	4405:10	8	TIFFFetchDirectory
LEAF_NODE	4405:10	4405:10	9	TIFFFetchDirectory
LEAF_NODE	4405:28	4405:28	8	(
ARGUMENT	4405:29	4405:29	8	tif
FIELD	4405:29	4405:29	9	tif
LEAF_NODE	4405:29	4405:29	10	tif
LEAF_NODE	4405:32	4405:32	8	,
ARGUMENT	4405:33	4405:33	8	diroff
FIELD	4405:33	4405:33	9	diroff
LEAF_NODE	4405:33	4405:33	10	diroff
LEAF_NODE	4405:39	4405:39	8	,
ARGUMENT	4405:40	4405:40	8	& dir
UNARY_EXPR	4405:40	4405:41	9	& dir
UNARY_OPERATOR	4405:40	4405:40	10	&
LEAF_NODE	4405:40	4405:40	11	&
FIELD	4405:41	4405:41	10	dir
LEAF_NODE	4405:41	4405:41	11	dir
LEAF_NODE	4405:44	4405:44	8	,
ARGUMENT	4405:45	4405:45	8	NULL
FIELD	4405:45	4405:45	9	NULL
LEAF_NODE	4405:45	4405:45	10	NULL
LEAF_NODE	4405:49	4405:49	8	)
LEAF_NODE	4405:50	4405:50	4	;
SELECTION	4406:1	4407:1	3	
KEYWORD	4406:1	4406:1	4	if
LEAF_NODE	4406:1	4406:1	5	if
LEAF_NODE	4406:4	4406:4	4	(
CONDITION	4406:5	4406:5	4	! dircount
EXPR	4406:5	4406:5	5	! dircount
UNARY_EXPR	4406:5	4406:6	6	! dircount
UNARY_OPERATOR	4406:5	4406:5	7	!
LEAF_NODE	4406:5	4406:5	8	!
FIELD	4406:6	4406:6	7	dircount
LEAF_NODE	4406:6	4406:6	8	dircount
LEAF_NODE	4406:14	4406:14	4	)
STATEMENTS	4407:1	4411:1	4	
LEAF_NODE	4407:1	4407:1	5	{
STATEMENTS	4408:2	4410:2	5	
LEAF_NODE	4408:2	4408:2	6	TIFFErrorExt
LEAF_NODE	4408:14	4408:14	6	(
LEAF_NODE	4408:15	4408:15	6	tif
LEAF_NODE	4408:18	4408:18	6	->
LEAF_NODE	4408:20	4408:20	6	tif_clientdata
LEAF_NODE	4408:34	4408:34	6	,
LEAF_NODE	4408:35	4408:35	6	module
LEAF_NODE	4408:41	4408:41	6	,
LEAF_NODE	4409:6	4409:6	6	"Failed to read custom directory at offset "
LEAF_NODE	4409:51	4409:51	6	TIFF_UINT64_FORMAT
LEAF_NODE	4409:69	4409:69	6	,
LEAF_NODE	4409:70	4409:70	6	diroff
LEAF_NODE	4409:76	4409:76	6	)
LEAF_NODE	4409:77	4409:77	6	;
JUMP_STATEMENT	4410:2	4410:10	6	return 0 ;
KEYWORD	4410:2	4410:2	7	return
LEAF_NODE	4410:2	4410:2	8	return
DESTINATION	4410:9	4410:9	7	0
EXPR	4410:9	4410:9	8	0
FIELD	4410:9	4410:9	9	0
LEAF_NODE	4410:9	4410:9	10	0
LEAF_NODE	4410:10	4410:10	7	;
LEAF_NODE	4411:1	4411:1	5	}
EXPR_STATEMENT	4412:1	4412:23	3	TIFFFreeDirectory ( tif ) ;
EXPR	4412:1	4412:1	4	TIFFFreeDirectory ( tif )
FUNCTION_CALL	4412:1	4412:22	5	TIFFFreeDirectory ( tif )
CALLEE	4412:1	4412:1	6	TIFFFreeDirectory
LEAF_NODE	4412:1	4412:1	7	TIFFFreeDirectory
LEAF_NODE	4412:18	4412:18	6	(
ARGUMENT	4412:19	4412:19	6	tif
FIELD	4412:19	4412:19	7	tif
LEAF_NODE	4412:19	4412:19	8	tif
LEAF_NODE	4412:22	4412:22	6	)
LEAF_NODE	4412:23	4412:23	4	;
EXPR_STATEMENT	4413:1	4413:53	3	_TIFFmemset ( & tif -> tif_dir , 0 , sizeof ( TIFFDirectory ) ) ;
EXPR	4413:1	4413:1	4	_TIFFmemset ( & tif -> tif_dir , 0 , sizeof ( TIFFDirectory ) )
FUNCTION_CALL	4413:1	4413:52	5	_TIFFmemset ( & tif -> tif_dir , 0 , sizeof ( TIFFDirectory ) )
CALLEE	4413:1	4413:1	6	_TIFFmemset
LEAF_NODE	4413:1	4413:1	7	_TIFFmemset
LEAF_NODE	4413:12	4413:12	6	(
ARGUMENT	4413:13	4413:13	6	& tif -> tif_dir
UNARY_EXPR	4413:13	4413:14	7	& tif -> tif_dir
UNARY_OPERATOR	4413:13	4413:13	8	&
LEAF_NODE	4413:13	4413:13	9	&
FIELD	4413:14	4413:19	8	tif -> tif_dir
LEAF_NODE	4413:14	4413:14	9	tif
LEAF_NODE	4413:17	4413:17	9	->
LEAF_NODE	4413:19	4413:19	9	tif_dir
LEAF_NODE	4413:26	4413:26	6	,
ARGUMENT	4413:28	4413:28	6	0
FIELD	4413:28	4413:28	7	0
LEAF_NODE	4413:28	4413:28	8	0
LEAF_NODE	4413:29	4413:29	6	,
ARGUMENT	4413:31	4413:31	6	sizeof ( TIFFDirectory )
FUNCTION_CALL	4413:31	4413:51	7	sizeof ( TIFFDirectory )
CALLEE	4413:31	4413:31	8	sizeof
LEAF_NODE	4413:31	4413:31	9	sizeof
LEAF_NODE	4413:37	4413:37	8	(
ARGUMENT	4413:38	4413:38	8	TIFFDirectory
FIELD	4413:38	4413:38	9	TIFFDirectory
LEAF_NODE	4413:38	4413:38	10	TIFFDirectory
LEAF_NODE	4413:51	4413:51	8	)
LEAF_NODE	4413:52	4413:52	6	)
LEAF_NODE	4413:53	4413:53	4	;
EXPR_STATEMENT	4414:1	4414:46	3	TIFFReadDirectoryCheckOrder ( tif , dir , dircount ) ;
EXPR	4414:1	4414:1	4	TIFFReadDirectoryCheckOrder ( tif , dir , dircount )
FUNCTION_CALL	4414:1	4414:45	5	TIFFReadDirectoryCheckOrder ( tif , dir , dircount )
CALLEE	4414:1	4414:1	6	TIFFReadDirectoryCheckOrder
LEAF_NODE	4414:1	4414:1	7	TIFFReadDirectoryCheckOrder
LEAF_NODE	4414:28	4414:28	6	(
ARGUMENT	4414:29	4414:29	6	tif
FIELD	4414:29	4414:29	7	tif
LEAF_NODE	4414:29	4414:29	8	tif
LEAF_NODE	4414:32	4414:32	6	,
ARGUMENT	4414:33	4414:33	6	dir
FIELD	4414:33	4414:33	7	dir
LEAF_NODE	4414:33	4414:33	8	dir
LEAF_NODE	4414:36	4414:36	6	,
ARGUMENT	4414:37	4414:37	6	dircount
FIELD	4414:37	4414:37	7	dircount
LEAF_NODE	4414:37	4414:37	8	dircount
LEAF_NODE	4414:45	4414:45	6	)
LEAF_NODE	4414:46	4414:46	4	;
ITERATION	4415:1	4416:1	3	
KEYWORD	4415:1	4415:1	4	for
LEAF_NODE	4415:1	4415:1	5	for
LEAF_NODE	4415:5	4415:5	4	(
FOR_INIT	4415:6	4415:18	4	di = 0 , dp = dir ;
EXPR	4415:6	4415:12	5	di = 0 , dp = dir
ASSIGN	4415:6	4415:9	6	di = 0
LVAL	4415:6	4415:6	7	di
FIELD	4415:6	4415:6	8	di
LEAF_NODE	4415:6	4415:6	9	di
ASSIGN_OP	4415:8	4415:8	7	=
LEAF_NODE	4415:8	4415:8	8	=
RVAL	4415:9	4415:9	7	0
FIELD	4415:9	4415:9	8	0
LEAF_NODE	4415:9	4415:9	9	0
LEAF_NODE	4415:10	4415:10	6	,
ASSIGN	4415:12	4415:15	6	dp = dir
LVAL	4415:12	4415:12	7	dp
FIELD	4415:12	4415:12	8	dp
LEAF_NODE	4415:12	4415:12	9	dp
ASSIGN_OP	4415:14	4415:14	7	=
LEAF_NODE	4415:14	4415:14	8	=
RVAL	4415:15	4415:15	7	dir
FIELD	4415:15	4415:15	8	dir
LEAF_NODE	4415:15	4415:15	9	dir
LEAF_NODE	4415:18	4415:18	5	;
CONDITION	4415:20	4415:20	4	di < dircount
EXPR	4415:20	4415:23	5	di < dircount
FIELD	4415:20	4415:20	6	di
LEAF_NODE	4415:20	4415:20	7	di
REL_OPERATOR	4415:22	4415:22	6	<
LEAF_NODE	4415:22	4415:22	7	<
FIELD	4415:23	4415:23	6	dircount
LEAF_NODE	4415:23	4415:23	7	dircount
LEAF_NODE	4415:31	4415:31	4	;
FOR_EXPR	4415:33	4415:33	4	di ++ , dp ++
EXPR	4415:33	4415:39	5	di ++ , dp ++
FIELD	4415:33	4415:35	6	di ++
LEAF_NODE	4415:33	4415:33	7	di
LEAF_NODE	4415:35	4415:35	7	++
LEAF_NODE	4415:37	4415:37	6	,
FIELD	4415:39	4415:41	6	dp ++
LEAF_NODE	4415:39	4415:39	7	dp
LEAF_NODE	4415:41	4415:41	7	++
LEAF_NODE	4415:43	4415:43	4	)
STATEMENTS	4416:1	4490:1	4	
LEAF_NODE	4416:1	4416:1	5	{
STATEMENTS	4417:2	4436:2	5	
EXPR_STATEMENT	4417:2	4417:55	6	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii ) ;
EXPR	4417:2	4417:2	7	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
FUNCTION_CALL	4417:2	4417:54	8	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
CALLEE	4417:2	4417:2	9	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	4417:2	4417:2	10	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	4417:32	4417:32	9	(
ARGUMENT	4417:33	4417:33	9	tif
FIELD	4417:33	4417:33	10	tif
LEAF_NODE	4417:33	4417:33	11	tif
LEAF_NODE	4417:36	4417:36	9	,
ARGUMENT	4417:37	4417:37	9	dp -> tdir_tag
FIELD	4417:37	4417:41	10	dp -> tdir_tag
LEAF_NODE	4417:37	4417:37	11	dp
LEAF_NODE	4417:39	4417:39	11	->
LEAF_NODE	4417:41	4417:41	11	tdir_tag
LEAF_NODE	4417:49	4417:49	9	,
ARGUMENT	4417:50	4417:50	9	& fii
UNARY_EXPR	4417:50	4417:51	10	& fii
UNARY_OPERATOR	4417:50	4417:50	11	&
LEAF_NODE	4417:50	4417:50	12	&
FIELD	4417:51	4417:51	11	fii
LEAF_NODE	4417:51	4417:51	12	fii
LEAF_NODE	4417:54	4417:54	9	)
LEAF_NODE	4417:55	4417:55	7	;
SELECTION	4418:2	4419:2	6	
KEYWORD	4418:2	4418:2	7	if
LEAF_NODE	4418:2	4418:2	8	if
LEAF_NODE	4418:5	4418:5	7	(
CONDITION	4418:6	4418:6	7	fii == FAILED_FII
EXPR	4418:6	4418:13	8	fii == FAILED_FII
FIELD	4418:6	4418:6	9	fii
LEAF_NODE	4418:6	4418:6	10	fii
EQ_OPERATOR	4418:10	4418:10	9	==
LEAF_NODE	4418:10	4418:10	10	==
FIELD	4418:13	4418:13	9	FAILED_FII
LEAF_NODE	4418:13	4418:13	10	FAILED_FII
LEAF_NODE	4418:23	4418:23	7	)
STATEMENTS	4419:2	4435:2	7	
LEAF_NODE	4419:2	4419:2	8	{
STATEMENTS	4420:3	4431:5	8	
EXPR_STATEMENT	4420:3	4422:34	9	TIFFWarningExt ( tif -> tif_clientdata , module , "Unknown field with tag %d (0x%x) encountered" , dp -> tdir_tag , dp -> tdir_tag ) ;
EXPR	4420:3	4420:3	10	TIFFWarningExt ( tif -> tif_clientdata , module , "Unknown field with tag %d (0x%x) encountered" , dp -> tdir_tag , dp -> tdir_tag )
FUNCTION_CALL	4420:3	4422:33	11	TIFFWarningExt ( tif -> tif_clientdata , module , "Unknown field with tag %d (0x%x) encountered" , dp -> tdir_tag , dp -> tdir_tag )
CALLEE	4420:3	4420:3	12	TIFFWarningExt
LEAF_NODE	4420:3	4420:3	13	TIFFWarningExt
LEAF_NODE	4420:17	4420:17	12	(
ARGUMENT	4420:18	4420:18	12	tif -> tif_clientdata
FIELD	4420:18	4420:23	13	tif -> tif_clientdata
LEAF_NODE	4420:18	4420:18	14	tif
LEAF_NODE	4420:21	4420:21	14	->
LEAF_NODE	4420:23	4420:23	14	tif_clientdata
LEAF_NODE	4420:37	4420:37	12	,
ARGUMENT	4420:39	4420:39	12	module
FIELD	4420:39	4420:39	13	module
LEAF_NODE	4420:39	4420:39	14	module
LEAF_NODE	4420:45	4420:45	12	,
ARGUMENT	4421:7	4421:7	12	"Unknown field with tag %d (0x%x) encountered"
FIELD	4421:7	4421:7	13	"Unknown field with tag %d (0x%x) encountered"
LEAF_NODE	4421:7	4421:7	14	"Unknown field with tag %d (0x%x) encountered"
LEAF_NODE	4421:53	4421:53	12	,
ARGUMENT	4422:7	4422:7	12	dp -> tdir_tag
FIELD	4422:7	4422:11	13	dp -> tdir_tag
LEAF_NODE	4422:7	4422:7	14	dp
LEAF_NODE	4422:9	4422:9	14	->
LEAF_NODE	4422:11	4422:11	14	tdir_tag
LEAF_NODE	4422:19	4422:19	12	,
ARGUMENT	4422:21	4422:21	12	dp -> tdir_tag
FIELD	4422:21	4422:25	13	dp -> tdir_tag
LEAF_NODE	4422:21	4422:21	14	dp
LEAF_NODE	4422:23	4422:23	14	->
LEAF_NODE	4422:25	4422:25	14	tdir_tag
LEAF_NODE	4422:33	4422:33	12	)
LEAF_NODE	4422:34	4422:34	10	;
SELECTION	4423:3	4426:14	9	
KEYWORD	4423:3	4423:3	10	if
LEAF_NODE	4423:3	4423:3	11	if
LEAF_NODE	4423:6	4423:6	10	(
CONDITION	4423:7	4423:7	10	! _TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
EXPR	4423:7	4423:7	11	! _TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
UNARY_EXPR	4423:7	4423:8	12	! _TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
UNARY_OPERATOR	4423:7	4423:7	13	!
LEAF_NODE	4423:7	4423:7	14	!
FUNCTION_CALL	4423:8	4426:11	13	_TIFFMergeFields ( tif , _TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type ) , 1 )
CALLEE	4423:8	4423:8	14	_TIFFMergeFields
LEAF_NODE	4423:8	4423:8	15	_TIFFMergeFields
LEAF_NODE	4423:24	4423:24	14	(
ARGUMENT	4423:25	4423:25	14	tif
FIELD	4423:25	4423:25	15	tif
LEAF_NODE	4423:25	4423:25	16	tif
LEAF_NODE	4423:28	4423:28	14	,
ARGUMENT	4423:30	4423:30	14	_TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type )
FUNCTION_CALL	4423:30	4425:34	15	_TIFFCreateAnonField ( tif , dp -> tdir_tag , ( TIFFDataType ) dp -> tdir_type )
CALLEE	4423:30	4423:30	16	_TIFFCreateAnonField
LEAF_NODE	4423:30	4423:30	17	_TIFFCreateAnonField
LEAF_NODE	4423:50	4423:50	16	(
ARGUMENT	4423:51	4423:51	16	tif
FIELD	4423:51	4423:51	17	tif
LEAF_NODE	4423:51	4423:51	18	tif
LEAF_NODE	4423:54	4423:54	16	,
ARGUMENT	4424:6	4424:6	16	dp -> tdir_tag
FIELD	4424:6	4424:10	17	dp -> tdir_tag
LEAF_NODE	4424:6	4424:6	18	dp
LEAF_NODE	4424:8	4424:8	18	->
LEAF_NODE	4424:10	4424:10	18	tdir_tag
LEAF_NODE	4424:18	4424:18	16	,
ARGUMENT	4425:6	4425:21	16	( TIFFDataType ) dp -> tdir_type
LEAF_NODE	4425:6	4425:6	17	(
TYPE_NAME	4425:7	4425:7	17	TIFFDataType
LEAF_NODE	4425:7	4425:7	18	TIFFDataType
LEAF_NODE	4425:19	4425:19	17	)
FIELD	4425:21	4425:25	17	dp -> tdir_type
LEAF_NODE	4425:21	4425:21	18	dp
LEAF_NODE	4425:23	4425:23	18	->
LEAF_NODE	4425:25	4425:25	18	tdir_type
LEAF_NODE	4425:34	4425:34	16	)
LEAF_NODE	4425:35	4425:35	14	,
ARGUMENT	4426:10	4426:10	14	1
FIELD	4426:10	4426:10	15	1
LEAF_NODE	4426:10	4426:10	16	1
LEAF_NODE	4426:11	4426:11	14	)
LEAF_NODE	4426:12	4426:12	10	)
STATEMENTS	4426:14	4431:3	10	
LEAF_NODE	4426:14	4426:14	11	{
STATEMENTS	4427:4	4430:4	11	
EXPR_STATEMENT	4427:4	4429:35	12	TIFFWarningExt ( tif -> tif_clientdata , module , "Registering anonymous field with tag %d (0x%x) failed" , dp -> tdir_tag , dp -> tdir_tag ) ;
EXPR	4427:4	4427:4	13	TIFFWarningExt ( tif -> tif_clientdata , module , "Registering anonymous field with tag %d (0x%x) failed" , dp -> tdir_tag , dp -> tdir_tag )
FUNCTION_CALL	4427:4	4429:34	14	TIFFWarningExt ( tif -> tif_clientdata , module , "Registering anonymous field with tag %d (0x%x) failed" , dp -> tdir_tag , dp -> tdir_tag )
CALLEE	4427:4	4427:4	15	TIFFWarningExt
LEAF_NODE	4427:4	4427:4	16	TIFFWarningExt
LEAF_NODE	4427:18	4427:18	15	(
ARGUMENT	4427:19	4427:19	15	tif -> tif_clientdata
FIELD	4427:19	4427:24	16	tif -> tif_clientdata
LEAF_NODE	4427:19	4427:19	17	tif
LEAF_NODE	4427:22	4427:22	17	->
LEAF_NODE	4427:24	4427:24	17	tif_clientdata
LEAF_NODE	4427:38	4427:38	15	,
ARGUMENT	4427:40	4427:40	15	module
FIELD	4427:40	4427:40	16	module
LEAF_NODE	4427:40	4427:40	17	module
LEAF_NODE	4427:46	4427:46	15	,
ARGUMENT	4428:8	4428:8	15	"Registering anonymous field with tag %d (0x%x) failed"
FIELD	4428:8	4428:8	16	"Registering anonymous field with tag %d (0x%x) failed"
LEAF_NODE	4428:8	4428:8	17	"Registering anonymous field with tag %d (0x%x) failed"
LEAF_NODE	4428:63	4428:63	15	,
ARGUMENT	4429:8	4429:8	15	dp -> tdir_tag
FIELD	4429:8	4429:12	16	dp -> tdir_tag
LEAF_NODE	4429:8	4429:8	17	dp
LEAF_NODE	4429:10	4429:10	17	->
LEAF_NODE	4429:12	4429:12	17	tdir_tag
LEAF_NODE	4429:20	4429:20	15	,
ARGUMENT	4429:22	4429:22	15	dp -> tdir_tag
FIELD	4429:22	4429:26	16	dp -> tdir_tag
LEAF_NODE	4429:22	4429:22	17	dp
LEAF_NODE	4429:24	4429:24	17	->
LEAF_NODE	4429:26	4429:26	17	tdir_tag
LEAF_NODE	4429:34	4429:34	15	)
LEAF_NODE	4429:35	4429:35	13	;
EXPR_STATEMENT	4430:4	4430:26	12	dp -> tdir_ignore = TRUE ;
EXPR	4430:4	4430:4	13	dp -> tdir_ignore = TRUE
ASSIGN	4430:4	4430:22	14	dp -> tdir_ignore = TRUE
LVAL	4430:4	4430:4	15	dp -> tdir_ignore
FIELD	4430:4	4430:8	16	dp -> tdir_ignore
LEAF_NODE	4430:4	4430:4	17	dp
LEAF_NODE	4430:6	4430:6	17	->
LEAF_NODE	4430:8	4430:8	17	tdir_ignore
ASSIGN_OP	4430:20	4430:20	15	=
LEAF_NODE	4430:20	4430:20	16	=
RVAL	4430:22	4430:22	15	TRUE
FIELD	4430:22	4430:22	16	TRUE
LEAF_NODE	4430:22	4430:22	17	TRUE
LEAF_NODE	4430:26	4430:26	13	;
LEAF_NODE	4431:3	4431:3	11	}
SELECTION	4431:5	4431:10	9	
KEYWORD	4431:5	4431:5	10	else
LEAF_NODE	4431:5	4431:5	11	else
STATEMENTS	4431:10	4434:3	10	
LEAF_NODE	4431:10	4431:10	11	{
STATEMENTS	4432:4	4433:4	11	
EXPR_STATEMENT	4432:4	4432:57	12	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii ) ;
EXPR	4432:4	4432:4	13	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
FUNCTION_CALL	4432:4	4432:56	14	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
CALLEE	4432:4	4432:4	15	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	4432:4	4432:4	16	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	4432:34	4432:34	15	(
ARGUMENT	4432:35	4432:35	15	tif
FIELD	4432:35	4432:35	16	tif
LEAF_NODE	4432:35	4432:35	17	tif
LEAF_NODE	4432:38	4432:38	15	,
ARGUMENT	4432:39	4432:39	15	dp -> tdir_tag
FIELD	4432:39	4432:43	16	dp -> tdir_tag
LEAF_NODE	4432:39	4432:39	17	dp
LEAF_NODE	4432:41	4432:41	17	->
LEAF_NODE	4432:43	4432:43	17	tdir_tag
LEAF_NODE	4432:51	4432:51	15	,
ARGUMENT	4432:52	4432:52	15	& fii
UNARY_EXPR	4432:52	4432:53	16	& fii
UNARY_OPERATOR	4432:52	4432:52	17	&
LEAF_NODE	4432:52	4432:52	18	&
FIELD	4432:53	4432:53	17	fii
LEAF_NODE	4432:53	4432:53	18	fii
LEAF_NODE	4432:56	4432:56	15	)
LEAF_NODE	4432:57	4432:57	13	;
EXPR_STATEMENT	4433:4	4433:31	12	assert ( fii != FAILED_FII ) ;
EXPR	4433:4	4433:4	13	assert ( fii != FAILED_FII )
FUNCTION_CALL	4433:4	4433:30	14	assert ( fii != FAILED_FII )
CALLEE	4433:4	4433:4	15	assert
LEAF_NODE	4433:4	4433:4	16	assert
LEAF_NODE	4433:10	4433:10	15	(
ARGUMENT	4433:12	4433:19	15	fii != FAILED_FII
FIELD	4433:12	4433:12	16	fii
LEAF_NODE	4433:12	4433:12	17	fii
EQ_OPERATOR	4433:16	4433:16	16	!=
LEAF_NODE	4433:16	4433:16	17	!=
FIELD	4433:19	4433:19	16	FAILED_FII
LEAF_NODE	4433:19	4433:19	17	FAILED_FII
LEAF_NODE	4433:30	4433:30	15	)
LEAF_NODE	4433:31	4433:31	13	;
LEAF_NODE	4434:3	4434:3	11	}
LEAF_NODE	4435:2	4435:2	8	}
SELECTION	4436:2	4437:2	6	
KEYWORD	4436:2	4436:2	7	if
LEAF_NODE	4436:2	4436:2	8	if
LEAF_NODE	4436:5	4436:5	7	(
CONDITION	4436:6	4436:6	7	! dp -> tdir_ignore
EXPR	4436:6	4436:6	8	! dp -> tdir_ignore
UNARY_EXPR	4436:6	4436:7	9	! dp -> tdir_ignore
UNARY_OPERATOR	4436:6	4436:6	10	!
LEAF_NODE	4436:6	4436:6	11	!
FIELD	4436:7	4436:11	10	dp -> tdir_ignore
LEAF_NODE	4436:7	4436:7	11	dp
LEAF_NODE	4436:9	4436:9	11	->
LEAF_NODE	4436:11	4436:11	11	tdir_ignore
LEAF_NODE	4436:22	4436:22	7	)
STATEMENTS	4437:2	4489:2	7	
LEAF_NODE	4437:2	4437:2	8	{
STATEMENTS	4438:3	4478:3	8	
EXPR_STATEMENT	4438:3	4438:27	9	fip = tif -> tif_fields [ fii ] ;
EXPR	4438:3	4438:3	10	fip = tif -> tif_fields [ fii ]
ASSIGN	4438:3	4438:7	11	fip = tif -> tif_fields [ fii ]
LVAL	4438:3	4438:3	12	fip
FIELD	4438:3	4438:3	13	fip
LEAF_NODE	4438:3	4438:3	14	fip
ASSIGN_OP	4438:6	4438:6	12	=
LEAF_NODE	4438:6	4438:6	13	=
RVAL	4438:7	4438:7	12	tif -> tif_fields [ fii ]
FIELD	4438:7	4438:26	13	tif -> tif_fields [ fii ]
LEAF_NODE	4438:7	4438:7	14	tif
LEAF_NODE	4438:10	4438:10	14	->
LEAF_NODE	4438:12	4438:12	14	tif_fields
LEAF_NODE	4438:22	4438:22	14	[
EXPR	4438:23	4438:23	14	fii
FIELD	4438:23	4438:23	15	fii
LEAF_NODE	4438:23	4438:23	16	fii
LEAF_NODE	4438:26	4438:26	14	]
LEAF_NODE	4438:27	4438:27	10	;
SELECTION	4439:3	4440:4	9	
KEYWORD	4439:3	4439:3	10	if
LEAF_NODE	4439:3	4439:3	11	if
LEAF_NODE	4439:6	4439:6	10	(
CONDITION	4439:7	4439:7	10	fip -> field_bit == FIELD_IGNORE
EXPR	4439:7	4439:23	11	fip -> field_bit == FIELD_IGNORE
FIELD	4439:7	4439:12	12	fip -> field_bit
LEAF_NODE	4439:7	4439:7	13	fip
LEAF_NODE	4439:10	4439:10	13	->
LEAF_NODE	4439:12	4439:12	13	field_bit
EQ_OPERATOR	4439:21	4439:21	12	==
LEAF_NODE	4439:21	4439:21	13	==
FIELD	4439:23	4439:23	12	FIELD_IGNORE
LEAF_NODE	4439:23	4439:23	13	FIELD_IGNORE
LEAF_NODE	4439:35	4439:35	10	)
STATEMENTS	4440:4	4440:4	10	
EXPR_STATEMENT	4440:4	4440:26	11	dp -> tdir_ignore = TRUE ;
EXPR	4440:4	4440:4	12	dp -> tdir_ignore = TRUE
ASSIGN	4440:4	4440:22	13	dp -> tdir_ignore = TRUE
LVAL	4440:4	4440:4	14	dp -> tdir_ignore
FIELD	4440:4	4440:8	15	dp -> tdir_ignore
LEAF_NODE	4440:4	4440:4	16	dp
LEAF_NODE	4440:6	4440:6	16	->
LEAF_NODE	4440:8	4440:8	16	tdir_ignore
ASSIGN_OP	4440:20	4440:20	14	=
LEAF_NODE	4440:20	4440:20	15	=
RVAL	4440:22	4440:22	14	TRUE
FIELD	4440:22	4440:22	15	TRUE
LEAF_NODE	4440:22	4440:22	16	TRUE
LEAF_NODE	4440:26	4440:26	12	;
SELECTION	4441:3	4442:3	9	
KEYWORD	4441:3	4441:3	10	else
LEAF_NODE	4441:3	4441:3	11	else
STATEMENTS	4442:3	4477:3	10	
LEAF_NODE	4442:3	4442:3	11	{
STATEMENTS	4444:4	4462:4	11	
ITERATION	4444:4	4445:4	12	
KEYWORD	4444:4	4444:4	13	while
LEAF_NODE	4444:4	4444:4	14	while
LEAF_NODE	4444:10	4444:10	13	(
CONDITION	4444:11	4444:11	13	( fip -> field_type != TIFF_ANY ) && ( fip -> field_type != dp -> tdir_type )
EXPR	4444:11	4444:11	14	( fip -> field_type != TIFF_ANY ) && ( fip -> field_type != dp -> tdir_type )
AND	4444:11	4444:40	15	( fip -> field_type != TIFF_ANY ) && ( fip -> field_type != dp -> tdir_type )
EXPR	4444:11	4444:37	16	( fip -> field_type != TIFF_ANY )
LEAF_NODE	4444:11	4444:11	17	(
FIELD	4444:12	4444:17	17	fip -> field_type
LEAF_NODE	4444:12	4444:12	18	fip
LEAF_NODE	4444:15	4444:15	18	->
LEAF_NODE	4444:17	4444:17	18	field_type
EQ_OPERATOR	4444:27	4444:27	17	!=
LEAF_NODE	4444:27	4444:27	18	!=
FIELD	4444:29	4444:29	17	TIFF_ANY
LEAF_NODE	4444:29	4444:29	18	TIFF_ANY
LEAF_NODE	4444:37	4444:37	17	)
LEAF_NODE	4444:38	4444:38	16	&&
EXPR	4444:40	4444:71	16	( fip -> field_type != dp -> tdir_type )
LEAF_NODE	4444:40	4444:40	17	(
FIELD	4444:41	4444:46	17	fip -> field_type
LEAF_NODE	4444:41	4444:41	18	fip
LEAF_NODE	4444:44	4444:44	18	->
LEAF_NODE	4444:46	4444:46	18	field_type
EQ_OPERATOR	4444:56	4444:56	17	!=
LEAF_NODE	4444:56	4444:56	18	!=
FIELD	4444:58	4444:62	17	dp -> tdir_type
LEAF_NODE	4444:58	4444:58	18	dp
LEAF_NODE	4444:60	4444:60	18	->
LEAF_NODE	4444:62	4444:62	18	tdir_type
LEAF_NODE	4444:71	4444:71	17	)
LEAF_NODE	4444:72	4444:72	13	)
STATEMENTS	4445:4	4454:4	13	
LEAF_NODE	4445:4	4445:4	14	{
STATEMENTS	4446:5	4453:5	14	
EXPR_STATEMENT	4446:5	4446:10	15	fii ++ ;
EXPR	4446:5	4446:5	16	fii ++
FIELD	4446:5	4446:8	17	fii ++
LEAF_NODE	4446:5	4446:5	18	fii
LEAF_NODE	4446:8	4446:8	18	++
LEAF_NODE	4446:10	4446:10	16	;
SELECTION	4447:5	4449:5	15	
KEYWORD	4447:5	4447:5	16	if
LEAF_NODE	4447:5	4447:5	17	if
LEAF_NODE	4447:8	4447:8	16	(
CONDITION	4447:9	4447:9	16	( fii == tif -> tif_nfields ) || ( tif -> tif_fields [ fii ] -> field_tag != ( uint32 ) dp -> tdir_tag )
EXPR	4447:9	4447:9	17	( fii == tif -> tif_nfields ) || ( tif -> tif_fields [ fii ] -> field_tag != ( uint32 ) dp -> tdir_tag )
OR	4447:9	4448:9	18	( fii == tif -> tif_nfields ) || ( tif -> tif_fields [ fii ] -> field_tag != ( uint32 ) dp -> tdir_tag )
EXPR	4447:9	4447:31	19	( fii == tif -> tif_nfields )
LEAF_NODE	4447:9	4447:9	20	(
FIELD	4447:10	4447:10	20	fii
LEAF_NODE	4447:10	4447:10	21	fii
EQ_OPERATOR	4447:13	4447:13	20	==
LEAF_NODE	4447:13	4447:13	21	==
FIELD	4447:15	4447:20	20	tif -> tif_nfields
LEAF_NODE	4447:15	4447:15	21	tif
LEAF_NODE	4447:18	4447:18	21	->
LEAF_NODE	4447:20	4447:20	21	tif_nfields
LEAF_NODE	4447:31	4447:31	20	)
LEAF_NODE	4447:32	4447:32	19	||
EXPR	4448:9	4448:63	19	( tif -> tif_fields [ fii ] -> field_tag != ( uint32 ) dp -> tdir_tag )
LEAF_NODE	4448:9	4448:9	20	(
FIELD	4448:10	4448:32	20	tif -> tif_fields [ fii ] -> field_tag
LEAF_NODE	4448:10	4448:10	21	tif
LEAF_NODE	4448:13	4448:13	21	->
LEAF_NODE	4448:15	4448:15	21	tif_fields
LEAF_NODE	4448:25	4448:25	21	[
EXPR	4448:26	4448:26	21	fii
FIELD	4448:26	4448:26	22	fii
LEAF_NODE	4448:26	4448:26	23	fii
LEAF_NODE	4448:29	4448:29	21	]
LEAF_NODE	4448:30	4448:30	21	->
LEAF_NODE	4448:32	4448:32	21	field_tag
EQ_OPERATOR	4448:41	4448:41	20	!=
LEAF_NODE	4448:41	4448:41	21	!=
LEAF_NODE	4448:43	4448:43	20	(
TYPE_NAME	4448:44	4448:44	20	uint32
LEAF_NODE	4448:44	4448:44	21	uint32
LEAF_NODE	4448:50	4448:50	20	)
FIELD	4448:51	4448:55	20	dp -> tdir_tag
LEAF_NODE	4448:51	4448:51	21	dp
LEAF_NODE	4448:53	4448:53	21	->
LEAF_NODE	4448:55	4448:55	21	tdir_tag
LEAF_NODE	4448:63	4448:63	20	)
LEAF_NODE	4448:64	4448:64	16	)
STATEMENTS	4449:5	4452:5	16	
LEAF_NODE	4449:5	4449:5	17	{
STATEMENTS	4450:6	4451:6	17	
EXPR_STATEMENT	4450:6	4450:16	18	fii = 0xFFFF ;
EXPR	4450:6	4450:6	19	fii = 0xFFFF
ASSIGN	4450:6	4450:10	20	fii = 0xFFFF
LVAL	4450:6	4450:6	21	fii
FIELD	4450:6	4450:6	22	fii
LEAF_NODE	4450:6	4450:6	23	fii
ASSIGN_OP	4450:9	4450:9	21	=
LEAF_NODE	4450:9	4450:9	22	=
RVAL	4450:10	4450:10	21	0xFFFF
FIELD	4450:10	4450:10	22	0xFFFF
LEAF_NODE	4450:10	4450:10	23	0xFFFF
LEAF_NODE	4450:16	4450:16	19	;
JUMP_STATEMENT	4451:6	4451:11	18	break DESTINATION ;
KEYWORD	4451:6	4451:6	19	break
LEAF_NODE	4451:6	4451:6	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	4451:11	4451:11	19	;
LEAF_NODE	4452:5	4452:5	17	}
EXPR_STATEMENT	4453:5	4453:29	15	fip = tif -> tif_fields [ fii ] ;
EXPR	4453:5	4453:5	16	fip = tif -> tif_fields [ fii ]
ASSIGN	4453:5	4453:9	17	fip = tif -> tif_fields [ fii ]
LVAL	4453:5	4453:5	18	fip
FIELD	4453:5	4453:5	19	fip
LEAF_NODE	4453:5	4453:5	20	fip
ASSIGN_OP	4453:8	4453:8	18	=
LEAF_NODE	4453:8	4453:8	19	=
RVAL	4453:9	4453:9	18	tif -> tif_fields [ fii ]
FIELD	4453:9	4453:28	19	tif -> tif_fields [ fii ]
LEAF_NODE	4453:9	4453:9	20	tif
LEAF_NODE	4453:12	4453:12	20	->
LEAF_NODE	4453:14	4453:14	20	tif_fields
LEAF_NODE	4453:24	4453:24	20	[
EXPR	4453:25	4453:25	20	fii
FIELD	4453:25	4453:25	21	fii
LEAF_NODE	4453:25	4453:25	22	fii
LEAF_NODE	4453:28	4453:28	20	]
LEAF_NODE	4453:29	4453:29	16	;
LEAF_NODE	4454:4	4454:4	14	}
SELECTION	4455:4	4456:4	12	
KEYWORD	4455:4	4455:4	13	if
LEAF_NODE	4455:4	4455:4	14	if
LEAF_NODE	4455:7	4455:7	13	(
CONDITION	4455:8	4455:8	13	fii == 0xFFFF
EXPR	4455:8	4455:13	14	fii == 0xFFFF
FIELD	4455:8	4455:8	15	fii
LEAF_NODE	4455:8	4455:8	16	fii
EQ_OPERATOR	4455:11	4455:11	15	==
LEAF_NODE	4455:11	4455:11	16	==
FIELD	4455:13	4455:13	15	0xFFFF
LEAF_NODE	4455:13	4455:13	16	0xFFFF
LEAF_NODE	4455:19	4455:19	13	)
STATEMENTS	4456:4	4461:4	13	
LEAF_NODE	4456:4	4456:4	14	{
STATEMENTS	4457:5	4460:5	14	
EXPR_STATEMENT	4457:5	4459:39	15	TIFFWarningExt ( tif -> tif_clientdata , module , "Wrong data type %d for \"%s\"; tag ignored" , dp -> tdir_type , fip -> field_name ) ;
EXPR	4457:5	4457:5	16	TIFFWarningExt ( tif -> tif_clientdata , module , "Wrong data type %d for \"%s\"; tag ignored" , dp -> tdir_type , fip -> field_name )
FUNCTION_CALL	4457:5	4459:38	17	TIFFWarningExt ( tif -> tif_clientdata , module , "Wrong data type %d for \"%s\"; tag ignored" , dp -> tdir_type , fip -> field_name )
CALLEE	4457:5	4457:5	18	TIFFWarningExt
LEAF_NODE	4457:5	4457:5	19	TIFFWarningExt
LEAF_NODE	4457:19	4457:19	18	(
ARGUMENT	4457:20	4457:20	18	tif -> tif_clientdata
FIELD	4457:20	4457:25	19	tif -> tif_clientdata
LEAF_NODE	4457:20	4457:20	20	tif
LEAF_NODE	4457:23	4457:23	20	->
LEAF_NODE	4457:25	4457:25	20	tif_clientdata
LEAF_NODE	4457:39	4457:39	18	,
ARGUMENT	4457:41	4457:41	18	module
FIELD	4457:41	4457:41	19	module
LEAF_NODE	4457:41	4457:41	20	module
LEAF_NODE	4457:47	4457:47	18	,
ARGUMENT	4458:9	4458:9	18	"Wrong data type %d for \"%s\"; tag ignored"
FIELD	4458:9	4458:9	19	"Wrong data type %d for \"%s\"; tag ignored"
LEAF_NODE	4458:9	4458:9	20	"Wrong data type %d for \"%s\"; tag ignored"
LEAF_NODE	4458:53	4458:53	18	,
ARGUMENT	4459:9	4459:9	18	dp -> tdir_type
FIELD	4459:9	4459:13	19	dp -> tdir_type
LEAF_NODE	4459:9	4459:9	20	dp
LEAF_NODE	4459:11	4459:11	20	->
LEAF_NODE	4459:13	4459:13	20	tdir_type
LEAF_NODE	4459:22	4459:22	18	,
ARGUMENT	4459:23	4459:23	18	fip -> field_name
FIELD	4459:23	4459:28	19	fip -> field_name
LEAF_NODE	4459:23	4459:23	20	fip
LEAF_NODE	4459:26	4459:26	20	->
LEAF_NODE	4459:28	4459:28	20	field_name
LEAF_NODE	4459:38	4459:38	18	)
LEAF_NODE	4459:39	4459:39	16	;
EXPR_STATEMENT	4460:5	4460:27	15	dp -> tdir_ignore = TRUE ;
EXPR	4460:5	4460:5	16	dp -> tdir_ignore = TRUE
ASSIGN	4460:5	4460:23	17	dp -> tdir_ignore = TRUE
LVAL	4460:5	4460:5	18	dp -> tdir_ignore
FIELD	4460:5	4460:9	19	dp -> tdir_ignore
LEAF_NODE	4460:5	4460:5	20	dp
LEAF_NODE	4460:7	4460:7	20	->
LEAF_NODE	4460:9	4460:9	20	tdir_ignore
ASSIGN_OP	4460:21	4460:21	18	=
LEAF_NODE	4460:21	4460:21	19	=
RVAL	4460:23	4460:23	18	TRUE
FIELD	4460:23	4460:23	19	TRUE
LEAF_NODE	4460:23	4460:23	20	TRUE
LEAF_NODE	4460:27	4460:27	16	;
LEAF_NODE	4461:4	4461:4	14	}
SELECTION	4462:4	4463:4	12	
KEYWORD	4462:4	4462:4	13	else
LEAF_NODE	4462:4	4462:4	14	else
STATEMENTS	4463:4	4476:4	13	
LEAF_NODE	4463:4	4463:4	14	{
STATEMENTS	4465:5	4465:5	14	
SELECTION	4465:5	4467:5	15	
KEYWORD	4465:5	4465:5	16	if
LEAF_NODE	4465:5	4465:5	17	if
LEAF_NODE	4465:8	4465:8	16	(
CONDITION	4465:9	4465:9	16	( fip -> field_readcount != TIFF_VARIABLE ) && ( fip -> field_readcount != TIFF_VARIABLE2 )
EXPR	4465:9	4465:9	17	( fip -> field_readcount != TIFF_VARIABLE ) && ( fip -> field_readcount != TIFF_VARIABLE2 )
AND	4465:9	4466:9	18	( fip -> field_readcount != TIFF_VARIABLE ) && ( fip -> field_readcount != TIFF_VARIABLE2 )
EXPR	4465:9	4465:45	19	( fip -> field_readcount != TIFF_VARIABLE )
LEAF_NODE	4465:9	4465:9	20	(
FIELD	4465:10	4465:15	20	fip -> field_readcount
LEAF_NODE	4465:10	4465:10	21	fip
LEAF_NODE	4465:13	4465:13	21	->
LEAF_NODE	4465:15	4465:15	21	field_readcount
EQ_OPERATOR	4465:30	4465:30	20	!=
LEAF_NODE	4465:30	4465:30	21	!=
FIELD	4465:32	4465:32	20	TIFF_VARIABLE
LEAF_NODE	4465:32	4465:32	21	TIFF_VARIABLE
LEAF_NODE	4465:45	4465:45	20	)
LEAF_NODE	4465:46	4465:46	19	&&
EXPR	4466:9	4466:46	19	( fip -> field_readcount != TIFF_VARIABLE2 )
LEAF_NODE	4466:9	4466:9	20	(
FIELD	4466:10	4466:15	20	fip -> field_readcount
LEAF_NODE	4466:10	4466:10	21	fip
LEAF_NODE	4466:13	4466:13	21	->
LEAF_NODE	4466:15	4466:15	21	field_readcount
EQ_OPERATOR	4466:30	4466:30	20	!=
LEAF_NODE	4466:30	4466:30	21	!=
FIELD	4466:32	4466:32	20	TIFF_VARIABLE2
LEAF_NODE	4466:32	4466:32	21	TIFF_VARIABLE2
LEAF_NODE	4466:46	4466:46	20	)
LEAF_NODE	4466:47	4466:47	16	)
STATEMENTS	4467:5	4475:5	16	
LEAF_NODE	4467:5	4467:5	17	{
STATEMENTS	4468:6	4473:6	17	
SIMPLE_DECL	4468:6	4468:21	18	uint32 expected ;
VAR_DECL	4468:6	4468:13	19	uint32 expected
TYPE	4468:6	4468:6	20	uint32
TYPE_NAME	4468:6	4468:6	21	uint32
LEAF_NODE	4468:6	4468:6	22	uint32
NAME	4468:13	4468:13	20	expected
LEAF_NODE	4468:13	4468:13	21	expected
LEAF_NODE	4468:21	4468:21	19	;
SELECTION	4469:6	4470:7	18	
KEYWORD	4469:6	4469:6	19	if
LEAF_NODE	4469:6	4469:6	20	if
LEAF_NODE	4469:9	4469:9	19	(
CONDITION	4469:10	4469:10	19	fip -> field_readcount == TIFF_SPP
EXPR	4469:10	4469:32	20	fip -> field_readcount == TIFF_SPP
FIELD	4469:10	4469:15	21	fip -> field_readcount
LEAF_NODE	4469:10	4469:10	22	fip
LEAF_NODE	4469:13	4469:13	22	->
LEAF_NODE	4469:15	4469:15	22	field_readcount
EQ_OPERATOR	4469:30	4469:30	21	==
LEAF_NODE	4469:30	4469:30	22	==
FIELD	4469:32	4469:32	21	TIFF_SPP
LEAF_NODE	4469:32	4469:32	22	TIFF_SPP
LEAF_NODE	4469:40	4469:40	19	)
STATEMENTS	4470:7	4470:7	19	
EXPR_STATEMENT	4470:7	4470:55	20	expected = ( uint32 ) tif -> tif_dir . td_samplesperpixel ;
EXPR	4470:7	4470:7	21	expected = ( uint32 ) tif -> tif_dir . td_samplesperpixel
ASSIGN	4470:7	4470:16	22	expected = ( uint32 ) tif -> tif_dir . td_samplesperpixel
LVAL	4470:7	4470:7	23	expected
FIELD	4470:7	4470:7	24	expected
LEAF_NODE	4470:7	4470:7	25	expected
ASSIGN_OP	4470:15	4470:15	23	=
LEAF_NODE	4470:15	4470:15	24	=
RVAL	4470:16	4470:24	23	( uint32 ) tif -> tif_dir . td_samplesperpixel
LEAF_NODE	4470:16	4470:16	24	(
TYPE_NAME	4470:17	4470:17	24	uint32
LEAF_NODE	4470:17	4470:17	25	uint32
LEAF_NODE	4470:23	4470:23	24	)
FIELD	4470:24	4470:37	24	tif -> tif_dir . td_samplesperpixel
LEAF_NODE	4470:24	4470:24	25	tif
LEAF_NODE	4470:27	4470:27	25	->
LEAF_NODE	4470:29	4470:29	25	tif_dir
LEAF_NODE	4470:36	4470:36	25	.
LEAF_NODE	4470:37	4470:37	25	td_samplesperpixel
LEAF_NODE	4470:55	4470:55	21	;
SELECTION	4471:6	4472:7	18	
KEYWORD	4471:6	4471:6	19	else
LEAF_NODE	4471:6	4471:6	20	else
STATEMENTS	4472:7	4472:7	19	
EXPR_STATEMENT	4472:7	4472:44	20	expected = ( uint32 ) fip -> field_readcount ;
EXPR	4472:7	4472:7	21	expected = ( uint32 ) fip -> field_readcount
ASSIGN	4472:7	4472:16	22	expected = ( uint32 ) fip -> field_readcount
LVAL	4472:7	4472:7	23	expected
FIELD	4472:7	4472:7	24	expected
LEAF_NODE	4472:7	4472:7	25	expected
ASSIGN_OP	4472:15	4472:15	23	=
LEAF_NODE	4472:15	4472:15	24	=
RVAL	4472:16	4472:24	23	( uint32 ) fip -> field_readcount
LEAF_NODE	4472:16	4472:16	24	(
TYPE_NAME	4472:17	4472:17	24	uint32
LEAF_NODE	4472:17	4472:17	25	uint32
LEAF_NODE	4472:23	4472:23	24	)
FIELD	4472:24	4472:29	24	fip -> field_readcount
LEAF_NODE	4472:24	4472:24	25	fip
LEAF_NODE	4472:27	4472:27	25	->
LEAF_NODE	4472:29	4472:29	25	field_readcount
LEAF_NODE	4472:44	4472:44	21	;
SELECTION	4473:6	4474:7	18	
KEYWORD	4473:6	4473:6	19	if
LEAF_NODE	4473:6	4473:6	20	if
LEAF_NODE	4473:9	4473:9	19	(
CONDITION	4473:10	4473:10	19	! CheckDirCount ( tif , dp , expected )
EXPR	4473:10	4473:10	20	! CheckDirCount ( tif , dp , expected )
UNARY_EXPR	4473:10	4473:11	21	! CheckDirCount ( tif , dp , expected )
UNARY_OPERATOR	4473:10	4473:10	22	!
LEAF_NODE	4473:10	4473:10	23	!
FUNCTION_CALL	4473:11	4473:40	22	CheckDirCount ( tif , dp , expected )
CALLEE	4473:11	4473:11	23	CheckDirCount
LEAF_NODE	4473:11	4473:11	24	CheckDirCount
LEAF_NODE	4473:24	4473:24	23	(
ARGUMENT	4473:25	4473:25	23	tif
FIELD	4473:25	4473:25	24	tif
LEAF_NODE	4473:25	4473:25	25	tif
LEAF_NODE	4473:28	4473:28	23	,
ARGUMENT	4473:29	4473:29	23	dp
FIELD	4473:29	4473:29	24	dp
LEAF_NODE	4473:29	4473:29	25	dp
LEAF_NODE	4473:31	4473:31	23	,
ARGUMENT	4473:32	4473:32	23	expected
FIELD	4473:32	4473:32	24	expected
LEAF_NODE	4473:32	4473:32	25	expected
LEAF_NODE	4473:40	4473:40	23	)
LEAF_NODE	4473:41	4473:41	19	)
STATEMENTS	4474:7	4474:7	19	
EXPR_STATEMENT	4474:7	4474:29	20	dp -> tdir_ignore = TRUE ;
EXPR	4474:7	4474:7	21	dp -> tdir_ignore = TRUE
ASSIGN	4474:7	4474:25	22	dp -> tdir_ignore = TRUE
LVAL	4474:7	4474:7	23	dp -> tdir_ignore
FIELD	4474:7	4474:11	24	dp -> tdir_ignore
LEAF_NODE	4474:7	4474:7	25	dp
LEAF_NODE	4474:9	4474:9	25	->
LEAF_NODE	4474:11	4474:11	25	tdir_ignore
ASSIGN_OP	4474:23	4474:23	23	=
LEAF_NODE	4474:23	4474:23	24	=
RVAL	4474:25	4474:25	23	TRUE
FIELD	4474:25	4474:25	24	TRUE
LEAF_NODE	4474:25	4474:25	25	TRUE
LEAF_NODE	4474:29	4474:29	21	;
LEAF_NODE	4475:5	4475:5	17	}
LEAF_NODE	4476:4	4476:4	14	}
LEAF_NODE	4477:3	4477:3	11	}
SELECTION	4478:3	4478:25	9	
KEYWORD	4478:3	4478:3	10	if
LEAF_NODE	4478:3	4478:3	11	if
LEAF_NODE	4478:6	4478:6	10	(
CONDITION	4478:7	4478:7	10	! dp -> tdir_ignore
EXPR	4478:7	4478:7	11	! dp -> tdir_ignore
UNARY_EXPR	4478:7	4478:8	12	! dp -> tdir_ignore
UNARY_OPERATOR	4478:7	4478:7	13	!
LEAF_NODE	4478:7	4478:7	14	!
FIELD	4478:8	4478:12	13	dp -> tdir_ignore
LEAF_NODE	4478:8	4478:8	14	dp
LEAF_NODE	4478:10	4478:10	14	->
LEAF_NODE	4478:12	4478:12	14	tdir_ignore
LEAF_NODE	4478:23	4478:23	10	)
STATEMENTS	4478:25	4488:3	10	
LEAF_NODE	4478:25	4478:25	11	{
STATEMENTS	4479:4	4479:4	11	
SELECTION	4479:4	4480:4	12	
KEYWORD	4479:4	4479:4	13	switch
LEAF_NODE	4479:4	4479:4	14	switch
LEAF_NODE	4479:11	4479:11	13	(
CONDITION	4479:12	4479:12	13	dp -> tdir_tag
EXPR	4479:12	4479:12	14	dp -> tdir_tag
FIELD	4479:12	4479:16	15	dp -> tdir_tag
LEAF_NODE	4479:12	4479:12	16	dp
LEAF_NODE	4479:14	4479:14	16	->
LEAF_NODE	4479:16	4479:16	16	tdir_tag
LEAF_NODE	4479:24	4479:24	13	)
STATEMENTS	4480:4	4487:4	13	
LEAF_NODE	4480:4	4480:4	14	{
STATEMENTS	4481:5	4486:6	14	
LABEL	4481:5	4481:33	15	case EXIFTAG_SUBJECTDISTANCE :
LEAF_NODE	4481:5	4481:5	16	case
LEAF_NODE	4481:10	4481:10	16	EXIFTAG_SUBJECTDISTANCE
LEAF_NODE	4481:33	4481:33	16	:
EXPR_STATEMENT	4482:6	4482:45	15	( void ) TIFFFetchSubjectDistance ( tif , dp ) ;
EXPR	4482:6	4482:12	16	( void ) TIFFFetchSubjectDistance ( tif , dp )
LEAF_NODE	4482:6	4482:6	17	(
TYPE_NAME	4482:7	4482:7	17	void
LEAF_NODE	4482:7	4482:7	18	void
LEAF_NODE	4482:11	4482:11	17	)
FUNCTION_CALL	4482:12	4482:44	17	TIFFFetchSubjectDistance ( tif , dp )
CALLEE	4482:12	4482:12	18	TIFFFetchSubjectDistance
LEAF_NODE	4482:12	4482:12	19	TIFFFetchSubjectDistance
LEAF_NODE	4482:36	4482:36	18	(
ARGUMENT	4482:37	4482:37	18	tif
FIELD	4482:37	4482:37	19	tif
LEAF_NODE	4482:37	4482:37	20	tif
LEAF_NODE	4482:40	4482:40	18	,
ARGUMENT	4482:42	4482:42	18	dp
FIELD	4482:42	4482:42	19	dp
LEAF_NODE	4482:42	4482:42	20	dp
LEAF_NODE	4482:44	4482:44	18	)
LEAF_NODE	4482:45	4482:45	16	;
JUMP_STATEMENT	4483:6	4483:11	15	break DESTINATION ;
KEYWORD	4483:6	4483:6	16	break
LEAF_NODE	4483:6	4483:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	4483:11	4483:11	16	;
LABEL	4484:5	4484:12	15	default :
LEAF_NODE	4484:5	4484:5	16	default
LEAF_NODE	4484:12	4484:12	16	:
EXPR_STATEMENT	4485:6	4485:45	15	( void ) TIFFFetchNormalTag ( tif , dp , TRUE ) ;
EXPR	4485:6	4485:12	16	( void ) TIFFFetchNormalTag ( tif , dp , TRUE )
LEAF_NODE	4485:6	4485:6	17	(
TYPE_NAME	4485:7	4485:7	17	void
LEAF_NODE	4485:7	4485:7	18	void
LEAF_NODE	4485:11	4485:11	17	)
FUNCTION_CALL	4485:12	4485:44	17	TIFFFetchNormalTag ( tif , dp , TRUE )
CALLEE	4485:12	4485:12	18	TIFFFetchNormalTag
LEAF_NODE	4485:12	4485:12	19	TIFFFetchNormalTag
LEAF_NODE	4485:30	4485:30	18	(
ARGUMENT	4485:31	4485:31	18	tif
FIELD	4485:31	4485:31	19	tif
LEAF_NODE	4485:31	4485:31	20	tif
LEAF_NODE	4485:34	4485:34	18	,
ARGUMENT	4485:36	4485:36	18	dp
FIELD	4485:36	4485:36	19	dp
LEAF_NODE	4485:36	4485:36	20	dp
LEAF_NODE	4485:38	4485:38	18	,
ARGUMENT	4485:40	4485:40	18	TRUE
FIELD	4485:40	4485:40	19	TRUE
LEAF_NODE	4485:40	4485:40	20	TRUE
LEAF_NODE	4485:44	4485:44	18	)
LEAF_NODE	4485:45	4485:45	16	;
JUMP_STATEMENT	4486:6	4486:11	15	break DESTINATION ;
KEYWORD	4486:6	4486:6	16	break
LEAF_NODE	4486:6	4486:6	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	4486:11	4486:11	16	;
LEAF_NODE	4487:4	4487:4	14	}
LEAF_NODE	4488:3	4488:3	11	}
LEAF_NODE	4489:2	4489:2	8	}
LEAF_NODE	4490:1	4490:1	5	}
SELECTION	4491:1	4492:2	3	
KEYWORD	4491:1	4491:1	4	if
LEAF_NODE	4491:1	4491:1	5	if
LEAF_NODE	4491:4	4491:4	4	(
CONDITION	4491:5	4491:5	4	dir
EXPR	4491:5	4491:5	5	dir
FIELD	4491:5	4491:5	6	dir
LEAF_NODE	4491:5	4491:5	7	dir
LEAF_NODE	4491:8	4491:8	4	)
STATEMENTS	4492:2	4492:2	4	
EXPR_STATEMENT	4492:2	4492:16	5	_TIFFfree ( dir ) ;
EXPR	4492:2	4492:2	6	_TIFFfree ( dir )
FUNCTION_CALL	4492:2	4492:15	7	_TIFFfree ( dir )
CALLEE	4492:2	4492:2	8	_TIFFfree
LEAF_NODE	4492:2	4492:2	9	_TIFFfree
LEAF_NODE	4492:11	4492:11	8	(
ARGUMENT	4492:12	4492:12	8	dir
FIELD	4492:12	4492:12	9	dir
LEAF_NODE	4492:12	4492:12	10	dir
LEAF_NODE	4492:15	4492:15	8	)
LEAF_NODE	4492:16	4492:16	6	;
JUMP_STATEMENT	4493:1	4493:9	3	return 1 ;
KEYWORD	4493:1	4493:1	4	return
LEAF_NODE	4493:1	4493:1	5	return
DESTINATION	4493:8	4493:8	4	1
EXPR	4493:8	4493:8	5	1
FIELD	4493:8	4493:8	6	1
LEAF_NODE	4493:8	4493:8	7	1
LEAF_NODE	4493:9	4493:9	4	;
LEAF_NODE	4494:0	4494:0	2	}
FUNCTION_DEF	4500:0	4506:0	1	
RETURN_TYPE	4500:0	4500:0	2	int
TYPE_NAME	4500:0	4500:0	3	int
LEAF_NODE	4500:0	4500:0	4	int
FUNCTION_NAME	4501:0	4501:0	2	TIFFReadEXIFDirectory
LEAF_NODE	4501:0	4501:0	3	TIFFReadEXIFDirectory
PARAMETER_LIST	4501:21	4501:46	2	( TIFF * tif , toff_t diroff )
LEAF_NODE	4501:21	4501:21	3	(
PARAMETER_DECL	4501:22	4501:28	3	TIFF * tif
TYPE	4501:22	4501:26	4	TIFF *
TYPE_NAME	4501:22	4501:22	5	TIFF
LEAF_NODE	4501:22	4501:22	6	TIFF
POINTER	4501:26	4501:26	5	*
LEAF_NODE	4501:26	4501:26	6	*
NAME	4501:28	4501:28	4	tif
LEAF_NODE	4501:28	4501:28	5	tif
LEAF_NODE	4501:31	4501:31	3	,
PARAMETER_DECL	4501:33	4501:40	3	toff_t diroff
TYPE	4501:33	4501:33	4	toff_t
TYPE_NAME	4501:33	4501:33	5	toff_t
LEAF_NODE	4501:33	4501:33	6	toff_t
NAME	4501:40	4501:40	4	diroff
LEAF_NODE	4501:40	4501:40	5	diroff
LEAF_NODE	4501:46	4501:46	3	)
LEAF_NODE	4502:0	4502:0	2	{
STATEMENTS	4503:1	4505:1	2	
SIMPLE_DECL	4503:1	4503:37	3	const TIFFFieldArray * exifFieldArray ;
VAR_DECL	4503:1	4503:23	4	const TIFFFieldArray * exifFieldArray
TYPE	4503:1	4503:21	5	const TIFFFieldArray *
TYPE_NAME	4503:1	4503:7	6	const TIFFFieldArray
LEAF_NODE	4503:1	4503:1	7	const
LEAF_NODE	4503:7	4503:7	7	TIFFFieldArray
POINTER	4503:21	4503:21	6	*
LEAF_NODE	4503:21	4503:21	7	*
NAME	4503:23	4503:23	5	exifFieldArray
LEAF_NODE	4503:23	4503:23	6	exifFieldArray
LEAF_NODE	4503:37	4503:37	4	;
EXPR_STATEMENT	4504:1	4504:38	3	exifFieldArray = _TIFFGetExifFields ( ) ;
EXPR	4504:1	4504:1	4	exifFieldArray = _TIFFGetExifFields ( )
ASSIGN	4504:1	4504:18	5	exifFieldArray = _TIFFGetExifFields ( )
LVAL	4504:1	4504:1	6	exifFieldArray
FIELD	4504:1	4504:1	7	exifFieldArray
LEAF_NODE	4504:1	4504:1	8	exifFieldArray
ASSIGN_OP	4504:16	4504:16	6	=
LEAF_NODE	4504:16	4504:16	7	=
RVAL	4504:18	4504:18	6	_TIFFGetExifFields ( )
FUNCTION_CALL	4504:18	4504:37	7	_TIFFGetExifFields ( )
CALLEE	4504:18	4504:18	8	_TIFFGetExifFields
LEAF_NODE	4504:18	4504:18	9	_TIFFGetExifFields
LEAF_NODE	4504:36	4504:36	8	(
LEAF_NODE	4504:37	4504:37	8	)
LEAF_NODE	4504:38	4504:38	4	;
JUMP_STATEMENT	4505:1	4505:60	3	return TIFFReadCustomDirectory ( tif , diroff , exifFieldArray ) ;
KEYWORD	4505:1	4505:1	4	return
LEAF_NODE	4505:1	4505:1	5	return
DESTINATION	4505:8	4505:8	4	TIFFReadCustomDirectory ( tif , diroff , exifFieldArray )
EXPR	4505:8	4505:8	5	TIFFReadCustomDirectory ( tif , diroff , exifFieldArray )
FUNCTION_CALL	4505:8	4505:59	6	TIFFReadCustomDirectory ( tif , diroff , exifFieldArray )
CALLEE	4505:8	4505:8	7	TIFFReadCustomDirectory
LEAF_NODE	4505:8	4505:8	8	TIFFReadCustomDirectory
LEAF_NODE	4505:31	4505:31	7	(
ARGUMENT	4505:32	4505:32	7	tif
FIELD	4505:32	4505:32	8	tif
LEAF_NODE	4505:32	4505:32	9	tif
LEAF_NODE	4505:35	4505:35	7	,
ARGUMENT	4505:37	4505:37	7	diroff
FIELD	4505:37	4505:37	8	diroff
LEAF_NODE	4505:37	4505:37	9	diroff
LEAF_NODE	4505:43	4505:43	7	,
ARGUMENT	4505:45	4505:45	7	exifFieldArray
FIELD	4505:45	4505:45	8	exifFieldArray
LEAF_NODE	4505:45	4505:45	9	exifFieldArray
LEAF_NODE	4505:59	4505:59	7	)
LEAF_NODE	4505:60	4505:60	4	;
LEAF_NODE	4506:0	4506:0	2	}
FUNCTION_DEF	4508:0	4613:0	1	
RETURN_TYPE	4508:0	4508:7	2	static int
LEAF_NODE	4508:0	4508:0	3	static
TYPE_NAME	4508:7	4508:7	3	int
LEAF_NODE	4508:7	4508:7	4	int
FUNCTION_NAME	4509:0	4509:0	2	EstimateStripByteCounts
LEAF_NODE	4509:0	4509:0	3	EstimateStripByteCounts
PARAMETER_LIST	4509:23	4509:69	2	( TIFF * tif , TIFFDirEntry * dir , uint16 dircount )
LEAF_NODE	4509:23	4509:23	3	(
PARAMETER_DECL	4509:24	4509:30	3	TIFF * tif
TYPE	4509:24	4509:28	4	TIFF *
TYPE_NAME	4509:24	4509:24	5	TIFF
LEAF_NODE	4509:24	4509:24	6	TIFF
POINTER	4509:28	4509:28	5	*
LEAF_NODE	4509:28	4509:28	6	*
NAME	4509:30	4509:30	4	tif
LEAF_NODE	4509:30	4509:30	5	tif
LEAF_NODE	4509:33	4509:33	3	,
PARAMETER_DECL	4509:35	4509:49	3	TIFFDirEntry * dir
TYPE	4509:35	4509:47	4	TIFFDirEntry *
TYPE_NAME	4509:35	4509:35	5	TIFFDirEntry
LEAF_NODE	4509:35	4509:35	6	TIFFDirEntry
POINTER	4509:47	4509:47	5	*
LEAF_NODE	4509:47	4509:47	6	*
NAME	4509:49	4509:49	4	dir
LEAF_NODE	4509:49	4509:49	5	dir
LEAF_NODE	4509:52	4509:52	3	,
PARAMETER_DECL	4509:54	4509:61	3	uint16 dircount
TYPE	4509:54	4509:54	4	uint16
TYPE_NAME	4509:54	4509:54	5	uint16
LEAF_NODE	4509:54	4509:54	6	uint16
NAME	4509:61	4509:61	4	dircount
LEAF_NODE	4509:61	4509:61	5	dircount
LEAF_NODE	4509:69	4509:69	3	)
LEAF_NODE	4510:0	4510:0	2	{
STATEMENTS	4511:1	4612:1	2	
LEAF_NODE	4511:1	4511:1	3	static
SIMPLE_DECL	4511:8	4511:55	3	const char [ ] module ; module = "EstimateStripByteCounts" ;
VAR_DECL	4511:8	4511:19	4	const char [ ] module ; module = "EstimateStripByteCounts"
TYPE	4511:8	4511:25	5	const char [ ]
TYPE_NAME	4511:8	4511:14	6	const char
LEAF_NODE	4511:8	4511:8	7	const
LEAF_NODE	4511:14	4511:14	7	char
TYPE_SUFFIX	4511:25	4511:26	6	[ ]
LEAF_NODE	4511:25	4511:25	7	[
LEAF_NODE	4511:26	4511:26	7	]
NAME	4511:19	4511:19	5	module
LEAF_NODE	4511:19	4511:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	4511:19	4511:19	5	module = "EstimateStripByteCounts"
ASSIGN	4511:19	4511:30	6	module = "EstimateStripByteCounts"
LVAL	4511:19	4511:19	7	module
NAME	4511:19	4511:19	8	module
LEAF_NODE	4511:19	4511:19	9	module
ASSIGN_OP	4511:28	4511:28	7	=
LEAF_NODE	4511:28	4511:28	8	=
RVAL	4511:30	4511:30	7	"EstimateStripByteCounts"
FIELD	4511:30	4511:30	8	"EstimateStripByteCounts"
LEAF_NODE	4511:30	4511:30	9	"EstimateStripByteCounts"
LEAF_NODE	4511:55	4511:55	4	;
SIMPLE_DECL	4513:1	4513:17	3	TIFFDirEntry * dp ;
VAR_DECL	4513:1	4513:15	4	TIFFDirEntry * dp
TYPE	4513:1	4513:14	5	TIFFDirEntry *
TYPE_NAME	4513:1	4513:1	6	TIFFDirEntry
LEAF_NODE	4513:1	4513:1	7	TIFFDirEntry
POINTER	4513:14	4513:14	6	*
LEAF_NODE	4513:14	4513:14	7	*
NAME	4513:15	4513:15	5	dp
LEAF_NODE	4513:15	4513:15	6	dp
LEAF_NODE	4513:17	4513:17	4	;
SIMPLE_DECL	4514:1	4514:34	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	4514:1	4514:16	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	4514:1	4514:15	5	TIFFDirectory *
TYPE_NAME	4514:1	4514:1	6	TIFFDirectory
LEAF_NODE	4514:1	4514:1	7	TIFFDirectory
POINTER	4514:15	4514:15	6	*
LEAF_NODE	4514:15	4514:15	7	*
NAME	4514:16	4514:16	5	td
LEAF_NODE	4514:16	4514:16	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	4514:16	4514:16	5	td = & tif -> tif_dir
ASSIGN	4514:16	4514:21	6	td = & tif -> tif_dir
LVAL	4514:16	4514:16	7	td
NAME	4514:16	4514:16	8	td
LEAF_NODE	4514:16	4514:16	9	td
ASSIGN_OP	4514:19	4514:19	7	=
LEAF_NODE	4514:19	4514:19	8	=
RVAL	4514:21	4514:21	7	& tif -> tif_dir
UNARY_EXPR	4514:21	4514:22	8	& tif -> tif_dir
UNARY_OPERATOR	4514:21	4514:21	9	&
LEAF_NODE	4514:21	4514:21	10	&
FIELD	4514:22	4514:27	9	tif -> tif_dir
LEAF_NODE	4514:22	4514:22	10	tif
LEAF_NODE	4514:25	4514:25	10	->
LEAF_NODE	4514:27	4514:27	10	tif_dir
LEAF_NODE	4514:34	4514:34	4	;
SIMPLE_DECL	4515:1	4515:13	3	uint32 strip ;
VAR_DECL	4515:1	4515:8	4	uint32 strip
TYPE	4515:1	4515:1	5	uint32
TYPE_NAME	4515:1	4515:1	6	uint32
LEAF_NODE	4515:1	4515:1	7	uint32
NAME	4515:8	4515:8	5	strip
LEAF_NODE	4515:8	4515:8	6	strip
LEAF_NODE	4515:13	4515:13	4	;
SELECTION	4518:8	4519:12	3	
KEYWORD	4518:8	4518:8	4	if
LEAF_NODE	4518:8	4518:8	5	if
LEAF_NODE	4518:10	4518:10	4	(
CONDITION	4518:12	4518:12	4	! _TIFFFillStrilesInternal ( tif , 0 )
EXPR	4518:12	4518:12	5	! _TIFFFillStrilesInternal ( tif , 0 )
UNARY_EXPR	4518:12	4518:13	6	! _TIFFFillStrilesInternal ( tif , 0 )
UNARY_OPERATOR	4518:12	4518:12	7	!
LEAF_NODE	4518:12	4518:12	8	!
FUNCTION_CALL	4518:13	4518:46	7	_TIFFFillStrilesInternal ( tif , 0 )
CALLEE	4518:13	4518:13	8	_TIFFFillStrilesInternal
LEAF_NODE	4518:13	4518:13	9	_TIFFFillStrilesInternal
LEAF_NODE	4518:37	4518:37	8	(
ARGUMENT	4518:39	4518:39	8	tif
FIELD	4518:39	4518:39	9	tif
LEAF_NODE	4518:39	4518:39	10	tif
LEAF_NODE	4518:42	4518:42	8	,
ARGUMENT	4518:44	4518:44	8	0
FIELD	4518:44	4518:44	9	0
LEAF_NODE	4518:44	4518:44	10	0
LEAF_NODE	4518:46	4518:46	8	)
LEAF_NODE	4518:48	4518:48	4	)
STATEMENTS	4519:12	4519:12	4	
JUMP_STATEMENT	4519:12	4519:21	5	return - 1 ;
KEYWORD	4519:12	4519:12	6	return
LEAF_NODE	4519:12	4519:12	7	return
DESTINATION	4519:19	4519:19	6	- 1
EXPR	4519:19	4519:19	7	- 1
UNARY_EXPR	4519:19	4519:20	8	- 1
UNARY_OPERATOR	4519:19	4519:19	9	-
LEAF_NODE	4519:19	4519:19	10	-
FIELD	4519:20	4519:20	9	1
LEAF_NODE	4519:20	4519:20	10	1
LEAF_NODE	4519:21	4519:21	6	;
SELECTION	4521:1	4522:2	3	
KEYWORD	4521:1	4521:1	4	if
LEAF_NODE	4521:1	4521:1	5	if
LEAF_NODE	4521:4	4521:4	4	(
CONDITION	4521:5	4521:5	4	td -> td_stripbytecount_p
EXPR	4521:5	4521:5	5	td -> td_stripbytecount_p
FIELD	4521:5	4521:9	6	td -> td_stripbytecount_p
LEAF_NODE	4521:5	4521:5	7	td
LEAF_NODE	4521:7	4521:7	7	->
LEAF_NODE	4521:9	4521:9	7	td_stripbytecount_p
LEAF_NODE	4521:28	4521:28	4	)
STATEMENTS	4522:2	4522:2	4	
EXPR_STATEMENT	4522:2	4522:36	5	_TIFFfree ( td -> td_stripbytecount_p ) ;
EXPR	4522:2	4522:2	6	_TIFFfree ( td -> td_stripbytecount_p )
FUNCTION_CALL	4522:2	4522:35	7	_TIFFfree ( td -> td_stripbytecount_p )
CALLEE	4522:2	4522:2	8	_TIFFfree
LEAF_NODE	4522:2	4522:2	9	_TIFFfree
LEAF_NODE	4522:11	4522:11	8	(
ARGUMENT	4522:12	4522:12	8	td -> td_stripbytecount_p
FIELD	4522:12	4522:16	9	td -> td_stripbytecount_p
LEAF_NODE	4522:12	4522:12	10	td
LEAF_NODE	4522:14	4522:14	10	->
LEAF_NODE	4522:16	4522:16	10	td_stripbytecount_p
LEAF_NODE	4522:35	4522:35	8	)
LEAF_NODE	4522:36	4522:36	6	;
EXPR_STATEMENT	4523:1	4525:34	3	td -> td_stripbytecount_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" ) ;
EXPR	4523:1	4523:1	4	td -> td_stripbytecount_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
ASSIGN	4523:1	4523:27	5	td -> td_stripbytecount_p = ( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
LVAL	4523:1	4523:1	6	td -> td_stripbytecount_p
FIELD	4523:1	4523:5	7	td -> td_stripbytecount_p
LEAF_NODE	4523:1	4523:1	8	td
LEAF_NODE	4523:3	4523:3	8	->
LEAF_NODE	4523:5	4523:5	8	td_stripbytecount_p
ASSIGN_OP	4523:25	4523:25	6	=
LEAF_NODE	4523:25	4523:25	7	=
RVAL	4523:27	4524:5	6	( uint64 * ) _TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
LEAF_NODE	4523:27	4523:27	7	(
TYPE_NAME	4523:28	4523:28	7	uint64
LEAF_NODE	4523:28	4523:28	8	uint64
LEAF_NODE	4523:34	4523:34	7	*
LEAF_NODE	4523:35	4523:35	7	)
FUNCTION_CALL	4524:5	4525:33	7	_TIFFCheckMalloc ( tif , td -> td_nstrips , sizeof ( uint64 ) , "for \"StripByteCounts\" array" )
CALLEE	4524:5	4524:5	8	_TIFFCheckMalloc
LEAF_NODE	4524:5	4524:5	9	_TIFFCheckMalloc
LEAF_NODE	4524:21	4524:21	8	(
ARGUMENT	4524:22	4524:22	8	tif
FIELD	4524:22	4524:22	9	tif
LEAF_NODE	4524:22	4524:22	10	tif
LEAF_NODE	4524:25	4524:25	8	,
ARGUMENT	4524:27	4524:27	8	td -> td_nstrips
FIELD	4524:27	4524:31	9	td -> td_nstrips
LEAF_NODE	4524:27	4524:27	10	td
LEAF_NODE	4524:29	4524:29	10	->
LEAF_NODE	4524:31	4524:31	10	td_nstrips
LEAF_NODE	4524:41	4524:41	8	,
ARGUMENT	4524:43	4524:43	8	sizeof ( uint64 )
FUNCTION_CALL	4524:43	4524:57	9	sizeof ( uint64 )
CALLEE	4524:43	4524:43	10	sizeof
LEAF_NODE	4524:43	4524:43	11	sizeof
LEAF_NODE	4524:50	4524:50	10	(
ARGUMENT	4524:51	4524:51	10	uint64
FIELD	4524:51	4524:51	11	uint64
LEAF_NODE	4524:51	4524:51	12	uint64
LEAF_NODE	4524:57	4524:57	10	)
LEAF_NODE	4524:58	4524:58	8	,
ARGUMENT	4525:2	4525:2	8	"for \"StripByteCounts\" array"
FIELD	4525:2	4525:2	9	"for \"StripByteCounts\" array"
LEAF_NODE	4525:2	4525:2	10	"for \"StripByteCounts\" array"
LEAF_NODE	4525:33	4525:33	8	)
LEAF_NODE	4525:34	4525:34	4	;
SELECTION	4526:8	4527:12	3	
KEYWORD	4526:8	4526:8	4	if
LEAF_NODE	4526:8	4526:8	5	if
LEAF_NODE	4526:10	4526:10	4	(
CONDITION	4526:12	4526:12	4	td -> td_stripbytecount_p == NULL
EXPR	4526:12	4526:39	5	td -> td_stripbytecount_p == NULL
FIELD	4526:12	4526:16	6	td -> td_stripbytecount_p
LEAF_NODE	4526:12	4526:12	7	td
LEAF_NODE	4526:14	4526:14	7	->
LEAF_NODE	4526:16	4526:16	7	td_stripbytecount_p
EQ_OPERATOR	4526:36	4526:36	6	==
LEAF_NODE	4526:36	4526:36	7	==
FIELD	4526:39	4526:39	6	NULL
LEAF_NODE	4526:39	4526:39	7	NULL
LEAF_NODE	4526:44	4526:44	4	)
STATEMENTS	4527:12	4527:12	4	
JUMP_STATEMENT	4527:12	4527:21	5	return - 1 ;
KEYWORD	4527:12	4527:12	6	return
LEAF_NODE	4527:12	4527:12	7	return
DESTINATION	4527:19	4527:19	6	- 1
EXPR	4527:19	4527:19	7	- 1
UNARY_EXPR	4527:19	4527:20	8	- 1
UNARY_OPERATOR	4527:19	4527:19	9	-
LEAF_NODE	4527:19	4527:19	10	-
FIELD	4527:20	4527:20	9	1
LEAF_NODE	4527:20	4527:20	10	1
LEAF_NODE	4527:21	4527:21	6	;
SELECTION	4529:1	4529:45	3	
KEYWORD	4529:1	4529:1	4	if
LEAF_NODE	4529:1	4529:1	5	if
LEAF_NODE	4529:4	4529:4	4	(
CONDITION	4529:5	4529:5	4	td -> td_compression != COMPRESSION_NONE
EXPR	4529:5	4529:27	5	td -> td_compression != COMPRESSION_NONE
FIELD	4529:5	4529:9	6	td -> td_compression
LEAF_NODE	4529:5	4529:5	7	td
LEAF_NODE	4529:7	4529:7	7	->
LEAF_NODE	4529:9	4529:9	7	td_compression
EQ_OPERATOR	4529:24	4529:24	6	!=
LEAF_NODE	4529:24	4529:24	7	!=
FIELD	4529:27	4529:27	6	COMPRESSION_NONE
LEAF_NODE	4529:27	4529:27	7	COMPRESSION_NONE
LEAF_NODE	4529:43	4529:43	4	)
STATEMENTS	4529:45	4594:1	4	
LEAF_NODE	4529:45	4529:45	5	{
STATEMENTS	4530:2	4586:2	5	
SIMPLE_DECL	4530:2	4530:14	6	uint64 space ;
VAR_DECL	4530:2	4530:9	7	uint64 space
TYPE	4530:2	4530:2	8	uint64
TYPE_NAME	4530:2	4530:2	9	uint64
LEAF_NODE	4530:2	4530:2	10	uint64
NAME	4530:9	4530:9	8	space
LEAF_NODE	4530:9	4530:9	9	space
LEAF_NODE	4530:14	4530:14	7	;
SIMPLE_DECL	4531:2	4531:17	6	uint64 filesize ;
VAR_DECL	4531:2	4531:9	7	uint64 filesize
TYPE	4531:2	4531:2	8	uint64
TYPE_NAME	4531:2	4531:2	9	uint64
LEAF_NODE	4531:2	4531:2	10	uint64
NAME	4531:9	4531:9	8	filesize
LEAF_NODE	4531:9	4531:9	9	filesize
LEAF_NODE	4531:17	4531:17	7	;
SIMPLE_DECL	4532:2	4532:10	6	uint16 n ;
VAR_DECL	4532:2	4532:9	7	uint16 n
TYPE	4532:2	4532:2	8	uint16
TYPE_NAME	4532:2	4532:2	9	uint16
LEAF_NODE	4532:2	4532:2	10	uint16
NAME	4532:9	4532:9	8	n
LEAF_NODE	4532:9	4532:9	9	n
LEAF_NODE	4532:10	4532:10	7	;
EXPR_STATEMENT	4533:2	4533:33	6	filesize = TIFFGetFileSize ( tif ) ;
EXPR	4533:2	4533:2	7	filesize = TIFFGetFileSize ( tif )
ASSIGN	4533:2	4533:13	8	filesize = TIFFGetFileSize ( tif )
LVAL	4533:2	4533:2	9	filesize
FIELD	4533:2	4533:2	10	filesize
LEAF_NODE	4533:2	4533:2	11	filesize
ASSIGN_OP	4533:11	4533:11	9	=
LEAF_NODE	4533:11	4533:11	10	=
RVAL	4533:13	4533:13	9	TIFFGetFileSize ( tif )
FUNCTION_CALL	4533:13	4533:32	10	TIFFGetFileSize ( tif )
CALLEE	4533:13	4533:13	11	TIFFGetFileSize
LEAF_NODE	4533:13	4533:13	12	TIFFGetFileSize
LEAF_NODE	4533:28	4533:28	11	(
ARGUMENT	4533:29	4533:29	11	tif
FIELD	4533:29	4533:29	12	tif
LEAF_NODE	4533:29	4533:29	13	tif
LEAF_NODE	4533:32	4533:32	11	)
LEAF_NODE	4533:33	4533:33	7	;
SELECTION	4534:2	4535:3	6	
KEYWORD	4534:2	4534:2	7	if
LEAF_NODE	4534:2	4534:2	8	if
LEAF_NODE	4534:5	4534:5	7	(
CONDITION	4534:6	4534:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	4534:6	4534:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	4534:6	4534:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	4534:6	4534:6	10	!
LEAF_NODE	4534:6	4534:6	11	!
LEAF_NODE	4534:7	4534:7	10	(
FIELD	4534:8	4534:13	10	tif -> tif_flags
LEAF_NODE	4534:8	4534:8	11	tif
LEAF_NODE	4534:11	4534:11	11	->
LEAF_NODE	4534:13	4534:13	11	tif_flags
LEAF_NODE	4534:22	4534:22	10	&
FIELD	4534:23	4534:23	10	TIFF_BIGTIFF
LEAF_NODE	4534:23	4534:23	11	TIFF_BIGTIFF
LEAF_NODE	4534:35	4534:35	10	)
LEAF_NODE	4534:36	4534:36	7	)
STATEMENTS	4535:3	4535:3	7	
EXPR_STATEMENT	4535:3	4535:50	8	space = sizeof ( TIFFHeaderClassic ) + 2 + dircount * 12 + 4 ;
EXPR	4535:3	4535:3	9	space = sizeof ( TIFFHeaderClassic ) + 2 + dircount * 12 + 4
ASSIGN	4535:3	4535:9	10	space = sizeof ( TIFFHeaderClassic ) + 2 + dircount * 12 + 4
LVAL	4535:3	4535:3	11	space
FIELD	4535:3	4535:3	12	space
LEAF_NODE	4535:3	4535:3	13	space
ASSIGN_OP	4535:8	4535:8	11	=
LEAF_NODE	4535:8	4535:8	12	=
RVAL	4535:9	4535:49	11	sizeof ( TIFFHeaderClassic ) + 2 + dircount * 12 + 4
FUNCTION_CALL	4535:9	4535:33	12	sizeof ( TIFFHeaderClassic )
CALLEE	4535:9	4535:9	13	sizeof
LEAF_NODE	4535:9	4535:9	14	sizeof
LEAF_NODE	4535:15	4535:15	13	(
ARGUMENT	4535:16	4535:16	13	TIFFHeaderClassic
FIELD	4535:16	4535:16	14	TIFFHeaderClassic
LEAF_NODE	4535:16	4535:16	15	TIFFHeaderClassic
LEAF_NODE	4535:33	4535:33	13	)
LEAF_NODE	4535:34	4535:34	12	+
FIELD	4535:35	4535:35	12	2
LEAF_NODE	4535:35	4535:35	13	2
LEAF_NODE	4535:36	4535:36	12	+
FIELD	4535:37	4535:37	12	dircount
LEAF_NODE	4535:37	4535:37	13	dircount
LEAF_NODE	4535:45	4535:45	12	*
FIELD	4535:46	4535:46	12	12
LEAF_NODE	4535:46	4535:46	13	12
LEAF_NODE	4535:48	4535:48	12	+
FIELD	4535:49	4535:49	12	4
LEAF_NODE	4535:49	4535:49	13	4
LEAF_NODE	4535:50	4535:50	9	;
SELECTION	4536:2	4537:3	6	
KEYWORD	4536:2	4536:2	7	else
LEAF_NODE	4536:2	4536:2	8	else
STATEMENTS	4537:3	4537:3	7	
EXPR_STATEMENT	4537:3	4537:46	8	space = sizeof ( TIFFHeaderBig ) + 8 + dircount * 20 + 8 ;
EXPR	4537:3	4537:3	9	space = sizeof ( TIFFHeaderBig ) + 8 + dircount * 20 + 8
ASSIGN	4537:3	4537:9	10	space = sizeof ( TIFFHeaderBig ) + 8 + dircount * 20 + 8
LVAL	4537:3	4537:3	11	space
FIELD	4537:3	4537:3	12	space
LEAF_NODE	4537:3	4537:3	13	space
ASSIGN_OP	4537:8	4537:8	11	=
LEAF_NODE	4537:8	4537:8	12	=
RVAL	4537:9	4537:45	11	sizeof ( TIFFHeaderBig ) + 8 + dircount * 20 + 8
FUNCTION_CALL	4537:9	4537:29	12	sizeof ( TIFFHeaderBig )
CALLEE	4537:9	4537:9	13	sizeof
LEAF_NODE	4537:9	4537:9	14	sizeof
LEAF_NODE	4537:15	4537:15	13	(
ARGUMENT	4537:16	4537:16	13	TIFFHeaderBig
FIELD	4537:16	4537:16	14	TIFFHeaderBig
LEAF_NODE	4537:16	4537:16	15	TIFFHeaderBig
LEAF_NODE	4537:29	4537:29	13	)
LEAF_NODE	4537:30	4537:30	12	+
FIELD	4537:31	4537:31	12	8
LEAF_NODE	4537:31	4537:31	13	8
LEAF_NODE	4537:32	4537:32	12	+
FIELD	4537:33	4537:33	12	dircount
LEAF_NODE	4537:33	4537:33	13	dircount
LEAF_NODE	4537:41	4537:41	12	*
FIELD	4537:42	4537:42	12	20
LEAF_NODE	4537:42	4537:42	13	20
LEAF_NODE	4537:44	4537:44	12	+
FIELD	4537:45	4537:45	12	8
LEAF_NODE	4537:45	4537:45	13	8
LEAF_NODE	4537:46	4537:46	9	;
ITERATION	4539:2	4540:2	6	
KEYWORD	4539:2	4539:2	7	for
LEAF_NODE	4539:2	4539:2	8	for
LEAF_NODE	4539:6	4539:6	7	(
FOR_INIT	4539:7	4539:29	7	dp = dir , n = dircount ;
EXPR	4539:7	4539:17	8	dp = dir , n = dircount
ASSIGN	4539:7	4539:12	9	dp = dir
LVAL	4539:7	4539:7	10	dp
FIELD	4539:7	4539:7	11	dp
LEAF_NODE	4539:7	4539:7	12	dp
ASSIGN_OP	4539:10	4539:10	10	=
LEAF_NODE	4539:10	4539:10	11	=
RVAL	4539:12	4539:12	10	dir
FIELD	4539:12	4539:12	11	dir
LEAF_NODE	4539:12	4539:12	12	dir
LEAF_NODE	4539:15	4539:15	9	,
ASSIGN	4539:17	4539:21	9	n = dircount
LVAL	4539:17	4539:17	10	n
FIELD	4539:17	4539:17	11	n
LEAF_NODE	4539:17	4539:17	12	n
ASSIGN_OP	4539:19	4539:19	10	=
LEAF_NODE	4539:19	4539:19	11	=
RVAL	4539:21	4539:21	10	dircount
FIELD	4539:21	4539:21	11	dircount
LEAF_NODE	4539:21	4539:21	12	dircount
LEAF_NODE	4539:29	4539:29	8	;
CONDITION	4539:31	4539:31	7	n > 0
EXPR	4539:31	4539:35	8	n > 0
FIELD	4539:31	4539:31	9	n
LEAF_NODE	4539:31	4539:31	10	n
REL_OPERATOR	4539:33	4539:33	9	>
LEAF_NODE	4539:33	4539:33	10	>
FIELD	4539:35	4539:35	9	0
LEAF_NODE	4539:35	4539:35	10	0
LEAF_NODE	4539:36	4539:36	7	;
FOR_EXPR	4539:38	4539:38	7	n -- , dp ++
EXPR	4539:38	4539:43	8	n -- , dp ++
FIELD	4539:38	4539:39	9	n --
LEAF_NODE	4539:38	4539:38	10	n
LEAF_NODE	4539:39	4539:39	10	--
LEAF_NODE	4539:41	4539:41	9	,
FIELD	4539:43	4539:45	9	dp ++
LEAF_NODE	4539:43	4539:43	10	dp
LEAF_NODE	4539:45	4539:45	10	++
LEAF_NODE	4539:47	4539:47	7	)
STATEMENTS	4540:2	4566:2	7	
LEAF_NODE	4540:2	4540:2	8	{
STATEMENTS	4541:3	4565:3	8	
SIMPLE_DECL	4541:3	4541:19	9	uint32 typewidth ;
VAR_DECL	4541:3	4541:10	10	uint32 typewidth
TYPE	4541:3	4541:3	11	uint32
TYPE_NAME	4541:3	4541:3	12	uint32
LEAF_NODE	4541:3	4541:3	13	uint32
NAME	4541:10	4541:10	11	typewidth
LEAF_NODE	4541:10	4541:10	12	typewidth
LEAF_NODE	4541:19	4541:19	10	;
SIMPLE_DECL	4542:3	4542:18	9	uint64 datasize ;
VAR_DECL	4542:3	4542:10	10	uint64 datasize
TYPE	4542:3	4542:3	11	uint64
TYPE_NAME	4542:3	4542:3	12	uint64
LEAF_NODE	4542:3	4542:3	13	uint64
NAME	4542:10	4542:10	11	datasize
LEAF_NODE	4542:10	4542:10	12	datasize
LEAF_NODE	4542:18	4542:18	10	;
EXPR_STATEMENT	4543:3	4543:58	9	typewidth = TIFFDataWidth ( ( TIFFDataType ) dp -> tdir_type ) ;
EXPR	4543:3	4543:3	10	typewidth = TIFFDataWidth ( ( TIFFDataType ) dp -> tdir_type )
ASSIGN	4543:3	4543:15	11	typewidth = TIFFDataWidth ( ( TIFFDataType ) dp -> tdir_type )
LVAL	4543:3	4543:3	12	typewidth
FIELD	4543:3	4543:3	13	typewidth
LEAF_NODE	4543:3	4543:3	14	typewidth
ASSIGN_OP	4543:13	4543:13	12	=
LEAF_NODE	4543:13	4543:13	13	=
RVAL	4543:15	4543:15	12	TIFFDataWidth ( ( TIFFDataType ) dp -> tdir_type )
FUNCTION_CALL	4543:15	4543:57	13	TIFFDataWidth ( ( TIFFDataType ) dp -> tdir_type )
CALLEE	4543:15	4543:15	14	TIFFDataWidth
LEAF_NODE	4543:15	4543:15	15	TIFFDataWidth
LEAF_NODE	4543:28	4543:28	14	(
ARGUMENT	4543:29	4543:44	14	( TIFFDataType ) dp -> tdir_type
LEAF_NODE	4543:29	4543:29	15	(
TYPE_NAME	4543:30	4543:30	15	TIFFDataType
LEAF_NODE	4543:30	4543:30	16	TIFFDataType
LEAF_NODE	4543:42	4543:42	15	)
FIELD	4543:44	4543:48	15	dp -> tdir_type
LEAF_NODE	4543:44	4543:44	16	dp
LEAF_NODE	4543:46	4543:46	16	->
LEAF_NODE	4543:48	4543:48	16	tdir_type
LEAF_NODE	4543:57	4543:57	14	)
LEAF_NODE	4543:58	4543:58	10	;
SELECTION	4544:3	4544:23	9	
KEYWORD	4544:3	4544:3	10	if
LEAF_NODE	4544:3	4544:3	11	if
LEAF_NODE	4544:6	4544:6	10	(
CONDITION	4544:7	4544:7	10	typewidth == 0
EXPR	4544:7	4544:20	11	typewidth == 0
FIELD	4544:7	4544:7	12	typewidth
LEAF_NODE	4544:7	4544:7	13	typewidth
EQ_OPERATOR	4544:17	4544:17	12	==
LEAF_NODE	4544:17	4544:17	13	==
FIELD	4544:20	4544:20	12	0
LEAF_NODE	4544:20	4544:20	13	0
LEAF_NODE	4544:21	4544:21	10	)
STATEMENTS	4544:23	4549:3	10	
LEAF_NODE	4544:23	4544:23	11	{
STATEMENTS	4545:4	4548:4	11	
EXPR_STATEMENT	4545:4	4547:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot determine size of unknown tag type %d" , dp -> tdir_type ) ;
EXPR	4545:4	4545:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot determine size of unknown tag type %d" , dp -> tdir_type )
FUNCTION_CALL	4545:4	4547:21	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot determine size of unknown tag type %d" , dp -> tdir_type )
CALLEE	4545:4	4545:4	15	TIFFErrorExt
LEAF_NODE	4545:4	4545:4	16	TIFFErrorExt
LEAF_NODE	4545:16	4545:16	15	(
ARGUMENT	4545:17	4545:17	15	tif -> tif_clientdata
FIELD	4545:17	4545:22	16	tif -> tif_clientdata
LEAF_NODE	4545:17	4545:17	17	tif
LEAF_NODE	4545:20	4545:20	17	->
LEAF_NODE	4545:22	4545:22	17	tif_clientdata
LEAF_NODE	4545:36	4545:36	15	,
ARGUMENT	4545:38	4545:38	15	module
FIELD	4545:38	4545:38	16	module
LEAF_NODE	4545:38	4545:38	17	module
LEAF_NODE	4545:44	4545:44	15	,
ARGUMENT	4546:8	4546:8	15	"Cannot determine size of unknown tag type %d"
FIELD	4546:8	4546:8	16	"Cannot determine size of unknown tag type %d"
LEAF_NODE	4546:8	4546:8	17	"Cannot determine size of unknown tag type %d"
LEAF_NODE	4546:54	4546:54	15	,
ARGUMENT	4547:8	4547:8	15	dp -> tdir_type
FIELD	4547:8	4547:12	16	dp -> tdir_type
LEAF_NODE	4547:8	4547:8	17	dp
LEAF_NODE	4547:10	4547:10	17	->
LEAF_NODE	4547:12	4547:12	17	tdir_type
LEAF_NODE	4547:21	4547:21	15	)
LEAF_NODE	4547:22	4547:22	13	;
JUMP_STATEMENT	4548:4	4548:13	12	return - 1 ;
KEYWORD	4548:4	4548:4	13	return
LEAF_NODE	4548:4	4548:4	14	return
DESTINATION	4548:11	4548:11	13	- 1
EXPR	4548:11	4548:11	14	- 1
UNARY_EXPR	4548:11	4548:12	15	- 1
UNARY_OPERATOR	4548:11	4548:11	16	-
LEAF_NODE	4548:11	4548:11	17	-
FIELD	4548:12	4548:12	16	1
LEAF_NODE	4548:12	4548:12	17	1
LEAF_NODE	4548:13	4548:13	13	;
LEAF_NODE	4549:3	4549:3	11	}
SELECTION	4550:3	4551:28	9	
KEYWORD	4550:3	4550:3	10	if
LEAF_NODE	4550:3	4550:3	11	if
LEAF_NODE	4550:5	4550:5	10	(
CONDITION	4550:7	4550:7	10	dp -> tdir_count > TIFF_UINT64_MAX / typewidth
EXPR	4550:7	4550:42	11	dp -> tdir_count > TIFF_UINT64_MAX / typewidth
FIELD	4550:7	4550:11	12	dp -> tdir_count
LEAF_NODE	4550:7	4550:7	13	dp
LEAF_NODE	4550:9	4550:9	13	->
LEAF_NODE	4550:11	4550:11	13	tdir_count
REL_OPERATOR	4550:22	4550:22	12	>
LEAF_NODE	4550:22	4550:22	13	>
FIELD	4550:24	4550:24	12	TIFF_UINT64_MAX
LEAF_NODE	4550:24	4550:24	13	TIFF_UINT64_MAX
LEAF_NODE	4550:40	4550:40	12	/
FIELD	4550:42	4550:42	12	typewidth
LEAF_NODE	4550:42	4550:42	13	typewidth
LEAF_NODE	4550:52	4550:52	10	)
STATEMENTS	4551:28	4551:28	10	
JUMP_STATEMENT	4551:28	4551:37	11	return - 1 ;
KEYWORD	4551:28	4551:28	12	return
LEAF_NODE	4551:28	4551:28	13	return
DESTINATION	4551:35	4551:35	12	- 1
EXPR	4551:35	4551:35	13	- 1
UNARY_EXPR	4551:35	4551:36	14	- 1
UNARY_OPERATOR	4551:35	4551:35	15	-
LEAF_NODE	4551:35	4551:35	16	-
FIELD	4551:36	4551:36	15	1
LEAF_NODE	4551:36	4551:36	16	1
LEAF_NODE	4551:37	4551:37	12	;
EXPR_STATEMENT	4552:3	4552:44	9	datasize = ( uint64 ) typewidth * dp -> tdir_count ;
EXPR	4552:3	4552:3	10	datasize = ( uint64 ) typewidth * dp -> tdir_count
ASSIGN	4552:3	4552:12	11	datasize = ( uint64 ) typewidth * dp -> tdir_count
LVAL	4552:3	4552:3	12	datasize
FIELD	4552:3	4552:3	13	datasize
LEAF_NODE	4552:3	4552:3	14	datasize
ASSIGN_OP	4552:11	4552:11	12	=
LEAF_NODE	4552:11	4552:11	13	=
RVAL	4552:12	4552:30	12	( uint64 ) typewidth * dp -> tdir_count
LEAF_NODE	4552:12	4552:12	13	(
TYPE_NAME	4552:13	4552:13	13	uint64
LEAF_NODE	4552:13	4552:13	14	uint64
LEAF_NODE	4552:19	4552:19	13	)
FIELD	4552:20	4552:20	13	typewidth
LEAF_NODE	4552:20	4552:20	14	typewidth
LEAF_NODE	4552:29	4552:29	13	*
FIELD	4552:30	4552:34	13	dp -> tdir_count
LEAF_NODE	4552:30	4552:30	14	dp
LEAF_NODE	4552:32	4552:32	14	->
LEAF_NODE	4552:34	4552:34	14	tdir_count
LEAF_NODE	4552:44	4552:44	10	;
SELECTION	4553:3	4554:3	9	
KEYWORD	4553:3	4553:3	10	if
LEAF_NODE	4553:3	4553:3	11	if
LEAF_NODE	4553:6	4553:6	10	(
CONDITION	4553:7	4553:7	10	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	4553:7	4553:7	11	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	4553:7	4553:36	12	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	4553:7	4553:7	13	!
LEAF_NODE	4553:7	4553:7	14	!
LEAF_NODE	4553:8	4553:8	13	(
FIELD	4553:9	4553:14	13	tif -> tif_flags
LEAF_NODE	4553:9	4553:9	14	tif
LEAF_NODE	4553:12	4553:12	14	->
LEAF_NODE	4553:14	4553:14	14	tif_flags
LEAF_NODE	4553:23	4553:23	13	&
FIELD	4553:24	4553:24	13	TIFF_BIGTIFF
LEAF_NODE	4553:24	4553:24	14	TIFF_BIGTIFF
LEAF_NODE	4553:36	4553:36	13	)
LEAF_NODE	4553:37	4553:37	10	)
STATEMENTS	4554:3	4557:3	10	
LEAF_NODE	4554:3	4554:3	11	{
STATEMENTS	4555:4	4555:4	11	
SELECTION	4555:4	4556:5	12	
KEYWORD	4555:4	4555:4	13	if
LEAF_NODE	4555:4	4555:4	14	if
LEAF_NODE	4555:7	4555:7	13	(
CONDITION	4555:8	4555:8	13	datasize <= 4
EXPR	4555:8	4555:18	14	datasize <= 4
FIELD	4555:8	4555:8	15	datasize
LEAF_NODE	4555:8	4555:8	16	datasize
REL_OPERATOR	4555:16	4555:16	15	<=
LEAF_NODE	4555:16	4555:16	16	<=
FIELD	4555:18	4555:18	15	4
LEAF_NODE	4555:18	4555:18	16	4
LEAF_NODE	4555:19	4555:19	13	)
STATEMENTS	4556:5	4556:5	13	
EXPR_STATEMENT	4556:5	4556:15	14	datasize = 0 ;
EXPR	4556:5	4556:5	15	datasize = 0
ASSIGN	4556:5	4556:14	16	datasize = 0
LVAL	4556:5	4556:5	17	datasize
FIELD	4556:5	4556:5	18	datasize
LEAF_NODE	4556:5	4556:5	19	datasize
ASSIGN_OP	4556:13	4556:13	17	=
LEAF_NODE	4556:13	4556:13	18	=
RVAL	4556:14	4556:14	17	0
FIELD	4556:14	4556:14	18	0
LEAF_NODE	4556:14	4556:14	19	0
LEAF_NODE	4556:15	4556:15	15	;
LEAF_NODE	4557:3	4557:3	11	}
SELECTION	4558:3	4559:3	9	
KEYWORD	4558:3	4558:3	10	else
LEAF_NODE	4558:3	4558:3	11	else
STATEMENTS	4559:3	4562:3	10	
LEAF_NODE	4559:3	4559:3	11	{
STATEMENTS	4560:4	4560:4	11	
SELECTION	4560:4	4561:5	12	
KEYWORD	4560:4	4560:4	13	if
LEAF_NODE	4560:4	4560:4	14	if
LEAF_NODE	4560:7	4560:7	13	(
CONDITION	4560:8	4560:8	13	datasize <= 8
EXPR	4560:8	4560:18	14	datasize <= 8
FIELD	4560:8	4560:8	15	datasize
LEAF_NODE	4560:8	4560:8	16	datasize
REL_OPERATOR	4560:16	4560:16	15	<=
LEAF_NODE	4560:16	4560:16	16	<=
FIELD	4560:18	4560:18	15	8
LEAF_NODE	4560:18	4560:18	16	8
LEAF_NODE	4560:19	4560:19	13	)
STATEMENTS	4561:5	4561:5	13	
EXPR_STATEMENT	4561:5	4561:15	14	datasize = 0 ;
EXPR	4561:5	4561:5	15	datasize = 0
ASSIGN	4561:5	4561:14	16	datasize = 0
LVAL	4561:5	4561:5	17	datasize
FIELD	4561:5	4561:5	18	datasize
LEAF_NODE	4561:5	4561:5	19	datasize
ASSIGN_OP	4561:13	4561:13	17	=
LEAF_NODE	4561:13	4561:13	18	=
RVAL	4561:14	4561:14	17	0
FIELD	4561:14	4561:14	18	0
LEAF_NODE	4561:14	4561:14	19	0
LEAF_NODE	4561:15	4561:15	15	;
LEAF_NODE	4562:3	4562:3	11	}
SELECTION	4563:3	4564:28	9	
KEYWORD	4563:3	4563:3	10	if
LEAF_NODE	4563:3	4563:3	11	if
LEAF_NODE	4563:5	4563:5	10	(
CONDITION	4563:7	4563:7	10	space > TIFF_UINT64_MAX - datasize
EXPR	4563:7	4563:33	11	space > TIFF_UINT64_MAX - datasize
FIELD	4563:7	4563:7	12	space
LEAF_NODE	4563:7	4563:7	13	space
REL_OPERATOR	4563:13	4563:13	12	>
LEAF_NODE	4563:13	4563:13	13	>
FIELD	4563:15	4563:15	12	TIFF_UINT64_MAX
LEAF_NODE	4563:15	4563:15	13	TIFF_UINT64_MAX
LEAF_NODE	4563:31	4563:31	12	-
FIELD	4563:33	4563:33	12	datasize
LEAF_NODE	4563:33	4563:33	13	datasize
LEAF_NODE	4563:42	4563:42	10	)
STATEMENTS	4564:28	4564:28	10	
JUMP_STATEMENT	4564:28	4564:37	11	return - 1 ;
KEYWORD	4564:28	4564:28	12	return
LEAF_NODE	4564:28	4564:28	13	return
DESTINATION	4564:35	4564:35	12	- 1
EXPR	4564:35	4564:35	13	- 1
UNARY_EXPR	4564:35	4564:36	14	- 1
UNARY_OPERATOR	4564:35	4564:35	15	-
LEAF_NODE	4564:35	4564:35	16	-
FIELD	4564:36	4564:36	15	1
LEAF_NODE	4564:36	4564:36	16	1
LEAF_NODE	4564:37	4564:37	12	;
EXPR_STATEMENT	4565:3	4565:18	9	space += datasize ;
EXPR	4565:3	4565:3	10	space += datasize
ASSIGN	4565:3	4565:10	11	space += datasize
LVAL	4565:3	4565:3	12	space
FIELD	4565:3	4565:3	13	space
LEAF_NODE	4565:3	4565:3	14	space
ASSIGN_OP	4565:8	4565:8	12	+=
LEAF_NODE	4565:8	4565:8	13	+=
RVAL	4565:10	4565:10	12	datasize
FIELD	4565:10	4565:10	13	datasize
LEAF_NODE	4565:10	4565:10	14	datasize
LEAF_NODE	4565:18	4565:18	10	;
LEAF_NODE	4566:2	4566:2	8	}
SELECTION	4567:2	4569:20	6	
KEYWORD	4567:2	4567:2	7	if
LEAF_NODE	4567:2	4567:2	8	if
LEAF_NODE	4567:4	4567:4	7	(
CONDITION	4567:6	4567:6	7	filesize < space
EXPR	4567:6	4567:17	8	filesize < space
FIELD	4567:6	4567:6	9	filesize
LEAF_NODE	4567:6	4567:6	10	filesize
REL_OPERATOR	4567:15	4567:15	9	<
LEAF_NODE	4567:15	4567:15	10	<
FIELD	4567:17	4567:17	9	space
LEAF_NODE	4567:17	4567:17	10	space
LEAF_NODE	4567:23	4567:23	7	)
STATEMENTS	4569:20	4569:20	7	
EXPR_STATEMENT	4569:20	4569:36	8	space = filesize ;
EXPR	4569:20	4569:20	9	space = filesize
ASSIGN	4569:20	4569:28	10	space = filesize
LVAL	4569:20	4569:20	11	space
FIELD	4569:20	4569:20	12	space
LEAF_NODE	4569:20	4569:20	13	space
ASSIGN_OP	4569:26	4569:26	11	=
LEAF_NODE	4569:26	4569:26	12	=
RVAL	4569:28	4569:28	11	filesize
FIELD	4569:28	4569:28	12	filesize
LEAF_NODE	4569:28	4569:28	13	filesize
LEAF_NODE	4569:36	4569:36	9	;
SELECTION	4570:16	4571:20	6	
KEYWORD	4570:16	4570:16	7	else
LEAF_NODE	4570:16	4570:16	8	else
STATEMENTS	4571:20	4571:20	7	
EXPR_STATEMENT	4571:20	4571:44	8	space = filesize - space ;
EXPR	4571:20	4571:20	9	space = filesize - space
ASSIGN	4571:20	4571:28	10	space = filesize - space
LVAL	4571:20	4571:20	11	space
FIELD	4571:20	4571:20	12	space
LEAF_NODE	4571:20	4571:20	13	space
ASSIGN_OP	4571:26	4571:26	11	=
LEAF_NODE	4571:26	4571:26	12	=
RVAL	4571:28	4571:39	11	filesize - space
FIELD	4571:28	4571:28	12	filesize
LEAF_NODE	4571:28	4571:28	13	filesize
LEAF_NODE	4571:37	4571:37	12	-
FIELD	4571:39	4571:39	12	space
LEAF_NODE	4571:39	4571:39	13	space
LEAF_NODE	4571:44	4571:44	9	;
SELECTION	4572:2	4573:3	6	
KEYWORD	4572:2	4572:2	7	if
LEAF_NODE	4572:2	4572:2	8	if
LEAF_NODE	4572:5	4572:5	7	(
CONDITION	4572:6	4572:6	7	td -> td_planarconfig == PLANARCONFIG_SEPARATE
EXPR	4572:6	4572:29	8	td -> td_planarconfig == PLANARCONFIG_SEPARATE
FIELD	4572:6	4572:10	9	td -> td_planarconfig
LEAF_NODE	4572:6	4572:6	10	td
LEAF_NODE	4572:8	4572:8	10	->
LEAF_NODE	4572:10	4572:10	10	td_planarconfig
EQ_OPERATOR	4572:26	4572:26	9	==
LEAF_NODE	4572:26	4572:26	10	==
FIELD	4572:29	4572:29	9	PLANARCONFIG_SEPARATE
LEAF_NODE	4572:29	4572:29	10	PLANARCONFIG_SEPARATE
LEAF_NODE	4572:50	4572:50	7	)
STATEMENTS	4573:3	4573:3	7	
EXPR_STATEMENT	4573:3	4573:34	8	space /= td -> td_samplesperpixel ;
EXPR	4573:3	4573:3	9	space /= td -> td_samplesperpixel
ASSIGN	4573:3	4573:12	10	space /= td -> td_samplesperpixel
LVAL	4573:3	4573:3	11	space
FIELD	4573:3	4573:3	12	space
LEAF_NODE	4573:3	4573:3	13	space
ASSIGN_OP	4573:9	4573:9	11	/=
LEAF_NODE	4573:9	4573:9	12	/=
RVAL	4573:12	4573:12	11	td -> td_samplesperpixel
FIELD	4573:12	4573:16	12	td -> td_samplesperpixel
LEAF_NODE	4573:12	4573:12	13	td
LEAF_NODE	4573:14	4573:14	13	->
LEAF_NODE	4573:16	4573:16	13	td_samplesperpixel
LEAF_NODE	4573:34	4573:34	9	;
ITERATION	4574:2	4575:3	6	
KEYWORD	4574:2	4574:2	7	for
LEAF_NODE	4574:2	4574:2	8	for
LEAF_NODE	4574:6	4574:6	7	(
FOR_INIT	4574:7	4574:16	7	strip = 0 ;
EXPR	4574:7	4574:7	8	strip = 0
ASSIGN	4574:7	4574:15	9	strip = 0
LVAL	4574:7	4574:7	10	strip
FIELD	4574:7	4574:7	11	strip
LEAF_NODE	4574:7	4574:7	12	strip
ASSIGN_OP	4574:13	4574:13	10	=
LEAF_NODE	4574:13	4574:13	11	=
RVAL	4574:15	4574:15	10	0
FIELD	4574:15	4574:15	11	0
LEAF_NODE	4574:15	4574:15	12	0
LEAF_NODE	4574:16	4574:16	8	;
CONDITION	4574:18	4574:18	7	strip < td -> td_nstrips
EXPR	4574:18	4574:26	8	strip < td -> td_nstrips
FIELD	4574:18	4574:18	9	strip
LEAF_NODE	4574:18	4574:18	10	strip
REL_OPERATOR	4574:24	4574:24	9	<
LEAF_NODE	4574:24	4574:24	10	<
FIELD	4574:26	4574:30	9	td -> td_nstrips
LEAF_NODE	4574:26	4574:26	10	td
LEAF_NODE	4574:28	4574:28	10	->
LEAF_NODE	4574:30	4574:30	10	td_nstrips
LEAF_NODE	4574:40	4574:40	7	;
FOR_EXPR	4574:42	4574:42	7	strip ++
EXPR	4574:42	4574:42	8	strip ++
FIELD	4574:42	4574:47	9	strip ++
LEAF_NODE	4574:42	4574:42	10	strip
LEAF_NODE	4574:47	4574:47	10	++
LEAF_NODE	4574:49	4574:49	7	)
STATEMENTS	4575:3	4575:3	7	
EXPR_STATEMENT	4575:3	4575:41	8	td -> td_stripbytecount_p [ strip ] = space ;
EXPR	4575:3	4575:3	9	td -> td_stripbytecount_p [ strip ] = space
ASSIGN	4575:3	4575:36	10	td -> td_stripbytecount_p [ strip ] = space
LVAL	4575:3	4575:3	11	td -> td_stripbytecount_p [ strip ]
FIELD	4575:3	4575:32	12	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	4575:3	4575:3	13	td
LEAF_NODE	4575:5	4575:5	13	->
LEAF_NODE	4575:7	4575:7	13	td_stripbytecount_p
LEAF_NODE	4575:26	4575:26	13	[
EXPR	4575:27	4575:27	13	strip
FIELD	4575:27	4575:27	14	strip
LEAF_NODE	4575:27	4575:27	15	strip
LEAF_NODE	4575:32	4575:32	13	]
ASSIGN_OP	4575:34	4575:34	11	=
LEAF_NODE	4575:34	4575:34	12	=
RVAL	4575:36	4575:36	11	space
FIELD	4575:36	4575:36	12	space
LEAF_NODE	4575:36	4575:36	13	space
LEAF_NODE	4575:41	4575:41	9	;
EXPR_STATEMENT	4583:2	4583:9	6	strip -- ;
EXPR	4583:2	4583:2	7	strip --
FIELD	4583:2	4583:7	8	strip --
LEAF_NODE	4583:2	4583:2	9	strip
LEAF_NODE	4583:7	4583:7	9	--
LEAF_NODE	4583:9	4583:9	7	;
SELECTION	4584:16	4585:20	6	
KEYWORD	4584:16	4584:16	7	if
LEAF_NODE	4584:16	4584:16	8	if
LEAF_NODE	4584:19	4584:19	7	(
CONDITION	4584:20	4584:20	7	td -> td_stripoffset_p [ strip ] > TIFF_UINT64_MAX - td -> td_stripbytecount_p [ strip ]
EXPR	4584:20	4584:68	8	td -> td_stripoffset_p [ strip ] > TIFF_UINT64_MAX - td -> td_stripbytecount_p [ strip ]
FIELD	4584:20	4584:46	9	td -> td_stripoffset_p [ strip ]
LEAF_NODE	4584:20	4584:20	10	td
LEAF_NODE	4584:22	4584:22	10	->
LEAF_NODE	4584:24	4584:24	10	td_stripoffset_p
LEAF_NODE	4584:40	4584:40	10	[
EXPR	4584:41	4584:41	10	strip
FIELD	4584:41	4584:41	11	strip
LEAF_NODE	4584:41	4584:41	12	strip
LEAF_NODE	4584:46	4584:46	10	]
REL_OPERATOR	4584:48	4584:48	9	>
LEAF_NODE	4584:48	4584:48	10	>
FIELD	4584:50	4584:50	9	TIFF_UINT64_MAX
LEAF_NODE	4584:50	4584:50	10	TIFF_UINT64_MAX
LEAF_NODE	4584:66	4584:66	9	-
FIELD	4584:68	4584:97	9	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	4584:68	4584:68	10	td
LEAF_NODE	4584:70	4584:70	10	->
LEAF_NODE	4584:72	4584:72	10	td_stripbytecount_p
LEAF_NODE	4584:91	4584:91	10	[
EXPR	4584:92	4584:92	10	strip
FIELD	4584:92	4584:92	11	strip
LEAF_NODE	4584:92	4584:92	12	strip
LEAF_NODE	4584:97	4584:97	10	]
LEAF_NODE	4584:98	4584:98	7	)
STATEMENTS	4585:20	4585:20	7	
JUMP_STATEMENT	4585:20	4585:29	8	return - 1 ;
KEYWORD	4585:20	4585:20	9	return
LEAF_NODE	4585:20	4585:20	10	return
DESTINATION	4585:27	4585:27	9	- 1
EXPR	4585:27	4585:27	10	- 1
UNARY_EXPR	4585:27	4585:28	11	- 1
UNARY_OPERATOR	4585:27	4585:27	12	-
LEAF_NODE	4585:27	4585:27	13	-
FIELD	4585:28	4585:28	12	1
LEAF_NODE	4585:28	4585:28	13	1
LEAF_NODE	4585:29	4585:29	9	;
SELECTION	4586:2	4586:77	6	
KEYWORD	4586:2	4586:2	7	if
LEAF_NODE	4586:2	4586:2	8	if
LEAF_NODE	4586:5	4586:5	7	(
CONDITION	4586:6	4586:6	7	td -> td_stripoffset_p [ strip ] + td -> td_stripbytecount_p [ strip ] > filesize
EXPR	4586:6	4586:67	8	td -> td_stripoffset_p [ strip ] + td -> td_stripbytecount_p [ strip ] > filesize
FIELD	4586:6	4586:32	9	td -> td_stripoffset_p [ strip ]
LEAF_NODE	4586:6	4586:6	10	td
LEAF_NODE	4586:8	4586:8	10	->
LEAF_NODE	4586:10	4586:10	10	td_stripoffset_p
LEAF_NODE	4586:26	4586:26	10	[
EXPR	4586:27	4586:27	10	strip
FIELD	4586:27	4586:27	11	strip
LEAF_NODE	4586:27	4586:27	12	strip
LEAF_NODE	4586:32	4586:32	10	]
LEAF_NODE	4586:33	4586:33	9	+
FIELD	4586:34	4586:63	9	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	4586:34	4586:34	10	td
LEAF_NODE	4586:36	4586:36	10	->
LEAF_NODE	4586:38	4586:38	10	td_stripbytecount_p
LEAF_NODE	4586:57	4586:57	10	[
EXPR	4586:58	4586:58	10	strip
FIELD	4586:58	4586:58	11	strip
LEAF_NODE	4586:58	4586:58	12	strip
LEAF_NODE	4586:63	4586:63	10	]
REL_OPERATOR	4586:65	4586:65	9	>
LEAF_NODE	4586:65	4586:65	10	>
FIELD	4586:67	4586:67	9	filesize
LEAF_NODE	4586:67	4586:67	10	filesize
LEAF_NODE	4586:75	4586:75	7	)
STATEMENTS	4586:77	4593:16	7	
LEAF_NODE	4586:77	4586:77	8	{
STATEMENTS	4587:20	4590:22	8	
SELECTION	4587:20	4587:66	9	
KEYWORD	4587:20	4587:20	10	if
LEAF_NODE	4587:20	4587:20	11	if
LEAF_NODE	4587:22	4587:22	10	(
CONDITION	4587:24	4587:24	10	td -> td_stripoffset_p [ strip ] >= filesize
EXPR	4587:24	4587:55	11	td -> td_stripoffset_p [ strip ] >= filesize
FIELD	4587:24	4587:50	12	td -> td_stripoffset_p [ strip ]
LEAF_NODE	4587:24	4587:24	13	td
LEAF_NODE	4587:26	4587:26	13	->
LEAF_NODE	4587:28	4587:28	13	td_stripoffset_p
LEAF_NODE	4587:44	4587:44	13	[
EXPR	4587:45	4587:45	13	strip
FIELD	4587:45	4587:45	14	strip
LEAF_NODE	4587:45	4587:45	15	strip
LEAF_NODE	4587:50	4587:50	13	]
REL_OPERATOR	4587:52	4587:52	12	>=
LEAF_NODE	4587:52	4587:52	13	>=
FIELD	4587:55	4587:55	12	filesize
LEAF_NODE	4587:55	4587:55	13	filesize
LEAF_NODE	4587:64	4587:64	10	)
STATEMENTS	4587:66	4590:20	10	
LEAF_NODE	4587:66	4587:66	11	{
STATEMENTS	4589:24	4589:24	11	
EXPR_STATEMENT	4589:24	4589:58	12	td -> td_stripbytecount_p [ strip ] = 0 ;
EXPR	4589:24	4589:24	13	td -> td_stripbytecount_p [ strip ] = 0
ASSIGN	4589:24	4589:57	14	td -> td_stripbytecount_p [ strip ] = 0
LVAL	4589:24	4589:24	15	td -> td_stripbytecount_p [ strip ]
FIELD	4589:24	4589:53	16	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	4589:24	4589:24	17	td
LEAF_NODE	4589:26	4589:26	17	->
LEAF_NODE	4589:28	4589:28	17	td_stripbytecount_p
LEAF_NODE	4589:47	4589:47	17	[
EXPR	4589:48	4589:48	17	strip
FIELD	4589:48	4589:48	18	strip
LEAF_NODE	4589:48	4589:48	19	strip
LEAF_NODE	4589:53	4589:53	17	]
ASSIGN_OP	4589:55	4589:55	15	=
LEAF_NODE	4589:55	4589:55	16	=
RVAL	4589:57	4589:57	15	0
FIELD	4589:57	4589:57	16	0
LEAF_NODE	4589:57	4589:57	17	0
LEAF_NODE	4589:58	4589:58	13	;
LEAF_NODE	4590:20	4590:20	11	}
SELECTION	4590:22	4590:27	9	
KEYWORD	4590:22	4590:22	10	else
LEAF_NODE	4590:22	4590:22	11	else
STATEMENTS	4590:27	4592:20	10	
LEAF_NODE	4590:27	4590:27	11	{
STATEMENTS	4591:24	4591:24	11	
EXPR_STATEMENT	4591:24	4591:95	12	td -> td_stripbytecount_p [ strip ] = filesize - td -> td_stripoffset_p [ strip ] ;
EXPR	4591:24	4591:24	13	td -> td_stripbytecount_p [ strip ] = filesize - td -> td_stripoffset_p [ strip ]
ASSIGN	4591:24	4591:57	14	td -> td_stripbytecount_p [ strip ] = filesize - td -> td_stripoffset_p [ strip ]
LVAL	4591:24	4591:24	15	td -> td_stripbytecount_p [ strip ]
FIELD	4591:24	4591:53	16	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	4591:24	4591:24	17	td
LEAF_NODE	4591:26	4591:26	17	->
LEAF_NODE	4591:28	4591:28	17	td_stripbytecount_p
LEAF_NODE	4591:47	4591:47	17	[
EXPR	4591:48	4591:48	17	strip
FIELD	4591:48	4591:48	18	strip
LEAF_NODE	4591:48	4591:48	19	strip
LEAF_NODE	4591:53	4591:53	17	]
ASSIGN_OP	4591:55	4591:55	15	=
LEAF_NODE	4591:55	4591:55	16	=
RVAL	4591:57	4591:68	15	filesize - td -> td_stripoffset_p [ strip ]
FIELD	4591:57	4591:57	16	filesize
LEAF_NODE	4591:57	4591:57	17	filesize
LEAF_NODE	4591:66	4591:66	16	-
FIELD	4591:68	4591:94	16	td -> td_stripoffset_p [ strip ]
LEAF_NODE	4591:68	4591:68	17	td
LEAF_NODE	4591:70	4591:70	17	->
LEAF_NODE	4591:72	4591:72	17	td_stripoffset_p
LEAF_NODE	4591:88	4591:88	17	[
EXPR	4591:89	4591:89	17	strip
FIELD	4591:89	4591:89	18	strip
LEAF_NODE	4591:89	4591:89	19	strip
LEAF_NODE	4591:94	4591:94	17	]
LEAF_NODE	4591:95	4591:95	13	;
LEAF_NODE	4592:20	4592:20	11	}
LEAF_NODE	4593:16	4593:16	8	}
LEAF_NODE	4594:1	4594:1	5	}
SELECTION	4594:3	4594:8	3	
KEYWORD	4594:3	4594:3	4	else
LEAF_NODE	4594:3	4594:3	5	else
STATEMENTS	4594:8	4594:8	4	
SELECTION	4594:8	4594:26	5	
KEYWORD	4594:8	4594:8	6	if
LEAF_NODE	4594:8	4594:8	7	if
LEAF_NODE	4594:11	4594:11	6	(
CONDITION	4594:12	4594:12	6	isTiled ( tif )
EXPR	4594:12	4594:12	7	isTiled ( tif )
FUNCTION_CALL	4594:12	4594:23	8	isTiled ( tif )
CALLEE	4594:12	4594:12	9	isTiled
LEAF_NODE	4594:12	4594:12	10	isTiled
LEAF_NODE	4594:19	4594:19	9	(
ARGUMENT	4594:20	4594:20	9	tif
FIELD	4594:20	4594:20	10	tif
LEAF_NODE	4594:20	4594:20	11	tif
LEAF_NODE	4594:23	4594:23	9	)
LEAF_NODE	4594:24	4594:24	6	)
STATEMENTS	4594:26	4599:1	6	
LEAF_NODE	4594:26	4594:26	7	{
STATEMENTS	4595:2	4597:2	7	
SIMPLE_DECL	4595:2	4595:43	8	uint64 bytespertile ; bytespertile = TIFFTileSize64 ( tif ) ;
VAR_DECL	4595:2	4595:9	9	uint64 bytespertile ; bytespertile = TIFFTileSize64 ( tif )
TYPE	4595:2	4595:2	10	uint64
TYPE_NAME	4595:2	4595:2	11	uint64
LEAF_NODE	4595:2	4595:2	12	uint64
NAME	4595:9	4595:9	10	bytespertile
LEAF_NODE	4595:9	4595:9	11	bytespertile
LEAF_NODE	0:0	0:0	10	;
INIT	4595:9	4595:9	10	bytespertile = TIFFTileSize64 ( tif )
ASSIGN	4595:9	4595:24	11	bytespertile = TIFFTileSize64 ( tif )
LVAL	4595:9	4595:9	12	bytespertile
NAME	4595:9	4595:9	13	bytespertile
LEAF_NODE	4595:9	4595:9	14	bytespertile
ASSIGN_OP	4595:22	4595:22	12	=
LEAF_NODE	4595:22	4595:22	13	=
RVAL	4595:24	4595:24	12	TIFFTileSize64 ( tif )
FUNCTION_CALL	4595:24	4595:42	13	TIFFTileSize64 ( tif )
CALLEE	4595:24	4595:24	14	TIFFTileSize64
LEAF_NODE	4595:24	4595:24	15	TIFFTileSize64
LEAF_NODE	4595:38	4595:38	14	(
ARGUMENT	4595:39	4595:39	14	tif
FIELD	4595:39	4595:39	15	tif
LEAF_NODE	4595:39	4595:39	16	tif
LEAF_NODE	4595:42	4595:42	14	)
LEAF_NODE	4595:43	4595:43	9	;
ITERATION	4597:2	4598:6	8	
KEYWORD	4597:2	4597:2	9	for
LEAF_NODE	4597:2	4597:2	10	for
LEAF_NODE	4597:6	4597:6	9	(
FOR_INIT	4597:7	4597:16	9	strip = 0 ;
EXPR	4597:7	4597:7	10	strip = 0
ASSIGN	4597:7	4597:15	11	strip = 0
LVAL	4597:7	4597:7	12	strip
FIELD	4597:7	4597:7	13	strip
LEAF_NODE	4597:7	4597:7	14	strip
ASSIGN_OP	4597:13	4597:13	12	=
LEAF_NODE	4597:13	4597:13	13	=
RVAL	4597:15	4597:15	12	0
FIELD	4597:15	4597:15	13	0
LEAF_NODE	4597:15	4597:15	14	0
LEAF_NODE	4597:16	4597:16	10	;
CONDITION	4597:18	4597:18	9	strip < td -> td_nstrips
EXPR	4597:18	4597:26	10	strip < td -> td_nstrips
FIELD	4597:18	4597:18	11	strip
LEAF_NODE	4597:18	4597:18	12	strip
REL_OPERATOR	4597:24	4597:24	11	<
LEAF_NODE	4597:24	4597:24	12	<
FIELD	4597:26	4597:30	11	td -> td_nstrips
LEAF_NODE	4597:26	4597:26	12	td
LEAF_NODE	4597:28	4597:28	12	->
LEAF_NODE	4597:30	4597:30	12	td_nstrips
LEAF_NODE	4597:40	4597:40	9	;
FOR_EXPR	4597:42	4597:42	9	strip ++
EXPR	4597:42	4597:42	10	strip ++
FIELD	4597:42	4597:47	11	strip ++
LEAF_NODE	4597:42	4597:42	12	strip
LEAF_NODE	4597:47	4597:47	12	++
LEAF_NODE	4597:49	4597:49	9	)
STATEMENTS	4598:6	4598:6	9	
EXPR_STATEMENT	4598:6	4598:51	10	td -> td_stripbytecount_p [ strip ] = bytespertile ;
EXPR	4598:6	4598:6	11	td -> td_stripbytecount_p [ strip ] = bytespertile
ASSIGN	4598:6	4598:39	12	td -> td_stripbytecount_p [ strip ] = bytespertile
LVAL	4598:6	4598:6	13	td -> td_stripbytecount_p [ strip ]
FIELD	4598:6	4598:35	14	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	4598:6	4598:6	15	td
LEAF_NODE	4598:8	4598:8	15	->
LEAF_NODE	4598:10	4598:10	15	td_stripbytecount_p
LEAF_NODE	4598:29	4598:29	15	[
EXPR	4598:30	4598:30	15	strip
FIELD	4598:30	4598:30	16	strip
LEAF_NODE	4598:30	4598:30	17	strip
LEAF_NODE	4598:35	4598:35	15	]
ASSIGN_OP	4598:37	4598:37	13	=
LEAF_NODE	4598:37	4598:37	14	=
RVAL	4598:39	4598:39	13	bytespertile
FIELD	4598:39	4598:39	14	bytespertile
LEAF_NODE	4598:39	4598:39	15	bytespertile
LEAF_NODE	4598:51	4598:51	11	;
LEAF_NODE	4599:1	4599:1	7	}
SELECTION	4599:3	4599:8	3	
KEYWORD	4599:3	4599:3	4	else
LEAF_NODE	4599:3	4599:3	5	else
STATEMENTS	4599:8	4608:1	4	
LEAF_NODE	4599:8	4599:8	5	{
STATEMENTS	4600:2	4602:2	5	
SIMPLE_DECL	4600:2	4600:43	6	uint64 rowbytes ; rowbytes = TIFFScanlineSize64 ( tif ) ;
VAR_DECL	4600:2	4600:9	7	uint64 rowbytes ; rowbytes = TIFFScanlineSize64 ( tif )
TYPE	4600:2	4600:2	8	uint64
TYPE_NAME	4600:2	4600:2	9	uint64
LEAF_NODE	4600:2	4600:2	10	uint64
NAME	4600:9	4600:9	8	rowbytes
LEAF_NODE	4600:9	4600:9	9	rowbytes
LEAF_NODE	0:0	0:0	8	;
INIT	4600:9	4600:9	8	rowbytes = TIFFScanlineSize64 ( tif )
ASSIGN	4600:9	4600:20	9	rowbytes = TIFFScanlineSize64 ( tif )
LVAL	4600:9	4600:9	10	rowbytes
NAME	4600:9	4600:9	11	rowbytes
LEAF_NODE	4600:9	4600:9	12	rowbytes
ASSIGN_OP	4600:18	4600:18	10	=
LEAF_NODE	4600:18	4600:18	11	=
RVAL	4600:20	4600:20	10	TIFFScanlineSize64 ( tif )
FUNCTION_CALL	4600:20	4600:42	11	TIFFScanlineSize64 ( tif )
CALLEE	4600:20	4600:20	12	TIFFScanlineSize64
LEAF_NODE	4600:20	4600:20	13	TIFFScanlineSize64
LEAF_NODE	4600:38	4600:38	12	(
ARGUMENT	4600:39	4600:39	12	tif
FIELD	4600:39	4600:39	13	tif
LEAF_NODE	4600:39	4600:39	14	tif
LEAF_NODE	4600:42	4600:42	12	)
LEAF_NODE	4600:43	4600:43	7	;
SIMPLE_DECL	4601:2	4601:64	6	uint32 rowsperstrip ; rowsperstrip = td -> td_imagelength / td -> td_stripsperimage ;
VAR_DECL	4601:2	4601:9	7	uint32 rowsperstrip ; rowsperstrip = td -> td_imagelength / td -> td_stripsperimage
TYPE	4601:2	4601:2	8	uint32
TYPE_NAME	4601:2	4601:2	9	uint32
LEAF_NODE	4601:2	4601:2	10	uint32
NAME	4601:9	4601:9	8	rowsperstrip
LEAF_NODE	4601:9	4601:9	9	rowsperstrip
LEAF_NODE	0:0	0:0	8	;
INIT	4601:9	4601:9	8	rowsperstrip = td -> td_imagelength / td -> td_stripsperimage
ASSIGN	4601:9	4601:24	9	rowsperstrip = td -> td_imagelength / td -> td_stripsperimage
LVAL	4601:9	4601:9	10	rowsperstrip
NAME	4601:9	4601:9	11	rowsperstrip
LEAF_NODE	4601:9	4601:9	12	rowsperstrip
ASSIGN_OP	4601:22	4601:22	10	=
LEAF_NODE	4601:22	4601:22	11	=
RVAL	4601:24	4601:43	10	td -> td_imagelength / td -> td_stripsperimage
FIELD	4601:24	4601:28	11	td -> td_imagelength
LEAF_NODE	4601:24	4601:24	12	td
LEAF_NODE	4601:26	4601:26	12	->
LEAF_NODE	4601:28	4601:28	12	td_imagelength
LEAF_NODE	4601:42	4601:42	11	/
FIELD	4601:43	4601:47	11	td -> td_stripsperimage
LEAF_NODE	4601:43	4601:43	12	td
LEAF_NODE	4601:45	4601:45	12	->
LEAF_NODE	4601:47	4601:47	12	td_stripsperimage
LEAF_NODE	4601:64	4601:64	7	;
ITERATION	4602:2	4603:16	6	
KEYWORD	4602:2	4602:2	7	for
LEAF_NODE	4602:2	4602:2	8	for
LEAF_NODE	4602:6	4602:6	7	(
FOR_INIT	4602:7	4602:16	7	strip = 0 ;
EXPR	4602:7	4602:7	8	strip = 0
ASSIGN	4602:7	4602:15	9	strip = 0
LVAL	4602:7	4602:7	10	strip
FIELD	4602:7	4602:7	11	strip
LEAF_NODE	4602:7	4602:7	12	strip
ASSIGN_OP	4602:13	4602:13	10	=
LEAF_NODE	4602:13	4602:13	11	=
RVAL	4602:15	4602:15	10	0
FIELD	4602:15	4602:15	11	0
LEAF_NODE	4602:15	4602:15	12	0
LEAF_NODE	4602:16	4602:16	8	;
CONDITION	4602:18	4602:18	7	strip < td -> td_nstrips
EXPR	4602:18	4602:26	8	strip < td -> td_nstrips
FIELD	4602:18	4602:18	9	strip
LEAF_NODE	4602:18	4602:18	10	strip
REL_OPERATOR	4602:24	4602:24	9	<
LEAF_NODE	4602:24	4602:24	10	<
FIELD	4602:26	4602:30	9	td -> td_nstrips
LEAF_NODE	4602:26	4602:26	10	td
LEAF_NODE	4602:28	4602:28	10	->
LEAF_NODE	4602:30	4602:30	10	td_nstrips
LEAF_NODE	4602:40	4602:40	7	;
FOR_EXPR	4602:42	4602:42	7	strip ++
EXPR	4602:42	4602:42	8	strip ++
FIELD	4602:42	4602:47	9	strip ++
LEAF_NODE	4602:42	4602:42	10	strip
LEAF_NODE	4602:47	4602:47	10	++
LEAF_NODE	4602:49	4602:49	7	)
STATEMENTS	4603:16	4607:16	7	
LEAF_NODE	4603:16	4603:16	8	{
STATEMENTS	4604:20	4606:20	8	
SELECTION	4604:20	4605:24	9	
KEYWORD	4604:20	4604:20	10	if
LEAF_NODE	4604:20	4604:20	11	if
LEAF_NODE	4604:22	4604:22	10	(
CONDITION	4604:24	4604:24	10	rowbytes > 0 && rowsperstrip > TIFF_UINT64_MAX / rowbytes
EXPR	4604:24	4604:24	11	rowbytes > 0 && rowsperstrip > TIFF_UINT64_MAX / rowbytes
AND	4604:24	4604:40	12	rowbytes > 0 && rowsperstrip > TIFF_UINT64_MAX / rowbytes
EXPR	4604:24	4604:35	13	rowbytes > 0
FIELD	4604:24	4604:24	14	rowbytes
LEAF_NODE	4604:24	4604:24	15	rowbytes
REL_OPERATOR	4604:33	4604:33	14	>
LEAF_NODE	4604:33	4604:33	15	>
FIELD	4604:35	4604:35	14	0
LEAF_NODE	4604:35	4604:35	15	0
LEAF_NODE	4604:37	4604:37	13	&&
EXPR	4604:40	4604:73	13	rowsperstrip > TIFF_UINT64_MAX / rowbytes
FIELD	4604:40	4604:40	14	rowsperstrip
LEAF_NODE	4604:40	4604:40	15	rowsperstrip
REL_OPERATOR	4604:53	4604:53	14	>
LEAF_NODE	4604:53	4604:53	15	>
FIELD	4604:55	4604:55	14	TIFF_UINT64_MAX
LEAF_NODE	4604:55	4604:55	15	TIFF_UINT64_MAX
LEAF_NODE	4604:71	4604:71	14	/
FIELD	4604:73	4604:73	14	rowbytes
LEAF_NODE	4604:73	4604:73	15	rowbytes
LEAF_NODE	4604:82	4604:82	10	)
STATEMENTS	4605:24	4605:24	10	
JUMP_STATEMENT	4605:24	4605:33	11	return - 1 ;
KEYWORD	4605:24	4605:24	12	return
LEAF_NODE	4605:24	4605:24	13	return
DESTINATION	4605:31	4605:31	12	- 1
EXPR	4605:31	4605:31	13	- 1
UNARY_EXPR	4605:31	4605:32	14	- 1
UNARY_OPERATOR	4605:31	4605:31	15	-
LEAF_NODE	4605:31	4605:31	16	-
FIELD	4605:32	4605:32	15	1
LEAF_NODE	4605:32	4605:32	16	1
LEAF_NODE	4605:33	4605:33	12	;
EXPR_STATEMENT	4606:20	4606:76	9	td -> td_stripbytecount_p [ strip ] = rowbytes * rowsperstrip ;
EXPR	4606:20	4606:20	10	td -> td_stripbytecount_p [ strip ] = rowbytes * rowsperstrip
ASSIGN	4606:20	4606:53	11	td -> td_stripbytecount_p [ strip ] = rowbytes * rowsperstrip
LVAL	4606:20	4606:20	12	td -> td_stripbytecount_p [ strip ]
FIELD	4606:20	4606:49	13	td -> td_stripbytecount_p [ strip ]
LEAF_NODE	4606:20	4606:20	14	td
LEAF_NODE	4606:22	4606:22	14	->
LEAF_NODE	4606:24	4606:24	14	td_stripbytecount_p
LEAF_NODE	4606:43	4606:43	14	[
EXPR	4606:44	4606:44	14	strip
FIELD	4606:44	4606:44	15	strip
LEAF_NODE	4606:44	4606:44	16	strip
LEAF_NODE	4606:49	4606:49	14	]
ASSIGN_OP	4606:51	4606:51	12	=
LEAF_NODE	4606:51	4606:51	13	=
RVAL	4606:53	4606:64	12	rowbytes * rowsperstrip
FIELD	4606:53	4606:53	13	rowbytes
LEAF_NODE	4606:53	4606:53	14	rowbytes
LEAF_NODE	4606:62	4606:62	13	*
FIELD	4606:64	4606:64	13	rowsperstrip
LEAF_NODE	4606:64	4606:64	14	rowsperstrip
LEAF_NODE	4606:76	4606:76	10	;
LEAF_NODE	4607:16	4607:16	8	}
LEAF_NODE	4608:1	4608:1	5	}
EXPR_STATEMENT	4609:1	4609:44	3	TIFFSetFieldBit ( tif , FIELD_STRIPBYTECOUNTS ) ;
EXPR	4609:1	4609:1	4	TIFFSetFieldBit ( tif , FIELD_STRIPBYTECOUNTS )
FUNCTION_CALL	4609:1	4609:43	5	TIFFSetFieldBit ( tif , FIELD_STRIPBYTECOUNTS )
CALLEE	4609:1	4609:1	6	TIFFSetFieldBit
LEAF_NODE	4609:1	4609:1	7	TIFFSetFieldBit
LEAF_NODE	4609:16	4609:16	6	(
ARGUMENT	4609:17	4609:17	6	tif
FIELD	4609:17	4609:17	7	tif
LEAF_NODE	4609:17	4609:17	8	tif
LEAF_NODE	4609:20	4609:20	6	,
ARGUMENT	4609:22	4609:22	6	FIELD_STRIPBYTECOUNTS
FIELD	4609:22	4609:22	7	FIELD_STRIPBYTECOUNTS
LEAF_NODE	4609:22	4609:22	8	FIELD_STRIPBYTECOUNTS
LEAF_NODE	4609:43	4609:43	6	)
LEAF_NODE	4609:44	4609:44	4	;
SELECTION	4610:1	4611:2	3	
KEYWORD	4610:1	4610:1	4	if
LEAF_NODE	4610:1	4610:1	5	if
LEAF_NODE	4610:4	4610:4	4	(
CONDITION	4610:5	4610:5	4	! TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
EXPR	4610:5	4610:5	5	! TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
UNARY_EXPR	4610:5	4610:6	6	! TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
UNARY_OPERATOR	4610:5	4610:5	7	!
LEAF_NODE	4610:5	4610:5	8	!
FUNCTION_CALL	4610:6	4610:42	7	TIFFFieldSet ( tif , FIELD_ROWSPERSTRIP )
CALLEE	4610:6	4610:6	8	TIFFFieldSet
LEAF_NODE	4610:6	4610:6	9	TIFFFieldSet
LEAF_NODE	4610:18	4610:18	8	(
ARGUMENT	4610:19	4610:19	8	tif
FIELD	4610:19	4610:19	9	tif
LEAF_NODE	4610:19	4610:19	10	tif
LEAF_NODE	4610:22	4610:22	8	,
ARGUMENT	4610:24	4610:24	8	FIELD_ROWSPERSTRIP
FIELD	4610:24	4610:24	9	FIELD_ROWSPERSTRIP
LEAF_NODE	4610:24	4610:24	10	FIELD_ROWSPERSTRIP
LEAF_NODE	4610:42	4610:42	8	)
LEAF_NODE	4610:43	4610:43	4	)
STATEMENTS	4611:2	4611:2	4	
EXPR_STATEMENT	4611:2	4611:42	5	td -> td_rowsperstrip = td -> td_imagelength ;
EXPR	4611:2	4611:2	6	td -> td_rowsperstrip = td -> td_imagelength
ASSIGN	4611:2	4611:24	7	td -> td_rowsperstrip = td -> td_imagelength
LVAL	4611:2	4611:2	8	td -> td_rowsperstrip
FIELD	4611:2	4611:6	9	td -> td_rowsperstrip
LEAF_NODE	4611:2	4611:2	10	td
LEAF_NODE	4611:4	4611:4	10	->
LEAF_NODE	4611:6	4611:6	10	td_rowsperstrip
ASSIGN_OP	4611:22	4611:22	8	=
LEAF_NODE	4611:22	4611:22	9	=
RVAL	4611:24	4611:24	8	td -> td_imagelength
FIELD	4611:24	4611:28	9	td -> td_imagelength
LEAF_NODE	4611:24	4611:24	10	td
LEAF_NODE	4611:26	4611:26	10	->
LEAF_NODE	4611:28	4611:28	10	td_imagelength
LEAF_NODE	4611:42	4611:42	6	;
JUMP_STATEMENT	4612:1	4612:9	3	return 1 ;
KEYWORD	4612:1	4612:1	4	return
LEAF_NODE	4612:1	4612:1	5	return
DESTINATION	4612:8	4612:8	4	1
EXPR	4612:8	4612:8	5	1
FIELD	4612:8	4612:8	6	1
LEAF_NODE	4612:8	4612:8	7	1
LEAF_NODE	4612:9	4612:9	4	;
LEAF_NODE	4613:0	4613:0	2	}
FUNCTION_DEF	4615:0	4623:0	1	
RETURN_TYPE	4615:0	4615:7	2	static void
LEAF_NODE	4615:0	4615:0	3	static
TYPE_NAME	4615:7	4615:7	3	void
LEAF_NODE	4615:7	4615:7	4	void
FUNCTION_NAME	4616:0	4616:0	2	MissingRequired
LEAF_NODE	4616:0	4616:0	3	MissingRequired
PARAMETER_LIST	4616:15	4616:46	2	( TIFF * tif , const char * tagname )
LEAF_NODE	4616:15	4616:15	3	(
PARAMETER_DECL	4616:16	4616:22	3	TIFF * tif
TYPE	4616:16	4616:20	4	TIFF *
TYPE_NAME	4616:16	4616:16	5	TIFF
LEAF_NODE	4616:16	4616:16	6	TIFF
POINTER	4616:20	4616:20	5	*
LEAF_NODE	4616:20	4616:20	6	*
NAME	4616:22	4616:22	4	tif
LEAF_NODE	4616:22	4616:22	5	tif
LEAF_NODE	4616:25	4616:25	3	,
PARAMETER_DECL	4616:27	4616:39	3	const char * tagname
TYPE	4616:27	4616:37	4	const char *
TYPE_NAME	4616:27	4616:33	5	const char
LEAF_NODE	4616:27	4616:27	6	const
LEAF_NODE	4616:33	4616:33	6	char
POINTER	4616:37	4616:37	5	*
LEAF_NODE	4616:37	4616:37	6	*
NAME	4616:39	4616:39	4	tagname
LEAF_NODE	4616:39	4616:39	5	tagname
LEAF_NODE	4616:46	4616:46	3	)
LEAF_NODE	4617:0	4617:0	2	{
STATEMENTS	4618:1	4620:1	2	
LEAF_NODE	4618:1	4618:1	3	static
SIMPLE_DECL	4618:8	4618:47	3	const char [ ] module ; module = "MissingRequired" ;
VAR_DECL	4618:8	4618:19	4	const char [ ] module ; module = "MissingRequired"
TYPE	4618:8	4618:25	5	const char [ ]
TYPE_NAME	4618:8	4618:14	6	const char
LEAF_NODE	4618:8	4618:8	7	const
LEAF_NODE	4618:14	4618:14	7	char
TYPE_SUFFIX	4618:25	4618:26	6	[ ]
LEAF_NODE	4618:25	4618:25	7	[
LEAF_NODE	4618:26	4618:26	7	]
NAME	4618:19	4618:19	5	module
LEAF_NODE	4618:19	4618:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	4618:19	4618:19	5	module = "MissingRequired"
ASSIGN	4618:19	4618:30	6	module = "MissingRequired"
LVAL	4618:19	4618:19	7	module
NAME	4618:19	4618:19	8	module
LEAF_NODE	4618:19	4618:19	9	module
ASSIGN_OP	4618:28	4618:28	7	=
LEAF_NODE	4618:28	4618:28	8	=
RVAL	4618:30	4618:30	7	"MissingRequired"
FIELD	4618:30	4618:30	8	"MissingRequired"
LEAF_NODE	4618:30	4618:30	9	"MissingRequired"
LEAF_NODE	4618:47	4618:47	4	;
EXPR_STATEMENT	4620:1	4622:13	3	TIFFErrorExt ( tif -> tif_clientdata , module , "TIFF directory is missing required \"%s\" field" , tagname ) ;
EXPR	4620:1	4620:1	4	TIFFErrorExt ( tif -> tif_clientdata , module , "TIFF directory is missing required \"%s\" field" , tagname )
FUNCTION_CALL	4620:1	4622:12	5	TIFFErrorExt ( tif -> tif_clientdata , module , "TIFF directory is missing required \"%s\" field" , tagname )
CALLEE	4620:1	4620:1	6	TIFFErrorExt
LEAF_NODE	4620:1	4620:1	7	TIFFErrorExt
LEAF_NODE	4620:13	4620:13	6	(
ARGUMENT	4620:14	4620:14	6	tif -> tif_clientdata
FIELD	4620:14	4620:19	7	tif -> tif_clientdata
LEAF_NODE	4620:14	4620:14	8	tif
LEAF_NODE	4620:17	4620:17	8	->
LEAF_NODE	4620:19	4620:19	8	tif_clientdata
LEAF_NODE	4620:33	4620:33	6	,
ARGUMENT	4620:35	4620:35	6	module
FIELD	4620:35	4620:35	7	module
LEAF_NODE	4620:35	4620:35	8	module
LEAF_NODE	4620:41	4620:41	6	,
ARGUMENT	4621:5	4621:5	6	"TIFF directory is missing required \"%s\" field"
FIELD	4621:5	4621:5	7	"TIFF directory is missing required \"%s\" field"
LEAF_NODE	4621:5	4621:5	8	"TIFF directory is missing required \"%s\" field"
LEAF_NODE	4621:54	4621:54	6	,
ARGUMENT	4622:5	4622:5	6	tagname
FIELD	4622:5	4622:5	7	tagname
LEAF_NODE	4622:5	4622:5	8	tagname
LEAF_NODE	4622:12	4622:12	6	)
LEAF_NODE	4622:13	4622:13	4	;
LEAF_NODE	4623:0	4623:0	2	}
FUNCTION_DEF	4631:0	4672:0	1	
RETURN_TYPE	4631:0	4631:7	2	static int
LEAF_NODE	4631:0	4631:0	3	static
TYPE_NAME	4631:7	4631:7	3	int
LEAF_NODE	4631:7	4631:7	4	int
FUNCTION_NAME	4632:0	4632:0	2	TIFFCheckDirOffset
LEAF_NODE	4632:0	4632:0	3	TIFFCheckDirOffset
PARAMETER_LIST	4632:18	4632:43	2	( TIFF * tif , uint64 diroff )
LEAF_NODE	4632:18	4632:18	3	(
PARAMETER_DECL	4632:19	4632:25	3	TIFF * tif
TYPE	4632:19	4632:23	4	TIFF *
TYPE_NAME	4632:19	4632:19	5	TIFF
LEAF_NODE	4632:19	4632:19	6	TIFF
POINTER	4632:23	4632:23	5	*
LEAF_NODE	4632:23	4632:23	6	*
NAME	4632:25	4632:25	4	tif
LEAF_NODE	4632:25	4632:25	5	tif
LEAF_NODE	4632:28	4632:28	3	,
PARAMETER_DECL	4632:30	4632:37	3	uint64 diroff
TYPE	4632:30	4632:30	4	uint64
TYPE_NAME	4632:30	4632:30	5	uint64
LEAF_NODE	4632:30	4632:30	6	uint64
NAME	4632:37	4632:37	4	diroff
LEAF_NODE	4632:37	4632:37	5	diroff
LEAF_NODE	4632:43	4632:43	3	)
LEAF_NODE	4633:0	4633:0	2	{
STATEMENTS	4634:1	4671:1	2	
SIMPLE_DECL	4634:1	4634:9	3	uint16 n ;
VAR_DECL	4634:1	4634:8	4	uint16 n
TYPE	4634:1	4634:1	5	uint16
TYPE_NAME	4634:1	4634:1	6	uint16
LEAF_NODE	4634:1	4634:1	7	uint16
NAME	4634:8	4634:8	5	n
LEAF_NODE	4634:8	4634:8	6	n
LEAF_NODE	4634:9	4634:9	4	;
SELECTION	4636:1	4637:2	3	
KEYWORD	4636:1	4636:1	4	if
LEAF_NODE	4636:1	4636:1	5	if
LEAF_NODE	4636:4	4636:4	4	(
CONDITION	4636:5	4636:5	4	diroff == 0
EXPR	4636:5	4636:15	5	diroff == 0
FIELD	4636:5	4636:5	6	diroff
LEAF_NODE	4636:5	4636:5	7	diroff
EQ_OPERATOR	4636:12	4636:12	6	==
LEAF_NODE	4636:12	4636:12	7	==
FIELD	4636:15	4636:15	6	0
LEAF_NODE	4636:15	4636:15	7	0
LEAF_NODE	4636:16	4636:16	4	)
STATEMENTS	4637:2	4637:2	4	
JUMP_STATEMENT	4637:2	4637:10	5	return 0 ;
KEYWORD	4637:2	4637:2	6	return
LEAF_NODE	4637:2	4637:2	7	return
DESTINATION	4637:9	4637:9	6	0
EXPR	4637:9	4637:9	7	0
FIELD	4637:9	4637:9	8	0
LEAF_NODE	4637:9	4637:9	9	0
LEAF_NODE	4637:10	4637:10	6	;
SELECTION	4638:1	4638:34	3	
KEYWORD	4638:1	4638:1	4	if
LEAF_NODE	4638:1	4638:1	5	if
LEAF_NODE	4638:4	4638:4	4	(
CONDITION	4638:5	4638:5	4	tif -> tif_dirnumber == 65535
EXPR	4638:5	4638:27	5	tif -> tif_dirnumber == 65535
FIELD	4638:5	4638:10	6	tif -> tif_dirnumber
LEAF_NODE	4638:5	4638:5	7	tif
LEAF_NODE	4638:8	4638:8	7	->
LEAF_NODE	4638:10	4638:10	7	tif_dirnumber
EQ_OPERATOR	4638:24	4638:24	6	==
LEAF_NODE	4638:24	4638:24	7	==
FIELD	4638:27	4638:27	6	65535
LEAF_NODE	4638:27	4638:27	7	65535
LEAF_NODE	4638:32	4638:32	4	)
STATEMENTS	4638:34	4642:1	4	
LEAF_NODE	4638:34	4638:34	5	{
STATEMENTS	4639:5	4641:5	5	
EXPR_STATEMENT	4639:5	4640:53	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFCheckDirOffset" , "Cannot handle more than 65535 TIFF directories" ) ;
EXPR	4639:5	4639:5	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFCheckDirOffset" , "Cannot handle more than 65535 TIFF directories" )
FUNCTION_CALL	4639:5	4640:52	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFCheckDirOffset" , "Cannot handle more than 65535 TIFF directories" )
CALLEE	4639:5	4639:5	9	TIFFErrorExt
LEAF_NODE	4639:5	4639:5	10	TIFFErrorExt
LEAF_NODE	4639:17	4639:17	9	(
ARGUMENT	4639:18	4639:18	9	tif -> tif_clientdata
FIELD	4639:18	4639:23	10	tif -> tif_clientdata
LEAF_NODE	4639:18	4639:18	11	tif
LEAF_NODE	4639:21	4639:21	11	->
LEAF_NODE	4639:23	4639:23	11	tif_clientdata
LEAF_NODE	4639:37	4639:37	9	,
ARGUMENT	4639:39	4639:39	9	"TIFFCheckDirOffset"
FIELD	4639:39	4639:39	10	"TIFFCheckDirOffset"
LEAF_NODE	4639:39	4639:39	11	"TIFFCheckDirOffset"
LEAF_NODE	4639:59	4639:59	9	,
ARGUMENT	4640:4	4640:4	9	"Cannot handle more than 65535 TIFF directories"
FIELD	4640:4	4640:4	10	"Cannot handle more than 65535 TIFF directories"
LEAF_NODE	4640:4	4640:4	11	"Cannot handle more than 65535 TIFF directories"
LEAF_NODE	4640:52	4640:52	9	)
LEAF_NODE	4640:53	4640:53	7	;
JUMP_STATEMENT	4641:5	4641:13	6	return 0 ;
KEYWORD	4641:5	4641:5	7	return
LEAF_NODE	4641:5	4641:5	8	return
DESTINATION	4641:12	4641:12	7	0
EXPR	4641:12	4641:12	8	0
FIELD	4641:12	4641:12	9	0
LEAF_NODE	4641:12	4641:12	10	0
LEAF_NODE	4641:13	4641:13	7	;
LEAF_NODE	4642:1	4642:1	5	}
ITERATION	4644:1	4644:62	3	
KEYWORD	4644:1	4644:1	4	for
LEAF_NODE	4644:1	4644:1	5	for
LEAF_NODE	4644:5	4644:5	4	(
FOR_INIT	4644:6	4644:11	4	n = 0 ;
EXPR	4644:6	4644:6	5	n = 0
ASSIGN	4644:6	4644:10	6	n = 0
LVAL	4644:6	4644:6	7	n
FIELD	4644:6	4644:6	8	n
LEAF_NODE	4644:6	4644:6	9	n
ASSIGN_OP	4644:8	4644:8	7	=
LEAF_NODE	4644:8	4644:8	8	=
RVAL	4644:10	4644:10	7	0
FIELD	4644:10	4644:10	8	0
LEAF_NODE	4644:10	4644:10	9	0
LEAF_NODE	4644:11	4644:11	5	;
CONDITION	4644:13	4644:13	4	n < tif -> tif_dirnumber && tif -> tif_dirlist
EXPR	4644:13	4644:13	5	n < tif -> tif_dirnumber && tif -> tif_dirlist
AND	4644:13	4644:39	6	n < tif -> tif_dirnumber && tif -> tif_dirlist
EXPR	4644:13	4644:17	7	n < tif -> tif_dirnumber
FIELD	4644:13	4644:13	8	n
LEAF_NODE	4644:13	4644:13	9	n
REL_OPERATOR	4644:15	4644:15	8	<
LEAF_NODE	4644:15	4644:15	9	<
FIELD	4644:17	4644:22	8	tif -> tif_dirnumber
LEAF_NODE	4644:17	4644:17	9	tif
LEAF_NODE	4644:20	4644:20	9	->
LEAF_NODE	4644:22	4644:22	9	tif_dirnumber
LEAF_NODE	4644:36	4644:36	7	&&
EXPR	4644:39	4644:39	7	tif -> tif_dirlist
FIELD	4644:39	4644:44	8	tif -> tif_dirlist
LEAF_NODE	4644:39	4644:39	9	tif
LEAF_NODE	4644:42	4644:42	9	->
LEAF_NODE	4644:44	4644:44	9	tif_dirlist
LEAF_NODE	4644:55	4644:55	4	;
FOR_EXPR	4644:57	4644:57	4	n ++
EXPR	4644:57	4644:57	5	n ++
FIELD	4644:57	4644:58	6	n ++
LEAF_NODE	4644:57	4644:57	7	n
LEAF_NODE	4644:58	4644:58	7	++
LEAF_NODE	4644:60	4644:60	4	)
STATEMENTS	4644:62	4647:1	4	
LEAF_NODE	4644:62	4644:62	5	{
STATEMENTS	4645:2	4645:2	5	
SELECTION	4645:2	4646:3	6	
KEYWORD	4645:2	4645:2	7	if
LEAF_NODE	4645:2	4645:2	8	if
LEAF_NODE	4645:5	4645:5	7	(
CONDITION	4645:6	4645:6	7	tif -> tif_dirlist [ n ] == diroff
EXPR	4645:6	4645:29	8	tif -> tif_dirlist [ n ] == diroff
FIELD	4645:6	4645:24	9	tif -> tif_dirlist [ n ]
LEAF_NODE	4645:6	4645:6	10	tif
LEAF_NODE	4645:9	4645:9	10	->
LEAF_NODE	4645:11	4645:11	10	tif_dirlist
LEAF_NODE	4645:22	4645:22	10	[
EXPR	4645:23	4645:23	10	n
FIELD	4645:23	4645:23	11	n
LEAF_NODE	4645:23	4645:23	12	n
LEAF_NODE	4645:24	4645:24	10	]
EQ_OPERATOR	4645:26	4645:26	9	==
LEAF_NODE	4645:26	4645:26	10	==
FIELD	4645:29	4645:29	9	diroff
LEAF_NODE	4645:29	4645:29	10	diroff
LEAF_NODE	4645:35	4645:35	7	)
STATEMENTS	4646:3	4646:3	7	
JUMP_STATEMENT	4646:3	4646:11	8	return 0 ;
KEYWORD	4646:3	4646:3	9	return
LEAF_NODE	4646:3	4646:3	10	return
DESTINATION	4646:10	4646:10	9	0
EXPR	4646:10	4646:10	10	0
FIELD	4646:10	4646:10	11	0
LEAF_NODE	4646:10	4646:10	12	0
LEAF_NODE	4646:11	4646:11	9	;
LEAF_NODE	4647:1	4647:1	5	}
EXPR_STATEMENT	4649:1	4649:21	3	tif -> tif_dirnumber ++ ;
EXPR	4649:1	4649:1	4	tif -> tif_dirnumber ++
FIELD	4649:1	4649:19	5	tif -> tif_dirnumber ++
LEAF_NODE	4649:1	4649:1	6	tif
LEAF_NODE	4649:4	4649:4	6	->
LEAF_NODE	4649:6	4649:6	6	tif_dirnumber
LEAF_NODE	4649:19	4649:19	6	++
LEAF_NODE	4649:21	4649:21	4	;
SELECTION	4651:1	4651:76	3	
KEYWORD	4651:1	4651:1	4	if
LEAF_NODE	4651:1	4651:1	5	if
LEAF_NODE	4651:4	4651:4	4	(
CONDITION	4651:5	4651:5	4	tif -> tif_dirlist == NULL || tif -> tif_dirnumber > tif -> tif_dirlistsize
EXPR	4651:5	4651:5	5	tif -> tif_dirlist == NULL || tif -> tif_dirnumber > tif -> tif_dirlistsize
OR	4651:5	4651:33	6	tif -> tif_dirlist == NULL || tif -> tif_dirnumber > tif -> tif_dirlistsize
EXPR	4651:5	4651:25	7	tif -> tif_dirlist == NULL
FIELD	4651:5	4651:10	8	tif -> tif_dirlist
LEAF_NODE	4651:5	4651:5	9	tif
LEAF_NODE	4651:8	4651:8	9	->
LEAF_NODE	4651:10	4651:10	9	tif_dirlist
EQ_OPERATOR	4651:22	4651:22	8	==
LEAF_NODE	4651:22	4651:22	9	==
FIELD	4651:25	4651:25	8	NULL
LEAF_NODE	4651:25	4651:25	9	NULL
LEAF_NODE	4651:30	4651:30	7	||
EXPR	4651:33	4651:54	7	tif -> tif_dirnumber > tif -> tif_dirlistsize
FIELD	4651:33	4651:38	8	tif -> tif_dirnumber
LEAF_NODE	4651:33	4651:33	9	tif
LEAF_NODE	4651:36	4651:36	9	->
LEAF_NODE	4651:38	4651:38	9	tif_dirnumber
REL_OPERATOR	4651:52	4651:52	8	>
LEAF_NODE	4651:52	4651:52	9	>
FIELD	4651:54	4651:59	8	tif -> tif_dirlistsize
LEAF_NODE	4651:54	4651:54	9	tif
LEAF_NODE	4651:57	4651:57	9	->
LEAF_NODE	4651:59	4651:59	9	tif_dirlistsize
LEAF_NODE	4651:74	4651:74	4	)
STATEMENTS	4651:76	4667:1	4	
LEAF_NODE	4651:76	4651:76	5	{
STATEMENTS	4652:2	4666:2	5	
SIMPLE_DECL	4652:2	4652:21	6	uint64 * new_dirlist ;
VAR_DECL	4652:2	4652:10	7	uint64 * new_dirlist
TYPE	4652:2	4652:8	8	uint64 *
TYPE_NAME	4652:2	4652:2	9	uint64
LEAF_NODE	4652:2	4652:2	10	uint64
POINTER	4652:8	4652:8	9	*
LEAF_NODE	4652:8	4652:8	10	*
NAME	4652:10	4652:10	8	new_dirlist
LEAF_NODE	4652:10	4652:10	9	new_dirlist
LEAF_NODE	4652:21	4652:21	7	;
EXPR_STATEMENT	4658:2	4659:61	6	new_dirlist = ( uint64 * ) _TIFFCheckRealloc ( tif , tif -> tif_dirlist , tif -> tif_dirnumber , 2 * sizeof ( uint64 ) , "for IFD list" ) ;
EXPR	4658:2	4658:2	7	new_dirlist = ( uint64 * ) _TIFFCheckRealloc ( tif , tif -> tif_dirlist , tif -> tif_dirnumber , 2 * sizeof ( uint64 ) , "for IFD list" )
ASSIGN	4658:2	4658:16	8	new_dirlist = ( uint64 * ) _TIFFCheckRealloc ( tif , tif -> tif_dirlist , tif -> tif_dirnumber , 2 * sizeof ( uint64 ) , "for IFD list" )
LVAL	4658:2	4658:2	9	new_dirlist
FIELD	4658:2	4658:2	10	new_dirlist
LEAF_NODE	4658:2	4658:2	11	new_dirlist
ASSIGN_OP	4658:14	4658:14	9	=
LEAF_NODE	4658:14	4658:14	10	=
RVAL	4658:16	4658:25	9	( uint64 * ) _TIFFCheckRealloc ( tif , tif -> tif_dirlist , tif -> tif_dirnumber , 2 * sizeof ( uint64 ) , "for IFD list" )
LEAF_NODE	4658:16	4658:16	10	(
TYPE_NAME	4658:17	4658:17	10	uint64
LEAF_NODE	4658:17	4658:17	11	uint64
LEAF_NODE	4658:23	4658:23	10	*
LEAF_NODE	4658:24	4658:24	10	)
FUNCTION_CALL	4658:25	4659:60	10	_TIFFCheckRealloc ( tif , tif -> tif_dirlist , tif -> tif_dirnumber , 2 * sizeof ( uint64 ) , "for IFD list" )
CALLEE	4658:25	4658:25	11	_TIFFCheckRealloc
LEAF_NODE	4658:25	4658:25	12	_TIFFCheckRealloc
LEAF_NODE	4658:42	4658:42	11	(
ARGUMENT	4658:43	4658:43	11	tif
FIELD	4658:43	4658:43	12	tif
LEAF_NODE	4658:43	4658:43	13	tif
LEAF_NODE	4658:46	4658:46	11	,
ARGUMENT	4658:48	4658:48	11	tif -> tif_dirlist
FIELD	4658:48	4658:53	12	tif -> tif_dirlist
LEAF_NODE	4658:48	4658:48	13	tif
LEAF_NODE	4658:51	4658:51	13	->
LEAF_NODE	4658:53	4658:53	13	tif_dirlist
LEAF_NODE	4658:64	4658:64	11	,
ARGUMENT	4659:6	4659:6	11	tif -> tif_dirnumber
FIELD	4659:6	4659:11	12	tif -> tif_dirnumber
LEAF_NODE	4659:6	4659:6	13	tif
LEAF_NODE	4659:9	4659:9	13	->
LEAF_NODE	4659:11	4659:11	13	tif_dirnumber
LEAF_NODE	4659:24	4659:24	11	,
ARGUMENT	4659:26	4659:30	11	2 * sizeof ( uint64 )
FIELD	4659:26	4659:26	12	2
LEAF_NODE	4659:26	4659:26	13	2
LEAF_NODE	4659:28	4659:28	12	*
FUNCTION_CALL	4659:30	4659:43	12	sizeof ( uint64 )
CALLEE	4659:30	4659:30	13	sizeof
LEAF_NODE	4659:30	4659:30	14	sizeof
LEAF_NODE	4659:36	4659:36	13	(
ARGUMENT	4659:37	4659:37	13	uint64
FIELD	4659:37	4659:37	14	uint64
LEAF_NODE	4659:37	4659:37	15	uint64
LEAF_NODE	4659:43	4659:43	13	)
LEAF_NODE	4659:44	4659:44	11	,
ARGUMENT	4659:46	4659:46	11	"for IFD list"
FIELD	4659:46	4659:46	12	"for IFD list"
LEAF_NODE	4659:46	4659:46	13	"for IFD list"
LEAF_NODE	4659:60	4659:60	11	)
LEAF_NODE	4659:61	4659:61	7	;
SELECTION	4660:2	4661:3	6	
KEYWORD	4660:2	4660:2	7	if
LEAF_NODE	4660:2	4660:2	8	if
LEAF_NODE	4660:5	4660:5	7	(
CONDITION	4660:6	4660:6	7	! new_dirlist
EXPR	4660:6	4660:6	8	! new_dirlist
UNARY_EXPR	4660:6	4660:7	9	! new_dirlist
UNARY_OPERATOR	4660:6	4660:6	10	!
LEAF_NODE	4660:6	4660:6	11	!
FIELD	4660:7	4660:7	10	new_dirlist
LEAF_NODE	4660:7	4660:7	11	new_dirlist
LEAF_NODE	4660:18	4660:18	7	)
STATEMENTS	4661:3	4661:3	7	
JUMP_STATEMENT	4661:3	4661:11	8	return 0 ;
KEYWORD	4661:3	4661:3	9	return
LEAF_NODE	4661:3	4661:3	10	return
DESTINATION	4661:10	4661:10	9	0
EXPR	4661:10	4661:10	10	0
FIELD	4661:10	4661:10	11	0
LEAF_NODE	4661:10	4661:10	12	0
LEAF_NODE	4661:11	4661:11	9	;
SELECTION	4662:2	4663:6	6	
KEYWORD	4662:2	4662:2	7	if
LEAF_NODE	4662:2	4662:2	8	if
LEAF_NODE	4662:4	4662:4	7	(
CONDITION	4662:6	4662:6	7	tif -> tif_dirnumber >= 32768
EXPR	4662:6	4662:28	8	tif -> tif_dirnumber >= 32768
FIELD	4662:6	4662:11	9	tif -> tif_dirnumber
LEAF_NODE	4662:6	4662:6	10	tif
LEAF_NODE	4662:9	4662:9	10	->
LEAF_NODE	4662:11	4662:11	10	tif_dirnumber
REL_OPERATOR	4662:25	4662:25	9	>=
LEAF_NODE	4662:25	4662:25	10	>=
FIELD	4662:28	4662:28	9	32768
LEAF_NODE	4662:28	4662:28	10	32768
LEAF_NODE	4662:34	4662:34	7	)
STATEMENTS	4663:6	4663:6	7	
EXPR_STATEMENT	4663:6	4663:34	8	tif -> tif_dirlistsize = 65535 ;
EXPR	4663:6	4663:6	9	tif -> tif_dirlistsize = 65535
ASSIGN	4663:6	4663:29	10	tif -> tif_dirlistsize = 65535
LVAL	4663:6	4663:6	11	tif -> tif_dirlistsize
FIELD	4663:6	4663:11	12	tif -> tif_dirlistsize
LEAF_NODE	4663:6	4663:6	13	tif
LEAF_NODE	4663:9	4663:9	13	->
LEAF_NODE	4663:11	4663:11	13	tif_dirlistsize
ASSIGN_OP	4663:27	4663:27	11	=
LEAF_NODE	4663:27	4663:27	12	=
RVAL	4663:29	4663:29	11	65535
FIELD	4663:29	4663:29	12	65535
LEAF_NODE	4663:29	4663:29	13	65535
LEAF_NODE	4663:34	4663:34	9	;
SELECTION	4664:2	4665:6	6	
KEYWORD	4664:2	4664:2	7	else
LEAF_NODE	4664:2	4664:2	8	else
STATEMENTS	4665:6	4665:6	7	
EXPR_STATEMENT	4665:6	4665:51	8	tif -> tif_dirlistsize = 2 * tif -> tif_dirnumber ;
EXPR	4665:6	4665:6	9	tif -> tif_dirlistsize = 2 * tif -> tif_dirnumber
ASSIGN	4665:6	4665:29	10	tif -> tif_dirlistsize = 2 * tif -> tif_dirnumber
LVAL	4665:6	4665:6	11	tif -> tif_dirlistsize
FIELD	4665:6	4665:11	12	tif -> tif_dirlistsize
LEAF_NODE	4665:6	4665:6	13	tif
LEAF_NODE	4665:9	4665:9	13	->
LEAF_NODE	4665:11	4665:11	13	tif_dirlistsize
ASSIGN_OP	4665:27	4665:27	11	=
LEAF_NODE	4665:27	4665:27	12	=
RVAL	4665:29	4665:33	11	2 * tif -> tif_dirnumber
FIELD	4665:29	4665:29	12	2
LEAF_NODE	4665:29	4665:29	13	2
LEAF_NODE	4665:31	4665:31	12	*
FIELD	4665:33	4665:38	12	tif -> tif_dirnumber
LEAF_NODE	4665:33	4665:33	13	tif
LEAF_NODE	4665:36	4665:36	13	->
LEAF_NODE	4665:38	4665:38	13	tif_dirnumber
LEAF_NODE	4665:51	4665:51	9	;
EXPR_STATEMENT	4666:2	4666:32	6	tif -> tif_dirlist = new_dirlist ;
EXPR	4666:2	4666:2	7	tif -> tif_dirlist = new_dirlist
ASSIGN	4666:2	4666:21	8	tif -> tif_dirlist = new_dirlist
LVAL	4666:2	4666:2	9	tif -> tif_dirlist
FIELD	4666:2	4666:7	10	tif -> tif_dirlist
LEAF_NODE	4666:2	4666:2	11	tif
LEAF_NODE	4666:5	4666:5	11	->
LEAF_NODE	4666:7	4666:7	11	tif_dirlist
ASSIGN_OP	4666:19	4666:19	9	=
LEAF_NODE	4666:19	4666:19	10	=
RVAL	4666:21	4666:21	9	new_dirlist
FIELD	4666:21	4666:21	10	new_dirlist
LEAF_NODE	4666:21	4666:21	11	new_dirlist
LEAF_NODE	4666:32	4666:32	7	;
LEAF_NODE	4667:1	4667:1	5	}
EXPR_STATEMENT	4669:1	4669:50	3	tif -> tif_dirlist [ tif -> tif_dirnumber - 1 ] = diroff ;
EXPR	4669:1	4669:1	4	tif -> tif_dirlist [ tif -> tif_dirnumber - 1 ] = diroff
ASSIGN	4669:1	4669:44	5	tif -> tif_dirlist [ tif -> tif_dirnumber - 1 ] = diroff
LVAL	4669:1	4669:1	6	tif -> tif_dirlist [ tif -> tif_dirnumber - 1 ]
FIELD	4669:1	4669:40	7	tif -> tif_dirlist [ tif -> tif_dirnumber - 1 ]
LEAF_NODE	4669:1	4669:1	8	tif
LEAF_NODE	4669:4	4669:4	8	->
LEAF_NODE	4669:6	4669:6	8	tif_dirlist
LEAF_NODE	4669:17	4669:17	8	[
EXPR	4669:18	4669:39	8	tif -> tif_dirnumber - 1
FIELD	4669:18	4669:23	9	tif -> tif_dirnumber
LEAF_NODE	4669:18	4669:18	10	tif
LEAF_NODE	4669:21	4669:21	10	->
LEAF_NODE	4669:23	4669:23	10	tif_dirnumber
LEAF_NODE	4669:37	4669:37	9	-
FIELD	4669:39	4669:39	9	1
LEAF_NODE	4669:39	4669:39	10	1
LEAF_NODE	4669:40	4669:40	8	]
ASSIGN_OP	4669:42	4669:42	6	=
LEAF_NODE	4669:42	4669:42	7	=
RVAL	4669:44	4669:44	6	diroff
FIELD	4669:44	4669:44	7	diroff
LEAF_NODE	4669:44	4669:44	8	diroff
LEAF_NODE	4669:50	4669:50	4	;
JUMP_STATEMENT	4671:1	4671:9	3	return 1 ;
KEYWORD	4671:1	4671:1	4	return
LEAF_NODE	4671:1	4671:1	5	return
DESTINATION	4671:8	4671:8	4	1
EXPR	4671:8	4671:8	5	1
FIELD	4671:8	4671:8	6	1
LEAF_NODE	4671:8	4671:8	7	1
LEAF_NODE	4671:9	4671:9	4	;
LEAF_NODE	4672:0	4672:0	2	}
FUNCTION_DEF	4678:0	4698:0	1	
RETURN_TYPE	4678:0	4678:7	2	static int
LEAF_NODE	4678:0	4678:0	3	static
TYPE_NAME	4678:7	4678:7	3	int
LEAF_NODE	4678:7	4678:7	4	int
FUNCTION_NAME	4679:0	4679:0	2	CheckDirCount
LEAF_NODE	4679:0	4679:0	3	CheckDirCount
PARAMETER_LIST	4679:13	4679:56	2	( TIFF * tif , TIFFDirEntry * dir , uint32 count )
LEAF_NODE	4679:13	4679:13	3	(
PARAMETER_DECL	4679:14	4679:20	3	TIFF * tif
TYPE	4679:14	4679:18	4	TIFF *
TYPE_NAME	4679:14	4679:14	5	TIFF
LEAF_NODE	4679:14	4679:14	6	TIFF
POINTER	4679:18	4679:18	5	*
LEAF_NODE	4679:18	4679:18	6	*
NAME	4679:20	4679:20	4	tif
LEAF_NODE	4679:20	4679:20	5	tif
LEAF_NODE	4679:23	4679:23	3	,
PARAMETER_DECL	4679:25	4679:39	3	TIFFDirEntry * dir
TYPE	4679:25	4679:37	4	TIFFDirEntry *
TYPE_NAME	4679:25	4679:25	5	TIFFDirEntry
LEAF_NODE	4679:25	4679:25	6	TIFFDirEntry
POINTER	4679:37	4679:37	5	*
LEAF_NODE	4679:37	4679:37	6	*
NAME	4679:39	4679:39	4	dir
LEAF_NODE	4679:39	4679:39	5	dir
LEAF_NODE	4679:42	4679:42	3	,
PARAMETER_DECL	4679:44	4679:51	3	uint32 count
TYPE	4679:44	4679:44	4	uint32
TYPE_NAME	4679:44	4679:44	5	uint32
LEAF_NODE	4679:44	4679:44	6	uint32
NAME	4679:51	4679:51	4	count
LEAF_NODE	4679:51	4679:51	5	count
LEAF_NODE	4679:56	4679:56	3	)
LEAF_NODE	4680:0	4680:0	2	{
STATEMENTS	4681:1	4697:1	2	
SELECTION	4681:1	4681:38	3	
KEYWORD	4681:1	4681:1	4	if
LEAF_NODE	4681:1	4681:1	5	if
LEAF_NODE	4681:4	4681:4	4	(
CONDITION	4681:5	4681:5	4	( uint64 ) count > dir -> tdir_count
EXPR	4681:5	4681:21	5	( uint64 ) count > dir -> tdir_count
LEAF_NODE	4681:5	4681:5	6	(
TYPE_NAME	4681:6	4681:6	6	uint64
LEAF_NODE	4681:6	4681:6	7	uint64
LEAF_NODE	4681:12	4681:12	6	)
FIELD	4681:13	4681:13	6	count
LEAF_NODE	4681:13	4681:13	7	count
REL_OPERATOR	4681:19	4681:19	6	>
LEAF_NODE	4681:19	4681:19	7	>
FIELD	4681:21	4681:26	6	dir -> tdir_count
LEAF_NODE	4681:21	4681:21	7	dir
LEAF_NODE	4681:24	4681:24	7	->
LEAF_NODE	4681:26	4681:26	7	tdir_count
LEAF_NODE	4681:36	4681:36	4	)
STATEMENTS	4681:38	4688:1	4	
LEAF_NODE	4681:38	4681:38	5	{
STATEMENTS	4682:2	4687:2	5	
SIMPLE_DECL	4682:2	4682:61	6	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag ) ;
VAR_DECL	4682:2	4682:19	7	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
TYPE	4682:2	4682:17	8	const TIFFField *
TYPE_NAME	4682:2	4682:8	9	const TIFFField
LEAF_NODE	4682:2	4682:2	10	const
LEAF_NODE	4682:8	4682:8	10	TIFFField
POINTER	4682:17	4682:17	9	*
LEAF_NODE	4682:17	4682:17	10	*
NAME	4682:19	4682:19	8	fip
LEAF_NODE	4682:19	4682:19	9	fip
LEAF_NODE	0:0	0:0	8	;
INIT	4682:19	4682:19	8	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
ASSIGN	4682:19	4682:25	9	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
LVAL	4682:19	4682:19	10	fip
NAME	4682:19	4682:19	11	fip
LEAF_NODE	4682:19	4682:19	12	fip
ASSIGN_OP	4682:23	4682:23	10	=
LEAF_NODE	4682:23	4682:23	11	=
RVAL	4682:25	4682:25	10	TIFFFieldWithTag ( tif , dir -> tdir_tag )
FUNCTION_CALL	4682:25	4682:60	11	TIFFFieldWithTag ( tif , dir -> tdir_tag )
CALLEE	4682:25	4682:25	12	TIFFFieldWithTag
LEAF_NODE	4682:25	4682:25	13	TIFFFieldWithTag
LEAF_NODE	4682:41	4682:41	12	(
ARGUMENT	4682:42	4682:42	12	tif
FIELD	4682:42	4682:42	13	tif
LEAF_NODE	4682:42	4682:42	14	tif
LEAF_NODE	4682:45	4682:45	12	,
ARGUMENT	4682:47	4682:47	12	dir -> tdir_tag
FIELD	4682:47	4682:52	13	dir -> tdir_tag
LEAF_NODE	4682:47	4682:47	14	dir
LEAF_NODE	4682:50	4682:50	14	->
LEAF_NODE	4682:52	4682:52	14	tdir_tag
LEAF_NODE	4682:60	4682:60	12	)
LEAF_NODE	4682:61	4682:61	7	;
LEAF_NODE	4683:2	4683:2	6	TIFFWarningExt
LEAF_NODE	4683:16	4683:16	6	(
LEAF_NODE	4683:17	4683:17	6	tif
LEAF_NODE	4683:20	4683:20	6	->
LEAF_NODE	4683:22	4683:22	6	tif_clientdata
LEAF_NODE	4683:36	4683:36	6	,
LEAF_NODE	4683:38	4683:38	6	tif
LEAF_NODE	4683:41	4683:41	6	->
LEAF_NODE	4683:43	4683:43	6	tif_name
LEAF_NODE	4683:51	4683:51	6	,
LEAF_NODE	4684:1	4684:1	6	"incorrect count for field \"%s\" ("
LEAF_NODE	4684:38	4684:38	6	TIFF_UINT64_FORMAT
LEAF_NODE	4684:57	4684:57	6	", expecting %u); tag ignored"
LEAF_NODE	4684:87	4684:87	6	,
LEAF_NODE	4685:6	4685:6	6	fip
LEAF_NODE	4685:10	4685:10	6	?
LEAF_NODE	4685:12	4685:12	6	fip
LEAF_NODE	4685:15	4685:15	6	->
LABEL	4685:17	4685:28	6	field_name :
LEAF_NODE	4685:17	4685:17	7	field_name
LEAF_NODE	4685:28	4685:28	7	:
LEAF_NODE	4685:30	4685:30	6	"unknown tagname"
LEAF_NODE	4685:47	4685:47	6	,
LEAF_NODE	4686:6	4686:6	6	dir
LEAF_NODE	4686:9	4686:9	6	->
LEAF_NODE	4686:11	4686:11	6	tdir_count
LEAF_NODE	4686:21	4686:21	6	,
LEAF_NODE	4686:23	4686:23	6	count
LEAF_NODE	4686:28	4686:28	6	)
LEAF_NODE	4686:29	4686:29	6	;
JUMP_STATEMENT	4687:2	4687:12	6	return ( 0 ) ;
KEYWORD	4687:2	4687:2	7	return
LEAF_NODE	4687:2	4687:2	8	return
DESTINATION	4687:9	4687:9	7	( 0 )
EXPR	4687:9	4687:11	8	( 0 )
LEAF_NODE	4687:9	4687:9	9	(
FIELD	4687:10	4687:10	9	0
LEAF_NODE	4687:10	4687:10	10	0
LEAF_NODE	4687:11	4687:11	9	)
LEAF_NODE	4687:12	4687:12	7	;
LEAF_NODE	4688:1	4688:1	5	}
SELECTION	4688:3	4688:8	3	
KEYWORD	4688:3	4688:3	4	else
LEAF_NODE	4688:3	4688:3	5	else
STATEMENTS	4688:8	4688:8	4	
SELECTION	4688:8	4688:45	5	
KEYWORD	4688:8	4688:8	6	if
LEAF_NODE	4688:8	4688:8	7	if
LEAF_NODE	4688:11	4688:11	6	(
CONDITION	4688:12	4688:12	6	( uint64 ) count < dir -> tdir_count
EXPR	4688:12	4688:28	7	( uint64 ) count < dir -> tdir_count
LEAF_NODE	4688:12	4688:12	8	(
TYPE_NAME	4688:13	4688:13	8	uint64
LEAF_NODE	4688:13	4688:13	9	uint64
LEAF_NODE	4688:19	4688:19	8	)
FIELD	4688:20	4688:20	8	count
LEAF_NODE	4688:20	4688:20	9	count
REL_OPERATOR	4688:26	4688:26	8	<
LEAF_NODE	4688:26	4688:26	9	<
FIELD	4688:28	4688:33	8	dir -> tdir_count
LEAF_NODE	4688:28	4688:28	9	dir
LEAF_NODE	4688:31	4688:31	9	->
LEAF_NODE	4688:33	4688:33	9	tdir_count
LEAF_NODE	4688:43	4688:43	6	)
STATEMENTS	4688:45	4696:1	6	
LEAF_NODE	4688:45	4688:45	7	{
STATEMENTS	4689:2	4695:2	7	
SIMPLE_DECL	4689:2	4689:61	8	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag ) ;
VAR_DECL	4689:2	4689:19	9	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
TYPE	4689:2	4689:17	10	const TIFFField *
TYPE_NAME	4689:2	4689:8	11	const TIFFField
LEAF_NODE	4689:2	4689:2	12	const
LEAF_NODE	4689:8	4689:8	12	TIFFField
POINTER	4689:17	4689:17	11	*
LEAF_NODE	4689:17	4689:17	12	*
NAME	4689:19	4689:19	10	fip
LEAF_NODE	4689:19	4689:19	11	fip
LEAF_NODE	0:0	0:0	10	;
INIT	4689:19	4689:19	10	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
ASSIGN	4689:19	4689:25	11	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
LVAL	4689:19	4689:19	12	fip
NAME	4689:19	4689:19	13	fip
LEAF_NODE	4689:19	4689:19	14	fip
ASSIGN_OP	4689:23	4689:23	12	=
LEAF_NODE	4689:23	4689:23	13	=
RVAL	4689:25	4689:25	12	TIFFFieldWithTag ( tif , dir -> tdir_tag )
FUNCTION_CALL	4689:25	4689:60	13	TIFFFieldWithTag ( tif , dir -> tdir_tag )
CALLEE	4689:25	4689:25	14	TIFFFieldWithTag
LEAF_NODE	4689:25	4689:25	15	TIFFFieldWithTag
LEAF_NODE	4689:41	4689:41	14	(
ARGUMENT	4689:42	4689:42	14	tif
FIELD	4689:42	4689:42	15	tif
LEAF_NODE	4689:42	4689:42	16	tif
LEAF_NODE	4689:45	4689:45	14	,
ARGUMENT	4689:47	4689:47	14	dir -> tdir_tag
FIELD	4689:47	4689:52	15	dir -> tdir_tag
LEAF_NODE	4689:47	4689:47	16	dir
LEAF_NODE	4689:50	4689:50	16	->
LEAF_NODE	4689:52	4689:52	16	tdir_tag
LEAF_NODE	4689:60	4689:60	14	)
LEAF_NODE	4689:61	4689:61	9	;
LEAF_NODE	4690:2	4690:2	8	TIFFWarningExt
LEAF_NODE	4690:16	4690:16	8	(
LEAF_NODE	4690:17	4690:17	8	tif
LEAF_NODE	4690:20	4690:20	8	->
LEAF_NODE	4690:22	4690:22	8	tif_clientdata
LEAF_NODE	4690:36	4690:36	8	,
LEAF_NODE	4690:38	4690:38	8	tif
LEAF_NODE	4690:41	4690:41	8	->
LEAF_NODE	4690:43	4690:43	8	tif_name
LEAF_NODE	4690:51	4690:51	8	,
LEAF_NODE	4691:1	4691:1	8	"incorrect count for field \"%s\" ("
LEAF_NODE	4691:38	4691:38	8	TIFF_UINT64_FORMAT
LEAF_NODE	4691:57	4691:57	8	", expecting %u); tag trimmed"
LEAF_NODE	4691:87	4691:87	8	,
LEAF_NODE	4692:6	4692:6	8	fip
LEAF_NODE	4692:10	4692:10	8	?
LEAF_NODE	4692:12	4692:12	8	fip
LEAF_NODE	4692:15	4692:15	8	->
LABEL	4692:17	4692:28	8	field_name :
LEAF_NODE	4692:17	4692:17	9	field_name
LEAF_NODE	4692:28	4692:28	9	:
LEAF_NODE	4692:30	4692:30	8	"unknown tagname"
LEAF_NODE	4692:47	4692:47	8	,
LEAF_NODE	4693:6	4693:6	8	dir
LEAF_NODE	4693:9	4693:9	8	->
LEAF_NODE	4693:11	4693:11	8	tdir_count
LEAF_NODE	4693:21	4693:21	8	,
LEAF_NODE	4693:23	4693:23	8	count
LEAF_NODE	4693:28	4693:28	8	)
LEAF_NODE	4693:29	4693:29	8	;
EXPR_STATEMENT	4694:2	4694:25	8	dir -> tdir_count = count ;
EXPR	4694:2	4694:2	9	dir -> tdir_count = count
ASSIGN	4694:2	4694:20	10	dir -> tdir_count = count
LVAL	4694:2	4694:2	11	dir -> tdir_count
FIELD	4694:2	4694:7	12	dir -> tdir_count
LEAF_NODE	4694:2	4694:2	13	dir
LEAF_NODE	4694:5	4694:5	13	->
LEAF_NODE	4694:7	4694:7	13	tdir_count
ASSIGN_OP	4694:18	4694:18	11	=
LEAF_NODE	4694:18	4694:18	12	=
RVAL	4694:20	4694:20	11	count
FIELD	4694:20	4694:20	12	count
LEAF_NODE	4694:20	4694:20	13	count
LEAF_NODE	4694:25	4694:25	9	;
JUMP_STATEMENT	4695:2	4695:12	8	return ( 1 ) ;
KEYWORD	4695:2	4695:2	9	return
LEAF_NODE	4695:2	4695:2	10	return
DESTINATION	4695:9	4695:9	9	( 1 )
EXPR	4695:9	4695:11	10	( 1 )
LEAF_NODE	4695:9	4695:9	11	(
FIELD	4695:10	4695:10	11	1
LEAF_NODE	4695:10	4695:10	12	1
LEAF_NODE	4695:11	4695:11	11	)
LEAF_NODE	4695:12	4695:12	9	;
LEAF_NODE	4696:1	4696:1	7	}
JUMP_STATEMENT	4697:1	4697:11	3	return ( 1 ) ;
KEYWORD	4697:1	4697:1	4	return
LEAF_NODE	4697:1	4697:1	5	return
DESTINATION	4697:8	4697:8	4	( 1 )
EXPR	4697:8	4697:10	5	( 1 )
LEAF_NODE	4697:8	4697:8	6	(
FIELD	4697:9	4697:9	6	1
LEAF_NODE	4697:9	4697:9	7	1
LEAF_NODE	4697:10	4697:10	6	)
LEAF_NODE	4697:11	4697:11	4	;
LEAF_NODE	4698:0	4698:0	2	}
FUNCTION_DEF	4705:0	4958:0	1	
RETURN_TYPE	4705:0	4705:7	2	static uint16
LEAF_NODE	4705:0	4705:0	3	static
TYPE_NAME	4705:7	4705:7	3	uint16
LEAF_NODE	4705:7	4705:7	4	uint16
FUNCTION_NAME	4706:0	4706:0	2	TIFFFetchDirectory
LEAF_NODE	4706:0	4706:0	3	TIFFFetchDirectory
PARAMETER_LIST	4706:18	4707:37	2	( TIFF * tif , uint64 diroff , TIFFDirEntry * * pdir , uint64 * nextdiroff )
LEAF_NODE	4706:18	4706:18	3	(
PARAMETER_DECL	4706:19	4706:25	3	TIFF * tif
TYPE	4706:19	4706:23	4	TIFF *
TYPE_NAME	4706:19	4706:19	5	TIFF
LEAF_NODE	4706:19	4706:19	6	TIFF
POINTER	4706:23	4706:23	5	*
LEAF_NODE	4706:23	4706:23	6	*
NAME	4706:25	4706:25	4	tif
LEAF_NODE	4706:25	4706:25	5	tif
LEAF_NODE	4706:28	4706:28	3	,
PARAMETER_DECL	4706:30	4706:37	3	uint64 diroff
TYPE	4706:30	4706:30	4	uint64
TYPE_NAME	4706:30	4706:30	5	uint64
LEAF_NODE	4706:30	4706:30	6	uint64
NAME	4706:37	4706:37	4	diroff
LEAF_NODE	4706:37	4706:37	5	diroff
LEAF_NODE	4706:43	4706:43	3	,
PARAMETER_DECL	4706:45	4706:60	3	TIFFDirEntry * * pdir
TYPE	4706:45	4706:57	4	TIFFDirEntry * *
TYPE_NAME	4706:45	4706:45	5	TIFFDirEntry
LEAF_NODE	4706:45	4706:45	6	TIFFDirEntry
POINTER	4706:57	4706:58	5	* *
LEAF_NODE	4706:57	4706:57	6	*
LEAF_NODE	4706:58	4706:58	6	*
NAME	4706:60	4706:60	4	pdir
LEAF_NODE	4706:60	4706:60	5	pdir
LEAF_NODE	4706:64	4706:64	3	,
PARAMETER_DECL	4707:19	4707:27	3	uint64 * nextdiroff
TYPE	4707:19	4707:26	4	uint64 *
TYPE_NAME	4707:19	4707:19	5	uint64
LEAF_NODE	4707:19	4707:19	6	uint64
POINTER	4707:26	4707:26	5	*
LEAF_NODE	4707:26	4707:26	6	*
NAME	4707:27	4707:27	4	nextdiroff
LEAF_NODE	4707:27	4707:27	5	nextdiroff
LEAF_NODE	4707:37	4707:37	3	)
LEAF_NODE	4708:0	4708:0	2	{
STATEMENTS	4709:1	4957:1	2	
LEAF_NODE	4709:1	4709:1	3	static
SIMPLE_DECL	4709:8	4709:50	3	const char [ ] module ; module = "TIFFFetchDirectory" ;
VAR_DECL	4709:8	4709:19	4	const char [ ] module ; module = "TIFFFetchDirectory"
TYPE	4709:8	4709:25	5	const char [ ]
TYPE_NAME	4709:8	4709:14	6	const char
LEAF_NODE	4709:8	4709:8	7	const
LEAF_NODE	4709:14	4709:14	7	char
TYPE_SUFFIX	4709:25	4709:26	6	[ ]
LEAF_NODE	4709:25	4709:25	7	[
LEAF_NODE	4709:26	4709:26	7	]
NAME	4709:19	4709:19	5	module
LEAF_NODE	4709:19	4709:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	4709:19	4709:19	5	module = "TIFFFetchDirectory"
ASSIGN	4709:19	4709:30	6	module = "TIFFFetchDirectory"
LVAL	4709:19	4709:19	7	module
NAME	4709:19	4709:19	8	module
LEAF_NODE	4709:19	4709:19	9	module
ASSIGN_OP	4709:28	4709:28	7	=
LEAF_NODE	4709:28	4709:28	8	=
RVAL	4709:30	4709:30	7	"TIFFFetchDirectory"
FIELD	4709:30	4709:30	8	"TIFFFetchDirectory"
LEAF_NODE	4709:30	4709:30	9	"TIFFFetchDirectory"
LEAF_NODE	4709:50	4709:50	4	;
SIMPLE_DECL	4711:1	4711:14	3	void * origdir ;
VAR_DECL	4711:1	4711:7	4	void * origdir
TYPE	4711:1	4711:5	5	void *
TYPE_NAME	4711:1	4711:1	6	void
LEAF_NODE	4711:1	4711:1	7	void
POINTER	4711:5	4711:5	6	*
LEAF_NODE	4711:5	4711:5	7	*
NAME	4711:7	4711:7	5	origdir
LEAF_NODE	4711:7	4711:7	6	origdir
LEAF_NODE	4711:14	4711:14	4	;
SIMPLE_DECL	4712:1	4712:18	3	uint16 dircount16 ;
VAR_DECL	4712:1	4712:8	4	uint16 dircount16
TYPE	4712:1	4712:1	5	uint16
TYPE_NAME	4712:1	4712:1	6	uint16
LEAF_NODE	4712:1	4712:1	7	uint16
NAME	4712:8	4712:8	5	dircount16
LEAF_NODE	4712:8	4712:8	6	dircount16
LEAF_NODE	4712:18	4712:18	4	;
SIMPLE_DECL	4713:1	4713:15	3	uint32 dirsize ;
VAR_DECL	4713:1	4713:8	4	uint32 dirsize
TYPE	4713:1	4713:1	5	uint32
TYPE_NAME	4713:1	4713:1	6	uint32
LEAF_NODE	4713:1	4713:1	7	uint32
NAME	4713:8	4713:8	5	dirsize
LEAF_NODE	4713:8	4713:8	6	dirsize
LEAF_NODE	4713:15	4713:15	4	;
SIMPLE_DECL	4714:1	4714:18	3	TIFFDirEntry * dir ;
VAR_DECL	4714:1	4714:15	4	TIFFDirEntry * dir
TYPE	4714:1	4714:13	5	TIFFDirEntry *
TYPE_NAME	4714:1	4714:1	6	TIFFDirEntry
LEAF_NODE	4714:1	4714:1	7	TIFFDirEntry
POINTER	4714:13	4714:13	6	*
LEAF_NODE	4714:13	4714:13	7	*
NAME	4714:15	4714:15	5	dir
LEAF_NODE	4714:15	4714:15	6	dir
LEAF_NODE	4714:18	4714:18	4	;
SIMPLE_DECL	4715:1	4715:10	3	uint8 * ma ;
VAR_DECL	4715:1	4715:8	4	uint8 * ma
TYPE	4715:1	4715:6	5	uint8 *
TYPE_NAME	4715:1	4715:1	6	uint8
LEAF_NODE	4715:1	4715:1	7	uint8
POINTER	4715:6	4715:6	6	*
LEAF_NODE	4715:6	4715:6	7	*
NAME	4715:8	4715:8	5	ma
LEAF_NODE	4715:8	4715:8	6	ma
LEAF_NODE	4715:10	4715:10	4	;
SIMPLE_DECL	4716:1	4716:17	3	TIFFDirEntry * mb ;
VAR_DECL	4716:1	4716:15	4	TIFFDirEntry * mb
TYPE	4716:1	4716:13	5	TIFFDirEntry *
TYPE_NAME	4716:1	4716:1	6	TIFFDirEntry
LEAF_NODE	4716:1	4716:1	7	TIFFDirEntry
POINTER	4716:13	4716:13	6	*
LEAF_NODE	4716:13	4716:13	7	*
NAME	4716:15	4716:15	5	mb
LEAF_NODE	4716:15	4716:15	6	mb
LEAF_NODE	4716:17	4716:17	4	;
SIMPLE_DECL	4717:1	4717:9	3	uint16 n ;
VAR_DECL	4717:1	4717:8	4	uint16 n
TYPE	4717:1	4717:1	5	uint16
TYPE_NAME	4717:1	4717:1	6	uint16
LEAF_NODE	4717:1	4717:1	7	uint16
NAME	4717:8	4717:8	5	n
LEAF_NODE	4717:8	4717:8	6	n
LEAF_NODE	4717:9	4717:9	4	;
EXPR_STATEMENT	4719:1	4719:13	3	assert ( pdir ) ;
EXPR	4719:1	4719:1	4	assert ( pdir )
FUNCTION_CALL	4719:1	4719:12	5	assert ( pdir )
CALLEE	4719:1	4719:1	6	assert
LEAF_NODE	4719:1	4719:1	7	assert
LEAF_NODE	4719:7	4719:7	6	(
ARGUMENT	4719:8	4719:8	6	pdir
FIELD	4719:8	4719:8	7	pdir
LEAF_NODE	4719:8	4719:8	8	pdir
LEAF_NODE	4719:12	4719:12	6	)
LEAF_NODE	4719:13	4719:13	4	;
EXPR_STATEMENT	4721:1	4721:25	3	tif -> tif_diroff = diroff ;
EXPR	4721:1	4721:1	4	tif -> tif_diroff = diroff
ASSIGN	4721:1	4721:19	5	tif -> tif_diroff = diroff
LVAL	4721:1	4721:1	6	tif -> tif_diroff
FIELD	4721:1	4721:6	7	tif -> tif_diroff
LEAF_NODE	4721:1	4721:1	8	tif
LEAF_NODE	4721:4	4721:4	8	->
LEAF_NODE	4721:6	4721:6	8	tif_diroff
ASSIGN_OP	4721:17	4721:17	6	=
LEAF_NODE	4721:17	4721:17	7	=
RVAL	4721:19	4721:19	6	diroff
FIELD	4721:19	4721:19	7	diroff
LEAF_NODE	4721:19	4721:19	8	diroff
LEAF_NODE	4721:25	4721:25	4	;
SELECTION	4722:1	4723:2	3	
KEYWORD	4722:1	4722:1	4	if
LEAF_NODE	4722:1	4722:1	5	if
LEAF_NODE	4722:4	4722:4	4	(
CONDITION	4722:5	4722:5	4	nextdiroff
EXPR	4722:5	4722:5	5	nextdiroff
FIELD	4722:5	4722:5	6	nextdiroff
LEAF_NODE	4722:5	4722:5	7	nextdiroff
LEAF_NODE	4722:15	4722:15	4	)
STATEMENTS	4723:2	4723:2	4	
EXPR_STATEMENT	4723:2	4723:17	5	* nextdiroff = 0 ;
EXPR	4723:2	4723:2	6	* nextdiroff = 0
ASSIGN	4723:2	4723:16	7	* nextdiroff = 0
LVAL	4723:2	4723:2	8	* nextdiroff
UNARY_EXPR	4723:2	4723:3	9	* nextdiroff
UNARY_OPERATOR	4723:2	4723:2	10	*
LEAF_NODE	4723:2	4723:2	11	*
FIELD	4723:3	4723:3	10	nextdiroff
LEAF_NODE	4723:3	4723:3	11	nextdiroff
ASSIGN_OP	4723:14	4723:14	8	=
LEAF_NODE	4723:14	4723:14	9	=
RVAL	4723:16	4723:16	8	0
FIELD	4723:16	4723:16	9	0
LEAF_NODE	4723:16	4723:16	10	0
LEAF_NODE	4723:17	4723:17	6	;
SELECTION	4724:1	4724:21	3	
KEYWORD	4724:1	4724:1	4	if
LEAF_NODE	4724:1	4724:1	5	if
LEAF_NODE	4724:4	4724:4	4	(
CONDITION	4724:5	4724:5	4	! isMapped ( tif )
EXPR	4724:5	4724:5	5	! isMapped ( tif )
UNARY_EXPR	4724:5	4724:6	6	! isMapped ( tif )
UNARY_OPERATOR	4724:5	4724:5	7	!
LEAF_NODE	4724:5	4724:5	8	!
FUNCTION_CALL	4724:6	4724:18	7	isMapped ( tif )
CALLEE	4724:6	4724:6	8	isMapped
LEAF_NODE	4724:6	4724:6	9	isMapped
LEAF_NODE	4724:14	4724:14	8	(
ARGUMENT	4724:15	4724:15	8	tif
FIELD	4724:15	4724:15	9	tif
LEAF_NODE	4724:15	4724:15	10	tif
LEAF_NODE	4724:18	4724:18	8	)
LEAF_NODE	4724:19	4724:19	4	)
STATEMENTS	4724:21	4799:1	4	
LEAF_NODE	4724:21	4724:21	5	{
STATEMENTS	4725:2	4782:2	5	
SELECTION	4725:2	4725:37	6	
KEYWORD	4725:2	4725:2	7	if
LEAF_NODE	4725:2	4725:2	8	if
LEAF_NODE	4725:5	4725:5	7	(
CONDITION	4725:6	4725:6	7	! SeekOK ( tif , tif -> tif_diroff )
EXPR	4725:6	4725:6	8	! SeekOK ( tif , tif -> tif_diroff )
UNARY_EXPR	4725:6	4725:7	9	! SeekOK ( tif , tif -> tif_diroff )
UNARY_OPERATOR	4725:6	4725:6	10	!
LEAF_NODE	4725:6	4725:6	11	!
FUNCTION_CALL	4725:7	4725:34	10	SeekOK ( tif , tif -> tif_diroff )
CALLEE	4725:7	4725:7	11	SeekOK
LEAF_NODE	4725:7	4725:7	12	SeekOK
LEAF_NODE	4725:13	4725:13	11	(
ARGUMENT	4725:14	4725:14	11	tif
FIELD	4725:14	4725:14	12	tif
LEAF_NODE	4725:14	4725:14	13	tif
LEAF_NODE	4725:17	4725:17	11	,
ARGUMENT	4725:19	4725:19	11	tif -> tif_diroff
FIELD	4725:19	4725:24	12	tif -> tif_diroff
LEAF_NODE	4725:19	4725:19	13	tif
LEAF_NODE	4725:22	4725:22	13	->
LEAF_NODE	4725:24	4725:24	13	tif_diroff
LEAF_NODE	4725:34	4725:34	11	)
LEAF_NODE	4725:35	4725:35	7	)
STATEMENTS	4725:37	4730:2	7	
LEAF_NODE	4725:37	4725:37	8	{
STATEMENTS	4726:3	4729:3	8	
EXPR_STATEMENT	4726:3	4728:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name ) ;
EXPR	4726:3	4726:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
FUNCTION_CALL	4726:3	4728:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Seek error accessing TIFF directory" , tif -> tif_name )
CALLEE	4726:3	4726:3	12	TIFFErrorExt
LEAF_NODE	4726:3	4726:3	13	TIFFErrorExt
LEAF_NODE	4726:15	4726:15	12	(
ARGUMENT	4726:16	4726:16	12	tif -> tif_clientdata
FIELD	4726:16	4726:21	13	tif -> tif_clientdata
LEAF_NODE	4726:16	4726:16	14	tif
LEAF_NODE	4726:19	4726:19	14	->
LEAF_NODE	4726:21	4726:21	14	tif_clientdata
LEAF_NODE	4726:35	4726:35	12	,
ARGUMENT	4726:37	4726:37	12	module
FIELD	4726:37	4726:37	13	module
LEAF_NODE	4726:37	4726:37	14	module
LEAF_NODE	4726:43	4726:43	12	,
ARGUMENT	4727:4	4727:4	12	"%s: Seek error accessing TIFF directory"
FIELD	4727:4	4727:4	13	"%s: Seek error accessing TIFF directory"
LEAF_NODE	4727:4	4727:4	14	"%s: Seek error accessing TIFF directory"
LEAF_NODE	4727:45	4727:45	12	,
ARGUMENT	4728:4	4728:4	12	tif -> tif_name
FIELD	4728:4	4728:9	13	tif -> tif_name
LEAF_NODE	4728:4	4728:4	14	tif
LEAF_NODE	4728:7	4728:7	14	->
LEAF_NODE	4728:9	4728:9	14	tif_name
LEAF_NODE	4728:17	4728:17	12	)
LEAF_NODE	4728:18	4728:18	10	;
JUMP_STATEMENT	4729:3	4729:11	9	return 0 ;
KEYWORD	4729:3	4729:3	10	return
LEAF_NODE	4729:3	4729:3	11	return
DESTINATION	4729:10	4729:10	10	0
EXPR	4729:10	4729:10	11	0
FIELD	4729:10	4729:10	12	0
LEAF_NODE	4729:10	4729:10	13	0
LEAF_NODE	4729:11	4729:11	10	;
LEAF_NODE	4730:2	4730:2	8	}
SELECTION	4731:2	4732:2	6	
KEYWORD	4731:2	4731:2	7	if
LEAF_NODE	4731:2	4731:2	8	if
LEAF_NODE	4731:5	4731:5	7	(
CONDITION	4731:6	4731:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	4731:6	4731:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	4731:6	4731:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	4731:6	4731:6	10	!
LEAF_NODE	4731:6	4731:6	11	!
LEAF_NODE	4731:7	4731:7	10	(
FIELD	4731:8	4731:13	10	tif -> tif_flags
LEAF_NODE	4731:8	4731:8	11	tif
LEAF_NODE	4731:11	4731:11	11	->
LEAF_NODE	4731:13	4731:13	11	tif_flags
LEAF_NODE	4731:22	4731:22	10	&
FIELD	4731:23	4731:23	10	TIFF_BIGTIFF
LEAF_NODE	4731:23	4731:23	11	TIFF_BIGTIFF
LEAF_NODE	4731:35	4731:35	10	)
LEAF_NODE	4731:36	4731:36	7	)
STATEMENTS	4732:2	4748:2	7	
LEAF_NODE	4732:2	4732:2	8	{
STATEMENTS	4733:3	4747:3	8	
SELECTION	4733:3	4733:51	9	
KEYWORD	4733:3	4733:3	10	if
LEAF_NODE	4733:3	4733:3	11	if
LEAF_NODE	4733:6	4733:6	10	(
CONDITION	4733:7	4733:7	10	! ReadOK ( tif , & dircount16 , sizeof ( uint16 ) )
EXPR	4733:7	4733:7	11	! ReadOK ( tif , & dircount16 , sizeof ( uint16 ) )
UNARY_EXPR	4733:7	4733:8	12	! ReadOK ( tif , & dircount16 , sizeof ( uint16 ) )
UNARY_OPERATOR	4733:7	4733:7	13	!
LEAF_NODE	4733:7	4733:7	14	!
FUNCTION_CALL	4733:8	4733:48	13	ReadOK ( tif , & dircount16 , sizeof ( uint16 ) )
CALLEE	4733:8	4733:8	14	ReadOK
LEAF_NODE	4733:8	4733:8	15	ReadOK
LEAF_NODE	4733:14	4733:14	14	(
ARGUMENT	4733:15	4733:15	14	tif
FIELD	4733:15	4733:15	15	tif
LEAF_NODE	4733:15	4733:15	16	tif
LEAF_NODE	4733:18	4733:18	14	,
ARGUMENT	4733:20	4733:20	14	& dircount16
UNARY_EXPR	4733:20	4733:21	15	& dircount16
UNARY_OPERATOR	4733:20	4733:20	16	&
LEAF_NODE	4733:20	4733:20	17	&
FIELD	4733:21	4733:21	16	dircount16
LEAF_NODE	4733:21	4733:21	17	dircount16
LEAF_NODE	4733:31	4733:31	14	,
ARGUMENT	4733:33	4733:33	14	sizeof ( uint16 )
FUNCTION_CALL	4733:33	4733:47	15	sizeof ( uint16 )
CALLEE	4733:33	4733:33	16	sizeof
LEAF_NODE	4733:33	4733:33	17	sizeof
LEAF_NODE	4733:40	4733:40	16	(
ARGUMENT	4733:41	4733:41	16	uint16
FIELD	4733:41	4733:41	17	uint16
LEAF_NODE	4733:41	4733:41	18	uint16
LEAF_NODE	4733:47	4733:47	16	)
LEAF_NODE	4733:48	4733:48	14	)
LEAF_NODE	4733:49	4733:49	10	)
STATEMENTS	4733:51	4738:3	10	
LEAF_NODE	4733:51	4733:51	11	{
STATEMENTS	4734:4	4737:4	11	
EXPR_STATEMENT	4734:4	4736:22	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name ) ;
EXPR	4734:4	4734:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
FUNCTION_CALL	4734:4	4736:21	14	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
CALLEE	4734:4	4734:4	15	TIFFErrorExt
LEAF_NODE	4734:4	4734:4	16	TIFFErrorExt
LEAF_NODE	4734:16	4734:16	15	(
ARGUMENT	4734:17	4734:17	15	tif -> tif_clientdata
FIELD	4734:17	4734:22	16	tif -> tif_clientdata
LEAF_NODE	4734:17	4734:17	17	tif
LEAF_NODE	4734:20	4734:20	17	->
LEAF_NODE	4734:22	4734:22	17	tif_clientdata
LEAF_NODE	4734:36	4734:36	15	,
ARGUMENT	4734:38	4734:38	15	module
FIELD	4734:38	4734:38	16	module
LEAF_NODE	4734:38	4734:38	17	module
LEAF_NODE	4734:44	4734:44	15	,
ARGUMENT	4735:8	4735:8	15	"%s: Can not read TIFF directory count"
FIELD	4735:8	4735:8	16	"%s: Can not read TIFF directory count"
LEAF_NODE	4735:8	4735:8	17	"%s: Can not read TIFF directory count"
LEAF_NODE	4735:47	4735:47	15	,
ARGUMENT	4736:8	4736:8	15	tif -> tif_name
FIELD	4736:8	4736:13	16	tif -> tif_name
LEAF_NODE	4736:8	4736:8	17	tif
LEAF_NODE	4736:11	4736:11	17	->
LEAF_NODE	4736:13	4736:13	17	tif_name
LEAF_NODE	4736:21	4736:21	15	)
LEAF_NODE	4736:22	4736:22	13	;
JUMP_STATEMENT	4737:4	4737:12	12	return 0 ;
KEYWORD	4737:4	4737:4	13	return
LEAF_NODE	4737:4	4737:4	14	return
DESTINATION	4737:11	4737:11	13	0
EXPR	4737:11	4737:11	14	0
FIELD	4737:11	4737:11	15	0
LEAF_NODE	4737:11	4737:11	16	0
LEAF_NODE	4737:12	4737:12	13	;
LEAF_NODE	4738:3	4738:3	11	}
SELECTION	4739:3	4740:4	9	
KEYWORD	4739:3	4739:3	10	if
LEAF_NODE	4739:3	4739:3	11	if
LEAF_NODE	4739:6	4739:6	10	(
CONDITION	4739:7	4739:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	4739:7	4739:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	4739:7	4739:12	12	tif -> tif_flags
LEAF_NODE	4739:7	4739:7	13	tif
LEAF_NODE	4739:10	4739:10	13	->
LEAF_NODE	4739:12	4739:12	13	tif_flags
LEAF_NODE	4739:22	4739:22	12	&
FIELD	4739:24	4739:24	12	TIFF_SWAB
LEAF_NODE	4739:24	4739:24	13	TIFF_SWAB
LEAF_NODE	4739:33	4739:33	10	)
STATEMENTS	4740:4	4740:4	10	
EXPR_STATEMENT	4740:4	4740:30	11	TIFFSwabShort ( & dircount16 ) ;
EXPR	4740:4	4740:4	12	TIFFSwabShort ( & dircount16 )
FUNCTION_CALL	4740:4	4740:29	13	TIFFSwabShort ( & dircount16 )
CALLEE	4740:4	4740:4	14	TIFFSwabShort
LEAF_NODE	4740:4	4740:4	15	TIFFSwabShort
LEAF_NODE	4740:17	4740:17	14	(
ARGUMENT	4740:18	4740:18	14	& dircount16
UNARY_EXPR	4740:18	4740:19	15	& dircount16
UNARY_OPERATOR	4740:18	4740:18	16	&
LEAF_NODE	4740:18	4740:18	17	&
FIELD	4740:19	4740:19	16	dircount16
LEAF_NODE	4740:19	4740:19	17	dircount16
LEAF_NODE	4740:29	4740:29	14	)
LEAF_NODE	4740:30	4740:30	12	;
SELECTION	4741:3	4742:3	9	
KEYWORD	4741:3	4741:3	10	if
LEAF_NODE	4741:3	4741:3	11	if
LEAF_NODE	4741:6	4741:6	10	(
CONDITION	4741:7	4741:7	10	dircount16 > 4096
EXPR	4741:7	4741:18	11	dircount16 > 4096
FIELD	4741:7	4741:7	12	dircount16
LEAF_NODE	4741:7	4741:7	13	dircount16
REL_OPERATOR	4741:17	4741:17	12	>
LEAF_NODE	4741:17	4741:17	13	>
FIELD	4741:18	4741:18	12	4096
LEAF_NODE	4741:18	4741:18	13	4096
LEAF_NODE	4741:22	4741:22	10	)
STATEMENTS	4742:3	4746:3	10	
LEAF_NODE	4742:3	4742:3	11	{
STATEMENTS	4743:4	4745:4	11	
EXPR_STATEMENT	4743:4	4744:90	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" ) ;
EXPR	4743:4	4743:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
FUNCTION_CALL	4743:4	4744:89	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
CALLEE	4743:4	4743:4	15	TIFFErrorExt
LEAF_NODE	4743:4	4743:4	16	TIFFErrorExt
LEAF_NODE	4743:16	4743:16	15	(
ARGUMENT	4743:17	4743:17	15	tif -> tif_clientdata
FIELD	4743:17	4743:22	16	tif -> tif_clientdata
LEAF_NODE	4743:17	4743:17	17	tif
LEAF_NODE	4743:20	4743:20	17	->
LEAF_NODE	4743:22	4743:22	17	tif_clientdata
LEAF_NODE	4743:36	4743:36	15	,
ARGUMENT	4743:38	4743:38	15	module
FIELD	4743:38	4743:38	16	module
LEAF_NODE	4743:38	4743:38	17	module
LEAF_NODE	4743:44	4743:44	15	,
ARGUMENT	4744:8	4744:8	15	"Sanity check on directory count failed, this is probably not a valid IFD offset"
FIELD	4744:8	4744:8	16	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4744:8	4744:8	17	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4744:89	4744:89	15	)
LEAF_NODE	4744:90	4744:90	13	;
JUMP_STATEMENT	4745:4	4745:12	12	return 0 ;
KEYWORD	4745:4	4745:4	13	return
LEAF_NODE	4745:4	4745:4	14	return
DESTINATION	4745:11	4745:11	13	0
EXPR	4745:11	4745:11	14	0
FIELD	4745:11	4745:11	15	0
LEAF_NODE	4745:11	4745:11	16	0
LEAF_NODE	4745:12	4745:12	13	;
LEAF_NODE	4746:3	4746:3	11	}
EXPR_STATEMENT	4747:3	4747:15	9	dirsize = 12 ;
EXPR	4747:3	4747:3	10	dirsize = 12
ASSIGN	4747:3	4747:13	11	dirsize = 12
LVAL	4747:3	4747:3	12	dirsize
FIELD	4747:3	4747:3	13	dirsize
LEAF_NODE	4747:3	4747:3	14	dirsize
ASSIGN_OP	4747:11	4747:11	12	=
LEAF_NODE	4747:11	4747:11	13	=
RVAL	4747:13	4747:13	12	12
FIELD	4747:13	4747:13	13	12
LEAF_NODE	4747:13	4747:13	14	12
LEAF_NODE	4747:15	4747:15	10	;
LEAF_NODE	4748:2	4748:2	8	}
SELECTION	4748:4	4748:9	6	
KEYWORD	4748:4	4748:4	7	else
LEAF_NODE	4748:4	4748:4	8	else
STATEMENTS	4748:9	4766:2	7	
LEAF_NODE	4748:9	4748:9	8	{
STATEMENTS	4749:3	4765:3	8	
SIMPLE_DECL	4749:3	4749:20	9	uint64 dircount64 ;
VAR_DECL	4749:3	4749:10	10	uint64 dircount64
TYPE	4749:3	4749:3	11	uint64
TYPE_NAME	4749:3	4749:3	12	uint64
LEAF_NODE	4749:3	4749:3	13	uint64
NAME	4749:10	4749:10	11	dircount64
LEAF_NODE	4749:10	4749:10	12	dircount64
LEAF_NODE	4749:20	4749:20	10	;
SELECTION	4750:3	4750:51	9	
KEYWORD	4750:3	4750:3	10	if
LEAF_NODE	4750:3	4750:3	11	if
LEAF_NODE	4750:6	4750:6	10	(
CONDITION	4750:7	4750:7	10	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
EXPR	4750:7	4750:7	11	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
UNARY_EXPR	4750:7	4750:8	12	! ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
UNARY_OPERATOR	4750:7	4750:7	13	!
LEAF_NODE	4750:7	4750:7	14	!
FUNCTION_CALL	4750:8	4750:48	13	ReadOK ( tif , & dircount64 , sizeof ( uint64 ) )
CALLEE	4750:8	4750:8	14	ReadOK
LEAF_NODE	4750:8	4750:8	15	ReadOK
LEAF_NODE	4750:14	4750:14	14	(
ARGUMENT	4750:15	4750:15	14	tif
FIELD	4750:15	4750:15	15	tif
LEAF_NODE	4750:15	4750:15	16	tif
LEAF_NODE	4750:18	4750:18	14	,
ARGUMENT	4750:20	4750:20	14	& dircount64
UNARY_EXPR	4750:20	4750:21	15	& dircount64
UNARY_OPERATOR	4750:20	4750:20	16	&
LEAF_NODE	4750:20	4750:20	17	&
FIELD	4750:21	4750:21	16	dircount64
LEAF_NODE	4750:21	4750:21	17	dircount64
LEAF_NODE	4750:31	4750:31	14	,
ARGUMENT	4750:33	4750:33	14	sizeof ( uint64 )
FUNCTION_CALL	4750:33	4750:47	15	sizeof ( uint64 )
CALLEE	4750:33	4750:33	16	sizeof
LEAF_NODE	4750:33	4750:33	17	sizeof
LEAF_NODE	4750:40	4750:40	16	(
ARGUMENT	4750:41	4750:41	16	uint64
FIELD	4750:41	4750:41	17	uint64
LEAF_NODE	4750:41	4750:41	18	uint64
LEAF_NODE	4750:47	4750:47	16	)
LEAF_NODE	4750:48	4750:48	14	)
LEAF_NODE	4750:49	4750:49	10	)
STATEMENTS	4750:51	4755:3	10	
LEAF_NODE	4750:51	4750:51	11	{
STATEMENTS	4751:4	4754:4	11	
EXPR_STATEMENT	4751:4	4753:19	12	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name ) ;
EXPR	4751:4	4751:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
FUNCTION_CALL	4751:4	4753:18	14	TIFFErrorExt ( tif -> tif_clientdata , module , "%s: Can not read TIFF directory count" , tif -> tif_name )
CALLEE	4751:4	4751:4	15	TIFFErrorExt
LEAF_NODE	4751:4	4751:4	16	TIFFErrorExt
LEAF_NODE	4751:16	4751:16	15	(
ARGUMENT	4751:17	4751:17	15	tif -> tif_clientdata
FIELD	4751:17	4751:22	16	tif -> tif_clientdata
LEAF_NODE	4751:17	4751:17	17	tif
LEAF_NODE	4751:20	4751:20	17	->
LEAF_NODE	4751:22	4751:22	17	tif_clientdata
LEAF_NODE	4751:36	4751:36	15	,
ARGUMENT	4751:38	4751:38	15	module
FIELD	4751:38	4751:38	16	module
LEAF_NODE	4751:38	4751:38	17	module
LEAF_NODE	4751:44	4751:44	15	,
ARGUMENT	4752:5	4752:5	15	"%s: Can not read TIFF directory count"
FIELD	4752:5	4752:5	16	"%s: Can not read TIFF directory count"
LEAF_NODE	4752:5	4752:5	17	"%s: Can not read TIFF directory count"
LEAF_NODE	4752:44	4752:44	15	,
ARGUMENT	4753:5	4753:5	15	tif -> tif_name
FIELD	4753:5	4753:10	16	tif -> tif_name
LEAF_NODE	4753:5	4753:5	17	tif
LEAF_NODE	4753:8	4753:8	17	->
LEAF_NODE	4753:10	4753:10	17	tif_name
LEAF_NODE	4753:18	4753:18	15	)
LEAF_NODE	4753:19	4753:19	13	;
JUMP_STATEMENT	4754:4	4754:12	12	return 0 ;
KEYWORD	4754:4	4754:4	13	return
LEAF_NODE	4754:4	4754:4	14	return
DESTINATION	4754:11	4754:11	13	0
EXPR	4754:11	4754:11	14	0
FIELD	4754:11	4754:11	15	0
LEAF_NODE	4754:11	4754:11	16	0
LEAF_NODE	4754:12	4754:12	13	;
LEAF_NODE	4755:3	4755:3	11	}
SELECTION	4756:3	4757:4	9	
KEYWORD	4756:3	4756:3	10	if
LEAF_NODE	4756:3	4756:3	11	if
LEAF_NODE	4756:6	4756:6	10	(
CONDITION	4756:7	4756:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	4756:7	4756:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	4756:7	4756:12	12	tif -> tif_flags
LEAF_NODE	4756:7	4756:7	13	tif
LEAF_NODE	4756:10	4756:10	13	->
LEAF_NODE	4756:12	4756:12	13	tif_flags
LEAF_NODE	4756:22	4756:22	12	&
FIELD	4756:24	4756:24	12	TIFF_SWAB
LEAF_NODE	4756:24	4756:24	13	TIFF_SWAB
LEAF_NODE	4756:33	4756:33	10	)
STATEMENTS	4757:4	4757:4	10	
EXPR_STATEMENT	4757:4	4757:30	11	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	4757:4	4757:4	12	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	4757:4	4757:29	13	TIFFSwabLong8 ( & dircount64 )
CALLEE	4757:4	4757:4	14	TIFFSwabLong8
LEAF_NODE	4757:4	4757:4	15	TIFFSwabLong8
LEAF_NODE	4757:17	4757:17	14	(
ARGUMENT	4757:18	4757:18	14	& dircount64
UNARY_EXPR	4757:18	4757:19	15	& dircount64
UNARY_OPERATOR	4757:18	4757:18	16	&
LEAF_NODE	4757:18	4757:18	17	&
FIELD	4757:19	4757:19	16	dircount64
LEAF_NODE	4757:19	4757:19	17	dircount64
LEAF_NODE	4757:29	4757:29	14	)
LEAF_NODE	4757:30	4757:30	12	;
SELECTION	4758:3	4759:3	9	
KEYWORD	4758:3	4758:3	10	if
LEAF_NODE	4758:3	4758:3	11	if
LEAF_NODE	4758:6	4758:6	10	(
CONDITION	4758:7	4758:7	10	dircount64 > 4096
EXPR	4758:7	4758:18	11	dircount64 > 4096
FIELD	4758:7	4758:7	12	dircount64
LEAF_NODE	4758:7	4758:7	13	dircount64
REL_OPERATOR	4758:17	4758:17	12	>
LEAF_NODE	4758:17	4758:17	13	>
FIELD	4758:18	4758:18	12	4096
LEAF_NODE	4758:18	4758:18	13	4096
LEAF_NODE	4758:22	4758:22	10	)
STATEMENTS	4759:3	4763:3	10	
LEAF_NODE	4759:3	4759:3	11	{
STATEMENTS	4760:4	4762:4	11	
EXPR_STATEMENT	4760:4	4761:90	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" ) ;
EXPR	4760:4	4760:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
FUNCTION_CALL	4760:4	4761:89	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
CALLEE	4760:4	4760:4	15	TIFFErrorExt
LEAF_NODE	4760:4	4760:4	16	TIFFErrorExt
LEAF_NODE	4760:16	4760:16	15	(
ARGUMENT	4760:17	4760:17	15	tif -> tif_clientdata
FIELD	4760:17	4760:22	16	tif -> tif_clientdata
LEAF_NODE	4760:17	4760:17	17	tif
LEAF_NODE	4760:20	4760:20	17	->
LEAF_NODE	4760:22	4760:22	17	tif_clientdata
LEAF_NODE	4760:36	4760:36	15	,
ARGUMENT	4760:38	4760:38	15	module
FIELD	4760:38	4760:38	16	module
LEAF_NODE	4760:38	4760:38	17	module
LEAF_NODE	4760:44	4760:44	15	,
ARGUMENT	4761:8	4761:8	15	"Sanity check on directory count failed, this is probably not a valid IFD offset"
FIELD	4761:8	4761:8	16	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4761:8	4761:8	17	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4761:89	4761:89	15	)
LEAF_NODE	4761:90	4761:90	13	;
JUMP_STATEMENT	4762:4	4762:12	12	return 0 ;
KEYWORD	4762:4	4762:4	13	return
LEAF_NODE	4762:4	4762:4	14	return
DESTINATION	4762:11	4762:11	13	0
EXPR	4762:11	4762:11	14	0
FIELD	4762:11	4762:11	15	0
LEAF_NODE	4762:11	4762:11	16	0
LEAF_NODE	4762:12	4762:12	13	;
LEAF_NODE	4763:3	4763:3	11	}
EXPR_STATEMENT	4764:3	4764:34	9	dircount16 = ( uint16 ) dircount64 ;
EXPR	4764:3	4764:3	10	dircount16 = ( uint16 ) dircount64
ASSIGN	4764:3	4764:16	11	dircount16 = ( uint16 ) dircount64
LVAL	4764:3	4764:3	12	dircount16
FIELD	4764:3	4764:3	13	dircount16
LEAF_NODE	4764:3	4764:3	14	dircount16
ASSIGN_OP	4764:14	4764:14	12	=
LEAF_NODE	4764:14	4764:14	13	=
RVAL	4764:16	4764:24	12	( uint16 ) dircount64
LEAF_NODE	4764:16	4764:16	13	(
TYPE_NAME	4764:17	4764:17	13	uint16
LEAF_NODE	4764:17	4764:17	14	uint16
LEAF_NODE	4764:23	4764:23	13	)
FIELD	4764:24	4764:24	13	dircount64
LEAF_NODE	4764:24	4764:24	14	dircount64
LEAF_NODE	4764:34	4764:34	10	;
EXPR_STATEMENT	4765:3	4765:15	9	dirsize = 20 ;
EXPR	4765:3	4765:3	10	dirsize = 20
ASSIGN	4765:3	4765:13	11	dirsize = 20
LVAL	4765:3	4765:3	12	dirsize
FIELD	4765:3	4765:3	13	dirsize
LEAF_NODE	4765:3	4765:3	14	dirsize
ASSIGN_OP	4765:11	4765:11	12	=
LEAF_NODE	4765:11	4765:11	13	=
RVAL	4765:13	4765:13	12	20
FIELD	4765:13	4765:13	13	20
LEAF_NODE	4765:13	4765:13	14	20
LEAF_NODE	4765:15	4765:15	10	;
LEAF_NODE	4766:2	4766:2	8	}
EXPR_STATEMENT	4767:2	4768:40	6	origdir = _TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" ) ;
EXPR	4767:2	4767:2	7	origdir = _TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
ASSIGN	4767:2	4767:12	8	origdir = _TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
LVAL	4767:2	4767:2	9	origdir
FIELD	4767:2	4767:2	10	origdir
LEAF_NODE	4767:2	4767:2	11	origdir
ASSIGN_OP	4767:10	4767:10	9	=
LEAF_NODE	4767:10	4767:10	10	=
RVAL	4767:12	4767:12	9	_TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
FUNCTION_CALL	4767:12	4768:39	10	_TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
CALLEE	4767:12	4767:12	11	_TIFFCheckMalloc
LEAF_NODE	4767:12	4767:12	12	_TIFFCheckMalloc
LEAF_NODE	4767:28	4767:28	11	(
ARGUMENT	4767:29	4767:29	11	tif
FIELD	4767:29	4767:29	12	tif
LEAF_NODE	4767:29	4767:29	13	tif
LEAF_NODE	4767:32	4767:32	11	,
ARGUMENT	4767:34	4767:34	11	dircount16
FIELD	4767:34	4767:34	12	dircount16
LEAF_NODE	4767:34	4767:34	13	dircount16
LEAF_NODE	4767:44	4767:44	11	,
ARGUMENT	4768:6	4768:6	11	dirsize
FIELD	4768:6	4768:6	12	dirsize
LEAF_NODE	4768:6	4768:6	13	dirsize
LEAF_NODE	4768:13	4768:13	11	,
ARGUMENT	4768:15	4768:15	11	"to read TIFF directory"
FIELD	4768:15	4768:15	12	"to read TIFF directory"
LEAF_NODE	4768:15	4768:15	13	"to read TIFF directory"
LEAF_NODE	4768:39	4768:39	11	)
LEAF_NODE	4768:40	4768:40	7	;
SELECTION	4769:2	4770:3	6	
KEYWORD	4769:2	4769:2	7	if
LEAF_NODE	4769:2	4769:2	8	if
LEAF_NODE	4769:5	4769:5	7	(
CONDITION	4769:6	4769:6	7	origdir == NULL
EXPR	4769:6	4769:17	8	origdir == NULL
FIELD	4769:6	4769:6	9	origdir
LEAF_NODE	4769:6	4769:6	10	origdir
EQ_OPERATOR	4769:14	4769:14	9	==
LEAF_NODE	4769:14	4769:14	10	==
FIELD	4769:17	4769:17	9	NULL
LEAF_NODE	4769:17	4769:17	10	NULL
LEAF_NODE	4769:21	4769:21	7	)
STATEMENTS	4770:3	4770:3	7	
JUMP_STATEMENT	4770:3	4770:11	8	return 0 ;
KEYWORD	4770:3	4770:3	9	return
LEAF_NODE	4770:3	4770:3	10	return
DESTINATION	4770:10	4770:10	9	0
EXPR	4770:10	4770:10	10	0
FIELD	4770:10	4770:10	11	0
LEAF_NODE	4770:10	4770:10	12	0
LEAF_NODE	4770:11	4770:11	9	;
SELECTION	4771:2	4771:61	6	
KEYWORD	4771:2	4771:2	7	if
LEAF_NODE	4771:2	4771:2	8	if
LEAF_NODE	4771:5	4771:5	7	(
CONDITION	4771:6	4771:6	7	! ReadOK ( tif , origdir , ( tmsize_t ) ( dircount16 * dirsize ) )
EXPR	4771:6	4771:6	8	! ReadOK ( tif , origdir , ( tmsize_t ) ( dircount16 * dirsize ) )
UNARY_EXPR	4771:6	4771:7	9	! ReadOK ( tif , origdir , ( tmsize_t ) ( dircount16 * dirsize ) )
UNARY_OPERATOR	4771:6	4771:6	10	!
LEAF_NODE	4771:6	4771:6	11	!
FUNCTION_CALL	4771:7	4771:58	10	ReadOK ( tif , origdir , ( tmsize_t ) ( dircount16 * dirsize ) )
CALLEE	4771:7	4771:7	11	ReadOK
LEAF_NODE	4771:7	4771:7	12	ReadOK
LEAF_NODE	4771:13	4771:13	11	(
ARGUMENT	4771:14	4771:14	11	tif
FIELD	4771:14	4771:14	12	tif
LEAF_NODE	4771:14	4771:14	13	tif
LEAF_NODE	4771:17	4771:17	11	,
ARGUMENT	4771:19	4771:19	11	origdir
FIELD	4771:19	4771:19	12	origdir
LEAF_NODE	4771:19	4771:19	13	origdir
LEAF_NODE	4771:26	4771:26	11	,
ARGUMENT	4771:28	4771:57	11	( tmsize_t ) ( dircount16 * dirsize )
LEAF_NODE	4771:28	4771:28	12	(
TYPE_NAME	4771:29	4771:29	12	tmsize_t
LEAF_NODE	4771:29	4771:29	13	tmsize_t
LEAF_NODE	4771:37	4771:37	12	)
LEAF_NODE	4771:38	4771:38	12	(
FIELD	4771:39	4771:39	12	dircount16
LEAF_NODE	4771:39	4771:39	13	dircount16
LEAF_NODE	4771:49	4771:49	12	*
FIELD	4771:50	4771:50	12	dirsize
LEAF_NODE	4771:50	4771:50	13	dirsize
LEAF_NODE	4771:57	4771:57	12	)
LEAF_NODE	4771:58	4771:58	11	)
LEAF_NODE	4771:59	4771:59	7	)
STATEMENTS	4771:61	4777:2	7	
LEAF_NODE	4771:61	4771:61	8	{
STATEMENTS	4772:3	4776:3	8	
EXPR_STATEMENT	4772:3	4774:18	9	TIFFErrorExt ( tif -> tif_clientdata , module , "%.100s: Can not read TIFF directory" , tif -> tif_name ) ;
EXPR	4772:3	4772:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "%.100s: Can not read TIFF directory" , tif -> tif_name )
FUNCTION_CALL	4772:3	4774:17	11	TIFFErrorExt ( tif -> tif_clientdata , module , "%.100s: Can not read TIFF directory" , tif -> tif_name )
CALLEE	4772:3	4772:3	12	TIFFErrorExt
LEAF_NODE	4772:3	4772:3	13	TIFFErrorExt
LEAF_NODE	4772:15	4772:15	12	(
ARGUMENT	4772:16	4772:16	12	tif -> tif_clientdata
FIELD	4772:16	4772:21	13	tif -> tif_clientdata
LEAF_NODE	4772:16	4772:16	14	tif
LEAF_NODE	4772:19	4772:19	14	->
LEAF_NODE	4772:21	4772:21	14	tif_clientdata
LEAF_NODE	4772:35	4772:35	12	,
ARGUMENT	4772:37	4772:37	12	module
FIELD	4772:37	4772:37	13	module
LEAF_NODE	4772:37	4772:37	14	module
LEAF_NODE	4772:43	4772:43	12	,
ARGUMENT	4773:4	4773:4	12	"%.100s: Can not read TIFF directory"
FIELD	4773:4	4773:4	13	"%.100s: Can not read TIFF directory"
LEAF_NODE	4773:4	4773:4	14	"%.100s: Can not read TIFF directory"
LEAF_NODE	4773:41	4773:41	12	,
ARGUMENT	4774:4	4774:4	12	tif -> tif_name
FIELD	4774:4	4774:9	13	tif -> tif_name
LEAF_NODE	4774:4	4774:4	14	tif
LEAF_NODE	4774:7	4774:7	14	->
LEAF_NODE	4774:9	4774:9	14	tif_name
LEAF_NODE	4774:17	4774:17	12	)
LEAF_NODE	4774:18	4774:18	10	;
EXPR_STATEMENT	4775:3	4775:21	9	_TIFFfree ( origdir ) ;
EXPR	4775:3	4775:3	10	_TIFFfree ( origdir )
FUNCTION_CALL	4775:3	4775:20	11	_TIFFfree ( origdir )
CALLEE	4775:3	4775:3	12	_TIFFfree
LEAF_NODE	4775:3	4775:3	13	_TIFFfree
LEAF_NODE	4775:12	4775:12	12	(
ARGUMENT	4775:13	4775:13	12	origdir
FIELD	4775:13	4775:13	13	origdir
LEAF_NODE	4775:13	4775:13	14	origdir
LEAF_NODE	4775:20	4775:20	12	)
LEAF_NODE	4775:21	4775:21	10	;
JUMP_STATEMENT	4776:3	4776:11	9	return 0 ;
KEYWORD	4776:3	4776:3	10	return
LEAF_NODE	4776:3	4776:3	11	return
DESTINATION	4776:10	4776:10	10	0
EXPR	4776:10	4776:10	11	0
FIELD	4776:10	4776:10	12	0
LEAF_NODE	4776:10	4776:10	13	0
LEAF_NODE	4776:11	4776:11	10	;
LEAF_NODE	4777:2	4777:2	8	}
SELECTION	4782:2	4783:2	6	
KEYWORD	4782:2	4782:2	7	if
LEAF_NODE	4782:2	4782:2	8	if
LEAF_NODE	4782:5	4782:5	7	(
CONDITION	4782:6	4782:6	7	nextdiroff
EXPR	4782:6	4782:6	8	nextdiroff
FIELD	4782:6	4782:6	9	nextdiroff
LEAF_NODE	4782:6	4782:6	10	nextdiroff
LEAF_NODE	4782:16	4782:16	7	)
STATEMENTS	4783:2	4798:2	7	
LEAF_NODE	4783:2	4783:2	8	{
STATEMENTS	4784:3	4792:5	8	
SELECTION	4784:3	4785:3	9	
KEYWORD	4784:3	4784:3	10	if
LEAF_NODE	4784:3	4784:3	11	if
LEAF_NODE	4784:6	4784:6	10	(
CONDITION	4784:7	4784:7	10	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	4784:7	4784:7	11	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	4784:7	4784:36	12	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	4784:7	4784:7	13	!
LEAF_NODE	4784:7	4784:7	14	!
LEAF_NODE	4784:8	4784:8	13	(
FIELD	4784:9	4784:14	13	tif -> tif_flags
LEAF_NODE	4784:9	4784:9	14	tif
LEAF_NODE	4784:12	4784:12	14	->
LEAF_NODE	4784:14	4784:14	14	tif_flags
LEAF_NODE	4784:23	4784:23	13	&
FIELD	4784:24	4784:24	13	TIFF_BIGTIFF
LEAF_NODE	4784:24	4784:24	14	TIFF_BIGTIFF
LEAF_NODE	4784:36	4784:36	13	)
LEAF_NODE	4784:37	4784:37	10	)
STATEMENTS	4785:3	4792:3	10	
LEAF_NODE	4785:3	4785:3	11	{
STATEMENTS	4786:4	4791:4	11	
SIMPLE_DECL	4786:4	4786:23	12	uint32 nextdiroff32 ;
VAR_DECL	4786:4	4786:11	13	uint32 nextdiroff32
TYPE	4786:4	4786:4	14	uint32
TYPE_NAME	4786:4	4786:4	15	uint32
LEAF_NODE	4786:4	4786:4	16	uint32
NAME	4786:11	4786:11	14	nextdiroff32
LEAF_NODE	4786:11	4786:11	15	nextdiroff32
LEAF_NODE	4786:23	4786:23	13	;
SELECTION	4787:4	4788:5	12	
KEYWORD	4787:4	4787:4	13	if
LEAF_NODE	4787:4	4787:4	14	if
LEAF_NODE	4787:7	4787:7	13	(
CONDITION	4787:8	4787:8	13	! ReadOK ( tif , & nextdiroff32 , sizeof ( uint32 ) )
EXPR	4787:8	4787:8	14	! ReadOK ( tif , & nextdiroff32 , sizeof ( uint32 ) )
UNARY_EXPR	4787:8	4787:9	15	! ReadOK ( tif , & nextdiroff32 , sizeof ( uint32 ) )
UNARY_OPERATOR	4787:8	4787:8	16	!
LEAF_NODE	4787:8	4787:8	17	!
FUNCTION_CALL	4787:9	4787:50	16	ReadOK ( tif , & nextdiroff32 , sizeof ( uint32 ) )
CALLEE	4787:9	4787:9	17	ReadOK
LEAF_NODE	4787:9	4787:9	18	ReadOK
LEAF_NODE	4787:15	4787:15	17	(
ARGUMENT	4787:16	4787:16	17	tif
FIELD	4787:16	4787:16	18	tif
LEAF_NODE	4787:16	4787:16	19	tif
LEAF_NODE	4787:19	4787:19	17	,
ARGUMENT	4787:21	4787:21	17	& nextdiroff32
UNARY_EXPR	4787:21	4787:22	18	& nextdiroff32
UNARY_OPERATOR	4787:21	4787:21	19	&
LEAF_NODE	4787:21	4787:21	20	&
FIELD	4787:22	4787:22	19	nextdiroff32
LEAF_NODE	4787:22	4787:22	20	nextdiroff32
LEAF_NODE	4787:34	4787:34	17	,
ARGUMENT	4787:36	4787:36	17	sizeof ( uint32 )
FUNCTION_CALL	4787:36	4787:49	18	sizeof ( uint32 )
CALLEE	4787:36	4787:36	19	sizeof
LEAF_NODE	4787:36	4787:36	20	sizeof
LEAF_NODE	4787:42	4787:42	19	(
ARGUMENT	4787:43	4787:43	19	uint32
FIELD	4787:43	4787:43	20	uint32
LEAF_NODE	4787:43	4787:43	21	uint32
LEAF_NODE	4787:49	4787:49	19	)
LEAF_NODE	4787:50	4787:50	17	)
LEAF_NODE	4787:51	4787:51	13	)
STATEMENTS	4788:5	4788:5	13	
EXPR_STATEMENT	4788:5	4788:21	14	nextdiroff32 = 0 ;
EXPR	4788:5	4788:5	15	nextdiroff32 = 0
ASSIGN	4788:5	4788:20	16	nextdiroff32 = 0
LVAL	4788:5	4788:5	17	nextdiroff32
FIELD	4788:5	4788:5	18	nextdiroff32
LEAF_NODE	4788:5	4788:5	19	nextdiroff32
ASSIGN_OP	4788:18	4788:18	17	=
LEAF_NODE	4788:18	4788:18	18	=
RVAL	4788:20	4788:20	17	0
FIELD	4788:20	4788:20	18	0
LEAF_NODE	4788:20	4788:20	19	0
LEAF_NODE	4788:21	4788:21	15	;
SELECTION	4789:4	4790:5	12	
KEYWORD	4789:4	4789:4	13	if
LEAF_NODE	4789:4	4789:4	14	if
LEAF_NODE	4789:7	4789:7	13	(
CONDITION	4789:8	4789:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	4789:8	4789:23	14	tif -> tif_flags & TIFF_SWAB
FIELD	4789:8	4789:13	15	tif -> tif_flags
LEAF_NODE	4789:8	4789:8	16	tif
LEAF_NODE	4789:11	4789:11	16	->
LEAF_NODE	4789:13	4789:13	16	tif_flags
LEAF_NODE	4789:22	4789:22	15	&
FIELD	4789:23	4789:23	15	TIFF_SWAB
LEAF_NODE	4789:23	4789:23	16	TIFF_SWAB
LEAF_NODE	4789:32	4789:32	13	)
STATEMENTS	4790:5	4790:5	13	
EXPR_STATEMENT	4790:5	4790:32	14	TIFFSwabLong ( & nextdiroff32 ) ;
EXPR	4790:5	4790:5	15	TIFFSwabLong ( & nextdiroff32 )
FUNCTION_CALL	4790:5	4790:31	16	TIFFSwabLong ( & nextdiroff32 )
CALLEE	4790:5	4790:5	17	TIFFSwabLong
LEAF_NODE	4790:5	4790:5	18	TIFFSwabLong
LEAF_NODE	4790:17	4790:17	17	(
ARGUMENT	4790:18	4790:18	17	& nextdiroff32
UNARY_EXPR	4790:18	4790:19	18	& nextdiroff32
UNARY_OPERATOR	4790:18	4790:18	19	&
LEAF_NODE	4790:18	4790:18	20	&
FIELD	4790:19	4790:19	19	nextdiroff32
LEAF_NODE	4790:19	4790:19	20	nextdiroff32
LEAF_NODE	4790:31	4790:31	17	)
LEAF_NODE	4790:32	4790:32	15	;
EXPR_STATEMENT	4791:4	4791:28	12	* nextdiroff = nextdiroff32 ;
EXPR	4791:4	4791:4	13	* nextdiroff = nextdiroff32
ASSIGN	4791:4	4791:16	14	* nextdiroff = nextdiroff32
LVAL	4791:4	4791:4	15	* nextdiroff
UNARY_EXPR	4791:4	4791:5	16	* nextdiroff
UNARY_OPERATOR	4791:4	4791:4	17	*
LEAF_NODE	4791:4	4791:4	18	*
FIELD	4791:5	4791:5	17	nextdiroff
LEAF_NODE	4791:5	4791:5	18	nextdiroff
ASSIGN_OP	4791:15	4791:15	15	=
LEAF_NODE	4791:15	4791:15	16	=
RVAL	4791:16	4791:16	15	nextdiroff32
FIELD	4791:16	4791:16	16	nextdiroff32
LEAF_NODE	4791:16	4791:16	17	nextdiroff32
LEAF_NODE	4791:28	4791:28	13	;
LEAF_NODE	4792:3	4792:3	11	}
SELECTION	4792:5	4792:10	9	
KEYWORD	4792:5	4792:5	10	else
LEAF_NODE	4792:5	4792:5	11	else
STATEMENTS	4792:10	4797:3	10	
LEAF_NODE	4792:10	4792:10	11	{
STATEMENTS	4793:4	4795:4	11	
SELECTION	4793:4	4794:5	12	
KEYWORD	4793:4	4793:4	13	if
LEAF_NODE	4793:4	4793:4	14	if
LEAF_NODE	4793:7	4793:7	13	(
CONDITION	4793:8	4793:8	13	! ReadOK ( tif , nextdiroff , sizeof ( uint64 ) )
EXPR	4793:8	4793:8	14	! ReadOK ( tif , nextdiroff , sizeof ( uint64 ) )
UNARY_EXPR	4793:8	4793:9	15	! ReadOK ( tif , nextdiroff , sizeof ( uint64 ) )
UNARY_OPERATOR	4793:8	4793:8	16	!
LEAF_NODE	4793:8	4793:8	17	!
FUNCTION_CALL	4793:9	4793:47	16	ReadOK ( tif , nextdiroff , sizeof ( uint64 ) )
CALLEE	4793:9	4793:9	17	ReadOK
LEAF_NODE	4793:9	4793:9	18	ReadOK
LEAF_NODE	4793:15	4793:15	17	(
ARGUMENT	4793:16	4793:16	17	tif
FIELD	4793:16	4793:16	18	tif
LEAF_NODE	4793:16	4793:16	19	tif
LEAF_NODE	4793:19	4793:19	17	,
ARGUMENT	4793:21	4793:21	17	nextdiroff
FIELD	4793:21	4793:21	18	nextdiroff
LEAF_NODE	4793:21	4793:21	19	nextdiroff
LEAF_NODE	4793:31	4793:31	17	,
ARGUMENT	4793:33	4793:33	17	sizeof ( uint64 )
FUNCTION_CALL	4793:33	4793:46	18	sizeof ( uint64 )
CALLEE	4793:33	4793:33	19	sizeof
LEAF_NODE	4793:33	4793:33	20	sizeof
LEAF_NODE	4793:39	4793:39	19	(
ARGUMENT	4793:40	4793:40	19	uint64
FIELD	4793:40	4793:40	20	uint64
LEAF_NODE	4793:40	4793:40	21	uint64
LEAF_NODE	4793:46	4793:46	19	)
LEAF_NODE	4793:47	4793:47	17	)
LEAF_NODE	4793:48	4793:48	13	)
STATEMENTS	4794:5	4794:5	13	
EXPR_STATEMENT	4794:5	4794:20	14	* nextdiroff = 0 ;
EXPR	4794:5	4794:5	15	* nextdiroff = 0
ASSIGN	4794:5	4794:19	16	* nextdiroff = 0
LVAL	4794:5	4794:5	17	* nextdiroff
UNARY_EXPR	4794:5	4794:6	18	* nextdiroff
UNARY_OPERATOR	4794:5	4794:5	19	*
LEAF_NODE	4794:5	4794:5	20	*
FIELD	4794:6	4794:6	19	nextdiroff
LEAF_NODE	4794:6	4794:6	20	nextdiroff
ASSIGN_OP	4794:17	4794:17	17	=
LEAF_NODE	4794:17	4794:17	18	=
RVAL	4794:19	4794:19	17	0
FIELD	4794:19	4794:19	18	0
LEAF_NODE	4794:19	4794:19	19	0
LEAF_NODE	4794:20	4794:20	15	;
SELECTION	4795:4	4796:5	12	
KEYWORD	4795:4	4795:4	13	if
LEAF_NODE	4795:4	4795:4	14	if
LEAF_NODE	4795:7	4795:7	13	(
CONDITION	4795:8	4795:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	4795:8	4795:23	14	tif -> tif_flags & TIFF_SWAB
FIELD	4795:8	4795:13	15	tif -> tif_flags
LEAF_NODE	4795:8	4795:8	16	tif
LEAF_NODE	4795:11	4795:11	16	->
LEAF_NODE	4795:13	4795:13	16	tif_flags
LEAF_NODE	4795:22	4795:22	15	&
FIELD	4795:23	4795:23	15	TIFF_SWAB
LEAF_NODE	4795:23	4795:23	16	TIFF_SWAB
LEAF_NODE	4795:32	4795:32	13	)
STATEMENTS	4796:5	4796:5	13	
EXPR_STATEMENT	4796:5	4796:30	14	TIFFSwabLong8 ( nextdiroff ) ;
EXPR	4796:5	4796:5	15	TIFFSwabLong8 ( nextdiroff )
FUNCTION_CALL	4796:5	4796:29	16	TIFFSwabLong8 ( nextdiroff )
CALLEE	4796:5	4796:5	17	TIFFSwabLong8
LEAF_NODE	4796:5	4796:5	18	TIFFSwabLong8
LEAF_NODE	4796:18	4796:18	17	(
ARGUMENT	4796:19	4796:19	17	nextdiroff
FIELD	4796:19	4796:19	18	nextdiroff
LEAF_NODE	4796:19	4796:19	19	nextdiroff
LEAF_NODE	4796:29	4796:29	17	)
LEAF_NODE	4796:30	4796:30	15	;
LEAF_NODE	4797:3	4797:3	11	}
LEAF_NODE	4798:2	4798:2	8	}
LEAF_NODE	4799:1	4799:1	5	}
SELECTION	4799:3	4799:8	3	
KEYWORD	4799:3	4799:3	4	else
LEAF_NODE	4799:3	4799:3	5	else
STATEMENTS	4799:8	4912:1	4	
LEAF_NODE	4799:8	4799:8	5	{
STATEMENTS	4800:2	4885:2	5	
SIMPLE_DECL	4800:2	4800:12	6	tmsize_t m ;
VAR_DECL	4800:2	4800:11	7	tmsize_t m
TYPE	4800:2	4800:2	8	tmsize_t
TYPE_NAME	4800:2	4800:2	9	tmsize_t
LEAF_NODE	4800:2	4800:2	10	tmsize_t
NAME	4800:11	4800:11	8	m
LEAF_NODE	4800:11	4800:11	9	m
LEAF_NODE	4800:12	4800:12	7	;
SIMPLE_DECL	4801:2	4801:14	6	tmsize_t off ;
VAR_DECL	4801:2	4801:11	7	tmsize_t off
TYPE	4801:2	4801:2	8	tmsize_t
TYPE_NAME	4801:2	4801:2	9	tmsize_t
LEAF_NODE	4801:2	4801:2	10	tmsize_t
NAME	4801:11	4801:11	8	off
LEAF_NODE	4801:11	4801:11	9	off
LEAF_NODE	4801:14	4801:14	7	;
SELECTION	4802:2	4803:2	6	
KEYWORD	4802:2	4802:2	7	if
LEAF_NODE	4802:2	4802:2	8	if
LEAF_NODE	4802:5	4802:5	7	(
CONDITION	4802:6	4802:6	7	tif -> tif_diroff > ( uint64 ) TIFF_INT64_MAX
EXPR	4802:6	4802:32	8	tif -> tif_diroff > ( uint64 ) TIFF_INT64_MAX
FIELD	4802:6	4802:11	9	tif -> tif_diroff
LEAF_NODE	4802:6	4802:6	10	tif
LEAF_NODE	4802:9	4802:9	10	->
LEAF_NODE	4802:11	4802:11	10	tif_diroff
REL_OPERATOR	4802:22	4802:22	9	>
LEAF_NODE	4802:22	4802:22	10	>
LEAF_NODE	4802:24	4802:24	9	(
TYPE_NAME	4802:25	4802:25	9	uint64
LEAF_NODE	4802:25	4802:25	10	uint64
LEAF_NODE	4802:31	4802:31	9	)
FIELD	4802:32	4802:32	9	TIFF_INT64_MAX
LEAF_NODE	4802:32	4802:32	10	TIFF_INT64_MAX
LEAF_NODE	4802:46	4802:46	7	)
STATEMENTS	4803:2	4806:2	7	
LEAF_NODE	4803:2	4803:2	8	{
STATEMENTS	4804:3	4805:3	8	
EXPR_STATEMENT	4804:3	4804:79	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" ) ;
EXPR	4804:3	4804:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" )
FUNCTION_CALL	4804:3	4804:78	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" )
CALLEE	4804:3	4804:3	12	TIFFErrorExt
LEAF_NODE	4804:3	4804:3	13	TIFFErrorExt
LEAF_NODE	4804:15	4804:15	12	(
ARGUMENT	4804:16	4804:16	12	tif -> tif_clientdata
FIELD	4804:16	4804:21	13	tif -> tif_clientdata
LEAF_NODE	4804:16	4804:16	14	tif
LEAF_NODE	4804:19	4804:19	14	->
LEAF_NODE	4804:21	4804:21	14	tif_clientdata
LEAF_NODE	4804:35	4804:35	12	,
ARGUMENT	4804:36	4804:36	12	module
FIELD	4804:36	4804:36	13	module
LEAF_NODE	4804:36	4804:36	14	module
LEAF_NODE	4804:42	4804:42	12	,
ARGUMENT	4804:43	4804:43	12	"Can not read TIFF directory count"
FIELD	4804:43	4804:43	13	"Can not read TIFF directory count"
LEAF_NODE	4804:43	4804:43	14	"Can not read TIFF directory count"
LEAF_NODE	4804:78	4804:78	12	)
LEAF_NODE	4804:79	4804:79	10	;
JUMP_STATEMENT	4805:3	4805:12	9	return ( 0 ) ;
KEYWORD	4805:3	4805:3	10	return
LEAF_NODE	4805:3	4805:3	11	return
DESTINATION	4805:9	4805:9	10	( 0 )
EXPR	4805:9	4805:11	11	( 0 )
LEAF_NODE	4805:9	4805:9	12	(
FIELD	4805:10	4805:10	12	0
LEAF_NODE	4805:10	4805:10	13	0
LEAF_NODE	4805:11	4805:11	12	)
LEAF_NODE	4805:12	4805:12	10	;
LEAF_NODE	4806:2	4806:2	8	}
EXPR_STATEMENT	4807:2	4807:34	6	off = ( tmsize_t ) tif -> tif_diroff ;
EXPR	4807:2	4807:2	7	off = ( tmsize_t ) tif -> tif_diroff
ASSIGN	4807:2	4807:8	8	off = ( tmsize_t ) tif -> tif_diroff
LVAL	4807:2	4807:2	9	off
FIELD	4807:2	4807:2	10	off
LEAF_NODE	4807:2	4807:2	11	off
ASSIGN_OP	4807:6	4807:6	9	=
LEAF_NODE	4807:6	4807:6	10	=
RVAL	4807:8	4807:19	9	( tmsize_t ) tif -> tif_diroff
LEAF_NODE	4807:8	4807:8	10	(
TYPE_NAME	4807:9	4807:9	10	tmsize_t
LEAF_NODE	4807:9	4807:9	11	tmsize_t
LEAF_NODE	4807:17	4807:17	10	)
FIELD	4807:19	4807:24	10	tif -> tif_diroff
LEAF_NODE	4807:19	4807:19	11	tif
LEAF_NODE	4807:22	4807:22	11	->
LEAF_NODE	4807:24	4807:24	11	tif_diroff
LEAF_NODE	4807:34	4807:34	7	;
SELECTION	4818:2	4819:2	6	
KEYWORD	4818:2	4818:2	7	if
LEAF_NODE	4818:2	4818:2	8	if
LEAF_NODE	4818:5	4818:5	7	(
CONDITION	4818:6	4818:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	4818:6	4818:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	4818:6	4818:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	4818:6	4818:6	10	!
LEAF_NODE	4818:6	4818:6	11	!
LEAF_NODE	4818:7	4818:7	10	(
FIELD	4818:8	4818:13	10	tif -> tif_flags
LEAF_NODE	4818:8	4818:8	11	tif
LEAF_NODE	4818:11	4818:11	11	->
LEAF_NODE	4818:13	4818:13	11	tif_flags
LEAF_NODE	4818:22	4818:22	10	&
FIELD	4818:23	4818:23	10	TIFF_BIGTIFF
LEAF_NODE	4818:23	4818:23	11	TIFF_BIGTIFF
LEAF_NODE	4818:35	4818:35	10	)
LEAF_NODE	4818:36	4818:36	7	)
STATEMENTS	4819:2	4839:2	7	
LEAF_NODE	4819:2	4819:2	8	{
STATEMENTS	4820:3	4838:3	8	
EXPR_STATEMENT	4820:3	4820:23	9	m = off + sizeof ( uint16 ) ;
EXPR	4820:3	4820:3	10	m = off + sizeof ( uint16 )
ASSIGN	4820:3	4820:5	11	m = off + sizeof ( uint16 )
LVAL	4820:3	4820:3	12	m
FIELD	4820:3	4820:3	13	m
LEAF_NODE	4820:3	4820:3	14	m
ASSIGN_OP	4820:4	4820:4	12	=
LEAF_NODE	4820:4	4820:4	13	=
RVAL	4820:5	4820:9	12	off + sizeof ( uint16 )
FIELD	4820:5	4820:5	13	off
LEAF_NODE	4820:5	4820:5	14	off
LEAF_NODE	4820:8	4820:8	13	+
FUNCTION_CALL	4820:9	4820:22	13	sizeof ( uint16 )
CALLEE	4820:9	4820:9	14	sizeof
LEAF_NODE	4820:9	4820:9	15	sizeof
LEAF_NODE	4820:15	4820:15	14	(
ARGUMENT	4820:16	4820:16	14	uint16
FIELD	4820:16	4820:16	15	uint16
LEAF_NODE	4820:16	4820:16	16	uint16
LEAF_NODE	4820:22	4820:22	14	)
LEAF_NODE	4820:23	4820:23	10	;
SELECTION	4821:3	4821:65	9	
KEYWORD	4821:3	4821:3	10	if
LEAF_NODE	4821:3	4821:3	11	if
LEAF_NODE	4821:6	4821:6	10	(
CONDITION	4821:7	4821:7	10	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint16 ) ) || ( m > tif -> tif_size )
EXPR	4821:7	4821:7	11	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint16 ) ) || ( m > tif -> tif_size )
OR	4821:7	4821:16	12	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint16 ) ) || ( m > tif -> tif_size )
EXPR	4821:7	4821:13	13	( m < off )
LEAF_NODE	4821:7	4821:7	14	(
FIELD	4821:8	4821:8	14	m
LEAF_NODE	4821:8	4821:8	15	m
REL_OPERATOR	4821:9	4821:9	14	<
LEAF_NODE	4821:9	4821:9	15	<
FIELD	4821:10	4821:10	14	off
LEAF_NODE	4821:10	4821:10	15	off
LEAF_NODE	4821:13	4821:13	14	)
LEAF_NODE	4821:14	4821:14	13	||
EXPR	4821:16	4821:16	13	( m < ( tmsize_t ) sizeof ( uint16 ) ) || ( m > tif -> tif_size )
OR	4821:16	4821:46	14	( m < ( tmsize_t ) sizeof ( uint16 ) ) || ( m > tif -> tif_size )
EXPR	4821:16	4821:43	15	( m < ( tmsize_t ) sizeof ( uint16 ) )
LEAF_NODE	4821:16	4821:16	16	(
FIELD	4821:17	4821:17	16	m
LEAF_NODE	4821:17	4821:17	17	m
REL_OPERATOR	4821:18	4821:18	16	<
LEAF_NODE	4821:18	4821:18	17	<
LEAF_NODE	4821:19	4821:19	16	(
TYPE_NAME	4821:20	4821:20	16	tmsize_t
LEAF_NODE	4821:20	4821:20	17	tmsize_t
LEAF_NODE	4821:28	4821:28	16	)
FUNCTION_CALL	4821:29	4821:42	16	sizeof ( uint16 )
CALLEE	4821:29	4821:29	17	sizeof
LEAF_NODE	4821:29	4821:29	18	sizeof
LEAF_NODE	4821:35	4821:35	17	(
ARGUMENT	4821:36	4821:36	17	uint16
FIELD	4821:36	4821:36	18	uint16
LEAF_NODE	4821:36	4821:36	19	uint16
LEAF_NODE	4821:42	4821:42	17	)
LEAF_NODE	4821:43	4821:43	16	)
LEAF_NODE	4821:44	4821:44	15	||
EXPR	4821:46	4821:62	15	( m > tif -> tif_size )
LEAF_NODE	4821:46	4821:46	16	(
FIELD	4821:47	4821:47	16	m
LEAF_NODE	4821:47	4821:47	17	m
REL_OPERATOR	4821:48	4821:48	16	>
LEAF_NODE	4821:48	4821:48	17	>
FIELD	4821:49	4821:54	16	tif -> tif_size
LEAF_NODE	4821:49	4821:49	17	tif
LEAF_NODE	4821:52	4821:52	17	->
LEAF_NODE	4821:54	4821:54	17	tif_size
LEAF_NODE	4821:62	4821:62	16	)
LEAF_NODE	4821:63	4821:63	10	)
STATEMENTS	4821:65	4825:3	10	
LEAF_NODE	4821:65	4821:65	11	{
STATEMENTS	4822:4	4824:4	11	
EXPR_STATEMENT	4822:4	4823:41	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" ) ;
EXPR	4822:4	4822:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" )
FUNCTION_CALL	4822:4	4823:40	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" )
CALLEE	4822:4	4822:4	15	TIFFErrorExt
LEAF_NODE	4822:4	4822:4	16	TIFFErrorExt
LEAF_NODE	4822:16	4822:16	15	(
ARGUMENT	4822:17	4822:17	15	tif -> tif_clientdata
FIELD	4822:17	4822:22	16	tif -> tif_clientdata
LEAF_NODE	4822:17	4822:17	17	tif
LEAF_NODE	4822:20	4822:20	17	->
LEAF_NODE	4822:22	4822:22	17	tif_clientdata
LEAF_NODE	4822:36	4822:36	15	,
ARGUMENT	4822:38	4822:38	15	module
FIELD	4822:38	4822:38	16	module
LEAF_NODE	4822:38	4822:38	17	module
LEAF_NODE	4822:44	4822:44	15	,
ARGUMENT	4823:5	4823:5	15	"Can not read TIFF directory count"
FIELD	4823:5	4823:5	16	"Can not read TIFF directory count"
LEAF_NODE	4823:5	4823:5	17	"Can not read TIFF directory count"
LEAF_NODE	4823:40	4823:40	15	)
LEAF_NODE	4823:41	4823:41	13	;
JUMP_STATEMENT	4824:4	4824:12	12	return 0 ;
KEYWORD	4824:4	4824:4	13	return
LEAF_NODE	4824:4	4824:4	14	return
DESTINATION	4824:11	4824:11	13	0
EXPR	4824:11	4824:11	14	0
FIELD	4824:11	4824:11	15	0
LEAF_NODE	4824:11	4824:11	16	0
LEAF_NODE	4824:12	4824:12	13	;
LEAF_NODE	4825:3	4825:3	11	}
SELECTION	4825:5	4825:10	9	
KEYWORD	4825:5	4825:5	10	else
LEAF_NODE	4825:5	4825:5	11	else
STATEMENTS	4825:10	4828:3	10	
LEAF_NODE	4825:10	4825:10	11	{
STATEMENTS	4826:4	4826:4	11	
EXPR_STATEMENT	4826:4	4827:24	12	_TIFFmemcpy ( & dircount16 , tif -> tif_base + off , sizeof ( uint16 ) ) ;
EXPR	4826:4	4826:4	13	_TIFFmemcpy ( & dircount16 , tif -> tif_base + off , sizeof ( uint16 ) )
FUNCTION_CALL	4826:4	4827:23	14	_TIFFmemcpy ( & dircount16 , tif -> tif_base + off , sizeof ( uint16 ) )
CALLEE	4826:4	4826:4	15	_TIFFmemcpy
LEAF_NODE	4826:4	4826:4	16	_TIFFmemcpy
LEAF_NODE	4826:15	4826:15	15	(
ARGUMENT	4826:16	4826:16	15	& dircount16
UNARY_EXPR	4826:16	4826:17	16	& dircount16
UNARY_OPERATOR	4826:16	4826:16	17	&
LEAF_NODE	4826:16	4826:16	18	&
FIELD	4826:17	4826:17	17	dircount16
LEAF_NODE	4826:17	4826:17	18	dircount16
LEAF_NODE	4826:27	4826:27	15	,
ARGUMENT	4826:29	4826:45	15	tif -> tif_base + off
FIELD	4826:29	4826:34	16	tif -> tif_base
LEAF_NODE	4826:29	4826:29	17	tif
LEAF_NODE	4826:32	4826:32	17	->
LEAF_NODE	4826:34	4826:34	17	tif_base
LEAF_NODE	4826:43	4826:43	16	+
FIELD	4826:45	4826:45	16	off
LEAF_NODE	4826:45	4826:45	17	off
LEAF_NODE	4826:48	4826:48	15	,
ARGUMENT	4827:9	4827:9	15	sizeof ( uint16 )
FUNCTION_CALL	4827:9	4827:22	16	sizeof ( uint16 )
CALLEE	4827:9	4827:9	17	sizeof
LEAF_NODE	4827:9	4827:9	18	sizeof
LEAF_NODE	4827:15	4827:15	17	(
ARGUMENT	4827:16	4827:16	17	uint16
FIELD	4827:16	4827:16	18	uint16
LEAF_NODE	4827:16	4827:16	19	uint16
LEAF_NODE	4827:22	4827:22	17	)
LEAF_NODE	4827:23	4827:23	15	)
LEAF_NODE	4827:24	4827:24	13	;
LEAF_NODE	4828:3	4828:3	11	}
EXPR_STATEMENT	4829:3	4829:25	9	off += sizeof ( uint16 ) ;
EXPR	4829:3	4829:3	10	off += sizeof ( uint16 )
ASSIGN	4829:3	4829:10	11	off += sizeof ( uint16 )
LVAL	4829:3	4829:3	12	off
FIELD	4829:3	4829:3	13	off
LEAF_NODE	4829:3	4829:3	14	off
ASSIGN_OP	4829:7	4829:7	12	+=
LEAF_NODE	4829:7	4829:7	13	+=
RVAL	4829:10	4829:10	12	sizeof ( uint16 )
FUNCTION_CALL	4829:10	4829:24	13	sizeof ( uint16 )
CALLEE	4829:10	4829:10	14	sizeof
LEAF_NODE	4829:10	4829:10	15	sizeof
LEAF_NODE	4829:17	4829:17	14	(
ARGUMENT	4829:18	4829:18	14	uint16
FIELD	4829:18	4829:18	15	uint16
LEAF_NODE	4829:18	4829:18	16	uint16
LEAF_NODE	4829:24	4829:24	14	)
LEAF_NODE	4829:25	4829:25	10	;
SELECTION	4830:3	4831:4	9	
KEYWORD	4830:3	4830:3	10	if
LEAF_NODE	4830:3	4830:3	11	if
LEAF_NODE	4830:6	4830:6	10	(
CONDITION	4830:7	4830:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	4830:7	4830:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	4830:7	4830:12	12	tif -> tif_flags
LEAF_NODE	4830:7	4830:7	13	tif
LEAF_NODE	4830:10	4830:10	13	->
LEAF_NODE	4830:12	4830:12	13	tif_flags
LEAF_NODE	4830:22	4830:22	12	&
FIELD	4830:24	4830:24	12	TIFF_SWAB
LEAF_NODE	4830:24	4830:24	13	TIFF_SWAB
LEAF_NODE	4830:33	4830:33	10	)
STATEMENTS	4831:4	4831:4	10	
EXPR_STATEMENT	4831:4	4831:30	11	TIFFSwabShort ( & dircount16 ) ;
EXPR	4831:4	4831:4	12	TIFFSwabShort ( & dircount16 )
FUNCTION_CALL	4831:4	4831:29	13	TIFFSwabShort ( & dircount16 )
CALLEE	4831:4	4831:4	14	TIFFSwabShort
LEAF_NODE	4831:4	4831:4	15	TIFFSwabShort
LEAF_NODE	4831:17	4831:17	14	(
ARGUMENT	4831:18	4831:18	14	& dircount16
UNARY_EXPR	4831:18	4831:19	15	& dircount16
UNARY_OPERATOR	4831:18	4831:18	16	&
LEAF_NODE	4831:18	4831:18	17	&
FIELD	4831:19	4831:19	16	dircount16
LEAF_NODE	4831:19	4831:19	17	dircount16
LEAF_NODE	4831:29	4831:29	14	)
LEAF_NODE	4831:30	4831:30	12	;
SELECTION	4832:3	4833:3	9	
KEYWORD	4832:3	4832:3	10	if
LEAF_NODE	4832:3	4832:3	11	if
LEAF_NODE	4832:6	4832:6	10	(
CONDITION	4832:7	4832:7	10	dircount16 > 4096
EXPR	4832:7	4832:18	11	dircount16 > 4096
FIELD	4832:7	4832:7	12	dircount16
LEAF_NODE	4832:7	4832:7	13	dircount16
REL_OPERATOR	4832:17	4832:17	12	>
LEAF_NODE	4832:17	4832:17	13	>
FIELD	4832:18	4832:18	12	4096
LEAF_NODE	4832:18	4832:18	13	4096
LEAF_NODE	4832:22	4832:22	10	)
STATEMENTS	4833:3	4837:3	10	
LEAF_NODE	4833:3	4833:3	11	{
STATEMENTS	4834:4	4836:4	11	
EXPR_STATEMENT	4834:4	4835:90	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" ) ;
EXPR	4834:4	4834:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
FUNCTION_CALL	4834:4	4835:89	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
CALLEE	4834:4	4834:4	15	TIFFErrorExt
LEAF_NODE	4834:4	4834:4	16	TIFFErrorExt
LEAF_NODE	4834:16	4834:16	15	(
ARGUMENT	4834:17	4834:17	15	tif -> tif_clientdata
FIELD	4834:17	4834:22	16	tif -> tif_clientdata
LEAF_NODE	4834:17	4834:17	17	tif
LEAF_NODE	4834:20	4834:20	17	->
LEAF_NODE	4834:22	4834:22	17	tif_clientdata
LEAF_NODE	4834:36	4834:36	15	,
ARGUMENT	4834:38	4834:38	15	module
FIELD	4834:38	4834:38	16	module
LEAF_NODE	4834:38	4834:38	17	module
LEAF_NODE	4834:44	4834:44	15	,
ARGUMENT	4835:8	4835:8	15	"Sanity check on directory count failed, this is probably not a valid IFD offset"
FIELD	4835:8	4835:8	16	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4835:8	4835:8	17	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4835:89	4835:89	15	)
LEAF_NODE	4835:90	4835:90	13	;
JUMP_STATEMENT	4836:4	4836:12	12	return 0 ;
KEYWORD	4836:4	4836:4	13	return
LEAF_NODE	4836:4	4836:4	14	return
DESTINATION	4836:11	4836:11	13	0
EXPR	4836:11	4836:11	14	0
FIELD	4836:11	4836:11	15	0
LEAF_NODE	4836:11	4836:11	16	0
LEAF_NODE	4836:12	4836:12	13	;
LEAF_NODE	4837:3	4837:3	11	}
EXPR_STATEMENT	4838:3	4838:15	9	dirsize = 12 ;
EXPR	4838:3	4838:3	10	dirsize = 12
ASSIGN	4838:3	4838:13	11	dirsize = 12
LVAL	4838:3	4838:3	12	dirsize
FIELD	4838:3	4838:3	13	dirsize
LEAF_NODE	4838:3	4838:3	14	dirsize
ASSIGN_OP	4838:11	4838:11	12	=
LEAF_NODE	4838:11	4838:11	13	=
RVAL	4838:13	4838:13	12	12
FIELD	4838:13	4838:13	13	12
LEAF_NODE	4838:13	4838:13	14	12
LEAF_NODE	4838:15	4838:15	10	;
LEAF_NODE	4839:2	4839:2	8	}
SELECTION	4840:2	4841:2	6	
KEYWORD	4840:2	4840:2	7	else
LEAF_NODE	4840:2	4840:2	8	else
STATEMENTS	4841:2	4863:2	7	
LEAF_NODE	4841:2	4841:2	8	{
STATEMENTS	4842:3	4862:3	8	
SIMPLE_DECL	4842:3	4842:20	9	uint64 dircount64 ;
VAR_DECL	4842:3	4842:10	10	uint64 dircount64
TYPE	4842:3	4842:3	11	uint64
TYPE_NAME	4842:3	4842:3	12	uint64
LEAF_NODE	4842:3	4842:3	13	uint64
NAME	4842:10	4842:10	11	dircount64
LEAF_NODE	4842:10	4842:10	12	dircount64
LEAF_NODE	4842:20	4842:20	10	;
EXPR_STATEMENT	4843:3	4843:23	9	m = off + sizeof ( uint64 ) ;
EXPR	4843:3	4843:3	10	m = off + sizeof ( uint64 )
ASSIGN	4843:3	4843:5	11	m = off + sizeof ( uint64 )
LVAL	4843:3	4843:3	12	m
FIELD	4843:3	4843:3	13	m
LEAF_NODE	4843:3	4843:3	14	m
ASSIGN_OP	4843:4	4843:4	12	=
LEAF_NODE	4843:4	4843:4	13	=
RVAL	4843:5	4843:9	12	off + sizeof ( uint64 )
FIELD	4843:5	4843:5	13	off
LEAF_NODE	4843:5	4843:5	14	off
LEAF_NODE	4843:8	4843:8	13	+
FUNCTION_CALL	4843:9	4843:22	13	sizeof ( uint64 )
CALLEE	4843:9	4843:9	14	sizeof
LEAF_NODE	4843:9	4843:9	15	sizeof
LEAF_NODE	4843:15	4843:15	14	(
ARGUMENT	4843:16	4843:16	14	uint64
FIELD	4843:16	4843:16	15	uint64
LEAF_NODE	4843:16	4843:16	16	uint64
LEAF_NODE	4843:22	4843:22	14	)
LEAF_NODE	4843:23	4843:23	10	;
SELECTION	4844:3	4844:65	9	
KEYWORD	4844:3	4844:3	10	if
LEAF_NODE	4844:3	4844:3	11	if
LEAF_NODE	4844:6	4844:6	10	(
CONDITION	4844:7	4844:7	10	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
EXPR	4844:7	4844:7	11	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
OR	4844:7	4844:16	12	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
EXPR	4844:7	4844:13	13	( m < off )
LEAF_NODE	4844:7	4844:7	14	(
FIELD	4844:8	4844:8	14	m
LEAF_NODE	4844:8	4844:8	15	m
REL_OPERATOR	4844:9	4844:9	14	<
LEAF_NODE	4844:9	4844:9	15	<
FIELD	4844:10	4844:10	14	off
LEAF_NODE	4844:10	4844:10	15	off
LEAF_NODE	4844:13	4844:13	14	)
LEAF_NODE	4844:14	4844:14	13	||
EXPR	4844:16	4844:16	13	( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
OR	4844:16	4844:46	14	( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
EXPR	4844:16	4844:43	15	( m < ( tmsize_t ) sizeof ( uint64 ) )
LEAF_NODE	4844:16	4844:16	16	(
FIELD	4844:17	4844:17	16	m
LEAF_NODE	4844:17	4844:17	17	m
REL_OPERATOR	4844:18	4844:18	16	<
LEAF_NODE	4844:18	4844:18	17	<
LEAF_NODE	4844:19	4844:19	16	(
TYPE_NAME	4844:20	4844:20	16	tmsize_t
LEAF_NODE	4844:20	4844:20	17	tmsize_t
LEAF_NODE	4844:28	4844:28	16	)
FUNCTION_CALL	4844:29	4844:42	16	sizeof ( uint64 )
CALLEE	4844:29	4844:29	17	sizeof
LEAF_NODE	4844:29	4844:29	18	sizeof
LEAF_NODE	4844:35	4844:35	17	(
ARGUMENT	4844:36	4844:36	17	uint64
FIELD	4844:36	4844:36	18	uint64
LEAF_NODE	4844:36	4844:36	19	uint64
LEAF_NODE	4844:42	4844:42	17	)
LEAF_NODE	4844:43	4844:43	16	)
LEAF_NODE	4844:44	4844:44	15	||
EXPR	4844:46	4844:62	15	( m > tif -> tif_size )
LEAF_NODE	4844:46	4844:46	16	(
FIELD	4844:47	4844:47	16	m
LEAF_NODE	4844:47	4844:47	17	m
REL_OPERATOR	4844:48	4844:48	16	>
LEAF_NODE	4844:48	4844:48	17	>
FIELD	4844:49	4844:54	16	tif -> tif_size
LEAF_NODE	4844:49	4844:49	17	tif
LEAF_NODE	4844:52	4844:52	17	->
LEAF_NODE	4844:54	4844:54	17	tif_size
LEAF_NODE	4844:62	4844:62	16	)
LEAF_NODE	4844:63	4844:63	10	)
STATEMENTS	4844:65	4848:3	10	
LEAF_NODE	4844:65	4844:65	11	{
STATEMENTS	4845:4	4847:4	11	
EXPR_STATEMENT	4845:4	4846:41	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" ) ;
EXPR	4845:4	4845:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" )
FUNCTION_CALL	4845:4	4846:40	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory count" )
CALLEE	4845:4	4845:4	15	TIFFErrorExt
LEAF_NODE	4845:4	4845:4	16	TIFFErrorExt
LEAF_NODE	4845:16	4845:16	15	(
ARGUMENT	4845:17	4845:17	15	tif -> tif_clientdata
FIELD	4845:17	4845:22	16	tif -> tif_clientdata
LEAF_NODE	4845:17	4845:17	17	tif
LEAF_NODE	4845:20	4845:20	17	->
LEAF_NODE	4845:22	4845:22	17	tif_clientdata
LEAF_NODE	4845:36	4845:36	15	,
ARGUMENT	4845:38	4845:38	15	module
FIELD	4845:38	4845:38	16	module
LEAF_NODE	4845:38	4845:38	17	module
LEAF_NODE	4845:44	4845:44	15	,
ARGUMENT	4846:5	4846:5	15	"Can not read TIFF directory count"
FIELD	4846:5	4846:5	16	"Can not read TIFF directory count"
LEAF_NODE	4846:5	4846:5	17	"Can not read TIFF directory count"
LEAF_NODE	4846:40	4846:40	15	)
LEAF_NODE	4846:41	4846:41	13	;
JUMP_STATEMENT	4847:4	4847:12	12	return 0 ;
KEYWORD	4847:4	4847:4	13	return
LEAF_NODE	4847:4	4847:4	14	return
DESTINATION	4847:11	4847:11	13	0
EXPR	4847:11	4847:11	14	0
FIELD	4847:11	4847:11	15	0
LEAF_NODE	4847:11	4847:11	16	0
LEAF_NODE	4847:12	4847:12	13	;
LEAF_NODE	4848:3	4848:3	11	}
SELECTION	4848:5	4848:10	9	
KEYWORD	4848:5	4848:5	10	else
LEAF_NODE	4848:5	4848:5	11	else
STATEMENTS	4848:10	4851:3	10	
LEAF_NODE	4848:10	4848:10	11	{
STATEMENTS	4849:4	4849:4	11	
EXPR_STATEMENT	4849:4	4850:24	12	_TIFFmemcpy ( & dircount64 , tif -> tif_base + off , sizeof ( uint64 ) ) ;
EXPR	4849:4	4849:4	13	_TIFFmemcpy ( & dircount64 , tif -> tif_base + off , sizeof ( uint64 ) )
FUNCTION_CALL	4849:4	4850:23	14	_TIFFmemcpy ( & dircount64 , tif -> tif_base + off , sizeof ( uint64 ) )
CALLEE	4849:4	4849:4	15	_TIFFmemcpy
LEAF_NODE	4849:4	4849:4	16	_TIFFmemcpy
LEAF_NODE	4849:15	4849:15	15	(
ARGUMENT	4849:16	4849:16	15	& dircount64
UNARY_EXPR	4849:16	4849:17	16	& dircount64
UNARY_OPERATOR	4849:16	4849:16	17	&
LEAF_NODE	4849:16	4849:16	18	&
FIELD	4849:17	4849:17	17	dircount64
LEAF_NODE	4849:17	4849:17	18	dircount64
LEAF_NODE	4849:27	4849:27	15	,
ARGUMENT	4849:29	4849:45	15	tif -> tif_base + off
FIELD	4849:29	4849:34	16	tif -> tif_base
LEAF_NODE	4849:29	4849:29	17	tif
LEAF_NODE	4849:32	4849:32	17	->
LEAF_NODE	4849:34	4849:34	17	tif_base
LEAF_NODE	4849:43	4849:43	16	+
FIELD	4849:45	4849:45	16	off
LEAF_NODE	4849:45	4849:45	17	off
LEAF_NODE	4849:48	4849:48	15	,
ARGUMENT	4850:9	4850:9	15	sizeof ( uint64 )
FUNCTION_CALL	4850:9	4850:22	16	sizeof ( uint64 )
CALLEE	4850:9	4850:9	17	sizeof
LEAF_NODE	4850:9	4850:9	18	sizeof
LEAF_NODE	4850:15	4850:15	17	(
ARGUMENT	4850:16	4850:16	17	uint64
FIELD	4850:16	4850:16	18	uint64
LEAF_NODE	4850:16	4850:16	19	uint64
LEAF_NODE	4850:22	4850:22	17	)
LEAF_NODE	4850:23	4850:23	15	)
LEAF_NODE	4850:24	4850:24	13	;
LEAF_NODE	4851:3	4851:3	11	}
EXPR_STATEMENT	4852:3	4852:25	9	off += sizeof ( uint64 ) ;
EXPR	4852:3	4852:3	10	off += sizeof ( uint64 )
ASSIGN	4852:3	4852:10	11	off += sizeof ( uint64 )
LVAL	4852:3	4852:3	12	off
FIELD	4852:3	4852:3	13	off
LEAF_NODE	4852:3	4852:3	14	off
ASSIGN_OP	4852:7	4852:7	12	+=
LEAF_NODE	4852:7	4852:7	13	+=
RVAL	4852:10	4852:10	12	sizeof ( uint64 )
FUNCTION_CALL	4852:10	4852:24	13	sizeof ( uint64 )
CALLEE	4852:10	4852:10	14	sizeof
LEAF_NODE	4852:10	4852:10	15	sizeof
LEAF_NODE	4852:17	4852:17	14	(
ARGUMENT	4852:18	4852:18	14	uint64
FIELD	4852:18	4852:18	15	uint64
LEAF_NODE	4852:18	4852:18	16	uint64
LEAF_NODE	4852:24	4852:24	14	)
LEAF_NODE	4852:25	4852:25	10	;
SELECTION	4853:3	4854:4	9	
KEYWORD	4853:3	4853:3	10	if
LEAF_NODE	4853:3	4853:3	11	if
LEAF_NODE	4853:6	4853:6	10	(
CONDITION	4853:7	4853:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	4853:7	4853:24	11	tif -> tif_flags & TIFF_SWAB
FIELD	4853:7	4853:12	12	tif -> tif_flags
LEAF_NODE	4853:7	4853:7	13	tif
LEAF_NODE	4853:10	4853:10	13	->
LEAF_NODE	4853:12	4853:12	13	tif_flags
LEAF_NODE	4853:22	4853:22	12	&
FIELD	4853:24	4853:24	12	TIFF_SWAB
LEAF_NODE	4853:24	4853:24	13	TIFF_SWAB
LEAF_NODE	4853:33	4853:33	10	)
STATEMENTS	4854:4	4854:4	10	
EXPR_STATEMENT	4854:4	4854:30	11	TIFFSwabLong8 ( & dircount64 ) ;
EXPR	4854:4	4854:4	12	TIFFSwabLong8 ( & dircount64 )
FUNCTION_CALL	4854:4	4854:29	13	TIFFSwabLong8 ( & dircount64 )
CALLEE	4854:4	4854:4	14	TIFFSwabLong8
LEAF_NODE	4854:4	4854:4	15	TIFFSwabLong8
LEAF_NODE	4854:17	4854:17	14	(
ARGUMENT	4854:18	4854:18	14	& dircount64
UNARY_EXPR	4854:18	4854:19	15	& dircount64
UNARY_OPERATOR	4854:18	4854:18	16	&
LEAF_NODE	4854:18	4854:18	17	&
FIELD	4854:19	4854:19	16	dircount64
LEAF_NODE	4854:19	4854:19	17	dircount64
LEAF_NODE	4854:29	4854:29	14	)
LEAF_NODE	4854:30	4854:30	12	;
SELECTION	4855:3	4856:3	9	
KEYWORD	4855:3	4855:3	10	if
LEAF_NODE	4855:3	4855:3	11	if
LEAF_NODE	4855:6	4855:6	10	(
CONDITION	4855:7	4855:7	10	dircount64 > 4096
EXPR	4855:7	4855:18	11	dircount64 > 4096
FIELD	4855:7	4855:7	12	dircount64
LEAF_NODE	4855:7	4855:7	13	dircount64
REL_OPERATOR	4855:17	4855:17	12	>
LEAF_NODE	4855:17	4855:17	13	>
FIELD	4855:18	4855:18	12	4096
LEAF_NODE	4855:18	4855:18	13	4096
LEAF_NODE	4855:22	4855:22	10	)
STATEMENTS	4856:3	4860:3	10	
LEAF_NODE	4856:3	4856:3	11	{
STATEMENTS	4857:4	4859:4	11	
EXPR_STATEMENT	4857:4	4858:90	12	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" ) ;
EXPR	4857:4	4857:4	13	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
FUNCTION_CALL	4857:4	4858:89	14	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, this is probably not a valid IFD offset" )
CALLEE	4857:4	4857:4	15	TIFFErrorExt
LEAF_NODE	4857:4	4857:4	16	TIFFErrorExt
LEAF_NODE	4857:16	4857:16	15	(
ARGUMENT	4857:17	4857:17	15	tif -> tif_clientdata
FIELD	4857:17	4857:22	16	tif -> tif_clientdata
LEAF_NODE	4857:17	4857:17	17	tif
LEAF_NODE	4857:20	4857:20	17	->
LEAF_NODE	4857:22	4857:22	17	tif_clientdata
LEAF_NODE	4857:36	4857:36	15	,
ARGUMENT	4857:38	4857:38	15	module
FIELD	4857:38	4857:38	16	module
LEAF_NODE	4857:38	4857:38	17	module
LEAF_NODE	4857:44	4857:44	15	,
ARGUMENT	4858:8	4858:8	15	"Sanity check on directory count failed, this is probably not a valid IFD offset"
FIELD	4858:8	4858:8	16	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4858:8	4858:8	17	"Sanity check on directory count failed, this is probably not a valid IFD offset"
LEAF_NODE	4858:89	4858:89	15	)
LEAF_NODE	4858:90	4858:90	13	;
JUMP_STATEMENT	4859:4	4859:12	12	return 0 ;
KEYWORD	4859:4	4859:4	13	return
LEAF_NODE	4859:4	4859:4	14	return
DESTINATION	4859:11	4859:11	13	0
EXPR	4859:11	4859:11	14	0
FIELD	4859:11	4859:11	15	0
LEAF_NODE	4859:11	4859:11	16	0
LEAF_NODE	4859:12	4859:12	13	;
LEAF_NODE	4860:3	4860:3	11	}
EXPR_STATEMENT	4861:3	4861:34	9	dircount16 = ( uint16 ) dircount64 ;
EXPR	4861:3	4861:3	10	dircount16 = ( uint16 ) dircount64
ASSIGN	4861:3	4861:16	11	dircount16 = ( uint16 ) dircount64
LVAL	4861:3	4861:3	12	dircount16
FIELD	4861:3	4861:3	13	dircount16
LEAF_NODE	4861:3	4861:3	14	dircount16
ASSIGN_OP	4861:14	4861:14	12	=
LEAF_NODE	4861:14	4861:14	13	=
RVAL	4861:16	4861:24	12	( uint16 ) dircount64
LEAF_NODE	4861:16	4861:16	13	(
TYPE_NAME	4861:17	4861:17	13	uint16
LEAF_NODE	4861:17	4861:17	14	uint16
LEAF_NODE	4861:23	4861:23	13	)
FIELD	4861:24	4861:24	13	dircount64
LEAF_NODE	4861:24	4861:24	14	dircount64
LEAF_NODE	4861:34	4861:34	10	;
EXPR_STATEMENT	4862:3	4862:15	9	dirsize = 20 ;
EXPR	4862:3	4862:3	10	dirsize = 20
ASSIGN	4862:3	4862:13	11	dirsize = 20
LVAL	4862:3	4862:3	12	dirsize
FIELD	4862:3	4862:3	13	dirsize
LEAF_NODE	4862:3	4862:3	14	dirsize
ASSIGN_OP	4862:11	4862:11	12	=
LEAF_NODE	4862:11	4862:11	13	=
RVAL	4862:13	4862:13	12	20
FIELD	4862:13	4862:13	13	20
LEAF_NODE	4862:13	4862:13	14	20
LEAF_NODE	4862:15	4862:15	10	;
LEAF_NODE	4863:2	4863:2	8	}
SELECTION	4864:2	4865:2	6	
KEYWORD	4864:2	4864:2	7	if
LEAF_NODE	4864:2	4864:2	8	if
LEAF_NODE	4864:5	4864:5	7	(
CONDITION	4864:6	4864:6	7	dircount16 == 0
EXPR	4864:6	4864:20	8	dircount16 == 0
FIELD	4864:6	4864:6	9	dircount16
LEAF_NODE	4864:6	4864:6	10	dircount16
EQ_OPERATOR	4864:17	4864:17	9	==
LEAF_NODE	4864:17	4864:17	10	==
FIELD	4864:20	4864:20	9	0
LEAF_NODE	4864:20	4864:20	10	0
LEAF_NODE	4864:22	4864:22	7	)
STATEMENTS	4865:2	4869:2	7	
LEAF_NODE	4865:2	4865:2	8	{
STATEMENTS	4866:3	4868:3	8	
EXPR_STATEMENT	4866:3	4867:93	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, zero tag directories not supported" ) ;
EXPR	4866:3	4866:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, zero tag directories not supported" )
FUNCTION_CALL	4866:3	4867:92	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Sanity check on directory count failed, zero tag directories not supported" )
CALLEE	4866:3	4866:3	12	TIFFErrorExt
LEAF_NODE	4866:3	4866:3	13	TIFFErrorExt
LEAF_NODE	4866:15	4866:15	12	(
ARGUMENT	4866:16	4866:16	12	tif -> tif_clientdata
FIELD	4866:16	4866:21	13	tif -> tif_clientdata
LEAF_NODE	4866:16	4866:16	14	tif
LEAF_NODE	4866:19	4866:19	14	->
LEAF_NODE	4866:21	4866:21	14	tif_clientdata
LEAF_NODE	4866:35	4866:35	12	,
ARGUMENT	4866:37	4866:37	12	module
FIELD	4866:37	4866:37	13	module
LEAF_NODE	4866:37	4866:37	14	module
LEAF_NODE	4866:43	4866:43	12	,
ARGUMENT	4867:16	4867:16	12	"Sanity check on directory count failed, zero tag directories not supported"
FIELD	4867:16	4867:16	13	"Sanity check on directory count failed, zero tag directories not supported"
LEAF_NODE	4867:16	4867:16	14	"Sanity check on directory count failed, zero tag directories not supported"
LEAF_NODE	4867:92	4867:92	12	)
LEAF_NODE	4867:93	4867:93	10	;
JUMP_STATEMENT	4868:3	4868:11	9	return 0 ;
KEYWORD	4868:3	4868:3	10	return
LEAF_NODE	4868:3	4868:3	11	return
DESTINATION	4868:10	4868:10	10	0
EXPR	4868:10	4868:10	11	0
FIELD	4868:10	4868:10	12	0
LEAF_NODE	4868:10	4868:10	13	0
LEAF_NODE	4868:11	4868:11	10	;
LEAF_NODE	4869:2	4869:2	8	}
EXPR_STATEMENT	4870:2	4872:31	6	origdir = _TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" ) ;
EXPR	4870:2	4870:2	7	origdir = _TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
ASSIGN	4870:2	4870:12	8	origdir = _TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
LVAL	4870:2	4870:2	9	origdir
FIELD	4870:2	4870:2	10	origdir
LEAF_NODE	4870:2	4870:2	11	origdir
ASSIGN_OP	4870:10	4870:10	9	=
LEAF_NODE	4870:10	4870:10	10	=
RVAL	4870:12	4870:12	9	_TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
FUNCTION_CALL	4870:12	4872:30	10	_TIFFCheckMalloc ( tif , dircount16 , dirsize , "to read TIFF directory" )
CALLEE	4870:12	4870:12	11	_TIFFCheckMalloc
LEAF_NODE	4870:12	4870:12	12	_TIFFCheckMalloc
LEAF_NODE	4870:28	4870:28	11	(
ARGUMENT	4870:29	4870:29	11	tif
FIELD	4870:29	4870:29	12	tif
LEAF_NODE	4870:29	4870:29	13	tif
LEAF_NODE	4870:32	4870:32	11	,
ARGUMENT	4870:34	4870:34	11	dircount16
FIELD	4870:34	4870:34	12	dircount16
LEAF_NODE	4870:34	4870:34	13	dircount16
LEAF_NODE	4870:44	4870:44	11	,
ARGUMENT	4871:6	4871:6	11	dirsize
FIELD	4871:6	4871:6	12	dirsize
LEAF_NODE	4871:6	4871:6	13	dirsize
LEAF_NODE	4871:13	4871:13	11	,
ARGUMENT	4872:6	4872:6	11	"to read TIFF directory"
FIELD	4872:6	4872:6	12	"to read TIFF directory"
LEAF_NODE	4872:6	4872:6	13	"to read TIFF directory"
LEAF_NODE	4872:30	4872:30	11	)
LEAF_NODE	4872:31	4872:31	7	;
SELECTION	4873:2	4874:3	6	
KEYWORD	4873:2	4873:2	7	if
LEAF_NODE	4873:2	4873:2	8	if
LEAF_NODE	4873:5	4873:5	7	(
CONDITION	4873:6	4873:6	7	origdir == NULL
EXPR	4873:6	4873:17	8	origdir == NULL
FIELD	4873:6	4873:6	9	origdir
LEAF_NODE	4873:6	4873:6	10	origdir
EQ_OPERATOR	4873:14	4873:14	9	==
LEAF_NODE	4873:14	4873:14	10	==
FIELD	4873:17	4873:17	9	NULL
LEAF_NODE	4873:17	4873:17	10	NULL
LEAF_NODE	4873:21	4873:21	7	)
STATEMENTS	4874:3	4874:3	7	
JUMP_STATEMENT	4874:3	4874:11	8	return 0 ;
KEYWORD	4874:3	4874:3	9	return
LEAF_NODE	4874:3	4874:3	10	return
DESTINATION	4874:10	4874:10	9	0
EXPR	4874:10	4874:10	10	0
FIELD	4874:10	4874:10	11	0
LEAF_NODE	4874:10	4874:10	12	0
LEAF_NODE	4874:11	4874:11	9	;
EXPR_STATEMENT	4875:2	4875:26	6	m = off + dircount16 * dirsize ;
EXPR	4875:2	4875:2	7	m = off + dircount16 * dirsize
ASSIGN	4875:2	4875:4	8	m = off + dircount16 * dirsize
LVAL	4875:2	4875:2	9	m
FIELD	4875:2	4875:2	10	m
LEAF_NODE	4875:2	4875:2	11	m
ASSIGN_OP	4875:3	4875:3	9	=
LEAF_NODE	4875:3	4875:3	10	=
RVAL	4875:4	4875:19	9	off + dircount16 * dirsize
FIELD	4875:4	4875:4	10	off
LEAF_NODE	4875:4	4875:4	11	off
LEAF_NODE	4875:7	4875:7	10	+
FIELD	4875:8	4875:8	10	dircount16
LEAF_NODE	4875:8	4875:8	11	dircount16
LEAF_NODE	4875:18	4875:18	10	*
FIELD	4875:19	4875:19	10	dirsize
LEAF_NODE	4875:19	4875:19	11	dirsize
LEAF_NODE	4875:26	4875:26	7	;
SELECTION	4876:2	4876:70	6	
KEYWORD	4876:2	4876:2	7	if
LEAF_NODE	4876:2	4876:2	8	if
LEAF_NODE	4876:5	4876:5	7	(
CONDITION	4876:6	4876:6	7	( m < off ) || ( m < ( tmsize_t ) ( dircount16 * dirsize ) ) || ( m > tif -> tif_size )
EXPR	4876:6	4876:6	8	( m < off ) || ( m < ( tmsize_t ) ( dircount16 * dirsize ) ) || ( m > tif -> tif_size )
OR	4876:6	4876:15	9	( m < off ) || ( m < ( tmsize_t ) ( dircount16 * dirsize ) ) || ( m > tif -> tif_size )
EXPR	4876:6	4876:12	10	( m < off )
LEAF_NODE	4876:6	4876:6	11	(
FIELD	4876:7	4876:7	11	m
LEAF_NODE	4876:7	4876:7	12	m
REL_OPERATOR	4876:8	4876:8	11	<
LEAF_NODE	4876:8	4876:8	12	<
FIELD	4876:9	4876:9	11	off
LEAF_NODE	4876:9	4876:9	12	off
LEAF_NODE	4876:12	4876:12	11	)
LEAF_NODE	4876:13	4876:13	10	||
EXPR	4876:15	4876:15	10	( m < ( tmsize_t ) ( dircount16 * dirsize ) ) || ( m > tif -> tif_size )
OR	4876:15	4876:51	11	( m < ( tmsize_t ) ( dircount16 * dirsize ) ) || ( m > tif -> tif_size )
EXPR	4876:15	4876:48	12	( m < ( tmsize_t ) ( dircount16 * dirsize ) )
LEAF_NODE	4876:15	4876:15	13	(
FIELD	4876:16	4876:16	13	m
LEAF_NODE	4876:16	4876:16	14	m
REL_OPERATOR	4876:17	4876:17	13	<
LEAF_NODE	4876:17	4876:17	14	<
LEAF_NODE	4876:18	4876:18	13	(
TYPE_NAME	4876:19	4876:19	13	tmsize_t
LEAF_NODE	4876:19	4876:19	14	tmsize_t
LEAF_NODE	4876:27	4876:27	13	)
LEAF_NODE	4876:28	4876:28	13	(
FIELD	4876:29	4876:29	13	dircount16
LEAF_NODE	4876:29	4876:29	14	dircount16
LEAF_NODE	4876:39	4876:39	13	*
FIELD	4876:40	4876:40	13	dirsize
LEAF_NODE	4876:40	4876:40	14	dirsize
LEAF_NODE	4876:47	4876:47	13	)
LEAF_NODE	4876:48	4876:48	13	)
LEAF_NODE	4876:49	4876:49	12	||
EXPR	4876:51	4876:67	12	( m > tif -> tif_size )
LEAF_NODE	4876:51	4876:51	13	(
FIELD	4876:52	4876:52	13	m
LEAF_NODE	4876:52	4876:52	14	m
REL_OPERATOR	4876:53	4876:53	13	>
LEAF_NODE	4876:53	4876:53	14	>
FIELD	4876:54	4876:59	13	tif -> tif_size
LEAF_NODE	4876:54	4876:54	14	tif
LEAF_NODE	4876:57	4876:57	14	->
LEAF_NODE	4876:59	4876:59	14	tif_size
LEAF_NODE	4876:67	4876:67	13	)
LEAF_NODE	4876:68	4876:68	7	)
STATEMENTS	4876:70	4881:2	7	
LEAF_NODE	4876:70	4876:70	8	{
STATEMENTS	4877:3	4880:3	8	
EXPR_STATEMENT	4877:3	4878:39	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory" ) ;
EXPR	4877:3	4877:3	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory" )
FUNCTION_CALL	4877:3	4878:38	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Can not read TIFF directory" )
CALLEE	4877:3	4877:3	12	TIFFErrorExt
LEAF_NODE	4877:3	4877:3	13	TIFFErrorExt
LEAF_NODE	4877:15	4877:15	12	(
ARGUMENT	4877:16	4877:16	12	tif -> tif_clientdata
FIELD	4877:16	4877:21	13	tif -> tif_clientdata
LEAF_NODE	4877:16	4877:16	14	tif
LEAF_NODE	4877:19	4877:19	14	->
LEAF_NODE	4877:21	4877:21	14	tif_clientdata
LEAF_NODE	4877:35	4877:35	12	,
ARGUMENT	4877:37	4877:37	12	module
FIELD	4877:37	4877:37	13	module
LEAF_NODE	4877:37	4877:37	14	module
LEAF_NODE	4877:43	4877:43	12	,
ARGUMENT	4878:9	4878:9	12	"Can not read TIFF directory"
FIELD	4878:9	4878:9	13	"Can not read TIFF directory"
LEAF_NODE	4878:9	4878:9	14	"Can not read TIFF directory"
LEAF_NODE	4878:38	4878:38	12	)
LEAF_NODE	4878:39	4878:39	10	;
EXPR_STATEMENT	4879:3	4879:21	9	_TIFFfree ( origdir ) ;
EXPR	4879:3	4879:3	10	_TIFFfree ( origdir )
FUNCTION_CALL	4879:3	4879:20	11	_TIFFfree ( origdir )
CALLEE	4879:3	4879:3	12	_TIFFfree
LEAF_NODE	4879:3	4879:3	13	_TIFFfree
LEAF_NODE	4879:12	4879:12	12	(
ARGUMENT	4879:13	4879:13	12	origdir
FIELD	4879:13	4879:13	13	origdir
LEAF_NODE	4879:13	4879:13	14	origdir
LEAF_NODE	4879:20	4879:20	12	)
LEAF_NODE	4879:21	4879:21	10	;
JUMP_STATEMENT	4880:3	4880:11	9	return 0 ;
KEYWORD	4880:3	4880:3	10	return
LEAF_NODE	4880:3	4880:3	11	return
DESTINATION	4880:10	4880:10	10	0
EXPR	4880:10	4880:10	11	0
FIELD	4880:10	4880:10	12	0
LEAF_NODE	4880:10	4880:10	13	0
LEAF_NODE	4880:11	4880:11	10	;
LEAF_NODE	4881:2	4881:2	8	}
SELECTION	4881:4	4881:9	6	
KEYWORD	4881:4	4881:4	7	else
LEAF_NODE	4881:4	4881:4	8	else
STATEMENTS	4881:9	4884:2	7	
LEAF_NODE	4881:9	4881:9	8	{
STATEMENTS	4882:3	4882:3	8	
EXPR_STATEMENT	4882:3	4883:29	9	_TIFFmemcpy ( origdir , tif -> tif_base + off , dircount16 * dirsize ) ;
EXPR	4882:3	4882:3	10	_TIFFmemcpy ( origdir , tif -> tif_base + off , dircount16 * dirsize )
FUNCTION_CALL	4882:3	4883:28	11	_TIFFmemcpy ( origdir , tif -> tif_base + off , dircount16 * dirsize )
CALLEE	4882:3	4882:3	12	_TIFFmemcpy
LEAF_NODE	4882:3	4882:3	13	_TIFFmemcpy
LEAF_NODE	4882:14	4882:14	12	(
ARGUMENT	4882:15	4882:15	12	origdir
FIELD	4882:15	4882:15	13	origdir
LEAF_NODE	4882:15	4882:15	14	origdir
LEAF_NODE	4882:22	4882:22	12	,
ARGUMENT	4882:24	4882:40	12	tif -> tif_base + off
FIELD	4882:24	4882:29	13	tif -> tif_base
LEAF_NODE	4882:24	4882:24	14	tif
LEAF_NODE	4882:27	4882:27	14	->
LEAF_NODE	4882:29	4882:29	14	tif_base
LEAF_NODE	4882:38	4882:38	13	+
FIELD	4882:40	4882:40	13	off
LEAF_NODE	4882:40	4882:40	14	off
LEAF_NODE	4882:43	4882:43	12	,
ARGUMENT	4883:8	4883:21	12	dircount16 * dirsize
FIELD	4883:8	4883:8	13	dircount16
LEAF_NODE	4883:8	4883:8	14	dircount16
LEAF_NODE	4883:19	4883:19	13	*
FIELD	4883:21	4883:21	13	dirsize
LEAF_NODE	4883:21	4883:21	14	dirsize
LEAF_NODE	4883:28	4883:28	12	)
LEAF_NODE	4883:29	4883:29	10	;
LEAF_NODE	4884:2	4884:2	8	}
SELECTION	4885:2	4885:18	6	
KEYWORD	4885:2	4885:2	7	if
LEAF_NODE	4885:2	4885:2	8	if
LEAF_NODE	4885:5	4885:5	7	(
CONDITION	4885:6	4885:6	7	nextdiroff
EXPR	4885:6	4885:6	8	nextdiroff
FIELD	4885:6	4885:6	9	nextdiroff
LEAF_NODE	4885:6	4885:6	10	nextdiroff
LEAF_NODE	4885:16	4885:16	7	)
STATEMENTS	4885:18	4911:2	7	
LEAF_NODE	4885:18	4885:18	8	{
STATEMENTS	4886:3	4900:3	8	
EXPR_STATEMENT	4886:3	4886:30	9	off += dircount16 * dirsize ;
EXPR	4886:3	4886:3	10	off += dircount16 * dirsize
ASSIGN	4886:3	4886:10	11	off += dircount16 * dirsize
LVAL	4886:3	4886:3	12	off
FIELD	4886:3	4886:3	13	off
LEAF_NODE	4886:3	4886:3	14	off
ASSIGN_OP	4886:7	4886:7	12	+=
LEAF_NODE	4886:7	4886:7	13	+=
RVAL	4886:10	4886:23	12	dircount16 * dirsize
FIELD	4886:10	4886:10	13	dircount16
LEAF_NODE	4886:10	4886:10	14	dircount16
LEAF_NODE	4886:21	4886:21	13	*
FIELD	4886:23	4886:23	13	dirsize
LEAF_NODE	4886:23	4886:23	14	dirsize
LEAF_NODE	4886:30	4886:30	10	;
SELECTION	4887:3	4888:3	9	
KEYWORD	4887:3	4887:3	10	if
LEAF_NODE	4887:3	4887:3	11	if
LEAF_NODE	4887:6	4887:6	10	(
CONDITION	4887:7	4887:7	10	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	4887:7	4887:7	11	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	4887:7	4887:36	12	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	4887:7	4887:7	13	!
LEAF_NODE	4887:7	4887:7	14	!
LEAF_NODE	4887:8	4887:8	13	(
FIELD	4887:9	4887:14	13	tif -> tif_flags
LEAF_NODE	4887:9	4887:9	14	tif
LEAF_NODE	4887:12	4887:12	14	->
LEAF_NODE	4887:14	4887:14	14	tif_flags
LEAF_NODE	4887:23	4887:23	13	&
FIELD	4887:24	4887:24	13	TIFF_BIGTIFF
LEAF_NODE	4887:24	4887:24	14	TIFF_BIGTIFF
LEAF_NODE	4887:36	4887:36	13	)
LEAF_NODE	4887:37	4887:37	10	)
STATEMENTS	4888:3	4899:3	10	
LEAF_NODE	4888:3	4888:3	11	{
STATEMENTS	4889:4	4898:4	11	
SIMPLE_DECL	4889:4	4889:23	12	uint32 nextdiroff32 ;
VAR_DECL	4889:4	4889:11	13	uint32 nextdiroff32
TYPE	4889:4	4889:4	14	uint32
TYPE_NAME	4889:4	4889:4	15	uint32
LEAF_NODE	4889:4	4889:4	16	uint32
NAME	4889:11	4889:11	14	nextdiroff32
LEAF_NODE	4889:11	4889:11	15	nextdiroff32
LEAF_NODE	4889:23	4889:23	13	;
EXPR_STATEMENT	4890:4	4890:24	12	m = off + sizeof ( uint32 ) ;
EXPR	4890:4	4890:4	13	m = off + sizeof ( uint32 )
ASSIGN	4890:4	4890:6	14	m = off + sizeof ( uint32 )
LVAL	4890:4	4890:4	15	m
FIELD	4890:4	4890:4	16	m
LEAF_NODE	4890:4	4890:4	17	m
ASSIGN_OP	4890:5	4890:5	15	=
LEAF_NODE	4890:5	4890:5	16	=
RVAL	4890:6	4890:10	15	off + sizeof ( uint32 )
FIELD	4890:6	4890:6	16	off
LEAF_NODE	4890:6	4890:6	17	off
LEAF_NODE	4890:9	4890:9	16	+
FUNCTION_CALL	4890:10	4890:23	16	sizeof ( uint32 )
CALLEE	4890:10	4890:10	17	sizeof
LEAF_NODE	4890:10	4890:10	18	sizeof
LEAF_NODE	4890:16	4890:16	17	(
ARGUMENT	4890:17	4890:17	17	uint32
FIELD	4890:17	4890:17	18	uint32
LEAF_NODE	4890:17	4890:17	19	uint32
LEAF_NODE	4890:23	4890:23	17	)
LEAF_NODE	4890:24	4890:24	13	;
SELECTION	4891:4	4892:5	12	
KEYWORD	4891:4	4891:4	13	if
LEAF_NODE	4891:4	4891:4	14	if
LEAF_NODE	4891:7	4891:7	13	(
CONDITION	4891:8	4891:8	13	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint32 ) ) || ( m > tif -> tif_size )
EXPR	4891:8	4891:8	14	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint32 ) ) || ( m > tif -> tif_size )
OR	4891:8	4891:17	15	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint32 ) ) || ( m > tif -> tif_size )
EXPR	4891:8	4891:14	16	( m < off )
LEAF_NODE	4891:8	4891:8	17	(
FIELD	4891:9	4891:9	17	m
LEAF_NODE	4891:9	4891:9	18	m
REL_OPERATOR	4891:10	4891:10	17	<
LEAF_NODE	4891:10	4891:10	18	<
FIELD	4891:11	4891:11	17	off
LEAF_NODE	4891:11	4891:11	18	off
LEAF_NODE	4891:14	4891:14	17	)
LEAF_NODE	4891:15	4891:15	16	||
EXPR	4891:17	4891:17	16	( m < ( tmsize_t ) sizeof ( uint32 ) ) || ( m > tif -> tif_size )
OR	4891:17	4891:47	17	( m < ( tmsize_t ) sizeof ( uint32 ) ) || ( m > tif -> tif_size )
EXPR	4891:17	4891:44	18	( m < ( tmsize_t ) sizeof ( uint32 ) )
LEAF_NODE	4891:17	4891:17	19	(
FIELD	4891:18	4891:18	19	m
LEAF_NODE	4891:18	4891:18	20	m
REL_OPERATOR	4891:19	4891:19	19	<
LEAF_NODE	4891:19	4891:19	20	<
LEAF_NODE	4891:20	4891:20	19	(
TYPE_NAME	4891:21	4891:21	19	tmsize_t
LEAF_NODE	4891:21	4891:21	20	tmsize_t
LEAF_NODE	4891:29	4891:29	19	)
FUNCTION_CALL	4891:30	4891:43	19	sizeof ( uint32 )
CALLEE	4891:30	4891:30	20	sizeof
LEAF_NODE	4891:30	4891:30	21	sizeof
LEAF_NODE	4891:36	4891:36	20	(
ARGUMENT	4891:37	4891:37	20	uint32
FIELD	4891:37	4891:37	21	uint32
LEAF_NODE	4891:37	4891:37	22	uint32
LEAF_NODE	4891:43	4891:43	20	)
LEAF_NODE	4891:44	4891:44	19	)
LEAF_NODE	4891:45	4891:45	18	||
EXPR	4891:47	4891:63	18	( m > tif -> tif_size )
LEAF_NODE	4891:47	4891:47	19	(
FIELD	4891:48	4891:48	19	m
LEAF_NODE	4891:48	4891:48	20	m
REL_OPERATOR	4891:49	4891:49	19	>
LEAF_NODE	4891:49	4891:49	20	>
FIELD	4891:50	4891:55	19	tif -> tif_size
LEAF_NODE	4891:50	4891:50	20	tif
LEAF_NODE	4891:53	4891:53	20	->
LEAF_NODE	4891:55	4891:55	20	tif_size
LEAF_NODE	4891:63	4891:63	19	)
LEAF_NODE	4891:64	4891:64	13	)
STATEMENTS	4892:5	4892:5	13	
EXPR_STATEMENT	4892:5	4892:21	14	nextdiroff32 = 0 ;
EXPR	4892:5	4892:5	15	nextdiroff32 = 0
ASSIGN	4892:5	4892:20	16	nextdiroff32 = 0
LVAL	4892:5	4892:5	17	nextdiroff32
FIELD	4892:5	4892:5	18	nextdiroff32
LEAF_NODE	4892:5	4892:5	19	nextdiroff32
ASSIGN_OP	4892:18	4892:18	17	=
LEAF_NODE	4892:18	4892:18	18	=
RVAL	4892:20	4892:20	17	0
FIELD	4892:20	4892:20	18	0
LEAF_NODE	4892:20	4892:20	19	0
LEAF_NODE	4892:21	4892:21	15	;
SELECTION	4893:4	4894:5	12	
KEYWORD	4893:4	4893:4	13	else
LEAF_NODE	4893:4	4893:4	14	else
STATEMENTS	4894:5	4894:5	13	
EXPR_STATEMENT	4894:5	4895:26	14	_TIFFmemcpy ( & nextdiroff32 , tif -> tif_base + off , sizeof ( uint32 ) ) ;
EXPR	4894:5	4894:5	15	_TIFFmemcpy ( & nextdiroff32 , tif -> tif_base + off , sizeof ( uint32 ) )
FUNCTION_CALL	4894:5	4895:25	16	_TIFFmemcpy ( & nextdiroff32 , tif -> tif_base + off , sizeof ( uint32 ) )
CALLEE	4894:5	4894:5	17	_TIFFmemcpy
LEAF_NODE	4894:5	4894:5	18	_TIFFmemcpy
LEAF_NODE	4894:16	4894:16	17	(
ARGUMENT	4894:17	4894:17	17	& nextdiroff32
UNARY_EXPR	4894:17	4894:18	18	& nextdiroff32
UNARY_OPERATOR	4894:17	4894:17	19	&
LEAF_NODE	4894:17	4894:17	20	&
FIELD	4894:18	4894:18	19	nextdiroff32
LEAF_NODE	4894:18	4894:18	20	nextdiroff32
LEAF_NODE	4894:30	4894:30	17	,
ARGUMENT	4894:32	4894:48	17	tif -> tif_base + off
FIELD	4894:32	4894:37	18	tif -> tif_base
LEAF_NODE	4894:32	4894:32	19	tif
LEAF_NODE	4894:35	4894:35	19	->
LEAF_NODE	4894:37	4894:37	19	tif_base
LEAF_NODE	4894:46	4894:46	18	+
FIELD	4894:48	4894:48	18	off
LEAF_NODE	4894:48	4894:48	19	off
LEAF_NODE	4894:51	4894:51	17	,
ARGUMENT	4895:10	4895:10	17	sizeof ( uint32 )
FUNCTION_CALL	4895:10	4895:24	18	sizeof ( uint32 )
CALLEE	4895:10	4895:10	19	sizeof
LEAF_NODE	4895:10	4895:10	20	sizeof
LEAF_NODE	4895:17	4895:17	19	(
ARGUMENT	4895:18	4895:18	19	uint32
FIELD	4895:18	4895:18	20	uint32
LEAF_NODE	4895:18	4895:18	21	uint32
LEAF_NODE	4895:24	4895:24	19	)
LEAF_NODE	4895:25	4895:25	17	)
LEAF_NODE	4895:26	4895:26	15	;
SELECTION	4896:4	4897:5	12	
KEYWORD	4896:4	4896:4	13	if
LEAF_NODE	4896:4	4896:4	14	if
LEAF_NODE	4896:7	4896:7	13	(
CONDITION	4896:8	4896:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	4896:8	4896:23	14	tif -> tif_flags & TIFF_SWAB
FIELD	4896:8	4896:13	15	tif -> tif_flags
LEAF_NODE	4896:8	4896:8	16	tif
LEAF_NODE	4896:11	4896:11	16	->
LEAF_NODE	4896:13	4896:13	16	tif_flags
LEAF_NODE	4896:22	4896:22	15	&
FIELD	4896:23	4896:23	15	TIFF_SWAB
LEAF_NODE	4896:23	4896:23	16	TIFF_SWAB
LEAF_NODE	4896:32	4896:32	13	)
STATEMENTS	4897:5	4897:5	13	
EXPR_STATEMENT	4897:5	4897:32	14	TIFFSwabLong ( & nextdiroff32 ) ;
EXPR	4897:5	4897:5	15	TIFFSwabLong ( & nextdiroff32 )
FUNCTION_CALL	4897:5	4897:31	16	TIFFSwabLong ( & nextdiroff32 )
CALLEE	4897:5	4897:5	17	TIFFSwabLong
LEAF_NODE	4897:5	4897:5	18	TIFFSwabLong
LEAF_NODE	4897:17	4897:17	17	(
ARGUMENT	4897:18	4897:18	17	& nextdiroff32
UNARY_EXPR	4897:18	4897:19	18	& nextdiroff32
UNARY_OPERATOR	4897:18	4897:18	19	&
LEAF_NODE	4897:18	4897:18	20	&
FIELD	4897:19	4897:19	19	nextdiroff32
LEAF_NODE	4897:19	4897:19	20	nextdiroff32
LEAF_NODE	4897:31	4897:31	17	)
LEAF_NODE	4897:32	4897:32	15	;
EXPR_STATEMENT	4898:4	4898:30	12	* nextdiroff = nextdiroff32 ;
EXPR	4898:4	4898:4	13	* nextdiroff = nextdiroff32
ASSIGN	4898:4	4898:18	14	* nextdiroff = nextdiroff32
LVAL	4898:4	4898:4	15	* nextdiroff
UNARY_EXPR	4898:4	4898:5	16	* nextdiroff
UNARY_OPERATOR	4898:4	4898:4	17	*
LEAF_NODE	4898:4	4898:4	18	*
FIELD	4898:5	4898:5	17	nextdiroff
LEAF_NODE	4898:5	4898:5	18	nextdiroff
ASSIGN_OP	4898:16	4898:16	15	=
LEAF_NODE	4898:16	4898:16	16	=
RVAL	4898:18	4898:18	15	nextdiroff32
FIELD	4898:18	4898:18	16	nextdiroff32
LEAF_NODE	4898:18	4898:18	17	nextdiroff32
LEAF_NODE	4898:30	4898:30	13	;
LEAF_NODE	4899:3	4899:3	11	}
SELECTION	4900:3	4901:3	9	
KEYWORD	4900:3	4900:3	10	else
LEAF_NODE	4900:3	4900:3	11	else
STATEMENTS	4901:3	4910:3	10	
LEAF_NODE	4901:3	4901:3	11	{
STATEMENTS	4902:4	4908:4	11	
EXPR_STATEMENT	4902:4	4902:24	12	m = off + sizeof ( uint64 ) ;
EXPR	4902:4	4902:4	13	m = off + sizeof ( uint64 )
ASSIGN	4902:4	4902:6	14	m = off + sizeof ( uint64 )
LVAL	4902:4	4902:4	15	m
FIELD	4902:4	4902:4	16	m
LEAF_NODE	4902:4	4902:4	17	m
ASSIGN_OP	4902:5	4902:5	15	=
LEAF_NODE	4902:5	4902:5	16	=
RVAL	4902:6	4902:10	15	off + sizeof ( uint64 )
FIELD	4902:6	4902:6	16	off
LEAF_NODE	4902:6	4902:6	17	off
LEAF_NODE	4902:9	4902:9	16	+
FUNCTION_CALL	4902:10	4902:23	16	sizeof ( uint64 )
CALLEE	4902:10	4902:10	17	sizeof
LEAF_NODE	4902:10	4902:10	18	sizeof
LEAF_NODE	4902:16	4902:16	17	(
ARGUMENT	4902:17	4902:17	17	uint64
FIELD	4902:17	4902:17	18	uint64
LEAF_NODE	4902:17	4902:17	19	uint64
LEAF_NODE	4902:23	4902:23	17	)
LEAF_NODE	4902:24	4902:24	13	;
SELECTION	4903:4	4904:5	12	
KEYWORD	4903:4	4903:4	13	if
LEAF_NODE	4903:4	4903:4	14	if
LEAF_NODE	4903:7	4903:7	13	(
CONDITION	4903:8	4903:8	13	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
EXPR	4903:8	4903:8	14	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
OR	4903:8	4903:17	15	( m < off ) || ( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
EXPR	4903:8	4903:14	16	( m < off )
LEAF_NODE	4903:8	4903:8	17	(
FIELD	4903:9	4903:9	17	m
LEAF_NODE	4903:9	4903:9	18	m
REL_OPERATOR	4903:10	4903:10	17	<
LEAF_NODE	4903:10	4903:10	18	<
FIELD	4903:11	4903:11	17	off
LEAF_NODE	4903:11	4903:11	18	off
LEAF_NODE	4903:14	4903:14	17	)
LEAF_NODE	4903:15	4903:15	16	||
EXPR	4903:17	4903:17	16	( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
OR	4903:17	4903:47	17	( m < ( tmsize_t ) sizeof ( uint64 ) ) || ( m > tif -> tif_size )
EXPR	4903:17	4903:44	18	( m < ( tmsize_t ) sizeof ( uint64 ) )
LEAF_NODE	4903:17	4903:17	19	(
FIELD	4903:18	4903:18	19	m
LEAF_NODE	4903:18	4903:18	20	m
REL_OPERATOR	4903:19	4903:19	19	<
LEAF_NODE	4903:19	4903:19	20	<
LEAF_NODE	4903:20	4903:20	19	(
TYPE_NAME	4903:21	4903:21	19	tmsize_t
LEAF_NODE	4903:21	4903:21	20	tmsize_t
LEAF_NODE	4903:29	4903:29	19	)
FUNCTION_CALL	4903:30	4903:43	19	sizeof ( uint64 )
CALLEE	4903:30	4903:30	20	sizeof
LEAF_NODE	4903:30	4903:30	21	sizeof
LEAF_NODE	4903:36	4903:36	20	(
ARGUMENT	4903:37	4903:37	20	uint64
FIELD	4903:37	4903:37	21	uint64
LEAF_NODE	4903:37	4903:37	22	uint64
LEAF_NODE	4903:43	4903:43	20	)
LEAF_NODE	4903:44	4903:44	19	)
LEAF_NODE	4903:45	4903:45	18	||
EXPR	4903:47	4903:63	18	( m > tif -> tif_size )
LEAF_NODE	4903:47	4903:47	19	(
FIELD	4903:48	4903:48	19	m
LEAF_NODE	4903:48	4903:48	20	m
REL_OPERATOR	4903:49	4903:49	19	>
LEAF_NODE	4903:49	4903:49	20	>
FIELD	4903:50	4903:55	19	tif -> tif_size
LEAF_NODE	4903:50	4903:50	20	tif
LEAF_NODE	4903:53	4903:53	20	->
LEAF_NODE	4903:55	4903:55	20	tif_size
LEAF_NODE	4903:63	4903:63	19	)
LEAF_NODE	4903:64	4903:64	13	)
STATEMENTS	4904:5	4904:5	13	
EXPR_STATEMENT	4904:5	4904:20	14	* nextdiroff = 0 ;
EXPR	4904:5	4904:5	15	* nextdiroff = 0
ASSIGN	4904:5	4904:19	16	* nextdiroff = 0
LVAL	4904:5	4904:5	17	* nextdiroff
UNARY_EXPR	4904:5	4904:6	18	* nextdiroff
UNARY_OPERATOR	4904:5	4904:5	19	*
LEAF_NODE	4904:5	4904:5	20	*
FIELD	4904:6	4904:6	19	nextdiroff
LEAF_NODE	4904:6	4904:6	20	nextdiroff
ASSIGN_OP	4904:17	4904:17	17	=
LEAF_NODE	4904:17	4904:17	18	=
RVAL	4904:19	4904:19	17	0
FIELD	4904:19	4904:19	18	0
LEAF_NODE	4904:19	4904:19	19	0
LEAF_NODE	4904:20	4904:20	15	;
SELECTION	4905:4	4906:5	12	
KEYWORD	4905:4	4905:4	13	else
LEAF_NODE	4905:4	4905:4	14	else
STATEMENTS	4906:5	4906:5	13	
EXPR_STATEMENT	4906:5	4907:26	14	_TIFFmemcpy ( nextdiroff , tif -> tif_base + off , sizeof ( uint64 ) ) ;
EXPR	4906:5	4906:5	15	_TIFFmemcpy ( nextdiroff , tif -> tif_base + off , sizeof ( uint64 ) )
FUNCTION_CALL	4906:5	4907:25	16	_TIFFmemcpy ( nextdiroff , tif -> tif_base + off , sizeof ( uint64 ) )
CALLEE	4906:5	4906:5	17	_TIFFmemcpy
LEAF_NODE	4906:5	4906:5	18	_TIFFmemcpy
LEAF_NODE	4906:16	4906:16	17	(
ARGUMENT	4906:17	4906:17	17	nextdiroff
FIELD	4906:17	4906:17	18	nextdiroff
LEAF_NODE	4906:17	4906:17	19	nextdiroff
LEAF_NODE	4906:27	4906:27	17	,
ARGUMENT	4906:29	4906:45	17	tif -> tif_base + off
FIELD	4906:29	4906:34	18	tif -> tif_base
LEAF_NODE	4906:29	4906:29	19	tif
LEAF_NODE	4906:32	4906:32	19	->
LEAF_NODE	4906:34	4906:34	19	tif_base
LEAF_NODE	4906:43	4906:43	18	+
FIELD	4906:45	4906:45	18	off
LEAF_NODE	4906:45	4906:45	19	off
LEAF_NODE	4906:48	4906:48	17	,
ARGUMENT	4907:10	4907:10	17	sizeof ( uint64 )
FUNCTION_CALL	4907:10	4907:24	18	sizeof ( uint64 )
CALLEE	4907:10	4907:10	19	sizeof
LEAF_NODE	4907:10	4907:10	20	sizeof
LEAF_NODE	4907:17	4907:17	19	(
ARGUMENT	4907:18	4907:18	19	uint64
FIELD	4907:18	4907:18	20	uint64
LEAF_NODE	4907:18	4907:18	21	uint64
LEAF_NODE	4907:24	4907:24	19	)
LEAF_NODE	4907:25	4907:25	17	)
LEAF_NODE	4907:26	4907:26	15	;
SELECTION	4908:4	4909:5	12	
KEYWORD	4908:4	4908:4	13	if
LEAF_NODE	4908:4	4908:4	14	if
LEAF_NODE	4908:7	4908:7	13	(
CONDITION	4908:8	4908:8	13	tif -> tif_flags & TIFF_SWAB
EXPR	4908:8	4908:23	14	tif -> tif_flags & TIFF_SWAB
FIELD	4908:8	4908:13	15	tif -> tif_flags
LEAF_NODE	4908:8	4908:8	16	tif
LEAF_NODE	4908:11	4908:11	16	->
LEAF_NODE	4908:13	4908:13	16	tif_flags
LEAF_NODE	4908:22	4908:22	15	&
FIELD	4908:23	4908:23	15	TIFF_SWAB
LEAF_NODE	4908:23	4908:23	16	TIFF_SWAB
LEAF_NODE	4908:32	4908:32	13	)
STATEMENTS	4909:5	4909:5	13	
EXPR_STATEMENT	4909:5	4909:30	14	TIFFSwabLong8 ( nextdiroff ) ;
EXPR	4909:5	4909:5	15	TIFFSwabLong8 ( nextdiroff )
FUNCTION_CALL	4909:5	4909:29	16	TIFFSwabLong8 ( nextdiroff )
CALLEE	4909:5	4909:5	17	TIFFSwabLong8
LEAF_NODE	4909:5	4909:5	18	TIFFSwabLong8
LEAF_NODE	4909:18	4909:18	17	(
ARGUMENT	4909:19	4909:19	17	nextdiroff
FIELD	4909:19	4909:19	18	nextdiroff
LEAF_NODE	4909:19	4909:19	19	nextdiroff
LEAF_NODE	4909:29	4909:29	17	)
LEAF_NODE	4909:30	4909:30	15	;
LEAF_NODE	4910:3	4910:3	11	}
LEAF_NODE	4911:2	4911:2	8	}
LEAF_NODE	4912:1	4912:1	5	}
EXPR_STATEMENT	4913:1	4915:31	3	dir = ( TIFFDirEntry * ) _TIFFCheckMalloc ( tif , dircount16 , sizeof ( TIFFDirEntry ) , "to read TIFF directory" ) ;
EXPR	4913:1	4913:1	4	dir = ( TIFFDirEntry * ) _TIFFCheckMalloc ( tif , dircount16 , sizeof ( TIFFDirEntry ) , "to read TIFF directory" )
ASSIGN	4913:1	4913:7	5	dir = ( TIFFDirEntry * ) _TIFFCheckMalloc ( tif , dircount16 , sizeof ( TIFFDirEntry ) , "to read TIFF directory" )
LVAL	4913:1	4913:1	6	dir
FIELD	4913:1	4913:1	7	dir
LEAF_NODE	4913:1	4913:1	8	dir
ASSIGN_OP	4913:5	4913:5	6	=
LEAF_NODE	4913:5	4913:5	7	=
RVAL	4913:7	4913:22	6	( TIFFDirEntry * ) _TIFFCheckMalloc ( tif , dircount16 , sizeof ( TIFFDirEntry ) , "to read TIFF directory" )
LEAF_NODE	4913:7	4913:7	7	(
TYPE_NAME	4913:8	4913:8	7	TIFFDirEntry
LEAF_NODE	4913:8	4913:8	8	TIFFDirEntry
LEAF_NODE	4913:20	4913:20	7	*
LEAF_NODE	4913:21	4913:21	7	)
FUNCTION_CALL	4913:22	4915:30	7	_TIFFCheckMalloc ( tif , dircount16 , sizeof ( TIFFDirEntry ) , "to read TIFF directory" )
CALLEE	4913:22	4913:22	8	_TIFFCheckMalloc
LEAF_NODE	4913:22	4913:22	9	_TIFFCheckMalloc
LEAF_NODE	4913:38	4913:38	8	(
ARGUMENT	4913:39	4913:39	8	tif
FIELD	4913:39	4913:39	9	tif
LEAF_NODE	4913:39	4913:39	10	tif
LEAF_NODE	4913:42	4913:42	8	,
ARGUMENT	4913:44	4913:44	8	dircount16
FIELD	4913:44	4913:44	9	dircount16
LEAF_NODE	4913:44	4913:44	10	dircount16
LEAF_NODE	4913:54	4913:54	8	,
ARGUMENT	4914:6	4914:6	8	sizeof ( TIFFDirEntry )
FUNCTION_CALL	4914:6	4914:25	9	sizeof ( TIFFDirEntry )
CALLEE	4914:6	4914:6	10	sizeof
LEAF_NODE	4914:6	4914:6	11	sizeof
LEAF_NODE	4914:12	4914:12	10	(
ARGUMENT	4914:13	4914:13	10	TIFFDirEntry
FIELD	4914:13	4914:13	11	TIFFDirEntry
LEAF_NODE	4914:13	4914:13	12	TIFFDirEntry
LEAF_NODE	4914:25	4914:25	10	)
LEAF_NODE	4914:26	4914:26	8	,
ARGUMENT	4915:6	4915:6	8	"to read TIFF directory"
FIELD	4915:6	4915:6	9	"to read TIFF directory"
LEAF_NODE	4915:6	4915:6	10	"to read TIFF directory"
LEAF_NODE	4915:30	4915:30	8	)
LEAF_NODE	4915:31	4915:31	4	;
SELECTION	4916:1	4917:1	3	
KEYWORD	4916:1	4916:1	4	if
LEAF_NODE	4916:1	4916:1	5	if
LEAF_NODE	4916:4	4916:4	4	(
CONDITION	4916:5	4916:5	4	dir == 0
EXPR	4916:5	4916:10	5	dir == 0
FIELD	4916:5	4916:5	6	dir
LEAF_NODE	4916:5	4916:5	7	dir
EQ_OPERATOR	4916:8	4916:8	6	==
LEAF_NODE	4916:8	4916:8	7	==
FIELD	4916:10	4916:10	6	0
LEAF_NODE	4916:10	4916:10	7	0
LEAF_NODE	4916:11	4916:11	4	)
STATEMENTS	4917:1	4920:1	4	
LEAF_NODE	4917:1	4917:1	5	{
STATEMENTS	4918:2	4919:2	5	
EXPR_STATEMENT	4918:2	4918:20	6	_TIFFfree ( origdir ) ;
EXPR	4918:2	4918:2	7	_TIFFfree ( origdir )
FUNCTION_CALL	4918:2	4918:19	8	_TIFFfree ( origdir )
CALLEE	4918:2	4918:2	9	_TIFFfree
LEAF_NODE	4918:2	4918:2	10	_TIFFfree
LEAF_NODE	4918:11	4918:11	9	(
ARGUMENT	4918:12	4918:12	9	origdir
FIELD	4918:12	4918:12	10	origdir
LEAF_NODE	4918:12	4918:12	11	origdir
LEAF_NODE	4918:19	4918:19	9	)
LEAF_NODE	4918:20	4918:20	7	;
JUMP_STATEMENT	4919:2	4919:10	6	return 0 ;
KEYWORD	4919:2	4919:2	7	return
LEAF_NODE	4919:2	4919:2	8	return
DESTINATION	4919:9	4919:9	7	0
EXPR	4919:9	4919:9	8	0
FIELD	4919:9	4919:9	9	0
LEAF_NODE	4919:9	4919:9	10	0
LEAF_NODE	4919:10	4919:10	7	;
LEAF_NODE	4920:1	4920:1	5	}
EXPR_STATEMENT	4921:1	4921:19	3	ma = ( uint8 * ) origdir ;
EXPR	4921:1	4921:1	4	ma = ( uint8 * ) origdir
ASSIGN	4921:1	4921:4	5	ma = ( uint8 * ) origdir
LVAL	4921:1	4921:1	6	ma
FIELD	4921:1	4921:1	7	ma
LEAF_NODE	4921:1	4921:1	8	ma
ASSIGN_OP	4921:3	4921:3	6	=
LEAF_NODE	4921:3	4921:3	7	=
RVAL	4921:4	4921:12	6	( uint8 * ) origdir
LEAF_NODE	4921:4	4921:4	7	(
TYPE_NAME	4921:5	4921:5	7	uint8
LEAF_NODE	4921:5	4921:5	8	uint8
LEAF_NODE	4921:10	4921:10	7	*
LEAF_NODE	4921:11	4921:11	7	)
FIELD	4921:12	4921:12	7	origdir
LEAF_NODE	4921:12	4921:12	8	origdir
LEAF_NODE	4921:19	4921:19	4	;
EXPR_STATEMENT	4922:1	4922:7	3	mb = dir ;
EXPR	4922:1	4922:1	4	mb = dir
ASSIGN	4922:1	4922:4	5	mb = dir
LVAL	4922:1	4922:1	6	mb
FIELD	4922:1	4922:1	7	mb
LEAF_NODE	4922:1	4922:1	8	mb
ASSIGN_OP	4922:3	4922:3	6	=
LEAF_NODE	4922:3	4922:3	7	=
RVAL	4922:4	4922:4	6	dir
FIELD	4922:4	4922:4	7	dir
LEAF_NODE	4922:4	4922:4	8	dir
LEAF_NODE	4922:7	4922:7	4	;
ITERATION	4923:1	4924:1	3	
KEYWORD	4923:1	4923:1	4	for
LEAF_NODE	4923:1	4923:1	5	for
LEAF_NODE	4923:5	4923:5	4	(
FOR_INIT	4923:6	4923:9	4	n = 0 ;
EXPR	4923:6	4923:6	5	n = 0
ASSIGN	4923:6	4923:8	6	n = 0
LVAL	4923:6	4923:6	7	n
FIELD	4923:6	4923:6	8	n
LEAF_NODE	4923:6	4923:6	9	n
ASSIGN_OP	4923:7	4923:7	7	=
LEAF_NODE	4923:7	4923:7	8	=
RVAL	4923:8	4923:8	7	0
FIELD	4923:8	4923:8	8	0
LEAF_NODE	4923:8	4923:8	9	0
LEAF_NODE	4923:9	4923:9	5	;
CONDITION	4923:11	4923:11	4	n < dircount16
EXPR	4923:11	4923:13	5	n < dircount16
FIELD	4923:11	4923:11	6	n
LEAF_NODE	4923:11	4923:11	7	n
REL_OPERATOR	4923:12	4923:12	6	<
LEAF_NODE	4923:12	4923:12	7	<
FIELD	4923:13	4923:13	6	dircount16
LEAF_NODE	4923:13	4923:13	7	dircount16
LEAF_NODE	4923:23	4923:23	4	;
FOR_EXPR	4923:25	4923:25	4	n ++
EXPR	4923:25	4923:25	5	n ++
FIELD	4923:25	4923:26	6	n ++
LEAF_NODE	4923:25	4923:25	7	n
LEAF_NODE	4923:26	4923:26	7	++
LEAF_NODE	4923:28	4923:28	4	)
STATEMENTS	4924:1	4954:1	4	
LEAF_NODE	4924:1	4924:1	5	{
STATEMENTS	4925:2	4953:2	5	
EXPR_STATEMENT	4925:2	4925:25	6	mb -> tdir_ignore = FALSE ;
EXPR	4925:2	4925:2	7	mb -> tdir_ignore = FALSE
ASSIGN	4925:2	4925:20	8	mb -> tdir_ignore = FALSE
LVAL	4925:2	4925:2	9	mb -> tdir_ignore
FIELD	4925:2	4925:6	10	mb -> tdir_ignore
LEAF_NODE	4925:2	4925:2	11	mb
LEAF_NODE	4925:4	4925:4	11	->
LEAF_NODE	4925:6	4925:6	11	tdir_ignore
ASSIGN_OP	4925:18	4925:18	9	=
LEAF_NODE	4925:18	4925:18	10	=
RVAL	4925:20	4925:20	9	FALSE
FIELD	4925:20	4925:20	10	FALSE
LEAF_NODE	4925:20	4925:20	11	FALSE
LEAF_NODE	4925:25	4925:25	7	;
SELECTION	4926:2	4927:3	6	
KEYWORD	4926:2	4926:2	7	if
LEAF_NODE	4926:2	4926:2	8	if
LEAF_NODE	4926:5	4926:5	7	(
CONDITION	4926:6	4926:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	4926:6	4926:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	4926:6	4926:11	9	tif -> tif_flags
LEAF_NODE	4926:6	4926:6	10	tif
LEAF_NODE	4926:9	4926:9	10	->
LEAF_NODE	4926:11	4926:11	10	tif_flags
LEAF_NODE	4926:20	4926:20	9	&
FIELD	4926:21	4926:21	9	TIFF_SWAB
LEAF_NODE	4926:21	4926:21	10	TIFF_SWAB
LEAF_NODE	4926:30	4926:30	7	)
STATEMENTS	4927:3	4927:3	7	
EXPR_STATEMENT	4927:3	4927:29	8	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	4927:3	4927:3	9	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	4927:3	4927:28	10	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	4927:3	4927:3	11	TIFFSwabShort
LEAF_NODE	4927:3	4927:3	12	TIFFSwabShort
LEAF_NODE	4927:16	4927:16	11	(
ARGUMENT	4927:17	4927:26	11	( uint16 * ) ma
LEAF_NODE	4927:17	4927:17	12	(
TYPE_NAME	4927:18	4927:18	12	uint16
LEAF_NODE	4927:18	4927:18	13	uint16
LEAF_NODE	4927:24	4927:24	12	*
LEAF_NODE	4927:25	4927:25	12	)
FIELD	4927:26	4927:26	12	ma
LEAF_NODE	4927:26	4927:26	13	ma
LEAF_NODE	4927:28	4927:28	11	)
LEAF_NODE	4927:29	4927:29	9	;
LEAF_NODE	4928:2	4928:2	6	mb
LEAF_NODE	4928:4	4928:4	6	->
LEAF_NODE	4928:6	4928:6	6	tdir_tag
LEAF_NODE	4928:14	4928:14	6	=
LEAF_NODE	4928:15	4928:15	6	*
EXPR_STATEMENT	4928:16	4928:27	6	( uint16 * ) ma ;
EXPR	4928:16	4928:25	7	( uint16 * ) ma
LEAF_NODE	4928:16	4928:16	8	(
TYPE_NAME	4928:17	4928:17	8	uint16
LEAF_NODE	4928:17	4928:17	9	uint16
LEAF_NODE	4928:23	4928:23	8	*
LEAF_NODE	4928:24	4928:24	8	)
FIELD	4928:25	4928:25	8	ma
LEAF_NODE	4928:25	4928:25	9	ma
LEAF_NODE	4928:27	4928:27	7	;
EXPR_STATEMENT	4929:2	4929:20	6	ma += sizeof ( uint16 ) ;
EXPR	4929:2	4929:2	7	ma += sizeof ( uint16 )
ASSIGN	4929:2	4929:6	8	ma += sizeof ( uint16 )
LVAL	4929:2	4929:2	9	ma
FIELD	4929:2	4929:2	10	ma
LEAF_NODE	4929:2	4929:2	11	ma
ASSIGN_OP	4929:4	4929:4	9	+=
LEAF_NODE	4929:4	4929:4	10	+=
RVAL	4929:6	4929:6	9	sizeof ( uint16 )
FUNCTION_CALL	4929:6	4929:19	10	sizeof ( uint16 )
CALLEE	4929:6	4929:6	11	sizeof
LEAF_NODE	4929:6	4929:6	12	sizeof
LEAF_NODE	4929:12	4929:12	11	(
ARGUMENT	4929:13	4929:13	11	uint16
FIELD	4929:13	4929:13	12	uint16
LEAF_NODE	4929:13	4929:13	13	uint16
LEAF_NODE	4929:19	4929:19	11	)
LEAF_NODE	4929:20	4929:20	7	;
SELECTION	4930:2	4931:3	6	
KEYWORD	4930:2	4930:2	7	if
LEAF_NODE	4930:2	4930:2	8	if
LEAF_NODE	4930:5	4930:5	7	(
CONDITION	4930:6	4930:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	4930:6	4930:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	4930:6	4930:11	9	tif -> tif_flags
LEAF_NODE	4930:6	4930:6	10	tif
LEAF_NODE	4930:9	4930:9	10	->
LEAF_NODE	4930:11	4930:11	10	tif_flags
LEAF_NODE	4930:20	4930:20	9	&
FIELD	4930:21	4930:21	9	TIFF_SWAB
LEAF_NODE	4930:21	4930:21	10	TIFF_SWAB
LEAF_NODE	4930:30	4930:30	7	)
STATEMENTS	4931:3	4931:3	7	
EXPR_STATEMENT	4931:3	4931:29	8	TIFFSwabShort ( ( uint16 * ) ma ) ;
EXPR	4931:3	4931:3	9	TIFFSwabShort ( ( uint16 * ) ma )
FUNCTION_CALL	4931:3	4931:28	10	TIFFSwabShort ( ( uint16 * ) ma )
CALLEE	4931:3	4931:3	11	TIFFSwabShort
LEAF_NODE	4931:3	4931:3	12	TIFFSwabShort
LEAF_NODE	4931:16	4931:16	11	(
ARGUMENT	4931:17	4931:26	11	( uint16 * ) ma
LEAF_NODE	4931:17	4931:17	12	(
TYPE_NAME	4931:18	4931:18	12	uint16
LEAF_NODE	4931:18	4931:18	13	uint16
LEAF_NODE	4931:24	4931:24	12	*
LEAF_NODE	4931:25	4931:25	12	)
FIELD	4931:26	4931:26	12	ma
LEAF_NODE	4931:26	4931:26	13	ma
LEAF_NODE	4931:28	4931:28	11	)
LEAF_NODE	4931:29	4931:29	9	;
LEAF_NODE	4932:2	4932:2	6	mb
LEAF_NODE	4932:4	4932:4	6	->
LEAF_NODE	4932:6	4932:6	6	tdir_type
LEAF_NODE	4932:15	4932:15	6	=
LEAF_NODE	4932:16	4932:16	6	*
EXPR_STATEMENT	4932:17	4932:28	6	( uint16 * ) ma ;
EXPR	4932:17	4932:26	7	( uint16 * ) ma
LEAF_NODE	4932:17	4932:17	8	(
TYPE_NAME	4932:18	4932:18	8	uint16
LEAF_NODE	4932:18	4932:18	9	uint16
LEAF_NODE	4932:24	4932:24	8	*
LEAF_NODE	4932:25	4932:25	8	)
FIELD	4932:26	4932:26	8	ma
LEAF_NODE	4932:26	4932:26	9	ma
LEAF_NODE	4932:28	4932:28	7	;
EXPR_STATEMENT	4933:2	4933:20	6	ma += sizeof ( uint16 ) ;
EXPR	4933:2	4933:2	7	ma += sizeof ( uint16 )
ASSIGN	4933:2	4933:6	8	ma += sizeof ( uint16 )
LVAL	4933:2	4933:2	9	ma
FIELD	4933:2	4933:2	10	ma
LEAF_NODE	4933:2	4933:2	11	ma
ASSIGN_OP	4933:4	4933:4	9	+=
LEAF_NODE	4933:4	4933:4	10	+=
RVAL	4933:6	4933:6	9	sizeof ( uint16 )
FUNCTION_CALL	4933:6	4933:19	10	sizeof ( uint16 )
CALLEE	4933:6	4933:6	11	sizeof
LEAF_NODE	4933:6	4933:6	12	sizeof
LEAF_NODE	4933:12	4933:12	11	(
ARGUMENT	4933:13	4933:13	11	uint16
FIELD	4933:13	4933:13	12	uint16
LEAF_NODE	4933:13	4933:13	13	uint16
LEAF_NODE	4933:19	4933:19	11	)
LEAF_NODE	4933:20	4933:20	7	;
SELECTION	4934:2	4935:2	6	
KEYWORD	4934:2	4934:2	7	if
LEAF_NODE	4934:2	4934:2	8	if
LEAF_NODE	4934:5	4934:5	7	(
CONDITION	4934:6	4934:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	4934:6	4934:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	4934:6	4934:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	4934:6	4934:6	10	!
LEAF_NODE	4934:6	4934:6	11	!
LEAF_NODE	4934:7	4934:7	10	(
FIELD	4934:8	4934:13	10	tif -> tif_flags
LEAF_NODE	4934:8	4934:8	11	tif
LEAF_NODE	4934:11	4934:11	11	->
LEAF_NODE	4934:13	4934:13	11	tif_flags
LEAF_NODE	4934:22	4934:22	10	&
FIELD	4934:23	4934:23	10	TIFF_BIGTIFF
LEAF_NODE	4934:23	4934:23	11	TIFF_BIGTIFF
LEAF_NODE	4934:35	4934:35	10	)
LEAF_NODE	4934:36	4934:36	7	)
STATEMENTS	4935:2	4943:2	7	
LEAF_NODE	4935:2	4935:2	8	{
STATEMENTS	4936:3	4942:3	8	
SELECTION	4936:3	4937:4	9	
KEYWORD	4936:3	4936:3	10	if
LEAF_NODE	4936:3	4936:3	11	if
LEAF_NODE	4936:6	4936:6	10	(
CONDITION	4936:7	4936:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	4936:7	4936:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	4936:7	4936:12	12	tif -> tif_flags
LEAF_NODE	4936:7	4936:7	13	tif
LEAF_NODE	4936:10	4936:10	13	->
LEAF_NODE	4936:12	4936:12	13	tif_flags
LEAF_NODE	4936:21	4936:21	12	&
FIELD	4936:22	4936:22	12	TIFF_SWAB
LEAF_NODE	4936:22	4936:22	13	TIFF_SWAB
LEAF_NODE	4936:31	4936:31	10	)
STATEMENTS	4937:4	4937:4	10	
EXPR_STATEMENT	4937:4	4937:29	11	TIFFSwabLong ( ( uint32 * ) ma ) ;
EXPR	4937:4	4937:4	12	TIFFSwabLong ( ( uint32 * ) ma )
FUNCTION_CALL	4937:4	4937:28	13	TIFFSwabLong ( ( uint32 * ) ma )
CALLEE	4937:4	4937:4	14	TIFFSwabLong
LEAF_NODE	4937:4	4937:4	15	TIFFSwabLong
LEAF_NODE	4937:16	4937:16	14	(
ARGUMENT	4937:17	4937:26	14	( uint32 * ) ma
LEAF_NODE	4937:17	4937:17	15	(
TYPE_NAME	4937:18	4937:18	15	uint32
LEAF_NODE	4937:18	4937:18	16	uint32
LEAF_NODE	4937:24	4937:24	15	*
LEAF_NODE	4937:25	4937:25	15	)
FIELD	4937:26	4937:26	15	ma
LEAF_NODE	4937:26	4937:26	16	ma
LEAF_NODE	4937:28	4937:28	14	)
LEAF_NODE	4937:29	4937:29	12	;
LEAF_NODE	4938:3	4938:3	9	mb
LEAF_NODE	4938:5	4938:5	9	->
LEAF_NODE	4938:7	4938:7	9	tdir_count
LEAF_NODE	4938:17	4938:17	9	=
LEAF_NODE	4938:18	4938:18	9	(
LEAF_NODE	4938:19	4938:19	9	uint64
LEAF_NODE	4938:25	4938:25	9	)
LEAF_NODE	4938:26	4938:26	9	(
LEAF_NODE	4938:27	4938:27	9	*
LEAF_NODE	4938:28	4938:28	9	(
LEAF_NODE	4938:29	4938:29	9	uint32
LEAF_NODE	4938:35	4938:35	9	*
LEAF_NODE	4938:36	4938:36	9	)
LEAF_NODE	4938:37	4938:37	9	ma
LEAF_NODE	4938:39	4938:39	9	)
LEAF_NODE	4938:40	4938:40	9	;
EXPR_STATEMENT	4939:3	4939:21	9	ma += sizeof ( uint32 ) ;
EXPR	4939:3	4939:3	10	ma += sizeof ( uint32 )
ASSIGN	4939:3	4939:7	11	ma += sizeof ( uint32 )
LVAL	4939:3	4939:3	12	ma
FIELD	4939:3	4939:3	13	ma
LEAF_NODE	4939:3	4939:3	14	ma
ASSIGN_OP	4939:5	4939:5	12	+=
LEAF_NODE	4939:5	4939:5	13	+=
RVAL	4939:7	4939:7	12	sizeof ( uint32 )
FUNCTION_CALL	4939:7	4939:20	13	sizeof ( uint32 )
CALLEE	4939:7	4939:7	14	sizeof
LEAF_NODE	4939:7	4939:7	15	sizeof
LEAF_NODE	4939:13	4939:13	14	(
ARGUMENT	4939:14	4939:14	14	uint32
FIELD	4939:14	4939:14	15	uint32
LEAF_NODE	4939:14	4939:14	16	uint32
LEAF_NODE	4939:20	4939:20	14	)
LEAF_NODE	4939:21	4939:21	10	;
EXPR_STATEMENT	4940:3	4940:31	9	mb -> tdir_offset . toff_long8 = 0 ;
EXPR	4940:3	4940:3	10	mb -> tdir_offset . toff_long8 = 0
ASSIGN	4940:3	4940:30	11	mb -> tdir_offset . toff_long8 = 0
LVAL	4940:3	4940:3	12	mb -> tdir_offset . toff_long8
FIELD	4940:3	4940:19	13	mb -> tdir_offset . toff_long8
LEAF_NODE	4940:3	4940:3	14	mb
LEAF_NODE	4940:5	4940:5	14	->
LEAF_NODE	4940:7	4940:7	14	tdir_offset
LEAF_NODE	4940:18	4940:18	14	.
LEAF_NODE	4940:19	4940:19	14	toff_long8
ASSIGN_OP	4940:29	4940:29	12	=
LEAF_NODE	4940:29	4940:29	13	=
RVAL	4940:30	4940:30	12	0
FIELD	4940:30	4940:30	13	0
LEAF_NODE	4940:30	4940:30	14	0
LEAF_NODE	4940:31	4940:31	10	;
LEAF_NODE	4941:3	4941:3	9	*
LEAF_NODE	4941:4	4941:4	9	(
LEAF_NODE	4941:5	4941:5	9	uint32
LEAF_NODE	4941:11	4941:11	9	*
LEAF_NODE	4941:12	4941:12	9	)
LEAF_NODE	4941:13	4941:13	9	(
LEAF_NODE	4941:14	4941:14	9	&
LEAF_NODE	4941:15	4941:15	9	mb
LEAF_NODE	4941:17	4941:17	9	->
LEAF_NODE	4941:19	4941:19	9	tdir_offset
LEAF_NODE	4941:30	4941:30	9	)
LEAF_NODE	4941:31	4941:31	9	=
LEAF_NODE	4941:32	4941:32	9	*
EXPR_STATEMENT	4941:33	4941:44	9	( uint32 * ) ma ;
EXPR	4941:33	4941:42	10	( uint32 * ) ma
LEAF_NODE	4941:33	4941:33	11	(
TYPE_NAME	4941:34	4941:34	11	uint32
LEAF_NODE	4941:34	4941:34	12	uint32
LEAF_NODE	4941:40	4941:40	11	*
LEAF_NODE	4941:41	4941:41	11	)
FIELD	4941:42	4941:42	11	ma
LEAF_NODE	4941:42	4941:42	12	ma
LEAF_NODE	4941:44	4941:44	10	;
EXPR_STATEMENT	4942:3	4942:21	9	ma += sizeof ( uint32 ) ;
EXPR	4942:3	4942:3	10	ma += sizeof ( uint32 )
ASSIGN	4942:3	4942:7	11	ma += sizeof ( uint32 )
LVAL	4942:3	4942:3	12	ma
FIELD	4942:3	4942:3	13	ma
LEAF_NODE	4942:3	4942:3	14	ma
ASSIGN_OP	4942:5	4942:5	12	+=
LEAF_NODE	4942:5	4942:5	13	+=
RVAL	4942:7	4942:7	12	sizeof ( uint32 )
FUNCTION_CALL	4942:7	4942:20	13	sizeof ( uint32 )
CALLEE	4942:7	4942:7	14	sizeof
LEAF_NODE	4942:7	4942:7	15	sizeof
LEAF_NODE	4942:13	4942:13	14	(
ARGUMENT	4942:14	4942:14	14	uint32
FIELD	4942:14	4942:14	15	uint32
LEAF_NODE	4942:14	4942:14	16	uint32
LEAF_NODE	4942:20	4942:20	14	)
LEAF_NODE	4942:21	4942:21	10	;
LEAF_NODE	4943:2	4943:2	8	}
SELECTION	4944:2	4945:2	6	
KEYWORD	4944:2	4944:2	7	else
LEAF_NODE	4944:2	4944:2	8	else
STATEMENTS	4945:2	4952:2	7	
LEAF_NODE	4945:2	4945:2	8	{
STATEMENTS	4946:3	4951:3	8	
SELECTION	4946:3	4947:4	9	
KEYWORD	4946:3	4946:3	10	if
LEAF_NODE	4946:3	4946:3	11	if
LEAF_NODE	4946:6	4946:6	10	(
CONDITION	4946:7	4946:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	4946:7	4946:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	4946:7	4946:12	12	tif -> tif_flags
LEAF_NODE	4946:7	4946:7	13	tif
LEAF_NODE	4946:10	4946:10	13	->
LEAF_NODE	4946:12	4946:12	13	tif_flags
LEAF_NODE	4946:21	4946:21	12	&
FIELD	4946:22	4946:22	12	TIFF_SWAB
LEAF_NODE	4946:22	4946:22	13	TIFF_SWAB
LEAF_NODE	4946:31	4946:31	10	)
STATEMENTS	4947:4	4947:4	10	
EXPR_STATEMENT	4947:4	4947:30	11	TIFFSwabLong8 ( ( uint64 * ) ma ) ;
EXPR	4947:4	4947:4	12	TIFFSwabLong8 ( ( uint64 * ) ma )
FUNCTION_CALL	4947:4	4947:29	13	TIFFSwabLong8 ( ( uint64 * ) ma )
CALLEE	4947:4	4947:4	14	TIFFSwabLong8
LEAF_NODE	4947:4	4947:4	15	TIFFSwabLong8
LEAF_NODE	4947:17	4947:17	14	(
ARGUMENT	4947:18	4947:27	14	( uint64 * ) ma
LEAF_NODE	4947:18	4947:18	15	(
TYPE_NAME	4947:19	4947:19	15	uint64
LEAF_NODE	4947:19	4947:19	16	uint64
LEAF_NODE	4947:25	4947:25	15	*
LEAF_NODE	4947:26	4947:26	15	)
FIELD	4947:27	4947:27	15	ma
LEAF_NODE	4947:27	4947:27	16	ma
LEAF_NODE	4947:29	4947:29	14	)
LEAF_NODE	4947:30	4947:30	12	;
EXPR_STATEMENT	4948:24	4948:57	9	mb -> tdir_count = TIFFReadUInt64 ( ma ) ;
EXPR	4948:24	4948:24	10	mb -> tdir_count = TIFFReadUInt64 ( ma )
ASSIGN	4948:24	4948:39	11	mb -> tdir_count = TIFFReadUInt64 ( ma )
LVAL	4948:24	4948:24	12	mb -> tdir_count
FIELD	4948:24	4948:28	13	mb -> tdir_count
LEAF_NODE	4948:24	4948:24	14	mb
LEAF_NODE	4948:26	4948:26	14	->
LEAF_NODE	4948:28	4948:28	14	tdir_count
ASSIGN_OP	4948:38	4948:38	12	=
LEAF_NODE	4948:38	4948:38	13	=
RVAL	4948:39	4948:39	12	TIFFReadUInt64 ( ma )
FUNCTION_CALL	4948:39	4948:56	13	TIFFReadUInt64 ( ma )
CALLEE	4948:39	4948:39	14	TIFFReadUInt64
LEAF_NODE	4948:39	4948:39	15	TIFFReadUInt64
LEAF_NODE	4948:53	4948:53	14	(
ARGUMENT	4948:54	4948:54	14	ma
FIELD	4948:54	4948:54	15	ma
LEAF_NODE	4948:54	4948:54	16	ma
LEAF_NODE	4948:56	4948:56	14	)
LEAF_NODE	4948:57	4948:57	10	;
EXPR_STATEMENT	4949:3	4949:21	9	ma += sizeof ( uint64 ) ;
EXPR	4949:3	4949:3	10	ma += sizeof ( uint64 )
ASSIGN	4949:3	4949:7	11	ma += sizeof ( uint64 )
LVAL	4949:3	4949:3	12	ma
FIELD	4949:3	4949:3	13	ma
LEAF_NODE	4949:3	4949:3	14	ma
ASSIGN_OP	4949:5	4949:5	12	+=
LEAF_NODE	4949:5	4949:5	13	+=
RVAL	4949:7	4949:7	12	sizeof ( uint64 )
FUNCTION_CALL	4949:7	4949:20	13	sizeof ( uint64 )
CALLEE	4949:7	4949:7	14	sizeof
LEAF_NODE	4949:7	4949:7	15	sizeof
LEAF_NODE	4949:13	4949:13	14	(
ARGUMENT	4949:14	4949:14	14	uint64
FIELD	4949:14	4949:14	15	uint64
LEAF_NODE	4949:14	4949:14	16	uint64
LEAF_NODE	4949:20	4949:20	14	)
LEAF_NODE	4949:21	4949:21	10	;
EXPR_STATEMENT	4950:3	4950:48	9	mb -> tdir_offset . toff_long8 = TIFFReadUInt64 ( ma ) ;
EXPR	4950:3	4950:3	10	mb -> tdir_offset . toff_long8 = TIFFReadUInt64 ( ma )
ASSIGN	4950:3	4950:30	11	mb -> tdir_offset . toff_long8 = TIFFReadUInt64 ( ma )
LVAL	4950:3	4950:3	12	mb -> tdir_offset . toff_long8
FIELD	4950:3	4950:19	13	mb -> tdir_offset . toff_long8
LEAF_NODE	4950:3	4950:3	14	mb
LEAF_NODE	4950:5	4950:5	14	->
LEAF_NODE	4950:7	4950:7	14	tdir_offset
LEAF_NODE	4950:18	4950:18	14	.
LEAF_NODE	4950:19	4950:19	14	toff_long8
ASSIGN_OP	4950:29	4950:29	12	=
LEAF_NODE	4950:29	4950:29	13	=
RVAL	4950:30	4950:30	12	TIFFReadUInt64 ( ma )
FUNCTION_CALL	4950:30	4950:47	13	TIFFReadUInt64 ( ma )
CALLEE	4950:30	4950:30	14	TIFFReadUInt64
LEAF_NODE	4950:30	4950:30	15	TIFFReadUInt64
LEAF_NODE	4950:44	4950:44	14	(
ARGUMENT	4950:45	4950:45	14	ma
FIELD	4950:45	4950:45	15	ma
LEAF_NODE	4950:45	4950:45	16	ma
LEAF_NODE	4950:47	4950:47	14	)
LEAF_NODE	4950:48	4950:48	10	;
EXPR_STATEMENT	4951:3	4951:21	9	ma += sizeof ( uint64 ) ;
EXPR	4951:3	4951:3	10	ma += sizeof ( uint64 )
ASSIGN	4951:3	4951:7	11	ma += sizeof ( uint64 )
LVAL	4951:3	4951:3	12	ma
FIELD	4951:3	4951:3	13	ma
LEAF_NODE	4951:3	4951:3	14	ma
ASSIGN_OP	4951:5	4951:5	12	+=
LEAF_NODE	4951:5	4951:5	13	+=
RVAL	4951:7	4951:7	12	sizeof ( uint64 )
FUNCTION_CALL	4951:7	4951:20	13	sizeof ( uint64 )
CALLEE	4951:7	4951:7	14	sizeof
LEAF_NODE	4951:7	4951:7	15	sizeof
LEAF_NODE	4951:13	4951:13	14	(
ARGUMENT	4951:14	4951:14	14	uint64
FIELD	4951:14	4951:14	15	uint64
LEAF_NODE	4951:14	4951:14	16	uint64
LEAF_NODE	4951:20	4951:20	14	)
LEAF_NODE	4951:21	4951:21	10	;
LEAF_NODE	4952:2	4952:2	8	}
EXPR_STATEMENT	4953:2	4953:6	6	mb ++ ;
EXPR	4953:2	4953:2	7	mb ++
FIELD	4953:2	4953:4	8	mb ++
LEAF_NODE	4953:2	4953:2	9	mb
LEAF_NODE	4953:4	4953:4	9	++
LEAF_NODE	4953:6	4953:6	7	;
LEAF_NODE	4954:1	4954:1	5	}
EXPR_STATEMENT	4955:1	4955:19	3	_TIFFfree ( origdir ) ;
EXPR	4955:1	4955:1	4	_TIFFfree ( origdir )
FUNCTION_CALL	4955:1	4955:18	5	_TIFFfree ( origdir )
CALLEE	4955:1	4955:1	6	_TIFFfree
LEAF_NODE	4955:1	4955:1	7	_TIFFfree
LEAF_NODE	4955:10	4955:10	6	(
ARGUMENT	4955:11	4955:11	6	origdir
FIELD	4955:11	4955:11	7	origdir
LEAF_NODE	4955:11	4955:11	8	origdir
LEAF_NODE	4955:18	4955:18	6	)
LEAF_NODE	4955:19	4955:19	4	;
EXPR_STATEMENT	4956:1	4956:12	3	* pdir = dir ;
EXPR	4956:1	4956:1	4	* pdir = dir
ASSIGN	4956:1	4956:9	5	* pdir = dir
LVAL	4956:1	4956:1	6	* pdir
UNARY_EXPR	4956:1	4956:2	7	* pdir
UNARY_OPERATOR	4956:1	4956:1	8	*
LEAF_NODE	4956:1	4956:1	9	*
FIELD	4956:2	4956:2	8	pdir
LEAF_NODE	4956:2	4956:2	9	pdir
ASSIGN_OP	4956:7	4956:7	6	=
LEAF_NODE	4956:7	4956:7	7	=
RVAL	4956:9	4956:9	6	dir
FIELD	4956:9	4956:9	7	dir
LEAF_NODE	4956:9	4956:9	8	dir
LEAF_NODE	4956:12	4956:12	4	;
JUMP_STATEMENT	4957:1	4957:18	3	return dircount16 ;
KEYWORD	4957:1	4957:1	4	return
LEAF_NODE	4957:1	4957:1	5	return
DESTINATION	4957:8	4957:8	4	dircount16
EXPR	4957:8	4957:8	5	dircount16
FIELD	4957:8	4957:8	6	dircount16
LEAF_NODE	4957:8	4957:8	7	dircount16
LEAF_NODE	4957:18	4957:18	4	;
LEAF_NODE	4958:0	4958:0	2	}
FUNCTION_DEF	4963:0	5642:0	1	
RETURN_TYPE	4963:0	4963:7	2	static int
LEAF_NODE	4963:0	4963:0	3	static
TYPE_NAME	4963:7	4963:7	3	int
LEAF_NODE	4963:7	4963:7	4	int
FUNCTION_NAME	4964:0	4964:0	2	TIFFFetchNormalTag
LEAF_NODE	4964:0	4964:0	3	TIFFFetchNormalTag
PARAMETER_LIST	4964:18	4964:59	2	( TIFF * tif , TIFFDirEntry * dp , int recover )
LEAF_NODE	4964:18	4964:18	3	(
PARAMETER_DECL	4964:19	4964:25	3	TIFF * tif
TYPE	4964:19	4964:23	4	TIFF *
TYPE_NAME	4964:19	4964:19	5	TIFF
LEAF_NODE	4964:19	4964:19	6	TIFF
POINTER	4964:23	4964:23	5	*
LEAF_NODE	4964:23	4964:23	6	*
NAME	4964:25	4964:25	4	tif
LEAF_NODE	4964:25	4964:25	5	tif
LEAF_NODE	4964:28	4964:28	3	,
PARAMETER_DECL	4964:30	4964:44	3	TIFFDirEntry * dp
TYPE	4964:30	4964:42	4	TIFFDirEntry *
TYPE_NAME	4964:30	4964:30	5	TIFFDirEntry
LEAF_NODE	4964:30	4964:30	6	TIFFDirEntry
POINTER	4964:42	4964:42	5	*
LEAF_NODE	4964:42	4964:42	6	*
NAME	4964:44	4964:44	4	dp
LEAF_NODE	4964:44	4964:44	5	dp
LEAF_NODE	4964:46	4964:46	3	,
PARAMETER_DECL	4964:48	4964:52	3	int recover
TYPE	4964:48	4964:48	4	int
TYPE_NAME	4964:48	4964:48	5	int
LEAF_NODE	4964:48	4964:48	6	int
NAME	4964:52	4964:52	4	recover
LEAF_NODE	4964:52	4964:52	5	recover
LEAF_NODE	4964:59	4964:59	3	)
LEAF_NODE	4965:0	4965:0	2	{
STATEMENTS	4966:1	5641:1	2	
LEAF_NODE	4966:1	4966:1	3	static
SIMPLE_DECL	4966:8	4966:50	3	const char [ ] module ; module = "TIFFFetchNormalTag" ;
VAR_DECL	4966:8	4966:19	4	const char [ ] module ; module = "TIFFFetchNormalTag"
TYPE	4966:8	4966:25	5	const char [ ]
TYPE_NAME	4966:8	4966:14	6	const char
LEAF_NODE	4966:8	4966:8	7	const
LEAF_NODE	4966:14	4966:14	7	char
TYPE_SUFFIX	4966:25	4966:26	6	[ ]
LEAF_NODE	4966:25	4966:25	7	[
LEAF_NODE	4966:26	4966:26	7	]
NAME	4966:19	4966:19	5	module
LEAF_NODE	4966:19	4966:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	4966:19	4966:19	5	module = "TIFFFetchNormalTag"
ASSIGN	4966:19	4966:30	6	module = "TIFFFetchNormalTag"
LVAL	4966:19	4966:19	7	module
NAME	4966:19	4966:19	8	module
LEAF_NODE	4966:19	4966:19	9	module
ASSIGN_OP	4966:28	4966:28	7	=
LEAF_NODE	4966:28	4966:28	8	=
RVAL	4966:30	4966:30	7	"TIFFFetchNormalTag"
FIELD	4966:30	4966:30	8	"TIFFFetchNormalTag"
LEAF_NODE	4966:30	4966:30	9	"TIFFFetchNormalTag"
LEAF_NODE	4966:50	4966:50	4	;
SIMPLE_DECL	4967:1	4967:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	4967:1	4967:26	4	enum TIFFReadDirEntryErr err
TYPE	4967:1	4967:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	4967:1	4967:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	4967:1	4967:1	7	enum
LEAF_NODE	4967:6	4967:6	7	TIFFReadDirEntryErr
NAME	4967:26	4967:26	5	err
LEAF_NODE	4967:26	4967:26	6	err
LEAF_NODE	4967:29	4967:29	4	;
SIMPLE_DECL	4968:1	4968:11	3	uint32 fii ;
VAR_DECL	4968:1	4968:8	4	uint32 fii
TYPE	4968:1	4968:1	5	uint32
TYPE_NAME	4968:1	4968:1	6	uint32
LEAF_NODE	4968:1	4968:1	7	uint32
NAME	4968:8	4968:8	5	fii
LEAF_NODE	4968:8	4968:8	6	fii
LEAF_NODE	4968:11	4968:11	4	;
SIMPLE_DECL	4969:1	4969:28	3	const TIFFField * fip ; fip = NULL ;
VAR_DECL	4969:1	4969:18	4	const TIFFField * fip ; fip = NULL
TYPE	4969:1	4969:16	5	const TIFFField *
TYPE_NAME	4969:1	4969:7	6	const TIFFField
LEAF_NODE	4969:1	4969:1	7	const
LEAF_NODE	4969:7	4969:7	7	TIFFField
POINTER	4969:16	4969:16	6	*
LEAF_NODE	4969:16	4969:16	7	*
NAME	4969:18	4969:18	5	fip
LEAF_NODE	4969:18	4969:18	6	fip
LEAF_NODE	0:0	0:0	5	;
INIT	4969:18	4969:18	5	fip = NULL
ASSIGN	4969:18	4969:24	6	fip = NULL
LVAL	4969:18	4969:18	7	fip
NAME	4969:18	4969:18	8	fip
LEAF_NODE	4969:18	4969:18	9	fip
ASSIGN_OP	4969:22	4969:22	7	=
LEAF_NODE	4969:22	4969:22	8	=
RVAL	4969:24	4969:24	7	NULL
FIELD	4969:24	4969:24	8	NULL
LEAF_NODE	4969:24	4969:24	9	NULL
LEAF_NODE	4969:28	4969:28	4	;
EXPR_STATEMENT	4970:1	4970:54	3	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii ) ;
EXPR	4970:1	4970:1	4	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
FUNCTION_CALL	4970:1	4970:53	5	TIFFReadDirectoryFindFieldInfo ( tif , dp -> tdir_tag , & fii )
CALLEE	4970:1	4970:1	6	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	4970:1	4970:1	7	TIFFReadDirectoryFindFieldInfo
LEAF_NODE	4970:31	4970:31	6	(
ARGUMENT	4970:32	4970:32	6	tif
FIELD	4970:32	4970:32	7	tif
LEAF_NODE	4970:32	4970:32	8	tif
LEAF_NODE	4970:35	4970:35	6	,
ARGUMENT	4970:36	4970:36	6	dp -> tdir_tag
FIELD	4970:36	4970:40	7	dp -> tdir_tag
LEAF_NODE	4970:36	4970:36	8	dp
LEAF_NODE	4970:38	4970:38	8	->
LEAF_NODE	4970:40	4970:40	8	tdir_tag
LEAF_NODE	4970:48	4970:48	6	,
ARGUMENT	4970:49	4970:49	6	& fii
UNARY_EXPR	4970:49	4970:50	7	& fii
UNARY_OPERATOR	4970:49	4970:49	8	&
LEAF_NODE	4970:49	4970:49	9	&
FIELD	4970:50	4970:50	8	fii
LEAF_NODE	4970:50	4970:50	9	fii
LEAF_NODE	4970:53	4970:53	6	)
LEAF_NODE	4970:54	4970:54	4	;
SELECTION	4971:8	4972:8	3	
KEYWORD	4971:8	4971:8	4	if
LEAF_NODE	4971:8	4971:8	5	if
LEAF_NODE	4971:10	4971:10	4	(
CONDITION	4971:12	4971:12	4	fii == FAILED_FII
EXPR	4971:12	4971:19	5	fii == FAILED_FII
FIELD	4971:12	4971:12	6	fii
LEAF_NODE	4971:12	4971:12	7	fii
EQ_OPERATOR	4971:16	4971:16	6	==
LEAF_NODE	4971:16	4971:16	7	==
FIELD	4971:19	4971:19	6	FAILED_FII
LEAF_NODE	4971:19	4971:19	7	FAILED_FII
LEAF_NODE	4971:30	4971:30	4	)
STATEMENTS	4972:8	4977:8	4	
LEAF_NODE	4972:8	4972:8	5	{
STATEMENTS	4973:12	4976:12	5	
EXPR_STATEMENT	4973:12	4975:38	6	TIFFErrorExt ( tif -> tif_clientdata , "TIFFFetchNormalTag" , "No definition found for tag %d" , dp -> tdir_tag ) ;
EXPR	4973:12	4973:12	7	TIFFErrorExt ( tif -> tif_clientdata , "TIFFFetchNormalTag" , "No definition found for tag %d" , dp -> tdir_tag )
FUNCTION_CALL	4973:12	4975:37	8	TIFFErrorExt ( tif -> tif_clientdata , "TIFFFetchNormalTag" , "No definition found for tag %d" , dp -> tdir_tag )
CALLEE	4973:12	4973:12	9	TIFFErrorExt
LEAF_NODE	4973:12	4973:12	10	TIFFErrorExt
LEAF_NODE	4973:24	4973:24	9	(
ARGUMENT	4973:25	4973:25	9	tif -> tif_clientdata
FIELD	4973:25	4973:30	10	tif -> tif_clientdata
LEAF_NODE	4973:25	4973:25	11	tif
LEAF_NODE	4973:28	4973:28	11	->
LEAF_NODE	4973:30	4973:30	11	tif_clientdata
LEAF_NODE	4973:44	4973:44	9	,
ARGUMENT	4973:46	4973:46	9	"TIFFFetchNormalTag"
FIELD	4973:46	4973:46	10	"TIFFFetchNormalTag"
LEAF_NODE	4973:46	4973:46	11	"TIFFFetchNormalTag"
LEAF_NODE	4973:66	4973:66	9	,
ARGUMENT	4974:25	4974:25	9	"No definition found for tag %d"
FIELD	4974:25	4974:25	10	"No definition found for tag %d"
LEAF_NODE	4974:25	4974:25	11	"No definition found for tag %d"
LEAF_NODE	4974:57	4974:57	9	,
ARGUMENT	4975:25	4975:25	9	dp -> tdir_tag
FIELD	4975:25	4975:29	10	dp -> tdir_tag
LEAF_NODE	4975:25	4975:25	11	dp
LEAF_NODE	4975:27	4975:27	11	->
LEAF_NODE	4975:29	4975:29	11	tdir_tag
LEAF_NODE	4975:37	4975:37	9	)
LEAF_NODE	4975:38	4975:38	7	;
JUMP_STATEMENT	4976:12	4976:20	6	return 0 ;
KEYWORD	4976:12	4976:12	7	return
LEAF_NODE	4976:12	4976:12	8	return
DESTINATION	4976:19	4976:19	7	0
EXPR	4976:19	4976:19	8	0
FIELD	4976:19	4976:19	9	0
LEAF_NODE	4976:19	4976:19	10	0
LEAF_NODE	4976:20	4976:20	7	;
LEAF_NODE	4977:8	4977:8	5	}
EXPR_STATEMENT	4978:1	4978:25	3	fip = tif -> tif_fields [ fii ] ;
EXPR	4978:1	4978:1	4	fip = tif -> tif_fields [ fii ]
ASSIGN	4978:1	4978:5	5	fip = tif -> tif_fields [ fii ]
LVAL	4978:1	4978:1	6	fip
FIELD	4978:1	4978:1	7	fip
LEAF_NODE	4978:1	4978:1	8	fip
ASSIGN_OP	4978:4	4978:4	6	=
LEAF_NODE	4978:4	4978:4	7	=
RVAL	4978:5	4978:5	6	tif -> tif_fields [ fii ]
FIELD	4978:5	4978:24	7	tif -> tif_fields [ fii ]
LEAF_NODE	4978:5	4978:5	8	tif
LEAF_NODE	4978:8	4978:8	8	->
LEAF_NODE	4978:10	4978:10	8	tif_fields
LEAF_NODE	4978:20	4978:20	8	[
EXPR	4978:21	4978:21	8	fii
FIELD	4978:21	4978:21	9	fii
LEAF_NODE	4978:21	4978:21	10	fii
LEAF_NODE	4978:24	4978:24	8	]
LEAF_NODE	4978:25	4978:25	4	;
EXPR_STATEMENT	4979:1	4979:20	3	assert ( fip != NULL ) ;
EXPR	4979:1	4979:1	4	assert ( fip != NULL )
FUNCTION_CALL	4979:1	4979:19	5	assert ( fip != NULL )
CALLEE	4979:1	4979:1	6	assert
LEAF_NODE	4979:1	4979:1	7	assert
LEAF_NODE	4979:7	4979:7	6	(
ARGUMENT	4979:8	4979:15	6	fip != NULL
FIELD	4979:8	4979:8	7	fip
LEAF_NODE	4979:8	4979:8	8	fip
EQ_OPERATOR	4979:12	4979:12	7	!=
LEAF_NODE	4979:12	4979:12	8	!=
FIELD	4979:15	4979:15	7	NULL
LEAF_NODE	4979:15	4979:15	8	NULL
LEAF_NODE	4979:19	4979:19	6	)
LEAF_NODE	4979:20	4979:20	4	;
EXPR_STATEMENT	4980:1	4980:47	3	assert ( fip -> set_field_type != TIFF_SETGET_OTHER ) ;
EXPR	4980:1	4980:1	4	assert ( fip -> set_field_type != TIFF_SETGET_OTHER )
FUNCTION_CALL	4980:1	4980:46	5	assert ( fip -> set_field_type != TIFF_SETGET_OTHER )
CALLEE	4980:1	4980:1	6	assert
LEAF_NODE	4980:1	4980:1	7	assert
LEAF_NODE	4980:7	4980:7	6	(
ARGUMENT	4980:8	4980:29	6	fip -> set_field_type != TIFF_SETGET_OTHER
FIELD	4980:8	4980:13	7	fip -> set_field_type
LEAF_NODE	4980:8	4980:8	8	fip
LEAF_NODE	4980:11	4980:11	8	->
LEAF_NODE	4980:13	4980:13	8	set_field_type
EQ_OPERATOR	4980:27	4980:27	7	!=
LEAF_NODE	4980:27	4980:27	8	!=
FIELD	4980:29	4980:29	7	TIFF_SETGET_OTHER
LEAF_NODE	4980:29	4980:29	8	TIFF_SETGET_OTHER
LEAF_NODE	4980:46	4980:46	6	)
LEAF_NODE	4980:47	4980:47	4	;
EXPR_STATEMENT	4981:1	4981:45	3	assert ( fip -> set_field_type != TIFF_SETGET_INT ) ;
EXPR	4981:1	4981:1	4	assert ( fip -> set_field_type != TIFF_SETGET_INT )
FUNCTION_CALL	4981:1	4981:44	5	assert ( fip -> set_field_type != TIFF_SETGET_INT )
CALLEE	4981:1	4981:1	6	assert
LEAF_NODE	4981:1	4981:1	7	assert
LEAF_NODE	4981:7	4981:7	6	(
ARGUMENT	4981:8	4981:29	6	fip -> set_field_type != TIFF_SETGET_INT
FIELD	4981:8	4981:13	7	fip -> set_field_type
LEAF_NODE	4981:8	4981:8	8	fip
LEAF_NODE	4981:11	4981:11	8	->
LEAF_NODE	4981:13	4981:13	8	set_field_type
EQ_OPERATOR	4981:27	4981:27	7	!=
LEAF_NODE	4981:27	4981:27	8	!=
FIELD	4981:29	4981:29	7	TIFF_SETGET_INT
LEAF_NODE	4981:29	4981:29	8	TIFF_SETGET_INT
LEAF_NODE	4981:44	4981:44	6	)
LEAF_NODE	4981:45	4981:45	4	;
EXPR_STATEMENT	4982:1	4982:26	3	err = TIFFReadDirEntryErrOk ;
EXPR	4982:1	4982:1	4	err = TIFFReadDirEntryErrOk
ASSIGN	4982:1	4982:5	5	err = TIFFReadDirEntryErrOk
LVAL	4982:1	4982:1	6	err
FIELD	4982:1	4982:1	7	err
LEAF_NODE	4982:1	4982:1	8	err
ASSIGN_OP	4982:4	4982:4	6	=
LEAF_NODE	4982:4	4982:4	7	=
RVAL	4982:5	4982:5	6	TIFFReadDirEntryErrOk
FIELD	4982:5	4982:5	7	TIFFReadDirEntryErrOk
LEAF_NODE	4982:5	4982:5	8	TIFFReadDirEntryErrOk
LEAF_NODE	4982:26	4982:26	4	;
SELECTION	4983:1	4984:1	3	
KEYWORD	4983:1	4983:1	4	switch
LEAF_NODE	4983:1	4983:1	5	switch
LEAF_NODE	4983:8	4983:8	4	(
CONDITION	4983:9	4983:9	4	fip -> set_field_type
EXPR	4983:9	4983:9	5	fip -> set_field_type
FIELD	4983:9	4983:14	6	fip -> set_field_type
LEAF_NODE	4983:9	4983:9	7	fip
LEAF_NODE	4983:12	4983:12	7	->
LEAF_NODE	4983:14	4983:14	7	set_field_type
LEAF_NODE	4983:28	4983:28	4	)
STATEMENTS	4984:1	5635:1	4	
LEAF_NODE	4984:1	4984:1	5	{
STATEMENTS	4985:2	5634:3	5	
LABEL	4985:2	4985:28	6	case TIFF_SETGET_UNDEFINED :
LEAF_NODE	4985:2	4985:2	7	case
LEAF_NODE	4985:7	4985:7	7	TIFF_SETGET_UNDEFINED
LEAF_NODE	4985:28	4985:28	7	:
JUMP_STATEMENT	4986:3	4986:8	6	break DESTINATION ;
KEYWORD	4986:3	4986:3	7	break
LEAF_NODE	4986:3	4986:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	4986:8	4986:8	7	;
LABEL	4987:2	4987:24	6	case TIFF_SETGET_ASCII :
LEAF_NODE	4987:2	4987:2	7	case
LEAF_NODE	4987:7	4987:7	7	TIFF_SETGET_ASCII
LEAF_NODE	4987:24	4987:24	7	:
LEAF_NODE	4988:3	4988:3	6	{
STATEMENTS	4989:4	4992:4	6	
SIMPLE_DECL	4989:4	4989:15	7	uint8 * data ;
VAR_DECL	4989:4	4989:11	8	uint8 * data
TYPE	4989:4	4989:9	9	uint8 *
TYPE_NAME	4989:4	4989:4	10	uint8
LEAF_NODE	4989:4	4989:4	11	uint8
POINTER	4989:9	4989:9	10	*
LEAF_NODE	4989:9	4989:9	11	*
NAME	4989:11	4989:11	9	data
LEAF_NODE	4989:11	4989:11	10	data
LEAF_NODE	4989:15	4989:15	8	;
EXPR_STATEMENT	4990:4	4990:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	4990:4	4990:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	4990:4	4990:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	4990:4	4990:4	10	assert
LEAF_NODE	4990:4	4990:4	11	assert
LEAF_NODE	4990:10	4990:10	10	(
ARGUMENT	4990:11	4990:33	10	fip -> field_passcount == 0
FIELD	4990:11	4990:16	11	fip -> field_passcount
LEAF_NODE	4990:11	4990:11	12	fip
LEAF_NODE	4990:14	4990:14	12	->
LEAF_NODE	4990:16	4990:16	12	field_passcount
EQ_OPERATOR	4990:31	4990:31	11	==
LEAF_NODE	4990:31	4990:31	12	==
FIELD	4990:33	4990:33	11	0
LEAF_NODE	4990:33	4990:33	12	0
LEAF_NODE	4990:34	4990:34	10	)
LEAF_NODE	4990:35	4990:35	8	;
EXPR_STATEMENT	4991:4	4991:47	7	err = TIFFReadDirEntryByteArray ( tif , dp , & data ) ;
EXPR	4991:4	4991:4	8	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
ASSIGN	4991:4	4991:8	9	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
LVAL	4991:4	4991:4	10	err
FIELD	4991:4	4991:4	11	err
LEAF_NODE	4991:4	4991:4	12	err
ASSIGN_OP	4991:7	4991:7	10	=
LEAF_NODE	4991:7	4991:7	11	=
RVAL	4991:8	4991:8	10	TIFFReadDirEntryByteArray ( tif , dp , & data )
FUNCTION_CALL	4991:8	4991:46	11	TIFFReadDirEntryByteArray ( tif , dp , & data )
CALLEE	4991:8	4991:8	12	TIFFReadDirEntryByteArray
LEAF_NODE	4991:8	4991:8	13	TIFFReadDirEntryByteArray
LEAF_NODE	4991:33	4991:33	12	(
ARGUMENT	4991:34	4991:34	12	tif
FIELD	4991:34	4991:34	13	tif
LEAF_NODE	4991:34	4991:34	14	tif
LEAF_NODE	4991:37	4991:37	12	,
ARGUMENT	4991:38	4991:38	12	dp
FIELD	4991:38	4991:38	13	dp
LEAF_NODE	4991:38	4991:38	14	dp
LEAF_NODE	4991:40	4991:40	12	,
ARGUMENT	4991:41	4991:41	12	& data
UNARY_EXPR	4991:41	4991:42	13	& data
UNARY_OPERATOR	4991:41	4991:41	14	&
LEAF_NODE	4991:41	4991:41	15	&
FIELD	4991:42	4991:42	14	data
LEAF_NODE	4991:42	4991:42	15	data
LEAF_NODE	4991:46	4991:46	12	)
LEAF_NODE	4991:47	4991:47	8	;
SELECTION	4992:4	4993:4	7	
KEYWORD	4992:4	4992:4	8	if
LEAF_NODE	4992:4	4992:4	9	if
LEAF_NODE	4992:7	4992:7	8	(
CONDITION	4992:8	4992:8	8	err == TIFFReadDirEntryErrOk
EXPR	4992:8	4992:13	9	err == TIFFReadDirEntryErrOk
FIELD	4992:8	4992:8	10	err
LEAF_NODE	4992:8	4992:8	11	err
EQ_OPERATOR	4992:11	4992:11	10	==
LEAF_NODE	4992:11	4992:11	11	==
FIELD	4992:13	4992:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	4992:13	4992:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	4992:34	4992:34	8	)
STATEMENTS	4993:4	5034:4	8	
LEAF_NODE	4993:4	4993:4	9	{
STATEMENTS	4994:5	5032:5	9	
SIMPLE_DECL	4994:5	4994:18	10	uint32 mb ; mb = 0 ;
VAR_DECL	4994:5	4994:12	11	uint32 mb ; mb = 0
TYPE	4994:5	4994:5	12	uint32
TYPE_NAME	4994:5	4994:5	13	uint32
LEAF_NODE	4994:5	4994:5	14	uint32
NAME	4994:12	4994:12	12	mb
LEAF_NODE	4994:12	4994:12	13	mb
LEAF_NODE	0:0	0:0	12	;
INIT	4994:12	4994:12	12	mb = 0
ASSIGN	4994:12	4994:17	13	mb = 0
LVAL	4994:12	4994:12	14	mb
NAME	4994:12	4994:12	15	mb
LEAF_NODE	4994:12	4994:12	16	mb
ASSIGN_OP	4994:15	4994:15	14	=
LEAF_NODE	4994:15	4994:15	15	=
RVAL	4994:17	4994:17	14	0
FIELD	4994:17	4994:17	15	0
LEAF_NODE	4994:17	4994:17	16	0
LEAF_NODE	4994:18	4994:18	11	;
SIMPLE_DECL	4995:5	4995:10	10	int n ;
VAR_DECL	4995:5	4995:9	11	int n
TYPE	4995:5	4995:5	12	int
TYPE_NAME	4995:5	4995:5	13	int
LEAF_NODE	4995:5	4995:5	14	int
NAME	4995:9	4995:9	12	n
LEAF_NODE	4995:9	4995:9	13	n
LEAF_NODE	4995:10	4995:10	11	;
SELECTION	4996:5	4997:5	10	
KEYWORD	4996:5	4996:5	11	if
LEAF_NODE	4996:5	4996:5	12	if
LEAF_NODE	4996:8	4996:8	11	(
CONDITION	4996:9	4996:9	11	data != NULL
EXPR	4996:9	4996:17	12	data != NULL
FIELD	4996:9	4996:9	13	data
LEAF_NODE	4996:9	4996:9	14	data
EQ_OPERATOR	4996:14	4996:14	13	!=
LEAF_NODE	4996:14	4996:14	14	!=
FIELD	4996:17	4996:17	13	NULL
LEAF_NODE	4996:17	4996:17	14	NULL
LEAF_NODE	4996:21	4996:21	11	)
STATEMENTS	4997:5	5006:5	11	
LEAF_NODE	4997:5	4997:5	12	{
STATEMENTS	4998:9	4999:9	12	
SIMPLE_DECL	4998:9	4998:25	13	uint8 * ma ; ma = data ;
VAR_DECL	4998:9	4998:16	14	uint8 * ma ; ma = data
TYPE	4998:9	4998:14	15	uint8 *
TYPE_NAME	4998:9	4998:9	16	uint8
LEAF_NODE	4998:9	4998:9	17	uint8
POINTER	4998:14	4998:14	16	*
LEAF_NODE	4998:14	4998:14	17	*
NAME	4998:16	4998:16	15	ma
LEAF_NODE	4998:16	4998:16	16	ma
LEAF_NODE	0:0	0:0	15	;
INIT	4998:16	4998:16	15	ma = data
ASSIGN	4998:16	4998:21	16	ma = data
LVAL	4998:16	4998:16	17	ma
NAME	4998:16	4998:16	18	ma
LEAF_NODE	4998:16	4998:16	19	ma
ASSIGN_OP	4998:19	4998:19	17	=
LEAF_NODE	4998:19	4998:19	18	=
RVAL	4998:21	4998:21	17	data
FIELD	4998:21	4998:21	18	data
LEAF_NODE	4998:21	4998:21	19	data
LEAF_NODE	4998:25	4998:25	14	;
ITERATION	4999:9	5000:9	13	
KEYWORD	4999:9	4999:9	14	while
LEAF_NODE	4999:9	4999:9	15	while
LEAF_NODE	4999:15	4999:15	14	(
CONDITION	4999:16	4999:16	14	mb < ( uint32 ) dp -> tdir_count
EXPR	4999:16	4999:27	15	mb < ( uint32 ) dp -> tdir_count
FIELD	4999:16	4999:16	16	mb
LEAF_NODE	4999:16	4999:16	17	mb
REL_OPERATOR	4999:18	4999:18	16	<
LEAF_NODE	4999:18	4999:18	17	<
LEAF_NODE	4999:19	4999:19	16	(
TYPE_NAME	4999:20	4999:20	16	uint32
LEAF_NODE	4999:20	4999:20	17	uint32
LEAF_NODE	4999:26	4999:26	16	)
FIELD	4999:27	4999:31	16	dp -> tdir_count
LEAF_NODE	4999:27	4999:27	17	dp
LEAF_NODE	4999:29	4999:29	17	->
LEAF_NODE	4999:31	4999:31	17	tdir_count
LEAF_NODE	4999:41	4999:41	14	)
STATEMENTS	5000:9	5005:9	14	
LEAF_NODE	5000:9	5000:9	15	{
STATEMENTS	5001:17	5004:17	15	
SELECTION	5001:17	5002:25	16	
KEYWORD	5001:17	5001:17	17	if
LEAF_NODE	5001:17	5001:17	18	if
LEAF_NODE	5001:20	5001:20	17	(
CONDITION	5001:21	5001:21	17	* ma == 0
EXPR	5001:21	5001:26	18	* ma == 0
UNARY_EXPR	5001:21	5001:22	19	* ma
UNARY_OPERATOR	5001:21	5001:21	20	*
LEAF_NODE	5001:21	5001:21	21	*
FIELD	5001:22	5001:22	20	ma
LEAF_NODE	5001:22	5001:22	21	ma
EQ_OPERATOR	5001:24	5001:24	19	==
LEAF_NODE	5001:24	5001:24	20	==
FIELD	5001:26	5001:26	19	0
LEAF_NODE	5001:26	5001:26	20	0
LEAF_NODE	5001:27	5001:27	17	)
STATEMENTS	5002:25	5002:25	17	
JUMP_STATEMENT	5002:25	5002:30	18	break DESTINATION ;
KEYWORD	5002:25	5002:25	19	break
LEAF_NODE	5002:25	5002:25	20	break
LEAF_NODE	0:0	0:0	19	DESTINATION
LEAF_NODE	5002:30	5002:30	19	;
EXPR_STATEMENT	5003:17	5003:21	16	ma ++ ;
EXPR	5003:17	5003:17	17	ma ++
FIELD	5003:17	5003:19	18	ma ++
LEAF_NODE	5003:17	5003:17	19	ma
LEAF_NODE	5003:19	5003:19	19	++
LEAF_NODE	5003:21	5003:21	17	;
EXPR_STATEMENT	5004:17	5004:21	16	mb ++ ;
EXPR	5004:17	5004:17	17	mb ++
FIELD	5004:17	5004:19	18	mb ++
LEAF_NODE	5004:17	5004:17	19	mb
LEAF_NODE	5004:19	5004:19	19	++
LEAF_NODE	5004:21	5004:21	17	;
LEAF_NODE	5005:9	5005:9	15	}
LEAF_NODE	5006:5	5006:5	12	}
SELECTION	5007:5	5008:6	10	
KEYWORD	5007:5	5007:5	11	if
LEAF_NODE	5007:5	5007:5	12	if
LEAF_NODE	5007:8	5007:8	11	(
CONDITION	5007:9	5007:9	11	mb + 1 < ( uint32 ) dp -> tdir_count
EXPR	5007:9	5007:22	12	mb + 1 < ( uint32 ) dp -> tdir_count
FIELD	5007:9	5007:9	13	mb
LEAF_NODE	5007:9	5007:9	14	mb
LEAF_NODE	5007:11	5007:11	13	+
FIELD	5007:12	5007:12	13	1
LEAF_NODE	5007:12	5007:12	14	1
REL_OPERATOR	5007:13	5007:13	13	<
LEAF_NODE	5007:13	5007:13	14	<
LEAF_NODE	5007:14	5007:14	13	(
TYPE_NAME	5007:15	5007:15	13	uint32
LEAF_NODE	5007:15	5007:15	14	uint32
LEAF_NODE	5007:21	5007:21	13	)
FIELD	5007:22	5007:26	13	dp -> tdir_count
LEAF_NODE	5007:22	5007:22	14	dp
LEAF_NODE	5007:24	5007:24	14	->
LEAF_NODE	5007:26	5007:26	14	tdir_count
LEAF_NODE	5007:36	5007:36	11	)
STATEMENTS	5008:6	5008:6	11	
EXPR_STATEMENT	5008:6	5008:199	12	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations" , fip -> field_name ) ;
EXPR	5008:6	5008:6	13	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations" , fip -> field_name )
FUNCTION_CALL	5008:6	5008:198	14	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations" , fip -> field_name )
CALLEE	5008:6	5008:6	15	TIFFWarningExt
LEAF_NODE	5008:6	5008:6	16	TIFFWarningExt
LEAF_NODE	5008:20	5008:20	15	(
ARGUMENT	5008:21	5008:21	15	tif -> tif_clientdata
FIELD	5008:21	5008:26	16	tif -> tif_clientdata
LEAF_NODE	5008:21	5008:21	17	tif
LEAF_NODE	5008:24	5008:24	17	->
LEAF_NODE	5008:26	5008:26	17	tif_clientdata
LEAF_NODE	5008:40	5008:40	15	,
ARGUMENT	5008:41	5008:41	15	module
FIELD	5008:41	5008:41	16	module
LEAF_NODE	5008:41	5008:41	17	module
LEAF_NODE	5008:47	5008:47	15	,
ARGUMENT	5008:48	5008:48	15	"ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations"
FIELD	5008:48	5008:48	16	"ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations"
LEAF_NODE	5008:48	5008:48	17	"ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations"
LEAF_NODE	5008:182	5008:182	15	,
ARGUMENT	5008:183	5008:183	15	fip -> field_name
FIELD	5008:183	5008:188	16	fip -> field_name
LEAF_NODE	5008:183	5008:183	17	fip
LEAF_NODE	5008:186	5008:186	17	->
LEAF_NODE	5008:188	5008:188	17	field_name
LEAF_NODE	5008:198	5008:198	15	)
LEAF_NODE	5008:199	5008:199	13	;
SELECTION	5009:5	5009:10	10	
KEYWORD	5009:5	5009:5	11	else
LEAF_NODE	5009:5	5009:5	12	else
STATEMENTS	5009:10	5009:10	11	
SELECTION	5009:10	5010:5	12	
KEYWORD	5009:10	5009:10	13	if
LEAF_NODE	5009:10	5009:10	14	if
LEAF_NODE	5009:13	5009:13	13	(
CONDITION	5009:14	5009:14	13	mb + 1 > ( uint32 ) dp -> tdir_count
EXPR	5009:14	5009:27	14	mb + 1 > ( uint32 ) dp -> tdir_count
FIELD	5009:14	5009:14	15	mb
LEAF_NODE	5009:14	5009:14	16	mb
LEAF_NODE	5009:16	5009:16	15	+
FIELD	5009:17	5009:17	15	1
LEAF_NODE	5009:17	5009:17	16	1
REL_OPERATOR	5009:18	5009:18	15	>
LEAF_NODE	5009:18	5009:18	16	>
LEAF_NODE	5009:19	5009:19	15	(
TYPE_NAME	5009:20	5009:20	15	uint32
LEAF_NODE	5009:20	5009:20	16	uint32
LEAF_NODE	5009:26	5009:26	15	)
FIELD	5009:27	5009:31	15	dp -> tdir_count
LEAF_NODE	5009:27	5009:27	16	dp
LEAF_NODE	5009:29	5009:29	16	->
LEAF_NODE	5009:31	5009:31	16	tdir_count
LEAF_NODE	5009:41	5009:41	13	)
STATEMENTS	5010:5	5028:5	13	
LEAF_NODE	5010:5	5010:5	14	{
STATEMENTS	5011:6	5027:6	14	
SIMPLE_DECL	5011:6	5011:14	15	uint8 * o ;
VAR_DECL	5011:6	5011:13	16	uint8 * o
TYPE	5011:6	5011:11	17	uint8 *
TYPE_NAME	5011:6	5011:6	18	uint8
LEAF_NODE	5011:6	5011:6	19	uint8
POINTER	5011:11	5011:11	18	*
LEAF_NODE	5011:11	5011:11	19	*
NAME	5011:13	5011:13	17	o
LEAF_NODE	5011:13	5011:13	18	o
LEAF_NODE	5011:14	5011:14	16	;
EXPR_STATEMENT	5012:6	5012:119	15	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte" , fip -> field_name ) ;
EXPR	5012:6	5012:6	16	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte" , fip -> field_name )
FUNCTION_CALL	5012:6	5012:118	17	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte" , fip -> field_name )
CALLEE	5012:6	5012:6	18	TIFFWarningExt
LEAF_NODE	5012:6	5012:6	19	TIFFWarningExt
LEAF_NODE	5012:20	5012:20	18	(
ARGUMENT	5012:21	5012:21	18	tif -> tif_clientdata
FIELD	5012:21	5012:26	19	tif -> tif_clientdata
LEAF_NODE	5012:21	5012:21	20	tif
LEAF_NODE	5012:24	5012:24	20	->
LEAF_NODE	5012:26	5012:26	20	tif_clientdata
LEAF_NODE	5012:40	5012:40	18	,
ARGUMENT	5012:41	5012:41	18	module
FIELD	5012:41	5012:41	19	module
LEAF_NODE	5012:41	5012:41	20	module
LEAF_NODE	5012:47	5012:47	18	,
ARGUMENT	5012:48	5012:48	18	"ASCII value for tag \"%s\" does not end in null byte"
FIELD	5012:48	5012:48	19	"ASCII value for tag \"%s\" does not end in null byte"
LEAF_NODE	5012:48	5012:48	20	"ASCII value for tag \"%s\" does not end in null byte"
LEAF_NODE	5012:102	5012:102	18	,
ARGUMENT	5012:103	5012:103	18	fip -> field_name
FIELD	5012:103	5012:108	19	fip -> field_name
LEAF_NODE	5012:103	5012:103	20	fip
LEAF_NODE	5012:106	5012:106	20	->
LEAF_NODE	5012:108	5012:108	20	field_name
LEAF_NODE	5012:118	5012:118	18	)
LEAF_NODE	5012:119	5012:119	16	;
SELECTION	5013:6	5014:7	15	
KEYWORD	5013:6	5013:6	16	if
LEAF_NODE	5013:6	5013:6	17	if
LEAF_NODE	5013:9	5013:9	16	(
CONDITION	5013:10	5013:10	16	( uint32 ) dp -> tdir_count + 1 != dp -> tdir_count + 1
EXPR	5013:10	5013:51	17	( uint32 ) dp -> tdir_count + 1 != dp -> tdir_count + 1
LEAF_NODE	5013:10	5013:10	18	(
TYPE_NAME	5013:11	5013:11	18	uint32
LEAF_NODE	5013:11	5013:11	19	uint32
LEAF_NODE	5013:17	5013:17	18	)
FIELD	5013:18	5013:22	18	dp -> tdir_count
LEAF_NODE	5013:18	5013:18	19	dp
LEAF_NODE	5013:20	5013:20	19	->
LEAF_NODE	5013:22	5013:22	19	tdir_count
LEAF_NODE	5013:32	5013:32	18	+
FIELD	5013:33	5013:33	18	1
LEAF_NODE	5013:33	5013:33	19	1
EQ_OPERATOR	5013:34	5013:34	18	!=
LEAF_NODE	5013:34	5013:34	19	!=
FIELD	5013:36	5013:40	18	dp -> tdir_count
LEAF_NODE	5013:36	5013:36	19	dp
LEAF_NODE	5013:38	5013:38	19	->
LEAF_NODE	5013:40	5013:40	19	tdir_count
LEAF_NODE	5013:50	5013:50	18	+
FIELD	5013:51	5013:51	18	1
LEAF_NODE	5013:51	5013:51	19	1
LEAF_NODE	5013:52	5013:52	16	)
STATEMENTS	5014:7	5014:7	16	
EXPR_STATEMENT	5014:7	5014:13	17	o = NULL ;
EXPR	5014:7	5014:7	18	o = NULL
ASSIGN	5014:7	5014:9	19	o = NULL
LVAL	5014:7	5014:7	20	o
FIELD	5014:7	5014:7	21	o
LEAF_NODE	5014:7	5014:7	22	o
ASSIGN_OP	5014:8	5014:8	20	=
LEAF_NODE	5014:8	5014:8	21	=
RVAL	5014:9	5014:9	20	NULL
FIELD	5014:9	5014:9	21	NULL
LEAF_NODE	5014:9	5014:9	22	NULL
LEAF_NODE	5014:13	5014:13	18	;
SELECTION	5015:6	5016:7	15	
KEYWORD	5015:6	5015:6	16	else
LEAF_NODE	5015:6	5015:6	17	else
STATEMENTS	5016:7	5016:7	16	
EXPR_STATEMENT	5016:7	5016:46	17	o = _TIFFmalloc ( ( uint32 ) dp -> tdir_count + 1 ) ;
EXPR	5016:7	5016:7	18	o = _TIFFmalloc ( ( uint32 ) dp -> tdir_count + 1 )
ASSIGN	5016:7	5016:9	19	o = _TIFFmalloc ( ( uint32 ) dp -> tdir_count + 1 )
LVAL	5016:7	5016:7	20	o
FIELD	5016:7	5016:7	21	o
LEAF_NODE	5016:7	5016:7	22	o
ASSIGN_OP	5016:8	5016:8	20	=
LEAF_NODE	5016:8	5016:8	21	=
RVAL	5016:9	5016:9	20	_TIFFmalloc ( ( uint32 ) dp -> tdir_count + 1 )
FUNCTION_CALL	5016:9	5016:45	21	_TIFFmalloc ( ( uint32 ) dp -> tdir_count + 1 )
CALLEE	5016:9	5016:9	22	_TIFFmalloc
LEAF_NODE	5016:9	5016:9	23	_TIFFmalloc
LEAF_NODE	5016:20	5016:20	22	(
ARGUMENT	5016:21	5016:44	22	( uint32 ) dp -> tdir_count + 1
LEAF_NODE	5016:21	5016:21	23	(
TYPE_NAME	5016:22	5016:22	23	uint32
LEAF_NODE	5016:22	5016:22	24	uint32
LEAF_NODE	5016:28	5016:28	23	)
FIELD	5016:29	5016:33	23	dp -> tdir_count
LEAF_NODE	5016:29	5016:29	24	dp
LEAF_NODE	5016:31	5016:31	24	->
LEAF_NODE	5016:33	5016:33	24	tdir_count
LEAF_NODE	5016:43	5016:43	23	+
FIELD	5016:44	5016:44	23	1
LEAF_NODE	5016:44	5016:44	24	1
LEAF_NODE	5016:45	5016:45	22	)
LEAF_NODE	5016:46	5016:46	18	;
SELECTION	5017:6	5018:6	15	
KEYWORD	5017:6	5017:6	16	if
LEAF_NODE	5017:6	5017:6	17	if
LEAF_NODE	5017:9	5017:9	16	(
CONDITION	5017:10	5017:10	16	o == NULL
EXPR	5017:10	5017:13	17	o == NULL
FIELD	5017:10	5017:10	18	o
LEAF_NODE	5017:10	5017:10	19	o
EQ_OPERATOR	5017:11	5017:11	18	==
LEAF_NODE	5017:11	5017:11	19	==
FIELD	5017:13	5017:13	18	NULL
LEAF_NODE	5017:13	5017:13	19	NULL
LEAF_NODE	5017:17	5017:17	16	)
STATEMENTS	5018:6	5022:6	16	
LEAF_NODE	5018:6	5018:6	17	{
STATEMENTS	5019:7	5021:7	17	
SELECTION	5019:7	5020:8	18	
KEYWORD	5019:7	5019:7	19	if
LEAF_NODE	5019:7	5019:7	20	if
LEAF_NODE	5019:10	5019:10	19	(
CONDITION	5019:11	5019:11	19	data != NULL
EXPR	5019:11	5019:17	20	data != NULL
FIELD	5019:11	5019:11	21	data
LEAF_NODE	5019:11	5019:11	22	data
EQ_OPERATOR	5019:15	5019:15	21	!=
LEAF_NODE	5019:15	5019:15	22	!=
FIELD	5019:17	5019:17	21	NULL
LEAF_NODE	5019:17	5019:17	22	NULL
LEAF_NODE	5019:21	5019:21	19	)
STATEMENTS	5020:8	5020:8	19	
EXPR_STATEMENT	5020:8	5020:23	20	_TIFFfree ( data ) ;
EXPR	5020:8	5020:8	21	_TIFFfree ( data )
FUNCTION_CALL	5020:8	5020:22	22	_TIFFfree ( data )
CALLEE	5020:8	5020:8	23	_TIFFfree
LEAF_NODE	5020:8	5020:8	24	_TIFFfree
LEAF_NODE	5020:17	5020:17	23	(
ARGUMENT	5020:18	5020:18	23	data
FIELD	5020:18	5020:18	24	data
LEAF_NODE	5020:18	5020:18	25	data
LEAF_NODE	5020:22	5020:22	23	)
LEAF_NODE	5020:23	5020:23	21	;
JUMP_STATEMENT	5021:7	5021:16	18	return ( 0 ) ;
KEYWORD	5021:7	5021:7	19	return
LEAF_NODE	5021:7	5021:7	20	return
DESTINATION	5021:13	5021:13	19	( 0 )
EXPR	5021:13	5021:15	20	( 0 )
LEAF_NODE	5021:13	5021:13	21	(
FIELD	5021:14	5021:14	21	0
LEAF_NODE	5021:14	5021:14	22	0
LEAF_NODE	5021:15	5021:15	21	)
LEAF_NODE	5021:16	5021:16	19	;
LEAF_NODE	5022:6	5022:6	17	}
EXPR_STATEMENT	5023:6	5023:48	15	_TIFFmemcpy ( o , data , ( uint32 ) dp -> tdir_count ) ;
EXPR	5023:6	5023:6	16	_TIFFmemcpy ( o , data , ( uint32 ) dp -> tdir_count )
FUNCTION_CALL	5023:6	5023:47	17	_TIFFmemcpy ( o , data , ( uint32 ) dp -> tdir_count )
CALLEE	5023:6	5023:6	18	_TIFFmemcpy
LEAF_NODE	5023:6	5023:6	19	_TIFFmemcpy
LEAF_NODE	5023:17	5023:17	18	(
ARGUMENT	5023:18	5023:18	18	o
FIELD	5023:18	5023:18	19	o
LEAF_NODE	5023:18	5023:18	20	o
LEAF_NODE	5023:19	5023:19	18	,
ARGUMENT	5023:20	5023:20	18	data
FIELD	5023:20	5023:20	19	data
LEAF_NODE	5023:20	5023:20	20	data
LEAF_NODE	5023:24	5023:24	18	,
ARGUMENT	5023:25	5023:33	18	( uint32 ) dp -> tdir_count
LEAF_NODE	5023:25	5023:25	19	(
TYPE_NAME	5023:26	5023:26	19	uint32
LEAF_NODE	5023:26	5023:26	20	uint32
LEAF_NODE	5023:32	5023:32	19	)
FIELD	5023:33	5023:37	19	dp -> tdir_count
LEAF_NODE	5023:33	5023:33	20	dp
LEAF_NODE	5023:35	5023:35	20	->
LEAF_NODE	5023:37	5023:37	20	tdir_count
LEAF_NODE	5023:47	5023:47	18	)
LEAF_NODE	5023:48	5023:48	16	;
EXPR_STATEMENT	5024:6	5024:33	15	o [ ( uint32 ) dp -> tdir_count ] = 0 ;
EXPR	5024:6	5024:6	16	o [ ( uint32 ) dp -> tdir_count ] = 0
ASSIGN	5024:6	5024:32	17	o [ ( uint32 ) dp -> tdir_count ] = 0
LVAL	5024:6	5024:6	18	o [ ( uint32 ) dp -> tdir_count ]
FIELD	5024:6	5024:30	19	o [ ( uint32 ) dp -> tdir_count ]
LEAF_NODE	5024:6	5024:6	20	o
LEAF_NODE	5024:7	5024:7	20	[
EXPR	5024:8	5024:16	20	( uint32 ) dp -> tdir_count
LEAF_NODE	5024:8	5024:8	21	(
TYPE_NAME	5024:9	5024:9	21	uint32
LEAF_NODE	5024:9	5024:9	22	uint32
LEAF_NODE	5024:15	5024:15	21	)
FIELD	5024:16	5024:20	21	dp -> tdir_count
LEAF_NODE	5024:16	5024:16	22	dp
LEAF_NODE	5024:18	5024:18	22	->
LEAF_NODE	5024:20	5024:20	22	tdir_count
LEAF_NODE	5024:30	5024:30	20	]
ASSIGN_OP	5024:31	5024:31	18	=
LEAF_NODE	5024:31	5024:31	19	=
RVAL	5024:32	5024:32	18	0
FIELD	5024:32	5024:32	19	0
LEAF_NODE	5024:32	5024:32	20	0
LEAF_NODE	5024:33	5024:33	16	;
SELECTION	5025:6	5026:7	15	
KEYWORD	5025:6	5025:6	16	if
LEAF_NODE	5025:6	5025:6	17	if
LEAF_NODE	5025:9	5025:9	16	(
CONDITION	5025:10	5025:10	16	data != 0
EXPR	5025:10	5025:16	17	data != 0
FIELD	5025:10	5025:10	18	data
LEAF_NODE	5025:10	5025:10	19	data
EQ_OPERATOR	5025:14	5025:14	18	!=
LEAF_NODE	5025:14	5025:14	19	!=
FIELD	5025:16	5025:16	18	0
LEAF_NODE	5025:16	5025:16	19	0
LEAF_NODE	5025:17	5025:17	16	)
STATEMENTS	5026:7	5026:7	16	
EXPR_STATEMENT	5026:7	5026:22	17	_TIFFfree ( data ) ;
EXPR	5026:7	5026:7	18	_TIFFfree ( data )
FUNCTION_CALL	5026:7	5026:21	19	_TIFFfree ( data )
CALLEE	5026:7	5026:7	20	_TIFFfree
LEAF_NODE	5026:7	5026:7	21	_TIFFfree
LEAF_NODE	5026:16	5026:16	20	(
ARGUMENT	5026:17	5026:17	20	data
FIELD	5026:17	5026:17	21	data
LEAF_NODE	5026:17	5026:17	22	data
LEAF_NODE	5026:21	5026:21	20	)
LEAF_NODE	5026:22	5026:22	18	;
EXPR_STATEMENT	5027:6	5027:12	15	data = o ;
EXPR	5027:6	5027:6	16	data = o
ASSIGN	5027:6	5027:11	17	data = o
LVAL	5027:6	5027:6	18	data
FIELD	5027:6	5027:6	19	data
LEAF_NODE	5027:6	5027:6	20	data
ASSIGN_OP	5027:10	5027:10	18	=
LEAF_NODE	5027:10	5027:10	19	=
RVAL	5027:11	5027:11	18	o
FIELD	5027:11	5027:11	19	o
LEAF_NODE	5027:11	5027:11	20	o
LEAF_NODE	5027:12	5027:12	16	;
LEAF_NODE	5028:5	5028:5	14	}
EXPR_STATEMENT	5029:5	5029:42	10	n = TIFFSetField ( tif , dp -> tdir_tag , data ) ;
EXPR	5029:5	5029:5	11	n = TIFFSetField ( tif , dp -> tdir_tag , data )
ASSIGN	5029:5	5029:7	12	n = TIFFSetField ( tif , dp -> tdir_tag , data )
LVAL	5029:5	5029:5	13	n
FIELD	5029:5	5029:5	14	n
LEAF_NODE	5029:5	5029:5	15	n
ASSIGN_OP	5029:6	5029:6	13	=
LEAF_NODE	5029:6	5029:6	14	=
RVAL	5029:7	5029:7	13	TIFFSetField ( tif , dp -> tdir_tag , data )
FUNCTION_CALL	5029:7	5029:41	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5029:7	5029:7	15	TIFFSetField
LEAF_NODE	5029:7	5029:7	16	TIFFSetField
LEAF_NODE	5029:19	5029:19	15	(
ARGUMENT	5029:20	5029:20	15	tif
FIELD	5029:20	5029:20	16	tif
LEAF_NODE	5029:20	5029:20	17	tif
LEAF_NODE	5029:23	5029:23	15	,
ARGUMENT	5029:24	5029:24	15	dp -> tdir_tag
FIELD	5029:24	5029:28	16	dp -> tdir_tag
LEAF_NODE	5029:24	5029:24	17	dp
LEAF_NODE	5029:26	5029:26	17	->
LEAF_NODE	5029:28	5029:28	17	tdir_tag
LEAF_NODE	5029:36	5029:36	15	,
ARGUMENT	5029:37	5029:37	15	data
FIELD	5029:37	5029:37	16	data
LEAF_NODE	5029:37	5029:37	17	data
LEAF_NODE	5029:41	5029:41	15	)
LEAF_NODE	5029:42	5029:42	11	;
SELECTION	5030:5	5031:6	10	
KEYWORD	5030:5	5030:5	11	if
LEAF_NODE	5030:5	5030:5	12	if
LEAF_NODE	5030:8	5030:8	11	(
CONDITION	5030:9	5030:9	11	data != 0
EXPR	5030:9	5030:15	12	data != 0
FIELD	5030:9	5030:9	13	data
LEAF_NODE	5030:9	5030:9	14	data
EQ_OPERATOR	5030:13	5030:13	13	!=
LEAF_NODE	5030:13	5030:13	14	!=
FIELD	5030:15	5030:15	13	0
LEAF_NODE	5030:15	5030:15	14	0
LEAF_NODE	5030:16	5030:16	11	)
STATEMENTS	5031:6	5031:6	11	
EXPR_STATEMENT	5031:6	5031:21	12	_TIFFfree ( data ) ;
EXPR	5031:6	5031:6	13	_TIFFfree ( data )
FUNCTION_CALL	5031:6	5031:20	14	_TIFFfree ( data )
CALLEE	5031:6	5031:6	15	_TIFFfree
LEAF_NODE	5031:6	5031:6	16	_TIFFfree
LEAF_NODE	5031:15	5031:15	15	(
ARGUMENT	5031:16	5031:16	15	data
FIELD	5031:16	5031:16	16	data
LEAF_NODE	5031:16	5031:16	17	data
LEAF_NODE	5031:20	5031:20	15	)
LEAF_NODE	5031:21	5031:21	13	;
SELECTION	5032:5	5033:6	10	
KEYWORD	5032:5	5032:5	11	if
LEAF_NODE	5032:5	5032:5	12	if
LEAF_NODE	5032:8	5032:8	11	(
CONDITION	5032:9	5032:9	11	! n
EXPR	5032:9	5032:9	12	! n
UNARY_EXPR	5032:9	5032:10	13	! n
UNARY_OPERATOR	5032:9	5032:9	14	!
LEAF_NODE	5032:9	5032:9	15	!
FIELD	5032:10	5032:10	14	n
LEAF_NODE	5032:10	5032:10	15	n
LEAF_NODE	5032:11	5032:11	11	)
STATEMENTS	5033:6	5033:6	11	
JUMP_STATEMENT	5033:6	5033:15	12	return ( 0 ) ;
KEYWORD	5033:6	5033:6	13	return
LEAF_NODE	5033:6	5033:6	14	return
DESTINATION	5033:12	5033:12	13	( 0 )
EXPR	5033:12	5033:14	14	( 0 )
LEAF_NODE	5033:12	5033:12	15	(
FIELD	5033:13	5033:13	15	0
LEAF_NODE	5033:13	5033:13	16	0
LEAF_NODE	5033:14	5033:14	15	)
LEAF_NODE	5033:15	5033:15	13	;
LEAF_NODE	5034:4	5034:4	9	}
LEAF_NODE	5035:3	5035:3	6	}
JUMP_STATEMENT	5036:3	5036:8	6	break DESTINATION ;
KEYWORD	5036:3	5036:3	7	break
LEAF_NODE	5036:3	5036:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5036:8	5036:8	7	;
LABEL	5037:2	5037:24	6	case TIFF_SETGET_UINT8 :
LEAF_NODE	5037:2	5037:2	7	case
LEAF_NODE	5037:7	5037:7	7	TIFF_SETGET_UINT8
LEAF_NODE	5037:24	5037:24	7	:
LEAF_NODE	5038:3	5038:3	6	{
STATEMENTS	5039:4	5043:4	6	
SIMPLE_DECL	5039:4	5039:16	7	uint8 data ; data = 0 ;
VAR_DECL	5039:4	5039:10	8	uint8 data ; data = 0
TYPE	5039:4	5039:4	9	uint8
TYPE_NAME	5039:4	5039:4	10	uint8
LEAF_NODE	5039:4	5039:4	11	uint8
NAME	5039:10	5039:10	9	data
LEAF_NODE	5039:10	5039:10	10	data
LEAF_NODE	0:0	0:0	9	;
INIT	5039:10	5039:10	9	data = 0
ASSIGN	5039:10	5039:15	10	data = 0
LVAL	5039:10	5039:10	11	data
NAME	5039:10	5039:10	12	data
LEAF_NODE	5039:10	5039:10	13	data
ASSIGN_OP	5039:14	5039:14	11	=
LEAF_NODE	5039:14	5039:14	12	=
RVAL	5039:15	5039:15	11	0
FIELD	5039:15	5039:15	12	0
LEAF_NODE	5039:15	5039:15	13	0
LEAF_NODE	5039:16	5039:16	8	;
EXPR_STATEMENT	5040:4	5040:35	7	assert ( fip -> field_readcount == 1 ) ;
EXPR	5040:4	5040:4	8	assert ( fip -> field_readcount == 1 )
FUNCTION_CALL	5040:4	5040:34	9	assert ( fip -> field_readcount == 1 )
CALLEE	5040:4	5040:4	10	assert
LEAF_NODE	5040:4	5040:4	11	assert
LEAF_NODE	5040:10	5040:10	10	(
ARGUMENT	5040:11	5040:33	10	fip -> field_readcount == 1
FIELD	5040:11	5040:16	11	fip -> field_readcount
LEAF_NODE	5040:11	5040:11	12	fip
LEAF_NODE	5040:14	5040:14	12	->
LEAF_NODE	5040:16	5040:16	12	field_readcount
EQ_OPERATOR	5040:31	5040:31	11	==
LEAF_NODE	5040:31	5040:31	12	==
FIELD	5040:33	5040:33	11	1
LEAF_NODE	5040:33	5040:33	12	1
LEAF_NODE	5040:34	5040:34	10	)
LEAF_NODE	5040:35	5040:35	8	;
EXPR_STATEMENT	5041:4	5041:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5041:4	5041:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5041:4	5041:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5041:4	5041:4	10	assert
LEAF_NODE	5041:4	5041:4	11	assert
LEAF_NODE	5041:10	5041:10	10	(
ARGUMENT	5041:11	5041:33	10	fip -> field_passcount == 0
FIELD	5041:11	5041:16	11	fip -> field_passcount
LEAF_NODE	5041:11	5041:11	12	fip
LEAF_NODE	5041:14	5041:14	12	->
LEAF_NODE	5041:16	5041:16	12	field_passcount
EQ_OPERATOR	5041:31	5041:31	11	==
LEAF_NODE	5041:31	5041:31	12	==
FIELD	5041:33	5041:33	11	0
LEAF_NODE	5041:33	5041:33	12	0
LEAF_NODE	5041:34	5041:34	10	)
LEAF_NODE	5041:35	5041:35	8	;
EXPR_STATEMENT	5042:4	5042:42	7	err = TIFFReadDirEntryByte ( tif , dp , & data ) ;
EXPR	5042:4	5042:4	8	err = TIFFReadDirEntryByte ( tif , dp , & data )
ASSIGN	5042:4	5042:8	9	err = TIFFReadDirEntryByte ( tif , dp , & data )
LVAL	5042:4	5042:4	10	err
FIELD	5042:4	5042:4	11	err
LEAF_NODE	5042:4	5042:4	12	err
ASSIGN_OP	5042:7	5042:7	10	=
LEAF_NODE	5042:7	5042:7	11	=
RVAL	5042:8	5042:8	10	TIFFReadDirEntryByte ( tif , dp , & data )
FUNCTION_CALL	5042:8	5042:41	11	TIFFReadDirEntryByte ( tif , dp , & data )
CALLEE	5042:8	5042:8	12	TIFFReadDirEntryByte
LEAF_NODE	5042:8	5042:8	13	TIFFReadDirEntryByte
LEAF_NODE	5042:28	5042:28	12	(
ARGUMENT	5042:29	5042:29	12	tif
FIELD	5042:29	5042:29	13	tif
LEAF_NODE	5042:29	5042:29	14	tif
LEAF_NODE	5042:32	5042:32	12	,
ARGUMENT	5042:33	5042:33	12	dp
FIELD	5042:33	5042:33	13	dp
LEAF_NODE	5042:33	5042:33	14	dp
LEAF_NODE	5042:35	5042:35	12	,
ARGUMENT	5042:36	5042:36	12	& data
UNARY_EXPR	5042:36	5042:37	13	& data
UNARY_OPERATOR	5042:36	5042:36	14	&
LEAF_NODE	5042:36	5042:36	15	&
FIELD	5042:37	5042:37	14	data
LEAF_NODE	5042:37	5042:37	15	data
LEAF_NODE	5042:41	5042:41	12	)
LEAF_NODE	5042:42	5042:42	8	;
SELECTION	5043:4	5044:4	7	
KEYWORD	5043:4	5043:4	8	if
LEAF_NODE	5043:4	5043:4	9	if
LEAF_NODE	5043:7	5043:7	8	(
CONDITION	5043:8	5043:8	8	err == TIFFReadDirEntryErrOk
EXPR	5043:8	5043:13	9	err == TIFFReadDirEntryErrOk
FIELD	5043:8	5043:8	10	err
LEAF_NODE	5043:8	5043:8	11	err
EQ_OPERATOR	5043:11	5043:11	10	==
LEAF_NODE	5043:11	5043:11	11	==
FIELD	5043:13	5043:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5043:13	5043:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5043:34	5043:34	8	)
STATEMENTS	5044:4	5047:4	8	
LEAF_NODE	5044:4	5044:4	9	{
STATEMENTS	5045:5	5045:5	9	
SELECTION	5045:5	5046:6	10	
KEYWORD	5045:5	5045:5	11	if
LEAF_NODE	5045:5	5045:5	12	if
LEAF_NODE	5045:8	5045:8	11	(
CONDITION	5045:9	5045:9	11	! TIFFSetField ( tif , dp -> tdir_tag , data )
EXPR	5045:9	5045:9	12	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_EXPR	5045:9	5045:10	13	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_OPERATOR	5045:9	5045:9	14	!
LEAF_NODE	5045:9	5045:9	15	!
FUNCTION_CALL	5045:10	5045:44	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5045:10	5045:10	15	TIFFSetField
LEAF_NODE	5045:10	5045:10	16	TIFFSetField
LEAF_NODE	5045:22	5045:22	15	(
ARGUMENT	5045:23	5045:23	15	tif
FIELD	5045:23	5045:23	16	tif
LEAF_NODE	5045:23	5045:23	17	tif
LEAF_NODE	5045:26	5045:26	15	,
ARGUMENT	5045:27	5045:27	15	dp -> tdir_tag
FIELD	5045:27	5045:31	16	dp -> tdir_tag
LEAF_NODE	5045:27	5045:27	17	dp
LEAF_NODE	5045:29	5045:29	17	->
LEAF_NODE	5045:31	5045:31	17	tdir_tag
LEAF_NODE	5045:39	5045:39	15	,
ARGUMENT	5045:40	5045:40	15	data
FIELD	5045:40	5045:40	16	data
LEAF_NODE	5045:40	5045:40	17	data
LEAF_NODE	5045:44	5045:44	15	)
LEAF_NODE	5045:45	5045:45	11	)
STATEMENTS	5046:6	5046:6	11	
JUMP_STATEMENT	5046:6	5046:15	12	return ( 0 ) ;
KEYWORD	5046:6	5046:6	13	return
LEAF_NODE	5046:6	5046:6	14	return
DESTINATION	5046:12	5046:12	13	( 0 )
EXPR	5046:12	5046:14	14	( 0 )
LEAF_NODE	5046:12	5046:12	15	(
FIELD	5046:13	5046:13	15	0
LEAF_NODE	5046:13	5046:13	16	0
LEAF_NODE	5046:14	5046:14	15	)
LEAF_NODE	5046:15	5046:15	13	;
LEAF_NODE	5047:4	5047:4	9	}
LEAF_NODE	5048:3	5048:3	6	}
JUMP_STATEMENT	5049:3	5049:8	6	break DESTINATION ;
KEYWORD	5049:3	5049:3	7	break
LEAF_NODE	5049:3	5049:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5049:8	5049:8	7	;
LABEL	5050:2	5050:25	6	case TIFF_SETGET_UINT16 :
LEAF_NODE	5050:2	5050:2	7	case
LEAF_NODE	5050:7	5050:7	7	TIFF_SETGET_UINT16
LEAF_NODE	5050:25	5050:25	7	:
LEAF_NODE	5051:3	5051:3	6	{
STATEMENTS	5052:4	5056:4	6	
SIMPLE_DECL	5052:4	5052:15	7	uint16 data ;
VAR_DECL	5052:4	5052:11	8	uint16 data
TYPE	5052:4	5052:4	9	uint16
TYPE_NAME	5052:4	5052:4	10	uint16
LEAF_NODE	5052:4	5052:4	11	uint16
NAME	5052:11	5052:11	9	data
LEAF_NODE	5052:11	5052:11	10	data
LEAF_NODE	5052:15	5052:15	8	;
EXPR_STATEMENT	5053:4	5053:35	7	assert ( fip -> field_readcount == 1 ) ;
EXPR	5053:4	5053:4	8	assert ( fip -> field_readcount == 1 )
FUNCTION_CALL	5053:4	5053:34	9	assert ( fip -> field_readcount == 1 )
CALLEE	5053:4	5053:4	10	assert
LEAF_NODE	5053:4	5053:4	11	assert
LEAF_NODE	5053:10	5053:10	10	(
ARGUMENT	5053:11	5053:33	10	fip -> field_readcount == 1
FIELD	5053:11	5053:16	11	fip -> field_readcount
LEAF_NODE	5053:11	5053:11	12	fip
LEAF_NODE	5053:14	5053:14	12	->
LEAF_NODE	5053:16	5053:16	12	field_readcount
EQ_OPERATOR	5053:31	5053:31	11	==
LEAF_NODE	5053:31	5053:31	12	==
FIELD	5053:33	5053:33	11	1
LEAF_NODE	5053:33	5053:33	12	1
LEAF_NODE	5053:34	5053:34	10	)
LEAF_NODE	5053:35	5053:35	8	;
EXPR_STATEMENT	5054:4	5054:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5054:4	5054:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5054:4	5054:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5054:4	5054:4	10	assert
LEAF_NODE	5054:4	5054:4	11	assert
LEAF_NODE	5054:10	5054:10	10	(
ARGUMENT	5054:11	5054:33	10	fip -> field_passcount == 0
FIELD	5054:11	5054:16	11	fip -> field_passcount
LEAF_NODE	5054:11	5054:11	12	fip
LEAF_NODE	5054:14	5054:14	12	->
LEAF_NODE	5054:16	5054:16	12	field_passcount
EQ_OPERATOR	5054:31	5054:31	11	==
LEAF_NODE	5054:31	5054:31	12	==
FIELD	5054:33	5054:33	11	0
LEAF_NODE	5054:33	5054:33	12	0
LEAF_NODE	5054:34	5054:34	10	)
LEAF_NODE	5054:35	5054:35	8	;
EXPR_STATEMENT	5055:4	5055:43	7	err = TIFFReadDirEntryShort ( tif , dp , & data ) ;
EXPR	5055:4	5055:4	8	err = TIFFReadDirEntryShort ( tif , dp , & data )
ASSIGN	5055:4	5055:8	9	err = TIFFReadDirEntryShort ( tif , dp , & data )
LVAL	5055:4	5055:4	10	err
FIELD	5055:4	5055:4	11	err
LEAF_NODE	5055:4	5055:4	12	err
ASSIGN_OP	5055:7	5055:7	10	=
LEAF_NODE	5055:7	5055:7	11	=
RVAL	5055:8	5055:8	10	TIFFReadDirEntryShort ( tif , dp , & data )
FUNCTION_CALL	5055:8	5055:42	11	TIFFReadDirEntryShort ( tif , dp , & data )
CALLEE	5055:8	5055:8	12	TIFFReadDirEntryShort
LEAF_NODE	5055:8	5055:8	13	TIFFReadDirEntryShort
LEAF_NODE	5055:29	5055:29	12	(
ARGUMENT	5055:30	5055:30	12	tif
FIELD	5055:30	5055:30	13	tif
LEAF_NODE	5055:30	5055:30	14	tif
LEAF_NODE	5055:33	5055:33	12	,
ARGUMENT	5055:34	5055:34	12	dp
FIELD	5055:34	5055:34	13	dp
LEAF_NODE	5055:34	5055:34	14	dp
LEAF_NODE	5055:36	5055:36	12	,
ARGUMENT	5055:37	5055:37	12	& data
UNARY_EXPR	5055:37	5055:38	13	& data
UNARY_OPERATOR	5055:37	5055:37	14	&
LEAF_NODE	5055:37	5055:37	15	&
FIELD	5055:38	5055:38	14	data
LEAF_NODE	5055:38	5055:38	15	data
LEAF_NODE	5055:42	5055:42	12	)
LEAF_NODE	5055:43	5055:43	8	;
SELECTION	5056:4	5057:4	7	
KEYWORD	5056:4	5056:4	8	if
LEAF_NODE	5056:4	5056:4	9	if
LEAF_NODE	5056:7	5056:7	8	(
CONDITION	5056:8	5056:8	8	err == TIFFReadDirEntryErrOk
EXPR	5056:8	5056:13	9	err == TIFFReadDirEntryErrOk
FIELD	5056:8	5056:8	10	err
LEAF_NODE	5056:8	5056:8	11	err
EQ_OPERATOR	5056:11	5056:11	10	==
LEAF_NODE	5056:11	5056:11	11	==
FIELD	5056:13	5056:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5056:13	5056:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5056:34	5056:34	8	)
STATEMENTS	5057:4	5060:4	8	
LEAF_NODE	5057:4	5057:4	9	{
STATEMENTS	5058:5	5058:5	9	
SELECTION	5058:5	5059:6	10	
KEYWORD	5058:5	5058:5	11	if
LEAF_NODE	5058:5	5058:5	12	if
LEAF_NODE	5058:8	5058:8	11	(
CONDITION	5058:9	5058:9	11	! TIFFSetField ( tif , dp -> tdir_tag , data )
EXPR	5058:9	5058:9	12	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_EXPR	5058:9	5058:10	13	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_OPERATOR	5058:9	5058:9	14	!
LEAF_NODE	5058:9	5058:9	15	!
FUNCTION_CALL	5058:10	5058:44	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5058:10	5058:10	15	TIFFSetField
LEAF_NODE	5058:10	5058:10	16	TIFFSetField
LEAF_NODE	5058:22	5058:22	15	(
ARGUMENT	5058:23	5058:23	15	tif
FIELD	5058:23	5058:23	16	tif
LEAF_NODE	5058:23	5058:23	17	tif
LEAF_NODE	5058:26	5058:26	15	,
ARGUMENT	5058:27	5058:27	15	dp -> tdir_tag
FIELD	5058:27	5058:31	16	dp -> tdir_tag
LEAF_NODE	5058:27	5058:27	17	dp
LEAF_NODE	5058:29	5058:29	17	->
LEAF_NODE	5058:31	5058:31	17	tdir_tag
LEAF_NODE	5058:39	5058:39	15	,
ARGUMENT	5058:40	5058:40	15	data
FIELD	5058:40	5058:40	16	data
LEAF_NODE	5058:40	5058:40	17	data
LEAF_NODE	5058:44	5058:44	15	)
LEAF_NODE	5058:45	5058:45	11	)
STATEMENTS	5059:6	5059:6	11	
JUMP_STATEMENT	5059:6	5059:15	12	return ( 0 ) ;
KEYWORD	5059:6	5059:6	13	return
LEAF_NODE	5059:6	5059:6	14	return
DESTINATION	5059:12	5059:12	13	( 0 )
EXPR	5059:12	5059:14	14	( 0 )
LEAF_NODE	5059:12	5059:12	15	(
FIELD	5059:13	5059:13	15	0
LEAF_NODE	5059:13	5059:13	16	0
LEAF_NODE	5059:14	5059:14	15	)
LEAF_NODE	5059:15	5059:15	13	;
LEAF_NODE	5060:4	5060:4	9	}
LEAF_NODE	5061:3	5061:3	6	}
JUMP_STATEMENT	5062:3	5062:8	6	break DESTINATION ;
KEYWORD	5062:3	5062:3	7	break
LEAF_NODE	5062:3	5062:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5062:8	5062:8	7	;
LABEL	5063:2	5063:25	6	case TIFF_SETGET_UINT32 :
LEAF_NODE	5063:2	5063:2	7	case
LEAF_NODE	5063:7	5063:7	7	TIFF_SETGET_UINT32
LEAF_NODE	5063:25	5063:25	7	:
LEAF_NODE	5064:3	5064:3	6	{
STATEMENTS	5065:4	5069:4	6	
SIMPLE_DECL	5065:4	5065:15	7	uint32 data ;
VAR_DECL	5065:4	5065:11	8	uint32 data
TYPE	5065:4	5065:4	9	uint32
TYPE_NAME	5065:4	5065:4	10	uint32
LEAF_NODE	5065:4	5065:4	11	uint32
NAME	5065:11	5065:11	9	data
LEAF_NODE	5065:11	5065:11	10	data
LEAF_NODE	5065:15	5065:15	8	;
EXPR_STATEMENT	5066:4	5066:35	7	assert ( fip -> field_readcount == 1 ) ;
EXPR	5066:4	5066:4	8	assert ( fip -> field_readcount == 1 )
FUNCTION_CALL	5066:4	5066:34	9	assert ( fip -> field_readcount == 1 )
CALLEE	5066:4	5066:4	10	assert
LEAF_NODE	5066:4	5066:4	11	assert
LEAF_NODE	5066:10	5066:10	10	(
ARGUMENT	5066:11	5066:33	10	fip -> field_readcount == 1
FIELD	5066:11	5066:16	11	fip -> field_readcount
LEAF_NODE	5066:11	5066:11	12	fip
LEAF_NODE	5066:14	5066:14	12	->
LEAF_NODE	5066:16	5066:16	12	field_readcount
EQ_OPERATOR	5066:31	5066:31	11	==
LEAF_NODE	5066:31	5066:31	12	==
FIELD	5066:33	5066:33	11	1
LEAF_NODE	5066:33	5066:33	12	1
LEAF_NODE	5066:34	5066:34	10	)
LEAF_NODE	5066:35	5066:35	8	;
EXPR_STATEMENT	5067:4	5067:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5067:4	5067:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5067:4	5067:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5067:4	5067:4	10	assert
LEAF_NODE	5067:4	5067:4	11	assert
LEAF_NODE	5067:10	5067:10	10	(
ARGUMENT	5067:11	5067:33	10	fip -> field_passcount == 0
FIELD	5067:11	5067:16	11	fip -> field_passcount
LEAF_NODE	5067:11	5067:11	12	fip
LEAF_NODE	5067:14	5067:14	12	->
LEAF_NODE	5067:16	5067:16	12	field_passcount
EQ_OPERATOR	5067:31	5067:31	11	==
LEAF_NODE	5067:31	5067:31	12	==
FIELD	5067:33	5067:33	11	0
LEAF_NODE	5067:33	5067:33	12	0
LEAF_NODE	5067:34	5067:34	10	)
LEAF_NODE	5067:35	5067:35	8	;
EXPR_STATEMENT	5068:4	5068:42	7	err = TIFFReadDirEntryLong ( tif , dp , & data ) ;
EXPR	5068:4	5068:4	8	err = TIFFReadDirEntryLong ( tif , dp , & data )
ASSIGN	5068:4	5068:8	9	err = TIFFReadDirEntryLong ( tif , dp , & data )
LVAL	5068:4	5068:4	10	err
FIELD	5068:4	5068:4	11	err
LEAF_NODE	5068:4	5068:4	12	err
ASSIGN_OP	5068:7	5068:7	10	=
LEAF_NODE	5068:7	5068:7	11	=
RVAL	5068:8	5068:8	10	TIFFReadDirEntryLong ( tif , dp , & data )
FUNCTION_CALL	5068:8	5068:41	11	TIFFReadDirEntryLong ( tif , dp , & data )
CALLEE	5068:8	5068:8	12	TIFFReadDirEntryLong
LEAF_NODE	5068:8	5068:8	13	TIFFReadDirEntryLong
LEAF_NODE	5068:28	5068:28	12	(
ARGUMENT	5068:29	5068:29	12	tif
FIELD	5068:29	5068:29	13	tif
LEAF_NODE	5068:29	5068:29	14	tif
LEAF_NODE	5068:32	5068:32	12	,
ARGUMENT	5068:33	5068:33	12	dp
FIELD	5068:33	5068:33	13	dp
LEAF_NODE	5068:33	5068:33	14	dp
LEAF_NODE	5068:35	5068:35	12	,
ARGUMENT	5068:36	5068:36	12	& data
UNARY_EXPR	5068:36	5068:37	13	& data
UNARY_OPERATOR	5068:36	5068:36	14	&
LEAF_NODE	5068:36	5068:36	15	&
FIELD	5068:37	5068:37	14	data
LEAF_NODE	5068:37	5068:37	15	data
LEAF_NODE	5068:41	5068:41	12	)
LEAF_NODE	5068:42	5068:42	8	;
SELECTION	5069:4	5070:4	7	
KEYWORD	5069:4	5069:4	8	if
LEAF_NODE	5069:4	5069:4	9	if
LEAF_NODE	5069:7	5069:7	8	(
CONDITION	5069:8	5069:8	8	err == TIFFReadDirEntryErrOk
EXPR	5069:8	5069:13	9	err == TIFFReadDirEntryErrOk
FIELD	5069:8	5069:8	10	err
LEAF_NODE	5069:8	5069:8	11	err
EQ_OPERATOR	5069:11	5069:11	10	==
LEAF_NODE	5069:11	5069:11	11	==
FIELD	5069:13	5069:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5069:13	5069:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5069:34	5069:34	8	)
STATEMENTS	5070:4	5073:4	8	
LEAF_NODE	5070:4	5070:4	9	{
STATEMENTS	5071:5	5071:5	9	
SELECTION	5071:5	5072:6	10	
KEYWORD	5071:5	5071:5	11	if
LEAF_NODE	5071:5	5071:5	12	if
LEAF_NODE	5071:8	5071:8	11	(
CONDITION	5071:9	5071:9	11	! TIFFSetField ( tif , dp -> tdir_tag , data )
EXPR	5071:9	5071:9	12	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_EXPR	5071:9	5071:10	13	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_OPERATOR	5071:9	5071:9	14	!
LEAF_NODE	5071:9	5071:9	15	!
FUNCTION_CALL	5071:10	5071:44	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5071:10	5071:10	15	TIFFSetField
LEAF_NODE	5071:10	5071:10	16	TIFFSetField
LEAF_NODE	5071:22	5071:22	15	(
ARGUMENT	5071:23	5071:23	15	tif
FIELD	5071:23	5071:23	16	tif
LEAF_NODE	5071:23	5071:23	17	tif
LEAF_NODE	5071:26	5071:26	15	,
ARGUMENT	5071:27	5071:27	15	dp -> tdir_tag
FIELD	5071:27	5071:31	16	dp -> tdir_tag
LEAF_NODE	5071:27	5071:27	17	dp
LEAF_NODE	5071:29	5071:29	17	->
LEAF_NODE	5071:31	5071:31	17	tdir_tag
LEAF_NODE	5071:39	5071:39	15	,
ARGUMENT	5071:40	5071:40	15	data
FIELD	5071:40	5071:40	16	data
LEAF_NODE	5071:40	5071:40	17	data
LEAF_NODE	5071:44	5071:44	15	)
LEAF_NODE	5071:45	5071:45	11	)
STATEMENTS	5072:6	5072:6	11	
JUMP_STATEMENT	5072:6	5072:15	12	return ( 0 ) ;
KEYWORD	5072:6	5072:6	13	return
LEAF_NODE	5072:6	5072:6	14	return
DESTINATION	5072:12	5072:12	13	( 0 )
EXPR	5072:12	5072:14	14	( 0 )
LEAF_NODE	5072:12	5072:12	15	(
FIELD	5072:13	5072:13	15	0
LEAF_NODE	5072:13	5072:13	16	0
LEAF_NODE	5072:14	5072:14	15	)
LEAF_NODE	5072:15	5072:15	13	;
LEAF_NODE	5073:4	5073:4	9	}
LEAF_NODE	5074:3	5074:3	6	}
JUMP_STATEMENT	5075:3	5075:8	6	break DESTINATION ;
KEYWORD	5075:3	5075:3	7	break
LEAF_NODE	5075:3	5075:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5075:8	5075:8	7	;
LABEL	5076:2	5076:25	6	case TIFF_SETGET_UINT64 :
LEAF_NODE	5076:2	5076:2	7	case
LEAF_NODE	5076:7	5076:7	7	TIFF_SETGET_UINT64
LEAF_NODE	5076:25	5076:25	7	:
LEAF_NODE	5077:3	5077:3	6	{
STATEMENTS	5078:4	5082:4	6	
SIMPLE_DECL	5078:4	5078:15	7	uint64 data ;
VAR_DECL	5078:4	5078:11	8	uint64 data
TYPE	5078:4	5078:4	9	uint64
TYPE_NAME	5078:4	5078:4	10	uint64
LEAF_NODE	5078:4	5078:4	11	uint64
NAME	5078:11	5078:11	9	data
LEAF_NODE	5078:11	5078:11	10	data
LEAF_NODE	5078:15	5078:15	8	;
EXPR_STATEMENT	5079:4	5079:35	7	assert ( fip -> field_readcount == 1 ) ;
EXPR	5079:4	5079:4	8	assert ( fip -> field_readcount == 1 )
FUNCTION_CALL	5079:4	5079:34	9	assert ( fip -> field_readcount == 1 )
CALLEE	5079:4	5079:4	10	assert
LEAF_NODE	5079:4	5079:4	11	assert
LEAF_NODE	5079:10	5079:10	10	(
ARGUMENT	5079:11	5079:33	10	fip -> field_readcount == 1
FIELD	5079:11	5079:16	11	fip -> field_readcount
LEAF_NODE	5079:11	5079:11	12	fip
LEAF_NODE	5079:14	5079:14	12	->
LEAF_NODE	5079:16	5079:16	12	field_readcount
EQ_OPERATOR	5079:31	5079:31	11	==
LEAF_NODE	5079:31	5079:31	12	==
FIELD	5079:33	5079:33	11	1
LEAF_NODE	5079:33	5079:33	12	1
LEAF_NODE	5079:34	5079:34	10	)
LEAF_NODE	5079:35	5079:35	8	;
EXPR_STATEMENT	5080:4	5080:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5080:4	5080:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5080:4	5080:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5080:4	5080:4	10	assert
LEAF_NODE	5080:4	5080:4	11	assert
LEAF_NODE	5080:10	5080:10	10	(
ARGUMENT	5080:11	5080:33	10	fip -> field_passcount == 0
FIELD	5080:11	5080:16	11	fip -> field_passcount
LEAF_NODE	5080:11	5080:11	12	fip
LEAF_NODE	5080:14	5080:14	12	->
LEAF_NODE	5080:16	5080:16	12	field_passcount
EQ_OPERATOR	5080:31	5080:31	11	==
LEAF_NODE	5080:31	5080:31	12	==
FIELD	5080:33	5080:33	11	0
LEAF_NODE	5080:33	5080:33	12	0
LEAF_NODE	5080:34	5080:34	10	)
LEAF_NODE	5080:35	5080:35	8	;
EXPR_STATEMENT	5081:4	5081:43	7	err = TIFFReadDirEntryLong8 ( tif , dp , & data ) ;
EXPR	5081:4	5081:4	8	err = TIFFReadDirEntryLong8 ( tif , dp , & data )
ASSIGN	5081:4	5081:8	9	err = TIFFReadDirEntryLong8 ( tif , dp , & data )
LVAL	5081:4	5081:4	10	err
FIELD	5081:4	5081:4	11	err
LEAF_NODE	5081:4	5081:4	12	err
ASSIGN_OP	5081:7	5081:7	10	=
LEAF_NODE	5081:7	5081:7	11	=
RVAL	5081:8	5081:8	10	TIFFReadDirEntryLong8 ( tif , dp , & data )
FUNCTION_CALL	5081:8	5081:42	11	TIFFReadDirEntryLong8 ( tif , dp , & data )
CALLEE	5081:8	5081:8	12	TIFFReadDirEntryLong8
LEAF_NODE	5081:8	5081:8	13	TIFFReadDirEntryLong8
LEAF_NODE	5081:29	5081:29	12	(
ARGUMENT	5081:30	5081:30	12	tif
FIELD	5081:30	5081:30	13	tif
LEAF_NODE	5081:30	5081:30	14	tif
LEAF_NODE	5081:33	5081:33	12	,
ARGUMENT	5081:34	5081:34	12	dp
FIELD	5081:34	5081:34	13	dp
LEAF_NODE	5081:34	5081:34	14	dp
LEAF_NODE	5081:36	5081:36	12	,
ARGUMENT	5081:37	5081:37	12	& data
UNARY_EXPR	5081:37	5081:38	13	& data
UNARY_OPERATOR	5081:37	5081:37	14	&
LEAF_NODE	5081:37	5081:37	15	&
FIELD	5081:38	5081:38	14	data
LEAF_NODE	5081:38	5081:38	15	data
LEAF_NODE	5081:42	5081:42	12	)
LEAF_NODE	5081:43	5081:43	8	;
SELECTION	5082:4	5083:4	7	
KEYWORD	5082:4	5082:4	8	if
LEAF_NODE	5082:4	5082:4	9	if
LEAF_NODE	5082:7	5082:7	8	(
CONDITION	5082:8	5082:8	8	err == TIFFReadDirEntryErrOk
EXPR	5082:8	5082:13	9	err == TIFFReadDirEntryErrOk
FIELD	5082:8	5082:8	10	err
LEAF_NODE	5082:8	5082:8	11	err
EQ_OPERATOR	5082:11	5082:11	10	==
LEAF_NODE	5082:11	5082:11	11	==
FIELD	5082:13	5082:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5082:13	5082:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5082:34	5082:34	8	)
STATEMENTS	5083:4	5086:4	8	
LEAF_NODE	5083:4	5083:4	9	{
STATEMENTS	5084:5	5084:5	9	
SELECTION	5084:5	5085:6	10	
KEYWORD	5084:5	5084:5	11	if
LEAF_NODE	5084:5	5084:5	12	if
LEAF_NODE	5084:8	5084:8	11	(
CONDITION	5084:9	5084:9	11	! TIFFSetField ( tif , dp -> tdir_tag , data )
EXPR	5084:9	5084:9	12	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_EXPR	5084:9	5084:10	13	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_OPERATOR	5084:9	5084:9	14	!
LEAF_NODE	5084:9	5084:9	15	!
FUNCTION_CALL	5084:10	5084:44	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5084:10	5084:10	15	TIFFSetField
LEAF_NODE	5084:10	5084:10	16	TIFFSetField
LEAF_NODE	5084:22	5084:22	15	(
ARGUMENT	5084:23	5084:23	15	tif
FIELD	5084:23	5084:23	16	tif
LEAF_NODE	5084:23	5084:23	17	tif
LEAF_NODE	5084:26	5084:26	15	,
ARGUMENT	5084:27	5084:27	15	dp -> tdir_tag
FIELD	5084:27	5084:31	16	dp -> tdir_tag
LEAF_NODE	5084:27	5084:27	17	dp
LEAF_NODE	5084:29	5084:29	17	->
LEAF_NODE	5084:31	5084:31	17	tdir_tag
LEAF_NODE	5084:39	5084:39	15	,
ARGUMENT	5084:40	5084:40	15	data
FIELD	5084:40	5084:40	16	data
LEAF_NODE	5084:40	5084:40	17	data
LEAF_NODE	5084:44	5084:44	15	)
LEAF_NODE	5084:45	5084:45	11	)
STATEMENTS	5085:6	5085:6	11	
JUMP_STATEMENT	5085:6	5085:15	12	return ( 0 ) ;
KEYWORD	5085:6	5085:6	13	return
LEAF_NODE	5085:6	5085:6	14	return
DESTINATION	5085:12	5085:12	13	( 0 )
EXPR	5085:12	5085:14	14	( 0 )
LEAF_NODE	5085:12	5085:12	15	(
FIELD	5085:13	5085:13	15	0
LEAF_NODE	5085:13	5085:13	16	0
LEAF_NODE	5085:14	5085:14	15	)
LEAF_NODE	5085:15	5085:15	13	;
LEAF_NODE	5086:4	5086:4	9	}
LEAF_NODE	5087:3	5087:3	6	}
JUMP_STATEMENT	5088:3	5088:8	6	break DESTINATION ;
KEYWORD	5088:3	5088:3	7	break
LEAF_NODE	5088:3	5088:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5088:8	5088:8	7	;
LABEL	5089:2	5089:24	6	case TIFF_SETGET_FLOAT :
LEAF_NODE	5089:2	5089:2	7	case
LEAF_NODE	5089:7	5089:7	7	TIFF_SETGET_FLOAT
LEAF_NODE	5089:24	5089:24	7	:
LEAF_NODE	5090:3	5090:3	6	{
STATEMENTS	5091:4	5095:4	6	
SIMPLE_DECL	5091:4	5091:14	7	float data ;
VAR_DECL	5091:4	5091:10	8	float data
TYPE	5091:4	5091:4	9	float
TYPE_NAME	5091:4	5091:4	10	float
LEAF_NODE	5091:4	5091:4	11	float
NAME	5091:10	5091:10	9	data
LEAF_NODE	5091:10	5091:10	10	data
LEAF_NODE	5091:14	5091:14	8	;
EXPR_STATEMENT	5092:4	5092:35	7	assert ( fip -> field_readcount == 1 ) ;
EXPR	5092:4	5092:4	8	assert ( fip -> field_readcount == 1 )
FUNCTION_CALL	5092:4	5092:34	9	assert ( fip -> field_readcount == 1 )
CALLEE	5092:4	5092:4	10	assert
LEAF_NODE	5092:4	5092:4	11	assert
LEAF_NODE	5092:10	5092:10	10	(
ARGUMENT	5092:11	5092:33	10	fip -> field_readcount == 1
FIELD	5092:11	5092:16	11	fip -> field_readcount
LEAF_NODE	5092:11	5092:11	12	fip
LEAF_NODE	5092:14	5092:14	12	->
LEAF_NODE	5092:16	5092:16	12	field_readcount
EQ_OPERATOR	5092:31	5092:31	11	==
LEAF_NODE	5092:31	5092:31	12	==
FIELD	5092:33	5092:33	11	1
LEAF_NODE	5092:33	5092:33	12	1
LEAF_NODE	5092:34	5092:34	10	)
LEAF_NODE	5092:35	5092:35	8	;
EXPR_STATEMENT	5093:4	5093:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5093:4	5093:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5093:4	5093:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5093:4	5093:4	10	assert
LEAF_NODE	5093:4	5093:4	11	assert
LEAF_NODE	5093:10	5093:10	10	(
ARGUMENT	5093:11	5093:33	10	fip -> field_passcount == 0
FIELD	5093:11	5093:16	11	fip -> field_passcount
LEAF_NODE	5093:11	5093:11	12	fip
LEAF_NODE	5093:14	5093:14	12	->
LEAF_NODE	5093:16	5093:16	12	field_passcount
EQ_OPERATOR	5093:31	5093:31	11	==
LEAF_NODE	5093:31	5093:31	12	==
FIELD	5093:33	5093:33	11	0
LEAF_NODE	5093:33	5093:33	12	0
LEAF_NODE	5093:34	5093:34	10	)
LEAF_NODE	5093:35	5093:35	8	;
EXPR_STATEMENT	5094:4	5094:43	7	err = TIFFReadDirEntryFloat ( tif , dp , & data ) ;
EXPR	5094:4	5094:4	8	err = TIFFReadDirEntryFloat ( tif , dp , & data )
ASSIGN	5094:4	5094:8	9	err = TIFFReadDirEntryFloat ( tif , dp , & data )
LVAL	5094:4	5094:4	10	err
FIELD	5094:4	5094:4	11	err
LEAF_NODE	5094:4	5094:4	12	err
ASSIGN_OP	5094:7	5094:7	10	=
LEAF_NODE	5094:7	5094:7	11	=
RVAL	5094:8	5094:8	10	TIFFReadDirEntryFloat ( tif , dp , & data )
FUNCTION_CALL	5094:8	5094:42	11	TIFFReadDirEntryFloat ( tif , dp , & data )
CALLEE	5094:8	5094:8	12	TIFFReadDirEntryFloat
LEAF_NODE	5094:8	5094:8	13	TIFFReadDirEntryFloat
LEAF_NODE	5094:29	5094:29	12	(
ARGUMENT	5094:30	5094:30	12	tif
FIELD	5094:30	5094:30	13	tif
LEAF_NODE	5094:30	5094:30	14	tif
LEAF_NODE	5094:33	5094:33	12	,
ARGUMENT	5094:34	5094:34	12	dp
FIELD	5094:34	5094:34	13	dp
LEAF_NODE	5094:34	5094:34	14	dp
LEAF_NODE	5094:36	5094:36	12	,
ARGUMENT	5094:37	5094:37	12	& data
UNARY_EXPR	5094:37	5094:38	13	& data
UNARY_OPERATOR	5094:37	5094:37	14	&
LEAF_NODE	5094:37	5094:37	15	&
FIELD	5094:38	5094:38	14	data
LEAF_NODE	5094:38	5094:38	15	data
LEAF_NODE	5094:42	5094:42	12	)
LEAF_NODE	5094:43	5094:43	8	;
SELECTION	5095:4	5096:4	7	
KEYWORD	5095:4	5095:4	8	if
LEAF_NODE	5095:4	5095:4	9	if
LEAF_NODE	5095:7	5095:7	8	(
CONDITION	5095:8	5095:8	8	err == TIFFReadDirEntryErrOk
EXPR	5095:8	5095:13	9	err == TIFFReadDirEntryErrOk
FIELD	5095:8	5095:8	10	err
LEAF_NODE	5095:8	5095:8	11	err
EQ_OPERATOR	5095:11	5095:11	10	==
LEAF_NODE	5095:11	5095:11	11	==
FIELD	5095:13	5095:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5095:13	5095:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5095:34	5095:34	8	)
STATEMENTS	5096:4	5099:4	8	
LEAF_NODE	5096:4	5096:4	9	{
STATEMENTS	5097:5	5097:5	9	
SELECTION	5097:5	5098:6	10	
KEYWORD	5097:5	5097:5	11	if
LEAF_NODE	5097:5	5097:5	12	if
LEAF_NODE	5097:8	5097:8	11	(
CONDITION	5097:9	5097:9	11	! TIFFSetField ( tif , dp -> tdir_tag , data )
EXPR	5097:9	5097:9	12	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_EXPR	5097:9	5097:10	13	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_OPERATOR	5097:9	5097:9	14	!
LEAF_NODE	5097:9	5097:9	15	!
FUNCTION_CALL	5097:10	5097:44	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5097:10	5097:10	15	TIFFSetField
LEAF_NODE	5097:10	5097:10	16	TIFFSetField
LEAF_NODE	5097:22	5097:22	15	(
ARGUMENT	5097:23	5097:23	15	tif
FIELD	5097:23	5097:23	16	tif
LEAF_NODE	5097:23	5097:23	17	tif
LEAF_NODE	5097:26	5097:26	15	,
ARGUMENT	5097:27	5097:27	15	dp -> tdir_tag
FIELD	5097:27	5097:31	16	dp -> tdir_tag
LEAF_NODE	5097:27	5097:27	17	dp
LEAF_NODE	5097:29	5097:29	17	->
LEAF_NODE	5097:31	5097:31	17	tdir_tag
LEAF_NODE	5097:39	5097:39	15	,
ARGUMENT	5097:40	5097:40	15	data
FIELD	5097:40	5097:40	16	data
LEAF_NODE	5097:40	5097:40	17	data
LEAF_NODE	5097:44	5097:44	15	)
LEAF_NODE	5097:45	5097:45	11	)
STATEMENTS	5098:6	5098:6	11	
JUMP_STATEMENT	5098:6	5098:15	12	return ( 0 ) ;
KEYWORD	5098:6	5098:6	13	return
LEAF_NODE	5098:6	5098:6	14	return
DESTINATION	5098:12	5098:12	13	( 0 )
EXPR	5098:12	5098:14	14	( 0 )
LEAF_NODE	5098:12	5098:12	15	(
FIELD	5098:13	5098:13	15	0
LEAF_NODE	5098:13	5098:13	16	0
LEAF_NODE	5098:14	5098:14	15	)
LEAF_NODE	5098:15	5098:15	13	;
LEAF_NODE	5099:4	5099:4	9	}
LEAF_NODE	5100:3	5100:3	6	}
JUMP_STATEMENT	5101:3	5101:8	6	break DESTINATION ;
KEYWORD	5101:3	5101:3	7	break
LEAF_NODE	5101:3	5101:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5101:8	5101:8	7	;
LABEL	5102:2	5102:25	6	case TIFF_SETGET_DOUBLE :
LEAF_NODE	5102:2	5102:2	7	case
LEAF_NODE	5102:7	5102:7	7	TIFF_SETGET_DOUBLE
LEAF_NODE	5102:25	5102:25	7	:
LEAF_NODE	5103:3	5103:3	6	{
STATEMENTS	5104:4	5108:4	6	
SIMPLE_DECL	5104:4	5104:15	7	double data ;
VAR_DECL	5104:4	5104:11	8	double data
TYPE	5104:4	5104:4	9	double
TYPE_NAME	5104:4	5104:4	10	double
LEAF_NODE	5104:4	5104:4	11	double
NAME	5104:11	5104:11	9	data
LEAF_NODE	5104:11	5104:11	10	data
LEAF_NODE	5104:15	5104:15	8	;
EXPR_STATEMENT	5105:4	5105:35	7	assert ( fip -> field_readcount == 1 ) ;
EXPR	5105:4	5105:4	8	assert ( fip -> field_readcount == 1 )
FUNCTION_CALL	5105:4	5105:34	9	assert ( fip -> field_readcount == 1 )
CALLEE	5105:4	5105:4	10	assert
LEAF_NODE	5105:4	5105:4	11	assert
LEAF_NODE	5105:10	5105:10	10	(
ARGUMENT	5105:11	5105:33	10	fip -> field_readcount == 1
FIELD	5105:11	5105:16	11	fip -> field_readcount
LEAF_NODE	5105:11	5105:11	12	fip
LEAF_NODE	5105:14	5105:14	12	->
LEAF_NODE	5105:16	5105:16	12	field_readcount
EQ_OPERATOR	5105:31	5105:31	11	==
LEAF_NODE	5105:31	5105:31	12	==
FIELD	5105:33	5105:33	11	1
LEAF_NODE	5105:33	5105:33	12	1
LEAF_NODE	5105:34	5105:34	10	)
LEAF_NODE	5105:35	5105:35	8	;
EXPR_STATEMENT	5106:4	5106:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5106:4	5106:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5106:4	5106:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5106:4	5106:4	10	assert
LEAF_NODE	5106:4	5106:4	11	assert
LEAF_NODE	5106:10	5106:10	10	(
ARGUMENT	5106:11	5106:33	10	fip -> field_passcount == 0
FIELD	5106:11	5106:16	11	fip -> field_passcount
LEAF_NODE	5106:11	5106:11	12	fip
LEAF_NODE	5106:14	5106:14	12	->
LEAF_NODE	5106:16	5106:16	12	field_passcount
EQ_OPERATOR	5106:31	5106:31	11	==
LEAF_NODE	5106:31	5106:31	12	==
FIELD	5106:33	5106:33	11	0
LEAF_NODE	5106:33	5106:33	12	0
LEAF_NODE	5106:34	5106:34	10	)
LEAF_NODE	5106:35	5106:35	8	;
EXPR_STATEMENT	5107:4	5107:44	7	err = TIFFReadDirEntryDouble ( tif , dp , & data ) ;
EXPR	5107:4	5107:4	8	err = TIFFReadDirEntryDouble ( tif , dp , & data )
ASSIGN	5107:4	5107:8	9	err = TIFFReadDirEntryDouble ( tif , dp , & data )
LVAL	5107:4	5107:4	10	err
FIELD	5107:4	5107:4	11	err
LEAF_NODE	5107:4	5107:4	12	err
ASSIGN_OP	5107:7	5107:7	10	=
LEAF_NODE	5107:7	5107:7	11	=
RVAL	5107:8	5107:8	10	TIFFReadDirEntryDouble ( tif , dp , & data )
FUNCTION_CALL	5107:8	5107:43	11	TIFFReadDirEntryDouble ( tif , dp , & data )
CALLEE	5107:8	5107:8	12	TIFFReadDirEntryDouble
LEAF_NODE	5107:8	5107:8	13	TIFFReadDirEntryDouble
LEAF_NODE	5107:30	5107:30	12	(
ARGUMENT	5107:31	5107:31	12	tif
FIELD	5107:31	5107:31	13	tif
LEAF_NODE	5107:31	5107:31	14	tif
LEAF_NODE	5107:34	5107:34	12	,
ARGUMENT	5107:35	5107:35	12	dp
FIELD	5107:35	5107:35	13	dp
LEAF_NODE	5107:35	5107:35	14	dp
LEAF_NODE	5107:37	5107:37	12	,
ARGUMENT	5107:38	5107:38	12	& data
UNARY_EXPR	5107:38	5107:39	13	& data
UNARY_OPERATOR	5107:38	5107:38	14	&
LEAF_NODE	5107:38	5107:38	15	&
FIELD	5107:39	5107:39	14	data
LEAF_NODE	5107:39	5107:39	15	data
LEAF_NODE	5107:43	5107:43	12	)
LEAF_NODE	5107:44	5107:44	8	;
SELECTION	5108:4	5109:4	7	
KEYWORD	5108:4	5108:4	8	if
LEAF_NODE	5108:4	5108:4	9	if
LEAF_NODE	5108:7	5108:7	8	(
CONDITION	5108:8	5108:8	8	err == TIFFReadDirEntryErrOk
EXPR	5108:8	5108:13	9	err == TIFFReadDirEntryErrOk
FIELD	5108:8	5108:8	10	err
LEAF_NODE	5108:8	5108:8	11	err
EQ_OPERATOR	5108:11	5108:11	10	==
LEAF_NODE	5108:11	5108:11	11	==
FIELD	5108:13	5108:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5108:13	5108:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5108:34	5108:34	8	)
STATEMENTS	5109:4	5112:4	8	
LEAF_NODE	5109:4	5109:4	9	{
STATEMENTS	5110:5	5110:5	9	
SELECTION	5110:5	5111:6	10	
KEYWORD	5110:5	5110:5	11	if
LEAF_NODE	5110:5	5110:5	12	if
LEAF_NODE	5110:8	5110:8	11	(
CONDITION	5110:9	5110:9	11	! TIFFSetField ( tif , dp -> tdir_tag , data )
EXPR	5110:9	5110:9	12	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_EXPR	5110:9	5110:10	13	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_OPERATOR	5110:9	5110:9	14	!
LEAF_NODE	5110:9	5110:9	15	!
FUNCTION_CALL	5110:10	5110:44	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5110:10	5110:10	15	TIFFSetField
LEAF_NODE	5110:10	5110:10	16	TIFFSetField
LEAF_NODE	5110:22	5110:22	15	(
ARGUMENT	5110:23	5110:23	15	tif
FIELD	5110:23	5110:23	16	tif
LEAF_NODE	5110:23	5110:23	17	tif
LEAF_NODE	5110:26	5110:26	15	,
ARGUMENT	5110:27	5110:27	15	dp -> tdir_tag
FIELD	5110:27	5110:31	16	dp -> tdir_tag
LEAF_NODE	5110:27	5110:27	17	dp
LEAF_NODE	5110:29	5110:29	17	->
LEAF_NODE	5110:31	5110:31	17	tdir_tag
LEAF_NODE	5110:39	5110:39	15	,
ARGUMENT	5110:40	5110:40	15	data
FIELD	5110:40	5110:40	16	data
LEAF_NODE	5110:40	5110:40	17	data
LEAF_NODE	5110:44	5110:44	15	)
LEAF_NODE	5110:45	5110:45	11	)
STATEMENTS	5111:6	5111:6	11	
JUMP_STATEMENT	5111:6	5111:15	12	return ( 0 ) ;
KEYWORD	5111:6	5111:6	13	return
LEAF_NODE	5111:6	5111:6	14	return
DESTINATION	5111:12	5111:12	13	( 0 )
EXPR	5111:12	5111:14	14	( 0 )
LEAF_NODE	5111:12	5111:12	15	(
FIELD	5111:13	5111:13	15	0
LEAF_NODE	5111:13	5111:13	16	0
LEAF_NODE	5111:14	5111:14	15	)
LEAF_NODE	5111:15	5111:15	13	;
LEAF_NODE	5112:4	5112:4	9	}
LEAF_NODE	5113:3	5113:3	6	}
JUMP_STATEMENT	5114:3	5114:8	6	break DESTINATION ;
KEYWORD	5114:3	5114:3	7	break
LEAF_NODE	5114:3	5114:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5114:8	5114:8	7	;
LABEL	5115:2	5115:23	6	case TIFF_SETGET_IFD8 :
LEAF_NODE	5115:2	5115:2	7	case
LEAF_NODE	5115:7	5115:7	7	TIFF_SETGET_IFD8
LEAF_NODE	5115:23	5115:23	7	:
LEAF_NODE	5116:3	5116:3	6	{
STATEMENTS	5117:4	5121:4	6	
SIMPLE_DECL	5117:4	5117:15	7	uint64 data ;
VAR_DECL	5117:4	5117:11	8	uint64 data
TYPE	5117:4	5117:4	9	uint64
TYPE_NAME	5117:4	5117:4	10	uint64
LEAF_NODE	5117:4	5117:4	11	uint64
NAME	5117:11	5117:11	9	data
LEAF_NODE	5117:11	5117:11	10	data
LEAF_NODE	5117:15	5117:15	8	;
EXPR_STATEMENT	5118:4	5118:35	7	assert ( fip -> field_readcount == 1 ) ;
EXPR	5118:4	5118:4	8	assert ( fip -> field_readcount == 1 )
FUNCTION_CALL	5118:4	5118:34	9	assert ( fip -> field_readcount == 1 )
CALLEE	5118:4	5118:4	10	assert
LEAF_NODE	5118:4	5118:4	11	assert
LEAF_NODE	5118:10	5118:10	10	(
ARGUMENT	5118:11	5118:33	10	fip -> field_readcount == 1
FIELD	5118:11	5118:16	11	fip -> field_readcount
LEAF_NODE	5118:11	5118:11	12	fip
LEAF_NODE	5118:14	5118:14	12	->
LEAF_NODE	5118:16	5118:16	12	field_readcount
EQ_OPERATOR	5118:31	5118:31	11	==
LEAF_NODE	5118:31	5118:31	12	==
FIELD	5118:33	5118:33	11	1
LEAF_NODE	5118:33	5118:33	12	1
LEAF_NODE	5118:34	5118:34	10	)
LEAF_NODE	5118:35	5118:35	8	;
EXPR_STATEMENT	5119:4	5119:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5119:4	5119:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5119:4	5119:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5119:4	5119:4	10	assert
LEAF_NODE	5119:4	5119:4	11	assert
LEAF_NODE	5119:10	5119:10	10	(
ARGUMENT	5119:11	5119:33	10	fip -> field_passcount == 0
FIELD	5119:11	5119:16	11	fip -> field_passcount
LEAF_NODE	5119:11	5119:11	12	fip
LEAF_NODE	5119:14	5119:14	12	->
LEAF_NODE	5119:16	5119:16	12	field_passcount
EQ_OPERATOR	5119:31	5119:31	11	==
LEAF_NODE	5119:31	5119:31	12	==
FIELD	5119:33	5119:33	11	0
LEAF_NODE	5119:33	5119:33	12	0
LEAF_NODE	5119:34	5119:34	10	)
LEAF_NODE	5119:35	5119:35	8	;
EXPR_STATEMENT	5120:4	5120:42	7	err = TIFFReadDirEntryIfd8 ( tif , dp , & data ) ;
EXPR	5120:4	5120:4	8	err = TIFFReadDirEntryIfd8 ( tif , dp , & data )
ASSIGN	5120:4	5120:8	9	err = TIFFReadDirEntryIfd8 ( tif , dp , & data )
LVAL	5120:4	5120:4	10	err
FIELD	5120:4	5120:4	11	err
LEAF_NODE	5120:4	5120:4	12	err
ASSIGN_OP	5120:7	5120:7	10	=
LEAF_NODE	5120:7	5120:7	11	=
RVAL	5120:8	5120:8	10	TIFFReadDirEntryIfd8 ( tif , dp , & data )
FUNCTION_CALL	5120:8	5120:41	11	TIFFReadDirEntryIfd8 ( tif , dp , & data )
CALLEE	5120:8	5120:8	12	TIFFReadDirEntryIfd8
LEAF_NODE	5120:8	5120:8	13	TIFFReadDirEntryIfd8
LEAF_NODE	5120:28	5120:28	12	(
ARGUMENT	5120:29	5120:29	12	tif
FIELD	5120:29	5120:29	13	tif
LEAF_NODE	5120:29	5120:29	14	tif
LEAF_NODE	5120:32	5120:32	12	,
ARGUMENT	5120:33	5120:33	12	dp
FIELD	5120:33	5120:33	13	dp
LEAF_NODE	5120:33	5120:33	14	dp
LEAF_NODE	5120:35	5120:35	12	,
ARGUMENT	5120:36	5120:36	12	& data
UNARY_EXPR	5120:36	5120:37	13	& data
UNARY_OPERATOR	5120:36	5120:36	14	&
LEAF_NODE	5120:36	5120:36	15	&
FIELD	5120:37	5120:37	14	data
LEAF_NODE	5120:37	5120:37	15	data
LEAF_NODE	5120:41	5120:41	12	)
LEAF_NODE	5120:42	5120:42	8	;
SELECTION	5121:4	5122:4	7	
KEYWORD	5121:4	5121:4	8	if
LEAF_NODE	5121:4	5121:4	9	if
LEAF_NODE	5121:7	5121:7	8	(
CONDITION	5121:8	5121:8	8	err == TIFFReadDirEntryErrOk
EXPR	5121:8	5121:13	9	err == TIFFReadDirEntryErrOk
FIELD	5121:8	5121:8	10	err
LEAF_NODE	5121:8	5121:8	11	err
EQ_OPERATOR	5121:11	5121:11	10	==
LEAF_NODE	5121:11	5121:11	11	==
FIELD	5121:13	5121:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5121:13	5121:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5121:34	5121:34	8	)
STATEMENTS	5122:4	5125:4	8	
LEAF_NODE	5122:4	5122:4	9	{
STATEMENTS	5123:5	5123:5	9	
SELECTION	5123:5	5124:6	10	
KEYWORD	5123:5	5123:5	11	if
LEAF_NODE	5123:5	5123:5	12	if
LEAF_NODE	5123:8	5123:8	11	(
CONDITION	5123:9	5123:9	11	! TIFFSetField ( tif , dp -> tdir_tag , data )
EXPR	5123:9	5123:9	12	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_EXPR	5123:9	5123:10	13	! TIFFSetField ( tif , dp -> tdir_tag , data )
UNARY_OPERATOR	5123:9	5123:9	14	!
LEAF_NODE	5123:9	5123:9	15	!
FUNCTION_CALL	5123:10	5123:44	14	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5123:10	5123:10	15	TIFFSetField
LEAF_NODE	5123:10	5123:10	16	TIFFSetField
LEAF_NODE	5123:22	5123:22	15	(
ARGUMENT	5123:23	5123:23	15	tif
FIELD	5123:23	5123:23	16	tif
LEAF_NODE	5123:23	5123:23	17	tif
LEAF_NODE	5123:26	5123:26	15	,
ARGUMENT	5123:27	5123:27	15	dp -> tdir_tag
FIELD	5123:27	5123:31	16	dp -> tdir_tag
LEAF_NODE	5123:27	5123:27	17	dp
LEAF_NODE	5123:29	5123:29	17	->
LEAF_NODE	5123:31	5123:31	17	tdir_tag
LEAF_NODE	5123:39	5123:39	15	,
ARGUMENT	5123:40	5123:40	15	data
FIELD	5123:40	5123:40	16	data
LEAF_NODE	5123:40	5123:40	17	data
LEAF_NODE	5123:44	5123:44	15	)
LEAF_NODE	5123:45	5123:45	11	)
STATEMENTS	5124:6	5124:6	11	
JUMP_STATEMENT	5124:6	5124:15	12	return ( 0 ) ;
KEYWORD	5124:6	5124:6	13	return
LEAF_NODE	5124:6	5124:6	14	return
DESTINATION	5124:12	5124:12	13	( 0 )
EXPR	5124:12	5124:14	14	( 0 )
LEAF_NODE	5124:12	5124:12	15	(
FIELD	5124:13	5124:13	15	0
LEAF_NODE	5124:13	5124:13	16	0
LEAF_NODE	5124:14	5124:14	15	)
LEAF_NODE	5124:15	5124:15	13	;
LEAF_NODE	5125:4	5125:4	9	}
LEAF_NODE	5126:3	5126:3	6	}
JUMP_STATEMENT	5127:3	5127:8	6	break DESTINATION ;
KEYWORD	5127:3	5127:3	7	break
LEAF_NODE	5127:3	5127:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5127:8	5127:8	7	;
LABEL	5128:2	5128:30	6	case TIFF_SETGET_UINT16_PAIR :
LEAF_NODE	5128:2	5128:2	7	case
LEAF_NODE	5128:7	5128:7	7	TIFF_SETGET_UINT16_PAIR
LEAF_NODE	5128:30	5128:30	7	:
LEAF_NODE	5129:3	5129:3	6	{
STATEMENTS	5130:4	5140:4	6	
SIMPLE_DECL	5130:4	5130:16	7	uint16 * data ;
VAR_DECL	5130:4	5130:12	8	uint16 * data
TYPE	5130:4	5130:10	9	uint16 *
TYPE_NAME	5130:4	5130:4	10	uint16
LEAF_NODE	5130:4	5130:4	11	uint16
POINTER	5130:10	5130:10	10	*
LEAF_NODE	5130:10	5130:10	11	*
NAME	5130:12	5130:12	9	data
LEAF_NODE	5130:12	5130:12	10	data
LEAF_NODE	5130:16	5130:16	8	;
EXPR_STATEMENT	5131:4	5131:35	7	assert ( fip -> field_readcount == 2 ) ;
EXPR	5131:4	5131:4	8	assert ( fip -> field_readcount == 2 )
FUNCTION_CALL	5131:4	5131:34	9	assert ( fip -> field_readcount == 2 )
CALLEE	5131:4	5131:4	10	assert
LEAF_NODE	5131:4	5131:4	11	assert
LEAF_NODE	5131:10	5131:10	10	(
ARGUMENT	5131:11	5131:33	10	fip -> field_readcount == 2
FIELD	5131:11	5131:16	11	fip -> field_readcount
LEAF_NODE	5131:11	5131:11	12	fip
LEAF_NODE	5131:14	5131:14	12	->
LEAF_NODE	5131:16	5131:16	12	field_readcount
EQ_OPERATOR	5131:31	5131:31	11	==
LEAF_NODE	5131:31	5131:31	12	==
FIELD	5131:33	5131:33	11	2
LEAF_NODE	5131:33	5131:33	12	2
LEAF_NODE	5131:34	5131:34	10	)
LEAF_NODE	5131:35	5131:35	8	;
EXPR_STATEMENT	5132:4	5132:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5132:4	5132:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5132:4	5132:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5132:4	5132:4	10	assert
LEAF_NODE	5132:4	5132:4	11	assert
LEAF_NODE	5132:10	5132:10	10	(
ARGUMENT	5132:11	5132:33	10	fip -> field_passcount == 0
FIELD	5132:11	5132:16	11	fip -> field_passcount
LEAF_NODE	5132:11	5132:11	12	fip
LEAF_NODE	5132:14	5132:14	12	->
LEAF_NODE	5132:16	5132:16	12	field_passcount
EQ_OPERATOR	5132:31	5132:31	11	==
LEAF_NODE	5132:31	5132:31	12	==
FIELD	5132:33	5132:33	11	0
LEAF_NODE	5132:33	5132:33	12	0
LEAF_NODE	5132:34	5132:34	10	)
LEAF_NODE	5132:35	5132:35	8	;
SELECTION	5133:4	5133:27	7	
KEYWORD	5133:4	5133:4	8	if
LEAF_NODE	5133:4	5133:4	9	if
LEAF_NODE	5133:7	5133:7	8	(
CONDITION	5133:8	5133:8	8	dp -> tdir_count != 2
EXPR	5133:8	5133:24	9	dp -> tdir_count != 2
FIELD	5133:8	5133:12	10	dp -> tdir_count
LEAF_NODE	5133:8	5133:8	11	dp
LEAF_NODE	5133:10	5133:10	11	->
LEAF_NODE	5133:12	5133:12	11	tdir_count
EQ_OPERATOR	5133:22	5133:22	10	!=
LEAF_NODE	5133:22	5133:22	11	!=
FIELD	5133:24	5133:24	10	2
LEAF_NODE	5133:24	5133:24	11	2
LEAF_NODE	5133:25	5133:25	8	)
STATEMENTS	5133:27	5138:4	8	
LEAF_NODE	5133:27	5133:27	9	{
STATEMENTS	5134:5	5137:5	9	
EXPR_STATEMENT	5134:5	5136:49	10	TIFFWarningExt ( tif -> tif_clientdata , module , "incorrect count for field \"%s\", expected 2, got %d" , fip -> field_name , ( int ) dp -> tdir_count ) ;
EXPR	5134:5	5134:5	11	TIFFWarningExt ( tif -> tif_clientdata , module , "incorrect count for field \"%s\", expected 2, got %d" , fip -> field_name , ( int ) dp -> tdir_count )
FUNCTION_CALL	5134:5	5136:48	12	TIFFWarningExt ( tif -> tif_clientdata , module , "incorrect count for field \"%s\", expected 2, got %d" , fip -> field_name , ( int ) dp -> tdir_count )
CALLEE	5134:5	5134:5	13	TIFFWarningExt
LEAF_NODE	5134:5	5134:5	14	TIFFWarningExt
LEAF_NODE	5134:19	5134:19	13	(
ARGUMENT	5134:20	5134:20	13	tif -> tif_clientdata
FIELD	5134:20	5134:25	14	tif -> tif_clientdata
LEAF_NODE	5134:20	5134:20	15	tif
LEAF_NODE	5134:23	5134:23	15	->
LEAF_NODE	5134:25	5134:25	15	tif_clientdata
LEAF_NODE	5134:39	5134:39	13	,
ARGUMENT	5134:40	5134:40	13	module
FIELD	5134:40	5134:40	14	module
LEAF_NODE	5134:40	5134:40	15	module
LEAF_NODE	5134:46	5134:46	13	,
ARGUMENT	5135:13	5135:13	13	"incorrect count for field \"%s\", expected 2, got %d"
FIELD	5135:13	5135:13	14	"incorrect count for field \"%s\", expected 2, got %d"
LEAF_NODE	5135:13	5135:13	15	"incorrect count for field \"%s\", expected 2, got %d"
LEAF_NODE	5135:67	5135:67	13	,
ARGUMENT	5136:13	5136:13	13	fip -> field_name
FIELD	5136:13	5136:18	14	fip -> field_name
LEAF_NODE	5136:13	5136:13	15	fip
LEAF_NODE	5136:16	5136:16	15	->
LEAF_NODE	5136:18	5136:18	15	field_name
LEAF_NODE	5136:28	5136:28	13	,
ARGUMENT	5136:29	5136:34	13	( int ) dp -> tdir_count
LEAF_NODE	5136:29	5136:29	14	(
TYPE_NAME	5136:30	5136:30	14	int
LEAF_NODE	5136:30	5136:30	15	int
LEAF_NODE	5136:33	5136:33	14	)
FIELD	5136:34	5136:38	14	dp -> tdir_count
LEAF_NODE	5136:34	5136:34	15	dp
LEAF_NODE	5136:36	5136:36	15	->
LEAF_NODE	5136:38	5136:38	15	tdir_count
LEAF_NODE	5136:48	5136:48	13	)
LEAF_NODE	5136:49	5136:49	11	;
JUMP_STATEMENT	5137:5	5137:14	10	return ( 0 ) ;
KEYWORD	5137:5	5137:5	11	return
LEAF_NODE	5137:5	5137:5	12	return
DESTINATION	5137:11	5137:11	11	( 0 )
EXPR	5137:11	5137:13	12	( 0 )
LEAF_NODE	5137:11	5137:11	13	(
FIELD	5137:12	5137:12	13	0
LEAF_NODE	5137:12	5137:12	14	0
LEAF_NODE	5137:13	5137:13	13	)
LEAF_NODE	5137:14	5137:14	11	;
LEAF_NODE	5138:4	5138:4	9	}
EXPR_STATEMENT	5139:4	5139:48	7	err = TIFFReadDirEntryShortArray ( tif , dp , & data ) ;
EXPR	5139:4	5139:4	8	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
ASSIGN	5139:4	5139:8	9	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
LVAL	5139:4	5139:4	10	err
FIELD	5139:4	5139:4	11	err
LEAF_NODE	5139:4	5139:4	12	err
ASSIGN_OP	5139:7	5139:7	10	=
LEAF_NODE	5139:7	5139:7	11	=
RVAL	5139:8	5139:8	10	TIFFReadDirEntryShortArray ( tif , dp , & data )
FUNCTION_CALL	5139:8	5139:47	11	TIFFReadDirEntryShortArray ( tif , dp , & data )
CALLEE	5139:8	5139:8	12	TIFFReadDirEntryShortArray
LEAF_NODE	5139:8	5139:8	13	TIFFReadDirEntryShortArray
LEAF_NODE	5139:34	5139:34	12	(
ARGUMENT	5139:35	5139:35	12	tif
FIELD	5139:35	5139:35	13	tif
LEAF_NODE	5139:35	5139:35	14	tif
LEAF_NODE	5139:38	5139:38	12	,
ARGUMENT	5139:39	5139:39	12	dp
FIELD	5139:39	5139:39	13	dp
LEAF_NODE	5139:39	5139:39	14	dp
LEAF_NODE	5139:41	5139:41	12	,
ARGUMENT	5139:42	5139:42	12	& data
UNARY_EXPR	5139:42	5139:43	13	& data
UNARY_OPERATOR	5139:42	5139:42	14	&
LEAF_NODE	5139:42	5139:42	15	&
FIELD	5139:43	5139:43	14	data
LEAF_NODE	5139:43	5139:43	15	data
LEAF_NODE	5139:47	5139:47	12	)
LEAF_NODE	5139:48	5139:48	8	;
SELECTION	5140:4	5141:4	7	
KEYWORD	5140:4	5140:4	8	if
LEAF_NODE	5140:4	5140:4	9	if
LEAF_NODE	5140:7	5140:7	8	(
CONDITION	5140:8	5140:8	8	err == TIFFReadDirEntryErrOk
EXPR	5140:8	5140:13	9	err == TIFFReadDirEntryErrOk
FIELD	5140:8	5140:8	10	err
LEAF_NODE	5140:8	5140:8	11	err
EQ_OPERATOR	5140:11	5140:11	10	==
LEAF_NODE	5140:11	5140:11	11	==
FIELD	5140:13	5140:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5140:13	5140:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5140:34	5140:34	8	)
STATEMENTS	5141:4	5147:4	8	
LEAF_NODE	5141:4	5141:4	9	{
STATEMENTS	5142:5	5145:5	9	
SIMPLE_DECL	5142:5	5142:10	10	int m ;
VAR_DECL	5142:5	5142:9	11	int m
TYPE	5142:5	5142:5	12	int
TYPE_NAME	5142:5	5142:5	13	int
LEAF_NODE	5142:5	5142:5	14	int
NAME	5142:9	5142:9	12	m
LEAF_NODE	5142:9	5142:9	13	m
LEAF_NODE	5142:10	5142:10	11	;
EXPR_STATEMENT	5143:5	5143:53	10	m = TIFFSetField ( tif , dp -> tdir_tag , data [ 0 ] , data [ 1 ] ) ;
EXPR	5143:5	5143:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , data [ 0 ] , data [ 1 ] )
ASSIGN	5143:5	5143:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , data [ 0 ] , data [ 1 ] )
LVAL	5143:5	5143:5	13	m
FIELD	5143:5	5143:5	14	m
LEAF_NODE	5143:5	5143:5	15	m
ASSIGN_OP	5143:6	5143:6	13	=
LEAF_NODE	5143:6	5143:6	14	=
RVAL	5143:7	5143:7	13	TIFFSetField ( tif , dp -> tdir_tag , data [ 0 ] , data [ 1 ] )
FUNCTION_CALL	5143:7	5143:52	14	TIFFSetField ( tif , dp -> tdir_tag , data [ 0 ] , data [ 1 ] )
CALLEE	5143:7	5143:7	15	TIFFSetField
LEAF_NODE	5143:7	5143:7	16	TIFFSetField
LEAF_NODE	5143:19	5143:19	15	(
ARGUMENT	5143:20	5143:20	15	tif
FIELD	5143:20	5143:20	16	tif
LEAF_NODE	5143:20	5143:20	17	tif
LEAF_NODE	5143:23	5143:23	15	,
ARGUMENT	5143:24	5143:24	15	dp -> tdir_tag
FIELD	5143:24	5143:28	16	dp -> tdir_tag
LEAF_NODE	5143:24	5143:24	17	dp
LEAF_NODE	5143:26	5143:26	17	->
LEAF_NODE	5143:28	5143:28	17	tdir_tag
LEAF_NODE	5143:36	5143:36	15	,
ARGUMENT	5143:37	5143:37	15	data [ 0 ]
FIELD	5143:37	5143:43	16	data [ 0 ]
LEAF_NODE	5143:37	5143:37	17	data
LEAF_NODE	5143:41	5143:41	17	[
EXPR	5143:42	5143:42	17	0
FIELD	5143:42	5143:42	18	0
LEAF_NODE	5143:42	5143:42	19	0
LEAF_NODE	5143:43	5143:43	17	]
LEAF_NODE	5143:44	5143:44	15	,
ARGUMENT	5143:45	5143:45	15	data [ 1 ]
FIELD	5143:45	5143:51	16	data [ 1 ]
LEAF_NODE	5143:45	5143:45	17	data
LEAF_NODE	5143:49	5143:49	17	[
EXPR	5143:50	5143:50	17	1
FIELD	5143:50	5143:50	18	1
LEAF_NODE	5143:50	5143:50	19	1
LEAF_NODE	5143:51	5143:51	17	]
LEAF_NODE	5143:52	5143:52	15	)
LEAF_NODE	5143:53	5143:53	11	;
EXPR_STATEMENT	5144:5	5144:20	10	_TIFFfree ( data ) ;
EXPR	5144:5	5144:5	11	_TIFFfree ( data )
FUNCTION_CALL	5144:5	5144:19	12	_TIFFfree ( data )
CALLEE	5144:5	5144:5	13	_TIFFfree
LEAF_NODE	5144:5	5144:5	14	_TIFFfree
LEAF_NODE	5144:14	5144:14	13	(
ARGUMENT	5144:15	5144:15	13	data
FIELD	5144:15	5144:15	14	data
LEAF_NODE	5144:15	5144:15	15	data
LEAF_NODE	5144:19	5144:19	13	)
LEAF_NODE	5144:20	5144:20	11	;
SELECTION	5145:5	5146:6	10	
KEYWORD	5145:5	5145:5	11	if
LEAF_NODE	5145:5	5145:5	12	if
LEAF_NODE	5145:8	5145:8	11	(
CONDITION	5145:9	5145:9	11	! m
EXPR	5145:9	5145:9	12	! m
UNARY_EXPR	5145:9	5145:10	13	! m
UNARY_OPERATOR	5145:9	5145:9	14	!
LEAF_NODE	5145:9	5145:9	15	!
FIELD	5145:10	5145:10	14	m
LEAF_NODE	5145:10	5145:10	15	m
LEAF_NODE	5145:11	5145:11	11	)
STATEMENTS	5146:6	5146:6	11	
JUMP_STATEMENT	5146:6	5146:15	12	return ( 0 ) ;
KEYWORD	5146:6	5146:6	13	return
LEAF_NODE	5146:6	5146:6	14	return
DESTINATION	5146:12	5146:12	13	( 0 )
EXPR	5146:12	5146:14	14	( 0 )
LEAF_NODE	5146:12	5146:12	15	(
FIELD	5146:13	5146:13	15	0
LEAF_NODE	5146:13	5146:13	16	0
LEAF_NODE	5146:14	5146:14	15	)
LEAF_NODE	5146:15	5146:15	13	;
LEAF_NODE	5147:4	5147:4	9	}
LEAF_NODE	5148:3	5148:3	6	}
JUMP_STATEMENT	5149:3	5149:8	6	break DESTINATION ;
KEYWORD	5149:3	5149:3	7	break
LEAF_NODE	5149:3	5149:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5149:8	5149:8	7	;
LABEL	5150:2	5150:27	6	case TIFF_SETGET_C0_UINT8 :
LEAF_NODE	5150:2	5150:2	7	case
LEAF_NODE	5150:7	5150:7	7	TIFF_SETGET_C0_UINT8
LEAF_NODE	5150:27	5150:27	7	:
LEAF_NODE	5151:3	5151:3	6	{
STATEMENTS	5152:4	5161:4	6	
SIMPLE_DECL	5152:4	5152:15	7	uint8 * data ;
VAR_DECL	5152:4	5152:11	8	uint8 * data
TYPE	5152:4	5152:9	9	uint8 *
TYPE_NAME	5152:4	5152:4	10	uint8
LEAF_NODE	5152:4	5152:4	11	uint8
POINTER	5152:9	5152:9	10	*
LEAF_NODE	5152:9	5152:9	11	*
NAME	5152:11	5152:11	9	data
LEAF_NODE	5152:11	5152:11	10	data
LEAF_NODE	5152:15	5152:15	8	;
EXPR_STATEMENT	5153:4	5153:35	7	assert ( fip -> field_readcount >= 1 ) ;
EXPR	5153:4	5153:4	8	assert ( fip -> field_readcount >= 1 )
FUNCTION_CALL	5153:4	5153:34	9	assert ( fip -> field_readcount >= 1 )
CALLEE	5153:4	5153:4	10	assert
LEAF_NODE	5153:4	5153:4	11	assert
LEAF_NODE	5153:10	5153:10	10	(
ARGUMENT	5153:11	5153:33	10	fip -> field_readcount >= 1
FIELD	5153:11	5153:16	11	fip -> field_readcount
LEAF_NODE	5153:11	5153:11	12	fip
LEAF_NODE	5153:14	5153:14	12	->
LEAF_NODE	5153:16	5153:16	12	field_readcount
REL_OPERATOR	5153:31	5153:31	11	>=
LEAF_NODE	5153:31	5153:31	12	>=
FIELD	5153:33	5153:33	11	1
LEAF_NODE	5153:33	5153:33	12	1
LEAF_NODE	5153:34	5153:34	10	)
LEAF_NODE	5153:35	5153:35	8	;
EXPR_STATEMENT	5154:4	5154:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5154:4	5154:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5154:4	5154:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5154:4	5154:4	10	assert
LEAF_NODE	5154:4	5154:4	11	assert
LEAF_NODE	5154:10	5154:10	10	(
ARGUMENT	5154:11	5154:33	10	fip -> field_passcount == 0
FIELD	5154:11	5154:16	11	fip -> field_passcount
LEAF_NODE	5154:11	5154:11	12	fip
LEAF_NODE	5154:14	5154:14	12	->
LEAF_NODE	5154:16	5154:16	12	field_passcount
EQ_OPERATOR	5154:31	5154:31	11	==
LEAF_NODE	5154:31	5154:31	12	==
FIELD	5154:33	5154:33	11	0
LEAF_NODE	5154:33	5154:33	12	0
LEAF_NODE	5154:34	5154:34	10	)
LEAF_NODE	5154:35	5154:35	8	;
SELECTION	5155:4	5155:54	7	
KEYWORD	5155:4	5155:4	8	if
LEAF_NODE	5155:4	5155:4	9	if
LEAF_NODE	5155:7	5155:7	8	(
CONDITION	5155:8	5155:8	8	dp -> tdir_count != ( uint64 ) fip -> field_readcount
EXPR	5155:8	5155:32	9	dp -> tdir_count != ( uint64 ) fip -> field_readcount
FIELD	5155:8	5155:12	10	dp -> tdir_count
LEAF_NODE	5155:8	5155:8	11	dp
LEAF_NODE	5155:10	5155:10	11	->
LEAF_NODE	5155:12	5155:12	11	tdir_count
EQ_OPERATOR	5155:22	5155:22	10	!=
LEAF_NODE	5155:22	5155:22	11	!=
LEAF_NODE	5155:24	5155:24	10	(
TYPE_NAME	5155:25	5155:25	10	uint64
LEAF_NODE	5155:25	5155:25	11	uint64
LEAF_NODE	5155:31	5155:31	10	)
FIELD	5155:32	5155:37	10	fip -> field_readcount
LEAF_NODE	5155:32	5155:32	11	fip
LEAF_NODE	5155:35	5155:35	11	->
LEAF_NODE	5155:37	5155:37	11	field_readcount
LEAF_NODE	5155:52	5155:52	8	)
STATEMENTS	5155:54	5160:4	8	
LEAF_NODE	5155:54	5155:54	9	{
STATEMENTS	5156:5	5159:5	9	
EXPR_STATEMENT	5156:5	5158:77	10	TIFFWarningExt ( tif -> tif_clientdata , module , "incorrect count for field \"%s\", expected %d, got %d" , fip -> field_name , ( int ) fip -> field_readcount , ( int ) dp -> tdir_count ) ;
EXPR	5156:5	5156:5	11	TIFFWarningExt ( tif -> tif_clientdata , module , "incorrect count for field \"%s\", expected %d, got %d" , fip -> field_name , ( int ) fip -> field_readcount , ( int ) dp -> tdir_count )
FUNCTION_CALL	5156:5	5158:76	12	TIFFWarningExt ( tif -> tif_clientdata , module , "incorrect count for field \"%s\", expected %d, got %d" , fip -> field_name , ( int ) fip -> field_readcount , ( int ) dp -> tdir_count )
CALLEE	5156:5	5156:5	13	TIFFWarningExt
LEAF_NODE	5156:5	5156:5	14	TIFFWarningExt
LEAF_NODE	5156:19	5156:19	13	(
ARGUMENT	5156:20	5156:20	13	tif -> tif_clientdata
FIELD	5156:20	5156:25	14	tif -> tif_clientdata
LEAF_NODE	5156:20	5156:20	15	tif
LEAF_NODE	5156:23	5156:23	15	->
LEAF_NODE	5156:25	5156:25	15	tif_clientdata
LEAF_NODE	5156:39	5156:39	13	,
ARGUMENT	5156:40	5156:40	13	module
FIELD	5156:40	5156:40	14	module
LEAF_NODE	5156:40	5156:40	15	module
LEAF_NODE	5156:46	5156:46	13	,
ARGUMENT	5157:13	5157:13	13	"incorrect count for field \"%s\", expected %d, got %d"
FIELD	5157:13	5157:13	14	"incorrect count for field \"%s\", expected %d, got %d"
LEAF_NODE	5157:13	5157:13	15	"incorrect count for field \"%s\", expected %d, got %d"
LEAF_NODE	5157:68	5157:68	13	,
ARGUMENT	5158:13	5158:13	13	fip -> field_name
FIELD	5158:13	5158:18	14	fip -> field_name
LEAF_NODE	5158:13	5158:13	15	fip
LEAF_NODE	5158:16	5158:16	15	->
LEAF_NODE	5158:18	5158:18	15	field_name
LEAF_NODE	5158:28	5158:28	13	,
ARGUMENT	5158:29	5158:35	13	( int ) fip -> field_readcount
LEAF_NODE	5158:29	5158:29	14	(
TYPE_NAME	5158:30	5158:30	14	int
LEAF_NODE	5158:30	5158:30	15	int
LEAF_NODE	5158:33	5158:33	14	)
FIELD	5158:35	5158:40	14	fip -> field_readcount
LEAF_NODE	5158:35	5158:35	15	fip
LEAF_NODE	5158:38	5158:38	15	->
LEAF_NODE	5158:40	5158:40	15	field_readcount
LEAF_NODE	5158:55	5158:55	13	,
ARGUMENT	5158:57	5158:62	13	( int ) dp -> tdir_count
LEAF_NODE	5158:57	5158:57	14	(
TYPE_NAME	5158:58	5158:58	14	int
LEAF_NODE	5158:58	5158:58	15	int
LEAF_NODE	5158:61	5158:61	14	)
FIELD	5158:62	5158:66	14	dp -> tdir_count
LEAF_NODE	5158:62	5158:62	15	dp
LEAF_NODE	5158:64	5158:64	15	->
LEAF_NODE	5158:66	5158:66	15	tdir_count
LEAF_NODE	5158:76	5158:76	13	)
LEAF_NODE	5158:77	5158:77	11	;
JUMP_STATEMENT	5159:5	5159:13	10	return 0 ;
KEYWORD	5159:5	5159:5	11	return
LEAF_NODE	5159:5	5159:5	12	return
DESTINATION	5159:12	5159:12	11	0
EXPR	5159:12	5159:12	12	0
FIELD	5159:12	5159:12	13	0
LEAF_NODE	5159:12	5159:12	14	0
LEAF_NODE	5159:13	5159:13	11	;
LEAF_NODE	5160:4	5160:4	9	}
SELECTION	5161:4	5162:4	7	
KEYWORD	5161:4	5161:4	8	else
LEAF_NODE	5161:4	5161:4	9	else
STATEMENTS	5162:4	5173:4	8	
LEAF_NODE	5162:4	5162:4	9	{
STATEMENTS	5163:5	5164:5	9	
EXPR_STATEMENT	5163:5	5163:48	10	err = TIFFReadDirEntryByteArray ( tif , dp , & data ) ;
EXPR	5163:5	5163:5	11	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
ASSIGN	5163:5	5163:9	12	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
LVAL	5163:5	5163:5	13	err
FIELD	5163:5	5163:5	14	err
LEAF_NODE	5163:5	5163:5	15	err
ASSIGN_OP	5163:8	5163:8	13	=
LEAF_NODE	5163:8	5163:8	14	=
RVAL	5163:9	5163:9	13	TIFFReadDirEntryByteArray ( tif , dp , & data )
FUNCTION_CALL	5163:9	5163:47	14	TIFFReadDirEntryByteArray ( tif , dp , & data )
CALLEE	5163:9	5163:9	15	TIFFReadDirEntryByteArray
LEAF_NODE	5163:9	5163:9	16	TIFFReadDirEntryByteArray
LEAF_NODE	5163:34	5163:34	15	(
ARGUMENT	5163:35	5163:35	15	tif
FIELD	5163:35	5163:35	16	tif
LEAF_NODE	5163:35	5163:35	17	tif
LEAF_NODE	5163:38	5163:38	15	,
ARGUMENT	5163:39	5163:39	15	dp
FIELD	5163:39	5163:39	16	dp
LEAF_NODE	5163:39	5163:39	17	dp
LEAF_NODE	5163:41	5163:41	15	,
ARGUMENT	5163:42	5163:42	15	& data
UNARY_EXPR	5163:42	5163:43	16	& data
UNARY_OPERATOR	5163:42	5163:42	17	&
LEAF_NODE	5163:42	5163:42	18	&
FIELD	5163:43	5163:43	17	data
LEAF_NODE	5163:43	5163:43	18	data
LEAF_NODE	5163:47	5163:47	15	)
LEAF_NODE	5163:48	5163:48	11	;
SELECTION	5164:5	5165:5	10	
KEYWORD	5164:5	5164:5	11	if
LEAF_NODE	5164:5	5164:5	12	if
LEAF_NODE	5164:8	5164:8	11	(
CONDITION	5164:9	5164:9	11	err == TIFFReadDirEntryErrOk
EXPR	5164:9	5164:14	12	err == TIFFReadDirEntryErrOk
FIELD	5164:9	5164:9	13	err
LEAF_NODE	5164:9	5164:9	14	err
EQ_OPERATOR	5164:12	5164:12	13	==
LEAF_NODE	5164:12	5164:12	14	==
FIELD	5164:14	5164:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5164:14	5164:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5164:35	5164:35	11	)
STATEMENTS	5165:5	5172:5	11	
LEAF_NODE	5165:5	5165:5	12	{
STATEMENTS	5166:6	5170:6	12	
SIMPLE_DECL	5166:6	5166:11	13	int m ;
VAR_DECL	5166:6	5166:10	14	int m
TYPE	5166:6	5166:6	15	int
TYPE_NAME	5166:6	5166:6	16	int
LEAF_NODE	5166:6	5166:6	17	int
NAME	5166:10	5166:10	15	m
LEAF_NODE	5166:10	5166:10	16	m
LEAF_NODE	5166:11	5166:11	14	;
EXPR_STATEMENT	5167:6	5167:43	13	m = TIFFSetField ( tif , dp -> tdir_tag , data ) ;
EXPR	5167:6	5167:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , data )
ASSIGN	5167:6	5167:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , data )
LVAL	5167:6	5167:6	16	m
FIELD	5167:6	5167:6	17	m
LEAF_NODE	5167:6	5167:6	18	m
ASSIGN_OP	5167:7	5167:7	16	=
LEAF_NODE	5167:7	5167:7	17	=
RVAL	5167:8	5167:8	16	TIFFSetField ( tif , dp -> tdir_tag , data )
FUNCTION_CALL	5167:8	5167:42	17	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5167:8	5167:8	18	TIFFSetField
LEAF_NODE	5167:8	5167:8	19	TIFFSetField
LEAF_NODE	5167:20	5167:20	18	(
ARGUMENT	5167:21	5167:21	18	tif
FIELD	5167:21	5167:21	19	tif
LEAF_NODE	5167:21	5167:21	20	tif
LEAF_NODE	5167:24	5167:24	18	,
ARGUMENT	5167:25	5167:25	18	dp -> tdir_tag
FIELD	5167:25	5167:29	19	dp -> tdir_tag
LEAF_NODE	5167:25	5167:25	20	dp
LEAF_NODE	5167:27	5167:27	20	->
LEAF_NODE	5167:29	5167:29	20	tdir_tag
LEAF_NODE	5167:37	5167:37	18	,
ARGUMENT	5167:38	5167:38	18	data
FIELD	5167:38	5167:38	19	data
LEAF_NODE	5167:38	5167:38	20	data
LEAF_NODE	5167:42	5167:42	18	)
LEAF_NODE	5167:43	5167:43	14	;
SELECTION	5168:6	5169:7	13	
KEYWORD	5168:6	5168:6	14	if
LEAF_NODE	5168:6	5168:6	15	if
LEAF_NODE	5168:9	5168:9	14	(
CONDITION	5168:10	5168:10	14	data != 0
EXPR	5168:10	5168:16	15	data != 0
FIELD	5168:10	5168:10	16	data
LEAF_NODE	5168:10	5168:10	17	data
EQ_OPERATOR	5168:14	5168:14	16	!=
LEAF_NODE	5168:14	5168:14	17	!=
FIELD	5168:16	5168:16	16	0
LEAF_NODE	5168:16	5168:16	17	0
LEAF_NODE	5168:17	5168:17	14	)
STATEMENTS	5169:7	5169:7	14	
EXPR_STATEMENT	5169:7	5169:22	15	_TIFFfree ( data ) ;
EXPR	5169:7	5169:7	16	_TIFFfree ( data )
FUNCTION_CALL	5169:7	5169:21	17	_TIFFfree ( data )
CALLEE	5169:7	5169:7	18	_TIFFfree
LEAF_NODE	5169:7	5169:7	19	_TIFFfree
LEAF_NODE	5169:16	5169:16	18	(
ARGUMENT	5169:17	5169:17	18	data
FIELD	5169:17	5169:17	19	data
LEAF_NODE	5169:17	5169:17	20	data
LEAF_NODE	5169:21	5169:21	18	)
LEAF_NODE	5169:22	5169:22	16	;
SELECTION	5170:6	5171:7	13	
KEYWORD	5170:6	5170:6	14	if
LEAF_NODE	5170:6	5170:6	15	if
LEAF_NODE	5170:9	5170:9	14	(
CONDITION	5170:10	5170:10	14	! m
EXPR	5170:10	5170:10	15	! m
UNARY_EXPR	5170:10	5170:11	16	! m
UNARY_OPERATOR	5170:10	5170:10	17	!
LEAF_NODE	5170:10	5170:10	18	!
FIELD	5170:11	5170:11	17	m
LEAF_NODE	5170:11	5170:11	18	m
LEAF_NODE	5170:12	5170:12	14	)
STATEMENTS	5171:7	5171:7	14	
JUMP_STATEMENT	5171:7	5171:16	15	return ( 0 ) ;
KEYWORD	5171:7	5171:7	16	return
LEAF_NODE	5171:7	5171:7	17	return
DESTINATION	5171:13	5171:13	16	( 0 )
EXPR	5171:13	5171:15	17	( 0 )
LEAF_NODE	5171:13	5171:13	18	(
FIELD	5171:14	5171:14	18	0
LEAF_NODE	5171:14	5171:14	19	0
LEAF_NODE	5171:15	5171:15	18	)
LEAF_NODE	5171:16	5171:16	16	;
LEAF_NODE	5172:5	5172:5	12	}
LEAF_NODE	5173:4	5173:4	9	}
LEAF_NODE	5174:3	5174:3	6	}
JUMP_STATEMENT	5175:3	5175:8	6	break DESTINATION ;
KEYWORD	5175:3	5175:3	7	break
LEAF_NODE	5175:3	5175:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5175:8	5175:8	7	;
LABEL	5176:2	5176:28	6	case TIFF_SETGET_C0_UINT16 :
LEAF_NODE	5176:2	5176:2	7	case
LEAF_NODE	5176:7	5176:7	7	TIFF_SETGET_C0_UINT16
LEAF_NODE	5176:28	5176:28	7	:
LEAF_NODE	5177:3	5177:3	6	{
STATEMENTS	5178:4	5183:4	6	
SIMPLE_DECL	5178:4	5178:16	7	uint16 * data ;
VAR_DECL	5178:4	5178:12	8	uint16 * data
TYPE	5178:4	5178:10	9	uint16 *
TYPE_NAME	5178:4	5178:4	10	uint16
LEAF_NODE	5178:4	5178:4	11	uint16
POINTER	5178:10	5178:10	10	*
LEAF_NODE	5178:10	5178:10	11	*
NAME	5178:12	5178:12	9	data
LEAF_NODE	5178:12	5178:12	10	data
LEAF_NODE	5178:16	5178:16	8	;
EXPR_STATEMENT	5179:4	5179:35	7	assert ( fip -> field_readcount >= 1 ) ;
EXPR	5179:4	5179:4	8	assert ( fip -> field_readcount >= 1 )
FUNCTION_CALL	5179:4	5179:34	9	assert ( fip -> field_readcount >= 1 )
CALLEE	5179:4	5179:4	10	assert
LEAF_NODE	5179:4	5179:4	11	assert
LEAF_NODE	5179:10	5179:10	10	(
ARGUMENT	5179:11	5179:33	10	fip -> field_readcount >= 1
FIELD	5179:11	5179:16	11	fip -> field_readcount
LEAF_NODE	5179:11	5179:11	12	fip
LEAF_NODE	5179:14	5179:14	12	->
LEAF_NODE	5179:16	5179:16	12	field_readcount
REL_OPERATOR	5179:31	5179:31	11	>=
LEAF_NODE	5179:31	5179:31	12	>=
FIELD	5179:33	5179:33	11	1
LEAF_NODE	5179:33	5179:33	12	1
LEAF_NODE	5179:34	5179:34	10	)
LEAF_NODE	5179:35	5179:35	8	;
EXPR_STATEMENT	5180:4	5180:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5180:4	5180:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5180:4	5180:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5180:4	5180:4	10	assert
LEAF_NODE	5180:4	5180:4	11	assert
LEAF_NODE	5180:10	5180:10	10	(
ARGUMENT	5180:11	5180:33	10	fip -> field_passcount == 0
FIELD	5180:11	5180:16	11	fip -> field_passcount
LEAF_NODE	5180:11	5180:11	12	fip
LEAF_NODE	5180:14	5180:14	12	->
LEAF_NODE	5180:16	5180:16	12	field_passcount
EQ_OPERATOR	5180:31	5180:31	11	==
LEAF_NODE	5180:31	5180:31	12	==
FIELD	5180:33	5180:33	11	0
LEAF_NODE	5180:33	5180:33	12	0
LEAF_NODE	5180:34	5180:34	10	)
LEAF_NODE	5180:35	5180:35	8	;
SELECTION	5181:4	5182:54	7	
KEYWORD	5181:4	5181:4	8	if
LEAF_NODE	5181:4	5181:4	9	if
LEAF_NODE	5181:7	5181:7	8	(
CONDITION	5181:8	5181:8	8	dp -> tdir_count != ( uint64 ) fip -> field_readcount
EXPR	5181:8	5181:32	9	dp -> tdir_count != ( uint64 ) fip -> field_readcount
FIELD	5181:8	5181:12	10	dp -> tdir_count
LEAF_NODE	5181:8	5181:8	11	dp
LEAF_NODE	5181:10	5181:10	11	->
LEAF_NODE	5181:12	5181:12	11	tdir_count
EQ_OPERATOR	5181:22	5181:22	10	!=
LEAF_NODE	5181:22	5181:22	11	!=
LEAF_NODE	5181:24	5181:24	10	(
TYPE_NAME	5181:25	5181:25	10	uint64
LEAF_NODE	5181:25	5181:25	11	uint64
LEAF_NODE	5181:31	5181:31	10	)
FIELD	5181:32	5181:37	10	fip -> field_readcount
LEAF_NODE	5181:32	5181:32	11	fip
LEAF_NODE	5181:35	5181:35	11	->
LEAF_NODE	5181:37	5181:37	11	field_readcount
LEAF_NODE	5181:52	5181:52	8	)
STATEMENTS	5182:54	5182:54	8	
LEAF_NODE	5182:54	5182:54	9	;
SELECTION	5183:4	5184:4	7	
KEYWORD	5183:4	5183:4	8	else
LEAF_NODE	5183:4	5183:4	9	else
STATEMENTS	5184:4	5195:4	8	
LEAF_NODE	5184:4	5184:4	9	{
STATEMENTS	5185:5	5186:5	9	
EXPR_STATEMENT	5185:5	5185:49	10	err = TIFFReadDirEntryShortArray ( tif , dp , & data ) ;
EXPR	5185:5	5185:5	11	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
ASSIGN	5185:5	5185:9	12	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
LVAL	5185:5	5185:5	13	err
FIELD	5185:5	5185:5	14	err
LEAF_NODE	5185:5	5185:5	15	err
ASSIGN_OP	5185:8	5185:8	13	=
LEAF_NODE	5185:8	5185:8	14	=
RVAL	5185:9	5185:9	13	TIFFReadDirEntryShortArray ( tif , dp , & data )
FUNCTION_CALL	5185:9	5185:48	14	TIFFReadDirEntryShortArray ( tif , dp , & data )
CALLEE	5185:9	5185:9	15	TIFFReadDirEntryShortArray
LEAF_NODE	5185:9	5185:9	16	TIFFReadDirEntryShortArray
LEAF_NODE	5185:35	5185:35	15	(
ARGUMENT	5185:36	5185:36	15	tif
FIELD	5185:36	5185:36	16	tif
LEAF_NODE	5185:36	5185:36	17	tif
LEAF_NODE	5185:39	5185:39	15	,
ARGUMENT	5185:40	5185:40	15	dp
FIELD	5185:40	5185:40	16	dp
LEAF_NODE	5185:40	5185:40	17	dp
LEAF_NODE	5185:42	5185:42	15	,
ARGUMENT	5185:43	5185:43	15	& data
UNARY_EXPR	5185:43	5185:44	16	& data
UNARY_OPERATOR	5185:43	5185:43	17	&
LEAF_NODE	5185:43	5185:43	18	&
FIELD	5185:44	5185:44	17	data
LEAF_NODE	5185:44	5185:44	18	data
LEAF_NODE	5185:48	5185:48	15	)
LEAF_NODE	5185:49	5185:49	11	;
SELECTION	5186:5	5187:5	10	
KEYWORD	5186:5	5186:5	11	if
LEAF_NODE	5186:5	5186:5	12	if
LEAF_NODE	5186:8	5186:8	11	(
CONDITION	5186:9	5186:9	11	err == TIFFReadDirEntryErrOk
EXPR	5186:9	5186:14	12	err == TIFFReadDirEntryErrOk
FIELD	5186:9	5186:9	13	err
LEAF_NODE	5186:9	5186:9	14	err
EQ_OPERATOR	5186:12	5186:12	13	==
LEAF_NODE	5186:12	5186:12	14	==
FIELD	5186:14	5186:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5186:14	5186:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5186:35	5186:35	11	)
STATEMENTS	5187:5	5194:5	11	
LEAF_NODE	5187:5	5187:5	12	{
STATEMENTS	5188:6	5192:6	12	
SIMPLE_DECL	5188:6	5188:11	13	int m ;
VAR_DECL	5188:6	5188:10	14	int m
TYPE	5188:6	5188:6	15	int
TYPE_NAME	5188:6	5188:6	16	int
LEAF_NODE	5188:6	5188:6	17	int
NAME	5188:10	5188:10	15	m
LEAF_NODE	5188:10	5188:10	16	m
LEAF_NODE	5188:11	5188:11	14	;
EXPR_STATEMENT	5189:6	5189:43	13	m = TIFFSetField ( tif , dp -> tdir_tag , data ) ;
EXPR	5189:6	5189:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , data )
ASSIGN	5189:6	5189:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , data )
LVAL	5189:6	5189:6	16	m
FIELD	5189:6	5189:6	17	m
LEAF_NODE	5189:6	5189:6	18	m
ASSIGN_OP	5189:7	5189:7	16	=
LEAF_NODE	5189:7	5189:7	17	=
RVAL	5189:8	5189:8	16	TIFFSetField ( tif , dp -> tdir_tag , data )
FUNCTION_CALL	5189:8	5189:42	17	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5189:8	5189:8	18	TIFFSetField
LEAF_NODE	5189:8	5189:8	19	TIFFSetField
LEAF_NODE	5189:20	5189:20	18	(
ARGUMENT	5189:21	5189:21	18	tif
FIELD	5189:21	5189:21	19	tif
LEAF_NODE	5189:21	5189:21	20	tif
LEAF_NODE	5189:24	5189:24	18	,
ARGUMENT	5189:25	5189:25	18	dp -> tdir_tag
FIELD	5189:25	5189:29	19	dp -> tdir_tag
LEAF_NODE	5189:25	5189:25	20	dp
LEAF_NODE	5189:27	5189:27	20	->
LEAF_NODE	5189:29	5189:29	20	tdir_tag
LEAF_NODE	5189:37	5189:37	18	,
ARGUMENT	5189:38	5189:38	18	data
FIELD	5189:38	5189:38	19	data
LEAF_NODE	5189:38	5189:38	20	data
LEAF_NODE	5189:42	5189:42	18	)
LEAF_NODE	5189:43	5189:43	14	;
SELECTION	5190:6	5191:7	13	
KEYWORD	5190:6	5190:6	14	if
LEAF_NODE	5190:6	5190:6	15	if
LEAF_NODE	5190:9	5190:9	14	(
CONDITION	5190:10	5190:10	14	data != 0
EXPR	5190:10	5190:16	15	data != 0
FIELD	5190:10	5190:10	16	data
LEAF_NODE	5190:10	5190:10	17	data
EQ_OPERATOR	5190:14	5190:14	16	!=
LEAF_NODE	5190:14	5190:14	17	!=
FIELD	5190:16	5190:16	16	0
LEAF_NODE	5190:16	5190:16	17	0
LEAF_NODE	5190:17	5190:17	14	)
STATEMENTS	5191:7	5191:7	14	
EXPR_STATEMENT	5191:7	5191:22	15	_TIFFfree ( data ) ;
EXPR	5191:7	5191:7	16	_TIFFfree ( data )
FUNCTION_CALL	5191:7	5191:21	17	_TIFFfree ( data )
CALLEE	5191:7	5191:7	18	_TIFFfree
LEAF_NODE	5191:7	5191:7	19	_TIFFfree
LEAF_NODE	5191:16	5191:16	18	(
ARGUMENT	5191:17	5191:17	18	data
FIELD	5191:17	5191:17	19	data
LEAF_NODE	5191:17	5191:17	20	data
LEAF_NODE	5191:21	5191:21	18	)
LEAF_NODE	5191:22	5191:22	16	;
SELECTION	5192:6	5193:7	13	
KEYWORD	5192:6	5192:6	14	if
LEAF_NODE	5192:6	5192:6	15	if
LEAF_NODE	5192:9	5192:9	14	(
CONDITION	5192:10	5192:10	14	! m
EXPR	5192:10	5192:10	15	! m
UNARY_EXPR	5192:10	5192:11	16	! m
UNARY_OPERATOR	5192:10	5192:10	17	!
LEAF_NODE	5192:10	5192:10	18	!
FIELD	5192:11	5192:11	17	m
LEAF_NODE	5192:11	5192:11	18	m
LEAF_NODE	5192:12	5192:12	14	)
STATEMENTS	5193:7	5193:7	14	
JUMP_STATEMENT	5193:7	5193:16	15	return ( 0 ) ;
KEYWORD	5193:7	5193:7	16	return
LEAF_NODE	5193:7	5193:7	17	return
DESTINATION	5193:13	5193:13	16	( 0 )
EXPR	5193:13	5193:15	17	( 0 )
LEAF_NODE	5193:13	5193:13	18	(
FIELD	5193:14	5193:14	18	0
LEAF_NODE	5193:14	5193:14	19	0
LEAF_NODE	5193:15	5193:15	18	)
LEAF_NODE	5193:16	5193:16	16	;
LEAF_NODE	5194:5	5194:5	12	}
LEAF_NODE	5195:4	5195:4	9	}
LEAF_NODE	5196:3	5196:3	6	}
JUMP_STATEMENT	5197:3	5197:8	6	break DESTINATION ;
KEYWORD	5197:3	5197:3	7	break
LEAF_NODE	5197:3	5197:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5197:8	5197:8	7	;
LABEL	5198:2	5198:28	6	case TIFF_SETGET_C0_UINT32 :
LEAF_NODE	5198:2	5198:2	7	case
LEAF_NODE	5198:7	5198:7	7	TIFF_SETGET_C0_UINT32
LEAF_NODE	5198:28	5198:28	7	:
LEAF_NODE	5199:3	5199:3	6	{
STATEMENTS	5200:4	5205:4	6	
SIMPLE_DECL	5200:4	5200:16	7	uint32 * data ;
VAR_DECL	5200:4	5200:12	8	uint32 * data
TYPE	5200:4	5200:10	9	uint32 *
TYPE_NAME	5200:4	5200:4	10	uint32
LEAF_NODE	5200:4	5200:4	11	uint32
POINTER	5200:10	5200:10	10	*
LEAF_NODE	5200:10	5200:10	11	*
NAME	5200:12	5200:12	9	data
LEAF_NODE	5200:12	5200:12	10	data
LEAF_NODE	5200:16	5200:16	8	;
EXPR_STATEMENT	5201:4	5201:35	7	assert ( fip -> field_readcount >= 1 ) ;
EXPR	5201:4	5201:4	8	assert ( fip -> field_readcount >= 1 )
FUNCTION_CALL	5201:4	5201:34	9	assert ( fip -> field_readcount >= 1 )
CALLEE	5201:4	5201:4	10	assert
LEAF_NODE	5201:4	5201:4	11	assert
LEAF_NODE	5201:10	5201:10	10	(
ARGUMENT	5201:11	5201:33	10	fip -> field_readcount >= 1
FIELD	5201:11	5201:16	11	fip -> field_readcount
LEAF_NODE	5201:11	5201:11	12	fip
LEAF_NODE	5201:14	5201:14	12	->
LEAF_NODE	5201:16	5201:16	12	field_readcount
REL_OPERATOR	5201:31	5201:31	11	>=
LEAF_NODE	5201:31	5201:31	12	>=
FIELD	5201:33	5201:33	11	1
LEAF_NODE	5201:33	5201:33	12	1
LEAF_NODE	5201:34	5201:34	10	)
LEAF_NODE	5201:35	5201:35	8	;
EXPR_STATEMENT	5202:4	5202:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5202:4	5202:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5202:4	5202:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5202:4	5202:4	10	assert
LEAF_NODE	5202:4	5202:4	11	assert
LEAF_NODE	5202:10	5202:10	10	(
ARGUMENT	5202:11	5202:33	10	fip -> field_passcount == 0
FIELD	5202:11	5202:16	11	fip -> field_passcount
LEAF_NODE	5202:11	5202:11	12	fip
LEAF_NODE	5202:14	5202:14	12	->
LEAF_NODE	5202:16	5202:16	12	field_passcount
EQ_OPERATOR	5202:31	5202:31	11	==
LEAF_NODE	5202:31	5202:31	12	==
FIELD	5202:33	5202:33	11	0
LEAF_NODE	5202:33	5202:33	12	0
LEAF_NODE	5202:34	5202:34	10	)
LEAF_NODE	5202:35	5202:35	8	;
SELECTION	5203:4	5204:54	7	
KEYWORD	5203:4	5203:4	8	if
LEAF_NODE	5203:4	5203:4	9	if
LEAF_NODE	5203:7	5203:7	8	(
CONDITION	5203:8	5203:8	8	dp -> tdir_count != ( uint64 ) fip -> field_readcount
EXPR	5203:8	5203:32	9	dp -> tdir_count != ( uint64 ) fip -> field_readcount
FIELD	5203:8	5203:12	10	dp -> tdir_count
LEAF_NODE	5203:8	5203:8	11	dp
LEAF_NODE	5203:10	5203:10	11	->
LEAF_NODE	5203:12	5203:12	11	tdir_count
EQ_OPERATOR	5203:22	5203:22	10	!=
LEAF_NODE	5203:22	5203:22	11	!=
LEAF_NODE	5203:24	5203:24	10	(
TYPE_NAME	5203:25	5203:25	10	uint64
LEAF_NODE	5203:25	5203:25	11	uint64
LEAF_NODE	5203:31	5203:31	10	)
FIELD	5203:32	5203:37	10	fip -> field_readcount
LEAF_NODE	5203:32	5203:32	11	fip
LEAF_NODE	5203:35	5203:35	11	->
LEAF_NODE	5203:37	5203:37	11	field_readcount
LEAF_NODE	5203:52	5203:52	8	)
STATEMENTS	5204:54	5204:54	8	
LEAF_NODE	5204:54	5204:54	9	;
SELECTION	5205:4	5206:4	7	
KEYWORD	5205:4	5205:4	8	else
LEAF_NODE	5205:4	5205:4	9	else
STATEMENTS	5206:4	5217:4	8	
LEAF_NODE	5206:4	5206:4	9	{
STATEMENTS	5207:5	5208:5	9	
EXPR_STATEMENT	5207:5	5207:48	10	err = TIFFReadDirEntryLongArray ( tif , dp , & data ) ;
EXPR	5207:5	5207:5	11	err = TIFFReadDirEntryLongArray ( tif , dp , & data )
ASSIGN	5207:5	5207:9	12	err = TIFFReadDirEntryLongArray ( tif , dp , & data )
LVAL	5207:5	5207:5	13	err
FIELD	5207:5	5207:5	14	err
LEAF_NODE	5207:5	5207:5	15	err
ASSIGN_OP	5207:8	5207:8	13	=
LEAF_NODE	5207:8	5207:8	14	=
RVAL	5207:9	5207:9	13	TIFFReadDirEntryLongArray ( tif , dp , & data )
FUNCTION_CALL	5207:9	5207:47	14	TIFFReadDirEntryLongArray ( tif , dp , & data )
CALLEE	5207:9	5207:9	15	TIFFReadDirEntryLongArray
LEAF_NODE	5207:9	5207:9	16	TIFFReadDirEntryLongArray
LEAF_NODE	5207:34	5207:34	15	(
ARGUMENT	5207:35	5207:35	15	tif
FIELD	5207:35	5207:35	16	tif
LEAF_NODE	5207:35	5207:35	17	tif
LEAF_NODE	5207:38	5207:38	15	,
ARGUMENT	5207:39	5207:39	15	dp
FIELD	5207:39	5207:39	16	dp
LEAF_NODE	5207:39	5207:39	17	dp
LEAF_NODE	5207:41	5207:41	15	,
ARGUMENT	5207:42	5207:42	15	& data
UNARY_EXPR	5207:42	5207:43	16	& data
UNARY_OPERATOR	5207:42	5207:42	17	&
LEAF_NODE	5207:42	5207:42	18	&
FIELD	5207:43	5207:43	17	data
LEAF_NODE	5207:43	5207:43	18	data
LEAF_NODE	5207:47	5207:47	15	)
LEAF_NODE	5207:48	5207:48	11	;
SELECTION	5208:5	5209:5	10	
KEYWORD	5208:5	5208:5	11	if
LEAF_NODE	5208:5	5208:5	12	if
LEAF_NODE	5208:8	5208:8	11	(
CONDITION	5208:9	5208:9	11	err == TIFFReadDirEntryErrOk
EXPR	5208:9	5208:14	12	err == TIFFReadDirEntryErrOk
FIELD	5208:9	5208:9	13	err
LEAF_NODE	5208:9	5208:9	14	err
EQ_OPERATOR	5208:12	5208:12	13	==
LEAF_NODE	5208:12	5208:12	14	==
FIELD	5208:14	5208:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5208:14	5208:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5208:35	5208:35	11	)
STATEMENTS	5209:5	5216:5	11	
LEAF_NODE	5209:5	5209:5	12	{
STATEMENTS	5210:6	5214:6	12	
SIMPLE_DECL	5210:6	5210:11	13	int m ;
VAR_DECL	5210:6	5210:10	14	int m
TYPE	5210:6	5210:6	15	int
TYPE_NAME	5210:6	5210:6	16	int
LEAF_NODE	5210:6	5210:6	17	int
NAME	5210:10	5210:10	15	m
LEAF_NODE	5210:10	5210:10	16	m
LEAF_NODE	5210:11	5210:11	14	;
EXPR_STATEMENT	5211:6	5211:43	13	m = TIFFSetField ( tif , dp -> tdir_tag , data ) ;
EXPR	5211:6	5211:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , data )
ASSIGN	5211:6	5211:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , data )
LVAL	5211:6	5211:6	16	m
FIELD	5211:6	5211:6	17	m
LEAF_NODE	5211:6	5211:6	18	m
ASSIGN_OP	5211:7	5211:7	16	=
LEAF_NODE	5211:7	5211:7	17	=
RVAL	5211:8	5211:8	16	TIFFSetField ( tif , dp -> tdir_tag , data )
FUNCTION_CALL	5211:8	5211:42	17	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5211:8	5211:8	18	TIFFSetField
LEAF_NODE	5211:8	5211:8	19	TIFFSetField
LEAF_NODE	5211:20	5211:20	18	(
ARGUMENT	5211:21	5211:21	18	tif
FIELD	5211:21	5211:21	19	tif
LEAF_NODE	5211:21	5211:21	20	tif
LEAF_NODE	5211:24	5211:24	18	,
ARGUMENT	5211:25	5211:25	18	dp -> tdir_tag
FIELD	5211:25	5211:29	19	dp -> tdir_tag
LEAF_NODE	5211:25	5211:25	20	dp
LEAF_NODE	5211:27	5211:27	20	->
LEAF_NODE	5211:29	5211:29	20	tdir_tag
LEAF_NODE	5211:37	5211:37	18	,
ARGUMENT	5211:38	5211:38	18	data
FIELD	5211:38	5211:38	19	data
LEAF_NODE	5211:38	5211:38	20	data
LEAF_NODE	5211:42	5211:42	18	)
LEAF_NODE	5211:43	5211:43	14	;
SELECTION	5212:6	5213:7	13	
KEYWORD	5212:6	5212:6	14	if
LEAF_NODE	5212:6	5212:6	15	if
LEAF_NODE	5212:9	5212:9	14	(
CONDITION	5212:10	5212:10	14	data != 0
EXPR	5212:10	5212:16	15	data != 0
FIELD	5212:10	5212:10	16	data
LEAF_NODE	5212:10	5212:10	17	data
EQ_OPERATOR	5212:14	5212:14	16	!=
LEAF_NODE	5212:14	5212:14	17	!=
FIELD	5212:16	5212:16	16	0
LEAF_NODE	5212:16	5212:16	17	0
LEAF_NODE	5212:17	5212:17	14	)
STATEMENTS	5213:7	5213:7	14	
EXPR_STATEMENT	5213:7	5213:22	15	_TIFFfree ( data ) ;
EXPR	5213:7	5213:7	16	_TIFFfree ( data )
FUNCTION_CALL	5213:7	5213:21	17	_TIFFfree ( data )
CALLEE	5213:7	5213:7	18	_TIFFfree
LEAF_NODE	5213:7	5213:7	19	_TIFFfree
LEAF_NODE	5213:16	5213:16	18	(
ARGUMENT	5213:17	5213:17	18	data
FIELD	5213:17	5213:17	19	data
LEAF_NODE	5213:17	5213:17	20	data
LEAF_NODE	5213:21	5213:21	18	)
LEAF_NODE	5213:22	5213:22	16	;
SELECTION	5214:6	5215:7	13	
KEYWORD	5214:6	5214:6	14	if
LEAF_NODE	5214:6	5214:6	15	if
LEAF_NODE	5214:9	5214:9	14	(
CONDITION	5214:10	5214:10	14	! m
EXPR	5214:10	5214:10	15	! m
UNARY_EXPR	5214:10	5214:11	16	! m
UNARY_OPERATOR	5214:10	5214:10	17	!
LEAF_NODE	5214:10	5214:10	18	!
FIELD	5214:11	5214:11	17	m
LEAF_NODE	5214:11	5214:11	18	m
LEAF_NODE	5214:12	5214:12	14	)
STATEMENTS	5215:7	5215:7	14	
JUMP_STATEMENT	5215:7	5215:16	15	return ( 0 ) ;
KEYWORD	5215:7	5215:7	16	return
LEAF_NODE	5215:7	5215:7	17	return
DESTINATION	5215:13	5215:13	16	( 0 )
EXPR	5215:13	5215:15	17	( 0 )
LEAF_NODE	5215:13	5215:13	18	(
FIELD	5215:14	5215:14	18	0
LEAF_NODE	5215:14	5215:14	19	0
LEAF_NODE	5215:15	5215:15	18	)
LEAF_NODE	5215:16	5215:16	16	;
LEAF_NODE	5216:5	5216:5	12	}
LEAF_NODE	5217:4	5217:4	9	}
LEAF_NODE	5218:3	5218:3	6	}
JUMP_STATEMENT	5219:3	5219:8	6	break DESTINATION ;
KEYWORD	5219:3	5219:3	7	break
LEAF_NODE	5219:3	5219:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5219:8	5219:8	7	;
LABEL	5220:2	5220:27	6	case TIFF_SETGET_C0_FLOAT :
LEAF_NODE	5220:2	5220:2	7	case
LEAF_NODE	5220:7	5220:7	7	TIFF_SETGET_C0_FLOAT
LEAF_NODE	5220:27	5220:27	7	:
LEAF_NODE	5221:3	5221:3	6	{
STATEMENTS	5222:4	5227:4	6	
SIMPLE_DECL	5222:4	5222:15	7	float * data ;
VAR_DECL	5222:4	5222:11	8	float * data
TYPE	5222:4	5222:9	9	float *
TYPE_NAME	5222:4	5222:4	10	float
LEAF_NODE	5222:4	5222:4	11	float
POINTER	5222:9	5222:9	10	*
LEAF_NODE	5222:9	5222:9	11	*
NAME	5222:11	5222:11	9	data
LEAF_NODE	5222:11	5222:11	10	data
LEAF_NODE	5222:15	5222:15	8	;
EXPR_STATEMENT	5223:4	5223:35	7	assert ( fip -> field_readcount >= 1 ) ;
EXPR	5223:4	5223:4	8	assert ( fip -> field_readcount >= 1 )
FUNCTION_CALL	5223:4	5223:34	9	assert ( fip -> field_readcount >= 1 )
CALLEE	5223:4	5223:4	10	assert
LEAF_NODE	5223:4	5223:4	11	assert
LEAF_NODE	5223:10	5223:10	10	(
ARGUMENT	5223:11	5223:33	10	fip -> field_readcount >= 1
FIELD	5223:11	5223:16	11	fip -> field_readcount
LEAF_NODE	5223:11	5223:11	12	fip
LEAF_NODE	5223:14	5223:14	12	->
LEAF_NODE	5223:16	5223:16	12	field_readcount
REL_OPERATOR	5223:31	5223:31	11	>=
LEAF_NODE	5223:31	5223:31	12	>=
FIELD	5223:33	5223:33	11	1
LEAF_NODE	5223:33	5223:33	12	1
LEAF_NODE	5223:34	5223:34	10	)
LEAF_NODE	5223:35	5223:35	8	;
EXPR_STATEMENT	5224:4	5224:35	7	assert ( fip -> field_passcount == 0 ) ;
EXPR	5224:4	5224:4	8	assert ( fip -> field_passcount == 0 )
FUNCTION_CALL	5224:4	5224:34	9	assert ( fip -> field_passcount == 0 )
CALLEE	5224:4	5224:4	10	assert
LEAF_NODE	5224:4	5224:4	11	assert
LEAF_NODE	5224:10	5224:10	10	(
ARGUMENT	5224:11	5224:33	10	fip -> field_passcount == 0
FIELD	5224:11	5224:16	11	fip -> field_passcount
LEAF_NODE	5224:11	5224:11	12	fip
LEAF_NODE	5224:14	5224:14	12	->
LEAF_NODE	5224:16	5224:16	12	field_passcount
EQ_OPERATOR	5224:31	5224:31	11	==
LEAF_NODE	5224:31	5224:31	12	==
FIELD	5224:33	5224:33	11	0
LEAF_NODE	5224:33	5224:33	12	0
LEAF_NODE	5224:34	5224:34	10	)
LEAF_NODE	5224:35	5224:35	8	;
SELECTION	5225:4	5226:54	7	
KEYWORD	5225:4	5225:4	8	if
LEAF_NODE	5225:4	5225:4	9	if
LEAF_NODE	5225:7	5225:7	8	(
CONDITION	5225:8	5225:8	8	dp -> tdir_count != ( uint64 ) fip -> field_readcount
EXPR	5225:8	5225:32	9	dp -> tdir_count != ( uint64 ) fip -> field_readcount
FIELD	5225:8	5225:12	10	dp -> tdir_count
LEAF_NODE	5225:8	5225:8	11	dp
LEAF_NODE	5225:10	5225:10	11	->
LEAF_NODE	5225:12	5225:12	11	tdir_count
EQ_OPERATOR	5225:22	5225:22	10	!=
LEAF_NODE	5225:22	5225:22	11	!=
LEAF_NODE	5225:24	5225:24	10	(
TYPE_NAME	5225:25	5225:25	10	uint64
LEAF_NODE	5225:25	5225:25	11	uint64
LEAF_NODE	5225:31	5225:31	10	)
FIELD	5225:32	5225:37	10	fip -> field_readcount
LEAF_NODE	5225:32	5225:32	11	fip
LEAF_NODE	5225:35	5225:35	11	->
LEAF_NODE	5225:37	5225:37	11	field_readcount
LEAF_NODE	5225:52	5225:52	8	)
STATEMENTS	5226:54	5226:54	8	
LEAF_NODE	5226:54	5226:54	9	;
SELECTION	5227:4	5228:4	7	
KEYWORD	5227:4	5227:4	8	else
LEAF_NODE	5227:4	5227:4	9	else
STATEMENTS	5228:4	5239:4	8	
LEAF_NODE	5228:4	5228:4	9	{
STATEMENTS	5229:5	5230:5	9	
EXPR_STATEMENT	5229:5	5229:49	10	err = TIFFReadDirEntryFloatArray ( tif , dp , & data ) ;
EXPR	5229:5	5229:5	11	err = TIFFReadDirEntryFloatArray ( tif , dp , & data )
ASSIGN	5229:5	5229:9	12	err = TIFFReadDirEntryFloatArray ( tif , dp , & data )
LVAL	5229:5	5229:5	13	err
FIELD	5229:5	5229:5	14	err
LEAF_NODE	5229:5	5229:5	15	err
ASSIGN_OP	5229:8	5229:8	13	=
LEAF_NODE	5229:8	5229:8	14	=
RVAL	5229:9	5229:9	13	TIFFReadDirEntryFloatArray ( tif , dp , & data )
FUNCTION_CALL	5229:9	5229:48	14	TIFFReadDirEntryFloatArray ( tif , dp , & data )
CALLEE	5229:9	5229:9	15	TIFFReadDirEntryFloatArray
LEAF_NODE	5229:9	5229:9	16	TIFFReadDirEntryFloatArray
LEAF_NODE	5229:35	5229:35	15	(
ARGUMENT	5229:36	5229:36	15	tif
FIELD	5229:36	5229:36	16	tif
LEAF_NODE	5229:36	5229:36	17	tif
LEAF_NODE	5229:39	5229:39	15	,
ARGUMENT	5229:40	5229:40	15	dp
FIELD	5229:40	5229:40	16	dp
LEAF_NODE	5229:40	5229:40	17	dp
LEAF_NODE	5229:42	5229:42	15	,
ARGUMENT	5229:43	5229:43	15	& data
UNARY_EXPR	5229:43	5229:44	16	& data
UNARY_OPERATOR	5229:43	5229:43	17	&
LEAF_NODE	5229:43	5229:43	18	&
FIELD	5229:44	5229:44	17	data
LEAF_NODE	5229:44	5229:44	18	data
LEAF_NODE	5229:48	5229:48	15	)
LEAF_NODE	5229:49	5229:49	11	;
SELECTION	5230:5	5231:5	10	
KEYWORD	5230:5	5230:5	11	if
LEAF_NODE	5230:5	5230:5	12	if
LEAF_NODE	5230:8	5230:8	11	(
CONDITION	5230:9	5230:9	11	err == TIFFReadDirEntryErrOk
EXPR	5230:9	5230:14	12	err == TIFFReadDirEntryErrOk
FIELD	5230:9	5230:9	13	err
LEAF_NODE	5230:9	5230:9	14	err
EQ_OPERATOR	5230:12	5230:12	13	==
LEAF_NODE	5230:12	5230:12	14	==
FIELD	5230:14	5230:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5230:14	5230:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5230:35	5230:35	11	)
STATEMENTS	5231:5	5238:5	11	
LEAF_NODE	5231:5	5231:5	12	{
STATEMENTS	5232:6	5236:6	12	
SIMPLE_DECL	5232:6	5232:11	13	int m ;
VAR_DECL	5232:6	5232:10	14	int m
TYPE	5232:6	5232:6	15	int
TYPE_NAME	5232:6	5232:6	16	int
LEAF_NODE	5232:6	5232:6	17	int
NAME	5232:10	5232:10	15	m
LEAF_NODE	5232:10	5232:10	16	m
LEAF_NODE	5232:11	5232:11	14	;
EXPR_STATEMENT	5233:6	5233:43	13	m = TIFFSetField ( tif , dp -> tdir_tag , data ) ;
EXPR	5233:6	5233:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , data )
ASSIGN	5233:6	5233:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , data )
LVAL	5233:6	5233:6	16	m
FIELD	5233:6	5233:6	17	m
LEAF_NODE	5233:6	5233:6	18	m
ASSIGN_OP	5233:7	5233:7	16	=
LEAF_NODE	5233:7	5233:7	17	=
RVAL	5233:8	5233:8	16	TIFFSetField ( tif , dp -> tdir_tag , data )
FUNCTION_CALL	5233:8	5233:42	17	TIFFSetField ( tif , dp -> tdir_tag , data )
CALLEE	5233:8	5233:8	18	TIFFSetField
LEAF_NODE	5233:8	5233:8	19	TIFFSetField
LEAF_NODE	5233:20	5233:20	18	(
ARGUMENT	5233:21	5233:21	18	tif
FIELD	5233:21	5233:21	19	tif
LEAF_NODE	5233:21	5233:21	20	tif
LEAF_NODE	5233:24	5233:24	18	,
ARGUMENT	5233:25	5233:25	18	dp -> tdir_tag
FIELD	5233:25	5233:29	19	dp -> tdir_tag
LEAF_NODE	5233:25	5233:25	20	dp
LEAF_NODE	5233:27	5233:27	20	->
LEAF_NODE	5233:29	5233:29	20	tdir_tag
LEAF_NODE	5233:37	5233:37	18	,
ARGUMENT	5233:38	5233:38	18	data
FIELD	5233:38	5233:38	19	data
LEAF_NODE	5233:38	5233:38	20	data
LEAF_NODE	5233:42	5233:42	18	)
LEAF_NODE	5233:43	5233:43	14	;
SELECTION	5234:6	5235:7	13	
KEYWORD	5234:6	5234:6	14	if
LEAF_NODE	5234:6	5234:6	15	if
LEAF_NODE	5234:9	5234:9	14	(
CONDITION	5234:10	5234:10	14	data != 0
EXPR	5234:10	5234:16	15	data != 0
FIELD	5234:10	5234:10	16	data
LEAF_NODE	5234:10	5234:10	17	data
EQ_OPERATOR	5234:14	5234:14	16	!=
LEAF_NODE	5234:14	5234:14	17	!=
FIELD	5234:16	5234:16	16	0
LEAF_NODE	5234:16	5234:16	17	0
LEAF_NODE	5234:17	5234:17	14	)
STATEMENTS	5235:7	5235:7	14	
EXPR_STATEMENT	5235:7	5235:22	15	_TIFFfree ( data ) ;
EXPR	5235:7	5235:7	16	_TIFFfree ( data )
FUNCTION_CALL	5235:7	5235:21	17	_TIFFfree ( data )
CALLEE	5235:7	5235:7	18	_TIFFfree
LEAF_NODE	5235:7	5235:7	19	_TIFFfree
LEAF_NODE	5235:16	5235:16	18	(
ARGUMENT	5235:17	5235:17	18	data
FIELD	5235:17	5235:17	19	data
LEAF_NODE	5235:17	5235:17	20	data
LEAF_NODE	5235:21	5235:21	18	)
LEAF_NODE	5235:22	5235:22	16	;
SELECTION	5236:6	5237:7	13	
KEYWORD	5236:6	5236:6	14	if
LEAF_NODE	5236:6	5236:6	15	if
LEAF_NODE	5236:9	5236:9	14	(
CONDITION	5236:10	5236:10	14	! m
EXPR	5236:10	5236:10	15	! m
UNARY_EXPR	5236:10	5236:11	16	! m
UNARY_OPERATOR	5236:10	5236:10	17	!
LEAF_NODE	5236:10	5236:10	18	!
FIELD	5236:11	5236:11	17	m
LEAF_NODE	5236:11	5236:11	18	m
LEAF_NODE	5236:12	5236:12	14	)
STATEMENTS	5237:7	5237:7	14	
JUMP_STATEMENT	5237:7	5237:16	15	return ( 0 ) ;
KEYWORD	5237:7	5237:7	16	return
LEAF_NODE	5237:7	5237:7	17	return
DESTINATION	5237:13	5237:13	16	( 0 )
EXPR	5237:13	5237:15	17	( 0 )
LEAF_NODE	5237:13	5237:13	18	(
FIELD	5237:14	5237:14	18	0
LEAF_NODE	5237:14	5237:14	19	0
LEAF_NODE	5237:15	5237:15	18	)
LEAF_NODE	5237:16	5237:16	16	;
LEAF_NODE	5238:5	5238:5	12	}
LEAF_NODE	5239:4	5239:4	9	}
LEAF_NODE	5240:3	5240:3	6	}
JUMP_STATEMENT	5241:3	5241:8	6	break DESTINATION ;
KEYWORD	5241:3	5241:3	7	break
LEAF_NODE	5241:3	5241:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5241:8	5241:8	7	;
LABEL	5242:2	5242:28	6	case TIFF_SETGET_C16_ASCII :
LEAF_NODE	5242:2	5242:2	7	case
LEAF_NODE	5242:7	5242:7	7	TIFF_SETGET_C16_ASCII
LEAF_NODE	5242:28	5242:28	7	:
LEAF_NODE	5243:3	5243:3	6	{
STATEMENTS	5244:4	5249:4	6	
SIMPLE_DECL	5244:4	5244:15	7	uint8 * data ;
VAR_DECL	5244:4	5244:11	8	uint8 * data
TYPE	5244:4	5244:9	9	uint8 *
TYPE_NAME	5244:4	5244:4	10	uint8
LEAF_NODE	5244:4	5244:4	11	uint8
POINTER	5244:9	5244:9	10	*
LEAF_NODE	5244:9	5244:9	11	*
NAME	5244:11	5244:11	9	data
LEAF_NODE	5244:11	5244:11	10	data
LEAF_NODE	5244:15	5244:15	8	;
EXPR_STATEMENT	5245:4	5245:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5245:4	5245:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5245:4	5245:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5245:4	5245:4	10	assert
LEAF_NODE	5245:4	5245:4	11	assert
LEAF_NODE	5245:10	5245:10	10	(
ARGUMENT	5245:11	5245:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5245:11	5245:16	11	fip -> field_readcount
LEAF_NODE	5245:11	5245:11	12	fip
LEAF_NODE	5245:14	5245:14	12	->
LEAF_NODE	5245:16	5245:16	12	field_readcount
EQ_OPERATOR	5245:31	5245:31	11	==
LEAF_NODE	5245:31	5245:31	12	==
FIELD	5245:33	5245:33	11	TIFF_VARIABLE
LEAF_NODE	5245:33	5245:33	12	TIFF_VARIABLE
LEAF_NODE	5245:46	5245:46	10	)
LEAF_NODE	5245:47	5245:47	8	;
EXPR_STATEMENT	5246:4	5246:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5246:4	5246:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5246:4	5246:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5246:4	5246:4	10	assert
LEAF_NODE	5246:4	5246:4	11	assert
LEAF_NODE	5246:10	5246:10	10	(
ARGUMENT	5246:11	5246:33	10	fip -> field_passcount == 1
FIELD	5246:11	5246:16	11	fip -> field_passcount
LEAF_NODE	5246:11	5246:11	12	fip
LEAF_NODE	5246:14	5246:14	12	->
LEAF_NODE	5246:16	5246:16	12	field_passcount
EQ_OPERATOR	5246:31	5246:31	11	==
LEAF_NODE	5246:31	5246:31	12	==
FIELD	5246:33	5246:33	11	1
LEAF_NODE	5246:33	5246:33	12	1
LEAF_NODE	5246:34	5246:34	10	)
LEAF_NODE	5246:35	5246:35	8	;
SELECTION	5247:4	5248:5	7	
KEYWORD	5247:4	5247:4	8	if
LEAF_NODE	5247:4	5247:4	9	if
LEAF_NODE	5247:7	5247:7	8	(
CONDITION	5247:8	5247:8	8	dp -> tdir_count > 0xFFFF
EXPR	5247:8	5247:23	9	dp -> tdir_count > 0xFFFF
FIELD	5247:8	5247:12	10	dp -> tdir_count
LEAF_NODE	5247:8	5247:8	11	dp
LEAF_NODE	5247:10	5247:10	11	->
LEAF_NODE	5247:12	5247:12	11	tdir_count
REL_OPERATOR	5247:22	5247:22	10	>
LEAF_NODE	5247:22	5247:22	11	>
FIELD	5247:23	5247:23	10	0xFFFF
LEAF_NODE	5247:23	5247:23	11	0xFFFF
LEAF_NODE	5247:29	5247:29	8	)
STATEMENTS	5248:5	5248:5	8	
EXPR_STATEMENT	5248:5	5248:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5248:5	5248:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5248:5	5248:9	11	err = TIFFReadDirEntryErrCount
LVAL	5248:5	5248:5	12	err
FIELD	5248:5	5248:5	13	err
LEAF_NODE	5248:5	5248:5	14	err
ASSIGN_OP	5248:8	5248:8	12	=
LEAF_NODE	5248:8	5248:8	13	=
RVAL	5248:9	5248:9	12	TIFFReadDirEntryErrCount
FIELD	5248:9	5248:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5248:9	5248:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5248:33	5248:33	10	;
SELECTION	5249:4	5250:4	7	
KEYWORD	5249:4	5249:4	8	else
LEAF_NODE	5249:4	5249:4	9	else
STATEMENTS	5250:4	5266:4	8	
LEAF_NODE	5250:4	5250:4	9	{
STATEMENTS	5251:5	5252:5	9	
EXPR_STATEMENT	5251:5	5251:48	10	err = TIFFReadDirEntryByteArray ( tif , dp , & data ) ;
EXPR	5251:5	5251:5	11	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
ASSIGN	5251:5	5251:9	12	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
LVAL	5251:5	5251:5	13	err
FIELD	5251:5	5251:5	14	err
LEAF_NODE	5251:5	5251:5	15	err
ASSIGN_OP	5251:8	5251:8	13	=
LEAF_NODE	5251:8	5251:8	14	=
RVAL	5251:9	5251:9	13	TIFFReadDirEntryByteArray ( tif , dp , & data )
FUNCTION_CALL	5251:9	5251:47	14	TIFFReadDirEntryByteArray ( tif , dp , & data )
CALLEE	5251:9	5251:9	15	TIFFReadDirEntryByteArray
LEAF_NODE	5251:9	5251:9	16	TIFFReadDirEntryByteArray
LEAF_NODE	5251:34	5251:34	15	(
ARGUMENT	5251:35	5251:35	15	tif
FIELD	5251:35	5251:35	16	tif
LEAF_NODE	5251:35	5251:35	17	tif
LEAF_NODE	5251:38	5251:38	15	,
ARGUMENT	5251:39	5251:39	15	dp
FIELD	5251:39	5251:39	16	dp
LEAF_NODE	5251:39	5251:39	17	dp
LEAF_NODE	5251:41	5251:41	15	,
ARGUMENT	5251:42	5251:42	15	& data
UNARY_EXPR	5251:42	5251:43	16	& data
UNARY_OPERATOR	5251:42	5251:42	17	&
LEAF_NODE	5251:42	5251:42	18	&
FIELD	5251:43	5251:43	17	data
LEAF_NODE	5251:43	5251:43	18	data
LEAF_NODE	5251:47	5251:47	15	)
LEAF_NODE	5251:48	5251:48	11	;
SELECTION	5252:5	5253:5	10	
KEYWORD	5252:5	5252:5	11	if
LEAF_NODE	5252:5	5252:5	12	if
LEAF_NODE	5252:8	5252:8	11	(
CONDITION	5252:9	5252:9	11	err == TIFFReadDirEntryErrOk
EXPR	5252:9	5252:14	12	err == TIFFReadDirEntryErrOk
FIELD	5252:9	5252:9	13	err
LEAF_NODE	5252:9	5252:9	14	err
EQ_OPERATOR	5252:12	5252:12	13	==
LEAF_NODE	5252:12	5252:12	14	==
FIELD	5252:14	5252:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5252:14	5252:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5252:35	5252:35	11	)
STATEMENTS	5253:5	5265:5	11	
LEAF_NODE	5253:5	5253:5	12	{
STATEMENTS	5254:6	5263:6	12	
SIMPLE_DECL	5254:6	5254:11	13	int m ;
VAR_DECL	5254:6	5254:10	14	int m
TYPE	5254:6	5254:6	15	int
TYPE_NAME	5254:6	5254:6	16	int
LEAF_NODE	5254:6	5254:6	17	int
NAME	5254:10	5254:10	15	m
LEAF_NODE	5254:10	5254:10	16	m
LEAF_NODE	5254:11	5254:11	14	;
SELECTION	5255:6	5256:6	13	
KEYWORD	5255:6	5255:6	14	if
LEAF_NODE	5255:6	5255:6	15	if
LEAF_NODE	5255:8	5255:8	14	(
CONDITION	5255:10	5255:10	14	data != 0 && dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
EXPR	5255:10	5255:10	15	data != 0 && dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
AND	5255:10	5255:23	16	data != 0 && dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
EXPR	5255:10	5255:18	17	data != 0
FIELD	5255:10	5255:10	18	data
LEAF_NODE	5255:10	5255:10	19	data
EQ_OPERATOR	5255:15	5255:15	18	!=
LEAF_NODE	5255:15	5255:15	19	!=
FIELD	5255:18	5255:18	18	0
LEAF_NODE	5255:18	5255:18	19	0
LEAF_NODE	5255:20	5255:20	17	&&
EXPR	5255:23	5255:23	17	dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
AND	5255:23	5255:45	18	dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
EXPR	5255:23	5255:40	19	dp -> tdir_count > 0
FIELD	5255:23	5255:27	20	dp -> tdir_count
LEAF_NODE	5255:23	5255:23	21	dp
LEAF_NODE	5255:25	5255:25	21	->
LEAF_NODE	5255:27	5255:27	21	tdir_count
REL_OPERATOR	5255:38	5255:38	20	>
LEAF_NODE	5255:38	5255:38	21	>
FIELD	5255:40	5255:40	20	0
LEAF_NODE	5255:40	5255:40	21	0
LEAF_NODE	5255:42	5255:42	19	&&
EXPR	5255:45	5255:71	19	data [ dp -> tdir_count - 1 ] != '\0'
FIELD	5255:45	5255:66	20	data [ dp -> tdir_count - 1 ]
LEAF_NODE	5255:45	5255:45	21	data
LEAF_NODE	5255:49	5255:49	21	[
EXPR	5255:50	5255:65	21	dp -> tdir_count - 1
FIELD	5255:50	5255:54	22	dp -> tdir_count
LEAF_NODE	5255:50	5255:50	23	dp
LEAF_NODE	5255:52	5255:52	23	->
LEAF_NODE	5255:54	5255:54	23	tdir_count
LEAF_NODE	5255:64	5255:64	22	-
FIELD	5255:65	5255:65	22	1
LEAF_NODE	5255:65	5255:65	23	1
LEAF_NODE	5255:66	5255:66	21	]
EQ_OPERATOR	5255:68	5255:68	20	!=
LEAF_NODE	5255:68	5255:68	21	!=
FIELD	5255:71	5255:71	20	'\0'
LEAF_NODE	5255:71	5255:71	21	'\0'
LEAF_NODE	5255:76	5255:76	14	)
STATEMENTS	5256:6	5259:6	14	
LEAF_NODE	5256:6	5256:6	15	{
STATEMENTS	5257:10	5258:10	15	
EXPR_STATEMENT	5257:10	5257:146	16	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null" , fip -> field_name ) ;
EXPR	5257:10	5257:10	17	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null" , fip -> field_name )
FUNCTION_CALL	5257:10	5257:145	18	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null" , fip -> field_name )
CALLEE	5257:10	5257:10	19	TIFFWarningExt
LEAF_NODE	5257:10	5257:10	20	TIFFWarningExt
LEAF_NODE	5257:24	5257:24	19	(
ARGUMENT	5257:25	5257:25	19	tif -> tif_clientdata
FIELD	5257:25	5257:30	20	tif -> tif_clientdata
LEAF_NODE	5257:25	5257:25	21	tif
LEAF_NODE	5257:28	5257:28	21	->
LEAF_NODE	5257:30	5257:30	21	tif_clientdata
LEAF_NODE	5257:44	5257:44	19	,
ARGUMENT	5257:45	5257:45	19	module
FIELD	5257:45	5257:45	20	module
LEAF_NODE	5257:45	5257:45	21	module
LEAF_NODE	5257:51	5257:51	19	,
ARGUMENT	5257:52	5257:52	19	"ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null"
FIELD	5257:52	5257:52	20	"ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null"
LEAF_NODE	5257:52	5257:52	21	"ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null"
LEAF_NODE	5257:129	5257:129	19	,
ARGUMENT	5257:130	5257:130	19	fip -> field_name
FIELD	5257:130	5257:135	20	fip -> field_name
LEAF_NODE	5257:130	5257:130	21	fip
LEAF_NODE	5257:133	5257:133	21	->
LEAF_NODE	5257:135	5257:135	21	field_name
LEAF_NODE	5257:145	5257:145	19	)
LEAF_NODE	5257:146	5257:146	17	;
EXPR_STATEMENT	5258:10	5258:39	16	data [ dp -> tdir_count - 1 ] = '\0' ;
EXPR	5258:10	5258:10	17	data [ dp -> tdir_count - 1 ] = '\0'
ASSIGN	5258:10	5258:35	18	data [ dp -> tdir_count - 1 ] = '\0'
LVAL	5258:10	5258:10	19	data [ dp -> tdir_count - 1 ]
FIELD	5258:10	5258:31	20	data [ dp -> tdir_count - 1 ]
LEAF_NODE	5258:10	5258:10	21	data
LEAF_NODE	5258:14	5258:14	21	[
EXPR	5258:15	5258:30	21	dp -> tdir_count - 1
FIELD	5258:15	5258:19	22	dp -> tdir_count
LEAF_NODE	5258:15	5258:15	23	dp
LEAF_NODE	5258:17	5258:17	23	->
LEAF_NODE	5258:19	5258:19	23	tdir_count
LEAF_NODE	5258:29	5258:29	22	-
FIELD	5258:30	5258:30	22	1
LEAF_NODE	5258:30	5258:30	23	1
LEAF_NODE	5258:31	5258:31	21	]
ASSIGN_OP	5258:33	5258:33	19	=
LEAF_NODE	5258:33	5258:33	20	=
RVAL	5258:35	5258:35	19	'\0'
FIELD	5258:35	5258:35	20	'\0'
LEAF_NODE	5258:35	5258:35	21	'\0'
LEAF_NODE	5258:39	5258:39	17	;
LEAF_NODE	5259:6	5259:6	15	}
EXPR_STATEMENT	5260:6	5260:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5260:6	5260:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5260:6	5260:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5260:6	5260:6	16	m
FIELD	5260:6	5260:6	17	m
LEAF_NODE	5260:6	5260:6	18	m
ASSIGN_OP	5260:7	5260:7	16	=
LEAF_NODE	5260:7	5260:7	17	=
RVAL	5260:8	5260:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5260:8	5260:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5260:8	5260:8	18	TIFFSetField
LEAF_NODE	5260:8	5260:8	19	TIFFSetField
LEAF_NODE	5260:20	5260:20	18	(
ARGUMENT	5260:21	5260:21	18	tif
FIELD	5260:21	5260:21	19	tif
LEAF_NODE	5260:21	5260:21	20	tif
LEAF_NODE	5260:24	5260:24	18	,
ARGUMENT	5260:25	5260:25	18	dp -> tdir_tag
FIELD	5260:25	5260:29	19	dp -> tdir_tag
LEAF_NODE	5260:25	5260:25	20	dp
LEAF_NODE	5260:27	5260:27	20	->
LEAF_NODE	5260:29	5260:29	20	tdir_tag
LEAF_NODE	5260:37	5260:37	18	,
ARGUMENT	5260:38	5260:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5260:38	5260:38	19	(
TYPE_NAME	5260:39	5260:39	19	uint16
LEAF_NODE	5260:39	5260:39	20	uint16
LEAF_NODE	5260:45	5260:45	19	)
LEAF_NODE	5260:46	5260:46	19	(
FIELD	5260:47	5260:51	19	dp -> tdir_count
LEAF_NODE	5260:47	5260:47	20	dp
LEAF_NODE	5260:49	5260:49	20	->
LEAF_NODE	5260:51	5260:51	20	tdir_count
LEAF_NODE	5260:61	5260:61	19	)
LEAF_NODE	5260:62	5260:62	18	,
ARGUMENT	5260:63	5260:63	18	data
FIELD	5260:63	5260:63	19	data
LEAF_NODE	5260:63	5260:63	20	data
LEAF_NODE	5260:67	5260:67	18	)
LEAF_NODE	5260:68	5260:68	14	;
SELECTION	5261:6	5262:7	13	
KEYWORD	5261:6	5261:6	14	if
LEAF_NODE	5261:6	5261:6	15	if
LEAF_NODE	5261:9	5261:9	14	(
CONDITION	5261:10	5261:10	14	data != 0
EXPR	5261:10	5261:16	15	data != 0
FIELD	5261:10	5261:10	16	data
LEAF_NODE	5261:10	5261:10	17	data
EQ_OPERATOR	5261:14	5261:14	16	!=
LEAF_NODE	5261:14	5261:14	17	!=
FIELD	5261:16	5261:16	16	0
LEAF_NODE	5261:16	5261:16	17	0
LEAF_NODE	5261:17	5261:17	14	)
STATEMENTS	5262:7	5262:7	14	
EXPR_STATEMENT	5262:7	5262:22	15	_TIFFfree ( data ) ;
EXPR	5262:7	5262:7	16	_TIFFfree ( data )
FUNCTION_CALL	5262:7	5262:21	17	_TIFFfree ( data )
CALLEE	5262:7	5262:7	18	_TIFFfree
LEAF_NODE	5262:7	5262:7	19	_TIFFfree
LEAF_NODE	5262:16	5262:16	18	(
ARGUMENT	5262:17	5262:17	18	data
FIELD	5262:17	5262:17	19	data
LEAF_NODE	5262:17	5262:17	20	data
LEAF_NODE	5262:21	5262:21	18	)
LEAF_NODE	5262:22	5262:22	16	;
SELECTION	5263:6	5264:7	13	
KEYWORD	5263:6	5263:6	14	if
LEAF_NODE	5263:6	5263:6	15	if
LEAF_NODE	5263:9	5263:9	14	(
CONDITION	5263:10	5263:10	14	! m
EXPR	5263:10	5263:10	15	! m
UNARY_EXPR	5263:10	5263:11	16	! m
UNARY_OPERATOR	5263:10	5263:10	17	!
LEAF_NODE	5263:10	5263:10	18	!
FIELD	5263:11	5263:11	17	m
LEAF_NODE	5263:11	5263:11	18	m
LEAF_NODE	5263:12	5263:12	14	)
STATEMENTS	5264:7	5264:7	14	
JUMP_STATEMENT	5264:7	5264:16	15	return ( 0 ) ;
KEYWORD	5264:7	5264:7	16	return
LEAF_NODE	5264:7	5264:7	17	return
DESTINATION	5264:13	5264:13	16	( 0 )
EXPR	5264:13	5264:15	17	( 0 )
LEAF_NODE	5264:13	5264:13	18	(
FIELD	5264:14	5264:14	18	0
LEAF_NODE	5264:14	5264:14	19	0
LEAF_NODE	5264:15	5264:15	18	)
LEAF_NODE	5264:16	5264:16	16	;
LEAF_NODE	5265:5	5265:5	12	}
LEAF_NODE	5266:4	5266:4	9	}
LEAF_NODE	5267:3	5267:3	6	}
JUMP_STATEMENT	5268:3	5268:8	6	break DESTINATION ;
KEYWORD	5268:3	5268:3	7	break
LEAF_NODE	5268:3	5268:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5268:8	5268:8	7	;
LABEL	5269:2	5269:28	6	case TIFF_SETGET_C16_UINT8 :
LEAF_NODE	5269:2	5269:2	7	case
LEAF_NODE	5269:7	5269:7	7	TIFF_SETGET_C16_UINT8
LEAF_NODE	5269:28	5269:28	7	:
LEAF_NODE	5270:3	5270:3	6	{
STATEMENTS	5271:4	5276:4	6	
SIMPLE_DECL	5271:4	5271:15	7	uint8 * data ;
VAR_DECL	5271:4	5271:11	8	uint8 * data
TYPE	5271:4	5271:9	9	uint8 *
TYPE_NAME	5271:4	5271:4	10	uint8
LEAF_NODE	5271:4	5271:4	11	uint8
POINTER	5271:9	5271:9	10	*
LEAF_NODE	5271:9	5271:9	11	*
NAME	5271:11	5271:11	9	data
LEAF_NODE	5271:11	5271:11	10	data
LEAF_NODE	5271:15	5271:15	8	;
EXPR_STATEMENT	5272:4	5272:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5272:4	5272:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5272:4	5272:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5272:4	5272:4	10	assert
LEAF_NODE	5272:4	5272:4	11	assert
LEAF_NODE	5272:10	5272:10	10	(
ARGUMENT	5272:11	5272:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5272:11	5272:16	11	fip -> field_readcount
LEAF_NODE	5272:11	5272:11	12	fip
LEAF_NODE	5272:14	5272:14	12	->
LEAF_NODE	5272:16	5272:16	12	field_readcount
EQ_OPERATOR	5272:31	5272:31	11	==
LEAF_NODE	5272:31	5272:31	12	==
FIELD	5272:33	5272:33	11	TIFF_VARIABLE
LEAF_NODE	5272:33	5272:33	12	TIFF_VARIABLE
LEAF_NODE	5272:46	5272:46	10	)
LEAF_NODE	5272:47	5272:47	8	;
EXPR_STATEMENT	5273:4	5273:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5273:4	5273:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5273:4	5273:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5273:4	5273:4	10	assert
LEAF_NODE	5273:4	5273:4	11	assert
LEAF_NODE	5273:10	5273:10	10	(
ARGUMENT	5273:11	5273:33	10	fip -> field_passcount == 1
FIELD	5273:11	5273:16	11	fip -> field_passcount
LEAF_NODE	5273:11	5273:11	12	fip
LEAF_NODE	5273:14	5273:14	12	->
LEAF_NODE	5273:16	5273:16	12	field_passcount
EQ_OPERATOR	5273:31	5273:31	11	==
LEAF_NODE	5273:31	5273:31	12	==
FIELD	5273:33	5273:33	11	1
LEAF_NODE	5273:33	5273:33	12	1
LEAF_NODE	5273:34	5273:34	10	)
LEAF_NODE	5273:35	5273:35	8	;
SELECTION	5274:4	5275:5	7	
KEYWORD	5274:4	5274:4	8	if
LEAF_NODE	5274:4	5274:4	9	if
LEAF_NODE	5274:7	5274:7	8	(
CONDITION	5274:8	5274:8	8	dp -> tdir_count > 0xFFFF
EXPR	5274:8	5274:23	9	dp -> tdir_count > 0xFFFF
FIELD	5274:8	5274:12	10	dp -> tdir_count
LEAF_NODE	5274:8	5274:8	11	dp
LEAF_NODE	5274:10	5274:10	11	->
LEAF_NODE	5274:12	5274:12	11	tdir_count
REL_OPERATOR	5274:22	5274:22	10	>
LEAF_NODE	5274:22	5274:22	11	>
FIELD	5274:23	5274:23	10	0xFFFF
LEAF_NODE	5274:23	5274:23	11	0xFFFF
LEAF_NODE	5274:29	5274:29	8	)
STATEMENTS	5275:5	5275:5	8	
EXPR_STATEMENT	5275:5	5275:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5275:5	5275:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5275:5	5275:9	11	err = TIFFReadDirEntryErrCount
LVAL	5275:5	5275:5	12	err
FIELD	5275:5	5275:5	13	err
LEAF_NODE	5275:5	5275:5	14	err
ASSIGN_OP	5275:8	5275:8	12	=
LEAF_NODE	5275:8	5275:8	13	=
RVAL	5275:9	5275:9	12	TIFFReadDirEntryErrCount
FIELD	5275:9	5275:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5275:9	5275:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5275:33	5275:33	10	;
SELECTION	5276:4	5277:4	7	
KEYWORD	5276:4	5276:4	8	else
LEAF_NODE	5276:4	5276:4	9	else
STATEMENTS	5277:4	5288:4	8	
LEAF_NODE	5277:4	5277:4	9	{
STATEMENTS	5278:5	5279:5	9	
EXPR_STATEMENT	5278:5	5278:48	10	err = TIFFReadDirEntryByteArray ( tif , dp , & data ) ;
EXPR	5278:5	5278:5	11	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
ASSIGN	5278:5	5278:9	12	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
LVAL	5278:5	5278:5	13	err
FIELD	5278:5	5278:5	14	err
LEAF_NODE	5278:5	5278:5	15	err
ASSIGN_OP	5278:8	5278:8	13	=
LEAF_NODE	5278:8	5278:8	14	=
RVAL	5278:9	5278:9	13	TIFFReadDirEntryByteArray ( tif , dp , & data )
FUNCTION_CALL	5278:9	5278:47	14	TIFFReadDirEntryByteArray ( tif , dp , & data )
CALLEE	5278:9	5278:9	15	TIFFReadDirEntryByteArray
LEAF_NODE	5278:9	5278:9	16	TIFFReadDirEntryByteArray
LEAF_NODE	5278:34	5278:34	15	(
ARGUMENT	5278:35	5278:35	15	tif
FIELD	5278:35	5278:35	16	tif
LEAF_NODE	5278:35	5278:35	17	tif
LEAF_NODE	5278:38	5278:38	15	,
ARGUMENT	5278:39	5278:39	15	dp
FIELD	5278:39	5278:39	16	dp
LEAF_NODE	5278:39	5278:39	17	dp
LEAF_NODE	5278:41	5278:41	15	,
ARGUMENT	5278:42	5278:42	15	& data
UNARY_EXPR	5278:42	5278:43	16	& data
UNARY_OPERATOR	5278:42	5278:42	17	&
LEAF_NODE	5278:42	5278:42	18	&
FIELD	5278:43	5278:43	17	data
LEAF_NODE	5278:43	5278:43	18	data
LEAF_NODE	5278:47	5278:47	15	)
LEAF_NODE	5278:48	5278:48	11	;
SELECTION	5279:5	5280:5	10	
KEYWORD	5279:5	5279:5	11	if
LEAF_NODE	5279:5	5279:5	12	if
LEAF_NODE	5279:8	5279:8	11	(
CONDITION	5279:9	5279:9	11	err == TIFFReadDirEntryErrOk
EXPR	5279:9	5279:14	12	err == TIFFReadDirEntryErrOk
FIELD	5279:9	5279:9	13	err
LEAF_NODE	5279:9	5279:9	14	err
EQ_OPERATOR	5279:12	5279:12	13	==
LEAF_NODE	5279:12	5279:12	14	==
FIELD	5279:14	5279:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5279:14	5279:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5279:35	5279:35	11	)
STATEMENTS	5280:5	5287:5	11	
LEAF_NODE	5280:5	5280:5	12	{
STATEMENTS	5281:6	5285:6	12	
SIMPLE_DECL	5281:6	5281:11	13	int m ;
VAR_DECL	5281:6	5281:10	14	int m
TYPE	5281:6	5281:6	15	int
TYPE_NAME	5281:6	5281:6	16	int
LEAF_NODE	5281:6	5281:6	17	int
NAME	5281:10	5281:10	15	m
LEAF_NODE	5281:10	5281:10	16	m
LEAF_NODE	5281:11	5281:11	14	;
EXPR_STATEMENT	5282:6	5282:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5282:6	5282:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5282:6	5282:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5282:6	5282:6	16	m
FIELD	5282:6	5282:6	17	m
LEAF_NODE	5282:6	5282:6	18	m
ASSIGN_OP	5282:7	5282:7	16	=
LEAF_NODE	5282:7	5282:7	17	=
RVAL	5282:8	5282:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5282:8	5282:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5282:8	5282:8	18	TIFFSetField
LEAF_NODE	5282:8	5282:8	19	TIFFSetField
LEAF_NODE	5282:20	5282:20	18	(
ARGUMENT	5282:21	5282:21	18	tif
FIELD	5282:21	5282:21	19	tif
LEAF_NODE	5282:21	5282:21	20	tif
LEAF_NODE	5282:24	5282:24	18	,
ARGUMENT	5282:25	5282:25	18	dp -> tdir_tag
FIELD	5282:25	5282:29	19	dp -> tdir_tag
LEAF_NODE	5282:25	5282:25	20	dp
LEAF_NODE	5282:27	5282:27	20	->
LEAF_NODE	5282:29	5282:29	20	tdir_tag
LEAF_NODE	5282:37	5282:37	18	,
ARGUMENT	5282:38	5282:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5282:38	5282:38	19	(
TYPE_NAME	5282:39	5282:39	19	uint16
LEAF_NODE	5282:39	5282:39	20	uint16
LEAF_NODE	5282:45	5282:45	19	)
LEAF_NODE	5282:46	5282:46	19	(
FIELD	5282:47	5282:51	19	dp -> tdir_count
LEAF_NODE	5282:47	5282:47	20	dp
LEAF_NODE	5282:49	5282:49	20	->
LEAF_NODE	5282:51	5282:51	20	tdir_count
LEAF_NODE	5282:61	5282:61	19	)
LEAF_NODE	5282:62	5282:62	18	,
ARGUMENT	5282:63	5282:63	18	data
FIELD	5282:63	5282:63	19	data
LEAF_NODE	5282:63	5282:63	20	data
LEAF_NODE	5282:67	5282:67	18	)
LEAF_NODE	5282:68	5282:68	14	;
SELECTION	5283:6	5284:7	13	
KEYWORD	5283:6	5283:6	14	if
LEAF_NODE	5283:6	5283:6	15	if
LEAF_NODE	5283:9	5283:9	14	(
CONDITION	5283:10	5283:10	14	data != 0
EXPR	5283:10	5283:16	15	data != 0
FIELD	5283:10	5283:10	16	data
LEAF_NODE	5283:10	5283:10	17	data
EQ_OPERATOR	5283:14	5283:14	16	!=
LEAF_NODE	5283:14	5283:14	17	!=
FIELD	5283:16	5283:16	16	0
LEAF_NODE	5283:16	5283:16	17	0
LEAF_NODE	5283:17	5283:17	14	)
STATEMENTS	5284:7	5284:7	14	
EXPR_STATEMENT	5284:7	5284:22	15	_TIFFfree ( data ) ;
EXPR	5284:7	5284:7	16	_TIFFfree ( data )
FUNCTION_CALL	5284:7	5284:21	17	_TIFFfree ( data )
CALLEE	5284:7	5284:7	18	_TIFFfree
LEAF_NODE	5284:7	5284:7	19	_TIFFfree
LEAF_NODE	5284:16	5284:16	18	(
ARGUMENT	5284:17	5284:17	18	data
FIELD	5284:17	5284:17	19	data
LEAF_NODE	5284:17	5284:17	20	data
LEAF_NODE	5284:21	5284:21	18	)
LEAF_NODE	5284:22	5284:22	16	;
SELECTION	5285:6	5286:7	13	
KEYWORD	5285:6	5285:6	14	if
LEAF_NODE	5285:6	5285:6	15	if
LEAF_NODE	5285:9	5285:9	14	(
CONDITION	5285:10	5285:10	14	! m
EXPR	5285:10	5285:10	15	! m
UNARY_EXPR	5285:10	5285:11	16	! m
UNARY_OPERATOR	5285:10	5285:10	17	!
LEAF_NODE	5285:10	5285:10	18	!
FIELD	5285:11	5285:11	17	m
LEAF_NODE	5285:11	5285:11	18	m
LEAF_NODE	5285:12	5285:12	14	)
STATEMENTS	5286:7	5286:7	14	
JUMP_STATEMENT	5286:7	5286:16	15	return ( 0 ) ;
KEYWORD	5286:7	5286:7	16	return
LEAF_NODE	5286:7	5286:7	17	return
DESTINATION	5286:13	5286:13	16	( 0 )
EXPR	5286:13	5286:15	17	( 0 )
LEAF_NODE	5286:13	5286:13	18	(
FIELD	5286:14	5286:14	18	0
LEAF_NODE	5286:14	5286:14	19	0
LEAF_NODE	5286:15	5286:15	18	)
LEAF_NODE	5286:16	5286:16	16	;
LEAF_NODE	5287:5	5287:5	12	}
LEAF_NODE	5288:4	5288:4	9	}
LEAF_NODE	5289:3	5289:3	6	}
JUMP_STATEMENT	5290:3	5290:8	6	break DESTINATION ;
KEYWORD	5290:3	5290:3	7	break
LEAF_NODE	5290:3	5290:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5290:8	5290:8	7	;
LABEL	5291:2	5291:29	6	case TIFF_SETGET_C16_UINT16 :
LEAF_NODE	5291:2	5291:2	7	case
LEAF_NODE	5291:7	5291:7	7	TIFF_SETGET_C16_UINT16
LEAF_NODE	5291:29	5291:29	7	:
LEAF_NODE	5292:3	5292:3	6	{
STATEMENTS	5293:4	5298:4	6	
SIMPLE_DECL	5293:4	5293:16	7	uint16 * data ;
VAR_DECL	5293:4	5293:12	8	uint16 * data
TYPE	5293:4	5293:10	9	uint16 *
TYPE_NAME	5293:4	5293:4	10	uint16
LEAF_NODE	5293:4	5293:4	11	uint16
POINTER	5293:10	5293:10	10	*
LEAF_NODE	5293:10	5293:10	11	*
NAME	5293:12	5293:12	9	data
LEAF_NODE	5293:12	5293:12	10	data
LEAF_NODE	5293:16	5293:16	8	;
EXPR_STATEMENT	5294:4	5294:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5294:4	5294:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5294:4	5294:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5294:4	5294:4	10	assert
LEAF_NODE	5294:4	5294:4	11	assert
LEAF_NODE	5294:10	5294:10	10	(
ARGUMENT	5294:11	5294:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5294:11	5294:16	11	fip -> field_readcount
LEAF_NODE	5294:11	5294:11	12	fip
LEAF_NODE	5294:14	5294:14	12	->
LEAF_NODE	5294:16	5294:16	12	field_readcount
EQ_OPERATOR	5294:31	5294:31	11	==
LEAF_NODE	5294:31	5294:31	12	==
FIELD	5294:33	5294:33	11	TIFF_VARIABLE
LEAF_NODE	5294:33	5294:33	12	TIFF_VARIABLE
LEAF_NODE	5294:46	5294:46	10	)
LEAF_NODE	5294:47	5294:47	8	;
EXPR_STATEMENT	5295:4	5295:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5295:4	5295:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5295:4	5295:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5295:4	5295:4	10	assert
LEAF_NODE	5295:4	5295:4	11	assert
LEAF_NODE	5295:10	5295:10	10	(
ARGUMENT	5295:11	5295:33	10	fip -> field_passcount == 1
FIELD	5295:11	5295:16	11	fip -> field_passcount
LEAF_NODE	5295:11	5295:11	12	fip
LEAF_NODE	5295:14	5295:14	12	->
LEAF_NODE	5295:16	5295:16	12	field_passcount
EQ_OPERATOR	5295:31	5295:31	11	==
LEAF_NODE	5295:31	5295:31	12	==
FIELD	5295:33	5295:33	11	1
LEAF_NODE	5295:33	5295:33	12	1
LEAF_NODE	5295:34	5295:34	10	)
LEAF_NODE	5295:35	5295:35	8	;
SELECTION	5296:4	5297:5	7	
KEYWORD	5296:4	5296:4	8	if
LEAF_NODE	5296:4	5296:4	9	if
LEAF_NODE	5296:7	5296:7	8	(
CONDITION	5296:8	5296:8	8	dp -> tdir_count > 0xFFFF
EXPR	5296:8	5296:23	9	dp -> tdir_count > 0xFFFF
FIELD	5296:8	5296:12	10	dp -> tdir_count
LEAF_NODE	5296:8	5296:8	11	dp
LEAF_NODE	5296:10	5296:10	11	->
LEAF_NODE	5296:12	5296:12	11	tdir_count
REL_OPERATOR	5296:22	5296:22	10	>
LEAF_NODE	5296:22	5296:22	11	>
FIELD	5296:23	5296:23	10	0xFFFF
LEAF_NODE	5296:23	5296:23	11	0xFFFF
LEAF_NODE	5296:29	5296:29	8	)
STATEMENTS	5297:5	5297:5	8	
EXPR_STATEMENT	5297:5	5297:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5297:5	5297:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5297:5	5297:9	11	err = TIFFReadDirEntryErrCount
LVAL	5297:5	5297:5	12	err
FIELD	5297:5	5297:5	13	err
LEAF_NODE	5297:5	5297:5	14	err
ASSIGN_OP	5297:8	5297:8	12	=
LEAF_NODE	5297:8	5297:8	13	=
RVAL	5297:9	5297:9	12	TIFFReadDirEntryErrCount
FIELD	5297:9	5297:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5297:9	5297:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5297:33	5297:33	10	;
SELECTION	5298:4	5299:4	7	
KEYWORD	5298:4	5298:4	8	else
LEAF_NODE	5298:4	5298:4	9	else
STATEMENTS	5299:4	5310:4	8	
LEAF_NODE	5299:4	5299:4	9	{
STATEMENTS	5300:5	5301:5	9	
EXPR_STATEMENT	5300:5	5300:49	10	err = TIFFReadDirEntryShortArray ( tif , dp , & data ) ;
EXPR	5300:5	5300:5	11	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
ASSIGN	5300:5	5300:9	12	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
LVAL	5300:5	5300:5	13	err
FIELD	5300:5	5300:5	14	err
LEAF_NODE	5300:5	5300:5	15	err
ASSIGN_OP	5300:8	5300:8	13	=
LEAF_NODE	5300:8	5300:8	14	=
RVAL	5300:9	5300:9	13	TIFFReadDirEntryShortArray ( tif , dp , & data )
FUNCTION_CALL	5300:9	5300:48	14	TIFFReadDirEntryShortArray ( tif , dp , & data )
CALLEE	5300:9	5300:9	15	TIFFReadDirEntryShortArray
LEAF_NODE	5300:9	5300:9	16	TIFFReadDirEntryShortArray
LEAF_NODE	5300:35	5300:35	15	(
ARGUMENT	5300:36	5300:36	15	tif
FIELD	5300:36	5300:36	16	tif
LEAF_NODE	5300:36	5300:36	17	tif
LEAF_NODE	5300:39	5300:39	15	,
ARGUMENT	5300:40	5300:40	15	dp
FIELD	5300:40	5300:40	16	dp
LEAF_NODE	5300:40	5300:40	17	dp
LEAF_NODE	5300:42	5300:42	15	,
ARGUMENT	5300:43	5300:43	15	& data
UNARY_EXPR	5300:43	5300:44	16	& data
UNARY_OPERATOR	5300:43	5300:43	17	&
LEAF_NODE	5300:43	5300:43	18	&
FIELD	5300:44	5300:44	17	data
LEAF_NODE	5300:44	5300:44	18	data
LEAF_NODE	5300:48	5300:48	15	)
LEAF_NODE	5300:49	5300:49	11	;
SELECTION	5301:5	5302:5	10	
KEYWORD	5301:5	5301:5	11	if
LEAF_NODE	5301:5	5301:5	12	if
LEAF_NODE	5301:8	5301:8	11	(
CONDITION	5301:9	5301:9	11	err == TIFFReadDirEntryErrOk
EXPR	5301:9	5301:14	12	err == TIFFReadDirEntryErrOk
FIELD	5301:9	5301:9	13	err
LEAF_NODE	5301:9	5301:9	14	err
EQ_OPERATOR	5301:12	5301:12	13	==
LEAF_NODE	5301:12	5301:12	14	==
FIELD	5301:14	5301:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5301:14	5301:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5301:35	5301:35	11	)
STATEMENTS	5302:5	5309:5	11	
LEAF_NODE	5302:5	5302:5	12	{
STATEMENTS	5303:6	5307:6	12	
SIMPLE_DECL	5303:6	5303:11	13	int m ;
VAR_DECL	5303:6	5303:10	14	int m
TYPE	5303:6	5303:6	15	int
TYPE_NAME	5303:6	5303:6	16	int
LEAF_NODE	5303:6	5303:6	17	int
NAME	5303:10	5303:10	15	m
LEAF_NODE	5303:10	5303:10	16	m
LEAF_NODE	5303:11	5303:11	14	;
EXPR_STATEMENT	5304:6	5304:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5304:6	5304:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5304:6	5304:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5304:6	5304:6	16	m
FIELD	5304:6	5304:6	17	m
LEAF_NODE	5304:6	5304:6	18	m
ASSIGN_OP	5304:7	5304:7	16	=
LEAF_NODE	5304:7	5304:7	17	=
RVAL	5304:8	5304:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5304:8	5304:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5304:8	5304:8	18	TIFFSetField
LEAF_NODE	5304:8	5304:8	19	TIFFSetField
LEAF_NODE	5304:20	5304:20	18	(
ARGUMENT	5304:21	5304:21	18	tif
FIELD	5304:21	5304:21	19	tif
LEAF_NODE	5304:21	5304:21	20	tif
LEAF_NODE	5304:24	5304:24	18	,
ARGUMENT	5304:25	5304:25	18	dp -> tdir_tag
FIELD	5304:25	5304:29	19	dp -> tdir_tag
LEAF_NODE	5304:25	5304:25	20	dp
LEAF_NODE	5304:27	5304:27	20	->
LEAF_NODE	5304:29	5304:29	20	tdir_tag
LEAF_NODE	5304:37	5304:37	18	,
ARGUMENT	5304:38	5304:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5304:38	5304:38	19	(
TYPE_NAME	5304:39	5304:39	19	uint16
LEAF_NODE	5304:39	5304:39	20	uint16
LEAF_NODE	5304:45	5304:45	19	)
LEAF_NODE	5304:46	5304:46	19	(
FIELD	5304:47	5304:51	19	dp -> tdir_count
LEAF_NODE	5304:47	5304:47	20	dp
LEAF_NODE	5304:49	5304:49	20	->
LEAF_NODE	5304:51	5304:51	20	tdir_count
LEAF_NODE	5304:61	5304:61	19	)
LEAF_NODE	5304:62	5304:62	18	,
ARGUMENT	5304:63	5304:63	18	data
FIELD	5304:63	5304:63	19	data
LEAF_NODE	5304:63	5304:63	20	data
LEAF_NODE	5304:67	5304:67	18	)
LEAF_NODE	5304:68	5304:68	14	;
SELECTION	5305:6	5306:7	13	
KEYWORD	5305:6	5305:6	14	if
LEAF_NODE	5305:6	5305:6	15	if
LEAF_NODE	5305:9	5305:9	14	(
CONDITION	5305:10	5305:10	14	data != 0
EXPR	5305:10	5305:16	15	data != 0
FIELD	5305:10	5305:10	16	data
LEAF_NODE	5305:10	5305:10	17	data
EQ_OPERATOR	5305:14	5305:14	16	!=
LEAF_NODE	5305:14	5305:14	17	!=
FIELD	5305:16	5305:16	16	0
LEAF_NODE	5305:16	5305:16	17	0
LEAF_NODE	5305:17	5305:17	14	)
STATEMENTS	5306:7	5306:7	14	
EXPR_STATEMENT	5306:7	5306:22	15	_TIFFfree ( data ) ;
EXPR	5306:7	5306:7	16	_TIFFfree ( data )
FUNCTION_CALL	5306:7	5306:21	17	_TIFFfree ( data )
CALLEE	5306:7	5306:7	18	_TIFFfree
LEAF_NODE	5306:7	5306:7	19	_TIFFfree
LEAF_NODE	5306:16	5306:16	18	(
ARGUMENT	5306:17	5306:17	18	data
FIELD	5306:17	5306:17	19	data
LEAF_NODE	5306:17	5306:17	20	data
LEAF_NODE	5306:21	5306:21	18	)
LEAF_NODE	5306:22	5306:22	16	;
SELECTION	5307:6	5308:7	13	
KEYWORD	5307:6	5307:6	14	if
LEAF_NODE	5307:6	5307:6	15	if
LEAF_NODE	5307:9	5307:9	14	(
CONDITION	5307:10	5307:10	14	! m
EXPR	5307:10	5307:10	15	! m
UNARY_EXPR	5307:10	5307:11	16	! m
UNARY_OPERATOR	5307:10	5307:10	17	!
LEAF_NODE	5307:10	5307:10	18	!
FIELD	5307:11	5307:11	17	m
LEAF_NODE	5307:11	5307:11	18	m
LEAF_NODE	5307:12	5307:12	14	)
STATEMENTS	5308:7	5308:7	14	
JUMP_STATEMENT	5308:7	5308:16	15	return ( 0 ) ;
KEYWORD	5308:7	5308:7	16	return
LEAF_NODE	5308:7	5308:7	17	return
DESTINATION	5308:13	5308:13	16	( 0 )
EXPR	5308:13	5308:15	17	( 0 )
LEAF_NODE	5308:13	5308:13	18	(
FIELD	5308:14	5308:14	18	0
LEAF_NODE	5308:14	5308:14	19	0
LEAF_NODE	5308:15	5308:15	18	)
LEAF_NODE	5308:16	5308:16	16	;
LEAF_NODE	5309:5	5309:5	12	}
LEAF_NODE	5310:4	5310:4	9	}
LEAF_NODE	5311:3	5311:3	6	}
JUMP_STATEMENT	5312:3	5312:8	6	break DESTINATION ;
KEYWORD	5312:3	5312:3	7	break
LEAF_NODE	5312:3	5312:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5312:8	5312:8	7	;
LABEL	5313:2	5313:29	6	case TIFF_SETGET_C16_UINT32 :
LEAF_NODE	5313:2	5313:2	7	case
LEAF_NODE	5313:7	5313:7	7	TIFF_SETGET_C16_UINT32
LEAF_NODE	5313:29	5313:29	7	:
LEAF_NODE	5314:3	5314:3	6	{
STATEMENTS	5315:4	5320:4	6	
SIMPLE_DECL	5315:4	5315:16	7	uint32 * data ;
VAR_DECL	5315:4	5315:12	8	uint32 * data
TYPE	5315:4	5315:10	9	uint32 *
TYPE_NAME	5315:4	5315:4	10	uint32
LEAF_NODE	5315:4	5315:4	11	uint32
POINTER	5315:10	5315:10	10	*
LEAF_NODE	5315:10	5315:10	11	*
NAME	5315:12	5315:12	9	data
LEAF_NODE	5315:12	5315:12	10	data
LEAF_NODE	5315:16	5315:16	8	;
EXPR_STATEMENT	5316:4	5316:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5316:4	5316:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5316:4	5316:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5316:4	5316:4	10	assert
LEAF_NODE	5316:4	5316:4	11	assert
LEAF_NODE	5316:10	5316:10	10	(
ARGUMENT	5316:11	5316:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5316:11	5316:16	11	fip -> field_readcount
LEAF_NODE	5316:11	5316:11	12	fip
LEAF_NODE	5316:14	5316:14	12	->
LEAF_NODE	5316:16	5316:16	12	field_readcount
EQ_OPERATOR	5316:31	5316:31	11	==
LEAF_NODE	5316:31	5316:31	12	==
FIELD	5316:33	5316:33	11	TIFF_VARIABLE
LEAF_NODE	5316:33	5316:33	12	TIFF_VARIABLE
LEAF_NODE	5316:46	5316:46	10	)
LEAF_NODE	5316:47	5316:47	8	;
EXPR_STATEMENT	5317:4	5317:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5317:4	5317:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5317:4	5317:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5317:4	5317:4	10	assert
LEAF_NODE	5317:4	5317:4	11	assert
LEAF_NODE	5317:10	5317:10	10	(
ARGUMENT	5317:11	5317:33	10	fip -> field_passcount == 1
FIELD	5317:11	5317:16	11	fip -> field_passcount
LEAF_NODE	5317:11	5317:11	12	fip
LEAF_NODE	5317:14	5317:14	12	->
LEAF_NODE	5317:16	5317:16	12	field_passcount
EQ_OPERATOR	5317:31	5317:31	11	==
LEAF_NODE	5317:31	5317:31	12	==
FIELD	5317:33	5317:33	11	1
LEAF_NODE	5317:33	5317:33	12	1
LEAF_NODE	5317:34	5317:34	10	)
LEAF_NODE	5317:35	5317:35	8	;
SELECTION	5318:4	5319:5	7	
KEYWORD	5318:4	5318:4	8	if
LEAF_NODE	5318:4	5318:4	9	if
LEAF_NODE	5318:7	5318:7	8	(
CONDITION	5318:8	5318:8	8	dp -> tdir_count > 0xFFFF
EXPR	5318:8	5318:23	9	dp -> tdir_count > 0xFFFF
FIELD	5318:8	5318:12	10	dp -> tdir_count
LEAF_NODE	5318:8	5318:8	11	dp
LEAF_NODE	5318:10	5318:10	11	->
LEAF_NODE	5318:12	5318:12	11	tdir_count
REL_OPERATOR	5318:22	5318:22	10	>
LEAF_NODE	5318:22	5318:22	11	>
FIELD	5318:23	5318:23	10	0xFFFF
LEAF_NODE	5318:23	5318:23	11	0xFFFF
LEAF_NODE	5318:29	5318:29	8	)
STATEMENTS	5319:5	5319:5	8	
EXPR_STATEMENT	5319:5	5319:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5319:5	5319:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5319:5	5319:9	11	err = TIFFReadDirEntryErrCount
LVAL	5319:5	5319:5	12	err
FIELD	5319:5	5319:5	13	err
LEAF_NODE	5319:5	5319:5	14	err
ASSIGN_OP	5319:8	5319:8	12	=
LEAF_NODE	5319:8	5319:8	13	=
RVAL	5319:9	5319:9	12	TIFFReadDirEntryErrCount
FIELD	5319:9	5319:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5319:9	5319:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5319:33	5319:33	10	;
SELECTION	5320:4	5321:4	7	
KEYWORD	5320:4	5320:4	8	else
LEAF_NODE	5320:4	5320:4	9	else
STATEMENTS	5321:4	5332:4	8	
LEAF_NODE	5321:4	5321:4	9	{
STATEMENTS	5322:5	5323:5	9	
EXPR_STATEMENT	5322:5	5322:48	10	err = TIFFReadDirEntryLongArray ( tif , dp , & data ) ;
EXPR	5322:5	5322:5	11	err = TIFFReadDirEntryLongArray ( tif , dp , & data )
ASSIGN	5322:5	5322:9	12	err = TIFFReadDirEntryLongArray ( tif , dp , & data )
LVAL	5322:5	5322:5	13	err
FIELD	5322:5	5322:5	14	err
LEAF_NODE	5322:5	5322:5	15	err
ASSIGN_OP	5322:8	5322:8	13	=
LEAF_NODE	5322:8	5322:8	14	=
RVAL	5322:9	5322:9	13	TIFFReadDirEntryLongArray ( tif , dp , & data )
FUNCTION_CALL	5322:9	5322:47	14	TIFFReadDirEntryLongArray ( tif , dp , & data )
CALLEE	5322:9	5322:9	15	TIFFReadDirEntryLongArray
LEAF_NODE	5322:9	5322:9	16	TIFFReadDirEntryLongArray
LEAF_NODE	5322:34	5322:34	15	(
ARGUMENT	5322:35	5322:35	15	tif
FIELD	5322:35	5322:35	16	tif
LEAF_NODE	5322:35	5322:35	17	tif
LEAF_NODE	5322:38	5322:38	15	,
ARGUMENT	5322:39	5322:39	15	dp
FIELD	5322:39	5322:39	16	dp
LEAF_NODE	5322:39	5322:39	17	dp
LEAF_NODE	5322:41	5322:41	15	,
ARGUMENT	5322:42	5322:42	15	& data
UNARY_EXPR	5322:42	5322:43	16	& data
UNARY_OPERATOR	5322:42	5322:42	17	&
LEAF_NODE	5322:42	5322:42	18	&
FIELD	5322:43	5322:43	17	data
LEAF_NODE	5322:43	5322:43	18	data
LEAF_NODE	5322:47	5322:47	15	)
LEAF_NODE	5322:48	5322:48	11	;
SELECTION	5323:5	5324:5	10	
KEYWORD	5323:5	5323:5	11	if
LEAF_NODE	5323:5	5323:5	12	if
LEAF_NODE	5323:8	5323:8	11	(
CONDITION	5323:9	5323:9	11	err == TIFFReadDirEntryErrOk
EXPR	5323:9	5323:14	12	err == TIFFReadDirEntryErrOk
FIELD	5323:9	5323:9	13	err
LEAF_NODE	5323:9	5323:9	14	err
EQ_OPERATOR	5323:12	5323:12	13	==
LEAF_NODE	5323:12	5323:12	14	==
FIELD	5323:14	5323:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5323:14	5323:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5323:35	5323:35	11	)
STATEMENTS	5324:5	5331:5	11	
LEAF_NODE	5324:5	5324:5	12	{
STATEMENTS	5325:6	5329:6	12	
SIMPLE_DECL	5325:6	5325:11	13	int m ;
VAR_DECL	5325:6	5325:10	14	int m
TYPE	5325:6	5325:6	15	int
TYPE_NAME	5325:6	5325:6	16	int
LEAF_NODE	5325:6	5325:6	17	int
NAME	5325:10	5325:10	15	m
LEAF_NODE	5325:10	5325:10	16	m
LEAF_NODE	5325:11	5325:11	14	;
EXPR_STATEMENT	5326:6	5326:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5326:6	5326:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5326:6	5326:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5326:6	5326:6	16	m
FIELD	5326:6	5326:6	17	m
LEAF_NODE	5326:6	5326:6	18	m
ASSIGN_OP	5326:7	5326:7	16	=
LEAF_NODE	5326:7	5326:7	17	=
RVAL	5326:8	5326:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5326:8	5326:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5326:8	5326:8	18	TIFFSetField
LEAF_NODE	5326:8	5326:8	19	TIFFSetField
LEAF_NODE	5326:20	5326:20	18	(
ARGUMENT	5326:21	5326:21	18	tif
FIELD	5326:21	5326:21	19	tif
LEAF_NODE	5326:21	5326:21	20	tif
LEAF_NODE	5326:24	5326:24	18	,
ARGUMENT	5326:25	5326:25	18	dp -> tdir_tag
FIELD	5326:25	5326:29	19	dp -> tdir_tag
LEAF_NODE	5326:25	5326:25	20	dp
LEAF_NODE	5326:27	5326:27	20	->
LEAF_NODE	5326:29	5326:29	20	tdir_tag
LEAF_NODE	5326:37	5326:37	18	,
ARGUMENT	5326:38	5326:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5326:38	5326:38	19	(
TYPE_NAME	5326:39	5326:39	19	uint16
LEAF_NODE	5326:39	5326:39	20	uint16
LEAF_NODE	5326:45	5326:45	19	)
LEAF_NODE	5326:46	5326:46	19	(
FIELD	5326:47	5326:51	19	dp -> tdir_count
LEAF_NODE	5326:47	5326:47	20	dp
LEAF_NODE	5326:49	5326:49	20	->
LEAF_NODE	5326:51	5326:51	20	tdir_count
LEAF_NODE	5326:61	5326:61	19	)
LEAF_NODE	5326:62	5326:62	18	,
ARGUMENT	5326:63	5326:63	18	data
FIELD	5326:63	5326:63	19	data
LEAF_NODE	5326:63	5326:63	20	data
LEAF_NODE	5326:67	5326:67	18	)
LEAF_NODE	5326:68	5326:68	14	;
SELECTION	5327:6	5328:7	13	
KEYWORD	5327:6	5327:6	14	if
LEAF_NODE	5327:6	5327:6	15	if
LEAF_NODE	5327:9	5327:9	14	(
CONDITION	5327:10	5327:10	14	data != 0
EXPR	5327:10	5327:16	15	data != 0
FIELD	5327:10	5327:10	16	data
LEAF_NODE	5327:10	5327:10	17	data
EQ_OPERATOR	5327:14	5327:14	16	!=
LEAF_NODE	5327:14	5327:14	17	!=
FIELD	5327:16	5327:16	16	0
LEAF_NODE	5327:16	5327:16	17	0
LEAF_NODE	5327:17	5327:17	14	)
STATEMENTS	5328:7	5328:7	14	
EXPR_STATEMENT	5328:7	5328:22	15	_TIFFfree ( data ) ;
EXPR	5328:7	5328:7	16	_TIFFfree ( data )
FUNCTION_CALL	5328:7	5328:21	17	_TIFFfree ( data )
CALLEE	5328:7	5328:7	18	_TIFFfree
LEAF_NODE	5328:7	5328:7	19	_TIFFfree
LEAF_NODE	5328:16	5328:16	18	(
ARGUMENT	5328:17	5328:17	18	data
FIELD	5328:17	5328:17	19	data
LEAF_NODE	5328:17	5328:17	20	data
LEAF_NODE	5328:21	5328:21	18	)
LEAF_NODE	5328:22	5328:22	16	;
SELECTION	5329:6	5330:7	13	
KEYWORD	5329:6	5329:6	14	if
LEAF_NODE	5329:6	5329:6	15	if
LEAF_NODE	5329:9	5329:9	14	(
CONDITION	5329:10	5329:10	14	! m
EXPR	5329:10	5329:10	15	! m
UNARY_EXPR	5329:10	5329:11	16	! m
UNARY_OPERATOR	5329:10	5329:10	17	!
LEAF_NODE	5329:10	5329:10	18	!
FIELD	5329:11	5329:11	17	m
LEAF_NODE	5329:11	5329:11	18	m
LEAF_NODE	5329:12	5329:12	14	)
STATEMENTS	5330:7	5330:7	14	
JUMP_STATEMENT	5330:7	5330:16	15	return ( 0 ) ;
KEYWORD	5330:7	5330:7	16	return
LEAF_NODE	5330:7	5330:7	17	return
DESTINATION	5330:13	5330:13	16	( 0 )
EXPR	5330:13	5330:15	17	( 0 )
LEAF_NODE	5330:13	5330:13	18	(
FIELD	5330:14	5330:14	18	0
LEAF_NODE	5330:14	5330:14	19	0
LEAF_NODE	5330:15	5330:15	18	)
LEAF_NODE	5330:16	5330:16	16	;
LEAF_NODE	5331:5	5331:5	12	}
LEAF_NODE	5332:4	5332:4	9	}
LEAF_NODE	5333:3	5333:3	6	}
JUMP_STATEMENT	5334:3	5334:8	6	break DESTINATION ;
KEYWORD	5334:3	5334:3	7	break
LEAF_NODE	5334:3	5334:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5334:8	5334:8	7	;
LABEL	5335:2	5335:29	6	case TIFF_SETGET_C16_UINT64 :
LEAF_NODE	5335:2	5335:2	7	case
LEAF_NODE	5335:7	5335:7	7	TIFF_SETGET_C16_UINT64
LEAF_NODE	5335:29	5335:29	7	:
LEAF_NODE	5336:3	5336:3	6	{
STATEMENTS	5337:4	5342:4	6	
SIMPLE_DECL	5337:4	5337:16	7	uint64 * data ;
VAR_DECL	5337:4	5337:12	8	uint64 * data
TYPE	5337:4	5337:10	9	uint64 *
TYPE_NAME	5337:4	5337:4	10	uint64
LEAF_NODE	5337:4	5337:4	11	uint64
POINTER	5337:10	5337:10	10	*
LEAF_NODE	5337:10	5337:10	11	*
NAME	5337:12	5337:12	9	data
LEAF_NODE	5337:12	5337:12	10	data
LEAF_NODE	5337:16	5337:16	8	;
EXPR_STATEMENT	5338:4	5338:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5338:4	5338:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5338:4	5338:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5338:4	5338:4	10	assert
LEAF_NODE	5338:4	5338:4	11	assert
LEAF_NODE	5338:10	5338:10	10	(
ARGUMENT	5338:11	5338:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5338:11	5338:16	11	fip -> field_readcount
LEAF_NODE	5338:11	5338:11	12	fip
LEAF_NODE	5338:14	5338:14	12	->
LEAF_NODE	5338:16	5338:16	12	field_readcount
EQ_OPERATOR	5338:31	5338:31	11	==
LEAF_NODE	5338:31	5338:31	12	==
FIELD	5338:33	5338:33	11	TIFF_VARIABLE
LEAF_NODE	5338:33	5338:33	12	TIFF_VARIABLE
LEAF_NODE	5338:46	5338:46	10	)
LEAF_NODE	5338:47	5338:47	8	;
EXPR_STATEMENT	5339:4	5339:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5339:4	5339:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5339:4	5339:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5339:4	5339:4	10	assert
LEAF_NODE	5339:4	5339:4	11	assert
LEAF_NODE	5339:10	5339:10	10	(
ARGUMENT	5339:11	5339:33	10	fip -> field_passcount == 1
FIELD	5339:11	5339:16	11	fip -> field_passcount
LEAF_NODE	5339:11	5339:11	12	fip
LEAF_NODE	5339:14	5339:14	12	->
LEAF_NODE	5339:16	5339:16	12	field_passcount
EQ_OPERATOR	5339:31	5339:31	11	==
LEAF_NODE	5339:31	5339:31	12	==
FIELD	5339:33	5339:33	11	1
LEAF_NODE	5339:33	5339:33	12	1
LEAF_NODE	5339:34	5339:34	10	)
LEAF_NODE	5339:35	5339:35	8	;
SELECTION	5340:4	5341:5	7	
KEYWORD	5340:4	5340:4	8	if
LEAF_NODE	5340:4	5340:4	9	if
LEAF_NODE	5340:7	5340:7	8	(
CONDITION	5340:8	5340:8	8	dp -> tdir_count > 0xFFFF
EXPR	5340:8	5340:23	9	dp -> tdir_count > 0xFFFF
FIELD	5340:8	5340:12	10	dp -> tdir_count
LEAF_NODE	5340:8	5340:8	11	dp
LEAF_NODE	5340:10	5340:10	11	->
LEAF_NODE	5340:12	5340:12	11	tdir_count
REL_OPERATOR	5340:22	5340:22	10	>
LEAF_NODE	5340:22	5340:22	11	>
FIELD	5340:23	5340:23	10	0xFFFF
LEAF_NODE	5340:23	5340:23	11	0xFFFF
LEAF_NODE	5340:29	5340:29	8	)
STATEMENTS	5341:5	5341:5	8	
EXPR_STATEMENT	5341:5	5341:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5341:5	5341:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5341:5	5341:9	11	err = TIFFReadDirEntryErrCount
LVAL	5341:5	5341:5	12	err
FIELD	5341:5	5341:5	13	err
LEAF_NODE	5341:5	5341:5	14	err
ASSIGN_OP	5341:8	5341:8	12	=
LEAF_NODE	5341:8	5341:8	13	=
RVAL	5341:9	5341:9	12	TIFFReadDirEntryErrCount
FIELD	5341:9	5341:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5341:9	5341:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5341:33	5341:33	10	;
SELECTION	5342:4	5343:4	7	
KEYWORD	5342:4	5342:4	8	else
LEAF_NODE	5342:4	5342:4	9	else
STATEMENTS	5343:4	5354:4	8	
LEAF_NODE	5343:4	5343:4	9	{
STATEMENTS	5344:5	5345:5	9	
EXPR_STATEMENT	5344:5	5344:49	10	err = TIFFReadDirEntryLong8Array ( tif , dp , & data ) ;
EXPR	5344:5	5344:5	11	err = TIFFReadDirEntryLong8Array ( tif , dp , & data )
ASSIGN	5344:5	5344:9	12	err = TIFFReadDirEntryLong8Array ( tif , dp , & data )
LVAL	5344:5	5344:5	13	err
FIELD	5344:5	5344:5	14	err
LEAF_NODE	5344:5	5344:5	15	err
ASSIGN_OP	5344:8	5344:8	13	=
LEAF_NODE	5344:8	5344:8	14	=
RVAL	5344:9	5344:9	13	TIFFReadDirEntryLong8Array ( tif , dp , & data )
FUNCTION_CALL	5344:9	5344:48	14	TIFFReadDirEntryLong8Array ( tif , dp , & data )
CALLEE	5344:9	5344:9	15	TIFFReadDirEntryLong8Array
LEAF_NODE	5344:9	5344:9	16	TIFFReadDirEntryLong8Array
LEAF_NODE	5344:35	5344:35	15	(
ARGUMENT	5344:36	5344:36	15	tif
FIELD	5344:36	5344:36	16	tif
LEAF_NODE	5344:36	5344:36	17	tif
LEAF_NODE	5344:39	5344:39	15	,
ARGUMENT	5344:40	5344:40	15	dp
FIELD	5344:40	5344:40	16	dp
LEAF_NODE	5344:40	5344:40	17	dp
LEAF_NODE	5344:42	5344:42	15	,
ARGUMENT	5344:43	5344:43	15	& data
UNARY_EXPR	5344:43	5344:44	16	& data
UNARY_OPERATOR	5344:43	5344:43	17	&
LEAF_NODE	5344:43	5344:43	18	&
FIELD	5344:44	5344:44	17	data
LEAF_NODE	5344:44	5344:44	18	data
LEAF_NODE	5344:48	5344:48	15	)
LEAF_NODE	5344:49	5344:49	11	;
SELECTION	5345:5	5346:5	10	
KEYWORD	5345:5	5345:5	11	if
LEAF_NODE	5345:5	5345:5	12	if
LEAF_NODE	5345:8	5345:8	11	(
CONDITION	5345:9	5345:9	11	err == TIFFReadDirEntryErrOk
EXPR	5345:9	5345:14	12	err == TIFFReadDirEntryErrOk
FIELD	5345:9	5345:9	13	err
LEAF_NODE	5345:9	5345:9	14	err
EQ_OPERATOR	5345:12	5345:12	13	==
LEAF_NODE	5345:12	5345:12	14	==
FIELD	5345:14	5345:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5345:14	5345:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5345:35	5345:35	11	)
STATEMENTS	5346:5	5353:5	11	
LEAF_NODE	5346:5	5346:5	12	{
STATEMENTS	5347:6	5351:6	12	
SIMPLE_DECL	5347:6	5347:11	13	int m ;
VAR_DECL	5347:6	5347:10	14	int m
TYPE	5347:6	5347:6	15	int
TYPE_NAME	5347:6	5347:6	16	int
LEAF_NODE	5347:6	5347:6	17	int
NAME	5347:10	5347:10	15	m
LEAF_NODE	5347:10	5347:10	16	m
LEAF_NODE	5347:11	5347:11	14	;
EXPR_STATEMENT	5348:6	5348:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5348:6	5348:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5348:6	5348:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5348:6	5348:6	16	m
FIELD	5348:6	5348:6	17	m
LEAF_NODE	5348:6	5348:6	18	m
ASSIGN_OP	5348:7	5348:7	16	=
LEAF_NODE	5348:7	5348:7	17	=
RVAL	5348:8	5348:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5348:8	5348:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5348:8	5348:8	18	TIFFSetField
LEAF_NODE	5348:8	5348:8	19	TIFFSetField
LEAF_NODE	5348:20	5348:20	18	(
ARGUMENT	5348:21	5348:21	18	tif
FIELD	5348:21	5348:21	19	tif
LEAF_NODE	5348:21	5348:21	20	tif
LEAF_NODE	5348:24	5348:24	18	,
ARGUMENT	5348:25	5348:25	18	dp -> tdir_tag
FIELD	5348:25	5348:29	19	dp -> tdir_tag
LEAF_NODE	5348:25	5348:25	20	dp
LEAF_NODE	5348:27	5348:27	20	->
LEAF_NODE	5348:29	5348:29	20	tdir_tag
LEAF_NODE	5348:37	5348:37	18	,
ARGUMENT	5348:38	5348:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5348:38	5348:38	19	(
TYPE_NAME	5348:39	5348:39	19	uint16
LEAF_NODE	5348:39	5348:39	20	uint16
LEAF_NODE	5348:45	5348:45	19	)
LEAF_NODE	5348:46	5348:46	19	(
FIELD	5348:47	5348:51	19	dp -> tdir_count
LEAF_NODE	5348:47	5348:47	20	dp
LEAF_NODE	5348:49	5348:49	20	->
LEAF_NODE	5348:51	5348:51	20	tdir_count
LEAF_NODE	5348:61	5348:61	19	)
LEAF_NODE	5348:62	5348:62	18	,
ARGUMENT	5348:63	5348:63	18	data
FIELD	5348:63	5348:63	19	data
LEAF_NODE	5348:63	5348:63	20	data
LEAF_NODE	5348:67	5348:67	18	)
LEAF_NODE	5348:68	5348:68	14	;
SELECTION	5349:6	5350:7	13	
KEYWORD	5349:6	5349:6	14	if
LEAF_NODE	5349:6	5349:6	15	if
LEAF_NODE	5349:9	5349:9	14	(
CONDITION	5349:10	5349:10	14	data != 0
EXPR	5349:10	5349:16	15	data != 0
FIELD	5349:10	5349:10	16	data
LEAF_NODE	5349:10	5349:10	17	data
EQ_OPERATOR	5349:14	5349:14	16	!=
LEAF_NODE	5349:14	5349:14	17	!=
FIELD	5349:16	5349:16	16	0
LEAF_NODE	5349:16	5349:16	17	0
LEAF_NODE	5349:17	5349:17	14	)
STATEMENTS	5350:7	5350:7	14	
EXPR_STATEMENT	5350:7	5350:22	15	_TIFFfree ( data ) ;
EXPR	5350:7	5350:7	16	_TIFFfree ( data )
FUNCTION_CALL	5350:7	5350:21	17	_TIFFfree ( data )
CALLEE	5350:7	5350:7	18	_TIFFfree
LEAF_NODE	5350:7	5350:7	19	_TIFFfree
LEAF_NODE	5350:16	5350:16	18	(
ARGUMENT	5350:17	5350:17	18	data
FIELD	5350:17	5350:17	19	data
LEAF_NODE	5350:17	5350:17	20	data
LEAF_NODE	5350:21	5350:21	18	)
LEAF_NODE	5350:22	5350:22	16	;
SELECTION	5351:6	5352:7	13	
KEYWORD	5351:6	5351:6	14	if
LEAF_NODE	5351:6	5351:6	15	if
LEAF_NODE	5351:9	5351:9	14	(
CONDITION	5351:10	5351:10	14	! m
EXPR	5351:10	5351:10	15	! m
UNARY_EXPR	5351:10	5351:11	16	! m
UNARY_OPERATOR	5351:10	5351:10	17	!
LEAF_NODE	5351:10	5351:10	18	!
FIELD	5351:11	5351:11	17	m
LEAF_NODE	5351:11	5351:11	18	m
LEAF_NODE	5351:12	5351:12	14	)
STATEMENTS	5352:7	5352:7	14	
JUMP_STATEMENT	5352:7	5352:16	15	return ( 0 ) ;
KEYWORD	5352:7	5352:7	16	return
LEAF_NODE	5352:7	5352:7	17	return
DESTINATION	5352:13	5352:13	16	( 0 )
EXPR	5352:13	5352:15	17	( 0 )
LEAF_NODE	5352:13	5352:13	18	(
FIELD	5352:14	5352:14	18	0
LEAF_NODE	5352:14	5352:14	19	0
LEAF_NODE	5352:15	5352:15	18	)
LEAF_NODE	5352:16	5352:16	16	;
LEAF_NODE	5353:5	5353:5	12	}
LEAF_NODE	5354:4	5354:4	9	}
LEAF_NODE	5355:3	5355:3	6	}
JUMP_STATEMENT	5356:3	5356:8	6	break DESTINATION ;
KEYWORD	5356:3	5356:3	7	break
LEAF_NODE	5356:3	5356:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5356:8	5356:8	7	;
LABEL	5357:2	5357:28	6	case TIFF_SETGET_C16_FLOAT :
LEAF_NODE	5357:2	5357:2	7	case
LEAF_NODE	5357:7	5357:7	7	TIFF_SETGET_C16_FLOAT
LEAF_NODE	5357:28	5357:28	7	:
LEAF_NODE	5358:3	5358:3	6	{
STATEMENTS	5359:4	5364:4	6	
SIMPLE_DECL	5359:4	5359:15	7	float * data ;
VAR_DECL	5359:4	5359:11	8	float * data
TYPE	5359:4	5359:9	9	float *
TYPE_NAME	5359:4	5359:4	10	float
LEAF_NODE	5359:4	5359:4	11	float
POINTER	5359:9	5359:9	10	*
LEAF_NODE	5359:9	5359:9	11	*
NAME	5359:11	5359:11	9	data
LEAF_NODE	5359:11	5359:11	10	data
LEAF_NODE	5359:15	5359:15	8	;
EXPR_STATEMENT	5360:4	5360:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5360:4	5360:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5360:4	5360:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5360:4	5360:4	10	assert
LEAF_NODE	5360:4	5360:4	11	assert
LEAF_NODE	5360:10	5360:10	10	(
ARGUMENT	5360:11	5360:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5360:11	5360:16	11	fip -> field_readcount
LEAF_NODE	5360:11	5360:11	12	fip
LEAF_NODE	5360:14	5360:14	12	->
LEAF_NODE	5360:16	5360:16	12	field_readcount
EQ_OPERATOR	5360:31	5360:31	11	==
LEAF_NODE	5360:31	5360:31	12	==
FIELD	5360:33	5360:33	11	TIFF_VARIABLE
LEAF_NODE	5360:33	5360:33	12	TIFF_VARIABLE
LEAF_NODE	5360:46	5360:46	10	)
LEAF_NODE	5360:47	5360:47	8	;
EXPR_STATEMENT	5361:4	5361:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5361:4	5361:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5361:4	5361:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5361:4	5361:4	10	assert
LEAF_NODE	5361:4	5361:4	11	assert
LEAF_NODE	5361:10	5361:10	10	(
ARGUMENT	5361:11	5361:33	10	fip -> field_passcount == 1
FIELD	5361:11	5361:16	11	fip -> field_passcount
LEAF_NODE	5361:11	5361:11	12	fip
LEAF_NODE	5361:14	5361:14	12	->
LEAF_NODE	5361:16	5361:16	12	field_passcount
EQ_OPERATOR	5361:31	5361:31	11	==
LEAF_NODE	5361:31	5361:31	12	==
FIELD	5361:33	5361:33	11	1
LEAF_NODE	5361:33	5361:33	12	1
LEAF_NODE	5361:34	5361:34	10	)
LEAF_NODE	5361:35	5361:35	8	;
SELECTION	5362:4	5363:5	7	
KEYWORD	5362:4	5362:4	8	if
LEAF_NODE	5362:4	5362:4	9	if
LEAF_NODE	5362:7	5362:7	8	(
CONDITION	5362:8	5362:8	8	dp -> tdir_count > 0xFFFF
EXPR	5362:8	5362:23	9	dp -> tdir_count > 0xFFFF
FIELD	5362:8	5362:12	10	dp -> tdir_count
LEAF_NODE	5362:8	5362:8	11	dp
LEAF_NODE	5362:10	5362:10	11	->
LEAF_NODE	5362:12	5362:12	11	tdir_count
REL_OPERATOR	5362:22	5362:22	10	>
LEAF_NODE	5362:22	5362:22	11	>
FIELD	5362:23	5362:23	10	0xFFFF
LEAF_NODE	5362:23	5362:23	11	0xFFFF
LEAF_NODE	5362:29	5362:29	8	)
STATEMENTS	5363:5	5363:5	8	
EXPR_STATEMENT	5363:5	5363:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5363:5	5363:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5363:5	5363:9	11	err = TIFFReadDirEntryErrCount
LVAL	5363:5	5363:5	12	err
FIELD	5363:5	5363:5	13	err
LEAF_NODE	5363:5	5363:5	14	err
ASSIGN_OP	5363:8	5363:8	12	=
LEAF_NODE	5363:8	5363:8	13	=
RVAL	5363:9	5363:9	12	TIFFReadDirEntryErrCount
FIELD	5363:9	5363:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5363:9	5363:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5363:33	5363:33	10	;
SELECTION	5364:4	5365:4	7	
KEYWORD	5364:4	5364:4	8	else
LEAF_NODE	5364:4	5364:4	9	else
STATEMENTS	5365:4	5376:4	8	
LEAF_NODE	5365:4	5365:4	9	{
STATEMENTS	5366:5	5367:5	9	
EXPR_STATEMENT	5366:5	5366:49	10	err = TIFFReadDirEntryFloatArray ( tif , dp , & data ) ;
EXPR	5366:5	5366:5	11	err = TIFFReadDirEntryFloatArray ( tif , dp , & data )
ASSIGN	5366:5	5366:9	12	err = TIFFReadDirEntryFloatArray ( tif , dp , & data )
LVAL	5366:5	5366:5	13	err
FIELD	5366:5	5366:5	14	err
LEAF_NODE	5366:5	5366:5	15	err
ASSIGN_OP	5366:8	5366:8	13	=
LEAF_NODE	5366:8	5366:8	14	=
RVAL	5366:9	5366:9	13	TIFFReadDirEntryFloatArray ( tif , dp , & data )
FUNCTION_CALL	5366:9	5366:48	14	TIFFReadDirEntryFloatArray ( tif , dp , & data )
CALLEE	5366:9	5366:9	15	TIFFReadDirEntryFloatArray
LEAF_NODE	5366:9	5366:9	16	TIFFReadDirEntryFloatArray
LEAF_NODE	5366:35	5366:35	15	(
ARGUMENT	5366:36	5366:36	15	tif
FIELD	5366:36	5366:36	16	tif
LEAF_NODE	5366:36	5366:36	17	tif
LEAF_NODE	5366:39	5366:39	15	,
ARGUMENT	5366:40	5366:40	15	dp
FIELD	5366:40	5366:40	16	dp
LEAF_NODE	5366:40	5366:40	17	dp
LEAF_NODE	5366:42	5366:42	15	,
ARGUMENT	5366:43	5366:43	15	& data
UNARY_EXPR	5366:43	5366:44	16	& data
UNARY_OPERATOR	5366:43	5366:43	17	&
LEAF_NODE	5366:43	5366:43	18	&
FIELD	5366:44	5366:44	17	data
LEAF_NODE	5366:44	5366:44	18	data
LEAF_NODE	5366:48	5366:48	15	)
LEAF_NODE	5366:49	5366:49	11	;
SELECTION	5367:5	5368:5	10	
KEYWORD	5367:5	5367:5	11	if
LEAF_NODE	5367:5	5367:5	12	if
LEAF_NODE	5367:8	5367:8	11	(
CONDITION	5367:9	5367:9	11	err == TIFFReadDirEntryErrOk
EXPR	5367:9	5367:14	12	err == TIFFReadDirEntryErrOk
FIELD	5367:9	5367:9	13	err
LEAF_NODE	5367:9	5367:9	14	err
EQ_OPERATOR	5367:12	5367:12	13	==
LEAF_NODE	5367:12	5367:12	14	==
FIELD	5367:14	5367:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5367:14	5367:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5367:35	5367:35	11	)
STATEMENTS	5368:5	5375:5	11	
LEAF_NODE	5368:5	5368:5	12	{
STATEMENTS	5369:6	5373:6	12	
SIMPLE_DECL	5369:6	5369:11	13	int m ;
VAR_DECL	5369:6	5369:10	14	int m
TYPE	5369:6	5369:6	15	int
TYPE_NAME	5369:6	5369:6	16	int
LEAF_NODE	5369:6	5369:6	17	int
NAME	5369:10	5369:10	15	m
LEAF_NODE	5369:10	5369:10	16	m
LEAF_NODE	5369:11	5369:11	14	;
EXPR_STATEMENT	5370:6	5370:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5370:6	5370:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5370:6	5370:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5370:6	5370:6	16	m
FIELD	5370:6	5370:6	17	m
LEAF_NODE	5370:6	5370:6	18	m
ASSIGN_OP	5370:7	5370:7	16	=
LEAF_NODE	5370:7	5370:7	17	=
RVAL	5370:8	5370:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5370:8	5370:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5370:8	5370:8	18	TIFFSetField
LEAF_NODE	5370:8	5370:8	19	TIFFSetField
LEAF_NODE	5370:20	5370:20	18	(
ARGUMENT	5370:21	5370:21	18	tif
FIELD	5370:21	5370:21	19	tif
LEAF_NODE	5370:21	5370:21	20	tif
LEAF_NODE	5370:24	5370:24	18	,
ARGUMENT	5370:25	5370:25	18	dp -> tdir_tag
FIELD	5370:25	5370:29	19	dp -> tdir_tag
LEAF_NODE	5370:25	5370:25	20	dp
LEAF_NODE	5370:27	5370:27	20	->
LEAF_NODE	5370:29	5370:29	20	tdir_tag
LEAF_NODE	5370:37	5370:37	18	,
ARGUMENT	5370:38	5370:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5370:38	5370:38	19	(
TYPE_NAME	5370:39	5370:39	19	uint16
LEAF_NODE	5370:39	5370:39	20	uint16
LEAF_NODE	5370:45	5370:45	19	)
LEAF_NODE	5370:46	5370:46	19	(
FIELD	5370:47	5370:51	19	dp -> tdir_count
LEAF_NODE	5370:47	5370:47	20	dp
LEAF_NODE	5370:49	5370:49	20	->
LEAF_NODE	5370:51	5370:51	20	tdir_count
LEAF_NODE	5370:61	5370:61	19	)
LEAF_NODE	5370:62	5370:62	18	,
ARGUMENT	5370:63	5370:63	18	data
FIELD	5370:63	5370:63	19	data
LEAF_NODE	5370:63	5370:63	20	data
LEAF_NODE	5370:67	5370:67	18	)
LEAF_NODE	5370:68	5370:68	14	;
SELECTION	5371:6	5372:7	13	
KEYWORD	5371:6	5371:6	14	if
LEAF_NODE	5371:6	5371:6	15	if
LEAF_NODE	5371:9	5371:9	14	(
CONDITION	5371:10	5371:10	14	data != 0
EXPR	5371:10	5371:16	15	data != 0
FIELD	5371:10	5371:10	16	data
LEAF_NODE	5371:10	5371:10	17	data
EQ_OPERATOR	5371:14	5371:14	16	!=
LEAF_NODE	5371:14	5371:14	17	!=
FIELD	5371:16	5371:16	16	0
LEAF_NODE	5371:16	5371:16	17	0
LEAF_NODE	5371:17	5371:17	14	)
STATEMENTS	5372:7	5372:7	14	
EXPR_STATEMENT	5372:7	5372:22	15	_TIFFfree ( data ) ;
EXPR	5372:7	5372:7	16	_TIFFfree ( data )
FUNCTION_CALL	5372:7	5372:21	17	_TIFFfree ( data )
CALLEE	5372:7	5372:7	18	_TIFFfree
LEAF_NODE	5372:7	5372:7	19	_TIFFfree
LEAF_NODE	5372:16	5372:16	18	(
ARGUMENT	5372:17	5372:17	18	data
FIELD	5372:17	5372:17	19	data
LEAF_NODE	5372:17	5372:17	20	data
LEAF_NODE	5372:21	5372:21	18	)
LEAF_NODE	5372:22	5372:22	16	;
SELECTION	5373:6	5374:7	13	
KEYWORD	5373:6	5373:6	14	if
LEAF_NODE	5373:6	5373:6	15	if
LEAF_NODE	5373:9	5373:9	14	(
CONDITION	5373:10	5373:10	14	! m
EXPR	5373:10	5373:10	15	! m
UNARY_EXPR	5373:10	5373:11	16	! m
UNARY_OPERATOR	5373:10	5373:10	17	!
LEAF_NODE	5373:10	5373:10	18	!
FIELD	5373:11	5373:11	17	m
LEAF_NODE	5373:11	5373:11	18	m
LEAF_NODE	5373:12	5373:12	14	)
STATEMENTS	5374:7	5374:7	14	
JUMP_STATEMENT	5374:7	5374:16	15	return ( 0 ) ;
KEYWORD	5374:7	5374:7	16	return
LEAF_NODE	5374:7	5374:7	17	return
DESTINATION	5374:13	5374:13	16	( 0 )
EXPR	5374:13	5374:15	17	( 0 )
LEAF_NODE	5374:13	5374:13	18	(
FIELD	5374:14	5374:14	18	0
LEAF_NODE	5374:14	5374:14	19	0
LEAF_NODE	5374:15	5374:15	18	)
LEAF_NODE	5374:16	5374:16	16	;
LEAF_NODE	5375:5	5375:5	12	}
LEAF_NODE	5376:4	5376:4	9	}
LEAF_NODE	5377:3	5377:3	6	}
JUMP_STATEMENT	5378:3	5378:8	6	break DESTINATION ;
KEYWORD	5378:3	5378:3	7	break
LEAF_NODE	5378:3	5378:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5378:8	5378:8	7	;
LABEL	5379:2	5379:29	6	case TIFF_SETGET_C16_DOUBLE :
LEAF_NODE	5379:2	5379:2	7	case
LEAF_NODE	5379:7	5379:7	7	TIFF_SETGET_C16_DOUBLE
LEAF_NODE	5379:29	5379:29	7	:
LEAF_NODE	5380:3	5380:3	6	{
STATEMENTS	5381:4	5386:4	6	
SIMPLE_DECL	5381:4	5381:16	7	double * data ;
VAR_DECL	5381:4	5381:12	8	double * data
TYPE	5381:4	5381:10	9	double *
TYPE_NAME	5381:4	5381:4	10	double
LEAF_NODE	5381:4	5381:4	11	double
POINTER	5381:10	5381:10	10	*
LEAF_NODE	5381:10	5381:10	11	*
NAME	5381:12	5381:12	9	data
LEAF_NODE	5381:12	5381:12	10	data
LEAF_NODE	5381:16	5381:16	8	;
EXPR_STATEMENT	5382:4	5382:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5382:4	5382:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5382:4	5382:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5382:4	5382:4	10	assert
LEAF_NODE	5382:4	5382:4	11	assert
LEAF_NODE	5382:10	5382:10	10	(
ARGUMENT	5382:11	5382:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5382:11	5382:16	11	fip -> field_readcount
LEAF_NODE	5382:11	5382:11	12	fip
LEAF_NODE	5382:14	5382:14	12	->
LEAF_NODE	5382:16	5382:16	12	field_readcount
EQ_OPERATOR	5382:31	5382:31	11	==
LEAF_NODE	5382:31	5382:31	12	==
FIELD	5382:33	5382:33	11	TIFF_VARIABLE
LEAF_NODE	5382:33	5382:33	12	TIFF_VARIABLE
LEAF_NODE	5382:46	5382:46	10	)
LEAF_NODE	5382:47	5382:47	8	;
EXPR_STATEMENT	5383:4	5383:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5383:4	5383:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5383:4	5383:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5383:4	5383:4	10	assert
LEAF_NODE	5383:4	5383:4	11	assert
LEAF_NODE	5383:10	5383:10	10	(
ARGUMENT	5383:11	5383:33	10	fip -> field_passcount == 1
FIELD	5383:11	5383:16	11	fip -> field_passcount
LEAF_NODE	5383:11	5383:11	12	fip
LEAF_NODE	5383:14	5383:14	12	->
LEAF_NODE	5383:16	5383:16	12	field_passcount
EQ_OPERATOR	5383:31	5383:31	11	==
LEAF_NODE	5383:31	5383:31	12	==
FIELD	5383:33	5383:33	11	1
LEAF_NODE	5383:33	5383:33	12	1
LEAF_NODE	5383:34	5383:34	10	)
LEAF_NODE	5383:35	5383:35	8	;
SELECTION	5384:4	5385:5	7	
KEYWORD	5384:4	5384:4	8	if
LEAF_NODE	5384:4	5384:4	9	if
LEAF_NODE	5384:7	5384:7	8	(
CONDITION	5384:8	5384:8	8	dp -> tdir_count > 0xFFFF
EXPR	5384:8	5384:23	9	dp -> tdir_count > 0xFFFF
FIELD	5384:8	5384:12	10	dp -> tdir_count
LEAF_NODE	5384:8	5384:8	11	dp
LEAF_NODE	5384:10	5384:10	11	->
LEAF_NODE	5384:12	5384:12	11	tdir_count
REL_OPERATOR	5384:22	5384:22	10	>
LEAF_NODE	5384:22	5384:22	11	>
FIELD	5384:23	5384:23	10	0xFFFF
LEAF_NODE	5384:23	5384:23	11	0xFFFF
LEAF_NODE	5384:29	5384:29	8	)
STATEMENTS	5385:5	5385:5	8	
EXPR_STATEMENT	5385:5	5385:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5385:5	5385:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5385:5	5385:9	11	err = TIFFReadDirEntryErrCount
LVAL	5385:5	5385:5	12	err
FIELD	5385:5	5385:5	13	err
LEAF_NODE	5385:5	5385:5	14	err
ASSIGN_OP	5385:8	5385:8	12	=
LEAF_NODE	5385:8	5385:8	13	=
RVAL	5385:9	5385:9	12	TIFFReadDirEntryErrCount
FIELD	5385:9	5385:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5385:9	5385:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5385:33	5385:33	10	;
SELECTION	5386:4	5387:4	7	
KEYWORD	5386:4	5386:4	8	else
LEAF_NODE	5386:4	5386:4	9	else
STATEMENTS	5387:4	5398:4	8	
LEAF_NODE	5387:4	5387:4	9	{
STATEMENTS	5388:5	5389:5	9	
EXPR_STATEMENT	5388:5	5388:50	10	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data ) ;
EXPR	5388:5	5388:5	11	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data )
ASSIGN	5388:5	5388:9	12	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data )
LVAL	5388:5	5388:5	13	err
FIELD	5388:5	5388:5	14	err
LEAF_NODE	5388:5	5388:5	15	err
ASSIGN_OP	5388:8	5388:8	13	=
LEAF_NODE	5388:8	5388:8	14	=
RVAL	5388:9	5388:9	13	TIFFReadDirEntryDoubleArray ( tif , dp , & data )
FUNCTION_CALL	5388:9	5388:49	14	TIFFReadDirEntryDoubleArray ( tif , dp , & data )
CALLEE	5388:9	5388:9	15	TIFFReadDirEntryDoubleArray
LEAF_NODE	5388:9	5388:9	16	TIFFReadDirEntryDoubleArray
LEAF_NODE	5388:36	5388:36	15	(
ARGUMENT	5388:37	5388:37	15	tif
FIELD	5388:37	5388:37	16	tif
LEAF_NODE	5388:37	5388:37	17	tif
LEAF_NODE	5388:40	5388:40	15	,
ARGUMENT	5388:41	5388:41	15	dp
FIELD	5388:41	5388:41	16	dp
LEAF_NODE	5388:41	5388:41	17	dp
LEAF_NODE	5388:43	5388:43	15	,
ARGUMENT	5388:44	5388:44	15	& data
UNARY_EXPR	5388:44	5388:45	16	& data
UNARY_OPERATOR	5388:44	5388:44	17	&
LEAF_NODE	5388:44	5388:44	18	&
FIELD	5388:45	5388:45	17	data
LEAF_NODE	5388:45	5388:45	18	data
LEAF_NODE	5388:49	5388:49	15	)
LEAF_NODE	5388:50	5388:50	11	;
SELECTION	5389:5	5390:5	10	
KEYWORD	5389:5	5389:5	11	if
LEAF_NODE	5389:5	5389:5	12	if
LEAF_NODE	5389:8	5389:8	11	(
CONDITION	5389:9	5389:9	11	err == TIFFReadDirEntryErrOk
EXPR	5389:9	5389:14	12	err == TIFFReadDirEntryErrOk
FIELD	5389:9	5389:9	13	err
LEAF_NODE	5389:9	5389:9	14	err
EQ_OPERATOR	5389:12	5389:12	13	==
LEAF_NODE	5389:12	5389:12	14	==
FIELD	5389:14	5389:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5389:14	5389:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5389:35	5389:35	11	)
STATEMENTS	5390:5	5397:5	11	
LEAF_NODE	5390:5	5390:5	12	{
STATEMENTS	5391:6	5395:6	12	
SIMPLE_DECL	5391:6	5391:11	13	int m ;
VAR_DECL	5391:6	5391:10	14	int m
TYPE	5391:6	5391:6	15	int
TYPE_NAME	5391:6	5391:6	16	int
LEAF_NODE	5391:6	5391:6	17	int
NAME	5391:10	5391:10	15	m
LEAF_NODE	5391:10	5391:10	16	m
LEAF_NODE	5391:11	5391:11	14	;
EXPR_STATEMENT	5392:6	5392:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5392:6	5392:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5392:6	5392:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5392:6	5392:6	16	m
FIELD	5392:6	5392:6	17	m
LEAF_NODE	5392:6	5392:6	18	m
ASSIGN_OP	5392:7	5392:7	16	=
LEAF_NODE	5392:7	5392:7	17	=
RVAL	5392:8	5392:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5392:8	5392:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5392:8	5392:8	18	TIFFSetField
LEAF_NODE	5392:8	5392:8	19	TIFFSetField
LEAF_NODE	5392:20	5392:20	18	(
ARGUMENT	5392:21	5392:21	18	tif
FIELD	5392:21	5392:21	19	tif
LEAF_NODE	5392:21	5392:21	20	tif
LEAF_NODE	5392:24	5392:24	18	,
ARGUMENT	5392:25	5392:25	18	dp -> tdir_tag
FIELD	5392:25	5392:29	19	dp -> tdir_tag
LEAF_NODE	5392:25	5392:25	20	dp
LEAF_NODE	5392:27	5392:27	20	->
LEAF_NODE	5392:29	5392:29	20	tdir_tag
LEAF_NODE	5392:37	5392:37	18	,
ARGUMENT	5392:38	5392:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5392:38	5392:38	19	(
TYPE_NAME	5392:39	5392:39	19	uint16
LEAF_NODE	5392:39	5392:39	20	uint16
LEAF_NODE	5392:45	5392:45	19	)
LEAF_NODE	5392:46	5392:46	19	(
FIELD	5392:47	5392:51	19	dp -> tdir_count
LEAF_NODE	5392:47	5392:47	20	dp
LEAF_NODE	5392:49	5392:49	20	->
LEAF_NODE	5392:51	5392:51	20	tdir_count
LEAF_NODE	5392:61	5392:61	19	)
LEAF_NODE	5392:62	5392:62	18	,
ARGUMENT	5392:63	5392:63	18	data
FIELD	5392:63	5392:63	19	data
LEAF_NODE	5392:63	5392:63	20	data
LEAF_NODE	5392:67	5392:67	18	)
LEAF_NODE	5392:68	5392:68	14	;
SELECTION	5393:6	5394:7	13	
KEYWORD	5393:6	5393:6	14	if
LEAF_NODE	5393:6	5393:6	15	if
LEAF_NODE	5393:9	5393:9	14	(
CONDITION	5393:10	5393:10	14	data != 0
EXPR	5393:10	5393:16	15	data != 0
FIELD	5393:10	5393:10	16	data
LEAF_NODE	5393:10	5393:10	17	data
EQ_OPERATOR	5393:14	5393:14	16	!=
LEAF_NODE	5393:14	5393:14	17	!=
FIELD	5393:16	5393:16	16	0
LEAF_NODE	5393:16	5393:16	17	0
LEAF_NODE	5393:17	5393:17	14	)
STATEMENTS	5394:7	5394:7	14	
EXPR_STATEMENT	5394:7	5394:22	15	_TIFFfree ( data ) ;
EXPR	5394:7	5394:7	16	_TIFFfree ( data )
FUNCTION_CALL	5394:7	5394:21	17	_TIFFfree ( data )
CALLEE	5394:7	5394:7	18	_TIFFfree
LEAF_NODE	5394:7	5394:7	19	_TIFFfree
LEAF_NODE	5394:16	5394:16	18	(
ARGUMENT	5394:17	5394:17	18	data
FIELD	5394:17	5394:17	19	data
LEAF_NODE	5394:17	5394:17	20	data
LEAF_NODE	5394:21	5394:21	18	)
LEAF_NODE	5394:22	5394:22	16	;
SELECTION	5395:6	5396:7	13	
KEYWORD	5395:6	5395:6	14	if
LEAF_NODE	5395:6	5395:6	15	if
LEAF_NODE	5395:9	5395:9	14	(
CONDITION	5395:10	5395:10	14	! m
EXPR	5395:10	5395:10	15	! m
UNARY_EXPR	5395:10	5395:11	16	! m
UNARY_OPERATOR	5395:10	5395:10	17	!
LEAF_NODE	5395:10	5395:10	18	!
FIELD	5395:11	5395:11	17	m
LEAF_NODE	5395:11	5395:11	18	m
LEAF_NODE	5395:12	5395:12	14	)
STATEMENTS	5396:7	5396:7	14	
JUMP_STATEMENT	5396:7	5396:16	15	return ( 0 ) ;
KEYWORD	5396:7	5396:7	16	return
LEAF_NODE	5396:7	5396:7	17	return
DESTINATION	5396:13	5396:13	16	( 0 )
EXPR	5396:13	5396:15	17	( 0 )
LEAF_NODE	5396:13	5396:13	18	(
FIELD	5396:14	5396:14	18	0
LEAF_NODE	5396:14	5396:14	19	0
LEAF_NODE	5396:15	5396:15	18	)
LEAF_NODE	5396:16	5396:16	16	;
LEAF_NODE	5397:5	5397:5	12	}
LEAF_NODE	5398:4	5398:4	9	}
LEAF_NODE	5399:3	5399:3	6	}
JUMP_STATEMENT	5400:3	5400:8	6	break DESTINATION ;
KEYWORD	5400:3	5400:3	7	break
LEAF_NODE	5400:3	5400:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5400:8	5400:8	7	;
LABEL	5401:2	5401:27	6	case TIFF_SETGET_C16_IFD8 :
LEAF_NODE	5401:2	5401:2	7	case
LEAF_NODE	5401:7	5401:7	7	TIFF_SETGET_C16_IFD8
LEAF_NODE	5401:27	5401:27	7	:
LEAF_NODE	5402:3	5402:3	6	{
STATEMENTS	5403:4	5408:4	6	
SIMPLE_DECL	5403:4	5403:16	7	uint64 * data ;
VAR_DECL	5403:4	5403:12	8	uint64 * data
TYPE	5403:4	5403:10	9	uint64 *
TYPE_NAME	5403:4	5403:4	10	uint64
LEAF_NODE	5403:4	5403:4	11	uint64
POINTER	5403:10	5403:10	10	*
LEAF_NODE	5403:10	5403:10	11	*
NAME	5403:12	5403:12	9	data
LEAF_NODE	5403:12	5403:12	10	data
LEAF_NODE	5403:16	5403:16	8	;
EXPR_STATEMENT	5404:4	5404:47	7	assert ( fip -> field_readcount == TIFF_VARIABLE ) ;
EXPR	5404:4	5404:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE )
FUNCTION_CALL	5404:4	5404:46	9	assert ( fip -> field_readcount == TIFF_VARIABLE )
CALLEE	5404:4	5404:4	10	assert
LEAF_NODE	5404:4	5404:4	11	assert
LEAF_NODE	5404:10	5404:10	10	(
ARGUMENT	5404:11	5404:33	10	fip -> field_readcount == TIFF_VARIABLE
FIELD	5404:11	5404:16	11	fip -> field_readcount
LEAF_NODE	5404:11	5404:11	12	fip
LEAF_NODE	5404:14	5404:14	12	->
LEAF_NODE	5404:16	5404:16	12	field_readcount
EQ_OPERATOR	5404:31	5404:31	11	==
LEAF_NODE	5404:31	5404:31	12	==
FIELD	5404:33	5404:33	11	TIFF_VARIABLE
LEAF_NODE	5404:33	5404:33	12	TIFF_VARIABLE
LEAF_NODE	5404:46	5404:46	10	)
LEAF_NODE	5404:47	5404:47	8	;
EXPR_STATEMENT	5405:4	5405:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5405:4	5405:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5405:4	5405:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5405:4	5405:4	10	assert
LEAF_NODE	5405:4	5405:4	11	assert
LEAF_NODE	5405:10	5405:10	10	(
ARGUMENT	5405:11	5405:33	10	fip -> field_passcount == 1
FIELD	5405:11	5405:16	11	fip -> field_passcount
LEAF_NODE	5405:11	5405:11	12	fip
LEAF_NODE	5405:14	5405:14	12	->
LEAF_NODE	5405:16	5405:16	12	field_passcount
EQ_OPERATOR	5405:31	5405:31	11	==
LEAF_NODE	5405:31	5405:31	12	==
FIELD	5405:33	5405:33	11	1
LEAF_NODE	5405:33	5405:33	12	1
LEAF_NODE	5405:34	5405:34	10	)
LEAF_NODE	5405:35	5405:35	8	;
SELECTION	5406:4	5407:5	7	
KEYWORD	5406:4	5406:4	8	if
LEAF_NODE	5406:4	5406:4	9	if
LEAF_NODE	5406:7	5406:7	8	(
CONDITION	5406:8	5406:8	8	dp -> tdir_count > 0xFFFF
EXPR	5406:8	5406:23	9	dp -> tdir_count > 0xFFFF
FIELD	5406:8	5406:12	10	dp -> tdir_count
LEAF_NODE	5406:8	5406:8	11	dp
LEAF_NODE	5406:10	5406:10	11	->
LEAF_NODE	5406:12	5406:12	11	tdir_count
REL_OPERATOR	5406:22	5406:22	10	>
LEAF_NODE	5406:22	5406:22	11	>
FIELD	5406:23	5406:23	10	0xFFFF
LEAF_NODE	5406:23	5406:23	11	0xFFFF
LEAF_NODE	5406:29	5406:29	8	)
STATEMENTS	5407:5	5407:5	8	
EXPR_STATEMENT	5407:5	5407:33	9	err = TIFFReadDirEntryErrCount ;
EXPR	5407:5	5407:5	10	err = TIFFReadDirEntryErrCount
ASSIGN	5407:5	5407:9	11	err = TIFFReadDirEntryErrCount
LVAL	5407:5	5407:5	12	err
FIELD	5407:5	5407:5	13	err
LEAF_NODE	5407:5	5407:5	14	err
ASSIGN_OP	5407:8	5407:8	12	=
LEAF_NODE	5407:8	5407:8	13	=
RVAL	5407:9	5407:9	12	TIFFReadDirEntryErrCount
FIELD	5407:9	5407:9	13	TIFFReadDirEntryErrCount
LEAF_NODE	5407:9	5407:9	14	TIFFReadDirEntryErrCount
LEAF_NODE	5407:33	5407:33	10	;
SELECTION	5408:4	5409:4	7	
KEYWORD	5408:4	5408:4	8	else
LEAF_NODE	5408:4	5408:4	9	else
STATEMENTS	5409:4	5420:4	8	
LEAF_NODE	5409:4	5409:4	9	{
STATEMENTS	5410:5	5411:5	9	
EXPR_STATEMENT	5410:5	5410:48	10	err = TIFFReadDirEntryIfd8Array ( tif , dp , & data ) ;
EXPR	5410:5	5410:5	11	err = TIFFReadDirEntryIfd8Array ( tif , dp , & data )
ASSIGN	5410:5	5410:9	12	err = TIFFReadDirEntryIfd8Array ( tif , dp , & data )
LVAL	5410:5	5410:5	13	err
FIELD	5410:5	5410:5	14	err
LEAF_NODE	5410:5	5410:5	15	err
ASSIGN_OP	5410:8	5410:8	13	=
LEAF_NODE	5410:8	5410:8	14	=
RVAL	5410:9	5410:9	13	TIFFReadDirEntryIfd8Array ( tif , dp , & data )
FUNCTION_CALL	5410:9	5410:47	14	TIFFReadDirEntryIfd8Array ( tif , dp , & data )
CALLEE	5410:9	5410:9	15	TIFFReadDirEntryIfd8Array
LEAF_NODE	5410:9	5410:9	16	TIFFReadDirEntryIfd8Array
LEAF_NODE	5410:34	5410:34	15	(
ARGUMENT	5410:35	5410:35	15	tif
FIELD	5410:35	5410:35	16	tif
LEAF_NODE	5410:35	5410:35	17	tif
LEAF_NODE	5410:38	5410:38	15	,
ARGUMENT	5410:39	5410:39	15	dp
FIELD	5410:39	5410:39	16	dp
LEAF_NODE	5410:39	5410:39	17	dp
LEAF_NODE	5410:41	5410:41	15	,
ARGUMENT	5410:42	5410:42	15	& data
UNARY_EXPR	5410:42	5410:43	16	& data
UNARY_OPERATOR	5410:42	5410:42	17	&
LEAF_NODE	5410:42	5410:42	18	&
FIELD	5410:43	5410:43	17	data
LEAF_NODE	5410:43	5410:43	18	data
LEAF_NODE	5410:47	5410:47	15	)
LEAF_NODE	5410:48	5410:48	11	;
SELECTION	5411:5	5412:5	10	
KEYWORD	5411:5	5411:5	11	if
LEAF_NODE	5411:5	5411:5	12	if
LEAF_NODE	5411:8	5411:8	11	(
CONDITION	5411:9	5411:9	11	err == TIFFReadDirEntryErrOk
EXPR	5411:9	5411:14	12	err == TIFFReadDirEntryErrOk
FIELD	5411:9	5411:9	13	err
LEAF_NODE	5411:9	5411:9	14	err
EQ_OPERATOR	5411:12	5411:12	13	==
LEAF_NODE	5411:12	5411:12	14	==
FIELD	5411:14	5411:14	13	TIFFReadDirEntryErrOk
LEAF_NODE	5411:14	5411:14	14	TIFFReadDirEntryErrOk
LEAF_NODE	5411:35	5411:35	11	)
STATEMENTS	5412:5	5419:5	11	
LEAF_NODE	5412:5	5412:5	12	{
STATEMENTS	5413:6	5417:6	12	
SIMPLE_DECL	5413:6	5413:11	13	int m ;
VAR_DECL	5413:6	5413:10	14	int m
TYPE	5413:6	5413:6	15	int
TYPE_NAME	5413:6	5413:6	16	int
LEAF_NODE	5413:6	5413:6	17	int
NAME	5413:10	5413:10	15	m
LEAF_NODE	5413:10	5413:10	16	m
LEAF_NODE	5413:11	5413:11	14	;
EXPR_STATEMENT	5414:6	5414:68	13	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data ) ;
EXPR	5414:6	5414:6	14	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
ASSIGN	5414:6	5414:8	15	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
LVAL	5414:6	5414:6	16	m
FIELD	5414:6	5414:6	17	m
LEAF_NODE	5414:6	5414:6	18	m
ASSIGN_OP	5414:7	5414:7	16	=
LEAF_NODE	5414:7	5414:7	17	=
RVAL	5414:8	5414:8	16	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5414:8	5414:67	17	TIFFSetField ( tif , dp -> tdir_tag , ( uint16 ) ( dp -> tdir_count ) , data )
CALLEE	5414:8	5414:8	18	TIFFSetField
LEAF_NODE	5414:8	5414:8	19	TIFFSetField
LEAF_NODE	5414:20	5414:20	18	(
ARGUMENT	5414:21	5414:21	18	tif
FIELD	5414:21	5414:21	19	tif
LEAF_NODE	5414:21	5414:21	20	tif
LEAF_NODE	5414:24	5414:24	18	,
ARGUMENT	5414:25	5414:25	18	dp -> tdir_tag
FIELD	5414:25	5414:29	19	dp -> tdir_tag
LEAF_NODE	5414:25	5414:25	20	dp
LEAF_NODE	5414:27	5414:27	20	->
LEAF_NODE	5414:29	5414:29	20	tdir_tag
LEAF_NODE	5414:37	5414:37	18	,
ARGUMENT	5414:38	5414:61	18	( uint16 ) ( dp -> tdir_count )
LEAF_NODE	5414:38	5414:38	19	(
TYPE_NAME	5414:39	5414:39	19	uint16
LEAF_NODE	5414:39	5414:39	20	uint16
LEAF_NODE	5414:45	5414:45	19	)
LEAF_NODE	5414:46	5414:46	19	(
FIELD	5414:47	5414:51	19	dp -> tdir_count
LEAF_NODE	5414:47	5414:47	20	dp
LEAF_NODE	5414:49	5414:49	20	->
LEAF_NODE	5414:51	5414:51	20	tdir_count
LEAF_NODE	5414:61	5414:61	19	)
LEAF_NODE	5414:62	5414:62	18	,
ARGUMENT	5414:63	5414:63	18	data
FIELD	5414:63	5414:63	19	data
LEAF_NODE	5414:63	5414:63	20	data
LEAF_NODE	5414:67	5414:67	18	)
LEAF_NODE	5414:68	5414:68	14	;
SELECTION	5415:6	5416:7	13	
KEYWORD	5415:6	5415:6	14	if
LEAF_NODE	5415:6	5415:6	15	if
LEAF_NODE	5415:9	5415:9	14	(
CONDITION	5415:10	5415:10	14	data != 0
EXPR	5415:10	5415:16	15	data != 0
FIELD	5415:10	5415:10	16	data
LEAF_NODE	5415:10	5415:10	17	data
EQ_OPERATOR	5415:14	5415:14	16	!=
LEAF_NODE	5415:14	5415:14	17	!=
FIELD	5415:16	5415:16	16	0
LEAF_NODE	5415:16	5415:16	17	0
LEAF_NODE	5415:17	5415:17	14	)
STATEMENTS	5416:7	5416:7	14	
EXPR_STATEMENT	5416:7	5416:22	15	_TIFFfree ( data ) ;
EXPR	5416:7	5416:7	16	_TIFFfree ( data )
FUNCTION_CALL	5416:7	5416:21	17	_TIFFfree ( data )
CALLEE	5416:7	5416:7	18	_TIFFfree
LEAF_NODE	5416:7	5416:7	19	_TIFFfree
LEAF_NODE	5416:16	5416:16	18	(
ARGUMENT	5416:17	5416:17	18	data
FIELD	5416:17	5416:17	19	data
LEAF_NODE	5416:17	5416:17	20	data
LEAF_NODE	5416:21	5416:21	18	)
LEAF_NODE	5416:22	5416:22	16	;
SELECTION	5417:6	5418:7	13	
KEYWORD	5417:6	5417:6	14	if
LEAF_NODE	5417:6	5417:6	15	if
LEAF_NODE	5417:9	5417:9	14	(
CONDITION	5417:10	5417:10	14	! m
EXPR	5417:10	5417:10	15	! m
UNARY_EXPR	5417:10	5417:11	16	! m
UNARY_OPERATOR	5417:10	5417:10	17	!
LEAF_NODE	5417:10	5417:10	18	!
FIELD	5417:11	5417:11	17	m
LEAF_NODE	5417:11	5417:11	18	m
LEAF_NODE	5417:12	5417:12	14	)
STATEMENTS	5418:7	5418:7	14	
JUMP_STATEMENT	5418:7	5418:16	15	return ( 0 ) ;
KEYWORD	5418:7	5418:7	16	return
LEAF_NODE	5418:7	5418:7	17	return
DESTINATION	5418:13	5418:13	16	( 0 )
EXPR	5418:13	5418:15	17	( 0 )
LEAF_NODE	5418:13	5418:13	18	(
FIELD	5418:14	5418:14	18	0
LEAF_NODE	5418:14	5418:14	19	0
LEAF_NODE	5418:15	5418:15	18	)
LEAF_NODE	5418:16	5418:16	16	;
LEAF_NODE	5419:5	5419:5	12	}
LEAF_NODE	5420:4	5420:4	9	}
LEAF_NODE	5421:3	5421:3	6	}
JUMP_STATEMENT	5422:3	5422:8	6	break DESTINATION ;
KEYWORD	5422:3	5422:3	7	break
LEAF_NODE	5422:3	5422:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5422:8	5422:8	7	;
LABEL	5423:2	5423:28	6	case TIFF_SETGET_C32_ASCII :
LEAF_NODE	5423:2	5423:2	7	case
LEAF_NODE	5423:7	5423:7	7	TIFF_SETGET_C32_ASCII
LEAF_NODE	5423:28	5423:28	7	:
LEAF_NODE	5424:3	5424:3	6	{
STATEMENTS	5425:4	5429:4	6	
SIMPLE_DECL	5425:4	5425:15	7	uint8 * data ;
VAR_DECL	5425:4	5425:11	8	uint8 * data
TYPE	5425:4	5425:9	9	uint8 *
TYPE_NAME	5425:4	5425:4	10	uint8
LEAF_NODE	5425:4	5425:4	11	uint8
POINTER	5425:9	5425:9	10	*
LEAF_NODE	5425:9	5425:9	11	*
NAME	5425:11	5425:11	9	data
LEAF_NODE	5425:11	5425:11	10	data
LEAF_NODE	5425:15	5425:15	8	;
EXPR_STATEMENT	5426:4	5426:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5426:4	5426:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5426:4	5426:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5426:4	5426:4	10	assert
LEAF_NODE	5426:4	5426:4	11	assert
LEAF_NODE	5426:10	5426:10	10	(
ARGUMENT	5426:11	5426:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5426:11	5426:16	11	fip -> field_readcount
LEAF_NODE	5426:11	5426:11	12	fip
LEAF_NODE	5426:14	5426:14	12	->
LEAF_NODE	5426:16	5426:16	12	field_readcount
EQ_OPERATOR	5426:31	5426:31	11	==
LEAF_NODE	5426:31	5426:31	12	==
FIELD	5426:33	5426:33	11	TIFF_VARIABLE2
LEAF_NODE	5426:33	5426:33	12	TIFF_VARIABLE2
LEAF_NODE	5426:47	5426:47	10	)
LEAF_NODE	5426:48	5426:48	8	;
EXPR_STATEMENT	5427:4	5427:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5427:4	5427:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5427:4	5427:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5427:4	5427:4	10	assert
LEAF_NODE	5427:4	5427:4	11	assert
LEAF_NODE	5427:10	5427:10	10	(
ARGUMENT	5427:11	5427:33	10	fip -> field_passcount == 1
FIELD	5427:11	5427:16	11	fip -> field_passcount
LEAF_NODE	5427:11	5427:11	12	fip
LEAF_NODE	5427:14	5427:14	12	->
LEAF_NODE	5427:16	5427:16	12	field_passcount
EQ_OPERATOR	5427:31	5427:31	11	==
LEAF_NODE	5427:31	5427:31	12	==
FIELD	5427:33	5427:33	11	1
LEAF_NODE	5427:33	5427:33	12	1
LEAF_NODE	5427:34	5427:34	10	)
LEAF_NODE	5427:35	5427:35	8	;
EXPR_STATEMENT	5428:4	5428:47	7	err = TIFFReadDirEntryByteArray ( tif , dp , & data ) ;
EXPR	5428:4	5428:4	8	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
ASSIGN	5428:4	5428:8	9	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
LVAL	5428:4	5428:4	10	err
FIELD	5428:4	5428:4	11	err
LEAF_NODE	5428:4	5428:4	12	err
ASSIGN_OP	5428:7	5428:7	10	=
LEAF_NODE	5428:7	5428:7	11	=
RVAL	5428:8	5428:8	10	TIFFReadDirEntryByteArray ( tif , dp , & data )
FUNCTION_CALL	5428:8	5428:46	11	TIFFReadDirEntryByteArray ( tif , dp , & data )
CALLEE	5428:8	5428:8	12	TIFFReadDirEntryByteArray
LEAF_NODE	5428:8	5428:8	13	TIFFReadDirEntryByteArray
LEAF_NODE	5428:33	5428:33	12	(
ARGUMENT	5428:34	5428:34	12	tif
FIELD	5428:34	5428:34	13	tif
LEAF_NODE	5428:34	5428:34	14	tif
LEAF_NODE	5428:37	5428:37	12	,
ARGUMENT	5428:38	5428:38	12	dp
FIELD	5428:38	5428:38	13	dp
LEAF_NODE	5428:38	5428:38	14	dp
LEAF_NODE	5428:40	5428:40	12	,
ARGUMENT	5428:41	5428:41	12	& data
UNARY_EXPR	5428:41	5428:42	13	& data
UNARY_OPERATOR	5428:41	5428:41	14	&
LEAF_NODE	5428:41	5428:41	15	&
FIELD	5428:42	5428:42	14	data
LEAF_NODE	5428:42	5428:42	15	data
LEAF_NODE	5428:46	5428:46	12	)
LEAF_NODE	5428:47	5428:47	8	;
SELECTION	5429:4	5430:4	7	
KEYWORD	5429:4	5429:4	8	if
LEAF_NODE	5429:4	5429:4	9	if
LEAF_NODE	5429:7	5429:7	8	(
CONDITION	5429:8	5429:8	8	err == TIFFReadDirEntryErrOk
EXPR	5429:8	5429:13	9	err == TIFFReadDirEntryErrOk
FIELD	5429:8	5429:8	10	err
LEAF_NODE	5429:8	5429:8	11	err
EQ_OPERATOR	5429:11	5429:11	10	==
LEAF_NODE	5429:11	5429:11	11	==
FIELD	5429:13	5429:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5429:13	5429:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5429:34	5429:34	8	)
STATEMENTS	5430:4	5442:4	8	
LEAF_NODE	5430:4	5430:4	9	{
STATEMENTS	5431:5	5440:5	9	
SIMPLE_DECL	5431:5	5431:10	10	int m ;
VAR_DECL	5431:5	5431:9	11	int m
TYPE	5431:5	5431:5	12	int
TYPE_NAME	5431:5	5431:5	13	int
LEAF_NODE	5431:5	5431:5	14	int
NAME	5431:9	5431:9	12	m
LEAF_NODE	5431:9	5431:9	13	m
LEAF_NODE	5431:10	5431:10	11	;
SELECTION	5432:5	5433:5	10	
KEYWORD	5432:5	5432:5	11	if
LEAF_NODE	5432:5	5432:5	12	if
LEAF_NODE	5432:7	5432:7	11	(
CONDITION	5432:9	5432:9	11	data != 0 && dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
EXPR	5432:9	5432:9	12	data != 0 && dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
AND	5432:9	5432:22	13	data != 0 && dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
EXPR	5432:9	5432:17	14	data != 0
FIELD	5432:9	5432:9	15	data
LEAF_NODE	5432:9	5432:9	16	data
EQ_OPERATOR	5432:14	5432:14	15	!=
LEAF_NODE	5432:14	5432:14	16	!=
FIELD	5432:17	5432:17	15	0
LEAF_NODE	5432:17	5432:17	16	0
LEAF_NODE	5432:19	5432:19	14	&&
EXPR	5432:22	5432:22	14	dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
AND	5432:22	5432:44	15	dp -> tdir_count > 0 && data [ dp -> tdir_count - 1 ] != '\0'
EXPR	5432:22	5432:39	16	dp -> tdir_count > 0
FIELD	5432:22	5432:26	17	dp -> tdir_count
LEAF_NODE	5432:22	5432:22	18	dp
LEAF_NODE	5432:24	5432:24	18	->
LEAF_NODE	5432:26	5432:26	18	tdir_count
REL_OPERATOR	5432:37	5432:37	17	>
LEAF_NODE	5432:37	5432:37	18	>
FIELD	5432:39	5432:39	17	0
LEAF_NODE	5432:39	5432:39	18	0
LEAF_NODE	5432:41	5432:41	16	&&
EXPR	5432:44	5432:70	16	data [ dp -> tdir_count - 1 ] != '\0'
FIELD	5432:44	5432:65	17	data [ dp -> tdir_count - 1 ]
LEAF_NODE	5432:44	5432:44	18	data
LEAF_NODE	5432:48	5432:48	18	[
EXPR	5432:49	5432:64	18	dp -> tdir_count - 1
FIELD	5432:49	5432:53	19	dp -> tdir_count
LEAF_NODE	5432:49	5432:49	20	dp
LEAF_NODE	5432:51	5432:51	20	->
LEAF_NODE	5432:53	5432:53	20	tdir_count
LEAF_NODE	5432:63	5432:63	19	-
FIELD	5432:64	5432:64	19	1
LEAF_NODE	5432:64	5432:64	20	1
LEAF_NODE	5432:65	5432:65	18	]
EQ_OPERATOR	5432:67	5432:67	17	!=
LEAF_NODE	5432:67	5432:67	18	!=
FIELD	5432:70	5432:70	17	'\0'
LEAF_NODE	5432:70	5432:70	18	'\0'
LEAF_NODE	5432:75	5432:75	11	)
STATEMENTS	5433:5	5436:5	11	
LEAF_NODE	5433:5	5433:5	12	{
STATEMENTS	5434:9	5435:44	12	
EXPR_STATEMENT	5434:9	5434:145	13	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null" , fip -> field_name ) ;
EXPR	5434:9	5434:9	14	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null" , fip -> field_name )
FUNCTION_CALL	5434:9	5434:144	15	TIFFWarningExt ( tif -> tif_clientdata , module , "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null" , fip -> field_name )
CALLEE	5434:9	5434:9	16	TIFFWarningExt
LEAF_NODE	5434:9	5434:9	17	TIFFWarningExt
LEAF_NODE	5434:23	5434:23	16	(
ARGUMENT	5434:24	5434:24	16	tif -> tif_clientdata
FIELD	5434:24	5434:29	17	tif -> tif_clientdata
LEAF_NODE	5434:24	5434:24	18	tif
LEAF_NODE	5434:27	5434:27	18	->
LEAF_NODE	5434:29	5434:29	18	tif_clientdata
LEAF_NODE	5434:43	5434:43	16	,
ARGUMENT	5434:44	5434:44	16	module
FIELD	5434:44	5434:44	17	module
LEAF_NODE	5434:44	5434:44	18	module
LEAF_NODE	5434:50	5434:50	16	,
ARGUMENT	5434:51	5434:51	16	"ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null"
FIELD	5434:51	5434:51	17	"ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null"
LEAF_NODE	5434:51	5434:51	18	"ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null"
LEAF_NODE	5434:128	5434:128	16	,
ARGUMENT	5434:129	5434:129	16	fip -> field_name
FIELD	5434:129	5434:134	17	fip -> field_name
LEAF_NODE	5434:129	5434:129	18	fip
LEAF_NODE	5434:132	5434:132	18	->
LEAF_NODE	5434:134	5434:134	18	field_name
LEAF_NODE	5434:144	5434:144	16	)
LEAF_NODE	5434:145	5434:145	14	;
EXPR_STATEMENT	5435:44	5435:73	13	data [ dp -> tdir_count - 1 ] = '\0' ;
EXPR	5435:44	5435:44	14	data [ dp -> tdir_count - 1 ] = '\0'
ASSIGN	5435:44	5435:69	15	data [ dp -> tdir_count - 1 ] = '\0'
LVAL	5435:44	5435:44	16	data [ dp -> tdir_count - 1 ]
FIELD	5435:44	5435:65	17	data [ dp -> tdir_count - 1 ]
LEAF_NODE	5435:44	5435:44	18	data
LEAF_NODE	5435:48	5435:48	18	[
EXPR	5435:49	5435:64	18	dp -> tdir_count - 1
FIELD	5435:49	5435:53	19	dp -> tdir_count
LEAF_NODE	5435:49	5435:49	20	dp
LEAF_NODE	5435:51	5435:51	20	->
LEAF_NODE	5435:53	5435:53	20	tdir_count
LEAF_NODE	5435:63	5435:63	19	-
FIELD	5435:64	5435:64	19	1
LEAF_NODE	5435:64	5435:64	20	1
LEAF_NODE	5435:65	5435:65	18	]
ASSIGN_OP	5435:67	5435:67	16	=
LEAF_NODE	5435:67	5435:67	17	=
RVAL	5435:69	5435:69	16	'\0'
FIELD	5435:69	5435:69	17	'\0'
LEAF_NODE	5435:69	5435:69	18	'\0'
LEAF_NODE	5435:73	5435:73	14	;
LEAF_NODE	5436:5	5436:5	12	}
EXPR_STATEMENT	5437:5	5437:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5437:5	5437:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5437:5	5437:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5437:5	5437:5	13	m
FIELD	5437:5	5437:5	14	m
LEAF_NODE	5437:5	5437:5	15	m
ASSIGN_OP	5437:6	5437:6	13	=
LEAF_NODE	5437:6	5437:6	14	=
RVAL	5437:7	5437:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5437:7	5437:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5437:7	5437:7	15	TIFFSetField
LEAF_NODE	5437:7	5437:7	16	TIFFSetField
LEAF_NODE	5437:19	5437:19	15	(
ARGUMENT	5437:20	5437:20	15	tif
FIELD	5437:20	5437:20	16	tif
LEAF_NODE	5437:20	5437:20	17	tif
LEAF_NODE	5437:23	5437:23	15	,
ARGUMENT	5437:24	5437:24	15	dp -> tdir_tag
FIELD	5437:24	5437:28	16	dp -> tdir_tag
LEAF_NODE	5437:24	5437:24	17	dp
LEAF_NODE	5437:26	5437:26	17	->
LEAF_NODE	5437:28	5437:28	17	tdir_tag
LEAF_NODE	5437:36	5437:36	15	,
ARGUMENT	5437:37	5437:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5437:37	5437:37	16	(
TYPE_NAME	5437:38	5437:38	16	uint32
LEAF_NODE	5437:38	5437:38	17	uint32
LEAF_NODE	5437:44	5437:44	16	)
LEAF_NODE	5437:45	5437:45	16	(
FIELD	5437:46	5437:50	16	dp -> tdir_count
LEAF_NODE	5437:46	5437:46	17	dp
LEAF_NODE	5437:48	5437:48	17	->
LEAF_NODE	5437:50	5437:50	17	tdir_count
LEAF_NODE	5437:60	5437:60	16	)
LEAF_NODE	5437:61	5437:61	15	,
ARGUMENT	5437:62	5437:62	15	data
FIELD	5437:62	5437:62	16	data
LEAF_NODE	5437:62	5437:62	17	data
LEAF_NODE	5437:66	5437:66	15	)
LEAF_NODE	5437:67	5437:67	11	;
SELECTION	5438:5	5439:6	10	
KEYWORD	5438:5	5438:5	11	if
LEAF_NODE	5438:5	5438:5	12	if
LEAF_NODE	5438:8	5438:8	11	(
CONDITION	5438:9	5438:9	11	data != 0
EXPR	5438:9	5438:15	12	data != 0
FIELD	5438:9	5438:9	13	data
LEAF_NODE	5438:9	5438:9	14	data
EQ_OPERATOR	5438:13	5438:13	13	!=
LEAF_NODE	5438:13	5438:13	14	!=
FIELD	5438:15	5438:15	13	0
LEAF_NODE	5438:15	5438:15	14	0
LEAF_NODE	5438:16	5438:16	11	)
STATEMENTS	5439:6	5439:6	11	
EXPR_STATEMENT	5439:6	5439:21	12	_TIFFfree ( data ) ;
EXPR	5439:6	5439:6	13	_TIFFfree ( data )
FUNCTION_CALL	5439:6	5439:20	14	_TIFFfree ( data )
CALLEE	5439:6	5439:6	15	_TIFFfree
LEAF_NODE	5439:6	5439:6	16	_TIFFfree
LEAF_NODE	5439:15	5439:15	15	(
ARGUMENT	5439:16	5439:16	15	data
FIELD	5439:16	5439:16	16	data
LEAF_NODE	5439:16	5439:16	17	data
LEAF_NODE	5439:20	5439:20	15	)
LEAF_NODE	5439:21	5439:21	13	;
SELECTION	5440:5	5441:6	10	
KEYWORD	5440:5	5440:5	11	if
LEAF_NODE	5440:5	5440:5	12	if
LEAF_NODE	5440:8	5440:8	11	(
CONDITION	5440:9	5440:9	11	! m
EXPR	5440:9	5440:9	12	! m
UNARY_EXPR	5440:9	5440:10	13	! m
UNARY_OPERATOR	5440:9	5440:9	14	!
LEAF_NODE	5440:9	5440:9	15	!
FIELD	5440:10	5440:10	14	m
LEAF_NODE	5440:10	5440:10	15	m
LEAF_NODE	5440:11	5440:11	11	)
STATEMENTS	5441:6	5441:6	11	
JUMP_STATEMENT	5441:6	5441:15	12	return ( 0 ) ;
KEYWORD	5441:6	5441:6	13	return
LEAF_NODE	5441:6	5441:6	14	return
DESTINATION	5441:12	5441:12	13	( 0 )
EXPR	5441:12	5441:14	14	( 0 )
LEAF_NODE	5441:12	5441:12	15	(
FIELD	5441:13	5441:13	15	0
LEAF_NODE	5441:13	5441:13	16	0
LEAF_NODE	5441:14	5441:14	15	)
LEAF_NODE	5441:15	5441:15	13	;
LEAF_NODE	5442:4	5442:4	9	}
LEAF_NODE	5443:3	5443:3	6	}
JUMP_STATEMENT	5444:3	5444:8	6	break DESTINATION ;
KEYWORD	5444:3	5444:3	7	break
LEAF_NODE	5444:3	5444:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5444:8	5444:8	7	;
LABEL	5445:2	5445:28	6	case TIFF_SETGET_C32_UINT8 :
LEAF_NODE	5445:2	5445:2	7	case
LEAF_NODE	5445:7	5445:7	7	TIFF_SETGET_C32_UINT8
LEAF_NODE	5445:28	5445:28	7	:
LEAF_NODE	5446:3	5446:3	6	{
STATEMENTS	5447:4	5451:4	6	
SIMPLE_DECL	5447:4	5447:15	7	uint8 * data ;
VAR_DECL	5447:4	5447:11	8	uint8 * data
TYPE	5447:4	5447:9	9	uint8 *
TYPE_NAME	5447:4	5447:4	10	uint8
LEAF_NODE	5447:4	5447:4	11	uint8
POINTER	5447:9	5447:9	10	*
LEAF_NODE	5447:9	5447:9	11	*
NAME	5447:11	5447:11	9	data
LEAF_NODE	5447:11	5447:11	10	data
LEAF_NODE	5447:15	5447:15	8	;
EXPR_STATEMENT	5448:4	5448:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5448:4	5448:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5448:4	5448:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5448:4	5448:4	10	assert
LEAF_NODE	5448:4	5448:4	11	assert
LEAF_NODE	5448:10	5448:10	10	(
ARGUMENT	5448:11	5448:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5448:11	5448:16	11	fip -> field_readcount
LEAF_NODE	5448:11	5448:11	12	fip
LEAF_NODE	5448:14	5448:14	12	->
LEAF_NODE	5448:16	5448:16	12	field_readcount
EQ_OPERATOR	5448:31	5448:31	11	==
LEAF_NODE	5448:31	5448:31	12	==
FIELD	5448:33	5448:33	11	TIFF_VARIABLE2
LEAF_NODE	5448:33	5448:33	12	TIFF_VARIABLE2
LEAF_NODE	5448:47	5448:47	10	)
LEAF_NODE	5448:48	5448:48	8	;
EXPR_STATEMENT	5449:4	5449:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5449:4	5449:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5449:4	5449:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5449:4	5449:4	10	assert
LEAF_NODE	5449:4	5449:4	11	assert
LEAF_NODE	5449:10	5449:10	10	(
ARGUMENT	5449:11	5449:33	10	fip -> field_passcount == 1
FIELD	5449:11	5449:16	11	fip -> field_passcount
LEAF_NODE	5449:11	5449:11	12	fip
LEAF_NODE	5449:14	5449:14	12	->
LEAF_NODE	5449:16	5449:16	12	field_passcount
EQ_OPERATOR	5449:31	5449:31	11	==
LEAF_NODE	5449:31	5449:31	12	==
FIELD	5449:33	5449:33	11	1
LEAF_NODE	5449:33	5449:33	12	1
LEAF_NODE	5449:34	5449:34	10	)
LEAF_NODE	5449:35	5449:35	8	;
EXPR_STATEMENT	5450:4	5450:47	7	err = TIFFReadDirEntryByteArray ( tif , dp , & data ) ;
EXPR	5450:4	5450:4	8	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
ASSIGN	5450:4	5450:8	9	err = TIFFReadDirEntryByteArray ( tif , dp , & data )
LVAL	5450:4	5450:4	10	err
FIELD	5450:4	5450:4	11	err
LEAF_NODE	5450:4	5450:4	12	err
ASSIGN_OP	5450:7	5450:7	10	=
LEAF_NODE	5450:7	5450:7	11	=
RVAL	5450:8	5450:8	10	TIFFReadDirEntryByteArray ( tif , dp , & data )
FUNCTION_CALL	5450:8	5450:46	11	TIFFReadDirEntryByteArray ( tif , dp , & data )
CALLEE	5450:8	5450:8	12	TIFFReadDirEntryByteArray
LEAF_NODE	5450:8	5450:8	13	TIFFReadDirEntryByteArray
LEAF_NODE	5450:33	5450:33	12	(
ARGUMENT	5450:34	5450:34	12	tif
FIELD	5450:34	5450:34	13	tif
LEAF_NODE	5450:34	5450:34	14	tif
LEAF_NODE	5450:37	5450:37	12	,
ARGUMENT	5450:38	5450:38	12	dp
FIELD	5450:38	5450:38	13	dp
LEAF_NODE	5450:38	5450:38	14	dp
LEAF_NODE	5450:40	5450:40	12	,
ARGUMENT	5450:41	5450:41	12	& data
UNARY_EXPR	5450:41	5450:42	13	& data
UNARY_OPERATOR	5450:41	5450:41	14	&
LEAF_NODE	5450:41	5450:41	15	&
FIELD	5450:42	5450:42	14	data
LEAF_NODE	5450:42	5450:42	15	data
LEAF_NODE	5450:46	5450:46	12	)
LEAF_NODE	5450:47	5450:47	8	;
SELECTION	5451:4	5452:4	7	
KEYWORD	5451:4	5451:4	8	if
LEAF_NODE	5451:4	5451:4	9	if
LEAF_NODE	5451:7	5451:7	8	(
CONDITION	5451:8	5451:8	8	err == TIFFReadDirEntryErrOk
EXPR	5451:8	5451:13	9	err == TIFFReadDirEntryErrOk
FIELD	5451:8	5451:8	10	err
LEAF_NODE	5451:8	5451:8	11	err
EQ_OPERATOR	5451:11	5451:11	10	==
LEAF_NODE	5451:11	5451:11	11	==
FIELD	5451:13	5451:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5451:13	5451:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5451:34	5451:34	8	)
STATEMENTS	5452:4	5459:4	8	
LEAF_NODE	5452:4	5452:4	9	{
STATEMENTS	5453:5	5457:5	9	
SIMPLE_DECL	5453:5	5453:10	10	int m ;
VAR_DECL	5453:5	5453:9	11	int m
TYPE	5453:5	5453:5	12	int
TYPE_NAME	5453:5	5453:5	13	int
LEAF_NODE	5453:5	5453:5	14	int
NAME	5453:9	5453:9	12	m
LEAF_NODE	5453:9	5453:9	13	m
LEAF_NODE	5453:10	5453:10	11	;
EXPR_STATEMENT	5454:5	5454:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5454:5	5454:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5454:5	5454:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5454:5	5454:5	13	m
FIELD	5454:5	5454:5	14	m
LEAF_NODE	5454:5	5454:5	15	m
ASSIGN_OP	5454:6	5454:6	13	=
LEAF_NODE	5454:6	5454:6	14	=
RVAL	5454:7	5454:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5454:7	5454:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5454:7	5454:7	15	TIFFSetField
LEAF_NODE	5454:7	5454:7	16	TIFFSetField
LEAF_NODE	5454:19	5454:19	15	(
ARGUMENT	5454:20	5454:20	15	tif
FIELD	5454:20	5454:20	16	tif
LEAF_NODE	5454:20	5454:20	17	tif
LEAF_NODE	5454:23	5454:23	15	,
ARGUMENT	5454:24	5454:24	15	dp -> tdir_tag
FIELD	5454:24	5454:28	16	dp -> tdir_tag
LEAF_NODE	5454:24	5454:24	17	dp
LEAF_NODE	5454:26	5454:26	17	->
LEAF_NODE	5454:28	5454:28	17	tdir_tag
LEAF_NODE	5454:36	5454:36	15	,
ARGUMENT	5454:37	5454:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5454:37	5454:37	16	(
TYPE_NAME	5454:38	5454:38	16	uint32
LEAF_NODE	5454:38	5454:38	17	uint32
LEAF_NODE	5454:44	5454:44	16	)
LEAF_NODE	5454:45	5454:45	16	(
FIELD	5454:46	5454:50	16	dp -> tdir_count
LEAF_NODE	5454:46	5454:46	17	dp
LEAF_NODE	5454:48	5454:48	17	->
LEAF_NODE	5454:50	5454:50	17	tdir_count
LEAF_NODE	5454:60	5454:60	16	)
LEAF_NODE	5454:61	5454:61	15	,
ARGUMENT	5454:62	5454:62	15	data
FIELD	5454:62	5454:62	16	data
LEAF_NODE	5454:62	5454:62	17	data
LEAF_NODE	5454:66	5454:66	15	)
LEAF_NODE	5454:67	5454:67	11	;
SELECTION	5455:5	5456:6	10	
KEYWORD	5455:5	5455:5	11	if
LEAF_NODE	5455:5	5455:5	12	if
LEAF_NODE	5455:8	5455:8	11	(
CONDITION	5455:9	5455:9	11	data != 0
EXPR	5455:9	5455:15	12	data != 0
FIELD	5455:9	5455:9	13	data
LEAF_NODE	5455:9	5455:9	14	data
EQ_OPERATOR	5455:13	5455:13	13	!=
LEAF_NODE	5455:13	5455:13	14	!=
FIELD	5455:15	5455:15	13	0
LEAF_NODE	5455:15	5455:15	14	0
LEAF_NODE	5455:16	5455:16	11	)
STATEMENTS	5456:6	5456:6	11	
EXPR_STATEMENT	5456:6	5456:21	12	_TIFFfree ( data ) ;
EXPR	5456:6	5456:6	13	_TIFFfree ( data )
FUNCTION_CALL	5456:6	5456:20	14	_TIFFfree ( data )
CALLEE	5456:6	5456:6	15	_TIFFfree
LEAF_NODE	5456:6	5456:6	16	_TIFFfree
LEAF_NODE	5456:15	5456:15	15	(
ARGUMENT	5456:16	5456:16	15	data
FIELD	5456:16	5456:16	16	data
LEAF_NODE	5456:16	5456:16	17	data
LEAF_NODE	5456:20	5456:20	15	)
LEAF_NODE	5456:21	5456:21	13	;
SELECTION	5457:5	5458:6	10	
KEYWORD	5457:5	5457:5	11	if
LEAF_NODE	5457:5	5457:5	12	if
LEAF_NODE	5457:8	5457:8	11	(
CONDITION	5457:9	5457:9	11	! m
EXPR	5457:9	5457:9	12	! m
UNARY_EXPR	5457:9	5457:10	13	! m
UNARY_OPERATOR	5457:9	5457:9	14	!
LEAF_NODE	5457:9	5457:9	15	!
FIELD	5457:10	5457:10	14	m
LEAF_NODE	5457:10	5457:10	15	m
LEAF_NODE	5457:11	5457:11	11	)
STATEMENTS	5458:6	5458:6	11	
JUMP_STATEMENT	5458:6	5458:15	12	return ( 0 ) ;
KEYWORD	5458:6	5458:6	13	return
LEAF_NODE	5458:6	5458:6	14	return
DESTINATION	5458:12	5458:12	13	( 0 )
EXPR	5458:12	5458:14	14	( 0 )
LEAF_NODE	5458:12	5458:12	15	(
FIELD	5458:13	5458:13	15	0
LEAF_NODE	5458:13	5458:13	16	0
LEAF_NODE	5458:14	5458:14	15	)
LEAF_NODE	5458:15	5458:15	13	;
LEAF_NODE	5459:4	5459:4	9	}
LEAF_NODE	5460:3	5460:3	6	}
JUMP_STATEMENT	5461:3	5461:8	6	break DESTINATION ;
KEYWORD	5461:3	5461:3	7	break
LEAF_NODE	5461:3	5461:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5461:8	5461:8	7	;
LABEL	5462:2	5462:28	6	case TIFF_SETGET_C32_SINT8 :
LEAF_NODE	5462:2	5462:2	7	case
LEAF_NODE	5462:7	5462:7	7	TIFF_SETGET_C32_SINT8
LEAF_NODE	5462:28	5462:28	7	:
LEAF_NODE	5463:3	5463:3	6	{
STATEMENTS	5464:4	5468:4	6	
SIMPLE_DECL	5464:4	5464:21	7	int8 * data ; data = NULL ;
VAR_DECL	5464:4	5464:10	8	int8 * data ; data = NULL
TYPE	5464:4	5464:8	9	int8 *
TYPE_NAME	5464:4	5464:4	10	int8
LEAF_NODE	5464:4	5464:4	11	int8
POINTER	5464:8	5464:8	10	*
LEAF_NODE	5464:8	5464:8	11	*
NAME	5464:10	5464:10	9	data
LEAF_NODE	5464:10	5464:10	10	data
LEAF_NODE	0:0	0:0	9	;
INIT	5464:10	5464:10	9	data = NULL
ASSIGN	5464:10	5464:17	10	data = NULL
LVAL	5464:10	5464:10	11	data
NAME	5464:10	5464:10	12	data
LEAF_NODE	5464:10	5464:10	13	data
ASSIGN_OP	5464:15	5464:15	11	=
LEAF_NODE	5464:15	5464:15	12	=
RVAL	5464:17	5464:17	11	NULL
FIELD	5464:17	5464:17	12	NULL
LEAF_NODE	5464:17	5464:17	13	NULL
LEAF_NODE	5464:21	5464:21	8	;
EXPR_STATEMENT	5465:4	5465:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5465:4	5465:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5465:4	5465:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5465:4	5465:4	10	assert
LEAF_NODE	5465:4	5465:4	11	assert
LEAF_NODE	5465:10	5465:10	10	(
ARGUMENT	5465:11	5465:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5465:11	5465:16	11	fip -> field_readcount
LEAF_NODE	5465:11	5465:11	12	fip
LEAF_NODE	5465:14	5465:14	12	->
LEAF_NODE	5465:16	5465:16	12	field_readcount
EQ_OPERATOR	5465:31	5465:31	11	==
LEAF_NODE	5465:31	5465:31	12	==
FIELD	5465:33	5465:33	11	TIFF_VARIABLE2
LEAF_NODE	5465:33	5465:33	12	TIFF_VARIABLE2
LEAF_NODE	5465:47	5465:47	10	)
LEAF_NODE	5465:48	5465:48	8	;
EXPR_STATEMENT	5466:4	5466:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5466:4	5466:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5466:4	5466:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5466:4	5466:4	10	assert
LEAF_NODE	5466:4	5466:4	11	assert
LEAF_NODE	5466:10	5466:10	10	(
ARGUMENT	5466:11	5466:33	10	fip -> field_passcount == 1
FIELD	5466:11	5466:16	11	fip -> field_passcount
LEAF_NODE	5466:11	5466:11	12	fip
LEAF_NODE	5466:14	5466:14	12	->
LEAF_NODE	5466:16	5466:16	12	field_passcount
EQ_OPERATOR	5466:31	5466:31	11	==
LEAF_NODE	5466:31	5466:31	12	==
FIELD	5466:33	5466:33	11	1
LEAF_NODE	5466:33	5466:33	12	1
LEAF_NODE	5466:34	5466:34	10	)
LEAF_NODE	5466:35	5466:35	8	;
EXPR_STATEMENT	5467:4	5467:48	7	err = TIFFReadDirEntrySbyteArray ( tif , dp , & data ) ;
EXPR	5467:4	5467:4	8	err = TIFFReadDirEntrySbyteArray ( tif , dp , & data )
ASSIGN	5467:4	5467:8	9	err = TIFFReadDirEntrySbyteArray ( tif , dp , & data )
LVAL	5467:4	5467:4	10	err
FIELD	5467:4	5467:4	11	err
LEAF_NODE	5467:4	5467:4	12	err
ASSIGN_OP	5467:7	5467:7	10	=
LEAF_NODE	5467:7	5467:7	11	=
RVAL	5467:8	5467:8	10	TIFFReadDirEntrySbyteArray ( tif , dp , & data )
FUNCTION_CALL	5467:8	5467:47	11	TIFFReadDirEntrySbyteArray ( tif , dp , & data )
CALLEE	5467:8	5467:8	12	TIFFReadDirEntrySbyteArray
LEAF_NODE	5467:8	5467:8	13	TIFFReadDirEntrySbyteArray
LEAF_NODE	5467:34	5467:34	12	(
ARGUMENT	5467:35	5467:35	12	tif
FIELD	5467:35	5467:35	13	tif
LEAF_NODE	5467:35	5467:35	14	tif
LEAF_NODE	5467:38	5467:38	12	,
ARGUMENT	5467:39	5467:39	12	dp
FIELD	5467:39	5467:39	13	dp
LEAF_NODE	5467:39	5467:39	14	dp
LEAF_NODE	5467:41	5467:41	12	,
ARGUMENT	5467:42	5467:42	12	& data
UNARY_EXPR	5467:42	5467:43	13	& data
UNARY_OPERATOR	5467:42	5467:42	14	&
LEAF_NODE	5467:42	5467:42	15	&
FIELD	5467:43	5467:43	14	data
LEAF_NODE	5467:43	5467:43	15	data
LEAF_NODE	5467:47	5467:47	12	)
LEAF_NODE	5467:48	5467:48	8	;
SELECTION	5468:4	5469:4	7	
KEYWORD	5468:4	5468:4	8	if
LEAF_NODE	5468:4	5468:4	9	if
LEAF_NODE	5468:7	5468:7	8	(
CONDITION	5468:8	5468:8	8	err == TIFFReadDirEntryErrOk
EXPR	5468:8	5468:13	9	err == TIFFReadDirEntryErrOk
FIELD	5468:8	5468:8	10	err
LEAF_NODE	5468:8	5468:8	11	err
EQ_OPERATOR	5468:11	5468:11	10	==
LEAF_NODE	5468:11	5468:11	11	==
FIELD	5468:13	5468:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5468:13	5468:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5468:34	5468:34	8	)
STATEMENTS	5469:4	5476:4	8	
LEAF_NODE	5469:4	5469:4	9	{
STATEMENTS	5470:5	5474:5	9	
SIMPLE_DECL	5470:5	5470:10	10	int m ;
VAR_DECL	5470:5	5470:9	11	int m
TYPE	5470:5	5470:5	12	int
TYPE_NAME	5470:5	5470:5	13	int
LEAF_NODE	5470:5	5470:5	14	int
NAME	5470:9	5470:9	12	m
LEAF_NODE	5470:9	5470:9	13	m
LEAF_NODE	5470:10	5470:10	11	;
EXPR_STATEMENT	5471:5	5471:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5471:5	5471:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5471:5	5471:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5471:5	5471:5	13	m
FIELD	5471:5	5471:5	14	m
LEAF_NODE	5471:5	5471:5	15	m
ASSIGN_OP	5471:6	5471:6	13	=
LEAF_NODE	5471:6	5471:6	14	=
RVAL	5471:7	5471:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5471:7	5471:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5471:7	5471:7	15	TIFFSetField
LEAF_NODE	5471:7	5471:7	16	TIFFSetField
LEAF_NODE	5471:19	5471:19	15	(
ARGUMENT	5471:20	5471:20	15	tif
FIELD	5471:20	5471:20	16	tif
LEAF_NODE	5471:20	5471:20	17	tif
LEAF_NODE	5471:23	5471:23	15	,
ARGUMENT	5471:24	5471:24	15	dp -> tdir_tag
FIELD	5471:24	5471:28	16	dp -> tdir_tag
LEAF_NODE	5471:24	5471:24	17	dp
LEAF_NODE	5471:26	5471:26	17	->
LEAF_NODE	5471:28	5471:28	17	tdir_tag
LEAF_NODE	5471:36	5471:36	15	,
ARGUMENT	5471:37	5471:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5471:37	5471:37	16	(
TYPE_NAME	5471:38	5471:38	16	uint32
LEAF_NODE	5471:38	5471:38	17	uint32
LEAF_NODE	5471:44	5471:44	16	)
LEAF_NODE	5471:45	5471:45	16	(
FIELD	5471:46	5471:50	16	dp -> tdir_count
LEAF_NODE	5471:46	5471:46	17	dp
LEAF_NODE	5471:48	5471:48	17	->
LEAF_NODE	5471:50	5471:50	17	tdir_count
LEAF_NODE	5471:60	5471:60	16	)
LEAF_NODE	5471:61	5471:61	15	,
ARGUMENT	5471:62	5471:62	15	data
FIELD	5471:62	5471:62	16	data
LEAF_NODE	5471:62	5471:62	17	data
LEAF_NODE	5471:66	5471:66	15	)
LEAF_NODE	5471:67	5471:67	11	;
SELECTION	5472:5	5473:6	10	
KEYWORD	5472:5	5472:5	11	if
LEAF_NODE	5472:5	5472:5	12	if
LEAF_NODE	5472:8	5472:8	11	(
CONDITION	5472:9	5472:9	11	data != 0
EXPR	5472:9	5472:15	12	data != 0
FIELD	5472:9	5472:9	13	data
LEAF_NODE	5472:9	5472:9	14	data
EQ_OPERATOR	5472:13	5472:13	13	!=
LEAF_NODE	5472:13	5472:13	14	!=
FIELD	5472:15	5472:15	13	0
LEAF_NODE	5472:15	5472:15	14	0
LEAF_NODE	5472:16	5472:16	11	)
STATEMENTS	5473:6	5473:6	11	
EXPR_STATEMENT	5473:6	5473:21	12	_TIFFfree ( data ) ;
EXPR	5473:6	5473:6	13	_TIFFfree ( data )
FUNCTION_CALL	5473:6	5473:20	14	_TIFFfree ( data )
CALLEE	5473:6	5473:6	15	_TIFFfree
LEAF_NODE	5473:6	5473:6	16	_TIFFfree
LEAF_NODE	5473:15	5473:15	15	(
ARGUMENT	5473:16	5473:16	15	data
FIELD	5473:16	5473:16	16	data
LEAF_NODE	5473:16	5473:16	17	data
LEAF_NODE	5473:20	5473:20	15	)
LEAF_NODE	5473:21	5473:21	13	;
SELECTION	5474:5	5475:6	10	
KEYWORD	5474:5	5474:5	11	if
LEAF_NODE	5474:5	5474:5	12	if
LEAF_NODE	5474:8	5474:8	11	(
CONDITION	5474:9	5474:9	11	! m
EXPR	5474:9	5474:9	12	! m
UNARY_EXPR	5474:9	5474:10	13	! m
UNARY_OPERATOR	5474:9	5474:9	14	!
LEAF_NODE	5474:9	5474:9	15	!
FIELD	5474:10	5474:10	14	m
LEAF_NODE	5474:10	5474:10	15	m
LEAF_NODE	5474:11	5474:11	11	)
STATEMENTS	5475:6	5475:6	11	
JUMP_STATEMENT	5475:6	5475:15	12	return ( 0 ) ;
KEYWORD	5475:6	5475:6	13	return
LEAF_NODE	5475:6	5475:6	14	return
DESTINATION	5475:12	5475:12	13	( 0 )
EXPR	5475:12	5475:14	14	( 0 )
LEAF_NODE	5475:12	5475:12	15	(
FIELD	5475:13	5475:13	15	0
LEAF_NODE	5475:13	5475:13	16	0
LEAF_NODE	5475:14	5475:14	15	)
LEAF_NODE	5475:15	5475:15	13	;
LEAF_NODE	5476:4	5476:4	9	}
LEAF_NODE	5477:3	5477:3	6	}
JUMP_STATEMENT	5478:3	5478:8	6	break DESTINATION ;
KEYWORD	5478:3	5478:3	7	break
LEAF_NODE	5478:3	5478:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5478:8	5478:8	7	;
LABEL	5479:2	5479:29	6	case TIFF_SETGET_C32_UINT16 :
LEAF_NODE	5479:2	5479:2	7	case
LEAF_NODE	5479:7	5479:7	7	TIFF_SETGET_C32_UINT16
LEAF_NODE	5479:29	5479:29	7	:
LEAF_NODE	5480:3	5480:3	6	{
STATEMENTS	5481:4	5485:4	6	
SIMPLE_DECL	5481:4	5481:16	7	uint16 * data ;
VAR_DECL	5481:4	5481:12	8	uint16 * data
TYPE	5481:4	5481:10	9	uint16 *
TYPE_NAME	5481:4	5481:4	10	uint16
LEAF_NODE	5481:4	5481:4	11	uint16
POINTER	5481:10	5481:10	10	*
LEAF_NODE	5481:10	5481:10	11	*
NAME	5481:12	5481:12	9	data
LEAF_NODE	5481:12	5481:12	10	data
LEAF_NODE	5481:16	5481:16	8	;
EXPR_STATEMENT	5482:4	5482:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5482:4	5482:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5482:4	5482:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5482:4	5482:4	10	assert
LEAF_NODE	5482:4	5482:4	11	assert
LEAF_NODE	5482:10	5482:10	10	(
ARGUMENT	5482:11	5482:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5482:11	5482:16	11	fip -> field_readcount
LEAF_NODE	5482:11	5482:11	12	fip
LEAF_NODE	5482:14	5482:14	12	->
LEAF_NODE	5482:16	5482:16	12	field_readcount
EQ_OPERATOR	5482:31	5482:31	11	==
LEAF_NODE	5482:31	5482:31	12	==
FIELD	5482:33	5482:33	11	TIFF_VARIABLE2
LEAF_NODE	5482:33	5482:33	12	TIFF_VARIABLE2
LEAF_NODE	5482:47	5482:47	10	)
LEAF_NODE	5482:48	5482:48	8	;
EXPR_STATEMENT	5483:4	5483:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5483:4	5483:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5483:4	5483:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5483:4	5483:4	10	assert
LEAF_NODE	5483:4	5483:4	11	assert
LEAF_NODE	5483:10	5483:10	10	(
ARGUMENT	5483:11	5483:33	10	fip -> field_passcount == 1
FIELD	5483:11	5483:16	11	fip -> field_passcount
LEAF_NODE	5483:11	5483:11	12	fip
LEAF_NODE	5483:14	5483:14	12	->
LEAF_NODE	5483:16	5483:16	12	field_passcount
EQ_OPERATOR	5483:31	5483:31	11	==
LEAF_NODE	5483:31	5483:31	12	==
FIELD	5483:33	5483:33	11	1
LEAF_NODE	5483:33	5483:33	12	1
LEAF_NODE	5483:34	5483:34	10	)
LEAF_NODE	5483:35	5483:35	8	;
EXPR_STATEMENT	5484:4	5484:48	7	err = TIFFReadDirEntryShortArray ( tif , dp , & data ) ;
EXPR	5484:4	5484:4	8	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
ASSIGN	5484:4	5484:8	9	err = TIFFReadDirEntryShortArray ( tif , dp , & data )
LVAL	5484:4	5484:4	10	err
FIELD	5484:4	5484:4	11	err
LEAF_NODE	5484:4	5484:4	12	err
ASSIGN_OP	5484:7	5484:7	10	=
LEAF_NODE	5484:7	5484:7	11	=
RVAL	5484:8	5484:8	10	TIFFReadDirEntryShortArray ( tif , dp , & data )
FUNCTION_CALL	5484:8	5484:47	11	TIFFReadDirEntryShortArray ( tif , dp , & data )
CALLEE	5484:8	5484:8	12	TIFFReadDirEntryShortArray
LEAF_NODE	5484:8	5484:8	13	TIFFReadDirEntryShortArray
LEAF_NODE	5484:34	5484:34	12	(
ARGUMENT	5484:35	5484:35	12	tif
FIELD	5484:35	5484:35	13	tif
LEAF_NODE	5484:35	5484:35	14	tif
LEAF_NODE	5484:38	5484:38	12	,
ARGUMENT	5484:39	5484:39	12	dp
FIELD	5484:39	5484:39	13	dp
LEAF_NODE	5484:39	5484:39	14	dp
LEAF_NODE	5484:41	5484:41	12	,
ARGUMENT	5484:42	5484:42	12	& data
UNARY_EXPR	5484:42	5484:43	13	& data
UNARY_OPERATOR	5484:42	5484:42	14	&
LEAF_NODE	5484:42	5484:42	15	&
FIELD	5484:43	5484:43	14	data
LEAF_NODE	5484:43	5484:43	15	data
LEAF_NODE	5484:47	5484:47	12	)
LEAF_NODE	5484:48	5484:48	8	;
SELECTION	5485:4	5486:4	7	
KEYWORD	5485:4	5485:4	8	if
LEAF_NODE	5485:4	5485:4	9	if
LEAF_NODE	5485:7	5485:7	8	(
CONDITION	5485:8	5485:8	8	err == TIFFReadDirEntryErrOk
EXPR	5485:8	5485:13	9	err == TIFFReadDirEntryErrOk
FIELD	5485:8	5485:8	10	err
LEAF_NODE	5485:8	5485:8	11	err
EQ_OPERATOR	5485:11	5485:11	10	==
LEAF_NODE	5485:11	5485:11	11	==
FIELD	5485:13	5485:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5485:13	5485:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5485:34	5485:34	8	)
STATEMENTS	5486:4	5493:4	8	
LEAF_NODE	5486:4	5486:4	9	{
STATEMENTS	5487:5	5491:5	9	
SIMPLE_DECL	5487:5	5487:10	10	int m ;
VAR_DECL	5487:5	5487:9	11	int m
TYPE	5487:5	5487:5	12	int
TYPE_NAME	5487:5	5487:5	13	int
LEAF_NODE	5487:5	5487:5	14	int
NAME	5487:9	5487:9	12	m
LEAF_NODE	5487:9	5487:9	13	m
LEAF_NODE	5487:10	5487:10	11	;
EXPR_STATEMENT	5488:5	5488:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5488:5	5488:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5488:5	5488:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5488:5	5488:5	13	m
FIELD	5488:5	5488:5	14	m
LEAF_NODE	5488:5	5488:5	15	m
ASSIGN_OP	5488:6	5488:6	13	=
LEAF_NODE	5488:6	5488:6	14	=
RVAL	5488:7	5488:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5488:7	5488:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5488:7	5488:7	15	TIFFSetField
LEAF_NODE	5488:7	5488:7	16	TIFFSetField
LEAF_NODE	5488:19	5488:19	15	(
ARGUMENT	5488:20	5488:20	15	tif
FIELD	5488:20	5488:20	16	tif
LEAF_NODE	5488:20	5488:20	17	tif
LEAF_NODE	5488:23	5488:23	15	,
ARGUMENT	5488:24	5488:24	15	dp -> tdir_tag
FIELD	5488:24	5488:28	16	dp -> tdir_tag
LEAF_NODE	5488:24	5488:24	17	dp
LEAF_NODE	5488:26	5488:26	17	->
LEAF_NODE	5488:28	5488:28	17	tdir_tag
LEAF_NODE	5488:36	5488:36	15	,
ARGUMENT	5488:37	5488:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5488:37	5488:37	16	(
TYPE_NAME	5488:38	5488:38	16	uint32
LEAF_NODE	5488:38	5488:38	17	uint32
LEAF_NODE	5488:44	5488:44	16	)
LEAF_NODE	5488:45	5488:45	16	(
FIELD	5488:46	5488:50	16	dp -> tdir_count
LEAF_NODE	5488:46	5488:46	17	dp
LEAF_NODE	5488:48	5488:48	17	->
LEAF_NODE	5488:50	5488:50	17	tdir_count
LEAF_NODE	5488:60	5488:60	16	)
LEAF_NODE	5488:61	5488:61	15	,
ARGUMENT	5488:62	5488:62	15	data
FIELD	5488:62	5488:62	16	data
LEAF_NODE	5488:62	5488:62	17	data
LEAF_NODE	5488:66	5488:66	15	)
LEAF_NODE	5488:67	5488:67	11	;
SELECTION	5489:5	5490:6	10	
KEYWORD	5489:5	5489:5	11	if
LEAF_NODE	5489:5	5489:5	12	if
LEAF_NODE	5489:8	5489:8	11	(
CONDITION	5489:9	5489:9	11	data != 0
EXPR	5489:9	5489:15	12	data != 0
FIELD	5489:9	5489:9	13	data
LEAF_NODE	5489:9	5489:9	14	data
EQ_OPERATOR	5489:13	5489:13	13	!=
LEAF_NODE	5489:13	5489:13	14	!=
FIELD	5489:15	5489:15	13	0
LEAF_NODE	5489:15	5489:15	14	0
LEAF_NODE	5489:16	5489:16	11	)
STATEMENTS	5490:6	5490:6	11	
EXPR_STATEMENT	5490:6	5490:21	12	_TIFFfree ( data ) ;
EXPR	5490:6	5490:6	13	_TIFFfree ( data )
FUNCTION_CALL	5490:6	5490:20	14	_TIFFfree ( data )
CALLEE	5490:6	5490:6	15	_TIFFfree
LEAF_NODE	5490:6	5490:6	16	_TIFFfree
LEAF_NODE	5490:15	5490:15	15	(
ARGUMENT	5490:16	5490:16	15	data
FIELD	5490:16	5490:16	16	data
LEAF_NODE	5490:16	5490:16	17	data
LEAF_NODE	5490:20	5490:20	15	)
LEAF_NODE	5490:21	5490:21	13	;
SELECTION	5491:5	5492:6	10	
KEYWORD	5491:5	5491:5	11	if
LEAF_NODE	5491:5	5491:5	12	if
LEAF_NODE	5491:8	5491:8	11	(
CONDITION	5491:9	5491:9	11	! m
EXPR	5491:9	5491:9	12	! m
UNARY_EXPR	5491:9	5491:10	13	! m
UNARY_OPERATOR	5491:9	5491:9	14	!
LEAF_NODE	5491:9	5491:9	15	!
FIELD	5491:10	5491:10	14	m
LEAF_NODE	5491:10	5491:10	15	m
LEAF_NODE	5491:11	5491:11	11	)
STATEMENTS	5492:6	5492:6	11	
JUMP_STATEMENT	5492:6	5492:15	12	return ( 0 ) ;
KEYWORD	5492:6	5492:6	13	return
LEAF_NODE	5492:6	5492:6	14	return
DESTINATION	5492:12	5492:12	13	( 0 )
EXPR	5492:12	5492:14	14	( 0 )
LEAF_NODE	5492:12	5492:12	15	(
FIELD	5492:13	5492:13	15	0
LEAF_NODE	5492:13	5492:13	16	0
LEAF_NODE	5492:14	5492:14	15	)
LEAF_NODE	5492:15	5492:15	13	;
LEAF_NODE	5493:4	5493:4	9	}
LEAF_NODE	5494:3	5494:3	6	}
JUMP_STATEMENT	5495:3	5495:8	6	break DESTINATION ;
KEYWORD	5495:3	5495:3	7	break
LEAF_NODE	5495:3	5495:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5495:8	5495:8	7	;
LABEL	5496:2	5496:29	6	case TIFF_SETGET_C32_SINT16 :
LEAF_NODE	5496:2	5496:2	7	case
LEAF_NODE	5496:7	5496:7	7	TIFF_SETGET_C32_SINT16
LEAF_NODE	5496:29	5496:29	7	:
LEAF_NODE	5497:3	5497:3	6	{
STATEMENTS	5498:4	5502:4	6	
SIMPLE_DECL	5498:4	5498:22	7	int16 * data ; data = NULL ;
VAR_DECL	5498:4	5498:11	8	int16 * data ; data = NULL
TYPE	5498:4	5498:9	9	int16 *
TYPE_NAME	5498:4	5498:4	10	int16
LEAF_NODE	5498:4	5498:4	11	int16
POINTER	5498:9	5498:9	10	*
LEAF_NODE	5498:9	5498:9	11	*
NAME	5498:11	5498:11	9	data
LEAF_NODE	5498:11	5498:11	10	data
LEAF_NODE	0:0	0:0	9	;
INIT	5498:11	5498:11	9	data = NULL
ASSIGN	5498:11	5498:18	10	data = NULL
LVAL	5498:11	5498:11	11	data
NAME	5498:11	5498:11	12	data
LEAF_NODE	5498:11	5498:11	13	data
ASSIGN_OP	5498:16	5498:16	11	=
LEAF_NODE	5498:16	5498:16	12	=
RVAL	5498:18	5498:18	11	NULL
FIELD	5498:18	5498:18	12	NULL
LEAF_NODE	5498:18	5498:18	13	NULL
LEAF_NODE	5498:22	5498:22	8	;
EXPR_STATEMENT	5499:4	5499:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5499:4	5499:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5499:4	5499:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5499:4	5499:4	10	assert
LEAF_NODE	5499:4	5499:4	11	assert
LEAF_NODE	5499:10	5499:10	10	(
ARGUMENT	5499:11	5499:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5499:11	5499:16	11	fip -> field_readcount
LEAF_NODE	5499:11	5499:11	12	fip
LEAF_NODE	5499:14	5499:14	12	->
LEAF_NODE	5499:16	5499:16	12	field_readcount
EQ_OPERATOR	5499:31	5499:31	11	==
LEAF_NODE	5499:31	5499:31	12	==
FIELD	5499:33	5499:33	11	TIFF_VARIABLE2
LEAF_NODE	5499:33	5499:33	12	TIFF_VARIABLE2
LEAF_NODE	5499:47	5499:47	10	)
LEAF_NODE	5499:48	5499:48	8	;
EXPR_STATEMENT	5500:4	5500:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5500:4	5500:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5500:4	5500:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5500:4	5500:4	10	assert
LEAF_NODE	5500:4	5500:4	11	assert
LEAF_NODE	5500:10	5500:10	10	(
ARGUMENT	5500:11	5500:33	10	fip -> field_passcount == 1
FIELD	5500:11	5500:16	11	fip -> field_passcount
LEAF_NODE	5500:11	5500:11	12	fip
LEAF_NODE	5500:14	5500:14	12	->
LEAF_NODE	5500:16	5500:16	12	field_passcount
EQ_OPERATOR	5500:31	5500:31	11	==
LEAF_NODE	5500:31	5500:31	12	==
FIELD	5500:33	5500:33	11	1
LEAF_NODE	5500:33	5500:33	12	1
LEAF_NODE	5500:34	5500:34	10	)
LEAF_NODE	5500:35	5500:35	8	;
EXPR_STATEMENT	5501:4	5501:49	7	err = TIFFReadDirEntrySshortArray ( tif , dp , & data ) ;
EXPR	5501:4	5501:4	8	err = TIFFReadDirEntrySshortArray ( tif , dp , & data )
ASSIGN	5501:4	5501:8	9	err = TIFFReadDirEntrySshortArray ( tif , dp , & data )
LVAL	5501:4	5501:4	10	err
FIELD	5501:4	5501:4	11	err
LEAF_NODE	5501:4	5501:4	12	err
ASSIGN_OP	5501:7	5501:7	10	=
LEAF_NODE	5501:7	5501:7	11	=
RVAL	5501:8	5501:8	10	TIFFReadDirEntrySshortArray ( tif , dp , & data )
FUNCTION_CALL	5501:8	5501:48	11	TIFFReadDirEntrySshortArray ( tif , dp , & data )
CALLEE	5501:8	5501:8	12	TIFFReadDirEntrySshortArray
LEAF_NODE	5501:8	5501:8	13	TIFFReadDirEntrySshortArray
LEAF_NODE	5501:35	5501:35	12	(
ARGUMENT	5501:36	5501:36	12	tif
FIELD	5501:36	5501:36	13	tif
LEAF_NODE	5501:36	5501:36	14	tif
LEAF_NODE	5501:39	5501:39	12	,
ARGUMENT	5501:40	5501:40	12	dp
FIELD	5501:40	5501:40	13	dp
LEAF_NODE	5501:40	5501:40	14	dp
LEAF_NODE	5501:42	5501:42	12	,
ARGUMENT	5501:43	5501:43	12	& data
UNARY_EXPR	5501:43	5501:44	13	& data
UNARY_OPERATOR	5501:43	5501:43	14	&
LEAF_NODE	5501:43	5501:43	15	&
FIELD	5501:44	5501:44	14	data
LEAF_NODE	5501:44	5501:44	15	data
LEAF_NODE	5501:48	5501:48	12	)
LEAF_NODE	5501:49	5501:49	8	;
SELECTION	5502:4	5503:4	7	
KEYWORD	5502:4	5502:4	8	if
LEAF_NODE	5502:4	5502:4	9	if
LEAF_NODE	5502:7	5502:7	8	(
CONDITION	5502:8	5502:8	8	err == TIFFReadDirEntryErrOk
EXPR	5502:8	5502:13	9	err == TIFFReadDirEntryErrOk
FIELD	5502:8	5502:8	10	err
LEAF_NODE	5502:8	5502:8	11	err
EQ_OPERATOR	5502:11	5502:11	10	==
LEAF_NODE	5502:11	5502:11	11	==
FIELD	5502:13	5502:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5502:13	5502:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5502:34	5502:34	8	)
STATEMENTS	5503:4	5510:4	8	
LEAF_NODE	5503:4	5503:4	9	{
STATEMENTS	5504:5	5508:5	9	
SIMPLE_DECL	5504:5	5504:10	10	int m ;
VAR_DECL	5504:5	5504:9	11	int m
TYPE	5504:5	5504:5	12	int
TYPE_NAME	5504:5	5504:5	13	int
LEAF_NODE	5504:5	5504:5	14	int
NAME	5504:9	5504:9	12	m
LEAF_NODE	5504:9	5504:9	13	m
LEAF_NODE	5504:10	5504:10	11	;
EXPR_STATEMENT	5505:5	5505:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5505:5	5505:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5505:5	5505:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5505:5	5505:5	13	m
FIELD	5505:5	5505:5	14	m
LEAF_NODE	5505:5	5505:5	15	m
ASSIGN_OP	5505:6	5505:6	13	=
LEAF_NODE	5505:6	5505:6	14	=
RVAL	5505:7	5505:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5505:7	5505:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5505:7	5505:7	15	TIFFSetField
LEAF_NODE	5505:7	5505:7	16	TIFFSetField
LEAF_NODE	5505:19	5505:19	15	(
ARGUMENT	5505:20	5505:20	15	tif
FIELD	5505:20	5505:20	16	tif
LEAF_NODE	5505:20	5505:20	17	tif
LEAF_NODE	5505:23	5505:23	15	,
ARGUMENT	5505:24	5505:24	15	dp -> tdir_tag
FIELD	5505:24	5505:28	16	dp -> tdir_tag
LEAF_NODE	5505:24	5505:24	17	dp
LEAF_NODE	5505:26	5505:26	17	->
LEAF_NODE	5505:28	5505:28	17	tdir_tag
LEAF_NODE	5505:36	5505:36	15	,
ARGUMENT	5505:37	5505:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5505:37	5505:37	16	(
TYPE_NAME	5505:38	5505:38	16	uint32
LEAF_NODE	5505:38	5505:38	17	uint32
LEAF_NODE	5505:44	5505:44	16	)
LEAF_NODE	5505:45	5505:45	16	(
FIELD	5505:46	5505:50	16	dp -> tdir_count
LEAF_NODE	5505:46	5505:46	17	dp
LEAF_NODE	5505:48	5505:48	17	->
LEAF_NODE	5505:50	5505:50	17	tdir_count
LEAF_NODE	5505:60	5505:60	16	)
LEAF_NODE	5505:61	5505:61	15	,
ARGUMENT	5505:62	5505:62	15	data
FIELD	5505:62	5505:62	16	data
LEAF_NODE	5505:62	5505:62	17	data
LEAF_NODE	5505:66	5505:66	15	)
LEAF_NODE	5505:67	5505:67	11	;
SELECTION	5506:5	5507:6	10	
KEYWORD	5506:5	5506:5	11	if
LEAF_NODE	5506:5	5506:5	12	if
LEAF_NODE	5506:8	5506:8	11	(
CONDITION	5506:9	5506:9	11	data != 0
EXPR	5506:9	5506:15	12	data != 0
FIELD	5506:9	5506:9	13	data
LEAF_NODE	5506:9	5506:9	14	data
EQ_OPERATOR	5506:13	5506:13	13	!=
LEAF_NODE	5506:13	5506:13	14	!=
FIELD	5506:15	5506:15	13	0
LEAF_NODE	5506:15	5506:15	14	0
LEAF_NODE	5506:16	5506:16	11	)
STATEMENTS	5507:6	5507:6	11	
EXPR_STATEMENT	5507:6	5507:21	12	_TIFFfree ( data ) ;
EXPR	5507:6	5507:6	13	_TIFFfree ( data )
FUNCTION_CALL	5507:6	5507:20	14	_TIFFfree ( data )
CALLEE	5507:6	5507:6	15	_TIFFfree
LEAF_NODE	5507:6	5507:6	16	_TIFFfree
LEAF_NODE	5507:15	5507:15	15	(
ARGUMENT	5507:16	5507:16	15	data
FIELD	5507:16	5507:16	16	data
LEAF_NODE	5507:16	5507:16	17	data
LEAF_NODE	5507:20	5507:20	15	)
LEAF_NODE	5507:21	5507:21	13	;
SELECTION	5508:5	5509:6	10	
KEYWORD	5508:5	5508:5	11	if
LEAF_NODE	5508:5	5508:5	12	if
LEAF_NODE	5508:8	5508:8	11	(
CONDITION	5508:9	5508:9	11	! m
EXPR	5508:9	5508:9	12	! m
UNARY_EXPR	5508:9	5508:10	13	! m
UNARY_OPERATOR	5508:9	5508:9	14	!
LEAF_NODE	5508:9	5508:9	15	!
FIELD	5508:10	5508:10	14	m
LEAF_NODE	5508:10	5508:10	15	m
LEAF_NODE	5508:11	5508:11	11	)
STATEMENTS	5509:6	5509:6	11	
JUMP_STATEMENT	5509:6	5509:15	12	return ( 0 ) ;
KEYWORD	5509:6	5509:6	13	return
LEAF_NODE	5509:6	5509:6	14	return
DESTINATION	5509:12	5509:12	13	( 0 )
EXPR	5509:12	5509:14	14	( 0 )
LEAF_NODE	5509:12	5509:12	15	(
FIELD	5509:13	5509:13	15	0
LEAF_NODE	5509:13	5509:13	16	0
LEAF_NODE	5509:14	5509:14	15	)
LEAF_NODE	5509:15	5509:15	13	;
LEAF_NODE	5510:4	5510:4	9	}
LEAF_NODE	5511:3	5511:3	6	}
JUMP_STATEMENT	5512:3	5512:8	6	break DESTINATION ;
KEYWORD	5512:3	5512:3	7	break
LEAF_NODE	5512:3	5512:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5512:8	5512:8	7	;
LABEL	5513:2	5513:29	6	case TIFF_SETGET_C32_UINT32 :
LEAF_NODE	5513:2	5513:2	7	case
LEAF_NODE	5513:7	5513:7	7	TIFF_SETGET_C32_UINT32
LEAF_NODE	5513:29	5513:29	7	:
LEAF_NODE	5514:3	5514:3	6	{
STATEMENTS	5515:4	5519:4	6	
SIMPLE_DECL	5515:4	5515:16	7	uint32 * data ;
VAR_DECL	5515:4	5515:12	8	uint32 * data
TYPE	5515:4	5515:10	9	uint32 *
TYPE_NAME	5515:4	5515:4	10	uint32
LEAF_NODE	5515:4	5515:4	11	uint32
POINTER	5515:10	5515:10	10	*
LEAF_NODE	5515:10	5515:10	11	*
NAME	5515:12	5515:12	9	data
LEAF_NODE	5515:12	5515:12	10	data
LEAF_NODE	5515:16	5515:16	8	;
EXPR_STATEMENT	5516:4	5516:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5516:4	5516:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5516:4	5516:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5516:4	5516:4	10	assert
LEAF_NODE	5516:4	5516:4	11	assert
LEAF_NODE	5516:10	5516:10	10	(
ARGUMENT	5516:11	5516:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5516:11	5516:16	11	fip -> field_readcount
LEAF_NODE	5516:11	5516:11	12	fip
LEAF_NODE	5516:14	5516:14	12	->
LEAF_NODE	5516:16	5516:16	12	field_readcount
EQ_OPERATOR	5516:31	5516:31	11	==
LEAF_NODE	5516:31	5516:31	12	==
FIELD	5516:33	5516:33	11	TIFF_VARIABLE2
LEAF_NODE	5516:33	5516:33	12	TIFF_VARIABLE2
LEAF_NODE	5516:47	5516:47	10	)
LEAF_NODE	5516:48	5516:48	8	;
EXPR_STATEMENT	5517:4	5517:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5517:4	5517:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5517:4	5517:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5517:4	5517:4	10	assert
LEAF_NODE	5517:4	5517:4	11	assert
LEAF_NODE	5517:10	5517:10	10	(
ARGUMENT	5517:11	5517:33	10	fip -> field_passcount == 1
FIELD	5517:11	5517:16	11	fip -> field_passcount
LEAF_NODE	5517:11	5517:11	12	fip
LEAF_NODE	5517:14	5517:14	12	->
LEAF_NODE	5517:16	5517:16	12	field_passcount
EQ_OPERATOR	5517:31	5517:31	11	==
LEAF_NODE	5517:31	5517:31	12	==
FIELD	5517:33	5517:33	11	1
LEAF_NODE	5517:33	5517:33	12	1
LEAF_NODE	5517:34	5517:34	10	)
LEAF_NODE	5517:35	5517:35	8	;
EXPR_STATEMENT	5518:4	5518:47	7	err = TIFFReadDirEntryLongArray ( tif , dp , & data ) ;
EXPR	5518:4	5518:4	8	err = TIFFReadDirEntryLongArray ( tif , dp , & data )
ASSIGN	5518:4	5518:8	9	err = TIFFReadDirEntryLongArray ( tif , dp , & data )
LVAL	5518:4	5518:4	10	err
FIELD	5518:4	5518:4	11	err
LEAF_NODE	5518:4	5518:4	12	err
ASSIGN_OP	5518:7	5518:7	10	=
LEAF_NODE	5518:7	5518:7	11	=
RVAL	5518:8	5518:8	10	TIFFReadDirEntryLongArray ( tif , dp , & data )
FUNCTION_CALL	5518:8	5518:46	11	TIFFReadDirEntryLongArray ( tif , dp , & data )
CALLEE	5518:8	5518:8	12	TIFFReadDirEntryLongArray
LEAF_NODE	5518:8	5518:8	13	TIFFReadDirEntryLongArray
LEAF_NODE	5518:33	5518:33	12	(
ARGUMENT	5518:34	5518:34	12	tif
FIELD	5518:34	5518:34	13	tif
LEAF_NODE	5518:34	5518:34	14	tif
LEAF_NODE	5518:37	5518:37	12	,
ARGUMENT	5518:38	5518:38	12	dp
FIELD	5518:38	5518:38	13	dp
LEAF_NODE	5518:38	5518:38	14	dp
LEAF_NODE	5518:40	5518:40	12	,
ARGUMENT	5518:41	5518:41	12	& data
UNARY_EXPR	5518:41	5518:42	13	& data
UNARY_OPERATOR	5518:41	5518:41	14	&
LEAF_NODE	5518:41	5518:41	15	&
FIELD	5518:42	5518:42	14	data
LEAF_NODE	5518:42	5518:42	15	data
LEAF_NODE	5518:46	5518:46	12	)
LEAF_NODE	5518:47	5518:47	8	;
SELECTION	5519:4	5520:4	7	
KEYWORD	5519:4	5519:4	8	if
LEAF_NODE	5519:4	5519:4	9	if
LEAF_NODE	5519:7	5519:7	8	(
CONDITION	5519:8	5519:8	8	err == TIFFReadDirEntryErrOk
EXPR	5519:8	5519:13	9	err == TIFFReadDirEntryErrOk
FIELD	5519:8	5519:8	10	err
LEAF_NODE	5519:8	5519:8	11	err
EQ_OPERATOR	5519:11	5519:11	10	==
LEAF_NODE	5519:11	5519:11	11	==
FIELD	5519:13	5519:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5519:13	5519:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5519:34	5519:34	8	)
STATEMENTS	5520:4	5527:4	8	
LEAF_NODE	5520:4	5520:4	9	{
STATEMENTS	5521:5	5525:5	9	
SIMPLE_DECL	5521:5	5521:10	10	int m ;
VAR_DECL	5521:5	5521:9	11	int m
TYPE	5521:5	5521:5	12	int
TYPE_NAME	5521:5	5521:5	13	int
LEAF_NODE	5521:5	5521:5	14	int
NAME	5521:9	5521:9	12	m
LEAF_NODE	5521:9	5521:9	13	m
LEAF_NODE	5521:10	5521:10	11	;
EXPR_STATEMENT	5522:5	5522:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5522:5	5522:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5522:5	5522:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5522:5	5522:5	13	m
FIELD	5522:5	5522:5	14	m
LEAF_NODE	5522:5	5522:5	15	m
ASSIGN_OP	5522:6	5522:6	13	=
LEAF_NODE	5522:6	5522:6	14	=
RVAL	5522:7	5522:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5522:7	5522:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5522:7	5522:7	15	TIFFSetField
LEAF_NODE	5522:7	5522:7	16	TIFFSetField
LEAF_NODE	5522:19	5522:19	15	(
ARGUMENT	5522:20	5522:20	15	tif
FIELD	5522:20	5522:20	16	tif
LEAF_NODE	5522:20	5522:20	17	tif
LEAF_NODE	5522:23	5522:23	15	,
ARGUMENT	5522:24	5522:24	15	dp -> tdir_tag
FIELD	5522:24	5522:28	16	dp -> tdir_tag
LEAF_NODE	5522:24	5522:24	17	dp
LEAF_NODE	5522:26	5522:26	17	->
LEAF_NODE	5522:28	5522:28	17	tdir_tag
LEAF_NODE	5522:36	5522:36	15	,
ARGUMENT	5522:37	5522:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5522:37	5522:37	16	(
TYPE_NAME	5522:38	5522:38	16	uint32
LEAF_NODE	5522:38	5522:38	17	uint32
LEAF_NODE	5522:44	5522:44	16	)
LEAF_NODE	5522:45	5522:45	16	(
FIELD	5522:46	5522:50	16	dp -> tdir_count
LEAF_NODE	5522:46	5522:46	17	dp
LEAF_NODE	5522:48	5522:48	17	->
LEAF_NODE	5522:50	5522:50	17	tdir_count
LEAF_NODE	5522:60	5522:60	16	)
LEAF_NODE	5522:61	5522:61	15	,
ARGUMENT	5522:62	5522:62	15	data
FIELD	5522:62	5522:62	16	data
LEAF_NODE	5522:62	5522:62	17	data
LEAF_NODE	5522:66	5522:66	15	)
LEAF_NODE	5522:67	5522:67	11	;
SELECTION	5523:5	5524:6	10	
KEYWORD	5523:5	5523:5	11	if
LEAF_NODE	5523:5	5523:5	12	if
LEAF_NODE	5523:8	5523:8	11	(
CONDITION	5523:9	5523:9	11	data != 0
EXPR	5523:9	5523:15	12	data != 0
FIELD	5523:9	5523:9	13	data
LEAF_NODE	5523:9	5523:9	14	data
EQ_OPERATOR	5523:13	5523:13	13	!=
LEAF_NODE	5523:13	5523:13	14	!=
FIELD	5523:15	5523:15	13	0
LEAF_NODE	5523:15	5523:15	14	0
LEAF_NODE	5523:16	5523:16	11	)
STATEMENTS	5524:6	5524:6	11	
EXPR_STATEMENT	5524:6	5524:21	12	_TIFFfree ( data ) ;
EXPR	5524:6	5524:6	13	_TIFFfree ( data )
FUNCTION_CALL	5524:6	5524:20	14	_TIFFfree ( data )
CALLEE	5524:6	5524:6	15	_TIFFfree
LEAF_NODE	5524:6	5524:6	16	_TIFFfree
LEAF_NODE	5524:15	5524:15	15	(
ARGUMENT	5524:16	5524:16	15	data
FIELD	5524:16	5524:16	16	data
LEAF_NODE	5524:16	5524:16	17	data
LEAF_NODE	5524:20	5524:20	15	)
LEAF_NODE	5524:21	5524:21	13	;
SELECTION	5525:5	5526:6	10	
KEYWORD	5525:5	5525:5	11	if
LEAF_NODE	5525:5	5525:5	12	if
LEAF_NODE	5525:8	5525:8	11	(
CONDITION	5525:9	5525:9	11	! m
EXPR	5525:9	5525:9	12	! m
UNARY_EXPR	5525:9	5525:10	13	! m
UNARY_OPERATOR	5525:9	5525:9	14	!
LEAF_NODE	5525:9	5525:9	15	!
FIELD	5525:10	5525:10	14	m
LEAF_NODE	5525:10	5525:10	15	m
LEAF_NODE	5525:11	5525:11	11	)
STATEMENTS	5526:6	5526:6	11	
JUMP_STATEMENT	5526:6	5526:15	12	return ( 0 ) ;
KEYWORD	5526:6	5526:6	13	return
LEAF_NODE	5526:6	5526:6	14	return
DESTINATION	5526:12	5526:12	13	( 0 )
EXPR	5526:12	5526:14	14	( 0 )
LEAF_NODE	5526:12	5526:12	15	(
FIELD	5526:13	5526:13	15	0
LEAF_NODE	5526:13	5526:13	16	0
LEAF_NODE	5526:14	5526:14	15	)
LEAF_NODE	5526:15	5526:15	13	;
LEAF_NODE	5527:4	5527:4	9	}
LEAF_NODE	5528:3	5528:3	6	}
JUMP_STATEMENT	5529:3	5529:8	6	break DESTINATION ;
KEYWORD	5529:3	5529:3	7	break
LEAF_NODE	5529:3	5529:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5529:8	5529:8	7	;
LABEL	5530:2	5530:29	6	case TIFF_SETGET_C32_SINT32 :
LEAF_NODE	5530:2	5530:2	7	case
LEAF_NODE	5530:7	5530:7	7	TIFF_SETGET_C32_SINT32
LEAF_NODE	5530:29	5530:29	7	:
LEAF_NODE	5531:3	5531:3	6	{
STATEMENTS	5532:4	5536:4	6	
SIMPLE_DECL	5532:4	5532:22	7	int32 * data ; data = NULL ;
VAR_DECL	5532:4	5532:11	8	int32 * data ; data = NULL
TYPE	5532:4	5532:9	9	int32 *
TYPE_NAME	5532:4	5532:4	10	int32
LEAF_NODE	5532:4	5532:4	11	int32
POINTER	5532:9	5532:9	10	*
LEAF_NODE	5532:9	5532:9	11	*
NAME	5532:11	5532:11	9	data
LEAF_NODE	5532:11	5532:11	10	data
LEAF_NODE	0:0	0:0	9	;
INIT	5532:11	5532:11	9	data = NULL
ASSIGN	5532:11	5532:18	10	data = NULL
LVAL	5532:11	5532:11	11	data
NAME	5532:11	5532:11	12	data
LEAF_NODE	5532:11	5532:11	13	data
ASSIGN_OP	5532:16	5532:16	11	=
LEAF_NODE	5532:16	5532:16	12	=
RVAL	5532:18	5532:18	11	NULL
FIELD	5532:18	5532:18	12	NULL
LEAF_NODE	5532:18	5532:18	13	NULL
LEAF_NODE	5532:22	5532:22	8	;
EXPR_STATEMENT	5533:4	5533:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5533:4	5533:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5533:4	5533:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5533:4	5533:4	10	assert
LEAF_NODE	5533:4	5533:4	11	assert
LEAF_NODE	5533:10	5533:10	10	(
ARGUMENT	5533:11	5533:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5533:11	5533:16	11	fip -> field_readcount
LEAF_NODE	5533:11	5533:11	12	fip
LEAF_NODE	5533:14	5533:14	12	->
LEAF_NODE	5533:16	5533:16	12	field_readcount
EQ_OPERATOR	5533:31	5533:31	11	==
LEAF_NODE	5533:31	5533:31	12	==
FIELD	5533:33	5533:33	11	TIFF_VARIABLE2
LEAF_NODE	5533:33	5533:33	12	TIFF_VARIABLE2
LEAF_NODE	5533:47	5533:47	10	)
LEAF_NODE	5533:48	5533:48	8	;
EXPR_STATEMENT	5534:4	5534:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5534:4	5534:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5534:4	5534:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5534:4	5534:4	10	assert
LEAF_NODE	5534:4	5534:4	11	assert
LEAF_NODE	5534:10	5534:10	10	(
ARGUMENT	5534:11	5534:33	10	fip -> field_passcount == 1
FIELD	5534:11	5534:16	11	fip -> field_passcount
LEAF_NODE	5534:11	5534:11	12	fip
LEAF_NODE	5534:14	5534:14	12	->
LEAF_NODE	5534:16	5534:16	12	field_passcount
EQ_OPERATOR	5534:31	5534:31	11	==
LEAF_NODE	5534:31	5534:31	12	==
FIELD	5534:33	5534:33	11	1
LEAF_NODE	5534:33	5534:33	12	1
LEAF_NODE	5534:34	5534:34	10	)
LEAF_NODE	5534:35	5534:35	8	;
EXPR_STATEMENT	5535:4	5535:48	7	err = TIFFReadDirEntrySlongArray ( tif , dp , & data ) ;
EXPR	5535:4	5535:4	8	err = TIFFReadDirEntrySlongArray ( tif , dp , & data )
ASSIGN	5535:4	5535:8	9	err = TIFFReadDirEntrySlongArray ( tif , dp , & data )
LVAL	5535:4	5535:4	10	err
FIELD	5535:4	5535:4	11	err
LEAF_NODE	5535:4	5535:4	12	err
ASSIGN_OP	5535:7	5535:7	10	=
LEAF_NODE	5535:7	5535:7	11	=
RVAL	5535:8	5535:8	10	TIFFReadDirEntrySlongArray ( tif , dp , & data )
FUNCTION_CALL	5535:8	5535:47	11	TIFFReadDirEntrySlongArray ( tif , dp , & data )
CALLEE	5535:8	5535:8	12	TIFFReadDirEntrySlongArray
LEAF_NODE	5535:8	5535:8	13	TIFFReadDirEntrySlongArray
LEAF_NODE	5535:34	5535:34	12	(
ARGUMENT	5535:35	5535:35	12	tif
FIELD	5535:35	5535:35	13	tif
LEAF_NODE	5535:35	5535:35	14	tif
LEAF_NODE	5535:38	5535:38	12	,
ARGUMENT	5535:39	5535:39	12	dp
FIELD	5535:39	5535:39	13	dp
LEAF_NODE	5535:39	5535:39	14	dp
LEAF_NODE	5535:41	5535:41	12	,
ARGUMENT	5535:42	5535:42	12	& data
UNARY_EXPR	5535:42	5535:43	13	& data
UNARY_OPERATOR	5535:42	5535:42	14	&
LEAF_NODE	5535:42	5535:42	15	&
FIELD	5535:43	5535:43	14	data
LEAF_NODE	5535:43	5535:43	15	data
LEAF_NODE	5535:47	5535:47	12	)
LEAF_NODE	5535:48	5535:48	8	;
SELECTION	5536:4	5537:4	7	
KEYWORD	5536:4	5536:4	8	if
LEAF_NODE	5536:4	5536:4	9	if
LEAF_NODE	5536:7	5536:7	8	(
CONDITION	5536:8	5536:8	8	err == TIFFReadDirEntryErrOk
EXPR	5536:8	5536:13	9	err == TIFFReadDirEntryErrOk
FIELD	5536:8	5536:8	10	err
LEAF_NODE	5536:8	5536:8	11	err
EQ_OPERATOR	5536:11	5536:11	10	==
LEAF_NODE	5536:11	5536:11	11	==
FIELD	5536:13	5536:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5536:13	5536:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5536:34	5536:34	8	)
STATEMENTS	5537:4	5544:4	8	
LEAF_NODE	5537:4	5537:4	9	{
STATEMENTS	5538:5	5542:5	9	
SIMPLE_DECL	5538:5	5538:10	10	int m ;
VAR_DECL	5538:5	5538:9	11	int m
TYPE	5538:5	5538:5	12	int
TYPE_NAME	5538:5	5538:5	13	int
LEAF_NODE	5538:5	5538:5	14	int
NAME	5538:9	5538:9	12	m
LEAF_NODE	5538:9	5538:9	13	m
LEAF_NODE	5538:10	5538:10	11	;
EXPR_STATEMENT	5539:5	5539:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5539:5	5539:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5539:5	5539:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5539:5	5539:5	13	m
FIELD	5539:5	5539:5	14	m
LEAF_NODE	5539:5	5539:5	15	m
ASSIGN_OP	5539:6	5539:6	13	=
LEAF_NODE	5539:6	5539:6	14	=
RVAL	5539:7	5539:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5539:7	5539:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5539:7	5539:7	15	TIFFSetField
LEAF_NODE	5539:7	5539:7	16	TIFFSetField
LEAF_NODE	5539:19	5539:19	15	(
ARGUMENT	5539:20	5539:20	15	tif
FIELD	5539:20	5539:20	16	tif
LEAF_NODE	5539:20	5539:20	17	tif
LEAF_NODE	5539:23	5539:23	15	,
ARGUMENT	5539:24	5539:24	15	dp -> tdir_tag
FIELD	5539:24	5539:28	16	dp -> tdir_tag
LEAF_NODE	5539:24	5539:24	17	dp
LEAF_NODE	5539:26	5539:26	17	->
LEAF_NODE	5539:28	5539:28	17	tdir_tag
LEAF_NODE	5539:36	5539:36	15	,
ARGUMENT	5539:37	5539:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5539:37	5539:37	16	(
TYPE_NAME	5539:38	5539:38	16	uint32
LEAF_NODE	5539:38	5539:38	17	uint32
LEAF_NODE	5539:44	5539:44	16	)
LEAF_NODE	5539:45	5539:45	16	(
FIELD	5539:46	5539:50	16	dp -> tdir_count
LEAF_NODE	5539:46	5539:46	17	dp
LEAF_NODE	5539:48	5539:48	17	->
LEAF_NODE	5539:50	5539:50	17	tdir_count
LEAF_NODE	5539:60	5539:60	16	)
LEAF_NODE	5539:61	5539:61	15	,
ARGUMENT	5539:62	5539:62	15	data
FIELD	5539:62	5539:62	16	data
LEAF_NODE	5539:62	5539:62	17	data
LEAF_NODE	5539:66	5539:66	15	)
LEAF_NODE	5539:67	5539:67	11	;
SELECTION	5540:5	5541:6	10	
KEYWORD	5540:5	5540:5	11	if
LEAF_NODE	5540:5	5540:5	12	if
LEAF_NODE	5540:8	5540:8	11	(
CONDITION	5540:9	5540:9	11	data != 0
EXPR	5540:9	5540:15	12	data != 0
FIELD	5540:9	5540:9	13	data
LEAF_NODE	5540:9	5540:9	14	data
EQ_OPERATOR	5540:13	5540:13	13	!=
LEAF_NODE	5540:13	5540:13	14	!=
FIELD	5540:15	5540:15	13	0
LEAF_NODE	5540:15	5540:15	14	0
LEAF_NODE	5540:16	5540:16	11	)
STATEMENTS	5541:6	5541:6	11	
EXPR_STATEMENT	5541:6	5541:21	12	_TIFFfree ( data ) ;
EXPR	5541:6	5541:6	13	_TIFFfree ( data )
FUNCTION_CALL	5541:6	5541:20	14	_TIFFfree ( data )
CALLEE	5541:6	5541:6	15	_TIFFfree
LEAF_NODE	5541:6	5541:6	16	_TIFFfree
LEAF_NODE	5541:15	5541:15	15	(
ARGUMENT	5541:16	5541:16	15	data
FIELD	5541:16	5541:16	16	data
LEAF_NODE	5541:16	5541:16	17	data
LEAF_NODE	5541:20	5541:20	15	)
LEAF_NODE	5541:21	5541:21	13	;
SELECTION	5542:5	5543:6	10	
KEYWORD	5542:5	5542:5	11	if
LEAF_NODE	5542:5	5542:5	12	if
LEAF_NODE	5542:8	5542:8	11	(
CONDITION	5542:9	5542:9	11	! m
EXPR	5542:9	5542:9	12	! m
UNARY_EXPR	5542:9	5542:10	13	! m
UNARY_OPERATOR	5542:9	5542:9	14	!
LEAF_NODE	5542:9	5542:9	15	!
FIELD	5542:10	5542:10	14	m
LEAF_NODE	5542:10	5542:10	15	m
LEAF_NODE	5542:11	5542:11	11	)
STATEMENTS	5543:6	5543:6	11	
JUMP_STATEMENT	5543:6	5543:15	12	return ( 0 ) ;
KEYWORD	5543:6	5543:6	13	return
LEAF_NODE	5543:6	5543:6	14	return
DESTINATION	5543:12	5543:12	13	( 0 )
EXPR	5543:12	5543:14	14	( 0 )
LEAF_NODE	5543:12	5543:12	15	(
FIELD	5543:13	5543:13	15	0
LEAF_NODE	5543:13	5543:13	16	0
LEAF_NODE	5543:14	5543:14	15	)
LEAF_NODE	5543:15	5543:15	13	;
LEAF_NODE	5544:4	5544:4	9	}
LEAF_NODE	5545:3	5545:3	6	}
JUMP_STATEMENT	5546:3	5546:8	6	break DESTINATION ;
KEYWORD	5546:3	5546:3	7	break
LEAF_NODE	5546:3	5546:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5546:8	5546:8	7	;
LABEL	5547:2	5547:29	6	case TIFF_SETGET_C32_UINT64 :
LEAF_NODE	5547:2	5547:2	7	case
LEAF_NODE	5547:7	5547:7	7	TIFF_SETGET_C32_UINT64
LEAF_NODE	5547:29	5547:29	7	:
LEAF_NODE	5548:3	5548:3	6	{
STATEMENTS	5549:4	5553:4	6	
SIMPLE_DECL	5549:4	5549:16	7	uint64 * data ;
VAR_DECL	5549:4	5549:12	8	uint64 * data
TYPE	5549:4	5549:10	9	uint64 *
TYPE_NAME	5549:4	5549:4	10	uint64
LEAF_NODE	5549:4	5549:4	11	uint64
POINTER	5549:10	5549:10	10	*
LEAF_NODE	5549:10	5549:10	11	*
NAME	5549:12	5549:12	9	data
LEAF_NODE	5549:12	5549:12	10	data
LEAF_NODE	5549:16	5549:16	8	;
EXPR_STATEMENT	5550:4	5550:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5550:4	5550:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5550:4	5550:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5550:4	5550:4	10	assert
LEAF_NODE	5550:4	5550:4	11	assert
LEAF_NODE	5550:10	5550:10	10	(
ARGUMENT	5550:11	5550:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5550:11	5550:16	11	fip -> field_readcount
LEAF_NODE	5550:11	5550:11	12	fip
LEAF_NODE	5550:14	5550:14	12	->
LEAF_NODE	5550:16	5550:16	12	field_readcount
EQ_OPERATOR	5550:31	5550:31	11	==
LEAF_NODE	5550:31	5550:31	12	==
FIELD	5550:33	5550:33	11	TIFF_VARIABLE2
LEAF_NODE	5550:33	5550:33	12	TIFF_VARIABLE2
LEAF_NODE	5550:47	5550:47	10	)
LEAF_NODE	5550:48	5550:48	8	;
EXPR_STATEMENT	5551:4	5551:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5551:4	5551:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5551:4	5551:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5551:4	5551:4	10	assert
LEAF_NODE	5551:4	5551:4	11	assert
LEAF_NODE	5551:10	5551:10	10	(
ARGUMENT	5551:11	5551:33	10	fip -> field_passcount == 1
FIELD	5551:11	5551:16	11	fip -> field_passcount
LEAF_NODE	5551:11	5551:11	12	fip
LEAF_NODE	5551:14	5551:14	12	->
LEAF_NODE	5551:16	5551:16	12	field_passcount
EQ_OPERATOR	5551:31	5551:31	11	==
LEAF_NODE	5551:31	5551:31	12	==
FIELD	5551:33	5551:33	11	1
LEAF_NODE	5551:33	5551:33	12	1
LEAF_NODE	5551:34	5551:34	10	)
LEAF_NODE	5551:35	5551:35	8	;
EXPR_STATEMENT	5552:4	5552:48	7	err = TIFFReadDirEntryLong8Array ( tif , dp , & data ) ;
EXPR	5552:4	5552:4	8	err = TIFFReadDirEntryLong8Array ( tif , dp , & data )
ASSIGN	5552:4	5552:8	9	err = TIFFReadDirEntryLong8Array ( tif , dp , & data )
LVAL	5552:4	5552:4	10	err
FIELD	5552:4	5552:4	11	err
LEAF_NODE	5552:4	5552:4	12	err
ASSIGN_OP	5552:7	5552:7	10	=
LEAF_NODE	5552:7	5552:7	11	=
RVAL	5552:8	5552:8	10	TIFFReadDirEntryLong8Array ( tif , dp , & data )
FUNCTION_CALL	5552:8	5552:47	11	TIFFReadDirEntryLong8Array ( tif , dp , & data )
CALLEE	5552:8	5552:8	12	TIFFReadDirEntryLong8Array
LEAF_NODE	5552:8	5552:8	13	TIFFReadDirEntryLong8Array
LEAF_NODE	5552:34	5552:34	12	(
ARGUMENT	5552:35	5552:35	12	tif
FIELD	5552:35	5552:35	13	tif
LEAF_NODE	5552:35	5552:35	14	tif
LEAF_NODE	5552:38	5552:38	12	,
ARGUMENT	5552:39	5552:39	12	dp
FIELD	5552:39	5552:39	13	dp
LEAF_NODE	5552:39	5552:39	14	dp
LEAF_NODE	5552:41	5552:41	12	,
ARGUMENT	5552:42	5552:42	12	& data
UNARY_EXPR	5552:42	5552:43	13	& data
UNARY_OPERATOR	5552:42	5552:42	14	&
LEAF_NODE	5552:42	5552:42	15	&
FIELD	5552:43	5552:43	14	data
LEAF_NODE	5552:43	5552:43	15	data
LEAF_NODE	5552:47	5552:47	12	)
LEAF_NODE	5552:48	5552:48	8	;
SELECTION	5553:4	5554:4	7	
KEYWORD	5553:4	5553:4	8	if
LEAF_NODE	5553:4	5553:4	9	if
LEAF_NODE	5553:7	5553:7	8	(
CONDITION	5553:8	5553:8	8	err == TIFFReadDirEntryErrOk
EXPR	5553:8	5553:13	9	err == TIFFReadDirEntryErrOk
FIELD	5553:8	5553:8	10	err
LEAF_NODE	5553:8	5553:8	11	err
EQ_OPERATOR	5553:11	5553:11	10	==
LEAF_NODE	5553:11	5553:11	11	==
FIELD	5553:13	5553:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5553:13	5553:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5553:34	5553:34	8	)
STATEMENTS	5554:4	5561:4	8	
LEAF_NODE	5554:4	5554:4	9	{
STATEMENTS	5555:5	5559:5	9	
SIMPLE_DECL	5555:5	5555:10	10	int m ;
VAR_DECL	5555:5	5555:9	11	int m
TYPE	5555:5	5555:5	12	int
TYPE_NAME	5555:5	5555:5	13	int
LEAF_NODE	5555:5	5555:5	14	int
NAME	5555:9	5555:9	12	m
LEAF_NODE	5555:9	5555:9	13	m
LEAF_NODE	5555:10	5555:10	11	;
EXPR_STATEMENT	5556:5	5556:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5556:5	5556:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5556:5	5556:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5556:5	5556:5	13	m
FIELD	5556:5	5556:5	14	m
LEAF_NODE	5556:5	5556:5	15	m
ASSIGN_OP	5556:6	5556:6	13	=
LEAF_NODE	5556:6	5556:6	14	=
RVAL	5556:7	5556:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5556:7	5556:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5556:7	5556:7	15	TIFFSetField
LEAF_NODE	5556:7	5556:7	16	TIFFSetField
LEAF_NODE	5556:19	5556:19	15	(
ARGUMENT	5556:20	5556:20	15	tif
FIELD	5556:20	5556:20	16	tif
LEAF_NODE	5556:20	5556:20	17	tif
LEAF_NODE	5556:23	5556:23	15	,
ARGUMENT	5556:24	5556:24	15	dp -> tdir_tag
FIELD	5556:24	5556:28	16	dp -> tdir_tag
LEAF_NODE	5556:24	5556:24	17	dp
LEAF_NODE	5556:26	5556:26	17	->
LEAF_NODE	5556:28	5556:28	17	tdir_tag
LEAF_NODE	5556:36	5556:36	15	,
ARGUMENT	5556:37	5556:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5556:37	5556:37	16	(
TYPE_NAME	5556:38	5556:38	16	uint32
LEAF_NODE	5556:38	5556:38	17	uint32
LEAF_NODE	5556:44	5556:44	16	)
LEAF_NODE	5556:45	5556:45	16	(
FIELD	5556:46	5556:50	16	dp -> tdir_count
LEAF_NODE	5556:46	5556:46	17	dp
LEAF_NODE	5556:48	5556:48	17	->
LEAF_NODE	5556:50	5556:50	17	tdir_count
LEAF_NODE	5556:60	5556:60	16	)
LEAF_NODE	5556:61	5556:61	15	,
ARGUMENT	5556:62	5556:62	15	data
FIELD	5556:62	5556:62	16	data
LEAF_NODE	5556:62	5556:62	17	data
LEAF_NODE	5556:66	5556:66	15	)
LEAF_NODE	5556:67	5556:67	11	;
SELECTION	5557:5	5558:6	10	
KEYWORD	5557:5	5557:5	11	if
LEAF_NODE	5557:5	5557:5	12	if
LEAF_NODE	5557:8	5557:8	11	(
CONDITION	5557:9	5557:9	11	data != 0
EXPR	5557:9	5557:15	12	data != 0
FIELD	5557:9	5557:9	13	data
LEAF_NODE	5557:9	5557:9	14	data
EQ_OPERATOR	5557:13	5557:13	13	!=
LEAF_NODE	5557:13	5557:13	14	!=
FIELD	5557:15	5557:15	13	0
LEAF_NODE	5557:15	5557:15	14	0
LEAF_NODE	5557:16	5557:16	11	)
STATEMENTS	5558:6	5558:6	11	
EXPR_STATEMENT	5558:6	5558:21	12	_TIFFfree ( data ) ;
EXPR	5558:6	5558:6	13	_TIFFfree ( data )
FUNCTION_CALL	5558:6	5558:20	14	_TIFFfree ( data )
CALLEE	5558:6	5558:6	15	_TIFFfree
LEAF_NODE	5558:6	5558:6	16	_TIFFfree
LEAF_NODE	5558:15	5558:15	15	(
ARGUMENT	5558:16	5558:16	15	data
FIELD	5558:16	5558:16	16	data
LEAF_NODE	5558:16	5558:16	17	data
LEAF_NODE	5558:20	5558:20	15	)
LEAF_NODE	5558:21	5558:21	13	;
SELECTION	5559:5	5560:6	10	
KEYWORD	5559:5	5559:5	11	if
LEAF_NODE	5559:5	5559:5	12	if
LEAF_NODE	5559:8	5559:8	11	(
CONDITION	5559:9	5559:9	11	! m
EXPR	5559:9	5559:9	12	! m
UNARY_EXPR	5559:9	5559:10	13	! m
UNARY_OPERATOR	5559:9	5559:9	14	!
LEAF_NODE	5559:9	5559:9	15	!
FIELD	5559:10	5559:10	14	m
LEAF_NODE	5559:10	5559:10	15	m
LEAF_NODE	5559:11	5559:11	11	)
STATEMENTS	5560:6	5560:6	11	
JUMP_STATEMENT	5560:6	5560:15	12	return ( 0 ) ;
KEYWORD	5560:6	5560:6	13	return
LEAF_NODE	5560:6	5560:6	14	return
DESTINATION	5560:12	5560:12	13	( 0 )
EXPR	5560:12	5560:14	14	( 0 )
LEAF_NODE	5560:12	5560:12	15	(
FIELD	5560:13	5560:13	15	0
LEAF_NODE	5560:13	5560:13	16	0
LEAF_NODE	5560:14	5560:14	15	)
LEAF_NODE	5560:15	5560:15	13	;
LEAF_NODE	5561:4	5561:4	9	}
LEAF_NODE	5562:3	5562:3	6	}
JUMP_STATEMENT	5563:3	5563:8	6	break DESTINATION ;
KEYWORD	5563:3	5563:3	7	break
LEAF_NODE	5563:3	5563:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5563:8	5563:8	7	;
LABEL	5564:2	5564:29	6	case TIFF_SETGET_C32_SINT64 :
LEAF_NODE	5564:2	5564:2	7	case
LEAF_NODE	5564:7	5564:7	7	TIFF_SETGET_C32_SINT64
LEAF_NODE	5564:29	5564:29	7	:
LEAF_NODE	5565:3	5565:3	6	{
STATEMENTS	5566:4	5570:4	6	
SIMPLE_DECL	5566:4	5566:22	7	int64 * data ; data = NULL ;
VAR_DECL	5566:4	5566:11	8	int64 * data ; data = NULL
TYPE	5566:4	5566:9	9	int64 *
TYPE_NAME	5566:4	5566:4	10	int64
LEAF_NODE	5566:4	5566:4	11	int64
POINTER	5566:9	5566:9	10	*
LEAF_NODE	5566:9	5566:9	11	*
NAME	5566:11	5566:11	9	data
LEAF_NODE	5566:11	5566:11	10	data
LEAF_NODE	0:0	0:0	9	;
INIT	5566:11	5566:11	9	data = NULL
ASSIGN	5566:11	5566:18	10	data = NULL
LVAL	5566:11	5566:11	11	data
NAME	5566:11	5566:11	12	data
LEAF_NODE	5566:11	5566:11	13	data
ASSIGN_OP	5566:16	5566:16	11	=
LEAF_NODE	5566:16	5566:16	12	=
RVAL	5566:18	5566:18	11	NULL
FIELD	5566:18	5566:18	12	NULL
LEAF_NODE	5566:18	5566:18	13	NULL
LEAF_NODE	5566:22	5566:22	8	;
EXPR_STATEMENT	5567:4	5567:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5567:4	5567:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5567:4	5567:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5567:4	5567:4	10	assert
LEAF_NODE	5567:4	5567:4	11	assert
LEAF_NODE	5567:10	5567:10	10	(
ARGUMENT	5567:11	5567:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5567:11	5567:16	11	fip -> field_readcount
LEAF_NODE	5567:11	5567:11	12	fip
LEAF_NODE	5567:14	5567:14	12	->
LEAF_NODE	5567:16	5567:16	12	field_readcount
EQ_OPERATOR	5567:31	5567:31	11	==
LEAF_NODE	5567:31	5567:31	12	==
FIELD	5567:33	5567:33	11	TIFF_VARIABLE2
LEAF_NODE	5567:33	5567:33	12	TIFF_VARIABLE2
LEAF_NODE	5567:47	5567:47	10	)
LEAF_NODE	5567:48	5567:48	8	;
EXPR_STATEMENT	5568:4	5568:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5568:4	5568:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5568:4	5568:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5568:4	5568:4	10	assert
LEAF_NODE	5568:4	5568:4	11	assert
LEAF_NODE	5568:10	5568:10	10	(
ARGUMENT	5568:11	5568:33	10	fip -> field_passcount == 1
FIELD	5568:11	5568:16	11	fip -> field_passcount
LEAF_NODE	5568:11	5568:11	12	fip
LEAF_NODE	5568:14	5568:14	12	->
LEAF_NODE	5568:16	5568:16	12	field_passcount
EQ_OPERATOR	5568:31	5568:31	11	==
LEAF_NODE	5568:31	5568:31	12	==
FIELD	5568:33	5568:33	11	1
LEAF_NODE	5568:33	5568:33	12	1
LEAF_NODE	5568:34	5568:34	10	)
LEAF_NODE	5568:35	5568:35	8	;
EXPR_STATEMENT	5569:4	5569:49	7	err = TIFFReadDirEntrySlong8Array ( tif , dp , & data ) ;
EXPR	5569:4	5569:4	8	err = TIFFReadDirEntrySlong8Array ( tif , dp , & data )
ASSIGN	5569:4	5569:8	9	err = TIFFReadDirEntrySlong8Array ( tif , dp , & data )
LVAL	5569:4	5569:4	10	err
FIELD	5569:4	5569:4	11	err
LEAF_NODE	5569:4	5569:4	12	err
ASSIGN_OP	5569:7	5569:7	10	=
LEAF_NODE	5569:7	5569:7	11	=
RVAL	5569:8	5569:8	10	TIFFReadDirEntrySlong8Array ( tif , dp , & data )
FUNCTION_CALL	5569:8	5569:48	11	TIFFReadDirEntrySlong8Array ( tif , dp , & data )
CALLEE	5569:8	5569:8	12	TIFFReadDirEntrySlong8Array
LEAF_NODE	5569:8	5569:8	13	TIFFReadDirEntrySlong8Array
LEAF_NODE	5569:35	5569:35	12	(
ARGUMENT	5569:36	5569:36	12	tif
FIELD	5569:36	5569:36	13	tif
LEAF_NODE	5569:36	5569:36	14	tif
LEAF_NODE	5569:39	5569:39	12	,
ARGUMENT	5569:40	5569:40	12	dp
FIELD	5569:40	5569:40	13	dp
LEAF_NODE	5569:40	5569:40	14	dp
LEAF_NODE	5569:42	5569:42	12	,
ARGUMENT	5569:43	5569:43	12	& data
UNARY_EXPR	5569:43	5569:44	13	& data
UNARY_OPERATOR	5569:43	5569:43	14	&
LEAF_NODE	5569:43	5569:43	15	&
FIELD	5569:44	5569:44	14	data
LEAF_NODE	5569:44	5569:44	15	data
LEAF_NODE	5569:48	5569:48	12	)
LEAF_NODE	5569:49	5569:49	8	;
SELECTION	5570:4	5571:4	7	
KEYWORD	5570:4	5570:4	8	if
LEAF_NODE	5570:4	5570:4	9	if
LEAF_NODE	5570:7	5570:7	8	(
CONDITION	5570:8	5570:8	8	err == TIFFReadDirEntryErrOk
EXPR	5570:8	5570:13	9	err == TIFFReadDirEntryErrOk
FIELD	5570:8	5570:8	10	err
LEAF_NODE	5570:8	5570:8	11	err
EQ_OPERATOR	5570:11	5570:11	10	==
LEAF_NODE	5570:11	5570:11	11	==
FIELD	5570:13	5570:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5570:13	5570:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5570:34	5570:34	8	)
STATEMENTS	5571:4	5578:4	8	
LEAF_NODE	5571:4	5571:4	9	{
STATEMENTS	5572:5	5576:5	9	
SIMPLE_DECL	5572:5	5572:10	10	int m ;
VAR_DECL	5572:5	5572:9	11	int m
TYPE	5572:5	5572:5	12	int
TYPE_NAME	5572:5	5572:5	13	int
LEAF_NODE	5572:5	5572:5	14	int
NAME	5572:9	5572:9	12	m
LEAF_NODE	5572:9	5572:9	13	m
LEAF_NODE	5572:10	5572:10	11	;
EXPR_STATEMENT	5573:5	5573:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5573:5	5573:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5573:5	5573:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5573:5	5573:5	13	m
FIELD	5573:5	5573:5	14	m
LEAF_NODE	5573:5	5573:5	15	m
ASSIGN_OP	5573:6	5573:6	13	=
LEAF_NODE	5573:6	5573:6	14	=
RVAL	5573:7	5573:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5573:7	5573:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5573:7	5573:7	15	TIFFSetField
LEAF_NODE	5573:7	5573:7	16	TIFFSetField
LEAF_NODE	5573:19	5573:19	15	(
ARGUMENT	5573:20	5573:20	15	tif
FIELD	5573:20	5573:20	16	tif
LEAF_NODE	5573:20	5573:20	17	tif
LEAF_NODE	5573:23	5573:23	15	,
ARGUMENT	5573:24	5573:24	15	dp -> tdir_tag
FIELD	5573:24	5573:28	16	dp -> tdir_tag
LEAF_NODE	5573:24	5573:24	17	dp
LEAF_NODE	5573:26	5573:26	17	->
LEAF_NODE	5573:28	5573:28	17	tdir_tag
LEAF_NODE	5573:36	5573:36	15	,
ARGUMENT	5573:37	5573:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5573:37	5573:37	16	(
TYPE_NAME	5573:38	5573:38	16	uint32
LEAF_NODE	5573:38	5573:38	17	uint32
LEAF_NODE	5573:44	5573:44	16	)
LEAF_NODE	5573:45	5573:45	16	(
FIELD	5573:46	5573:50	16	dp -> tdir_count
LEAF_NODE	5573:46	5573:46	17	dp
LEAF_NODE	5573:48	5573:48	17	->
LEAF_NODE	5573:50	5573:50	17	tdir_count
LEAF_NODE	5573:60	5573:60	16	)
LEAF_NODE	5573:61	5573:61	15	,
ARGUMENT	5573:62	5573:62	15	data
FIELD	5573:62	5573:62	16	data
LEAF_NODE	5573:62	5573:62	17	data
LEAF_NODE	5573:66	5573:66	15	)
LEAF_NODE	5573:67	5573:67	11	;
SELECTION	5574:5	5575:6	10	
KEYWORD	5574:5	5574:5	11	if
LEAF_NODE	5574:5	5574:5	12	if
LEAF_NODE	5574:8	5574:8	11	(
CONDITION	5574:9	5574:9	11	data != 0
EXPR	5574:9	5574:15	12	data != 0
FIELD	5574:9	5574:9	13	data
LEAF_NODE	5574:9	5574:9	14	data
EQ_OPERATOR	5574:13	5574:13	13	!=
LEAF_NODE	5574:13	5574:13	14	!=
FIELD	5574:15	5574:15	13	0
LEAF_NODE	5574:15	5574:15	14	0
LEAF_NODE	5574:16	5574:16	11	)
STATEMENTS	5575:6	5575:6	11	
EXPR_STATEMENT	5575:6	5575:21	12	_TIFFfree ( data ) ;
EXPR	5575:6	5575:6	13	_TIFFfree ( data )
FUNCTION_CALL	5575:6	5575:20	14	_TIFFfree ( data )
CALLEE	5575:6	5575:6	15	_TIFFfree
LEAF_NODE	5575:6	5575:6	16	_TIFFfree
LEAF_NODE	5575:15	5575:15	15	(
ARGUMENT	5575:16	5575:16	15	data
FIELD	5575:16	5575:16	16	data
LEAF_NODE	5575:16	5575:16	17	data
LEAF_NODE	5575:20	5575:20	15	)
LEAF_NODE	5575:21	5575:21	13	;
SELECTION	5576:5	5577:6	10	
KEYWORD	5576:5	5576:5	11	if
LEAF_NODE	5576:5	5576:5	12	if
LEAF_NODE	5576:8	5576:8	11	(
CONDITION	5576:9	5576:9	11	! m
EXPR	5576:9	5576:9	12	! m
UNARY_EXPR	5576:9	5576:10	13	! m
UNARY_OPERATOR	5576:9	5576:9	14	!
LEAF_NODE	5576:9	5576:9	15	!
FIELD	5576:10	5576:10	14	m
LEAF_NODE	5576:10	5576:10	15	m
LEAF_NODE	5576:11	5576:11	11	)
STATEMENTS	5577:6	5577:6	11	
JUMP_STATEMENT	5577:6	5577:15	12	return ( 0 ) ;
KEYWORD	5577:6	5577:6	13	return
LEAF_NODE	5577:6	5577:6	14	return
DESTINATION	5577:12	5577:12	13	( 0 )
EXPR	5577:12	5577:14	14	( 0 )
LEAF_NODE	5577:12	5577:12	15	(
FIELD	5577:13	5577:13	15	0
LEAF_NODE	5577:13	5577:13	16	0
LEAF_NODE	5577:14	5577:14	15	)
LEAF_NODE	5577:15	5577:15	13	;
LEAF_NODE	5578:4	5578:4	9	}
LEAF_NODE	5579:3	5579:3	6	}
JUMP_STATEMENT	5580:3	5580:8	6	break DESTINATION ;
KEYWORD	5580:3	5580:3	7	break
LEAF_NODE	5580:3	5580:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5580:8	5580:8	7	;
LABEL	5581:2	5581:28	6	case TIFF_SETGET_C32_FLOAT :
LEAF_NODE	5581:2	5581:2	7	case
LEAF_NODE	5581:7	5581:7	7	TIFF_SETGET_C32_FLOAT
LEAF_NODE	5581:28	5581:28	7	:
LEAF_NODE	5582:3	5582:3	6	{
STATEMENTS	5583:4	5587:4	6	
SIMPLE_DECL	5583:4	5583:15	7	float * data ;
VAR_DECL	5583:4	5583:11	8	float * data
TYPE	5583:4	5583:9	9	float *
TYPE_NAME	5583:4	5583:4	10	float
LEAF_NODE	5583:4	5583:4	11	float
POINTER	5583:9	5583:9	10	*
LEAF_NODE	5583:9	5583:9	11	*
NAME	5583:11	5583:11	9	data
LEAF_NODE	5583:11	5583:11	10	data
LEAF_NODE	5583:15	5583:15	8	;
EXPR_STATEMENT	5584:4	5584:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5584:4	5584:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5584:4	5584:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5584:4	5584:4	10	assert
LEAF_NODE	5584:4	5584:4	11	assert
LEAF_NODE	5584:10	5584:10	10	(
ARGUMENT	5584:11	5584:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5584:11	5584:16	11	fip -> field_readcount
LEAF_NODE	5584:11	5584:11	12	fip
LEAF_NODE	5584:14	5584:14	12	->
LEAF_NODE	5584:16	5584:16	12	field_readcount
EQ_OPERATOR	5584:31	5584:31	11	==
LEAF_NODE	5584:31	5584:31	12	==
FIELD	5584:33	5584:33	11	TIFF_VARIABLE2
LEAF_NODE	5584:33	5584:33	12	TIFF_VARIABLE2
LEAF_NODE	5584:47	5584:47	10	)
LEAF_NODE	5584:48	5584:48	8	;
EXPR_STATEMENT	5585:4	5585:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5585:4	5585:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5585:4	5585:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5585:4	5585:4	10	assert
LEAF_NODE	5585:4	5585:4	11	assert
LEAF_NODE	5585:10	5585:10	10	(
ARGUMENT	5585:11	5585:33	10	fip -> field_passcount == 1
FIELD	5585:11	5585:16	11	fip -> field_passcount
LEAF_NODE	5585:11	5585:11	12	fip
LEAF_NODE	5585:14	5585:14	12	->
LEAF_NODE	5585:16	5585:16	12	field_passcount
EQ_OPERATOR	5585:31	5585:31	11	==
LEAF_NODE	5585:31	5585:31	12	==
FIELD	5585:33	5585:33	11	1
LEAF_NODE	5585:33	5585:33	12	1
LEAF_NODE	5585:34	5585:34	10	)
LEAF_NODE	5585:35	5585:35	8	;
EXPR_STATEMENT	5586:4	5586:48	7	err = TIFFReadDirEntryFloatArray ( tif , dp , & data ) ;
EXPR	5586:4	5586:4	8	err = TIFFReadDirEntryFloatArray ( tif , dp , & data )
ASSIGN	5586:4	5586:8	9	err = TIFFReadDirEntryFloatArray ( tif , dp , & data )
LVAL	5586:4	5586:4	10	err
FIELD	5586:4	5586:4	11	err
LEAF_NODE	5586:4	5586:4	12	err
ASSIGN_OP	5586:7	5586:7	10	=
LEAF_NODE	5586:7	5586:7	11	=
RVAL	5586:8	5586:8	10	TIFFReadDirEntryFloatArray ( tif , dp , & data )
FUNCTION_CALL	5586:8	5586:47	11	TIFFReadDirEntryFloatArray ( tif , dp , & data )
CALLEE	5586:8	5586:8	12	TIFFReadDirEntryFloatArray
LEAF_NODE	5586:8	5586:8	13	TIFFReadDirEntryFloatArray
LEAF_NODE	5586:34	5586:34	12	(
ARGUMENT	5586:35	5586:35	12	tif
FIELD	5586:35	5586:35	13	tif
LEAF_NODE	5586:35	5586:35	14	tif
LEAF_NODE	5586:38	5586:38	12	,
ARGUMENT	5586:39	5586:39	12	dp
FIELD	5586:39	5586:39	13	dp
LEAF_NODE	5586:39	5586:39	14	dp
LEAF_NODE	5586:41	5586:41	12	,
ARGUMENT	5586:42	5586:42	12	& data
UNARY_EXPR	5586:42	5586:43	13	& data
UNARY_OPERATOR	5586:42	5586:42	14	&
LEAF_NODE	5586:42	5586:42	15	&
FIELD	5586:43	5586:43	14	data
LEAF_NODE	5586:43	5586:43	15	data
LEAF_NODE	5586:47	5586:47	12	)
LEAF_NODE	5586:48	5586:48	8	;
SELECTION	5587:4	5588:4	7	
KEYWORD	5587:4	5587:4	8	if
LEAF_NODE	5587:4	5587:4	9	if
LEAF_NODE	5587:7	5587:7	8	(
CONDITION	5587:8	5587:8	8	err == TIFFReadDirEntryErrOk
EXPR	5587:8	5587:13	9	err == TIFFReadDirEntryErrOk
FIELD	5587:8	5587:8	10	err
LEAF_NODE	5587:8	5587:8	11	err
EQ_OPERATOR	5587:11	5587:11	10	==
LEAF_NODE	5587:11	5587:11	11	==
FIELD	5587:13	5587:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5587:13	5587:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5587:34	5587:34	8	)
STATEMENTS	5588:4	5595:4	8	
LEAF_NODE	5588:4	5588:4	9	{
STATEMENTS	5589:5	5593:5	9	
SIMPLE_DECL	5589:5	5589:10	10	int m ;
VAR_DECL	5589:5	5589:9	11	int m
TYPE	5589:5	5589:5	12	int
TYPE_NAME	5589:5	5589:5	13	int
LEAF_NODE	5589:5	5589:5	14	int
NAME	5589:9	5589:9	12	m
LEAF_NODE	5589:9	5589:9	13	m
LEAF_NODE	5589:10	5589:10	11	;
EXPR_STATEMENT	5590:5	5590:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5590:5	5590:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5590:5	5590:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5590:5	5590:5	13	m
FIELD	5590:5	5590:5	14	m
LEAF_NODE	5590:5	5590:5	15	m
ASSIGN_OP	5590:6	5590:6	13	=
LEAF_NODE	5590:6	5590:6	14	=
RVAL	5590:7	5590:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5590:7	5590:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5590:7	5590:7	15	TIFFSetField
LEAF_NODE	5590:7	5590:7	16	TIFFSetField
LEAF_NODE	5590:19	5590:19	15	(
ARGUMENT	5590:20	5590:20	15	tif
FIELD	5590:20	5590:20	16	tif
LEAF_NODE	5590:20	5590:20	17	tif
LEAF_NODE	5590:23	5590:23	15	,
ARGUMENT	5590:24	5590:24	15	dp -> tdir_tag
FIELD	5590:24	5590:28	16	dp -> tdir_tag
LEAF_NODE	5590:24	5590:24	17	dp
LEAF_NODE	5590:26	5590:26	17	->
LEAF_NODE	5590:28	5590:28	17	tdir_tag
LEAF_NODE	5590:36	5590:36	15	,
ARGUMENT	5590:37	5590:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5590:37	5590:37	16	(
TYPE_NAME	5590:38	5590:38	16	uint32
LEAF_NODE	5590:38	5590:38	17	uint32
LEAF_NODE	5590:44	5590:44	16	)
LEAF_NODE	5590:45	5590:45	16	(
FIELD	5590:46	5590:50	16	dp -> tdir_count
LEAF_NODE	5590:46	5590:46	17	dp
LEAF_NODE	5590:48	5590:48	17	->
LEAF_NODE	5590:50	5590:50	17	tdir_count
LEAF_NODE	5590:60	5590:60	16	)
LEAF_NODE	5590:61	5590:61	15	,
ARGUMENT	5590:62	5590:62	15	data
FIELD	5590:62	5590:62	16	data
LEAF_NODE	5590:62	5590:62	17	data
LEAF_NODE	5590:66	5590:66	15	)
LEAF_NODE	5590:67	5590:67	11	;
SELECTION	5591:5	5592:6	10	
KEYWORD	5591:5	5591:5	11	if
LEAF_NODE	5591:5	5591:5	12	if
LEAF_NODE	5591:8	5591:8	11	(
CONDITION	5591:9	5591:9	11	data != 0
EXPR	5591:9	5591:15	12	data != 0
FIELD	5591:9	5591:9	13	data
LEAF_NODE	5591:9	5591:9	14	data
EQ_OPERATOR	5591:13	5591:13	13	!=
LEAF_NODE	5591:13	5591:13	14	!=
FIELD	5591:15	5591:15	13	0
LEAF_NODE	5591:15	5591:15	14	0
LEAF_NODE	5591:16	5591:16	11	)
STATEMENTS	5592:6	5592:6	11	
EXPR_STATEMENT	5592:6	5592:21	12	_TIFFfree ( data ) ;
EXPR	5592:6	5592:6	13	_TIFFfree ( data )
FUNCTION_CALL	5592:6	5592:20	14	_TIFFfree ( data )
CALLEE	5592:6	5592:6	15	_TIFFfree
LEAF_NODE	5592:6	5592:6	16	_TIFFfree
LEAF_NODE	5592:15	5592:15	15	(
ARGUMENT	5592:16	5592:16	15	data
FIELD	5592:16	5592:16	16	data
LEAF_NODE	5592:16	5592:16	17	data
LEAF_NODE	5592:20	5592:20	15	)
LEAF_NODE	5592:21	5592:21	13	;
SELECTION	5593:5	5594:6	10	
KEYWORD	5593:5	5593:5	11	if
LEAF_NODE	5593:5	5593:5	12	if
LEAF_NODE	5593:8	5593:8	11	(
CONDITION	5593:9	5593:9	11	! m
EXPR	5593:9	5593:9	12	! m
UNARY_EXPR	5593:9	5593:10	13	! m
UNARY_OPERATOR	5593:9	5593:9	14	!
LEAF_NODE	5593:9	5593:9	15	!
FIELD	5593:10	5593:10	14	m
LEAF_NODE	5593:10	5593:10	15	m
LEAF_NODE	5593:11	5593:11	11	)
STATEMENTS	5594:6	5594:6	11	
JUMP_STATEMENT	5594:6	5594:15	12	return ( 0 ) ;
KEYWORD	5594:6	5594:6	13	return
LEAF_NODE	5594:6	5594:6	14	return
DESTINATION	5594:12	5594:12	13	( 0 )
EXPR	5594:12	5594:14	14	( 0 )
LEAF_NODE	5594:12	5594:12	15	(
FIELD	5594:13	5594:13	15	0
LEAF_NODE	5594:13	5594:13	16	0
LEAF_NODE	5594:14	5594:14	15	)
LEAF_NODE	5594:15	5594:15	13	;
LEAF_NODE	5595:4	5595:4	9	}
LEAF_NODE	5596:3	5596:3	6	}
JUMP_STATEMENT	5597:3	5597:8	6	break DESTINATION ;
KEYWORD	5597:3	5597:3	7	break
LEAF_NODE	5597:3	5597:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5597:8	5597:8	7	;
LABEL	5598:2	5598:29	6	case TIFF_SETGET_C32_DOUBLE :
LEAF_NODE	5598:2	5598:2	7	case
LEAF_NODE	5598:7	5598:7	7	TIFF_SETGET_C32_DOUBLE
LEAF_NODE	5598:29	5598:29	7	:
LEAF_NODE	5599:3	5599:3	6	{
STATEMENTS	5600:4	5604:4	6	
SIMPLE_DECL	5600:4	5600:16	7	double * data ;
VAR_DECL	5600:4	5600:12	8	double * data
TYPE	5600:4	5600:10	9	double *
TYPE_NAME	5600:4	5600:4	10	double
LEAF_NODE	5600:4	5600:4	11	double
POINTER	5600:10	5600:10	10	*
LEAF_NODE	5600:10	5600:10	11	*
NAME	5600:12	5600:12	9	data
LEAF_NODE	5600:12	5600:12	10	data
LEAF_NODE	5600:16	5600:16	8	;
EXPR_STATEMENT	5601:4	5601:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5601:4	5601:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5601:4	5601:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5601:4	5601:4	10	assert
LEAF_NODE	5601:4	5601:4	11	assert
LEAF_NODE	5601:10	5601:10	10	(
ARGUMENT	5601:11	5601:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5601:11	5601:16	11	fip -> field_readcount
LEAF_NODE	5601:11	5601:11	12	fip
LEAF_NODE	5601:14	5601:14	12	->
LEAF_NODE	5601:16	5601:16	12	field_readcount
EQ_OPERATOR	5601:31	5601:31	11	==
LEAF_NODE	5601:31	5601:31	12	==
FIELD	5601:33	5601:33	11	TIFF_VARIABLE2
LEAF_NODE	5601:33	5601:33	12	TIFF_VARIABLE2
LEAF_NODE	5601:47	5601:47	10	)
LEAF_NODE	5601:48	5601:48	8	;
EXPR_STATEMENT	5602:4	5602:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5602:4	5602:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5602:4	5602:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5602:4	5602:4	10	assert
LEAF_NODE	5602:4	5602:4	11	assert
LEAF_NODE	5602:10	5602:10	10	(
ARGUMENT	5602:11	5602:33	10	fip -> field_passcount == 1
FIELD	5602:11	5602:16	11	fip -> field_passcount
LEAF_NODE	5602:11	5602:11	12	fip
LEAF_NODE	5602:14	5602:14	12	->
LEAF_NODE	5602:16	5602:16	12	field_passcount
EQ_OPERATOR	5602:31	5602:31	11	==
LEAF_NODE	5602:31	5602:31	12	==
FIELD	5602:33	5602:33	11	1
LEAF_NODE	5602:33	5602:33	12	1
LEAF_NODE	5602:34	5602:34	10	)
LEAF_NODE	5602:35	5602:35	8	;
EXPR_STATEMENT	5603:4	5603:49	7	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data ) ;
EXPR	5603:4	5603:4	8	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data )
ASSIGN	5603:4	5603:8	9	err = TIFFReadDirEntryDoubleArray ( tif , dp , & data )
LVAL	5603:4	5603:4	10	err
FIELD	5603:4	5603:4	11	err
LEAF_NODE	5603:4	5603:4	12	err
ASSIGN_OP	5603:7	5603:7	10	=
LEAF_NODE	5603:7	5603:7	11	=
RVAL	5603:8	5603:8	10	TIFFReadDirEntryDoubleArray ( tif , dp , & data )
FUNCTION_CALL	5603:8	5603:48	11	TIFFReadDirEntryDoubleArray ( tif , dp , & data )
CALLEE	5603:8	5603:8	12	TIFFReadDirEntryDoubleArray
LEAF_NODE	5603:8	5603:8	13	TIFFReadDirEntryDoubleArray
LEAF_NODE	5603:35	5603:35	12	(
ARGUMENT	5603:36	5603:36	12	tif
FIELD	5603:36	5603:36	13	tif
LEAF_NODE	5603:36	5603:36	14	tif
LEAF_NODE	5603:39	5603:39	12	,
ARGUMENT	5603:40	5603:40	12	dp
FIELD	5603:40	5603:40	13	dp
LEAF_NODE	5603:40	5603:40	14	dp
LEAF_NODE	5603:42	5603:42	12	,
ARGUMENT	5603:43	5603:43	12	& data
UNARY_EXPR	5603:43	5603:44	13	& data
UNARY_OPERATOR	5603:43	5603:43	14	&
LEAF_NODE	5603:43	5603:43	15	&
FIELD	5603:44	5603:44	14	data
LEAF_NODE	5603:44	5603:44	15	data
LEAF_NODE	5603:48	5603:48	12	)
LEAF_NODE	5603:49	5603:49	8	;
SELECTION	5604:4	5605:4	7	
KEYWORD	5604:4	5604:4	8	if
LEAF_NODE	5604:4	5604:4	9	if
LEAF_NODE	5604:7	5604:7	8	(
CONDITION	5604:8	5604:8	8	err == TIFFReadDirEntryErrOk
EXPR	5604:8	5604:13	9	err == TIFFReadDirEntryErrOk
FIELD	5604:8	5604:8	10	err
LEAF_NODE	5604:8	5604:8	11	err
EQ_OPERATOR	5604:11	5604:11	10	==
LEAF_NODE	5604:11	5604:11	11	==
FIELD	5604:13	5604:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5604:13	5604:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5604:34	5604:34	8	)
STATEMENTS	5605:4	5612:4	8	
LEAF_NODE	5605:4	5605:4	9	{
STATEMENTS	5606:5	5610:5	9	
SIMPLE_DECL	5606:5	5606:10	10	int m ;
VAR_DECL	5606:5	5606:9	11	int m
TYPE	5606:5	5606:5	12	int
TYPE_NAME	5606:5	5606:5	13	int
LEAF_NODE	5606:5	5606:5	14	int
NAME	5606:9	5606:9	12	m
LEAF_NODE	5606:9	5606:9	13	m
LEAF_NODE	5606:10	5606:10	11	;
EXPR_STATEMENT	5607:5	5607:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5607:5	5607:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5607:5	5607:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5607:5	5607:5	13	m
FIELD	5607:5	5607:5	14	m
LEAF_NODE	5607:5	5607:5	15	m
ASSIGN_OP	5607:6	5607:6	13	=
LEAF_NODE	5607:6	5607:6	14	=
RVAL	5607:7	5607:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5607:7	5607:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5607:7	5607:7	15	TIFFSetField
LEAF_NODE	5607:7	5607:7	16	TIFFSetField
LEAF_NODE	5607:19	5607:19	15	(
ARGUMENT	5607:20	5607:20	15	tif
FIELD	5607:20	5607:20	16	tif
LEAF_NODE	5607:20	5607:20	17	tif
LEAF_NODE	5607:23	5607:23	15	,
ARGUMENT	5607:24	5607:24	15	dp -> tdir_tag
FIELD	5607:24	5607:28	16	dp -> tdir_tag
LEAF_NODE	5607:24	5607:24	17	dp
LEAF_NODE	5607:26	5607:26	17	->
LEAF_NODE	5607:28	5607:28	17	tdir_tag
LEAF_NODE	5607:36	5607:36	15	,
ARGUMENT	5607:37	5607:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5607:37	5607:37	16	(
TYPE_NAME	5607:38	5607:38	16	uint32
LEAF_NODE	5607:38	5607:38	17	uint32
LEAF_NODE	5607:44	5607:44	16	)
LEAF_NODE	5607:45	5607:45	16	(
FIELD	5607:46	5607:50	16	dp -> tdir_count
LEAF_NODE	5607:46	5607:46	17	dp
LEAF_NODE	5607:48	5607:48	17	->
LEAF_NODE	5607:50	5607:50	17	tdir_count
LEAF_NODE	5607:60	5607:60	16	)
LEAF_NODE	5607:61	5607:61	15	,
ARGUMENT	5607:62	5607:62	15	data
FIELD	5607:62	5607:62	16	data
LEAF_NODE	5607:62	5607:62	17	data
LEAF_NODE	5607:66	5607:66	15	)
LEAF_NODE	5607:67	5607:67	11	;
SELECTION	5608:5	5609:6	10	
KEYWORD	5608:5	5608:5	11	if
LEAF_NODE	5608:5	5608:5	12	if
LEAF_NODE	5608:8	5608:8	11	(
CONDITION	5608:9	5608:9	11	data != 0
EXPR	5608:9	5608:15	12	data != 0
FIELD	5608:9	5608:9	13	data
LEAF_NODE	5608:9	5608:9	14	data
EQ_OPERATOR	5608:13	5608:13	13	!=
LEAF_NODE	5608:13	5608:13	14	!=
FIELD	5608:15	5608:15	13	0
LEAF_NODE	5608:15	5608:15	14	0
LEAF_NODE	5608:16	5608:16	11	)
STATEMENTS	5609:6	5609:6	11	
EXPR_STATEMENT	5609:6	5609:21	12	_TIFFfree ( data ) ;
EXPR	5609:6	5609:6	13	_TIFFfree ( data )
FUNCTION_CALL	5609:6	5609:20	14	_TIFFfree ( data )
CALLEE	5609:6	5609:6	15	_TIFFfree
LEAF_NODE	5609:6	5609:6	16	_TIFFfree
LEAF_NODE	5609:15	5609:15	15	(
ARGUMENT	5609:16	5609:16	15	data
FIELD	5609:16	5609:16	16	data
LEAF_NODE	5609:16	5609:16	17	data
LEAF_NODE	5609:20	5609:20	15	)
LEAF_NODE	5609:21	5609:21	13	;
SELECTION	5610:5	5611:6	10	
KEYWORD	5610:5	5610:5	11	if
LEAF_NODE	5610:5	5610:5	12	if
LEAF_NODE	5610:8	5610:8	11	(
CONDITION	5610:9	5610:9	11	! m
EXPR	5610:9	5610:9	12	! m
UNARY_EXPR	5610:9	5610:10	13	! m
UNARY_OPERATOR	5610:9	5610:9	14	!
LEAF_NODE	5610:9	5610:9	15	!
FIELD	5610:10	5610:10	14	m
LEAF_NODE	5610:10	5610:10	15	m
LEAF_NODE	5610:11	5610:11	11	)
STATEMENTS	5611:6	5611:6	11	
JUMP_STATEMENT	5611:6	5611:15	12	return ( 0 ) ;
KEYWORD	5611:6	5611:6	13	return
LEAF_NODE	5611:6	5611:6	14	return
DESTINATION	5611:12	5611:12	13	( 0 )
EXPR	5611:12	5611:14	14	( 0 )
LEAF_NODE	5611:12	5611:12	15	(
FIELD	5611:13	5611:13	15	0
LEAF_NODE	5611:13	5611:13	16	0
LEAF_NODE	5611:14	5611:14	15	)
LEAF_NODE	5611:15	5611:15	13	;
LEAF_NODE	5612:4	5612:4	9	}
LEAF_NODE	5613:3	5613:3	6	}
JUMP_STATEMENT	5614:3	5614:8	6	break DESTINATION ;
KEYWORD	5614:3	5614:3	7	break
LEAF_NODE	5614:3	5614:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5614:8	5614:8	7	;
LABEL	5615:2	5615:27	6	case TIFF_SETGET_C32_IFD8 :
LEAF_NODE	5615:2	5615:2	7	case
LEAF_NODE	5615:7	5615:7	7	TIFF_SETGET_C32_IFD8
LEAF_NODE	5615:27	5615:27	7	:
LEAF_NODE	5616:3	5616:3	6	{
STATEMENTS	5617:4	5621:4	6	
SIMPLE_DECL	5617:4	5617:16	7	uint64 * data ;
VAR_DECL	5617:4	5617:12	8	uint64 * data
TYPE	5617:4	5617:10	9	uint64 *
TYPE_NAME	5617:4	5617:4	10	uint64
LEAF_NODE	5617:4	5617:4	11	uint64
POINTER	5617:10	5617:10	10	*
LEAF_NODE	5617:10	5617:10	11	*
NAME	5617:12	5617:12	9	data
LEAF_NODE	5617:12	5617:12	10	data
LEAF_NODE	5617:16	5617:16	8	;
EXPR_STATEMENT	5618:4	5618:48	7	assert ( fip -> field_readcount == TIFF_VARIABLE2 ) ;
EXPR	5618:4	5618:4	8	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
FUNCTION_CALL	5618:4	5618:47	9	assert ( fip -> field_readcount == TIFF_VARIABLE2 )
CALLEE	5618:4	5618:4	10	assert
LEAF_NODE	5618:4	5618:4	11	assert
LEAF_NODE	5618:10	5618:10	10	(
ARGUMENT	5618:11	5618:33	10	fip -> field_readcount == TIFF_VARIABLE2
FIELD	5618:11	5618:16	11	fip -> field_readcount
LEAF_NODE	5618:11	5618:11	12	fip
LEAF_NODE	5618:14	5618:14	12	->
LEAF_NODE	5618:16	5618:16	12	field_readcount
EQ_OPERATOR	5618:31	5618:31	11	==
LEAF_NODE	5618:31	5618:31	12	==
FIELD	5618:33	5618:33	11	TIFF_VARIABLE2
LEAF_NODE	5618:33	5618:33	12	TIFF_VARIABLE2
LEAF_NODE	5618:47	5618:47	10	)
LEAF_NODE	5618:48	5618:48	8	;
EXPR_STATEMENT	5619:4	5619:35	7	assert ( fip -> field_passcount == 1 ) ;
EXPR	5619:4	5619:4	8	assert ( fip -> field_passcount == 1 )
FUNCTION_CALL	5619:4	5619:34	9	assert ( fip -> field_passcount == 1 )
CALLEE	5619:4	5619:4	10	assert
LEAF_NODE	5619:4	5619:4	11	assert
LEAF_NODE	5619:10	5619:10	10	(
ARGUMENT	5619:11	5619:33	10	fip -> field_passcount == 1
FIELD	5619:11	5619:16	11	fip -> field_passcount
LEAF_NODE	5619:11	5619:11	12	fip
LEAF_NODE	5619:14	5619:14	12	->
LEAF_NODE	5619:16	5619:16	12	field_passcount
EQ_OPERATOR	5619:31	5619:31	11	==
LEAF_NODE	5619:31	5619:31	12	==
FIELD	5619:33	5619:33	11	1
LEAF_NODE	5619:33	5619:33	12	1
LEAF_NODE	5619:34	5619:34	10	)
LEAF_NODE	5619:35	5619:35	8	;
EXPR_STATEMENT	5620:4	5620:47	7	err = TIFFReadDirEntryIfd8Array ( tif , dp , & data ) ;
EXPR	5620:4	5620:4	8	err = TIFFReadDirEntryIfd8Array ( tif , dp , & data )
ASSIGN	5620:4	5620:8	9	err = TIFFReadDirEntryIfd8Array ( tif , dp , & data )
LVAL	5620:4	5620:4	10	err
FIELD	5620:4	5620:4	11	err
LEAF_NODE	5620:4	5620:4	12	err
ASSIGN_OP	5620:7	5620:7	10	=
LEAF_NODE	5620:7	5620:7	11	=
RVAL	5620:8	5620:8	10	TIFFReadDirEntryIfd8Array ( tif , dp , & data )
FUNCTION_CALL	5620:8	5620:46	11	TIFFReadDirEntryIfd8Array ( tif , dp , & data )
CALLEE	5620:8	5620:8	12	TIFFReadDirEntryIfd8Array
LEAF_NODE	5620:8	5620:8	13	TIFFReadDirEntryIfd8Array
LEAF_NODE	5620:33	5620:33	12	(
ARGUMENT	5620:34	5620:34	12	tif
FIELD	5620:34	5620:34	13	tif
LEAF_NODE	5620:34	5620:34	14	tif
LEAF_NODE	5620:37	5620:37	12	,
ARGUMENT	5620:38	5620:38	12	dp
FIELD	5620:38	5620:38	13	dp
LEAF_NODE	5620:38	5620:38	14	dp
LEAF_NODE	5620:40	5620:40	12	,
ARGUMENT	5620:41	5620:41	12	& data
UNARY_EXPR	5620:41	5620:42	13	& data
UNARY_OPERATOR	5620:41	5620:41	14	&
LEAF_NODE	5620:41	5620:41	15	&
FIELD	5620:42	5620:42	14	data
LEAF_NODE	5620:42	5620:42	15	data
LEAF_NODE	5620:46	5620:46	12	)
LEAF_NODE	5620:47	5620:47	8	;
SELECTION	5621:4	5622:4	7	
KEYWORD	5621:4	5621:4	8	if
LEAF_NODE	5621:4	5621:4	9	if
LEAF_NODE	5621:7	5621:7	8	(
CONDITION	5621:8	5621:8	8	err == TIFFReadDirEntryErrOk
EXPR	5621:8	5621:13	9	err == TIFFReadDirEntryErrOk
FIELD	5621:8	5621:8	10	err
LEAF_NODE	5621:8	5621:8	11	err
EQ_OPERATOR	5621:11	5621:11	10	==
LEAF_NODE	5621:11	5621:11	11	==
FIELD	5621:13	5621:13	10	TIFFReadDirEntryErrOk
LEAF_NODE	5621:13	5621:13	11	TIFFReadDirEntryErrOk
LEAF_NODE	5621:34	5621:34	8	)
STATEMENTS	5622:4	5629:4	8	
LEAF_NODE	5622:4	5622:4	9	{
STATEMENTS	5623:5	5627:5	9	
SIMPLE_DECL	5623:5	5623:10	10	int m ;
VAR_DECL	5623:5	5623:9	11	int m
TYPE	5623:5	5623:5	12	int
TYPE_NAME	5623:5	5623:5	13	int
LEAF_NODE	5623:5	5623:5	14	int
NAME	5623:9	5623:9	12	m
LEAF_NODE	5623:9	5623:9	13	m
LEAF_NODE	5623:10	5623:10	11	;
EXPR_STATEMENT	5624:5	5624:67	10	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data ) ;
EXPR	5624:5	5624:5	11	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
ASSIGN	5624:5	5624:7	12	m = TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
LVAL	5624:5	5624:5	13	m
FIELD	5624:5	5624:5	14	m
LEAF_NODE	5624:5	5624:5	15	m
ASSIGN_OP	5624:6	5624:6	13	=
LEAF_NODE	5624:6	5624:6	14	=
RVAL	5624:7	5624:7	13	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
FUNCTION_CALL	5624:7	5624:66	14	TIFFSetField ( tif , dp -> tdir_tag , ( uint32 ) ( dp -> tdir_count ) , data )
CALLEE	5624:7	5624:7	15	TIFFSetField
LEAF_NODE	5624:7	5624:7	16	TIFFSetField
LEAF_NODE	5624:19	5624:19	15	(
ARGUMENT	5624:20	5624:20	15	tif
FIELD	5624:20	5624:20	16	tif
LEAF_NODE	5624:20	5624:20	17	tif
LEAF_NODE	5624:23	5624:23	15	,
ARGUMENT	5624:24	5624:24	15	dp -> tdir_tag
FIELD	5624:24	5624:28	16	dp -> tdir_tag
LEAF_NODE	5624:24	5624:24	17	dp
LEAF_NODE	5624:26	5624:26	17	->
LEAF_NODE	5624:28	5624:28	17	tdir_tag
LEAF_NODE	5624:36	5624:36	15	,
ARGUMENT	5624:37	5624:60	15	( uint32 ) ( dp -> tdir_count )
LEAF_NODE	5624:37	5624:37	16	(
TYPE_NAME	5624:38	5624:38	16	uint32
LEAF_NODE	5624:38	5624:38	17	uint32
LEAF_NODE	5624:44	5624:44	16	)
LEAF_NODE	5624:45	5624:45	16	(
FIELD	5624:46	5624:50	16	dp -> tdir_count
LEAF_NODE	5624:46	5624:46	17	dp
LEAF_NODE	5624:48	5624:48	17	->
LEAF_NODE	5624:50	5624:50	17	tdir_count
LEAF_NODE	5624:60	5624:60	16	)
LEAF_NODE	5624:61	5624:61	15	,
ARGUMENT	5624:62	5624:62	15	data
FIELD	5624:62	5624:62	16	data
LEAF_NODE	5624:62	5624:62	17	data
LEAF_NODE	5624:66	5624:66	15	)
LEAF_NODE	5624:67	5624:67	11	;
SELECTION	5625:5	5626:6	10	
KEYWORD	5625:5	5625:5	11	if
LEAF_NODE	5625:5	5625:5	12	if
LEAF_NODE	5625:8	5625:8	11	(
CONDITION	5625:9	5625:9	11	data != 0
EXPR	5625:9	5625:15	12	data != 0
FIELD	5625:9	5625:9	13	data
LEAF_NODE	5625:9	5625:9	14	data
EQ_OPERATOR	5625:13	5625:13	13	!=
LEAF_NODE	5625:13	5625:13	14	!=
FIELD	5625:15	5625:15	13	0
LEAF_NODE	5625:15	5625:15	14	0
LEAF_NODE	5625:16	5625:16	11	)
STATEMENTS	5626:6	5626:6	11	
EXPR_STATEMENT	5626:6	5626:21	12	_TIFFfree ( data ) ;
EXPR	5626:6	5626:6	13	_TIFFfree ( data )
FUNCTION_CALL	5626:6	5626:20	14	_TIFFfree ( data )
CALLEE	5626:6	5626:6	15	_TIFFfree
LEAF_NODE	5626:6	5626:6	16	_TIFFfree
LEAF_NODE	5626:15	5626:15	15	(
ARGUMENT	5626:16	5626:16	15	data
FIELD	5626:16	5626:16	16	data
LEAF_NODE	5626:16	5626:16	17	data
LEAF_NODE	5626:20	5626:20	15	)
LEAF_NODE	5626:21	5626:21	13	;
SELECTION	5627:5	5628:6	10	
KEYWORD	5627:5	5627:5	11	if
LEAF_NODE	5627:5	5627:5	12	if
LEAF_NODE	5627:8	5627:8	11	(
CONDITION	5627:9	5627:9	11	! m
EXPR	5627:9	5627:9	12	! m
UNARY_EXPR	5627:9	5627:10	13	! m
UNARY_OPERATOR	5627:9	5627:9	14	!
LEAF_NODE	5627:9	5627:9	15	!
FIELD	5627:10	5627:10	14	m
LEAF_NODE	5627:10	5627:10	15	m
LEAF_NODE	5627:11	5627:11	11	)
STATEMENTS	5628:6	5628:6	11	
JUMP_STATEMENT	5628:6	5628:15	12	return ( 0 ) ;
KEYWORD	5628:6	5628:6	13	return
LEAF_NODE	5628:6	5628:6	14	return
DESTINATION	5628:12	5628:12	13	( 0 )
EXPR	5628:12	5628:14	14	( 0 )
LEAF_NODE	5628:12	5628:12	15	(
FIELD	5628:13	5628:13	15	0
LEAF_NODE	5628:13	5628:13	16	0
LEAF_NODE	5628:14	5628:14	15	)
LEAF_NODE	5628:15	5628:15	13	;
LEAF_NODE	5629:4	5629:4	9	}
LEAF_NODE	5630:3	5630:3	6	}
JUMP_STATEMENT	5631:3	5631:8	6	break DESTINATION ;
KEYWORD	5631:3	5631:3	7	break
LEAF_NODE	5631:3	5631:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5631:8	5631:8	7	;
LABEL	5632:2	5632:9	6	default :
LEAF_NODE	5632:2	5632:2	7	default
LEAF_NODE	5632:9	5632:9	7	:
EXPR_STATEMENT	5633:3	5633:12	6	assert ( 0 ) ;
EXPR	5633:3	5633:3	7	assert ( 0 )
FUNCTION_CALL	5633:3	5633:11	8	assert ( 0 )
CALLEE	5633:3	5633:3	9	assert
LEAF_NODE	5633:3	5633:3	10	assert
LEAF_NODE	5633:9	5633:9	9	(
ARGUMENT	5633:10	5633:10	9	0
FIELD	5633:10	5633:10	10	0
LEAF_NODE	5633:10	5633:10	11	0
LEAF_NODE	5633:11	5633:11	9	)
LEAF_NODE	5633:12	5633:12	7	;
JUMP_STATEMENT	5634:3	5634:8	6	break DESTINATION ;
KEYWORD	5634:3	5634:3	7	break
LEAF_NODE	5634:3	5634:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5634:8	5634:8	7	;
LEAF_NODE	5635:1	5635:1	5	}
SELECTION	5636:1	5637:1	3	
KEYWORD	5636:1	5636:1	4	if
LEAF_NODE	5636:1	5636:1	5	if
LEAF_NODE	5636:4	5636:4	4	(
CONDITION	5636:5	5636:5	4	err != TIFFReadDirEntryErrOk
EXPR	5636:5	5636:10	5	err != TIFFReadDirEntryErrOk
FIELD	5636:5	5636:5	6	err
LEAF_NODE	5636:5	5636:5	7	err
EQ_OPERATOR	5636:8	5636:8	6	!=
LEAF_NODE	5636:8	5636:8	7	!=
FIELD	5636:10	5636:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	5636:10	5636:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	5636:31	5636:31	4	)
STATEMENTS	5637:1	5640:1	4	
LEAF_NODE	5637:1	5637:1	5	{
STATEMENTS	5638:2	5639:2	5	
EXPR_STATEMENT	5638:2	5638:67	6	TIFFReadDirEntryOutputErr ( tif , err , module , fip -> field_name , recover ) ;
EXPR	5638:2	5638:2	7	TIFFReadDirEntryOutputErr ( tif , err , module , fip -> field_name , recover )
FUNCTION_CALL	5638:2	5638:66	8	TIFFReadDirEntryOutputErr ( tif , err , module , fip -> field_name , recover )
CALLEE	5638:2	5638:2	9	TIFFReadDirEntryOutputErr
LEAF_NODE	5638:2	5638:2	10	TIFFReadDirEntryOutputErr
LEAF_NODE	5638:27	5638:27	9	(
ARGUMENT	5638:28	5638:28	9	tif
FIELD	5638:28	5638:28	10	tif
LEAF_NODE	5638:28	5638:28	11	tif
LEAF_NODE	5638:31	5638:31	9	,
ARGUMENT	5638:32	5638:32	9	err
FIELD	5638:32	5638:32	10	err
LEAF_NODE	5638:32	5638:32	11	err
LEAF_NODE	5638:35	5638:35	9	,
ARGUMENT	5638:36	5638:36	9	module
FIELD	5638:36	5638:36	10	module
LEAF_NODE	5638:36	5638:36	11	module
LEAF_NODE	5638:42	5638:42	9	,
ARGUMENT	5638:43	5638:43	9	fip -> field_name
FIELD	5638:43	5638:48	10	fip -> field_name
LEAF_NODE	5638:43	5638:43	11	fip
LEAF_NODE	5638:46	5638:46	11	->
LEAF_NODE	5638:48	5638:48	11	field_name
LEAF_NODE	5638:58	5638:58	9	,
ARGUMENT	5638:59	5638:59	9	recover
FIELD	5638:59	5638:59	10	recover
LEAF_NODE	5638:59	5638:59	11	recover
LEAF_NODE	5638:66	5638:66	9	)
LEAF_NODE	5638:67	5638:67	7	;
JUMP_STATEMENT	5639:2	5639:11	6	return ( 0 ) ;
KEYWORD	5639:2	5639:2	7	return
LEAF_NODE	5639:2	5639:2	8	return
DESTINATION	5639:8	5639:8	7	( 0 )
EXPR	5639:8	5639:10	8	( 0 )
LEAF_NODE	5639:8	5639:8	9	(
FIELD	5639:9	5639:9	9	0
LEAF_NODE	5639:9	5639:9	10	0
LEAF_NODE	5639:10	5639:10	9	)
LEAF_NODE	5639:11	5639:11	7	;
LEAF_NODE	5640:1	5640:1	5	}
JUMP_STATEMENT	5641:1	5641:10	3	return ( 1 ) ;
KEYWORD	5641:1	5641:1	4	return
LEAF_NODE	5641:1	5641:1	5	return
DESTINATION	5641:7	5641:7	4	( 1 )
EXPR	5641:7	5641:9	5	( 1 )
LEAF_NODE	5641:7	5641:7	6	(
FIELD	5641:8	5641:8	6	1
LEAF_NODE	5641:8	5641:8	7	1
LEAF_NODE	5641:9	5641:9	6	)
LEAF_NODE	5641:10	5641:10	4	;
LEAF_NODE	5642:0	5642:0	2	}
FUNCTION_DEF	5648:0	5692:0	1	
RETURN_TYPE	5648:0	5648:7	2	static int
LEAF_NODE	5648:0	5648:0	3	static
TYPE_NAME	5648:7	5648:7	3	int
LEAF_NODE	5648:7	5648:7	4	int
FUNCTION_NAME	5649:0	5649:0	2	TIFFFetchStripThing
LEAF_NODE	5649:0	5649:0	3	TIFFFetchStripThing
PARAMETER_LIST	5649:19	5649:78	2	( TIFF * tif , TIFFDirEntry * dir , uint32 nstrips , uint64 * * lpp )
LEAF_NODE	5649:19	5649:19	3	(
PARAMETER_DECL	5649:20	5649:26	3	TIFF * tif
TYPE	5649:20	5649:24	4	TIFF *
TYPE_NAME	5649:20	5649:20	5	TIFF
LEAF_NODE	5649:20	5649:20	6	TIFF
POINTER	5649:24	5649:24	5	*
LEAF_NODE	5649:24	5649:24	6	*
NAME	5649:26	5649:26	4	tif
LEAF_NODE	5649:26	5649:26	5	tif
LEAF_NODE	5649:29	5649:29	3	,
PARAMETER_DECL	5649:31	5649:45	3	TIFFDirEntry * dir
TYPE	5649:31	5649:43	4	TIFFDirEntry *
TYPE_NAME	5649:31	5649:31	5	TIFFDirEntry
LEAF_NODE	5649:31	5649:31	6	TIFFDirEntry
POINTER	5649:43	5649:43	5	*
LEAF_NODE	5649:43	5649:43	6	*
NAME	5649:45	5649:45	4	dir
LEAF_NODE	5649:45	5649:45	5	dir
LEAF_NODE	5649:48	5649:48	3	,
PARAMETER_DECL	5649:50	5649:57	3	uint32 nstrips
TYPE	5649:50	5649:50	4	uint32
TYPE_NAME	5649:50	5649:50	5	uint32
LEAF_NODE	5649:50	5649:50	6	uint32
NAME	5649:57	5649:57	4	nstrips
LEAF_NODE	5649:57	5649:57	5	nstrips
LEAF_NODE	5649:64	5649:64	3	,
PARAMETER_DECL	5649:66	5649:75	3	uint64 * * lpp
TYPE	5649:66	5649:72	4	uint64 * *
TYPE_NAME	5649:66	5649:66	5	uint64
LEAF_NODE	5649:66	5649:66	6	uint64
POINTER	5649:72	5649:73	5	* *
LEAF_NODE	5649:72	5649:72	6	*
LEAF_NODE	5649:73	5649:73	6	*
NAME	5649:75	5649:75	4	lpp
LEAF_NODE	5649:75	5649:75	5	lpp
LEAF_NODE	5649:78	5649:78	3	)
LEAF_NODE	5650:0	5650:0	2	{
STATEMENTS	5651:1	5691:1	2	
LEAF_NODE	5651:1	5651:1	3	static
SIMPLE_DECL	5651:8	5651:51	3	const char [ ] module ; module = "TIFFFetchStripThing" ;
VAR_DECL	5651:8	5651:19	4	const char [ ] module ; module = "TIFFFetchStripThing"
TYPE	5651:8	5651:25	5	const char [ ]
TYPE_NAME	5651:8	5651:14	6	const char
LEAF_NODE	5651:8	5651:8	7	const
LEAF_NODE	5651:14	5651:14	7	char
TYPE_SUFFIX	5651:25	5651:26	6	[ ]
LEAF_NODE	5651:25	5651:25	7	[
LEAF_NODE	5651:26	5651:26	7	]
NAME	5651:19	5651:19	5	module
LEAF_NODE	5651:19	5651:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	5651:19	5651:19	5	module = "TIFFFetchStripThing"
ASSIGN	5651:19	5651:30	6	module = "TIFFFetchStripThing"
LVAL	5651:19	5651:19	7	module
NAME	5651:19	5651:19	8	module
LEAF_NODE	5651:19	5651:19	9	module
ASSIGN_OP	5651:28	5651:28	7	=
LEAF_NODE	5651:28	5651:28	8	=
RVAL	5651:30	5651:30	7	"TIFFFetchStripThing"
FIELD	5651:30	5651:30	8	"TIFFFetchStripThing"
LEAF_NODE	5651:30	5651:30	9	"TIFFFetchStripThing"
LEAF_NODE	5651:51	5651:51	4	;
SIMPLE_DECL	5652:1	5652:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	5652:1	5652:26	4	enum TIFFReadDirEntryErr err
TYPE	5652:1	5652:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	5652:1	5652:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	5652:1	5652:1	7	enum
LEAF_NODE	5652:6	5652:6	7	TIFFReadDirEntryErr
NAME	5652:26	5652:26	5	err
LEAF_NODE	5652:26	5652:26	6	err
LEAF_NODE	5652:29	5652:29	4	;
SIMPLE_DECL	5653:1	5653:13	3	uint64 * data ;
VAR_DECL	5653:1	5653:9	4	uint64 * data
TYPE	5653:1	5653:7	5	uint64 *
TYPE_NAME	5653:1	5653:1	6	uint64
LEAF_NODE	5653:1	5653:1	7	uint64
POINTER	5653:7	5653:7	6	*
LEAF_NODE	5653:7	5653:7	7	*
NAME	5653:9	5653:9	5	data
LEAF_NODE	5653:9	5653:9	6	data
LEAF_NODE	5653:13	5653:13	4	;
EXPR_STATEMENT	5654:1	5654:63	3	err = TIFFReadDirEntryLong8ArrayWithLimit ( tif , dir , & data , nstrips ) ;
EXPR	5654:1	5654:1	4	err = TIFFReadDirEntryLong8ArrayWithLimit ( tif , dir , & data , nstrips )
ASSIGN	5654:1	5654:5	5	err = TIFFReadDirEntryLong8ArrayWithLimit ( tif , dir , & data , nstrips )
LVAL	5654:1	5654:1	6	err
FIELD	5654:1	5654:1	7	err
LEAF_NODE	5654:1	5654:1	8	err
ASSIGN_OP	5654:4	5654:4	6	=
LEAF_NODE	5654:4	5654:4	7	=
RVAL	5654:5	5654:5	6	TIFFReadDirEntryLong8ArrayWithLimit ( tif , dir , & data , nstrips )
FUNCTION_CALL	5654:5	5654:62	7	TIFFReadDirEntryLong8ArrayWithLimit ( tif , dir , & data , nstrips )
CALLEE	5654:5	5654:5	8	TIFFReadDirEntryLong8ArrayWithLimit
LEAF_NODE	5654:5	5654:5	9	TIFFReadDirEntryLong8ArrayWithLimit
LEAF_NODE	5654:40	5654:40	8	(
ARGUMENT	5654:41	5654:41	8	tif
FIELD	5654:41	5654:41	9	tif
LEAF_NODE	5654:41	5654:41	10	tif
LEAF_NODE	5654:44	5654:44	8	,
ARGUMENT	5654:45	5654:45	8	dir
FIELD	5654:45	5654:45	9	dir
LEAF_NODE	5654:45	5654:45	10	dir
LEAF_NODE	5654:48	5654:48	8	,
ARGUMENT	5654:49	5654:49	8	& data
UNARY_EXPR	5654:49	5654:50	9	& data
UNARY_OPERATOR	5654:49	5654:49	10	&
LEAF_NODE	5654:49	5654:49	11	&
FIELD	5654:50	5654:50	10	data
LEAF_NODE	5654:50	5654:50	11	data
LEAF_NODE	5654:54	5654:54	8	,
ARGUMENT	5654:55	5654:55	8	nstrips
FIELD	5654:55	5654:55	9	nstrips
LEAF_NODE	5654:55	5654:55	10	nstrips
LEAF_NODE	5654:62	5654:62	8	)
LEAF_NODE	5654:63	5654:63	4	;
SELECTION	5655:1	5656:1	3	
KEYWORD	5655:1	5655:1	4	if
LEAF_NODE	5655:1	5655:1	5	if
LEAF_NODE	5655:4	5655:4	4	(
CONDITION	5655:5	5655:5	4	err != TIFFReadDirEntryErrOk
EXPR	5655:5	5655:10	5	err != TIFFReadDirEntryErrOk
FIELD	5655:5	5655:5	6	err
LEAF_NODE	5655:5	5655:5	7	err
EQ_OPERATOR	5655:8	5655:8	6	!=
LEAF_NODE	5655:8	5655:8	7	!=
FIELD	5655:10	5655:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	5655:10	5655:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	5655:31	5655:31	4	)
STATEMENTS	5656:1	5660:1	4	
LEAF_NODE	5656:1	5656:1	5	{
STATEMENTS	5657:2	5659:2	5	
SIMPLE_DECL	5657:2	5657:60	6	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag ) ;
VAR_DECL	5657:2	5657:19	7	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
TYPE	5657:2	5657:17	8	const TIFFField *
TYPE_NAME	5657:2	5657:8	9	const TIFFField
LEAF_NODE	5657:2	5657:2	10	const
LEAF_NODE	5657:8	5657:8	10	TIFFField
POINTER	5657:17	5657:17	9	*
LEAF_NODE	5657:17	5657:17	10	*
NAME	5657:19	5657:19	8	fip
LEAF_NODE	5657:19	5657:19	9	fip
LEAF_NODE	0:0	0:0	8	;
INIT	5657:19	5657:19	8	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
ASSIGN	5657:19	5657:25	9	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
LVAL	5657:19	5657:19	10	fip
NAME	5657:19	5657:19	11	fip
LEAF_NODE	5657:19	5657:19	12	fip
ASSIGN_OP	5657:23	5657:23	10	=
LEAF_NODE	5657:23	5657:23	11	=
RVAL	5657:25	5657:25	10	TIFFFieldWithTag ( tif , dir -> tdir_tag )
FUNCTION_CALL	5657:25	5657:59	11	TIFFFieldWithTag ( tif , dir -> tdir_tag )
CALLEE	5657:25	5657:25	12	TIFFFieldWithTag
LEAF_NODE	5657:25	5657:25	13	TIFFFieldWithTag
LEAF_NODE	5657:41	5657:41	12	(
ARGUMENT	5657:42	5657:42	12	tif
FIELD	5657:42	5657:42	13	tif
LEAF_NODE	5657:42	5657:42	14	tif
LEAF_NODE	5657:45	5657:45	12	,
ARGUMENT	5657:46	5657:46	12	dir -> tdir_tag
FIELD	5657:46	5657:51	13	dir -> tdir_tag
LEAF_NODE	5657:46	5657:46	14	dir
LEAF_NODE	5657:49	5657:49	14	->
LEAF_NODE	5657:51	5657:51	14	tdir_tag
LEAF_NODE	5657:59	5657:59	12	)
LEAF_NODE	5657:60	5657:60	7	;
EXPR_STATEMENT	5658:2	5658:87	6	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 ) ;
EXPR	5658:2	5658:2	7	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 )
FUNCTION_CALL	5658:2	5658:86	8	TIFFReadDirEntryOutputErr ( tif , err , module , fip ? fip -> field_name : "unknown tagname" , 0 )
CALLEE	5658:2	5658:2	9	TIFFReadDirEntryOutputErr
LEAF_NODE	5658:2	5658:2	10	TIFFReadDirEntryOutputErr
LEAF_NODE	5658:27	5658:27	9	(
ARGUMENT	5658:28	5658:28	9	tif
FIELD	5658:28	5658:28	10	tif
LEAF_NODE	5658:28	5658:28	11	tif
LEAF_NODE	5658:31	5658:31	9	,
ARGUMENT	5658:32	5658:32	9	err
FIELD	5658:32	5658:32	10	err
LEAF_NODE	5658:32	5658:32	11	err
LEAF_NODE	5658:35	5658:35	9	,
ARGUMENT	5658:36	5658:36	9	module
FIELD	5658:36	5658:36	10	module
LEAF_NODE	5658:36	5658:36	11	module
LEAF_NODE	5658:42	5658:42	9	,
ARGUMENT	5658:43	5658:43	9	fip ? fip -> field_name : "unknown tagname"
COND_EXPR	5658:43	5658:67	10	fip ? fip -> field_name : "unknown tagname"
CONDITION	5658:43	5658:43	11	fip
FIELD	5658:43	5658:43	12	fip
LEAF_NODE	5658:43	5658:43	13	fip
LEAF_NODE	5658:47	5658:47	11	?
EXPR	5658:49	5658:49	11	fip -> field_name
FIELD	5658:49	5658:54	12	fip -> field_name
LEAF_NODE	5658:49	5658:49	13	fip
LEAF_NODE	5658:52	5658:52	13	->
LEAF_NODE	5658:54	5658:54	13	field_name
LEAF_NODE	5658:65	5658:65	11	:
FIELD	5658:67	5658:67	11	"unknown tagname"
LEAF_NODE	5658:67	5658:67	12	"unknown tagname"
LEAF_NODE	5658:84	5658:84	9	,
ARGUMENT	5658:85	5658:85	9	0
FIELD	5658:85	5658:85	10	0
LEAF_NODE	5658:85	5658:85	11	0
LEAF_NODE	5658:86	5658:86	9	)
LEAF_NODE	5658:87	5658:87	7	;
JUMP_STATEMENT	5659:2	5659:11	6	return ( 0 ) ;
KEYWORD	5659:2	5659:2	7	return
LEAF_NODE	5659:2	5659:2	8	return
DESTINATION	5659:8	5659:8	7	( 0 )
EXPR	5659:8	5659:10	8	( 0 )
LEAF_NODE	5659:8	5659:8	9	(
FIELD	5659:9	5659:9	9	0
LEAF_NODE	5659:9	5659:9	10	0
LEAF_NODE	5659:10	5659:10	9	)
LEAF_NODE	5659:11	5659:11	7	;
LEAF_NODE	5660:1	5660:1	5	}
SELECTION	5661:1	5662:1	3	
KEYWORD	5661:1	5661:1	4	if
LEAF_NODE	5661:1	5661:1	5	if
LEAF_NODE	5661:4	5661:4	4	(
CONDITION	5661:5	5661:5	4	dir -> tdir_count < ( uint64 ) nstrips
EXPR	5661:5	5661:29	5	dir -> tdir_count < ( uint64 ) nstrips
FIELD	5661:5	5661:10	6	dir -> tdir_count
LEAF_NODE	5661:5	5661:5	7	dir
LEAF_NODE	5661:8	5661:8	7	->
LEAF_NODE	5661:10	5661:10	7	tdir_count
REL_OPERATOR	5661:20	5661:20	6	<
LEAF_NODE	5661:20	5661:20	7	<
LEAF_NODE	5661:21	5661:21	6	(
TYPE_NAME	5661:22	5661:22	6	uint64
LEAF_NODE	5661:22	5661:22	7	uint64
LEAF_NODE	5661:28	5661:28	6	)
FIELD	5661:29	5661:29	6	nstrips
LEAF_NODE	5661:29	5661:29	7	nstrips
LEAF_NODE	5661:36	5661:36	4	)
STATEMENTS	5662:1	5689:1	4	
LEAF_NODE	5662:1	5662:1	5	{
STATEMENTS	5663:2	5688:2	5	
SIMPLE_DECL	5663:2	5663:21	6	uint64 * resizeddata ;
VAR_DECL	5663:2	5663:10	7	uint64 * resizeddata
TYPE	5663:2	5663:8	8	uint64 *
TYPE_NAME	5663:2	5663:2	9	uint64
LEAF_NODE	5663:2	5663:2	10	uint64
POINTER	5663:8	5663:8	9	*
LEAF_NODE	5663:8	5663:8	10	*
NAME	5663:10	5663:10	8	resizeddata
LEAF_NODE	5663:10	5663:10	9	resizeddata
LEAF_NODE	5663:21	5663:21	7	;
SIMPLE_DECL	5664:2	5664:60	6	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag ) ;
VAR_DECL	5664:2	5664:19	7	const TIFFField * fip ; fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
TYPE	5664:2	5664:17	8	const TIFFField *
TYPE_NAME	5664:2	5664:8	9	const TIFFField
LEAF_NODE	5664:2	5664:2	10	const
LEAF_NODE	5664:8	5664:8	10	TIFFField
POINTER	5664:17	5664:17	9	*
LEAF_NODE	5664:17	5664:17	10	*
NAME	5664:19	5664:19	8	fip
LEAF_NODE	5664:19	5664:19	9	fip
LEAF_NODE	0:0	0:0	8	;
INIT	5664:19	5664:19	8	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
ASSIGN	5664:19	5664:25	9	fip = TIFFFieldWithTag ( tif , dir -> tdir_tag )
LVAL	5664:19	5664:19	10	fip
NAME	5664:19	5664:19	11	fip
LEAF_NODE	5664:19	5664:19	12	fip
ASSIGN_OP	5664:23	5664:23	10	=
LEAF_NODE	5664:23	5664:23	11	=
RVAL	5664:25	5664:25	10	TIFFFieldWithTag ( tif , dir -> tdir_tag )
FUNCTION_CALL	5664:25	5664:59	11	TIFFFieldWithTag ( tif , dir -> tdir_tag )
CALLEE	5664:25	5664:25	12	TIFFFieldWithTag
LEAF_NODE	5664:25	5664:25	13	TIFFFieldWithTag
LEAF_NODE	5664:41	5664:41	12	(
ARGUMENT	5664:42	5664:42	12	tif
FIELD	5664:42	5664:42	13	tif
LEAF_NODE	5664:42	5664:42	14	tif
LEAF_NODE	5664:45	5664:45	12	,
ARGUMENT	5664:46	5664:46	12	dir -> tdir_tag
FIELD	5664:46	5664:51	13	dir -> tdir_tag
LEAF_NODE	5664:46	5664:46	14	dir
LEAF_NODE	5664:49	5664:49	14	->
LEAF_NODE	5664:51	5664:51	14	tdir_tag
LEAF_NODE	5664:59	5664:59	12	)
LEAF_NODE	5664:60	5664:60	7	;
SIMPLE_DECL	5665:2	5665:70	6	const char * pszMax ; pszMax = getenv ( "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT" ) ;
VAR_DECL	5665:2	5665:14	7	const char * pszMax ; pszMax = getenv ( "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT" )
TYPE	5665:2	5665:12	8	const char *
TYPE_NAME	5665:2	5665:8	9	const char
LEAF_NODE	5665:2	5665:2	10	const
LEAF_NODE	5665:8	5665:8	10	char
POINTER	5665:12	5665:12	9	*
LEAF_NODE	5665:12	5665:12	10	*
NAME	5665:14	5665:14	8	pszMax
LEAF_NODE	5665:14	5665:14	9	pszMax
LEAF_NODE	0:0	0:0	8	;
INIT	5665:14	5665:14	8	pszMax = getenv ( "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT" )
ASSIGN	5665:14	5665:23	9	pszMax = getenv ( "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT" )
LVAL	5665:14	5665:14	10	pszMax
NAME	5665:14	5665:14	11	pszMax
LEAF_NODE	5665:14	5665:14	12	pszMax
ASSIGN_OP	5665:21	5665:21	10	=
LEAF_NODE	5665:21	5665:21	11	=
RVAL	5665:23	5665:23	10	getenv ( "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT" )
FUNCTION_CALL	5665:23	5665:69	11	getenv ( "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT" )
CALLEE	5665:23	5665:23	12	getenv
LEAF_NODE	5665:23	5665:23	13	getenv
LEAF_NODE	5665:29	5665:29	12	(
ARGUMENT	5665:30	5665:30	12	"LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT"
FIELD	5665:30	5665:30	13	"LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT"
LEAF_NODE	5665:30	5665:30	14	"LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT"
LEAF_NODE	5665:69	5665:69	12	)
LEAF_NODE	5665:70	5665:70	7	;
SIMPLE_DECL	5666:2	5666:30	6	uint32 max_nstrips ; max_nstrips = 1000000 ;
VAR_DECL	5666:2	5666:9	7	uint32 max_nstrips ; max_nstrips = 1000000
TYPE	5666:2	5666:2	8	uint32
TYPE_NAME	5666:2	5666:2	9	uint32
LEAF_NODE	5666:2	5666:2	10	uint32
NAME	5666:9	5666:9	8	max_nstrips
LEAF_NODE	5666:9	5666:9	9	max_nstrips
LEAF_NODE	0:0	0:0	8	;
INIT	5666:9	5666:9	8	max_nstrips = 1000000
ASSIGN	5666:9	5666:23	9	max_nstrips = 1000000
LVAL	5666:9	5666:9	10	max_nstrips
NAME	5666:9	5666:9	11	max_nstrips
LEAF_NODE	5666:9	5666:9	12	max_nstrips
ASSIGN_OP	5666:21	5666:21	10	=
LEAF_NODE	5666:21	5666:21	11	=
RVAL	5666:23	5666:23	10	1000000
FIELD	5666:23	5666:23	11	1000000
LEAF_NODE	5666:23	5666:23	12	1000000
LEAF_NODE	5666:30	5666:30	7	;
SELECTION	5667:2	5668:3	6	
KEYWORD	5667:2	5667:2	7	if
LEAF_NODE	5667:2	5667:2	8	if
LEAF_NODE	5667:4	5667:4	7	(
CONDITION	5667:6	5667:6	7	pszMax
EXPR	5667:6	5667:6	8	pszMax
FIELD	5667:6	5667:6	9	pszMax
LEAF_NODE	5667:6	5667:6	10	pszMax
LEAF_NODE	5667:13	5667:13	7	)
STATEMENTS	5668:3	5668:3	7	
EXPR_STATEMENT	5668:3	5668:38	8	max_nstrips = ( uint32 ) atoi ( pszMax ) ;
EXPR	5668:3	5668:3	9	max_nstrips = ( uint32 ) atoi ( pszMax )
ASSIGN	5668:3	5668:17	10	max_nstrips = ( uint32 ) atoi ( pszMax )
LVAL	5668:3	5668:3	11	max_nstrips
FIELD	5668:3	5668:3	12	max_nstrips
LEAF_NODE	5668:3	5668:3	13	max_nstrips
ASSIGN_OP	5668:15	5668:15	11	=
LEAF_NODE	5668:15	5668:15	12	=
RVAL	5668:17	5668:26	11	( uint32 ) atoi ( pszMax )
LEAF_NODE	5668:17	5668:17	12	(
TYPE_NAME	5668:18	5668:18	12	uint32
LEAF_NODE	5668:18	5668:18	13	uint32
LEAF_NODE	5668:24	5668:24	12	)
FUNCTION_CALL	5668:26	5668:37	12	atoi ( pszMax )
CALLEE	5668:26	5668:26	13	atoi
LEAF_NODE	5668:26	5668:26	14	atoi
LEAF_NODE	5668:30	5668:30	13	(
ARGUMENT	5668:31	5668:31	13	pszMax
FIELD	5668:31	5668:31	14	pszMax
LEAF_NODE	5668:31	5668:31	15	pszMax
LEAF_NODE	5668:37	5668:37	13	)
LEAF_NODE	5668:38	5668:38	9	;
EXPR_STATEMENT	5669:2	5672:42	6	TIFFReadDirEntryOutputErr ( tif , TIFFReadDirEntryErrCount , module , fip ? fip -> field_name : "unknown tagname" , ( nstrips <= max_nstrips ) ) ;
EXPR	5669:2	5669:2	7	TIFFReadDirEntryOutputErr ( tif , TIFFReadDirEntryErrCount , module , fip ? fip -> field_name : "unknown tagname" , ( nstrips <= max_nstrips ) )
FUNCTION_CALL	5669:2	5672:41	8	TIFFReadDirEntryOutputErr ( tif , TIFFReadDirEntryErrCount , module , fip ? fip -> field_name : "unknown tagname" , ( nstrips <= max_nstrips ) )
CALLEE	5669:2	5669:2	9	TIFFReadDirEntryOutputErr
LEAF_NODE	5669:2	5669:2	10	TIFFReadDirEntryOutputErr
LEAF_NODE	5669:27	5669:27	9	(
ARGUMENT	5669:28	5669:28	9	tif
FIELD	5669:28	5669:28	10	tif
LEAF_NODE	5669:28	5669:28	11	tif
LEAF_NODE	5669:31	5669:31	9	,
ARGUMENT	5669:32	5669:32	9	TIFFReadDirEntryErrCount
FIELD	5669:32	5669:32	10	TIFFReadDirEntryErrCount
LEAF_NODE	5669:32	5669:32	11	TIFFReadDirEntryErrCount
LEAF_NODE	5669:56	5669:56	9	,
ARGUMENT	5670:14	5670:14	9	module
FIELD	5670:14	5670:14	10	module
LEAF_NODE	5670:14	5670:14	11	module
LEAF_NODE	5670:20	5670:20	9	,
ARGUMENT	5671:14	5671:14	9	fip ? fip -> field_name : "unknown tagname"
COND_EXPR	5671:14	5671:38	10	fip ? fip -> field_name : "unknown tagname"
CONDITION	5671:14	5671:14	11	fip
FIELD	5671:14	5671:14	12	fip
LEAF_NODE	5671:14	5671:14	13	fip
LEAF_NODE	5671:18	5671:18	11	?
EXPR	5671:20	5671:20	11	fip -> field_name
FIELD	5671:20	5671:25	12	fip -> field_name
LEAF_NODE	5671:20	5671:20	13	fip
LEAF_NODE	5671:23	5671:23	13	->
LEAF_NODE	5671:25	5671:25	13	field_name
LEAF_NODE	5671:36	5671:36	11	:
FIELD	5671:38	5671:38	11	"unknown tagname"
LEAF_NODE	5671:38	5671:38	12	"unknown tagname"
LEAF_NODE	5671:55	5671:55	9	,
ARGUMENT	5672:14	5672:39	9	( nstrips <= max_nstrips )
LEAF_NODE	5672:14	5672:14	10	(
FIELD	5672:16	5672:16	10	nstrips
LEAF_NODE	5672:16	5672:16	11	nstrips
REL_OPERATOR	5672:24	5672:24	10	<=
LEAF_NODE	5672:24	5672:24	11	<=
FIELD	5672:27	5672:27	10	max_nstrips
LEAF_NODE	5672:27	5672:27	11	max_nstrips
LEAF_NODE	5672:39	5672:39	10	)
LEAF_NODE	5672:41	5672:41	9	)
LEAF_NODE	5672:42	5672:42	7	;
SELECTION	5674:2	5675:2	6	
KEYWORD	5674:2	5674:2	7	if
LEAF_NODE	5674:2	5674:2	8	if
LEAF_NODE	5674:4	5674:4	7	(
CONDITION	5674:6	5674:6	7	nstrips > max_nstrips
EXPR	5674:6	5674:16	8	nstrips > max_nstrips
FIELD	5674:6	5674:6	9	nstrips
LEAF_NODE	5674:6	5674:6	10	nstrips
REL_OPERATOR	5674:14	5674:14	9	>
LEAF_NODE	5674:14	5674:14	10	>
FIELD	5674:16	5674:16	9	max_nstrips
LEAF_NODE	5674:16	5674:16	10	max_nstrips
LEAF_NODE	5674:28	5674:28	7	)
STATEMENTS	5675:2	5678:2	7	
LEAF_NODE	5675:2	5675:2	8	{
STATEMENTS	5676:3	5677:3	8	
EXPR_STATEMENT	5676:3	5676:18	9	_TIFFfree ( data ) ;
EXPR	5676:3	5676:3	10	_TIFFfree ( data )
FUNCTION_CALL	5676:3	5676:17	11	_TIFFfree ( data )
CALLEE	5676:3	5676:3	12	_TIFFfree
LEAF_NODE	5676:3	5676:3	13	_TIFFfree
LEAF_NODE	5676:12	5676:12	12	(
ARGUMENT	5676:13	5676:13	12	data
FIELD	5676:13	5676:13	13	data
LEAF_NODE	5676:13	5676:13	14	data
LEAF_NODE	5676:17	5676:17	12	)
LEAF_NODE	5676:18	5676:18	10	;
JUMP_STATEMENT	5677:3	5677:12	9	return ( 0 ) ;
KEYWORD	5677:3	5677:3	10	return
LEAF_NODE	5677:3	5677:3	11	return
DESTINATION	5677:9	5677:9	10	( 0 )
EXPR	5677:9	5677:11	11	( 0 )
LEAF_NODE	5677:9	5677:9	12	(
FIELD	5677:10	5677:10	12	0
LEAF_NODE	5677:10	5677:10	13	0
LEAF_NODE	5677:11	5677:11	12	)
LEAF_NODE	5677:12	5677:12	10	;
LEAF_NODE	5678:2	5678:2	8	}
EXPR_STATEMENT	5680:2	5680:85	6	resizeddata = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for strip array" ) ;
EXPR	5680:2	5680:2	7	resizeddata = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for strip array" )
ASSIGN	5680:2	5680:14	8	resizeddata = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for strip array" )
LVAL	5680:2	5680:2	9	resizeddata
FIELD	5680:2	5680:2	10	resizeddata
LEAF_NODE	5680:2	5680:2	11	resizeddata
ASSIGN_OP	5680:13	5680:13	9	=
LEAF_NODE	5680:13	5680:13	10	=
RVAL	5680:14	5680:23	9	( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for strip array" )
LEAF_NODE	5680:14	5680:14	10	(
TYPE_NAME	5680:15	5680:15	10	uint64
LEAF_NODE	5680:15	5680:15	11	uint64
LEAF_NODE	5680:21	5680:21	10	*
LEAF_NODE	5680:22	5680:22	10	)
FUNCTION_CALL	5680:23	5680:84	10	_TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for strip array" )
CALLEE	5680:23	5680:23	11	_TIFFCheckMalloc
LEAF_NODE	5680:23	5680:23	12	_TIFFCheckMalloc
LEAF_NODE	5680:39	5680:39	11	(
ARGUMENT	5680:40	5680:40	11	tif
FIELD	5680:40	5680:40	12	tif
LEAF_NODE	5680:40	5680:40	13	tif
LEAF_NODE	5680:43	5680:43	11	,
ARGUMENT	5680:44	5680:44	11	nstrips
FIELD	5680:44	5680:44	12	nstrips
LEAF_NODE	5680:44	5680:44	13	nstrips
LEAF_NODE	5680:51	5680:51	11	,
ARGUMENT	5680:52	5680:52	11	sizeof ( uint64 )
FUNCTION_CALL	5680:52	5680:65	12	sizeof ( uint64 )
CALLEE	5680:52	5680:52	13	sizeof
LEAF_NODE	5680:52	5680:52	14	sizeof
LEAF_NODE	5680:58	5680:58	13	(
ARGUMENT	5680:59	5680:59	13	uint64
FIELD	5680:59	5680:59	14	uint64
LEAF_NODE	5680:59	5680:59	15	uint64
LEAF_NODE	5680:65	5680:65	13	)
LEAF_NODE	5680:66	5680:66	11	,
ARGUMENT	5680:67	5680:67	11	"for strip array"
FIELD	5680:67	5680:67	12	"for strip array"
LEAF_NODE	5680:67	5680:67	13	"for strip array"
LEAF_NODE	5680:84	5680:84	11	)
LEAF_NODE	5680:85	5680:85	7	;
SELECTION	5681:2	5681:22	6	
KEYWORD	5681:2	5681:2	7	if
LEAF_NODE	5681:2	5681:2	8	if
LEAF_NODE	5681:5	5681:5	7	(
CONDITION	5681:6	5681:6	7	resizeddata == 0
EXPR	5681:6	5681:19	8	resizeddata == 0
FIELD	5681:6	5681:6	9	resizeddata
LEAF_NODE	5681:6	5681:6	10	resizeddata
EQ_OPERATOR	5681:17	5681:17	9	==
LEAF_NODE	5681:17	5681:17	10	==
FIELD	5681:19	5681:19	9	0
LEAF_NODE	5681:19	5681:19	10	0
LEAF_NODE	5681:20	5681:20	7	)
STATEMENTS	5681:22	5684:2	7	
LEAF_NODE	5681:22	5681:22	8	{
STATEMENTS	5682:3	5683:3	8	
EXPR_STATEMENT	5682:3	5682:18	9	_TIFFfree ( data ) ;
EXPR	5682:3	5682:3	10	_TIFFfree ( data )
FUNCTION_CALL	5682:3	5682:17	11	_TIFFfree ( data )
CALLEE	5682:3	5682:3	12	_TIFFfree
LEAF_NODE	5682:3	5682:3	13	_TIFFfree
LEAF_NODE	5682:12	5682:12	12	(
ARGUMENT	5682:13	5682:13	12	data
FIELD	5682:13	5682:13	13	data
LEAF_NODE	5682:13	5682:13	14	data
LEAF_NODE	5682:17	5682:17	12	)
LEAF_NODE	5682:18	5682:18	10	;
JUMP_STATEMENT	5683:3	5683:12	9	return ( 0 ) ;
KEYWORD	5683:3	5683:3	10	return
LEAF_NODE	5683:3	5683:3	11	return
DESTINATION	5683:9	5683:9	10	( 0 )
EXPR	5683:9	5683:11	11	( 0 )
LEAF_NODE	5683:9	5683:9	12	(
FIELD	5683:10	5683:10	12	0
LEAF_NODE	5683:10	5683:10	13	0
LEAF_NODE	5683:11	5683:11	12	)
LEAF_NODE	5683:12	5683:12	10	;
LEAF_NODE	5684:2	5684:2	8	}
EXPR_STATEMENT	5685:16	5685:84	6	_TIFFmemcpy ( resizeddata , data , ( uint32 ) dir -> tdir_count * sizeof ( uint64 ) ) ;
EXPR	5685:16	5685:16	7	_TIFFmemcpy ( resizeddata , data , ( uint32 ) dir -> tdir_count * sizeof ( uint64 ) )
FUNCTION_CALL	5685:16	5685:83	8	_TIFFmemcpy ( resizeddata , data , ( uint32 ) dir -> tdir_count * sizeof ( uint64 ) )
CALLEE	5685:16	5685:16	9	_TIFFmemcpy
LEAF_NODE	5685:16	5685:16	10	_TIFFmemcpy
LEAF_NODE	5685:27	5685:27	9	(
ARGUMENT	5685:28	5685:28	9	resizeddata
FIELD	5685:28	5685:28	10	resizeddata
LEAF_NODE	5685:28	5685:28	11	resizeddata
LEAF_NODE	5685:39	5685:39	9	,
ARGUMENT	5685:40	5685:40	9	data
FIELD	5685:40	5685:40	10	data
LEAF_NODE	5685:40	5685:40	11	data
LEAF_NODE	5685:44	5685:44	9	,
ARGUMENT	5685:45	5685:69	9	( uint32 ) dir -> tdir_count * sizeof ( uint64 )
LEAF_NODE	5685:45	5685:45	10	(
TYPE_NAME	5685:46	5685:46	10	uint32
LEAF_NODE	5685:46	5685:46	11	uint32
LEAF_NODE	5685:52	5685:52	10	)
FIELD	5685:53	5685:58	10	dir -> tdir_count
LEAF_NODE	5685:53	5685:53	11	dir
LEAF_NODE	5685:56	5685:56	11	->
LEAF_NODE	5685:58	5685:58	11	tdir_count
LEAF_NODE	5685:68	5685:68	10	*
FUNCTION_CALL	5685:69	5685:82	10	sizeof ( uint64 )
CALLEE	5685:69	5685:69	11	sizeof
LEAF_NODE	5685:69	5685:69	12	sizeof
LEAF_NODE	5685:75	5685:75	11	(
ARGUMENT	5685:76	5685:76	11	uint64
FIELD	5685:76	5685:76	12	uint64
LEAF_NODE	5685:76	5685:76	13	uint64
LEAF_NODE	5685:82	5685:82	11	)
LEAF_NODE	5685:83	5685:83	9	)
LEAF_NODE	5685:84	5685:84	7	;
EXPR_STATEMENT	5686:16	5686:115	6	_TIFFmemset ( resizeddata + ( uint32 ) dir -> tdir_count , 0 , ( nstrips - ( uint32 ) dir -> tdir_count ) * sizeof ( uint64 ) ) ;
EXPR	5686:16	5686:16	7	_TIFFmemset ( resizeddata + ( uint32 ) dir -> tdir_count , 0 , ( nstrips - ( uint32 ) dir -> tdir_count ) * sizeof ( uint64 ) )
FUNCTION_CALL	5686:16	5686:114	8	_TIFFmemset ( resizeddata + ( uint32 ) dir -> tdir_count , 0 , ( nstrips - ( uint32 ) dir -> tdir_count ) * sizeof ( uint64 ) )
CALLEE	5686:16	5686:16	9	_TIFFmemset
LEAF_NODE	5686:16	5686:16	10	_TIFFmemset
LEAF_NODE	5686:27	5686:27	9	(
ARGUMENT	5686:28	5686:48	9	resizeddata + ( uint32 ) dir -> tdir_count
FIELD	5686:28	5686:28	10	resizeddata
LEAF_NODE	5686:28	5686:28	11	resizeddata
LEAF_NODE	5686:39	5686:39	10	+
LEAF_NODE	5686:40	5686:40	10	(
TYPE_NAME	5686:41	5686:41	10	uint32
LEAF_NODE	5686:41	5686:41	11	uint32
LEAF_NODE	5686:47	5686:47	10	)
FIELD	5686:48	5686:53	10	dir -> tdir_count
LEAF_NODE	5686:48	5686:48	11	dir
LEAF_NODE	5686:51	5686:51	11	->
LEAF_NODE	5686:53	5686:53	11	tdir_count
LEAF_NODE	5686:63	5686:63	9	,
ARGUMENT	5686:64	5686:64	9	0
FIELD	5686:64	5686:64	10	0
LEAF_NODE	5686:64	5686:64	11	0
LEAF_NODE	5686:65	5686:65	9	,
ARGUMENT	5686:66	5686:100	9	( nstrips - ( uint32 ) dir -> tdir_count ) * sizeof ( uint64 )
LEAF_NODE	5686:66	5686:66	10	(
FIELD	5686:67	5686:67	10	nstrips
LEAF_NODE	5686:67	5686:67	11	nstrips
LEAF_NODE	5686:74	5686:74	10	-
LEAF_NODE	5686:75	5686:75	10	(
TYPE_NAME	5686:76	5686:76	10	uint32
LEAF_NODE	5686:76	5686:76	11	uint32
LEAF_NODE	5686:82	5686:82	10	)
FIELD	5686:83	5686:88	10	dir -> tdir_count
LEAF_NODE	5686:83	5686:83	11	dir
LEAF_NODE	5686:86	5686:86	11	->
LEAF_NODE	5686:88	5686:88	11	tdir_count
LEAF_NODE	5686:98	5686:98	10	)
LEAF_NODE	5686:99	5686:99	10	*
FUNCTION_CALL	5686:100	5686:113	10	sizeof ( uint64 )
CALLEE	5686:100	5686:100	11	sizeof
LEAF_NODE	5686:100	5686:100	12	sizeof
LEAF_NODE	5686:106	5686:106	11	(
ARGUMENT	5686:107	5686:107	11	uint64
FIELD	5686:107	5686:107	12	uint64
LEAF_NODE	5686:107	5686:107	13	uint64
LEAF_NODE	5686:113	5686:113	11	)
LEAF_NODE	5686:114	5686:114	9	)
LEAF_NODE	5686:115	5686:115	7	;
EXPR_STATEMENT	5687:2	5687:17	6	_TIFFfree ( data ) ;
EXPR	5687:2	5687:2	7	_TIFFfree ( data )
FUNCTION_CALL	5687:2	5687:16	8	_TIFFfree ( data )
CALLEE	5687:2	5687:2	9	_TIFFfree
LEAF_NODE	5687:2	5687:2	10	_TIFFfree
LEAF_NODE	5687:11	5687:11	9	(
ARGUMENT	5687:12	5687:12	9	data
FIELD	5687:12	5687:12	10	data
LEAF_NODE	5687:12	5687:12	11	data
LEAF_NODE	5687:16	5687:16	9	)
LEAF_NODE	5687:17	5687:17	7	;
EXPR_STATEMENT	5688:2	5688:18	6	data = resizeddata ;
EXPR	5688:2	5688:2	7	data = resizeddata
ASSIGN	5688:2	5688:7	8	data = resizeddata
LVAL	5688:2	5688:2	9	data
FIELD	5688:2	5688:2	10	data
LEAF_NODE	5688:2	5688:2	11	data
ASSIGN_OP	5688:6	5688:6	9	=
LEAF_NODE	5688:6	5688:6	10	=
RVAL	5688:7	5688:7	9	resizeddata
FIELD	5688:7	5688:7	10	resizeddata
LEAF_NODE	5688:7	5688:7	11	resizeddata
LEAF_NODE	5688:18	5688:18	7	;
LEAF_NODE	5689:1	5689:1	5	}
EXPR_STATEMENT	5690:1	5690:10	3	* lpp = data ;
EXPR	5690:1	5690:1	4	* lpp = data
ASSIGN	5690:1	5690:6	5	* lpp = data
LVAL	5690:1	5690:1	6	* lpp
UNARY_EXPR	5690:1	5690:2	7	* lpp
UNARY_OPERATOR	5690:1	5690:1	8	*
LEAF_NODE	5690:1	5690:1	9	*
FIELD	5690:2	5690:2	8	lpp
LEAF_NODE	5690:2	5690:2	9	lpp
ASSIGN_OP	5690:5	5690:5	6	=
LEAF_NODE	5690:5	5690:5	7	=
RVAL	5690:6	5690:6	6	data
FIELD	5690:6	5690:6	7	data
LEAF_NODE	5690:6	5690:6	8	data
LEAF_NODE	5690:10	5690:10	4	;
JUMP_STATEMENT	5691:1	5691:10	3	return ( 1 ) ;
KEYWORD	5691:1	5691:1	4	return
LEAF_NODE	5691:1	5691:1	5	return
DESTINATION	5691:7	5691:7	4	( 1 )
EXPR	5691:7	5691:9	5	( 1 )
LEAF_NODE	5691:7	5691:7	6	(
FIELD	5691:8	5691:8	6	1
LEAF_NODE	5691:8	5691:8	7	1
LEAF_NODE	5691:9	5691:9	6	)
LEAF_NODE	5691:10	5691:10	4	;
LEAF_NODE	5692:0	5692:0	2	}
FUNCTION_DEF	5697:0	5750:0	1	
RETURN_TYPE	5697:0	5697:7	2	static int
LEAF_NODE	5697:0	5697:0	3	static
TYPE_NAME	5697:7	5697:7	3	int
LEAF_NODE	5697:7	5697:7	4	int
FUNCTION_NAME	5698:0	5698:0	2	TIFFFetchSubjectDistance
LEAF_NODE	5698:0	5698:0	3	TIFFFetchSubjectDistance
PARAMETER_LIST	5698:24	5698:53	2	( TIFF * tif , TIFFDirEntry * dir )
LEAF_NODE	5698:24	5698:24	3	(
PARAMETER_DECL	5698:25	5698:31	3	TIFF * tif
TYPE	5698:25	5698:29	4	TIFF *
TYPE_NAME	5698:25	5698:25	5	TIFF
LEAF_NODE	5698:25	5698:25	6	TIFF
POINTER	5698:29	5698:29	5	*
LEAF_NODE	5698:29	5698:29	6	*
NAME	5698:31	5698:31	4	tif
LEAF_NODE	5698:31	5698:31	5	tif
LEAF_NODE	5698:34	5698:34	3	,
PARAMETER_DECL	5698:36	5698:50	3	TIFFDirEntry * dir
TYPE	5698:36	5698:48	4	TIFFDirEntry *
TYPE_NAME	5698:36	5698:36	5	TIFFDirEntry
LEAF_NODE	5698:36	5698:36	6	TIFFDirEntry
POINTER	5698:48	5698:48	5	*
LEAF_NODE	5698:48	5698:48	6	*
NAME	5698:50	5698:50	4	dir
LEAF_NODE	5698:50	5698:50	5	dir
LEAF_NODE	5698:53	5698:53	3	)
LEAF_NODE	5699:0	5699:0	2	{
STATEMENTS	5700:1	5745:1	2	
LEAF_NODE	5700:1	5700:1	3	static
SIMPLE_DECL	5700:8	5700:56	3	const char [ ] module ; module = "TIFFFetchSubjectDistance" ;
VAR_DECL	5700:8	5700:19	4	const char [ ] module ; module = "TIFFFetchSubjectDistance"
TYPE	5700:8	5700:25	5	const char [ ]
TYPE_NAME	5700:8	5700:14	6	const char
LEAF_NODE	5700:8	5700:8	7	const
LEAF_NODE	5700:14	5700:14	7	char
TYPE_SUFFIX	5700:25	5700:26	6	[ ]
LEAF_NODE	5700:25	5700:25	7	[
LEAF_NODE	5700:26	5700:26	7	]
NAME	5700:19	5700:19	5	module
LEAF_NODE	5700:19	5700:19	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	5700:19	5700:19	5	module = "TIFFFetchSubjectDistance"
ASSIGN	5700:19	5700:30	6	module = "TIFFFetchSubjectDistance"
LVAL	5700:19	5700:19	7	module
NAME	5700:19	5700:19	8	module
LEAF_NODE	5700:19	5700:19	9	module
ASSIGN_OP	5700:28	5700:28	7	=
LEAF_NODE	5700:28	5700:28	8	=
RVAL	5700:30	5700:30	7	"TIFFFetchSubjectDistance"
FIELD	5700:30	5700:30	8	"TIFFFetchSubjectDistance"
LEAF_NODE	5700:30	5700:30	9	"TIFFFetchSubjectDistance"
LEAF_NODE	5700:56	5700:56	4	;
SIMPLE_DECL	5701:1	5701:29	3	enum TIFFReadDirEntryErr err ;
VAR_DECL	5701:1	5701:26	4	enum TIFFReadDirEntryErr err
TYPE	5701:1	5701:1	5	enum TIFFReadDirEntryErr
TYPE_NAME	5701:1	5701:6	6	enum TIFFReadDirEntryErr
LEAF_NODE	5701:1	5701:1	7	enum
LEAF_NODE	5701:6	5701:6	7	TIFFReadDirEntryErr
NAME	5701:26	5701:26	5	err
LEAF_NODE	5701:26	5701:26	6	err
LEAF_NODE	5701:29	5701:29	4	;
SIMPLE_DECL	5702:1	5702:18	3	UInt64Aligned_t m ;
VAR_DECL	5702:1	5702:17	4	UInt64Aligned_t m
TYPE	5702:1	5702:1	5	UInt64Aligned_t
TYPE_NAME	5702:1	5702:1	6	UInt64Aligned_t
LEAF_NODE	5702:1	5702:1	7	UInt64Aligned_t
NAME	5702:17	5702:17	5	m
LEAF_NODE	5702:17	5702:17	6	m
LEAF_NODE	5702:18	5702:18	4	;
EXPR_STATEMENT	5703:4	5703:9	3	m . l = 0 ;
EXPR	5703:4	5703:4	4	m . l = 0
ASSIGN	5703:4	5703:8	5	m . l = 0
LVAL	5703:4	5703:4	6	m . l
FIELD	5703:4	5703:6	7	m . l
LEAF_NODE	5703:4	5703:4	8	m
LEAF_NODE	5703:5	5703:5	8	.
LEAF_NODE	5703:6	5703:6	8	l
ASSIGN_OP	5703:7	5703:7	6	=
LEAF_NODE	5703:7	5703:7	7	=
RVAL	5703:8	5703:8	6	0
FIELD	5703:8	5703:8	7	0
LEAF_NODE	5703:8	5703:8	8	0
LEAF_NODE	5703:9	5703:9	4	;
EXPR_STATEMENT	5704:1	5704:26	3	assert ( sizeof ( double ) == 8 ) ;
EXPR	5704:1	5704:1	4	assert ( sizeof ( double ) == 8 )
FUNCTION_CALL	5704:1	5704:25	5	assert ( sizeof ( double ) == 8 )
CALLEE	5704:1	5704:1	6	assert
LEAF_NODE	5704:1	5704:1	7	assert
LEAF_NODE	5704:7	5704:7	6	(
ARGUMENT	5704:8	5704:24	6	sizeof ( double ) == 8
FUNCTION_CALL	5704:8	5704:21	7	sizeof ( double )
CALLEE	5704:8	5704:8	8	sizeof
LEAF_NODE	5704:8	5704:8	9	sizeof
LEAF_NODE	5704:14	5704:14	8	(
ARGUMENT	5704:15	5704:15	8	double
FIELD	5704:15	5704:15	9	double
LEAF_NODE	5704:15	5704:15	10	double
LEAF_NODE	5704:21	5704:21	8	)
EQ_OPERATOR	5704:22	5704:22	7	==
LEAF_NODE	5704:22	5704:22	8	==
FIELD	5704:24	5704:24	7	8
LEAF_NODE	5704:24	5704:24	8	8
LEAF_NODE	5704:25	5704:25	6	)
LEAF_NODE	5704:26	5704:26	4	;
EXPR_STATEMENT	5705:1	5705:26	3	assert ( sizeof ( uint64 ) == 8 ) ;
EXPR	5705:1	5705:1	4	assert ( sizeof ( uint64 ) == 8 )
FUNCTION_CALL	5705:1	5705:25	5	assert ( sizeof ( uint64 ) == 8 )
CALLEE	5705:1	5705:1	6	assert
LEAF_NODE	5705:1	5705:1	7	assert
LEAF_NODE	5705:7	5705:7	6	(
ARGUMENT	5705:8	5705:24	6	sizeof ( uint64 ) == 8
FUNCTION_CALL	5705:8	5705:21	7	sizeof ( uint64 )
CALLEE	5705:8	5705:8	8	sizeof
LEAF_NODE	5705:8	5705:8	9	sizeof
LEAF_NODE	5705:14	5705:14	8	(
ARGUMENT	5705:15	5705:15	8	uint64
FIELD	5705:15	5705:15	9	uint64
LEAF_NODE	5705:15	5705:15	10	uint64
LEAF_NODE	5705:21	5705:21	8	)
EQ_OPERATOR	5705:22	5705:22	7	==
LEAF_NODE	5705:22	5705:22	8	==
FIELD	5705:24	5705:24	7	8
LEAF_NODE	5705:24	5705:24	8	8
LEAF_NODE	5705:25	5705:25	6	)
LEAF_NODE	5705:26	5705:26	4	;
EXPR_STATEMENT	5706:1	5706:26	3	assert ( sizeof ( uint32 ) == 4 ) ;
EXPR	5706:1	5706:1	4	assert ( sizeof ( uint32 ) == 4 )
FUNCTION_CALL	5706:1	5706:25	5	assert ( sizeof ( uint32 ) == 4 )
CALLEE	5706:1	5706:1	6	assert
LEAF_NODE	5706:1	5706:1	7	assert
LEAF_NODE	5706:7	5706:7	6	(
ARGUMENT	5706:8	5706:24	6	sizeof ( uint32 ) == 4
FUNCTION_CALL	5706:8	5706:21	7	sizeof ( uint32 )
CALLEE	5706:8	5706:8	8	sizeof
LEAF_NODE	5706:8	5706:8	9	sizeof
LEAF_NODE	5706:14	5706:14	8	(
ARGUMENT	5706:15	5706:15	8	uint32
FIELD	5706:15	5706:15	9	uint32
LEAF_NODE	5706:15	5706:15	10	uint32
LEAF_NODE	5706:21	5706:21	8	)
EQ_OPERATOR	5706:22	5706:22	7	==
LEAF_NODE	5706:22	5706:22	8	==
FIELD	5706:24	5706:24	7	4
LEAF_NODE	5706:24	5706:24	8	4
LEAF_NODE	5706:25	5706:25	6	)
LEAF_NODE	5706:26	5706:26	4	;
SELECTION	5707:1	5708:2	3	
KEYWORD	5707:1	5707:1	4	if
LEAF_NODE	5707:1	5707:1	5	if
LEAF_NODE	5707:4	5707:4	4	(
CONDITION	5707:5	5707:5	4	dir -> tdir_count != 1
EXPR	5707:5	5707:22	5	dir -> tdir_count != 1
FIELD	5707:5	5707:10	6	dir -> tdir_count
LEAF_NODE	5707:5	5707:5	7	dir
LEAF_NODE	5707:8	5707:8	7	->
LEAF_NODE	5707:10	5707:10	7	tdir_count
EQ_OPERATOR	5707:20	5707:20	6	!=
LEAF_NODE	5707:20	5707:20	7	!=
FIELD	5707:22	5707:22	6	1
LEAF_NODE	5707:22	5707:22	7	1
LEAF_NODE	5707:23	5707:23	4	)
STATEMENTS	5708:2	5708:2	4	
EXPR_STATEMENT	5708:2	5708:30	5	err = TIFFReadDirEntryErrCount ;
EXPR	5708:2	5708:2	6	err = TIFFReadDirEntryErrCount
ASSIGN	5708:2	5708:6	7	err = TIFFReadDirEntryErrCount
LVAL	5708:2	5708:2	8	err
FIELD	5708:2	5708:2	9	err
LEAF_NODE	5708:2	5708:2	10	err
ASSIGN_OP	5708:5	5708:5	8	=
LEAF_NODE	5708:5	5708:5	9	=
RVAL	5708:6	5708:6	8	TIFFReadDirEntryErrCount
FIELD	5708:6	5708:6	9	TIFFReadDirEntryErrCount
LEAF_NODE	5708:6	5708:6	10	TIFFReadDirEntryErrCount
LEAF_NODE	5708:30	5708:30	6	;
SELECTION	5709:1	5709:6	3	
KEYWORD	5709:1	5709:1	4	else
LEAF_NODE	5709:1	5709:1	5	else
STATEMENTS	5709:6	5709:6	4	
SELECTION	5709:6	5710:2	5	
KEYWORD	5709:6	5709:6	6	if
LEAF_NODE	5709:6	5709:6	7	if
LEAF_NODE	5709:9	5709:9	6	(
CONDITION	5709:10	5709:10	6	dir -> tdir_type != TIFF_RATIONAL
EXPR	5709:10	5709:26	7	dir -> tdir_type != TIFF_RATIONAL
FIELD	5709:10	5709:15	8	dir -> tdir_type
LEAF_NODE	5709:10	5709:10	9	dir
LEAF_NODE	5709:13	5709:13	9	->
LEAF_NODE	5709:15	5709:15	9	tdir_type
EQ_OPERATOR	5709:24	5709:24	8	!=
LEAF_NODE	5709:24	5709:24	9	!=
FIELD	5709:26	5709:26	8	TIFF_RATIONAL
LEAF_NODE	5709:26	5709:26	9	TIFF_RATIONAL
LEAF_NODE	5709:39	5709:39	6	)
STATEMENTS	5710:2	5710:2	6	
EXPR_STATEMENT	5710:2	5710:29	7	err = TIFFReadDirEntryErrType ;
EXPR	5710:2	5710:2	8	err = TIFFReadDirEntryErrType
ASSIGN	5710:2	5710:6	9	err = TIFFReadDirEntryErrType
LVAL	5710:2	5710:2	10	err
FIELD	5710:2	5710:2	11	err
LEAF_NODE	5710:2	5710:2	12	err
ASSIGN_OP	5710:5	5710:5	10	=
LEAF_NODE	5710:5	5710:5	11	=
RVAL	5710:6	5710:6	10	TIFFReadDirEntryErrType
FIELD	5710:6	5710:6	11	TIFFReadDirEntryErrType
LEAF_NODE	5710:6	5710:6	12	TIFFReadDirEntryErrType
LEAF_NODE	5710:29	5710:29	8	;
SELECTION	5711:1	5712:1	3	
KEYWORD	5711:1	5711:1	4	else
LEAF_NODE	5711:1	5711:1	5	else
STATEMENTS	5712:1	5726:1	4	
LEAF_NODE	5712:1	5712:1	5	{
STATEMENTS	5713:2	5721:2	5	
SELECTION	5713:2	5714:2	6	
KEYWORD	5713:2	5713:2	7	if
LEAF_NODE	5713:2	5713:2	8	if
LEAF_NODE	5713:5	5713:5	7	(
CONDITION	5713:6	5713:6	7	! ( tif -> tif_flags & TIFF_BIGTIFF )
EXPR	5713:6	5713:6	8	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_EXPR	5713:6	5713:35	9	! ( tif -> tif_flags & TIFF_BIGTIFF )
UNARY_OPERATOR	5713:6	5713:6	10	!
LEAF_NODE	5713:6	5713:6	11	!
LEAF_NODE	5713:7	5713:7	10	(
FIELD	5713:8	5713:13	10	tif -> tif_flags
LEAF_NODE	5713:8	5713:8	11	tif
LEAF_NODE	5713:11	5713:11	11	->
LEAF_NODE	5713:13	5713:13	11	tif_flags
LEAF_NODE	5713:22	5713:22	10	&
FIELD	5713:23	5713:23	10	TIFF_BIGTIFF
LEAF_NODE	5713:23	5713:23	11	TIFF_BIGTIFF
LEAF_NODE	5713:35	5713:35	10	)
LEAF_NODE	5713:36	5713:36	7	)
STATEMENTS	5714:2	5720:2	7	
LEAF_NODE	5714:2	5714:2	8	{
STATEMENTS	5715:3	5719:3	8	
SIMPLE_DECL	5715:3	5715:16	9	uint32 offset ;
VAR_DECL	5715:3	5715:10	10	uint32 offset
TYPE	5715:3	5715:3	11	uint32
TYPE_NAME	5715:3	5715:3	12	uint32
LEAF_NODE	5715:3	5715:3	13	uint32
NAME	5715:10	5715:10	11	offset
LEAF_NODE	5715:10	5715:10	12	offset
LEAF_NODE	5715:16	5715:16	10	;
LEAF_NODE	5716:3	5716:3	9	offset
LEAF_NODE	5716:9	5716:9	9	=
LEAF_NODE	5716:10	5716:10	9	*
EXPR_STATEMENT	5716:11	5716:39	9	( uint32 * ) ( & dir -> tdir_offset ) ;
EXPR	5716:11	5716:38	10	( uint32 * ) ( & dir -> tdir_offset )
LEAF_NODE	5716:11	5716:11	11	(
TYPE_NAME	5716:12	5716:12	11	uint32
LEAF_NODE	5716:12	5716:12	12	uint32
LEAF_NODE	5716:18	5716:18	11	*
LEAF_NODE	5716:19	5716:19	11	)
LEAF_NODE	5716:20	5716:20	11	(
UNARY_EXPR	5716:21	5716:22	11	& dir -> tdir_offset
UNARY_OPERATOR	5716:21	5716:21	12	&
LEAF_NODE	5716:21	5716:21	13	&
FIELD	5716:22	5716:27	12	dir -> tdir_offset
LEAF_NODE	5716:22	5716:22	13	dir
LEAF_NODE	5716:25	5716:25	13	->
LEAF_NODE	5716:27	5716:27	13	tdir_offset
LEAF_NODE	5716:38	5716:38	11	)
LEAF_NODE	5716:39	5716:39	10	;
SELECTION	5717:3	5718:4	9	
KEYWORD	5717:3	5717:3	10	if
LEAF_NODE	5717:3	5717:3	11	if
LEAF_NODE	5717:6	5717:6	10	(
CONDITION	5717:7	5717:7	10	tif -> tif_flags & TIFF_SWAB
EXPR	5717:7	5717:22	11	tif -> tif_flags & TIFF_SWAB
FIELD	5717:7	5717:12	12	tif -> tif_flags
LEAF_NODE	5717:7	5717:7	13	tif
LEAF_NODE	5717:10	5717:10	13	->
LEAF_NODE	5717:12	5717:12	13	tif_flags
LEAF_NODE	5717:21	5717:21	12	&
FIELD	5717:22	5717:22	12	TIFF_SWAB
LEAF_NODE	5717:22	5717:22	13	TIFF_SWAB
LEAF_NODE	5717:31	5717:31	10	)
STATEMENTS	5718:4	5718:4	10	
EXPR_STATEMENT	5718:4	5718:25	11	TIFFSwabLong ( & offset ) ;
EXPR	5718:4	5718:4	12	TIFFSwabLong ( & offset )
FUNCTION_CALL	5718:4	5718:24	13	TIFFSwabLong ( & offset )
CALLEE	5718:4	5718:4	14	TIFFSwabLong
LEAF_NODE	5718:4	5718:4	15	TIFFSwabLong
LEAF_NODE	5718:16	5718:16	14	(
ARGUMENT	5718:17	5718:17	14	& offset
UNARY_EXPR	5718:17	5718:18	15	& offset
UNARY_OPERATOR	5718:17	5718:17	16	&
LEAF_NODE	5718:17	5718:17	17	&
FIELD	5718:18	5718:18	16	offset
LEAF_NODE	5718:18	5718:18	17	offset
LEAF_NODE	5718:24	5718:24	14	)
LEAF_NODE	5718:25	5718:25	12	;
EXPR_STATEMENT	5719:3	5719:45	9	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i ) ;
EXPR	5719:3	5719:3	10	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i )
ASSIGN	5719:3	5719:7	11	err = TIFFReadDirEntryData ( tif , offset , 8 , m . i )
LVAL	5719:3	5719:3	12	err
FIELD	5719:3	5719:3	13	err
LEAF_NODE	5719:3	5719:3	14	err
ASSIGN_OP	5719:6	5719:6	12	=
LEAF_NODE	5719:6	5719:6	13	=
RVAL	5719:7	5719:7	12	TIFFReadDirEntryData ( tif , offset , 8 , m . i )
FUNCTION_CALL	5719:7	5719:44	13	TIFFReadDirEntryData ( tif , offset , 8 , m . i )
CALLEE	5719:7	5719:7	14	TIFFReadDirEntryData
LEAF_NODE	5719:7	5719:7	15	TIFFReadDirEntryData
LEAF_NODE	5719:27	5719:27	14	(
ARGUMENT	5719:28	5719:28	14	tif
FIELD	5719:28	5719:28	15	tif
LEAF_NODE	5719:28	5719:28	16	tif
LEAF_NODE	5719:31	5719:31	14	,
ARGUMENT	5719:32	5719:32	14	offset
FIELD	5719:32	5719:32	15	offset
LEAF_NODE	5719:32	5719:32	16	offset
LEAF_NODE	5719:38	5719:38	14	,
ARGUMENT	5719:39	5719:39	14	8
FIELD	5719:39	5719:39	15	8
LEAF_NODE	5719:39	5719:39	16	8
LEAF_NODE	5719:40	5719:40	14	,
ARGUMENT	5719:41	5719:41	14	m . i
FIELD	5719:41	5719:43	15	m . i
LEAF_NODE	5719:41	5719:41	16	m
LEAF_NODE	5719:42	5719:42	16	.
LEAF_NODE	5719:43	5719:43	16	i
LEAF_NODE	5719:44	5719:44	14	)
LEAF_NODE	5719:45	5719:45	10	;
LEAF_NODE	5720:2	5720:2	8	}
SELECTION	5721:2	5722:2	6	
KEYWORD	5721:2	5721:2	7	else
LEAF_NODE	5721:2	5721:2	8	else
STATEMENTS	5722:2	5725:2	7	
LEAF_NODE	5722:2	5722:2	8	{
STATEMENTS	5723:3	5724:3	8	
EXPR_STATEMENT	5723:3	5723:34	9	m . l = dir -> tdir_offset . toff_long8 ;
EXPR	5723:3	5723:3	10	m . l = dir -> tdir_offset . toff_long8
ASSIGN	5723:3	5723:7	11	m . l = dir -> tdir_offset . toff_long8
LVAL	5723:3	5723:3	12	m . l
FIELD	5723:3	5723:5	13	m . l
LEAF_NODE	5723:3	5723:3	14	m
LEAF_NODE	5723:4	5723:4	14	.
LEAF_NODE	5723:5	5723:5	14	l
ASSIGN_OP	5723:6	5723:6	12	=
LEAF_NODE	5723:6	5723:6	13	=
RVAL	5723:7	5723:7	12	dir -> tdir_offset . toff_long8
FIELD	5723:7	5723:24	13	dir -> tdir_offset . toff_long8
LEAF_NODE	5723:7	5723:7	14	dir
LEAF_NODE	5723:10	5723:10	14	->
LEAF_NODE	5723:12	5723:12	14	tdir_offset
LEAF_NODE	5723:23	5723:23	14	.
LEAF_NODE	5723:24	5723:24	14	toff_long8
LEAF_NODE	5723:34	5723:34	10	;
EXPR_STATEMENT	5724:3	5724:28	9	err = TIFFReadDirEntryErrOk ;
EXPR	5724:3	5724:3	10	err = TIFFReadDirEntryErrOk
ASSIGN	5724:3	5724:7	11	err = TIFFReadDirEntryErrOk
LVAL	5724:3	5724:3	12	err
FIELD	5724:3	5724:3	13	err
LEAF_NODE	5724:3	5724:3	14	err
ASSIGN_OP	5724:6	5724:6	12	=
LEAF_NODE	5724:6	5724:6	13	=
RVAL	5724:7	5724:7	12	TIFFReadDirEntryErrOk
FIELD	5724:7	5724:7	13	TIFFReadDirEntryErrOk
LEAF_NODE	5724:7	5724:7	14	TIFFReadDirEntryErrOk
LEAF_NODE	5724:28	5724:28	10	;
LEAF_NODE	5725:2	5725:2	8	}
LEAF_NODE	5726:1	5726:1	5	}
SELECTION	5727:1	5728:1	3	
KEYWORD	5727:1	5727:1	4	if
LEAF_NODE	5727:1	5727:1	5	if
LEAF_NODE	5727:4	5727:4	4	(
CONDITION	5727:5	5727:5	4	err == TIFFReadDirEntryErrOk
EXPR	5727:5	5727:10	5	err == TIFFReadDirEntryErrOk
FIELD	5727:5	5727:5	6	err
LEAF_NODE	5727:5	5727:5	7	err
EQ_OPERATOR	5727:8	5727:8	6	==
LEAF_NODE	5727:8	5727:8	7	==
FIELD	5727:10	5727:10	6	TIFFReadDirEntryErrOk
LEAF_NODE	5727:10	5727:10	7	TIFFReadDirEntryErrOk
LEAF_NODE	5727:31	5727:31	4	)
STATEMENTS	5728:1	5744:1	4	
LEAF_NODE	5728:1	5728:1	5	{
STATEMENTS	5729:2	5743:2	5	
SIMPLE_DECL	5729:2	5729:10	6	double n ;
VAR_DECL	5729:2	5729:9	7	double n
TYPE	5729:2	5729:2	8	double
TYPE_NAME	5729:2	5729:2	9	double
LEAF_NODE	5729:2	5729:2	10	double
NAME	5729:9	5729:9	8	n
LEAF_NODE	5729:9	5729:9	9	n
LEAF_NODE	5729:10	5729:10	7	;
SELECTION	5730:2	5731:3	6	
KEYWORD	5730:2	5730:2	7	if
LEAF_NODE	5730:2	5730:2	8	if
LEAF_NODE	5730:5	5730:5	7	(
CONDITION	5730:6	5730:6	7	tif -> tif_flags & TIFF_SWAB
EXPR	5730:6	5730:21	8	tif -> tif_flags & TIFF_SWAB
FIELD	5730:6	5730:11	9	tif -> tif_flags
LEAF_NODE	5730:6	5730:6	10	tif
LEAF_NODE	5730:9	5730:9	10	->
LEAF_NODE	5730:11	5730:11	10	tif_flags
LEAF_NODE	5730:20	5730:20	9	&
FIELD	5730:21	5730:21	9	TIFF_SWAB
LEAF_NODE	5730:21	5730:21	10	TIFF_SWAB
LEAF_NODE	5730:30	5730:30	7	)
STATEMENTS	5731:3	5731:3	7	
EXPR_STATEMENT	5731:3	5731:29	8	TIFFSwabArrayOfLong ( m . i , 2 ) ;
EXPR	5731:3	5731:3	9	TIFFSwabArrayOfLong ( m . i , 2 )
FUNCTION_CALL	5731:3	5731:28	10	TIFFSwabArrayOfLong ( m . i , 2 )
CALLEE	5731:3	5731:3	11	TIFFSwabArrayOfLong
LEAF_NODE	5731:3	5731:3	12	TIFFSwabArrayOfLong
LEAF_NODE	5731:22	5731:22	11	(
ARGUMENT	5731:23	5731:23	11	m . i
FIELD	5731:23	5731:25	12	m . i
LEAF_NODE	5731:23	5731:23	13	m
LEAF_NODE	5731:24	5731:24	13	.
LEAF_NODE	5731:25	5731:25	13	i
LEAF_NODE	5731:26	5731:26	11	,
ARGUMENT	5731:27	5731:27	11	2
FIELD	5731:27	5731:27	12	2
LEAF_NODE	5731:27	5731:27	13	2
LEAF_NODE	5731:28	5731:28	11	)
LEAF_NODE	5731:29	5731:29	9	;
SELECTION	5732:2	5733:3	6	
KEYWORD	5732:2	5732:2	7	if
LEAF_NODE	5732:2	5732:2	8	if
LEAF_NODE	5732:5	5732:5	7	(
CONDITION	5732:6	5732:6	7	m . i [ 0 ] == 0
EXPR	5732:6	5732:14	8	m . i [ 0 ] == 0
FIELD	5732:6	5732:11	9	m . i [ 0 ]
LEAF_NODE	5732:6	5732:6	10	m
LEAF_NODE	5732:7	5732:7	10	.
LEAF_NODE	5732:8	5732:8	10	i
LEAF_NODE	5732:9	5732:9	10	[
EXPR	5732:10	5732:10	10	0
FIELD	5732:10	5732:10	11	0
LEAF_NODE	5732:10	5732:10	12	0
LEAF_NODE	5732:11	5732:11	10	]
EQ_OPERATOR	5732:12	5732:12	9	==
LEAF_NODE	5732:12	5732:12	10	==
FIELD	5732:14	5732:14	9	0
LEAF_NODE	5732:14	5732:14	10	0
LEAF_NODE	5732:15	5732:15	7	)
STATEMENTS	5733:3	5733:3	7	
EXPR_STATEMENT	5733:3	5733:8	8	n = 0.0 ;
EXPR	5733:3	5733:3	9	n = 0.0
ASSIGN	5733:3	5733:5	10	n = 0.0
LVAL	5733:3	5733:3	11	n
FIELD	5733:3	5733:3	12	n
LEAF_NODE	5733:3	5733:3	13	n
ASSIGN_OP	5733:4	5733:4	11	=
LEAF_NODE	5733:4	5733:4	12	=
RVAL	5733:5	5733:5	11	0.0
FIELD	5733:5	5733:5	12	0.0
LEAF_NODE	5733:5	5733:5	13	0.0
LEAF_NODE	5733:8	5733:8	9	;
SELECTION	5734:2	5734:7	6	
KEYWORD	5734:2	5734:2	7	else
LEAF_NODE	5734:2	5734:2	8	else
STATEMENTS	5734:7	5734:7	7	
SELECTION	5734:7	5740:3	8	
KEYWORD	5734:7	5734:7	9	if
LEAF_NODE	5734:7	5734:7	10	if
LEAF_NODE	5734:10	5734:10	9	(
CONDITION	5734:11	5734:11	9	m . i [ 0 ] == 0xFFFFFFFF || m . i [ 1 ] == 0
EXPR	5734:11	5734:11	10	m . i [ 0 ] == 0xFFFFFFFF || m . i [ 1 ] == 0
OR	5734:11	5734:33	11	m . i [ 0 ] == 0xFFFFFFFF || m . i [ 1 ] == 0
EXPR	5734:11	5734:19	12	m . i [ 0 ] == 0xFFFFFFFF
FIELD	5734:11	5734:16	13	m . i [ 0 ]
LEAF_NODE	5734:11	5734:11	14	m
LEAF_NODE	5734:12	5734:12	14	.
LEAF_NODE	5734:13	5734:13	14	i
LEAF_NODE	5734:14	5734:14	14	[
EXPR	5734:15	5734:15	14	0
FIELD	5734:15	5734:15	15	0
LEAF_NODE	5734:15	5734:15	16	0
LEAF_NODE	5734:16	5734:16	14	]
EQ_OPERATOR	5734:17	5734:17	13	==
LEAF_NODE	5734:17	5734:17	14	==
FIELD	5734:19	5734:19	13	0xFFFFFFFF
LEAF_NODE	5734:19	5734:19	14	0xFFFFFFFF
LEAF_NODE	5734:30	5734:30	12	||
EXPR	5734:33	5734:41	12	m . i [ 1 ] == 0
FIELD	5734:33	5734:38	13	m . i [ 1 ]
LEAF_NODE	5734:33	5734:33	14	m
LEAF_NODE	5734:34	5734:34	14	.
LEAF_NODE	5734:35	5734:35	14	i
LEAF_NODE	5734:36	5734:36	14	[
EXPR	5734:37	5734:37	14	1
FIELD	5734:37	5734:37	15	1
LEAF_NODE	5734:37	5734:37	16	1
LEAF_NODE	5734:38	5734:38	14	]
EQ_OPERATOR	5734:39	5734:39	13	==
LEAF_NODE	5734:39	5734:39	14	==
FIELD	5734:41	5734:41	13	0
LEAF_NODE	5734:41	5734:41	14	0
LEAF_NODE	5734:42	5734:42	9	)
STATEMENTS	5740:3	5740:3	9	
EXPR_STATEMENT	5740:3	5740:9	10	n = - 1.0 ;
EXPR	5740:3	5740:3	11	n = - 1.0
ASSIGN	5740:3	5740:5	12	n = - 1.0
LVAL	5740:3	5740:3	13	n
FIELD	5740:3	5740:3	14	n
LEAF_NODE	5740:3	5740:3	15	n
ASSIGN_OP	5740:4	5740:4	13	=
LEAF_NODE	5740:4	5740:4	14	=
RVAL	5740:5	5740:5	13	- 1.0
UNARY_EXPR	5740:5	5740:6	14	- 1.0
UNARY_OPERATOR	5740:5	5740:5	15	-
LEAF_NODE	5740:5	5740:5	16	-
FIELD	5740:6	5740:6	15	1.0
LEAF_NODE	5740:6	5740:6	16	1.0
LEAF_NODE	5740:9	5740:9	11	;
SELECTION	5741:2	5742:3	6	
KEYWORD	5741:2	5741:2	7	else
LEAF_NODE	5741:2	5741:2	8	else
STATEMENTS	5742:3	5742:3	7	
EXPR_STATEMENT	5742:3	5742:34	8	n = ( double ) m . i [ 0 ] / ( double ) m . i [ 1 ] ;
EXPR	5742:3	5742:3	9	n = ( double ) m . i [ 0 ] / ( double ) m . i [ 1 ]
ASSIGN	5742:3	5742:5	10	n = ( double ) m . i [ 0 ] / ( double ) m . i [ 1 ]
LVAL	5742:3	5742:3	11	n
FIELD	5742:3	5742:3	12	n
LEAF_NODE	5742:3	5742:3	13	n
ASSIGN_OP	5742:4	5742:4	11	=
LEAF_NODE	5742:4	5742:4	12	=
RVAL	5742:5	5742:28	11	( double ) m . i [ 0 ] / ( double ) m . i [ 1 ]
LEAF_NODE	5742:5	5742:5	12	(
TYPE_NAME	5742:6	5742:6	12	double
LEAF_NODE	5742:6	5742:6	13	double
LEAF_NODE	5742:12	5742:12	12	)
FIELD	5742:13	5742:18	12	m . i [ 0 ]
LEAF_NODE	5742:13	5742:13	13	m
LEAF_NODE	5742:14	5742:14	13	.
LEAF_NODE	5742:15	5742:15	13	i
LEAF_NODE	5742:16	5742:16	13	[
EXPR	5742:17	5742:17	13	0
FIELD	5742:17	5742:17	14	0
LEAF_NODE	5742:17	5742:17	15	0
LEAF_NODE	5742:18	5742:18	13	]
LEAF_NODE	5742:19	5742:19	12	/
LEAF_NODE	5742:20	5742:20	12	(
TYPE_NAME	5742:21	5742:21	12	double
LEAF_NODE	5742:21	5742:21	13	double
LEAF_NODE	5742:27	5742:27	12	)
FIELD	5742:28	5742:33	12	m . i [ 1 ]
LEAF_NODE	5742:28	5742:28	13	m
LEAF_NODE	5742:29	5742:29	13	.
LEAF_NODE	5742:30	5742:30	13	i
LEAF_NODE	5742:31	5742:31	13	[
EXPR	5742:32	5742:32	13	1
FIELD	5742:32	5742:32	14	1
LEAF_NODE	5742:32	5742:32	15	1
LEAF_NODE	5742:33	5742:33	13	]
LEAF_NODE	5742:34	5742:34	9	;
JUMP_STATEMENT	5743:2	5743:43	6	return ( TIFFSetField ( tif , dir -> tdir_tag , n ) ) ;
KEYWORD	5743:2	5743:2	7	return
LEAF_NODE	5743:2	5743:2	8	return
DESTINATION	5743:8	5743:8	7	( TIFFSetField ( tif , dir -> tdir_tag , n ) )
EXPR	5743:8	5743:42	8	( TIFFSetField ( tif , dir -> tdir_tag , n ) )
LEAF_NODE	5743:8	5743:8	9	(
FUNCTION_CALL	5743:9	5743:41	9	TIFFSetField ( tif , dir -> tdir_tag , n )
CALLEE	5743:9	5743:9	10	TIFFSetField
LEAF_NODE	5743:9	5743:9	11	TIFFSetField
LEAF_NODE	5743:21	5743:21	10	(
ARGUMENT	5743:22	5743:22	10	tif
FIELD	5743:22	5743:22	11	tif
LEAF_NODE	5743:22	5743:22	12	tif
LEAF_NODE	5743:25	5743:25	10	,
ARGUMENT	5743:26	5743:26	10	dir -> tdir_tag
FIELD	5743:26	5743:31	11	dir -> tdir_tag
LEAF_NODE	5743:26	5743:26	12	dir
LEAF_NODE	5743:29	5743:29	12	->
LEAF_NODE	5743:31	5743:31	12	tdir_tag
LEAF_NODE	5743:39	5743:39	10	,
ARGUMENT	5743:40	5743:40	10	n
FIELD	5743:40	5743:40	11	n
LEAF_NODE	5743:40	5743:40	12	n
LEAF_NODE	5743:41	5743:41	10	)
LEAF_NODE	5743:42	5743:42	9	)
LEAF_NODE	5743:43	5743:43	7	;
LEAF_NODE	5744:1	5744:1	5	}
SELECTION	5745:1	5746:1	3	
KEYWORD	5745:1	5745:1	4	else
LEAF_NODE	5745:1	5745:1	5	else
STATEMENTS	5746:1	5749:1	4	
LEAF_NODE	5746:1	5746:1	5	{
STATEMENTS	5747:2	5748:2	5	
EXPR_STATEMENT	5747:2	5747:66	6	TIFFReadDirEntryOutputErr ( tif , err , module , "SubjectDistance" , TRUE ) ;
EXPR	5747:2	5747:2	7	TIFFReadDirEntryOutputErr ( tif , err , module , "SubjectDistance" , TRUE )
FUNCTION_CALL	5747:2	5747:65	8	TIFFReadDirEntryOutputErr ( tif , err , module , "SubjectDistance" , TRUE )
CALLEE	5747:2	5747:2	9	TIFFReadDirEntryOutputErr
LEAF_NODE	5747:2	5747:2	10	TIFFReadDirEntryOutputErr
LEAF_NODE	5747:27	5747:27	9	(
ARGUMENT	5747:28	5747:28	9	tif
FIELD	5747:28	5747:28	10	tif
LEAF_NODE	5747:28	5747:28	11	tif
LEAF_NODE	5747:31	5747:31	9	,
ARGUMENT	5747:32	5747:32	9	err
FIELD	5747:32	5747:32	10	err
LEAF_NODE	5747:32	5747:32	11	err
LEAF_NODE	5747:35	5747:35	9	,
ARGUMENT	5747:36	5747:36	9	module
FIELD	5747:36	5747:36	10	module
LEAF_NODE	5747:36	5747:36	11	module
LEAF_NODE	5747:42	5747:42	9	,
ARGUMENT	5747:43	5747:43	9	"SubjectDistance"
FIELD	5747:43	5747:43	10	"SubjectDistance"
LEAF_NODE	5747:43	5747:43	11	"SubjectDistance"
LEAF_NODE	5747:60	5747:60	9	,
ARGUMENT	5747:61	5747:61	9	TRUE
FIELD	5747:61	5747:61	10	TRUE
LEAF_NODE	5747:61	5747:61	11	TRUE
LEAF_NODE	5747:65	5747:65	9	)
LEAF_NODE	5747:66	5747:66	7	;
JUMP_STATEMENT	5748:2	5748:11	6	return ( 0 ) ;
KEYWORD	5748:2	5748:2	7	return
LEAF_NODE	5748:2	5748:2	8	return
DESTINATION	5748:8	5748:8	7	( 0 )
EXPR	5748:8	5748:10	8	( 0 )
LEAF_NODE	5748:8	5748:8	9	(
FIELD	5748:9	5748:9	9	0
LEAF_NODE	5748:9	5748:9	10	0
LEAF_NODE	5748:10	5748:10	9	)
LEAF_NODE	5748:11	5748:11	7	;
LEAF_NODE	5749:1	5749:1	5	}
LEAF_NODE	5750:0	5750:0	2	}
FUNCTION_DEF	5752:0	5818:0	1	
RETURN_TYPE	5752:0	5752:7	2	static void
LEAF_NODE	5752:0	5752:0	3	static
TYPE_NAME	5752:7	5752:7	3	void
LEAF_NODE	5752:7	5752:7	4	void
FUNCTION_NAME	5752:12	5752:12	2	allocChoppedUpStripArrays
LEAF_NODE	5752:12	5752:12	3	allocChoppedUpStripArrays
PARAMETER_LIST	5752:37	5753:76	2	( TIFF * tif , uint32 nstrips , uint64 stripbytes , uint32 rowsperstrip )
LEAF_NODE	5752:37	5752:37	3	(
PARAMETER_DECL	5752:38	5752:44	3	TIFF * tif
TYPE	5752:38	5752:42	4	TIFF *
TYPE_NAME	5752:38	5752:38	5	TIFF
LEAF_NODE	5752:38	5752:38	6	TIFF
POINTER	5752:42	5752:42	5	*
LEAF_NODE	5752:42	5752:42	6	*
NAME	5752:44	5752:44	4	tif
LEAF_NODE	5752:44	5752:44	5	tif
LEAF_NODE	5752:47	5752:47	3	,
PARAMETER_DECL	5752:49	5752:56	3	uint32 nstrips
TYPE	5752:49	5752:49	4	uint32
TYPE_NAME	5752:49	5752:49	5	uint32
LEAF_NODE	5752:49	5752:49	6	uint32
NAME	5752:56	5752:56	4	nstrips
LEAF_NODE	5752:56	5752:56	5	nstrips
LEAF_NODE	5752:63	5752:63	3	,
PARAMETER_DECL	5753:38	5753:45	3	uint64 stripbytes
TYPE	5753:38	5753:38	4	uint64
TYPE_NAME	5753:38	5753:38	5	uint64
LEAF_NODE	5753:38	5753:38	6	uint64
NAME	5753:45	5753:45	4	stripbytes
LEAF_NODE	5753:45	5753:45	5	stripbytes
LEAF_NODE	5753:55	5753:55	3	,
PARAMETER_DECL	5753:57	5753:64	3	uint32 rowsperstrip
TYPE	5753:57	5753:57	4	uint32
TYPE_NAME	5753:57	5753:57	5	uint32
LEAF_NODE	5753:57	5753:57	6	uint32
NAME	5753:64	5753:64	4	rowsperstrip
LEAF_NODE	5753:64	5753:64	5	rowsperstrip
LEAF_NODE	5753:76	5753:76	3	)
LEAF_NODE	5754:0	5754:0	2	{
STATEMENTS	5755:4	5817:4	2	
SIMPLE_DECL	5755:4	5755:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	5755:4	5755:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	5755:4	5755:18	5	TIFFDirectory *
TYPE_NAME	5755:4	5755:4	6	TIFFDirectory
LEAF_NODE	5755:4	5755:4	7	TIFFDirectory
POINTER	5755:18	5755:18	6	*
LEAF_NODE	5755:18	5755:18	7	*
NAME	5755:19	5755:19	5	td
LEAF_NODE	5755:19	5755:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	5755:19	5755:19	5	td = & tif -> tif_dir
ASSIGN	5755:19	5755:24	6	td = & tif -> tif_dir
LVAL	5755:19	5755:19	7	td
NAME	5755:19	5755:19	8	td
LEAF_NODE	5755:19	5755:19	9	td
ASSIGN_OP	5755:22	5755:22	7	=
LEAF_NODE	5755:22	5755:22	8	=
RVAL	5755:24	5755:24	7	& tif -> tif_dir
UNARY_EXPR	5755:24	5755:25	8	& tif -> tif_dir
UNARY_OPERATOR	5755:24	5755:24	9	&
LEAF_NODE	5755:24	5755:24	10	&
FIELD	5755:25	5755:30	9	tif -> tif_dir
LEAF_NODE	5755:25	5755:25	10	tif
LEAF_NODE	5755:28	5755:28	10	->
LEAF_NODE	5755:30	5755:30	10	tif_dir
LEAF_NODE	5755:37	5755:37	4	;
SIMPLE_DECL	5756:4	5756:20	3	uint64 bytecount ;
VAR_DECL	5756:4	5756:11	4	uint64 bytecount
TYPE	5756:4	5756:4	5	uint64
TYPE_NAME	5756:4	5756:4	6	uint64
LEAF_NODE	5756:4	5756:4	7	uint64
NAME	5756:11	5756:11	5	bytecount
LEAF_NODE	5756:11	5756:11	6	bytecount
LEAF_NODE	5756:20	5756:20	4	;
SIMPLE_DECL	5757:4	5757:17	3	uint64 offset ;
VAR_DECL	5757:4	5757:11	4	uint64 offset
TYPE	5757:4	5757:4	5	uint64
TYPE_NAME	5757:4	5757:4	6	uint64
LEAF_NODE	5757:4	5757:4	7	uint64
NAME	5757:11	5757:11	5	offset
LEAF_NODE	5757:11	5757:11	6	offset
LEAF_NODE	5757:17	5757:17	4	;
SIMPLE_DECL	5758:4	5758:22	3	uint64 last_offset ;
VAR_DECL	5758:4	5758:11	4	uint64 last_offset
TYPE	5758:4	5758:4	5	uint64
TYPE_NAME	5758:4	5758:4	6	uint64
LEAF_NODE	5758:4	5758:4	7	uint64
NAME	5758:11	5758:11	5	last_offset
LEAF_NODE	5758:11	5758:11	6	last_offset
LEAF_NODE	5758:22	5758:22	4	;
SIMPLE_DECL	5759:4	5759:25	3	uint64 last_bytecount ;
VAR_DECL	5759:4	5759:11	4	uint64 last_bytecount
TYPE	5759:4	5759:4	5	uint64
TYPE_NAME	5759:4	5759:4	6	uint64
LEAF_NODE	5759:4	5759:4	7	uint64
NAME	5759:11	5759:11	5	last_bytecount
LEAF_NODE	5759:11	5759:11	6	last_bytecount
LEAF_NODE	5759:25	5759:25	4	;
SIMPLE_DECL	5760:4	5760:12	3	uint32 i ;
VAR_DECL	5760:4	5760:11	4	uint32 i
TYPE	5760:4	5760:4	5	uint32
TYPE_NAME	5760:4	5760:4	6	uint32
LEAF_NODE	5760:4	5760:4	7	uint32
NAME	5760:11	5760:11	5	i
LEAF_NODE	5760:11	5760:11	6	i
LEAF_NODE	5760:12	5760:12	4	;
SIMPLE_DECL	5761:4	5761:21	3	uint64 * newcounts ;
VAR_DECL	5761:4	5761:12	4	uint64 * newcounts
TYPE	5761:4	5761:11	5	uint64 *
TYPE_NAME	5761:4	5761:4	6	uint64
LEAF_NODE	5761:4	5761:4	7	uint64
POINTER	5761:11	5761:11	6	*
LEAF_NODE	5761:11	5761:11	7	*
NAME	5761:12	5761:12	5	newcounts
LEAF_NODE	5761:12	5761:12	6	newcounts
LEAF_NODE	5761:21	5761:21	4	;
SIMPLE_DECL	5762:4	5762:22	3	uint64 * newoffsets ;
VAR_DECL	5762:4	5762:12	4	uint64 * newoffsets
TYPE	5762:4	5762:11	5	uint64 *
TYPE_NAME	5762:4	5762:4	6	uint64
LEAF_NODE	5762:4	5762:4	7	uint64
POINTER	5762:11	5762:11	6	*
LEAF_NODE	5762:11	5762:11	7	*
NAME	5762:12	5762:12	5	newoffsets
LEAF_NODE	5762:12	5762:12	6	newoffsets
LEAF_NODE	5762:22	5762:22	4	;
EXPR_STATEMENT	5764:4	5764:40	3	offset = TIFFGetStrileOffset ( tif , 0 ) ;
EXPR	5764:4	5764:4	4	offset = TIFFGetStrileOffset ( tif , 0 )
ASSIGN	5764:4	5764:13	5	offset = TIFFGetStrileOffset ( tif , 0 )
LVAL	5764:4	5764:4	6	offset
FIELD	5764:4	5764:4	7	offset
LEAF_NODE	5764:4	5764:4	8	offset
ASSIGN_OP	5764:11	5764:11	6	=
LEAF_NODE	5764:11	5764:11	7	=
RVAL	5764:13	5764:13	6	TIFFGetStrileOffset ( tif , 0 )
FUNCTION_CALL	5764:13	5764:39	7	TIFFGetStrileOffset ( tif , 0 )
CALLEE	5764:13	5764:13	8	TIFFGetStrileOffset
LEAF_NODE	5764:13	5764:13	9	TIFFGetStrileOffset
LEAF_NODE	5764:32	5764:32	8	(
ARGUMENT	5764:33	5764:33	8	tif
FIELD	5764:33	5764:33	9	tif
LEAF_NODE	5764:33	5764:33	10	tif
LEAF_NODE	5764:36	5764:36	8	,
ARGUMENT	5764:38	5764:38	8	0
FIELD	5764:38	5764:38	9	0
LEAF_NODE	5764:38	5764:38	10	0
LEAF_NODE	5764:39	5764:39	8	)
LEAF_NODE	5764:40	5764:40	4	;
EXPR_STATEMENT	5765:4	5765:60	3	last_offset = TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 ) ;
EXPR	5765:4	5765:4	4	last_offset = TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
ASSIGN	5765:4	5765:18	5	last_offset = TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
LVAL	5765:4	5765:4	6	last_offset
FIELD	5765:4	5765:4	7	last_offset
LEAF_NODE	5765:4	5765:4	8	last_offset
ASSIGN_OP	5765:16	5765:16	6	=
LEAF_NODE	5765:16	5765:16	7	=
RVAL	5765:18	5765:18	6	TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
FUNCTION_CALL	5765:18	5765:59	7	TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
CALLEE	5765:18	5765:18	8	TIFFGetStrileOffset
LEAF_NODE	5765:18	5765:18	9	TIFFGetStrileOffset
LEAF_NODE	5765:37	5765:37	8	(
ARGUMENT	5765:38	5765:38	8	tif
FIELD	5765:38	5765:38	9	tif
LEAF_NODE	5765:38	5765:38	10	tif
LEAF_NODE	5765:41	5765:41	8	,
ARGUMENT	5765:43	5765:58	8	td -> td_nstrips - 1
FIELD	5765:43	5765:47	9	td -> td_nstrips
LEAF_NODE	5765:43	5765:43	10	td
LEAF_NODE	5765:45	5765:45	10	->
LEAF_NODE	5765:47	5765:47	10	td_nstrips
LEAF_NODE	5765:57	5765:57	9	-
FIELD	5765:58	5765:58	9	1
LEAF_NODE	5765:58	5765:58	10	1
LEAF_NODE	5765:59	5765:59	8	)
LEAF_NODE	5765:60	5765:60	4	;
EXPR_STATEMENT	5766:4	5766:66	3	last_bytecount = TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 ) ;
EXPR	5766:4	5766:4	4	last_bytecount = TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
ASSIGN	5766:4	5766:21	5	last_bytecount = TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
LVAL	5766:4	5766:4	6	last_bytecount
FIELD	5766:4	5766:4	7	last_bytecount
LEAF_NODE	5766:4	5766:4	8	last_bytecount
ASSIGN_OP	5766:19	5766:19	6	=
LEAF_NODE	5766:19	5766:19	7	=
RVAL	5766:21	5766:21	6	TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
FUNCTION_CALL	5766:21	5766:65	7	TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
CALLEE	5766:21	5766:21	8	TIFFGetStrileByteCount
LEAF_NODE	5766:21	5766:21	9	TIFFGetStrileByteCount
LEAF_NODE	5766:43	5766:43	8	(
ARGUMENT	5766:44	5766:44	8	tif
FIELD	5766:44	5766:44	9	tif
LEAF_NODE	5766:44	5766:44	10	tif
LEAF_NODE	5766:47	5766:47	8	,
ARGUMENT	5766:49	5766:64	8	td -> td_nstrips - 1
FIELD	5766:49	5766:53	9	td -> td_nstrips
LEAF_NODE	5766:49	5766:49	10	td
LEAF_NODE	5766:51	5766:51	10	->
LEAF_NODE	5766:53	5766:53	10	td_nstrips
LEAF_NODE	5766:63	5766:63	9	-
FIELD	5766:64	5766:64	9	1
LEAF_NODE	5766:64	5766:64	10	1
LEAF_NODE	5766:65	5766:65	8	)
LEAF_NODE	5766:66	5766:66	4	;
SELECTION	5767:4	5769:4	3	
KEYWORD	5767:4	5767:4	4	if
LEAF_NODE	5767:4	5767:4	5	if
LEAF_NODE	5767:6	5767:6	4	(
CONDITION	5767:8	5767:8	4	last_offset > TIFF_UINT64_MAX - last_bytecount || last_offset + last_bytecount < offset
EXPR	5767:8	5767:8	5	last_offset > TIFF_UINT64_MAX - last_bytecount || last_offset + last_bytecount < offset
OR	5767:8	5768:8	6	last_offset > TIFF_UINT64_MAX - last_bytecount || last_offset + last_bytecount < offset
EXPR	5767:8	5767:40	7	last_offset > TIFF_UINT64_MAX - last_bytecount
FIELD	5767:8	5767:8	8	last_offset
LEAF_NODE	5767:8	5767:8	9	last_offset
REL_OPERATOR	5767:20	5767:20	8	>
LEAF_NODE	5767:20	5767:20	9	>
FIELD	5767:22	5767:22	8	TIFF_UINT64_MAX
LEAF_NODE	5767:22	5767:22	9	TIFF_UINT64_MAX
LEAF_NODE	5767:38	5767:38	8	-
FIELD	5767:40	5767:40	8	last_bytecount
LEAF_NODE	5767:40	5767:40	9	last_bytecount
LEAF_NODE	5767:55	5767:55	7	||
EXPR	5768:8	5768:39	7	last_offset + last_bytecount < offset
FIELD	5768:8	5768:8	8	last_offset
LEAF_NODE	5768:8	5768:8	9	last_offset
LEAF_NODE	5768:20	5768:20	8	+
FIELD	5768:22	5768:22	8	last_bytecount
LEAF_NODE	5768:22	5768:22	9	last_bytecount
REL_OPERATOR	5768:37	5768:37	8	<
LEAF_NODE	5768:37	5768:37	9	<
FIELD	5768:39	5768:39	8	offset
LEAF_NODE	5768:39	5768:39	9	offset
LEAF_NODE	5768:46	5768:46	4	)
STATEMENTS	5769:4	5771:4	4	
LEAF_NODE	5769:4	5769:4	5	{
STATEMENTS	5770:8	5770:8	5	
JUMP_STATEMENT	5770:8	5770:14	6	return DESTINATION ;
KEYWORD	5770:8	5770:8	7	return
LEAF_NODE	5770:8	5770:8	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5770:14	5770:14	7	;
LEAF_NODE	5771:4	5771:4	5	}
EXPR_STATEMENT	5772:4	5772:53	3	bytecount = last_offset + last_bytecount - offset ;
EXPR	5772:4	5772:4	4	bytecount = last_offset + last_bytecount - offset
ASSIGN	5772:4	5772:16	5	bytecount = last_offset + last_bytecount - offset
LVAL	5772:4	5772:4	6	bytecount
FIELD	5772:4	5772:4	7	bytecount
LEAF_NODE	5772:4	5772:4	8	bytecount
ASSIGN_OP	5772:14	5772:14	6	=
LEAF_NODE	5772:14	5772:14	7	=
RVAL	5772:16	5772:47	6	last_offset + last_bytecount - offset
FIELD	5772:16	5772:16	7	last_offset
LEAF_NODE	5772:16	5772:16	8	last_offset
LEAF_NODE	5772:28	5772:28	7	+
FIELD	5772:30	5772:30	7	last_bytecount
LEAF_NODE	5772:30	5772:30	8	last_bytecount
LEAF_NODE	5772:45	5772:45	7	-
FIELD	5772:47	5772:47	7	offset
LEAF_NODE	5772:47	5772:47	8	offset
LEAF_NODE	5772:53	5772:53	4	;
EXPR_STATEMENT	5774:4	5775:68	3	newcounts = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripByteCounts\" array" ) ;
EXPR	5774:4	5774:4	4	newcounts = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripByteCounts\" array" )
ASSIGN	5774:4	5774:16	5	newcounts = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripByteCounts\" array" )
LVAL	5774:4	5774:4	6	newcounts
FIELD	5774:4	5774:4	7	newcounts
LEAF_NODE	5774:4	5774:4	8	newcounts
ASSIGN_OP	5774:14	5774:14	6	=
LEAF_NODE	5774:14	5774:14	7	=
RVAL	5774:16	5774:26	6	( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripByteCounts\" array" )
LEAF_NODE	5774:16	5774:16	7	(
TYPE_NAME	5774:17	5774:17	7	uint64
LEAF_NODE	5774:17	5774:17	8	uint64
LEAF_NODE	5774:23	5774:23	7	*
LEAF_NODE	5774:24	5774:24	7	)
FUNCTION_CALL	5774:26	5775:67	7	_TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripByteCounts\" array" )
CALLEE	5774:26	5774:26	8	_TIFFCheckMalloc
LEAF_NODE	5774:26	5774:26	9	_TIFFCheckMalloc
LEAF_NODE	5774:42	5774:42	8	(
ARGUMENT	5774:43	5774:43	8	tif
FIELD	5774:43	5774:43	9	tif
LEAF_NODE	5774:43	5774:43	10	tif
LEAF_NODE	5774:46	5774:46	8	,
ARGUMENT	5774:48	5774:48	8	nstrips
FIELD	5774:48	5774:48	9	nstrips
LEAF_NODE	5774:48	5774:48	10	nstrips
LEAF_NODE	5774:55	5774:55	8	,
ARGUMENT	5774:57	5774:57	8	sizeof ( uint64 )
FUNCTION_CALL	5774:57	5774:71	9	sizeof ( uint64 )
CALLEE	5774:57	5774:57	10	sizeof
LEAF_NODE	5774:57	5774:57	11	sizeof
LEAF_NODE	5774:64	5774:64	10	(
ARGUMENT	5774:65	5774:65	10	uint64
FIELD	5774:65	5774:65	11	uint64
LEAF_NODE	5774:65	5774:65	12	uint64
LEAF_NODE	5774:71	5774:71	10	)
LEAF_NODE	5774:72	5774:72	8	,
ARGUMENT	5775:28	5775:28	8	"for chopped \"StripByteCounts\" array"
FIELD	5775:28	5775:28	9	"for chopped \"StripByteCounts\" array"
LEAF_NODE	5775:28	5775:28	10	"for chopped \"StripByteCounts\" array"
LEAF_NODE	5775:67	5775:67	8	)
LEAF_NODE	5775:68	5775:68	4	;
EXPR_STATEMENT	5776:4	5777:65	3	newoffsets = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripOffsets\" array" ) ;
EXPR	5776:4	5776:4	4	newoffsets = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripOffsets\" array" )
ASSIGN	5776:4	5776:17	5	newoffsets = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripOffsets\" array" )
LVAL	5776:4	5776:4	6	newoffsets
FIELD	5776:4	5776:4	7	newoffsets
LEAF_NODE	5776:4	5776:4	8	newoffsets
ASSIGN_OP	5776:15	5776:15	6	=
LEAF_NODE	5776:15	5776:15	7	=
RVAL	5776:17	5776:27	6	( uint64 * ) _TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripOffsets\" array" )
LEAF_NODE	5776:17	5776:17	7	(
TYPE_NAME	5776:18	5776:18	7	uint64
LEAF_NODE	5776:18	5776:18	8	uint64
LEAF_NODE	5776:24	5776:24	7	*
LEAF_NODE	5776:25	5776:25	7	)
FUNCTION_CALL	5776:27	5777:64	7	_TIFFCheckMalloc ( tif , nstrips , sizeof ( uint64 ) , "for chopped \"StripOffsets\" array" )
CALLEE	5776:27	5776:27	8	_TIFFCheckMalloc
LEAF_NODE	5776:27	5776:27	9	_TIFFCheckMalloc
LEAF_NODE	5776:43	5776:43	8	(
ARGUMENT	5776:44	5776:44	8	tif
FIELD	5776:44	5776:44	9	tif
LEAF_NODE	5776:44	5776:44	10	tif
LEAF_NODE	5776:47	5776:47	8	,
ARGUMENT	5776:49	5776:49	8	nstrips
FIELD	5776:49	5776:49	9	nstrips
LEAF_NODE	5776:49	5776:49	10	nstrips
LEAF_NODE	5776:56	5776:56	8	,
ARGUMENT	5776:58	5776:58	8	sizeof ( uint64 )
FUNCTION_CALL	5776:58	5776:72	9	sizeof ( uint64 )
CALLEE	5776:58	5776:58	10	sizeof
LEAF_NODE	5776:58	5776:58	11	sizeof
LEAF_NODE	5776:65	5776:65	10	(
ARGUMENT	5776:66	5776:66	10	uint64
FIELD	5776:66	5776:66	11	uint64
LEAF_NODE	5776:66	5776:66	12	uint64
LEAF_NODE	5776:72	5776:72	10	)
LEAF_NODE	5776:73	5776:73	8	,
ARGUMENT	5777:28	5777:28	8	"for chopped \"StripOffsets\" array"
FIELD	5777:28	5777:28	9	"for chopped \"StripOffsets\" array"
LEAF_NODE	5777:28	5777:28	10	"for chopped \"StripOffsets\" array"
LEAF_NODE	5777:64	5777:64	8	)
LEAF_NODE	5777:65	5777:65	4	;
SELECTION	5778:4	5778:49	3	
KEYWORD	5778:4	5778:4	4	if
LEAF_NODE	5778:4	5778:4	5	if
LEAF_NODE	5778:7	5778:7	4	(
CONDITION	5778:8	5778:8	4	newcounts == NULL || newoffsets == NULL
EXPR	5778:8	5778:8	5	newcounts == NULL || newoffsets == NULL
OR	5778:8	5778:29	6	newcounts == NULL || newoffsets == NULL
EXPR	5778:8	5778:21	7	newcounts == NULL
FIELD	5778:8	5778:8	8	newcounts
LEAF_NODE	5778:8	5778:8	9	newcounts
EQ_OPERATOR	5778:18	5778:18	8	==
LEAF_NODE	5778:18	5778:18	9	==
FIELD	5778:21	5778:21	8	NULL
LEAF_NODE	5778:21	5778:21	9	NULL
LEAF_NODE	5778:26	5778:26	7	||
EXPR	5778:29	5778:43	7	newoffsets == NULL
FIELD	5778:29	5778:29	8	newoffsets
LEAF_NODE	5778:29	5778:29	9	newoffsets
EQ_OPERATOR	5778:40	5778:40	8	==
LEAF_NODE	5778:40	5778:40	9	==
FIELD	5778:43	5778:43	8	NULL
LEAF_NODE	5778:43	5778:43	9	NULL
LEAF_NODE	5778:47	5778:47	4	)
STATEMENTS	5778:49	5788:4	4	
LEAF_NODE	5778:49	5778:49	5	{
STATEMENTS	5783:8	5787:8	5	
SELECTION	5783:8	5784:12	6	
KEYWORD	5783:8	5783:8	7	if
LEAF_NODE	5783:8	5783:8	8	if
LEAF_NODE	5783:11	5783:11	7	(
CONDITION	5783:12	5783:12	7	newcounts != NULL
EXPR	5783:12	5783:25	8	newcounts != NULL
FIELD	5783:12	5783:12	9	newcounts
LEAF_NODE	5783:12	5783:12	10	newcounts
EQ_OPERATOR	5783:22	5783:22	9	!=
LEAF_NODE	5783:22	5783:22	10	!=
FIELD	5783:25	5783:25	9	NULL
LEAF_NODE	5783:25	5783:25	10	NULL
LEAF_NODE	5783:29	5783:29	7	)
STATEMENTS	5784:12	5784:12	7	
EXPR_STATEMENT	5784:12	5784:32	8	_TIFFfree ( newcounts ) ;
EXPR	5784:12	5784:12	9	_TIFFfree ( newcounts )
FUNCTION_CALL	5784:12	5784:31	10	_TIFFfree ( newcounts )
CALLEE	5784:12	5784:12	11	_TIFFfree
LEAF_NODE	5784:12	5784:12	12	_TIFFfree
LEAF_NODE	5784:21	5784:21	11	(
ARGUMENT	5784:22	5784:22	11	newcounts
FIELD	5784:22	5784:22	12	newcounts
LEAF_NODE	5784:22	5784:22	13	newcounts
LEAF_NODE	5784:31	5784:31	11	)
LEAF_NODE	5784:32	5784:32	9	;
SELECTION	5785:8	5786:12	6	
KEYWORD	5785:8	5785:8	7	if
LEAF_NODE	5785:8	5785:8	8	if
LEAF_NODE	5785:11	5785:11	7	(
CONDITION	5785:12	5785:12	7	newoffsets != NULL
EXPR	5785:12	5785:26	8	newoffsets != NULL
FIELD	5785:12	5785:12	9	newoffsets
LEAF_NODE	5785:12	5785:12	10	newoffsets
EQ_OPERATOR	5785:23	5785:23	9	!=
LEAF_NODE	5785:23	5785:23	10	!=
FIELD	5785:26	5785:26	9	NULL
LEAF_NODE	5785:26	5785:26	10	NULL
LEAF_NODE	5785:30	5785:30	7	)
STATEMENTS	5786:12	5786:12	7	
EXPR_STATEMENT	5786:12	5786:33	8	_TIFFfree ( newoffsets ) ;
EXPR	5786:12	5786:12	9	_TIFFfree ( newoffsets )
FUNCTION_CALL	5786:12	5786:32	10	_TIFFfree ( newoffsets )
CALLEE	5786:12	5786:12	11	_TIFFfree
LEAF_NODE	5786:12	5786:12	12	_TIFFfree
LEAF_NODE	5786:21	5786:21	11	(
ARGUMENT	5786:22	5786:22	11	newoffsets
FIELD	5786:22	5786:22	12	newoffsets
LEAF_NODE	5786:22	5786:22	13	newoffsets
LEAF_NODE	5786:32	5786:32	11	)
LEAF_NODE	5786:33	5786:33	9	;
JUMP_STATEMENT	5787:8	5787:14	6	return DESTINATION ;
KEYWORD	5787:8	5787:8	7	return
LEAF_NODE	5787:8	5787:8	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5787:14	5787:14	7	;
LEAF_NODE	5788:4	5788:4	5	}
ITERATION	5794:4	5795:4	3	
KEYWORD	5794:4	5794:4	4	for
LEAF_NODE	5794:4	5794:4	5	for
LEAF_NODE	5794:8	5794:8	4	(
FOR_INIT	5794:9	5794:14	4	i = 0 ;
EXPR	5794:9	5794:9	5	i = 0
ASSIGN	5794:9	5794:13	6	i = 0
LVAL	5794:9	5794:9	7	i
FIELD	5794:9	5794:9	8	i
LEAF_NODE	5794:9	5794:9	9	i
ASSIGN_OP	5794:11	5794:11	7	=
LEAF_NODE	5794:11	5794:11	8	=
RVAL	5794:13	5794:13	7	0
FIELD	5794:13	5794:13	8	0
LEAF_NODE	5794:13	5794:13	9	0
LEAF_NODE	5794:14	5794:14	5	;
CONDITION	5794:16	5794:16	4	i < nstrips
EXPR	5794:16	5794:20	5	i < nstrips
FIELD	5794:16	5794:16	6	i
LEAF_NODE	5794:16	5794:16	7	i
REL_OPERATOR	5794:18	5794:18	6	<
LEAF_NODE	5794:18	5794:18	7	<
FIELD	5794:20	5794:20	6	nstrips
LEAF_NODE	5794:20	5794:20	7	nstrips
LEAF_NODE	5794:27	5794:27	4	;
FOR_EXPR	5794:29	5794:29	4	i ++
EXPR	5794:29	5794:29	5	i ++
FIELD	5794:29	5794:30	6	i ++
LEAF_NODE	5794:29	5794:29	7	i
LEAF_NODE	5794:30	5794:30	7	++
LEAF_NODE	5794:32	5794:32	4	)
STATEMENTS	5795:4	5802:4	4	
LEAF_NODE	5795:4	5795:4	5	{
STATEMENTS	5796:8	5801:8	5	
SELECTION	5796:8	5797:12	6	
KEYWORD	5796:8	5796:8	7	if
LEAF_NODE	5796:8	5796:8	8	if
LEAF_NODE	5796:11	5796:11	7	(
CONDITION	5796:12	5796:12	7	stripbytes > bytecount
EXPR	5796:12	5796:25	8	stripbytes > bytecount
FIELD	5796:12	5796:12	9	stripbytes
LEAF_NODE	5796:12	5796:12	10	stripbytes
REL_OPERATOR	5796:23	5796:23	9	>
LEAF_NODE	5796:23	5796:23	10	>
FIELD	5796:25	5796:25	9	bytecount
LEAF_NODE	5796:25	5796:25	10	bytecount
LEAF_NODE	5796:34	5796:34	7	)
STATEMENTS	5797:12	5797:12	7	
EXPR_STATEMENT	5797:12	5797:34	8	stripbytes = bytecount ;
EXPR	5797:12	5797:12	9	stripbytes = bytecount
ASSIGN	5797:12	5797:25	10	stripbytes = bytecount
LVAL	5797:12	5797:12	11	stripbytes
FIELD	5797:12	5797:12	12	stripbytes
LEAF_NODE	5797:12	5797:12	13	stripbytes
ASSIGN_OP	5797:23	5797:23	11	=
LEAF_NODE	5797:23	5797:23	12	=
RVAL	5797:25	5797:25	11	bytecount
FIELD	5797:25	5797:25	12	bytecount
LEAF_NODE	5797:25	5797:25	13	bytecount
LEAF_NODE	5797:34	5797:34	9	;
EXPR_STATEMENT	5798:8	5798:33	6	newcounts [ i ] = stripbytes ;
EXPR	5798:8	5798:8	7	newcounts [ i ] = stripbytes
ASSIGN	5798:8	5798:23	8	newcounts [ i ] = stripbytes
LVAL	5798:8	5798:8	9	newcounts [ i ]
FIELD	5798:8	5798:19	10	newcounts [ i ]
LEAF_NODE	5798:8	5798:8	11	newcounts
LEAF_NODE	5798:17	5798:17	11	[
EXPR	5798:18	5798:18	11	i
FIELD	5798:18	5798:18	12	i
LEAF_NODE	5798:18	5798:18	13	i
LEAF_NODE	5798:19	5798:19	11	]
ASSIGN_OP	5798:21	5798:21	9	=
LEAF_NODE	5798:21	5798:21	10	=
RVAL	5798:23	5798:23	9	stripbytes
FIELD	5798:23	5798:23	10	stripbytes
LEAF_NODE	5798:23	5798:23	11	stripbytes
LEAF_NODE	5798:33	5798:33	7	;
EXPR_STATEMENT	5799:8	5799:47	6	newoffsets [ i ] = stripbytes ? offset : 0 ;
EXPR	5799:8	5799:8	7	newoffsets [ i ] = stripbytes ? offset : 0
ASSIGN	5799:8	5799:24	8	newoffsets [ i ] = stripbytes ? offset : 0
LVAL	5799:8	5799:8	9	newoffsets [ i ]
FIELD	5799:8	5799:20	10	newoffsets [ i ]
LEAF_NODE	5799:8	5799:8	11	newoffsets
LEAF_NODE	5799:18	5799:18	11	[
EXPR	5799:19	5799:19	11	i
FIELD	5799:19	5799:19	12	i
LEAF_NODE	5799:19	5799:19	13	i
LEAF_NODE	5799:20	5799:20	11	]
ASSIGN_OP	5799:22	5799:22	9	=
LEAF_NODE	5799:22	5799:22	10	=
RVAL	5799:24	5799:24	9	stripbytes ? offset : 0
COND_EXPR	5799:24	5799:46	10	stripbytes ? offset : 0
CONDITION	5799:24	5799:24	11	stripbytes
FIELD	5799:24	5799:24	12	stripbytes
LEAF_NODE	5799:24	5799:24	13	stripbytes
LEAF_NODE	5799:35	5799:35	11	?
EXPR	5799:37	5799:37	11	offset
FIELD	5799:37	5799:37	12	offset
LEAF_NODE	5799:37	5799:37	13	offset
LEAF_NODE	5799:44	5799:44	11	:
FIELD	5799:46	5799:46	11	0
LEAF_NODE	5799:46	5799:46	12	0
LEAF_NODE	5799:47	5799:47	7	;
EXPR_STATEMENT	5800:8	5800:28	6	offset += stripbytes ;
EXPR	5800:8	5800:8	7	offset += stripbytes
ASSIGN	5800:8	5800:18	8	offset += stripbytes
LVAL	5800:8	5800:8	9	offset
FIELD	5800:8	5800:8	10	offset
LEAF_NODE	5800:8	5800:8	11	offset
ASSIGN_OP	5800:15	5800:15	9	+=
LEAF_NODE	5800:15	5800:15	10	+=
RVAL	5800:18	5800:18	9	stripbytes
FIELD	5800:18	5800:18	10	stripbytes
LEAF_NODE	5800:18	5800:18	11	stripbytes
LEAF_NODE	5800:28	5800:28	7	;
EXPR_STATEMENT	5801:8	5801:31	6	bytecount -= stripbytes ;
EXPR	5801:8	5801:8	7	bytecount -= stripbytes
ASSIGN	5801:8	5801:21	8	bytecount -= stripbytes
LVAL	5801:8	5801:8	9	bytecount
FIELD	5801:8	5801:8	10	bytecount
LEAF_NODE	5801:8	5801:8	11	bytecount
ASSIGN_OP	5801:18	5801:18	9	-=
LEAF_NODE	5801:18	5801:18	10	-=
RVAL	5801:21	5801:21	9	stripbytes
FIELD	5801:21	5801:21	10	stripbytes
LEAF_NODE	5801:21	5801:21	11	stripbytes
LEAF_NODE	5801:31	5801:31	7	;
LEAF_NODE	5802:4	5802:4	5	}
EXPR_STATEMENT	5807:4	5807:52	3	td -> td_stripsperimage = td -> td_nstrips = nstrips ;
EXPR	5807:4	5807:4	4	td -> td_stripsperimage = td -> td_nstrips = nstrips
ASSIGN	5807:4	5807:28	5	td -> td_stripsperimage = td -> td_nstrips = nstrips
LVAL	5807:4	5807:4	6	td -> td_stripsperimage
FIELD	5807:4	5807:8	7	td -> td_stripsperimage
LEAF_NODE	5807:4	5807:4	8	td
LEAF_NODE	5807:6	5807:6	8	->
LEAF_NODE	5807:8	5807:8	8	td_stripsperimage
ASSIGN_OP	5807:26	5807:26	6	=
LEAF_NODE	5807:26	5807:26	7	=
RVAL	5807:28	5807:28	6	td -> td_nstrips = nstrips
ASSIGN	5807:28	5807:45	7	td -> td_nstrips = nstrips
LVAL	5807:28	5807:28	8	td -> td_nstrips
FIELD	5807:28	5807:32	9	td -> td_nstrips
LEAF_NODE	5807:28	5807:28	10	td
LEAF_NODE	5807:30	5807:30	10	->
LEAF_NODE	5807:32	5807:32	10	td_nstrips
ASSIGN_OP	5807:43	5807:43	8	=
LEAF_NODE	5807:43	5807:43	9	=
RVAL	5807:45	5807:45	8	nstrips
FIELD	5807:45	5807:45	9	nstrips
LEAF_NODE	5807:45	5807:45	10	nstrips
LEAF_NODE	5807:52	5807:52	4	;
EXPR_STATEMENT	5808:4	5808:57	3	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ;
EXPR	5808:4	5808:4	4	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
FUNCTION_CALL	5808:4	5808:56	5	TIFFSetField ( tif , TIFFTAG_ROWSPERSTRIP , rowsperstrip )
CALLEE	5808:4	5808:4	6	TIFFSetField
LEAF_NODE	5808:4	5808:4	7	TIFFSetField
LEAF_NODE	5808:16	5808:16	6	(
ARGUMENT	5808:17	5808:17	6	tif
FIELD	5808:17	5808:17	7	tif
LEAF_NODE	5808:17	5808:17	8	tif
LEAF_NODE	5808:20	5808:20	6	,
ARGUMENT	5808:22	5808:22	6	TIFFTAG_ROWSPERSTRIP
FIELD	5808:22	5808:22	7	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	5808:22	5808:22	8	TIFFTAG_ROWSPERSTRIP
LEAF_NODE	5808:42	5808:42	6	,
ARGUMENT	5808:44	5808:44	6	rowsperstrip
FIELD	5808:44	5808:44	7	rowsperstrip
LEAF_NODE	5808:44	5808:44	8	rowsperstrip
LEAF_NODE	5808:56	5808:56	6	)
LEAF_NODE	5808:57	5808:57	4	;
EXPR_STATEMENT	5810:4	5810:38	3	_TIFFfree ( td -> td_stripbytecount_p ) ;
EXPR	5810:4	5810:4	4	_TIFFfree ( td -> td_stripbytecount_p )
FUNCTION_CALL	5810:4	5810:37	5	_TIFFfree ( td -> td_stripbytecount_p )
CALLEE	5810:4	5810:4	6	_TIFFfree
LEAF_NODE	5810:4	5810:4	7	_TIFFfree
LEAF_NODE	5810:13	5810:13	6	(
ARGUMENT	5810:14	5810:14	6	td -> td_stripbytecount_p
FIELD	5810:14	5810:18	7	td -> td_stripbytecount_p
LEAF_NODE	5810:14	5810:14	8	td
LEAF_NODE	5810:16	5810:16	8	->
LEAF_NODE	5810:18	5810:18	8	td_stripbytecount_p
LEAF_NODE	5810:37	5810:37	6	)
LEAF_NODE	5810:38	5810:38	4	;
EXPR_STATEMENT	5811:4	5811:35	3	_TIFFfree ( td -> td_stripoffset_p ) ;
EXPR	5811:4	5811:4	4	_TIFFfree ( td -> td_stripoffset_p )
FUNCTION_CALL	5811:4	5811:34	5	_TIFFfree ( td -> td_stripoffset_p )
CALLEE	5811:4	5811:4	6	_TIFFfree
LEAF_NODE	5811:4	5811:4	7	_TIFFfree
LEAF_NODE	5811:13	5811:13	6	(
ARGUMENT	5811:14	5811:14	6	td -> td_stripoffset_p
FIELD	5811:14	5811:18	7	td -> td_stripoffset_p
LEAF_NODE	5811:14	5811:14	8	td
LEAF_NODE	5811:16	5811:16	8	->
LEAF_NODE	5811:18	5811:18	8	td_stripoffset_p
LEAF_NODE	5811:34	5811:34	6	)
LEAF_NODE	5811:35	5811:35	4	;
EXPR_STATEMENT	5812:4	5812:39	3	td -> td_stripbytecount_p = newcounts ;
EXPR	5812:4	5812:4	4	td -> td_stripbytecount_p = newcounts
ASSIGN	5812:4	5812:30	5	td -> td_stripbytecount_p = newcounts
LVAL	5812:4	5812:4	6	td -> td_stripbytecount_p
FIELD	5812:4	5812:8	7	td -> td_stripbytecount_p
LEAF_NODE	5812:4	5812:4	8	td
LEAF_NODE	5812:6	5812:6	8	->
LEAF_NODE	5812:8	5812:8	8	td_stripbytecount_p
ASSIGN_OP	5812:28	5812:28	6	=
LEAF_NODE	5812:28	5812:28	7	=
RVAL	5812:30	5812:30	6	newcounts
FIELD	5812:30	5812:30	7	newcounts
LEAF_NODE	5812:30	5812:30	8	newcounts
LEAF_NODE	5812:39	5812:39	4	;
EXPR_STATEMENT	5813:4	5813:37	3	td -> td_stripoffset_p = newoffsets ;
EXPR	5813:4	5813:4	4	td -> td_stripoffset_p = newoffsets
ASSIGN	5813:4	5813:27	5	td -> td_stripoffset_p = newoffsets
LVAL	5813:4	5813:4	6	td -> td_stripoffset_p
FIELD	5813:4	5813:8	7	td -> td_stripoffset_p
LEAF_NODE	5813:4	5813:4	8	td
LEAF_NODE	5813:6	5813:6	8	->
LEAF_NODE	5813:8	5813:8	8	td_stripoffset_p
ASSIGN_OP	5813:25	5813:25	6	=
LEAF_NODE	5813:25	5813:25	7	=
RVAL	5813:27	5813:27	6	newoffsets
FIELD	5813:27	5813:27	7	newoffsets
LEAF_NODE	5813:27	5813:27	8	newoffsets
LEAF_NODE	5813:37	5813:37	4	;
EXPR_STATEMENT	5815:4	5815:35	3	td -> td_stripbytecountsorted = 1 ;
EXPR	5815:4	5815:4	4	td -> td_stripbytecountsorted = 1
ASSIGN	5815:4	5815:34	5	td -> td_stripbytecountsorted = 1
LVAL	5815:4	5815:4	6	td -> td_stripbytecountsorted
FIELD	5815:4	5815:8	7	td -> td_stripbytecountsorted
LEAF_NODE	5815:4	5815:4	8	td
LEAF_NODE	5815:6	5815:6	8	->
LEAF_NODE	5815:8	5815:8	8	td_stripbytecountsorted
ASSIGN_OP	5815:32	5815:32	6	=
LEAF_NODE	5815:32	5815:32	7	=
RVAL	5815:34	5815:34	6	1
FIELD	5815:34	5815:34	7	1
LEAF_NODE	5815:34	5815:34	8	1
LEAF_NODE	5815:35	5815:35	4	;
EXPR_STATEMENT	5817:4	5817:42	3	tif -> tif_flags |= TIFF_CHOPPEDUPARRAYS ;
EXPR	5817:4	5817:4	4	tif -> tif_flags |= TIFF_CHOPPEDUPARRAYS
ASSIGN	5817:4	5817:22	5	tif -> tif_flags |= TIFF_CHOPPEDUPARRAYS
LVAL	5817:4	5817:4	6	tif -> tif_flags
FIELD	5817:4	5817:9	7	tif -> tif_flags
LEAF_NODE	5817:4	5817:4	8	tif
LEAF_NODE	5817:7	5817:7	8	->
LEAF_NODE	5817:9	5817:9	8	tif_flags
ASSIGN_OP	5817:19	5817:19	6	|=
LEAF_NODE	5817:19	5817:19	7	|=
RVAL	5817:22	5817:22	6	TIFF_CHOPPEDUPARRAYS
FIELD	5817:22	5817:22	7	TIFF_CHOPPEDUPARRAYS
LEAF_NODE	5817:22	5817:22	8	TIFF_CHOPPEDUPARRAYS
LEAF_NODE	5817:42	5817:42	4	;
LEAF_NODE	5818:0	5818:0	2	}
FUNCTION_DEF	5827:0	5889:0	1	
RETURN_TYPE	5827:0	5827:7	2	static void
LEAF_NODE	5827:0	5827:0	3	static
TYPE_NAME	5827:7	5827:7	3	void
LEAF_NODE	5827:7	5827:7	4	void
FUNCTION_NAME	5828:0	5828:0	2	ChopUpSingleUncompressedStrip
LEAF_NODE	5828:0	5828:0	3	ChopUpSingleUncompressedStrip
PARAMETER_LIST	5828:29	5828:39	2	( TIFF * tif )
LEAF_NODE	5828:29	5828:29	3	(
PARAMETER_DECL	5828:30	5828:36	3	TIFF * tif
TYPE	5828:30	5828:34	4	TIFF *
TYPE_NAME	5828:30	5828:30	5	TIFF
LEAF_NODE	5828:30	5828:30	6	TIFF
POINTER	5828:34	5828:34	5	*
LEAF_NODE	5828:34	5828:34	6	*
NAME	5828:36	5828:36	4	tif
LEAF_NODE	5828:36	5828:36	5	tif
LEAF_NODE	5828:39	5828:39	3	)
LEAF_NODE	5829:0	5829:0	2	{
STATEMENTS	5830:1	5888:8	2	
LEAF_NODE	5830:1	5830:1	3	register
SIMPLE_DECL	5830:10	5830:43	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	5830:10	5830:25	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	5830:10	5830:24	5	TIFFDirectory *
TYPE_NAME	5830:10	5830:10	6	TIFFDirectory
LEAF_NODE	5830:10	5830:10	7	TIFFDirectory
POINTER	5830:24	5830:24	6	*
LEAF_NODE	5830:24	5830:24	7	*
NAME	5830:25	5830:25	5	td
LEAF_NODE	5830:25	5830:25	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	5830:25	5830:25	5	td = & tif -> tif_dir
ASSIGN	5830:25	5830:30	6	td = & tif -> tif_dir
LVAL	5830:25	5830:25	7	td
NAME	5830:25	5830:25	8	td
LEAF_NODE	5830:25	5830:25	9	td
ASSIGN_OP	5830:28	5830:28	7	=
LEAF_NODE	5830:28	5830:28	8	=
RVAL	5830:30	5830:30	7	& tif -> tif_dir
UNARY_EXPR	5830:30	5830:31	8	& tif -> tif_dir
UNARY_OPERATOR	5830:30	5830:30	9	&
LEAF_NODE	5830:30	5830:30	10	&
FIELD	5830:31	5830:36	9	tif -> tif_dir
LEAF_NODE	5830:31	5830:31	10	tif
LEAF_NODE	5830:34	5830:34	10	->
LEAF_NODE	5830:36	5830:36	10	tif_dir
LEAF_NODE	5830:43	5830:43	4	;
SIMPLE_DECL	5831:1	5831:17	3	uint64 bytecount ;
VAR_DECL	5831:1	5831:8	4	uint64 bytecount
TYPE	5831:1	5831:1	5	uint64
TYPE_NAME	5831:1	5831:1	6	uint64
LEAF_NODE	5831:1	5831:1	7	uint64
NAME	5831:8	5831:8	5	bytecount
LEAF_NODE	5831:8	5831:8	6	bytecount
LEAF_NODE	5831:17	5831:17	4	;
SIMPLE_DECL	5832:1	5832:14	3	uint64 offset ;
VAR_DECL	5832:1	5832:8	4	uint64 offset
TYPE	5832:1	5832:1	5	uint64
TYPE_NAME	5832:1	5832:1	6	uint64
LEAF_NODE	5832:1	5832:1	7	uint64
NAME	5832:8	5832:8	5	offset
LEAF_NODE	5832:8	5832:8	6	offset
LEAF_NODE	5832:14	5832:14	4	;
SIMPLE_DECL	5833:1	5833:16	3	uint32 rowblock ;
VAR_DECL	5833:1	5833:8	4	uint32 rowblock
TYPE	5833:1	5833:1	5	uint32
TYPE_NAME	5833:1	5833:1	6	uint32
LEAF_NODE	5833:1	5833:1	7	uint32
NAME	5833:8	5833:8	5	rowblock
LEAF_NODE	5833:8	5833:8	6	rowblock
LEAF_NODE	5833:16	5833:16	4	;
SIMPLE_DECL	5834:1	5834:21	3	uint64 rowblockbytes ;
VAR_DECL	5834:1	5834:8	4	uint64 rowblockbytes
TYPE	5834:1	5834:1	5	uint64
TYPE_NAME	5834:1	5834:1	6	uint64
LEAF_NODE	5834:1	5834:1	7	uint64
NAME	5834:8	5834:8	5	rowblockbytes
LEAF_NODE	5834:8	5834:8	6	rowblockbytes
LEAF_NODE	5834:21	5834:21	4	;
SIMPLE_DECL	5835:1	5835:18	3	uint64 stripbytes ;
VAR_DECL	5835:1	5835:8	4	uint64 stripbytes
TYPE	5835:1	5835:1	5	uint64
TYPE_NAME	5835:1	5835:1	6	uint64
LEAF_NODE	5835:1	5835:1	7	uint64
NAME	5835:8	5835:8	5	stripbytes
LEAF_NODE	5835:8	5835:8	6	stripbytes
LEAF_NODE	5835:18	5835:18	4	;
SIMPLE_DECL	5836:1	5836:15	3	uint32 nstrips ;
VAR_DECL	5836:1	5836:8	4	uint32 nstrips
TYPE	5836:1	5836:1	5	uint32
TYPE_NAME	5836:1	5836:1	6	uint32
LEAF_NODE	5836:1	5836:1	7	uint32
NAME	5836:8	5836:8	5	nstrips
LEAF_NODE	5836:8	5836:8	6	nstrips
LEAF_NODE	5836:15	5836:15	4	;
SIMPLE_DECL	5837:1	5837:20	3	uint32 rowsperstrip ;
VAR_DECL	5837:1	5837:8	4	uint32 rowsperstrip
TYPE	5837:1	5837:1	5	uint32
TYPE_NAME	5837:1	5837:1	6	uint32
LEAF_NODE	5837:1	5837:1	7	uint32
NAME	5837:8	5837:8	5	rowsperstrip
LEAF_NODE	5837:8	5837:8	6	rowsperstrip
LEAF_NODE	5837:20	5837:20	4	;
EXPR_STATEMENT	5839:1	5839:43	3	bytecount = TIFFGetStrileByteCount ( tif , 0 ) ;
EXPR	5839:1	5839:1	4	bytecount = TIFFGetStrileByteCount ( tif , 0 )
ASSIGN	5839:1	5839:13	5	bytecount = TIFFGetStrileByteCount ( tif , 0 )
LVAL	5839:1	5839:1	6	bytecount
FIELD	5839:1	5839:1	7	bytecount
LEAF_NODE	5839:1	5839:1	8	bytecount
ASSIGN_OP	5839:11	5839:11	6	=
LEAF_NODE	5839:11	5839:11	7	=
RVAL	5839:13	5839:13	6	TIFFGetStrileByteCount ( tif , 0 )
FUNCTION_CALL	5839:13	5839:42	7	TIFFGetStrileByteCount ( tif , 0 )
CALLEE	5839:13	5839:13	8	TIFFGetStrileByteCount
LEAF_NODE	5839:13	5839:13	9	TIFFGetStrileByteCount
LEAF_NODE	5839:35	5839:35	8	(
ARGUMENT	5839:36	5839:36	8	tif
FIELD	5839:36	5839:36	9	tif
LEAF_NODE	5839:36	5839:36	10	tif
LEAF_NODE	5839:39	5839:39	8	,
ARGUMENT	5839:41	5839:41	8	0
FIELD	5839:41	5839:41	9	0
LEAF_NODE	5839:41	5839:41	10	0
LEAF_NODE	5839:42	5839:42	8	)
LEAF_NODE	5839:43	5839:43	4	;
SELECTION	5843:8	5844:12	3	
KEYWORD	5843:8	5843:8	4	if
LEAF_NODE	5843:8	5843:8	5	if
LEAF_NODE	5843:10	5843:10	4	(
CONDITION	5843:12	5843:12	4	bytecount == 0 && tif -> tif_mode != O_RDONLY
EXPR	5843:12	5843:12	5	bytecount == 0 && tif -> tif_mode != O_RDONLY
AND	5843:12	5843:30	6	bytecount == 0 && tif -> tif_mode != O_RDONLY
EXPR	5843:12	5843:25	7	bytecount == 0
FIELD	5843:12	5843:12	8	bytecount
LEAF_NODE	5843:12	5843:12	9	bytecount
EQ_OPERATOR	5843:22	5843:22	8	==
LEAF_NODE	5843:22	5843:22	9	==
FIELD	5843:25	5843:25	8	0
LEAF_NODE	5843:25	5843:25	9	0
LEAF_NODE	5843:27	5843:27	7	&&
EXPR	5843:30	5843:47	7	tif -> tif_mode != O_RDONLY
FIELD	5843:30	5843:35	8	tif -> tif_mode
LEAF_NODE	5843:30	5843:30	9	tif
LEAF_NODE	5843:33	5843:33	9	->
LEAF_NODE	5843:35	5843:35	9	tif_mode
EQ_OPERATOR	5843:44	5843:44	8	!=
LEAF_NODE	5843:44	5843:44	9	!=
FIELD	5843:47	5843:47	8	O_RDONLY
LEAF_NODE	5843:47	5843:47	9	O_RDONLY
LEAF_NODE	5843:56	5843:56	4	)
STATEMENTS	5844:12	5844:12	4	
JUMP_STATEMENT	5844:12	5844:18	5	return DESTINATION ;
KEYWORD	5844:12	5844:12	6	return
LEAF_NODE	5844:12	5844:12	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5844:18	5844:18	6	;
EXPR_STATEMENT	5845:1	5845:40	3	offset = TIFFGetStrileByteCount ( tif , 0 ) ;
EXPR	5845:1	5845:1	4	offset = TIFFGetStrileByteCount ( tif , 0 )
ASSIGN	5845:1	5845:10	5	offset = TIFFGetStrileByteCount ( tif , 0 )
LVAL	5845:1	5845:1	6	offset
FIELD	5845:1	5845:1	7	offset
LEAF_NODE	5845:1	5845:1	8	offset
ASSIGN_OP	5845:8	5845:8	6	=
LEAF_NODE	5845:8	5845:8	7	=
RVAL	5845:10	5845:10	6	TIFFGetStrileByteCount ( tif , 0 )
FUNCTION_CALL	5845:10	5845:39	7	TIFFGetStrileByteCount ( tif , 0 )
CALLEE	5845:10	5845:10	8	TIFFGetStrileByteCount
LEAF_NODE	5845:10	5845:10	9	TIFFGetStrileByteCount
LEAF_NODE	5845:32	5845:32	8	(
ARGUMENT	5845:33	5845:33	8	tif
FIELD	5845:33	5845:33	9	tif
LEAF_NODE	5845:33	5845:33	10	tif
LEAF_NODE	5845:36	5845:36	8	,
ARGUMENT	5845:38	5845:38	8	0
FIELD	5845:38	5845:38	9	0
LEAF_NODE	5845:38	5845:38	10	0
LEAF_NODE	5845:39	5845:39	8	)
LEAF_NODE	5845:40	5845:40	4	;
EXPR_STATEMENT	5846:1	5846:51	3	assert ( td -> td_planarconfig == PLANARCONFIG_CONTIG ) ;
EXPR	5846:1	5846:1	4	assert ( td -> td_planarconfig == PLANARCONFIG_CONTIG )
FUNCTION_CALL	5846:1	5846:50	5	assert ( td -> td_planarconfig == PLANARCONFIG_CONTIG )
CALLEE	5846:1	5846:1	6	assert
LEAF_NODE	5846:1	5846:1	7	assert
LEAF_NODE	5846:7	5846:7	6	(
ARGUMENT	5846:8	5846:31	6	td -> td_planarconfig == PLANARCONFIG_CONTIG
FIELD	5846:8	5846:12	7	td -> td_planarconfig
LEAF_NODE	5846:8	5846:8	8	td
LEAF_NODE	5846:10	5846:10	8	->
LEAF_NODE	5846:12	5846:12	8	td_planarconfig
EQ_OPERATOR	5846:28	5846:28	7	==
LEAF_NODE	5846:28	5846:28	8	==
FIELD	5846:31	5846:31	7	PLANARCONFIG_CONTIG
LEAF_NODE	5846:31	5846:31	8	PLANARCONFIG_CONTIG
LEAF_NODE	5846:50	5846:50	6	)
LEAF_NODE	5846:51	5846:51	4	;
SELECTION	5847:1	5849:2	3	
KEYWORD	5847:1	5847:1	4	if
LEAF_NODE	5847:1	5847:1	5	if
LEAF_NODE	5847:4	5847:4	4	(
CONDITION	5847:5	5847:5	4	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
EXPR	5847:5	5847:5	5	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
AND	5847:5	5848:5	6	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
EXPR	5847:5	5847:45	7	( td -> td_photometric == PHOTOMETRIC_YCBCR )
LEAF_NODE	5847:5	5847:5	8	(
FIELD	5847:6	5847:10	8	td -> td_photometric
LEAF_NODE	5847:6	5847:6	9	td
LEAF_NODE	5847:8	5847:8	9	->
LEAF_NODE	5847:10	5847:10	9	td_photometric
EQ_OPERATOR	5847:25	5847:25	8	==
LEAF_NODE	5847:25	5847:25	9	==
FIELD	5847:28	5847:28	8	PHOTOMETRIC_YCBCR
LEAF_NODE	5847:28	5847:28	9	PHOTOMETRIC_YCBCR
LEAF_NODE	5847:45	5847:45	8	)
LEAF_NODE	5847:46	5847:46	7	&&
EXPR	5848:5	5848:23	7	( ! isUpSampled ( tif ) )
LEAF_NODE	5848:5	5848:5	8	(
UNARY_EXPR	5848:6	5848:7	8	! isUpSampled ( tif )
UNARY_OPERATOR	5848:6	5848:6	9	!
LEAF_NODE	5848:6	5848:6	10	!
FUNCTION_CALL	5848:7	5848:22	9	isUpSampled ( tif )
CALLEE	5848:7	5848:7	10	isUpSampled
LEAF_NODE	5848:7	5848:7	11	isUpSampled
LEAF_NODE	5848:18	5848:18	10	(
ARGUMENT	5848:19	5848:19	10	tif
FIELD	5848:19	5848:19	11	tif
LEAF_NODE	5848:19	5848:19	12	tif
LEAF_NODE	5848:22	5848:22	10	)
LEAF_NODE	5848:23	5848:23	8	)
LEAF_NODE	5848:24	5848:24	4	)
STATEMENTS	5849:2	5849:2	4	
EXPR_STATEMENT	5849:2	5849:39	5	rowblock = td -> td_ycbcrsubsampling [ 1 ] ;
EXPR	5849:2	5849:2	6	rowblock = td -> td_ycbcrsubsampling [ 1 ]
ASSIGN	5849:2	5849:13	7	rowblock = td -> td_ycbcrsubsampling [ 1 ]
LVAL	5849:2	5849:2	8	rowblock
FIELD	5849:2	5849:2	9	rowblock
LEAF_NODE	5849:2	5849:2	10	rowblock
ASSIGN_OP	5849:11	5849:11	8	=
LEAF_NODE	5849:11	5849:11	9	=
RVAL	5849:13	5849:13	8	td -> td_ycbcrsubsampling [ 1 ]
FIELD	5849:13	5849:38	9	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	5849:13	5849:13	10	td
LEAF_NODE	5849:15	5849:15	10	->
LEAF_NODE	5849:17	5849:17	10	td_ycbcrsubsampling
LEAF_NODE	5849:36	5849:36	10	[
EXPR	5849:37	5849:37	10	1
FIELD	5849:37	5849:37	11	1
LEAF_NODE	5849:37	5849:37	12	1
LEAF_NODE	5849:38	5849:38	10	]
LEAF_NODE	5849:39	5849:39	6	;
SELECTION	5850:1	5851:2	3	
KEYWORD	5850:1	5850:1	4	else
LEAF_NODE	5850:1	5850:1	5	else
STATEMENTS	5851:2	5851:2	4	
EXPR_STATEMENT	5851:2	5851:14	5	rowblock = 1 ;
EXPR	5851:2	5851:2	6	rowblock = 1
ASSIGN	5851:2	5851:13	7	rowblock = 1
LVAL	5851:2	5851:2	8	rowblock
FIELD	5851:2	5851:2	9	rowblock
LEAF_NODE	5851:2	5851:2	10	rowblock
ASSIGN_OP	5851:11	5851:11	8	=
LEAF_NODE	5851:11	5851:11	9	=
RVAL	5851:13	5851:13	8	1
FIELD	5851:13	5851:13	9	1
LEAF_NODE	5851:13	5851:13	10	1
LEAF_NODE	5851:14	5851:14	6	;
EXPR_STATEMENT	5852:1	5852:47	3	rowblockbytes = TIFFVTileSize64 ( tif , rowblock ) ;
EXPR	5852:1	5852:1	4	rowblockbytes = TIFFVTileSize64 ( tif , rowblock )
ASSIGN	5852:1	5852:17	5	rowblockbytes = TIFFVTileSize64 ( tif , rowblock )
LVAL	5852:1	5852:1	6	rowblockbytes
FIELD	5852:1	5852:1	7	rowblockbytes
LEAF_NODE	5852:1	5852:1	8	rowblockbytes
ASSIGN_OP	5852:15	5852:15	6	=
LEAF_NODE	5852:15	5852:15	7	=
RVAL	5852:17	5852:17	6	TIFFVTileSize64 ( tif , rowblock )
FUNCTION_CALL	5852:17	5852:46	7	TIFFVTileSize64 ( tif , rowblock )
CALLEE	5852:17	5852:17	8	TIFFVTileSize64
LEAF_NODE	5852:17	5852:17	9	TIFFVTileSize64
LEAF_NODE	5852:32	5852:32	8	(
ARGUMENT	5852:33	5852:33	8	tif
FIELD	5852:33	5852:33	9	tif
LEAF_NODE	5852:33	5852:33	10	tif
LEAF_NODE	5852:36	5852:36	8	,
ARGUMENT	5852:38	5852:38	8	rowblock
FIELD	5852:38	5852:38	9	rowblock
LEAF_NODE	5852:38	5852:38	10	rowblock
LEAF_NODE	5852:46	5852:46	8	)
LEAF_NODE	5852:47	5852:47	4	;
SELECTION	5857:1	5857:41	3	
KEYWORD	5857:1	5857:1	4	if
LEAF_NODE	5857:1	5857:1	5	if
LEAF_NODE	5857:4	5857:4	4	(
CONDITION	5857:5	5857:5	4	rowblockbytes > STRIP_SIZE_DEFAULT
EXPR	5857:5	5857:21	5	rowblockbytes > STRIP_SIZE_DEFAULT
FIELD	5857:5	5857:5	6	rowblockbytes
LEAF_NODE	5857:5	5857:5	7	rowblockbytes
REL_OPERATOR	5857:19	5857:19	6	>
LEAF_NODE	5857:19	5857:19	7	>
FIELD	5857:21	5857:21	6	STRIP_SIZE_DEFAULT
LEAF_NODE	5857:21	5857:21	7	STRIP_SIZE_DEFAULT
LEAF_NODE	5857:39	5857:39	4	)
STATEMENTS	5857:41	5860:1	4	
LEAF_NODE	5857:41	5857:41	5	{
STATEMENTS	5858:2	5859:2	5	
EXPR_STATEMENT	5858:2	5858:28	6	stripbytes = rowblockbytes ;
EXPR	5858:2	5858:2	7	stripbytes = rowblockbytes
ASSIGN	5858:2	5858:15	8	stripbytes = rowblockbytes
LVAL	5858:2	5858:2	9	stripbytes
FIELD	5858:2	5858:2	10	stripbytes
LEAF_NODE	5858:2	5858:2	11	stripbytes
ASSIGN_OP	5858:13	5858:13	9	=
LEAF_NODE	5858:13	5858:13	10	=
RVAL	5858:15	5858:15	9	rowblockbytes
FIELD	5858:15	5858:15	10	rowblockbytes
LEAF_NODE	5858:15	5858:15	11	rowblockbytes
LEAF_NODE	5858:28	5858:28	7	;
EXPR_STATEMENT	5859:2	5859:25	6	rowsperstrip = rowblock ;
EXPR	5859:2	5859:2	7	rowsperstrip = rowblock
ASSIGN	5859:2	5859:17	8	rowsperstrip = rowblock
LVAL	5859:2	5859:2	9	rowsperstrip
FIELD	5859:2	5859:2	10	rowsperstrip
LEAF_NODE	5859:2	5859:2	11	rowsperstrip
ASSIGN_OP	5859:15	5859:15	9	=
LEAF_NODE	5859:15	5859:15	10	=
RVAL	5859:17	5859:17	9	rowblock
FIELD	5859:17	5859:17	10	rowblock
LEAF_NODE	5859:17	5859:17	11	rowblock
LEAF_NODE	5859:25	5859:25	7	;
LEAF_NODE	5860:1	5860:1	5	}
SELECTION	5860:3	5860:8	3	
KEYWORD	5860:3	5860:3	4	else
LEAF_NODE	5860:3	5860:3	5	else
STATEMENTS	5860:8	5860:8	4	
SELECTION	5860:8	5860:32	5	
KEYWORD	5860:8	5860:8	6	if
LEAF_NODE	5860:8	5860:8	7	if
LEAF_NODE	5860:11	5860:11	6	(
CONDITION	5860:12	5860:12	6	rowblockbytes > 0
EXPR	5860:12	5860:28	7	rowblockbytes > 0
FIELD	5860:12	5860:12	8	rowblockbytes
LEAF_NODE	5860:12	5860:12	9	rowblockbytes
REL_OPERATOR	5860:26	5860:26	8	>
LEAF_NODE	5860:26	5860:26	9	>
FIELD	5860:28	5860:28	8	0
LEAF_NODE	5860:28	5860:28	9	0
LEAF_NODE	5860:30	5860:30	6	)
STATEMENTS	5860:32	5865:1	6	
LEAF_NODE	5860:32	5860:32	7	{
STATEMENTS	5861:2	5864:2	7	
SIMPLE_DECL	5861:2	5861:26	8	uint32 rowblocksperstrip ;
VAR_DECL	5861:2	5861:9	9	uint32 rowblocksperstrip
TYPE	5861:2	5861:2	10	uint32
TYPE_NAME	5861:2	5861:2	11	uint32
LEAF_NODE	5861:2	5861:2	12	uint32
NAME	5861:9	5861:9	10	rowblocksperstrip
LEAF_NODE	5861:9	5861:9	11	rowblocksperstrip
LEAF_NODE	5861:26	5861:26	9	;
EXPR_STATEMENT	5862:2	5862:67	8	rowblocksperstrip = ( uint32 ) ( STRIP_SIZE_DEFAULT / rowblockbytes ) ;
EXPR	5862:2	5862:2	9	rowblocksperstrip = ( uint32 ) ( STRIP_SIZE_DEFAULT / rowblockbytes )
ASSIGN	5862:2	5862:22	10	rowblocksperstrip = ( uint32 ) ( STRIP_SIZE_DEFAULT / rowblockbytes )
LVAL	5862:2	5862:2	11	rowblocksperstrip
FIELD	5862:2	5862:2	12	rowblocksperstrip
LEAF_NODE	5862:2	5862:2	13	rowblocksperstrip
ASSIGN_OP	5862:20	5862:20	11	=
LEAF_NODE	5862:20	5862:20	12	=
RVAL	5862:22	5862:66	11	( uint32 ) ( STRIP_SIZE_DEFAULT / rowblockbytes )
LEAF_NODE	5862:22	5862:22	12	(
TYPE_NAME	5862:23	5862:23	12	uint32
LEAF_NODE	5862:23	5862:23	13	uint32
LEAF_NODE	5862:29	5862:29	12	)
LEAF_NODE	5862:31	5862:31	12	(
FIELD	5862:32	5862:32	12	STRIP_SIZE_DEFAULT
LEAF_NODE	5862:32	5862:32	13	STRIP_SIZE_DEFAULT
LEAF_NODE	5862:51	5862:51	12	/
FIELD	5862:53	5862:53	12	rowblockbytes
LEAF_NODE	5862:53	5862:53	13	rowblockbytes
LEAF_NODE	5862:66	5862:66	12	)
LEAF_NODE	5862:67	5862:67	9	;
EXPR_STATEMENT	5863:2	5863:45	8	rowsperstrip = rowblocksperstrip * rowblock ;
EXPR	5863:2	5863:2	9	rowsperstrip = rowblocksperstrip * rowblock
ASSIGN	5863:2	5863:17	10	rowsperstrip = rowblocksperstrip * rowblock
LVAL	5863:2	5863:2	11	rowsperstrip
FIELD	5863:2	5863:2	12	rowsperstrip
LEAF_NODE	5863:2	5863:2	13	rowsperstrip
ASSIGN_OP	5863:15	5863:15	11	=
LEAF_NODE	5863:15	5863:15	12	=
RVAL	5863:17	5863:37	11	rowblocksperstrip * rowblock
FIELD	5863:17	5863:17	12	rowblocksperstrip
LEAF_NODE	5863:17	5863:17	13	rowblocksperstrip
LEAF_NODE	5863:35	5863:35	12	*
FIELD	5863:37	5863:37	12	rowblock
LEAF_NODE	5863:37	5863:37	13	rowblock
LEAF_NODE	5863:45	5863:45	9	;
EXPR_STATEMENT	5864:2	5864:48	8	stripbytes = rowblocksperstrip * rowblockbytes ;
EXPR	5864:2	5864:2	9	stripbytes = rowblocksperstrip * rowblockbytes
ASSIGN	5864:2	5864:15	10	stripbytes = rowblocksperstrip * rowblockbytes
LVAL	5864:2	5864:2	11	stripbytes
FIELD	5864:2	5864:2	12	stripbytes
LEAF_NODE	5864:2	5864:2	13	stripbytes
ASSIGN_OP	5864:13	5864:13	11	=
LEAF_NODE	5864:13	5864:13	12	=
RVAL	5864:15	5864:35	11	rowblocksperstrip * rowblockbytes
FIELD	5864:15	5864:15	12	rowblocksperstrip
LEAF_NODE	5864:15	5864:15	13	rowblocksperstrip
LEAF_NODE	5864:33	5864:33	12	*
FIELD	5864:35	5864:35	12	rowblockbytes
LEAF_NODE	5864:35	5864:35	13	rowblockbytes
LEAF_NODE	5864:48	5864:48	9	;
LEAF_NODE	5865:1	5865:1	7	}
SELECTION	5866:1	5867:5	3	
KEYWORD	5866:1	5866:1	4	else
LEAF_NODE	5866:1	5866:1	5	else
STATEMENTS	5867:5	5867:5	4	
JUMP_STATEMENT	5867:5	5867:11	5	return DESTINATION ;
KEYWORD	5867:5	5867:5	6	return
LEAF_NODE	5867:5	5867:5	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5867:11	5867:11	6	;
SELECTION	5872:1	5873:2	3	
KEYWORD	5872:1	5872:1	4	if
LEAF_NODE	5872:1	5872:1	5	if
LEAF_NODE	5872:4	5872:4	4	(
CONDITION	5872:5	5872:5	4	rowsperstrip >= td -> td_rowsperstrip
EXPR	5872:5	5872:21	5	rowsperstrip >= td -> td_rowsperstrip
FIELD	5872:5	5872:5	6	rowsperstrip
LEAF_NODE	5872:5	5872:5	7	rowsperstrip
REL_OPERATOR	5872:18	5872:18	6	>=
LEAF_NODE	5872:18	5872:18	7	>=
FIELD	5872:21	5872:25	6	td -> td_rowsperstrip
LEAF_NODE	5872:21	5872:21	7	td
LEAF_NODE	5872:23	5872:23	7	->
LEAF_NODE	5872:25	5872:25	7	td_rowsperstrip
LEAF_NODE	5872:40	5872:40	4	)
STATEMENTS	5873:2	5873:2	4	
JUMP_STATEMENT	5873:2	5873:8	5	return DESTINATION ;
KEYWORD	5873:2	5873:2	6	return
LEAF_NODE	5873:2	5873:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5873:8	5873:8	6	;
EXPR_STATEMENT	5874:8	5874:66	3	nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip ) ;
EXPR	5874:8	5874:8	4	nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
ASSIGN	5874:8	5874:18	5	nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
LVAL	5874:8	5874:8	6	nstrips
FIELD	5874:8	5874:8	7	nstrips
LEAF_NODE	5874:8	5874:8	8	nstrips
ASSIGN_OP	5874:16	5874:16	6	=
LEAF_NODE	5874:16	5874:16	7	=
RVAL	5874:18	5874:18	6	TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
FUNCTION_CALL	5874:18	5874:65	7	TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
CALLEE	5874:18	5874:18	8	TIFFhowmany_32
LEAF_NODE	5874:18	5874:18	9	TIFFhowmany_32
LEAF_NODE	5874:32	5874:32	8	(
ARGUMENT	5874:33	5874:33	8	td -> td_imagelength
FIELD	5874:33	5874:37	9	td -> td_imagelength
LEAF_NODE	5874:33	5874:33	10	td
LEAF_NODE	5874:35	5874:35	10	->
LEAF_NODE	5874:37	5874:37	10	td_imagelength
LEAF_NODE	5874:51	5874:51	8	,
ARGUMENT	5874:53	5874:53	8	rowsperstrip
FIELD	5874:53	5874:53	9	rowsperstrip
LEAF_NODE	5874:53	5874:53	10	rowsperstrip
LEAF_NODE	5874:65	5874:65	8	)
LEAF_NODE	5874:66	5874:66	4	;
SELECTION	5875:8	5876:12	3	
KEYWORD	5875:8	5875:8	4	if
LEAF_NODE	5875:8	5875:8	5	if
LEAF_NODE	5875:10	5875:10	4	(
CONDITION	5875:12	5875:12	4	nstrips == 0
EXPR	5875:12	5875:23	5	nstrips == 0
FIELD	5875:12	5875:12	6	nstrips
LEAF_NODE	5875:12	5875:12	7	nstrips
EQ_OPERATOR	5875:20	5875:20	6	==
LEAF_NODE	5875:20	5875:20	7	==
FIELD	5875:23	5875:23	6	0
LEAF_NODE	5875:23	5875:23	7	0
LEAF_NODE	5875:25	5875:25	4	)
STATEMENTS	5876:12	5876:12	4	
JUMP_STATEMENT	5876:12	5876:18	5	return DESTINATION ;
KEYWORD	5876:12	5876:12	6	return
LEAF_NODE	5876:12	5876:12	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5876:18	5876:18	6	;
SELECTION	5880:8	5884:8	3	
KEYWORD	5880:8	5880:8	4	if
LEAF_NODE	5880:8	5880:8	5	if
LEAF_NODE	5880:10	5880:10	4	(
CONDITION	5880:12	5880:12	4	tif -> tif_mode == O_RDONLY && nstrips > 1000000 && ( offset >= TIFFGetFileSize ( tif ) || stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 ) )
EXPR	5880:12	5880:12	5	tif -> tif_mode == O_RDONLY && nstrips > 1000000 && ( offset >= TIFFGetFileSize ( tif ) || stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 ) )
AND	5880:12	5881:12	6	tif -> tif_mode == O_RDONLY && nstrips > 1000000 && ( offset >= TIFFGetFileSize ( tif ) || stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 ) )
EXPR	5880:12	5880:29	7	tif -> tif_mode == O_RDONLY
FIELD	5880:12	5880:17	8	tif -> tif_mode
LEAF_NODE	5880:12	5880:12	9	tif
LEAF_NODE	5880:15	5880:15	9	->
LEAF_NODE	5880:17	5880:17	9	tif_mode
EQ_OPERATOR	5880:26	5880:26	8	==
LEAF_NODE	5880:26	5880:26	9	==
FIELD	5880:29	5880:29	8	O_RDONLY
LEAF_NODE	5880:29	5880:29	9	O_RDONLY
LEAF_NODE	5880:38	5880:38	7	&&
EXPR	5881:12	5881:12	7	nstrips > 1000000 && ( offset >= TIFFGetFileSize ( tif ) || stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 ) )
AND	5881:12	5882:12	8	nstrips > 1000000 && ( offset >= TIFFGetFileSize ( tif ) || stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 ) )
EXPR	5881:12	5881:22	9	nstrips > 1000000
FIELD	5881:12	5881:12	10	nstrips
LEAF_NODE	5881:12	5881:12	11	nstrips
REL_OPERATOR	5881:20	5881:20	10	>
LEAF_NODE	5881:20	5881:20	11	>
FIELD	5881:22	5881:22	10	1000000
LEAF_NODE	5881:22	5881:22	11	1000000
LEAF_NODE	5881:30	5881:30	9	&&
EXPR	5882:12	5883:73	9	( offset >= TIFFGetFileSize ( tif ) || stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 ) )
LEAF_NODE	5882:12	5882:12	10	(
OR	5882:13	5883:13	10	offset >= TIFFGetFileSize ( tif ) || stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 )
EXPR	5882:13	5882:23	11	offset >= TIFFGetFileSize ( tif )
FIELD	5882:13	5882:13	12	offset
LEAF_NODE	5882:13	5882:13	13	offset
REL_OPERATOR	5882:20	5882:20	12	>=
LEAF_NODE	5882:20	5882:20	13	>=
FUNCTION_CALL	5882:23	5882:42	12	TIFFGetFileSize ( tif )
CALLEE	5882:23	5882:23	13	TIFFGetFileSize
LEAF_NODE	5882:23	5882:23	14	TIFFGetFileSize
LEAF_NODE	5882:38	5882:38	13	(
ARGUMENT	5882:39	5882:39	13	tif
FIELD	5882:39	5882:39	14	tif
LEAF_NODE	5882:39	5882:39	15	tif
LEAF_NODE	5882:42	5882:42	13	)
LEAF_NODE	5882:44	5882:44	11	||
EXPR	5883:13	5883:72	11	stripbytes > ( TIFFGetFileSize ( tif ) - offset ) / ( nstrips - 1 )
FIELD	5883:13	5883:13	12	stripbytes
LEAF_NODE	5883:13	5883:13	13	stripbytes
REL_OPERATOR	5883:24	5883:24	12	>
LEAF_NODE	5883:24	5883:24	13	>
LEAF_NODE	5883:26	5883:26	12	(
FUNCTION_CALL	5883:27	5883:46	12	TIFFGetFileSize ( tif )
CALLEE	5883:27	5883:27	13	TIFFGetFileSize
LEAF_NODE	5883:27	5883:27	14	TIFFGetFileSize
LEAF_NODE	5883:42	5883:42	13	(
ARGUMENT	5883:43	5883:43	13	tif
FIELD	5883:43	5883:43	14	tif
LEAF_NODE	5883:43	5883:43	15	tif
LEAF_NODE	5883:46	5883:46	13	)
LEAF_NODE	5883:48	5883:48	12	-
FIELD	5883:50	5883:50	12	offset
LEAF_NODE	5883:50	5883:50	13	offset
LEAF_NODE	5883:56	5883:56	12	)
LEAF_NODE	5883:58	5883:58	12	/
LEAF_NODE	5883:60	5883:60	12	(
FIELD	5883:61	5883:61	12	nstrips
LEAF_NODE	5883:61	5883:61	13	nstrips
LEAF_NODE	5883:69	5883:69	12	-
FIELD	5883:71	5883:71	12	1
LEAF_NODE	5883:71	5883:71	13	1
LEAF_NODE	5883:72	5883:72	12	)
LEAF_NODE	5883:73	5883:73	10	)
LEAF_NODE	5883:75	5883:75	4	)
STATEMENTS	5884:8	5886:8	4	
LEAF_NODE	5884:8	5884:8	5	{
STATEMENTS	5885:12	5885:12	5	
JUMP_STATEMENT	5885:12	5885:18	6	return DESTINATION ;
KEYWORD	5885:12	5885:12	7	return
LEAF_NODE	5885:12	5885:12	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5885:18	5885:18	7	;
LEAF_NODE	5886:8	5886:8	5	}
EXPR_STATEMENT	5888:8	5888:73	3	allocChoppedUpStripArrays ( tif , nstrips , stripbytes , rowsperstrip ) ;
EXPR	5888:8	5888:8	4	allocChoppedUpStripArrays ( tif , nstrips , stripbytes , rowsperstrip )
FUNCTION_CALL	5888:8	5888:72	5	allocChoppedUpStripArrays ( tif , nstrips , stripbytes , rowsperstrip )
CALLEE	5888:8	5888:8	6	allocChoppedUpStripArrays
LEAF_NODE	5888:8	5888:8	7	allocChoppedUpStripArrays
LEAF_NODE	5888:33	5888:33	6	(
ARGUMENT	5888:34	5888:34	6	tif
FIELD	5888:34	5888:34	7	tif
LEAF_NODE	5888:34	5888:34	8	tif
LEAF_NODE	5888:37	5888:37	6	,
ARGUMENT	5888:39	5888:39	6	nstrips
FIELD	5888:39	5888:39	7	nstrips
LEAF_NODE	5888:39	5888:39	8	nstrips
LEAF_NODE	5888:46	5888:46	6	,
ARGUMENT	5888:48	5888:48	6	stripbytes
FIELD	5888:48	5888:48	7	stripbytes
LEAF_NODE	5888:48	5888:48	8	stripbytes
LEAF_NODE	5888:58	5888:58	6	,
ARGUMENT	5888:60	5888:60	6	rowsperstrip
FIELD	5888:60	5888:60	7	rowsperstrip
LEAF_NODE	5888:60	5888:60	8	rowsperstrip
LEAF_NODE	5888:72	5888:72	6	)
LEAF_NODE	5888:73	5888:73	4	;
LEAF_NODE	5889:0	5889:0	2	}
FUNCTION_DEF	5898:0	5988:0	1	
RETURN_TYPE	5898:0	5898:7	2	static void
LEAF_NODE	5898:0	5898:0	3	static
TYPE_NAME	5898:7	5898:7	3	void
LEAF_NODE	5898:7	5898:7	4	void
FUNCTION_NAME	5898:12	5898:12	2	TryChopUpUncompressedBigTiff
LEAF_NODE	5898:12	5898:12	3	TryChopUpUncompressedBigTiff
PARAMETER_LIST	5898:40	5898:52	2	( TIFF * tif )
LEAF_NODE	5898:40	5898:40	3	(
PARAMETER_DECL	5898:42	5898:48	3	TIFF * tif
TYPE	5898:42	5898:46	4	TIFF *
TYPE_NAME	5898:42	5898:42	5	TIFF
LEAF_NODE	5898:42	5898:42	6	TIFF
POINTER	5898:46	5898:46	5	*
LEAF_NODE	5898:46	5898:46	6	*
NAME	5898:48	5898:48	4	tif
LEAF_NODE	5898:48	5898:48	5	tif
LEAF_NODE	5898:52	5898:52	3	)
LEAF_NODE	5899:0	5899:0	2	{
STATEMENTS	5900:4	5987:4	2	
SIMPLE_DECL	5900:4	5900:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	5900:4	5900:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	5900:4	5900:18	5	TIFFDirectory *
TYPE_NAME	5900:4	5900:4	6	TIFFDirectory
LEAF_NODE	5900:4	5900:4	7	TIFFDirectory
POINTER	5900:18	5900:18	6	*
LEAF_NODE	5900:18	5900:18	7	*
NAME	5900:19	5900:19	5	td
LEAF_NODE	5900:19	5900:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	5900:19	5900:19	5	td = & tif -> tif_dir
ASSIGN	5900:19	5900:24	6	td = & tif -> tif_dir
LVAL	5900:19	5900:19	7	td
NAME	5900:19	5900:19	8	td
LEAF_NODE	5900:19	5900:19	9	td
ASSIGN_OP	5900:22	5900:22	7	=
LEAF_NODE	5900:22	5900:22	8	=
RVAL	5900:24	5900:24	7	& tif -> tif_dir
UNARY_EXPR	5900:24	5900:25	8	& tif -> tif_dir
UNARY_OPERATOR	5900:24	5900:24	9	&
LEAF_NODE	5900:24	5900:24	10	&
FIELD	5900:25	5900:30	9	tif -> tif_dir
LEAF_NODE	5900:25	5900:25	10	tif
LEAF_NODE	5900:28	5900:28	10	->
LEAF_NODE	5900:30	5900:30	10	tif_dir
LEAF_NODE	5900:37	5900:37	4	;
SIMPLE_DECL	5901:4	5901:19	3	uint32 rowblock ;
VAR_DECL	5901:4	5901:11	4	uint32 rowblock
TYPE	5901:4	5901:4	5	uint32
TYPE_NAME	5901:4	5901:4	6	uint32
LEAF_NODE	5901:4	5901:4	7	uint32
NAME	5901:11	5901:11	5	rowblock
LEAF_NODE	5901:11	5901:11	6	rowblock
LEAF_NODE	5901:19	5901:19	4	;
SIMPLE_DECL	5902:4	5902:24	3	uint64 rowblockbytes ;
VAR_DECL	5902:4	5902:11	4	uint64 rowblockbytes
TYPE	5902:4	5902:4	5	uint64
TYPE_NAME	5902:4	5902:4	6	uint64
LEAF_NODE	5902:4	5902:4	7	uint64
NAME	5902:11	5902:11	5	rowblockbytes
LEAF_NODE	5902:11	5902:11	6	rowblockbytes
LEAF_NODE	5902:24	5902:24	4	;
SIMPLE_DECL	5903:4	5903:12	3	uint32 i ;
VAR_DECL	5903:4	5903:11	4	uint32 i
TYPE	5903:4	5903:4	5	uint32
TYPE_NAME	5903:4	5903:4	6	uint32
LEAF_NODE	5903:4	5903:4	7	uint32
NAME	5903:11	5903:11	5	i
LEAF_NODE	5903:11	5903:11	6	i
LEAF_NODE	5903:12	5903:12	4	;
SIMPLE_DECL	5904:4	5904:20	3	uint64 stripsize ;
VAR_DECL	5904:4	5904:11	4	uint64 stripsize
TYPE	5904:4	5904:4	5	uint64
TYPE_NAME	5904:4	5904:4	6	uint64
LEAF_NODE	5904:4	5904:4	7	uint64
NAME	5904:11	5904:11	5	stripsize
LEAF_NODE	5904:11	5904:11	6	stripsize
LEAF_NODE	5904:20	5904:20	4	;
SIMPLE_DECL	5905:4	5905:28	3	uint32 rowblocksperstrip ;
VAR_DECL	5905:4	5905:11	4	uint32 rowblocksperstrip
TYPE	5905:4	5905:4	5	uint32
TYPE_NAME	5905:4	5905:4	6	uint32
LEAF_NODE	5905:4	5905:4	7	uint32
NAME	5905:11	5905:11	5	rowblocksperstrip
LEAF_NODE	5905:11	5905:11	6	rowblocksperstrip
LEAF_NODE	5905:28	5905:28	4	;
SIMPLE_DECL	5906:4	5906:23	3	uint32 rowsperstrip ;
VAR_DECL	5906:4	5906:11	4	uint32 rowsperstrip
TYPE	5906:4	5906:4	5	uint32
TYPE_NAME	5906:4	5906:4	6	uint32
LEAF_NODE	5906:4	5906:4	7	uint32
NAME	5906:11	5906:11	5	rowsperstrip
LEAF_NODE	5906:11	5906:11	6	rowsperstrip
LEAF_NODE	5906:23	5906:23	4	;
SIMPLE_DECL	5907:4	5907:21	3	uint64 stripbytes ;
VAR_DECL	5907:4	5907:11	4	uint64 stripbytes
TYPE	5907:4	5907:4	5	uint64
TYPE_NAME	5907:4	5907:4	6	uint64
LEAF_NODE	5907:4	5907:4	7	uint64
NAME	5907:11	5907:11	5	stripbytes
LEAF_NODE	5907:11	5907:11	6	stripbytes
LEAF_NODE	5907:21	5907:21	4	;
SIMPLE_DECL	5908:4	5908:18	3	uint32 nstrips ;
VAR_DECL	5908:4	5908:11	4	uint32 nstrips
TYPE	5908:4	5908:4	5	uint32
TYPE_NAME	5908:4	5908:4	6	uint32
LEAF_NODE	5908:4	5908:4	7	uint32
NAME	5908:11	5908:11	5	nstrips
LEAF_NODE	5908:11	5908:11	6	nstrips
LEAF_NODE	5908:18	5908:18	4	;
EXPR_STATEMENT	5910:4	5910:36	3	stripsize = TIFFStripSize64 ( tif ) ;
EXPR	5910:4	5910:4	4	stripsize = TIFFStripSize64 ( tif )
ASSIGN	5910:4	5910:16	5	stripsize = TIFFStripSize64 ( tif )
LVAL	5910:4	5910:4	6	stripsize
FIELD	5910:4	5910:4	7	stripsize
LEAF_NODE	5910:4	5910:4	8	stripsize
ASSIGN_OP	5910:14	5910:14	6	=
LEAF_NODE	5910:14	5910:14	7	=
RVAL	5910:16	5910:16	6	TIFFStripSize64 ( tif )
FUNCTION_CALL	5910:16	5910:35	7	TIFFStripSize64 ( tif )
CALLEE	5910:16	5910:16	8	TIFFStripSize64
LEAF_NODE	5910:16	5910:16	9	TIFFStripSize64
LEAF_NODE	5910:31	5910:31	8	(
ARGUMENT	5910:32	5910:32	8	tif
FIELD	5910:32	5910:32	9	tif
LEAF_NODE	5910:32	5910:32	10	tif
LEAF_NODE	5910:35	5910:35	8	)
LEAF_NODE	5910:36	5910:36	4	;
EXPR_STATEMENT	5912:4	5912:65	3	assert ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG ) ;
EXPR	5912:4	5912:4	4	assert ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG )
FUNCTION_CALL	5912:4	5912:64	5	assert ( tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG )
CALLEE	5912:4	5912:4	6	assert
LEAF_NODE	5912:4	5912:4	7	assert
LEAF_NODE	5912:10	5912:10	6	(
ARGUMENT	5912:12	5912:44	6	tif -> tif_dir . td_planarconfig == PLANARCONFIG_CONTIG
FIELD	5912:12	5912:25	7	tif -> tif_dir . td_planarconfig
LEAF_NODE	5912:12	5912:12	8	tif
LEAF_NODE	5912:15	5912:15	8	->
LEAF_NODE	5912:17	5912:17	8	tif_dir
LEAF_NODE	5912:24	5912:24	8	.
LEAF_NODE	5912:25	5912:25	8	td_planarconfig
EQ_OPERATOR	5912:41	5912:41	7	==
LEAF_NODE	5912:41	5912:41	8	==
FIELD	5912:44	5912:44	7	PLANARCONFIG_CONTIG
LEAF_NODE	5912:44	5912:44	8	PLANARCONFIG_CONTIG
LEAF_NODE	5912:64	5912:64	6	)
LEAF_NODE	5912:65	5912:65	4	;
EXPR_STATEMENT	5913:4	5913:61	3	assert ( tif -> tif_dir . td_compression == COMPRESSION_NONE ) ;
EXPR	5913:4	5913:4	4	assert ( tif -> tif_dir . td_compression == COMPRESSION_NONE )
FUNCTION_CALL	5913:4	5913:60	5	assert ( tif -> tif_dir . td_compression == COMPRESSION_NONE )
CALLEE	5913:4	5913:4	6	assert
LEAF_NODE	5913:4	5913:4	7	assert
LEAF_NODE	5913:10	5913:10	6	(
ARGUMENT	5913:12	5913:43	6	tif -> tif_dir . td_compression == COMPRESSION_NONE
FIELD	5913:12	5913:25	7	tif -> tif_dir . td_compression
LEAF_NODE	5913:12	5913:12	8	tif
LEAF_NODE	5913:15	5913:15	8	->
LEAF_NODE	5913:17	5913:17	8	tif_dir
LEAF_NODE	5913:24	5913:24	8	.
LEAF_NODE	5913:25	5913:25	8	td_compression
EQ_OPERATOR	5913:40	5913:40	7	==
LEAF_NODE	5913:40	5913:40	8	==
FIELD	5913:43	5913:43	7	COMPRESSION_NONE
LEAF_NODE	5913:43	5913:43	8	COMPRESSION_NONE
LEAF_NODE	5913:60	5913:60	6	)
LEAF_NODE	5913:61	5913:61	4	;
EXPR_STATEMENT	5914:4	5914:78	3	assert ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP ) ;
EXPR	5914:4	5914:4	4	assert ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
FUNCTION_CALL	5914:4	5914:77	5	assert ( ( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP )
CALLEE	5914:4	5914:4	6	assert
LEAF_NODE	5914:4	5914:4	7	assert
LEAF_NODE	5914:10	5914:10	6	(
ARGUMENT	5914:12	5914:62	6	( tif -> tif_flags & ( TIFF_STRIPCHOP | TIFF_ISTILED ) ) == TIFF_STRIPCHOP
LEAF_NODE	5914:12	5914:12	7	(
FIELD	5914:13	5914:18	7	tif -> tif_flags
LEAF_NODE	5914:13	5914:13	8	tif
LEAF_NODE	5914:16	5914:16	8	->
LEAF_NODE	5914:18	5914:18	8	tif_flags
LEAF_NODE	5914:27	5914:27	7	&
LEAF_NODE	5914:28	5914:28	7	(
BIT_OR	5914:29	5914:44	7	TIFF_STRIPCHOP | TIFF_ISTILED
BIT_OR_ELEM	5914:29	5914:29	8	TIFF_STRIPCHOP
FIELD	5914:29	5914:29	9	TIFF_STRIPCHOP
LEAF_NODE	5914:29	5914:29	10	TIFF_STRIPCHOP
LEAF_NODE	5914:43	5914:43	8	|
BIT_OR_ELEM	5914:44	5914:44	8	TIFF_ISTILED
FIELD	5914:44	5914:44	9	TIFF_ISTILED
LEAF_NODE	5914:44	5914:44	10	TIFF_ISTILED
LEAF_NODE	5914:56	5914:56	7	)
LEAF_NODE	5914:57	5914:57	7	)
EQ_OPERATOR	5914:59	5914:59	7	==
LEAF_NODE	5914:59	5914:59	8	==
FIELD	5914:62	5914:62	7	TIFF_STRIPCHOP
LEAF_NODE	5914:62	5914:62	8	TIFF_STRIPCHOP
LEAF_NODE	5914:77	5914:77	6	)
LEAF_NODE	5914:78	5914:78	4	;
EXPR_STATEMENT	5915:4	5915:38	3	assert ( stripsize > 0x7FFFFFFFUL ) ;
EXPR	5915:4	5915:4	4	assert ( stripsize > 0x7FFFFFFFUL )
FUNCTION_CALL	5915:4	5915:37	5	assert ( stripsize > 0x7FFFFFFFUL )
CALLEE	5915:4	5915:4	6	assert
LEAF_NODE	5915:4	5915:4	7	assert
LEAF_NODE	5915:10	5915:10	6	(
ARGUMENT	5915:12	5915:24	6	stripsize > 0x7FFFFFFFUL
FIELD	5915:12	5915:12	7	stripsize
LEAF_NODE	5915:12	5915:12	8	stripsize
REL_OPERATOR	5915:22	5915:22	7	>
LEAF_NODE	5915:22	5915:22	8	>
FIELD	5915:24	5915:24	7	0x7FFFFFFFUL
LEAF_NODE	5915:24	5915:24	8	0x7FFFFFFFUL
LEAF_NODE	5915:37	5915:37	6	)
LEAF_NODE	5915:38	5915:38	4	;
SELECTION	5920:4	5921:8	3	
KEYWORD	5920:4	5920:4	4	if
LEAF_NODE	5920:4	5920:4	5	if
LEAF_NODE	5920:6	5920:6	4	(
CONDITION	5920:8	5920:8	4	TIFFGetStrileByteCount ( tif , 0 ) == 0 && tif -> tif_mode != O_RDONLY
EXPR	5920:8	5920:8	5	TIFFGetStrileByteCount ( tif , 0 ) == 0 && tif -> tif_mode != O_RDONLY
AND	5920:8	5920:47	6	TIFFGetStrileByteCount ( tif , 0 ) == 0 && tif -> tif_mode != O_RDONLY
EXPR	5920:8	5920:42	7	TIFFGetStrileByteCount ( tif , 0 ) == 0
FUNCTION_CALL	5920:8	5920:37	8	TIFFGetStrileByteCount ( tif , 0 )
CALLEE	5920:8	5920:8	9	TIFFGetStrileByteCount
LEAF_NODE	5920:8	5920:8	10	TIFFGetStrileByteCount
LEAF_NODE	5920:30	5920:30	9	(
ARGUMENT	5920:31	5920:31	9	tif
FIELD	5920:31	5920:31	10	tif
LEAF_NODE	5920:31	5920:31	11	tif
LEAF_NODE	5920:34	5920:34	9	,
ARGUMENT	5920:36	5920:36	9	0
FIELD	5920:36	5920:36	10	0
LEAF_NODE	5920:36	5920:36	11	0
LEAF_NODE	5920:37	5920:37	9	)
EQ_OPERATOR	5920:39	5920:39	8	==
LEAF_NODE	5920:39	5920:39	9	==
FIELD	5920:42	5920:42	8	0
LEAF_NODE	5920:42	5920:42	9	0
LEAF_NODE	5920:44	5920:44	7	&&
EXPR	5920:47	5920:64	7	tif -> tif_mode != O_RDONLY
FIELD	5920:47	5920:52	8	tif -> tif_mode
LEAF_NODE	5920:47	5920:47	9	tif
LEAF_NODE	5920:50	5920:50	9	->
LEAF_NODE	5920:52	5920:52	9	tif_mode
EQ_OPERATOR	5920:61	5920:61	8	!=
LEAF_NODE	5920:61	5920:61	9	!=
FIELD	5920:64	5920:64	8	O_RDONLY
LEAF_NODE	5920:64	5920:64	9	O_RDONLY
LEAF_NODE	5920:73	5920:73	4	)
STATEMENTS	5921:8	5921:8	4	
JUMP_STATEMENT	5921:8	5921:14	5	return DESTINATION ;
KEYWORD	5921:8	5921:8	6	return
LEAF_NODE	5921:8	5921:8	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5921:14	5921:14	6	;
SELECTION	5923:4	5925:8	3	
KEYWORD	5923:4	5923:4	4	if
LEAF_NODE	5923:4	5923:4	5	if
LEAF_NODE	5923:7	5923:7	4	(
CONDITION	5923:8	5923:8	4	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
EXPR	5923:8	5923:8	5	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
AND	5923:8	5924:8	6	( td -> td_photometric == PHOTOMETRIC_YCBCR ) && ( ! isUpSampled ( tif ) )
EXPR	5923:8	5923:48	7	( td -> td_photometric == PHOTOMETRIC_YCBCR )
LEAF_NODE	5923:8	5923:8	8	(
FIELD	5923:9	5923:13	8	td -> td_photometric
LEAF_NODE	5923:9	5923:9	9	td
LEAF_NODE	5923:11	5923:11	9	->
LEAF_NODE	5923:13	5923:13	9	td_photometric
EQ_OPERATOR	5923:28	5923:28	8	==
LEAF_NODE	5923:28	5923:28	9	==
FIELD	5923:31	5923:31	8	PHOTOMETRIC_YCBCR
LEAF_NODE	5923:31	5923:31	9	PHOTOMETRIC_YCBCR
LEAF_NODE	5923:48	5923:48	8	)
LEAF_NODE	5923:49	5923:49	7	&&
EXPR	5924:8	5924:26	7	( ! isUpSampled ( tif ) )
LEAF_NODE	5924:8	5924:8	8	(
UNARY_EXPR	5924:9	5924:10	8	! isUpSampled ( tif )
UNARY_OPERATOR	5924:9	5924:9	9	!
LEAF_NODE	5924:9	5924:9	10	!
FUNCTION_CALL	5924:10	5924:25	9	isUpSampled ( tif )
CALLEE	5924:10	5924:10	10	isUpSampled
LEAF_NODE	5924:10	5924:10	11	isUpSampled
LEAF_NODE	5924:21	5924:21	10	(
ARGUMENT	5924:22	5924:22	10	tif
FIELD	5924:22	5924:22	11	tif
LEAF_NODE	5924:22	5924:22	12	tif
LEAF_NODE	5924:25	5924:25	10	)
LEAF_NODE	5924:26	5924:26	8	)
LEAF_NODE	5924:27	5924:27	4	)
STATEMENTS	5925:8	5925:8	4	
EXPR_STATEMENT	5925:8	5925:45	5	rowblock = td -> td_ycbcrsubsampling [ 1 ] ;
EXPR	5925:8	5925:8	6	rowblock = td -> td_ycbcrsubsampling [ 1 ]
ASSIGN	5925:8	5925:19	7	rowblock = td -> td_ycbcrsubsampling [ 1 ]
LVAL	5925:8	5925:8	8	rowblock
FIELD	5925:8	5925:8	9	rowblock
LEAF_NODE	5925:8	5925:8	10	rowblock
ASSIGN_OP	5925:17	5925:17	8	=
LEAF_NODE	5925:17	5925:17	9	=
RVAL	5925:19	5925:19	8	td -> td_ycbcrsubsampling [ 1 ]
FIELD	5925:19	5925:44	9	td -> td_ycbcrsubsampling [ 1 ]
LEAF_NODE	5925:19	5925:19	10	td
LEAF_NODE	5925:21	5925:21	10	->
LEAF_NODE	5925:23	5925:23	10	td_ycbcrsubsampling
LEAF_NODE	5925:42	5925:42	10	[
EXPR	5925:43	5925:43	10	1
FIELD	5925:43	5925:43	11	1
LEAF_NODE	5925:43	5925:43	12	1
LEAF_NODE	5925:44	5925:44	10	]
LEAF_NODE	5925:45	5925:45	6	;
SELECTION	5926:4	5927:8	3	
KEYWORD	5926:4	5926:4	4	else
LEAF_NODE	5926:4	5926:4	5	else
STATEMENTS	5927:8	5927:8	4	
EXPR_STATEMENT	5927:8	5927:20	5	rowblock = 1 ;
EXPR	5927:8	5927:8	6	rowblock = 1
ASSIGN	5927:8	5927:19	7	rowblock = 1
LVAL	5927:8	5927:8	8	rowblock
FIELD	5927:8	5927:8	9	rowblock
LEAF_NODE	5927:8	5927:8	10	rowblock
ASSIGN_OP	5927:17	5927:17	8	=
LEAF_NODE	5927:17	5927:17	9	=
RVAL	5927:19	5927:19	8	1
FIELD	5927:19	5927:19	9	1
LEAF_NODE	5927:19	5927:19	10	1
LEAF_NODE	5927:20	5927:20	6	;
EXPR_STATEMENT	5928:4	5928:51	3	rowblockbytes = TIFFVStripSize64 ( tif , rowblock ) ;
EXPR	5928:4	5928:4	4	rowblockbytes = TIFFVStripSize64 ( tif , rowblock )
ASSIGN	5928:4	5928:20	5	rowblockbytes = TIFFVStripSize64 ( tif , rowblock )
LVAL	5928:4	5928:4	6	rowblockbytes
FIELD	5928:4	5928:4	7	rowblockbytes
LEAF_NODE	5928:4	5928:4	8	rowblockbytes
ASSIGN_OP	5928:18	5928:18	6	=
LEAF_NODE	5928:18	5928:18	7	=
RVAL	5928:20	5928:20	6	TIFFVStripSize64 ( tif , rowblock )
FUNCTION_CALL	5928:20	5928:50	7	TIFFVStripSize64 ( tif , rowblock )
CALLEE	5928:20	5928:20	8	TIFFVStripSize64
LEAF_NODE	5928:20	5928:20	9	TIFFVStripSize64
LEAF_NODE	5928:36	5928:36	8	(
ARGUMENT	5928:37	5928:37	8	tif
FIELD	5928:37	5928:37	9	tif
LEAF_NODE	5928:37	5928:37	10	tif
LEAF_NODE	5928:40	5928:40	8	,
ARGUMENT	5928:42	5928:42	8	rowblock
FIELD	5928:42	5928:42	9	rowblock
LEAF_NODE	5928:42	5928:42	10	rowblock
LEAF_NODE	5928:50	5928:50	8	)
LEAF_NODE	5928:51	5928:51	4	;
SELECTION	5929:4	5930:4	3	
KEYWORD	5929:4	5929:4	4	if
LEAF_NODE	5929:4	5929:4	5	if
LEAF_NODE	5929:6	5929:6	4	(
CONDITION	5929:8	5929:8	4	rowblockbytes == 0 || rowblockbytes > 0x7FFFFFFFUL
EXPR	5929:8	5929:8	5	rowblockbytes == 0 || rowblockbytes > 0x7FFFFFFFUL
OR	5929:8	5929:30	6	rowblockbytes == 0 || rowblockbytes > 0x7FFFFFFFUL
EXPR	5929:8	5929:25	7	rowblockbytes == 0
FIELD	5929:8	5929:8	8	rowblockbytes
LEAF_NODE	5929:8	5929:8	9	rowblockbytes
EQ_OPERATOR	5929:22	5929:22	8	==
LEAF_NODE	5929:22	5929:22	9	==
FIELD	5929:25	5929:25	8	0
LEAF_NODE	5929:25	5929:25	9	0
LEAF_NODE	5929:27	5929:27	7	||
EXPR	5929:30	5929:46	7	rowblockbytes > 0x7FFFFFFFUL
FIELD	5929:30	5929:30	8	rowblockbytes
LEAF_NODE	5929:30	5929:30	9	rowblockbytes
REL_OPERATOR	5929:44	5929:44	8	>
LEAF_NODE	5929:44	5929:44	9	>
FIELD	5929:46	5929:46	8	0x7FFFFFFFUL
LEAF_NODE	5929:46	5929:46	9	0x7FFFFFFFUL
LEAF_NODE	5929:59	5929:59	4	)
STATEMENTS	5930:4	5933:4	4	
LEAF_NODE	5930:4	5930:4	5	{
STATEMENTS	5932:8	5932:8	5	
JUMP_STATEMENT	5932:8	5932:14	6	return DESTINATION ;
KEYWORD	5932:8	5932:8	7	return
LEAF_NODE	5932:8	5932:8	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	5932:14	5932:14	7	;
LEAF_NODE	5933:4	5933:4	5	}
ITERATION	5936:4	5937:4	3	
KEYWORD	5936:4	5936:4	4	for
LEAF_NODE	5936:4	5936:4	5	for
LEAF_NODE	5936:7	5936:7	4	(
FOR_INIT	5936:9	5936:14	4	i = 0 ;
EXPR	5936:9	5936:9	5	i = 0
ASSIGN	5936:9	5936:13	6	i = 0
LVAL	5936:9	5936:9	7	i
FIELD	5936:9	5936:9	8	i
LEAF_NODE	5936:9	5936:9	9	i
ASSIGN_OP	5936:11	5936:11	7	=
LEAF_NODE	5936:11	5936:11	8	=
RVAL	5936:13	5936:13	7	0
FIELD	5936:13	5936:13	8	0
LEAF_NODE	5936:13	5936:13	9	0
LEAF_NODE	5936:14	5936:14	5	;
CONDITION	5936:16	5936:16	4	i < td -> td_nstrips
EXPR	5936:16	5936:20	5	i < td -> td_nstrips
FIELD	5936:16	5936:16	6	i
LEAF_NODE	5936:16	5936:16	7	i
REL_OPERATOR	5936:18	5936:18	6	<
LEAF_NODE	5936:18	5936:18	7	<
FIELD	5936:20	5936:24	6	td -> td_nstrips
LEAF_NODE	5936:20	5936:20	7	td
LEAF_NODE	5936:22	5936:22	7	->
LEAF_NODE	5936:24	5936:24	7	td_nstrips
LEAF_NODE	5936:34	5936:34	4	;
FOR_EXPR	5936:36	5936:36	4	i ++
EXPR	5936:36	5936:36	5	i ++
FIELD	5936:36	5936:37	6	i ++
LEAF_NODE	5936:36	5936:36	7	i
LEAF_NODE	5936:37	5936:37	7	++
LEAF_NODE	5936:40	5936:40	4	)
STATEMENTS	5937:4	5958:4	4	
LEAF_NODE	5937:4	5937:4	5	{
STATEMENTS	5938:8	5946:8	5	
SELECTION	5938:8	5939:8	6	
KEYWORD	5938:8	5938:8	7	if
LEAF_NODE	5938:8	5938:8	8	if
LEAF_NODE	5938:10	5938:10	7	(
CONDITION	5938:12	5938:12	7	i == td -> td_nstrips - 1
EXPR	5938:12	5938:34	8	i == td -> td_nstrips - 1
FIELD	5938:12	5938:12	9	i
LEAF_NODE	5938:12	5938:12	10	i
EQ_OPERATOR	5938:14	5938:14	9	==
LEAF_NODE	5938:14	5938:14	10	==
FIELD	5938:17	5938:21	9	td -> td_nstrips
LEAF_NODE	5938:17	5938:17	10	td
LEAF_NODE	5938:19	5938:19	10	->
LEAF_NODE	5938:21	5938:21	10	td_nstrips
LEAF_NODE	5938:32	5938:32	9	-
FIELD	5938:34	5938:34	9	1
LEAF_NODE	5938:34	5938:34	10	1
LEAF_NODE	5938:36	5938:36	7	)
STATEMENTS	5939:8	5945:8	7	
LEAF_NODE	5939:8	5939:8	8	{
STATEMENTS	5940:12	5940:12	8	
SELECTION	5940:12	5942:12	9	
KEYWORD	5940:12	5940:12	10	if
LEAF_NODE	5940:12	5940:12	11	if
LEAF_NODE	5940:14	5940:14	10	(
CONDITION	5940:16	5940:16	10	TIFFGetStrileByteCount ( tif , i ) < TIFFVStripSize64 ( tif , td -> td_imagelength - i * td -> td_rowsperstrip )
EXPR	5940:16	5940:49	11	TIFFGetStrileByteCount ( tif , i ) < TIFFVStripSize64 ( tif , td -> td_imagelength - i * td -> td_rowsperstrip )
FUNCTION_CALL	5940:16	5940:45	12	TIFFGetStrileByteCount ( tif , i )
CALLEE	5940:16	5940:16	13	TIFFGetStrileByteCount
LEAF_NODE	5940:16	5940:16	14	TIFFGetStrileByteCount
LEAF_NODE	5940:38	5940:38	13	(
ARGUMENT	5940:39	5940:39	13	tif
FIELD	5940:39	5940:39	14	tif
LEAF_NODE	5940:39	5940:39	15	tif
LEAF_NODE	5940:42	5940:42	13	,
ARGUMENT	5940:44	5940:44	13	i
FIELD	5940:44	5940:44	14	i
LEAF_NODE	5940:44	5940:44	15	i
LEAF_NODE	5940:45	5940:45	13	)
REL_OPERATOR	5940:47	5940:47	12	<
LEAF_NODE	5940:47	5940:47	13	<
FUNCTION_CALL	5940:49	5941:70	12	TIFFVStripSize64 ( tif , td -> td_imagelength - i * td -> td_rowsperstrip )
CALLEE	5940:49	5940:49	13	TIFFVStripSize64
LEAF_NODE	5940:49	5940:49	14	TIFFVStripSize64
LEAF_NODE	5940:65	5940:65	13	(
ARGUMENT	5941:20	5941:20	13	tif
FIELD	5941:20	5941:20	14	tif
LEAF_NODE	5941:20	5941:20	15	tif
LEAF_NODE	5941:23	5941:23	13	,
ARGUMENT	5941:25	5941:50	13	td -> td_imagelength - i * td -> td_rowsperstrip
FIELD	5941:25	5941:29	14	td -> td_imagelength
LEAF_NODE	5941:25	5941:25	15	td
LEAF_NODE	5941:27	5941:27	15	->
LEAF_NODE	5941:29	5941:29	15	td_imagelength
LEAF_NODE	5941:44	5941:44	14	-
FIELD	5941:46	5941:46	14	i
LEAF_NODE	5941:46	5941:46	15	i
LEAF_NODE	5941:48	5941:48	14	*
FIELD	5941:50	5941:54	14	td -> td_rowsperstrip
LEAF_NODE	5941:50	5941:50	15	td
LEAF_NODE	5941:52	5941:52	15	->
LEAF_NODE	5941:54	5941:54	15	td_rowsperstrip
LEAF_NODE	5941:70	5941:70	13	)
LEAF_NODE	5941:72	5941:72	10	)
STATEMENTS	5942:12	5944:12	10	
LEAF_NODE	5942:12	5942:12	11	{
STATEMENTS	5943:16	5943:16	11	
JUMP_STATEMENT	5943:16	5943:22	12	return DESTINATION ;
KEYWORD	5943:16	5943:16	13	return
LEAF_NODE	5943:16	5943:16	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	5943:22	5943:22	13	;
LEAF_NODE	5944:12	5944:12	11	}
LEAF_NODE	5945:8	5945:8	8	}
SELECTION	5946:8	5947:8	6	
KEYWORD	5946:8	5946:8	7	else
LEAF_NODE	5946:8	5946:8	8	else
STATEMENTS	5947:8	5957:8	7	
LEAF_NODE	5947:8	5947:8	8	{
STATEMENTS	5948:12	5952:12	8	
SELECTION	5948:12	5949:12	9	
KEYWORD	5948:12	5948:12	10	if
LEAF_NODE	5948:12	5948:12	11	if
LEAF_NODE	5948:14	5948:14	10	(
CONDITION	5948:16	5948:16	10	TIFFGetStrileByteCount ( tif , i ) != stripsize
EXPR	5948:16	5948:50	11	TIFFGetStrileByteCount ( tif , i ) != stripsize
FUNCTION_CALL	5948:16	5948:45	12	TIFFGetStrileByteCount ( tif , i )
CALLEE	5948:16	5948:16	13	TIFFGetStrileByteCount
LEAF_NODE	5948:16	5948:16	14	TIFFGetStrileByteCount
LEAF_NODE	5948:38	5948:38	13	(
ARGUMENT	5948:39	5948:39	13	tif
FIELD	5948:39	5948:39	14	tif
LEAF_NODE	5948:39	5948:39	15	tif
LEAF_NODE	5948:42	5948:42	13	,
ARGUMENT	5948:44	5948:44	13	i
FIELD	5948:44	5948:44	14	i
LEAF_NODE	5948:44	5948:44	15	i
LEAF_NODE	5948:45	5948:45	13	)
EQ_OPERATOR	5948:47	5948:47	12	!=
LEAF_NODE	5948:47	5948:47	13	!=
FIELD	5948:50	5948:50	12	stripsize
LEAF_NODE	5948:50	5948:50	13	stripsize
LEAF_NODE	5948:60	5948:60	10	)
STATEMENTS	5949:12	5951:12	10	
LEAF_NODE	5949:12	5949:12	11	{
STATEMENTS	5950:16	5950:16	11	
JUMP_STATEMENT	5950:16	5950:22	12	return DESTINATION ;
KEYWORD	5950:16	5950:16	13	return
LEAF_NODE	5950:16	5950:16	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	5950:22	5950:22	13	;
LEAF_NODE	5951:12	5951:12	11	}
SELECTION	5952:12	5954:12	9	
KEYWORD	5952:12	5952:12	10	if
LEAF_NODE	5952:12	5952:12	11	if
LEAF_NODE	5952:14	5952:14	10	(
CONDITION	5952:16	5952:16	10	i > 0 && TIFFGetStrileOffset ( tif , i ) != TIFFGetStrileOffset ( tif , i - 1 ) + TIFFGetStrileByteCount ( tif , i - 1 )
EXPR	5952:16	5952:16	11	i > 0 && TIFFGetStrileOffset ( tif , i ) != TIFFGetStrileOffset ( tif , i - 1 ) + TIFFGetStrileByteCount ( tif , i - 1 )
AND	5952:16	5952:25	12	i > 0 && TIFFGetStrileOffset ( tif , i ) != TIFFGetStrileOffset ( tif , i - 1 ) + TIFFGetStrileByteCount ( tif , i - 1 )
EXPR	5952:16	5952:20	13	i > 0
FIELD	5952:16	5952:16	14	i
LEAF_NODE	5952:16	5952:16	15	i
REL_OPERATOR	5952:18	5952:18	14	>
LEAF_NODE	5952:18	5952:18	15	>
FIELD	5952:20	5952:20	14	0
LEAF_NODE	5952:20	5952:20	15	0
LEAF_NODE	5952:22	5952:22	13	&&
EXPR	5952:25	5953:52	13	TIFFGetStrileOffset ( tif , i ) != TIFFGetStrileOffset ( tif , i - 1 ) + TIFFGetStrileByteCount ( tif , i - 1 )
FUNCTION_CALL	5952:25	5952:51	14	TIFFGetStrileOffset ( tif , i )
CALLEE	5952:25	5952:25	15	TIFFGetStrileOffset
LEAF_NODE	5952:25	5952:25	16	TIFFGetStrileOffset
LEAF_NODE	5952:44	5952:44	15	(
ARGUMENT	5952:45	5952:45	15	tif
FIELD	5952:45	5952:45	16	tif
LEAF_NODE	5952:45	5952:45	17	tif
LEAF_NODE	5952:48	5952:48	15	,
ARGUMENT	5952:50	5952:50	15	i
FIELD	5952:50	5952:50	16	i
LEAF_NODE	5952:50	5952:50	17	i
LEAF_NODE	5952:51	5952:51	15	)
EQ_OPERATOR	5952:53	5952:53	14	!=
LEAF_NODE	5952:53	5952:53	15	!=
FUNCTION_CALL	5953:20	5953:48	14	TIFFGetStrileOffset ( tif , i - 1 )
CALLEE	5953:20	5953:20	15	TIFFGetStrileOffset
LEAF_NODE	5953:20	5953:20	16	TIFFGetStrileOffset
LEAF_NODE	5953:39	5953:39	15	(
ARGUMENT	5953:40	5953:40	15	tif
FIELD	5953:40	5953:40	16	tif
LEAF_NODE	5953:40	5953:40	17	tif
LEAF_NODE	5953:43	5953:43	15	,
ARGUMENT	5953:45	5953:47	15	i - 1
FIELD	5953:45	5953:45	16	i
LEAF_NODE	5953:45	5953:45	17	i
LEAF_NODE	5953:46	5953:46	16	-
FIELD	5953:47	5953:47	16	1
LEAF_NODE	5953:47	5953:47	17	1
LEAF_NODE	5953:48	5953:48	15	)
LEAF_NODE	5953:50	5953:50	14	+
FUNCTION_CALL	5953:52	5953:83	14	TIFFGetStrileByteCount ( tif , i - 1 )
CALLEE	5953:52	5953:52	15	TIFFGetStrileByteCount
LEAF_NODE	5953:52	5953:52	16	TIFFGetStrileByteCount
LEAF_NODE	5953:74	5953:74	15	(
ARGUMENT	5953:75	5953:75	15	tif
FIELD	5953:75	5953:75	16	tif
LEAF_NODE	5953:75	5953:75	17	tif
LEAF_NODE	5953:78	5953:78	15	,
ARGUMENT	5953:80	5953:82	15	i - 1
FIELD	5953:80	5953:80	16	i
LEAF_NODE	5953:80	5953:80	17	i
LEAF_NODE	5953:81	5953:81	16	-
FIELD	5953:82	5953:82	16	1
LEAF_NODE	5953:82	5953:82	17	1
LEAF_NODE	5953:83	5953:83	15	)
LEAF_NODE	5953:85	5953:85	10	)
STATEMENTS	5954:12	5956:12	10	
LEAF_NODE	5954:12	5954:12	11	{
STATEMENTS	5955:16	5955:16	11	
JUMP_STATEMENT	5955:16	5955:22	12	return DESTINATION ;
KEYWORD	5955:16	5955:16	13	return
LEAF_NODE	5955:16	5955:16	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	5955:22	5955:22	13	;
LEAF_NODE	5956:12	5956:12	11	}
LEAF_NODE	5957:8	5957:8	8	}
LEAF_NODE	5958:4	5958:4	5	}
LEAF_NODE	5961:4	5961:4	3	rowblocksperstrip
LEAF_NODE	5961:22	5961:22	3	=
LEAF_NODE	5961:24	5961:24	3	(
LEAF_NODE	5961:25	5961:25	3	uint32
LEAF_NODE	5961:31	5961:31	3	)
LEAF_NODE	5961:33	5961:33	3	(
LEAF_NODE	5961:34	5961:34	3	512
LEAF_NODE	5961:38	5961:38	3	*
LEAF_NODE	5961:40	5961:40	3	1024
LEAF_NODE	5961:45	5961:45	3	*
LEAF_NODE	5961:47	5961:47	3	1024
LEAF_NODE	5961:52	5961:52	3	/
LEAF_NODE	5961:54	5961:54	3	rowblockbytes
LEAF_NODE	5961:67	5961:67	3	)
LEAF_NODE	5961:68	5961:68	3	;
SELECTION	5962:4	5963:8	3	
KEYWORD	5962:4	5962:4	4	if
LEAF_NODE	5962:4	5962:4	5	if
LEAF_NODE	5962:6	5962:6	4	(
CONDITION	5962:8	5962:8	4	rowblocksperstrip == 0
EXPR	5962:8	5962:29	5	rowblocksperstrip == 0
FIELD	5962:8	5962:8	6	rowblocksperstrip
LEAF_NODE	5962:8	5962:8	7	rowblocksperstrip
EQ_OPERATOR	5962:26	5962:26	6	==
LEAF_NODE	5962:26	5962:26	7	==
FIELD	5962:29	5962:29	6	0
LEAF_NODE	5962:29	5962:29	7	0
LEAF_NODE	5962:31	5962:31	4	)
STATEMENTS	5963:8	5963:8	4	
EXPR_STATEMENT	5963:8	5963:29	5	rowblocksperstrip = 1 ;
EXPR	5963:8	5963:8	6	rowblocksperstrip = 1
ASSIGN	5963:8	5963:28	7	rowblocksperstrip = 1
LVAL	5963:8	5963:8	8	rowblocksperstrip
FIELD	5963:8	5963:8	9	rowblocksperstrip
LEAF_NODE	5963:8	5963:8	10	rowblocksperstrip
ASSIGN_OP	5963:26	5963:26	8	=
LEAF_NODE	5963:26	5963:26	9	=
RVAL	5963:28	5963:28	8	1
FIELD	5963:28	5963:28	9	1
LEAF_NODE	5963:28	5963:28	10	1
LEAF_NODE	5963:29	5963:29	6	;
EXPR_STATEMENT	5964:4	5964:47	3	rowsperstrip = rowblocksperstrip * rowblock ;
EXPR	5964:4	5964:4	4	rowsperstrip = rowblocksperstrip * rowblock
ASSIGN	5964:4	5964:19	5	rowsperstrip = rowblocksperstrip * rowblock
LVAL	5964:4	5964:4	6	rowsperstrip
FIELD	5964:4	5964:4	7	rowsperstrip
LEAF_NODE	5964:4	5964:4	8	rowsperstrip
ASSIGN_OP	5964:17	5964:17	6	=
LEAF_NODE	5964:17	5964:17	7	=
RVAL	5964:19	5964:39	6	rowblocksperstrip * rowblock
FIELD	5964:19	5964:19	7	rowblocksperstrip
LEAF_NODE	5964:19	5964:19	8	rowblocksperstrip
LEAF_NODE	5964:37	5964:37	7	*
FIELD	5964:39	5964:39	7	rowblock
LEAF_NODE	5964:39	5964:39	8	rowblock
LEAF_NODE	5964:47	5964:47	4	;
EXPR_STATEMENT	5965:4	5965:50	3	stripbytes = rowblocksperstrip * rowblockbytes ;
EXPR	5965:4	5965:4	4	stripbytes = rowblocksperstrip * rowblockbytes
ASSIGN	5965:4	5965:17	5	stripbytes = rowblocksperstrip * rowblockbytes
LVAL	5965:4	5965:4	6	stripbytes
FIELD	5965:4	5965:4	7	stripbytes
LEAF_NODE	5965:4	5965:4	8	stripbytes
ASSIGN_OP	5965:15	5965:15	6	=
LEAF_NODE	5965:15	5965:15	7	=
RVAL	5965:17	5965:37	6	rowblocksperstrip * rowblockbytes
FIELD	5965:17	5965:17	7	rowblocksperstrip
LEAF_NODE	5965:17	5965:17	8	rowblocksperstrip
LEAF_NODE	5965:35	5965:35	7	*
FIELD	5965:37	5965:37	7	rowblockbytes
LEAF_NODE	5965:37	5965:37	8	rowblockbytes
LEAF_NODE	5965:50	5965:50	4	;
EXPR_STATEMENT	5966:4	5966:40	3	assert ( stripbytes <= 0x7FFFFFFFUL ) ;
EXPR	5966:4	5966:4	4	assert ( stripbytes <= 0x7FFFFFFFUL )
FUNCTION_CALL	5966:4	5966:39	5	assert ( stripbytes <= 0x7FFFFFFFUL )
CALLEE	5966:4	5966:4	6	assert
LEAF_NODE	5966:4	5966:4	7	assert
LEAF_NODE	5966:10	5966:10	6	(
ARGUMENT	5966:12	5966:26	6	stripbytes <= 0x7FFFFFFFUL
FIELD	5966:12	5966:12	7	stripbytes
LEAF_NODE	5966:12	5966:12	8	stripbytes
REL_OPERATOR	5966:23	5966:23	7	<=
LEAF_NODE	5966:23	5966:23	8	<=
FIELD	5966:26	5966:26	7	0x7FFFFFFFUL
LEAF_NODE	5966:26	5966:26	8	0x7FFFFFFFUL
LEAF_NODE	5966:39	5966:39	6	)
LEAF_NODE	5966:40	5966:40	4	;
EXPR_STATEMENT	5968:4	5968:62	3	nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip ) ;
EXPR	5968:4	5968:4	4	nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
ASSIGN	5968:4	5968:14	5	nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
LVAL	5968:4	5968:4	6	nstrips
FIELD	5968:4	5968:4	7	nstrips
LEAF_NODE	5968:4	5968:4	8	nstrips
ASSIGN_OP	5968:12	5968:12	6	=
LEAF_NODE	5968:12	5968:12	7	=
RVAL	5968:14	5968:14	6	TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
FUNCTION_CALL	5968:14	5968:61	7	TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip )
CALLEE	5968:14	5968:14	8	TIFFhowmany_32
LEAF_NODE	5968:14	5968:14	9	TIFFhowmany_32
LEAF_NODE	5968:28	5968:28	8	(
ARGUMENT	5968:29	5968:29	8	td -> td_imagelength
FIELD	5968:29	5968:33	9	td -> td_imagelength
LEAF_NODE	5968:29	5968:29	10	td
LEAF_NODE	5968:31	5968:31	10	->
LEAF_NODE	5968:33	5968:33	10	td_imagelength
LEAF_NODE	5968:47	5968:47	8	,
ARGUMENT	5968:49	5968:49	8	rowsperstrip
FIELD	5968:49	5968:49	9	rowsperstrip
LEAF_NODE	5968:49	5968:49	10	rowsperstrip
LEAF_NODE	5968:61	5968:61	8	)
LEAF_NODE	5968:62	5968:62	4	;
SELECTION	5969:4	5970:8	3	
KEYWORD	5969:4	5969:4	4	if
LEAF_NODE	5969:4	5969:4	5	if
LEAF_NODE	5969:6	5969:6	4	(
CONDITION	5969:8	5969:8	4	nstrips == 0
EXPR	5969:8	5969:19	5	nstrips == 0
FIELD	5969:8	5969:8	6	nstrips
LEAF_NODE	5969:8	5969:8	7	nstrips
EQ_OPERATOR	5969:16	5969:16	6	==
LEAF_NODE	5969:16	5969:16	7	==
FIELD	5969:19	5969:19	6	0
LEAF_NODE	5969:19	5969:19	7	0
LEAF_NODE	5969:21	5969:21	4	)
STATEMENTS	5970:8	5970:8	4	
JUMP_STATEMENT	5970:8	5970:14	5	return DESTINATION ;
KEYWORD	5970:8	5970:8	6	return
LEAF_NODE	5970:8	5970:8	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5970:14	5970:14	6	;
SELECTION	5974:4	5976:4	3	
KEYWORD	5974:4	5974:4	4	if
LEAF_NODE	5974:4	5974:4	5	if
LEAF_NODE	5974:6	5974:6	4	(
CONDITION	5974:8	5974:8	4	tif -> tif_mode == O_RDONLY && nstrips > 1000000
EXPR	5974:8	5974:8	5	tif -> tif_mode == O_RDONLY && nstrips > 1000000
AND	5974:8	5975:8	6	tif -> tif_mode == O_RDONLY && nstrips > 1000000
EXPR	5974:8	5974:25	7	tif -> tif_mode == O_RDONLY
FIELD	5974:8	5974:13	8	tif -> tif_mode
LEAF_NODE	5974:8	5974:8	9	tif
LEAF_NODE	5974:11	5974:11	9	->
LEAF_NODE	5974:13	5974:13	9	tif_mode
EQ_OPERATOR	5974:22	5974:22	8	==
LEAF_NODE	5974:22	5974:22	9	==
FIELD	5974:25	5974:25	8	O_RDONLY
LEAF_NODE	5974:25	5974:25	9	O_RDONLY
LEAF_NODE	5974:34	5974:34	7	&&
EXPR	5975:8	5975:18	7	nstrips > 1000000
FIELD	5975:8	5975:8	8	nstrips
LEAF_NODE	5975:8	5975:8	9	nstrips
REL_OPERATOR	5975:16	5975:16	8	>
LEAF_NODE	5975:16	5975:16	9	>
FIELD	5975:18	5975:18	8	1000000
LEAF_NODE	5975:18	5975:18	9	1000000
LEAF_NODE	5975:26	5975:26	4	)
STATEMENTS	5976:4	5985:4	4	
LEAF_NODE	5976:4	5976:4	5	{
STATEMENTS	5977:8	5980:8	5	
SIMPLE_DECL	5977:8	5977:71	6	uint64 last_offset ; last_offset = TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 ) ;
VAR_DECL	5977:8	5977:15	7	uint64 last_offset ; last_offset = TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
TYPE	5977:8	5977:8	8	uint64
TYPE_NAME	5977:8	5977:8	9	uint64
LEAF_NODE	5977:8	5977:8	10	uint64
NAME	5977:15	5977:15	8	last_offset
LEAF_NODE	5977:15	5977:15	9	last_offset
LEAF_NODE	0:0	0:0	8	;
INIT	5977:15	5977:15	8	last_offset = TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
ASSIGN	5977:15	5977:29	9	last_offset = TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
LVAL	5977:15	5977:15	10	last_offset
NAME	5977:15	5977:15	11	last_offset
LEAF_NODE	5977:15	5977:15	12	last_offset
ASSIGN_OP	5977:27	5977:27	10	=
LEAF_NODE	5977:27	5977:27	11	=
RVAL	5977:29	5977:29	10	TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
FUNCTION_CALL	5977:29	5977:70	11	TIFFGetStrileOffset ( tif , td -> td_nstrips - 1 )
CALLEE	5977:29	5977:29	12	TIFFGetStrileOffset
LEAF_NODE	5977:29	5977:29	13	TIFFGetStrileOffset
LEAF_NODE	5977:48	5977:48	12	(
ARGUMENT	5977:49	5977:49	12	tif
FIELD	5977:49	5977:49	13	tif
LEAF_NODE	5977:49	5977:49	14	tif
LEAF_NODE	5977:52	5977:52	12	,
ARGUMENT	5977:54	5977:69	12	td -> td_nstrips - 1
FIELD	5977:54	5977:58	13	td -> td_nstrips
LEAF_NODE	5977:54	5977:54	14	td
LEAF_NODE	5977:56	5977:56	14	->
LEAF_NODE	5977:58	5977:58	14	td_nstrips
LEAF_NODE	5977:68	5977:68	13	-
FIELD	5977:69	5977:69	13	1
LEAF_NODE	5977:69	5977:69	14	1
LEAF_NODE	5977:70	5977:70	12	)
LEAF_NODE	5977:71	5977:71	7	;
SIMPLE_DECL	5978:8	5978:46	6	uint64 filesize ; filesize = TIFFGetFileSize ( tif ) ;
VAR_DECL	5978:8	5978:15	7	uint64 filesize ; filesize = TIFFGetFileSize ( tif )
TYPE	5978:8	5978:8	8	uint64
TYPE_NAME	5978:8	5978:8	9	uint64
LEAF_NODE	5978:8	5978:8	10	uint64
NAME	5978:15	5978:15	8	filesize
LEAF_NODE	5978:15	5978:15	9	filesize
LEAF_NODE	0:0	0:0	8	;
INIT	5978:15	5978:15	8	filesize = TIFFGetFileSize ( tif )
ASSIGN	5978:15	5978:26	9	filesize = TIFFGetFileSize ( tif )
LVAL	5978:15	5978:15	10	filesize
NAME	5978:15	5978:15	11	filesize
LEAF_NODE	5978:15	5978:15	12	filesize
ASSIGN_OP	5978:24	5978:24	10	=
LEAF_NODE	5978:24	5978:24	11	=
RVAL	5978:26	5978:26	10	TIFFGetFileSize ( tif )
FUNCTION_CALL	5978:26	5978:45	11	TIFFGetFileSize ( tif )
CALLEE	5978:26	5978:26	12	TIFFGetFileSize
LEAF_NODE	5978:26	5978:26	13	TIFFGetFileSize
LEAF_NODE	5978:41	5978:41	12	(
ARGUMENT	5978:42	5978:42	12	tif
FIELD	5978:42	5978:42	13	tif
LEAF_NODE	5978:42	5978:42	14	tif
LEAF_NODE	5978:45	5978:45	12	)
LEAF_NODE	5978:46	5978:46	7	;
SIMPLE_DECL	5979:8	5979:77	6	uint64 last_bytecount ; last_bytecount = TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 ) ;
VAR_DECL	5979:8	5979:15	7	uint64 last_bytecount ; last_bytecount = TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
TYPE	5979:8	5979:8	8	uint64
TYPE_NAME	5979:8	5979:8	9	uint64
LEAF_NODE	5979:8	5979:8	10	uint64
NAME	5979:15	5979:15	8	last_bytecount
LEAF_NODE	5979:15	5979:15	9	last_bytecount
LEAF_NODE	0:0	0:0	8	;
INIT	5979:15	5979:15	8	last_bytecount = TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
ASSIGN	5979:15	5979:32	9	last_bytecount = TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
LVAL	5979:15	5979:15	10	last_bytecount
NAME	5979:15	5979:15	11	last_bytecount
LEAF_NODE	5979:15	5979:15	12	last_bytecount
ASSIGN_OP	5979:30	5979:30	10	=
LEAF_NODE	5979:30	5979:30	11	=
RVAL	5979:32	5979:32	10	TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
FUNCTION_CALL	5979:32	5979:76	11	TIFFGetStrileByteCount ( tif , td -> td_nstrips - 1 )
CALLEE	5979:32	5979:32	12	TIFFGetStrileByteCount
LEAF_NODE	5979:32	5979:32	13	TIFFGetStrileByteCount
LEAF_NODE	5979:54	5979:54	12	(
ARGUMENT	5979:55	5979:55	12	tif
FIELD	5979:55	5979:55	13	tif
LEAF_NODE	5979:55	5979:55	14	tif
LEAF_NODE	5979:58	5979:58	12	,
ARGUMENT	5979:60	5979:75	12	td -> td_nstrips - 1
FIELD	5979:60	5979:64	13	td -> td_nstrips
LEAF_NODE	5979:60	5979:60	14	td
LEAF_NODE	5979:62	5979:62	14	->
LEAF_NODE	5979:64	5979:64	14	td_nstrips
LEAF_NODE	5979:74	5979:74	13	-
FIELD	5979:75	5979:75	13	1
LEAF_NODE	5979:75	5979:75	14	1
LEAF_NODE	5979:76	5979:76	12	)
LEAF_NODE	5979:77	5979:77	7	;
SELECTION	5980:8	5982:8	6	
KEYWORD	5980:8	5980:8	7	if
LEAF_NODE	5980:8	5980:8	8	if
LEAF_NODE	5980:10	5980:10	7	(
CONDITION	5980:12	5980:12	7	last_offset > filesize || last_bytecount > filesize - last_offset
EXPR	5980:12	5980:12	8	last_offset > filesize || last_bytecount > filesize - last_offset
OR	5980:12	5981:12	9	last_offset > filesize || last_bytecount > filesize - last_offset
EXPR	5980:12	5980:26	10	last_offset > filesize
FIELD	5980:12	5980:12	11	last_offset
LEAF_NODE	5980:12	5980:12	12	last_offset
REL_OPERATOR	5980:24	5980:24	11	>
LEAF_NODE	5980:24	5980:24	12	>
FIELD	5980:26	5980:26	11	filesize
LEAF_NODE	5980:26	5980:26	12	filesize
LEAF_NODE	5980:35	5980:35	10	||
EXPR	5981:12	5981:40	10	last_bytecount > filesize - last_offset
FIELD	5981:12	5981:12	11	last_bytecount
LEAF_NODE	5981:12	5981:12	12	last_bytecount
REL_OPERATOR	5981:27	5981:27	11	>
LEAF_NODE	5981:27	5981:27	12	>
FIELD	5981:29	5981:29	11	filesize
LEAF_NODE	5981:29	5981:29	12	filesize
LEAF_NODE	5981:38	5981:38	11	-
FIELD	5981:40	5981:40	11	last_offset
LEAF_NODE	5981:40	5981:40	12	last_offset
LEAF_NODE	5981:52	5981:52	7	)
STATEMENTS	5982:8	5984:8	7	
LEAF_NODE	5982:8	5982:8	8	{
STATEMENTS	5983:12	5983:12	8	
JUMP_STATEMENT	5983:12	5983:18	9	return DESTINATION ;
KEYWORD	5983:12	5983:12	10	return
LEAF_NODE	5983:12	5983:12	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	5983:18	5983:18	10	;
LEAF_NODE	5984:8	5984:8	8	}
LEAF_NODE	5985:4	5985:4	5	}
EXPR_STATEMENT	5987:4	5987:69	3	allocChoppedUpStripArrays ( tif , nstrips , stripbytes , rowsperstrip ) ;
EXPR	5987:4	5987:4	4	allocChoppedUpStripArrays ( tif , nstrips , stripbytes , rowsperstrip )
FUNCTION_CALL	5987:4	5987:68	5	allocChoppedUpStripArrays ( tif , nstrips , stripbytes , rowsperstrip )
CALLEE	5987:4	5987:4	6	allocChoppedUpStripArrays
LEAF_NODE	5987:4	5987:4	7	allocChoppedUpStripArrays
LEAF_NODE	5987:29	5987:29	6	(
ARGUMENT	5987:30	5987:30	6	tif
FIELD	5987:30	5987:30	7	tif
LEAF_NODE	5987:30	5987:30	8	tif
LEAF_NODE	5987:33	5987:33	6	,
ARGUMENT	5987:35	5987:35	6	nstrips
FIELD	5987:35	5987:35	7	nstrips
LEAF_NODE	5987:35	5987:35	8	nstrips
LEAF_NODE	5987:42	5987:42	6	,
ARGUMENT	5987:44	5987:44	6	stripbytes
FIELD	5987:44	5987:44	7	stripbytes
LEAF_NODE	5987:44	5987:44	8	stripbytes
LEAF_NODE	5987:54	5987:54	6	,
ARGUMENT	5987:56	5987:56	6	rowsperstrip
FIELD	5987:56	5987:56	7	rowsperstrip
LEAF_NODE	5987:56	5987:56	8	rowsperstrip
LEAF_NODE	5987:68	5987:68	6	)
LEAF_NODE	5987:69	5987:69	4	;
LEAF_NODE	5988:0	5988:0	2	}
FUNCTION_DEF	5992:0	5995:0	1	
RETURN_TYPE	5992:0	5992:7	2	static uint64
LEAF_NODE	5992:0	5992:0	3	static
TYPE_NAME	5992:7	5992:7	3	uint64
LEAF_NODE	5992:7	5992:7	4	uint64
FUNCTION_NAME	5992:14	5992:14	2	_TIFFUnsanitizedAddUInt64AndInt
LEAF_NODE	5992:14	5992:14	3	_TIFFUnsanitizedAddUInt64AndInt
PARAMETER_LIST	5992:45	5992:61	2	( uint64 a , int b )
LEAF_NODE	5992:45	5992:45	3	(
PARAMETER_DECL	5992:46	5992:53	3	uint64 a
TYPE	5992:46	5992:46	4	uint64
TYPE_NAME	5992:46	5992:46	5	uint64
LEAF_NODE	5992:46	5992:46	6	uint64
NAME	5992:53	5992:53	4	a
LEAF_NODE	5992:53	5992:53	5	a
LEAF_NODE	5992:54	5992:54	3	,
PARAMETER_DECL	5992:56	5992:60	3	int b
TYPE	5992:56	5992:56	4	int
TYPE_NAME	5992:56	5992:56	5	int
LEAF_NODE	5992:56	5992:56	6	int
NAME	5992:60	5992:60	4	b
LEAF_NODE	5992:60	5992:60	5	b
LEAF_NODE	5992:61	5992:61	3	)
LEAF_NODE	5993:0	5993:0	2	{
STATEMENTS	5994:4	5994:4	2	
JUMP_STATEMENT	5994:4	5994:16	3	return a + b ;
KEYWORD	5994:4	5994:4	4	return
LEAF_NODE	5994:4	5994:4	5	return
DESTINATION	5994:11	5994:11	4	a + b
EXPR	5994:11	5994:15	5	a + b
FIELD	5994:11	5994:11	6	a
LEAF_NODE	5994:11	5994:11	7	a
LEAF_NODE	5994:13	5994:13	6	+
FIELD	5994:15	5994:15	6	b
LEAF_NODE	5994:15	5994:15	7	b
LEAF_NODE	5994:16	5994:16	4	;
LEAF_NODE	5995:0	5995:0	2	}
FUNCTION_DEF	6001:0	6141:0	1	
RETURN_TYPE	6001:0	6002:0	2	static int
LEAF_NODE	6001:0	6001:0	3	static
TYPE_NAME	6002:0	6002:0	3	int
LEAF_NODE	6002:0	6002:0	4	int
FUNCTION_NAME	6002:4	6002:4	2	_TIFFPartialReadStripArray
LEAF_NODE	6002:4	6002:4	3	_TIFFPartialReadStripArray
PARAMETER_LIST	6002:30	6003:60	2	( TIFF * tif , TIFFDirEntry * dirent , int strile , uint64 * panVals )
LEAF_NODE	6002:30	6002:30	3	(
PARAMETER_DECL	6002:32	6002:38	3	TIFF * tif
TYPE	6002:32	6002:36	4	TIFF *
TYPE_NAME	6002:32	6002:32	5	TIFF
LEAF_NODE	6002:32	6002:32	6	TIFF
POINTER	6002:36	6002:36	5	*
LEAF_NODE	6002:36	6002:36	6	*
NAME	6002:38	6002:38	4	tif
LEAF_NODE	6002:38	6002:38	5	tif
LEAF_NODE	6002:41	6002:41	3	,
PARAMETER_DECL	6002:43	6002:57	3	TIFFDirEntry * dirent
TYPE	6002:43	6002:55	4	TIFFDirEntry *
TYPE_NAME	6002:43	6002:43	5	TIFFDirEntry
LEAF_NODE	6002:43	6002:43	6	TIFFDirEntry
POINTER	6002:55	6002:55	5	*
LEAF_NODE	6002:55	6002:55	6	*
NAME	6002:57	6002:57	4	dirent
LEAF_NODE	6002:57	6002:57	5	dirent
LEAF_NODE	6002:63	6002:63	3	,
PARAMETER_DECL	6003:32	6003:36	3	int strile
TYPE	6003:32	6003:32	4	int
TYPE_NAME	6003:32	6003:32	5	int
LEAF_NODE	6003:32	6003:32	6	int
NAME	6003:36	6003:36	4	strile
LEAF_NODE	6003:36	6003:36	5	strile
LEAF_NODE	6003:42	6003:42	3	,
PARAMETER_DECL	6003:44	6003:52	3	uint64 * panVals
TYPE	6003:44	6003:50	4	uint64 *
TYPE_NAME	6003:44	6003:44	5	uint64
LEAF_NODE	6003:44	6003:44	6	uint64
POINTER	6003:50	6003:50	5	*
LEAF_NODE	6003:50	6003:50	6	*
NAME	6003:52	6003:52	4	panVals
LEAF_NODE	6003:52	6003:52	5	panVals
LEAF_NODE	6003:60	6003:60	3	)
LEAF_NODE	6004:0	6004:0	2	{
STATEMENTS	6005:4	6140:4	2	
LEAF_NODE	6005:4	6005:4	3	static
SIMPLE_DECL	6005:11	6005:61	3	const char [ ] module ; module = "_TIFFPartialReadStripArray" ;
VAR_DECL	6005:11	6005:22	4	const char [ ] module ; module = "_TIFFPartialReadStripArray"
TYPE	6005:11	6005:28	5	const char [ ]
TYPE_NAME	6005:11	6005:17	6	const char
LEAF_NODE	6005:11	6005:11	7	const
LEAF_NODE	6005:17	6005:17	7	char
TYPE_SUFFIX	6005:28	6005:29	6	[ ]
LEAF_NODE	6005:28	6005:28	7	[
LEAF_NODE	6005:29	6005:29	7	]
NAME	6005:22	6005:22	5	module
LEAF_NODE	6005:22	6005:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	6005:22	6005:22	5	module = "_TIFFPartialReadStripArray"
ASSIGN	6005:22	6005:33	6	module = "_TIFFPartialReadStripArray"
LVAL	6005:22	6005:22	7	module
NAME	6005:22	6005:22	8	module
LEAF_NODE	6005:22	6005:22	9	module
ASSIGN_OP	6005:31	6005:31	7	=
LEAF_NODE	6005:31	6005:31	8	=
RVAL	6005:33	6005:33	7	"_TIFFPartialReadStripArray"
FIELD	6005:33	6005:33	8	"_TIFFPartialReadStripArray"
LEAF_NODE	6005:33	6005:33	9	"_TIFFPartialReadStripArray"
LEAF_NODE	6005:61	6005:61	4	;
SIMPLE_DECL	6008:4	6008:20	3	size_t sizeofval ;
VAR_DECL	6008:4	6008:11	4	size_t sizeofval
TYPE	6008:4	6008:4	5	size_t
TYPE_NAME	6008:4	6008:4	6	size_t
LEAF_NODE	6008:4	6008:4	7	size_t
NAME	6008:11	6008:11	5	sizeofval
LEAF_NODE	6008:11	6008:11	6	sizeofval
LEAF_NODE	6008:20	6008:20	4	;
SIMPLE_DECL	6009:4	6009:55	3	const int bSwab ; bSwab = ( tif -> tif_flags & TIFF_SWAB ) != 0 ;
VAR_DECL	6009:4	6009:14	4	const int bSwab ; bSwab = ( tif -> tif_flags & TIFF_SWAB ) != 0
TYPE	6009:4	6009:4	5	const int
TYPE_NAME	6009:4	6009:10	6	const int
LEAF_NODE	6009:4	6009:4	7	const
LEAF_NODE	6009:10	6009:10	7	int
NAME	6009:14	6009:14	5	bSwab
LEAF_NODE	6009:14	6009:14	6	bSwab
LEAF_NODE	0:0	0:0	5	;
INIT	6009:14	6009:14	5	bSwab = ( tif -> tif_flags & TIFF_SWAB ) != 0
ASSIGN	6009:14	6009:22	6	bSwab = ( tif -> tif_flags & TIFF_SWAB ) != 0
LVAL	6009:14	6009:14	7	bSwab
NAME	6009:14	6009:14	8	bSwab
LEAF_NODE	6009:14	6009:14	9	bSwab
ASSIGN_OP	6009:20	6009:20	7	=
LEAF_NODE	6009:20	6009:20	8	=
RVAL	6009:22	6009:54	7	( tif -> tif_flags & TIFF_SWAB ) != 0
LEAF_NODE	6009:22	6009:22	8	(
FIELD	6009:23	6009:28	8	tif -> tif_flags
LEAF_NODE	6009:23	6009:23	9	tif
LEAF_NODE	6009:26	6009:26	9	->
LEAF_NODE	6009:28	6009:28	9	tif_flags
LEAF_NODE	6009:38	6009:38	8	&
FIELD	6009:40	6009:40	8	TIFF_SWAB
LEAF_NODE	6009:40	6009:40	9	TIFF_SWAB
LEAF_NODE	6009:49	6009:49	8	)
EQ_OPERATOR	6009:51	6009:51	8	!=
LEAF_NODE	6009:51	6009:51	9	!=
FIELD	6009:54	6009:54	8	0
LEAF_NODE	6009:54	6009:54	9	0
LEAF_NODE	6009:55	6009:55	4	;
SIMPLE_DECL	6010:4	6010:20	3	int sizeofvalint ;
VAR_DECL	6010:4	6010:8	4	int sizeofvalint
TYPE	6010:4	6010:4	5	int
TYPE_NAME	6010:4	6010:4	6	int
LEAF_NODE	6010:4	6010:4	7	int
NAME	6010:8	6010:8	5	sizeofvalint
LEAF_NODE	6010:8	6010:8	6	sizeofvalint
LEAF_NODE	6010:20	6010:20	4	;
SIMPLE_DECL	6011:4	6011:22	3	uint64 nBaseOffset ;
VAR_DECL	6011:4	6011:11	4	uint64 nBaseOffset
TYPE	6011:4	6011:4	5	uint64
TYPE_NAME	6011:4	6011:4	6	uint64
LEAF_NODE	6011:4	6011:4	7	uint64
NAME	6011:11	6011:11	5	nBaseOffset
LEAF_NODE	6011:11	6011:11	6	nBaseOffset
LEAF_NODE	6011:22	6011:22	4	;
SIMPLE_DECL	6012:4	6012:18	3	uint64 nOffset ;
VAR_DECL	6012:4	6012:11	4	uint64 nOffset
TYPE	6012:4	6012:4	5	uint64
TYPE_NAME	6012:4	6012:4	6	uint64
LEAF_NODE	6012:4	6012:4	7	uint64
NAME	6012:11	6012:11	5	nOffset
LEAF_NODE	6012:11	6012:11	6	nOffset
LEAF_NODE	6012:18	6012:18	4	;
SIMPLE_DECL	6013:4	6013:27	3	uint64 nOffsetStartPage ;
VAR_DECL	6013:4	6013:11	4	uint64 nOffsetStartPage
TYPE	6013:4	6013:4	5	uint64
TYPE_NAME	6013:4	6013:4	6	uint64
LEAF_NODE	6013:4	6013:4	7	uint64
NAME	6013:11	6013:11	5	nOffsetStartPage
LEAF_NODE	6013:11	6013:11	6	nOffsetStartPage
LEAF_NODE	6013:27	6013:27	4	;
SIMPLE_DECL	6014:4	6014:25	3	uint64 nOffsetEndPage ;
VAR_DECL	6014:4	6014:11	4	uint64 nOffsetEndPage
TYPE	6014:4	6014:4	5	uint64
TYPE_NAME	6014:4	6014:4	6	uint64
LEAF_NODE	6014:4	6014:4	7	uint64
NAME	6014:11	6014:11	5	nOffsetEndPage
LEAF_NODE	6014:11	6014:11	6	nOffsetEndPage
LEAF_NODE	6014:25	6014:25	4	;
SIMPLE_DECL	6015:4	6015:20	3	tmsize_t nToRead ;
VAR_DECL	6015:4	6015:13	4	tmsize_t nToRead
TYPE	6015:4	6015:4	5	tmsize_t
TYPE_NAME	6015:4	6015:4	6	tmsize_t
LEAF_NODE	6015:4	6015:4	7	tmsize_t
NAME	6015:13	6015:13	5	nToRead
LEAF_NODE	6015:13	6015:13	6	nToRead
LEAF_NODE	6015:20	6015:20	4	;
SIMPLE_DECL	6016:4	6016:18	3	tmsize_t nRead ;
VAR_DECL	6016:4	6016:13	4	tmsize_t nRead
TYPE	6016:4	6016:4	5	tmsize_t
TYPE_NAME	6016:4	6016:4	6	tmsize_t
LEAF_NODE	6016:4	6016:4	7	tmsize_t
NAME	6016:13	6016:13	5	nRead
LEAF_NODE	6016:13	6016:13	6	nRead
LEAF_NODE	6016:18	6016:18	4	;
SIMPLE_DECL	6017:4	6017:27	3	uint64 nLastStripOffset ;
VAR_DECL	6017:4	6017:11	4	uint64 nLastStripOffset
TYPE	6017:4	6017:4	5	uint64
TYPE_NAME	6017:4	6017:4	6	uint64
LEAF_NODE	6017:4	6017:4	7	uint64
NAME	6017:11	6017:11	5	nLastStripOffset
LEAF_NODE	6017:11	6017:11	6	nLastStripOffset
LEAF_NODE	6017:27	6017:27	4	;
SIMPLE_DECL	6018:4	6018:20	3	int iStartBefore ;
VAR_DECL	6018:4	6018:8	4	int iStartBefore
TYPE	6018:4	6018:4	5	int
TYPE_NAME	6018:4	6018:4	6	int
LEAF_NODE	6018:4	6018:4	7	int
NAME	6018:8	6018:8	5	iStartBefore
LEAF_NODE	6018:8	6018:8	6	iStartBefore
LEAF_NODE	6018:20	6018:20	4	;
SIMPLE_DECL	6019:4	6019:9	3	int i ;
VAR_DECL	6019:4	6019:8	4	int i
TYPE	6019:4	6019:4	5	int
TYPE_NAME	6019:4	6019:4	6	int
LEAF_NODE	6019:4	6019:4	7	int
NAME	6019:8	6019:8	5	i
LEAF_NODE	6019:8	6019:8	6	i
LEAF_NODE	6019:9	6019:9	4	;
SIMPLE_DECL	6020:4	6020:69	3	const uint32 arraySize ; arraySize = tif -> tif_dir . td_stripoffsetbyteallocsize ;
VAR_DECL	6020:4	6020:17	4	const uint32 arraySize ; arraySize = tif -> tif_dir . td_stripoffsetbyteallocsize
TYPE	6020:4	6020:4	5	const uint32
TYPE_NAME	6020:4	6020:10	6	const uint32
LEAF_NODE	6020:4	6020:4	7	const
LEAF_NODE	6020:10	6020:10	7	uint32
NAME	6020:17	6020:17	5	arraySize
LEAF_NODE	6020:17	6020:17	6	arraySize
LEAF_NODE	0:0	0:0	5	;
INIT	6020:17	6020:17	5	arraySize = tif -> tif_dir . td_stripoffsetbyteallocsize
ASSIGN	6020:17	6020:29	6	arraySize = tif -> tif_dir . td_stripoffsetbyteallocsize
LVAL	6020:17	6020:17	7	arraySize
NAME	6020:17	6020:17	8	arraySize
LEAF_NODE	6020:17	6020:17	9	arraySize
ASSIGN_OP	6020:27	6020:27	7	=
LEAF_NODE	6020:27	6020:27	8	=
RVAL	6020:29	6020:29	7	tif -> tif_dir . td_stripoffsetbyteallocsize
FIELD	6020:29	6020:42	8	tif -> tif_dir . td_stripoffsetbyteallocsize
LEAF_NODE	6020:29	6020:29	9	tif
LEAF_NODE	6020:32	6020:32	9	->
LEAF_NODE	6020:34	6020:34	9	tif_dir
LEAF_NODE	6020:41	6020:41	9	.
LEAF_NODE	6020:42	6020:42	9	td_stripoffsetbyteallocsize
LEAF_NODE	6020:69	6020:69	4	;
SIMPLE_DECL	6021:4	6021:48	3	unsigned char [ 2 * IO_CACHE_PAGE_SIZE ] buffer ;
VAR_DECL	6021:4	6021:18	4	unsigned char [ 2 * IO_CACHE_PAGE_SIZE ] buffer
TYPE	6021:4	6021:24	5	unsigned char [ 2 * IO_CACHE_PAGE_SIZE ]
TYPE_NAME	6021:4	6021:13	6	unsigned char
LEAF_NODE	6021:4	6021:4	7	unsigned
LEAF_NODE	6021:13	6021:13	7	char
TYPE_SUFFIX	6021:24	6021:47	6	[ 2 * IO_CACHE_PAGE_SIZE ]
LEAF_NODE	6021:24	6021:24	7	[
FIELD	6021:25	6021:25	7	2
LEAF_NODE	6021:25	6021:25	8	2
LEAF_NODE	6021:27	6021:27	7	*
FIELD	6021:29	6021:29	7	IO_CACHE_PAGE_SIZE
LEAF_NODE	6021:29	6021:29	8	IO_CACHE_PAGE_SIZE
LEAF_NODE	6021:47	6021:47	7	]
NAME	6021:18	6021:18	5	buffer
LEAF_NODE	6021:18	6021:18	6	buffer
LEAF_NODE	6021:48	6021:48	4	;
EXPR_STATEMENT	6023:4	6023:36	3	assert ( dirent -> tdir_count > 4 ) ;
EXPR	6023:4	6023:4	4	assert ( dirent -> tdir_count > 4 )
FUNCTION_CALL	6023:4	6023:35	5	assert ( dirent -> tdir_count > 4 )
CALLEE	6023:4	6023:4	6	assert
LEAF_NODE	6023:4	6023:4	7	assert
LEAF_NODE	6023:10	6023:10	6	(
ARGUMENT	6023:12	6023:33	6	dirent -> tdir_count > 4
FIELD	6023:12	6023:20	7	dirent -> tdir_count
LEAF_NODE	6023:12	6023:12	8	dirent
LEAF_NODE	6023:18	6023:18	8	->
LEAF_NODE	6023:20	6023:20	8	tdir_count
REL_OPERATOR	6023:31	6023:31	7	>
LEAF_NODE	6023:31	6023:31	8	>
FIELD	6023:33	6023:33	7	4
LEAF_NODE	6023:33	6023:33	8	4
LEAF_NODE	6023:35	6023:35	6	)
LEAF_NODE	6023:36	6023:36	4	;
SELECTION	6025:4	6026:4	3	
KEYWORD	6025:4	6025:4	4	if
LEAF_NODE	6025:4	6025:4	5	if
LEAF_NODE	6025:6	6025:6	4	(
CONDITION	6025:8	6025:8	4	dirent -> tdir_type == TIFF_SHORT
EXPR	6025:8	6025:29	5	dirent -> tdir_type == TIFF_SHORT
FIELD	6025:8	6025:16	6	dirent -> tdir_type
LEAF_NODE	6025:8	6025:8	7	dirent
LEAF_NODE	6025:14	6025:14	7	->
LEAF_NODE	6025:16	6025:16	7	tdir_type
EQ_OPERATOR	6025:26	6025:26	6	==
LEAF_NODE	6025:26	6025:26	7	==
FIELD	6025:29	6025:29	6	TIFF_SHORT
LEAF_NODE	6025:29	6025:29	7	TIFF_SHORT
LEAF_NODE	6025:40	6025:40	4	)
STATEMENTS	6026:4	6028:4	4	
LEAF_NODE	6026:4	6026:4	5	{
STATEMENTS	6027:8	6027:8	5	
EXPR_STATEMENT	6027:8	6027:34	6	sizeofval = sizeof ( uint16 ) ;
EXPR	6027:8	6027:8	7	sizeofval = sizeof ( uint16 )
ASSIGN	6027:8	6027:20	8	sizeofval = sizeof ( uint16 )
LVAL	6027:8	6027:8	9	sizeofval
FIELD	6027:8	6027:8	10	sizeofval
LEAF_NODE	6027:8	6027:8	11	sizeofval
ASSIGN_OP	6027:18	6027:18	9	=
LEAF_NODE	6027:18	6027:18	10	=
RVAL	6027:20	6027:20	9	sizeof ( uint16 )
FUNCTION_CALL	6027:20	6027:33	10	sizeof ( uint16 )
CALLEE	6027:20	6027:20	11	sizeof
LEAF_NODE	6027:20	6027:20	12	sizeof
LEAF_NODE	6027:26	6027:26	11	(
ARGUMENT	6027:27	6027:27	11	uint16
FIELD	6027:27	6027:27	12	uint16
LEAF_NODE	6027:27	6027:27	13	uint16
LEAF_NODE	6027:33	6027:33	11	)
LEAF_NODE	6027:34	6027:34	7	;
LEAF_NODE	6028:4	6028:4	5	}
SELECTION	6029:4	6029:9	3	
KEYWORD	6029:4	6029:4	4	else
LEAF_NODE	6029:4	6029:4	5	else
STATEMENTS	6029:9	6029:9	4	
SELECTION	6029:9	6030:4	5	
KEYWORD	6029:9	6029:9	6	if
LEAF_NODE	6029:9	6029:9	7	if
LEAF_NODE	6029:11	6029:11	6	(
CONDITION	6029:13	6029:13	6	dirent -> tdir_type == TIFF_LONG
EXPR	6029:13	6029:34	7	dirent -> tdir_type == TIFF_LONG
FIELD	6029:13	6029:21	8	dirent -> tdir_type
LEAF_NODE	6029:13	6029:13	9	dirent
LEAF_NODE	6029:19	6029:19	9	->
LEAF_NODE	6029:21	6029:21	9	tdir_type
EQ_OPERATOR	6029:31	6029:31	8	==
LEAF_NODE	6029:31	6029:31	9	==
FIELD	6029:34	6029:34	8	TIFF_LONG
LEAF_NODE	6029:34	6029:34	9	TIFF_LONG
LEAF_NODE	6029:44	6029:44	6	)
STATEMENTS	6030:4	6032:4	6	
LEAF_NODE	6030:4	6030:4	7	{
STATEMENTS	6031:8	6031:8	7	
EXPR_STATEMENT	6031:8	6031:34	8	sizeofval = sizeof ( uint32 ) ;
EXPR	6031:8	6031:8	9	sizeofval = sizeof ( uint32 )
ASSIGN	6031:8	6031:20	10	sizeofval = sizeof ( uint32 )
LVAL	6031:8	6031:8	11	sizeofval
FIELD	6031:8	6031:8	12	sizeofval
LEAF_NODE	6031:8	6031:8	13	sizeofval
ASSIGN_OP	6031:18	6031:18	11	=
LEAF_NODE	6031:18	6031:18	12	=
RVAL	6031:20	6031:20	11	sizeof ( uint32 )
FUNCTION_CALL	6031:20	6031:33	12	sizeof ( uint32 )
CALLEE	6031:20	6031:20	13	sizeof
LEAF_NODE	6031:20	6031:20	14	sizeof
LEAF_NODE	6031:26	6031:26	13	(
ARGUMENT	6031:27	6031:27	13	uint32
FIELD	6031:27	6031:27	14	uint32
LEAF_NODE	6031:27	6031:27	15	uint32
LEAF_NODE	6031:33	6031:33	13	)
LEAF_NODE	6031:34	6031:34	9	;
LEAF_NODE	6032:4	6032:4	7	}
SELECTION	6033:4	6033:9	3	
KEYWORD	6033:4	6033:4	4	else
LEAF_NODE	6033:4	6033:4	5	else
STATEMENTS	6033:9	6033:9	4	
SELECTION	6033:9	6034:4	5	
KEYWORD	6033:9	6033:9	6	if
LEAF_NODE	6033:9	6033:9	7	if
LEAF_NODE	6033:11	6033:11	6	(
CONDITION	6033:13	6033:13	6	dirent -> tdir_type == TIFF_LONG8
EXPR	6033:13	6033:34	7	dirent -> tdir_type == TIFF_LONG8
FIELD	6033:13	6033:21	8	dirent -> tdir_type
LEAF_NODE	6033:13	6033:13	9	dirent
LEAF_NODE	6033:19	6033:19	9	->
LEAF_NODE	6033:21	6033:21	9	tdir_type
EQ_OPERATOR	6033:31	6033:31	8	==
LEAF_NODE	6033:31	6033:31	9	==
FIELD	6033:34	6033:34	8	TIFF_LONG8
LEAF_NODE	6033:34	6033:34	9	TIFF_LONG8
LEAF_NODE	6033:45	6033:45	6	)
STATEMENTS	6034:4	6036:4	6	
LEAF_NODE	6034:4	6034:4	7	{
STATEMENTS	6035:8	6035:8	7	
EXPR_STATEMENT	6035:8	6035:34	8	sizeofval = sizeof ( uint64 ) ;
EXPR	6035:8	6035:8	9	sizeofval = sizeof ( uint64 )
ASSIGN	6035:8	6035:20	10	sizeofval = sizeof ( uint64 )
LVAL	6035:8	6035:8	11	sizeofval
FIELD	6035:8	6035:8	12	sizeofval
LEAF_NODE	6035:8	6035:8	13	sizeofval
ASSIGN_OP	6035:18	6035:18	11	=
LEAF_NODE	6035:18	6035:18	12	=
RVAL	6035:20	6035:20	11	sizeof ( uint64 )
FUNCTION_CALL	6035:20	6035:33	12	sizeof ( uint64 )
CALLEE	6035:20	6035:20	13	sizeof
LEAF_NODE	6035:20	6035:20	14	sizeof
LEAF_NODE	6035:26	6035:26	13	(
ARGUMENT	6035:27	6035:27	13	uint64
FIELD	6035:27	6035:27	14	uint64
LEAF_NODE	6035:27	6035:27	15	uint64
LEAF_NODE	6035:33	6035:33	13	)
LEAF_NODE	6035:34	6035:34	9	;
LEAF_NODE	6036:4	6036:4	7	}
SELECTION	6037:4	6038:4	3	
KEYWORD	6037:4	6037:4	4	else
LEAF_NODE	6037:4	6037:4	5	else
STATEMENTS	6038:4	6043:4	4	
LEAF_NODE	6038:4	6038:4	5	{
STATEMENTS	6039:8	6042:8	5	
EXPR_STATEMENT	6039:8	6040:71	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid type for [Strip|Tile][Offset/ByteCount] tag" ) ;
EXPR	6039:8	6039:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid type for [Strip|Tile][Offset/ByteCount] tag" )
FUNCTION_CALL	6039:8	6040:70	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Invalid type for [Strip|Tile][Offset/ByteCount] tag" )
CALLEE	6039:8	6039:8	9	TIFFErrorExt
LEAF_NODE	6039:8	6039:8	10	TIFFErrorExt
LEAF_NODE	6039:20	6039:20	9	(
ARGUMENT	6039:21	6039:21	9	tif -> tif_clientdata
FIELD	6039:21	6039:26	10	tif -> tif_clientdata
LEAF_NODE	6039:21	6039:21	11	tif
LEAF_NODE	6039:24	6039:24	11	->
LEAF_NODE	6039:26	6039:26	11	tif_clientdata
LEAF_NODE	6039:40	6039:40	9	,
ARGUMENT	6039:42	6039:42	9	module
FIELD	6039:42	6039:42	10	module
LEAF_NODE	6039:42	6039:42	11	module
LEAF_NODE	6039:48	6039:48	9	,
ARGUMENT	6040:17	6040:17	9	"Invalid type for [Strip|Tile][Offset/ByteCount] tag"
FIELD	6040:17	6040:17	10	"Invalid type for [Strip|Tile][Offset/ByteCount] tag"
LEAF_NODE	6040:17	6040:17	11	"Invalid type for [Strip|Tile][Offset/ByteCount] tag"
LEAF_NODE	6040:70	6040:70	9	)
LEAF_NODE	6040:71	6040:71	7	;
EXPR_STATEMENT	6041:8	6041:27	6	panVals [ strile ] = 0 ;
EXPR	6041:8	6041:8	7	panVals [ strile ] = 0
ASSIGN	6041:8	6041:26	8	panVals [ strile ] = 0
LVAL	6041:8	6041:8	9	panVals [ strile ]
FIELD	6041:8	6041:22	10	panVals [ strile ]
LEAF_NODE	6041:8	6041:8	11	panVals
LEAF_NODE	6041:15	6041:15	11	[
EXPR	6041:16	6041:16	11	strile
FIELD	6041:16	6041:16	12	strile
LEAF_NODE	6041:16	6041:16	13	strile
LEAF_NODE	6041:22	6041:22	11	]
ASSIGN_OP	6041:24	6041:24	9	=
LEAF_NODE	6041:24	6041:24	10	=
RVAL	6041:26	6041:26	9	0
FIELD	6041:26	6041:26	10	0
LEAF_NODE	6041:26	6041:26	11	0
LEAF_NODE	6041:27	6041:27	7	;
JUMP_STATEMENT	6042:8	6042:16	6	return 0 ;
KEYWORD	6042:8	6042:8	7	return
LEAF_NODE	6042:8	6042:8	8	return
DESTINATION	6042:15	6042:15	7	0
EXPR	6042:15	6042:15	8	0
FIELD	6042:15	6042:15	9	0
LEAF_NODE	6042:15	6042:15	10	0
LEAF_NODE	6042:16	6042:16	7	;
LEAF_NODE	6043:4	6043:4	5	}
LEAF_NODE	6044:4	6044:4	3	sizeofvalint
LEAF_NODE	6044:17	6044:17	3	=
LEAF_NODE	6044:19	6044:19	3	(
LEAF_NODE	6044:20	6044:20	3	int
LEAF_NODE	6044:23	6044:23	3	)
LEAF_NODE	6044:24	6044:24	3	(
LEAF_NODE	6044:25	6044:25	3	sizeofval
LEAF_NODE	6044:34	6044:34	3	)
LEAF_NODE	6044:35	6044:35	3	;
SELECTION	6046:4	6047:4	3	
KEYWORD	6046:4	6046:4	4	if
LEAF_NODE	6046:4	6046:4	5	if
LEAF_NODE	6046:6	6046:6	4	(
CONDITION	6046:8	6046:8	4	tif -> tif_flags & TIFF_BIGTIFF
EXPR	6046:8	6046:23	5	tif -> tif_flags & TIFF_BIGTIFF
FIELD	6046:8	6046:13	6	tif -> tif_flags
LEAF_NODE	6046:8	6046:8	7	tif
LEAF_NODE	6046:11	6046:11	7	->
LEAF_NODE	6046:13	6046:13	7	tif_flags
LEAF_NODE	6046:22	6046:22	6	&
FIELD	6046:23	6046:23	6	TIFF_BIGTIFF
LEAF_NODE	6046:23	6046:23	7	TIFF_BIGTIFF
LEAF_NODE	6046:36	6046:36	4	)
STATEMENTS	6047:4	6052:4	4	
LEAF_NODE	6047:4	6047:4	5	{
STATEMENTS	6048:8	6051:8	5	
SIMPLE_DECL	6048:8	6048:54	6	uint64 offset ; offset = dirent -> tdir_offset . toff_long8 ;
VAR_DECL	6048:8	6048:15	7	uint64 offset ; offset = dirent -> tdir_offset . toff_long8
TYPE	6048:8	6048:8	8	uint64
TYPE_NAME	6048:8	6048:8	9	uint64
LEAF_NODE	6048:8	6048:8	10	uint64
NAME	6048:15	6048:15	8	offset
LEAF_NODE	6048:15	6048:15	9	offset
LEAF_NODE	0:0	0:0	8	;
INIT	6048:15	6048:15	8	offset = dirent -> tdir_offset . toff_long8
ASSIGN	6048:15	6048:24	9	offset = dirent -> tdir_offset . toff_long8
LVAL	6048:15	6048:15	10	offset
NAME	6048:15	6048:15	11	offset
LEAF_NODE	6048:15	6048:15	12	offset
ASSIGN_OP	6048:22	6048:22	10	=
LEAF_NODE	6048:22	6048:22	11	=
RVAL	6048:24	6048:24	10	dirent -> tdir_offset . toff_long8
FIELD	6048:24	6048:44	11	dirent -> tdir_offset . toff_long8
LEAF_NODE	6048:24	6048:24	12	dirent
LEAF_NODE	6048:30	6048:30	12	->
LEAF_NODE	6048:32	6048:32	12	tdir_offset
LEAF_NODE	6048:43	6048:43	12	.
LEAF_NODE	6048:44	6048:44	12	toff_long8
LEAF_NODE	6048:54	6048:54	7	;
SELECTION	6049:8	6050:12	6	
KEYWORD	6049:8	6049:8	7	if
LEAF_NODE	6049:8	6049:8	8	if
LEAF_NODE	6049:10	6049:10	7	(
CONDITION	6049:12	6049:12	7	bSwab
EXPR	6049:12	6049:12	8	bSwab
FIELD	6049:12	6049:12	9	bSwab
LEAF_NODE	6049:12	6049:12	10	bSwab
LEAF_NODE	6049:18	6049:18	7	)
STATEMENTS	6050:12	6050:12	7	
EXPR_STATEMENT	6050:12	6050:34	8	TIFFSwabLong8 ( & offset ) ;
EXPR	6050:12	6050:12	9	TIFFSwabLong8 ( & offset )
FUNCTION_CALL	6050:12	6050:33	10	TIFFSwabLong8 ( & offset )
CALLEE	6050:12	6050:12	11	TIFFSwabLong8
LEAF_NODE	6050:12	6050:12	12	TIFFSwabLong8
LEAF_NODE	6050:25	6050:25	11	(
ARGUMENT	6050:26	6050:26	11	& offset
UNARY_EXPR	6050:26	6050:27	12	& offset
UNARY_OPERATOR	6050:26	6050:26	13	&
LEAF_NODE	6050:26	6050:26	14	&
FIELD	6050:27	6050:27	13	offset
LEAF_NODE	6050:27	6050:27	14	offset
LEAF_NODE	6050:33	6050:33	11	)
LEAF_NODE	6050:34	6050:34	9	;
EXPR_STATEMENT	6051:8	6051:28	6	nBaseOffset = offset ;
EXPR	6051:8	6051:8	7	nBaseOffset = offset
ASSIGN	6051:8	6051:22	8	nBaseOffset = offset
LVAL	6051:8	6051:8	9	nBaseOffset
FIELD	6051:8	6051:8	10	nBaseOffset
LEAF_NODE	6051:8	6051:8	11	nBaseOffset
ASSIGN_OP	6051:20	6051:20	9	=
LEAF_NODE	6051:20	6051:20	10	=
RVAL	6051:22	6051:22	9	offset
FIELD	6051:22	6051:22	10	offset
LEAF_NODE	6051:22	6051:22	11	offset
LEAF_NODE	6051:28	6051:28	7	;
LEAF_NODE	6052:4	6052:4	5	}
SELECTION	6053:4	6054:4	3	
KEYWORD	6053:4	6053:4	4	else
LEAF_NODE	6053:4	6053:4	5	else
STATEMENTS	6054:4	6059:4	4	
LEAF_NODE	6054:4	6054:4	5	{
STATEMENTS	6055:8	6058:8	5	
SIMPLE_DECL	6055:8	6055:53	6	uint32 offset ; offset = dirent -> tdir_offset . toff_long ;
VAR_DECL	6055:8	6055:15	7	uint32 offset ; offset = dirent -> tdir_offset . toff_long
TYPE	6055:8	6055:8	8	uint32
TYPE_NAME	6055:8	6055:8	9	uint32
LEAF_NODE	6055:8	6055:8	10	uint32
NAME	6055:15	6055:15	8	offset
LEAF_NODE	6055:15	6055:15	9	offset
LEAF_NODE	0:0	0:0	8	;
INIT	6055:15	6055:15	8	offset = dirent -> tdir_offset . toff_long
ASSIGN	6055:15	6055:24	9	offset = dirent -> tdir_offset . toff_long
LVAL	6055:15	6055:15	10	offset
NAME	6055:15	6055:15	11	offset
LEAF_NODE	6055:15	6055:15	12	offset
ASSIGN_OP	6055:22	6055:22	10	=
LEAF_NODE	6055:22	6055:22	11	=
RVAL	6055:24	6055:24	10	dirent -> tdir_offset . toff_long
FIELD	6055:24	6055:44	11	dirent -> tdir_offset . toff_long
LEAF_NODE	6055:24	6055:24	12	dirent
LEAF_NODE	6055:30	6055:30	12	->
LEAF_NODE	6055:32	6055:32	12	tdir_offset
LEAF_NODE	6055:43	6055:43	12	.
LEAF_NODE	6055:44	6055:44	12	toff_long
LEAF_NODE	6055:53	6055:53	7	;
SELECTION	6056:8	6057:12	6	
KEYWORD	6056:8	6056:8	7	if
LEAF_NODE	6056:8	6056:8	8	if
LEAF_NODE	6056:10	6056:10	7	(
CONDITION	6056:12	6056:12	7	bSwab
EXPR	6056:12	6056:12	8	bSwab
FIELD	6056:12	6056:12	9	bSwab
LEAF_NODE	6056:12	6056:12	10	bSwab
LEAF_NODE	6056:18	6056:18	7	)
STATEMENTS	6057:12	6057:12	7	
EXPR_STATEMENT	6057:12	6057:33	8	TIFFSwabLong ( & offset ) ;
EXPR	6057:12	6057:12	9	TIFFSwabLong ( & offset )
FUNCTION_CALL	6057:12	6057:32	10	TIFFSwabLong ( & offset )
CALLEE	6057:12	6057:12	11	TIFFSwabLong
LEAF_NODE	6057:12	6057:12	12	TIFFSwabLong
LEAF_NODE	6057:24	6057:24	11	(
ARGUMENT	6057:25	6057:25	11	& offset
UNARY_EXPR	6057:25	6057:26	12	& offset
UNARY_OPERATOR	6057:25	6057:25	13	&
LEAF_NODE	6057:25	6057:25	14	&
FIELD	6057:26	6057:26	13	offset
LEAF_NODE	6057:26	6057:26	14	offset
LEAF_NODE	6057:32	6057:32	11	)
LEAF_NODE	6057:33	6057:33	9	;
EXPR_STATEMENT	6058:8	6058:28	6	nBaseOffset = offset ;
EXPR	6058:8	6058:8	7	nBaseOffset = offset
ASSIGN	6058:8	6058:22	8	nBaseOffset = offset
LVAL	6058:8	6058:8	9	nBaseOffset
FIELD	6058:8	6058:8	10	nBaseOffset
LEAF_NODE	6058:8	6058:8	11	nBaseOffset
ASSIGN_OP	6058:20	6058:20	9	=
LEAF_NODE	6058:20	6058:20	10	=
RVAL	6058:22	6058:22	9	offset
FIELD	6058:22	6058:22	10	offset
LEAF_NODE	6058:22	6058:22	11	offset
LEAF_NODE	6058:28	6058:28	7	;
LEAF_NODE	6059:4	6059:4	5	}
SELECTION	6061:4	6062:4	3	
KEYWORD	6061:4	6061:4	4	if
LEAF_NODE	6061:4	6061:4	5	if
LEAF_NODE	6061:6	6061:6	4	(
CONDITION	6061:8	6061:8	4	nBaseOffset > ( uint64 ) TIFF_INT64_MAX
EXPR	6061:8	6061:30	5	nBaseOffset > ( uint64 ) TIFF_INT64_MAX
FIELD	6061:8	6061:8	6	nBaseOffset
LEAF_NODE	6061:8	6061:8	7	nBaseOffset
REL_OPERATOR	6061:20	6061:20	6	>
LEAF_NODE	6061:20	6061:20	7	>
LEAF_NODE	6061:22	6061:22	6	(
TYPE_NAME	6061:23	6061:23	6	uint64
LEAF_NODE	6061:23	6061:23	7	uint64
LEAF_NODE	6061:29	6061:29	6	)
FIELD	6061:30	6061:30	6	TIFF_INT64_MAX
LEAF_NODE	6061:30	6061:30	7	TIFF_INT64_MAX
LEAF_NODE	6061:45	6061:45	4	)
STATEMENTS	6062:4	6067:4	4	
LEAF_NODE	6062:4	6062:4	5	{
STATEMENTS	6063:8	6066:8	5	
EXPR_STATEMENT	6063:8	6064:65	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile %d" , strile ) ;
EXPR	6063:8	6063:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile %d" , strile )
FUNCTION_CALL	6063:8	6064:64	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile %d" , strile )
CALLEE	6063:8	6063:8	9	TIFFErrorExt
LEAF_NODE	6063:8	6063:8	10	TIFFErrorExt
LEAF_NODE	6063:20	6063:20	9	(
ARGUMENT	6063:21	6063:21	9	tif -> tif_clientdata
FIELD	6063:21	6063:26	10	tif -> tif_clientdata
LEAF_NODE	6063:21	6063:21	11	tif
LEAF_NODE	6063:24	6063:24	11	->
LEAF_NODE	6063:26	6063:26	11	tif_clientdata
LEAF_NODE	6063:40	6063:40	9	,
ARGUMENT	6063:42	6063:42	9	module
FIELD	6063:42	6063:42	10	module
LEAF_NODE	6063:42	6063:42	11	module
LEAF_NODE	6063:48	6063:48	9	,
ARGUMENT	6064:17	6064:17	9	"Cannot read offset/size for strile %d"
FIELD	6064:17	6064:17	10	"Cannot read offset/size for strile %d"
LEAF_NODE	6064:17	6064:17	11	"Cannot read offset/size for strile %d"
LEAF_NODE	6064:56	6064:56	9	,
ARGUMENT	6064:58	6064:58	9	strile
FIELD	6064:58	6064:58	10	strile
LEAF_NODE	6064:58	6064:58	11	strile
LEAF_NODE	6064:64	6064:64	9	)
LEAF_NODE	6064:65	6064:65	7	;
EXPR_STATEMENT	6065:8	6065:27	6	panVals [ strile ] = 0 ;
EXPR	6065:8	6065:8	7	panVals [ strile ] = 0
ASSIGN	6065:8	6065:26	8	panVals [ strile ] = 0
LVAL	6065:8	6065:8	9	panVals [ strile ]
FIELD	6065:8	6065:22	10	panVals [ strile ]
LEAF_NODE	6065:8	6065:8	11	panVals
LEAF_NODE	6065:15	6065:15	11	[
EXPR	6065:16	6065:16	11	strile
FIELD	6065:16	6065:16	12	strile
LEAF_NODE	6065:16	6065:16	13	strile
LEAF_NODE	6065:22	6065:22	11	]
ASSIGN_OP	6065:24	6065:24	9	=
LEAF_NODE	6065:24	6065:24	10	=
RVAL	6065:26	6065:26	9	0
FIELD	6065:26	6065:26	10	0
LEAF_NODE	6065:26	6065:26	11	0
LEAF_NODE	6065:27	6065:27	7	;
JUMP_STATEMENT	6066:8	6066:16	6	return 0 ;
KEYWORD	6066:8	6066:8	7	return
LEAF_NODE	6066:8	6066:8	8	return
DESTINATION	6066:15	6066:15	7	0
EXPR	6066:15	6066:15	8	0
FIELD	6066:15	6066:15	9	0
LEAF_NODE	6066:15	6066:15	10	0
LEAF_NODE	6066:16	6066:16	7	;
LEAF_NODE	6067:4	6067:4	5	}
EXPR_STATEMENT	6068:4	6068:46	3	nOffset = nBaseOffset + sizeofval * strile ;
EXPR	6068:4	6068:4	4	nOffset = nBaseOffset + sizeofval * strile
ASSIGN	6068:4	6068:14	5	nOffset = nBaseOffset + sizeofval * strile
LVAL	6068:4	6068:4	6	nOffset
FIELD	6068:4	6068:4	7	nOffset
LEAF_NODE	6068:4	6068:4	8	nOffset
ASSIGN_OP	6068:12	6068:12	6	=
LEAF_NODE	6068:12	6068:12	7	=
RVAL	6068:14	6068:40	6	nBaseOffset + sizeofval * strile
FIELD	6068:14	6068:14	7	nBaseOffset
LEAF_NODE	6068:14	6068:14	8	nBaseOffset
LEAF_NODE	6068:26	6068:26	7	+
FIELD	6068:28	6068:28	7	sizeofval
LEAF_NODE	6068:28	6068:28	8	sizeofval
LEAF_NODE	6068:38	6068:38	7	*
FIELD	6068:40	6068:40	7	strile
LEAF_NODE	6068:40	6068:40	8	strile
LEAF_NODE	6068:46	6068:46	4	;
EXPR_STATEMENT	6069:4	6070:59	3	nOffsetStartPage = ( nOffset / IO_CACHE_PAGE_SIZE ) * IO_CACHE_PAGE_SIZE ;
EXPR	6069:4	6069:4	4	nOffsetStartPage = ( nOffset / IO_CACHE_PAGE_SIZE ) * IO_CACHE_PAGE_SIZE
ASSIGN	6069:4	6070:8	5	nOffsetStartPage = ( nOffset / IO_CACHE_PAGE_SIZE ) * IO_CACHE_PAGE_SIZE
LVAL	6069:4	6069:4	6	nOffsetStartPage
FIELD	6069:4	6069:4	7	nOffsetStartPage
LEAF_NODE	6069:4	6069:4	8	nOffsetStartPage
ASSIGN_OP	6069:21	6069:21	6	=
LEAF_NODE	6069:21	6069:21	7	=
RVAL	6070:8	6070:41	6	( nOffset / IO_CACHE_PAGE_SIZE ) * IO_CACHE_PAGE_SIZE
LEAF_NODE	6070:8	6070:8	7	(
FIELD	6070:9	6070:9	7	nOffset
LEAF_NODE	6070:9	6070:9	8	nOffset
LEAF_NODE	6070:17	6070:17	7	/
FIELD	6070:19	6070:19	7	IO_CACHE_PAGE_SIZE
LEAF_NODE	6070:19	6070:19	8	IO_CACHE_PAGE_SIZE
LEAF_NODE	6070:37	6070:37	7	)
LEAF_NODE	6070:39	6070:39	7	*
FIELD	6070:41	6070:41	7	IO_CACHE_PAGE_SIZE
LEAF_NODE	6070:41	6070:41	8	IO_CACHE_PAGE_SIZE
LEAF_NODE	6070:59	6070:59	4	;
EXPR_STATEMENT	6071:4	6071:58	3	nOffsetEndPage = nOffsetStartPage + IO_CACHE_PAGE_SIZE ;
EXPR	6071:4	6071:4	4	nOffsetEndPage = nOffsetStartPage + IO_CACHE_PAGE_SIZE
ASSIGN	6071:4	6071:21	5	nOffsetEndPage = nOffsetStartPage + IO_CACHE_PAGE_SIZE
LVAL	6071:4	6071:4	6	nOffsetEndPage
FIELD	6071:4	6071:4	7	nOffsetEndPage
LEAF_NODE	6071:4	6071:4	8	nOffsetEndPage
ASSIGN_OP	6071:19	6071:19	6	=
LEAF_NODE	6071:19	6071:19	7	=
RVAL	6071:21	6071:40	6	nOffsetStartPage + IO_CACHE_PAGE_SIZE
FIELD	6071:21	6071:21	7	nOffsetStartPage
LEAF_NODE	6071:21	6071:21	8	nOffsetStartPage
LEAF_NODE	6071:38	6071:38	7	+
FIELD	6071:40	6071:40	7	IO_CACHE_PAGE_SIZE
LEAF_NODE	6071:40	6071:40	8	IO_CACHE_PAGE_SIZE
LEAF_NODE	6071:58	6071:58	4	;
SELECTION	6073:4	6074:8	3	
KEYWORD	6073:4	6073:4	4	if
LEAF_NODE	6073:4	6073:4	5	if
LEAF_NODE	6073:6	6073:6	4	(
CONDITION	6073:8	6073:8	4	nOffset + sizeofval > nOffsetEndPage
EXPR	6073:8	6073:30	5	nOffset + sizeofval > nOffsetEndPage
FIELD	6073:8	6073:8	6	nOffset
LEAF_NODE	6073:8	6073:8	7	nOffset
LEAF_NODE	6073:16	6073:16	6	+
FIELD	6073:18	6073:18	6	sizeofval
LEAF_NODE	6073:18	6073:18	7	sizeofval
REL_OPERATOR	6073:28	6073:28	6	>
LEAF_NODE	6073:28	6073:28	7	>
FIELD	6073:30	6073:30	6	nOffsetEndPage
LEAF_NODE	6073:30	6073:30	7	nOffsetEndPage
LEAF_NODE	6073:45	6073:45	4	)
STATEMENTS	6074:8	6074:8	4	
EXPR_STATEMENT	6074:8	6074:44	5	nOffsetEndPage += IO_CACHE_PAGE_SIZE ;
EXPR	6074:8	6074:8	6	nOffsetEndPage += IO_CACHE_PAGE_SIZE
ASSIGN	6074:8	6074:26	7	nOffsetEndPage += IO_CACHE_PAGE_SIZE
LVAL	6074:8	6074:8	8	nOffsetEndPage
FIELD	6074:8	6074:8	9	nOffsetEndPage
LEAF_NODE	6074:8	6074:8	10	nOffsetEndPage
ASSIGN_OP	6074:23	6074:23	8	+=
LEAF_NODE	6074:23	6074:23	9	+=
RVAL	6074:26	6074:26	8	IO_CACHE_PAGE_SIZE
FIELD	6074:26	6074:26	9	IO_CACHE_PAGE_SIZE
LEAF_NODE	6074:26	6074:26	10	IO_CACHE_PAGE_SIZE
LEAF_NODE	6074:44	6074:44	6	;
EXPR_STATEMENT	6077:4	6077:58	3	nLastStripOffset = nBaseOffset + arraySize * sizeofval ;
EXPR	6077:4	6077:4	4	nLastStripOffset = nBaseOffset + arraySize * sizeofval
ASSIGN	6077:4	6077:23	5	nLastStripOffset = nBaseOffset + arraySize * sizeofval
LVAL	6077:4	6077:4	6	nLastStripOffset
FIELD	6077:4	6077:4	7	nLastStripOffset
LEAF_NODE	6077:4	6077:4	8	nLastStripOffset
ASSIGN_OP	6077:21	6077:21	6	=
LEAF_NODE	6077:21	6077:21	7	=
RVAL	6077:23	6077:49	6	nBaseOffset + arraySize * sizeofval
FIELD	6077:23	6077:23	7	nBaseOffset
LEAF_NODE	6077:23	6077:23	8	nBaseOffset
LEAF_NODE	6077:35	6077:35	7	+
FIELD	6077:37	6077:37	7	arraySize
LEAF_NODE	6077:37	6077:37	8	arraySize
LEAF_NODE	6077:47	6077:47	7	*
FIELD	6077:49	6077:49	7	sizeofval
LEAF_NODE	6077:49	6077:49	8	sizeofval
LEAF_NODE	6077:58	6077:58	4	;
SELECTION	6078:4	6079:8	3	
KEYWORD	6078:4	6078:4	4	if
LEAF_NODE	6078:4	6078:4	5	if
LEAF_NODE	6078:6	6078:6	4	(
CONDITION	6078:8	6078:8	4	nLastStripOffset < nOffsetEndPage
EXPR	6078:8	6078:27	5	nLastStripOffset < nOffsetEndPage
FIELD	6078:8	6078:8	6	nLastStripOffset
LEAF_NODE	6078:8	6078:8	7	nLastStripOffset
REL_OPERATOR	6078:25	6078:25	6	<
LEAF_NODE	6078:25	6078:25	7	<
FIELD	6078:27	6078:27	6	nOffsetEndPage
LEAF_NODE	6078:27	6078:27	7	nOffsetEndPage
LEAF_NODE	6078:42	6078:42	4	)
STATEMENTS	6079:8	6079:8	4	
EXPR_STATEMENT	6079:8	6079:41	5	nOffsetEndPage = nLastStripOffset ;
EXPR	6079:8	6079:8	6	nOffsetEndPage = nLastStripOffset
ASSIGN	6079:8	6079:25	7	nOffsetEndPage = nLastStripOffset
LVAL	6079:8	6079:8	8	nOffsetEndPage
FIELD	6079:8	6079:8	9	nOffsetEndPage
LEAF_NODE	6079:8	6079:8	10	nOffsetEndPage
ASSIGN_OP	6079:23	6079:23	8	=
LEAF_NODE	6079:23	6079:23	9	=
RVAL	6079:25	6079:25	8	nLastStripOffset
FIELD	6079:25	6079:25	9	nLastStripOffset
LEAF_NODE	6079:25	6079:25	10	nLastStripOffset
LEAF_NODE	6079:41	6079:41	6	;
SELECTION	6080:4	6081:4	3	
KEYWORD	6080:4	6080:4	4	if
LEAF_NODE	6080:4	6080:4	5	if
LEAF_NODE	6080:6	6080:6	4	(
CONDITION	6080:8	6080:8	4	nOffsetStartPage >= nOffsetEndPage
EXPR	6080:8	6080:28	5	nOffsetStartPage >= nOffsetEndPage
FIELD	6080:8	6080:8	6	nOffsetStartPage
LEAF_NODE	6080:8	6080:8	7	nOffsetStartPage
REL_OPERATOR	6080:25	6080:25	6	>=
LEAF_NODE	6080:25	6080:25	7	>=
FIELD	6080:28	6080:28	6	nOffsetEndPage
LEAF_NODE	6080:28	6080:28	7	nOffsetEndPage
LEAF_NODE	6080:43	6080:43	4	)
STATEMENTS	6081:4	6086:4	4	
LEAF_NODE	6081:4	6081:4	5	{
STATEMENTS	6082:8	6085:8	5	
EXPR_STATEMENT	6082:8	6083:65	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile %d" , strile ) ;
EXPR	6082:8	6082:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile %d" , strile )
FUNCTION_CALL	6082:8	6083:64	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile %d" , strile )
CALLEE	6082:8	6082:8	9	TIFFErrorExt
LEAF_NODE	6082:8	6082:8	10	TIFFErrorExt
LEAF_NODE	6082:20	6082:20	9	(
ARGUMENT	6082:21	6082:21	9	tif -> tif_clientdata
FIELD	6082:21	6082:26	10	tif -> tif_clientdata
LEAF_NODE	6082:21	6082:21	11	tif
LEAF_NODE	6082:24	6082:24	11	->
LEAF_NODE	6082:26	6082:26	11	tif_clientdata
LEAF_NODE	6082:40	6082:40	9	,
ARGUMENT	6082:42	6082:42	9	module
FIELD	6082:42	6082:42	10	module
LEAF_NODE	6082:42	6082:42	11	module
LEAF_NODE	6082:48	6082:48	9	,
ARGUMENT	6083:17	6083:17	9	"Cannot read offset/size for strile %d"
FIELD	6083:17	6083:17	10	"Cannot read offset/size for strile %d"
LEAF_NODE	6083:17	6083:17	11	"Cannot read offset/size for strile %d"
LEAF_NODE	6083:56	6083:56	9	,
ARGUMENT	6083:58	6083:58	9	strile
FIELD	6083:58	6083:58	10	strile
LEAF_NODE	6083:58	6083:58	11	strile
LEAF_NODE	6083:64	6083:64	9	)
LEAF_NODE	6083:65	6083:65	7	;
EXPR_STATEMENT	6084:8	6084:27	6	panVals [ strile ] = 0 ;
EXPR	6084:8	6084:8	7	panVals [ strile ] = 0
ASSIGN	6084:8	6084:26	8	panVals [ strile ] = 0
LVAL	6084:8	6084:8	9	panVals [ strile ]
FIELD	6084:8	6084:22	10	panVals [ strile ]
LEAF_NODE	6084:8	6084:8	11	panVals
LEAF_NODE	6084:15	6084:15	11	[
EXPR	6084:16	6084:16	11	strile
FIELD	6084:16	6084:16	12	strile
LEAF_NODE	6084:16	6084:16	13	strile
LEAF_NODE	6084:22	6084:22	11	]
ASSIGN_OP	6084:24	6084:24	9	=
LEAF_NODE	6084:24	6084:24	10	=
RVAL	6084:26	6084:26	9	0
FIELD	6084:26	6084:26	10	0
LEAF_NODE	6084:26	6084:26	11	0
LEAF_NODE	6084:27	6084:27	7	;
JUMP_STATEMENT	6085:8	6085:16	6	return 0 ;
KEYWORD	6085:8	6085:8	7	return
LEAF_NODE	6085:8	6085:8	8	return
DESTINATION	6085:15	6085:15	7	0
EXPR	6085:15	6085:15	8	0
FIELD	6085:15	6085:15	9	0
LEAF_NODE	6085:15	6085:15	10	0
LEAF_NODE	6085:16	6085:16	7	;
LEAF_NODE	6086:4	6086:4	5	}
SELECTION	6087:4	6088:4	3	
KEYWORD	6087:4	6087:4	4	if
LEAF_NODE	6087:4	6087:4	5	if
LEAF_NODE	6087:7	6087:7	4	(
CONDITION	6087:8	6087:8	4	! SeekOK ( tif , nOffsetStartPage )
EXPR	6087:8	6087:8	5	! SeekOK ( tif , nOffsetStartPage )
UNARY_EXPR	6087:8	6087:9	6	! SeekOK ( tif , nOffsetStartPage )
UNARY_OPERATOR	6087:8	6087:8	7	!
LEAF_NODE	6087:8	6087:8	8	!
FUNCTION_CALL	6087:9	6087:36	7	SeekOK ( tif , nOffsetStartPage )
CALLEE	6087:9	6087:9	8	SeekOK
LEAF_NODE	6087:9	6087:9	9	SeekOK
LEAF_NODE	6087:15	6087:15	8	(
ARGUMENT	6087:16	6087:16	8	tif
FIELD	6087:16	6087:16	9	tif
LEAF_NODE	6087:16	6087:16	10	tif
LEAF_NODE	6087:19	6087:19	8	,
ARGUMENT	6087:20	6087:20	8	nOffsetStartPage
FIELD	6087:20	6087:20	9	nOffsetStartPage
LEAF_NODE	6087:20	6087:20	10	nOffsetStartPage
LEAF_NODE	6087:36	6087:36	8	)
LEAF_NODE	6087:37	6087:37	4	)
STATEMENTS	6088:4	6091:4	4	
LEAF_NODE	6088:4	6088:4	5	{
STATEMENTS	6089:8	6090:8	5	
EXPR_STATEMENT	6089:8	6089:27	6	panVals [ strile ] = 0 ;
EXPR	6089:8	6089:8	7	panVals [ strile ] = 0
ASSIGN	6089:8	6089:26	8	panVals [ strile ] = 0
LVAL	6089:8	6089:8	9	panVals [ strile ]
FIELD	6089:8	6089:22	10	panVals [ strile ]
LEAF_NODE	6089:8	6089:8	11	panVals
LEAF_NODE	6089:15	6089:15	11	[
EXPR	6089:16	6089:16	11	strile
FIELD	6089:16	6089:16	12	strile
LEAF_NODE	6089:16	6089:16	13	strile
LEAF_NODE	6089:22	6089:22	11	]
ASSIGN_OP	6089:24	6089:24	9	=
LEAF_NODE	6089:24	6089:24	10	=
RVAL	6089:26	6089:26	9	0
FIELD	6089:26	6089:26	10	0
LEAF_NODE	6089:26	6089:26	11	0
LEAF_NODE	6089:27	6089:27	7	;
JUMP_STATEMENT	6090:8	6090:16	6	return 0 ;
KEYWORD	6090:8	6090:8	7	return
LEAF_NODE	6090:8	6090:8	8	return
DESTINATION	6090:15	6090:15	7	0
EXPR	6090:15	6090:15	8	0
FIELD	6090:15	6090:15	9	0
LEAF_NODE	6090:15	6090:15	10	0
LEAF_NODE	6090:16	6090:16	7	;
LEAF_NODE	6091:4	6091:4	5	}
EXPR_STATEMENT	6093:4	6093:59	3	nToRead = ( tmsize_t ) ( nOffsetEndPage - nOffsetStartPage ) ;
EXPR	6093:4	6093:4	4	nToRead = ( tmsize_t ) ( nOffsetEndPage - nOffsetStartPage )
ASSIGN	6093:4	6093:14	5	nToRead = ( tmsize_t ) ( nOffsetEndPage - nOffsetStartPage )
LVAL	6093:4	6093:4	6	nToRead
FIELD	6093:4	6093:4	7	nToRead
LEAF_NODE	6093:4	6093:4	8	nToRead
ASSIGN_OP	6093:12	6093:12	6	=
LEAF_NODE	6093:12	6093:12	7	=
RVAL	6093:14	6093:58	6	( tmsize_t ) ( nOffsetEndPage - nOffsetStartPage )
LEAF_NODE	6093:14	6093:14	7	(
TYPE_NAME	6093:15	6093:15	7	tmsize_t
LEAF_NODE	6093:15	6093:15	8	tmsize_t
LEAF_NODE	6093:23	6093:23	7	)
LEAF_NODE	6093:24	6093:24	7	(
FIELD	6093:25	6093:25	7	nOffsetEndPage
LEAF_NODE	6093:25	6093:25	8	nOffsetEndPage
LEAF_NODE	6093:40	6093:40	7	-
FIELD	6093:42	6093:42	7	nOffsetStartPage
LEAF_NODE	6093:42	6093:42	8	nOffsetStartPage
LEAF_NODE	6093:58	6093:58	7	)
LEAF_NODE	6093:59	6093:59	4	;
EXPR_STATEMENT	6094:4	6094:46	3	nRead = TIFFReadFile ( tif , buffer , nToRead ) ;
EXPR	6094:4	6094:4	4	nRead = TIFFReadFile ( tif , buffer , nToRead )
ASSIGN	6094:4	6094:12	5	nRead = TIFFReadFile ( tif , buffer , nToRead )
LVAL	6094:4	6094:4	6	nRead
FIELD	6094:4	6094:4	7	nRead
LEAF_NODE	6094:4	6094:4	8	nRead
ASSIGN_OP	6094:10	6094:10	6	=
LEAF_NODE	6094:10	6094:10	7	=
RVAL	6094:12	6094:12	6	TIFFReadFile ( tif , buffer , nToRead )
FUNCTION_CALL	6094:12	6094:45	7	TIFFReadFile ( tif , buffer , nToRead )
CALLEE	6094:12	6094:12	8	TIFFReadFile
LEAF_NODE	6094:12	6094:12	9	TIFFReadFile
LEAF_NODE	6094:24	6094:24	8	(
ARGUMENT	6094:25	6094:25	8	tif
FIELD	6094:25	6094:25	9	tif
LEAF_NODE	6094:25	6094:25	10	tif
LEAF_NODE	6094:28	6094:28	8	,
ARGUMENT	6094:30	6094:30	8	buffer
FIELD	6094:30	6094:30	9	buffer
LEAF_NODE	6094:30	6094:30	10	buffer
LEAF_NODE	6094:36	6094:36	8	,
ARGUMENT	6094:38	6094:38	8	nToRead
FIELD	6094:38	6094:38	9	nToRead
LEAF_NODE	6094:38	6094:38	10	nToRead
LEAF_NODE	6094:45	6094:45	8	)
LEAF_NODE	6094:46	6094:46	4	;
SELECTION	6095:4	6096:4	3	
KEYWORD	6095:4	6095:4	4	if
LEAF_NODE	6095:4	6095:4	5	if
LEAF_NODE	6095:6	6095:6	4	(
CONDITION	6095:8	6095:8	4	nRead < nToRead
EXPR	6095:8	6095:16	5	nRead < nToRead
FIELD	6095:8	6095:8	6	nRead
LEAF_NODE	6095:8	6095:8	7	nRead
REL_OPERATOR	6095:14	6095:14	6	<
LEAF_NODE	6095:14	6095:14	7	<
FIELD	6095:16	6095:16	6	nToRead
LEAF_NODE	6095:16	6095:16	7	nToRead
LEAF_NODE	6095:24	6095:24	4	)
STATEMENTS	6096:4	6100:4	4	
LEAF_NODE	6096:4	6096:4	5	{
STATEMENTS	6097:8	6099:8	5	
EXPR_STATEMENT	6097:8	6098:73	6	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile around ~%d" , strile ) ;
EXPR	6097:8	6097:8	7	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile around ~%d" , strile )
FUNCTION_CALL	6097:8	6098:72	8	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot read offset/size for strile around ~%d" , strile )
CALLEE	6097:8	6097:8	9	TIFFErrorExt
LEAF_NODE	6097:8	6097:8	10	TIFFErrorExt
LEAF_NODE	6097:20	6097:20	9	(
ARGUMENT	6097:21	6097:21	9	tif -> tif_clientdata
FIELD	6097:21	6097:26	10	tif -> tif_clientdata
LEAF_NODE	6097:21	6097:21	11	tif
LEAF_NODE	6097:24	6097:24	11	->
LEAF_NODE	6097:26	6097:26	11	tif_clientdata
LEAF_NODE	6097:40	6097:40	9	,
ARGUMENT	6097:42	6097:42	9	module
FIELD	6097:42	6097:42	10	module
LEAF_NODE	6097:42	6097:42	11	module
LEAF_NODE	6097:48	6097:48	9	,
ARGUMENT	6098:17	6098:17	9	"Cannot read offset/size for strile around ~%d"
FIELD	6098:17	6098:17	10	"Cannot read offset/size for strile around ~%d"
LEAF_NODE	6098:17	6098:17	11	"Cannot read offset/size for strile around ~%d"
LEAF_NODE	6098:64	6098:64	9	,
ARGUMENT	6098:66	6098:66	9	strile
FIELD	6098:66	6098:66	10	strile
LEAF_NODE	6098:66	6098:66	11	strile
LEAF_NODE	6098:72	6098:72	9	)
LEAF_NODE	6098:73	6098:73	7	;
JUMP_STATEMENT	6099:8	6099:16	6	return 0 ;
KEYWORD	6099:8	6099:8	7	return
LEAF_NODE	6099:8	6099:8	8	return
DESTINATION	6099:15	6099:15	7	0
EXPR	6099:15	6099:15	8	0
FIELD	6099:15	6099:15	9	0
LEAF_NODE	6099:15	6099:15	10	0
LEAF_NODE	6099:16	6099:16	7	;
LEAF_NODE	6100:4	6100:4	5	}
EXPR_STATEMENT	6101:4	6101:67	3	iStartBefore = - ( int ) ( ( nOffset - nOffsetStartPage ) / sizeofval ) ;
EXPR	6101:4	6101:4	4	iStartBefore = - ( int ) ( ( nOffset - nOffsetStartPage ) / sizeofval )
ASSIGN	6101:4	6101:19	5	iStartBefore = - ( int ) ( ( nOffset - nOffsetStartPage ) / sizeofval )
LVAL	6101:4	6101:4	6	iStartBefore
FIELD	6101:4	6101:4	7	iStartBefore
LEAF_NODE	6101:4	6101:4	8	iStartBefore
ASSIGN_OP	6101:17	6101:17	6	=
LEAF_NODE	6101:17	6101:17	7	=
RVAL	6101:19	6101:19	6	- ( int ) ( ( nOffset - nOffsetStartPage ) / sizeofval )
UNARY_EXPR	6101:19	6101:20	7	- ( int ) ( ( nOffset - nOffsetStartPage ) / sizeofval )
UNARY_OPERATOR	6101:19	6101:19	8	-
LEAF_NODE	6101:19	6101:19	9	-
FUNCTION_CALL	6101:20	6101:66	8	( int ) ( ( nOffset - nOffsetStartPage ) / sizeofval )
CALLEE	6101:20	6101:24	9	( int )
LEAF_NODE	6101:20	6101:20	10	(
FIELD	6101:21	6101:21	10	int
LEAF_NODE	6101:21	6101:21	11	int
LEAF_NODE	6101:24	6101:24	10	)
LEAF_NODE	6101:25	6101:25	9	(
ARGUMENT	6101:26	6101:57	9	( nOffset - nOffsetStartPage ) / sizeofval
LEAF_NODE	6101:26	6101:26	10	(
FIELD	6101:27	6101:27	10	nOffset
LEAF_NODE	6101:27	6101:27	11	nOffset
LEAF_NODE	6101:35	6101:35	10	-
FIELD	6101:37	6101:37	10	nOffsetStartPage
LEAF_NODE	6101:37	6101:37	11	nOffsetStartPage
LEAF_NODE	6101:53	6101:53	10	)
LEAF_NODE	6101:55	6101:55	10	/
FIELD	6101:57	6101:57	10	sizeofval
LEAF_NODE	6101:57	6101:57	11	sizeofval
LEAF_NODE	6101:66	6101:66	9	)
LEAF_NODE	6101:67	6101:67	4	;
SELECTION	6102:4	6103:8	3	
KEYWORD	6102:4	6102:4	4	if
LEAF_NODE	6102:4	6102:4	5	if
LEAF_NODE	6102:6	6102:6	4	(
CONDITION	6102:8	6102:8	4	strile + iStartBefore < 0
EXPR	6102:8	6102:32	5	strile + iStartBefore < 0
FIELD	6102:8	6102:8	6	strile
LEAF_NODE	6102:8	6102:8	7	strile
LEAF_NODE	6102:15	6102:15	6	+
FIELD	6102:17	6102:17	6	iStartBefore
LEAF_NODE	6102:17	6102:17	7	iStartBefore
REL_OPERATOR	6102:30	6102:30	6	<
LEAF_NODE	6102:30	6102:30	7	<
FIELD	6102:32	6102:32	6	0
LEAF_NODE	6102:32	6102:32	7	0
LEAF_NODE	6102:34	6102:34	4	)
STATEMENTS	6103:8	6103:8	4	
EXPR_STATEMENT	6103:8	6103:30	5	iStartBefore = - strile ;
EXPR	6103:8	6103:8	6	iStartBefore = - strile
ASSIGN	6103:8	6103:23	7	iStartBefore = - strile
LVAL	6103:8	6103:8	8	iStartBefore
FIELD	6103:8	6103:8	9	iStartBefore
LEAF_NODE	6103:8	6103:8	10	iStartBefore
ASSIGN_OP	6103:21	6103:21	8	=
LEAF_NODE	6103:21	6103:21	9	=
RVAL	6103:23	6103:23	8	- strile
UNARY_EXPR	6103:23	6103:24	9	- strile
UNARY_OPERATOR	6103:23	6103:23	10	-
LEAF_NODE	6103:23	6103:23	11	-
FIELD	6103:24	6103:24	10	strile
LEAF_NODE	6103:24	6103:24	11	strile
LEAF_NODE	6103:30	6103:30	6	;
ITERATION	6104:4	6108:4	3	
KEYWORD	6104:4	6104:4	4	for
LEAF_NODE	6104:4	6104:4	5	for
LEAF_NODE	6104:7	6104:7	4	(
FOR_INIT	6104:9	6104:25	4	i = iStartBefore ;
EXPR	6104:9	6104:9	5	i = iStartBefore
ASSIGN	6104:9	6104:13	6	i = iStartBefore
LVAL	6104:9	6104:9	7	i
FIELD	6104:9	6104:9	8	i
LEAF_NODE	6104:9	6104:9	9	i
ASSIGN_OP	6104:11	6104:11	7	=
LEAF_NODE	6104:11	6104:11	8	=
RVAL	6104:13	6104:13	7	iStartBefore
FIELD	6104:13	6104:13	8	iStartBefore
LEAF_NODE	6104:13	6104:13	9	iStartBefore
LEAF_NODE	6104:25	6104:25	5	;
CONDITION	6105:9	6105:9	4	( uint32 ) ( strile + i ) < arraySize && _TIFFUnsanitizedAddUInt64AndInt ( nOffset , ( i + 1 ) * sizeofvalint ) <= nOffsetEndPage
EXPR	6105:9	6105:9	5	( uint32 ) ( strile + i ) < arraySize && _TIFFUnsanitizedAddUInt64AndInt ( nOffset , ( i + 1 ) * sizeofvalint ) <= nOffsetEndPage
AND	6105:9	6106:9	6	( uint32 ) ( strile + i ) < arraySize && _TIFFUnsanitizedAddUInt64AndInt ( nOffset , ( i + 1 ) * sizeofvalint ) <= nOffsetEndPage
EXPR	6105:9	6105:32	7	( uint32 ) ( strile + i ) < arraySize
LEAF_NODE	6105:9	6105:9	8	(
TYPE_NAME	6105:10	6105:10	8	uint32
LEAF_NODE	6105:10	6105:10	9	uint32
LEAF_NODE	6105:16	6105:16	8	)
LEAF_NODE	6105:17	6105:17	8	(
FIELD	6105:18	6105:18	8	strile
LEAF_NODE	6105:18	6105:18	9	strile
LEAF_NODE	6105:25	6105:25	8	+
FIELD	6105:27	6105:27	8	i
LEAF_NODE	6105:27	6105:27	9	i
LEAF_NODE	6105:28	6105:28	8	)
REL_OPERATOR	6105:30	6105:30	8	<
LEAF_NODE	6105:30	6105:30	9	<
FIELD	6105:32	6105:32	8	arraySize
LEAF_NODE	6105:32	6105:32	9	arraySize
LEAF_NODE	6105:42	6105:42	7	&&
EXPR	6106:9	6106:77	7	_TIFFUnsanitizedAddUInt64AndInt ( nOffset , ( i + 1 ) * sizeofvalint ) <= nOffsetEndPage
FUNCTION_CALL	6106:9	6106:72	8	_TIFFUnsanitizedAddUInt64AndInt ( nOffset , ( i + 1 ) * sizeofvalint )
CALLEE	6106:9	6106:9	9	_TIFFUnsanitizedAddUInt64AndInt
LEAF_NODE	6106:9	6106:9	10	_TIFFUnsanitizedAddUInt64AndInt
LEAF_NODE	6106:40	6106:40	9	(
ARGUMENT	6106:41	6106:41	9	nOffset
FIELD	6106:41	6106:41	10	nOffset
LEAF_NODE	6106:41	6106:41	11	nOffset
LEAF_NODE	6106:48	6106:48	9	,
ARGUMENT	6106:50	6106:60	9	( i + 1 ) * sizeofvalint
LEAF_NODE	6106:50	6106:50	10	(
FIELD	6106:51	6106:51	10	i
LEAF_NODE	6106:51	6106:51	11	i
LEAF_NODE	6106:53	6106:53	10	+
FIELD	6106:55	6106:55	10	1
LEAF_NODE	6106:55	6106:55	11	1
LEAF_NODE	6106:56	6106:56	10	)
LEAF_NODE	6106:58	6106:58	10	*
FIELD	6106:60	6106:60	10	sizeofvalint
LEAF_NODE	6106:60	6106:60	11	sizeofvalint
LEAF_NODE	6106:72	6106:72	9	)
REL_OPERATOR	6106:74	6106:74	8	<=
LEAF_NODE	6106:74	6106:74	9	<=
FIELD	6106:77	6106:77	8	nOffsetEndPage
LEAF_NODE	6106:77	6106:77	9	nOffsetEndPage
LEAF_NODE	6106:91	6106:91	4	;
FOR_EXPR	6107:9	6107:9	4	++ i
EXPR	6107:9	6107:11	5	++ i
LEAF_NODE	6107:9	6107:9	6	++
FIELD	6107:11	6107:11	6	i
LEAF_NODE	6107:11	6107:11	7	i
LEAF_NODE	6107:13	6107:13	4	)
STATEMENTS	6108:4	6139:4	4	
LEAF_NODE	6108:4	6108:4	5	{
STATEMENTS	6109:8	6129:8	5	
SELECTION	6109:8	6110:8	6	
KEYWORD	6109:8	6109:8	7	if
LEAF_NODE	6109:8	6109:8	8	if
LEAF_NODE	6109:10	6109:10	7	(
CONDITION	6109:12	6109:12	7	sizeofval == sizeof ( uint16 )
EXPR	6109:12	6109:25	8	sizeofval == sizeof ( uint16 )
FIELD	6109:12	6109:12	9	sizeofval
LEAF_NODE	6109:12	6109:12	10	sizeofval
EQ_OPERATOR	6109:22	6109:22	9	==
LEAF_NODE	6109:22	6109:22	10	==
FUNCTION_CALL	6109:25	6109:38	9	sizeof ( uint16 )
CALLEE	6109:25	6109:25	10	sizeof
LEAF_NODE	6109:25	6109:25	11	sizeof
LEAF_NODE	6109:31	6109:31	10	(
ARGUMENT	6109:32	6109:32	10	uint16
FIELD	6109:32	6109:32	11	uint16
LEAF_NODE	6109:32	6109:32	12	uint16
LEAF_NODE	6109:38	6109:38	10	)
LEAF_NODE	6109:40	6109:40	7	)
STATEMENTS	6110:8	6118:8	7	
LEAF_NODE	6110:8	6110:8	8	{
STATEMENTS	6111:12	6117:12	8	
SIMPLE_DECL	6111:12	6111:22	9	uint16 val ;
VAR_DECL	6111:12	6111:19	10	uint16 val
TYPE	6111:12	6111:12	11	uint16
TYPE_NAME	6111:12	6111:12	12	uint16
LEAF_NODE	6111:12	6111:12	13	uint16
NAME	6111:19	6111:19	11	val
LEAF_NODE	6111:19	6111:19	12	val
LEAF_NODE	6111:22	6111:22	10	;
EXPR_STATEMENT	6112:12	6114:31	9	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) ) ;
EXPR	6112:12	6112:12	10	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) )
FUNCTION_CALL	6112:12	6114:30	11	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) )
CALLEE	6112:12	6112:12	12	memcpy
LEAF_NODE	6112:12	6112:12	13	memcpy
LEAF_NODE	6112:18	6112:18	12	(
ARGUMENT	6112:19	6112:19	12	& val
UNARY_EXPR	6112:19	6112:20	13	& val
UNARY_OPERATOR	6112:19	6112:19	14	&
LEAF_NODE	6112:19	6112:19	15	&
FIELD	6112:20	6112:20	14	val
LEAF_NODE	6112:20	6112:20	15	val
LEAF_NODE	6112:23	6112:23	12	,
ARGUMENT	6113:19	6113:63	12	buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint
FIELD	6113:19	6113:19	13	buffer
LEAF_NODE	6113:19	6113:19	14	buffer
LEAF_NODE	6113:26	6113:26	13	+
LEAF_NODE	6113:28	6113:28	13	(
FIELD	6113:29	6113:29	13	nOffset
LEAF_NODE	6113:29	6113:29	14	nOffset
LEAF_NODE	6113:37	6113:37	13	-
FIELD	6113:39	6113:39	13	nOffsetStartPage
LEAF_NODE	6113:39	6113:39	14	nOffsetStartPage
LEAF_NODE	6113:55	6113:55	13	)
LEAF_NODE	6113:57	6113:57	13	+
FIELD	6113:59	6113:59	13	i
LEAF_NODE	6113:59	6113:59	14	i
LEAF_NODE	6113:61	6113:61	13	*
FIELD	6113:63	6113:63	13	sizeofvalint
LEAF_NODE	6113:63	6113:63	14	sizeofvalint
LEAF_NODE	6113:75	6113:75	12	,
ARGUMENT	6114:19	6114:19	12	sizeof ( val )
FUNCTION_CALL	6114:19	6114:29	13	sizeof ( val )
CALLEE	6114:19	6114:19	14	sizeof
LEAF_NODE	6114:19	6114:19	15	sizeof
LEAF_NODE	6114:25	6114:25	14	(
ARGUMENT	6114:26	6114:26	14	val
FIELD	6114:26	6114:26	15	val
LEAF_NODE	6114:26	6114:26	16	val
LEAF_NODE	6114:29	6114:29	14	)
LEAF_NODE	6114:30	6114:30	12	)
LEAF_NODE	6114:31	6114:31	10	;
SELECTION	6115:12	6116:16	9	
KEYWORD	6115:12	6115:12	10	if
LEAF_NODE	6115:12	6115:12	11	if
LEAF_NODE	6115:14	6115:14	10	(
CONDITION	6115:16	6115:16	10	bSwab
EXPR	6115:16	6115:16	11	bSwab
FIELD	6115:16	6115:16	12	bSwab
LEAF_NODE	6115:16	6115:16	13	bSwab
LEAF_NODE	6115:22	6115:22	10	)
STATEMENTS	6116:16	6116:16	10	
EXPR_STATEMENT	6116:16	6116:35	11	TIFFSwabShort ( & val ) ;
EXPR	6116:16	6116:16	12	TIFFSwabShort ( & val )
FUNCTION_CALL	6116:16	6116:34	13	TIFFSwabShort ( & val )
CALLEE	6116:16	6116:16	14	TIFFSwabShort
LEAF_NODE	6116:16	6116:16	15	TIFFSwabShort
LEAF_NODE	6116:29	6116:29	14	(
ARGUMENT	6116:30	6116:30	14	& val
UNARY_EXPR	6116:30	6116:31	15	& val
UNARY_OPERATOR	6116:30	6116:30	16	&
LEAF_NODE	6116:30	6116:30	17	&
FIELD	6116:31	6116:31	16	val
LEAF_NODE	6116:31	6116:31	17	val
LEAF_NODE	6116:34	6116:34	14	)
LEAF_NODE	6116:35	6116:35	12	;
EXPR_STATEMENT	6117:12	6117:37	9	panVals [ strile + i ] = val ;
EXPR	6117:12	6117:12	10	panVals [ strile + i ] = val
ASSIGN	6117:12	6117:34	11	panVals [ strile + i ] = val
LVAL	6117:12	6117:12	12	panVals [ strile + i ]
FIELD	6117:12	6117:30	13	panVals [ strile + i ]
LEAF_NODE	6117:12	6117:12	14	panVals
LEAF_NODE	6117:19	6117:19	14	[
EXPR	6117:20	6117:29	14	strile + i
FIELD	6117:20	6117:20	15	strile
LEAF_NODE	6117:20	6117:20	16	strile
LEAF_NODE	6117:27	6117:27	15	+
FIELD	6117:29	6117:29	15	i
LEAF_NODE	6117:29	6117:29	16	i
LEAF_NODE	6117:30	6117:30	14	]
ASSIGN_OP	6117:32	6117:32	12	=
LEAF_NODE	6117:32	6117:32	13	=
RVAL	6117:34	6117:34	12	val
FIELD	6117:34	6117:34	13	val
LEAF_NODE	6117:34	6117:34	14	val
LEAF_NODE	6117:37	6117:37	10	;
LEAF_NODE	6118:8	6118:8	8	}
SELECTION	6119:8	6119:13	6	
KEYWORD	6119:8	6119:8	7	else
LEAF_NODE	6119:8	6119:8	8	else
STATEMENTS	6119:13	6119:13	7	
SELECTION	6119:13	6120:8	8	
KEYWORD	6119:13	6119:13	9	if
LEAF_NODE	6119:13	6119:13	10	if
LEAF_NODE	6119:15	6119:15	9	(
CONDITION	6119:17	6119:17	9	sizeofval == sizeof ( uint32 )
EXPR	6119:17	6119:30	10	sizeofval == sizeof ( uint32 )
FIELD	6119:17	6119:17	11	sizeofval
LEAF_NODE	6119:17	6119:17	12	sizeofval
EQ_OPERATOR	6119:27	6119:27	11	==
LEAF_NODE	6119:27	6119:27	12	==
FUNCTION_CALL	6119:30	6119:43	11	sizeof ( uint32 )
CALLEE	6119:30	6119:30	12	sizeof
LEAF_NODE	6119:30	6119:30	13	sizeof
LEAF_NODE	6119:36	6119:36	12	(
ARGUMENT	6119:37	6119:37	12	uint32
FIELD	6119:37	6119:37	13	uint32
LEAF_NODE	6119:37	6119:37	14	uint32
LEAF_NODE	6119:43	6119:43	12	)
LEAF_NODE	6119:45	6119:45	9	)
STATEMENTS	6120:8	6128:8	9	
LEAF_NODE	6120:8	6120:8	10	{
STATEMENTS	6121:12	6127:12	10	
SIMPLE_DECL	6121:12	6121:22	11	uint32 val ;
VAR_DECL	6121:12	6121:19	12	uint32 val
TYPE	6121:12	6121:12	13	uint32
TYPE_NAME	6121:12	6121:12	14	uint32
LEAF_NODE	6121:12	6121:12	15	uint32
NAME	6121:19	6121:19	13	val
LEAF_NODE	6121:19	6121:19	14	val
LEAF_NODE	6121:22	6121:22	12	;
EXPR_STATEMENT	6122:12	6124:31	11	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) ) ;
EXPR	6122:12	6122:12	12	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) )
FUNCTION_CALL	6122:12	6124:30	13	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) )
CALLEE	6122:12	6122:12	14	memcpy
LEAF_NODE	6122:12	6122:12	15	memcpy
LEAF_NODE	6122:18	6122:18	14	(
ARGUMENT	6122:19	6122:19	14	& val
UNARY_EXPR	6122:19	6122:20	15	& val
UNARY_OPERATOR	6122:19	6122:19	16	&
LEAF_NODE	6122:19	6122:19	17	&
FIELD	6122:20	6122:20	16	val
LEAF_NODE	6122:20	6122:20	17	val
LEAF_NODE	6122:23	6122:23	14	,
ARGUMENT	6123:19	6123:63	14	buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint
FIELD	6123:19	6123:19	15	buffer
LEAF_NODE	6123:19	6123:19	16	buffer
LEAF_NODE	6123:26	6123:26	15	+
LEAF_NODE	6123:28	6123:28	15	(
FIELD	6123:29	6123:29	15	nOffset
LEAF_NODE	6123:29	6123:29	16	nOffset
LEAF_NODE	6123:37	6123:37	15	-
FIELD	6123:39	6123:39	15	nOffsetStartPage
LEAF_NODE	6123:39	6123:39	16	nOffsetStartPage
LEAF_NODE	6123:55	6123:55	15	)
LEAF_NODE	6123:57	6123:57	15	+
FIELD	6123:59	6123:59	15	i
LEAF_NODE	6123:59	6123:59	16	i
LEAF_NODE	6123:61	6123:61	15	*
FIELD	6123:63	6123:63	15	sizeofvalint
LEAF_NODE	6123:63	6123:63	16	sizeofvalint
LEAF_NODE	6123:75	6123:75	14	,
ARGUMENT	6124:19	6124:19	14	sizeof ( val )
FUNCTION_CALL	6124:19	6124:29	15	sizeof ( val )
CALLEE	6124:19	6124:19	16	sizeof
LEAF_NODE	6124:19	6124:19	17	sizeof
LEAF_NODE	6124:25	6124:25	16	(
ARGUMENT	6124:26	6124:26	16	val
FIELD	6124:26	6124:26	17	val
LEAF_NODE	6124:26	6124:26	18	val
LEAF_NODE	6124:29	6124:29	16	)
LEAF_NODE	6124:30	6124:30	14	)
LEAF_NODE	6124:31	6124:31	12	;
SELECTION	6125:12	6126:16	11	
KEYWORD	6125:12	6125:12	12	if
LEAF_NODE	6125:12	6125:12	13	if
LEAF_NODE	6125:14	6125:14	12	(
CONDITION	6125:16	6125:16	12	bSwab
EXPR	6125:16	6125:16	13	bSwab
FIELD	6125:16	6125:16	14	bSwab
LEAF_NODE	6125:16	6125:16	15	bSwab
LEAF_NODE	6125:22	6125:22	12	)
STATEMENTS	6126:16	6126:16	12	
EXPR_STATEMENT	6126:16	6126:34	13	TIFFSwabLong ( & val ) ;
EXPR	6126:16	6126:16	14	TIFFSwabLong ( & val )
FUNCTION_CALL	6126:16	6126:33	15	TIFFSwabLong ( & val )
CALLEE	6126:16	6126:16	16	TIFFSwabLong
LEAF_NODE	6126:16	6126:16	17	TIFFSwabLong
LEAF_NODE	6126:28	6126:28	16	(
ARGUMENT	6126:29	6126:29	16	& val
UNARY_EXPR	6126:29	6126:30	17	& val
UNARY_OPERATOR	6126:29	6126:29	18	&
LEAF_NODE	6126:29	6126:29	19	&
FIELD	6126:30	6126:30	18	val
LEAF_NODE	6126:30	6126:30	19	val
LEAF_NODE	6126:33	6126:33	16	)
LEAF_NODE	6126:34	6126:34	14	;
EXPR_STATEMENT	6127:12	6127:37	11	panVals [ strile + i ] = val ;
EXPR	6127:12	6127:12	12	panVals [ strile + i ] = val
ASSIGN	6127:12	6127:34	13	panVals [ strile + i ] = val
LVAL	6127:12	6127:12	14	panVals [ strile + i ]
FIELD	6127:12	6127:30	15	panVals [ strile + i ]
LEAF_NODE	6127:12	6127:12	16	panVals
LEAF_NODE	6127:19	6127:19	16	[
EXPR	6127:20	6127:29	16	strile + i
FIELD	6127:20	6127:20	17	strile
LEAF_NODE	6127:20	6127:20	18	strile
LEAF_NODE	6127:27	6127:27	17	+
FIELD	6127:29	6127:29	17	i
LEAF_NODE	6127:29	6127:29	18	i
LEAF_NODE	6127:30	6127:30	16	]
ASSIGN_OP	6127:32	6127:32	14	=
LEAF_NODE	6127:32	6127:32	15	=
RVAL	6127:34	6127:34	14	val
FIELD	6127:34	6127:34	15	val
LEAF_NODE	6127:34	6127:34	16	val
LEAF_NODE	6127:37	6127:37	12	;
LEAF_NODE	6128:8	6128:8	10	}
SELECTION	6129:8	6130:8	6	
KEYWORD	6129:8	6129:8	7	else
LEAF_NODE	6129:8	6129:8	8	else
STATEMENTS	6130:8	6138:8	7	
LEAF_NODE	6130:8	6130:8	8	{
STATEMENTS	6131:12	6137:12	8	
SIMPLE_DECL	6131:12	6131:22	9	uint64 val ;
VAR_DECL	6131:12	6131:19	10	uint64 val
TYPE	6131:12	6131:12	11	uint64
TYPE_NAME	6131:12	6131:12	12	uint64
LEAF_NODE	6131:12	6131:12	13	uint64
NAME	6131:19	6131:19	11	val
LEAF_NODE	6131:19	6131:19	12	val
LEAF_NODE	6131:22	6131:22	10	;
EXPR_STATEMENT	6132:12	6134:31	9	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) ) ;
EXPR	6132:12	6132:12	10	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) )
FUNCTION_CALL	6132:12	6134:30	11	memcpy ( & val , buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint , sizeof ( val ) )
CALLEE	6132:12	6132:12	12	memcpy
LEAF_NODE	6132:12	6132:12	13	memcpy
LEAF_NODE	6132:18	6132:18	12	(
ARGUMENT	6132:19	6132:19	12	& val
UNARY_EXPR	6132:19	6132:20	13	& val
UNARY_OPERATOR	6132:19	6132:19	14	&
LEAF_NODE	6132:19	6132:19	15	&
FIELD	6132:20	6132:20	14	val
LEAF_NODE	6132:20	6132:20	15	val
LEAF_NODE	6132:23	6132:23	12	,
ARGUMENT	6133:19	6133:63	12	buffer + ( nOffset - nOffsetStartPage ) + i * sizeofvalint
FIELD	6133:19	6133:19	13	buffer
LEAF_NODE	6133:19	6133:19	14	buffer
LEAF_NODE	6133:26	6133:26	13	+
LEAF_NODE	6133:28	6133:28	13	(
FIELD	6133:29	6133:29	13	nOffset
LEAF_NODE	6133:29	6133:29	14	nOffset
LEAF_NODE	6133:37	6133:37	13	-
FIELD	6133:39	6133:39	13	nOffsetStartPage
LEAF_NODE	6133:39	6133:39	14	nOffsetStartPage
LEAF_NODE	6133:55	6133:55	13	)
LEAF_NODE	6133:57	6133:57	13	+
FIELD	6133:59	6133:59	13	i
LEAF_NODE	6133:59	6133:59	14	i
LEAF_NODE	6133:61	6133:61	13	*
FIELD	6133:63	6133:63	13	sizeofvalint
LEAF_NODE	6133:63	6133:63	14	sizeofvalint
LEAF_NODE	6133:75	6133:75	12	,
ARGUMENT	6134:19	6134:19	12	sizeof ( val )
FUNCTION_CALL	6134:19	6134:29	13	sizeof ( val )
CALLEE	6134:19	6134:19	14	sizeof
LEAF_NODE	6134:19	6134:19	15	sizeof
LEAF_NODE	6134:25	6134:25	14	(
ARGUMENT	6134:26	6134:26	14	val
FIELD	6134:26	6134:26	15	val
LEAF_NODE	6134:26	6134:26	16	val
LEAF_NODE	6134:29	6134:29	14	)
LEAF_NODE	6134:30	6134:30	12	)
LEAF_NODE	6134:31	6134:31	10	;
SELECTION	6135:12	6136:16	9	
KEYWORD	6135:12	6135:12	10	if
LEAF_NODE	6135:12	6135:12	11	if
LEAF_NODE	6135:14	6135:14	10	(
CONDITION	6135:16	6135:16	10	bSwab
EXPR	6135:16	6135:16	11	bSwab
FIELD	6135:16	6135:16	12	bSwab
LEAF_NODE	6135:16	6135:16	13	bSwab
LEAF_NODE	6135:22	6135:22	10	)
STATEMENTS	6136:16	6136:16	10	
EXPR_STATEMENT	6136:16	6136:35	11	TIFFSwabLong8 ( & val ) ;
EXPR	6136:16	6136:16	12	TIFFSwabLong8 ( & val )
FUNCTION_CALL	6136:16	6136:34	13	TIFFSwabLong8 ( & val )
CALLEE	6136:16	6136:16	14	TIFFSwabLong8
LEAF_NODE	6136:16	6136:16	15	TIFFSwabLong8
LEAF_NODE	6136:29	6136:29	14	(
ARGUMENT	6136:30	6136:30	14	& val
UNARY_EXPR	6136:30	6136:31	15	& val
UNARY_OPERATOR	6136:30	6136:30	16	&
LEAF_NODE	6136:30	6136:30	17	&
FIELD	6136:31	6136:31	16	val
LEAF_NODE	6136:31	6136:31	17	val
LEAF_NODE	6136:34	6136:34	14	)
LEAF_NODE	6136:35	6136:35	12	;
EXPR_STATEMENT	6137:12	6137:37	9	panVals [ strile + i ] = val ;
EXPR	6137:12	6137:12	10	panVals [ strile + i ] = val
ASSIGN	6137:12	6137:34	11	panVals [ strile + i ] = val
LVAL	6137:12	6137:12	12	panVals [ strile + i ]
FIELD	6137:12	6137:30	13	panVals [ strile + i ]
LEAF_NODE	6137:12	6137:12	14	panVals
LEAF_NODE	6137:19	6137:19	14	[
EXPR	6137:20	6137:29	14	strile + i
FIELD	6137:20	6137:20	15	strile
LEAF_NODE	6137:20	6137:20	16	strile
LEAF_NODE	6137:27	6137:27	15	+
FIELD	6137:29	6137:29	15	i
LEAF_NODE	6137:29	6137:29	16	i
LEAF_NODE	6137:30	6137:30	14	]
ASSIGN_OP	6137:32	6137:32	12	=
LEAF_NODE	6137:32	6137:32	13	=
RVAL	6137:34	6137:34	12	val
FIELD	6137:34	6137:34	13	val
LEAF_NODE	6137:34	6137:34	14	val
LEAF_NODE	6137:37	6137:37	10	;
LEAF_NODE	6138:8	6138:8	8	}
LEAF_NODE	6139:4	6139:4	5	}
JUMP_STATEMENT	6140:4	6140:12	3	return 1 ;
KEYWORD	6140:4	6140:4	4	return
LEAF_NODE	6140:4	6140:4	5	return
DESTINATION	6140:11	6140:11	4	1
EXPR	6140:11	6140:11	5	1
FIELD	6140:11	6140:11	6	1
LEAF_NODE	6140:11	6140:11	7	1
LEAF_NODE	6140:12	6140:12	4	;
LEAF_NODE	6141:0	6141:0	2	}
FUNCTION_DEF	6143:0	6244:0	1	
RETURN_TYPE	6143:0	6143:7	2	static int
LEAF_NODE	6143:0	6143:0	3	static
TYPE_NAME	6143:7	6143:7	3	int
LEAF_NODE	6143:7	6143:7	4	int
FUNCTION_NAME	6143:11	6143:11	2	_TIFFFetchStrileValue
LEAF_NODE	6143:11	6143:11	3	_TIFFFetchStrileValue
PARAMETER_LIST	6143:32	6146:48	2	( TIFF * tif , uint32 strile , TIFFDirEntry * dirent , uint64 * * parray )
LEAF_NODE	6143:32	6143:32	3	(
PARAMETER_DECL	6143:33	6143:39	3	TIFF * tif
TYPE	6143:33	6143:37	4	TIFF *
TYPE_NAME	6143:33	6143:33	5	TIFF
LEAF_NODE	6143:33	6143:33	6	TIFF
POINTER	6143:37	6143:37	5	*
LEAF_NODE	6143:37	6143:37	6	*
NAME	6143:39	6143:39	4	tif
LEAF_NODE	6143:39	6143:39	5	tif
LEAF_NODE	6143:42	6143:42	3	,
PARAMETER_DECL	6144:33	6144:40	3	uint32 strile
TYPE	6144:33	6144:33	4	uint32
TYPE_NAME	6144:33	6144:33	5	uint32
LEAF_NODE	6144:33	6144:33	6	uint32
NAME	6144:40	6144:40	4	strile
LEAF_NODE	6144:40	6144:40	5	strile
LEAF_NODE	6144:46	6144:46	3	,
PARAMETER_DECL	6145:33	6145:47	3	TIFFDirEntry * dirent
TYPE	6145:33	6145:45	4	TIFFDirEntry *
TYPE_NAME	6145:33	6145:33	5	TIFFDirEntry
LEAF_NODE	6145:33	6145:33	6	TIFFDirEntry
POINTER	6145:45	6145:45	5	*
LEAF_NODE	6145:45	6145:45	6	*
NAME	6145:47	6145:47	4	dirent
LEAF_NODE	6145:47	6145:47	5	dirent
LEAF_NODE	6145:53	6145:53	3	,
PARAMETER_DECL	6146:33	6146:42	3	uint64 * * parray
TYPE	6146:33	6146:39	4	uint64 * *
TYPE_NAME	6146:33	6146:33	5	uint64
LEAF_NODE	6146:33	6146:33	6	uint64
POINTER	6146:39	6146:40	5	* *
LEAF_NODE	6146:39	6146:39	6	*
LEAF_NODE	6146:40	6146:40	6	*
NAME	6146:42	6146:42	4	parray
LEAF_NODE	6146:42	6146:42	5	parray
LEAF_NODE	6146:48	6146:48	3	)
LEAF_NODE	6147:0	6147:0	2	{
STATEMENTS	6148:4	6243:4	2	
LEAF_NODE	6148:4	6148:4	3	static
SIMPLE_DECL	6148:11	6148:56	3	const char [ ] module ; module = "_TIFFFetchStrileValue" ;
VAR_DECL	6148:11	6148:22	4	const char [ ] module ; module = "_TIFFFetchStrileValue"
TYPE	6148:11	6148:28	5	const char [ ]
TYPE_NAME	6148:11	6148:17	6	const char
LEAF_NODE	6148:11	6148:11	7	const
LEAF_NODE	6148:17	6148:17	7	char
TYPE_SUFFIX	6148:28	6148:29	6	[ ]
LEAF_NODE	6148:28	6148:28	7	[
LEAF_NODE	6148:29	6148:29	7	]
NAME	6148:22	6148:22	5	module
LEAF_NODE	6148:22	6148:22	6	module
LEAF_NODE	0:0	0:0	5	;
INIT	6148:22	6148:22	5	module = "_TIFFFetchStrileValue"
ASSIGN	6148:22	6148:33	6	module = "_TIFFFetchStrileValue"
LVAL	6148:22	6148:22	7	module
NAME	6148:22	6148:22	8	module
LEAF_NODE	6148:22	6148:22	9	module
ASSIGN_OP	6148:31	6148:31	7	=
LEAF_NODE	6148:31	6148:31	8	=
RVAL	6148:33	6148:33	7	"_TIFFFetchStrileValue"
FIELD	6148:33	6148:33	8	"_TIFFFetchStrileValue"
LEAF_NODE	6148:33	6148:33	9	"_TIFFFetchStrileValue"
LEAF_NODE	6148:56	6148:56	4	;
SIMPLE_DECL	6149:4	6149:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	6149:4	6149:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	6149:4	6149:18	5	TIFFDirectory *
TYPE_NAME	6149:4	6149:4	6	TIFFDirectory
LEAF_NODE	6149:4	6149:4	7	TIFFDirectory
POINTER	6149:18	6149:18	6	*
LEAF_NODE	6149:18	6149:18	7	*
NAME	6149:19	6149:19	5	td
LEAF_NODE	6149:19	6149:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	6149:19	6149:19	5	td = & tif -> tif_dir
ASSIGN	6149:19	6149:24	6	td = & tif -> tif_dir
LVAL	6149:19	6149:19	7	td
NAME	6149:19	6149:19	8	td
LEAF_NODE	6149:19	6149:19	9	td
ASSIGN_OP	6149:22	6149:22	7	=
LEAF_NODE	6149:22	6149:22	8	=
RVAL	6149:24	6149:24	7	& tif -> tif_dir
UNARY_EXPR	6149:24	6149:25	8	& tif -> tif_dir
UNARY_OPERATOR	6149:24	6149:24	9	&
LEAF_NODE	6149:24	6149:24	10	&
FIELD	6149:25	6149:30	9	tif -> tif_dir
LEAF_NODE	6149:25	6149:25	10	tif
LEAF_NODE	6149:28	6149:28	10	->
LEAF_NODE	6149:30	6149:30	10	tif_dir
LEAF_NODE	6149:37	6149:37	4	;
SELECTION	6150:4	6151:4	3	
KEYWORD	6150:4	6150:4	4	if
LEAF_NODE	6150:4	6150:4	5	if
LEAF_NODE	6150:6	6150:6	4	(
CONDITION	6150:8	6150:8	4	strile >= dirent -> tdir_count
EXPR	6150:8	6150:18	5	strile >= dirent -> tdir_count
FIELD	6150:8	6150:8	6	strile
LEAF_NODE	6150:8	6150:8	7	strile
REL_OPERATOR	6150:15	6150:15	6	>=
LEAF_NODE	6150:15	6150:15	7	>=
FIELD	6150:18	6150:26	6	dirent -> tdir_count
LEAF_NODE	6150:18	6150:18	7	dirent
LEAF_NODE	6150:24	6150:24	7	->
LEAF_NODE	6150:26	6150:26	7	tdir_count
LEAF_NODE	6150:37	6150:37	4	)
STATEMENTS	6151:4	6153:4	4	
LEAF_NODE	6151:4	6151:4	5	{
STATEMENTS	6152:8	6152:8	5	
JUMP_STATEMENT	6152:8	6152:16	6	return 0 ;
KEYWORD	6152:8	6152:8	7	return
LEAF_NODE	6152:8	6152:8	8	return
DESTINATION	6152:15	6152:15	7	0
EXPR	6152:15	6152:15	8	0
FIELD	6152:15	6152:15	9	0
LEAF_NODE	6152:15	6152:15	10	0
LEAF_NODE	6152:16	6152:16	7	;
LEAF_NODE	6153:4	6153:4	5	}
SELECTION	6154:4	6155:4	3	
KEYWORD	6154:4	6154:4	4	if
LEAF_NODE	6154:4	6154:4	5	if
LEAF_NODE	6154:6	6154:6	4	(
CONDITION	6154:8	6154:8	4	strile >= td -> td_stripoffsetbyteallocsize
EXPR	6154:8	6154:18	5	strile >= td -> td_stripoffsetbyteallocsize
FIELD	6154:8	6154:8	6	strile
LEAF_NODE	6154:8	6154:8	7	strile
REL_OPERATOR	6154:15	6154:15	6	>=
LEAF_NODE	6154:15	6154:15	7	>=
FIELD	6154:18	6154:22	6	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6154:18	6154:18	7	td
LEAF_NODE	6154:20	6154:20	7	->
LEAF_NODE	6154:22	6154:22	7	td_stripoffsetbyteallocsize
LEAF_NODE	6154:50	6154:50	4	)
STATEMENTS	6155:4	6230:4	4	
LEAF_NODE	6155:4	6155:4	5	{
STATEMENTS	6156:8	6220:8	5	
SIMPLE_DECL	6156:8	6156:71	6	uint32 nStripArrayAllocBefore ; nStripArrayAllocBefore = td -> td_stripoffsetbyteallocsize ;
VAR_DECL	6156:8	6156:15	7	uint32 nStripArrayAllocBefore ; nStripArrayAllocBefore = td -> td_stripoffsetbyteallocsize
TYPE	6156:8	6156:8	8	uint32
TYPE_NAME	6156:8	6156:8	9	uint32
LEAF_NODE	6156:8	6156:8	10	uint32
NAME	6156:15	6156:15	8	nStripArrayAllocBefore
LEAF_NODE	6156:15	6156:15	9	nStripArrayAllocBefore
LEAF_NODE	0:0	0:0	8	;
INIT	6156:15	6156:15	8	nStripArrayAllocBefore = td -> td_stripoffsetbyteallocsize
ASSIGN	6156:15	6156:40	9	nStripArrayAllocBefore = td -> td_stripoffsetbyteallocsize
LVAL	6156:15	6156:15	10	nStripArrayAllocBefore
NAME	6156:15	6156:15	11	nStripArrayAllocBefore
LEAF_NODE	6156:15	6156:15	12	nStripArrayAllocBefore
ASSIGN_OP	6156:38	6156:38	10	=
LEAF_NODE	6156:38	6156:38	11	=
RVAL	6156:40	6156:40	10	td -> td_stripoffsetbyteallocsize
FIELD	6156:40	6156:44	11	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6156:40	6156:40	12	td
LEAF_NODE	6156:42	6156:42	12	->
LEAF_NODE	6156:44	6156:44	12	td_stripoffsetbyteallocsize
LEAF_NODE	6156:71	6156:71	7	;
SIMPLE_DECL	6157:8	6157:34	6	uint32 nStripArrayAllocNew ;
VAR_DECL	6157:8	6157:15	7	uint32 nStripArrayAllocNew
TYPE	6157:8	6157:8	8	uint32
TYPE_NAME	6157:8	6157:8	9	uint32
LEAF_NODE	6157:8	6157:8	10	uint32
NAME	6157:15	6157:15	8	nStripArrayAllocNew
LEAF_NODE	6157:15	6157:15	9	nStripArrayAllocNew
LEAF_NODE	6157:34	6157:34	7	;
SIMPLE_DECL	6158:8	6158:27	6	uint64 nArraySize64 ;
VAR_DECL	6158:8	6158:15	7	uint64 nArraySize64
TYPE	6158:8	6158:8	8	uint64
TYPE_NAME	6158:8	6158:8	9	uint64
LEAF_NODE	6158:8	6158:8	10	uint64
NAME	6158:15	6158:15	8	nArraySize64
LEAF_NODE	6158:15	6158:15	9	nArraySize64
LEAF_NODE	6158:27	6158:27	7	;
SIMPLE_DECL	6159:8	6159:25	6	size_t nArraySize ;
VAR_DECL	6159:8	6159:15	7	size_t nArraySize
TYPE	6159:8	6159:8	8	size_t
TYPE_NAME	6159:8	6159:8	9	size_t
LEAF_NODE	6159:8	6159:8	10	size_t
NAME	6159:15	6159:15	8	nArraySize
LEAF_NODE	6159:15	6159:15	9	nArraySize
LEAF_NODE	6159:25	6159:25	7	;
SIMPLE_DECL	6160:8	6160:27	6	uint64 * offsetArray ;
VAR_DECL	6160:8	6160:16	7	uint64 * offsetArray
TYPE	6160:8	6160:14	8	uint64 *
TYPE_NAME	6160:8	6160:8	9	uint64
LEAF_NODE	6160:8	6160:8	10	uint64
POINTER	6160:14	6160:14	9	*
LEAF_NODE	6160:14	6160:14	10	*
NAME	6160:16	6160:16	8	offsetArray
LEAF_NODE	6160:16	6160:16	9	offsetArray
LEAF_NODE	6160:27	6160:27	7	;
SIMPLE_DECL	6161:8	6161:30	6	uint64 * bytecountArray ;
VAR_DECL	6161:8	6161:16	7	uint64 * bytecountArray
TYPE	6161:8	6161:14	8	uint64 *
TYPE_NAME	6161:8	6161:8	9	uint64
LEAF_NODE	6161:8	6161:8	10	uint64
POINTER	6161:14	6161:14	9	*
LEAF_NODE	6161:14	6161:14	10	*
NAME	6161:16	6161:16	8	bytecountArray
LEAF_NODE	6161:16	6161:16	9	bytecountArray
LEAF_NODE	6161:30	6161:30	7	;
SELECTION	6163:8	6164:8	6	
KEYWORD	6163:8	6163:8	7	if
LEAF_NODE	6163:8	6163:8	8	if
LEAF_NODE	6163:10	6163:10	7	(
CONDITION	6163:12	6163:12	7	strile > 1000000
EXPR	6163:12	6163:21	8	strile > 1000000
FIELD	6163:12	6163:12	9	strile
LEAF_NODE	6163:12	6163:12	10	strile
REL_OPERATOR	6163:19	6163:19	9	>
LEAF_NODE	6163:19	6163:19	10	>
FIELD	6163:21	6163:21	9	1000000
LEAF_NODE	6163:21	6163:21	10	1000000
LEAF_NODE	6163:29	6163:29	7	)
STATEMENTS	6164:8	6174:8	7	
LEAF_NODE	6164:8	6164:8	8	{
STATEMENTS	6165:12	6169:12	8	
SIMPLE_DECL	6165:12	6165:50	9	uint64 filesize ; filesize = TIFFGetFileSize ( tif ) ;
VAR_DECL	6165:12	6165:19	10	uint64 filesize ; filesize = TIFFGetFileSize ( tif )
TYPE	6165:12	6165:12	11	uint64
TYPE_NAME	6165:12	6165:12	12	uint64
LEAF_NODE	6165:12	6165:12	13	uint64
NAME	6165:19	6165:19	11	filesize
LEAF_NODE	6165:19	6165:19	12	filesize
LEAF_NODE	0:0	0:0	11	;
INIT	6165:19	6165:19	11	filesize = TIFFGetFileSize ( tif )
ASSIGN	6165:19	6165:30	12	filesize = TIFFGetFileSize ( tif )
LVAL	6165:19	6165:19	13	filesize
NAME	6165:19	6165:19	14	filesize
LEAF_NODE	6165:19	6165:19	15	filesize
ASSIGN_OP	6165:28	6165:28	13	=
LEAF_NODE	6165:28	6165:28	14	=
RVAL	6165:30	6165:30	13	TIFFGetFileSize ( tif )
FUNCTION_CALL	6165:30	6165:49	14	TIFFGetFileSize ( tif )
CALLEE	6165:30	6165:30	15	TIFFGetFileSize
LEAF_NODE	6165:30	6165:30	16	TIFFGetFileSize
LEAF_NODE	6165:45	6165:45	15	(
ARGUMENT	6165:46	6165:46	15	tif
FIELD	6165:46	6165:46	16	tif
LEAF_NODE	6165:46	6165:46	17	tif
LEAF_NODE	6165:49	6165:49	15	)
LEAF_NODE	6165:50	6165:50	10	;
SELECTION	6169:12	6170:12	9	
KEYWORD	6169:12	6169:12	10	if
LEAF_NODE	6169:12	6169:12	11	if
LEAF_NODE	6169:14	6169:14	10	(
CONDITION	6169:16	6169:16	10	strile > filesize / sizeof ( uint32 )
EXPR	6169:16	6169:36	11	strile > filesize / sizeof ( uint32 )
FIELD	6169:16	6169:16	12	strile
LEAF_NODE	6169:16	6169:16	13	strile
REL_OPERATOR	6169:23	6169:23	12	>
LEAF_NODE	6169:23	6169:23	13	>
FIELD	6169:25	6169:25	12	filesize
LEAF_NODE	6169:25	6169:25	13	filesize
LEAF_NODE	6169:34	6169:34	12	/
FUNCTION_CALL	6169:36	6169:49	12	sizeof ( uint32 )
CALLEE	6169:36	6169:36	13	sizeof
LEAF_NODE	6169:36	6169:36	14	sizeof
LEAF_NODE	6169:42	6169:42	13	(
ARGUMENT	6169:43	6169:43	13	uint32
FIELD	6169:43	6169:43	14	uint32
LEAF_NODE	6169:43	6169:43	15	uint32
LEAF_NODE	6169:49	6169:49	13	)
LEAF_NODE	6169:51	6169:51	10	)
STATEMENTS	6170:12	6173:12	10	
LEAF_NODE	6170:12	6170:12	11	{
STATEMENTS	6171:16	6172:16	11	
EXPR_STATEMENT	6171:16	6171:75	12	TIFFErrorExt ( tif -> tif_clientdata , module , "File too short" ) ;
EXPR	6171:16	6171:16	13	TIFFErrorExt ( tif -> tif_clientdata , module , "File too short" )
FUNCTION_CALL	6171:16	6171:74	14	TIFFErrorExt ( tif -> tif_clientdata , module , "File too short" )
CALLEE	6171:16	6171:16	15	TIFFErrorExt
LEAF_NODE	6171:16	6171:16	16	TIFFErrorExt
LEAF_NODE	6171:28	6171:28	15	(
ARGUMENT	6171:29	6171:29	15	tif -> tif_clientdata
FIELD	6171:29	6171:34	16	tif -> tif_clientdata
LEAF_NODE	6171:29	6171:29	17	tif
LEAF_NODE	6171:32	6171:32	17	->
LEAF_NODE	6171:34	6171:34	17	tif_clientdata
LEAF_NODE	6171:48	6171:48	15	,
ARGUMENT	6171:50	6171:50	15	module
FIELD	6171:50	6171:50	16	module
LEAF_NODE	6171:50	6171:50	17	module
LEAF_NODE	6171:56	6171:56	15	,
ARGUMENT	6171:58	6171:58	15	"File too short"
FIELD	6171:58	6171:58	16	"File too short"
LEAF_NODE	6171:58	6171:58	17	"File too short"
LEAF_NODE	6171:74	6171:74	15	)
LEAF_NODE	6171:75	6171:75	13	;
JUMP_STATEMENT	6172:16	6172:24	12	return 0 ;
KEYWORD	6172:16	6172:16	13	return
LEAF_NODE	6172:16	6172:16	14	return
DESTINATION	6172:23	6172:23	13	0
EXPR	6172:23	6172:23	14	0
FIELD	6172:23	6172:23	15	0
LEAF_NODE	6172:23	6172:23	16	0
LEAF_NODE	6172:24	6172:24	13	;
LEAF_NODE	6173:12	6173:12	11	}
LEAF_NODE	6174:8	6174:8	8	}
SELECTION	6176:8	6178:8	6	
KEYWORD	6176:8	6176:8	7	if
LEAF_NODE	6176:8	6176:8	8	if
LEAF_NODE	6176:10	6176:10	7	(
CONDITION	6176:12	6176:12	7	td -> td_stripoffsetbyteallocsize == 0 && td -> td_nstrips < 1024 * 1024
EXPR	6176:12	6176:12	8	td -> td_stripoffsetbyteallocsize == 0 && td -> td_nstrips < 1024 * 1024
AND	6176:12	6177:12	9	td -> td_stripoffsetbyteallocsize == 0 && td -> td_nstrips < 1024 * 1024
EXPR	6176:12	6176:47	10	td -> td_stripoffsetbyteallocsize == 0
FIELD	6176:12	6176:16	11	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6176:12	6176:12	12	td
LEAF_NODE	6176:14	6176:14	12	->
LEAF_NODE	6176:16	6176:16	12	td_stripoffsetbyteallocsize
EQ_OPERATOR	6176:44	6176:44	11	==
LEAF_NODE	6176:44	6176:44	12	==
FIELD	6176:47	6176:47	11	0
LEAF_NODE	6176:47	6176:47	12	0
LEAF_NODE	6176:49	6176:49	10	&&
EXPR	6177:12	6177:36	10	td -> td_nstrips < 1024 * 1024
FIELD	6177:12	6177:16	11	td -> td_nstrips
LEAF_NODE	6177:12	6177:12	12	td
LEAF_NODE	6177:14	6177:14	12	->
LEAF_NODE	6177:16	6177:16	12	td_nstrips
REL_OPERATOR	6177:27	6177:27	11	<
LEAF_NODE	6177:27	6177:27	12	<
FIELD	6177:29	6177:29	11	1024
LEAF_NODE	6177:29	6177:29	12	1024
LEAF_NODE	6177:34	6177:34	11	*
FIELD	6177:36	6177:36	11	1024
LEAF_NODE	6177:36	6177:36	12	1024
LEAF_NODE	6177:41	6177:41	7	)
STATEMENTS	6178:8	6180:8	7	
LEAF_NODE	6178:8	6178:8	8	{
STATEMENTS	6179:12	6179:12	8	
EXPR_STATEMENT	6179:12	6179:48	9	nStripArrayAllocNew = td -> td_nstrips ;
EXPR	6179:12	6179:12	10	nStripArrayAllocNew = td -> td_nstrips
ASSIGN	6179:12	6179:34	11	nStripArrayAllocNew = td -> td_nstrips
LVAL	6179:12	6179:12	12	nStripArrayAllocNew
FIELD	6179:12	6179:12	13	nStripArrayAllocNew
LEAF_NODE	6179:12	6179:12	14	nStripArrayAllocNew
ASSIGN_OP	6179:32	6179:32	12	=
LEAF_NODE	6179:32	6179:32	13	=
RVAL	6179:34	6179:34	12	td -> td_nstrips
FIELD	6179:34	6179:38	13	td -> td_nstrips
LEAF_NODE	6179:34	6179:34	14	td
LEAF_NODE	6179:36	6179:36	14	->
LEAF_NODE	6179:38	6179:38	14	td_nstrips
LEAF_NODE	6179:48	6179:48	10	;
LEAF_NODE	6180:8	6180:8	8	}
SELECTION	6181:8	6182:8	6	
KEYWORD	6181:8	6181:8	7	else
LEAF_NODE	6181:8	6181:8	8	else
STATEMENTS	6182:8	6189:8	7	
LEAF_NODE	6182:8	6182:8	8	{
STATEMENTS	6185:12	6188:12	8	
EXPR_STATEMENT	6185:12	6185:69	9	nStripArrayAllocNew = TIFF_MAX ( strile + 1 , 1024U * 512U ) ;
EXPR	6185:12	6185:12	10	nStripArrayAllocNew = TIFF_MAX ( strile + 1 , 1024U * 512U )
ASSIGN	6185:12	6185:34	11	nStripArrayAllocNew = TIFF_MAX ( strile + 1 , 1024U * 512U )
LVAL	6185:12	6185:12	12	nStripArrayAllocNew
FIELD	6185:12	6185:12	13	nStripArrayAllocNew
LEAF_NODE	6185:12	6185:12	14	nStripArrayAllocNew
ASSIGN_OP	6185:32	6185:32	12	=
LEAF_NODE	6185:32	6185:32	13	=
RVAL	6185:34	6185:34	12	TIFF_MAX ( strile + 1 , 1024U * 512U )
FUNCTION_CALL	6185:34	6185:68	13	TIFF_MAX ( strile + 1 , 1024U * 512U )
CALLEE	6185:34	6185:34	14	TIFF_MAX
LEAF_NODE	6185:34	6185:34	15	TIFF_MAX
LEAF_NODE	6185:42	6185:42	14	(
ARGUMENT	6185:43	6185:52	14	strile + 1
FIELD	6185:43	6185:43	15	strile
LEAF_NODE	6185:43	6185:43	16	strile
LEAF_NODE	6185:50	6185:50	15	+
FIELD	6185:52	6185:52	15	1
LEAF_NODE	6185:52	6185:52	16	1
LEAF_NODE	6185:53	6185:53	14	,
ARGUMENT	6185:55	6185:63	14	1024U * 512U
FIELD	6185:55	6185:55	15	1024U
LEAF_NODE	6185:55	6185:55	16	1024U
LEAF_NODE	6185:61	6185:61	15	*
FIELD	6185:63	6185:63	15	512U
LEAF_NODE	6185:63	6185:63	16	512U
LEAF_NODE	6185:68	6185:68	14	)
LEAF_NODE	6185:69	6185:69	10	;
SELECTION	6186:12	6187:16	9	
KEYWORD	6186:12	6186:12	10	if
LEAF_NODE	6186:12	6186:12	11	if
LEAF_NODE	6186:14	6186:14	10	(
CONDITION	6186:16	6186:16	10	nStripArrayAllocNew < 0xFFFFFFFFU / 2
EXPR	6186:16	6186:52	11	nStripArrayAllocNew < 0xFFFFFFFFU / 2
FIELD	6186:16	6186:16	12	nStripArrayAllocNew
LEAF_NODE	6186:16	6186:16	13	nStripArrayAllocNew
REL_OPERATOR	6186:36	6186:36	12	<
LEAF_NODE	6186:36	6186:36	13	<
FIELD	6186:38	6186:38	12	0xFFFFFFFFU
LEAF_NODE	6186:38	6186:38	13	0xFFFFFFFFU
LEAF_NODE	6186:50	6186:50	12	/
FIELD	6186:52	6186:52	12	2
LEAF_NODE	6186:52	6186:52	13	2
LEAF_NODE	6186:55	6186:55	10	)
STATEMENTS	6187:16	6187:16	10	
EXPR_STATEMENT	6187:16	6187:40	11	nStripArrayAllocNew *= 2 ;
EXPR	6187:16	6187:16	12	nStripArrayAllocNew *= 2
ASSIGN	6187:16	6187:39	13	nStripArrayAllocNew *= 2
LVAL	6187:16	6187:16	14	nStripArrayAllocNew
FIELD	6187:16	6187:16	15	nStripArrayAllocNew
LEAF_NODE	6187:16	6187:16	16	nStripArrayAllocNew
ASSIGN_OP	6187:36	6187:36	14	*=
LEAF_NODE	6187:36	6187:36	15	*=
RVAL	6187:39	6187:39	14	2
FIELD	6187:39	6187:39	15	2
LEAF_NODE	6187:39	6187:39	16	2
LEAF_NODE	6187:40	6187:40	12	;
EXPR_STATEMENT	6188:12	6188:79	9	nStripArrayAllocNew = TIFF_MIN ( nStripArrayAllocNew , td -> td_nstrips ) ;
EXPR	6188:12	6188:12	10	nStripArrayAllocNew = TIFF_MIN ( nStripArrayAllocNew , td -> td_nstrips )
ASSIGN	6188:12	6188:34	11	nStripArrayAllocNew = TIFF_MIN ( nStripArrayAllocNew , td -> td_nstrips )
LVAL	6188:12	6188:12	12	nStripArrayAllocNew
FIELD	6188:12	6188:12	13	nStripArrayAllocNew
LEAF_NODE	6188:12	6188:12	14	nStripArrayAllocNew
ASSIGN_OP	6188:32	6188:32	12	=
LEAF_NODE	6188:32	6188:32	13	=
RVAL	6188:34	6188:34	12	TIFF_MIN ( nStripArrayAllocNew , td -> td_nstrips )
FUNCTION_CALL	6188:34	6188:78	13	TIFF_MIN ( nStripArrayAllocNew , td -> td_nstrips )
CALLEE	6188:34	6188:34	14	TIFF_MIN
LEAF_NODE	6188:34	6188:34	15	TIFF_MIN
LEAF_NODE	6188:42	6188:42	14	(
ARGUMENT	6188:43	6188:43	14	nStripArrayAllocNew
FIELD	6188:43	6188:43	15	nStripArrayAllocNew
LEAF_NODE	6188:43	6188:43	16	nStripArrayAllocNew
LEAF_NODE	6188:62	6188:62	14	,
ARGUMENT	6188:64	6188:64	14	td -> td_nstrips
FIELD	6188:64	6188:68	15	td -> td_nstrips
LEAF_NODE	6188:64	6188:64	16	td
LEAF_NODE	6188:66	6188:66	16	->
LEAF_NODE	6188:68	6188:68	16	td_nstrips
LEAF_NODE	6188:78	6188:78	14	)
LEAF_NODE	6188:79	6188:79	10	;
LEAF_NODE	6189:8	6189:8	8	}
EXPR_STATEMENT	6190:8	6190:46	6	assert ( strile < nStripArrayAllocNew ) ;
EXPR	6190:8	6190:8	7	assert ( strile < nStripArrayAllocNew )
FUNCTION_CALL	6190:8	6190:45	8	assert ( strile < nStripArrayAllocNew )
CALLEE	6190:8	6190:8	9	assert
LEAF_NODE	6190:8	6190:8	10	assert
LEAF_NODE	6190:14	6190:14	9	(
ARGUMENT	6190:16	6190:25	9	strile < nStripArrayAllocNew
FIELD	6190:16	6190:16	10	strile
LEAF_NODE	6190:16	6190:16	11	strile
REL_OPERATOR	6190:23	6190:23	10	<
LEAF_NODE	6190:23	6190:23	11	<
FIELD	6190:25	6190:25	10	nStripArrayAllocNew
LEAF_NODE	6190:25	6190:25	11	nStripArrayAllocNew
LEAF_NODE	6190:45	6190:45	9	)
LEAF_NODE	6190:46	6190:46	7	;
EXPR_STATEMENT	6191:8	6191:67	6	nArraySize64 = ( uint64 ) sizeof ( uint64 ) * nStripArrayAllocNew ;
EXPR	6191:8	6191:8	7	nArraySize64 = ( uint64 ) sizeof ( uint64 ) * nStripArrayAllocNew
ASSIGN	6191:8	6191:23	8	nArraySize64 = ( uint64 ) sizeof ( uint64 ) * nStripArrayAllocNew
LVAL	6191:8	6191:8	9	nArraySize64
FIELD	6191:8	6191:8	10	nArraySize64
LEAF_NODE	6191:8	6191:8	11	nArraySize64
ASSIGN_OP	6191:21	6191:21	9	=
LEAF_NODE	6191:21	6191:21	10	=
RVAL	6191:23	6191:48	9	( uint64 ) sizeof ( uint64 ) * nStripArrayAllocNew
LEAF_NODE	6191:23	6191:23	10	(
TYPE_NAME	6191:24	6191:24	10	uint64
LEAF_NODE	6191:24	6191:24	11	uint64
LEAF_NODE	6191:30	6191:30	10	)
FUNCTION_CALL	6191:31	6191:44	10	sizeof ( uint64 )
CALLEE	6191:31	6191:31	11	sizeof
LEAF_NODE	6191:31	6191:31	12	sizeof
LEAF_NODE	6191:37	6191:37	11	(
ARGUMENT	6191:38	6191:38	11	uint64
FIELD	6191:38	6191:38	12	uint64
LEAF_NODE	6191:38	6191:38	13	uint64
LEAF_NODE	6191:44	6191:44	11	)
LEAF_NODE	6191:46	6191:46	10	*
FIELD	6191:48	6191:48	10	nStripArrayAllocNew
LEAF_NODE	6191:48	6191:48	11	nStripArrayAllocNew
LEAF_NODE	6191:67	6191:67	7	;
LEAF_NODE	6192:8	6192:8	6	nArraySize
LEAF_NODE	6192:19	6192:19	6	=
LEAF_NODE	6192:21	6192:21	6	(
LEAF_NODE	6192:22	6192:22	6	size_t
LEAF_NODE	6192:28	6192:28	6	)
LEAF_NODE	6192:29	6192:29	6	(
LEAF_NODE	6192:30	6192:30	6	nArraySize64
LEAF_NODE	6192:42	6192:42	6	)
LEAF_NODE	6192:43	6192:43	6	;
SELECTION	6194:8	6195:8	6	
KEYWORD	6194:8	6194:8	7	if
LEAF_NODE	6194:8	6194:8	8	if
LEAF_NODE	6194:10	6194:10	7	(
CONDITION	6194:12	6194:12	7	nArraySize != nArraySize64
EXPR	6194:12	6194:26	8	nArraySize != nArraySize64
FIELD	6194:12	6194:12	9	nArraySize
LEAF_NODE	6194:12	6194:12	10	nArraySize
EQ_OPERATOR	6194:23	6194:23	9	!=
LEAF_NODE	6194:23	6194:23	10	!=
FIELD	6194:26	6194:26	9	nArraySize64
LEAF_NODE	6194:26	6194:26	10	nArraySize64
LEAF_NODE	6194:39	6194:39	7	)
STATEMENTS	6195:8	6199:8	7	
LEAF_NODE	6195:8	6195:8	8	{
STATEMENTS	6196:12	6198:12	8	
EXPR_STATEMENT	6196:12	6197:76	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate strip offset and bytecount arrays" ) ;
EXPR	6196:12	6196:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate strip offset and bytecount arrays" )
FUNCTION_CALL	6196:12	6197:75	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate strip offset and bytecount arrays" )
CALLEE	6196:12	6196:12	12	TIFFErrorExt
LEAF_NODE	6196:12	6196:12	13	TIFFErrorExt
LEAF_NODE	6196:24	6196:24	12	(
ARGUMENT	6196:25	6196:25	12	tif -> tif_clientdata
FIELD	6196:25	6196:30	13	tif -> tif_clientdata
LEAF_NODE	6196:25	6196:25	14	tif
LEAF_NODE	6196:28	6196:28	14	->
LEAF_NODE	6196:30	6196:30	14	tif_clientdata
LEAF_NODE	6196:44	6196:44	12	,
ARGUMENT	6196:46	6196:46	12	module
FIELD	6196:46	6196:46	13	module
LEAF_NODE	6196:46	6196:46	14	module
LEAF_NODE	6196:52	6196:52	12	,
ARGUMENT	6197:24	6197:24	12	"Cannot allocate strip offset and bytecount arrays"
FIELD	6197:24	6197:24	13	"Cannot allocate strip offset and bytecount arrays"
LEAF_NODE	6197:24	6197:24	14	"Cannot allocate strip offset and bytecount arrays"
LEAF_NODE	6197:75	6197:75	12	)
LEAF_NODE	6197:76	6197:76	10	;
JUMP_STATEMENT	6198:12	6198:20	9	return 0 ;
KEYWORD	6198:12	6198:12	10	return
LEAF_NODE	6198:12	6198:12	11	return
DESTINATION	6198:19	6198:19	10	0
EXPR	6198:19	6198:19	11	0
FIELD	6198:19	6198:19	12	0
LEAF_NODE	6198:19	6198:19	13	0
LEAF_NODE	6198:20	6198:20	10	;
LEAF_NODE	6199:8	6199:8	8	}
EXPR_STATEMENT	6201:8	6202:62	6	offsetArray = ( uint64 * ) ( _TIFFrealloc ( td -> td_stripoffset_p , nArraySize ) ) ;
EXPR	6201:8	6201:8	7	offsetArray = ( uint64 * ) ( _TIFFrealloc ( td -> td_stripoffset_p , nArraySize ) )
ASSIGN	6201:8	6201:22	8	offsetArray = ( uint64 * ) ( _TIFFrealloc ( td -> td_stripoffset_p , nArraySize ) )
LVAL	6201:8	6201:8	9	offsetArray
FIELD	6201:8	6201:8	10	offsetArray
LEAF_NODE	6201:8	6201:8	11	offsetArray
ASSIGN_OP	6201:20	6201:20	9	=
LEAF_NODE	6201:20	6201:20	10	=
RVAL	6201:22	6202:61	9	( uint64 * ) ( _TIFFrealloc ( td -> td_stripoffset_p , nArraySize ) )
LEAF_NODE	6201:22	6201:22	10	(
TYPE_NAME	6201:23	6201:23	10	uint64
LEAF_NODE	6201:23	6201:23	11	uint64
LEAF_NODE	6201:29	6201:29	10	*
LEAF_NODE	6201:30	6201:30	10	)
LEAF_NODE	6201:31	6201:31	10	(
FUNCTION_CALL	6202:12	6202:59	10	_TIFFrealloc ( td -> td_stripoffset_p , nArraySize )
CALLEE	6202:12	6202:12	11	_TIFFrealloc
LEAF_NODE	6202:12	6202:12	12	_TIFFrealloc
LEAF_NODE	6202:24	6202:24	11	(
ARGUMENT	6202:26	6202:26	11	td -> td_stripoffset_p
FIELD	6202:26	6202:30	12	td -> td_stripoffset_p
LEAF_NODE	6202:26	6202:26	13	td
LEAF_NODE	6202:28	6202:28	13	->
LEAF_NODE	6202:30	6202:30	13	td_stripoffset_p
LEAF_NODE	6202:46	6202:46	11	,
ARGUMENT	6202:48	6202:48	11	nArraySize
FIELD	6202:48	6202:48	12	nArraySize
LEAF_NODE	6202:48	6202:48	13	nArraySize
LEAF_NODE	6202:59	6202:59	11	)
LEAF_NODE	6202:61	6202:61	10	)
LEAF_NODE	6202:62	6202:62	7	;
EXPR_STATEMENT	6203:8	6204:65	6	bytecountArray = ( uint64 * ) ( _TIFFrealloc ( td -> td_stripbytecount_p , nArraySize ) ) ;
EXPR	6203:8	6203:8	7	bytecountArray = ( uint64 * ) ( _TIFFrealloc ( td -> td_stripbytecount_p , nArraySize ) )
ASSIGN	6203:8	6203:25	8	bytecountArray = ( uint64 * ) ( _TIFFrealloc ( td -> td_stripbytecount_p , nArraySize ) )
LVAL	6203:8	6203:8	9	bytecountArray
FIELD	6203:8	6203:8	10	bytecountArray
LEAF_NODE	6203:8	6203:8	11	bytecountArray
ASSIGN_OP	6203:23	6203:23	9	=
LEAF_NODE	6203:23	6203:23	10	=
RVAL	6203:25	6204:64	9	( uint64 * ) ( _TIFFrealloc ( td -> td_stripbytecount_p , nArraySize ) )
LEAF_NODE	6203:25	6203:25	10	(
TYPE_NAME	6203:26	6203:26	10	uint64
LEAF_NODE	6203:26	6203:26	11	uint64
LEAF_NODE	6203:32	6203:32	10	*
LEAF_NODE	6203:33	6203:33	10	)
LEAF_NODE	6203:34	6203:34	10	(
FUNCTION_CALL	6204:12	6204:62	10	_TIFFrealloc ( td -> td_stripbytecount_p , nArraySize )
CALLEE	6204:12	6204:12	11	_TIFFrealloc
LEAF_NODE	6204:12	6204:12	12	_TIFFrealloc
LEAF_NODE	6204:24	6204:24	11	(
ARGUMENT	6204:26	6204:26	11	td -> td_stripbytecount_p
FIELD	6204:26	6204:30	12	td -> td_stripbytecount_p
LEAF_NODE	6204:26	6204:26	13	td
LEAF_NODE	6204:28	6204:28	13	->
LEAF_NODE	6204:30	6204:30	13	td_stripbytecount_p
LEAF_NODE	6204:49	6204:49	11	,
ARGUMENT	6204:51	6204:51	11	nArraySize
FIELD	6204:51	6204:51	12	nArraySize
LEAF_NODE	6204:51	6204:51	13	nArraySize
LEAF_NODE	6204:62	6204:62	11	)
LEAF_NODE	6204:64	6204:64	10	)
LEAF_NODE	6204:65	6204:65	7	;
SELECTION	6205:8	6206:12	6	
KEYWORD	6205:8	6205:8	7	if
LEAF_NODE	6205:8	6205:8	8	if
LEAF_NODE	6205:10	6205:10	7	(
CONDITION	6205:12	6205:12	7	offsetArray
EXPR	6205:12	6205:12	8	offsetArray
FIELD	6205:12	6205:12	9	offsetArray
LEAF_NODE	6205:12	6205:12	10	offsetArray
LEAF_NODE	6205:24	6205:24	7	)
STATEMENTS	6206:12	6206:12	7	
EXPR_STATEMENT	6206:12	6206:46	8	td -> td_stripoffset_p = offsetArray ;
EXPR	6206:12	6206:12	9	td -> td_stripoffset_p = offsetArray
ASSIGN	6206:12	6206:35	10	td -> td_stripoffset_p = offsetArray
LVAL	6206:12	6206:12	11	td -> td_stripoffset_p
FIELD	6206:12	6206:16	12	td -> td_stripoffset_p
LEAF_NODE	6206:12	6206:12	13	td
LEAF_NODE	6206:14	6206:14	13	->
LEAF_NODE	6206:16	6206:16	13	td_stripoffset_p
ASSIGN_OP	6206:33	6206:33	11	=
LEAF_NODE	6206:33	6206:33	12	=
RVAL	6206:35	6206:35	11	offsetArray
FIELD	6206:35	6206:35	12	offsetArray
LEAF_NODE	6206:35	6206:35	13	offsetArray
LEAF_NODE	6206:46	6206:46	9	;
SELECTION	6207:8	6208:12	6	
KEYWORD	6207:8	6207:8	7	if
LEAF_NODE	6207:8	6207:8	8	if
LEAF_NODE	6207:10	6207:10	7	(
CONDITION	6207:12	6207:12	7	bytecountArray
EXPR	6207:12	6207:12	8	bytecountArray
FIELD	6207:12	6207:12	9	bytecountArray
LEAF_NODE	6207:12	6207:12	10	bytecountArray
LEAF_NODE	6207:27	6207:27	7	)
STATEMENTS	6208:12	6208:12	7	
EXPR_STATEMENT	6208:12	6208:52	8	td -> td_stripbytecount_p = bytecountArray ;
EXPR	6208:12	6208:12	9	td -> td_stripbytecount_p = bytecountArray
ASSIGN	6208:12	6208:38	10	td -> td_stripbytecount_p = bytecountArray
LVAL	6208:12	6208:12	11	td -> td_stripbytecount_p
FIELD	6208:12	6208:16	12	td -> td_stripbytecount_p
LEAF_NODE	6208:12	6208:12	13	td
LEAF_NODE	6208:14	6208:14	13	->
LEAF_NODE	6208:16	6208:16	13	td_stripbytecount_p
ASSIGN_OP	6208:36	6208:36	11	=
LEAF_NODE	6208:36	6208:36	12	=
RVAL	6208:38	6208:38	11	bytecountArray
FIELD	6208:38	6208:38	12	bytecountArray
LEAF_NODE	6208:38	6208:38	13	bytecountArray
LEAF_NODE	6208:52	6208:52	9	;
SELECTION	6209:8	6210:8	6	
KEYWORD	6209:8	6209:8	7	if
LEAF_NODE	6209:8	6209:8	8	if
LEAF_NODE	6209:10	6209:10	7	(
CONDITION	6209:12	6209:12	7	offsetArray && bytecountArray
EXPR	6209:12	6209:12	8	offsetArray && bytecountArray
AND	6209:12	6209:27	9	offsetArray && bytecountArray
EXPR	6209:12	6209:12	10	offsetArray
FIELD	6209:12	6209:12	11	offsetArray
LEAF_NODE	6209:12	6209:12	12	offsetArray
LEAF_NODE	6209:24	6209:24	10	&&
EXPR	6209:27	6209:27	10	bytecountArray
FIELD	6209:27	6209:27	11	bytecountArray
LEAF_NODE	6209:27	6209:27	12	bytecountArray
LEAF_NODE	6209:42	6209:42	7	)
STATEMENTS	6210:8	6219:8	7	
LEAF_NODE	6210:8	6210:8	8	{
STATEMENTS	6211:12	6216:12	8	
EXPR_STATEMENT	6211:12	6211:65	9	td -> td_stripoffsetbyteallocsize = nStripArrayAllocNew ;
EXPR	6211:12	6211:12	10	td -> td_stripoffsetbyteallocsize = nStripArrayAllocNew
ASSIGN	6211:12	6211:46	11	td -> td_stripoffsetbyteallocsize = nStripArrayAllocNew
LVAL	6211:12	6211:12	12	td -> td_stripoffsetbyteallocsize
FIELD	6211:12	6211:16	13	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6211:12	6211:12	14	td
LEAF_NODE	6211:14	6211:14	14	->
LEAF_NODE	6211:16	6211:16	14	td_stripoffsetbyteallocsize
ASSIGN_OP	6211:44	6211:44	12	=
LEAF_NODE	6211:44	6211:44	13	=
RVAL	6211:46	6211:46	12	nStripArrayAllocNew
FIELD	6211:46	6211:46	13	nStripArrayAllocNew
LEAF_NODE	6211:46	6211:46	14	nStripArrayAllocNew
LEAF_NODE	6211:65	6211:65	10	;
EXPR_STATEMENT	6213:12	6215:93	9	memset ( td -> td_stripoffset_p + nStripArrayAllocBefore , 0xFF , ( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 ) ) ;
EXPR	6213:12	6213:12	10	memset ( td -> td_stripoffset_p + nStripArrayAllocBefore , 0xFF , ( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 ) )
FUNCTION_CALL	6213:12	6215:92	11	memset ( td -> td_stripoffset_p + nStripArrayAllocBefore , 0xFF , ( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 ) )
CALLEE	6213:12	6213:12	12	memset
LEAF_NODE	6213:12	6213:12	13	memset
LEAF_NODE	6213:18	6213:18	12	(
ARGUMENT	6213:19	6213:42	12	td -> td_stripoffset_p + nStripArrayAllocBefore
FIELD	6213:19	6213:23	13	td -> td_stripoffset_p
LEAF_NODE	6213:19	6213:19	14	td
LEAF_NODE	6213:21	6213:21	14	->
LEAF_NODE	6213:23	6213:23	14	td_stripoffset_p
LEAF_NODE	6213:40	6213:40	13	+
FIELD	6213:42	6213:42	13	nStripArrayAllocBefore
LEAF_NODE	6213:42	6213:42	14	nStripArrayAllocBefore
LEAF_NODE	6213:64	6213:64	12	,
ARGUMENT	6214:16	6214:16	12	0xFF
FIELD	6214:16	6214:16	13	0xFF
LEAF_NODE	6214:16	6214:16	14	0xFF
LEAF_NODE	6214:20	6214:20	12	,
ARGUMENT	6215:16	6215:77	12	( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 )
LEAF_NODE	6215:16	6215:16	13	(
FIELD	6215:17	6215:21	13	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6215:17	6215:17	14	td
LEAF_NODE	6215:19	6215:19	14	->
LEAF_NODE	6215:21	6215:21	14	td_stripoffsetbyteallocsize
LEAF_NODE	6215:49	6215:49	13	-
FIELD	6215:51	6215:51	13	nStripArrayAllocBefore
LEAF_NODE	6215:51	6215:51	14	nStripArrayAllocBefore
LEAF_NODE	6215:73	6215:73	13	)
LEAF_NODE	6215:75	6215:75	13	*
FUNCTION_CALL	6215:77	6215:90	13	sizeof ( uint64 )
CALLEE	6215:77	6215:77	14	sizeof
LEAF_NODE	6215:77	6215:77	15	sizeof
LEAF_NODE	6215:83	6215:83	14	(
ARGUMENT	6215:84	6215:84	14	uint64
FIELD	6215:84	6215:84	15	uint64
LEAF_NODE	6215:84	6215:84	16	uint64
LEAF_NODE	6215:90	6215:90	14	)
LEAF_NODE	6215:92	6215:92	12	)
LEAF_NODE	6215:93	6215:93	10	;
EXPR_STATEMENT	6216:12	6218:93	9	memset ( td -> td_stripbytecount_p + nStripArrayAllocBefore , 0xFF , ( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 ) ) ;
EXPR	6216:12	6216:12	10	memset ( td -> td_stripbytecount_p + nStripArrayAllocBefore , 0xFF , ( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 ) )
FUNCTION_CALL	6216:12	6218:92	11	memset ( td -> td_stripbytecount_p + nStripArrayAllocBefore , 0xFF , ( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 ) )
CALLEE	6216:12	6216:12	12	memset
LEAF_NODE	6216:12	6216:12	13	memset
LEAF_NODE	6216:18	6216:18	12	(
ARGUMENT	6216:19	6216:45	12	td -> td_stripbytecount_p + nStripArrayAllocBefore
FIELD	6216:19	6216:23	13	td -> td_stripbytecount_p
LEAF_NODE	6216:19	6216:19	14	td
LEAF_NODE	6216:21	6216:21	14	->
LEAF_NODE	6216:23	6216:23	14	td_stripbytecount_p
LEAF_NODE	6216:43	6216:43	13	+
FIELD	6216:45	6216:45	13	nStripArrayAllocBefore
LEAF_NODE	6216:45	6216:45	14	nStripArrayAllocBefore
LEAF_NODE	6216:67	6216:67	12	,
ARGUMENT	6217:16	6217:16	12	0xFF
FIELD	6217:16	6217:16	13	0xFF
LEAF_NODE	6217:16	6217:16	14	0xFF
LEAF_NODE	6217:20	6217:20	12	,
ARGUMENT	6218:16	6218:77	12	( td -> td_stripoffsetbyteallocsize - nStripArrayAllocBefore ) * sizeof ( uint64 )
LEAF_NODE	6218:16	6218:16	13	(
FIELD	6218:17	6218:21	13	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6218:17	6218:17	14	td
LEAF_NODE	6218:19	6218:19	14	->
LEAF_NODE	6218:21	6218:21	14	td_stripoffsetbyteallocsize
LEAF_NODE	6218:49	6218:49	13	-
FIELD	6218:51	6218:51	13	nStripArrayAllocBefore
LEAF_NODE	6218:51	6218:51	14	nStripArrayAllocBefore
LEAF_NODE	6218:73	6218:73	13	)
LEAF_NODE	6218:75	6218:75	13	*
FUNCTION_CALL	6218:77	6218:90	13	sizeof ( uint64 )
CALLEE	6218:77	6218:77	14	sizeof
LEAF_NODE	6218:77	6218:77	15	sizeof
LEAF_NODE	6218:83	6218:83	14	(
ARGUMENT	6218:84	6218:84	14	uint64
FIELD	6218:84	6218:84	15	uint64
LEAF_NODE	6218:84	6218:84	16	uint64
LEAF_NODE	6218:90	6218:90	14	)
LEAF_NODE	6218:92	6218:92	12	)
LEAF_NODE	6218:93	6218:93	10	;
LEAF_NODE	6219:8	6219:8	8	}
SELECTION	6220:8	6221:8	6	
KEYWORD	6220:8	6220:8	7	else
LEAF_NODE	6220:8	6220:8	8	else
STATEMENTS	6221:8	6229:8	7	
LEAF_NODE	6221:8	6221:8	8	{
STATEMENTS	6222:12	6228:12	8	
EXPR_STATEMENT	6222:12	6223:76	9	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate strip offset and bytecount arrays" ) ;
EXPR	6222:12	6222:12	10	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate strip offset and bytecount arrays" )
FUNCTION_CALL	6222:12	6223:75	11	TIFFErrorExt ( tif -> tif_clientdata , module , "Cannot allocate strip offset and bytecount arrays" )
CALLEE	6222:12	6222:12	12	TIFFErrorExt
LEAF_NODE	6222:12	6222:12	13	TIFFErrorExt
LEAF_NODE	6222:24	6222:24	12	(
ARGUMENT	6222:25	6222:25	12	tif -> tif_clientdata
FIELD	6222:25	6222:30	13	tif -> tif_clientdata
LEAF_NODE	6222:25	6222:25	14	tif
LEAF_NODE	6222:28	6222:28	14	->
LEAF_NODE	6222:30	6222:30	14	tif_clientdata
LEAF_NODE	6222:44	6222:44	12	,
ARGUMENT	6222:46	6222:46	12	module
FIELD	6222:46	6222:46	13	module
LEAF_NODE	6222:46	6222:46	14	module
LEAF_NODE	6222:52	6222:52	12	,
ARGUMENT	6223:24	6223:24	12	"Cannot allocate strip offset and bytecount arrays"
FIELD	6223:24	6223:24	13	"Cannot allocate strip offset and bytecount arrays"
LEAF_NODE	6223:24	6223:24	14	"Cannot allocate strip offset and bytecount arrays"
LEAF_NODE	6223:75	6223:75	12	)
LEAF_NODE	6223:76	6223:76	10	;
EXPR_STATEMENT	6224:12	6224:43	9	_TIFFfree ( td -> td_stripoffset_p ) ;
EXPR	6224:12	6224:12	10	_TIFFfree ( td -> td_stripoffset_p )
FUNCTION_CALL	6224:12	6224:42	11	_TIFFfree ( td -> td_stripoffset_p )
CALLEE	6224:12	6224:12	12	_TIFFfree
LEAF_NODE	6224:12	6224:12	13	_TIFFfree
LEAF_NODE	6224:21	6224:21	12	(
ARGUMENT	6224:22	6224:22	12	td -> td_stripoffset_p
FIELD	6224:22	6224:26	13	td -> td_stripoffset_p
LEAF_NODE	6224:22	6224:22	14	td
LEAF_NODE	6224:24	6224:24	14	->
LEAF_NODE	6224:26	6224:26	14	td_stripoffset_p
LEAF_NODE	6224:42	6224:42	12	)
LEAF_NODE	6224:43	6224:43	10	;
EXPR_STATEMENT	6225:12	6225:39	9	td -> td_stripoffset_p = NULL ;
EXPR	6225:12	6225:12	10	td -> td_stripoffset_p = NULL
ASSIGN	6225:12	6225:35	11	td -> td_stripoffset_p = NULL
LVAL	6225:12	6225:12	12	td -> td_stripoffset_p
FIELD	6225:12	6225:16	13	td -> td_stripoffset_p
LEAF_NODE	6225:12	6225:12	14	td
LEAF_NODE	6225:14	6225:14	14	->
LEAF_NODE	6225:16	6225:16	14	td_stripoffset_p
ASSIGN_OP	6225:33	6225:33	12	=
LEAF_NODE	6225:33	6225:33	13	=
RVAL	6225:35	6225:35	12	NULL
FIELD	6225:35	6225:35	13	NULL
LEAF_NODE	6225:35	6225:35	14	NULL
LEAF_NODE	6225:39	6225:39	10	;
EXPR_STATEMENT	6226:12	6226:46	9	_TIFFfree ( td -> td_stripbytecount_p ) ;
EXPR	6226:12	6226:12	10	_TIFFfree ( td -> td_stripbytecount_p )
FUNCTION_CALL	6226:12	6226:45	11	_TIFFfree ( td -> td_stripbytecount_p )
CALLEE	6226:12	6226:12	12	_TIFFfree
LEAF_NODE	6226:12	6226:12	13	_TIFFfree
LEAF_NODE	6226:21	6226:21	12	(
ARGUMENT	6226:22	6226:22	12	td -> td_stripbytecount_p
FIELD	6226:22	6226:26	13	td -> td_stripbytecount_p
LEAF_NODE	6226:22	6226:22	14	td
LEAF_NODE	6226:24	6226:24	14	->
LEAF_NODE	6226:26	6226:26	14	td_stripbytecount_p
LEAF_NODE	6226:45	6226:45	12	)
LEAF_NODE	6226:46	6226:46	10	;
EXPR_STATEMENT	6227:12	6227:42	9	td -> td_stripbytecount_p = NULL ;
EXPR	6227:12	6227:12	10	td -> td_stripbytecount_p = NULL
ASSIGN	6227:12	6227:38	11	td -> td_stripbytecount_p = NULL
LVAL	6227:12	6227:12	12	td -> td_stripbytecount_p
FIELD	6227:12	6227:16	13	td -> td_stripbytecount_p
LEAF_NODE	6227:12	6227:12	14	td
LEAF_NODE	6227:14	6227:14	14	->
LEAF_NODE	6227:16	6227:16	14	td_stripbytecount_p
ASSIGN_OP	6227:36	6227:36	12	=
LEAF_NODE	6227:36	6227:36	13	=
RVAL	6227:38	6227:38	12	NULL
FIELD	6227:38	6227:38	13	NULL
LEAF_NODE	6227:38	6227:38	14	NULL
LEAF_NODE	6227:42	6227:42	10	;
EXPR_STATEMENT	6228:12	6228:47	9	td -> td_stripoffsetbyteallocsize = 0 ;
EXPR	6228:12	6228:12	10	td -> td_stripoffsetbyteallocsize = 0
ASSIGN	6228:12	6228:46	11	td -> td_stripoffsetbyteallocsize = 0
LVAL	6228:12	6228:12	12	td -> td_stripoffsetbyteallocsize
FIELD	6228:12	6228:16	13	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6228:12	6228:12	14	td
LEAF_NODE	6228:14	6228:14	14	->
LEAF_NODE	6228:16	6228:16	14	td_stripoffsetbyteallocsize
ASSIGN_OP	6228:44	6228:44	12	=
LEAF_NODE	6228:44	6228:44	13	=
RVAL	6228:46	6228:46	12	0
FIELD	6228:46	6228:46	13	0
LEAF_NODE	6228:46	6228:46	14	0
LEAF_NODE	6228:47	6228:47	10	;
LEAF_NODE	6229:8	6229:8	8	}
LEAF_NODE	6230:4	6230:4	5	}
SELECTION	6231:4	6232:8	3	
KEYWORD	6231:4	6231:4	4	if
LEAF_NODE	6231:4	6231:4	5	if
LEAF_NODE	6231:6	6231:6	4	(
CONDITION	6231:8	6231:8	4	* parray == NULL || strile >= td -> td_stripoffsetbyteallocsize
EXPR	6231:8	6231:8	5	* parray == NULL || strile >= td -> td_stripoffsetbyteallocsize
OR	6231:8	6231:27	6	* parray == NULL || strile >= td -> td_stripoffsetbyteallocsize
EXPR	6231:8	6231:19	7	* parray == NULL
UNARY_EXPR	6231:8	6231:9	8	* parray
UNARY_OPERATOR	6231:8	6231:8	9	*
LEAF_NODE	6231:8	6231:8	10	*
FIELD	6231:9	6231:9	9	parray
LEAF_NODE	6231:9	6231:9	10	parray
EQ_OPERATOR	6231:16	6231:16	8	==
LEAF_NODE	6231:16	6231:16	9	==
FIELD	6231:19	6231:19	8	NULL
LEAF_NODE	6231:19	6231:19	9	NULL
LEAF_NODE	6231:24	6231:24	7	||
EXPR	6231:27	6231:37	7	strile >= td -> td_stripoffsetbyteallocsize
FIELD	6231:27	6231:27	8	strile
LEAF_NODE	6231:27	6231:27	9	strile
REL_OPERATOR	6231:34	6231:34	8	>=
LEAF_NODE	6231:34	6231:34	9	>=
FIELD	6231:37	6231:41	8	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6231:37	6231:37	9	td
LEAF_NODE	6231:39	6231:39	9	->
LEAF_NODE	6231:41	6231:41	9	td_stripoffsetbyteallocsize
LEAF_NODE	6231:69	6231:69	4	)
STATEMENTS	6232:8	6232:8	4	
JUMP_STATEMENT	6232:8	6232:16	5	return 0 ;
KEYWORD	6232:8	6232:8	6	return
LEAF_NODE	6232:8	6232:8	7	return
DESTINATION	6232:15	6232:15	6	0
EXPR	6232:15	6232:15	7	0
FIELD	6232:15	6232:15	8	0
LEAF_NODE	6232:15	6232:15	9	0
LEAF_NODE	6232:16	6232:16	6	;
SELECTION	6234:4	6235:4	3	
KEYWORD	6234:4	6234:4	4	if
LEAF_NODE	6234:4	6234:4	5	if
LEAF_NODE	6234:6	6234:6	4	(
CONDITION	6234:8	6234:8	4	~ ( ( * parray ) [ strile ] ) == 0
EXPR	6234:8	6234:32	5	~ ( ( * parray ) [ strile ] ) == 0
UNARY_EXPR	6234:8	6234:27	6	~ ( ( * parray ) [ strile ] )
UNARY_OPERATOR	6234:8	6234:8	7	~
LEAF_NODE	6234:8	6234:8	8	~
LEAF_NODE	6234:9	6234:9	7	(
LEAF_NODE	6234:10	6234:10	7	(
UNARY_EXPR	6234:11	6234:12	7	* parray
UNARY_OPERATOR	6234:11	6234:11	8	*
LEAF_NODE	6234:11	6234:11	9	*
FIELD	6234:12	6234:12	8	parray
LEAF_NODE	6234:12	6234:12	9	parray
LEAF_NODE	6234:18	6234:18	7	)
LEAF_NODE	6234:19	6234:19	7	[
EXPR	6234:20	6234:20	7	strile
FIELD	6234:20	6234:20	8	strile
LEAF_NODE	6234:20	6234:20	9	strile
LEAF_NODE	6234:26	6234:26	7	]
LEAF_NODE	6234:27	6234:27	7	)
EQ_OPERATOR	6234:29	6234:29	6	==
LEAF_NODE	6234:29	6234:29	7	==
FIELD	6234:32	6234:32	6	0
LEAF_NODE	6234:32	6234:32	7	0
LEAF_NODE	6234:34	6234:34	4	)
STATEMENTS	6235:4	6241:4	4	
LEAF_NODE	6235:4	6235:4	5	{
STATEMENTS	6236:8	6236:8	5	
SELECTION	6236:8	6237:8	6	
KEYWORD	6236:8	6236:8	7	if
LEAF_NODE	6236:8	6236:8	8	if
LEAF_NODE	6236:10	6236:10	7	(
CONDITION	6236:12	6236:12	7	! _TIFFPartialReadStripArray ( tif , dirent , strile , * parray )
EXPR	6236:12	6236:12	8	! _TIFFPartialReadStripArray ( tif , dirent , strile , * parray )
UNARY_EXPR	6236:12	6236:13	9	! _TIFFPartialReadStripArray ( tif , dirent , strile , * parray )
UNARY_OPERATOR	6236:12	6236:12	10	!
LEAF_NODE	6236:12	6236:12	11	!
FUNCTION_CALL	6236:13	6236:70	10	_TIFFPartialReadStripArray ( tif , dirent , strile , * parray )
CALLEE	6236:13	6236:13	11	_TIFFPartialReadStripArray
LEAF_NODE	6236:13	6236:13	12	_TIFFPartialReadStripArray
LEAF_NODE	6236:39	6236:39	11	(
ARGUMENT	6236:41	6236:41	11	tif
FIELD	6236:41	6236:41	12	tif
LEAF_NODE	6236:41	6236:41	13	tif
LEAF_NODE	6236:44	6236:44	11	,
ARGUMENT	6236:46	6236:46	11	dirent
FIELD	6236:46	6236:46	12	dirent
LEAF_NODE	6236:46	6236:46	13	dirent
LEAF_NODE	6236:52	6236:52	11	,
ARGUMENT	6236:54	6236:54	11	strile
FIELD	6236:54	6236:54	12	strile
LEAF_NODE	6236:54	6236:54	13	strile
LEAF_NODE	6236:60	6236:60	11	,
ARGUMENT	6236:62	6236:62	11	* parray
UNARY_EXPR	6236:62	6236:63	12	* parray
UNARY_OPERATOR	6236:62	6236:62	13	*
LEAF_NODE	6236:62	6236:62	14	*
FIELD	6236:63	6236:63	13	parray
LEAF_NODE	6236:63	6236:63	14	parray
LEAF_NODE	6236:70	6236:70	11	)
LEAF_NODE	6236:72	6236:72	7	)
STATEMENTS	6237:8	6240:8	7	
LEAF_NODE	6237:8	6237:8	8	{
STATEMENTS	6238:12	6239:12	8	
EXPR_STATEMENT	6238:12	6238:33	9	( * parray ) [ strile ] = 0 ;
EXPR	6238:12	6238:12	10	( * parray ) [ strile ] = 0
ASSIGN	6238:12	6238:32	11	( * parray ) [ strile ] = 0
LVAL	6238:12	6238:28	12	( * parray ) [ strile ]
LEAF_NODE	6238:12	6238:12	13	(
UNARY_EXPR	6238:13	6238:14	13	* parray
UNARY_OPERATOR	6238:13	6238:13	14	*
LEAF_NODE	6238:13	6238:13	15	*
FIELD	6238:14	6238:14	14	parray
LEAF_NODE	6238:14	6238:14	15	parray
LEAF_NODE	6238:20	6238:20	13	)
LEAF_NODE	6238:21	6238:21	13	[
EXPR	6238:22	6238:22	13	strile
FIELD	6238:22	6238:22	14	strile
LEAF_NODE	6238:22	6238:22	15	strile
LEAF_NODE	6238:28	6238:28	13	]
ASSIGN_OP	6238:30	6238:30	12	=
LEAF_NODE	6238:30	6238:30	13	=
RVAL	6238:32	6238:32	12	0
FIELD	6238:32	6238:32	13	0
LEAF_NODE	6238:32	6238:32	14	0
LEAF_NODE	6238:33	6238:33	10	;
JUMP_STATEMENT	6239:12	6239:20	9	return 0 ;
KEYWORD	6239:12	6239:12	10	return
LEAF_NODE	6239:12	6239:12	11	return
DESTINATION	6239:19	6239:19	10	0
EXPR	6239:19	6239:19	11	0
FIELD	6239:19	6239:19	12	0
LEAF_NODE	6239:19	6239:19	13	0
LEAF_NODE	6239:20	6239:20	10	;
LEAF_NODE	6240:8	6240:8	8	}
LEAF_NODE	6241:4	6241:4	5	}
JUMP_STATEMENT	6243:4	6243:12	3	return 1 ;
KEYWORD	6243:4	6243:4	4	return
LEAF_NODE	6243:4	6243:4	5	return
DESTINATION	6243:11	6243:11	4	1
EXPR	6243:11	6243:11	5	1
FIELD	6243:11	6243:11	6	1
LEAF_NODE	6243:11	6243:11	7	1
LEAF_NODE	6243:12	6243:12	4	;
LEAF_NODE	6244:0	6244:0	2	}
FUNCTION_DEF	6246:0	6287:0	1	
RETURN_TYPE	6246:0	6246:7	2	static uint64
LEAF_NODE	6246:0	6246:0	3	static
TYPE_NAME	6246:7	6246:7	3	uint64
LEAF_NODE	6246:7	6246:7	4	uint64
FUNCTION_NAME	6246:14	6246:14	2	_TIFFGetStrileOffsetOrByteCountValue
LEAF_NODE	6246:14	6246:14	3	_TIFFGetStrileOffsetOrByteCountValue
PARAMETER_LIST	6246:50	6249:61	2	( TIFF * tif , uint32 strile , TIFFDirEntry * dirent , uint64 * * parray , int * pbErr )
LEAF_NODE	6246:50	6246:50	3	(
PARAMETER_DECL	6246:51	6246:57	3	TIFF * tif
TYPE	6246:51	6246:56	4	TIFF *
TYPE_NAME	6246:51	6246:51	5	TIFF
LEAF_NODE	6246:51	6246:51	6	TIFF
POINTER	6246:56	6246:56	5	*
LEAF_NODE	6246:56	6246:56	6	*
NAME	6246:57	6246:57	4	tif
LEAF_NODE	6246:57	6246:57	5	tif
LEAF_NODE	6246:60	6246:60	3	,
PARAMETER_DECL	6246:62	6246:69	3	uint32 strile
TYPE	6246:62	6246:62	4	uint32
TYPE_NAME	6246:62	6246:62	5	uint32
LEAF_NODE	6246:62	6246:62	6	uint32
NAME	6246:69	6246:69	4	strile
LEAF_NODE	6246:69	6246:69	5	strile
LEAF_NODE	6246:75	6246:75	3	,
PARAMETER_DECL	6247:51	6247:65	3	TIFFDirEntry * dirent
TYPE	6247:51	6247:63	4	TIFFDirEntry *
TYPE_NAME	6247:51	6247:51	5	TIFFDirEntry
LEAF_NODE	6247:51	6247:51	6	TIFFDirEntry
POINTER	6247:63	6247:63	5	*
LEAF_NODE	6247:63	6247:63	6	*
NAME	6247:65	6247:65	4	dirent
LEAF_NODE	6247:65	6247:65	5	dirent
LEAF_NODE	6247:71	6247:71	3	,
PARAMETER_DECL	6248:51	6248:60	3	uint64 * * parray
TYPE	6248:51	6248:57	4	uint64 * *
TYPE_NAME	6248:51	6248:51	5	uint64
LEAF_NODE	6248:51	6248:51	6	uint64
POINTER	6248:57	6248:58	5	* *
LEAF_NODE	6248:57	6248:57	6	*
LEAF_NODE	6248:58	6248:58	6	*
NAME	6248:60	6248:60	4	parray
LEAF_NODE	6248:60	6248:60	5	parray
LEAF_NODE	6248:66	6248:66	3	,
PARAMETER_DECL	6249:51	6249:56	3	int * pbErr
TYPE	6249:51	6249:55	4	int *
TYPE_NAME	6249:51	6249:51	5	int
LEAF_NODE	6249:51	6249:51	6	int
POINTER	6249:55	6249:55	5	*
LEAF_NODE	6249:55	6249:55	6	*
NAME	6249:56	6249:56	4	pbErr
LEAF_NODE	6249:56	6249:56	5	pbErr
LEAF_NODE	6249:61	6249:61	3	)
LEAF_NODE	6250:0	6250:0	2	{
STATEMENTS	6251:4	6286:4	2	
SIMPLE_DECL	6251:4	6251:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	6251:4	6251:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	6251:4	6251:18	5	TIFFDirectory *
TYPE_NAME	6251:4	6251:4	6	TIFFDirectory
LEAF_NODE	6251:4	6251:4	7	TIFFDirectory
POINTER	6251:18	6251:18	6	*
LEAF_NODE	6251:18	6251:18	7	*
NAME	6251:19	6251:19	5	td
LEAF_NODE	6251:19	6251:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	6251:19	6251:19	5	td = & tif -> tif_dir
ASSIGN	6251:19	6251:24	6	td = & tif -> tif_dir
LVAL	6251:19	6251:19	7	td
NAME	6251:19	6251:19	8	td
LEAF_NODE	6251:19	6251:19	9	td
ASSIGN_OP	6251:22	6251:22	7	=
LEAF_NODE	6251:22	6251:22	8	=
RVAL	6251:24	6251:24	7	& tif -> tif_dir
UNARY_EXPR	6251:24	6251:25	8	& tif -> tif_dir
UNARY_OPERATOR	6251:24	6251:24	9	&
LEAF_NODE	6251:24	6251:24	10	&
FIELD	6251:25	6251:30	9	tif -> tif_dir
LEAF_NODE	6251:25	6251:25	10	tif
LEAF_NODE	6251:28	6251:28	10	->
LEAF_NODE	6251:30	6251:30	10	tif_dir
LEAF_NODE	6251:37	6251:37	4	;
SELECTION	6252:4	6253:8	3	
KEYWORD	6252:4	6252:4	4	if
LEAF_NODE	6252:4	6252:4	5	if
LEAF_NODE	6252:6	6252:6	4	(
CONDITION	6252:8	6252:8	4	pbErr
EXPR	6252:8	6252:8	5	pbErr
FIELD	6252:8	6252:8	6	pbErr
LEAF_NODE	6252:8	6252:8	7	pbErr
LEAF_NODE	6252:14	6252:14	4	)
STATEMENTS	6253:8	6253:8	4	
EXPR_STATEMENT	6253:8	6253:18	5	* pbErr = 0 ;
EXPR	6253:8	6253:8	6	* pbErr = 0
ASSIGN	6253:8	6253:17	7	* pbErr = 0
LVAL	6253:8	6253:8	8	* pbErr
UNARY_EXPR	6253:8	6253:9	9	* pbErr
UNARY_OPERATOR	6253:8	6253:8	10	*
LEAF_NODE	6253:8	6253:8	11	*
FIELD	6253:9	6253:9	10	pbErr
LEAF_NODE	6253:9	6253:9	11	pbErr
ASSIGN_OP	6253:15	6253:15	8	=
LEAF_NODE	6253:15	6253:15	9	=
RVAL	6253:17	6253:17	8	0
FIELD	6253:17	6253:17	9	0
LEAF_NODE	6253:17	6253:17	10	0
LEAF_NODE	6253:18	6253:18	6	;
SELECTION	6254:4	6255:4	3	
KEYWORD	6254:4	6254:4	4	if
LEAF_NODE	6254:4	6254:4	5	if
LEAF_NODE	6254:6	6254:6	4	(
CONDITION	6254:8	6254:8	4	( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && ! ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS )
EXPR	6254:8	6254:8	5	( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && ! ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS )
AND	6254:8	6254:49	6	( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) && ! ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS )
EXPR	6254:8	6254:44	7	( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
LEAF_NODE	6254:8	6254:8	8	(
FIELD	6254:9	6254:14	8	tif -> tif_flags
LEAF_NODE	6254:9	6254:9	9	tif
LEAF_NODE	6254:12	6254:12	9	->
LEAF_NODE	6254:14	6254:14	9	tif_flags
LEAF_NODE	6254:23	6254:23	8	&
FIELD	6254:24	6254:24	8	TIFF_DEFERSTRILELOAD
LEAF_NODE	6254:24	6254:24	9	TIFF_DEFERSTRILELOAD
LEAF_NODE	6254:44	6254:44	8	)
LEAF_NODE	6254:46	6254:46	7	&&
EXPR	6254:49	6254:49	7	! ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS )
UNARY_EXPR	6254:49	6254:86	8	! ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS )
UNARY_OPERATOR	6254:49	6254:49	9	!
LEAF_NODE	6254:49	6254:49	10	!
LEAF_NODE	6254:50	6254:50	9	(
FIELD	6254:51	6254:56	9	tif -> tif_flags
LEAF_NODE	6254:51	6254:51	10	tif
LEAF_NODE	6254:54	6254:54	10	->
LEAF_NODE	6254:56	6254:56	10	tif_flags
LEAF_NODE	6254:65	6254:65	9	&
FIELD	6254:66	6254:66	9	TIFF_CHOPPEDUPARRAYS
LEAF_NODE	6254:66	6254:66	10	TIFF_CHOPPEDUPARRAYS
LEAF_NODE	6254:86	6254:86	9	)
LEAF_NODE	6254:88	6254:88	4	)
STATEMENTS	6255:4	6279:4	4	
LEAF_NODE	6255:4	6255:4	5	{
STATEMENTS	6256:8	6270:8	5	
SELECTION	6256:8	6260:8	6	
KEYWORD	6256:8	6256:8	7	if
LEAF_NODE	6256:8	6256:8	8	if
LEAF_NODE	6256:10	6256:10	7	(
CONDITION	6256:12	6256:12	7	! ( tif -> tif_flags & TIFF_LAZYSTRILELOAD ) || dirent -> tdir_count <= 4
EXPR	6256:12	6256:12	8	! ( tif -> tif_flags & TIFF_LAZYSTRILELOAD ) || dirent -> tdir_count <= 4
OR	6256:12	6259:12	9	! ( tif -> tif_flags & TIFF_LAZYSTRILELOAD ) || dirent -> tdir_count <= 4
EXPR	6256:12	6256:12	10	! ( tif -> tif_flags & TIFF_LAZYSTRILELOAD )
UNARY_EXPR	6256:12	6256:48	11	! ( tif -> tif_flags & TIFF_LAZYSTRILELOAD )
UNARY_OPERATOR	6256:12	6256:12	12	!
LEAF_NODE	6256:12	6256:12	13	!
LEAF_NODE	6256:13	6256:13	12	(
FIELD	6256:14	6256:19	12	tif -> tif_flags
LEAF_NODE	6256:14	6256:14	13	tif
LEAF_NODE	6256:17	6256:17	13	->
LEAF_NODE	6256:19	6256:19	13	tif_flags
LEAF_NODE	6256:28	6256:28	12	&
FIELD	6256:29	6256:29	12	TIFF_LAZYSTRILELOAD
LEAF_NODE	6256:29	6256:29	13	TIFF_LAZYSTRILELOAD
LEAF_NODE	6256:48	6256:48	12	)
LEAF_NODE	6256:50	6256:50	10	||
EXPR	6259:12	6259:34	10	dirent -> tdir_count <= 4
FIELD	6259:12	6259:20	11	dirent -> tdir_count
LEAF_NODE	6259:12	6259:12	12	dirent
LEAF_NODE	6259:18	6259:18	12	->
LEAF_NODE	6259:20	6259:20	12	tdir_count
REL_OPERATOR	6259:31	6259:31	11	<=
LEAF_NODE	6259:31	6259:31	12	<=
FIELD	6259:34	6259:34	11	4
LEAF_NODE	6259:34	6259:34	12	4
LEAF_NODE	6259:36	6259:36	7	)
STATEMENTS	6260:8	6269:8	7	
LEAF_NODE	6260:8	6260:8	8	{
STATEMENTS	6261:12	6261:12	8	
SELECTION	6261:12	6262:12	9	
KEYWORD	6261:12	6261:12	10	if
LEAF_NODE	6261:12	6261:12	11	if
LEAF_NODE	6261:14	6261:14	10	(
CONDITION	6261:16	6261:16	10	! _TIFFFillStriles ( tif )
EXPR	6261:16	6261:16	11	! _TIFFFillStriles ( tif )
UNARY_EXPR	6261:16	6261:17	12	! _TIFFFillStriles ( tif )
UNARY_OPERATOR	6261:16	6261:16	13	!
LEAF_NODE	6261:16	6261:16	14	!
FUNCTION_CALL	6261:17	6261:37	13	_TIFFFillStriles ( tif )
CALLEE	6261:17	6261:17	14	_TIFFFillStriles
LEAF_NODE	6261:17	6261:17	15	_TIFFFillStriles
LEAF_NODE	6261:33	6261:33	14	(
ARGUMENT	6261:34	6261:34	14	tif
FIELD	6261:34	6261:34	15	tif
LEAF_NODE	6261:34	6261:34	16	tif
LEAF_NODE	6261:37	6261:37	14	)
LEAF_NODE	6261:39	6261:39	10	)
STATEMENTS	6262:12	6268:12	10	
LEAF_NODE	6262:12	6262:12	11	{
STATEMENTS	6263:16	6263:16	11	
SELECTION	6263:16	6264:20	12	
KEYWORD	6263:16	6263:16	13	if
LEAF_NODE	6263:16	6263:16	14	if
LEAF_NODE	6263:18	6263:18	13	(
CONDITION	6263:20	6263:20	13	pbErr
EXPR	6263:20	6263:20	14	pbErr
FIELD	6263:20	6263:20	15	pbErr
LEAF_NODE	6263:20	6263:20	16	pbErr
LEAF_NODE	6263:26	6263:26	13	)
STATEMENTS	6264:20	6264:20	13	
EXPR_STATEMENT	6264:20	6264:30	14	* pbErr = 1 ;
EXPR	6264:20	6264:20	15	* pbErr = 1
ASSIGN	6264:20	6264:29	16	* pbErr = 1
LVAL	6264:20	6264:20	17	* pbErr
UNARY_EXPR	6264:20	6264:21	18	* pbErr
UNARY_OPERATOR	6264:20	6264:20	19	*
LEAF_NODE	6264:20	6264:20	20	*
FIELD	6264:21	6264:21	19	pbErr
LEAF_NODE	6264:21	6264:21	20	pbErr
ASSIGN_OP	6264:27	6264:27	17	=
LEAF_NODE	6264:27	6264:27	18	=
RVAL	6264:29	6264:29	17	1
FIELD	6264:29	6264:29	18	1
LEAF_NODE	6264:29	6264:29	19	1
LEAF_NODE	6264:30	6264:30	15	;
LEAF_NODE	6268:12	6268:12	11	}
LEAF_NODE	6269:8	6269:8	8	}
SELECTION	6270:8	6271:8	6	
KEYWORD	6270:8	6270:8	7	else
LEAF_NODE	6270:8	6270:8	8	else
STATEMENTS	6271:8	6278:8	7	
LEAF_NODE	6271:8	6271:8	8	{
STATEMENTS	6272:13	6272:13	8	
SELECTION	6272:13	6273:13	9	
KEYWORD	6272:13	6272:13	10	if
LEAF_NODE	6272:13	6272:13	11	if
LEAF_NODE	6272:15	6272:15	10	(
CONDITION	6272:17	6272:17	10	! _TIFFFetchStrileValue ( tif , strile , dirent , parray )
EXPR	6272:17	6272:17	11	! _TIFFFetchStrileValue ( tif , strile , dirent , parray )
UNARY_EXPR	6272:17	6272:18	12	! _TIFFFetchStrileValue ( tif , strile , dirent , parray )
UNARY_OPERATOR	6272:17	6272:17	13	!
LEAF_NODE	6272:17	6272:17	14	!
FUNCTION_CALL	6272:18	6272:67	13	_TIFFFetchStrileValue ( tif , strile , dirent , parray )
CALLEE	6272:18	6272:18	14	_TIFFFetchStrileValue
LEAF_NODE	6272:18	6272:18	15	_TIFFFetchStrileValue
LEAF_NODE	6272:39	6272:39	14	(
ARGUMENT	6272:40	6272:40	14	tif
FIELD	6272:40	6272:40	15	tif
LEAF_NODE	6272:40	6272:40	16	tif
LEAF_NODE	6272:43	6272:43	14	,
ARGUMENT	6272:45	6272:45	14	strile
FIELD	6272:45	6272:45	15	strile
LEAF_NODE	6272:45	6272:45	16	strile
LEAF_NODE	6272:51	6272:51	14	,
ARGUMENT	6272:53	6272:53	14	dirent
FIELD	6272:53	6272:53	15	dirent
LEAF_NODE	6272:53	6272:53	16	dirent
LEAF_NODE	6272:59	6272:59	14	,
ARGUMENT	6272:61	6272:61	14	parray
FIELD	6272:61	6272:61	15	parray
LEAF_NODE	6272:61	6272:61	16	parray
LEAF_NODE	6272:67	6272:67	14	)
LEAF_NODE	6272:69	6272:69	10	)
STATEMENTS	6273:13	6277:13	10	
LEAF_NODE	6273:13	6273:13	11	{
STATEMENTS	6274:16	6276:17	11	
SELECTION	6274:16	6275:20	12	
KEYWORD	6274:16	6274:16	13	if
LEAF_NODE	6274:16	6274:16	14	if
LEAF_NODE	6274:18	6274:18	13	(
CONDITION	6274:20	6274:20	13	pbErr
EXPR	6274:20	6274:20	14	pbErr
FIELD	6274:20	6274:20	15	pbErr
LEAF_NODE	6274:20	6274:20	16	pbErr
LEAF_NODE	6274:26	6274:26	13	)
STATEMENTS	6275:20	6275:20	13	
EXPR_STATEMENT	6275:20	6275:30	14	* pbErr = 1 ;
EXPR	6275:20	6275:20	15	* pbErr = 1
ASSIGN	6275:20	6275:29	16	* pbErr = 1
LVAL	6275:20	6275:20	17	* pbErr
UNARY_EXPR	6275:20	6275:21	18	* pbErr
UNARY_OPERATOR	6275:20	6275:20	19	*
LEAF_NODE	6275:20	6275:20	20	*
FIELD	6275:21	6275:21	19	pbErr
LEAF_NODE	6275:21	6275:21	20	pbErr
ASSIGN_OP	6275:27	6275:27	17	=
LEAF_NODE	6275:27	6275:27	18	=
RVAL	6275:29	6275:29	17	1
FIELD	6275:29	6275:29	18	1
LEAF_NODE	6275:29	6275:29	19	1
LEAF_NODE	6275:30	6275:30	15	;
JUMP_STATEMENT	6276:17	6276:25	12	return 0 ;
KEYWORD	6276:17	6276:17	13	return
LEAF_NODE	6276:17	6276:17	14	return
DESTINATION	6276:24	6276:24	13	0
EXPR	6276:24	6276:24	14	0
FIELD	6276:24	6276:24	15	0
LEAF_NODE	6276:24	6276:24	16	0
LEAF_NODE	6276:25	6276:25	13	;
LEAF_NODE	6277:13	6277:13	11	}
LEAF_NODE	6278:8	6278:8	8	}
LEAF_NODE	6279:4	6279:4	5	}
SELECTION	6280:4	6281:4	3	
KEYWORD	6280:4	6280:4	4	if
LEAF_NODE	6280:4	6280:4	5	if
LEAF_NODE	6280:6	6280:6	4	(
CONDITION	6280:8	6280:8	4	* parray == NULL || strile >= td -> td_nstrips
EXPR	6280:8	6280:8	5	* parray == NULL || strile >= td -> td_nstrips
OR	6280:8	6280:27	6	* parray == NULL || strile >= td -> td_nstrips
EXPR	6280:8	6280:19	7	* parray == NULL
UNARY_EXPR	6280:8	6280:9	8	* parray
UNARY_OPERATOR	6280:8	6280:8	9	*
LEAF_NODE	6280:8	6280:8	10	*
FIELD	6280:9	6280:9	9	parray
LEAF_NODE	6280:9	6280:9	10	parray
EQ_OPERATOR	6280:16	6280:16	8	==
LEAF_NODE	6280:16	6280:16	9	==
FIELD	6280:19	6280:19	8	NULL
LEAF_NODE	6280:19	6280:19	9	NULL
LEAF_NODE	6280:24	6280:24	7	||
EXPR	6280:27	6280:37	7	strile >= td -> td_nstrips
FIELD	6280:27	6280:27	8	strile
LEAF_NODE	6280:27	6280:27	9	strile
REL_OPERATOR	6280:34	6280:34	8	>=
LEAF_NODE	6280:34	6280:34	9	>=
FIELD	6280:37	6280:41	8	td -> td_nstrips
LEAF_NODE	6280:37	6280:37	9	td
LEAF_NODE	6280:39	6280:39	9	->
LEAF_NODE	6280:41	6280:41	9	td_nstrips
LEAF_NODE	6280:52	6280:52	4	)
STATEMENTS	6281:4	6285:4	4	
LEAF_NODE	6281:4	6281:4	5	{
STATEMENTS	6282:8	6284:8	5	
SELECTION	6282:8	6283:12	6	
KEYWORD	6282:8	6282:8	7	if
LEAF_NODE	6282:8	6282:8	8	if
LEAF_NODE	6282:10	6282:10	7	(
CONDITION	6282:12	6282:12	7	pbErr
EXPR	6282:12	6282:12	8	pbErr
FIELD	6282:12	6282:12	9	pbErr
LEAF_NODE	6282:12	6282:12	10	pbErr
LEAF_NODE	6282:18	6282:18	7	)
STATEMENTS	6283:12	6283:12	7	
EXPR_STATEMENT	6283:12	6283:22	8	* pbErr = 1 ;
EXPR	6283:12	6283:12	9	* pbErr = 1
ASSIGN	6283:12	6283:21	10	* pbErr = 1
LVAL	6283:12	6283:12	11	* pbErr
UNARY_EXPR	6283:12	6283:13	12	* pbErr
UNARY_OPERATOR	6283:12	6283:12	13	*
LEAF_NODE	6283:12	6283:12	14	*
FIELD	6283:13	6283:13	13	pbErr
LEAF_NODE	6283:13	6283:13	14	pbErr
ASSIGN_OP	6283:19	6283:19	11	=
LEAF_NODE	6283:19	6283:19	12	=
RVAL	6283:21	6283:21	11	1
FIELD	6283:21	6283:21	12	1
LEAF_NODE	6283:21	6283:21	13	1
LEAF_NODE	6283:22	6283:22	9	;
JUMP_STATEMENT	6284:8	6284:16	6	return 0 ;
KEYWORD	6284:8	6284:8	7	return
LEAF_NODE	6284:8	6284:8	8	return
DESTINATION	6284:15	6284:15	7	0
EXPR	6284:15	6284:15	8	0
FIELD	6284:15	6284:15	9	0
LEAF_NODE	6284:15	6284:15	10	0
LEAF_NODE	6284:16	6284:16	7	;
LEAF_NODE	6285:4	6285:4	5	}
JUMP_STATEMENT	6286:4	6286:28	3	return ( * parray ) [ strile ] ;
KEYWORD	6286:4	6286:4	4	return
LEAF_NODE	6286:4	6286:4	5	return
DESTINATION	6286:11	6286:11	4	( * parray ) [ strile ]
EXPR	6286:11	6286:27	5	( * parray ) [ strile ]
LEAF_NODE	6286:11	6286:11	6	(
UNARY_EXPR	6286:12	6286:13	6	* parray
UNARY_OPERATOR	6286:12	6286:12	7	*
LEAF_NODE	6286:12	6286:12	8	*
FIELD	6286:13	6286:13	7	parray
LEAF_NODE	6286:13	6286:13	8	parray
LEAF_NODE	6286:19	6286:19	6	)
LEAF_NODE	6286:20	6286:20	6	[
EXPR	6286:21	6286:21	6	strile
FIELD	6286:21	6286:21	7	strile
LEAF_NODE	6286:21	6286:21	8	strile
LEAF_NODE	6286:27	6286:27	6	]
LEAF_NODE	6286:28	6286:28	4	;
LEAF_NODE	6287:0	6287:0	2	}
FUNCTION_DEF	6290:0	6293:0	1	
RETURN_TYPE	6290:0	6290:0	2	uint64
TYPE_NAME	6290:0	6290:0	3	uint64
LEAF_NODE	6290:0	6290:0	4	uint64
FUNCTION_NAME	6290:7	6290:7	2	TIFFGetStrileOffset
LEAF_NODE	6290:7	6290:7	3	TIFFGetStrileOffset
PARAMETER_LIST	6290:26	6290:51	2	( TIFF * tif , uint32 strile )
LEAF_NODE	6290:26	6290:26	3	(
PARAMETER_DECL	6290:27	6290:33	3	TIFF * tif
TYPE	6290:27	6290:32	4	TIFF *
TYPE_NAME	6290:27	6290:27	5	TIFF
LEAF_NODE	6290:27	6290:27	6	TIFF
POINTER	6290:32	6290:32	5	*
LEAF_NODE	6290:32	6290:32	6	*
NAME	6290:33	6290:33	4	tif
LEAF_NODE	6290:33	6290:33	5	tif
LEAF_NODE	6290:36	6290:36	3	,
PARAMETER_DECL	6290:38	6290:45	3	uint32 strile
TYPE	6290:38	6290:38	4	uint32
TYPE_NAME	6290:38	6290:38	5	uint32
LEAF_NODE	6290:38	6290:38	6	uint32
NAME	6290:45	6290:45	4	strile
LEAF_NODE	6290:45	6290:45	5	strile
LEAF_NODE	6290:51	6290:51	3	)
LEAF_NODE	6291:0	6291:0	2	{
STATEMENTS	6292:4	6292:4	2	
JUMP_STATEMENT	6292:4	6292:56	3	return TIFFGetStrileOffsetWithErr ( tif , strile , NULL ) ;
KEYWORD	6292:4	6292:4	4	return
LEAF_NODE	6292:4	6292:4	5	return
DESTINATION	6292:11	6292:11	4	TIFFGetStrileOffsetWithErr ( tif , strile , NULL )
EXPR	6292:11	6292:11	5	TIFFGetStrileOffsetWithErr ( tif , strile , NULL )
FUNCTION_CALL	6292:11	6292:55	6	TIFFGetStrileOffsetWithErr ( tif , strile , NULL )
CALLEE	6292:11	6292:11	7	TIFFGetStrileOffsetWithErr
LEAF_NODE	6292:11	6292:11	8	TIFFGetStrileOffsetWithErr
LEAF_NODE	6292:37	6292:37	7	(
ARGUMENT	6292:38	6292:38	7	tif
FIELD	6292:38	6292:38	8	tif
LEAF_NODE	6292:38	6292:38	9	tif
LEAF_NODE	6292:41	6292:41	7	,
ARGUMENT	6292:43	6292:43	7	strile
FIELD	6292:43	6292:43	8	strile
LEAF_NODE	6292:43	6292:43	9	strile
LEAF_NODE	6292:49	6292:49	7	,
ARGUMENT	6292:51	6292:51	7	NULL
FIELD	6292:51	6292:51	8	NULL
LEAF_NODE	6292:51	6292:51	9	NULL
LEAF_NODE	6292:55	6292:55	7	)
LEAF_NODE	6292:56	6292:56	4	;
LEAF_NODE	6293:0	6293:0	2	}
FUNCTION_DEF	6296:0	6302:0	1	
RETURN_TYPE	6296:0	6296:0	2	uint64
TYPE_NAME	6296:0	6296:0	3	uint64
LEAF_NODE	6296:0	6296:0	4	uint64
FUNCTION_NAME	6296:7	6296:7	2	TIFFGetStrileOffsetWithErr
LEAF_NODE	6296:7	6296:7	3	TIFFGetStrileOffsetWithErr
PARAMETER_LIST	6296:33	6296:70	2	( TIFF * tif , uint32 strile , int * pbErr )
LEAF_NODE	6296:33	6296:33	3	(
PARAMETER_DECL	6296:34	6296:40	3	TIFF * tif
TYPE	6296:34	6296:39	4	TIFF *
TYPE_NAME	6296:34	6296:34	5	TIFF
LEAF_NODE	6296:34	6296:34	6	TIFF
POINTER	6296:39	6296:39	5	*
LEAF_NODE	6296:39	6296:39	6	*
NAME	6296:40	6296:40	4	tif
LEAF_NODE	6296:40	6296:40	5	tif
LEAF_NODE	6296:43	6296:43	3	,
PARAMETER_DECL	6296:45	6296:52	3	uint32 strile
TYPE	6296:45	6296:45	4	uint32
TYPE_NAME	6296:45	6296:45	5	uint32
LEAF_NODE	6296:45	6296:45	6	uint32
NAME	6296:52	6296:52	4	strile
LEAF_NODE	6296:52	6296:52	5	strile
LEAF_NODE	6296:58	6296:58	3	,
PARAMETER_DECL	6296:60	6296:65	3	int * pbErr
TYPE	6296:60	6296:64	4	int *
TYPE_NAME	6296:60	6296:60	5	int
LEAF_NODE	6296:60	6296:60	6	int
POINTER	6296:64	6296:64	5	*
LEAF_NODE	6296:64	6296:64	6	*
NAME	6296:65	6296:65	4	pbErr
LEAF_NODE	6296:65	6296:65	5	pbErr
LEAF_NODE	6296:70	6296:70	3	)
LEAF_NODE	6297:0	6297:0	2	{
STATEMENTS	6298:4	6299:4	2	
SIMPLE_DECL	6298:4	6298:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	6298:4	6298:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	6298:4	6298:18	5	TIFFDirectory *
TYPE_NAME	6298:4	6298:4	6	TIFFDirectory
LEAF_NODE	6298:4	6298:4	7	TIFFDirectory
POINTER	6298:18	6298:18	6	*
LEAF_NODE	6298:18	6298:18	7	*
NAME	6298:19	6298:19	5	td
LEAF_NODE	6298:19	6298:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	6298:19	6298:19	5	td = & tif -> tif_dir
ASSIGN	6298:19	6298:24	6	td = & tif -> tif_dir
LVAL	6298:19	6298:19	7	td
NAME	6298:19	6298:19	8	td
LEAF_NODE	6298:19	6298:19	9	td
ASSIGN_OP	6298:22	6298:22	7	=
LEAF_NODE	6298:22	6298:22	8	=
RVAL	6298:24	6298:24	7	& tif -> tif_dir
UNARY_EXPR	6298:24	6298:25	8	& tif -> tif_dir
UNARY_OPERATOR	6298:24	6298:24	9	&
LEAF_NODE	6298:24	6298:24	10	&
FIELD	6298:25	6298:30	9	tif -> tif_dir
LEAF_NODE	6298:25	6298:25	10	tif
LEAF_NODE	6298:28	6298:28	10	->
LEAF_NODE	6298:30	6298:30	10	tif_dir
LEAF_NODE	6298:37	6298:37	4	;
JUMP_STATEMENT	6299:4	6301:62	3	return _TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripoffset_entry ) , & ( td -> td_stripoffset_p ) , pbErr ) ;
KEYWORD	6299:4	6299:4	4	return
LEAF_NODE	6299:4	6299:4	5	return
DESTINATION	6299:11	6299:11	4	_TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripoffset_entry ) , & ( td -> td_stripoffset_p ) , pbErr )
EXPR	6299:11	6299:11	5	_TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripoffset_entry ) , & ( td -> td_stripoffset_p ) , pbErr )
FUNCTION_CALL	6299:11	6301:61	6	_TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripoffset_entry ) , & ( td -> td_stripoffset_p ) , pbErr )
CALLEE	6299:11	6299:11	7	_TIFFGetStrileOffsetOrByteCountValue
LEAF_NODE	6299:11	6299:11	8	_TIFFGetStrileOffsetOrByteCountValue
LEAF_NODE	6299:47	6299:47	7	(
ARGUMENT	6299:48	6299:48	7	tif
FIELD	6299:48	6299:48	8	tif
LEAF_NODE	6299:48	6299:48	9	tif
LEAF_NODE	6299:51	6299:51	7	,
ARGUMENT	6299:53	6299:53	7	strile
FIELD	6299:53	6299:53	8	strile
LEAF_NODE	6299:53	6299:53	9	strile
LEAF_NODE	6299:59	6299:59	7	,
ARGUMENT	6300:31	6300:31	7	& ( td -> td_stripoffset_entry )
UNARY_EXPR	6300:31	6300:57	8	& ( td -> td_stripoffset_entry )
UNARY_OPERATOR	6300:31	6300:31	9	&
LEAF_NODE	6300:31	6300:31	10	&
LEAF_NODE	6300:32	6300:32	9	(
FIELD	6300:33	6300:37	9	td -> td_stripoffset_entry
LEAF_NODE	6300:33	6300:33	10	td
LEAF_NODE	6300:35	6300:35	10	->
LEAF_NODE	6300:37	6300:37	10	td_stripoffset_entry
LEAF_NODE	6300:57	6300:57	9	)
LEAF_NODE	6300:58	6300:58	7	,
ARGUMENT	6301:31	6301:31	7	& ( td -> td_stripoffset_p )
UNARY_EXPR	6301:31	6301:53	8	& ( td -> td_stripoffset_p )
UNARY_OPERATOR	6301:31	6301:31	9	&
LEAF_NODE	6301:31	6301:31	10	&
LEAF_NODE	6301:32	6301:32	9	(
FIELD	6301:33	6301:37	9	td -> td_stripoffset_p
LEAF_NODE	6301:33	6301:33	10	td
LEAF_NODE	6301:35	6301:35	10	->
LEAF_NODE	6301:37	6301:37	10	td_stripoffset_p
LEAF_NODE	6301:53	6301:53	9	)
LEAF_NODE	6301:54	6301:54	7	,
ARGUMENT	6301:56	6301:56	7	pbErr
FIELD	6301:56	6301:56	8	pbErr
LEAF_NODE	6301:56	6301:56	9	pbErr
LEAF_NODE	6301:61	6301:61	7	)
LEAF_NODE	6301:62	6301:62	4	;
LEAF_NODE	6302:0	6302:0	2	}
FUNCTION_DEF	6305:0	6308:0	1	
RETURN_TYPE	6305:0	6305:0	2	uint64
TYPE_NAME	6305:0	6305:0	3	uint64
LEAF_NODE	6305:0	6305:0	4	uint64
FUNCTION_NAME	6305:7	6305:7	2	TIFFGetStrileByteCount
LEAF_NODE	6305:7	6305:7	3	TIFFGetStrileByteCount
PARAMETER_LIST	6305:29	6305:54	2	( TIFF * tif , uint32 strile )
LEAF_NODE	6305:29	6305:29	3	(
PARAMETER_DECL	6305:30	6305:36	3	TIFF * tif
TYPE	6305:30	6305:35	4	TIFF *
TYPE_NAME	6305:30	6305:30	5	TIFF
LEAF_NODE	6305:30	6305:30	6	TIFF
POINTER	6305:35	6305:35	5	*
LEAF_NODE	6305:35	6305:35	6	*
NAME	6305:36	6305:36	4	tif
LEAF_NODE	6305:36	6305:36	5	tif
LEAF_NODE	6305:39	6305:39	3	,
PARAMETER_DECL	6305:41	6305:48	3	uint32 strile
TYPE	6305:41	6305:41	4	uint32
TYPE_NAME	6305:41	6305:41	5	uint32
LEAF_NODE	6305:41	6305:41	6	uint32
NAME	6305:48	6305:48	4	strile
LEAF_NODE	6305:48	6305:48	5	strile
LEAF_NODE	6305:54	6305:54	3	)
LEAF_NODE	6306:0	6306:0	2	{
STATEMENTS	6307:4	6307:4	2	
JUMP_STATEMENT	6307:4	6307:59	3	return TIFFGetStrileByteCountWithErr ( tif , strile , NULL ) ;
KEYWORD	6307:4	6307:4	4	return
LEAF_NODE	6307:4	6307:4	5	return
DESTINATION	6307:11	6307:11	4	TIFFGetStrileByteCountWithErr ( tif , strile , NULL )
EXPR	6307:11	6307:11	5	TIFFGetStrileByteCountWithErr ( tif , strile , NULL )
FUNCTION_CALL	6307:11	6307:58	6	TIFFGetStrileByteCountWithErr ( tif , strile , NULL )
CALLEE	6307:11	6307:11	7	TIFFGetStrileByteCountWithErr
LEAF_NODE	6307:11	6307:11	8	TIFFGetStrileByteCountWithErr
LEAF_NODE	6307:40	6307:40	7	(
ARGUMENT	6307:41	6307:41	7	tif
FIELD	6307:41	6307:41	8	tif
LEAF_NODE	6307:41	6307:41	9	tif
LEAF_NODE	6307:44	6307:44	7	,
ARGUMENT	6307:46	6307:46	7	strile
FIELD	6307:46	6307:46	8	strile
LEAF_NODE	6307:46	6307:46	9	strile
LEAF_NODE	6307:52	6307:52	7	,
ARGUMENT	6307:54	6307:54	7	NULL
FIELD	6307:54	6307:54	8	NULL
LEAF_NODE	6307:54	6307:54	9	NULL
LEAF_NODE	6307:58	6307:58	7	)
LEAF_NODE	6307:59	6307:59	4	;
LEAF_NODE	6308:0	6308:0	2	}
FUNCTION_DEF	6311:0	6317:0	1	
RETURN_TYPE	6311:0	6311:0	2	uint64
TYPE_NAME	6311:0	6311:0	3	uint64
LEAF_NODE	6311:0	6311:0	4	uint64
FUNCTION_NAME	6311:7	6311:7	2	TIFFGetStrileByteCountWithErr
LEAF_NODE	6311:7	6311:7	3	TIFFGetStrileByteCountWithErr
PARAMETER_LIST	6311:36	6311:73	2	( TIFF * tif , uint32 strile , int * pbErr )
LEAF_NODE	6311:36	6311:36	3	(
PARAMETER_DECL	6311:37	6311:43	3	TIFF * tif
TYPE	6311:37	6311:42	4	TIFF *
TYPE_NAME	6311:37	6311:37	5	TIFF
LEAF_NODE	6311:37	6311:37	6	TIFF
POINTER	6311:42	6311:42	5	*
LEAF_NODE	6311:42	6311:42	6	*
NAME	6311:43	6311:43	4	tif
LEAF_NODE	6311:43	6311:43	5	tif
LEAF_NODE	6311:46	6311:46	3	,
PARAMETER_DECL	6311:48	6311:55	3	uint32 strile
TYPE	6311:48	6311:48	4	uint32
TYPE_NAME	6311:48	6311:48	5	uint32
LEAF_NODE	6311:48	6311:48	6	uint32
NAME	6311:55	6311:55	4	strile
LEAF_NODE	6311:55	6311:55	5	strile
LEAF_NODE	6311:61	6311:61	3	,
PARAMETER_DECL	6311:63	6311:68	3	int * pbErr
TYPE	6311:63	6311:67	4	int *
TYPE_NAME	6311:63	6311:63	5	int
LEAF_NODE	6311:63	6311:63	6	int
POINTER	6311:67	6311:67	5	*
LEAF_NODE	6311:67	6311:67	6	*
NAME	6311:68	6311:68	4	pbErr
LEAF_NODE	6311:68	6311:68	5	pbErr
LEAF_NODE	6311:73	6311:73	3	)
LEAF_NODE	6312:0	6312:0	2	{
STATEMENTS	6313:4	6314:4	2	
SIMPLE_DECL	6313:4	6313:37	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	6313:4	6313:19	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	6313:4	6313:18	5	TIFFDirectory *
TYPE_NAME	6313:4	6313:4	6	TIFFDirectory
LEAF_NODE	6313:4	6313:4	7	TIFFDirectory
POINTER	6313:18	6313:18	6	*
LEAF_NODE	6313:18	6313:18	7	*
NAME	6313:19	6313:19	5	td
LEAF_NODE	6313:19	6313:19	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	6313:19	6313:19	5	td = & tif -> tif_dir
ASSIGN	6313:19	6313:24	6	td = & tif -> tif_dir
LVAL	6313:19	6313:19	7	td
NAME	6313:19	6313:19	8	td
LEAF_NODE	6313:19	6313:19	9	td
ASSIGN_OP	6313:22	6313:22	7	=
LEAF_NODE	6313:22	6313:22	8	=
RVAL	6313:24	6313:24	7	& tif -> tif_dir
UNARY_EXPR	6313:24	6313:25	8	& tif -> tif_dir
UNARY_OPERATOR	6313:24	6313:24	9	&
LEAF_NODE	6313:24	6313:24	10	&
FIELD	6313:25	6313:30	9	tif -> tif_dir
LEAF_NODE	6313:25	6313:25	10	tif
LEAF_NODE	6313:28	6313:28	10	->
LEAF_NODE	6313:30	6313:30	10	tif_dir
LEAF_NODE	6313:37	6313:37	4	;
JUMP_STATEMENT	6314:4	6316:65	3	return _TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripbytecount_entry ) , & ( td -> td_stripbytecount_p ) , pbErr ) ;
KEYWORD	6314:4	6314:4	4	return
LEAF_NODE	6314:4	6314:4	5	return
DESTINATION	6314:11	6314:11	4	_TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripbytecount_entry ) , & ( td -> td_stripbytecount_p ) , pbErr )
EXPR	6314:11	6314:11	5	_TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripbytecount_entry ) , & ( td -> td_stripbytecount_p ) , pbErr )
FUNCTION_CALL	6314:11	6316:64	6	_TIFFGetStrileOffsetOrByteCountValue ( tif , strile , & ( td -> td_stripbytecount_entry ) , & ( td -> td_stripbytecount_p ) , pbErr )
CALLEE	6314:11	6314:11	7	_TIFFGetStrileOffsetOrByteCountValue
LEAF_NODE	6314:11	6314:11	8	_TIFFGetStrileOffsetOrByteCountValue
LEAF_NODE	6314:47	6314:47	7	(
ARGUMENT	6314:48	6314:48	7	tif
FIELD	6314:48	6314:48	8	tif
LEAF_NODE	6314:48	6314:48	9	tif
LEAF_NODE	6314:51	6314:51	7	,
ARGUMENT	6314:53	6314:53	7	strile
FIELD	6314:53	6314:53	8	strile
LEAF_NODE	6314:53	6314:53	9	strile
LEAF_NODE	6314:59	6314:59	7	,
ARGUMENT	6315:31	6315:31	7	& ( td -> td_stripbytecount_entry )
UNARY_EXPR	6315:31	6315:60	8	& ( td -> td_stripbytecount_entry )
UNARY_OPERATOR	6315:31	6315:31	9	&
LEAF_NODE	6315:31	6315:31	10	&
LEAF_NODE	6315:32	6315:32	9	(
FIELD	6315:33	6315:37	9	td -> td_stripbytecount_entry
LEAF_NODE	6315:33	6315:33	10	td
LEAF_NODE	6315:35	6315:35	10	->
LEAF_NODE	6315:37	6315:37	10	td_stripbytecount_entry
LEAF_NODE	6315:60	6315:60	9	)
LEAF_NODE	6315:61	6315:61	7	,
ARGUMENT	6316:31	6316:31	7	& ( td -> td_stripbytecount_p )
UNARY_EXPR	6316:31	6316:56	8	& ( td -> td_stripbytecount_p )
UNARY_OPERATOR	6316:31	6316:31	9	&
LEAF_NODE	6316:31	6316:31	10	&
LEAF_NODE	6316:32	6316:32	9	(
FIELD	6316:33	6316:37	9	td -> td_stripbytecount_p
LEAF_NODE	6316:33	6316:33	10	td
LEAF_NODE	6316:35	6316:35	10	->
LEAF_NODE	6316:37	6316:37	10	td_stripbytecount_p
LEAF_NODE	6316:56	6316:56	9	)
LEAF_NODE	6316:57	6316:57	7	,
ARGUMENT	6316:59	6316:59	7	pbErr
FIELD	6316:59	6316:59	8	pbErr
LEAF_NODE	6316:59	6316:59	9	pbErr
LEAF_NODE	6316:64	6316:64	7	)
LEAF_NODE	6316:65	6316:65	4	;
LEAF_NODE	6317:0	6317:0	2	}
FUNCTION_DEF	6320:0	6323:0	1	
RETURN_TYPE	6320:0	6320:0	2	int
TYPE_NAME	6320:0	6320:0	3	int
LEAF_NODE	6320:0	6320:0	4	int
FUNCTION_NAME	6320:4	6320:4	2	_TIFFFillStriles
LEAF_NODE	6320:4	6320:4	3	_TIFFFillStriles
PARAMETER_LIST	6320:20	6320:32	2	( TIFF * tif )
LEAF_NODE	6320:20	6320:20	3	(
PARAMETER_DECL	6320:22	6320:28	3	TIFF * tif
TYPE	6320:22	6320:27	4	TIFF *
TYPE_NAME	6320:22	6320:22	5	TIFF
LEAF_NODE	6320:22	6320:22	6	TIFF
POINTER	6320:27	6320:27	5	*
LEAF_NODE	6320:27	6320:27	6	*
NAME	6320:28	6320:28	4	tif
LEAF_NODE	6320:28	6320:28	5	tif
LEAF_NODE	6320:32	6320:32	3	)
LEAF_NODE	6321:0	6321:0	2	{
STATEMENTS	6322:4	6322:4	2	
JUMP_STATEMENT	6322:4	6322:45	3	return _TIFFFillStrilesInternal ( tif , 1 ) ;
KEYWORD	6322:4	6322:4	4	return
LEAF_NODE	6322:4	6322:4	5	return
DESTINATION	6322:11	6322:11	4	_TIFFFillStrilesInternal ( tif , 1 )
EXPR	6322:11	6322:11	5	_TIFFFillStrilesInternal ( tif , 1 )
FUNCTION_CALL	6322:11	6322:44	6	_TIFFFillStrilesInternal ( tif , 1 )
CALLEE	6322:11	6322:11	7	_TIFFFillStrilesInternal
LEAF_NODE	6322:11	6322:11	8	_TIFFFillStrilesInternal
LEAF_NODE	6322:35	6322:35	7	(
ARGUMENT	6322:37	6322:37	7	tif
FIELD	6322:37	6322:37	8	tif
LEAF_NODE	6322:37	6322:37	9	tif
LEAF_NODE	6322:40	6322:40	7	,
ARGUMENT	6322:42	6322:42	7	1
FIELD	6322:42	6322:42	8	1
LEAF_NODE	6322:42	6322:42	9	1
LEAF_NODE	6322:44	6322:44	7	)
LEAF_NODE	6322:45	6322:45	4	;
LEAF_NODE	6323:0	6323:0	2	}
FUNCTION_DEF	6325:0	6385:0	1	
RETURN_TYPE	6325:0	6325:7	2	static int
LEAF_NODE	6325:0	6325:0	3	static
TYPE_NAME	6325:7	6325:7	3	int
LEAF_NODE	6325:7	6325:7	4	int
FUNCTION_NAME	6325:11	6325:11	2	_TIFFFillStrilesInternal
LEAF_NODE	6325:11	6325:11	3	_TIFFFillStrilesInternal
PARAMETER_LIST	6325:35	6325:71	2	( TIFF * tif , int loadStripByteCount )
LEAF_NODE	6325:35	6325:35	3	(
PARAMETER_DECL	6325:37	6325:43	3	TIFF * tif
TYPE	6325:37	6325:42	4	TIFF *
TYPE_NAME	6325:37	6325:37	5	TIFF
LEAF_NODE	6325:37	6325:37	6	TIFF
POINTER	6325:42	6325:42	5	*
LEAF_NODE	6325:42	6325:42	6	*
NAME	6325:43	6325:43	4	tif
LEAF_NODE	6325:43	6325:43	5	tif
LEAF_NODE	6325:46	6325:46	3	,
PARAMETER_DECL	6325:48	6325:52	3	int loadStripByteCount
TYPE	6325:48	6325:48	4	int
TYPE_NAME	6325:48	6325:48	5	int
LEAF_NODE	6325:48	6325:48	6	int
NAME	6325:52	6325:52	4	loadStripByteCount
LEAF_NODE	6325:52	6325:52	5	loadStripByteCount
LEAF_NODE	6325:71	6325:71	3	)
LEAF_NODE	6326:0	6326:0	2	{
STATEMENTS	6327:4	6384:4	2	
LEAF_NODE	6327:4	6327:4	3	register
SIMPLE_DECL	6327:13	6327:46	3	TIFFDirectory * td ; td = & tif -> tif_dir ;
VAR_DECL	6327:13	6327:28	4	TIFFDirectory * td ; td = & tif -> tif_dir
TYPE	6327:13	6327:27	5	TIFFDirectory *
TYPE_NAME	6327:13	6327:13	6	TIFFDirectory
LEAF_NODE	6327:13	6327:13	7	TIFFDirectory
POINTER	6327:27	6327:27	6	*
LEAF_NODE	6327:27	6327:27	7	*
NAME	6327:28	6327:28	5	td
LEAF_NODE	6327:28	6327:28	6	td
LEAF_NODE	0:0	0:0	5	;
INIT	6327:28	6327:28	5	td = & tif -> tif_dir
ASSIGN	6327:28	6327:33	6	td = & tif -> tif_dir
LVAL	6327:28	6327:28	7	td
NAME	6327:28	6327:28	8	td
LEAF_NODE	6327:28	6327:28	9	td
ASSIGN_OP	6327:31	6327:31	7	=
LEAF_NODE	6327:31	6327:31	8	=
RVAL	6327:33	6327:33	7	& tif -> tif_dir
UNARY_EXPR	6327:33	6327:34	8	& tif -> tif_dir
UNARY_OPERATOR	6327:33	6327:33	9	&
LEAF_NODE	6327:33	6327:33	10	&
FIELD	6327:34	6327:39	9	tif -> tif_dir
LEAF_NODE	6327:34	6327:34	10	tif
LEAF_NODE	6327:37	6327:37	10	->
LEAF_NODE	6327:39	6327:39	10	tif_dir
LEAF_NODE	6327:46	6327:46	4	;
SIMPLE_DECL	6328:4	6328:24	3	int return_value ; return_value = 1 ;
VAR_DECL	6328:4	6328:8	4	int return_value ; return_value = 1
TYPE	6328:4	6328:4	5	int
TYPE_NAME	6328:4	6328:4	6	int
LEAF_NODE	6328:4	6328:4	7	int
NAME	6328:8	6328:8	5	return_value
LEAF_NODE	6328:8	6328:8	6	return_value
LEAF_NODE	0:0	0:0	5	;
INIT	6328:8	6328:8	5	return_value = 1
ASSIGN	6328:8	6328:23	6	return_value = 1
LVAL	6328:8	6328:8	7	return_value
NAME	6328:8	6328:8	8	return_value
LEAF_NODE	6328:8	6328:8	9	return_value
ASSIGN_OP	6328:21	6328:21	7	=
LEAF_NODE	6328:21	6328:21	8	=
RVAL	6328:23	6328:23	7	1
FIELD	6328:23	6328:23	8	1
LEAF_NODE	6328:23	6328:23	9	1
LEAF_NODE	6328:24	6328:24	4	;
SELECTION	6331:4	6332:8	3	
KEYWORD	6331:4	6331:4	4	if
LEAF_NODE	6331:4	6331:4	5	if
LEAF_NODE	6331:6	6331:6	4	(
CONDITION	6331:8	6331:8	4	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) || ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS ) != 0
EXPR	6331:8	6331:8	5	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) || ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS ) != 0
OR	6331:8	6331:50	6	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD ) || ( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS ) != 0
EXPR	6331:8	6331:8	7	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_EXPR	6331:8	6331:45	8	! ( tif -> tif_flags & TIFF_DEFERSTRILELOAD )
UNARY_OPERATOR	6331:8	6331:8	9	!
LEAF_NODE	6331:8	6331:8	10	!
LEAF_NODE	6331:9	6331:9	9	(
FIELD	6331:10	6331:15	9	tif -> tif_flags
LEAF_NODE	6331:10	6331:10	10	tif
LEAF_NODE	6331:13	6331:13	10	->
LEAF_NODE	6331:15	6331:15	10	tif_flags
LEAF_NODE	6331:24	6331:24	9	&
FIELD	6331:25	6331:25	9	TIFF_DEFERSTRILELOAD
LEAF_NODE	6331:25	6331:25	10	TIFF_DEFERSTRILELOAD
LEAF_NODE	6331:45	6331:45	9	)
LEAF_NODE	6331:47	6331:47	7	||
EXPR	6331:50	6331:91	7	( tif -> tif_flags & TIFF_CHOPPEDUPARRAYS ) != 0
LEAF_NODE	6331:50	6331:50	8	(
FIELD	6331:51	6331:56	8	tif -> tif_flags
LEAF_NODE	6331:51	6331:51	9	tif
LEAF_NODE	6331:54	6331:54	9	->
LEAF_NODE	6331:56	6331:56	9	tif_flags
LEAF_NODE	6331:65	6331:65	8	&
FIELD	6331:66	6331:66	8	TIFF_CHOPPEDUPARRAYS
LEAF_NODE	6331:66	6331:66	9	TIFF_CHOPPEDUPARRAYS
LEAF_NODE	6331:86	6331:86	8	)
EQ_OPERATOR	6331:88	6331:88	8	!=
LEAF_NODE	6331:88	6331:88	9	!=
FIELD	6331:91	6331:91	8	0
LEAF_NODE	6331:91	6331:91	9	0
LEAF_NODE	6331:93	6331:93	4	)
STATEMENTS	6332:8	6332:8	4	
JUMP_STATEMENT	6332:8	6332:16	5	return 1 ;
KEYWORD	6332:8	6332:8	6	return
LEAF_NODE	6332:8	6332:8	7	return
DESTINATION	6332:15	6332:15	6	1
EXPR	6332:15	6332:15	7	1
FIELD	6332:15	6332:15	8	1
LEAF_NODE	6332:15	6332:15	9	1
LEAF_NODE	6332:16	6332:16	6	;
SELECTION	6334:4	6335:4	3	
KEYWORD	6334:4	6334:4	4	if
LEAF_NODE	6334:4	6334:4	5	if
LEAF_NODE	6334:6	6334:6	4	(
CONDITION	6334:8	6334:8	4	tif -> tif_flags & TIFF_LAZYSTRILELOAD
EXPR	6334:8	6334:23	5	tif -> tif_flags & TIFF_LAZYSTRILELOAD
FIELD	6334:8	6334:13	6	tif -> tif_flags
LEAF_NODE	6334:8	6334:8	7	tif
LEAF_NODE	6334:11	6334:11	7	->
LEAF_NODE	6334:13	6334:13	7	tif_flags
LEAF_NODE	6334:22	6334:22	6	&
FIELD	6334:23	6334:23	6	TIFF_LAZYSTRILELOAD
LEAF_NODE	6334:23	6334:23	7	TIFF_LAZYSTRILELOAD
LEAF_NODE	6334:43	6334:43	4	)
STATEMENTS	6335:4	6343:4	4	
LEAF_NODE	6335:4	6335:4	5	{
STATEMENTS	6337:8	6342:8	5	
EXPR_STATEMENT	6337:8	6337:39	6	_TIFFfree ( td -> td_stripoffset_p ) ;
EXPR	6337:8	6337:8	7	_TIFFfree ( td -> td_stripoffset_p )
FUNCTION_CALL	6337:8	6337:38	8	_TIFFfree ( td -> td_stripoffset_p )
CALLEE	6337:8	6337:8	9	_TIFFfree
LEAF_NODE	6337:8	6337:8	10	_TIFFfree
LEAF_NODE	6337:17	6337:17	9	(
ARGUMENT	6337:18	6337:18	9	td -> td_stripoffset_p
FIELD	6337:18	6337:22	10	td -> td_stripoffset_p
LEAF_NODE	6337:18	6337:18	11	td
LEAF_NODE	6337:20	6337:20	11	->
LEAF_NODE	6337:22	6337:22	11	td_stripoffset_p
LEAF_NODE	6337:38	6337:38	9	)
LEAF_NODE	6337:39	6337:39	7	;
EXPR_STATEMENT	6338:8	6338:42	6	_TIFFfree ( td -> td_stripbytecount_p ) ;
EXPR	6338:8	6338:8	7	_TIFFfree ( td -> td_stripbytecount_p )
FUNCTION_CALL	6338:8	6338:41	8	_TIFFfree ( td -> td_stripbytecount_p )
CALLEE	6338:8	6338:8	9	_TIFFfree
LEAF_NODE	6338:8	6338:8	10	_TIFFfree
LEAF_NODE	6338:17	6338:17	9	(
ARGUMENT	6338:18	6338:18	9	td -> td_stripbytecount_p
FIELD	6338:18	6338:22	10	td -> td_stripbytecount_p
LEAF_NODE	6338:18	6338:18	11	td
LEAF_NODE	6338:20	6338:20	11	->
LEAF_NODE	6338:22	6338:22	11	td_stripbytecount_p
LEAF_NODE	6338:41	6338:41	9	)
LEAF_NODE	6338:42	6338:42	7	;
EXPR_STATEMENT	6339:8	6339:35	6	td -> td_stripoffset_p = NULL ;
EXPR	6339:8	6339:8	7	td -> td_stripoffset_p = NULL
ASSIGN	6339:8	6339:31	8	td -> td_stripoffset_p = NULL
LVAL	6339:8	6339:8	9	td -> td_stripoffset_p
FIELD	6339:8	6339:12	10	td -> td_stripoffset_p
LEAF_NODE	6339:8	6339:8	11	td
LEAF_NODE	6339:10	6339:10	11	->
LEAF_NODE	6339:12	6339:12	11	td_stripoffset_p
ASSIGN_OP	6339:29	6339:29	9	=
LEAF_NODE	6339:29	6339:29	10	=
RVAL	6339:31	6339:31	9	NULL
FIELD	6339:31	6339:31	10	NULL
LEAF_NODE	6339:31	6339:31	11	NULL
LEAF_NODE	6339:35	6339:35	7	;
EXPR_STATEMENT	6340:8	6340:38	6	td -> td_stripbytecount_p = NULL ;
EXPR	6340:8	6340:8	7	td -> td_stripbytecount_p = NULL
ASSIGN	6340:8	6340:34	8	td -> td_stripbytecount_p = NULL
LVAL	6340:8	6340:8	9	td -> td_stripbytecount_p
FIELD	6340:8	6340:12	10	td -> td_stripbytecount_p
LEAF_NODE	6340:8	6340:8	11	td
LEAF_NODE	6340:10	6340:10	11	->
LEAF_NODE	6340:12	6340:12	11	td_stripbytecount_p
ASSIGN_OP	6340:32	6340:32	9	=
LEAF_NODE	6340:32	6340:32	10	=
RVAL	6340:34	6340:34	9	NULL
FIELD	6340:34	6340:34	10	NULL
LEAF_NODE	6340:34	6340:34	11	NULL
LEAF_NODE	6340:38	6340:38	7	;
EXPR_STATEMENT	6341:8	6341:43	6	td -> td_stripoffsetbyteallocsize = 0 ;
EXPR	6341:8	6341:8	7	td -> td_stripoffsetbyteallocsize = 0
ASSIGN	6341:8	6341:42	8	td -> td_stripoffsetbyteallocsize = 0
LVAL	6341:8	6341:8	9	td -> td_stripoffsetbyteallocsize
FIELD	6341:8	6341:12	10	td -> td_stripoffsetbyteallocsize
LEAF_NODE	6341:8	6341:8	11	td
LEAF_NODE	6341:10	6341:10	11	->
LEAF_NODE	6341:12	6341:12	11	td_stripoffsetbyteallocsize
ASSIGN_OP	6341:40	6341:40	9	=
LEAF_NODE	6341:40	6341:40	10	=
RVAL	6341:42	6341:42	9	0
FIELD	6341:42	6341:42	10	0
LEAF_NODE	6341:42	6341:42	11	0
LEAF_NODE	6341:43	6341:43	7	;
EXPR_STATEMENT	6342:8	6342:46	6	tif -> tif_flags &= ~TIFF_LAZYSTRILELOAD ;
EXPR	6342:8	6342:8	7	tif -> tif_flags &= ~TIFF_LAZYSTRILELOAD
ASSIGN	6342:8	6342:26	8	tif -> tif_flags &= ~TIFF_LAZYSTRILELOAD
LVAL	6342:8	6342:8	9	tif -> tif_flags
FIELD	6342:8	6342:13	10	tif -> tif_flags
LEAF_NODE	6342:8	6342:8	11	tif
LEAF_NODE	6342:11	6342:11	11	->
LEAF_NODE	6342:13	6342:13	11	tif_flags
ASSIGN_OP	6342:23	6342:23	9	&=
LEAF_NODE	6342:23	6342:23	10	&=
RVAL	6342:26	6342:26	9	~TIFF_LAZYSTRILELOAD
FIELD	6342:26	6342:26	10	~TIFF_LAZYSTRILELOAD
LEAF_NODE	6342:26	6342:26	11	~TIFF_LAZYSTRILELOAD
LEAF_NODE	6342:46	6342:46	7	;
LEAF_NODE	6343:4	6343:4	5	}
SELECTION	6346:4	6347:12	3	
KEYWORD	6346:4	6346:4	4	if
LEAF_NODE	6346:4	6346:4	5	if
LEAF_NODE	6346:6	6346:6	4	(
CONDITION	6346:8	6346:8	4	td -> td_stripoffset_p != NULL
EXPR	6346:8	6346:32	5	td -> td_stripoffset_p != NULL
FIELD	6346:8	6346:12	6	td -> td_stripoffset_p
LEAF_NODE	6346:8	6346:8	7	td
LEAF_NODE	6346:10	6346:10	7	->
LEAF_NODE	6346:12	6346:12	7	td_stripoffset_p
EQ_OPERATOR	6346:29	6346:29	6	!=
LEAF_NODE	6346:29	6346:29	7	!=
FIELD	6346:32	6346:32	6	NULL
LEAF_NODE	6346:32	6346:32	7	NULL
LEAF_NODE	6346:37	6346:37	4	)
STATEMENTS	6347:12	6347:12	4	
JUMP_STATEMENT	6347:12	6347:20	5	return 1 ;
KEYWORD	6347:12	6347:12	6	return
LEAF_NODE	6347:12	6347:12	7	return
DESTINATION	6347:19	6347:19	6	1
EXPR	6347:19	6347:19	7	1
FIELD	6347:19	6347:19	8	1
LEAF_NODE	6347:19	6347:19	9	1
LEAF_NODE	6347:20	6347:20	6	;
SELECTION	6350:4	6351:12	3	
KEYWORD	6350:4	6350:4	4	if
LEAF_NODE	6350:4	6350:4	5	if
LEAF_NODE	6350:6	6350:6	4	(
CONDITION	6350:8	6350:8	4	td -> td_stripoffset_entry . tdir_count == 0
EXPR	6350:8	6350:47	5	td -> td_stripoffset_entry . tdir_count == 0
FIELD	6350:8	6350:33	6	td -> td_stripoffset_entry . tdir_count
LEAF_NODE	6350:8	6350:8	7	td
LEAF_NODE	6350:10	6350:10	7	->
LEAF_NODE	6350:12	6350:12	7	td_stripoffset_entry
LEAF_NODE	6350:32	6350:32	7	.
LEAF_NODE	6350:33	6350:33	7	tdir_count
EQ_OPERATOR	6350:44	6350:44	6	==
LEAF_NODE	6350:44	6350:44	7	==
FIELD	6350:47	6350:47	6	0
LEAF_NODE	6350:47	6350:47	7	0
LEAF_NODE	6350:49	6350:49	4	)
STATEMENTS	6351:12	6351:12	4	
JUMP_STATEMENT	6351:12	6351:20	5	return 0 ;
KEYWORD	6351:12	6351:12	6	return
LEAF_NODE	6351:12	6351:12	7	return
DESTINATION	6351:19	6351:19	6	0
EXPR	6351:19	6351:19	7	0
FIELD	6351:19	6351:19	8	0
LEAF_NODE	6351:19	6351:19	9	0
LEAF_NODE	6351:20	6351:20	6	;
SELECTION	6353:4	6355:4	3	
KEYWORD	6353:4	6353:4	4	if
LEAF_NODE	6353:4	6353:4	5	if
LEAF_NODE	6353:7	6353:7	4	(
CONDITION	6353:8	6353:8	4	! TIFFFetchStripThing ( tif , & ( td -> td_stripoffset_entry ) , td -> td_nstrips , & td -> td_stripoffset_p )
EXPR	6353:8	6353:8	5	! TIFFFetchStripThing ( tif , & ( td -> td_stripoffset_entry ) , td -> td_nstrips , & td -> td_stripoffset_p )
UNARY_EXPR	6353:8	6353:9	6	! TIFFFetchStripThing ( tif , & ( td -> td_stripoffset_entry ) , td -> td_nstrips , & td -> td_stripoffset_p )
UNARY_OPERATOR	6353:8	6353:8	7	!
LEAF_NODE	6353:8	6353:8	8	!
FUNCTION_CALL	6353:9	6354:68	7	TIFFFetchStripThing ( tif , & ( td -> td_stripoffset_entry ) , td -> td_nstrips , & td -> td_stripoffset_p )
CALLEE	6353:9	6353:9	8	TIFFFetchStripThing
LEAF_NODE	6353:9	6353:9	9	TIFFFetchStripThing
LEAF_NODE	6353:28	6353:28	8	(
ARGUMENT	6353:29	6353:29	8	tif
FIELD	6353:29	6353:29	9	tif
LEAF_NODE	6353:29	6353:29	10	tif
LEAF_NODE	6353:32	6353:32	8	,
ARGUMENT	6353:33	6353:33	8	& ( td -> td_stripoffset_entry )
UNARY_EXPR	6353:33	6353:59	9	& ( td -> td_stripoffset_entry )
UNARY_OPERATOR	6353:33	6353:33	10	&
LEAF_NODE	6353:33	6353:33	11	&
LEAF_NODE	6353:34	6353:34	10	(
FIELD	6353:35	6353:39	10	td -> td_stripoffset_entry
LEAF_NODE	6353:35	6353:35	11	td
LEAF_NODE	6353:37	6353:37	11	->
LEAF_NODE	6353:39	6353:39	11	td_stripoffset_entry
LEAF_NODE	6353:59	6353:59	10	)
LEAF_NODE	6353:60	6353:60	8	,
ARGUMENT	6354:32	6354:32	8	td -> td_nstrips
FIELD	6354:32	6354:36	9	td -> td_nstrips
LEAF_NODE	6354:32	6354:32	10	td
LEAF_NODE	6354:34	6354:34	10	->
LEAF_NODE	6354:36	6354:36	10	td_nstrips
LEAF_NODE	6354:46	6354:46	8	,
ARGUMENT	6354:47	6354:47	8	& td -> td_stripoffset_p
UNARY_EXPR	6354:47	6354:48	9	& td -> td_stripoffset_p
UNARY_OPERATOR	6354:47	6354:47	10	&
LEAF_NODE	6354:47	6354:47	11	&
FIELD	6354:48	6354:52	10	td -> td_stripoffset_p
LEAF_NODE	6354:48	6354:48	11	td
LEAF_NODE	6354:50	6354:50	11	->
LEAF_NODE	6354:52	6354:52	11	td_stripoffset_p
LEAF_NODE	6354:68	6354:68	8	)
LEAF_NODE	6354:69	6354:69	4	)
STATEMENTS	6355:4	6357:4	4	
LEAF_NODE	6355:4	6355:4	5	{
STATEMENTS	6356:12	6356:12	5	
EXPR_STATEMENT	6356:12	6356:28	6	return_value = 0 ;
EXPR	6356:12	6356:12	7	return_value = 0
ASSIGN	6356:12	6356:27	8	return_value = 0
LVAL	6356:12	6356:12	9	return_value
FIELD	6356:12	6356:12	10	return_value
LEAF_NODE	6356:12	6356:12	11	return_value
ASSIGN_OP	6356:25	6356:25	9	=
LEAF_NODE	6356:25	6356:25	10	=
RVAL	6356:27	6356:27	9	0
FIELD	6356:27	6356:27	10	0
LEAF_NODE	6356:27	6356:27	11	0
LEAF_NODE	6356:28	6356:28	7	;
LEAF_NODE	6357:4	6357:4	5	}
SELECTION	6359:4	6362:4	3	
KEYWORD	6359:4	6359:4	4	if
LEAF_NODE	6359:4	6359:4	5	if
LEAF_NODE	6359:7	6359:7	4	(
CONDITION	6359:8	6359:8	4	loadStripByteCount && ! TIFFFetchStripThing ( tif , & ( td -> td_stripbytecount_entry ) , td -> td_nstrips , & td -> td_stripbytecount_p )
EXPR	6359:8	6359:8	5	loadStripByteCount && ! TIFFFetchStripThing ( tif , & ( td -> td_stripbytecount_entry ) , td -> td_nstrips , & td -> td_stripbytecount_p )
AND	6359:8	6360:8	6	loadStripByteCount && ! TIFFFetchStripThing ( tif , & ( td -> td_stripbytecount_entry ) , td -> td_nstrips , & td -> td_stripbytecount_p )
EXPR	6359:8	6359:8	7	loadStripByteCount
FIELD	6359:8	6359:8	8	loadStripByteCount
LEAF_NODE	6359:8	6359:8	9	loadStripByteCount
LEAF_NODE	6359:27	6359:27	7	&&
EXPR	6360:8	6360:8	7	! TIFFFetchStripThing ( tif , & ( td -> td_stripbytecount_entry ) , td -> td_nstrips , & td -> td_stripbytecount_p )
UNARY_EXPR	6360:8	6360:9	8	! TIFFFetchStripThing ( tif , & ( td -> td_stripbytecount_entry ) , td -> td_nstrips , & td -> td_stripbytecount_p )
UNARY_OPERATOR	6360:8	6360:8	9	!
LEAF_NODE	6360:8	6360:8	10	!
FUNCTION_CALL	6360:9	6361:71	9	TIFFFetchStripThing ( tif , & ( td -> td_stripbytecount_entry ) , td -> td_nstrips , & td -> td_stripbytecount_p )
CALLEE	6360:9	6360:9	10	TIFFFetchStripThing
LEAF_NODE	6360:9	6360:9	11	TIFFFetchStripThing
LEAF_NODE	6360:28	6360:28	10	(
ARGUMENT	6360:29	6360:29	10	tif
FIELD	6360:29	6360:29	11	tif
LEAF_NODE	6360:29	6360:29	12	tif
LEAF_NODE	6360:32	6360:32	10	,
ARGUMENT	6360:33	6360:33	10	& ( td -> td_stripbytecount_entry )
UNARY_EXPR	6360:33	6360:62	11	& ( td -> td_stripbytecount_entry )
UNARY_OPERATOR	6360:33	6360:33	12	&
LEAF_NODE	6360:33	6360:33	13	&
LEAF_NODE	6360:34	6360:34	12	(
FIELD	6360:35	6360:39	12	td -> td_stripbytecount_entry
LEAF_NODE	6360:35	6360:35	13	td
LEAF_NODE	6360:37	6360:37	13	->
LEAF_NODE	6360:39	6360:39	13	td_stripbytecount_entry
LEAF_NODE	6360:62	6360:62	12	)
LEAF_NODE	6360:63	6360:63	10	,
ARGUMENT	6361:32	6361:32	10	td -> td_nstrips
FIELD	6361:32	6361:36	11	td -> td_nstrips
LEAF_NODE	6361:32	6361:32	12	td
LEAF_NODE	6361:34	6361:34	12	->
LEAF_NODE	6361:36	6361:36	12	td_nstrips
LEAF_NODE	6361:46	6361:46	10	,
ARGUMENT	6361:47	6361:47	10	& td -> td_stripbytecount_p
UNARY_EXPR	6361:47	6361:48	11	& td -> td_stripbytecount_p
UNARY_OPERATOR	6361:47	6361:47	12	&
LEAF_NODE	6361:47	6361:47	13	&
FIELD	6361:48	6361:52	12	td -> td_stripbytecount_p
LEAF_NODE	6361:48	6361:48	13	td
LEAF_NODE	6361:50	6361:50	13	->
LEAF_NODE	6361:52	6361:52	13	td_stripbytecount_p
LEAF_NODE	6361:71	6361:71	10	)
LEAF_NODE	6361:72	6361:72	4	)
STATEMENTS	6362:4	6364:4	4	
LEAF_NODE	6362:4	6362:4	5	{
STATEMENTS	6363:12	6363:12	5	
EXPR_STATEMENT	6363:12	6363:28	6	return_value = 0 ;
EXPR	6363:12	6363:12	7	return_value = 0
ASSIGN	6363:12	6363:27	8	return_value = 0
LVAL	6363:12	6363:12	9	return_value
FIELD	6363:12	6363:12	10	return_value
LEAF_NODE	6363:12	6363:12	11	return_value
ASSIGN_OP	6363:25	6363:25	9	=
LEAF_NODE	6363:25	6363:25	10	=
RVAL	6363:27	6363:27	9	0
FIELD	6363:27	6363:27	10	0
LEAF_NODE	6363:27	6363:27	11	0
LEAF_NODE	6363:28	6363:28	7	;
LEAF_NODE	6364:4	6364:4	5	}
EXPR_STATEMENT	6366:4	6366:70	3	_TIFFmemset ( & ( td -> td_stripoffset_entry ) , 0 , sizeof ( TIFFDirEntry ) ) ;
EXPR	6366:4	6366:4	4	_TIFFmemset ( & ( td -> td_stripoffset_entry ) , 0 , sizeof ( TIFFDirEntry ) )
FUNCTION_CALL	6366:4	6366:69	5	_TIFFmemset ( & ( td -> td_stripoffset_entry ) , 0 , sizeof ( TIFFDirEntry ) )
CALLEE	6366:4	6366:4	6	_TIFFmemset
LEAF_NODE	6366:4	6366:4	7	_TIFFmemset
LEAF_NODE	6366:15	6366:15	6	(
ARGUMENT	6366:17	6366:17	6	& ( td -> td_stripoffset_entry )
UNARY_EXPR	6366:17	6366:43	7	& ( td -> td_stripoffset_entry )
UNARY_OPERATOR	6366:17	6366:17	8	&
LEAF_NODE	6366:17	6366:17	9	&
LEAF_NODE	6366:18	6366:18	8	(
FIELD	6366:19	6366:23	8	td -> td_stripoffset_entry
LEAF_NODE	6366:19	6366:19	9	td
LEAF_NODE	6366:21	6366:21	9	->
LEAF_NODE	6366:23	6366:23	9	td_stripoffset_entry
LEAF_NODE	6366:43	6366:43	8	)
LEAF_NODE	6366:44	6366:44	6	,
ARGUMENT	6366:46	6366:46	6	0
FIELD	6366:46	6366:46	7	0
LEAF_NODE	6366:46	6366:46	8	0
LEAF_NODE	6366:47	6366:47	6	,
ARGUMENT	6366:49	6366:49	6	sizeof ( TIFFDirEntry )
FUNCTION_CALL	6366:49	6366:68	7	sizeof ( TIFFDirEntry )
CALLEE	6366:49	6366:49	8	sizeof
LEAF_NODE	6366:49	6366:49	9	sizeof
LEAF_NODE	6366:55	6366:55	8	(
ARGUMENT	6366:56	6366:56	8	TIFFDirEntry
FIELD	6366:56	6366:56	9	TIFFDirEntry
LEAF_NODE	6366:56	6366:56	10	TIFFDirEntry
LEAF_NODE	6366:68	6366:68	8	)
LEAF_NODE	6366:69	6366:69	6	)
LEAF_NODE	6366:70	6366:70	4	;
EXPR_STATEMENT	6367:4	6367:73	3	_TIFFmemset ( & ( td -> td_stripbytecount_entry ) , 0 , sizeof ( TIFFDirEntry ) ) ;
EXPR	6367:4	6367:4	4	_TIFFmemset ( & ( td -> td_stripbytecount_entry ) , 0 , sizeof ( TIFFDirEntry ) )
FUNCTION_CALL	6367:4	6367:72	5	_TIFFmemset ( & ( td -> td_stripbytecount_entry ) , 0 , sizeof ( TIFFDirEntry ) )
CALLEE	6367:4	6367:4	6	_TIFFmemset
LEAF_NODE	6367:4	6367:4	7	_TIFFmemset
LEAF_NODE	6367:15	6367:15	6	(
ARGUMENT	6367:17	6367:17	6	& ( td -> td_stripbytecount_entry )
UNARY_EXPR	6367:17	6367:46	7	& ( td -> td_stripbytecount_entry )
UNARY_OPERATOR	6367:17	6367:17	8	&
LEAF_NODE	6367:17	6367:17	9	&
LEAF_NODE	6367:18	6367:18	8	(
FIELD	6367:19	6367:23	8	td -> td_stripbytecount_entry
LEAF_NODE	6367:19	6367:19	9	td
LEAF_NODE	6367:21	6367:21	9	->
LEAF_NODE	6367:23	6367:23	9	td_stripbytecount_entry
LEAF_NODE	6367:46	6367:46	8	)
LEAF_NODE	6367:47	6367:47	6	,
ARGUMENT	6367:49	6367:49	6	0
FIELD	6367:49	6367:49	7	0
LEAF_NODE	6367:49	6367:49	8	0
LEAF_NODE	6367:50	6367:50	6	,
ARGUMENT	6367:52	6367:52	6	sizeof ( TIFFDirEntry )
FUNCTION_CALL	6367:52	6367:71	7	sizeof ( TIFFDirEntry )
CALLEE	6367:52	6367:52	8	sizeof
LEAF_NODE	6367:52	6367:52	9	sizeof
LEAF_NODE	6367:58	6367:58	8	(
ARGUMENT	6367:59	6367:59	8	TIFFDirEntry
FIELD	6367:59	6367:59	9	TIFFDirEntry
LEAF_NODE	6367:59	6367:59	10	TIFFDirEntry
LEAF_NODE	6367:71	6367:71	8	)
LEAF_NODE	6367:72	6367:72	6	)
LEAF_NODE	6367:73	6367:73	4	;
SELECTION	6370:4	6370:59	3	
KEYWORD	6370:4	6370:4	4	if
LEAF_NODE	6370:4	6370:4	5	if
LEAF_NODE	6370:7	6370:7	4	(
CONDITION	6370:8	6370:8	4	tif -> tif_dir . td_nstrips > 1 && return_value == 1
EXPR	6370:8	6370:8	5	tif -> tif_dir . td_nstrips > 1 && return_value == 1
AND	6370:8	6370:39	6	tif -> tif_dir . td_nstrips > 1 && return_value == 1
EXPR	6370:8	6370:34	7	tif -> tif_dir . td_nstrips > 1
FIELD	6370:8	6370:21	8	tif -> tif_dir . td_nstrips
LEAF_NODE	6370:8	6370:8	9	tif
LEAF_NODE	6370:11	6370:11	9	->
LEAF_NODE	6370:13	6370:13	9	tif_dir
LEAF_NODE	6370:20	6370:20	9	.
LEAF_NODE	6370:21	6370:21	9	td_nstrips
REL_OPERATOR	6370:32	6370:32	8	>
LEAF_NODE	6370:32	6370:32	9	>
FIELD	6370:34	6370:34	8	1
LEAF_NODE	6370:34	6370:34	9	1
LEAF_NODE	6370:36	6370:36	7	&&
EXPR	6370:39	6370:55	7	return_value == 1
FIELD	6370:39	6370:39	8	return_value
LEAF_NODE	6370:39	6370:39	9	return_value
EQ_OPERATOR	6370:52	6370:52	8	==
LEAF_NODE	6370:52	6370:52	9	==
FIELD	6370:55	6370:55	8	1
LEAF_NODE	6370:55	6370:55	9	1
LEAF_NODE	6370:57	6370:57	4	)
STATEMENTS	6370:59	6381:4	4	
LEAF_NODE	6370:59	6370:59	5	{
STATEMENTS	6371:12	6374:12	5	
SIMPLE_DECL	6371:12	6371:24	6	uint32 strip ;
VAR_DECL	6371:12	6371:19	7	uint32 strip
TYPE	6371:12	6371:12	8	uint32
TYPE_NAME	6371:12	6371:12	9	uint32
LEAF_NODE	6371:12	6371:12	10	uint32
NAME	6371:19	6371:19	8	strip
LEAF_NODE	6371:19	6371:19	9	strip
LEAF_NODE	6371:24	6371:24	7	;
EXPR_STATEMENT	6373:12	6373:52	6	tif -> tif_dir . td_stripbytecountsorted = 1 ;
EXPR	6373:12	6373:12	7	tif -> tif_dir . td_stripbytecountsorted = 1
ASSIGN	6373:12	6373:51	8	tif -> tif_dir . td_stripbytecountsorted = 1
LVAL	6373:12	6373:12	9	tif -> tif_dir . td_stripbytecountsorted
FIELD	6373:12	6373:25	10	tif -> tif_dir . td_stripbytecountsorted
LEAF_NODE	6373:12	6373:12	11	tif
LEAF_NODE	6373:15	6373:15	11	->
LEAF_NODE	6373:17	6373:17	11	tif_dir
LEAF_NODE	6373:24	6373:24	11	.
LEAF_NODE	6373:25	6373:25	11	td_stripbytecountsorted
ASSIGN_OP	6373:49	6373:49	9	=
LEAF_NODE	6373:49	6373:49	10	=
RVAL	6373:51	6373:51	9	1
FIELD	6373:51	6373:51	10	1
LEAF_NODE	6373:51	6373:51	11	1
LEAF_NODE	6373:52	6373:52	7	;
ITERATION	6374:12	6374:70	6	
KEYWORD	6374:12	6374:12	7	for
LEAF_NODE	6374:12	6374:12	8	for
LEAF_NODE	6374:16	6374:16	7	(
FOR_INIT	6374:17	6374:26	7	strip = 1 ;
EXPR	6374:17	6374:17	8	strip = 1
ASSIGN	6374:17	6374:25	9	strip = 1
LVAL	6374:17	6374:17	10	strip
FIELD	6374:17	6374:17	11	strip
LEAF_NODE	6374:17	6374:17	12	strip
ASSIGN_OP	6374:23	6374:23	10	=
LEAF_NODE	6374:23	6374:23	11	=
RVAL	6374:25	6374:25	10	1
FIELD	6374:25	6374:25	11	1
LEAF_NODE	6374:25	6374:25	12	1
LEAF_NODE	6374:26	6374:26	8	;
CONDITION	6374:28	6374:28	7	strip < tif -> tif_dir . td_nstrips
EXPR	6374:28	6374:36	8	strip < tif -> tif_dir . td_nstrips
FIELD	6374:28	6374:28	9	strip
LEAF_NODE	6374:28	6374:28	10	strip
REL_OPERATOR	6374:34	6374:34	9	<
LEAF_NODE	6374:34	6374:34	10	<
FIELD	6374:36	6374:49	9	tif -> tif_dir . td_nstrips
LEAF_NODE	6374:36	6374:36	10	tif
LEAF_NODE	6374:39	6374:39	10	->
LEAF_NODE	6374:41	6374:41	10	tif_dir
LEAF_NODE	6374:48	6374:48	10	.
LEAF_NODE	6374:49	6374:49	10	td_nstrips
LEAF_NODE	6374:59	6374:59	7	;
FOR_EXPR	6374:61	6374:61	7	strip ++
EXPR	6374:61	6374:61	8	strip ++
FIELD	6374:61	6374:66	9	strip ++
LEAF_NODE	6374:61	6374:61	10	strip
LEAF_NODE	6374:66	6374:66	10	++
LEAF_NODE	6374:68	6374:68	7	)
STATEMENTS	6374:70	6380:12	7	
LEAF_NODE	6374:70	6374:70	8	{
STATEMENTS	6375:20	6375:20	8	
SELECTION	6375:20	6376:62	9	
KEYWORD	6375:20	6375:20	10	if
LEAF_NODE	6375:20	6375:20	11	if
LEAF_NODE	6375:23	6375:23	10	(
CONDITION	6375:24	6375:24	10	tif -> tif_dir . td_stripoffset_p [ strip - 1 ] > tif -> tif_dir . td_stripoffset_p [ strip ]
EXPR	6375:24	6376:24	11	tif -> tif_dir . td_stripoffset_p [ strip - 1 ] > tif -> tif_dir . td_stripoffset_p [ strip ]
FIELD	6375:24	6375:63	12	tif -> tif_dir . td_stripoffset_p [ strip - 1 ]
LEAF_NODE	6375:24	6375:24	13	tif
LEAF_NODE	6375:27	6375:27	13	->
LEAF_NODE	6375:29	6375:29	13	tif_dir
LEAF_NODE	6375:36	6375:36	13	.
LEAF_NODE	6375:37	6375:37	13	td_stripoffset_p
LEAF_NODE	6375:53	6375:53	13	[
EXPR	6375:54	6375:62	13	strip - 1
FIELD	6375:54	6375:54	14	strip
LEAF_NODE	6375:54	6375:54	15	strip
LEAF_NODE	6375:60	6375:60	14	-
FIELD	6375:62	6375:62	14	1
LEAF_NODE	6375:62	6375:62	15	1
LEAF_NODE	6375:63	6375:63	13	]
REL_OPERATOR	6375:65	6375:65	12	>
LEAF_NODE	6375:65	6375:65	13	>
FIELD	6376:24	6376:59	12	tif -> tif_dir . td_stripoffset_p [ strip ]
LEAF_NODE	6376:24	6376:24	13	tif
LEAF_NODE	6376:27	6376:27	13	->
LEAF_NODE	6376:29	6376:29	13	tif_dir
LEAF_NODE	6376:36	6376:36	13	.
LEAF_NODE	6376:37	6376:37	13	td_stripoffset_p
LEAF_NODE	6376:53	6376:53	13	[
EXPR	6376:54	6376:54	13	strip
FIELD	6376:54	6376:54	14	strip
LEAF_NODE	6376:54	6376:54	15	strip
LEAF_NODE	6376:59	6376:59	13	]
LEAF_NODE	6376:60	6376:60	10	)
STATEMENTS	6376:62	6379:20	10	
LEAF_NODE	6376:62	6376:62	11	{
STATEMENTS	6377:28	6378:28	11	
EXPR_STATEMENT	6377:28	6377:68	12	tif -> tif_dir . td_stripbytecountsorted = 0 ;
EXPR	6377:28	6377:28	13	tif -> tif_dir . td_stripbytecountsorted = 0
ASSIGN	6377:28	6377:67	14	tif -> tif_dir . td_stripbytecountsorted = 0
LVAL	6377:28	6377:28	15	tif -> tif_dir . td_stripbytecountsorted
FIELD	6377:28	6377:41	16	tif -> tif_dir . td_stripbytecountsorted
LEAF_NODE	6377:28	6377:28	17	tif
LEAF_NODE	6377:31	6377:31	17	->
LEAF_NODE	6377:33	6377:33	17	tif_dir
LEAF_NODE	6377:40	6377:40	17	.
LEAF_NODE	6377:41	6377:41	17	td_stripbytecountsorted
ASSIGN_OP	6377:65	6377:65	15	=
LEAF_NODE	6377:65	6377:65	16	=
RVAL	6377:67	6377:67	15	0
FIELD	6377:67	6377:67	16	0
LEAF_NODE	6377:67	6377:67	17	0
LEAF_NODE	6377:68	6377:68	13	;
JUMP_STATEMENT	6378:28	6378:33	12	break DESTINATION ;
KEYWORD	6378:28	6378:28	13	break
LEAF_NODE	6378:28	6378:28	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	6378:33	6378:33	13	;
LEAF_NODE	6379:20	6379:20	11	}
LEAF_NODE	6380:12	6380:12	8	}
LEAF_NODE	6381:4	6381:4	5	}
JUMP_STATEMENT	6384:4	6384:23	3	return return_value ;
KEYWORD	6384:4	6384:4	4	return
LEAF_NODE	6384:4	6384:4	5	return
DESTINATION	6384:11	6384:11	4	return_value
EXPR	6384:11	6384:11	5	return_value
FIELD	6384:11	6384:11	6	return_value
LEAF_NODE	6384:11	6384:11	7	return_value
LEAF_NODE	6384:23	6384:23	4	;
LEAF_NODE	6385:0	6385:0	2	}
